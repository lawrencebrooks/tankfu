
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  0000e590  0000e690  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e590  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f17  0080014a  0080014a  0000e6ea  2**5
                  ALLOC
  3 .stab         000009b4  00000000  00000000  0000e6dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000034b  00000000  00000000  0000f090  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f3db  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000007e8  00000000  00000000  0000f3f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000bb1d  00000000  00000000  0000fbd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001705  00000000  00000000  0001b6f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002779  00000000  00000000  0001cdfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019c4  00000000  00000000  0001f574  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000234a  00000000  00000000  00020f38  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000a458  00000000  00000000  00023282  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000908  00000000  00000000  0002d6e0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 59 35 	jmp	0x6ab2	; 0x6ab2 <__ctors_end>
       4:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
       8:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
       c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      10:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      14:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      18:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      1c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      20:	0c 94 55 3a 	jmp	0x74aa	; 0x74aa <__vector_8>
      24:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      28:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      2c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      30:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      34:	0c 94 14 38 	jmp	0x7028	; 0x7028 <__vector_13>
      38:	0c 94 53 38 	jmp	0x70a6	; 0x70a6 <__vector_14>
      3c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      40:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      44:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      48:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      4c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      50:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      54:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      58:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      5c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      60:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      64:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      68:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>
      6c:	0c 94 c4 35 	jmp	0x6b88	; 0x6b88 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	39 3c 3c 3c 98 3c 9c 3c a3 3c 44 3c 49 3c 4e 3c     9<<<.<.<.<D<I<N<
      ce:	ab 3c 51 3c 54 3c 57 3c 92 3c 95 3c bb 3c           .<Q<T<W<.<.<.<

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.2833>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.2829>:
      f5:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

00000104 <__c.2831>:
     104:	4f 4b 0d 0a 00                                      OK...

00000109 <__c.2825>:
     109:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     119:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     129:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

00000135 <__c.2827>:
     135:	4f 4b 0d 0a 00                                      OK...

0000013a <__c.2821>:
     13a:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     14a:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000158 <__c.2823>:
     158:	4f 4b 0d 0a 00                                      OK...

0000015d <__c.2819>:
     15d:	4f 4b 0d 0a 00                                      OK...

00000162 <__c.2815>:
     162:	41 54 2b 43 57 4c 41 50 0d 0a 00                    AT+CWLAP...

0000016d <__c.2817>:
     16d:	4f 4b 0d 0a 00                                      OK...

00000172 <__c.2811>:
     172:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 31 2c     AT+CWDHCP_CUR=1,
     182:	30 0d 0a 00                                         0...

00000186 <__c.2813>:
     186:	4f 4b 0d 0a 00                                      OK...

0000018b <__c.2807>:
     18b:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     19b:	0a 00                                               ..

0000019d <__c.2809>:
     19d:	4f 4b 0d 0a 00                                      OK...

000001a2 <__c.2801>:
     1a2:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000001af <__c.2797>:
     1af:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001be <__c.2799>:
     1be:	4f 4b 0d 0a 00                                      OK...

000001c3 <__c.2793>:
     1c3:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1d3:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1e3:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001f1 <__c.2795>:
     1f1:	4f 4b 0d 0a 00                                      OK...

000001f6 <__c.2791>:
     1f6:	4f 4b 0d 0a 00                                      OK...

000001fb <__c.2784>:
     1fb:	4f 4b 0d 0a 00                                      OK...

00000200 <__c.2782>:
     200:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     210:	0d 0a 00                                            ...

00000213 <__c.2778>:
     213:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     223:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000230 <__c.2780>:
     230:	4f 4b 0d 0a 00                                      OK...

00000235 <__c.2774>:
     235:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 30 2c     AT+CWDHCP_CUR=0,
     245:	30 0d 0a 00                                         0...

00000249 <__c.2776>:
     249:	4f 4b 0d 0a 00                                      OK...

0000024e <__c.2770>:
     24e:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     25e:	0a 00                                               ..

00000260 <__c.2772>:
     260:	4f 4b 0d 0a 00                                      OK...

00000265 <__c.2754>:
     265:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

00000273 <__c.2756>:
     273:	4f 4b 0d 0a 00                                      OK...

00000278 <__c.2750>:
     278:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000287 <__c.2752>:
     287:	4f 4b 0d 0a 00                                      OK...

0000028c <__c.2745>:
     28c:	2b 2b 2b 00                                         +++.

00000290 <__c.2720>:
     290:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 34 34 30     AT+UART_CUR=1440
     2a0:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

000002ac <__c.2722>:
     2ac:	4f 4b 0d 0a 00                                      OK...

000002b1 <__c.2714>:
     2b1:	41 54 0d 0a 00                                      AT...

000002b6 <__c.2716>:
     2b6:	4f 4b 0d 0a 00                                      OK...

000002bb <bauds>:
     2bb:	72 01 f6 00 b8 00 5c 00 3c 00 2c 00 1e 00           r.....\.<.,...

000002c9 <strCredits>:
     2c9:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     2d9:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2e9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2f9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     309:	4f 4b 53 00 00 00 00 00 4c 4f 4f 4b 49 4e 47 20     OKS.....LOOKING 
     319:	46 4f 52 20 57 49 46 49 20 44 45 56 49 43 45 2e     FOR WIFI DEVICE.
     329:	2e 2e 00 23 00                                      ...#.

0000032e <default_scores>:
     32e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     33e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000034c <default_handles>:
     34c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     35c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000036a <strLevels>:
     36a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     37a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     38a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     39a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     3aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     3ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     3ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     3da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     3ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     3fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     40a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000041a <strPaused>:
     41a:	50 41 55 53 45 44 00                                PAUSED.

00000421 <strExit>:
     421:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000042a <strTotal>:
     42a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000431 <strScore>:
     431:	53 43 4f 52 45 3a 00                                SCORE:.

00000438 <strFinalScore>:
     438:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000444 <strBy>:
     444:	42 59 00                                            BY.

00000447 <strOwns>:
     447:	4f 57 4e 53 00                                      OWNS.

0000044c <strChangeHandle>:
     44c:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

0000045b <strPlayer2>:
     45b:	50 32 00                                            P2.

0000045e <strPlayer1>:
     45e:	50 31 00                                            P1.

00000461 <strVertSep>:
     461:	3b 00                                               ;.

00000463 <strUnderline>:
     463:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000046f <strHandlesTitle>:
     46f:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000047b <strHighscores>:
     47b:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000485 <strCopyright>:
     485:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     495:	4f 4f 4b 53 00                                      OOKS.

0000049a <strSelectHandle>:
     49a:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

000004a9 <strCancelHandle>:
     4a9:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000004b4 <strReset>:
     4b4:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     4c4:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000004cd <strConfirmHandle>:
     4cd:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     4dd:	54 00                                               T.

000004df <strNetworkError>:
     4df:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

000004ed <strEnterGameId>:
     4ed:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     4fd:	49 44 00                                            ID.

00000500 <strConnecting>:
     500:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

0000050e <strWaitingForNetOppenent>:
     50e:	57 41 49 54 49 4e 47 20 4f 4e 20 4e 45 54 20 4f     WAITING ON NET O
     51e:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

00000529 <strShareGameId>:
     529:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     539:	49 44 00                                            ID.

0000053c <strJoinNetGame>:
     53c:	4a 4f 49 4e 20 4e 45 54 20 47 41 4d 45 00           JOIN NET GAME.

0000054a <strHostNetGame>:
     54a:	48 4f 53 54 20 4e 45 54 20 47 41 4d 45 00           HOST NET GAME.

00000558 <str2Player>:
     558:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000569 <str1Player>:
     569:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000577 <my_patches>:
     577:	02 e1 06 00 00 fe ff ff ff 02 e1 06 00 00 fe ff     ................
     587:	ff ff 02 e1 06 00 00 fe ff ff ff 02 e1 06 00 00     ................
     597:	fe ff ff ff 02 e1 06 00 00 fe ff ff ff 02 e1 06     ................
     5a7:	00 00 fe ff ff ff 02 e1 06 00 00 fe ff ff ff 00     ................
     5b7:	00 00 bf 05 00 00 00 00                             ........

000005bf <ad_alarm>:
     5bf:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     5cf:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5df:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5ef:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5ff:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     60f:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     61f:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     62f:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     63f:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     64f:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     65f:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     66f:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     67f:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     68f:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     69f:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     6af:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     6bf:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     6cf:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     6df:	00 ff                                               ..

000006e1 <ad_brick_explode>:
     6e1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6f1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     719:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     731:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     741:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     751:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     76d:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     77d:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     78d:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     7a9:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     7c9:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     7d9:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     7e9:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     7f9:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     809:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     819:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     829:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     839:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     849:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     859:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     869:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     879:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     889:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     899:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     8b1:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     8c1:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     8dd:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     8f5:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     911:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     921:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     931:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     94d:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     95d:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     96d:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     98d:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     9ad:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9bd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9cd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9dd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9ed:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     a09:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     a25:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     a35:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     a45:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     a55:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     a65:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     a75:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     a85:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     a95:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     aa5:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     ab5:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     ac5:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     ad5:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     ae5:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     af5:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     b05:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     b15:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     b25:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     b35:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     b45:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     b55:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     b65:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     b75:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     b85:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     b95:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     ba5:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     bb5:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     bc5:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     bd5:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     be5:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     bf5:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     c05:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     c15:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     c25:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     c35:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     c45:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     c55:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     c65:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     c7d:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     c99:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     ca9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     cb9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     cc9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     cd9:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     cf5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d15:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d31:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d51:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d6d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d8d:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     da5:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     dc1:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     dd1:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     de1:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     df1:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     e01:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     e11:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     e21:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     e31:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     e41:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     e51:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     e61:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     e71:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     e81:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     e91:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     ea1:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     eb1:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     ec1:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     ed1:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     eed:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
     f11:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     f31:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     f4d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     f6d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     f89:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f99:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     fa9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     fb9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     fc9:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
     fd9:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
     fe9:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
     ff9:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    1009:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    1019:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1029:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1039:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1049:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1059:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1069:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1079:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1089:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1099:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    10a9:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    10b9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    10d5:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    10ed:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    10fd:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    110d:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    111d:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1135:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1145:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1155:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1165:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1175:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1185:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    119d:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    11ad:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    11bd:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    11d5:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    11e5:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    11f5:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1205:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1215:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1225:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1235:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    124d:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    125d:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1275:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1285:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1295:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    12a5:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    12b5:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    12d1:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    12ed:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    130d:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    131d:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    132d:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1349:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1369:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1385:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    13a5:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    13b5:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    13c5:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    13d5:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    13ed:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    13fd:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    140d:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    141d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    142d:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    143d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1459:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1469:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1479:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1489:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    14a9:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    14c5:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    14e5:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    14fd:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    150d:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1529:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    1545:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1565:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1575:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1585:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1595:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15a5:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    15b5:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    15cd:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    15dd:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    15ed:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    15fd:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    160d:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    161d:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    162d:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    163d:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    164d:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1675:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1685:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1695:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    16a5:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    16bd:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    16cd:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    16dd:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    16ed:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    16fd:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    170d:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    171d:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    1735:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    1745:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1755:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1765:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1775:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1785:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    1795:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    17a5:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    17b5:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    17c5:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    17d5:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    17e5:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    17f5:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    1805:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    1815:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    1831:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1855:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1865:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1875:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1885:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1895:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    18a5:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    18bd:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    18cd:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    18dd:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    18ed:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    18fd:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    190d:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    191d:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    192d:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    193d:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    194d:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    195d:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1981:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    199d:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    19ad:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    19bd:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    19cd:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    19dd:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    19ed:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    19fd:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1a0d:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1a25:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1a35:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a51:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a71:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1a81:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1a91:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1aa1:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1ab1:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1ac1:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1ad1:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1ae1:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1af1:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1b01:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1b11:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1b21:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1b31:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1b41:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b51:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b61:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b71:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b81:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b9d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bb9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bd9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bf5:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1c05:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1c15:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c31:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c49:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1c59:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1c69:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1c79:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1c89:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1c99:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1ca9:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1cb9:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1cc9:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1cd9:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1ce9:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1cf9:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1d11:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1d21:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1d31:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1d41:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d51:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1d61:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d7d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d99:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1da9:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1db9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dd5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1df5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e11:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e31:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e41:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e51:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e61:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1e89:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ea9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ec5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ee5:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1ef5:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1f05:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f21:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1f3d:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1f55:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1f65:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    1f75:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1f85:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    1f95:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    1fa5:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    1fb5:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    1fc5:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    1fd5:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    1fe5:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    1ff5:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2005:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2015:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    202d:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    204d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2069:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2089:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2099:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    20a9:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20c5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20e1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2101:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    211d:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    212d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    213d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    214d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    215d:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    216d:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2185:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2195:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    21a5:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    21b5:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    21c5:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    21d5:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    21e5:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    21fd:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    220d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    221d:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    222d:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    223d:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    224d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2269:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    2279:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    2289:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2299:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    22a9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    22b9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    22c9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    22d9:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    22e9:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    22f9:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    231d:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    232d:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    233d:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    234d:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2365:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2375:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2385:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2395:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    23a5:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    23b5:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    23c5:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    23dd:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    23ed:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    23fd:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    240d:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    241d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    242d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    243d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    244d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    245d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    246d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    247d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    248d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    249d:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    24ad:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    24bd:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    24cd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    24dd:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    24ed:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    24fd:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    250d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    251d:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    252d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    253d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    254d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    255d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    256d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    257d:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    258d:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    259d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    25ad:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    25cd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    25ed:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2609:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2629:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    2641:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2665:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2681:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26a1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26bd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    26cd:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    26dd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    26f9:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2709:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2719:	02 02                                               ..

0000271b <sprites_data>:
    271b:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    272b:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    273b:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    274b:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    275b:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    276b:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    277b:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    278b:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    279b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    27ab:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    27bb:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    27cb:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    27db:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    27eb:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    27fb:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    280b:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    281b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    282b:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    283b:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    284b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    285b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    286b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    287b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    288b:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    289b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    28ab:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    28bb:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    28cb:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    28db:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    28eb:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    28fb:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    290b:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    291b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    292b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    293b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    294b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    295b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    296b:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    297b:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    298b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    299b:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    29ab:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    29bb:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    29cb:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    29db:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    29eb:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    29fb:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2a0b:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2a1b:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2a2b:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2a3b:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2a4b:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2a5b:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2a6b:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2a7b:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2a8b:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2a9b:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2aab:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2abb:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2acb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2adb:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2aeb:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2afb:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2b0b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2b1b:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2b2b:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2b3b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2b4b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b5b:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2b6b:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2b7b:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2b8b:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2b9b:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2bab:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2bbb:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2bcb:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2bdb:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2beb:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2bfb:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2c0b:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2c1b:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2c2b:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2c3b:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2c4b:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2c5b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2c6b:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2c7b:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2c8b:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2c9b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cab:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2cbb:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2ccb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2cdb:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2ceb:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2cfb:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2d0b:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2d1b:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d2b:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2d3b:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2d4b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d5b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2d6b:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2d7b:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2d8b:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d9b:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2dab:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2dbb:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2dcb:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ddb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2deb:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2dfb:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2e0b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e1b:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2e2b:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2e3b:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2e4b:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2e5b:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2e6b:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2e7b:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2e8b:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2e9b:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2eab:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2ebb:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2ecb:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2edb:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2eeb:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2efb:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2f0b:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2f1b:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    2f2b:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    2f3b:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    2f4b:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    2f5b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f6b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f7b:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    2f8b:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    2f9b:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    2fab:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    2fbb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fcb:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2fdb:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    2feb:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    2ffb:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    300b:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    301b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    302b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    303b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    304b:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000305b <map_sub_turret>:
    305b:	01 01 23                                            ..#

0000305e <map_sub_shot>:
    305e:	01 01 1b                                            ...

00003061 <map_up_arrow>:
    3061:	01 01 22                                            .."

00003064 <map_down_arrow>:
    3064:	01 01 21                                            ..!

00003067 <map_right_arrow>:
    3067:	01 01 20                                            .. 

0000306a <map_rocket_right_1>:
    306a:	01 01 1a                                            ...

0000306d <map_rocket_right_0>:
    306d:	01 01 19                                            ...

00003070 <map_rocket_up_1>:
    3070:	01 01 18                                            ...

00003073 <map_rocket_up_0>:
    3073:	01 01 17                                            ...

00003076 <map_ball>:
    3076:	01 01 16                                            ...

00003079 <map_explosion_2>:
    3079:	02 02 08 09 09 08                                   ......

0000307f <map_explosion_1>:
    307f:	02 02 06 07 10 11                                   ......

00003085 <map_explosion_0>:
    3085:	02 02 04 05 0e 0f                                   ......

0000308b <map_tank2_right_0>:
    308b:	02 02 14 15 1e 1f                                   ......

00003091 <map_tank2_up_0>:
    3091:	02 02 12 13 1c 1d                                   ......

00003097 <map_tank1_right_0>:
    3097:	02 02 02 03 0c 0d                                   ......

0000309d <map_tank1_up_0>:
    309d:	02 02 00 01 0a 0b                                   ......

000030a3 <map_tank_blank>:
    30a3:	02 02 24 24 24 24                                   ..$$$$

000030a9 <map_none>:
    30a9:	01 01 24                                            ..$

000030ac <tiles_data>:
	...
    30ec:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    30fc:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    310c:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    311c:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    312c:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    313c:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    314c:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    315c:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    316c:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    317c:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    318c:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    319c:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    31ac:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    31bc:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    31cc:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    31dc:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    31ec:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    31fc:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    320c:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    321c:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3234:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3244:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3254:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    326c:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    327c:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    328c:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    329c:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    32b4:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    32d4:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    32ec:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    32fc:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    330c:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    331c:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    332c:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    333c:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    334c:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    335c:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    336c:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    337c:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    338c:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    339c:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    33ac:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    33bc:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    33cc:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    33dc:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    33ec:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    33fc:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    340c:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    341c:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    342c:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    343c:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    344c:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    345c:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    346c:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    347c:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    348c:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    349c:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    34ac:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34bc:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34cc:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    34dc:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    34ec:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34fc:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    350c:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    351c:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    352c:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    353c:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    354c:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    355c:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    356c:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    357c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    358c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    359c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    35ac:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    35bc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    35cc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    35dc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    360c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    361c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    362c:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    363c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    364c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    365c:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    366c:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    367c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    368c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    369c:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    36ac:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    36bc:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    36cc:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    36dc:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    36ec:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    36fc:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    370c:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    371c:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    372c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    373c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    374c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    375c:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    376c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    377c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    37ac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    37bc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    37cc:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37dc:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    37ec:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    37fc:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    380c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    381c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    382c:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    386c:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    387c:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    388c:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    389c:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    38ac:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    38bc:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    38cc:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    38dc:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    391c:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3954:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3964:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3974:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3984:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3994:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    39a4:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    39b4:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    39c4:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    39d4:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    39e4:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    39f4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a14:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a24:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a34:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a44:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a54:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3a64:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3a74:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3a84:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3a94:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3aa4:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3ab4:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3ac4:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3ad4:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3ae4:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3af4:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3b2c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b3c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b4c:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3b70:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3b80:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3b90:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3ba0:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3bb0:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3bc0:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3bd0:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3be0:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3bf0:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3c00:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3c10:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3c20:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3c30:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3c40:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3c50:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3c60:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3c70:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3c80:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3c90:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ca0:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3cb0:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3cc0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3cd0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ce0:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3cf0:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3d00:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3d10:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3d20:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3d30:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3d40:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3d50:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3d60:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3d70:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3d80:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3d90:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3da0:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3db0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3dc0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3dd0:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3de0:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3df0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e00:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3e10:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3e20:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3e30:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e40:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3e50:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3e60:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3e70:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3e80:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3e90:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ea0:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3eb0:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3ec0:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ed0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ee0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3ef0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3f00:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f10:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f20:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    3f30:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    3f40:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f50:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    3f60:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    3f70:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f80:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f90:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    3fa0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    3fb0:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    3fc0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fd0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    3fe0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3ff0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4000:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4010:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4020:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4030:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4040:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4050:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4060:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4070:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4080:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4090:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40a0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    40b0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    40c0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    40d0:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    40e0:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    40f0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4100:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    4110:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    4120:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4130:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4140:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4150:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4160:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4170:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4180:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4190:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    41a0:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    41b0:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    41c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    41d0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    41e0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    41f0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4200:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4210:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    4220:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    4230:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4240:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4250:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    4260:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4270:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4280:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4290:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    42a0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    42b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42d0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    42e0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    42f0:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    4300:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    4310:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4320:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4330:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4340:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4350:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4360:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4370:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    4380:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    4390:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    43a0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43b0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    43c0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    43d0:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    43e0:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    43f0:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4400:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4410:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4420:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    4430:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    4440:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4450:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    4460:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    4470:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    4480:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    4490:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    44a0:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    44b0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    44c0:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    44d0:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    44e0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    44f0:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    4500:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    4510:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4520:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    4530:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4540:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4550:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4560:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    4570:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    4580:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    4590:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    45a0:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    45b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    45c0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    45d0:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45e0:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    45f0:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4600:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4610:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4620:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    4630:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4640:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4650:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    4660:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    4670:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4680:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4690:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46a0:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    46b0:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    46c0:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    46d0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46e0:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    46f0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4700:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    4710:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    4720:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    4730:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    4740:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    4750:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4760:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    4770:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    4780:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    4790:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    47a0:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    47b0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    47c0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    47d0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    47e0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    47f0:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    4800:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4810:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4820:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    4830:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4840:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4850:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4860:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4870:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4880:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4890:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48a0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    48b0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    48c0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    48d0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    48e0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    48f0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    4900:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    4910:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    4920:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4930:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4940:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4950:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4960:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4970:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4980:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4990:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    49a0:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    49b0:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    49c0:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    49d0:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    49e0:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    49f0:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4a00:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4a10:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4a20:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4a30:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4a40:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4a50:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4a60:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4a70:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4a80:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4a90:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4aa0:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4ab0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4ac0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4ad0:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4ae0:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4af0:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b00:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4b10:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4b20:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4b30:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b40:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4b50:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4b60:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4b70:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4b80:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4b90:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ba0:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4bb0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bc0:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4bd0:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4be0:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4bf0:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4c00:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c10:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4c20:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c30:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c40:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4c50:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4c60:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4c70:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c80:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4c90:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4ca0:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4cb0:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4cc0:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4cd0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4ce0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4cf0:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4d00:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4d10:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4d20:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4d30:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d40:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4d50:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4d60:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4d70:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4d80:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4d90:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4da0:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4db0:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4dc0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4dd0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4de0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4df0:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4e00:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4e10:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e20:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4e30:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4e40:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4e50:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4e60:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4e70:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4e80:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e90:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ea0:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4eb0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4ec0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ed0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ee0:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    4ef0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f00:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f10:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f20:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4f30:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f40:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f50:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f60:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f70:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f80:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f90:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fa0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4fb0:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fc0:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fd0:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4fe0:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    4ff0:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    5000:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5010:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5020:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5030:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5040:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5050:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5060:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5070:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5080:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5090:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    50a0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    50b0:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    50c0:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50d0:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    50e0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    50f0:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    5100:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    5110:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5120:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5130:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5140:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5150:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5160:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5170:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5180:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5190:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51a0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    51b0:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51c0:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    51d0:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51e0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    51f0:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5200:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5210:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5220:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    5230:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5240:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5250:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5260:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5270:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5280:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5290:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    52a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    52b0:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    52c0:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    52d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    52e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    52f0:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    5300:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5310:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5320:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5330:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5340:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5350:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5360:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5370:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    5380:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5390:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53a0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    53f0:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5400:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5410:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5420:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5430:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5440:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    5450:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5460:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5470:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5480:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5490:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    54a0:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    54b0:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54e0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    54f0:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5500:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5510:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    5520:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    5530:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    5540:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    5550:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5560:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5570:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5580:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5590:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    55a0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    55b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55e0:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    55f0:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    5600:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5610:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5620:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5630:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5640:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    5650:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    5660:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5670:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5680:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5690:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    56a0:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56b0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56c0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56d0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    56e0:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    56f0:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5700:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5710:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    5720:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    5730:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5740:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5750:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    5760:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    57b4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    57c4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    57dc:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    57f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5804:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5834:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5844:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5854:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    586c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    587c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    588c:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    589c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58b4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    58c4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    58d4:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    58ec:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    58fc:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    590c:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    591c:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5934:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5944:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5978:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5988:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5998:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    59b4:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    59c4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59d4:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    59f4:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5a04:	df df df df df df df df 00 00 df df df df 00 00     ................
    5a14:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5a34:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a44:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5a54:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a94:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5aa4:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5ac4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5b14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5b38:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5b48:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5b58:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b74:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5b84:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5b94:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5bb4:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5bc4:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5bd4:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5bf4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5c04:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5c14:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5c34:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5c44:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5c54:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5c78:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5c88:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5c98:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5cb4:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5cc4:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5cd4:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5cf4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5d04:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5d14:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d34:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5d44:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5d54:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5d74:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5d84:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5d94:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5db4:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5dc4:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5dd4:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5dfc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e2c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e3c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e4c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e5c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e6c:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5e7c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5e8c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5e9c:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5ebc:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5ed4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5eec:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5efc:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5f0c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5f1c:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f34:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f44:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5f5c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f74:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f84:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5f94:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    5fb4:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5fc4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fd4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5ff4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6004:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6014:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6034:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6044:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6054:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6074:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6084:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6094:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    60b4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    60c4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    60d4:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    60f4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6104:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6114:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6134:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6144:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6154:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6174:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6184:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6194:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    61b4:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    61c4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    61d4:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    61f8:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6208:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    6218:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    6234:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6244:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6254:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6274:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6284:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6294:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    62b4:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    62c4:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    62d4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    62f4:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    6304:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6314:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6334:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6344:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6354:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6374:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6384:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6394:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    63b4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63d4:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    63f4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6404:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6414:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6434:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6444:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6454:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6474:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6484:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6494:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    64b4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64d4:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    64f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6504:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6514:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6534:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    6544:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6554:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6574:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6584:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    6594:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    65b4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65c4:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    65d4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65f4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6604:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6614:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6634:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6644:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6654:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6674:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6684:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    6694:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    66b4:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66c4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66d4:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    66f8:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    6708:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    675c:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000676c <map_sub_emerging>:
    676c:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    677c:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    678c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    679c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    67ac:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    67bc:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    67cc:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    67dc:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    67ec:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    67fc:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    680c:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    681c:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    682c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    683c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    684c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    685c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    686c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    687c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    688c:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    689c:	0d 0d 0d 0d 0d 0d                                   ......

000068a2 <map_sub>:
    68a2:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68b2:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    68c2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68d2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68e2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68f2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    6902:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    6912:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    6922:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    6932:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    6942:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    6952:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6962:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6972:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6982:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6992:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69a2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69b2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69c2:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69d2:	0d 0d 0d 0d 0d 0d                                   ......

000069d8 <map_scope_2>:
    69d8:	01 01 12                                            ...

000069db <map_scope_1>:
    69db:	01 01 11                                            ...

000069de <map_scope_0>:
    69de:	01 01 10                                            ...

000069e1 <map_blue_tank>:
    69e1:	02 02 2b 2c 31 32                                   ..+,12

000069e7 <map_green_tank>:
    69e7:	02 02 18 19 23 24                                   ....#$

000069ed <map_fence>:
    69ed:	01 01 0f                                            ...

000069f0 <map_turf>:
    69f0:	01 01 0e                                            ...

000069f3 <map_water>:
    69f3:	01 01 0d                                            ...

000069f6 <map_metal_bl>:
    69f6:	01 01 0c                                            ...

000069f9 <map_metal_tr>:
    69f9:	01 01 0b                                            ...

000069fc <map_metal_br>:
    69fc:	01 01 0a                                            ...

000069ff <map_metal_tl>:
    69ff:	01 01 09                                            ...

00006a02 <map_tile_exp_2>:
    6a02:	01 01 08                                            ...

00006a05 <map_tile_exp_1>:
    6a05:	01 01 07                                            ...

00006a08 <map_tile_exp_0>:
    6a08:	01 01 06                                            ...

00006a0b <map_rocket_itm>:
    6a0b:	01 01 04                                            ...

00006a0e <map_explode_itm>:
    6a0e:	01 01 03                                            ...

00006a11 <map_speed_itm>:
    6a11:	01 01 02                                            ...

00006a14 <map_metal>:
    6a14:	01 01 05                                            ...

00006a17 <map_brick>:
    6a17:	01 01 01                                            ...

00006a1a <map_splash>:
    6a1a:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6a2a:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6a3a:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6a4a:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6a5a:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6a6a:	1a 00 00 1a 2f 30                                   ..../0

00006a70 <map_pause>:
    6a70:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6a80:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6a90:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6aa0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006aae <map_tile_none>:
    6aae:	01 01 00 00                                         ....

00006ab2 <__ctors_end>:
    6ab2:	11 24       	eor	r1, r1
    6ab4:	1f be       	out	0x3f, r1	; 63
    6ab6:	cf ef       	ldi	r28, 0xFF	; 255
    6ab8:	d0 e1       	ldi	r29, 0x10	; 16
    6aba:	de bf       	out	0x3e, r29	; 62
    6abc:	cd bf       	out	0x3d, r28	; 61

00006abe <__do_copy_data>:
    6abe:	11 e0       	ldi	r17, 0x01	; 1
    6ac0:	a0 e0       	ldi	r26, 0x00	; 0
    6ac2:	b1 e0       	ldi	r27, 0x01	; 1
    6ac4:	e0 e9       	ldi	r30, 0x90	; 144
    6ac6:	f5 ee       	ldi	r31, 0xE5	; 229
    6ac8:	02 c0       	rjmp	.+4      	; 0x6ace <__do_copy_data+0x10>
    6aca:	05 90       	lpm	r0, Z+
    6acc:	0d 92       	st	X+, r0
    6ace:	aa 34       	cpi	r26, 0x4A	; 74
    6ad0:	b1 07       	cpc	r27, r17
    6ad2:	d9 f7       	brne	.-10     	; 0x6aca <__do_copy_data+0xc>

00006ad4 <__do_clear_bss>:
    6ad4:	10 e1       	ldi	r17, 0x10	; 16
    6ad6:	aa e4       	ldi	r26, 0x4A	; 74
    6ad8:	b1 e0       	ldi	r27, 0x01	; 1
    6ada:	01 c0       	rjmp	.+2      	; 0x6ade <.do_clear_bss_start>

00006adc <.do_clear_bss_loop>:
    6adc:	1d 92       	st	X+, r1

00006ade <.do_clear_bss_start>:
    6ade:	a1 36       	cpi	r26, 0x61	; 97
    6ae0:	b1 07       	cpc	r27, r17
    6ae2:	e1 f7       	brne	.-8      	; 0x6adc <.do_clear_bss_loop>

00006ae4 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6ae4:	0e 94 28 3a 	call	0x7450	; 0x7450 <wdt_randomize>
#endif

    MCUSR = 0;
    6ae8:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6aea:	88 e1       	ldi	r24, 0x18	; 24
    6aec:	0f b6       	in	r0, 0x3f	; 63
    6aee:	f8 94       	cli
    6af0:	80 93 60 00 	sts	0x0060, r24
    6af4:	10 92 60 00 	sts	0x0060, r1
    6af8:	0f be       	out	0x3f, r0	; 63

00006afa <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6afa:	0e 94 ea 3a 	call	0x75d4	; 0x75d4 <isEepromFormatted>
    6afe:	81 11       	cpse	r24, r1
    6b00:	02 c0       	rjmp	.+4      	; 0x6b06 <Initialize+0xc>
    6b02:	0e 94 c8 3a 	call	0x7590	; 0x7590 <FormatEeprom>

	cli();
    6b06:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6b08:	c1 e0       	ldi	r28, 0x01	; 1
    6b0a:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    6b0e:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6b12:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6b16:	0e 94 ed 3b 	call	0x77da	; 0x77da <InitUartRxBuffer>
		InitUartTxBuffer();
    6b1a:	0e 94 06 3c 	call	0x780c	; 0x780c <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6b1e:	10 92 44 0a 	sts	0x0A44, r1
    6b22:	10 92 4a 0a 	sts	0x0A4A, r1
    6b26:	10 92 50 0a 	sts	0x0A50, r1
    6b2a:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6b2e:	10 92 1e 0a 	sts	0x0A1E, r1
	sync_flags=0;
    6b32:	10 92 20 0a 	sts	0x0A20, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6b36:	82 e1       	ldi	r24, 0x12	; 18
    6b38:	80 93 1f 0a 	sts	0x0A1F, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6b3c:	80 ee       	ldi	r24, 0xE0	; 224
    6b3e:	80 93 26 0a 	sts	0x0A26, r24
	first_render_line=FIRST_RENDER_LINE;
    6b42:	84 e1       	ldi	r24, 0x14	; 20
    6b44:	80 93 25 0a 	sts	0x0A25, r24

	joypad1_status_hi=0;
    6b48:	10 92 2a 0a 	sts	0x0A2A, r1
    6b4c:	10 92 29 0a 	sts	0x0A29, r1
	joypad2_status_hi=0;
    6b50:	10 92 2e 0a 	sts	0x0A2E, r1
    6b54:	10 92 2d 0a 	sts	0x0A2D, r1
	sound_enabled=1;
    6b58:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    6b5c:	0e 94 de 47 	call	0x8fbc	; 0x8fbc <InitializeVideoMode>
    6b60:	80 e7       	ldi	r24, 0x70	; 112
    6b62:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6b64:	fc 01       	movw	r30, r24
    6b66:	25 91       	lpm	r18, Z+
    6b68:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6b6a:	f9 01       	movw	r30, r18
    6b6c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6b6e:	30 83       	st	Z, r19
    6b70:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6b72:	20 e0       	ldi	r18, 0x00	; 0
    6b74:	8e 39       	cpi	r24, 0x9E	; 158
    6b76:	92 07       	cpc	r25, r18
    6b78:	a9 f7       	brne	.-22     	; 0x6b64 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6b7a:	78 94       	sei
	
	DisplayLogo();
    6b7c:	0e 94 dd 47 	call	0x8fba	; 0x8fba <DisplayLogo>
    6b80:	0e 94 96 6c 	call	0xd92c	; 0xd92c <main>
    6b84:	0c 94 c6 72 	jmp	0xe58c	; 0xe58c <_exit>

00006b88 <__bad_interrupt>:
    6b88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006b8c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6b8c:	0b e9       	ldi	r16, 0x9B	; 155
    6b8e:	0a 95       	dec	r16
    6b90:	f1 f7       	brne	.-4      	; 0x6b8e <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    6b92:	10 e0       	ldi	r17, 0x00	; 0
    6b94:	1a 95       	dec	r17
    6b96:	f1 f7       	brne	.-4      	; 0x6b94 <sub_video_mode3+0x8>
    6b98:	1e e1       	ldi	r17, 0x1E	; 30
    6b9a:	1a 95       	dec	r17
    6b9c:	f1 f7       	brne	.-4      	; 0x6b9a <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    6b9e:	20 90 1b 0a 	lds	r2, 0x0A1B
		lds r3,overlay_tile_table+1
    6ba2:	30 90 1c 0a 	lds	r3, 0x0A1C
		lds r16,tile_table_lo 
    6ba6:	00 91 17 0a 	lds	r16, 0x0A17
		lds r17,tile_table_hi
    6baa:	10 91 18 0a 	lds	r17, 0x0A18
		movw r12,r16
    6bae:	68 01       	movw	r12, r16
		movw r6,r16
    6bb0:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6bb2:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6bb4:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6bb6:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6bb8:	4e 01       	movw	r8, r28
		clr r0
    6bba:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6bbc:	30 91 1a 0a 	lds	r19, 0x0A1A
		cpi r19,0
    6bc0:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6bc2:	09 f0       	breq	.+2      	; 0x6bc6 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    6bc4:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6bc6:	09 f0       	breq	.+2      	; 0x6bca <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    6bc8:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6bca:	09 f0       	breq	.+2      	; 0x6bce <sub_video_mode3+0x42>
		mov r24,r19
    6bcc:	83 2f       	mov	r24, r19

		breq .+2
    6bce:	09 f0       	breq	.+2      	; 0x6bd2 <sub_video_mode3+0x46>
		movw r12,r2
    6bd0:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6bd2:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6bd4:	a0 2e       	mov	r10, r16
		clr r22
    6bd6:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6bd8:	78 e0       	ldi	r23, 0x08	; 8

00006bda <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6bda:	07 d3       	rcall	.+1550   	; 0x71ea <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6bdc:	3c e0       	ldi	r19, 0x0C	; 12
    6bde:	3a 95       	dec	r19
    6be0:	f1 f7       	brne	.-4      	; 0x6bde <next_tile_line+0x4>
    6be2:	00 00       	nop

		;***draw line***
		call render_tile_line
    6be4:	0e 94 1e 36 	call	0x6c3c	; 0x6c3c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6be8:	3f e0       	ldi	r19, 0x0F	; 15
    6bea:	3a 95       	dec	r19
    6bec:	f1 f7       	brne	.-4      	; 0x6bea <next_tile_line+0x10>
    6bee:	00 c0       	rjmp	.+0      	; 0x6bf0 <next_tile_line+0x16>

		dec r10
    6bf0:	aa 94       	dec	r10
		breq frame_end
    6bf2:	a1 f0       	breq	.+40     	; 0x6c1c <frame_end>
	
		inc r22
    6bf4:	63 95       	inc	r22
		lpm ;3 nop
    6bf6:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6bf8:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6bfa:	29 f0       	breq	.+10     	; 0x6c06 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6bfc:	33 e0       	ldi	r19, 0x03	; 3
    6bfe:	3a 95       	dec	r19
    6c00:	f1 f7       	brne	.-4      	; 0x6bfe <next_tile_line+0x24>
    6c02:	00 c0       	rjmp	.+0      	; 0x6c04 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6c04:	ea cf       	rjmp	.-44     	; 0x6bda <next_tile_line>

00006c06 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6c06:	66 27       	eor	r22, r22

		clr r0
    6c08:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6c0a:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6c0c:	c3 0f       	add	r28, r19
		adc YH,r0
    6c0e:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6c10:	8a 95       	dec	r24
		brne .+2
    6c12:	09 f4       	brne	.+2      	; 0x6c16 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6c14:	e4 01       	movw	r28, r8
		brne .+2
    6c16:	09 f4       	brne	.+2      	; 0x6c1a <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6c18:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6c1a:	df cf       	rjmp	.-66     	; 0x6bda <next_tile_line>

00006c1c <frame_end>:

	frame_end:

		WAIT r19,18
    6c1c:	36 e0       	ldi	r19, 0x06	; 6
    6c1e:	3a 95       	dec	r19
    6c20:	f1 f7       	brne	.-4      	; 0x6c1e <frame_end+0x2>

		rcall hsync_pulse ;145
    6c22:	e3 d2       	rcall	.+1478   	; 0x71ea <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6c24:	e0 91 20 0a 	lds	r30, 0x0A20
		ldi r20,SYNC_FLAG_FIELD
    6c28:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6c2a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6c2c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6c2e:	e0 93 20 0a 	sts	0x0A20, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6c32:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6c34:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6c38:	11 24       	eor	r1, r1


		ret
    6c3a:	08 95       	ret

00006c3c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6c3c:	de 01       	movw	r26, r28

		mul r22,r23
    6c3e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6c40:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6c42:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6c44:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6c46:	00 0d       	add	r16, r0
		adc r17,r1
    6c48:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6c4a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6c4c:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6c4e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6c50:	00 0d       	add	r16, r0
		adc r17,r1
    6c52:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6c54:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6c56:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6c58:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6c5a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6c5c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6c5e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6c60:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    6c62:	08 f4       	brcc	.+2      	; 0x6c66 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6c64:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6c66:	04 0e       	add	r0, r20
	    adc r1,r21
    6c68:	15 1e       	adc	r1, r21

		movw ZL,r0
    6c6a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6c6c:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    6c6e:	f0 f0       	brcs	.+60     	; 0x6cac <ramloop>

00006c70 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6c70:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6c72:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6c74:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6c76:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6c78:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6c7a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6c7c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6c7e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6c80:	24 31       	cpi	r18, 0x14	; 20
		nop
    6c82:	00 00       	nop

	    lpm r16,Z+
    6c84:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6c86:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6c88:	08 f4       	brcc	.+2      	; 0x6c8c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6c8a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6c8c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6c8e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6c90:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6c92:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6c94:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6c96:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6c98:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    6c9a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6c9c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6c9e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6ca0:	05 91       	lpm	r16, Z+

		breq end	
    6ca2:	31 f1       	breq	.+76     	; 0x6cf0 <end>
	    movw ZL,r0   	;copy next tile adress
    6ca4:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6ca6:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6ca8:	18 f7       	brcc	.-58     	; 0x6c70 <romloop>
	
		rjmp .
    6caa:	00 c0       	rjmp	.+0      	; 0x6cac <ramloop>

00006cac <ramloop>:

	ramloop:

	    ld r16,Z+
    6cac:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6cae:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6cb0:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6cb2:	01 91       	ld	r16, Z+
		nop   
    6cb4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6cb6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6cb8:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6cba:	01 91       	ld	r16, Z+
		nop
    6cbc:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6cbe:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6cc0:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    6cc2:	00 c0       	rjmp	.+0      	; 0x6cc4 <ramloop+0x18>

	    ld r16,Z+
    6cc4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6cc6:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6cc8:	08 f0       	brcs	.+2      	; 0x6ccc <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6cca:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6ccc:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6cce:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6cd0:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6cd2:	15 1e       	adc	r1, r21
		rjmp .
    6cd4:	00 c0       	rjmp	.+0      	; 0x6cd6 <ramloop+0x2a>
    
		ld r16,Z+		
    6cd6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6cd8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6cda:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    6cdc:	00 c0       	rjmp	.+0      	; 0x6cde <ramloop+0x32>

	    ld r16,Z+	
    6cde:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6ce0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6ce2:	01 91       	ld	r16, Z+

	    dec r17
    6ce4:	1a 95       	dec	r17
	    breq end
    6ce6:	21 f0       	breq	.+8      	; 0x6cf0 <end>
	
		movw ZL,r0
    6ce8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6cea:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6cec:	08 f6       	brcc	.-126    	; 0x6c70 <romloop>
		rjmp ramloop
    6cee:	de cf       	rjmp	.-68     	; 0x6cac <ramloop>

00006cf0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6cf0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6cf2:	00 27       	eor	r16, r16
		lpm	
    6cf4:	c8 95       	lpm
		nop
    6cf6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6cf8:	08 b9       	out	0x08, r16	; 8

		ret
    6cfa:	08 95       	ret

00006cfc <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6cfc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6cfe:	e0 91 17 0a 	lds	r30, 0x0A17
	lds ZH,tile_table_hi
    6d02:	f0 91 18 0a 	lds	r31, 0x0A18
	mul r24,r18
    6d06:	82 9f       	mul	r24, r18
	add ZL,r0
    6d08:	e0 0d       	add	r30, r0
	adc ZH,r1
    6d0a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6d0c:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6d0e:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6d10:	62 9f       	mul	r22, r18
	add XL,r0
    6d12:	a0 0d       	add	r26, r0
	adc XH,r1
    6d14:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6d16:	15 90       	lpm	r1, Z+
    6d18:	1d 92       	st	X+, r1
    6d1a:	15 90       	lpm	r1, Z+
    6d1c:	1d 92       	st	X+, r1
    6d1e:	15 90       	lpm	r1, Z+
    6d20:	1d 92       	st	X+, r1
    6d22:	15 90       	lpm	r1, Z+
    6d24:	1d 92       	st	X+, r1
    6d26:	15 90       	lpm	r1, Z+
    6d28:	1d 92       	st	X+, r1
    6d2a:	15 90       	lpm	r1, Z+
    6d2c:	1d 92       	st	X+, r1
    6d2e:	15 90       	lpm	r1, Z+
    6d30:	1d 92       	st	X+, r1
    6d32:	15 90       	lpm	r1, Z+
    6d34:	1d 92       	st	X+, r1
    6d36:	15 90       	lpm	r1, Z+
    6d38:	1d 92       	st	X+, r1
    6d3a:	15 90       	lpm	r1, Z+
    6d3c:	1d 92       	st	X+, r1
    6d3e:	15 90       	lpm	r1, Z+
    6d40:	1d 92       	st	X+, r1
    6d42:	15 90       	lpm	r1, Z+
    6d44:	1d 92       	st	X+, r1
    6d46:	15 90       	lpm	r1, Z+
    6d48:	1d 92       	st	X+, r1
    6d4a:	15 90       	lpm	r1, Z+
    6d4c:	1d 92       	st	X+, r1
    6d4e:	15 90       	lpm	r1, Z+
    6d50:	1d 92       	st	X+, r1
    6d52:	15 90       	lpm	r1, Z+
    6d54:	1d 92       	st	X+, r1
    6d56:	15 90       	lpm	r1, Z+
    6d58:	1d 92       	st	X+, r1
    6d5a:	15 90       	lpm	r1, Z+
    6d5c:	1d 92       	st	X+, r1
    6d5e:	15 90       	lpm	r1, Z+
    6d60:	1d 92       	st	X+, r1
    6d62:	15 90       	lpm	r1, Z+
    6d64:	1d 92       	st	X+, r1
    6d66:	15 90       	lpm	r1, Z+
    6d68:	1d 92       	st	X+, r1
    6d6a:	15 90       	lpm	r1, Z+
    6d6c:	1d 92       	st	X+, r1
    6d6e:	15 90       	lpm	r1, Z+
    6d70:	1d 92       	st	X+, r1
    6d72:	15 90       	lpm	r1, Z+
    6d74:	1d 92       	st	X+, r1
    6d76:	15 90       	lpm	r1, Z+
    6d78:	1d 92       	st	X+, r1
    6d7a:	15 90       	lpm	r1, Z+
    6d7c:	1d 92       	st	X+, r1
    6d7e:	15 90       	lpm	r1, Z+
    6d80:	1d 92       	st	X+, r1
    6d82:	15 90       	lpm	r1, Z+
    6d84:	1d 92       	st	X+, r1
    6d86:	15 90       	lpm	r1, Z+
    6d88:	1d 92       	st	X+, r1
    6d8a:	15 90       	lpm	r1, Z+
    6d8c:	1d 92       	st	X+, r1
    6d8e:	15 90       	lpm	r1, Z+
    6d90:	1d 92       	st	X+, r1
    6d92:	15 90       	lpm	r1, Z+
    6d94:	1d 92       	st	X+, r1
    6d96:	15 90       	lpm	r1, Z+
    6d98:	1d 92       	st	X+, r1
    6d9a:	15 90       	lpm	r1, Z+
    6d9c:	1d 92       	st	X+, r1
    6d9e:	15 90       	lpm	r1, Z+
    6da0:	1d 92       	st	X+, r1
    6da2:	15 90       	lpm	r1, Z+
    6da4:	1d 92       	st	X+, r1
    6da6:	15 90       	lpm	r1, Z+
    6da8:	1d 92       	st	X+, r1
    6daa:	15 90       	lpm	r1, Z+
    6dac:	1d 92       	st	X+, r1
    6dae:	15 90       	lpm	r1, Z+
    6db0:	1d 92       	st	X+, r1
    6db2:	15 90       	lpm	r1, Z+
    6db4:	1d 92       	st	X+, r1
    6db6:	15 90       	lpm	r1, Z+
    6db8:	1d 92       	st	X+, r1
    6dba:	15 90       	lpm	r1, Z+
    6dbc:	1d 92       	st	X+, r1
    6dbe:	15 90       	lpm	r1, Z+
    6dc0:	1d 92       	st	X+, r1
    6dc2:	15 90       	lpm	r1, Z+
    6dc4:	1d 92       	st	X+, r1
    6dc6:	15 90       	lpm	r1, Z+
    6dc8:	1d 92       	st	X+, r1
    6dca:	15 90       	lpm	r1, Z+
    6dcc:	1d 92       	st	X+, r1
    6dce:	15 90       	lpm	r1, Z+
    6dd0:	1d 92       	st	X+, r1
    6dd2:	15 90       	lpm	r1, Z+
    6dd4:	1d 92       	st	X+, r1
    6dd6:	15 90       	lpm	r1, Z+
    6dd8:	1d 92       	st	X+, r1
    6dda:	15 90       	lpm	r1, Z+
    6ddc:	1d 92       	st	X+, r1
    6dde:	15 90       	lpm	r1, Z+
    6de0:	1d 92       	st	X+, r1
    6de2:	15 90       	lpm	r1, Z+
    6de4:	1d 92       	st	X+, r1
    6de6:	15 90       	lpm	r1, Z+
    6de8:	1d 92       	st	X+, r1
    6dea:	15 90       	lpm	r1, Z+
    6dec:	1d 92       	st	X+, r1
    6dee:	15 90       	lpm	r1, Z+
    6df0:	1d 92       	st	X+, r1
    6df2:	15 90       	lpm	r1, Z+
    6df4:	1d 92       	st	X+, r1
    6df6:	15 90       	lpm	r1, Z+
    6df8:	1d 92       	st	X+, r1
    6dfa:	15 90       	lpm	r1, Z+
    6dfc:	1d 92       	st	X+, r1
    6dfe:	15 90       	lpm	r1, Z+
    6e00:	1d 92       	st	X+, r1
    6e02:	15 90       	lpm	r1, Z+
    6e04:	1d 92       	st	X+, r1
    6e06:	15 90       	lpm	r1, Z+
    6e08:	1d 92       	st	X+, r1
    6e0a:	15 90       	lpm	r1, Z+
    6e0c:	1d 92       	st	X+, r1
    6e0e:	15 90       	lpm	r1, Z+
    6e10:	1d 92       	st	X+, r1
    6e12:	15 90       	lpm	r1, Z+
    6e14:	1d 92       	st	X+, r1
	clr r1
    6e16:	11 24       	eor	r1, r1
	ret
    6e18:	08 95       	ret

00006e1a <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6e1a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6e1c:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6e1e:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6e20:	82 9f       	mul	r24, r18
	add ZL,r0
    6e22:	e0 0d       	add	r30, r0
	adc ZH,r1
    6e24:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6e26:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6e28:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6e2a:	62 9f       	mul	r22, r18
	add XL,r0
    6e2c:	a0 0d       	add	r26, r0
	adc XH,r1
    6e2e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6e30:	11 90       	ld	r1, Z+
    6e32:	1d 92       	st	X+, r1
    6e34:	11 90       	ld	r1, Z+
    6e36:	1d 92       	st	X+, r1
    6e38:	11 90       	ld	r1, Z+
    6e3a:	1d 92       	st	X+, r1
    6e3c:	11 90       	ld	r1, Z+
    6e3e:	1d 92       	st	X+, r1
    6e40:	11 90       	ld	r1, Z+
    6e42:	1d 92       	st	X+, r1
    6e44:	11 90       	ld	r1, Z+
    6e46:	1d 92       	st	X+, r1
    6e48:	11 90       	ld	r1, Z+
    6e4a:	1d 92       	st	X+, r1
    6e4c:	11 90       	ld	r1, Z+
    6e4e:	1d 92       	st	X+, r1
    6e50:	11 90       	ld	r1, Z+
    6e52:	1d 92       	st	X+, r1
    6e54:	11 90       	ld	r1, Z+
    6e56:	1d 92       	st	X+, r1
    6e58:	11 90       	ld	r1, Z+
    6e5a:	1d 92       	st	X+, r1
    6e5c:	11 90       	ld	r1, Z+
    6e5e:	1d 92       	st	X+, r1
    6e60:	11 90       	ld	r1, Z+
    6e62:	1d 92       	st	X+, r1
    6e64:	11 90       	ld	r1, Z+
    6e66:	1d 92       	st	X+, r1
    6e68:	11 90       	ld	r1, Z+
    6e6a:	1d 92       	st	X+, r1
    6e6c:	11 90       	ld	r1, Z+
    6e6e:	1d 92       	st	X+, r1
    6e70:	11 90       	ld	r1, Z+
    6e72:	1d 92       	st	X+, r1
    6e74:	11 90       	ld	r1, Z+
    6e76:	1d 92       	st	X+, r1
    6e78:	11 90       	ld	r1, Z+
    6e7a:	1d 92       	st	X+, r1
    6e7c:	11 90       	ld	r1, Z+
    6e7e:	1d 92       	st	X+, r1
    6e80:	11 90       	ld	r1, Z+
    6e82:	1d 92       	st	X+, r1
    6e84:	11 90       	ld	r1, Z+
    6e86:	1d 92       	st	X+, r1
    6e88:	11 90       	ld	r1, Z+
    6e8a:	1d 92       	st	X+, r1
    6e8c:	11 90       	ld	r1, Z+
    6e8e:	1d 92       	st	X+, r1
    6e90:	11 90       	ld	r1, Z+
    6e92:	1d 92       	st	X+, r1
    6e94:	11 90       	ld	r1, Z+
    6e96:	1d 92       	st	X+, r1
    6e98:	11 90       	ld	r1, Z+
    6e9a:	1d 92       	st	X+, r1
    6e9c:	11 90       	ld	r1, Z+
    6e9e:	1d 92       	st	X+, r1
    6ea0:	11 90       	ld	r1, Z+
    6ea2:	1d 92       	st	X+, r1
    6ea4:	11 90       	ld	r1, Z+
    6ea6:	1d 92       	st	X+, r1
    6ea8:	11 90       	ld	r1, Z+
    6eaa:	1d 92       	st	X+, r1
    6eac:	11 90       	ld	r1, Z+
    6eae:	1d 92       	st	X+, r1
    6eb0:	11 90       	ld	r1, Z+
    6eb2:	1d 92       	st	X+, r1
    6eb4:	11 90       	ld	r1, Z+
    6eb6:	1d 92       	st	X+, r1
    6eb8:	11 90       	ld	r1, Z+
    6eba:	1d 92       	st	X+, r1
    6ebc:	11 90       	ld	r1, Z+
    6ebe:	1d 92       	st	X+, r1
    6ec0:	11 90       	ld	r1, Z+
    6ec2:	1d 92       	st	X+, r1
    6ec4:	11 90       	ld	r1, Z+
    6ec6:	1d 92       	st	X+, r1
    6ec8:	11 90       	ld	r1, Z+
    6eca:	1d 92       	st	X+, r1
    6ecc:	11 90       	ld	r1, Z+
    6ece:	1d 92       	st	X+, r1
    6ed0:	11 90       	ld	r1, Z+
    6ed2:	1d 92       	st	X+, r1
    6ed4:	11 90       	ld	r1, Z+
    6ed6:	1d 92       	st	X+, r1
    6ed8:	11 90       	ld	r1, Z+
    6eda:	1d 92       	st	X+, r1
    6edc:	11 90       	ld	r1, Z+
    6ede:	1d 92       	st	X+, r1
    6ee0:	11 90       	ld	r1, Z+
    6ee2:	1d 92       	st	X+, r1
    6ee4:	11 90       	ld	r1, Z+
    6ee6:	1d 92       	st	X+, r1
    6ee8:	11 90       	ld	r1, Z+
    6eea:	1d 92       	st	X+, r1
    6eec:	11 90       	ld	r1, Z+
    6eee:	1d 92       	st	X+, r1
    6ef0:	11 90       	ld	r1, Z+
    6ef2:	1d 92       	st	X+, r1
    6ef4:	11 90       	ld	r1, Z+
    6ef6:	1d 92       	st	X+, r1
    6ef8:	11 90       	ld	r1, Z+
    6efa:	1d 92       	st	X+, r1
    6efc:	11 90       	ld	r1, Z+
    6efe:	1d 92       	st	X+, r1
    6f00:	11 90       	ld	r1, Z+
    6f02:	1d 92       	st	X+, r1
    6f04:	11 90       	ld	r1, Z+
    6f06:	1d 92       	st	X+, r1
    6f08:	11 90       	ld	r1, Z+
    6f0a:	1d 92       	st	X+, r1
    6f0c:	11 90       	ld	r1, Z+
    6f0e:	1d 92       	st	X+, r1
    6f10:	11 90       	ld	r1, Z+
    6f12:	1d 92       	st	X+, r1
    6f14:	11 90       	ld	r1, Z+
    6f16:	1d 92       	st	X+, r1
    6f18:	11 90       	ld	r1, Z+
    6f1a:	1d 92       	st	X+, r1
    6f1c:	11 90       	ld	r1, Z+
    6f1e:	1d 92       	st	X+, r1
    6f20:	11 90       	ld	r1, Z+
    6f22:	1d 92       	st	X+, r1
    6f24:	11 90       	ld	r1, Z+
    6f26:	1d 92       	st	X+, r1
    6f28:	11 90       	ld	r1, Z+
    6f2a:	1d 92       	st	X+, r1
    6f2c:	11 90       	ld	r1, Z+
    6f2e:	1d 92       	st	X+, r1
	clr r1
    6f30:	11 24       	eor	r1, r1
	ret
    6f32:	08 95       	ret

00006f34 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    6f34:	e0 91 0d 0a 	lds	r30, 0x0A0D
	mov   r24,     ZL
    6f38:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    6f3a:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    6f3c:	e8 0f       	add	r30, r24
	clr   ZH
    6f3e:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    6f40:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    6f42:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    6f44:	00 90 0c 0a 	lds	r0, 0x0A0C
	sub   r24,     r0
    6f48:	80 19       	sub	r24, r0
	brcc  rbg_exit
    6f4a:	30 f4       	brcc	.+12     	; 0x6f58 <rbg_exit>

00006f4c <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    6f4c:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    6f4e:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    6f50:	01 90       	ld	r0, Z+
	st    X,       r0
    6f52:	0c 92       	st	X, r0
	inc   r24
    6f54:	83 95       	inc	r24
	brne  rbg_loop
    6f56:	d1 f7       	brne	.-12     	; 0x6f4c <rbg_loop>

00006f58 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    6f58:	08 95       	ret

00006f5a <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    6f5a:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    6f5c:	79 9f       	mul	r23, r25
	mov   XL,      r1
    6f5e:	a1 2d       	mov	r26, r1
	clr   XH
    6f60:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    6f62:	a1 5f       	subi	r26, 0xF1	; 241
	sbci  XH,      hi8(-(sprites_tile_banks))
    6f64:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    6f66:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    6f68:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    6f6a:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    6f6c:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    6f6e:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    6f70:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    6f72:	89 9f       	mul	r24, r25
	movw  XL,      r0
    6f74:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    6f76:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    6f78:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    6f7a:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    6f7c:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    6f7e:	09 c0       	rjmp	.+18     	; 0x6f92 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    6f80:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    6f82:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    6f84:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    6f86:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    6f88:	0a c0       	rjmp	.+20     	; 0x6f9e <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    6f8a:	17 96       	adiw	r26, 0x07	; 7

00006f8c <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    6f8c:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    6f8e:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    6f90:	08 c0       	rjmp	.+16     	; 0x6fa2 <x_check_end>

00006f92 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    6f92:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    6f94:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    6f96:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    6f98:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    6f9a:	f8 cf       	rjmp	.-16     	; 0x6f8c <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    6f9c:	11 97       	sbiw	r26, 0x01	; 1

00006f9e <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    6f9e:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    6fa0:	b9 1f       	adc	r27, r25

00006fa2 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    6fa2:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    6fa4:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    6fa6:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    6fa8:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    6faa:	09 c0       	rjmp	.+18     	; 0x6fbe <y_2nd_tile>

	mul   r22,     r19
    6fac:	63 9f       	mul	r22, r19
	add   XL,      r0
    6fae:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    6fb0:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    6fb2:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    6fb4:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    6fb6:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    6fb8:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    6fba:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    6fbc:	08 c0       	rjmp	.+16     	; 0x6fce <y_check_end>

00006fbe <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    6fbe:	13 2e       	mov	r1, r19
	dec   r1
    6fc0:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    6fc2:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    6fc4:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    6fc6:	61 9d       	mul	r22, r1
	add   ZL,      r0
    6fc8:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    6fca:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    6fcc:	13 2e       	mov	r1, r19

00006fce <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    6fce:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    6fd0:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    6fd2:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    6fd4:	05 c0       	rjmp	.+10     	; 0x6fe0 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    6fd6:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    6fd8:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    6fda:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    6fdc:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    6fde:	04 c0       	rjmp	.+8      	; 0x6fe8 <x_diff_end>

00006fe0 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    6fe0:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    6fe2:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    6fe4:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    6fe6:	6f ef       	ldi	r22, 0xFF	; 255

00006fe8 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    6fe8:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    6fea:	04 2e       	mov	r0, r20
	lsr   r20
    6fec:	46 95       	lsr	r20
	brcc  x_loop1
    6fee:	30 f4       	brcc	.+12     	; 0x6ffc <x_loop1>
	breq  x_loopx
    6ff0:	61 f0       	breq	.+24     	; 0x700a <x_loopx>

00006ff2 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    6ff2:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    6ff4:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    6ff6:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    6ff8:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    6ffa:	b7 1f       	adc	r27, r23

00006ffc <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    6ffc:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    6ffe:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7000:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7002:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7004:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    7006:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7008:	a1 f7       	brne	.-24     	; 0x6ff2 <x_loop0>

0000700a <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    700a:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    700c:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    700e:	2c 93       	st	X, r18

	dec   r1
    7010:	1a 94       	dec	r1
	breq  loop_e
    7012:	49 f0       	breq	.+18     	; 0x7026 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    7014:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    7016:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7018:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    701a:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    701c:	40 2d       	mov	r20, r0
	lsr   r20
    701e:	46 95       	lsr	r20
	brcc  x_loop1
    7020:	68 f7       	brcc	.-38     	; 0x6ffc <x_loop1>
	brne  x_loop0
    7022:	39 f7       	brne	.-50     	; 0x6ff2 <x_loop0>
	rjmp  x_loopx
    7024:	f2 cf       	rjmp	.-28     	; 0x700a <x_loopx>

00007026 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7026:	08 95       	ret

00007028 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7028:	0f 92       	push	r0
	push  r1
    702a:	1f 92       	push	r1
	push  ZL
    702c:	ef 93       	push	r30
	push  ZH
    702e:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7030:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7032:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7036:	ff 93       	push	r31

	sbrc  ZL,      2
    7038:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    703a:	04 c0       	rjmp	.+8      	; 0x7044 <__vector_13+0x1c>
	sbrc  ZL,      1
    703c:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    703e:	02 c0       	rjmp	.+4      	; 0x7044 <__vector_13+0x1c>
	nop
    7040:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7042:	00 c0       	rjmp	.+0      	; 0x7044 <__vector_13+0x1c>
	sbrs  ZL,      0
    7044:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7046:	00 c0       	rjmp	.+0      	; 0x7048 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7048:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    704c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    704e:	e0 93 1f 0a 	sts	0x0A1F, r30

	;process sync phases
	lds ZH,sync_phase
    7052:	f0 91 1e 0a 	lds	r31, 0x0A1E
	sbrc ZH,0
    7056:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7058:	51 c0       	rjmp	.+162    	; 0x70fc <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    705a:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    705c:	98 f0       	brcs	.+38     	; 0x7084 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    705e:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7060:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7064:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7066:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    706a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    706c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    706e:	26 f4       	brtc	.+8      	; 0x7078 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7070:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7072:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>
	rjmp sync_end
    7076:	b2 c0       	rjmp	.+356    	; 0x71dc <sync_end>

00007078 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7078:	e5 e1       	ldi	r30, 0x15	; 21
    707a:	ea 95       	dec	r30
    707c:	f1 f7       	brne	.-4      	; 0x707a <sync_pre_eq_no_sound_update+0x2>
    707e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7080:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7082:	ac c0       	rjmp	.+344    	; 0x71dc <sync_end>

00007084 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7084:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7086:	08 f1       	brcs	.+66     	; 0x70ca <sync_post_eq>

	rjmp .
    7088:	00 c0       	rjmp	.+0      	; 0x708a <sync_eq+0x6>
	rjmp .
    708a:	00 c0       	rjmp	.+0      	; 0x708c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    708c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    708e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7090:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7092:	16 f4       	brtc	.+4      	; 0x7098 <sync_eq_skip>
	
	call update_sound
    7094:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

00007098 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7098:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    709a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    709e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    70a0:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    70a4:	9b c0       	rjmp	.+310    	; 0x71dc <sync_end>

000070a6 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    70a6:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    70a8:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    70ac:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    70ae:	04 c0       	rjmp	.+8      	; 0x70b8 <__vector_14+0x12>
	sbrc  ZL,      1
    70b0:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    70b2:	02 c0       	rjmp	.+4      	; 0x70b8 <__vector_14+0x12>
	nop
    70b4:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    70b6:	00 c0       	rjmp	.+0      	; 0x70b8 <__vector_14+0x12>
	sbrs  ZL,      0
    70b8:	e0 ff       	sbrs	r30, 0
	rjmp  .
    70ba:	00 c0       	rjmp	.+0      	; 0x70bc <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    70bc:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    70be:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    70c0:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    70c2:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    70c6:	ef 91       	pop	r30
	reti
    70c8:	18 95       	reti

000070ca <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    70ca:	00 c0       	rjmp	.+0      	; 0x70cc <sync_post_eq+0x2>

	bst ZL,0
    70cc:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    70ce:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    70d0:	26 f4       	brtc	.+8      	; 0x70da <sync_post_eq_no_sound_update>
	ldi ZL,1	
    70d2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    70d4:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>
	rjmp sync_pre_eq_cont
    70d8:	05 c0       	rjmp	.+10     	; 0x70e4 <sync_pre_eq_cont>

000070da <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    70da:	e5 e1       	ldi	r30, 0x15	; 21
    70dc:	ea 95       	dec	r30
    70de:	f1 f7       	brne	.-4      	; 0x70dc <sync_post_eq_no_sound_update+0x2>
    70e0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    70e2:	28 9a       	sbi	0x05, 0	; 5

000070e4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    70e4:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    70e8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    70ea:	09 f0       	breq	.+2      	; 0x70ee <sync_pre_eq_cont+0xa>
	rjmp sync_end
    70ec:	77 c0       	rjmp	.+238    	; 0x71dc <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    70ee:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    70f0:	e0 93 1f 0a 	sts	0x0A1F, r30
	ldi ZL,1
    70f4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    70f6:	e0 93 1e 0a 	sts	0x0A1E, r30
	
	rjmp sync_end
    70fa:	70 c0       	rjmp	.+224    	; 0x71dc <sync_end>

000070fc <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    70fc:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    70fe:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7102:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7104:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7108:	00 c0       	rjmp	.+0      	; 0x710a <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    710a:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    710c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    710e:	00 c0       	rjmp	.+0      	; 0x7110 <sync_hsync+0x14>
	call update_sound
    7110:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7114:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7116:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    711a:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    711c:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cp ZL,ZH
    7120:	ef 17       	cp	r30, r31
	brsh no_render
    7122:	d8 f4       	brcc	.+54     	; 0x715a <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7124:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7126:	00 90 25 0a 	lds	r0, 0x0A25
	sub ZH,r0				
    712a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    712c:	00 90 26 0a 	lds	r0, 0x0A26
	sub ZH,r0			
    7130:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7132:	ef 17       	cp	r30, r31
	brlo no_render
    7134:	90 f0       	brcs	.+36     	; 0x715a <no_render>

	;push r1-r29
	ldi ZL,29
    7136:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7138:	ff 27       	eor	r31, r31

0000713a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    713a:	00 80       	ld	r0, Z
	push r0
    713c:	0f 92       	push	r0
	dec ZL
    713e:	ea 95       	dec	r30
	brne push_loop	
    7140:	e1 f7       	brne	.-8      	; 0x713a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7142:	05 e0       	ldi	r16, 0x05	; 5
    7144:	0a 95       	dec	r16
    7146:	f1 f7       	brne	.-4      	; 0x7144 <push_loop+0xa>
    7148:	00 c0       	rjmp	.+0      	; 0x714a <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    714a:	0e 94 c6 35 	call	0x6b8c	; 0x6b8c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    714e:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7150:	ff 27       	eor	r31, r31

00007152 <pop_loop>:
pop_loop:
	pop r0
    7152:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7154:	01 92       	st	Z+, r0
	cpi ZL,30
    7156:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7158:	e0 f3       	brcs	.-8      	; 0x7152 <pop_loop>

0000715a <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    715a:	e0 91 1f 0a 	lds	r30, 0x0A1F
	cpi ZL,0
    715e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7160:	09 f0       	breq	.+2      	; 0x7164 <no_render+0xa>
	rjmp sync_end
    7162:	3c c0       	rjmp	.+120    	; 0x71dc <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7164:	2f 93       	push	r18
	push r19
    7166:	3f 93       	push	r19
	push r20
    7168:	4f 93       	push	r20
	push r21
    716a:	5f 93       	push	r21
	push r22
    716c:	6f 93       	push	r22
	push r23
    716e:	7f 93       	push	r23
	push r24
    7170:	8f 93       	push	r24
	push r25
    7172:	9f 93       	push	r25
	push r26
    7174:	af 93       	push	r26
	push r27
    7176:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7178:	78 94       	sei
	clr r1
    717a:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    717c:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    717e:	e0 93 1e 0a 	sts	0x0A1E, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7182:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7184:	e0 93 1f 0a 	sts	0x0A1F, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7188:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    718c:	90 91 30 0a 	lds	r25, 0x0A30
	adiw r24,1
    7190:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7192:	80 93 2f 0a 	sts	0x0A2F, r24
	sts vsync_counter+1,r25
    7196:	90 93 30 0a 	sts	0x0A30, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    719a:	e0 91 21 0a 	lds	r30, 0x0A21
	lds ZH,pre_vsync_user_callback+1
    719e:	f0 91 22 0a 	lds	r31, 0x0A22
	cp  ZL,r1
    71a2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    71a4:	f1 05       	cpc	r31, r1
	breq .+2 
    71a6:	09 f0       	breq	.+2      	; 0x71aa <no_render+0x50>
	icall
    71a8:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    71aa:	0e 94 b8 3a 	call	0x7570	; 0x7570 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    71ae:	0e 94 ec 48 	call	0x91d8	; 0x91d8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    71b2:	0e 94 00 39 	call	0x7200	; 0x7200 <process_music>
	clr r1
    71b6:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    71b8:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,post_vsync_user_callback+1
    71bc:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    71c0:	e1 15       	cp	r30, r1
	cpc ZH,r1
    71c2:	f1 05       	cpc	r31, r1
	breq .+2 
    71c4:	09 f0       	breq	.+2      	; 0x71c8 <no_render+0x6e>
	icall
    71c6:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    71c8:	bf 91       	pop	r27
	pop r26
    71ca:	af 91       	pop	r26
	pop r25
    71cc:	9f 91       	pop	r25
	pop r24
    71ce:	8f 91       	pop	r24
	pop r23
    71d0:	7f 91       	pop	r23
	pop r22
    71d2:	6f 91       	pop	r22
	pop r21
    71d4:	5f 91       	pop	r21
	pop r20
    71d6:	4f 91       	pop	r20
	pop r19
    71d8:	3f 91       	pop	r19
	pop r18
    71da:	2f 91       	pop	r18

000071dc <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    71dc:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    71de:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    71e0:	ff 91       	pop	r31
	pop ZL
    71e2:	ef 91       	pop	r30
	pop r1
    71e4:	1f 90       	pop	r1
	pop r0
    71e6:	0f 90       	pop	r0
	reti
    71e8:	18 95       	reti

000071ea <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71ea:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    71ec:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    71ee:	00 c0       	rjmp	.+0      	; 0x71f0 <hsync_pulse+0x6>
	call update_sound
    71f0:	0e 94 06 39 	call	0x720c	; 0x720c <update_sound>

	lds ZL,sync_pulse
    71f4:	e0 91 1f 0a 	lds	r30, 0x0A1F
	dec ZL
    71f8:	ea 95       	dec	r30
	sts sync_pulse,ZL
    71fa:	e0 93 1f 0a 	sts	0x0A1F, r30

	ret
    71fe:	08 95       	ret

00007200 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7200:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    7204:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7206:	0e 94 cc 3d 	call	0x7b98	; 0x7b98 <ProcessMusic>
#endif

	ret
    720a:	08 95       	ret

0000720c <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    720c:	0f 93       	push	r16
	push r17
    720e:	1f 93       	push	r17
	push r18
    7210:	2f 93       	push	r18
	push r28
    7212:	cf 93       	push	r28
	push r29
    7214:	df 93       	push	r29

	mov r18,ZL
    7216:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7218:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    721c:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    7220:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7222:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    7226:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    722a:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    722e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7230:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7232:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    7236:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    723a:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    723e:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7240:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7242:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7244:	d0 2d       	mov	r29, r0
	nop
    7246:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7248:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    724c:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    7250:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7252:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    7256:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    725a:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    725e:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7260:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7262:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    7266:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    726a:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    726e:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7270:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7272:	20 ff       	sbrs	r18, 0
	rjmp .
    7274:	00 c0       	rjmp	.+0      	; 0x7276 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7276:	01 03       	mulsu	r16, r17
	clr r0
    7278:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    727a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    727c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    727e:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7280:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    7284:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7288:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    728a:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    728e:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    7292:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    7296:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7298:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    729a:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    729e:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    72a2:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    72a6:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    72a8:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    72aa:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    72ac:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    72ae:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    72b2:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    72b6:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    72ba:	ea 95       	dec	r30
	brpl ch4_no_shift	
    72bc:	92 f4       	brpl	.+36     	; 0x72e2 <ch4_no_shift>

	lds ZH,tr4_params
    72be:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    72c2:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    72c4:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    72c6:	00 2e       	mov	r0, r16
	lsr r0
    72c8:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    72ca:	00 26       	eor	r0, r16
	bst r0,0
    72cc:	00 fa       	bst	r0, 0
	lsr r17
    72ce:	16 95       	lsr	r17
	ror r16
    72d0:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    72d2:	16 f9       	bld	r17, 6
	sbrs ZH,0
    72d4:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    72d6:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    72d8:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    72dc:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    72e0:	03 c0       	rjmp	.+6      	; 0x72e8 <ch4_end>

000072e2 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    72e2:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    72e4:	1a 95       	dec	r17
	brne .-4
    72e6:	f1 f7       	brne	.-4      	; 0x72e4 <ch4_no_shift+0x2>

000072e8 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    72e8:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    72ec:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    72ee:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    72f0:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    72f2:	21 ff       	sbrs	r18, 1
	rjmp .
    72f4:	00 c0       	rjmp	.+0      	; 0x72f6 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    72f6:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    72f8:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    72fa:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    72fe:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7300:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7302:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7304:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7306:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7308:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    730a:	d0 05       	cpc	r29, r0
	brlt .+2
    730c:	0c f0       	brlt	.+2      	; 0x7310 <ch4_end+0x28>
	ldi r28,127
    730e:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7310:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7312:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7314:	d0 05       	cpc	r29, r0
	brge .+2
    7316:	0c f4       	brge	.+2      	; 0x731a <ch4_end+0x32>
	ldi r28,-128
    7318:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    731a:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    731c:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    7320:	e0 eb       	ldi	r30, 0xB0	; 176
	ldi ZH,hi8(uart_rx_buf)
    7322:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    7324:	00 91 ad 0a 	lds	r16, 0x0AAD

	clr r0
    7328:	00 24       	eor	r0, r0
	add ZL,r16
    732a:	e0 0f       	add	r30, r16
	adc ZH,r0
    732c:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    732e:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    7332:	17 ff       	sbrs	r17, 7
	rjmp 1f
    7334:	08 c0       	rjmp	.+16     	; 0x7346 <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    7336:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    733a:	20 83       	st	Z, r18
	inc r16
    733c:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    733e:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    7340:	00 93 ad 0a 	sts	0x0AAD, r16
	rjmp uart_tx
    7344:	03 c0       	rjmp	.+6      	; 0x734c <uart_tx>
1:
	WAIT r28,9
    7346:	c3 e0       	ldi	r28, 0x03	; 3
    7348:	ca 95       	dec	r28
    734a:	f1 f7       	brne	.-4      	; 0x7348 <ch4_end+0x60>

0000734c <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    734c:	ec e6       	ldi	r30, 0x6C	; 108
	ldi ZH,hi8(uart_tx_buf)
    734e:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    7350:	00 91 f0 0a 	lds	r16, 0x0AF0
	lds r29,uart_tx_head
    7354:	d0 91 ae 0a 	lds	r29, 0x0AAE
	
	add ZL,r16
    7358:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    735a:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    735c:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    7360:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    7362:	d0 1b       	sub	r29, r16
	mul r28,r29
    7364:	cd 9f       	mul	r28, r29
	breq 1f		
    7366:	41 f0       	breq	.+16     	; 0x7378 <uart_tx+0x2c>

	ld r18,Z
    7368:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    736a:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    736e:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    7370:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_tx_tail,r16
    7372:	00 93 f0 0a 	sts	0x0AF0, r16
	rjmp update_sound_end
    7376:	03 c0       	rjmp	.+6      	; 0x737e <update_sound_end>
1:
	WAIT r28,9
    7378:	c3 e0       	ldi	r28, 0x03	; 3
    737a:	ca 95       	dec	r28
    737c:	f1 f7       	brne	.-4      	; 0x737a <uart_tx+0x2e>

0000737e <update_sound_end>:
#endif


update_sound_end:

	pop r29
    737e:	df 91       	pop	r29
	pop r28
    7380:	cf 91       	pop	r28
	pop r18
    7382:	2f 91       	pop	r18
	pop r17
    7384:	1f 91       	pop	r17
	pop r16
    7386:	0f 91       	pop	r16
	
	ret
    7388:	08 95       	ret

0000738a <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    738a:	80 93 0f 0a 	sts	0x0A0F, r24
	sts sprites_tile_banks+1,r25
    738e:	90 93 10 0a 	sts	0x0A10, r25
	ret
    7392:	08 95       	ret

00007394 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7394:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7396:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7398:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    739a:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    739c:	64 e1       	ldi	r22, 0x14	; 20

0000739e <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    739e:	6d 93       	st	X+, r22
	sbiw r30,1
    73a0:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    73a2:	e9 f7       	brne	.-6      	; 0x739e <fill_vram_loop>

	clr r1
    73a4:	11 24       	eor	r1, r1

	ret
    73a6:	08 95       	ret

000073a8 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    73a8:	50 91 19 0a 	lds	r21, 0x0A19
	add r20,21
    73ac:	45 0f       	add	r20, r21
	rjmp SetTile	
    73ae:	00 c0       	rjmp	.+0      	; 0x73b0 <SetTile>

000073b0 <SetTile>:

	ret

#else

	clr r25
    73b0:	99 27       	eor	r25, r25
	clr r23	
    73b2:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    73b4:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    73b6:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    73b8:	08 0e       	add	r0, r24
	adc r1,r25
    73ba:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    73bc:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    73be:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    73c0:	a0 0d       	add	r26, r0
	adc XH,r1
    73c2:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    73c4:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    73c6:	4c 93       	st	X, r20

	clr r1
    73c8:	11 24       	eor	r1, r1

	ret
    73ca:	08 95       	ret

000073cc <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    73cc:	80 93 19 0a 	sts	0x0A19, r24
	ret
    73d0:	08 95       	ret

000073d2 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    73d2:	80 93 17 0a 	sts	0x0A17, r24
	sts tile_table_hi,r25	
    73d6:	90 93 18 0a 	sts	0x0A18, r25
	ret
    73da:	08 95       	ret

000073dc <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    73dc:	80 91 20 0a 	lds	r24, 0x0A20
	andi r24,SYNC_FLAG_VSYNC
    73e0:	81 70       	andi	r24, 0x01	; 1
	ret
    73e2:	08 95       	ret

000073e4 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    73e4:	20 91 20 0a 	lds	r18, 0x0A20
	andi r18,~SYNC_FLAG_VSYNC
    73e8:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    73ea:	20 93 20 0a 	sts	0x0A20, r18
	ret
    73ee:	08 95       	ret

000073f0 <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    73f0:	80 91 2f 0a 	lds	r24, 0x0A2F
	lds r25,vsync_counter+1
    73f4:	90 91 30 0a 	lds	r25, 0x0A30
	ret
    73f8:	08 95       	ret

000073fa <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    73fa:	10 92 2f 0a 	sts	0x0A2F, r1
	sts vsync_counter+1,r1
    73fe:	10 92 30 0a 	sts	0x0A30, r1
	ret
    7402:	08 95       	ret

00007404 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7404:	88 23       	and	r24, r24
	brne rj_p2
    7406:	29 f4       	brne	.+10     	; 0x7412 <rj_p2>
		
	lds r24,joypad1_status_lo
    7408:	80 91 27 0a 	lds	r24, 0x0A27
	lds r25,joypad1_status_lo+1
    740c:	90 91 28 0a 	lds	r25, 0x0A28
	ret
    7410:	08 95       	ret

00007412 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7412:	80 91 2b 0a 	lds	r24, 0x0A2B
	lds r25,joypad2_status_lo+1	
    7416:	90 91 2c 0a 	lds	r25, 0x0A2C

	ret
    741a:	08 95       	ret

0000741c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    741c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    741e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7420:	f1 f7       	brne	.-4      	; 0x741e <WaitUs+0x2>
	nop
    7422:	00 00       	nop
	sbiw r24,1
    7424:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7426:	d1 f7       	brne	.-12     	; 0x741c <WaitUs>

	ret
    7428:	08 95       	ret

0000742a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    742a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    742c:	fe cf       	rjmp	.-4      	; 0x742a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    742e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7430:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7432:	60 bd       	out	0x20, r22	; 32
   cli
    7434:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7436:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7438:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    743a:	78 94       	sei
   ret
    743c:	08 95       	ret

0000743e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    743e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7440:	fe cf       	rjmp	.-4      	; 0x743e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7442:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7444:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7446:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7448:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    744a:	80 b5       	in	r24, 0x20	; 32
   sei
    744c:	78 94       	sei
   ret
    744e:	08 95       	ret

00007450 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7450:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7452:	80 93 1f 0a 	sts	0x0A1F, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    7456:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    745a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    745e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    7462:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    7466:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    746a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    746e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7472:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7476:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7478:	80 93 81 00 	sts	0x0081, r24

		cli
    747c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    747e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7480:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7484:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7486:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    748a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    748c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7490:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7494:	78 94       	sei

00007496 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7496:	80 91 1f 0a 	lds	r24, 0x0A1F
		cpi r24,8
    749a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    749c:	e0 f3       	brcs	.-8      	; 0x7496 <wait>

		ret
    749e:	08 95       	ret

000074a0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    74a0:	80 91 31 0a 	lds	r24, 0x0A31
		lds r25,random_value+1
    74a4:	90 91 32 0a 	lds	r25, 0x0A32
		ret
    74a8:	08 95       	ret

000074aa <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    74aa:	0f 93       	push	r16
		push r17
    74ac:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    74ae:	0f b7       	in	r16, 0x3f	; 63
		push r16
    74b0:	0f 93       	push	r16

		lds r16,sync_pulse
    74b2:	00 91 1f 0a 	lds	r16, 0x0A1F
		inc r16
    74b6:	03 95       	inc	r16
		sts sync_pulse,r16
    74b8:	00 93 1f 0a 	sts	0x0A1F, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    74bc:	00 fd       	sbrc	r16, 0
		rjmp 1f
    74be:	08 c0       	rjmp	.+16     	; 0x74d0 <__vector_8+0x26>
		lds r17,random_value
    74c0:	10 91 31 0a 	lds	r17, 0x0A31
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    74c4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    74c8:	10 27       	eor	r17, r16
		sts random_value,r17
    74ca:	10 93 31 0a 	sts	0x0A31, r17
		rjmp 2f
    74ce:	07 c0       	rjmp	.+14     	; 0x74de <__vector_8+0x34>
	1:
		lds r17,random_value+1
    74d0:	10 91 32 0a 	lds	r17, 0x0A32
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    74d4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    74d8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    74da:	10 93 32 0a 	sts	0x0A32, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    74de:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    74e0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    74e4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    74e6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    74e8:	1f 91       	pop	r17
		pop r16
    74ea:	0f 91       	pop	r16
		reti
    74ec:	18 95       	reti

000074ee <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    74ee:	98 e0       	ldi	r25, 0x08	; 8
    74f0:	88 e1       	ldi	r24, 0x18	; 24
    74f2:	0f b6       	in	r0, 0x3f	; 63
    74f4:	f8 94       	cli
    74f6:	a8 95       	wdr
    74f8:	80 93 60 00 	sts	0x0060, r24
    74fc:	0f be       	out	0x3f, r0	; 63
    74fe:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7502:	ff cf       	rjmp	.-2      	; 0x7502 <SoftReset+0x14>

00007504 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7504:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7506:	c8 95       	lpm
    7508:	c8 95       	lpm
		Wait200ns();
    750a:	c8 95       	lpm
    750c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    750e:	12 98       	cbi	0x02, 2	; 2
    7510:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7512:	80 e0       	ldi	r24, 0x00	; 0
    7514:	90 e0       	ldi	r25, 0x00	; 0
    7516:	20 e0       	ldi	r18, 0x00	; 0
    7518:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    751a:	36 95       	lsr	r19
    751c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    751e:	96 95       	lsr	r25
    7520:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7522:	c8 95       	lpm
    7524:	c8 95       	lpm
			Wait200ns();
    7526:	c8 95       	lpm
    7528:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    752a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    752c:	00 9b       	sbis	0x00, 0	; 0
    752e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7530:	01 9b       	sbis	0x00, 1	; 0
    7532:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7534:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7536:	c8 95       	lpm
    7538:	c8 95       	lpm
			Wait200ns();
    753a:	c8 95       	lpm
    753c:	c8 95       	lpm
    753e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7540:	61 f7       	brne	.-40     	; 0x751a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7542:	30 93 28 0a 	sts	0x0A28, r19
    7546:	20 93 27 0a 	sts	0x0A27, r18
		joypad2_status_lo=p2ButtonsLo;
    754a:	90 93 2c 0a 	sts	0x0A2C, r25
    754e:	80 93 2b 0a 	sts	0x0A2B, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7552:	80 91 27 0a 	lds	r24, 0x0A27
    7556:	90 91 28 0a 	lds	r25, 0x0A28
    755a:	0f 97       	sbiw	r24, 0x0f	; 15
    755c:	31 f0       	breq	.+12     	; 0x756a <ReadButtons+0x66>
    755e:	80 91 2b 0a 	lds	r24, 0x0A2B
    7562:	90 91 2c 0a 	lds	r25, 0x0A2C
    7566:	0f 97       	sbiw	r24, 0x0f	; 15
    7568:	11 f4       	brne	.+4      	; 0x756e <ReadButtons+0x6a>
		SoftReset();
    756a:	0e 94 77 3a 	call	0x74ee	; 0x74ee <SoftReset>
    756e:	08 95       	ret

00007570 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    7570:	10 92 ac 0a 	sts	0x0AAC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7574:	00 99       	sbic	0x00, 0	; 0
    7576:	03 c0       	rjmp	.+6      	; 0x757e <ReadControllers+0xe>
    7578:	81 e0       	ldi	r24, 0x01	; 1
    757a:	80 93 ac 0a 	sts	0x0AAC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    757e:	01 99       	sbic	0x00, 1	; 0
    7580:	05 c0       	rjmp	.+10     	; 0x758c <ReadControllers+0x1c>
    7582:	80 91 ac 0a 	lds	r24, 0x0AAC
    7586:	82 60       	ori	r24, 0x02	; 2
    7588:	80 93 ac 0a 	sts	0x0AAC, r24
			
	//read the standard buttons
	ReadButtons();
    758c:	0c 94 82 3a 	jmp	0x7504	; 0x7504 <ReadButtons>

00007590 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7590:	cf 93       	push	r28
    7592:	df 93       	push	r29
    7594:	c0 e0       	ldi	r28, 0x00	; 0
    7596:	d0 e0       	ldi	r29, 0x00	; 0
    7598:	fe 01       	movw	r30, r28
    759a:	e2 56       	subi	r30, 0x62	; 98
    759c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    759e:	64 91       	lpm	r22, Z
    75a0:	ce 01       	movw	r24, r28
    75a2:	0e 94 15 3a 	call	0x742a	; 0x742a <WriteEeprom>
    75a6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    75a8:	c0 32       	cpi	r28, 0x20	; 32
    75aa:	d1 05       	cpc	r29, r1
    75ac:	a9 f7       	brne	.-22     	; 0x7598 <FormatEeprom+0x8>
    75ae:	c0 e2       	ldi	r28, 0x20	; 32
    75b0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    75b2:	6f ef       	ldi	r22, 0xFF	; 255
    75b4:	ce 01       	movw	r24, r28
    75b6:	0e 94 15 3a 	call	0x742a	; 0x742a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    75ba:	6f ef       	ldi	r22, 0xFF	; 255
    75bc:	ce 01       	movw	r24, r28
    75be:	01 96       	adiw	r24, 0x01	; 1
    75c0:	0e 94 15 3a 	call	0x742a	; 0x742a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    75c4:	a0 96       	adiw	r28, 0x20	; 32
    75c6:	c1 15       	cp	r28, r1
    75c8:	88 e0       	ldi	r24, 0x08	; 8
    75ca:	d8 07       	cpc	r29, r24
    75cc:	91 f7       	brne	.-28     	; 0x75b2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    75ce:	df 91       	pop	r29
    75d0:	cf 91       	pop	r28
    75d2:	08 95       	ret

000075d4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    75d4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    75d6:	80 e0       	ldi	r24, 0x00	; 0
    75d8:	90 e0       	ldi	r25, 0x00	; 0
    75da:	0e 94 1f 3a 	call	0x743e	; 0x743e <ReadEeprom>
    75de:	c8 2f       	mov	r28, r24
    75e0:	81 e0       	ldi	r24, 0x01	; 1
    75e2:	90 e0       	ldi	r25, 0x00	; 0
    75e4:	0e 94 1f 3a 	call	0x743e	; 0x743e <ReadEeprom>
    75e8:	28 2f       	mov	r18, r24
    75ea:	30 e0       	ldi	r19, 0x00	; 0
    75ec:	32 2f       	mov	r19, r18
    75ee:	22 27       	eor	r18, r18
    75f0:	2c 0f       	add	r18, r28
    75f2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    75f4:	81 e0       	ldi	r24, 0x01	; 1
    75f6:	2a 35       	cpi	r18, 0x5A	; 90
    75f8:	35 45       	sbci	r19, 0x55	; 85
    75fa:	09 f0       	breq	.+2      	; 0x75fe <isEepromFormatted+0x2a>
    75fc:	80 e0       	ldi	r24, 0x00	; 0
}
    75fe:	cf 91       	pop	r28
    7600:	08 95       	ret

00007602 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    7602:	8f 92       	push	r8
    7604:	9f 92       	push	r9
    7606:	af 92       	push	r10
    7608:	bf 92       	push	r11
    760a:	cf 92       	push	r12
    760c:	df 92       	push	r13
    760e:	ef 92       	push	r14
    7610:	ff 92       	push	r15
    7612:	0f 93       	push	r16
    7614:	1f 93       	push	r17
    7616:	cf 93       	push	r28
    7618:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    761a:	fb 01       	movw	r30, r22
    761c:	11 82       	std	Z+1, r1	; 0x01
    761e:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7620:	8f 3f       	cpi	r24, 0xFF	; 255
    7622:	ff ef       	ldi	r31, 0xFF	; 255
    7624:	9f 07       	cpc	r25, r31
    7626:	89 f1       	breq	.+98     	; 0x768a <EepromBlockExists+0x88>
    7628:	6a 01       	movw	r12, r20
    762a:	8b 01       	movw	r16, r22
    762c:	7c 01       	movw	r14, r24
    762e:	a1 2c       	mov	r10, r1
    7630:	b1 2c       	mov	r11, r1
    7632:	c0 e0       	ldi	r28, 0x00	; 0
    7634:	d3 e0       	ldi	r29, 0x03	; 3
    7636:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7638:	c5 01       	movw	r24, r10
    763a:	0e 94 1f 3a 	call	0x743e	; 0x743e <ReadEeprom>
    763e:	88 2e       	mov	r8, r24
    7640:	c5 01       	movw	r24, r10
    7642:	01 96       	adiw	r24, 0x01	; 1
    7644:	0e 94 1f 3a 	call	0x743e	; 0x743e <ReadEeprom>
    7648:	28 2f       	mov	r18, r24
    764a:	30 e0       	ldi	r19, 0x00	; 0
    764c:	32 2f       	mov	r19, r18
    764e:	22 27       	eor	r18, r18
    7650:	28 0d       	add	r18, r8
    7652:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    7654:	2e 15       	cp	r18, r14
    7656:	3f 05       	cpc	r19, r15
    7658:	29 f4       	brne	.+10     	; 0x7664 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    765a:	f8 01       	movw	r30, r16
    765c:	b1 82       	std	Z+1, r11	; 0x01
    765e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    7660:	d0 e0       	ldi	r29, 0x00	; 0
    7662:	0b c0       	rjmp	.+22     	; 0x767a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    7664:	2f 3f       	cpi	r18, 0xFF	; 255
    7666:	3f 4f       	sbci	r19, 0xFF	; 255
    7668:	41 f4       	brne	.+16     	; 0x767a <EepromBlockExists+0x78>
    766a:	91 10       	cpse	r9, r1
    766c:	06 c0       	rjmp	.+12     	; 0x767a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    766e:	c1 14       	cp	r12, r1
    7670:	d1 04       	cpc	r13, r1
    7672:	11 f0       	breq	.+4      	; 0x7678 <EepromBlockExists+0x76>
    7674:	f6 01       	movw	r30, r12
    7676:	c0 83       	st	Z, r28
    7678:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    767a:	cf 5f       	subi	r28, 0xFF	; 255
    767c:	f0 e2       	ldi	r31, 0x20	; 32
    767e:	af 0e       	add	r10, r31
    7680:	b1 1c       	adc	r11, r1
    7682:	c0 34       	cpi	r28, 0x40	; 64
    7684:	c9 f6       	brne	.-78     	; 0x7638 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    7686:	8d 2f       	mov	r24, r29
    7688:	01 c0       	rjmp	.+2      	; 0x768c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    768a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    768c:	df 91       	pop	r29
    768e:	cf 91       	pop	r28
    7690:	1f 91       	pop	r17
    7692:	0f 91       	pop	r16
    7694:	ff 90       	pop	r15
    7696:	ef 90       	pop	r14
    7698:	df 90       	pop	r13
    769a:	cf 90       	pop	r12
    769c:	bf 90       	pop	r11
    769e:	af 90       	pop	r10
    76a0:	9f 90       	pop	r9
    76a2:	8f 90       	pop	r8
    76a4:	08 95       	ret

000076a6 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    76a6:	ef 92       	push	r14
    76a8:	ff 92       	push	r15
    76aa:	0f 93       	push	r16
    76ac:	1f 93       	push	r17
    76ae:	cf 93       	push	r28
    76b0:	df 93       	push	r29
    76b2:	00 d0       	rcall	.+0      	; 0x76b4 <EepromWriteBlock+0xe>
    76b4:	1f 92       	push	r1
    76b6:	cd b7       	in	r28, 0x3d	; 61
    76b8:	de b7       	in	r29, 0x3e	; 62
    76ba:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    76bc:	1a 82       	std	Y+2, r1	; 0x02
    76be:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    76c0:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    76c2:	ae 01       	movw	r20, r28
    76c4:	4d 5f       	subi	r20, 0xFD	; 253
    76c6:	5f 4f       	sbci	r21, 0xFF	; 255
    76c8:	be 01       	movw	r22, r28
    76ca:	6f 5f       	subi	r22, 0xFF	; 255
    76cc:	7f 4f       	sbci	r23, 0xFF	; 255
    76ce:	fc 01       	movw	r30, r24
    76d0:	80 81       	ld	r24, Z
    76d2:	91 81       	ldd	r25, Z+1	; 0x01
    76d4:	0e 94 01 3b 	call	0x7602	; 0x7602 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    76d8:	88 23       	and	r24, r24
    76da:	11 f0       	breq	.+4      	; 0x76e0 <EepromWriteBlock+0x3a>
    76dc:	83 30       	cpi	r24, 0x03	; 3
    76de:	19 f5       	brne	.+70     	; 0x7726 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    76e0:	89 81       	ldd	r24, Y+1	; 0x01
    76e2:	9a 81       	ldd	r25, Y+2	; 0x02
    76e4:	89 2b       	or	r24, r25
    76e6:	49 f4       	brne	.+18     	; 0x76fa <EepromWriteBlock+0x54>
    76e8:	8b 81       	ldd	r24, Y+3	; 0x03
    76ea:	88 23       	and	r24, r24
    76ec:	d9 f0       	breq	.+54     	; 0x7724 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    76ee:	f0 e2       	ldi	r31, 0x20	; 32
    76f0:	8f 9f       	mul	r24, r31
    76f2:	c0 01       	movw	r24, r0
    76f4:	11 24       	eor	r1, r1
    76f6:	9a 83       	std	Y+2, r25	; 0x02
    76f8:	89 83       	std	Y+1, r24	; 0x01
    76fa:	78 01       	movw	r14, r16
    76fc:	20 e2       	ldi	r18, 0x20	; 32
    76fe:	e2 0e       	add	r14, r18
    7700:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    7702:	f8 01       	movw	r30, r16
    7704:	61 91       	ld	r22, Z+
    7706:	8f 01       	movw	r16, r30
    7708:	89 81       	ldd	r24, Y+1	; 0x01
    770a:	9a 81       	ldd	r25, Y+2	; 0x02
    770c:	9c 01       	movw	r18, r24
    770e:	2f 5f       	subi	r18, 0xFF	; 255
    7710:	3f 4f       	sbci	r19, 0xFF	; 255
    7712:	3a 83       	std	Y+2, r19	; 0x02
    7714:	29 83       	std	Y+1, r18	; 0x01
    7716:	0e 94 15 3a 	call	0x742a	; 0x742a <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    771a:	0e 15       	cp	r16, r14
    771c:	1f 05       	cpc	r17, r15
    771e:	89 f7       	brne	.-30     	; 0x7702 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	01 c0       	rjmp	.+2      	; 0x7726 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7724:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7726:	0f 90       	pop	r0
    7728:	0f 90       	pop	r0
    772a:	0f 90       	pop	r0
    772c:	df 91       	pop	r29
    772e:	cf 91       	pop	r28
    7730:	1f 91       	pop	r17
    7732:	0f 91       	pop	r16
    7734:	ff 90       	pop	r15
    7736:	ef 90       	pop	r14
    7738:	08 95       	ret

0000773a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    773a:	cf 92       	push	r12
    773c:	df 92       	push	r13
    773e:	ff 92       	push	r15
    7740:	0f 93       	push	r16
    7742:	1f 93       	push	r17
    7744:	cf 93       	push	r28
    7746:	df 93       	push	r29
    7748:	00 d0       	rcall	.+0      	; 0x774a <EepromReadBlock+0x10>
    774a:	cd b7       	in	r28, 0x3d	; 61
    774c:	de b7       	in	r29, 0x3e	; 62
    774e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    7750:	40 e0       	ldi	r20, 0x00	; 0
    7752:	50 e0       	ldi	r21, 0x00	; 0
    7754:	be 01       	movw	r22, r28
    7756:	6f 5f       	subi	r22, 0xFF	; 255
    7758:	7f 4f       	sbci	r23, 0xFF	; 255
    775a:	0e 94 01 3b 	call	0x7602	; 0x7602 <EepromBlockExists>
    775e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    7760:	81 11       	cpse	r24, r1
    7762:	13 c0       	rjmp	.+38     	; 0x778a <EepromReadBlock+0x50>
    7764:	68 01       	movw	r12, r16
    7766:	80 e2       	ldi	r24, 0x20	; 32
    7768:	c8 0e       	add	r12, r24
    776a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    776c:	89 81       	ldd	r24, Y+1	; 0x01
    776e:	9a 81       	ldd	r25, Y+2	; 0x02
    7770:	9c 01       	movw	r18, r24
    7772:	2f 5f       	subi	r18, 0xFF	; 255
    7774:	3f 4f       	sbci	r19, 0xFF	; 255
    7776:	3a 83       	std	Y+2, r19	; 0x02
    7778:	29 83       	std	Y+1, r18	; 0x01
    777a:	0e 94 1f 3a 	call	0x743e	; 0x743e <ReadEeprom>
    777e:	f8 01       	movw	r30, r16
    7780:	81 93       	st	Z+, r24
    7782:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7784:	ec 15       	cp	r30, r12
    7786:	fd 05       	cpc	r31, r13
    7788:	89 f7       	brne	.-30     	; 0x776c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    778a:	8f 2d       	mov	r24, r15
    778c:	0f 90       	pop	r0
    778e:	0f 90       	pop	r0
    7790:	df 91       	pop	r29
    7792:	cf 91       	pop	r28
    7794:	1f 91       	pop	r17
    7796:	0f 91       	pop	r16
    7798:	ff 90       	pop	r15
    779a:	df 90       	pop	r13
    779c:	cf 90       	pop	r12
    779e:	08 95       	ret

000077a0 <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    77a0:	80 91 ad 0a 	lds	r24, 0x0AAD
    77a4:	90 91 af 0a 	lds	r25, 0x0AAF
	}
    77a8:	89 1b       	sub	r24, r25
    77aa:	08 95       	ret

000077ac <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    77ac:	90 91 ad 0a 	lds	r25, 0x0AAD
    77b0:	80 91 af 0a 	lds	r24, 0x0AAF
    77b4:	98 17       	cp	r25, r24
    77b6:	71 f0       	breq	.+28     	; 0x77d4 <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    77b8:	e0 91 af 0a 	lds	r30, 0x0AAF
    77bc:	f0 e0       	ldi	r31, 0x00	; 0
    77be:	e0 55       	subi	r30, 0x50	; 80
    77c0:	f5 4f       	sbci	r31, 0xF5	; 245
    77c2:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    77c4:	90 91 af 0a 	lds	r25, 0x0AAF
    77c8:	9f 5f       	subi	r25, 0xFF	; 255
    77ca:	9f 73       	andi	r25, 0x3F	; 63
    77cc:	90 93 af 0a 	sts	0x0AAF, r25
			return (data&0xff);
    77d0:	90 e0       	ldi	r25, 0x00	; 0
    77d2:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    77d4:	8f ef       	ldi	r24, 0xFF	; 255
    77d6:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    77d8:	08 95       	ret

000077da <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    77da:	10 92 af 0a 	sts	0x0AAF, r1
		uart_rx_head=0;
    77de:	10 92 ad 0a 	sts	0x0AAD, r1
    77e2:	08 95       	ret

000077e4 <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    77e4:	90 91 ae 0a 	lds	r25, 0x0AAE
    77e8:	9f 5f       	subi	r25, 0xFF	; 255
    77ea:	9f 73       	andi	r25, 0x3F	; 63

		if (next_head != uart_tx_tail) {
    77ec:	20 91 f0 0a 	lds	r18, 0x0AF0
    77f0:	92 17       	cp	r25, r18
    77f2:	51 f0       	breq	.+20     	; 0x7808 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    77f4:	e0 91 ae 0a 	lds	r30, 0x0AAE
    77f8:	f0 e0       	ldi	r31, 0x00	; 0
    77fa:	e4 59       	subi	r30, 0x94	; 148
    77fc:	f5 4f       	sbci	r31, 0xF5	; 245
    77fe:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    7800:	90 93 ae 0a 	sts	0x0AAE, r25
			return 0;
    7804:	80 e0       	ldi	r24, 0x00	; 0
    7806:	08 95       	ret
		}else{
			return -1; //buffer full
    7808:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    780a:	08 95       	ret

0000780c <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    780c:	10 92 f0 0a 	sts	0x0AF0, r1
		uart_tx_head=0;
    7810:	10 92 ae 0a 	sts	0x0AAE, r1
    7814:	08 95       	ret

00007816 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7816:	00 97       	sbiw	r24, 0x00	; 0
    7818:	21 f0       	breq	.+8      	; 0x7822 <GetPrngNumber+0xc>
    781a:	90 93 41 0a 	sts	0x0A41, r25
    781e:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    7822:	20 91 40 0a 	lds	r18, 0x0A40
    7826:	30 91 41 0a 	lds	r19, 0x0A41
    782a:	a9 01       	movw	r20, r18
    782c:	56 95       	lsr	r21
    782e:	47 95       	ror	r20
    7830:	56 95       	lsr	r21
    7832:	47 95       	ror	r20
    7834:	c9 01       	movw	r24, r18
    7836:	63 e0       	ldi	r22, 0x03	; 3
    7838:	96 95       	lsr	r25
    783a:	87 95       	ror	r24
    783c:	6a 95       	dec	r22
    783e:	e1 f7       	brne	.-8      	; 0x7838 <GetPrngNumber+0x22>
    7840:	84 27       	eor	r24, r20
    7842:	95 27       	eor	r25, r21
    7844:	82 27       	eor	r24, r18
    7846:	93 27       	eor	r25, r19
    7848:	a9 01       	movw	r20, r18
    784a:	75 e0       	ldi	r23, 0x05	; 5
    784c:	56 95       	lsr	r21
    784e:	47 95       	ror	r20
    7850:	7a 95       	dec	r23
    7852:	e1 f7       	brne	.-8      	; 0x784c <GetPrngNumber+0x36>
    7854:	84 27       	eor	r24, r20
    7856:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    7858:	99 27       	eor	r25, r25
    785a:	86 95       	lsr	r24
    785c:	97 95       	ror	r25
    785e:	88 27       	eor	r24, r24
    7860:	36 95       	lsr	r19
    7862:	27 95       	ror	r18
    7864:	82 2b       	or	r24, r18
    7866:	93 2b       	or	r25, r19
    7868:	90 93 41 0a 	sts	0x0A41, r25
    786c:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    7870:	08 95       	ret

00007872 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    7872:	fc 01       	movw	r30, r24
    7874:	67 87       	std	Z+15, r22	; 0x0f
    7876:	08 95       	ret

00007878 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7878:	e4 e4       	ldi	r30, 0x44	; 68
    787a:	fa e0       	ldi	r31, 0x0A	; 10
    787c:	81 e0       	ldi	r24, 0x01	; 1
    787e:	91 e0       	ldi	r25, 0x01	; 1
    7880:	95 8b       	std	Z+21, r25	; 0x15
    7882:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7884:	63 8b       	std	Z+19, r22	; 0x13
    7886:	08 95       	ret

00007888 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    7888:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    788a:	90 81       	ld	r25, Z
    788c:	9f 75       	andi	r25, 0x5F	; 95
    788e:	90 83       	st	Z, r25
    7890:	08 95       	ret

00007892 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    7892:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7894:	90 81       	ld	r25, Z
    7896:	90 64       	ori	r25, 0x40	; 64
    7898:	90 83       	st	Z, r25
    789a:	08 95       	ret

0000789c <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    789c:	fc 01       	movw	r30, r24
    789e:	66 87       	std	Z+14, r22	; 0x0e
    78a0:	08 95       	ret

000078a2 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    78a2:	fc 01       	movw	r30, r24
    78a4:	62 87       	std	Z+10, r22	; 0x0a
    78a6:	08 95       	ret

000078a8 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    78a8:	fc 01       	movw	r30, r24
    78aa:	63 87       	std	Z+11, r22	; 0x0b
    78ac:	08 95       	ret

000078ae <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    78ae:	cf 93       	push	r28
    78b0:	df 93       	push	r29
    78b2:	ec 01       	movw	r28, r24
    78b4:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    78b6:	29 81       	ldd	r18, Y+1	; 0x01
    78b8:	30 e0       	ldi	r19, 0x00	; 0
    78ba:	f9 01       	movw	r30, r18
    78bc:	ee 0f       	add	r30, r30
    78be:	ff 1f       	adc	r31, r31
    78c0:	e8 5f       	subi	r30, 0xF8	; 248
    78c2:	fe 47       	sbci	r31, 0x7E	; 126
    78c4:	65 91       	lpm	r22, Z+
    78c6:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    78c8:	f9 01       	movw	r30, r18
    78ca:	e4 0f       	add	r30, r20
    78cc:	f1 1d       	adc	r31, r1
    78ce:	47 fd       	sbrc	r20, 7
    78d0:	fa 95       	dec	r31
    78d2:	ee 0f       	add	r30, r30
    78d4:	ff 1f       	adc	r31, r31
    78d6:	e8 5f       	subi	r30, 0xF8	; 248
    78d8:	fe 47       	sbci	r31, 0x7E	; 126
    78da:	85 91       	lpm	r24, Z+
    78dc:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    78de:	86 1b       	sub	r24, r22
    78e0:	97 0b       	sbc	r25, r23
    78e2:	68 85       	ldd	r22, Y+8	; 0x08
    78e4:	70 e0       	ldi	r23, 0x00	; 0
    78e6:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
	if(delta==0)delta++;
    78ea:	61 15       	cp	r22, r1
    78ec:	71 05       	cpc	r23, r1
    78ee:	11 f4       	brne	.+4      	; 0x78f4 <PatchCommand11+0x46>
    78f0:	61 e0       	ldi	r22, 0x01	; 1
    78f2:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    78f4:	ea 81       	ldd	r30, Y+2	; 0x02
    78f6:	86 e0       	ldi	r24, 0x06	; 6
    78f8:	e8 9f       	mul	r30, r24
    78fa:	f0 01       	movw	r30, r0
    78fc:	11 24       	eor	r1, r1
    78fe:	ec 5b       	subi	r30, 0xBC	; 188
    7900:	f5 4f       	sbci	r31, 0xF5	; 245
    7902:	81 81       	ldd	r24, Z+1	; 0x01
    7904:	92 81       	ldd	r25, Z+2	; 0x02
    7906:	86 0f       	add	r24, r22
    7908:	97 1f       	adc	r25, r23
    790a:	92 83       	std	Z+2, r25	; 0x02
    790c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    790e:	7e 83       	std	Y+6, r23	; 0x06
    7910:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7912:	88 81       	ld	r24, Y
    7914:	88 60       	ori	r24, 0x08	; 8
    7916:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7918:	89 81       	ldd	r24, Y+1	; 0x01
    791a:	48 0f       	add	r20, r24
    791c:	4f 83       	std	Y+7, r20	; 0x07
}
    791e:	df 91       	pop	r29
    7920:	cf 91       	pop	r28
    7922:	08 95       	ret

00007924 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7924:	fc 01       	movw	r30, r24
    7926:	60 87       	std	Z+8, r22	; 0x08
    7928:	08 95       	ret

0000792a <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    792a:	fc 01       	movw	r30, r24
    792c:	64 83       	std	Z+4, r22	; 0x04
    792e:	08 95       	ret

00007930 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7930:	fc 01       	movw	r30, r24
    7932:	82 81       	ldd	r24, Z+2	; 0x02
    7934:	0c 94 05 40 	jmp	0x800a	; 0x800a <SetMixerWave>

00007938 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7938:	fc 01       	movw	r30, r24
	track->note+=param;
    793a:	91 81       	ldd	r25, Z+1	; 0x01
    793c:	69 0f       	add	r22, r25
    793e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7940:	82 81       	ldd	r24, Z+2	; 0x02
    7942:	0c 94 ee 3f 	jmp	0x7fdc	; 0x7fdc <SetMixerNote>

00007946 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7946:	fc 01       	movw	r30, r24
	track->note-=param;
    7948:	91 81       	ldd	r25, Z+1	; 0x01
    794a:	96 1b       	sub	r25, r22
    794c:	69 2f       	mov	r22, r25
    794e:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7950:	82 81       	ldd	r24, Z+2	; 0x02
    7952:	0c 94 ee 3f 	jmp	0x7fdc	; 0x7fdc <SetMixerNote>

00007956 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7956:	1f 93       	push	r17
    7958:	cf 93       	push	r28
    795a:	df 93       	push	r29
    795c:	ec 01       	movw	r28, r24
    795e:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7960:	8a 81       	ldd	r24, Y+2	; 0x02
    7962:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <SetMixerNote>
	track->note=param;
    7966:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7968:	88 81       	ld	r24, Y
    796a:	87 7f       	andi	r24, 0xF7	; 247
    796c:	88 83       	st	Y, r24
}
    796e:	df 91       	pop	r29
    7970:	cf 91       	pop	r28
    7972:	1f 91       	pop	r17
    7974:	08 95       	ret

00007976 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7976:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7978:	14 96       	adiw	r26, 0x04	; 4
    797a:	8c 91       	ld	r24, X
    797c:	14 97       	sbiw	r26, 0x04	; 4
    797e:	88 23       	and	r24, r24
    7980:	19 f1       	breq	.+70     	; 0x79c8 <PatchCommand14+0x52>
    7982:	55 96       	adiw	r26, 0x15	; 21
    7984:	2d 91       	ld	r18, X+
    7986:	3c 91       	ld	r19, X
    7988:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    798a:	66 23       	and	r22, r22
    798c:	79 f0       	breq	.+30     	; 0x79ac <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    798e:	77 27       	eor	r23, r23
    7990:	67 fd       	sbrc	r22, 7
    7992:	70 95       	com	r23
    7994:	6f 5f       	subi	r22, 0xFF	; 255
    7996:	7f 4f       	sbci	r23, 0xFF	; 255
    7998:	ab 01       	movw	r20, r22
    799a:	44 0f       	add	r20, r20
    799c:	55 1f       	adc	r21, r21
    799e:	64 0f       	add	r22, r20
    79a0:	75 1f       	adc	r23, r21
    79a2:	26 1b       	sub	r18, r22
    79a4:	37 0b       	sbc	r19, r23
    79a6:	09 c0       	rjmp	.+18     	; 0x79ba <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    79a8:	ef 3f       	cpi	r30, 0xFF	; 255
    79aa:	39 f0       	breq	.+14     	; 0x79ba <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    79ac:	23 50       	subi	r18, 0x03	; 3
    79ae:	31 09       	sbc	r19, r1
    79b0:	f9 01       	movw	r30, r18
    79b2:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    79b4:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    79b6:	ed 30       	cpi	r30, 0x0D	; 13
    79b8:	b9 f7       	brne	.-18     	; 0x79a8 <PatchCommand14+0x32>
    79ba:	56 96       	adiw	r26, 0x16	; 22
    79bc:	3c 93       	st	X, r19
    79be:	2e 93       	st	-X, r18
    79c0:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    79c2:	81 50       	subi	r24, 0x01	; 1
    79c4:	14 96       	adiw	r26, 0x04	; 4
    79c6:	8c 93       	st	X, r24
    79c8:	08 95       	ret

000079ca <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    79ca:	90 93 52 0b 	sts	0x0B52, r25
    79ce:	80 93 51 0b 	sts	0x0B51, r24

	masterVolume=DEFAULT_MASTER_VOL;
    79d2:	8f e6       	ldi	r24, 0x6F	; 111
    79d4:	80 93 54 0b 	sts	0x0B54, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    79d8:	10 92 42 0a 	sts	0x0A42, r1
    79dc:	e3 e0       	ldi	r30, 0x03	; 3
    79de:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    79e0:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    79e2:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    79e4:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    79e6:	28 e1       	ldi	r18, 0x18	; 24
    79e8:	df 01       	movw	r26, r30
    79ea:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    79ec:	8c 93       	st	X, r24
    79ee:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    79f0:	9c 93       	st	X, r25
    79f2:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    79f4:	1c 92       	st	X, r1
    79f6:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    79f8:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    79fa:	10 82       	st	Z, r1
    79fc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    79fe:	2c 93       	st	X, r18
    7a00:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7a02:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7a04:	8f 5f       	subi	r24, 0xFF	; 255
    7a06:	77 96       	adiw	r30, 0x17	; 23
    7a08:	84 30       	cpi	r24, 0x04	; 4
    7a0a:	71 f7       	brne	.-36     	; 0x79e8 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7a0c:	08 95       	ret

00007a0e <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7a0e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7a10:	ed 91       	ld	r30, X+
    7a12:	fc 91       	ld	r31, X
    7a14:	11 97       	sbiw	r26, 0x01	; 1
    7a16:	9f 01       	movw	r18, r30
    7a18:	2f 5f       	subi	r18, 0xFF	; 255
    7a1a:	3f 4f       	sbci	r19, 0xFF	; 255
    7a1c:	11 96       	adiw	r26, 0x01	; 1
    7a1e:	3c 93       	st	X, r19
    7a20:	2e 93       	st	-X, r18
    7a22:	e4 91       	lpm	r30, Z
    7a24:	e7 fd       	sbrc	r30, 7
    7a26:	03 c0       	rjmp	.+6      	; 0x7a2e <ReadVarLen+0x20>
    7a28:	8e 2f       	mov	r24, r30
    7a2a:	90 e0       	ldi	r25, 0x00	; 0
    7a2c:	08 95       	ret
    {
       value &= 0x7F;
    7a2e:	ef 77       	andi	r30, 0x7F	; 127
    7a30:	8e 2f       	mov	r24, r30
    7a32:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7a34:	96 95       	lsr	r25
    7a36:	98 2f       	mov	r25, r24
    7a38:	88 27       	eor	r24, r24
    7a3a:	97 95       	ror	r25
    7a3c:	87 95       	ror	r24
    7a3e:	2f 5f       	subi	r18, 0xFF	; 255
    7a40:	3f 4f       	sbci	r19, 0xFF	; 255
    7a42:	f9 01       	movw	r30, r18
    7a44:	31 97       	sbiw	r30, 0x01	; 1
    7a46:	e4 91       	lpm	r30, Z
    7a48:	4e 2f       	mov	r20, r30
    7a4a:	4f 77       	andi	r20, 0x7F	; 127
    7a4c:	84 0f       	add	r24, r20
    7a4e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7a50:	e7 fd       	sbrc	r30, 7
    7a52:	f0 cf       	rjmp	.-32     	; 0x7a34 <ReadVarLen+0x26>
    7a54:	2d 93       	st	X+, r18
    7a56:	3c 93       	st	X, r19
    }


    return value;
}
    7a58:	08 95       	ret

00007a5a <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7a5a:	ef 92       	push	r14
    7a5c:	ff 92       	push	r15
    7a5e:	0f 93       	push	r16
    7a60:	1f 93       	push	r17
    7a62:	cf 93       	push	r28
    7a64:	df 93       	push	r29
    7a66:	1f 92       	push	r1
    7a68:	cd b7       	in	r28, 0x3d	; 61
    7a6a:	de b7       	in	r29, 0x3e	; 62
    7a6c:	7c 01       	movw	r14, r24
    7a6e:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7a70:	fc 01       	movw	r30, r24
    7a72:	80 81       	ld	r24, Z
    7a74:	08 2f       	mov	r16, r24
    7a76:	00 1f       	adc	r16, r16
    7a78:	00 27       	eor	r16, r16
    7a7a:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7a7c:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7a7e:	9f ef       	ldi	r25, 0xFF	; 255
    7a80:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7a82:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7a84:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7a86:	87 7b       	andi	r24, 0xB7	; 183
    7a88:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7a8a:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7a8c:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7a8e:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7a90:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7a92:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7a94:	82 81       	ldd	r24, Z+2	; 0x02
    7a96:	83 30       	cpi	r24, 0x03	; 3
    7a98:	69 f4       	brne	.+26     	; 0x7ab4 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7a9a:	01 11       	cpse	r16, r1
    7a9c:	01 c0       	rjmp	.+2      	; 0x7aa0 <TriggerCommon+0x46>
    7a9e:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7aa0:	81 e0       	ldi	r24, 0x01	; 1
    7aa2:	91 e0       	ldi	r25, 0x01	; 1
    7aa4:	90 93 59 0a 	sts	0x0A59, r25
    7aa8:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7aac:	81 e0       	ldi	r24, 0x01	; 1
    7aae:	80 93 57 0a 	sts	0x0A57, r24
    7ab2:	0a c0       	rjmp	.+20     	; 0x7ac8 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7ab4:	60 e0       	ldi	r22, 0x00	; 0
    7ab6:	29 83       	std	Y+1, r18	; 0x01
    7ab8:	0e 94 05 40 	call	0x800a	; 0x800a <SetMixerWave>
			SetMixerNote(track->channel,note);
    7abc:	29 81       	ldd	r18, Y+1	; 0x01
    7abe:	62 2f       	mov	r22, r18
    7ac0:	f7 01       	movw	r30, r14
    7ac2:	82 81       	ldd	r24, Z+2	; 0x02
    7ac4:	0e 94 ee 3f 	call	0x7fdc	; 0x7fdc <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7ac8:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7aca:	00 23       	and	r16, r16
    7acc:	11 f0       	breq	.+4      	; 0x7ad2 <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7ace:	11 8b       	std	Z+17, r17	; 0x11
    7ad0:	01 c0       	rjmp	.+2      	; 0x7ad4 <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7ad2:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7ad4:	e0 91 51 0b 	lds	r30, 0x0B51
    7ad8:	f0 91 52 0b 	lds	r31, 0x0B52
    7adc:	89 e0       	ldi	r24, 0x09	; 9
    7ade:	18 9f       	mul	r17, r24
    7ae0:	e0 0d       	add	r30, r0
    7ae2:	f1 1d       	adc	r31, r1
    7ae4:	11 24       	eor	r1, r1
    7ae6:	33 96       	adiw	r30, 0x03	; 3
    7ae8:	85 91       	lpm	r24, Z+
    7aea:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7aec:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7aee:	00 97       	sbiw	r24, 0x00	; 0
    7af0:	19 f4       	brne	.+6      	; 0x7af8 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7af2:	16 8a       	std	Z+22, r1	; 0x16
    7af4:	15 8a       	std	Z+21, r1	; 0x15
    7af6:	08 c0       	rjmp	.+16     	; 0x7b08 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7af8:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7afa:	fc 01       	movw	r30, r24
    7afc:	24 91       	lpm	r18, Z
    7afe:	f7 01       	movw	r30, r14
    7b00:	22 8b       	std	Z+18, r18	; 0x12
    7b02:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7b04:	96 8b       	std	Z+22, r25	; 0x16
    7b06:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7b08:	0f 90       	pop	r0
    7b0a:	df 91       	pop	r29
    7b0c:	cf 91       	pop	r28
    7b0e:	1f 91       	pop	r17
    7b10:	0f 91       	pop	r16
    7b12:	ff 90       	pop	r15
    7b14:	ef 90       	pop	r14
    7b16:	08 95       	ret

00007b18 <TriggerNote>:
	TriggerCommon(track,patch,volume,80);
	track->flags|=TRACK_FLAGS_PLAYING;
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7b18:	cf 93       	push	r28
    7b1a:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7b1c:	a8 2f       	mov	r26, r24
    7b1e:	b0 e0       	ldi	r27, 0x00	; 0
    7b20:	97 e1       	ldi	r25, 0x17	; 23
    7b22:	89 9f       	mul	r24, r25
    7b24:	f0 01       	movw	r30, r0
    7b26:	11 24       	eor	r1, r1
    7b28:	ed 50       	subi	r30, 0x0D	; 13
    7b2a:	f5 4f       	sbci	r31, 0xF5	; 245
    7b2c:	80 81       	ld	r24, Z
    7b2e:	85 ff       	sbrs	r24, 5
    7b30:	02 c0       	rjmp	.+4      	; 0x7b36 <TriggerNote+0x1e>
    7b32:	87 fd       	sbrc	r24, 7
    7b34:	2e c0       	rjmp	.+92     	; 0x7b92 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7b36:	21 11       	cpse	r18, r1
    7b38:	18 c0       	rjmp	.+48     	; 0x7b6a <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7b3a:	97 e1       	ldi	r25, 0x17	; 23
    7b3c:	9a 9f       	mul	r25, r26
    7b3e:	f0 01       	movw	r30, r0
    7b40:	9b 9f       	mul	r25, r27
    7b42:	f0 0d       	add	r31, r0
    7b44:	11 24       	eor	r1, r1
    7b46:	ed 50       	subi	r30, 0x0D	; 13
    7b48:	f5 4f       	sbci	r31, 0xF5	; 245
    7b4a:	97 85       	ldd	r25, Z+15	; 0x0f
    7b4c:	91 11       	cpse	r25, r1
    7b4e:	02 c0       	rjmp	.+4      	; 0x7b54 <TriggerNote+0x3c>
    7b50:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7b52:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7b54:	97 e1       	ldi	r25, 0x17	; 23
    7b56:	9a 9f       	mul	r25, r26
    7b58:	f0 01       	movw	r30, r0
    7b5a:	9b 9f       	mul	r25, r27
    7b5c:	f0 0d       	add	r31, r0
    7b5e:	11 24       	eor	r1, r1
    7b60:	ed 50       	subi	r30, 0x0D	; 13
    7b62:	f5 4f       	sbci	r31, 0xF5	; 245
    7b64:	8f 7b       	andi	r24, 0xBF	; 191
    7b66:	80 83       	st	Z, r24
    7b68:	14 c0       	rjmp	.+40     	; 0x7b92 <TriggerNote+0x7a>
    7b6a:	82 2f       	mov	r24, r18
    7b6c:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7b6e:	97 e1       	ldi	r25, 0x17	; 23
    7b70:	9a 9f       	mul	r25, r26
    7b72:	e0 01       	movw	r28, r0
    7b74:	9b 9f       	mul	r25, r27
    7b76:	d0 0d       	add	r29, r0
    7b78:	11 24       	eor	r1, r1
    7b7a:	cd 50       	subi	r28, 0x0D	; 13
    7b7c:	d5 4f       	sbci	r29, 0xF5	; 245
    7b7e:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7b80:	1e 8a       	std	Y+22, r1	; 0x16
    7b82:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7b84:	48 2f       	mov	r20, r24
    7b86:	ce 01       	movw	r24, r28
    7b88:	0e 94 2d 3d 	call	0x7a5a	; 0x7a5a <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7b8c:	88 81       	ld	r24, Y
    7b8e:	80 62       	ori	r24, 0x20	; 32
    7b90:	88 83       	st	Y, r24
		}

	}
}
    7b92:	df 91       	pop	r29
    7b94:	cf 91       	pop	r28
    7b96:	08 95       	ret

00007b98 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7b98:	6f 92       	push	r6
    7b9a:	7f 92       	push	r7
    7b9c:	8f 92       	push	r8
    7b9e:	9f 92       	push	r9
    7ba0:	af 92       	push	r10
    7ba2:	bf 92       	push	r11
    7ba4:	cf 92       	push	r12
    7ba6:	df 92       	push	r13
    7ba8:	ef 92       	push	r14
    7baa:	ff 92       	push	r15
    7bac:	0f 93       	push	r16
    7bae:	1f 93       	push	r17
    7bb0:	cf 93       	push	r28
    7bb2:	df 93       	push	r29
    7bb4:	c3 ef       	ldi	r28, 0xF3	; 243
    7bb6:	da e0       	ldi	r29, 0x0A	; 10
    7bb8:	04 e4       	ldi	r16, 0x44	; 68
    7bba:	1a e0       	ldi	r17, 0x0A	; 10
    7bbc:	d8 01       	movw	r26, r16
    7bbe:	9e 01       	movw	r18, r28
    7bc0:	40 e0       	ldi	r20, 0x00	; 0
    7bc2:	50 e0       	ldi	r21, 0x00	; 0
    7bc4:	ca 01       	movw	r24, r20
    7bc6:	8d 50       	subi	r24, 0x0D	; 13
    7bc8:	95 4f       	sbci	r25, 0xF5	; 245
    7bca:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7bcc:	fc 01       	movw	r30, r24
    7bce:	87 85       	ldd	r24, Z+15	; 0x0f
    7bd0:	88 23       	and	r24, r24
    7bd2:	91 f0       	breq	.+36     	; 0x7bf8 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7bd4:	66 85       	ldd	r22, Z+14	; 0x0e
    7bd6:	99 27       	eor	r25, r25
    7bd8:	87 fd       	sbrc	r24, 7
    7bda:	90 95       	com	r25
    7bdc:	86 0f       	add	r24, r22
    7bde:	91 1d       	adc	r25, r1
    7be0:	8f 3f       	cpi	r24, 0xFF	; 255
    7be2:	91 05       	cpc	r25, r1
    7be4:	19 f0       	breq	.+6      	; 0x7bec <ProcessMusic+0x54>
    7be6:	14 f0       	brlt	.+4      	; 0x7bec <ProcessMusic+0x54>
    7be8:	8f ef       	ldi	r24, 0xFF	; 255
    7bea:	90 e0       	ldi	r25, 0x00	; 0
    7bec:	97 ff       	sbrs	r25, 7
    7bee:	02 c0       	rjmp	.+4      	; 0x7bf4 <ProcessMusic+0x5c>
    7bf0:	80 e0       	ldi	r24, 0x00	; 0
    7bf2:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7bf4:	f6 01       	movw	r30, r12
    7bf6:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7bf8:	f9 01       	movw	r30, r18
    7bfa:	f0 80       	ld	r15, Z
    7bfc:	f3 fe       	sbrs	r15, 3
    7bfe:	2a c0       	rjmp	.+84     	; 0x7c54 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7c00:	65 81       	ldd	r22, Z+5	; 0x05
    7c02:	76 81       	ldd	r23, Z+6	; 0x06
    7c04:	11 96       	adiw	r26, 0x01	; 1
    7c06:	8d 91       	ld	r24, X+
    7c08:	9c 91       	ld	r25, X
    7c0a:	12 97       	sbiw	r26, 0x02	; 2
    7c0c:	86 0f       	add	r24, r22
    7c0e:	97 1f       	adc	r25, r23
    7c10:	12 96       	adiw	r26, 0x02	; 2
    7c12:	9c 93       	st	X, r25
    7c14:	8e 93       	st	-X, r24
    7c16:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7c18:	f6 01       	movw	r30, r12
    7c1a:	e7 80       	ldd	r14, Z+7	; 0x07
    7c1c:	ee 2d       	mov	r30, r14
    7c1e:	f0 e0       	ldi	r31, 0x00	; 0
    7c20:	ee 0f       	add	r30, r30
    7c22:	ff 1f       	adc	r31, r31
    7c24:	e8 5f       	subi	r30, 0xF8	; 248
    7c26:	fe 47       	sbci	r31, 0x7E	; 126
    7c28:	c5 90       	lpm	r12, Z+
    7c2a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7c2c:	16 16       	cp	r1, r22
    7c2e:	17 06       	cpc	r1, r23
    7c30:	24 f4       	brge	.+8      	; 0x7c3a <ProcessMusic+0xa2>
    7c32:	8c 15       	cp	r24, r12
    7c34:	9d 05       	cpc	r25, r13
    7c36:	30 f4       	brcc	.+12     	; 0x7c44 <ProcessMusic+0xac>
    7c38:	0d c0       	rjmp	.+26     	; 0x7c54 <ProcessMusic+0xbc>
    7c3a:	67 2b       	or	r22, r23
    7c3c:	59 f0       	breq	.+22     	; 0x7c54 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7c3e:	c8 16       	cp	r12, r24
    7c40:	d9 06       	cpc	r13, r25
    7c42:	40 f0       	brcs	.+16     	; 0x7c54 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7c44:	12 96       	adiw	r26, 0x02	; 2
    7c46:	dc 92       	st	X, r13
    7c48:	ce 92       	st	-X, r12
    7c4a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7c4c:	8f 2d       	mov	r24, r15
    7c4e:	87 7f       	andi	r24, 0xF7	; 247
    7c50:	f9 01       	movw	r30, r18
    7c52:	80 83       	st	Z, r24
    7c54:	49 5e       	subi	r20, 0xE9	; 233
    7c56:	5f 4f       	sbci	r21, 0xFF	; 255
    7c58:	29 5e       	subi	r18, 0xE9	; 233
    7c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    7c5c:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7c5e:	4c 35       	cpi	r20, 0x5C	; 92
    7c60:	51 05       	cpc	r21, r1
    7c62:	09 f0       	breq	.+2      	; 0x7c66 <ProcessMusic+0xce>
    7c64:	af cf       	rjmp	.-162    	; 0x7bc4 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7c66:	80 91 42 0a 	lds	r24, 0x0A42
    7c6a:	88 23       	and	r24, r24
    7c6c:	09 f4       	brne	.+2      	; 0x7c70 <ProcessMusic+0xd8>
    7c6e:	cc c0       	rjmp	.+408    	; 0x7e08 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7c70:	57 e1       	ldi	r21, 0x17	; 23
    7c72:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7c74:	80 91 4f 0b 	lds	r24, 0x0B4F
    7c78:	90 91 50 0b 	lds	r25, 0x0B50
    7c7c:	20 91 55 0b 	lds	r18, 0x0B55
    7c80:	30 91 56 0b 	lds	r19, 0x0B56
    7c84:	82 17       	cp	r24, r18
    7c86:	93 07       	cpc	r25, r19
    7c88:	09 f0       	breq	.+2      	; 0x7c8c <ProcessMusic+0xf4>
    7c8a:	b9 c0       	rjmp	.+370    	; 0x7dfe <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7c8c:	20 91 58 0b 	lds	r18, 0x0B58
    7c90:	30 91 59 0b 	lds	r19, 0x0B59
    7c94:	b9 01       	movw	r22, r18
    7c96:	6f 5f       	subi	r22, 0xFF	; 255
    7c98:	7f 4f       	sbci	r23, 0xFF	; 255
    7c9a:	70 93 59 0b 	sts	0x0B59, r23
    7c9e:	60 93 58 0b 	sts	0x0B58, r22
    7ca2:	f9 01       	movw	r30, r18
    7ca4:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7ca6:	4f 3f       	cpi	r20, 0xFF	; 255
    7ca8:	79 f5       	brne	.+94     	; 0x7d08 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7caa:	a9 01       	movw	r20, r18
    7cac:	4e 5f       	subi	r20, 0xFE	; 254
    7cae:	5f 4f       	sbci	r21, 0xFF	; 255
    7cb0:	50 93 59 0b 	sts	0x0B59, r21
    7cb4:	40 93 58 0b 	sts	0x0B58, r20
    7cb8:	fb 01       	movw	r30, r22
    7cba:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7cbc:	6f 32       	cpi	r22, 0x2F	; 47
    7cbe:	19 f4       	brne	.+6      	; 0x7cc6 <ProcessMusic+0x12e>
						playSong=false;
    7cc0:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    7cc4:	9c c0       	rjmp	.+312    	; 0x7dfe <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7cc6:	66 30       	cpi	r22, 0x06	; 6
    7cc8:	09 f0       	breq	.+2      	; 0x7ccc <ProcessMusic+0x134>
    7cca:	8c c0       	rjmp	.+280    	; 0x7de4 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7ccc:	fa 01       	movw	r30, r20
    7cce:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7cd0:	c9 01       	movw	r24, r18
    7cd2:	04 96       	adiw	r24, 0x04	; 4
    7cd4:	90 93 59 0b 	sts	0x0B59, r25
    7cd8:	80 93 58 0b 	sts	0x0B58, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7cdc:	f9 01       	movw	r30, r18
    7cde:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7ce0:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7ce2:	e3 35       	cpi	r30, 0x53	; 83
    7ce4:	29 f4       	brne	.+10     	; 0x7cf0 <ProcessMusic+0x158>
							loopStart=songPos;
    7ce6:	90 93 5b 0b 	sts	0x0B5B, r25
    7cea:	80 93 5a 0b 	sts	0x0B5A, r24
    7cee:	7a c0       	rjmp	.+244    	; 0x7de4 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7cf0:	e5 34       	cpi	r30, 0x45	; 69
    7cf2:	09 f0       	breq	.+2      	; 0x7cf6 <ProcessMusic+0x15e>
    7cf4:	77 c0       	rjmp	.+238    	; 0x7de4 <ProcessMusic+0x24c>
							songPos=loopStart;
    7cf6:	80 91 5a 0b 	lds	r24, 0x0B5A
    7cfa:	90 91 5b 0b 	lds	r25, 0x0B5B
    7cfe:	90 93 59 0b 	sts	0x0B59, r25
    7d02:	80 93 58 0b 	sts	0x0B58, r24
    7d06:	6e c0       	rjmp	.+220    	; 0x7de4 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7d08:	47 fd       	sbrc	r20, 7
    7d0a:	40 93 53 0b 	sts	0x0B53, r20
					channel=lastStatus&0x0f;
    7d0e:	90 91 53 0b 	lds	r25, 0x0B53
    7d12:	89 2f       	mov	r24, r25
    7d14:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7d16:	47 ff       	sbrs	r20, 7
    7d18:	08 c0       	rjmp	.+16     	; 0x7d2a <ProcessMusic+0x192>
    7d1a:	2e 5f       	subi	r18, 0xFE	; 254
    7d1c:	3f 4f       	sbci	r19, 0xFF	; 255
    7d1e:	30 93 59 0b 	sts	0x0B59, r19
    7d22:	20 93 58 0b 	sts	0x0B58, r18
    7d26:	fb 01       	movw	r30, r22
    7d28:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7d2a:	90 7f       	andi	r25, 0xF0	; 240
    7d2c:	90 3b       	cpi	r25, 0xB0	; 176
    7d2e:	e1 f0       	breq	.+56     	; 0x7d68 <ProcessMusic+0x1d0>
    7d30:	90 3c       	cpi	r25, 0xC0	; 192
    7d32:	09 f4       	brne	.+2      	; 0x7d36 <ProcessMusic+0x19e>
    7d34:	51 c0       	rjmp	.+162    	; 0x7dd8 <ProcessMusic+0x240>
    7d36:	90 39       	cpi	r25, 0x90	; 144
    7d38:	09 f0       	breq	.+2      	; 0x7d3c <ProcessMusic+0x1a4>
    7d3a:	54 c0       	rjmp	.+168    	; 0x7de4 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7d3c:	e0 91 58 0b 	lds	r30, 0x0B58
    7d40:	f0 91 59 0b 	lds	r31, 0x0B59
    7d44:	9f 01       	movw	r18, r30
    7d46:	2f 5f       	subi	r18, 0xFF	; 255
    7d48:	3f 4f       	sbci	r19, 0xFF	; 255
    7d4a:	30 93 59 0b 	sts	0x0B59, r19
    7d4e:	20 93 58 0b 	sts	0x0B58, r18
    7d52:	24 91       	lpm	r18, Z
    7d54:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7d56:	f8 9e       	mul	r15, r24
    7d58:	f0 01       	movw	r30, r0
    7d5a:	11 24       	eor	r1, r1
    7d5c:	ed 50       	subi	r30, 0x0D	; 13
    7d5e:	f5 4f       	sbci	r31, 0xF5	; 245
    7d60:	60 89       	ldd	r22, Z+16	; 0x10
    7d62:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <TriggerNote>
    7d66:	3e c0       	rjmp	.+124    	; 0x7de4 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7d68:	e0 91 58 0b 	lds	r30, 0x0B58
    7d6c:	f0 91 59 0b 	lds	r31, 0x0B59
    7d70:	9f 01       	movw	r18, r30
    7d72:	2f 5f       	subi	r18, 0xFF	; 255
    7d74:	3f 4f       	sbci	r19, 0xFF	; 255
    7d76:	30 93 59 0b 	sts	0x0B59, r19
    7d7a:	20 93 58 0b 	sts	0x0B58, r18
    7d7e:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7d80:	47 30       	cpi	r20, 0x07	; 7
    7d82:	49 f4       	brne	.+18     	; 0x7d96 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7d84:	f8 9e       	mul	r15, r24
    7d86:	d0 01       	movw	r26, r0
    7d88:	11 24       	eor	r1, r1
    7d8a:	ad 50       	subi	r26, 0x0D	; 13
    7d8c:	b5 4f       	sbci	r27, 0xF5	; 245
    7d8e:	ee 0f       	add	r30, r30
    7d90:	1c 96       	adiw	r26, 0x0c	; 12
    7d92:	ec 93       	st	X, r30
    7d94:	27 c0       	rjmp	.+78     	; 0x7de4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7d96:	4b 30       	cpi	r20, 0x0B	; 11
    7d98:	49 f4       	brne	.+18     	; 0x7dac <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7d9a:	f8 9e       	mul	r15, r24
    7d9c:	d0 01       	movw	r26, r0
    7d9e:	11 24       	eor	r1, r1
    7da0:	ad 50       	subi	r26, 0x0D	; 13
    7da2:	b5 4f       	sbci	r27, 0xF5	; 245
    7da4:	ee 0f       	add	r30, r30
    7da6:	13 96       	adiw	r26, 0x03	; 3
    7da8:	ec 93       	st	X, r30
    7daa:	1c c0       	rjmp	.+56     	; 0x7de4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7dac:	4c 35       	cpi	r20, 0x5C	; 92
    7dae:	49 f4       	brne	.+18     	; 0x7dc2 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7db0:	f8 9e       	mul	r15, r24
    7db2:	d0 01       	movw	r26, r0
    7db4:	11 24       	eor	r1, r1
    7db6:	ad 50       	subi	r26, 0x0D	; 13
    7db8:	b5 4f       	sbci	r27, 0xF5	; 245
    7dba:	ee 0f       	add	r30, r30
    7dbc:	1a 96       	adiw	r26, 0x0a	; 10
    7dbe:	ec 93       	st	X, r30
    7dc0:	11 c0       	rjmp	.+34     	; 0x7de4 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7dc2:	44 36       	cpi	r20, 0x64	; 100
    7dc4:	79 f4       	brne	.+30     	; 0x7de4 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7dc6:	f8 9e       	mul	r15, r24
    7dc8:	d0 01       	movw	r26, r0
    7dca:	11 24       	eor	r1, r1
    7dcc:	ad 50       	subi	r26, 0x0D	; 13
    7dce:	b5 4f       	sbci	r27, 0xF5	; 245
    7dd0:	ee 0f       	add	r30, r30
    7dd2:	1b 96       	adiw	r26, 0x0b	; 11
    7dd4:	ec 93       	st	X, r30
    7dd6:	06 c0       	rjmp	.+12     	; 0x7de4 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7dd8:	f8 9e       	mul	r15, r24
    7dda:	f0 01       	movw	r30, r0
    7ddc:	11 24       	eor	r1, r1
    7dde:	ed 50       	subi	r30, 0x0D	; 13
    7de0:	f5 4f       	sbci	r31, 0xF5	; 245
    7de2:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7de4:	88 e5       	ldi	r24, 0x58	; 88
    7de6:	9b e0       	ldi	r25, 0x0B	; 11
    7de8:	0e 94 07 3d 	call	0x7a0e	; 0x7a0e <ReadVarLen>
    7dec:	90 93 56 0b 	sts	0x0B56, r25
    7df0:	80 93 55 0b 	sts	0x0B55, r24
				currDeltaTime=0;
    7df4:	10 92 50 0b 	sts	0x0B50, r1
    7df8:	10 92 4f 0b 	sts	0x0B4F, r1
    7dfc:	3b cf       	rjmp	.-394    	; 0x7c74 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7dfe:	01 96       	adiw	r24, 0x01	; 1
    7e00:	90 93 50 0b 	sts	0x0B50, r25
    7e04:	80 93 4f 0b 	sts	0x0B4F, r24
    7e08:	9c ef       	ldi	r25, 0xFC	; 252
    7e0a:	a9 2e       	mov	r10, r25
    7e0c:	9a e0       	ldi	r25, 0x0A	; 10
    7e0e:	b9 2e       	mov	r11, r25
    7e10:	26 e0       	ldi	r18, 0x06	; 6
    7e12:	c2 2e       	mov	r12, r18
    7e14:	2b e0       	ldi	r18, 0x0B	; 11
    7e16:	d2 2e       	mov	r13, r18
    7e18:	37 e0       	ldi	r19, 0x07	; 7
    7e1a:	e3 2e       	mov	r14, r19
    7e1c:	3b e0       	ldi	r19, 0x0B	; 11
    7e1e:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7e20:	66 24       	eor	r6, r6
    7e22:	6a 94       	dec	r6
    7e24:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    7e26:	88 81       	ld	r24, Y
    7e28:	85 ff       	sbrs	r24, 5
    7e2a:	42 c0       	rjmp	.+132    	; 0x7eb0 <ProcessMusic+0x318>
    7e2c:	2d 89       	ldd	r18, Y+21	; 0x15
    7e2e:	3e 89       	ldd	r19, Y+22	; 0x16
    7e30:	23 2b       	or	r18, r19
    7e32:	09 f4       	brne	.+2      	; 0x7e36 <ProcessMusic+0x29e>
    7e34:	3d c0       	rjmp	.+122    	; 0x7eb0 <ProcessMusic+0x318>
    7e36:	86 fd       	sbrc	r24, 6
    7e38:	3b c0       	rjmp	.+118    	; 0x7eb0 <ProcessMusic+0x318>
    7e3a:	47 01       	movw	r8, r14
    7e3c:	f2 e0       	ldi	r31, 0x02	; 2
    7e3e:	8f 1a       	sub	r8, r31
    7e40:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    7e42:	d6 01       	movw	r26, r12
    7e44:	9c 91       	ld	r25, X
    7e46:	f4 01       	movw	r30, r8
    7e48:	80 81       	ld	r24, Z
    7e4a:	98 13       	cpse	r25, r24
    7e4c:	2e c0       	rjmp	.+92     	; 0x7eaa <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    7e4e:	ed 89       	ldd	r30, Y+21	; 0x15
    7e50:	fe 89       	ldd	r31, Y+22	; 0x16
    7e52:	bf 01       	movw	r22, r30
    7e54:	6f 5f       	subi	r22, 0xFF	; 255
    7e56:	7f 4f       	sbci	r23, 0xFF	; 255
    7e58:	7e 8b       	std	Y+22, r23	; 0x16
    7e5a:	6d 8b       	std	Y+21, r22	; 0x15
    7e5c:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    7e5e:	8f 3f       	cpi	r24, 0xFF	; 255
    7e60:	31 f4       	brne	.+12     	; 0x7e6e <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7e62:	88 81       	ld	r24, Y
    7e64:	8f 77       	andi	r24, 0x7F	; 127
    7e66:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    7e68:	1e 8a       	std	Y+22, r1	; 0x16
    7e6a:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    7e6c:	1e c0       	rjmp	.+60     	; 0x7eaa <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    7e6e:	9f 01       	movw	r18, r30
    7e70:	2e 5f       	subi	r18, 0xFE	; 254
    7e72:	3f 4f       	sbci	r19, 0xFF	; 255
    7e74:	3e 8b       	std	Y+22, r19	; 0x16
    7e76:	2d 8b       	std	Y+21, r18	; 0x15
    7e78:	fb 01       	movw	r30, r22
    7e7a:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    7e7c:	e8 2f       	mov	r30, r24
    7e7e:	f0 e0       	ldi	r31, 0x00	; 0
    7e80:	ee 0f       	add	r30, r30
    7e82:	ff 1f       	adc	r31, r31
    7e84:	e2 54       	subi	r30, 0x42	; 66
    7e86:	ff 4f       	sbci	r31, 0xFF	; 255
    7e88:	25 91       	lpm	r18, Z+
    7e8a:	34 91       	lpm	r19, Z
    7e8c:	ce 01       	movw	r24, r28
    7e8e:	f9 01       	movw	r30, r18
    7e90:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    7e92:	ed 89       	ldd	r30, Y+21	; 0x15
    7e94:	fe 89       	ldd	r31, Y+22	; 0x16
    7e96:	cf 01       	movw	r24, r30
    7e98:	01 96       	adiw	r24, 0x01	; 1
    7e9a:	9e 8b       	std	Y+22, r25	; 0x16
    7e9c:	8d 8b       	std	Y+21, r24	; 0x15
    7e9e:	e4 91       	lpm	r30, Z
    7ea0:	d4 01       	movw	r26, r8
    7ea2:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    7ea4:	f6 01       	movw	r30, r12
    7ea6:	10 82       	st	Z, r1
    7ea8:	cc cf       	rjmp	.-104    	; 0x7e42 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    7eaa:	9f 5f       	subi	r25, 0xFF	; 255
    7eac:	d6 01       	movw	r26, r12
    7eae:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    7eb0:	98 81       	ld	r25, Y
    7eb2:	95 ff       	sbrs	r25, 5
    7eb4:	6c c0       	rjmp	.+216    	; 0x7f8e <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    7eb6:	f7 01       	movw	r30, r14
    7eb8:	80 81       	ld	r24, Z
    7eba:	8f 3f       	cpi	r24, 0xFF	; 255
    7ebc:	11 f0       	breq	.+4      	; 0x7ec2 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    7ebe:	8f 5f       	subi	r24, 0xFF	; 255
    7ec0:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7ec2:	97 fd       	sbrc	r25, 7
    7ec4:	04 c0       	rjmp	.+8      	; 0x7ece <ProcessMusic+0x336>
    7ec6:	f7 01       	movw	r30, r14
    7ec8:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7eca:	90 81       	ld	r25, Z
    7ecc:	01 c0       	rjmp	.+2      	; 0x7ed0 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7ece:	9f ef       	ldi	r25, 0xFF	; 255
    7ed0:	f7 01       	movw	r30, r14
    7ed2:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7ed4:	80 81       	ld	r24, Z
    7ed6:	88 23       	and	r24, r24
    7ed8:	09 f4       	brne	.+2      	; 0x7edc <ProcessMusic+0x344>
    7eda:	4e c0       	rjmp	.+156    	; 0x7f78 <ProcessMusic+0x3e0>
    7edc:	31 96       	adiw	r30, 0x01	; 1
    7ede:	50 81       	ld	r21, Z
    7ee0:	55 23       	and	r21, r21
    7ee2:	09 f4       	brne	.+2      	; 0x7ee6 <ProcessMusic+0x34e>
    7ee4:	49 c0       	rjmp	.+146    	; 0x7f78 <ProcessMusic+0x3e0>
    7ee6:	99 23       	and	r25, r25
    7ee8:	09 f4       	brne	.+2      	; 0x7eec <ProcessMusic+0x354>
    7eea:	46 c0       	rjmp	.+140    	; 0x7f78 <ProcessMusic+0x3e0>
    7eec:	40 91 54 0b 	lds	r20, 0x0B54
    7ef0:	44 23       	and	r20, r20
    7ef2:	09 f4       	brne	.+2      	; 0x7ef6 <ProcessMusic+0x35e>
    7ef4:	41 c0       	rjmp	.+130    	; 0x7f78 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    7ef6:	89 9f       	mul	r24, r25
    7ef8:	c0 01       	movw	r24, r0
    7efa:	11 24       	eor	r1, r1
    7efc:	93 95       	inc	r25
				uVol>>=8;
    7efe:	89 2f       	mov	r24, r25
    7f00:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    7f02:	58 9f       	mul	r21, r24
    7f04:	90 01       	movw	r18, r0
    7f06:	59 9f       	mul	r21, r25
    7f08:	30 0d       	add	r19, r0
    7f0a:	11 24       	eor	r1, r1
    7f0c:	c9 01       	movw	r24, r18
    7f0e:	93 95       	inc	r25
				uVol>>=8;
    7f10:	89 2f       	mov	r24, r25
    7f12:	99 27       	eor	r25, r25
    7f14:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    7f16:	50 81       	ld	r21, Z
    7f18:	58 9f       	mul	r21, r24
    7f1a:	90 01       	movw	r18, r0
    7f1c:	59 9f       	mul	r21, r25
    7f1e:	30 0d       	add	r19, r0
    7f20:	11 24       	eor	r1, r1
    7f22:	33 95       	inc	r19
					uVol>>=8;
    7f24:	23 2f       	mov	r18, r19
    7f26:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    7f28:	42 9f       	mul	r20, r18
    7f2a:	c0 01       	movw	r24, r0
    7f2c:	43 9f       	mul	r20, r19
    7f2e:	90 0d       	add	r25, r0
    7f30:	11 24       	eor	r1, r1
    7f32:	93 95       	inc	r25
				uVol>>=8;
    7f34:	89 2f       	mov	r24, r25
    7f36:	99 27       	eor	r25, r25
    7f38:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    7f3a:	20 81       	ld	r18, Z
    7f3c:	22 23       	and	r18, r18
    7f3e:	f1 f0       	breq	.+60     	; 0x7f7c <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7f40:	d5 01       	movw	r26, r10
    7f42:	ec 91       	ld	r30, X
    7f44:	f0 e0       	ldi	r31, 0x00	; 0
    7f46:	e0 50       	subi	r30, 0x00	; 0
    7f48:	fd 47       	sbci	r31, 0x7D	; 125
    7f4a:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7f4c:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7f4e:	2e 9f       	mul	r18, r30
    7f50:	f0 01       	movw	r30, r0
    7f52:	11 24       	eor	r1, r1
    7f54:	f3 95       	inc	r31
					tVol>>=8;
    7f56:	ef 2f       	mov	r30, r31
    7f58:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7f5a:	a3 01       	movw	r20, r6
    7f5c:	4e 1b       	sub	r20, r30
    7f5e:	5f 0b       	sbc	r21, r31
    7f60:	48 9f       	mul	r20, r24
    7f62:	90 01       	movw	r18, r0
    7f64:	49 9f       	mul	r20, r25
    7f66:	30 0d       	add	r19, r0
    7f68:	58 9f       	mul	r21, r24
    7f6a:	30 0d       	add	r19, r0
    7f6c:	11 24       	eor	r1, r1
    7f6e:	c9 01       	movw	r24, r18
    7f70:	93 95       	inc	r25
					uVol>>=8;
    7f72:	89 2f       	mov	r24, r25
    7f74:	99 27       	eor	r25, r25
    7f76:	02 c0       	rjmp	.+4      	; 0x7f7c <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    7f78:	80 e0       	ldi	r24, 0x00	; 0
    7f7a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7f7c:	f5 01       	movw	r30, r10
    7f7e:	30 81       	ld	r19, Z
    7f80:	f7 01       	movw	r30, r14
    7f82:	39 97       	sbiw	r30, 0x09	; 9
    7f84:	20 81       	ld	r18, Z
    7f86:	23 0f       	add	r18, r19
    7f88:	d5 01       	movw	r26, r10
    7f8a:	2c 93       	st	X, r18
    7f8c:	02 c0       	rjmp	.+4      	; 0x7f92 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    7f8e:	80 e0       	ldi	r24, 0x00	; 0
    7f90:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7f92:	f8 01       	movw	r30, r16
    7f94:	80 83       	st	Z, r24
    7f96:	67 96       	adiw	r28, 0x17	; 23
    7f98:	0a 5f       	subi	r16, 0xFA	; 250
    7f9a:	1f 4f       	sbci	r17, 0xFF	; 255
    7f9c:	f7 e1       	ldi	r31, 0x17	; 23
    7f9e:	af 0e       	add	r10, r31
    7fa0:	b1 1c       	adc	r11, r1
    7fa2:	87 e1       	ldi	r24, 0x17	; 23
    7fa4:	c8 0e       	add	r12, r24
    7fa6:	d1 1c       	adc	r13, r1
    7fa8:	97 e1       	ldi	r25, 0x17	; 23
    7faa:	e9 0e       	add	r14, r25
    7fac:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7fae:	ab e0       	ldi	r26, 0x0B	; 11
    7fb0:	cf 34       	cpi	r28, 0x4F	; 79
    7fb2:	da 07       	cpc	r29, r26
    7fb4:	09 f0       	breq	.+2      	; 0x7fb8 <ProcessMusic+0x420>
    7fb6:	37 cf       	rjmp	.-402    	; 0x7e26 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7fb8:	df 91       	pop	r29
    7fba:	cf 91       	pop	r28
    7fbc:	1f 91       	pop	r17
    7fbe:	0f 91       	pop	r16
    7fc0:	ff 90       	pop	r15
    7fc2:	ef 90       	pop	r14
    7fc4:	df 90       	pop	r13
    7fc6:	cf 90       	pop	r12
    7fc8:	bf 90       	pop	r11
    7fca:	af 90       	pop	r10
    7fcc:	9f 90       	pop	r9
    7fce:	8f 90       	pop	r8
    7fd0:	7f 90       	pop	r7
    7fd2:	6f 90       	pop	r6
    7fd4:	08 95       	ret

00007fd6 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7fd6:	80 93 54 0b 	sts	0x0B54, r24
    7fda:	08 95       	ret

00007fdc <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7fdc:	99 27       	eor	r25, r25
	clr r23
    7fde:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7fe0:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7fe2:	09 f4       	brne	.+2      	; 0x7fe6 <set_note_waves>
		ret
    7fe4:	08 95       	ret

00007fe6 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7fe6:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7fe8:	f1 e8       	ldi	r31, 0x81	; 129
	lsl r22
    7fea:	66 0f       	add	r22, r22
	rol r23
    7fec:	77 1f       	adc	r23, r23
	add ZL,r22
    7fee:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7ff0:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7ff2:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7ff4:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7ff6:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    7ff8:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    7ffa:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7ffc:	28 9f       	mul	r18, r24
	add ZL,r0
    7ffe:	e0 0d       	add	r30, r0
	adc ZH,r1
    8000:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8002:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8004:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8006:	11 24       	eor	r1, r1
	

	ret
    8008:	08 95       	ret

0000800a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    800a:	99 27       	eor	r25, r25
	clr r23
    800c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    800e:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8010:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8012:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8014:	28 9f       	mul	r18, r24
	add ZL,r0
    8016:	e0 0d       	add	r30, r0
	adc ZH,r1
    8018:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    801a:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    801c:	31 f4       	brne	.+12     	; 0x802a <smw1>
	lds r22,tr4_params
    801e:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    8022:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8024:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    8028:	0b c0       	rjmp	.+22     	; 0x8040 <esmw>

0000802a <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    802a:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    802c:	31 f4       	brne	.+12     	; 0x803a <smw2>
	lds r22,tr4_params
    802e:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    8032:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8034:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    8038:	03 c0       	rjmp	.+6      	; 0x8040 <esmw>

0000803a <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    803a:	73 e8       	ldi	r23, 0x83	; 131
	add r23,r22
    803c:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    803e:	75 83       	std	Z+5, r23	; 0x05

00008040 <esmw>:

esmw:
	clr r1	
    8040:	11 24       	eor	r1, r1
	ret
    8042:	08 95       	ret
	...

00008100 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8100:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8102:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8106:	08 95       	ret

00008108 <steptable>:
    8108:	22 00       	.word	0x0022	; ????
    810a:	24 00       	.word	0x0024	; ????
    810c:	26 00       	.word	0x0026	; ????
    810e:	28 00       	.word	0x0028	; ????
    8110:	2b 00       	.word	0x002b	; ????
    8112:	2d 00       	.word	0x002d	; ????
    8114:	30 00       	.word	0x0030	; ????
    8116:	33 00       	.word	0x0033	; ????
    8118:	36 00       	.word	0x0036	; ????
    811a:	39 00       	.word	0x0039	; ????
    811c:	3d 00       	.word	0x003d	; ????
    811e:	40 00       	.word	0x0040	; ????
    8120:	44 00       	.word	0x0044	; ????
    8122:	48 00       	.word	0x0048	; ????
    8124:	4c 00       	.word	0x004c	; ????
    8126:	51 00       	.word	0x0051	; ????
    8128:	56 00       	.word	0x0056	; ????
    812a:	5b 00       	.word	0x005b	; ????
    812c:	60 00       	.word	0x0060	; ????
    812e:	66 00       	.word	0x0066	; ????
    8130:	6c 00       	.word	0x006c	; ????
    8132:	73 00       	.word	0x0073	; ????
    8134:	79 00       	.word	0x0079	; ????
    8136:	81 00       	.word	0x0081	; ????
    8138:	88 00       	.word	0x0088	; ????
    813a:	90 00       	.word	0x0090	; ????
    813c:	99 00       	.word	0x0099	; ????
    813e:	a2 00       	.word	0x00a2	; ????
    8140:	ac 00       	.word	0x00ac	; ????
    8142:	b6 00       	.word	0x00b6	; ????
    8144:	c1 00       	.word	0x00c1	; ????
    8146:	cc 00       	.word	0x00cc	; ????
    8148:	d8 00       	.word	0x00d8	; ????
    814a:	e5 00       	.word	0x00e5	; ????
    814c:	f3 00       	.word	0x00f3	; ????
    814e:	01 01       	movw	r0, r2
    8150:	10 01       	movw	r2, r0
    8152:	21 01       	movw	r4, r2
    8154:	32 01       	movw	r6, r4
    8156:	44 01       	movw	r8, r8
    8158:	57 01       	movw	r10, r14
    815a:	6c 01       	movw	r12, r24
    815c:	81 01       	movw	r16, r2
    815e:	98 01       	movw	r18, r16
    8160:	b0 01       	movw	r22, r0
    8162:	ca 01       	movw	r24, r20
    8164:	e5 01       	movw	r28, r10
    8166:	02 02       	muls	r16, r18
    8168:	21 02       	muls	r18, r17
    816a:	41 02       	muls	r20, r17
    816c:	64 02       	muls	r22, r20
    816e:	88 02       	muls	r24, r24
    8170:	ae 02       	muls	r26, r30
    8172:	d7 02       	muls	r29, r23
    8174:	03 03       	mulsu	r16, r19
    8176:	30 03       	mulsu	r19, r16
    8178:	61 03       	mulsu	r22, r17
    817a:	94 03       	fmuls	r17, r20
    817c:	cb 03       	fmulsu	r20, r19
    817e:	05 04       	cpc	r0, r5
    8180:	42 04       	cpc	r4, r2
    8182:	83 04       	cpc	r8, r3
    8184:	c7 04       	cpc	r12, r7
    8186:	10 05       	cpc	r17, r0
    8188:	5d 05       	cpc	r21, r13
    818a:	af 05       	cpc	r26, r15
    818c:	05 06       	cpc	r0, r21
    818e:	61 06       	cpc	r6, r17
    8190:	c2 06       	cpc	r12, r18
    8192:	29 07       	cpc	r18, r25
    8194:	96 07       	cpc	r25, r22
    8196:	09 08       	sbc	r0, r9
    8198:	83 08       	sbc	r8, r3
    819a:	05 09       	sbc	r16, r5
    819c:	8e 09       	sbc	r24, r14
    819e:	20 0a       	sbc	r2, r16
    81a0:	ba 0a       	sbc	r11, r26
    81a2:	5d 0b       	sbc	r21, r29
    81a4:	0a 0c       	add	r0, r10
    81a6:	c1 0c       	add	r12, r1
    81a8:	84 0d       	add	r24, r4
    81aa:	51 0e       	add	r5, r17
    81ac:	2b 0f       	add	r18, r27
    81ae:	12 10       	cpse	r1, r2
    81b0:	07 11       	cpse	r16, r7
    81b2:	0a 12       	cpse	r0, r26
    81b4:	1d 13       	cpse	r17, r29
    81b6:	40 14       	cp	r4, r0
    81b8:	74 15       	cp	r23, r4
    81ba:	ba 16       	cp	r11, r26
    81bc:	14 18       	sub	r1, r4
    81be:	83 19       	sub	r24, r3
    81c0:	07 1b       	sub	r16, r23
    81c2:	a3 1c       	adc	r10, r3
    81c4:	57 1e       	adc	r5, r23
    81c6:	24 20       	and	r2, r4
    81c8:	0e 22       	and	r0, r30
    81ca:	14 24       	eor	r1, r4
    81cc:	39 26       	eor	r3, r25
    81ce:	7f 28       	or	r7, r15
    81d0:	e8 2a       	or	r14, r24
    81d2:	75 2d       	mov	r23, r5
    81d4:	29 30       	cpi	r18, 0x09	; 9
    81d6:	06 33       	cpi	r16, 0x36	; 54
    81d8:	0f 36       	cpi	r16, 0x6F	; 111
    81da:	45 39       	cpi	r20, 0x95	; 149
    81dc:	ad 3c       	cpi	r26, 0xCD	; 205
    81de:	49 40       	sbci	r20, 0x09	; 9
    81e0:	1b 44       	sbci	r17, 0x4B	; 75
    81e2:	28 48       	sbci	r18, 0x88	; 136
    81e4:	73 4c       	sbci	r23, 0xC3	; 195
    81e6:	fe 50       	subi	r31, 0x0E	; 14
    81e8:	cf 55       	subi	r28, 0x5F	; 95
    81ea:	ea 5a       	subi	r30, 0xAA	; 170
    81ec:	51 60       	ori	r21, 0x01	; 1
    81ee:	0c 66       	ori	r16, 0x6C	; 108
    81f0:	1d 6c       	ori	r17, 0xCD	; 205
    81f2:	8b 72       	andi	r24, 0x2B	; 43
    81f4:	5a 79       	andi	r21, 0x9A	; 154
    81f6:	92 80       	ldd	r9, Z+2	; 0x02
    81f8:	37 88       	ldd	r3, Z+23	; 0x17
    81fa:	50 90 e5 98 	lds	r5, 0x98E5
    81fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8200:	9f ab       	std	Y+55, r25	; 0x37
    8202:	d3 b5       	in	r29, 0x23	; 35
    8204:	a3 c0       	rjmp	.+326    	; 0x834c <waves+0x4c>
	...

00008300 <waves>:
    8300:	00 03       	mulsu	r16, r16
    8302:	06 09       	sbc	r16, r6
    8304:	0c 10       	cpse	r0, r12
    8306:	13 16       	cp	r1, r19
    8308:	19 1c       	adc	r1, r9
    830a:	1f 22       	and	r1, r31
    830c:	25 28       	or	r2, r5
    830e:	2b 2e       	mov	r2, r27
    8310:	31 33       	cpi	r19, 0x31	; 49
    8312:	36 39       	cpi	r19, 0x96	; 150
    8314:	3c 3f       	cpi	r19, 0xFC	; 252
    8316:	41 44       	sbci	r20, 0x41	; 65
    8318:	47 49       	sbci	r20, 0x97	; 151
    831a:	4c 4e       	sbci	r20, 0xEC	; 236
    831c:	51 53       	subi	r21, 0x31	; 49
    831e:	55 58       	subi	r21, 0x85	; 133
    8320:	5a 5c       	subi	r21, 0xCA	; 202
    8322:	5e 60       	ori	r21, 0x0E	; 14
    8324:	62 64       	ori	r22, 0x42	; 66
    8326:	66 68       	ori	r22, 0x86	; 134
    8328:	6a 6b       	ori	r22, 0xBA	; 186
    832a:	6d 6f       	ori	r22, 0xFD	; 253
    832c:	70 71       	andi	r23, 0x10	; 16
    832e:	73 74       	andi	r23, 0x43	; 67
    8330:	75 76       	andi	r23, 0x65	; 101
    8332:	78 79       	andi	r23, 0x98	; 152
    8334:	7a 7a       	andi	r23, 0xAA	; 170
    8336:	7b 7c       	andi	r23, 0xCB	; 203
    8338:	7d 7d       	andi	r23, 0xDD	; 221
    833a:	7e 7e       	andi	r23, 0xEE	; 238
    833c:	7e 7f       	andi	r23, 0xFE	; 254
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7e 7e       	andi	r23, 0xEE	; 238
    8346:	7e 7d       	andi	r23, 0xDE	; 222
    8348:	7d 7c       	andi	r23, 0xCD	; 205
    834a:	7b 7a       	andi	r23, 0xAB	; 171
    834c:	7a 79       	andi	r23, 0x9A	; 154
    834e:	78 76       	andi	r23, 0x68	; 104
    8350:	75 74       	andi	r23, 0x45	; 69
    8352:	73 71       	andi	r23, 0x13	; 19
    8354:	70 6f       	ori	r23, 0xF0	; 240
    8356:	6d 6b       	ori	r22, 0xBD	; 189
    8358:	6a 68       	ori	r22, 0x8A	; 138
    835a:	66 64       	ori	r22, 0x46	; 70
    835c:	62 60       	ori	r22, 0x02	; 2
    835e:	5e 5c       	subi	r21, 0xCE	; 206
    8360:	5a 58       	subi	r21, 0x8A	; 138
    8362:	55 53       	subi	r21, 0x35	; 53
    8364:	51 4e       	sbci	r21, 0xE1	; 225
    8366:	4c 49       	sbci	r20, 0x9C	; 156
    8368:	47 44       	sbci	r20, 0x47	; 71
    836a:	41 3f       	cpi	r20, 0xF1	; 241
    836c:	3c 39       	cpi	r19, 0x9C	; 156
    836e:	36 33       	cpi	r19, 0x36	; 54
    8370:	31 2e       	mov	r3, r17
    8372:	2b 28       	or	r2, r11
    8374:	25 22       	and	r2, r21
    8376:	1f 1c       	adc	r1, r15
    8378:	19 16       	cp	r1, r25
    837a:	13 10       	cpse	r1, r3
    837c:	0c 09       	sbc	r16, r12
    837e:	06 03       	mulsu	r16, r22
    8380:	00 fd       	sbrc	r16, 0
    8382:	fa f7       	brpl	.-2      	; 0x8382 <waves+0x82>
    8384:	f4 f0       	brlt	.+60     	; 0x83c2 <waves+0xc2>
    8386:	ed ea       	ldi	r30, 0xAD	; 173
    8388:	e7 e4       	ldi	r30, 0x47	; 71
    838a:	e1 de       	rcall	.-574    	; 0x814e <steptable+0x46>
    838c:	db d8       	rcall	.-3658   	; 0x7544 <ReadButtons+0x40>
    838e:	d5 d2       	rcall	.+1450   	; 0x893a <waves+0x63a>
    8390:	cf cd       	rjmp	.-1122   	; 0x7f30 <ProcessMusic+0x398>
    8392:	ca c7       	rjmp	.+3988   	; 0x9328 <wifiGetPBT+0x40>
    8394:	c4 c1       	rjmp	.+904    	; 0x871e <waves+0x41e>
    8396:	bf bc       	out	0x2f, r11	; 47
    8398:	b9 b7       	in	r27, 0x39	; 57
    839a:	b4 b2       	in	r11, 0x14	; 20
    839c:	af ad       	ldd	r26, Y+63	; 0x3f
    839e:	ab a8       	ldd	r10, Y+51	; 0x33
    83a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    83a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    83a4:	9e 9c       	mul	r9, r14
    83a6:	9a 98       	cbi	0x13, 2	; 19
    83a8:	96 95       	lsr	r25
    83aa:	93 91       	.word	0x9193	; ????
    83ac:	90 8f       	std	Z+24, r25	; 0x18
    83ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    83b0:	8b 8a       	std	Y+19, r8	; 0x13
    83b2:	88 87       	std	Y+8, r24	; 0x08
    83b4:	86 86       	std	Z+14, r8	; 0x0e
    83b6:	85 84       	ldd	r8, Z+13	; 0x0d
    83b8:	83 83       	std	Z+3, r24	; 0x03
    83ba:	82 82       	std	Z+2, r8	; 0x02
    83bc:	82 81       	ldd	r24, Z+2	; 0x02
    83be:	81 81       	ldd	r24, Z+1	; 0x01
    83c0:	81 81       	ldd	r24, Z+1	; 0x01
    83c2:	81 81       	ldd	r24, Z+1	; 0x01
    83c4:	82 82       	std	Z+2, r8	; 0x02
    83c6:	82 83       	std	Z+2, r24	; 0x02
    83c8:	83 84       	ldd	r8, Z+11	; 0x0b
    83ca:	85 86       	std	Z+13, r8	; 0x0d
    83cc:	86 87       	std	Z+14, r24	; 0x0e
    83ce:	88 8a       	std	Y+16, r8	; 0x10
    83d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    83d2:	8d 8f       	std	Y+29, r24	; 0x1d
    83d4:	90 91 93 95 	lds	r25, 0x9593
    83d8:	96 98       	cbi	0x12, 6	; 18
    83da:	9a 9c       	mul	r9, r10
    83dc:	9e a0       	ldd	r9, Y+38	; 0x26
    83de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    83e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    83e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    83e4:	af b2       	in	r10, 0x1f	; 31
    83e6:	b4 b7       	in	r27, 0x34	; 52
    83e8:	b9 bc       	out	0x29, r11	; 41
    83ea:	bf c1       	rjmp	.+894    	; 0x876a <waves+0x46a>
    83ec:	c4 c7       	rjmp	.+3976   	; 0x9376 <wifiRequestP+0x1a>
    83ee:	ca cd       	rjmp	.-1132   	; 0x7f84 <ProcessMusic+0x3ec>
    83f0:	cf d2       	rcall	.+1438   	; 0x8990 <waves+0x690>
    83f2:	d5 d8       	rcall	.-3670   	; 0x759e <FormatEeprom+0xe>
    83f4:	db de       	rcall	.-586    	; 0x81ac <steptable+0xa4>
    83f6:	e1 e4       	ldi	r30, 0x41	; 65
    83f8:	e7 ea       	ldi	r30, 0xA7	; 167
    83fa:	ed f0       	brhs	.+58     	; 0x8436 <waves+0x136>
    83fc:	f4 f7       	brge	.-4      	; 0x83fa <waves+0xfa>
    83fe:	fa fd       	.word	0xfdfa	; ????
    8400:	80 81       	ld	r24, Z
    8402:	82 83       	std	Z+2, r24	; 0x02
    8404:	84 85       	ldd	r24, Z+12	; 0x0c
    8406:	86 87       	std	Z+14, r24	; 0x0e
    8408:	88 89       	ldd	r24, Y+16	; 0x10
    840a:	8a 8b       	std	Y+18, r24	; 0x12
    840c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    840e:	8e 8f       	std	Y+30, r24	; 0x1e
    8410:	90 91 92 93 	lds	r25, 0x9392
    8414:	94 95       	.word	0x9594	; ????
    8416:	96 97       	sbiw	r26, 0x26	; 38
    8418:	98 99       	sbic	0x13, 0	; 19
    841a:	9a 9b       	sbis	0x13, 2	; 19
    841c:	9c 9d       	mul	r25, r12
    841e:	9e 9f       	mul	r25, r30
    8420:	a0 a1       	ldd	r26, Z+32	; 0x20
    8422:	a2 a3       	std	Z+34, r26	; 0x22
    8424:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8426:	a6 a7       	std	Z+46, r26	; 0x2e
    8428:	a8 a9       	ldd	r26, Y+48	; 0x30
    842a:	aa ab       	std	Y+50, r26	; 0x32
    842c:	ac ad       	ldd	r26, Y+60	; 0x3c
    842e:	ae af       	std	Y+62, r26	; 0x3e
    8430:	b0 b1       	in	r27, 0x00	; 0
    8432:	b2 b3       	in	r27, 0x12	; 18
    8434:	b4 b5       	in	r27, 0x24	; 36
    8436:	b6 b7       	in	r27, 0x36	; 54
    8438:	b8 b9       	out	0x08, r27	; 8
    843a:	ba bb       	out	0x1a, r27	; 26
    843c:	bc bd       	out	0x2c, r27	; 44
    843e:	be bf       	out	0x3e, r27	; 62
    8440:	c0 c1       	rjmp	.+896    	; 0x87c2 <waves+0x4c2>
    8442:	c2 c3       	rjmp	.+1924   	; 0x8bc8 <waves+0x8c8>
    8444:	c4 c5       	rjmp	.+2952   	; 0x8fce <InitializeVideoMode+0x12>
    8446:	c6 c7       	rjmp	.+3980   	; 0x93d4 <wifiRequestPT+0x30>
    8448:	c8 c9       	rjmp	.-3184   	; 0x77da <InitUartRxBuffer>
    844a:	ca cb       	rjmp	.-2156   	; 0x7be0 <ProcessMusic+0x48>
    844c:	cc cd       	rjmp	.-1128   	; 0x7fe6 <set_note_waves>
    844e:	ce cf       	rjmp	.-100    	; 0x83ec <waves+0xec>
    8450:	d0 d1       	rcall	.+928    	; 0x87f2 <waves+0x4f2>
    8452:	d2 d3       	rcall	.+1956   	; 0x8bf8 <waves+0x8f8>
    8454:	d4 d5       	rcall	.+2984   	; 0x8ffe <DrawMap+0x26>
    8456:	d6 d7       	rcall	.+4012   	; 0x9404 <initWifi+0x22>
    8458:	d8 d9       	rcall	.-3152   	; 0x780a <UartSendChar+0x26>
    845a:	da db       	rcall	.-2124   	; 0x7c10 <ProcessMusic+0x78>
    845c:	dc dd       	rcall	.-1096   	; 0x8016 <SetMixerWave+0xc>
    845e:	de df       	rcall	.-68     	; 0x841c <waves+0x11c>
    8460:	e0 e1       	ldi	r30, 0x10	; 16
    8462:	e2 e3       	ldi	r30, 0x32	; 50
    8464:	e4 e5       	ldi	r30, 0x54	; 84
    8466:	e6 e7       	ldi	r30, 0x76	; 118
    8468:	e8 e9       	ldi	r30, 0x98	; 152
    846a:	ea eb       	ldi	r30, 0xBA	; 186
    846c:	ec ed       	ldi	r30, 0xDC	; 220
    846e:	ee ef       	ldi	r30, 0xFE	; 254
    8470:	f0 f1       	brcs	.+124    	; 0x84ee <waves+0x1ee>
    8472:	f2 f3       	brmi	.-4      	; 0x8470 <waves+0x170>
    8474:	f4 f5       	brge	.+124    	; 0x84f2 <waves+0x1f2>
    8476:	f6 f7       	brtc	.-4      	; 0x8474 <waves+0x174>
    8478:	f8 f9       	.word	0xf9f8	; ????
    847a:	fa fb       	.word	0xfbfa	; ????
    847c:	fc fd       	.word	0xfdfc	; ????
    847e:	fe ff       	.word	0xfffe	; ????
    8480:	00 01       	movw	r0, r0
    8482:	02 03       	mulsu	r16, r18
    8484:	04 05       	cpc	r16, r4
    8486:	06 07       	cpc	r16, r22
    8488:	08 09       	sbc	r16, r8
    848a:	0a 0b       	sbc	r16, r26
    848c:	0c 0d       	add	r16, r12
    848e:	0e 0f       	add	r16, r30
    8490:	10 11       	cpse	r17, r0
    8492:	12 13       	cpse	r17, r18
    8494:	14 15       	cp	r17, r4
    8496:	16 17       	cp	r17, r22
    8498:	18 19       	sub	r17, r8
    849a:	1a 1b       	sub	r17, r26
    849c:	1c 1d       	adc	r17, r12
    849e:	1e 1f       	adc	r17, r30
    84a0:	20 21       	and	r18, r0
    84a2:	22 23       	and	r18, r18
    84a4:	24 25       	eor	r18, r4
    84a6:	26 27       	eor	r18, r22
    84a8:	28 29       	or	r18, r8
    84aa:	2a 2b       	or	r18, r26
    84ac:	2c 2d       	mov	r18, r12
    84ae:	2e 2f       	mov	r18, r30
    84b0:	30 31       	cpi	r19, 0x10	; 16
    84b2:	32 33       	cpi	r19, 0x32	; 50
    84b4:	34 35       	cpi	r19, 0x54	; 84
    84b6:	36 37       	cpi	r19, 0x76	; 118
    84b8:	38 39       	cpi	r19, 0x98	; 152
    84ba:	3a 3b       	cpi	r19, 0xBA	; 186
    84bc:	3c 3d       	cpi	r19, 0xDC	; 220
    84be:	3e 3f       	cpi	r19, 0xFE	; 254
    84c0:	40 41       	sbci	r20, 0x10	; 16
    84c2:	42 43       	sbci	r20, 0x32	; 50
    84c4:	44 45       	sbci	r20, 0x54	; 84
    84c6:	46 47       	sbci	r20, 0x76	; 118
    84c8:	48 49       	sbci	r20, 0x98	; 152
    84ca:	4a 4b       	sbci	r20, 0xBA	; 186
    84cc:	4c 4d       	sbci	r20, 0xDC	; 220
    84ce:	4e 4f       	sbci	r20, 0xFE	; 254
    84d0:	50 51       	subi	r21, 0x10	; 16
    84d2:	52 53       	subi	r21, 0x32	; 50
    84d4:	54 55       	subi	r21, 0x54	; 84
    84d6:	56 57       	subi	r21, 0x76	; 118
    84d8:	58 59       	subi	r21, 0x98	; 152
    84da:	5a 5b       	subi	r21, 0xBA	; 186
    84dc:	5c 5d       	subi	r21, 0xDC	; 220
    84de:	5e 5f       	subi	r21, 0xFE	; 254
    84e0:	60 61       	ori	r22, 0x10	; 16
    84e2:	62 63       	ori	r22, 0x32	; 50
    84e4:	64 65       	ori	r22, 0x54	; 84
    84e6:	66 67       	ori	r22, 0x76	; 118
    84e8:	68 69       	ori	r22, 0x98	; 152
    84ea:	6a 6b       	ori	r22, 0xBA	; 186
    84ec:	6c 6d       	ori	r22, 0xDC	; 220
    84ee:	6e 6f       	ori	r22, 0xFE	; 254
    84f0:	70 71       	andi	r23, 0x10	; 16
    84f2:	72 73       	andi	r23, 0x32	; 50
    84f4:	74 75       	andi	r23, 0x54	; 84
    84f6:	76 77       	andi	r23, 0x76	; 118
    84f8:	78 79       	andi	r23, 0x98	; 152
    84fa:	7a 7b       	andi	r23, 0xBA	; 186
    84fc:	7c 7d       	andi	r23, 0xDC	; 220
    84fe:	7e 7f       	andi	r23, 0xFE	; 254
    8500:	00 02       	muls	r16, r16
    8502:	04 06       	cpc	r0, r20
    8504:	08 0a       	sbc	r0, r24
    8506:	0c 0e       	add	r0, r28
    8508:	10 12       	cpse	r1, r16
    850a:	14 16       	cp	r1, r20
    850c:	18 1a       	sub	r1, r24
    850e:	1c 1e       	adc	r1, r28
    8510:	20 22       	and	r2, r16
    8512:	24 26       	eor	r2, r20
    8514:	28 2a       	or	r2, r24
    8516:	2c 2e       	mov	r2, r28
    8518:	30 32       	cpi	r19, 0x20	; 32
    851a:	34 36       	cpi	r19, 0x64	; 100
    851c:	38 3a       	cpi	r19, 0xA8	; 168
    851e:	3c 3e       	cpi	r19, 0xEC	; 236
    8520:	40 42       	sbci	r20, 0x20	; 32
    8522:	44 46       	sbci	r20, 0x64	; 100
    8524:	48 4a       	sbci	r20, 0xA8	; 168
    8526:	4c 4e       	sbci	r20, 0xEC	; 236
    8528:	50 52       	subi	r21, 0x20	; 32
    852a:	54 56       	subi	r21, 0x64	; 100
    852c:	58 5a       	subi	r21, 0xA8	; 168
    852e:	5c 5e       	subi	r21, 0xEC	; 236
    8530:	60 62       	ori	r22, 0x20	; 32
    8532:	64 66       	ori	r22, 0x64	; 100
    8534:	68 6a       	ori	r22, 0xA8	; 168
    8536:	6c 6e       	ori	r22, 0xEC	; 236
    8538:	70 72       	andi	r23, 0x20	; 32
    853a:	74 76       	andi	r23, 0x64	; 100
    853c:	78 7a       	andi	r23, 0xA8	; 168
    853e:	7c 7e       	andi	r23, 0xEC	; 236
    8540:	7f 7d       	andi	r23, 0xDF	; 223
    8542:	7b 79       	andi	r23, 0x9B	; 155
    8544:	77 75       	andi	r23, 0x57	; 87
    8546:	73 71       	andi	r23, 0x13	; 19
    8548:	6f 6d       	ori	r22, 0xDF	; 223
    854a:	6b 69       	ori	r22, 0x9B	; 155
    854c:	67 65       	ori	r22, 0x57	; 87
    854e:	63 61       	ori	r22, 0x13	; 19
    8550:	5f 5d       	subi	r21, 0xDF	; 223
    8552:	5b 59       	subi	r21, 0x9B	; 155
    8554:	57 55       	subi	r21, 0x57	; 87
    8556:	53 51       	subi	r21, 0x13	; 19
    8558:	4f 4d       	sbci	r20, 0xDF	; 223
    855a:	4b 49       	sbci	r20, 0x9B	; 155
    855c:	47 45       	sbci	r20, 0x57	; 87
    855e:	43 41       	sbci	r20, 0x13	; 19
    8560:	3f 3d       	cpi	r19, 0xDF	; 223
    8562:	3b 39       	cpi	r19, 0x9B	; 155
    8564:	37 35       	cpi	r19, 0x57	; 87
    8566:	33 31       	cpi	r19, 0x13	; 19
    8568:	2f 2d       	mov	r18, r15
    856a:	2b 29       	or	r18, r11
    856c:	27 25       	eor	r18, r7
    856e:	23 21       	and	r18, r3
    8570:	1f 1d       	adc	r17, r15
    8572:	1b 19       	sub	r17, r11
    8574:	17 15       	cp	r17, r7
    8576:	13 11       	cpse	r17, r3
    8578:	0f 0d       	add	r16, r15
    857a:	0b 09       	sbc	r16, r11
    857c:	07 05       	cpc	r16, r7
    857e:	03 01       	movw	r0, r6
    8580:	ff fd       	.word	0xfdff	; ????
    8582:	fb f9       	.word	0xf9fb	; ????
    8584:	f7 f5       	brid	.+124    	; 0x8602 <waves+0x302>
    8586:	f3 f1       	brvs	.+124    	; 0x8604 <waves+0x304>
    8588:	ef ed       	ldi	r30, 0xDF	; 223
    858a:	eb e9       	ldi	r30, 0x9B	; 155
    858c:	e7 e5       	ldi	r30, 0x57	; 87
    858e:	e3 e1       	ldi	r30, 0x13	; 19
    8590:	df dd       	rcall	.-1090   	; 0x8150 <steptable+0x48>
    8592:	db d9       	rcall	.-3146   	; 0x794a <PatchCommand04+0x4>
    8594:	d7 d5       	rcall	.+2990   	; 0x9144 <doFade+0x2>
    8596:	d3 d1       	rcall	.+934    	; 0x893e <waves+0x63e>
    8598:	cf cd       	rjmp	.-1122   	; 0x8138 <steptable+0x30>
    859a:	cb c9       	rjmp	.-3178   	; 0x7932 <PatchCommand02+0x2>
    859c:	c7 c5       	rjmp	.+2958   	; 0x912c <WaitVsync+0x18>
    859e:	c3 c1       	rjmp	.+902    	; 0x8926 <waves+0x626>
    85a0:	bf bd       	out	0x2f, r27	; 47
    85a2:	bb b9       	out	0x0b, r27	; 11
    85a4:	b7 b5       	in	r27, 0x27	; 39
    85a6:	b3 b1       	in	r27, 0x03	; 3
    85a8:	af ad       	ldd	r26, Y+63	; 0x3f
    85aa:	ab a9       	ldd	r26, Y+51	; 0x33
    85ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    85b0:	9f 9d       	mul	r25, r15
    85b2:	9b 99       	sbic	0x13, 3	; 19
    85b4:	97 95       	ror	r25
    85b6:	93 91       	.word	0x9193	; ????
    85b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    85ba:	8b 89       	ldd	r24, Y+19	; 0x13
    85bc:	87 85       	ldd	r24, Z+15	; 0x0f
    85be:	83 81       	ldd	r24, Z+3	; 0x03
    85c0:	80 82       	st	Z, r8
    85c2:	84 86       	std	Z+12, r8	; 0x0c
    85c4:	88 8a       	std	Y+16, r8	; 0x10
    85c6:	8c 8e       	std	Y+28, r8	; 0x1c
    85c8:	90 92 94 96 	sts	0x9694, r9
    85cc:	98 9a       	sbi	0x13, 0	; 19
    85ce:	9c 9e       	mul	r9, r28
    85d0:	a0 a2       	std	Z+32, r10	; 0x20
    85d2:	a4 a6       	std	Z+44, r10	; 0x2c
    85d4:	a8 aa       	std	Y+48, r10	; 0x30
    85d6:	ac ae       	std	Y+60, r10	; 0x3c
    85d8:	b0 b2       	in	r11, 0x10	; 16
    85da:	b4 b6       	in	r11, 0x34	; 52
    85dc:	b8 ba       	out	0x18, r11	; 24
    85de:	bc be       	out	0x3c, r11	; 60
    85e0:	c0 c2       	rjmp	.+1408   	; 0x8b62 <waves+0x862>
    85e2:	c4 c6       	rjmp	.+3464   	; 0x936c <wifiRequestP+0x10>
    85e4:	c8 ca       	rjmp	.-2672   	; 0x7b76 <TriggerNote+0x5e>
    85e6:	cc ce       	rjmp	.-616    	; 0x8380 <waves+0x80>
    85e8:	d0 d2       	rcall	.+1440   	; 0x8b8a <waves+0x88a>
    85ea:	d4 d6       	rcall	.+3496   	; 0x9394 <wifiRequest+0x14>
    85ec:	d8 da       	rcall	.-2640   	; 0x7b9e <ProcessMusic+0x6>
    85ee:	dc de       	rcall	.-584    	; 0x83a8 <waves+0xa8>
    85f0:	e0 e2       	ldi	r30, 0x20	; 32
    85f2:	e4 e6       	ldi	r30, 0x64	; 100
    85f4:	e8 ea       	ldi	r30, 0xA8	; 168
    85f6:	ec ee       	ldi	r30, 0xEC	; 236
    85f8:	f0 f2       	brcs	.-68     	; 0x85b6 <waves+0x2b6>
    85fa:	f4 f6       	brge	.-68     	; 0x85b8 <waves+0x2b8>
    85fc:	f8 fa       	.word	0xfaf8	; ????
    85fe:	fc fe       	.word	0xfefc	; ????
    8600:	7f 7f       	andi	r23, 0xFF	; 255
    8602:	7f 7f       	andi	r23, 0xFF	; 255
    8604:	7f 7f       	andi	r23, 0xFF	; 255
    8606:	7f 7f       	andi	r23, 0xFF	; 255
    8608:	7f 7f       	andi	r23, 0xFF	; 255
    860a:	7f 7f       	andi	r23, 0xFF	; 255
    860c:	7f 7f       	andi	r23, 0xFF	; 255
    860e:	7f 7f       	andi	r23, 0xFF	; 255
    8610:	7f 7f       	andi	r23, 0xFF	; 255
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	80 80       	ld	r8, Z
    8642:	80 80       	ld	r8, Z
    8644:	80 80       	ld	r8, Z
    8646:	80 80       	ld	r8, Z
    8648:	80 80       	ld	r8, Z
    864a:	80 80       	ld	r8, Z
    864c:	80 80       	ld	r8, Z
    864e:	80 80       	ld	r8, Z
    8650:	80 80       	ld	r8, Z
    8652:	80 80       	ld	r8, Z
    8654:	80 80       	ld	r8, Z
    8656:	80 80       	ld	r8, Z
    8658:	80 80       	ld	r8, Z
    865a:	80 80       	ld	r8, Z
    865c:	80 80       	ld	r8, Z
    865e:	80 80       	ld	r8, Z
    8660:	80 80       	ld	r8, Z
    8662:	80 80       	ld	r8, Z
    8664:	80 80       	ld	r8, Z
    8666:	80 80       	ld	r8, Z
    8668:	80 80       	ld	r8, Z
    866a:	80 80       	ld	r8, Z
    866c:	80 80       	ld	r8, Z
    866e:	80 80       	ld	r8, Z
    8670:	80 80       	ld	r8, Z
    8672:	80 80       	ld	r8, Z
    8674:	80 80       	ld	r8, Z
    8676:	80 80       	ld	r8, Z
    8678:	80 80       	ld	r8, Z
    867a:	80 80       	ld	r8, Z
    867c:	80 80       	ld	r8, Z
    867e:	80 80       	ld	r8, Z
    8680:	80 80       	ld	r8, Z
    8682:	80 80       	ld	r8, Z
    8684:	80 80       	ld	r8, Z
    8686:	80 80       	ld	r8, Z
    8688:	80 80       	ld	r8, Z
    868a:	80 80       	ld	r8, Z
    868c:	80 80       	ld	r8, Z
    868e:	80 80       	ld	r8, Z
    8690:	80 80       	ld	r8, Z
    8692:	80 80       	ld	r8, Z
    8694:	80 80       	ld	r8, Z
    8696:	80 80       	ld	r8, Z
    8698:	80 80       	ld	r8, Z
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 80       	ld	r8, Z
    86f6:	80 80       	ld	r8, Z
    86f8:	80 80       	ld	r8, Z
    86fa:	80 80       	ld	r8, Z
    86fc:	80 80       	ld	r8, Z
    86fe:	80 80       	ld	r8, Z
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7f       	andi	r23, 0xFF	; 255
    877c:	7f 7f       	andi	r23, 0xFF	; 255
    877e:	7f 7f       	andi	r23, 0xFF	; 255
    8780:	80 80       	ld	r8, Z
    8782:	80 80       	ld	r8, Z
    8784:	80 80       	ld	r8, Z
    8786:	80 80       	ld	r8, Z
    8788:	80 80       	ld	r8, Z
    878a:	80 80       	ld	r8, Z
    878c:	80 80       	ld	r8, Z
    878e:	80 80       	ld	r8, Z
    8790:	80 80       	ld	r8, Z
    8792:	80 80       	ld	r8, Z
    8794:	80 80       	ld	r8, Z
    8796:	80 80       	ld	r8, Z
    8798:	80 80       	ld	r8, Z
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7f       	andi	r23, 0xFF	; 255
    884e:	7f 7f       	andi	r23, 0xFF	; 255
    8850:	7f 7f       	andi	r23, 0xFF	; 255
    8852:	7f 7f       	andi	r23, 0xFF	; 255
    8854:	7f 7f       	andi	r23, 0xFF	; 255
    8856:	7f 7f       	andi	r23, 0xFF	; 255
    8858:	7f 7f       	andi	r23, 0xFF	; 255
    885a:	7f 7f       	andi	r23, 0xFF	; 255
    885c:	7f 7f       	andi	r23, 0xFF	; 255
    885e:	7f 7f       	andi	r23, 0xFF	; 255
    8860:	7f 7f       	andi	r23, 0xFF	; 255
    8862:	7f 7f       	andi	r23, 0xFF	; 255
    8864:	7f 7f       	andi	r23, 0xFF	; 255
    8866:	7f 7f       	andi	r23, 0xFF	; 255
    8868:	7f 7f       	andi	r23, 0xFF	; 255
    886a:	7f 7f       	andi	r23, 0xFF	; 255
    886c:	7f 7f       	andi	r23, 0xFF	; 255
    886e:	7f 7f       	andi	r23, 0xFF	; 255
    8870:	7f 7f       	andi	r23, 0xFF	; 255
    8872:	7f 7f       	andi	r23, 0xFF	; 255
    8874:	7f 7f       	andi	r23, 0xFF	; 255
    8876:	7f 7f       	andi	r23, 0xFF	; 255
    8878:	7f 7f       	andi	r23, 0xFF	; 255
    887a:	7f 7f       	andi	r23, 0xFF	; 255
    887c:	7f 7f       	andi	r23, 0xFF	; 255
    887e:	7f 7f       	andi	r23, 0xFF	; 255
    8880:	7f 7f       	andi	r23, 0xFF	; 255
    8882:	7f 7f       	andi	r23, 0xFF	; 255
    8884:	7f 7f       	andi	r23, 0xFF	; 255
    8886:	7f 7f       	andi	r23, 0xFF	; 255
    8888:	7f 7f       	andi	r23, 0xFF	; 255
    888a:	7f 7f       	andi	r23, 0xFF	; 255
    888c:	7f 7f       	andi	r23, 0xFF	; 255
    888e:	7f 7f       	andi	r23, 0xFF	; 255
    8890:	7f 7f       	andi	r23, 0xFF	; 255
    8892:	7f 7f       	andi	r23, 0xFF	; 255
    8894:	7f 7f       	andi	r23, 0xFF	; 255
    8896:	7f 7f       	andi	r23, 0xFF	; 255
    8898:	7f 7f       	andi	r23, 0xFF	; 255
    889a:	7f 7f       	andi	r23, 0xFF	; 255
    889c:	7f 7f       	andi	r23, 0xFF	; 255
    889e:	7f 7f       	andi	r23, 0xFF	; 255
    88a0:	7f 7f       	andi	r23, 0xFF	; 255
    88a2:	7f 7f       	andi	r23, 0xFF	; 255
    88a4:	7f 7f       	andi	r23, 0xFF	; 255
    88a6:	7f 7f       	andi	r23, 0xFF	; 255
    88a8:	7f 7f       	andi	r23, 0xFF	; 255
    88aa:	7f 7f       	andi	r23, 0xFF	; 255
    88ac:	7f 7f       	andi	r23, 0xFF	; 255
    88ae:	7f 7f       	andi	r23, 0xFF	; 255
    88b0:	7f 7f       	andi	r23, 0xFF	; 255
    88b2:	7f 7f       	andi	r23, 0xFF	; 255
    88b4:	7f 7f       	andi	r23, 0xFF	; 255
    88b6:	7f 7f       	andi	r23, 0xFF	; 255
    88b8:	7f 7f       	andi	r23, 0xFF	; 255
    88ba:	7f 7f       	andi	r23, 0xFF	; 255
    88bc:	7f 7f       	andi	r23, 0xFF	; 255
    88be:	7f 7f       	andi	r23, 0xFF	; 255
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	03 09       	sbc	r16, r3
    8902:	13 1e       	adc	r1, r19
    8904:	28 31       	cpi	r18, 0x18	; 24
    8906:	3a 40       	sbci	r19, 0x0A	; 10
    8908:	46 4c       	sbci	r20, 0xC6	; 198
    890a:	50 54       	subi	r21, 0x40	; 64
    890c:	58 5b       	subi	r21, 0xB8	; 184
    890e:	5e 61       	ori	r21, 0x1E	; 30
    8910:	63 65       	ori	r22, 0x53	; 83
    8912:	67 69       	ori	r22, 0x97	; 151
    8914:	6b 6c       	ori	r22, 0xCB	; 203
    8916:	6e 6f       	ori	r22, 0xFE	; 254
    8918:	70 71       	andi	r23, 0x10	; 16
    891a:	72 73       	andi	r23, 0x32	; 50
    891c:	74 75       	andi	r23, 0x54	; 84
    891e:	76 77       	andi	r23, 0x76	; 118
    8920:	77 78       	andi	r23, 0x87	; 135
    8922:	79 79       	andi	r23, 0x99	; 153
    8924:	7a 7a       	andi	r23, 0xAA	; 170
    8926:	7b 7b       	andi	r23, 0xBB	; 187
    8928:	7c 7c       	andi	r23, 0xCC	; 204
    892a:	7c 7d       	andi	r23, 0xDC	; 220
    892c:	7d 7d       	andi	r23, 0xDD	; 221
    892e:	7e 7e       	andi	r23, 0xEE	; 238
    8930:	7e 7e       	andi	r23, 0xEE	; 238
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7e       	andi	r23, 0xEF	; 239
    894e:	7e 7e       	andi	r23, 0xEE	; 238
    8950:	7e 7d       	andi	r23, 0xDE	; 222
    8952:	7d 7d       	andi	r23, 0xDD	; 221
    8954:	7c 7c       	andi	r23, 0xCC	; 204
    8956:	7c 7b       	andi	r23, 0xBC	; 188
    8958:	7b 7a       	andi	r23, 0xAB	; 171
    895a:	7a 79       	andi	r23, 0x9A	; 154
    895c:	79 78       	andi	r23, 0x89	; 137
    895e:	77 77       	andi	r23, 0x77	; 119
    8960:	76 75       	andi	r23, 0x56	; 86
    8962:	74 73       	andi	r23, 0x34	; 52
    8964:	72 71       	andi	r23, 0x12	; 18
    8966:	70 6f       	ori	r23, 0xF0	; 240
    8968:	6e 6c       	ori	r22, 0xCE	; 206
    896a:	6b 69       	ori	r22, 0x9B	; 155
    896c:	67 65       	ori	r22, 0x57	; 87
    896e:	63 61       	ori	r22, 0x13	; 19
    8970:	5e 5b       	subi	r21, 0xBE	; 190
    8972:	58 54       	subi	r21, 0x48	; 72
    8974:	50 4c       	sbci	r21, 0xC0	; 192
    8976:	46 40       	sbci	r20, 0x06	; 6
    8978:	3a 31       	cpi	r19, 0x1A	; 26
    897a:	28 1e       	adc	r2, r24
    897c:	13 09       	sbc	r17, r3
    897e:	03 00       	.word	0x0003	; ????
    8980:	c6 cc       	rjmp	.-1652   	; 0x830e <waves+0xe>
    8982:	d5 db       	rcall	.-2134   	; 0x812e <steptable+0x26>
    8984:	df e3       	ldi	r29, 0x3F	; 63
    8986:	e5 e7       	ldi	r30, 0x75	; 117
    8988:	e9 ea       	ldi	r30, 0xA9	; 169
    898a:	eb ec       	ldi	r30, 0xCB	; 203
    898c:	ed ee       	ldi	r30, 0xED	; 237
    898e:	ef ef       	ldi	r30, 0xFF	; 255
    8990:	f0 f0       	brcs	.+60     	; 0x89ce <waves+0x6ce>
    8992:	f0 f1       	brcs	.+124    	; 0x8a10 <waves+0x710>
    8994:	f1 f1       	breq	.+124    	; 0x8a12 <waves+0x712>
    8996:	f1 f2       	breq	.-68     	; 0x8954 <waves+0x654>
    8998:	f2 f2       	brmi	.-68     	; 0x8956 <waves+0x656>
    899a:	f2 f2       	brmi	.-68     	; 0x8958 <waves+0x658>
    899c:	f2 f2       	brmi	.-68     	; 0x895a <waves+0x65a>
    899e:	f2 f3       	brmi	.-4      	; 0x899c <waves+0x69c>
    89a0:	f3 f3       	brvs	.-4      	; 0x899e <waves+0x69e>
    89a2:	f3 f3       	brvs	.-4      	; 0x89a0 <waves+0x6a0>
    89a4:	f3 f3       	brvs	.-4      	; 0x89a2 <waves+0x6a2>
    89a6:	f3 f3       	brvs	.-4      	; 0x89a4 <waves+0x6a4>
    89a8:	f3 f3       	brvs	.-4      	; 0x89a6 <waves+0x6a6>
    89aa:	f3 f3       	brvs	.-4      	; 0x89a8 <waves+0x6a8>
    89ac:	f3 f3       	brvs	.-4      	; 0x89aa <waves+0x6aa>
    89ae:	f3 f3       	brvs	.-4      	; 0x89ac <waves+0x6ac>
    89b0:	f3 f3       	brvs	.-4      	; 0x89ae <waves+0x6ae>
    89b2:	f3 f3       	brvs	.-4      	; 0x89b0 <waves+0x6b0>
    89b4:	f3 f3       	brvs	.-4      	; 0x89b2 <waves+0x6b2>
    89b6:	f3 f3       	brvs	.-4      	; 0x89b4 <waves+0x6b4>
    89b8:	f3 f3       	brvs	.-4      	; 0x89b6 <waves+0x6b6>
    89ba:	f3 f3       	brvs	.-4      	; 0x89b8 <waves+0x6b8>
    89bc:	f3 f3       	brvs	.-4      	; 0x89ba <waves+0x6ba>
    89be:	f3 f3       	brvs	.-4      	; 0x89bc <waves+0x6bc>
    89c0:	f3 f3       	brvs	.-4      	; 0x89be <waves+0x6be>
    89c2:	f3 f3       	brvs	.-4      	; 0x89c0 <waves+0x6c0>
    89c4:	f3 f3       	brvs	.-4      	; 0x89c2 <waves+0x6c2>
    89c6:	f3 f3       	brvs	.-4      	; 0x89c4 <waves+0x6c4>
    89c8:	f3 f3       	brvs	.-4      	; 0x89c6 <waves+0x6c6>
    89ca:	f3 f3       	brvs	.-4      	; 0x89c8 <waves+0x6c8>
    89cc:	f3 f3       	brvs	.-4      	; 0x89ca <waves+0x6ca>
    89ce:	f3 f3       	brvs	.-4      	; 0x89cc <waves+0x6cc>
    89d0:	f3 f3       	brvs	.-4      	; 0x89ce <waves+0x6ce>
    89d2:	f3 f3       	brvs	.-4      	; 0x89d0 <waves+0x6d0>
    89d4:	f3 f3       	brvs	.-4      	; 0x89d2 <waves+0x6d2>
    89d6:	f3 f3       	brvs	.-4      	; 0x89d4 <waves+0x6d4>
    89d8:	f3 f3       	brvs	.-4      	; 0x89d6 <waves+0x6d6>
    89da:	f3 f3       	brvs	.-4      	; 0x89d8 <waves+0x6d8>
    89dc:	f3 f3       	brvs	.-4      	; 0x89da <waves+0x6da>
    89de:	f3 f3       	brvs	.-4      	; 0x89dc <waves+0x6dc>
    89e0:	f2 f2       	brmi	.-68     	; 0x899e <waves+0x69e>
    89e2:	f2 f2       	brmi	.-68     	; 0x89a0 <waves+0x6a0>
    89e4:	f2 f2       	brmi	.-68     	; 0x89a2 <waves+0x6a2>
    89e6:	f2 f2       	brmi	.-68     	; 0x89a4 <waves+0x6a4>
    89e8:	f1 f1       	breq	.+124    	; 0x8a66 <waves+0x766>
    89ea:	f1 f1       	breq	.+124    	; 0x8a68 <waves+0x768>
    89ec:	f0 f0       	brcs	.+60     	; 0x8a2a <waves+0x72a>
    89ee:	f0 ef       	ldi	r31, 0xF0	; 240
    89f0:	ef ee       	ldi	r30, 0xEF	; 239
    89f2:	ed ec       	ldi	r30, 0xCD	; 205
    89f4:	eb ea       	ldi	r30, 0xAB	; 171
    89f6:	e9 e7       	ldi	r30, 0x79	; 121
    89f8:	e5 e3       	ldi	r30, 0x35	; 53
    89fa:	df db       	rcall	.-2114   	; 0x81ba <steptable+0xb2>
    89fc:	d5 cc       	rjmp	.-1622   	; 0x83a8 <waves+0xa8>
    89fe:	c6 00       	.word	0x00c6	; ????
    8a00:	00 28       	or	r0, r0
    8a02:	3d 42       	sbci	r19, 0x2D	; 45
    8a04:	30 2d       	mov	r19, r0
    8a06:	2c 2b       	or	r18, r28
    8a08:	2c 2d       	mov	r18, r12
    8a0a:	2e 2f       	mov	r18, r30
    8a0c:	30 32       	cpi	r19, 0x20	; 32
    8a0e:	33 35       	cpi	r19, 0x53	; 83
    8a10:	37 39       	cpi	r19, 0x97	; 151
    8a12:	3b 3d       	cpi	r19, 0xDB	; 219
    8a14:	3f 41       	sbci	r19, 0x1F	; 31
    8a16:	43 45       	sbci	r20, 0x53	; 83
    8a18:	48 4a       	sbci	r20, 0xA8	; 168
    8a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8a1c:	50 53       	subi	r21, 0x30	; 48
    8a1e:	55 57       	subi	r21, 0x75	; 117
    8a20:	59 5b       	subi	r21, 0xB9	; 185
    8a22:	5d 5f       	subi	r21, 0xFD	; 253
    8a24:	61 63       	ori	r22, 0x31	; 49
    8a26:	65 67       	ori	r22, 0x75	; 117
    8a28:	69 6b       	ori	r22, 0xB9	; 185
    8a2a:	6c 6e       	ori	r22, 0xEC	; 236
    8a2c:	70 71       	andi	r23, 0x10	; 16
    8a2e:	73 74       	andi	r23, 0x43	; 67
    8a30:	75 77       	andi	r23, 0x75	; 117
    8a32:	78 79       	andi	r23, 0x98	; 152
    8a34:	7a 7b       	andi	r23, 0xBA	; 186
    8a36:	7c 7d       	andi	r23, 0xDC	; 220
    8a38:	7d 7e       	andi	r23, 0xED	; 237
    8a3a:	7e 7f       	andi	r23, 0xFE	; 254
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7e 7e       	andi	r23, 0xEE	; 238
    8a48:	7d 7d       	andi	r23, 0xDD	; 221
    8a4a:	7c 7b       	andi	r23, 0xBC	; 188
    8a4c:	7a 79       	andi	r23, 0x9A	; 154
    8a4e:	78 77       	andi	r23, 0x78	; 120
    8a50:	75 74       	andi	r23, 0x45	; 69
    8a52:	73 71       	andi	r23, 0x13	; 19
    8a54:	70 6e       	ori	r23, 0xE0	; 224
    8a56:	6c 6b       	ori	r22, 0xBC	; 188
    8a58:	69 67       	ori	r22, 0x79	; 121
    8a5a:	65 63       	ori	r22, 0x35	; 53
    8a5c:	61 5f       	subi	r22, 0xF1	; 241
    8a5e:	5d 5b       	subi	r21, 0xBD	; 189
    8a60:	59 57       	subi	r21, 0x79	; 121
    8a62:	55 53       	subi	r21, 0x35	; 53
    8a64:	50 4e       	sbci	r21, 0xE0	; 224
    8a66:	4c 4a       	sbci	r20, 0xAC	; 172
    8a68:	48 45       	sbci	r20, 0x58	; 88
    8a6a:	43 41       	sbci	r20, 0x13	; 19
    8a6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8a6e:	3b 39       	cpi	r19, 0x9B	; 155
    8a70:	37 35       	cpi	r19, 0x57	; 87
    8a72:	33 32       	cpi	r19, 0x23	; 35
    8a74:	30 2f       	mov	r19, r16
    8a76:	2e 2d       	mov	r18, r14
    8a78:	2c 2b       	or	r18, r28
    8a7a:	2c 2d       	mov	r18, r12
    8a7c:	30 42       	sbci	r19, 0x20	; 32
    8a7e:	3d 28       	or	r3, r13
    8a80:	00 e9       	ldi	r16, 0x90	; 144
    8a82:	e5 fe       	sbrs	r14, 5
    8a84:	d4 d7       	rcall	.+4008   	; 0x9a2e <LBLineIntersect+0xd0>
    8a86:	d7 d7       	rcall	.+4014   	; 0x9a36 <LBLineIntersect+0xd8>
    8a88:	d6 d4       	rcall	.+2476   	; 0x9436 <initWifi+0x54>
    8a8a:	d2 d0       	rcall	.+420    	; 0x8c30 <waves+0x930>
    8a8c:	ce cc       	rjmp	.-1636   	; 0x842a <waves+0x12a>
    8a8e:	ca c8       	rjmp	.-3692   	; 0x7c24 <ProcessMusic+0x8c>
    8a90:	c6 c3       	rjmp	.+1932   	; 0x921e <wifiSend+0x16>
    8a92:	c1 bf       	out	0x31, r28	; 49
    8a94:	bd ba       	out	0x1d, r11	; 29
    8a96:	b8 b6       	in	r11, 0x38	; 56
    8a98:	b4 b1       	in	r27, 0x04	; 4
    8a9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8a9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8a9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8aa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8aa2:	9f 9e       	mul	r9, r31
    8aa4:	9c 9a       	sbi	0x13, 4	; 19
    8aa6:	99 97       	sbiw	r26, 0x29	; 41
    8aa8:	95 94       	asr	r9
    8aaa:	93 91       	.word	0x9193	; ????
    8aac:	90 8f       	std	Z+24, r25	; 0x18
    8aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8ab0:	8b 8a       	std	Y+19, r8	; 0x13
    8ab2:	89 88       	ldd	r8, Y+17	; 0x11
    8ab4:	88 87       	std	Y+8, r24	; 0x08
    8ab6:	86 85       	ldd	r24, Z+14	; 0x0e
    8ab8:	85 84       	ldd	r8, Z+13	; 0x0d
    8aba:	84 84       	ldd	r8, Z+12	; 0x0c
    8abc:	83 83       	std	Z+3, r24	; 0x03
    8abe:	83 83       	std	Z+3, r24	; 0x03
    8ac0:	83 83       	std	Z+3, r24	; 0x03
    8ac2:	83 83       	std	Z+3, r24	; 0x03
    8ac4:	83 84       	ldd	r8, Z+11	; 0x0b
    8ac6:	84 84       	ldd	r8, Z+12	; 0x0c
    8ac8:	85 85       	ldd	r24, Z+13	; 0x0d
    8aca:	86 87       	std	Z+14, r24	; 0x0e
    8acc:	88 88       	ldd	r8, Y+16	; 0x10
    8ace:	89 8a       	std	Y+17, r8	; 0x11
    8ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    8ad4:	90 91 93 94 	lds	r25, 0x9493
    8ad8:	95 97       	sbiw	r26, 0x25	; 37
    8ada:	99 9a       	sbi	0x13, 1	; 19
    8adc:	9c 9e       	mul	r9, r28
    8ade:	9f a1       	ldd	r25, Y+39	; 0x27
    8ae0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8ae2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8ae4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ae6:	af b1       	in	r26, 0x0f	; 15
    8ae8:	b4 b6       	in	r11, 0x34	; 52
    8aea:	b8 ba       	out	0x18, r11	; 24
    8aec:	bd bf       	out	0x3d, r27	; 61
    8aee:	c1 c3       	rjmp	.+1922   	; 0x9272 <wifiGetIfAvailable+0x42>
    8af0:	c6 c8       	rjmp	.-3700   	; 0x7c7e <ProcessMusic+0xe6>
    8af2:	ca cc       	rjmp	.-1644   	; 0x8488 <waves+0x188>
    8af4:	ce d0       	rcall	.+412    	; 0x8c92 <waves+0x992>
    8af6:	d2 d4       	rcall	.+2468   	; 0x949c <disablePassthroughMode+0x1c>
    8af8:	d6 d7       	rcall	.+4012   	; 0x9aa6 <LBLineIntersect+0x148>
    8afa:	d7 d7       	rcall	.+4014   	; 0x9aaa <LBLineIntersect+0x14c>
    8afc:	d4 fe       	sbrs	r13, 4
    8afe:	e5 e9       	ldi	r30, 0x95	; 149
    8b00:	f9 f8       	.word	0xf8f9	; ????
    8b02:	f9 f5       	brne	.+126    	; 0x8b82 <waves+0x882>
    8b04:	eb e1       	ldi	r30, 0x1B	; 27
    8b06:	dd de       	rcall	.-582    	; 0x88c2 <waves+0x5c2>
    8b08:	e0 e2       	ldi	r30, 0x20	; 32
    8b0a:	e4 e5       	ldi	r30, 0x54	; 84
    8b0c:	e6 e5       	ldi	r30, 0x56	; 86
    8b0e:	e4 e2       	ldi	r30, 0x24	; 36
    8b10:	de d9       	rcall	.-3140   	; 0x7ece <ProcessMusic+0x336>
    8b12:	d2 ca       	rjmp	.-2652   	; 0x80b8 <esmw+0x78>
    8b14:	c1 b7       	in	r28, 0x31	; 49
    8b16:	ac a2       	std	Y+36, r10	; 0x24
    8b18:	99 91       	ld	r25, Y+
    8b1a:	8a 86       	std	Y+10, r8	; 0x0a
    8b1c:	83 81       	ldd	r24, Z+3	; 0x03
    8b1e:	80 80       	ld	r8, Z
    8b20:	81 82       	std	Z+1, r8	; 0x01
    8b22:	83 85       	ldd	r24, Z+11	; 0x0b
    8b24:	86 88       	ldd	r8, Z+22	; 0x16
    8b26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8b28:	8d 8f       	std	Y+29, r24	; 0x1d
    8b2a:	90 92 93 95 	sts	0x9593, r9
    8b2e:	96 97       	sbiw	r26, 0x26	; 38
    8b30:	98 99       	sbic	0x13, 0	; 19
    8b32:	9a 9b       	sbis	0x13, 2	; 19
    8b34:	9b 9c       	mul	r9, r11
    8b36:	9d 9d       	mul	r25, r13
    8b38:	9d 9e       	mul	r9, r29
    8b3a:	9e 9e       	mul	r9, r30
    8b3c:	9f 9f       	mul	r25, r31
    8b3e:	9f 9f       	mul	r25, r31
    8b40:	9f 9f       	mul	r25, r31
    8b42:	9f 9e       	mul	r9, r31
    8b44:	9e 9e       	mul	r9, r30
    8b46:	9d 9d       	mul	r25, r13
    8b48:	9d 9c       	mul	r9, r13
    8b4a:	9b 9b       	sbis	0x13, 3	; 19
    8b4c:	9a 99       	sbic	0x13, 2	; 19
    8b4e:	98 97       	sbiw	r26, 0x28	; 40
    8b50:	96 95       	lsr	r25
    8b52:	93 92       	.word	0x9293	; ????
    8b54:	90 8f       	std	Z+24, r25	; 0x18
    8b56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8b58:	8a 88       	ldd	r8, Y+18	; 0x12
    8b5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8b5c:	83 82       	std	Z+3, r8	; 0x03
    8b5e:	81 80       	ldd	r8, Z+1	; 0x01
    8b60:	80 81       	ld	r24, Z
    8b62:	83 86       	std	Z+11, r8	; 0x0b
    8b64:	8a 91       	ld	r24, -Y
    8b66:	99 a2       	std	Y+33, r9	; 0x21
    8b68:	ac b7       	in	r26, 0x3c	; 60
    8b6a:	c1 ca       	rjmp	.-2686   	; 0x80ee <esmw+0xae>
    8b6c:	d2 d9       	rcall	.-3164   	; 0x7f12 <ProcessMusic+0x37a>
    8b6e:	de e2       	ldi	r29, 0x2E	; 46
    8b70:	e4 e5       	ldi	r30, 0x54	; 84
    8b72:	e6 e5       	ldi	r30, 0x56	; 86
    8b74:	e4 e2       	ldi	r30, 0x24	; 36
    8b76:	e0 de       	rcall	.-576    	; 0x8938 <waves+0x638>
    8b78:	dd e1       	ldi	r29, 0x1D	; 29
    8b7a:	eb f5       	brvc	.+122    	; 0x8bf6 <waves+0x8f6>
    8b7c:	f9 f8       	.word	0xf8f9	; ????
    8b7e:	f9 00       	.word	0x00f9	; ????
    8b80:	07 08       	sbc	r0, r7
    8b82:	07 0b       	sbc	r16, r23
    8b84:	15 1f       	adc	r17, r21
    8b86:	23 22       	and	r2, r19
    8b88:	20 1e       	adc	r2, r16
    8b8a:	1c 1b       	sub	r17, r28
    8b8c:	1a 1b       	sub	r17, r26
    8b8e:	1c 1e       	adc	r1, r28
    8b90:	22 27       	eor	r18, r18
    8b92:	2e 36       	cpi	r18, 0x6E	; 110
    8b94:	3f 49       	sbci	r19, 0x9F	; 159
    8b96:	54 5e       	subi	r21, 0xE4	; 228
    8b98:	67 6f       	ori	r22, 0xF7	; 247
    8b9a:	76 7a       	andi	r23, 0xA6	; 166
    8b9c:	7e 7f       	andi	r23, 0xFE	; 254
    8b9e:	7f 7f       	andi	r23, 0xFF	; 255
    8ba0:	7f 7e       	andi	r23, 0xEF	; 239
    8ba2:	7d 7b       	andi	r23, 0xBD	; 189
    8ba4:	7a 78       	andi	r23, 0x8A	; 138
    8ba6:	76 74       	andi	r23, 0x46	; 70
    8ba8:	73 71       	andi	r23, 0x13	; 19
    8baa:	70 6e       	ori	r23, 0xE0	; 224
    8bac:	6d 6b       	ori	r22, 0xBD	; 189
    8bae:	6a 69       	ori	r22, 0x9A	; 154
    8bb0:	68 67       	ori	r22, 0x78	; 120
    8bb2:	66 65       	ori	r22, 0x56	; 86
    8bb4:	65 64       	ori	r22, 0x45	; 69
    8bb6:	64 63       	ori	r22, 0x34	; 52
    8bb8:	63 62       	ori	r22, 0x23	; 35
    8bba:	62 62       	ori	r22, 0x22	; 34
    8bbc:	61 61       	ori	r22, 0x11	; 17
    8bbe:	61 61       	ori	r22, 0x11	; 17
    8bc0:	61 61       	ori	r22, 0x11	; 17
    8bc2:	61 62       	ori	r22, 0x21	; 33
    8bc4:	62 62       	ori	r22, 0x22	; 34
    8bc6:	63 63       	ori	r22, 0x33	; 51
    8bc8:	63 64       	ori	r22, 0x43	; 67
    8bca:	65 65       	ori	r22, 0x55	; 85
    8bcc:	66 67       	ori	r22, 0x76	; 118
    8bce:	68 69       	ori	r22, 0x98	; 152
    8bd0:	6a 6b       	ori	r22, 0xBA	; 186
    8bd2:	6d 6e       	ori	r22, 0xED	; 237
    8bd4:	70 71       	andi	r23, 0x10	; 16
    8bd6:	73 74       	andi	r23, 0x43	; 67
    8bd8:	76 78       	andi	r23, 0x86	; 134
    8bda:	7a 7b       	andi	r23, 0xBA	; 186
    8bdc:	7d 7e       	andi	r23, 0xED	; 237
    8bde:	7f 7f       	andi	r23, 0xFF	; 255
    8be0:	7f 7f       	andi	r23, 0xFF	; 255
    8be2:	7e 7a       	andi	r23, 0xAE	; 174
    8be4:	76 6f       	ori	r23, 0xF6	; 246
    8be6:	67 5e       	subi	r22, 0xE7	; 231
    8be8:	54 49       	sbci	r21, 0x94	; 148
    8bea:	3f 36       	cpi	r19, 0x6F	; 111
    8bec:	2e 27       	eor	r18, r30
    8bee:	22 1e       	adc	r2, r18
    8bf0:	1c 1b       	sub	r17, r28
    8bf2:	1a 1b       	sub	r17, r26
    8bf4:	1c 1e       	adc	r1, r28
    8bf6:	20 22       	and	r2, r16
    8bf8:	23 1f       	adc	r18, r19
    8bfa:	15 0b       	sbc	r17, r21
    8bfc:	07 08       	sbc	r0, r7
    8bfe:	07 00       	.word	0x0007	; ????
    8c00:	1f 31       	cpi	r17, 0x1F	; 31
    8c02:	3d 44       	sbci	r19, 0x4D	; 77
    8c04:	4e 53       	subi	r20, 0x3E	; 62
    8c06:	54 56       	subi	r21, 0x64	; 100
    8c08:	5a 5f       	subi	r21, 0xFA	; 250
    8c0a:	64 69       	ori	r22, 0x94	; 148
    8c0c:	6e 74       	andi	r22, 0x4E	; 78
    8c0e:	76 79       	andi	r23, 0x96	; 150
    8c10:	7c 7f       	andi	r23, 0xFC	; 252
    8c12:	7f 7f       	andi	r23, 0xFF	; 255
    8c14:	7f 7f       	andi	r23, 0xFF	; 255
    8c16:	7f 7f       	andi	r23, 0xFF	; 255
    8c18:	7f 7f       	andi	r23, 0xFF	; 255
    8c1a:	7f 7f       	andi	r23, 0xFF	; 255
    8c1c:	7f 7f       	andi	r23, 0xFF	; 255
    8c1e:	7f 7f       	andi	r23, 0xFF	; 255
    8c20:	7f 7f       	andi	r23, 0xFF	; 255
    8c22:	7f 7f       	andi	r23, 0xFF	; 255
    8c24:	7f 7f       	andi	r23, 0xFF	; 255
    8c26:	7f 7f       	andi	r23, 0xFF	; 255
    8c28:	7f 7f       	andi	r23, 0xFF	; 255
    8c2a:	7f 7f       	andi	r23, 0xFF	; 255
    8c2c:	7f 7f       	andi	r23, 0xFF	; 255
    8c2e:	7f 7f       	andi	r23, 0xFF	; 255
    8c30:	7f 7f       	andi	r23, 0xFF	; 255
    8c32:	7f 7f       	andi	r23, 0xFF	; 255
    8c34:	7f 7f       	andi	r23, 0xFF	; 255
    8c36:	7f 7f       	andi	r23, 0xFF	; 255
    8c38:	7f 7f       	andi	r23, 0xFF	; 255
    8c3a:	7f 7f       	andi	r23, 0xFF	; 255
    8c3c:	7f 7f       	andi	r23, 0xFF	; 255
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7f 7f       	andi	r23, 0xFF	; 255
    8c46:	7f 7f       	andi	r23, 0xFF	; 255
    8c48:	7f 7f       	andi	r23, 0xFF	; 255
    8c4a:	7f 7f       	andi	r23, 0xFF	; 255
    8c4c:	7f 7f       	andi	r23, 0xFF	; 255
    8c4e:	7f 7f       	andi	r23, 0xFF	; 255
    8c50:	7f 7f       	andi	r23, 0xFF	; 255
    8c52:	7f 7f       	andi	r23, 0xFF	; 255
    8c54:	7f 7f       	andi	r23, 0xFF	; 255
    8c56:	7f 7f       	andi	r23, 0xFF	; 255
    8c58:	7f 7f       	andi	r23, 0xFF	; 255
    8c5a:	7f 7f       	andi	r23, 0xFF	; 255
    8c5c:	7f 7f       	andi	r23, 0xFF	; 255
    8c5e:	7f 7f       	andi	r23, 0xFF	; 255
    8c60:	7f 7f       	andi	r23, 0xFF	; 255
    8c62:	7f 7f       	andi	r23, 0xFF	; 255
    8c64:	7f 7f       	andi	r23, 0xFF	; 255
    8c66:	7f 7f       	andi	r23, 0xFF	; 255
    8c68:	7f 7f       	andi	r23, 0xFF	; 255
    8c6a:	7f 7f       	andi	r23, 0xFF	; 255
    8c6c:	7f 7f       	andi	r23, 0xFF	; 255
    8c6e:	7f 7f       	andi	r23, 0xFF	; 255
    8c70:	7f 7f       	andi	r23, 0xFF	; 255
    8c72:	7f 7f       	andi	r23, 0xFF	; 255
    8c74:	7f 7f       	andi	r23, 0xFF	; 255
    8c76:	7f 7f       	andi	r23, 0xFF	; 255
    8c78:	7f 7f       	andi	r23, 0xFF	; 255
    8c7a:	7f 7c       	andi	r23, 0xCF	; 207
    8c7c:	78 71       	andi	r23, 0x18	; 24
    8c7e:	68 4c       	sbci	r22, 0xC8	; 200
    8c80:	2c 1c       	adc	r2, r12
    8c82:	12 0c       	add	r1, r2
    8c84:	0a 0b       	sbc	r16, r26
    8c86:	0a 05       	cpc	r16, r10
    8c88:	fd f3       	brhs	.-2      	; 0x8c88 <waves+0x988>
    8c8a:	e9 df       	rcall	.-46     	; 0x8c5e <waves+0x95e>
    8c8c:	d4 ca       	rjmp	.-2648   	; 0x8236 <steptable+0x12e>
    8c8e:	c0 b7       	in	r28, 0x30	; 48
    8c90:	ae a6       	std	Y+46, r10	; 0x2e
    8c92:	9e 97       	sbiw	r26, 0x2e	; 46
    8c94:	91 8b       	std	Z+17, r25	; 0x11
    8c96:	86 85       	ldd	r24, Z+14	; 0x0e
    8c98:	82 80       	ldd	r8, Z+2	; 0x02
    8c9a:	80 80       	ld	r8, Z
    8c9c:	80 80       	ld	r8, Z
    8c9e:	80 80       	ld	r8, Z
    8ca0:	80 80       	ld	r8, Z
    8ca2:	80 80       	ld	r8, Z
    8ca4:	80 80       	ld	r8, Z
    8ca6:	80 80       	ld	r8, Z
    8ca8:	80 80       	ld	r8, Z
    8caa:	80 80       	ld	r8, Z
    8cac:	80 80       	ld	r8, Z
    8cae:	80 80       	ld	r8, Z
    8cb0:	80 80       	ld	r8, Z
    8cb2:	80 80       	ld	r8, Z
    8cb4:	80 80       	ld	r8, Z
    8cb6:	80 80       	ld	r8, Z
    8cb8:	80 80       	ld	r8, Z
    8cba:	80 80       	ld	r8, Z
    8cbc:	80 80       	ld	r8, Z
    8cbe:	80 80       	ld	r8, Z
    8cc0:	80 80       	ld	r8, Z
    8cc2:	80 80       	ld	r8, Z
    8cc4:	80 80       	ld	r8, Z
    8cc6:	80 80       	ld	r8, Z
    8cc8:	80 80       	ld	r8, Z
    8cca:	80 80       	ld	r8, Z
    8ccc:	80 80       	ld	r8, Z
    8cce:	80 80       	ld	r8, Z
    8cd0:	80 80       	ld	r8, Z
    8cd2:	80 80       	ld	r8, Z
    8cd4:	80 80       	ld	r8, Z
    8cd6:	80 80       	ld	r8, Z
    8cd8:	80 80       	ld	r8, Z
    8cda:	80 80       	ld	r8, Z
    8cdc:	80 80       	ld	r8, Z
    8cde:	80 80       	ld	r8, Z
    8ce0:	80 80       	ld	r8, Z
    8ce2:	80 80       	ld	r8, Z
    8ce4:	80 80       	ld	r8, Z
    8ce6:	80 80       	ld	r8, Z
    8ce8:	80 80       	ld	r8, Z
    8cea:	80 80       	ld	r8, Z
    8cec:	80 80       	ld	r8, Z
    8cee:	80 80       	ld	r8, Z
    8cf0:	80 80       	ld	r8, Z
    8cf2:	80 80       	ld	r8, Z
    8cf4:	80 87       	std	Z+8, r24	; 0x08
    8cf6:	91 9d       	mul	r25, r1
    8cf8:	ac c4       	rjmp	.+2392   	; 0x9652 <joinNetGame+0x50>
    8cfa:	cb d4       	rcall	.+2454   	; 0x9692 <joinNetGame+0x90>
    8cfc:	dd f2       	brhs	.-74     	; 0x8cb4 <waves+0x9b4>
    8cfe:	fa fa       	.word	0xfafa	; ????

00008d00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8d00:	2f 92       	push	r2
    8d02:	3f 92       	push	r3
    8d04:	4f 92       	push	r4
    8d06:	5f 92       	push	r5
    8d08:	6f 92       	push	r6
    8d0a:	7f 92       	push	r7
    8d0c:	8f 92       	push	r8
    8d0e:	9f 92       	push	r9
    8d10:	af 92       	push	r10
    8d12:	bf 92       	push	r11
    8d14:	cf 92       	push	r12
    8d16:	df 92       	push	r13
    8d18:	ef 92       	push	r14
    8d1a:	ff 92       	push	r15
    8d1c:	0f 93       	push	r16
    8d1e:	1f 93       	push	r17
    8d20:	cf 93       	push	r28
    8d22:	df 93       	push	r29
    8d24:	00 d0       	rcall	.+0      	; 0x8d26 <ProcessSprites+0x26>
    8d26:	00 d0       	rcall	.+0      	; 0x8d28 <ProcessSprites+0x28>
    8d28:	00 d0       	rcall	.+0      	; 0x8d2a <ProcessSprites+0x2a>
    8d2a:	cd b7       	in	r28, 0x3d	; 61
    8d2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8d2e:	80 91 00 01 	lds	r24, 0x0100
    8d32:	88 23       	and	r24, r24
    8d34:	09 f4       	brne	.+2      	; 0x8d38 <ProcessSprites+0x38>
    8d36:	b1 c0       	rjmp	.+354    	; 0x8e9a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8d38:	80 91 0e 0a 	lds	r24, 0x0A0E
    8d3c:	80 93 0d 0a 	sts	0x0A0D, r24
	free_tile_index = user_ram_tiles_c;
    8d40:	80 93 0c 0a 	sts	0x0A0C, r24
    8d44:	00 e0       	ldi	r16, 0x00	; 0
    8d46:	10 e0       	ldi	r17, 0x00	; 0
    8d48:	f8 01       	movw	r30, r16
    8d4a:	e8 55       	subi	r30, 0x58	; 88
    8d4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8d4e:	81 81       	ldd	r24, Z+1	; 0x01
    8d50:	90 81       	ld	r25, Z
    8d52:	32 81       	ldd	r19, Z+2	; 0x02
    8d54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8d56:	28 e0       	ldi	r18, 0x08	; 8
    8d58:	29 0f       	add	r18, r25
    8d5a:	26 95       	lsr	r18
    8d5c:	26 95       	lsr	r18
    8d5e:	26 95       	lsr	r18
    8d60:	33 24       	eor	r3, r3
    8d62:	3a 94       	dec	r3
    8d64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8d66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8d68:	19 f0       	breq	.+6      	; 0x8d70 <ProcessSprites+0x70>
    8d6a:	e2 e0       	ldi	r30, 0x02	; 2
    8d6c:	2e 2e       	mov	r2, r30
    8d6e:	02 c0       	rjmp	.+4      	; 0x8d74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8d70:	22 24       	eor	r2, r2
    8d72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8d74:	28 e0       	ldi	r18, 0x08	; 8
    8d76:	28 0f       	add	r18, r24
    8d78:	52 2e       	mov	r5, r18
    8d7a:	56 94       	lsr	r5
    8d7c:	56 94       	lsr	r5
    8d7e:	56 94       	lsr	r5
    8d80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8d82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8d84:	19 f0       	breq	.+6      	; 0x8d8c <ProcessSprites+0x8c>
    8d86:	22 e0       	ldi	r18, 0x02	; 2
    8d88:	29 83       	std	Y+1, r18	; 0x01
    8d8a:	02 c0       	rjmp	.+4      	; 0x8d90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8d8c:	e1 e0       	ldi	r30, 0x01	; 1
    8d8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8d90:	68 2e       	mov	r6, r24
    8d92:	71 2c       	mov	r7, r1
    8d94:	76 2c       	mov	r7, r6
    8d96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8d98:	69 0e       	add	r6, r25
    8d9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8d9c:	50 e0       	ldi	r21, 0x00	; 0
    8d9e:	54 2f       	mov	r21, r20
    8da0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8da2:	ca 01       	movw	r24, r20
    8da4:	83 0f       	add	r24, r19
    8da6:	91 1d       	adc	r25, r1
    8da8:	9b 83       	std	Y+3, r25	; 0x03
    8daa:	8a 83       	std	Y+2, r24	; 0x02
    8dac:	e1 2c       	mov	r14, r1
    8dae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8db0:	9e e1       	ldi	r25, 0x1E	; 30
    8db2:	59 9e       	mul	r5, r25
    8db4:	50 01       	movw	r10, r0
    8db6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8db8:	9e 2c       	mov	r9, r14
    8dba:	88 24       	eor	r8, r8
    8dbc:	43 2c       	mov	r4, r3
    8dbe:	c1 2c       	mov	r12, r1
    8dc0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8dc2:	ed e1       	ldi	r30, 0x1D	; 29
    8dc4:	e4 15       	cp	r30, r4
    8dc6:	08 f4       	brcc	.+2      	; 0x8dca <ProcessSprites+0xca>
    8dc8:	53 c0       	rjmp	.+166    	; 0x8e70 <ProcessSprites+0x170>
    8dca:	fb e1       	ldi	r31, 0x1B	; 27
    8dcc:	f5 15       	cp	r31, r5
    8dce:	08 f4       	brcc	.+2      	; 0x8dd2 <ProcessSprites+0xd2>
    8dd0:	4f c0       	rjmp	.+158    	; 0x8e70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8dd2:	c5 01       	movw	r24, r10
    8dd4:	84 0d       	add	r24, r4
    8dd6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8dd8:	9c 01       	movw	r18, r24
    8dda:	20 5a       	subi	r18, 0xA0	; 160
    8ddc:	3e 4f       	sbci	r19, 0xFE	; 254
    8dde:	3e 83       	std	Y+6, r19	; 0x06
    8de0:	2d 83       	std	Y+5, r18	; 0x05
    8de2:	f9 01       	movw	r30, r18
    8de4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8de6:	81 e0       	ldi	r24, 0x01	; 1
    8de8:	94 31       	cpi	r25, 0x14	; 20
    8dea:	08 f4       	brcc	.+2      	; 0x8dee <ProcessSprites+0xee>
    8dec:	80 e0       	ldi	r24, 0x00	; 0
    8dee:	21 e0       	ldi	r18, 0x01	; 1
    8df0:	30 91 0d 0a 	lds	r19, 0x0A0D
    8df4:	93 17       	cp	r25, r19
    8df6:	18 f0       	brcs	.+6      	; 0x8dfe <ProcessSprites+0xfe>
    8df8:	20 e0       	ldi	r18, 0x00	; 0
    8dfa:	88 23       	and	r24, r24
    8dfc:	61 f1       	breq	.+88     	; 0x8e56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8dfe:	60 91 0c 0a 	lds	r22, 0x0A0C
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    8e02:	64 31       	cpi	r22, 0x14	; 20
    8e04:	30 f5       	brcc	.+76     	; 0x8e52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    8e06:	88 23       	and	r24, r24
    8e08:	31 f0       	breq	.+12     	; 0x8e16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    8e0a:	8c ee       	ldi	r24, 0xEC	; 236
    8e0c:	89 0f       	add	r24, r25
    8e0e:	9c 83       	std	Y+4, r25	; 0x04
    8e10:	0e 94 7e 36 	call	0x6cfc	; 0x6cfc <CopyFlashTile>
    8e14:	06 c0       	rjmp	.+12     	; 0x8e22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    8e16:	22 23       	and	r18, r18
    8e18:	29 f0       	breq	.+10     	; 0x8e24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    8e1a:	89 2f       	mov	r24, r25
    8e1c:	9c 83       	std	Y+4, r25	; 0x04
    8e1e:	0e 94 0d 37 	call	0x6e1a	; 0x6e1a <CopyRamTile>
    8e22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    8e24:	80 91 0c 0a 	lds	r24, 0x0A0C
    8e28:	e8 2f       	mov	r30, r24
    8e2a:	f0 e0       	ldi	r31, 0x00	; 0
    8e2c:	9f 01       	movw	r18, r30
    8e2e:	22 0f       	add	r18, r18
    8e30:	33 1f       	adc	r19, r19
    8e32:	e2 0f       	add	r30, r18
    8e34:	f3 1f       	adc	r31, r19
    8e36:	e0 53       	subi	r30, 0x30	; 48
    8e38:	f6 4f       	sbci	r31, 0xF6	; 246
    8e3a:	2d 81       	ldd	r18, Y+5	; 0x05
    8e3c:	3e 81       	ldd	r19, Y+6	; 0x06
    8e3e:	31 83       	std	Z+1, r19	; 0x01
    8e40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    8e42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    8e44:	f9 01       	movw	r30, r18
    8e46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    8e48:	91 e0       	ldi	r25, 0x01	; 1
    8e4a:	98 0f       	add	r25, r24
    8e4c:	90 93 0c 0a 	sts	0x0A0C, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    8e50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    8e52:	94 31       	cpi	r25, 0x14	; 20
    8e54:	68 f4       	brcc	.+26     	; 0x8e70 <ProcessSprites+0x170>
    8e56:	80 91 0d 0a 	lds	r24, 0x0A0D
    8e5a:	98 17       	cp	r25, r24
    8e5c:	48 f0       	brcs	.+18     	; 0x8e70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8e5e:	93 01       	movw	r18, r6
    8e60:	a6 01       	movw	r20, r12
    8e62:	48 0d       	add	r20, r8
    8e64:	59 1d       	adc	r21, r9
    8e66:	6a 81       	ldd	r22, Y+2	; 0x02
    8e68:	7b 81       	ldd	r23, Y+3	; 0x03
    8e6a:	89 2f       	mov	r24, r25
    8e6c:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <BlitSpritePart>
    8e70:	ff ef       	ldi	r31, 0xFF	; 255
    8e72:	cf 1a       	sub	r12, r31
    8e74:	df 0a       	sbc	r13, r31
    8e76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    8e78:	c2 14       	cp	r12, r2
    8e7a:	08 f4       	brcc	.+2      	; 0x8e7e <ProcessSprites+0x17e>
    8e7c:	a2 cf       	rjmp	.-188    	; 0x8dc2 <ProcessSprites+0xc2>
    8e7e:	2f ef       	ldi	r18, 0xFF	; 255
    8e80:	e2 1a       	sub	r14, r18
    8e82:	f2 0a       	sbc	r15, r18
    8e84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    8e86:	99 81       	ldd	r25, Y+1	; 0x01
    8e88:	e9 16       	cp	r14, r25
    8e8a:	08 f4       	brcc	.+2      	; 0x8e8e <ProcessSprites+0x18e>
    8e8c:	91 cf       	rjmp	.-222    	; 0x8db0 <ProcessSprites+0xb0>
    8e8e:	0c 5f       	subi	r16, 0xFC	; 252
    8e90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    8e92:	08 32       	cpi	r16, 0x28	; 40
    8e94:	11 05       	cpc	r17, r1
    8e96:	09 f0       	breq	.+2      	; 0x8e9a <ProcessSprites+0x19a>
    8e98:	57 cf       	rjmp	.-338    	; 0x8d48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    8e9a:	26 96       	adiw	r28, 0x06	; 6
    8e9c:	0f b6       	in	r0, 0x3f	; 63
    8e9e:	f8 94       	cli
    8ea0:	de bf       	out	0x3e, r29	; 62
    8ea2:	0f be       	out	0x3f, r0	; 63
    8ea4:	cd bf       	out	0x3d, r28	; 61
    8ea6:	df 91       	pop	r29
    8ea8:	cf 91       	pop	r28
    8eaa:	1f 91       	pop	r17
    8eac:	0f 91       	pop	r16
    8eae:	ff 90       	pop	r15
    8eb0:	ef 90       	pop	r14
    8eb2:	df 90       	pop	r13
    8eb4:	cf 90       	pop	r12
    8eb6:	bf 90       	pop	r11
    8eb8:	af 90       	pop	r10
    8eba:	9f 90       	pop	r9
    8ebc:	8f 90       	pop	r8
    8ebe:	7f 90       	pop	r7
    8ec0:	6f 90       	pop	r6
    8ec2:	5f 90       	pop	r5
    8ec4:	4f 90       	pop	r4
    8ec6:	3f 90       	pop	r3
    8ec8:	2f 90       	pop	r2
    8eca:	08 95       	ret

00008ecc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8ecc:	df 92       	push	r13
    8ece:	ef 92       	push	r14
    8ed0:	ff 92       	push	r15
    8ed2:	0f 93       	push	r16
    8ed4:	1f 93       	push	r17
    8ed6:	cf 93       	push	r28
    8ed8:	df 93       	push	r29
    8eda:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8edc:	fb 01       	movw	r30, r22
    8ede:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8ee0:	31 96       	adiw	r30, 0x01	; 1
    8ee2:	64 91       	lpm	r22, Z
    8ee4:	5f ef       	ldi	r21, 0xFF	; 255
    8ee6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8ee8:	24 2f       	mov	r18, r20
    8eea:	21 70       	andi	r18, 0x01	; 1
    8eec:	40 ff       	sbrs	r20, 0
    8eee:	04 c0       	rjmp	.+8      	; 0x8ef8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    8ef0:	95 2f       	mov	r25, r21
			dx=-1;
    8ef2:	ff 24       	eor	r15, r15
    8ef4:	fa 94       	dec	r15
    8ef6:	03 c0       	rjmp	.+6      	; 0x8efe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8ef8:	ff 24       	eor	r15, r15
    8efa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8efc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8efe:	41 ff       	sbrs	r20, 1
    8f00:	05 c0       	rjmp	.+10     	; 0x8f0c <MapSprite2+0x40>
			y=(mapHeight-1);
    8f02:	7f ef       	ldi	r23, 0xFF	; 255
    8f04:	76 0f       	add	r23, r22
			dy=-1;
    8f06:	ee 24       	eor	r14, r14
    8f08:	ea 94       	dec	r14
    8f0a:	03 c0       	rjmp	.+6      	; 0x8f12 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8f0c:	ee 24       	eor	r14, r14
    8f0e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8f10:	70 e0       	ldi	r23, 0x00	; 0
    8f12:	21 11       	cpse	r18, r1
    8f14:	01 c0       	rjmp	.+2      	; 0x8f18 <MapSprite2+0x4c>
    8f16:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8f18:	00 e0       	ldi	r16, 0x00	; 0
    8f1a:	06 17       	cp	r16, r22
    8f1c:	09 f1       	breq	.+66     	; 0x8f60 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f1e:	71 03       	mulsu	r23, r17
    8f20:	e0 01       	movw	r28, r0
    8f22:	11 24       	eor	r1, r1
    8f24:	d8 2e       	mov	r13, r24
    8f26:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    8f28:	8d 15       	cp	r24, r13
    8f2a:	b1 f0       	breq	.+44     	; 0x8f58 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8f2c:	9e 01       	movw	r18, r28
    8f2e:	29 0f       	add	r18, r25
    8f30:	31 1d       	adc	r19, r1
    8f32:	97 fd       	sbrc	r25, 7
    8f34:	3a 95       	dec	r19
    8f36:	2e 5f       	subi	r18, 0xFE	; 254
    8f38:	3f 4f       	sbci	r19, 0xFF	; 255
    8f3a:	fd 01       	movw	r30, r26
    8f3c:	e2 0f       	add	r30, r18
    8f3e:	f3 1f       	adc	r31, r19
    8f40:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8f42:	34 e0       	ldi	r19, 0x04	; 4
    8f44:	83 9f       	mul	r24, r19
    8f46:	f0 01       	movw	r30, r0
    8f48:	11 24       	eor	r1, r1
    8f4a:	e8 55       	subi	r30, 0x58	; 88
    8f4c:	fb 4f       	sbci	r31, 0xFB	; 251
    8f4e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8f50:	8f 5f       	subi	r24, 0xFF	; 255
    8f52:	43 83       	std	Z+3, r20	; 0x03
    8f54:	9f 0d       	add	r25, r15
    8f56:	e8 cf       	rjmp	.-48     	; 0x8f28 <MapSprite2+0x5c>
    8f58:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8f5a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8f5c:	95 2f       	mov	r25, r21
    8f5e:	dd cf       	rjmp	.-70     	; 0x8f1a <MapSprite2+0x4e>
	    }
	}
    8f60:	df 91       	pop	r29
    8f62:	cf 91       	pop	r28
    8f64:	1f 91       	pop	r17
    8f66:	0f 91       	pop	r16
    8f68:	ff 90       	pop	r15
    8f6a:	ef 90       	pop	r14
    8f6c:	df 90       	pop	r13
    8f6e:	08 95       	ret

00008f70 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8f70:	0f 93       	push	r16
    8f72:	cf 93       	push	r28
    8f74:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8f76:	30 e0       	ldi	r19, 0x00	; 0
    8f78:	30 17       	cp	r19, r16
    8f7a:	e1 f0       	breq	.+56     	; 0x8fb4 <MoveSprite+0x44>
    8f7c:	b4 2f       	mov	r27, r20
    8f7e:	a0 e2       	ldi	r26, 0x20	; 32
    8f80:	a4 0f       	add	r26, r20
    8f82:	78 2f       	mov	r23, r24
    8f84:	72 0f       	add	r23, r18
    8f86:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8f88:	87 17       	cp	r24, r23
    8f8a:	81 f0       	breq	.+32     	; 0x8fac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8f8c:	c4 e0       	ldi	r28, 0x04	; 4
    8f8e:	8c 9f       	mul	r24, r28
    8f90:	f0 01       	movw	r30, r0
    8f92:	11 24       	eor	r1, r1
    8f94:	e8 55       	subi	r30, 0x58	; 88
    8f96:	fb 4f       	sbci	r31, 0xFB	; 251
    8f98:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8f9a:	41 3e       	cpi	r20, 0xE1	; 225
    8f9c:	51 05       	cpc	r21, r1
    8f9e:	14 f0       	brlt	.+4      	; 0x8fa4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8fa0:	a1 83       	std	Z+1, r26	; 0x01
    8fa2:	01 c0       	rjmp	.+2      	; 0x8fa6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8fa4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8fa6:	8f 5f       	subi	r24, 0xFF	; 255
    8fa8:	98 5f       	subi	r25, 0xF8	; 248
    8faa:	ee cf       	rjmp	.-36     	; 0x8f88 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8fac:	3f 5f       	subi	r19, 0xFF	; 255
    8fae:	48 5f       	subi	r20, 0xF8	; 248
    8fb0:	5f 4f       	sbci	r21, 0xFF	; 255
    8fb2:	e2 cf       	rjmp	.-60     	; 0x8f78 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8fb4:	cf 91       	pop	r28
    8fb6:	0f 91       	pop	r16
    8fb8:	08 95       	ret

00008fba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8fba:	08 95       	ret

00008fbc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8fbc:	e8 ea       	ldi	r30, 0xA8	; 168
    8fbe:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8fc0:	80 ef       	ldi	r24, 0xF0	; 240
    8fc2:	80 83       	st	Z, r24
    8fc4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    8fc6:	94 e0       	ldi	r25, 0x04	; 4
    8fc8:	e0 3d       	cpi	r30, 0xD0	; 208
    8fca:	f9 07       	cpc	r31, r25
    8fcc:	d1 f7       	brne	.-12     	; 0x8fc2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    8fce:	10 92 0c 0a 	sts	0x0A0C, r1
		user_ram_tiles_c_tmp = 0U;
    8fd2:	10 92 0e 0a 	sts	0x0A0E, r1
    8fd6:	08 95       	ret

00008fd8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    8fd8:	4f 92       	push	r4
    8fda:	5f 92       	push	r5
    8fdc:	6f 92       	push	r6
    8fde:	7f 92       	push	r7
    8fe0:	8f 92       	push	r8
    8fe2:	9f 92       	push	r9
    8fe4:	af 92       	push	r10
    8fe6:	bf 92       	push	r11
    8fe8:	cf 92       	push	r12
    8fea:	df 92       	push	r13
    8fec:	ef 92       	push	r14
    8fee:	ff 92       	push	r15
    8ff0:	0f 93       	push	r16
    8ff2:	1f 93       	push	r17
    8ff4:	cf 93       	push	r28
    8ff6:	df 93       	push	r29
    8ff8:	68 2e       	mov	r6, r24
    8ffa:	56 2e       	mov	r5, r22
    8ffc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    8ffe:	fa 01       	movw	r30, r20
    9000:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9002:	31 96       	adiw	r30, 0x01	; 1
    9004:	84 90       	lpm	r8, Z
    9006:	c7 2c       	mov	r12, r7
    9008:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    900a:	00 e0       	ldi	r16, 0x00	; 0
    900c:	10 e0       	ldi	r17, 0x00	; 0
    900e:	91 2c       	mov	r9, r1
    9010:	98 14       	cp	r9, r8
    9012:	f1 f0       	breq	.+60     	; 0x9050 <DrawMap+0x78>
    9014:	c0 e0       	ldi	r28, 0x00	; 0
    9016:	d0 e0       	ldi	r29, 0x00	; 0
    9018:	58 01       	movw	r10, r16
    901a:	f2 e0       	ldi	r31, 0x02	; 2
    901c:	af 0e       	add	r10, r31
    901e:	b1 1c       	adc	r11, r1
    9020:	49 2c       	mov	r4, r9
    9022:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9024:	c7 15       	cp	r28, r7
    9026:	80 f4       	brcc	.+32     	; 0x9048 <DrawMap+0x70>
    9028:	95 01       	movw	r18, r10
    902a:	2c 0f       	add	r18, r28
    902c:	3d 1f       	adc	r19, r29
    902e:	f7 01       	movw	r30, r14
    9030:	e2 0f       	add	r30, r18
    9032:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9034:	24 91       	lpm	r18, Z
    9036:	42 2f       	mov	r20, r18
    9038:	50 e0       	ldi	r21, 0x00	; 0
    903a:	64 2d       	mov	r22, r4
    903c:	8c 2f       	mov	r24, r28
    903e:	86 0d       	add	r24, r6
    9040:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
    9044:	21 96       	adiw	r28, 0x01	; 1
    9046:	ee cf       	rjmp	.-36     	; 0x9024 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9048:	93 94       	inc	r9
    904a:	0c 0d       	add	r16, r12
    904c:	1d 1d       	adc	r17, r13
    904e:	e0 cf       	rjmp	.-64     	; 0x9010 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9050:	df 91       	pop	r29
    9052:	cf 91       	pop	r28
    9054:	1f 91       	pop	r17
    9056:	0f 91       	pop	r16
    9058:	ff 90       	pop	r15
    905a:	ef 90       	pop	r14
    905c:	df 90       	pop	r13
    905e:	cf 90       	pop	r12
    9060:	bf 90       	pop	r11
    9062:	af 90       	pop	r10
    9064:	9f 90       	pop	r9
    9066:	8f 90       	pop	r8
    9068:	7f 90       	pop	r7
    906a:	6f 90       	pop	r6
    906c:	5f 90       	pop	r5
    906e:	4f 90       	pop	r4
    9070:	08 95       	ret

00009072 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9072:	df 92       	push	r13
    9074:	ef 92       	push	r14
    9076:	ff 92       	push	r15
    9078:	0f 93       	push	r16
    907a:	1f 93       	push	r17
    907c:	cf 93       	push	r28
    907e:	df 93       	push	r29
    9080:	f6 2e       	mov	r15, r22
    9082:	04 2f       	mov	r16, r20
    9084:	d2 2e       	mov	r13, r18
    9086:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9088:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    908a:	8a e0       	ldi	r24, 0x0A	; 10
    908c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    908e:	01 11       	cpse	r16, r1
    9090:	02 c0       	rjmp	.+4      	; 0x9096 <PrintByte+0x24>
    9092:	11 11       	cpse	r17, r1
    9094:	07 c0       	rjmp	.+14     	; 0x90a4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9096:	80 2f       	mov	r24, r16
    9098:	6e 2d       	mov	r22, r14
    909a:	0e 94 7e 6d 	call	0xdafc	; 0xdafc <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    909e:	40 e1       	ldi	r20, 0x10	; 16
    90a0:	49 0f       	add	r20, r25
    90a2:	05 c0       	rjmp	.+10     	; 0x90ae <PrintByte+0x3c>
		}else{
			if(zeropad){
    90a4:	dd 20       	and	r13, r13
    90a6:	11 f0       	breq	.+4      	; 0x90ac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    90a8:	40 e1       	ldi	r20, 0x10	; 16
    90aa:	01 c0       	rjmp	.+2      	; 0x90ae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    90ac:	40 e0       	ldi	r20, 0x00	; 0
    90ae:	6f 2d       	mov	r22, r15
    90b0:	8c 2f       	mov	r24, r28
    90b2:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <SetFont>
			}
		}
		val=val/10;
    90b6:	80 2f       	mov	r24, r16
    90b8:	6e 2d       	mov	r22, r14
    90ba:	0e 94 7e 6d 	call	0xdafc	; 0xdafc <__udivmodqi4>
    90be:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    90c0:	1f 5f       	subi	r17, 0xFF	; 255
    90c2:	21 97       	sbiw	r28, 0x01	; 1
    90c4:	13 30       	cpi	r17, 0x03	; 3
    90c6:	19 f7       	brne	.-58     	; 0x908e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    90c8:	df 91       	pop	r29
    90ca:	cf 91       	pop	r28
    90cc:	1f 91       	pop	r17
    90ce:	0f 91       	pop	r16
    90d0:	ff 90       	pop	r15
    90d2:	ef 90       	pop	r14
    90d4:	df 90       	pop	r13
    90d6:	08 95       	ret

000090d8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    90d8:	0f 93       	push	r16
    90da:	1f 93       	push	r17
    90dc:	cf 93       	push	r28
    90de:	df 93       	push	r29
    90e0:	06 2f       	mov	r16, r22
    90e2:	c4 2f       	mov	r28, r20
    90e4:	d5 2f       	mov	r29, r21
    90e6:	18 2f       	mov	r17, r24
    90e8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    90ea:	fe 01       	movw	r30, r28
    90ec:	44 91       	lpm	r20, Z
		if(c!=0){
    90ee:	44 23       	and	r20, r20
    90f0:	49 f0       	breq	.+18     	; 0x9104 <Print+0x2c>
			c=((c&127)-32);			
    90f2:	4f 77       	andi	r20, 0x7F	; 127
    90f4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    90f6:	60 2f       	mov	r22, r16
    90f8:	8c 2f       	mov	r24, r28
    90fa:	81 0f       	add	r24, r17
    90fc:	0e 94 d4 39 	call	0x73a8	; 0x73a8 <SetFont>
    9100:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9102:	f3 cf       	rjmp	.-26     	; 0x90ea <Print+0x12>
	
}
    9104:	df 91       	pop	r29
    9106:	cf 91       	pop	r28
    9108:	1f 91       	pop	r17
    910a:	0f 91       	pop	r16
    910c:	08 95       	ret

0000910e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    910e:	40 52       	subi	r20, 0x20	; 32
    9110:	0c 94 d4 39 	jmp	0x73a8	; 0x73a8 <SetFont>

00009114 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9114:	0f 93       	push	r16
    9116:	1f 93       	push	r17
    9118:	cf 93       	push	r28
    911a:	df 93       	push	r29
    911c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    911e:	c0 e0       	ldi	r28, 0x00	; 0
    9120:	d0 e0       	ldi	r29, 0x00	; 0
    9122:	c0 17       	cp	r28, r16
    9124:	d1 07       	cpc	r29, r17
    9126:	44 f4       	brge	.+16     	; 0x9138 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9128:	0e 94 ee 39 	call	0x73dc	; 0x73dc <GetVsyncFlag>
    912c:	88 23       	and	r24, r24
    912e:	e1 f3       	breq	.-8      	; 0x9128 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9130:	0e 94 f2 39 	call	0x73e4	; 0x73e4 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9134:	21 96       	adiw	r28, 0x01	; 1
    9136:	f5 cf       	rjmp	.-22     	; 0x9122 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9138:	df 91       	pop	r29
    913a:	cf 91       	pop	r28
    913c:	1f 91       	pop	r17
    913e:	0f 91       	pop	r16
    9140:	08 95       	ret

00009142 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9142:	80 93 5d 0b 	sts	0x0B5D, r24
	currFadeFrame=0;
    9146:	10 92 60 0b 	sts	0x0B60, r1
	fadeActive=true;
    914a:	81 e0       	ldi	r24, 0x01	; 1
    914c:	80 93 5f 0b 	sts	0x0B5F, r24
		
	if(blocking){
    9150:	66 23       	and	r22, r22
    9152:	21 f0       	breq	.+8      	; 0x915c <doFade+0x1a>
		while(fadeActive==true);
    9154:	80 91 5f 0b 	lds	r24, 0x0B5F
    9158:	81 11       	cpse	r24, r1
    915a:	fc cf       	rjmp	.-8      	; 0x9154 <doFade+0x12>
    915c:	08 95       	ret

0000915e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    915e:	81 11       	cpse	r24, r1
    9160:	03 c0       	rjmp	.+6      	; 0x9168 <FadeIn+0xa>
		DDRC=0xff;
    9162:	8f ef       	ldi	r24, 0xFF	; 255
    9164:	87 b9       	out	0x07, r24	; 7
		return;
    9166:	08 95       	ret
	}
	fadeStep=1;
    9168:	91 e0       	ldi	r25, 0x01	; 1
    916a:	90 93 61 0b 	sts	0x0B61, r25
	fadeDir=1;
    916e:	90 93 5e 0b 	sts	0x0B5E, r25
	doFade(speed,blocking);
    9172:	0c 94 a1 48 	jmp	0x9142	; 0x9142 <doFade>

00009176 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9176:	81 11       	cpse	r24, r1
    9178:	02 c0       	rjmp	.+4      	; 0x917e <FadeOut+0x8>
		DDRC=0;
    917a:	17 b8       	out	0x07, r1	; 7
		return;
    917c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    917e:	9c e0       	ldi	r25, 0x0C	; 12
    9180:	90 93 61 0b 	sts	0x0B61, r25
	fadeDir=-1;
    9184:	9f ef       	ldi	r25, 0xFF	; 255
    9186:	90 93 5e 0b 	sts	0x0B5E, r25
	doFade(speed,blocking);
    918a:	0c 94 a1 48 	jmp	0x9142	; 0x9142 <doFade>

0000918e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    918e:	80 91 5f 0b 	lds	r24, 0x0B5F
    9192:	88 23       	and	r24, r24
    9194:	01 f1       	breq	.+64     	; 0x91d6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9196:	80 91 60 0b 	lds	r24, 0x0B60
    919a:	81 11       	cpse	r24, r1
    919c:	19 c0       	rjmp	.+50     	; 0x91d0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    919e:	80 91 5d 0b 	lds	r24, 0x0B5D
    91a2:	80 93 60 0b 	sts	0x0B60, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    91a6:	e0 91 61 0b 	lds	r30, 0x0B61
    91aa:	f0 e0       	ldi	r31, 0x00	; 0
    91ac:	e5 52       	subi	r30, 0x25	; 37
    91ae:	ff 4f       	sbci	r31, 0xFF	; 255
    91b0:	e4 91       	lpm	r30, Z
    91b2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    91b4:	90 91 5e 0b 	lds	r25, 0x0B5E
    91b8:	80 91 61 0b 	lds	r24, 0x0B61
    91bc:	89 0f       	add	r24, r25
    91be:	80 93 61 0b 	sts	0x0B61, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    91c2:	88 23       	and	r24, r24
    91c4:	11 f0       	breq	.+4      	; 0x91ca <ProcessFading+0x3c>
    91c6:	8d 30       	cpi	r24, 0x0D	; 13
    91c8:	31 f4       	brne	.+12     	; 0x91d6 <ProcessFading+0x48>
				fadeActive=false;
    91ca:	10 92 5f 0b 	sts	0x0B5F, r1
    91ce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    91d0:	81 50       	subi	r24, 0x01	; 1
    91d2:	80 93 60 0b 	sts	0x0B60, r24
    91d6:	08 95       	ret

000091d8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    91d8:	0c 94 c7 48 	jmp	0x918e	; 0x918e <ProcessFading>

000091dc <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    91dc:	1f 93       	push	r17
    91de:	cf 93       	push	r28
    91e0:	df 93       	push	r29
    91e2:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    91e4:	20 97       	sbiw	r28, 0x00	; 0
    91e6:	59 f0       	breq	.+22     	; 0x91fe <wifiSendP+0x22>
		c=pgm_read_byte(str);
    91e8:	fe 01       	movw	r30, r28
    91ea:	14 91       	lpm	r17, Z
		if(c==0)break;
    91ec:	11 23       	and	r17, r17
    91ee:	39 f0       	breq	.+14     	; 0x91fe <wifiSendP+0x22>
		while(UartSendChar(c)==-1); //block if buffer full
    91f0:	81 2f       	mov	r24, r17
    91f2:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <UartSendChar>
    91f6:	8f 3f       	cpi	r24, 0xFF	; 255
    91f8:	d9 f3       	breq	.-10     	; 0x91f0 <wifiSendP+0x14>
		str++;
    91fa:	21 96       	adiw	r28, 0x01	; 1
    91fc:	f3 cf       	rjmp	.-26     	; 0x91e4 <wifiSendP+0x8>
	};

	return WIFI_OK;
}
    91fe:	80 e0       	ldi	r24, 0x00	; 0
    9200:	df 91       	pop	r29
    9202:	cf 91       	pop	r28
    9204:	1f 91       	pop	r17
    9206:	08 95       	ret

00009208 <wifiSend>:

u8 wifiSend(char* str){
    9208:	1f 93       	push	r17
    920a:	cf 93       	push	r28
    920c:	df 93       	push	r29
    920e:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    9210:	20 97       	sbiw	r28, 0x00	; 0
    9212:	49 f0       	breq	.+18     	; 0x9226 <wifiSend+0x1e>
		c=*str;
    9214:	19 91       	ld	r17, Y+
		if(c==0)break;
    9216:	11 23       	and	r17, r17
    9218:	31 f0       	breq	.+12     	; 0x9226 <wifiSend+0x1e>
		while(UartSendChar(c)==-1); //block if buffer full
    921a:	81 2f       	mov	r24, r17
    921c:	0e 94 f2 3b 	call	0x77e4	; 0x77e4 <UartSendChar>
    9220:	8f 3f       	cpi	r24, 0xFF	; 255
    9222:	d9 f3       	breq	.-10     	; 0x921a <wifiSend+0x12>
    9224:	f5 cf       	rjmp	.-22     	; 0x9210 <wifiSend+0x8>
		str++;
	};
	return WIFI_OK;
}
    9226:	80 e0       	ldi	r24, 0x00	; 0
    9228:	df 91       	pop	r29
    922a:	cf 91       	pop	r28
    922c:	1f 91       	pop	r17
    922e:	08 95       	ret

00009230 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
    9230:	ef 92       	push	r14
    9232:	ff 92       	push	r15
    9234:	1f 93       	push	r17
    9236:	cf 93       	push	r28
    9238:	df 93       	push	r29
    923a:	00 d0       	rcall	.+0      	; 0x923c <wifiGetIfAvailable+0xc>
    923c:	cd b7       	in	r28, 0x3d	; 61
    923e:	de b7       	in	r29, 0x3e	; 62
    9240:	18 2f       	mov	r17, r24
	if (UartUnreadCount() < expectedSize) {
    9242:	69 83       	std	Y+1, r22	; 0x01
    9244:	9a 83       	std	Y+2, r25	; 0x02
    9246:	0e 94 d0 3b 	call	0x77a0	; 0x77a0 <UartUnreadCount>
    924a:	69 81       	ldd	r22, Y+1	; 0x01
    924c:	9a 81       	ldd	r25, Y+2	; 0x02
    924e:	86 17       	cp	r24, r22
    9250:	68 f0       	brcs	.+26     	; 0x926c <wifiGetIfAvailable+0x3c>
    9252:	e1 2e       	mov	r14, r17
    9254:	f9 2e       	mov	r15, r25
    9256:	16 0f       	add	r17, r22
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    9258:	1e 15       	cp	r17, r14
    925a:	31 f0       	breq	.+12     	; 0x9268 <wifiGetIfAvailable+0x38>
		*(char*)buffer = UartReadChar() & 0xff;
    925c:	0e 94 d6 3b 	call	0x77ac	; 0x77ac <UartReadChar>
    9260:	f7 01       	movw	r30, r14
    9262:	81 93       	st	Z+, r24
    9264:	7f 01       	movw	r14, r30
    9266:	f8 cf       	rjmp	.-16     	; 0x9258 <wifiGetIfAvailable+0x28>

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
	}
	while (expectedSize--) {
    9268:	80 e0       	ldi	r24, 0x00	; 0
    926a:	01 c0       	rjmp	.+2      	; 0x926e <wifiGetIfAvailable+0x3e>
	return WIFI_OK;
}

u8 wifiGetIfAvailable(void* buffer, u8 expectedSize) {
	if (UartUnreadCount() < expectedSize) {
		return WIFI_NODATA;
    926c:	82 e0       	ldi	r24, 0x02	; 2
	while (expectedSize--) {
		*(char*)buffer = UartReadChar() & 0xff;
		buffer++;
	}
	return WIFI_OK;
}
    926e:	0f 90       	pop	r0
    9270:	0f 90       	pop	r0
    9272:	df 91       	pop	r29
    9274:	cf 91       	pop	r28
    9276:	1f 91       	pop	r17
    9278:	ff 90       	pop	r15
    927a:	ef 90       	pop	r14
    927c:	08 95       	ret

0000927e <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    927e:	ef 92       	push	r14
    9280:	ff 92       	push	r15
    9282:	0f 93       	push	r16
    9284:	1f 93       	push	r17
    9286:	cf 93       	push	r28
    9288:	df 93       	push	r29
    928a:	f8 2e       	mov	r15, r24
    928c:	e9 2e       	mov	r14, r25
    928e:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    9290:	0e 94 fd 39 	call	0x73fa	; 0x73fa <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    9294:	cf 2d       	mov	r28, r15
    9296:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    9298:	0e 94 d6 3b 	call	0x77ac	; 0x77ac <UartReadChar>
		if(r!=-1){
    929c:	8f 3f       	cpi	r24, 0xFF	; 255
    929e:	ef ef       	ldi	r30, 0xFF	; 255
    92a0:	9e 07       	cpc	r25, r30
    92a2:	99 f0       	breq	.+38     	; 0x92ca <wifiGetPB+0x4c>

			c=r&(0xff);
    92a4:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    92a6:	01 15       	cp	r16, r1
    92a8:	11 05       	cpc	r17, r1
    92aa:	19 f0       	breq	.+6      	; 0x92b2 <wifiGetPB+0x34>
				*buf=c;
    92ac:	f8 01       	movw	r30, r16
    92ae:	81 93       	st	Z+, r24
    92b0:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    92b2:	fe 01       	movw	r30, r28
    92b4:	84 91       	lpm	r24, Z
    92b6:	28 13       	cpse	r18, r24
    92b8:	06 c0       	rjmp	.+12     	; 0x92c6 <wifiGetPB+0x48>
				p++;
    92ba:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    92bc:	fe 01       	movw	r30, r28
    92be:	84 91       	lpm	r24, Z
    92c0:	81 11       	cpse	r24, r1
    92c2:	03 c0       	rjmp	.+6      	; 0x92ca <wifiGetPB+0x4c>
    92c4:	09 c0       	rjmp	.+18     	; 0x92d8 <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    92c6:	cf 2d       	mov	r28, r15
    92c8:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    92ca:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <GetVsyncCounter>
    92ce:	89 35       	cpi	r24, 0x59	; 89
    92d0:	92 40       	sbci	r25, 0x02	; 2
    92d2:	10 f3       	brcs	.-60     	; 0x9298 <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    92d4:	81 e0       	ldi	r24, 0x01	; 1
    92d6:	01 c0       	rjmp	.+2      	; 0x92da <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    92d8:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    92da:	df 91       	pop	r29
    92dc:	cf 91       	pop	r28
    92de:	1f 91       	pop	r17
    92e0:	0f 91       	pop	r16
    92e2:	ff 90       	pop	r15
    92e4:	ef 90       	pop	r14
    92e6:	08 95       	ret

000092e8 <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    92e8:	cf 92       	push	r12
    92ea:	df 92       	push	r13
    92ec:	ef 92       	push	r14
    92ee:	ff 92       	push	r15
    92f0:	0f 93       	push	r16
    92f2:	1f 93       	push	r17
    92f4:	cf 93       	push	r28
    92f6:	df 93       	push	r29
    92f8:	f8 2e       	mov	r15, r24
    92fa:	e9 2e       	mov	r14, r25
    92fc:	8b 01       	movw	r16, r22
    92fe:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    9300:	0e 94 fd 39 	call	0x73fa	; 0x73fa <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    9304:	cf 2d       	mov	r28, r15
    9306:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    9308:	0e 94 d6 3b 	call	0x77ac	; 0x77ac <UartReadChar>
        if(r!=-1){
    930c:	8f 3f       	cpi	r24, 0xFF	; 255
    930e:	ef ef       	ldi	r30, 0xFF	; 255
    9310:	9e 07       	cpc	r25, r30
    9312:	99 f0       	breq	.+38     	; 0x933a <wifiGetPBT+0x52>

            c=r&(0xff);
    9314:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    9316:	01 15       	cp	r16, r1
    9318:	11 05       	cpc	r17, r1
    931a:	19 f0       	breq	.+6      	; 0x9322 <wifiGetPBT+0x3a>
                *buf=c;
    931c:	f8 01       	movw	r30, r16
    931e:	81 93       	st	Z+, r24
    9320:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    9322:	fe 01       	movw	r30, r28
    9324:	84 91       	lpm	r24, Z
    9326:	28 13       	cpse	r18, r24
    9328:	06 c0       	rjmp	.+12     	; 0x9336 <wifiGetPBT+0x4e>
                p++;
    932a:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    932c:	fe 01       	movw	r30, r28
    932e:	84 91       	lpm	r24, Z
    9330:	81 11       	cpse	r24, r1
    9332:	03 c0       	rjmp	.+6      	; 0x933a <wifiGetPBT+0x52>
    9334:	09 c0       	rjmp	.+18     	; 0x9348 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    9336:	cf 2d       	mov	r28, r15
    9338:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    933a:	0e 94 f8 39 	call	0x73f0	; 0x73f0 <GetVsyncCounter>
    933e:	c8 16       	cp	r12, r24
    9340:	d9 06       	cpc	r13, r25
    9342:	10 f7       	brcc	.-60     	; 0x9308 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    9344:	81 e0       	ldi	r24, 0x01	; 1
    9346:	01 c0       	rjmp	.+2      	; 0x934a <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    9348:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    934a:	df 91       	pop	r29
    934c:	cf 91       	pop	r28
    934e:	1f 91       	pop	r17
    9350:	0f 91       	pop	r16
    9352:	ff 90       	pop	r15
    9354:	ef 90       	pop	r14
    9356:	df 90       	pop	r13
    9358:	cf 90       	pop	r12
    935a:	08 95       	ret

0000935c <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    935c:	cf 93       	push	r28
    935e:	df 93       	push	r29
    9360:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    9362:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    9366:	60 e0       	ldi	r22, 0x00	; 0
    9368:	70 e0       	ldi	r23, 0x00	; 0
    936a:	ce 01       	movw	r24, r28
    936c:	0e 94 3f 49 	call	0x927e	; 0x927e <wifiGetPB>
    9370:	91 e0       	ldi	r25, 0x01	; 1
    9372:	81 30       	cpi	r24, 0x01	; 1
    9374:	09 f0       	breq	.+2      	; 0x9378 <wifiRequestP+0x1c>
    9376:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9378:	89 2f       	mov	r24, r25
    937a:	df 91       	pop	r29
    937c:	cf 91       	pop	r28
    937e:	08 95       	ret

00009380 <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    9380:	cf 93       	push	r28
    9382:	df 93       	push	r29
    9384:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    9386:	0e 94 04 49 	call	0x9208	; 0x9208 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    938a:	60 e0       	ldi	r22, 0x00	; 0
    938c:	70 e0       	ldi	r23, 0x00	; 0
    938e:	ce 01       	movw	r24, r28
    9390:	0e 94 3f 49 	call	0x927e	; 0x927e <wifiGetPB>
    9394:	91 e0       	ldi	r25, 0x01	; 1
    9396:	81 30       	cpi	r24, 0x01	; 1
    9398:	09 f0       	breq	.+2      	; 0x939c <wifiRequest+0x1c>
    939a:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    939c:	89 2f       	mov	r24, r25
    939e:	df 91       	pop	r29
    93a0:	cf 91       	pop	r28
    93a2:	08 95       	ret

000093a4 <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    93a4:	0f 93       	push	r16
    93a6:	1f 93       	push	r17
    93a8:	cf 93       	push	r28
    93aa:	df 93       	push	r29
    93ac:	00 d0       	rcall	.+0      	; 0x93ae <wifiRequestPT+0xa>
    93ae:	cd b7       	in	r28, 0x3d	; 61
    93b0:	de b7       	in	r29, 0x3e	; 62
    93b2:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    93b4:	49 83       	std	Y+1, r20	; 0x01
    93b6:	5a 83       	std	Y+2, r21	; 0x02
    93b8:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    93bc:	49 81       	ldd	r20, Y+1	; 0x01
    93be:	5a 81       	ldd	r21, Y+2	; 0x02
    93c0:	60 e0       	ldi	r22, 0x00	; 0
    93c2:	70 e0       	ldi	r23, 0x00	; 0
    93c4:	c8 01       	movw	r24, r16
    93c6:	0e 94 74 49 	call	0x92e8	; 0x92e8 <wifiGetPBT>
    93ca:	91 e0       	ldi	r25, 0x01	; 1
    93cc:	81 30       	cpi	r24, 0x01	; 1
    93ce:	09 f0       	breq	.+2      	; 0x93d2 <wifiRequestPT+0x2e>
    93d0:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    93d2:	89 2f       	mov	r24, r25
    93d4:	0f 90       	pop	r0
    93d6:	0f 90       	pop	r0
    93d8:	df 91       	pop	r29
    93da:	cf 91       	pop	r28
    93dc:	1f 91       	pop	r17
    93de:	0f 91       	pop	r16
    93e0:	08 95       	ret

000093e2 <initWifi>:

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    93e2:	1f 93       	push	r17
    93e4:	cf 93       	push	r28
    93e6:	df 93       	push	r29
    s8 i = 0;
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    93e8:	82 e0       	ldi	r24, 0x02	; 2
    93ea:	80 93 c0 00 	sts	0x00C0, r24
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    93ee:	86 e0       	ldi	r24, 0x06	; 6
    93f0:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    93f4:	88 e1       	ldi	r24, 0x18	; 24
    93f6:	80 93 c1 00 	sts	0x00C1, r24
    return WIFI_OK;
}

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    s8 i = 0;
    93fa:	d0 e0       	ldi	r29, 0x00	; 0
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i % 7])));
    93fc:	17 e0       	ldi	r17, 0x07	; 7
    93fe:	8d 2f       	mov	r24, r29
    9400:	61 2f       	mov	r22, r17
    9402:	0e 94 8a 6d 	call	0xdb14	; 0xdb14 <__divmodqi4>
    9406:	e9 2f       	mov	r30, r25
    9408:	ee 0f       	add	r30, r30
    940a:	ff 0b       	sbc	r31, r31
    940c:	e5 54       	subi	r30, 0x45	; 69
    940e:	fd 4f       	sbci	r31, 0xFD	; 253
    9410:	84 91       	lpm	r24, Z
    9412:	80 93 c4 00 	sts	0x00C4, r24
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i % 7]))+1);
    9416:	31 96       	adiw	r30, 0x01	; 1
    9418:	e4 91       	lpm	r30, Z
    941a:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    941e:	81 e0       	ldi	r24, 0x01	; 1
    9420:	90 e0       	ldi	r25, 0x00	; 0
    9422:	0e 94 8a 48 	call	0x9114	; 0x9114 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    9426:	4e e1       	ldi	r20, 0x1E	; 30
    9428:	50 e0       	ldi	r21, 0x00	; 0
    942a:	66 eb       	ldi	r22, 0xB6	; 182
    942c:	72 e0       	ldi	r23, 0x02	; 2
    942e:	81 eb       	ldi	r24, 0xB1	; 177
    9430:	92 e0       	ldi	r25, 0x02	; 2
    9432:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <wifiRequestPT>
    9436:	c8 2f       	mov	r28, r24
    9438:	df 5f       	subi	r29, 0xFF	; 255
        i++;
    } while ((result != WIFI_OK) && (i < 14));
    943a:	88 23       	and	r24, r24
    943c:	19 f0       	breq	.+6      	; 0x9444 <initWifi+0x62>
    943e:	de 30       	cpi	r29, 0x0E	; 14
    9440:	f1 f6       	brne	.-68     	; 0x93fe <initWifi+0x1c>
    9442:	19 c0       	rjmp	.+50     	; 0x9476 <initWifi+0x94>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=14400,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    9444:	48 e7       	ldi	r20, 0x78	; 120
    9446:	50 e0       	ldi	r21, 0x00	; 0
    9448:	6c ea       	ldi	r22, 0xAC	; 172
    944a:	72 e0       	ldi	r23, 0x02	; 2
    944c:	80 e9       	ldi	r24, 0x90	; 144
    944e:	92 e0       	ldi	r25, 0x02	; 2
    9450:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <wifiRequestPT>
    9454:	c8 2f       	mov	r28, r24
        if (result == WIFI_OK) {
    9456:	81 11       	cpse	r24, r1
    9458:	0e c0       	rjmp	.+28     	; 0x9476 <initWifi+0x94>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[1])));
    945a:	ed eb       	ldi	r30, 0xBD	; 189
    945c:	f2 e0       	ldi	r31, 0x02	; 2
    945e:	e4 91       	lpm	r30, Z
    9460:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[1]))+1); 
    9464:	ee eb       	ldi	r30, 0xBE	; 190
    9466:	f2 e0       	ldi	r31, 0x02	; 2
    9468:	e4 91       	lpm	r30, Z
    946a:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    946e:	81 e0       	ldi	r24, 0x01	; 1
    9470:	90 e0       	ldi	r25, 0x00	; 0
    9472:	0e 94 8a 48 	call	0x9114	; 0x9114 <WaitVsync>
        }
    }
    return result;
}
    9476:	8c 2f       	mov	r24, r28
    9478:	df 91       	pop	r29
    947a:	cf 91       	pop	r28
    947c:	1f 91       	pop	r17
    947e:	08 95       	ret

00009480 <disablePassthroughMode>:
	float pos_x;
	float pos_y;
	u8 zero;
} NetMessage;

u8 disablePassthroughMode() {
    9480:	cf 93       	push	r28
	u8 counter = 0;
	wifiSendP(PSTR("+++"));
    9482:	8c e8       	ldi	r24, 0x8C	; 140
    9484:	92 e0       	ldi	r25, 0x02	; 2
    9486:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
	while(counter++ < 5) WaitUs(65535);
    948a:	c6 e0       	ldi	r28, 0x06	; 6
    948c:	c1 50       	subi	r28, 0x01	; 1
    948e:	29 f0       	breq	.+10     	; 0x949a <disablePassthroughMode+0x1a>
    9490:	8f ef       	ldi	r24, 0xFF	; 255
    9492:	9f ef       	ldi	r25, 0xFF	; 255
    9494:	0e 94 0e 3a 	call	0x741c	; 0x741c <WaitUs>
    9498:	f9 cf       	rjmp	.-14     	; 0x948c <disablePassthroughMode+0xc>
	InitUartTxBuffer();
    949a:	0e 94 06 3c 	call	0x780c	; 0x780c <InitUartTxBuffer>
	InitUartRxBuffer();
    949e:	0e 94 ed 3b 	call	0x77da	; 0x77da <InitUartRxBuffer>
	if (wifiRequestPT(PSTR("AT+CIPMODE=0\r\n"),PSTR("OK\r\n"), 2*60) != WIFI_OK) return WIFI_TIMEOUT;
    94a2:	48 e7       	ldi	r20, 0x78	; 120
    94a4:	50 e0       	ldi	r21, 0x00	; 0
    94a6:	67 e8       	ldi	r22, 0x87	; 135
    94a8:	72 e0       	ldi	r23, 0x02	; 2
    94aa:	88 e7       	ldi	r24, 0x78	; 120
    94ac:	92 e0       	ldi	r25, 0x02	; 2
    94ae:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <wifiRequestPT>
    94b2:	81 11       	cpse	r24, r1
    94b4:	0d c0       	rjmp	.+26     	; 0x94d0 <disablePassthroughMode+0x50>
	if (wifiRequestPT(PSTR("AT+CIPCLOSE\r\n"),PSTR("OK\r\n"), 2*60) != WIFI_OK) return WIFI_TIMEOUT;
    94b6:	48 e7       	ldi	r20, 0x78	; 120
    94b8:	50 e0       	ldi	r21, 0x00	; 0
    94ba:	63 e7       	ldi	r22, 0x73	; 115
    94bc:	72 e0       	ldi	r23, 0x02	; 2
    94be:	85 e6       	ldi	r24, 0x65	; 101
    94c0:	92 e0       	ldi	r25, 0x02	; 2
    94c2:	0e 94 d2 49 	call	0x93a4	; 0x93a4 <wifiRequestPT>
    94c6:	91 e0       	ldi	r25, 0x01	; 1
    94c8:	81 11       	cpse	r24, r1
    94ca:	03 c0       	rjmp	.+6      	; 0x94d2 <disablePassthroughMode+0x52>
    94cc:	90 e0       	ldi	r25, 0x00	; 0
    94ce:	01 c0       	rjmp	.+2      	; 0x94d2 <disablePassthroughMode+0x52>
	u8 counter = 0;
	wifiSendP(PSTR("+++"));
	while(counter++ < 5) WaitUs(65535);
	InitUartTxBuffer();
	InitUartRxBuffer();
	if (wifiRequestPT(PSTR("AT+CIPMODE=0\r\n"),PSTR("OK\r\n"), 2*60) != WIFI_OK) return WIFI_TIMEOUT;
    94d0:	91 e0       	ldi	r25, 0x01	; 1
	if (wifiRequestPT(PSTR("AT+CIPCLOSE\r\n"),PSTR("OK\r\n"), 2*60) != WIFI_OK) return WIFI_TIMEOUT;
	return WIFI_OK;
}
    94d2:	89 2f       	mov	r24, r25
    94d4:	cf 91       	pop	r28
    94d6:	08 95       	ret

000094d8 <activateNet>:

u8 activateNet() {
	disablePassthroughMode();
    94d8:	0e 94 40 4a 	call	0x9480	; 0x9480 <disablePassthroughMode>
	InitUartTxBuffer();
    94dc:	0e 94 06 3c 	call	0x780c	; 0x780c <InitUartTxBuffer>
	InitUartRxBuffer();
    94e0:	0e 94 ed 3b 	call	0x77da	; 0x77da <InitUartRxBuffer>
	return initWifi();
    94e4:	0c 94 f1 49 	jmp	0x93e2	; 0x93e2 <initWifi>

000094e8 <sendNetMessage>:
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSend((char *) msg);
    94e8:	0c 94 04 49 	jmp	0x9208	; 0x9208 <wifiSend>

000094ec <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable(msg, sizeof(msg));
    94ec:	62 e0       	ldi	r22, 0x02	; 2
    94ee:	0c 94 18 49 	jmp	0x9230	; 0x9230 <wifiGetIfAvailable>

000094f2 <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    94f2:	ef 92       	push	r14
    94f4:	ff 92       	push	r15
    94f6:	0f 93       	push	r16
    94f8:	1f 93       	push	r17
    94fa:	cf 93       	push	r28
    94fc:	df 93       	push	r29
    94fe:	cd b7       	in	r28, 0x3d	; 61
    9500:	de b7       	in	r29, 0x3e	; 62
    9502:	c0 54       	subi	r28, 0x40	; 64
    9504:	d1 09       	sbc	r29, r1
    9506:	0f b6       	in	r0, 0x3f	; 63
    9508:	f8 94       	cli
    950a:	de bf       	out	0x3e, r29	; 62
    950c:	0f be       	out	0x3f, r0	; 63
    950e:	cd bf       	out	0x3d, r28	; 61
    9510:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9512:	60 e6       	ldi	r22, 0x60	; 96
    9514:	72 e0       	ldi	r23, 0x02	; 2
    9516:	8e e4       	ldi	r24, 0x4E	; 78
    9518:	92 e0       	ldi	r25, 0x02	; 2
    951a:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    951e:	81 11       	cpse	r24, r1
    9520:	4a c0       	rjmp	.+148    	; 0x95b6 <hostNetGame+0xc4>
	// Disable DHCP...
	if (wifiRequestP(PSTR("AT+CWDHCP_CUR=0,0\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9522:	69 e4       	ldi	r22, 0x49	; 73
    9524:	72 e0       	ldi	r23, 0x02	; 2
    9526:	85 e3       	ldi	r24, 0x35	; 53
    9528:	92 e0       	ldi	r25, 0x02	; 2
    952a:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    952e:	81 11       	cpse	r24, r1
    9530:	42 c0       	rjmp	.+132    	; 0x95b6 <hostNetGame+0xc4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9532:	60 e3       	ldi	r22, 0x30	; 48
    9534:	72 e0       	ldi	r23, 0x02	; 2
    9536:	83 e1       	ldi	r24, 0x13	; 19
    9538:	92 e0       	ldi	r25, 0x02	; 2
    953a:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    953e:	81 11       	cpse	r24, r1
    9540:	3a c0       	rjmp	.+116    	; 0x95b6 <hostNetGame+0xc4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    9542:	80 e0       	ldi	r24, 0x00	; 0
    9544:	92 e0       	ldi	r25, 0x02	; 2
    9546:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    954a:	ce 01       	movw	r24, r28
    954c:	01 96       	adiw	r24, 0x01	; 1
    954e:	7c 01       	movw	r14, r24
    9550:	bc 01       	movw	r22, r24
    9552:	8b ef       	ldi	r24, 0xFB	; 251
    9554:	91 e0       	ldi	r25, 0x01	; 1
    9556:	0e 94 3f 49 	call	0x927e	; 0x927e <wifiGetPB>
    955a:	81 30       	cpi	r24, 0x01	; 1
    955c:	91 f0       	breq	.+36     	; 0x9582 <hostNetGame+0x90>
		ssid[0] = 'T';
    955e:	84 e5       	ldi	r24, 0x54	; 84
    9560:	f8 01       	movw	r30, r16
    9562:	80 83       	st	Z, r24
		ssid[1] = 'F';
    9564:	86 e4       	ldi	r24, 0x46	; 70
    9566:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9568:	8c a5       	ldd	r24, Y+44	; 0x2c
    956a:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    956c:	8d a5       	ldd	r24, Y+45	; 0x2d
    956e:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9570:	8f a5       	ldd	r24, Y+47	; 0x2f
    9572:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    9574:	88 a9       	ldd	r24, Y+48	; 0x30
    9576:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9578:	8a a9       	ldd	r24, Y+50	; 0x32
    957a:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    957c:	8b a9       	ldd	r24, Y+51	; 0x33
    957e:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    9580:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    9582:	c8 01       	movw	r24, r16
    9584:	0e 94 ef 6f 	call	0xdfde	; 0xdfde <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    9588:	9f 93       	push	r25
    958a:	8f 93       	push	r24
    958c:	83 e0       	ldi	r24, 0x03	; 3
    958e:	91 e0       	ldi	r25, 0x01	; 1
    9590:	9f 93       	push	r25
    9592:	8f 93       	push	r24
    9594:	ff 92       	push	r15
    9596:	ef 92       	push	r14
    9598:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    959c:	66 ef       	ldi	r22, 0xF6	; 246
    959e:	71 e0       	ldi	r23, 0x01	; 1
    95a0:	c7 01       	movw	r24, r14
    95a2:	0e 94 c0 49 	call	0x9380	; 0x9380 <wifiRequest>
    95a6:	0f 90       	pop	r0
    95a8:	0f 90       	pop	r0
    95aa:	0f 90       	pop	r0
    95ac:	0f 90       	pop	r0
    95ae:	0f 90       	pop	r0
    95b0:	0f 90       	pop	r0
    95b2:	88 23       	and	r24, r24
    95b4:	11 f0       	breq	.+4      	; 0x95ba <hostNetGame+0xc8>
    95b6:	11 e0       	ldi	r17, 0x01	; 1
    95b8:	15 c0       	rjmp	.+42     	; 0x95e4 <hostNetGame+0xf2>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    95ba:	61 ef       	ldi	r22, 0xF1	; 241
    95bc:	71 e0       	ldi	r23, 0x01	; 1
    95be:	83 ec       	ldi	r24, 0xC3	; 195
    95c0:	91 e0       	ldi	r25, 0x01	; 1
    95c2:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    95c6:	81 11       	cpse	r24, r1
    95c8:	f6 cf       	rjmp	.-20     	; 0x95b6 <hostNetGame+0xc4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    95ca:	6e eb       	ldi	r22, 0xBE	; 190
    95cc:	71 e0       	ldi	r23, 0x01	; 1
    95ce:	8f ea       	ldi	r24, 0xAF	; 175
    95d0:	91 e0       	ldi	r25, 0x01	; 1
    95d2:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    95d6:	18 2f       	mov	r17, r24
    95d8:	81 11       	cpse	r24, r1
    95da:	ed cf       	rjmp	.-38     	; 0x95b6 <hostNetGame+0xc4>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    95dc:	82 ea       	ldi	r24, 0xA2	; 162
    95de:	91 e0       	ldi	r25, 0x01	; 1
    95e0:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
	return WIFI_OK;
}
    95e4:	81 2f       	mov	r24, r17
    95e6:	c0 5c       	subi	r28, 0xC0	; 192
    95e8:	df 4f       	sbci	r29, 0xFF	; 255
    95ea:	0f b6       	in	r0, 0x3f	; 63
    95ec:	f8 94       	cli
    95ee:	de bf       	out	0x3e, r29	; 62
    95f0:	0f be       	out	0x3f, r0	; 63
    95f2:	cd bf       	out	0x3d, r28	; 61
    95f4:	df 91       	pop	r29
    95f6:	cf 91       	pop	r28
    95f8:	1f 91       	pop	r17
    95fa:	0f 91       	pop	r16
    95fc:	ff 90       	pop	r15
    95fe:	ef 90       	pop	r14
    9600:	08 95       	ret

00009602 <joinNetGame>:

u8 joinNetGame(const char* ssid) {
    9602:	0f 93       	push	r16
    9604:	1f 93       	push	r17
    9606:	cf 93       	push	r28
    9608:	df 93       	push	r29
    960a:	cd b7       	in	r28, 0x3d	; 61
    960c:	de b7       	in	r29, 0x3e	; 62
    960e:	c0 54       	subi	r28, 0x40	; 64
    9610:	d1 09       	sbc	r29, r1
    9612:	0f b6       	in	r0, 0x3f	; 63
    9614:	f8 94       	cli
    9616:	de bf       	out	0x3e, r29	; 62
    9618:	0f be       	out	0x3f, r0	; 63
    961a:	cd bf       	out	0x3d, r28	; 61
	char buf[64];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    961c:	9f 93       	push	r25
    961e:	8f 93       	push	r24
    9620:	89 e2       	ldi	r24, 0x29	; 41
    9622:	91 e0       	ldi	r25, 0x01	; 1
    9624:	9f 93       	push	r25
    9626:	8f 93       	push	r24
    9628:	8e 01       	movw	r16, r28
    962a:	0f 5f       	subi	r16, 0xFF	; 255
    962c:	1f 4f       	sbci	r17, 0xFF	; 255
    962e:	1f 93       	push	r17
    9630:	0f 93       	push	r16
    9632:	0e 94 f9 6f 	call	0xdff2	; 0xdff2 <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9636:	6d e9       	ldi	r22, 0x9D	; 157
    9638:	71 e0       	ldi	r23, 0x01	; 1
    963a:	8b e8       	ldi	r24, 0x8B	; 139
    963c:	91 e0       	ldi	r25, 0x01	; 1
    963e:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    9642:	0f 90       	pop	r0
    9644:	0f 90       	pop	r0
    9646:	0f 90       	pop	r0
    9648:	0f 90       	pop	r0
    964a:	0f 90       	pop	r0
    964c:	0f 90       	pop	r0
    964e:	88 23       	and	r24, r24
    9650:	11 f0       	breq	.+4      	; 0x9656 <joinNetGame+0x54>
    9652:	11 e0       	ldi	r17, 0x01	; 1
    9654:	34 c0       	rjmp	.+104    	; 0x96be <joinNetGame+0xbc>
	// Disable DHCP...
	if (wifiRequestP(PSTR("AT+CWDHCP_CUR=1,0\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9656:	66 e8       	ldi	r22, 0x86	; 134
    9658:	71 e0       	ldi	r23, 0x01	; 1
    965a:	82 e7       	ldi	r24, 0x72	; 114
    965c:	91 e0       	ldi	r25, 0x01	; 1
    965e:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    9662:	81 11       	cpse	r24, r1
    9664:	f6 cf       	rjmp	.-20     	; 0x9652 <joinNetGame+0x50>
	// List access points...
	if (wifiRequestP(PSTR("AT+CWLAP\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9666:	6d e6       	ldi	r22, 0x6D	; 109
    9668:	71 e0       	ldi	r23, 0x01	; 1
    966a:	82 e6       	ldi	r24, 0x62	; 98
    966c:	91 e0       	ldi	r25, 0x01	; 1
    966e:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    9672:	81 11       	cpse	r24, r1
    9674:	ee cf       	rjmp	.-36     	; 0x9652 <joinNetGame+0x50>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9676:	6d e5       	ldi	r22, 0x5D	; 93
    9678:	71 e0       	ldi	r23, 0x01	; 1
    967a:	c8 01       	movw	r24, r16
    967c:	0e 94 c0 49 	call	0x9380	; 0x9380 <wifiRequest>
    9680:	81 11       	cpse	r24, r1
    9682:	e7 cf       	rjmp	.-50     	; 0x9652 <joinNetGame+0x50>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9684:	68 e5       	ldi	r22, 0x58	; 88
    9686:	71 e0       	ldi	r23, 0x01	; 1
    9688:	8a e3       	ldi	r24, 0x3A	; 58
    968a:	91 e0       	ldi	r25, 0x01	; 1
    968c:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    9690:	81 11       	cpse	r24, r1
    9692:	df cf       	rjmp	.-66     	; 0x9652 <joinNetGame+0x50>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9694:	65 e3       	ldi	r22, 0x35	; 53
    9696:	71 e0       	ldi	r23, 0x01	; 1
    9698:	89 e0       	ldi	r24, 0x09	; 9
    969a:	91 e0       	ldi	r25, 0x01	; 1
    969c:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    96a0:	81 11       	cpse	r24, r1
    96a2:	d7 cf       	rjmp	.-82     	; 0x9652 <joinNetGame+0x50>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    96a4:	64 e0       	ldi	r22, 0x04	; 4
    96a6:	71 e0       	ldi	r23, 0x01	; 1
    96a8:	85 ef       	ldi	r24, 0xF5	; 245
    96aa:	90 e0       	ldi	r25, 0x00	; 0
    96ac:	0e 94 ae 49 	call	0x935c	; 0x935c <wifiRequestP>
    96b0:	18 2f       	mov	r17, r24
    96b2:	81 11       	cpse	r24, r1
    96b4:	ce cf       	rjmp	.-100    	; 0x9652 <joinNetGame+0x50>
	wifiSendP(PSTR("AT+CIPSEND\r\n"));
    96b6:	88 ee       	ldi	r24, 0xE8	; 232
    96b8:	90 e0       	ldi	r25, 0x00	; 0
    96ba:	0e 94 ee 48 	call	0x91dc	; 0x91dc <wifiSendP>
	return WIFI_OK;
}
    96be:	81 2f       	mov	r24, r17
    96c0:	c0 5c       	subi	r28, 0xC0	; 192
    96c2:	df 4f       	sbci	r29, 0xFF	; 255
    96c4:	0f b6       	in	r0, 0x3f	; 63
    96c6:	f8 94       	cli
    96c8:	de bf       	out	0x3e, r29	; 62
    96ca:	0f be       	out	0x3f, r0	; 63
    96cc:	cd bf       	out	0x3d, r28	; 61
    96ce:	df 91       	pop	r29
    96d0:	cf 91       	pop	r28
    96d2:	1f 91       	pop	r17
    96d4:	0f 91       	pop	r16
    96d6:	08 95       	ret

000096d8 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    96d8:	fc 01       	movw	r30, r24
	anim->looped = 0;
    96da:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    96dc:	93 81       	ldd	r25, Z+3	; 0x03
    96de:	9f 5f       	subi	r25, 0xFF	; 255
    96e0:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    96e2:	22 81       	ldd	r18, Z+2	; 0x02
    96e4:	80 81       	ld	r24, Z
    96e6:	92 17       	cp	r25, r18
    96e8:	38 f4       	brcc	.+14     	; 0x96f8 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    96ea:	e8 0f       	add	r30, r24
    96ec:	f1 1d       	adc	r31, r1
    96ee:	e8 0f       	add	r30, r24
    96f0:	f1 1d       	adc	r31, r1
    96f2:	86 81       	ldd	r24, Z+6	; 0x06
    96f4:	97 81       	ldd	r25, Z+7	; 0x07
    96f6:	08 95       	ret
	}
	anim->frame_count = 0;
    96f8:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    96fa:	90 e0       	ldi	r25, 0x00	; 0
    96fc:	01 96       	adiw	r24, 0x01	; 1
    96fe:	61 81       	ldd	r22, Z+1	; 0x01
    9700:	70 e0       	ldi	r23, 0x00	; 0
    9702:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    9706:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9708:	81 11       	cpse	r24, r1
    970a:	02 c0       	rjmp	.+4      	; 0x9710 <LBGetNextFrame+0x38>
    970c:	21 e0       	ldi	r18, 0x01	; 1
    970e:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9710:	99 27       	eor	r25, r25
    9712:	03 96       	adiw	r24, 0x03	; 3
    9714:	88 0f       	add	r24, r24
    9716:	99 1f       	adc	r25, r25
    9718:	e8 0f       	add	r30, r24
    971a:	f9 1f       	adc	r31, r25
    971c:	80 81       	ld	r24, Z
    971e:	91 81       	ldd	r25, Z+1	; 0x01
}
    9720:	08 95       	ret

00009722 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    9722:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9724:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9726:	93 81       	ldd	r25, Z+3	; 0x03
    9728:	9f 5f       	subi	r25, 0xFF	; 255
    972a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    972c:	22 81       	ldd	r18, Z+2	; 0x02
    972e:	80 81       	ld	r24, Z
    9730:	92 17       	cp	r25, r18
    9732:	e0 f0       	brcs	.+56     	; 0x976c <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    9734:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    9736:	95 81       	ldd	r25, Z+5	; 0x05
    9738:	99 23       	and	r25, r25
    973a:	49 f0       	breq	.+18     	; 0x974e <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    973c:	81 50       	subi	r24, 0x01	; 1
    973e:	10 f0       	brcs	.+4      	; 0x9744 <LBGetNextFrameReverse+0x22>
    9740:	80 83       	st	Z, r24
    9742:	13 c0       	rjmp	.+38     	; 0x976a <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    9744:	10 82       	st	Z, r1
			anim->looped = 1;
    9746:	81 e0       	ldi	r24, 0x01	; 1
    9748:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    974a:	15 82       	std	Z+5, r1	; 0x05
    974c:	0e c0       	rjmp	.+28     	; 0x976a <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    974e:	21 81       	ldd	r18, Z+1	; 0x01
    9750:	90 e0       	ldi	r25, 0x00	; 0
    9752:	01 96       	adiw	r24, 0x01	; 1
    9754:	62 2f       	mov	r22, r18
    9756:	70 e0       	ldi	r23, 0x00	; 0
    9758:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    975c:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    975e:	81 11       	cpse	r24, r1
    9760:	04 c0       	rjmp	.+8      	; 0x976a <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    9762:	81 e0       	ldi	r24, 0x01	; 1
    9764:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    9766:	21 50       	subi	r18, 0x01	; 1
    9768:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    976a:	80 81       	ld	r24, Z
    976c:	e8 0f       	add	r30, r24
    976e:	f1 1d       	adc	r31, r1
    9770:	e8 0f       	add	r30, r24
    9772:	f1 1d       	adc	r31, r1
    9774:	86 81       	ldd	r24, Z+6	; 0x06
    9776:	97 81       	ldd	r25, Z+7	; 0x07
}
    9778:	08 95       	ret

0000977a <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    977a:	0f 93       	push	r16
    977c:	1f 93       	push	r17
    977e:	cf 93       	push	r28
    9780:	df 93       	push	r29
    9782:	1f 92       	push	r1
    9784:	cd b7       	in	r28, 0x3d	; 61
    9786:	de b7       	in	r29, 0x3e	; 62
    9788:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    978a:	86 2f       	mov	r24, r22
    978c:	69 83       	std	Y+1, r22	; 0x01
    978e:	0e 94 02 3a 	call	0x7404	; 0x7404 <ReadJoypad>
    9792:	d8 01       	movw	r26, r16
    9794:	15 96       	adiw	r26, 0x05	; 5
    9796:	9c 93       	st	X, r25
    9798:	8e 93       	st	-X, r24
    979a:	14 97       	sbiw	r26, 0x04	; 4
    979c:	69 81       	ldd	r22, Y+1	; 0x01
    979e:	e6 2f       	mov	r30, r22
    97a0:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    97a2:	00 97       	sbiw	r24, 0x00	; 0
    97a4:	51 f0       	breq	.+20     	; 0x97ba <LBGetJoyPadState+0x40>
    97a6:	df 01       	movw	r26, r30
    97a8:	aa 0f       	add	r26, r26
    97aa:	bb 1f       	adc	r27, r27
    97ac:	a8 59       	subi	r26, 0x98	; 152
    97ae:	b5 4f       	sbci	r27, 0xF5	; 245
    97b0:	2d 91       	ld	r18, X+
    97b2:	3c 91       	ld	r19, X
    97b4:	82 17       	cp	r24, r18
    97b6:	93 07       	cpc	r25, r19
    97b8:	21 f0       	breq	.+8      	; 0x97c2 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    97ba:	d8 01       	movw	r26, r16
    97bc:	16 96       	adiw	r26, 0x06	; 6
    97be:	1c 92       	st	X, r1
    97c0:	07 c0       	rjmp	.+14     	; 0x97d0 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    97c2:	d8 01       	movw	r26, r16
    97c4:	16 96       	adiw	r26, 0x06	; 6
    97c6:	2c 91       	ld	r18, X
    97c8:	16 97       	sbiw	r26, 0x06	; 6
    97ca:	2f 5f       	subi	r18, 0xFF	; 255
    97cc:	16 96       	adiw	r26, 0x06	; 6
    97ce:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    97d0:	ee 0f       	add	r30, r30
    97d2:	ff 1f       	adc	r31, r31
    97d4:	e8 59       	subi	r30, 0x98	; 152
    97d6:	f5 4f       	sbci	r31, 0xF5	; 245
    97d8:	20 81       	ld	r18, Z
    97da:	31 81       	ldd	r19, Z+1	; 0x01
    97dc:	a9 01       	movw	r20, r18
    97de:	40 95       	com	r20
    97e0:	50 95       	com	r21
    97e2:	48 23       	and	r20, r24
    97e4:	59 23       	and	r21, r25
    97e6:	d8 01       	movw	r26, r16
    97e8:	11 96       	adiw	r26, 0x01	; 1
    97ea:	5c 93       	st	X, r21
    97ec:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    97ee:	ac 01       	movw	r20, r24
    97f0:	40 95       	com	r20
    97f2:	50 95       	com	r21
    97f4:	24 23       	and	r18, r20
    97f6:	35 23       	and	r19, r21
    97f8:	13 96       	adiw	r26, 0x03	; 3
    97fa:	3c 93       	st	X, r19
    97fc:	2e 93       	st	-X, r18
    97fe:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9800:	91 83       	std	Z+1, r25	; 0x01
    9802:	80 83       	st	Z, r24
}
    9804:	0f 90       	pop	r0
    9806:	df 91       	pop	r29
    9808:	cf 91       	pop	r28
    980a:	1f 91       	pop	r17
    980c:	0f 91       	pop	r16
    980e:	08 95       	ret

00009810 <LBGetJoyPadStateNet>:

void LBGetJoyPadStateNet(JoyPadState* p, unsigned char index, NetMessage* netMessage)
/*
 * Get the current joy pad button state for index controller
 */
{
    9810:	cf 93       	push	r28
    9812:	df 93       	push	r29
    9814:	dc 01       	movw	r26, r24
	p->held = netMessage->input;
    9816:	fa 01       	movw	r30, r20
    9818:	21 81       	ldd	r18, Z+1	; 0x01
    981a:	32 81       	ldd	r19, Z+2	; 0x02
    981c:	15 96       	adiw	r26, 0x05	; 5
    981e:	3c 93       	st	X, r19
    9820:	2e 93       	st	-X, r18
    9822:	14 97       	sbiw	r26, 0x04	; 4
    9824:	e6 2f       	mov	r30, r22
    9826:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9828:	21 15       	cp	r18, r1
    982a:	31 05       	cpc	r19, r1
    982c:	51 f0       	breq	.+20     	; 0x9842 <LBGetJoyPadStateNet+0x32>
    982e:	ef 01       	movw	r28, r30
    9830:	cc 0f       	add	r28, r28
    9832:	dd 1f       	adc	r29, r29
    9834:	c8 59       	subi	r28, 0x98	; 152
    9836:	d5 4f       	sbci	r29, 0xF5	; 245
    9838:	88 81       	ld	r24, Y
    983a:	99 81       	ldd	r25, Y+1	; 0x01
    983c:	28 17       	cp	r18, r24
    983e:	39 07       	cpc	r19, r25
    9840:	21 f0       	breq	.+8      	; 0x984a <LBGetJoyPadStateNet+0x3a>
	    p->held_cycles = 0;
    9842:	16 96       	adiw	r26, 0x06	; 6
    9844:	1c 92       	st	X, r1
    9846:	16 97       	sbiw	r26, 0x06	; 6
    9848:	07 c0       	rjmp	.+14     	; 0x9858 <LBGetJoyPadStateNet+0x48>
	else
	    p->held_cycles += 1;
    984a:	16 96       	adiw	r26, 0x06	; 6
    984c:	8c 91       	ld	r24, X
    984e:	16 97       	sbiw	r26, 0x06	; 6
    9850:	8f 5f       	subi	r24, 0xFF	; 255
    9852:	16 96       	adiw	r26, 0x06	; 6
    9854:	8c 93       	st	X, r24
    9856:	16 97       	sbiw	r26, 0x06	; 6

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9858:	ee 0f       	add	r30, r30
    985a:	ff 1f       	adc	r31, r31
    985c:	e8 59       	subi	r30, 0x98	; 152
    985e:	f5 4f       	sbci	r31, 0xF5	; 245
    9860:	60 81       	ld	r22, Z
    9862:	71 81       	ldd	r23, Z+1	; 0x01
    9864:	ab 01       	movw	r20, r22
    9866:	40 95       	com	r20
    9868:	50 95       	com	r21
    986a:	42 23       	and	r20, r18
    986c:	53 23       	and	r21, r19
    986e:	11 96       	adiw	r26, 0x01	; 1
    9870:	5c 93       	st	X, r21
    9872:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9874:	c9 01       	movw	r24, r18
    9876:	80 95       	com	r24
    9878:	90 95       	com	r25
    987a:	86 23       	and	r24, r22
    987c:	97 23       	and	r25, r23
    987e:	13 96       	adiw	r26, 0x03	; 3
    9880:	9c 93       	st	X, r25
    9882:	8e 93       	st	-X, r24
    9884:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9886:	31 83       	std	Z+1, r19	; 0x01
    9888:	20 83       	st	Z, r18
}
    988a:	df 91       	pop	r29
    988c:	cf 91       	pop	r28
    988e:	08 95       	ret

00009890 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    9890:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    9892:	fb 01       	movw	r30, r22
    9894:	2e 2f       	mov	r18, r30
    9896:	23 1b       	sub	r18, r19
    9898:	24 17       	cp	r18, r20
    989a:	28 f4       	brcc	.+10     	; 0x98a6 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    989c:	21 91       	ld	r18, Z+
    989e:	dc 01       	movw	r26, r24
    98a0:	2d 93       	st	X+, r18
    98a2:	cd 01       	movw	r24, r26
    98a4:	f7 cf       	rjmp	.-18     	; 0x9894 <LBCopyChars+0x4>
	}
}
    98a6:	08 95       	ret

000098a8 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    98a8:	af 92       	push	r10
    98aa:	bf 92       	push	r11
    98ac:	cf 92       	push	r12
    98ae:	df 92       	push	r13
    98b0:	ef 92       	push	r14
    98b2:	ff 92       	push	r15
    98b4:	0f 93       	push	r16
    98b6:	1f 93       	push	r17
    98b8:	cf 93       	push	r28
    98ba:	df 93       	push	r29
    98bc:	1f 92       	push	r1
    98be:	cd b7       	in	r28, 0x3d	; 61
    98c0:	de b7       	in	r29, 0x3e	; 62
    98c2:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    98c4:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    98c6:	c6 2e       	mov	r12, r22
    98c8:	d1 2c       	mov	r13, r1
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	5c 01       	movw	r10, r24
    98ce:	a4 1a       	sub	r10, r20
    98d0:	b5 0a       	sbc	r11, r21
    98d2:	80 2f       	mov	r24, r16
    98d4:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    98d6:	82 17       	cp	r24, r18
    98d8:	60 f4       	brcc	.+24     	; 0x98f2 <LBPrintStr+0x4a>
    98da:	c5 01       	movw	r24, r10
    98dc:	80 0f       	add	r24, r16
    98de:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    98e0:	f8 01       	movw	r30, r16
    98e2:	41 91       	ld	r20, Z+
    98e4:	8f 01       	movw	r16, r30
    98e6:	b6 01       	movw	r22, r12
    98e8:	29 83       	std	Y+1, r18	; 0x01
    98ea:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
    98ee:	29 81       	ldd	r18, Y+1	; 0x01
    98f0:	f0 cf       	rjmp	.-32     	; 0x98d2 <LBPrintStr+0x2a>
	}
}
    98f2:	0f 90       	pop	r0
    98f4:	df 91       	pop	r29
    98f6:	cf 91       	pop	r28
    98f8:	1f 91       	pop	r17
    98fa:	0f 91       	pop	r16
    98fc:	ff 90       	pop	r15
    98fe:	ef 90       	pop	r14
    9900:	df 90       	pop	r13
    9902:	cf 90       	pop	r12
    9904:	bf 90       	pop	r11
    9906:	af 90       	pop	r10
    9908:	08 95       	ret

0000990a <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    990a:	af 92       	push	r10
    990c:	cf 92       	push	r12
    990e:	ef 92       	push	r14
    9910:	ff 92       	push	r15
    9912:	0f 93       	push	r16
    9914:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9916:	70 e0       	ldi	r23, 0x00	; 0
    9918:	f1 2c       	mov	r15, r1
    991a:	fb 01       	movw	r30, r22
    991c:	e2 0f       	add	r30, r18
    991e:	f1 1d       	adc	r31, r1
    9920:	ee 16       	cp	r14, r30
    9922:	ff 06       	cpc	r15, r31
    9924:	a4 f4       	brge	.+40     	; 0x994e <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9926:	ea 0c       	add	r14, r10
    9928:	f1 1c       	adc	r15, r1
    992a:	6e 15       	cp	r22, r14
    992c:	7f 05       	cpc	r23, r15
    992e:	7c f4       	brge	.+30     	; 0x994e <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9930:	28 2f       	mov	r18, r24
    9932:	30 e0       	ldi	r19, 0x00	; 0
    9934:	10 e0       	ldi	r17, 0x00	; 0
    9936:	c9 01       	movw	r24, r18
    9938:	84 0f       	add	r24, r20
    993a:	91 1d       	adc	r25, r1
    993c:	08 17       	cp	r16, r24
    993e:	19 07       	cpc	r17, r25
    9940:	34 f4       	brge	.+12     	; 0x994e <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9942:	0c 0d       	add	r16, r12
    9944:	11 1d       	adc	r17, r1
    9946:	81 e0       	ldi	r24, 0x01	; 1
    9948:	20 17       	cp	r18, r16
    994a:	31 07       	cpc	r19, r17
    994c:	0c f0       	brlt	.+2      	; 0x9950 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    994e:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9950:	1f 91       	pop	r17
    9952:	0f 91       	pop	r16
    9954:	ff 90       	pop	r15
    9956:	ef 90       	pop	r14
    9958:	cf 90       	pop	r12
    995a:	af 90       	pop	r10
    995c:	08 95       	ret

0000995e <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    995e:	2f 92       	push	r2
    9960:	3f 92       	push	r3
    9962:	4f 92       	push	r4
    9964:	5f 92       	push	r5
    9966:	6f 92       	push	r6
    9968:	7f 92       	push	r7
    996a:	8f 92       	push	r8
    996c:	9f 92       	push	r9
    996e:	af 92       	push	r10
    9970:	bf 92       	push	r11
    9972:	cf 92       	push	r12
    9974:	df 92       	push	r13
    9976:	ef 92       	push	r14
    9978:	ff 92       	push	r15
    997a:	0f 93       	push	r16
    997c:	1f 93       	push	r17
    997e:	cf 93       	push	r28
    9980:	df 93       	push	r29
    9982:	00 d0       	rcall	.+0      	; 0x9984 <LBLineIntersect+0x26>
    9984:	00 d0       	rcall	.+0      	; 0x9986 <LBLineIntersect+0x28>
    9986:	cd b7       	in	r28, 0x3d	; 61
    9988:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    998a:	f1 2c       	mov	r15, r1
    998c:	8a 2c       	mov	r8, r10
    998e:	91 2c       	mov	r9, r1
    9990:	8e 18       	sub	r8, r14
    9992:	9f 08       	sbc	r9, r15
    9994:	a8 2e       	mov	r10, r24
    9996:	b1 2c       	mov	r11, r1
    9998:	24 2e       	mov	r2, r20
    999a:	31 2c       	mov	r3, r1
    999c:	2a 18       	sub	r2, r10
    999e:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    99a0:	10 e0       	ldi	r17, 0x00	; 0
    99a2:	d1 2c       	mov	r13, r1
    99a4:	c0 1a       	sub	r12, r16
    99a6:	d1 0a       	sbc	r13, r17
    99a8:	46 2f       	mov	r20, r22
    99aa:	50 e0       	ldi	r21, 0x00	; 0
    99ac:	5c 83       	std	Y+4, r21	; 0x04
    99ae:	4b 83       	std	Y+3, r20	; 0x03
    99b0:	82 2f       	mov	r24, r18
    99b2:	90 e0       	ldi	r25, 0x00	; 0
    99b4:	9a 83       	std	Y+2, r25	; 0x02
    99b6:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    99b8:	82 9c       	mul	r8, r2
    99ba:	90 01       	movw	r18, r0
    99bc:	83 9c       	mul	r8, r3
    99be:	30 0d       	add	r19, r0
    99c0:	92 9c       	mul	r9, r2
    99c2:	30 0d       	add	r19, r0
    99c4:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    99c6:	ca 01       	movw	r24, r20
    99c8:	e9 81       	ldd	r30, Y+1	; 0x01
    99ca:	fa 81       	ldd	r31, Y+2	; 0x02
    99cc:	8e 1b       	sub	r24, r30
    99ce:	9f 0b       	sbc	r25, r31
    99d0:	c8 9e       	mul	r12, r24
    99d2:	b0 01       	movw	r22, r0
    99d4:	c9 9e       	mul	r12, r25
    99d6:	70 0d       	add	r23, r0
    99d8:	d8 9e       	mul	r13, r24
    99da:	70 0d       	add	r23, r0
    99dc:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    99de:	62 0f       	add	r22, r18
    99e0:	73 1f       	adc	r23, r19
    99e2:	88 27       	eor	r24, r24
    99e4:	77 fd       	sbrc	r23, 7
    99e6:	80 95       	com	r24
    99e8:	98 2f       	mov	r25, r24
    99ea:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    99ee:	2b 01       	movw	r4, r22
    99f0:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    99f2:	20 e0       	ldi	r18, 0x00	; 0
    99f4:	30 e0       	ldi	r19, 0x00	; 0
    99f6:	a9 01       	movw	r20, r18
    99f8:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    99fc:	88 23       	and	r24, r24
    99fe:	09 f4       	brne	.+2      	; 0x9a02 <LBLineIntersect+0xa4>
    9a00:	6c c0       	rjmp	.+216    	; 0x9ada <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a02:	4b 81       	ldd	r20, Y+3	; 0x03
    9a04:	5c 81       	ldd	r21, Y+4	; 0x04
    9a06:	4e 19       	sub	r20, r14
    9a08:	5f 09       	sbc	r21, r15
    9a0a:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a0c:	0a 19       	sub	r16, r10
    9a0e:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a10:	c4 9e       	mul	r12, r20
    9a12:	c0 01       	movw	r24, r0
    9a14:	c5 9e       	mul	r12, r21
    9a16:	90 0d       	add	r25, r0
    9a18:	d4 9e       	mul	r13, r20
    9a1a:	90 0d       	add	r25, r0
    9a1c:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a1e:	80 9e       	mul	r8, r16
    9a20:	b0 01       	movw	r22, r0
    9a22:	81 9e       	mul	r8, r17
    9a24:	70 0d       	add	r23, r0
    9a26:	90 9e       	mul	r9, r16
    9a28:	70 0d       	add	r23, r0
    9a2a:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a2c:	68 0f       	add	r22, r24
    9a2e:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9a30:	88 27       	eor	r24, r24
    9a32:	77 fd       	sbrc	r23, 7
    9a34:	80 95       	com	r24
    9a36:	98 2f       	mov	r25, r24
    9a38:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9a3c:	a3 01       	movw	r20, r6
    9a3e:	92 01       	movw	r18, r4
    9a40:	0e 94 29 6e 	call	0xdc52	; 0xdc52 <__divsf3>
    9a44:	4b 01       	movw	r8, r22
    9a46:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9a48:	20 e0       	ldi	r18, 0x00	; 0
    9a4a:	30 e0       	ldi	r19, 0x00	; 0
    9a4c:	a9 01       	movw	r20, r18
    9a4e:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    9a52:	87 fd       	sbrc	r24, 7
    9a54:	42 c0       	rjmp	.+132    	; 0x9ada <LBLineIntersect+0x17c>
    9a56:	20 e0       	ldi	r18, 0x00	; 0
    9a58:	30 e0       	ldi	r19, 0x00	; 0
    9a5a:	40 e8       	ldi	r20, 0x80	; 128
    9a5c:	5f e3       	ldi	r21, 0x3F	; 63
    9a5e:	c5 01       	movw	r24, r10
    9a60:	b4 01       	movw	r22, r8
    9a62:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    9a66:	18 16       	cp	r1, r24
    9a68:	c4 f1       	brlt	.+112    	; 0x9ada <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9a6a:	2e 9c       	mul	r2, r14
    9a6c:	b0 01       	movw	r22, r0
    9a6e:	2f 9c       	mul	r2, r15
    9a70:	70 0d       	add	r23, r0
    9a72:	3e 9c       	mul	r3, r14
    9a74:	70 0d       	add	r23, r0
    9a76:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9a78:	29 81       	ldd	r18, Y+1	; 0x01
    9a7a:	3a 81       	ldd	r19, Y+2	; 0x02
    9a7c:	8b 81       	ldd	r24, Y+3	; 0x03
    9a7e:	9c 81       	ldd	r25, Y+4	; 0x04
    9a80:	28 1b       	sub	r18, r24
    9a82:	39 0b       	sbc	r19, r25
    9a84:	20 9f       	mul	r18, r16
    9a86:	c0 01       	movw	r24, r0
    9a88:	21 9f       	mul	r18, r17
    9a8a:	90 0d       	add	r25, r0
    9a8c:	30 9f       	mul	r19, r16
    9a8e:	90 0d       	add	r25, r0
    9a90:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9a92:	68 0f       	add	r22, r24
    9a94:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9a96:	88 27       	eor	r24, r24
    9a98:	77 fd       	sbrc	r23, 7
    9a9a:	80 95       	com	r24
    9a9c:	98 2f       	mov	r25, r24
    9a9e:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9aa2:	a3 01       	movw	r20, r6
    9aa4:	92 01       	movw	r18, r4
    9aa6:	0e 94 29 6e 	call	0xdc52	; 0xdc52 <__divsf3>
    9aaa:	6b 01       	movw	r12, r22
    9aac:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9aae:	20 e0       	ldi	r18, 0x00	; 0
    9ab0:	30 e0       	ldi	r19, 0x00	; 0
    9ab2:	a9 01       	movw	r20, r18
    9ab4:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    9ab8:	87 fd       	sbrc	r24, 7
    9aba:	0f c0       	rjmp	.+30     	; 0x9ada <LBLineIntersect+0x17c>
    9abc:	11 e0       	ldi	r17, 0x01	; 1
    9abe:	20 e0       	ldi	r18, 0x00	; 0
    9ac0:	30 e0       	ldi	r19, 0x00	; 0
    9ac2:	40 e8       	ldi	r20, 0x80	; 128
    9ac4:	5f e3       	ldi	r21, 0x3F	; 63
    9ac6:	c7 01       	movw	r24, r14
    9ac8:	b6 01       	movw	r22, r12
    9aca:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    9ace:	18 16       	cp	r1, r24
    9ad0:	0c f0       	brlt	.+2      	; 0x9ad4 <LBLineIntersect+0x176>
    9ad2:	10 e0       	ldi	r17, 0x00	; 0
    9ad4:	81 e0       	ldi	r24, 0x01	; 1
    9ad6:	81 27       	eor	r24, r17
    9ad8:	01 c0       	rjmp	.+2      	; 0x9adc <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9ada:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9adc:	0f 90       	pop	r0
    9ade:	0f 90       	pop	r0
    9ae0:	0f 90       	pop	r0
    9ae2:	0f 90       	pop	r0
    9ae4:	df 91       	pop	r29
    9ae6:	cf 91       	pop	r28
    9ae8:	1f 91       	pop	r17
    9aea:	0f 91       	pop	r16
    9aec:	ff 90       	pop	r15
    9aee:	ef 90       	pop	r14
    9af0:	df 90       	pop	r13
    9af2:	cf 90       	pop	r12
    9af4:	bf 90       	pop	r11
    9af6:	af 90       	pop	r10
    9af8:	9f 90       	pop	r9
    9afa:	8f 90       	pop	r8
    9afc:	7f 90       	pop	r7
    9afe:	6f 90       	pop	r6
    9b00:	5f 90       	pop	r5
    9b02:	4f 90       	pop	r4
    9b04:	3f 90       	pop	r3
    9b06:	2f 90       	pop	r2
    9b08:	08 95       	ret

00009b0a <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9b0a:	1f 93       	push	r17
    9b0c:	cf 93       	push	r28
    9b0e:	df 93       	push	r29
    9b10:	1f 92       	push	r1
    9b12:	cd b7       	in	r28, 0x3d	; 61
    9b14:	de b7       	in	r29, 0x3e	; 62
    9b16:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    9b18:	80 e0       	ldi	r24, 0x00	; 0
    9b1a:	90 e0       	ldi	r25, 0x00	; 0
    9b1c:	69 83       	std	Y+1, r22	; 0x01
    9b1e:	0e 94 0b 3c 	call	0x7816	; 0x7816 <GetPrngNumber>
    9b22:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9b24:	69 81       	ldd	r22, Y+1	; 0x01
    9b26:	70 e0       	ldi	r23, 0x00	; 0
    9b28:	61 1b       	sub	r22, r17
    9b2a:	71 09       	sbc	r23, r1
    9b2c:	6f 5f       	subi	r22, 0xFF	; 255
    9b2e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b30:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
}
    9b34:	81 0f       	add	r24, r17
    9b36:	0f 90       	pop	r0
    9b38:	df 91       	pop	r29
    9b3a:	cf 91       	pop	r28
    9b3c:	1f 91       	pop	r17
    9b3e:	08 95       	ret

00009b40 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    9b40:	cf 93       	push	r28
    9b42:	df 93       	push	r29
    9b44:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9b46:	c0 e0       	ldi	r28, 0x00	; 0
    9b48:	cd 17       	cp	r28, r29
    9b4a:	31 f0       	breq	.+12     	; 0x9b58 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    9b4c:	8f ef       	ldi	r24, 0xFF	; 255
    9b4e:	9f ef       	ldi	r25, 0xFF	; 255
    9b50:	0e 94 0e 3a 	call	0x741c	; 0x741c <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9b54:	cf 5f       	subi	r28, 0xFF	; 255
    9b56:	f8 cf       	rjmp	.-16     	; 0x9b48 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    9b58:	df 91       	pop	r29
    9b5a:	cf 91       	pop	r28
    9b5c:	08 95       	ret

00009b5e <LBHideAllSprites>:

void LBHideAllSprites()
{
    9b5e:	e8 ea       	ldi	r30, 0xA8	; 168
    9b60:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    9b62:	80 ef       	ldi	r24, 0xF0	; 240
    9b64:	80 83       	st	Z, r24
    9b66:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    9b68:	94 e0       	ldi	r25, 0x04	; 4
    9b6a:	e0 3d       	cpi	r30, 0xD0	; 208
    9b6c:	f9 07       	cpc	r31, r25
    9b6e:	d1 f7       	brne	.-12     	; 0x9b64 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    9b70:	08 95       	ret

00009b72 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9b72:	2b e8       	ldi	r18, 0x8B	; 139
    9b74:	30 e0       	ldi	r19, 0x00	; 0
    9b76:	fc 01       	movw	r30, r24
    9b78:	21 93       	st	Z+, r18
    9b7a:	31 93       	st	Z+, r19
    9b7c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9b7e:	4e e1       	ldi	r20, 0x1E	; 30
    9b80:	50 e0       	ldi	r21, 0x00	; 0
    9b82:	6e e2       	ldi	r22, 0x2E	; 46
    9b84:	73 e0       	ldi	r23, 0x03	; 3
    9b86:	0c 94 db 6f 	jmp	0xdfb6	; 0xdfb6 <memcpy_P>

00009b8a <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9b8a:	2a e8       	ldi	r18, 0x8A	; 138
    9b8c:	30 e0       	ldi	r19, 0x00	; 0
    9b8e:	fc 01       	movw	r30, r24
    9b90:	21 93       	st	Z+, r18
    9b92:	31 93       	st	Z+, r19
    9b94:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9b96:	4e e1       	ldi	r20, 0x1E	; 30
    9b98:	50 e0       	ldi	r21, 0x00	; 0
    9b9a:	6c e4       	ldi	r22, 0x4C	; 76
    9b9c:	73 e0       	ldi	r23, 0x03	; 3
    9b9e:	0c 94 db 6f 	jmp	0xdfb6	; 0xdfb6 <memcpy_P>

00009ba2 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9ba2:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9ba4:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9ba6:	16 86       	std	Z+14, r1	; 0x0e
    9ba8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9baa:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9bac:	73 e0       	ldi	r23, 0x03	; 3
    9bae:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9bb0:	65 e0       	ldi	r22, 0x05	; 5
    9bb2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9bb4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9bb6:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9bb8:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9bba:	48 e0       	ldi	r20, 0x08	; 8
    9bbc:	5a e6       	ldi	r21, 0x6A	; 106
    9bbe:	50 87       	std	Z+8, r21	; 0x08
    9bc0:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9bc2:	25 e0       	ldi	r18, 0x05	; 5
    9bc4:	3a e6       	ldi	r19, 0x6A	; 106
    9bc6:	32 87       	std	Z+10, r19	; 0x0a
    9bc8:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9bca:	82 e0       	ldi	r24, 0x02	; 2
    9bcc:	9a e6       	ldi	r25, 0x6A	; 106
    9bce:	94 87       	std	Z+12, r25	; 0x0c
    9bd0:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9bd2:	14 8e       	std	Z+28, r1	; 0x1c
    9bd4:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9bd6:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9bd8:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9bda:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9bdc:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9bde:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9be0:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9be2:	56 8b       	std	Z+22, r21	; 0x16
    9be4:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9be6:	30 8f       	std	Z+24, r19	; 0x18
    9be8:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9bea:	92 8f       	std	Z+26, r25	; 0x1a
    9bec:	81 8f       	std	Z+25, r24	; 0x19
    9bee:	08 95       	ret

00009bf0 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9bf0:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9bf2:	15 86       	std	Z+13, r1	; 0x0d
    9bf4:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9bf6:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9bf8:	83 e0       	ldi	r24, 0x03	; 3
    9bfa:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9bfc:	8e e1       	ldi	r24, 0x1E	; 30
    9bfe:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c00:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c02:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c04:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9c06:	8e ed       	ldi	r24, 0xDE	; 222
    9c08:	99 e6       	ldi	r25, 0x69	; 105
    9c0a:	97 83       	std	Z+7, r25	; 0x07
    9c0c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9c0e:	8b ed       	ldi	r24, 0xDB	; 219
    9c10:	99 e6       	ldi	r25, 0x69	; 105
    9c12:	91 87       	std	Z+9, r25	; 0x09
    9c14:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9c16:	88 ed       	ldi	r24, 0xD8	; 216
    9c18:	99 e6       	ldi	r25, 0x69	; 105
    9c1a:	93 87       	std	Z+11, r25	; 0x0b
    9c1c:	82 87       	std	Z+10, r24	; 0x0a
    9c1e:	08 95       	ret

00009c20 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9c20:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c22:	15 86       	std	Z+13, r1	; 0x0d
    9c24:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9c26:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9c28:	82 e0       	ldi	r24, 0x02	; 2
    9c2a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9c2c:	8c e3       	ldi	r24, 0x3C	; 60
    9c2e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c30:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c32:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c34:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9c36:	8c e6       	ldi	r24, 0x6C	; 108
    9c38:	97 e6       	ldi	r25, 0x67	; 103
    9c3a:	97 83       	std	Z+7, r25	; 0x07
    9c3c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9c3e:	82 ea       	ldi	r24, 0xA2	; 162
    9c40:	98 e6       	ldi	r25, 0x68	; 104
    9c42:	91 87       	std	Z+9, r25	; 0x09
    9c44:	80 87       	std	Z+8, r24	; 0x08
    9c46:	08 95       	ret

00009c48 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9c48:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9c4a:	88 e7       	ldi	r24, 0x78	; 120
    9c4c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9c4e:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9c50:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    9c52:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    9c54:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    9c56:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9c58:	84 e0       	ldi	r24, 0x04	; 4
    9c5a:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9c5c:	66 23       	and	r22, r22
    9c5e:	11 f0       	breq	.+4      	; 0x9c64 <init_shot_state+0x1c>
    9c60:	85 e0       	ldi	r24, 0x05	; 5
    9c62:	01 c0       	rjmp	.+2      	; 0x9c66 <init_shot_state+0x1e>
    9c64:	81 e0       	ldi	r24, 0x01	; 1
    9c66:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9c68:	80 e0       	ldi	r24, 0x00	; 0
    9c6a:	90 e0       	ldi	r25, 0x00	; 0
    9c6c:	a0 e7       	ldi	r26, 0x70	; 112
    9c6e:	b3 e4       	ldi	r27, 0x43	; 67
    9c70:	83 83       	std	Z+3, r24	; 0x03
    9c72:	94 83       	std	Z+4, r25	; 0x04
    9c74:	a5 83       	std	Z+5, r26	; 0x05
    9c76:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9c78:	17 82       	std	Z+7, r1	; 0x07
    9c7a:	10 86       	std	Z+8, r1	; 0x08
    9c7c:	11 86       	std	Z+9, r1	; 0x09
    9c7e:	12 86       	std	Z+10, r1	; 0x0a
    9c80:	08 95       	ret

00009c82 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9c82:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9c84:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    9c86:	82 e0       	ldi	r24, 0x02	; 2
    9c88:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9c8a:	85 e0       	ldi	r24, 0x05	; 5
    9c8c:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9c8e:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    9c90:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    9c92:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    9c94:	61 11       	cpse	r22, r1
    9c96:	03 c0       	rjmp	.+6      	; 0x9c9e <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9c98:	86 e7       	ldi	r24, 0x76	; 118
    9c9a:	90 e3       	ldi	r25, 0x30	; 48
    9c9c:	13 c0       	rjmp	.+38     	; 0x9cc4 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9c9e:	61 30       	cpi	r22, 0x01	; 1
    9ca0:	79 f4       	brne	.+30     	; 0x9cc0 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9ca2:	83 e7       	ldi	r24, 0x73	; 115
    9ca4:	90 e3       	ldi	r25, 0x30	; 48
    9ca6:	97 8b       	std	Z+23, r25	; 0x17
    9ca8:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9caa:	80 e7       	ldi	r24, 0x70	; 112
    9cac:	90 e3       	ldi	r25, 0x30	; 48
    9cae:	91 8f       	std	Z+25, r25	; 0x19
    9cb0:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9cb2:	8d e6       	ldi	r24, 0x6D	; 109
    9cb4:	90 e3       	ldi	r25, 0x30	; 48
    9cb6:	93 a3       	std	Z+35, r25	; 0x23
    9cb8:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9cba:	8a e6       	ldi	r24, 0x6A	; 106
    9cbc:	90 e3       	ldi	r25, 0x30	; 48
    9cbe:	08 c0       	rjmp	.+16     	; 0x9cd0 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9cc0:	8e e5       	ldi	r24, 0x5E	; 94
    9cc2:	90 e3       	ldi	r25, 0x30	; 48
    9cc4:	97 8b       	std	Z+23, r25	; 0x17
    9cc6:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9cc8:	91 8f       	std	Z+25, r25	; 0x19
    9cca:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9ccc:	93 a3       	std	Z+35, r25	; 0x23
    9cce:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9cd0:	95 a3       	std	Z+37, r25	; 0x25
    9cd2:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    9cd4:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    9cd6:	82 e0       	ldi	r24, 0x02	; 2
    9cd8:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cda:	85 e0       	ldi	r24, 0x05	; 5
    9cdc:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    9cde:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    9ce0:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    9ce2:	11 a2       	std	Z+33, r1	; 0x21
    9ce4:	08 95       	ret

00009ce6 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    9ce6:	0f 93       	push	r16
    9ce8:	1f 93       	push	r17
    9cea:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9cec:	85 e0       	ldi	r24, 0x05	; 5
    9cee:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    9cf0:	83 e0       	ldi	r24, 0x03	; 3
    9cf2:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9cf4:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    9cf6:	8a e5       	ldi	r24, 0x5A	; 90
    9cf8:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9cfa:	43 83       	std	Z+3, r20	; 0x03
    9cfc:	54 83       	std	Z+4, r21	; 0x04
    9cfe:	65 83       	std	Z+5, r22	; 0x05
    9d00:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    9d02:	07 83       	std	Z+7, r16	; 0x07
    9d04:	10 87       	std	Z+8, r17	; 0x08
    9d06:	21 87       	std	Z+9, r18	; 0x09
    9d08:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9d0a:	8a ef       	ldi	r24, 0xFA	; 250
    9d0c:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    9d0e:	82 e0       	ldi	r24, 0x02	; 2
    9d10:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    9d12:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    9d14:	40 e0       	ldi	r20, 0x00	; 0
    9d16:	50 e0       	ldi	r21, 0x00	; 0
    9d18:	60 e7       	ldi	r22, 0x70	; 112
    9d1a:	73 e4       	ldi	r23, 0x43	; 67
    9d1c:	47 87       	std	Z+15, r20	; 0x0f
    9d1e:	50 8b       	std	Z+16, r21	; 0x10
    9d20:	61 8b       	std	Z+17, r22	; 0x11
    9d22:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    9d24:	13 8a       	std	Z+19, r1	; 0x13
    9d26:	14 8a       	std	Z+20, r1	; 0x14
    9d28:	15 8a       	std	Z+21, r1	; 0x15
    9d2a:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    9d2c:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    9d2e:	94 e6       	ldi	r25, 0x64	; 100
    9d30:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9d32:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9d34:	84 e0       	ldi	r24, 0x04	; 4
    9d36:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9d38:	81 e0       	ldi	r24, 0x01	; 1
    9d3a:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9d3c:	62 e0       	ldi	r22, 0x02	; 2
    9d3e:	cf 01       	movw	r24, r30
    9d40:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    9d42:	1f 91       	pop	r17
    9d44:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9d46:	0c 94 41 4e 	jmp	0x9c82	; 0x9c82 <set_shot_animations>

00009d4a <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9d4a:	0f 93       	push	r16
    9d4c:	1f 93       	push	r17
    9d4e:	cf 93       	push	r28
    9d50:	df 93       	push	r29
    9d52:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9d54:	88 e7       	ldi	r24, 0x78	; 120
    9d56:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    9d58:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    9d5a:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    9d5c:	18 82       	st	Y, r1
	p->shared.speed = 0;
    9d5e:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    9d60:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    9d62:	82 e3       	ldi	r24, 0x32	; 50
    9d64:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    9d66:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    9d68:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    9d6a:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9d6c:	fe 01       	movw	r30, r28
    9d6e:	eb 5a       	subi	r30, 0xAB	; 171
    9d70:	ff 4f       	sbci	r31, 0xFF	; 255
    9d72:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9d74:	31 96       	adiw	r30, 0x01	; 1
    9d76:	91 e0       	ldi	r25, 0x01	; 1
    9d78:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d7a:	31 96       	adiw	r30, 0x01	; 1
    9d7c:	85 e0       	ldi	r24, 0x05	; 5
    9d7e:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9d80:	31 96       	adiw	r30, 0x01	; 1
    9d82:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9d84:	31 96       	adiw	r30, 0x01	; 1
    9d86:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9d88:	31 96       	adiw	r30, 0x01	; 1
    9d8a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9d8c:	31 96       	adiw	r30, 0x01	; 1
    9d8e:	71 83       	std	Z+1, r23	; 0x01
    9d90:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9d92:	36 96       	adiw	r30, 0x06	; 6
    9d94:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9d96:	31 96       	adiw	r30, 0x01	; 1
    9d98:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d9a:	31 96       	adiw	r30, 0x01	; 1
    9d9c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9d9e:	31 96       	adiw	r30, 0x01	; 1
    9da0:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9da2:	31 96       	adiw	r30, 0x01	; 1
    9da4:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9da6:	31 96       	adiw	r30, 0x01	; 1
    9da8:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9daa:	31 96       	adiw	r30, 0x01	; 1
    9dac:	51 83       	std	Z+1, r21	; 0x01
    9dae:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9db0:	36 96       	adiw	r30, 0x06	; 6
    9db2:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9db4:	31 96       	adiw	r30, 0x01	; 1
    9db6:	93 e0       	ldi	r25, 0x03	; 3
    9db8:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9dba:	31 96       	adiw	r30, 0x01	; 1
    9dbc:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9dbe:	31 96       	adiw	r30, 0x01	; 1
    9dc0:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9dc2:	31 96       	adiw	r30, 0x01	; 1
    9dc4:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9dc6:	31 96       	adiw	r30, 0x01	; 1
    9dc8:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9dca:	31 96       	adiw	r30, 0x01	; 1
    9dcc:	85 e8       	ldi	r24, 0x85	; 133
    9dce:	90 e3       	ldi	r25, 0x30	; 48
    9dd0:	91 83       	std	Z+1, r25	; 0x01
    9dd2:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9dd4:	32 96       	adiw	r30, 0x02	; 2
    9dd6:	8f e7       	ldi	r24, 0x7F	; 127
    9dd8:	90 e3       	ldi	r25, 0x30	; 48
    9dda:	91 83       	std	Z+1, r25	; 0x01
    9ddc:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9dde:	32 96       	adiw	r30, 0x02	; 2
    9de0:	89 e7       	ldi	r24, 0x79	; 121
    9de2:	90 e3       	ldi	r25, 0x30	; 48
    9de4:	91 83       	std	Z+1, r25	; 0x01
    9de6:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9de8:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    9dea:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9dec:	8e 01       	movw	r16, r28
    9dee:	03 5d       	subi	r16, 0xD3	; 211
    9df0:	1f 4f       	sbci	r17, 0xFF	; 255
    9df2:	60 e0       	ldi	r22, 0x00	; 0
    9df4:	c8 01       	movw	r24, r16
    9df6:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9dfa:	60 e0       	ldi	r22, 0x00	; 0
    9dfc:	c8 01       	movw	r24, r16
    9dfe:	0e 94 41 4e 	call	0x9c82	; 0x9c82 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9e02:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    9e04:	1e 8e       	std	Y+30, r1	; 0x1e
    9e06:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    9e08:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    9e0a:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    9e0c:	1d a2       	std	Y+37, r1	; 0x25
    9e0e:	1e a2       	std	Y+38, r1	; 0x26
    9e10:	1f a2       	std	Y+39, r1	; 0x27
    9e12:	18 a6       	std	Y+40, r1	; 0x28
	p->old_y = 0;
    9e14:	19 a6       	std	Y+41, r1	; 0x29
    9e16:	1a a6       	std	Y+42, r1	; 0x2a
    9e18:	1b a6       	std	Y+43, r1	; 0x2b
    9e1a:	1c a6       	std	Y+44, r1	; 0x2c
	p->deadlock_count_x = 0;
    9e1c:	18 a2       	std	Y+32, r1	; 0x20
    9e1e:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    9e20:	1a a2       	std	Y+34, r1	; 0x22
    9e22:	19 a2       	std	Y+33, r1	; 0x21
}
    9e24:	df 91       	pop	r29
    9e26:	cf 91       	pop	r28
    9e28:	1f 91       	pop	r17
    9e2a:	0f 91       	pop	r16
    9e2c:	08 95       	ret

00009e2e <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9e2e:	fc 01       	movw	r30, r24
    9e30:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    9e32:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9e34:	60 e0       	ldi	r22, 0x00	; 0
    9e36:	8d 96       	adiw	r24, 0x2d	; 45
    9e38:	0c 94 24 4e 	jmp	0x9c48	; 0x9c48 <init_shot_state>

00009e3c <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9e3c:	e2 eb       	ldi	r30, 0xB2	; 178
    9e3e:	fb e0       	ldi	r31, 0x0B	; 11
    9e40:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9e42:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9e44:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9e46:	14 86       	std	Z+12, r1	; 0x0c
    9e48:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9e4a:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9e4c:	10 8a       	std	Z+16, r1	; 0x10
    9e4e:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9e50:	12 8a       	std	Z+18, r1	; 0x12
    9e52:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9e54:	82 e0       	ldi	r24, 0x02	; 2
    9e56:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9e58:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9e5a:	84 e1       	ldi	r24, 0x14	; 20
    9e5c:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9e5e:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9e60:	12 86       	std	Z+10, r1	; 0x0a
    9e62:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9e64:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9e66:	16 86       	std	Z+14, r1	; 0x0e
    9e68:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9e6a:	47 e9       	ldi	r20, 0x97	; 151
    9e6c:	50 e3       	ldi	r21, 0x30	; 48
    9e6e:	6d e9       	ldi	r22, 0x9D	; 157
    9e70:	70 e3       	ldi	r23, 0x30	; 48
    9e72:	84 ee       	ldi	r24, 0xE4	; 228
    9e74:	9b e0       	ldi	r25, 0x0B	; 11
    9e76:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9e7a:	4b e8       	ldi	r20, 0x8B	; 139
    9e7c:	50 e3       	ldi	r21, 0x30	; 48
    9e7e:	61 e9       	ldi	r22, 0x91	; 145
    9e80:	70 e3       	ldi	r23, 0x30	; 48
    9e82:	83 e5       	ldi	r24, 0x53	; 83
    9e84:	9f e0       	ldi	r25, 0x0F	; 15
    9e86:	0c 94 a5 4e 	jmp	0x9d4a	; 0x9d4a <init_player>

00009e8a <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9e8a:	cf 93       	push	r28
    9e8c:	df 93       	push	r29
    9e8e:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9e90:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    9e92:	6b 89       	ldd	r22, Y+19	; 0x13
    9e94:	70 e0       	ldi	r23, 0x00	; 0
    9e96:	80 e0       	ldi	r24, 0x00	; 0
    9e98:	90 e0       	ldi	r25, 0x00	; 0
    9e9a:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__floatunsisf>
    9e9e:	6b 83       	std	Y+3, r22	; 0x03
    9ea0:	7c 83       	std	Y+4, r23	; 0x04
    9ea2:	8d 83       	std	Y+5, r24	; 0x05
    9ea4:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    9ea6:	6c 89       	ldd	r22, Y+20	; 0x14
    9ea8:	70 e0       	ldi	r23, 0x00	; 0
    9eaa:	80 e0       	ldi	r24, 0x00	; 0
    9eac:	90 e0       	ldi	r25, 0x00	; 0
    9eae:	0e 94 c2 6e 	call	0xdd84	; 0xdd84 <__floatunsisf>
    9eb2:	6f 83       	std	Y+7, r22	; 0x07
    9eb4:	78 87       	std	Y+8, r23	; 0x08
    9eb6:	89 87       	std	Y+9, r24	; 0x09
    9eb8:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9eba:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9ebc:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9ebe:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    9ec0:	62 e0       	ldi	r22, 0x02	; 2
    9ec2:	80 e0       	ldi	r24, 0x00	; 0
    9ec4:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    9ec8:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    9eca:	62 e0       	ldi	r22, 0x02	; 2
    9ecc:	80 e0       	ldi	r24, 0x00	; 0
    9ece:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    9ed2:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    9ed4:	df 91       	pop	r29
    9ed6:	cf 91       	pop	r28
    9ed8:	08 95       	ret

00009eda <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    9eda:	0e 94 80 46 	call	0x8d00	; 0x8d00 <ProcessSprites>
    WaitVsync(1);
    9ede:	81 e0       	ldi	r24, 0x01	; 1
    9ee0:	90 e0       	ldi	r25, 0x00	; 0
    9ee2:	0e 94 8a 48 	call	0x9114	; 0x9114 <WaitVsync>
    RestoreBackground();
    9ee6:	0c 94 9a 37 	jmp	0x6f34	; 0x6f34 <RestoreBackground>

00009eea <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9eea:	cf 93       	push	r28
    9eec:	df 93       	push	r29
    9eee:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9ef0:	bc 01       	movw	r22, r24
    9ef2:	88 81       	ld	r24, Y
    9ef4:	99 81       	ldd	r25, Y+1	; 0x01
    9ef6:	0e 94 9d 3b 	call	0x773a	; 0x773a <EepromReadBlock>
	if (status == 0x03)
    9efa:	83 30       	cpi	r24, 0x03	; 3
    9efc:	29 f4       	brne	.+10     	; 0x9f08 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9efe:	ce 01       	movw	r24, r28
	}
}
    9f00:	df 91       	pop	r29
    9f02:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9f04:	0c 94 53 3b 	jmp	0x76a6	; 0x76a6 <EepromWriteBlock>
	}
}
    9f08:	df 91       	pop	r29
    9f0a:	cf 91       	pop	r28
    9f0c:	08 95       	ret

00009f0e <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9f0e:	61 e0       	ldi	r22, 0x01	; 1
    9f10:	83 e0       	ldi	r24, 0x03	; 3
    9f12:	0e 94 bb 48 	call	0x9176	; 0x9176 <FadeOut>
	ClearVram();
    9f16:	0e 94 ca 39 	call	0x7394	; 0x7394 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9f1a:	60 e0       	ldi	r22, 0x00	; 0
    9f1c:	83 e0       	ldi	r24, 0x03	; 3
    9f1e:	0c 94 af 48 	jmp	0x915e	; 0x915e <FadeIn>

00009f22 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9f22:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9f24:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9f26:	40 e0       	ldi	r20, 0x00	; 0
    9f28:	69 ea       	ldi	r22, 0xA9	; 169
    9f2a:	70 e3       	ldi	r23, 0x30	; 48
    9f2c:	8c 2f       	mov	r24, r28
    9f2e:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
    9f32:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9f34:	ca 30       	cpi	r28, 0x0A	; 10
    9f36:	b9 f7       	brne	.-18     	; 0x9f26 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9f38:	cf 91       	pop	r28
    9f3a:	08 95       	ret

00009f3c <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9f3c:	cf 92       	push	r12
    9f3e:	df 92       	push	r13
    9f40:	ff 92       	push	r15
    9f42:	0f 93       	push	r16
    9f44:	1f 93       	push	r17
    9f46:	cf 93       	push	r28
    9f48:	df 93       	push	r29
    9f4a:	cd b7       	in	r28, 0x3d	; 61
    9f4c:	de b7       	in	r29, 0x3e	; 62
    9f4e:	2a 97       	sbiw	r28, 0x0a	; 10
    9f50:	0f b6       	in	r0, 0x3f	; 63
    9f52:	f8 94       	cli
    9f54:	de bf       	out	0x3e, r29	; 62
    9f56:	0f be       	out	0x3f, r0	; 63
    9f58:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9f5a:	90 91 f3 0b 	lds	r25, 0x0BF3
    9f5e:	80 91 62 0f 	lds	r24, 0x0F62
    9f62:	98 17       	cp	r25, r24
    9f64:	28 f4       	brcc	.+10     	; 0x9f70 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    9f66:	e4 ee       	ldi	r30, 0xE4	; 228
    9f68:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9f6a:	a3 e5       	ldi	r26, 0x53	; 83
    9f6c:	bf e0       	ldi	r27, 0x0F	; 15
    9f6e:	04 c0       	rjmp	.+8      	; 0x9f78 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9f70:	e3 e5       	ldi	r30, 0x53	; 83
    9f72:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9f74:	a4 ee       	ldi	r26, 0xE4	; 228
    9f76:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9f78:	1b 96       	adiw	r26, 0x0b	; 11
    9f7a:	8c 91       	ld	r24, X
    9f7c:	1b 97       	sbiw	r26, 0x0b	; 11
    9f7e:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    9f80:	83 85       	ldd	r24, Z+11	; 0x0b
    9f82:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    9f84:	1f 96       	adiw	r26, 0x0f	; 15
    9f86:	8c 91       	ld	r24, X
    9f88:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    9f8a:	97 85       	ldd	r25, Z+15	; 0x0f
    9f8c:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    9f8e:	21 e0       	ldi	r18, 0x01	; 1
    9f90:	30 91 b5 0b 	lds	r19, 0x0BB5
    9f94:	38 30       	cpi	r19, 0x08	; 8
    9f96:	09 f0       	breq	.+2      	; 0x9f9a <save_score+0x5e>
    9f98:	20 e0       	ldi	r18, 0x00	; 0
    9f9a:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    9f9c:	f8 2e       	mov	r15, r24
    9f9e:	f9 1a       	sub	r15, r25
    9fa0:	00 e0       	ldi	r16, 0x00	; 0
    9fa2:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    9fa4:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    9fa6:	81 11       	cpse	r24, r1
    9fa8:	08 c0       	rjmp	.+16     	; 0x9fba <save_score+0x7e>
    9faa:	f8 01       	movw	r30, r16
    9fac:	ee 59       	subi	r30, 0x9E	; 158
    9fae:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    9fb0:	94 81       	ldd	r25, Z+4	; 0x04
    9fb2:	25 81       	ldd	r18, Z+5	; 0x05
    9fb4:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    9fb6:	9f 15       	cp	r25, r15
    9fb8:	d0 f4       	brcc	.+52     	; 0x9fee <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    9fba:	45 e0       	ldi	r20, 0x05	; 5
    9fbc:	c8 01       	movw	r24, r16
    9fbe:	8c 59       	subi	r24, 0x9C	; 156
    9fc0:	94 4f       	sbci	r25, 0xF4	; 244
    9fc2:	6c 01       	movw	r12, r24
    9fc4:	bc 01       	movw	r22, r24
    9fc6:	ce 01       	movw	r24, r28
    9fc8:	06 96       	adiw	r24, 0x06	; 6
    9fca:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    9fce:	45 e0       	ldi	r20, 0x05	; 5
    9fd0:	be 01       	movw	r22, r28
    9fd2:	6f 5f       	subi	r22, 0xFF	; 255
    9fd4:	7f 4f       	sbci	r23, 0xFF	; 255
    9fd6:	c6 01       	movw	r24, r12
    9fd8:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    9fdc:	45 e0       	ldi	r20, 0x05	; 5
    9fde:	be 01       	movw	r22, r28
    9fe0:	6a 5f       	subi	r22, 0xFA	; 250
    9fe2:	7f 4f       	sbci	r23, 0xFF	; 255
    9fe4:	ce 01       	movw	r24, r28
    9fe6:	01 96       	adiw	r24, 0x01	; 1
    9fe8:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
				saved = 1;
    9fec:	81 e0       	ldi	r24, 0x01	; 1
    9fee:	0b 5f       	subi	r16, 0xFB	; 251
    9ff0:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    9ff2:	0e 31       	cpi	r16, 0x1E	; 30
    9ff4:	11 05       	cpc	r17, r1
    9ff6:	b9 f6       	brne	.-82     	; 0x9fa6 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9ff8:	82 e6       	ldi	r24, 0x62	; 98
    9ffa:	9b e0       	ldi	r25, 0x0B	; 11
    9ffc:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a000:	2a 96       	adiw	r28, 0x0a	; 10
    a002:	0f b6       	in	r0, 0x3f	; 63
    a004:	f8 94       	cli
    a006:	de bf       	out	0x3e, r29	; 62
    a008:	0f be       	out	0x3f, r0	; 63
    a00a:	cd bf       	out	0x3d, r28	; 61
    a00c:	df 91       	pop	r29
    a00e:	cf 91       	pop	r28
    a010:	1f 91       	pop	r17
    a012:	0f 91       	pop	r16
    a014:	ff 90       	pop	r15
    a016:	df 90       	pop	r13
    a018:	cf 90       	pop	r12
    a01a:	08 95       	ret

0000a01c <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a01c:	0f 93       	push	r16
    a01e:	1f 93       	push	r17
    a020:	cf 93       	push	r28
    a022:	df 93       	push	r29
    a024:	8c 01       	movw	r16, r24
    a026:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a028:	88 81       	ld	r24, Y
    a02a:	81 30       	cpi	r24, 0x01	; 1
    a02c:	69 f1       	breq	.+90     	; 0xa088 <position_shot+0x6c>
    a02e:	98 f0       	brcs	.+38     	; 0xa056 <position_shot+0x3a>
    a030:	82 30       	cpi	r24, 0x02	; 2
    a032:	f1 f1       	breq	.+124    	; 0xa0b0 <position_shot+0x94>
    a034:	83 30       	cpi	r24, 0x03	; 3
    a036:	09 f0       	breq	.+2      	; 0xa03a <position_shot+0x1e>
    a038:	59 c0       	rjmp	.+178    	; 0xa0ec <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a03a:	f8 01       	movw	r30, r16
    a03c:	83 81       	ldd	r24, Z+3	; 0x03
    a03e:	94 81       	ldd	r25, Z+4	; 0x04
    a040:	a5 81       	ldd	r26, Z+5	; 0x05
    a042:	b6 81       	ldd	r27, Z+6	; 0x06
    a044:	8b 83       	std	Y+3, r24	; 0x03
    a046:	9c 83       	std	Y+4, r25	; 0x04
    a048:	ad 83       	std	Y+5, r26	; 0x05
    a04a:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a04c:	20 e0       	ldi	r18, 0x00	; 0
    a04e:	30 e0       	ldi	r19, 0x00	; 0
    a050:	40 e8       	ldi	r20, 0x80	; 128
    a052:	50 e4       	ldi	r21, 0x40	; 64
    a054:	41 c0       	rjmp	.+130    	; 0xa0d8 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a056:	20 e0       	ldi	r18, 0x00	; 0
    a058:	30 e0       	ldi	r19, 0x00	; 0
    a05a:	40 e8       	ldi	r20, 0x80	; 128
    a05c:	50 e4       	ldi	r21, 0x40	; 64
    a05e:	f8 01       	movw	r30, r16
    a060:	63 81       	ldd	r22, Z+3	; 0x03
    a062:	74 81       	ldd	r23, Z+4	; 0x04
    a064:	85 81       	ldd	r24, Z+5	; 0x05
    a066:	96 81       	ldd	r25, Z+6	; 0x06
    a068:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a06c:	6b 83       	std	Y+3, r22	; 0x03
    a06e:	7c 83       	std	Y+4, r23	; 0x04
    a070:	8d 83       	std	Y+5, r24	; 0x05
    a072:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a074:	f8 01       	movw	r30, r16
    a076:	87 81       	ldd	r24, Z+7	; 0x07
    a078:	90 85       	ldd	r25, Z+8	; 0x08
    a07a:	a1 85       	ldd	r26, Z+9	; 0x09
    a07c:	b2 85       	ldd	r27, Z+10	; 0x0a
    a07e:	8f 83       	std	Y+7, r24	; 0x07
    a080:	98 87       	std	Y+8, r25	; 0x08
    a082:	a9 87       	std	Y+9, r26	; 0x09
    a084:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a086:	32 c0       	rjmp	.+100    	; 0xa0ec <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a088:	20 e0       	ldi	r18, 0x00	; 0
    a08a:	30 e0       	ldi	r19, 0x00	; 0
    a08c:	40 e0       	ldi	r20, 0x00	; 0
    a08e:	51 e4       	ldi	r21, 0x41	; 65
    a090:	f8 01       	movw	r30, r16
    a092:	63 81       	ldd	r22, Z+3	; 0x03
    a094:	74 81       	ldd	r23, Z+4	; 0x04
    a096:	85 81       	ldd	r24, Z+5	; 0x05
    a098:	96 81       	ldd	r25, Z+6	; 0x06
    a09a:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a09e:	6b 83       	std	Y+3, r22	; 0x03
    a0a0:	7c 83       	std	Y+4, r23	; 0x04
    a0a2:	8d 83       	std	Y+5, r24	; 0x05
    a0a4:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a0a6:	20 e0       	ldi	r18, 0x00	; 0
    a0a8:	30 e0       	ldi	r19, 0x00	; 0
    a0aa:	40 e8       	ldi	r20, 0x80	; 128
    a0ac:	50 e4       	ldi	r21, 0x40	; 64
    a0ae:	13 c0       	rjmp	.+38     	; 0xa0d6 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a0b0:	20 e0       	ldi	r18, 0x00	; 0
    a0b2:	30 e0       	ldi	r19, 0x00	; 0
    a0b4:	40 e8       	ldi	r20, 0x80	; 128
    a0b6:	50 e4       	ldi	r21, 0x40	; 64
    a0b8:	f8 01       	movw	r30, r16
    a0ba:	63 81       	ldd	r22, Z+3	; 0x03
    a0bc:	74 81       	ldd	r23, Z+4	; 0x04
    a0be:	85 81       	ldd	r24, Z+5	; 0x05
    a0c0:	96 81       	ldd	r25, Z+6	; 0x06
    a0c2:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a0c6:	6b 83       	std	Y+3, r22	; 0x03
    a0c8:	7c 83       	std	Y+4, r23	; 0x04
    a0ca:	8d 83       	std	Y+5, r24	; 0x05
    a0cc:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a0ce:	20 e0       	ldi	r18, 0x00	; 0
    a0d0:	30 e0       	ldi	r19, 0x00	; 0
    a0d2:	40 e0       	ldi	r20, 0x00	; 0
    a0d4:	51 e4       	ldi	r21, 0x41	; 65
    a0d6:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a0d8:	67 81       	ldd	r22, Z+7	; 0x07
    a0da:	70 85       	ldd	r23, Z+8	; 0x08
    a0dc:	81 85       	ldd	r24, Z+9	; 0x09
    a0de:	92 85       	ldd	r25, Z+10	; 0x0a
    a0e0:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a0e4:	6f 83       	std	Y+7, r22	; 0x07
    a0e6:	78 87       	std	Y+8, r23	; 0x08
    a0e8:	89 87       	std	Y+9, r24	; 0x09
    a0ea:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a0ec:	df 91       	pop	r29
    a0ee:	cf 91       	pop	r28
    a0f0:	1f 91       	pop	r17
    a0f2:	0f 91       	pop	r16
    a0f4:	08 95       	ret

0000a0f6 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a0f6:	0f 93       	push	r16
    a0f8:	1f 93       	push	r17
    a0fa:	cf 93       	push	r28
    a0fc:	df 93       	push	r29
    a0fe:	8c 01       	movw	r16, r24
    a100:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a102:	ac 01       	movw	r20, r24
    a104:	44 5f       	subi	r20, 0xF4	; 244
    a106:	5f 4f       	sbci	r21, 0xFF	; 255
    a108:	23 e0       	ldi	r18, 0x03	; 3
    a10a:	6e e0       	ldi	r22, 0x0E	; 14
    a10c:	84 e0       	ldi	r24, 0x04	; 4
    a10e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a112:	47 e4       	ldi	r20, 0x47	; 71
    a114:	54 e0       	ldi	r21, 0x04	; 4
    a116:	6e e0       	ldi	r22, 0x0E	; 14
    a118:	70 e0       	ldi	r23, 0x00	; 0
    a11a:	88 e0       	ldi	r24, 0x08	; 8
    a11c:	90 e0       	ldi	r25, 0x00	; 0
    a11e:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a122:	ae 01       	movw	r20, r28
    a124:	44 5f       	subi	r20, 0xF4	; 244
    a126:	5f 4f       	sbci	r21, 0xFF	; 255
    a128:	23 e0       	ldi	r18, 0x03	; 3
    a12a:	6e e0       	ldi	r22, 0x0E	; 14
    a12c:	8d e0       	ldi	r24, 0x0D	; 13
    a12e:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a132:	44 e4       	ldi	r20, 0x44	; 68
    a134:	54 e0       	ldi	r21, 0x04	; 4
    a136:	6e e0       	ldi	r22, 0x0E	; 14
    a138:	70 e0       	ldi	r23, 0x00	; 0
    a13a:	81 e1       	ldi	r24, 0x11	; 17
    a13c:	90 e0       	ldi	r25, 0x00	; 0
    a13e:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a142:	21 e0       	ldi	r18, 0x01	; 1
    a144:	f8 01       	movw	r30, r16
    a146:	40 89       	ldd	r20, Z+16	; 0x10
    a148:	6e e0       	ldi	r22, 0x0E	; 14
    a14a:	70 e0       	ldi	r23, 0x00	; 0
    a14c:	86 e1       	ldi	r24, 0x16	; 22
    a14e:	90 e0       	ldi	r25, 0x00	; 0
    a150:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
	PrintChar(23, 14, '-');
    a154:	4d e2       	ldi	r20, 0x2D	; 45
    a156:	6e e0       	ldi	r22, 0x0E	; 14
    a158:	70 e0       	ldi	r23, 0x00	; 0
    a15a:	87 e1       	ldi	r24, 0x17	; 23
    a15c:	90 e0       	ldi	r25, 0x00	; 0
    a15e:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a162:	21 e0       	ldi	r18, 0x01	; 1
    a164:	48 89       	ldd	r20, Y+16	; 0x10
    a166:	6e e0       	ldi	r22, 0x0E	; 14
    a168:	70 e0       	ldi	r23, 0x00	; 0
    a16a:	8a e1       	ldi	r24, 0x1A	; 26
    a16c:	90 e0       	ldi	r25, 0x00	; 0
}
    a16e:	df 91       	pop	r29
    a170:	cf 91       	pop	r28
    a172:	1f 91       	pop	r17
    a174:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a176:	0c 94 39 48 	jmp	0x9072	; 0x9072 <PrintByte>

0000a17a <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a17a:	0f 93       	push	r16
    a17c:	1f 93       	push	r17
    a17e:	cf 93       	push	r28
    a180:	df 93       	push	r29
    a182:	8c 01       	movw	r16, r24
    a184:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a186:	48 e3       	ldi	r20, 0x38	; 56
    a188:	54 e0       	ldi	r21, 0x04	; 4
    a18a:	6c e0       	ldi	r22, 0x0C	; 12
    a18c:	70 e0       	ldi	r23, 0x00	; 0
    a18e:	89 e0       	ldi	r24, 0x09	; 9
    a190:	90 e0       	ldi	r25, 0x00	; 0
    a192:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a196:	a8 01       	movw	r20, r16
    a198:	44 5f       	subi	r20, 0xF4	; 244
    a19a:	5f 4f       	sbci	r21, 0xFF	; 255
    a19c:	23 e0       	ldi	r18, 0x03	; 3
    a19e:	6e e0       	ldi	r22, 0x0E	; 14
    a1a0:	84 e0       	ldi	r24, 0x04	; 4
    a1a2:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a1a6:	47 e4       	ldi	r20, 0x47	; 71
    a1a8:	54 e0       	ldi	r21, 0x04	; 4
    a1aa:	6e e0       	ldi	r22, 0x0E	; 14
    a1ac:	70 e0       	ldi	r23, 0x00	; 0
    a1ae:	88 e0       	ldi	r24, 0x08	; 8
    a1b0:	90 e0       	ldi	r25, 0x00	; 0
    a1b2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a1b6:	ae 01       	movw	r20, r28
    a1b8:	44 5f       	subi	r20, 0xF4	; 244
    a1ba:	5f 4f       	sbci	r21, 0xFF	; 255
    a1bc:	23 e0       	ldi	r18, 0x03	; 3
    a1be:	6e e0       	ldi	r22, 0x0E	; 14
    a1c0:	8d e0       	ldi	r24, 0x0D	; 13
    a1c2:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a1c6:	44 e4       	ldi	r20, 0x44	; 68
    a1c8:	54 e0       	ldi	r21, 0x04	; 4
    a1ca:	6e e0       	ldi	r22, 0x0E	; 14
    a1cc:	70 e0       	ldi	r23, 0x00	; 0
    a1ce:	81 e1       	ldi	r24, 0x11	; 17
    a1d0:	90 e0       	ldi	r25, 0x00	; 0
    a1d2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    PrintByte(22, 14, winner->score ,true);
    a1d6:	21 e0       	ldi	r18, 0x01	; 1
    a1d8:	f8 01       	movw	r30, r16
    a1da:	47 85       	ldd	r20, Z+15	; 0x0f
    a1dc:	6e e0       	ldi	r22, 0x0E	; 14
    a1de:	70 e0       	ldi	r23, 0x00	; 0
    a1e0:	86 e1       	ldi	r24, 0x16	; 22
    a1e2:	90 e0       	ldi	r25, 0x00	; 0
    a1e4:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
    PrintChar(23, 14, '-');
    a1e8:	4d e2       	ldi	r20, 0x2D	; 45
    a1ea:	6e e0       	ldi	r22, 0x0E	; 14
    a1ec:	70 e0       	ldi	r23, 0x00	; 0
    a1ee:	87 e1       	ldi	r24, 0x17	; 23
    a1f0:	90 e0       	ldi	r25, 0x00	; 0
    a1f2:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a1f6:	21 e0       	ldi	r18, 0x01	; 1
    a1f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    a1fa:	6e e0       	ldi	r22, 0x0E	; 14
    a1fc:	70 e0       	ldi	r23, 0x00	; 0
    a1fe:	8a e1       	ldi	r24, 0x1A	; 26
    a200:	90 e0       	ldi	r25, 0x00	; 0
    a202:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a206:	80 91 b5 0b 	lds	r24, 0x0BB5
    a20a:	88 30       	cpi	r24, 0x08	; 8
    a20c:	59 f4       	brne	.+22     	; 0xa224 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    a20e:	4a e2       	ldi	r20, 0x2A	; 42
    a210:	6e e0       	ldi	r22, 0x0E	; 14
    a212:	70 e0       	ldi	r23, 0x00	; 0
    a214:	8c e1       	ldi	r24, 0x1C	; 28
    a216:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a218:	df 91       	pop	r29
    a21a:	cf 91       	pop	r28
    a21c:	1f 91       	pop	r17
    a21e:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a220:	0c 94 87 48 	jmp	0x910e	; 0x910e <PrintChar>
	}
}
    a224:	df 91       	pop	r29
    a226:	cf 91       	pop	r28
    a228:	1f 91       	pop	r17
    a22a:	0f 91       	pop	r16
    a22c:	08 95       	ret

0000a22e <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a22e:	fc 01       	movw	r30, r24
    a230:	20 81       	ld	r18, Z
    a232:	31 81       	ldd	r19, Z+1	; 0x01
    a234:	21 70       	andi	r18, 0x01	; 1
    a236:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a238:	81 e0       	ldi	r24, 0x01	; 1
    a23a:	23 2b       	or	r18, r19
    a23c:	09 f4       	brne	.+2      	; 0xa240 <shoot_pressed+0x12>
    a23e:	80 e0       	ldi	r24, 0x00	; 0
}
    a240:	08 95       	ret

0000a242 <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a242:	fc 01       	movw	r30, r24
    a244:	83 a1       	ldd	r24, Z+35	; 0x23
    a246:	fb 01       	movw	r30, r22
    a248:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    a24a:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a24c:	81 11       	cpse	r24, r1
    a24e:	09 c0       	rjmp	.+18     	; 0xa262 <get_delta+0x20>
		return FRAME_TIME * s->speed;
    a250:	80 e0       	ldi	r24, 0x00	; 0
    a252:	90 e0       	ldi	r25, 0x00	; 0
    a254:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    a258:	25 e6       	ldi	r18, 0x65	; 101
    a25a:	38 e8       	ldi	r19, 0x88	; 136
    a25c:	48 e8       	ldi	r20, 0x88	; 136
    a25e:	5c e3       	ldi	r21, 0x3C	; 60
    a260:	0e c0       	rjmp	.+28     	; 0xa27e <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    a262:	80 e0       	ldi	r24, 0x00	; 0
    a264:	90 e0       	ldi	r25, 0x00	; 0
    a266:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    a26a:	25 e6       	ldi	r18, 0x65	; 101
    a26c:	38 e8       	ldi	r19, 0x88	; 136
    a26e:	48 e8       	ldi	r20, 0x88	; 136
    a270:	5c e3       	ldi	r21, 0x3C	; 60
    a272:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    a276:	23 e3       	ldi	r18, 0x33	; 51
    a278:	33 e3       	ldi	r19, 0x33	; 51
    a27a:	43 eb       	ldi	r20, 0xB3	; 179
    a27c:	5f e3       	ldi	r21, 0x3F	; 63
    a27e:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
}
    a282:	08 95       	ret

0000a284 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a284:	cf 93       	push	r28
    a286:	df 93       	push	r29
    a288:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a28a:	ac 01       	movw	r20, r24
    a28c:	44 5f       	subi	r20, 0xF4	; 244
    a28e:	5f 4f       	sbci	r21, 0xFF	; 255
    a290:	23 e0       	ldi	r18, 0x03	; 3
    a292:	60 e0       	ldi	r22, 0x00	; 0
    a294:	8a e0       	ldi	r24, 0x0A	; 10
    a296:	8c 0f       	add	r24, r28
    a298:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a29c:	d0 e0       	ldi	r29, 0x00	; 0
    a29e:	41 e3       	ldi	r20, 0x31	; 49
    a2a0:	54 e0       	ldi	r21, 0x04	; 4
    a2a2:	60 e0       	ldi	r22, 0x00	; 0
    a2a4:	70 e0       	ldi	r23, 0x00	; 0
    a2a6:	ce 01       	movw	r24, r28
    a2a8:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(x, 1, (char*) strTotal);
    a2ac:	4a e2       	ldi	r20, 0x2A	; 42
    a2ae:	54 e0       	ldi	r21, 0x04	; 4
    a2b0:	61 e0       	ldi	r22, 0x01	; 1
    a2b2:	70 e0       	ldi	r23, 0x00	; 0
    a2b4:	ce 01       	movw	r24, r28
	
}
    a2b6:	df 91       	pop	r29
    a2b8:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a2ba:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>

0000a2be <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a2be:	0f 93       	push	r16
    a2c0:	1f 93       	push	r17
    a2c2:	cf 93       	push	r28
    a2c4:	df 93       	push	r29
    a2c6:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a2c8:	c6 2f       	mov	r28, r22
    a2ca:	d0 e0       	ldi	r29, 0x00	; 0
    a2cc:	28 96       	adiw	r28, 0x08	; 8
    a2ce:	20 e0       	ldi	r18, 0x00	; 0
    a2d0:	fc 01       	movw	r30, r24
    a2d2:	40 89       	ldd	r20, Z+16	; 0x10
    a2d4:	60 e0       	ldi	r22, 0x00	; 0
    a2d6:	70 e0       	ldi	r23, 0x00	; 0
    a2d8:	ce 01       	movw	r24, r28
    a2da:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a2de:	20 e0       	ldi	r18, 0x00	; 0
    a2e0:	f8 01       	movw	r30, r16
    a2e2:	47 85       	ldd	r20, Z+15	; 0x0f
    a2e4:	61 e0       	ldi	r22, 0x01	; 1
    a2e6:	70 e0       	ldi	r23, 0x00	; 0
    a2e8:	ce 01       	movw	r24, r28
}
    a2ea:	df 91       	pop	r29
    a2ec:	cf 91       	pop	r28
    a2ee:	1f 91       	pop	r17
    a2f0:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a2f2:	0c 94 39 48 	jmp	0x9072	; 0x9072 <PrintByte>

0000a2f6 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a2f6:	ef 92       	push	r14
    a2f8:	ff 92       	push	r15
    a2fa:	0f 93       	push	r16
    a2fc:	1f 93       	push	r17
    a2fe:	cf 93       	push	r28
    a300:	df 93       	push	r29
    a302:	1f 92       	push	r1
    a304:	cd b7       	in	r28, 0x3d	; 61
    a306:	de b7       	in	r29, 0x3e	; 62
    a308:	7c 01       	movw	r14, r24
    a30a:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a30c:	fc 01       	movw	r30, r24
    a30e:	67 81       	ldd	r22, Z+7	; 0x07
    a310:	70 85       	ldd	r23, Z+8	; 0x08
    a312:	81 85       	ldd	r24, Z+9	; 0x09
    a314:	92 85       	ldd	r25, Z+10	; 0x0a
    a316:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a31a:	46 2f       	mov	r20, r22
    a31c:	f7 01       	movw	r30, r14
    a31e:	63 81       	ldd	r22, Z+3	; 0x03
    a320:	74 81       	ldd	r23, Z+4	; 0x04
    a322:	85 81       	ldd	r24, Z+5	; 0x05
    a324:	96 81       	ldd	r25, Z+6	; 0x06
    a326:	49 83       	std	Y+1, r20	; 0x01
    a328:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a32c:	02 e0       	ldi	r16, 0x02	; 2
    a32e:	22 e0       	ldi	r18, 0x02	; 2
    a330:	49 81       	ldd	r20, Y+1	; 0x01
    a332:	81 2f       	mov	r24, r17
    a334:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
}
    a338:	0f 90       	pop	r0
    a33a:	df 91       	pop	r29
    a33c:	cf 91       	pop	r28
    a33e:	1f 91       	pop	r17
    a340:	0f 91       	pop	r16
    a342:	ff 90       	pop	r15
    a344:	ef 90       	pop	r14
    a346:	08 95       	ret

0000a348 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a348:	ef 92       	push	r14
    a34a:	ff 92       	push	r15
    a34c:	0f 93       	push	r16
    a34e:	1f 93       	push	r17
    a350:	cf 93       	push	r28
    a352:	df 93       	push	r29
    a354:	1f 92       	push	r1
    a356:	cd b7       	in	r28, 0x3d	; 61
    a358:	de b7       	in	r29, 0x3e	; 62
    a35a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a35c:	81 89       	ldd	r24, Z+17	; 0x11
    a35e:	88 23       	and	r24, r24
    a360:	b9 f0       	breq	.+46     	; 0xa390 <render_shot+0x48>
    a362:	16 2f       	mov	r17, r22
    a364:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a366:	64 a9       	ldd	r22, Z+52	; 0x34
    a368:	75 a9       	ldd	r23, Z+53	; 0x35
    a36a:	86 a9       	ldd	r24, Z+54	; 0x36
    a36c:	97 a9       	ldd	r25, Z+55	; 0x37
    a36e:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a372:	46 2f       	mov	r20, r22
    a374:	f7 01       	movw	r30, r14
    a376:	60 a9       	ldd	r22, Z+48	; 0x30
    a378:	71 a9       	ldd	r23, Z+49	; 0x31
    a37a:	82 a9       	ldd	r24, Z+50	; 0x32
    a37c:	93 a9       	ldd	r25, Z+51	; 0x33
    a37e:	49 83       	std	Y+1, r20	; 0x01
    a380:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a384:	01 e0       	ldi	r16, 0x01	; 1
    a386:	21 e0       	ldi	r18, 0x01	; 1
    a388:	49 81       	ldd	r20, Y+1	; 0x01
    a38a:	81 2f       	mov	r24, r17
    a38c:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
			sprite_index++;
		}
	}
}
    a390:	0f 90       	pop	r0
    a392:	df 91       	pop	r29
    a394:	cf 91       	pop	r28
    a396:	1f 91       	pop	r17
    a398:	0f 91       	pop	r16
    a39a:	ff 90       	pop	r15
    a39c:	ef 90       	pop	r14
    a39e:	08 95       	ret

0000a3a0 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a3a0:	ef 92       	push	r14
    a3a2:	ff 92       	push	r15
    a3a4:	0f 93       	push	r16
    a3a6:	1f 93       	push	r17
    a3a8:	cf 93       	push	r28
    a3aa:	df 93       	push	r29
    a3ac:	ec 01       	movw	r28, r24
    a3ae:	25 96       	adiw	r28, 0x05	; 5
    a3b0:	8c 01       	movw	r16, r24
    a3b2:	0f 5d       	subi	r16, 0xDF	; 223
    a3b4:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a3b6:	8e e1       	ldi	r24, 0x1E	; 30
    a3b8:	e8 2e       	mov	r14, r24
    a3ba:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a3bc:	88 85       	ldd	r24, Y+8	; 0x08
    a3be:	99 85       	ldd	r25, Y+9	; 0x09
    a3c0:	89 2b       	or	r24, r25
    a3c2:	c1 f0       	breq	.+48     	; 0xa3f4 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a3c4:	ce 01       	movw	r24, r28
    a3c6:	04 97       	sbiw	r24, 0x04	; 4
    a3c8:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a3cc:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a3ce:	48 81       	ld	r20, Y
    a3d0:	88 85       	ldd	r24, Y+8	; 0x08
    a3d2:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a3d4:	b7 01       	movw	r22, r14
    a3d6:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    a3da:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a3dc:	44 23       	and	r20, r20
    a3de:	39 f0       	breq	.+14     	; 0xa3ee <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a3e0:	40 e0       	ldi	r20, 0x00	; 0
    a3e2:	50 e0       	ldi	r21, 0x00	; 0
    a3e4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
				ta->anims[i].tile_index = 0;
    a3e8:	19 86       	std	Y+9, r1	; 0x09
    a3ea:	18 86       	std	Y+8, r1	; 0x08
    a3ec:	03 c0       	rjmp	.+6      	; 0xa3f4 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a3ee:	a9 01       	movw	r20, r18
    a3f0:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
    a3f4:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a3f6:	c0 17       	cp	r28, r16
    a3f8:	d1 07       	cpc	r29, r17
    a3fa:	01 f7       	brne	.-64     	; 0xa3bc <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a3fc:	df 91       	pop	r29
    a3fe:	cf 91       	pop	r28
    a400:	1f 91       	pop	r17
    a402:	0f 91       	pop	r16
    a404:	ff 90       	pop	r15
    a406:	ef 90       	pop	r14
    a408:	08 95       	ret

0000a40a <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a40a:	cf 93       	push	r28
    a40c:	df 93       	push	r29
    a40e:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a410:	0e 94 91 4b 	call	0x9722	; 0x9722 <LBGetNextFrameReverse>
    a414:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a416:	4c 81       	ldd	r20, Y+4	; 0x04
    a418:	8c 85       	ldd	r24, Y+12	; 0x0c
    a41a:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a41c:	6e e1       	ldi	r22, 0x1E	; 30
    a41e:	70 e0       	ldi	r23, 0x00	; 0
    a420:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    a424:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a426:	44 23       	and	r20, r20
    a428:	19 f0       	breq	.+6      	; 0xa430 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a42a:	43 ef       	ldi	r20, 0xF3	; 243
    a42c:	59 e6       	ldi	r21, 0x69	; 105
    a42e:	01 c0       	rjmp	.+2      	; 0xa432 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a430:	a9 01       	movw	r20, r18
    a432:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	}
	return ta->anim.looped;
}
    a436:	8c 81       	ldd	r24, Y+4	; 0x04
    a438:	df 91       	pop	r29
    a43a:	cf 91       	pop	r28
    a43c:	08 95       	ret

0000a43e <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a43e:	1f 93       	push	r17
    a440:	cf 93       	push	r28
    a442:	df 93       	push	r29
    a444:	ec 01       	movw	r28, r24
    a446:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    a448:	8d 89       	ldd	r24, Y+21	; 0x15
    a44a:	80 ff       	sbrs	r24, 0
    a44c:	17 c0       	rjmp	.+46     	; 0xa47c <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a44e:	ce 01       	movw	r24, r28
    a450:	83 59       	subi	r24, 0x93	; 147
    a452:	9f 4f       	sbci	r25, 0xFF	; 255
    a454:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a458:	fe 01       	movw	r30, r28
    a45a:	ef 58       	subi	r30, 0x8F	; 143
    a45c:	ff 4f       	sbci	r31, 0xFF	; 255
    a45e:	20 81       	ld	r18, Z
    a460:	22 23       	and	r18, r18
    a462:	09 f4       	brne	.+2      	; 0xa466 <tank_map+0x28>
    a464:	4a c0       	rjmp	.+148    	; 0xa4fa <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a466:	8d 89       	ldd	r24, Y+21	; 0x15
    a468:	91 e0       	ldi	r25, 0x01	; 1
    a46a:	98 27       	eor	r25, r24
    a46c:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a46e:	ce 01       	movw	r24, r28
    a470:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a474:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a476:	83 ea       	ldi	r24, 0xA3	; 163
    a478:	90 e3       	ldi	r25, 0x30	; 48
    a47a:	40 c0       	rjmp	.+128    	; 0xa4fc <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a47c:	9e 89       	ldd	r25, Y+22	; 0x16
    a47e:	98 37       	cpi	r25, 0x78	; 120
    a480:	11 f0       	breq	.+4      	; 0xa486 <tank_map+0x48>
		{
			player->grace_frame++;
    a482:	9f 5f       	subi	r25, 0xFF	; 255
    a484:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    a486:	98 81       	ld	r25, Y
    a488:	91 30       	cpi	r25, 0x01	; 1
    a48a:	61 f0       	breq	.+24     	; 0xa4a4 <tank_map+0x66>
    a48c:	b0 f0       	brcs	.+44     	; 0xa4ba <tank_map+0x7c>
    a48e:	92 30       	cpi	r25, 0x02	; 2
    a490:	69 f0       	breq	.+26     	; 0xa4ac <tank_map+0x6e>
    a492:	93 30       	cpi	r25, 0x03	; 3
    a494:	91 f4       	brne	.+36     	; 0xa4ba <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a496:	ce 01       	movw	r24, r28
    a498:	8f 59       	subi	r24, 0x9F	; 159
    a49a:	9f 4f       	sbci	r25, 0xFF	; 255
    a49c:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a4a0:	41 e0       	ldi	r20, 0x01	; 1
    a4a2:	11 c0       	rjmp	.+34     	; 0xa4c6 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a4a4:	ce 01       	movw	r24, r28
    a4a6:	8f 59       	subi	r24, 0x9F	; 159
    a4a8:	9f 4f       	sbci	r25, 0xFF	; 255
    a4aa:	0a c0       	rjmp	.+20     	; 0xa4c0 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a4ac:	ce 01       	movw	r24, r28
    a4ae:	8b 5a       	subi	r24, 0xAB	; 171
    a4b0:	9f 4f       	sbci	r25, 0xFF	; 255
    a4b2:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a4b6:	42 e0       	ldi	r20, 0x02	; 2
    a4b8:	06 c0       	rjmp	.+12     	; 0xa4c6 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a4ba:	ce 01       	movw	r24, r28
    a4bc:	8b 5a       	subi	r24, 0xAB	; 171
    a4be:	9f 4f       	sbci	r25, 0xFF	; 255
    a4c0:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a4c4:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a4c6:	2e 89       	ldd	r18, Y+22	; 0x16
    a4c8:	28 37       	cpi	r18, 0x78	; 120
    a4ca:	31 f0       	breq	.+12     	; 0xa4d8 <tank_map+0x9a>
    a4cc:	20 91 b9 0b 	lds	r18, 0x0BB9
    a4d0:	22 23       	and	r18, r18
    a4d2:	11 f0       	breq	.+4      	; 0xa4d8 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    a4d4:	83 ea       	ldi	r24, 0xA3	; 163
    a4d6:	90 e3       	ldi	r25, 0x30	; 48
		}
		game.toggle_counter--;
    a4d8:	20 91 b8 0b 	lds	r18, 0x0BB8
    a4dc:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a4de:	19 f0       	breq	.+6      	; 0xa4e6 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a4e0:	20 93 b8 0b 	sts	0x0BB8, r18
    a4e4:	0b c0       	rjmp	.+22     	; 0xa4fc <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a4e6:	24 e1       	ldi	r18, 0x14	; 20
    a4e8:	20 93 b8 0b 	sts	0x0BB8, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a4ec:	30 91 b9 0b 	lds	r19, 0x0BB9
    a4f0:	21 e0       	ldi	r18, 0x01	; 1
    a4f2:	23 27       	eor	r18, r19
    a4f4:	20 93 b9 0b 	sts	0x0BB9, r18
    a4f8:	01 c0       	rjmp	.+2      	; 0xa4fc <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a4fa:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a4fc:	bc 01       	movw	r22, r24
    a4fe:	81 2f       	mov	r24, r17
    a500:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a504:	84 e0       	ldi	r24, 0x04	; 4
    a506:	81 0f       	add	r24, r17
    a508:	df 91       	pop	r29
    a50a:	cf 91       	pop	r28
    a50c:	1f 91       	pop	r17
    a50e:	08 95       	ret

0000a510 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a510:	cf 93       	push	r28
    a512:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a514:	fc 01       	movw	r30, r24
    a516:	23 ad       	ldd	r18, Z+59	; 0x3b
    a518:	22 23       	and	r18, r18
    a51a:	d9 f0       	breq	.+54     	; 0xa552 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    a51c:	25 a5       	ldd	r18, Z+45	; 0x2d
    a51e:	21 30       	cpi	r18, 0x01	; 1
    a520:	59 f0       	breq	.+22     	; 0xa538 <shot_map+0x28>
    a522:	a8 f0       	brcs	.+42     	; 0xa54e <shot_map+0x3e>
    a524:	22 30       	cpi	r18, 0x02	; 2
    a526:	71 f0       	breq	.+28     	; 0xa544 <shot_map+0x34>
    a528:	23 30       	cpi	r18, 0x03	; 3
    a52a:	89 f4       	brne	.+34     	; 0xa54e <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a52c:	87 5b       	subi	r24, 0xB7	; 183
    a52e:	9f 4f       	sbci	r25, 0xFF	; 255
    a530:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a534:	41 e0       	ldi	r20, 0x01	; 1
    a536:	10 c0       	rjmp	.+32     	; 0xa558 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a538:	87 5b       	subi	r24, 0xB7	; 183
    a53a:	9f 4f       	sbci	r25, 0xFF	; 255
    a53c:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a540:	40 e0       	ldi	r20, 0x00	; 0
    a542:	0a c0       	rjmp	.+20     	; 0xa558 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a544:	cd 96       	adiw	r24, 0x3d	; 61
    a546:	0e 94 6c 4b 	call	0x96d8	; 0x96d8 <LBGetNextFrame>
    a54a:	42 e0       	ldi	r20, 0x02	; 2
    a54c:	05 c0       	rjmp	.+10     	; 0xa558 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a54e:	cd 96       	adiw	r24, 0x3d	; 61
    a550:	f5 cf       	rjmp	.-22     	; 0xa53c <shot_map+0x2c>
    a552:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a554:	83 ea       	ldi	r24, 0xA3	; 163
    a556:	90 e3       	ldi	r25, 0x30	; 48
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a558:	bc 01       	movw	r22, r24
    a55a:	8c 2f       	mov	r24, r28
    a55c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a560:	81 e0       	ldi	r24, 0x01	; 1
    a562:	8c 0f       	add	r24, r28
    a564:	cf 91       	pop	r28
    a566:	08 95       	ret

0000a568 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a568:	cf 93       	push	r28
    a56a:	df 93       	push	r29
    a56c:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a56e:	88 81       	ld	r24, Y
    a570:	81 11       	cpse	r24, r1
    a572:	0b c0       	rjmp	.+22     	; 0xa58a <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    a574:	6f 81       	ldd	r22, Y+7	; 0x07
    a576:	78 85       	ldd	r23, Y+8	; 0x08
    a578:	89 85       	ldd	r24, Y+9	; 0x09
    a57a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a57c:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a580:	66 95       	lsr	r22
    a582:	66 95       	lsr	r22
    a584:	66 95       	lsr	r22
    a586:	6f 5f       	subi	r22, 0xFF	; 255
    a588:	1d c0       	rjmp	.+58     	; 0xa5c4 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    a58a:	81 30       	cpi	r24, 0x01	; 1
    a58c:	69 f4       	brne	.+26     	; 0xa5a8 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    a58e:	20 e0       	ldi	r18, 0x00	; 0
    a590:	30 e0       	ldi	r19, 0x00	; 0
    a592:	40 e0       	ldi	r20, 0x00	; 0
    a594:	5e e3       	ldi	r21, 0x3E	; 62
    a596:	6b 81       	ldd	r22, Y+3	; 0x03
    a598:	7c 81       	ldd	r23, Y+4	; 0x04
    a59a:	8d 81       	ldd	r24, Y+5	; 0x05
    a59c:	9e 81       	ldd	r25, Y+6	; 0x06
    a59e:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    a5a2:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a5a6:	27 c0       	rjmp	.+78     	; 0xa5f6 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    a5a8:	82 30       	cpi	r24, 0x02	; 2
    a5aa:	d9 f4       	brne	.+54     	; 0xa5e2 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    a5ac:	20 e0       	ldi	r18, 0x00	; 0
    a5ae:	30 e0       	ldi	r19, 0x00	; 0
    a5b0:	40 e0       	ldi	r20, 0x00	; 0
    a5b2:	5e e3       	ldi	r21, 0x3E	; 62
    a5b4:	6f 81       	ldd	r22, Y+7	; 0x07
    a5b6:	78 85       	ldd	r23, Y+8	; 0x08
    a5b8:	89 85       	ldd	r24, Y+9	; 0x09
    a5ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    a5bc:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    a5c0:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
		sprite->y = tile * 8;
    a5c4:	88 e0       	ldi	r24, 0x08	; 8
    a5c6:	68 9f       	mul	r22, r24
    a5c8:	b0 01       	movw	r22, r0
    a5ca:	11 24       	eor	r1, r1
    a5cc:	88 27       	eor	r24, r24
    a5ce:	77 fd       	sbrc	r23, 7
    a5d0:	80 95       	com	r24
    a5d2:	98 2f       	mov	r25, r24
    a5d4:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    a5d8:	6f 83       	std	Y+7, r22	; 0x07
    a5da:	78 87       	std	Y+8, r23	; 0x08
    a5dc:	89 87       	std	Y+9, r24	; 0x09
    a5de:	9a 87       	std	Y+10, r25	; 0x0a
    a5e0:	18 c0       	rjmp	.+48     	; 0xa612 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    a5e2:	6b 81       	ldd	r22, Y+3	; 0x03
    a5e4:	7c 81       	ldd	r23, Y+4	; 0x04
    a5e6:	8d 81       	ldd	r24, Y+5	; 0x05
    a5e8:	9e 81       	ldd	r25, Y+6	; 0x06
    a5ea:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a5ee:	66 95       	lsr	r22
    a5f0:	66 95       	lsr	r22
    a5f2:	66 95       	lsr	r22
    a5f4:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    a5f6:	88 e0       	ldi	r24, 0x08	; 8
    a5f8:	68 9f       	mul	r22, r24
    a5fa:	b0 01       	movw	r22, r0
    a5fc:	11 24       	eor	r1, r1
    a5fe:	88 27       	eor	r24, r24
    a600:	77 fd       	sbrc	r23, 7
    a602:	80 95       	com	r24
    a604:	98 2f       	mov	r25, r24
    a606:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    a60a:	6b 83       	std	Y+3, r22	; 0x03
    a60c:	7c 83       	std	Y+4, r23	; 0x04
    a60e:	8d 83       	std	Y+5, r24	; 0x05
    a610:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a612:	81 e0       	ldi	r24, 0x01	; 1
    a614:	8a 83       	std	Y+2, r24	; 0x02
}
    a616:	df 91       	pop	r29
    a618:	cf 91       	pop	r28
    a61a:	08 95       	ret

0000a61c <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a61c:	cf 93       	push	r28
    a61e:	df 93       	push	r29
    a620:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    a622:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    a626:	9b 01       	movw	r18, r22
    a628:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    a62a:	88 81       	ld	r24, Y
    a62c:	81 11       	cpse	r24, r1
    a62e:	07 c0       	rjmp	.+14     	; 0xa63e <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    a630:	6f 81       	ldd	r22, Y+7	; 0x07
    a632:	78 85       	ldd	r23, Y+8	; 0x08
    a634:	89 85       	ldd	r24, Y+9	; 0x09
    a636:	9a 85       	ldd	r25, Y+10	; 0x0a
    a638:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a63c:	11 c0       	rjmp	.+34     	; 0xa660 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    a63e:	81 30       	cpi	r24, 0x01	; 1
    a640:	39 f4       	brne	.+14     	; 0xa650 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    a642:	6b 81       	ldd	r22, Y+3	; 0x03
    a644:	7c 81       	ldd	r23, Y+4	; 0x04
    a646:	8d 81       	ldd	r24, Y+5	; 0x05
    a648:	9e 81       	ldd	r25, Y+6	; 0x06
    a64a:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    a64e:	13 c0       	rjmp	.+38     	; 0xa676 <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    a650:	82 30       	cpi	r24, 0x02	; 2
    a652:	59 f4       	brne	.+22     	; 0xa66a <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    a654:	6f 81       	ldd	r22, Y+7	; 0x07
    a656:	78 85       	ldd	r23, Y+8	; 0x08
    a658:	89 85       	ldd	r24, Y+9	; 0x09
    a65a:	9a 85       	ldd	r25, Y+10	; 0x0a
    a65c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    a660:	6f 83       	std	Y+7, r22	; 0x07
    a662:	78 87       	std	Y+8, r23	; 0x08
    a664:	89 87       	std	Y+9, r24	; 0x09
    a666:	9a 87       	std	Y+10, r25	; 0x0a
    a668:	0a c0       	rjmp	.+20     	; 0xa67e <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    a66a:	6b 81       	ldd	r22, Y+3	; 0x03
    a66c:	7c 81       	ldd	r23, Y+4	; 0x04
    a66e:	8d 81       	ldd	r24, Y+5	; 0x05
    a670:	9e 81       	ldd	r25, Y+6	; 0x06
    a672:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a676:	6b 83       	std	Y+3, r22	; 0x03
    a678:	7c 83       	std	Y+4, r23	; 0x04
    a67a:	8d 83       	std	Y+5, r24	; 0x05
    a67c:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a67e:	81 e0       	ldi	r24, 0x01	; 1
    a680:	8a 83       	std	Y+2, r24	; 0x02
}
    a682:	df 91       	pop	r29
    a684:	cf 91       	pop	r28
    a686:	08 95       	ret

0000a688 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a688:	8c 59       	subi	r24, 0x9C	; 156
    a68a:	93 4f       	sbci	r25, 0xF3	; 243
    a68c:	fc 01       	movw	r30, r24
    a68e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a690:	81 30       	cpi	r24, 0x01	; 1
    a692:	31 f0       	breq	.+12     	; 0xa6a0 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a694:	82 30       	cpi	r24, 0x02	; 2
    a696:	31 f0       	breq	.+12     	; 0xa6a4 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a698:	87 33       	cpi	r24, 0x37	; 55
    a69a:	31 f0       	breq	.+12     	; 0xa6a8 <solid_square_tile+0x20>

	return 0;
    a69c:	80 e0       	ldi	r24, 0x00	; 0
    a69e:	08 95       	ret
    a6a0:	81 e0       	ldi	r24, 0x01	; 1
    a6a2:	08 95       	ret
    a6a4:	82 e0       	ldi	r24, 0x02	; 2
    a6a6:	08 95       	ret
    a6a8:	87 e3       	ldi	r24, 0x37	; 55
}
    a6aa:	08 95       	ret

0000a6ac <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a6ac:	8c 59       	subi	r24, 0x9C	; 156
    a6ae:	93 4f       	sbci	r25, 0xF3	; 243
    a6b0:	fc 01       	movw	r30, r24
    a6b2:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a6b4:	83 30       	cpi	r24, 0x03	; 3
    a6b6:	41 f0       	breq	.+16     	; 0xa6c8 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a6b8:	86 30       	cpi	r24, 0x06	; 6
    a6ba:	41 f0       	breq	.+16     	; 0xa6cc <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a6bc:	84 30       	cpi	r24, 0x04	; 4
    a6be:	41 f0       	breq	.+16     	; 0xa6d0 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a6c0:	85 30       	cpi	r24, 0x05	; 5
    a6c2:	41 f0       	breq	.+16     	; 0xa6d4 <solid_directional_tile+0x28>
	
	return 0;
    a6c4:	80 e0       	ldi	r24, 0x00	; 0
    a6c6:	08 95       	ret
    a6c8:	83 e0       	ldi	r24, 0x03	; 3
    a6ca:	08 95       	ret
    a6cc:	86 e0       	ldi	r24, 0x06	; 6
    a6ce:	08 95       	ret
    a6d0:	84 e0       	ldi	r24, 0x04	; 4
    a6d2:	08 95       	ret
    a6d4:	85 e0       	ldi	r24, 0x05	; 5
}
    a6d6:	08 95       	ret

0000a6d8 <solid_tile>:

u8 solid_tile(int tile_index)
{
    a6d8:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a6da:	fc 01       	movw	r30, r24
    a6dc:	ec 59       	subi	r30, 0x9C	; 156
    a6de:	f3 4f       	sbci	r31, 0xF3	; 243
    a6e0:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a6e2:	91 30       	cpi	r25, 0x01	; 1
    a6e4:	39 f0       	breq	.+14     	; 0xa6f4 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a6e6:	92 30       	cpi	r25, 0x02	; 2
    a6e8:	39 f0       	breq	.+14     	; 0xa6f8 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a6ea:	97 33       	cpi	r25, 0x37	; 55
    a6ec:	39 f0       	breq	.+14     	; 0xa6fc <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a6ee:	c9 01       	movw	r24, r18
    a6f0:	0c 94 56 53 	jmp	0xa6ac	; 0xa6ac <solid_directional_tile>
    a6f4:	81 e0       	ldi	r24, 0x01	; 1
    a6f6:	08 95       	ret
    a6f8:	82 e0       	ldi	r24, 0x02	; 2
    a6fa:	08 95       	ret
    a6fc:	87 e3       	ldi	r24, 0x37	; 55
}
    a6fe:	08 95       	ret

0000a700 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    a700:	7f 92       	push	r7
    a702:	8f 92       	push	r8
    a704:	9f 92       	push	r9
    a706:	af 92       	push	r10
    a708:	bf 92       	push	r11
    a70a:	cf 92       	push	r12
    a70c:	df 92       	push	r13
    a70e:	ef 92       	push	r14
    a710:	ff 92       	push	r15
    a712:	0f 93       	push	r16
    a714:	1f 93       	push	r17
    a716:	cf 93       	push	r28
    a718:	df 93       	push	r29
    a71a:	b6 2e       	mov	r11, r22
    a71c:	94 2e       	mov	r9, r20
    a71e:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    a720:	fc 01       	movw	r30, r24
    a722:	ec 59       	subi	r30, 0x9C	; 156
    a724:	f3 4f       	sbci	r31, 0xF3	; 243
    a726:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    a728:	6e e1       	ldi	r22, 0x1E	; 30
    a72a:	70 e0       	ldi	r23, 0x00	; 0
    a72c:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    a730:	f8 2e       	mov	r15, r24
    a732:	ff 0c       	add	r15, r15
    a734:	ff 0c       	add	r15, r15
    a736:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    a738:	6d 5f       	subi	r22, 0xFD	; 253
    a73a:	7f 4f       	sbci	r23, 0xFF	; 255
    a73c:	16 2f       	mov	r17, r22
    a73e:	11 0f       	add	r17, r17
    a740:	11 0f       	add	r17, r17
    a742:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    a744:	83 e0       	ldi	r24, 0x03	; 3
    a746:	d8 16       	cp	r13, r24
    a748:	19 f0       	breq	.+6      	; 0xa750 <collides_directional_tile+0x50>
    a74a:	86 e0       	ldi	r24, 0x06	; 6
    a74c:	d8 12       	cpse	r13, r24
    a74e:	31 c0       	rjmp	.+98     	; 0xa7b2 <collides_directional_tile+0xb2>
    a750:	cf ef       	ldi	r28, 0xFF	; 255
    a752:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    a754:	c9 0d       	add	r28, r9
    a756:	27 e0       	ldi	r18, 0x07	; 7
    a758:	72 2e       	mov	r7, r18
    a75a:	7f 0c       	add	r7, r15
    a75c:	37 e0       	ldi	r19, 0x07	; 7
    a75e:	83 2e       	mov	r8, r19
    a760:	81 0e       	add	r8, r17
    a762:	ac 2e       	mov	r10, r28
    a764:	cb 2c       	mov	r12, r11
    a766:	e9 2c       	mov	r14, r9
    a768:	0b 2d       	mov	r16, r11
    a76a:	21 2f       	mov	r18, r17
    a76c:	47 2d       	mov	r20, r7
    a76e:	68 2d       	mov	r22, r8
    a770:	8f 2d       	mov	r24, r15
    a772:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a776:	81 11       	cpse	r24, r1
    a778:	58 c0       	rjmp	.+176    	; 0xa82a <collides_directional_tile+0x12a>
    a77a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    a77c:	db 0d       	add	r29, r11
    a77e:	a9 2c       	mov	r10, r9
    a780:	cd 2e       	mov	r12, r29
    a782:	21 2f       	mov	r18, r17
    a784:	47 2d       	mov	r20, r7
    a786:	68 2d       	mov	r22, r8
    a788:	8f 2d       	mov	r24, r15
    a78a:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a78e:	81 11       	cpse	r24, r1
    a790:	4c c0       	rjmp	.+152    	; 0xa82a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    a792:	ac 2e       	mov	r10, r28
    a794:	0d 2f       	mov	r16, r29
    a796:	21 2f       	mov	r18, r17
    a798:	47 2d       	mov	r20, r7
    a79a:	68 2d       	mov	r22, r8
    a79c:	8f 2d       	mov	r24, r15
    a79e:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a7a2:	81 11       	cpse	r24, r1
    a7a4:	42 c0       	rjmp	.+132    	; 0xa82a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    a7a6:	ec 2e       	mov	r14, r28
    a7a8:	0b 2d       	mov	r16, r11
    a7aa:	21 2f       	mov	r18, r17
    a7ac:	47 2d       	mov	r20, r7
    a7ae:	68 2d       	mov	r22, r8
    a7b0:	34 c0       	rjmp	.+104    	; 0xa81a <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    a7b2:	8c ef       	ldi	r24, 0xFC	; 252
    a7b4:	8d 0d       	add	r24, r13
    a7b6:	82 30       	cpi	r24, 0x02	; 2
    a7b8:	b0 f5       	brcc	.+108    	; 0xa826 <collides_directional_tile+0x126>
    a7ba:	cf ef       	ldi	r28, 0xFF	; 255
    a7bc:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    a7be:	c4 0f       	add	r28, r20
    a7c0:	87 e0       	ldi	r24, 0x07	; 7
    a7c2:	78 2e       	mov	r7, r24
    a7c4:	71 0e       	add	r7, r17
    a7c6:	97 e0       	ldi	r25, 0x07	; 7
    a7c8:	89 2e       	mov	r8, r25
    a7ca:	8f 0c       	add	r8, r15
    a7cc:	ac 2e       	mov	r10, r28
    a7ce:	cb 2c       	mov	r12, r11
    a7d0:	e4 2e       	mov	r14, r20
    a7d2:	0b 2d       	mov	r16, r11
    a7d4:	27 2d       	mov	r18, r7
    a7d6:	48 2d       	mov	r20, r8
    a7d8:	61 2f       	mov	r22, r17
    a7da:	8f 2d       	mov	r24, r15
    a7dc:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a7e0:	81 11       	cpse	r24, r1
    a7e2:	23 c0       	rjmp	.+70     	; 0xa82a <collides_directional_tile+0x12a>
    a7e4:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    a7e6:	db 0d       	add	r29, r11
    a7e8:	a9 2c       	mov	r10, r9
    a7ea:	cd 2e       	mov	r12, r29
    a7ec:	27 2d       	mov	r18, r7
    a7ee:	48 2d       	mov	r20, r8
    a7f0:	61 2f       	mov	r22, r17
    a7f2:	8f 2d       	mov	r24, r15
    a7f4:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a7f8:	81 11       	cpse	r24, r1
    a7fa:	17 c0       	rjmp	.+46     	; 0xa82a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    a7fc:	ac 2e       	mov	r10, r28
    a7fe:	0d 2f       	mov	r16, r29
    a800:	27 2d       	mov	r18, r7
    a802:	48 2d       	mov	r20, r8
    a804:	61 2f       	mov	r22, r17
    a806:	8f 2d       	mov	r24, r15
    a808:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a80c:	81 11       	cpse	r24, r1
    a80e:	0d c0       	rjmp	.+26     	; 0xa82a <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    a810:	ec 2e       	mov	r14, r28
    a812:	0b 2d       	mov	r16, r11
    a814:	27 2d       	mov	r18, r7
    a816:	48 2d       	mov	r20, r8
    a818:	61 2f       	mov	r22, r17
    a81a:	8f 2d       	mov	r24, r15
    a81c:	0e 94 af 4c 	call	0x995e	; 0x995e <LBLineIntersect>
    a820:	81 11       	cpse	r24, r1
    a822:	03 c0       	rjmp	.+6      	; 0xa82a <collides_directional_tile+0x12a>
    a824:	03 c0       	rjmp	.+6      	; 0xa82c <collides_directional_tile+0x12c>
	}
	
	return 0;
    a826:	80 e0       	ldi	r24, 0x00	; 0
    a828:	01 c0       	rjmp	.+2      	; 0xa82c <collides_directional_tile+0x12c>
    a82a:	8d 2d       	mov	r24, r13
}
    a82c:	df 91       	pop	r29
    a82e:	cf 91       	pop	r28
    a830:	1f 91       	pop	r17
    a832:	0f 91       	pop	r16
    a834:	ff 90       	pop	r15
    a836:	ef 90       	pop	r14
    a838:	df 90       	pop	r13
    a83a:	cf 90       	pop	r12
    a83c:	bf 90       	pop	r11
    a83e:	af 90       	pop	r10
    a840:	9f 90       	pop	r9
    a842:	8f 90       	pop	r8
    a844:	7f 90       	pop	r7
    a846:	08 95       	ret

0000a848 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a848:	8f 92       	push	r8
    a84a:	9f 92       	push	r9
    a84c:	af 92       	push	r10
    a84e:	cf 92       	push	r12
    a850:	ef 92       	push	r14
    a852:	0f 93       	push	r16
    a854:	1f 93       	push	r17
    a856:	cf 93       	push	r28
    a858:	df 93       	push	r29
    a85a:	4c 01       	movw	r8, r24
    a85c:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a85e:	20 e0       	ldi	r18, 0x00	; 0
    a860:	30 e0       	ldi	r19, 0x00	; 0
    a862:	40 e0       	ldi	r20, 0x00	; 0
    a864:	50 e4       	ldi	r21, 0x40	; 64
    a866:	6f 81       	ldd	r22, Y+7	; 0x07
    a868:	78 85       	ldd	r23, Y+8	; 0x08
    a86a:	89 85       	ldd	r24, Y+9	; 0x09
    a86c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a86e:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a872:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a876:	e6 2e       	mov	r14, r22
    a878:	20 e0       	ldi	r18, 0x00	; 0
    a87a:	30 e0       	ldi	r19, 0x00	; 0
    a87c:	40 e0       	ldi	r20, 0x00	; 0
    a87e:	50 e4       	ldi	r21, 0x40	; 64
    a880:	6b 81       	ldd	r22, Y+3	; 0x03
    a882:	7c 81       	ldd	r23, Y+4	; 0x04
    a884:	8d 81       	ldd	r24, Y+5	; 0x05
    a886:	9e 81       	ldd	r25, Y+6	; 0x06
    a888:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a88c:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a890:	06 2f       	mov	r16, r22
    a892:	20 e0       	ldi	r18, 0x00	; 0
    a894:	30 e0       	ldi	r19, 0x00	; 0
    a896:	40 e8       	ldi	r20, 0x80	; 128
    a898:	5f e3       	ldi	r21, 0x3F	; 63
    a89a:	f4 01       	movw	r30, r8
    a89c:	67 81       	ldd	r22, Z+7	; 0x07
    a89e:	70 85       	ldd	r23, Z+8	; 0x08
    a8a0:	81 85       	ldd	r24, Z+9	; 0x09
    a8a2:	92 85       	ldd	r25, Z+10	; 0x0a
    a8a4:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a8a8:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a8ac:	16 2f       	mov	r17, r22
    a8ae:	20 e0       	ldi	r18, 0x00	; 0
    a8b0:	30 e0       	ldi	r19, 0x00	; 0
    a8b2:	40 e8       	ldi	r20, 0x80	; 128
    a8b4:	5f e3       	ldi	r21, 0x3F	; 63
    a8b6:	f4 01       	movw	r30, r8
    a8b8:	63 81       	ldd	r22, Z+3	; 0x03
    a8ba:	74 81       	ldd	r23, Z+4	; 0x04
    a8bc:	85 81       	ldd	r24, Z+5	; 0x05
    a8be:	96 81       	ldd	r25, Z+6	; 0x06
    a8c0:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a8c4:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a8c8:	86 2f       	mov	r24, r22
    a8ca:	94 e0       	ldi	r25, 0x04	; 4
    a8cc:	a9 2e       	mov	r10, r25
    a8ce:	24 e0       	ldi	r18, 0x04	; 4
    a8d0:	c2 2e       	mov	r12, r18
    a8d2:	2e e0       	ldi	r18, 0x0E	; 14
    a8d4:	4e e0       	ldi	r20, 0x0E	; 14
    a8d6:	61 2f       	mov	r22, r17
    a8d8:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a8dc:	88 23       	and	r24, r24
    a8de:	41 f0       	breq	.+16     	; 0xa8f0 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a8e0:	f4 01       	movw	r30, r8
    a8e2:	86 89       	ldd	r24, Z+22	; 0x16
    a8e4:	88 37       	cpi	r24, 0x78	; 120
    a8e6:	21 f4       	brne	.+8      	; 0xa8f0 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a8e8:	81 e0       	ldi	r24, 0x01	; 1
    a8ea:	9f 85       	ldd	r25, Y+15	; 0x0f
    a8ec:	99 30       	cpi	r25, 0x09	; 9
    a8ee:	08 f4       	brcc	.+2      	; 0xa8f2 <player_shot+0xaa>
    a8f0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a8f2:	df 91       	pop	r29
    a8f4:	cf 91       	pop	r28
    a8f6:	1f 91       	pop	r17
    a8f8:	0f 91       	pop	r16
    a8fa:	ef 90       	pop	r14
    a8fc:	cf 90       	pop	r12
    a8fe:	af 90       	pop	r10
    a900:	9f 90       	pop	r9
    a902:	8f 90       	pop	r8
    a904:	08 95       	ret

0000a906 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    a906:	af 92       	push	r10
    a908:	cf 92       	push	r12
    a90a:	ef 92       	push	r14
    a90c:	0f 93       	push	r16
    a90e:	1f 93       	push	r17
    a910:	cf 93       	push	r28
    a912:	df 93       	push	r29
    a914:	ec 01       	movw	r28, r24
    a916:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    a918:	20 e0       	ldi	r18, 0x00	; 0
    a91a:	30 e0       	ldi	r19, 0x00	; 0
    a91c:	40 e0       	ldi	r20, 0x00	; 0
    a91e:	50 e4       	ldi	r21, 0x40	; 64
    a920:	fb 01       	movw	r30, r22
    a922:	67 81       	ldd	r22, Z+7	; 0x07
    a924:	70 85       	ldd	r23, Z+8	; 0x08
    a926:	81 85       	ldd	r24, Z+9	; 0x09
    a928:	92 85       	ldd	r25, Z+10	; 0x0a
    a92a:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a92e:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a932:	e6 2e       	mov	r14, r22
    a934:	20 e0       	ldi	r18, 0x00	; 0
    a936:	30 e0       	ldi	r19, 0x00	; 0
    a938:	40 e0       	ldi	r20, 0x00	; 0
    a93a:	50 e4       	ldi	r21, 0x40	; 64
    a93c:	f8 01       	movw	r30, r16
    a93e:	63 81       	ldd	r22, Z+3	; 0x03
    a940:	74 81       	ldd	r23, Z+4	; 0x04
    a942:	85 81       	ldd	r24, Z+5	; 0x05
    a944:	96 81       	ldd	r25, Z+6	; 0x06
    a946:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a94a:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a94e:	06 2f       	mov	r16, r22
    a950:	6f 81       	ldd	r22, Y+7	; 0x07
    a952:	78 85       	ldd	r23, Y+8	; 0x08
    a954:	89 85       	ldd	r24, Y+9	; 0x09
    a956:	9a 85       	ldd	r25, Y+10	; 0x0a
    a958:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a95c:	16 2f       	mov	r17, r22
    a95e:	6b 81       	ldd	r22, Y+3	; 0x03
    a960:	7c 81       	ldd	r23, Y+4	; 0x04
    a962:	8d 81       	ldd	r24, Y+5	; 0x05
    a964:	9e 81       	ldd	r25, Y+6	; 0x06
    a966:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    a96a:	86 2f       	mov	r24, r22
    a96c:	94 e0       	ldi	r25, 0x04	; 4
    a96e:	a9 2e       	mov	r10, r25
    a970:	24 e0       	ldi	r18, 0x04	; 4
    a972:	c2 2e       	mov	r12, r18
    a974:	28 e0       	ldi	r18, 0x08	; 8
    a976:	48 e0       	ldi	r20, 0x08	; 8
    a978:	61 2f       	mov	r22, r17
    a97a:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
    a97e:	88 23       	and	r24, r24
    a980:	39 f0       	breq	.+14     	; 0xa990 <turret_shot+0x8a>
    a982:	91 e0       	ldi	r25, 0x01	; 1
    a984:	8b 85       	ldd	r24, Y+11	; 0x0b
    a986:	81 11       	cpse	r24, r1
    a988:	01 c0       	rjmp	.+2      	; 0xa98c <turret_shot+0x86>
    a98a:	90 e0       	ldi	r25, 0x00	; 0
    a98c:	89 2f       	mov	r24, r25
    a98e:	01 c0       	rjmp	.+2      	; 0xa992 <turret_shot+0x8c>
    a990:	80 e0       	ldi	r24, 0x00	; 0
}
    a992:	df 91       	pop	r29
    a994:	cf 91       	pop	r28
    a996:	1f 91       	pop	r17
    a998:	0f 91       	pop	r16
    a99a:	ef 90       	pop	r14
    a99c:	cf 90       	pop	r12
    a99e:	af 90       	pop	r10
    a9a0:	08 95       	ret

0000a9a2 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    a9a2:	cf 92       	push	r12
    a9a4:	df 92       	push	r13
    a9a6:	ef 92       	push	r14
    a9a8:	ff 92       	push	r15
    a9aa:	cf 93       	push	r28
    a9ac:	df 93       	push	r29
    a9ae:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a9b0:	cb 80       	ldd	r12, Y+3	; 0x03
    a9b2:	dc 80       	ldd	r13, Y+4	; 0x04
    a9b4:	ed 80       	ldd	r14, Y+5	; 0x05
    a9b6:	fe 80       	ldd	r15, Y+6	; 0x06
    a9b8:	20 e0       	ldi	r18, 0x00	; 0
    a9ba:	30 e0       	ldi	r19, 0x00	; 0
    a9bc:	a9 01       	movw	r20, r18
    a9be:	c7 01       	movw	r24, r14
    a9c0:	b6 01       	movw	r22, r12
    a9c2:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    a9c6:	87 fd       	sbrc	r24, 7
    a9c8:	31 c0       	rjmp	.+98     	; 0xaa2c <collision_detect_boundries+0x8a>
    a9ca:	20 e0       	ldi	r18, 0x00	; 0
    a9cc:	30 e0       	ldi	r19, 0x00	; 0
    a9ce:	40 e0       	ldi	r20, 0x00	; 0
    a9d0:	51 e4       	ldi	r21, 0x41	; 65
    a9d2:	c7 01       	movw	r24, r14
    a9d4:	b6 01       	movw	r22, r12
    a9d6:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    a9da:	20 e0       	ldi	r18, 0x00	; 0
    a9dc:	30 e0       	ldi	r19, 0x00	; 0
    a9de:	40 e7       	ldi	r20, 0x70	; 112
    a9e0:	53 e4       	ldi	r21, 0x43	; 67
    a9e2:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    a9e6:	18 16       	cp	r1, r24
    a9e8:	0c f1       	brlt	.+66     	; 0xaa2c <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a9ea:	cf 80       	ldd	r12, Y+7	; 0x07
    a9ec:	d8 84       	ldd	r13, Y+8	; 0x08
    a9ee:	e9 84       	ldd	r14, Y+9	; 0x09
    a9f0:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a9f2:	20 e0       	ldi	r18, 0x00	; 0
    a9f4:	30 e0       	ldi	r19, 0x00	; 0
    a9f6:	40 ec       	ldi	r20, 0xC0	; 192
    a9f8:	51 e4       	ldi	r21, 0x41	; 65
    a9fa:	c7 01       	movw	r24, r14
    a9fc:	b6 01       	movw	r22, r12
    a9fe:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    aa02:	87 fd       	sbrc	r24, 7
    aa04:	13 c0       	rjmp	.+38     	; 0xaa2c <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aa06:	20 e0       	ldi	r18, 0x00	; 0
    aa08:	30 e0       	ldi	r19, 0x00	; 0
    aa0a:	40 e0       	ldi	r20, 0x00	; 0
    aa0c:	51 e4       	ldi	r21, 0x41	; 65
    aa0e:	c7 01       	movw	r24, r14
    aa10:	b6 01       	movw	r22, r12
    aa12:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    aa16:	c1 e0       	ldi	r28, 0x01	; 1
    aa18:	20 e0       	ldi	r18, 0x00	; 0
    aa1a:	30 e0       	ldi	r19, 0x00	; 0
    aa1c:	40 e6       	ldi	r20, 0x60	; 96
    aa1e:	53 e4       	ldi	r21, 0x43	; 67
    aa20:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    aa24:	18 16       	cp	r1, r24
    aa26:	1c f0       	brlt	.+6      	; 0xaa2e <collision_detect_boundries+0x8c>
    aa28:	c0 e0       	ldi	r28, 0x00	; 0
    aa2a:	01 c0       	rjmp	.+2      	; 0xaa2e <collision_detect_boundries+0x8c>
	{
		return 1;
    aa2c:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    aa2e:	8c 2f       	mov	r24, r28
    aa30:	df 91       	pop	r29
    aa32:	cf 91       	pop	r28
    aa34:	ff 90       	pop	r15
    aa36:	ef 90       	pop	r14
    aa38:	df 90       	pop	r13
    aa3a:	cf 90       	pop	r12
    aa3c:	08 95       	ret

0000aa3e <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aa3e:	1f 93       	push	r17
    aa40:	cf 93       	push	r28
    aa42:	df 93       	push	r29
    aa44:	9c 01       	movw	r18, r24
    aa46:	fb 01       	movw	r30, r22
    aa48:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    aa4a:	6e e1       	ldi	r22, 0x1E	; 30
    aa4c:	70 e0       	ldi	r23, 0x00	; 0
    aa4e:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    aa52:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    aa54:	63 e0       	ldi	r22, 0x03	; 3
    aa56:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    aa58:	e9 01       	movw	r28, r18
    aa5a:	cc 59       	subi	r28, 0x9C	; 156
    aa5c:	d3 4f       	sbci	r29, 0xF3	; 243
    aa5e:	49 81       	ldd	r20, Y+1	; 0x01
    aa60:	44 23       	and	r20, r20
    aa62:	71 f0       	breq	.+28     	; 0xaa80 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    aa64:	e9 01       	movw	r28, r18
    aa66:	cb 59       	subi	r28, 0x9B	; 155
    aa68:	d3 4f       	sbci	r29, 0xF3	; 243
    aa6a:	49 81       	ldd	r20, Y+1	; 0x01
    aa6c:	44 23       	and	r20, r20
    aa6e:	91 f0       	breq	.+36     	; 0xaa94 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aa70:	e9 01       	movw	r28, r18
    aa72:	ce 57       	subi	r28, 0x7E	; 126
    aa74:	d3 4f       	sbci	r29, 0xF3	; 243
    aa76:	49 81       	ldd	r20, Y+1	; 0x01
    aa78:	41 11       	cpse	r20, r1
    aa7a:	04 c0       	rjmp	.+8      	; 0xaa84 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    aa7c:	64 e0       	ldi	r22, 0x04	; 4
    aa7e:	69 0f       	add	r22, r25
    aa80:	af 01       	movw	r20, r30
    aa82:	0a c0       	rjmp	.+20     	; 0xaa98 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    aa84:	e9 01       	movw	r28, r18
    aa86:	cd 57       	subi	r28, 0x7D	; 125
    aa88:	d3 4f       	sbci	r29, 0xF3	; 243
    aa8a:	29 81       	ldd	r18, Y+1	; 0x01
    aa8c:	21 11       	cpse	r18, r1
    aa8e:	07 c0       	rjmp	.+14     	; 0xaa9e <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    aa90:	64 e0       	ldi	r22, 0x04	; 4
    aa92:	69 0f       	add	r22, r25
    aa94:	af 01       	movw	r20, r30
    aa96:	8f 5f       	subi	r24, 0xFF	; 255
    aa98:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    aa9c:	19 83       	std	Y+1, r17	; 0x01
	}
}
    aa9e:	df 91       	pop	r29
    aaa0:	cf 91       	pop	r28
    aaa2:	1f 91       	pop	r17
    aaa4:	08 95       	ret

0000aaa6 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    aaa6:	ff 92       	push	r15
    aaa8:	0f 93       	push	r16
    aaaa:	1f 93       	push	r17
    aaac:	cf 93       	push	r28
    aaae:	df 93       	push	r29
    aab0:	ec 01       	movw	r28, r24
    aab2:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    aab4:	20 e0       	ldi	r18, 0x00	; 0
    aab6:	30 e0       	ldi	r19, 0x00	; 0
    aab8:	40 e0       	ldi	r20, 0x00	; 0
    aaba:	5e e3       	ldi	r21, 0x3E	; 62
    aabc:	6f 81       	ldd	r22, Y+7	; 0x07
    aabe:	78 85       	ldd	r23, Y+8	; 0x08
    aac0:	89 85       	ldd	r24, Y+9	; 0x09
    aac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    aac4:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    aac8:	20 e0       	ldi	r18, 0x00	; 0
    aaca:	30 e0       	ldi	r19, 0x00	; 0
    aacc:	40 e4       	ldi	r20, 0x40	; 64
    aace:	50 e4       	ldi	r21, 0x40	; 64
    aad0:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    aad4:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    aad8:	8e e1       	ldi	r24, 0x1E	; 30
    aada:	68 9f       	mul	r22, r24
    aadc:	80 01       	movw	r16, r0
    aade:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    aae0:	20 e0       	ldi	r18, 0x00	; 0
    aae2:	30 e0       	ldi	r19, 0x00	; 0
    aae4:	40 e0       	ldi	r20, 0x00	; 0
    aae6:	5e e3       	ldi	r21, 0x3E	; 62
    aae8:	6b 81       	ldd	r22, Y+3	; 0x03
    aaea:	7c 81       	ldd	r23, Y+4	; 0x04
    aaec:	8d 81       	ldd	r24, Y+5	; 0x05
    aaee:	9e 81       	ldd	r25, Y+6	; 0x06
    aaf0:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    aaf4:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    aaf8:	06 0f       	add	r16, r22
    aafa:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    aafc:	89 8d       	ldd	r24, Y+25	; 0x19
    aafe:	88 23       	and	r24, r24
    ab00:	79 f0       	breq	.+30     	; 0xab20 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ab02:	40 e0       	ldi	r20, 0x00	; 0
    ab04:	50 e0       	ldi	r21, 0x00	; 0
    ab06:	61 e0       	ldi	r22, 0x01	; 1
    ab08:	8a e0       	ldi	r24, 0x0A	; 10
    ab0a:	8f 0d       	add	r24, r15
    ab0c:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ab10:	47 e0       	ldi	r20, 0x07	; 7
    ab12:	61 e1       	ldi	r22, 0x11	; 17
    ab14:	7a e6       	ldi	r23, 0x6A	; 106
    ab16:	c8 01       	movw	r24, r16
    ab18:	0e 94 1f 55 	call	0xaa3e	; 0xaa3e <drop_item>
		player->max_speed = MAX_SPEED;
    ab1c:	82 e3       	ldi	r24, 0x32	; 50
    ab1e:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    ab20:	88 8d       	ldd	r24, Y+24	; 0x18
    ab22:	88 23       	and	r24, r24
    ab24:	69 f0       	breq	.+26     	; 0xab40 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    ab26:	40 e0       	ldi	r20, 0x00	; 0
    ab28:	50 e0       	ldi	r21, 0x00	; 0
    ab2a:	61 e0       	ldi	r22, 0x01	; 1
    ab2c:	8b e0       	ldi	r24, 0x0B	; 11
    ab2e:	8f 0d       	add	r24, r15
    ab30:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ab34:	49 e0       	ldi	r20, 0x09	; 9
    ab36:	6b e0       	ldi	r22, 0x0B	; 11
    ab38:	7a e6       	ldi	r23, 0x6A	; 106
    ab3a:	c8 01       	movw	r24, r16
    ab3c:	0e 94 1f 55 	call	0xaa3e	; 0xaa3e <drop_item>
	}
	player->has_over_speed = false;
    ab40:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    ab42:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    ab44:	8d 89       	ldd	r24, Y+21	; 0x15
    ab46:	81 60       	ori	r24, 0x01	; 1
    ab48:	8d 8b       	std	Y+21, r24	; 0x15
}
    ab4a:	df 91       	pop	r29
    ab4c:	cf 91       	pop	r28
    ab4e:	1f 91       	pop	r17
    ab50:	0f 91       	pop	r16
    ab52:	ff 90       	pop	r15
    ab54:	08 95       	ret

0000ab56 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ab56:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ab58:	70 e0       	ldi	r23, 0x00	; 0
    ab5a:	8e e1       	ldi	r24, 0x1E	; 30
    ab5c:	48 9f       	mul	r20, r24
    ab5e:	60 0d       	add	r22, r0
    ab60:	71 1d       	adc	r23, r1
    ab62:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ab64:	21 11       	cpse	r18, r1
    ab66:	05 c0       	rjmp	.+10     	; 0xab72 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    ab68:	71 83       	std	Z+1, r23	; 0x01
    ab6a:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ab6c:	6f 5f       	subi	r22, 0xFF	; 255
    ab6e:	7f 4f       	sbci	r23, 0xFF	; 255
    ab70:	0c c0       	rjmp	.+24     	; 0xab8a <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    ab72:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    ab74:	21 30       	cpi	r18, 0x01	; 1
    ab76:	11 f4       	brne	.+4      	; 0xab7c <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    ab78:	01 96       	adiw	r24, 0x01	; 1
    ab7a:	03 c0       	rjmp	.+6      	; 0xab82 <get_interesting_tile_indexes_shot+0x2c>
    ab7c:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    ab7e:	22 30       	cpi	r18, 0x02	; 2
    ab80:	39 f4       	brne	.+14     	; 0xab90 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    ab82:	91 83       	std	Z+1, r25	; 0x01
    ab84:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ab86:	61 5e       	subi	r22, 0xE1	; 225
    ab88:	7f 4f       	sbci	r23, 0xFF	; 255
    ab8a:	73 83       	std	Z+3, r23	; 0x03
    ab8c:	62 83       	std	Z+2, r22	; 0x02
    ab8e:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ab90:	71 83       	std	Z+1, r23	; 0x01
    ab92:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ab94:	93 83       	std	Z+3, r25	; 0x03
    ab96:	82 83       	std	Z+2, r24	; 0x02
    ab98:	08 95       	ret

0000ab9a <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    ab9a:	ef 92       	push	r14
    ab9c:	ff 92       	push	r15
    ab9e:	0f 93       	push	r16
    aba0:	1f 93       	push	r17
    aba2:	cf 93       	push	r28
    aba4:	df 93       	push	r29
    aba6:	ec 01       	movw	r28, r24
    aba8:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    abaa:	8e e1       	ldi	r24, 0x1E	; 30
    abac:	e8 2e       	mov	r14, r24
    abae:	f1 2c       	mov	r15, r1
    abb0:	cb 01       	movw	r24, r22
    abb2:	b7 01       	movw	r22, r14
    abb4:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    abb8:	6d 5f       	subi	r22, 0xFD	; 253
    abba:	40 e0       	ldi	r20, 0x00	; 0
    abbc:	50 e0       	ldi	r21, 0x00	; 0
    abbe:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    abc2:	88 81       	ld	r24, Y
    abc4:	fe 01       	movw	r30, r28
    abc6:	9e e0       	ldi	r25, 0x0E	; 14
    abc8:	89 9f       	mul	r24, r25
    abca:	e0 0d       	add	r30, r0
    abcc:	f1 1d       	adc	r31, r1
    abce:	11 24       	eor	r1, r1
    abd0:	85 85       	ldd	r24, Z+13	; 0x0d
    abd2:	96 85       	ldd	r25, Z+14	; 0x0e
    abd4:	00 97       	sbiw	r24, 0x00	; 0
    abd6:	41 f0       	breq	.+16     	; 0xabe8 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    abd8:	b7 01       	movw	r22, r14
    abda:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    abde:	6d 5f       	subi	r22, 0xFD	; 253
    abe0:	40 e0       	ldi	r20, 0x00	; 0
    abe2:	50 e0       	ldi	r21, 0x00	; 0
    abe4:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    abe8:	88 81       	ld	r24, Y
    abea:	fe 01       	movw	r30, r28
    abec:	9e e0       	ldi	r25, 0x0E	; 14
    abee:	89 9f       	mul	r24, r25
    abf0:	e0 0d       	add	r30, r0
    abf2:	f1 1d       	adc	r31, r1
    abf4:	11 24       	eor	r1, r1
    abf6:	16 87       	std	Z+14, r17	; 0x0e
    abf8:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    abfa:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    abfc:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    abfe:	82 30       	cpi	r24, 0x02	; 2
    ac00:	11 f0       	breq	.+4      	; 0xac06 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    ac02:	88 83       	st	Y, r24
    ac04:	01 c0       	rjmp	.+2      	; 0xac08 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    ac06:	18 82       	st	Y, r1
	}
}
    ac08:	df 91       	pop	r29
    ac0a:	cf 91       	pop	r28
    ac0c:	1f 91       	pop	r17
    ac0e:	0f 91       	pop	r16
    ac10:	ff 90       	pop	r15
    ac12:	ef 90       	pop	r14
    ac14:	08 95       	ret

0000ac16 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    ac16:	fb 01       	movw	r30, r22
	switch (tile_type)
    ac18:	84 30       	cpi	r24, 0x04	; 4
    ac1a:	71 f0       	breq	.+28     	; 0xac38 <richochet+0x22>
    ac1c:	18 f4       	brcc	.+6      	; 0xac24 <richochet+0xe>
    ac1e:	83 30       	cpi	r24, 0x03	; 3
    ac20:	31 f0       	breq	.+12     	; 0xac2e <richochet+0x18>
    ac22:	08 95       	ret
    ac24:	85 30       	cpi	r24, 0x05	; 5
    ac26:	99 f0       	breq	.+38     	; 0xac4e <richochet+0x38>
    ac28:	86 30       	cpi	r24, 0x06	; 6
    ac2a:	59 f0       	breq	.+22     	; 0xac42 <richochet+0x2c>
    ac2c:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac2e:	80 81       	ld	r24, Z
    ac30:	8d 7f       	andi	r24, 0xFD	; 253
    ac32:	29 f4       	brne	.+10     	; 0xac3e <richochet+0x28>
				sprite->direction = D_RIGHT;
    ac34:	81 e0       	ldi	r24, 0x01	; 1
    ac36:	09 c0       	rjmp	.+18     	; 0xac4a <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac38:	80 81       	ld	r24, Z
    ac3a:	8d 7f       	andi	r24, 0xFD	; 253
    ac3c:	29 f0       	breq	.+10     	; 0xac48 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ac3e:	82 e0       	ldi	r24, 0x02	; 2
    ac40:	04 c0       	rjmp	.+8      	; 0xac4a <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac42:	80 81       	ld	r24, Z
    ac44:	8d 7f       	andi	r24, 0xFD	; 253
    ac46:	31 f4       	brne	.+12     	; 0xac54 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ac48:	83 e0       	ldi	r24, 0x03	; 3
    ac4a:	80 83       	st	Z, r24
    ac4c:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac4e:	80 81       	ld	r24, Z
    ac50:	8d 7f       	andi	r24, 0xFD	; 253
    ac52:	81 f3       	breq	.-32     	; 0xac34 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ac54:	10 82       	st	Z, r1
    ac56:	08 95       	ret

0000ac58 <get_interesting_tile_indexes>:
        SFX_METAL;
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ac58:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ac5a:	70 e0       	ldi	r23, 0x00	; 0
    ac5c:	8e e1       	ldi	r24, 0x1E	; 30
    ac5e:	48 9f       	mul	r20, r24
    ac60:	60 0d       	add	r22, r0
    ac62:	71 1d       	adc	r23, r1
    ac64:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac66:	21 11       	cpse	r18, r1
    ac68:	09 c0       	rjmp	.+18     	; 0xac7c <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ac6a:	71 83       	std	Z+1, r23	; 0x01
    ac6c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ac6e:	cb 01       	movw	r24, r22
    ac70:	01 96       	adiw	r24, 0x01	; 1
    ac72:	93 83       	std	Z+3, r25	; 0x03
    ac74:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ac76:	6e 5f       	subi	r22, 0xFE	; 254
    ac78:	7f 4f       	sbci	r23, 0xFF	; 255
    ac7a:	12 c0       	rjmp	.+36     	; 0xaca0 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    ac7c:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    ac7e:	21 30       	cpi	r18, 0x01	; 1
    ac80:	29 f4       	brne	.+10     	; 0xac8c <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    ac82:	02 96       	adiw	r24, 0x02	; 2
    ac84:	91 83       	std	Z+1, r25	; 0x01
    ac86:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    ac88:	4e 96       	adiw	r24, 0x1e	; 30
    ac8a:	06 c0       	rjmp	.+12     	; 0xac98 <get_interesting_tile_indexes+0x40>
    ac8c:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    ac8e:	22 30       	cpi	r18, 0x02	; 2
    ac90:	51 f4       	brne	.+20     	; 0xaca6 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    ac92:	91 83       	std	Z+1, r25	; 0x01
    ac94:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ac96:	01 96       	adiw	r24, 0x01	; 1
    ac98:	93 83       	std	Z+3, r25	; 0x03
    ac9a:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ac9c:	62 5c       	subi	r22, 0xC2	; 194
    ac9e:	7f 4f       	sbci	r23, 0xFF	; 255
    aca0:	75 83       	std	Z+5, r23	; 0x05
    aca2:	64 83       	std	Z+4, r22	; 0x04
    aca4:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    aca6:	71 83       	std	Z+1, r23	; 0x01
    aca8:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    acaa:	62 5e       	subi	r22, 0xE2	; 226
    acac:	7f 4f       	sbci	r23, 0xFF	; 255
    acae:	73 83       	std	Z+3, r23	; 0x03
    acb0:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    acb2:	95 83       	std	Z+5, r25	; 0x05
    acb4:	84 83       	std	Z+4, r24	; 0x04
    acb6:	08 95       	ret

0000acb8 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    acb8:	1f 93       	push	r17
    acba:	cf 93       	push	r28
    acbc:	df 93       	push	r29
    acbe:	fc 01       	movw	r30, r24
    acc0:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    acc2:	55 96       	adiw	r26, 0x15	; 21
    acc4:	8c 91       	ld	r24, X
    acc6:	55 97       	sbiw	r26, 0x15	; 21
    acc8:	80 fd       	sbrc	r24, 0
    acca:	13 c0       	rjmp	.+38     	; 0xacf2 <explode_player+0x3a>
    accc:	12 2f       	mov	r17, r18
    acce:	64 2f       	mov	r22, r20
    acd0:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    acd2:	80 89       	ldd	r24, Z+16	; 0x10
    acd4:	8f 5f       	subi	r24, 0xFF	; 255
    acd6:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    acd8:	87 85       	ldd	r24, Z+15	; 0x0f
    acda:	8f 5f       	subi	r24, 0xFF	; 255
    acdc:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    acde:	cf 01       	movw	r24, r30
    ace0:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
		kill_player(other_player, other_player_hud_x);
    ace4:	61 2f       	mov	r22, r17
    ace6:	ce 01       	movw	r24, r28
	}
}
    ace8:	df 91       	pop	r29
    acea:	cf 91       	pop	r28
    acec:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    acee:	0c 94 53 55 	jmp	0xaaa6	; 0xaaa6 <kill_player>
	}
}
    acf2:	df 91       	pop	r29
    acf4:	cf 91       	pop	r28
    acf6:	1f 91       	pop	r17
    acf8:	08 95       	ret

0000acfa <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    acfa:	cf 92       	push	r12
    acfc:	df 92       	push	r13
    acfe:	ef 92       	push	r14
    ad00:	ff 92       	push	r15
    ad02:	cf 93       	push	r28
    ad04:	df 93       	push	r29
    ad06:	ec 01       	movw	r28, r24
    ad08:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    ad0a:	98 81       	ld	r25, Y
    ad0c:	9d 7f       	andi	r25, 0xFD	; 253
    ad0e:	09 f0       	breq	.+2      	; 0xad12 <slide+0x18>
    ad10:	54 c0       	rjmp	.+168    	; 0xadba <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    ad12:	ca 01       	movw	r24, r20
    ad14:	6e e1       	ldi	r22, 0x1E	; 30
    ad16:	70 e0       	ldi	r23, 0x00	; 0
    ad18:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    ad1c:	88 0f       	add	r24, r24
    ad1e:	88 0f       	add	r24, r24
    ad20:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    ad22:	21 11       	cpse	r18, r1
    ad24:	22 c0       	rjmp	.+68     	; 0xad6a <slide+0x70>
    ad26:	cb 80       	ldd	r12, Y+3	; 0x03
    ad28:	dc 80       	ldd	r13, Y+4	; 0x04
    ad2a:	ed 80       	ldd	r14, Y+5	; 0x05
    ad2c:	fe 80       	ldd	r15, Y+6	; 0x06
    ad2e:	68 2f       	mov	r22, r24
    ad30:	70 e0       	ldi	r23, 0x00	; 0
    ad32:	80 e0       	ldi	r24, 0x00	; 0
    ad34:	90 e0       	ldi	r25, 0x00	; 0
    ad36:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    ad3a:	9b 01       	movw	r18, r22
    ad3c:	ac 01       	movw	r20, r24
    ad3e:	c7 01       	movw	r24, r14
    ad40:	b6 01       	movw	r22, r12
    ad42:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    ad46:	20 e0       	ldi	r18, 0x00	; 0
    ad48:	30 e0       	ldi	r19, 0x00	; 0
    ad4a:	40 e8       	ldi	r20, 0x80	; 128
    ad4c:	50 e4       	ldi	r21, 0x40	; 64
    ad4e:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    ad52:	18 16       	cp	r1, r24
    ad54:	0c f0       	brlt	.+2      	; 0xad58 <slide+0x5e>
    ad56:	85 c0       	rjmp	.+266    	; 0xae62 <slide+0x168>
			player->shared.x++; 
    ad58:	20 e0       	ldi	r18, 0x00	; 0
    ad5a:	30 e0       	ldi	r19, 0x00	; 0
    ad5c:	40 e8       	ldi	r20, 0x80	; 128
    ad5e:	5f e3       	ldi	r21, 0x3F	; 63
    ad60:	c7 01       	movw	r24, r14
    ad62:	b6 01       	movw	r22, r12
    ad64:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    ad68:	23 c0       	rjmp	.+70     	; 0xadb0 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    ad6a:	22 30       	cpi	r18, 0x02	; 2
    ad6c:	09 f0       	breq	.+2      	; 0xad70 <slide+0x76>
    ad6e:	79 c0       	rjmp	.+242    	; 0xae62 <slide+0x168>
    ad70:	cb 80       	ldd	r12, Y+3	; 0x03
    ad72:	dc 80       	ldd	r13, Y+4	; 0x04
    ad74:	ed 80       	ldd	r14, Y+5	; 0x05
    ad76:	fe 80       	ldd	r15, Y+6	; 0x06
    ad78:	68 2f       	mov	r22, r24
    ad7a:	70 e0       	ldi	r23, 0x00	; 0
    ad7c:	80 e0       	ldi	r24, 0x00	; 0
    ad7e:	90 e0       	ldi	r25, 0x00	; 0
    ad80:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    ad84:	9b 01       	movw	r18, r22
    ad86:	ac 01       	movw	r20, r24
    ad88:	c7 01       	movw	r24, r14
    ad8a:	b6 01       	movw	r22, r12
    ad8c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    ad90:	20 e0       	ldi	r18, 0x00	; 0
    ad92:	30 e0       	ldi	r19, 0x00	; 0
    ad94:	40 e4       	ldi	r20, 0x40	; 64
    ad96:	51 ec       	ldi	r21, 0xC1	; 193
    ad98:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    ad9c:	87 ff       	sbrs	r24, 7
    ad9e:	61 c0       	rjmp	.+194    	; 0xae62 <slide+0x168>
			player->shared.x--;
    ada0:	20 e0       	ldi	r18, 0x00	; 0
    ada2:	30 e0       	ldi	r19, 0x00	; 0
    ada4:	40 e8       	ldi	r20, 0x80	; 128
    ada6:	5f e3       	ldi	r21, 0x3F	; 63
    ada8:	c7 01       	movw	r24, r14
    adaa:	b6 01       	movw	r22, r12
    adac:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    adb0:	6b 83       	std	Y+3, r22	; 0x03
    adb2:	7c 83       	std	Y+4, r23	; 0x04
    adb4:	8d 83       	std	Y+5, r24	; 0x05
    adb6:	9e 83       	std	Y+6, r25	; 0x06
    adb8:	54 c0       	rjmp	.+168    	; 0xae62 <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    adba:	ca 01       	movw	r24, r20
    adbc:	6e e1       	ldi	r22, 0x1E	; 30
    adbe:	70 e0       	ldi	r23, 0x00	; 0
    adc0:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    adc4:	ab 01       	movw	r20, r22
    adc6:	4d 5f       	subi	r20, 0xFD	; 253
    adc8:	5f 4f       	sbci	r21, 0xFF	; 255
    adca:	44 0f       	add	r20, r20
    adcc:	44 0f       	add	r20, r20
    adce:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    add0:	21 11       	cpse	r18, r1
    add2:	21 c0       	rjmp	.+66     	; 0xae16 <slide+0x11c>
    add4:	cf 80       	ldd	r12, Y+7	; 0x07
    add6:	d8 84       	ldd	r13, Y+8	; 0x08
    add8:	e9 84       	ldd	r14, Y+9	; 0x09
    adda:	fa 84       	ldd	r15, Y+10	; 0x0a
    addc:	64 2f       	mov	r22, r20
    adde:	70 e0       	ldi	r23, 0x00	; 0
    ade0:	80 e0       	ldi	r24, 0x00	; 0
    ade2:	90 e0       	ldi	r25, 0x00	; 0
    ade4:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    ade8:	9b 01       	movw	r18, r22
    adea:	ac 01       	movw	r20, r24
    adec:	c7 01       	movw	r24, r14
    adee:	b6 01       	movw	r22, r12
    adf0:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    adf4:	20 e0       	ldi	r18, 0x00	; 0
    adf6:	30 e0       	ldi	r19, 0x00	; 0
    adf8:	40 e8       	ldi	r20, 0x80	; 128
    adfa:	50 e4       	ldi	r21, 0x40	; 64
    adfc:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    ae00:	18 16       	cp	r1, r24
    ae02:	7c f5       	brge	.+94     	; 0xae62 <slide+0x168>
			player->shared.y++;
    ae04:	20 e0       	ldi	r18, 0x00	; 0
    ae06:	30 e0       	ldi	r19, 0x00	; 0
    ae08:	40 e8       	ldi	r20, 0x80	; 128
    ae0a:	5f e3       	ldi	r21, 0x3F	; 63
    ae0c:	c7 01       	movw	r24, r14
    ae0e:	b6 01       	movw	r22, r12
    ae10:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    ae14:	22 c0       	rjmp	.+68     	; 0xae5a <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    ae16:	22 30       	cpi	r18, 0x02	; 2
    ae18:	21 f5       	brne	.+72     	; 0xae62 <slide+0x168>
    ae1a:	cf 80       	ldd	r12, Y+7	; 0x07
    ae1c:	d8 84       	ldd	r13, Y+8	; 0x08
    ae1e:	e9 84       	ldd	r14, Y+9	; 0x09
    ae20:	fa 84       	ldd	r15, Y+10	; 0x0a
    ae22:	64 2f       	mov	r22, r20
    ae24:	70 e0       	ldi	r23, 0x00	; 0
    ae26:	80 e0       	ldi	r24, 0x00	; 0
    ae28:	90 e0       	ldi	r25, 0x00	; 0
    ae2a:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    ae2e:	9b 01       	movw	r18, r22
    ae30:	ac 01       	movw	r20, r24
    ae32:	c7 01       	movw	r24, r14
    ae34:	b6 01       	movw	r22, r12
    ae36:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    ae3a:	20 e0       	ldi	r18, 0x00	; 0
    ae3c:	30 e0       	ldi	r19, 0x00	; 0
    ae3e:	40 e4       	ldi	r20, 0x40	; 64
    ae40:	51 ec       	ldi	r21, 0xC1	; 193
    ae42:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    ae46:	87 ff       	sbrs	r24, 7
    ae48:	0c c0       	rjmp	.+24     	; 0xae62 <slide+0x168>
			player->shared.y--;
    ae4a:	20 e0       	ldi	r18, 0x00	; 0
    ae4c:	30 e0       	ldi	r19, 0x00	; 0
    ae4e:	40 e8       	ldi	r20, 0x80	; 128
    ae50:	5f e3       	ldi	r21, 0x3F	; 63
    ae52:	c7 01       	movw	r24, r14
    ae54:	b6 01       	movw	r22, r12
    ae56:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    ae5a:	6f 83       	std	Y+7, r22	; 0x07
    ae5c:	78 87       	std	Y+8, r23	; 0x08
    ae5e:	89 87       	std	Y+9, r24	; 0x09
    ae60:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    ae62:	df 91       	pop	r29
    ae64:	cf 91       	pop	r28
    ae66:	ff 90       	pop	r15
    ae68:	ef 90       	pop	r14
    ae6a:	df 90       	pop	r13
    ae6c:	cf 90       	pop	r12
    ae6e:	08 95       	ret

0000ae70 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    ae70:	2f 92       	push	r2
    ae72:	3f 92       	push	r3
    ae74:	4f 92       	push	r4
    ae76:	5f 92       	push	r5
    ae78:	6f 92       	push	r6
    ae7a:	7f 92       	push	r7
    ae7c:	8f 92       	push	r8
    ae7e:	9f 92       	push	r9
    ae80:	af 92       	push	r10
    ae82:	bf 92       	push	r11
    ae84:	cf 92       	push	r12
    ae86:	df 92       	push	r13
    ae88:	ef 92       	push	r14
    ae8a:	ff 92       	push	r15
    ae8c:	0f 93       	push	r16
    ae8e:	1f 93       	push	r17
    ae90:	cf 93       	push	r28
    ae92:	df 93       	push	r29
    ae94:	cd b7       	in	r28, 0x3d	; 61
    ae96:	de b7       	in	r29, 0x3e	; 62
    ae98:	2b 97       	sbiw	r28, 0x0b	; 11
    ae9a:	0f b6       	in	r0, 0x3f	; 63
    ae9c:	f8 94       	cli
    ae9e:	de bf       	out	0x3e, r29	; 62
    aea0:	0f be       	out	0x3f, r0	; 63
    aea2:	cd bf       	out	0x3d, r28	; 61
    aea4:	4c 01       	movw	r8, r24
    aea6:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    aea8:	1a 82       	std	Y+2, r1	; 0x02
    aeaa:	19 82       	std	Y+1, r1	; 0x01
    aeac:	1c 82       	std	Y+4, r1	; 0x04
    aeae:	1b 82       	std	Y+3, r1	; 0x03
    aeb0:	1e 82       	std	Y+6, r1	; 0x06
    aeb2:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    aeb4:	20 e0       	ldi	r18, 0x00	; 0
    aeb6:	30 e0       	ldi	r19, 0x00	; 0
    aeb8:	40 e0       	ldi	r20, 0x00	; 0
    aeba:	5e e3       	ldi	r21, 0x3E	; 62
    aebc:	dc 01       	movw	r26, r24
    aebe:	17 96       	adiw	r26, 0x07	; 7
    aec0:	6d 91       	ld	r22, X+
    aec2:	7d 91       	ld	r23, X+
    aec4:	8d 91       	ld	r24, X+
    aec6:	9c 91       	ld	r25, X
    aec8:	1a 97       	sbiw	r26, 0x0a	; 10
    aeca:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    aece:	20 e0       	ldi	r18, 0x00	; 0
    aed0:	30 e0       	ldi	r19, 0x00	; 0
    aed2:	40 e4       	ldi	r20, 0x40	; 64
    aed4:	50 e4       	ldi	r21, 0x40	; 64
    aed6:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    aeda:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    aede:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    aee0:	20 e0       	ldi	r18, 0x00	; 0
    aee2:	30 e0       	ldi	r19, 0x00	; 0
    aee4:	40 e0       	ldi	r20, 0x00	; 0
    aee6:	5e e3       	ldi	r21, 0x3E	; 62
    aee8:	f4 01       	movw	r30, r8
    aeea:	63 81       	ldd	r22, Z+3	; 0x03
    aeec:	74 81       	ldd	r23, Z+4	; 0x04
    aeee:	85 81       	ldd	r24, Z+5	; 0x05
    aef0:	96 81       	ldd	r25, Z+6	; 0x06
    aef2:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    aef6:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    aefa:	d4 01       	movw	r26, r8
    aefc:	2c 91       	ld	r18, X
    aefe:	40 2f       	mov	r20, r16
    af00:	ce 01       	movw	r24, r28
    af02:	01 96       	adiw	r24, 0x01	; 1
    af04:	0e 94 2c 56 	call	0xac58	; 0xac58 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    af08:	c4 01       	movw	r24, r8
    af0a:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <collision_detect_boundries>
    af0e:	88 23       	and	r24, r24
    af10:	39 f0       	breq	.+14     	; 0xaf20 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    af12:	c4 01       	movw	r24, r8
    af14:	0e 94 b4 52 	call	0xa568	; 0xa568 <recoil_sprite>
		player->shared.speed = 0;
    af18:	f4 01       	movw	r30, r8
    af1a:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    af1c:	41 2c       	mov	r4, r1
    af1e:	10 c1       	rjmp	.+544    	; 0xb140 <collision_detect_player+0x2d0>
    af20:	ce 01       	movw	r24, r28
    af22:	01 96       	adiw	r24, 0x01	; 1
    af24:	98 87       	std	Y+8, r25	; 0x08
    af26:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    af28:	51 2c       	mov	r5, r1
    af2a:	b1 2c       	mov	r11, r1
    af2c:	d1 2c       	mov	r13, r1
    af2e:	41 2c       	mov	r4, r1
    af30:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    af32:	9b e0       	ldi	r25, 0x0B	; 11
    af34:	91 0f       	add	r25, r17
    af36:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    af38:	16 5f       	subi	r17, 0xF6	; 246
    af3a:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    af3c:	af 81       	ldd	r26, Y+7	; 0x07
    af3e:	b8 85       	ldd	r27, Y+8	; 0x08
    af40:	6d 90       	ld	r6, X+
    af42:	7d 90       	ld	r7, X+
    af44:	b8 87       	std	Y+8, r27	; 0x08
    af46:	af 83       	std	Y+7, r26	; 0x07
    af48:	c3 01       	movw	r24, r6
    af4a:	6e e1       	ldi	r22, 0x1E	; 30
    af4c:	70 e0       	ldi	r23, 0x00	; 0
    af4e:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    af52:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    af54:	13 e0       	ldi	r17, 0x03	; 3
    af56:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    af58:	c3 01       	movw	r24, r6
    af5a:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <solid_directional_tile>
    af5e:	88 23       	and	r24, r24
    af60:	51 f1       	breq	.+84     	; 0xafb6 <collision_detect_player+0x146>
    af62:	f4 01       	movw	r30, r8
    af64:	67 81       	ldd	r22, Z+7	; 0x07
    af66:	70 85       	ldd	r23, Z+8	; 0x08
    af68:	81 85       	ldd	r24, Z+9	; 0x09
    af6a:	92 85       	ldd	r25, Z+10	; 0x0a
    af6c:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    af70:	46 2f       	mov	r20, r22
    af72:	d4 01       	movw	r26, r8
    af74:	13 96       	adiw	r26, 0x03	; 3
    af76:	6d 91       	ld	r22, X+
    af78:	7d 91       	ld	r23, X+
    af7a:	8d 91       	ld	r24, X+
    af7c:	9c 91       	ld	r25, X
    af7e:	16 97       	sbiw	r26, 0x06	; 6
    af80:	4b 87       	std	Y+11, r20	; 0x0b
    af82:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    af86:	00 e1       	ldi	r16, 0x10	; 16
    af88:	20 e1       	ldi	r18, 0x10	; 16
    af8a:	4b 85       	ldd	r20, Y+11	; 0x0b
    af8c:	c3 01       	movw	r24, r6
    af8e:	0e 94 80 53 	call	0xa700	; 0xa700 <collides_directional_tile>
    af92:	88 23       	and	r24, r24
    af94:	81 f0       	breq	.+32     	; 0xafb6 <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    af96:	f4 01       	movw	r30, r8
    af98:	83 85       	ldd	r24, Z+11	; 0x0b
    af9a:	89 30       	cpi	r24, 0x09	; 9
    af9c:	21 f4       	brne	.+8      	; 0xafa6 <collision_detect_player+0x136>
    af9e:	c4 01       	movw	r24, r8
    afa0:	0e 94 b4 52 	call	0xa568	; 0xa568 <recoil_sprite>
    afa4:	04 c0       	rjmp	.+8      	; 0xafae <collision_detect_player+0x13e>
    afa6:	b4 01       	movw	r22, r8
    afa8:	c4 01       	movw	r24, r8
    afaa:	0e 94 0e 53 	call	0xa61c	; 0xa61c <recoil_sprite_fine>
			player->shared.speed = 0;
    afae:	d4 01       	movw	r26, r8
    afb0:	11 96       	adiw	r26, 0x01	; 1
    afb2:	1c 92       	st	X, r1
    afb4:	a0 c0       	rjmp	.+320    	; 0xb0f6 <collision_detect_player+0x286>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    afb6:	c3 01       	movw	r24, r6
    afb8:	0e 94 44 53 	call	0xa688	; 0xa688 <solid_square_tile>
    afbc:	88 23       	and	r24, r24
    afbe:	51 f1       	breq	.+84     	; 0xb014 <collision_detect_player+0x1a4>
    afc0:	f4 01       	movw	r30, r8
    afc2:	67 81       	ldd	r22, Z+7	; 0x07
    afc4:	70 85       	ldd	r23, Z+8	; 0x08
    afc6:	81 85       	ldd	r24, Z+9	; 0x09
    afc8:	92 85       	ldd	r25, Z+10	; 0x0a
    afca:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    afce:	26 2e       	mov	r2, r22
    afd0:	d4 01       	movw	r26, r8
    afd2:	13 96       	adiw	r26, 0x03	; 3
    afd4:	6d 91       	ld	r22, X+
    afd6:	7d 91       	ld	r23, X+
    afd8:	8d 91       	ld	r24, X+
    afda:	9c 91       	ld	r25, X
    afdc:	16 97       	sbiw	r26, 0x06	; 6
    afde:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    afe2:	86 2f       	mov	r24, r22
    afe4:	38 e0       	ldi	r19, 0x08	; 8
    afe6:	a3 2e       	mov	r10, r19
    afe8:	48 e0       	ldi	r20, 0x08	; 8
    afea:	c4 2e       	mov	r12, r20
    afec:	e1 2e       	mov	r14, r17
    afee:	ee 0c       	add	r14, r14
    aff0:	ee 0c       	add	r14, r14
    aff2:	ee 0c       	add	r14, r14
    aff4:	0f 2d       	mov	r16, r15
    aff6:	00 0f       	add	r16, r16
    aff8:	00 0f       	add	r16, r16
    affa:	00 0f       	add	r16, r16
    affc:	20 e1       	ldi	r18, 0x10	; 16
    affe:	40 e1       	ldi	r20, 0x10	; 16
    b000:	62 2d       	mov	r22, r2
    b002:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
    b006:	88 23       	and	r24, r24
    b008:	29 f0       	breq	.+10     	; 0xb014 <collision_detect_player+0x1a4>
		{
			collision_count++;
    b00a:	b3 94       	inc	r11
			collision_tile = i;
			player->shared.speed = 0;
    b00c:	f4 01       	movw	r30, r8
    b00e:	11 82       	std	Z+1, r1	; 0x01
    b010:	d5 2c       	mov	r13, r5
    b012:	71 c0       	rjmp	.+226    	; 0xb0f6 <collision_detect_player+0x286>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    b014:	f3 01       	movw	r30, r6
    b016:	ec 59       	subi	r30, 0x9C	; 156
    b018:	f3 4f       	sbci	r31, 0xF3	; 243
    b01a:	81 81       	ldd	r24, Z+1	; 0x01
    b01c:	8d 34       	cpi	r24, 0x4D	; 77
    b01e:	59 f5       	brne	.+86     	; 0xb076 <collision_detect_player+0x206>
    b020:	e1 2e       	mov	r14, r17
    b022:	ee 0c       	add	r14, r14
    b024:	ee 0c       	add	r14, r14
    b026:	ee 0c       	add	r14, r14
    b028:	0f 2d       	mov	r16, r15
    b02a:	00 0f       	add	r16, r16
    b02c:	00 0f       	add	r16, r16
    b02e:	00 0f       	add	r16, r16
    b030:	d4 01       	movw	r26, r8
    b032:	17 96       	adiw	r26, 0x07	; 7
    b034:	6d 91       	ld	r22, X+
    b036:	7d 91       	ld	r23, X+
    b038:	8d 91       	ld	r24, X+
    b03a:	9c 91       	ld	r25, X
    b03c:	1a 97       	sbiw	r26, 0x0a	; 10
    b03e:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b042:	76 2e       	mov	r7, r22
    b044:	f4 01       	movw	r30, r8
    b046:	63 81       	ldd	r22, Z+3	; 0x03
    b048:	74 81       	ldd	r23, Z+4	; 0x04
    b04a:	85 81       	ldd	r24, Z+5	; 0x05
    b04c:	96 81       	ldd	r25, Z+6	; 0x06
    b04e:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b052:	86 2f       	mov	r24, r22
    b054:	98 e0       	ldi	r25, 0x08	; 8
    b056:	a9 2e       	mov	r10, r25
    b058:	28 e0       	ldi	r18, 0x08	; 8
    b05a:	c2 2e       	mov	r12, r18
    b05c:	20 e1       	ldi	r18, 0x10	; 16
    b05e:	40 e1       	ldi	r20, 0x10	; 16
    b060:	67 2d       	mov	r22, r7
    b062:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
    b066:	88 23       	and	r24, r24
    b068:	09 f4       	brne	.+2      	; 0xb06c <collision_detect_player+0x1fc>
    b06a:	45 c0       	rjmp	.+138    	; 0xb0f6 <collision_detect_player+0x286>
		{
			player->max_speed = WATER_SPEED;
    b06c:	e9 e1       	ldi	r30, 0x19	; 25
    b06e:	d4 01       	movw	r26, r8
    b070:	57 96       	adiw	r26, 0x17	; 23
    b072:	ec 93       	st	X, r30
    b074:	4b c0       	rjmp	.+150    	; 0xb10c <collision_detect_player+0x29c>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    b076:	8c 32       	cpi	r24, 0x2C	; 44
    b078:	99 f2       	breq	.-90     	; 0xb020 <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    b07a:	87 30       	cpi	r24, 0x07	; 7
    b07c:	99 f4       	brne	.+38     	; 0xb0a4 <collision_detect_player+0x234>
    b07e:	d4 01       	movw	r26, r8
    b080:	55 96       	adiw	r26, 0x15	; 21
    b082:	8c 91       	ld	r24, X
    b084:	55 97       	sbiw	r26, 0x15	; 21
    b086:	80 fd       	sbrc	r24, 0
    b088:	36 c0       	rjmp	.+108    	; 0xb0f6 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b08a:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    b08c:	e1 e4       	ldi	r30, 0x41	; 65
    b08e:	57 96       	adiw	r26, 0x17	; 23
    b090:	ec 93       	st	X, r30
    b092:	57 97       	sbiw	r26, 0x17	; 23
			player->has_over_speed = true;
    b094:	f1 e0       	ldi	r31, 0x01	; 1
    b096:	59 96       	adiw	r26, 0x19	; 25
    b098:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b09a:	41 e1       	ldi	r20, 0x11	; 17
    b09c:	5a e6       	ldi	r21, 0x6A	; 106
    b09e:	61 e0       	ldi	r22, 0x01	; 1
    b0a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    b0a2:	10 c0       	rjmp	.+32     	; 0xb0c4 <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    b0a4:	89 30       	cpi	r24, 0x09	; 9
    b0a6:	b9 f4       	brne	.+46     	; 0xb0d6 <collision_detect_player+0x266>
    b0a8:	d4 01       	movw	r26, r8
    b0aa:	55 96       	adiw	r26, 0x15	; 21
    b0ac:	8c 91       	ld	r24, X
    b0ae:	55 97       	sbiw	r26, 0x15	; 21
    b0b0:	80 fd       	sbrc	r24, 0
    b0b2:	21 c0       	rjmp	.+66     	; 0xb0f6 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b0b4:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    b0b6:	e1 e0       	ldi	r30, 0x01	; 1
    b0b8:	58 96       	adiw	r26, 0x18	; 24
    b0ba:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b0bc:	4b e0       	ldi	r20, 0x0B	; 11
    b0be:	5a e6       	ldi	r21, 0x6A	; 106
    b0c0:	61 e0       	ldi	r22, 0x01	; 1
    b0c2:	89 85       	ldd	r24, Y+9	; 0x09
    b0c4:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    b0c8:	40 e0       	ldi	r20, 0x00	; 0
    b0ca:	50 e0       	ldi	r21, 0x00	; 0
    b0cc:	61 2f       	mov	r22, r17
    b0ce:	8f 2d       	mov	r24, r15
    b0d0:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
    b0d4:	10 c0       	rjmp	.+32     	; 0xb0f6 <collision_detect_player+0x286>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    b0d6:	88 30       	cpi	r24, 0x08	; 8
    b0d8:	71 f4       	brne	.+28     	; 0xb0f6 <collision_detect_player+0x286>
    b0da:	d4 01       	movw	r26, r8
    b0dc:	55 96       	adiw	r26, 0x15	; 21
    b0de:	8c 91       	ld	r24, X
    b0e0:	80 fd       	sbrc	r24, 0
    b0e2:	09 c0       	rjmp	.+18     	; 0xb0f6 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b0e4:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    b0e6:	40 e0       	ldi	r20, 0x00	; 0
    b0e8:	50 e0       	ldi	r21, 0x00	; 0
    b0ea:	61 2f       	mov	r22, r17
    b0ec:	8f 2d       	mov	r24, r15
    b0ee:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
			SFX_ITEM;
			explode = 1;
    b0f2:	44 24       	eor	r4, r4
    b0f4:	43 94       	inc	r4
		}
		
		if (!hit_water)
    b0f6:	31 10       	cpse	r3, r1
    b0f8:	09 c0       	rjmp	.+18     	; 0xb10c <collision_detect_player+0x29c>
		{
			player->max_speed = MAX_SPEED;
    b0fa:	82 e3       	ldi	r24, 0x32	; 50
    b0fc:	f4 01       	movw	r30, r8
    b0fe:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    b100:	81 8d       	ldd	r24, Z+25	; 0x19
    b102:	88 23       	and	r24, r24
    b104:	29 f0       	breq	.+10     	; 0xb110 <collision_detect_player+0x2a0>
    b106:	91 e4       	ldi	r25, 0x41	; 65
    b108:	97 8b       	std	Z+23, r25	; 0x17
    b10a:	02 c0       	rjmp	.+4      	; 0xb110 <collision_detect_player+0x2a0>
    b10c:	33 24       	eor	r3, r3
    b10e:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    b110:	53 94       	inc	r5
    b112:	a3 e0       	ldi	r26, 0x03	; 3
    b114:	5a 12       	cpse	r5, r26
    b116:	12 cf       	rjmp	.-476    	; 0xaf3c <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    b118:	bb 20       	and	r11, r11
    b11a:	91 f0       	breq	.+36     	; 0xb140 <collision_detect_player+0x2d0>
    b11c:	c4 01       	movw	r24, r8
    b11e:	0e 94 b4 52 	call	0xa568	; 0xa568 <recoil_sprite>
	if (collision_count == 1)
    b122:	b1 e0       	ldi	r27, 0x01	; 1
    b124:	bb 12       	cpse	r11, r27
    b126:	0c c0       	rjmp	.+24     	; 0xb140 <collision_detect_player+0x2d0>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    b128:	fe 01       	movw	r30, r28
    b12a:	31 96       	adiw	r30, 0x01	; 1
    b12c:	ed 0d       	add	r30, r13
    b12e:	f1 1d       	adc	r31, r1
    b130:	ed 0d       	add	r30, r13
    b132:	f1 1d       	adc	r31, r1
    b134:	40 81       	ld	r20, Z
    b136:	51 81       	ldd	r21, Z+1	; 0x01
    b138:	6d 2d       	mov	r22, r13
    b13a:	c4 01       	movw	r24, r8
    b13c:	0e 94 7d 56 	call	0xacfa	; 0xacfa <slide>
	}
	return explode;
}
    b140:	84 2d       	mov	r24, r4
    b142:	2b 96       	adiw	r28, 0x0b	; 11
    b144:	0f b6       	in	r0, 0x3f	; 63
    b146:	f8 94       	cli
    b148:	de bf       	out	0x3e, r29	; 62
    b14a:	0f be       	out	0x3f, r0	; 63
    b14c:	cd bf       	out	0x3d, r28	; 61
    b14e:	df 91       	pop	r29
    b150:	cf 91       	pop	r28
    b152:	1f 91       	pop	r17
    b154:	0f 91       	pop	r16
    b156:	ff 90       	pop	r15
    b158:	ef 90       	pop	r14
    b15a:	df 90       	pop	r13
    b15c:	cf 90       	pop	r12
    b15e:	bf 90       	pop	r11
    b160:	af 90       	pop	r10
    b162:	9f 90       	pop	r9
    b164:	8f 90       	pop	r8
    b166:	7f 90       	pop	r7
    b168:	6f 90       	pop	r6
    b16a:	5f 90       	pop	r5
    b16c:	4f 90       	pop	r4
    b16e:	3f 90       	pop	r3
    b170:	2f 90       	pop	r2
    b172:	08 95       	ret

0000b174 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    b174:	ef 92       	push	r14
    b176:	ff 92       	push	r15
    b178:	1f 93       	push	r17
    b17a:	cf 93       	push	r28
    b17c:	df 93       	push	r29
    b17e:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    b180:	c0 e0       	ldi	r28, 0x00	; 0
    b182:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    b184:	8e e1       	ldi	r24, 0x1E	; 30
    b186:	e8 2e       	mov	r14, r24
    b188:	f1 2c       	mov	r15, r1
    b18a:	ce 01       	movw	r24, r28
    b18c:	b7 01       	movw	r22, r14
    b18e:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
		y = 3 + i / 30;
    b192:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    b194:	11 23       	and	r17, r17
    b196:	19 f0       	breq	.+6      	; 0xb19e <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    b198:	4e ea       	ldi	r20, 0xAE	; 174
    b19a:	5a e6       	ldi	r21, 0x6A	; 106
    b19c:	2d c0       	rjmp	.+90     	; 0xb1f8 <load_level_tiles+0x84>
    b19e:	fe 01       	movw	r30, r28
    b1a0:	ec 59       	subi	r30, 0x9C	; 156
    b1a2:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    b1a4:	91 81       	ldd	r25, Z+1	; 0x01
    b1a6:	97 30       	cpi	r25, 0x07	; 7
    b1a8:	99 f1       	breq	.+102    	; 0xb210 <load_level_tiles+0x9c>
    b1aa:	88 f4       	brcc	.+34     	; 0xb1ce <load_level_tiles+0x5a>
    b1ac:	93 30       	cpi	r25, 0x03	; 3
    b1ae:	39 f1       	breq	.+78     	; 0xb1fe <load_level_tiles+0x8a>
    b1b0:	40 f4       	brcc	.+16     	; 0xb1c2 <load_level_tiles+0x4e>
    b1b2:	91 30       	cpi	r25, 0x01	; 1
    b1b4:	f9 f0       	breq	.+62     	; 0xb1f4 <load_level_tiles+0x80>
    b1b6:	92 30       	cpi	r25, 0x02	; 2
    b1b8:	09 f0       	breq	.+2      	; 0xb1bc <load_level_tiles+0x48>
    b1ba:	3f c0       	rjmp	.+126    	; 0xb23a <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    b1bc:	44 e1       	ldi	r20, 0x14	; 20
    b1be:	5a e6       	ldi	r21, 0x6A	; 106
    b1c0:	1b c0       	rjmp	.+54     	; 0xb1f8 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    b1c2:	95 30       	cpi	r25, 0x05	; 5
    b1c4:	f9 f0       	breq	.+62     	; 0xb204 <load_level_tiles+0x90>
    b1c6:	08 f5       	brcc	.+66     	; 0xb20a <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    b1c8:	49 ef       	ldi	r20, 0xF9	; 249
    b1ca:	59 e6       	ldi	r21, 0x69	; 105
    b1cc:	15 c0       	rjmp	.+42     	; 0xb1f8 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    b1ce:	9c 32       	cpi	r25, 0x2C	; 44
    b1d0:	59 f1       	breq	.+86     	; 0xb228 <load_level_tiles+0xb4>
    b1d2:	38 f4       	brcc	.+14     	; 0xb1e2 <load_level_tiles+0x6e>
    b1d4:	98 30       	cpi	r25, 0x08	; 8
    b1d6:	f9 f0       	breq	.+62     	; 0xb216 <load_level_tiles+0xa2>
    b1d8:	99 30       	cpi	r25, 0x09	; 9
    b1da:	79 f5       	brne	.+94     	; 0xb23a <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    b1dc:	4b e0       	ldi	r20, 0x0B	; 11
    b1de:	5a e6       	ldi	r21, 0x6A	; 106
    b1e0:	0b c0       	rjmp	.+22     	; 0xb1f8 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    b1e2:	92 34       	cpi	r25, 0x42	; 66
    b1e4:	d9 f0       	breq	.+54     	; 0xb21c <load_level_tiles+0xa8>
    b1e6:	9d 34       	cpi	r25, 0x4D	; 77
    b1e8:	e1 f0       	breq	.+56     	; 0xb222 <load_level_tiles+0xae>
    b1ea:	97 33       	cpi	r25, 0x37	; 55
    b1ec:	31 f5       	brne	.+76     	; 0xb23a <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    b1ee:	4d ee       	ldi	r20, 0xED	; 237
    b1f0:	59 e6       	ldi	r21, 0x69	; 105
    b1f2:	02 c0       	rjmp	.+4      	; 0xb1f8 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    b1f4:	47 e1       	ldi	r20, 0x17	; 23
    b1f6:	5a e6       	ldi	r21, 0x6A	; 106
    b1f8:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
    b1fc:	22 c0       	rjmp	.+68     	; 0xb242 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    b1fe:	4f ef       	ldi	r20, 0xFF	; 255
    b200:	59 e6       	ldi	r21, 0x69	; 105
    b202:	fa cf       	rjmp	.-12     	; 0xb1f8 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    b204:	46 ef       	ldi	r20, 0xF6	; 246
    b206:	59 e6       	ldi	r21, 0x69	; 105
    b208:	f7 cf       	rjmp	.-18     	; 0xb1f8 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    b20a:	4c ef       	ldi	r20, 0xFC	; 252
    b20c:	59 e6       	ldi	r21, 0x69	; 105
    b20e:	f4 cf       	rjmp	.-24     	; 0xb1f8 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    b210:	41 e1       	ldi	r20, 0x11	; 17
    b212:	5a e6       	ldi	r21, 0x6A	; 106
    b214:	f1 cf       	rjmp	.-30     	; 0xb1f8 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    b216:	4e e0       	ldi	r20, 0x0E	; 14
    b218:	5a e6       	ldi	r21, 0x6A	; 106
    b21a:	ee cf       	rjmp	.-36     	; 0xb1f8 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    b21c:	40 ef       	ldi	r20, 0xF0	; 240
    b21e:	59 e6       	ldi	r21, 0x69	; 105
    b220:	eb cf       	rjmp	.-42     	; 0xb1f8 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    b222:	43 ef       	ldi	r20, 0xF3	; 243
    b224:	59 e6       	ldi	r21, 0x69	; 105
    b226:	e8 cf       	rjmp	.-48     	; 0xb1f8 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    b228:	43 ef       	ldi	r20, 0xF3	; 243
    b22a:	59 e6       	ldi	r21, 0x69	; 105
    b22c:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
    b230:	d0 93 e7 0f 	sts	0x0FE7, r29
    b234:	c0 93 e6 0f 	sts	0x0FE6, r28
    b238:	04 c0       	rjmp	.+8      	; 0xb242 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    b23a:	40 e0       	ldi	r20, 0x00	; 0
    b23c:	50 e0       	ldi	r21, 0x00	; 0
    b23e:	0e 94 d8 39 	call	0x73b0	; 0x73b0 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    b242:	21 96       	adiw	r28, 0x01	; 1
    b244:	ce 3e       	cpi	r28, 0xEE	; 238
    b246:	82 e0       	ldi	r24, 0x02	; 2
    b248:	d8 07       	cpc	r29, r24
    b24a:	09 f0       	breq	.+2      	; 0xb24e <load_level_tiles+0xda>
    b24c:	9e cf       	rjmp	.-196    	; 0xb18a <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    b24e:	df 91       	pop	r29
    b250:	cf 91       	pop	r28
    b252:	1f 91       	pop	r17
    b254:	ff 90       	pop	r15
    b256:	ef 90       	pop	r14
    b258:	08 95       	ret

0000b25a <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    b25a:	cf 93       	push	r28
    b25c:	df 93       	push	r29
    b25e:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    b260:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    b262:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    b264:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    b266:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    b268:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    b26a:	82 e3       	ldi	r24, 0x32	; 50
    b26c:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    b26e:	ce 01       	movw	r24, r28
    b270:	0e 94 17 4f 	call	0x9e2e	; 0x9e2e <player_init_shot_state>
	player_spawn(p);
    b274:	ce 01       	movw	r24, r28
}
    b276:	df 91       	pop	r29
    b278:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    b27a:	0c 94 45 4f 	jmp	0x9e8a	; 0x9e8a <player_spawn>

0000b27e <load_level>:
}

void load_level(int level_number)
{
    b27e:	8f 92       	push	r8
    b280:	9f 92       	push	r9
    b282:	af 92       	push	r10
    b284:	bf 92       	push	r11
    b286:	cf 92       	push	r12
    b288:	df 92       	push	r13
    b28a:	ef 92       	push	r14
    b28c:	ff 92       	push	r15
    b28e:	0f 93       	push	r16
    b290:	1f 93       	push	r17
    b292:	cf 93       	push	r28
    b294:	df 93       	push	r29
    b296:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    b298:	8e ee       	ldi	r24, 0xEE	; 238
    b29a:	92 e0       	ldi	r25, 0x02	; 2
    b29c:	c8 9f       	mul	r28, r24
    b29e:	70 01       	movw	r14, r0
    b2a0:	c9 9f       	mul	r28, r25
    b2a2:	f0 0c       	add	r15, r0
    b2a4:	d8 9f       	mul	r29, r24
    b2a6:	f0 0c       	add	r15, r0
    b2a8:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    b2aa:	10 92 be 0b 	sts	0x0BBE, r1
    b2ae:	10 92 bd 0b 	sts	0x0BBD, r1
	init_tile_animations(&tile_animations);
    b2b2:	86 ec       	ldi	r24, 0xC6	; 198
    b2b4:	9b e0       	ldi	r25, 0x0B	; 11
    b2b6:	0e 94 d1 4d 	call	0x9ba2	; 0x9ba2 <init_tile_animations>
	init_scope_animation(&scope_animation);
    b2ba:	8a ed       	ldi	r24, 0xDA	; 218
    b2bc:	9f e0       	ldi	r25, 0x0F	; 15
    b2be:	0e 94 f8 4d 	call	0x9bf0	; 0x9bf0 <init_scope_animation>
	init_sub_animation(&sub_animation);
    b2c2:	8c ec       	ldi	r24, 0xCC	; 204
    b2c4:	9f e0       	ldi	r25, 0x0F	; 15
    b2c6:	0e 94 10 4e 	call	0x9c20	; 0x9c20 <init_sub_animation>
	game.current_screen = LEVEL;
    b2ca:	83 e0       	ldi	r24, 0x03	; 3
    b2cc:	80 93 b2 0b 	sts	0x0BB2, r24
	clear_sprites();
    b2d0:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	game.current_level = level_number;
    b2d4:	c0 93 b3 0b 	sts	0x0BB3, r28
    b2d8:	85 e6       	ldi	r24, 0x65	; 101
    b2da:	a8 2e       	mov	r10, r24
    b2dc:	8c e0       	ldi	r24, 0x0C	; 12
    b2de:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    b2e0:	00 e0       	ldi	r16, 0x00	; 0
    b2e2:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    b2e4:	9e e1       	ldi	r25, 0x1E	; 30
    b2e6:	c9 2e       	mov	r12, r25
    b2e8:	d1 2c       	mov	r13, r1
    b2ea:	c8 01       	movw	r24, r16
    b2ec:	b6 01       	movw	r22, r12
    b2ee:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    b2f2:	d8 2f       	mov	r29, r24
    b2f4:	dd 0f       	add	r29, r29
    b2f6:	dd 0f       	add	r29, r29
    b2f8:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    b2fa:	ab 01       	movw	r20, r22
    b2fc:	4d 5f       	subi	r20, 0xFD	; 253
    b2fe:	5f 4f       	sbci	r21, 0xFF	; 255
    b300:	c4 2f       	mov	r28, r20
    b302:	cc 0f       	add	r28, r28
    b304:	cc 0f       	add	r28, r28
    b306:	cc 0f       	add	r28, r28
    b308:	f8 01       	movw	r30, r16
    b30a:	ee 0d       	add	r30, r14
    b30c:	ff 1d       	adc	r31, r15
    b30e:	ef 51       	subi	r30, 0x1F	; 31
    b310:	f9 4f       	sbci	r31, 0xF9	; 249
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    b312:	e4 91       	lpm	r30, Z
    b314:	45 01       	movw	r8, r10
    b316:	d5 01       	movw	r26, r10
    b318:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    b31a:	e8 35       	cpi	r30, 0x58	; 88
    b31c:	31 f4       	brne	.+12     	; 0xb32a <load_level+0xac>
		{
			prep_player(&player1, x, y);
    b31e:	4c 2f       	mov	r20, r28
    b320:	6d 2f       	mov	r22, r29
    b322:	84 ee       	ldi	r24, 0xE4	; 228
    b324:	9b e0       	ldi	r25, 0x0B	; 11
    b326:	0e 94 2d 59 	call	0xb25a	; 0xb25a <prep_player>
    b32a:	bf ef       	ldi	r27, 0xFF	; 255
    b32c:	ab 1a       	sub	r10, r27
    b32e:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    b330:	f4 01       	movw	r30, r8
    b332:	80 81       	ld	r24, Z
    b334:	83 36       	cpi	r24, 0x63	; 99
    b336:	31 f4       	brne	.+12     	; 0xb344 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    b338:	4c 2f       	mov	r20, r28
    b33a:	6d 2f       	mov	r22, r29
    b33c:	83 e5       	ldi	r24, 0x53	; 83
    b33e:	9f e0       	ldi	r25, 0x0F	; 15
    b340:	0e 94 2d 59 	call	0xb25a	; 0xb25a <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    b344:	0f 5f       	subi	r16, 0xFF	; 255
    b346:	1f 4f       	sbci	r17, 0xFF	; 255
    b348:	0e 3e       	cpi	r16, 0xEE	; 238
    b34a:	f2 e0       	ldi	r31, 0x02	; 2
    b34c:	1f 07       	cpc	r17, r31
    b34e:	69 f6       	brne	.-102    	; 0xb2ea <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b350:	60 e0       	ldi	r22, 0x00	; 0
    b352:	84 ee       	ldi	r24, 0xE4	; 228
    b354:	9b e0       	ldi	r25, 0x0B	; 11
    b356:	0e 94 42 51 	call	0xa284	; 0xa284 <render_hud>
	render_hud(&player2, 15);
    b35a:	6f e0       	ldi	r22, 0x0F	; 15
    b35c:	83 e5       	ldi	r24, 0x53	; 83
    b35e:	9f e0       	ldi	r25, 0x0F	; 15
    b360:	0e 94 42 51 	call	0xa284	; 0xa284 <render_hud>
	render_score(&player1, 0);
    b364:	60 e0       	ldi	r22, 0x00	; 0
    b366:	84 ee       	ldi	r24, 0xE4	; 228
    b368:	9b e0       	ldi	r25, 0x0B	; 11
    b36a:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
	render_score(&player2, 15);
    b36e:	6f e0       	ldi	r22, 0x0F	; 15
    b370:	83 e5       	ldi	r24, 0x53	; 83
    b372:	9f e0       	ldi	r25, 0x0F	; 15
    b374:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
	Print(14, 0, (char*) strVertSep);
    b378:	41 e6       	ldi	r20, 0x61	; 97
    b37a:	54 e0       	ldi	r21, 0x04	; 4
    b37c:	60 e0       	ldi	r22, 0x00	; 0
    b37e:	70 e0       	ldi	r23, 0x00	; 0
    b380:	8e e0       	ldi	r24, 0x0E	; 14
    b382:	90 e0       	ldi	r25, 0x00	; 0
    b384:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(14, 1, (char*) strVertSep);
    b388:	41 e6       	ldi	r20, 0x61	; 97
    b38a:	54 e0       	ldi	r21, 0x04	; 4
    b38c:	61 e0       	ldi	r22, 0x01	; 1
    b38e:	70 e0       	ldi	r23, 0x00	; 0
    b390:	8e e0       	ldi	r24, 0x0E	; 14
    b392:	90 e0       	ldi	r25, 0x00	; 0
    b394:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(14, 2, (char*) strVertSep);
    b398:	41 e6       	ldi	r20, 0x61	; 97
    b39a:	54 e0       	ldi	r21, 0x04	; 4
    b39c:	62 e0       	ldi	r22, 0x02	; 2
    b39e:	70 e0       	ldi	r23, 0x00	; 0
    b3a0:	8e e0       	ldi	r24, 0x0E	; 14
    b3a2:	90 e0       	ldi	r25, 0x00	; 0
    b3a4:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	load_level_tiles(false);
    b3a8:	80 e0       	ldi	r24, 0x00	; 0
}
    b3aa:	df 91       	pop	r29
    b3ac:	cf 91       	pop	r28
    b3ae:	1f 91       	pop	r17
    b3b0:	0f 91       	pop	r16
    b3b2:	ff 90       	pop	r15
    b3b4:	ef 90       	pop	r14
    b3b6:	df 90       	pop	r13
    b3b8:	cf 90       	pop	r12
    b3ba:	bf 90       	pop	r11
    b3bc:	af 90       	pop	r10
    b3be:	9f 90       	pop	r9
    b3c0:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b3c2:	0c 94 ba 58 	jmp	0xb174	; 0xb174 <load_level_tiles>

0000b3c6 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b3c6:	cf 93       	push	r28
    b3c8:	df 93       	push	r29
    b3ca:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    b3cc:	61 e0       	ldi	r22, 0x01	; 1
    b3ce:	83 e0       	ldi	r24, 0x03	; 3
    b3d0:	0e 94 bb 48 	call	0x9176	; 0x9176 <FadeOut>
	ClearVram();
    b3d4:	0e 94 ca 39 	call	0x7394	; 0x7394 <ClearVram>
	clear_sprites();
    b3d8:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b3dc:	d0 e0       	ldi	r29, 0x00	; 0
    b3de:	ae 01       	movw	r20, r28
    b3e0:	84 e0       	ldi	r24, 0x04	; 4
    b3e2:	44 0f       	add	r20, r20
    b3e4:	55 1f       	adc	r21, r21
    b3e6:	8a 95       	dec	r24
    b3e8:	e1 f7       	brne	.-8      	; 0xb3e2 <level_transition+0x1c>
    b3ea:	46 59       	subi	r20, 0x96	; 150
    b3ec:	5c 4f       	sbci	r21, 0xFC	; 252
    b3ee:	6c e0       	ldi	r22, 0x0C	; 12
    b3f0:	70 e0       	ldi	r23, 0x00	; 0
    b3f2:	88 e0       	ldi	r24, 0x08	; 8
    b3f4:	90 e0       	ldi	r25, 0x00	; 0
    b3f6:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	FadeIn(1, true);
    b3fa:	61 e0       	ldi	r22, 0x01	; 1
    b3fc:	81 e0       	ldi	r24, 0x01	; 1
    b3fe:	0e 94 af 48 	call	0x915e	; 0x915e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    b402:	84 e0       	ldi	r24, 0x04	; 4
    b404:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LBWaitSeconds>
	FadeOut(1, true);
    b408:	61 e0       	ldi	r22, 0x01	; 1
    b40a:	81 e0       	ldi	r24, 0x01	; 1
    b40c:	0e 94 bb 48 	call	0x9176	; 0x9176 <FadeOut>
	ClearVram();
    b410:	0e 94 ca 39 	call	0x7394	; 0x7394 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b414:	60 e0       	ldi	r22, 0x00	; 0
    b416:	83 e0       	ldi	r24, 0x03	; 3
    b418:	0e 94 af 48 	call	0x915e	; 0x915e <FadeIn>
	load_level(index);
    b41c:	ce 01       	movw	r24, r28
}
    b41e:	df 91       	pop	r29
    b420:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b422:	0c 94 3f 59 	jmp	0xb27e	; 0xb27e <load_level>

0000b426 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b426:	8a ed       	ldi	r24, 0xDA	; 218
    b428:	9f e0       	ldi	r25, 0x0F	; 15
    b42a:	0e 94 05 52 	call	0xa40a	; 0xa40a <render_scope>
    b42e:	88 23       	and	r24, r24
    b430:	19 f0       	breq	.+6      	; 0xb438 <render_boss_fight_scope_load+0x12>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b432:	82 e0       	ldi	r24, 0x02	; 2
    b434:	80 93 b5 0b 	sts	0x0BB5, r24
    b438:	08 95       	ret

0000b43a <render_boss_fight_sub_load>:
		SFX_ALARM;
	}
}

void render_boss_fight_sub_load()
{
    b43a:	0f 93       	push	r16
    b43c:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b43e:	8c ec       	ldi	r24, 0xCC	; 204
    b440:	9f e0       	ldi	r25, 0x0F	; 15
    b442:	0e 94 91 4b 	call	0x9722	; 0x9722 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b446:	ac 01       	movw	r20, r24
    b448:	64 e0       	ldi	r22, 0x04	; 4
    b44a:	81 e0       	ldi	r24, 0x01	; 1
    b44c:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	if (sub_animation.anim.reversing)
    b450:	80 91 d1 0f 	lds	r24, 0x0FD1
    b454:	88 23       	and	r24, r24
    b456:	d9 f0       	breq	.+54     	; 0xb48e <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b458:	84 e0       	ldi	r24, 0x04	; 4
    b45a:	80 93 b5 0b 	sts	0x0BB5, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    b45e:	00 e0       	ldi	r16, 0x00	; 0
    b460:	10 e0       	ldi	r17, 0x00	; 0
    b462:	20 e9       	ldi	r18, 0x90	; 144
    b464:	32 e4       	ldi	r19, 0x42	; 66
    b466:	40 e0       	ldi	r20, 0x00	; 0
    b468:	50 e0       	ldi	r21, 0x00	; 0
    b46a:	60 ec       	ldi	r22, 0xC0	; 192
    b46c:	72 e4       	ldi	r23, 0x42	; 66
    b46e:	8d e2       	ldi	r24, 0x2D	; 45
    b470:	90 e1       	ldi	r25, 0x10	; 16
    b472:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    b476:	00 e0       	ldi	r16, 0x00	; 0
    b478:	10 e0       	ldi	r17, 0x00	; 0
    b47a:	20 e9       	ldi	r18, 0x90	; 144
    b47c:	32 e4       	ldi	r19, 0x42	; 66
    b47e:	40 e0       	ldi	r20, 0x00	; 0
    b480:	50 e0       	ldi	r21, 0x00	; 0
    b482:	60 e4       	ldi	r22, 0x40	; 64
    b484:	73 e4       	ldi	r23, 0x43	; 67
    b486:	89 ef       	ldi	r24, 0xF9	; 249
    b488:	9f e0       	ldi	r25, 0x0F	; 15
    b48a:	0e 94 73 4e 	call	0x9ce6	; 0x9ce6 <init_turret>
	}
}
    b48e:	1f 91       	pop	r17
    b490:	0f 91       	pop	r16
    b492:	08 95       	ret

0000b494 <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b494:	8c ec       	ldi	r24, 0xCC	; 204
    b496:	9f e0       	ldi	r25, 0x0F	; 15
    b498:	0e 94 91 4b 	call	0x9722	; 0x9722 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b49c:	20 91 cc 0f 	lds	r18, 0x0FCC
    b4a0:	21 11       	cpse	r18, r1
    b4a2:	05 c0       	rjmp	.+10     	; 0xb4ae <render_boss_fight_sub_sinking+0x1a>
    b4a4:	ac 01       	movw	r20, r24
    b4a6:	64 e0       	ldi	r22, 0x04	; 4
    b4a8:	81 e0       	ldi	r24, 0x01	; 1
    b4aa:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	if (sub_animation.anim.looped)
    b4ae:	80 91 d0 0f 	lds	r24, 0x0FD0
    b4b2:	88 23       	and	r24, r24
    b4b4:	19 f0       	breq	.+6      	; 0xb4bc <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b4b6:	88 e0       	ldi	r24, 0x08	; 8
    b4b8:	80 93 b5 0b 	sts	0x0BB5, r24
    b4bc:	08 95       	ret

0000b4be <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b4be:	ef 92       	push	r14
    b4c0:	ff 92       	push	r15
    b4c2:	0f 93       	push	r16
    b4c4:	1f 93       	push	r17
    b4c6:	cf 93       	push	r28
    b4c8:	df 93       	push	r29
    b4ca:	1f 92       	push	r1
    b4cc:	cd b7       	in	r28, 0x3d	; 61
    b4ce:	de b7       	in	r29, 0x3e	; 62
    b4d0:	7c 01       	movw	r14, r24
    b4d2:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    b4d4:	fc 01       	movw	r30, r24
    b4d6:	67 81       	ldd	r22, Z+7	; 0x07
    b4d8:	70 85       	ldd	r23, Z+8	; 0x08
    b4da:	81 85       	ldd	r24, Z+9	; 0x09
    b4dc:	92 85       	ldd	r25, Z+10	; 0x0a
    b4de:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b4e2:	46 2f       	mov	r20, r22
    b4e4:	f7 01       	movw	r30, r14
    b4e6:	63 81       	ldd	r22, Z+3	; 0x03
    b4e8:	74 81       	ldd	r23, Z+4	; 0x04
    b4ea:	85 81       	ldd	r24, Z+5	; 0x05
    b4ec:	96 81       	ldd	r25, Z+6	; 0x06
    b4ee:	49 83       	std	Y+1, r20	; 0x01
    b4f0:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b4f4:	01 e0       	ldi	r16, 0x01	; 1
    b4f6:	21 e0       	ldi	r18, 0x01	; 1
    b4f8:	49 81       	ldd	r20, Y+1	; 0x01
    b4fa:	81 2f       	mov	r24, r17
    b4fc:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
}
    b500:	0f 90       	pop	r0
    b502:	df 91       	pop	r29
    b504:	cf 91       	pop	r28
    b506:	1f 91       	pop	r17
    b508:	0f 91       	pop	r16
    b50a:	ff 90       	pop	r15
    b50c:	ef 90       	pop	r14
    b50e:	08 95       	ret

0000b510 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b510:	ef 92       	push	r14
    b512:	ff 92       	push	r15
    b514:	0f 93       	push	r16
    b516:	1f 93       	push	r17
    b518:	cf 93       	push	r28
    b51a:	df 93       	push	r29
    b51c:	1f 92       	push	r1
    b51e:	cd b7       	in	r28, 0x3d	; 61
    b520:	de b7       	in	r29, 0x3e	; 62
    b522:	7c 01       	movw	r14, r24
    b524:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    b526:	fc 01       	movw	r30, r24
    b528:	63 89       	ldd	r22, Z+19	; 0x13
    b52a:	74 89       	ldd	r23, Z+20	; 0x14
    b52c:	85 89       	ldd	r24, Z+21	; 0x15
    b52e:	96 89       	ldd	r25, Z+22	; 0x16
    b530:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b534:	46 2f       	mov	r20, r22
    b536:	f7 01       	movw	r30, r14
    b538:	67 85       	ldd	r22, Z+15	; 0x0f
    b53a:	70 89       	ldd	r23, Z+16	; 0x10
    b53c:	81 89       	ldd	r24, Z+17	; 0x11
    b53e:	92 89       	ldd	r25, Z+18	; 0x12
    b540:	49 83       	std	Y+1, r20	; 0x01
    b542:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    b546:	01 e0       	ldi	r16, 0x01	; 1
    b548:	21 e0       	ldi	r18, 0x01	; 1
    b54a:	49 81       	ldd	r20, Y+1	; 0x01
    b54c:	81 2f       	mov	r24, r17
    b54e:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
}
    b552:	0f 90       	pop	r0
    b554:	df 91       	pop	r29
    b556:	cf 91       	pop	r28
    b558:	1f 91       	pop	r17
    b55a:	0f 91       	pop	r16
    b55c:	ff 90       	pop	r15
    b55e:	ef 90       	pop	r14
    b560:	08 95       	ret

0000b562 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    b562:	cf 92       	push	r12
    b564:	df 92       	push	r13
    b566:	ef 92       	push	r14
    b568:	ff 92       	push	r15
    b56a:	cf 93       	push	r28
    b56c:	df 93       	push	r29
    b56e:	ec 01       	movw	r28, r24
    b570:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    b572:	cb 80       	ldd	r12, Y+3	; 0x03
    b574:	dc 80       	ldd	r13, Y+4	; 0x04
    b576:	ed 80       	ldd	r14, Y+5	; 0x05
    b578:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    b57a:	6f 81       	ldd	r22, Y+7	; 0x07
    b57c:	78 85       	ldd	r23, Y+8	; 0x08
    b57e:	89 85       	ldd	r24, Y+9	; 0x09
    b580:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b582:	2b 85       	ldd	r18, Y+11	; 0x0b
    b584:	21 11       	cpse	r18, r1
    b586:	27 c0       	rjmp	.+78     	; 0xb5d6 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    b588:	20 e0       	ldi	r18, 0x00	; 0
    b58a:	30 e0       	ldi	r19, 0x00	; 0
    b58c:	40 e0       	ldi	r20, 0x00	; 0
    b58e:	5e e3       	ldi	r21, 0x3E	; 62
    b590:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    b594:	20 e0       	ldi	r18, 0x00	; 0
    b596:	30 e0       	ldi	r19, 0x00	; 0
    b598:	40 e4       	ldi	r20, 0x40	; 64
    b59a:	50 e4       	ldi	r21, 0x40	; 64
    b59c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    b5a0:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b5a4:	8e e1       	ldi	r24, 0x1E	; 30
    b5a6:	68 9f       	mul	r22, r24
    b5a8:	e0 01       	movw	r28, r0
    b5aa:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    b5ac:	20 e0       	ldi	r18, 0x00	; 0
    b5ae:	30 e0       	ldi	r19, 0x00	; 0
    b5b0:	40 e0       	ldi	r20, 0x00	; 0
    b5b2:	5e e3       	ldi	r21, 0x3E	; 62
    b5b4:	c7 01       	movw	r24, r14
    b5b6:	b6 01       	movw	r22, r12
    b5b8:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    b5bc:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b5c0:	c6 0f       	add	r28, r22
    b5c2:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b5c4:	be 01       	movw	r22, r28
    b5c6:	86 ec       	ldi	r24, 0xC6	; 198
    b5c8:	9b e0       	ldi	r25, 0x0B	; 11
    b5ca:	0e 94 cd 55 	call	0xab9a	; 0xab9a <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b5ce:	cc 59       	subi	r28, 0x9C	; 156
    b5d0:	d3 4f       	sbci	r29, 0xF3	; 243
    b5d2:	19 82       	std	Y+1, r1	; 0x01
    b5d4:	54 c0       	rjmp	.+168    	; 0xb67e <update_turret+0x11c>
	}
	else if (t->shared.direction == D_LEFT)
    b5d6:	98 81       	ld	r25, Y
    b5d8:	93 30       	cpi	r25, 0x03	; 3
    b5da:	19 f5       	brne	.+70     	; 0xb622 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    b5dc:	63 2f       	mov	r22, r19
    b5de:	70 e0       	ldi	r23, 0x00	; 0
    b5e0:	80 e0       	ldi	r24, 0x00	; 0
    b5e2:	90 e0       	ldi	r25, 0x00	; 0
    b5e4:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    b5e8:	9b 01       	movw	r18, r22
    b5ea:	ac 01       	movw	r20, r24
    b5ec:	c7 01       	movw	r24, r14
    b5ee:	b6 01       	movw	r22, r12
    b5f0:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    b5f4:	87 ff       	sbrs	r24, 7
    b5f6:	02 c0       	rjmp	.+4      	; 0xb5fc <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    b5f8:	81 e0       	ldi	r24, 0x01	; 1
    b5fa:	24 c0       	rjmp	.+72     	; 0xb644 <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    b5fc:	69 81       	ldd	r22, Y+1	; 0x01
    b5fe:	70 e0       	ldi	r23, 0x00	; 0
    b600:	80 e0       	ldi	r24, 0x00	; 0
    b602:	90 e0       	ldi	r25, 0x00	; 0
    b604:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    b608:	25 e6       	ldi	r18, 0x65	; 101
    b60a:	38 e8       	ldi	r19, 0x88	; 136
    b60c:	48 e8       	ldi	r20, 0x88	; 136
    b60e:	5c e3       	ldi	r21, 0x3C	; 60
    b610:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    b614:	9b 01       	movw	r18, r22
    b616:	ac 01       	movw	r20, r24
    b618:	c7 01       	movw	r24, r14
    b61a:	b6 01       	movw	r22, r12
    b61c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    b620:	2a c0       	rjmp	.+84     	; 0xb676 <update_turret+0x114>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b622:	91 30       	cpi	r25, 0x01	; 1
    b624:	61 f5       	brne	.+88     	; 0xb67e <update_turret+0x11c>
	{
		if (t->shared.x > right_limit)
    b626:	64 2f       	mov	r22, r20
    b628:	70 e0       	ldi	r23, 0x00	; 0
    b62a:	80 e0       	ldi	r24, 0x00	; 0
    b62c:	90 e0       	ldi	r25, 0x00	; 0
    b62e:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    b632:	9b 01       	movw	r18, r22
    b634:	ac 01       	movw	r20, r24
    b636:	c7 01       	movw	r24, r14
    b638:	b6 01       	movw	r22, r12
    b63a:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    b63e:	18 16       	cp	r1, r24
    b640:	44 f4       	brge	.+16     	; 0xb652 <update_turret+0xf0>
		{
			t->shared.direction = D_LEFT;
    b642:	83 e0       	ldi	r24, 0x03	; 3
    b644:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    b646:	6c e8       	ldi	r22, 0x8C	; 140
    b648:	8a e5       	ldi	r24, 0x5A	; 90
    b64a:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    b64e:	89 83       	std	Y+1, r24	; 0x01
    b650:	16 c0       	rjmp	.+44     	; 0xb67e <update_turret+0x11c>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    b652:	69 81       	ldd	r22, Y+1	; 0x01
    b654:	70 e0       	ldi	r23, 0x00	; 0
    b656:	80 e0       	ldi	r24, 0x00	; 0
    b658:	90 e0       	ldi	r25, 0x00	; 0
    b65a:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    b65e:	25 e6       	ldi	r18, 0x65	; 101
    b660:	38 e8       	ldi	r19, 0x88	; 136
    b662:	48 e8       	ldi	r20, 0x88	; 136
    b664:	5c e3       	ldi	r21, 0x3C	; 60
    b666:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    b66a:	9b 01       	movw	r18, r22
    b66c:	ac 01       	movw	r20, r24
    b66e:	c7 01       	movw	r24, r14
    b670:	b6 01       	movw	r22, r12
    b672:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    b676:	6b 83       	std	Y+3, r22	; 0x03
    b678:	7c 83       	std	Y+4, r23	; 0x04
    b67a:	8d 83       	std	Y+5, r24	; 0x05
    b67c:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    b67e:	df 91       	pop	r29
    b680:	cf 91       	pop	r28
    b682:	ff 90       	pop	r15
    b684:	ef 90       	pop	r14
    b686:	df 90       	pop	r13
    b688:	cf 90       	pop	r12
    b68a:	08 95       	ret

0000b68c <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    b68c:	0f 93       	push	r16
    b68e:	1f 93       	push	r17
    b690:	cf 93       	push	r28
    b692:	df 93       	push	r29
    b694:	8c 01       	movw	r16, r24
    b696:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    b698:	fc 01       	movw	r30, r24
    b69a:	83 85       	ldd	r24, Z+11	; 0x0b
    b69c:	81 11       	cpse	r24, r1
    b69e:	02 c0       	rjmp	.+4      	; 0xb6a4 <update_turret_shot+0x18>
	{
		s->active = 0;
    b6a0:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    b6a2:	62 c0       	rjmp	.+196    	; 0xb768 <update_turret_shot+0xdc>
	}
	if (!s->active)
    b6a4:	8e 85       	ldd	r24, Y+14	; 0x0e
    b6a6:	81 11       	cpse	r24, r1
    b6a8:	20 c0       	rjmp	.+64     	; 0xb6ea <update_turret_shot+0x5e>
	{
		s->active = 1;
    b6aa:	81 e0       	ldi	r24, 0x01	; 1
    b6ac:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    b6ae:	20 e0       	ldi	r18, 0x00	; 0
    b6b0:	30 e0       	ldi	r19, 0x00	; 0
    b6b2:	40 e4       	ldi	r20, 0x40	; 64
    b6b4:	50 e4       	ldi	r21, 0x40	; 64
    b6b6:	f8 01       	movw	r30, r16
    b6b8:	63 81       	ldd	r22, Z+3	; 0x03
    b6ba:	74 81       	ldd	r23, Z+4	; 0x04
    b6bc:	85 81       	ldd	r24, Z+5	; 0x05
    b6be:	96 81       	ldd	r25, Z+6	; 0x06
    b6c0:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    b6c4:	6b 83       	std	Y+3, r22	; 0x03
    b6c6:	7c 83       	std	Y+4, r23	; 0x04
    b6c8:	8d 83       	std	Y+5, r24	; 0x05
    b6ca:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    b6cc:	20 e0       	ldi	r18, 0x00	; 0
    b6ce:	30 e0       	ldi	r19, 0x00	; 0
    b6d0:	40 e4       	ldi	r20, 0x40	; 64
    b6d2:	50 e4       	ldi	r21, 0x40	; 64
    b6d4:	f8 01       	movw	r30, r16
    b6d6:	67 81       	ldd	r22, Z+7	; 0x07
    b6d8:	70 85       	ldd	r23, Z+8	; 0x08
    b6da:	81 85       	ldd	r24, Z+9	; 0x09
    b6dc:	92 85       	ldd	r25, Z+10	; 0x0a
    b6de:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    b6e2:	6f 83       	std	Y+7, r22	; 0x07
    b6e4:	78 87       	std	Y+8, r23	; 0x08
    b6e6:	89 87       	std	Y+9, r24	; 0x09
    b6e8:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    b6ea:	23 e3       	ldi	r18, 0x33	; 51
    b6ec:	35 e5       	ldi	r19, 0x55	; 85
    b6ee:	45 e8       	ldi	r20, 0x85	; 133
    b6f0:	50 e4       	ldi	r21, 0x40	; 64
    b6f2:	6f 81       	ldd	r22, Y+7	; 0x07
    b6f4:	78 85       	ldd	r23, Y+8	; 0x08
    b6f6:	89 85       	ldd	r24, Y+9	; 0x09
    b6f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b6fa:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    b6fe:	6f 83       	std	Y+7, r22	; 0x07
    b700:	78 87       	std	Y+8, r23	; 0x08
    b702:	89 87       	std	Y+9, r24	; 0x09
    b704:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    b706:	20 e0       	ldi	r18, 0x00	; 0
    b708:	30 e0       	ldi	r19, 0x00	; 0
    b70a:	40 e0       	ldi	r20, 0x00	; 0
    b70c:	51 e4       	ldi	r21, 0x41	; 65
    b70e:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    b712:	20 e0       	ldi	r18, 0x00	; 0
    b714:	30 e0       	ldi	r19, 0x00	; 0
    b716:	48 e5       	ldi	r20, 0x58	; 88
    b718:	53 e4       	ldi	r21, 0x43	; 67
    b71a:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    b71e:	18 16       	cp	r1, r24
    b720:	0c f4       	brge	.+2      	; 0xb724 <update_turret_shot+0x98>
    b722:	be cf       	rjmp	.-132    	; 0xb6a0 <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    b724:	00 91 c1 0b 	lds	r16, 0x0BC1
    b728:	10 91 c2 0b 	lds	r17, 0x0BC2
    b72c:	be 01       	movw	r22, r28
    b72e:	c8 01       	movw	r24, r16
    b730:	0e 94 24 54 	call	0xa848	; 0xa848 <player_shot>
    b734:	88 23       	and	r24, r24
    b736:	c1 f0       	breq	.+48     	; 0xb768 <update_turret_shot+0xdc>
    b738:	f8 01       	movw	r30, r16
    b73a:	85 89       	ldd	r24, Z+21	; 0x15
    b73c:	80 fd       	sbrc	r24, 0
    b73e:	14 c0       	rjmp	.+40     	; 0xb768 <update_turret_shot+0xdc>
	{
		game.boss_fight_player_lives--;
    b740:	90 91 b7 0b 	lds	r25, 0x0BB7
    b744:	91 50       	subi	r25, 0x01	; 1
    b746:	90 93 b7 0b 	sts	0x0BB7, r25
		if (game.boss_fight_player_lives <= 0)
    b74a:	91 11       	cpse	r25, r1
    b74c:	03 c0       	rjmp	.+6      	; 0xb754 <update_turret_shot+0xc8>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    b74e:	80 e1       	ldi	r24, 0x10	; 16
    b750:	80 93 b5 0b 	sts	0x0BB5, r24
		}
		s->active = 0;
    b754:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    b756:	60 91 b6 0b 	lds	r22, 0x0BB6
    b75a:	c8 01       	movw	r24, r16
		SFX_TANK_EXPLODE;
	}
}
    b75c:	df 91       	pop	r29
    b75e:	cf 91       	pop	r28
    b760:	1f 91       	pop	r17
    b762:	0f 91       	pop	r16
		if (game.boss_fight_player_lives <= 0)
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    b764:	0c 94 53 55 	jmp	0xaaa6	; 0xaaa6 <kill_player>
		SFX_TANK_EXPLODE;
	}
}
    b768:	df 91       	pop	r29
    b76a:	cf 91       	pop	r28
    b76c:	1f 91       	pop	r17
    b76e:	0f 91       	pop	r16
    b770:	08 95       	ret

0000b772 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    b772:	10 92 b2 0b 	sts	0x0BB2, r1
	clear_sprites();
    b776:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	if (wifi_status == WIFI_OK)
    b77a:	80 91 e3 0b 	lds	r24, 0x0BE3
    b77e:	81 11       	cpse	r24, r1
    b780:	02 c0       	rjmp	.+4      	; 0xb786 <load_splash+0x14>
	{
		disablePassthroughMode();
    b782:	0e 94 40 4a 	call	0x9480	; 0x9480 <disablePassthroughMode>
	}
	Print(7, 13, (char*) str1Player);
    b786:	49 e6       	ldi	r20, 0x69	; 105
    b788:	55 e0       	ldi	r21, 0x05	; 5
    b78a:	6d e0       	ldi	r22, 0x0D	; 13
    b78c:	70 e0       	ldi	r23, 0x00	; 0
    b78e:	87 e0       	ldi	r24, 0x07	; 7
    b790:	90 e0       	ldi	r25, 0x00	; 0
    b792:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(7, 14, (char*) str2Player);
    b796:	48 e5       	ldi	r20, 0x58	; 88
    b798:	55 e0       	ldi	r21, 0x05	; 5
    b79a:	6e e0       	ldi	r22, 0x0E	; 14
    b79c:	70 e0       	ldi	r23, 0x00	; 0
    b79e:	87 e0       	ldi	r24, 0x07	; 7
    b7a0:	90 e0       	ldi	r25, 0x00	; 0
    b7a2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	if (wifi_status == WIFI_OK) {
    b7a6:	80 91 e3 0b 	lds	r24, 0x0BE3
    b7aa:	81 11       	cpse	r24, r1
    b7ac:	10 c0       	rjmp	.+32     	; 0xb7ce <load_splash+0x5c>
		Print(7, 15, (char*) strHostNetGame);
    b7ae:	4a e4       	ldi	r20, 0x4A	; 74
    b7b0:	55 e0       	ldi	r21, 0x05	; 5
    b7b2:	6f e0       	ldi	r22, 0x0F	; 15
    b7b4:	70 e0       	ldi	r23, 0x00	; 0
    b7b6:	87 e0       	ldi	r24, 0x07	; 7
    b7b8:	90 e0       	ldi	r25, 0x00	; 0
    b7ba:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		Print(7, 16, (char*) strJoinNetGame);
    b7be:	4c e3       	ldi	r20, 0x3C	; 60
    b7c0:	55 e0       	ldi	r21, 0x05	; 5
    b7c2:	60 e1       	ldi	r22, 0x10	; 16
    b7c4:	70 e0       	ldi	r23, 0x00	; 0
    b7c6:	87 e0       	ldi	r24, 0x07	; 7
    b7c8:	90 e0       	ldi	r25, 0x00	; 0
    b7ca:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	}
	Print(7, 17, (char*) strHighscores);
    b7ce:	4b e7       	ldi	r20, 0x7B	; 123
    b7d0:	54 e0       	ldi	r21, 0x04	; 4
    b7d2:	61 e1       	ldi	r22, 0x11	; 17
    b7d4:	70 e0       	ldi	r23, 0x00	; 0
    b7d6:	87 e0       	ldi	r24, 0x07	; 7
    b7d8:	90 e0       	ldi	r25, 0x00	; 0
    b7da:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(5, 26, (char*) strCopyright);
    b7de:	45 e8       	ldi	r20, 0x85	; 133
    b7e0:	54 e0       	ldi	r21, 0x04	; 4
    b7e2:	6a e1       	ldi	r22, 0x1A	; 26
    b7e4:	70 e0       	ldi	r23, 0x00	; 0
    b7e6:	85 e0       	ldi	r24, 0x05	; 5
    b7e8:	90 e0       	ldi	r25, 0x00	; 0
    b7ea:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    b7ee:	40 e0       	ldi	r20, 0x00	; 0
    b7f0:	67 e6       	ldi	r22, 0x67	; 103
    b7f2:	70 e3       	ldi	r23, 0x30	; 48
    b7f4:	80 e0       	ldi	r24, 0x00	; 0
    b7f6:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b7fa:	4a e1       	ldi	r20, 0x1A	; 26
    b7fc:	5a e6       	ldi	r21, 0x6A	; 106
    b7fe:	65 e0       	ldi	r22, 0x05	; 5
    b800:	84 e0       	ldi	r24, 0x04	; 4
    b802:	0c 94 ec 47 	jmp	0x8fd8	; 0x8fd8 <DrawMap>

0000b806 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b806:	fc 01       	movw	r30, r24
    b808:	20 81       	ld	r18, Z
    b80a:	31 81       	ldd	r19, Z+1	; 0x01
    b80c:	28 70       	andi	r18, 0x08	; 8
    b80e:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b810:	81 e0       	ldi	r24, 0x01	; 1
    b812:	23 2b       	or	r18, r19
    b814:	09 f4       	brne	.+2      	; 0xb818 <select_pressed+0x12>
    b816:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b818:	08 95       	ret

0000b81a <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b81a:	ff 92       	push	r15
    b81c:	0f 93       	push	r16
    b81e:	1f 93       	push	r17
    b820:	cf 93       	push	r28
    b822:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b824:	81 e0       	ldi	r24, 0x01	; 1
    b826:	80 93 b2 0b 	sts	0x0BB2, r24
	clear_sprites();
    b82a:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b82e:	47 ee       	ldi	r20, 0xE7	; 231
    b830:	59 e6       	ldi	r21, 0x69	; 105
    b832:	61 e0       	ldi	r22, 0x01	; 1
    b834:	87 e0       	ldi	r24, 0x07	; 7
    b836:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b83a:	41 ee       	ldi	r20, 0xE1	; 225
    b83c:	59 e6       	ldi	r21, 0x69	; 105
    b83e:	61 e0       	ldi	r22, 0x01	; 1
    b840:	84 e1       	ldi	r24, 0x14	; 20
    b842:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b846:	4b e7       	ldi	r20, 0x7B	; 123
    b848:	54 e0       	ldi	r21, 0x04	; 4
    b84a:	62 e0       	ldi	r22, 0x02	; 2
    b84c:	70 e0       	ldi	r23, 0x00	; 0
    b84e:	8a e0       	ldi	r24, 0x0A	; 10
    b850:	90 e0       	ldi	r25, 0x00	; 0
    b852:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    b856:	08 e6       	ldi	r16, 0x68	; 104
    b858:	1b e0       	ldi	r17, 0x0B	; 11
    b85a:	c7 e0       	ldi	r28, 0x07	; 7
    b85c:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b85e:	ff 24       	eor	r15, r15
    b860:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b862:	20 e0       	ldi	r18, 0x00	; 0
    b864:	4f 2d       	mov	r20, r15
    b866:	be 01       	movw	r22, r28
    b868:	82 e0       	ldi	r24, 0x02	; 2
    b86a:	90 e0       	ldi	r25, 0x00	; 0
    b86c:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
		PrintChar(3, y, '.');
    b870:	4e e2       	ldi	r20, 0x2E	; 46
    b872:	be 01       	movw	r22, r28
    b874:	83 e0       	ldi	r24, 0x03	; 3
    b876:	90 e0       	ldi	r25, 0x00	; 0
    b878:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
    b87c:	f8 01       	movw	r30, r16
    b87e:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b880:	80 81       	ld	r24, Z
    b882:	93 e0       	ldi	r25, 0x03	; 3
    b884:	89 9f       	mul	r24, r25
    b886:	a0 01       	movw	r20, r0
    b888:	11 24       	eor	r1, r1
    b88a:	4c 56       	subi	r20, 0x6C	; 108
    b88c:	54 4f       	sbci	r21, 0xF4	; 244
    b88e:	23 e0       	ldi	r18, 0x03	; 3
    b890:	6c 2f       	mov	r22, r28
    b892:	85 e0       	ldi	r24, 0x05	; 5
    b894:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b898:	47 e4       	ldi	r20, 0x47	; 71
    b89a:	54 e0       	ldi	r21, 0x04	; 4
    b89c:	be 01       	movw	r22, r28
    b89e:	89 e0       	ldi	r24, 0x09	; 9
    b8a0:	90 e0       	ldi	r25, 0x00	; 0
    b8a2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    b8a6:	f8 01       	movw	r30, r16
    b8a8:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b8aa:	80 81       	ld	r24, Z
    b8ac:	e3 e0       	ldi	r30, 0x03	; 3
    b8ae:	8e 9f       	mul	r24, r30
    b8b0:	a0 01       	movw	r20, r0
    b8b2:	11 24       	eor	r1, r1
    b8b4:	4c 56       	subi	r20, 0x6C	; 108
    b8b6:	54 4f       	sbci	r21, 0xF4	; 244
    b8b8:	23 e0       	ldi	r18, 0x03	; 3
    b8ba:	6c 2f       	mov	r22, r28
    b8bc:	8e e0       	ldi	r24, 0x0E	; 14
    b8be:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
		Print(18, y, (char*) strBy);
    b8c2:	44 e4       	ldi	r20, 0x44	; 68
    b8c4:	54 e0       	ldi	r21, 0x04	; 4
    b8c6:	be 01       	movw	r22, r28
    b8c8:	82 e1       	ldi	r24, 0x12	; 18
    b8ca:	90 e0       	ldi	r25, 0x00	; 0
    b8cc:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b8d0:	21 e0       	ldi	r18, 0x01	; 1
    b8d2:	f8 01       	movw	r30, r16
    b8d4:	32 97       	sbiw	r30, 0x02	; 2
    b8d6:	40 81       	ld	r20, Z
    b8d8:	be 01       	movw	r22, r28
    b8da:	87 e1       	ldi	r24, 0x17	; 23
    b8dc:	90 e0       	ldi	r25, 0x00	; 0
    b8de:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
		PrintChar(24, y, '-');
    b8e2:	4d e2       	ldi	r20, 0x2D	; 45
    b8e4:	be 01       	movw	r22, r28
    b8e6:	88 e1       	ldi	r24, 0x18	; 24
    b8e8:	90 e0       	ldi	r25, 0x00	; 0
    b8ea:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b8ee:	21 e0       	ldi	r18, 0x01	; 1
    b8f0:	f8 01       	movw	r30, r16
    b8f2:	31 97       	sbiw	r30, 0x01	; 1
    b8f4:	40 81       	ld	r20, Z
    b8f6:	be 01       	movw	r22, r28
    b8f8:	8b e1       	ldi	r24, 0x1B	; 27
    b8fa:	90 e0       	ldi	r25, 0x00	; 0
    b8fc:	0e 94 39 48 	call	0x9072	; 0x9072 <PrintByte>
		if (scores.data[i+4])
    b900:	f8 01       	movw	r30, r16
    b902:	80 81       	ld	r24, Z
    b904:	88 23       	and	r24, r24
    b906:	11 f0       	breq	.+4      	; 0xb90c <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b908:	4a e2       	ldi	r20, 0x2A	; 42
    b90a:	01 c0       	rjmp	.+2      	; 0xb90e <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b90c:	40 e2       	ldi	r20, 0x20	; 32
    b90e:	be 01       	movw	r22, r28
    b910:	8d e1       	ldi	r24, 0x1D	; 29
    b912:	90 e0       	ldi	r25, 0x00	; 0
    b914:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
		y += 3;
		rank += 1;
    b918:	f3 94       	inc	r15
    b91a:	23 96       	adiw	r28, 0x03	; 3
    b91c:	0b 5f       	subi	r16, 0xFB	; 251
    b91e:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b920:	f6 e0       	ldi	r31, 0x06	; 6
    b922:	ff 12       	cpse	r15, r31
    b924:	9e cf       	rjmp	.-196    	; 0xb862 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b926:	44 eb       	ldi	r20, 0xB4	; 180
    b928:	54 e0       	ldi	r21, 0x04	; 4
    b92a:	66 e1       	ldi	r22, 0x16	; 22
    b92c:	70 e0       	ldi	r23, 0x00	; 0
    b92e:	83 e0       	ldi	r24, 0x03	; 3
    b930:	90 e0       	ldi	r25, 0x00	; 0
    b932:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    b936:	49 ea       	ldi	r20, 0xA9	; 169
    b938:	54 e0       	ldi	r21, 0x04	; 4
    b93a:	68 e1       	ldi	r22, 0x18	; 24
    b93c:	70 e0       	ldi	r23, 0x00	; 0
    b93e:	8a e0       	ldi	r24, 0x0A	; 10
    b940:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b942:	df 91       	pop	r29
    b944:	cf 91       	pop	r28
    b946:	1f 91       	pop	r17
    b948:	0f 91       	pop	r16
    b94a:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b94c:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>

0000b950 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b950:	0e 94 9e 4f 	call	0x9f3c	; 0x9f3c <save_score>
	fade_through();
    b954:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
	init_game_state();
    b958:	0e 94 1e 4f 	call	0x9e3c	; 0x9e3c <init_game_state>
	load_tank_rank();
    b95c:	0c 94 0d 5c 	jmp	0xb81a	; 0xb81a <load_tank_rank>

0000b960 <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    b960:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    b962:	c0 91 b3 0b 	lds	r28, 0x0BB3
    b966:	80 91 f4 0b 	lds	r24, 0x0BF4
    b96a:	ca 30       	cpi	r28, 0x0A	; 10
    b96c:	80 f5       	brcc	.+96     	; 0xb9ce <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    b96e:	8a 30       	cpi	r24, 0x0A	; 10
    b970:	70 f0       	brcs	.+28     	; 0xb98e <resolve_scoring+0x2e>
    b972:	80 91 68 0f 	lds	r24, 0x0F68
    b976:	80 fd       	sbrc	r24, 0
    b978:	0a c0       	rjmp	.+20     	; 0xb98e <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b97a:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBHideAllSprites>
			load_level_tiles(true);
    b97e:	81 e0       	ldi	r24, 0x01	; 1
    b980:	0e 94 ba 58 	call	0xb174	; 0xb174 <load_level_tiles>
			print_level_score(&player1, &player2);
    b984:	63 e5       	ldi	r22, 0x53	; 83
    b986:	7f e0       	ldi	r23, 0x0F	; 15
    b988:	84 ee       	ldi	r24, 0xE4	; 228
    b98a:	9b e0       	ldi	r25, 0x0B	; 11
    b98c:	12 c0       	rjmp	.+36     	; 0xb9b2 <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    b98e:	80 91 63 0f 	lds	r24, 0x0F63
    b992:	8a 30       	cpi	r24, 0x0A	; 10
    b994:	08 f4       	brcc	.+2      	; 0xb998 <resolve_scoring+0x38>
    b996:	a7 c0       	rjmp	.+334    	; 0xbae6 <resolve_scoring+0x186>
    b998:	80 91 f9 0b 	lds	r24, 0x0BF9
    b99c:	80 fd       	sbrc	r24, 0
    b99e:	a3 c0       	rjmp	.+326    	; 0xbae6 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    b9a0:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBHideAllSprites>
			load_level_tiles(true);
    b9a4:	81 e0       	ldi	r24, 0x01	; 1
    b9a6:	0e 94 ba 58 	call	0xb174	; 0xb174 <load_level_tiles>
			print_level_score(&player2, &player1);
    b9aa:	64 ee       	ldi	r22, 0xE4	; 228
    b9ac:	7b e0       	ldi	r23, 0x0B	; 11
    b9ae:	83 e5       	ldi	r24, 0x53	; 83
    b9b0:	9f e0       	ldi	r25, 0x0F	; 15
    b9b2:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    b9b6:	84 e0       	ldi	r24, 0x04	; 4
    b9b8:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LBWaitSeconds>
			player1.level_score = 0;
    b9bc:	10 92 f4 0b 	sts	0x0BF4, r1
			player2.level_score = 0;
    b9c0:	10 92 63 0f 	sts	0x0F63, r1
			level_transition(next_level);
    b9c4:	81 e0       	ldi	r24, 0x01	; 1
    b9c6:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    b9c8:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    b9ca:	0c 94 e3 59 	jmp	0xb3c6	; 0xb3c6 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    b9ce:	8a 30       	cpi	r24, 0x0A	; 10
    b9d0:	28 f4       	brcc	.+10     	; 0xb9dc <resolve_scoring+0x7c>
    b9d2:	80 91 63 0f 	lds	r24, 0x0F63
    b9d6:	8a 30       	cpi	r24, 0x0A	; 10
    b9d8:	08 f4       	brcc	.+2      	; 0xb9dc <resolve_scoring+0x7c>
    b9da:	85 c0       	rjmp	.+266    	; 0xbae6 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    b9dc:	90 91 f3 0b 	lds	r25, 0x0BF3
    b9e0:	80 91 62 0f 	lds	r24, 0x0F62
    b9e4:	98 17       	cp	r25, r24
    b9e6:	09 f4       	brne	.+2      	; 0xb9ea <resolve_scoring+0x8a>
    b9e8:	7e c0       	rjmp	.+252    	; 0xbae6 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    b9ea:	20 91 b5 0b 	lds	r18, 0x0BB5
    b9ee:	21 11       	cpse	r18, r1
    b9f0:	46 c0       	rjmp	.+140    	; 0xba7e <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    b9f2:	c1 e0       	ldi	r28, 0x01	; 1
    b9f4:	c0 93 b5 0b 	sts	0x0BB5, r28
				if (player1.score > player2.score)
    b9f8:	89 17       	cp	r24, r25
    b9fa:	e8 f4       	brcc	.+58     	; 0xba36 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    b9fc:	84 ee       	ldi	r24, 0xE4	; 228
    b9fe:	9b e0       	ldi	r25, 0x0B	; 11
    ba00:	90 93 c2 0b 	sts	0x0BC2, r25
    ba04:	80 93 c1 0b 	sts	0x0BC1, r24
					game.boss_fight_joypad = &p1;
    ba08:	8d e5       	ldi	r24, 0x5D	; 93
    ba0a:	9c e0       	ldi	r25, 0x0C	; 12
    ba0c:	90 93 c4 0b 	sts	0x0BC4, r25
    ba10:	80 93 c3 0b 	sts	0x0BC3, r24
					game.boss_fight_player_hud = 0;
    ba14:	10 92 b6 0b 	sts	0x0BB6, r1
					kill_player(&player2, 15);
    ba18:	6f e0       	ldi	r22, 0x0F	; 15
    ba1a:	83 e5       	ldi	r24, 0x53	; 83
    ba1c:	9f e0       	ldi	r25, 0x0F	; 15
    ba1e:	0e 94 53 55 	call	0xaaa6	; 0xaaa6 <kill_player>
					player_spawn(&player2);
    ba22:	83 e5       	ldi	r24, 0x53	; 83
    ba24:	9f e0       	ldi	r25, 0x0F	; 15
    ba26:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    ba2a:	80 91 68 0f 	lds	r24, 0x0F68
    ba2e:	c8 27       	eor	r28, r24
    ba30:	c0 93 68 0f 	sts	0x0F68, r28
    ba34:	1d c0       	rjmp	.+58     	; 0xba70 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    ba36:	83 e5       	ldi	r24, 0x53	; 83
    ba38:	9f e0       	ldi	r25, 0x0F	; 15
    ba3a:	90 93 c2 0b 	sts	0x0BC2, r25
    ba3e:	80 93 c1 0b 	sts	0x0BC1, r24
					game.boss_fight_joypad = &p2;
    ba42:	82 e8       	ldi	r24, 0x82	; 130
    ba44:	9b e0       	ldi	r25, 0x0B	; 11
    ba46:	90 93 c4 0b 	sts	0x0BC4, r25
    ba4a:	80 93 c3 0b 	sts	0x0BC3, r24
					game.boss_fight_player_hud = 15;
    ba4e:	8f e0       	ldi	r24, 0x0F	; 15
    ba50:	80 93 b6 0b 	sts	0x0BB6, r24
					kill_player(&player1, 0);
    ba54:	60 e0       	ldi	r22, 0x00	; 0
    ba56:	84 ee       	ldi	r24, 0xE4	; 228
    ba58:	9b e0       	ldi	r25, 0x0B	; 11
    ba5a:	0e 94 53 55 	call	0xaaa6	; 0xaaa6 <kill_player>
					player_spawn(&player1);
    ba5e:	84 ee       	ldi	r24, 0xE4	; 228
    ba60:	9b e0       	ldi	r25, 0x0B	; 11
    ba62:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    ba66:	80 91 f9 0b 	lds	r24, 0x0BF9
    ba6a:	c8 27       	eor	r28, r24
    ba6c:	c0 93 f9 0b 	sts	0x0BF9, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    ba70:	85 ea       	ldi	r24, 0xA5	; 165
    ba72:	90 e0       	ldi	r25, 0x00	; 0
    ba74:	90 93 e7 0f 	sts	0x0FE7, r25
    ba78:	80 93 e6 0f 	sts	0x0FE6, r24
				return;
    ba7c:	34 c0       	rjmp	.+104    	; 0xbae6 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    ba7e:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBHideAllSprites>
			load_level_tiles(true);
    ba82:	81 e0       	ldi	r24, 0x01	; 1
    ba84:	0e 94 ba 58 	call	0xb174	; 0xb174 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    ba88:	90 91 f4 0b 	lds	r25, 0x0BF4
    ba8c:	80 91 63 0f 	lds	r24, 0x0F63
    ba90:	89 17       	cp	r24, r25
    ba92:	28 f4       	brcc	.+10     	; 0xba9e <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    ba94:	63 e5       	ldi	r22, 0x53	; 83
    ba96:	7f e0       	ldi	r23, 0x0F	; 15
    ba98:	84 ee       	ldi	r24, 0xE4	; 228
    ba9a:	9b e0       	ldi	r25, 0x0B	; 11
    ba9c:	04 c0       	rjmp	.+8      	; 0xbaa6 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    ba9e:	64 ee       	ldi	r22, 0xE4	; 228
    baa0:	7b e0       	ldi	r23, 0x0B	; 11
    baa2:	83 e5       	ldi	r24, 0x53	; 83
    baa4:	9f e0       	ldi	r25, 0x0F	; 15
    baa6:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    baaa:	84 e0       	ldi	r24, 0x04	; 4
    baac:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LBWaitSeconds>
			player1.level_score = 0;
    bab0:	10 92 f4 0b 	sts	0x0BF4, r1
			player2.level_score = 0;
    bab4:	10 92 63 0f 	sts	0x0F63, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    bab8:	90 91 f3 0b 	lds	r25, 0x0BF3
    babc:	80 91 62 0f 	lds	r24, 0x0F62
    bac0:	89 17       	cp	r24, r25
    bac2:	28 f4       	brcc	.+10     	; 0xbace <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    bac4:	63 e5       	ldi	r22, 0x53	; 83
    bac6:	7f e0       	ldi	r23, 0x0F	; 15
    bac8:	84 ee       	ldi	r24, 0xE4	; 228
    baca:	9b e0       	ldi	r25, 0x0B	; 11
    bacc:	04 c0       	rjmp	.+8      	; 0xbad6 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    bace:	64 ee       	ldi	r22, 0xE4	; 228
    bad0:	7b e0       	ldi	r23, 0x0B	; 11
    bad2:	83 e5       	ldi	r24, 0x53	; 83
    bad4:	9f e0       	ldi	r25, 0x0F	; 15
    bad6:	0e 94 bd 50 	call	0xa17a	; 0xa17a <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    bada:	84 e0       	ldi	r24, 0x04	; 4
    badc:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LBWaitSeconds>
			exit_game();
		}
	}
}
    bae0:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    bae2:	0c 94 a8 5c 	jmp	0xb950	; 0xb950 <exit_game>
		}
	}
}
    bae6:	cf 91       	pop	r28
    bae8:	08 95       	ret

0000baea <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    baea:	cf 93       	push	r28
    baec:	df 93       	push	r29
    baee:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    baf0:	88 81       	ld	r24, Y
    baf2:	99 81       	ldd	r25, Y+1	; 0x01
    baf4:	91 ff       	sbrs	r25, 1
    baf6:	08 c0       	rjmp	.+16     	; 0xbb08 <update_tank_rank+0x1e>
	{
		game.tank_rank_counter = 0;
    baf8:	10 92 c0 0b 	sts	0x0BC0, r1
    bafc:	10 92 bf 0b 	sts	0x0BBF, r1
		SFX_NAVIGATE;
		fade_through();
    bb00:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_splash();
    bb04:	0e 94 b9 5b 	call	0xb772	; 0xb772 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    bb08:	8c 81       	ldd	r24, Y+4	; 0x04
    bb0a:	9d 81       	ldd	r25, Y+5	; 0x05
    bb0c:	92 ff       	sbrs	r25, 2
    bb0e:	19 c0       	rjmp	.+50     	; 0xbb42 <update_tank_rank+0x58>
    bb10:	8e 81       	ldd	r24, Y+6	; 0x06
    bb12:	8f 3f       	cpi	r24, 0xFF	; 255
    bb14:	b1 f4       	brne	.+44     	; 0xbb42 <update_tank_rank+0x58>
	{
		game.tank_rank_counter = 0;
    bb16:	10 92 c0 0b 	sts	0x0BC0, r1
    bb1a:	10 92 bf 0b 	sts	0x0BBF, r1
	    SFX_NAVIGATE;
	    init_scores(&scores);
    bb1e:	82 e6       	ldi	r24, 0x62	; 98
    bb20:	9b e0       	ldi	r25, 0x0B	; 11
    bb22:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <init_scores>
	    init_handles(&handles);
    bb26:	82 e9       	ldi	r24, 0x92	; 146
    bb28:	9b e0       	ldi	r25, 0x0B	; 11
    bb2a:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    bb2e:	82 e6       	ldi	r24, 0x62	; 98
    bb30:	9b e0       	ldi	r25, 0x0B	; 11
    bb32:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <EepromWriteBlock>
    bb36:	82 e9       	ldi	r24, 0x92	; 146
    bb38:	9b e0       	ldi	r25, 0x0B	; 11
    bb3a:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    bb3e:	0e 94 0d 5c 	call	0xb81a	; 0xb81a <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    bb42:	80 91 bf 0b 	lds	r24, 0x0BBF
    bb46:	90 91 c0 0b 	lds	r25, 0x0BC0
    bb4a:	85 38       	cpi	r24, 0x85	; 133
    bb4c:	93 40       	sbci	r25, 0x03	; 3
    bb4e:	40 f0       	brcs	.+16     	; 0xbb60 <update_tank_rank+0x76>
	{
		game.tank_rank_counter = 0;
    bb50:	10 92 c0 0b 	sts	0x0BC0, r1
    bb54:	10 92 bf 0b 	sts	0x0BBF, r1
		SFX_NAVIGATE;
		fade_through();
    bb58:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_splash();
    bb5c:	0e 94 b9 5b 	call	0xb772	; 0xb772 <load_splash>
	}
	game.tank_rank_counter++;
    bb60:	80 91 bf 0b 	lds	r24, 0x0BBF
    bb64:	90 91 c0 0b 	lds	r25, 0x0BC0
    bb68:	01 96       	adiw	r24, 0x01	; 1
    bb6a:	90 93 c0 0b 	sts	0x0BC0, r25
    bb6e:	80 93 bf 0b 	sts	0x0BBF, r24
#endif
}
    bb72:	df 91       	pop	r29
    bb74:	cf 91       	pop	r28
    bb76:	08 95       	ret

0000bb78 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    bb78:	af 92       	push	r10
    bb7a:	bf 92       	push	r11
    bb7c:	cf 92       	push	r12
    bb7e:	df 92       	push	r13
    bb80:	ef 92       	push	r14
    bb82:	ff 92       	push	r15
    bb84:	0f 93       	push	r16
    bb86:	1f 93       	push	r17
    bb88:	cf 93       	push	r28
    bb8a:	df 93       	push	r29
    bb8c:	00 d0       	rcall	.+0      	; 0xbb8e <_handle_select_render_helper+0x16>
    bb8e:	1f 92       	push	r1
    bb90:	cd b7       	in	r28, 0x3d	; 61
    bb92:	de b7       	in	r29, 0x3e	; 62
    bb94:	7c 01       	movw	r14, r24
    bb96:	b4 2e       	mov	r11, r20
    bb98:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    bb9a:	80 e2       	ldi	r24, 0x20	; 32
    bb9c:	89 83       	std	Y+1, r24	; 0x01
    bb9e:	8a 83       	std	Y+2, r24	; 0x02
    bba0:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    bba2:	f7 01       	movw	r30, r14
    bba4:	85 81       	ldd	r24, Z+5	; 0x05
    bba6:	81 11       	cpse	r24, r1
    bba8:	1d c0       	rjmp	.+58     	; 0xbbe4 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    bbaa:	40 e0       	ldi	r20, 0x00	; 0
    bbac:	67 e6       	ldi	r22, 0x67	; 103
    bbae:	70 e3       	ldi	r23, 0x30	; 48
    bbb0:	82 2f       	mov	r24, r18
    bbb2:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    bbb6:	40 e0       	ldi	r20, 0x00	; 0
    bbb8:	69 ea       	ldi	r22, 0xA9	; 169
    bbba:	70 e3       	ldi	r23, 0x30	; 48
    bbbc:	81 e0       	ldi	r24, 0x01	; 1
    bbbe:	81 0f       	add	r24, r17
    bbc0:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    bbc4:	f7 01       	movw	r30, r14
    bbc6:	40 81       	ld	r20, Z
    bbc8:	44 0f       	add	r20, r20
    bbca:	44 0f       	add	r20, r20
    bbcc:	44 0f       	add	r20, r20
    bbce:	40 5c       	subi	r20, 0xC0	; 192
    bbd0:	01 e0       	ldi	r16, 0x01	; 1
    bbd2:	21 e0       	ldi	r18, 0x01	; 1
    bbd4:	6b 2d       	mov	r22, r11
    bbd6:	66 0f       	add	r22, r22
    bbd8:	66 0f       	add	r22, r22
    bbda:	66 0f       	add	r22, r22
    bbdc:	81 2f       	mov	r24, r17
    bbde:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
    bbe2:	6f c0       	rjmp	.+222    	; 0xbcc2 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    bbe4:	81 30       	cpi	r24, 0x01	; 1
    bbe6:	09 f0       	breq	.+2      	; 0xbbea <_handle_select_render_helper+0x72>
    bbe8:	44 c0       	rjmp	.+136    	; 0xbc72 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    bbea:	40 e0       	ldi	r20, 0x00	; 0
    bbec:	64 e6       	ldi	r22, 0x64	; 100
    bbee:	70 e3       	ldi	r23, 0x30	; 48
    bbf0:	82 2f       	mov	r24, r18
    bbf2:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    bbf6:	aa 24       	eor	r10, r10
    bbf8:	a3 94       	inc	r10
    bbfa:	a1 0e       	add	r10, r17
    bbfc:	40 e0       	ldi	r20, 0x00	; 0
    bbfe:	61 e6       	ldi	r22, 0x61	; 97
    bc00:	70 e3       	ldi	r23, 0x30	; 48
    bc02:	8a 2d       	mov	r24, r10
    bc04:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    bc08:	cb 2c       	mov	r12, r11
    bc0a:	d1 2c       	mov	r13, r1
    bc0c:	f5 e0       	ldi	r31, 0x05	; 5
    bc0e:	cf 0e       	add	r12, r31
    bc10:	d1 1c       	adc	r13, r1
    bc12:	f7 01       	movw	r30, r14
    bc14:	40 81       	ld	r20, Z
    bc16:	44 0f       	add	r20, r20
    bc18:	44 0f       	add	r20, r20
    bc1a:	44 0f       	add	r20, r20
    bc1c:	48 5c       	subi	r20, 0xC8	; 200
    bc1e:	84 81       	ldd	r24, Z+4	; 0x04
    bc20:	b6 01       	movw	r22, r12
    bc22:	68 0f       	add	r22, r24
    bc24:	71 1d       	adc	r23, r1
    bc26:	87 fd       	sbrc	r24, 7
    bc28:	7a 95       	dec	r23
    bc2a:	66 0f       	add	r22, r22
    bc2c:	66 0f       	add	r22, r22
    bc2e:	66 0f       	add	r22, r22
    bc30:	01 e0       	ldi	r16, 0x01	; 1
    bc32:	21 e0       	ldi	r18, 0x01	; 1
    bc34:	81 2f       	mov	r24, r17
    bc36:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    bc3a:	f7 01       	movw	r30, r14
    bc3c:	40 81       	ld	r20, Z
    bc3e:	44 0f       	add	r20, r20
    bc40:	44 0f       	add	r20, r20
    bc42:	44 0f       	add	r20, r20
    bc44:	48 5b       	subi	r20, 0xB8	; 184
    bc46:	84 81       	ldd	r24, Z+4	; 0x04
    bc48:	c8 0e       	add	r12, r24
    bc4a:	d1 1c       	adc	r13, r1
    bc4c:	87 fd       	sbrc	r24, 7
    bc4e:	da 94       	dec	r13
    bc50:	6c 2d       	mov	r22, r12
    bc52:	66 0f       	add	r22, r22
    bc54:	66 0f       	add	r22, r22
    bc56:	66 0f       	add	r22, r22
    bc58:	21 e0       	ldi	r18, 0x01	; 1
    bc5a:	8a 2d       	mov	r24, r10
    bc5c:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    bc60:	43 e0       	ldi	r20, 0x03	; 3
    bc62:	b7 01       	movw	r22, r14
    bc64:	6f 5f       	subi	r22, 0xFF	; 255
    bc66:	7f 4f       	sbci	r23, 0xFF	; 255
    bc68:	ce 01       	movw	r24, r28
    bc6a:	01 96       	adiw	r24, 0x01	; 1
    bc6c:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
    bc70:	28 c0       	rjmp	.+80     	; 0xbcc2 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    bc72:	82 30       	cpi	r24, 0x02	; 2
    bc74:	31 f5       	brne	.+76     	; 0xbcc2 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    bc76:	c4 2e       	mov	r12, r20
    bc78:	d1 2c       	mov	r13, r1
    bc7a:	48 e2       	ldi	r20, 0x28	; 40
    bc7c:	65 e0       	ldi	r22, 0x05	; 5
    bc7e:	70 e0       	ldi	r23, 0x00	; 0
    bc80:	c6 01       	movw	r24, r12
    bc82:	06 96       	adiw	r24, 0x06	; 6
    bc84:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    bc88:	23 e0       	ldi	r18, 0x03	; 3
    bc8a:	a7 01       	movw	r20, r14
    bc8c:	4f 5f       	subi	r20, 0xFF	; 255
    bc8e:	5f 4f       	sbci	r21, 0xFF	; 255
    bc90:	65 e0       	ldi	r22, 0x05	; 5
    bc92:	87 e0       	ldi	r24, 0x07	; 7
    bc94:	8b 0d       	add	r24, r11
    bc96:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    bc9a:	49 e2       	ldi	r20, 0x29	; 41
    bc9c:	65 e0       	ldi	r22, 0x05	; 5
    bc9e:	70 e0       	ldi	r23, 0x00	; 0
    bca0:	c6 01       	movw	r24, r12
    bca2:	0a 96       	adiw	r24, 0x0a	; 10
    bca4:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
		MapSprite2(idx, map_none, 0);
    bca8:	40 e0       	ldi	r20, 0x00	; 0
    bcaa:	69 ea       	ldi	r22, 0xA9	; 169
    bcac:	70 e3       	ldi	r23, 0x30	; 48
    bcae:	81 2f       	mov	r24, r17
    bcb0:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    bcb4:	40 e0       	ldi	r20, 0x00	; 0
    bcb6:	69 ea       	ldi	r22, 0xA9	; 169
    bcb8:	70 e3       	ldi	r23, 0x30	; 48
    bcba:	81 e0       	ldi	r24, 0x01	; 1
    bcbc:	81 0f       	add	r24, r17
    bcbe:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    bcc2:	f7 01       	movw	r30, r14
    bcc4:	60 81       	ld	r22, Z
    bcc6:	68 5f       	subi	r22, 0xF8	; 248
    bcc8:	23 e0       	ldi	r18, 0x03	; 3
    bcca:	ae 01       	movw	r20, r28
    bccc:	4f 5f       	subi	r20, 0xFF	; 255
    bcce:	5f 4f       	sbci	r21, 0xFF	; 255
    bcd0:	85 e0       	ldi	r24, 0x05	; 5
    bcd2:	8b 0d       	add	r24, r11
    bcd4:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
}
    bcd8:	0f 90       	pop	r0
    bcda:	0f 90       	pop	r0
    bcdc:	0f 90       	pop	r0
    bcde:	df 91       	pop	r29
    bce0:	cf 91       	pop	r28
    bce2:	1f 91       	pop	r17
    bce4:	0f 91       	pop	r16
    bce6:	ff 90       	pop	r15
    bce8:	ef 90       	pop	r14
    bcea:	df 90       	pop	r13
    bcec:	cf 90       	pop	r12
    bcee:	bf 90       	pop	r11
    bcf0:	af 90       	pop	r10
    bcf2:	08 95       	ret

0000bcf4 <load_handle_select>:

void load_handle_select()
{
    bcf4:	8f 92       	push	r8
    bcf6:	9f 92       	push	r9
    bcf8:	af 92       	push	r10
    bcfa:	bf 92       	push	r11
    bcfc:	cf 92       	push	r12
    bcfe:	df 92       	push	r13
    bd00:	ef 92       	push	r14
    bd02:	ff 92       	push	r15
    bd04:	0f 93       	push	r16
    bd06:	1f 93       	push	r17
    bd08:	cf 93       	push	r28
    bd0a:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    bd0c:	82 e0       	ldi	r24, 0x02	; 2
    bd0e:	80 93 b2 0b 	sts	0x0BB2, r24
	clear_sprites();
    bd12:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    bd16:	47 ee       	ldi	r20, 0xE7	; 231
    bd18:	59 e6       	ldi	r21, 0x69	; 105
    bd1a:	64 e0       	ldi	r22, 0x04	; 4
    bd1c:	83 e0       	ldi	r24, 0x03	; 3
    bd1e:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    bd22:	41 ee       	ldi	r20, 0xE1	; 225
    bd24:	59 e6       	ldi	r21, 0x69	; 105
    bd26:	64 e0       	ldi	r22, 0x04	; 4
    bd28:	84 e1       	ldi	r24, 0x14	; 20
    bd2a:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    bd2e:	4f e6       	ldi	r20, 0x6F	; 111
    bd30:	54 e0       	ldi	r21, 0x04	; 4
    bd32:	61 e0       	ldi	r22, 0x01	; 1
    bd34:	70 e0       	ldi	r23, 0x00	; 0
    bd36:	89 e0       	ldi	r24, 0x09	; 9
    bd38:	90 e0       	ldi	r25, 0x00	; 0
    bd3a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(6, 5, (char*) strPlayer1);
    bd3e:	4e e5       	ldi	r20, 0x5E	; 94
    bd40:	54 e0       	ldi	r21, 0x04	; 4
    bd42:	65 e0       	ldi	r22, 0x05	; 5
    bd44:	70 e0       	ldi	r23, 0x00	; 0
    bd46:	86 e0       	ldi	r24, 0x06	; 6
    bd48:	90 e0       	ldi	r25, 0x00	; 0
    bd4a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(23, 5, (char*) strPlayer2);
    bd4e:	4b e5       	ldi	r20, 0x5B	; 91
    bd50:	54 e0       	ldi	r21, 0x04	; 4
    bd52:	65 e0       	ldi	r22, 0x05	; 5
    bd54:	70 e0       	ldi	r23, 0x00	; 0
    bd56:	87 e1       	ldi	r24, 0x17	; 23
    bd58:	90 e0       	ldi	r25, 0x00	; 0
    bd5a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
    bd5e:	84 e9       	ldi	r24, 0x94	; 148
    bd60:	e8 2e       	mov	r14, r24
    bd62:	8b e0       	ldi	r24, 0x0B	; 11
    bd64:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    bd66:	c0 e0       	ldi	r28, 0x00	; 0
    bd68:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    bd6a:	93 e0       	ldi	r25, 0x03	; 3
    bd6c:	a9 2e       	mov	r10, r25
    bd6e:	b1 2c       	mov	r11, r1
    bd70:	67 01       	movw	r12, r14
    bd72:	ce 01       	movw	r24, r28
    bd74:	b5 01       	movw	r22, r10
    bd76:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    bd7a:	4c 01       	movw	r8, r24
    bd7c:	8b 01       	movw	r16, r22
    bd7e:	08 5f       	subi	r16, 0xF8	; 248
    bd80:	1f 4f       	sbci	r17, 0xFF	; 255
    bd82:	f7 01       	movw	r30, r14
    bd84:	41 91       	ld	r20, Z+
    bd86:	7f 01       	movw	r14, r30
    bd88:	b8 01       	movw	r22, r16
    bd8a:	03 96       	adiw	r24, 0x03	; 3
    bd8c:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    bd90:	f6 01       	movw	r30, r12
    bd92:	40 81       	ld	r20, Z
    bd94:	b8 01       	movw	r22, r16
    bd96:	c4 01       	movw	r24, r8
    bd98:	44 96       	adiw	r24, 0x14	; 20
    bd9a:	0e 94 87 48 	call	0x910e	; 0x910e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    bd9e:	21 96       	adiw	r28, 0x01	; 1
    bda0:	cb 31       	cpi	r28, 0x1B	; 27
    bda2:	d1 05       	cpc	r29, r1
    bda4:	29 f7       	brne	.-54     	; 0xbd70 <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    bda6:	4a e9       	ldi	r20, 0x9A	; 154
    bda8:	54 e0       	ldi	r21, 0x04	; 4
    bdaa:	65 e1       	ldi	r22, 0x15	; 21
    bdac:	70 e0       	ldi	r23, 0x00	; 0
    bdae:	85 e0       	ldi	r24, 0x05	; 5
    bdb0:	90 e0       	ldi	r25, 0x00	; 0
    bdb2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    bdb6:	4d ec       	ldi	r20, 0xCD	; 205
    bdb8:	54 e0       	ldi	r21, 0x04	; 4
    bdba:	66 e1       	ldi	r22, 0x16	; 22
    bdbc:	70 e0       	ldi	r23, 0x00	; 0
    bdbe:	85 e0       	ldi	r24, 0x05	; 5
    bdc0:	90 e0       	ldi	r25, 0x00	; 0
    bdc2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    bdc6:	49 ea       	ldi	r20, 0xA9	; 169
    bdc8:	54 e0       	ldi	r21, 0x04	; 4
    bdca:	67 e1       	ldi	r22, 0x17	; 23
    bdcc:	70 e0       	ldi	r23, 0x00	; 0
    bdce:	85 e0       	ldi	r24, 0x05	; 5
    bdd0:	90 e0       	ldi	r25, 0x00	; 0
    bdd2:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    bdd6:	4c e4       	ldi	r20, 0x4C	; 76
    bdd8:	54 e0       	ldi	r21, 0x04	; 4
    bdda:	68 e1       	ldi	r22, 0x18	; 24
    bddc:	70 e0       	ldi	r23, 0x00	; 0
    bdde:	85 e0       	ldi	r24, 0x05	; 5
    bde0:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    bde2:	df 91       	pop	r29
    bde4:	cf 91       	pop	r28
    bde6:	1f 91       	pop	r17
    bde8:	0f 91       	pop	r16
    bdea:	ff 90       	pop	r15
    bdec:	ef 90       	pop	r14
    bdee:	df 90       	pop	r13
    bdf0:	cf 90       	pop	r12
    bdf2:	bf 90       	pop	r11
    bdf4:	af 90       	pop	r10
    bdf6:	9f 90       	pop	r9
    bdf8:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    bdfa:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>

0000bdfe <load_host_net_game>:
	}
}

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    bdfe:	84 e0       	ldi	r24, 0x04	; 4
    be00:	80 93 b2 0b 	sts	0x0BB2, r24
	clear_sprites();
    be04:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	if (hostNetGame(gameId) == WIFI_OK)
    be08:	89 e8       	ldi	r24, 0x89	; 137
    be0a:	9b e0       	ldi	r25, 0x0B	; 11
    be0c:	0e 94 79 4a 	call	0x94f2	; 0x94f2 <hostNetGame>
    be10:	81 11       	cpse	r24, r1
    be12:	25 c0       	rjmp	.+74     	; 0xbe5e <load_host_net_game+0x60>
	{
		Print(4, 1, (char*) strShareGameId);
    be14:	49 e2       	ldi	r20, 0x29	; 41
    be16:	55 e0       	ldi	r21, 0x05	; 5
    be18:	61 e0       	ldi	r22, 0x01	; 1
    be1a:	70 e0       	ldi	r23, 0x00	; 0
    be1c:	84 e0       	ldi	r24, 0x04	; 4
    be1e:	90 e0       	ldi	r25, 0x00	; 0
    be20:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		Print(10, 10, gameId);
    be24:	49 e8       	ldi	r20, 0x89	; 137
    be26:	5b e0       	ldi	r21, 0x0B	; 11
    be28:	6a e0       	ldi	r22, 0x0A	; 10
    be2a:	70 e0       	ldi	r23, 0x00	; 0
    be2c:	8a e0       	ldi	r24, 0x0A	; 10
    be2e:	90 e0       	ldi	r25, 0x00	; 0
    be30:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		Print(1, 19, (char*) strWaitingForNetOppenent);
    be34:	4e e0       	ldi	r20, 0x0E	; 14
    be36:	55 e0       	ldi	r21, 0x05	; 5
    be38:	63 e1       	ldi	r22, 0x13	; 19
    be3a:	70 e0       	ldi	r23, 0x00	; 0
    be3c:	81 e0       	ldi	r24, 0x01	; 1
    be3e:	90 e0       	ldi	r25, 0x00	; 0
    be40:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		DrawMap2(8, 10, map_green_tank);
    be44:	47 ee       	ldi	r20, 0xE7	; 231
    be46:	59 e6       	ldi	r21, 0x69	; 105
    be48:	6a e0       	ldi	r22, 0x0A	; 10
    be4a:	88 e0       	ldi	r24, 0x08	; 8
    be4c:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
		DrawMap2(18, 10, map_blue_tank);
    be50:	41 ee       	ldi	r20, 0xE1	; 225
    be52:	59 e6       	ldi	r21, 0x69	; 105
    be54:	6a e0       	ldi	r22, 0x0A	; 10
    be56:	82 e1       	ldi	r24, 0x12	; 18
    be58:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
    be5c:	08 c0       	rjmp	.+16     	; 0xbe6e <load_host_net_game+0x70>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
    be5e:	4f ed       	ldi	r20, 0xDF	; 223
    be60:	54 e0       	ldi	r21, 0x04	; 4
    be62:	6a e0       	ldi	r22, 0x0A	; 10
    be64:	70 e0       	ldi	r23, 0x00	; 0
    be66:	87 e0       	ldi	r24, 0x07	; 7
    be68:	90 e0       	ldi	r25, 0x00	; 0
    be6a:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	}
	Print(5, 23, (char*) strCancelHandle);
    be6e:	49 ea       	ldi	r20, 0xA9	; 169
    be70:	54 e0       	ldi	r21, 0x04	; 4
    be72:	67 e1       	ldi	r22, 0x17	; 23
    be74:	70 e0       	ldi	r23, 0x00	; 0
    be76:	85 e0       	ldi	r24, 0x05	; 5
    be78:	90 e0       	ldi	r25, 0x00	; 0
    be7a:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>

0000be7e <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    be7e:	fc 01       	movw	r30, r24
    be80:	80 81       	ld	r24, Z
    be82:	91 81       	ldd	r25, Z+1	; 0x01
    be84:	91 ff       	sbrs	r25, 1
    be86:	04 c0       	rjmp	.+8      	; 0xbe90 <update_host_net_game+0x12>
	{
		SFX_NAVIGATE;
		fade_through();
    be88:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_splash();
    be8c:	0c 94 b9 5b 	jmp	0xb772	; 0xb772 <load_splash>
	} 
	else if (netMessage.code == NETJOINED)
    be90:	80 91 e8 0f 	lds	r24, 0x0FE8
    be94:	8b 30       	cpi	r24, 0x0B	; 11
    be96:	81 f4       	brne	.+32     	; 0xbeb8 <update_host_net_game+0x3a>
	{
		game.demo_counter = 0;
    be98:	10 92 bc 0b 	sts	0x0BBC, r1
    be9c:	10 92 bb 0b 	sts	0x0BBB, r1
		p1s.select_state = SELECTING;
    bea0:	10 92 67 0a 	sts	0x0A67, r1
		p2s.select_state = SELECTING;
    bea4:	10 92 61 0a 	sts	0x0A61, r1
		SFX_NAVIGATE;
		fade_through();
    bea8:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_eeprom(&handles);
    beac:	82 e9       	ldi	r24, 0x92	; 146
    beae:	9b e0       	ldi	r25, 0x0B	; 11
    beb0:	0e 94 75 4f 	call	0x9eea	; 0x9eea <load_eeprom>
		load_handle_select();
    beb4:	0c 94 7a 5e 	jmp	0xbcf4	; 0xbcf4 <load_handle_select>
    beb8:	08 95       	ret

0000beba <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    beba:	85 e0       	ldi	r24, 0x05	; 5
    bebc:	80 93 b2 0b 	sts	0x0BB2, r24
	clear_sprites();
    bec0:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
	Print(4, 1, (char*) strEnterGameId);
    bec4:	4d ee       	ldi	r20, 0xED	; 237
    bec6:	54 e0       	ldi	r21, 0x04	; 4
    bec8:	61 e0       	ldi	r22, 0x01	; 1
    beca:	70 e0       	ldi	r23, 0x00	; 0
    becc:	84 e0       	ldi	r24, 0x04	; 4
    bece:	90 e0       	ldi	r25, 0x00	; 0
    bed0:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(10, 10, gameId);
    bed4:	49 e8       	ldi	r20, 0x89	; 137
    bed6:	5b e0       	ldi	r21, 0x0B	; 11
    bed8:	6a e0       	ldi	r22, 0x0A	; 10
    beda:	70 e0       	ldi	r23, 0x00	; 0
    bedc:	8a e0       	ldi	r24, 0x0A	; 10
    bede:	90 e0       	ldi	r25, 0x00	; 0
    bee0:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	DrawMap2(8, 10, map_green_tank);
    bee4:	47 ee       	ldi	r20, 0xE7	; 231
    bee6:	59 e6       	ldi	r21, 0x69	; 105
    bee8:	6a e0       	ldi	r22, 0x0A	; 10
    beea:	88 e0       	ldi	r24, 0x08	; 8
    beec:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	DrawMap2(18, 10, map_blue_tank);
    bef0:	41 ee       	ldi	r20, 0xE1	; 225
    bef2:	59 e6       	ldi	r21, 0x69	; 105
    bef4:	6a e0       	ldi	r22, 0x0A	; 10
    bef6:	82 e1       	ldi	r24, 0x12	; 18
    bef8:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
	
	Print(5, 22, (char*) strConfirmHandle);
    befc:	4d ec       	ldi	r20, 0xCD	; 205
    befe:	54 e0       	ldi	r21, 0x04	; 4
    bf00:	66 e1       	ldi	r22, 0x16	; 22
    bf02:	70 e0       	ldi	r23, 0x00	; 0
    bf04:	85 e0       	ldi	r24, 0x05	; 5
    bf06:	90 e0       	ldi	r25, 0x00	; 0
    bf08:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    bf0c:	49 ea       	ldi	r20, 0xA9	; 169
    bf0e:	54 e0       	ldi	r21, 0x04	; 4
    bf10:	67 e1       	ldi	r22, 0x17	; 23
    bf12:	70 e0       	ldi	r23, 0x00	; 0
    bf14:	85 e0       	ldi	r24, 0x05	; 5
    bf16:	90 e0       	ldi	r25, 0x00	; 0
    bf18:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>

0000bf1c <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    bf1c:	0f 93       	push	r16
    bf1e:	cf 93       	push	r28
    bf20:	df 93       	push	r29
    bf22:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bf24:	90 91 c5 0b 	lds	r25, 0x0BC5
    bf28:	92 30       	cpi	r25, 0x02	; 2
    bf2a:	a9 f0       	breq	.+42     	; 0xbf56 <update_splash+0x3a>
    bf2c:	44 f4       	brge	.+16     	; 0xbf3e <update_splash+0x22>
    bf2e:	99 23       	and	r25, r25
    bf30:	71 f0       	breq	.+28     	; 0xbf4e <update_splash+0x32>
    bf32:	91 30       	cpi	r25, 0x01	; 1
    bf34:	d9 f4       	brne	.+54     	; 0xbf6c <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    bf36:	01 e0       	ldi	r16, 0x01	; 1
    bf38:	21 e0       	ldi	r18, 0x01	; 1
    bf3a:	40 e7       	ldi	r20, 0x70	; 112
    bf3c:	13 c0       	rjmp	.+38     	; 0xbf64 <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    bf3e:	93 30       	cpi	r25, 0x03	; 3
    bf40:	71 f0       	breq	.+28     	; 0xbf5e <update_splash+0x42>
    bf42:	94 30       	cpi	r25, 0x04	; 4
    bf44:	99 f4       	brne	.+38     	; 0xbf6c <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bf46:	01 e0       	ldi	r16, 0x01	; 1
    bf48:	21 e0       	ldi	r18, 0x01	; 1
    bf4a:	48 e8       	ldi	r20, 0x88	; 136
    bf4c:	0b c0       	rjmp	.+22     	; 0xbf64 <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    bf4e:	01 e0       	ldi	r16, 0x01	; 1
    bf50:	21 e0       	ldi	r18, 0x01	; 1
    bf52:	48 e6       	ldi	r20, 0x68	; 104
    bf54:	07 c0       	rjmp	.+14     	; 0xbf64 <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    bf56:	01 e0       	ldi	r16, 0x01	; 1
    bf58:	21 e0       	ldi	r18, 0x01	; 1
    bf5a:	48 e7       	ldi	r20, 0x78	; 120
    bf5c:	03 c0       	rjmp	.+6      	; 0xbf64 <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    bf5e:	01 e0       	ldi	r16, 0x01	; 1
    bf60:	21 e0       	ldi	r18, 0x01	; 1
    bf62:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    bf64:	60 e3       	ldi	r22, 0x30	; 48
    bf66:	80 e0       	ldi	r24, 0x00	; 0
    bf68:	0e 94 b8 47 	call	0x8f70	; 0x8f70 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    bf6c:	4a e9       	ldi	r20, 0x9A	; 154
    bf6e:	54 e0       	ldi	r21, 0x04	; 4
    bf70:	65 e1       	ldi	r22, 0x15	; 21
    bf72:	70 e0       	ldi	r23, 0x00	; 0
    bf74:	86 e0       	ldi	r24, 0x06	; 6
    bf76:	90 e0       	ldi	r25, 0x00	; 0
    bf78:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    bf7c:	28 81       	ld	r18, Y
    bf7e:	39 81       	ldd	r19, Y+1	; 0x01
    bf80:	21 15       	cp	r18, r1
    bf82:	31 05       	cpc	r19, r1
    bf84:	21 f0       	breq	.+8      	; 0xbf8e <update_splash+0x72>
    bf86:	10 92 bc 0b 	sts	0x0BBC, r1
    bf8a:	10 92 bb 0b 	sts	0x0BBB, r1
	
	if (p1->pressed & BTN_UP)
    bf8e:	24 ff       	sbrs	r18, 4
    bf90:	16 c0       	rjmp	.+44     	; 0xbfbe <update_splash+0xa2>
	{
		game.selection--;
    bf92:	80 91 c5 0b 	lds	r24, 0x0BC5
    bf96:	9f ef       	ldi	r25, 0xFF	; 255
    bf98:	98 0f       	add	r25, r24
    bf9a:	90 93 c5 0b 	sts	0x0BC5, r25
		if (game.selection == JOINNETGAME && wifi_status != WIFI_OK) game.selection -= 2;
    bf9e:	93 30       	cpi	r25, 0x03	; 3
    bfa0:	39 f4       	brne	.+14     	; 0xbfb0 <update_splash+0x94>
    bfa2:	90 91 e3 0b 	lds	r25, 0x0BE3
    bfa6:	99 23       	and	r25, r25
    bfa8:	19 f0       	breq	.+6      	; 0xbfb0 <update_splash+0x94>
    bfaa:	83 50       	subi	r24, 0x03	; 3
    bfac:	80 93 c5 0b 	sts	0x0BC5, r24
		if (game.selection < PVCPU) game.selection = PVCPU;
    bfb0:	80 91 c5 0b 	lds	r24, 0x0BC5
    bfb4:	87 ff       	sbrs	r24, 7
    bfb6:	a3 c0       	rjmp	.+326    	; 0xc0fe <update_splash+0x1e2>
    bfb8:	10 92 c5 0b 	sts	0x0BC5, r1
    bfbc:	a0 c0       	rjmp	.+320    	; 0xc0fe <update_splash+0x1e2>
		SFX_NAVIGATE;
	}
	else if (p1->pressed & BTN_DOWN)
    bfbe:	25 ff       	sbrs	r18, 5
    bfc0:	18 c0       	rjmp	.+48     	; 0xbff2 <update_splash+0xd6>
	{
		game.selection++;
    bfc2:	80 91 c5 0b 	lds	r24, 0x0BC5
    bfc6:	91 e0       	ldi	r25, 0x01	; 1
    bfc8:	98 0f       	add	r25, r24
    bfca:	90 93 c5 0b 	sts	0x0BC5, r25
		if (game.selection == HOSTNETGAME && wifi_status != WIFI_OK) game.selection += 2;
    bfce:	92 30       	cpi	r25, 0x02	; 2
    bfd0:	39 f4       	brne	.+14     	; 0xbfe0 <update_splash+0xc4>
    bfd2:	90 91 e3 0b 	lds	r25, 0x0BE3
    bfd6:	99 23       	and	r25, r25
    bfd8:	19 f0       	breq	.+6      	; 0xbfe0 <update_splash+0xc4>
    bfda:	8d 5f       	subi	r24, 0xFD	; 253
    bfdc:	80 93 c5 0b 	sts	0x0BC5, r24
		if (game.selection > TR) game.selection = TR;
    bfe0:	80 91 c5 0b 	lds	r24, 0x0BC5
    bfe4:	85 30       	cpi	r24, 0x05	; 5
    bfe6:	0c f4       	brge	.+2      	; 0xbfea <update_splash+0xce>
    bfe8:	8a c0       	rjmp	.+276    	; 0xc0fe <update_splash+0x1e2>
    bfea:	84 e0       	ldi	r24, 0x04	; 4
    bfec:	80 93 c5 0b 	sts	0x0BC5, r24
    bff0:	86 c0       	rjmp	.+268    	; 0xc0fe <update_splash+0x1e2>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    bff2:	ce 01       	movw	r24, r28
    bff4:	0e 94 03 5c 	call	0xb806	; 0xb806 <select_pressed>
    bff8:	88 23       	and	r24, r24
    bffa:	09 f4       	brne	.+2      	; 0xbffe <update_splash+0xe2>
    bffc:	42 c0       	rjmp	.+132    	; 0xc082 <update_splash+0x166>
    bffe:	80 91 c5 0b 	lds	r24, 0x0BC5
    c002:	82 30       	cpi	r24, 0x02	; 2
    c004:	98 f4       	brcc	.+38     	; 0xc02c <update_splash+0x110>
	{
		game.demo_counter = 0;
    c006:	10 92 bc 0b 	sts	0x0BBC, r1
    c00a:	10 92 bb 0b 	sts	0x0BBB, r1
		p1s.select_state = SELECTING;
    c00e:	10 92 67 0a 	sts	0x0A67, r1
		p2s.select_state = SELECTING;
    c012:	10 92 61 0a 	sts	0x0A61, r1
		SFX_NAVIGATE;
		fade_through();
    c016:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_eeprom(&handles);
    c01a:	82 e9       	ldi	r24, 0x92	; 146
    c01c:	9b e0       	ldi	r25, 0x0B	; 11
    c01e:	0e 94 75 4f 	call	0x9eea	; 0x9eea <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    c022:	df 91       	pop	r29
    c024:	cf 91       	pop	r28
    c026:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    c028:	0c 94 7a 5e 	jmp	0xbcf4	; 0xbcf4 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    c02c:	82 30       	cpi	r24, 0x02	; 2
    c02e:	59 f4       	brne	.+22     	; 0xc046 <update_splash+0x12a>
	{
		game.demo_counter = 0;
    c030:	10 92 bc 0b 	sts	0x0BBC, r1
    c034:	10 92 bb 0b 	sts	0x0BBB, r1
		SFX_NAVIGATE;
		fade_through();
    c038:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    c03c:	df 91       	pop	r29
    c03e:	cf 91       	pop	r28
    c040:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_host_net_game();
    c042:	0c 94 ff 5e 	jmp	0xbdfe	; 0xbdfe <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    c046:	83 30       	cpi	r24, 0x03	; 3
    c048:	59 f4       	brne	.+22     	; 0xc060 <update_splash+0x144>
	{
		game.demo_counter = 0;
    c04a:	10 92 bc 0b 	sts	0x0BBC, r1
    c04e:	10 92 bb 0b 	sts	0x0BBB, r1
		SFX_NAVIGATE;
		fade_through();
    c052:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    c056:	df 91       	pop	r29
    c058:	cf 91       	pop	r28
    c05a:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_join_net_game();
    c05c:	0c 94 5d 5f 	jmp	0xbeba	; 0xbeba <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    c060:	84 30       	cpi	r24, 0x04	; 4
    c062:	79 f4       	brne	.+30     	; 0xc082 <update_splash+0x166>
	{
		game.demo_counter = 0;
    c064:	10 92 bc 0b 	sts	0x0BBC, r1
    c068:	10 92 bb 0b 	sts	0x0BBB, r1
		SFX_NAVIGATE;
		fade_through();
    c06c:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_eeprom(&scores);
    c070:	82 e6       	ldi	r24, 0x62	; 98
    c072:	9b e0       	ldi	r25, 0x0B	; 11
    c074:	0e 94 75 4f 	call	0x9eea	; 0x9eea <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    c078:	df 91       	pop	r29
    c07a:	cf 91       	pop	r28
    c07c:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    c07e:	0c 94 0d 5c 	jmp	0xb81a	; 0xb81a <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    c082:	80 91 bb 0b 	lds	r24, 0x0BBB
    c086:	90 91 bc 0b 	lds	r25, 0x0BBC
    c08a:	88 35       	cpi	r24, 0x58	; 88
    c08c:	92 40       	sbci	r25, 0x02	; 2
    c08e:	b8 f1       	brcs	.+110    	; 0xc0fe <update_splash+0x1e2>
	{
		game.demo_counter = 0;
    c090:	10 92 bc 0b 	sts	0x0BBC, r1
    c094:	10 92 bb 0b 	sts	0x0BBB, r1
		if (game.demo_choice % 2 == 0)
    c098:	80 91 ba 0b 	lds	r24, 0x0BBA
    c09c:	80 fd       	sbrc	r24, 0
    c09e:	21 c0       	rjmp	.+66     	; 0xc0e2 <update_splash+0x1c6>
		{
			game.selection = CPUVCPU;
    c0a0:	86 e0       	ldi	r24, 0x06	; 6
    c0a2:	80 93 c5 0b 	sts	0x0BC5, r24
			player1.handle_id = 9;
    c0a6:	c9 e0       	ldi	r28, 0x09	; 9
    c0a8:	c0 93 ef 0b 	sts	0x0BEF, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    c0ac:	43 e0       	ldi	r20, 0x03	; 3
    c0ae:	6f ea       	ldi	r22, 0xAF	; 175
    c0b0:	7b e0       	ldi	r23, 0x0B	; 11
    c0b2:	80 ef       	ldi	r24, 0xF0	; 240
    c0b4:	9b e0       	ldi	r25, 0x0B	; 11
    c0b6:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
			player2.handle_id = 9;
    c0ba:	c0 93 5e 0f 	sts	0x0F5E, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    c0be:	43 e0       	ldi	r20, 0x03	; 3
    c0c0:	6f ea       	ldi	r22, 0xAF	; 175
    c0c2:	7b e0       	ldi	r23, 0x0B	; 11
    c0c4:	8f e5       	ldi	r24, 0x5F	; 95
    c0c6:	9f e0       	ldi	r25, 0x0F	; 15
    c0c8:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
			SFX_NAVIGATE;
			clear_sprites();
    c0cc:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <clear_sprites>
			fade_through();
    c0d0:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
			level_transition(LBRandom(0, 10));
    c0d4:	6a e0       	ldi	r22, 0x0A	; 10
    c0d6:	80 e0       	ldi	r24, 0x00	; 0
    c0d8:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    c0dc:	0e 94 e3 59 	call	0xb3c6	; 0xb3c6 <level_transition>
    c0e0:	08 c0       	rjmp	.+16     	; 0xc0f2 <update_splash+0x1d6>
		}
		else
		{
			SFX_NAVIGATE;
			fade_through();
    c0e2:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
			load_eeprom(&scores);
    c0e6:	82 e6       	ldi	r24, 0x62	; 98
    c0e8:	9b e0       	ldi	r25, 0x0B	; 11
    c0ea:	0e 94 75 4f 	call	0x9eea	; 0x9eea <load_eeprom>
			load_tank_rank();
    c0ee:	0e 94 0d 5c 	call	0xb81a	; 0xb81a <load_tank_rank>
		}
		game.demo_choice++;
    c0f2:	80 91 ba 0b 	lds	r24, 0x0BBA
    c0f6:	8f 5f       	subi	r24, 0xFF	; 255
    c0f8:	80 93 ba 0b 	sts	0x0BBA, r24
		return;
    c0fc:	09 c0       	rjmp	.+18     	; 0xc110 <update_splash+0x1f4>
		
	}
	game.demo_counter++;
    c0fe:	80 91 bb 0b 	lds	r24, 0x0BBB
    c102:	90 91 bc 0b 	lds	r25, 0x0BBC
    c106:	01 96       	adiw	r24, 0x01	; 1
    c108:	90 93 bc 0b 	sts	0x0BBC, r25
    c10c:	80 93 bb 0b 	sts	0x0BBB, r24
#endif
}
    c110:	df 91       	pop	r29
    c112:	cf 91       	pop	r28
    c114:	0f 91       	pop	r16
    c116:	08 95       	ret

0000c118 <update_join_net_game>:
	Print(5, 23, (char*) strCancelHandle);
}

void update_join_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    c118:	fc 01       	movw	r30, r24
    c11a:	20 81       	ld	r18, Z
    c11c:	31 81       	ldd	r19, Z+1	; 0x01
    c11e:	31 ff       	sbrs	r19, 1
    c120:	04 c0       	rjmp	.+8      	; 0xc12a <update_join_net_game+0x12>
	{
		SFX_NAVIGATE;
		fade_through();
    c122:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_splash();
    c126:	0c 94 b9 5b 	jmp	0xb772	; 0xb772 <load_splash>
	} else if (select_pressed(p1))
    c12a:	0e 94 03 5c 	call	0xb806	; 0xb806 <select_pressed>
    c12e:	88 23       	and	r24, r24
    c130:	69 f1       	breq	.+90     	; 0xc18c <update_join_net_game+0x74>
	{
		Print(7, 21, (char*) strConnecting);
    c132:	40 e0       	ldi	r20, 0x00	; 0
    c134:	55 e0       	ldi	r21, 0x05	; 5
    c136:	65 e1       	ldi	r22, 0x15	; 21
    c138:	70 e0       	ldi	r23, 0x00	; 0
    c13a:	87 e0       	ldi	r24, 0x07	; 7
    c13c:	90 e0       	ldi	r25, 0x00	; 0
    c13e:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		if (joinNetGame(gameId) == WIFI_OK)
    c142:	89 e8       	ldi	r24, 0x89	; 137
    c144:	9b e0       	ldi	r25, 0x0B	; 11
    c146:	0e 94 01 4b 	call	0x9602	; 0x9602 <joinNetGame>
    c14a:	81 11       	cpse	r24, r1
    c14c:	17 c0       	rjmp	.+46     	; 0xc17c <update_join_net_game+0x64>
		{
			netMessage.code = NETJOINED;
    c14e:	8b e0       	ldi	r24, 0x0B	; 11
    c150:	80 93 e8 0f 	sts	0x0FE8, r24
			sendNetMessage(&netMessage);
    c154:	88 ee       	ldi	r24, 0xE8	; 232
    c156:	9f e0       	ldi	r25, 0x0F	; 15
    c158:	0e 94 74 4a 	call	0x94e8	; 0x94e8 <sendNetMessage>
			game.demo_counter = 0;
    c15c:	10 92 bc 0b 	sts	0x0BBC, r1
    c160:	10 92 bb 0b 	sts	0x0BBB, r1
			p1s.select_state = SELECTING;
    c164:	10 92 67 0a 	sts	0x0A67, r1
			p2s.select_state = SELECTING;
    c168:	10 92 61 0a 	sts	0x0A61, r1
			SFX_NAVIGATE;
			fade_through();
    c16c:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
			load_eeprom(&handles);
    c170:	82 e9       	ldi	r24, 0x92	; 146
    c172:	9b e0       	ldi	r25, 0x0B	; 11
    c174:	0e 94 75 4f 	call	0x9eea	; 0x9eea <load_eeprom>
			load_handle_select();
    c178:	0c 94 7a 5e 	jmp	0xbcf4	; 0xbcf4 <load_handle_select>
		}
		else
		{
			Print(7, 21, (char*) strNetworkError);
    c17c:	4f ed       	ldi	r20, 0xDF	; 223
    c17e:	54 e0       	ldi	r21, 0x04	; 4
    c180:	65 e1       	ldi	r22, 0x15	; 21
    c182:	70 e0       	ldi	r23, 0x00	; 0
    c184:	87 e0       	ldi	r24, 0x07	; 7
    c186:	90 e0       	ldi	r25, 0x00	; 0
    c188:	0c 94 6c 48 	jmp	0x90d8	; 0x90d8 <Print>
    c18c:	08 95       	ret

0000c18e <button_map>:
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c18e:	00 97       	sbiw	r24, 0x00	; 0
    c190:	41 f0       	breq	.+16     	; 0xc1a2 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    c192:	81 30       	cpi	r24, 0x01	; 1
    c194:	91 05       	cpc	r25, r1
    c196:	41 f0       	breq	.+16     	; 0xc1a8 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    c198:	82 30       	cpi	r24, 0x02	; 2
    c19a:	91 05       	cpc	r25, r1
    c19c:	41 f0       	breq	.+16     	; 0xc1ae <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    c19e:	03 97       	sbiw	r24, 0x03	; 3
    c1a0:	49 f0       	breq	.+18     	; 0xc1b4 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c1a2:	80 e1       	ldi	r24, 0x10	; 16
    c1a4:	90 e0       	ldi	r25, 0x00	; 0
    c1a6:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    c1a8:	80 e2       	ldi	r24, 0x20	; 32
    c1aa:	90 e0       	ldi	r25, 0x00	; 0
    c1ac:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    c1ae:	80 e4       	ldi	r24, 0x40	; 64
    c1b0:	90 e0       	ldi	r25, 0x00	; 0
    c1b2:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    c1b4:	80 e8       	ldi	r24, 0x80	; 128
    c1b6:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    c1b8:	08 95       	ret

0000c1ba <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    c1ba:	8f 92       	push	r8
    c1bc:	9f 92       	push	r9
    c1be:	af 92       	push	r10
    c1c0:	bf 92       	push	r11
    c1c2:	cf 92       	push	r12
    c1c4:	df 92       	push	r13
    c1c6:	ef 92       	push	r14
    c1c8:	ff 92       	push	r15
    c1ca:	0f 93       	push	r16
    c1cc:	1f 93       	push	r17
    c1ce:	cf 93       	push	r28
    c1d0:	df 93       	push	r29
    c1d2:	f8 2e       	mov	r15, r24
    c1d4:	e6 2e       	mov	r14, r22
    c1d6:	d4 2e       	mov	r13, r20
    c1d8:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    c1da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c1dc:	88 23       	and	r24, r24
    c1de:	09 f4       	brne	.+2      	; 0xc1e2 <crash_and_turn+0x28>
    c1e0:	a8 c0       	rjmp	.+336    	; 0xc332 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    c1e2:	f8 01       	movw	r30, r16
    c1e4:	c4 80       	ldd	r12, Z+4	; 0x04
    c1e6:	c4 fe       	sbrs	r12, 4
    c1e8:	23 c0       	rjmp	.+70     	; 0xc230 <crash_and_turn+0x76>
    c1ea:	fe e1       	ldi	r31, 0x1E	; 30
    c1ec:	6f 02       	muls	r22, r31
    c1ee:	40 01       	movw	r8, r0
    c1f0:	11 24       	eor	r1, r1
    c1f2:	af 2c       	mov	r10, r15
    c1f4:	bb 24       	eor	r11, r11
    c1f6:	a7 fc       	sbrc	r10, 7
    c1f8:	b0 94       	com	r11
    c1fa:	c4 01       	movw	r24, r8
    c1fc:	8a 0d       	add	r24, r10
    c1fe:	9b 1d       	adc	r25, r11
    c200:	01 97       	sbiw	r24, 0x01	; 1
    c202:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c206:	81 11       	cpse	r24, r1
    c208:	13 c0       	rjmp	.+38     	; 0xc230 <crash_and_turn+0x76>
    c20a:	c4 01       	movw	r24, r8
    c20c:	8a 0d       	add	r24, r10
    c20e:	9b 1d       	adc	r25, r11
    c210:	4d 96       	adiw	r24, 0x1d	; 29
    c212:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c216:	81 11       	cpse	r24, r1
    c218:	0b c0       	rjmp	.+22     	; 0xc230 <crash_and_turn+0x76>
    c21a:	c4 01       	movw	r24, r8
    c21c:	8a 0d       	add	r24, r10
    c21e:	9b 1d       	adc	r25, r11
    c220:	cb 96       	adiw	r24, 0x3b	; 59
    c222:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c226:	81 11       	cpse	r24, r1
    c228:	03 c0       	rjmp	.+6      	; 0xc230 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    c22a:	80 e4       	ldi	r24, 0x40	; 64
    c22c:	90 e0       	ldi	r25, 0x00	; 0
    c22e:	6f c0       	rjmp	.+222    	; 0xc30e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    c230:	c6 fe       	sbrs	r12, 6
    c232:	23 c0       	rjmp	.+70     	; 0xc27a <crash_and_turn+0xc0>
    c234:	8e 2d       	mov	r24, r14
    c236:	99 27       	eor	r25, r25
    c238:	87 fd       	sbrc	r24, 7
    c23a:	90 95       	com	r25
    c23c:	02 96       	adiw	r24, 0x02	; 2
    c23e:	2e e1       	ldi	r18, 0x1E	; 30
    c240:	28 9f       	mul	r18, r24
    c242:	50 01       	movw	r10, r0
    c244:	29 9f       	mul	r18, r25
    c246:	b0 0c       	add	r11, r0
    c248:	11 24       	eor	r1, r1
    c24a:	af 0c       	add	r10, r15
    c24c:	b1 1c       	adc	r11, r1
    c24e:	f7 fc       	sbrc	r15, 7
    c250:	ba 94       	dec	r11
    c252:	c5 01       	movw	r24, r10
    c254:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c258:	81 11       	cpse	r24, r1
    c25a:	0f c0       	rjmp	.+30     	; 0xc27a <crash_and_turn+0xc0>
    c25c:	c5 01       	movw	r24, r10
    c25e:	01 96       	adiw	r24, 0x01	; 1
    c260:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c264:	81 11       	cpse	r24, r1
    c266:	09 c0       	rjmp	.+18     	; 0xc27a <crash_and_turn+0xc0>
    c268:	c5 01       	movw	r24, r10
    c26a:	02 96       	adiw	r24, 0x02	; 2
    c26c:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c270:	81 11       	cpse	r24, r1
    c272:	03 c0       	rjmp	.+6      	; 0xc27a <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    c274:	80 e2       	ldi	r24, 0x20	; 32
    c276:	90 e0       	ldi	r25, 0x00	; 0
    c278:	4a c0       	rjmp	.+148    	; 0xc30e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    c27a:	c5 fe       	sbrs	r12, 5
    c27c:	24 c0       	rjmp	.+72     	; 0xc2c6 <crash_and_turn+0x10c>
    c27e:	fe 2d       	mov	r31, r14
    c280:	8e e1       	ldi	r24, 0x1E	; 30
    c282:	f8 02       	muls	r31, r24
    c284:	40 01       	movw	r8, r0
    c286:	11 24       	eor	r1, r1
    c288:	af 2c       	mov	r10, r15
    c28a:	bb 24       	eor	r11, r11
    c28c:	a7 fc       	sbrc	r10, 7
    c28e:	b0 94       	com	r11
    c290:	c4 01       	movw	r24, r8
    c292:	8a 0d       	add	r24, r10
    c294:	9b 1d       	adc	r25, r11
    c296:	02 96       	adiw	r24, 0x02	; 2
    c298:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c29c:	81 11       	cpse	r24, r1
    c29e:	13 c0       	rjmp	.+38     	; 0xc2c6 <crash_and_turn+0x10c>
    c2a0:	c4 01       	movw	r24, r8
    c2a2:	8a 0d       	add	r24, r10
    c2a4:	9b 1d       	adc	r25, r11
    c2a6:	80 96       	adiw	r24, 0x20	; 32
    c2a8:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c2ac:	81 11       	cpse	r24, r1
    c2ae:	0b c0       	rjmp	.+22     	; 0xc2c6 <crash_and_turn+0x10c>
    c2b0:	c4 01       	movw	r24, r8
    c2b2:	8a 0d       	add	r24, r10
    c2b4:	9b 1d       	adc	r25, r11
    c2b6:	ce 96       	adiw	r24, 0x3e	; 62
    c2b8:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c2bc:	81 11       	cpse	r24, r1
    c2be:	03 c0       	rjmp	.+6      	; 0xc2c6 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    c2c0:	80 e8       	ldi	r24, 0x80	; 128
    c2c2:	90 e0       	ldi	r25, 0x00	; 0
    c2c4:	24 c0       	rjmp	.+72     	; 0xc30e <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    c2c6:	c7 fe       	sbrs	r12, 7
    c2c8:	29 c0       	rjmp	.+82     	; 0xc31c <crash_and_turn+0x162>
    c2ca:	8e 2d       	mov	r24, r14
    c2cc:	99 27       	eor	r25, r25
    c2ce:	87 fd       	sbrc	r24, 7
    c2d0:	90 95       	com	r25
    c2d2:	01 97       	sbiw	r24, 0x01	; 1
    c2d4:	2e e1       	ldi	r18, 0x1E	; 30
    c2d6:	28 9f       	mul	r18, r24
    c2d8:	50 01       	movw	r10, r0
    c2da:	29 9f       	mul	r18, r25
    c2dc:	b0 0c       	add	r11, r0
    c2de:	11 24       	eor	r1, r1
    c2e0:	af 0c       	add	r10, r15
    c2e2:	b1 1c       	adc	r11, r1
    c2e4:	f7 fc       	sbrc	r15, 7
    c2e6:	ba 94       	dec	r11
    c2e8:	c5 01       	movw	r24, r10
    c2ea:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c2ee:	81 11       	cpse	r24, r1
    c2f0:	15 c0       	rjmp	.+42     	; 0xc31c <crash_and_turn+0x162>
    c2f2:	c5 01       	movw	r24, r10
    c2f4:	01 96       	adiw	r24, 0x01	; 1
    c2f6:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c2fa:	81 11       	cpse	r24, r1
    c2fc:	0f c0       	rjmp	.+30     	; 0xc31c <crash_and_turn+0x162>
    c2fe:	c5 01       	movw	r24, r10
    c300:	02 96       	adiw	r24, 0x02	; 2
    c302:	0e 94 6c 53 	call	0xa6d8	; 0xa6d8 <solid_tile>
    c306:	81 11       	cpse	r24, r1
    c308:	09 c0       	rjmp	.+18     	; 0xc31c <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    c30a:	80 e1       	ldi	r24, 0x10	; 16
    c30c:	90 e0       	ldi	r25, 0x00	; 0
    c30e:	f8 01       	movw	r30, r16
    c310:	95 83       	std	Z+5, r25	; 0x05
    c312:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    c314:	ce 01       	movw	r24, r28
    c316:	0e 94 b4 52 	call	0xa568	; 0xa568 <recoil_sprite>
			recoiled = 0;
    c31a:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    c31c:	f8 01       	movw	r30, r16
    c31e:	24 81       	ldd	r18, Z+4	; 0x04
    c320:	35 81       	ldd	r19, Z+5	; 0x05
    c322:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c324:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c326:	82 23       	and	r24, r18
    c328:	93 23       	and	r25, r19
    c32a:	89 2b       	or	r24, r25
    c32c:	11 f0       	breq	.+4      	; 0xc332 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    c32e:	1a 8e       	std	Y+26, r1	; 0x1a
    c330:	1c c0       	rjmp	.+56     	; 0xc36a <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    c332:	dd 20       	and	r13, r13
    c334:	d1 f0       	breq	.+52     	; 0xc36a <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    c336:	f8 01       	movw	r30, r16
    c338:	84 81       	ldd	r24, Z+4	; 0x04
    c33a:	86 ff       	sbrs	r24, 6
    c33c:	03 c0       	rjmp	.+6      	; 0xc344 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    c33e:	80 e1       	ldi	r24, 0x10	; 16
    c340:	90 e0       	ldi	r25, 0x00	; 0
    c342:	0f c0       	rjmp	.+30     	; 0xc362 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    c344:	84 ff       	sbrs	r24, 4
    c346:	03 c0       	rjmp	.+6      	; 0xc34e <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    c348:	80 e8       	ldi	r24, 0x80	; 128
    c34a:	90 e0       	ldi	r25, 0x00	; 0
    c34c:	09 c0       	rjmp	.+18     	; 0xc360 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    c34e:	87 ff       	sbrs	r24, 7
    c350:	03 c0       	rjmp	.+6      	; 0xc358 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    c352:	80 e2       	ldi	r24, 0x20	; 32
    c354:	90 e0       	ldi	r25, 0x00	; 0
    c356:	04 c0       	rjmp	.+8      	; 0xc360 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    c358:	85 ff       	sbrs	r24, 5
    c35a:	07 c0       	rjmp	.+14     	; 0xc36a <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    c35c:	80 e4       	ldi	r24, 0x40	; 64
    c35e:	90 e0       	ldi	r25, 0x00	; 0
    c360:	f8 01       	movw	r30, r16
    c362:	95 83       	std	Z+5, r25	; 0x05
    c364:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    c366:	81 e0       	ldi	r24, 0x01	; 1
    c368:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c36a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c36c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c36e:	80 31       	cpi	r24, 0x10	; 16
    c370:	91 05       	cpc	r25, r1
    c372:	19 f0       	breq	.+6      	; 0xc37a <crash_and_turn+0x1c0>
    c374:	80 32       	cpi	r24, 0x20	; 32
    c376:	91 05       	cpc	r25, r1
    c378:	19 f4       	brne	.+6      	; 0xc380 <crash_and_turn+0x1c6>
    c37a:	2b a1       	ldd	r18, Y+35	; 0x23
    c37c:	e2 16       	cp	r14, r18
    c37e:	59 f0       	breq	.+22     	; 0xc396 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c380:	80 34       	cpi	r24, 0x40	; 64
    c382:	91 05       	cpc	r25, r1
    c384:	19 f0       	breq	.+6      	; 0xc38c <crash_and_turn+0x1d2>
    c386:	80 38       	cpi	r24, 0x80	; 128
    c388:	91 05       	cpc	r25, r1
    c38a:	39 f4       	brne	.+14     	; 0xc39a <crash_and_turn+0x1e0>
    c38c:	81 e0       	ldi	r24, 0x01	; 1
    c38e:	9b a1       	ldd	r25, Y+35	; 0x23
    c390:	f9 12       	cpse	r15, r25
    c392:	03 c0       	rjmp	.+6      	; 0xc39a <crash_and_turn+0x1e0>
    c394:	03 c0       	rjmp	.+6      	; 0xc39c <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c396:	81 e0       	ldi	r24, 0x01	; 1
    c398:	01 c0       	rjmp	.+2      	; 0xc39c <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c39a:	80 e0       	ldi	r24, 0x00	; 0
}
    c39c:	df 91       	pop	r29
    c39e:	cf 91       	pop	r28
    c3a0:	1f 91       	pop	r17
    c3a2:	0f 91       	pop	r16
    c3a4:	ff 90       	pop	r15
    c3a6:	ef 90       	pop	r14
    c3a8:	df 90       	pop	r13
    c3aa:	cf 90       	pop	r12
    c3ac:	bf 90       	pop	r11
    c3ae:	af 90       	pop	r10
    c3b0:	9f 90       	pop	r9
    c3b2:	8f 90       	pop	r8
    c3b4:	08 95       	ret

0000c3b6 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    c3b6:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c3b8:	26 2f       	mov	r18, r22
    c3ba:	33 27       	eor	r19, r19
    c3bc:	27 fd       	sbrc	r18, 7
    c3be:	30 95       	com	r19
    c3c0:	37 ff       	sbrs	r19, 7
    c3c2:	03 c0       	rjmp	.+6      	; 0xc3ca <get_cpu_goal_direction+0x14>
    c3c4:	31 95       	neg	r19
    c3c6:	21 95       	neg	r18
    c3c8:	31 09       	sbc	r19, r1
    c3ca:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c3cc:	24 2f       	mov	r18, r20
    c3ce:	33 27       	eor	r19, r19
    c3d0:	27 fd       	sbrc	r18, 7
    c3d2:	30 95       	com	r19
    c3d4:	37 ff       	sbrs	r19, 7
    c3d6:	03 c0       	rjmp	.+6      	; 0xc3de <get_cpu_goal_direction+0x28>
    c3d8:	31 95       	neg	r19
    c3da:	21 95       	neg	r18
    c3dc:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    c3de:	83 8d       	ldd	r24, Z+27	; 0x1b
    c3e0:	81 11       	cpse	r24, r1
    c3e2:	08 c0       	rjmp	.+16     	; 0xc3f4 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    c3e4:	29 17       	cp	r18, r25
    c3e6:	1c f4       	brge	.+6      	; 0xc3ee <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    c3e8:	16 16       	cp	r1, r22
    c3ea:	94 f0       	brlt	.+36     	; 0xc410 <get_cpu_goal_direction+0x5a>
    c3ec:	0b c0       	rjmp	.+22     	; 0xc404 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    c3ee:	14 16       	cp	r1, r20
    c3f0:	94 f0       	brlt	.+36     	; 0xc416 <get_cpu_goal_direction+0x60>
    c3f2:	0b c0       	rjmp	.+22     	; 0xc40a <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    c3f4:	29 17       	cp	r18, r25
    c3f6:	1c f4       	brge	.+6      	; 0xc3fe <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    c3f8:	16 16       	cp	r1, r22
    c3fa:	24 f0       	brlt	.+8      	; 0xc404 <get_cpu_goal_direction+0x4e>
    c3fc:	09 c0       	rjmp	.+18     	; 0xc410 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    c3fe:	14 16       	cp	r1, r20
    c400:	24 f0       	brlt	.+8      	; 0xc40a <get_cpu_goal_direction+0x54>
    c402:	09 c0       	rjmp	.+18     	; 0xc416 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    c404:	80 e4       	ldi	r24, 0x40	; 64
    c406:	90 e0       	ldi	r25, 0x00	; 0
    c408:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    c40a:	80 e1       	ldi	r24, 0x10	; 16
    c40c:	90 e0       	ldi	r25, 0x00	; 0
    c40e:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    c410:	80 e8       	ldi	r24, 0x80	; 128
    c412:	90 e0       	ldi	r25, 0x00	; 0
    c414:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    c416:	80 e2       	ldi	r24, 0x20	; 32
    c418:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    c41a:	08 95       	ret

0000c41c <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c41c:	2f 92       	push	r2
    c41e:	3f 92       	push	r3
    c420:	4f 92       	push	r4
    c422:	5f 92       	push	r5
    c424:	7f 92       	push	r7
    c426:	8f 92       	push	r8
    c428:	9f 92       	push	r9
    c42a:	af 92       	push	r10
    c42c:	bf 92       	push	r11
    c42e:	cf 92       	push	r12
    c430:	df 92       	push	r13
    c432:	ef 92       	push	r14
    c434:	ff 92       	push	r15
    c436:	0f 93       	push	r16
    c438:	1f 93       	push	r17
    c43a:	cf 93       	push	r28
    c43c:	df 93       	push	r29
    c43e:	cd b7       	in	r28, 0x3d	; 61
    c440:	de b7       	in	r29, 0x3e	; 62
    c442:	2a 97       	sbiw	r28, 0x0a	; 10
    c444:	0f b6       	in	r0, 0x3f	; 63
    c446:	f8 94       	cli
    c448:	de bf       	out	0x3e, r29	; 62
    c44a:	0f be       	out	0x3f, r0	; 63
    c44c:	cd bf       	out	0x3d, r28	; 61
    c44e:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c450:	db 01       	movw	r26, r22
    c452:	13 96       	adiw	r26, 0x03	; 3
    c454:	8d 91       	ld	r24, X+
    c456:	9d 91       	ld	r25, X+
    c458:	0d 90       	ld	r0, X+
    c45a:	bc 91       	ld	r27, X
    c45c:	a0 2d       	mov	r26, r0
    c45e:	89 83       	std	Y+1, r24	; 0x01
    c460:	9a 83       	std	Y+2, r25	; 0x02
    c462:	ab 83       	std	Y+3, r26	; 0x03
    c464:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    c466:	fb 01       	movw	r30, r22
    c468:	87 80       	ldd	r8, Z+7	; 0x07
    c46a:	90 84       	ldd	r9, Z+8	; 0x08
    c46c:	a1 84       	ldd	r10, Z+9	; 0x09
    c46e:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    c470:	d9 01       	movw	r26, r18
    c472:	13 96       	adiw	r26, 0x03	; 3
    c474:	cd 90       	ld	r12, X+
    c476:	dd 90       	ld	r13, X+
    c478:	ed 90       	ld	r14, X+
    c47a:	fc 90       	ld	r15, X
    c47c:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    c47e:	17 96       	adiw	r26, 0x07	; 7
    c480:	8d 91       	ld	r24, X+
    c482:	9d 91       	ld	r25, X+
    c484:	0d 90       	ld	r0, X+
    c486:	bc 91       	ld	r27, X
    c488:	a0 2d       	mov	r26, r0
    c48a:	8d 83       	std	Y+5, r24	; 0x05
    c48c:	9e 83       	std	Y+6, r25	; 0x06
    c48e:	af 83       	std	Y+7, r26	; 0x07
    c490:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c492:	f9 01       	movw	r30, r18
    c494:	86 89       	ldd	r24, Z+22	; 0x16
    c496:	81 11       	cpse	r24, r1
    c498:	06 c0       	rjmp	.+12     	; 0xc4a6 <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    c49a:	da 01       	movw	r26, r20
    c49c:	15 96       	adiw	r26, 0x05	; 5
    c49e:	1c 92       	st	X, r1
    c4a0:	1e 92       	st	-X, r1
    c4a2:	14 97       	sbiw	r26, 0x04	; 4
		return;
    c4a4:	57 c2       	rjmp	.+1198   	; 0xc954 <get_cpu_joypad_state+0x538>
    c4a6:	2a 01       	movw	r4, r20
    c4a8:	1b 01       	movw	r2, r22
    c4aa:	3a 87       	std	Y+10, r19	; 0x0a
    c4ac:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    c4ae:	ca 01       	movw	r24, r20
    c4b0:	0e 94 17 51 	call	0xa22e	; 0xa22e <shoot_pressed>
    c4b4:	88 23       	and	r24, r24
    c4b6:	19 f0       	breq	.+6      	; 0xc4be <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    c4b8:	f2 01       	movw	r30, r4
    c4ba:	11 82       	std	Z+1, r1	; 0x01
    c4bc:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c4be:	20 91 01 01 	lds	r18, 0x0101
    c4c2:	30 91 02 01 	lds	r19, 0x0102
    c4c6:	c9 01       	movw	r24, r18
    c4c8:	6a e0       	ldi	r22, 0x0A	; 10
    c4ca:	70 e0       	ldi	r23, 0x00	; 0
    c4cc:	0e 94 98 6d 	call	0xdb30	; 0xdb30 <__udivmodhi4>
    c4d0:	89 2b       	or	r24, r25
    c4d2:	59 f4       	brne	.+22     	; 0xc4ea <get_cpu_joypad_state+0xce>
    c4d4:	a9 85       	ldd	r26, Y+9	; 0x09
    c4d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4d8:	56 96       	adiw	r26, 0x16	; 22
    c4da:	8c 91       	ld	r24, X
    c4dc:	83 33       	cpi	r24, 0x33	; 51
    c4de:	28 f0       	brcs	.+10     	; 0xc4ea <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    c4e0:	81 e0       	ldi	r24, 0x01	; 1
    c4e2:	90 e0       	ldi	r25, 0x00	; 0
    c4e4:	f2 01       	movw	r30, r4
    c4e6:	91 83       	std	Z+1, r25	; 0x01
    c4e8:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c4ea:	c9 01       	movw	r24, r18
    c4ec:	64 eb       	ldi	r22, 0xB4	; 180
    c4ee:	70 e0       	ldi	r23, 0x00	; 0
    c4f0:	0e 94 98 6d 	call	0xdb30	; 0xdb30 <__udivmodhi4>
    c4f4:	89 2b       	or	r24, r25
    c4f6:	61 f0       	breq	.+24     	; 0xc510 <get_cpu_joypad_state+0xf4>
    c4f8:	a9 85       	ldd	r26, Y+9	; 0x09
    c4fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    c4fc:	56 96       	adiw	r26, 0x16	; 22
    c4fe:	8c 91       	ld	r24, X
    c500:	56 97       	sbiw	r26, 0x16	; 22
    c502:	8a 30       	cpi	r24, 0x0A	; 10
    c504:	29 f0       	breq	.+10     	; 0xc510 <get_cpu_joypad_state+0xf4>
    c506:	94 96       	adiw	r26, 0x24	; 36
    c508:	8c 91       	ld	r24, X
    c50a:	88 23       	and	r24, r24
    c50c:	09 f4       	brne	.+2      	; 0xc510 <get_cpu_joypad_state+0xf4>
    c50e:	7e c0       	rjmp	.+252    	; 0xc60c <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c510:	20 e0       	ldi	r18, 0x00	; 0
    c512:	30 e0       	ldi	r19, 0x00	; 0
    c514:	40 e0       	ldi	r20, 0x00	; 0
    c516:	5e e3       	ldi	r21, 0x3E	; 62
    c518:	69 81       	ldd	r22, Y+1	; 0x01
    c51a:	7a 81       	ldd	r23, Y+2	; 0x02
    c51c:	8b 81       	ldd	r24, Y+3	; 0x03
    c51e:	9c 81       	ldd	r25, Y+4	; 0x04
    c520:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c524:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
    c528:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    c52a:	20 e0       	ldi	r18, 0x00	; 0
    c52c:	30 e0       	ldi	r19, 0x00	; 0
    c52e:	40 e0       	ldi	r20, 0x00	; 0
    c530:	5e e3       	ldi	r21, 0x3E	; 62
    c532:	c5 01       	movw	r24, r10
    c534:	b4 01       	movw	r22, r8
    c536:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c53a:	20 e0       	ldi	r18, 0x00	; 0
    c53c:	30 e0       	ldi	r19, 0x00	; 0
    c53e:	40 e4       	ldi	r20, 0x40	; 64
    c540:	50 e4       	ldi	r21, 0x40	; 64
    c542:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    c546:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
    c54a:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    c54c:	20 e0       	ldi	r18, 0x00	; 0
    c54e:	30 e0       	ldi	r19, 0x00	; 0
    c550:	40 e0       	ldi	r20, 0x00	; 0
    c552:	5e e3       	ldi	r21, 0x3E	; 62
    c554:	c7 01       	movw	r24, r14
    c556:	b6 01       	movw	r22, r12
    c558:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c55c:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    c560:	f7 2c       	mov	r15, r7
    c562:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    c564:	20 e0       	ldi	r18, 0x00	; 0
    c566:	30 e0       	ldi	r19, 0x00	; 0
    c568:	40 e0       	ldi	r20, 0x00	; 0
    c56a:	5e e3       	ldi	r21, 0x3E	; 62
    c56c:	6d 81       	ldd	r22, Y+5	; 0x05
    c56e:	7e 81       	ldd	r23, Y+6	; 0x06
    c570:	8f 81       	ldd	r24, Y+7	; 0x07
    c572:	98 85       	ldd	r25, Y+8	; 0x08
    c574:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c578:	20 e0       	ldi	r18, 0x00	; 0
    c57a:	30 e0       	ldi	r19, 0x00	; 0
    c57c:	40 e4       	ldi	r20, 0x40	; 64
    c57e:	50 e4       	ldi	r21, 0x40	; 64
    c580:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    c584:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c588:	4b 2d       	mov	r20, r11
    c58a:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c58c:	e9 85       	ldd	r30, Y+9	; 0x09
    c58e:	fa 85       	ldd	r31, Y+10	; 0x0a
    c590:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    c592:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c594:	82 e0       	ldi	r24, 0x02	; 2
    c596:	8f 0d       	add	r24, r15
    c598:	85 30       	cpi	r24, 0x05	; 5
    c59a:	c8 f4       	brcc	.+50     	; 0xc5ce <get_cpu_joypad_state+0x1b2>
    c59c:	4e 3f       	cpi	r20, 0xFE	; 254
    c59e:	bc f0       	brlt	.+46     	; 0xc5ce <get_cpu_joypad_state+0x1b2>
    c5a0:	43 30       	cpi	r20, 0x03	; 3
    c5a2:	ac f4       	brge	.+42     	; 0xc5ce <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c5a4:	64 e0       	ldi	r22, 0x04	; 4
    c5a6:	80 e0       	ldi	r24, 0x00	; 0
    c5a8:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    c5ac:	90 e0       	ldi	r25, 0x00	; 0
    c5ae:	0e 94 c7 60 	call	0xc18e	; 0xc18e <button_map>
    c5b2:	a9 85       	ldd	r26, Y+9	; 0x09
    c5b4:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5b6:	5e 96       	adiw	r26, 0x1e	; 30
    c5b8:	9c 93       	st	X, r25
    c5ba:	8e 93       	st	-X, r24
    c5bc:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    c5be:	62 e1       	ldi	r22, 0x12	; 18
    c5c0:	85 e0       	ldi	r24, 0x05	; 5
    c5c2:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    c5c6:	e9 85       	ldd	r30, Y+9	; 0x09
    c5c8:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5ca:	83 a3       	std	Z+35, r24	; 0x23
    c5cc:	16 c0       	rjmp	.+44     	; 0xc5fa <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c5ce:	6f 2d       	mov	r22, r15
    c5d0:	89 85       	ldd	r24, Y+9	; 0x09
    c5d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    c5d4:	0e 94 db 61 	call	0xc3b6	; 0xc3b6 <get_cpu_goal_direction>
    c5d8:	a9 85       	ldd	r26, Y+9	; 0x09
    c5da:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5dc:	5e 96       	adiw	r26, 0x1e	; 30
    c5de:	9c 93       	st	X, r25
    c5e0:	8e 93       	st	-X, r24
    c5e2:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c5e4:	80 31       	cpi	r24, 0x10	; 16
    c5e6:	91 05       	cpc	r25, r1
    c5e8:	29 f0       	breq	.+10     	; 0xc5f4 <get_cpu_joypad_state+0x1d8>
    c5ea:	80 97       	sbiw	r24, 0x20	; 32
    c5ec:	19 f0       	breq	.+6      	; 0xc5f4 <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    c5ee:	93 96       	adiw	r26, 0x23	; 35
    c5f0:	7c 92       	st	X, r7
    c5f2:	03 c0       	rjmp	.+6      	; 0xc5fa <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c5f4:	e9 85       	ldd	r30, Y+9	; 0x09
    c5f6:	fa 85       	ldd	r31, Y+10	; 0x0a
    c5f8:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    c5fa:	a9 85       	ldd	r26, Y+9	; 0x09
    c5fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c5fe:	5d 96       	adiw	r26, 0x1d	; 29
    c600:	8d 91       	ld	r24, X+
    c602:	9c 91       	ld	r25, X
    c604:	5e 97       	sbiw	r26, 0x1e	; 30
    c606:	f2 01       	movw	r30, r4
    c608:	95 83       	std	Z+5, r25	; 0x05
    c60a:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    c60c:	a9 85       	ldd	r26, Y+9	; 0x09
    c60e:	ba 85       	ldd	r27, Y+10	; 0x0a
    c610:	13 96       	adiw	r26, 0x03	; 3
    c612:	cd 90       	ld	r12, X+
    c614:	dd 90       	ld	r13, X+
    c616:	ed 90       	ld	r14, X+
    c618:	fc 90       	ld	r15, X
    c61a:	16 97       	sbiw	r26, 0x06	; 6
    c61c:	95 96       	adiw	r26, 0x25	; 37
    c61e:	2d 91       	ld	r18, X+
    c620:	3d 91       	ld	r19, X+
    c622:	4d 91       	ld	r20, X+
    c624:	5c 91       	ld	r21, X
    c626:	98 97       	sbiw	r26, 0x28	; 40
    c628:	c7 01       	movw	r24, r14
    c62a:	b6 01       	movw	r22, r12
    c62c:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    c630:	88 23       	and	r24, r24
    c632:	29 f0       	breq	.+10     	; 0xc63e <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    c634:	e9 85       	ldd	r30, Y+9	; 0x09
    c636:	fa 85       	ldd	r31, Y+10	; 0x0a
    c638:	10 a2       	std	Z+32, r1	; 0x20
    c63a:	17 8e       	std	Z+31, r1	; 0x1f
    c63c:	0b c0       	rjmp	.+22     	; 0xc654 <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    c63e:	a9 85       	ldd	r26, Y+9	; 0x09
    c640:	ba 85       	ldd	r27, Y+10	; 0x0a
    c642:	5f 96       	adiw	r26, 0x1f	; 31
    c644:	8d 91       	ld	r24, X+
    c646:	9c 91       	ld	r25, X
    c648:	90 97       	sbiw	r26, 0x20	; 32
    c64a:	01 96       	adiw	r24, 0x01	; 1
    c64c:	90 96       	adiw	r26, 0x20	; 32
    c64e:	9c 93       	st	X, r25
    c650:	8e 93       	st	-X, r24
    c652:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    c654:	e9 85       	ldd	r30, Y+9	; 0x09
    c656:	fa 85       	ldd	r31, Y+10	; 0x0a
    c658:	87 80       	ldd	r8, Z+7	; 0x07
    c65a:	90 84       	ldd	r9, Z+8	; 0x08
    c65c:	a1 84       	ldd	r10, Z+9	; 0x09
    c65e:	b2 84       	ldd	r11, Z+10	; 0x0a
    c660:	21 a5       	ldd	r18, Z+41	; 0x29
    c662:	32 a5       	ldd	r19, Z+42	; 0x2a
    c664:	43 a5       	ldd	r20, Z+43	; 0x2b
    c666:	54 a5       	ldd	r21, Z+44	; 0x2c
    c668:	c5 01       	movw	r24, r10
    c66a:	b4 01       	movw	r22, r8
    c66c:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    c670:	88 23       	and	r24, r24
    c672:	39 f0       	breq	.+14     	; 0xc682 <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    c674:	a9 85       	ldd	r26, Y+9	; 0x09
    c676:	ba 85       	ldd	r27, Y+10	; 0x0a
    c678:	92 96       	adiw	r26, 0x22	; 34
    c67a:	1c 92       	st	X, r1
    c67c:	1e 92       	st	-X, r1
    c67e:	91 97       	sbiw	r26, 0x21	; 33
    c680:	07 c0       	rjmp	.+14     	; 0xc690 <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    c682:	e9 85       	ldd	r30, Y+9	; 0x09
    c684:	fa 85       	ldd	r31, Y+10	; 0x0a
    c686:	81 a1       	ldd	r24, Z+33	; 0x21
    c688:	92 a1       	ldd	r25, Z+34	; 0x22
    c68a:	01 96       	adiw	r24, 0x01	; 1
    c68c:	92 a3       	std	Z+34, r25	; 0x22
    c68e:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    c690:	a9 85       	ldd	r26, Y+9	; 0x09
    c692:	ba 85       	ldd	r27, Y+10	; 0x0a
    c694:	95 96       	adiw	r26, 0x25	; 37
    c696:	cd 92       	st	X+, r12
    c698:	dd 92       	st	X+, r13
    c69a:	ed 92       	st	X+, r14
    c69c:	fc 92       	st	X, r15
    c69e:	98 97       	sbiw	r26, 0x28	; 40
	player->old_y = player->shared.y;
    c6a0:	fd 01       	movw	r30, r26
    c6a2:	81 a6       	std	Z+41, r8	; 0x29
    c6a4:	92 a6       	std	Z+42, r9	; 0x2a
    c6a6:	a3 a6       	std	Z+43, r10	; 0x2b
    c6a8:	b4 a6       	std	Z+44, r11	; 0x2c
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c6aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    c6ac:	90 a1       	ldd	r25, Z+32	; 0x20
    c6ae:	80 34       	cpi	r24, 0x40	; 64
    c6b0:	91 40       	sbci	r25, 0x01	; 1
    c6b2:	88 f0       	brcs	.+34     	; 0xc6d6 <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    c6b4:	64 e0       	ldi	r22, 0x04	; 4
    c6b6:	82 e0       	ldi	r24, 0x02	; 2
    c6b8:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    c6bc:	90 e0       	ldi	r25, 0x00	; 0
    c6be:	0e 94 c7 60 	call	0xc18e	; 0xc18e <button_map>
    c6c2:	d2 01       	movw	r26, r4
    c6c4:	15 96       	adiw	r26, 0x05	; 5
    c6c6:	9c 93       	st	X, r25
    c6c8:	8e 93       	st	-X, r24
    c6ca:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c6cc:	e9 85       	ldd	r30, Y+9	; 0x09
    c6ce:	fa 85       	ldd	r31, Y+10	; 0x0a
    c6d0:	10 a2       	std	Z+32, r1	; 0x20
    c6d2:	17 8e       	std	Z+31, r1	; 0x1f
    c6d4:	42 c0       	rjmp	.+132    	; 0xc75a <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c6d6:	a9 85       	ldd	r26, Y+9	; 0x09
    c6d8:	ba 85       	ldd	r27, Y+10	; 0x0a
    c6da:	91 96       	adiw	r26, 0x21	; 33
    c6dc:	8d 91       	ld	r24, X+
    c6de:	9c 91       	ld	r25, X
    c6e0:	92 97       	sbiw	r26, 0x22	; 34
    c6e2:	80 34       	cpi	r24, 0x40	; 64
    c6e4:	91 40       	sbci	r25, 0x01	; 1
    c6e6:	88 f0       	brcs	.+34     	; 0xc70a <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    c6e8:	62 e0       	ldi	r22, 0x02	; 2
    c6ea:	80 e0       	ldi	r24, 0x00	; 0
    c6ec:	0e 94 85 4d 	call	0x9b0a	; 0x9b0a <LBRandom>
    c6f0:	90 e0       	ldi	r25, 0x00	; 0
    c6f2:	0e 94 c7 60 	call	0xc18e	; 0xc18e <button_map>
    c6f6:	f2 01       	movw	r30, r4
    c6f8:	95 83       	std	Z+5, r25	; 0x05
    c6fa:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c6fc:	a9 85       	ldd	r26, Y+9	; 0x09
    c6fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    c700:	92 96       	adiw	r26, 0x22	; 34
    c702:	1c 92       	st	X, r1
    c704:	1e 92       	st	-X, r1
    c706:	91 97       	sbiw	r26, 0x21	; 33
    c708:	28 c0       	rjmp	.+80     	; 0xc75a <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    c70a:	20 e0       	ldi	r18, 0x00	; 0
    c70c:	30 e0       	ldi	r19, 0x00	; 0
    c70e:	40 e0       	ldi	r20, 0x00	; 0
    c710:	5e e3       	ldi	r21, 0x3E	; 62
    c712:	c5 01       	movw	r24, r10
    c714:	b4 01       	movw	r22, r8
    c716:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c71a:	20 e0       	ldi	r18, 0x00	; 0
    c71c:	30 e0       	ldi	r19, 0x00	; 0
    c71e:	40 e4       	ldi	r20, 0x40	; 64
    c720:	50 e4       	ldi	r21, 0x40	; 64
    c722:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    c726:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
    c72a:	b6 2e       	mov	r11, r22
    c72c:	20 e0       	ldi	r18, 0x00	; 0
    c72e:	30 e0       	ldi	r19, 0x00	; 0
    c730:	40 e0       	ldi	r20, 0x00	; 0
    c732:	5e e3       	ldi	r21, 0x3E	; 62
    c734:	c7 01       	movw	r24, r14
    c736:	b6 01       	movw	r22, r12
    c738:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    c73c:	0e 94 91 6e 	call	0xdd22	; 0xdd22 <__fixsfsi>
    c740:	86 2f       	mov	r24, r22
    c742:	82 01       	movw	r16, r4
    c744:	29 85       	ldd	r18, Y+9	; 0x09
    c746:	3a 85       	ldd	r19, Y+10	; 0x0a
    c748:	f9 01       	movw	r30, r18
    c74a:	42 81       	ldd	r20, Z+2	; 0x02
    c74c:	6b 2d       	mov	r22, r11
    c74e:	0e 94 dd 60 	call	0xc1ba	; 0xc1ba <crash_and_turn>
    c752:	a9 85       	ldd	r26, Y+9	; 0x09
    c754:	ba 85       	ldd	r27, Y+10	; 0x0a
    c756:	94 96       	adiw	r26, 0x24	; 36
    c758:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c75a:	e9 85       	ldd	r30, Y+9	; 0x09
    c75c:	fa 85       	ldd	r31, Y+10	; 0x0a
    c75e:	84 8d       	ldd	r24, Z+28	; 0x1c
    c760:	81 30       	cpi	r24, 0x01	; 1
    c762:	09 f0       	breq	.+2      	; 0xc766 <get_cpu_joypad_state+0x34a>
    c764:	f7 c0       	rjmp	.+494    	; 0xc954 <get_cpu_joypad_state+0x538>
    c766:	d1 01       	movw	r26, r2
    c768:	52 96       	adiw	r26, 0x12	; 18
    c76a:	9c 91       	ld	r25, X
    c76c:	52 97       	sbiw	r26, 0x12	; 18
    c76e:	51 96       	adiw	r26, 0x11	; 17
    c770:	8c 91       	ld	r24, X
    c772:	51 97       	sbiw	r26, 0x11	; 17
    c774:	98 17       	cp	r25, r24
    c776:	08 f0       	brcs	.+2      	; 0xc77a <get_cpu_joypad_state+0x35e>
    c778:	ed c0       	rjmp	.+474    	; 0xc954 <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    c77a:	17 96       	adiw	r26, 0x07	; 7
    c77c:	cd 90       	ld	r12, X+
    c77e:	dd 90       	ld	r13, X+
    c780:	ed 90       	ld	r14, X+
    c782:	fc 90       	ld	r15, X
    c784:	1a 97       	sbiw	r26, 0x0a	; 10
    c786:	87 80       	ldd	r8, Z+7	; 0x07
    c788:	90 84       	ldd	r9, Z+8	; 0x08
    c78a:	a1 84       	ldd	r10, Z+9	; 0x09
    c78c:	b2 84       	ldd	r11, Z+10	; 0x0a
    c78e:	a5 01       	movw	r20, r10
    c790:	94 01       	movw	r18, r8
    c792:	c7 01       	movw	r24, r14
    c794:	b6 01       	movw	r22, r12
    c796:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    c79a:	87 ff       	sbrs	r24, 7
    c79c:	64 c0       	rjmp	.+200    	; 0xc866 <get_cpu_joypad_state+0x44a>
    c79e:	e9 85       	ldd	r30, Y+9	; 0x09
    c7a0:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7a2:	23 81       	ldd	r18, Z+3	; 0x03
    c7a4:	34 81       	ldd	r19, Z+4	; 0x04
    c7a6:	45 81       	ldd	r20, Z+5	; 0x05
    c7a8:	56 81       	ldd	r21, Z+6	; 0x06
    c7aa:	d1 01       	movw	r26, r2
    c7ac:	13 96       	adiw	r26, 0x03	; 3
    c7ae:	6d 91       	ld	r22, X+
    c7b0:	7d 91       	ld	r23, X+
    c7b2:	8d 91       	ld	r24, X+
    c7b4:	9c 91       	ld	r25, X
    c7b6:	16 97       	sbiw	r26, 0x06	; 6
    c7b8:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    c7bc:	87 ff       	sbrs	r24, 7
    c7be:	27 c0       	rjmp	.+78     	; 0xc80e <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    c7c0:	f1 01       	movw	r30, r2
    c7c2:	80 81       	ld	r24, Z
    c7c4:	82 30       	cpi	r24, 0x02	; 2
    c7c6:	79 f4       	brne	.+30     	; 0xc7e6 <get_cpu_joypad_state+0x3ca>
    c7c8:	a9 85       	ldd	r26, Y+9	; 0x09
    c7ca:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7cc:	8c 91       	ld	r24, X
    c7ce:	83 30       	cpi	r24, 0x03	; 3
    c7d0:	51 f4       	brne	.+20     	; 0xc7e6 <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    c7d2:	80 e8       	ldi	r24, 0x80	; 128
    c7d4:	90 e0       	ldi	r25, 0x00	; 0
    c7d6:	f2 01       	movw	r30, r4
    c7d8:	95 83       	std	Z+5, r25	; 0x05
    c7da:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    c7dc:	94 96       	adiw	r26, 0x24	; 36
    c7de:	1c 92       	st	X, r1
    c7e0:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c7e2:	5a 96       	adiw	r26, 0x1a	; 26
    c7e4:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    c7e6:	d1 01       	movw	r26, r2
    c7e8:	8c 91       	ld	r24, X
    c7ea:	81 30       	cpi	r24, 0x01	; 1
    c7ec:	09 f0       	breq	.+2      	; 0xc7f0 <get_cpu_joypad_state+0x3d4>
    c7ee:	b2 c0       	rjmp	.+356    	; 0xc954 <get_cpu_joypad_state+0x538>
    c7f0:	e9 85       	ldd	r30, Y+9	; 0x09
    c7f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    c7f4:	80 81       	ld	r24, Z
    c7f6:	81 11       	cpse	r24, r1
    c7f8:	ad c0       	rjmp	.+346    	; 0xc954 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c7fa:	a9 85       	ldd	r26, Y+9	; 0x09
    c7fc:	ba 85       	ldd	r27, Y+10	; 0x0a
    c7fe:	94 96       	adiw	r26, 0x24	; 36
    c800:	1c 92       	st	X, r1
    c802:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c804:	5a 96       	adiw	r26, 0x1a	; 26
    c806:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    c808:	80 e2       	ldi	r24, 0x20	; 32
    c80a:	90 e0       	ldi	r25, 0x00	; 0
    c80c:	6c c0       	rjmp	.+216    	; 0xc8e6 <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    c80e:	a9 85       	ldd	r26, Y+9	; 0x09
    c810:	ba 85       	ldd	r27, Y+10	; 0x0a
    c812:	13 96       	adiw	r26, 0x03	; 3
    c814:	2d 91       	ld	r18, X+
    c816:	3d 91       	ld	r19, X+
    c818:	4d 91       	ld	r20, X+
    c81a:	5c 91       	ld	r21, X
    c81c:	16 97       	sbiw	r26, 0x06	; 6
    c81e:	f1 01       	movw	r30, r2
    c820:	63 81       	ldd	r22, Z+3	; 0x03
    c822:	74 81       	ldd	r23, Z+4	; 0x04
    c824:	85 81       	ldd	r24, Z+5	; 0x05
    c826:	96 81       	ldd	r25, Z+6	; 0x06
    c828:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    c82c:	18 16       	cp	r1, r24
    c82e:	dc f4       	brge	.+54     	; 0xc866 <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    c830:	d1 01       	movw	r26, r2
    c832:	8c 91       	ld	r24, X
    c834:	82 30       	cpi	r24, 0x02	; 2
    c836:	71 f4       	brne	.+28     	; 0xc854 <get_cpu_joypad_state+0x438>
    c838:	e9 85       	ldd	r30, Y+9	; 0x09
    c83a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c83c:	80 81       	ld	r24, Z
    c83e:	81 30       	cpi	r24, 0x01	; 1
    c840:	49 f4       	brne	.+18     	; 0xc854 <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    c842:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c844:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c846:	80 e4       	ldi	r24, 0x40	; 64
    c848:	90 e0       	ldi	r25, 0x00	; 0
    c84a:	d2 01       	movw	r26, r4
    c84c:	15 96       	adiw	r26, 0x05	; 5
    c84e:	9c 93       	st	X, r25
    c850:	8e 93       	st	-X, r24
    c852:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    c854:	f1 01       	movw	r30, r2
    c856:	80 81       	ld	r24, Z
    c858:	83 30       	cpi	r24, 0x03	; 3
    c85a:	09 f0       	breq	.+2      	; 0xc85e <get_cpu_joypad_state+0x442>
    c85c:	7b c0       	rjmp	.+246    	; 0xc954 <get_cpu_joypad_state+0x538>
    c85e:	a9 85       	ldd	r26, Y+9	; 0x09
    c860:	ba 85       	ldd	r27, Y+10	; 0x0a
    c862:	8c 91       	ld	r24, X
    c864:	c8 cf       	rjmp	.-112    	; 0xc7f6 <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    c866:	a5 01       	movw	r20, r10
    c868:	94 01       	movw	r18, r8
    c86a:	c7 01       	movw	r24, r14
    c86c:	b6 01       	movw	r22, r12
    c86e:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    c872:	18 16       	cp	r1, r24
    c874:	e4 f5       	brge	.+120    	; 0xc8ee <get_cpu_joypad_state+0x4d2>
    c876:	e9 85       	ldd	r30, Y+9	; 0x09
    c878:	fa 85       	ldd	r31, Y+10	; 0x0a
    c87a:	23 81       	ldd	r18, Z+3	; 0x03
    c87c:	34 81       	ldd	r19, Z+4	; 0x04
    c87e:	45 81       	ldd	r20, Z+5	; 0x05
    c880:	56 81       	ldd	r21, Z+6	; 0x06
    c882:	d1 01       	movw	r26, r2
    c884:	13 96       	adiw	r26, 0x03	; 3
    c886:	6d 91       	ld	r22, X+
    c888:	7d 91       	ld	r23, X+
    c88a:	8d 91       	ld	r24, X+
    c88c:	9c 91       	ld	r25, X
    c88e:	16 97       	sbiw	r26, 0x06	; 6
    c890:	0e 94 25 6e 	call	0xdc4a	; 0xdc4a <__cmpsf2>
    c894:	87 ff       	sbrs	r24, 7
    c896:	33 c0       	rjmp	.+102    	; 0xc8fe <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    c898:	f1 01       	movw	r30, r2
    c89a:	80 81       	ld	r24, Z
    c89c:	81 11       	cpse	r24, r1
    c89e:	0f c0       	rjmp	.+30     	; 0xc8be <get_cpu_joypad_state+0x4a2>
    c8a0:	a9 85       	ldd	r26, Y+9	; 0x09
    c8a2:	ba 85       	ldd	r27, Y+10	; 0x0a
    c8a4:	8c 91       	ld	r24, X
    c8a6:	83 30       	cpi	r24, 0x03	; 3
    c8a8:	51 f4       	brne	.+20     	; 0xc8be <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    c8aa:	94 96       	adiw	r26, 0x24	; 36
    c8ac:	1c 92       	st	X, r1
    c8ae:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c8b0:	5a 96       	adiw	r26, 0x1a	; 26
    c8b2:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c8b4:	80 e8       	ldi	r24, 0x80	; 128
    c8b6:	90 e0       	ldi	r25, 0x00	; 0
    c8b8:	f2 01       	movw	r30, r4
    c8ba:	95 83       	std	Z+5, r25	; 0x05
    c8bc:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    c8be:	d1 01       	movw	r26, r2
    c8c0:	8c 91       	ld	r24, X
    c8c2:	81 30       	cpi	r24, 0x01	; 1
    c8c4:	09 f0       	breq	.+2      	; 0xc8c8 <get_cpu_joypad_state+0x4ac>
    c8c6:	46 c0       	rjmp	.+140    	; 0xc954 <get_cpu_joypad_state+0x538>
    c8c8:	e9 85       	ldd	r30, Y+9	; 0x09
    c8ca:	fa 85       	ldd	r31, Y+10	; 0x0a
    c8cc:	80 81       	ld	r24, Z
    c8ce:	82 30       	cpi	r24, 0x02	; 2
    c8d0:	09 f0       	breq	.+2      	; 0xc8d4 <get_cpu_joypad_state+0x4b8>
    c8d2:	40 c0       	rjmp	.+128    	; 0xc954 <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    c8d4:	a9 85       	ldd	r26, Y+9	; 0x09
    c8d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    c8d8:	94 96       	adiw	r26, 0x24	; 36
    c8da:	1c 92       	st	X, r1
    c8dc:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    c8de:	5a 96       	adiw	r26, 0x1a	; 26
    c8e0:	1c 92       	st	X, r1
				p->held = BTN_UP;
    c8e2:	80 e1       	ldi	r24, 0x10	; 16
    c8e4:	90 e0       	ldi	r25, 0x00	; 0
    c8e6:	f2 01       	movw	r30, r4
    c8e8:	95 83       	std	Z+5, r25	; 0x05
    c8ea:	84 83       	std	Z+4, r24	; 0x04
    c8ec:	33 c0       	rjmp	.+102    	; 0xc954 <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    c8ee:	a5 01       	movw	r20, r10
    c8f0:	94 01       	movw	r18, r8
    c8f2:	c7 01       	movw	r24, r14
    c8f4:	b6 01       	movw	r22, r12
    c8f6:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    c8fa:	18 16       	cp	r1, r24
    c8fc:	5c f5       	brge	.+86     	; 0xc954 <get_cpu_joypad_state+0x538>
    c8fe:	a9 85       	ldd	r26, Y+9	; 0x09
    c900:	ba 85       	ldd	r27, Y+10	; 0x0a
    c902:	13 96       	adiw	r26, 0x03	; 3
    c904:	2d 91       	ld	r18, X+
    c906:	3d 91       	ld	r19, X+
    c908:	4d 91       	ld	r20, X+
    c90a:	5c 91       	ld	r21, X
    c90c:	16 97       	sbiw	r26, 0x06	; 6
    c90e:	f1 01       	movw	r30, r2
    c910:	63 81       	ldd	r22, Z+3	; 0x03
    c912:	74 81       	ldd	r23, Z+4	; 0x04
    c914:	85 81       	ldd	r24, Z+5	; 0x05
    c916:	96 81       	ldd	r25, Z+6	; 0x06
    c918:	0e 94 74 6f 	call	0xdee8	; 0xdee8 <__gesf2>
    c91c:	18 16       	cp	r1, r24
    c91e:	d4 f4       	brge	.+52     	; 0xc954 <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    c920:	d1 01       	movw	r26, r2
    c922:	8c 91       	ld	r24, X
    c924:	81 11       	cpse	r24, r1
    c926:	0e c0       	rjmp	.+28     	; 0xc944 <get_cpu_joypad_state+0x528>
    c928:	e9 85       	ldd	r30, Y+9	; 0x09
    c92a:	fa 85       	ldd	r31, Y+10	; 0x0a
    c92c:	80 81       	ld	r24, Z
    c92e:	81 30       	cpi	r24, 0x01	; 1
    c930:	49 f4       	brne	.+18     	; 0xc944 <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    c932:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    c934:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    c936:	80 e4       	ldi	r24, 0x40	; 64
    c938:	90 e0       	ldi	r25, 0x00	; 0
    c93a:	d2 01       	movw	r26, r4
    c93c:	15 96       	adiw	r26, 0x05	; 5
    c93e:	9c 93       	st	X, r25
    c940:	8e 93       	st	-X, r24
    c942:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    c944:	f1 01       	movw	r30, r2
    c946:	80 81       	ld	r24, Z
    c948:	83 30       	cpi	r24, 0x03	; 3
    c94a:	21 f4       	brne	.+8      	; 0xc954 <get_cpu_joypad_state+0x538>
    c94c:	a9 85       	ldd	r26, Y+9	; 0x09
    c94e:	ba 85       	ldd	r27, Y+10	; 0x0a
    c950:	8c 91       	ld	r24, X
    c952:	bd cf       	rjmp	.-134    	; 0xc8ce <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c954:	2a 96       	adiw	r28, 0x0a	; 10
    c956:	0f b6       	in	r0, 0x3f	; 63
    c958:	f8 94       	cli
    c95a:	de bf       	out	0x3e, r29	; 62
    c95c:	0f be       	out	0x3f, r0	; 63
    c95e:	cd bf       	out	0x3d, r28	; 61
    c960:	df 91       	pop	r29
    c962:	cf 91       	pop	r28
    c964:	1f 91       	pop	r17
    c966:	0f 91       	pop	r16
    c968:	ff 90       	pop	r15
    c96a:	ef 90       	pop	r14
    c96c:	df 90       	pop	r13
    c96e:	cf 90       	pop	r12
    c970:	bf 90       	pop	r11
    c972:	af 90       	pop	r10
    c974:	9f 90       	pop	r9
    c976:	8f 90       	pop	r8
    c978:	7f 90       	pop	r7
    c97a:	5f 90       	pop	r5
    c97c:	4f 90       	pop	r4
    c97e:	3f 90       	pop	r3
    c980:	2f 90       	pop	r2
    c982:	08 95       	ret

0000c984 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    c984:	bf 92       	push	r11
    c986:	cf 92       	push	r12
    c988:	df 92       	push	r13
    c98a:	ef 92       	push	r14
    c98c:	ff 92       	push	r15
    c98e:	0f 93       	push	r16
    c990:	1f 93       	push	r17
    c992:	cf 93       	push	r28
    c994:	df 93       	push	r29
    c996:	1f 92       	push	r1
    c998:	cd b7       	in	r28, 0x3d	; 61
    c99a:	de b7       	in	r29, 0x3e	; 62
    c99c:	8c 01       	movw	r16, r24
    c99e:	f6 2e       	mov	r15, r22
    c9a0:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c9a2:	8f e0       	ldi	r24, 0x0F	; 15
    c9a4:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c9a6:	f8 01       	movw	r30, r16
    c9a8:	84 91       	lpm	r24, Z
    c9aa:	83 32       	cpi	r24, 0x23	; 35
    c9ac:	01 f1       	breq	.+64     	; 0xc9ee <stream_text_middle+0x6a>
	{
		ln = strnlen_P(dialogue, 255);
    c9ae:	6f ef       	ldi	r22, 0xFF	; 255
    c9b0:	70 e0       	ldi	r23, 0x00	; 0
    c9b2:	c8 01       	movw	r24, r16
    c9b4:	0e 94 e4 6f 	call	0xdfc8	; 0xdfc8 <strnlen_P>
		x = 15 - ln / 2;
    c9b8:	86 95       	lsr	r24
    c9ba:	eb 2c       	mov	r14, r11
    c9bc:	e8 1a       	sub	r14, r24
    c9be:	e0 1a       	sub	r14, r16
    c9c0:	8e 2d       	mov	r24, r14
    c9c2:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c9c4:	0f 5f       	subi	r16, 0xFF	; 255
    c9c6:	1f 4f       	sbci	r17, 0xFF	; 255
    c9c8:	f8 01       	movw	r30, r16
    c9ca:	31 97       	sbiw	r30, 0x01	; 1
    c9cc:	e4 91       	lpm	r30, Z
    c9ce:	e9 83       	std	Y+1, r30	; 0x01
    c9d0:	ee 23       	and	r30, r30
    c9d2:	59 f0       	breq	.+22     	; 0xc9ea <stream_text_middle+0x66>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c9d4:	21 e0       	ldi	r18, 0x01	; 1
    c9d6:	ae 01       	movw	r20, r28
    c9d8:	4f 5f       	subi	r20, 0xFF	; 255
    c9da:	5f 4f       	sbci	r21, 0xFF	; 255
    c9dc:	6f 2d       	mov	r22, r15
    c9de:	0e 94 54 4c 	call	0x98a8	; 0x98a8 <LBPrintStr>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    c9e2:	c6 01       	movw	r24, r12
    c9e4:	0e 94 0e 3a 	call	0x741c	; 0x741c <WaitUs>
    c9e8:	eb cf       	rjmp	.-42     	; 0xc9c0 <stream_text_middle+0x3c>
			LBWaitUs(delay);
		}
		y++;
    c9ea:	f3 94       	inc	r15
    c9ec:	dc cf       	rjmp	.-72     	; 0xc9a6 <stream_text_middle+0x22>
	}
}
    c9ee:	0f 90       	pop	r0
    c9f0:	df 91       	pop	r29
    c9f2:	cf 91       	pop	r28
    c9f4:	1f 91       	pop	r17
    c9f6:	0f 91       	pop	r16
    c9f8:	ff 90       	pop	r15
    c9fa:	ef 90       	pop	r14
    c9fc:	df 90       	pop	r13
    c9fe:	cf 90       	pop	r12
    ca00:	bf 90       	pop	r11
    ca02:	08 95       	ret

0000ca04 <load_credits>:

void load_credits()
{
	fade_through();
    ca04:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    ca08:	44 e6       	ldi	r20, 0x64	; 100
    ca0a:	50 e0       	ldi	r21, 0x00	; 0
    ca0c:	65 e0       	ldi	r22, 0x05	; 5
    ca0e:	89 ec       	ldi	r24, 0xC9	; 201
    ca10:	92 e0       	ldi	r25, 0x02	; 2
    ca12:	0e 94 c2 64 	call	0xc984	; 0xc984 <stream_text_middle>
#if JAMMA
	wifi_status = WIFI_TIMEOUT;
#else
	wifi_status = activateNet();
    ca16:	0e 94 6c 4a 	call	0x94d8	; 0x94d8 <activateNet>
    ca1a:	80 93 e3 0b 	sts	0x0BE3, r24
#endif
	LBWaitSeconds(4);
    ca1e:	84 e0       	ldi	r24, 0x04	; 4
    ca20:	0e 94 a0 4d 	call	0x9b40	; 0x9b40 <LBWaitSeconds>
	fade_through();
    ca24:	0c 94 87 4f 	jmp	0x9f0e	; 0x9f0e <fade_through>

0000ca28 <send_net_message>:
		send_net_message(code, 0, 0);
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
    ca28:	cf 93       	push	r28
    ca2a:	df 93       	push	r29
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
	
	if (wifi_status != WIFI_OK) return;
    ca2c:	90 91 e3 0b 	lds	r25, 0x0BE3
    ca30:	91 11       	cpse	r25, r1
    ca32:	4b c0       	rjmp	.+150    	; 0xcaca <send_net_message+0xa2>
	
	netMessage.hud_x = 15;
    ca34:	9f e0       	ldi	r25, 0x0F	; 15
    ca36:	90 93 ef 0f 	sts	0x0FEF, r25
	if (game.selection == JOINNETGAME)
    ca3a:	90 91 c5 0b 	lds	r25, 0x0BC5
    ca3e:	93 30       	cpi	r25, 0x03	; 3
    ca40:	49 f4       	brne	.+18     	; 0xca54 <send_net_message+0x2c>
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		netMessage.hud_x = 0;
    ca42:	10 92 ef 0f 	sts	0x0FEF, r1
	netMessage.hud_x = 15;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
    ca46:	c2 e8       	ldi	r28, 0x82	; 130
    ca48:	db e0       	ldi	r29, 0x0B	; 11
	
	netMessage.hud_x = 15;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
		otherPlayer = &player1;
    ca4a:	a4 ee       	ldi	r26, 0xE4	; 228
    ca4c:	bb e0       	ldi	r27, 0x0B	; 11
	if (wifi_status != WIFI_OK) return;
	
	netMessage.hud_x = 15;
	if (game.selection == JOINNETGAME)
	{
		player = &player2;
    ca4e:	e3 e5       	ldi	r30, 0x53	; 83
    ca50:	ff e0       	ldi	r31, 0x0F	; 15
    ca52:	06 c0       	rjmp	.+12     	; 0xca60 <send_net_message+0x38>

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
	JoyPadState* state = &p1;
    ca54:	cd e5       	ldi	r28, 0x5D	; 93
    ca56:	dc e0       	ldi	r29, 0x0C	; 12
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
	Player* otherPlayer = &player2;
    ca58:	a3 e5       	ldi	r26, 0x53	; 83
    ca5a:	bf e0       	ldi	r27, 0x0F	; 15
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y)
{
	Player* player = &player1;
    ca5c:	e4 ee       	ldi	r30, 0xE4	; 228
    ca5e:	fb e0       	ldi	r31, 0x0B	; 11
		player = &player2;
		otherPlayer = &player1;
		state = &p2;
		netMessage.hud_x = 0;
	}
	netMessage.code = code;
    ca60:	80 93 e8 0f 	sts	0x0FE8, r24
	netMessage.input = state->held;
    ca64:	8c 81       	ldd	r24, Y+4	; 0x04
    ca66:	9d 81       	ldd	r25, Y+5	; 0x05
    ca68:	90 93 ea 0f 	sts	0x0FEA, r25
    ca6c:	80 93 e9 0f 	sts	0x0FE9, r24
	netMessage.object_pos_x = object_pos_x;
    ca70:	60 93 eb 0f 	sts	0x0FEB, r22
	netMessage.object_pos_y = object_pos_y;
    ca74:	40 93 ec 0f 	sts	0x0FEC, r20
	netMessage.score = otherPlayer->score;
    ca78:	1f 96       	adiw	r26, 0x0f	; 15
    ca7a:	8c 91       	ld	r24, X
    ca7c:	1f 97       	sbiw	r26, 0x0f	; 15
    ca7e:	80 93 ed 0f 	sts	0x0FED, r24
	netMessage.level_score = otherPlayer->level_score;
    ca82:	50 96       	adiw	r26, 0x10	; 16
    ca84:	8c 91       	ld	r24, X
    ca86:	80 93 ee 0f 	sts	0x0FEE, r24
	netMessage.pos_x = player->shared.x;
    ca8a:	83 81       	ldd	r24, Z+3	; 0x03
    ca8c:	94 81       	ldd	r25, Z+4	; 0x04
    ca8e:	a5 81       	ldd	r26, Z+5	; 0x05
    ca90:	b6 81       	ldd	r27, Z+6	; 0x06
    ca92:	80 93 f0 0f 	sts	0x0FF0, r24
    ca96:	90 93 f1 0f 	sts	0x0FF1, r25
    ca9a:	a0 93 f2 0f 	sts	0x0FF2, r26
    ca9e:	b0 93 f3 0f 	sts	0x0FF3, r27
	netMessage.pos_y = player->shared.y;
    caa2:	87 81       	ldd	r24, Z+7	; 0x07
    caa4:	90 85       	ldd	r25, Z+8	; 0x08
    caa6:	a1 85       	ldd	r26, Z+9	; 0x09
    caa8:	b2 85       	ldd	r27, Z+10	; 0x0a
    caaa:	80 93 f4 0f 	sts	0x0FF4, r24
    caae:	90 93 f5 0f 	sts	0x0FF5, r25
    cab2:	a0 93 f6 0f 	sts	0x0FF6, r26
    cab6:	b0 93 f7 0f 	sts	0x0FF7, r27
	netMessage.zero = 0;
    caba:	10 92 f8 0f 	sts	0x0FF8, r1
	sendNetMessage(&netMessage);
    cabe:	88 ee       	ldi	r24, 0xE8	; 232
    cac0:	9f e0       	ldi	r25, 0x0F	; 15
}
    cac2:	df 91       	pop	r29
    cac4:	cf 91       	pop	r28
	netMessage.score = otherPlayer->score;
	netMessage.level_score = otherPlayer->level_score;
	netMessage.pos_x = player->shared.x;
	netMessage.pos_y = player->shared.y;
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
    cac6:	0c 94 74 4a 	jmp	0x94e8	; 0x94e8 <sendNetMessage>
}
    caca:	df 91       	pop	r29
    cacc:	cf 91       	pop	r28
    cace:	08 95       	ret

0000cad0 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    cad0:	2f 92       	push	r2
    cad2:	3f 92       	push	r3
    cad4:	4f 92       	push	r4
    cad6:	5f 92       	push	r5
    cad8:	6f 92       	push	r6
    cada:	7f 92       	push	r7
    cadc:	8f 92       	push	r8
    cade:	9f 92       	push	r9
    cae0:	af 92       	push	r10
    cae2:	bf 92       	push	r11
    cae4:	cf 92       	push	r12
    cae6:	df 92       	push	r13
    cae8:	ef 92       	push	r14
    caea:	ff 92       	push	r15
    caec:	0f 93       	push	r16
    caee:	1f 93       	push	r17
    caf0:	cf 93       	push	r28
    caf2:	df 93       	push	r29
    caf4:	00 d0       	rcall	.+0      	; 0xcaf6 <collision_detect_shot+0x26>
    caf6:	00 d0       	rcall	.+0      	; 0xcaf8 <collision_detect_shot+0x28>
    caf8:	1f 92       	push	r1
    cafa:	cd b7       	in	r28, 0x3d	; 61
    cafc:	de b7       	in	r29, 0x3e	; 62
    cafe:	3c 01       	movw	r6, r24
    cb00:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    cb02:	1a 82       	std	Y+2, r1	; 0x02
    cb04:	19 82       	std	Y+1, r1	; 0x01
    cb06:	1c 82       	std	Y+4, r1	; 0x04
    cb08:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    cb0a:	20 e0       	ldi	r18, 0x00	; 0
    cb0c:	30 e0       	ldi	r19, 0x00	; 0
    cb0e:	40 e0       	ldi	r20, 0x00	; 0
    cb10:	5e e3       	ldi	r21, 0x3E	; 62
    cb12:	db 01       	movw	r26, r22
    cb14:	17 96       	adiw	r26, 0x07	; 7
    cb16:	6d 91       	ld	r22, X+
    cb18:	7d 91       	ld	r23, X+
    cb1a:	8d 91       	ld	r24, X+
    cb1c:	9c 91       	ld	r25, X
    cb1e:	1a 97       	sbiw	r26, 0x0a	; 10
    cb20:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    cb24:	20 e0       	ldi	r18, 0x00	; 0
    cb26:	30 e0       	ldi	r19, 0x00	; 0
    cb28:	40 e4       	ldi	r20, 0x40	; 64
    cb2a:	50 e4       	ldi	r21, 0x40	; 64
    cb2c:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    cb30:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cb34:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    cb36:	20 e0       	ldi	r18, 0x00	; 0
    cb38:	30 e0       	ldi	r19, 0x00	; 0
    cb3a:	40 e0       	ldi	r20, 0x00	; 0
    cb3c:	5e e3       	ldi	r21, 0x3E	; 62
    cb3e:	f4 01       	movw	r30, r8
    cb40:	63 81       	ldd	r22, Z+3	; 0x03
    cb42:	74 81       	ldd	r23, Z+4	; 0x04
    cb44:	85 81       	ldd	r24, Z+5	; 0x05
    cb46:	96 81       	ldd	r25, Z+6	; 0x06
    cb48:	0e 94 78 6f 	call	0xdef0	; 0xdef0 <__mulsf3>
    cb4c:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    cb50:	d4 01       	movw	r26, r8
    cb52:	2c 91       	ld	r18, X
    cb54:	41 2f       	mov	r20, r17
    cb56:	ce 01       	movw	r24, r28
    cb58:	01 96       	adiw	r24, 0x01	; 1
    cb5a:	0e 94 ab 55 	call	0xab56	; 0xab56 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    cb5e:	c4 01       	movw	r24, r8
    cb60:	0e 94 d1 54 	call	0xa9a2	; 0xa9a2 <collision_detect_boundries>
    cb64:	81 11       	cpse	r24, r1
    cb66:	82 c1       	rjmp	.+772    	; 0xce6c <collision_detect_shot+0x39c>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && game.selection != JOINNETGAME)
    cb68:	b4 01       	movw	r22, r8
    cb6a:	84 ee       	ldi	r24, 0xE4	; 228
    cb6c:	9b e0       	ldi	r25, 0x0B	; 11
    cb6e:	0e 94 24 54 	call	0xa848	; 0xa848 <player_shot>
    cb72:	88 23       	and	r24, r24
    cb74:	01 f1       	breq	.+64     	; 0xcbb6 <collision_detect_shot+0xe6>
    cb76:	80 91 f9 0b 	lds	r24, 0x0BF9
    cb7a:	80 fd       	sbrc	r24, 0
    cb7c:	1c c0       	rjmp	.+56     	; 0xcbb6 <collision_detect_shot+0xe6>
    cb7e:	80 91 c5 0b 	lds	r24, 0x0BC5
    cb82:	83 30       	cpi	r24, 0x03	; 3
    cb84:	c1 f0       	breq	.+48     	; 0xcbb6 <collision_detect_shot+0xe6>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    cb86:	80 91 63 0f 	lds	r24, 0x0F63
    cb8a:	8f 5f       	subi	r24, 0xFF	; 255
    cb8c:	80 93 63 0f 	sts	0x0F63, r24
		player2.score++;
    cb90:	80 91 62 0f 	lds	r24, 0x0F62
    cb94:	8f 5f       	subi	r24, 0xFF	; 255
    cb96:	80 93 62 0f 	sts	0x0F62, r24
		render_score(&player2, 15);
    cb9a:	6f e0       	ldi	r22, 0x0F	; 15
    cb9c:	83 e5       	ldi	r24, 0x53	; 83
    cb9e:	9f e0       	ldi	r25, 0x0F	; 15
    cba0:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
		send_net_message(NETHIT, 0, 0);
    cba4:	40 e0       	ldi	r20, 0x00	; 0
    cba6:	60 e0       	ldi	r22, 0x00	; 0
    cba8:	80 e0       	ldi	r24, 0x00	; 0
    cbaa:	0e 94 14 65 	call	0xca28	; 0xca28 <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG) && game.selection != JOINNETGAME)
	{
		p = &player1;
    cbae:	04 ee       	ldi	r16, 0xE4	; 228
    cbb0:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    cbb2:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
    cbb4:	58 c0       	rjmp	.+176    	; 0xcc66 <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status)  && game.selection != HOSTNETGAME)
    cbb6:	b4 01       	movw	r22, r8
    cbb8:	83 e5       	ldi	r24, 0x53	; 83
    cbba:	9f e0       	ldi	r25, 0x0F	; 15
    cbbc:	0e 94 24 54 	call	0xa848	; 0xa848 <player_shot>
    cbc0:	90 91 b5 0b 	lds	r25, 0x0BB5
    cbc4:	88 23       	and	r24, r24
    cbc6:	21 f1       	breq	.+72     	; 0xcc10 <collision_detect_shot+0x140>
    cbc8:	80 91 68 0f 	lds	r24, 0x0F68
    cbcc:	80 fd       	sbrc	r24, 0
    cbce:	20 c0       	rjmp	.+64     	; 0xcc10 <collision_detect_shot+0x140>
    cbd0:	91 11       	cpse	r25, r1
    cbd2:	1e c0       	rjmp	.+60     	; 0xcc10 <collision_detect_shot+0x140>
    cbd4:	80 91 c5 0b 	lds	r24, 0x0BC5
    cbd8:	82 30       	cpi	r24, 0x02	; 2
    cbda:	09 f4       	brne	.+2      	; 0xcbde <collision_detect_shot+0x10e>
    cbdc:	47 c0       	rjmp	.+142    	; 0xcc6c <collision_detect_shot+0x19c>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    cbde:	80 91 f4 0b 	lds	r24, 0x0BF4
    cbe2:	8f 5f       	subi	r24, 0xFF	; 255
    cbe4:	80 93 f4 0b 	sts	0x0BF4, r24
		player1.score++;
    cbe8:	80 91 f3 0b 	lds	r24, 0x0BF3
    cbec:	8f 5f       	subi	r24, 0xFF	; 255
    cbee:	80 93 f3 0b 	sts	0x0BF3, r24
		render_score(&player1, 0);
    cbf2:	60 e0       	ldi	r22, 0x00	; 0
    cbf4:	84 ee       	ldi	r24, 0xE4	; 228
    cbf6:	9b e0       	ldi	r25, 0x0B	; 11
    cbf8:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
		send_net_message(NETHIT, 0, 0);
    cbfc:	40 e0       	ldi	r20, 0x00	; 0
    cbfe:	60 e0       	ldi	r22, 0x00	; 0
    cc00:	80 e0       	ldi	r24, 0x00	; 0
    cc02:	0e 94 14 65 	call	0xca28	; 0xca28 <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status)  && game.selection != HOSTNETGAME)
	{
		p = &player2;
    cc06:	03 e5       	ldi	r16, 0x53	; 83
    cc08:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    cc0a:	6f e0       	ldi	r22, 0x0F	; 15
    cc0c:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0);
    cc0e:	2b c0       	rjmp	.+86     	; 0xcc66 <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cc10:	94 30       	cpi	r25, 0x04	; 4
    cc12:	61 f5       	brne	.+88     	; 0xcc6c <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    cc14:	b4 01       	movw	r22, r8
    cc16:	8d e2       	ldi	r24, 0x2D	; 45
    cc18:	90 e1       	ldi	r25, 0x10	; 16
    cc1a:	0e 94 83 54 	call	0xa906	; 0xa906 <turret_shot>
    cc1e:	88 23       	and	r24, r24
    cc20:	41 f0       	breq	.+16     	; 0xcc32 <collision_detect_shot+0x162>
		{
			turret1.lives--;
    cc22:	80 91 38 10 	lds	r24, 0x1038
    cc26:	81 50       	subi	r24, 0x01	; 1
    cc28:	80 93 38 10 	sts	0x1038, r24
			init_shot_state(shot, shot->shot_type);
    cc2c:	f4 01       	movw	r30, r8
    cc2e:	63 85       	ldd	r22, Z+11	; 0x0b
    cc30:	0f c0       	rjmp	.+30     	; 0xcc50 <collision_detect_shot+0x180>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    cc32:	b4 01       	movw	r22, r8
    cc34:	89 ef       	ldi	r24, 0xF9	; 249
    cc36:	9f e0       	ldi	r25, 0x0F	; 15
    cc38:	0e 94 83 54 	call	0xa906	; 0xa906 <turret_shot>
    cc3c:	88 23       	and	r24, r24
    cc3e:	b1 f0       	breq	.+44     	; 0xcc6c <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    cc40:	80 91 04 10 	lds	r24, 0x1004
    cc44:	81 50       	subi	r24, 0x01	; 1
    cc46:	80 93 04 10 	sts	0x1004, r24
			init_shot_state(shot, shot->shot_type);
    cc4a:	d4 01       	movw	r26, r8
    cc4c:	1b 96       	adiw	r26, 0x0b	; 11
    cc4e:	6c 91       	ld	r22, X
    cc50:	c4 01       	movw	r24, r8
    cc52:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
			game.boss_fight_player->active_shots--;
    cc56:	e0 91 c1 0b 	lds	r30, 0x0BC1
    cc5a:	f0 91 c2 0b 	lds	r31, 0x0BC2
    cc5e:	81 89       	ldd	r24, Z+17	; 0x11
    cc60:	81 50       	subi	r24, 0x01	; 1
    cc62:	81 8b       	std	Z+17, r24	; 0x11
    cc64:	03 c0       	rjmp	.+6      	; 0xcc6c <collision_detect_shot+0x19c>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
    cc66:	01 15       	cp	r16, r1
    cc68:	11 05       	cpc	r17, r1
    cc6a:	59 f4       	brne	.+22     	; 0xcc82 <collision_detect_shot+0x1b2>
    cc6c:	fe 01       	movw	r30, r28
    cc6e:	31 96       	adiw	r30, 0x01	; 1
    cc70:	2f 01       	movw	r4, r30
    cc72:	1d 82       	std	Y+5, r1	; 0x05
    cc74:	f1 2c       	mov	r15, r1
    cc76:	d1 2c       	mov	r13, r1
    cc78:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cc7a:	5e e1       	ldi	r21, 0x1E	; 30
    cc7c:	25 2e       	mov	r2, r21
    cc7e:	31 2c       	mov	r3, r1
    cc80:	41 c0       	rjmp	.+130    	; 0xcd04 <collision_detect_shot+0x234>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    cc82:	d4 01       	movw	r26, r8
    cc84:	1b 96       	adiw	r26, 0x0b	; 11
    cc86:	6c 91       	ld	r22, X
    cc88:	c4 01       	movw	r24, r8
    cc8a:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
		player->active_shots--;
    cc8e:	f3 01       	movw	r30, r6
    cc90:	81 89       	ldd	r24, Z+17	; 0x11
    cc92:	81 50       	subi	r24, 0x01	; 1
    cc94:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    cc96:	6f 2d       	mov	r22, r15
    cc98:	c8 01       	movw	r24, r16
    cc9a:	0e 94 53 55 	call	0xaaa6	; 0xaaa6 <kill_player>
		SFX_TANK_EXPLODE;
		return;
    cc9e:	f2 c0       	rjmp	.+484    	; 0xce84 <collision_detect_shot+0x3b4>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    cca0:	c5 01       	movw	r24, r10
    cca2:	0e 94 56 53 	call	0xa6ac	; 0xa6ac <solid_directional_tile>
    cca6:	88 23       	and	r24, r24
    cca8:	c1 f1       	breq	.+112    	; 0xcd1a <collision_detect_shot+0x24a>
    ccaa:	20 e0       	ldi	r18, 0x00	; 0
    ccac:	30 e0       	ldi	r19, 0x00	; 0
    ccae:	40 e0       	ldi	r20, 0x00	; 0
    ccb0:	50 e4       	ldi	r21, 0x40	; 64
    ccb2:	f4 01       	movw	r30, r8
    ccb4:	67 81       	ldd	r22, Z+7	; 0x07
    ccb6:	70 85       	ldd	r23, Z+8	; 0x08
    ccb8:	81 85       	ldd	r24, Z+9	; 0x09
    ccba:	92 85       	ldd	r25, Z+10	; 0x0a
    ccbc:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    ccc0:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    ccc4:	c6 2e       	mov	r12, r22
    ccc6:	20 e0       	ldi	r18, 0x00	; 0
    ccc8:	30 e0       	ldi	r19, 0x00	; 0
    ccca:	40 e0       	ldi	r20, 0x00	; 0
    cccc:	50 e4       	ldi	r21, 0x40	; 64
    ccce:	d4 01       	movw	r26, r8
    ccd0:	13 96       	adiw	r26, 0x03	; 3
    ccd2:	6d 91       	ld	r22, X+
    ccd4:	7d 91       	ld	r23, X+
    ccd6:	8d 91       	ld	r24, X+
    ccd8:	9c 91       	ld	r25, X
    ccda:	16 97       	sbiw	r26, 0x06	; 6
    ccdc:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cce0:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cce4:	04 e0       	ldi	r16, 0x04	; 4
    cce6:	24 e0       	ldi	r18, 0x04	; 4
    cce8:	4c 2d       	mov	r20, r12
    ccea:	c5 01       	movw	r24, r10
    ccec:	0e 94 80 53 	call	0xa700	; 0xa700 <collides_directional_tile>
    ccf0:	88 23       	and	r24, r24
    ccf2:	99 f0       	breq	.+38     	; 0xcd1a <collision_detect_shot+0x24a>
		{
			hit = hit | HIT_ANGLE;
    ccf4:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    ccf6:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    ccf8:	bd 81       	ldd	r27, Y+5	; 0x05
    ccfa:	b1 30       	cpi	r27, 0x01	; 1
    ccfc:	09 f4       	brne	.+2      	; 0xcd00 <collision_detect_shot+0x230>
    ccfe:	88 c0       	rjmp	.+272    	; 0xce10 <collision_detect_shot+0x340>
    cd00:	f1 e0       	ldi	r31, 0x01	; 1
    cd02:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    cd04:	d2 01       	movw	r26, r4
    cd06:	ad 90       	ld	r10, X+
    cd08:	bd 90       	ld	r11, X+
    cd0a:	2d 01       	movw	r4, r26
    cd0c:	f5 01       	movw	r30, r10
    cd0e:	ec 59       	subi	r30, 0x9C	; 156
    cd10:	f3 4f       	sbci	r31, 0xF3	; 243
    cd12:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    cd14:	ee 20       	and	r14, r14
    cd16:	81 f3       	breq	.-32     	; 0xccf8 <collision_detect_shot+0x228>
    cd18:	c3 cf       	rjmp	.-122    	; 0xcca0 <collision_detect_shot+0x1d0>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cd1a:	b1 e0       	ldi	r27, 0x01	; 1
    cd1c:	eb 12       	cpse	r14, r27
    cd1e:	3b c0       	rjmp	.+118    	; 0xcd96 <collision_detect_shot+0x2c6>
    cd20:	c5 01       	movw	r24, r10
    cd22:	b1 01       	movw	r22, r2
    cd24:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    cd28:	6d 5f       	subi	r22, 0xFD	; 253
    cd2a:	7f 4f       	sbci	r23, 0xFF	; 255
    cd2c:	e6 2e       	mov	r14, r22
    cd2e:	ee 0c       	add	r14, r14
    cd30:	ee 0c       	add	r14, r14
    cd32:	ee 0c       	add	r14, r14
    cd34:	08 2f       	mov	r16, r24
    cd36:	00 0f       	add	r16, r16
    cd38:	00 0f       	add	r16, r16
    cd3a:	00 0f       	add	r16, r16
    cd3c:	20 e0       	ldi	r18, 0x00	; 0
    cd3e:	30 e0       	ldi	r19, 0x00	; 0
    cd40:	40 e0       	ldi	r20, 0x00	; 0
    cd42:	50 e4       	ldi	r21, 0x40	; 64
    cd44:	f4 01       	movw	r30, r8
    cd46:	67 81       	ldd	r22, Z+7	; 0x07
    cd48:	70 85       	ldd	r23, Z+8	; 0x08
    cd4a:	81 85       	ldd	r24, Z+9	; 0x09
    cd4c:	92 85       	ldd	r25, Z+10	; 0x0a
    cd4e:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cd52:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cd56:	b6 2e       	mov	r11, r22
    cd58:	20 e0       	ldi	r18, 0x00	; 0
    cd5a:	30 e0       	ldi	r19, 0x00	; 0
    cd5c:	40 e0       	ldi	r20, 0x00	; 0
    cd5e:	50 e4       	ldi	r21, 0x40	; 64
    cd60:	d4 01       	movw	r26, r8
    cd62:	13 96       	adiw	r26, 0x03	; 3
    cd64:	6d 91       	ld	r22, X+
    cd66:	7d 91       	ld	r23, X+
    cd68:	8d 91       	ld	r24, X+
    cd6a:	9c 91       	ld	r25, X
    cd6c:	16 97       	sbiw	r26, 0x06	; 6
    cd6e:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cd72:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cd76:	86 2f       	mov	r24, r22
    cd78:	38 e0       	ldi	r19, 0x08	; 8
    cd7a:	a3 2e       	mov	r10, r19
    cd7c:	48 e0       	ldi	r20, 0x08	; 8
    cd7e:	c4 2e       	mov	r12, r20
    cd80:	24 e0       	ldi	r18, 0x04	; 4
    cd82:	44 e0       	ldi	r20, 0x04	; 4
    cd84:	6b 2d       	mov	r22, r11
    cd86:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
    cd8a:	88 23       	and	r24, r24
    cd8c:	09 f4       	brne	.+2      	; 0xcd90 <collision_detect_shot+0x2c0>
    cd8e:	b4 cf       	rjmp	.-152    	; 0xccf8 <collision_detect_shot+0x228>
		{
			hit = hit | HIT_BRICK;
    cd90:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    cd92:	dd 80       	ldd	r13, Y+5	; 0x05
    cd94:	b1 cf       	rjmp	.-158    	; 0xccf8 <collision_detect_shot+0x228>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    cd96:	b2 e0       	ldi	r27, 0x02	; 2
    cd98:	eb 12       	cpse	r14, r27
    cd9a:	ae cf       	rjmp	.-164    	; 0xccf8 <collision_detect_shot+0x228>
    cd9c:	c5 01       	movw	r24, r10
    cd9e:	b1 01       	movw	r22, r2
    cda0:	0e 94 ac 6d 	call	0xdb58	; 0xdb58 <__divmodhi4>
    cda4:	6d 5f       	subi	r22, 0xFD	; 253
    cda6:	7f 4f       	sbci	r23, 0xFF	; 255
    cda8:	e6 2e       	mov	r14, r22
    cdaa:	ee 0c       	add	r14, r14
    cdac:	ee 0c       	add	r14, r14
    cdae:	ee 0c       	add	r14, r14
    cdb0:	08 2f       	mov	r16, r24
    cdb2:	00 0f       	add	r16, r16
    cdb4:	00 0f       	add	r16, r16
    cdb6:	00 0f       	add	r16, r16
    cdb8:	20 e0       	ldi	r18, 0x00	; 0
    cdba:	30 e0       	ldi	r19, 0x00	; 0
    cdbc:	40 e0       	ldi	r20, 0x00	; 0
    cdbe:	50 e4       	ldi	r21, 0x40	; 64
    cdc0:	f4 01       	movw	r30, r8
    cdc2:	67 81       	ldd	r22, Z+7	; 0x07
    cdc4:	70 85       	ldd	r23, Z+8	; 0x08
    cdc6:	81 85       	ldd	r24, Z+9	; 0x09
    cdc8:	92 85       	ldd	r25, Z+10	; 0x0a
    cdca:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cdce:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cdd2:	b6 2e       	mov	r11, r22
    cdd4:	20 e0       	ldi	r18, 0x00	; 0
    cdd6:	30 e0       	ldi	r19, 0x00	; 0
    cdd8:	40 e0       	ldi	r20, 0x00	; 0
    cdda:	50 e4       	ldi	r21, 0x40	; 64
    cddc:	d4 01       	movw	r26, r8
    cdde:	13 96       	adiw	r26, 0x03	; 3
    cde0:	6d 91       	ld	r22, X+
    cde2:	7d 91       	ld	r23, X+
    cde4:	8d 91       	ld	r24, X+
    cde6:	9c 91       	ld	r25, X
    cde8:	16 97       	sbiw	r26, 0x06	; 6
    cdea:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cdee:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    cdf2:	86 2f       	mov	r24, r22
    cdf4:	98 e0       	ldi	r25, 0x08	; 8
    cdf6:	a9 2e       	mov	r10, r25
    cdf8:	28 e0       	ldi	r18, 0x08	; 8
    cdfa:	c2 2e       	mov	r12, r18
    cdfc:	24 e0       	ldi	r18, 0x04	; 4
    cdfe:	44 e0       	ldi	r20, 0x04	; 4
    ce00:	6b 2d       	mov	r22, r11
    ce02:	0e 94 85 4c 	call	0x990a	; 0x990a <LBCollides>
    ce06:	88 23       	and	r24, r24
    ce08:	09 f4       	brne	.+2      	; 0xce0c <collision_detect_shot+0x33c>
    ce0a:	76 cf       	rjmp	.-276    	; 0xccf8 <collision_detect_shot+0x228>
        {
		    hit = hit | HIT_METAL;
    ce0c:	11 60       	ori	r17, 0x01	; 1
    ce0e:	74 cf       	rjmp	.-280    	; 0xccf8 <collision_detect_shot+0x228>
        }
	}
	
	if (hit & HIT_ANGLE)
    ce10:	12 ff       	sbrs	r17, 2
    ce12:	0d c0       	rjmp	.+26     	; 0xce2e <collision_detect_shot+0x35e>
	{
		recoil_sprite_fine(player, &shot->shared);
    ce14:	b4 01       	movw	r22, r8
    ce16:	c3 01       	movw	r24, r6
    ce18:	0e 94 0e 53 	call	0xa61c	; 0xa61c <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    ce1c:	b4 01       	movw	r22, r8
    ce1e:	8f 2d       	mov	r24, r15
    ce20:	0e 94 0b 56 	call	0xac16	; 0xac16 <richochet>
		shot->rebounds--;
    ce24:	f4 01       	movw	r30, r8
    ce26:	85 85       	ldd	r24, Z+13	; 0x0d
    ce28:	81 50       	subi	r24, 0x01	; 1
    ce2a:	85 87       	std	Z+13, r24	; 0x0d
    ce2c:	1a c0       	rjmp	.+52     	; 0xce62 <collision_detect_shot+0x392>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    ce2e:	11 ff       	sbrs	r17, 1
    ce30:	1b c0       	rjmp	.+54     	; 0xce68 <collision_detect_shot+0x398>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    ce32:	fe 01       	movw	r30, r28
    ce34:	31 96       	adiw	r30, 0x01	; 1
    ce36:	7f 01       	movw	r14, r30
    ce38:	ed 0c       	add	r14, r13
    ce3a:	f1 1c       	adc	r15, r1
    ce3c:	ed 0c       	add	r14, r13
    ce3e:	f1 1c       	adc	r15, r1
    ce40:	d7 01       	movw	r26, r14
    ce42:	6d 91       	ld	r22, X+
    ce44:	7c 91       	ld	r23, X
    ce46:	86 ec       	ldi	r24, 0xC6	; 198
    ce48:	9b e0       	ldi	r25, 0x0B	; 11
    ce4a:	0e 94 cd 55 	call	0xab9a	; 0xab9a <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    ce4e:	d7 01       	movw	r26, r14
    ce50:	ed 91       	ld	r30, X+
    ce52:	fc 91       	ld	r31, X
    ce54:	ec 59       	subi	r30, 0x9C	; 156
    ce56:	f3 4f       	sbci	r31, 0xF3	; 243
    ce58:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    ce5a:	f4 01       	movw	r30, r8
    ce5c:	84 85       	ldd	r24, Z+12	; 0x0c
    ce5e:	81 50       	subi	r24, 0x01	; 1
    ce60:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    ce62:	81 11       	cpse	r24, r1
    ce64:	0f c0       	rjmp	.+30     	; 0xce84 <collision_detect_shot+0x3b4>
    ce66:	03 c0       	rjmp	.+6      	; 0xce6e <collision_detect_shot+0x39e>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_BRICK_EXPLODE;
	}
	else if (hit & HIT_METAL)
    ce68:	10 ff       	sbrs	r17, 0
    ce6a:	0c c0       	rjmp	.+24     	; 0xce84 <collision_detect_shot+0x3b4>
	{
        init_shot_state(shot, shot->shot_type);
    ce6c:	f4 01       	movw	r30, r8
    ce6e:	63 85       	ldd	r22, Z+11	; 0x0b
    ce70:	c4 01       	movw	r24, r8
    ce72:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
        player->active_shots--;
    ce76:	d3 01       	movw	r26, r6
    ce78:	51 96       	adiw	r26, 0x11	; 17
    ce7a:	8c 91       	ld	r24, X
    ce7c:	51 97       	sbiw	r26, 0x11	; 17
    ce7e:	81 50       	subi	r24, 0x01	; 1
    ce80:	51 96       	adiw	r26, 0x11	; 17
    ce82:	8c 93       	st	X, r24
        SFX_METAL;
	}
}
    ce84:	0f 90       	pop	r0
    ce86:	0f 90       	pop	r0
    ce88:	0f 90       	pop	r0
    ce8a:	0f 90       	pop	r0
    ce8c:	0f 90       	pop	r0
    ce8e:	df 91       	pop	r29
    ce90:	cf 91       	pop	r28
    ce92:	1f 91       	pop	r17
    ce94:	0f 91       	pop	r16
    ce96:	ff 90       	pop	r15
    ce98:	ef 90       	pop	r14
    ce9a:	df 90       	pop	r13
    ce9c:	cf 90       	pop	r12
    ce9e:	bf 90       	pop	r11
    cea0:	af 90       	pop	r10
    cea2:	9f 90       	pop	r9
    cea4:	8f 90       	pop	r8
    cea6:	7f 90       	pop	r7
    cea8:	6f 90       	pop	r6
    ceaa:	5f 90       	pop	r5
    ceac:	4f 90       	pop	r4
    ceae:	3f 90       	pop	r3
    ceb0:	2f 90       	pop	r2
    ceb2:	08 95       	ret

0000ceb4 <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    ceb4:	cf 92       	push	r12
    ceb6:	df 92       	push	r13
    ceb8:	ef 92       	push	r14
    ceba:	ff 92       	push	r15
    cebc:	0f 93       	push	r16
    cebe:	1f 93       	push	r17
    cec0:	cf 93       	push	r28
    cec2:	df 93       	push	r29
    cec4:	00 d0       	rcall	.+0      	; 0xcec6 <update_player+0x12>
    cec6:	00 d0       	rcall	.+0      	; 0xcec8 <update_player+0x14>
    cec8:	cd b7       	in	r28, 0x3d	; 61
    ceca:	de b7       	in	r29, 0x3e	; 62
    cecc:	7c 01       	movw	r14, r24
    cece:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    ced0:	fb 01       	movw	r30, r22
    ced2:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    ced4:	81 89       	ldd	r24, Z+17	; 0x11
    ced6:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    ced8:	f7 01       	movw	r30, r14
    ceda:	80 81       	ld	r24, Z
    cedc:	83 ff       	sbrs	r24, 3
    cede:	12 c0       	rjmp	.+36     	; 0xcf04 <update_player+0x50>
    cee0:	80 91 b5 0b 	lds	r24, 0x0BB5
    cee4:	81 11       	cpse	r24, r1
    cee6:	0e c0       	rjmp	.+28     	; 0xcf04 <update_player+0x50>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
		send_net_message(NETPAUSETOGGLE, 0, 0);
    cee8:	40 e0       	ldi	r20, 0x00	; 0
    ceea:	60 e0       	ldi	r22, 0x00	; 0
    ceec:	88 e0       	ldi	r24, 0x08	; 8
    ceee:	0e 94 14 65 	call	0xca28	; 0xca28 <send_net_message>
		game.paused = game.paused ^ 1;
    cef2:	90 91 b4 0b 	lds	r25, 0x0BB4
    cef6:	81 e0       	ldi	r24, 0x01	; 1
    cef8:	89 27       	eor	r24, r25
    cefa:	80 93 b4 0b 	sts	0x0BB4, r24
		load_level_tiles(false);
    cefe:	80 e0       	ldi	r24, 0x00	; 0
    cf00:	0e 94 ba 58 	call	0xb174	; 0xb174 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cf04:	80 91 b4 0b 	lds	r24, 0x0BB4
    cf08:	81 11       	cpse	r24, r1
    cf0a:	91 c0       	rjmp	.+290    	; 0xd02e <update_player+0x17a>
    cf0c:	f6 01       	movw	r30, r12
    cf0e:	85 89       	ldd	r24, Z+21	; 0x15
    cf10:	80 fd       	sbrc	r24, 0
    cf12:	8d c0       	rjmp	.+282    	; 0xd02e <update_player+0x17a>
	{
		player->shared.speed = player->max_speed;
    cf14:	87 89       	ldd	r24, Z+23	; 0x17
    cf16:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    cf18:	f7 01       	movw	r30, r14
    cf1a:	84 81       	ldd	r24, Z+4	; 0x04
    cf1c:	84 ff       	sbrs	r24, 4
    cf1e:	10 c0       	rjmp	.+32     	; 0xcf40 <update_player+0x8c>
		{
			player->shared.direction = D_UP;
    cf20:	f6 01       	movw	r30, r12
    cf22:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    cf24:	b6 01       	movw	r22, r12
    cf26:	c6 01       	movw	r24, r12
    cf28:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    cf2c:	9b 01       	movw	r18, r22
    cf2e:	ac 01       	movw	r20, r24
    cf30:	f6 01       	movw	r30, r12
    cf32:	67 81       	ldd	r22, Z+7	; 0x07
    cf34:	70 85       	ldd	r23, Z+8	; 0x08
    cf36:	81 85       	ldd	r24, Z+9	; 0x09
    cf38:	92 85       	ldd	r25, Z+10	; 0x0a
    cf3a:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    cf3e:	25 c0       	rjmp	.+74     	; 0xcf8a <update_player+0xd6>
		}
		else if ((p->held & BTN_RIGHT))
    cf40:	87 ff       	sbrs	r24, 7
    cf42:	11 c0       	rjmp	.+34     	; 0xcf66 <update_player+0xb2>
		{
			player->shared.direction = D_RIGHT;
    cf44:	81 e0       	ldi	r24, 0x01	; 1
    cf46:	f6 01       	movw	r30, r12
    cf48:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    cf4a:	b6 01       	movw	r22, r12
    cf4c:	c6 01       	movw	r24, r12
    cf4e:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    cf52:	9b 01       	movw	r18, r22
    cf54:	ac 01       	movw	r20, r24
    cf56:	f6 01       	movw	r30, r12
    cf58:	63 81       	ldd	r22, Z+3	; 0x03
    cf5a:	74 81       	ldd	r23, Z+4	; 0x04
    cf5c:	85 81       	ldd	r24, Z+5	; 0x05
    cf5e:	96 81       	ldd	r25, Z+6	; 0x06
    cf60:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cf64:	2a c0       	rjmp	.+84     	; 0xcfba <update_player+0x106>
		}
		else if ((p->held & BTN_DOWN))
    cf66:	85 ff       	sbrs	r24, 5
    cf68:	16 c0       	rjmp	.+44     	; 0xcf96 <update_player+0xe2>
		{
			player->shared.direction = D_DOWN;
    cf6a:	82 e0       	ldi	r24, 0x02	; 2
    cf6c:	f6 01       	movw	r30, r12
    cf6e:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    cf70:	b6 01       	movw	r22, r12
    cf72:	c6 01       	movw	r24, r12
    cf74:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    cf78:	9b 01       	movw	r18, r22
    cf7a:	ac 01       	movw	r20, r24
    cf7c:	f6 01       	movw	r30, r12
    cf7e:	67 81       	ldd	r22, Z+7	; 0x07
    cf80:	70 85       	ldd	r23, Z+8	; 0x08
    cf82:	81 85       	ldd	r24, Z+9	; 0x09
    cf84:	92 85       	ldd	r25, Z+10	; 0x0a
    cf86:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    cf8a:	f6 01       	movw	r30, r12
    cf8c:	67 83       	std	Z+7, r22	; 0x07
    cf8e:	70 87       	std	Z+8, r23	; 0x08
    cf90:	81 87       	std	Z+9, r24	; 0x09
    cf92:	92 87       	std	Z+10, r25	; 0x0a
    cf94:	1a c0       	rjmp	.+52     	; 0xcfca <update_player+0x116>
		}
		else if ((p->held & BTN_LEFT))
    cf96:	86 ff       	sbrs	r24, 6
    cf98:	16 c0       	rjmp	.+44     	; 0xcfc6 <update_player+0x112>
		{
			player->shared.direction = D_LEFT;
    cf9a:	83 e0       	ldi	r24, 0x03	; 3
    cf9c:	f6 01       	movw	r30, r12
    cf9e:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    cfa0:	b6 01       	movw	r22, r12
    cfa2:	c6 01       	movw	r24, r12
    cfa4:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    cfa8:	9b 01       	movw	r18, r22
    cfaa:	ac 01       	movw	r20, r24
    cfac:	f6 01       	movw	r30, r12
    cfae:	63 81       	ldd	r22, Z+3	; 0x03
    cfb0:	74 81       	ldd	r23, Z+4	; 0x04
    cfb2:	85 81       	ldd	r24, Z+5	; 0x05
    cfb4:	96 81       	ldd	r25, Z+6	; 0x06
    cfb6:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    cfba:	f6 01       	movw	r30, r12
    cfbc:	63 83       	std	Z+3, r22	; 0x03
    cfbe:	74 83       	std	Z+4, r23	; 0x04
    cfc0:	85 83       	std	Z+5, r24	; 0x05
    cfc2:	96 83       	std	Z+6, r25	; 0x06
    cfc4:	02 c0       	rjmp	.+4      	; 0xcfca <update_player+0x116>
		}
		else
		{
			player->shared.speed = 0;
    cfc6:	f6 01       	movw	r30, r12
    cfc8:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    cfca:	c7 01       	movw	r24, r14
    cfcc:	0e 94 17 51 	call	0xa22e	; 0xa22e <shoot_pressed>
    cfd0:	88 23       	and	r24, r24
    cfd2:	69 f1       	breq	.+90     	; 0xd02e <update_player+0x17a>
    cfd4:	f6 01       	movw	r30, r12
    cfd6:	81 89       	ldd	r24, Z+17	; 0x11
    cfd8:	81 11       	cpse	r24, r1
    cfda:	29 c0       	rjmp	.+82     	; 0xd02e <update_player+0x17a>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    cfdc:	83 ad       	ldd	r24, Z+59	; 0x3b
    cfde:	81 11       	cpse	r24, r1
    cfe0:	26 c0       	rjmp	.+76     	; 0xd02e <update_player+0x17a>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    cfe2:	86 01       	movw	r16, r12
    cfe4:	03 5d       	subi	r16, 0xD3	; 211
    cfe6:	1f 4f       	sbci	r17, 0xFF	; 255
				if (!shot->active)
				{
					if (player->has_rocket)
    cfe8:	80 8d       	ldd	r24, Z+24	; 0x18
    cfea:	88 23       	and	r24, r24
    cfec:	31 f0       	breq	.+12     	; 0xcffa <update_player+0x146>
					{
						init_shot_state(shot, ROCKET_SHOT);
    cfee:	61 e0       	ldi	r22, 0x01	; 1
    cff0:	c8 01       	movw	r24, r16
    cff2:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    cff6:	61 e0       	ldi	r22, 0x01	; 1
    cff8:	05 c0       	rjmp	.+10     	; 0xd004 <update_player+0x150>
						SFX_ROCKET;
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    cffa:	60 e0       	ldi	r22, 0x00	; 0
    cffc:	c8 01       	movw	r24, r16
    cffe:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d002:	60 e0       	ldi	r22, 0x00	; 0
    d004:	c8 01       	movw	r24, r16
    d006:	0e 94 41 4e 	call	0x9c82	; 0x9c82 <set_shot_animations>
						SFX_CANNONBALL;
					}
					player->active_shots++;
    d00a:	f6 01       	movw	r30, r12
    d00c:	81 89       	ldd	r24, Z+17	; 0x11
    d00e:	8f 5f       	subi	r24, 0xFF	; 255
    d010:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    d012:	80 81       	ld	r24, Z
    d014:	85 a7       	std	Z+45, r24	; 0x2d
					position_shot(player, shot);
    d016:	b8 01       	movw	r22, r16
    d018:	c6 01       	movw	r24, r12
    d01a:	0e 94 0e 50 	call	0xa01c	; 0xa01c <position_shot>
					shot->active = 1;
    d01e:	81 e0       	ldi	r24, 0x01	; 1
    d020:	f6 01       	movw	r30, r12
    d022:	83 af       	std	Z+59, r24	; 0x3b
					if (player->has_over_speed)
    d024:	81 8d       	ldd	r24, Z+25	; 0x19
    d026:	88 23       	and	r24, r24
    d028:	11 f0       	breq	.+4      	; 0xd02e <update_player+0x17a>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d02a:	8a ea       	ldi	r24, 0xAA	; 170
    d02c:	86 a7       	std	Z+46, r24	; 0x2e
				}
			}
		}
	}
	
	if (!game.paused)
    d02e:	80 91 b4 0b 	lds	r24, 0x0BB4
    d032:	81 11       	cpse	r24, r1
    d034:	86 c0       	rjmp	.+268    	; 0xd142 <update_player+0x28e>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d036:	86 01       	movw	r16, r12
    d038:	03 5d       	subi	r16, 0xD3	; 211
    d03a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d03c:	f6 01       	movw	r30, r12
    d03e:	83 ad       	ldd	r24, Z+59	; 0x3b
    d040:	88 23       	and	r24, r24
    d042:	09 f4       	brne	.+2      	; 0xd046 <update_player+0x192>
    d044:	91 c0       	rjmp	.+290    	; 0xd168 <update_player+0x2b4>
			{
				switch (shot->shared.direction)
    d046:	85 a5       	ldd	r24, Z+45	; 0x2d
    d048:	81 30       	cpi	r24, 0x01	; 1
    d04a:	11 f1       	breq	.+68     	; 0xd090 <update_player+0x1dc>
    d04c:	98 f0       	brcs	.+38     	; 0xd074 <update_player+0x1c0>
    d04e:	82 30       	cpi	r24, 0x02	; 2
    d050:	69 f1       	breq	.+90     	; 0xd0ac <update_player+0x1f8>
    d052:	83 30       	cpi	r24, 0x03	; 3
    d054:	09 f0       	breq	.+2      	; 0xd058 <update_player+0x1a4>
    d056:	42 c0       	rjmp	.+132    	; 0xd0dc <update_player+0x228>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d058:	b8 01       	movw	r22, r16
    d05a:	c6 01       	movw	r24, r12
    d05c:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    d060:	9b 01       	movw	r18, r22
    d062:	ac 01       	movw	r20, r24
    d064:	f6 01       	movw	r30, r12
    d066:	60 a9       	ldd	r22, Z+48	; 0x30
    d068:	71 a9       	ldd	r23, Z+49	; 0x31
    d06a:	82 a9       	ldd	r24, Z+50	; 0x32
    d06c:	93 a9       	ldd	r25, Z+51	; 0x33
    d06e:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    d072:	2f c0       	rjmp	.+94     	; 0xd0d2 <update_player+0x21e>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d074:	b8 01       	movw	r22, r16
    d076:	c6 01       	movw	r24, r12
    d078:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    d07c:	9b 01       	movw	r18, r22
    d07e:	ac 01       	movw	r20, r24
    d080:	f6 01       	movw	r30, r12
    d082:	64 a9       	ldd	r22, Z+52	; 0x34
    d084:	75 a9       	ldd	r23, Z+53	; 0x35
    d086:	86 a9       	ldd	r24, Z+54	; 0x36
    d088:	97 a9       	ldd	r25, Z+55	; 0x37
    d08a:	0e 94 c0 6d 	call	0xdb80	; 0xdb80 <__subsf3>
    d08e:	1b c0       	rjmp	.+54     	; 0xd0c6 <update_player+0x212>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d090:	b8 01       	movw	r22, r16
    d092:	c6 01       	movw	r24, r12
    d094:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    d098:	9b 01       	movw	r18, r22
    d09a:	ac 01       	movw	r20, r24
    d09c:	f6 01       	movw	r30, r12
    d09e:	60 a9       	ldd	r22, Z+48	; 0x30
    d0a0:	71 a9       	ldd	r23, Z+49	; 0x31
    d0a2:	82 a9       	ldd	r24, Z+50	; 0x32
    d0a4:	93 a9       	ldd	r25, Z+51	; 0x33
    d0a6:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    d0aa:	13 c0       	rjmp	.+38     	; 0xd0d2 <update_player+0x21e>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d0ac:	b8 01       	movw	r22, r16
    d0ae:	c6 01       	movw	r24, r12
    d0b0:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    d0b4:	9b 01       	movw	r18, r22
    d0b6:	ac 01       	movw	r20, r24
    d0b8:	f6 01       	movw	r30, r12
    d0ba:	64 a9       	ldd	r22, Z+52	; 0x34
    d0bc:	75 a9       	ldd	r23, Z+53	; 0x35
    d0be:	86 a9       	ldd	r24, Z+54	; 0x36
    d0c0:	97 a9       	ldd	r25, Z+55	; 0x37
    d0c2:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    d0c6:	f6 01       	movw	r30, r12
    d0c8:	64 ab       	std	Z+52, r22	; 0x34
    d0ca:	75 ab       	std	Z+53, r23	; 0x35
    d0cc:	86 ab       	std	Z+54, r24	; 0x36
    d0ce:	97 ab       	std	Z+55, r25	; 0x37
    d0d0:	05 c0       	rjmp	.+10     	; 0xd0dc <update_player+0x228>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d0d2:	f6 01       	movw	r30, r12
    d0d4:	60 ab       	std	Z+48, r22	; 0x30
    d0d6:	71 ab       	std	Z+49, r23	; 0x31
    d0d8:	82 ab       	std	Z+50, r24	; 0x32
    d0da:	93 ab       	std	Z+51, r25	; 0x33
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d0dc:	f6 01       	movw	r30, r12
    d0de:	f4 ac       	ldd	r15, Z+60	; 0x3c
    d0e0:	f8 e0       	ldi	r31, 0x08	; 8
    d0e2:	ff 15       	cp	r31, r15
    d0e4:	38 f0       	brcs	.+14     	; 0xd0f4 <update_player+0x240>
    d0e6:	b8 01       	movw	r22, r16
    d0e8:	c6 01       	movw	r24, r12
    d0ea:	0e 94 21 51 	call	0xa242	; 0xa242 <get_delta>
    d0ee:	9b 01       	movw	r18, r22
    d0f0:	ac 01       	movw	r20, r24
    d0f2:	03 c0       	rjmp	.+6      	; 0xd0fa <update_player+0x246>
    d0f4:	20 e0       	ldi	r18, 0x00	; 0
    d0f6:	30 e0       	ldi	r19, 0x00	; 0
    d0f8:	a9 01       	movw	r20, r18
    d0fa:	6f 2d       	mov	r22, r15
    d0fc:	70 e0       	ldi	r23, 0x00	; 0
    d0fe:	80 e0       	ldi	r24, 0x00	; 0
    d100:	90 e0       	ldi	r25, 0x00	; 0
    d102:	29 83       	std	Y+1, r18	; 0x01
    d104:	3a 83       	std	Y+2, r19	; 0x02
    d106:	4b 83       	std	Y+3, r20	; 0x03
    d108:	5c 83       	std	Y+4, r21	; 0x04
    d10a:	0e 94 c4 6e 	call	0xdd88	; 0xdd88 <__floatsisf>
    d10e:	29 81       	ldd	r18, Y+1	; 0x01
    d110:	3a 81       	ldd	r19, Y+2	; 0x02
    d112:	4b 81       	ldd	r20, Y+3	; 0x03
    d114:	5c 81       	ldd	r21, Y+4	; 0x04
    d116:	0e 94 c1 6d 	call	0xdb82	; 0xdb82 <__addsf3>
    d11a:	0e 94 96 6e 	call	0xdd2c	; 0xdd2c <__fixunssfsi>
    d11e:	f6 01       	movw	r30, r12
    d120:	64 af       	std	Z+60, r22	; 0x3c
				collision_detect_shot(player, shot);
    d122:	b8 01       	movw	r22, r16
    d124:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d126:	0f 90       	pop	r0
    d128:	0f 90       	pop	r0
    d12a:	0f 90       	pop	r0
    d12c:	0f 90       	pop	r0
    d12e:	df 91       	pop	r29
    d130:	cf 91       	pop	r28
    d132:	1f 91       	pop	r17
    d134:	0f 91       	pop	r16
    d136:	ff 90       	pop	r15
    d138:	ef 90       	pop	r14
    d13a:	df 90       	pop	r13
    d13c:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d13e:	0c 94 68 65 	jmp	0xcad0	; 0xcad0 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d142:	f7 01       	movw	r30, r14
    d144:	80 81       	ld	r24, Z
    d146:	91 81       	ldd	r25, Z+1	; 0x01
    d148:	91 ff       	sbrs	r25, 1
    d14a:	0e c0       	rjmp	.+28     	; 0xd168 <update_player+0x2b4>
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d14c:	0f 90       	pop	r0
    d14e:	0f 90       	pop	r0
    d150:	0f 90       	pop	r0
    d152:	0f 90       	pop	r0
    d154:	df 91       	pop	r29
    d156:	cf 91       	pop	r28
    d158:	1f 91       	pop	r17
    d15a:	0f 91       	pop	r16
    d15c:	ff 90       	pop	r15
    d15e:	ef 90       	pop	r14
    d160:	df 90       	pop	r13
    d162:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d164:	0c 94 a8 5c 	jmp	0xb950	; 0xb950 <exit_game>
		}
	}
}
    d168:	0f 90       	pop	r0
    d16a:	0f 90       	pop	r0
    d16c:	0f 90       	pop	r0
    d16e:	0f 90       	pop	r0
    d170:	df 91       	pop	r29
    d172:	cf 91       	pop	r28
    d174:	1f 91       	pop	r17
    d176:	0f 91       	pop	r16
    d178:	ff 90       	pop	r15
    d17a:	ef 90       	pop	r14
    d17c:	df 90       	pop	r13
    d17e:	cf 90       	pop	r12
    d180:	08 95       	ret

0000d182 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d182:	df 92       	push	r13
    d184:	ef 92       	push	r14
    d186:	ff 92       	push	r15
    d188:	0f 93       	push	r16
    d18a:	1f 93       	push	r17
    d18c:	cf 93       	push	r28
    d18e:	df 93       	push	r29
    d190:	8c 01       	movw	r16, r24
    d192:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    d194:	80 91 b4 0b 	lds	r24, 0x0BB4
    d198:	88 23       	and	r24, r24
    d19a:	19 f1       	breq	.+70     	; 0xd1e2 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    d19c:	0e 94 af 4d 	call	0x9b5e	; 0x9b5e <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    d1a0:	40 e7       	ldi	r20, 0x70	; 112
    d1a2:	5a e6       	ldi	r21, 0x6A	; 106
    d1a4:	6c e0       	ldi	r22, 0x0C	; 12
    d1a6:	88 e0       	ldi	r24, 0x08	; 8
    d1a8:	0e 94 ec 47 	call	0x8fd8	; 0x8fd8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    d1ac:	4a e1       	ldi	r20, 0x1A	; 26
    d1ae:	54 e0       	ldi	r21, 0x04	; 4
    d1b0:	6d e0       	ldi	r22, 0x0D	; 13
    d1b2:	70 e0       	ldi	r23, 0x00	; 0
    d1b4:	8c e0       	ldi	r24, 0x0C	; 12
    d1b6:	90 e0       	ldi	r25, 0x00	; 0
    d1b8:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		Print(11, 14, (char*) strExit);
    d1bc:	41 e2       	ldi	r20, 0x21	; 33
    d1be:	54 e0       	ldi	r21, 0x04	; 4
    d1c0:	6e e0       	ldi	r22, 0x0E	; 14
    d1c2:	70 e0       	ldi	r23, 0x00	; 0
    d1c4:	8b e0       	ldi	r24, 0x0B	; 11
    d1c6:	90 e0       	ldi	r25, 0x00	; 0
    d1c8:	0e 94 6c 48 	call	0x90d8	; 0x90d8 <Print>
		
		// Update
		update_player(p1, &player1);
    d1cc:	64 ee       	ldi	r22, 0xE4	; 228
    d1ce:	7b e0       	ldi	r23, 0x0B	; 11
    d1d0:	c8 01       	movw	r24, r16
    d1d2:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
		update_player(p2, &player2);
    d1d6:	63 e5       	ldi	r22, 0x53	; 83
    d1d8:	7f e0       	ldi	r23, 0x0F	; 15
    d1da:	ce 01       	movw	r24, r28
    d1dc:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
    d1e0:	c6 c1       	rjmp	.+908    	; 0xd56e <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d1e2:	90 91 b5 0b 	lds	r25, 0x0BB5
    d1e6:	91 30       	cpi	r25, 0x01	; 1
    d1e8:	19 f4       	brne	.+6      	; 0xd1f0 <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    d1ea:	0e 94 13 5a 	call	0xb426	; 0xb426 <render_boss_fight_scope_load>
    d1ee:	05 c0       	rjmp	.+10     	; 0xd1fa <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d1f0:	92 30       	cpi	r25, 0x02	; 2
    d1f2:	09 f0       	breq	.+2      	; 0xd1f6 <update_level+0x74>
    d1f4:	4e c0       	rjmp	.+156    	; 0xd292 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    d1f6:	0e 94 1d 5a 	call	0xb43a	; 0xb43a <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d1fa:	60 e0       	ldi	r22, 0x00	; 0
    d1fc:	80 91 c1 0b 	lds	r24, 0x0BC1
    d200:	90 91 c2 0b 	lds	r25, 0x0BC2
    d204:	0e 94 1f 52 	call	0xa43e	; 0xa43e <tank_map>
    d208:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d20a:	40 e0       	ldi	r20, 0x00	; 0
    d20c:	63 ea       	ldi	r22, 0xA3	; 163
    d20e:	70 e3       	ldi	r23, 0x30	; 48
    d210:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		p1_shot_index = p2_index + 4;
    d214:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d216:	6c 2f       	mov	r22, r28
    d218:	80 91 c1 0b 	lds	r24, 0x0BC1
    d21c:	90 91 c2 0b 	lds	r25, 0x0BC2
    d220:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
    d224:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d226:	40 e0       	ldi	r20, 0x00	; 0
    d228:	69 ea       	ldi	r22, 0xA9	; 169
    d22a:	70 e3       	ldi	r23, 0x30	; 48
    d22c:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d230:	6c 2f       	mov	r22, r28
    d232:	80 91 c1 0b 	lds	r24, 0x0BC1
    d236:	90 91 c2 0b 	lds	r25, 0x0BC2
    d23a:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d23e:	60 e0       	ldi	r22, 0x00	; 0
    d240:	80 91 c1 0b 	lds	r24, 0x0BC1
    d244:	90 91 c2 0b 	lds	r25, 0x0BC2
    d248:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d24c:	6c 2f       	mov	r22, r28
    d24e:	80 91 c1 0b 	lds	r24, 0x0BC1
    d252:	90 91 c2 0b 	lds	r25, 0x0BC2
    d256:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_shot(&player2, p2_shot_index);
    d25a:	6d 2f       	mov	r22, r29
    d25c:	83 e5       	ldi	r24, 0x53	; 83
    d25e:	9f e0       	ldi	r25, 0x0F	; 15
    d260:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_tile_explosions(&tile_animations);
    d264:	86 ec       	ldi	r24, 0xC6	; 198
    d266:	9b e0       	ldi	r25, 0x0B	; 11
    d268:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d26c:	60 91 c1 0b 	lds	r22, 0x0BC1
    d270:	70 91 c2 0b 	lds	r23, 0x0BC2
    d274:	80 91 c3 0b 	lds	r24, 0x0BC3
    d278:	90 91 c4 0b 	lds	r25, 0x0BC4
    d27c:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d280:	60 91 b6 0b 	lds	r22, 0x0BB6
    d284:	80 91 c1 0b 	lds	r24, 0x0BC1
    d288:	90 91 c2 0b 	lds	r25, 0x0BC2
    d28c:	0e 94 38 57 	call	0xae70	; 0xae70 <collision_detect_player>
    d290:	6e c1       	rjmp	.+732    	; 0xd56e <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d292:	94 30       	cpi	r25, 0x04	; 4
    d294:	09 f0       	breq	.+2      	; 0xd298 <update_level+0x116>
    d296:	94 c0       	rjmp	.+296    	; 0xd3c0 <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d298:	80 91 38 10 	lds	r24, 0x1038
    d29c:	81 11       	cpse	r24, r1
    d29e:	07 c0       	rjmp	.+14     	; 0xd2ae <update_level+0x12c>
    d2a0:	80 91 04 10 	lds	r24, 0x1004
    d2a4:	81 11       	cpse	r24, r1
    d2a6:	03 c0       	rjmp	.+6      	; 0xd2ae <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d2a8:	80 e2       	ldi	r24, 0x20	; 32
    d2aa:	80 93 b5 0b 	sts	0x0BB5, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d2ae:	60 e0       	ldi	r22, 0x00	; 0
    d2b0:	80 91 c1 0b 	lds	r24, 0x0BC1
    d2b4:	90 91 c2 0b 	lds	r25, 0x0BC2
    d2b8:	0e 94 1f 52 	call	0xa43e	; 0xa43e <tank_map>
    d2bc:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d2be:	68 2f       	mov	r22, r24
    d2c0:	80 91 c1 0b 	lds	r24, 0x0BC1
    d2c4:	90 91 c2 0b 	lds	r25, 0x0BC2
    d2c8:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
    d2cc:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d2ce:	01 e0       	ldi	r16, 0x01	; 1
    d2d0:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d2d2:	12 e0       	ldi	r17, 0x02	; 2
    d2d4:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d2d6:	d3 e0       	ldi	r29, 0x03	; 3
    d2d8:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d2da:	80 91 38 10 	lds	r24, 0x1038
    d2de:	88 23       	and	r24, r24
    d2e0:	19 f0       	breq	.+6      	; 0xd2e8 <update_level+0x166>
	return (char*) map_sub_turret;
    d2e2:	6b e5       	ldi	r22, 0x5B	; 91
    d2e4:	70 e3       	ldi	r23, 0x30	; 48
    d2e6:	02 c0       	rjmp	.+4      	; 0xd2ec <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d2e8:	69 ea       	ldi	r22, 0xA9	; 169
    d2ea:	70 e3       	ldi	r23, 0x30	; 48
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d2ec:	40 e0       	ldi	r20, 0x00	; 0
    d2ee:	8c 2f       	mov	r24, r28
    d2f0:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d2f4:	80 91 38 10 	lds	r24, 0x1038
    d2f8:	88 23       	and	r24, r24
    d2fa:	19 f0       	breq	.+6      	; 0xd302 <update_level+0x180>
	return (char*) map_sub_shot;
    d2fc:	6e e5       	ldi	r22, 0x5E	; 94
    d2fe:	70 e3       	ldi	r23, 0x30	; 48
    d300:	02 c0       	rjmp	.+4      	; 0xd306 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d302:	69 ea       	ldi	r22, 0xA9	; 169
    d304:	70 e3       	ldi	r23, 0x30	; 48
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d306:	40 e0       	ldi	r20, 0x00	; 0
    d308:	80 2f       	mov	r24, r16
    d30a:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d30e:	80 91 04 10 	lds	r24, 0x1004
    d312:	88 23       	and	r24, r24
    d314:	19 f0       	breq	.+6      	; 0xd31c <update_level+0x19a>
	return (char*) map_sub_turret;
    d316:	6b e5       	ldi	r22, 0x5B	; 91
    d318:	70 e3       	ldi	r23, 0x30	; 48
    d31a:	02 c0       	rjmp	.+4      	; 0xd320 <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d31c:	69 ea       	ldi	r22, 0xA9	; 169
    d31e:	70 e3       	ldi	r23, 0x30	; 48
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d320:	40 e0       	ldi	r20, 0x00	; 0
    d322:	81 2f       	mov	r24, r17
    d324:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d328:	80 91 04 10 	lds	r24, 0x1004
    d32c:	88 23       	and	r24, r24
    d32e:	19 f0       	breq	.+6      	; 0xd336 <update_level+0x1b4>
	return (char*) map_sub_shot;
    d330:	6e e5       	ldi	r22, 0x5E	; 94
    d332:	70 e3       	ldi	r23, 0x30	; 48
    d334:	02 c0       	rjmp	.+4      	; 0xd33a <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d336:	69 ea       	ldi	r22, 0xA9	; 169
    d338:	70 e3       	ldi	r23, 0x30	; 48
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d33a:	40 e0       	ldi	r20, 0x00	; 0
    d33c:	8d 2f       	mov	r24, r29
    d33e:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d342:	60 e0       	ldi	r22, 0x00	; 0
    d344:	80 91 c1 0b 	lds	r24, 0x0BC1
    d348:	90 91 c2 0b 	lds	r25, 0x0BC2
    d34c:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d350:	6f 2d       	mov	r22, r15
    d352:	80 91 c1 0b 	lds	r24, 0x0BC1
    d356:	90 91 c2 0b 	lds	r25, 0x0BC2
    d35a:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_tile_explosions(&tile_animations);
    d35e:	86 ec       	ldi	r24, 0xC6	; 198
    d360:	9b e0       	ldi	r25, 0x0B	; 11
    d362:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d366:	6c 2f       	mov	r22, r28
    d368:	8d e2       	ldi	r24, 0x2D	; 45
    d36a:	90 e1       	ldi	r25, 0x10	; 16
    d36c:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d370:	60 2f       	mov	r22, r16
    d372:	8d e2       	ldi	r24, 0x2D	; 45
    d374:	90 e1       	ldi	r25, 0x10	; 16
    d376:	0e 94 88 5a 	call	0xb510	; 0xb510 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d37a:	61 2f       	mov	r22, r17
    d37c:	89 ef       	ldi	r24, 0xF9	; 249
    d37e:	9f e0       	ldi	r25, 0x0F	; 15
    d380:	0e 94 5f 5a 	call	0xb4be	; 0xb4be <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d384:	6d 2f       	mov	r22, r29
    d386:	89 ef       	ldi	r24, 0xF9	; 249
    d388:	9f e0       	ldi	r25, 0x0F	; 15
    d38a:	0e 94 88 5a 	call	0xb510	; 0xb510 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d38e:	40 e6       	ldi	r20, 0x60	; 96
    d390:	68 e2       	ldi	r22, 0x28	; 40
    d392:	8d e2       	ldi	r24, 0x2D	; 45
    d394:	90 e1       	ldi	r25, 0x10	; 16
    d396:	0e 94 b1 5a 	call	0xb562	; 0xb562 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d39a:	40 ec       	ldi	r20, 0xC0	; 192
    d39c:	68 e8       	ldi	r22, 0x88	; 136
    d39e:	89 ef       	ldi	r24, 0xF9	; 249
    d3a0:	9f e0       	ldi	r25, 0x0F	; 15
    d3a2:	0e 94 b1 5a 	call	0xb562	; 0xb562 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d3a6:	69 e3       	ldi	r22, 0x39	; 57
    d3a8:	70 e1       	ldi	r23, 0x10	; 16
    d3aa:	8d e2       	ldi	r24, 0x2D	; 45
    d3ac:	90 e1       	ldi	r25, 0x10	; 16
    d3ae:	0e 94 46 5b 	call	0xb68c	; 0xb68c <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d3b2:	65 e0       	ldi	r22, 0x05	; 5
    d3b4:	70 e1       	ldi	r23, 0x10	; 16
    d3b6:	89 ef       	ldi	r24, 0xF9	; 249
    d3b8:	9f e0       	ldi	r25, 0x0F	; 15
    d3ba:	0e 94 46 5b 	call	0xb68c	; 0xb68c <update_turret_shot>
    d3be:	56 cf       	rjmp	.-340    	; 0xd26c <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d3c0:	90 32       	cpi	r25, 0x20	; 32
    d3c2:	09 f0       	breq	.+2      	; 0xd3c6 <update_level+0x244>
    d3c4:	55 c0       	rjmp	.+170    	; 0xd470 <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    d3c6:	0e 94 4a 5a 	call	0xb494	; 0xb494 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d3ca:	60 e0       	ldi	r22, 0x00	; 0
    d3cc:	80 91 c1 0b 	lds	r24, 0x0BC1
    d3d0:	90 91 c2 0b 	lds	r25, 0x0BC2
    d3d4:	0e 94 1f 52 	call	0xa43e	; 0xa43e <tank_map>
    d3d8:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d3da:	40 e0       	ldi	r20, 0x00	; 0
    d3dc:	63 ea       	ldi	r22, 0xA3	; 163
    d3de:	70 e3       	ldi	r23, 0x30	; 48
    d3e0:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		p1_shot_index = p2_index + 4;
    d3e4:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d3e6:	6c 2f       	mov	r22, r28
    d3e8:	80 91 c1 0b 	lds	r24, 0x0BC1
    d3ec:	90 91 c2 0b 	lds	r25, 0x0BC2
    d3f0:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
    d3f4:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d3f6:	40 e0       	ldi	r20, 0x00	; 0
    d3f8:	69 ea       	ldi	r22, 0xA9	; 169
    d3fa:	70 e3       	ldi	r23, 0x30	; 48
    d3fc:	0e 94 66 47 	call	0x8ecc	; 0x8ecc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d400:	6c 2f       	mov	r22, r28
    d402:	80 91 c1 0b 	lds	r24, 0x0BC1
    d406:	90 91 c2 0b 	lds	r25, 0x0BC2
    d40a:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d40e:	60 e0       	ldi	r22, 0x00	; 0
    d410:	80 91 c1 0b 	lds	r24, 0x0BC1
    d414:	90 91 c2 0b 	lds	r25, 0x0BC2
    d418:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d41c:	6c 2f       	mov	r22, r28
    d41e:	80 91 c1 0b 	lds	r24, 0x0BC1
    d422:	90 91 c2 0b 	lds	r25, 0x0BC2
    d426:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_shot(&player2, p2_shot_index);
    d42a:	6d 2f       	mov	r22, r29
    d42c:	83 e5       	ldi	r24, 0x53	; 83
    d42e:	9f e0       	ldi	r25, 0x0F	; 15
    d430:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_tile_explosions(&tile_animations);
    d434:	86 ec       	ldi	r24, 0xC6	; 198
    d436:	9b e0       	ldi	r25, 0x0B	; 11
    d438:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d43c:	60 91 c1 0b 	lds	r22, 0x0BC1
    d440:	70 91 c2 0b 	lds	r23, 0x0BC2
    d444:	80 91 c3 0b 	lds	r24, 0x0BC3
    d448:	90 91 c4 0b 	lds	r25, 0x0BC4
    d44c:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d450:	60 91 b6 0b 	lds	r22, 0x0BB6
    d454:	80 91 c1 0b 	lds	r24, 0x0BC1
    d458:	90 91 c2 0b 	lds	r25, 0x0BC2
    d45c:	0e 94 38 57 	call	0xae70	; 0xae70 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    d460:	80 91 b5 0b 	lds	r24, 0x0BB5
    d464:	80 32       	cpi	r24, 0x20	; 32
    d466:	09 f4       	brne	.+2      	; 0xd46a <update_level+0x2e8>
    d468:	82 c0       	rjmp	.+260    	; 0xd56e <update_level+0x3ec>
		{
			resolve_scoring();
    d46a:	0e 94 b0 5c 	call	0xb960	; 0xb960 <resolve_scoring>
    d46e:	7f c0       	rjmp	.+254    	; 0xd56e <update_level+0x3ec>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    d470:	90 31       	cpi	r25, 0x10	; 16
    d472:	d9 f3       	breq	.-10     	; 0xd46a <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    d474:	91 11       	cpse	r25, r1
    d476:	7b c0       	rjmp	.+246    	; 0xd56e <update_level+0x3ec>
	{
		p2_index = tank_map(&player1, p1_index);
    d478:	60 e0       	ldi	r22, 0x00	; 0
    d47a:	84 ee       	ldi	r24, 0xE4	; 228
    d47c:	9b e0       	ldi	r25, 0x0B	; 11
    d47e:	0e 94 1f 52 	call	0xa43e	; 0xa43e <tank_map>
    d482:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d484:	68 2f       	mov	r22, r24
    d486:	83 e5       	ldi	r24, 0x53	; 83
    d488:	9f e0       	ldi	r25, 0x0F	; 15
    d48a:	0e 94 1f 52 	call	0xa43e	; 0xa43e <tank_map>
    d48e:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d490:	68 2f       	mov	r22, r24
    d492:	84 ee       	ldi	r24, 0xE4	; 228
    d494:	9b e0       	ldi	r25, 0x0B	; 11
    d496:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
    d49a:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    d49c:	68 2f       	mov	r22, r24
    d49e:	83 e5       	ldi	r24, 0x53	; 83
    d4a0:	9f e0       	ldi	r25, 0x0F	; 15
    d4a2:	0e 94 88 52 	call	0xa510	; 0xa510 <shot_map>
		render_player(&player1, p1_index);
    d4a6:	60 e0       	ldi	r22, 0x00	; 0
    d4a8:	84 ee       	ldi	r24, 0xE4	; 228
    d4aa:	9b e0       	ldi	r25, 0x0B	; 11
    d4ac:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <render_player>
		render_player(&player2, p2_index);
    d4b0:	6d 2d       	mov	r22, r13
    d4b2:	83 e5       	ldi	r24, 0x53	; 83
    d4b4:	9f e0       	ldi	r25, 0x0F	; 15
    d4b6:	0e 94 7b 51 	call	0xa2f6	; 0xa2f6 <render_player>
		render_shot(&player1, p1_shot_index);
    d4ba:	6e 2d       	mov	r22, r14
    d4bc:	84 ee       	ldi	r24, 0xE4	; 228
    d4be:	9b e0       	ldi	r25, 0x0B	; 11
    d4c0:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_shot(&player2, p2_shot_index);
    d4c4:	6f 2d       	mov	r22, r15
    d4c6:	83 e5       	ldi	r24, 0x53	; 83
    d4c8:	9f e0       	ldi	r25, 0x0F	; 15
    d4ca:	0e 94 a4 51 	call	0xa348	; 0xa348 <render_shot>
		render_tile_explosions(&tile_animations);
    d4ce:	86 ec       	ldi	r24, 0xC6	; 198
    d4d0:	9b e0       	ldi	r25, 0x0B	; 11
    d4d2:	0e 94 d0 51 	call	0xa3a0	; 0xa3a0 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d4d6:	80 91 bd 0b 	lds	r24, 0x0BBD
    d4da:	90 91 be 0b 	lds	r25, 0x0BBE
    d4de:	89 3e       	cpi	r24, 0xE9	; 233
    d4e0:	93 40       	sbci	r25, 0x03	; 3
    d4e2:	88 f0       	brcs	.+34     	; 0xd506 <update_level+0x384>
    d4e4:	80 91 e6 0f 	lds	r24, 0x0FE6
    d4e8:	90 91 e7 0f 	lds	r25, 0x0FE7
    d4ec:	18 16       	cp	r1, r24
    d4ee:	19 06       	cpc	r1, r25
    d4f0:	54 f4       	brge	.+20     	; 0xd506 <update_level+0x384>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d4f2:	8a ed       	ldi	r24, 0xDA	; 218
    d4f4:	9f e0       	ldi	r25, 0x0F	; 15
    d4f6:	0e 94 05 52 	call	0xa40a	; 0xa40a <render_scope>
    d4fa:	88 23       	and	r24, r24
    d4fc:	21 f0       	breq	.+8      	; 0xd506 <update_level+0x384>
    d4fe:	10 92 be 0b 	sts	0x0BBE, r1
    d502:	10 92 bd 0b 	sts	0x0BBD, r1
		}
		game.scope_counter++;
    d506:	20 91 bd 0b 	lds	r18, 0x0BBD
    d50a:	30 91 be 0b 	lds	r19, 0x0BBE
    d50e:	2f 5f       	subi	r18, 0xFF	; 255
    d510:	3f 4f       	sbci	r19, 0xFF	; 255
    d512:	30 93 be 0b 	sts	0x0BBE, r19
    d516:	20 93 bd 0b 	sts	0x0BBD, r18
		
		// Update
		update_player(p1, &player1);
    d51a:	64 ee       	ldi	r22, 0xE4	; 228
    d51c:	7b e0       	ldi	r23, 0x0B	; 11
    d51e:	c8 01       	movw	r24, r16
    d520:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
		update_player(p2, &player2);
    d524:	63 e5       	ldi	r22, 0x53	; 83
    d526:	7f e0       	ldi	r23, 0x0F	; 15
    d528:	ce 01       	movw	r24, r28
    d52a:	0e 94 5a 67 	call	0xceb4	; 0xceb4 <update_player>
		resolve_scoring();
    d52e:	0e 94 b0 5c 	call	0xb960	; 0xb960 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d532:	60 e0       	ldi	r22, 0x00	; 0
    d534:	84 ee       	ldi	r24, 0xE4	; 228
    d536:	9b e0       	ldi	r25, 0x0B	; 11
    d538:	0e 94 38 57 	call	0xae70	; 0xae70 <collision_detect_player>
    d53c:	88 23       	and	r24, r24
    d53e:	41 f0       	breq	.+16     	; 0xd550 <update_level+0x3ce>
    d540:	2f e0       	ldi	r18, 0x0F	; 15
    d542:	40 e0       	ldi	r20, 0x00	; 0
    d544:	63 e5       	ldi	r22, 0x53	; 83
    d546:	7f e0       	ldi	r23, 0x0F	; 15
    d548:	84 ee       	ldi	r24, 0xE4	; 228
    d54a:	9b e0       	ldi	r25, 0x0B	; 11
    d54c:	0e 94 5c 56 	call	0xacb8	; 0xacb8 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d550:	6f e0       	ldi	r22, 0x0F	; 15
    d552:	83 e5       	ldi	r24, 0x53	; 83
    d554:	9f e0       	ldi	r25, 0x0F	; 15
    d556:	0e 94 38 57 	call	0xae70	; 0xae70 <collision_detect_player>
    d55a:	88 23       	and	r24, r24
    d55c:	41 f0       	breq	.+16     	; 0xd56e <update_level+0x3ec>
    d55e:	20 e0       	ldi	r18, 0x00	; 0
    d560:	4f e0       	ldi	r20, 0x0F	; 15
    d562:	64 ee       	ldi	r22, 0xE4	; 228
    d564:	7b e0       	ldi	r23, 0x0B	; 11
    d566:	83 e5       	ldi	r24, 0x53	; 83
    d568:	9f e0       	ldi	r25, 0x0F	; 15
    d56a:	0e 94 5c 56 	call	0xacb8	; 0xacb8 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d56e:	80 91 c5 0b 	lds	r24, 0x0BC5
    d572:	86 30       	cpi	r24, 0x06	; 6
    d574:	71 f5       	brne	.+92     	; 0xd5d2 <update_level+0x450>
	{
		game.demo_counter++;
    d576:	80 91 bb 0b 	lds	r24, 0x0BBB
    d57a:	90 91 bc 0b 	lds	r25, 0x0BBC
    d57e:	01 96       	adiw	r24, 0x01	; 1
    d580:	90 93 bc 0b 	sts	0x0BBC, r25
    d584:	80 93 bb 0b 	sts	0x0BBB, r24
		held = ReadJoypad(0);
    d588:	80 e0       	ldi	r24, 0x00	; 0
    d58a:	0e 94 02 3a 	call	0x7404	; 0x7404 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d58e:	80 e0       	ldi	r24, 0x00	; 0
    d590:	0e 94 02 3a 	call	0x7404	; 0x7404 <ReadJoypad>
    d594:	89 2b       	or	r24, r25
    d596:	89 f0       	breq	.+34     	; 0xd5ba <update_level+0x438>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    d598:	10 92 bc 0b 	sts	0x0BBC, r1
    d59c:	10 92 bb 0b 	sts	0x0BBB, r1
			fade_through();
    d5a0:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
			init_game_state();
    d5a4:	0e 94 1e 4f 	call	0x9e3c	; 0x9e3c <init_game_state>
			load_splash();
#endif
		}
	}
}
    d5a8:	df 91       	pop	r29
    d5aa:	cf 91       	pop	r28
    d5ac:	1f 91       	pop	r17
    d5ae:	0f 91       	pop	r16
    d5b0:	ff 90       	pop	r15
    d5b2:	ef 90       	pop	r14
    d5b4:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    d5b6:	0c 94 b9 5b 	jmp	0xb772	; 0xb772 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d5ba:	81 e0       	ldi	r24, 0x01	; 1
    d5bc:	0e 94 02 3a 	call	0x7404	; 0x7404 <ReadJoypad>
    d5c0:	89 2b       	or	r24, r25
    d5c2:	51 f7       	brne	.-44     	; 0xd598 <update_level+0x416>
    d5c4:	80 91 bb 0b 	lds	r24, 0x0BBB
    d5c8:	90 91 bc 0b 	lds	r25, 0x0BBC
    d5cc:	88 30       	cpi	r24, 0x08	; 8
    d5ce:	97 40       	sbci	r25, 0x07	; 7
    d5d0:	18 f7       	brcc	.-58     	; 0xd598 <update_level+0x416>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    d5d2:	df 91       	pop	r29
    d5d4:	cf 91       	pop	r28
    d5d6:	1f 91       	pop	r17
    d5d8:	0f 91       	pop	r16
    d5da:	ff 90       	pop	r15
    d5dc:	ef 90       	pop	r14
    d5de:	df 90       	pop	r13
    d5e0:	08 95       	ret

0000d5e2 <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code)
{
    d5e2:	34 2f       	mov	r19, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    d5e4:	20 91 c5 0b 	lds	r18, 0x0BC5
    d5e8:	22 30       	cpi	r18, 0x02	; 2
    d5ea:	41 f4       	brne	.+16     	; 0xd5fc <send_smart_net_message+0x1a>
    d5ec:	84 5e       	subi	r24, 0xE4	; 228
    d5ee:	9b 40       	sbci	r25, 0x0B	; 11
    d5f0:	51 f4       	brne	.+20     	; 0xd606 <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0);
    d5f2:	40 e0       	ldi	r20, 0x00	; 0
    d5f4:	60 e0       	ldi	r22, 0x00	; 0
    d5f6:	83 2f       	mov	r24, r19
    d5f8:	0c 94 14 65 	jmp	0xca28	; 0xca28 <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    d5fc:	23 30       	cpi	r18, 0x03	; 3
    d5fe:	19 f4       	brne	.+6      	; 0xd606 <send_smart_net_message+0x24>
    d600:	83 55       	subi	r24, 0x53	; 83
    d602:	9f 40       	sbci	r25, 0x0F	; 15
    d604:	b1 f3       	breq	.-20     	; 0xd5f2 <send_smart_net_message+0x10>
    d606:	08 95       	ret

0000d608 <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d608:	8f 92       	push	r8
    d60a:	9f 92       	push	r9
    d60c:	af 92       	push	r10
    d60e:	bf 92       	push	r11
    d610:	cf 92       	push	r12
    d612:	df 92       	push	r13
    d614:	ef 92       	push	r14
    d616:	ff 92       	push	r15
    d618:	0f 93       	push	r16
    d61a:	1f 93       	push	r17
    d61c:	cf 93       	push	r28
    d61e:	df 93       	push	r29
    d620:	ec 01       	movw	r28, r24
    d622:	8b 01       	movw	r16, r22
    d624:	7a 01       	movw	r14, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d626:	fb 01       	movw	r30, r22
    d628:	c0 80       	ld	r12, Z
    d62a:	d1 80       	ldd	r13, Z+1	; 0x01
    d62c:	46 01       	movw	r8, r12
    d62e:	f0 e1       	ldi	r31, 0x10	; 16
    d630:	8f 22       	and	r8, r31
    d632:	99 24       	eor	r9, r9
    d634:	c4 fe       	sbrs	r12, 4
    d636:	09 c0       	rjmp	.+18     	; 0xd64a <_handle_select_helper+0x42>
    d638:	8d 81       	ldd	r24, Y+5	; 0x05
    d63a:	81 11       	cpse	r24, r1
    d63c:	06 c0       	rjmp	.+12     	; 0xd64a <_handle_select_helper+0x42>
	{
		ps->handle_id--;
    d63e:	88 81       	ld	r24, Y
    d640:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d642:	87 ff       	sbrs	r24, 7
    d644:	10 c0       	rjmp	.+32     	; 0xd666 <_handle_select_helper+0x5e>
    d646:	18 82       	st	Y, r1
    d648:	90 c0       	rjmp	.+288    	; 0xd76a <_handle_select_helper+0x162>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d64a:	56 01       	movw	r10, r12
    d64c:	20 e2       	ldi	r18, 0x20	; 32
    d64e:	a2 22       	and	r10, r18
    d650:	bb 24       	eor	r11, r11
    d652:	c5 fe       	sbrs	r12, 5
    d654:	0a c0       	rjmp	.+20     	; 0xd66a <_handle_select_helper+0x62>
    d656:	8d 81       	ldd	r24, Y+5	; 0x05
    d658:	81 11       	cpse	r24, r1
    d65a:	07 c0       	rjmp	.+14     	; 0xd66a <_handle_select_helper+0x62>
	{
		ps->handle_id++;
    d65c:	88 81       	ld	r24, Y
    d65e:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d660:	89 30       	cpi	r24, 0x09	; 9
    d662:	0c f0       	brlt	.+2      	; 0xd666 <_handle_select_helper+0x5e>
    d664:	88 e0       	ldi	r24, 0x08	; 8
    d666:	88 83       	st	Y, r24
    d668:	80 c0       	rjmp	.+256    	; 0xd76a <_handle_select_helper+0x162>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    d66a:	c8 01       	movw	r24, r16
    d66c:	0e 94 03 5c 	call	0xb806	; 0xb806 <select_pressed>
    d670:	88 23       	and	r24, r24
    d672:	89 f0       	breq	.+34     	; 0xd696 <_handle_select_helper+0x8e>
    d674:	9d 81       	ldd	r25, Y+5	; 0x05
    d676:	91 11       	cpse	r25, r1
    d678:	0e c0       	rjmp	.+28     	; 0xd696 <_handle_select_helper+0x8e>
	{
		ps->select_state = EDITING;
    d67a:	81 e0       	ldi	r24, 0x01	; 1
    d67c:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d67e:	69 91       	ld	r22, Y+
    d680:	83 e0       	ldi	r24, 0x03	; 3
    d682:	68 02       	muls	r22, r24
    d684:	b0 01       	movw	r22, r0
    d686:	11 24       	eor	r1, r1
    d688:	6c 56       	subi	r22, 0x6C	; 108
    d68a:	74 4f       	sbci	r23, 0xF4	; 244
    d68c:	43 e0       	ldi	r20, 0x03	; 3
    d68e:	ce 01       	movw	r24, r28
    d690:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
    d694:	6a c0       	rjmp	.+212    	; 0xd76a <_handle_select_helper+0x162>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d696:	c7 fe       	sbrs	r12, 7
    d698:	09 c0       	rjmp	.+18     	; 0xd6ac <_handle_select_helper+0xa4>
    d69a:	9d 81       	ldd	r25, Y+5	; 0x05
    d69c:	91 30       	cpi	r25, 0x01	; 1
    d69e:	31 f4       	brne	.+12     	; 0xd6ac <_handle_select_helper+0xa4>
	{
		ps->char_index++;
    d6a0:	8c 81       	ldd	r24, Y+4	; 0x04
    d6a2:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d6a4:	83 30       	cpi	r24, 0x03	; 3
    d6a6:	5c f0       	brlt	.+22     	; 0xd6be <_handle_select_helper+0xb6>
    d6a8:	82 e0       	ldi	r24, 0x02	; 2
    d6aa:	09 c0       	rjmp	.+18     	; 0xd6be <_handle_select_helper+0xb6>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d6ac:	c6 fe       	sbrs	r12, 6
    d6ae:	0b c0       	rjmp	.+22     	; 0xd6c6 <_handle_select_helper+0xbe>
    d6b0:	9d 81       	ldd	r25, Y+5	; 0x05
    d6b2:	91 30       	cpi	r25, 0x01	; 1
    d6b4:	39 f5       	brne	.+78     	; 0xd704 <_handle_select_helper+0xfc>
	{
		ps->char_index--;
    d6b6:	8c 81       	ldd	r24, Y+4	; 0x04
    d6b8:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d6ba:	87 fd       	sbrc	r24, 7
    d6bc:	02 c0       	rjmp	.+4      	; 0xd6c2 <_handle_select_helper+0xba>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d6be:	8c 83       	std	Y+4, r24	; 0x04
    d6c0:	54 c0       	rjmp	.+168    	; 0xd76a <_handle_select_helper+0x162>
		if (ps->char_index < 0) ps->char_index = 0;
    d6c2:	1c 82       	std	Y+4, r1	; 0x04
    d6c4:	52 c0       	rjmp	.+164    	; 0xd76a <_handle_select_helper+0x162>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d6c6:	89 28       	or	r8, r9
    d6c8:	61 f0       	breq	.+24     	; 0xd6e2 <_handle_select_helper+0xda>
    d6ca:	8d 81       	ldd	r24, Y+5	; 0x05
    d6cc:	81 30       	cpi	r24, 0x01	; 1
    d6ce:	e9 f5       	brne	.+122    	; 0xd74a <_handle_select_helper+0x142>
	{
		ps->handle[(u8) ps->char_index]--;
    d6d0:	8c 81       	ldd	r24, Y+4	; 0x04
    d6d2:	c8 0f       	add	r28, r24
    d6d4:	d1 1d       	adc	r29, r1
    d6d6:	99 81       	ldd	r25, Y+1	; 0x01
    d6d8:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d6da:	91 34       	cpi	r25, 0x41	; 65
    d6dc:	70 f4       	brcc	.+28     	; 0xd6fa <_handle_select_helper+0xf2>
    d6de:	81 e4       	ldi	r24, 0x41	; 65
    d6e0:	0f c0       	rjmp	.+30     	; 0xd700 <_handle_select_helper+0xf8>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d6e2:	ab 28       	or	r10, r11
    d6e4:	89 f0       	breq	.+34     	; 0xd708 <_handle_select_helper+0x100>
    d6e6:	8d 81       	ldd	r24, Y+5	; 0x05
    d6e8:	81 30       	cpi	r24, 0x01	; 1
    d6ea:	79 f5       	brne	.+94     	; 0xd74a <_handle_select_helper+0x142>
	{
		ps->handle[(u8) ps->char_index]++;
    d6ec:	8c 81       	ldd	r24, Y+4	; 0x04
    d6ee:	c8 0f       	add	r28, r24
    d6f0:	d1 1d       	adc	r29, r1
    d6f2:	99 81       	ldd	r25, Y+1	; 0x01
    d6f4:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d6f6:	9b 35       	cpi	r25, 0x5B	; 91
    d6f8:	10 f4       	brcc	.+4      	; 0xd6fe <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d6fa:	99 83       	std	Y+1, r25	; 0x01
    d6fc:	36 c0       	rjmp	.+108    	; 0xd76a <_handle_select_helper+0x162>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d6fe:	8a e5       	ldi	r24, 0x5A	; 90
    d700:	89 83       	std	Y+1, r24	; 0x01
    d702:	33 c0       	rjmp	.+102    	; 0xd76a <_handle_select_helper+0x162>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d704:	ab 28       	or	r10, r11
    d706:	09 f5       	brne	.+66     	; 0xd74a <_handle_select_helper+0x142>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    d708:	88 23       	and	r24, r24
    d70a:	f9 f0       	breq	.+62     	; 0xd74a <_handle_select_helper+0x142>
    d70c:	8d 81       	ldd	r24, Y+5	; 0x05
    d70e:	81 30       	cpi	r24, 0x01	; 1
    d710:	e1 f4       	brne	.+56     	; 0xd74a <_handle_select_helper+0x142>
	{
		player->handle_id = ps->handle_id;
    d712:	fe 01       	movw	r30, r28
    d714:	81 91       	ld	r24, Z+
    d716:	6f 01       	movw	r12, r30
    d718:	f7 01       	movw	r30, r14
    d71a:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d71c:	43 e0       	ldi	r20, 0x03	; 3
    d71e:	b6 01       	movw	r22, r12
    d720:	c7 01       	movw	r24, r14
    d722:	0c 96       	adiw	r24, 0x0c	; 12
    d724:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d728:	88 81       	ld	r24, Y
    d72a:	f3 e0       	ldi	r31, 0x03	; 3
    d72c:	8f 02       	muls	r24, r31
    d72e:	c0 01       	movw	r24, r0
    d730:	11 24       	eor	r1, r1
    d732:	43 e0       	ldi	r20, 0x03	; 3
    d734:	b6 01       	movw	r22, r12
    d736:	8c 56       	subi	r24, 0x6C	; 108
    d738:	94 4f       	sbci	r25, 0xF4	; 244
    d73a:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d73e:	82 e9       	ldi	r24, 0x92	; 146
    d740:	9b e0       	ldi	r25, 0x0B	; 11
    d742:	0e 94 53 3b 	call	0x76a6	; 0x76a6 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d746:	82 e0       	ldi	r24, 0x02	; 2
    d748:	0a c0       	rjmp	.+20     	; 0xd75e <_handle_select_helper+0x156>
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d74a:	d1 fe       	sbrs	r13, 1
    d74c:	1f c0       	rjmp	.+62     	; 0xd78c <_handle_select_helper+0x184>
    d74e:	8d 81       	ldd	r24, Y+5	; 0x05
    d750:	81 30       	cpi	r24, 0x01	; 1
    d752:	11 f4       	brne	.+4      	; 0xd758 <_handle_select_helper+0x150>
	{
		ps->select_state = SELECTING;
    d754:	1d 82       	std	Y+5, r1	; 0x05
    d756:	09 c0       	rjmp	.+18     	; 0xd76a <_handle_select_helper+0x162>
		SFX_NAVIGATE;
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d758:	82 30       	cpi	r24, 0x02	; 2
    d75a:	19 f4       	brne	.+6      	; 0xd762 <_handle_select_helper+0x15a>
	{
		ps->select_state = EDITING;
    d75c:	81 e0       	ldi	r24, 0x01	; 1
    d75e:	8d 83       	std	Y+5, r24	; 0x05
    d760:	04 c0       	rjmp	.+8      	; 0xd76a <_handle_select_helper+0x162>
		send_smart_net_message(player, p, NETHANDLESELECT);
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
    d762:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <fade_through>
		load_splash();
    d766:	0e 94 b9 5b 	call	0xb772	; 0xb772 <load_splash>
		send_smart_net_message(player, p, NETHANDLESELECT);
    d76a:	4a e0       	ldi	r20, 0x0A	; 10
    d76c:	b8 01       	movw	r22, r16
    d76e:	c7 01       	movw	r24, r14
	}
#endif
}
    d770:	df 91       	pop	r29
    d772:	cf 91       	pop	r28
    d774:	1f 91       	pop	r17
    d776:	0f 91       	pop	r16
    d778:	ff 90       	pop	r15
    d77a:	ef 90       	pop	r14
    d77c:	df 90       	pop	r13
    d77e:	cf 90       	pop	r12
    d780:	bf 90       	pop	r11
    d782:	af 90       	pop	r10
    d784:	9f 90       	pop	r9
    d786:	8f 90       	pop	r8
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
		send_smart_net_message(player, p, NETHANDLESELECT);
    d788:	0c 94 f1 6a 	jmp	0xd5e2	; 0xd5e2 <send_smart_net_message>
	}
#endif
}
    d78c:	df 91       	pop	r29
    d78e:	cf 91       	pop	r28
    d790:	1f 91       	pop	r17
    d792:	0f 91       	pop	r16
    d794:	ff 90       	pop	r15
    d796:	ef 90       	pop	r14
    d798:	df 90       	pop	r13
    d79a:	cf 90       	pop	r12
    d79c:	bf 90       	pop	r11
    d79e:	af 90       	pop	r10
    d7a0:	9f 90       	pop	r9
    d7a2:	8f 90       	pop	r8
    d7a4:	08 95       	ret

0000d7a6 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d7a6:	0f 93       	push	r16
    d7a8:	1f 93       	push	r17
    d7aa:	cf 93       	push	r28
    d7ac:	df 93       	push	r29
    d7ae:	ec 01       	movw	r28, r24
    d7b0:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d7b2:	26 e0       	ldi	r18, 0x06	; 6
    d7b4:	42 e0       	ldi	r20, 0x02	; 2
    d7b6:	bc 01       	movw	r22, r24
    d7b8:	82 e6       	ldi	r24, 0x62	; 98
    d7ba:	9a e0       	ldi	r25, 0x0A	; 10
    d7bc:	0e 94 bc 5d 	call	0xbb78	; 0xbb78 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    d7c0:	80 91 c5 0b 	lds	r24, 0x0BC5
    d7c4:	88 23       	and	r24, r24
    d7c6:	49 f0       	breq	.+18     	; 0xd7da <update_handle_select+0x34>
    d7c8:	86 30       	cpi	r24, 0x06	; 6
    d7ca:	39 f0       	breq	.+14     	; 0xd7da <update_handle_select+0x34>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d7cc:	28 e0       	ldi	r18, 0x08	; 8
    d7ce:	43 e1       	ldi	r20, 0x13	; 19
    d7d0:	b8 01       	movw	r22, r16
    d7d2:	8c e5       	ldi	r24, 0x5C	; 92
    d7d4:	9a e0       	ldi	r25, 0x0A	; 10
    d7d6:	0e 94 bc 5d 	call	0xbb78	; 0xbb78 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d7da:	44 ee       	ldi	r20, 0xE4	; 228
    d7dc:	5b e0       	ldi	r21, 0x0B	; 11
    d7de:	be 01       	movw	r22, r28
    d7e0:	82 e6       	ldi	r24, 0x62	; 98
    d7e2:	9a e0       	ldi	r25, 0x0A	; 10
    d7e4:	0e 94 04 6b 	call	0xd608	; 0xd608 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d7e8:	c1 e0       	ldi	r28, 0x01	; 1
    d7ea:	80 91 67 0a 	lds	r24, 0x0A67
    d7ee:	82 30       	cpi	r24, 0x02	; 2
    d7f0:	09 f0       	breq	.+2      	; 0xd7f4 <update_handle_select+0x4e>
    d7f2:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    d7f4:	80 91 c5 0b 	lds	r24, 0x0BC5
    d7f8:	88 23       	and	r24, r24
    d7fa:	21 f1       	breq	.+72     	; 0xd844 <update_handle_select+0x9e>
    d7fc:	86 30       	cpi	r24, 0x06	; 6
    d7fe:	29 f1       	breq	.+74     	; 0xd84a <update_handle_select+0xa4>
	{
		_handle_select_helper(&p2s, p2, &player2);
    d800:	43 e5       	ldi	r20, 0x53	; 83
    d802:	5f e0       	ldi	r21, 0x0F	; 15
    d804:	b8 01       	movw	r22, r16
    d806:	8c e5       	ldi	r24, 0x5C	; 92
    d808:	9a e0       	ldi	r25, 0x0A	; 10
    d80a:	0e 94 04 6b 	call	0xd608	; 0xd608 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d80e:	80 91 61 0a 	lds	r24, 0x0A61
    d812:	82 30       	cpi	r24, 0x02	; 2
    d814:	e1 f4       	brne	.+56     	; 0xd84e <update_handle_select+0xa8>
	}
	if (start_game)
    d816:	cc 23       	and	r28, r28
    d818:	d1 f0       	breq	.+52     	; 0xd84e <update_handle_select+0xa8>
	{
		if (game.selection == PVCPU)
    d81a:	80 91 c5 0b 	lds	r24, 0x0BC5
    d81e:	81 11       	cpse	r24, r1
    d820:	0a c0       	rjmp	.+20     	; 0xd836 <update_handle_select+0x90>
		{
			player2.handle_id = 9;
    d822:	89 e0       	ldi	r24, 0x09	; 9
    d824:	80 93 5e 0f 	sts	0x0F5E, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d828:	43 e0       	ldi	r20, 0x03	; 3
    d82a:	6f ea       	ldi	r22, 0xAF	; 175
    d82c:	7b e0       	ldi	r23, 0x0B	; 11
    d82e:	8f e5       	ldi	r24, 0x5F	; 95
    d830:	9f e0       	ldi	r25, 0x0F	; 15
    d832:	0e 94 48 4c 	call	0x9890	; 0x9890 <LBCopyChars>
		}
		level_transition(0);
    d836:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    d838:	df 91       	pop	r29
    d83a:	cf 91       	pop	r28
    d83c:	1f 91       	pop	r17
    d83e:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    d840:	0c 94 e3 59 	jmp	0xb3c6	; 0xb3c6 <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d844:	c1 11       	cpse	r28, r1
    d846:	ed cf       	rjmp	.-38     	; 0xd822 <update_handle_select+0x7c>
    d848:	02 c0       	rjmp	.+4      	; 0xd84e <update_handle_select+0xa8>
    d84a:	c1 11       	cpse	r28, r1
    d84c:	f4 cf       	rjmp	.-24     	; 0xd836 <update_handle_select+0x90>
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    d84e:	df 91       	pop	r29
    d850:	cf 91       	pop	r28
    d852:	1f 91       	pop	r17
    d854:	0f 91       	pop	r16
    d856:	08 95       	ret

0000d858 <get_net_message>:
	netMessage.zero = 0;
	sendNetMessage(&netMessage);
}

void get_net_message()
{
    d858:	0f 93       	push	r16
    d85a:	1f 93       	push	r17
    d85c:	cf 93       	push	r28
    d85e:	df 93       	push	r29
	Player* player = &player2;
	Player* otherPlayer = &player1;
	if (wifi_status != WIFI_OK) return;
    d860:	80 91 e3 0b 	lds	r24, 0x0BE3
    d864:	81 11       	cpse	r24, r1
    d866:	5d c0       	rjmp	.+186    	; 0xd922 <get_net_message+0xca>
	
	netMessage.code = NETNODATA;
    d868:	8c e0       	ldi	r24, 0x0C	; 12
    d86a:	80 93 e8 0f 	sts	0x0FE8, r24
	if (game.selection == JOINNETGAME)
    d86e:	80 91 c5 0b 	lds	r24, 0x0BC5
    d872:	83 30       	cpi	r24, 0x03	; 3
    d874:	29 f4       	brne	.+10     	; 0xd880 <get_net_message+0x28>
	{
		player = &player1;
		otherPlayer = &player2;
    d876:	c3 e5       	ldi	r28, 0x53	; 83
    d878:	df e0       	ldi	r29, 0x0F	; 15
	if (wifi_status != WIFI_OK) return;
	
	netMessage.code = NETNODATA;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    d87a:	04 ee       	ldi	r16, 0xE4	; 228
    d87c:	1b e0       	ldi	r17, 0x0B	; 11
    d87e:	04 c0       	rjmp	.+8      	; 0xd888 <get_net_message+0x30>
}

void get_net_message()
{
	Player* player = &player2;
	Player* otherPlayer = &player1;
    d880:	c4 ee       	ldi	r28, 0xE4	; 228
    d882:	db e0       	ldi	r29, 0x0B	; 11
	sendNetMessage(&netMessage);
}

void get_net_message()
{
	Player* player = &player2;
    d884:	03 e5       	ldi	r16, 0x53	; 83
    d886:	1f e0       	ldi	r17, 0x0F	; 15
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		otherPlayer = &player2;
	}
	if (getNetMessage(&netMessage) != WIFI_NODATA)
    d888:	88 ee       	ldi	r24, 0xE8	; 232
    d88a:	9f e0       	ldi	r25, 0x0F	; 15
    d88c:	0e 94 76 4a 	call	0x94ec	; 0x94ec <getNetMessage>
    d890:	82 30       	cpi	r24, 0x02	; 2
    d892:	09 f4       	brne	.+2      	; 0xd896 <get_net_message+0x3e>
    d894:	46 c0       	rjmp	.+140    	; 0xd922 <get_net_message+0xca>
	{
		otherPlayer->score = netMessage.score;
    d896:	80 91 ed 0f 	lds	r24, 0x0FED
    d89a:	8f 87       	std	Y+15, r24	; 0x0f
		otherPlayer->level_score = netMessage.score;
    d89c:	88 8b       	std	Y+16, r24	; 0x10
		player->shared.x = netMessage.pos_x;
    d89e:	80 91 f0 0f 	lds	r24, 0x0FF0
    d8a2:	90 91 f1 0f 	lds	r25, 0x0FF1
    d8a6:	a0 91 f2 0f 	lds	r26, 0x0FF2
    d8aa:	b0 91 f3 0f 	lds	r27, 0x0FF3
    d8ae:	f8 01       	movw	r30, r16
    d8b0:	83 83       	std	Z+3, r24	; 0x03
    d8b2:	94 83       	std	Z+4, r25	; 0x04
    d8b4:	a5 83       	std	Z+5, r26	; 0x05
    d8b6:	b6 83       	std	Z+6, r27	; 0x06
		player->shared.y = netMessage.pos_y;
    d8b8:	80 91 f4 0f 	lds	r24, 0x0FF4
    d8bc:	90 91 f5 0f 	lds	r25, 0x0FF5
    d8c0:	a0 91 f6 0f 	lds	r26, 0x0FF6
    d8c4:	b0 91 f7 0f 	lds	r27, 0x0FF7
    d8c8:	87 83       	std	Z+7, r24	; 0x07
    d8ca:	90 87       	std	Z+8, r25	; 0x08
    d8cc:	a1 87       	std	Z+9, r26	; 0x09
    d8ce:	b2 87       	std	Z+10, r27	; 0x0a
		
		// Act on message code
		if (netMessage.code == NETPAUSETOGGLE)
    d8d0:	80 91 e8 0f 	lds	r24, 0x0FE8
    d8d4:	88 30       	cpi	r24, 0x08	; 8
    d8d6:	69 f4       	brne	.+26     	; 0xd8f2 <get_net_message+0x9a>
		{
			SFX_NAVIGATE;
			game.paused = game.paused ^ 1;
    d8d8:	90 91 b4 0b 	lds	r25, 0x0BB4
    d8dc:	81 e0       	ldi	r24, 0x01	; 1
    d8de:	89 27       	eor	r24, r25
    d8e0:	80 93 b4 0b 	sts	0x0BB4, r24
			load_level_tiles(false);
    d8e4:	80 e0       	ldi	r24, 0x00	; 0
			otherPlayer->active_shots--;
			kill_player(player, netMessage.hud_x);
			SFX_TANK_EXPLODE;
		}
	}
}
    d8e6:	df 91       	pop	r29
    d8e8:	cf 91       	pop	r28
    d8ea:	1f 91       	pop	r17
    d8ec:	0f 91       	pop	r16
		// Act on message code
		if (netMessage.code == NETPAUSETOGGLE)
		{
			SFX_NAVIGATE;
			game.paused = game.paused ^ 1;
			load_level_tiles(false);
    d8ee:	0c 94 ba 58 	jmp	0xb174	; 0xb174 <load_level_tiles>
		}
		else if (netMessage.code == NETHIT)
    d8f2:	81 11       	cpse	r24, r1
    d8f4:	16 c0       	rjmp	.+44     	; 0xd922 <get_net_message+0xca>
		{
			render_score(otherPlayer, netMessage.hud_x);
    d8f6:	60 91 ef 0f 	lds	r22, 0x0FEF
    d8fa:	ce 01       	movw	r24, r28
    d8fc:	0e 94 5f 51 	call	0xa2be	; 0xa2be <render_score>
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    d900:	68 ad       	ldd	r22, Y+56	; 0x38
    d902:	ce 01       	movw	r24, r28
    d904:	8d 96       	adiw	r24, 0x2d	; 45
    d906:	0e 94 24 4e 	call	0x9c48	; 0x9c48 <init_shot_state>
			otherPlayer->active_shots--;
    d90a:	89 89       	ldd	r24, Y+17	; 0x11
    d90c:	81 50       	subi	r24, 0x01	; 1
    d90e:	89 8b       	std	Y+17, r24	; 0x11
			kill_player(player, netMessage.hud_x);
    d910:	60 91 ef 0f 	lds	r22, 0x0FEF
    d914:	c8 01       	movw	r24, r16
			SFX_TANK_EXPLODE;
		}
	}
}
    d916:	df 91       	pop	r29
    d918:	cf 91       	pop	r28
    d91a:	1f 91       	pop	r17
    d91c:	0f 91       	pop	r16
		else if (netMessage.code == NETHIT)
		{
			render_score(otherPlayer, netMessage.hud_x);
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
			otherPlayer->active_shots--;
			kill_player(player, netMessage.hud_x);
    d91e:	0c 94 53 55 	jmp	0xaaa6	; 0xaaa6 <kill_player>
			SFX_TANK_EXPLODE;
		}
	}
}
    d922:	df 91       	pop	r29
    d924:	cf 91       	pop	r28
    d926:	1f 91       	pop	r17
    d928:	0f 91       	pop	r16
    d92a:	08 95       	ret

0000d92c <main>:

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    d92c:	0e 94 50 3a 	call	0x74a0	; 0x74a0 <GetTrueRandomSeed>
    d930:	0e 94 0b 3c 	call	0x7816	; 0x7816 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    d934:	87 e7       	ldi	r24, 0x77	; 119
    d936:	95 e0       	ldi	r25, 0x05	; 5
    d938:	0e 94 e5 3c 	call	0x79ca	; 0x79ca <InitMusicPlayer>
	SetMasterVolume(0xff);
    d93c:	8f ef       	ldi	r24, 0xFF	; 255
    d93e:	0e 94 eb 3f 	call	0x7fd6	; 0x7fd6 <SetMasterVolume>
	SetTileTable(tiles_data);
    d942:	8c ea       	ldi	r24, 0xAC	; 172
    d944:	90 e3       	ldi	r25, 0x30	; 48
    d946:	0e 94 e9 39 	call	0x73d2	; 0x73d2 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    d94a:	8b e1       	ldi	r24, 0x1B	; 27
    d94c:	97 e2       	ldi	r25, 0x27	; 39
    d94e:	0e 94 c5 39 	call	0x738a	; 0x738a <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    d952:	8b e9       	ldi	r24, 0x9B	; 155
    d954:	0e 94 e6 39 	call	0x73cc	; 0x73cc <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    d958:	60 e0       	ldi	r22, 0x00	; 0
    d95a:	83 e0       	ldi	r24, 0x03	; 3
    d95c:	0e 94 af 48 	call	0x915e	; 0x915e <FadeIn>
	ClearVram();
    d960:	0e 94 ca 39 	call	0x7394	; 0x7394 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    d964:	82 e6       	ldi	r24, 0x62	; 98
    d966:	9b e0       	ldi	r25, 0x0B	; 11
    d968:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <init_scores>
	init_handles(&handles);
    d96c:	82 e9       	ldi	r24, 0x92	; 146
    d96e:	9b e0       	ldi	r25, 0x0B	; 11
    d970:	0e 94 c5 4d 	call	0x9b8a	; 0x9b8a <init_handles>
	init_game_state();
    d974:	0e 94 1e 4f 	call	0x9e3c	; 0x9e3c <init_game_state>
	load_credits();
    d978:	0e 94 02 65 	call	0xca04	; 0xca04 <load_credits>
	load_splash();
    d97c:	0e 94 b9 5b 	call	0xb772	; 0xb772 <load_splash>
	
	while (1)
	{
		waitForVSync();
    d980:	0e 94 6d 4f 	call	0x9eda	; 0x9eda <waitForVSync>
		get_net_message();
    d984:	0e 94 2c 6c 	call	0xd858	; 0xd858 <get_net_message>
		switch (game.current_screen)
    d988:	80 91 b2 0b 	lds	r24, 0x0BB2
    d98c:	82 30       	cpi	r24, 0x02	; 2
    d98e:	71 f1       	breq	.+92     	; 0xd9ec <main+0xc0>
    d990:	78 f4       	brcc	.+30     	; 0xd9b0 <main+0x84>
    d992:	88 23       	and	r24, r24
    d994:	f9 f0       	breq	.+62     	; 0xd9d4 <main+0xa8>
    d996:	81 30       	cpi	r24, 0x01	; 1
    d998:	09 f0       	breq	.+2      	; 0xd99c <main+0x70>
    d99a:	a6 c0       	rjmp	.+332    	; 0xdae8 <main+0x1bc>
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
				update_splash(&p1, &p2);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    d99c:	60 e0       	ldi	r22, 0x00	; 0
    d99e:	8d e5       	ldi	r24, 0x5D	; 93
    d9a0:	9c e0       	ldi	r25, 0x0C	; 12
    d9a2:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				update_tank_rank(&p1);
    d9a6:	8d e5       	ldi	r24, 0x5D	; 93
    d9a8:	9c e0       	ldi	r25, 0x0C	; 12
    d9aa:	0e 94 75 5d 	call	0xbaea	; 0xbaea <update_tank_rank>
				break;
    d9ae:	9c c0       	rjmp	.+312    	; 0xdae8 <main+0x1bc>
	
	while (1)
	{
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
    d9b0:	84 30       	cpi	r24, 0x04	; 4
    d9b2:	09 f4       	brne	.+2      	; 0xd9b6 <main+0x8a>
    d9b4:	48 c0       	rjmp	.+144    	; 0xda46 <main+0x11a>
    d9b6:	08 f4       	brcc	.+2      	; 0xd9ba <main+0x8e>
    d9b8:	50 c0       	rjmp	.+160    	; 0xda5a <main+0x12e>
    d9ba:	85 30       	cpi	r24, 0x05	; 5
    d9bc:	09 f0       	breq	.+2      	; 0xd9c0 <main+0x94>
    d9be:	94 c0       	rjmp	.+296    	; 0xdae8 <main+0x1bc>
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
				update_host_net_game(&p1);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    d9c0:	60 e0       	ldi	r22, 0x00	; 0
    d9c2:	8d e5       	ldi	r24, 0x5D	; 93
    d9c4:	9c e0       	ldi	r25, 0x0C	; 12
    d9c6:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				update_join_net_game(&p1);
    d9ca:	8d e5       	ldi	r24, 0x5D	; 93
    d9cc:	9c e0       	ldi	r25, 0x0C	; 12
    d9ce:	0e 94 8c 60 	call	0xc118	; 0xc118 <update_join_net_game>
				break;
    d9d2:	8a c0       	rjmp	.+276    	; 0xdae8 <main+0x1bc>
		waitForVSync();
		get_net_message();
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    d9d4:	60 e0       	ldi	r22, 0x00	; 0
    d9d6:	8d e5       	ldi	r24, 0x5D	; 93
    d9d8:	9c e0       	ldi	r25, 0x0C	; 12
    d9da:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				update_splash(&p1, &p2);
    d9de:	62 e8       	ldi	r22, 0x82	; 130
    d9e0:	7b e0       	ldi	r23, 0x0B	; 11
    d9e2:	8d e5       	ldi	r24, 0x5D	; 93
    d9e4:	9c e0       	ldi	r25, 0x0C	; 12
    d9e6:	0e 94 8e 5f 	call	0xbf1c	; 0xbf1c <update_splash>
				break;
    d9ea:	7e c0       	rjmp	.+252    	; 0xdae8 <main+0x1bc>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
				update_tank_rank(&p1);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    d9ec:	80 91 c5 0b 	lds	r24, 0x0BC5
    d9f0:	82 30       	cpi	r24, 0x02	; 2
    d9f2:	69 f4       	brne	.+26     	; 0xda0e <main+0xe2>
				{
					LBGetJoyPadState(&p1, 0);
    d9f4:	60 e0       	ldi	r22, 0x00	; 0
    d9f6:	8d e5       	ldi	r24, 0x5D	; 93
    d9f8:	9c e0       	ldi	r25, 0x0C	; 12
    d9fa:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
    d9fe:	48 ee       	ldi	r20, 0xE8	; 232
    da00:	5f e0       	ldi	r21, 0x0F	; 15
    da02:	61 e0       	ldi	r22, 0x01	; 1
    da04:	82 e8       	ldi	r24, 0x82	; 130
    da06:	9b e0       	ldi	r25, 0x0B	; 11
    da08:	0e 94 08 4c 	call	0x9810	; 0x9810 <LBGetJoyPadStateNet>
    da0c:	15 c0       	rjmp	.+42     	; 0xda38 <main+0x10c>
				}
				else if (game.selection == JOINNETGAME)
    da0e:	83 30       	cpi	r24, 0x03	; 3
    da10:	49 f4       	brne	.+18     	; 0xda24 <main+0xf8>
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
    da12:	48 ee       	ldi	r20, 0xE8	; 232
    da14:	5f e0       	ldi	r21, 0x0F	; 15
    da16:	61 e0       	ldi	r22, 0x01	; 1
    da18:	8d e5       	ldi	r24, 0x5D	; 93
    da1a:	9c e0       	ldi	r25, 0x0C	; 12
    da1c:	0e 94 08 4c 	call	0x9810	; 0x9810 <LBGetJoyPadStateNet>
					LBGetJoyPadState(&p2, 0);
    da20:	60 e0       	ldi	r22, 0x00	; 0
    da22:	06 c0       	rjmp	.+12     	; 0xda30 <main+0x104>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    da24:	60 e0       	ldi	r22, 0x00	; 0
    da26:	8d e5       	ldi	r24, 0x5D	; 93
    da28:	9c e0       	ldi	r25, 0x0C	; 12
    da2a:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    da2e:	61 e0       	ldi	r22, 0x01	; 1
    da30:	82 e8       	ldi	r24, 0x82	; 130
    da32:	9b e0       	ldi	r25, 0x0B	; 11
    da34:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				}
				update_handle_select(&p1, &p2);
    da38:	62 e8       	ldi	r22, 0x82	; 130
    da3a:	7b e0       	ldi	r23, 0x0B	; 11
    da3c:	8d e5       	ldi	r24, 0x5D	; 93
    da3e:	9c e0       	ldi	r25, 0x0C	; 12
    da40:	0e 94 d3 6b 	call	0xd7a6	; 0xd7a6 <update_handle_select>
				break;
    da44:	51 c0       	rjmp	.+162    	; 0xdae8 <main+0x1bc>
			case HOST_NET_GAME:
				LBGetJoyPadState(&p1, 0);
    da46:	60 e0       	ldi	r22, 0x00	; 0
    da48:	8d e5       	ldi	r24, 0x5D	; 93
    da4a:	9c e0       	ldi	r25, 0x0C	; 12
    da4c:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				update_host_net_game(&p1);
    da50:	8d e5       	ldi	r24, 0x5D	; 93
    da52:	9c e0       	ldi	r25, 0x0C	; 12
    da54:	0e 94 3f 5f 	call	0xbe7e	; 0xbe7e <update_host_net_game>
				break;
    da58:	47 c0       	rjmp	.+142    	; 0xdae8 <main+0x1bc>
			case JOIN_NET_GAME:
				LBGetJoyPadState(&p1, 0);
				update_join_net_game(&p1);
				break;
			case LEVEL:
				if (game.selection == PVCPU)
    da5a:	80 91 c5 0b 	lds	r24, 0x0BC5
    da5e:	81 11       	cpse	r24, r1
    da60:	06 c0       	rjmp	.+12     	; 0xda6e <main+0x142>
				{
					LBGetJoyPadState(&p1, 0);
    da62:	60 e0       	ldi	r22, 0x00	; 0
    da64:	8d e5       	ldi	r24, 0x5D	; 93
    da66:	9c e0       	ldi	r25, 0x0C	; 12
    da68:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
    da6c:	0a c0       	rjmp	.+20     	; 0xda82 <main+0x156>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    da6e:	86 30       	cpi	r24, 0x06	; 6
    da70:	89 f4       	brne	.+34     	; 0xda94 <main+0x168>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    da72:	4d e5       	ldi	r20, 0x5D	; 93
    da74:	5c e0       	ldi	r21, 0x0C	; 12
    da76:	63 e5       	ldi	r22, 0x53	; 83
    da78:	7f e0       	ldi	r23, 0x0F	; 15
    da7a:	84 ee       	ldi	r24, 0xE4	; 228
    da7c:	9b e0       	ldi	r25, 0x0B	; 11
    da7e:	0e 94 0e 62 	call	0xc41c	; 0xc41c <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    da82:	42 e8       	ldi	r20, 0x82	; 130
    da84:	5b e0       	ldi	r21, 0x0B	; 11
    da86:	64 ee       	ldi	r22, 0xE4	; 228
    da88:	7b e0       	ldi	r23, 0x0B	; 11
    da8a:	83 e5       	ldi	r24, 0x53	; 83
    da8c:	9f e0       	ldi	r25, 0x0F	; 15
    da8e:	0e 94 0e 62 	call	0xc41c	; 0xc41c <get_cpu_joypad_state>
    da92:	24 c0       	rjmp	.+72     	; 0xdadc <main+0x1b0>
				}
				else if (game.selection == HOSTNETGAME)
    da94:	82 30       	cpi	r24, 0x02	; 2
    da96:	69 f4       	brne	.+26     	; 0xdab2 <main+0x186>
				{
					LBGetJoyPadState(&p1, 0);
    da98:	60 e0       	ldi	r22, 0x00	; 0
    da9a:	8d e5       	ldi	r24, 0x5D	; 93
    da9c:	9c e0       	ldi	r25, 0x0C	; 12
    da9e:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
					LBGetJoyPadStateNet(&p2, 1, &netMessage);
    daa2:	48 ee       	ldi	r20, 0xE8	; 232
    daa4:	5f e0       	ldi	r21, 0x0F	; 15
    daa6:	61 e0       	ldi	r22, 0x01	; 1
    daa8:	82 e8       	ldi	r24, 0x82	; 130
    daaa:	9b e0       	ldi	r25, 0x0B	; 11
    daac:	0e 94 08 4c 	call	0x9810	; 0x9810 <LBGetJoyPadStateNet>
    dab0:	15 c0       	rjmp	.+42     	; 0xdadc <main+0x1b0>
				}
				else if (game.selection == JOINNETGAME)
    dab2:	83 30       	cpi	r24, 0x03	; 3
    dab4:	49 f4       	brne	.+18     	; 0xdac8 <main+0x19c>
				{
					LBGetJoyPadStateNet(&p1, 1, &netMessage);
    dab6:	48 ee       	ldi	r20, 0xE8	; 232
    dab8:	5f e0       	ldi	r21, 0x0F	; 15
    daba:	61 e0       	ldi	r22, 0x01	; 1
    dabc:	8d e5       	ldi	r24, 0x5D	; 93
    dabe:	9c e0       	ldi	r25, 0x0C	; 12
    dac0:	0e 94 08 4c 	call	0x9810	; 0x9810 <LBGetJoyPadStateNet>
					LBGetJoyPadState(&p2, 0);
    dac4:	60 e0       	ldi	r22, 0x00	; 0
    dac6:	06 c0       	rjmp	.+12     	; 0xdad4 <main+0x1a8>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    dac8:	60 e0       	ldi	r22, 0x00	; 0
    daca:	8d e5       	ldi	r24, 0x5D	; 93
    dacc:	9c e0       	ldi	r25, 0x0C	; 12
    dace:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    dad2:	61 e0       	ldi	r22, 0x01	; 1
    dad4:	82 e8       	ldi	r24, 0x82	; 130
    dad6:	9b e0       	ldi	r25, 0x0B	; 11
    dad8:	0e 94 bd 4b 	call	0x977a	; 0x977a <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    dadc:	62 e8       	ldi	r22, 0x82	; 130
    dade:	7b e0       	ldi	r23, 0x0B	; 11
    dae0:	8d e5       	ldi	r24, 0x5D	; 93
    dae2:	9c e0       	ldi	r25, 0x0C	; 12
    dae4:	0e 94 c1 68 	call	0xd182	; 0xd182 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    dae8:	80 91 01 01 	lds	r24, 0x0101
    daec:	90 91 02 01 	lds	r25, 0x0102
    daf0:	01 96       	adiw	r24, 0x01	; 1
    daf2:	90 93 02 01 	sts	0x0102, r25
    daf6:	80 93 01 01 	sts	0x0101, r24
	}
    dafa:	42 cf       	rjmp	.-380    	; 0xd980 <main+0x54>

0000dafc <__udivmodqi4>:
    dafc:	99 1b       	sub	r25, r25
    dafe:	79 e0       	ldi	r23, 0x09	; 9
    db00:	04 c0       	rjmp	.+8      	; 0xdb0a <__udivmodqi4_ep>

0000db02 <__udivmodqi4_loop>:
    db02:	99 1f       	adc	r25, r25
    db04:	96 17       	cp	r25, r22
    db06:	08 f0       	brcs	.+2      	; 0xdb0a <__udivmodqi4_ep>
    db08:	96 1b       	sub	r25, r22

0000db0a <__udivmodqi4_ep>:
    db0a:	88 1f       	adc	r24, r24
    db0c:	7a 95       	dec	r23
    db0e:	c9 f7       	brne	.-14     	; 0xdb02 <__udivmodqi4_loop>
    db10:	80 95       	com	r24
    db12:	08 95       	ret

0000db14 <__divmodqi4>:
    db14:	87 fb       	bst	r24, 7
    db16:	08 2e       	mov	r0, r24
    db18:	06 26       	eor	r0, r22
    db1a:	87 fd       	sbrc	r24, 7
    db1c:	81 95       	neg	r24
    db1e:	67 fd       	sbrc	r22, 7
    db20:	61 95       	neg	r22
    db22:	0e 94 7e 6d 	call	0xdafc	; 0xdafc <__udivmodqi4>
    db26:	0e f4       	brtc	.+2      	; 0xdb2a <__divmodqi4_1>
    db28:	91 95       	neg	r25

0000db2a <__divmodqi4_1>:
    db2a:	07 fc       	sbrc	r0, 7
    db2c:	81 95       	neg	r24

0000db2e <__divmodqi4_exit>:
    db2e:	08 95       	ret

0000db30 <__udivmodhi4>:
    db30:	aa 1b       	sub	r26, r26
    db32:	bb 1b       	sub	r27, r27
    db34:	51 e1       	ldi	r21, 0x11	; 17
    db36:	07 c0       	rjmp	.+14     	; 0xdb46 <__udivmodhi4_ep>

0000db38 <__udivmodhi4_loop>:
    db38:	aa 1f       	adc	r26, r26
    db3a:	bb 1f       	adc	r27, r27
    db3c:	a6 17       	cp	r26, r22
    db3e:	b7 07       	cpc	r27, r23
    db40:	10 f0       	brcs	.+4      	; 0xdb46 <__udivmodhi4_ep>
    db42:	a6 1b       	sub	r26, r22
    db44:	b7 0b       	sbc	r27, r23

0000db46 <__udivmodhi4_ep>:
    db46:	88 1f       	adc	r24, r24
    db48:	99 1f       	adc	r25, r25
    db4a:	5a 95       	dec	r21
    db4c:	a9 f7       	brne	.-22     	; 0xdb38 <__udivmodhi4_loop>
    db4e:	80 95       	com	r24
    db50:	90 95       	com	r25
    db52:	bc 01       	movw	r22, r24
    db54:	cd 01       	movw	r24, r26
    db56:	08 95       	ret

0000db58 <__divmodhi4>:
    db58:	97 fb       	bst	r25, 7
    db5a:	07 2e       	mov	r0, r23
    db5c:	16 f4       	brtc	.+4      	; 0xdb62 <__divmodhi4+0xa>
    db5e:	00 94       	com	r0
    db60:	07 d0       	rcall	.+14     	; 0xdb70 <__divmodhi4_neg1>
    db62:	77 fd       	sbrc	r23, 7
    db64:	09 d0       	rcall	.+18     	; 0xdb78 <__divmodhi4_neg2>
    db66:	0e 94 98 6d 	call	0xdb30	; 0xdb30 <__udivmodhi4>
    db6a:	07 fc       	sbrc	r0, 7
    db6c:	05 d0       	rcall	.+10     	; 0xdb78 <__divmodhi4_neg2>
    db6e:	3e f4       	brtc	.+14     	; 0xdb7e <__divmodhi4_exit>

0000db70 <__divmodhi4_neg1>:
    db70:	90 95       	com	r25
    db72:	81 95       	neg	r24
    db74:	9f 4f       	sbci	r25, 0xFF	; 255
    db76:	08 95       	ret

0000db78 <__divmodhi4_neg2>:
    db78:	70 95       	com	r23
    db7a:	61 95       	neg	r22
    db7c:	7f 4f       	sbci	r23, 0xFF	; 255

0000db7e <__divmodhi4_exit>:
    db7e:	08 95       	ret

0000db80 <__subsf3>:
    db80:	50 58       	subi	r21, 0x80	; 128

0000db82 <__addsf3>:
    db82:	bb 27       	eor	r27, r27
    db84:	aa 27       	eor	r26, r26
    db86:	0e d0       	rcall	.+28     	; 0xdba4 <__addsf3x>
    db88:	75 c1       	rjmp	.+746    	; 0xde74 <__fp_round>
    db8a:	66 d1       	rcall	.+716    	; 0xde58 <__fp_pscA>
    db8c:	30 f0       	brcs	.+12     	; 0xdb9a <__addsf3+0x18>
    db8e:	6b d1       	rcall	.+726    	; 0xde66 <__fp_pscB>
    db90:	20 f0       	brcs	.+8      	; 0xdb9a <__addsf3+0x18>
    db92:	31 f4       	brne	.+12     	; 0xdba0 <__addsf3+0x1e>
    db94:	9f 3f       	cpi	r25, 0xFF	; 255
    db96:	11 f4       	brne	.+4      	; 0xdb9c <__addsf3+0x1a>
    db98:	1e f4       	brtc	.+6      	; 0xdba0 <__addsf3+0x1e>
    db9a:	5b c1       	rjmp	.+694    	; 0xde52 <__fp_nan>
    db9c:	0e f4       	brtc	.+2      	; 0xdba0 <__addsf3+0x1e>
    db9e:	e0 95       	com	r30
    dba0:	e7 fb       	bst	r30, 7
    dba2:	51 c1       	rjmp	.+674    	; 0xde46 <__fp_inf>

0000dba4 <__addsf3x>:
    dba4:	e9 2f       	mov	r30, r25
    dba6:	77 d1       	rcall	.+750    	; 0xde96 <__fp_split3>
    dba8:	80 f3       	brcs	.-32     	; 0xdb8a <__addsf3+0x8>
    dbaa:	ba 17       	cp	r27, r26
    dbac:	62 07       	cpc	r22, r18
    dbae:	73 07       	cpc	r23, r19
    dbb0:	84 07       	cpc	r24, r20
    dbb2:	95 07       	cpc	r25, r21
    dbb4:	18 f0       	brcs	.+6      	; 0xdbbc <__addsf3x+0x18>
    dbb6:	71 f4       	brne	.+28     	; 0xdbd4 <__addsf3x+0x30>
    dbb8:	9e f5       	brtc	.+102    	; 0xdc20 <__addsf3x+0x7c>
    dbba:	8f c1       	rjmp	.+798    	; 0xdeda <__fp_zero>
    dbbc:	0e f4       	brtc	.+2      	; 0xdbc0 <__addsf3x+0x1c>
    dbbe:	e0 95       	com	r30
    dbc0:	0b 2e       	mov	r0, r27
    dbc2:	ba 2f       	mov	r27, r26
    dbc4:	a0 2d       	mov	r26, r0
    dbc6:	0b 01       	movw	r0, r22
    dbc8:	b9 01       	movw	r22, r18
    dbca:	90 01       	movw	r18, r0
    dbcc:	0c 01       	movw	r0, r24
    dbce:	ca 01       	movw	r24, r20
    dbd0:	a0 01       	movw	r20, r0
    dbd2:	11 24       	eor	r1, r1
    dbd4:	ff 27       	eor	r31, r31
    dbd6:	59 1b       	sub	r21, r25
    dbd8:	99 f0       	breq	.+38     	; 0xdc00 <__addsf3x+0x5c>
    dbda:	59 3f       	cpi	r21, 0xF9	; 249
    dbdc:	50 f4       	brcc	.+20     	; 0xdbf2 <__addsf3x+0x4e>
    dbde:	50 3e       	cpi	r21, 0xE0	; 224
    dbe0:	68 f1       	brcs	.+90     	; 0xdc3c <__addsf3x+0x98>
    dbe2:	1a 16       	cp	r1, r26
    dbe4:	f0 40       	sbci	r31, 0x00	; 0
    dbe6:	a2 2f       	mov	r26, r18
    dbe8:	23 2f       	mov	r18, r19
    dbea:	34 2f       	mov	r19, r20
    dbec:	44 27       	eor	r20, r20
    dbee:	58 5f       	subi	r21, 0xF8	; 248
    dbf0:	f3 cf       	rjmp	.-26     	; 0xdbd8 <__addsf3x+0x34>
    dbf2:	46 95       	lsr	r20
    dbf4:	37 95       	ror	r19
    dbf6:	27 95       	ror	r18
    dbf8:	a7 95       	ror	r26
    dbfa:	f0 40       	sbci	r31, 0x00	; 0
    dbfc:	53 95       	inc	r21
    dbfe:	c9 f7       	brne	.-14     	; 0xdbf2 <__addsf3x+0x4e>
    dc00:	7e f4       	brtc	.+30     	; 0xdc20 <__addsf3x+0x7c>
    dc02:	1f 16       	cp	r1, r31
    dc04:	ba 0b       	sbc	r27, r26
    dc06:	62 0b       	sbc	r22, r18
    dc08:	73 0b       	sbc	r23, r19
    dc0a:	84 0b       	sbc	r24, r20
    dc0c:	ba f0       	brmi	.+46     	; 0xdc3c <__addsf3x+0x98>
    dc0e:	91 50       	subi	r25, 0x01	; 1
    dc10:	a1 f0       	breq	.+40     	; 0xdc3a <__addsf3x+0x96>
    dc12:	ff 0f       	add	r31, r31
    dc14:	bb 1f       	adc	r27, r27
    dc16:	66 1f       	adc	r22, r22
    dc18:	77 1f       	adc	r23, r23
    dc1a:	88 1f       	adc	r24, r24
    dc1c:	c2 f7       	brpl	.-16     	; 0xdc0e <__addsf3x+0x6a>
    dc1e:	0e c0       	rjmp	.+28     	; 0xdc3c <__addsf3x+0x98>
    dc20:	ba 0f       	add	r27, r26
    dc22:	62 1f       	adc	r22, r18
    dc24:	73 1f       	adc	r23, r19
    dc26:	84 1f       	adc	r24, r20
    dc28:	48 f4       	brcc	.+18     	; 0xdc3c <__addsf3x+0x98>
    dc2a:	87 95       	ror	r24
    dc2c:	77 95       	ror	r23
    dc2e:	67 95       	ror	r22
    dc30:	b7 95       	ror	r27
    dc32:	f7 95       	ror	r31
    dc34:	9e 3f       	cpi	r25, 0xFE	; 254
    dc36:	08 f0       	brcs	.+2      	; 0xdc3a <__addsf3x+0x96>
    dc38:	b3 cf       	rjmp	.-154    	; 0xdba0 <__addsf3+0x1e>
    dc3a:	93 95       	inc	r25
    dc3c:	88 0f       	add	r24, r24
    dc3e:	08 f0       	brcs	.+2      	; 0xdc42 <__addsf3x+0x9e>
    dc40:	99 27       	eor	r25, r25
    dc42:	ee 0f       	add	r30, r30
    dc44:	97 95       	ror	r25
    dc46:	87 95       	ror	r24
    dc48:	08 95       	ret

0000dc4a <__cmpsf2>:
    dc4a:	d9 d0       	rcall	.+434    	; 0xddfe <__fp_cmp>
    dc4c:	08 f4       	brcc	.+2      	; 0xdc50 <__cmpsf2+0x6>
    dc4e:	81 e0       	ldi	r24, 0x01	; 1
    dc50:	08 95       	ret

0000dc52 <__divsf3>:
    dc52:	0c d0       	rcall	.+24     	; 0xdc6c <__divsf3x>
    dc54:	0f c1       	rjmp	.+542    	; 0xde74 <__fp_round>
    dc56:	07 d1       	rcall	.+526    	; 0xde66 <__fp_pscB>
    dc58:	40 f0       	brcs	.+16     	; 0xdc6a <__divsf3+0x18>
    dc5a:	fe d0       	rcall	.+508    	; 0xde58 <__fp_pscA>
    dc5c:	30 f0       	brcs	.+12     	; 0xdc6a <__divsf3+0x18>
    dc5e:	21 f4       	brne	.+8      	; 0xdc68 <__divsf3+0x16>
    dc60:	5f 3f       	cpi	r21, 0xFF	; 255
    dc62:	19 f0       	breq	.+6      	; 0xdc6a <__divsf3+0x18>
    dc64:	f0 c0       	rjmp	.+480    	; 0xde46 <__fp_inf>
    dc66:	51 11       	cpse	r21, r1
    dc68:	39 c1       	rjmp	.+626    	; 0xdedc <__fp_szero>
    dc6a:	f3 c0       	rjmp	.+486    	; 0xde52 <__fp_nan>

0000dc6c <__divsf3x>:
    dc6c:	14 d1       	rcall	.+552    	; 0xde96 <__fp_split3>
    dc6e:	98 f3       	brcs	.-26     	; 0xdc56 <__divsf3+0x4>

0000dc70 <__divsf3_pse>:
    dc70:	99 23       	and	r25, r25
    dc72:	c9 f3       	breq	.-14     	; 0xdc66 <__divsf3+0x14>
    dc74:	55 23       	and	r21, r21
    dc76:	b1 f3       	breq	.-20     	; 0xdc64 <__divsf3+0x12>
    dc78:	95 1b       	sub	r25, r21
    dc7a:	55 0b       	sbc	r21, r21
    dc7c:	bb 27       	eor	r27, r27
    dc7e:	aa 27       	eor	r26, r26
    dc80:	62 17       	cp	r22, r18
    dc82:	73 07       	cpc	r23, r19
    dc84:	84 07       	cpc	r24, r20
    dc86:	38 f0       	brcs	.+14     	; 0xdc96 <__divsf3_pse+0x26>
    dc88:	9f 5f       	subi	r25, 0xFF	; 255
    dc8a:	5f 4f       	sbci	r21, 0xFF	; 255
    dc8c:	22 0f       	add	r18, r18
    dc8e:	33 1f       	adc	r19, r19
    dc90:	44 1f       	adc	r20, r20
    dc92:	aa 1f       	adc	r26, r26
    dc94:	a9 f3       	breq	.-22     	; 0xdc80 <__divsf3_pse+0x10>
    dc96:	33 d0       	rcall	.+102    	; 0xdcfe <__divsf3_pse+0x8e>
    dc98:	0e 2e       	mov	r0, r30
    dc9a:	3a f0       	brmi	.+14     	; 0xdcaa <__divsf3_pse+0x3a>
    dc9c:	e0 e8       	ldi	r30, 0x80	; 128
    dc9e:	30 d0       	rcall	.+96     	; 0xdd00 <__divsf3_pse+0x90>
    dca0:	91 50       	subi	r25, 0x01	; 1
    dca2:	50 40       	sbci	r21, 0x00	; 0
    dca4:	e6 95       	lsr	r30
    dca6:	00 1c       	adc	r0, r0
    dca8:	ca f7       	brpl	.-14     	; 0xdc9c <__divsf3_pse+0x2c>
    dcaa:	29 d0       	rcall	.+82     	; 0xdcfe <__divsf3_pse+0x8e>
    dcac:	fe 2f       	mov	r31, r30
    dcae:	27 d0       	rcall	.+78     	; 0xdcfe <__divsf3_pse+0x8e>
    dcb0:	66 0f       	add	r22, r22
    dcb2:	77 1f       	adc	r23, r23
    dcb4:	88 1f       	adc	r24, r24
    dcb6:	bb 1f       	adc	r27, r27
    dcb8:	26 17       	cp	r18, r22
    dcba:	37 07       	cpc	r19, r23
    dcbc:	48 07       	cpc	r20, r24
    dcbe:	ab 07       	cpc	r26, r27
    dcc0:	b0 e8       	ldi	r27, 0x80	; 128
    dcc2:	09 f0       	breq	.+2      	; 0xdcc6 <__divsf3_pse+0x56>
    dcc4:	bb 0b       	sbc	r27, r27
    dcc6:	80 2d       	mov	r24, r0
    dcc8:	bf 01       	movw	r22, r30
    dcca:	ff 27       	eor	r31, r31
    dccc:	93 58       	subi	r25, 0x83	; 131
    dcce:	5f 4f       	sbci	r21, 0xFF	; 255
    dcd0:	2a f0       	brmi	.+10     	; 0xdcdc <__divsf3_pse+0x6c>
    dcd2:	9e 3f       	cpi	r25, 0xFE	; 254
    dcd4:	51 05       	cpc	r21, r1
    dcd6:	68 f0       	brcs	.+26     	; 0xdcf2 <__divsf3_pse+0x82>
    dcd8:	b6 c0       	rjmp	.+364    	; 0xde46 <__fp_inf>
    dcda:	00 c1       	rjmp	.+512    	; 0xdedc <__fp_szero>
    dcdc:	5f 3f       	cpi	r21, 0xFF	; 255
    dcde:	ec f3       	brlt	.-6      	; 0xdcda <__divsf3_pse+0x6a>
    dce0:	98 3e       	cpi	r25, 0xE8	; 232
    dce2:	dc f3       	brlt	.-10     	; 0xdcda <__divsf3_pse+0x6a>
    dce4:	86 95       	lsr	r24
    dce6:	77 95       	ror	r23
    dce8:	67 95       	ror	r22
    dcea:	b7 95       	ror	r27
    dcec:	f7 95       	ror	r31
    dcee:	9f 5f       	subi	r25, 0xFF	; 255
    dcf0:	c9 f7       	brne	.-14     	; 0xdce4 <__divsf3_pse+0x74>
    dcf2:	88 0f       	add	r24, r24
    dcf4:	91 1d       	adc	r25, r1
    dcf6:	96 95       	lsr	r25
    dcf8:	87 95       	ror	r24
    dcfa:	97 f9       	bld	r25, 7
    dcfc:	08 95       	ret
    dcfe:	e1 e0       	ldi	r30, 0x01	; 1
    dd00:	66 0f       	add	r22, r22
    dd02:	77 1f       	adc	r23, r23
    dd04:	88 1f       	adc	r24, r24
    dd06:	bb 1f       	adc	r27, r27
    dd08:	62 17       	cp	r22, r18
    dd0a:	73 07       	cpc	r23, r19
    dd0c:	84 07       	cpc	r24, r20
    dd0e:	ba 07       	cpc	r27, r26
    dd10:	20 f0       	brcs	.+8      	; 0xdd1a <__divsf3_pse+0xaa>
    dd12:	62 1b       	sub	r22, r18
    dd14:	73 0b       	sbc	r23, r19
    dd16:	84 0b       	sbc	r24, r20
    dd18:	ba 0b       	sbc	r27, r26
    dd1a:	ee 1f       	adc	r30, r30
    dd1c:	88 f7       	brcc	.-30     	; 0xdd00 <__divsf3_pse+0x90>
    dd1e:	e0 95       	com	r30
    dd20:	08 95       	ret

0000dd22 <__fixsfsi>:
    dd22:	04 d0       	rcall	.+8      	; 0xdd2c <__fixunssfsi>
    dd24:	68 94       	set
    dd26:	b1 11       	cpse	r27, r1
    dd28:	d9 c0       	rjmp	.+434    	; 0xdedc <__fp_szero>
    dd2a:	08 95       	ret

0000dd2c <__fixunssfsi>:
    dd2c:	bc d0       	rcall	.+376    	; 0xdea6 <__fp_splitA>
    dd2e:	88 f0       	brcs	.+34     	; 0xdd52 <__fixunssfsi+0x26>
    dd30:	9f 57       	subi	r25, 0x7F	; 127
    dd32:	90 f0       	brcs	.+36     	; 0xdd58 <__fixunssfsi+0x2c>
    dd34:	b9 2f       	mov	r27, r25
    dd36:	99 27       	eor	r25, r25
    dd38:	b7 51       	subi	r27, 0x17	; 23
    dd3a:	a0 f0       	brcs	.+40     	; 0xdd64 <__fixunssfsi+0x38>
    dd3c:	d1 f0       	breq	.+52     	; 0xdd72 <__fixunssfsi+0x46>
    dd3e:	66 0f       	add	r22, r22
    dd40:	77 1f       	adc	r23, r23
    dd42:	88 1f       	adc	r24, r24
    dd44:	99 1f       	adc	r25, r25
    dd46:	1a f0       	brmi	.+6      	; 0xdd4e <__fixunssfsi+0x22>
    dd48:	ba 95       	dec	r27
    dd4a:	c9 f7       	brne	.-14     	; 0xdd3e <__fixunssfsi+0x12>
    dd4c:	12 c0       	rjmp	.+36     	; 0xdd72 <__fixunssfsi+0x46>
    dd4e:	b1 30       	cpi	r27, 0x01	; 1
    dd50:	81 f0       	breq	.+32     	; 0xdd72 <__fixunssfsi+0x46>
    dd52:	c3 d0       	rcall	.+390    	; 0xdeda <__fp_zero>
    dd54:	b1 e0       	ldi	r27, 0x01	; 1
    dd56:	08 95       	ret
    dd58:	c0 c0       	rjmp	.+384    	; 0xdeda <__fp_zero>
    dd5a:	67 2f       	mov	r22, r23
    dd5c:	78 2f       	mov	r23, r24
    dd5e:	88 27       	eor	r24, r24
    dd60:	b8 5f       	subi	r27, 0xF8	; 248
    dd62:	39 f0       	breq	.+14     	; 0xdd72 <__fixunssfsi+0x46>
    dd64:	b9 3f       	cpi	r27, 0xF9	; 249
    dd66:	cc f3       	brlt	.-14     	; 0xdd5a <__fixunssfsi+0x2e>
    dd68:	86 95       	lsr	r24
    dd6a:	77 95       	ror	r23
    dd6c:	67 95       	ror	r22
    dd6e:	b3 95       	inc	r27
    dd70:	d9 f7       	brne	.-10     	; 0xdd68 <__fixunssfsi+0x3c>
    dd72:	3e f4       	brtc	.+14     	; 0xdd82 <__fixunssfsi+0x56>
    dd74:	90 95       	com	r25
    dd76:	80 95       	com	r24
    dd78:	70 95       	com	r23
    dd7a:	61 95       	neg	r22
    dd7c:	7f 4f       	sbci	r23, 0xFF	; 255
    dd7e:	8f 4f       	sbci	r24, 0xFF	; 255
    dd80:	9f 4f       	sbci	r25, 0xFF	; 255
    dd82:	08 95       	ret

0000dd84 <__floatunsisf>:
    dd84:	e8 94       	clt
    dd86:	09 c0       	rjmp	.+18     	; 0xdd9a <__floatsisf+0x12>

0000dd88 <__floatsisf>:
    dd88:	97 fb       	bst	r25, 7
    dd8a:	3e f4       	brtc	.+14     	; 0xdd9a <__floatsisf+0x12>
    dd8c:	90 95       	com	r25
    dd8e:	80 95       	com	r24
    dd90:	70 95       	com	r23
    dd92:	61 95       	neg	r22
    dd94:	7f 4f       	sbci	r23, 0xFF	; 255
    dd96:	8f 4f       	sbci	r24, 0xFF	; 255
    dd98:	9f 4f       	sbci	r25, 0xFF	; 255
    dd9a:	99 23       	and	r25, r25
    dd9c:	a9 f0       	breq	.+42     	; 0xddc8 <__floatsisf+0x40>
    dd9e:	f9 2f       	mov	r31, r25
    dda0:	96 e9       	ldi	r25, 0x96	; 150
    dda2:	bb 27       	eor	r27, r27
    dda4:	93 95       	inc	r25
    dda6:	f6 95       	lsr	r31
    dda8:	87 95       	ror	r24
    ddaa:	77 95       	ror	r23
    ddac:	67 95       	ror	r22
    ddae:	b7 95       	ror	r27
    ddb0:	f1 11       	cpse	r31, r1
    ddb2:	f8 cf       	rjmp	.-16     	; 0xdda4 <__floatsisf+0x1c>
    ddb4:	fa f4       	brpl	.+62     	; 0xddf4 <__floatsisf+0x6c>
    ddb6:	bb 0f       	add	r27, r27
    ddb8:	11 f4       	brne	.+4      	; 0xddbe <__floatsisf+0x36>
    ddba:	60 ff       	sbrs	r22, 0
    ddbc:	1b c0       	rjmp	.+54     	; 0xddf4 <__floatsisf+0x6c>
    ddbe:	6f 5f       	subi	r22, 0xFF	; 255
    ddc0:	7f 4f       	sbci	r23, 0xFF	; 255
    ddc2:	8f 4f       	sbci	r24, 0xFF	; 255
    ddc4:	9f 4f       	sbci	r25, 0xFF	; 255
    ddc6:	16 c0       	rjmp	.+44     	; 0xddf4 <__floatsisf+0x6c>
    ddc8:	88 23       	and	r24, r24
    ddca:	11 f0       	breq	.+4      	; 0xddd0 <__floatsisf+0x48>
    ddcc:	96 e9       	ldi	r25, 0x96	; 150
    ddce:	11 c0       	rjmp	.+34     	; 0xddf2 <__floatsisf+0x6a>
    ddd0:	77 23       	and	r23, r23
    ddd2:	21 f0       	breq	.+8      	; 0xdddc <__floatsisf+0x54>
    ddd4:	9e e8       	ldi	r25, 0x8E	; 142
    ddd6:	87 2f       	mov	r24, r23
    ddd8:	76 2f       	mov	r23, r22
    ddda:	05 c0       	rjmp	.+10     	; 0xdde6 <__floatsisf+0x5e>
    dddc:	66 23       	and	r22, r22
    ddde:	71 f0       	breq	.+28     	; 0xddfc <__floatsisf+0x74>
    dde0:	96 e8       	ldi	r25, 0x86	; 134
    dde2:	86 2f       	mov	r24, r22
    dde4:	70 e0       	ldi	r23, 0x00	; 0
    dde6:	60 e0       	ldi	r22, 0x00	; 0
    dde8:	2a f0       	brmi	.+10     	; 0xddf4 <__floatsisf+0x6c>
    ddea:	9a 95       	dec	r25
    ddec:	66 0f       	add	r22, r22
    ddee:	77 1f       	adc	r23, r23
    ddf0:	88 1f       	adc	r24, r24
    ddf2:	da f7       	brpl	.-10     	; 0xddea <__floatsisf+0x62>
    ddf4:	88 0f       	add	r24, r24
    ddf6:	96 95       	lsr	r25
    ddf8:	87 95       	ror	r24
    ddfa:	97 f9       	bld	r25, 7
    ddfc:	08 95       	ret

0000ddfe <__fp_cmp>:
    ddfe:	99 0f       	add	r25, r25
    de00:	00 08       	sbc	r0, r0
    de02:	55 0f       	add	r21, r21
    de04:	aa 0b       	sbc	r26, r26
    de06:	e0 e8       	ldi	r30, 0x80	; 128
    de08:	fe ef       	ldi	r31, 0xFE	; 254
    de0a:	16 16       	cp	r1, r22
    de0c:	17 06       	cpc	r1, r23
    de0e:	e8 07       	cpc	r30, r24
    de10:	f9 07       	cpc	r31, r25
    de12:	c0 f0       	brcs	.+48     	; 0xde44 <__fp_cmp+0x46>
    de14:	12 16       	cp	r1, r18
    de16:	13 06       	cpc	r1, r19
    de18:	e4 07       	cpc	r30, r20
    de1a:	f5 07       	cpc	r31, r21
    de1c:	98 f0       	brcs	.+38     	; 0xde44 <__fp_cmp+0x46>
    de1e:	62 1b       	sub	r22, r18
    de20:	73 0b       	sbc	r23, r19
    de22:	84 0b       	sbc	r24, r20
    de24:	95 0b       	sbc	r25, r21
    de26:	39 f4       	brne	.+14     	; 0xde36 <__fp_cmp+0x38>
    de28:	0a 26       	eor	r0, r26
    de2a:	61 f0       	breq	.+24     	; 0xde44 <__fp_cmp+0x46>
    de2c:	23 2b       	or	r18, r19
    de2e:	24 2b       	or	r18, r20
    de30:	25 2b       	or	r18, r21
    de32:	21 f4       	brne	.+8      	; 0xde3c <__fp_cmp+0x3e>
    de34:	08 95       	ret
    de36:	0a 26       	eor	r0, r26
    de38:	09 f4       	brne	.+2      	; 0xde3c <__fp_cmp+0x3e>
    de3a:	a1 40       	sbci	r26, 0x01	; 1
    de3c:	a6 95       	lsr	r26
    de3e:	8f ef       	ldi	r24, 0xFF	; 255
    de40:	81 1d       	adc	r24, r1
    de42:	81 1d       	adc	r24, r1
    de44:	08 95       	ret

0000de46 <__fp_inf>:
    de46:	97 f9       	bld	r25, 7
    de48:	9f 67       	ori	r25, 0x7F	; 127
    de4a:	80 e8       	ldi	r24, 0x80	; 128
    de4c:	70 e0       	ldi	r23, 0x00	; 0
    de4e:	60 e0       	ldi	r22, 0x00	; 0
    de50:	08 95       	ret

0000de52 <__fp_nan>:
    de52:	9f ef       	ldi	r25, 0xFF	; 255
    de54:	80 ec       	ldi	r24, 0xC0	; 192
    de56:	08 95       	ret

0000de58 <__fp_pscA>:
    de58:	00 24       	eor	r0, r0
    de5a:	0a 94       	dec	r0
    de5c:	16 16       	cp	r1, r22
    de5e:	17 06       	cpc	r1, r23
    de60:	18 06       	cpc	r1, r24
    de62:	09 06       	cpc	r0, r25
    de64:	08 95       	ret

0000de66 <__fp_pscB>:
    de66:	00 24       	eor	r0, r0
    de68:	0a 94       	dec	r0
    de6a:	12 16       	cp	r1, r18
    de6c:	13 06       	cpc	r1, r19
    de6e:	14 06       	cpc	r1, r20
    de70:	05 06       	cpc	r0, r21
    de72:	08 95       	ret

0000de74 <__fp_round>:
    de74:	09 2e       	mov	r0, r25
    de76:	03 94       	inc	r0
    de78:	00 0c       	add	r0, r0
    de7a:	11 f4       	brne	.+4      	; 0xde80 <__fp_round+0xc>
    de7c:	88 23       	and	r24, r24
    de7e:	52 f0       	brmi	.+20     	; 0xde94 <__fp_round+0x20>
    de80:	bb 0f       	add	r27, r27
    de82:	40 f4       	brcc	.+16     	; 0xde94 <__fp_round+0x20>
    de84:	bf 2b       	or	r27, r31
    de86:	11 f4       	brne	.+4      	; 0xde8c <__fp_round+0x18>
    de88:	60 ff       	sbrs	r22, 0
    de8a:	04 c0       	rjmp	.+8      	; 0xde94 <__fp_round+0x20>
    de8c:	6f 5f       	subi	r22, 0xFF	; 255
    de8e:	7f 4f       	sbci	r23, 0xFF	; 255
    de90:	8f 4f       	sbci	r24, 0xFF	; 255
    de92:	9f 4f       	sbci	r25, 0xFF	; 255
    de94:	08 95       	ret

0000de96 <__fp_split3>:
    de96:	57 fd       	sbrc	r21, 7
    de98:	90 58       	subi	r25, 0x80	; 128
    de9a:	44 0f       	add	r20, r20
    de9c:	55 1f       	adc	r21, r21
    de9e:	59 f0       	breq	.+22     	; 0xdeb6 <__fp_splitA+0x10>
    dea0:	5f 3f       	cpi	r21, 0xFF	; 255
    dea2:	71 f0       	breq	.+28     	; 0xdec0 <__fp_splitA+0x1a>
    dea4:	47 95       	ror	r20

0000dea6 <__fp_splitA>:
    dea6:	88 0f       	add	r24, r24
    dea8:	97 fb       	bst	r25, 7
    deaa:	99 1f       	adc	r25, r25
    deac:	61 f0       	breq	.+24     	; 0xdec6 <__fp_splitA+0x20>
    deae:	9f 3f       	cpi	r25, 0xFF	; 255
    deb0:	79 f0       	breq	.+30     	; 0xded0 <__fp_splitA+0x2a>
    deb2:	87 95       	ror	r24
    deb4:	08 95       	ret
    deb6:	12 16       	cp	r1, r18
    deb8:	13 06       	cpc	r1, r19
    deba:	14 06       	cpc	r1, r20
    debc:	55 1f       	adc	r21, r21
    debe:	f2 cf       	rjmp	.-28     	; 0xdea4 <__fp_split3+0xe>
    dec0:	46 95       	lsr	r20
    dec2:	f1 df       	rcall	.-30     	; 0xdea6 <__fp_splitA>
    dec4:	08 c0       	rjmp	.+16     	; 0xded6 <__fp_splitA+0x30>
    dec6:	16 16       	cp	r1, r22
    dec8:	17 06       	cpc	r1, r23
    deca:	18 06       	cpc	r1, r24
    decc:	99 1f       	adc	r25, r25
    dece:	f1 cf       	rjmp	.-30     	; 0xdeb2 <__fp_splitA+0xc>
    ded0:	86 95       	lsr	r24
    ded2:	71 05       	cpc	r23, r1
    ded4:	61 05       	cpc	r22, r1
    ded6:	08 94       	sec
    ded8:	08 95       	ret

0000deda <__fp_zero>:
    deda:	e8 94       	clt

0000dedc <__fp_szero>:
    dedc:	bb 27       	eor	r27, r27
    dede:	66 27       	eor	r22, r22
    dee0:	77 27       	eor	r23, r23
    dee2:	cb 01       	movw	r24, r22
    dee4:	97 f9       	bld	r25, 7
    dee6:	08 95       	ret

0000dee8 <__gesf2>:
    dee8:	8a df       	rcall	.-236    	; 0xddfe <__fp_cmp>
    deea:	08 f4       	brcc	.+2      	; 0xdeee <__gesf2+0x6>
    deec:	8f ef       	ldi	r24, 0xFF	; 255
    deee:	08 95       	ret

0000def0 <__mulsf3>:
    def0:	0b d0       	rcall	.+22     	; 0xdf08 <__mulsf3x>
    def2:	c0 cf       	rjmp	.-128    	; 0xde74 <__fp_round>
    def4:	b1 df       	rcall	.-158    	; 0xde58 <__fp_pscA>
    def6:	28 f0       	brcs	.+10     	; 0xdf02 <__mulsf3+0x12>
    def8:	b6 df       	rcall	.-148    	; 0xde66 <__fp_pscB>
    defa:	18 f0       	brcs	.+6      	; 0xdf02 <__mulsf3+0x12>
    defc:	95 23       	and	r25, r21
    defe:	09 f0       	breq	.+2      	; 0xdf02 <__mulsf3+0x12>
    df00:	a2 cf       	rjmp	.-188    	; 0xde46 <__fp_inf>
    df02:	a7 cf       	rjmp	.-178    	; 0xde52 <__fp_nan>
    df04:	11 24       	eor	r1, r1
    df06:	ea cf       	rjmp	.-44     	; 0xdedc <__fp_szero>

0000df08 <__mulsf3x>:
    df08:	c6 df       	rcall	.-116    	; 0xde96 <__fp_split3>
    df0a:	a0 f3       	brcs	.-24     	; 0xdef4 <__mulsf3+0x4>

0000df0c <__mulsf3_pse>:
    df0c:	95 9f       	mul	r25, r21
    df0e:	d1 f3       	breq	.-12     	; 0xdf04 <__mulsf3+0x14>
    df10:	95 0f       	add	r25, r21
    df12:	50 e0       	ldi	r21, 0x00	; 0
    df14:	55 1f       	adc	r21, r21
    df16:	62 9f       	mul	r22, r18
    df18:	f0 01       	movw	r30, r0
    df1a:	72 9f       	mul	r23, r18
    df1c:	bb 27       	eor	r27, r27
    df1e:	f0 0d       	add	r31, r0
    df20:	b1 1d       	adc	r27, r1
    df22:	63 9f       	mul	r22, r19
    df24:	aa 27       	eor	r26, r26
    df26:	f0 0d       	add	r31, r0
    df28:	b1 1d       	adc	r27, r1
    df2a:	aa 1f       	adc	r26, r26
    df2c:	64 9f       	mul	r22, r20
    df2e:	66 27       	eor	r22, r22
    df30:	b0 0d       	add	r27, r0
    df32:	a1 1d       	adc	r26, r1
    df34:	66 1f       	adc	r22, r22
    df36:	82 9f       	mul	r24, r18
    df38:	22 27       	eor	r18, r18
    df3a:	b0 0d       	add	r27, r0
    df3c:	a1 1d       	adc	r26, r1
    df3e:	62 1f       	adc	r22, r18
    df40:	73 9f       	mul	r23, r19
    df42:	b0 0d       	add	r27, r0
    df44:	a1 1d       	adc	r26, r1
    df46:	62 1f       	adc	r22, r18
    df48:	83 9f       	mul	r24, r19
    df4a:	a0 0d       	add	r26, r0
    df4c:	61 1d       	adc	r22, r1
    df4e:	22 1f       	adc	r18, r18
    df50:	74 9f       	mul	r23, r20
    df52:	33 27       	eor	r19, r19
    df54:	a0 0d       	add	r26, r0
    df56:	61 1d       	adc	r22, r1
    df58:	23 1f       	adc	r18, r19
    df5a:	84 9f       	mul	r24, r20
    df5c:	60 0d       	add	r22, r0
    df5e:	21 1d       	adc	r18, r1
    df60:	82 2f       	mov	r24, r18
    df62:	76 2f       	mov	r23, r22
    df64:	6a 2f       	mov	r22, r26
    df66:	11 24       	eor	r1, r1
    df68:	9f 57       	subi	r25, 0x7F	; 127
    df6a:	50 40       	sbci	r21, 0x00	; 0
    df6c:	8a f0       	brmi	.+34     	; 0xdf90 <__mulsf3_pse+0x84>
    df6e:	e1 f0       	breq	.+56     	; 0xdfa8 <__mulsf3_pse+0x9c>
    df70:	88 23       	and	r24, r24
    df72:	4a f0       	brmi	.+18     	; 0xdf86 <__mulsf3_pse+0x7a>
    df74:	ee 0f       	add	r30, r30
    df76:	ff 1f       	adc	r31, r31
    df78:	bb 1f       	adc	r27, r27
    df7a:	66 1f       	adc	r22, r22
    df7c:	77 1f       	adc	r23, r23
    df7e:	88 1f       	adc	r24, r24
    df80:	91 50       	subi	r25, 0x01	; 1
    df82:	50 40       	sbci	r21, 0x00	; 0
    df84:	a9 f7       	brne	.-22     	; 0xdf70 <__mulsf3_pse+0x64>
    df86:	9e 3f       	cpi	r25, 0xFE	; 254
    df88:	51 05       	cpc	r21, r1
    df8a:	70 f0       	brcs	.+28     	; 0xdfa8 <__mulsf3_pse+0x9c>
    df8c:	5c cf       	rjmp	.-328    	; 0xde46 <__fp_inf>
    df8e:	a6 cf       	rjmp	.-180    	; 0xdedc <__fp_szero>
    df90:	5f 3f       	cpi	r21, 0xFF	; 255
    df92:	ec f3       	brlt	.-6      	; 0xdf8e <__mulsf3_pse+0x82>
    df94:	98 3e       	cpi	r25, 0xE8	; 232
    df96:	dc f3       	brlt	.-10     	; 0xdf8e <__mulsf3_pse+0x82>
    df98:	86 95       	lsr	r24
    df9a:	77 95       	ror	r23
    df9c:	67 95       	ror	r22
    df9e:	b7 95       	ror	r27
    dfa0:	f7 95       	ror	r31
    dfa2:	e7 95       	ror	r30
    dfa4:	9f 5f       	subi	r25, 0xFF	; 255
    dfa6:	c1 f7       	brne	.-16     	; 0xdf98 <__mulsf3_pse+0x8c>
    dfa8:	fe 2b       	or	r31, r30
    dfaa:	88 0f       	add	r24, r24
    dfac:	91 1d       	adc	r25, r1
    dfae:	96 95       	lsr	r25
    dfb0:	87 95       	ror	r24
    dfb2:	97 f9       	bld	r25, 7
    dfb4:	08 95       	ret

0000dfb6 <memcpy_P>:
    dfb6:	fb 01       	movw	r30, r22
    dfb8:	dc 01       	movw	r26, r24
    dfba:	02 c0       	rjmp	.+4      	; 0xdfc0 <memcpy_P+0xa>
    dfbc:	05 90       	lpm	r0, Z+
    dfbe:	0d 92       	st	X+, r0
    dfc0:	41 50       	subi	r20, 0x01	; 1
    dfc2:	50 40       	sbci	r21, 0x00	; 0
    dfc4:	d8 f7       	brcc	.-10     	; 0xdfbc <memcpy_P+0x6>
    dfc6:	08 95       	ret

0000dfc8 <strnlen_P>:
    dfc8:	fc 01       	movw	r30, r24
    dfca:	05 90       	lpm	r0, Z+
    dfcc:	61 50       	subi	r22, 0x01	; 1
    dfce:	70 40       	sbci	r23, 0x00	; 0
    dfd0:	01 10       	cpse	r0, r1
    dfd2:	d8 f7       	brcc	.-10     	; 0xdfca <strnlen_P+0x2>
    dfd4:	80 95       	com	r24
    dfd6:	90 95       	com	r25
    dfd8:	8e 0f       	add	r24, r30
    dfda:	9f 1f       	adc	r25, r31
    dfdc:	08 95       	ret

0000dfde <strupr>:
    dfde:	dc 01       	movw	r26, r24
    dfe0:	6c 91       	ld	r22, X
    dfe2:	61 56       	subi	r22, 0x61	; 97
    dfe4:	6a 31       	cpi	r22, 0x1A	; 26
    dfe6:	08 f0       	brcs	.+2      	; 0xdfea <strupr+0xc>
    dfe8:	60 5e       	subi	r22, 0xE0	; 224
    dfea:	6f 5b       	subi	r22, 0xBF	; 191
    dfec:	6d 93       	st	X+, r22
    dfee:	c1 f7       	brne	.-16     	; 0xdfe0 <strupr+0x2>
    dff0:	08 95       	ret

0000dff2 <sprintf>:
    dff2:	ae e0       	ldi	r26, 0x0E	; 14
    dff4:	b0 e0       	ldi	r27, 0x00	; 0
    dff6:	ef ef       	ldi	r30, 0xFF	; 255
    dff8:	ff e6       	ldi	r31, 0x6F	; 111
    dffa:	0c 94 9d 72 	jmp	0xe53a	; 0xe53a <__prologue_saves__+0x1c>
    dffe:	0d 89       	ldd	r16, Y+21	; 0x15
    e000:	1e 89       	ldd	r17, Y+22	; 0x16
    e002:	86 e0       	ldi	r24, 0x06	; 6
    e004:	8c 83       	std	Y+4, r24	; 0x04
    e006:	1a 83       	std	Y+2, r17	; 0x02
    e008:	09 83       	std	Y+1, r16	; 0x01
    e00a:	8f ef       	ldi	r24, 0xFF	; 255
    e00c:	9f e7       	ldi	r25, 0x7F	; 127
    e00e:	9e 83       	std	Y+6, r25	; 0x06
    e010:	8d 83       	std	Y+5, r24	; 0x05
    e012:	ae 01       	movw	r20, r28
    e014:	47 5e       	subi	r20, 0xE7	; 231
    e016:	5f 4f       	sbci	r21, 0xFF	; 255
    e018:	6f 89       	ldd	r22, Y+23	; 0x17
    e01a:	78 8d       	ldd	r23, Y+24	; 0x18
    e01c:	ce 01       	movw	r24, r28
    e01e:	01 96       	adiw	r24, 0x01	; 1
    e020:	0e 94 1c 70 	call	0xe038	; 0xe038 <vfprintf>
    e024:	2f 81       	ldd	r18, Y+7	; 0x07
    e026:	38 85       	ldd	r19, Y+8	; 0x08
    e028:	f8 01       	movw	r30, r16
    e02a:	e2 0f       	add	r30, r18
    e02c:	f3 1f       	adc	r31, r19
    e02e:	10 82       	st	Z, r1
    e030:	2e 96       	adiw	r28, 0x0e	; 14
    e032:	e4 e0       	ldi	r30, 0x04	; 4
    e034:	0c 94 b9 72 	jmp	0xe572	; 0xe572 <__epilogue_restores__+0x1c>

0000e038 <vfprintf>:
    e038:	ac e0       	ldi	r26, 0x0C	; 12
    e03a:	b0 e0       	ldi	r27, 0x00	; 0
    e03c:	e2 e2       	ldi	r30, 0x22	; 34
    e03e:	f0 e7       	ldi	r31, 0x70	; 112
    e040:	0c 94 8f 72 	jmp	0xe51e	; 0xe51e <__prologue_saves__>
    e044:	7c 01       	movw	r14, r24
    e046:	6b 01       	movw	r12, r22
    e048:	8a 01       	movw	r16, r20
    e04a:	fc 01       	movw	r30, r24
    e04c:	17 82       	std	Z+7, r1	; 0x07
    e04e:	16 82       	std	Z+6, r1	; 0x06
    e050:	83 81       	ldd	r24, Z+3	; 0x03
    e052:	81 ff       	sbrs	r24, 1
    e054:	bd c1       	rjmp	.+890    	; 0xe3d0 <vfprintf+0x398>
    e056:	ce 01       	movw	r24, r28
    e058:	01 96       	adiw	r24, 0x01	; 1
    e05a:	4c 01       	movw	r8, r24
    e05c:	f7 01       	movw	r30, r14
    e05e:	93 81       	ldd	r25, Z+3	; 0x03
    e060:	f6 01       	movw	r30, r12
    e062:	93 fd       	sbrc	r25, 3
    e064:	85 91       	lpm	r24, Z+
    e066:	93 ff       	sbrs	r25, 3
    e068:	81 91       	ld	r24, Z+
    e06a:	6f 01       	movw	r12, r30
    e06c:	88 23       	and	r24, r24
    e06e:	09 f4       	brne	.+2      	; 0xe072 <vfprintf+0x3a>
    e070:	ab c1       	rjmp	.+854    	; 0xe3c8 <vfprintf+0x390>
    e072:	85 32       	cpi	r24, 0x25	; 37
    e074:	39 f4       	brne	.+14     	; 0xe084 <vfprintf+0x4c>
    e076:	93 fd       	sbrc	r25, 3
    e078:	85 91       	lpm	r24, Z+
    e07a:	93 ff       	sbrs	r25, 3
    e07c:	81 91       	ld	r24, Z+
    e07e:	6f 01       	movw	r12, r30
    e080:	85 32       	cpi	r24, 0x25	; 37
    e082:	29 f4       	brne	.+10     	; 0xe08e <vfprintf+0x56>
    e084:	b7 01       	movw	r22, r14
    e086:	90 e0       	ldi	r25, 0x00	; 0
    e088:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e08c:	e7 cf       	rjmp	.-50     	; 0xe05c <vfprintf+0x24>
    e08e:	51 2c       	mov	r5, r1
    e090:	31 2c       	mov	r3, r1
    e092:	20 e0       	ldi	r18, 0x00	; 0
    e094:	20 32       	cpi	r18, 0x20	; 32
    e096:	a0 f4       	brcc	.+40     	; 0xe0c0 <vfprintf+0x88>
    e098:	8b 32       	cpi	r24, 0x2B	; 43
    e09a:	69 f0       	breq	.+26     	; 0xe0b6 <vfprintf+0x7e>
    e09c:	30 f4       	brcc	.+12     	; 0xe0aa <vfprintf+0x72>
    e09e:	80 32       	cpi	r24, 0x20	; 32
    e0a0:	59 f0       	breq	.+22     	; 0xe0b8 <vfprintf+0x80>
    e0a2:	83 32       	cpi	r24, 0x23	; 35
    e0a4:	69 f4       	brne	.+26     	; 0xe0c0 <vfprintf+0x88>
    e0a6:	20 61       	ori	r18, 0x10	; 16
    e0a8:	2c c0       	rjmp	.+88     	; 0xe102 <vfprintf+0xca>
    e0aa:	8d 32       	cpi	r24, 0x2D	; 45
    e0ac:	39 f0       	breq	.+14     	; 0xe0bc <vfprintf+0x84>
    e0ae:	80 33       	cpi	r24, 0x30	; 48
    e0b0:	39 f4       	brne	.+14     	; 0xe0c0 <vfprintf+0x88>
    e0b2:	21 60       	ori	r18, 0x01	; 1
    e0b4:	26 c0       	rjmp	.+76     	; 0xe102 <vfprintf+0xca>
    e0b6:	22 60       	ori	r18, 0x02	; 2
    e0b8:	24 60       	ori	r18, 0x04	; 4
    e0ba:	23 c0       	rjmp	.+70     	; 0xe102 <vfprintf+0xca>
    e0bc:	28 60       	ori	r18, 0x08	; 8
    e0be:	21 c0       	rjmp	.+66     	; 0xe102 <vfprintf+0xca>
    e0c0:	27 fd       	sbrc	r18, 7
    e0c2:	27 c0       	rjmp	.+78     	; 0xe112 <vfprintf+0xda>
    e0c4:	30 ed       	ldi	r19, 0xD0	; 208
    e0c6:	38 0f       	add	r19, r24
    e0c8:	3a 30       	cpi	r19, 0x0A	; 10
    e0ca:	78 f4       	brcc	.+30     	; 0xe0ea <vfprintf+0xb2>
    e0cc:	26 ff       	sbrs	r18, 6
    e0ce:	06 c0       	rjmp	.+12     	; 0xe0dc <vfprintf+0xa4>
    e0d0:	fa e0       	ldi	r31, 0x0A	; 10
    e0d2:	5f 9e       	mul	r5, r31
    e0d4:	30 0d       	add	r19, r0
    e0d6:	11 24       	eor	r1, r1
    e0d8:	53 2e       	mov	r5, r19
    e0da:	13 c0       	rjmp	.+38     	; 0xe102 <vfprintf+0xca>
    e0dc:	8a e0       	ldi	r24, 0x0A	; 10
    e0de:	38 9e       	mul	r3, r24
    e0e0:	30 0d       	add	r19, r0
    e0e2:	11 24       	eor	r1, r1
    e0e4:	33 2e       	mov	r3, r19
    e0e6:	20 62       	ori	r18, 0x20	; 32
    e0e8:	0c c0       	rjmp	.+24     	; 0xe102 <vfprintf+0xca>
    e0ea:	8e 32       	cpi	r24, 0x2E	; 46
    e0ec:	21 f4       	brne	.+8      	; 0xe0f6 <vfprintf+0xbe>
    e0ee:	26 fd       	sbrc	r18, 6
    e0f0:	6b c1       	rjmp	.+726    	; 0xe3c8 <vfprintf+0x390>
    e0f2:	20 64       	ori	r18, 0x40	; 64
    e0f4:	06 c0       	rjmp	.+12     	; 0xe102 <vfprintf+0xca>
    e0f6:	8c 36       	cpi	r24, 0x6C	; 108
    e0f8:	11 f4       	brne	.+4      	; 0xe0fe <vfprintf+0xc6>
    e0fa:	20 68       	ori	r18, 0x80	; 128
    e0fc:	02 c0       	rjmp	.+4      	; 0xe102 <vfprintf+0xca>
    e0fe:	88 36       	cpi	r24, 0x68	; 104
    e100:	41 f4       	brne	.+16     	; 0xe112 <vfprintf+0xda>
    e102:	f6 01       	movw	r30, r12
    e104:	93 fd       	sbrc	r25, 3
    e106:	85 91       	lpm	r24, Z+
    e108:	93 ff       	sbrs	r25, 3
    e10a:	81 91       	ld	r24, Z+
    e10c:	6f 01       	movw	r12, r30
    e10e:	81 11       	cpse	r24, r1
    e110:	c1 cf       	rjmp	.-126    	; 0xe094 <vfprintf+0x5c>
    e112:	98 2f       	mov	r25, r24
    e114:	9f 7d       	andi	r25, 0xDF	; 223
    e116:	95 54       	subi	r25, 0x45	; 69
    e118:	93 30       	cpi	r25, 0x03	; 3
    e11a:	28 f4       	brcc	.+10     	; 0xe126 <vfprintf+0xee>
    e11c:	0c 5f       	subi	r16, 0xFC	; 252
    e11e:	1f 4f       	sbci	r17, 0xFF	; 255
    e120:	ff e3       	ldi	r31, 0x3F	; 63
    e122:	f9 83       	std	Y+1, r31	; 0x01
    e124:	0d c0       	rjmp	.+26     	; 0xe140 <vfprintf+0x108>
    e126:	83 36       	cpi	r24, 0x63	; 99
    e128:	31 f0       	breq	.+12     	; 0xe136 <vfprintf+0xfe>
    e12a:	83 37       	cpi	r24, 0x73	; 115
    e12c:	71 f0       	breq	.+28     	; 0xe14a <vfprintf+0x112>
    e12e:	83 35       	cpi	r24, 0x53	; 83
    e130:	09 f0       	breq	.+2      	; 0xe134 <vfprintf+0xfc>
    e132:	5b c0       	rjmp	.+182    	; 0xe1ea <vfprintf+0x1b2>
    e134:	22 c0       	rjmp	.+68     	; 0xe17a <vfprintf+0x142>
    e136:	f8 01       	movw	r30, r16
    e138:	80 81       	ld	r24, Z
    e13a:	89 83       	std	Y+1, r24	; 0x01
    e13c:	0e 5f       	subi	r16, 0xFE	; 254
    e13e:	1f 4f       	sbci	r17, 0xFF	; 255
    e140:	44 24       	eor	r4, r4
    e142:	43 94       	inc	r4
    e144:	51 2c       	mov	r5, r1
    e146:	54 01       	movw	r10, r8
    e148:	15 c0       	rjmp	.+42     	; 0xe174 <vfprintf+0x13c>
    e14a:	38 01       	movw	r6, r16
    e14c:	f2 e0       	ldi	r31, 0x02	; 2
    e14e:	6f 0e       	add	r6, r31
    e150:	71 1c       	adc	r7, r1
    e152:	f8 01       	movw	r30, r16
    e154:	a0 80       	ld	r10, Z
    e156:	b1 80       	ldd	r11, Z+1	; 0x01
    e158:	26 ff       	sbrs	r18, 6
    e15a:	03 c0       	rjmp	.+6      	; 0xe162 <vfprintf+0x12a>
    e15c:	65 2d       	mov	r22, r5
    e15e:	70 e0       	ldi	r23, 0x00	; 0
    e160:	02 c0       	rjmp	.+4      	; 0xe166 <vfprintf+0x12e>
    e162:	6f ef       	ldi	r22, 0xFF	; 255
    e164:	7f ef       	ldi	r23, 0xFF	; 255
    e166:	c5 01       	movw	r24, r10
    e168:	2c 87       	std	Y+12, r18	; 0x0c
    e16a:	0e 94 ee 71 	call	0xe3dc	; 0xe3dc <strnlen>
    e16e:	2c 01       	movw	r4, r24
    e170:	83 01       	movw	r16, r6
    e172:	2c 85       	ldd	r18, Y+12	; 0x0c
    e174:	2f 77       	andi	r18, 0x7F	; 127
    e176:	22 2e       	mov	r2, r18
    e178:	17 c0       	rjmp	.+46     	; 0xe1a8 <vfprintf+0x170>
    e17a:	38 01       	movw	r6, r16
    e17c:	f2 e0       	ldi	r31, 0x02	; 2
    e17e:	6f 0e       	add	r6, r31
    e180:	71 1c       	adc	r7, r1
    e182:	f8 01       	movw	r30, r16
    e184:	a0 80       	ld	r10, Z
    e186:	b1 80       	ldd	r11, Z+1	; 0x01
    e188:	26 ff       	sbrs	r18, 6
    e18a:	03 c0       	rjmp	.+6      	; 0xe192 <vfprintf+0x15a>
    e18c:	65 2d       	mov	r22, r5
    e18e:	70 e0       	ldi	r23, 0x00	; 0
    e190:	02 c0       	rjmp	.+4      	; 0xe196 <vfprintf+0x15e>
    e192:	6f ef       	ldi	r22, 0xFF	; 255
    e194:	7f ef       	ldi	r23, 0xFF	; 255
    e196:	c5 01       	movw	r24, r10
    e198:	2c 87       	std	Y+12, r18	; 0x0c
    e19a:	0e 94 e4 6f 	call	0xdfc8	; 0xdfc8 <strnlen_P>
    e19e:	2c 01       	movw	r4, r24
    e1a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    e1a2:	20 68       	ori	r18, 0x80	; 128
    e1a4:	22 2e       	mov	r2, r18
    e1a6:	83 01       	movw	r16, r6
    e1a8:	23 fc       	sbrc	r2, 3
    e1aa:	1b c0       	rjmp	.+54     	; 0xe1e2 <vfprintf+0x1aa>
    e1ac:	83 2d       	mov	r24, r3
    e1ae:	90 e0       	ldi	r25, 0x00	; 0
    e1b0:	48 16       	cp	r4, r24
    e1b2:	59 06       	cpc	r5, r25
    e1b4:	b0 f4       	brcc	.+44     	; 0xe1e2 <vfprintf+0x1aa>
    e1b6:	b7 01       	movw	r22, r14
    e1b8:	80 e2       	ldi	r24, 0x20	; 32
    e1ba:	90 e0       	ldi	r25, 0x00	; 0
    e1bc:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e1c0:	3a 94       	dec	r3
    e1c2:	f4 cf       	rjmp	.-24     	; 0xe1ac <vfprintf+0x174>
    e1c4:	f5 01       	movw	r30, r10
    e1c6:	27 fc       	sbrc	r2, 7
    e1c8:	85 91       	lpm	r24, Z+
    e1ca:	27 fe       	sbrs	r2, 7
    e1cc:	81 91       	ld	r24, Z+
    e1ce:	5f 01       	movw	r10, r30
    e1d0:	b7 01       	movw	r22, r14
    e1d2:	90 e0       	ldi	r25, 0x00	; 0
    e1d4:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e1d8:	31 10       	cpse	r3, r1
    e1da:	3a 94       	dec	r3
    e1dc:	f1 e0       	ldi	r31, 0x01	; 1
    e1de:	4f 1a       	sub	r4, r31
    e1e0:	51 08       	sbc	r5, r1
    e1e2:	41 14       	cp	r4, r1
    e1e4:	51 04       	cpc	r5, r1
    e1e6:	71 f7       	brne	.-36     	; 0xe1c4 <vfprintf+0x18c>
    e1e8:	e5 c0       	rjmp	.+458    	; 0xe3b4 <vfprintf+0x37c>
    e1ea:	84 36       	cpi	r24, 0x64	; 100
    e1ec:	11 f0       	breq	.+4      	; 0xe1f2 <vfprintf+0x1ba>
    e1ee:	89 36       	cpi	r24, 0x69	; 105
    e1f0:	39 f5       	brne	.+78     	; 0xe240 <vfprintf+0x208>
    e1f2:	f8 01       	movw	r30, r16
    e1f4:	27 ff       	sbrs	r18, 7
    e1f6:	07 c0       	rjmp	.+14     	; 0xe206 <vfprintf+0x1ce>
    e1f8:	60 81       	ld	r22, Z
    e1fa:	71 81       	ldd	r23, Z+1	; 0x01
    e1fc:	82 81       	ldd	r24, Z+2	; 0x02
    e1fe:	93 81       	ldd	r25, Z+3	; 0x03
    e200:	0c 5f       	subi	r16, 0xFC	; 252
    e202:	1f 4f       	sbci	r17, 0xFF	; 255
    e204:	08 c0       	rjmp	.+16     	; 0xe216 <vfprintf+0x1de>
    e206:	60 81       	ld	r22, Z
    e208:	71 81       	ldd	r23, Z+1	; 0x01
    e20a:	88 27       	eor	r24, r24
    e20c:	77 fd       	sbrc	r23, 7
    e20e:	80 95       	com	r24
    e210:	98 2f       	mov	r25, r24
    e212:	0e 5f       	subi	r16, 0xFE	; 254
    e214:	1f 4f       	sbci	r17, 0xFF	; 255
    e216:	2f 76       	andi	r18, 0x6F	; 111
    e218:	72 2e       	mov	r7, r18
    e21a:	97 ff       	sbrs	r25, 7
    e21c:	09 c0       	rjmp	.+18     	; 0xe230 <vfprintf+0x1f8>
    e21e:	90 95       	com	r25
    e220:	80 95       	com	r24
    e222:	70 95       	com	r23
    e224:	61 95       	neg	r22
    e226:	7f 4f       	sbci	r23, 0xFF	; 255
    e228:	8f 4f       	sbci	r24, 0xFF	; 255
    e22a:	9f 4f       	sbci	r25, 0xFF	; 255
    e22c:	20 68       	ori	r18, 0x80	; 128
    e22e:	72 2e       	mov	r7, r18
    e230:	2a e0       	ldi	r18, 0x0A	; 10
    e232:	30 e0       	ldi	r19, 0x00	; 0
    e234:	a4 01       	movw	r20, r8
    e236:	0e 94 31 72 	call	0xe462	; 0xe462 <__ultoa_invert>
    e23a:	a8 2e       	mov	r10, r24
    e23c:	a8 18       	sub	r10, r8
    e23e:	44 c0       	rjmp	.+136    	; 0xe2c8 <vfprintf+0x290>
    e240:	85 37       	cpi	r24, 0x75	; 117
    e242:	29 f4       	brne	.+10     	; 0xe24e <vfprintf+0x216>
    e244:	2f 7e       	andi	r18, 0xEF	; 239
    e246:	b2 2e       	mov	r11, r18
    e248:	2a e0       	ldi	r18, 0x0A	; 10
    e24a:	30 e0       	ldi	r19, 0x00	; 0
    e24c:	25 c0       	rjmp	.+74     	; 0xe298 <vfprintf+0x260>
    e24e:	f2 2f       	mov	r31, r18
    e250:	f9 7f       	andi	r31, 0xF9	; 249
    e252:	bf 2e       	mov	r11, r31
    e254:	8f 36       	cpi	r24, 0x6F	; 111
    e256:	c1 f0       	breq	.+48     	; 0xe288 <vfprintf+0x250>
    e258:	18 f4       	brcc	.+6      	; 0xe260 <vfprintf+0x228>
    e25a:	88 35       	cpi	r24, 0x58	; 88
    e25c:	79 f0       	breq	.+30     	; 0xe27c <vfprintf+0x244>
    e25e:	b4 c0       	rjmp	.+360    	; 0xe3c8 <vfprintf+0x390>
    e260:	80 37       	cpi	r24, 0x70	; 112
    e262:	19 f0       	breq	.+6      	; 0xe26a <vfprintf+0x232>
    e264:	88 37       	cpi	r24, 0x78	; 120
    e266:	21 f0       	breq	.+8      	; 0xe270 <vfprintf+0x238>
    e268:	af c0       	rjmp	.+350    	; 0xe3c8 <vfprintf+0x390>
    e26a:	2f 2f       	mov	r18, r31
    e26c:	20 61       	ori	r18, 0x10	; 16
    e26e:	b2 2e       	mov	r11, r18
    e270:	b4 fe       	sbrs	r11, 4
    e272:	0d c0       	rjmp	.+26     	; 0xe28e <vfprintf+0x256>
    e274:	8b 2d       	mov	r24, r11
    e276:	84 60       	ori	r24, 0x04	; 4
    e278:	b8 2e       	mov	r11, r24
    e27a:	09 c0       	rjmp	.+18     	; 0xe28e <vfprintf+0x256>
    e27c:	24 ff       	sbrs	r18, 4
    e27e:	0a c0       	rjmp	.+20     	; 0xe294 <vfprintf+0x25c>
    e280:	9f 2f       	mov	r25, r31
    e282:	96 60       	ori	r25, 0x06	; 6
    e284:	b9 2e       	mov	r11, r25
    e286:	06 c0       	rjmp	.+12     	; 0xe294 <vfprintf+0x25c>
    e288:	28 e0       	ldi	r18, 0x08	; 8
    e28a:	30 e0       	ldi	r19, 0x00	; 0
    e28c:	05 c0       	rjmp	.+10     	; 0xe298 <vfprintf+0x260>
    e28e:	20 e1       	ldi	r18, 0x10	; 16
    e290:	30 e0       	ldi	r19, 0x00	; 0
    e292:	02 c0       	rjmp	.+4      	; 0xe298 <vfprintf+0x260>
    e294:	20 e1       	ldi	r18, 0x10	; 16
    e296:	32 e0       	ldi	r19, 0x02	; 2
    e298:	f8 01       	movw	r30, r16
    e29a:	b7 fe       	sbrs	r11, 7
    e29c:	07 c0       	rjmp	.+14     	; 0xe2ac <vfprintf+0x274>
    e29e:	60 81       	ld	r22, Z
    e2a0:	71 81       	ldd	r23, Z+1	; 0x01
    e2a2:	82 81       	ldd	r24, Z+2	; 0x02
    e2a4:	93 81       	ldd	r25, Z+3	; 0x03
    e2a6:	0c 5f       	subi	r16, 0xFC	; 252
    e2a8:	1f 4f       	sbci	r17, 0xFF	; 255
    e2aa:	06 c0       	rjmp	.+12     	; 0xe2b8 <vfprintf+0x280>
    e2ac:	60 81       	ld	r22, Z
    e2ae:	71 81       	ldd	r23, Z+1	; 0x01
    e2b0:	80 e0       	ldi	r24, 0x00	; 0
    e2b2:	90 e0       	ldi	r25, 0x00	; 0
    e2b4:	0e 5f       	subi	r16, 0xFE	; 254
    e2b6:	1f 4f       	sbci	r17, 0xFF	; 255
    e2b8:	a4 01       	movw	r20, r8
    e2ba:	0e 94 31 72 	call	0xe462	; 0xe462 <__ultoa_invert>
    e2be:	a8 2e       	mov	r10, r24
    e2c0:	a8 18       	sub	r10, r8
    e2c2:	fb 2d       	mov	r31, r11
    e2c4:	ff 77       	andi	r31, 0x7F	; 127
    e2c6:	7f 2e       	mov	r7, r31
    e2c8:	76 fe       	sbrs	r7, 6
    e2ca:	0b c0       	rjmp	.+22     	; 0xe2e2 <vfprintf+0x2aa>
    e2cc:	37 2d       	mov	r19, r7
    e2ce:	3e 7f       	andi	r19, 0xFE	; 254
    e2d0:	a5 14       	cp	r10, r5
    e2d2:	50 f4       	brcc	.+20     	; 0xe2e8 <vfprintf+0x2b0>
    e2d4:	74 fe       	sbrs	r7, 4
    e2d6:	0a c0       	rjmp	.+20     	; 0xe2ec <vfprintf+0x2b4>
    e2d8:	72 fc       	sbrc	r7, 2
    e2da:	08 c0       	rjmp	.+16     	; 0xe2ec <vfprintf+0x2b4>
    e2dc:	37 2d       	mov	r19, r7
    e2de:	3e 7e       	andi	r19, 0xEE	; 238
    e2e0:	05 c0       	rjmp	.+10     	; 0xe2ec <vfprintf+0x2b4>
    e2e2:	ba 2c       	mov	r11, r10
    e2e4:	37 2d       	mov	r19, r7
    e2e6:	03 c0       	rjmp	.+6      	; 0xe2ee <vfprintf+0x2b6>
    e2e8:	ba 2c       	mov	r11, r10
    e2ea:	01 c0       	rjmp	.+2      	; 0xe2ee <vfprintf+0x2b6>
    e2ec:	b5 2c       	mov	r11, r5
    e2ee:	34 ff       	sbrs	r19, 4
    e2f0:	0d c0       	rjmp	.+26     	; 0xe30c <vfprintf+0x2d4>
    e2f2:	fe 01       	movw	r30, r28
    e2f4:	ea 0d       	add	r30, r10
    e2f6:	f1 1d       	adc	r31, r1
    e2f8:	80 81       	ld	r24, Z
    e2fa:	80 33       	cpi	r24, 0x30	; 48
    e2fc:	11 f4       	brne	.+4      	; 0xe302 <vfprintf+0x2ca>
    e2fe:	39 7e       	andi	r19, 0xE9	; 233
    e300:	09 c0       	rjmp	.+18     	; 0xe314 <vfprintf+0x2dc>
    e302:	32 ff       	sbrs	r19, 2
    e304:	06 c0       	rjmp	.+12     	; 0xe312 <vfprintf+0x2da>
    e306:	b3 94       	inc	r11
    e308:	b3 94       	inc	r11
    e30a:	04 c0       	rjmp	.+8      	; 0xe314 <vfprintf+0x2dc>
    e30c:	83 2f       	mov	r24, r19
    e30e:	86 78       	andi	r24, 0x86	; 134
    e310:	09 f0       	breq	.+2      	; 0xe314 <vfprintf+0x2dc>
    e312:	b3 94       	inc	r11
    e314:	33 fd       	sbrc	r19, 3
    e316:	13 c0       	rjmp	.+38     	; 0xe33e <vfprintf+0x306>
    e318:	30 ff       	sbrs	r19, 0
    e31a:	06 c0       	rjmp	.+12     	; 0xe328 <vfprintf+0x2f0>
    e31c:	5a 2c       	mov	r5, r10
    e31e:	b3 14       	cp	r11, r3
    e320:	18 f4       	brcc	.+6      	; 0xe328 <vfprintf+0x2f0>
    e322:	53 0c       	add	r5, r3
    e324:	5b 18       	sub	r5, r11
    e326:	b3 2c       	mov	r11, r3
    e328:	b3 14       	cp	r11, r3
    e32a:	68 f4       	brcc	.+26     	; 0xe346 <vfprintf+0x30e>
    e32c:	b7 01       	movw	r22, r14
    e32e:	80 e2       	ldi	r24, 0x20	; 32
    e330:	90 e0       	ldi	r25, 0x00	; 0
    e332:	3c 87       	std	Y+12, r19	; 0x0c
    e334:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e338:	b3 94       	inc	r11
    e33a:	3c 85       	ldd	r19, Y+12	; 0x0c
    e33c:	f5 cf       	rjmp	.-22     	; 0xe328 <vfprintf+0x2f0>
    e33e:	b3 14       	cp	r11, r3
    e340:	10 f4       	brcc	.+4      	; 0xe346 <vfprintf+0x30e>
    e342:	3b 18       	sub	r3, r11
    e344:	01 c0       	rjmp	.+2      	; 0xe348 <vfprintf+0x310>
    e346:	31 2c       	mov	r3, r1
    e348:	34 ff       	sbrs	r19, 4
    e34a:	12 c0       	rjmp	.+36     	; 0xe370 <vfprintf+0x338>
    e34c:	b7 01       	movw	r22, r14
    e34e:	80 e3       	ldi	r24, 0x30	; 48
    e350:	90 e0       	ldi	r25, 0x00	; 0
    e352:	3c 87       	std	Y+12, r19	; 0x0c
    e354:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e358:	3c 85       	ldd	r19, Y+12	; 0x0c
    e35a:	32 ff       	sbrs	r19, 2
    e35c:	17 c0       	rjmp	.+46     	; 0xe38c <vfprintf+0x354>
    e35e:	31 fd       	sbrc	r19, 1
    e360:	03 c0       	rjmp	.+6      	; 0xe368 <vfprintf+0x330>
    e362:	88 e7       	ldi	r24, 0x78	; 120
    e364:	90 e0       	ldi	r25, 0x00	; 0
    e366:	02 c0       	rjmp	.+4      	; 0xe36c <vfprintf+0x334>
    e368:	88 e5       	ldi	r24, 0x58	; 88
    e36a:	90 e0       	ldi	r25, 0x00	; 0
    e36c:	b7 01       	movw	r22, r14
    e36e:	0c c0       	rjmp	.+24     	; 0xe388 <vfprintf+0x350>
    e370:	83 2f       	mov	r24, r19
    e372:	86 78       	andi	r24, 0x86	; 134
    e374:	59 f0       	breq	.+22     	; 0xe38c <vfprintf+0x354>
    e376:	31 ff       	sbrs	r19, 1
    e378:	02 c0       	rjmp	.+4      	; 0xe37e <vfprintf+0x346>
    e37a:	8b e2       	ldi	r24, 0x2B	; 43
    e37c:	01 c0       	rjmp	.+2      	; 0xe380 <vfprintf+0x348>
    e37e:	80 e2       	ldi	r24, 0x20	; 32
    e380:	37 fd       	sbrc	r19, 7
    e382:	8d e2       	ldi	r24, 0x2D	; 45
    e384:	b7 01       	movw	r22, r14
    e386:	90 e0       	ldi	r25, 0x00	; 0
    e388:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e38c:	a5 14       	cp	r10, r5
    e38e:	38 f4       	brcc	.+14     	; 0xe39e <vfprintf+0x366>
    e390:	b7 01       	movw	r22, r14
    e392:	80 e3       	ldi	r24, 0x30	; 48
    e394:	90 e0       	ldi	r25, 0x00	; 0
    e396:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e39a:	5a 94       	dec	r5
    e39c:	f7 cf       	rjmp	.-18     	; 0xe38c <vfprintf+0x354>
    e39e:	aa 94       	dec	r10
    e3a0:	f4 01       	movw	r30, r8
    e3a2:	ea 0d       	add	r30, r10
    e3a4:	f1 1d       	adc	r31, r1
    e3a6:	80 81       	ld	r24, Z
    e3a8:	b7 01       	movw	r22, r14
    e3aa:	90 e0       	ldi	r25, 0x00	; 0
    e3ac:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e3b0:	a1 10       	cpse	r10, r1
    e3b2:	f5 cf       	rjmp	.-22     	; 0xe39e <vfprintf+0x366>
    e3b4:	33 20       	and	r3, r3
    e3b6:	09 f4       	brne	.+2      	; 0xe3ba <vfprintf+0x382>
    e3b8:	51 ce       	rjmp	.-862    	; 0xe05c <vfprintf+0x24>
    e3ba:	b7 01       	movw	r22, r14
    e3bc:	80 e2       	ldi	r24, 0x20	; 32
    e3be:	90 e0       	ldi	r25, 0x00	; 0
    e3c0:	0e 94 f9 71 	call	0xe3f2	; 0xe3f2 <fputc>
    e3c4:	3a 94       	dec	r3
    e3c6:	f6 cf       	rjmp	.-20     	; 0xe3b4 <vfprintf+0x37c>
    e3c8:	f7 01       	movw	r30, r14
    e3ca:	86 81       	ldd	r24, Z+6	; 0x06
    e3cc:	97 81       	ldd	r25, Z+7	; 0x07
    e3ce:	02 c0       	rjmp	.+4      	; 0xe3d4 <vfprintf+0x39c>
    e3d0:	8f ef       	ldi	r24, 0xFF	; 255
    e3d2:	9f ef       	ldi	r25, 0xFF	; 255
    e3d4:	2c 96       	adiw	r28, 0x0c	; 12
    e3d6:	e2 e1       	ldi	r30, 0x12	; 18
    e3d8:	0c 94 ab 72 	jmp	0xe556	; 0xe556 <__epilogue_restores__>

0000e3dc <strnlen>:
    e3dc:	fc 01       	movw	r30, r24
    e3de:	61 50       	subi	r22, 0x01	; 1
    e3e0:	70 40       	sbci	r23, 0x00	; 0
    e3e2:	01 90       	ld	r0, Z+
    e3e4:	01 10       	cpse	r0, r1
    e3e6:	d8 f7       	brcc	.-10     	; 0xe3de <strnlen+0x2>
    e3e8:	80 95       	com	r24
    e3ea:	90 95       	com	r25
    e3ec:	8e 0f       	add	r24, r30
    e3ee:	9f 1f       	adc	r25, r31
    e3f0:	08 95       	ret

0000e3f2 <fputc>:
    e3f2:	0f 93       	push	r16
    e3f4:	1f 93       	push	r17
    e3f6:	cf 93       	push	r28
    e3f8:	df 93       	push	r29
    e3fa:	fb 01       	movw	r30, r22
    e3fc:	23 81       	ldd	r18, Z+3	; 0x03
    e3fe:	21 fd       	sbrc	r18, 1
    e400:	03 c0       	rjmp	.+6      	; 0xe408 <fputc+0x16>
    e402:	8f ef       	ldi	r24, 0xFF	; 255
    e404:	9f ef       	ldi	r25, 0xFF	; 255
    e406:	28 c0       	rjmp	.+80     	; 0xe458 <fputc+0x66>
    e408:	22 ff       	sbrs	r18, 2
    e40a:	16 c0       	rjmp	.+44     	; 0xe438 <fputc+0x46>
    e40c:	46 81       	ldd	r20, Z+6	; 0x06
    e40e:	57 81       	ldd	r21, Z+7	; 0x07
    e410:	24 81       	ldd	r18, Z+4	; 0x04
    e412:	35 81       	ldd	r19, Z+5	; 0x05
    e414:	42 17       	cp	r20, r18
    e416:	53 07       	cpc	r21, r19
    e418:	44 f4       	brge	.+16     	; 0xe42a <fputc+0x38>
    e41a:	a0 81       	ld	r26, Z
    e41c:	b1 81       	ldd	r27, Z+1	; 0x01
    e41e:	9d 01       	movw	r18, r26
    e420:	2f 5f       	subi	r18, 0xFF	; 255
    e422:	3f 4f       	sbci	r19, 0xFF	; 255
    e424:	31 83       	std	Z+1, r19	; 0x01
    e426:	20 83       	st	Z, r18
    e428:	8c 93       	st	X, r24
    e42a:	26 81       	ldd	r18, Z+6	; 0x06
    e42c:	37 81       	ldd	r19, Z+7	; 0x07
    e42e:	2f 5f       	subi	r18, 0xFF	; 255
    e430:	3f 4f       	sbci	r19, 0xFF	; 255
    e432:	37 83       	std	Z+7, r19	; 0x07
    e434:	26 83       	std	Z+6, r18	; 0x06
    e436:	10 c0       	rjmp	.+32     	; 0xe458 <fputc+0x66>
    e438:	eb 01       	movw	r28, r22
    e43a:	09 2f       	mov	r16, r25
    e43c:	18 2f       	mov	r17, r24
    e43e:	00 84       	ldd	r0, Z+8	; 0x08
    e440:	f1 85       	ldd	r31, Z+9	; 0x09
    e442:	e0 2d       	mov	r30, r0
    e444:	09 95       	icall
    e446:	89 2b       	or	r24, r25
    e448:	e1 f6       	brne	.-72     	; 0xe402 <fputc+0x10>
    e44a:	8e 81       	ldd	r24, Y+6	; 0x06
    e44c:	9f 81       	ldd	r25, Y+7	; 0x07
    e44e:	01 96       	adiw	r24, 0x01	; 1
    e450:	9f 83       	std	Y+7, r25	; 0x07
    e452:	8e 83       	std	Y+6, r24	; 0x06
    e454:	81 2f       	mov	r24, r17
    e456:	90 2f       	mov	r25, r16
    e458:	df 91       	pop	r29
    e45a:	cf 91       	pop	r28
    e45c:	1f 91       	pop	r17
    e45e:	0f 91       	pop	r16
    e460:	08 95       	ret

0000e462 <__ultoa_invert>:
    e462:	fa 01       	movw	r30, r20
    e464:	aa 27       	eor	r26, r26
    e466:	28 30       	cpi	r18, 0x08	; 8
    e468:	51 f1       	breq	.+84     	; 0xe4be <__ultoa_invert+0x5c>
    e46a:	20 31       	cpi	r18, 0x10	; 16
    e46c:	81 f1       	breq	.+96     	; 0xe4ce <__ultoa_invert+0x6c>
    e46e:	e8 94       	clt
    e470:	6f 93       	push	r22
    e472:	6e 7f       	andi	r22, 0xFE	; 254
    e474:	6e 5f       	subi	r22, 0xFE	; 254
    e476:	7f 4f       	sbci	r23, 0xFF	; 255
    e478:	8f 4f       	sbci	r24, 0xFF	; 255
    e47a:	9f 4f       	sbci	r25, 0xFF	; 255
    e47c:	af 4f       	sbci	r26, 0xFF	; 255
    e47e:	b1 e0       	ldi	r27, 0x01	; 1
    e480:	3e d0       	rcall	.+124    	; 0xe4fe <__ultoa_invert+0x9c>
    e482:	b4 e0       	ldi	r27, 0x04	; 4
    e484:	3c d0       	rcall	.+120    	; 0xe4fe <__ultoa_invert+0x9c>
    e486:	67 0f       	add	r22, r23
    e488:	78 1f       	adc	r23, r24
    e48a:	89 1f       	adc	r24, r25
    e48c:	9a 1f       	adc	r25, r26
    e48e:	a1 1d       	adc	r26, r1
    e490:	68 0f       	add	r22, r24
    e492:	79 1f       	adc	r23, r25
    e494:	8a 1f       	adc	r24, r26
    e496:	91 1d       	adc	r25, r1
    e498:	a1 1d       	adc	r26, r1
    e49a:	6a 0f       	add	r22, r26
    e49c:	71 1d       	adc	r23, r1
    e49e:	81 1d       	adc	r24, r1
    e4a0:	91 1d       	adc	r25, r1
    e4a2:	a1 1d       	adc	r26, r1
    e4a4:	20 d0       	rcall	.+64     	; 0xe4e6 <__ultoa_invert+0x84>
    e4a6:	09 f4       	brne	.+2      	; 0xe4aa <__ultoa_invert+0x48>
    e4a8:	68 94       	set
    e4aa:	3f 91       	pop	r19
    e4ac:	2a e0       	ldi	r18, 0x0A	; 10
    e4ae:	26 9f       	mul	r18, r22
    e4b0:	11 24       	eor	r1, r1
    e4b2:	30 19       	sub	r19, r0
    e4b4:	30 5d       	subi	r19, 0xD0	; 208
    e4b6:	31 93       	st	Z+, r19
    e4b8:	de f6       	brtc	.-74     	; 0xe470 <__ultoa_invert+0xe>
    e4ba:	cf 01       	movw	r24, r30
    e4bc:	08 95       	ret
    e4be:	46 2f       	mov	r20, r22
    e4c0:	47 70       	andi	r20, 0x07	; 7
    e4c2:	40 5d       	subi	r20, 0xD0	; 208
    e4c4:	41 93       	st	Z+, r20
    e4c6:	b3 e0       	ldi	r27, 0x03	; 3
    e4c8:	0f d0       	rcall	.+30     	; 0xe4e8 <__ultoa_invert+0x86>
    e4ca:	c9 f7       	brne	.-14     	; 0xe4be <__ultoa_invert+0x5c>
    e4cc:	f6 cf       	rjmp	.-20     	; 0xe4ba <__ultoa_invert+0x58>
    e4ce:	46 2f       	mov	r20, r22
    e4d0:	4f 70       	andi	r20, 0x0F	; 15
    e4d2:	40 5d       	subi	r20, 0xD0	; 208
    e4d4:	4a 33       	cpi	r20, 0x3A	; 58
    e4d6:	18 f0       	brcs	.+6      	; 0xe4de <__ultoa_invert+0x7c>
    e4d8:	49 5d       	subi	r20, 0xD9	; 217
    e4da:	31 fd       	sbrc	r19, 1
    e4dc:	40 52       	subi	r20, 0x20	; 32
    e4de:	41 93       	st	Z+, r20
    e4e0:	02 d0       	rcall	.+4      	; 0xe4e6 <__ultoa_invert+0x84>
    e4e2:	a9 f7       	brne	.-22     	; 0xe4ce <__ultoa_invert+0x6c>
    e4e4:	ea cf       	rjmp	.-44     	; 0xe4ba <__ultoa_invert+0x58>
    e4e6:	b4 e0       	ldi	r27, 0x04	; 4
    e4e8:	a6 95       	lsr	r26
    e4ea:	97 95       	ror	r25
    e4ec:	87 95       	ror	r24
    e4ee:	77 95       	ror	r23
    e4f0:	67 95       	ror	r22
    e4f2:	ba 95       	dec	r27
    e4f4:	c9 f7       	brne	.-14     	; 0xe4e8 <__ultoa_invert+0x86>
    e4f6:	00 97       	sbiw	r24, 0x00	; 0
    e4f8:	61 05       	cpc	r22, r1
    e4fa:	71 05       	cpc	r23, r1
    e4fc:	08 95       	ret
    e4fe:	9b 01       	movw	r18, r22
    e500:	ac 01       	movw	r20, r24
    e502:	0a 2e       	mov	r0, r26
    e504:	06 94       	lsr	r0
    e506:	57 95       	ror	r21
    e508:	47 95       	ror	r20
    e50a:	37 95       	ror	r19
    e50c:	27 95       	ror	r18
    e50e:	ba 95       	dec	r27
    e510:	c9 f7       	brne	.-14     	; 0xe504 <__ultoa_invert+0xa2>
    e512:	62 0f       	add	r22, r18
    e514:	73 1f       	adc	r23, r19
    e516:	84 1f       	adc	r24, r20
    e518:	95 1f       	adc	r25, r21
    e51a:	a0 1d       	adc	r26, r0
    e51c:	08 95       	ret

0000e51e <__prologue_saves__>:
    e51e:	2f 92       	push	r2
    e520:	3f 92       	push	r3
    e522:	4f 92       	push	r4
    e524:	5f 92       	push	r5
    e526:	6f 92       	push	r6
    e528:	7f 92       	push	r7
    e52a:	8f 92       	push	r8
    e52c:	9f 92       	push	r9
    e52e:	af 92       	push	r10
    e530:	bf 92       	push	r11
    e532:	cf 92       	push	r12
    e534:	df 92       	push	r13
    e536:	ef 92       	push	r14
    e538:	ff 92       	push	r15
    e53a:	0f 93       	push	r16
    e53c:	1f 93       	push	r17
    e53e:	cf 93       	push	r28
    e540:	df 93       	push	r29
    e542:	cd b7       	in	r28, 0x3d	; 61
    e544:	de b7       	in	r29, 0x3e	; 62
    e546:	ca 1b       	sub	r28, r26
    e548:	db 0b       	sbc	r29, r27
    e54a:	0f b6       	in	r0, 0x3f	; 63
    e54c:	f8 94       	cli
    e54e:	de bf       	out	0x3e, r29	; 62
    e550:	0f be       	out	0x3f, r0	; 63
    e552:	cd bf       	out	0x3d, r28	; 61
    e554:	09 94       	ijmp

0000e556 <__epilogue_restores__>:
    e556:	2a 88       	ldd	r2, Y+18	; 0x12
    e558:	39 88       	ldd	r3, Y+17	; 0x11
    e55a:	48 88       	ldd	r4, Y+16	; 0x10
    e55c:	5f 84       	ldd	r5, Y+15	; 0x0f
    e55e:	6e 84       	ldd	r6, Y+14	; 0x0e
    e560:	7d 84       	ldd	r7, Y+13	; 0x0d
    e562:	8c 84       	ldd	r8, Y+12	; 0x0c
    e564:	9b 84       	ldd	r9, Y+11	; 0x0b
    e566:	aa 84       	ldd	r10, Y+10	; 0x0a
    e568:	b9 84       	ldd	r11, Y+9	; 0x09
    e56a:	c8 84       	ldd	r12, Y+8	; 0x08
    e56c:	df 80       	ldd	r13, Y+7	; 0x07
    e56e:	ee 80       	ldd	r14, Y+6	; 0x06
    e570:	fd 80       	ldd	r15, Y+5	; 0x05
    e572:	0c 81       	ldd	r16, Y+4	; 0x04
    e574:	1b 81       	ldd	r17, Y+3	; 0x03
    e576:	aa 81       	ldd	r26, Y+2	; 0x02
    e578:	b9 81       	ldd	r27, Y+1	; 0x01
    e57a:	ce 0f       	add	r28, r30
    e57c:	d1 1d       	adc	r29, r1
    e57e:	0f b6       	in	r0, 0x3f	; 63
    e580:	f8 94       	cli
    e582:	de bf       	out	0x3e, r29	; 62
    e584:	0f be       	out	0x3f, r0	; 63
    e586:	cd bf       	out	0x3d, r28	; 61
    e588:	ed 01       	movw	r28, r26
    e58a:	08 95       	ret

0000e58c <_exit>:
    e58c:	f8 94       	cli

0000e58e <__stop_program>:
    e58e:	ff cf       	rjmp	.-2      	; 0xe58e <__stop_program>
