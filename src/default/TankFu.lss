
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000e518  0000e618  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e518  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ef1  00800106  00800106  0000e626  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e620  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000eb9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000edf2  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005d0  00000000  00000000  0000ee08  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00008c66  00000000  00000000  0000f3d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  0001803e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001ebd  00000000  00000000  0001956b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001354  00000000  00000000  0001b428  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ba1  00000000  00000000  0001c77c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007e92  00000000  00000000  0001e31d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  000261b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 44 	jmp	0x8900	; 0x8900 <__ctors_end>
       4:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
       8:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
       c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      10:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      14:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      18:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      1c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      20:	0c 94 ec 48 	jmp	0x91d8	; 0x91d8 <__vector_8>
      24:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      28:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      2c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      30:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      34:	0c 94 c3 46 	jmp	0x8d86	; 0x8d86 <__vector_13>
      38:	0c 94 03 47 	jmp	0x8e06	; 0x8e06 <__vector_14>
      3c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      40:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      44:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      48:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      4c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      50:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      54:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      58:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      5c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      60:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      64:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      68:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>
      6c:	0c 94 ed 44 	jmp	0x89da	; 0x89da <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	4e 4a 51 4a ac 4a b0 4a b8 4a 59 4a 5e 4a 63 4a     NJQJ.J.J.JYJ^JcJ
      ce:	c0 4a 66 4a 69 4a 6c 4a a9 4a                       .JfJiJlJ.J

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <default_scores>:
      e4:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
      f4:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000102 <default_handles>:
     102:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     112:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000120 <strLevels>:
     120:	20 20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20 00        Boot Camp   .
     130:	20 54 68 65 20 42 72 69 63 6b 79 61 72 64 20 00      The Brickyard .
     140:	20 20 20 56 65 6c 6f 63 69 74 79 20 20 20 20 00        Velocity    .
     150:	20 20 20 20 20 4d 61 7a 65 20 20 20 20 20 20 00          Maze      .
     160:	20 20 20 52 69 63 68 6f 63 68 65 74 20 20 20 00        Richochet   .
     170:	20 54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20 00      The Honey Pot .
     180:	20 20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20 00       Focal Point  .
     190:	49 74 27 73 20 4e 6f 74 20 46 61 69 72 21 20 00     It's Not Fair! .
     1a0:	20 20 4d 75 63 68 20 42 65 74 74 65 72 20 20 00       Much Better  .
     1b0:	20 20 54 68 65 20 48 61 72 62 6f 75 72 20 20 00       The Harbour  .

000001c0 <strPaused>:
     1c0:	50 61 75 73 65 64 00                                Paused.

000001c7 <strExit>:
     1c7:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000001d0 <strTotal>:
     1d0:	54 6f 74 61 6c 3a 00                                Total:.

000001d7 <strScore>:
     1d7:	53 63 6f 72 65 3a 00                                Score:.

000001de <strBanterClear>:
     1de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001ed <banter_map>:
     1ed:	53 75 63 68 20 46 61 69 6c 20 20 20 20 20 00 4c     Such Fail     .L
     1fd:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     20d:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     21d:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     22d:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     23d:	2a 20 20 20 20 20 20 20 20 00 4e 6f 6f 62 20 20     *        .Noob  
     24d:	20 20 20 20 20 20 20 20 00 54 68 61 74 27 73 20             .That's 
     25d:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     26d:	70 3f 20 20 20 20 00 50 66 66 74 20 20 20 20 20     p?    .Pfft     
     27d:	20 20 20 20 20 00                                        .

00000283 <strFinalScore>:
     283:	46 69 6e 61 6c 20 53 63 6f 72 65 00                 Final Score.

0000028f <strBy>:
     28f:	42 79 00                                            By.

00000292 <strOwns>:
     292:	4f 77 6e 73 00                                      Owns.

00000297 <strChangeHandle>:
     297:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

000002a6 <strReset>:
     2a6:	52 65 73 65 74 20 44 65 66 61 75 6c 74 73 20 2d     Reset Defaults -
     2b6:	20 53 4c 20 28 35 73 29 00                           SL (5s).

000002bf <strCancelHandle>:
     2bf:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

000002ca <strConfirmHandle>:
     2ca:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

000002d6 <strSelectHandle>:
     2d6:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

000002e1 <strPlayer2>:
     2e1:	50 32 00                                            P2.

000002e4 <strPlayer1>:
     2e4:	50 31 00                                            P1.

000002e7 <strVertSep>:
     2e7:	7c 00                                               |.

000002e9 <strUnderline>:
     2e9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

000002f5 <strHandlesTitle>:
     2f5:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00000301 <strHighscores>:
     301:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

0000030b <str2Player>:
     30b:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

0000031c <str1Player>:
     31c:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

0000032a <strCopyright>:
     32a:	32 30 31 35 20 4c 61 77 72 65 6e 63 65 20 42 72     2015 Lawrence Br
     33a:	6f 6f 6b 73 00                                      ooks.

0000033f <my_patches>:
     33f:	02 31 12 00 00 4f 07 50 07 02 4c 0b 00 00 e3 06     .1...O.P..L.....
     34f:	e4 06 02 05 09 00 00 45 02 46 02 02 54 07 00 00     .......E.F..T...
     35f:	af 01 b0 01 02 52 07 00 00 00 00 01 00 02 50 07     .....R........P.
     36f:	00 00 00 00 01 00 02 30 05 00 00 1e 02 1f 02 02     .......0........
     37f:	be 03 00 00 70 01 71 01 02 05 09 00 00 45 02 46     ....p.q......E.F
     38f:	02 02 ba 03 00 00 00 00 01 00 02 4c 0b 00 00 e3     ...........L....
     39f:	06 e4 06 02 b6 03 00 00 00 00 01 00 02 b4 03 00     ................
     3af:	00 00 00 00 00                                      .....

000003b4 <ad_silence>:
	...

000003b6 <ad_tracks>:
	...

000003b8 <ad_tank_explode>:
	...

000003ba <ad_splash>:
	...

000003bc <ad_rocket>:
	...

000003be <ad_navigate>:
     3be:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     3ce:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     3de:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     3ee:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     3fe:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     40e:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     41e:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     42e:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     43e:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     44e:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     45e:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     46e:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     47e:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     48e:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     49e:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     4ae:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     4be:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     4ce:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     4de:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     4ee:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     4fe:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     50e:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     51e:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000530 <ad_metal>:
     530:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     540:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     550:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     560:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     570:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     580:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     590:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     5a0:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     5b0:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     5c0:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     5d0:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     5e0:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     5f0:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     600:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     610:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     620:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     630:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     640:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     650:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     660:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     670:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     680:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     690:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     6a0:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     6b0:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     6c0:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     6d0:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     6e0:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     6f0:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     700:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     710:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     720:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     730:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     740:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000750 <ad_level_start>:
	...

00000752 <ad_level_clear>:
	...

00000754 <ad_item>:
     754:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     764:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     774:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     784:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     794:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     7a4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     7b4:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     7c4:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     7d4:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     7e4:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     7f4:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     804:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     814:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     824:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     834:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     844:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     854:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     864:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     874:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     884:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     894:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     8a4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     8b4:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     8c4:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     8d4:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     8e4:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     8f4:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000905 <ad_cannonball>:
     905:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     915:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     925:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     935:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     945:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     955:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     965:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     975:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     985:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     995:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     9a5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     9b5:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     9c5:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     9d5:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     9e5:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     9f5:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     a05:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     a15:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     a25:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     a35:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     a45:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     a55:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     a65:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     a75:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     a85:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     a95:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     aa5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     ab5:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     ac5:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     ad5:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     ae5:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     af5:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     b05:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     b15:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     b25:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     b35:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b45:	ff ff ff ff ff 00 00                                .......

00000b4c <ad_brick_explode>:
     b4c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     b5c:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     b6c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     b7c:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     b8c:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     b9c:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     bac:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     bbc:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     bcc:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     bdc:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     bec:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     bfc:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     c0c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     c1c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     c2c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     c3c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     c4c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     c5c:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     c6c:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     c7c:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     c8c:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     c9c:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     cac:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     cbc:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     ccc:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     cdc:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     cec:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     cfc:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     d0c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     d1c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     d2c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     d3c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     d4c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     d5c:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     d6c:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     d7c:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     d8c:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     d9c:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     dac:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     dbc:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     dcc:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     ddc:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     dec:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     dfc:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     e0c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     e1c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     e2c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     e3c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     e4c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     e5c:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     e6c:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     e7c:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     e8c:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     e9c:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     eac:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     ebc:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     ecc:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     edc:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     eec:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     efc:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     f0c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     f1c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
     f2c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
     f3c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
     f4c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
     f5c:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
     f6c:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
     f7c:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
     f8c:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
     f9c:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
     fac:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
     fbc:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
     fcc:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
     fdc:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
     fec:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
     ffc:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    100c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    101c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    102c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    103c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    104c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    105c:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    106c:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    107c:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    108c:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    109c:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    10ac:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    10bc:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    10cc:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    10dc:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    10ec:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    10fc:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    110c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    111c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    112c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    113c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    114c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    115c:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    116c:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    117c:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    118c:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    119c:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    11ac:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    11bc:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    11cc:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    11dc:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    11ec:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    11fc:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    120c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    121c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    122c:	04 04 02 01 00                                      .....

00001231 <ad_banter>:
    1231:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1241:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1251:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1261:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1271:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1281:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1291:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    12a1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    12b1:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    12c1:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    12d1:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    12e1:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    12f1:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1301:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1311:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1321:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1331:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1341:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1351:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1361:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1371:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1381:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1391:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    13a1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    13b1:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    13c1:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    13d1:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    13e1:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    13f1:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1401:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1411:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1421:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1431:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1441:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1451:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1461:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1471:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1481:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1491:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    14a1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    14b1:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    14c1:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    14d1:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    14e1:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    14f1:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1501:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1511:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1521:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1531:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1541:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1551:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1561:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1571:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1581:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1591:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    15a1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    15b1:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    15c1:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    15d1:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    15e1:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    15f1:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1601:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1611:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1621:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1631:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1641:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1651:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1661:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1671:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1681:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1691:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    16a1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    16b1:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    16c1:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    16d1:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    16e1:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    16f1:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1701:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1711:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1721:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1731:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1741:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    1751:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    1761:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    1771:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    1781:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    1791:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    17a1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    17b1:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    17c1:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    17d1:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    17e1:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    17f1:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1801:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1811:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1821:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1831:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1841:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    1851:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    1861:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    1871:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    1881:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    1891:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    18a1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    18b1:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    18c1:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    18d1:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    18e1:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    18f1:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1901:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1911:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1921:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1931:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1941:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1951:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1961:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1971:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001982 <level_data>:
    1982:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1992:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    19ba:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    19d2:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    19e2:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    19f2:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1a0e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1a1e:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a2e:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1a4a:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1a6a:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1a7a:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1a8a:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1a9a:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1aaa:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1aba:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1aca:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1ada:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1aea:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1afa:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1b0a:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1b1a:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1b2a:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1b3a:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1b52:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1b62:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1b7e:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1b96:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1bb2:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bc2:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1bd2:	06 02 02 02 02 05 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1bee:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bfe:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1c0e:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1c2e:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1c4e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c5e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c8e:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1caa:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cc6:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1cd6:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1ce6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1cf6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1d06:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1d16:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1d26:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1d36:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1d46:	00 00 01 01 01 00 00 01 01 42 4d 4d 42 01 01 00     .........BMMB...
    1d56:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1d66:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1d76:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1d86:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1d96:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1da6:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1db6:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1dc6:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1dd6:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1de6:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1df6:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1e06:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1e16:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1e26:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e36:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1e46:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1e56:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1e66:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1e76:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1e86:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1e96:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1ea6:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1eb6:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1ec6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1ed6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1ee6:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1ef6:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1f06:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f1e:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1f3a:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    1f4a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f7a:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f96:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fd2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    200e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    202e:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    2046:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2062:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2072:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    2082:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    2092:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    20a2:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    20b2:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    20c2:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    20d2:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    20e2:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    20f2:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2102:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2112:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2122:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2132:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2142:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2152:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2162:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2172:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    218e:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    21b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21ee:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    220e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    222a:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    223a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    224a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    225a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    226a:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    227a:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    228a:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    229a:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    22aa:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    22ba:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    22ca:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    22da:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    22ea:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    22fa:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    230a:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    231a:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    232a:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    233a:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    234a:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    235a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2376:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    238e:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    239e:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    23ae:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    23be:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    23d6:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    23e6:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    23f6:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2406:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2416:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2426:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    243e:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d     .......BMMM..MMM
    244e:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    245e:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2476:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2486:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2496:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    24a6:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    24b6:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    24c6:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    24d6:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    24ee:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    24fe:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2516:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2526:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2536:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2546:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2556:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2572:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    258e:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    25ae:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    25be:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25ce:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    25ea:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    260a:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2626:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2646:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2656:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2666:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2676:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    268e:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    269e:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    26ae:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    26be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    26ce:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    26de:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    26fa:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    270a:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    271a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    272a:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    274a:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    2766:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    2786:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    279e:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    27ae:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27ca:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    27e6:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2806:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2816:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2826:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2836:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2846:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    2856:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    286e:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    287e:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    288e:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    289e:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    28ae:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    28be:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    28ce:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    28de:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    28ee:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2916:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2926:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2936:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2946:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    295e:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    296e:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    297e:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    298e:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    299e:	4d 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     MMMM............
    29ae:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    29be:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    29d6:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    29e6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    29f6:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2a06:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2a16:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a26:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2a36:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2a46:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2a56:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2a66:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2a76:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2a86:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a96:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2aa6:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2ab6:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2ad2:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2af6:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b06:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b16:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b26:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b36:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2b46:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2b5e:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2b6e:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2b7e:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2b8e:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2b9e:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2bae:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2bbe:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2bce:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2bde:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2bee:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2bfe:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c22:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c3e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2c4e:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2c5e:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2c6e:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2c7e:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2c8e:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2c9e:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2cae:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2cc6:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2cd6:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cf2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d12:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2d22:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2d32:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2d42:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d52:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2d62:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2d72:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2d82:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2d92:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2da2:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2db2:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2dc2:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2dd2:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2de2:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2df2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e02:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e12:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e22:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e3e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e5a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e7a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e96:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ea6:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2eb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ed2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2eea:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    2efa:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2f0a:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    2f1a:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    2f2a:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    2f3a:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    2f4a:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    2f5a:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    2f6a:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    2f7a:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    2f8a:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 4d 4d     .............BMM
    2f9a:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2fb2:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2fc2:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd2:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2fe2:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff2:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3002:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    301e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    303a:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    304a:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    305a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3076:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3096:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30d2:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30e2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30f2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3102:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    312a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    314a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3166:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3186:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3196:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    31a6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c2:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    31de:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    31f6:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3206:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3216:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3226:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3236:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3246:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3256:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3266:	00 42 4d 4d 42 00 00 00 00 00 00 00 00 00 00 00     .BMMB...........
    3276:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3286:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3296:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    32a6:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    32b6:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    32ce:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    32ee:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    330a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    332a:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    333a:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    334a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3366:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3382:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33a2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33be:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ce:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33de:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ee:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33fe:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    340e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    341e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    342e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    343e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    344e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    345e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    346e:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    347e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    348e:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    349e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ae:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    34be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ce:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    34de:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    34ee:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    34fe:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    350e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    351e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    352e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    353e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 42 42 42 42 42     MMMMMMMMM..BBBBB
    354e:	42 42 42 42 42 42 42 42 42 42 42 42 42 42 42 42     BBBBBBBBBBBBBBBB
    355e:	42 42 42 42 42 42 42 02 02 00 00 00 00 00 00 00     BBBBBBB.........
	...
    3582:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    359e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35da:	00 00 00 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
	...
    35f6:	63 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     c...............
	...
    3616:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3636:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3652:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3672:	00 02 02 00 00 00 00 00 00 00 00 00 00 07 00 00     ................
    3682:	00 00 00 00 09 00 00 00 00 00 00 00 00 00 00 02     ................
    3692:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36ae:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    36be:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

000036ce <sprites_data>:
    36ce:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    36de:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    36ee:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    36fe:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    370e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    371e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    372e:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    373e:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    374e:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    375e:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    376e:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    377e:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    378e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    379e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    37ae:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    37be:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    37ce:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    37de:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    37ee:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    37fe:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    380e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    381e:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    382e:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    383e:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    384e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    385e:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    386e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    387e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    388e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    389e:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    38ae:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    38be:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    38ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38de:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    38ee:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    38fe:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    390e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    391e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    392e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    393e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    394e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    395e:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    396e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    397e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    398e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    399e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    39ae:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    39be:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    39ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39de:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    39ee:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    39fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a1e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a2e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a3e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a8e:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3a9e:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3aae:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3abe:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3ace:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3ade:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3aee:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3afe:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3b0e:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3b1e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3b2e:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3b3e:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3b4e:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3b5e:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3b6e:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3b7e:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3b8e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3b9e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3bae:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3bbe:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3bce:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3bde:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3bee:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3bfe:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3c0e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c1e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c2e:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3c3e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3c4e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3c5e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3c6e:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3c7e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3c8e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3c9e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3cae:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3cbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3cce:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3cde:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3cee:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3cfe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d0e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d1e:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3d2e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3d3e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d4e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d5e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3d6e:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3d7e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3d8e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3d9e:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3dae:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3dbe:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3dce:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3dde:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3dee:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3dfe:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3e0e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e1e:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3e2e:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3e3e:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3e4e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3e5e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3e6e:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3e7e:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3e8e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3e9e:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3eae:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3ebe:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3ece:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3ede:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3eee:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3efe:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3f0e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3f1e:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3f2e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f3e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3f4e:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3f5e:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3f6e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3f7e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3f8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f9e:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3fae:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3fbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fce:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3fde:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3fee:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3ffe:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    400e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    401e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    402e:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    403e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    404e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    405e:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    406e:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    407e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    408e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    409e:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    40ae:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    40be:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40de:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    40ee:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    40fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    410e:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    411e:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    412e:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    413e:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    414e:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    415e:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    416e:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    417e:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    418e:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    419e:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    41ae:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    41be:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    41ce:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    41de:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    41ee:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    41fe:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    420e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    421e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    422e:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    423e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    424e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    425e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    426e:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    427e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    428e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    429e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    42ae:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    42be:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    42ce:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    42de:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42ee:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    42fe:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    430e:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    431e:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    432e:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    433e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    434e:	fe fe fe fe fe fe fe fe fe fe fe 7f fe fe fe fe     ................
    435e:	fe fe 7f 7f fe fe fe fe fe 7f 7f 7f fe fe fe fe     ................
    436e:	ff 7f 7f 7f fe fe fe fe fe ff 7f 7f fe fe fe fe     ................
    437e:	fe fe ff 7f fe fe fe fe fe fe fe fe fe fe fe fe     ................
    438e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    439e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43ae:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    43be:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    43ce:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    43de:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    43ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    440e:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    441e:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    442e:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    443e:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................

0000444e <map_sub_turret>:
    444e:	01 01 35                                            ..5

00004451 <map_sub_shot>:
    4451:	01 01 28                                            ..(

00004454 <map_up_arrow>:
    4454:	01 01 34                                            ..4

00004457 <map_down_arrow>:
    4457:	01 01 33                                            ..3

0000445a <map_left_arrow>:
    445a:	01 01 32                                            ..2

0000445d <map_right_arrow>:
    445d:	01 01 31                                            ..1

00004460 <map_rocket_right_1>:
    4460:	01 01 27                                            ..'

00004463 <map_rocket_right_0>:
    4463:	01 01 26                                            ..&

00004466 <map_rocket_up_1>:
    4466:	01 01 25                                            ..%

00004469 <map_rocket_up_0>:
    4469:	01 01 24                                            ..$

0000446c <map_ball>:
    446c:	01 01 23                                            ..#

0000446f <map_explosion_2>:
    446f:	02 02 0c 0d 0d 0c                                   ......

00004475 <map_explosion_1>:
    4475:	02 02 0a 0b 19 1a                                   ......

0000447b <map_explosion_0>:
    447b:	02 02 08 09 17 18                                   ......

00004481 <map_tank2_right_1>:
    4481:	02 02 21 22 2f 30                                   ..!"/0

00004487 <map_tank2_right_0>:
    4487:	02 02 1f 20 2d 2e                                   ... -.

0000448d <map_tank2_up_1>:
    448d:	02 02 1d 1e 2b 2c                                   ....+,

00004493 <map_tank2_up_0>:
    4493:	02 02 1b 1c 29 2a                                   ....)*

00004499 <map_tank1_right_1>:
    4499:	02 02 06 07 15 16                                   ......

0000449f <map_tank1_right_0>:
    449f:	02 02 04 05 13 14                                   ......

000044a5 <map_tank1_up_1>:
    44a5:	02 02 02 03 11 12                                   ......

000044ab <map_tank1_up_0>:
    44ab:	02 02 00 01 0f 10                                   ......

000044b1 <map_tank_blank>:
    44b1:	02 02 0e 0e 0e 0e                                   ......

000044b7 <map_none>:
    44b7:	01 01 0e                                            ...

000044ba <tiles_data>:
	...
    44fa:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    450a:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    451a:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    452a:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    453a:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    454a:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    455a:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    456a:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    457a:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    458a:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    459a:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    45aa:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    45ba:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    45ca:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    45da:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    45ea:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    45fa:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    460a:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    461a:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    462a:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4642:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4652:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4662:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    467a:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    468a:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    469a:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    46aa:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    46c2:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    46e2:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    46fa:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    470a:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    471a:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    472a:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    473a:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    474a:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    475a:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    476a:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    477a:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    478a:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    479a:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    47aa:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    47ba:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    47ca:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    47da:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    47ea:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    47fa:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    480a:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    481a:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    482a:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    483a:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    484a:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    485a:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    486a:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    487a:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    488a:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    489a:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    48aa:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    48ba:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48ca:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    48da:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    48ea:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    48fa:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    490a:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    491a:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    492a:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    493a:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    494a:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    495a:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    496a:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    497a:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    498a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    499a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49aa:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49ba:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    49ca:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49da:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49ea:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4a1a:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4a2a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a3a:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4a4a:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a5a:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a6a:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a7a:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4a8a:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a9a:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4aaa:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4aba:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4aca:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4ada:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4aea:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4afa:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4b0a:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4b1a:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4b2a:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4b3a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b4a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b5a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b6a:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b7a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b8a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4bba:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bca:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bda:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4bea:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4bfa:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4c0a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c1a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c2a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c3a:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4c82:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4c92:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4ca2:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4cb2:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 00 00     ................
    4cc2:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4cd2:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4ce2:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4cf2:	f0 f0 f0 e1 e1 e1 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d32:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d62:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4d72:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4d82:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4d92:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4da2:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4db2:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4dc2:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4dd2:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4de2:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4df2:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4e02:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e12:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e22:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e32:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e42:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e52:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e62:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e72:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4e82:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4e92:	00 00 00 00 00 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4ea2:	00 00 00 00 e1 e1 e1 e1 00 00 f5 90 f5 90 f5 90     ................
    4eb2:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4ec2:	f0 f5 f0 f5 f5 f5 f5 f5 f0 f0 f0 e1 e1 e1 00 00     ................
    4ed2:	e1 e1 e1 e1 e1 e1 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4ee2:	e1 e1 e1 e1 e1 00 00 00 f5 90 f5 90 f5 90 f5 00     ................
    4ef2:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4f02:	f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00 00 00     ................
	...
    4f3a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f4a:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f5a:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4f7e:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4f8e:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4f9e:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4fae:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4fbe:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4fce:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4fde:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4fee:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4ffe:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    500e:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    501e:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    502e:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    503e:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    504e:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    505e:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    506e:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 f5 90     ((..((((((......
    507e:	f5 90 f5 90 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    50ba:	f5 90 f5 90 f5 90 f5 00 00 00 00 00 00 00 00 00     ................
	...
    5102:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    5112:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5122:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5132:	28 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     ((((((((.(((((((
    5142:	7f 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     .(((((((((((((((
    5152:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5162:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5172:	28 28 28 28 28 28 28 28 90 90 90 e1 e1 e1 f0 f5     ((((((((........
    5182:	f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1 e1 e1 e1 e1     ................
    5192:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 00 00     ................
    51a2:	f5 f5 f5 e1 e1 00 00 00 90 90 90 00 00 00 00 00     ................
    51b2:	f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1 e1 90 90 90     ................
    51c2:	f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    51d2:	e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1 e1 90 90 90     ................
    51e2:	00 00 00 e1 e1 f5 f5 f5 00 00 00 00 00 90 90 90     ................
    51f2:	00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5202:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5212:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f3 f0 f2 f3     ................
    5222:	f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    5232:	f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5242:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5252:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    5262:	f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8 e8 e8 f4 f5     ................
    5272:	f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5282:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5292:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    52a2:	f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5 f5 f4 f4 f5     ................
    52b2:	f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    52c2:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    52d2:	f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52e2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52f2:	a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5302:	f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4 f5 f0 f0 f5     ................
    5312:	f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5322:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5332:	a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5342:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5352:	f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5362:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5372:	a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5382:	f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5392:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53a2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4     ................
    53b2:	a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0 f3 f0 f3 a3     ................
    53c2:	f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53e2:	a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4     ................
    53f2:	a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5402:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5412:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5422:	a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5432:	a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0 f3 f0 f3 f0     ................
    5442:	a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5452:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5462:	a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5472:	a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5482:	f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5492:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54a2:	a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3 a3 a3 a3 a3     ................
    54b2:	a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    54c2:	f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3 a3 f5 f5 f4     ................
    54d2:	a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54e2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54f2:	a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5502:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5512:	f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5522:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5532:	a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5542:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5552:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8 e8 e8 e8 e8     ................
    5562:	f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8 e8 e8 e8 f5     ................
    5572:	f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5582:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5592:	f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3 f0 f0 f3 f0     ................
    55a2:	f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5 f5 f4 f4 f5     ................
    55b2:	f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    55c2:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    55d2:	f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3 ff ff ff a3     ................
    55e2:	f0 ff ff ff ff ff ff a3 ff f4 f4 a3 a3 a3 a3 a3     ................
    55f2:	f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0 f3 ff ff f0     ................
    5602:	f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff ff ff f5 f4     ................
    5612:	ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5622:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5632:	a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8 e8 e8 f3 f0     ................
    5642:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5652:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5662:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5672:	a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0 f3 f0 f3 f0     ................
    5682:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5692:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56a2:	a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4 a4 a4 9a     ................
    56b2:	a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0 f3 f0 f3 f0     ................
    56c2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56e2:	a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4 a4 a4 a4 a4     ................
    56f2:	9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0 f3 f0 f3 f0     ................
    5702:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5712:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5722:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5732:	a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5742:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5752:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5762:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5772:	a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4     ................
    5782:	a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4     ................
    5792:	a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a     ................
    57a2:	9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57b2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    57c2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    57d2:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    57e2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57f2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    5802:	a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    5812:	a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5822:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5832:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    5842:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    5852:	a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a 9a 9a 9a a3     ................
    5862:	a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3     ................
    5872:	a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4 a3 a3 a3 a3     ................
    5882:	a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5892:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58a2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 4a a3 a3 a3     ............J...
    58b2:	a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4 a4 9a 9a a4     ...JJJ..........
    58c2:	a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0 a0 a0 a0 a0     ................
    58d2:	a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0     ................
    58e2:	a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0 4a 4a 4a a0     ............JJJ.
    58f2:	a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4 a4 9a 9a a4     ...JJJJJ........
    5902:	a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4 a4 9a 9a a4     ................
    5912:	a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0 a0 a0 a0 9a     ................
    5922:	a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0 a0 a0 a0 9a     ................
    5932:	a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4 a4 9a 9a a4     ................
    5942:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    5952:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5962:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5972:	ad ad ad ad ad ad ad ad a4 9a 9a 9a a4 9a 9a a4     ................
    5982:	a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4     ................
    5992:	a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    59a2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    59b2:	ad ad ad ad ad ad ad ad a4 9a 9a a4 a4 9a 9a a4     ................
    59c2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4     ................
    59d2:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    59e2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a     ................
    59f2:	ad ad ad ad ad ad ad ad a4 9a 9a a4 a4 9a a3 a3     ................
    5a02:	a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3     ................
    5a12:	a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3     ................
    5a22:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a a4     ................
    5a32:	ad ad ad ad ad ad ad ad a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a42:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a52:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a62:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5a72:	ad ad ad ad ad ad ad ad f0 f3 f0 f0 f3 f0 f3 f0     ................
    5a82:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a92:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5aa2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5ab2:	ad ad ad ad ad ad ad ad f0 f3 f0 e8 e8 e8 e8 f0     ................
    5ac2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ad2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ae2:	a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4 a4 a4 a4 a3     ................
    5af2:	ad ad ad ad ad ad ad ad f0 f3 f0 f0 e8 f0 f3 f0     ................
    5b02:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b12:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b22:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b32:	ad ad ad ad ad ad ad ad f0 ff ff f0 f3 f0 f3 f0     ................
    5b42:	f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff ff ff f5 f4     ................
    5b52:	f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b62:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b72:	ad ad ad ad ad ad ad ad f0 f3 f0 f0 f3 f0 f3 f0     ................
    5b82:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    5b92:	ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff f0 f0 f3 f0     ................
    5ba2:	a3 ff ff ff ff ff ff f0 a3 a3 a3 a3 a3 f4 f4 ff     ................
    5bb2:	ad ad ad ad ad 9a f3 f0 f0 f3 a3 a3 a3 a3 a3 a3     ................
    5bc2:	ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff ff ff ff a3     ................
    5bd2:	f0 ff ff ff ff ff ff 9a f3 f0 f2 f3 f0 f0 f3 ff     ................
    5be2:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    5bf2:	f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a 9a a3 a3 a3     ................
    5c02:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c12:	9a 9a 9a 9a 9a 9a 9a 9a ff ff ff ff ff f0 f3 f0     ................
    5c22:	f0 f5 ff ff ff ff f5 f0 f5 f4 f4 f5 f5 ff ff f5     ................
    5c32:	f0 f0 f3 f0 f3 ff ff f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c42:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c52:	9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3     ................
    5c62:	9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c72:	f0 f0 f3 e8 e8 e8 f3 f0 a3 a4 a4 a4 a4 a4 a4 9a     ................
    5c82:	a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 a4     ................
    5c92:	a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ca2:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cb2:	f0 f0 e8 f0 f3 f0 f3 f0 9a 9a 9a a4 a4 a4 a4 a4     ................
    5cc2:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a     ................
    5cd2:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ce2:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cf2:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d02:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5d12:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d22:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5d32:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d42:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5d52:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d62:	a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3     ................
    5d72:	9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d82:	a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4     ................
    5d92:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4 a4 a4 a4 a4     ................
    5da2:	a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4     ................
    5db2:	a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5dc2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5dd2:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    5de2:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5df2:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e02:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e12:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4 a4 9a a4 a4     ................
    5e22:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4     ................
    5e32:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a3 a3 a3     ................
    5e42:	a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a3     ................
    5e52:	9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 9a     ................
    5e62:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    5e72:	a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a 4a 4a a3 a3     ...........JJJ..
    5e82:	a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ....J...........
    5e92:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ea2:	9a a3 a3 a3 a3 a3 a3 a3 a4 9a 9a 9a a3 a3 a3 a3     ................
    5eb2:	a4 9a 9a a4 9a 9a 9a 9a a3 a0 a0 4a 4a 4a 4a 4a     ...........JJJJJ
    5ec2:	a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0 a0 a0 a0 a0     ....JJJ.........
    5ed2:	a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0 a0 a0 a0 a0     ................
    5ee2:	a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a a4 a4 a4 a4     ................
    5ef2:	9a 9a 9a a4 a4 9a 9a a4 a0 a0 a0 a0 a0 a0 a0 9a     ................
    5f02:	a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0 a0 a0 9a a4     ................
    5f12:	a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a a4 a4 a4 a4 a4     ................
    5f22:	9a 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f32:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f42:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f52:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a a4 a4 a4 a4     ................
    5f62:	a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5f72:	a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4 a4 a4 9a 9a     ................
    5f82:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f92:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    5fa2:	a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5fb2:	a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a 9a 9a 9a a4     ................
    5fc2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5fd2:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a3 a3     ................
    5fe2:	a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3     ................
    5ff2:	a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6002:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6012:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6022:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    6032:	a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    6042:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6052:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6062:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6072:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 9a     ................
    6082:	a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a     ................
    6092:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    60a2:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a     ................
    60b2:	f0 f0 f3 e8 e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    60c2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    60d2:	a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a     ................
    60e2:	a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    60f2:	f0 f0 f3 f0 e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6102:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6112:	9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3 f0 ff ff ff     ................
    6122:	f0 f5 ff ff ff ff f5 f0 f5 ff ff ff ff f4 f4 f5     ................
    6132:	f0 ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3 a3 9a f3 f0     ................
    6142:	9a 9a 9a 9a 9a f0 f0 ff 9a ff ff ff ff ff ff f4     ................
    6152:	9a ff ff ff ff f3 f0 f0 ff f0 f2 f3 f0 f0 f3 f0     ................
    6162:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6172:	f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8 e8 e8 f3 f0     ................
    6182:	f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8 e8 e8 e8 e8     ................
    6192:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    61a2:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    61b2:	f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0 f3 f0 f3 f0     ................
    61c2:	e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    61d2:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    61e2:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    61f2:	f0 f0 f3 f0 f3 f0 f3 f0 9a a3 a3 a3 a3 a3 a3 a3     ................
    6202:	9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3     ................
    6212:	9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3 f0 f0 f3 f0     ................
    6222:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6232:	f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4 a4 a4 a4 a4     ................
    6242:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6252:	9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3 f0 f0 f3 f0     ................
    6262:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6272:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6282:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6292:	9a 9a 9a 9a a3 a3 a3 a3 f3 f0 f2 9a a3 a3 a3 a3     ................
    62a2:	f0 f5 f5 9a 9a 9a 9a 9a f5 f4 f4 f5 f5 f4 f4 f5     ................
    62b2:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 9a a4 a4     ................
    62c2:	9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3 a3 a3 9a 9a     ................
    62d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62e2:	9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5 f5 f4 f4 f5     ................
    62f2:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6302:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6312:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6322:	9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5 f5 f4 f4 9a     ................
    6332:	f0 f0 f3 f0 f3 f0 f3 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    6342:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6352:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6362:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6372:	9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4     ................
    6382:	a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6392:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63a2:	9a 9a 9a 9a 9a 9a 9a 9a 9a f4 f4 f5 f5 f4 f4 f5     ................
    63b2:	9a f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 9a a4 a4 a4 a4     ................
    63c2:	a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    63d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63e2:	9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5 f5 f4 f4 f5     ................
    63f2:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 a4 a4     ................
    6402:	9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    6412:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a f0 f3 f0     ................
    6422:	9a 9a 9a 9a 9a f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6432:	f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4 a4 a4 9a a3     ................
    6442:	9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6452:	9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3 f0 f0 f3 f0     ................
    6462:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6472:	f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 9a     ................
    6482:	a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a     ................
    6492:	9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3 f0 f0 f3 f0     ................
    64a2:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    64b2:	f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8 e8 e8 e8 f0     ................
    64c2:	f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8 e8 e8 e8 f4     ................
    64d2:	f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3 f0 f0 f3 f0     ................
    64e2:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    64f2:	f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8 f3 f0 f3 f0     ................
    6502:	f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4 f4 f5 f5 f4     ................
    6512:	e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    6522:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6532:	f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0 f3 f0 f3 f0     ................
    6542:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    6552:	f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6562:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6572:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    6582:	f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4 f5 f0 f0 f5     ................
    6592:	f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65b2:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    65c2:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    65d2:	f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65f2:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    6602:	f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6612:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6622:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6632:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 e8     ................
    6642:	f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6652:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6662:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6672:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6682:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6692:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66b2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66c2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66d2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66f2:	e8 e8 e8 e8 e8 e8 e8 ff e8 e8 e8 e8 e8 e8 e8 e8     ................
    6702:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6712:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6722:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6732:	ff e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 f0 f3 f0     ................
    6742:	e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6752:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6762:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6772:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    6782:	f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8 e8 f5 f5 f4     ................
    6792:	e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67b2:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    67c2:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    67d2:	f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 e8     ................
    67e2:	f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8 e8 e8 e8 e8     ................
    67f2:	f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 e8 e8 e8 f3 f0     ................
    6802:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6812:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6822:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6832:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 e8 f0 f3 f0 f3 f0     ................
    6842:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6852:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6862:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6872:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    6882:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6892:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68b2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 ff     ................
    68c2:	e8 e8 ff ff e8 e8 ff ff e8 e8 e8 ff ff ff ff ff     ................
    68d2:	e8 e8 e8 e8 ff ff ff ff e8 e8 e8 ff ff ff ff ff     ................
    68e2:	e8 e8 e8 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    68f2:	ff ff ff ff ff ff ff ff ff e8 e8 e8 e8 e8 e8 e8     ................
    6902:	ff ff e8 e8 e8 ff e8 e8 ff ff ff ff ff ff e8 e8     ................
    6912:	ff ff ff ff e8 e8 e8 e8 ff ff ff ff ff e8 e8 e8     ................
    6922:	ff ff ff ff ff e8 e8 e8 ff ff ff ff ff ff ff ff     ................
    6932:	ff ff ff ff ff ff ff ff f0 f3 f0 e8 e8 e8 e8 f0     ................
    6942:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6952:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6962:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6972:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 e8 f0 f3 f0     ................
    6982:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6992:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69b2:	e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0 f3 f0 f3 f0     ................
    69c2:	f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4 f4 f5 f5 f4     ................
    69d2:	f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3 f0 f0 f3 f0     ................
    69e2:	e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8 e8 f4 f4 f5     ................
    69f2:	e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8 e8 e8 e8 e8     ................
    6a02:	f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4 f4 f5 f5 e8     ................
    6a12:	f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3 f0 f0 f3 f0     ................
    6a22:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6a32:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a42:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a52:	e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3 f0 f0 f3 f0     ................
    6a62:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6a72:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a82:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a92:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6aa2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ab2:	f0 f0 f3 e8 e8 e8 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ac2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ad2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ae2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6af2:	f0 f0 e8 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b02:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b12:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b22:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b32:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 ff ff ff ff ff ff     ................
    6b42:	e8 e8 e8 ff ff ff ff ff e8 e8 e8 ff ff ff ff ff     ................
    6b52:	e8 e8 e8 e8 ff ff ff ff e8 e8 e8 e8 ff ff ff ff     ................
    6b62:	e8 e8 ff ff e8 e8 ff ff e8 e8 ff e8 e8 e8 e8 ff     ................
    6b72:	e8 e8 e8 e8 e8 e8 e8 ff ff ff ff ff ff ff e8 e8     ................
    6b82:	ff ff ff ff ff e8 e8 e8 ff ff ff ff ff e8 e8 e8     ................
    6b92:	ff ff ff ff ff ff ff e8 ff ff ff ff e8 e8 ff e8     ................
    6ba2:	ff ff e8 e8 e8 e8 e8 e8 ff e8 e8 e8 e8 e8 e8 e8     ................
    6bb2:	ff e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bc2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bd2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6be2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6bf2:	f0 f0 f3 e8 e8 e8 e8 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c02:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c12:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c22:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c32:	f0 f0 f3 f0 e8 f0 f3 f0 e8 e8 e8 e8 e8 e8 f3 f0     ................
    6c42:	e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4 f4 f5 f5 f4     ................
    6c52:	e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3 f0 f0 f3 f0     ................
    6c62:	f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6c72:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c82:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6c92:	e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8 e8 e8 e8 e8     ................
    6ca2:	f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6cb2:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cc2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6cd2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ce2:	e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6cf2:	f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d02:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d12:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d22:	e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5 f5 f4 f4 e8     ................
    6d32:	f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d42:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d52:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d62:	e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5 f5 f4 f4 f5     ................
    6d72:	e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d82:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6d92:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0     ................
    6da2:	e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5 f5 f4 f4 f5     ................
    6db2:	f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00 00 00 00 00     ................
	...
    6e02:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e12:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6e2a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6e42:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6e52:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6e82:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6e92:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6ea2:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6eba:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    6eca:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    6eda:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6eea:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6f02:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6f12:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6f22:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    6f3a:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    6f4a:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6f5a:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6f6a:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6f82:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6f92:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6fc6:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    6fd6:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6fe6:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    7002:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    7012:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7022:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    7042:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    7052:	df df df df df df df df 00 00 df df df df 00 00     ................
    7062:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    7082:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7092:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    70a2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    70e2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    70f2:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7112:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7162:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7186:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    7196:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    71a6:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    71c2:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    71d2:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    71e2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7202:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    7212:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    7222:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    7242:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7252:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7262:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    7282:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    7292:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    72a2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    72c6:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    72d6:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    72e6:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    7302:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    7312:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    7322:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7342:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    7352:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    7362:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7382:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    7392:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    73a2:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    73c2:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    73d2:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    73e2:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7402:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7412:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    7422:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    744a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7462:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    748a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    74a2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    74b2:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    74c2:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    74d2:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    74e2:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    750a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7522:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    753a:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    754a:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    755a:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    756a:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7582:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7592:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    75aa:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    75c2:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    75d2:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    75e2:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    7602:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    7612:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7622:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7642:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7652:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7662:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7682:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7692:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    76a2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    76c2:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    76d2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    76e2:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7702:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7712:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7722:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7742:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7752:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7762:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7782:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7792:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    77a2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    77c2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    77d2:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    77e2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7802:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7812:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7822:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7846:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7856:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    7866:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7882:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7892:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    78a2:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    78c2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    78d2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    78e2:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7902:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7912:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7922:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7942:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7952:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7962:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7982:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7992:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    79a2:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    79c2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    79d2:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    79e2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7a02:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7a12:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7a22:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7a42:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7a52:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7a62:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7a82:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7a92:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7aa2:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7ac2:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7ad2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ae2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7b02:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7b12:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7b22:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7b42:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7b52:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7b62:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7b82:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7b92:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7ba2:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7bc2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7bd2:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7be2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7c02:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7c12:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    7c22:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7c42:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7c52:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7c62:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7c82:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7c92:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ca2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7cc2:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7cd2:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ce2:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7d02:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7d12:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7d22:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7d46:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    7d56:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7daa:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    7dc2:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    7dd2:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7de2:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7e0a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7e1a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7e2a:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    7e42:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7e52:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7e62:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7e8a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7e9a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7eaa:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    7ec6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    7ed6:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7ee6:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    7f0a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7f1a:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7f2a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    7f46:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    7f56:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    7f66:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    7f8a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7f9a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    7faa:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7fc2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7fd2:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7fe2:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    8002:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    8012:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    8022:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    8046:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    8056:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    8066:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    8076:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    8086:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    8096:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    80a6:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    80c2:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    80d2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    80e2:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    810a:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    811a:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    812a:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    814a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    815a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    816a:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    818a:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    819a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    81aa:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    81ca:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    81da:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    81ea:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    820a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    821a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    822a:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    824a:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    825a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    826a:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    828a:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    829a:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    82aa:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    82c2:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    82d2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    82e2:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    830a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    831a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    832a:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    834a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    835a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    836a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    838a:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    839a:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    83aa:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    83ca:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    83da:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    83ea:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    840a:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    841a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    842a:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    844a:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    845a:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    846a:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    8482:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    8492:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    84a2:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    84ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    84ca:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    84da:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    84ea:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    8502:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    8512:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    8522:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    853e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    854e:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    855e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    856e:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    857e:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    858e:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    859e:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

000085ba <map_sub_emerging>:
    85ba:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85ca:	0d 0d 0d 0d 0d 0d 35 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......5.........
    85da:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85ea:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    85fa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    860a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 36 37 0d 0d 82 83 84     .........67.....
    861a:	85 86 87 88 89 87 8a 85 8b 82 82 0d 0d 42 43 0d     .............BC.
    862a:	0d 0d 0d 8c 82 8d 8e 8f 8f 87 87 87 87 87 87 90     ................
    863a:	91 87 87 87 87 87 87 8f 8f 92 93 82 94 0d 0d 95     ................
    864a:	96 97 98 99 99 87 87 87 87 87 87 9a 9b 87 87 87     ................
    865a:	87 87 87 99 99 9c 9d 96 9e 0d 0d 0d 0d 73 74 0d     .............st.
    866a:	35 96 96 9f a0 a1 87 87 87 87 a2 a0 a3 96 96 0d     5...............
    867a:	0d 80 81 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    868a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 35 0d 0d 0d 0d 0d     ..........5.....
    869a:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    86aa:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    86ba:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    86ca:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    86da:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    86ea:	0d 0d 0d 0d 0d 0d                                   ......

000086f0 <map_sub>:
    86f0:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8700:	0d 0d 0d 0d 0d 0d 35 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......5.........
    8710:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8720:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8730:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8740:	0d 0d 0d 0d 0d 0d 0d 0d 0d 36 37 0d 0d 38 39 3a     .........67..89:
    8750:	3b 3c 3d 3d 3d 3d 3e 3f 40 41 38 0d 0d 42 43 0d     ;<====>?@A8..BC.
    8760:	0d 0d 0d 44 45 46 47 48 49 4a 4b 4c 4d 4c 4e 4f     ...DEFGHIJKLMLNO
    8770:	50 51 52 53 54 55 56 57 57 58 59 5a 5b 0d 0d 5c     PQRSTUVWWXYZ[..\
    8780:	5d 5e 5f 60 61 62 63 64 65 64 66 67 68 69 64 6a     ]^_`abcdedfghidj
    8790:	6b 6c 6d 6e 6e 6f 70 71 72 0d 0d 0d 0d 73 74 0d     klmnnopqr....st.
    87a0:	35 75 76 77 78 79 7a 7a 7a 7a 7b 7c 7d 7e 7f 0d     5uvwxyzzzz{|}~..
    87b0:	0d 80 81 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    87c0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 35 0d 0d 0d 0d 0d     ..........5.....
    87d0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    87e0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    87f0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8800:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8810:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    8820:	0d 0d 0d 0d 0d 0d                                   ......

00008826 <map_scope_2>:
    8826:	01 01 12                                            ...

00008829 <map_scope_1>:
    8829:	01 01 11                                            ...

0000882c <map_scope_0>:
    882c:	01 01 10                                            ...

0000882f <map_blue_tank>:
    882f:	02 02 2b 2c 33 34                                   ..+,34

00008835 <map_green_tank>:
    8835:	02 02 18 19 23 24                                   ....#$

0000883b <map_fence>:
    883b:	01 01 0f                                            ...

0000883e <map_turf>:
    883e:	01 01 0e                                            ...

00008841 <map_water>:
    8841:	01 01 0d                                            ...

00008844 <map_metal_bl>:
    8844:	01 01 0c                                            ...

00008847 <map_metal_tr>:
    8847:	01 01 0b                                            ...

0000884a <map_metal_br>:
    884a:	01 01 0a                                            ...

0000884d <map_metal_tl>:
    884d:	01 01 09                                            ...

00008850 <map_tile_exp_2>:
    8850:	01 01 08                                            ...

00008853 <map_tile_exp_1>:
    8853:	01 01 07                                            ...

00008856 <map_tile_exp_0>:
    8856:	01 01 06                                            ...

00008859 <map_rocket_itm>:
    8859:	01 01 04                                            ...

0000885c <map_explode_itm>:
    885c:	01 01 03                                            ...

0000885f <map_speed_itm>:
    885f:	01 01 02                                            ...

00008862 <map_metal>:
    8862:	01 01 05                                            ...

00008865 <map_brick>:
    8865:	01 01 01                                            ...

00008868 <map_splash>:
    8868:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    8878:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    8888:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    8898:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    88a8:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 2f 30 00     ...........-./0.
    88b8:	1a 00 00 1a 31 32                                   ....12

000088be <map_pause>:
    88be:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    88ce:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    88de:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    88ee:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000088fc <map_tile_none>:
    88fc:	01 01 00 00                                         ....

00008900 <__ctors_end>:
    8900:	11 24       	eor	r1, r1
    8902:	1f be       	out	0x3f, r1	; 63
    8904:	cf ef       	ldi	r28, 0xFF	; 255
    8906:	d0 e1       	ldi	r29, 0x10	; 16
    8908:	de bf       	out	0x3e, r29	; 62
    890a:	cd bf       	out	0x3d, r28	; 61

0000890c <__do_copy_data>:
    890c:	11 e0       	ldi	r17, 0x01	; 1
    890e:	a0 e0       	ldi	r26, 0x00	; 0
    8910:	b1 e0       	ldi	r27, 0x01	; 1
    8912:	e8 e1       	ldi	r30, 0x18	; 24
    8914:	f5 ee       	ldi	r31, 0xE5	; 229
    8916:	02 c0       	rjmp	.+4      	; 0x891c <__do_copy_data+0x10>
    8918:	05 90       	lpm	r0, Z+
    891a:	0d 92       	st	X+, r0
    891c:	a6 30       	cpi	r26, 0x06	; 6
    891e:	b1 07       	cpc	r27, r17
    8920:	d9 f7       	brne	.-10     	; 0x8918 <__do_copy_data+0xc>

00008922 <__do_clear_bss>:
    8922:	1f e0       	ldi	r17, 0x0F	; 15
    8924:	a6 e0       	ldi	r26, 0x06	; 6
    8926:	b1 e0       	ldi	r27, 0x01	; 1
    8928:	01 c0       	rjmp	.+2      	; 0x892c <.do_clear_bss_start>

0000892a <.do_clear_bss_loop>:
    892a:	1d 92       	st	X+, r1

0000892c <.do_clear_bss_start>:
    892c:	a7 3f       	cpi	r26, 0xF7	; 247
    892e:	b1 07       	cpc	r27, r17
    8930:	e1 f7       	brne	.-8      	; 0x892a <.do_clear_bss_loop>

00008932 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    8932:	0e 94 cd 48 	call	0x919a	; 0x919a <wdt_randomize>
#endif

    MCUSR = 0;
    8936:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    8938:	88 e1       	ldi	r24, 0x18	; 24
    893a:	0f b6       	in	r0, 0x3f	; 63
    893c:	f8 94       	cli
    893e:	80 93 60 00 	sts	0x0060, r24
    8942:	10 92 60 00 	sts	0x0060, r1
    8946:	0f be       	out	0x3f, r0	; 63

00008948 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    8948:	0e 94 81 49 	call	0x9302	; 0x9302 <isEepromFormatted>
    894c:	81 11       	cpse	r24, r1
    894e:	02 c0       	rjmp	.+4      	; 0x8954 <Initialize+0xc>
    8950:	0e 94 5f 49 	call	0x92be	; 0x92be <FormatEeprom>

	cli();
    8954:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    8956:	81 e0       	ldi	r24, 0x01	; 1
    8958:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    895c:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    8960:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    8964:	10 92 02 0b 	sts	0x0B02, r1
    8968:	10 92 08 0b 	sts	0x0B08, r1
    896c:	10 92 0e 0b 	sts	0x0B0E, r1
    8970:	10 92 14 0b 	sts	0x0B14, r1
    8974:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    8978:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    897c:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    8980:	92 e1       	ldi	r25, 0x12	; 18
    8982:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    8986:	90 ee       	ldi	r25, 0xE0	; 224
    8988:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    898c:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    8990:	94 e1       	ldi	r25, 0x14	; 20
    8992:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    8996:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    899a:	10 92 f4 0a 	sts	0x0AF4, r1
    899e:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    89a2:	10 92 f8 0a 	sts	0x0AF8, r1
    89a6:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    89aa:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    89ae:	0e 94 e0 55 	call	0xabc0	; 0xabc0 <InitializeVideoMode>
    89b2:	80 e7       	ldi	r24, 0x70	; 112
    89b4:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    89b6:	fc 01       	movw	r30, r24
    89b8:	25 91       	lpm	r18, Z+
    89ba:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    89bc:	f9 01       	movw	r30, r18
    89be:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    89c0:	30 83       	st	Z, r19
    89c2:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	8e 39       	cpi	r24, 0x9E	; 158
    89c8:	92 07       	cpc	r25, r18
    89ca:	a9 f7       	brne	.-22     	; 0x89b6 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    89cc:	78 94       	sei
	
	DisplayLogo();
    89ce:	0e 94 df 55 	call	0xabbe	; 0xabbe <DisplayLogo>
    89d2:	0e 94 9c 6f 	call	0xdf38	; 0xdf38 <main>
    89d6:	0c 94 8a 72 	jmp	0xe514	; 0xe514 <_exit>

000089da <__bad_interrupt>:
    89da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000089de <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    89de:	0c e0       	ldi	r16, 0x0C	; 12
    89e0:	0a 95       	dec	r16
    89e2:	f1 f7       	brne	.-4      	; 0x89e0 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    89e4:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    89e6:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    89e8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    89ea:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    89ec:	20 91 bd 0b 	lds	r18, 0x0BBD


		clr r16
    89f0:	00 27       	eor	r16, r16

000089f2 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    89f2:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    89f4:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    89f6:	ac 0f       	add	r26, r28
		adc XH,YH
    89f8:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    89fa:	1c 91       	ld	r17, X
		std Z+2,r17
    89fc:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    89fe:	02 17       	cp	r16, r18
		brsh noov
    8a00:	08 f4       	brcc	.+2      	; 0x8a04 <noov>
		mov r17,r16
    8a02:	10 2f       	mov	r17, r16

00008a04 <noov>:
	noov:
		st X,r17
    8a04:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    8a06:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    8a08:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    8a0a:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    8a0c:	90 f3       	brcs	.-28     	; 0x89f2 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    8a0e:	05 e2       	ldi	r16, 0x25	; 37

00008a10 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    8a10:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    8a12:	1a 95       	dec	r17
		brne .-4
    8a14:	f1 f7       	brne	.-4      	; 0x8a12 <wait_loop+0x2>

		dec r16
    8a16:	0a 95       	dec	r16
		brne wait_loop
    8a18:	d9 f7       	brne	.-10     	; 0x8a10 <wait_loop>

		lds r2,overlay_tile_table
    8a1a:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    8a1e:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    8a22:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    8a26:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    8a2a:	68 01       	movw	r12, r16
		movw r6,r16
    8a2c:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    8a2e:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    8a30:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    8a32:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    8a34:	4e 01       	movw	r8, r28
		clr r0
    8a36:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    8a38:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    8a3c:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    8a3e:	09 f0       	breq	.+2      	; 0x8a42 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    8a40:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    8a42:	09 f0       	breq	.+2      	; 0x8a46 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    8a44:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    8a46:	09 f0       	breq	.+2      	; 0x8a4a <wait_loop+0x3a>
		mov r24,r19
    8a48:	83 2f       	mov	r24, r19

		breq .+2
    8a4a:	09 f0       	breq	.+2      	; 0x8a4e <wait_loop+0x3e>
		movw r12,r2
    8a4c:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    8a4e:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    8a50:	a0 2e       	mov	r10, r16
		clr r22
    8a52:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    8a54:	78 e0       	ldi	r23, 0x08	; 8

00008a56 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    8a56:	7d d2       	rcall	.+1274   	; 0x8f52 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    8a58:	3c e0       	ldi	r19, 0x0C	; 12
    8a5a:	3a 95       	dec	r19
    8a5c:	f1 f7       	brne	.-4      	; 0x8a5a <next_tile_line+0x4>
    8a5e:	00 00       	nop
    8a60:	00 00       	nop

		;***draw line***
		call render_tile_line
    8a62:	0e 94 62 45 	call	0x8ac4	; 0x8ac4 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    8a66:	3f e0       	ldi	r19, 0x0F	; 15
    8a68:	3a 95       	dec	r19
    8a6a:	f1 f7       	brne	.-4      	; 0x8a68 <next_tile_line+0x12>
    8a6c:	00 00       	nop
    8a6e:	00 00       	nop

		dec r10
    8a70:	aa 94       	dec	r10
		breq frame_end
    8a72:	a9 f0       	breq	.+42     	; 0x8a9e <frame_end>
	
		inc r22
    8a74:	63 95       	inc	r22
		lpm ;3 nop
    8a76:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    8a78:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8a7a:	31 f0       	breq	.+12     	; 0x8a88 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    8a7c:	33 e0       	ldi	r19, 0x03	; 3
    8a7e:	3a 95       	dec	r19
    8a80:	f1 f7       	brne	.-4      	; 0x8a7e <next_tile_line+0x28>
    8a82:	00 00       	nop
    8a84:	00 00       	nop
		
		rjmp next_tile_line	
    8a86:	e7 cf       	rjmp	.-50     	; 0x8a56 <next_tile_line>

00008a88 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    8a88:	66 27       	eor	r22, r22

		clr r0
    8a8a:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8a8c:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    8a8e:	c3 0f       	add	r28, r19
		adc YH,r0
    8a90:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    8a92:	8a 95       	dec	r24
		brne .+2
    8a94:	09 f4       	brne	.+2      	; 0x8a98 <next_tile_row+0x10>
		movw YL,r8	;main vram
    8a96:	e4 01       	movw	r28, r8
		brne .+2
    8a98:	09 f4       	brne	.+2      	; 0x8a9c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8a9a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    8a9c:	dc cf       	rjmp	.-72     	; 0x8a56 <next_tile_line>

00008a9e <frame_end>:

	frame_end:

		WAIT r19,18
    8a9e:	36 e0       	ldi	r19, 0x06	; 6
    8aa0:	3a 95       	dec	r19
    8aa2:	f1 f7       	brne	.-4      	; 0x8aa0 <frame_end+0x2>

		rcall hsync_pulse ;145
    8aa4:	56 d2       	rcall	.+1196   	; 0x8f52 <hsync_pulse>
	
		clr r1
    8aa6:	11 24       	eor	r1, r1
		call RestoreBackground
    8aa8:	0e 94 80 54 	call	0xa900	; 0xa900 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    8aac:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    8ab0:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    8ab2:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    8ab4:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    8ab6:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8aba:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8abc:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    8ac0:	11 24       	eor	r1, r1


		ret
    8ac2:	08 95       	ret

00008ac4 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8ac4:	de 01       	movw	r26, r28

		mul r22,r23
    8ac6:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    8ac8:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8aca:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8acc:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    8ace:	00 0d       	add	r16, r0
		adc r17,r1
    8ad0:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8ad2:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8ad4:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    8ad6:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    8ad8:	00 0d       	add	r16, r0
		adc r17,r1
    8ada:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    8adc:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8ade:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    8ae0:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    8ae2:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    8ae4:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    8ae6:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    8ae8:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    8aea:	08 f4       	brcc	.+2      	; 0x8aee <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    8aec:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    8aee:	04 0e       	add	r0, r20
	    adc r1,r21
    8af0:	15 1e       	adc	r1, r21

		movw ZL,r0
    8af2:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    8af4:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    8af6:	f0 f0       	brcs	.+60     	; 0x8b34 <ramloop>

00008af8 <romloop>:
	

	romloop:
	    lpm r16,Z+
    8af8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8afa:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8afc:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    8afe:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    8b00:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    8b02:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    8b04:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    8b06:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    8b08:	28 31       	cpi	r18, 0x18	; 24
		nop
    8b0a:	00 00       	nop

	    lpm r16,Z+
    8b0c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8b0e:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    8b10:	08 f4       	brcc	.+2      	; 0x8b14 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    8b12:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    8b14:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    8b16:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    8b18:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    8b1a:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    8b1c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    8b1e:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    8b20:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    8b22:	1a 95       	dec	r17
   
	    lpm r16,Z+
    8b24:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    8b26:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    8b28:	05 91       	lpm	r16, Z+

		breq end	
    8b2a:	31 f1       	breq	.+76     	; 0x8b78 <end>
	    movw ZL,r0   	;copy next tile adress
    8b2c:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8b2e:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    8b30:	18 f7       	brcc	.-58     	; 0x8af8 <romloop>
	
		rjmp .
    8b32:	00 c0       	rjmp	.+0      	; 0x8b34 <ramloop>

00008b34 <ramloop>:

	ramloop:

	    ld r16,Z+
    8b34:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8b36:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8b38:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    8b3a:	01 91       	ld	r16, Z+
		nop   
    8b3c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    8b3e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    8b40:	23 9f       	mul	r18, r19


	    ld r16,Z+
    8b42:	01 91       	ld	r16, Z+
		nop
    8b44:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    8b46:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8b48:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    8b4a:	00 c0       	rjmp	.+0      	; 0x8b4c <ramloop+0x18>

	    ld r16,Z+
    8b4c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8b4e:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    8b50:	08 f0       	brcs	.+2      	; 0x8b54 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    8b52:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    8b54:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    8b56:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    8b58:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    8b5a:	15 1e       	adc	r1, r21
		rjmp .
    8b5c:	00 c0       	rjmp	.+0      	; 0x8b5e <ramloop+0x2a>
    
		ld r16,Z+		
    8b5e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8b60:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8b62:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    8b64:	00 c0       	rjmp	.+0      	; 0x8b66 <ramloop+0x32>

	    ld r16,Z+	
    8b66:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    8b68:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    8b6a:	01 91       	ld	r16, Z+

	    dec r17
    8b6c:	1a 95       	dec	r17
	    breq end
    8b6e:	21 f0       	breq	.+8      	; 0x8b78 <end>
	
		movw ZL,r0
    8b70:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8b72:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    8b74:	08 f6       	brcc	.-126    	; 0x8af8 <romloop>
		rjmp ramloop
    8b76:	de cf       	rjmp	.-68     	; 0x8b34 <ramloop>

00008b78 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    8b78:	08 b9       	out	0x08, r16	; 8
		clr r16	
    8b7a:	00 27       	eor	r16, r16
		lpm	
    8b7c:	c8 95       	lpm
		nop
    8b7e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8b80:	08 b9       	out	0x08, r16	; 8

		ret
    8b82:	08 95       	ret

00008b84 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8b84:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    8b86:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    8b8a:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    8b8e:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    8b90:	82 9f       	mul	r24, r18
	add ZL,r0
    8b92:	e0 0d       	add	r30, r0
	adc ZH,r1
    8b94:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8b96:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8b98:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8b9a:	62 9f       	mul	r22, r18
	add XL,r0
    8b9c:	a0 0d       	add	r26, r0
	adc XH,r1
    8b9e:	b1 1d       	adc	r27, r1

	clr r0
    8ba0:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    8ba2:	05 90       	lpm	r0, Z+
    8ba4:	0d 92       	st	X+, r0
    8ba6:	05 90       	lpm	r0, Z+
    8ba8:	0d 92       	st	X+, r0
    8baa:	05 90       	lpm	r0, Z+
    8bac:	0d 92       	st	X+, r0
    8bae:	05 90       	lpm	r0, Z+
    8bb0:	0d 92       	st	X+, r0
    8bb2:	05 90       	lpm	r0, Z+
    8bb4:	0d 92       	st	X+, r0
    8bb6:	05 90       	lpm	r0, Z+
    8bb8:	0d 92       	st	X+, r0
    8bba:	05 90       	lpm	r0, Z+
    8bbc:	0d 92       	st	X+, r0
    8bbe:	05 90       	lpm	r0, Z+
    8bc0:	0d 92       	st	X+, r0
    8bc2:	05 90       	lpm	r0, Z+
    8bc4:	0d 92       	st	X+, r0
    8bc6:	05 90       	lpm	r0, Z+
    8bc8:	0d 92       	st	X+, r0
    8bca:	05 90       	lpm	r0, Z+
    8bcc:	0d 92       	st	X+, r0
    8bce:	05 90       	lpm	r0, Z+
    8bd0:	0d 92       	st	X+, r0
    8bd2:	05 90       	lpm	r0, Z+
    8bd4:	0d 92       	st	X+, r0
    8bd6:	05 90       	lpm	r0, Z+
    8bd8:	0d 92       	st	X+, r0
    8bda:	05 90       	lpm	r0, Z+
    8bdc:	0d 92       	st	X+, r0
    8bde:	05 90       	lpm	r0, Z+
    8be0:	0d 92       	st	X+, r0
    8be2:	05 90       	lpm	r0, Z+
    8be4:	0d 92       	st	X+, r0
    8be6:	05 90       	lpm	r0, Z+
    8be8:	0d 92       	st	X+, r0
    8bea:	05 90       	lpm	r0, Z+
    8bec:	0d 92       	st	X+, r0
    8bee:	05 90       	lpm	r0, Z+
    8bf0:	0d 92       	st	X+, r0
    8bf2:	05 90       	lpm	r0, Z+
    8bf4:	0d 92       	st	X+, r0
    8bf6:	05 90       	lpm	r0, Z+
    8bf8:	0d 92       	st	X+, r0
    8bfa:	05 90       	lpm	r0, Z+
    8bfc:	0d 92       	st	X+, r0
    8bfe:	05 90       	lpm	r0, Z+
    8c00:	0d 92       	st	X+, r0
    8c02:	05 90       	lpm	r0, Z+
    8c04:	0d 92       	st	X+, r0
    8c06:	05 90       	lpm	r0, Z+
    8c08:	0d 92       	st	X+, r0
    8c0a:	05 90       	lpm	r0, Z+
    8c0c:	0d 92       	st	X+, r0
    8c0e:	05 90       	lpm	r0, Z+
    8c10:	0d 92       	st	X+, r0
    8c12:	05 90       	lpm	r0, Z+
    8c14:	0d 92       	st	X+, r0
    8c16:	05 90       	lpm	r0, Z+
    8c18:	0d 92       	st	X+, r0
    8c1a:	05 90       	lpm	r0, Z+
    8c1c:	0d 92       	st	X+, r0
    8c1e:	05 90       	lpm	r0, Z+
    8c20:	0d 92       	st	X+, r0
    8c22:	05 90       	lpm	r0, Z+
    8c24:	0d 92       	st	X+, r0
    8c26:	05 90       	lpm	r0, Z+
    8c28:	0d 92       	st	X+, r0
    8c2a:	05 90       	lpm	r0, Z+
    8c2c:	0d 92       	st	X+, r0
    8c2e:	05 90       	lpm	r0, Z+
    8c30:	0d 92       	st	X+, r0
    8c32:	05 90       	lpm	r0, Z+
    8c34:	0d 92       	st	X+, r0
    8c36:	05 90       	lpm	r0, Z+
    8c38:	0d 92       	st	X+, r0
    8c3a:	05 90       	lpm	r0, Z+
    8c3c:	0d 92       	st	X+, r0
    8c3e:	05 90       	lpm	r0, Z+
    8c40:	0d 92       	st	X+, r0
    8c42:	05 90       	lpm	r0, Z+
    8c44:	0d 92       	st	X+, r0
    8c46:	05 90       	lpm	r0, Z+
    8c48:	0d 92       	st	X+, r0
    8c4a:	05 90       	lpm	r0, Z+
    8c4c:	0d 92       	st	X+, r0
    8c4e:	05 90       	lpm	r0, Z+
    8c50:	0d 92       	st	X+, r0
    8c52:	05 90       	lpm	r0, Z+
    8c54:	0d 92       	st	X+, r0
    8c56:	05 90       	lpm	r0, Z+
    8c58:	0d 92       	st	X+, r0
    8c5a:	05 90       	lpm	r0, Z+
    8c5c:	0d 92       	st	X+, r0
    8c5e:	05 90       	lpm	r0, Z+
    8c60:	0d 92       	st	X+, r0
    8c62:	05 90       	lpm	r0, Z+
    8c64:	0d 92       	st	X+, r0
    8c66:	05 90       	lpm	r0, Z+
    8c68:	0d 92       	st	X+, r0
    8c6a:	05 90       	lpm	r0, Z+
    8c6c:	0d 92       	st	X+, r0
    8c6e:	05 90       	lpm	r0, Z+
    8c70:	0d 92       	st	X+, r0
    8c72:	05 90       	lpm	r0, Z+
    8c74:	0d 92       	st	X+, r0
    8c76:	05 90       	lpm	r0, Z+
    8c78:	0d 92       	st	X+, r0
    8c7a:	05 90       	lpm	r0, Z+
    8c7c:	0d 92       	st	X+, r0
    8c7e:	05 90       	lpm	r0, Z+
    8c80:	0d 92       	st	X+, r0
    8c82:	05 90       	lpm	r0, Z+
    8c84:	0d 92       	st	X+, r0
    8c86:	05 90       	lpm	r0, Z+
    8c88:	0d 92       	st	X+, r0
    8c8a:	05 90       	lpm	r0, Z+
    8c8c:	0d 92       	st	X+, r0
    8c8e:	05 90       	lpm	r0, Z+
    8c90:	0d 92       	st	X+, r0
    8c92:	05 90       	lpm	r0, Z+
    8c94:	0d 92       	st	X+, r0
    8c96:	05 90       	lpm	r0, Z+
    8c98:	0d 92       	st	X+, r0
    8c9a:	05 90       	lpm	r0, Z+
    8c9c:	0d 92       	st	X+, r0
    8c9e:	05 90       	lpm	r0, Z+
    8ca0:	0d 92       	st	X+, r0


	clr r1
    8ca2:	11 24       	eor	r1, r1
	ret
    8ca4:	08 95       	ret

00008ca6 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    8ca6:	0f 93       	push	r16
	push r17
    8ca8:	1f 93       	push	r17
	push YL
    8caa:	cf 93       	push	r28
	push YH
    8cac:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    8cae:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    8cb0:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    8cb2:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    8cb4:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    8cb6:	e0 0d       	add	r30, r0
	adc ZH,r1
    8cb8:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    8cba:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    8cbc:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    8cbe:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    8cc0:	8e 9f       	mul	r24, r30
	movw r26,r0
    8cc2:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    8cc4:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    8cc6:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    8cc8:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    8cca:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    8ccc:	00 24       	eor	r0, r0
	add YL,r1
    8cce:	c1 0d       	add	r28, r1
	adc YH,r0		
    8cd0:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    8cd2:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    8cd4:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    8cd6:	ea 0f       	add	r30, r26
	adc ZH,r27
    8cd8:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    8cda:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8cdc:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    8cde:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    8ce0:	69 9f       	mul	r22, r25
	add XL,r0
    8ce2:	a0 0d       	add	r26, r0
	adc XH,r1
    8ce4:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    8ce6:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    8ce8:	dd 27       	eor	r29, r29

	cpi r20,0	
    8cea:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    8cec:	51 f4       	brne	.+20     	; 0x8d02 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    8cee:	a2 0f       	add	r26, r18
	adc XH,r1
    8cf0:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    8cf2:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    8cf4:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    8cf6:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    8cf8:	11 c0       	rjmp	.+34     	; 0x8d1c <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    8cfa:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    8cfc:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    8cfe:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    8d00:	0d c0       	rjmp	.+26     	; 0x8d1c <x_check_end>

00008d02 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    8d02:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    8d04:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    8d06:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    8d08:	04 c0       	rjmp	.+8      	; 0x8d12 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    8d0a:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    8d0c:	e8 0f       	add	r30, r24
	adc ZH,r1	
    8d0e:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    8d10:	05 c0       	rjmp	.+10     	; 0x8d1c <x_check_end>

00008d12 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    8d12:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    8d14:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    8d16:	e2 0f       	add	r30, r18
	adc ZH,r1
    8d18:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    8d1a:	31 97       	sbiw	r30, 0x01	; 1

00008d1c <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    8d1c:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    8d1e:	41 f4       	brne	.+16     	; 0x8d30 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    8d20:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    8d22:	93 9f       	mul	r25, r19
	add XL,r0
    8d24:	a0 0d       	add	r26, r0
	adc XH,r1
    8d26:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    8d28:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    8d2a:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    8d2c:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    8d2e:	0a c0       	rjmp	.+20     	; 0x8d44 <y_check_end>

00008d30 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    8d30:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    8d32:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    8d34:	63 2f       	mov	r22, r19
	dec r22
    8d36:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    8d38:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    8d3a:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    8d3c:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    8d3e:	56 9f       	mul	r21, r22
	add ZL,r0
    8d40:	e0 0d       	add	r30, r0
	adc ZH,r1	
    8d42:	f1 1d       	adc	r31, r1

00008d44 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    8d44:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    8d46:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    8d48:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    8d4a:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    8d4c:	00 ff       	sbrs	r16, 0
	clr r23
    8d4e:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    8d50:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    8d52:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    8d54:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    8d56:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    8d58:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    8d5a:	59 1b       	sub	r21, r25

00008d5c <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    8d5c:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    8d5e:	48 1b       	sub	r20, r24

00008d60 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    8d60:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    8d62:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    8d64:	2c 93       	st	X, r18
	adiw XL,1
    8d66:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    8d68:	e6 0f       	add	r30, r22
	adc ZH,r23
    8d6a:	f7 1f       	adc	r31, r23
	dec r20
    8d6c:	4a 95       	dec	r20
	brne x_loop
    8d6e:	c1 f7       	brne	.-16     	; 0x8d60 <x_loop>

	add ZL,YL		;src+=srcXdiff
    8d70:	ec 0f       	add	r30, r28
	adc ZH,YH
    8d72:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    8d74:	a8 0f       	add	r26, r24
	adc XH,r1
    8d76:	b1 1d       	adc	r27, r1
	dec r21
    8d78:	5a 95       	dec	r21
	brne y_loop
    8d7a:	81 f7       	brne	.-32     	; 0x8d5c <y_loop>


	pop YH
    8d7c:	df 91       	pop	r29
	pop YL
    8d7e:	cf 91       	pop	r28
	pop r17
    8d80:	1f 91       	pop	r17
	pop r16
    8d82:	0f 91       	pop	r16
	ret
    8d84:	08 95       	ret

00008d86 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    8d86:	0f 92       	push	r0
	push r1
    8d88:	1f 92       	push	r1
	push ZL;2
    8d8a:	ef 93       	push	r30
	push ZH;2
    8d8c:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8d8e:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8d90:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8d92:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    8d96:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    8d98:	f1 e0       	ldi	r31, 0x01	; 1

00008d9a <latency_loop>:
latency_loop:
	cp ZL,ZH
    8d9a:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    8d9c:	00 f0       	brcs	.+0      	; 0x8d9e <latency_loop+0x4>
	inc ZH
    8d9e:	f3 95       	inc	r31
	cpi ZH,10
    8da0:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    8da2:	d8 f3       	brcs	.-10     	; 0x8d9a <latency_loop>
	jmp .
    8da4:	0c 94 d4 46 	jmp	0x8da8	; 0x8da8 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    8da8:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8dac:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8dae:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    8db2:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    8db6:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8db8:	57 c0       	rjmp	.+174    	; 0x8e68 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8dba:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8dbc:	98 f0       	brcs	.+38     	; 0x8de4 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    8dbe:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8dc0:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8dc4:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8dc6:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8dca:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8dcc:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    8dce:	26 f4       	brtc	.+8      	; 0x8dd8 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8dd0:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8dd2:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <update_sound>
	rjmp sync_end
    8dd6:	b6 c0       	rjmp	.+364    	; 0x8f44 <sync_end>

00008dd8 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8dd8:	e5 e1       	ldi	r30, 0x15	; 21
    8dda:	ea 95       	dec	r30
    8ddc:	f1 f7       	brne	.-4      	; 0x8dda <sync_pre_eq_no_sound_update+0x2>
    8dde:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8de0:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8de2:	b0 c0       	rjmp	.+352    	; 0x8f44 <sync_end>

00008de4 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8de4:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8de6:	38 f1       	brcs	.+78     	; 0x8e36 <sync_post_eq>

	rjmp .
    8de8:	00 c0       	rjmp	.+0      	; 0x8dea <sync_eq+0x6>
	rjmp .
    8dea:	00 c0       	rjmp	.+0      	; 0x8dec <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8dec:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    8dee:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8df0:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8df2:	16 f4       	brtc	.+4      	; 0x8df8 <sync_eq_skip>
	
	call update_sound
    8df4:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <update_sound>

00008df8 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8df8:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    8dfa:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    8dfe:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8e00:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    8e04:	9f c0       	rjmp	.+318    	; 0x8f44 <sync_end>

00008e06 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    8e06:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    8e08:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    8e0a:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    8e0c:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    8e10:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    8e12:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    8e14:	00 f0       	brcs	.+0      	; 0x8e16 <__vector_14+0x10>

	cpi ZL,2
    8e16:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    8e18:	00 f0       	brcs	.+0      	; 0x8e1a <__vector_14+0x14>

	cpi ZL,3
    8e1a:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    8e1c:	00 f0       	brcs	.+0      	; 0x8e1e <__vector_14+0x18>

	cpi ZL,4
    8e1e:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    8e20:	00 f0       	brcs	.+0      	; 0x8e22 <__vector_14+0x1c>

	cpi ZL,5
    8e22:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    8e24:	00 f0       	brcs	.+0      	; 0x8e26 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    8e26:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    8e28:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    8e2a:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    8e2e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    8e30:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    8e32:	ef 91       	pop	r30
	reti
    8e34:	18 95       	reti

00008e36 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    8e36:	00 c0       	rjmp	.+0      	; 0x8e38 <sync_post_eq+0x2>

	bst ZL,0
    8e38:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8e3a:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    8e3c:	26 f4       	brtc	.+8      	; 0x8e46 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    8e3e:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8e40:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <update_sound>
	rjmp sync_pre_eq_cont
    8e44:	05 c0       	rjmp	.+10     	; 0x8e50 <sync_pre_eq_cont>

00008e46 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8e46:	e5 e1       	ldi	r30, 0x15	; 21
    8e48:	ea 95       	dec	r30
    8e4a:	f1 f7       	brne	.-4      	; 0x8e48 <sync_post_eq_no_sound_update+0x2>
    8e4c:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    8e4e:	28 9a       	sbi	0x05, 0	; 5

00008e50 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8e50:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8e54:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8e56:	09 f0       	breq	.+2      	; 0x8e5a <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8e58:	75 c0       	rjmp	.+234    	; 0x8f44 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    8e5a:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    8e5c:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    8e60:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8e62:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    8e66:	6e c0       	rjmp	.+220    	; 0x8f44 <sync_end>

00008e68 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8e68:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    8e6a:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    8e6e:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8e70:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8e74:	00 c0       	rjmp	.+0      	; 0x8e76 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8e76:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8e78:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8e7a:	00 c0       	rjmp	.+0      	; 0x8e7c <sync_hsync+0x14>
	call update_sound
    8e7c:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8e80:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8e82:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8e86:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8e88:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    8e8c:	ef 17       	cp	r30, r31
	brsh no_render
    8e8e:	d0 f4       	brcc	.+52     	; 0x8ec4 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8e90:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8e92:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    8e96:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8e98:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    8e9c:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8e9e:	ef 17       	cp	r30, r31
	brlo no_render
    8ea0:	88 f0       	brcs	.+34     	; 0x8ec4 <no_render>

	;push r1-r29
	ldi ZL,29
    8ea2:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8ea4:	ff 27       	eor	r31, r31

00008ea6 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8ea6:	00 80       	ld	r0, Z
	push r0
    8ea8:	0f 92       	push	r0
	dec ZL
    8eaa:	ea 95       	dec	r30
	brne push_loop	
    8eac:	e1 f7       	brne	.-8      	; 0x8ea6 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8eae:	06 e0       	ldi	r16, 0x06	; 6
    8eb0:	0a 95       	dec	r16
    8eb2:	f1 f7       	brne	.-4      	; 0x8eb0 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8eb4:	0e 94 ef 44 	call	0x89de	; 0x89de <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8eb8:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    8eba:	ff 27       	eor	r31, r31

00008ebc <pop_loop>:
pop_loop:
	pop r0
    8ebc:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8ebe:	01 92       	st	Z+, r0
	cpi ZL,30
    8ec0:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8ec2:	e0 f3       	brcs	.-8      	; 0x8ebc <pop_loop>

00008ec4 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8ec4:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    8ec8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    8eca:	09 f0       	breq	.+2      	; 0x8ece <no_render+0xa>
	rjmp sync_end
    8ecc:	3b c0       	rjmp	.+118    	; 0x8f44 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8ece:	2f 93       	push	r18
	push r19
    8ed0:	3f 93       	push	r19
	push r20
    8ed2:	4f 93       	push	r20
	push r21
    8ed4:	5f 93       	push	r21
	push r22
    8ed6:	6f 93       	push	r22
	push r23
    8ed8:	7f 93       	push	r23
	push r24
    8eda:	8f 93       	push	r24
	push r25
    8edc:	9f 93       	push	r25
	push r26
    8ede:	af 93       	push	r26
	push r27
    8ee0:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8ee2:	78 94       	sei
	clr r1
    8ee4:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    8ee6:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    8ee8:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8eec:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    8eee:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    8ef2:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    8ef6:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    8efa:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    8efe:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8f02:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    8f06:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    8f0a:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8f0c:	f1 05       	cpc	r31, r1
	breq .+2 
    8f0e:	09 f0       	breq	.+2      	; 0x8f12 <no_render+0x4e>
	icall
    8f10:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8f12:	0e 94 4f 49 	call	0x929e	; 0x929e <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    8f16:	0e 94 ea 56 	call	0xadd4	; 0xadd4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    8f1a:	0e 94 b4 47 	call	0x8f68	; 0x8f68 <process_music>
	clr r1
    8f1e:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8f20:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    8f24:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    8f28:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8f2a:	f1 05       	cpc	r31, r1
	breq .+2 
    8f2c:	09 f0       	breq	.+2      	; 0x8f30 <no_render+0x6c>
	icall
    8f2e:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8f30:	bf 91       	pop	r27
	pop r26
    8f32:	af 91       	pop	r26
	pop r25
    8f34:	9f 91       	pop	r25
	pop r24
    8f36:	8f 91       	pop	r24
	pop r23
    8f38:	7f 91       	pop	r23
	pop r22
    8f3a:	6f 91       	pop	r22
	pop r21
    8f3c:	5f 91       	pop	r21
	pop r20
    8f3e:	4f 91       	pop	r20
	pop r19
    8f40:	3f 91       	pop	r19
	pop r18
    8f42:	2f 91       	pop	r18

00008f44 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8f44:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8f46:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    8f48:	ff 91       	pop	r31
	pop ZL
    8f4a:	ef 91       	pop	r30
	pop r1
    8f4c:	1f 90       	pop	r1
	pop r0
    8f4e:	0f 90       	pop	r0
	reti
    8f50:	18 95       	reti

00008f52 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8f52:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8f54:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8f56:	00 c0       	rjmp	.+0      	; 0x8f58 <hsync_pulse+0x6>
	call update_sound
    8f58:	0e 94 ba 47 	call	0x8f74	; 0x8f74 <update_sound>

	lds ZL,sync_pulse
    8f5c:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8f60:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8f62:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    8f66:	08 95       	ret

00008f68 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8f68:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8f6c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8f6e:	0e 94 05 4c 	call	0x980a	; 0x980a <ProcessMusic>
#endif

	ret
    8f72:	08 95       	ret

00008f74 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8f74:	0f 93       	push	r16
	push r17
    8f76:	1f 93       	push	r17
	push r18
    8f78:	2f 93       	push	r18
	push r28
    8f7a:	cf 93       	push	r28
	push r29
    8f7c:	df 93       	push	r29

	mov r18,ZL
    8f7e:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8f80:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8f84:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    8f88:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8f8a:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8f8e:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8f92:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8f96:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8f98:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8f9a:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8f9e:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8fa2:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8fa6:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8fa8:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8faa:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8fac:	d0 2d       	mov	r29, r0
	nop
    8fae:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8fb0:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8fb4:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    8fb8:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8fba:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8fbe:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8fc2:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8fc6:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8fc8:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8fca:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8fce:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8fd2:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8fd6:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8fd8:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8fda:	20 ff       	sbrs	r18, 0
	rjmp .
    8fdc:	00 c0       	rjmp	.+0      	; 0x8fde <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8fde:	01 03       	mulsu	r16, r17
	clr r0
    8fe0:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8fe2:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8fe4:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8fe6:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8fe8:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8fec:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8ff0:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8ff2:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    8ff6:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    8ffa:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8ffe:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    9000:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    9002:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    9006:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    900a:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    900e:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    9010:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    9012:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    9014:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    9016:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    901a:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    901e:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    9022:	ea 95       	dec	r30
	brpl ch4_no_shift	
    9024:	92 f4       	brpl	.+36     	; 0x904a <ch4_no_shift>

	lds ZH,tr4_params
    9026:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    902a:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    902c:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    902e:	00 2e       	mov	r0, r16
	lsr r0
    9030:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    9032:	00 26       	eor	r0, r16
	bst r0,0
    9034:	00 fa       	bst	r0, 0
	lsr r17
    9036:	16 95       	lsr	r17
	ror r16
    9038:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    903a:	16 f9       	bld	r17, 6
	sbrs ZH,0
    903c:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    903e:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    9040:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    9044:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    9048:	03 c0       	rjmp	.+6      	; 0x9050 <ch4_end>

0000904a <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    904a:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    904c:	1a 95       	dec	r17
	brne .-4
    904e:	f1 f7       	brne	.-4      	; 0x904c <ch4_no_shift+0x2>

00009050 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    9050:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    9054:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    9056:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    9058:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    905a:	21 ff       	sbrs	r18, 1
	rjmp .
    905c:	00 c0       	rjmp	.+0      	; 0x905e <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    905e:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    9060:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    9062:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    9066:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    9068:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    906a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    906c:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    906e:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    9072:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    9076:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    9078:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    907c:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    9080:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    9084:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    9086:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    908a:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    908c:	f0 1f       	adc	r31, r16

	movw r16,ZL
    908e:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    9090:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    9094:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    9098:	00 19       	sub	r16, r0
	sbc r17,r1
    909a:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    909c:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    90a0:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    90a4:	e0 15       	cp	r30, r0
	cpc ZH,r1
    90a6:	f1 05       	cpc	r31, r1
	brlo .+2
    90a8:	08 f0       	brcs	.+2      	; 0x90ac <ch4_end+0x5c>
	movw ZL,r16
    90aa:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    90ac:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    90b0:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    90b4:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    90b6:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    90ba:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    90bc:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    90be:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    90c0:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    90c2:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    90c4:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    90c6:	d0 05       	cpc	r29, r0
	brlt .+2
    90c8:	0c f0       	brlt	.+2      	; 0x90cc <ch4_end+0x7c>
	ldi r28,127
    90ca:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    90cc:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    90ce:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    90d0:	d0 05       	cpc	r29, r0
	brge .+2
    90d2:	0c f4       	brge	.+2      	; 0x90d6 <ch4_end+0x86>
	ldi r28,-128
    90d4:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    90d6:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    90d8:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    90dc:	df 91       	pop	r29
	pop r28
    90de:	cf 91       	pop	r28
	pop r18
    90e0:	2f 91       	pop	r18
	pop r17
    90e2:	1f 91       	pop	r17
	pop r16
    90e4:	0f 91       	pop	r16
	
	ret
    90e6:	08 95       	ret

000090e8 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    90e8:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    90ec:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    90f0:	08 95       	ret

000090f2 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    90f2:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    90f4:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    90f6:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    90f8:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    90fa:	68 e1       	ldi	r22, 0x18	; 24

000090fc <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    90fc:	6d 93       	st	X+, r22
	sbiw r30,1
    90fe:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    9100:	e9 f7       	brne	.-6      	; 0x90fc <fill_vram_loop>

	clr r1
    9102:	11 24       	eor	r1, r1

	ret
    9104:	08 95       	ret

00009106 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    9106:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    910a:	45 0f       	add	r20, r21
	rjmp SetTile	
    910c:	00 c0       	rjmp	.+0      	; 0x910e <SetTile>

0000910e <SetTile>:

	ret

#else

	clr r25
    910e:	99 27       	eor	r25, r25
	clr r23	
    9110:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    9112:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    9114:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    9116:	08 0e       	add	r0, r24
	adc r1,r25
    9118:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    911a:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    911c:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    911e:	a0 0d       	add	r26, r0
	adc XH,r1
    9120:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    9122:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    9124:	4c 93       	st	X, r20

	clr r1
    9126:	11 24       	eor	r1, r1

	ret
    9128:	08 95       	ret

0000912a <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    912a:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    912e:	08 95       	ret

00009130 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    9130:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    9134:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    9138:	08 95       	ret

0000913a <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    913a:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    913e:	81 70       	andi	r24, 0x01	; 1
	ret
    9140:	08 95       	ret

00009142 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    9142:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    9146:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    9148:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    914c:	08 95       	ret

0000914e <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    914e:	88 23       	and	r24, r24
	brne rj_p2
    9150:	29 f4       	brne	.+10     	; 0x915c <rj_p2>
		
	lds r24,joypad1_status_lo
    9152:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    9156:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    915a:	08 95       	ret

0000915c <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    915c:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    9160:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    9164:	08 95       	ret

00009166 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    9166:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    9168:	7a 95       	dec	r23
	brne .-4 ;~1 us
    916a:	f1 f7       	brne	.-4      	; 0x9168 <WaitUs+0x2>
	nop
    916c:	00 00       	nop
	sbiw r24,1
    916e:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    9170:	d1 f7       	brne	.-12     	; 0x9166 <WaitUs>

	ret
    9172:	08 95       	ret

00009174 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9174:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    9176:	fe cf       	rjmp	.-4      	; 0x9174 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    9178:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    917a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    917c:	60 bd       	out	0x20, r22	; 32
   cli
    917e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    9180:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    9182:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    9184:	78 94       	sei
   ret
    9186:	08 95       	ret

00009188 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    9188:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    918a:	fe cf       	rjmp	.-4      	; 0x9188 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    918c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    918e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    9190:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    9192:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    9194:	80 b5       	in	r24, 0x20	; 32
   sei
    9196:	78 94       	sei
   ret
    9198:	08 95       	ret

0000919a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    919a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    919c:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    91a0:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    91a4:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    91a6:	80 93 81 00 	sts	0x0081, r24

		cli
    91aa:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    91ac:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    91ae:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    91b2:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    91b4:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    91b8:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    91ba:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    91be:	90 93 60 00 	sts	0x0060, r25
	
		sei
    91c2:	78 94       	sei

000091c4 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    91c4:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    91c8:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    91ca:	e0 f3       	brcs	.-8      	; 0x91c4 <wait>

		ret
    91cc:	08 95       	ret

000091ce <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    91ce:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    91d2:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    91d6:	08 95       	ret

000091d8 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    91d8:	0f 93       	push	r16
		push r17
    91da:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    91dc:	0f b7       	in	r16, 0x3f	; 63
		push r16
    91de:	0f 93       	push	r16

		lds r16,sync_pulse
    91e0:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    91e4:	03 95       	inc	r16
		sts sync_pulse,r16
    91e6:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    91ea:	00 fd       	sbrc	r16, 0
		rjmp 1f
    91ec:	08 c0       	rjmp	.+16     	; 0x91fe <__vector_8+0x26>
		lds r17,random_value
    91ee:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    91f2:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    91f6:	10 27       	eor	r17, r16
		sts random_value,r17
    91f8:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    91fc:	07 c0       	rjmp	.+14     	; 0x920c <__vector_8+0x34>
	1:
		lds r17,random_value+1
    91fe:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    9202:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    9206:	10 27       	eor	r17, r16
		sts random_value+1,r17
    9208:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    920c:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    920e:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    9212:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    9214:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    9216:	1f 91       	pop	r17
		pop r16
    9218:	0f 91       	pop	r16
		reti
    921a:	18 95       	reti

0000921c <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    921c:	98 e0       	ldi	r25, 0x08	; 8
    921e:	88 e1       	ldi	r24, 0x18	; 24
    9220:	0f b6       	in	r0, 0x3f	; 63
    9222:	f8 94       	cli
    9224:	a8 95       	wdr
    9226:	80 93 60 00 	sts	0x0060, r24
    922a:	0f be       	out	0x3f, r0	; 63
    922c:	90 93 60 00 	sts	0x0060, r25
	while(1);
    9230:	ff cf       	rjmp	.-2      	; 0x9230 <SoftReset+0x14>

00009232 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    9232:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    9234:	c8 95       	lpm
    9236:	c8 95       	lpm
		Wait200ns();
    9238:	c8 95       	lpm
    923a:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    923c:	12 98       	cbi	0x02, 2	; 2
    923e:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    9240:	80 e0       	ldi	r24, 0x00	; 0
    9242:	90 e0       	ldi	r25, 0x00	; 0
    9244:	20 e0       	ldi	r18, 0x00	; 0
    9246:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    9248:	36 95       	lsr	r19
    924a:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    924c:	96 95       	lsr	r25
    924e:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    9250:	c8 95       	lpm
    9252:	c8 95       	lpm
			Wait200ns();
    9254:	c8 95       	lpm
    9256:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    9258:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    925a:	00 9b       	sbis	0x00, 0	; 0
    925c:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    925e:	01 9b       	sbis	0x00, 1	; 0
    9260:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    9262:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    9264:	c8 95       	lpm
    9266:	c8 95       	lpm
			Wait200ns();
    9268:	c8 95       	lpm
    926a:	c8 95       	lpm
    926c:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    926e:	61 f7       	brne	.-40     	; 0x9248 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    9270:	30 93 f2 0a 	sts	0x0AF2, r19
    9274:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    9278:	90 93 f6 0a 	sts	0x0AF6, r25
    927c:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    9280:	80 91 f1 0a 	lds	r24, 0x0AF1
    9284:	90 91 f2 0a 	lds	r25, 0x0AF2
    9288:	0f 97       	sbiw	r24, 0x0f	; 15
    928a:	31 f0       	breq	.+12     	; 0x9298 <ReadButtons+0x66>
    928c:	80 91 f5 0a 	lds	r24, 0x0AF5
    9290:	90 91 f6 0a 	lds	r25, 0x0AF6
    9294:	0f 97       	sbiw	r24, 0x0f	; 15
    9296:	11 f4       	brne	.+4      	; 0x929c <ReadButtons+0x6a>
		SoftReset();
    9298:	0e 94 0e 49 	call	0x921c	; 0x921c <SoftReset>
    929c:	08 95       	ret

0000929e <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    929e:	10 92 3c 0b 	sts	0x0B3C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    92a2:	00 99       	sbic	0x00, 0	; 0
    92a4:	03 c0       	rjmp	.+6      	; 0x92ac <ReadControllers+0xe>
    92a6:	81 e0       	ldi	r24, 0x01	; 1
    92a8:	80 93 3c 0b 	sts	0x0B3C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    92ac:	01 99       	sbic	0x00, 1	; 0
    92ae:	05 c0       	rjmp	.+10     	; 0x92ba <ReadControllers+0x1c>
    92b0:	80 91 3c 0b 	lds	r24, 0x0B3C
    92b4:	82 60       	ori	r24, 0x02	; 2
    92b6:	80 93 3c 0b 	sts	0x0B3C, r24
			
	//read the standard buttons
	ReadButtons();
    92ba:	0c 94 19 49 	jmp	0x9232	; 0x9232 <ReadButtons>

000092be <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    92be:	cf 93       	push	r28
    92c0:	df 93       	push	r29
    92c2:	c0 e0       	ldi	r28, 0x00	; 0
    92c4:	d0 e0       	ldi	r29, 0x00	; 0
    92c6:	fe 01       	movw	r30, r28
    92c8:	e2 56       	subi	r30, 0x62	; 98
    92ca:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    92cc:	64 91       	lpm	r22, Z
    92ce:	ce 01       	movw	r24, r28
    92d0:	0e 94 ba 48 	call	0x9174	; 0x9174 <WriteEeprom>
    92d4:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    92d6:	c0 32       	cpi	r28, 0x20	; 32
    92d8:	d1 05       	cpc	r29, r1
    92da:	a9 f7       	brne	.-22     	; 0x92c6 <FormatEeprom+0x8>
    92dc:	c0 e2       	ldi	r28, 0x20	; 32
    92de:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    92e0:	6f ef       	ldi	r22, 0xFF	; 255
    92e2:	ce 01       	movw	r24, r28
    92e4:	0e 94 ba 48 	call	0x9174	; 0x9174 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    92e8:	6f ef       	ldi	r22, 0xFF	; 255
    92ea:	ce 01       	movw	r24, r28
    92ec:	01 96       	adiw	r24, 0x01	; 1
    92ee:	0e 94 ba 48 	call	0x9174	; 0x9174 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    92f2:	a0 96       	adiw	r28, 0x20	; 32
    92f4:	c1 15       	cp	r28, r1
    92f6:	88 e0       	ldi	r24, 0x08	; 8
    92f8:	d8 07       	cpc	r29, r24
    92fa:	91 f7       	brne	.-28     	; 0x92e0 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    92fc:	df 91       	pop	r29
    92fe:	cf 91       	pop	r28
    9300:	08 95       	ret

00009302 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    9302:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    9304:	80 e0       	ldi	r24, 0x00	; 0
    9306:	90 e0       	ldi	r25, 0x00	; 0
    9308:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    930c:	c8 2f       	mov	r28, r24
    930e:	81 e0       	ldi	r24, 0x01	; 1
    9310:	90 e0       	ldi	r25, 0x00	; 0
    9312:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    9316:	28 2f       	mov	r18, r24
    9318:	30 e0       	ldi	r19, 0x00	; 0
    931a:	32 2f       	mov	r19, r18
    931c:	22 27       	eor	r18, r18
    931e:	2c 0f       	add	r18, r28
    9320:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    9322:	81 e0       	ldi	r24, 0x01	; 1
    9324:	2a 35       	cpi	r18, 0x5A	; 90
    9326:	35 45       	sbci	r19, 0x55	; 85
    9328:	09 f0       	breq	.+2      	; 0x932c <isEepromFormatted+0x2a>
    932a:	80 e0       	ldi	r24, 0x00	; 0
}
    932c:	cf 91       	pop	r28
    932e:	08 95       	ret

00009330 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    9330:	cf 92       	push	r12
    9332:	df 92       	push	r13
    9334:	ef 92       	push	r14
    9336:	ff 92       	push	r15
    9338:	0f 93       	push	r16
    933a:	1f 93       	push	r17
    933c:	cf 93       	push	r28
    933e:	df 93       	push	r29
    9340:	1f 92       	push	r1
    9342:	cd b7       	in	r28, 0x3d	; 61
    9344:	de b7       	in	r29, 0x3e	; 62
    9346:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    9348:	0e 94 81 49 	call	0x9302	; 0x9302 <isEepromFormatted>
    934c:	88 23       	and	r24, r24
    934e:	09 f4       	brne	.+2      	; 0x9352 <EepromWriteBlock+0x22>
    9350:	4d c0       	rjmp	.+154    	; 0x93ec <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    9352:	f6 01       	movw	r30, r12
    9354:	80 81       	ld	r24, Z
    9356:	91 81       	ldd	r25, Z+1	; 0x01
    9358:	8f 3f       	cpi	r24, 0xFF	; 255
    935a:	ff ef       	ldi	r31, 0xFF	; 255
    935c:	9f 07       	cpc	r25, r31
    935e:	09 f4       	brne	.+2      	; 0x9362 <EepromWriteBlock+0x32>
    9360:	47 c0       	rjmp	.+142    	; 0x93f0 <EepromWriteBlock+0xc0>
    9362:	8a 35       	cpi	r24, 0x5A	; 90
    9364:	95 45       	sbci	r25, 0x55	; 85
    9366:	09 f4       	brne	.+2      	; 0x936a <EepromWriteBlock+0x3a>
    9368:	43 c0       	rjmp	.+134    	; 0x93f0 <EepromWriteBlock+0xc0>
    936a:	00 e2       	ldi	r16, 0x20	; 32
    936c:	10 e0       	ldi	r17, 0x00	; 0
    936e:	f1 2c       	mov	r15, r1
    9370:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    9372:	c8 01       	movw	r24, r16
    9374:	49 83       	std	Y+1, r20	; 0x01
    9376:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    937a:	e8 2e       	mov	r14, r24
    937c:	c8 01       	movw	r24, r16
    937e:	01 96       	adiw	r24, 0x01	; 1
    9380:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    9384:	28 2f       	mov	r18, r24
    9386:	30 e0       	ldi	r19, 0x00	; 0
    9388:	32 2f       	mov	r19, r18
    938a:	22 27       	eor	r18, r18
    938c:	c9 01       	movw	r24, r18
    938e:	8e 0d       	add	r24, r14
    9390:	91 1d       	adc	r25, r1
		if(id==block->id){
    9392:	f6 01       	movw	r30, r12
    9394:	20 81       	ld	r18, Z
    9396:	31 81       	ldd	r19, Z+1	; 0x01
    9398:	49 81       	ldd	r20, Y+1	; 0x01
    939a:	82 17       	cp	r24, r18
    939c:	93 07       	cpc	r25, r19
    939e:	19 f4       	brne	.+6      	; 0x93a6 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    93a0:	ff 20       	and	r15, r15
    93a2:	89 f0       	breq	.+34     	; 0x93c6 <EepromWriteBlock+0x96>
    93a4:	0c c0       	rjmp	.+24     	; 0x93be <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    93a6:	01 96       	adiw	r24, 0x01	; 1
    93a8:	19 f4       	brne	.+6      	; 0x93b0 <EepromWriteBlock+0x80>
    93aa:	f1 10       	cpse	r15, r1
    93ac:	01 c0       	rjmp	.+2      	; 0x93b0 <EepromWriteBlock+0x80>
    93ae:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    93b0:	4f 5f       	subi	r20, 0xFF	; 255
    93b2:	00 5e       	subi	r16, 0xE0	; 224
    93b4:	1f 4f       	sbci	r17, 0xFF	; 255
    93b6:	40 34       	cpi	r20, 0x40	; 64
    93b8:	e1 f6       	brne	.-72     	; 0x9372 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    93ba:	ff 20       	and	r15, r15
    93bc:	d9 f0       	breq	.+54     	; 0x93f4 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    93be:	20 e2       	ldi	r18, 0x20	; 32
    93c0:	f2 9e       	mul	r15, r18
    93c2:	80 01       	movw	r16, r0
    93c4:	11 24       	eor	r1, r1
    93c6:	76 01       	movw	r14, r12
    93c8:	80 e2       	ldi	r24, 0x20	; 32
    93ca:	e8 0e       	add	r14, r24
    93cc:	f1 1c       	adc	r15, r1
    93ce:	0c 19       	sub	r16, r12
    93d0:	1d 09       	sbc	r17, r13
    93d2:	c6 01       	movw	r24, r12
    93d4:	80 0f       	add	r24, r16
    93d6:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    93d8:	f6 01       	movw	r30, r12
    93da:	61 91       	ld	r22, Z+
    93dc:	6f 01       	movw	r12, r30
    93de:	0e 94 ba 48 	call	0x9174	; 0x9174 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    93e2:	ce 14       	cp	r12, r14
    93e4:	df 04       	cpc	r13, r15
    93e6:	a9 f7       	brne	.-22     	; 0x93d2 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    93e8:	80 e0       	ldi	r24, 0x00	; 0
    93ea:	05 c0       	rjmp	.+10     	; 0x93f6 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    93ec:	84 e0       	ldi	r24, 0x04	; 4
    93ee:	03 c0       	rjmp	.+6      	; 0x93f6 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    93f0:	81 e0       	ldi	r24, 0x01	; 1
    93f2:	01 c0       	rjmp	.+2      	; 0x93f6 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    93f4:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    93f6:	0f 90       	pop	r0
    93f8:	df 91       	pop	r29
    93fa:	cf 91       	pop	r28
    93fc:	1f 91       	pop	r17
    93fe:	0f 91       	pop	r16
    9400:	ff 90       	pop	r15
    9402:	ef 90       	pop	r14
    9404:	df 90       	pop	r13
    9406:	cf 90       	pop	r12
    9408:	08 95       	ret

0000940a <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    940a:	df 92       	push	r13
    940c:	ef 92       	push	r14
    940e:	ff 92       	push	r15
    9410:	0f 93       	push	r16
    9412:	1f 93       	push	r17
    9414:	cf 93       	push	r28
    9416:	df 93       	push	r29
    9418:	7c 01       	movw	r14, r24
    941a:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    941c:	0e 94 81 49 	call	0x9302	; 0x9302 <isEepromFormatted>
    9420:	88 23       	and	r24, r24
    9422:	89 f1       	breq	.+98     	; 0x9486 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    9424:	8f ef       	ldi	r24, 0xFF	; 255
    9426:	e8 16       	cp	r14, r24
    9428:	f8 06       	cpc	r15, r24
    942a:	79 f1       	breq	.+94     	; 0x948a <EepromReadBlock+0x80>
    942c:	00 e0       	ldi	r16, 0x00	; 0
    942e:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    9430:	c8 01       	movw	r24, r16
    9432:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    9436:	d8 2e       	mov	r13, r24
    9438:	c8 01       	movw	r24, r16
    943a:	01 96       	adiw	r24, 0x01	; 1
    943c:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    9440:	28 2f       	mov	r18, r24
    9442:	30 e0       	ldi	r19, 0x00	; 0
    9444:	32 2f       	mov	r19, r18
    9446:	22 27       	eor	r18, r18
    9448:	2d 0d       	add	r18, r13
    944a:	31 1d       	adc	r19, r1
		if(id==blockId){
    944c:	2e 15       	cp	r18, r14
    944e:	3f 05       	cpc	r19, r15
    9450:	39 f4       	brne	.+14     	; 0x9460 <EepromReadBlock+0x56>
    9452:	7e 01       	movw	r14, r28
    9454:	80 e2       	ldi	r24, 0x20	; 32
    9456:	e8 0e       	add	r14, r24
    9458:	f1 1c       	adc	r15, r1
    945a:	0c 1b       	sub	r16, r28
    945c:	1d 0b       	sbc	r17, r29
    945e:	08 c0       	rjmp	.+16     	; 0x9470 <EepromReadBlock+0x66>
    9460:	00 5e       	subi	r16, 0xE0	; 224
    9462:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    9464:	01 15       	cp	r16, r1
    9466:	84 e0       	ldi	r24, 0x04	; 4
    9468:	18 07       	cpc	r17, r24
    946a:	11 f7       	brne	.-60     	; 0x9430 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    946c:	83 e0       	ldi	r24, 0x03	; 3
    946e:	0e c0       	rjmp	.+28     	; 0x948c <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    9470:	ce 01       	movw	r24, r28
    9472:	80 0f       	add	r24, r16
    9474:	91 1f       	adc	r25, r17
    9476:	0e 94 c4 48 	call	0x9188	; 0x9188 <ReadEeprom>
    947a:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    947c:	ce 15       	cp	r28, r14
    947e:	df 05       	cpc	r29, r15
    9480:	b9 f7       	brne	.-18     	; 0x9470 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    9482:	80 e0       	ldi	r24, 0x00	; 0
    9484:	03 c0       	rjmp	.+6      	; 0x948c <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    9486:	84 e0       	ldi	r24, 0x04	; 4
    9488:	01 c0       	rjmp	.+2      	; 0x948c <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    948a:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    948c:	df 91       	pop	r29
    948e:	cf 91       	pop	r28
    9490:	1f 91       	pop	r17
    9492:	0f 91       	pop	r16
    9494:	ff 90       	pop	r15
    9496:	ef 90       	pop	r14
    9498:	df 90       	pop	r13
    949a:	08 95       	ret

0000949c <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    949c:	fc 01       	movw	r30, r24
    949e:	45 87       	std	Z+13, r20	; 0x0d
    94a0:	08 95       	ret

000094a2 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    94a2:	e2 e0       	ldi	r30, 0x02	; 2
    94a4:	fb e0       	ldi	r31, 0x0B	; 11
    94a6:	81 e0       	ldi	r24, 0x01	; 1
    94a8:	91 e0       	ldi	r25, 0x01	; 1
    94aa:	95 8b       	std	Z+21, r25	; 0x15
    94ac:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    94ae:	43 8b       	std	Z+19, r20	; 0x13
    94b0:	08 95       	ret

000094b2 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    94b2:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    94b4:	90 81       	ld	r25, Z
    94b6:	9f 75       	andi	r25, 0x5F	; 95
    94b8:	90 83       	st	Z, r25
    94ba:	08 95       	ret

000094bc <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    94bc:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    94be:	90 81       	ld	r25, Z
    94c0:	90 64       	ori	r25, 0x40	; 64
    94c2:	90 83       	st	Z, r25
    94c4:	08 95       	ret

000094c6 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    94c6:	fc 01       	movw	r30, r24
    94c8:	44 87       	std	Z+12, r20	; 0x0c
    94ca:	08 95       	ret

000094cc <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    94cc:	fc 01       	movw	r30, r24
    94ce:	47 83       	std	Z+7, r20	; 0x07
    94d0:	08 95       	ret

000094d2 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    94d2:	fc 01       	movw	r30, r24
    94d4:	40 87       	std	Z+8, r20	; 0x08
    94d6:	08 95       	ret

000094d8 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    94d8:	1f 93       	push	r17
    94da:	cf 93       	push	r28
    94dc:	df 93       	push	r29
    94de:	ec 01       	movw	r28, r24
    94e0:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    94e2:	29 81       	ldd	r18, Y+1	; 0x01
    94e4:	30 e0       	ldi	r19, 0x00	; 0
    94e6:	f9 01       	movw	r30, r18
    94e8:	ee 0f       	add	r30, r30
    94ea:	ff 1f       	adc	r31, r31
    94ec:	e8 5f       	subi	r30, 0xF8	; 248
    94ee:	f2 46       	sbci	r31, 0x62	; 98
    94f0:	65 91       	lpm	r22, Z+
    94f2:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    94f4:	f9 01       	movw	r30, r18
    94f6:	e4 0f       	add	r30, r20
    94f8:	f1 1d       	adc	r31, r1
    94fa:	47 fd       	sbrc	r20, 7
    94fc:	fa 95       	dec	r31
    94fe:	ee 0f       	add	r30, r30
    9500:	ff 1f       	adc	r31, r31
    9502:	e8 5f       	subi	r30, 0xF8	; 248
    9504:	f2 46       	sbci	r31, 0x62	; 98
    9506:	85 91       	lpm	r24, Z+
    9508:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    950a:	86 1b       	sub	r24, r22
    950c:	97 0b       	sbc	r25, r23
    950e:	60 91 44 0b 	lds	r22, 0x0B44
    9512:	70 e0       	ldi	r23, 0x00	; 0
    9514:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
	if(delta==0)delta++;
    9518:	61 15       	cp	r22, r1
    951a:	71 05       	cpc	r23, r1
    951c:	11 f4       	brne	.+4      	; 0x9522 <PatchCommand11+0x4a>
    951e:	61 e0       	ldi	r22, 0x01	; 1
    9520:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    9522:	86 e0       	ldi	r24, 0x06	; 6
    9524:	18 9f       	mul	r17, r24
    9526:	f0 01       	movw	r30, r0
    9528:	11 24       	eor	r1, r1
    952a:	ee 5f       	subi	r30, 0xFE	; 254
    952c:	f4 4f       	sbci	r31, 0xF4	; 244
    952e:	81 81       	ldd	r24, Z+1	; 0x01
    9530:	92 81       	ldd	r25, Z+2	; 0x02
    9532:	86 0f       	add	r24, r22
    9534:	97 1f       	adc	r25, r23
    9536:	92 83       	std	Z+2, r25	; 0x02
    9538:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    953a:	7b 83       	std	Y+3, r23	; 0x03
    953c:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    953e:	88 81       	ld	r24, Y
    9540:	88 60       	ori	r24, 0x08	; 8
    9542:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    9544:	89 81       	ldd	r24, Y+1	; 0x01
    9546:	48 0f       	add	r20, r24
    9548:	4c 83       	std	Y+4, r20	; 0x04
}
    954a:	df 91       	pop	r29
    954c:	cf 91       	pop	r28
    954e:	1f 91       	pop	r17
    9550:	08 95       	ret

00009552 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    9552:	40 93 44 0b 	sts	0x0B44, r20
    9556:	08 95       	ret

00009558 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    9558:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    955a:	64 2f       	mov	r22, r20
    955c:	0c 94 46 4e 	jmp	0x9c8c	; 0x9c8c <SetMixerWave>

00009560 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    9560:	fc 01       	movw	r30, r24
    9562:	86 2f       	mov	r24, r22
	track->note+=param;
    9564:	91 81       	ldd	r25, Z+1	; 0x01
    9566:	64 2f       	mov	r22, r20
    9568:	69 0f       	add	r22, r25
    956a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    956c:	0c 94 2f 4e 	jmp	0x9c5e	; 0x9c5e <SetMixerNote>

00009570 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    9570:	fc 01       	movw	r30, r24
    9572:	86 2f       	mov	r24, r22
	track->note-=param;
    9574:	91 81       	ldd	r25, Z+1	; 0x01
    9576:	69 2f       	mov	r22, r25
    9578:	64 1b       	sub	r22, r20
    957a:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    957c:	0c 94 2f 4e 	jmp	0x9c5e	; 0x9c5e <SetMixerNote>

00009580 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    9580:	0f 93       	push	r16
    9582:	1f 93       	push	r17
    9584:	cf 93       	push	r28
    9586:	df 93       	push	r29
    9588:	1f 92       	push	r1
    958a:	cd b7       	in	r28, 0x3d	; 61
    958c:	de b7       	in	r29, 0x3e	; 62
    958e:	8c 01       	movw	r16, r24
    9590:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    9592:	64 2f       	mov	r22, r20
    9594:	49 83       	std	Y+1, r20	; 0x01
    9596:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <SetMixerNote>
	track->note=param;
    959a:	49 81       	ldd	r20, Y+1	; 0x01
    959c:	f8 01       	movw	r30, r16
    959e:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    95a0:	80 81       	ld	r24, Z
    95a2:	87 7f       	andi	r24, 0xF7	; 247
    95a4:	80 83       	st	Z, r24
}
    95a6:	0f 90       	pop	r0
    95a8:	df 91       	pop	r29
    95aa:	cf 91       	pop	r28
    95ac:	1f 91       	pop	r17
    95ae:	0f 91       	pop	r16
    95b0:	08 95       	ret

000095b2 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    95b2:	90 93 b0 0b 	sts	0x0BB0, r25
    95b6:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    95ba:	8f e6       	ldi	r24, 0x6F	; 111
    95bc:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    95c0:	10 92 00 0b 	sts	0x0B00, r1
    95c4:	ed e4       	ldi	r30, 0x4D	; 77
    95c6:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    95c8:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    95ca:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    95cc:	28 e1       	ldi	r18, 0x18	; 24
    95ce:	df 01       	movw	r26, r30
    95d0:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    95d2:	8c 93       	st	X, r24
    95d4:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    95d6:	1c 92       	st	X, r1
    95d8:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    95da:	9c 93       	st	X, r25
    95dc:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    95de:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    95e0:	10 82       	st	Z, r1
    95e2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    95e4:	2c 93       	st	X, r18
    95e6:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    95e8:	8c 93       	st	X, r24
    95ea:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    95ec:	3b e0       	ldi	r19, 0x0B	; 11
    95ee:	eb 3b       	cpi	r30, 0xBB	; 187
    95f0:	f3 07       	cpc	r31, r19
    95f2:	69 f7       	brne	.-38     	; 0x95ce <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    95f4:	08 95       	ret

000095f6 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    95f6:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    95f8:	ed 91       	ld	r30, X+
    95fa:	fc 91       	ld	r31, X
    95fc:	11 97       	sbiw	r26, 0x01	; 1
    95fe:	9f 01       	movw	r18, r30
    9600:	2f 5f       	subi	r18, 0xFF	; 255
    9602:	3f 4f       	sbci	r19, 0xFF	; 255
    9604:	11 96       	adiw	r26, 0x01	; 1
    9606:	3c 93       	st	X, r19
    9608:	2e 93       	st	-X, r18
    960a:	e4 91       	lpm	r30, Z
    960c:	e7 fd       	sbrc	r30, 7
    960e:	03 c0       	rjmp	.+6      	; 0x9616 <ReadVarLen+0x20>
    9610:	8e 2f       	mov	r24, r30
    9612:	90 e0       	ldi	r25, 0x00	; 0
    9614:	08 95       	ret
    {
       value &= 0x7F;
    9616:	ef 77       	andi	r30, 0x7F	; 127
    9618:	8e 2f       	mov	r24, r30
    961a:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    961c:	96 95       	lsr	r25
    961e:	98 2f       	mov	r25, r24
    9620:	88 27       	eor	r24, r24
    9622:	97 95       	ror	r25
    9624:	87 95       	ror	r24
    9626:	2f 5f       	subi	r18, 0xFF	; 255
    9628:	3f 4f       	sbci	r19, 0xFF	; 255
    962a:	f9 01       	movw	r30, r18
    962c:	31 97       	sbiw	r30, 0x01	; 1
    962e:	e4 91       	lpm	r30, Z
    9630:	4e 2f       	mov	r20, r30
    9632:	4f 77       	andi	r20, 0x7F	; 127
    9634:	84 0f       	add	r24, r20
    9636:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    9638:	e7 fd       	sbrc	r30, 7
    963a:	f0 cf       	rjmp	.-32     	; 0x961c <ReadVarLen+0x26>
    963c:	2d 93       	st	X+, r18
    963e:	3c 93       	st	X, r19
    }


    return value;
}
    9640:	08 95       	ret

00009642 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    9642:	cf 92       	push	r12
    9644:	df 92       	push	r13
    9646:	ff 92       	push	r15
    9648:	0f 93       	push	r16
    964a:	1f 93       	push	r17
    964c:	cf 93       	push	r28
    964e:	df 93       	push	r29
    9650:	1f 92       	push	r1
    9652:	cd b7       	in	r28, 0x3d	; 61
    9654:	de b7       	in	r29, 0x3e	; 62
    9656:	18 2f       	mov	r17, r24
    9658:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    965a:	c8 2e       	mov	r12, r24
    965c:	d1 2c       	mov	r13, r1
    965e:	36 e1       	ldi	r19, 0x16	; 22
    9660:	83 9f       	mul	r24, r19
    9662:	f0 01       	movw	r30, r0
    9664:	11 24       	eor	r1, r1
    9666:	e1 5c       	subi	r30, 0xC1	; 193
    9668:	f4 4f       	sbci	r31, 0xF4	; 244
    966a:	80 81       	ld	r24, Z
    966c:	f8 2e       	mov	r15, r24
    966e:	ff 1c       	adc	r15, r15
    9670:	ff 24       	eor	r15, r15
    9672:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    9674:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    9676:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    9678:	9f ef       	ldi	r25, 0xFF	; 255
    967a:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    967c:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    967e:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    9680:	87 7b       	andi	r24, 0xB7	; 183
    9682:	80 62       	ori	r24, 0x20	; 32
    9684:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    9686:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    9688:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    968a:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    968c:	13 30       	cpi	r17, 0x03	; 3
    968e:	69 f4       	brne	.+26     	; 0x96aa <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    9690:	f1 10       	cpse	r15, r1
    9692:	01 c0       	rjmp	.+2      	; 0x9696 <TriggerCommon+0x54>
    9694:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    9696:	81 e0       	ldi	r24, 0x01	; 1
    9698:	91 e0       	ldi	r25, 0x01	; 1
    969a:	90 93 17 0b 	sts	0x0B17, r25
    969e:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    96a2:	81 e0       	ldi	r24, 0x01	; 1
    96a4:	80 93 15 0b 	sts	0x0B15, r24
    96a8:	3c c0       	rjmp	.+120    	; 0x9722 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    96aa:	14 30       	cpi	r17, 0x04	; 4
    96ac:	09 f0       	breq	.+2      	; 0x96b0 <TriggerCommon+0x6e>
    96ae:	2f c0       	rjmp	.+94     	; 0x970e <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    96b0:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    96b4:	80 91 af 0b 	lds	r24, 0x0BAF
    96b8:	90 91 b0 0b 	lds	r25, 0x0BB0
    96bc:	e9 e0       	ldi	r30, 0x09	; 9
    96be:	6e 9f       	mul	r22, r30
    96c0:	80 0d       	add	r24, r0
    96c2:	91 1d       	adc	r25, r1
    96c4:	11 24       	eor	r1, r1
    96c6:	fc 01       	movw	r30, r24
    96c8:	31 96       	adiw	r30, 0x01	; 1
    96ca:	65 91       	lpm	r22, Z+
    96cc:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    96ce:	70 93 1f 0b 	sts	0x0B1F, r23
    96d2:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    96d6:	ac 01       	movw	r20, r24
    96d8:	49 5f       	subi	r20, 0xF9	; 249
    96da:	5f 4f       	sbci	r21, 0xFF	; 255
    96dc:	fa 01       	movw	r30, r20
    96de:	a5 91       	lpm	r26, Z+
    96e0:	b4 91       	lpm	r27, Z
    96e2:	05 96       	adiw	r24, 0x05	; 5
    96e4:	fc 01       	movw	r30, r24
    96e6:	85 91       	lpm	r24, Z+
    96e8:	94 91       	lpm	r25, Z
    96ea:	a8 1b       	sub	r26, r24
    96ec:	b9 0b       	sbc	r27, r25
    96ee:	b0 93 21 0b 	sts	0x0B21, r27
    96f2:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    96f6:	fa 01       	movw	r30, r20
    96f8:	85 91       	lpm	r24, Z+
    96fa:	94 91       	lpm	r25, Z
    96fc:	68 0f       	add	r22, r24
    96fe:	79 1f       	adc	r23, r25
    9700:	70 93 23 0b 	sts	0x0B23, r23
    9704:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    9708:	62 2f       	mov	r22, r18
    970a:	84 e0       	ldi	r24, 0x04	; 4
    970c:	08 c0       	rjmp	.+16     	; 0x971e <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    970e:	60 e0       	ldi	r22, 0x00	; 0
    9710:	81 2f       	mov	r24, r17
    9712:	29 83       	std	Y+1, r18	; 0x01
    9714:	0e 94 46 4e 	call	0x9c8c	; 0x9c8c <SetMixerWave>
			SetMixerNote(channel,note);
    9718:	29 81       	ldd	r18, Y+1	; 0x01
    971a:	62 2f       	mov	r22, r18
    971c:	81 2f       	mov	r24, r17
    971e:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    9722:	86 e1       	ldi	r24, 0x16	; 22
    9724:	8c 9d       	mul	r24, r12
    9726:	f0 01       	movw	r30, r0
    9728:	8d 9d       	mul	r24, r13
    972a:	f0 0d       	add	r31, r0
    972c:	11 24       	eor	r1, r1
    972e:	e1 5c       	subi	r30, 0xC1	; 193
    9730:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    9732:	ff 20       	and	r15, r15
    9734:	11 f0       	breq	.+4      	; 0x973a <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    9736:	07 87       	std	Z+15, r16	; 0x0f
    9738:	01 c0       	rjmp	.+2      	; 0x973c <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    973a:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    973c:	e0 91 af 0b 	lds	r30, 0x0BAF
    9740:	f0 91 b0 0b 	lds	r31, 0x0BB0
    9744:	39 e0       	ldi	r19, 0x09	; 9
    9746:	03 9f       	mul	r16, r19
    9748:	e0 0d       	add	r30, r0
    974a:	f1 1d       	adc	r31, r1
    974c:	11 24       	eor	r1, r1
    974e:	33 96       	adiw	r30, 0x03	; 3
    9750:	85 91       	lpm	r24, Z+
    9752:	94 91       	lpm	r25, Z
	if(pos==NULL){
    9754:	00 97       	sbiw	r24, 0x00	; 0
    9756:	59 f4       	brne	.+22     	; 0x976e <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    9758:	86 e1       	ldi	r24, 0x16	; 22
    975a:	8c 9d       	mul	r24, r12
    975c:	f0 01       	movw	r30, r0
    975e:	8d 9d       	mul	r24, r13
    9760:	f0 0d       	add	r31, r0
    9762:	11 24       	eor	r1, r1
    9764:	e1 5c       	subi	r30, 0xC1	; 193
    9766:	f4 4f       	sbci	r31, 0xF4	; 244
    9768:	15 8a       	std	Z+21, r1	; 0x15
    976a:	14 8a       	std	Z+20, r1	; 0x14
    976c:	0e c0       	rjmp	.+28     	; 0x978a <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    976e:	fc 01       	movw	r30, r24
    9770:	24 91       	lpm	r18, Z
    9772:	36 e1       	ldi	r19, 0x16	; 22
    9774:	3c 9d       	mul	r19, r12
    9776:	f0 01       	movw	r30, r0
    9778:	3d 9d       	mul	r19, r13
    977a:	f0 0d       	add	r31, r0
    977c:	11 24       	eor	r1, r1
    977e:	e1 5c       	subi	r30, 0xC1	; 193
    9780:	f4 4f       	sbci	r31, 0xF4	; 244
    9782:	21 8b       	std	Z+17, r18	; 0x11
    9784:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    9786:	95 8b       	std	Z+21, r25	; 0x15
    9788:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    978a:	0f 90       	pop	r0
    978c:	df 91       	pop	r29
    978e:	cf 91       	pop	r28
    9790:	1f 91       	pop	r17
    9792:	0f 91       	pop	r16
    9794:	ff 90       	pop	r15
    9796:	df 90       	pop	r13
    9798:	cf 90       	pop	r12
    979a:	08 95       	ret

0000979c <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    979c:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    979e:	a8 2f       	mov	r26, r24
    97a0:	b0 e0       	ldi	r27, 0x00	; 0
    97a2:	96 e1       	ldi	r25, 0x16	; 22
    97a4:	89 9f       	mul	r24, r25
    97a6:	f0 01       	movw	r30, r0
    97a8:	11 24       	eor	r1, r1
    97aa:	e1 5c       	subi	r30, 0xC1	; 193
    97ac:	f4 4f       	sbci	r31, 0xF4	; 244
    97ae:	90 81       	ld	r25, Z
    97b0:	95 ff       	sbrs	r25, 5
    97b2:	02 c0       	rjmp	.+4      	; 0x97b8 <TriggerNote+0x1c>
    97b4:	97 fd       	sbrc	r25, 7
    97b6:	28 c0       	rjmp	.+80     	; 0x9808 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    97b8:	31 11       	cpse	r19, r1
    97ba:	18 c0       	rjmp	.+48     	; 0x97ec <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    97bc:	86 e1       	ldi	r24, 0x16	; 22
    97be:	8a 9f       	mul	r24, r26
    97c0:	f0 01       	movw	r30, r0
    97c2:	8b 9f       	mul	r24, r27
    97c4:	f0 0d       	add	r31, r0
    97c6:	11 24       	eor	r1, r1
    97c8:	e1 5c       	subi	r30, 0xC1	; 193
    97ca:	f4 4f       	sbci	r31, 0xF4	; 244
    97cc:	85 85       	ldd	r24, Z+13	; 0x0d
    97ce:	81 11       	cpse	r24, r1
    97d0:	02 c0       	rjmp	.+4      	; 0x97d6 <TriggerNote+0x3a>
    97d2:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    97d4:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    97d6:	86 e1       	ldi	r24, 0x16	; 22
    97d8:	8a 9f       	mul	r24, r26
    97da:	f0 01       	movw	r30, r0
    97dc:	8b 9f       	mul	r24, r27
    97de:	f0 0d       	add	r31, r0
    97e0:	11 24       	eor	r1, r1
    97e2:	e1 5c       	subi	r30, 0xC1	; 193
    97e4:	f4 4f       	sbci	r31, 0xF4	; 244
    97e6:	9f 7b       	andi	r25, 0xBF	; 191
    97e8:	90 83       	st	Z, r25
    97ea:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    97ec:	26 e1       	ldi	r18, 0x16	; 22
    97ee:	2a 9f       	mul	r18, r26
    97f0:	f0 01       	movw	r30, r0
    97f2:	2b 9f       	mul	r18, r27
    97f4:	f0 0d       	add	r31, r0
    97f6:	11 24       	eor	r1, r1
    97f8:	e1 5c       	subi	r30, 0xC1	; 193
    97fa:	f4 4f       	sbci	r31, 0xF4	; 244
    97fc:	9f 77       	andi	r25, 0x7F	; 127
    97fe:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    9800:	24 2f       	mov	r18, r20
    9802:	43 2f       	mov	r20, r19
    9804:	0c 94 21 4b 	jmp	0x9642	; 0x9642 <TriggerCommon>
    9808:	08 95       	ret

0000980a <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    980a:	5f 92       	push	r5
    980c:	6f 92       	push	r6
    980e:	7f 92       	push	r7
    9810:	8f 92       	push	r8
    9812:	9f 92       	push	r9
    9814:	af 92       	push	r10
    9816:	bf 92       	push	r11
    9818:	cf 92       	push	r12
    981a:	df 92       	push	r13
    981c:	ef 92       	push	r14
    981e:	ff 92       	push	r15
    9820:	0f 93       	push	r16
    9822:	1f 93       	push	r17
    9824:	cf 93       	push	r28
    9826:	df 93       	push	r29
    9828:	cf e3       	ldi	r28, 0x3F	; 63
    982a:	db e0       	ldi	r29, 0x0B	; 11
    982c:	82 e0       	ldi	r24, 0x02	; 2
    982e:	e8 2e       	mov	r14, r24
    9830:	8b e0       	ldi	r24, 0x0B	; 11
    9832:	f8 2e       	mov	r15, r24
    9834:	d7 01       	movw	r26, r14
    9836:	9e 01       	movw	r18, r28
    9838:	40 e0       	ldi	r20, 0x00	; 0
    983a:	50 e0       	ldi	r21, 0x00	; 0
    983c:	ca 01       	movw	r24, r20
    983e:	81 5c       	subi	r24, 0xC1	; 193
    9840:	94 4f       	sbci	r25, 0xF4	; 244
    9842:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9844:	fc 01       	movw	r30, r24
    9846:	85 85       	ldd	r24, Z+13	; 0x0d
    9848:	88 23       	and	r24, r24
    984a:	91 f0       	breq	.+36     	; 0x9870 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    984c:	64 85       	ldd	r22, Z+12	; 0x0c
    984e:	99 27       	eor	r25, r25
    9850:	87 fd       	sbrc	r24, 7
    9852:	90 95       	com	r25
    9854:	86 0f       	add	r24, r22
    9856:	91 1d       	adc	r25, r1
    9858:	8f 3f       	cpi	r24, 0xFF	; 255
    985a:	91 05       	cpc	r25, r1
    985c:	19 f0       	breq	.+6      	; 0x9864 <ProcessMusic+0x5a>
    985e:	14 f0       	brlt	.+4      	; 0x9864 <ProcessMusic+0x5a>
    9860:	8f ef       	ldi	r24, 0xFF	; 255
    9862:	90 e0       	ldi	r25, 0x00	; 0
    9864:	97 ff       	sbrs	r25, 7
    9866:	02 c0       	rjmp	.+4      	; 0x986c <ProcessMusic+0x62>
    9868:	80 e0       	ldi	r24, 0x00	; 0
    986a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    986c:	f6 01       	movw	r30, r12
    986e:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    9870:	f9 01       	movw	r30, r18
    9872:	10 81       	ld	r17, Z
    9874:	13 ff       	sbrs	r17, 3
    9876:	29 c0       	rjmp	.+82     	; 0x98ca <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9878:	62 81       	ldd	r22, Z+2	; 0x02
    987a:	73 81       	ldd	r23, Z+3	; 0x03
    987c:	11 96       	adiw	r26, 0x01	; 1
    987e:	8d 91       	ld	r24, X+
    9880:	9c 91       	ld	r25, X
    9882:	12 97       	sbiw	r26, 0x02	; 2
    9884:	86 0f       	add	r24, r22
    9886:	97 1f       	adc	r25, r23
    9888:	12 96       	adiw	r26, 0x02	; 2
    988a:	9c 93       	st	X, r25
    988c:	8e 93       	st	-X, r24
    988e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9890:	f6 01       	movw	r30, r12
    9892:	04 81       	ldd	r16, Z+4	; 0x04
    9894:	e0 2f       	mov	r30, r16
    9896:	f0 e0       	ldi	r31, 0x00	; 0
    9898:	ee 0f       	add	r30, r30
    989a:	ff 1f       	adc	r31, r31
    989c:	e8 5f       	subi	r30, 0xF8	; 248
    989e:	f2 46       	sbci	r31, 0x62	; 98
    98a0:	c5 90       	lpm	r12, Z+
    98a2:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    98a4:	16 16       	cp	r1, r22
    98a6:	17 06       	cpc	r1, r23
    98a8:	24 f4       	brge	.+8      	; 0x98b2 <ProcessMusic+0xa8>
    98aa:	8c 15       	cp	r24, r12
    98ac:	9d 05       	cpc	r25, r13
    98ae:	30 f4       	brcc	.+12     	; 0x98bc <ProcessMusic+0xb2>
    98b0:	0c c0       	rjmp	.+24     	; 0x98ca <ProcessMusic+0xc0>
    98b2:	67 2b       	or	r22, r23
    98b4:	51 f0       	breq	.+20     	; 0x98ca <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    98b6:	c8 16       	cp	r12, r24
    98b8:	d9 06       	cpc	r13, r25
    98ba:	38 f0       	brcs	.+14     	; 0x98ca <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    98bc:	12 96       	adiw	r26, 0x02	; 2
    98be:	dc 92       	st	X, r13
    98c0:	ce 92       	st	-X, r12
    98c2:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    98c4:	17 7f       	andi	r17, 0xF7	; 247
    98c6:	f9 01       	movw	r30, r18
    98c8:	10 83       	st	Z, r17
    98ca:	4a 5e       	subi	r20, 0xEA	; 234
    98cc:	5f 4f       	sbci	r21, 0xFF	; 255
    98ce:	2a 5e       	subi	r18, 0xEA	; 234
    98d0:	3f 4f       	sbci	r19, 0xFF	; 255
    98d2:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    98d4:	4e 36       	cpi	r20, 0x6E	; 110
    98d6:	51 05       	cpc	r21, r1
    98d8:	09 f0       	breq	.+2      	; 0x98dc <ProcessMusic+0xd2>
    98da:	b0 cf       	rjmp	.-160    	; 0x983c <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    98dc:	80 91 00 0b 	lds	r24, 0x0B00
    98e0:	88 23       	and	r24, r24
    98e2:	09 f4       	brne	.+2      	; 0x98e6 <ProcessMusic+0xdc>
    98e4:	cb c0       	rjmp	.+406    	; 0x9a7c <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    98e6:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    98e8:	80 91 ad 0b 	lds	r24, 0x0BAD
    98ec:	90 91 ae 0b 	lds	r25, 0x0BAE
    98f0:	20 91 b3 0b 	lds	r18, 0x0BB3
    98f4:	30 91 b4 0b 	lds	r19, 0x0BB4
    98f8:	82 17       	cp	r24, r18
    98fa:	93 07       	cpc	r25, r19
    98fc:	09 f0       	breq	.+2      	; 0x9900 <ProcessMusic+0xf6>
    98fe:	b9 c0       	rjmp	.+370    	; 0x9a72 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    9900:	20 91 b6 0b 	lds	r18, 0x0BB6
    9904:	30 91 b7 0b 	lds	r19, 0x0BB7
    9908:	b9 01       	movw	r22, r18
    990a:	6f 5f       	subi	r22, 0xFF	; 255
    990c:	7f 4f       	sbci	r23, 0xFF	; 255
    990e:	70 93 b7 0b 	sts	0x0BB7, r23
    9912:	60 93 b6 0b 	sts	0x0BB6, r22
    9916:	f9 01       	movw	r30, r18
    9918:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    991a:	4f 3f       	cpi	r20, 0xFF	; 255
    991c:	79 f5       	brne	.+94     	; 0x997c <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    991e:	a9 01       	movw	r20, r18
    9920:	4e 5f       	subi	r20, 0xFE	; 254
    9922:	5f 4f       	sbci	r21, 0xFF	; 255
    9924:	50 93 b7 0b 	sts	0x0BB7, r21
    9928:	40 93 b6 0b 	sts	0x0BB6, r20
    992c:	fb 01       	movw	r30, r22
    992e:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    9930:	6f 32       	cpi	r22, 0x2F	; 47
    9932:	19 f4       	brne	.+6      	; 0x993a <ProcessMusic+0x130>
						playSong=false;
    9934:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    9938:	9c c0       	rjmp	.+312    	; 0x9a72 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    993a:	66 30       	cpi	r22, 0x06	; 6
    993c:	09 f0       	breq	.+2      	; 0x9940 <ProcessMusic+0x136>
    993e:	8c c0       	rjmp	.+280    	; 0x9a58 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    9940:	fa 01       	movw	r30, r20
    9942:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    9944:	c9 01       	movw	r24, r18
    9946:	04 96       	adiw	r24, 0x04	; 4
    9948:	90 93 b7 0b 	sts	0x0BB7, r25
    994c:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    9950:	f9 01       	movw	r30, r18
    9952:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9954:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    9956:	e3 35       	cpi	r30, 0x53	; 83
    9958:	29 f4       	brne	.+10     	; 0x9964 <ProcessMusic+0x15a>
							loopStart=songPos;
    995a:	90 93 b9 0b 	sts	0x0BB9, r25
    995e:	80 93 b8 0b 	sts	0x0BB8, r24
    9962:	7a c0       	rjmp	.+244    	; 0x9a58 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    9964:	e5 34       	cpi	r30, 0x45	; 69
    9966:	09 f0       	breq	.+2      	; 0x996a <ProcessMusic+0x160>
    9968:	77 c0       	rjmp	.+238    	; 0x9a58 <ProcessMusic+0x24e>
							songPos=loopStart;
    996a:	80 91 b8 0b 	lds	r24, 0x0BB8
    996e:	90 91 b9 0b 	lds	r25, 0x0BB9
    9972:	90 93 b7 0b 	sts	0x0BB7, r25
    9976:	80 93 b6 0b 	sts	0x0BB6, r24
    997a:	6e c0       	rjmp	.+220    	; 0x9a58 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    997c:	47 fd       	sbrc	r20, 7
    997e:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    9982:	90 91 b1 0b 	lds	r25, 0x0BB1
    9986:	89 2f       	mov	r24, r25
    9988:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    998a:	47 ff       	sbrs	r20, 7
    998c:	08 c0       	rjmp	.+16     	; 0x999e <ProcessMusic+0x194>
    998e:	2e 5f       	subi	r18, 0xFE	; 254
    9990:	3f 4f       	sbci	r19, 0xFF	; 255
    9992:	30 93 b7 0b 	sts	0x0BB7, r19
    9996:	20 93 b6 0b 	sts	0x0BB6, r18
    999a:	fb 01       	movw	r30, r22
    999c:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    999e:	90 7f       	andi	r25, 0xF0	; 240
    99a0:	90 3b       	cpi	r25, 0xB0	; 176
    99a2:	e1 f0       	breq	.+56     	; 0x99dc <ProcessMusic+0x1d2>
    99a4:	90 3c       	cpi	r25, 0xC0	; 192
    99a6:	09 f4       	brne	.+2      	; 0x99aa <ProcessMusic+0x1a0>
    99a8:	51 c0       	rjmp	.+162    	; 0x9a4c <ProcessMusic+0x242>
    99aa:	90 39       	cpi	r25, 0x90	; 144
    99ac:	09 f0       	breq	.+2      	; 0x99b0 <ProcessMusic+0x1a6>
    99ae:	54 c0       	rjmp	.+168    	; 0x9a58 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    99b0:	e0 91 b6 0b 	lds	r30, 0x0BB6
    99b4:	f0 91 b7 0b 	lds	r31, 0x0BB7
    99b8:	9f 01       	movw	r18, r30
    99ba:	2f 5f       	subi	r18, 0xFF	; 255
    99bc:	3f 4f       	sbci	r19, 0xFF	; 255
    99be:	30 93 b7 0b 	sts	0x0BB7, r19
    99c2:	20 93 b6 0b 	sts	0x0BB6, r18
    99c6:	24 91       	lpm	r18, Z
    99c8:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    99ca:	18 9f       	mul	r17, r24
    99cc:	f0 01       	movw	r30, r0
    99ce:	11 24       	eor	r1, r1
    99d0:	e1 5c       	subi	r30, 0xC1	; 193
    99d2:	f4 4f       	sbci	r31, 0xF4	; 244
    99d4:	66 85       	ldd	r22, Z+14	; 0x0e
    99d6:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
    99da:	3e c0       	rjmp	.+124    	; 0x9a58 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    99dc:	e0 91 b6 0b 	lds	r30, 0x0BB6
    99e0:	f0 91 b7 0b 	lds	r31, 0x0BB7
    99e4:	9f 01       	movw	r18, r30
    99e6:	2f 5f       	subi	r18, 0xFF	; 255
    99e8:	3f 4f       	sbci	r19, 0xFF	; 255
    99ea:	30 93 b7 0b 	sts	0x0BB7, r19
    99ee:	20 93 b6 0b 	sts	0x0BB6, r18
    99f2:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    99f4:	47 30       	cpi	r20, 0x07	; 7
    99f6:	49 f4       	brne	.+18     	; 0x9a0a <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    99f8:	18 9f       	mul	r17, r24
    99fa:	d0 01       	movw	r26, r0
    99fc:	11 24       	eor	r1, r1
    99fe:	a1 5c       	subi	r26, 0xC1	; 193
    9a00:	b4 4f       	sbci	r27, 0xF4	; 244
    9a02:	ee 0f       	add	r30, r30
    9a04:	1a 96       	adiw	r26, 0x0a	; 10
    9a06:	ec 93       	st	X, r30
    9a08:	27 c0       	rjmp	.+78     	; 0x9a58 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    9a0a:	4b 30       	cpi	r20, 0x0B	; 11
    9a0c:	49 f4       	brne	.+18     	; 0x9a20 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    9a0e:	18 9f       	mul	r17, r24
    9a10:	d0 01       	movw	r26, r0
    9a12:	11 24       	eor	r1, r1
    9a14:	a1 5c       	subi	r26, 0xC1	; 193
    9a16:	b4 4f       	sbci	r27, 0xF4	; 244
    9a18:	ee 0f       	add	r30, r30
    9a1a:	19 96       	adiw	r26, 0x09	; 9
    9a1c:	ec 93       	st	X, r30
    9a1e:	1c c0       	rjmp	.+56     	; 0x9a58 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    9a20:	4c 35       	cpi	r20, 0x5C	; 92
    9a22:	49 f4       	brne	.+18     	; 0x9a36 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    9a24:	18 9f       	mul	r17, r24
    9a26:	d0 01       	movw	r26, r0
    9a28:	11 24       	eor	r1, r1
    9a2a:	a1 5c       	subi	r26, 0xC1	; 193
    9a2c:	b4 4f       	sbci	r27, 0xF4	; 244
    9a2e:	ee 0f       	add	r30, r30
    9a30:	17 96       	adiw	r26, 0x07	; 7
    9a32:	ec 93       	st	X, r30
    9a34:	11 c0       	rjmp	.+34     	; 0x9a58 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    9a36:	44 36       	cpi	r20, 0x64	; 100
    9a38:	79 f4       	brne	.+30     	; 0x9a58 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    9a3a:	18 9f       	mul	r17, r24
    9a3c:	d0 01       	movw	r26, r0
    9a3e:	11 24       	eor	r1, r1
    9a40:	a1 5c       	subi	r26, 0xC1	; 193
    9a42:	b4 4f       	sbci	r27, 0xF4	; 244
    9a44:	ee 0f       	add	r30, r30
    9a46:	18 96       	adiw	r26, 0x08	; 8
    9a48:	ec 93       	st	X, r30
    9a4a:	06 c0       	rjmp	.+12     	; 0x9a58 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9a4c:	18 9f       	mul	r17, r24
    9a4e:	f0 01       	movw	r30, r0
    9a50:	11 24       	eor	r1, r1
    9a52:	e1 5c       	subi	r30, 0xC1	; 193
    9a54:	f4 4f       	sbci	r31, 0xF4	; 244
    9a56:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    9a58:	86 eb       	ldi	r24, 0xB6	; 182
    9a5a:	9b e0       	ldi	r25, 0x0B	; 11
    9a5c:	0e 94 fb 4a 	call	0x95f6	; 0x95f6 <ReadVarLen>
    9a60:	90 93 b4 0b 	sts	0x0BB4, r25
    9a64:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    9a68:	10 92 ae 0b 	sts	0x0BAE, r1
    9a6c:	10 92 ad 0b 	sts	0x0BAD, r1
    9a70:	3b cf       	rjmp	.-394    	; 0x98e8 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9a72:	01 96       	adiw	r24, 0x01	; 1
    9a74:	90 93 ae 0b 	sts	0x0BAE, r25
    9a78:	80 93 ad 0b 	sts	0x0BAD, r24
    9a7c:	95 e4       	ldi	r25, 0x45	; 69
    9a7e:	a9 2e       	mov	r10, r25
    9a80:	9b e0       	ldi	r25, 0x0B	; 11
    9a82:	b9 2e       	mov	r11, r25
    9a84:	01 e5       	ldi	r16, 0x51	; 81
    9a86:	1b e0       	ldi	r17, 0x0B	; 11
    9a88:	20 e5       	ldi	r18, 0x50	; 80
    9a8a:	c2 2e       	mov	r12, r18
    9a8c:	2b e0       	ldi	r18, 0x0B	; 11
    9a8e:	d2 2e       	mov	r13, r18
    9a90:	32 e5       	ldi	r19, 0x52	; 82
    9a92:	83 2e       	mov	r8, r19
    9a94:	3b e0       	ldi	r19, 0x0B	; 11
    9a96:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    9a98:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9a9a:	66 24       	eor	r6, r6
    9a9c:	6a 94       	dec	r6
    9a9e:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    9aa0:	88 81       	ld	r24, Y
    9aa2:	86 fd       	sbrc	r24, 6
    9aa4:	43 c0       	rjmp	.+134    	; 0x9b2c <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    9aa6:	8c 89       	ldd	r24, Y+20	; 0x14
    9aa8:	9d 89       	ldd	r25, Y+21	; 0x15
    9aaa:	89 2b       	or	r24, r25
    9aac:	09 f4       	brne	.+2      	; 0x9ab0 <ProcessMusic+0x2a6>
    9aae:	3a c0       	rjmp	.+116    	; 0x9b24 <ProcessMusic+0x31a>
    9ab0:	d8 01       	movw	r26, r16
    9ab2:	9c 91       	ld	r25, X
    9ab4:	f6 01       	movw	r30, r12
    9ab6:	80 81       	ld	r24, Z
    9ab8:	98 17       	cp	r25, r24
    9aba:	08 f4       	brcc	.+2      	; 0x9abe <ProcessMusic+0x2b4>
    9abc:	33 c0       	rjmp	.+102    	; 0x9b24 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    9abe:	d8 01       	movw	r26, r16
    9ac0:	9c 91       	ld	r25, X
    9ac2:	f6 01       	movw	r30, r12
    9ac4:	80 81       	ld	r24, Z
    9ac6:	98 13       	cpse	r25, r24
    9ac8:	2d c0       	rjmp	.+90     	; 0x9b24 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    9aca:	ec 89       	ldd	r30, Y+20	; 0x14
    9acc:	fd 89       	ldd	r31, Y+21	; 0x15
    9ace:	af 01       	movw	r20, r30
    9ad0:	4f 5f       	subi	r20, 0xFF	; 255
    9ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    9ad4:	5d 8b       	std	Y+21, r21	; 0x15
    9ad6:	4c 8b       	std	Y+20, r20	; 0x14
    9ad8:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    9ada:	8f 3f       	cpi	r24, 0xFF	; 255
    9adc:	31 f4       	brne	.+12     	; 0x9aea <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    9ade:	88 81       	ld	r24, Y
    9ae0:	8f 77       	andi	r24, 0x7F	; 127
    9ae2:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    9ae4:	1d 8a       	std	Y+21, r1	; 0x15
    9ae6:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    9ae8:	1d c0       	rjmp	.+58     	; 0x9b24 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    9aea:	32 96       	adiw	r30, 0x02	; 2
    9aec:	fd 8b       	std	Y+21, r31	; 0x15
    9aee:	ec 8b       	std	Y+20, r30	; 0x14
    9af0:	fa 01       	movw	r30, r20
    9af2:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    9af4:	e8 2f       	mov	r30, r24
    9af6:	f0 e0       	ldi	r31, 0x00	; 0
    9af8:	ee 0f       	add	r30, r30
    9afa:	ff 1f       	adc	r31, r31
    9afc:	e2 54       	subi	r30, 0x42	; 66
    9afe:	ff 4f       	sbci	r31, 0xFF	; 255
    9b00:	25 91       	lpm	r18, Z+
    9b02:	34 91       	lpm	r19, Z
    9b04:	65 2d       	mov	r22, r5
    9b06:	ce 01       	movw	r24, r28
    9b08:	f9 01       	movw	r30, r18
    9b0a:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    9b0c:	ec 89       	ldd	r30, Y+20	; 0x14
    9b0e:	fd 89       	ldd	r31, Y+21	; 0x15
    9b10:	cf 01       	movw	r24, r30
    9b12:	01 96       	adiw	r24, 0x01	; 1
    9b14:	9d 8b       	std	Y+21, r25	; 0x15
    9b16:	8c 8b       	std	Y+20, r24	; 0x14
    9b18:	e4 91       	lpm	r30, Z
    9b1a:	d6 01       	movw	r26, r12
    9b1c:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    9b1e:	f8 01       	movw	r30, r16
    9b20:	10 82       	st	Z, r1
    9b22:	cd cf       	rjmp	.-102    	; 0x9abe <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    9b24:	d8 01       	movw	r26, r16
    9b26:	8c 91       	ld	r24, X
    9b28:	8f 5f       	subi	r24, 0xFF	; 255
    9b2a:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    9b2c:	98 81       	ld	r25, Y
    9b2e:	95 ff       	sbrs	r25, 5
    9b30:	6c c0       	rjmp	.+216    	; 0x9c0a <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    9b32:	f4 01       	movw	r30, r8
    9b34:	80 81       	ld	r24, Z
    9b36:	8f 3f       	cpi	r24, 0xFF	; 255
    9b38:	11 f0       	breq	.+4      	; 0x9b3e <ProcessMusic+0x334>
				track->patchPlayingTime++;
    9b3a:	8f 5f       	subi	r24, 0xFF	; 255
    9b3c:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    9b3e:	97 fd       	sbrc	r25, 7
    9b40:	04 c0       	rjmp	.+8      	; 0x9b4a <ProcessMusic+0x340>
    9b42:	f8 01       	movw	r30, r16
    9b44:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    9b46:	90 81       	ld	r25, Z
    9b48:	01 c0       	rjmp	.+2      	; 0x9b4c <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    9b4a:	9f ef       	ldi	r25, 0xFF	; 255
    9b4c:	f8 01       	movw	r30, r16
    9b4e:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    9b50:	80 81       	ld	r24, Z
    9b52:	88 23       	and	r24, r24
    9b54:	09 f4       	brne	.+2      	; 0x9b58 <ProcessMusic+0x34e>
    9b56:	4e c0       	rjmp	.+156    	; 0x9bf4 <ProcessMusic+0x3ea>
    9b58:	31 96       	adiw	r30, 0x01	; 1
    9b5a:	50 81       	ld	r21, Z
    9b5c:	55 23       	and	r21, r21
    9b5e:	09 f4       	brne	.+2      	; 0x9b62 <ProcessMusic+0x358>
    9b60:	49 c0       	rjmp	.+146    	; 0x9bf4 <ProcessMusic+0x3ea>
    9b62:	99 23       	and	r25, r25
    9b64:	09 f4       	brne	.+2      	; 0x9b68 <ProcessMusic+0x35e>
    9b66:	46 c0       	rjmp	.+140    	; 0x9bf4 <ProcessMusic+0x3ea>
    9b68:	40 91 b2 0b 	lds	r20, 0x0BB2
    9b6c:	44 23       	and	r20, r20
    9b6e:	09 f4       	brne	.+2      	; 0x9b72 <ProcessMusic+0x368>
    9b70:	41 c0       	rjmp	.+130    	; 0x9bf4 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    9b72:	89 9f       	mul	r24, r25
    9b74:	c0 01       	movw	r24, r0
    9b76:	11 24       	eor	r1, r1
    9b78:	93 95       	inc	r25
				uVol>>=8;
    9b7a:	89 2f       	mov	r24, r25
    9b7c:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    9b7e:	58 9f       	mul	r21, r24
    9b80:	90 01       	movw	r18, r0
    9b82:	59 9f       	mul	r21, r25
    9b84:	30 0d       	add	r19, r0
    9b86:	11 24       	eor	r1, r1
    9b88:	c9 01       	movw	r24, r18
    9b8a:	93 95       	inc	r25
				uVol>>=8;
    9b8c:	89 2f       	mov	r24, r25
    9b8e:	99 27       	eor	r25, r25
    9b90:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    9b92:	50 81       	ld	r21, Z
    9b94:	58 9f       	mul	r21, r24
    9b96:	90 01       	movw	r18, r0
    9b98:	59 9f       	mul	r21, r25
    9b9a:	30 0d       	add	r19, r0
    9b9c:	11 24       	eor	r1, r1
    9b9e:	33 95       	inc	r19
				uVol>>=8;
    9ba0:	23 2f       	mov	r18, r19
    9ba2:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    9ba4:	42 9f       	mul	r20, r18
    9ba6:	c0 01       	movw	r24, r0
    9ba8:	43 9f       	mul	r20, r19
    9baa:	90 0d       	add	r25, r0
    9bac:	11 24       	eor	r1, r1
    9bae:	93 95       	inc	r25
				uVol>>=8;
    9bb0:	89 2f       	mov	r24, r25
    9bb2:	99 27       	eor	r25, r25
    9bb4:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    9bb6:	20 81       	ld	r18, Z
    9bb8:	22 23       	and	r18, r18
    9bba:	f1 f0       	breq	.+60     	; 0x9bf8 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9bbc:	d5 01       	movw	r26, r10
    9bbe:	ec 91       	ld	r30, X
    9bc0:	f0 e0       	ldi	r31, 0x00	; 0
    9bc2:	e0 50       	subi	r30, 0x00	; 0
    9bc4:	f1 46       	sbci	r31, 0x61	; 97
    9bc6:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9bc8:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9bca:	2e 9f       	mul	r18, r30
    9bcc:	f0 01       	movw	r30, r0
    9bce:	11 24       	eor	r1, r1
    9bd0:	f3 95       	inc	r31
					tVol>>=8;
    9bd2:	ef 2f       	mov	r30, r31
    9bd4:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9bd6:	a3 01       	movw	r20, r6
    9bd8:	4e 1b       	sub	r20, r30
    9bda:	5f 0b       	sbc	r21, r31
    9bdc:	48 9f       	mul	r20, r24
    9bde:	90 01       	movw	r18, r0
    9be0:	49 9f       	mul	r20, r25
    9be2:	30 0d       	add	r19, r0
    9be4:	58 9f       	mul	r21, r24
    9be6:	30 0d       	add	r19, r0
    9be8:	11 24       	eor	r1, r1
    9bea:	c9 01       	movw	r24, r18
    9bec:	93 95       	inc	r25
					uVol>>=8;
    9bee:	89 2f       	mov	r24, r25
    9bf0:	99 27       	eor	r25, r25
    9bf2:	02 c0       	rjmp	.+4      	; 0x9bf8 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    9bf4:	80 e0       	ldi	r24, 0x00	; 0
    9bf6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    9bf8:	f5 01       	movw	r30, r10
    9bfa:	30 81       	ld	r19, Z
    9bfc:	f8 01       	movw	r30, r16
    9bfe:	3a 97       	sbiw	r30, 0x0a	; 10
    9c00:	20 81       	ld	r18, Z
    9c02:	23 0f       	add	r18, r19
    9c04:	d5 01       	movw	r26, r10
    9c06:	2c 93       	st	X, r18
    9c08:	02 c0       	rjmp	.+4      	; 0x9c0e <ProcessMusic+0x404>

		}else{
			uVol=0;
    9c0a:	80 e0       	ldi	r24, 0x00	; 0
    9c0c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    9c0e:	f7 01       	movw	r30, r14
    9c10:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9c12:	53 94       	inc	r5
    9c14:	66 96       	adiw	r28, 0x16	; 22
    9c16:	f6 e0       	ldi	r31, 0x06	; 6
    9c18:	ef 0e       	add	r14, r31
    9c1a:	f1 1c       	adc	r15, r1
    9c1c:	86 e1       	ldi	r24, 0x16	; 22
    9c1e:	a8 0e       	add	r10, r24
    9c20:	b1 1c       	adc	r11, r1
    9c22:	0a 5e       	subi	r16, 0xEA	; 234
    9c24:	1f 4f       	sbci	r17, 0xFF	; 255
    9c26:	96 e1       	ldi	r25, 0x16	; 22
    9c28:	c9 0e       	add	r12, r25
    9c2a:	d1 1c       	adc	r13, r1
    9c2c:	a6 e1       	ldi	r26, 0x16	; 22
    9c2e:	8a 0e       	add	r8, r26
    9c30:	91 1c       	adc	r9, r1
    9c32:	b5 e0       	ldi	r27, 0x05	; 5
    9c34:	5b 12       	cpse	r5, r27
    9c36:	34 cf       	rjmp	.-408    	; 0x9aa0 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9c38:	df 91       	pop	r29
    9c3a:	cf 91       	pop	r28
    9c3c:	1f 91       	pop	r17
    9c3e:	0f 91       	pop	r16
    9c40:	ff 90       	pop	r15
    9c42:	ef 90       	pop	r14
    9c44:	df 90       	pop	r13
    9c46:	cf 90       	pop	r12
    9c48:	bf 90       	pop	r11
    9c4a:	af 90       	pop	r10
    9c4c:	9f 90       	pop	r9
    9c4e:	8f 90       	pop	r8
    9c50:	7f 90       	pop	r7
    9c52:	6f 90       	pop	r6
    9c54:	5f 90       	pop	r5
    9c56:	08 95       	ret

00009c58 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    9c58:	80 93 b2 0b 	sts	0x0BB2, r24
    9c5c:	08 95       	ret

00009c5e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9c5e:	99 27       	eor	r25, r25
	clr r23
    9c60:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9c62:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    9c64:	09 f4       	brne	.+2      	; 0x9c68 <set_note_waves>
		ret
    9c66:	08 95       	ret

00009c68 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    9c68:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9c6a:	fd e9       	ldi	r31, 0x9D	; 157
	lsl r22
    9c6c:	66 0f       	add	r22, r22
	rol r23
    9c6e:	77 1f       	adc	r23, r23
	add ZL,r22
    9c70:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9c72:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    9c74:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    9c76:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    9c78:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9c7a:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9c7c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9c7e:	28 9f       	mul	r18, r24
	add ZL,r0
    9c80:	e0 0d       	add	r30, r0
	adc ZH,r1
    9c82:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    9c84:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    9c86:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    9c88:	11 24       	eor	r1, r1
	

	ret
    9c8a:	08 95       	ret

00009c8c <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9c8c:	99 27       	eor	r25, r25
	clr r23
    9c8e:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9c90:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9c92:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9c94:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    9c96:	28 9f       	mul	r18, r24
	add ZL,r0
    9c98:	e0 0d       	add	r30, r0
	adc ZH,r1
    9c9a:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    9c9c:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9c9e:	31 f4       	brne	.+12     	; 0x9cac <smw1>
	lds r22,tr4_params
    9ca0:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    9ca4:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    9ca6:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    9caa:	0b c0       	rjmp	.+22     	; 0x9cc2 <esmw>

00009cac <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9cac:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9cae:	31 f4       	brne	.+12     	; 0x9cbc <smw2>
	lds r22,tr4_params
    9cb0:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    9cb4:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    9cb6:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    9cba:	03 c0       	rjmp	.+6      	; 0x9cc2 <esmw>

00009cbc <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9cbc:	7f e9       	ldi	r23, 0x9F	; 159
	add r23,r22
    9cbe:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9cc0:	75 83       	std	Z+5, r23	; 0x05

00009cc2 <esmw>:

esmw:
	clr r1	
    9cc2:	11 24       	eor	r1, r1
	ret
    9cc4:	08 95       	ret
	...

00009d00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9d00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9d02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9d06:	08 95       	ret

00009d08 <steptable>:
    9d08:	22 00       	.word	0x0022	; ????
    9d0a:	24 00       	.word	0x0024	; ????
    9d0c:	26 00       	.word	0x0026	; ????
    9d0e:	28 00       	.word	0x0028	; ????
    9d10:	2b 00       	.word	0x002b	; ????
    9d12:	2d 00       	.word	0x002d	; ????
    9d14:	30 00       	.word	0x0030	; ????
    9d16:	33 00       	.word	0x0033	; ????
    9d18:	36 00       	.word	0x0036	; ????
    9d1a:	39 00       	.word	0x0039	; ????
    9d1c:	3d 00       	.word	0x003d	; ????
    9d1e:	40 00       	.word	0x0040	; ????
    9d20:	44 00       	.word	0x0044	; ????
    9d22:	48 00       	.word	0x0048	; ????
    9d24:	4c 00       	.word	0x004c	; ????
    9d26:	51 00       	.word	0x0051	; ????
    9d28:	56 00       	.word	0x0056	; ????
    9d2a:	5b 00       	.word	0x005b	; ????
    9d2c:	60 00       	.word	0x0060	; ????
    9d2e:	66 00       	.word	0x0066	; ????
    9d30:	6c 00       	.word	0x006c	; ????
    9d32:	73 00       	.word	0x0073	; ????
    9d34:	79 00       	.word	0x0079	; ????
    9d36:	81 00       	.word	0x0081	; ????
    9d38:	88 00       	.word	0x0088	; ????
    9d3a:	90 00       	.word	0x0090	; ????
    9d3c:	99 00       	.word	0x0099	; ????
    9d3e:	a2 00       	.word	0x00a2	; ????
    9d40:	ac 00       	.word	0x00ac	; ????
    9d42:	b6 00       	.word	0x00b6	; ????
    9d44:	c1 00       	.word	0x00c1	; ????
    9d46:	cc 00       	.word	0x00cc	; ????
    9d48:	d8 00       	.word	0x00d8	; ????
    9d4a:	e5 00       	.word	0x00e5	; ????
    9d4c:	f3 00       	.word	0x00f3	; ????
    9d4e:	01 01       	movw	r0, r2
    9d50:	10 01       	movw	r2, r0
    9d52:	21 01       	movw	r4, r2
    9d54:	32 01       	movw	r6, r4
    9d56:	44 01       	movw	r8, r8
    9d58:	57 01       	movw	r10, r14
    9d5a:	6c 01       	movw	r12, r24
    9d5c:	81 01       	movw	r16, r2
    9d5e:	98 01       	movw	r18, r16
    9d60:	b0 01       	movw	r22, r0
    9d62:	ca 01       	movw	r24, r20
    9d64:	e5 01       	movw	r28, r10
    9d66:	02 02       	muls	r16, r18
    9d68:	21 02       	muls	r18, r17
    9d6a:	41 02       	muls	r20, r17
    9d6c:	64 02       	muls	r22, r20
    9d6e:	88 02       	muls	r24, r24
    9d70:	ae 02       	muls	r26, r30
    9d72:	d7 02       	muls	r29, r23
    9d74:	03 03       	mulsu	r16, r19
    9d76:	30 03       	mulsu	r19, r16
    9d78:	61 03       	mulsu	r22, r17
    9d7a:	94 03       	fmuls	r17, r20
    9d7c:	cb 03       	fmulsu	r20, r19
    9d7e:	05 04       	cpc	r0, r5
    9d80:	42 04       	cpc	r4, r2
    9d82:	83 04       	cpc	r8, r3
    9d84:	c7 04       	cpc	r12, r7
    9d86:	10 05       	cpc	r17, r0
    9d88:	5d 05       	cpc	r21, r13
    9d8a:	af 05       	cpc	r26, r15
    9d8c:	05 06       	cpc	r0, r21
    9d8e:	61 06       	cpc	r6, r17
    9d90:	c2 06       	cpc	r12, r18
    9d92:	29 07       	cpc	r18, r25
    9d94:	96 07       	cpc	r25, r22
    9d96:	09 08       	sbc	r0, r9
    9d98:	83 08       	sbc	r8, r3
    9d9a:	05 09       	sbc	r16, r5
    9d9c:	8e 09       	sbc	r24, r14
    9d9e:	20 0a       	sbc	r2, r16
    9da0:	ba 0a       	sbc	r11, r26
    9da2:	5d 0b       	sbc	r21, r29
    9da4:	0a 0c       	add	r0, r10
    9da6:	c1 0c       	add	r12, r1
    9da8:	84 0d       	add	r24, r4
    9daa:	51 0e       	add	r5, r17
    9dac:	2b 0f       	add	r18, r27
    9dae:	12 10       	cpse	r1, r2
    9db0:	07 11       	cpse	r16, r7
    9db2:	0a 12       	cpse	r0, r26
    9db4:	1d 13       	cpse	r17, r29
    9db6:	40 14       	cp	r4, r0
    9db8:	74 15       	cp	r23, r4
    9dba:	ba 16       	cp	r11, r26
    9dbc:	14 18       	sub	r1, r4
    9dbe:	83 19       	sub	r24, r3
    9dc0:	07 1b       	sub	r16, r23
    9dc2:	a3 1c       	adc	r10, r3
    9dc4:	57 1e       	adc	r5, r23
    9dc6:	24 20       	and	r2, r4
    9dc8:	0e 22       	and	r0, r30
    9dca:	14 24       	eor	r1, r4
    9dcc:	39 26       	eor	r3, r25
    9dce:	7f 28       	or	r7, r15
    9dd0:	e8 2a       	or	r14, r24
    9dd2:	75 2d       	mov	r23, r5
    9dd4:	29 30       	cpi	r18, 0x09	; 9
    9dd6:	06 33       	cpi	r16, 0x36	; 54
    9dd8:	0f 36       	cpi	r16, 0x6F	; 111
    9dda:	45 39       	cpi	r20, 0x95	; 149
    9ddc:	ad 3c       	cpi	r26, 0xCD	; 205
    9dde:	49 40       	sbci	r20, 0x09	; 9
    9de0:	1b 44       	sbci	r17, 0x4B	; 75
    9de2:	28 48       	sbci	r18, 0x88	; 136
    9de4:	73 4c       	sbci	r23, 0xC3	; 195
    9de6:	fe 50       	subi	r31, 0x0E	; 14
    9de8:	cf 55       	subi	r28, 0x5F	; 95
    9dea:	ea 5a       	subi	r30, 0xAA	; 170
    9dec:	51 60       	ori	r21, 0x01	; 1
    9dee:	0c 66       	ori	r16, 0x6C	; 108
    9df0:	1d 6c       	ori	r17, 0xCD	; 205
    9df2:	8b 72       	andi	r24, 0x2B	; 43
    9df4:	5a 79       	andi	r21, 0x9A	; 154
    9df6:	92 80       	ldd	r9, Z+2	; 0x02
    9df8:	37 88       	ldd	r3, Z+23	; 0x17
    9dfa:	50 90 e5 98 	lds	r5, 0x98E5
    9dfe:	fd a1       	ldd	r31, Y+37	; 0x25
    9e00:	9f ab       	std	Y+55, r25	; 0x37
    9e02:	d3 b5       	in	r29, 0x23	; 35
    9e04:	a3 c0       	rjmp	.+326    	; 0x9f4c <waves+0x4c>
	...

00009f00 <waves>:
    9f00:	00 03       	mulsu	r16, r16
    9f02:	06 09       	sbc	r16, r6
    9f04:	0c 10       	cpse	r0, r12
    9f06:	13 16       	cp	r1, r19
    9f08:	19 1c       	adc	r1, r9
    9f0a:	1f 22       	and	r1, r31
    9f0c:	25 28       	or	r2, r5
    9f0e:	2b 2e       	mov	r2, r27
    9f10:	31 33       	cpi	r19, 0x31	; 49
    9f12:	36 39       	cpi	r19, 0x96	; 150
    9f14:	3c 3f       	cpi	r19, 0xFC	; 252
    9f16:	41 44       	sbci	r20, 0x41	; 65
    9f18:	47 49       	sbci	r20, 0x97	; 151
    9f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9f1c:	51 53       	subi	r21, 0x31	; 49
    9f1e:	55 58       	subi	r21, 0x85	; 133
    9f20:	5a 5c       	subi	r21, 0xCA	; 202
    9f22:	5e 60       	ori	r21, 0x0E	; 14
    9f24:	62 64       	ori	r22, 0x42	; 66
    9f26:	66 68       	ori	r22, 0x86	; 134
    9f28:	6a 6b       	ori	r22, 0xBA	; 186
    9f2a:	6d 6f       	ori	r22, 0xFD	; 253
    9f2c:	70 71       	andi	r23, 0x10	; 16
    9f2e:	73 74       	andi	r23, 0x43	; 67
    9f30:	75 76       	andi	r23, 0x65	; 101
    9f32:	78 79       	andi	r23, 0x98	; 152
    9f34:	7a 7a       	andi	r23, 0xAA	; 170
    9f36:	7b 7c       	andi	r23, 0xCB	; 203
    9f38:	7d 7d       	andi	r23, 0xDD	; 221
    9f3a:	7e 7e       	andi	r23, 0xEE	; 238
    9f3c:	7e 7f       	andi	r23, 0xFE	; 254
    9f3e:	7f 7f       	andi	r23, 0xFF	; 255
    9f40:	7f 7f       	andi	r23, 0xFF	; 255
    9f42:	7f 7f       	andi	r23, 0xFF	; 255
    9f44:	7e 7e       	andi	r23, 0xEE	; 238
    9f46:	7e 7d       	andi	r23, 0xDE	; 222
    9f48:	7d 7c       	andi	r23, 0xCD	; 205
    9f4a:	7b 7a       	andi	r23, 0xAB	; 171
    9f4c:	7a 79       	andi	r23, 0x9A	; 154
    9f4e:	78 76       	andi	r23, 0x68	; 104
    9f50:	75 74       	andi	r23, 0x45	; 69
    9f52:	73 71       	andi	r23, 0x13	; 19
    9f54:	70 6f       	ori	r23, 0xF0	; 240
    9f56:	6d 6b       	ori	r22, 0xBD	; 189
    9f58:	6a 68       	ori	r22, 0x8A	; 138
    9f5a:	66 64       	ori	r22, 0x46	; 70
    9f5c:	62 60       	ori	r22, 0x02	; 2
    9f5e:	5e 5c       	subi	r21, 0xCE	; 206
    9f60:	5a 58       	subi	r21, 0x8A	; 138
    9f62:	55 53       	subi	r21, 0x35	; 53
    9f64:	51 4e       	sbci	r21, 0xE1	; 225
    9f66:	4c 49       	sbci	r20, 0x9C	; 156
    9f68:	47 44       	sbci	r20, 0x47	; 71
    9f6a:	41 3f       	cpi	r20, 0xF1	; 241
    9f6c:	3c 39       	cpi	r19, 0x9C	; 156
    9f6e:	36 33       	cpi	r19, 0x36	; 54
    9f70:	31 2e       	mov	r3, r17
    9f72:	2b 28       	or	r2, r11
    9f74:	25 22       	and	r2, r21
    9f76:	1f 1c       	adc	r1, r15
    9f78:	19 16       	cp	r1, r25
    9f7a:	13 10       	cpse	r1, r3
    9f7c:	0c 09       	sbc	r16, r12
    9f7e:	06 03       	mulsu	r16, r22
    9f80:	00 fd       	sbrc	r16, 0
    9f82:	fa f7       	brpl	.-2      	; 0x9f82 <waves+0x82>
    9f84:	f4 f0       	brlt	.+60     	; 0x9fc2 <waves+0xc2>
    9f86:	ed ea       	ldi	r30, 0xAD	; 173
    9f88:	e7 e4       	ldi	r30, 0x47	; 71
    9f8a:	e1 de       	rcall	.-574    	; 0x9d4e <steptable+0x46>
    9f8c:	db d8       	rcall	.-3658   	; 0x9144 <ClearVsyncFlag+0x2>
    9f8e:	d5 d2       	rcall	.+1450   	; 0xa53a <waves+0x63a>
    9f90:	cf cd       	rjmp	.-1122   	; 0x9b30 <ProcessMusic+0x326>
    9f92:	ca c7       	rjmp	.+3988   	; 0xaf28 <LBPrintStr+0x58>
    9f94:	c4 c1       	rjmp	.+904    	; 0xa31e <waves+0x41e>
    9f96:	bf bc       	out	0x2f, r11	; 47
    9f98:	b9 b7       	in	r27, 0x39	; 57
    9f9a:	b4 b2       	in	r11, 0x14	; 20
    9f9c:	af ad       	ldd	r26, Y+63	; 0x3f
    9f9e:	ab a8       	ldd	r10, Y+51	; 0x33
    9fa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    9fa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    9fa4:	9e 9c       	mul	r9, r14
    9fa6:	9a 98       	cbi	0x13, 2	; 19
    9fa8:	96 95       	lsr	r25
    9faa:	93 91       	.word	0x9193	; ????
    9fac:	90 8f       	std	Z+24, r25	; 0x18
    9fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9fb0:	8b 8a       	std	Y+19, r8	; 0x13
    9fb2:	88 87       	std	Y+8, r24	; 0x08
    9fb4:	86 86       	std	Z+14, r8	; 0x0e
    9fb6:	85 84       	ldd	r8, Z+13	; 0x0d
    9fb8:	83 83       	std	Z+3, r24	; 0x03
    9fba:	82 82       	std	Z+2, r8	; 0x02
    9fbc:	82 81       	ldd	r24, Z+2	; 0x02
    9fbe:	81 81       	ldd	r24, Z+1	; 0x01
    9fc0:	81 81       	ldd	r24, Z+1	; 0x01
    9fc2:	81 81       	ldd	r24, Z+1	; 0x01
    9fc4:	82 82       	std	Z+2, r8	; 0x02
    9fc6:	82 83       	std	Z+2, r24	; 0x02
    9fc8:	83 84       	ldd	r8, Z+11	; 0x0b
    9fca:	85 86       	std	Z+13, r8	; 0x0d
    9fcc:	86 87       	std	Z+14, r24	; 0x0e
    9fce:	88 8a       	std	Y+16, r8	; 0x10
    9fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    9fd4:	90 91 93 95 	lds	r25, 0x9593
    9fd8:	96 98       	cbi	0x12, 6	; 18
    9fda:	9a 9c       	mul	r9, r10
    9fdc:	9e a0       	ldd	r9, Y+38	; 0x26
    9fde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    9fe0:	a6 a8       	ldd	r10, Z+54	; 0x36
    9fe2:	ab ad       	ldd	r26, Y+59	; 0x3b
    9fe4:	af b2       	in	r10, 0x1f	; 31
    9fe6:	b4 b7       	in	r27, 0x34	; 52
    9fe8:	b9 bc       	out	0x29, r11	; 41
    9fea:	bf c1       	rjmp	.+894    	; 0xa36a <waves+0x46a>
    9fec:	c4 c7       	rjmp	.+3976   	; 0xaf76 <LBCollides+0x44>
    9fee:	ca cd       	rjmp	.-1132   	; 0x9b84 <ProcessMusic+0x37a>
    9ff0:	cf d2       	rcall	.+1438   	; 0xa590 <waves+0x690>
    9ff2:	d5 d8       	rcall	.-3670   	; 0x919e <wdt_randomize+0x4>
    9ff4:	db de       	rcall	.-586    	; 0x9dac <steptable+0xa4>
    9ff6:	e1 e4       	ldi	r30, 0x41	; 65
    9ff8:	e7 ea       	ldi	r30, 0xA7	; 167
    9ffa:	ed f0       	brhs	.+58     	; 0xa036 <waves+0x136>
    9ffc:	f4 f7       	brge	.-4      	; 0x9ffa <waves+0xfa>
    9ffe:	fa fd       	.word	0xfdfa	; ????
    a000:	80 81       	ld	r24, Z
    a002:	82 83       	std	Z+2, r24	; 0x02
    a004:	84 85       	ldd	r24, Z+12	; 0x0c
    a006:	86 87       	std	Z+14, r24	; 0x0e
    a008:	88 89       	ldd	r24, Y+16	; 0x10
    a00a:	8a 8b       	std	Y+18, r24	; 0x12
    a00c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    a00e:	8e 8f       	std	Y+30, r24	; 0x1e
    a010:	90 91 92 93 	lds	r25, 0x9392
    a014:	94 95       	.word	0x9594	; ????
    a016:	96 97       	sbiw	r26, 0x26	; 38
    a018:	98 99       	sbic	0x13, 0	; 19
    a01a:	9a 9b       	sbis	0x13, 2	; 19
    a01c:	9c 9d       	mul	r25, r12
    a01e:	9e 9f       	mul	r25, r30
    a020:	a0 a1       	ldd	r26, Z+32	; 0x20
    a022:	a2 a3       	std	Z+34, r26	; 0x22
    a024:	a4 a5       	ldd	r26, Z+44	; 0x2c
    a026:	a6 a7       	std	Z+46, r26	; 0x2e
    a028:	a8 a9       	ldd	r26, Y+48	; 0x30
    a02a:	aa ab       	std	Y+50, r26	; 0x32
    a02c:	ac ad       	ldd	r26, Y+60	; 0x3c
    a02e:	ae af       	std	Y+62, r26	; 0x3e
    a030:	b0 b1       	in	r27, 0x00	; 0
    a032:	b2 b3       	in	r27, 0x12	; 18
    a034:	b4 b5       	in	r27, 0x24	; 36
    a036:	b6 b7       	in	r27, 0x36	; 54
    a038:	b8 b9       	out	0x08, r27	; 8
    a03a:	ba bb       	out	0x1a, r27	; 26
    a03c:	bc bd       	out	0x2c, r27	; 44
    a03e:	be bf       	out	0x3e, r27	; 62
    a040:	c0 c1       	rjmp	.+896    	; 0xa3c2 <waves+0x4c2>
    a042:	c2 c3       	rjmp	.+1924   	; 0xa7c8 <waves+0x8c8>
    a044:	c4 c5       	rjmp	.+2952   	; 0xabce <InitializeVideoMode+0xe>
    a046:	c6 c7       	rjmp	.+3980   	; 0xafd4 <LBLineIntersect+0x4e>
    a048:	c8 c9       	rjmp	.-3184   	; 0x93da <EepromWriteBlock+0xaa>
    a04a:	ca cb       	rjmp	.-2156   	; 0x97e0 <TriggerNote+0x44>
    a04c:	cc cd       	rjmp	.-1128   	; 0x9be6 <ProcessMusic+0x3dc>
    a04e:	ce cf       	rjmp	.-100    	; 0x9fec <waves+0xec>
    a050:	d0 d1       	rcall	.+928    	; 0xa3f2 <waves+0x4f2>
    a052:	d2 d3       	rcall	.+1956   	; 0xa7f8 <waves+0x8f8>
    a054:	d4 d5       	rcall	.+2984   	; 0xabfe <DrawMap2+0x2a>
    a056:	d6 d7       	rcall	.+4012   	; 0xb004 <LBLineIntersect+0x7e>
    a058:	d8 d9       	rcall	.-3152   	; 0x940a <EepromReadBlock>
    a05a:	da db       	rcall	.-2124   	; 0x9810 <ProcessMusic+0x6>
    a05c:	dc dd       	rcall	.-1096   	; 0x9c16 <ProcessMusic+0x40c>
    a05e:	de df       	rcall	.-68     	; 0xa01c <waves+0x11c>
    a060:	e0 e1       	ldi	r30, 0x10	; 16
    a062:	e2 e3       	ldi	r30, 0x32	; 50
    a064:	e4 e5       	ldi	r30, 0x54	; 84
    a066:	e6 e7       	ldi	r30, 0x76	; 118
    a068:	e8 e9       	ldi	r30, 0x98	; 152
    a06a:	ea eb       	ldi	r30, 0xBA	; 186
    a06c:	ec ed       	ldi	r30, 0xDC	; 220
    a06e:	ee ef       	ldi	r30, 0xFE	; 254
    a070:	f0 f1       	brcs	.+124    	; 0xa0ee <waves+0x1ee>
    a072:	f2 f3       	brmi	.-4      	; 0xa070 <waves+0x170>
    a074:	f4 f5       	brge	.+124    	; 0xa0f2 <waves+0x1f2>
    a076:	f6 f7       	brtc	.-4      	; 0xa074 <waves+0x174>
    a078:	f8 f9       	.word	0xf9f8	; ????
    a07a:	fa fb       	.word	0xfbfa	; ????
    a07c:	fc fd       	.word	0xfdfc	; ????
    a07e:	fe ff       	.word	0xfffe	; ????
    a080:	00 01       	movw	r0, r0
    a082:	02 03       	mulsu	r16, r18
    a084:	04 05       	cpc	r16, r4
    a086:	06 07       	cpc	r16, r22
    a088:	08 09       	sbc	r16, r8
    a08a:	0a 0b       	sbc	r16, r26
    a08c:	0c 0d       	add	r16, r12
    a08e:	0e 0f       	add	r16, r30
    a090:	10 11       	cpse	r17, r0
    a092:	12 13       	cpse	r17, r18
    a094:	14 15       	cp	r17, r4
    a096:	16 17       	cp	r17, r22
    a098:	18 19       	sub	r17, r8
    a09a:	1a 1b       	sub	r17, r26
    a09c:	1c 1d       	adc	r17, r12
    a09e:	1e 1f       	adc	r17, r30
    a0a0:	20 21       	and	r18, r0
    a0a2:	22 23       	and	r18, r18
    a0a4:	24 25       	eor	r18, r4
    a0a6:	26 27       	eor	r18, r22
    a0a8:	28 29       	or	r18, r8
    a0aa:	2a 2b       	or	r18, r26
    a0ac:	2c 2d       	mov	r18, r12
    a0ae:	2e 2f       	mov	r18, r30
    a0b0:	30 31       	cpi	r19, 0x10	; 16
    a0b2:	32 33       	cpi	r19, 0x32	; 50
    a0b4:	34 35       	cpi	r19, 0x54	; 84
    a0b6:	36 37       	cpi	r19, 0x76	; 118
    a0b8:	38 39       	cpi	r19, 0x98	; 152
    a0ba:	3a 3b       	cpi	r19, 0xBA	; 186
    a0bc:	3c 3d       	cpi	r19, 0xDC	; 220
    a0be:	3e 3f       	cpi	r19, 0xFE	; 254
    a0c0:	40 41       	sbci	r20, 0x10	; 16
    a0c2:	42 43       	sbci	r20, 0x32	; 50
    a0c4:	44 45       	sbci	r20, 0x54	; 84
    a0c6:	46 47       	sbci	r20, 0x76	; 118
    a0c8:	48 49       	sbci	r20, 0x98	; 152
    a0ca:	4a 4b       	sbci	r20, 0xBA	; 186
    a0cc:	4c 4d       	sbci	r20, 0xDC	; 220
    a0ce:	4e 4f       	sbci	r20, 0xFE	; 254
    a0d0:	50 51       	subi	r21, 0x10	; 16
    a0d2:	52 53       	subi	r21, 0x32	; 50
    a0d4:	54 55       	subi	r21, 0x54	; 84
    a0d6:	56 57       	subi	r21, 0x76	; 118
    a0d8:	58 59       	subi	r21, 0x98	; 152
    a0da:	5a 5b       	subi	r21, 0xBA	; 186
    a0dc:	5c 5d       	subi	r21, 0xDC	; 220
    a0de:	5e 5f       	subi	r21, 0xFE	; 254
    a0e0:	60 61       	ori	r22, 0x10	; 16
    a0e2:	62 63       	ori	r22, 0x32	; 50
    a0e4:	64 65       	ori	r22, 0x54	; 84
    a0e6:	66 67       	ori	r22, 0x76	; 118
    a0e8:	68 69       	ori	r22, 0x98	; 152
    a0ea:	6a 6b       	ori	r22, 0xBA	; 186
    a0ec:	6c 6d       	ori	r22, 0xDC	; 220
    a0ee:	6e 6f       	ori	r22, 0xFE	; 254
    a0f0:	70 71       	andi	r23, 0x10	; 16
    a0f2:	72 73       	andi	r23, 0x32	; 50
    a0f4:	74 75       	andi	r23, 0x54	; 84
    a0f6:	76 77       	andi	r23, 0x76	; 118
    a0f8:	78 79       	andi	r23, 0x98	; 152
    a0fa:	7a 7b       	andi	r23, 0xBA	; 186
    a0fc:	7c 7d       	andi	r23, 0xDC	; 220
    a0fe:	7e 7f       	andi	r23, 0xFE	; 254
    a100:	00 02       	muls	r16, r16
    a102:	04 06       	cpc	r0, r20
    a104:	08 0a       	sbc	r0, r24
    a106:	0c 0e       	add	r0, r28
    a108:	10 12       	cpse	r1, r16
    a10a:	14 16       	cp	r1, r20
    a10c:	18 1a       	sub	r1, r24
    a10e:	1c 1e       	adc	r1, r28
    a110:	20 22       	and	r2, r16
    a112:	24 26       	eor	r2, r20
    a114:	28 2a       	or	r2, r24
    a116:	2c 2e       	mov	r2, r28
    a118:	30 32       	cpi	r19, 0x20	; 32
    a11a:	34 36       	cpi	r19, 0x64	; 100
    a11c:	38 3a       	cpi	r19, 0xA8	; 168
    a11e:	3c 3e       	cpi	r19, 0xEC	; 236
    a120:	40 42       	sbci	r20, 0x20	; 32
    a122:	44 46       	sbci	r20, 0x64	; 100
    a124:	48 4a       	sbci	r20, 0xA8	; 168
    a126:	4c 4e       	sbci	r20, 0xEC	; 236
    a128:	50 52       	subi	r21, 0x20	; 32
    a12a:	54 56       	subi	r21, 0x64	; 100
    a12c:	58 5a       	subi	r21, 0xA8	; 168
    a12e:	5c 5e       	subi	r21, 0xEC	; 236
    a130:	60 62       	ori	r22, 0x20	; 32
    a132:	64 66       	ori	r22, 0x64	; 100
    a134:	68 6a       	ori	r22, 0xA8	; 168
    a136:	6c 6e       	ori	r22, 0xEC	; 236
    a138:	70 72       	andi	r23, 0x20	; 32
    a13a:	74 76       	andi	r23, 0x64	; 100
    a13c:	78 7a       	andi	r23, 0xA8	; 168
    a13e:	7c 7e       	andi	r23, 0xEC	; 236
    a140:	7f 7d       	andi	r23, 0xDF	; 223
    a142:	7b 79       	andi	r23, 0x9B	; 155
    a144:	77 75       	andi	r23, 0x57	; 87
    a146:	73 71       	andi	r23, 0x13	; 19
    a148:	6f 6d       	ori	r22, 0xDF	; 223
    a14a:	6b 69       	ori	r22, 0x9B	; 155
    a14c:	67 65       	ori	r22, 0x57	; 87
    a14e:	63 61       	ori	r22, 0x13	; 19
    a150:	5f 5d       	subi	r21, 0xDF	; 223
    a152:	5b 59       	subi	r21, 0x9B	; 155
    a154:	57 55       	subi	r21, 0x57	; 87
    a156:	53 51       	subi	r21, 0x13	; 19
    a158:	4f 4d       	sbci	r20, 0xDF	; 223
    a15a:	4b 49       	sbci	r20, 0x9B	; 155
    a15c:	47 45       	sbci	r20, 0x57	; 87
    a15e:	43 41       	sbci	r20, 0x13	; 19
    a160:	3f 3d       	cpi	r19, 0xDF	; 223
    a162:	3b 39       	cpi	r19, 0x9B	; 155
    a164:	37 35       	cpi	r19, 0x57	; 87
    a166:	33 31       	cpi	r19, 0x13	; 19
    a168:	2f 2d       	mov	r18, r15
    a16a:	2b 29       	or	r18, r11
    a16c:	27 25       	eor	r18, r7
    a16e:	23 21       	and	r18, r3
    a170:	1f 1d       	adc	r17, r15
    a172:	1b 19       	sub	r17, r11
    a174:	17 15       	cp	r17, r7
    a176:	13 11       	cpse	r17, r3
    a178:	0f 0d       	add	r16, r15
    a17a:	0b 09       	sbc	r16, r11
    a17c:	07 05       	cpc	r16, r7
    a17e:	03 01       	movw	r0, r6
    a180:	ff fd       	.word	0xfdff	; ????
    a182:	fb f9       	.word	0xf9fb	; ????
    a184:	f7 f5       	brid	.+124    	; 0xa202 <waves+0x302>
    a186:	f3 f1       	brvs	.+124    	; 0xa204 <waves+0x304>
    a188:	ef ed       	ldi	r30, 0xDF	; 223
    a18a:	eb e9       	ldi	r30, 0x9B	; 155
    a18c:	e7 e5       	ldi	r30, 0x57	; 87
    a18e:	e3 e1       	ldi	r30, 0x13	; 19
    a190:	df dd       	rcall	.-1090   	; 0x9d50 <steptable+0x48>
    a192:	db d9       	rcall	.-3146   	; 0x954a <PatchCommand11+0x72>
    a194:	d7 d5       	rcall	.+2990   	; 0xad44 <doFade+0x6>
    a196:	d3 d1       	rcall	.+934    	; 0xa53e <waves+0x63e>
    a198:	cf cd       	rjmp	.-1122   	; 0x9d38 <steptable+0x30>
    a19a:	cb c9       	rjmp	.-3178   	; 0x9532 <PatchCommand11+0x5a>
    a19c:	c7 c5       	rjmp	.+2958   	; 0xad2c <WaitVsync+0x1c>
    a19e:	c3 c1       	rjmp	.+902    	; 0xa526 <waves+0x626>
    a1a0:	bf bd       	out	0x2f, r27	; 47
    a1a2:	bb b9       	out	0x0b, r27	; 11
    a1a4:	b7 b5       	in	r27, 0x27	; 39
    a1a6:	b3 b1       	in	r27, 0x03	; 3
    a1a8:	af ad       	ldd	r26, Y+63	; 0x3f
    a1aa:	ab a9       	ldd	r26, Y+51	; 0x33
    a1ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a1ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    a1b0:	9f 9d       	mul	r25, r15
    a1b2:	9b 99       	sbic	0x13, 3	; 19
    a1b4:	97 95       	ror	r25
    a1b6:	93 91       	.word	0x9193	; ????
    a1b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    a1ba:	8b 89       	ldd	r24, Y+19	; 0x13
    a1bc:	87 85       	ldd	r24, Z+15	; 0x0f
    a1be:	83 81       	ldd	r24, Z+3	; 0x03
    a1c0:	80 82       	st	Z, r8
    a1c2:	84 86       	std	Z+12, r8	; 0x0c
    a1c4:	88 8a       	std	Y+16, r8	; 0x10
    a1c6:	8c 8e       	std	Y+28, r8	; 0x1c
    a1c8:	90 92 94 96 	sts	0x9694, r9
    a1cc:	98 9a       	sbi	0x13, 0	; 19
    a1ce:	9c 9e       	mul	r9, r28
    a1d0:	a0 a2       	std	Z+32, r10	; 0x20
    a1d2:	a4 a6       	std	Z+44, r10	; 0x2c
    a1d4:	a8 aa       	std	Y+48, r10	; 0x30
    a1d6:	ac ae       	std	Y+60, r10	; 0x3c
    a1d8:	b0 b2       	in	r11, 0x10	; 16
    a1da:	b4 b6       	in	r11, 0x34	; 52
    a1dc:	b8 ba       	out	0x18, r11	; 24
    a1de:	bc be       	out	0x3c, r11	; 60
    a1e0:	c0 c2       	rjmp	.+1408   	; 0xa762 <waves+0x862>
    a1e2:	c4 c6       	rjmp	.+3464   	; 0xaf6c <LBCollides+0x3a>
    a1e4:	c8 ca       	rjmp	.-2672   	; 0x9776 <TriggerCommon+0x134>
    a1e6:	cc ce       	rjmp	.-616    	; 0x9f80 <waves+0x80>
    a1e8:	d0 d2       	rcall	.+1440   	; 0xa78a <waves+0x88a>
    a1ea:	d4 d6       	rcall	.+3496   	; 0xaf94 <LBLineIntersect+0xe>
    a1ec:	d8 da       	rcall	.-2640   	; 0x979e <TriggerNote+0x2>
    a1ee:	dc de       	rcall	.-584    	; 0x9fa8 <waves+0xa8>
    a1f0:	e0 e2       	ldi	r30, 0x20	; 32
    a1f2:	e4 e6       	ldi	r30, 0x64	; 100
    a1f4:	e8 ea       	ldi	r30, 0xA8	; 168
    a1f6:	ec ee       	ldi	r30, 0xEC	; 236
    a1f8:	f0 f2       	brcs	.-68     	; 0xa1b6 <waves+0x2b6>
    a1fa:	f4 f6       	brge	.-68     	; 0xa1b8 <waves+0x2b8>
    a1fc:	f8 fa       	.word	0xfaf8	; ????
    a1fe:	fc fe       	.word	0xfefc	; ????
    a200:	7f 7f       	andi	r23, 0xFF	; 255
    a202:	7f 7f       	andi	r23, 0xFF	; 255
    a204:	7f 7f       	andi	r23, 0xFF	; 255
    a206:	7f 7f       	andi	r23, 0xFF	; 255
    a208:	7f 7f       	andi	r23, 0xFF	; 255
    a20a:	7f 7f       	andi	r23, 0xFF	; 255
    a20c:	7f 7f       	andi	r23, 0xFF	; 255
    a20e:	7f 7f       	andi	r23, 0xFF	; 255
    a210:	7f 7f       	andi	r23, 0xFF	; 255
    a212:	7f 7f       	andi	r23, 0xFF	; 255
    a214:	7f 7f       	andi	r23, 0xFF	; 255
    a216:	7f 7f       	andi	r23, 0xFF	; 255
    a218:	7f 7f       	andi	r23, 0xFF	; 255
    a21a:	7f 7f       	andi	r23, 0xFF	; 255
    a21c:	7f 7f       	andi	r23, 0xFF	; 255
    a21e:	7f 7f       	andi	r23, 0xFF	; 255
    a220:	7f 7f       	andi	r23, 0xFF	; 255
    a222:	7f 7f       	andi	r23, 0xFF	; 255
    a224:	7f 7f       	andi	r23, 0xFF	; 255
    a226:	7f 7f       	andi	r23, 0xFF	; 255
    a228:	7f 7f       	andi	r23, 0xFF	; 255
    a22a:	7f 7f       	andi	r23, 0xFF	; 255
    a22c:	7f 7f       	andi	r23, 0xFF	; 255
    a22e:	7f 7f       	andi	r23, 0xFF	; 255
    a230:	7f 7f       	andi	r23, 0xFF	; 255
    a232:	7f 7f       	andi	r23, 0xFF	; 255
    a234:	7f 7f       	andi	r23, 0xFF	; 255
    a236:	7f 7f       	andi	r23, 0xFF	; 255
    a238:	7f 7f       	andi	r23, 0xFF	; 255
    a23a:	7f 7f       	andi	r23, 0xFF	; 255
    a23c:	7f 7f       	andi	r23, 0xFF	; 255
    a23e:	7f 7f       	andi	r23, 0xFF	; 255
    a240:	80 80       	ld	r8, Z
    a242:	80 80       	ld	r8, Z
    a244:	80 80       	ld	r8, Z
    a246:	80 80       	ld	r8, Z
    a248:	80 80       	ld	r8, Z
    a24a:	80 80       	ld	r8, Z
    a24c:	80 80       	ld	r8, Z
    a24e:	80 80       	ld	r8, Z
    a250:	80 80       	ld	r8, Z
    a252:	80 80       	ld	r8, Z
    a254:	80 80       	ld	r8, Z
    a256:	80 80       	ld	r8, Z
    a258:	80 80       	ld	r8, Z
    a25a:	80 80       	ld	r8, Z
    a25c:	80 80       	ld	r8, Z
    a25e:	80 80       	ld	r8, Z
    a260:	80 80       	ld	r8, Z
    a262:	80 80       	ld	r8, Z
    a264:	80 80       	ld	r8, Z
    a266:	80 80       	ld	r8, Z
    a268:	80 80       	ld	r8, Z
    a26a:	80 80       	ld	r8, Z
    a26c:	80 80       	ld	r8, Z
    a26e:	80 80       	ld	r8, Z
    a270:	80 80       	ld	r8, Z
    a272:	80 80       	ld	r8, Z
    a274:	80 80       	ld	r8, Z
    a276:	80 80       	ld	r8, Z
    a278:	80 80       	ld	r8, Z
    a27a:	80 80       	ld	r8, Z
    a27c:	80 80       	ld	r8, Z
    a27e:	80 80       	ld	r8, Z
    a280:	80 80       	ld	r8, Z
    a282:	80 80       	ld	r8, Z
    a284:	80 80       	ld	r8, Z
    a286:	80 80       	ld	r8, Z
    a288:	80 80       	ld	r8, Z
    a28a:	80 80       	ld	r8, Z
    a28c:	80 80       	ld	r8, Z
    a28e:	80 80       	ld	r8, Z
    a290:	80 80       	ld	r8, Z
    a292:	80 80       	ld	r8, Z
    a294:	80 80       	ld	r8, Z
    a296:	80 80       	ld	r8, Z
    a298:	80 80       	ld	r8, Z
    a29a:	80 80       	ld	r8, Z
    a29c:	80 80       	ld	r8, Z
    a29e:	80 80       	ld	r8, Z
    a2a0:	80 80       	ld	r8, Z
    a2a2:	80 80       	ld	r8, Z
    a2a4:	80 80       	ld	r8, Z
    a2a6:	80 80       	ld	r8, Z
    a2a8:	80 80       	ld	r8, Z
    a2aa:	80 80       	ld	r8, Z
    a2ac:	80 80       	ld	r8, Z
    a2ae:	80 80       	ld	r8, Z
    a2b0:	80 80       	ld	r8, Z
    a2b2:	80 80       	ld	r8, Z
    a2b4:	80 80       	ld	r8, Z
    a2b6:	80 80       	ld	r8, Z
    a2b8:	80 80       	ld	r8, Z
    a2ba:	80 80       	ld	r8, Z
    a2bc:	80 80       	ld	r8, Z
    a2be:	80 80       	ld	r8, Z
    a2c0:	80 80       	ld	r8, Z
    a2c2:	80 80       	ld	r8, Z
    a2c4:	80 80       	ld	r8, Z
    a2c6:	80 80       	ld	r8, Z
    a2c8:	80 80       	ld	r8, Z
    a2ca:	80 80       	ld	r8, Z
    a2cc:	80 80       	ld	r8, Z
    a2ce:	80 80       	ld	r8, Z
    a2d0:	80 80       	ld	r8, Z
    a2d2:	80 80       	ld	r8, Z
    a2d4:	80 80       	ld	r8, Z
    a2d6:	80 80       	ld	r8, Z
    a2d8:	80 80       	ld	r8, Z
    a2da:	80 80       	ld	r8, Z
    a2dc:	80 80       	ld	r8, Z
    a2de:	80 80       	ld	r8, Z
    a2e0:	80 80       	ld	r8, Z
    a2e2:	80 80       	ld	r8, Z
    a2e4:	80 80       	ld	r8, Z
    a2e6:	80 80       	ld	r8, Z
    a2e8:	80 80       	ld	r8, Z
    a2ea:	80 80       	ld	r8, Z
    a2ec:	80 80       	ld	r8, Z
    a2ee:	80 80       	ld	r8, Z
    a2f0:	80 80       	ld	r8, Z
    a2f2:	80 80       	ld	r8, Z
    a2f4:	80 80       	ld	r8, Z
    a2f6:	80 80       	ld	r8, Z
    a2f8:	80 80       	ld	r8, Z
    a2fa:	80 80       	ld	r8, Z
    a2fc:	80 80       	ld	r8, Z
    a2fe:	80 80       	ld	r8, Z
    a300:	7f 7f       	andi	r23, 0xFF	; 255
    a302:	7f 7f       	andi	r23, 0xFF	; 255
    a304:	7f 7f       	andi	r23, 0xFF	; 255
    a306:	7f 7f       	andi	r23, 0xFF	; 255
    a308:	7f 7f       	andi	r23, 0xFF	; 255
    a30a:	7f 7f       	andi	r23, 0xFF	; 255
    a30c:	7f 7f       	andi	r23, 0xFF	; 255
    a30e:	7f 7f       	andi	r23, 0xFF	; 255
    a310:	7f 7f       	andi	r23, 0xFF	; 255
    a312:	7f 7f       	andi	r23, 0xFF	; 255
    a314:	7f 7f       	andi	r23, 0xFF	; 255
    a316:	7f 7f       	andi	r23, 0xFF	; 255
    a318:	7f 7f       	andi	r23, 0xFF	; 255
    a31a:	7f 7f       	andi	r23, 0xFF	; 255
    a31c:	7f 7f       	andi	r23, 0xFF	; 255
    a31e:	7f 7f       	andi	r23, 0xFF	; 255
    a320:	7f 7f       	andi	r23, 0xFF	; 255
    a322:	7f 7f       	andi	r23, 0xFF	; 255
    a324:	7f 7f       	andi	r23, 0xFF	; 255
    a326:	7f 7f       	andi	r23, 0xFF	; 255
    a328:	7f 7f       	andi	r23, 0xFF	; 255
    a32a:	7f 7f       	andi	r23, 0xFF	; 255
    a32c:	7f 7f       	andi	r23, 0xFF	; 255
    a32e:	7f 7f       	andi	r23, 0xFF	; 255
    a330:	7f 7f       	andi	r23, 0xFF	; 255
    a332:	7f 7f       	andi	r23, 0xFF	; 255
    a334:	7f 7f       	andi	r23, 0xFF	; 255
    a336:	7f 7f       	andi	r23, 0xFF	; 255
    a338:	7f 7f       	andi	r23, 0xFF	; 255
    a33a:	7f 7f       	andi	r23, 0xFF	; 255
    a33c:	7f 7f       	andi	r23, 0xFF	; 255
    a33e:	7f 7f       	andi	r23, 0xFF	; 255
    a340:	7f 7f       	andi	r23, 0xFF	; 255
    a342:	7f 7f       	andi	r23, 0xFF	; 255
    a344:	7f 7f       	andi	r23, 0xFF	; 255
    a346:	7f 7f       	andi	r23, 0xFF	; 255
    a348:	7f 7f       	andi	r23, 0xFF	; 255
    a34a:	7f 7f       	andi	r23, 0xFF	; 255
    a34c:	7f 7f       	andi	r23, 0xFF	; 255
    a34e:	7f 7f       	andi	r23, 0xFF	; 255
    a350:	7f 7f       	andi	r23, 0xFF	; 255
    a352:	7f 7f       	andi	r23, 0xFF	; 255
    a354:	7f 7f       	andi	r23, 0xFF	; 255
    a356:	7f 7f       	andi	r23, 0xFF	; 255
    a358:	7f 7f       	andi	r23, 0xFF	; 255
    a35a:	7f 7f       	andi	r23, 0xFF	; 255
    a35c:	7f 7f       	andi	r23, 0xFF	; 255
    a35e:	7f 7f       	andi	r23, 0xFF	; 255
    a360:	7f 7f       	andi	r23, 0xFF	; 255
    a362:	7f 7f       	andi	r23, 0xFF	; 255
    a364:	7f 7f       	andi	r23, 0xFF	; 255
    a366:	7f 7f       	andi	r23, 0xFF	; 255
    a368:	7f 7f       	andi	r23, 0xFF	; 255
    a36a:	7f 7f       	andi	r23, 0xFF	; 255
    a36c:	7f 7f       	andi	r23, 0xFF	; 255
    a36e:	7f 7f       	andi	r23, 0xFF	; 255
    a370:	7f 7f       	andi	r23, 0xFF	; 255
    a372:	7f 7f       	andi	r23, 0xFF	; 255
    a374:	7f 7f       	andi	r23, 0xFF	; 255
    a376:	7f 7f       	andi	r23, 0xFF	; 255
    a378:	7f 7f       	andi	r23, 0xFF	; 255
    a37a:	7f 7f       	andi	r23, 0xFF	; 255
    a37c:	7f 7f       	andi	r23, 0xFF	; 255
    a37e:	7f 7f       	andi	r23, 0xFF	; 255
    a380:	80 80       	ld	r8, Z
    a382:	80 80       	ld	r8, Z
    a384:	80 80       	ld	r8, Z
    a386:	80 80       	ld	r8, Z
    a388:	80 80       	ld	r8, Z
    a38a:	80 80       	ld	r8, Z
    a38c:	80 80       	ld	r8, Z
    a38e:	80 80       	ld	r8, Z
    a390:	80 80       	ld	r8, Z
    a392:	80 80       	ld	r8, Z
    a394:	80 80       	ld	r8, Z
    a396:	80 80       	ld	r8, Z
    a398:	80 80       	ld	r8, Z
    a39a:	80 80       	ld	r8, Z
    a39c:	80 80       	ld	r8, Z
    a39e:	80 80       	ld	r8, Z
    a3a0:	80 80       	ld	r8, Z
    a3a2:	80 80       	ld	r8, Z
    a3a4:	80 80       	ld	r8, Z
    a3a6:	80 80       	ld	r8, Z
    a3a8:	80 80       	ld	r8, Z
    a3aa:	80 80       	ld	r8, Z
    a3ac:	80 80       	ld	r8, Z
    a3ae:	80 80       	ld	r8, Z
    a3b0:	80 80       	ld	r8, Z
    a3b2:	80 80       	ld	r8, Z
    a3b4:	80 80       	ld	r8, Z
    a3b6:	80 80       	ld	r8, Z
    a3b8:	80 80       	ld	r8, Z
    a3ba:	80 80       	ld	r8, Z
    a3bc:	80 80       	ld	r8, Z
    a3be:	80 80       	ld	r8, Z
    a3c0:	80 80       	ld	r8, Z
    a3c2:	80 80       	ld	r8, Z
    a3c4:	80 80       	ld	r8, Z
    a3c6:	80 80       	ld	r8, Z
    a3c8:	80 80       	ld	r8, Z
    a3ca:	80 80       	ld	r8, Z
    a3cc:	80 80       	ld	r8, Z
    a3ce:	80 80       	ld	r8, Z
    a3d0:	80 80       	ld	r8, Z
    a3d2:	80 80       	ld	r8, Z
    a3d4:	80 80       	ld	r8, Z
    a3d6:	80 80       	ld	r8, Z
    a3d8:	80 80       	ld	r8, Z
    a3da:	80 80       	ld	r8, Z
    a3dc:	80 80       	ld	r8, Z
    a3de:	80 80       	ld	r8, Z
    a3e0:	80 80       	ld	r8, Z
    a3e2:	80 80       	ld	r8, Z
    a3e4:	80 80       	ld	r8, Z
    a3e6:	80 80       	ld	r8, Z
    a3e8:	80 80       	ld	r8, Z
    a3ea:	80 80       	ld	r8, Z
    a3ec:	80 80       	ld	r8, Z
    a3ee:	80 80       	ld	r8, Z
    a3f0:	80 80       	ld	r8, Z
    a3f2:	80 80       	ld	r8, Z
    a3f4:	80 80       	ld	r8, Z
    a3f6:	80 80       	ld	r8, Z
    a3f8:	80 80       	ld	r8, Z
    a3fa:	80 80       	ld	r8, Z
    a3fc:	80 80       	ld	r8, Z
    a3fe:	80 80       	ld	r8, Z
    a400:	7f 7f       	andi	r23, 0xFF	; 255
    a402:	7f 7f       	andi	r23, 0xFF	; 255
    a404:	7f 7f       	andi	r23, 0xFF	; 255
    a406:	7f 7f       	andi	r23, 0xFF	; 255
    a408:	7f 7f       	andi	r23, 0xFF	; 255
    a40a:	7f 7f       	andi	r23, 0xFF	; 255
    a40c:	7f 7f       	andi	r23, 0xFF	; 255
    a40e:	7f 7f       	andi	r23, 0xFF	; 255
    a410:	7f 7f       	andi	r23, 0xFF	; 255
    a412:	7f 7f       	andi	r23, 0xFF	; 255
    a414:	7f 7f       	andi	r23, 0xFF	; 255
    a416:	7f 7f       	andi	r23, 0xFF	; 255
    a418:	7f 7f       	andi	r23, 0xFF	; 255
    a41a:	7f 7f       	andi	r23, 0xFF	; 255
    a41c:	7f 7f       	andi	r23, 0xFF	; 255
    a41e:	7f 7f       	andi	r23, 0xFF	; 255
    a420:	7f 7f       	andi	r23, 0xFF	; 255
    a422:	7f 7f       	andi	r23, 0xFF	; 255
    a424:	7f 7f       	andi	r23, 0xFF	; 255
    a426:	7f 7f       	andi	r23, 0xFF	; 255
    a428:	7f 7f       	andi	r23, 0xFF	; 255
    a42a:	7f 7f       	andi	r23, 0xFF	; 255
    a42c:	7f 7f       	andi	r23, 0xFF	; 255
    a42e:	7f 7f       	andi	r23, 0xFF	; 255
    a430:	7f 7f       	andi	r23, 0xFF	; 255
    a432:	7f 7f       	andi	r23, 0xFF	; 255
    a434:	7f 7f       	andi	r23, 0xFF	; 255
    a436:	7f 7f       	andi	r23, 0xFF	; 255
    a438:	7f 7f       	andi	r23, 0xFF	; 255
    a43a:	7f 7f       	andi	r23, 0xFF	; 255
    a43c:	7f 7f       	andi	r23, 0xFF	; 255
    a43e:	7f 7f       	andi	r23, 0xFF	; 255
    a440:	7f 7f       	andi	r23, 0xFF	; 255
    a442:	7f 7f       	andi	r23, 0xFF	; 255
    a444:	7f 7f       	andi	r23, 0xFF	; 255
    a446:	7f 7f       	andi	r23, 0xFF	; 255
    a448:	7f 7f       	andi	r23, 0xFF	; 255
    a44a:	7f 7f       	andi	r23, 0xFF	; 255
    a44c:	7f 7f       	andi	r23, 0xFF	; 255
    a44e:	7f 7f       	andi	r23, 0xFF	; 255
    a450:	7f 7f       	andi	r23, 0xFF	; 255
    a452:	7f 7f       	andi	r23, 0xFF	; 255
    a454:	7f 7f       	andi	r23, 0xFF	; 255
    a456:	7f 7f       	andi	r23, 0xFF	; 255
    a458:	7f 7f       	andi	r23, 0xFF	; 255
    a45a:	7f 7f       	andi	r23, 0xFF	; 255
    a45c:	7f 7f       	andi	r23, 0xFF	; 255
    a45e:	7f 7f       	andi	r23, 0xFF	; 255
    a460:	7f 7f       	andi	r23, 0xFF	; 255
    a462:	7f 7f       	andi	r23, 0xFF	; 255
    a464:	7f 7f       	andi	r23, 0xFF	; 255
    a466:	7f 7f       	andi	r23, 0xFF	; 255
    a468:	7f 7f       	andi	r23, 0xFF	; 255
    a46a:	7f 7f       	andi	r23, 0xFF	; 255
    a46c:	7f 7f       	andi	r23, 0xFF	; 255
    a46e:	7f 7f       	andi	r23, 0xFF	; 255
    a470:	7f 7f       	andi	r23, 0xFF	; 255
    a472:	7f 7f       	andi	r23, 0xFF	; 255
    a474:	7f 7f       	andi	r23, 0xFF	; 255
    a476:	7f 7f       	andi	r23, 0xFF	; 255
    a478:	7f 7f       	andi	r23, 0xFF	; 255
    a47a:	7f 7f       	andi	r23, 0xFF	; 255
    a47c:	7f 7f       	andi	r23, 0xFF	; 255
    a47e:	7f 7f       	andi	r23, 0xFF	; 255
    a480:	7f 7f       	andi	r23, 0xFF	; 255
    a482:	7f 7f       	andi	r23, 0xFF	; 255
    a484:	7f 7f       	andi	r23, 0xFF	; 255
    a486:	7f 7f       	andi	r23, 0xFF	; 255
    a488:	7f 7f       	andi	r23, 0xFF	; 255
    a48a:	7f 7f       	andi	r23, 0xFF	; 255
    a48c:	7f 7f       	andi	r23, 0xFF	; 255
    a48e:	7f 7f       	andi	r23, 0xFF	; 255
    a490:	7f 7f       	andi	r23, 0xFF	; 255
    a492:	7f 7f       	andi	r23, 0xFF	; 255
    a494:	7f 7f       	andi	r23, 0xFF	; 255
    a496:	7f 7f       	andi	r23, 0xFF	; 255
    a498:	7f 7f       	andi	r23, 0xFF	; 255
    a49a:	7f 7f       	andi	r23, 0xFF	; 255
    a49c:	7f 7f       	andi	r23, 0xFF	; 255
    a49e:	7f 7f       	andi	r23, 0xFF	; 255
    a4a0:	7f 7f       	andi	r23, 0xFF	; 255
    a4a2:	7f 7f       	andi	r23, 0xFF	; 255
    a4a4:	7f 7f       	andi	r23, 0xFF	; 255
    a4a6:	7f 7f       	andi	r23, 0xFF	; 255
    a4a8:	7f 7f       	andi	r23, 0xFF	; 255
    a4aa:	7f 7f       	andi	r23, 0xFF	; 255
    a4ac:	7f 7f       	andi	r23, 0xFF	; 255
    a4ae:	7f 7f       	andi	r23, 0xFF	; 255
    a4b0:	7f 7f       	andi	r23, 0xFF	; 255
    a4b2:	7f 7f       	andi	r23, 0xFF	; 255
    a4b4:	7f 7f       	andi	r23, 0xFF	; 255
    a4b6:	7f 7f       	andi	r23, 0xFF	; 255
    a4b8:	7f 7f       	andi	r23, 0xFF	; 255
    a4ba:	7f 7f       	andi	r23, 0xFF	; 255
    a4bc:	7f 7f       	andi	r23, 0xFF	; 255
    a4be:	7f 7f       	andi	r23, 0xFF	; 255
    a4c0:	80 80       	ld	r8, Z
    a4c2:	80 80       	ld	r8, Z
    a4c4:	80 80       	ld	r8, Z
    a4c6:	80 80       	ld	r8, Z
    a4c8:	80 80       	ld	r8, Z
    a4ca:	80 80       	ld	r8, Z
    a4cc:	80 80       	ld	r8, Z
    a4ce:	80 80       	ld	r8, Z
    a4d0:	80 80       	ld	r8, Z
    a4d2:	80 80       	ld	r8, Z
    a4d4:	80 80       	ld	r8, Z
    a4d6:	80 80       	ld	r8, Z
    a4d8:	80 80       	ld	r8, Z
    a4da:	80 80       	ld	r8, Z
    a4dc:	80 80       	ld	r8, Z
    a4de:	80 80       	ld	r8, Z
    a4e0:	80 80       	ld	r8, Z
    a4e2:	80 80       	ld	r8, Z
    a4e4:	80 80       	ld	r8, Z
    a4e6:	80 80       	ld	r8, Z
    a4e8:	80 80       	ld	r8, Z
    a4ea:	80 80       	ld	r8, Z
    a4ec:	80 80       	ld	r8, Z
    a4ee:	80 80       	ld	r8, Z
    a4f0:	80 80       	ld	r8, Z
    a4f2:	80 80       	ld	r8, Z
    a4f4:	80 80       	ld	r8, Z
    a4f6:	80 80       	ld	r8, Z
    a4f8:	80 80       	ld	r8, Z
    a4fa:	80 80       	ld	r8, Z
    a4fc:	80 80       	ld	r8, Z
    a4fe:	80 80       	ld	r8, Z
    a500:	03 09       	sbc	r16, r3
    a502:	13 1e       	adc	r1, r19
    a504:	28 31       	cpi	r18, 0x18	; 24
    a506:	3a 40       	sbci	r19, 0x0A	; 10
    a508:	46 4c       	sbci	r20, 0xC6	; 198
    a50a:	50 54       	subi	r21, 0x40	; 64
    a50c:	58 5b       	subi	r21, 0xB8	; 184
    a50e:	5e 61       	ori	r21, 0x1E	; 30
    a510:	63 65       	ori	r22, 0x53	; 83
    a512:	67 69       	ori	r22, 0x97	; 151
    a514:	6b 6c       	ori	r22, 0xCB	; 203
    a516:	6e 6f       	ori	r22, 0xFE	; 254
    a518:	70 71       	andi	r23, 0x10	; 16
    a51a:	72 73       	andi	r23, 0x32	; 50
    a51c:	74 75       	andi	r23, 0x54	; 84
    a51e:	76 77       	andi	r23, 0x76	; 118
    a520:	77 78       	andi	r23, 0x87	; 135
    a522:	79 79       	andi	r23, 0x99	; 153
    a524:	7a 7a       	andi	r23, 0xAA	; 170
    a526:	7b 7b       	andi	r23, 0xBB	; 187
    a528:	7c 7c       	andi	r23, 0xCC	; 204
    a52a:	7c 7d       	andi	r23, 0xDC	; 220
    a52c:	7d 7d       	andi	r23, 0xDD	; 221
    a52e:	7e 7e       	andi	r23, 0xEE	; 238
    a530:	7e 7e       	andi	r23, 0xEE	; 238
    a532:	7f 7f       	andi	r23, 0xFF	; 255
    a534:	7f 7f       	andi	r23, 0xFF	; 255
    a536:	7f 7f       	andi	r23, 0xFF	; 255
    a538:	7f 7f       	andi	r23, 0xFF	; 255
    a53a:	7f 7f       	andi	r23, 0xFF	; 255
    a53c:	7f 7f       	andi	r23, 0xFF	; 255
    a53e:	7f 7f       	andi	r23, 0xFF	; 255
    a540:	7f 7f       	andi	r23, 0xFF	; 255
    a542:	7f 7f       	andi	r23, 0xFF	; 255
    a544:	7f 7f       	andi	r23, 0xFF	; 255
    a546:	7f 7f       	andi	r23, 0xFF	; 255
    a548:	7f 7f       	andi	r23, 0xFF	; 255
    a54a:	7f 7f       	andi	r23, 0xFF	; 255
    a54c:	7f 7e       	andi	r23, 0xEF	; 239
    a54e:	7e 7e       	andi	r23, 0xEE	; 238
    a550:	7e 7d       	andi	r23, 0xDE	; 222
    a552:	7d 7d       	andi	r23, 0xDD	; 221
    a554:	7c 7c       	andi	r23, 0xCC	; 204
    a556:	7c 7b       	andi	r23, 0xBC	; 188
    a558:	7b 7a       	andi	r23, 0xAB	; 171
    a55a:	7a 79       	andi	r23, 0x9A	; 154
    a55c:	79 78       	andi	r23, 0x89	; 137
    a55e:	77 77       	andi	r23, 0x77	; 119
    a560:	76 75       	andi	r23, 0x56	; 86
    a562:	74 73       	andi	r23, 0x34	; 52
    a564:	72 71       	andi	r23, 0x12	; 18
    a566:	70 6f       	ori	r23, 0xF0	; 240
    a568:	6e 6c       	ori	r22, 0xCE	; 206
    a56a:	6b 69       	ori	r22, 0x9B	; 155
    a56c:	67 65       	ori	r22, 0x57	; 87
    a56e:	63 61       	ori	r22, 0x13	; 19
    a570:	5e 5b       	subi	r21, 0xBE	; 190
    a572:	58 54       	subi	r21, 0x48	; 72
    a574:	50 4c       	sbci	r21, 0xC0	; 192
    a576:	46 40       	sbci	r20, 0x06	; 6
    a578:	3a 31       	cpi	r19, 0x1A	; 26
    a57a:	28 1e       	adc	r2, r24
    a57c:	13 09       	sbc	r17, r3
    a57e:	03 00       	.word	0x0003	; ????
    a580:	c6 cc       	rjmp	.-1652   	; 0x9f0e <waves+0xe>
    a582:	d5 db       	rcall	.-2134   	; 0x9d2e <steptable+0x26>
    a584:	df e3       	ldi	r29, 0x3F	; 63
    a586:	e5 e7       	ldi	r30, 0x75	; 117
    a588:	e9 ea       	ldi	r30, 0xA9	; 169
    a58a:	eb ec       	ldi	r30, 0xCB	; 203
    a58c:	ed ee       	ldi	r30, 0xED	; 237
    a58e:	ef ef       	ldi	r30, 0xFF	; 255
    a590:	f0 f0       	brcs	.+60     	; 0xa5ce <waves+0x6ce>
    a592:	f0 f1       	brcs	.+124    	; 0xa610 <waves+0x710>
    a594:	f1 f1       	breq	.+124    	; 0xa612 <waves+0x712>
    a596:	f1 f2       	breq	.-68     	; 0xa554 <waves+0x654>
    a598:	f2 f2       	brmi	.-68     	; 0xa556 <waves+0x656>
    a59a:	f2 f2       	brmi	.-68     	; 0xa558 <waves+0x658>
    a59c:	f2 f2       	brmi	.-68     	; 0xa55a <waves+0x65a>
    a59e:	f2 f3       	brmi	.-4      	; 0xa59c <waves+0x69c>
    a5a0:	f3 f3       	brvs	.-4      	; 0xa59e <waves+0x69e>
    a5a2:	f3 f3       	brvs	.-4      	; 0xa5a0 <waves+0x6a0>
    a5a4:	f3 f3       	brvs	.-4      	; 0xa5a2 <waves+0x6a2>
    a5a6:	f3 f3       	brvs	.-4      	; 0xa5a4 <waves+0x6a4>
    a5a8:	f3 f3       	brvs	.-4      	; 0xa5a6 <waves+0x6a6>
    a5aa:	f3 f3       	brvs	.-4      	; 0xa5a8 <waves+0x6a8>
    a5ac:	f3 f3       	brvs	.-4      	; 0xa5aa <waves+0x6aa>
    a5ae:	f3 f3       	brvs	.-4      	; 0xa5ac <waves+0x6ac>
    a5b0:	f3 f3       	brvs	.-4      	; 0xa5ae <waves+0x6ae>
    a5b2:	f3 f3       	brvs	.-4      	; 0xa5b0 <waves+0x6b0>
    a5b4:	f3 f3       	brvs	.-4      	; 0xa5b2 <waves+0x6b2>
    a5b6:	f3 f3       	brvs	.-4      	; 0xa5b4 <waves+0x6b4>
    a5b8:	f3 f3       	brvs	.-4      	; 0xa5b6 <waves+0x6b6>
    a5ba:	f3 f3       	brvs	.-4      	; 0xa5b8 <waves+0x6b8>
    a5bc:	f3 f3       	brvs	.-4      	; 0xa5ba <waves+0x6ba>
    a5be:	f3 f3       	brvs	.-4      	; 0xa5bc <waves+0x6bc>
    a5c0:	f3 f3       	brvs	.-4      	; 0xa5be <waves+0x6be>
    a5c2:	f3 f3       	brvs	.-4      	; 0xa5c0 <waves+0x6c0>
    a5c4:	f3 f3       	brvs	.-4      	; 0xa5c2 <waves+0x6c2>
    a5c6:	f3 f3       	brvs	.-4      	; 0xa5c4 <waves+0x6c4>
    a5c8:	f3 f3       	brvs	.-4      	; 0xa5c6 <waves+0x6c6>
    a5ca:	f3 f3       	brvs	.-4      	; 0xa5c8 <waves+0x6c8>
    a5cc:	f3 f3       	brvs	.-4      	; 0xa5ca <waves+0x6ca>
    a5ce:	f3 f3       	brvs	.-4      	; 0xa5cc <waves+0x6cc>
    a5d0:	f3 f3       	brvs	.-4      	; 0xa5ce <waves+0x6ce>
    a5d2:	f3 f3       	brvs	.-4      	; 0xa5d0 <waves+0x6d0>
    a5d4:	f3 f3       	brvs	.-4      	; 0xa5d2 <waves+0x6d2>
    a5d6:	f3 f3       	brvs	.-4      	; 0xa5d4 <waves+0x6d4>
    a5d8:	f3 f3       	brvs	.-4      	; 0xa5d6 <waves+0x6d6>
    a5da:	f3 f3       	brvs	.-4      	; 0xa5d8 <waves+0x6d8>
    a5dc:	f3 f3       	brvs	.-4      	; 0xa5da <waves+0x6da>
    a5de:	f3 f3       	brvs	.-4      	; 0xa5dc <waves+0x6dc>
    a5e0:	f2 f2       	brmi	.-68     	; 0xa59e <waves+0x69e>
    a5e2:	f2 f2       	brmi	.-68     	; 0xa5a0 <waves+0x6a0>
    a5e4:	f2 f2       	brmi	.-68     	; 0xa5a2 <waves+0x6a2>
    a5e6:	f2 f2       	brmi	.-68     	; 0xa5a4 <waves+0x6a4>
    a5e8:	f1 f1       	breq	.+124    	; 0xa666 <waves+0x766>
    a5ea:	f1 f1       	breq	.+124    	; 0xa668 <waves+0x768>
    a5ec:	f0 f0       	brcs	.+60     	; 0xa62a <waves+0x72a>
    a5ee:	f0 ef       	ldi	r31, 0xF0	; 240
    a5f0:	ef ee       	ldi	r30, 0xEF	; 239
    a5f2:	ed ec       	ldi	r30, 0xCD	; 205
    a5f4:	eb ea       	ldi	r30, 0xAB	; 171
    a5f6:	e9 e7       	ldi	r30, 0x79	; 121
    a5f8:	e5 e3       	ldi	r30, 0x35	; 53
    a5fa:	df db       	rcall	.-2114   	; 0x9dba <steptable+0xb2>
    a5fc:	d5 cc       	rjmp	.-1622   	; 0x9fa8 <waves+0xa8>
    a5fe:	c6 00       	.word	0x00c6	; ????
    a600:	00 28       	or	r0, r0
    a602:	3d 42       	sbci	r19, 0x2D	; 45
    a604:	30 2d       	mov	r19, r0
    a606:	2c 2b       	or	r18, r28
    a608:	2c 2d       	mov	r18, r12
    a60a:	2e 2f       	mov	r18, r30
    a60c:	30 32       	cpi	r19, 0x20	; 32
    a60e:	33 35       	cpi	r19, 0x53	; 83
    a610:	37 39       	cpi	r19, 0x97	; 151
    a612:	3b 3d       	cpi	r19, 0xDB	; 219
    a614:	3f 41       	sbci	r19, 0x1F	; 31
    a616:	43 45       	sbci	r20, 0x53	; 83
    a618:	48 4a       	sbci	r20, 0xA8	; 168
    a61a:	4c 4e       	sbci	r20, 0xEC	; 236
    a61c:	50 53       	subi	r21, 0x30	; 48
    a61e:	55 57       	subi	r21, 0x75	; 117
    a620:	59 5b       	subi	r21, 0xB9	; 185
    a622:	5d 5f       	subi	r21, 0xFD	; 253
    a624:	61 63       	ori	r22, 0x31	; 49
    a626:	65 67       	ori	r22, 0x75	; 117
    a628:	69 6b       	ori	r22, 0xB9	; 185
    a62a:	6c 6e       	ori	r22, 0xEC	; 236
    a62c:	70 71       	andi	r23, 0x10	; 16
    a62e:	73 74       	andi	r23, 0x43	; 67
    a630:	75 77       	andi	r23, 0x75	; 117
    a632:	78 79       	andi	r23, 0x98	; 152
    a634:	7a 7b       	andi	r23, 0xBA	; 186
    a636:	7c 7d       	andi	r23, 0xDC	; 220
    a638:	7d 7e       	andi	r23, 0xED	; 237
    a63a:	7e 7f       	andi	r23, 0xFE	; 254
    a63c:	7f 7f       	andi	r23, 0xFF	; 255
    a63e:	7f 7f       	andi	r23, 0xFF	; 255
    a640:	7f 7f       	andi	r23, 0xFF	; 255
    a642:	7f 7f       	andi	r23, 0xFF	; 255
    a644:	7f 7f       	andi	r23, 0xFF	; 255
    a646:	7e 7e       	andi	r23, 0xEE	; 238
    a648:	7d 7d       	andi	r23, 0xDD	; 221
    a64a:	7c 7b       	andi	r23, 0xBC	; 188
    a64c:	7a 79       	andi	r23, 0x9A	; 154
    a64e:	78 77       	andi	r23, 0x78	; 120
    a650:	75 74       	andi	r23, 0x45	; 69
    a652:	73 71       	andi	r23, 0x13	; 19
    a654:	70 6e       	ori	r23, 0xE0	; 224
    a656:	6c 6b       	ori	r22, 0xBC	; 188
    a658:	69 67       	ori	r22, 0x79	; 121
    a65a:	65 63       	ori	r22, 0x35	; 53
    a65c:	61 5f       	subi	r22, 0xF1	; 241
    a65e:	5d 5b       	subi	r21, 0xBD	; 189
    a660:	59 57       	subi	r21, 0x79	; 121
    a662:	55 53       	subi	r21, 0x35	; 53
    a664:	50 4e       	sbci	r21, 0xE0	; 224
    a666:	4c 4a       	sbci	r20, 0xAC	; 172
    a668:	48 45       	sbci	r20, 0x58	; 88
    a66a:	43 41       	sbci	r20, 0x13	; 19
    a66c:	3f 3d       	cpi	r19, 0xDF	; 223
    a66e:	3b 39       	cpi	r19, 0x9B	; 155
    a670:	37 35       	cpi	r19, 0x57	; 87
    a672:	33 32       	cpi	r19, 0x23	; 35
    a674:	30 2f       	mov	r19, r16
    a676:	2e 2d       	mov	r18, r14
    a678:	2c 2b       	or	r18, r28
    a67a:	2c 2d       	mov	r18, r12
    a67c:	30 42       	sbci	r19, 0x20	; 32
    a67e:	3d 28       	or	r3, r13
    a680:	00 e9       	ldi	r16, 0x90	; 144
    a682:	e5 fe       	sbrs	r14, 5
    a684:	d4 d7       	rcall	.+4008   	; 0xb62e <print_level_score+0x20>
    a686:	d7 d7       	rcall	.+4014   	; 0xb636 <print_level_score+0x28>
    a688:	d6 d4       	rcall	.+2476   	; 0xb036 <LBLineIntersect+0xb0>
    a68a:	d2 d0       	rcall	.+420    	; 0xa830 <waves+0x930>
    a68c:	ce cc       	rjmp	.-1636   	; 0xa02a <waves+0x12a>
    a68e:	ca c8       	rjmp	.-3692   	; 0x9824 <ProcessMusic+0x1a>
    a690:	c6 c3       	rjmp	.+1932   	; 0xae1e <LBGetNextFrame+0x42>
    a692:	c1 bf       	out	0x31, r28	; 49
    a694:	bd ba       	out	0x1d, r11	; 29
    a696:	b8 b6       	in	r11, 0x38	; 56
    a698:	b4 b1       	in	r27, 0x04	; 4
    a69a:	af ad       	ldd	r26, Y+63	; 0x3f
    a69c:	ab a9       	ldd	r26, Y+51	; 0x33
    a69e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    a6a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    a6a2:	9f 9e       	mul	r9, r31
    a6a4:	9c 9a       	sbi	0x13, 4	; 19
    a6a6:	99 97       	sbiw	r26, 0x29	; 41
    a6a8:	95 94       	asr	r9
    a6aa:	93 91       	.word	0x9193	; ????
    a6ac:	90 8f       	std	Z+24, r25	; 0x18
    a6ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a6b0:	8b 8a       	std	Y+19, r8	; 0x13
    a6b2:	89 88       	ldd	r8, Y+17	; 0x11
    a6b4:	88 87       	std	Y+8, r24	; 0x08
    a6b6:	86 85       	ldd	r24, Z+14	; 0x0e
    a6b8:	85 84       	ldd	r8, Z+13	; 0x0d
    a6ba:	84 84       	ldd	r8, Z+12	; 0x0c
    a6bc:	83 83       	std	Z+3, r24	; 0x03
    a6be:	83 83       	std	Z+3, r24	; 0x03
    a6c0:	83 83       	std	Z+3, r24	; 0x03
    a6c2:	83 83       	std	Z+3, r24	; 0x03
    a6c4:	83 84       	ldd	r8, Z+11	; 0x0b
    a6c6:	84 84       	ldd	r8, Z+12	; 0x0c
    a6c8:	85 85       	ldd	r24, Z+13	; 0x0d
    a6ca:	86 87       	std	Z+14, r24	; 0x0e
    a6cc:	88 88       	ldd	r8, Y+16	; 0x10
    a6ce:	89 8a       	std	Y+17, r8	; 0x11
    a6d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    a6d2:	8d 8f       	std	Y+29, r24	; 0x1d
    a6d4:	90 91 93 94 	lds	r25, 0x9493
    a6d8:	95 97       	sbiw	r26, 0x25	; 37
    a6da:	99 9a       	sbi	0x13, 1	; 19
    a6dc:	9c 9e       	mul	r9, r28
    a6de:	9f a1       	ldd	r25, Y+39	; 0x27
    a6e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    a6e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    a6e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    a6e6:	af b1       	in	r26, 0x0f	; 15
    a6e8:	b4 b6       	in	r11, 0x34	; 52
    a6ea:	b8 ba       	out	0x18, r11	; 24
    a6ec:	bd bf       	out	0x3d, r27	; 61
    a6ee:	c1 c3       	rjmp	.+1922   	; 0xae72 <LBGetJoyPadState+0x50>
    a6f0:	c6 c8       	rjmp	.-3700   	; 0x987e <ProcessMusic+0x74>
    a6f2:	ca cc       	rjmp	.-1644   	; 0xa088 <waves+0x188>
    a6f4:	ce d0       	rcall	.+412    	; 0xa892 <waves+0x992>
    a6f6:	d2 d4       	rcall	.+2468   	; 0xb09c <LBLineIntersect+0x116>
    a6f8:	d6 d7       	rcall	.+4012   	; 0xb6a6 <print_final_score+0x14>
    a6fa:	d7 d7       	rcall	.+4014   	; 0xb6aa <print_final_score+0x18>
    a6fc:	d4 fe       	sbrs	r13, 4
    a6fe:	e5 e9       	ldi	r30, 0x95	; 149
    a700:	f9 f8       	.word	0xf8f9	; ????
    a702:	f9 f5       	brne	.+126    	; 0xa782 <waves+0x882>
    a704:	eb e1       	ldi	r30, 0x1B	; 27
    a706:	dd de       	rcall	.-582    	; 0xa4c2 <waves+0x5c2>
    a708:	e0 e2       	ldi	r30, 0x20	; 32
    a70a:	e4 e5       	ldi	r30, 0x54	; 84
    a70c:	e6 e5       	ldi	r30, 0x56	; 86
    a70e:	e4 e2       	ldi	r30, 0x24	; 36
    a710:	de d9       	rcall	.-3140   	; 0x9ace <ProcessMusic+0x2c4>
    a712:	d2 ca       	rjmp	.-2652   	; 0x9cb8 <smw1+0xc>
    a714:	c1 b7       	in	r28, 0x31	; 49
    a716:	ac a2       	std	Y+36, r10	; 0x24
    a718:	99 91       	ld	r25, Y+
    a71a:	8a 86       	std	Y+10, r8	; 0x0a
    a71c:	83 81       	ldd	r24, Z+3	; 0x03
    a71e:	80 80       	ld	r8, Z
    a720:	81 82       	std	Z+1, r8	; 0x01
    a722:	83 85       	ldd	r24, Z+11	; 0x0b
    a724:	86 88       	ldd	r8, Z+22	; 0x16
    a726:	8a 8c       	ldd	r8, Y+26	; 0x1a
    a728:	8d 8f       	std	Y+29, r24	; 0x1d
    a72a:	90 92 93 95 	sts	0x9593, r9
    a72e:	96 97       	sbiw	r26, 0x26	; 38
    a730:	98 99       	sbic	0x13, 0	; 19
    a732:	9a 9b       	sbis	0x13, 2	; 19
    a734:	9b 9c       	mul	r9, r11
    a736:	9d 9d       	mul	r25, r13
    a738:	9d 9e       	mul	r9, r29
    a73a:	9e 9e       	mul	r9, r30
    a73c:	9f 9f       	mul	r25, r31
    a73e:	9f 9f       	mul	r25, r31
    a740:	9f 9f       	mul	r25, r31
    a742:	9f 9e       	mul	r9, r31
    a744:	9e 9e       	mul	r9, r30
    a746:	9d 9d       	mul	r25, r13
    a748:	9d 9c       	mul	r9, r13
    a74a:	9b 9b       	sbis	0x13, 3	; 19
    a74c:	9a 99       	sbic	0x13, 2	; 19
    a74e:	98 97       	sbiw	r26, 0x28	; 40
    a750:	96 95       	lsr	r25
    a752:	93 92       	.word	0x9293	; ????
    a754:	90 8f       	std	Z+24, r25	; 0x18
    a756:	8d 8c       	ldd	r8, Y+29	; 0x1d
    a758:	8a 88       	ldd	r8, Y+18	; 0x12
    a75a:	86 85       	ldd	r24, Z+14	; 0x0e
    a75c:	83 82       	std	Z+3, r8	; 0x03
    a75e:	81 80       	ldd	r8, Z+1	; 0x01
    a760:	80 81       	ld	r24, Z
    a762:	83 86       	std	Z+11, r8	; 0x0b
    a764:	8a 91       	ld	r24, -Y
    a766:	99 a2       	std	Y+33, r9	; 0x21
    a768:	ac b7       	in	r26, 0x3c	; 60
    a76a:	c1 ca       	rjmp	.-2686   	; 0x9cee <esmw+0x2c>
    a76c:	d2 d9       	rcall	.-3164   	; 0x9b12 <ProcessMusic+0x308>
    a76e:	de e2       	ldi	r29, 0x2E	; 46
    a770:	e4 e5       	ldi	r30, 0x54	; 84
    a772:	e6 e5       	ldi	r30, 0x56	; 86
    a774:	e4 e2       	ldi	r30, 0x24	; 36
    a776:	e0 de       	rcall	.-576    	; 0xa538 <waves+0x638>
    a778:	dd e1       	ldi	r29, 0x1D	; 29
    a77a:	eb f5       	brvc	.+122    	; 0xa7f6 <waves+0x8f6>
    a77c:	f9 f8       	.word	0xf8f9	; ????
    a77e:	f9 00       	.word	0x00f9	; ????
    a780:	07 08       	sbc	r0, r7
    a782:	07 0b       	sbc	r16, r23
    a784:	15 1f       	adc	r17, r21
    a786:	23 22       	and	r2, r19
    a788:	20 1e       	adc	r2, r16
    a78a:	1c 1b       	sub	r17, r28
    a78c:	1a 1b       	sub	r17, r26
    a78e:	1c 1e       	adc	r1, r28
    a790:	22 27       	eor	r18, r18
    a792:	2e 36       	cpi	r18, 0x6E	; 110
    a794:	3f 49       	sbci	r19, 0x9F	; 159
    a796:	54 5e       	subi	r21, 0xE4	; 228
    a798:	67 6f       	ori	r22, 0xF7	; 247
    a79a:	76 7a       	andi	r23, 0xA6	; 166
    a79c:	7e 7f       	andi	r23, 0xFE	; 254
    a79e:	7f 7f       	andi	r23, 0xFF	; 255
    a7a0:	7f 7e       	andi	r23, 0xEF	; 239
    a7a2:	7d 7b       	andi	r23, 0xBD	; 189
    a7a4:	7a 78       	andi	r23, 0x8A	; 138
    a7a6:	76 74       	andi	r23, 0x46	; 70
    a7a8:	73 71       	andi	r23, 0x13	; 19
    a7aa:	70 6e       	ori	r23, 0xE0	; 224
    a7ac:	6d 6b       	ori	r22, 0xBD	; 189
    a7ae:	6a 69       	ori	r22, 0x9A	; 154
    a7b0:	68 67       	ori	r22, 0x78	; 120
    a7b2:	66 65       	ori	r22, 0x56	; 86
    a7b4:	65 64       	ori	r22, 0x45	; 69
    a7b6:	64 63       	ori	r22, 0x34	; 52
    a7b8:	63 62       	ori	r22, 0x23	; 35
    a7ba:	62 62       	ori	r22, 0x22	; 34
    a7bc:	61 61       	ori	r22, 0x11	; 17
    a7be:	61 61       	ori	r22, 0x11	; 17
    a7c0:	61 61       	ori	r22, 0x11	; 17
    a7c2:	61 62       	ori	r22, 0x21	; 33
    a7c4:	62 62       	ori	r22, 0x22	; 34
    a7c6:	63 63       	ori	r22, 0x33	; 51
    a7c8:	63 64       	ori	r22, 0x43	; 67
    a7ca:	65 65       	ori	r22, 0x55	; 85
    a7cc:	66 67       	ori	r22, 0x76	; 118
    a7ce:	68 69       	ori	r22, 0x98	; 152
    a7d0:	6a 6b       	ori	r22, 0xBA	; 186
    a7d2:	6d 6e       	ori	r22, 0xED	; 237
    a7d4:	70 71       	andi	r23, 0x10	; 16
    a7d6:	73 74       	andi	r23, 0x43	; 67
    a7d8:	76 78       	andi	r23, 0x86	; 134
    a7da:	7a 7b       	andi	r23, 0xBA	; 186
    a7dc:	7d 7e       	andi	r23, 0xED	; 237
    a7de:	7f 7f       	andi	r23, 0xFF	; 255
    a7e0:	7f 7f       	andi	r23, 0xFF	; 255
    a7e2:	7e 7a       	andi	r23, 0xAE	; 174
    a7e4:	76 6f       	ori	r23, 0xF6	; 246
    a7e6:	67 5e       	subi	r22, 0xE7	; 231
    a7e8:	54 49       	sbci	r21, 0x94	; 148
    a7ea:	3f 36       	cpi	r19, 0x6F	; 111
    a7ec:	2e 27       	eor	r18, r30
    a7ee:	22 1e       	adc	r2, r18
    a7f0:	1c 1b       	sub	r17, r28
    a7f2:	1a 1b       	sub	r17, r26
    a7f4:	1c 1e       	adc	r1, r28
    a7f6:	20 22       	and	r2, r16
    a7f8:	23 1f       	adc	r18, r19
    a7fa:	15 0b       	sbc	r17, r21
    a7fc:	07 08       	sbc	r0, r7
    a7fe:	07 00       	.word	0x0007	; ????
    a800:	1f 31       	cpi	r17, 0x1F	; 31
    a802:	3d 44       	sbci	r19, 0x4D	; 77
    a804:	4e 53       	subi	r20, 0x3E	; 62
    a806:	54 56       	subi	r21, 0x64	; 100
    a808:	5a 5f       	subi	r21, 0xFA	; 250
    a80a:	64 69       	ori	r22, 0x94	; 148
    a80c:	6e 74       	andi	r22, 0x4E	; 78
    a80e:	76 79       	andi	r23, 0x96	; 150
    a810:	7c 7f       	andi	r23, 0xFC	; 252
    a812:	7f 7f       	andi	r23, 0xFF	; 255
    a814:	7f 7f       	andi	r23, 0xFF	; 255
    a816:	7f 7f       	andi	r23, 0xFF	; 255
    a818:	7f 7f       	andi	r23, 0xFF	; 255
    a81a:	7f 7f       	andi	r23, 0xFF	; 255
    a81c:	7f 7f       	andi	r23, 0xFF	; 255
    a81e:	7f 7f       	andi	r23, 0xFF	; 255
    a820:	7f 7f       	andi	r23, 0xFF	; 255
    a822:	7f 7f       	andi	r23, 0xFF	; 255
    a824:	7f 7f       	andi	r23, 0xFF	; 255
    a826:	7f 7f       	andi	r23, 0xFF	; 255
    a828:	7f 7f       	andi	r23, 0xFF	; 255
    a82a:	7f 7f       	andi	r23, 0xFF	; 255
    a82c:	7f 7f       	andi	r23, 0xFF	; 255
    a82e:	7f 7f       	andi	r23, 0xFF	; 255
    a830:	7f 7f       	andi	r23, 0xFF	; 255
    a832:	7f 7f       	andi	r23, 0xFF	; 255
    a834:	7f 7f       	andi	r23, 0xFF	; 255
    a836:	7f 7f       	andi	r23, 0xFF	; 255
    a838:	7f 7f       	andi	r23, 0xFF	; 255
    a83a:	7f 7f       	andi	r23, 0xFF	; 255
    a83c:	7f 7f       	andi	r23, 0xFF	; 255
    a83e:	7f 7f       	andi	r23, 0xFF	; 255
    a840:	7f 7f       	andi	r23, 0xFF	; 255
    a842:	7f 7f       	andi	r23, 0xFF	; 255
    a844:	7f 7f       	andi	r23, 0xFF	; 255
    a846:	7f 7f       	andi	r23, 0xFF	; 255
    a848:	7f 7f       	andi	r23, 0xFF	; 255
    a84a:	7f 7f       	andi	r23, 0xFF	; 255
    a84c:	7f 7f       	andi	r23, 0xFF	; 255
    a84e:	7f 7f       	andi	r23, 0xFF	; 255
    a850:	7f 7f       	andi	r23, 0xFF	; 255
    a852:	7f 7f       	andi	r23, 0xFF	; 255
    a854:	7f 7f       	andi	r23, 0xFF	; 255
    a856:	7f 7f       	andi	r23, 0xFF	; 255
    a858:	7f 7f       	andi	r23, 0xFF	; 255
    a85a:	7f 7f       	andi	r23, 0xFF	; 255
    a85c:	7f 7f       	andi	r23, 0xFF	; 255
    a85e:	7f 7f       	andi	r23, 0xFF	; 255
    a860:	7f 7f       	andi	r23, 0xFF	; 255
    a862:	7f 7f       	andi	r23, 0xFF	; 255
    a864:	7f 7f       	andi	r23, 0xFF	; 255
    a866:	7f 7f       	andi	r23, 0xFF	; 255
    a868:	7f 7f       	andi	r23, 0xFF	; 255
    a86a:	7f 7f       	andi	r23, 0xFF	; 255
    a86c:	7f 7f       	andi	r23, 0xFF	; 255
    a86e:	7f 7f       	andi	r23, 0xFF	; 255
    a870:	7f 7f       	andi	r23, 0xFF	; 255
    a872:	7f 7f       	andi	r23, 0xFF	; 255
    a874:	7f 7f       	andi	r23, 0xFF	; 255
    a876:	7f 7f       	andi	r23, 0xFF	; 255
    a878:	7f 7f       	andi	r23, 0xFF	; 255
    a87a:	7f 7c       	andi	r23, 0xCF	; 207
    a87c:	78 71       	andi	r23, 0x18	; 24
    a87e:	68 4c       	sbci	r22, 0xC8	; 200
    a880:	2c 1c       	adc	r2, r12
    a882:	12 0c       	add	r1, r2
    a884:	0a 0b       	sbc	r16, r26
    a886:	0a 05       	cpc	r16, r10
    a888:	fd f3       	brhs	.-2      	; 0xa888 <waves+0x988>
    a88a:	e9 df       	rcall	.-46     	; 0xa85e <waves+0x95e>
    a88c:	d4 ca       	rjmp	.-2648   	; 0x9e36 <steptable+0x12e>
    a88e:	c0 b7       	in	r28, 0x30	; 48
    a890:	ae a6       	std	Y+46, r10	; 0x2e
    a892:	9e 97       	sbiw	r26, 0x2e	; 46
    a894:	91 8b       	std	Z+17, r25	; 0x11
    a896:	86 85       	ldd	r24, Z+14	; 0x0e
    a898:	82 80       	ldd	r8, Z+2	; 0x02
    a89a:	80 80       	ld	r8, Z
    a89c:	80 80       	ld	r8, Z
    a89e:	80 80       	ld	r8, Z
    a8a0:	80 80       	ld	r8, Z
    a8a2:	80 80       	ld	r8, Z
    a8a4:	80 80       	ld	r8, Z
    a8a6:	80 80       	ld	r8, Z
    a8a8:	80 80       	ld	r8, Z
    a8aa:	80 80       	ld	r8, Z
    a8ac:	80 80       	ld	r8, Z
    a8ae:	80 80       	ld	r8, Z
    a8b0:	80 80       	ld	r8, Z
    a8b2:	80 80       	ld	r8, Z
    a8b4:	80 80       	ld	r8, Z
    a8b6:	80 80       	ld	r8, Z
    a8b8:	80 80       	ld	r8, Z
    a8ba:	80 80       	ld	r8, Z
    a8bc:	80 80       	ld	r8, Z
    a8be:	80 80       	ld	r8, Z
    a8c0:	80 80       	ld	r8, Z
    a8c2:	80 80       	ld	r8, Z
    a8c4:	80 80       	ld	r8, Z
    a8c6:	80 80       	ld	r8, Z
    a8c8:	80 80       	ld	r8, Z
    a8ca:	80 80       	ld	r8, Z
    a8cc:	80 80       	ld	r8, Z
    a8ce:	80 80       	ld	r8, Z
    a8d0:	80 80       	ld	r8, Z
    a8d2:	80 80       	ld	r8, Z
    a8d4:	80 80       	ld	r8, Z
    a8d6:	80 80       	ld	r8, Z
    a8d8:	80 80       	ld	r8, Z
    a8da:	80 80       	ld	r8, Z
    a8dc:	80 80       	ld	r8, Z
    a8de:	80 80       	ld	r8, Z
    a8e0:	80 80       	ld	r8, Z
    a8e2:	80 80       	ld	r8, Z
    a8e4:	80 80       	ld	r8, Z
    a8e6:	80 80       	ld	r8, Z
    a8e8:	80 80       	ld	r8, Z
    a8ea:	80 80       	ld	r8, Z
    a8ec:	80 80       	ld	r8, Z
    a8ee:	80 80       	ld	r8, Z
    a8f0:	80 80       	ld	r8, Z
    a8f2:	80 80       	ld	r8, Z
    a8f4:	80 87       	std	Z+8, r24	; 0x08
    a8f6:	91 9d       	mul	r25, r1
    a8f8:	ac c4       	rjmp	.+2392   	; 0xb252 <init_shot_state+0x22>
    a8fa:	cb d4       	rcall	.+2454   	; 0xb292 <set_shot_animations+0x28>
    a8fc:	dd f2       	brhs	.-74     	; 0xa8b4 <waves+0x9b4>
    a8fe:	fa fa       	.word	0xfafa	; ????

0000a900 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a900:	90 91 bd 0b 	lds	r25, 0x0BBD
    a904:	e0 e9       	ldi	r30, 0x90	; 144
    a906:	fa e0       	ldi	r31, 0x0A	; 10
    a908:	80 e0       	ldi	r24, 0x00	; 0
    a90a:	89 17       	cp	r24, r25
    a90c:	49 f0       	breq	.+18     	; 0xa920 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    a90e:	a0 81       	ld	r26, Z
    a910:	b1 81       	ldd	r27, Z+1	; 0x01
    a912:	a0 5e       	subi	r26, 0xE0	; 224
    a914:	be 4f       	sbci	r27, 0xFE	; 254
    a916:	22 81       	ldd	r18, Z+2	; 0x02
    a918:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    a91a:	8f 5f       	subi	r24, 0xFF	; 255
    a91c:	33 96       	adiw	r30, 0x03	; 3
    a91e:	f5 cf       	rjmp	.-22     	; 0xa90a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    a920:	08 95       	ret

0000a922 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    a922:	80 93 00 01 	sts	0x0100, r24
    a926:	08 95       	ret

0000a928 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    a928:	2f 92       	push	r2
    a92a:	3f 92       	push	r3
    a92c:	4f 92       	push	r4
    a92e:	5f 92       	push	r5
    a930:	6f 92       	push	r6
    a932:	7f 92       	push	r7
    a934:	8f 92       	push	r8
    a936:	9f 92       	push	r9
    a938:	af 92       	push	r10
    a93a:	bf 92       	push	r11
    a93c:	cf 92       	push	r12
    a93e:	df 92       	push	r13
    a940:	ef 92       	push	r14
    a942:	ff 92       	push	r15
    a944:	0f 93       	push	r16
    a946:	1f 93       	push	r17
    a948:	cf 93       	push	r28
    a94a:	df 93       	push	r29
    a94c:	00 d0       	rcall	.+0      	; 0xa94e <ProcessSprites+0x26>
    a94e:	1f 92       	push	r1
    a950:	cd b7       	in	r28, 0x3d	; 61
    a952:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    a954:	10 92 bd 0b 	sts	0x0BBD, r1
		if(!spritesOn) return;
    a958:	80 91 00 01 	lds	r24, 0x0100
    a95c:	88 23       	and	r24, r24
    a95e:	09 f4       	brne	.+2      	; 0xa962 <ProcessSprites+0x3a>
    a960:	a1 c0       	rjmp	.+322    	; 0xaaa4 <ProcessSprites+0x17c>
    a962:	e8 e6       	ldi	r30, 0x68	; 104
    a964:	ce 2e       	mov	r12, r30
    a966:	e4 e0       	ldi	r30, 0x04	; 4
    a968:	de 2e       	mov	r13, r30
    a96a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    a96c:	f6 01       	movw	r30, r12
    a96e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    a970:	80 3f       	cpi	r24, 0xF0	; 240
    a972:	09 f4       	brne	.+2      	; 0xa976 <ProcessSprites+0x4e>
    a974:	79 c0       	rjmp	.+242    	; 0xaa68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    a976:	91 81       	ldd	r25, Z+1	; 0x01
    a978:	29 2f       	mov	r18, r25
    a97a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    a97c:	28 2e       	mov	r2, r24
    a97e:	26 94       	lsr	r2
    a980:	26 94       	lsr	r2
    a982:	26 94       	lsr	r2
				dx=ssx&0x7;
    a984:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    a986:	19 f0       	breq	.+6      	; 0xa98e <ProcessSprites+0x66>
    a988:	72 e0       	ldi	r23, 0x02	; 2
    a98a:	47 2e       	mov	r4, r23
    a98c:	02 c0       	rjmp	.+4      	; 0xa992 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    a98e:	44 24       	eor	r4, r4
    a990:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    a992:	63 e0       	ldi	r22, 0x03	; 3
    a994:	36 95       	lsr	r19
    a996:	27 95       	ror	r18
    a998:	6a 95       	dec	r22
    a99a:	e1 f7       	brne	.-8      	; 0xa994 <ProcessSprites+0x6c>
    a99c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    a99e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    a9a0:	19 f0       	breq	.+6      	; 0xa9a8 <ProcessSprites+0x80>
    a9a2:	52 e0       	ldi	r21, 0x02	; 2
    a9a4:	55 2e       	mov	r5, r21
    a9a6:	02 c0       	rjmp	.+4      	; 0xa9ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    a9a8:	55 24       	eor	r5, r5
    a9aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a9ac:	29 2f       	mov	r18, r25
    a9ae:	30 e0       	ldi	r19, 0x00	; 0
    a9b0:	32 2f       	mov	r19, r18
    a9b2:	22 27       	eor	r18, r18
    a9b4:	a9 01       	movw	r20, r18
    a9b6:	48 0f       	add	r20, r24
    a9b8:	51 1d       	adc	r21, r1
    a9ba:	5b 83       	std	Y+3, r21	; 0x03
    a9bc:	4a 83       	std	Y+2, r20	; 0x02
    a9be:	e1 2c       	mov	r14, r1
    a9c0:	f1 2c       	mov	r15, r1
    a9c2:	94 ee       	ldi	r25, 0xE4	; 228
    a9c4:	93 0d       	add	r25, r3
    a9c6:	99 83       	std	Y+1, r25	; 0x01
    a9c8:	03 2d       	mov	r16, r3
    a9ca:	0e 0d       	add	r16, r14
    a9cc:	0c 31       	cpi	r16, 0x1C	; 28
    a9ce:	10 f0       	brcs	.+4      	; 0xa9d4 <ProcessSprites+0xac>
    a9d0:	09 81       	ldd	r16, Y+1	; 0x01
    a9d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a9d4:	5e e1       	ldi	r21, 0x1E	; 30
    a9d6:	05 9f       	mul	r16, r21
    a9d8:	80 01       	movw	r16, r0
    a9da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    a9dc:	be 2c       	mov	r11, r14
    a9de:	aa 24       	eor	r10, r10
    a9e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    a9e2:	ed e1       	ldi	r30, 0x1D	; 29
    a9e4:	e7 15       	cp	r30, r7
    a9e6:	18 f4       	brcc	.+6      	; 0xa9ee <ProcessSprites+0xc6>
    a9e8:	82 ee       	ldi	r24, 0xE2	; 226
    a9ea:	87 0d       	add	r24, r7
    a9ec:	01 c0       	rjmp	.+2      	; 0xa9f0 <ProcessSprites+0xc8>
    a9ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    a9f0:	a8 01       	movw	r20, r16
    a9f2:	48 0f       	add	r20, r24
    a9f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    a9f6:	ca 01       	movw	r24, r20
    a9f8:	80 5e       	subi	r24, 0xE0	; 224
    a9fa:	9e 4f       	sbci	r25, 0xFE	; 254
    a9fc:	4c 01       	movw	r8, r24
    a9fe:	fc 01       	movw	r30, r24
    aa00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    aa02:	88 31       	cpi	r24, 0x18	; 24
    aa04:	e0 f0       	brcs	.+56     	; 0xaa3e <ProcessSprites+0x116>
    aa06:	60 91 bd 0b 	lds	r22, 0x0BBD
    aa0a:	68 31       	cpi	r22, 0x18	; 24
    aa0c:	f8 f4       	brcc	.+62     	; 0xaa4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    aa0e:	26 2f       	mov	r18, r22
    aa10:	30 e0       	ldi	r19, 0x00	; 0
    aa12:	f9 01       	movw	r30, r18
    aa14:	ee 0f       	add	r30, r30
    aa16:	ff 1f       	adc	r31, r31
    aa18:	e2 0f       	add	r30, r18
    aa1a:	f3 1f       	adc	r31, r19
    aa1c:	e0 57       	subi	r30, 0x70	; 112
    aa1e:	f5 4f       	sbci	r31, 0xF5	; 245
    aa20:	51 83       	std	Z+1, r21	; 0x01
    aa22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    aa24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    aa26:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    aa2a:	80 91 bd 0b 	lds	r24, 0x0BBD
    aa2e:	f4 01       	movw	r30, r8
    aa30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    aa32:	91 e0       	ldi	r25, 0x01	; 1
    aa34:	98 0f       	add	r25, r24
    aa36:	90 93 bd 0b 	sts	0x0BBD, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    aa3a:	88 31       	cpi	r24, 0x18	; 24
    aa3c:	38 f4       	brcc	.+14     	; 0xaa4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    aa3e:	2a 81       	ldd	r18, Y+2	; 0x02
    aa40:	3b 81       	ldd	r19, Y+3	; 0x03
    aa42:	a5 01       	movw	r20, r10
    aa44:	68 2f       	mov	r22, r24
    aa46:	86 2d       	mov	r24, r6
    aa48:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <BlitSprite>
    aa4c:	ff ef       	ldi	r31, 0xFF	; 255
    aa4e:	af 1a       	sub	r10, r31
    aa50:	bf 0a       	sbc	r11, r31
    aa52:	73 94       	inc	r7
    aa54:	87 2d       	mov	r24, r7
    aa56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    aa58:	84 15       	cp	r24, r4
    aa5a:	18 f2       	brcs	.-122    	; 0xa9e2 <ProcessSprites+0xba>
    aa5c:	4f ef       	ldi	r20, 0xFF	; 255
    aa5e:	e4 1a       	sub	r14, r20
    aa60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    aa62:	e5 14       	cp	r14, r5
    aa64:	08 f4       	brcc	.+2      	; 0xaa68 <ProcessSprites+0x140>
    aa66:	b0 cf       	rjmp	.-160    	; 0xa9c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    aa68:	63 94       	inc	r6
    aa6a:	84 e0       	ldi	r24, 0x04	; 4
    aa6c:	c8 0e       	add	r12, r24
    aa6e:	d1 1c       	adc	r13, r1
    aa70:	9a e0       	ldi	r25, 0x0A	; 10
    aa72:	69 12       	cpse	r6, r25
    aa74:	7b cf       	rjmp	.-266    	; 0xa96c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    aa76:	0f 90       	pop	r0
    aa78:	0f 90       	pop	r0
    aa7a:	0f 90       	pop	r0
    aa7c:	df 91       	pop	r29
    aa7e:	cf 91       	pop	r28
    aa80:	1f 91       	pop	r17
    aa82:	0f 91       	pop	r16
    aa84:	ff 90       	pop	r15
    aa86:	ef 90       	pop	r14
    aa88:	df 90       	pop	r13
    aa8a:	cf 90       	pop	r12
    aa8c:	bf 90       	pop	r11
    aa8e:	af 90       	pop	r10
    aa90:	9f 90       	pop	r9
    aa92:	8f 90       	pop	r8
    aa94:	7f 90       	pop	r7
    aa96:	6f 90       	pop	r6
    aa98:	5f 90       	pop	r5
    aa9a:	4f 90       	pop	r4
    aa9c:	3f 90       	pop	r3
    aa9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    aaa0:	0c 94 80 54 	jmp	0xa900	; 0xa900 <RestoreBackground>

	}
    aaa4:	0f 90       	pop	r0
    aaa6:	0f 90       	pop	r0
    aaa8:	0f 90       	pop	r0
    aaaa:	df 91       	pop	r29
    aaac:	cf 91       	pop	r28
    aaae:	1f 91       	pop	r17
    aab0:	0f 91       	pop	r16
    aab2:	ff 90       	pop	r15
    aab4:	ef 90       	pop	r14
    aab6:	df 90       	pop	r13
    aab8:	cf 90       	pop	r12
    aaba:	bf 90       	pop	r11
    aabc:	af 90       	pop	r10
    aabe:	9f 90       	pop	r9
    aac0:	8f 90       	pop	r8
    aac2:	7f 90       	pop	r7
    aac4:	6f 90       	pop	r6
    aac6:	5f 90       	pop	r5
    aac8:	4f 90       	pop	r4
    aaca:	3f 90       	pop	r3
    aacc:	2f 90       	pop	r2
    aace:	08 95       	ret

0000aad0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    aad0:	df 92       	push	r13
    aad2:	ef 92       	push	r14
    aad4:	ff 92       	push	r15
    aad6:	0f 93       	push	r16
    aad8:	1f 93       	push	r17
    aada:	cf 93       	push	r28
    aadc:	df 93       	push	r29
    aade:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    aae0:	fb 01       	movw	r30, r22
    aae2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    aae4:	31 96       	adiw	r30, 0x01	; 1
    aae6:	64 91       	lpm	r22, Z
    aae8:	5f ef       	ldi	r21, 0xFF	; 255
    aaea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    aaec:	24 2f       	mov	r18, r20
    aaee:	21 70       	andi	r18, 0x01	; 1
    aaf0:	40 ff       	sbrs	r20, 0
    aaf2:	04 c0       	rjmp	.+8      	; 0xaafc <MapSprite2+0x2c>
			x=(mapWidth-1);
    aaf4:	95 2f       	mov	r25, r21
			dx=-1;
    aaf6:	ff 24       	eor	r15, r15
    aaf8:	fa 94       	dec	r15
    aafa:	03 c0       	rjmp	.+6      	; 0xab02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    aafc:	ff 24       	eor	r15, r15
    aafe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    ab00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    ab02:	41 ff       	sbrs	r20, 1
    ab04:	05 c0       	rjmp	.+10     	; 0xab10 <MapSprite2+0x40>
			y=(mapHeight-1);
    ab06:	7f ef       	ldi	r23, 0xFF	; 255
    ab08:	76 0f       	add	r23, r22
			dy=-1;
    ab0a:	ee 24       	eor	r14, r14
    ab0c:	ea 94       	dec	r14
    ab0e:	03 c0       	rjmp	.+6      	; 0xab16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    ab10:	ee 24       	eor	r14, r14
    ab12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    ab14:	70 e0       	ldi	r23, 0x00	; 0
    ab16:	21 11       	cpse	r18, r1
    ab18:	01 c0       	rjmp	.+2      	; 0xab1c <MapSprite2+0x4c>
    ab1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    ab1c:	00 e0       	ldi	r16, 0x00	; 0
    ab1e:	06 17       	cp	r16, r22
    ab20:	09 f1       	breq	.+66     	; 0xab64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    ab22:	71 03       	mulsu	r23, r17
    ab24:	e0 01       	movw	r28, r0
    ab26:	11 24       	eor	r1, r1
    ab28:	d8 2e       	mov	r13, r24
    ab2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    ab2c:	8d 15       	cp	r24, r13
    ab2e:	b1 f0       	breq	.+44     	; 0xab5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    ab30:	9e 01       	movw	r18, r28
    ab32:	29 0f       	add	r18, r25
    ab34:	31 1d       	adc	r19, r1
    ab36:	97 fd       	sbrc	r25, 7
    ab38:	3a 95       	dec	r19
    ab3a:	2e 5f       	subi	r18, 0xFE	; 254
    ab3c:	3f 4f       	sbci	r19, 0xFF	; 255
    ab3e:	fd 01       	movw	r30, r26
    ab40:	e2 0f       	add	r30, r18
    ab42:	f3 1f       	adc	r31, r19
    ab44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    ab46:	34 e0       	ldi	r19, 0x04	; 4
    ab48:	83 9f       	mul	r24, r19
    ab4a:	f0 01       	movw	r30, r0
    ab4c:	11 24       	eor	r1, r1
    ab4e:	e8 59       	subi	r30, 0x98	; 152
    ab50:	fb 4f       	sbci	r31, 0xFB	; 251
    ab52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    ab54:	8f 5f       	subi	r24, 0xFF	; 255
    ab56:	43 83       	std	Z+3, r20	; 0x03
    ab58:	9f 0d       	add	r25, r15
    ab5a:	e8 cf       	rjmp	.-48     	; 0xab2c <MapSprite2+0x5c>
    ab5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    ab5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    ab60:	95 2f       	mov	r25, r21
    ab62:	dd cf       	rjmp	.-70     	; 0xab1e <MapSprite2+0x4e>
	    }
	}
    ab64:	df 91       	pop	r29
    ab66:	cf 91       	pop	r28
    ab68:	1f 91       	pop	r17
    ab6a:	0f 91       	pop	r16
    ab6c:	ff 90       	pop	r15
    ab6e:	ef 90       	pop	r14
    ab70:	df 90       	pop	r13
    ab72:	08 95       	ret

0000ab74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    ab74:	0f 93       	push	r16
    ab76:	cf 93       	push	r28
    ab78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    ab7a:	30 e0       	ldi	r19, 0x00	; 0
    ab7c:	30 17       	cp	r19, r16
    ab7e:	e1 f0       	breq	.+56     	; 0xabb8 <MoveSprite+0x44>
    ab80:	b4 2f       	mov	r27, r20
    ab82:	a0 e2       	ldi	r26, 0x20	; 32
    ab84:	a4 0f       	add	r26, r20
    ab86:	78 2f       	mov	r23, r24
    ab88:	72 0f       	add	r23, r18
    ab8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    ab8c:	87 17       	cp	r24, r23
    ab8e:	81 f0       	breq	.+32     	; 0xabb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    ab90:	c4 e0       	ldi	r28, 0x04	; 4
    ab92:	8c 9f       	mul	r24, r28
    ab94:	f0 01       	movw	r30, r0
    ab96:	11 24       	eor	r1, r1
    ab98:	e8 59       	subi	r30, 0x98	; 152
    ab9a:	fb 4f       	sbci	r31, 0xFB	; 251
    ab9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    ab9e:	41 3e       	cpi	r20, 0xE1	; 225
    aba0:	51 05       	cpc	r21, r1
    aba2:	14 f0       	brlt	.+4      	; 0xaba8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    aba4:	a1 83       	std	Z+1, r26	; 0x01
    aba6:	01 c0       	rjmp	.+2      	; 0xabaa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    aba8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    abaa:	8f 5f       	subi	r24, 0xFF	; 255
    abac:	98 5f       	subi	r25, 0xF8	; 248
    abae:	ee cf       	rjmp	.-36     	; 0xab8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    abb0:	3f 5f       	subi	r19, 0xFF	; 255
    abb2:	48 5f       	subi	r20, 0xF8	; 248
    abb4:	5f 4f       	sbci	r21, 0xFF	; 255
    abb6:	e2 cf       	rjmp	.-60     	; 0xab7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    abb8:	cf 91       	pop	r28
    abba:	0f 91       	pop	r16
    abbc:	08 95       	ret

0000abbe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    abbe:	08 95       	ret

0000abc0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    abc0:	e8 e6       	ldi	r30, 0x68	; 104
    abc2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    abc4:	80 ef       	ldi	r24, 0xF0	; 240
    abc6:	80 83       	st	Z, r24
    abc8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    abca:	94 e0       	ldi	r25, 0x04	; 4
    abcc:	e0 39       	cpi	r30, 0x90	; 144
    abce:	f9 07       	cpc	r31, r25
    abd0:	d1 f7       	brne	.-12     	; 0xabc6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    abd2:	08 95       	ret

0000abd4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    abd4:	4f 92       	push	r4
    abd6:	5f 92       	push	r5
    abd8:	6f 92       	push	r6
    abda:	7f 92       	push	r7
    abdc:	8f 92       	push	r8
    abde:	9f 92       	push	r9
    abe0:	af 92       	push	r10
    abe2:	bf 92       	push	r11
    abe4:	cf 92       	push	r12
    abe6:	df 92       	push	r13
    abe8:	ef 92       	push	r14
    abea:	ff 92       	push	r15
    abec:	0f 93       	push	r16
    abee:	1f 93       	push	r17
    abf0:	cf 93       	push	r28
    abf2:	df 93       	push	r29
    abf4:	68 2e       	mov	r6, r24
    abf6:	56 2e       	mov	r5, r22
    abf8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    abfa:	fa 01       	movw	r30, r20
    abfc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    abfe:	31 96       	adiw	r30, 0x01	; 1
    ac00:	84 90       	lpm	r8, Z
    ac02:	c7 2c       	mov	r12, r7
    ac04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    ac06:	00 e0       	ldi	r16, 0x00	; 0
    ac08:	10 e0       	ldi	r17, 0x00	; 0
    ac0a:	91 2c       	mov	r9, r1
    ac0c:	98 14       	cp	r9, r8
    ac0e:	f1 f0       	breq	.+60     	; 0xac4c <DrawMap2+0x78>
    ac10:	c0 e0       	ldi	r28, 0x00	; 0
    ac12:	d0 e0       	ldi	r29, 0x00	; 0
    ac14:	58 01       	movw	r10, r16
    ac16:	f2 e0       	ldi	r31, 0x02	; 2
    ac18:	af 0e       	add	r10, r31
    ac1a:	b1 1c       	adc	r11, r1
    ac1c:	49 2c       	mov	r4, r9
    ac1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    ac20:	c7 15       	cp	r28, r7
    ac22:	80 f4       	brcc	.+32     	; 0xac44 <DrawMap2+0x70>
    ac24:	95 01       	movw	r18, r10
    ac26:	2c 0f       	add	r18, r28
    ac28:	3d 1f       	adc	r19, r29
    ac2a:	f7 01       	movw	r30, r14
    ac2c:	e2 0f       	add	r30, r18
    ac2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    ac30:	24 91       	lpm	r18, Z
    ac32:	42 2f       	mov	r20, r18
    ac34:	50 e0       	ldi	r21, 0x00	; 0
    ac36:	64 2d       	mov	r22, r4
    ac38:	8c 2f       	mov	r24, r28
    ac3a:	86 0d       	add	r24, r6
    ac3c:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
    ac40:	21 96       	adiw	r28, 0x01	; 1
    ac42:	ee cf       	rjmp	.-36     	; 0xac20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    ac44:	93 94       	inc	r9
    ac46:	0c 0d       	add	r16, r12
    ac48:	1d 1d       	adc	r17, r13
    ac4a:	e0 cf       	rjmp	.-64     	; 0xac0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    ac4c:	df 91       	pop	r29
    ac4e:	cf 91       	pop	r28
    ac50:	1f 91       	pop	r17
    ac52:	0f 91       	pop	r16
    ac54:	ff 90       	pop	r15
    ac56:	ef 90       	pop	r14
    ac58:	df 90       	pop	r13
    ac5a:	cf 90       	pop	r12
    ac5c:	bf 90       	pop	r11
    ac5e:	af 90       	pop	r10
    ac60:	9f 90       	pop	r9
    ac62:	8f 90       	pop	r8
    ac64:	7f 90       	pop	r7
    ac66:	6f 90       	pop	r6
    ac68:	5f 90       	pop	r5
    ac6a:	4f 90       	pop	r4
    ac6c:	08 95       	ret

0000ac6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    ac6e:	df 92       	push	r13
    ac70:	ef 92       	push	r14
    ac72:	ff 92       	push	r15
    ac74:	0f 93       	push	r16
    ac76:	1f 93       	push	r17
    ac78:	cf 93       	push	r28
    ac7a:	df 93       	push	r29
    ac7c:	f6 2e       	mov	r15, r22
    ac7e:	04 2f       	mov	r16, r20
    ac80:	d2 2e       	mov	r13, r18
    ac82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    ac84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    ac86:	8a e0       	ldi	r24, 0x0A	; 10
    ac88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    ac8a:	01 11       	cpse	r16, r1
    ac8c:	02 c0       	rjmp	.+4      	; 0xac92 <PrintByte+0x24>
    ac8e:	11 11       	cpse	r17, r1
    ac90:	07 c0       	rjmp	.+14     	; 0xaca0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    ac92:	80 2f       	mov	r24, r16
    ac94:	6e 2d       	mov	r22, r14
    ac96:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    ac9a:	40 e1       	ldi	r20, 0x10	; 16
    ac9c:	49 0f       	add	r20, r25
    ac9e:	05 c0       	rjmp	.+10     	; 0xacaa <PrintByte+0x3c>
		}else{
			if(zeropad){
    aca0:	dd 20       	and	r13, r13
    aca2:	11 f0       	breq	.+4      	; 0xaca8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    aca4:	40 e1       	ldi	r20, 0x10	; 16
    aca6:	01 c0       	rjmp	.+2      	; 0xacaa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    aca8:	40 e0       	ldi	r20, 0x00	; 0
    acaa:	6f 2d       	mov	r22, r15
    acac:	8c 2f       	mov	r24, r28
    acae:	0e 94 83 48 	call	0x9106	; 0x9106 <SetFont>
			}
		}
		val=val/10;
    acb2:	80 2f       	mov	r24, r16
    acb4:	6e 2d       	mov	r22, r14
    acb6:	0e 94 32 70 	call	0xe064	; 0xe064 <__udivmodqi4>
    acba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    acbc:	1f 5f       	subi	r17, 0xFF	; 255
    acbe:	21 97       	sbiw	r28, 0x01	; 1
    acc0:	13 30       	cpi	r17, 0x03	; 3
    acc2:	19 f7       	brne	.-58     	; 0xac8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    acc4:	df 91       	pop	r29
    acc6:	cf 91       	pop	r28
    acc8:	1f 91       	pop	r17
    acca:	0f 91       	pop	r16
    accc:	ff 90       	pop	r15
    acce:	ef 90       	pop	r14
    acd0:	df 90       	pop	r13
    acd2:	08 95       	ret

0000acd4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    acd4:	0f 93       	push	r16
    acd6:	1f 93       	push	r17
    acd8:	cf 93       	push	r28
    acda:	df 93       	push	r29
    acdc:	06 2f       	mov	r16, r22
    acde:	c4 2f       	mov	r28, r20
    ace0:	d5 2f       	mov	r29, r21
    ace2:	18 2f       	mov	r17, r24
    ace4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    ace6:	fe 01       	movw	r30, r28
    ace8:	44 91       	lpm	r20, Z
		if(c!=0){
    acea:	44 23       	and	r20, r20
    acec:	49 f0       	breq	.+18     	; 0xad00 <Print+0x2c>
			c=((c&127)-32);			
    acee:	4f 77       	andi	r20, 0x7F	; 127
    acf0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    acf2:	60 2f       	mov	r22, r16
    acf4:	8c 2f       	mov	r24, r28
    acf6:	81 0f       	add	r24, r17
    acf8:	0e 94 83 48 	call	0x9106	; 0x9106 <SetFont>
    acfc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    acfe:	f3 cf       	rjmp	.-26     	; 0xace6 <Print+0x12>
	
}
    ad00:	df 91       	pop	r29
    ad02:	cf 91       	pop	r28
    ad04:	1f 91       	pop	r17
    ad06:	0f 91       	pop	r16
    ad08:	08 95       	ret

0000ad0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    ad0a:	40 52       	subi	r20, 0x20	; 32
    ad0c:	0c 94 83 48 	jmp	0x9106	; 0x9106 <SetFont>

0000ad10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    ad10:	0f 93       	push	r16
    ad12:	1f 93       	push	r17
    ad14:	cf 93       	push	r28
    ad16:	df 93       	push	r29
    ad18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ad1a:	c0 e0       	ldi	r28, 0x00	; 0
    ad1c:	d0 e0       	ldi	r29, 0x00	; 0
    ad1e:	c0 17       	cp	r28, r16
    ad20:	d1 07       	cpc	r29, r17
    ad22:	44 f4       	brge	.+16     	; 0xad34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    ad24:	0e 94 9d 48 	call	0x913a	; 0x913a <GetVsyncFlag>
    ad28:	88 23       	and	r24, r24
    ad2a:	e1 f3       	breq	.-8      	; 0xad24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    ad2c:	0e 94 a1 48 	call	0x9142	; 0x9142 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    ad30:	21 96       	adiw	r28, 0x01	; 1
    ad32:	f5 cf       	rjmp	.-22     	; 0xad1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    ad34:	df 91       	pop	r29
    ad36:	cf 91       	pop	r28
    ad38:	1f 91       	pop	r17
    ad3a:	0f 91       	pop	r16
    ad3c:	08 95       	ret

0000ad3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    ad3e:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    ad42:	10 92 bf 0b 	sts	0x0BBF, r1
	fadeActive=true;
    ad46:	81 e0       	ldi	r24, 0x01	; 1
    ad48:	80 93 be 0b 	sts	0x0BBE, r24
		
	if(blocking){
    ad4c:	66 23       	and	r22, r22
    ad4e:	21 f0       	breq	.+8      	; 0xad58 <doFade+0x1a>
		while(fadeActive==true);
    ad50:	80 91 be 0b 	lds	r24, 0x0BBE
    ad54:	81 11       	cpse	r24, r1
    ad56:	fc cf       	rjmp	.-8      	; 0xad50 <doFade+0x12>
    ad58:	08 95       	ret

0000ad5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    ad5a:	81 11       	cpse	r24, r1
    ad5c:	03 c0       	rjmp	.+6      	; 0xad64 <FadeIn+0xa>
		DDRC=0xff;
    ad5e:	8f ef       	ldi	r24, 0xFF	; 255
    ad60:	87 b9       	out	0x07, r24	; 7
		return;
    ad62:	08 95       	ret
	}
	fadeStep=1;
    ad64:	91 e0       	ldi	r25, 0x01	; 1
    ad66:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=1;
    ad6a:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    ad6e:	0c 94 9f 56 	jmp	0xad3e	; 0xad3e <doFade>

0000ad72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    ad72:	81 11       	cpse	r24, r1
    ad74:	02 c0       	rjmp	.+4      	; 0xad7a <FadeOut+0x8>
		DDRC=0;
    ad76:	17 b8       	out	0x07, r1	; 7
		return;
    ad78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    ad7a:	9c e0       	ldi	r25, 0x0C	; 12
    ad7c:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=-1;
    ad80:	9f ef       	ldi	r25, 0xFF	; 255
    ad82:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    ad86:	0c 94 9f 56 	jmp	0xad3e	; 0xad3e <doFade>

0000ad8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    ad8a:	80 91 be 0b 	lds	r24, 0x0BBE
    ad8e:	88 23       	and	r24, r24
    ad90:	01 f1       	breq	.+64     	; 0xadd2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    ad92:	80 91 bf 0b 	lds	r24, 0x0BBF
    ad96:	81 11       	cpse	r24, r1
    ad98:	19 c0       	rjmp	.+50     	; 0xadcc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    ad9a:	80 91 bb 0b 	lds	r24, 0x0BBB
    ad9e:	80 93 bf 0b 	sts	0x0BBF, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    ada2:	e0 91 c0 0b 	lds	r30, 0x0BC0
    ada6:	f0 e0       	ldi	r31, 0x00	; 0
    ada8:	e9 52       	subi	r30, 0x29	; 41
    adaa:	ff 4f       	sbci	r31, 0xFF	; 255
    adac:	e4 91       	lpm	r30, Z
    adae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    adb0:	90 91 bc 0b 	lds	r25, 0x0BBC
    adb4:	80 91 c0 0b 	lds	r24, 0x0BC0
    adb8:	89 0f       	add	r24, r25
    adba:	80 93 c0 0b 	sts	0x0BC0, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    adbe:	88 23       	and	r24, r24
    adc0:	11 f0       	breq	.+4      	; 0xadc6 <ProcessFading+0x3c>
    adc2:	8d 30       	cpi	r24, 0x0D	; 13
    adc4:	31 f4       	brne	.+12     	; 0xadd2 <ProcessFading+0x48>
				fadeActive=false;
    adc6:	10 92 be 0b 	sts	0x0BBE, r1
    adca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    adcc:	81 50       	subi	r24, 0x01	; 1
    adce:	80 93 bf 0b 	sts	0x0BBF, r24
    add2:	08 95       	ret

0000add4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    add4:	0e 94 c5 56 	call	0xad8a	; 0xad8a <ProcessFading>
		ProcessSprites();
    add8:	0c 94 94 54 	jmp	0xa928	; 0xa928 <ProcessSprites>

0000addc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    addc:	cf 93       	push	r28
    adde:	df 93       	push	r29
    ade0:	fc 01       	movw	r30, r24
    ade2:	eb 01       	movw	r28, r22
	*looped = 0;
    ade4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    ade6:	93 81       	ldd	r25, Z+3	; 0x03
    ade8:	9f 5f       	subi	r25, 0xFF	; 255
    adea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    adec:	22 81       	ldd	r18, Z+2	; 0x02
    adee:	80 81       	ld	r24, Z
    adf0:	92 17       	cp	r25, r18
    adf2:	70 f0       	brcs	.+28     	; 0xae10 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    adf4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    adf6:	90 e0       	ldi	r25, 0x00	; 0
    adf8:	01 96       	adiw	r24, 0x01	; 1
    adfa:	21 81       	ldd	r18, Z+1	; 0x01
    adfc:	62 2f       	mov	r22, r18
    adfe:	70 e0       	ldi	r23, 0x00	; 0
    ae00:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    ae04:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    ae06:	81 11       	cpse	r24, r1
    ae08:	02 c0       	rjmp	.+4      	; 0xae0e <LBGetNextFrame+0x32>
    ae0a:	81 e0       	ldi	r24, 0x01	; 1
    ae0c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    ae0e:	80 81       	ld	r24, Z
    ae10:	e8 0f       	add	r30, r24
    ae12:	f1 1d       	adc	r31, r1
    ae14:	e8 0f       	add	r30, r24
    ae16:	f1 1d       	adc	r31, r1
    ae18:	84 81       	ldd	r24, Z+4	; 0x04
    ae1a:	95 81       	ldd	r25, Z+5	; 0x05
}
    ae1c:	df 91       	pop	r29
    ae1e:	cf 91       	pop	r28
    ae20:	08 95       	ret

0000ae22 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    ae22:	0f 93       	push	r16
    ae24:	1f 93       	push	r17
    ae26:	cf 93       	push	r28
    ae28:	df 93       	push	r29
    ae2a:	1f 92       	push	r1
    ae2c:	cd b7       	in	r28, 0x3d	; 61
    ae2e:	de b7       	in	r29, 0x3e	; 62
    ae30:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    ae32:	86 2f       	mov	r24, r22
    ae34:	69 83       	std	Y+1, r22	; 0x01
    ae36:	0e 94 a7 48 	call	0x914e	; 0x914e <ReadJoypad>
    ae3a:	d8 01       	movw	r26, r16
    ae3c:	15 96       	adiw	r26, 0x05	; 5
    ae3e:	9c 93       	st	X, r25
    ae40:	8e 93       	st	-X, r24
    ae42:	14 97       	sbiw	r26, 0x04	; 4
    ae44:	69 81       	ldd	r22, Y+1	; 0x01
    ae46:	e6 2f       	mov	r30, r22
    ae48:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    ae4a:	00 97       	sbiw	r24, 0x00	; 0
    ae4c:	51 f0       	breq	.+20     	; 0xae62 <LBGetJoyPadState+0x40>
    ae4e:	df 01       	movw	r26, r30
    ae50:	aa 0f       	add	r26, r26
    ae52:	bb 1f       	adc	r27, r27
    ae54:	a8 5c       	subi	r26, 0xC8	; 200
    ae56:	b4 4f       	sbci	r27, 0xF4	; 244
    ae58:	2d 91       	ld	r18, X+
    ae5a:	3c 91       	ld	r19, X
    ae5c:	82 17       	cp	r24, r18
    ae5e:	93 07       	cpc	r25, r19
    ae60:	21 f0       	breq	.+8      	; 0xae6a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    ae62:	d8 01       	movw	r26, r16
    ae64:	16 96       	adiw	r26, 0x06	; 6
    ae66:	1c 92       	st	X, r1
    ae68:	07 c0       	rjmp	.+14     	; 0xae78 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    ae6a:	d8 01       	movw	r26, r16
    ae6c:	16 96       	adiw	r26, 0x06	; 6
    ae6e:	2c 91       	ld	r18, X
    ae70:	16 97       	sbiw	r26, 0x06	; 6
    ae72:	2f 5f       	subi	r18, 0xFF	; 255
    ae74:	16 96       	adiw	r26, 0x06	; 6
    ae76:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    ae78:	ee 0f       	add	r30, r30
    ae7a:	ff 1f       	adc	r31, r31
    ae7c:	e8 5c       	subi	r30, 0xC8	; 200
    ae7e:	f4 4f       	sbci	r31, 0xF4	; 244
    ae80:	20 81       	ld	r18, Z
    ae82:	31 81       	ldd	r19, Z+1	; 0x01
    ae84:	a9 01       	movw	r20, r18
    ae86:	40 95       	com	r20
    ae88:	50 95       	com	r21
    ae8a:	48 23       	and	r20, r24
    ae8c:	59 23       	and	r21, r25
    ae8e:	d8 01       	movw	r26, r16
    ae90:	11 96       	adiw	r26, 0x01	; 1
    ae92:	5c 93       	st	X, r21
    ae94:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    ae96:	ac 01       	movw	r20, r24
    ae98:	40 95       	com	r20
    ae9a:	50 95       	com	r21
    ae9c:	24 23       	and	r18, r20
    ae9e:	35 23       	and	r19, r21
    aea0:	13 96       	adiw	r26, 0x03	; 3
    aea2:	3c 93       	st	X, r19
    aea4:	2e 93       	st	-X, r18
    aea6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    aea8:	91 83       	std	Z+1, r25	; 0x01
    aeaa:	80 83       	st	Z, r24
}
    aeac:	0f 90       	pop	r0
    aeae:	df 91       	pop	r29
    aeb0:	cf 91       	pop	r28
    aeb2:	1f 91       	pop	r17
    aeb4:	0f 91       	pop	r16
    aeb6:	08 95       	ret

0000aeb8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    aeb8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    aeba:	fb 01       	movw	r30, r22
    aebc:	2e 2f       	mov	r18, r30
    aebe:	23 1b       	sub	r18, r19
    aec0:	24 17       	cp	r18, r20
    aec2:	28 f4       	brcc	.+10     	; 0xaece <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    aec4:	21 91       	ld	r18, Z+
    aec6:	dc 01       	movw	r26, r24
    aec8:	2d 93       	st	X+, r18
    aeca:	cd 01       	movw	r24, r26
    aecc:	f7 cf       	rjmp	.-18     	; 0xaebc <LBCopyChars+0x4>
	}
}
    aece:	08 95       	ret

0000aed0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    aed0:	af 92       	push	r10
    aed2:	bf 92       	push	r11
    aed4:	cf 92       	push	r12
    aed6:	df 92       	push	r13
    aed8:	ef 92       	push	r14
    aeda:	ff 92       	push	r15
    aedc:	0f 93       	push	r16
    aede:	1f 93       	push	r17
    aee0:	cf 93       	push	r28
    aee2:	df 93       	push	r29
    aee4:	1f 92       	push	r1
    aee6:	cd b7       	in	r28, 0x3d	; 61
    aee8:	de b7       	in	r29, 0x3e	; 62
    aeea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    aeec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    aeee:	c6 2e       	mov	r12, r22
    aef0:	d1 2c       	mov	r13, r1
    aef2:	90 e0       	ldi	r25, 0x00	; 0
    aef4:	5c 01       	movw	r10, r24
    aef6:	a4 1a       	sub	r10, r20
    aef8:	b5 0a       	sbc	r11, r21
    aefa:	80 2f       	mov	r24, r16
    aefc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    aefe:	82 17       	cp	r24, r18
    af00:	60 f4       	brcc	.+24     	; 0xaf1a <LBPrintStr+0x4a>
    af02:	c5 01       	movw	r24, r10
    af04:	80 0f       	add	r24, r16
    af06:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    af08:	f8 01       	movw	r30, r16
    af0a:	41 91       	ld	r20, Z+
    af0c:	8f 01       	movw	r16, r30
    af0e:	b6 01       	movw	r22, r12
    af10:	29 83       	std	Y+1, r18	; 0x01
    af12:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
    af16:	29 81       	ldd	r18, Y+1	; 0x01
    af18:	f0 cf       	rjmp	.-32     	; 0xaefa <LBPrintStr+0x2a>
	}
}
    af1a:	0f 90       	pop	r0
    af1c:	df 91       	pop	r29
    af1e:	cf 91       	pop	r28
    af20:	1f 91       	pop	r17
    af22:	0f 91       	pop	r16
    af24:	ff 90       	pop	r15
    af26:	ef 90       	pop	r14
    af28:	df 90       	pop	r13
    af2a:	cf 90       	pop	r12
    af2c:	bf 90       	pop	r11
    af2e:	af 90       	pop	r10
    af30:	08 95       	ret

0000af32 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    af32:	af 92       	push	r10
    af34:	cf 92       	push	r12
    af36:	ef 92       	push	r14
    af38:	ff 92       	push	r15
    af3a:	0f 93       	push	r16
    af3c:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    af3e:	70 e0       	ldi	r23, 0x00	; 0
    af40:	f1 2c       	mov	r15, r1
    af42:	fb 01       	movw	r30, r22
    af44:	e2 0f       	add	r30, r18
    af46:	f1 1d       	adc	r31, r1
    af48:	ee 16       	cp	r14, r30
    af4a:	ff 06       	cpc	r15, r31
    af4c:	a4 f4       	brge	.+40     	; 0xaf76 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    af4e:	ea 0c       	add	r14, r10
    af50:	f1 1c       	adc	r15, r1
    af52:	6e 15       	cp	r22, r14
    af54:	7f 05       	cpc	r23, r15
    af56:	7c f4       	brge	.+30     	; 0xaf76 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    af58:	28 2f       	mov	r18, r24
    af5a:	30 e0       	ldi	r19, 0x00	; 0
    af5c:	10 e0       	ldi	r17, 0x00	; 0
    af5e:	c9 01       	movw	r24, r18
    af60:	84 0f       	add	r24, r20
    af62:	91 1d       	adc	r25, r1
    af64:	08 17       	cp	r16, r24
    af66:	19 07       	cpc	r17, r25
    af68:	34 f4       	brge	.+12     	; 0xaf76 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    af6a:	0c 0d       	add	r16, r12
    af6c:	11 1d       	adc	r17, r1
    af6e:	81 e0       	ldi	r24, 0x01	; 1
    af70:	20 17       	cp	r18, r16
    af72:	31 07       	cpc	r19, r17
    af74:	0c f0       	brlt	.+2      	; 0xaf78 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    af76:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    af78:	1f 91       	pop	r17
    af7a:	0f 91       	pop	r16
    af7c:	ff 90       	pop	r15
    af7e:	ef 90       	pop	r14
    af80:	cf 90       	pop	r12
    af82:	af 90       	pop	r10
    af84:	08 95       	ret

0000af86 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    af86:	2f 92       	push	r2
    af88:	3f 92       	push	r3
    af8a:	4f 92       	push	r4
    af8c:	5f 92       	push	r5
    af8e:	6f 92       	push	r6
    af90:	7f 92       	push	r7
    af92:	8f 92       	push	r8
    af94:	9f 92       	push	r9
    af96:	af 92       	push	r10
    af98:	bf 92       	push	r11
    af9a:	cf 92       	push	r12
    af9c:	df 92       	push	r13
    af9e:	ef 92       	push	r14
    afa0:	ff 92       	push	r15
    afa2:	0f 93       	push	r16
    afa4:	1f 93       	push	r17
    afa6:	cf 93       	push	r28
    afa8:	df 93       	push	r29
    afaa:	00 d0       	rcall	.+0      	; 0xafac <LBLineIntersect+0x26>
    afac:	00 d0       	rcall	.+0      	; 0xafae <LBLineIntersect+0x28>
    afae:	cd b7       	in	r28, 0x3d	; 61
    afb0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    afb2:	f1 2c       	mov	r15, r1
    afb4:	8a 2c       	mov	r8, r10
    afb6:	91 2c       	mov	r9, r1
    afb8:	8e 18       	sub	r8, r14
    afba:	9f 08       	sbc	r9, r15
    afbc:	a8 2e       	mov	r10, r24
    afbe:	b1 2c       	mov	r11, r1
    afc0:	24 2e       	mov	r2, r20
    afc2:	31 2c       	mov	r3, r1
    afc4:	2a 18       	sub	r2, r10
    afc6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    afc8:	10 e0       	ldi	r17, 0x00	; 0
    afca:	d1 2c       	mov	r13, r1
    afcc:	c0 1a       	sub	r12, r16
    afce:	d1 0a       	sbc	r13, r17
    afd0:	46 2f       	mov	r20, r22
    afd2:	50 e0       	ldi	r21, 0x00	; 0
    afd4:	5c 83       	std	Y+4, r21	; 0x04
    afd6:	4b 83       	std	Y+3, r20	; 0x03
    afd8:	82 2f       	mov	r24, r18
    afda:	90 e0       	ldi	r25, 0x00	; 0
    afdc:	9a 83       	std	Y+2, r25	; 0x02
    afde:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    afe0:	82 9c       	mul	r8, r2
    afe2:	90 01       	movw	r18, r0
    afe4:	83 9c       	mul	r8, r3
    afe6:	30 0d       	add	r19, r0
    afe8:	92 9c       	mul	r9, r2
    afea:	30 0d       	add	r19, r0
    afec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    afee:	ca 01       	movw	r24, r20
    aff0:	e9 81       	ldd	r30, Y+1	; 0x01
    aff2:	fa 81       	ldd	r31, Y+2	; 0x02
    aff4:	8e 1b       	sub	r24, r30
    aff6:	9f 0b       	sbc	r25, r31
    aff8:	c8 9e       	mul	r12, r24
    affa:	b0 01       	movw	r22, r0
    affc:	c9 9e       	mul	r12, r25
    affe:	70 0d       	add	r23, r0
    b000:	d8 9e       	mul	r13, r24
    b002:	70 0d       	add	r23, r0
    b004:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    b006:	62 0f       	add	r22, r18
    b008:	73 1f       	adc	r23, r19
    b00a:	88 27       	eor	r24, r24
    b00c:	77 fd       	sbrc	r23, 7
    b00e:	80 95       	com	r24
    b010:	98 2f       	mov	r25, r24
    b012:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    b016:	2b 01       	movw	r4, r22
    b018:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    b01a:	20 e0       	ldi	r18, 0x00	; 0
    b01c:	30 e0       	ldi	r19, 0x00	; 0
    b01e:	a9 01       	movw	r20, r18
    b020:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    b024:	88 23       	and	r24, r24
    b026:	09 f4       	brne	.+2      	; 0xb02a <LBLineIntersect+0xa4>
    b028:	6c c0       	rjmp	.+216    	; 0xb102 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b02a:	4b 81       	ldd	r20, Y+3	; 0x03
    b02c:	5c 81       	ldd	r21, Y+4	; 0x04
    b02e:	4e 19       	sub	r20, r14
    b030:	5f 09       	sbc	r21, r15
    b032:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b034:	0a 19       	sub	r16, r10
    b036:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b038:	c4 9e       	mul	r12, r20
    b03a:	c0 01       	movw	r24, r0
    b03c:	c5 9e       	mul	r12, r21
    b03e:	90 0d       	add	r25, r0
    b040:	d4 9e       	mul	r13, r20
    b042:	90 0d       	add	r25, r0
    b044:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b046:	80 9e       	mul	r8, r16
    b048:	b0 01       	movw	r22, r0
    b04a:	81 9e       	mul	r8, r17
    b04c:	70 0d       	add	r23, r0
    b04e:	90 9e       	mul	r9, r16
    b050:	70 0d       	add	r23, r0
    b052:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b054:	68 0f       	add	r22, r24
    b056:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    b058:	88 27       	eor	r24, r24
    b05a:	77 fd       	sbrc	r23, 7
    b05c:	80 95       	com	r24
    b05e:	98 2f       	mov	r25, r24
    b060:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    b064:	a3 01       	movw	r20, r6
    b066:	92 01       	movw	r18, r4
    b068:	0e 94 cf 70 	call	0xe19e	; 0xe19e <__divsf3>
    b06c:	4b 01       	movw	r8, r22
    b06e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    b070:	20 e0       	ldi	r18, 0x00	; 0
    b072:	30 e0       	ldi	r19, 0x00	; 0
    b074:	a9 01       	movw	r20, r18
    b076:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    b07a:	87 fd       	sbrc	r24, 7
    b07c:	42 c0       	rjmp	.+132    	; 0xb102 <LBLineIntersect+0x17c>
    b07e:	20 e0       	ldi	r18, 0x00	; 0
    b080:	30 e0       	ldi	r19, 0x00	; 0
    b082:	40 e8       	ldi	r20, 0x80	; 128
    b084:	5f e3       	ldi	r21, 0x3F	; 63
    b086:	c5 01       	movw	r24, r10
    b088:	b4 01       	movw	r22, r8
    b08a:	0e 94 1a 72 	call	0xe434	; 0xe434 <__gesf2>
    b08e:	18 16       	cp	r1, r24
    b090:	c4 f1       	brlt	.+112    	; 0xb102 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b092:	2e 9c       	mul	r2, r14
    b094:	b0 01       	movw	r22, r0
    b096:	2f 9c       	mul	r2, r15
    b098:	70 0d       	add	r23, r0
    b09a:	3e 9c       	mul	r3, r14
    b09c:	70 0d       	add	r23, r0
    b09e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    b0a0:	29 81       	ldd	r18, Y+1	; 0x01
    b0a2:	3a 81       	ldd	r19, Y+2	; 0x02
    b0a4:	8b 81       	ldd	r24, Y+3	; 0x03
    b0a6:	9c 81       	ldd	r25, Y+4	; 0x04
    b0a8:	28 1b       	sub	r18, r24
    b0aa:	39 0b       	sbc	r19, r25
    b0ac:	20 9f       	mul	r18, r16
    b0ae:	c0 01       	movw	r24, r0
    b0b0:	21 9f       	mul	r18, r17
    b0b2:	90 0d       	add	r25, r0
    b0b4:	30 9f       	mul	r19, r16
    b0b6:	90 0d       	add	r25, r0
    b0b8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b0ba:	68 0f       	add	r22, r24
    b0bc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    b0be:	88 27       	eor	r24, r24
    b0c0:	77 fd       	sbrc	r23, 7
    b0c2:	80 95       	com	r24
    b0c4:	98 2f       	mov	r25, r24
    b0c6:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    b0ca:	a3 01       	movw	r20, r6
    b0cc:	92 01       	movw	r18, r4
    b0ce:	0e 94 cf 70 	call	0xe19e	; 0xe19e <__divsf3>
    b0d2:	6b 01       	movw	r12, r22
    b0d4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    b0d6:	20 e0       	ldi	r18, 0x00	; 0
    b0d8:	30 e0       	ldi	r19, 0x00	; 0
    b0da:	a9 01       	movw	r20, r18
    b0dc:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    b0e0:	87 fd       	sbrc	r24, 7
    b0e2:	0f c0       	rjmp	.+30     	; 0xb102 <LBLineIntersect+0x17c>
    b0e4:	11 e0       	ldi	r17, 0x01	; 1
    b0e6:	20 e0       	ldi	r18, 0x00	; 0
    b0e8:	30 e0       	ldi	r19, 0x00	; 0
    b0ea:	40 e8       	ldi	r20, 0x80	; 128
    b0ec:	5f e3       	ldi	r21, 0x3F	; 63
    b0ee:	c7 01       	movw	r24, r14
    b0f0:	b6 01       	movw	r22, r12
    b0f2:	0e 94 1a 72 	call	0xe434	; 0xe434 <__gesf2>
    b0f6:	18 16       	cp	r1, r24
    b0f8:	0c f0       	brlt	.+2      	; 0xb0fc <LBLineIntersect+0x176>
    b0fa:	10 e0       	ldi	r17, 0x00	; 0
    b0fc:	81 e0       	ldi	r24, 0x01	; 1
    b0fe:	81 27       	eor	r24, r17
    b100:	01 c0       	rjmp	.+2      	; 0xb104 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    b102:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    b104:	0f 90       	pop	r0
    b106:	0f 90       	pop	r0
    b108:	0f 90       	pop	r0
    b10a:	0f 90       	pop	r0
    b10c:	df 91       	pop	r29
    b10e:	cf 91       	pop	r28
    b110:	1f 91       	pop	r17
    b112:	0f 91       	pop	r16
    b114:	ff 90       	pop	r15
    b116:	ef 90       	pop	r14
    b118:	df 90       	pop	r13
    b11a:	cf 90       	pop	r12
    b11c:	bf 90       	pop	r11
    b11e:	af 90       	pop	r10
    b120:	9f 90       	pop	r9
    b122:	8f 90       	pop	r8
    b124:	7f 90       	pop	r7
    b126:	6f 90       	pop	r6
    b128:	5f 90       	pop	r5
    b12a:	4f 90       	pop	r4
    b12c:	3f 90       	pop	r3
    b12e:	2f 90       	pop	r2
    b130:	08 95       	ret

0000b132 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    b132:	0f 93       	push	r16
    b134:	1f 93       	push	r17
    b136:	cf 93       	push	r28
    b138:	df 93       	push	r29
    b13a:	8c 01       	movw	r16, r24
    b13c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    b13e:	80 91 36 0b 	lds	r24, 0x0B36
    b142:	90 91 37 0b 	lds	r25, 0x0B37
    b146:	89 2b       	or	r24, r25
    b148:	31 f4       	brne	.+12     	; 0xb156 <LBRandom+0x24>
    b14a:	0e 94 e7 48 	call	0x91ce	; 0x91ce <GetRandomSeed>
    b14e:	90 93 37 0b 	sts	0x0B37, r25
    b152:	80 93 36 0b 	sts	0x0B36, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    b156:	90 91 35 0b 	lds	r25, 0x0B35
    b15a:	20 91 36 0b 	lds	r18, 0x0B36
    b15e:	30 91 37 0b 	lds	r19, 0x0B37
    b162:	09 2e       	mov	r0, r25
    b164:	02 c0       	rjmp	.+4      	; 0xb16a <LBRandom+0x38>
    b166:	36 95       	lsr	r19
    b168:	27 95       	ror	r18
    b16a:	0a 94       	dec	r0
    b16c:	e2 f7       	brpl	.-8      	; 0xb166 <LBRandom+0x34>
	unsigned int delta = to - from;
    b16e:	be 01       	movw	r22, r28
    b170:	60 1b       	sub	r22, r16
    b172:	71 0b       	sbc	r23, r17

	shift_count++;
    b174:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    b176:	90 31       	cpi	r25, 0x10	; 16
    b178:	18 f4       	brcc	.+6      	; 0xb180 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    b17a:	90 93 35 0b 	sts	0x0B35, r25
    b17e:	02 c0       	rjmp	.+4      	; 0xb184 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    b180:	10 92 35 0b 	sts	0x0B35, r1

	return from + ((delta + shifted) % delta);
    b184:	cb 01       	movw	r24, r22
    b186:	82 0f       	add	r24, r18
    b188:	93 1f       	adc	r25, r19
    b18a:	0e 94 3e 70 	call	0xe07c	; 0xe07c <__udivmodhi4>
}
    b18e:	80 0f       	add	r24, r16
    b190:	91 1f       	adc	r25, r17
    b192:	df 91       	pop	r29
    b194:	cf 91       	pop	r28
    b196:	1f 91       	pop	r17
    b198:	0f 91       	pop	r16
    b19a:	08 95       	ret

0000b19c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    b19c:	cf 93       	push	r28
    b19e:	df 93       	push	r29
    b1a0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    b1a2:	c0 e0       	ldi	r28, 0x00	; 0
    b1a4:	cd 17       	cp	r28, r29
    b1a6:	31 f0       	breq	.+12     	; 0xb1b4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    b1a8:	8f ef       	ldi	r24, 0xFF	; 255
    b1aa:	9f ef       	ldi	r25, 0xFF	; 255
    b1ac:	0e 94 b3 48 	call	0x9166	; 0x9166 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    b1b0:	cf 5f       	subi	r28, 0xFF	; 255
    b1b2:	f8 cf       	rjmp	.-16     	; 0xb1a4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    b1b4:	df 91       	pop	r29
    b1b6:	cf 91       	pop	r28
    b1b8:	08 95       	ret

0000b1ba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    b1ba:	21 e9       	ldi	r18, 0x91	; 145
    b1bc:	30 e0       	ldi	r19, 0x00	; 0
    b1be:	fc 01       	movw	r30, r24
    b1c0:	21 93       	st	Z+, r18
    b1c2:	31 93       	st	Z+, r19
    b1c4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    b1c6:	4e e1       	ldi	r20, 0x1E	; 30
    b1c8:	50 e0       	ldi	r21, 0x00	; 0
    b1ca:	64 ee       	ldi	r22, 0xE4	; 228
    b1cc:	70 e0       	ldi	r23, 0x00	; 0
    b1ce:	0c 94 81 72 	jmp	0xe502	; 0xe502 <memcpy_P>

0000b1d2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    b1d2:	20 e9       	ldi	r18, 0x90	; 144
    b1d4:	30 e0       	ldi	r19, 0x00	; 0
    b1d6:	fc 01       	movw	r30, r24
    b1d8:	21 93       	st	Z+, r18
    b1da:	31 93       	st	Z+, r19
    b1dc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    b1de:	4e e1       	ldi	r20, 0x1E	; 30
    b1e0:	50 e0       	ldi	r21, 0x00	; 0
    b1e2:	62 e0       	ldi	r22, 0x02	; 2
    b1e4:	71 e0       	ldi	r23, 0x01	; 1
    b1e6:	0c 94 81 72 	jmp	0xe502	; 0xe502 <memcpy_P>

0000b1ea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    b1ea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    b1ec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b1ee:	14 86       	std	Z+12, r1	; 0x0c
    b1f0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    b1f2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    b1f4:	73 e0       	ldi	r23, 0x03	; 3
    b1f6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b1f8:	65 e0       	ldi	r22, 0x05	; 5
    b1fa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    b1fc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b1fe:	46 e5       	ldi	r20, 0x56	; 86
    b200:	58 e8       	ldi	r21, 0x88	; 136
    b202:	56 83       	std	Z+6, r21	; 0x06
    b204:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b206:	23 e5       	ldi	r18, 0x53	; 83
    b208:	38 e8       	ldi	r19, 0x88	; 136
    b20a:	30 87       	std	Z+8, r19	; 0x08
    b20c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b20e:	80 e5       	ldi	r24, 0x50	; 80
    b210:	98 e8       	ldi	r25, 0x88	; 136
    b212:	92 87       	std	Z+10, r25	; 0x0a
    b214:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    b216:	10 8e       	std	Z+24, r1	; 0x18
    b218:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    b21a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    b21c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    b21e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    b220:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    b222:	52 8b       	std	Z+18, r21	; 0x12
    b224:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    b226:	34 8b       	std	Z+20, r19	; 0x14
    b228:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    b22a:	96 8b       	std	Z+22, r25	; 0x16
    b22c:	85 8b       	std	Z+21, r24	; 0x15
    b22e:	08 95       	ret

0000b230 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    b230:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    b232:	88 e7       	ldi	r24, 0x78	; 120
    b234:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    b236:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    b238:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    b23a:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    b23c:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    b23e:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    b240:	84 e0       	ldi	r24, 0x04	; 4
    b242:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    b244:	66 23       	and	r22, r22
    b246:	11 f0       	breq	.+4      	; 0xb24c <init_shot_state+0x1c>
    b248:	85 e0       	ldi	r24, 0x05	; 5
    b24a:	01 c0       	rjmp	.+2      	; 0xb24e <init_shot_state+0x1e>
    b24c:	81 e0       	ldi	r24, 0x01	; 1
    b24e:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    b250:	80 e0       	ldi	r24, 0x00	; 0
    b252:	90 e0       	ldi	r25, 0x00	; 0
    b254:	a0 e7       	ldi	r26, 0x70	; 112
    b256:	b3 e4       	ldi	r27, 0x43	; 67
    b258:	83 83       	std	Z+3, r24	; 0x03
    b25a:	94 83       	std	Z+4, r25	; 0x04
    b25c:	a5 83       	std	Z+5, r26	; 0x05
    b25e:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    b260:	17 82       	std	Z+7, r1	; 0x07
    b262:	10 86       	std	Z+8, r1	; 0x08
    b264:	11 86       	std	Z+9, r1	; 0x09
    b266:	12 86       	std	Z+10, r1	; 0x0a
    b268:	08 95       	ret

0000b26a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    b26a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    b26c:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    b26e:	82 e0       	ldi	r24, 0x02	; 2
    b270:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b272:	85 e0       	ldi	r24, 0x05	; 5
    b274:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    b276:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    b278:	66 23       	and	r22, r22
    b27a:	19 f0       	breq	.+6      	; 0xb282 <set_shot_animations+0x18>
    b27c:	89 e6       	ldi	r24, 0x69	; 105
    b27e:	94 e4       	ldi	r25, 0x44	; 68
    b280:	02 c0       	rjmp	.+4      	; 0xb286 <set_shot_animations+0x1c>
    b282:	8c e6       	ldi	r24, 0x6C	; 108
    b284:	94 e4       	ldi	r25, 0x44	; 68
    b286:	95 8b       	std	Z+21, r25	; 0x15
    b288:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    b28a:	66 23       	and	r22, r22
    b28c:	19 f0       	breq	.+6      	; 0xb294 <set_shot_animations+0x2a>
    b28e:	86 e6       	ldi	r24, 0x66	; 102
    b290:	94 e4       	ldi	r25, 0x44	; 68
    b292:	02 c0       	rjmp	.+4      	; 0xb298 <set_shot_animations+0x2e>
    b294:	8c e6       	ldi	r24, 0x6C	; 108
    b296:	94 e4       	ldi	r25, 0x44	; 68
    b298:	97 8b       	std	Z+23, r25	; 0x17
    b29a:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    b29c:	82 e0       	ldi	r24, 0x02	; 2
    b29e:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b2a0:	85 e0       	ldi	r24, 0x05	; 5
    b2a2:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    b2a4:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    b2a6:	66 23       	and	r22, r22
    b2a8:	19 f0       	breq	.+6      	; 0xb2b0 <set_shot_animations+0x46>
    b2aa:	83 e6       	ldi	r24, 0x63	; 99
    b2ac:	94 e4       	ldi	r25, 0x44	; 68
    b2ae:	02 c0       	rjmp	.+4      	; 0xb2b4 <set_shot_animations+0x4a>
    b2b0:	8c e6       	ldi	r24, 0x6C	; 108
    b2b2:	94 e4       	ldi	r25, 0x44	; 68
    b2b4:	97 8f       	std	Z+31, r25	; 0x1f
    b2b6:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    b2b8:	66 23       	and	r22, r22
    b2ba:	19 f0       	breq	.+6      	; 0xb2c2 <set_shot_animations+0x58>
    b2bc:	80 e6       	ldi	r24, 0x60	; 96
    b2be:	94 e4       	ldi	r25, 0x44	; 68
    b2c0:	02 c0       	rjmp	.+4      	; 0xb2c6 <set_shot_animations+0x5c>
    b2c2:	8c e6       	ldi	r24, 0x6C	; 108
    b2c4:	94 e4       	ldi	r25, 0x44	; 68
    b2c6:	91 a3       	std	Z+33, r25	; 0x21
    b2c8:	80 a3       	std	Z+32, r24	; 0x20
    b2ca:	08 95       	ret

0000b2cc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    b2cc:	0f 93       	push	r16
    b2ce:	1f 93       	push	r17
    b2d0:	cf 93       	push	r28
    b2d2:	df 93       	push	r29
    b2d4:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    b2d6:	8a e5       	ldi	r24, 0x5A	; 90
    b2d8:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    b2da:	88 e7       	ldi	r24, 0x78	; 120
    b2dc:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    b2de:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    b2e0:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    b2e2:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    b2e4:	18 82       	st	Y, r1
	p->shared.speed = 0;
    b2e6:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    b2e8:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    b2ea:	82 e3       	ldi	r24, 0x32	; 50
    b2ec:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    b2ee:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    b2f0:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    b2f2:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    b2f4:	fe 01       	movw	r30, r28
    b2f6:	e0 5b       	subi	r30, 0xB0	; 176
    b2f8:	ff 4f       	sbci	r31, 0xFF	; 255
    b2fa:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    b2fc:	31 96       	adiw	r30, 0x01	; 1
    b2fe:	91 e0       	ldi	r25, 0x01	; 1
    b300:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    b302:	31 96       	adiw	r30, 0x01	; 1
    b304:	85 e0       	ldi	r24, 0x05	; 5
    b306:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    b308:	31 96       	adiw	r30, 0x01	; 1
    b30a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    b30c:	31 96       	adiw	r30, 0x01	; 1
    b30e:	71 83       	std	Z+1, r23	; 0x01
    b310:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    b312:	36 96       	adiw	r30, 0x06	; 6
    b314:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    b316:	31 96       	adiw	r30, 0x01	; 1
    b318:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    b31a:	31 96       	adiw	r30, 0x01	; 1
    b31c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    b31e:	31 96       	adiw	r30, 0x01	; 1
    b320:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    b322:	31 96       	adiw	r30, 0x01	; 1
    b324:	51 83       	std	Z+1, r21	; 0x01
    b326:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    b328:	36 96       	adiw	r30, 0x06	; 6
    b32a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    b32c:	31 96       	adiw	r30, 0x01	; 1
    b32e:	93 e0       	ldi	r25, 0x03	; 3
    b330:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    b332:	31 96       	adiw	r30, 0x01	; 1
    b334:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    b336:	31 96       	adiw	r30, 0x01	; 1
    b338:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    b33a:	31 96       	adiw	r30, 0x01	; 1
    b33c:	8b e7       	ldi	r24, 0x7B	; 123
    b33e:	94 e4       	ldi	r25, 0x44	; 68
    b340:	91 83       	std	Z+1, r25	; 0x01
    b342:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    b344:	32 96       	adiw	r30, 0x02	; 2
    b346:	85 e7       	ldi	r24, 0x75	; 117
    b348:	94 e4       	ldi	r25, 0x44	; 68
    b34a:	91 83       	std	Z+1, r25	; 0x01
    b34c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    b34e:	32 96       	adiw	r30, 0x02	; 2
    b350:	8f e6       	ldi	r24, 0x6F	; 111
    b352:	94 e4       	ldi	r25, 0x44	; 68
    b354:	91 83       	std	Z+1, r25	; 0x01
    b356:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    b358:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    b35a:	8e 01       	movw	r16, r28
    b35c:	04 5d       	subi	r16, 0xD4	; 212
    b35e:	1f 4f       	sbci	r17, 0xFF	; 255
    b360:	60 e0       	ldi	r22, 0x00	; 0
    b362:	c8 01       	movw	r24, r16
    b364:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    b368:	60 e0       	ldi	r22, 0x00	; 0
    b36a:	c8 01       	movw	r24, r16
    b36c:	0e 94 35 59 	call	0xb26a	; 0xb26a <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    b370:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    b372:	1d 8e       	std	Y+29, r1	; 0x1d
    b374:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    b376:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    b378:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    b37a:	1c a2       	std	Y+36, r1	; 0x24
    b37c:	1d a2       	std	Y+37, r1	; 0x25
    b37e:	1e a2       	std	Y+38, r1	; 0x26
    b380:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    b382:	18 a6       	std	Y+40, r1	; 0x28
    b384:	19 a6       	std	Y+41, r1	; 0x29
    b386:	1a a6       	std	Y+42, r1	; 0x2a
    b388:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    b38a:	1f 8e       	std	Y+31, r1	; 0x1f
    b38c:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    b38e:	19 a2       	std	Y+33, r1	; 0x21
    b390:	18 a2       	std	Y+32, r1	; 0x20
}
    b392:	df 91       	pop	r29
    b394:	cf 91       	pop	r28
    b396:	1f 91       	pop	r17
    b398:	0f 91       	pop	r16
    b39a:	08 95       	ret

0000b39c <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    b39c:	fc 01       	movw	r30, r24
    b39e:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    b3a0:	60 e0       	ldi	r22, 0x00	; 0
    b3a2:	8c 96       	adiw	r24, 0x2c	; 44
    b3a4:	0c 94 18 59 	jmp	0xb230	; 0xb230 <init_shot_state>

0000b3a8 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    b3a8:	e8 e0       	ldi	r30, 0x08	; 8
    b3aa:	fc e0       	ldi	r31, 0x0C	; 12
    b3ac:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    b3ae:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    b3b0:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    b3b2:	4f e9       	ldi	r20, 0x9F	; 159
    b3b4:	54 e4       	ldi	r21, 0x44	; 68
    b3b6:	6b ea       	ldi	r22, 0xAB	; 171
    b3b8:	74 e4       	ldi	r23, 0x44	; 68
    b3ba:	85 e2       	ldi	r24, 0x25	; 37
    b3bc:	9c e0       	ldi	r25, 0x0C	; 12
    b3be:	0e 94 66 59 	call	0xb2cc	; 0xb2cc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    b3c2:	47 e8       	ldi	r20, 0x87	; 135
    b3c4:	54 e4       	ldi	r21, 0x44	; 68
    b3c6:	63 e9       	ldi	r22, 0x93	; 147
    b3c8:	74 e4       	ldi	r23, 0x44	; 68
    b3ca:	89 e8       	ldi	r24, 0x89	; 137
    b3cc:	9f e0       	ldi	r25, 0x0F	; 15
    b3ce:	0c 94 66 59 	jmp	0xb2cc	; 0xb2cc <init_player>

0000b3d2 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    b3d2:	cf 93       	push	r28
    b3d4:	df 93       	push	r29
    b3d6:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    b3d8:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    b3da:	6a 89       	ldd	r22, Y+18	; 0x12
    b3dc:	70 e0       	ldi	r23, 0x00	; 0
    b3de:	80 e0       	ldi	r24, 0x00	; 0
    b3e0:	90 e0       	ldi	r25, 0x00	; 0
    b3e2:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <__floatunsisf>
    b3e6:	6b 83       	std	Y+3, r22	; 0x03
    b3e8:	7c 83       	std	Y+4, r23	; 0x04
    b3ea:	8d 83       	std	Y+5, r24	; 0x05
    b3ec:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    b3ee:	6b 89       	ldd	r22, Y+19	; 0x13
    b3f0:	70 e0       	ldi	r23, 0x00	; 0
    b3f2:	80 e0       	ldi	r24, 0x00	; 0
    b3f4:	90 e0       	ldi	r25, 0x00	; 0
    b3f6:	0e 94 68 71 	call	0xe2d0	; 0xe2d0 <__floatunsisf>
    b3fa:	6f 83       	std	Y+7, r22	; 0x07
    b3fc:	78 87       	std	Y+8, r23	; 0x08
    b3fe:	89 87       	std	Y+9, r24	; 0x09
    b400:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    b402:	18 82       	st	Y, r1
	player->shared.speed = 0;
    b404:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    b406:	1a 82       	std	Y+2, r1	; 0x02
	
}
    b408:	df 91       	pop	r29
    b40a:	cf 91       	pop	r28
    b40c:	08 95       	ret

0000b40e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    b40e:	cf 93       	push	r28
    b410:	df 93       	push	r29
    b412:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    b414:	bc 01       	movw	r22, r24
    b416:	88 81       	ld	r24, Y
    b418:	99 81       	ldd	r25, Y+1	; 0x01
    b41a:	0e 94 05 4a 	call	0x940a	; 0x940a <EepromReadBlock>
	if (status == 0x03)
    b41e:	83 30       	cpi	r24, 0x03	; 3
    b420:	29 f4       	brne	.+10     	; 0xb42c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    b422:	ce 01       	movw	r24, r28
	}
}
    b424:	df 91       	pop	r29
    b426:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    b428:	0c 94 98 49 	jmp	0x9330	; 0x9330 <EepromWriteBlock>
	}
}
    b42c:	df 91       	pop	r29
    b42e:	cf 91       	pop	r28
    b430:	08 95       	ret

0000b432 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    b432:	61 e0       	ldi	r22, 0x01	; 1
    b434:	83 e0       	ldi	r24, 0x03	; 3
    b436:	0e 94 b9 56 	call	0xad72	; 0xad72 <FadeOut>
	ClearVram();
    b43a:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b43e:	60 e0       	ldi	r22, 0x00	; 0
    b440:	83 e0       	ldi	r24, 0x03	; 3
    b442:	0c 94 ad 56 	jmp	0xad5a	; 0xad5a <FadeIn>

0000b446 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    b446:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    b448:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    b44a:	40 e0       	ldi	r20, 0x00	; 0
    b44c:	67 eb       	ldi	r22, 0xB7	; 183
    b44e:	74 e4       	ldi	r23, 0x44	; 68
    b450:	8c 2f       	mov	r24, r28
    b452:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
    b456:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    b458:	ca 30       	cpi	r28, 0x0A	; 10
    b45a:	b9 f7       	brne	.-18     	; 0xb44a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    b45c:	cf 91       	pop	r28
    b45e:	08 95       	ret

0000b460 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    b460:	cf 92       	push	r12
    b462:	df 92       	push	r13
    b464:	ff 92       	push	r15
    b466:	0f 93       	push	r16
    b468:	1f 93       	push	r17
    b46a:	cf 93       	push	r28
    b46c:	df 93       	push	r29
    b46e:	cd b7       	in	r28, 0x3d	; 61
    b470:	de b7       	in	r29, 0x3e	; 62
    b472:	2a 97       	sbiw	r28, 0x0a	; 10
    b474:	0f b6       	in	r0, 0x3f	; 63
    b476:	f8 94       	cli
    b478:	de bf       	out	0x3e, r29	; 62
    b47a:	0f be       	out	0x3f, r0	; 63
    b47c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    b47e:	90 91 34 0c 	lds	r25, 0x0C34
    b482:	80 91 98 0f 	lds	r24, 0x0F98
    b486:	98 17       	cp	r25, r24
    b488:	28 f4       	brcc	.+10     	; 0xb494 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    b48a:	e5 e2       	ldi	r30, 0x25	; 37
    b48c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    b48e:	a9 e8       	ldi	r26, 0x89	; 137
    b490:	bf e0       	ldi	r27, 0x0F	; 15
    b492:	04 c0       	rjmp	.+8      	; 0xb49c <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    b494:	e9 e8       	ldi	r30, 0x89	; 137
    b496:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    b498:	a5 e2       	ldi	r26, 0x25	; 37
    b49a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    b49c:	1b 96       	adiw	r26, 0x0b	; 11
    b49e:	8c 91       	ld	r24, X
    b4a0:	1b 97       	sbiw	r26, 0x0b	; 11
    b4a2:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    b4a4:	83 85       	ldd	r24, Z+11	; 0x0b
    b4a6:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    b4a8:	1f 96       	adiw	r26, 0x0f	; 15
    b4aa:	8c 91       	ld	r24, X
    b4ac:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    b4ae:	97 85       	ldd	r25, Z+15	; 0x0f
    b4b0:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = 0;
    b4b2:	1d 82       	std	Y+5, r1	; 0x05
	save_delta = p_win->score - p_lose->score;
    b4b4:	f8 2e       	mov	r15, r24
    b4b6:	f9 1a       	sub	r15, r25
    b4b8:	00 e0       	ldi	r16, 0x00	; 0
    b4ba:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    b4bc:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    b4be:	81 11       	cpse	r24, r1
    b4c0:	08 c0       	rjmp	.+16     	; 0xb4d2 <save_score+0x72>
    b4c2:	f8 01       	movw	r30, r16
    b4c4:	ef 53       	subi	r30, 0x3F	; 63
    b4c6:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    b4c8:	94 81       	ldd	r25, Z+4	; 0x04
    b4ca:	25 81       	ldd	r18, Z+5	; 0x05
    b4cc:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    b4ce:	9f 15       	cp	r25, r15
    b4d0:	d0 f4       	brcc	.+52     	; 0xb506 <save_score+0xa6>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    b4d2:	45 e0       	ldi	r20, 0x05	; 5
    b4d4:	c8 01       	movw	r24, r16
    b4d6:	8d 53       	subi	r24, 0x3D	; 61
    b4d8:	94 4f       	sbci	r25, 0xF4	; 244
    b4da:	6c 01       	movw	r12, r24
    b4dc:	bc 01       	movw	r22, r24
    b4de:	ce 01       	movw	r24, r28
    b4e0:	06 96       	adiw	r24, 0x06	; 6
    b4e2:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    b4e6:	45 e0       	ldi	r20, 0x05	; 5
    b4e8:	be 01       	movw	r22, r28
    b4ea:	6f 5f       	subi	r22, 0xFF	; 255
    b4ec:	7f 4f       	sbci	r23, 0xFF	; 255
    b4ee:	c6 01       	movw	r24, r12
    b4f0:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    b4f4:	45 e0       	ldi	r20, 0x05	; 5
    b4f6:	be 01       	movw	r22, r28
    b4f8:	6a 5f       	subi	r22, 0xFA	; 250
    b4fa:	7f 4f       	sbci	r23, 0xFF	; 255
    b4fc:	ce 01       	movw	r24, r28
    b4fe:	01 96       	adiw	r24, 0x01	; 1
    b500:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
				saved = 1;
    b504:	81 e0       	ldi	r24, 0x01	; 1
    b506:	0c 5f       	subi	r16, 0xFC	; 252
    b508:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    b50a:	0c 31       	cpi	r16, 0x1C	; 28
    b50c:	11 05       	cpc	r17, r1
    b50e:	b9 f6       	brne	.-82     	; 0xb4be <save_score+0x5e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b510:	81 ec       	ldi	r24, 0xC1	; 193
    b512:	9b e0       	ldi	r25, 0x0B	; 11
    b514:	0e 94 98 49 	call	0x9330	; 0x9330 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    b518:	2a 96       	adiw	r28, 0x0a	; 10
    b51a:	0f b6       	in	r0, 0x3f	; 63
    b51c:	f8 94       	cli
    b51e:	de bf       	out	0x3e, r29	; 62
    b520:	0f be       	out	0x3f, r0	; 63
    b522:	cd bf       	out	0x3d, r28	; 61
    b524:	df 91       	pop	r29
    b526:	cf 91       	pop	r28
    b528:	1f 91       	pop	r17
    b52a:	0f 91       	pop	r16
    b52c:	ff 90       	pop	r15
    b52e:	df 90       	pop	r13
    b530:	cf 90       	pop	r12
    b532:	08 95       	ret

0000b534 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    b534:	0f 93       	push	r16
    b536:	1f 93       	push	r17
    b538:	cf 93       	push	r28
    b53a:	df 93       	push	r29
    b53c:	8c 01       	movw	r16, r24
    b53e:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    b540:	88 81       	ld	r24, Y
    b542:	81 30       	cpi	r24, 0x01	; 1
    b544:	69 f1       	breq	.+90     	; 0xb5a0 <position_shot+0x6c>
    b546:	98 f0       	brcs	.+38     	; 0xb56e <position_shot+0x3a>
    b548:	82 30       	cpi	r24, 0x02	; 2
    b54a:	f1 f1       	breq	.+124    	; 0xb5c8 <position_shot+0x94>
    b54c:	83 30       	cpi	r24, 0x03	; 3
    b54e:	09 f0       	breq	.+2      	; 0xb552 <position_shot+0x1e>
    b550:	59 c0       	rjmp	.+178    	; 0xb604 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    b552:	f8 01       	movw	r30, r16
    b554:	83 81       	ldd	r24, Z+3	; 0x03
    b556:	94 81       	ldd	r25, Z+4	; 0x04
    b558:	a5 81       	ldd	r26, Z+5	; 0x05
    b55a:	b6 81       	ldd	r27, Z+6	; 0x06
    b55c:	8b 83       	std	Y+3, r24	; 0x03
    b55e:	9c 83       	std	Y+4, r25	; 0x04
    b560:	ad 83       	std	Y+5, r26	; 0x05
    b562:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    b564:	20 e0       	ldi	r18, 0x00	; 0
    b566:	30 e0       	ldi	r19, 0x00	; 0
    b568:	40 e8       	ldi	r20, 0x80	; 128
    b56a:	50 e4       	ldi	r21, 0x40	; 64
    b56c:	41 c0       	rjmp	.+130    	; 0xb5f0 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    b56e:	20 e0       	ldi	r18, 0x00	; 0
    b570:	30 e0       	ldi	r19, 0x00	; 0
    b572:	40 e8       	ldi	r20, 0x80	; 128
    b574:	50 e4       	ldi	r21, 0x40	; 64
    b576:	f8 01       	movw	r30, r16
    b578:	63 81       	ldd	r22, Z+3	; 0x03
    b57a:	74 81       	ldd	r23, Z+4	; 0x04
    b57c:	85 81       	ldd	r24, Z+5	; 0x05
    b57e:	96 81       	ldd	r25, Z+6	; 0x06
    b580:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    b584:	6b 83       	std	Y+3, r22	; 0x03
    b586:	7c 83       	std	Y+4, r23	; 0x04
    b588:	8d 83       	std	Y+5, r24	; 0x05
    b58a:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    b58c:	f8 01       	movw	r30, r16
    b58e:	87 81       	ldd	r24, Z+7	; 0x07
    b590:	90 85       	ldd	r25, Z+8	; 0x08
    b592:	a1 85       	ldd	r26, Z+9	; 0x09
    b594:	b2 85       	ldd	r27, Z+10	; 0x0a
    b596:	8f 83       	std	Y+7, r24	; 0x07
    b598:	98 87       	std	Y+8, r25	; 0x08
    b59a:	a9 87       	std	Y+9, r26	; 0x09
    b59c:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    b59e:	32 c0       	rjmp	.+100    	; 0xb604 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    b5a0:	20 e0       	ldi	r18, 0x00	; 0
    b5a2:	30 e0       	ldi	r19, 0x00	; 0
    b5a4:	40 e0       	ldi	r20, 0x00	; 0
    b5a6:	51 e4       	ldi	r21, 0x41	; 65
    b5a8:	f8 01       	movw	r30, r16
    b5aa:	63 81       	ldd	r22, Z+3	; 0x03
    b5ac:	74 81       	ldd	r23, Z+4	; 0x04
    b5ae:	85 81       	ldd	r24, Z+5	; 0x05
    b5b0:	96 81       	ldd	r25, Z+6	; 0x06
    b5b2:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    b5b6:	6b 83       	std	Y+3, r22	; 0x03
    b5b8:	7c 83       	std	Y+4, r23	; 0x04
    b5ba:	8d 83       	std	Y+5, r24	; 0x05
    b5bc:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    b5be:	20 e0       	ldi	r18, 0x00	; 0
    b5c0:	30 e0       	ldi	r19, 0x00	; 0
    b5c2:	40 e8       	ldi	r20, 0x80	; 128
    b5c4:	50 e4       	ldi	r21, 0x40	; 64
    b5c6:	13 c0       	rjmp	.+38     	; 0xb5ee <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    b5c8:	20 e0       	ldi	r18, 0x00	; 0
    b5ca:	30 e0       	ldi	r19, 0x00	; 0
    b5cc:	40 e8       	ldi	r20, 0x80	; 128
    b5ce:	50 e4       	ldi	r21, 0x40	; 64
    b5d0:	f8 01       	movw	r30, r16
    b5d2:	63 81       	ldd	r22, Z+3	; 0x03
    b5d4:	74 81       	ldd	r23, Z+4	; 0x04
    b5d6:	85 81       	ldd	r24, Z+5	; 0x05
    b5d8:	96 81       	ldd	r25, Z+6	; 0x06
    b5da:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    b5de:	6b 83       	std	Y+3, r22	; 0x03
    b5e0:	7c 83       	std	Y+4, r23	; 0x04
    b5e2:	8d 83       	std	Y+5, r24	; 0x05
    b5e4:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    b5e6:	20 e0       	ldi	r18, 0x00	; 0
    b5e8:	30 e0       	ldi	r19, 0x00	; 0
    b5ea:	40 e0       	ldi	r20, 0x00	; 0
    b5ec:	51 e4       	ldi	r21, 0x41	; 65
    b5ee:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    b5f0:	67 81       	ldd	r22, Z+7	; 0x07
    b5f2:	70 85       	ldd	r23, Z+8	; 0x08
    b5f4:	81 85       	ldd	r24, Z+9	; 0x09
    b5f6:	92 85       	ldd	r25, Z+10	; 0x0a
    b5f8:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    b5fc:	6f 83       	std	Y+7, r22	; 0x07
    b5fe:	78 87       	std	Y+8, r23	; 0x08
    b600:	89 87       	std	Y+9, r24	; 0x09
    b602:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    b604:	df 91       	pop	r29
    b606:	cf 91       	pop	r28
    b608:	1f 91       	pop	r17
    b60a:	0f 91       	pop	r16
    b60c:	08 95       	ret

0000b60e <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    b60e:	0f 93       	push	r16
    b610:	1f 93       	push	r17
    b612:	cf 93       	push	r28
    b614:	df 93       	push	r29
    b616:	8c 01       	movw	r16, r24
    b618:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    b61a:	ac 01       	movw	r20, r24
    b61c:	44 5f       	subi	r20, 0xF4	; 244
    b61e:	5f 4f       	sbci	r21, 0xFF	; 255
    b620:	23 e0       	ldi	r18, 0x03	; 3
    b622:	6e e0       	ldi	r22, 0x0E	; 14
    b624:	84 e0       	ldi	r24, 0x04	; 4
    b626:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b62a:	42 e9       	ldi	r20, 0x92	; 146
    b62c:	52 e0       	ldi	r21, 0x02	; 2
    b62e:	6e e0       	ldi	r22, 0x0E	; 14
    b630:	70 e0       	ldi	r23, 0x00	; 0
    b632:	88 e0       	ldi	r24, 0x08	; 8
    b634:	90 e0       	ldi	r25, 0x00	; 0
    b636:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b63a:	ae 01       	movw	r20, r28
    b63c:	44 5f       	subi	r20, 0xF4	; 244
    b63e:	5f 4f       	sbci	r21, 0xFF	; 255
    b640:	23 e0       	ldi	r18, 0x03	; 3
    b642:	6e e0       	ldi	r22, 0x0E	; 14
    b644:	8d e0       	ldi	r24, 0x0D	; 13
    b646:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b64a:	4f e8       	ldi	r20, 0x8F	; 143
    b64c:	52 e0       	ldi	r21, 0x02	; 2
    b64e:	6e e0       	ldi	r22, 0x0E	; 14
    b650:	70 e0       	ldi	r23, 0x00	; 0
    b652:	81 e1       	ldi	r24, 0x11	; 17
    b654:	90 e0       	ldi	r25, 0x00	; 0
    b656:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b65a:	21 e0       	ldi	r18, 0x01	; 1
    b65c:	f8 01       	movw	r30, r16
    b65e:	40 89       	ldd	r20, Z+16	; 0x10
    b660:	6e e0       	ldi	r22, 0x0E	; 14
    b662:	70 e0       	ldi	r23, 0x00	; 0
    b664:	86 e1       	ldi	r24, 0x16	; 22
    b666:	90 e0       	ldi	r25, 0x00	; 0
    b668:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
	PrintChar(23, 14, '-');
    b66c:	4d e2       	ldi	r20, 0x2D	; 45
    b66e:	6e e0       	ldi	r22, 0x0E	; 14
    b670:	70 e0       	ldi	r23, 0x00	; 0
    b672:	87 e1       	ldi	r24, 0x17	; 23
    b674:	90 e0       	ldi	r25, 0x00	; 0
    b676:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b67a:	21 e0       	ldi	r18, 0x01	; 1
    b67c:	48 89       	ldd	r20, Y+16	; 0x10
    b67e:	6e e0       	ldi	r22, 0x0E	; 14
    b680:	70 e0       	ldi	r23, 0x00	; 0
    b682:	8a e1       	ldi	r24, 0x1A	; 26
    b684:	90 e0       	ldi	r25, 0x00	; 0
}
    b686:	df 91       	pop	r29
    b688:	cf 91       	pop	r28
    b68a:	1f 91       	pop	r17
    b68c:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b68e:	0c 94 37 56 	jmp	0xac6e	; 0xac6e <PrintByte>

0000b692 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b692:	0f 93       	push	r16
    b694:	1f 93       	push	r17
    b696:	cf 93       	push	r28
    b698:	df 93       	push	r29
    b69a:	8c 01       	movw	r16, r24
    b69c:	eb 01       	movw	r28, r22
    Print(9, 13, (char*) strFinalScore);
    b69e:	43 e8       	ldi	r20, 0x83	; 131
    b6a0:	52 e0       	ldi	r21, 0x02	; 2
    b6a2:	6d e0       	ldi	r22, 0x0D	; 13
    b6a4:	70 e0       	ldi	r23, 0x00	; 0
    b6a6:	89 e0       	ldi	r24, 0x09	; 9
    b6a8:	90 e0       	ldi	r25, 0x00	; 0
    b6aa:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b6ae:	a8 01       	movw	r20, r16
    b6b0:	44 5f       	subi	r20, 0xF4	; 244
    b6b2:	5f 4f       	sbci	r21, 0xFF	; 255
    b6b4:	23 e0       	ldi	r18, 0x03	; 3
    b6b6:	6e e0       	ldi	r22, 0x0E	; 14
    b6b8:	84 e0       	ldi	r24, 0x04	; 4
    b6ba:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b6be:	42 e9       	ldi	r20, 0x92	; 146
    b6c0:	52 e0       	ldi	r21, 0x02	; 2
    b6c2:	6e e0       	ldi	r22, 0x0E	; 14
    b6c4:	70 e0       	ldi	r23, 0x00	; 0
    b6c6:	88 e0       	ldi	r24, 0x08	; 8
    b6c8:	90 e0       	ldi	r25, 0x00	; 0
    b6ca:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b6ce:	ae 01       	movw	r20, r28
    b6d0:	44 5f       	subi	r20, 0xF4	; 244
    b6d2:	5f 4f       	sbci	r21, 0xFF	; 255
    b6d4:	23 e0       	ldi	r18, 0x03	; 3
    b6d6:	6e e0       	ldi	r22, 0x0E	; 14
    b6d8:	8d e0       	ldi	r24, 0x0D	; 13
    b6da:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b6de:	4f e8       	ldi	r20, 0x8F	; 143
    b6e0:	52 e0       	ldi	r21, 0x02	; 2
    b6e2:	6e e0       	ldi	r22, 0x0E	; 14
    b6e4:	70 e0       	ldi	r23, 0x00	; 0
    b6e6:	81 e1       	ldi	r24, 0x11	; 17
    b6e8:	90 e0       	ldi	r25, 0x00	; 0
    b6ea:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    PrintByte(22, 14, winner->score ,true);
    b6ee:	21 e0       	ldi	r18, 0x01	; 1
    b6f0:	f8 01       	movw	r30, r16
    b6f2:	47 85       	ldd	r20, Z+15	; 0x0f
    b6f4:	6e e0       	ldi	r22, 0x0E	; 14
    b6f6:	70 e0       	ldi	r23, 0x00	; 0
    b6f8:	86 e1       	ldi	r24, 0x16	; 22
    b6fa:	90 e0       	ldi	r25, 0x00	; 0
    b6fc:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
    PrintChar(23, 14, '-');
    b700:	4d e2       	ldi	r20, 0x2D	; 45
    b702:	6e e0       	ldi	r22, 0x0E	; 14
    b704:	70 e0       	ldi	r23, 0x00	; 0
    b706:	87 e1       	ldi	r24, 0x17	; 23
    b708:	90 e0       	ldi	r25, 0x00	; 0
    b70a:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b70e:	21 e0       	ldi	r18, 0x01	; 1
    b710:	4f 85       	ldd	r20, Y+15	; 0x0f
    b712:	6e e0       	ldi	r22, 0x0E	; 14
    b714:	70 e0       	ldi	r23, 0x00	; 0
    b716:	8a e1       	ldi	r24, 0x1A	; 26
    b718:	90 e0       	ldi	r25, 0x00	; 0
}
    b71a:	df 91       	pop	r29
    b71c:	cf 91       	pop	r28
    b71e:	1f 91       	pop	r17
    b720:	0f 91       	pop	r16
    Print(8, 14, (char*) strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, (char*) strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    b722:	0c 94 37 56 	jmp	0xac6e	; 0xac6e <PrintByte>

0000b726 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b726:	cf 93       	push	r28
    b728:	df 93       	push	r29
    b72a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b72c:	ac 01       	movw	r20, r24
    b72e:	44 5f       	subi	r20, 0xF4	; 244
    b730:	5f 4f       	sbci	r21, 0xFF	; 255
    b732:	23 e0       	ldi	r18, 0x03	; 3
    b734:	60 e0       	ldi	r22, 0x00	; 0
    b736:	8a e0       	ldi	r24, 0x0A	; 10
    b738:	8c 0f       	add	r24, r28
    b73a:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b73e:	d0 e0       	ldi	r29, 0x00	; 0
    b740:	47 ed       	ldi	r20, 0xD7	; 215
    b742:	51 e0       	ldi	r21, 0x01	; 1
    b744:	60 e0       	ldi	r22, 0x00	; 0
    b746:	70 e0       	ldi	r23, 0x00	; 0
    b748:	ce 01       	movw	r24, r28
    b74a:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(x, 1, (char*) strTotal);
    b74e:	40 ed       	ldi	r20, 0xD0	; 208
    b750:	51 e0       	ldi	r21, 0x01	; 1
    b752:	61 e0       	ldi	r22, 0x01	; 1
    b754:	70 e0       	ldi	r23, 0x00	; 0
    b756:	ce 01       	movw	r24, r28
	
}
    b758:	df 91       	pop	r29
    b75a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b75c:	0c 94 6a 56 	jmp	0xacd4	; 0xacd4 <Print>

0000b760 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b760:	0f 93       	push	r16
    b762:	1f 93       	push	r17
    b764:	cf 93       	push	r28
    b766:	df 93       	push	r29
    b768:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b76a:	c6 2f       	mov	r28, r22
    b76c:	d0 e0       	ldi	r29, 0x00	; 0
    b76e:	28 96       	adiw	r28, 0x08	; 8
    b770:	20 e0       	ldi	r18, 0x00	; 0
    b772:	fc 01       	movw	r30, r24
    b774:	40 89       	ldd	r20, Z+16	; 0x10
    b776:	60 e0       	ldi	r22, 0x00	; 0
    b778:	70 e0       	ldi	r23, 0x00	; 0
    b77a:	ce 01       	movw	r24, r28
    b77c:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b780:	20 e0       	ldi	r18, 0x00	; 0
    b782:	f8 01       	movw	r30, r16
    b784:	47 85       	ldd	r20, Z+15	; 0x0f
    b786:	61 e0       	ldi	r22, 0x01	; 1
    b788:	70 e0       	ldi	r23, 0x00	; 0
    b78a:	ce 01       	movw	r24, r28
}
    b78c:	df 91       	pop	r29
    b78e:	cf 91       	pop	r28
    b790:	1f 91       	pop	r17
    b792:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b794:	0c 94 37 56 	jmp	0xac6e	; 0xac6e <PrintByte>

0000b798 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b798:	cf 93       	push	r28
    b79a:	df 93       	push	r29
    b79c:	ec 01       	movw	r28, r24
    b79e:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b7a0:	9d 89       	ldd	r25, Y+21	; 0x15
    b7a2:	9a 35       	cpi	r25, 0x5A	; 90
    b7a4:	99 f0       	breq	.+38     	; 0xb7cc <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b7a6:	91 11       	cpse	r25, r1
    b7a8:	0c c0       	rjmp	.+24     	; 0xb7c2 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b7aa:	4e 89       	ldd	r20, Y+22	; 0x16
    b7ac:	9f e0       	ldi	r25, 0x0F	; 15
    b7ae:	49 9f       	mul	r20, r25
    b7b0:	a0 01       	movw	r20, r0
    b7b2:	11 24       	eor	r1, r1
    b7b4:	43 51       	subi	r20, 0x13	; 19
    b7b6:	5e 4f       	sbci	r21, 0xFE	; 254
    b7b8:	62 e0       	ldi	r22, 0x02	; 2
    b7ba:	70 e0       	ldi	r23, 0x00	; 0
    b7bc:	90 e0       	ldi	r25, 0x00	; 0
    b7be:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b7c2:	8d 89       	ldd	r24, Y+21	; 0x15
    b7c4:	8f 5f       	subi	r24, 0xFF	; 255
    b7c6:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b7c8:	41 e0       	ldi	r20, 0x01	; 1
    b7ca:	0a c0       	rjmp	.+20     	; 0xb7e0 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b7cc:	44 23       	and	r20, r20
    b7ce:	41 f0       	breq	.+16     	; 0xb7e0 <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b7d0:	4e ed       	ldi	r20, 0xDE	; 222
    b7d2:	51 e0       	ldi	r21, 0x01	; 1
    b7d4:	62 e0       	ldi	r22, 0x02	; 2
    b7d6:	70 e0       	ldi	r23, 0x00	; 0
    b7d8:	90 e0       	ldi	r25, 0x00	; 0
    b7da:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    b7de:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b7e0:	84 2f       	mov	r24, r20
    b7e2:	df 91       	pop	r29
    b7e4:	cf 91       	pop	r28
    b7e6:	08 95       	ret

0000b7e8 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b7e8:	ef 92       	push	r14
    b7ea:	ff 92       	push	r15
    b7ec:	0f 93       	push	r16
    b7ee:	1f 93       	push	r17
    b7f0:	cf 93       	push	r28
    b7f2:	df 93       	push	r29
    b7f4:	1f 92       	push	r1
    b7f6:	cd b7       	in	r28, 0x3d	; 61
    b7f8:	de b7       	in	r29, 0x3e	; 62
    b7fa:	7c 01       	movw	r14, r24
    b7fc:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b7fe:	fc 01       	movw	r30, r24
    b800:	67 81       	ldd	r22, Z+7	; 0x07
    b802:	70 85       	ldd	r23, Z+8	; 0x08
    b804:	81 85       	ldd	r24, Z+9	; 0x09
    b806:	92 85       	ldd	r25, Z+10	; 0x0a
    b808:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    b80c:	46 2f       	mov	r20, r22
    b80e:	f7 01       	movw	r30, r14
    b810:	63 81       	ldd	r22, Z+3	; 0x03
    b812:	74 81       	ldd	r23, Z+4	; 0x04
    b814:	85 81       	ldd	r24, Z+5	; 0x05
    b816:	96 81       	ldd	r25, Z+6	; 0x06
    b818:	49 83       	std	Y+1, r20	; 0x01
    b81a:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    b81e:	02 e0       	ldi	r16, 0x02	; 2
    b820:	22 e0       	ldi	r18, 0x02	; 2
    b822:	49 81       	ldd	r20, Y+1	; 0x01
    b824:	81 2f       	mov	r24, r17
    b826:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
}
    b82a:	0f 90       	pop	r0
    b82c:	df 91       	pop	r29
    b82e:	cf 91       	pop	r28
    b830:	1f 91       	pop	r17
    b832:	0f 91       	pop	r16
    b834:	ff 90       	pop	r15
    b836:	ef 90       	pop	r14
    b838:	08 95       	ret

0000b83a <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b83a:	ef 92       	push	r14
    b83c:	ff 92       	push	r15
    b83e:	0f 93       	push	r16
    b840:	1f 93       	push	r17
    b842:	cf 93       	push	r28
    b844:	df 93       	push	r29
    b846:	1f 92       	push	r1
    b848:	cd b7       	in	r28, 0x3d	; 61
    b84a:	de b7       	in	r29, 0x3e	; 62
    b84c:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b84e:	81 89       	ldd	r24, Z+17	; 0x11
    b850:	88 23       	and	r24, r24
    b852:	b9 f0       	breq	.+46     	; 0xb882 <render_shot+0x48>
    b854:	16 2f       	mov	r17, r22
    b856:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b858:	63 a9       	ldd	r22, Z+51	; 0x33
    b85a:	74 a9       	ldd	r23, Z+52	; 0x34
    b85c:	85 a9       	ldd	r24, Z+53	; 0x35
    b85e:	96 a9       	ldd	r25, Z+54	; 0x36
    b860:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    b864:	46 2f       	mov	r20, r22
    b866:	f7 01       	movw	r30, r14
    b868:	67 a5       	ldd	r22, Z+47	; 0x2f
    b86a:	70 a9       	ldd	r23, Z+48	; 0x30
    b86c:	81 a9       	ldd	r24, Z+49	; 0x31
    b86e:	92 a9       	ldd	r25, Z+50	; 0x32
    b870:	49 83       	std	Y+1, r20	; 0x01
    b872:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    b876:	01 e0       	ldi	r16, 0x01	; 1
    b878:	21 e0       	ldi	r18, 0x01	; 1
    b87a:	49 81       	ldd	r20, Y+1	; 0x01
    b87c:	81 2f       	mov	r24, r17
    b87e:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
			sprite_index++;
		}
	}
}
    b882:	0f 90       	pop	r0
    b884:	df 91       	pop	r29
    b886:	cf 91       	pop	r28
    b888:	1f 91       	pop	r17
    b88a:	0f 91       	pop	r16
    b88c:	ff 90       	pop	r15
    b88e:	ef 90       	pop	r14
    b890:	08 95       	ret

0000b892 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b892:	cf 92       	push	r12
    b894:	df 92       	push	r13
    b896:	ef 92       	push	r14
    b898:	ff 92       	push	r15
    b89a:	0f 93       	push	r16
    b89c:	1f 93       	push	r17
    b89e:	cf 93       	push	r28
    b8a0:	df 93       	push	r29
    b8a2:	1f 92       	push	r1
    b8a4:	cd b7       	in	r28, 0x3d	; 61
    b8a6:	de b7       	in	r29, 0x3e	; 62
    b8a8:	8c 01       	movw	r16, r24
    b8aa:	0f 5f       	subi	r16, 0xFF	; 255
    b8ac:	1f 4f       	sbci	r17, 0xFF	; 255
    b8ae:	7c 01       	movw	r14, r24
    b8b0:	29 e1       	ldi	r18, 0x19	; 25
    b8b2:	e2 0e       	add	r14, r18
    b8b4:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b8b6:	8e e1       	ldi	r24, 0x1E	; 30
    b8b8:	c8 2e       	mov	r12, r24
    b8ba:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b8bc:	f8 01       	movw	r30, r16
    b8be:	82 85       	ldd	r24, Z+10	; 0x0a
    b8c0:	93 85       	ldd	r25, Z+11	; 0x0b
    b8c2:	89 2b       	or	r24, r25
    b8c4:	e1 f0       	breq	.+56     	; 0xb8fe <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    b8c6:	be 01       	movw	r22, r28
    b8c8:	6f 5f       	subi	r22, 0xFF	; 255
    b8ca:	7f 4f       	sbci	r23, 0xFF	; 255
    b8cc:	c8 01       	movw	r24, r16
    b8ce:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    b8d2:	9c 01       	movw	r18, r24
			if (looped)
    b8d4:	49 81       	ldd	r20, Y+1	; 0x01
    b8d6:	f8 01       	movw	r30, r16
    b8d8:	82 85       	ldd	r24, Z+10	; 0x0a
    b8da:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b8dc:	b6 01       	movw	r22, r12
    b8de:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    b8e2:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    b8e4:	44 23       	and	r20, r20
    b8e6:	41 f0       	breq	.+16     	; 0xb8f8 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b8e8:	40 e0       	ldi	r20, 0x00	; 0
    b8ea:	50 e0       	ldi	r21, 0x00	; 0
    b8ec:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
				ta->anims[i].tile_index = 0;
    b8f0:	f8 01       	movw	r30, r16
    b8f2:	13 86       	std	Z+11, r1	; 0x0b
    b8f4:	12 86       	std	Z+10, r1	; 0x0a
    b8f6:	03 c0       	rjmp	.+6      	; 0xb8fe <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b8f8:	a9 01       	movw	r20, r18
    b8fa:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
    b8fe:	04 5f       	subi	r16, 0xF4	; 244
    b900:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b902:	0e 15       	cp	r16, r14
    b904:	1f 05       	cpc	r17, r15
    b906:	d1 f6       	brne	.-76     	; 0xb8bc <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    b908:	0f 90       	pop	r0
    b90a:	df 91       	pop	r29
    b90c:	cf 91       	pop	r28
    b90e:	1f 91       	pop	r17
    b910:	0f 91       	pop	r16
    b912:	ff 90       	pop	r15
    b914:	ef 90       	pop	r14
    b916:	df 90       	pop	r13
    b918:	cf 90       	pop	r12
    b91a:	08 95       	ret

0000b91c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b91c:	ff 92       	push	r15
    b91e:	0f 93       	push	r16
    b920:	1f 93       	push	r17
    b922:	cf 93       	push	r28
    b924:	df 93       	push	r29
    b926:	1f 92       	push	r1
    b928:	cd b7       	in	r28, 0x3d	; 61
    b92a:	de b7       	in	r29, 0x3e	; 62
    b92c:	8c 01       	movw	r16, r24
    b92e:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    b930:	fc 01       	movw	r30, r24
    b932:	84 89       	ldd	r24, Z+20	; 0x14
    b934:	80 ff       	sbrs	r24, 0
    b936:	18 c0       	rjmp	.+48     	; 0xb968 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    b938:	be 01       	movw	r22, r28
    b93a:	6f 5f       	subi	r22, 0xFF	; 255
    b93c:	7f 4f       	sbci	r23, 0xFF	; 255
    b93e:	c8 01       	movw	r24, r16
    b940:	8c 59       	subi	r24, 0x9C	; 156
    b942:	9f 4f       	sbci	r25, 0xFF	; 255
    b944:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    b948:	29 81       	ldd	r18, Y+1	; 0x01
    b94a:	22 23       	and	r18, r18
    b94c:	09 f4       	brne	.+2      	; 0xb950 <tank_map+0x34>
    b94e:	5a c0       	rjmp	.+180    	; 0xba04 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b950:	f8 01       	movw	r30, r16
    b952:	84 89       	ldd	r24, Z+20	; 0x14
    b954:	91 e0       	ldi	r25, 0x01	; 1
    b956:	98 27       	eor	r25, r24
    b958:	94 8b       	std	Z+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b95a:	c8 01       	movw	r24, r16
    b95c:	0e 94 e9 59 	call	0xb3d2	; 0xb3d2 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    b960:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b962:	81 eb       	ldi	r24, 0xB1	; 177
    b964:	94 e4       	ldi	r25, 0x44	; 68
    b966:	4f c0       	rjmp	.+158    	; 0xba06 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b968:	f8 01       	movw	r30, r16
    b96a:	97 89       	ldd	r25, Z+23	; 0x17
    b96c:	98 37       	cpi	r25, 0x78	; 120
    b96e:	11 f0       	breq	.+4      	; 0xb974 <tank_map+0x58>
		{
			player->grace_frame++;
    b970:	9f 5f       	subi	r25, 0xFF	; 255
    b972:	97 8b       	std	Z+23, r25	; 0x17
		}
		switch (player->shared.direction)
    b974:	f8 01       	movw	r30, r16
    b976:	90 81       	ld	r25, Z
    b978:	91 30       	cpi	r25, 0x01	; 1
    b97a:	79 f0       	breq	.+30     	; 0xb99a <tank_map+0x7e>
    b97c:	f8 f0       	brcs	.+62     	; 0xb9bc <tank_map+0xa0>
    b97e:	92 30       	cpi	r25, 0x02	; 2
    b980:	99 f0       	breq	.+38     	; 0xb9a8 <tank_map+0x8c>
    b982:	93 30       	cpi	r25, 0x03	; 3
    b984:	d9 f4       	brne	.+54     	; 0xb9bc <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    b986:	be 01       	movw	r22, r28
    b988:	6f 5f       	subi	r22, 0xFF	; 255
    b98a:	7f 4f       	sbci	r23, 0xFF	; 255
    b98c:	c8 01       	movw	r24, r16
    b98e:	86 5a       	subi	r24, 0xA6	; 166
    b990:	9f 4f       	sbci	r25, 0xFF	; 255
    b992:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    b996:	41 e0       	ldi	r20, 0x01	; 1
    b998:	1a c0       	rjmp	.+52     	; 0xb9ce <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    b99a:	be 01       	movw	r22, r28
    b99c:	6f 5f       	subi	r22, 0xFF	; 255
    b99e:	7f 4f       	sbci	r23, 0xFF	; 255
    b9a0:	c8 01       	movw	r24, r16
    b9a2:	86 5a       	subi	r24, 0xA6	; 166
    b9a4:	9f 4f       	sbci	r25, 0xFF	; 255
    b9a6:	10 c0       	rjmp	.+32     	; 0xb9c8 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    b9a8:	be 01       	movw	r22, r28
    b9aa:	6f 5f       	subi	r22, 0xFF	; 255
    b9ac:	7f 4f       	sbci	r23, 0xFF	; 255
    b9ae:	c8 01       	movw	r24, r16
    b9b0:	80 5b       	subi	r24, 0xB0	; 176
    b9b2:	9f 4f       	sbci	r25, 0xFF	; 255
    b9b4:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    b9b8:	42 e0       	ldi	r20, 0x02	; 2
    b9ba:	09 c0       	rjmp	.+18     	; 0xb9ce <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    b9bc:	be 01       	movw	r22, r28
    b9be:	6f 5f       	subi	r22, 0xFF	; 255
    b9c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b9c2:	c8 01       	movw	r24, r16
    b9c4:	80 5b       	subi	r24, 0xB0	; 176
    b9c6:	9f 4f       	sbci	r25, 0xFF	; 255
    b9c8:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    b9cc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    b9ce:	f8 01       	movw	r30, r16
    b9d0:	27 89       	ldd	r18, Z+23	; 0x17
    b9d2:	28 37       	cpi	r18, 0x78	; 120
    b9d4:	31 f0       	breq	.+12     	; 0xb9e2 <tank_map+0xc6>
    b9d6:	20 91 34 0b 	lds	r18, 0x0B34
    b9da:	22 23       	and	r18, r18
    b9dc:	11 f0       	breq	.+4      	; 0xb9e2 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    b9de:	81 eb       	ldi	r24, 0xB1	; 177
    b9e0:	94 e4       	ldi	r25, 0x44	; 68
		}
		toggle_counter--;
    b9e2:	20 91 03 01 	lds	r18, 0x0103
    b9e6:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    b9e8:	19 f0       	breq	.+6      	; 0xb9f0 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    b9ea:	20 93 03 01 	sts	0x0103, r18
    b9ee:	0b c0       	rjmp	.+22     	; 0xba06 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    b9f0:	24 e1       	ldi	r18, 0x14	; 20
    b9f2:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    b9f6:	30 91 34 0b 	lds	r19, 0x0B34
    b9fa:	21 e0       	ldi	r18, 0x01	; 1
    b9fc:	23 27       	eor	r18, r19
    b9fe:	20 93 34 0b 	sts	0x0B34, r18
    ba02:	01 c0       	rjmp	.+2      	; 0xba06 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    ba04:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    ba06:	bc 01       	movw	r22, r24
    ba08:	8f 2d       	mov	r24, r15
    ba0a:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    ba0e:	84 e0       	ldi	r24, 0x04	; 4
    ba10:	8f 0d       	add	r24, r15
    ba12:	0f 90       	pop	r0
    ba14:	df 91       	pop	r29
    ba16:	cf 91       	pop	r28
    ba18:	1f 91       	pop	r17
    ba1a:	0f 91       	pop	r16
    ba1c:	ff 90       	pop	r15
    ba1e:	08 95       	ret

0000ba20 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    ba20:	1f 93       	push	r17
    ba22:	cf 93       	push	r28
    ba24:	df 93       	push	r29
    ba26:	1f 92       	push	r1
    ba28:	cd b7       	in	r28, 0x3d	; 61
    ba2a:	de b7       	in	r29, 0x3e	; 62
    ba2c:	16 2f       	mov	r17, r22
	char looped = 0;
    ba2e:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    ba30:	fc 01       	movw	r30, r24
    ba32:	22 ad       	ldd	r18, Z+58	; 0x3a
    ba34:	22 23       	and	r18, r18
    ba36:	39 f1       	breq	.+78     	; 0xba86 <shot_map+0x66>
		{
			switch (shot->shared.direction)
    ba38:	24 a5       	ldd	r18, Z+44	; 0x2c
    ba3a:	21 30       	cpi	r18, 0x01	; 1
    ba3c:	71 f0       	breq	.+28     	; 0xba5a <shot_map+0x3a>
    ba3e:	f0 f0       	brcs	.+60     	; 0xba7c <shot_map+0x5c>
    ba40:	22 30       	cpi	r18, 0x02	; 2
    ba42:	a1 f0       	breq	.+40     	; 0xba6c <shot_map+0x4c>
    ba44:	23 30       	cpi	r18, 0x03	; 3
    ba46:	d1 f4       	brne	.+52     	; 0xba7c <shot_map+0x5c>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    ba48:	be 01       	movw	r22, r28
    ba4a:	6f 5f       	subi	r22, 0xFF	; 255
    ba4c:	7f 4f       	sbci	r23, 0xFF	; 255
    ba4e:	8a 5b       	subi	r24, 0xBA	; 186
    ba50:	9f 4f       	sbci	r25, 0xFF	; 255
    ba52:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    ba56:	41 e0       	ldi	r20, 0x01	; 1
    ba58:	19 c0       	rjmp	.+50     	; 0xba8c <shot_map+0x6c>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    ba5a:	be 01       	movw	r22, r28
    ba5c:	6f 5f       	subi	r22, 0xFF	; 255
    ba5e:	7f 4f       	sbci	r23, 0xFF	; 255
    ba60:	8a 5b       	subi	r24, 0xBA	; 186
    ba62:	9f 4f       	sbci	r25, 0xFF	; 255
    ba64:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    ba68:	40 e0       	ldi	r20, 0x00	; 0
    ba6a:	10 c0       	rjmp	.+32     	; 0xba8c <shot_map+0x6c>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    ba6c:	be 01       	movw	r22, r28
    ba6e:	6f 5f       	subi	r22, 0xFF	; 255
    ba70:	7f 4f       	sbci	r23, 0xFF	; 255
    ba72:	cc 96       	adiw	r24, 0x3c	; 60
    ba74:	0e 94 ee 56 	call	0xaddc	; 0xaddc <LBGetNextFrame>
    ba78:	42 e0       	ldi	r20, 0x02	; 2
    ba7a:	08 c0       	rjmp	.+16     	; 0xba8c <shot_map+0x6c>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    ba7c:	be 01       	movw	r22, r28
    ba7e:	6f 5f       	subi	r22, 0xFF	; 255
    ba80:	7f 4f       	sbci	r23, 0xFF	; 255
    ba82:	cc 96       	adiw	r24, 0x3c	; 60
    ba84:	ef cf       	rjmp	.-34     	; 0xba64 <shot_map+0x44>
    ba86:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    ba88:	81 eb       	ldi	r24, 0xB1	; 177
    ba8a:	94 e4       	ldi	r25, 0x44	; 68
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    ba8c:	bc 01       	movw	r22, r24
    ba8e:	81 2f       	mov	r24, r17
    ba90:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    ba94:	81 e0       	ldi	r24, 0x01	; 1
    ba96:	81 0f       	add	r24, r17
    ba98:	0f 90       	pop	r0
    ba9a:	df 91       	pop	r29
    ba9c:	cf 91       	pop	r28
    ba9e:	1f 91       	pop	r17
    baa0:	08 95       	ret

0000baa2 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    baa2:	cf 93       	push	r28
    baa4:	df 93       	push	r29
    baa6:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    baa8:	88 81       	ld	r24, Y
    baaa:	81 11       	cpse	r24, r1
    baac:	0b c0       	rjmp	.+22     	; 0xbac4 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    baae:	6f 81       	ldd	r22, Y+7	; 0x07
    bab0:	78 85       	ldd	r23, Y+8	; 0x08
    bab2:	89 85       	ldd	r24, Y+9	; 0x09
    bab4:	9a 85       	ldd	r25, Y+10	; 0x0a
    bab6:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    baba:	66 95       	lsr	r22
    babc:	66 95       	lsr	r22
    babe:	66 95       	lsr	r22
    bac0:	6f 5f       	subi	r22, 0xFF	; 255
    bac2:	1d c0       	rjmp	.+58     	; 0xbafe <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    bac4:	81 30       	cpi	r24, 0x01	; 1
    bac6:	69 f4       	brne	.+26     	; 0xbae2 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    bac8:	20 e0       	ldi	r18, 0x00	; 0
    baca:	30 e0       	ldi	r19, 0x00	; 0
    bacc:	40 e0       	ldi	r20, 0x00	; 0
    bace:	5e e3       	ldi	r21, 0x3E	; 62
    bad0:	6b 81       	ldd	r22, Y+3	; 0x03
    bad2:	7c 81       	ldd	r23, Y+4	; 0x04
    bad4:	8d 81       	ldd	r24, Y+5	; 0x05
    bad6:	9e 81       	ldd	r25, Y+6	; 0x06
    bad8:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    badc:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    bae0:	27 c0       	rjmp	.+78     	; 0xbb30 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    bae2:	82 30       	cpi	r24, 0x02	; 2
    bae4:	d9 f4       	brne	.+54     	; 0xbb1c <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    bae6:	20 e0       	ldi	r18, 0x00	; 0
    bae8:	30 e0       	ldi	r19, 0x00	; 0
    baea:	40 e0       	ldi	r20, 0x00	; 0
    baec:	5e e3       	ldi	r21, 0x3E	; 62
    baee:	6f 81       	ldd	r22, Y+7	; 0x07
    baf0:	78 85       	ldd	r23, Y+8	; 0x08
    baf2:	89 85       	ldd	r24, Y+9	; 0x09
    baf4:	9a 85       	ldd	r25, Y+10	; 0x0a
    baf6:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bafa:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
		sprite->y = tile * 8;
    bafe:	88 e0       	ldi	r24, 0x08	; 8
    bb00:	68 9f       	mul	r22, r24
    bb02:	b0 01       	movw	r22, r0
    bb04:	11 24       	eor	r1, r1
    bb06:	88 27       	eor	r24, r24
    bb08:	77 fd       	sbrc	r23, 7
    bb0a:	80 95       	com	r24
    bb0c:	98 2f       	mov	r25, r24
    bb0e:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bb12:	6f 83       	std	Y+7, r22	; 0x07
    bb14:	78 87       	std	Y+8, r23	; 0x08
    bb16:	89 87       	std	Y+9, r24	; 0x09
    bb18:	9a 87       	std	Y+10, r25	; 0x0a
    bb1a:	18 c0       	rjmp	.+48     	; 0xbb4c <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    bb1c:	6b 81       	ldd	r22, Y+3	; 0x03
    bb1e:	7c 81       	ldd	r23, Y+4	; 0x04
    bb20:	8d 81       	ldd	r24, Y+5	; 0x05
    bb22:	9e 81       	ldd	r25, Y+6	; 0x06
    bb24:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    bb28:	66 95       	lsr	r22
    bb2a:	66 95       	lsr	r22
    bb2c:	66 95       	lsr	r22
    bb2e:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    bb30:	88 e0       	ldi	r24, 0x08	; 8
    bb32:	68 9f       	mul	r22, r24
    bb34:	b0 01       	movw	r22, r0
    bb36:	11 24       	eor	r1, r1
    bb38:	88 27       	eor	r24, r24
    bb3a:	77 fd       	sbrc	r23, 7
    bb3c:	80 95       	com	r24
    bb3e:	98 2f       	mov	r25, r24
    bb40:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bb44:	6b 83       	std	Y+3, r22	; 0x03
    bb46:	7c 83       	std	Y+4, r23	; 0x04
    bb48:	8d 83       	std	Y+5, r24	; 0x05
    bb4a:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bb4c:	81 e0       	ldi	r24, 0x01	; 1
    bb4e:	8a 83       	std	Y+2, r24	; 0x02
}
    bb50:	df 91       	pop	r29
    bb52:	cf 91       	pop	r28
    bb54:	08 95       	ret

0000bb56 <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    bb56:	cf 93       	push	r28
    bb58:	df 93       	push	r29
    bb5a:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    bb5c:	88 81       	ld	r24, Y
    bb5e:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    bb60:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    bb62:	81 11       	cpse	r24, r1
    bb64:	13 c0       	rjmp	.+38     	; 0xbb8c <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    bb66:	80 e0       	ldi	r24, 0x00	; 0
    bb68:	90 e0       	ldi	r25, 0x00	; 0
    bb6a:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bb6e:	25 e6       	ldi	r18, 0x65	; 101
    bb70:	38 e8       	ldi	r19, 0x88	; 136
    bb72:	48 e8       	ldi	r20, 0x88	; 136
    bb74:	5c e3       	ldi	r21, 0x3C	; 60
    bb76:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bb7a:	9b 01       	movw	r18, r22
    bb7c:	ac 01       	movw	r20, r24
    bb7e:	6f 81       	ldd	r22, Y+7	; 0x07
    bb80:	78 85       	ldd	r23, Y+8	; 0x08
    bb82:	89 85       	ldd	r24, Y+9	; 0x09
    bb84:	9a 85       	ldd	r25, Y+10	; 0x0a
    bb86:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    bb8a:	29 c0       	rjmp	.+82     	; 0xbbde <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    bb8c:	81 30       	cpi	r24, 0x01	; 1
    bb8e:	99 f4       	brne	.+38     	; 0xbbb6 <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    bb90:	80 e0       	ldi	r24, 0x00	; 0
    bb92:	90 e0       	ldi	r25, 0x00	; 0
    bb94:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bb98:	25 e6       	ldi	r18, 0x65	; 101
    bb9a:	38 e8       	ldi	r19, 0x88	; 136
    bb9c:	48 e8       	ldi	r20, 0x88	; 136
    bb9e:	5c e3       	ldi	r21, 0x3C	; 60
    bba0:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bba4:	9b 01       	movw	r18, r22
    bba6:	ac 01       	movw	r20, r24
    bba8:	6b 81       	ldd	r22, Y+3	; 0x03
    bbaa:	7c 81       	ldd	r23, Y+4	; 0x04
    bbac:	8d 81       	ldd	r24, Y+5	; 0x05
    bbae:	9e 81       	ldd	r25, Y+6	; 0x06
    bbb0:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    bbb4:	2b c0       	rjmp	.+86     	; 0xbc0c <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    bbb6:	82 30       	cpi	r24, 0x02	; 2
    bbb8:	b9 f4       	brne	.+46     	; 0xbbe8 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    bbba:	80 e0       	ldi	r24, 0x00	; 0
    bbbc:	90 e0       	ldi	r25, 0x00	; 0
    bbbe:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bbc2:	25 e6       	ldi	r18, 0x65	; 101
    bbc4:	38 e8       	ldi	r19, 0x88	; 136
    bbc6:	48 e8       	ldi	r20, 0x88	; 136
    bbc8:	5c e3       	ldi	r21, 0x3C	; 60
    bbca:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bbce:	9b 01       	movw	r18, r22
    bbd0:	ac 01       	movw	r20, r24
    bbd2:	6f 81       	ldd	r22, Y+7	; 0x07
    bbd4:	78 85       	ldd	r23, Y+8	; 0x08
    bbd6:	89 85       	ldd	r24, Y+9	; 0x09
    bbd8:	9a 85       	ldd	r25, Y+10	; 0x0a
    bbda:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    bbde:	6f 83       	std	Y+7, r22	; 0x07
    bbe0:	78 87       	std	Y+8, r23	; 0x08
    bbe2:	89 87       	std	Y+9, r24	; 0x09
    bbe4:	9a 87       	std	Y+10, r25	; 0x0a
    bbe6:	16 c0       	rjmp	.+44     	; 0xbc14 <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    bbe8:	80 e0       	ldi	r24, 0x00	; 0
    bbea:	90 e0       	ldi	r25, 0x00	; 0
    bbec:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    bbf0:	25 e6       	ldi	r18, 0x65	; 101
    bbf2:	38 e8       	ldi	r19, 0x88	; 136
    bbf4:	48 e8       	ldi	r20, 0x88	; 136
    bbf6:	5c e3       	ldi	r21, 0x3C	; 60
    bbf8:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bbfc:	9b 01       	movw	r18, r22
    bbfe:	ac 01       	movw	r20, r24
    bc00:	6b 81       	ldd	r22, Y+3	; 0x03
    bc02:	7c 81       	ldd	r23, Y+4	; 0x04
    bc04:	8d 81       	ldd	r24, Y+5	; 0x05
    bc06:	9e 81       	ldd	r25, Y+6	; 0x06
    bc08:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    bc0c:	6b 83       	std	Y+3, r22	; 0x03
    bc0e:	7c 83       	std	Y+4, r23	; 0x04
    bc10:	8d 83       	std	Y+5, r24	; 0x05
    bc12:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    bc14:	81 e0       	ldi	r24, 0x01	; 1
    bc16:	8a 83       	std	Y+2, r24	; 0x02
}
    bc18:	df 91       	pop	r29
    bc1a:	cf 91       	pop	r28
    bc1c:	08 95       	ret

0000bc1e <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bc1e:	86 56       	subi	r24, 0x66	; 102
    bc20:	93 4f       	sbci	r25, 0xF3	; 243
    bc22:	fc 01       	movw	r30, r24
    bc24:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    bc26:	81 30       	cpi	r24, 0x01	; 1
    bc28:	21 f0       	breq	.+8      	; 0xbc32 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    bc2a:	82 30       	cpi	r24, 0x02	; 2
    bc2c:	21 f0       	breq	.+8      	; 0xbc36 <solid_square_tile+0x18>

	return 0;
    bc2e:	80 e0       	ldi	r24, 0x00	; 0
    bc30:	08 95       	ret
    bc32:	81 e0       	ldi	r24, 0x01	; 1
    bc34:	08 95       	ret
    bc36:	82 e0       	ldi	r24, 0x02	; 2
}
    bc38:	08 95       	ret

0000bc3a <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bc3a:	86 56       	subi	r24, 0x66	; 102
    bc3c:	93 4f       	sbci	r25, 0xF3	; 243
    bc3e:	fc 01       	movw	r30, r24
    bc40:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    bc42:	81 30       	cpi	r24, 0x01	; 1
    bc44:	61 f0       	breq	.+24     	; 0xbc5e <solid_tile+0x24>
	if (tile == L_METAL) return tile;
    bc46:	82 30       	cpi	r24, 0x02	; 2
    bc48:	61 f0       	breq	.+24     	; 0xbc62 <solid_tile+0x28>
	if (tile == L_TL) return tile;
    bc4a:	83 30       	cpi	r24, 0x03	; 3
    bc4c:	61 f0       	breq	.+24     	; 0xbc66 <solid_tile+0x2c>
	if (tile == L_BR) return tile;
    bc4e:	86 30       	cpi	r24, 0x06	; 6
    bc50:	61 f0       	breq	.+24     	; 0xbc6a <solid_tile+0x30>
	if (tile == L_TR) return tile;
    bc52:	84 30       	cpi	r24, 0x04	; 4
    bc54:	61 f0       	breq	.+24     	; 0xbc6e <solid_tile+0x34>
	if (tile == L_BL) return tile;
    bc56:	85 30       	cpi	r24, 0x05	; 5
    bc58:	61 f0       	breq	.+24     	; 0xbc72 <solid_tile+0x38>

	return 0;
    bc5a:	80 e0       	ldi	r24, 0x00	; 0
    bc5c:	08 95       	ret
    bc5e:	81 e0       	ldi	r24, 0x01	; 1
    bc60:	08 95       	ret
    bc62:	82 e0       	ldi	r24, 0x02	; 2
    bc64:	08 95       	ret
    bc66:	83 e0       	ldi	r24, 0x03	; 3
    bc68:	08 95       	ret
    bc6a:	86 e0       	ldi	r24, 0x06	; 6
    bc6c:	08 95       	ret
    bc6e:	84 e0       	ldi	r24, 0x04	; 4
    bc70:	08 95       	ret
    bc72:	85 e0       	ldi	r24, 0x05	; 5
}
    bc74:	08 95       	ret

0000bc76 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    bc76:	86 56       	subi	r24, 0x66	; 102
    bc78:	93 4f       	sbci	r25, 0xF3	; 243
    bc7a:	fc 01       	movw	r30, r24
    bc7c:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    bc7e:	83 30       	cpi	r24, 0x03	; 3
    bc80:	41 f0       	breq	.+16     	; 0xbc92 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    bc82:	86 30       	cpi	r24, 0x06	; 6
    bc84:	41 f0       	breq	.+16     	; 0xbc96 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    bc86:	84 30       	cpi	r24, 0x04	; 4
    bc88:	41 f0       	breq	.+16     	; 0xbc9a <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    bc8a:	85 30       	cpi	r24, 0x05	; 5
    bc8c:	41 f0       	breq	.+16     	; 0xbc9e <solid_directional_tile+0x28>
	
	return 0;
    bc8e:	80 e0       	ldi	r24, 0x00	; 0
    bc90:	08 95       	ret
    bc92:	83 e0       	ldi	r24, 0x03	; 3
    bc94:	08 95       	ret
    bc96:	86 e0       	ldi	r24, 0x06	; 6
    bc98:	08 95       	ret
    bc9a:	84 e0       	ldi	r24, 0x04	; 4
    bc9c:	08 95       	ret
    bc9e:	85 e0       	ldi	r24, 0x05	; 5
}
    bca0:	08 95       	ret

0000bca2 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    bca2:	7f 92       	push	r7
    bca4:	8f 92       	push	r8
    bca6:	9f 92       	push	r9
    bca8:	af 92       	push	r10
    bcaa:	bf 92       	push	r11
    bcac:	cf 92       	push	r12
    bcae:	df 92       	push	r13
    bcb0:	ef 92       	push	r14
    bcb2:	ff 92       	push	r15
    bcb4:	0f 93       	push	r16
    bcb6:	1f 93       	push	r17
    bcb8:	cf 93       	push	r28
    bcba:	df 93       	push	r29
    bcbc:	b6 2e       	mov	r11, r22
    bcbe:	94 2e       	mov	r9, r20
    bcc0:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    bcc2:	fc 01       	movw	r30, r24
    bcc4:	e6 56       	subi	r30, 0x66	; 102
    bcc6:	f3 4f       	sbci	r31, 0xF3	; 243
    bcc8:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    bcca:	6e e1       	ldi	r22, 0x1E	; 30
    bccc:	70 e0       	ldi	r23, 0x00	; 0
    bcce:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    bcd2:	f8 2e       	mov	r15, r24
    bcd4:	ff 0c       	add	r15, r15
    bcd6:	ff 0c       	add	r15, r15
    bcd8:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    bcda:	6d 5f       	subi	r22, 0xFD	; 253
    bcdc:	7f 4f       	sbci	r23, 0xFF	; 255
    bcde:	16 2f       	mov	r17, r22
    bce0:	11 0f       	add	r17, r17
    bce2:	11 0f       	add	r17, r17
    bce4:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    bce6:	83 e0       	ldi	r24, 0x03	; 3
    bce8:	d8 16       	cp	r13, r24
    bcea:	19 f0       	breq	.+6      	; 0xbcf2 <collides_directional_tile+0x50>
    bcec:	86 e0       	ldi	r24, 0x06	; 6
    bcee:	d8 12       	cpse	r13, r24
    bcf0:	31 c0       	rjmp	.+98     	; 0xbd54 <collides_directional_tile+0xb2>
    bcf2:	cf ef       	ldi	r28, 0xFF	; 255
    bcf4:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    bcf6:	c9 0d       	add	r28, r9
    bcf8:	27 e0       	ldi	r18, 0x07	; 7
    bcfa:	72 2e       	mov	r7, r18
    bcfc:	7f 0c       	add	r7, r15
    bcfe:	37 e0       	ldi	r19, 0x07	; 7
    bd00:	83 2e       	mov	r8, r19
    bd02:	81 0e       	add	r8, r17
    bd04:	ac 2e       	mov	r10, r28
    bd06:	cb 2c       	mov	r12, r11
    bd08:	e9 2c       	mov	r14, r9
    bd0a:	0b 2d       	mov	r16, r11
    bd0c:	21 2f       	mov	r18, r17
    bd0e:	47 2d       	mov	r20, r7
    bd10:	68 2d       	mov	r22, r8
    bd12:	8f 2d       	mov	r24, r15
    bd14:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bd18:	81 11       	cpse	r24, r1
    bd1a:	58 c0       	rjmp	.+176    	; 0xbdcc <collides_directional_tile+0x12a>
    bd1c:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    bd1e:	db 0d       	add	r29, r11
    bd20:	a9 2c       	mov	r10, r9
    bd22:	cd 2e       	mov	r12, r29
    bd24:	21 2f       	mov	r18, r17
    bd26:	47 2d       	mov	r20, r7
    bd28:	68 2d       	mov	r22, r8
    bd2a:	8f 2d       	mov	r24, r15
    bd2c:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bd30:	81 11       	cpse	r24, r1
    bd32:	4c c0       	rjmp	.+152    	; 0xbdcc <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    bd34:	ac 2e       	mov	r10, r28
    bd36:	0d 2f       	mov	r16, r29
    bd38:	21 2f       	mov	r18, r17
    bd3a:	47 2d       	mov	r20, r7
    bd3c:	68 2d       	mov	r22, r8
    bd3e:	8f 2d       	mov	r24, r15
    bd40:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bd44:	81 11       	cpse	r24, r1
    bd46:	42 c0       	rjmp	.+132    	; 0xbdcc <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    bd48:	ec 2e       	mov	r14, r28
    bd4a:	0b 2d       	mov	r16, r11
    bd4c:	21 2f       	mov	r18, r17
    bd4e:	47 2d       	mov	r20, r7
    bd50:	68 2d       	mov	r22, r8
    bd52:	34 c0       	rjmp	.+104    	; 0xbdbc <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    bd54:	8c ef       	ldi	r24, 0xFC	; 252
    bd56:	8d 0d       	add	r24, r13
    bd58:	82 30       	cpi	r24, 0x02	; 2
    bd5a:	b0 f5       	brcc	.+108    	; 0xbdc8 <collides_directional_tile+0x126>
    bd5c:	cf ef       	ldi	r28, 0xFF	; 255
    bd5e:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    bd60:	c4 0f       	add	r28, r20
    bd62:	87 e0       	ldi	r24, 0x07	; 7
    bd64:	78 2e       	mov	r7, r24
    bd66:	71 0e       	add	r7, r17
    bd68:	97 e0       	ldi	r25, 0x07	; 7
    bd6a:	89 2e       	mov	r8, r25
    bd6c:	8f 0c       	add	r8, r15
    bd6e:	ac 2e       	mov	r10, r28
    bd70:	cb 2c       	mov	r12, r11
    bd72:	e4 2e       	mov	r14, r20
    bd74:	0b 2d       	mov	r16, r11
    bd76:	27 2d       	mov	r18, r7
    bd78:	48 2d       	mov	r20, r8
    bd7a:	61 2f       	mov	r22, r17
    bd7c:	8f 2d       	mov	r24, r15
    bd7e:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bd82:	81 11       	cpse	r24, r1
    bd84:	23 c0       	rjmp	.+70     	; 0xbdcc <collides_directional_tile+0x12a>
    bd86:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    bd88:	db 0d       	add	r29, r11
    bd8a:	a9 2c       	mov	r10, r9
    bd8c:	cd 2e       	mov	r12, r29
    bd8e:	27 2d       	mov	r18, r7
    bd90:	48 2d       	mov	r20, r8
    bd92:	61 2f       	mov	r22, r17
    bd94:	8f 2d       	mov	r24, r15
    bd96:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bd9a:	81 11       	cpse	r24, r1
    bd9c:	17 c0       	rjmp	.+46     	; 0xbdcc <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    bd9e:	ac 2e       	mov	r10, r28
    bda0:	0d 2f       	mov	r16, r29
    bda2:	27 2d       	mov	r18, r7
    bda4:	48 2d       	mov	r20, r8
    bda6:	61 2f       	mov	r22, r17
    bda8:	8f 2d       	mov	r24, r15
    bdaa:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bdae:	81 11       	cpse	r24, r1
    bdb0:	0d c0       	rjmp	.+26     	; 0xbdcc <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    bdb2:	ec 2e       	mov	r14, r28
    bdb4:	0b 2d       	mov	r16, r11
    bdb6:	27 2d       	mov	r18, r7
    bdb8:	48 2d       	mov	r20, r8
    bdba:	61 2f       	mov	r22, r17
    bdbc:	8f 2d       	mov	r24, r15
    bdbe:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <LBLineIntersect>
    bdc2:	81 11       	cpse	r24, r1
    bdc4:	03 c0       	rjmp	.+6      	; 0xbdcc <collides_directional_tile+0x12a>
    bdc6:	03 c0       	rjmp	.+6      	; 0xbdce <collides_directional_tile+0x12c>
	}
	
	return 0;
    bdc8:	80 e0       	ldi	r24, 0x00	; 0
    bdca:	01 c0       	rjmp	.+2      	; 0xbdce <collides_directional_tile+0x12c>
    bdcc:	8d 2d       	mov	r24, r13
}
    bdce:	df 91       	pop	r29
    bdd0:	cf 91       	pop	r28
    bdd2:	1f 91       	pop	r17
    bdd4:	0f 91       	pop	r16
    bdd6:	ff 90       	pop	r15
    bdd8:	ef 90       	pop	r14
    bdda:	df 90       	pop	r13
    bddc:	cf 90       	pop	r12
    bdde:	bf 90       	pop	r11
    bde0:	af 90       	pop	r10
    bde2:	9f 90       	pop	r9
    bde4:	8f 90       	pop	r8
    bde6:	7f 90       	pop	r7
    bde8:	08 95       	ret

0000bdea <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    bdea:	8f 92       	push	r8
    bdec:	9f 92       	push	r9
    bdee:	af 92       	push	r10
    bdf0:	cf 92       	push	r12
    bdf2:	ef 92       	push	r14
    bdf4:	0f 93       	push	r16
    bdf6:	1f 93       	push	r17
    bdf8:	cf 93       	push	r28
    bdfa:	df 93       	push	r29
    bdfc:	4c 01       	movw	r8, r24
    bdfe:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    be00:	20 e0       	ldi	r18, 0x00	; 0
    be02:	30 e0       	ldi	r19, 0x00	; 0
    be04:	40 e0       	ldi	r20, 0x00	; 0
    be06:	50 e4       	ldi	r21, 0x40	; 64
    be08:	6f 81       	ldd	r22, Y+7	; 0x07
    be0a:	78 85       	ldd	r23, Y+8	; 0x08
    be0c:	89 85       	ldd	r24, Y+9	; 0x09
    be0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    be10:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    be14:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    be18:	e6 2e       	mov	r14, r22
    be1a:	20 e0       	ldi	r18, 0x00	; 0
    be1c:	30 e0       	ldi	r19, 0x00	; 0
    be1e:	40 e0       	ldi	r20, 0x00	; 0
    be20:	50 e4       	ldi	r21, 0x40	; 64
    be22:	6b 81       	ldd	r22, Y+3	; 0x03
    be24:	7c 81       	ldd	r23, Y+4	; 0x04
    be26:	8d 81       	ldd	r24, Y+5	; 0x05
    be28:	9e 81       	ldd	r25, Y+6	; 0x06
    be2a:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    be2e:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    be32:	06 2f       	mov	r16, r22
    be34:	20 e0       	ldi	r18, 0x00	; 0
    be36:	30 e0       	ldi	r19, 0x00	; 0
    be38:	40 e8       	ldi	r20, 0x80	; 128
    be3a:	5f e3       	ldi	r21, 0x3F	; 63
    be3c:	f4 01       	movw	r30, r8
    be3e:	67 81       	ldd	r22, Z+7	; 0x07
    be40:	70 85       	ldd	r23, Z+8	; 0x08
    be42:	81 85       	ldd	r24, Z+9	; 0x09
    be44:	92 85       	ldd	r25, Z+10	; 0x0a
    be46:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    be4a:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    be4e:	16 2f       	mov	r17, r22
    be50:	20 e0       	ldi	r18, 0x00	; 0
    be52:	30 e0       	ldi	r19, 0x00	; 0
    be54:	40 e8       	ldi	r20, 0x80	; 128
    be56:	5f e3       	ldi	r21, 0x3F	; 63
    be58:	f4 01       	movw	r30, r8
    be5a:	63 81       	ldd	r22, Z+3	; 0x03
    be5c:	74 81       	ldd	r23, Z+4	; 0x04
    be5e:	85 81       	ldd	r24, Z+5	; 0x05
    be60:	96 81       	ldd	r25, Z+6	; 0x06
    be62:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    be66:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    be6a:	86 2f       	mov	r24, r22
    be6c:	94 e0       	ldi	r25, 0x04	; 4
    be6e:	a9 2e       	mov	r10, r25
    be70:	24 e0       	ldi	r18, 0x04	; 4
    be72:	c2 2e       	mov	r12, r18
    be74:	2e e0       	ldi	r18, 0x0E	; 14
    be76:	4e e0       	ldi	r20, 0x0E	; 14
    be78:	61 2f       	mov	r22, r17
    be7a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    be7e:	88 23       	and	r24, r24
    be80:	41 f0       	breq	.+16     	; 0xbe92 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    be82:	f4 01       	movw	r30, r8
    be84:	87 89       	ldd	r24, Z+23	; 0x17
    be86:	88 37       	cpi	r24, 0x78	; 120
    be88:	21 f4       	brne	.+8      	; 0xbe92 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    be8a:	81 e0       	ldi	r24, 0x01	; 1
    be8c:	9f 85       	ldd	r25, Y+15	; 0x0f
    be8e:	99 30       	cpi	r25, 0x09	; 9
    be90:	08 f4       	brcc	.+2      	; 0xbe94 <player_shot+0xaa>
    be92:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    be94:	df 91       	pop	r29
    be96:	cf 91       	pop	r28
    be98:	1f 91       	pop	r17
    be9a:	0f 91       	pop	r16
    be9c:	ef 90       	pop	r14
    be9e:	cf 90       	pop	r12
    bea0:	af 90       	pop	r10
    bea2:	9f 90       	pop	r9
    bea4:	8f 90       	pop	r8
    bea6:	08 95       	ret

0000bea8 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    bea8:	cf 92       	push	r12
    beaa:	df 92       	push	r13
    beac:	ef 92       	push	r14
    beae:	ff 92       	push	r15
    beb0:	cf 93       	push	r28
    beb2:	df 93       	push	r29
    beb4:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    beb6:	cb 80       	ldd	r12, Y+3	; 0x03
    beb8:	dc 80       	ldd	r13, Y+4	; 0x04
    beba:	ed 80       	ldd	r14, Y+5	; 0x05
    bebc:	fe 80       	ldd	r15, Y+6	; 0x06
    bebe:	20 e0       	ldi	r18, 0x00	; 0
    bec0:	30 e0       	ldi	r19, 0x00	; 0
    bec2:	a9 01       	movw	r20, r18
    bec4:	c7 01       	movw	r24, r14
    bec6:	b6 01       	movw	r22, r12
    bec8:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    becc:	87 fd       	sbrc	r24, 7
    bece:	31 c0       	rjmp	.+98     	; 0xbf32 <collision_detect_boundries+0x8a>
    bed0:	20 e0       	ldi	r18, 0x00	; 0
    bed2:	30 e0       	ldi	r19, 0x00	; 0
    bed4:	40 e0       	ldi	r20, 0x00	; 0
    bed6:	51 e4       	ldi	r21, 0x41	; 65
    bed8:	c7 01       	movw	r24, r14
    beda:	b6 01       	movw	r22, r12
    bedc:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    bee0:	20 e0       	ldi	r18, 0x00	; 0
    bee2:	30 e0       	ldi	r19, 0x00	; 0
    bee4:	40 e7       	ldi	r20, 0x70	; 112
    bee6:	53 e4       	ldi	r21, 0x43	; 67
    bee8:	0e 94 1a 72 	call	0xe434	; 0xe434 <__gesf2>
    beec:	18 16       	cp	r1, r24
    beee:	0c f1       	brlt	.+66     	; 0xbf32 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bef0:	cf 80       	ldd	r12, Y+7	; 0x07
    bef2:	d8 84       	ldd	r13, Y+8	; 0x08
    bef4:	e9 84       	ldd	r14, Y+9	; 0x09
    bef6:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    bef8:	20 e0       	ldi	r18, 0x00	; 0
    befa:	30 e0       	ldi	r19, 0x00	; 0
    befc:	40 ec       	ldi	r20, 0xC0	; 192
    befe:	51 e4       	ldi	r21, 0x41	; 65
    bf00:	c7 01       	movw	r24, r14
    bf02:	b6 01       	movw	r22, r12
    bf04:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    bf08:	87 fd       	sbrc	r24, 7
    bf0a:	13 c0       	rjmp	.+38     	; 0xbf32 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    bf0c:	20 e0       	ldi	r18, 0x00	; 0
    bf0e:	30 e0       	ldi	r19, 0x00	; 0
    bf10:	40 e0       	ldi	r20, 0x00	; 0
    bf12:	51 e4       	ldi	r21, 0x41	; 65
    bf14:	c7 01       	movw	r24, r14
    bf16:	b6 01       	movw	r22, r12
    bf18:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    bf1c:	c1 e0       	ldi	r28, 0x01	; 1
    bf1e:	20 e0       	ldi	r18, 0x00	; 0
    bf20:	30 e0       	ldi	r19, 0x00	; 0
    bf22:	40 e6       	ldi	r20, 0x60	; 96
    bf24:	53 e4       	ldi	r21, 0x43	; 67
    bf26:	0e 94 1a 72 	call	0xe434	; 0xe434 <__gesf2>
    bf2a:	18 16       	cp	r1, r24
    bf2c:	1c f0       	brlt	.+6      	; 0xbf34 <collision_detect_boundries+0x8c>
    bf2e:	c0 e0       	ldi	r28, 0x00	; 0
    bf30:	01 c0       	rjmp	.+2      	; 0xbf34 <collision_detect_boundries+0x8c>
	{
		return 1;
    bf32:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    bf34:	8c 2f       	mov	r24, r28
    bf36:	df 91       	pop	r29
    bf38:	cf 91       	pop	r28
    bf3a:	ff 90       	pop	r15
    bf3c:	ef 90       	pop	r14
    bf3e:	df 90       	pop	r13
    bf40:	cf 90       	pop	r12
    bf42:	08 95       	ret

0000bf44 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    bf44:	0f 93       	push	r16
    bf46:	1f 93       	push	r17
    bf48:	cf 93       	push	r28
    bf4a:	9b 01       	movw	r18, r22
    bf4c:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    bf4e:	8c 01       	movw	r16, r24
    bf50:	06 56       	subi	r16, 0x66	; 102
    bf52:	13 4f       	sbci	r17, 0xF3	; 243
    bf54:	f8 01       	movw	r30, r16
    bf56:	41 81       	ldd	r20, Z+1	; 0x01
    bf58:	41 11       	cpse	r20, r1
    bf5a:	06 c0       	rjmp	.+12     	; 0xbf68 <drop_item+0x24>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    bf5c:	6e e1       	ldi	r22, 0x1E	; 30
    bf5e:	70 e0       	ldi	r23, 0x00	; 0
    bf60:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    bf64:	6d 5f       	subi	r22, 0xFD	; 253
    bf66:	19 c0       	rjmp	.+50     	; 0xbf9a <drop_item+0x56>
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    bf68:	8c 01       	movw	r16, r24
    bf6a:	05 56       	subi	r16, 0x65	; 101
    bf6c:	13 4f       	sbci	r17, 0xF3	; 243
    bf6e:	f8 01       	movw	r30, r16
    bf70:	41 81       	ldd	r20, Z+1	; 0x01
    bf72:	41 11       	cpse	r20, r1
    bf74:	06 c0       	rjmp	.+12     	; 0xbf82 <drop_item+0x3e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    bf76:	6e e1       	ldi	r22, 0x1E	; 30
    bf78:	70 e0       	ldi	r23, 0x00	; 0
    bf7a:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    bf7e:	6d 5f       	subi	r22, 0xFD	; 253
    bf80:	1a c0       	rjmp	.+52     	; 0xbfb6 <drop_item+0x72>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    bf82:	8c 01       	movw	r16, r24
    bf84:	08 54       	subi	r16, 0x48	; 72
    bf86:	13 4f       	sbci	r17, 0xF3	; 243
    bf88:	f8 01       	movw	r30, r16
    bf8a:	41 81       	ldd	r20, Z+1	; 0x01
    bf8c:	41 11       	cpse	r20, r1
    bf8e:	07 c0       	rjmp	.+14     	; 0xbf9e <drop_item+0x5a>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    bf90:	6e e1       	ldi	r22, 0x1E	; 30
    bf92:	70 e0       	ldi	r23, 0x00	; 0
    bf94:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    bf98:	6c 5f       	subi	r22, 0xFC	; 252
    bf9a:	a9 01       	movw	r20, r18
    bf9c:	0e c0       	rjmp	.+28     	; 0xbfba <drop_item+0x76>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    bf9e:	8c 01       	movw	r16, r24
    bfa0:	07 54       	subi	r16, 0x47	; 71
    bfa2:	13 4f       	sbci	r17, 0xF3	; 243
    bfa4:	f8 01       	movw	r30, r16
    bfa6:	41 81       	ldd	r20, Z+1	; 0x01
    bfa8:	41 11       	cpse	r20, r1
    bfaa:	0b c0       	rjmp	.+22     	; 0xbfc2 <drop_item+0x7e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    bfac:	6e e1       	ldi	r22, 0x1E	; 30
    bfae:	70 e0       	ldi	r23, 0x00	; 0
    bfb0:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    bfb4:	6c 5f       	subi	r22, 0xFC	; 252
    bfb6:	a9 01       	movw	r20, r18
    bfb8:	8f 5f       	subi	r24, 0xFF	; 255
    bfba:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    bfbe:	f8 01       	movw	r30, r16
    bfc0:	c1 83       	std	Z+1, r28	; 0x01
	}
}
    bfc2:	cf 91       	pop	r28
    bfc4:	1f 91       	pop	r17
    bfc6:	0f 91       	pop	r16
    bfc8:	08 95       	ret

0000bfca <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    bfca:	ff 92       	push	r15
    bfcc:	0f 93       	push	r16
    bfce:	1f 93       	push	r17
    bfd0:	cf 93       	push	r28
    bfd2:	df 93       	push	r29
    bfd4:	ec 01       	movw	r28, r24
    bfd6:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    bfd8:	20 e0       	ldi	r18, 0x00	; 0
    bfda:	30 e0       	ldi	r19, 0x00	; 0
    bfdc:	40 e0       	ldi	r20, 0x00	; 0
    bfde:	5e e3       	ldi	r21, 0x3E	; 62
    bfe0:	6f 81       	ldd	r22, Y+7	; 0x07
    bfe2:	78 85       	ldd	r23, Y+8	; 0x08
    bfe4:	89 85       	ldd	r24, Y+9	; 0x09
    bfe6:	9a 85       	ldd	r25, Y+10	; 0x0a
    bfe8:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    bfec:	20 e0       	ldi	r18, 0x00	; 0
    bfee:	30 e0       	ldi	r19, 0x00	; 0
    bff0:	40 e4       	ldi	r20, 0x40	; 64
    bff2:	50 e4       	ldi	r21, 0x40	; 64
    bff4:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    bff8:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    bffc:	8e e1       	ldi	r24, 0x1E	; 30
    bffe:	68 9f       	mul	r22, r24
    c000:	80 01       	movw	r16, r0
    c002:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    c004:	20 e0       	ldi	r18, 0x00	; 0
    c006:	30 e0       	ldi	r19, 0x00	; 0
    c008:	40 e0       	ldi	r20, 0x00	; 0
    c00a:	5e e3       	ldi	r21, 0x3E	; 62
    c00c:	6b 81       	ldd	r22, Y+3	; 0x03
    c00e:	7c 81       	ldd	r23, Y+4	; 0x04
    c010:	8d 81       	ldd	r24, Y+5	; 0x05
    c012:	9e 81       	ldd	r25, Y+6	; 0x06
    c014:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    c018:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c01c:	06 0f       	add	r16, r22
    c01e:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    c020:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c022:	88 23       	and	r24, r24
    c024:	79 f0       	breq	.+30     	; 0xc044 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    c026:	40 e0       	ldi	r20, 0x00	; 0
    c028:	50 e0       	ldi	r21, 0x00	; 0
    c02a:	61 e0       	ldi	r22, 0x01	; 1
    c02c:	8a e0       	ldi	r24, 0x0A	; 10
    c02e:	8f 0d       	add	r24, r15
    c030:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    c034:	47 e0       	ldi	r20, 0x07	; 7
    c036:	6f e5       	ldi	r22, 0x5F	; 95
    c038:	78 e8       	ldi	r23, 0x88	; 136
    c03a:	c8 01       	movw	r24, r16
    c03c:	0e 94 a2 5f 	call	0xbf44	; 0xbf44 <drop_item>
		player->max_speed = MAX_SPEED;
    c040:	82 e3       	ldi	r24, 0x32	; 50
    c042:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    c044:	89 8d       	ldd	r24, Y+25	; 0x19
    c046:	88 23       	and	r24, r24
    c048:	69 f0       	breq	.+26     	; 0xc064 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    c04a:	40 e0       	ldi	r20, 0x00	; 0
    c04c:	50 e0       	ldi	r21, 0x00	; 0
    c04e:	61 e0       	ldi	r22, 0x01	; 1
    c050:	8b e0       	ldi	r24, 0x0B	; 11
    c052:	8f 0d       	add	r24, r15
    c054:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    c058:	49 e0       	ldi	r20, 0x09	; 9
    c05a:	69 e5       	ldi	r22, 0x59	; 89
    c05c:	78 e8       	ldi	r23, 0x88	; 136
    c05e:	c8 01       	movw	r24, r16
    c060:	0e 94 a2 5f 	call	0xbf44	; 0xbf44 <drop_item>
	}
	player->has_over_speed = false;
    c064:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    c066:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    c068:	8c 89       	ldd	r24, Y+20	; 0x14
    c06a:	81 60       	ori	r24, 0x01	; 1
    c06c:	8c 8b       	std	Y+20, r24	; 0x14
}
    c06e:	df 91       	pop	r29
    c070:	cf 91       	pop	r28
    c072:	1f 91       	pop	r17
    c074:	0f 91       	pop	r16
    c076:	ff 90       	pop	r15
    c078:	08 95       	ret

0000c07a <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    c07a:	fc 01       	movw	r30, r24
    c07c:	8e e1       	ldi	r24, 0x1E	; 30
    c07e:	48 9f       	mul	r20, r24
    c080:	a0 01       	movw	r20, r0
    c082:	11 24       	eor	r1, r1
    c084:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    c086:	64 0f       	add	r22, r20
    c088:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    c08a:	21 11       	cpse	r18, r1
    c08c:	05 c0       	rjmp	.+10     	; 0xc098 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    c08e:	71 83       	std	Z+1, r23	; 0x01
    c090:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c092:	6f 5f       	subi	r22, 0xFF	; 255
    c094:	7f 4f       	sbci	r23, 0xFF	; 255
    c096:	12 c0       	rjmp	.+36     	; 0xc0bc <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    c098:	21 30       	cpi	r18, 0x01	; 1
    c09a:	19 f4       	brne	.+6      	; 0xc0a2 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    c09c:	cb 01       	movw	r24, r22
    c09e:	01 96       	adiw	r24, 0x01	; 1
    c0a0:	04 c0       	rjmp	.+8      	; 0xc0aa <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    c0a2:	22 30       	cpi	r18, 0x02	; 2
    c0a4:	39 f4       	brne	.+14     	; 0xc0b4 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    c0a6:	cb 01       	movw	r24, r22
    c0a8:	4e 96       	adiw	r24, 0x1e	; 30
    c0aa:	91 83       	std	Z+1, r25	; 0x01
    c0ac:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c0ae:	61 5e       	subi	r22, 0xE1	; 225
    c0b0:	7f 4f       	sbci	r23, 0xFF	; 255
    c0b2:	04 c0       	rjmp	.+8      	; 0xc0bc <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    c0b4:	71 83       	std	Z+1, r23	; 0x01
    c0b6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c0b8:	62 5e       	subi	r22, 0xE2	; 226
    c0ba:	7f 4f       	sbci	r23, 0xFF	; 255
    c0bc:	73 83       	std	Z+3, r23	; 0x03
    c0be:	62 83       	std	Z+2, r22	; 0x02
    c0c0:	08 95       	ret

0000c0c2 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    c0c2:	ef 92       	push	r14
    c0c4:	ff 92       	push	r15
    c0c6:	0f 93       	push	r16
    c0c8:	1f 93       	push	r17
    c0ca:	cf 93       	push	r28
    c0cc:	df 93       	push	r29
    c0ce:	ec 01       	movw	r28, r24
    c0d0:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    c0d2:	8e e1       	ldi	r24, 0x1E	; 30
    c0d4:	e8 2e       	mov	r14, r24
    c0d6:	f1 2c       	mov	r15, r1
    c0d8:	cb 01       	movw	r24, r22
    c0da:	b7 01       	movw	r22, r14
    c0dc:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c0e0:	6d 5f       	subi	r22, 0xFD	; 253
    c0e2:	40 e0       	ldi	r20, 0x00	; 0
    c0e4:	50 e0       	ldi	r21, 0x00	; 0
    c0e6:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    c0ea:	88 81       	ld	r24, Y
    c0ec:	fe 01       	movw	r30, r28
    c0ee:	9c e0       	ldi	r25, 0x0C	; 12
    c0f0:	89 9f       	mul	r24, r25
    c0f2:	e0 0d       	add	r30, r0
    c0f4:	f1 1d       	adc	r31, r1
    c0f6:	11 24       	eor	r1, r1
    c0f8:	83 85       	ldd	r24, Z+11	; 0x0b
    c0fa:	94 85       	ldd	r25, Z+12	; 0x0c
    c0fc:	00 97       	sbiw	r24, 0x00	; 0
    c0fe:	41 f0       	breq	.+16     	; 0xc110 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    c100:	b7 01       	movw	r22, r14
    c102:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c106:	6d 5f       	subi	r22, 0xFD	; 253
    c108:	40 e0       	ldi	r20, 0x00	; 0
    c10a:	50 e0       	ldi	r21, 0x00	; 0
    c10c:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    c110:	88 81       	ld	r24, Y
    c112:	fe 01       	movw	r30, r28
    c114:	9c e0       	ldi	r25, 0x0C	; 12
    c116:	89 9f       	mul	r24, r25
    c118:	e0 0d       	add	r30, r0
    c11a:	f1 1d       	adc	r31, r1
    c11c:	11 24       	eor	r1, r1
    c11e:	14 87       	std	Z+12, r17	; 0x0c
    c120:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    c122:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    c124:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    c126:	82 30       	cpi	r24, 0x02	; 2
    c128:	11 f0       	breq	.+4      	; 0xc12e <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    c12a:	88 83       	st	Y, r24
    c12c:	01 c0       	rjmp	.+2      	; 0xc130 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    c12e:	18 82       	st	Y, r1
	}
}
    c130:	df 91       	pop	r29
    c132:	cf 91       	pop	r28
    c134:	1f 91       	pop	r17
    c136:	0f 91       	pop	r16
    c138:	ff 90       	pop	r15
    c13a:	ef 90       	pop	r14
    c13c:	08 95       	ret

0000c13e <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    c13e:	fb 01       	movw	r30, r22
	switch (tile_type)
    c140:	84 30       	cpi	r24, 0x04	; 4
    c142:	71 f0       	breq	.+28     	; 0xc160 <richochet+0x22>
    c144:	18 f4       	brcc	.+6      	; 0xc14c <richochet+0xe>
    c146:	83 30       	cpi	r24, 0x03	; 3
    c148:	31 f0       	breq	.+12     	; 0xc156 <richochet+0x18>
    c14a:	08 95       	ret
    c14c:	85 30       	cpi	r24, 0x05	; 5
    c14e:	99 f0       	breq	.+38     	; 0xc176 <richochet+0x38>
    c150:	86 30       	cpi	r24, 0x06	; 6
    c152:	59 f0       	breq	.+22     	; 0xc16a <richochet+0x2c>
    c154:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    c156:	80 81       	ld	r24, Z
    c158:	8d 7f       	andi	r24, 0xFD	; 253
    c15a:	29 f4       	brne	.+10     	; 0xc166 <richochet+0x28>
				sprite->direction = D_RIGHT;
    c15c:	81 e0       	ldi	r24, 0x01	; 1
    c15e:	09 c0       	rjmp	.+18     	; 0xc172 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    c160:	80 81       	ld	r24, Z
    c162:	8d 7f       	andi	r24, 0xFD	; 253
    c164:	29 f0       	breq	.+10     	; 0xc170 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    c166:	82 e0       	ldi	r24, 0x02	; 2
    c168:	04 c0       	rjmp	.+8      	; 0xc172 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    c16a:	80 81       	ld	r24, Z
    c16c:	8d 7f       	andi	r24, 0xFD	; 253
    c16e:	31 f4       	brne	.+12     	; 0xc17c <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    c170:	83 e0       	ldi	r24, 0x03	; 3
    c172:	80 83       	st	Z, r24
    c174:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    c176:	80 81       	ld	r24, Z
    c178:	8d 7f       	andi	r24, 0xFD	; 253
    c17a:	81 f3       	breq	.-32     	; 0xc15c <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    c17c:	10 82       	st	Z, r1
    c17e:	08 95       	ret

0000c180 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    c180:	2f 92       	push	r2
    c182:	3f 92       	push	r3
    c184:	4f 92       	push	r4
    c186:	5f 92       	push	r5
    c188:	6f 92       	push	r6
    c18a:	7f 92       	push	r7
    c18c:	8f 92       	push	r8
    c18e:	9f 92       	push	r9
    c190:	af 92       	push	r10
    c192:	bf 92       	push	r11
    c194:	cf 92       	push	r12
    c196:	df 92       	push	r13
    c198:	ef 92       	push	r14
    c19a:	ff 92       	push	r15
    c19c:	0f 93       	push	r16
    c19e:	1f 93       	push	r17
    c1a0:	cf 93       	push	r28
    c1a2:	df 93       	push	r29
    c1a4:	00 d0       	rcall	.+0      	; 0xc1a6 <collision_detect_shot+0x26>
    c1a6:	00 d0       	rcall	.+0      	; 0xc1a8 <collision_detect_shot+0x28>
    c1a8:	1f 92       	push	r1
    c1aa:	cd b7       	in	r28, 0x3d	; 61
    c1ac:	de b7       	in	r29, 0x3e	; 62
    c1ae:	3c 01       	movw	r6, r24
    c1b0:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    c1b2:	1a 82       	std	Y+2, r1	; 0x02
    c1b4:	19 82       	std	Y+1, r1	; 0x01
    c1b6:	1c 82       	std	Y+4, r1	; 0x04
    c1b8:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    c1ba:	20 e0       	ldi	r18, 0x00	; 0
    c1bc:	30 e0       	ldi	r19, 0x00	; 0
    c1be:	40 e0       	ldi	r20, 0x00	; 0
    c1c0:	5e e3       	ldi	r21, 0x3E	; 62
    c1c2:	db 01       	movw	r26, r22
    c1c4:	17 96       	adiw	r26, 0x07	; 7
    c1c6:	6d 91       	ld	r22, X+
    c1c8:	7d 91       	ld	r23, X+
    c1ca:	8d 91       	ld	r24, X+
    c1cc:	9c 91       	ld	r25, X
    c1ce:	1a 97       	sbiw	r26, 0x0a	; 10
    c1d0:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    c1d4:	20 e0       	ldi	r18, 0x00	; 0
    c1d6:	30 e0       	ldi	r19, 0x00	; 0
    c1d8:	40 e4       	ldi	r20, 0x40	; 64
    c1da:	50 e4       	ldi	r21, 0x40	; 64
    c1dc:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    c1e0:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c1e4:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    c1e6:	20 e0       	ldi	r18, 0x00	; 0
    c1e8:	30 e0       	ldi	r19, 0x00	; 0
    c1ea:	40 e0       	ldi	r20, 0x00	; 0
    c1ec:	5e e3       	ldi	r21, 0x3E	; 62
    c1ee:	f4 01       	movw	r30, r8
    c1f0:	63 81       	ldd	r22, Z+3	; 0x03
    c1f2:	74 81       	ldd	r23, Z+4	; 0x04
    c1f4:	85 81       	ldd	r24, Z+5	; 0x05
    c1f6:	96 81       	ldd	r25, Z+6	; 0x06
    c1f8:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    c1fc:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    c200:	d4 01       	movw	r26, r8
    c202:	2c 91       	ld	r18, X
    c204:	41 2f       	mov	r20, r17
    c206:	ce 01       	movw	r24, r28
    c208:	01 96       	adiw	r24, 0x01	; 1
    c20a:	0e 94 3d 60 	call	0xc07a	; 0xc07a <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    c20e:	c4 01       	movw	r24, r8
    c210:	0e 94 54 5f 	call	0xbea8	; 0xbea8 <collision_detect_boundries>
    c214:	88 23       	and	r24, r24
    c216:	69 f0       	breq	.+26     	; 0xc232 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    c218:	f4 01       	movw	r30, r8
    c21a:	63 85       	ldd	r22, Z+11	; 0x0b
    c21c:	c4 01       	movw	r24, r8
    c21e:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
		player->active_shots--;
    c222:	d3 01       	movw	r26, r6
    c224:	51 96       	adiw	r26, 0x11	; 17
    c226:	8c 91       	ld	r24, X
    c228:	51 97       	sbiw	r26, 0x11	; 17
    c22a:	81 50       	subi	r24, 0x01	; 1
    c22c:	51 96       	adiw	r26, 0x11	; 17
    c22e:	8c 93       	st	X, r24
		return;
    c230:	63 c1       	rjmp	.+710    	; 0xc4f8 <collision_detect_shot+0x378>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    c232:	b4 01       	movw	r22, r8
    c234:	85 e2       	ldi	r24, 0x25	; 37
    c236:	9c e0       	ldi	r25, 0x0C	; 12
    c238:	0e 94 f5 5e 	call	0xbdea	; 0xbdea <player_shot>
    c23c:	88 23       	and	r24, r24
    c23e:	b9 f0       	breq	.+46     	; 0xc26e <collision_detect_shot+0xee>
    c240:	80 91 39 0c 	lds	r24, 0x0C39
    c244:	80 fd       	sbrc	r24, 0
    c246:	13 c0       	rjmp	.+38     	; 0xc26e <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    c248:	80 91 99 0f 	lds	r24, 0x0F99
    c24c:	8f 5f       	subi	r24, 0xFF	; 255
    c24e:	80 93 99 0f 	sts	0x0F99, r24
		player2.score++;
    c252:	80 91 98 0f 	lds	r24, 0x0F98
    c256:	8f 5f       	subi	r24, 0xFF	; 255
    c258:	80 93 98 0f 	sts	0x0F98, r24
		render_score(&player2, 15);
    c25c:	6f e0       	ldi	r22, 0x0F	; 15
    c25e:	89 e8       	ldi	r24, 0x89	; 137
    c260:	9f e0       	ldi	r25, 0x0F	; 15
    c262:	0e 94 b0 5b 	call	0xb760	; 0xb760 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    c266:	05 e2       	ldi	r16, 0x25	; 37
    c268:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    c26a:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    c26c:	29 c0       	rjmp	.+82     	; 0xc2c0 <collision_detect_shot+0x140>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    c26e:	b4 01       	movw	r22, r8
    c270:	89 e8       	ldi	r24, 0x89	; 137
    c272:	9f e0       	ldi	r25, 0x0F	; 15
    c274:	0e 94 f5 5e 	call	0xbdea	; 0xbdea <player_shot>
    c278:	81 11       	cpse	r24, r1
    c27a:	0b c0       	rjmp	.+22     	; 0xc292 <collision_detect_shot+0x112>
    c27c:	fe 01       	movw	r30, r28
    c27e:	31 96       	adiw	r30, 0x01	; 1
    c280:	2f 01       	movw	r4, r30
    c282:	1d 82       	std	Y+5, r1	; 0x05
    c284:	f1 2c       	mov	r15, r1
    c286:	d1 2c       	mov	r13, r1
    c288:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c28a:	6e e1       	ldi	r22, 0x1E	; 30
    c28c:	26 2e       	mov	r2, r22
    c28e:	31 2c       	mov	r3, r1
    c290:	5e c0       	rjmp	.+188    	; 0xc34e <collision_detect_shot+0x1ce>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    c292:	80 91 9d 0f 	lds	r24, 0x0F9D
    c296:	80 fd       	sbrc	r24, 0
    c298:	f1 cf       	rjmp	.-30     	; 0xc27c <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    c29a:	80 91 35 0c 	lds	r24, 0x0C35
    c29e:	8f 5f       	subi	r24, 0xFF	; 255
    c2a0:	80 93 35 0c 	sts	0x0C35, r24
		player1.score++;
    c2a4:	80 91 34 0c 	lds	r24, 0x0C34
    c2a8:	8f 5f       	subi	r24, 0xFF	; 255
    c2aa:	80 93 34 0c 	sts	0x0C34, r24
		render_score(&player1, 0);
    c2ae:	60 e0       	ldi	r22, 0x00	; 0
    c2b0:	85 e2       	ldi	r24, 0x25	; 37
    c2b2:	9c e0       	ldi	r25, 0x0C	; 12
    c2b4:	0e 94 b0 5b 	call	0xb760	; 0xb760 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    c2b8:	09 e8       	ldi	r16, 0x89	; 137
    c2ba:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    c2bc:	5f e0       	ldi	r21, 0x0F	; 15
    c2be:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    c2c0:	01 15       	cp	r16, r1
    c2c2:	11 05       	cpc	r17, r1
    c2c4:	d9 f2       	breq	.-74     	; 0xc27c <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    c2c6:	d4 01       	movw	r26, r8
    c2c8:	1b 96       	adiw	r26, 0x0b	; 11
    c2ca:	6c 91       	ld	r22, X
    c2cc:	c4 01       	movw	r24, r8
    c2ce:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
		player->active_shots--;
    c2d2:	f3 01       	movw	r30, r6
    c2d4:	81 89       	ldd	r24, Z+17	; 0x11
    c2d6:	81 50       	subi	r24, 0x01	; 1
    c2d8:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    c2da:	6f 2d       	mov	r22, r15
    c2dc:	c8 01       	movw	r24, r16
    c2de:	0e 94 e5 5f 	call	0xbfca	; 0xbfca <kill_player>
		SFX_TANK_EXPLODE;
    c2e2:	2f ef       	ldi	r18, 0xFF	; 255
    c2e4:	40 e1       	ldi	r20, 0x10	; 16
    c2e6:	6a e0       	ldi	r22, 0x0A	; 10
    c2e8:	04 c1       	rjmp	.+520    	; 0xc4f2 <collision_detect_shot+0x372>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    c2ea:	c5 01       	movw	r24, r10
    c2ec:	0e 94 3b 5e 	call	0xbc76	; 0xbc76 <solid_directional_tile>
    c2f0:	88 23       	and	r24, r24
    c2f2:	c1 f1       	breq	.+112    	; 0xc364 <collision_detect_shot+0x1e4>
    c2f4:	20 e0       	ldi	r18, 0x00	; 0
    c2f6:	30 e0       	ldi	r19, 0x00	; 0
    c2f8:	40 e0       	ldi	r20, 0x00	; 0
    c2fa:	50 e4       	ldi	r21, 0x40	; 64
    c2fc:	f4 01       	movw	r30, r8
    c2fe:	67 81       	ldd	r22, Z+7	; 0x07
    c300:	70 85       	ldd	r23, Z+8	; 0x08
    c302:	81 85       	ldd	r24, Z+9	; 0x09
    c304:	92 85       	ldd	r25, Z+10	; 0x0a
    c306:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c30a:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c30e:	c6 2e       	mov	r12, r22
    c310:	20 e0       	ldi	r18, 0x00	; 0
    c312:	30 e0       	ldi	r19, 0x00	; 0
    c314:	40 e0       	ldi	r20, 0x00	; 0
    c316:	50 e4       	ldi	r21, 0x40	; 64
    c318:	d4 01       	movw	r26, r8
    c31a:	13 96       	adiw	r26, 0x03	; 3
    c31c:	6d 91       	ld	r22, X+
    c31e:	7d 91       	ld	r23, X+
    c320:	8d 91       	ld	r24, X+
    c322:	9c 91       	ld	r25, X
    c324:	16 97       	sbiw	r26, 0x06	; 6
    c326:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c32a:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c32e:	04 e0       	ldi	r16, 0x04	; 4
    c330:	24 e0       	ldi	r18, 0x04	; 4
    c332:	4c 2d       	mov	r20, r12
    c334:	c5 01       	movw	r24, r10
    c336:	0e 94 51 5e 	call	0xbca2	; 0xbca2 <collides_directional_tile>
    c33a:	88 23       	and	r24, r24
    c33c:	99 f0       	breq	.+38     	; 0xc364 <collision_detect_shot+0x1e4>
		{
			hit = hit | HIT_ANGLE;
    c33e:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    c340:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    c342:	bd 81       	ldd	r27, Y+5	; 0x05
    c344:	b1 30       	cpi	r27, 0x01	; 1
    c346:	09 f4       	brne	.+2      	; 0xc34a <collision_detect_shot+0x1ca>
    c348:	88 c0       	rjmp	.+272    	; 0xc45a <collision_detect_shot+0x2da>
    c34a:	f1 e0       	ldi	r31, 0x01	; 1
    c34c:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    c34e:	d2 01       	movw	r26, r4
    c350:	ad 90       	ld	r10, X+
    c352:	bd 90       	ld	r11, X+
    c354:	2d 01       	movw	r4, r26
    c356:	f5 01       	movw	r30, r10
    c358:	e6 56       	subi	r30, 0x66	; 102
    c35a:	f3 4f       	sbci	r31, 0xF3	; 243
    c35c:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    c35e:	ee 20       	and	r14, r14
    c360:	81 f3       	breq	.-32     	; 0xc342 <collision_detect_shot+0x1c2>
    c362:	c3 cf       	rjmp	.-122    	; 0xc2ea <collision_detect_shot+0x16a>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c364:	b1 e0       	ldi	r27, 0x01	; 1
    c366:	eb 12       	cpse	r14, r27
    c368:	3b c0       	rjmp	.+118    	; 0xc3e0 <collision_detect_shot+0x260>
    c36a:	c5 01       	movw	r24, r10
    c36c:	b1 01       	movw	r22, r2
    c36e:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c372:	6d 5f       	subi	r22, 0xFD	; 253
    c374:	7f 4f       	sbci	r23, 0xFF	; 255
    c376:	e6 2e       	mov	r14, r22
    c378:	ee 0c       	add	r14, r14
    c37a:	ee 0c       	add	r14, r14
    c37c:	ee 0c       	add	r14, r14
    c37e:	08 2f       	mov	r16, r24
    c380:	00 0f       	add	r16, r16
    c382:	00 0f       	add	r16, r16
    c384:	00 0f       	add	r16, r16
    c386:	20 e0       	ldi	r18, 0x00	; 0
    c388:	30 e0       	ldi	r19, 0x00	; 0
    c38a:	40 e0       	ldi	r20, 0x00	; 0
    c38c:	50 e4       	ldi	r21, 0x40	; 64
    c38e:	f4 01       	movw	r30, r8
    c390:	67 81       	ldd	r22, Z+7	; 0x07
    c392:	70 85       	ldd	r23, Z+8	; 0x08
    c394:	81 85       	ldd	r24, Z+9	; 0x09
    c396:	92 85       	ldd	r25, Z+10	; 0x0a
    c398:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c39c:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c3a0:	b6 2e       	mov	r11, r22
    c3a2:	20 e0       	ldi	r18, 0x00	; 0
    c3a4:	30 e0       	ldi	r19, 0x00	; 0
    c3a6:	40 e0       	ldi	r20, 0x00	; 0
    c3a8:	50 e4       	ldi	r21, 0x40	; 64
    c3aa:	d4 01       	movw	r26, r8
    c3ac:	13 96       	adiw	r26, 0x03	; 3
    c3ae:	6d 91       	ld	r22, X+
    c3b0:	7d 91       	ld	r23, X+
    c3b2:	8d 91       	ld	r24, X+
    c3b4:	9c 91       	ld	r25, X
    c3b6:	16 97       	sbiw	r26, 0x06	; 6
    c3b8:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c3bc:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c3c0:	86 2f       	mov	r24, r22
    c3c2:	38 e0       	ldi	r19, 0x08	; 8
    c3c4:	a3 2e       	mov	r10, r19
    c3c6:	48 e0       	ldi	r20, 0x08	; 8
    c3c8:	c4 2e       	mov	r12, r20
    c3ca:	24 e0       	ldi	r18, 0x04	; 4
    c3cc:	44 e0       	ldi	r20, 0x04	; 4
    c3ce:	6b 2d       	mov	r22, r11
    c3d0:	0e 94 99 57 	call	0xaf32	; 0xaf32 <LBCollides>
    c3d4:	88 23       	and	r24, r24
    c3d6:	09 f4       	brne	.+2      	; 0xc3da <collision_detect_shot+0x25a>
    c3d8:	b4 cf       	rjmp	.-152    	; 0xc342 <collision_detect_shot+0x1c2>
		{
			hit = hit | HIT_BRICK;
    c3da:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    c3dc:	dd 80       	ldd	r13, Y+5	; 0x05
    c3de:	b1 cf       	rjmp	.-158    	; 0xc342 <collision_detect_shot+0x1c2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    c3e0:	b2 e0       	ldi	r27, 0x02	; 2
    c3e2:	eb 12       	cpse	r14, r27
    c3e4:	ae cf       	rjmp	.-164    	; 0xc342 <collision_detect_shot+0x1c2>
    c3e6:	c5 01       	movw	r24, r10
    c3e8:	b1 01       	movw	r22, r2
    c3ea:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c3ee:	6d 5f       	subi	r22, 0xFD	; 253
    c3f0:	7f 4f       	sbci	r23, 0xFF	; 255
    c3f2:	e6 2e       	mov	r14, r22
    c3f4:	ee 0c       	add	r14, r14
    c3f6:	ee 0c       	add	r14, r14
    c3f8:	ee 0c       	add	r14, r14
    c3fa:	08 2f       	mov	r16, r24
    c3fc:	00 0f       	add	r16, r16
    c3fe:	00 0f       	add	r16, r16
    c400:	00 0f       	add	r16, r16
    c402:	20 e0       	ldi	r18, 0x00	; 0
    c404:	30 e0       	ldi	r19, 0x00	; 0
    c406:	40 e0       	ldi	r20, 0x00	; 0
    c408:	50 e4       	ldi	r21, 0x40	; 64
    c40a:	f4 01       	movw	r30, r8
    c40c:	67 81       	ldd	r22, Z+7	; 0x07
    c40e:	70 85       	ldd	r23, Z+8	; 0x08
    c410:	81 85       	ldd	r24, Z+9	; 0x09
    c412:	92 85       	ldd	r25, Z+10	; 0x0a
    c414:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c418:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c41c:	b6 2e       	mov	r11, r22
    c41e:	20 e0       	ldi	r18, 0x00	; 0
    c420:	30 e0       	ldi	r19, 0x00	; 0
    c422:	40 e0       	ldi	r20, 0x00	; 0
    c424:	50 e4       	ldi	r21, 0x40	; 64
    c426:	d4 01       	movw	r26, r8
    c428:	13 96       	adiw	r26, 0x03	; 3
    c42a:	6d 91       	ld	r22, X+
    c42c:	7d 91       	ld	r23, X+
    c42e:	8d 91       	ld	r24, X+
    c430:	9c 91       	ld	r25, X
    c432:	16 97       	sbiw	r26, 0x06	; 6
    c434:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    c438:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c43c:	86 2f       	mov	r24, r22
    c43e:	98 e0       	ldi	r25, 0x08	; 8
    c440:	a9 2e       	mov	r10, r25
    c442:	28 e0       	ldi	r18, 0x08	; 8
    c444:	c2 2e       	mov	r12, r18
    c446:	24 e0       	ldi	r18, 0x04	; 4
    c448:	44 e0       	ldi	r20, 0x04	; 4
    c44a:	6b 2d       	mov	r22, r11
    c44c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <LBCollides>
    c450:	88 23       	and	r24, r24
    c452:	09 f4       	brne	.+2      	; 0xc456 <collision_detect_shot+0x2d6>
    c454:	76 cf       	rjmp	.-276    	; 0xc342 <collision_detect_shot+0x1c2>
        {
		    hit = hit | HIT_METAL;
    c456:	11 60       	ori	r17, 0x01	; 1
    c458:	74 cf       	rjmp	.-280    	; 0xc342 <collision_detect_shot+0x1c2>
        }
	}
	
	if (hit & HIT_ANGLE)
    c45a:	12 ff       	sbrs	r17, 2
    c45c:	0e c0       	rjmp	.+28     	; 0xc47a <collision_detect_shot+0x2fa>
	{
		recoil_sprite_fine(&shot->shared);
    c45e:	c4 01       	movw	r24, r8
    c460:	0e 94 ab 5d 	call	0xbb56	; 0xbb56 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    c464:	b4 01       	movw	r22, r8
    c466:	8f 2d       	mov	r24, r15
    c468:	0e 94 9f 60 	call	0xc13e	; 0xc13e <richochet>
		shot->rebounds--;
    c46c:	f4 01       	movw	r30, r8
    c46e:	85 85       	ldd	r24, Z+13	; 0x0d
    c470:	81 50       	subi	r24, 0x01	; 1
    c472:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    c474:	81 11       	cpse	r24, r1
    c476:	3a c0       	rjmp	.+116    	; 0xc4ec <collision_detect_shot+0x36c>
    c478:	2e c0       	rjmp	.+92     	; 0xc4d6 <collision_detect_shot+0x356>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    c47a:	11 ff       	sbrs	r17, 1
    c47c:	29 c0       	rjmp	.+82     	; 0xc4d0 <collision_detect_shot+0x350>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    c47e:	fe 01       	movw	r30, r28
    c480:	31 96       	adiw	r30, 0x01	; 1
    c482:	7f 01       	movw	r14, r30
    c484:	ed 0c       	add	r14, r13
    c486:	f1 1c       	adc	r15, r1
    c488:	ed 0c       	add	r14, r13
    c48a:	f1 1c       	adc	r15, r1
    c48c:	d7 01       	movw	r26, r14
    c48e:	6d 91       	ld	r22, X+
    c490:	7c 91       	ld	r23, X
    c492:	8c e0       	ldi	r24, 0x0C	; 12
    c494:	9c e0       	ldi	r25, 0x0C	; 12
    c496:	0e 94 61 60 	call	0xc0c2	; 0xc0c2 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    c49a:	d7 01       	movw	r26, r14
    c49c:	ed 91       	ld	r30, X+
    c49e:	fc 91       	ld	r31, X
    c4a0:	e6 56       	subi	r30, 0x66	; 102
    c4a2:	f3 4f       	sbci	r31, 0xF3	; 243
    c4a4:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    c4a6:	f4 01       	movw	r30, r8
    c4a8:	84 85       	ldd	r24, Z+12	; 0x0c
    c4aa:	81 50       	subi	r24, 0x01	; 1
    c4ac:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    c4ae:	81 11       	cpse	r24, r1
    c4b0:	0b c0       	rjmp	.+22     	; 0xc4c8 <collision_detect_shot+0x348>
		{
			init_shot_state(shot, shot->shot_type);
    c4b2:	63 85       	ldd	r22, Z+11	; 0x0b
    c4b4:	c4 01       	movw	r24, r8
    c4b6:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
			player->active_shots--;
    c4ba:	d3 01       	movw	r26, r6
    c4bc:	51 96       	adiw	r26, 0x11	; 17
    c4be:	8c 91       	ld	r24, X
    c4c0:	51 97       	sbiw	r26, 0x11	; 17
    c4c2:	81 50       	subi	r24, 0x01	; 1
    c4c4:	51 96       	adiw	r26, 0x11	; 17
    c4c6:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    c4c8:	2f ed       	ldi	r18, 0xDF	; 223
    c4ca:	47 e1       	ldi	r20, 0x17	; 23
    c4cc:	61 e0       	ldi	r22, 0x01	; 1
    c4ce:	11 c0       	rjmp	.+34     	; 0xc4f2 <collision_detect_shot+0x372>
	}
	else if (hit & HIT_METAL)
    c4d0:	10 ff       	sbrs	r17, 0
    c4d2:	12 c0       	rjmp	.+36     	; 0xc4f8 <collision_detect_shot+0x378>
	{
        init_shot_state(shot, shot->shot_type);
    c4d4:	f4 01       	movw	r30, r8
    c4d6:	63 85       	ldd	r22, Z+11	; 0x0b
    c4d8:	c4 01       	movw	r24, r8
    c4da:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
        player->active_shots--;
    c4de:	d3 01       	movw	r26, r6
    c4e0:	51 96       	adiw	r26, 0x11	; 17
    c4e2:	8c 91       	ld	r24, X
    c4e4:	51 97       	sbiw	r26, 0x11	; 17
    c4e6:	81 50       	subi	r24, 0x01	; 1
    c4e8:	51 96       	adiw	r26, 0x11	; 17
    c4ea:	8c 93       	st	X, r24
        SFX_METAL;
    c4ec:	2f ef       	ldi	r18, 0xFF	; 255
    c4ee:	47 e1       	ldi	r20, 0x17	; 23
    c4f0:	66 e0       	ldi	r22, 0x06	; 6
    c4f2:	84 e0       	ldi	r24, 0x04	; 4
    c4f4:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
	}
}
    c4f8:	0f 90       	pop	r0
    c4fa:	0f 90       	pop	r0
    c4fc:	0f 90       	pop	r0
    c4fe:	0f 90       	pop	r0
    c500:	0f 90       	pop	r0
    c502:	df 91       	pop	r29
    c504:	cf 91       	pop	r28
    c506:	1f 91       	pop	r17
    c508:	0f 91       	pop	r16
    c50a:	ff 90       	pop	r15
    c50c:	ef 90       	pop	r14
    c50e:	df 90       	pop	r13
    c510:	cf 90       	pop	r12
    c512:	bf 90       	pop	r11
    c514:	af 90       	pop	r10
    c516:	9f 90       	pop	r9
    c518:	8f 90       	pop	r8
    c51a:	7f 90       	pop	r7
    c51c:	6f 90       	pop	r6
    c51e:	5f 90       	pop	r5
    c520:	4f 90       	pop	r4
    c522:	3f 90       	pop	r3
    c524:	2f 90       	pop	r2
    c526:	08 95       	ret

0000c528 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    c528:	fc 01       	movw	r30, r24
    c52a:	8e e1       	ldi	r24, 0x1E	; 30
    c52c:	48 9f       	mul	r20, r24
    c52e:	a0 01       	movw	r20, r0
    c530:	11 24       	eor	r1, r1
    c532:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    c534:	64 0f       	add	r22, r20
    c536:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    c538:	21 11       	cpse	r18, r1
    c53a:	09 c0       	rjmp	.+18     	; 0xc54e <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    c53c:	71 83       	std	Z+1, r23	; 0x01
    c53e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    c540:	cb 01       	movw	r24, r22
    c542:	01 96       	adiw	r24, 0x01	; 1
    c544:	93 83       	std	Z+3, r25	; 0x03
    c546:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c548:	6e 5f       	subi	r22, 0xFE	; 254
    c54a:	7f 4f       	sbci	r23, 0xFF	; 255
    c54c:	1c c0       	rjmp	.+56     	; 0xc586 <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    c54e:	21 30       	cpi	r18, 0x01	; 1
    c550:	31 f4       	brne	.+12     	; 0xc55e <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    c552:	cb 01       	movw	r24, r22
    c554:	02 96       	adiw	r24, 0x02	; 2
    c556:	91 83       	std	Z+1, r25	; 0x01
    c558:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c55a:	4e 96       	adiw	r24, 0x1e	; 30
    c55c:	07 c0       	rjmp	.+14     	; 0xc56c <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c55e:	22 30       	cpi	r18, 0x02	; 2
    c560:	51 f4       	brne	.+20     	; 0xc576 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    c562:	cb 01       	movw	r24, r22
    c564:	cc 96       	adiw	r24, 0x3c	; 60
    c566:	91 83       	std	Z+1, r25	; 0x01
    c568:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c56a:	01 96       	adiw	r24, 0x01	; 1
    c56c:	93 83       	std	Z+3, r25	; 0x03
    c56e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c570:	62 5c       	subi	r22, 0xC2	; 194
    c572:	7f 4f       	sbci	r23, 0xFF	; 255
    c574:	08 c0       	rjmp	.+16     	; 0xc586 <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    c576:	71 83       	std	Z+1, r23	; 0x01
    c578:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c57a:	cb 01       	movw	r24, r22
    c57c:	4e 96       	adiw	r24, 0x1e	; 30
    c57e:	93 83       	std	Z+3, r25	; 0x03
    c580:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    c582:	64 5c       	subi	r22, 0xC4	; 196
    c584:	7f 4f       	sbci	r23, 0xFF	; 255
    c586:	75 83       	std	Z+5, r23	; 0x05
    c588:	64 83       	std	Z+4, r22	; 0x04
    c58a:	08 95       	ret

0000c58c <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c58c:	2f 92       	push	r2
    c58e:	3f 92       	push	r3
    c590:	4f 92       	push	r4
    c592:	5f 92       	push	r5
    c594:	6f 92       	push	r6
    c596:	7f 92       	push	r7
    c598:	8f 92       	push	r8
    c59a:	9f 92       	push	r9
    c59c:	af 92       	push	r10
    c59e:	bf 92       	push	r11
    c5a0:	cf 92       	push	r12
    c5a2:	df 92       	push	r13
    c5a4:	ef 92       	push	r14
    c5a6:	ff 92       	push	r15
    c5a8:	0f 93       	push	r16
    c5aa:	1f 93       	push	r17
    c5ac:	cf 93       	push	r28
    c5ae:	df 93       	push	r29
    c5b0:	cd b7       	in	r28, 0x3d	; 61
    c5b2:	de b7       	in	r29, 0x3e	; 62
    c5b4:	2d 97       	sbiw	r28, 0x0d	; 13
    c5b6:	0f b6       	in	r0, 0x3f	; 63
    c5b8:	f8 94       	cli
    c5ba:	de bf       	out	0x3e, r29	; 62
    c5bc:	0f be       	out	0x3f, r0	; 63
    c5be:	cd bf       	out	0x3d, r28	; 61
    c5c0:	4c 01       	movw	r8, r24
    c5c2:	7a 87       	std	Y+10, r23	; 0x0a
    c5c4:	69 87       	std	Y+9, r22	; 0x09
    c5c6:	14 2f       	mov	r17, r20
    c5c8:	f2 2e       	mov	r15, r18
	int tiles[3] = {0,0,0};
    c5ca:	1a 82       	std	Y+2, r1	; 0x02
    c5cc:	19 82       	std	Y+1, r1	; 0x01
    c5ce:	1c 82       	std	Y+4, r1	; 0x04
    c5d0:	1b 82       	std	Y+3, r1	; 0x03
    c5d2:	1e 82       	std	Y+6, r1	; 0x06
    c5d4:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c5d6:	20 e0       	ldi	r18, 0x00	; 0
    c5d8:	30 e0       	ldi	r19, 0x00	; 0
    c5da:	40 e0       	ldi	r20, 0x00	; 0
    c5dc:	5e e3       	ldi	r21, 0x3E	; 62
    c5de:	dc 01       	movw	r26, r24
    c5e0:	17 96       	adiw	r26, 0x07	; 7
    c5e2:	6d 91       	ld	r22, X+
    c5e4:	7d 91       	ld	r23, X+
    c5e6:	8d 91       	ld	r24, X+
    c5e8:	9c 91       	ld	r25, X
    c5ea:	1a 97       	sbiw	r26, 0x0a	; 10
    c5ec:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    c5f0:	20 e0       	ldi	r18, 0x00	; 0
    c5f2:	30 e0       	ldi	r19, 0x00	; 0
    c5f4:	40 e4       	ldi	r20, 0x40	; 64
    c5f6:	50 e4       	ldi	r21, 0x40	; 64
    c5f8:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    c5fc:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c600:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c602:	20 e0       	ldi	r18, 0x00	; 0
    c604:	30 e0       	ldi	r19, 0x00	; 0
    c606:	40 e0       	ldi	r20, 0x00	; 0
    c608:	5e e3       	ldi	r21, 0x3E	; 62
    c60a:	f4 01       	movw	r30, r8
    c60c:	63 81       	ldd	r22, Z+3	; 0x03
    c60e:	74 81       	ldd	r23, Z+4	; 0x04
    c610:	85 81       	ldd	r24, Z+5	; 0x05
    c612:	96 81       	ldd	r25, Z+6	; 0x06
    c614:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    c618:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	u8 hit_water = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c61c:	d4 01       	movw	r26, r8
    c61e:	2c 91       	ld	r18, X
    c620:	40 2f       	mov	r20, r16
    c622:	ce 01       	movw	r24, r28
    c624:	01 96       	adiw	r24, 0x01	; 1
    c626:	0e 94 94 62 	call	0xc528	; 0xc528 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c62a:	c4 01       	movw	r24, r8
    c62c:	0e 94 54 5f 	call	0xbea8	; 0xbea8 <collision_detect_boundries>
    c630:	88 23       	and	r24, r24
    c632:	31 f0       	breq	.+12     	; 0xc640 <collision_detect_player+0xb4>
	{
		recoil_sprite(&player->shared);
    c634:	c4 01       	movw	r24, r8
    c636:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <recoil_sprite>
		player->shared.speed = 0;
    c63a:	f4 01       	movw	r30, r8
    c63c:	11 82       	std	Z+1, r1	; 0x01
    c63e:	31 c1       	rjmp	.+610    	; 0xc8a2 <collision_detect_player+0x316>
    c640:	ce 01       	movw	r24, r28
    c642:	01 96       	adiw	r24, 0x01	; 1
    c644:	3c 01       	movw	r6, r24
    c646:	de 01       	movw	r26, r28
    c648:	17 96       	adiw	r26, 0x07	; 7
    c64a:	b8 87       	std	Y+8, r27	; 0x08
    c64c:	af 83       	std	Y+7, r26	; 0x07
	u8 hit_water = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c64e:	d1 2c       	mov	r13, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c650:	5e e1       	ldi	r21, 0x1E	; 30
    c652:	25 2e       	mov	r2, r21
    c654:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c656:	bb e0       	ldi	r27, 0x0B	; 11
    c658:	b1 0f       	add	r27, r17
    c65a:	bb 87       	std	Y+11, r27	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c65c:	ea e0       	ldi	r30, 0x0A	; 10
    c65e:	e1 0f       	add	r30, r17
    c660:	ec 87       	std	Y+12, r30	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c662:	d3 01       	movw	r26, r6
    c664:	4d 90       	ld	r4, X+
    c666:	5c 90       	ld	r5, X
    c668:	c2 01       	movw	r24, r4
    c66a:	0e 94 3b 5e 	call	0xbc76	; 0xbc76 <solid_directional_tile>
    c66e:	88 23       	and	r24, r24
    c670:	49 f1       	breq	.+82     	; 0xc6c4 <collision_detect_player+0x138>
    c672:	f4 01       	movw	r30, r8
    c674:	67 81       	ldd	r22, Z+7	; 0x07
    c676:	70 85       	ldd	r23, Z+8	; 0x08
    c678:	81 85       	ldd	r24, Z+9	; 0x09
    c67a:	92 85       	ldd	r25, Z+10	; 0x0a
    c67c:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c680:	46 2f       	mov	r20, r22
    c682:	d4 01       	movw	r26, r8
    c684:	13 96       	adiw	r26, 0x03	; 3
    c686:	6d 91       	ld	r22, X+
    c688:	7d 91       	ld	r23, X+
    c68a:	8d 91       	ld	r24, X+
    c68c:	9c 91       	ld	r25, X
    c68e:	16 97       	sbiw	r26, 0x06	; 6
    c690:	4d 87       	std	Y+13, r20	; 0x0d
    c692:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c696:	00 e1       	ldi	r16, 0x10	; 16
    c698:	20 e1       	ldi	r18, 0x10	; 16
    c69a:	4d 85       	ldd	r20, Y+13	; 0x0d
    c69c:	c2 01       	movw	r24, r4
    c69e:	0e 94 51 5e 	call	0xbca2	; 0xbca2 <collides_directional_tile>
    c6a2:	88 23       	and	r24, r24
    c6a4:	79 f0       	breq	.+30     	; 0xc6c4 <collision_detect_player+0x138>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    c6a6:	f4 01       	movw	r30, r8
    c6a8:	83 85       	ldd	r24, Z+11	; 0x0b
    c6aa:	89 30       	cpi	r24, 0x09	; 9
    c6ac:	21 f4       	brne	.+8      	; 0xc6b6 <collision_detect_player+0x12a>
    c6ae:	c4 01       	movw	r24, r8
    c6b0:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <recoil_sprite>
    c6b4:	03 c0       	rjmp	.+6      	; 0xc6bc <collision_detect_player+0x130>
    c6b6:	c4 01       	movw	r24, r8
    c6b8:	0e 94 ab 5d 	call	0xbb56	; 0xbb56 <recoil_sprite_fine>
			player->shared.speed = 0;
    c6bc:	d4 01       	movw	r26, r8
    c6be:	11 96       	adiw	r26, 0x01	; 1
    c6c0:	1c 92       	st	X, r1
    c6c2:	d9 c0       	rjmp	.+434    	; 0xc876 <collision_detect_player+0x2ea>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c6c4:	c2 01       	movw	r24, r4
    c6c6:	0e 94 0f 5e 	call	0xbc1e	; 0xbc1e <solid_square_tile>
    c6ca:	88 23       	and	r24, r24
    c6cc:	89 f1       	breq	.+98     	; 0xc730 <collision_detect_player+0x1a4>
    c6ce:	c2 01       	movw	r24, r4
    c6d0:	b1 01       	movw	r22, r2
    c6d2:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c6d6:	6d 5f       	subi	r22, 0xFD	; 253
    c6d8:	7f 4f       	sbci	r23, 0xFF	; 255
    c6da:	e6 2e       	mov	r14, r22
    c6dc:	ee 0c       	add	r14, r14
    c6de:	ee 0c       	add	r14, r14
    c6e0:	ee 0c       	add	r14, r14
    c6e2:	08 2f       	mov	r16, r24
    c6e4:	00 0f       	add	r16, r16
    c6e6:	00 0f       	add	r16, r16
    c6e8:	00 0f       	add	r16, r16
    c6ea:	f4 01       	movw	r30, r8
    c6ec:	67 81       	ldd	r22, Z+7	; 0x07
    c6ee:	70 85       	ldd	r23, Z+8	; 0x08
    c6f0:	81 85       	ldd	r24, Z+9	; 0x09
    c6f2:	92 85       	ldd	r25, Z+10	; 0x0a
    c6f4:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c6f8:	b6 2e       	mov	r11, r22
    c6fa:	d4 01       	movw	r26, r8
    c6fc:	13 96       	adiw	r26, 0x03	; 3
    c6fe:	6d 91       	ld	r22, X+
    c700:	7d 91       	ld	r23, X+
    c702:	8d 91       	ld	r24, X+
    c704:	9c 91       	ld	r25, X
    c706:	16 97       	sbiw	r26, 0x06	; 6
    c708:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c70c:	86 2f       	mov	r24, r22
    c70e:	38 e0       	ldi	r19, 0x08	; 8
    c710:	a3 2e       	mov	r10, r19
    c712:	48 e0       	ldi	r20, 0x08	; 8
    c714:	c4 2e       	mov	r12, r20
    c716:	20 e1       	ldi	r18, 0x10	; 16
    c718:	40 e1       	ldi	r20, 0x10	; 16
    c71a:	6b 2d       	mov	r22, r11
    c71c:	0e 94 99 57 	call	0xaf32	; 0xaf32 <LBCollides>
    c720:	88 23       	and	r24, r24
    c722:	31 f0       	breq	.+12     	; 0xc730 <collision_detect_player+0x1a4>
		{
			recoil_sprite(&player->shared);
    c724:	c4 01       	movw	r24, r8
    c726:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <recoil_sprite>
			player->shared.speed = 0;
    c72a:	f4 01       	movw	r30, r8
    c72c:	11 82       	std	Z+1, r1	; 0x01
    c72e:	a3 c0       	rjmp	.+326    	; 0xc876 <collision_detect_player+0x2ea>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    c730:	f2 01       	movw	r30, r4
    c732:	e6 56       	subi	r30, 0x66	; 102
    c734:	f3 4f       	sbci	r31, 0xF3	; 243
    c736:	81 81       	ldd	r24, Z+1	; 0x01
    c738:	8d 34       	cpi	r24, 0x4D	; 77
    c73a:	89 f5       	brne	.+98     	; 0xc79e <collision_detect_player+0x212>
    c73c:	c2 01       	movw	r24, r4
    c73e:	b1 01       	movw	r22, r2
    c740:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c744:	6d 5f       	subi	r22, 0xFD	; 253
    c746:	7f 4f       	sbci	r23, 0xFF	; 255
    c748:	e6 2e       	mov	r14, r22
    c74a:	ee 0c       	add	r14, r14
    c74c:	ee 0c       	add	r14, r14
    c74e:	ee 0c       	add	r14, r14
    c750:	08 2f       	mov	r16, r24
    c752:	00 0f       	add	r16, r16
    c754:	00 0f       	add	r16, r16
    c756:	00 0f       	add	r16, r16
    c758:	d4 01       	movw	r26, r8
    c75a:	17 96       	adiw	r26, 0x07	; 7
    c75c:	6d 91       	ld	r22, X+
    c75e:	7d 91       	ld	r23, X+
    c760:	8d 91       	ld	r24, X+
    c762:	9c 91       	ld	r25, X
    c764:	1a 97       	sbiw	r26, 0x0a	; 10
    c766:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c76a:	b6 2e       	mov	r11, r22
    c76c:	f4 01       	movw	r30, r8
    c76e:	63 81       	ldd	r22, Z+3	; 0x03
    c770:	74 81       	ldd	r23, Z+4	; 0x04
    c772:	85 81       	ldd	r24, Z+5	; 0x05
    c774:	96 81       	ldd	r25, Z+6	; 0x06
    c776:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    c77a:	86 2f       	mov	r24, r22
    c77c:	98 e0       	ldi	r25, 0x08	; 8
    c77e:	a9 2e       	mov	r10, r25
    c780:	28 e0       	ldi	r18, 0x08	; 8
    c782:	c2 2e       	mov	r12, r18
    c784:	20 e1       	ldi	r18, 0x10	; 16
    c786:	40 e1       	ldi	r20, 0x10	; 16
    c788:	6b 2d       	mov	r22, r11
    c78a:	0e 94 99 57 	call	0xaf32	; 0xaf32 <LBCollides>
    c78e:	88 23       	and	r24, r24
    c790:	09 f4       	brne	.+2      	; 0xc794 <collision_detect_player+0x208>
    c792:	71 c0       	rjmp	.+226    	; 0xc876 <collision_detect_player+0x2ea>
		{
			player->max_speed = WATER_SPEED;
    c794:	e9 e1       	ldi	r30, 0x19	; 25
    c796:	d4 01       	movw	r26, r8
    c798:	58 96       	adiw	r26, 0x18	; 24
    c79a:	ec 93       	st	X, r30
    c79c:	77 c0       	rjmp	.+238    	; 0xc88c <collision_detect_player+0x300>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c79e:	87 30       	cpi	r24, 0x07	; 7
    c7a0:	99 f4       	brne	.+38     	; 0xc7c8 <collision_detect_player+0x23c>
    c7a2:	d4 01       	movw	r26, r8
    c7a4:	54 96       	adiw	r26, 0x14	; 20
    c7a6:	8c 91       	ld	r24, X
    c7a8:	54 97       	sbiw	r26, 0x14	; 20
    c7aa:	80 fd       	sbrc	r24, 0
    c7ac:	64 c0       	rjmp	.+200    	; 0xc876 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c7ae:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c7b0:	e1 e4       	ldi	r30, 0x41	; 65
    c7b2:	58 96       	adiw	r26, 0x18	; 24
    c7b4:	ec 93       	st	X, r30
    c7b6:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    c7b8:	f1 e0       	ldi	r31, 0x01	; 1
    c7ba:	5a 96       	adiw	r26, 0x1a	; 26
    c7bc:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c7be:	4f e5       	ldi	r20, 0x5F	; 95
    c7c0:	58 e8       	ldi	r21, 0x88	; 136
    c7c2:	61 e0       	ldi	r22, 0x01	; 1
    c7c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    c7c6:	10 c0       	rjmp	.+32     	; 0xc7e8 <collision_detect_player+0x25c>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c7c8:	89 30       	cpi	r24, 0x09	; 9
    c7ca:	11 f5       	brne	.+68     	; 0xc810 <collision_detect_player+0x284>
    c7cc:	d4 01       	movw	r26, r8
    c7ce:	54 96       	adiw	r26, 0x14	; 20
    c7d0:	8c 91       	ld	r24, X
    c7d2:	54 97       	sbiw	r26, 0x14	; 20
    c7d4:	80 fd       	sbrc	r24, 0
    c7d6:	4f c0       	rjmp	.+158    	; 0xc876 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c7d8:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c7da:	e1 e0       	ldi	r30, 0x01	; 1
    c7dc:	59 96       	adiw	r26, 0x19	; 25
    c7de:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c7e0:	49 e5       	ldi	r20, 0x59	; 89
    c7e2:	58 e8       	ldi	r21, 0x88	; 136
    c7e4:	61 e0       	ldi	r22, 0x01	; 1
    c7e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    c7e8:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c7ec:	d3 01       	movw	r26, r6
    c7ee:	8d 91       	ld	r24, X+
    c7f0:	9c 91       	ld	r25, X
    c7f2:	b1 01       	movw	r22, r2
    c7f4:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c7f8:	6d 5f       	subi	r22, 0xFD	; 253
    c7fa:	40 e0       	ldi	r20, 0x00	; 0
    c7fc:	50 e0       	ldi	r21, 0x00	; 0
    c7fe:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
			SFX_ITEM;
    c802:	2f ef       	ldi	r18, 0xFF	; 255
    c804:	47 e1       	ldi	r20, 0x17	; 23
    c806:	63 e0       	ldi	r22, 0x03	; 3
    c808:	84 e0       	ldi	r24, 0x04	; 4
    c80a:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
    c80e:	33 c0       	rjmp	.+102    	; 0xc876 <collision_detect_player+0x2ea>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c810:	88 30       	cpi	r24, 0x08	; 8
    c812:	89 f5       	brne	.+98     	; 0xc876 <collision_detect_player+0x2ea>
    c814:	d4 01       	movw	r26, r8
    c816:	54 96       	adiw	r26, 0x14	; 20
    c818:	8c 91       	ld	r24, X
    c81a:	80 fd       	sbrc	r24, 0
    c81c:	2c c0       	rjmp	.+88     	; 0xc876 <collision_detect_player+0x2ea>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c81e:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    c820:	c2 01       	movw	r24, r4
    c822:	b1 01       	movw	r22, r2
    c824:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    c828:	6d 5f       	subi	r22, 0xFD	; 253
    c82a:	40 e0       	ldi	r20, 0x00	; 0
    c82c:	50 e0       	ldi	r21, 0x00	; 0
    c82e:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
			SFX_ITEM;
    c832:	2f ef       	ldi	r18, 0xFF	; 255
    c834:	47 e1       	ldi	r20, 0x17	; 23
    c836:	63 e0       	ldi	r22, 0x03	; 3
    c838:	84 e0       	ldi	r24, 0x04	; 4
    c83a:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    c83e:	e9 85       	ldd	r30, Y+9	; 0x09
    c840:	fa 85       	ldd	r31, Y+10	; 0x0a
    c842:	84 89       	ldd	r24, Z+20	; 0x14
    c844:	80 fd       	sbrc	r24, 0
    c846:	17 c0       	rjmp	.+46     	; 0xc876 <collision_detect_player+0x2ea>
			{
				player->level_score++;
    c848:	d4 01       	movw	r26, r8
    c84a:	50 96       	adiw	r26, 0x10	; 16
    c84c:	8c 91       	ld	r24, X
    c84e:	50 97       	sbiw	r26, 0x10	; 16
    c850:	8f 5f       	subi	r24, 0xFF	; 255
    c852:	50 96       	adiw	r26, 0x10	; 16
    c854:	8c 93       	st	X, r24
    c856:	50 97       	sbiw	r26, 0x10	; 16
				player->score++;
    c858:	1f 96       	adiw	r26, 0x0f	; 15
    c85a:	8c 91       	ld	r24, X
    c85c:	1f 97       	sbiw	r26, 0x0f	; 15
    c85e:	8f 5f       	subi	r24, 0xFF	; 255
    c860:	1f 96       	adiw	r26, 0x0f	; 15
    c862:	8c 93       	st	X, r24
				render_score(player, hud_x);
    c864:	61 2f       	mov	r22, r17
    c866:	c4 01       	movw	r24, r8
    c868:	0e 94 b0 5b 	call	0xb760	; 0xb760 <render_score>
				kill_player(other_player, other_player_hud_x);
    c86c:	6f 2d       	mov	r22, r15
    c86e:	89 85       	ldd	r24, Y+9	; 0x09
    c870:	9a 85       	ldd	r25, Y+10	; 0x0a
    c872:	0e 94 e5 5f 	call	0xbfca	; 0xbfca <kill_player>
			}
		}
		
		if (!hit_water)
    c876:	d1 10       	cpse	r13, r1
    c878:	09 c0       	rjmp	.+18     	; 0xc88c <collision_detect_player+0x300>
		{
			player->max_speed = MAX_SPEED;
    c87a:	82 e3       	ldi	r24, 0x32	; 50
    c87c:	f4 01       	movw	r30, r8
    c87e:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c880:	82 8d       	ldd	r24, Z+26	; 0x1a
    c882:	88 23       	and	r24, r24
    c884:	29 f0       	breq	.+10     	; 0xc890 <collision_detect_player+0x304>
    c886:	91 e4       	ldi	r25, 0x41	; 65
    c888:	90 8f       	std	Z+24, r25	; 0x18
    c88a:	02 c0       	rjmp	.+4      	; 0xc890 <collision_detect_player+0x304>
    c88c:	dd 24       	eor	r13, r13
    c88e:	d3 94       	inc	r13
    c890:	a2 e0       	ldi	r26, 0x02	; 2
    c892:	6a 0e       	add	r6, r26
    c894:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c896:	ef 81       	ldd	r30, Y+7	; 0x07
    c898:	f8 85       	ldd	r31, Y+8	; 0x08
    c89a:	6e 16       	cp	r6, r30
    c89c:	7f 06       	cpc	r7, r31
    c89e:	09 f0       	breq	.+2      	; 0xc8a2 <collision_detect_player+0x316>
    c8a0:	e0 ce       	rjmp	.-576    	; 0xc662 <collision_detect_player+0xd6>
		{
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
}
    c8a2:	2d 96       	adiw	r28, 0x0d	; 13
    c8a4:	0f b6       	in	r0, 0x3f	; 63
    c8a6:	f8 94       	cli
    c8a8:	de bf       	out	0x3e, r29	; 62
    c8aa:	0f be       	out	0x3f, r0	; 63
    c8ac:	cd bf       	out	0x3d, r28	; 61
    c8ae:	df 91       	pop	r29
    c8b0:	cf 91       	pop	r28
    c8b2:	1f 91       	pop	r17
    c8b4:	0f 91       	pop	r16
    c8b6:	ff 90       	pop	r15
    c8b8:	ef 90       	pop	r14
    c8ba:	df 90       	pop	r13
    c8bc:	cf 90       	pop	r12
    c8be:	bf 90       	pop	r11
    c8c0:	af 90       	pop	r10
    c8c2:	9f 90       	pop	r9
    c8c4:	8f 90       	pop	r8
    c8c6:	7f 90       	pop	r7
    c8c8:	6f 90       	pop	r6
    c8ca:	5f 90       	pop	r5
    c8cc:	4f 90       	pop	r4
    c8ce:	3f 90       	pop	r3
    c8d0:	2f 90       	pop	r2
    c8d2:	08 95       	ret

0000c8d4 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c8d4:	ef 92       	push	r14
    c8d6:	ff 92       	push	r15
    c8d8:	1f 93       	push	r17
    c8da:	cf 93       	push	r28
    c8dc:	df 93       	push	r29
    c8de:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c8e0:	c0 e0       	ldi	r28, 0x00	; 0
    c8e2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c8e4:	8e e1       	ldi	r24, 0x1E	; 30
    c8e6:	e8 2e       	mov	r14, r24
    c8e8:	f1 2c       	mov	r15, r1
    c8ea:	ce 01       	movw	r24, r28
    c8ec:	b7 01       	movw	r22, r14
    c8ee:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
		y = 3 + i / 30;
    c8f2:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c8f4:	11 23       	and	r17, r17
    c8f6:	19 f0       	breq	.+6      	; 0xc8fe <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c8f8:	4c ef       	ldi	r20, 0xFC	; 252
    c8fa:	58 e8       	ldi	r21, 0x88	; 136
    c8fc:	2b c0       	rjmp	.+86     	; 0xc954 <load_level_tiles+0x80>
    c8fe:	fe 01       	movw	r30, r28
    c900:	e6 56       	subi	r30, 0x66	; 102
    c902:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c904:	91 81       	ldd	r25, Z+1	; 0x01
    c906:	96 30       	cpi	r25, 0x06	; 6
    c908:	71 f1       	breq	.+92     	; 0xc966 <load_level_tiles+0x92>
    c90a:	88 f4       	brcc	.+34     	; 0xc92e <load_level_tiles+0x5a>
    c90c:	93 30       	cpi	r25, 0x03	; 3
    c90e:	29 f1       	breq	.+74     	; 0xc95a <load_level_tiles+0x86>
    c910:	38 f4       	brcc	.+14     	; 0xc920 <load_level_tiles+0x4c>
    c912:	91 30       	cpi	r25, 0x01	; 1
    c914:	e9 f0       	breq	.+58     	; 0xc950 <load_level_tiles+0x7c>
    c916:	92 30       	cpi	r25, 0x02	; 2
    c918:	91 f5       	brne	.+100    	; 0xc97e <load_level_tiles+0xaa>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c91a:	42 e6       	ldi	r20, 0x62	; 98
    c91c:	58 e8       	ldi	r21, 0x88	; 136
    c91e:	1a c0       	rjmp	.+52     	; 0xc954 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c920:	94 30       	cpi	r25, 0x04	; 4
    c922:	f1 f0       	breq	.+60     	; 0xc960 <load_level_tiles+0x8c>
    c924:	95 30       	cpi	r25, 0x05	; 5
    c926:	59 f5       	brne	.+86     	; 0xc97e <load_level_tiles+0xaa>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c928:	44 e4       	ldi	r20, 0x44	; 68
    c92a:	58 e8       	ldi	r21, 0x88	; 136
    c92c:	13 c0       	rjmp	.+38     	; 0xc954 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c92e:	99 30       	cpi	r25, 0x09	; 9
    c930:	01 f1       	breq	.+64     	; 0xc972 <load_level_tiles+0x9e>
    c932:	38 f4       	brcc	.+14     	; 0xc942 <load_level_tiles+0x6e>
    c934:	97 30       	cpi	r25, 0x07	; 7
    c936:	d1 f0       	breq	.+52     	; 0xc96c <load_level_tiles+0x98>
    c938:	98 30       	cpi	r25, 0x08	; 8
    c93a:	09 f5       	brne	.+66     	; 0xc97e <load_level_tiles+0xaa>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c93c:	4c e5       	ldi	r20, 0x5C	; 92
    c93e:	58 e8       	ldi	r21, 0x88	; 136
    c940:	09 c0       	rjmp	.+18     	; 0xc954 <load_level_tiles+0x80>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c942:	92 34       	cpi	r25, 0x42	; 66
    c944:	c9 f0       	breq	.+50     	; 0xc978 <load_level_tiles+0xa4>
    c946:	9d 34       	cpi	r25, 0x4D	; 77
    c948:	d1 f4       	brne	.+52     	; 0xc97e <load_level_tiles+0xaa>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
    c94a:	41 e4       	ldi	r20, 0x41	; 65
    c94c:	58 e8       	ldi	r21, 0x88	; 136
    c94e:	02 c0       	rjmp	.+4      	; 0xc954 <load_level_tiles+0x80>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c950:	45 e6       	ldi	r20, 0x65	; 101
    c952:	58 e8       	ldi	r21, 0x88	; 136
    c954:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
    c958:	16 c0       	rjmp	.+44     	; 0xc986 <load_level_tiles+0xb2>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c95a:	4d e4       	ldi	r20, 0x4D	; 77
    c95c:	58 e8       	ldi	r21, 0x88	; 136
    c95e:	fa cf       	rjmp	.-12     	; 0xc954 <load_level_tiles+0x80>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c960:	47 e4       	ldi	r20, 0x47	; 71
    c962:	58 e8       	ldi	r21, 0x88	; 136
    c964:	f7 cf       	rjmp	.-18     	; 0xc954 <load_level_tiles+0x80>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c966:	4a e4       	ldi	r20, 0x4A	; 74
    c968:	58 e8       	ldi	r21, 0x88	; 136
    c96a:	f4 cf       	rjmp	.-24     	; 0xc954 <load_level_tiles+0x80>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c96c:	4f e5       	ldi	r20, 0x5F	; 95
    c96e:	58 e8       	ldi	r21, 0x88	; 136
    c970:	f1 cf       	rjmp	.-30     	; 0xc954 <load_level_tiles+0x80>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c972:	49 e5       	ldi	r20, 0x59	; 89
    c974:	58 e8       	ldi	r21, 0x88	; 136
    c976:	ee cf       	rjmp	.-36     	; 0xc954 <load_level_tiles+0x80>
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c978:	4e e3       	ldi	r20, 0x3E	; 62
    c97a:	58 e8       	ldi	r21, 0x88	; 136
    c97c:	eb cf       	rjmp	.-42     	; 0xc954 <load_level_tiles+0x80>
				case L_WATER: DrawMap2(x, y, map_water); break;
				default : SetTile(x, y, 0); break;
    c97e:	40 e0       	ldi	r20, 0x00	; 0
    c980:	50 e0       	ldi	r21, 0x00	; 0
    c982:	0e 94 87 48 	call	0x910e	; 0x910e <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c986:	21 96       	adiw	r28, 0x01	; 1
    c988:	ce 3e       	cpi	r28, 0xEE	; 238
    c98a:	82 e0       	ldi	r24, 0x02	; 2
    c98c:	d8 07       	cpc	r29, r24
    c98e:	09 f0       	breq	.+2      	; 0xc992 <load_level_tiles+0xbe>
    c990:	ac cf       	rjmp	.-168    	; 0xc8ea <load_level_tiles+0x16>
				case L_WATER: DrawMap2(x, y, map_water); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c992:	df 91       	pop	r29
    c994:	cf 91       	pop	r28
    c996:	1f 91       	pop	r17
    c998:	ff 90       	pop	r15
    c99a:	ef 90       	pop	r14
    c99c:	08 95       	ret

0000c99e <load_level>:

void load_level(int level_number)
{
    c99e:	9f 92       	push	r9
    c9a0:	af 92       	push	r10
    c9a2:	bf 92       	push	r11
    c9a4:	cf 92       	push	r12
    c9a6:	df 92       	push	r13
    c9a8:	ef 92       	push	r14
    c9aa:	ff 92       	push	r15
    c9ac:	0f 93       	push	r16
    c9ae:	1f 93       	push	r17
    c9b0:	cf 93       	push	r28
    c9b2:	df 93       	push	r29
    c9b4:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c9b6:	8e ee       	ldi	r24, 0xEE	; 238
    c9b8:	92 e0       	ldi	r25, 0x02	; 2
    c9ba:	c8 9f       	mul	r28, r24
    c9bc:	70 01       	movw	r14, r0
    c9be:	c9 9f       	mul	r28, r25
    c9c0:	f0 0c       	add	r15, r0
    c9c2:	d8 9f       	mul	r29, r24
    c9c4:	f0 0c       	add	r15, r0
    c9c6:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    c9c8:	83 e0       	ldi	r24, 0x03	; 3
    c9ca:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    c9ce:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
	game.current_level = level_number;
    c9d2:	c0 93 09 0c 	sts	0x0C09, r28
    c9d6:	8b e9       	ldi	r24, 0x9B	; 155
    c9d8:	c8 2e       	mov	r12, r24
    c9da:	8c e0       	ldi	r24, 0x0C	; 12
    c9dc:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    c9de:	c0 e0       	ldi	r28, 0x00	; 0
    c9e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    c9e2:	0e e1       	ldi	r16, 0x1E	; 30
    c9e4:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    c9e6:	92 e3       	ldi	r25, 0x32	; 50
    c9e8:	99 2e       	mov	r9, r25
    c9ea:	fe 01       	movw	r30, r28
    c9ec:	ee 0d       	add	r30, r14
    c9ee:	ff 1d       	adc	r31, r15
    c9f0:	ee 57       	subi	r30, 0x7E	; 126
    c9f2:	f6 4e       	sbci	r31, 0xE6	; 230
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c9f4:	e4 91       	lpm	r30, Z
    c9f6:	56 01       	movw	r10, r12
    c9f8:	d6 01       	movw	r26, r12
    c9fa:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c9fc:	e8 35       	cpi	r30, 0x58	; 88
    c9fe:	01 f5       	brne	.+64     	; 0xca40 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    ca00:	ce 01       	movw	r24, r28
    ca02:	b8 01       	movw	r22, r16
    ca04:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    ca08:	88 0f       	add	r24, r24
    ca0a:	88 0f       	add	r24, r24
    ca0c:	88 0f       	add	r24, r24
    ca0e:	80 93 37 0c 	sts	0x0C37, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    ca12:	6d 5f       	subi	r22, 0xFD	; 253
    ca14:	7f 4f       	sbci	r23, 0xFF	; 255
    ca16:	66 0f       	add	r22, r22
    ca18:	66 0f       	add	r22, r22
    ca1a:	66 0f       	add	r22, r22
    ca1c:	60 93 38 0c 	sts	0x0C38, r22
			player1.level_score = 0;
    ca20:	10 92 35 0c 	sts	0x0C35, r1
			player1.has_over_speed = false;
    ca24:	10 92 3f 0c 	sts	0x0C3F, r1
			player1.has_rocket = false;
    ca28:	10 92 3e 0c 	sts	0x0C3E, r1
			player1.max_speed = MAX_SPEED;
    ca2c:	90 92 3d 0c 	sts	0x0C3D, r9
			player_init_shot_state(&player1);
    ca30:	85 e2       	ldi	r24, 0x25	; 37
    ca32:	9c e0       	ldi	r25, 0x0C	; 12
    ca34:	0e 94 ce 59 	call	0xb39c	; 0xb39c <player_init_shot_state>
			player_spawn(&player1);
    ca38:	85 e2       	ldi	r24, 0x25	; 37
    ca3a:	9c e0       	ldi	r25, 0x0C	; 12
    ca3c:	0e 94 e9 59 	call	0xb3d2	; 0xb3d2 <player_spawn>
    ca40:	bf ef       	ldi	r27, 0xFF	; 255
    ca42:	cb 1a       	sub	r12, r27
    ca44:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    ca46:	f5 01       	movw	r30, r10
    ca48:	80 81       	ld	r24, Z
    ca4a:	83 36       	cpi	r24, 0x63	; 99
    ca4c:	01 f5       	brne	.+64     	; 0xca8e <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    ca4e:	ce 01       	movw	r24, r28
    ca50:	b8 01       	movw	r22, r16
    ca52:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    ca56:	88 0f       	add	r24, r24
    ca58:	88 0f       	add	r24, r24
    ca5a:	88 0f       	add	r24, r24
    ca5c:	80 93 9b 0f 	sts	0x0F9B, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    ca60:	6d 5f       	subi	r22, 0xFD	; 253
    ca62:	7f 4f       	sbci	r23, 0xFF	; 255
    ca64:	66 0f       	add	r22, r22
    ca66:	66 0f       	add	r22, r22
    ca68:	66 0f       	add	r22, r22
    ca6a:	60 93 9c 0f 	sts	0x0F9C, r22
			player2.level_score = 0;
    ca6e:	10 92 99 0f 	sts	0x0F99, r1
			player2.has_over_speed = false;
    ca72:	10 92 a3 0f 	sts	0x0FA3, r1
			player2.has_rocket = false;
    ca76:	10 92 a2 0f 	sts	0x0FA2, r1
			player2.max_speed = MAX_SPEED;
    ca7a:	90 92 a1 0f 	sts	0x0FA1, r9
			player_init_shot_state(&player2);
    ca7e:	89 e8       	ldi	r24, 0x89	; 137
    ca80:	9f e0       	ldi	r25, 0x0F	; 15
    ca82:	0e 94 ce 59 	call	0xb39c	; 0xb39c <player_init_shot_state>
			player_spawn(&player2);
    ca86:	89 e8       	ldi	r24, 0x89	; 137
    ca88:	9f e0       	ldi	r25, 0x0F	; 15
    ca8a:	0e 94 e9 59 	call	0xb3d2	; 0xb3d2 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    ca8e:	21 96       	adiw	r28, 0x01	; 1
    ca90:	ce 3e       	cpi	r28, 0xEE	; 238
    ca92:	f2 e0       	ldi	r31, 0x02	; 2
    ca94:	df 07       	cpc	r29, r31
    ca96:	09 f0       	breq	.+2      	; 0xca9a <load_level+0xfc>
    ca98:	a8 cf       	rjmp	.-176    	; 0xc9ea <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    ca9a:	60 e0       	ldi	r22, 0x00	; 0
    ca9c:	85 e2       	ldi	r24, 0x25	; 37
    ca9e:	9c e0       	ldi	r25, 0x0C	; 12
    caa0:	0e 94 93 5b 	call	0xb726	; 0xb726 <render_hud>
	render_hud(&player2, 15);
    caa4:	6f e0       	ldi	r22, 0x0F	; 15
    caa6:	89 e8       	ldi	r24, 0x89	; 137
    caa8:	9f e0       	ldi	r25, 0x0F	; 15
    caaa:	0e 94 93 5b 	call	0xb726	; 0xb726 <render_hud>
	render_score(&player1, 0);
    caae:	60 e0       	ldi	r22, 0x00	; 0
    cab0:	85 e2       	ldi	r24, 0x25	; 37
    cab2:	9c e0       	ldi	r25, 0x0C	; 12
    cab4:	0e 94 b0 5b 	call	0xb760	; 0xb760 <render_score>
	render_score(&player2, 15);
    cab8:	6f e0       	ldi	r22, 0x0F	; 15
    caba:	89 e8       	ldi	r24, 0x89	; 137
    cabc:	9f e0       	ldi	r25, 0x0F	; 15
    cabe:	0e 94 b0 5b 	call	0xb760	; 0xb760 <render_score>
	Print(14, 0, (char*) strVertSep);
    cac2:	47 ee       	ldi	r20, 0xE7	; 231
    cac4:	52 e0       	ldi	r21, 0x02	; 2
    cac6:	60 e0       	ldi	r22, 0x00	; 0
    cac8:	70 e0       	ldi	r23, 0x00	; 0
    caca:	8e e0       	ldi	r24, 0x0E	; 14
    cacc:	90 e0       	ldi	r25, 0x00	; 0
    cace:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(14, 1, (char*) strVertSep);
    cad2:	47 ee       	ldi	r20, 0xE7	; 231
    cad4:	52 e0       	ldi	r21, 0x02	; 2
    cad6:	61 e0       	ldi	r22, 0x01	; 1
    cad8:	70 e0       	ldi	r23, 0x00	; 0
    cada:	8e e0       	ldi	r24, 0x0E	; 14
    cadc:	90 e0       	ldi	r25, 0x00	; 0
    cade:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(14, 2, (char*) strVertSep);
    cae2:	47 ee       	ldi	r20, 0xE7	; 231
    cae4:	52 e0       	ldi	r21, 0x02	; 2
    cae6:	62 e0       	ldi	r22, 0x02	; 2
    cae8:	70 e0       	ldi	r23, 0x00	; 0
    caea:	8e e0       	ldi	r24, 0x0E	; 14
    caec:	90 e0       	ldi	r25, 0x00	; 0
    caee:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	load_level_tiles(false);
    caf2:	80 e0       	ldi	r24, 0x00	; 0
    caf4:	0e 94 6a 64 	call	0xc8d4	; 0xc8d4 <load_level_tiles>
	SFX_LEVEL_START;
    caf8:	2f ef       	ldi	r18, 0xFF	; 255
    cafa:	47 e1       	ldi	r20, 0x17	; 23
    cafc:	65 e0       	ldi	r22, 0x05	; 5
    cafe:	84 e0       	ldi	r24, 0x04	; 4
}
    cb00:	df 91       	pop	r29
    cb02:	cf 91       	pop	r28
    cb04:	1f 91       	pop	r17
    cb06:	0f 91       	pop	r16
    cb08:	ff 90       	pop	r15
    cb0a:	ef 90       	pop	r14
    cb0c:	df 90       	pop	r13
    cb0e:	cf 90       	pop	r12
    cb10:	bf 90       	pop	r11
    cb12:	af 90       	pop	r10
    cb14:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    cb16:	0c 94 ce 4b 	jmp	0x979c	; 0x979c <TriggerNote>

0000cb1a <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    cb1a:	cf 93       	push	r28
    cb1c:	df 93       	push	r29
    cb1e:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    cb20:	61 e0       	ldi	r22, 0x01	; 1
    cb22:	83 e0       	ldi	r24, 0x03	; 3
    cb24:	0e 94 b9 56 	call	0xad72	; 0xad72 <FadeOut>
	ClearVram();
    cb28:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ClearVram>
	clear_sprites();
    cb2c:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    cb30:	d0 e0       	ldi	r29, 0x00	; 0
    cb32:	ae 01       	movw	r20, r28
    cb34:	84 e0       	ldi	r24, 0x04	; 4
    cb36:	44 0f       	add	r20, r20
    cb38:	55 1f       	adc	r21, r21
    cb3a:	8a 95       	dec	r24
    cb3c:	e1 f7       	brne	.-8      	; 0xcb36 <level_transition+0x1c>
    cb3e:	40 5e       	subi	r20, 0xE0	; 224
    cb40:	5e 4f       	sbci	r21, 0xFE	; 254
    cb42:	6c e0       	ldi	r22, 0x0C	; 12
    cb44:	70 e0       	ldi	r23, 0x00	; 0
    cb46:	88 e0       	ldi	r24, 0x08	; 8
    cb48:	90 e0       	ldi	r25, 0x00	; 0
    cb4a:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	FadeIn(1, true);
    cb4e:	61 e0       	ldi	r22, 0x01	; 1
    cb50:	81 e0       	ldi	r24, 0x01	; 1
    cb52:	0e 94 ad 56 	call	0xad5a	; 0xad5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    cb56:	82 e0       	ldi	r24, 0x02	; 2
    cb58:	0e 94 ce 58 	call	0xb19c	; 0xb19c <LBWaitSeconds>
	FadeOut(1, true);
    cb5c:	61 e0       	ldi	r22, 0x01	; 1
    cb5e:	81 e0       	ldi	r24, 0x01	; 1
    cb60:	0e 94 b9 56 	call	0xad72	; 0xad72 <FadeOut>
	ClearVram();
    cb64:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    cb68:	60 e0       	ldi	r22, 0x00	; 0
    cb6a:	83 e0       	ldi	r24, 0x03	; 3
    cb6c:	0e 94 ad 56 	call	0xad5a	; 0xad5a <FadeIn>
	load_level(index);
    cb70:	ce 01       	movw	r24, r28
}
    cb72:	df 91       	pop	r29
    cb74:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    cb76:	0c 94 cf 64 	jmp	0xc99e	; 0xc99e <load_level>

0000cb7a <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    cb7a:	10 92 08 0c 	sts	0x0C08, r1
	clear_sprites();
    cb7e:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    cb82:	4c e1       	ldi	r20, 0x1C	; 28
    cb84:	53 e0       	ldi	r21, 0x03	; 3
    cb86:	6d e0       	ldi	r22, 0x0D	; 13
    cb88:	70 e0       	ldi	r23, 0x00	; 0
    cb8a:	87 e0       	ldi	r24, 0x07	; 7
    cb8c:	90 e0       	ldi	r25, 0x00	; 0
    cb8e:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(7, 14, (char*) str2Player);
    cb92:	4b e0       	ldi	r20, 0x0B	; 11
    cb94:	53 e0       	ldi	r21, 0x03	; 3
    cb96:	6e e0       	ldi	r22, 0x0E	; 14
    cb98:	70 e0       	ldi	r23, 0x00	; 0
    cb9a:	87 e0       	ldi	r24, 0x07	; 7
    cb9c:	90 e0       	ldi	r25, 0x00	; 0
    cb9e:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(7, 15, (char*) strHighscores);
    cba2:	41 e0       	ldi	r20, 0x01	; 1
    cba4:	53 e0       	ldi	r21, 0x03	; 3
    cba6:	6f e0       	ldi	r22, 0x0F	; 15
    cba8:	70 e0       	ldi	r23, 0x00	; 0
    cbaa:	87 e0       	ldi	r24, 0x07	; 7
    cbac:	90 e0       	ldi	r25, 0x00	; 0
    cbae:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(5, 26, (char*) strCopyright);
    cbb2:	4a e2       	ldi	r20, 0x2A	; 42
    cbb4:	53 e0       	ldi	r21, 0x03	; 3
    cbb6:	6a e1       	ldi	r22, 0x1A	; 26
    cbb8:	70 e0       	ldi	r23, 0x00	; 0
    cbba:	85 e0       	ldi	r24, 0x05	; 5
    cbbc:	90 e0       	ldi	r25, 0x00	; 0
    cbbe:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    cbc2:	48 e6       	ldi	r20, 0x68	; 104
    cbc4:	58 e8       	ldi	r21, 0x88	; 136
    cbc6:	65 e0       	ldi	r22, 0x05	; 5
    cbc8:	84 e0       	ldi	r24, 0x04	; 4
    cbca:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    cbce:	40 e0       	ldi	r20, 0x00	; 0
    cbd0:	6d e5       	ldi	r22, 0x5D	; 93
    cbd2:	74 e4       	ldi	r23, 0x44	; 68
    cbd4:	80 e0       	ldi	r24, 0x00	; 0
    cbd6:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
	SFX_SPLASH;
    cbda:	2f ef       	ldi	r18, 0xFF	; 255
    cbdc:	47 e1       	ldi	r20, 0x17	; 23
    cbde:	69 e0       	ldi	r22, 0x09	; 9
    cbe0:	84 e0       	ldi	r24, 0x04	; 4
    cbe2:	0c 94 ce 4b 	jmp	0x979c	; 0x979c <TriggerNote>

0000cbe6 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    cbe6:	ef 92       	push	r14
    cbe8:	ff 92       	push	r15
    cbea:	0f 93       	push	r16
    cbec:	1f 93       	push	r17
    cbee:	cf 93       	push	r28
    cbf0:	df 93       	push	r29
    cbf2:	1f 92       	push	r1
    cbf4:	cd b7       	in	r28, 0x3d	; 61
    cbf6:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    cbf8:	81 e0       	ldi	r24, 0x01	; 1
    cbfa:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    cbfe:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    cc02:	45 e3       	ldi	r20, 0x35	; 53
    cc04:	58 e8       	ldi	r21, 0x88	; 136
    cc06:	61 e0       	ldi	r22, 0x01	; 1
    cc08:	87 e0       	ldi	r24, 0x07	; 7
    cc0a:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    cc0e:	4f e2       	ldi	r20, 0x2F	; 47
    cc10:	58 e8       	ldi	r21, 0x88	; 136
    cc12:	61 e0       	ldi	r22, 0x01	; 1
    cc14:	84 e1       	ldi	r24, 0x14	; 20
    cc16:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    cc1a:	41 e0       	ldi	r20, 0x01	; 1
    cc1c:	53 e0       	ldi	r21, 0x03	; 3
    cc1e:	62 e0       	ldi	r22, 0x02	; 2
    cc20:	70 e0       	ldi	r23, 0x00	; 0
    cc22:	8a e0       	ldi	r24, 0x0A	; 10
    cc24:	90 e0       	ldi	r25, 0x00	; 0
    cc26:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    cc2a:	06 ec       	ldi	r16, 0xC6	; 198
    cc2c:	1b e0       	ldi	r17, 0x0B	; 11
    cc2e:	87 e0       	ldi	r24, 0x07	; 7
    cc30:	e8 2e       	mov	r14, r24
    cc32:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    cc34:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    cc36:	20 e0       	ldi	r18, 0x00	; 0
    cc38:	43 2f       	mov	r20, r19
    cc3a:	b7 01       	movw	r22, r14
    cc3c:	82 e0       	ldi	r24, 0x02	; 2
    cc3e:	90 e0       	ldi	r25, 0x00	; 0
    cc40:	39 83       	std	Y+1, r19	; 0x01
    cc42:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
		PrintChar(3, y, '.');
    cc46:	4e e2       	ldi	r20, 0x2E	; 46
    cc48:	b7 01       	movw	r22, r14
    cc4a:	83 e0       	ldi	r24, 0x03	; 3
    cc4c:	90 e0       	ldi	r25, 0x00	; 0
    cc4e:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
    cc52:	f8 01       	movw	r30, r16
    cc54:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    cc56:	80 81       	ld	r24, Z
    cc58:	93 e0       	ldi	r25, 0x03	; 3
    cc5a:	89 9f       	mul	r24, r25
    cc5c:	a0 01       	movw	r20, r0
    cc5e:	11 24       	eor	r1, r1
    cc60:	46 51       	subi	r20, 0x16	; 22
    cc62:	54 4f       	sbci	r21, 0xF4	; 244
    cc64:	23 e0       	ldi	r18, 0x03	; 3
    cc66:	6e 2d       	mov	r22, r14
    cc68:	85 e0       	ldi	r24, 0x05	; 5
    cc6a:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    cc6e:	42 e9       	ldi	r20, 0x92	; 146
    cc70:	52 e0       	ldi	r21, 0x02	; 2
    cc72:	b7 01       	movw	r22, r14
    cc74:	89 e0       	ldi	r24, 0x09	; 9
    cc76:	90 e0       	ldi	r25, 0x00	; 0
    cc78:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    cc7c:	f8 01       	movw	r30, r16
    cc7e:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    cc80:	80 81       	ld	r24, Z
    cc82:	e3 e0       	ldi	r30, 0x03	; 3
    cc84:	8e 9f       	mul	r24, r30
    cc86:	a0 01       	movw	r20, r0
    cc88:	11 24       	eor	r1, r1
    cc8a:	46 51       	subi	r20, 0x16	; 22
    cc8c:	54 4f       	sbci	r21, 0xF4	; 244
    cc8e:	23 e0       	ldi	r18, 0x03	; 3
    cc90:	6e 2d       	mov	r22, r14
    cc92:	8e e0       	ldi	r24, 0x0E	; 14
    cc94:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
		Print(18, y, (char*) strBy);
    cc98:	4f e8       	ldi	r20, 0x8F	; 143
    cc9a:	52 e0       	ldi	r21, 0x02	; 2
    cc9c:	b7 01       	movw	r22, r14
    cc9e:	82 e1       	ldi	r24, 0x12	; 18
    cca0:	90 e0       	ldi	r25, 0x00	; 0
    cca2:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    cca6:	f8 01       	movw	r30, r16
    cca8:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    ccaa:	21 e0       	ldi	r18, 0x01	; 1
    ccac:	40 81       	ld	r20, Z
    ccae:	b7 01       	movw	r22, r14
    ccb0:	87 e1       	ldi	r24, 0x17	; 23
    ccb2:	90 e0       	ldi	r25, 0x00	; 0
    ccb4:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
		PrintChar(24, y, '-');
    ccb8:	4d e2       	ldi	r20, 0x2D	; 45
    ccba:	b7 01       	movw	r22, r14
    ccbc:	88 e1       	ldi	r24, 0x18	; 24
    ccbe:	90 e0       	ldi	r25, 0x00	; 0
    ccc0:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    ccc4:	21 e0       	ldi	r18, 0x01	; 1
    ccc6:	f8 01       	movw	r30, r16
    ccc8:	40 81       	ld	r20, Z
    ccca:	b7 01       	movw	r22, r14
    cccc:	8b e1       	ldi	r24, 0x1B	; 27
    ccce:	90 e0       	ldi	r25, 0x00	; 0
    ccd0:	0e 94 37 56 	call	0xac6e	; 0xac6e <PrintByte>
		y += 3;
		rank += 1;
    ccd4:	39 81       	ldd	r19, Y+1	; 0x01
    ccd6:	3f 5f       	subi	r19, 0xFF	; 255
    ccd8:	f3 e0       	ldi	r31, 0x03	; 3
    ccda:	ef 0e       	add	r14, r31
    ccdc:	f1 1c       	adc	r15, r1
    ccde:	0b 5f       	subi	r16, 0xFB	; 251
    cce0:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    cce2:	36 30       	cpi	r19, 0x06	; 6
    cce4:	09 f0       	breq	.+2      	; 0xcce8 <load_tank_rank+0x102>
    cce6:	a7 cf       	rjmp	.-178    	; 0xcc36 <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    cce8:	46 ea       	ldi	r20, 0xA6	; 166
    ccea:	52 e0       	ldi	r21, 0x02	; 2
    ccec:	66 e1       	ldi	r22, 0x16	; 22
    ccee:	70 e0       	ldi	r23, 0x00	; 0
    ccf0:	83 e0       	ldi	r24, 0x03	; 3
    ccf2:	90 e0       	ldi	r25, 0x00	; 0
    ccf4:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(10, 24, (char*) strCancelHandle);
    ccf8:	4f eb       	ldi	r20, 0xBF	; 191
    ccfa:	52 e0       	ldi	r21, 0x02	; 2
    ccfc:	68 e1       	ldi	r22, 0x18	; 24
    ccfe:	70 e0       	ldi	r23, 0x00	; 0
    cd00:	8a e0       	ldi	r24, 0x0A	; 10
    cd02:	90 e0       	ldi	r25, 0x00	; 0
}
    cd04:	0f 90       	pop	r0
    cd06:	df 91       	pop	r29
    cd08:	cf 91       	pop	r28
    cd0a:	1f 91       	pop	r17
    cd0c:	0f 91       	pop	r16
    cd0e:	ff 90       	pop	r15
    cd10:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    cd12:	0c 94 6a 56 	jmp	0xacd4	; 0xacd4 <Print>

0000cd16 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    cd16:	0e 94 30 5a 	call	0xb460	; 0xb460 <save_score>
	fade_through();
    cd1a:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
	SetSpriteVisibility(true);
    cd1e:	81 e0       	ldi	r24, 0x01	; 1
    cd20:	0e 94 91 54 	call	0xa922	; 0xa922 <SetSpriteVisibility>
	init_game_state();
    cd24:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <init_game_state>
	load_tank_rank();
    cd28:	0c 94 f3 65 	jmp	0xcbe6	; 0xcbe6 <load_tank_rank>

0000cd2c <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    cd2c:	6f 92       	push	r6
    cd2e:	7f 92       	push	r7
    cd30:	8f 92       	push	r8
    cd32:	9f 92       	push	r9
    cd34:	af 92       	push	r10
    cd36:	bf 92       	push	r11
    cd38:	df 92       	push	r13
    cd3a:	ef 92       	push	r14
    cd3c:	ff 92       	push	r15
    cd3e:	0f 93       	push	r16
    cd40:	1f 93       	push	r17
    cd42:	cf 93       	push	r28
    cd44:	df 93       	push	r29
    cd46:	1f 92       	push	r1
    cd48:	cd b7       	in	r28, 0x3d	; 61
    cd4a:	de b7       	in	r29, 0x3e	; 62
    cd4c:	7c 01       	movw	r14, r24
    cd4e:	3b 01       	movw	r6, r22
    cd50:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	player->shared.recoiled = 0;
    cd52:	fb 01       	movw	r30, r22
    cd54:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    cd56:	fc 01       	movw	r30, r24
    cd58:	80 81       	ld	r24, Z
    cd5a:	83 ff       	sbrs	r24, 3
    cd5c:	0f c0       	rjmp	.+30     	; 0xcd7c <update_level_helper+0x50>
	{
		SFX_NAVIGATE;
    cd5e:	2f ef       	ldi	r18, 0xFF	; 255
    cd60:	47 e1       	ldi	r20, 0x17	; 23
    cd62:	67 e0       	ldi	r22, 0x07	; 7
    cd64:	84 e0       	ldi	r24, 0x04	; 4
    cd66:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		game.paused = game.paused ^ 1;
    cd6a:	90 91 0a 0c 	lds	r25, 0x0C0A
    cd6e:	81 e0       	ldi	r24, 0x01	; 1
    cd70:	89 27       	eor	r24, r25
    cd72:	80 93 0a 0c 	sts	0x0C0A, r24
		load_level_tiles(false);
    cd76:	80 e0       	ldi	r24, 0x00	; 0
    cd78:	0e 94 6a 64 	call	0xc8d4	; 0xc8d4 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cd7c:	20 91 0a 0c 	lds	r18, 0x0C0A
    cd80:	f7 01       	movw	r30, r14
    cd82:	80 81       	ld	r24, Z
    cd84:	91 81       	ldd	r25, Z+1	; 0x01
    cd86:	21 11       	cpse	r18, r1
    cd88:	72 c1       	rjmp	.+740    	; 0xd06e <update_level_helper+0x342>
    cd8a:	f3 01       	movw	r30, r6
    cd8c:	24 89       	ldd	r18, Z+20	; 0x14
    cd8e:	20 fd       	sbrc	r18, 0
    cd90:	6e c1       	rjmp	.+732    	; 0xd06e <update_level_helper+0x342>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    cd92:	93 ff       	sbrs	r25, 3
    cd94:	12 c0       	rjmp	.+36     	; 0xcdba <update_level_helper+0x8e>
    cd96:	85 89       	ldd	r24, Z+21	; 0x15
    cd98:	8a 35       	cpi	r24, 0x5A	; 90
    cd9a:	79 f4       	brne	.+30     	; 0xcdba <update_level_helper+0x8e>
		{
			player->banter_frame = 0;
    cd9c:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    cd9e:	69 e0       	ldi	r22, 0x09	; 9
    cda0:	70 e0       	ldi	r23, 0x00	; 0
    cda2:	80 e0       	ldi	r24, 0x00	; 0
    cda4:	90 e0       	ldi	r25, 0x00	; 0
    cda6:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
    cdaa:	f3 01       	movw	r30, r6
    cdac:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    cdae:	2f e5       	ldi	r18, 0x5F	; 95
    cdb0:	4e e1       	ldi	r20, 0x1E	; 30
    cdb2:	60 e0       	ldi	r22, 0x00	; 0
    cdb4:	84 e0       	ldi	r24, 0x04	; 4
    cdb6:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    cdba:	f3 01       	movw	r30, r6
    cdbc:	60 8d       	ldd	r22, Z+24	; 0x18
    cdbe:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    cdc0:	f7 01       	movw	r30, r14
    cdc2:	84 81       	ldd	r24, Z+4	; 0x04
    cdc4:	84 ff       	sbrs	r24, 4
    cdc6:	17 c0       	rjmp	.+46     	; 0xcdf6 <update_level_helper+0xca>
		{
			player->shared.direction = D_UP;
    cdc8:	f3 01       	movw	r30, r6
    cdca:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    cdcc:	70 e0       	ldi	r23, 0x00	; 0
    cdce:	80 e0       	ldi	r24, 0x00	; 0
    cdd0:	90 e0       	ldi	r25, 0x00	; 0
    cdd2:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    cdd6:	25 e6       	ldi	r18, 0x65	; 101
    cdd8:	38 e8       	ldi	r19, 0x88	; 136
    cdda:	48 e8       	ldi	r20, 0x88	; 136
    cddc:	5c e3       	ldi	r21, 0x3C	; 60
    cdde:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    cde2:	9b 01       	movw	r18, r22
    cde4:	ac 01       	movw	r20, r24
    cde6:	f3 01       	movw	r30, r6
    cde8:	67 81       	ldd	r22, Z+7	; 0x07
    cdea:	70 85       	ldd	r23, Z+8	; 0x08
    cdec:	81 85       	ldd	r24, Z+9	; 0x09
    cdee:	92 85       	ldd	r25, Z+10	; 0x0a
    cdf0:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    cdf4:	33 c0       	rjmp	.+102    	; 0xce5c <update_level_helper+0x130>
		}
		else if ((p->held & BTN_RIGHT))
    cdf6:	87 ff       	sbrs	r24, 7
    cdf8:	18 c0       	rjmp	.+48     	; 0xce2a <update_level_helper+0xfe>
		{
			player->shared.direction = D_RIGHT;
    cdfa:	81 e0       	ldi	r24, 0x01	; 1
    cdfc:	f3 01       	movw	r30, r6
    cdfe:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    ce00:	70 e0       	ldi	r23, 0x00	; 0
    ce02:	80 e0       	ldi	r24, 0x00	; 0
    ce04:	90 e0       	ldi	r25, 0x00	; 0
    ce06:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    ce0a:	25 e6       	ldi	r18, 0x65	; 101
    ce0c:	38 e8       	ldi	r19, 0x88	; 136
    ce0e:	48 e8       	ldi	r20, 0x88	; 136
    ce10:	5c e3       	ldi	r21, 0x3C	; 60
    ce12:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    ce16:	9b 01       	movw	r18, r22
    ce18:	ac 01       	movw	r20, r24
    ce1a:	f3 01       	movw	r30, r6
    ce1c:	63 81       	ldd	r22, Z+3	; 0x03
    ce1e:	74 81       	ldd	r23, Z+4	; 0x04
    ce20:	85 81       	ldd	r24, Z+5	; 0x05
    ce22:	96 81       	ldd	r25, Z+6	; 0x06
    ce24:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    ce28:	38 c0       	rjmp	.+112    	; 0xce9a <update_level_helper+0x16e>
		}
		else if ((p->held & BTN_DOWN))
    ce2a:	85 ff       	sbrs	r24, 5
    ce2c:	1d c0       	rjmp	.+58     	; 0xce68 <update_level_helper+0x13c>
		{
			player->shared.direction = D_DOWN;
    ce2e:	82 e0       	ldi	r24, 0x02	; 2
    ce30:	f3 01       	movw	r30, r6
    ce32:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    ce34:	70 e0       	ldi	r23, 0x00	; 0
    ce36:	80 e0       	ldi	r24, 0x00	; 0
    ce38:	90 e0       	ldi	r25, 0x00	; 0
    ce3a:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    ce3e:	25 e6       	ldi	r18, 0x65	; 101
    ce40:	38 e8       	ldi	r19, 0x88	; 136
    ce42:	48 e8       	ldi	r20, 0x88	; 136
    ce44:	5c e3       	ldi	r21, 0x3C	; 60
    ce46:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    ce4a:	9b 01       	movw	r18, r22
    ce4c:	ac 01       	movw	r20, r24
    ce4e:	f3 01       	movw	r30, r6
    ce50:	67 81       	ldd	r22, Z+7	; 0x07
    ce52:	70 85       	ldd	r23, Z+8	; 0x08
    ce54:	81 85       	ldd	r24, Z+9	; 0x09
    ce56:	92 85       	ldd	r25, Z+10	; 0x0a
    ce58:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    ce5c:	f3 01       	movw	r30, r6
    ce5e:	67 83       	std	Z+7, r22	; 0x07
    ce60:	70 87       	std	Z+8, r23	; 0x08
    ce62:	81 87       	std	Z+9, r24	; 0x09
    ce64:	92 87       	std	Z+10, r25	; 0x0a
    ce66:	21 c0       	rjmp	.+66     	; 0xceaa <update_level_helper+0x17e>
		}
		else if ((p->held & BTN_LEFT))
    ce68:	86 ff       	sbrs	r24, 6
    ce6a:	1d c0       	rjmp	.+58     	; 0xcea6 <update_level_helper+0x17a>
		{
			player->shared.direction = D_LEFT;
    ce6c:	83 e0       	ldi	r24, 0x03	; 3
    ce6e:	f3 01       	movw	r30, r6
    ce70:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    ce72:	70 e0       	ldi	r23, 0x00	; 0
    ce74:	80 e0       	ldi	r24, 0x00	; 0
    ce76:	90 e0       	ldi	r25, 0x00	; 0
    ce78:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    ce7c:	25 e6       	ldi	r18, 0x65	; 101
    ce7e:	38 e8       	ldi	r19, 0x88	; 136
    ce80:	48 e8       	ldi	r20, 0x88	; 136
    ce82:	5c e3       	ldi	r21, 0x3C	; 60
    ce84:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    ce88:	9b 01       	movw	r18, r22
    ce8a:	ac 01       	movw	r20, r24
    ce8c:	f3 01       	movw	r30, r6
    ce8e:	63 81       	ldd	r22, Z+3	; 0x03
    ce90:	74 81       	ldd	r23, Z+4	; 0x04
    ce92:	85 81       	ldd	r24, Z+5	; 0x05
    ce94:	96 81       	ldd	r25, Z+6	; 0x06
    ce96:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    ce9a:	f3 01       	movw	r30, r6
    ce9c:	63 83       	std	Z+3, r22	; 0x03
    ce9e:	74 83       	std	Z+4, r23	; 0x04
    cea0:	85 83       	std	Z+5, r24	; 0x05
    cea2:	96 83       	std	Z+6, r25	; 0x06
    cea4:	02 c0       	rjmp	.+4      	; 0xceaa <update_level_helper+0x17e>
		}
		else
		{
			player->shared.speed = 0;
    cea6:	f3 01       	movw	r30, r6
    cea8:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    ceaa:	f7 01       	movw	r30, r14
    ceac:	80 81       	ld	r24, Z
    ceae:	91 81       	ldd	r25, Z+1	; 0x01
    ceb0:	93 01       	movw	r18, r6
    ceb2:	24 5d       	subi	r18, 0xD4	; 212
    ceb4:	3f 4f       	sbci	r19, 0xFF	; 255
    ceb6:	79 01       	movw	r14, r18
    ceb8:	90 ff       	sbrs	r25, 0
    ceba:	36 c0       	rjmp	.+108    	; 0xcf28 <update_level_helper+0x1fc>
    cebc:	f3 01       	movw	r30, r6
    cebe:	81 89       	ldd	r24, Z+17	; 0x11
    cec0:	81 11       	cpse	r24, r1
    cec2:	32 c0       	rjmp	.+100    	; 0xcf28 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    cec4:	82 ad       	ldd	r24, Z+58	; 0x3a
    cec6:	81 11       	cpse	r24, r1
    cec8:	2f c0       	rjmp	.+94     	; 0xcf28 <update_level_helper+0x1fc>
				{
					if (player->has_rocket)
    ceca:	81 8d       	ldd	r24, Z+25	; 0x19
    cecc:	88 23       	and	r24, r24
    cece:	61 f0       	breq	.+24     	; 0xcee8 <update_level_helper+0x1bc>
					{
						init_shot_state(shot, ROCKET_SHOT);
    ced0:	61 e0       	ldi	r22, 0x01	; 1
    ced2:	c9 01       	movw	r24, r18
    ced4:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    ced8:	61 e0       	ldi	r22, 0x01	; 1
    ceda:	c7 01       	movw	r24, r14
    cedc:	0e 94 35 59 	call	0xb26a	; 0xb26a <set_shot_animations>
						SFX_ROCKET;
    cee0:	2f ef       	ldi	r18, 0xFF	; 255
    cee2:	47 e1       	ldi	r20, 0x17	; 23
    cee4:	68 e0       	ldi	r22, 0x08	; 8
    cee6:	0b c0       	rjmp	.+22     	; 0xcefe <update_level_helper+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    cee8:	60 e0       	ldi	r22, 0x00	; 0
    ceea:	c9 01       	movw	r24, r18
    ceec:	0e 94 18 59 	call	0xb230	; 0xb230 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    cef0:	60 e0       	ldi	r22, 0x00	; 0
    cef2:	c7 01       	movw	r24, r14
    cef4:	0e 94 35 59 	call	0xb26a	; 0xb26a <set_shot_animations>
						SFX_CANNONBALL;
    cef8:	2f ef       	ldi	r18, 0xFF	; 255
    cefa:	47 e1       	ldi	r20, 0x17	; 23
    cefc:	62 e0       	ldi	r22, 0x02	; 2
    cefe:	84 e0       	ldi	r24, 0x04	; 4
    cf00:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
					}
					player->active_shots++;
    cf04:	f3 01       	movw	r30, r6
    cf06:	81 89       	ldd	r24, Z+17	; 0x11
    cf08:	8f 5f       	subi	r24, 0xFF	; 255
    cf0a:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    cf0c:	80 81       	ld	r24, Z
    cf0e:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    cf10:	b7 01       	movw	r22, r14
    cf12:	c3 01       	movw	r24, r6
    cf14:	0e 94 9a 5a 	call	0xb534	; 0xb534 <position_shot>
					shot->active = 1;
    cf18:	81 e0       	ldi	r24, 0x01	; 1
    cf1a:	f3 01       	movw	r30, r6
    cf1c:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    cf1e:	82 8d       	ldd	r24, Z+26	; 0x1a
    cf20:	88 23       	and	r24, r24
    cf22:	11 f0       	breq	.+4      	; 0xcf28 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    cf24:	8a ea       	ldi	r24, 0xAA	; 170
    cf26:	85 a7       	std	Z+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    cf28:	f3 01       	movw	r30, r6
    cf2a:	82 ad       	ldd	r24, Z+58	; 0x3a
    cf2c:	88 23       	and	r24, r24
    cf2e:	09 f4       	brne	.+2      	; 0xcf32 <update_level_helper+0x206>
    cf30:	a8 c0       	rjmp	.+336    	; 0xd082 <update_level_helper+0x356>
			{
				switch (shot->shared.direction)
    cf32:	84 a5       	ldd	r24, Z+44	; 0x2c
    cf34:	81 30       	cpi	r24, 0x01	; 1
    cf36:	a9 f1       	breq	.+106    	; 0xcfa2 <update_level_helper+0x276>
    cf38:	e8 f0       	brcs	.+58     	; 0xcf74 <update_level_helper+0x248>
    cf3a:	82 30       	cpi	r24, 0x02	; 2
    cf3c:	09 f4       	brne	.+2      	; 0xcf40 <update_level_helper+0x214>
    cf3e:	48 c0       	rjmp	.+144    	; 0xcfd0 <update_level_helper+0x2a4>
    cf40:	83 30       	cpi	r24, 0x03	; 3
    cf42:	09 f0       	breq	.+2      	; 0xcf46 <update_level_helper+0x21a>
    cf44:	66 c0       	rjmp	.+204    	; 0xd012 <update_level_helper+0x2e6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    cf46:	f3 01       	movw	r30, r6
    cf48:	65 a5       	ldd	r22, Z+45	; 0x2d
    cf4a:	70 e0       	ldi	r23, 0x00	; 0
    cf4c:	80 e0       	ldi	r24, 0x00	; 0
    cf4e:	90 e0       	ldi	r25, 0x00	; 0
    cf50:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    cf54:	25 e6       	ldi	r18, 0x65	; 101
    cf56:	38 e8       	ldi	r19, 0x88	; 136
    cf58:	48 e8       	ldi	r20, 0x88	; 136
    cf5a:	5c e3       	ldi	r21, 0x3C	; 60
    cf5c:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    cf60:	9b 01       	movw	r18, r22
    cf62:	ac 01       	movw	r20, r24
    cf64:	f3 01       	movw	r30, r6
    cf66:	67 a5       	ldd	r22, Z+47	; 0x2f
    cf68:	70 a9       	ldd	r23, Z+48	; 0x30
    cf6a:	81 a9       	ldd	r24, Z+49	; 0x31
    cf6c:	92 a9       	ldd	r25, Z+50	; 0x32
    cf6e:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    cf72:	4a c0       	rjmp	.+148    	; 0xd008 <update_level_helper+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    cf74:	f3 01       	movw	r30, r6
    cf76:	65 a5       	ldd	r22, Z+45	; 0x2d
    cf78:	70 e0       	ldi	r23, 0x00	; 0
    cf7a:	80 e0       	ldi	r24, 0x00	; 0
    cf7c:	90 e0       	ldi	r25, 0x00	; 0
    cf7e:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    cf82:	25 e6       	ldi	r18, 0x65	; 101
    cf84:	38 e8       	ldi	r19, 0x88	; 136
    cf86:	48 e8       	ldi	r20, 0x88	; 136
    cf88:	5c e3       	ldi	r21, 0x3C	; 60
    cf8a:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    cf8e:	9b 01       	movw	r18, r22
    cf90:	ac 01       	movw	r20, r24
    cf92:	f3 01       	movw	r30, r6
    cf94:	63 a9       	ldd	r22, Z+51	; 0x33
    cf96:	74 a9       	ldd	r23, Z+52	; 0x34
    cf98:	85 a9       	ldd	r24, Z+53	; 0x35
    cf9a:	96 a9       	ldd	r25, Z+54	; 0x36
    cf9c:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    cfa0:	2d c0       	rjmp	.+90     	; 0xcffc <update_level_helper+0x2d0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    cfa2:	f3 01       	movw	r30, r6
    cfa4:	65 a5       	ldd	r22, Z+45	; 0x2d
    cfa6:	70 e0       	ldi	r23, 0x00	; 0
    cfa8:	80 e0       	ldi	r24, 0x00	; 0
    cfaa:	90 e0       	ldi	r25, 0x00	; 0
    cfac:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    cfb0:	25 e6       	ldi	r18, 0x65	; 101
    cfb2:	38 e8       	ldi	r19, 0x88	; 136
    cfb4:	48 e8       	ldi	r20, 0x88	; 136
    cfb6:	5c e3       	ldi	r21, 0x3C	; 60
    cfb8:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    cfbc:	9b 01       	movw	r18, r22
    cfbe:	ac 01       	movw	r20, r24
    cfc0:	f3 01       	movw	r30, r6
    cfc2:	67 a5       	ldd	r22, Z+47	; 0x2f
    cfc4:	70 a9       	ldd	r23, Z+48	; 0x30
    cfc6:	81 a9       	ldd	r24, Z+49	; 0x31
    cfc8:	92 a9       	ldd	r25, Z+50	; 0x32
    cfca:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    cfce:	1c c0       	rjmp	.+56     	; 0xd008 <update_level_helper+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    cfd0:	f3 01       	movw	r30, r6
    cfd2:	65 a5       	ldd	r22, Z+45	; 0x2d
    cfd4:	70 e0       	ldi	r23, 0x00	; 0
    cfd6:	80 e0       	ldi	r24, 0x00	; 0
    cfd8:	90 e0       	ldi	r25, 0x00	; 0
    cfda:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    cfde:	25 e6       	ldi	r18, 0x65	; 101
    cfe0:	38 e8       	ldi	r19, 0x88	; 136
    cfe2:	48 e8       	ldi	r20, 0x88	; 136
    cfe4:	5c e3       	ldi	r21, 0x3C	; 60
    cfe6:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    cfea:	9b 01       	movw	r18, r22
    cfec:	ac 01       	movw	r20, r24
    cfee:	f3 01       	movw	r30, r6
    cff0:	63 a9       	ldd	r22, Z+51	; 0x33
    cff2:	74 a9       	ldd	r23, Z+52	; 0x34
    cff4:	85 a9       	ldd	r24, Z+53	; 0x35
    cff6:	96 a9       	ldd	r25, Z+54	; 0x36
    cff8:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    cffc:	f3 01       	movw	r30, r6
    cffe:	63 ab       	std	Z+51, r22	; 0x33
    d000:	74 ab       	std	Z+52, r23	; 0x34
    d002:	85 ab       	std	Z+53, r24	; 0x35
    d004:	96 ab       	std	Z+54, r25	; 0x36
    d006:	05 c0       	rjmp	.+10     	; 0xd012 <update_level_helper+0x2e6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    d008:	f3 01       	movw	r30, r6
    d00a:	67 a7       	std	Z+47, r22	; 0x2f
    d00c:	70 ab       	std	Z+48, r23	; 0x30
    d00e:	81 ab       	std	Z+49, r24	; 0x31
    d010:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    d012:	f3 01       	movw	r30, r6
    d014:	d3 ac       	ldd	r13, Z+59	; 0x3b
    d016:	6d 2d       	mov	r22, r13
    d018:	70 e0       	ldi	r23, 0x00	; 0
    d01a:	80 e0       	ldi	r24, 0x00	; 0
    d01c:	90 e0       	ldi	r25, 0x00	; 0
    d01e:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    d022:	4b 01       	movw	r8, r22
    d024:	5c 01       	movw	r10, r24
    d026:	f8 e0       	ldi	r31, 0x08	; 8
    d028:	fd 15       	cp	r31, r13
    d02a:	88 f0       	brcs	.+34     	; 0xd04e <update_level_helper+0x322>
    d02c:	f3 01       	movw	r30, r6
    d02e:	85 a5       	ldd	r24, Z+45	; 0x2d
    d030:	68 2f       	mov	r22, r24
    d032:	70 e0       	ldi	r23, 0x00	; 0
    d034:	80 e0       	ldi	r24, 0x00	; 0
    d036:	90 e0       	ldi	r25, 0x00	; 0
    d038:	0e 94 6a 71 	call	0xe2d4	; 0xe2d4 <__floatsisf>
    d03c:	25 e6       	ldi	r18, 0x65	; 101
    d03e:	38 e8       	ldi	r19, 0x88	; 136
    d040:	48 e8       	ldi	r20, 0x88	; 136
    d042:	5c e3       	ldi	r21, 0x3C	; 60
    d044:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    d048:	9b 01       	movw	r18, r22
    d04a:	ac 01       	movw	r20, r24
    d04c:	03 c0       	rjmp	.+6      	; 0xd054 <update_level_helper+0x328>
    d04e:	20 e0       	ldi	r18, 0x00	; 0
    d050:	30 e0       	ldi	r19, 0x00	; 0
    d052:	a9 01       	movw	r20, r18
    d054:	c5 01       	movw	r24, r10
    d056:	b4 01       	movw	r22, r8
    d058:	0e 94 67 70 	call	0xe0ce	; 0xe0ce <__addsf3>
    d05c:	0e 94 3c 71 	call	0xe278	; 0xe278 <__fixunssfsi>
    d060:	f3 01       	movw	r30, r6
    d062:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    d064:	b7 01       	movw	r22, r14
    d066:	c3 01       	movw	r24, r6
    d068:	0e 94 c0 60 	call	0xc180	; 0xc180 <collision_detect_shot>
    d06c:	0a c0       	rjmp	.+20     	; 0xd082 <update_level_helper+0x356>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d06e:	91 ff       	sbrs	r25, 1
    d070:	08 c0       	rjmp	.+16     	; 0xd082 <update_level_helper+0x356>
		{
			SFX_NAVIGATE;
    d072:	2f ef       	ldi	r18, 0xFF	; 255
    d074:	47 e1       	ldi	r20, 0x17	; 23
    d076:	67 e0       	ldi	r22, 0x07	; 7
    d078:	84 e0       	ldi	r24, 0x04	; 4
    d07a:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
			exit_game();
    d07e:	0e 94 8b 66 	call	0xcd16	; 0xcd16 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    d082:	f3 01       	movw	r30, r6
    d084:	80 89       	ldd	r24, Z+16	; 0x10
    d086:	8a 30       	cpi	r24, 0x0A	; 10
    d088:	08 f4       	brcc	.+2      	; 0xd08c <update_level_helper+0x360>
    d08a:	5c c0       	rjmp	.+184    	; 0xd144 <update_level_helper+0x418>
    d08c:	f8 01       	movw	r30, r16
    d08e:	84 89       	ldd	r24, Z+20	; 0x14
    d090:	80 fd       	sbrc	r24, 0
    d092:	58 c0       	rjmp	.+176    	; 0xd144 <update_level_helper+0x418>
	{
	    next_level = game.current_level + 1;
    d094:	30 91 09 0c 	lds	r19, 0x0C09
    d098:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    d09a:	3a 30       	cpi	r19, 0x0A	; 10
    d09c:	30 f0       	brcs	.+12     	; 0xd0aa <update_level_helper+0x37e>
    d09e:	97 85       	ldd	r25, Z+15	; 0x0f
    d0a0:	f3 01       	movw	r30, r6
    d0a2:	87 85       	ldd	r24, Z+15	; 0x0f
    d0a4:	98 17       	cp	r25, r24
    d0a6:	09 f4       	brne	.+2      	; 0xd0aa <update_level_helper+0x37e>
    d0a8:	4d c0       	rjmp	.+154    	; 0xd144 <update_level_helper+0x418>

		load_level_tiles(true);
    d0aa:	81 e0       	ldi	r24, 0x01	; 1
    d0ac:	39 83       	std	Y+1, r19	; 0x01
    d0ae:	0e 94 6a 64 	call	0xc8d4	; 0xc8d4 <load_level_tiles>
		SetSpriteVisibility(false);
    d0b2:	80 e0       	ldi	r24, 0x00	; 0
    d0b4:	0e 94 91 54 	call	0xa922	; 0xa922 <SetSpriteVisibility>
		print_level_score(player, other_player);
    d0b8:	b8 01       	movw	r22, r16
    d0ba:	c3 01       	movw	r24, r6
    d0bc:	0e 94 07 5b 	call	0xb60e	; 0xb60e <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    d0c0:	82 e0       	ldi	r24, 0x02	; 2
    d0c2:	0e 94 ce 58 	call	0xb19c	; 0xb19c <LBWaitSeconds>
		player->level_score = 0;
    d0c6:	f3 01       	movw	r30, r6
    d0c8:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    d0ca:	f8 01       	movw	r30, r16
    d0cc:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    d0ce:	2f ef       	ldi	r18, 0xFF	; 255
    d0d0:	47 e1       	ldi	r20, 0x17	; 23
    d0d2:	64 e0       	ldi	r22, 0x04	; 4
    d0d4:	84 e0       	ldi	r24, 0x04	; 4
    d0d6:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    d0da:	39 81       	ldd	r19, Y+1	; 0x01
    d0dc:	3a 30       	cpi	r19, 0x0A	; 10
    d0de:	08 f1       	brcs	.+66     	; 0xd122 <update_level_helper+0x3f6>
		{
		    if (other_player->score > player->score)
    d0e0:	f8 01       	movw	r30, r16
    d0e2:	97 85       	ldd	r25, Z+15	; 0x0f
    d0e4:	f3 01       	movw	r30, r6
    d0e6:	87 85       	ldd	r24, Z+15	; 0x0f
    d0e8:	89 17       	cp	r24, r25
    d0ea:	20 f4       	brcc	.+8      	; 0xd0f4 <update_level_helper+0x3c8>
    d0ec:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    d0ee:	38 01       	movw	r6, r16
		        other_player = tmp;
    d0f0:	0e 2f       	mov	r16, r30
    d0f2:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    d0f4:	b8 01       	movw	r22, r16
    d0f6:	c3 01       	movw	r24, r6
    d0f8:	0e 94 49 5b 	call	0xb692	; 0xb692 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    d0fc:	82 e0       	ldi	r24, 0x02	; 2
    d0fe:	0e 94 ce 58 	call	0xb19c	; 0xb19c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    d102:	0f 90       	pop	r0
    d104:	df 91       	pop	r29
    d106:	cf 91       	pop	r28
    d108:	1f 91       	pop	r17
    d10a:	0f 91       	pop	r16
    d10c:	ff 90       	pop	r15
    d10e:	ef 90       	pop	r14
    d110:	df 90       	pop	r13
    d112:	bf 90       	pop	r11
    d114:	af 90       	pop	r10
    d116:	9f 90       	pop	r9
    d118:	8f 90       	pop	r8
    d11a:	7f 90       	pop	r7
    d11c:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    d11e:	0c 94 8b 66 	jmp	0xcd16	; 0xcd16 <exit_game>
		}
		else
		{
			level_transition(next_level);
    d122:	83 2f       	mov	r24, r19
		}
	}
}
    d124:	0f 90       	pop	r0
    d126:	df 91       	pop	r29
    d128:	cf 91       	pop	r28
    d12a:	1f 91       	pop	r17
    d12c:	0f 91       	pop	r16
    d12e:	ff 90       	pop	r15
    d130:	ef 90       	pop	r14
    d132:	df 90       	pop	r13
    d134:	bf 90       	pop	r11
    d136:	af 90       	pop	r10
    d138:	9f 90       	pop	r9
    d13a:	8f 90       	pop	r8
    d13c:	7f 90       	pop	r7
    d13e:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    d140:	0c 94 8d 65 	jmp	0xcb1a	; 0xcb1a <level_transition>
		}
	}
}
    d144:	0f 90       	pop	r0
    d146:	df 91       	pop	r29
    d148:	cf 91       	pop	r28
    d14a:	1f 91       	pop	r17
    d14c:	0f 91       	pop	r16
    d14e:	ff 90       	pop	r15
    d150:	ef 90       	pop	r14
    d152:	df 90       	pop	r13
    d154:	bf 90       	pop	r11
    d156:	af 90       	pop	r10
    d158:	9f 90       	pop	r9
    d15a:	8f 90       	pop	r8
    d15c:	7f 90       	pop	r7
    d15e:	6f 90       	pop	r6
    d160:	08 95       	ret

0000d162 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d162:	cf 92       	push	r12
    d164:	df 92       	push	r13
    d166:	ef 92       	push	r14
    d168:	ff 92       	push	r15
    d16a:	1f 93       	push	r17
    d16c:	cf 93       	push	r28
    d16e:	df 93       	push	r29
    d170:	6c 01       	movw	r12, r24
    d172:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    d174:	80 91 0a 0c 	lds	r24, 0x0C0A
    d178:	88 23       	and	r24, r24
    d17a:	d1 f0       	breq	.+52     	; 0xd1b0 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    d17c:	80 e0       	ldi	r24, 0x00	; 0
    d17e:	0e 94 91 54 	call	0xa922	; 0xa922 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    d182:	4e eb       	ldi	r20, 0xBE	; 190
    d184:	58 e8       	ldi	r21, 0x88	; 136
    d186:	6c e0       	ldi	r22, 0x0C	; 12
    d188:	88 e0       	ldi	r24, 0x08	; 8
    d18a:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    d18e:	40 ec       	ldi	r20, 0xC0	; 192
    d190:	51 e0       	ldi	r21, 0x01	; 1
    d192:	6d e0       	ldi	r22, 0x0D	; 13
    d194:	70 e0       	ldi	r23, 0x00	; 0
    d196:	8c e0       	ldi	r24, 0x0C	; 12
    d198:	90 e0       	ldi	r25, 0x00	; 0
    d19a:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
		Print(11, 14, (char*) strExit);
    d19e:	47 ec       	ldi	r20, 0xC7	; 199
    d1a0:	51 e0       	ldi	r21, 0x01	; 1
    d1a2:	6e e0       	ldi	r22, 0x0E	; 14
    d1a4:	70 e0       	ldi	r23, 0x00	; 0
    d1a6:	8b e0       	ldi	r24, 0x0B	; 11
    d1a8:	90 e0       	ldi	r25, 0x00	; 0
    d1aa:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    d1ae:	44 c0       	rjmp	.+136    	; 0xd238 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    d1b0:	81 e0       	ldi	r24, 0x01	; 1
    d1b2:	0e 94 91 54 	call	0xa922	; 0xa922 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    d1b6:	60 e0       	ldi	r22, 0x00	; 0
    d1b8:	85 e2       	ldi	r24, 0x25	; 37
    d1ba:	9c e0       	ldi	r25, 0x0C	; 12
    d1bc:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <tank_map>
    d1c0:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d1c2:	68 2f       	mov	r22, r24
    d1c4:	89 e8       	ldi	r24, 0x89	; 137
    d1c6:	9f e0       	ldi	r25, 0x0F	; 15
    d1c8:	0e 94 8e 5c 	call	0xb91c	; 0xb91c <tank_map>
    d1cc:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d1ce:	68 2f       	mov	r22, r24
    d1d0:	85 e2       	ldi	r24, 0x25	; 37
    d1d2:	9c e0       	ldi	r25, 0x0C	; 12
    d1d4:	0e 94 10 5d 	call	0xba20	; 0xba20 <shot_map>
    d1d8:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    d1da:	68 2f       	mov	r22, r24
    d1dc:	89 e8       	ldi	r24, 0x89	; 137
    d1de:	9f e0       	ldi	r25, 0x0F	; 15
    d1e0:	0e 94 10 5d 	call	0xba20	; 0xba20 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    d1e4:	40 91 02 01 	lds	r20, 0x0102
    d1e8:	6f e0       	ldi	r22, 0x0F	; 15
    d1ea:	85 e2       	ldi	r24, 0x25	; 37
    d1ec:	9c e0       	ldi	r25, 0x0C	; 12
    d1ee:	0e 94 cc 5b 	call	0xb798	; 0xb798 <render_banter>
    d1f2:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    d1f6:	40 91 01 01 	lds	r20, 0x0101
    d1fa:	60 e0       	ldi	r22, 0x00	; 0
    d1fc:	89 e8       	ldi	r24, 0x89	; 137
    d1fe:	9f e0       	ldi	r25, 0x0F	; 15
    d200:	0e 94 cc 5b 	call	0xb798	; 0xb798 <render_banter>
    d204:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    d208:	60 e0       	ldi	r22, 0x00	; 0
    d20a:	85 e2       	ldi	r24, 0x25	; 37
    d20c:	9c e0       	ldi	r25, 0x0C	; 12
    d20e:	0e 94 f4 5b 	call	0xb7e8	; 0xb7e8 <render_player>
		render_player(&player2, p2_index);
    d212:	61 2f       	mov	r22, r17
    d214:	89 e8       	ldi	r24, 0x89	; 137
    d216:	9f e0       	ldi	r25, 0x0F	; 15
    d218:	0e 94 f4 5b 	call	0xb7e8	; 0xb7e8 <render_player>
		render_shot(&player1, p1_shot_index);
    d21c:	6d 2f       	mov	r22, r29
    d21e:	85 e2       	ldi	r24, 0x25	; 37
    d220:	9c e0       	ldi	r25, 0x0C	; 12
    d222:	0e 94 1d 5c 	call	0xb83a	; 0xb83a <render_shot>
		render_shot(&player2, p2_shot_index);
    d226:	6c 2f       	mov	r22, r28
    d228:	89 e8       	ldi	r24, 0x89	; 137
    d22a:	9f e0       	ldi	r25, 0x0F	; 15
    d22c:	0e 94 1d 5c 	call	0xb83a	; 0xb83a <render_shot>
		render_tile_explosions(&tile_animations);
    d230:	8c e0       	ldi	r24, 0x0C	; 12
    d232:	9c e0       	ldi	r25, 0x0C	; 12
    d234:	0e 94 49 5c 	call	0xb892	; 0xb892 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    d238:	2f e0       	ldi	r18, 0x0F	; 15
    d23a:	49 e8       	ldi	r20, 0x89	; 137
    d23c:	5f e0       	ldi	r21, 0x0F	; 15
    d23e:	65 e2       	ldi	r22, 0x25	; 37
    d240:	7c e0       	ldi	r23, 0x0C	; 12
    d242:	c6 01       	movw	r24, r12
    d244:	0e 94 96 66 	call	0xcd2c	; 0xcd2c <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    d248:	20 e0       	ldi	r18, 0x00	; 0
    d24a:	45 e2       	ldi	r20, 0x25	; 37
    d24c:	5c e0       	ldi	r21, 0x0C	; 12
    d24e:	69 e8       	ldi	r22, 0x89	; 137
    d250:	7f e0       	ldi	r23, 0x0F	; 15
    d252:	c7 01       	movw	r24, r14
    d254:	0e 94 96 66 	call	0xcd2c	; 0xcd2c <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    d258:	2f e0       	ldi	r18, 0x0F	; 15
    d25a:	40 e0       	ldi	r20, 0x00	; 0
    d25c:	69 e8       	ldi	r22, 0x89	; 137
    d25e:	7f e0       	ldi	r23, 0x0F	; 15
    d260:	85 e2       	ldi	r24, 0x25	; 37
    d262:	9c e0       	ldi	r25, 0x0C	; 12
    d264:	0e 94 c6 62 	call	0xc58c	; 0xc58c <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    d268:	20 e0       	ldi	r18, 0x00	; 0
    d26a:	4f e0       	ldi	r20, 0x0F	; 15
    d26c:	65 e2       	ldi	r22, 0x25	; 37
    d26e:	7c e0       	ldi	r23, 0x0C	; 12
    d270:	89 e8       	ldi	r24, 0x89	; 137
    d272:	9f e0       	ldi	r25, 0x0F	; 15
    d274:	0e 94 c6 62 	call	0xc58c	; 0xc58c <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    d278:	80 91 0b 0c 	lds	r24, 0x0C0B
    d27c:	83 30       	cpi	r24, 0x03	; 3
    d27e:	69 f4       	brne	.+26     	; 0xd29a <update_level+0x138>
	{
		demo_counter++;
    d280:	80 91 32 0b 	lds	r24, 0x0B32
    d284:	90 91 33 0b 	lds	r25, 0x0B33
    d288:	01 96       	adiw	r24, 0x01	; 1
    d28a:	90 93 33 0b 	sts	0x0B33, r25
    d28e:	80 93 32 0b 	sts	0x0B32, r24
		held = ReadJoypad(0);
    d292:	80 e0       	ldi	r24, 0x00	; 0
    d294:	0e 94 a7 48 	call	0x914e	; 0x914e <ReadJoypad>
    d298:	02 c0       	rjmp	.+4      	; 0xd29e <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    d29a:	80 e0       	ldi	r24, 0x00	; 0
    d29c:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    d29e:	20 91 0b 0c 	lds	r18, 0x0C0B
    d2a2:	23 30       	cpi	r18, 0x03	; 3
    d2a4:	e1 f4       	brne	.+56     	; 0xd2de <update_level+0x17c>
    d2a6:	8f 70       	andi	r24, 0x0F	; 15
    d2a8:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    d2aa:	89 2b       	or	r24, r25
    d2ac:	39 f4       	brne	.+14     	; 0xd2bc <update_level+0x15a>
		 (held & BTN_B)) ||
    d2ae:	80 91 32 0b 	lds	r24, 0x0B32
    d2b2:	90 91 33 0b 	lds	r25, 0x0B33
    d2b6:	88 30       	cpi	r24, 0x08	; 8
    d2b8:	97 40       	sbci	r25, 0x07	; 7
    d2ba:	88 f0       	brcs	.+34     	; 0xd2de <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    d2bc:	10 92 33 0b 	sts	0x0B33, r1
    d2c0:	10 92 32 0b 	sts	0x0B32, r1
		fade_through();
    d2c4:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		init_game_state();
    d2c8:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <init_game_state>
		load_splash();
	}
}
    d2cc:	df 91       	pop	r29
    d2ce:	cf 91       	pop	r28
    d2d0:	1f 91       	pop	r17
    d2d2:	ff 90       	pop	r15
    d2d4:	ef 90       	pop	r14
    d2d6:	df 90       	pop	r13
    d2d8:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    d2da:	0c 94 bd 65 	jmp	0xcb7a	; 0xcb7a <load_splash>
	}
}
    d2de:	df 91       	pop	r29
    d2e0:	cf 91       	pop	r28
    d2e2:	1f 91       	pop	r17
    d2e4:	ff 90       	pop	r15
    d2e6:	ef 90       	pop	r14
    d2e8:	df 90       	pop	r13
    d2ea:	cf 90       	pop	r12
    d2ec:	08 95       	ret

0000d2ee <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    d2ee:	cf 93       	push	r28
    d2f0:	df 93       	push	r29
    d2f2:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    d2f4:	88 81       	ld	r24, Y
    d2f6:	99 81       	ldd	r25, Y+1	; 0x01
    d2f8:	91 ff       	sbrs	r25, 1
    d2fa:	0a c0       	rjmp	.+20     	; 0xd310 <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    d2fc:	2f ef       	ldi	r18, 0xFF	; 255
    d2fe:	47 e1       	ldi	r20, 0x17	; 23
    d300:	67 e0       	ldi	r22, 0x07	; 7
    d302:	84 e0       	ldi	r24, 0x04	; 4
    d304:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		fade_through();
    d308:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		load_splash();
    d30c:	0e 94 bd 65 	call	0xcb7a	; 0xcb7a <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d310:	8c 81       	ldd	r24, Y+4	; 0x04
    d312:	9d 81       	ldd	r25, Y+5	; 0x05
    d314:	92 ff       	sbrs	r25, 2
    d316:	1d c0       	rjmp	.+58     	; 0xd352 <update_tank_rank+0x64>
    d318:	8e 81       	ldd	r24, Y+6	; 0x06
    d31a:	8f 3f       	cpi	r24, 0xFF	; 255
    d31c:	d1 f4       	brne	.+52     	; 0xd352 <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    d31e:	2f ef       	ldi	r18, 0xFF	; 255
    d320:	47 e1       	ldi	r20, 0x17	; 23
    d322:	67 e0       	ldi	r22, 0x07	; 7
    d324:	84 e0       	ldi	r24, 0x04	; 4
    d326:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
	    init_scores(&scores);
    d32a:	81 ec       	ldi	r24, 0xC1	; 193
    d32c:	9b e0       	ldi	r25, 0x0B	; 11
    d32e:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <init_scores>
	    init_handles(&handles);
    d332:	88 ee       	ldi	r24, 0xE8	; 232
    d334:	9b e0       	ldi	r25, 0x0B	; 11
    d336:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d33a:	81 ec       	ldi	r24, 0xC1	; 193
    d33c:	9b e0       	ldi	r25, 0x0B	; 11
    d33e:	0e 94 98 49 	call	0x9330	; 0x9330 <EepromWriteBlock>
    d342:	88 ee       	ldi	r24, 0xE8	; 232
    d344:	9b e0       	ldi	r25, 0x0B	; 11
    d346:	0e 94 98 49 	call	0x9330	; 0x9330 <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    d34a:	df 91       	pop	r29
    d34c:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d34e:	0c 94 f3 65 	jmp	0xcbe6	; 0xcbe6 <load_tank_rank>
	}
}
    d352:	df 91       	pop	r29
    d354:	cf 91       	pop	r28
    d356:	08 95       	ret

0000d358 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d358:	0f 93       	push	r16
    d35a:	1f 93       	push	r17
    d35c:	cf 93       	push	r28
    d35e:	df 93       	push	r29
    d360:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d362:	fb 01       	movw	r30, r22
    d364:	20 81       	ld	r18, Z
    d366:	31 81       	ldd	r19, Z+1	; 0x01
    d368:	f9 01       	movw	r30, r18
    d36a:	e0 71       	andi	r30, 0x10	; 16
    d36c:	ff 27       	eor	r31, r31
    d36e:	24 ff       	sbrs	r18, 4
    d370:	09 c0       	rjmp	.+18     	; 0xd384 <_handle_select_helper+0x2c>
    d372:	8d 81       	ldd	r24, Y+5	; 0x05
    d374:	81 11       	cpse	r24, r1
    d376:	06 c0       	rjmp	.+12     	; 0xd384 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    d378:	88 81       	ld	r24, Y
    d37a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d37c:	87 ff       	sbrs	r24, 7
    d37e:	0f c0       	rjmp	.+30     	; 0xd39e <_handle_select_helper+0x46>
    d380:	18 82       	st	Y, r1
    d382:	25 c0       	rjmp	.+74     	; 0xd3ce <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d384:	b9 01       	movw	r22, r18
    d386:	60 72       	andi	r22, 0x20	; 32
    d388:	77 27       	eor	r23, r23
    d38a:	25 ff       	sbrs	r18, 5
    d38c:	0a c0       	rjmp	.+20     	; 0xd3a2 <_handle_select_helper+0x4a>
    d38e:	8d 81       	ldd	r24, Y+5	; 0x05
    d390:	81 11       	cpse	r24, r1
    d392:	07 c0       	rjmp	.+14     	; 0xd3a2 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    d394:	88 81       	ld	r24, Y
    d396:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d398:	89 30       	cpi	r24, 0x09	; 9
    d39a:	0c f0       	brlt	.+2      	; 0xd39e <_handle_select_helper+0x46>
    d39c:	88 e0       	ldi	r24, 0x08	; 8
    d39e:	88 83       	st	Y, r24
    d3a0:	16 c0       	rjmp	.+44     	; 0xd3ce <_handle_select_helper+0x76>
    d3a2:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    d3a4:	a9 01       	movw	r20, r18
    d3a6:	44 27       	eor	r20, r20
    d3a8:	51 70       	andi	r21, 0x01	; 1
    d3aa:	30 ff       	sbrs	r19, 0
    d3ac:	1a c0       	rjmp	.+52     	; 0xd3e2 <_handle_select_helper+0x8a>
    d3ae:	ad 81       	ldd	r26, Y+5	; 0x05
    d3b0:	a1 11       	cpse	r26, r1
    d3b2:	17 c0       	rjmp	.+46     	; 0xd3e2 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    d3b4:	81 e0       	ldi	r24, 0x01	; 1
    d3b6:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d3b8:	69 91       	ld	r22, Y+
    d3ba:	f3 e0       	ldi	r31, 0x03	; 3
    d3bc:	6f 02       	muls	r22, r31
    d3be:	b0 01       	movw	r22, r0
    d3c0:	11 24       	eor	r1, r1
    d3c2:	66 51       	subi	r22, 0x16	; 22
    d3c4:	74 4f       	sbci	r23, 0xF4	; 244
    d3c6:	43 e0       	ldi	r20, 0x03	; 3
    d3c8:	ce 01       	movw	r24, r28
    d3ca:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		SFX_NAVIGATE;
    d3ce:	2f ef       	ldi	r18, 0xFF	; 255
    d3d0:	47 e1       	ldi	r20, 0x17	; 23
    d3d2:	67 e0       	ldi	r22, 0x07	; 7
    d3d4:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    d3d6:	df 91       	pop	r29
    d3d8:	cf 91       	pop	r28
    d3da:	1f 91       	pop	r17
    d3dc:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d3de:	0c 94 ce 4b 	jmp	0x979c	; 0x979c <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d3e2:	27 ff       	sbrs	r18, 7
    d3e4:	09 c0       	rjmp	.+18     	; 0xd3f8 <_handle_select_helper+0xa0>
    d3e6:	ad 81       	ldd	r26, Y+5	; 0x05
    d3e8:	a1 30       	cpi	r26, 0x01	; 1
    d3ea:	31 f4       	brne	.+12     	; 0xd3f8 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    d3ec:	8c 81       	ldd	r24, Y+4	; 0x04
    d3ee:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d3f0:	83 30       	cpi	r24, 0x03	; 3
    d3f2:	5c f0       	brlt	.+22     	; 0xd40a <_handle_select_helper+0xb2>
    d3f4:	82 e0       	ldi	r24, 0x02	; 2
    d3f6:	09 c0       	rjmp	.+18     	; 0xd40a <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d3f8:	26 ff       	sbrs	r18, 6
    d3fa:	0b c0       	rjmp	.+22     	; 0xd412 <_handle_select_helper+0xba>
    d3fc:	ed 81       	ldd	r30, Y+5	; 0x05
    d3fe:	e1 30       	cpi	r30, 0x01	; 1
    d400:	41 f5       	brne	.+80     	; 0xd452 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    d402:	8c 81       	ldd	r24, Y+4	; 0x04
    d404:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d406:	87 fd       	sbrc	r24, 7
    d408:	02 c0       	rjmp	.+4      	; 0xd40e <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d40a:	8c 83       	std	Y+4, r24	; 0x04
    d40c:	e0 cf       	rjmp	.-64     	; 0xd3ce <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    d40e:	1c 82       	std	Y+4, r1	; 0x04
    d410:	de cf       	rjmp	.-68     	; 0xd3ce <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d412:	ef 2b       	or	r30, r31
    d414:	69 f0       	breq	.+26     	; 0xd430 <_handle_select_helper+0xd8>
    d416:	8d 81       	ldd	r24, Y+5	; 0x05
    d418:	81 30       	cpi	r24, 0x01	; 1
    d41a:	09 f0       	breq	.+2      	; 0xd41e <_handle_select_helper+0xc6>
    d41c:	43 c0       	rjmp	.+134    	; 0xd4a4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    d41e:	8c 81       	ldd	r24, Y+4	; 0x04
    d420:	c8 0f       	add	r28, r24
    d422:	d1 1d       	adc	r29, r1
    d424:	99 81       	ldd	r25, Y+1	; 0x01
    d426:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d428:	91 34       	cpi	r25, 0x41	; 65
    d42a:	70 f4       	brcc	.+28     	; 0xd448 <_handle_select_helper+0xf0>
    d42c:	81 e4       	ldi	r24, 0x41	; 65
    d42e:	0f c0       	rjmp	.+30     	; 0xd44e <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d430:	67 2b       	or	r22, r23
    d432:	89 f0       	breq	.+34     	; 0xd456 <_handle_select_helper+0xfe>
    d434:	8d 81       	ldd	r24, Y+5	; 0x05
    d436:	81 30       	cpi	r24, 0x01	; 1
    d438:	a9 f5       	brne	.+106    	; 0xd4a4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    d43a:	8c 81       	ldd	r24, Y+4	; 0x04
    d43c:	c8 0f       	add	r28, r24
    d43e:	d1 1d       	adc	r29, r1
    d440:	99 81       	ldd	r25, Y+1	; 0x01
    d442:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d444:	9b 35       	cpi	r25, 0x5B	; 91
    d446:	10 f4       	brcc	.+4      	; 0xd44c <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d448:	99 83       	std	Y+1, r25	; 0x01
    d44a:	c1 cf       	rjmp	.-126    	; 0xd3ce <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d44c:	8a e5       	ldi	r24, 0x5A	; 90
    d44e:	89 83       	std	Y+1, r24	; 0x01
    d450:	be cf       	rjmp	.-132    	; 0xd3ce <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d452:	67 2b       	or	r22, r23
    d454:	39 f5       	brne	.+78     	; 0xd4a4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    d456:	45 2b       	or	r20, r21
    d458:	29 f1       	breq	.+74     	; 0xd4a4 <_handle_select_helper+0x14c>
    d45a:	4d 81       	ldd	r20, Y+5	; 0x05
    d45c:	41 30       	cpi	r20, 0x01	; 1
    d45e:	11 f5       	brne	.+68     	; 0xd4a4 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    d460:	fe 01       	movw	r30, r28
    d462:	21 91       	ld	r18, Z+
    d464:	8f 01       	movw	r16, r30
    d466:	fc 01       	movw	r30, r24
    d468:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d46a:	43 e0       	ldi	r20, 0x03	; 3
    d46c:	b8 01       	movw	r22, r16
    d46e:	0c 96       	adiw	r24, 0x0c	; 12
    d470:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d474:	88 81       	ld	r24, Y
    d476:	f3 e0       	ldi	r31, 0x03	; 3
    d478:	8f 02       	muls	r24, r31
    d47a:	c0 01       	movw	r24, r0
    d47c:	11 24       	eor	r1, r1
    d47e:	43 e0       	ldi	r20, 0x03	; 3
    d480:	b8 01       	movw	r22, r16
    d482:	86 51       	subi	r24, 0x16	; 22
    d484:	94 4f       	sbci	r25, 0xF4	; 244
    d486:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		SFX_NAVIGATE;
    d48a:	2f ef       	ldi	r18, 0xFF	; 255
    d48c:	47 e1       	ldi	r20, 0x17	; 23
    d48e:	67 e0       	ldi	r22, 0x07	; 7
    d490:	84 e0       	ldi	r24, 0x04	; 4
    d492:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d496:	88 ee       	ldi	r24, 0xE8	; 232
    d498:	9b e0       	ldi	r25, 0x0B	; 11
    d49a:	0e 94 98 49 	call	0x9330	; 0x9330 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d49e:	82 e0       	ldi	r24, 0x02	; 2
    d4a0:	8d 83       	std	Y+5, r24	; 0x05
    d4a2:	1a c0       	rjmp	.+52     	; 0xd4d8 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d4a4:	31 ff       	sbrs	r19, 1
    d4a6:	18 c0       	rjmp	.+48     	; 0xd4d8 <_handle_select_helper+0x180>
    d4a8:	8d 81       	ldd	r24, Y+5	; 0x05
    d4aa:	81 30       	cpi	r24, 0x01	; 1
    d4ac:	11 f4       	brne	.+4      	; 0xd4b2 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    d4ae:	1d 82       	std	Y+5, r1	; 0x05
    d4b0:	8e cf       	rjmp	.-228    	; 0xd3ce <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d4b2:	82 30       	cpi	r24, 0x02	; 2
    d4b4:	19 f4       	brne	.+6      	; 0xd4bc <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    d4b6:	81 e0       	ldi	r24, 0x01	; 1
    d4b8:	8d 83       	std	Y+5, r24	; 0x05
    d4ba:	89 cf       	rjmp	.-238    	; 0xd3ce <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d4bc:	2f ef       	ldi	r18, 0xFF	; 255
    d4be:	47 e1       	ldi	r20, 0x17	; 23
    d4c0:	67 e0       	ldi	r22, 0x07	; 7
    d4c2:	84 e0       	ldi	r24, 0x04	; 4
    d4c4:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		fade_through();
    d4c8:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		load_splash();
	}
}
    d4cc:	df 91       	pop	r29
    d4ce:	cf 91       	pop	r28
    d4d0:	1f 91       	pop	r17
    d4d2:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d4d4:	0c 94 bd 65 	jmp	0xcb7a	; 0xcb7a <load_splash>
	}
}
    d4d8:	df 91       	pop	r29
    d4da:	cf 91       	pop	r28
    d4dc:	1f 91       	pop	r17
    d4de:	0f 91       	pop	r16
    d4e0:	08 95       	ret

0000d4e2 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d4e2:	af 92       	push	r10
    d4e4:	bf 92       	push	r11
    d4e6:	cf 92       	push	r12
    d4e8:	df 92       	push	r13
    d4ea:	ef 92       	push	r14
    d4ec:	ff 92       	push	r15
    d4ee:	0f 93       	push	r16
    d4f0:	1f 93       	push	r17
    d4f2:	cf 93       	push	r28
    d4f4:	df 93       	push	r29
    d4f6:	00 d0       	rcall	.+0      	; 0xd4f8 <_handle_select_render_helper+0x16>
    d4f8:	1f 92       	push	r1
    d4fa:	cd b7       	in	r28, 0x3d	; 61
    d4fc:	de b7       	in	r29, 0x3e	; 62
    d4fe:	7c 01       	movw	r14, r24
    d500:	b4 2e       	mov	r11, r20
    d502:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d504:	80 e2       	ldi	r24, 0x20	; 32
    d506:	89 83       	std	Y+1, r24	; 0x01
    d508:	8a 83       	std	Y+2, r24	; 0x02
    d50a:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d50c:	f7 01       	movw	r30, r14
    d50e:	85 81       	ldd	r24, Z+5	; 0x05
    d510:	81 11       	cpse	r24, r1
    d512:	1d c0       	rjmp	.+58     	; 0xd54e <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d514:	40 e0       	ldi	r20, 0x00	; 0
    d516:	6d e5       	ldi	r22, 0x5D	; 93
    d518:	74 e4       	ldi	r23, 0x44	; 68
    d51a:	82 2f       	mov	r24, r18
    d51c:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d520:	40 e0       	ldi	r20, 0x00	; 0
    d522:	67 eb       	ldi	r22, 0xB7	; 183
    d524:	74 e4       	ldi	r23, 0x44	; 68
    d526:	81 e0       	ldi	r24, 0x01	; 1
    d528:	81 0f       	add	r24, r17
    d52a:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d52e:	f7 01       	movw	r30, r14
    d530:	40 81       	ld	r20, Z
    d532:	44 0f       	add	r20, r20
    d534:	44 0f       	add	r20, r20
    d536:	44 0f       	add	r20, r20
    d538:	40 5c       	subi	r20, 0xC0	; 192
    d53a:	01 e0       	ldi	r16, 0x01	; 1
    d53c:	21 e0       	ldi	r18, 0x01	; 1
    d53e:	6b 2d       	mov	r22, r11
    d540:	66 0f       	add	r22, r22
    d542:	66 0f       	add	r22, r22
    d544:	66 0f       	add	r22, r22
    d546:	81 2f       	mov	r24, r17
    d548:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
    d54c:	6f c0       	rjmp	.+222    	; 0xd62c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d54e:	81 30       	cpi	r24, 0x01	; 1
    d550:	09 f0       	breq	.+2      	; 0xd554 <_handle_select_render_helper+0x72>
    d552:	44 c0       	rjmp	.+136    	; 0xd5dc <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d554:	40 e0       	ldi	r20, 0x00	; 0
    d556:	67 e5       	ldi	r22, 0x57	; 87
    d558:	74 e4       	ldi	r23, 0x44	; 68
    d55a:	82 2f       	mov	r24, r18
    d55c:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d560:	aa 24       	eor	r10, r10
    d562:	a3 94       	inc	r10
    d564:	a1 0e       	add	r10, r17
    d566:	40 e0       	ldi	r20, 0x00	; 0
    d568:	64 e5       	ldi	r22, 0x54	; 84
    d56a:	74 e4       	ldi	r23, 0x44	; 68
    d56c:	8a 2d       	mov	r24, r10
    d56e:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d572:	cb 2c       	mov	r12, r11
    d574:	d1 2c       	mov	r13, r1
    d576:	f5 e0       	ldi	r31, 0x05	; 5
    d578:	cf 0e       	add	r12, r31
    d57a:	d1 1c       	adc	r13, r1
    d57c:	f7 01       	movw	r30, r14
    d57e:	40 81       	ld	r20, Z
    d580:	44 0f       	add	r20, r20
    d582:	44 0f       	add	r20, r20
    d584:	44 0f       	add	r20, r20
    d586:	48 5c       	subi	r20, 0xC8	; 200
    d588:	84 81       	ldd	r24, Z+4	; 0x04
    d58a:	b6 01       	movw	r22, r12
    d58c:	68 0f       	add	r22, r24
    d58e:	71 1d       	adc	r23, r1
    d590:	87 fd       	sbrc	r24, 7
    d592:	7a 95       	dec	r23
    d594:	66 0f       	add	r22, r22
    d596:	66 0f       	add	r22, r22
    d598:	66 0f       	add	r22, r22
    d59a:	01 e0       	ldi	r16, 0x01	; 1
    d59c:	21 e0       	ldi	r18, 0x01	; 1
    d59e:	81 2f       	mov	r24, r17
    d5a0:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d5a4:	f7 01       	movw	r30, r14
    d5a6:	40 81       	ld	r20, Z
    d5a8:	44 0f       	add	r20, r20
    d5aa:	44 0f       	add	r20, r20
    d5ac:	44 0f       	add	r20, r20
    d5ae:	48 5b       	subi	r20, 0xB8	; 184
    d5b0:	84 81       	ldd	r24, Z+4	; 0x04
    d5b2:	c8 0e       	add	r12, r24
    d5b4:	d1 1c       	adc	r13, r1
    d5b6:	87 fd       	sbrc	r24, 7
    d5b8:	da 94       	dec	r13
    d5ba:	6c 2d       	mov	r22, r12
    d5bc:	66 0f       	add	r22, r22
    d5be:	66 0f       	add	r22, r22
    d5c0:	66 0f       	add	r22, r22
    d5c2:	21 e0       	ldi	r18, 0x01	; 1
    d5c4:	8a 2d       	mov	r24, r10
    d5c6:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d5ca:	43 e0       	ldi	r20, 0x03	; 3
    d5cc:	b7 01       	movw	r22, r14
    d5ce:	6f 5f       	subi	r22, 0xFF	; 255
    d5d0:	7f 4f       	sbci	r23, 0xFF	; 255
    d5d2:	ce 01       	movw	r24, r28
    d5d4:	01 96       	adiw	r24, 0x01	; 1
    d5d6:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
    d5da:	28 c0       	rjmp	.+80     	; 0xd62c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d5dc:	82 30       	cpi	r24, 0x02	; 2
    d5de:	31 f5       	brne	.+76     	; 0xd62c <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d5e0:	c4 2e       	mov	r12, r20
    d5e2:	d1 2c       	mov	r13, r1
    d5e4:	48 e2       	ldi	r20, 0x28	; 40
    d5e6:	65 e0       	ldi	r22, 0x05	; 5
    d5e8:	70 e0       	ldi	r23, 0x00	; 0
    d5ea:	c6 01       	movw	r24, r12
    d5ec:	06 96       	adiw	r24, 0x06	; 6
    d5ee:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d5f2:	23 e0       	ldi	r18, 0x03	; 3
    d5f4:	a7 01       	movw	r20, r14
    d5f6:	4f 5f       	subi	r20, 0xFF	; 255
    d5f8:	5f 4f       	sbci	r21, 0xFF	; 255
    d5fa:	65 e0       	ldi	r22, 0x05	; 5
    d5fc:	87 e0       	ldi	r24, 0x07	; 7
    d5fe:	8b 0d       	add	r24, r11
    d600:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d604:	49 e2       	ldi	r20, 0x29	; 41
    d606:	65 e0       	ldi	r22, 0x05	; 5
    d608:	70 e0       	ldi	r23, 0x00	; 0
    d60a:	c6 01       	movw	r24, r12
    d60c:	0a 96       	adiw	r24, 0x0a	; 10
    d60e:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    d612:	40 e0       	ldi	r20, 0x00	; 0
    d614:	67 eb       	ldi	r22, 0xB7	; 183
    d616:	74 e4       	ldi	r23, 0x44	; 68
    d618:	81 2f       	mov	r24, r17
    d61a:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d61e:	40 e0       	ldi	r20, 0x00	; 0
    d620:	67 eb       	ldi	r22, 0xB7	; 183
    d622:	74 e4       	ldi	r23, 0x44	; 68
    d624:	81 e0       	ldi	r24, 0x01	; 1
    d626:	81 0f       	add	r24, r17
    d628:	0e 94 68 55 	call	0xaad0	; 0xaad0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d62c:	f7 01       	movw	r30, r14
    d62e:	60 81       	ld	r22, Z
    d630:	68 5f       	subi	r22, 0xF8	; 248
    d632:	23 e0       	ldi	r18, 0x03	; 3
    d634:	ae 01       	movw	r20, r28
    d636:	4f 5f       	subi	r20, 0xFF	; 255
    d638:	5f 4f       	sbci	r21, 0xFF	; 255
    d63a:	85 e0       	ldi	r24, 0x05	; 5
    d63c:	8b 0d       	add	r24, r11
    d63e:	0e 94 68 57 	call	0xaed0	; 0xaed0 <LBPrintStr>
}
    d642:	0f 90       	pop	r0
    d644:	0f 90       	pop	r0
    d646:	0f 90       	pop	r0
    d648:	df 91       	pop	r29
    d64a:	cf 91       	pop	r28
    d64c:	1f 91       	pop	r17
    d64e:	0f 91       	pop	r16
    d650:	ff 90       	pop	r15
    d652:	ef 90       	pop	r14
    d654:	df 90       	pop	r13
    d656:	cf 90       	pop	r12
    d658:	bf 90       	pop	r11
    d65a:	af 90       	pop	r10
    d65c:	08 95       	ret

0000d65e <load_handle_select>:

void load_handle_select()
{
    d65e:	8f 92       	push	r8
    d660:	9f 92       	push	r9
    d662:	af 92       	push	r10
    d664:	bf 92       	push	r11
    d666:	cf 92       	push	r12
    d668:	df 92       	push	r13
    d66a:	ef 92       	push	r14
    d66c:	ff 92       	push	r15
    d66e:	0f 93       	push	r16
    d670:	1f 93       	push	r17
    d672:	cf 93       	push	r28
    d674:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d676:	82 e0       	ldi	r24, 0x02	; 2
    d678:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    d67c:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d680:	45 e3       	ldi	r20, 0x35	; 53
    d682:	58 e8       	ldi	r21, 0x88	; 136
    d684:	64 e0       	ldi	r22, 0x04	; 4
    d686:	83 e0       	ldi	r24, 0x03	; 3
    d688:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    d68c:	4f e2       	ldi	r20, 0x2F	; 47
    d68e:	58 e8       	ldi	r21, 0x88	; 136
    d690:	64 e0       	ldi	r22, 0x04	; 4
    d692:	84 e1       	ldi	r24, 0x14	; 20
    d694:	0e 94 ea 55 	call	0xabd4	; 0xabd4 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    d698:	45 ef       	ldi	r20, 0xF5	; 245
    d69a:	52 e0       	ldi	r21, 0x02	; 2
    d69c:	61 e0       	ldi	r22, 0x01	; 1
    d69e:	70 e0       	ldi	r23, 0x00	; 0
    d6a0:	89 e0       	ldi	r24, 0x09	; 9
    d6a2:	90 e0       	ldi	r25, 0x00	; 0
    d6a4:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(6, 5, (char*) strPlayer1);
    d6a8:	44 ee       	ldi	r20, 0xE4	; 228
    d6aa:	52 e0       	ldi	r21, 0x02	; 2
    d6ac:	65 e0       	ldi	r22, 0x05	; 5
    d6ae:	70 e0       	ldi	r23, 0x00	; 0
    d6b0:	86 e0       	ldi	r24, 0x06	; 6
    d6b2:	90 e0       	ldi	r25, 0x00	; 0
    d6b4:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(23, 5, (char*) strPlayer2);
    d6b8:	41 ee       	ldi	r20, 0xE1	; 225
    d6ba:	52 e0       	ldi	r21, 0x02	; 2
    d6bc:	65 e0       	ldi	r22, 0x05	; 5
    d6be:	70 e0       	ldi	r23, 0x00	; 0
    d6c0:	87 e1       	ldi	r24, 0x17	; 23
    d6c2:	90 e0       	ldi	r25, 0x00	; 0
    d6c4:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
    d6c8:	8a ee       	ldi	r24, 0xEA	; 234
    d6ca:	e8 2e       	mov	r14, r24
    d6cc:	8b e0       	ldi	r24, 0x0B	; 11
    d6ce:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d6d0:	c0 e0       	ldi	r28, 0x00	; 0
    d6d2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d6d4:	93 e0       	ldi	r25, 0x03	; 3
    d6d6:	a9 2e       	mov	r10, r25
    d6d8:	b1 2c       	mov	r11, r1
    d6da:	67 01       	movw	r12, r14
    d6dc:	ce 01       	movw	r24, r28
    d6de:	b5 01       	movw	r22, r10
    d6e0:	0e 94 52 70 	call	0xe0a4	; 0xe0a4 <__divmodhi4>
    d6e4:	4c 01       	movw	r8, r24
    d6e6:	8b 01       	movw	r16, r22
    d6e8:	08 5f       	subi	r16, 0xF8	; 248
    d6ea:	1f 4f       	sbci	r17, 0xFF	; 255
    d6ec:	f7 01       	movw	r30, r14
    d6ee:	41 91       	ld	r20, Z+
    d6f0:	7f 01       	movw	r14, r30
    d6f2:	b8 01       	movw	r22, r16
    d6f4:	03 96       	adiw	r24, 0x03	; 3
    d6f6:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d6fa:	f6 01       	movw	r30, r12
    d6fc:	40 81       	ld	r20, Z
    d6fe:	b8 01       	movw	r22, r16
    d700:	c4 01       	movw	r24, r8
    d702:	44 96       	adiw	r24, 0x14	; 20
    d704:	0e 94 85 56 	call	0xad0a	; 0xad0a <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d708:	21 96       	adiw	r28, 0x01	; 1
    d70a:	cb 31       	cpi	r28, 0x1B	; 27
    d70c:	d1 05       	cpc	r29, r1
    d70e:	29 f7       	brne	.-54     	; 0xd6da <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
    d710:	46 ed       	ldi	r20, 0xD6	; 214
    d712:	52 e0       	ldi	r21, 0x02	; 2
    d714:	65 e1       	ldi	r22, 0x15	; 21
    d716:	70 e0       	ldi	r23, 0x00	; 0
    d718:	88 e0       	ldi	r24, 0x08	; 8
    d71a:	90 e0       	ldi	r25, 0x00	; 0
    d71c:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(8, 22, (char*) strConfirmHandle);
    d720:	4a ec       	ldi	r20, 0xCA	; 202
    d722:	52 e0       	ldi	r21, 0x02	; 2
    d724:	66 e1       	ldi	r22, 0x16	; 22
    d726:	70 e0       	ldi	r23, 0x00	; 0
    d728:	88 e0       	ldi	r24, 0x08	; 8
    d72a:	90 e0       	ldi	r25, 0x00	; 0
    d72c:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(8, 23, (char*) strCancelHandle);
    d730:	4f eb       	ldi	r20, 0xBF	; 191
    d732:	52 e0       	ldi	r21, 0x02	; 2
    d734:	67 e1       	ldi	r22, 0x17	; 23
    d736:	70 e0       	ldi	r23, 0x00	; 0
    d738:	88 e0       	ldi	r24, 0x08	; 8
    d73a:	90 e0       	ldi	r25, 0x00	; 0
    d73c:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>
	Print(8, 24, (char*) strChangeHandle);
    d740:	47 e9       	ldi	r20, 0x97	; 151
    d742:	52 e0       	ldi	r21, 0x02	; 2
    d744:	68 e1       	ldi	r22, 0x18	; 24
    d746:	70 e0       	ldi	r23, 0x00	; 0
    d748:	88 e0       	ldi	r24, 0x08	; 8
    d74a:	90 e0       	ldi	r25, 0x00	; 0
}
    d74c:	df 91       	pop	r29
    d74e:	cf 91       	pop	r28
    d750:	1f 91       	pop	r17
    d752:	0f 91       	pop	r16
    d754:	ff 90       	pop	r15
    d756:	ef 90       	pop	r14
    d758:	df 90       	pop	r13
    d75a:	cf 90       	pop	r12
    d75c:	bf 90       	pop	r11
    d75e:	af 90       	pop	r10
    d760:	9f 90       	pop	r9
    d762:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
	Print(8, 22, (char*) strConfirmHandle);
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
    d764:	0c 94 6a 56 	jmp	0xacd4	; 0xacd4 <Print>

0000d768 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    d768:	0f 93       	push	r16
    d76a:	cf 93       	push	r28
    d76c:	df 93       	push	r29
    d76e:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    d770:	90 91 0b 0c 	lds	r25, 0x0C0B
    d774:	91 30       	cpi	r25, 0x01	; 1
    d776:	41 f0       	breq	.+16     	; 0xd788 <update_splash+0x20>
    d778:	92 30       	cpi	r25, 0x02	; 2
    d77a:	51 f0       	breq	.+20     	; 0xd790 <update_splash+0x28>
    d77c:	91 11       	cpse	r25, r1
    d77e:	0f c0       	rjmp	.+30     	; 0xd79e <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    d780:	01 e0       	ldi	r16, 0x01	; 1
    d782:	21 e0       	ldi	r18, 0x01	; 1
    d784:	48 e6       	ldi	r20, 0x68	; 104
    d786:	07 c0       	rjmp	.+14     	; 0xd796 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    d788:	01 e0       	ldi	r16, 0x01	; 1
    d78a:	21 e0       	ldi	r18, 0x01	; 1
    d78c:	40 e7       	ldi	r20, 0x70	; 112
    d78e:	03 c0       	rjmp	.+6      	; 0xd796 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    d790:	01 e0       	ldi	r16, 0x01	; 1
    d792:	21 e0       	ldi	r18, 0x01	; 1
    d794:	48 e7       	ldi	r20, 0x78	; 120
    d796:	60 e3       	ldi	r22, 0x30	; 48
    d798:	80 e0       	ldi	r24, 0x00	; 0
    d79a:	0e 94 ba 55 	call	0xab74	; 0xab74 <MoveSprite>
			break;
	}
	Print(9, 21, (char*) strSelectHandle);
    d79e:	46 ed       	ldi	r20, 0xD6	; 214
    d7a0:	52 e0       	ldi	r21, 0x02	; 2
    d7a2:	65 e1       	ldi	r22, 0x15	; 21
    d7a4:	70 e0       	ldi	r23, 0x00	; 0
    d7a6:	89 e0       	ldi	r24, 0x09	; 9
    d7a8:	90 e0       	ldi	r25, 0x00	; 0
    d7aa:	0e 94 6a 56 	call	0xacd4	; 0xacd4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    d7ae:	88 81       	ld	r24, Y
    d7b0:	99 81       	ldd	r25, Y+1	; 0x01
    d7b2:	00 97       	sbiw	r24, 0x00	; 0
    d7b4:	21 f0       	breq	.+8      	; 0xd7be <update_splash+0x56>
    d7b6:	10 92 31 0b 	sts	0x0B31, r1
    d7ba:	10 92 30 0b 	sts	0x0B30, r1
	
	if (p1->pressed & BTN_UP)
    d7be:	84 ff       	sbrs	r24, 4
    d7c0:	0e c0       	rjmp	.+28     	; 0xd7de <update_splash+0x76>
	{
		game.selection--;
    d7c2:	80 91 0b 0c 	lds	r24, 0x0C0B
    d7c6:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    d7c8:	87 ff       	sbrs	r24, 7
    d7ca:	11 c0       	rjmp	.+34     	; 0xd7ee <update_splash+0x86>
    d7cc:	10 92 0b 0c 	sts	0x0C0B, r1
		SFX_NAVIGATE;
    d7d0:	2f ef       	ldi	r18, 0xFF	; 255
    d7d2:	47 e1       	ldi	r20, 0x17	; 23
    d7d4:	67 e0       	ldi	r22, 0x07	; 7
    d7d6:	84 e0       	ldi	r24, 0x04	; 4
    d7d8:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
    d7dc:	6f c0       	rjmp	.+222    	; 0xd8bc <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    d7de:	85 ff       	sbrs	r24, 5
    d7e0:	09 c0       	rjmp	.+18     	; 0xd7f4 <update_splash+0x8c>
	{
		game.selection++;
    d7e2:	80 91 0b 0c 	lds	r24, 0x0C0B
    d7e6:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    d7e8:	83 30       	cpi	r24, 0x03	; 3
    d7ea:	0c f0       	brlt	.+2      	; 0xd7ee <update_splash+0x86>
    d7ec:	82 e0       	ldi	r24, 0x02	; 2
    d7ee:	80 93 0b 0c 	sts	0x0C0B, r24
    d7f2:	ee cf       	rjmp	.-36     	; 0xd7d0 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d7f4:	90 ff       	sbrs	r25, 0
    d7f6:	2c c0       	rjmp	.+88     	; 0xd850 <update_splash+0xe8>
    d7f8:	80 91 0b 0c 	lds	r24, 0x0C0B
    d7fc:	82 30       	cpi	r24, 0x02	; 2
    d7fe:	a8 f4       	brcc	.+42     	; 0xd82a <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    d800:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    d804:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    d808:	2f ef       	ldi	r18, 0xFF	; 255
    d80a:	47 e1       	ldi	r20, 0x17	; 23
    d80c:	67 e0       	ldi	r22, 0x07	; 7
    d80e:	84 e0       	ldi	r24, 0x04	; 4
    d810:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		fade_through();
    d814:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		load_eeprom(&handles);
    d818:	88 ee       	ldi	r24, 0xE8	; 232
    d81a:	9b e0       	ldi	r25, 0x0B	; 11
    d81c:	0e 94 07 5a 	call	0xb40e	; 0xb40e <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    d820:	df 91       	pop	r29
    d822:	cf 91       	pop	r28
    d824:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d826:	0c 94 2f 6b 	jmp	0xd65e	; 0xd65e <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    d82a:	82 30       	cpi	r24, 0x02	; 2
    d82c:	89 f4       	brne	.+34     	; 0xd850 <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    d82e:	2f ef       	ldi	r18, 0xFF	; 255
    d830:	47 e1       	ldi	r20, 0x17	; 23
    d832:	67 e0       	ldi	r22, 0x07	; 7
    d834:	84 e0       	ldi	r24, 0x04	; 4
    d836:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		fade_through();
    d83a:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		load_eeprom(&scores);
    d83e:	81 ec       	ldi	r24, 0xC1	; 193
    d840:	9b e0       	ldi	r25, 0x0B	; 11
    d842:	0e 94 07 5a 	call	0xb40e	; 0xb40e <load_eeprom>
		level_transition(LBRandom(0, 9));
		return;
		
	}
	demo_counter++;
}
    d846:	df 91       	pop	r29
    d848:	cf 91       	pop	r28
    d84a:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d84c:	0c 94 f3 65 	jmp	0xcbe6	; 0xcbe6 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    d850:	80 91 30 0b 	lds	r24, 0x0B30
    d854:	90 91 31 0b 	lds	r25, 0x0B31
    d858:	88 35       	cpi	r24, 0x58	; 88
    d85a:	92 40       	sbci	r25, 0x02	; 2
    d85c:	78 f1       	brcs	.+94     	; 0xd8bc <update_splash+0x154>
	{
		demo_counter = 0;
    d85e:	10 92 31 0b 	sts	0x0B31, r1
    d862:	10 92 30 0b 	sts	0x0B30, r1
		game.selection = CPUVCPU;
    d866:	83 e0       	ldi	r24, 0x03	; 3
    d868:	80 93 0b 0c 	sts	0x0C0B, r24
		player1.handle_id = 9;
    d86c:	c9 e0       	ldi	r28, 0x09	; 9
    d86e:	c0 93 30 0c 	sts	0x0C30, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d872:	43 e0       	ldi	r20, 0x03	; 3
    d874:	65 e0       	ldi	r22, 0x05	; 5
    d876:	7c e0       	ldi	r23, 0x0C	; 12
    d878:	81 e3       	ldi	r24, 0x31	; 49
    d87a:	9c e0       	ldi	r25, 0x0C	; 12
    d87c:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		player2.handle_id = 9;
    d880:	c0 93 94 0f 	sts	0x0F94, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d884:	43 e0       	ldi	r20, 0x03	; 3
    d886:	65 e0       	ldi	r22, 0x05	; 5
    d888:	7c e0       	ldi	r23, 0x0C	; 12
    d88a:	85 e9       	ldi	r24, 0x95	; 149
    d88c:	9f e0       	ldi	r25, 0x0F	; 15
    d88e:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		SFX_NAVIGATE;
    d892:	2f ef       	ldi	r18, 0xFF	; 255
    d894:	47 e1       	ldi	r20, 0x17	; 23
    d896:	67 e0       	ldi	r22, 0x07	; 7
    d898:	84 e0       	ldi	r24, 0x04	; 4
    d89a:	0e 94 ce 4b 	call	0x979c	; 0x979c <TriggerNote>
		clear_sprites();
    d89e:	0e 94 23 5a 	call	0xb446	; 0xb446 <clear_sprites>
		fade_through();
    d8a2:	0e 94 19 5a 	call	0xb432	; 0xb432 <fade_through>
		level_transition(LBRandom(0, 9));
    d8a6:	69 e0       	ldi	r22, 0x09	; 9
    d8a8:	70 e0       	ldi	r23, 0x00	; 0
    d8aa:	80 e0       	ldi	r24, 0x00	; 0
    d8ac:	90 e0       	ldi	r25, 0x00	; 0
    d8ae:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    d8b2:	df 91       	pop	r29
    d8b4:	cf 91       	pop	r28
    d8b6:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 9));
    d8b8:	0c 94 8d 65 	jmp	0xcb1a	; 0xcb1a <level_transition>
		return;
		
	}
	demo_counter++;
    d8bc:	80 91 30 0b 	lds	r24, 0x0B30
    d8c0:	90 91 31 0b 	lds	r25, 0x0B31
    d8c4:	01 96       	adiw	r24, 0x01	; 1
    d8c6:	90 93 31 0b 	sts	0x0B31, r25
    d8ca:	80 93 30 0b 	sts	0x0B30, r24
}
    d8ce:	df 91       	pop	r29
    d8d0:	cf 91       	pop	r28
    d8d2:	0f 91       	pop	r16
    d8d4:	08 95       	ret

0000d8d6 <update_handle_select>:
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d8d6:	0f 93       	push	r16
    d8d8:	1f 93       	push	r17
    d8da:	cf 93       	push	r28
    d8dc:	df 93       	push	r29
    d8de:	8c 01       	movw	r16, r24
    d8e0:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d8e2:	26 e0       	ldi	r18, 0x06	; 6
    d8e4:	42 e0       	ldi	r20, 0x02	; 2
    d8e6:	bc 01       	movw	r22, r24
    d8e8:	8a e2       	ldi	r24, 0x2A	; 42
    d8ea:	9b e0       	ldi	r25, 0x0B	; 11
    d8ec:	0e 94 71 6a 	call	0xd4e2	; 0xd4e2 <_handle_select_render_helper>
	if (game.selection == PVP)
    d8f0:	80 91 0b 0c 	lds	r24, 0x0C0B
    d8f4:	81 30       	cpi	r24, 0x01	; 1
    d8f6:	39 f4       	brne	.+14     	; 0xd906 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d8f8:	28 e0       	ldi	r18, 0x08	; 8
    d8fa:	43 e1       	ldi	r20, 0x13	; 19
    d8fc:	be 01       	movw	r22, r28
    d8fe:	84 e2       	ldi	r24, 0x24	; 36
    d900:	9b e0       	ldi	r25, 0x0B	; 11
    d902:	0e 94 71 6a 	call	0xd4e2	; 0xd4e2 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d906:	45 e2       	ldi	r20, 0x25	; 37
    d908:	5c e0       	ldi	r21, 0x0C	; 12
    d90a:	b8 01       	movw	r22, r16
    d90c:	8a e2       	ldi	r24, 0x2A	; 42
    d90e:	9b e0       	ldi	r25, 0x0B	; 11
    d910:	0e 94 ac 69 	call	0xd358	; 0xd358 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d914:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    d918:	80 91 0b 0c 	lds	r24, 0x0C0B
    d91c:	81 30       	cpi	r24, 0x01	; 1
    d91e:	19 f0       	breq	.+6      	; 0xd926 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d920:	12 30       	cpi	r17, 0x02	; 2
    d922:	69 f0       	breq	.+26     	; 0xd93e <update_handle_select+0x68>
    d924:	21 c0       	rjmp	.+66     	; 0xd968 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d926:	49 e8       	ldi	r20, 0x89	; 137
    d928:	5f e0       	ldi	r21, 0x0F	; 15
    d92a:	be 01       	movw	r22, r28
    d92c:	84 e2       	ldi	r24, 0x24	; 36
    d92e:	9b e0       	ldi	r25, 0x0B	; 11
    d930:	0e 94 ac 69 	call	0xd358	; 0xd358 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d934:	80 91 29 0b 	lds	r24, 0x0B29
    d938:	82 30       	cpi	r24, 0x02	; 2
    d93a:	b1 f4       	brne	.+44     	; 0xd968 <update_handle_select+0x92>
    d93c:	f1 cf       	rjmp	.-30     	; 0xd920 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d93e:	80 91 0b 0c 	lds	r24, 0x0C0B
    d942:	81 11       	cpse	r24, r1
    d944:	0a c0       	rjmp	.+20     	; 0xd95a <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d946:	89 e0       	ldi	r24, 0x09	; 9
    d948:	80 93 94 0f 	sts	0x0F94, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d94c:	43 e0       	ldi	r20, 0x03	; 3
    d94e:	65 e0       	ldi	r22, 0x05	; 5
    d950:	7c e0       	ldi	r23, 0x0C	; 12
    d952:	85 e9       	ldi	r24, 0x95	; 149
    d954:	9f e0       	ldi	r25, 0x0F	; 15
    d956:	0e 94 5c 57 	call	0xaeb8	; 0xaeb8 <LBCopyChars>
		}
		level_transition(0);
    d95a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    d95c:	df 91       	pop	r29
    d95e:	cf 91       	pop	r28
    d960:	1f 91       	pop	r17
    d962:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    d964:	0c 94 8d 65 	jmp	0xcb1a	; 0xcb1a <level_transition>
	}
}
    d968:	df 91       	pop	r29
    d96a:	cf 91       	pop	r28
    d96c:	1f 91       	pop	r17
    d96e:	0f 91       	pop	r16
    d970:	08 95       	ret

0000d972 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d972:	00 97       	sbiw	r24, 0x00	; 0
    d974:	41 f0       	breq	.+16     	; 0xd986 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d976:	81 30       	cpi	r24, 0x01	; 1
    d978:	91 05       	cpc	r25, r1
    d97a:	41 f0       	breq	.+16     	; 0xd98c <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d97c:	82 30       	cpi	r24, 0x02	; 2
    d97e:	91 05       	cpc	r25, r1
    d980:	41 f0       	breq	.+16     	; 0xd992 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d982:	03 97       	sbiw	r24, 0x03	; 3
    d984:	49 f0       	breq	.+18     	; 0xd998 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d986:	80 e1       	ldi	r24, 0x10	; 16
    d988:	90 e0       	ldi	r25, 0x00	; 0
    d98a:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d98c:	80 e2       	ldi	r24, 0x20	; 32
    d98e:	90 e0       	ldi	r25, 0x00	; 0
    d990:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d992:	80 e4       	ldi	r24, 0x40	; 64
    d994:	90 e0       	ldi	r25, 0x00	; 0
    d996:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d998:	80 e8       	ldi	r24, 0x80	; 128
    d99a:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d99c:	08 95       	ret

0000d99e <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d99e:	8f 92       	push	r8
    d9a0:	9f 92       	push	r9
    d9a2:	af 92       	push	r10
    d9a4:	bf 92       	push	r11
    d9a6:	cf 92       	push	r12
    d9a8:	df 92       	push	r13
    d9aa:	ef 92       	push	r14
    d9ac:	ff 92       	push	r15
    d9ae:	0f 93       	push	r16
    d9b0:	1f 93       	push	r17
    d9b2:	cf 93       	push	r28
    d9b4:	df 93       	push	r29
    d9b6:	e8 2e       	mov	r14, r24
    d9b8:	d6 2e       	mov	r13, r22
    d9ba:	f4 2e       	mov	r15, r20
    d9bc:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d9be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d9c0:	88 23       	and	r24, r24
    d9c2:	09 f4       	brne	.+2      	; 0xd9c6 <crash_and_turn+0x28>
    d9c4:	a8 c0       	rjmp	.+336    	; 0xdb16 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d9c6:	f8 01       	movw	r30, r16
    d9c8:	c4 80       	ldd	r12, Z+4	; 0x04
    d9ca:	c4 fe       	sbrs	r12, 4
    d9cc:	23 c0       	rjmp	.+70     	; 0xda14 <crash_and_turn+0x76>
    d9ce:	fe e1       	ldi	r31, 0x1E	; 30
    d9d0:	6f 02       	muls	r22, r31
    d9d2:	40 01       	movw	r8, r0
    d9d4:	11 24       	eor	r1, r1
    d9d6:	ae 2c       	mov	r10, r14
    d9d8:	bb 24       	eor	r11, r11
    d9da:	a7 fc       	sbrc	r10, 7
    d9dc:	b0 94       	com	r11
    d9de:	c4 01       	movw	r24, r8
    d9e0:	8a 0d       	add	r24, r10
    d9e2:	9b 1d       	adc	r25, r11
    d9e4:	01 97       	sbiw	r24, 0x01	; 1
    d9e6:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    d9ea:	81 11       	cpse	r24, r1
    d9ec:	13 c0       	rjmp	.+38     	; 0xda14 <crash_and_turn+0x76>
    d9ee:	c4 01       	movw	r24, r8
    d9f0:	8a 0d       	add	r24, r10
    d9f2:	9b 1d       	adc	r25, r11
    d9f4:	4d 96       	adiw	r24, 0x1d	; 29
    d9f6:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    d9fa:	81 11       	cpse	r24, r1
    d9fc:	0b c0       	rjmp	.+22     	; 0xda14 <crash_and_turn+0x76>
    d9fe:	c4 01       	movw	r24, r8
    da00:	8a 0d       	add	r24, r10
    da02:	9b 1d       	adc	r25, r11
    da04:	cb 96       	adiw	r24, 0x3b	; 59
    da06:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da0a:	81 11       	cpse	r24, r1
    da0c:	03 c0       	rjmp	.+6      	; 0xda14 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    da0e:	80 e4       	ldi	r24, 0x40	; 64
    da10:	90 e0       	ldi	r25, 0x00	; 0
    da12:	6f c0       	rjmp	.+222    	; 0xdaf2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    da14:	c6 fe       	sbrs	r12, 6
    da16:	23 c0       	rjmp	.+70     	; 0xda5e <crash_and_turn+0xc0>
    da18:	8d 2d       	mov	r24, r13
    da1a:	99 27       	eor	r25, r25
    da1c:	87 fd       	sbrc	r24, 7
    da1e:	90 95       	com	r25
    da20:	02 96       	adiw	r24, 0x02	; 2
    da22:	2e e1       	ldi	r18, 0x1E	; 30
    da24:	28 9f       	mul	r18, r24
    da26:	50 01       	movw	r10, r0
    da28:	29 9f       	mul	r18, r25
    da2a:	b0 0c       	add	r11, r0
    da2c:	11 24       	eor	r1, r1
    da2e:	ae 0c       	add	r10, r14
    da30:	b1 1c       	adc	r11, r1
    da32:	e7 fc       	sbrc	r14, 7
    da34:	ba 94       	dec	r11
    da36:	c5 01       	movw	r24, r10
    da38:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da3c:	81 11       	cpse	r24, r1
    da3e:	0f c0       	rjmp	.+30     	; 0xda5e <crash_and_turn+0xc0>
    da40:	c5 01       	movw	r24, r10
    da42:	01 96       	adiw	r24, 0x01	; 1
    da44:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da48:	81 11       	cpse	r24, r1
    da4a:	09 c0       	rjmp	.+18     	; 0xda5e <crash_and_turn+0xc0>
    da4c:	c5 01       	movw	r24, r10
    da4e:	02 96       	adiw	r24, 0x02	; 2
    da50:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da54:	81 11       	cpse	r24, r1
    da56:	03 c0       	rjmp	.+6      	; 0xda5e <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    da58:	80 e2       	ldi	r24, 0x20	; 32
    da5a:	90 e0       	ldi	r25, 0x00	; 0
    da5c:	4a c0       	rjmp	.+148    	; 0xdaf2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    da5e:	c5 fe       	sbrs	r12, 5
    da60:	24 c0       	rjmp	.+72     	; 0xdaaa <crash_and_turn+0x10c>
    da62:	fd 2d       	mov	r31, r13
    da64:	8e e1       	ldi	r24, 0x1E	; 30
    da66:	f8 02       	muls	r31, r24
    da68:	40 01       	movw	r8, r0
    da6a:	11 24       	eor	r1, r1
    da6c:	ae 2c       	mov	r10, r14
    da6e:	bb 24       	eor	r11, r11
    da70:	a7 fc       	sbrc	r10, 7
    da72:	b0 94       	com	r11
    da74:	c4 01       	movw	r24, r8
    da76:	8a 0d       	add	r24, r10
    da78:	9b 1d       	adc	r25, r11
    da7a:	02 96       	adiw	r24, 0x02	; 2
    da7c:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da80:	81 11       	cpse	r24, r1
    da82:	13 c0       	rjmp	.+38     	; 0xdaaa <crash_and_turn+0x10c>
    da84:	c4 01       	movw	r24, r8
    da86:	8a 0d       	add	r24, r10
    da88:	9b 1d       	adc	r25, r11
    da8a:	80 96       	adiw	r24, 0x20	; 32
    da8c:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    da90:	81 11       	cpse	r24, r1
    da92:	0b c0       	rjmp	.+22     	; 0xdaaa <crash_and_turn+0x10c>
    da94:	c4 01       	movw	r24, r8
    da96:	8a 0d       	add	r24, r10
    da98:	9b 1d       	adc	r25, r11
    da9a:	ce 96       	adiw	r24, 0x3e	; 62
    da9c:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    daa0:	81 11       	cpse	r24, r1
    daa2:	03 c0       	rjmp	.+6      	; 0xdaaa <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    daa4:	80 e8       	ldi	r24, 0x80	; 128
    daa6:	90 e0       	ldi	r25, 0x00	; 0
    daa8:	24 c0       	rjmp	.+72     	; 0xdaf2 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    daaa:	c7 fe       	sbrs	r12, 7
    daac:	29 c0       	rjmp	.+82     	; 0xdb00 <crash_and_turn+0x162>
    daae:	8d 2d       	mov	r24, r13
    dab0:	99 27       	eor	r25, r25
    dab2:	87 fd       	sbrc	r24, 7
    dab4:	90 95       	com	r25
    dab6:	01 97       	sbiw	r24, 0x01	; 1
    dab8:	2e e1       	ldi	r18, 0x1E	; 30
    daba:	28 9f       	mul	r18, r24
    dabc:	50 01       	movw	r10, r0
    dabe:	29 9f       	mul	r18, r25
    dac0:	b0 0c       	add	r11, r0
    dac2:	11 24       	eor	r1, r1
    dac4:	ae 0c       	add	r10, r14
    dac6:	b1 1c       	adc	r11, r1
    dac8:	e7 fc       	sbrc	r14, 7
    daca:	ba 94       	dec	r11
    dacc:	c5 01       	movw	r24, r10
    dace:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    dad2:	81 11       	cpse	r24, r1
    dad4:	15 c0       	rjmp	.+42     	; 0xdb00 <crash_and_turn+0x162>
    dad6:	c5 01       	movw	r24, r10
    dad8:	01 96       	adiw	r24, 0x01	; 1
    dada:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    dade:	81 11       	cpse	r24, r1
    dae0:	0f c0       	rjmp	.+30     	; 0xdb00 <crash_and_turn+0x162>
    dae2:	c5 01       	movw	r24, r10
    dae4:	02 96       	adiw	r24, 0x02	; 2
    dae6:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <solid_tile>
    daea:	81 11       	cpse	r24, r1
    daec:	09 c0       	rjmp	.+18     	; 0xdb00 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    daee:	80 e1       	ldi	r24, 0x10	; 16
    daf0:	90 e0       	ldi	r25, 0x00	; 0
    daf2:	f8 01       	movw	r30, r16
    daf4:	95 83       	std	Z+5, r25	; 0x05
    daf6:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    daf8:	ce 01       	movw	r24, r28
    dafa:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <recoil_sprite>
			recoiled = 0;
    dafe:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    db00:	f8 01       	movw	r30, r16
    db02:	24 81       	ldd	r18, Z+4	; 0x04
    db04:	35 81       	ldd	r19, Z+5	; 0x05
    db06:	8c 8d       	ldd	r24, Y+28	; 0x1c
    db08:	9d 8d       	ldd	r25, Y+29	; 0x1d
    db0a:	82 23       	and	r24, r18
    db0c:	93 23       	and	r25, r19
    db0e:	89 2b       	or	r24, r25
    db10:	11 f0       	breq	.+4      	; 0xdb16 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    db12:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    db14:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    db16:	f8 01       	movw	r30, r16
    db18:	84 81       	ldd	r24, Z+4	; 0x04
    db1a:	86 ff       	sbrs	r24, 6
    db1c:	05 c0       	rjmp	.+10     	; 0xdb28 <crash_and_turn+0x18a>
    db1e:	ff 20       	and	r15, r15
    db20:	19 f0       	breq	.+6      	; 0xdb28 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    db22:	80 e1       	ldi	r24, 0x10	; 16
    db24:	90 e0       	ldi	r25, 0x00	; 0
    db26:	15 c0       	rjmp	.+42     	; 0xdb52 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    db28:	84 ff       	sbrs	r24, 4
    db2a:	05 c0       	rjmp	.+10     	; 0xdb36 <crash_and_turn+0x198>
    db2c:	ff 20       	and	r15, r15
    db2e:	19 f0       	breq	.+6      	; 0xdb36 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    db30:	80 e8       	ldi	r24, 0x80	; 128
    db32:	90 e0       	ldi	r25, 0x00	; 0
    db34:	0d c0       	rjmp	.+26     	; 0xdb50 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    db36:	87 ff       	sbrs	r24, 7
    db38:	05 c0       	rjmp	.+10     	; 0xdb44 <crash_and_turn+0x1a6>
    db3a:	ff 20       	and	r15, r15
    db3c:	19 f0       	breq	.+6      	; 0xdb44 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    db3e:	80 e2       	ldi	r24, 0x20	; 32
    db40:	90 e0       	ldi	r25, 0x00	; 0
    db42:	06 c0       	rjmp	.+12     	; 0xdb50 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    db44:	85 ff       	sbrs	r24, 5
    db46:	09 c0       	rjmp	.+18     	; 0xdb5a <crash_and_turn+0x1bc>
    db48:	ff 20       	and	r15, r15
    db4a:	39 f0       	breq	.+14     	; 0xdb5a <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    db4c:	80 e4       	ldi	r24, 0x40	; 64
    db4e:	90 e0       	ldi	r25, 0x00	; 0
    db50:	f8 01       	movw	r30, r16
    db52:	95 83       	std	Z+5, r25	; 0x05
    db54:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    db56:	81 e0       	ldi	r24, 0x01	; 1
    db58:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    db5a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    db5c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    db5e:	80 31       	cpi	r24, 0x10	; 16
    db60:	91 05       	cpc	r25, r1
    db62:	19 f0       	breq	.+6      	; 0xdb6a <crash_and_turn+0x1cc>
    db64:	80 32       	cpi	r24, 0x20	; 32
    db66:	91 05       	cpc	r25, r1
    db68:	19 f4       	brne	.+6      	; 0xdb70 <crash_and_turn+0x1d2>
    db6a:	2a a1       	ldd	r18, Y+34	; 0x22
    db6c:	d2 16       	cp	r13, r18
    db6e:	59 f0       	breq	.+22     	; 0xdb86 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    db70:	80 34       	cpi	r24, 0x40	; 64
    db72:	91 05       	cpc	r25, r1
    db74:	19 f0       	breq	.+6      	; 0xdb7c <crash_and_turn+0x1de>
    db76:	80 38       	cpi	r24, 0x80	; 128
    db78:	91 05       	cpc	r25, r1
    db7a:	39 f4       	brne	.+14     	; 0xdb8a <crash_and_turn+0x1ec>
    db7c:	81 e0       	ldi	r24, 0x01	; 1
    db7e:	9a a1       	ldd	r25, Y+34	; 0x22
    db80:	e9 12       	cpse	r14, r25
    db82:	03 c0       	rjmp	.+6      	; 0xdb8a <crash_and_turn+0x1ec>
    db84:	03 c0       	rjmp	.+6      	; 0xdb8c <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    db86:	81 e0       	ldi	r24, 0x01	; 1
    db88:	01 c0       	rjmp	.+2      	; 0xdb8c <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    db8a:	80 e0       	ldi	r24, 0x00	; 0
}
    db8c:	df 91       	pop	r29
    db8e:	cf 91       	pop	r28
    db90:	1f 91       	pop	r17
    db92:	0f 91       	pop	r16
    db94:	ff 90       	pop	r15
    db96:	ef 90       	pop	r14
    db98:	df 90       	pop	r13
    db9a:	cf 90       	pop	r12
    db9c:	bf 90       	pop	r11
    db9e:	af 90       	pop	r10
    dba0:	9f 90       	pop	r9
    dba2:	8f 90       	pop	r8
    dba4:	08 95       	ret

0000dba6 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    dba6:	48 2f       	mov	r20, r24
    dba8:	55 27       	eor	r21, r21
    dbaa:	47 fd       	sbrc	r20, 7
    dbac:	50 95       	com	r21
    dbae:	57 ff       	sbrs	r21, 7
    dbb0:	03 c0       	rjmp	.+6      	; 0xdbb8 <get_cpu_goal_direction+0x12>
    dbb2:	51 95       	neg	r21
    dbb4:	41 95       	neg	r20
    dbb6:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    dbb8:	26 2f       	mov	r18, r22
    dbba:	33 27       	eor	r19, r19
    dbbc:	27 fd       	sbrc	r18, 7
    dbbe:	30 95       	com	r19
    dbc0:	37 ff       	sbrs	r19, 7
    dbc2:	03 c0       	rjmp	.+6      	; 0xdbca <get_cpu_goal_direction+0x24>
    dbc4:	31 95       	neg	r19
    dbc6:	21 95       	neg	r18
    dbc8:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    dbca:	24 17       	cp	r18, r20
    dbcc:	2c f4       	brge	.+10     	; 0xdbd8 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    dbce:	18 16       	cp	r1, r24
    dbd0:	44 f4       	brge	.+16     	; 0xdbe2 <get_cpu_goal_direction+0x3c>
    dbd2:	80 e8       	ldi	r24, 0x80	; 128
    dbd4:	90 e0       	ldi	r25, 0x00	; 0
    dbd6:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    dbd8:	16 16       	cp	r1, r22
    dbda:	34 f4       	brge	.+12     	; 0xdbe8 <get_cpu_goal_direction+0x42>
    dbdc:	80 e2       	ldi	r24, 0x20	; 32
    dbde:	90 e0       	ldi	r25, 0x00	; 0
    dbe0:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    dbe2:	80 e4       	ldi	r24, 0x40	; 64
    dbe4:	90 e0       	ldi	r25, 0x00	; 0
    dbe6:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    dbe8:	80 e1       	ldi	r24, 0x10	; 16
    dbea:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    dbec:	08 95       	ret

0000dbee <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    dbee:	2f 92       	push	r2
    dbf0:	3f 92       	push	r3
    dbf2:	4f 92       	push	r4
    dbf4:	5f 92       	push	r5
    dbf6:	6f 92       	push	r6
    dbf8:	7f 92       	push	r7
    dbfa:	8f 92       	push	r8
    dbfc:	9f 92       	push	r9
    dbfe:	af 92       	push	r10
    dc00:	bf 92       	push	r11
    dc02:	cf 92       	push	r12
    dc04:	df 92       	push	r13
    dc06:	ef 92       	push	r14
    dc08:	ff 92       	push	r15
    dc0a:	0f 93       	push	r16
    dc0c:	1f 93       	push	r17
    dc0e:	cf 93       	push	r28
    dc10:	df 93       	push	r29
    dc12:	00 d0       	rcall	.+0      	; 0xdc14 <get_cpu_joypad_state+0x26>
    dc14:	00 d0       	rcall	.+0      	; 0xdc16 <get_cpu_joypad_state+0x28>
    dc16:	00 d0       	rcall	.+0      	; 0xdc18 <get_cpu_joypad_state+0x2a>
    dc18:	cd b7       	in	r28, 0x3d	; 61
    dc1a:	de b7       	in	r29, 0x3e	; 62
    dc1c:	1c 01       	movw	r2, r24
    dc1e:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    dc20:	db 01       	movw	r26, r22
    dc22:	13 96       	adiw	r26, 0x03	; 3
    dc24:	8d 91       	ld	r24, X+
    dc26:	9d 91       	ld	r25, X+
    dc28:	0d 90       	ld	r0, X+
    dc2a:	bc 91       	ld	r27, X
    dc2c:	a0 2d       	mov	r26, r0
    dc2e:	89 83       	std	Y+1, r24	; 0x01
    dc30:	9a 83       	std	Y+2, r25	; 0x02
    dc32:	ab 83       	std	Y+3, r26	; 0x03
    dc34:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    dc36:	fb 01       	movw	r30, r22
    dc38:	47 80       	ldd	r4, Z+7	; 0x07
    dc3a:	50 84       	ldd	r5, Z+8	; 0x08
    dc3c:	61 84       	ldd	r6, Z+9	; 0x09
    dc3e:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    dc40:	d1 01       	movw	r26, r2
    dc42:	13 96       	adiw	r26, 0x03	; 3
    dc44:	8d 90       	ld	r8, X+
    dc46:	9d 90       	ld	r9, X+
    dc48:	ad 90       	ld	r10, X+
    dc4a:	bc 90       	ld	r11, X
    dc4c:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    dc4e:	17 96       	adiw	r26, 0x07	; 7
    dc50:	cd 90       	ld	r12, X+
    dc52:	dd 90       	ld	r13, X+
    dc54:	ed 90       	ld	r14, X+
    dc56:	fc 90       	ld	r15, X
    dc58:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    dc5a:	57 96       	adiw	r26, 0x17	; 23
    dc5c:	8c 91       	ld	r24, X
    dc5e:	81 11       	cpse	r24, r1
    dc60:	04 c0       	rjmp	.+8      	; 0xdc6a <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    dc62:	fa 01       	movw	r30, r20
    dc64:	15 82       	std	Z+5, r1	; 0x05
    dc66:	14 82       	std	Z+4, r1	; 0x04
		return;
    dc68:	4e c1       	rjmp	.+668    	; 0xdf06 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    dc6a:	da 01       	movw	r26, r20
    dc6c:	8d 91       	ld	r24, X+
    dc6e:	9c 91       	ld	r25, X
    dc70:	11 97       	sbiw	r26, 0x01	; 1
    dc72:	90 ff       	sbrs	r25, 0
    dc74:	02 c0       	rjmp	.+4      	; 0xdc7a <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    dc76:	1d 92       	st	X+, r1
    dc78:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    dc7a:	20 91 04 01 	lds	r18, 0x0104
    dc7e:	30 91 05 01 	lds	r19, 0x0105
    dc82:	c9 01       	movw	r24, r18
    dc84:	6a e0       	ldi	r22, 0x0A	; 10
    dc86:	70 e0       	ldi	r23, 0x00	; 0
    dc88:	0e 94 3e 70 	call	0xe07c	; 0xe07c <__udivmodhi4>
    dc8c:	89 2b       	or	r24, r25
    dc8e:	49 f4       	brne	.+18     	; 0xdca2 <get_cpu_joypad_state+0xb4>
    dc90:	f1 01       	movw	r30, r2
    dc92:	87 89       	ldd	r24, Z+23	; 0x17
    dc94:	83 33       	cpi	r24, 0x33	; 51
    dc96:	28 f0       	brcs	.+10     	; 0xdca2 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    dc98:	80 e0       	ldi	r24, 0x00	; 0
    dc9a:	91 e0       	ldi	r25, 0x01	; 1
    dc9c:	d8 01       	movw	r26, r16
    dc9e:	8d 93       	st	X+, r24
    dca0:	9c 93       	st	X, r25
    dca2:	3e 82       	std	Y+6, r3	; 0x06
    dca4:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    dca6:	c9 01       	movw	r24, r18
    dca8:	64 eb       	ldi	r22, 0xB4	; 180
    dcaa:	70 e0       	ldi	r23, 0x00	; 0
    dcac:	0e 94 3e 70 	call	0xe07c	; 0xe07c <__udivmodhi4>
    dcb0:	89 2b       	or	r24, r25
    dcb2:	41 f0       	breq	.+16     	; 0xdcc4 <get_cpu_joypad_state+0xd6>
    dcb4:	f1 01       	movw	r30, r2
    dcb6:	87 89       	ldd	r24, Z+23	; 0x17
    dcb8:	8a 30       	cpi	r24, 0x0A	; 10
    dcba:	21 f0       	breq	.+8      	; 0xdcc4 <get_cpu_joypad_state+0xd6>
    dcbc:	83 a1       	ldd	r24, Z+35	; 0x23
    dcbe:	88 23       	and	r24, r24
    dcc0:	09 f4       	brne	.+2      	; 0xdcc4 <get_cpu_joypad_state+0xd6>
    dcc2:	7e c0       	rjmp	.+252    	; 0xddc0 <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    dcc4:	20 e0       	ldi	r18, 0x00	; 0
    dcc6:	30 e0       	ldi	r19, 0x00	; 0
    dcc8:	40 e0       	ldi	r20, 0x00	; 0
    dcca:	5e e3       	ldi	r21, 0x3E	; 62
    dccc:	69 81       	ldd	r22, Y+1	; 0x01
    dcce:	7a 81       	ldd	r23, Y+2	; 0x02
    dcd0:	8b 81       	ldd	r24, Y+3	; 0x03
    dcd2:	9c 81       	ldd	r25, Y+4	; 0x04
    dcd4:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    dcd8:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
    dcdc:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    dcde:	20 e0       	ldi	r18, 0x00	; 0
    dce0:	30 e0       	ldi	r19, 0x00	; 0
    dce2:	40 e0       	ldi	r20, 0x00	; 0
    dce4:	5e e3       	ldi	r21, 0x3E	; 62
    dce6:	c3 01       	movw	r24, r6
    dce8:	b2 01       	movw	r22, r4
    dcea:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    dcee:	20 e0       	ldi	r18, 0x00	; 0
    dcf0:	30 e0       	ldi	r19, 0x00	; 0
    dcf2:	40 e4       	ldi	r20, 0x40	; 64
    dcf4:	50 e4       	ldi	r21, 0x40	; 64
    dcf6:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    dcfa:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
    dcfe:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    dd00:	20 e0       	ldi	r18, 0x00	; 0
    dd02:	30 e0       	ldi	r19, 0x00	; 0
    dd04:	40 e0       	ldi	r20, 0x00	; 0
    dd06:	5e e3       	ldi	r21, 0x3E	; 62
    dd08:	c5 01       	movw	r24, r10
    dd0a:	b4 01       	movw	r22, r8
    dd0c:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    dd10:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    dd14:	b3 2c       	mov	r11, r3
    dd16:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    dd18:	20 e0       	ldi	r18, 0x00	; 0
    dd1a:	30 e0       	ldi	r19, 0x00	; 0
    dd1c:	40 e0       	ldi	r20, 0x00	; 0
    dd1e:	5e e3       	ldi	r21, 0x3E	; 62
    dd20:	c7 01       	movw	r24, r14
    dd22:	b6 01       	movw	r22, r12
    dd24:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    dd28:	20 e0       	ldi	r18, 0x00	; 0
    dd2a:	30 e0       	ldi	r19, 0x00	; 0
    dd2c:	40 e4       	ldi	r20, 0x40	; 64
    dd2e:	50 e4       	ldi	r21, 0x40	; 64
    dd30:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    dd34:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    dd38:	f7 2d       	mov	r31, r7
    dd3a:	f6 1b       	sub	r31, r22
    dd3c:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    dd3e:	ad 81       	ldd	r26, Y+5	; 0x05
    dd40:	be 81       	ldd	r27, Y+6	; 0x06
    dd42:	93 96       	adiw	r26, 0x23	; 35
    dd44:	1c 92       	st	X, r1
    dd46:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    dd48:	5b 96       	adiw	r26, 0x1b	; 27
    dd4a:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    dd4c:	82 e0       	ldi	r24, 0x02	; 2
    dd4e:	8b 0d       	add	r24, r11
    dd50:	85 30       	cpi	r24, 0x05	; 5
    dd52:	d8 f4       	brcc	.+54     	; 0xdd8a <get_cpu_joypad_state+0x19c>
    dd54:	fe 3f       	cpi	r31, 0xFE	; 254
    dd56:	cc f0       	brlt	.+50     	; 0xdd8a <get_cpu_joypad_state+0x19c>
    dd58:	f3 30       	cpi	r31, 0x03	; 3
    dd5a:	bc f4       	brge	.+46     	; 0xdd8a <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    dd5c:	64 e0       	ldi	r22, 0x04	; 4
    dd5e:	70 e0       	ldi	r23, 0x00	; 0
    dd60:	80 e0       	ldi	r24, 0x00	; 0
    dd62:	90 e0       	ldi	r25, 0x00	; 0
    dd64:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
    dd68:	0e 94 b9 6c 	call	0xd972	; 0xd972 <button_map>
    dd6c:	ed 81       	ldd	r30, Y+5	; 0x05
    dd6e:	fe 81       	ldd	r31, Y+6	; 0x06
    dd70:	95 8f       	std	Z+29, r25	; 0x1d
    dd72:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    dd74:	62 e1       	ldi	r22, 0x12	; 18
    dd76:	70 e0       	ldi	r23, 0x00	; 0
    dd78:	85 e0       	ldi	r24, 0x05	; 5
    dd7a:	90 e0       	ldi	r25, 0x00	; 0
    dd7c:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
    dd80:	ad 81       	ldd	r26, Y+5	; 0x05
    dd82:	be 81       	ldd	r27, Y+6	; 0x06
    dd84:	92 96       	adiw	r26, 0x22	; 34
    dd86:	8c 93       	st	X, r24
    dd88:	12 c0       	rjmp	.+36     	; 0xddae <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    dd8a:	8b 2d       	mov	r24, r11
    dd8c:	0e 94 d3 6d 	call	0xdba6	; 0xdba6 <get_cpu_goal_direction>
    dd90:	ed 81       	ldd	r30, Y+5	; 0x05
    dd92:	fe 81       	ldd	r31, Y+6	; 0x06
    dd94:	95 8f       	std	Z+29, r25	; 0x1d
    dd96:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dd98:	80 31       	cpi	r24, 0x10	; 16
    dd9a:	91 05       	cpc	r25, r1
    dd9c:	21 f0       	breq	.+8      	; 0xdda6 <get_cpu_joypad_state+0x1b8>
    dd9e:	80 97       	sbiw	r24, 0x20	; 32
    dda0:	11 f0       	breq	.+4      	; 0xdda6 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    dda2:	32 a2       	std	Z+34, r3	; 0x22
    dda4:	04 c0       	rjmp	.+8      	; 0xddae <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dda6:	ad 81       	ldd	r26, Y+5	; 0x05
    dda8:	be 81       	ldd	r27, Y+6	; 0x06
    ddaa:	92 96       	adiw	r26, 0x22	; 34
    ddac:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    ddae:	ed 81       	ldd	r30, Y+5	; 0x05
    ddb0:	fe 81       	ldd	r31, Y+6	; 0x06
    ddb2:	84 8d       	ldd	r24, Z+28	; 0x1c
    ddb4:	95 8d       	ldd	r25, Z+29	; 0x1d
    ddb6:	d8 01       	movw	r26, r16
    ddb8:	15 96       	adiw	r26, 0x05	; 5
    ddba:	9c 93       	st	X, r25
    ddbc:	8e 93       	st	-X, r24
    ddbe:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    ddc0:	ed 81       	ldd	r30, Y+5	; 0x05
    ddc2:	fe 81       	ldd	r31, Y+6	; 0x06
    ddc4:	c3 80       	ldd	r12, Z+3	; 0x03
    ddc6:	d4 80       	ldd	r13, Z+4	; 0x04
    ddc8:	e5 80       	ldd	r14, Z+5	; 0x05
    ddca:	f6 80       	ldd	r15, Z+6	; 0x06
    ddcc:	24 a1       	ldd	r18, Z+36	; 0x24
    ddce:	35 a1       	ldd	r19, Z+37	; 0x25
    ddd0:	46 a1       	ldd	r20, Z+38	; 0x26
    ddd2:	57 a1       	ldd	r21, Z+39	; 0x27
    ddd4:	c7 01       	movw	r24, r14
    ddd6:	b6 01       	movw	r22, r12
    ddd8:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    dddc:	88 23       	and	r24, r24
    ddde:	39 f0       	breq	.+14     	; 0xddee <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    dde0:	ad 81       	ldd	r26, Y+5	; 0x05
    dde2:	be 81       	ldd	r27, Y+6	; 0x06
    dde4:	5f 96       	adiw	r26, 0x1f	; 31
    dde6:	1c 92       	st	X, r1
    dde8:	1e 92       	st	-X, r1
    ddea:	5e 97       	sbiw	r26, 0x1e	; 30
    ddec:	07 c0       	rjmp	.+14     	; 0xddfc <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    ddee:	ed 81       	ldd	r30, Y+5	; 0x05
    ddf0:	fe 81       	ldd	r31, Y+6	; 0x06
    ddf2:	86 8d       	ldd	r24, Z+30	; 0x1e
    ddf4:	97 8d       	ldd	r25, Z+31	; 0x1f
    ddf6:	01 96       	adiw	r24, 0x01	; 1
    ddf8:	97 8f       	std	Z+31, r25	; 0x1f
    ddfa:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    ddfc:	ad 81       	ldd	r26, Y+5	; 0x05
    ddfe:	be 81       	ldd	r27, Y+6	; 0x06
    de00:	17 96       	adiw	r26, 0x07	; 7
    de02:	8d 90       	ld	r8, X+
    de04:	9d 90       	ld	r9, X+
    de06:	ad 90       	ld	r10, X+
    de08:	bc 90       	ld	r11, X
    de0a:	1a 97       	sbiw	r26, 0x0a	; 10
    de0c:	98 96       	adiw	r26, 0x28	; 40
    de0e:	2d 91       	ld	r18, X+
    de10:	3d 91       	ld	r19, X+
    de12:	4d 91       	ld	r20, X+
    de14:	5c 91       	ld	r21, X
    de16:	9b 97       	sbiw	r26, 0x2b	; 43
    de18:	c5 01       	movw	r24, r10
    de1a:	b4 01       	movw	r22, r8
    de1c:	0e 94 cb 70 	call	0xe196	; 0xe196 <__cmpsf2>
    de20:	88 23       	and	r24, r24
    de22:	29 f0       	breq	.+10     	; 0xde2e <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    de24:	ed 81       	ldd	r30, Y+5	; 0x05
    de26:	fe 81       	ldd	r31, Y+6	; 0x06
    de28:	11 a2       	std	Z+33, r1	; 0x21
    de2a:	10 a2       	std	Z+32, r1	; 0x20
    de2c:	0b c0       	rjmp	.+22     	; 0xde44 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    de2e:	ad 81       	ldd	r26, Y+5	; 0x05
    de30:	be 81       	ldd	r27, Y+6	; 0x06
    de32:	90 96       	adiw	r26, 0x20	; 32
    de34:	8d 91       	ld	r24, X+
    de36:	9c 91       	ld	r25, X
    de38:	91 97       	sbiw	r26, 0x21	; 33
    de3a:	01 96       	adiw	r24, 0x01	; 1
    de3c:	91 96       	adiw	r26, 0x21	; 33
    de3e:	9c 93       	st	X, r25
    de40:	8e 93       	st	-X, r24
    de42:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    de44:	ed 81       	ldd	r30, Y+5	; 0x05
    de46:	fe 81       	ldd	r31, Y+6	; 0x06
    de48:	c4 a2       	std	Z+36, r12	; 0x24
    de4a:	d5 a2       	std	Z+37, r13	; 0x25
    de4c:	e6 a2       	std	Z+38, r14	; 0x26
    de4e:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    de50:	80 a6       	std	Z+40, r8	; 0x28
    de52:	91 a6       	std	Z+41, r9	; 0x29
    de54:	a2 a6       	std	Z+42, r10	; 0x2a
    de56:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    de58:	86 8d       	ldd	r24, Z+30	; 0x1e
    de5a:	97 8d       	ldd	r25, Z+31	; 0x1f
    de5c:	80 34       	cpi	r24, 0x40	; 64
    de5e:	91 40       	sbci	r25, 0x01	; 1
    de60:	90 f0       	brcs	.+36     	; 0xde86 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    de62:	64 e0       	ldi	r22, 0x04	; 4
    de64:	70 e0       	ldi	r23, 0x00	; 0
    de66:	82 e0       	ldi	r24, 0x02	; 2
    de68:	90 e0       	ldi	r25, 0x00	; 0
    de6a:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
    de6e:	0e 94 b9 6c 	call	0xd972	; 0xd972 <button_map>
    de72:	f8 01       	movw	r30, r16
    de74:	95 83       	std	Z+5, r25	; 0x05
    de76:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    de78:	ad 81       	ldd	r26, Y+5	; 0x05
    de7a:	be 81       	ldd	r27, Y+6	; 0x06
    de7c:	5f 96       	adiw	r26, 0x1f	; 31
    de7e:	1c 92       	st	X, r1
    de80:	1e 92       	st	-X, r1
    de82:	5e 97       	sbiw	r26, 0x1e	; 30
    de84:	40 c0       	rjmp	.+128    	; 0xdf06 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    de86:	ed 81       	ldd	r30, Y+5	; 0x05
    de88:	fe 81       	ldd	r31, Y+6	; 0x06
    de8a:	80 a1       	ldd	r24, Z+32	; 0x20
    de8c:	91 a1       	ldd	r25, Z+33	; 0x21
    de8e:	80 34       	cpi	r24, 0x40	; 64
    de90:	91 40       	sbci	r25, 0x01	; 1
    de92:	90 f0       	brcs	.+36     	; 0xdeb8 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    de94:	62 e0       	ldi	r22, 0x02	; 2
    de96:	70 e0       	ldi	r23, 0x00	; 0
    de98:	80 e0       	ldi	r24, 0x00	; 0
    de9a:	90 e0       	ldi	r25, 0x00	; 0
    de9c:	0e 94 99 58 	call	0xb132	; 0xb132 <LBRandom>
    dea0:	0e 94 b9 6c 	call	0xd972	; 0xd972 <button_map>
    dea4:	d8 01       	movw	r26, r16
    dea6:	15 96       	adiw	r26, 0x05	; 5
    dea8:	9c 93       	st	X, r25
    deaa:	8e 93       	st	-X, r24
    deac:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    deae:	ed 81       	ldd	r30, Y+5	; 0x05
    deb0:	fe 81       	ldd	r31, Y+6	; 0x06
    deb2:	11 a2       	std	Z+33, r1	; 0x21
    deb4:	10 a2       	std	Z+32, r1	; 0x20
    deb6:	27 c0       	rjmp	.+78     	; 0xdf06 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    deb8:	20 e0       	ldi	r18, 0x00	; 0
    deba:	30 e0       	ldi	r19, 0x00	; 0
    debc:	40 e0       	ldi	r20, 0x00	; 0
    debe:	5e e3       	ldi	r21, 0x3E	; 62
    dec0:	c5 01       	movw	r24, r10
    dec2:	b4 01       	movw	r22, r8
    dec4:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    dec8:	20 e0       	ldi	r18, 0x00	; 0
    deca:	30 e0       	ldi	r19, 0x00	; 0
    decc:	40 e4       	ldi	r20, 0x40	; 64
    dece:	50 e4       	ldi	r21, 0x40	; 64
    ded0:	0e 94 66 70 	call	0xe0cc	; 0xe0cc <__subsf3>
    ded4:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
    ded8:	b6 2e       	mov	r11, r22
    deda:	20 e0       	ldi	r18, 0x00	; 0
    dedc:	30 e0       	ldi	r19, 0x00	; 0
    dede:	40 e0       	ldi	r20, 0x00	; 0
    dee0:	5e e3       	ldi	r21, 0x3E	; 62
    dee2:	c7 01       	movw	r24, r14
    dee4:	b6 01       	movw	r22, r12
    dee6:	0e 94 1e 72 	call	0xe43c	; 0xe43c <__mulsf3>
    deea:	0e 94 37 71 	call	0xe26e	; 0xe26e <__fixsfsi>
    deee:	86 2f       	mov	r24, r22
    def0:	2d 81       	ldd	r18, Y+5	; 0x05
    def2:	3e 81       	ldd	r19, Y+6	; 0x06
    def4:	d9 01       	movw	r26, r18
    def6:	12 96       	adiw	r26, 0x02	; 2
    def8:	4c 91       	ld	r20, X
    defa:	6b 2d       	mov	r22, r11
    defc:	0e 94 cf 6c 	call	0xd99e	; 0xd99e <crash_and_turn>
    df00:	ed 81       	ldd	r30, Y+5	; 0x05
    df02:	fe 81       	ldd	r31, Y+6	; 0x06
    df04:	83 a3       	std	Z+35, r24	; 0x23
}
    df06:	26 96       	adiw	r28, 0x06	; 6
    df08:	0f b6       	in	r0, 0x3f	; 63
    df0a:	f8 94       	cli
    df0c:	de bf       	out	0x3e, r29	; 62
    df0e:	0f be       	out	0x3f, r0	; 63
    df10:	cd bf       	out	0x3d, r28	; 61
    df12:	df 91       	pop	r29
    df14:	cf 91       	pop	r28
    df16:	1f 91       	pop	r17
    df18:	0f 91       	pop	r16
    df1a:	ff 90       	pop	r15
    df1c:	ef 90       	pop	r14
    df1e:	df 90       	pop	r13
    df20:	cf 90       	pop	r12
    df22:	bf 90       	pop	r11
    df24:	af 90       	pop	r10
    df26:	9f 90       	pop	r9
    df28:	8f 90       	pop	r8
    df2a:	7f 90       	pop	r7
    df2c:	6f 90       	pop	r6
    df2e:	5f 90       	pop	r5
    df30:	4f 90       	pop	r4
    df32:	3f 90       	pop	r3
    df34:	2f 90       	pop	r2
    df36:	08 95       	ret

0000df38 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    df38:	8f e3       	ldi	r24, 0x3F	; 63
    df3a:	93 e0       	ldi	r25, 0x03	; 3
    df3c:	0e 94 d9 4a 	call	0x95b2	; 0x95b2 <InitMusicPlayer>
	SetMasterVolume(0xff);
    df40:	8f ef       	ldi	r24, 0xFF	; 255
    df42:	0e 94 2c 4e 	call	0x9c58	; 0x9c58 <SetMasterVolume>
	SetTileTable(tiles_data);
    df46:	8a eb       	ldi	r24, 0xBA	; 186
    df48:	94 e4       	ldi	r25, 0x44	; 68
    df4a:	0e 94 98 48 	call	0x9130	; 0x9130 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    df4e:	8e ec       	ldi	r24, 0xCE	; 206
    df50:	96 e3       	ldi	r25, 0x36	; 54
    df52:	0e 94 74 48 	call	0x90e8	; 0x90e8 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    df56:	84 ea       	ldi	r24, 0xA4	; 164
    df58:	0e 94 95 48 	call	0x912a	; 0x912a <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    df5c:	60 e0       	ldi	r22, 0x00	; 0
    df5e:	83 e0       	ldi	r24, 0x03	; 3
    df60:	0e 94 ad 56 	call	0xad5a	; 0xad5a <FadeIn>
	ClearVram();
    df64:	0e 94 79 48 	call	0x90f2	; 0x90f2 <ClearVram>
	init_scores(&scores);
    df68:	81 ec       	ldi	r24, 0xC1	; 193
    df6a:	9b e0       	ldi	r25, 0x0B	; 11
    df6c:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <init_scores>
	init_handles(&handles);
    df70:	88 ee       	ldi	r24, 0xE8	; 232
    df72:	9b e0       	ldi	r25, 0x0B	; 11
    df74:	0e 94 e9 58 	call	0xb1d2	; 0xb1d2 <init_handles>
	init_game_state();
    df78:	0e 94 d4 59 	call	0xb3a8	; 0xb3a8 <init_game_state>
	init_tile_animations(&tile_animations);
    df7c:	8c e0       	ldi	r24, 0x0C	; 12
    df7e:	9c e0       	ldi	r25, 0x0C	; 12
    df80:	0e 94 f5 58 	call	0xb1ea	; 0xb1ea <init_tile_animations>
	load_splash();
    df84:	0e 94 bd 65 	call	0xcb7a	; 0xcb7a <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    df88:	81 e0       	ldi	r24, 0x01	; 1
    df8a:	90 e0       	ldi	r25, 0x00	; 0
    df8c:	0e 94 88 56 	call	0xad10	; 0xad10 <WaitVsync>
		switch (game.current_screen)
    df90:	80 91 08 0c 	lds	r24, 0x0C08
    df94:	81 30       	cpi	r24, 0x01	; 1
    df96:	91 f0       	breq	.+36     	; 0xdfbc <main+0x84>
    df98:	28 f0       	brcs	.+10     	; 0xdfa4 <main+0x6c>
    df9a:	82 30       	cpi	r24, 0x02	; 2
    df9c:	d9 f0       	breq	.+54     	; 0xdfd4 <main+0x9c>
    df9e:	83 30       	cpi	r24, 0x03	; 3
    dfa0:	51 f1       	breq	.+84     	; 0xdff6 <main+0xbe>
    dfa2:	56 c0       	rjmp	.+172    	; 0xe050 <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    dfa4:	60 e0       	ldi	r22, 0x00	; 0
    dfa6:	83 e9       	ldi	r24, 0x93	; 147
    dfa8:	9c e0       	ldi	r25, 0x0C	; 12
    dfaa:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    dfae:	61 ee       	ldi	r22, 0xE1	; 225
    dfb0:	7b e0       	ldi	r23, 0x0B	; 11
    dfb2:	83 e9       	ldi	r24, 0x93	; 147
    dfb4:	9c e0       	ldi	r25, 0x0C	; 12
    dfb6:	0e 94 b4 6b 	call	0xd768	; 0xd768 <update_splash>
				break;
    dfba:	4a c0       	rjmp	.+148    	; 0xe050 <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    dfbc:	60 e0       	ldi	r22, 0x00	; 0
    dfbe:	83 e9       	ldi	r24, 0x93	; 147
    dfc0:	9c e0       	ldi	r25, 0x0C	; 12
    dfc2:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    dfc6:	61 ee       	ldi	r22, 0xE1	; 225
    dfc8:	7b e0       	ldi	r23, 0x0B	; 11
    dfca:	83 e9       	ldi	r24, 0x93	; 147
    dfcc:	9c e0       	ldi	r25, 0x0C	; 12
    dfce:	0e 94 77 69 	call	0xd2ee	; 0xd2ee <update_tank_rank>
				break;
    dfd2:	3e c0       	rjmp	.+124    	; 0xe050 <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    dfd4:	60 e0       	ldi	r22, 0x00	; 0
    dfd6:	83 e9       	ldi	r24, 0x93	; 147
    dfd8:	9c e0       	ldi	r25, 0x0C	; 12
    dfda:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    dfde:	61 e0       	ldi	r22, 0x01	; 1
    dfe0:	81 ee       	ldi	r24, 0xE1	; 225
    dfe2:	9b e0       	ldi	r25, 0x0B	; 11
    dfe4:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    dfe8:	61 ee       	ldi	r22, 0xE1	; 225
    dfea:	7b e0       	ldi	r23, 0x0B	; 11
    dfec:	83 e9       	ldi	r24, 0x93	; 147
    dfee:	9c e0       	ldi	r25, 0x0C	; 12
    dff0:	0e 94 6b 6c 	call	0xd8d6	; 0xd8d6 <update_handle_select>
				break;
    dff4:	2d c0       	rjmp	.+90     	; 0xe050 <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    dff6:	80 91 0b 0c 	lds	r24, 0x0C0B
    dffa:	81 11       	cpse	r24, r1
    dffc:	06 c0       	rjmp	.+12     	; 0xe00a <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    dffe:	60 e0       	ldi	r22, 0x00	; 0
    e000:	83 e9       	ldi	r24, 0x93	; 147
    e002:	9c e0       	ldi	r25, 0x0C	; 12
    e004:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
    e008:	0a c0       	rjmp	.+20     	; 0xe01e <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e00a:	83 30       	cpi	r24, 0x03	; 3
    e00c:	89 f4       	brne	.+34     	; 0xe030 <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e00e:	43 e9       	ldi	r20, 0x93	; 147
    e010:	5c e0       	ldi	r21, 0x0C	; 12
    e012:	69 e8       	ldi	r22, 0x89	; 137
    e014:	7f e0       	ldi	r23, 0x0F	; 15
    e016:	85 e2       	ldi	r24, 0x25	; 37
    e018:	9c e0       	ldi	r25, 0x0C	; 12
    e01a:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e01e:	41 ee       	ldi	r20, 0xE1	; 225
    e020:	5b e0       	ldi	r21, 0x0B	; 11
    e022:	65 e2       	ldi	r22, 0x25	; 37
    e024:	7c e0       	ldi	r23, 0x0C	; 12
    e026:	89 e8       	ldi	r24, 0x89	; 137
    e028:	9f e0       	ldi	r25, 0x0F	; 15
    e02a:	0e 94 f7 6d 	call	0xdbee	; 0xdbee <get_cpu_joypad_state>
    e02e:	0a c0       	rjmp	.+20     	; 0xe044 <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e030:	60 e0       	ldi	r22, 0x00	; 0
    e032:	83 e9       	ldi	r24, 0x93	; 147
    e034:	9c e0       	ldi	r25, 0x0C	; 12
    e036:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e03a:	61 e0       	ldi	r22, 0x01	; 1
    e03c:	81 ee       	ldi	r24, 0xE1	; 225
    e03e:	9b e0       	ldi	r25, 0x0B	; 11
    e040:	0e 94 11 57 	call	0xae22	; 0xae22 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e044:	61 ee       	ldi	r22, 0xE1	; 225
    e046:	7b e0       	ldi	r23, 0x0B	; 11
    e048:	83 e9       	ldi	r24, 0x93	; 147
    e04a:	9c e0       	ldi	r25, 0x0C	; 12
    e04c:	0e 94 b1 68 	call	0xd162	; 0xd162 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e050:	80 91 04 01 	lds	r24, 0x0104
    e054:	90 91 05 01 	lds	r25, 0x0105
    e058:	01 96       	adiw	r24, 0x01	; 1
    e05a:	90 93 05 01 	sts	0x0105, r25
    e05e:	80 93 04 01 	sts	0x0104, r24
	}
    e062:	92 cf       	rjmp	.-220    	; 0xdf88 <main+0x50>

0000e064 <__udivmodqi4>:
    e064:	99 1b       	sub	r25, r25
    e066:	79 e0       	ldi	r23, 0x09	; 9
    e068:	04 c0       	rjmp	.+8      	; 0xe072 <__udivmodqi4_ep>

0000e06a <__udivmodqi4_loop>:
    e06a:	99 1f       	adc	r25, r25
    e06c:	96 17       	cp	r25, r22
    e06e:	08 f0       	brcs	.+2      	; 0xe072 <__udivmodqi4_ep>
    e070:	96 1b       	sub	r25, r22

0000e072 <__udivmodqi4_ep>:
    e072:	88 1f       	adc	r24, r24
    e074:	7a 95       	dec	r23
    e076:	c9 f7       	brne	.-14     	; 0xe06a <__udivmodqi4_loop>
    e078:	80 95       	com	r24
    e07a:	08 95       	ret

0000e07c <__udivmodhi4>:
    e07c:	aa 1b       	sub	r26, r26
    e07e:	bb 1b       	sub	r27, r27
    e080:	51 e1       	ldi	r21, 0x11	; 17
    e082:	07 c0       	rjmp	.+14     	; 0xe092 <__udivmodhi4_ep>

0000e084 <__udivmodhi4_loop>:
    e084:	aa 1f       	adc	r26, r26
    e086:	bb 1f       	adc	r27, r27
    e088:	a6 17       	cp	r26, r22
    e08a:	b7 07       	cpc	r27, r23
    e08c:	10 f0       	brcs	.+4      	; 0xe092 <__udivmodhi4_ep>
    e08e:	a6 1b       	sub	r26, r22
    e090:	b7 0b       	sbc	r27, r23

0000e092 <__udivmodhi4_ep>:
    e092:	88 1f       	adc	r24, r24
    e094:	99 1f       	adc	r25, r25
    e096:	5a 95       	dec	r21
    e098:	a9 f7       	brne	.-22     	; 0xe084 <__udivmodhi4_loop>
    e09a:	80 95       	com	r24
    e09c:	90 95       	com	r25
    e09e:	bc 01       	movw	r22, r24
    e0a0:	cd 01       	movw	r24, r26
    e0a2:	08 95       	ret

0000e0a4 <__divmodhi4>:
    e0a4:	97 fb       	bst	r25, 7
    e0a6:	07 2e       	mov	r0, r23
    e0a8:	16 f4       	brtc	.+4      	; 0xe0ae <__divmodhi4+0xa>
    e0aa:	00 94       	com	r0
    e0ac:	07 d0       	rcall	.+14     	; 0xe0bc <__divmodhi4_neg1>
    e0ae:	77 fd       	sbrc	r23, 7
    e0b0:	09 d0       	rcall	.+18     	; 0xe0c4 <__divmodhi4_neg2>
    e0b2:	0e 94 3e 70 	call	0xe07c	; 0xe07c <__udivmodhi4>
    e0b6:	07 fc       	sbrc	r0, 7
    e0b8:	05 d0       	rcall	.+10     	; 0xe0c4 <__divmodhi4_neg2>
    e0ba:	3e f4       	brtc	.+14     	; 0xe0ca <__divmodhi4_exit>

0000e0bc <__divmodhi4_neg1>:
    e0bc:	90 95       	com	r25
    e0be:	81 95       	neg	r24
    e0c0:	9f 4f       	sbci	r25, 0xFF	; 255
    e0c2:	08 95       	ret

0000e0c4 <__divmodhi4_neg2>:
    e0c4:	70 95       	com	r23
    e0c6:	61 95       	neg	r22
    e0c8:	7f 4f       	sbci	r23, 0xFF	; 255

0000e0ca <__divmodhi4_exit>:
    e0ca:	08 95       	ret

0000e0cc <__subsf3>:
    e0cc:	50 58       	subi	r21, 0x80	; 128

0000e0ce <__addsf3>:
    e0ce:	bb 27       	eor	r27, r27
    e0d0:	aa 27       	eor	r26, r26
    e0d2:	0e d0       	rcall	.+28     	; 0xe0f0 <__addsf3x>
    e0d4:	75 c1       	rjmp	.+746    	; 0xe3c0 <__fp_round>
    e0d6:	66 d1       	rcall	.+716    	; 0xe3a4 <__fp_pscA>
    e0d8:	30 f0       	brcs	.+12     	; 0xe0e6 <__addsf3+0x18>
    e0da:	6b d1       	rcall	.+726    	; 0xe3b2 <__fp_pscB>
    e0dc:	20 f0       	brcs	.+8      	; 0xe0e6 <__addsf3+0x18>
    e0de:	31 f4       	brne	.+12     	; 0xe0ec <__addsf3+0x1e>
    e0e0:	9f 3f       	cpi	r25, 0xFF	; 255
    e0e2:	11 f4       	brne	.+4      	; 0xe0e8 <__addsf3+0x1a>
    e0e4:	1e f4       	brtc	.+6      	; 0xe0ec <__addsf3+0x1e>
    e0e6:	5b c1       	rjmp	.+694    	; 0xe39e <__fp_nan>
    e0e8:	0e f4       	brtc	.+2      	; 0xe0ec <__addsf3+0x1e>
    e0ea:	e0 95       	com	r30
    e0ec:	e7 fb       	bst	r30, 7
    e0ee:	51 c1       	rjmp	.+674    	; 0xe392 <__fp_inf>

0000e0f0 <__addsf3x>:
    e0f0:	e9 2f       	mov	r30, r25
    e0f2:	77 d1       	rcall	.+750    	; 0xe3e2 <__fp_split3>
    e0f4:	80 f3       	brcs	.-32     	; 0xe0d6 <__addsf3+0x8>
    e0f6:	ba 17       	cp	r27, r26
    e0f8:	62 07       	cpc	r22, r18
    e0fa:	73 07       	cpc	r23, r19
    e0fc:	84 07       	cpc	r24, r20
    e0fe:	95 07       	cpc	r25, r21
    e100:	18 f0       	brcs	.+6      	; 0xe108 <__addsf3x+0x18>
    e102:	71 f4       	brne	.+28     	; 0xe120 <__addsf3x+0x30>
    e104:	9e f5       	brtc	.+102    	; 0xe16c <__addsf3x+0x7c>
    e106:	8f c1       	rjmp	.+798    	; 0xe426 <__fp_zero>
    e108:	0e f4       	brtc	.+2      	; 0xe10c <__addsf3x+0x1c>
    e10a:	e0 95       	com	r30
    e10c:	0b 2e       	mov	r0, r27
    e10e:	ba 2f       	mov	r27, r26
    e110:	a0 2d       	mov	r26, r0
    e112:	0b 01       	movw	r0, r22
    e114:	b9 01       	movw	r22, r18
    e116:	90 01       	movw	r18, r0
    e118:	0c 01       	movw	r0, r24
    e11a:	ca 01       	movw	r24, r20
    e11c:	a0 01       	movw	r20, r0
    e11e:	11 24       	eor	r1, r1
    e120:	ff 27       	eor	r31, r31
    e122:	59 1b       	sub	r21, r25
    e124:	99 f0       	breq	.+38     	; 0xe14c <__addsf3x+0x5c>
    e126:	59 3f       	cpi	r21, 0xF9	; 249
    e128:	50 f4       	brcc	.+20     	; 0xe13e <__addsf3x+0x4e>
    e12a:	50 3e       	cpi	r21, 0xE0	; 224
    e12c:	68 f1       	brcs	.+90     	; 0xe188 <__addsf3x+0x98>
    e12e:	1a 16       	cp	r1, r26
    e130:	f0 40       	sbci	r31, 0x00	; 0
    e132:	a2 2f       	mov	r26, r18
    e134:	23 2f       	mov	r18, r19
    e136:	34 2f       	mov	r19, r20
    e138:	44 27       	eor	r20, r20
    e13a:	58 5f       	subi	r21, 0xF8	; 248
    e13c:	f3 cf       	rjmp	.-26     	; 0xe124 <__addsf3x+0x34>
    e13e:	46 95       	lsr	r20
    e140:	37 95       	ror	r19
    e142:	27 95       	ror	r18
    e144:	a7 95       	ror	r26
    e146:	f0 40       	sbci	r31, 0x00	; 0
    e148:	53 95       	inc	r21
    e14a:	c9 f7       	brne	.-14     	; 0xe13e <__addsf3x+0x4e>
    e14c:	7e f4       	brtc	.+30     	; 0xe16c <__addsf3x+0x7c>
    e14e:	1f 16       	cp	r1, r31
    e150:	ba 0b       	sbc	r27, r26
    e152:	62 0b       	sbc	r22, r18
    e154:	73 0b       	sbc	r23, r19
    e156:	84 0b       	sbc	r24, r20
    e158:	ba f0       	brmi	.+46     	; 0xe188 <__addsf3x+0x98>
    e15a:	91 50       	subi	r25, 0x01	; 1
    e15c:	a1 f0       	breq	.+40     	; 0xe186 <__addsf3x+0x96>
    e15e:	ff 0f       	add	r31, r31
    e160:	bb 1f       	adc	r27, r27
    e162:	66 1f       	adc	r22, r22
    e164:	77 1f       	adc	r23, r23
    e166:	88 1f       	adc	r24, r24
    e168:	c2 f7       	brpl	.-16     	; 0xe15a <__addsf3x+0x6a>
    e16a:	0e c0       	rjmp	.+28     	; 0xe188 <__addsf3x+0x98>
    e16c:	ba 0f       	add	r27, r26
    e16e:	62 1f       	adc	r22, r18
    e170:	73 1f       	adc	r23, r19
    e172:	84 1f       	adc	r24, r20
    e174:	48 f4       	brcc	.+18     	; 0xe188 <__addsf3x+0x98>
    e176:	87 95       	ror	r24
    e178:	77 95       	ror	r23
    e17a:	67 95       	ror	r22
    e17c:	b7 95       	ror	r27
    e17e:	f7 95       	ror	r31
    e180:	9e 3f       	cpi	r25, 0xFE	; 254
    e182:	08 f0       	brcs	.+2      	; 0xe186 <__addsf3x+0x96>
    e184:	b3 cf       	rjmp	.-154    	; 0xe0ec <__addsf3+0x1e>
    e186:	93 95       	inc	r25
    e188:	88 0f       	add	r24, r24
    e18a:	08 f0       	brcs	.+2      	; 0xe18e <__addsf3x+0x9e>
    e18c:	99 27       	eor	r25, r25
    e18e:	ee 0f       	add	r30, r30
    e190:	97 95       	ror	r25
    e192:	87 95       	ror	r24
    e194:	08 95       	ret

0000e196 <__cmpsf2>:
    e196:	d9 d0       	rcall	.+434    	; 0xe34a <__fp_cmp>
    e198:	08 f4       	brcc	.+2      	; 0xe19c <__cmpsf2+0x6>
    e19a:	81 e0       	ldi	r24, 0x01	; 1
    e19c:	08 95       	ret

0000e19e <__divsf3>:
    e19e:	0c d0       	rcall	.+24     	; 0xe1b8 <__divsf3x>
    e1a0:	0f c1       	rjmp	.+542    	; 0xe3c0 <__fp_round>
    e1a2:	07 d1       	rcall	.+526    	; 0xe3b2 <__fp_pscB>
    e1a4:	40 f0       	brcs	.+16     	; 0xe1b6 <__divsf3+0x18>
    e1a6:	fe d0       	rcall	.+508    	; 0xe3a4 <__fp_pscA>
    e1a8:	30 f0       	brcs	.+12     	; 0xe1b6 <__divsf3+0x18>
    e1aa:	21 f4       	brne	.+8      	; 0xe1b4 <__divsf3+0x16>
    e1ac:	5f 3f       	cpi	r21, 0xFF	; 255
    e1ae:	19 f0       	breq	.+6      	; 0xe1b6 <__divsf3+0x18>
    e1b0:	f0 c0       	rjmp	.+480    	; 0xe392 <__fp_inf>
    e1b2:	51 11       	cpse	r21, r1
    e1b4:	39 c1       	rjmp	.+626    	; 0xe428 <__fp_szero>
    e1b6:	f3 c0       	rjmp	.+486    	; 0xe39e <__fp_nan>

0000e1b8 <__divsf3x>:
    e1b8:	14 d1       	rcall	.+552    	; 0xe3e2 <__fp_split3>
    e1ba:	98 f3       	brcs	.-26     	; 0xe1a2 <__divsf3+0x4>

0000e1bc <__divsf3_pse>:
    e1bc:	99 23       	and	r25, r25
    e1be:	c9 f3       	breq	.-14     	; 0xe1b2 <__divsf3+0x14>
    e1c0:	55 23       	and	r21, r21
    e1c2:	b1 f3       	breq	.-20     	; 0xe1b0 <__divsf3+0x12>
    e1c4:	95 1b       	sub	r25, r21
    e1c6:	55 0b       	sbc	r21, r21
    e1c8:	bb 27       	eor	r27, r27
    e1ca:	aa 27       	eor	r26, r26
    e1cc:	62 17       	cp	r22, r18
    e1ce:	73 07       	cpc	r23, r19
    e1d0:	84 07       	cpc	r24, r20
    e1d2:	38 f0       	brcs	.+14     	; 0xe1e2 <__divsf3_pse+0x26>
    e1d4:	9f 5f       	subi	r25, 0xFF	; 255
    e1d6:	5f 4f       	sbci	r21, 0xFF	; 255
    e1d8:	22 0f       	add	r18, r18
    e1da:	33 1f       	adc	r19, r19
    e1dc:	44 1f       	adc	r20, r20
    e1de:	aa 1f       	adc	r26, r26
    e1e0:	a9 f3       	breq	.-22     	; 0xe1cc <__divsf3_pse+0x10>
    e1e2:	33 d0       	rcall	.+102    	; 0xe24a <__divsf3_pse+0x8e>
    e1e4:	0e 2e       	mov	r0, r30
    e1e6:	3a f0       	brmi	.+14     	; 0xe1f6 <__divsf3_pse+0x3a>
    e1e8:	e0 e8       	ldi	r30, 0x80	; 128
    e1ea:	30 d0       	rcall	.+96     	; 0xe24c <__divsf3_pse+0x90>
    e1ec:	91 50       	subi	r25, 0x01	; 1
    e1ee:	50 40       	sbci	r21, 0x00	; 0
    e1f0:	e6 95       	lsr	r30
    e1f2:	00 1c       	adc	r0, r0
    e1f4:	ca f7       	brpl	.-14     	; 0xe1e8 <__divsf3_pse+0x2c>
    e1f6:	29 d0       	rcall	.+82     	; 0xe24a <__divsf3_pse+0x8e>
    e1f8:	fe 2f       	mov	r31, r30
    e1fa:	27 d0       	rcall	.+78     	; 0xe24a <__divsf3_pse+0x8e>
    e1fc:	66 0f       	add	r22, r22
    e1fe:	77 1f       	adc	r23, r23
    e200:	88 1f       	adc	r24, r24
    e202:	bb 1f       	adc	r27, r27
    e204:	26 17       	cp	r18, r22
    e206:	37 07       	cpc	r19, r23
    e208:	48 07       	cpc	r20, r24
    e20a:	ab 07       	cpc	r26, r27
    e20c:	b0 e8       	ldi	r27, 0x80	; 128
    e20e:	09 f0       	breq	.+2      	; 0xe212 <__divsf3_pse+0x56>
    e210:	bb 0b       	sbc	r27, r27
    e212:	80 2d       	mov	r24, r0
    e214:	bf 01       	movw	r22, r30
    e216:	ff 27       	eor	r31, r31
    e218:	93 58       	subi	r25, 0x83	; 131
    e21a:	5f 4f       	sbci	r21, 0xFF	; 255
    e21c:	2a f0       	brmi	.+10     	; 0xe228 <__divsf3_pse+0x6c>
    e21e:	9e 3f       	cpi	r25, 0xFE	; 254
    e220:	51 05       	cpc	r21, r1
    e222:	68 f0       	brcs	.+26     	; 0xe23e <__divsf3_pse+0x82>
    e224:	b6 c0       	rjmp	.+364    	; 0xe392 <__fp_inf>
    e226:	00 c1       	rjmp	.+512    	; 0xe428 <__fp_szero>
    e228:	5f 3f       	cpi	r21, 0xFF	; 255
    e22a:	ec f3       	brlt	.-6      	; 0xe226 <__divsf3_pse+0x6a>
    e22c:	98 3e       	cpi	r25, 0xE8	; 232
    e22e:	dc f3       	brlt	.-10     	; 0xe226 <__divsf3_pse+0x6a>
    e230:	86 95       	lsr	r24
    e232:	77 95       	ror	r23
    e234:	67 95       	ror	r22
    e236:	b7 95       	ror	r27
    e238:	f7 95       	ror	r31
    e23a:	9f 5f       	subi	r25, 0xFF	; 255
    e23c:	c9 f7       	brne	.-14     	; 0xe230 <__divsf3_pse+0x74>
    e23e:	88 0f       	add	r24, r24
    e240:	91 1d       	adc	r25, r1
    e242:	96 95       	lsr	r25
    e244:	87 95       	ror	r24
    e246:	97 f9       	bld	r25, 7
    e248:	08 95       	ret
    e24a:	e1 e0       	ldi	r30, 0x01	; 1
    e24c:	66 0f       	add	r22, r22
    e24e:	77 1f       	adc	r23, r23
    e250:	88 1f       	adc	r24, r24
    e252:	bb 1f       	adc	r27, r27
    e254:	62 17       	cp	r22, r18
    e256:	73 07       	cpc	r23, r19
    e258:	84 07       	cpc	r24, r20
    e25a:	ba 07       	cpc	r27, r26
    e25c:	20 f0       	brcs	.+8      	; 0xe266 <__divsf3_pse+0xaa>
    e25e:	62 1b       	sub	r22, r18
    e260:	73 0b       	sbc	r23, r19
    e262:	84 0b       	sbc	r24, r20
    e264:	ba 0b       	sbc	r27, r26
    e266:	ee 1f       	adc	r30, r30
    e268:	88 f7       	brcc	.-30     	; 0xe24c <__divsf3_pse+0x90>
    e26a:	e0 95       	com	r30
    e26c:	08 95       	ret

0000e26e <__fixsfsi>:
    e26e:	04 d0       	rcall	.+8      	; 0xe278 <__fixunssfsi>
    e270:	68 94       	set
    e272:	b1 11       	cpse	r27, r1
    e274:	d9 c0       	rjmp	.+434    	; 0xe428 <__fp_szero>
    e276:	08 95       	ret

0000e278 <__fixunssfsi>:
    e278:	bc d0       	rcall	.+376    	; 0xe3f2 <__fp_splitA>
    e27a:	88 f0       	brcs	.+34     	; 0xe29e <__fixunssfsi+0x26>
    e27c:	9f 57       	subi	r25, 0x7F	; 127
    e27e:	90 f0       	brcs	.+36     	; 0xe2a4 <__fixunssfsi+0x2c>
    e280:	b9 2f       	mov	r27, r25
    e282:	99 27       	eor	r25, r25
    e284:	b7 51       	subi	r27, 0x17	; 23
    e286:	a0 f0       	brcs	.+40     	; 0xe2b0 <__fixunssfsi+0x38>
    e288:	d1 f0       	breq	.+52     	; 0xe2be <__fixunssfsi+0x46>
    e28a:	66 0f       	add	r22, r22
    e28c:	77 1f       	adc	r23, r23
    e28e:	88 1f       	adc	r24, r24
    e290:	99 1f       	adc	r25, r25
    e292:	1a f0       	brmi	.+6      	; 0xe29a <__fixunssfsi+0x22>
    e294:	ba 95       	dec	r27
    e296:	c9 f7       	brne	.-14     	; 0xe28a <__fixunssfsi+0x12>
    e298:	12 c0       	rjmp	.+36     	; 0xe2be <__fixunssfsi+0x46>
    e29a:	b1 30       	cpi	r27, 0x01	; 1
    e29c:	81 f0       	breq	.+32     	; 0xe2be <__fixunssfsi+0x46>
    e29e:	c3 d0       	rcall	.+390    	; 0xe426 <__fp_zero>
    e2a0:	b1 e0       	ldi	r27, 0x01	; 1
    e2a2:	08 95       	ret
    e2a4:	c0 c0       	rjmp	.+384    	; 0xe426 <__fp_zero>
    e2a6:	67 2f       	mov	r22, r23
    e2a8:	78 2f       	mov	r23, r24
    e2aa:	88 27       	eor	r24, r24
    e2ac:	b8 5f       	subi	r27, 0xF8	; 248
    e2ae:	39 f0       	breq	.+14     	; 0xe2be <__fixunssfsi+0x46>
    e2b0:	b9 3f       	cpi	r27, 0xF9	; 249
    e2b2:	cc f3       	brlt	.-14     	; 0xe2a6 <__fixunssfsi+0x2e>
    e2b4:	86 95       	lsr	r24
    e2b6:	77 95       	ror	r23
    e2b8:	67 95       	ror	r22
    e2ba:	b3 95       	inc	r27
    e2bc:	d9 f7       	brne	.-10     	; 0xe2b4 <__fixunssfsi+0x3c>
    e2be:	3e f4       	brtc	.+14     	; 0xe2ce <__fixunssfsi+0x56>
    e2c0:	90 95       	com	r25
    e2c2:	80 95       	com	r24
    e2c4:	70 95       	com	r23
    e2c6:	61 95       	neg	r22
    e2c8:	7f 4f       	sbci	r23, 0xFF	; 255
    e2ca:	8f 4f       	sbci	r24, 0xFF	; 255
    e2cc:	9f 4f       	sbci	r25, 0xFF	; 255
    e2ce:	08 95       	ret

0000e2d0 <__floatunsisf>:
    e2d0:	e8 94       	clt
    e2d2:	09 c0       	rjmp	.+18     	; 0xe2e6 <__floatsisf+0x12>

0000e2d4 <__floatsisf>:
    e2d4:	97 fb       	bst	r25, 7
    e2d6:	3e f4       	brtc	.+14     	; 0xe2e6 <__floatsisf+0x12>
    e2d8:	90 95       	com	r25
    e2da:	80 95       	com	r24
    e2dc:	70 95       	com	r23
    e2de:	61 95       	neg	r22
    e2e0:	7f 4f       	sbci	r23, 0xFF	; 255
    e2e2:	8f 4f       	sbci	r24, 0xFF	; 255
    e2e4:	9f 4f       	sbci	r25, 0xFF	; 255
    e2e6:	99 23       	and	r25, r25
    e2e8:	a9 f0       	breq	.+42     	; 0xe314 <__floatsisf+0x40>
    e2ea:	f9 2f       	mov	r31, r25
    e2ec:	96 e9       	ldi	r25, 0x96	; 150
    e2ee:	bb 27       	eor	r27, r27
    e2f0:	93 95       	inc	r25
    e2f2:	f6 95       	lsr	r31
    e2f4:	87 95       	ror	r24
    e2f6:	77 95       	ror	r23
    e2f8:	67 95       	ror	r22
    e2fa:	b7 95       	ror	r27
    e2fc:	f1 11       	cpse	r31, r1
    e2fe:	f8 cf       	rjmp	.-16     	; 0xe2f0 <__floatsisf+0x1c>
    e300:	fa f4       	brpl	.+62     	; 0xe340 <__floatsisf+0x6c>
    e302:	bb 0f       	add	r27, r27
    e304:	11 f4       	brne	.+4      	; 0xe30a <__floatsisf+0x36>
    e306:	60 ff       	sbrs	r22, 0
    e308:	1b c0       	rjmp	.+54     	; 0xe340 <__floatsisf+0x6c>
    e30a:	6f 5f       	subi	r22, 0xFF	; 255
    e30c:	7f 4f       	sbci	r23, 0xFF	; 255
    e30e:	8f 4f       	sbci	r24, 0xFF	; 255
    e310:	9f 4f       	sbci	r25, 0xFF	; 255
    e312:	16 c0       	rjmp	.+44     	; 0xe340 <__floatsisf+0x6c>
    e314:	88 23       	and	r24, r24
    e316:	11 f0       	breq	.+4      	; 0xe31c <__floatsisf+0x48>
    e318:	96 e9       	ldi	r25, 0x96	; 150
    e31a:	11 c0       	rjmp	.+34     	; 0xe33e <__floatsisf+0x6a>
    e31c:	77 23       	and	r23, r23
    e31e:	21 f0       	breq	.+8      	; 0xe328 <__floatsisf+0x54>
    e320:	9e e8       	ldi	r25, 0x8E	; 142
    e322:	87 2f       	mov	r24, r23
    e324:	76 2f       	mov	r23, r22
    e326:	05 c0       	rjmp	.+10     	; 0xe332 <__floatsisf+0x5e>
    e328:	66 23       	and	r22, r22
    e32a:	71 f0       	breq	.+28     	; 0xe348 <__floatsisf+0x74>
    e32c:	96 e8       	ldi	r25, 0x86	; 134
    e32e:	86 2f       	mov	r24, r22
    e330:	70 e0       	ldi	r23, 0x00	; 0
    e332:	60 e0       	ldi	r22, 0x00	; 0
    e334:	2a f0       	brmi	.+10     	; 0xe340 <__floatsisf+0x6c>
    e336:	9a 95       	dec	r25
    e338:	66 0f       	add	r22, r22
    e33a:	77 1f       	adc	r23, r23
    e33c:	88 1f       	adc	r24, r24
    e33e:	da f7       	brpl	.-10     	; 0xe336 <__floatsisf+0x62>
    e340:	88 0f       	add	r24, r24
    e342:	96 95       	lsr	r25
    e344:	87 95       	ror	r24
    e346:	97 f9       	bld	r25, 7
    e348:	08 95       	ret

0000e34a <__fp_cmp>:
    e34a:	99 0f       	add	r25, r25
    e34c:	00 08       	sbc	r0, r0
    e34e:	55 0f       	add	r21, r21
    e350:	aa 0b       	sbc	r26, r26
    e352:	e0 e8       	ldi	r30, 0x80	; 128
    e354:	fe ef       	ldi	r31, 0xFE	; 254
    e356:	16 16       	cp	r1, r22
    e358:	17 06       	cpc	r1, r23
    e35a:	e8 07       	cpc	r30, r24
    e35c:	f9 07       	cpc	r31, r25
    e35e:	c0 f0       	brcs	.+48     	; 0xe390 <__fp_cmp+0x46>
    e360:	12 16       	cp	r1, r18
    e362:	13 06       	cpc	r1, r19
    e364:	e4 07       	cpc	r30, r20
    e366:	f5 07       	cpc	r31, r21
    e368:	98 f0       	brcs	.+38     	; 0xe390 <__fp_cmp+0x46>
    e36a:	62 1b       	sub	r22, r18
    e36c:	73 0b       	sbc	r23, r19
    e36e:	84 0b       	sbc	r24, r20
    e370:	95 0b       	sbc	r25, r21
    e372:	39 f4       	brne	.+14     	; 0xe382 <__fp_cmp+0x38>
    e374:	0a 26       	eor	r0, r26
    e376:	61 f0       	breq	.+24     	; 0xe390 <__fp_cmp+0x46>
    e378:	23 2b       	or	r18, r19
    e37a:	24 2b       	or	r18, r20
    e37c:	25 2b       	or	r18, r21
    e37e:	21 f4       	brne	.+8      	; 0xe388 <__fp_cmp+0x3e>
    e380:	08 95       	ret
    e382:	0a 26       	eor	r0, r26
    e384:	09 f4       	brne	.+2      	; 0xe388 <__fp_cmp+0x3e>
    e386:	a1 40       	sbci	r26, 0x01	; 1
    e388:	a6 95       	lsr	r26
    e38a:	8f ef       	ldi	r24, 0xFF	; 255
    e38c:	81 1d       	adc	r24, r1
    e38e:	81 1d       	adc	r24, r1
    e390:	08 95       	ret

0000e392 <__fp_inf>:
    e392:	97 f9       	bld	r25, 7
    e394:	9f 67       	ori	r25, 0x7F	; 127
    e396:	80 e8       	ldi	r24, 0x80	; 128
    e398:	70 e0       	ldi	r23, 0x00	; 0
    e39a:	60 e0       	ldi	r22, 0x00	; 0
    e39c:	08 95       	ret

0000e39e <__fp_nan>:
    e39e:	9f ef       	ldi	r25, 0xFF	; 255
    e3a0:	80 ec       	ldi	r24, 0xC0	; 192
    e3a2:	08 95       	ret

0000e3a4 <__fp_pscA>:
    e3a4:	00 24       	eor	r0, r0
    e3a6:	0a 94       	dec	r0
    e3a8:	16 16       	cp	r1, r22
    e3aa:	17 06       	cpc	r1, r23
    e3ac:	18 06       	cpc	r1, r24
    e3ae:	09 06       	cpc	r0, r25
    e3b0:	08 95       	ret

0000e3b2 <__fp_pscB>:
    e3b2:	00 24       	eor	r0, r0
    e3b4:	0a 94       	dec	r0
    e3b6:	12 16       	cp	r1, r18
    e3b8:	13 06       	cpc	r1, r19
    e3ba:	14 06       	cpc	r1, r20
    e3bc:	05 06       	cpc	r0, r21
    e3be:	08 95       	ret

0000e3c0 <__fp_round>:
    e3c0:	09 2e       	mov	r0, r25
    e3c2:	03 94       	inc	r0
    e3c4:	00 0c       	add	r0, r0
    e3c6:	11 f4       	brne	.+4      	; 0xe3cc <__fp_round+0xc>
    e3c8:	88 23       	and	r24, r24
    e3ca:	52 f0       	brmi	.+20     	; 0xe3e0 <__fp_round+0x20>
    e3cc:	bb 0f       	add	r27, r27
    e3ce:	40 f4       	brcc	.+16     	; 0xe3e0 <__fp_round+0x20>
    e3d0:	bf 2b       	or	r27, r31
    e3d2:	11 f4       	brne	.+4      	; 0xe3d8 <__fp_round+0x18>
    e3d4:	60 ff       	sbrs	r22, 0
    e3d6:	04 c0       	rjmp	.+8      	; 0xe3e0 <__fp_round+0x20>
    e3d8:	6f 5f       	subi	r22, 0xFF	; 255
    e3da:	7f 4f       	sbci	r23, 0xFF	; 255
    e3dc:	8f 4f       	sbci	r24, 0xFF	; 255
    e3de:	9f 4f       	sbci	r25, 0xFF	; 255
    e3e0:	08 95       	ret

0000e3e2 <__fp_split3>:
    e3e2:	57 fd       	sbrc	r21, 7
    e3e4:	90 58       	subi	r25, 0x80	; 128
    e3e6:	44 0f       	add	r20, r20
    e3e8:	55 1f       	adc	r21, r21
    e3ea:	59 f0       	breq	.+22     	; 0xe402 <__fp_splitA+0x10>
    e3ec:	5f 3f       	cpi	r21, 0xFF	; 255
    e3ee:	71 f0       	breq	.+28     	; 0xe40c <__fp_splitA+0x1a>
    e3f0:	47 95       	ror	r20

0000e3f2 <__fp_splitA>:
    e3f2:	88 0f       	add	r24, r24
    e3f4:	97 fb       	bst	r25, 7
    e3f6:	99 1f       	adc	r25, r25
    e3f8:	61 f0       	breq	.+24     	; 0xe412 <__fp_splitA+0x20>
    e3fa:	9f 3f       	cpi	r25, 0xFF	; 255
    e3fc:	79 f0       	breq	.+30     	; 0xe41c <__fp_splitA+0x2a>
    e3fe:	87 95       	ror	r24
    e400:	08 95       	ret
    e402:	12 16       	cp	r1, r18
    e404:	13 06       	cpc	r1, r19
    e406:	14 06       	cpc	r1, r20
    e408:	55 1f       	adc	r21, r21
    e40a:	f2 cf       	rjmp	.-28     	; 0xe3f0 <__fp_split3+0xe>
    e40c:	46 95       	lsr	r20
    e40e:	f1 df       	rcall	.-30     	; 0xe3f2 <__fp_splitA>
    e410:	08 c0       	rjmp	.+16     	; 0xe422 <__fp_splitA+0x30>
    e412:	16 16       	cp	r1, r22
    e414:	17 06       	cpc	r1, r23
    e416:	18 06       	cpc	r1, r24
    e418:	99 1f       	adc	r25, r25
    e41a:	f1 cf       	rjmp	.-30     	; 0xe3fe <__fp_splitA+0xc>
    e41c:	86 95       	lsr	r24
    e41e:	71 05       	cpc	r23, r1
    e420:	61 05       	cpc	r22, r1
    e422:	08 94       	sec
    e424:	08 95       	ret

0000e426 <__fp_zero>:
    e426:	e8 94       	clt

0000e428 <__fp_szero>:
    e428:	bb 27       	eor	r27, r27
    e42a:	66 27       	eor	r22, r22
    e42c:	77 27       	eor	r23, r23
    e42e:	cb 01       	movw	r24, r22
    e430:	97 f9       	bld	r25, 7
    e432:	08 95       	ret

0000e434 <__gesf2>:
    e434:	8a df       	rcall	.-236    	; 0xe34a <__fp_cmp>
    e436:	08 f4       	brcc	.+2      	; 0xe43a <__gesf2+0x6>
    e438:	8f ef       	ldi	r24, 0xFF	; 255
    e43a:	08 95       	ret

0000e43c <__mulsf3>:
    e43c:	0b d0       	rcall	.+22     	; 0xe454 <__mulsf3x>
    e43e:	c0 cf       	rjmp	.-128    	; 0xe3c0 <__fp_round>
    e440:	b1 df       	rcall	.-158    	; 0xe3a4 <__fp_pscA>
    e442:	28 f0       	brcs	.+10     	; 0xe44e <__mulsf3+0x12>
    e444:	b6 df       	rcall	.-148    	; 0xe3b2 <__fp_pscB>
    e446:	18 f0       	brcs	.+6      	; 0xe44e <__mulsf3+0x12>
    e448:	95 23       	and	r25, r21
    e44a:	09 f0       	breq	.+2      	; 0xe44e <__mulsf3+0x12>
    e44c:	a2 cf       	rjmp	.-188    	; 0xe392 <__fp_inf>
    e44e:	a7 cf       	rjmp	.-178    	; 0xe39e <__fp_nan>
    e450:	11 24       	eor	r1, r1
    e452:	ea cf       	rjmp	.-44     	; 0xe428 <__fp_szero>

0000e454 <__mulsf3x>:
    e454:	c6 df       	rcall	.-116    	; 0xe3e2 <__fp_split3>
    e456:	a0 f3       	brcs	.-24     	; 0xe440 <__mulsf3+0x4>

0000e458 <__mulsf3_pse>:
    e458:	95 9f       	mul	r25, r21
    e45a:	d1 f3       	breq	.-12     	; 0xe450 <__mulsf3+0x14>
    e45c:	95 0f       	add	r25, r21
    e45e:	50 e0       	ldi	r21, 0x00	; 0
    e460:	55 1f       	adc	r21, r21
    e462:	62 9f       	mul	r22, r18
    e464:	f0 01       	movw	r30, r0
    e466:	72 9f       	mul	r23, r18
    e468:	bb 27       	eor	r27, r27
    e46a:	f0 0d       	add	r31, r0
    e46c:	b1 1d       	adc	r27, r1
    e46e:	63 9f       	mul	r22, r19
    e470:	aa 27       	eor	r26, r26
    e472:	f0 0d       	add	r31, r0
    e474:	b1 1d       	adc	r27, r1
    e476:	aa 1f       	adc	r26, r26
    e478:	64 9f       	mul	r22, r20
    e47a:	66 27       	eor	r22, r22
    e47c:	b0 0d       	add	r27, r0
    e47e:	a1 1d       	adc	r26, r1
    e480:	66 1f       	adc	r22, r22
    e482:	82 9f       	mul	r24, r18
    e484:	22 27       	eor	r18, r18
    e486:	b0 0d       	add	r27, r0
    e488:	a1 1d       	adc	r26, r1
    e48a:	62 1f       	adc	r22, r18
    e48c:	73 9f       	mul	r23, r19
    e48e:	b0 0d       	add	r27, r0
    e490:	a1 1d       	adc	r26, r1
    e492:	62 1f       	adc	r22, r18
    e494:	83 9f       	mul	r24, r19
    e496:	a0 0d       	add	r26, r0
    e498:	61 1d       	adc	r22, r1
    e49a:	22 1f       	adc	r18, r18
    e49c:	74 9f       	mul	r23, r20
    e49e:	33 27       	eor	r19, r19
    e4a0:	a0 0d       	add	r26, r0
    e4a2:	61 1d       	adc	r22, r1
    e4a4:	23 1f       	adc	r18, r19
    e4a6:	84 9f       	mul	r24, r20
    e4a8:	60 0d       	add	r22, r0
    e4aa:	21 1d       	adc	r18, r1
    e4ac:	82 2f       	mov	r24, r18
    e4ae:	76 2f       	mov	r23, r22
    e4b0:	6a 2f       	mov	r22, r26
    e4b2:	11 24       	eor	r1, r1
    e4b4:	9f 57       	subi	r25, 0x7F	; 127
    e4b6:	50 40       	sbci	r21, 0x00	; 0
    e4b8:	8a f0       	brmi	.+34     	; 0xe4dc <__mulsf3_pse+0x84>
    e4ba:	e1 f0       	breq	.+56     	; 0xe4f4 <__mulsf3_pse+0x9c>
    e4bc:	88 23       	and	r24, r24
    e4be:	4a f0       	brmi	.+18     	; 0xe4d2 <__mulsf3_pse+0x7a>
    e4c0:	ee 0f       	add	r30, r30
    e4c2:	ff 1f       	adc	r31, r31
    e4c4:	bb 1f       	adc	r27, r27
    e4c6:	66 1f       	adc	r22, r22
    e4c8:	77 1f       	adc	r23, r23
    e4ca:	88 1f       	adc	r24, r24
    e4cc:	91 50       	subi	r25, 0x01	; 1
    e4ce:	50 40       	sbci	r21, 0x00	; 0
    e4d0:	a9 f7       	brne	.-22     	; 0xe4bc <__mulsf3_pse+0x64>
    e4d2:	9e 3f       	cpi	r25, 0xFE	; 254
    e4d4:	51 05       	cpc	r21, r1
    e4d6:	70 f0       	brcs	.+28     	; 0xe4f4 <__mulsf3_pse+0x9c>
    e4d8:	5c cf       	rjmp	.-328    	; 0xe392 <__fp_inf>
    e4da:	a6 cf       	rjmp	.-180    	; 0xe428 <__fp_szero>
    e4dc:	5f 3f       	cpi	r21, 0xFF	; 255
    e4de:	ec f3       	brlt	.-6      	; 0xe4da <__mulsf3_pse+0x82>
    e4e0:	98 3e       	cpi	r25, 0xE8	; 232
    e4e2:	dc f3       	brlt	.-10     	; 0xe4da <__mulsf3_pse+0x82>
    e4e4:	86 95       	lsr	r24
    e4e6:	77 95       	ror	r23
    e4e8:	67 95       	ror	r22
    e4ea:	b7 95       	ror	r27
    e4ec:	f7 95       	ror	r31
    e4ee:	e7 95       	ror	r30
    e4f0:	9f 5f       	subi	r25, 0xFF	; 255
    e4f2:	c1 f7       	brne	.-16     	; 0xe4e4 <__mulsf3_pse+0x8c>
    e4f4:	fe 2b       	or	r31, r30
    e4f6:	88 0f       	add	r24, r24
    e4f8:	91 1d       	adc	r25, r1
    e4fa:	96 95       	lsr	r25
    e4fc:	87 95       	ror	r24
    e4fe:	97 f9       	bld	r25, 7
    e500:	08 95       	ret

0000e502 <memcpy_P>:
    e502:	fb 01       	movw	r30, r22
    e504:	dc 01       	movw	r26, r24
    e506:	02 c0       	rjmp	.+4      	; 0xe50c <memcpy_P+0xa>
    e508:	05 90       	lpm	r0, Z+
    e50a:	0d 92       	st	X+, r0
    e50c:	41 50       	subi	r20, 0x01	; 1
    e50e:	50 40       	sbci	r21, 0x00	; 0
    e510:	d8 f7       	brcc	.-10     	; 0xe508 <memcpy_P+0x6>
    e512:	08 95       	ret

0000e514 <_exit>:
    e514:	f8 94       	cli

0000e516 <__stop_program>:
    e516:	ff cf       	rjmp	.-2      	; 0xe516 <__stop_program>
