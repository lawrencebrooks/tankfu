
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000056  00800100  000077ca  000078ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000077ca  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000d32  00800160  00800160  00007920  2**5
                  ALLOC
  3 .stab         000005ac  00000000  00000000  00007920  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000024c  00000000  00000000  00007ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  00008118  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000428  00000000  00000000  00008130  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000055ed  00000000  00000000  00008558  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001385  00000000  00000000  0000db45  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001503  00000000  00000000  0000eeca  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000b08  00000000  00000000  000103d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001336  00000000  00000000  00010ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004344  00000000  00000000  0001220e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000480  00000000  00000000  00016558  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__ctors_end>
       4:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
       8:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
       c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      10:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      14:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      18:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      1c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      20:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      24:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      28:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      2c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      30:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      34:	0c 94 5f 27 	jmp	0x4ebe	; 0x4ebe <__vector_13>
      38:	0c 94 9f 27 	jmp	0x4f3e	; 0x4f3e <__vector_14>
      3c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      40:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      44:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      48:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      4c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      50:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      54:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      58:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      5c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      60:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      64:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      68:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>
      6c:	0c 94 8a 25 	jmp	0x4b14	; 0x4b14 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	02 2b 05 2b 59 2b 5d 2b 65 2b 06 2b 0b 2b 10 2b     .+.+Y+]+e+.+.+.+
      ce:	6d 2b 13 2b 16 2b 19 2b 56 2b                       m+.+.+.+V+

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <map_uzeboxlogo2>:
      e4:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

000000f5 <map_uzeboxlogo>:
      f5:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     105:	00 0e 0f 10 11 12                                   ......

0000010b <logo_tileset>:
	...
     167:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     177:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     187:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     197:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1a7:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1b7:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1c7:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1d7:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1e7:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     1f7:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     207:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     217:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     227:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     237:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     24f:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     25f:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     26f:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     27f:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     28f:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     29f:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2af:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2bf:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2cf:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2df:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     2ef:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     2ff:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     30f:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     31f:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     32f:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     33f:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     34f:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     35f:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     38b:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     39b:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3ab:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3bb:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3cb:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3db:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3eb:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     3fb:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     40b:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     41b:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     42b:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     43b:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     44b:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     45b:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     493:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4a3:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4b3:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4c3:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4d3:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4e3:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     4f3:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     503:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     513:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     523:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     533:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     543:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     553:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     563:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     573:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     583:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     593:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5a3:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5b3:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5c3:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5e7:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     5f7:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     607:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     617:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     627:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     637:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     647:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     657:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     667:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     677:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     687:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     697:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6a7:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6b7:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6cf:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6df:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     6ef:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     6ff:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     70f:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     71f:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     72f:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     73f:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     74f:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     75f:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     76f:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     77f:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     78f:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     79f:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7af:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7bf:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7cf:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7df:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     80b:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     81b:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     82b:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     83b:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     84b:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     85b:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     86b:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     87b:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     88b:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     89b:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8ab:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8bb:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8cb:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8db:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000090b <logoInitPatches>:
     90b:	00 14 09 00 00 80 0f 80 0f                          .........

00000914 <voice>:
	...
     930:	00 00 01 01 01 02 03 04 05 06 07 09 0a 0c 0e 10     ................
     940:	11 12 14 15 16 17 17 18 17 16 14 10 0a 05 f9 f3     ................
     950:	ed e7 e5 e2 e1 e0 e0 e1 e1 e3 e4 e6 e8 ea ec ee     ................
     960:	f0 f2 f4 f6 f8 fb fd 01 04 06 09 0b 0e 10 12 15     ................
     970:	18 1a 1d 1f 22 24 27 29 2b 2d 2d 2d 2d 2a 24 1e     ...."$')+----*$.
     980:	0f 01 f6 e3 dd d6 d0 d0 cf d0 d1 d3 d6 d9 dd e1     ................
     990:	e7 ec f2 f7 fe 03 08 0e 0d 11 0c 08 0b 08 0b 0d     ................
     9a0:	10 12 15 17 1a 1c 1d 1e 19 18 11 05 06 00 00 ff     ................
     9b0:	ff fd f6 f6 ee ee ee e9 e9 e6 da dd db db e2 e6     ................
     9c0:	eb f2 f9 01 08 10 18 1f 28 2d 32 36 30 2c 25 18     ........(-260,%.
     9d0:	10 0a fd f3 f4 ee f0 f1 f1 ec ed e3 db de dc df     ................
     9e0:	e7 e9 ed f3 ea f2 ef ec f5 f7 ff 07 10 18 1f 26     ...............&
     9f0:	2c 31 36 38 38 39 30 2a 23 1c 09 fb f3 da d3 cc     ,168890*#.......
     a00:	c4 c9 c9 c8 cd c6 c7 cd cf d8 e1 e9 f4 fd 0c 16     ................
     a10:	21 2c 35 3d 42 4a 47 47 4c 3e 3e 35 2e 21 0c 01     !,5=BJGGL>>5.!..
     a20:	ec e5 cf cc c4 bf bc b5 b9 bb c0 c8 ce d4 de dd     ................
     a30:	e8 ee f0 fc 03 0d 1a 24 2f 37 3f 46 4b 4c 51 46     .......$/7?FKLQF
     a40:	44 3d 30 2f 29 17 0e ff e4 d4 c0 b8 ac ae af b5     D=0/)...........
     a50:	ba c4 cb d3 dc e4 ed f7 00 0d 15 20 28 32 33 37     ........... (237
     a60:	37 26 2c 21 16 1b 14 15 10 0b 03 ff f9 f0 f3 e9     7&,!............
     a70:	eb e3 d9 e0 de e4 ec f1 f5 fc f9 ff 02 05 07 04     ................
     a80:	08 0b 05 07 0c 04 0a 0a 0a 0a 06 09 04 07 0b 0b     ................
     a90:	0b 0c 06 02 fb fb f7 f0 f4 e9 e5 eb eb f1 f8 fd     ................
     aa0:	03 05 0a 0b 06 0c 0c 07 0a 08 04 ff fc f9 f8 f9     ................
     ab0:	fd fa f9 fd fd 02 09 0c 11 11 15 13 0e 15 11 0f     ................
     ac0:	11 04 fe fd f2 ed ec ed ea e1 e3 e2 db e0 e3 e0     ................
     ad0:	e7 eb ef f6 fc 04 0a 12 1a 1f 25 2a 2a 2f 2b 2e     ..........%**/+.
     ae0:	2f 2b 2c 22 15 15 06 fd fa ea e4 da d7 d1 ce d3     /+,"............
     af0:	d1 d0 d6 d6 d9 dd dd e5 ea f2 fb fe 06 0f 13 1d     ................
     b00:	24 2b 30 35 39 38 3b 3b 30 32 28 1f 19 0c fd f4     $+0598;;02(.....
     b10:	e5 d4 d0 ca c8 c9 ca c6 cb ce d3 db e3 ea f4 fc     ................
     b20:	04 0d 16 1d 24 28 2c 2a 2b 27 25 28 25 20 1a 0f     ....$(,*+'%(% ..
     b30:	06 02 f7 f2 ed ea e5 e5 e0 d8 dc dc df e7 eb ef     ................
     b40:	f4 fa fa ff 07 0c 15 18 1b 1b 15 12 15 17 15 19     ................
     b50:	12 09 0c 07 07 05 00 fc fa f0 e9 ec ec ec ee ef     ................
     b60:	e4 e3 e6 e6 ed f3 f9 00 05 08 0c 11 0d 12 17 16     ................
     b70:	18 18 0a 09 05 ff 02 fe 01 03 03 05 00 ff 01 ff     ................
     b80:	03 fe ff 02 04 06 08 08 fd fc fa f1 f5 f2 f0 f6     ................
     b90:	f6 f7 f5 f1 ea ec ec ee ef ed f2 f6 fc 02 07 0d     ................
     ba0:	12 17 1b 1f 21 25 20 20 1e 19 1e 20 1d 1b 15 fe     ....!%  ... ....
     bb0:	f3 ef ea e8 e5 e3 de dd dd dd d8 d9 d9 d9 df e3     ................
     bc0:	eb f3 f9 02 07 0b 12 17 1d 21 27 2c 30 30 30 2e     .........!',000.
     bd0:	1e 1a 1b 15 18 0e 08 fe e4 dc d9 d2 d0 d7 da db     ................
     be0:	e0 e0 de e4 e9 ef f6 fd 03 0b 12 18 1f 22 20 1f     ............." .
     bf0:	21 1d 1a 1f 1c 1e 1a 09 07 01 f6 f6 f4 ea e7 e0     !...............
     c00:	d7 da d9 dd e1 e7 ed f4 f7 fd ff ff 07 0d 13 1c     ................
     c10:	21 24 26 20 1a 15 17 13 10 12 14 10 07 05 fd e9     !$& ............
     c20:	e2 e2 e0 e3 e8 eb ec e5 e3 e3 e4 e9 ef f6 fb 02     ................
     c30:	08 0d 10 16 13 0e 11 13 13 15 18 19 19 0a 03 05     ................
     c40:	00 fd 05 06 05 06 00 f1 f3 f4 f7 fb fe 01 02 f6     ................
     c50:	f7 f5 f1 f4 f6 f7 f2 f4 f7 f7 f9 fb fc ff 03 fb     ................
     c60:	f8 fd f5 f7 fc fd fe 04 09 0f 15 1b 1d 1c 11 0b     ................
     c70:	0f 11 18 1e 22 21 1d 06 fc f6 e7 e1 e4 e7 e9 ed     ...."!..........
     c80:	ef e4 e4 dc d0 d4 d7 db e5 f0 f8 01 08 0b 0e 16     ................
     c90:	1c 24 29 2f 32 2e 28 29 22 17 16 16 0a 09 01 f6     .$)/2.()".......
     ca0:	f0 e5 e3 d5 d6 d2 cf d8 db e3 e8 ef ed ed f5 fc     ................
     cb0:	03 0d 15 1d 1f 1f 25 28 29 2d 23 1e 1b 09 04 06     ......%()-#.....
     cc0:	02 04 06 06 fe ee de ca c6 c3 c3 ca d2 da e4 ed     ................
     cd0:	f5 fe 01 02 0b 12 1c 27 32 39 40 3d 32 32 29 1a     .......'29@=22).
     ce0:	18 1b 16 18 0d 05 f5 e2 dc d0 d0 ce d0 d2 cb cc     ................
     cf0:	d0 d3 d7 de e8 f0 fa 04 0e 17 1c 1f 21 18 1a 19     ............!...
     d00:	15 1b 1e 21 23 20 20 21 18 0e 07 fd f6 f4 f7 f7     ...!#  !........
     d10:	fa fc f6 f6 f6 f0 e8 e8 e3 e5 ea ef f3 f7 f4 f1     ................
     d20:	f4 ee f3 f8 fb 00 0a 0f 12 13 0e 04 ff fd fe 01     ................
     d30:	06 0a 0e 0c 0b 0e 0f 0b 10 14 18 1b 1d 19 12 0b     ................
     d40:	ff fa f0 ee eb e5 ea ed f1 f2 ee ee e6 de dc de     ................
     d50:	e1 e8 f1 f9 01 09 10 13 18 1c 1d 1b 1f 1f 21 21     ..............!!
     d60:	20 16 10 07 01 f9 f0 f0 f0 ec ef f1 f1 f1 eb e6      ...............
     d70:	e7 e9 ee f4 fa ff 04 04 04 09 0d 0e 10 16 19 1d     ................
     d80:	1d 1c 12 08 01 fc fa fb fe fe 01 03 02 fb f3 ee     ................
     d90:	e2 d9 d8 d9 dc e2 ea f0 f6 fc 01 02 08 0e 14 1a     ................
     da0:	20 26 2a 2b 26 20 1c 19 16 11 07 04 04 ff fe fd      &*+& ..........
     db0:	fb f5 e9 e2 df d8 d7 d9 dd e1 e6 e9 ed f4 fa ff     ................
     dc0:	05 0c 10 13 15 12 0b 08 08 0a 0c 0f 12 12 14 16     ................
     dd0:	15 11 0d 07 fc fa fa fc fe 00 01 00 fb f1 ee ea     ................
     de0:	eb ed f2 f6 fa fc fe f8 f5 f5 f7 fa fe 01 03 09     ................
     df0:	0d 10 11 12 11 0a 01 ff fc f9 fa fc fe 01 03 03     ................
     e00:	06 08 0a 0c 0b 08 07 06 00 f8 f7 f7 f7 f8 fb fa     ................
     e10:	f8 f9 fb fd fe fe fe f8 f4 f6 f8 fb fe 02 05 06     ................
     e20:	04 06 07 0a 0c 0f 11 11 0f 0b 01 fb f5 f1 ef f0     ................
     e30:	f1 f1 f5 f9 fd 00 03 05 04 00 ff 00 01 03 06 09     ................
     e40:	0b 0b 09 08 09 09 0a 08 06 04 02 fb f7 f7 f6 f7     ................
     e50:	f8 fa f9 fa f8 f8 f8 f9 f9 f8 f6 f3 f3 f5 f7 fa     ................
     e60:	fd 00 03 05 07 0b 0e 11 14 16 16 15 11 0c 0a 06     ................
     e70:	04 03 02 01 ff fe fd fd fd fc fa f7 f1 ed eb eb     ................
     e80:	ec ee f2 f5 f8 fb ff 02 05 08 09 0a 0a 08 04 04     ................
     e90:	04 04 04 05 05 05 04 04 05 06 07 07 07 06 04 02     ................
     ea0:	01 00 00 fe fd fb fa fa f9 f9 fa fb fc fc fb f9     ................
     eb0:	f9 f9 f9 fa fc fe ff 01 03 05 06 07 08 07 06 04     ................
     ec0:	02 00 00 00 00 01 01 01 02 02 02 02 02 01 00 ff     ................
     ed0:	fe fd fc fd fd fd fe fe ff ff 00 00 00 01 01 02     ................
     ee0:	01 01 00 ff ff ff fe ff ff 00 01 02 03 03 04 04     ................
     ef0:	03 01 ff fd fb fb fb fb fb fb fc fd ff 00 01 02     ................
     f00:	03 04 03 03 03 03 03 03 03 03 04 04 03 02 01 01     ................
     f10:	01 00 ff fe fc fc fc fd fd fd fd fc fb fc fd fe     ................
     f20:	ff 00 01 01 01 00 ff fe ff 00 00 ff 00 01 03 05     ................
     f30:	06 08 08 06 02 ff fe ff 00 00 ff fe 00 02 03 03     ................
     f40:	02 01 00 fe fd fc fb fb f9 f7 f8 fb fd fd fd fe     ................
     f50:	01 04 06 07 06 02 ff fc fe 01 04 03 ff f9 f8 fb     ................
     f60:	00 04 06 08 0a 0b 0c 0d 0f 0c 01 f4 ee f0 f6 fe     ................
     f70:	04 07 05 fe fd fb f8 f4 ee ee f1 f3 f7 fc 01 04     ................
     f80:	04 05 08 06 04 07 0b 0f 0f 0c 0d 0a 04 03 05 02     ................
     f90:	ff ff fc fa fd ff 00 fa f6 ef ef f4 f4 ee e9 ee     ................
     fa0:	f7 02 0c 16 18 0c 06 0f 1a 1d 0f 00 fa f5 ed f1     ................
     fb0:	fd 05 04 fe 07 13 1b 1e 15 06 e8 cc cc d8 ea f6     ................
     fc0:	f9 ed df df e9 fa 08 0f 16 1d 24 24 25 30 31 17     ..........$$%01.
     fd0:	f9 f4 f3 f8 06 1b 2c 25 07 f0 ee ed db d3 dd ed     ......,%........
     fe0:	f8 f4 e9 df db d2 e1 f8 0a 10 12 14 19 13 12 1f     ................
     ff0:	2b 21 06 f1 e2 ef 09 25 30 1f fb ea ef ec e9 f5     +!.....%0.......
    1000:	f5 e0 d6 e1 f6 0b 1c 34 4b 41 10 d9 e0 fb 06 f4     .......4KA......
    1010:	f4 ff 01 ee e1 f2 fc f2 f1 09 19 11 08 0d 11 fd     ................
    1020:	ea e0 e1 f0 f5 e8 d3 dd eb fe 0e 1c 23 33 4c 62     ............#3Lb
    1030:	5a 2d 07 df dd d2 d6 e9 f5 02 1b 36 28 f4 d6 dd     Z-.........6(...
    1040:	cd b5 ba ca e0 f6 10 26 1c ef c6 dd 04 1f 27 34     .......&......'4
    1050:	3d 3a 25 21 48 67 61 18 d3 bd b7 cd eb f9 e6 ea     =:%!Hga.........
    1060:	f0 f1 d6 cc bd b1 c4 d8 ef 02 0c 10 28 55 77 5f     ............(Uw_
    1070:	17 ee f2 fd f6 05 22 31 2b 0b 03 ff f4 0c 2b 23     ......"1+.....+#
    1080:	0f f1 d6 b8 af c6 e2 f7 f0 ce b0 c5 da eb f9 0d     ................
    1090:	16 1c 34 54 64 47 0b fd 01 0e 0e f4 ed 06 1e 31     ..4TdG.........1
    10a0:	2e 31 29 ef ca b9 d9 f2 e7 c1 b6 d8 ff 03 db c9     .1).............
    10b0:	e7 02 10 19 2d 34 33 18 1f 40 54 40 04 e2 e9 ee     ....-43..@T@....
    10c0:	e8 d9 d8 f5 11 15 e6 bb ab c9 df f2 fe 14 29 30     ..............)0
    10d0:	15 f5 08 30 3a 1d ed fb fe f5 f9 10 21 30 20 04     ...0:.......!0 .
    10e0:	fb e4 e3 eb 18 2b 16 ce ac c5 e4 00 06 fe d5 d8     .....+..........
    10f0:	e9 fa 04 0f 1d 29 48 5c 3e f7 c7 dc f7 0a 14 19     .....)H\>.......
    1100:	07 f4 03 f5 e6 06 2b 37 ef a4 b8 dd fd f7 db d4     ......+7........
    1110:	f7 0b 07 e1 e9 0b 1c 22 2b 3d 45 3e 27 3d 54 4b     ......."+=E>'=TK
    1120:	00 e7 d9 d4 cc b8 cf e9 03 07 db 9e a5 c5 dc e3     ................
    1130:	ef fd 0e 1c 29 19 00 00 29 41 42 13 0b 12 0c 19     ....)...)AB.....
    1140:	18 20 3d 4f 32 ee d6 e7 f0 f3 f2 eb c3 ca d6 ed     . =O2...........
    1150:	f1 f4 cd cf e0 ed f6 fb 03 13 2b 3c 2d fc f1 eb     ..........+<-...
    1160:	fa 02 06 1c 34 3c 14 e5 ea ff 23 37 43 12 d0 cf     ....4<....#7C...
    1170:	d3 d2 cf d6 e8 01 08 f7 da ee fd 0f 15 1f 2b 38     ..............+8
    1180:	2f 25 2b 2a f9 fb 04 08 ce c2 d7 f3 0d 14 ee b3     /%+*............
    1190:	c4 d9 ec f0 fb 0d 1d 11 01 ee f1 fd 10 24 2f 39     .............$/9
    11a0:	21 04 00 f9 06 0a 1e 36 47 23 d2 d1 e5 ef f5 fb     !......6G#......
    11b0:	e4 dc eb f6 fe f7 db e3 f3 00 05 07 10 21 2f 16     .............!/.
    11c0:	e8 e4 f9 fe ee f2 00 0d 1c 25 1c f6 e3 ee 09 1a     .........%......
    11d0:	28 20 05 dd c6 cd d9 e4 f0 02 0e 13 fd f4 03 11     ( ..............
    11e0:	20 26 31 3d 48 3e 23 0f ea e9 fd 02 f5 e2 da ea      &1=H>#.........
    11f0:	f8 e8 cb bd c5 d3 dc e7 f1 fe 00 f7 f1 f8 fe 02     ................
    1200:	0d 1c 27 33 3e 38 18 05 09 17 26 32 39 2e 0f df     ..'3>8....&29...
    1210:	cd e0 f2 f4 e5 e3 ed f3 f4 f5 e4 e0 ed f6 01 08     ................
    1220:	0d 0b 06 f2 e9 f3 fa fe fb f8 03 11 19 14 0c 0e     ................
    1230:	13 0b 0a 18 20 17 03 f8 e3 d5 dc e5 f0 f9 00 06     .... ...........
    1240:	04 f6 f4 00 0d 17 1e 26 29 23 12 08 00 f8 f9 f3     .......&)#......
    1250:	f6 fd ff f7 f2 eb e4 db de e6 ed f4 fb fc f5 f0     ................
    1260:	f0 f7 fe 01 05 0f 19 1f 22 26 29 1b 09 0e 1a 1e     ........"&).....
    1270:	14 0a 02 f6 ef eb ed f4 f0 ec f2 f8 fc ff f4 ec     ................
    1280:	f4 fb 01 08 0b 07 fc ef eb ef f3 f9 ff fe fe 05     ................
    1290:	09 05 05 0b 10 16 18 10 0a 05 f7 f5 fc f8 ea e8     ................
    12a0:	f0 f6 fc 03 0a 07 00 04 0e 15 1c 21 24 21 1c 0e     ...........!$!..
    12b0:	f8 f5 f7 f2 f6 fa fe 02 f4 e0 e3 e3 db e0 e7 e7     ................
    12c0:	e5 e4 e4 ea f0 f6 fd 04 0a 0f 16 1f 27 2c 31 38     ............',18
    12d0:	2e 17 19 20 16 0f 0e 01 f4 f9 f7 f0 f3 f0 ee f2     ... ............
    12e0:	f8 f9 ef ea f0 f5 f7 f7 f7 ed e0 de e3 e7 ed f3     ................
    12f0:	fc 02 ff 03 0d 0a 0b 14 19 1d 25 28 1e 10 05 f9     ..........%(....
    1300:	f9 01 04 f9 ee f5 fc fd 06 0c 03 02 0c 0f 0f 13     ................
    1310:	0f 0b 14 12 f9 f0 f3 ef f1 f9 fe f9 f2 f1 eb e1     ................
    1320:	dd e0 e3 e7 ea e8 e5 e7 ef f7 00 07 0e 15 18 1c     ................
    1330:	27 30 34 38 3d 33 17 04 fe fc 00 04 fe f5 fa 00     '048=3..........
    1340:	f5 ee f3 f7 fb 00 f6 f0 f8 f9 fa 03 00 eb e1 e2     ................
    1350:	e2 e7 f0 f6 f8 fb 00 00 ff 01 06 0b 0f 11 0e 08     ................
    1360:	08 0a fe f8 ff 01 03 07 05 ff 02 09 0b 10 11 0a     ................
    1370:	0c 13 18 1d 1d 16 11 13 0a f8 f4 f7 f4 f5 f4 ed     ................
    1380:	ec ed ec e7 dd d7 d3 d1 d5 db e3 ea ef f6 fd 03     ................
    1390:	0a 10 16 1c 21 26 2b 2d 2e 2e 2b 1e 12 0f 09 05     ....!&+-..+.....
    13a0:	07 01 fd 00 01 fa f6 f6 f7 f9 f7 f2 f0 ee ea ea     ................
    13b0:	e9 e5 e7 ea ea ed f2 f5 f9 fd 01 02 01 03 07 09     ................
    13c0:	0c 10 14 13 10 10 0c 06 05 06 06 05 06 08 05 02     ................
    13d0:	03 05 04 01 fe fe fe ff 01 02 02 05 03 fb fa fc     ................
    13e0:	fc fc fb f9 fa f9 f9 f9 f8 f7 f6 f6 f5 f5 f5 f7     ................
    13f0:	fa fc fe 00 02 04 07 08 0a 0c 0e 0e 0d 0c 08 07     ................
    1400:	07 04 02 03 03 02 00 00 03 03 01 ff fe 00 fe fc     ................
    1410:	fe ff ff fe f9 f7 f7 f8 f8 f9 f9 fa fc fd fe fe     ................
    1420:	fe fe ff ff ff ff 00 01 02 04 04 02 03 04 02 04     ................
    1430:	04 06 07 07 03 03 05 05 03 04 06 05 04 02 02 05     ................
    1440:	02 fd fd fd fe fc f9 fa fc fc fb f9 f6 f3 f8 f6     ................
    1450:	f5 f8 f8 f9 fb fd fe 00 02 04 05 06 07 08 0a 0d     ................
    1460:	0e 0e 0c 0a 08 06 05 01 02 04 02 fe 01 01 fd 00     ................
    1470:	04 01 fa f6 f6 f8 fa f5 f5 f6 f7 f8 f8 f8 fa fc     ................
    1480:	ff 01 01 fe 00 02 00 04 06 08 08 06 05 03 05 00     ................
    1490:	02 08 08 01 01 04 06 09 0a 02 fc fe fc fa fa 00     ................
    14a0:	00 00 04 06 ff fb 01 00 fc fa fb fb fc fd fe 00     ................
    14b0:	fb fb ff ff fd f3 f7 fa fa fc fd fe 00 03 05 07     ................
    14c0:	08 05 04 04 07 01 02 09 0a 05 07 0a 01 01 06 01     ................
    14d0:	00 02 fb fe 04 0c 0c fd fd 05 fc f6 f8 f4 f6 f7     ................
    14e0:	f7 f7 f8 fa fb ff fb fd ff ff f9 f5 fc fd ff 01     ................
    14f0:	04 04 06 00 ff 06 09 0c 08 03 06 07 09 0d 0c 03     ................
    1500:	09 0a fd 01 03 fc 03 03 02 fd fe 04 fb f6 fd fc     ................
    1510:	f7 f7 f3 f5 f7 f0 f3 f9 fc ff fc f6 fa fc fe ff     ................
    1520:	00 03 05 07 08 0a 0b 0d 0b 0b 06 0b 0b 05 06 06     ................
    1530:	09 04 01 04 fe 00 01 f8 fd 01 ff fd f9 f7 f5 f5     ................
    1540:	f9 f7 f7 f9 f9 fa fb fb fd fe fb ff 02 04 06 04     ................
    1550:	03 05 01 07 01 02 05 05 fe 02 04 06 07 09 04 ff     ................
    1560:	05 00 00 03 ff fe ff fc 00 ff 01 ff 01 fc 00 00     ................
    1570:	fe fc fc fd ff 00 ff fe 03 fd f8 00 f9 fe fe 00     ................
    1580:	fb fd ff fe ff 02 00 01 03 ff 01 03 01 00 04 04     ................
    1590:	05 06 06 01 06 05 06 02 03 00 02 fe 03 03 05 ff     ................
    15a0:	05 ff fa fc f9 fa fa fb fb fc fc fc fe fd f8 fe     ................
    15b0:	fb fd fe ff fe fe 01 01 01 02 02 04 00 01 04 04     ................
    15c0:	06 05 08 08 03 06 07 04 07 03 02 ff ff 01 00 fd     ................
    15d0:	01 fd ff fd ff fc fa fa fa fb fa fb fc f9 fa fd     ................
    15e0:	fc fd fe ff 00 01 fd 02 01 01 03 04 04 05 06 06     ................
    15f0:	03 03 05 03 04 05 05 04 03 05 03 05 02 fe fe fa     ................
    1600:	fe fe fe ff fc fc fe fc f9 fc fb fb fc fd fd ff     ................
    1610:	fe fc ff ff 01 02 02 04 03 ff 03 00 01 02 02 03     ................
    1620:	00 01 03 02 01 04 02 01 05 01 00 02 01 01 04 ff     ................
    1630:	fd 00 fc ff 00 00 fe ff ff 00 ff fd ff 00 ff 00     ................
    1640:	00 fc fd fb fc fd fe 00 ff 00 02 ff fd 01 fd ff     ................
    1650:	00 00 01 ff 00 01 01 02 04 03 04 06 03 03 05 04     ................
    1660:	05 06 01 ff 01 02 02 03 fe fe 00 fc ff fc fa fd     ................
    1670:	fc fc fd fc fa fb fa fb fb fe fe ff ff 00 ff 01     ................
    1680:	01 01 01 03 03 00 02 03 03 05 06 06 06 07 08 04     ................
    1690:	02 05 03 02 02 fd fe 00 00 fd fb fc fd fb fd fc     ................
    16a0:	fa fc fc fc fc fe fb fa fd fc fd ff 00 00 01 02     ................
    16b0:	04 01 02 03 03 04 05 02 01 04 01 01 05 04 03 04     ................
    16c0:	05 02 01 03 02 00 03 fd fa ff ff fb fb fe fd fd     ................
    16d0:	fe fe fe fc fd fe fe ff fd fe ff ff ff 00 02 01     ................
    16e0:	01 03 00 00 02 01 01 02 03 fe ff 02 ff 00 02 02     ................
    16f0:	02 03 03 03 03 01 01 02 02 ff fd 00 01 fc fe 00     ................
    1700:	ff ff 00 01 ff ff 01 fe ff 00 fb fd fe fd fe ff     ................
    1710:	00 ff 00 00 ff 02 00 fe 00 01 ff fe 01 00 01 01     ................
    1720:	02 02 03 03 04 04 03 03 04 03 04 01 00 01 00 fe     ................
    1730:	fe fe fd ff ff ff fe 01 fd fb fe fa fb fd fc fd     ................
    1740:	fe fe fe ff 00 00 01 01 00 01 01 02 01 00 02 02     ................
    1750:	02 03 03 04 04 05 05 03 04 05 01 02 01 ff 00 00     ................
    1760:	fc fe fc fc fd fd fd fe fe fc fd fd fd fe fc fc     ................
    1770:	fe fd fe ff 00 01 02 02 03 03 04 05 02 01 02 00     ................
    1780:	02 02 00 03 02 02 03 03 02 03 01 01 01 00 01 01     ................
    1790:	fc ff fd fc fd fd fd fe fe fe ff ff ff 01 fd fd     ................
    17a0:	00 fe ff 00 00 01 01 ff 03 00 00 03 01 00 02 ff     ................
    17b0:	02 ff fd 00 ff ff 01 01 01 03 02 02 03 02 03 03     ................
    17c0:	ff 01 01 ff 01 ff fe 00 ff 00 00 00 00 02 fe fe     ................
    17d0:	00 fd fe fd fd fe fd fd ff fd fe 00 ff 00 00 00     ................
    17e0:	02 00 fe 00 00 00 01 01 02 03 03 04 04 04 05 04     ................
    17f0:	03 04 03 03 02 00 00 00 fd fe fe fd fe ff fd fe     ................
    1800:	fe fd fe fc fb fd fc fd fe fe fe ff 00 00 00 01     ................
    1810:	01 01 01 02 02 02 01 02 02 02 03 03 03 03 03 03     ................
    1820:	03 02 03 02 01 01 ff ff fe fe fd fd fe fd fe fe     ................
    1830:	fe ff fe fe fe fe ff fe fe ff ff 00 00 00 01 01     ................
    1840:	01 02 02 02 02 01 02 01 00 01 01 00 01 01 01 01     ................
    1850:	01 01 01 01 00 00 00 00 ff fe ff ff ff ff ff ff     ................
    1860:	ff ff 00 00 00 00 ff 00 00 ff 00 00 00 00 00 00     ................
	...
    1878:	00 00 ff 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1888:	01 01 01 00 00 00 00 00 00 00 00 00                 ............

00001894 <strB10>:
    1894:	52 65 61 64 20 74 68 65 20 6d 61 6e 75 61 6c 00     Read the manual.

000018a4 <strB9>:
    18a4:	4e 65 65 64 20 68 65 6c 70 3f 00                    Need help?.

000018af <strB8>:
    18af:	54 68 61 74 27 73 20 69 74 3f 00                    That's it?.

000018ba <strB7>:
    18ba:	41 20 74 75 72 6b 65 79 20 73 68 6f 6f 74 00        A turkey shoot.

000018c9 <strB6>:
    18c9:	2a 59 41 57 4e 2a 00                                *YAWN*.

000018d0 <strB5>:
    18d0:	54 6f 6f 20 65 61 73 79 00                          Too easy.

000018d9 <strB4>:
    18d9:	41 74 20 6c 65 61 73 74 20 74 72 79 00              At least try.

000018e6 <strB3>:
    18e6:	42 72 6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00        Broken button?.

000018f5 <strB2>:
    18f5:	4c 4f 4c 00                                         LOL.

000018f9 <strB1>:
    18f9:	59 6f 75 20 73 75 63 6b 20 62 72 6f 00              You suck bro.

00001906 <strBy>:
    1906:	42 79 00                                            By.

00001909 <strOwns>:
    1909:	50 77 6e 73 00                                      Pwns.

0000190e <strChangeHandle>:
    190e:	45 64 69 74 20 20 2d 20 55 50 2f 44 4f 57 4e 00     Edit  - UP/DOWN.

0000191e <strCancelHandle>:
    191e:	43 61 6e 63 65 6c 20 20 2d 20 58 00                 Cancel  - X.

0000192a <strConfirmHandle>:
    192a:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00001936 <strSelectHandle>:
    1936:	53 65 6c 65 63 74 20 20 2d 20 41 00                 Select  - A.

00001942 <strPlayer2>:
    1942:	50 32 00                                            P2.

00001945 <strPlayer1>:
    1945:	50 31 00                                            P1.

00001948 <strUnderline>:
    1948:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00001954 <strHandlesTitle>:
    1954:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00001960 <strHighscores>:
    1960:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

0000196a <str2Player>:
    196a:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

0000197b <str1Player>:
    197b:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

00001989 <strCopyright>:
    1989:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
    1999:	42 72 6f 6f 6b 73 00                                Brooks.

000019a0 <map_rocket_right_1>:
    19a0:	01 01 26                                            ..&

000019a3 <map_rocket_right_0>:
    19a3:	01 01 25                                            ..%

000019a6 <map_rocket_up_1>:
    19a6:	01 01 24                                            ..$

000019a9 <map_rocket_up_0>:
    19a9:	01 01 23                                            ..#

000019ac <map_ball>:
    19ac:	01 01 22                                            .."

000019af <map_explosion_2>:
    19af:	02 02 0c 0d 0d 0c                                   ......

000019b5 <map_explosion_1>:
    19b5:	02 02 0a 0b 18 19                                   ......

000019bb <map_explosion_0>:
    19bb:	02 02 08 09 16 17                                   ......

000019c1 <map_tank2_right_1>:
    19c1:	02 02 20 21 2e 2f                                   .. !./

000019c7 <map_tank2_right_0>:
    19c7:	02 02 1e 1f 2c 2d                                   ....,-

000019cd <map_tank2_up_1>:
    19cd:	02 02 1c 1d 2a 2b                                   ....*+

000019d3 <map_tank2_up_0>:
    19d3:	02 02 1a 1b 28 29                                   ....()

000019d9 <map_tank1_right_1>:
    19d9:	02 02 06 07 14 15                                   ......

000019df <map_tank1_right_0>:
    19df:	02 02 04 05 12 13                                   ......

000019e5 <map_tank1_up_1>:
    19e5:	02 02 02 03 10 11                                   ......

000019eb <map_tank1_up_0>:
    19eb:	02 02 00 01 0e 0f                                   ......

000019f1 <map_none>:
    19f1:	01 01 27                                            ..'

000019f4 <map_metal_bl>:
    19f4:	01 01 09                                            ...

000019f7 <map_metal_tr>:
    19f7:	01 01 0b                                            ...

000019fa <map_metal_br>:
    19fa:	01 01 0a                                            ...

000019fd <map_metal_tl>:
    19fd:	01 01 09                                            ...

00001a00 <map_tile_exp_2>:
    1a00:	01 01 08                                            ...

00001a03 <map_tile_exp_1>:
    1a03:	01 01 07                                            ...

00001a06 <map_tile_exp_0>:
    1a06:	01 01 06                                            ...

00001a09 <map_rocket_itm>:
    1a09:	01 01 04                                            ...

00001a0c <map_explode_itm>:
    1a0c:	01 01 03                                            ...

00001a0f <map_speed_itm>:
    1a0f:	01 01 02                                            ...

00001a12 <map_metal>:
    1a12:	01 01 05                                            ...

00001a15 <map_brick>:
    1a15:	01 01 01                                            ...

00001a18 <map_splash>:
    1a18:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    1a28:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    1a38:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    1a48:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    1a58:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    1a68:	2a 00 00 2c 2d 2e                                   *..,-.

00001a6e <sprites_data>:
    1a6e:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    1a7e:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    1a8e:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    1a9e:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    1aae:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    1abe:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    1ace:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    1ade:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    1aee:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    1afe:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    1b0e:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    1b1e:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    1b2e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    1b3e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    1b4e:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    1b5e:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    1b6e:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    1b7e:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    1b8e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    1b9e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    1bae:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    1bbe:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    1bce:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    1bde:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    1bee:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    1bfe:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    1c0e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    1c1e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    1c2e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    1c3e:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    1c4e:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    1c5e:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    1c6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1c7e:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    1c8e:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    1c9e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    1cae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1cbe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    1cce:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    1cde:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    1cee:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    1cfe:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    1d0e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    1d1e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    1d2e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    1d3e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    1d4e:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    1d5e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    1d6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1d7e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    1d8e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    1d9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dbe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    1dce:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    1dde:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    1dee:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    1dfe:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    1e0e:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    1e1e:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    1e2e:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    1e3e:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    1e4e:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    1e5e:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    1e6e:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    1e7e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    1e8e:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    1e9e:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    1eae:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    1ebe:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    1ece:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    1ede:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    1eee:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    1efe:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    1f0e:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    1f1e:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    1f2e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    1f3e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    1f4e:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    1f5e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    1f6e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    1f7e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    1f8e:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    1f9e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    1fae:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    1fbe:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    1fce:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    1fde:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    1fee:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    1ffe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    200e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    201e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    202e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    203e:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    204e:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    205e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    206e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    207e:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    208e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    209e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    20ae:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    20be:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    20ce:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    20de:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    20ee:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    20fe:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    210e:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    211e:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    212e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    213e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    214e:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    215e:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    216e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    217e:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    218e:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    219e:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    21ae:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    21be:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    21ce:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    21de:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    21ee:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    21fe:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    220e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    221e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    222e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    223e:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    224e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    225e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    226e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    227e:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    228e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    229e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    22ae:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    22be:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    22ce:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    22de:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    22ee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    22fe:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    230e:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    231e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    232e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    233e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    234e:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    235e:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    236e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    237e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    238e:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    239e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23ae:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    23be:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    23ce:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    23de:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    23ee:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    23fe:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    240e:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    241e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    242e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    243e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    244e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    245e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    246e:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    247e:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    248e:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    249e:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    24ae:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    24be:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    24ce:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    24de:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    24ee:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    24fe:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    250e:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    251e:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    252e:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    253e:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    254e:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    255e:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    256e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    257e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    258e:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    259e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    25ae:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    25be:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    25ce:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    25de:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    25ee:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    25fe:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    260e:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    261e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    262e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    263e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    264e:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    265e:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

0000266e <tiles_data>:
	...
    26ae:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    26be:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    26ce:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    26de:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    26ee:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    26fe:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    270e:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    271e:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    272e:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    273e:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    274e:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    275e:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    276e:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    277e:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    278e:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    279e:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    27ae:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    27be:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    27ce:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    27de:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    27f6:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    2806:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    2816:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    282e:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    283e:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    284e:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    285e:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    2876:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    2896:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    28ae:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    28be:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    28ce:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    28de:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    28ee:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    28fe:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    290e:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    291e:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    292e:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    293e:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    294e:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    295e:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    296e:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    297e:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    298e:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    299e:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    29ae:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    29be:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    29ce:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    29de:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    29ee:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    29fe:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    2a0e:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    2a1e:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    2a2e:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    2a3e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2a4e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2a5e:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    2a6e:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    2a7e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2a8e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2a9e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    2aae:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    2abe:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    2ace:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    2ade:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    2aee:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    2afe:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2b0e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2b1e:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2b2e:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    2b3e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2b4e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    2b5e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    2b8e:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    2b9e:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    2bce:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    2bde:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2bee:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    2bfe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2c0e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2c1e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2c2e:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    2c3e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2c4e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2c5e:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    2c6e:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    2c7e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2c8e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2c9e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2cae:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    2cbe:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    2cce:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    2cde:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    2cee:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2cfe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2d0e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2d1e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2d2e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2d3e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2d4e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2d5e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2d6e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2d7e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    2d8e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2d9e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2dae:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    2dbe:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    2dee:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2dfe:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2e0e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2e1e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    2e2e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    2e3e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2e4e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2e5e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2e6e:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    2e7e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    2e8e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    2e9e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    2eae:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2ebe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2ece:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    2ede:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    2f16:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    2f26:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    2f36:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2f46:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2f56:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2f66:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    2f76:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2f86:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2f96:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    2fa6:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    2fb6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2fc6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2fd6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    2fe6:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    2ff6:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3006:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3016:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3026:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    3036:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    3046:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    3056:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    3066:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    3076:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    3086:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    30ae:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    30be:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    30ce:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    30de:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    30ee:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    30fe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    310e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    311e:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    312e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    313e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    314e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    315e:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    316e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    317e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    318e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    319e:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    31b6:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    31c6:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    31d6:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    31e6:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    31f6:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3206:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3216:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    3226:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    3276:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3286:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    329e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32b6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    32c6:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    32f6:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    3306:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3316:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    332e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    333e:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    334e:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    335e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3376:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    3386:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    3396:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    33ae:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    33be:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    33ce:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    33de:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    33f6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3406:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    343a:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    344a:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    345a:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    3476:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    3486:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3496:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    34b6:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    34c6:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    34d6:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    34f6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3506:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3516:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3556:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3566:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3586:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    35d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    35fa:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    360a:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    361a:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    3636:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3646:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    3656:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3676:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    3686:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3696:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    36b6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    36c6:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    36d6:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    36f6:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    3706:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    3716:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    373a:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    374a:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    375a:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    3776:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3786:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    3796:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    37b6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    37c6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    37d6:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    37f6:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    3806:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3816:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    3836:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3846:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3856:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3876:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3886:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    3896:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    38be:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    38d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    38fe:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3916:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3926:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    3936:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    3946:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    3956:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    397e:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3996:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    39ae:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    39be:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    39ce:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    39de:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39f6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3a06:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3a1e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a36:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3a46:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    3a56:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    3a76:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    3a86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3a96:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3ab6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3ac6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3ad6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    3af6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3b06:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3b16:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3b36:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    3b46:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3b56:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    3b76:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3b86:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3b96:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3bb6:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3bc6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3bd6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3bf6:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    3c06:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    3c16:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    3c36:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3c46:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3c56:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3c76:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3c86:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3c96:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3cba:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3cca:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    3cda:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    3cf6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    3d06:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    3d16:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3d36:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3d46:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    3d56:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    3d76:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    3d86:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    3d96:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    3db6:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    3dc6:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    3dd6:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    3df6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3e06:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3e16:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3e36:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3e46:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3e56:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    3e76:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3e86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3e96:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    3eb6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    3ec6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    3ed6:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3ef6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    3f06:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    3f16:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    3f36:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    3f46:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3f56:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3f76:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3f86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3f96:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    3fb6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3fc6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    3fd6:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    3ff6:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    4006:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    4016:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    4036:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4046:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    4056:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4076:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4086:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4096:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    40b6:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    40c6:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    40d6:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    40f6:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4106:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4116:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    4136:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4146:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    4156:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    4176:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4186:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4196:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    41ba:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    41ca:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    421e:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    4236:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4246:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4256:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    427e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    428e:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    429e:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    42b6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    42c6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    42d6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    42fe:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    430e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    431e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    433a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    434a:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    435a:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    437e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    438e:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    439e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    43ba:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    43ca:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    43da:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    43fe:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    440e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    441e:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    4436:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    4446:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4456:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    4476:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4486:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4496:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    44ba:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    44ca:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    44da:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    44ea:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    44fa:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    450a:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    451a:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    4536:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4546:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4556:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    457e:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    458e:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    459e:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    45be:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    45ce:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    45de:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    45fe:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    460e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    461e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    463e:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    464e:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    465e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    467e:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    468e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    469e:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    46be:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    46ce:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    46de:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    46fe:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    470e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    471e:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4736:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    4746:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4756:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    477e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    478e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    479e:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    47be:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    47ce:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    47de:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    47fe:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    480e:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    481e:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    483e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    484e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    485e:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    487e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    488e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    489e:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    48be:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    48ce:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    48de:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    48f6:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    4906:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    4916:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    492e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    493e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    494e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    495e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4976:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    4986:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    4996:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    49b2:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    49c2:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    49d2:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    49e2:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    49f2:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    4a02:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    4a12:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00004a2e <__ctors_end>:
    4a2e:	11 24       	eor	r1, r1
    4a30:	1f be       	out	0x3f, r1	; 63
    4a32:	cf ef       	ldi	r28, 0xFF	; 255
    4a34:	d0 e1       	ldi	r29, 0x10	; 16
    4a36:	de bf       	out	0x3e, r29	; 62
    4a38:	cd bf       	out	0x3d, r28	; 61

00004a3a <__do_copy_data>:
    4a3a:	11 e0       	ldi	r17, 0x01	; 1
    4a3c:	a0 e0       	ldi	r26, 0x00	; 0
    4a3e:	b1 e0       	ldi	r27, 0x01	; 1
    4a40:	ea ec       	ldi	r30, 0xCA	; 202
    4a42:	f7 e7       	ldi	r31, 0x77	; 119
    4a44:	02 c0       	rjmp	.+4      	; 0x4a4a <__do_copy_data+0x10>
    4a46:	05 90       	lpm	r0, Z+
    4a48:	0d 92       	st	X+, r0
    4a4a:	a6 35       	cpi	r26, 0x56	; 86
    4a4c:	b1 07       	cpc	r27, r17
    4a4e:	d9 f7       	brne	.-10     	; 0x4a46 <__do_copy_data+0xc>

00004a50 <__do_clear_bss>:
    4a50:	1e e0       	ldi	r17, 0x0E	; 14
    4a52:	a0 e6       	ldi	r26, 0x60	; 96
    4a54:	b1 e0       	ldi	r27, 0x01	; 1
    4a56:	01 c0       	rjmp	.+2      	; 0x4a5a <.do_clear_bss_start>

00004a58 <.do_clear_bss_loop>:
    4a58:	1d 92       	st	X+, r1

00004a5a <.do_clear_bss_start>:
    4a5a:	a2 39       	cpi	r26, 0x92	; 146
    4a5c:	b1 07       	cpc	r27, r17
    4a5e:	e1 f7       	brne	.-8      	; 0x4a58 <.do_clear_bss_loop>

00004a60 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    4a60:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    4a62:	88 e1       	ldi	r24, 0x18	; 24
    4a64:	0f b6       	in	r0, 0x3f	; 63
    4a66:	f8 94       	cli
    4a68:	80 93 60 00 	sts	0x0060, r24
    4a6c:	10 92 60 00 	sts	0x0060, r1
    4a70:	0f be       	out	0x3f, r0	; 63

00004a72 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    4a72:	0e 94 35 2a 	call	0x546a	; 0x546a <isEepromFormatted>
    4a76:	81 11       	cpse	r24, r1
    4a78:	02 c0       	rjmp	.+4      	; 0x4a7e <Initialize+0xc>
    4a7a:	0e 94 13 2a 	call	0x5426	; 0x5426 <FormatEeprom>

	cli();
    4a7e:	f8 94       	cli
    4a80:	e1 e8       	ldi	r30, 0x81	; 129
    4a82:	f8 e0       	ldi	r31, 0x08	; 8
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    4a84:	80 e8       	ldi	r24, 0x80	; 128
    4a86:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    4a88:	2a e0       	ldi	r18, 0x0A	; 10
    4a8a:	ed 38       	cpi	r30, 0x8D	; 141
    4a8c:	f2 07       	cpc	r31, r18
    4a8e:	d9 f7       	brne	.-10     	; 0x4a86 <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    4a90:	81 e8       	ldi	r24, 0x81	; 129
    4a92:	98 e0       	ldi	r25, 0x08	; 8
    4a94:	90 93 8e 0a 	sts	0x0A8E, r25
    4a98:	80 93 8d 0a 	sts	0x0A8D, r24
		mix_bank=0;
    4a9c:	10 92 8f 0a 	sts	0x0A8F, r1
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    4aa0:	10 92 92 0a 	sts	0x0A92, r1
    4aa4:	10 92 98 0a 	sts	0x0A98, r1
    4aa8:	10 92 9e 0a 	sts	0x0A9E, r1
    4aac:	10 92 a4 0a 	sts	0x0AA4, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    4ab0:	10 92 52 08 	sts	0x0852, r1
	sync_flags=0;
    4ab4:	10 92 54 08 	sts	0x0854, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    4ab8:	82 e1       	ldi	r24, 0x12	; 18
    4aba:	80 93 53 08 	sts	0x0853, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    4abe:	80 ee       	ldi	r24, 0xE0	; 224
    4ac0:	80 93 5c 08 	sts	0x085C, r24
	render_lines_count=FRAME_LINES;
    4ac4:	80 93 5a 08 	sts	0x085A, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    4ac8:	84 e1       	ldi	r24, 0x14	; 20
    4aca:	80 93 5b 08 	sts	0x085B, r24
	first_render_line=FIRST_RENDER_LINE;
    4ace:	80 93 59 08 	sts	0x0859, r24

	joypad1_status_hi=0;
    4ad2:	10 92 60 08 	sts	0x0860, r1
    4ad6:	10 92 5f 08 	sts	0x085F, r1
	joypad2_status_hi=0;
    4ada:	10 92 64 08 	sts	0x0864, r1
    4ade:	10 92 63 08 	sts	0x0863, r1
	sound_enabled=1;
    4ae2:	81 e0       	ldi	r24, 0x01	; 1
    4ae4:	80 93 91 0a 	sts	0x0A91, r24

	InitializeVideoMode();
    4ae8:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <InitializeVideoMode>
    4aec:	80 e7       	ldi	r24, 0x70	; 112
    4aee:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    4af0:	fc 01       	movw	r30, r24
    4af2:	25 91       	lpm	r18, Z+
    4af4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    4af6:	f9 01       	movw	r30, r18
    4af8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    4afa:	30 83       	st	Z, r19
    4afc:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    4afe:	20 e0       	ldi	r18, 0x00	; 0
    4b00:	8e 39       	cpi	r24, 0x9E	; 158
    4b02:	92 07       	cpc	r25, r18
    4b04:	a9 f7       	brne	.-22     	; 0x4af0 <Initialize+0x7e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    4b06:	78 94       	sei
	
	DisplayLogo();
    4b08:	0e 94 09 37 	call	0x6e12	; 0x6e12 <DisplayLogo>
    4b0c:	0e 94 71 3b 	call	0x76e2	; 0x76e2 <main>
    4b10:	0c 94 e3 3b 	jmp	0x77c6	; 0x77c6 <_exit>

00004b14 <__bad_interrupt>:
    4b14:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00004b18 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    4b18:	0c e0       	ldi	r16, 0x0C	; 12
    4b1a:	0a 95       	dec	r16
    4b1c:	f1 f7       	brne	.-4      	; 0x4b1a <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    4b1e:	ec e1       	ldi	r30, 0x1C	; 28
		ldi ZH,hi8(ram_tiles_restore);
    4b20:	f8 e0       	ldi	r31, 0x08	; 8

		ldi YL,lo8(vram)
    4b22:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    4b24:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    4b26:	20 91 29 0b 	lds	r18, 0x0B29


		clr r16
    4b2a:	00 27       	eor	r16, r16

00004b2c <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    4b2c:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    4b2e:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    4b30:	ac 0f       	add	r26, r28
		adc XH,YH
    4b32:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    4b34:	1c 91       	ld	r17, X
		std Z+2,r17
    4b36:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    4b38:	02 17       	cp	r16, r18
		brsh noov
    4b3a:	08 f4       	brcc	.+2      	; 0x4b3e <noov>
		mov r17,r16
    4b3c:	10 2f       	mov	r17, r16

00004b3e <noov>:
	noov:
		st X,r17
    4b3e:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    4b40:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    4b42:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    4b44:	0d 30       	cpi	r16, 0x0D	; 13
		brlo upd_loop ;23
    4b46:	90 f3       	brcs	.-28     	; 0x4b2c <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    4b48:	00 e3       	ldi	r16, 0x30	; 48

00004b4a <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    4b4a:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    4b4c:	1a 95       	dec	r17
		brne .-4
    4b4e:	f1 f7       	brne	.-4      	; 0x4b4c <wait_loop+0x2>

		dec r16
    4b50:	0a 95       	dec	r16
		brne wait_loop
    4b52:	d9 f7       	brne	.-10     	; 0x4b4a <wait_loop>

		lds r2,overlay_tile_table
    4b54:	20 90 4f 08 	lds	r2, 0x084F
		lds r3,overlay_tile_table+1
    4b58:	30 90 50 08 	lds	r3, 0x0850
		lds r16,tile_table_lo 
    4b5c:	00 91 4b 08 	lds	r16, 0x084B
		lds r17,tile_table_hi
    4b60:	10 91 4c 08 	lds	r17, 0x084C
		movw r12,r16
    4b64:	68 01       	movw	r12, r16
		movw r6,r16
    4b66:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    4b68:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    4b6a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    4b6c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    4b6e:	4e 01       	movw	r8, r28
		clr r0
    4b70:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    4b72:	30 91 4e 08 	lds	r19, 0x084E
		cpi r19,0
    4b76:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    4b78:	09 f0       	breq	.+2      	; 0x4b7c <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    4b7a:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    4b7e:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    4b80:	09 f0       	breq	.+2      	; 0x4b84 <wait_loop+0x3a>
		mov r24,r19
    4b82:	83 2f       	mov	r24, r19

		breq .+2
    4b84:	09 f0       	breq	.+2      	; 0x4b88 <wait_loop+0x3e>
		movw r12,r2
    4b86:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    4b88:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    4b8a:	a0 2e       	mov	r10, r16
		clr r22
    4b8c:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    4b8e:	78 e0       	ldi	r23, 0x08	; 8

00004b90 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    4b90:	7e d2       	rcall	.+1276   	; 0x508e <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    4b92:	36 e2       	ldi	r19, 0x26	; 38
    4b94:	3a 95       	dec	r19
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <next_tile_line+0x4>
    4b98:	00 00       	nop

		;***draw line***
		call render_tile_line
    4b9a:	0e 94 fe 25 	call	0x4bfc	; 0x4bfc <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    4b9e:	3f e0       	ldi	r19, 0x0F	; 15
    4ba0:	3a 95       	dec	r19
    4ba2:	f1 f7       	brne	.-4      	; 0x4ba0 <next_tile_line+0x10>
    4ba4:	00 00       	nop
    4ba6:	00 00       	nop

		dec r10
    4ba8:	aa 94       	dec	r10
		breq frame_end
    4baa:	a9 f0       	breq	.+42     	; 0x4bd6 <frame_end>
	
		inc r22
    4bac:	63 95       	inc	r22
		lpm ;3 nop
    4bae:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    4bb0:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    4bb2:	31 f0       	breq	.+12     	; 0x4bc0 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    4bb4:	33 e0       	ldi	r19, 0x03	; 3
    4bb6:	3a 95       	dec	r19
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <next_tile_line+0x26>
    4bba:	00 00       	nop
    4bbc:	00 00       	nop
		
		rjmp next_tile_line	
    4bbe:	e8 cf       	rjmp	.-48     	; 0x4b90 <next_tile_line>

00004bc0 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    4bc0:	66 27       	eor	r22, r22

		clr r0
    4bc2:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    4bc4:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    4bc6:	c3 0f       	add	r28, r19
		adc YH,r0
    4bc8:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    4bca:	8a 95       	dec	r24
		brne .+2
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <next_tile_row+0x10>
		movw YL,r8	;main vram
    4bce:	e4 01       	movw	r28, r8
		brne .+2
    4bd0:	09 f4       	brne	.+2      	; 0x4bd4 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    4bd2:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    4bd4:	dd cf       	rjmp	.-70     	; 0x4b90 <next_tile_line>

00004bd6 <frame_end>:

	frame_end:

		WAIT r19,18
    4bd6:	36 e0       	ldi	r19, 0x06	; 6
    4bd8:	3a 95       	dec	r19
    4bda:	f1 f7       	brne	.-4      	; 0x4bd8 <frame_end+0x2>

		rcall hsync_pulse ;145
    4bdc:	58 d2       	rcall	.+1200   	; 0x508e <hsync_pulse>
	
		clr r1
    4bde:	11 24       	eor	r1, r1
		call RestoreBackground
    4be0:	0e 94 00 35 	call	0x6a00	; 0x6a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    4be4:	e0 91 54 08 	lds	r30, 0x0854
		ldi r20,SYNC_FLAG_FIELD
    4be8:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    4bea:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    4bec:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    4bee:	e0 93 54 08 	sts	0x0854, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    4bf2:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    4bf4:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    4bf8:	11 24       	eor	r1, r1


		ret
    4bfa:	08 95       	ret

00004bfc <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    4bfc:	de 01       	movw	r26, r28

		mul r22,r23
    4bfe:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    4c00:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4c02:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    4c04:	13 40       	sbci	r17, 0x03	; 3

		add r16,r0
    4c06:	00 0d       	add	r16, r0
		adc r17,r1
    4c08:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    4c0a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    4c0c:	0c ed       	ldi	r16, 0xDC	; 220
		ldi r17,hi8(ram_tiles)
    4c0e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    4c10:	00 0d       	add	r16, r0
		adc r17,r1
    4c12:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    4c14:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    4c16:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    4c18:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    4c1a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    4c1c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    4c1e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    4c20:	2d 30       	cpi	r18, 0x0D	; 13
		brcc .+2
    4c22:	08 f4       	brcc	.+2      	; 0x4c26 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    4c24:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    4c26:	04 0e       	add	r0, r20
	    adc r1,r21
    4c28:	15 1e       	adc	r1, r21

		movw ZL,r0
    4c2a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    4c2c:	2d 30       	cpi	r18, 0x0D	; 13
		brcs ramloop
    4c2e:	f0 f0       	brcs	.+60     	; 0x4c6c <ramloop>

00004c30 <romloop>:
	

	romloop:
	    lpm r16,Z+
    4c30:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4c32:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    4c34:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    4c36:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    4c38:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4c3a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    4c3c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    4c3e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    4c40:	2d 30       	cpi	r18, 0x0D	; 13
		nop
    4c42:	00 00       	nop

	    lpm r16,Z+
    4c44:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4c46:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    4c48:	08 f4       	brcc	.+2      	; 0x4c4c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    4c4a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    4c4c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    4c4e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    4c50:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    4c52:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    4c54:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    4c56:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    4c58:	2d 30       	cpi	r18, 0x0D	; 13
		dec r17			;decrement tiles to draw on line
    4c5a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    4c5c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    4c5e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    4c60:	05 91       	lpm	r16, Z+

		breq end	
    4c62:	31 f1       	breq	.+76     	; 0x4cb0 <end>
	    movw ZL,r0   	;copy next tile adress
    4c64:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4c66:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    4c68:	18 f7       	brcc	.-58     	; 0x4c30 <romloop>
	
		rjmp .
    4c6a:	00 c0       	rjmp	.+0      	; 0x4c6c <ramloop>

00004c6c <ramloop>:

	ramloop:

	    ld r16,Z+
    4c6c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    4c6e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    4c70:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    4c72:	01 91       	ld	r16, Z+
		nop   
    4c74:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    4c76:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    4c78:	23 9f       	mul	r18, r19


	    ld r16,Z+
    4c7a:	01 91       	ld	r16, Z+
		nop
    4c7c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    4c7e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    4c80:	2d 30       	cpi	r18, 0x0D	; 13
   		rjmp .
    4c82:	00 c0       	rjmp	.+0      	; 0x4c84 <ramloop+0x18>

	    ld r16,Z+
    4c84:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    4c86:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    4c88:	08 f0       	brcs	.+2      	; 0x4c8c <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    4c8a:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    4c8c:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    4c8e:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    4c90:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    4c92:	15 1e       	adc	r1, r21
		rjmp .
    4c94:	00 c0       	rjmp	.+0      	; 0x4c96 <ramloop+0x2a>
    
		ld r16,Z+		
    4c96:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    4c98:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    4c9a:	2d 30       	cpi	r18, 0x0D	; 13
		rjmp .  
    4c9c:	00 c0       	rjmp	.+0      	; 0x4c9e <ramloop+0x32>

	    ld r16,Z+	
    4c9e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    4ca0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    4ca2:	01 91       	ld	r16, Z+

	    dec r17
    4ca4:	1a 95       	dec	r17
	    breq end
    4ca6:	21 f0       	breq	.+8      	; 0x4cb0 <end>
	
		movw ZL,r0
    4ca8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    4caa:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    4cac:	08 f6       	brcc	.-126    	; 0x4c30 <romloop>
		rjmp ramloop
    4cae:	de cf       	rjmp	.-68     	; 0x4c6c <ramloop>

00004cb0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    4cb0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    4cb2:	00 27       	eor	r16, r16
		lpm	
    4cb4:	c8 95       	lpm
		nop
    4cb6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    4cb8:	08 b9       	out	0x08, r16	; 8

		ret
    4cba:	08 95       	ret

00004cbc <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    4cbc:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    4cbe:	e0 91 4b 08 	lds	r30, 0x084B
	lds ZH,tile_table_hi
    4cc2:	f0 91 4c 08 	lds	r31, 0x084C
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    4cc6:	8d 50       	subi	r24, 0x0D	; 13
	mul r24,r18
    4cc8:	82 9f       	mul	r24, r18
	add ZL,r0
    4cca:	e0 0d       	add	r30, r0
	adc ZH,r1
    4ccc:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    4cce:	ac ed       	ldi	r26, 0xDC	; 220
	ldi XH,hi8(ram_tiles)
    4cd0:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    4cd2:	62 9f       	mul	r22, r18
	add XL,r0
    4cd4:	a0 0d       	add	r26, r0
	adc XH,r1
    4cd6:	b1 1d       	adc	r27, r1

	clr r0
    4cd8:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    4cda:	05 90       	lpm	r0, Z+
    4cdc:	0d 92       	st	X+, r0
    4cde:	05 90       	lpm	r0, Z+
    4ce0:	0d 92       	st	X+, r0
    4ce2:	05 90       	lpm	r0, Z+
    4ce4:	0d 92       	st	X+, r0
    4ce6:	05 90       	lpm	r0, Z+
    4ce8:	0d 92       	st	X+, r0
    4cea:	05 90       	lpm	r0, Z+
    4cec:	0d 92       	st	X+, r0
    4cee:	05 90       	lpm	r0, Z+
    4cf0:	0d 92       	st	X+, r0
    4cf2:	05 90       	lpm	r0, Z+
    4cf4:	0d 92       	st	X+, r0
    4cf6:	05 90       	lpm	r0, Z+
    4cf8:	0d 92       	st	X+, r0
    4cfa:	05 90       	lpm	r0, Z+
    4cfc:	0d 92       	st	X+, r0
    4cfe:	05 90       	lpm	r0, Z+
    4d00:	0d 92       	st	X+, r0
    4d02:	05 90       	lpm	r0, Z+
    4d04:	0d 92       	st	X+, r0
    4d06:	05 90       	lpm	r0, Z+
    4d08:	0d 92       	st	X+, r0
    4d0a:	05 90       	lpm	r0, Z+
    4d0c:	0d 92       	st	X+, r0
    4d0e:	05 90       	lpm	r0, Z+
    4d10:	0d 92       	st	X+, r0
    4d12:	05 90       	lpm	r0, Z+
    4d14:	0d 92       	st	X+, r0
    4d16:	05 90       	lpm	r0, Z+
    4d18:	0d 92       	st	X+, r0
    4d1a:	05 90       	lpm	r0, Z+
    4d1c:	0d 92       	st	X+, r0
    4d1e:	05 90       	lpm	r0, Z+
    4d20:	0d 92       	st	X+, r0
    4d22:	05 90       	lpm	r0, Z+
    4d24:	0d 92       	st	X+, r0
    4d26:	05 90       	lpm	r0, Z+
    4d28:	0d 92       	st	X+, r0
    4d2a:	05 90       	lpm	r0, Z+
    4d2c:	0d 92       	st	X+, r0
    4d2e:	05 90       	lpm	r0, Z+
    4d30:	0d 92       	st	X+, r0
    4d32:	05 90       	lpm	r0, Z+
    4d34:	0d 92       	st	X+, r0
    4d36:	05 90       	lpm	r0, Z+
    4d38:	0d 92       	st	X+, r0
    4d3a:	05 90       	lpm	r0, Z+
    4d3c:	0d 92       	st	X+, r0
    4d3e:	05 90       	lpm	r0, Z+
    4d40:	0d 92       	st	X+, r0
    4d42:	05 90       	lpm	r0, Z+
    4d44:	0d 92       	st	X+, r0
    4d46:	05 90       	lpm	r0, Z+
    4d48:	0d 92       	st	X+, r0
    4d4a:	05 90       	lpm	r0, Z+
    4d4c:	0d 92       	st	X+, r0
    4d4e:	05 90       	lpm	r0, Z+
    4d50:	0d 92       	st	X+, r0
    4d52:	05 90       	lpm	r0, Z+
    4d54:	0d 92       	st	X+, r0
    4d56:	05 90       	lpm	r0, Z+
    4d58:	0d 92       	st	X+, r0
    4d5a:	05 90       	lpm	r0, Z+
    4d5c:	0d 92       	st	X+, r0
    4d5e:	05 90       	lpm	r0, Z+
    4d60:	0d 92       	st	X+, r0
    4d62:	05 90       	lpm	r0, Z+
    4d64:	0d 92       	st	X+, r0
    4d66:	05 90       	lpm	r0, Z+
    4d68:	0d 92       	st	X+, r0
    4d6a:	05 90       	lpm	r0, Z+
    4d6c:	0d 92       	st	X+, r0
    4d6e:	05 90       	lpm	r0, Z+
    4d70:	0d 92       	st	X+, r0
    4d72:	05 90       	lpm	r0, Z+
    4d74:	0d 92       	st	X+, r0
    4d76:	05 90       	lpm	r0, Z+
    4d78:	0d 92       	st	X+, r0
    4d7a:	05 90       	lpm	r0, Z+
    4d7c:	0d 92       	st	X+, r0
    4d7e:	05 90       	lpm	r0, Z+
    4d80:	0d 92       	st	X+, r0
    4d82:	05 90       	lpm	r0, Z+
    4d84:	0d 92       	st	X+, r0
    4d86:	05 90       	lpm	r0, Z+
    4d88:	0d 92       	st	X+, r0
    4d8a:	05 90       	lpm	r0, Z+
    4d8c:	0d 92       	st	X+, r0
    4d8e:	05 90       	lpm	r0, Z+
    4d90:	0d 92       	st	X+, r0
    4d92:	05 90       	lpm	r0, Z+
    4d94:	0d 92       	st	X+, r0
    4d96:	05 90       	lpm	r0, Z+
    4d98:	0d 92       	st	X+, r0
    4d9a:	05 90       	lpm	r0, Z+
    4d9c:	0d 92       	st	X+, r0
    4d9e:	05 90       	lpm	r0, Z+
    4da0:	0d 92       	st	X+, r0
    4da2:	05 90       	lpm	r0, Z+
    4da4:	0d 92       	st	X+, r0
    4da6:	05 90       	lpm	r0, Z+
    4da8:	0d 92       	st	X+, r0
    4daa:	05 90       	lpm	r0, Z+
    4dac:	0d 92       	st	X+, r0
    4dae:	05 90       	lpm	r0, Z+
    4db0:	0d 92       	st	X+, r0
    4db2:	05 90       	lpm	r0, Z+
    4db4:	0d 92       	st	X+, r0
    4db6:	05 90       	lpm	r0, Z+
    4db8:	0d 92       	st	X+, r0
    4dba:	05 90       	lpm	r0, Z+
    4dbc:	0d 92       	st	X+, r0
    4dbe:	05 90       	lpm	r0, Z+
    4dc0:	0d 92       	st	X+, r0
    4dc2:	05 90       	lpm	r0, Z+
    4dc4:	0d 92       	st	X+, r0
    4dc6:	05 90       	lpm	r0, Z+
    4dc8:	0d 92       	st	X+, r0
    4dca:	05 90       	lpm	r0, Z+
    4dcc:	0d 92       	st	X+, r0
    4dce:	05 90       	lpm	r0, Z+
    4dd0:	0d 92       	st	X+, r0
    4dd2:	05 90       	lpm	r0, Z+
    4dd4:	0d 92       	st	X+, r0
    4dd6:	05 90       	lpm	r0, Z+
    4dd8:	0d 92       	st	X+, r0


	clr r1
    4dda:	11 24       	eor	r1, r1
	ret
    4ddc:	08 95       	ret

00004dde <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    4dde:	0f 93       	push	r16
	push r17
    4de0:	1f 93       	push	r17
	push YL
    4de2:	cf 93       	push	r28
	push YH
    4de4:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    4de6:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    4de8:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    4dea:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    4dec:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    4dee:	e0 0d       	add	r30, r0
	adc ZH,r1
    4df0:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    4df2:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    4df4:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    4df6:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    4df8:	8e 9f       	mul	r24, r30
	movw r26,r0
    4dfa:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    4dfc:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    4dfe:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    4e00:	c3 e4       	ldi	r28, 0x43	; 67
	ldi YH,hi8(sprites_tile_banks)	
    4e02:	d8 e0       	ldi	r29, 0x08	; 8
	clr r0
    4e04:	00 24       	eor	r0, r0
	add YL,r1
    4e06:	c1 0d       	add	r28, r1
	adc YH,r0		
    4e08:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    4e0a:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    4e0c:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    4e0e:	ea 0f       	add	r30, r26
	adc ZH,r27
    4e10:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    4e12:	ac ed       	ldi	r26, 0xDC	; 220
	ldi XH,hi8(ram_tiles)
    4e14:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    4e16:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    4e18:	69 9f       	mul	r22, r25
	add XL,r0
    4e1a:	a0 0d       	add	r26, r0
	adc XH,r1
    4e1c:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    4e1e:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    4e20:	dd 27       	eor	r29, r29

	cpi r20,0	
    4e22:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    4e24:	51 f4       	brne	.+20     	; 0x4e3a <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    4e26:	a2 0f       	add	r26, r18
	adc XH,r1
    4e28:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    4e2a:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    4e2c:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    4e2e:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    4e30:	11 c0       	rjmp	.+34     	; 0x4e54 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    4e32:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    4e34:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    4e36:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    4e38:	0d c0       	rjmp	.+26     	; 0x4e54 <x_check_end>

00004e3a <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    4e3a:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    4e3c:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    4e3e:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    4e40:	04 c0       	rjmp	.+8      	; 0x4e4a <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    4e42:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    4e44:	e8 0f       	add	r30, r24
	adc ZH,r1	
    4e46:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    4e48:	05 c0       	rjmp	.+10     	; 0x4e54 <x_check_end>

00004e4a <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    4e4a:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    4e4c:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    4e4e:	e2 0f       	add	r30, r18
	adc ZH,r1
    4e50:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    4e52:	31 97       	sbiw	r30, 0x01	; 1

00004e54 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    4e54:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    4e56:	41 f4       	brne	.+16     	; 0x4e68 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    4e58:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    4e5a:	93 9f       	mul	r25, r19
	add XL,r0
    4e5c:	a0 0d       	add	r26, r0
	adc XH,r1
    4e5e:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    4e60:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    4e62:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    4e64:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    4e66:	0a c0       	rjmp	.+20     	; 0x4e7c <y_check_end>

00004e68 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    4e68:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    4e6a:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    4e6c:	63 2f       	mov	r22, r19
	dec r22
    4e6e:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    4e70:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    4e72:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    4e74:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    4e76:	56 9f       	mul	r21, r22
	add ZL,r0
    4e78:	e0 0d       	add	r30, r0
	adc ZH,r1	
    4e7a:	f1 1d       	adc	r31, r1

00004e7c <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    4e7c:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    4e7e:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    4e80:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    4e82:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    4e84:	00 ff       	sbrs	r16, 0
	clr r23
    4e86:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    4e88:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    4e8a:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    4e8c:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    4e8e:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    4e90:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    4e92:	59 1b       	sub	r21, r25

00004e94 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    4e94:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    4e96:	48 1b       	sub	r20, r24

00004e98 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    4e98:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    4e9a:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    4e9c:	2c 93       	st	X, r18
	adiw XL,1
    4e9e:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    4ea0:	e6 0f       	add	r30, r22
	adc ZH,r23
    4ea2:	f7 1f       	adc	r31, r23
	dec r20
    4ea4:	4a 95       	dec	r20
	brne x_loop
    4ea6:	c1 f7       	brne	.-16     	; 0x4e98 <x_loop>

	add ZL,YL		;src+=srcXdiff
    4ea8:	ec 0f       	add	r30, r28
	adc ZH,YH
    4eaa:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    4eac:	a8 0f       	add	r26, r24
	adc XH,r1
    4eae:	b1 1d       	adc	r27, r1
	dec r21
    4eb0:	5a 95       	dec	r21
	brne y_loop
    4eb2:	81 f7       	brne	.-32     	; 0x4e94 <y_loop>


	pop YH
    4eb4:	df 91       	pop	r29
	pop YL
    4eb6:	cf 91       	pop	r28
	pop r17
    4eb8:	1f 91       	pop	r17
	pop r16
    4eba:	0f 91       	pop	r16
	ret
    4ebc:	08 95       	ret

00004ebe <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    4ebe:	0f 92       	push	r0
	push r1
    4ec0:	1f 92       	push	r1
	push ZL;2
    4ec2:	ef 93       	push	r30
	push ZH;2
    4ec4:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4ec6:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4ec8:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4eca:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    4ece:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    4ed0:	f1 e0       	ldi	r31, 0x01	; 1

00004ed2 <latency_loop>:
latency_loop:
	cp ZL,ZH
    4ed2:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    4ed4:	00 f0       	brcs	.+0      	; 0x4ed6 <latency_loop+0x4>
	inc ZH
    4ed6:	f3 95       	inc	r31
	cpi ZH,10
    4ed8:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    4eda:	d8 f3       	brcs	.-10     	; 0x4ed2 <latency_loop>
	jmp .
    4edc:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    4ee0:	e0 91 53 08 	lds	r30, 0x0853
	dec ZL
    4ee4:	ea 95       	dec	r30
	sts sync_pulse,ZL
    4ee6:	e0 93 53 08 	sts	0x0853, r30

	;process sync phases
	lds ZH,sync_phase
    4eea:	f0 91 52 08 	lds	r31, 0x0852
	sbrc ZH,0
    4eee:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    4ef0:	57 c0       	rjmp	.+174    	; 0x4fa0 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    4ef2:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    4ef4:	98 f0       	brcs	.+38     	; 0x4f1c <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    4ef6:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    4ef8:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    4efc:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    4efe:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    4f02:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    4f04:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    4f06:	26 f4       	brtc	.+8      	; 0x4f10 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    4f08:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4f0a:	0e 94 45 29 	call	0x528a	; 0x528a <update_sound>
	rjmp sync_end
    4f0e:	b8 c0       	rjmp	.+368    	; 0x5080 <sync_end>

00004f10 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    4f10:	e5 e1       	ldi	r30, 0x15	; 21
    4f12:	ea 95       	dec	r30
    4f14:	f1 f7       	brne	.-4      	; 0x4f12 <sync_pre_eq_no_sound_update+0x2>
    4f16:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    4f18:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    4f1a:	b2 c0       	rjmp	.+356    	; 0x5080 <sync_end>

00004f1c <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    4f1c:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    4f1e:	38 f1       	brcs	.+78     	; 0x4f6e <sync_post_eq>

	rjmp .
    4f20:	00 c0       	rjmp	.+0      	; 0x4f22 <sync_eq+0x6>
	rjmp .
    4f22:	00 c0       	rjmp	.+0      	; 0x4f24 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4f24:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    4f26:	e0 fb       	bst	r30, 0
	ldi ZL,4
    4f28:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    4f2a:	16 f4       	brtc	.+4      	; 0x4f30 <sync_eq_skip>
	
	call update_sound
    4f2c:	0e 94 45 29 	call	0x528a	; 0x528a <update_sound>

00004f30 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    4f30:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    4f32:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    4f36:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    4f38:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    4f3c:	a1 c0       	rjmp	.+322    	; 0x5080 <sync_end>

00004f3e <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    4f3e:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    4f40:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    4f42:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    4f44:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    4f48:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    4f4a:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    4f4c:	00 f0       	brcs	.+0      	; 0x4f4e <__vector_14+0x10>

	cpi ZL,2
    4f4e:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    4f50:	00 f0       	brcs	.+0      	; 0x4f52 <__vector_14+0x14>

	cpi ZL,3
    4f52:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    4f54:	00 f0       	brcs	.+0      	; 0x4f56 <__vector_14+0x18>

	cpi ZL,4
    4f56:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    4f58:	00 f0       	brcs	.+0      	; 0x4f5a <__vector_14+0x1c>

	cpi ZL,5
    4f5a:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    4f5c:	00 f0       	brcs	.+0      	; 0x4f5e <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    4f5e:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    4f60:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    4f62:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    4f66:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    4f68:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    4f6a:	ef 91       	pop	r30
	reti
    4f6c:	18 95       	reti

00004f6e <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    4f6e:	00 c0       	rjmp	.+0      	; 0x4f70 <sync_post_eq+0x2>

	bst ZL,0
    4f70:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4f72:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    4f74:	26 f4       	brtc	.+8      	; 0x4f7e <sync_post_eq_no_sound_update>
	ldi ZL,1	
    4f76:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    4f78:	0e 94 45 29 	call	0x528a	; 0x528a <update_sound>
	rjmp sync_pre_eq_cont
    4f7c:	05 c0       	rjmp	.+10     	; 0x4f88 <sync_pre_eq_cont>

00004f7e <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    4f7e:	e5 e1       	ldi	r30, 0x15	; 21
    4f80:	ea 95       	dec	r30
    4f82:	f1 f7       	brne	.-4      	; 0x4f80 <sync_post_eq_no_sound_update+0x2>
    4f84:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    4f86:	28 9a       	sbi	0x05, 0	; 5

00004f88 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    4f88:	e0 91 53 08 	lds	r30, 0x0853
	cpi ZL,0
    4f8c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    4f8e:	09 f0       	breq	.+2      	; 0x4f92 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    4f90:	77 c0       	rjmp	.+238    	; 0x5080 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    4f92:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    4f94:	e0 93 53 08 	sts	0x0853, r30
	ldi ZL,1
    4f98:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    4f9a:	e0 93 52 08 	sts	0x0852, r30
	
	rjmp sync_end
    4f9e:	70 c0       	rjmp	.+224    	; 0x5080 <sync_end>

00004fa0 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    4fa0:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    4fa2:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    4fa6:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    4fa8:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    4fac:	00 c0       	rjmp	.+0      	; 0x4fae <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    4fae:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    4fb0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    4fb2:	00 c0       	rjmp	.+0      	; 0x4fb4 <sync_hsync+0x14>
	call update_sound
    4fb4:	0e 94 45 29 	call	0x528a	; 0x528a <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    4fb8:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4fba:	00 90 59 08 	lds	r0, 0x0859
	sub ZH,r0				
    4fbe:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    4fc0:	e0 91 53 08 	lds	r30, 0x0853
	cp ZL,ZH
    4fc4:	ef 17       	cp	r30, r31
	brsh no_render
    4fc6:	e0 f4       	brcc	.+56     	; 0x5000 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    4fc8:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    4fca:	00 90 59 08 	lds	r0, 0x0859
	sub ZH,r0				
    4fce:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    4fd0:	00 90 5a 08 	lds	r0, 0x085A
	sub ZH,r0			
    4fd4:	f0 19       	sub	r31, r0
	cp ZL,ZH
    4fd6:	ef 17       	cp	r30, r31
	brlo no_render
    4fd8:	98 f0       	brcs	.+38     	; 0x5000 <no_render>

	;push r1-r29
	ldi ZL,29
    4fda:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    4fdc:	ff 27       	eor	r31, r31

00004fde <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    4fde:	00 80       	ld	r0, Z
	push r0
    4fe0:	0f 92       	push	r0
	dec ZL
    4fe2:	ea 95       	dec	r30
	brne push_loop	
    4fe4:	e1 f7       	brne	.-8      	; 0x4fde <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    4fe6:	0f e1       	ldi	r16, 0x1F	; 31
    4fe8:	0a 95       	dec	r16
    4fea:	f1 f7       	brne	.-4      	; 0x4fe8 <push_loop+0xa>
    4fec:	00 00       	nop
    4fee:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    4ff0:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    4ff4:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    4ff6:	ff 27       	eor	r31, r31

00004ff8 <pop_loop>:
pop_loop:
	pop r0
    4ff8:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    4ffa:	01 92       	st	Z+, r0
	cpi ZL,30
    4ffc:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    4ffe:	e0 f3       	brcs	.-8      	; 0x4ff8 <pop_loop>

00005000 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    5000:	e0 91 53 08 	lds	r30, 0x0853
	cpi ZL,0
    5004:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    5006:	09 f0       	breq	.+2      	; 0x500a <no_render+0xa>
	rjmp sync_end
    5008:	3b c0       	rjmp	.+118    	; 0x5080 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    500a:	2f 93       	push	r18
	push r19
    500c:	3f 93       	push	r19
	push r20
    500e:	4f 93       	push	r20
	push r21
    5010:	5f 93       	push	r21
	push r22
    5012:	6f 93       	push	r22
	push r23
    5014:	7f 93       	push	r23
	push r24
    5016:	8f 93       	push	r24
	push r25
    5018:	9f 93       	push	r25
	push r26
    501a:	af 93       	push	r26
	push r27
    501c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    501e:	78 94       	sei
	clr r1
    5020:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    5022:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    5024:	e0 93 52 08 	sts	0x0852, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    5028:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    502a:	e0 93 53 08 	sts	0x0853, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    502e:	f0 91 5b 08 	lds	r31, 0x085B
	sts first_render_line,ZH
    5032:	f0 93 59 08 	sts	0x0859, r31
	
	lds ZH,render_lines_count_tmp
    5036:	f0 91 5c 08 	lds	r31, 0x085C
	sts render_lines_count,ZH
    503a:	f0 93 5a 08 	sts	0x085A, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    503e:	e0 91 55 08 	lds	r30, 0x0855
	lds ZH,pre_vsync_user_callback+1
    5042:	f0 91 56 08 	lds	r31, 0x0856
	cp  ZL,r1
    5046:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5048:	f1 05       	cpc	r31, r1
	breq .+2 
    504a:	09 f0       	breq	.+2      	; 0x504e <no_render+0x4e>
	icall
    504c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    504e:	0e 94 03 2a 	call	0x5406	; 0x5406 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    5052:	0e 94 8f 37 	call	0x6f1e	; 0x6f1e <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    5056:	0e 94 52 28 	call	0x50a4	; 0x50a4 <process_music>
	clr r1
    505a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    505c:	e0 91 57 08 	lds	r30, 0x0857
	lds ZH,post_vsync_user_callback+1
    5060:	f0 91 58 08 	lds	r31, 0x0858
	cp  ZL,r1
    5064:	e1 15       	cp	r30, r1
	cpc ZH,r1
    5066:	f1 05       	cpc	r31, r1
	breq .+2 
    5068:	09 f0       	breq	.+2      	; 0x506c <no_render+0x6c>
	icall
    506a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    506c:	bf 91       	pop	r27
	pop r26
    506e:	af 91       	pop	r26
	pop r25
    5070:	9f 91       	pop	r25
	pop r24
    5072:	8f 91       	pop	r24
	pop r23
    5074:	7f 91       	pop	r23
	pop r22
    5076:	6f 91       	pop	r22
	pop r21
    5078:	5f 91       	pop	r21
	pop r20
    507a:	4f 91       	pop	r20
	pop r19
    507c:	3f 91       	pop	r19
	pop r18
    507e:	2f 91       	pop	r18

00005080 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    5080:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    5082:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    5084:	ff 91       	pop	r31
	pop ZL
    5086:	ef 91       	pop	r30
	pop r1
    5088:	1f 90       	pop	r1
	pop r0
    508a:	0f 90       	pop	r0
	reti
    508c:	18 95       	reti

0000508e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    508e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    5090:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    5092:	00 c0       	rjmp	.+0      	; 0x5094 <hsync_pulse+0x6>
	call update_sound
    5094:	0e 94 45 29 	call	0x528a	; 0x528a <update_sound>

	lds ZL,sync_pulse
    5098:	e0 91 53 08 	lds	r30, 0x0853
	dec ZL
    509c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    509e:	e0 93 53 08 	sts	0x0853, r30

	ret
    50a2:	08 95       	ret

000050a4 <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    50a4:	e0 91 91 0a 	lds	r30, 0x0A91
	sbrc ZL,0
    50a8:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    50aa:	0e 94 a6 2c 	call	0x594c	; 0x594c <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    50ae:	00 90 8f 0a 	lds	r0, 0x0A8F
	tst r0
    50b2:	00 20       	and	r0, r0
	brne set_hi_bank
    50b4:	19 f4       	brne	.+6      	; 0x50bc <set_hi_bank>
	ldi XL,lo8(mix_buf)
    50b6:	a1 e8       	ldi	r26, 0x81	; 129
	ldi XH,hi8(mix_buf)
    50b8:	b8 e0       	ldi	r27, 0x08	; 8
	rjmp end_set_bank
    50ba:	02 c0       	rjmp	.+4      	; 0x50c0 <end_set_bank>

000050bc <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    50bc:	a7 e8       	ldi	r26, 0x87	; 135
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    50be:	b9 e0       	ldi	r27, 0x09	; 9

000050c0 <end_set_bank>:
end_set_bank:

	ldi r18,1
    50c0:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    50c2:	02 26       	eor	r0, r18
	sts mix_bank,r0
    50c4:	00 92 8f 0a 	sts	0x0A8F, r0
	
	ldi r18,2
    50c8:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    50ca:	20 93 90 0a 	sts	0x0A90, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    50ce:	e0 91 91 0a 	lds	r30, 0x0A91
	sbrs ZL,0
    50d2:	e0 ff       	sbrs	r30, 0
	ret
    50d4:	08 95       	ret

	push r2
    50d6:	2f 92       	push	r2
	push r3
    50d8:	3f 92       	push	r3
	push r4
    50da:	4f 92       	push	r4
	push r5
    50dc:	5f 92       	push	r5
	push r6
    50de:	6f 92       	push	r6
	push r7
    50e0:	7f 92       	push	r7
	push r8
    50e2:	8f 92       	push	r8
	push r9
    50e4:	9f 92       	push	r9
	push r10
    50e6:	af 92       	push	r10
	push r11
    50e8:	bf 92       	push	r11
	push r12
    50ea:	cf 92       	push	r12
	push r13
    50ec:	df 92       	push	r13
	push r14
    50ee:	ef 92       	push	r14
	push r15
    50f0:	ff 92       	push	r15
	push r16
    50f2:	0f 93       	push	r16
	push r17
    50f4:	1f 93       	push	r17
	push r28
    50f6:	cf 93       	push	r28
	push r29
    50f8:	df 93       	push	r29
			lds r21,tr4_vol
			lds r22,tr4_barrel_lo
			lds r23,tr4_barrel_hi
			lds r24,tr4_divider
		#else
			lds r21,tr4_vol
    50fa:	50 91 a4 0a 	lds	r21, 0x0AA4
			lds r22,tr4_pos_lo
    50fe:	60 91 a8 0a 	lds	r22, 0x0AA8
			lds r23,tr4_pos_hi
    5102:	70 91 a9 0a 	lds	r23, 0x0AA9
			lds r24,tr4_pos_frac
    5106:	80 91 a7 0a 	lds	r24, 0x0AA7

			lds r4,tr4_step_lo 
    510a:	40 90 a5 0a 	lds	r4, 0x0AA5
			lds r5,tr4_step_hi 
    510e:	50 90 a6 0a 	lds	r5, 0x0AA6
			clr r6
    5112:	66 24       	eor	r6, r6
			lds r8,tr4_loop_end_lo
    5114:	80 90 ac 0a 	lds	r8, 0x0AAC
			lds r9,tr4_loop_end_hi
    5118:	90 90 ad 0a 	lds	r9, 0x0AAD

			//lds r10,tr4_loop_start_lo
			//lds r11,tr4_loop_start_hi
			
			;compute loop lenght
			lds ZL,tr4_loop_start_lo
    511c:	e0 91 aa 0a 	lds	r30, 0x0AAA
			lds ZH,tr4_loop_start_hi
    5120:	f0 91 ab 0a 	lds	r31, 0x0AAB
			movw r10,r8
    5124:	54 01       	movw	r10, r8
			sub r10,ZL
    5126:	ae 1a       	sub	r10, r30
			sbc r11,ZH
    5128:	bf 0a       	sbc	r11, r31
			

			movw r2,XL	;push
    512a:	1d 01       	movw	r2, r26

			ldi r28,lo8(262/2)
    512c:	c3 e8       	ldi	r28, 0x83	; 131

0000512e <ch4_loop>:
			movw ZL,r22
			lpm	r20,Z	;load sample
			mulsu r20,r21;(sample*mixing vol)
			st X+,r1

		.endr	
    512e:	84 0d       	add	r24, r4
    5130:	65 1d       	adc	r22, r5
    5132:	76 1d       	adc	r23, r6
    5134:	68 15       	cp	r22, r8
    5136:	79 05       	cpc	r23, r9
    5138:	10 f0       	brcs	.+4      	; 0x513e <ch4_loop+0x10>
    513a:	6a 19       	sub	r22, r10
    513c:	7b 09       	sbc	r23, r11
    513e:	fb 01       	movw	r30, r22
    5140:	44 91       	lpm	r20, Z
    5142:	45 03       	mulsu	r20, r21
    5144:	1d 92       	st	X+, r1
    5146:	84 0d       	add	r24, r4
    5148:	65 1d       	adc	r22, r5
    514a:	76 1d       	adc	r23, r6
    514c:	68 15       	cp	r22, r8
    514e:	79 05       	cpc	r23, r9
    5150:	10 f0       	brcs	.+4      	; 0x5156 <ch4_loop+0x28>
    5152:	6a 19       	sub	r22, r10
    5154:	7b 09       	sbc	r23, r11
    5156:	fb 01       	movw	r30, r22
    5158:	44 91       	lpm	r20, Z
    515a:	45 03       	mulsu	r20, r21
    515c:	1d 92       	st	X+, r1
			dec r28
    515e:	ca 95       	dec	r28
			brne ch4_loop
    5160:	31 f7       	brne	.-52     	; 0x512e <ch4_loop>

			movw XL,r2	;push
    5162:	d1 01       	movw	r26, r2





	lds r2,tr1_step_lo
    5164:	20 90 93 0a 	lds	r2, 0x0A93
	lds r3,tr1_step_hi
    5168:	30 90 94 0a 	lds	r3, 0x0A94
	lds r4,tr1_pos_lo
    516c:	40 90 96 0a 	lds	r4, 0x0A96
	lds r5,tr1_pos_hi 
    5170:	50 90 97 0a 	lds	r5, 0x0A97
	lds r6,tr1_pos_frac
    5174:	60 90 95 0a 	lds	r6, 0x0A95
	lds r17,tr1_vol
    5178:	10 91 92 0a 	lds	r17, 0x0A92
	
	lds r7,tr2_step_lo
    517c:	70 90 99 0a 	lds	r7, 0x0A99
	lds r8,tr2_step_hi
    5180:	80 90 9a 0a 	lds	r8, 0x0A9A
	lds r9,tr2_pos_frac
    5184:	90 90 9b 0a 	lds	r9, 0x0A9B
	lds r10,tr2_pos_lo
    5188:	a0 90 9c 0a 	lds	r10, 0x0A9C
	lds r11,tr2_pos_hi
    518c:	b0 90 9d 0a 	lds	r11, 0x0A9D
	lds r18,tr2_vol	
    5190:	20 91 98 0a 	lds	r18, 0x0A98

	lds r12,tr3_step_lo
    5194:	c0 90 9f 0a 	lds	r12, 0x0A9F
	lds r13,tr3_step_hi
    5198:	d0 90 a0 0a 	lds	r13, 0x0AA0
	lds r14,tr3_pos_lo
    519c:	e0 90 a2 0a 	lds	r14, 0x0AA2
	lds r15,tr3_pos_hi
    51a0:	f0 90 a3 0a 	lds	r15, 0x0AA3
	lds r16,tr3_pos_frac
    51a4:	00 91 a1 0a 	lds	r16, 0x0AA1
	lds r19,tr3_vol	
    51a8:	30 91 9e 0a 	lds	r19, 0x0A9E



	

	ldi r25,0xff 
    51ac:	9f ef       	ldi	r25, 0xFF	; 255

000051ae <mix_loop>:
mix_loop:

	#if MIXER_CHAN4_TYPE == 1 && SOUND_CHANNEL_4_ENABLE == 1
		ld 28,X
    51ae:	cc 91       	ld	r28, X
		clr r29	;sign extend
    51b0:	dd 27       	eor	r29, r29
		sbrc r28,7
    51b2:	c7 fd       	sbrc	r28, 7
		ser r29
    51b4:	df ef       	ldi	r29, 0xFF	; 255
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    51b6:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    51b8:	43 1c       	adc	r4, r3
	movw ZL,r4
    51ba:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    51bc:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    51be:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    51c0:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
		mov r29,r0	;ajust mix buffer msb
	#else
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    51c2:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb		
    51c4:	d0 1d       	adc	r29, r0
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    51c6:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    51c8:	a8 1c       	adc	r10, r8
		movw ZL,r10
    51ca:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    51cc:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    51ce:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    51d0:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    51d2:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    51d4:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    51d6:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    51d8:	ed 1c       	adc	r14, r13
		movw ZL,r14
    51da:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    51dc:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    51de:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    51e0:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    51e2:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    51e4:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    51e6:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    51e8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    51ea:	d0 05       	cpc	r29, r0
	brlt .+2
    51ec:	0c f0       	brlt	.+2      	; 0x51f0 <mix_loop+0x42>
	ldi r28,127
    51ee:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    51f0:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    51f2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    51f4:	d0 05       	cpc	r29, r0
	brge .+2
    51f6:	0c f4       	brge	.+2      	; 0x51fa <mix_loop+0x4c>
	ldi r28,-128
    51f8:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    51fa:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    51fc:	cd 93       	st	X+, r28


	dec r25
    51fe:	9a 95       	dec	r25
	breq .+2
    5200:	09 f0       	breq	.+2      	; 0x5204 <mix_loop+0x56>
	rjmp mix_loop
    5202:	d5 cf       	rjmp	.-86     	; 0x51ae <mix_loop>

	lds r20,mix_block
    5204:	40 91 90 0a 	lds	r20, 0x0A90
	dec r20
    5208:	4a 95       	dec	r20
	sts mix_block,r20
    520a:	40 93 90 0a 	sts	0x0A90, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    520e:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    5210:	09 f0       	breq	.+2      	; 0x5214 <mix_loop+0x66>
	rjmp mix_loop
    5212:	cd cf       	rjmp	.-102    	; 0x51ae <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    5214:	60 92 95 0a 	sts	0x0A95, r6
	sts tr1_pos_lo,r4	
    5218:	40 92 96 0a 	sts	0x0A96, r4

	sts tr2_pos_frac,r9
    521c:	90 92 9b 0a 	sts	0x0A9B, r9
	sts tr2_pos_lo,r10
    5220:	a0 92 9c 0a 	sts	0x0A9C, r10

	sts tr3_pos_frac,r16
    5224:	00 93 a1 0a 	sts	0x0AA1, r16
	sts tr3_pos_lo,r14
    5228:	e0 92 a2 0a 	sts	0x0AA2, r14
#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
	sts tr4_barrel_hi,r23
	sts tr4_divider,r24
#else
	sts tr4_vol,r21	
    522c:	50 93 a4 0a 	sts	0x0AA4, r21
	sts tr4_pos_lo,r22
    5230:	60 93 a8 0a 	sts	0x0AA8, r22
	sts tr4_pos_hi,r23
    5234:	70 93 a9 0a 	sts	0x0AA9, r23
	sts tr4_pos_frac,r24
    5238:	80 93 a7 0a 	sts	0x0AA7, r24

#endif

	pop r29
    523c:	df 91       	pop	r29
	pop r28
    523e:	cf 91       	pop	r28
	pop r17
    5240:	1f 91       	pop	r17
	pop r16
    5242:	0f 91       	pop	r16
	pop r15
    5244:	ff 90       	pop	r15
	pop r14
    5246:	ef 90       	pop	r14
	pop r13
    5248:	df 90       	pop	r13
	pop r12
    524a:	cf 90       	pop	r12
	pop r11
    524c:	bf 90       	pop	r11
	pop r10
    524e:	af 90       	pop	r10
	pop r9
    5250:	9f 90       	pop	r9
	pop r8
    5252:	8f 90       	pop	r8
	pop r7
    5254:	7f 90       	pop	r7
	pop r6
    5256:	6f 90       	pop	r6
	pop r5
    5258:	5f 90       	pop	r5
	pop r4
    525a:	4f 90       	pop	r4
	pop r3
    525c:	3f 90       	pop	r3
	pop r2
    525e:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    5260:	08 95       	ret

00005262 <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    5262:	e0 91 8d 0a 	lds	r30, 0x0A8D
	lds ZH,mix_pos+1
    5266:	f0 91 8e 0a 	lds	r31, 0x0A8E
			
	ld r16,Z+		;load next sample
    526a:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    526c:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    526e:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    5272:	0a e0       	ldi	r16, 0x0A	; 10
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    5274:	ed 38       	cpi	r30, 0x8D	; 141
	cpc ZH,r16
    5276:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    5278:	01 e8       	ldi	r16, 0x81	; 129
	ldi r17,hi8(mix_buf)
    527a:	18 e0       	ldi	r17, 0x08	; 8
	brlo .+2
    527c:	08 f0       	brcs	.+2      	; 0x5280 <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    527e:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    5280:	e0 93 8d 0a 	sts	0x0A8D, r30
	sts mix_pos+1,ZH		
    5284:	f0 93 8e 0a 	sts	0x0A8E, r31

	ret ;20+4=24
    5288:	08 95       	ret

0000528a <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    528a:	0f 93       	push	r16
	push r17
    528c:	1f 93       	push	r17
	push r18
    528e:	2f 93       	push	r18
	push ZL
    5290:	ef 93       	push	r30

	lds ZL,mix_pos
    5292:	e0 91 8d 0a 	lds	r30, 0x0A8D
	lds ZH,mix_pos+1
    5296:	f0 91 8e 0a 	lds	r31, 0x0A8E
			
	ld r16,Z+
    529a:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    529c:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    52a0:	0a e0       	ldi	r16, 0x0A	; 10
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    52a2:	ed 38       	cpi	r30, 0x8D	; 141
	cpc ZH,r16
    52a4:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    52a6:	01 e8       	ldi	r16, 0x81	; 129
	ldi r17,hi8(mix_buf)
    52a8:	18 e0       	ldi	r17, 0x08	; 8

	brlo .+2
    52aa:	08 f0       	brcs	.+2      	; 0x52ae <update_sound+0x24>
	movw ZL,r16
    52ac:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    52ae:	e0 93 8d 0a 	sts	0x0A8D, r30
	sts mix_pos+1,ZH	
    52b2:	f0 93 8e 0a 	sts	0x0A8E, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    52b6:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    52b8:	ea 95       	dec	r30
	brne .-4
    52ba:	f1 f7       	brne	.-4      	; 0x52b8 <update_sound+0x2e>
#endif

	pop ZL
    52bc:	ef 91       	pop	r30
	pop r18
    52be:	2f 91       	pop	r18
	pop r17
    52c0:	1f 91       	pop	r17
	pop r16
    52c2:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    52c4:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    52c6:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    52c8:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    52ca:	01 c0       	rjmp	.+2      	; 0x52ce <update_sound+0x44>
	ret
    52cc:	08 95       	ret

	ldi ZH,20
    52ce:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    52d0:	fa 95       	dec	r31
	brne .-4
    52d2:	f1 f7       	brne	.-4      	; 0x52d0 <update_sound+0x46>
	rjmp .
    52d4:	00 c0       	rjmp	.+0      	; 0x52d6 <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    52d6:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    52d8:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    52da:	e1 ff       	sbrs	r30, 1
	rjmp .
    52dc:	00 c0       	rjmp	.+0      	; 0x52de <update_sound+0x54>

	ret 
    52de:	08 95       	ret

000052e0 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    52e0:	80 93 43 08 	sts	0x0843, r24
	sts sprites_tile_banks+1,r25
    52e4:	90 93 44 08 	sts	0x0844, r25
	ret
    52e8:	08 95       	ret

000052ea <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    52ea:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    52ec:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    52ee:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    52f0:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    52f2:	6d e0       	ldi	r22, 0x0D	; 13

000052f4 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    52f4:	6d 93       	st	X+, r22
	sbiw r30,1
    52f6:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    52f8:	e9 f7       	brne	.-6      	; 0x52f4 <fill_vram_loop>

	clr r1
    52fa:	11 24       	eor	r1, r1

	ret
    52fc:	08 95       	ret

000052fe <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    52fe:	50 91 4d 08 	lds	r21, 0x084D
	add r20,21
    5302:	45 0f       	add	r20, r21
	rjmp SetTile	
    5304:	00 c0       	rjmp	.+0      	; 0x5306 <SetTile>

00005306 <SetTile>:

	ret

#else

	clr r25
    5306:	99 27       	eor	r25, r25
	clr r23	
    5308:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    530a:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    530c:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    530e:	08 0e       	add	r0, r24
	adc r1,r25
    5310:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    5312:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    5314:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    5316:	a0 0d       	add	r26, r0
	adc XH,r1
    5318:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    531a:	43 5f       	subi	r20, 0xF3	; 243
	st X,r20
    531c:	4c 93       	st	X, r20

	clr r1
    531e:	11 24       	eor	r1, r1

	ret
    5320:	08 95       	ret

00005322 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    5322:	80 93 4d 08 	sts	0x084D, r24
	ret
    5326:	08 95       	ret

00005328 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    5328:	80 93 4b 08 	sts	0x084B, r24
	sts tile_table_hi,r25	
    532c:	90 93 4c 08 	sts	0x084C, r25
	ret
    5330:	08 95       	ret

00005332 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    5332:	80 91 54 08 	lds	r24, 0x0854
	andi r24,SYNC_FLAG_VSYNC
    5336:	81 70       	andi	r24, 0x01	; 1
	ret
    5338:	08 95       	ret

0000533a <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    533a:	20 91 54 08 	lds	r18, 0x0854
	andi r18,~SYNC_FLAG_VSYNC
    533e:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    5340:	20 93 54 08 	sts	0x0854, r18
	ret
    5344:	08 95       	ret

00005346 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    5346:	88 23       	and	r24, r24
	brne rj_p2
    5348:	29 f4       	brne	.+10     	; 0x5354 <rj_p2>
		
	lds r24,joypad1_status_lo
    534a:	80 91 5d 08 	lds	r24, 0x085D
	lds r25,joypad1_status_lo+1
    534e:	90 91 5e 08 	lds	r25, 0x085E
	ret
    5352:	08 95       	ret

00005354 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    5354:	80 91 61 08 	lds	r24, 0x0861
	lds r25,joypad2_status_lo+1	
    5358:	90 91 62 08 	lds	r25, 0x0862

	ret
    535c:	08 95       	ret

0000535e <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    535e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    5360:	fe cf       	rjmp	.-4      	; 0x535e <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5362:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5364:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    5366:	60 bd       	out	0x20, r22	; 32
   cli
    5368:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    536a:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    536c:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    536e:	78 94       	sei
   ret
    5370:	08 95       	ret

00005372 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    5372:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    5374:	fe cf       	rjmp	.-4      	; 0x5372 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    5376:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    5378:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    537a:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    537c:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    537e:	80 b5       	in	r24, 0x20	; 32
   sei
    5380:	78 94       	sei
   ret
    5382:	08 95       	ret

00005384 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    5384:	98 e0       	ldi	r25, 0x08	; 8
    5386:	88 e1       	ldi	r24, 0x18	; 24
    5388:	0f b6       	in	r0, 0x3f	; 63
    538a:	f8 94       	cli
    538c:	a8 95       	wdr
    538e:	80 93 60 00 	sts	0x0060, r24
    5392:	0f be       	out	0x3f, r0	; 63
    5394:	90 93 60 00 	sts	0x0060, r25
	while(1);
    5398:	ff cf       	rjmp	.-2      	; 0x5398 <SoftReset+0x14>

0000539a <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    539a:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    539c:	c8 95       	lpm
    539e:	c8 95       	lpm
		Wait200ns();
    53a0:	c8 95       	lpm
    53a2:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    53a4:	12 98       	cbi	0x02, 2	; 2
    53a6:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	90 e0       	ldi	r25, 0x00	; 0
    53ac:	20 e0       	ldi	r18, 0x00	; 0
    53ae:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    53b0:	36 95       	lsr	r19
    53b2:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    53b4:	96 95       	lsr	r25
    53b6:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    53b8:	c8 95       	lpm
    53ba:	c8 95       	lpm
			Wait200ns();
    53bc:	c8 95       	lpm
    53be:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    53c0:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    53c2:	00 9b       	sbis	0x00, 0	; 0
    53c4:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    53c6:	01 9b       	sbis	0x00, 1	; 0
    53c8:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    53ca:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    53cc:	c8 95       	lpm
    53ce:	c8 95       	lpm
			Wait200ns();
    53d0:	c8 95       	lpm
    53d2:	c8 95       	lpm
    53d4:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    53d6:	61 f7       	brne	.-40     	; 0x53b0 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    53d8:	30 93 5e 08 	sts	0x085E, r19
    53dc:	20 93 5d 08 	sts	0x085D, r18
		joypad2_status_lo=p2ButtonsLo;
    53e0:	90 93 62 08 	sts	0x0862, r25
    53e4:	80 93 61 08 	sts	0x0861, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    53e8:	80 91 5d 08 	lds	r24, 0x085D
    53ec:	90 91 5e 08 	lds	r25, 0x085E
    53f0:	0f 97       	sbiw	r24, 0x0f	; 15
    53f2:	31 f0       	breq	.+12     	; 0x5400 <ReadButtons+0x66>
    53f4:	80 91 61 08 	lds	r24, 0x0861
    53f8:	90 91 62 08 	lds	r25, 0x0862
    53fc:	0f 97       	sbiw	r24, 0x0f	; 15
    53fe:	11 f4       	brne	.+4      	; 0x5404 <ReadButtons+0x6a>
		SoftReset();
    5400:	0e 94 c2 29 	call	0x5384	; 0x5384 <SoftReset>
    5404:	08 95       	ret

00005406 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    5406:	10 92 be 0a 	sts	0x0ABE, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    540a:	00 99       	sbic	0x00, 0	; 0
    540c:	03 c0       	rjmp	.+6      	; 0x5414 <ReadControllers+0xe>
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	80 93 be 0a 	sts	0x0ABE, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    5414:	01 99       	sbic	0x00, 1	; 0
    5416:	05 c0       	rjmp	.+10     	; 0x5422 <ReadControllers+0x1c>
    5418:	80 91 be 0a 	lds	r24, 0x0ABE
    541c:	82 60       	ori	r24, 0x02	; 2
    541e:	80 93 be 0a 	sts	0x0ABE, r24
			
	//read the standard buttons
	ReadButtons();
    5422:	0c 94 cd 29 	jmp	0x539a	; 0x539a <ReadButtons>

00005426 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    5426:	cf 93       	push	r28
    5428:	df 93       	push	r29
    542a:	c0 e0       	ldi	r28, 0x00	; 0
    542c:	d0 e0       	ldi	r29, 0x00	; 0
    542e:	fe 01       	movw	r30, r28
    5430:	e2 56       	subi	r30, 0x62	; 98
    5432:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    5434:	64 91       	lpm	r22, Z
    5436:	ce 01       	movw	r24, r28
    5438:	0e 94 af 29 	call	0x535e	; 0x535e <WriteEeprom>
    543c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    543e:	c0 32       	cpi	r28, 0x20	; 32
    5440:	d1 05       	cpc	r29, r1
    5442:	a9 f7       	brne	.-22     	; 0x542e <FormatEeprom+0x8>
    5444:	c0 e2       	ldi	r28, 0x20	; 32
    5446:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    5448:	6f ef       	ldi	r22, 0xFF	; 255
    544a:	ce 01       	movw	r24, r28
    544c:	0e 94 af 29 	call	0x535e	; 0x535e <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    5450:	6f ef       	ldi	r22, 0xFF	; 255
    5452:	ce 01       	movw	r24, r28
    5454:	01 96       	adiw	r24, 0x01	; 1
    5456:	0e 94 af 29 	call	0x535e	; 0x535e <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    545a:	a0 96       	adiw	r28, 0x20	; 32
    545c:	c1 15       	cp	r28, r1
    545e:	88 e0       	ldi	r24, 0x08	; 8
    5460:	d8 07       	cpc	r29, r24
    5462:	91 f7       	brne	.-28     	; 0x5448 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    5464:	df 91       	pop	r29
    5466:	cf 91       	pop	r28
    5468:	08 95       	ret

0000546a <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    546a:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    546c:	80 e0       	ldi	r24, 0x00	; 0
    546e:	90 e0       	ldi	r25, 0x00	; 0
    5470:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    5474:	c8 2f       	mov	r28, r24
    5476:	81 e0       	ldi	r24, 0x01	; 1
    5478:	90 e0       	ldi	r25, 0x00	; 0
    547a:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    547e:	28 2f       	mov	r18, r24
    5480:	30 e0       	ldi	r19, 0x00	; 0
    5482:	32 2f       	mov	r19, r18
    5484:	22 27       	eor	r18, r18
    5486:	2c 0f       	add	r18, r28
    5488:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	2a 35       	cpi	r18, 0x5A	; 90
    548e:	35 45       	sbci	r19, 0x55	; 85
    5490:	09 f0       	breq	.+2      	; 0x5494 <isEepromFormatted+0x2a>
    5492:	80 e0       	ldi	r24, 0x00	; 0
}
    5494:	cf 91       	pop	r28
    5496:	08 95       	ret

00005498 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    5498:	cf 92       	push	r12
    549a:	df 92       	push	r13
    549c:	ef 92       	push	r14
    549e:	ff 92       	push	r15
    54a0:	0f 93       	push	r16
    54a2:	1f 93       	push	r17
    54a4:	cf 93       	push	r28
    54a6:	df 93       	push	r29
    54a8:	1f 92       	push	r1
    54aa:	cd b7       	in	r28, 0x3d	; 61
    54ac:	de b7       	in	r29, 0x3e	; 62
    54ae:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    54b0:	0e 94 35 2a 	call	0x546a	; 0x546a <isEepromFormatted>
    54b4:	88 23       	and	r24, r24
    54b6:	09 f4       	brne	.+2      	; 0x54ba <EepromWriteBlock+0x22>
    54b8:	4d c0       	rjmp	.+154    	; 0x5554 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    54ba:	f6 01       	movw	r30, r12
    54bc:	80 81       	ld	r24, Z
    54be:	91 81       	ldd	r25, Z+1	; 0x01
    54c0:	8f 3f       	cpi	r24, 0xFF	; 255
    54c2:	ff ef       	ldi	r31, 0xFF	; 255
    54c4:	9f 07       	cpc	r25, r31
    54c6:	09 f4       	brne	.+2      	; 0x54ca <EepromWriteBlock+0x32>
    54c8:	47 c0       	rjmp	.+142    	; 0x5558 <EepromWriteBlock+0xc0>
    54ca:	8a 35       	cpi	r24, 0x5A	; 90
    54cc:	95 45       	sbci	r25, 0x55	; 85
    54ce:	09 f4       	brne	.+2      	; 0x54d2 <EepromWriteBlock+0x3a>
    54d0:	43 c0       	rjmp	.+134    	; 0x5558 <EepromWriteBlock+0xc0>
    54d2:	00 e2       	ldi	r16, 0x20	; 32
    54d4:	10 e0       	ldi	r17, 0x00	; 0
    54d6:	f1 2c       	mov	r15, r1
    54d8:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    54da:	c8 01       	movw	r24, r16
    54dc:	49 83       	std	Y+1, r20	; 0x01
    54de:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    54e2:	e8 2e       	mov	r14, r24
    54e4:	c8 01       	movw	r24, r16
    54e6:	01 96       	adiw	r24, 0x01	; 1
    54e8:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    54ec:	28 2f       	mov	r18, r24
    54ee:	30 e0       	ldi	r19, 0x00	; 0
    54f0:	32 2f       	mov	r19, r18
    54f2:	22 27       	eor	r18, r18
    54f4:	c9 01       	movw	r24, r18
    54f6:	8e 0d       	add	r24, r14
    54f8:	91 1d       	adc	r25, r1
		if(id==block->id){
    54fa:	f6 01       	movw	r30, r12
    54fc:	20 81       	ld	r18, Z
    54fe:	31 81       	ldd	r19, Z+1	; 0x01
    5500:	49 81       	ldd	r20, Y+1	; 0x01
    5502:	82 17       	cp	r24, r18
    5504:	93 07       	cpc	r25, r19
    5506:	19 f4       	brne	.+6      	; 0x550e <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5508:	ff 20       	and	r15, r15
    550a:	89 f0       	breq	.+34     	; 0x552e <EepromWriteBlock+0x96>
    550c:	0c c0       	rjmp	.+24     	; 0x5526 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    550e:	01 96       	adiw	r24, 0x01	; 1
    5510:	19 f4       	brne	.+6      	; 0x5518 <EepromWriteBlock+0x80>
    5512:	f1 10       	cpse	r15, r1
    5514:	01 c0       	rjmp	.+2      	; 0x5518 <EepromWriteBlock+0x80>
    5516:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    5518:	4f 5f       	subi	r20, 0xFF	; 255
    551a:	00 5e       	subi	r16, 0xE0	; 224
    551c:	1f 4f       	sbci	r17, 0xFF	; 255
    551e:	40 34       	cpi	r20, 0x40	; 64
    5520:	e1 f6       	brne	.-72     	; 0x54da <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    5522:	ff 20       	and	r15, r15
    5524:	d9 f0       	breq	.+54     	; 0x555c <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    5526:	20 e2       	ldi	r18, 0x20	; 32
    5528:	f2 9e       	mul	r15, r18
    552a:	80 01       	movw	r16, r0
    552c:	11 24       	eor	r1, r1
    552e:	76 01       	movw	r14, r12
    5530:	80 e2       	ldi	r24, 0x20	; 32
    5532:	e8 0e       	add	r14, r24
    5534:	f1 1c       	adc	r15, r1
    5536:	0c 19       	sub	r16, r12
    5538:	1d 09       	sbc	r17, r13
    553a:	c6 01       	movw	r24, r12
    553c:	80 0f       	add	r24, r16
    553e:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    5540:	f6 01       	movw	r30, r12
    5542:	61 91       	ld	r22, Z+
    5544:	6f 01       	movw	r12, r30
    5546:	0e 94 af 29 	call	0x535e	; 0x535e <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    554a:	ce 14       	cp	r12, r14
    554c:	df 04       	cpc	r13, r15
    554e:	a9 f7       	brne	.-22     	; 0x553a <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    5550:	80 e0       	ldi	r24, 0x00	; 0
    5552:	05 c0       	rjmp	.+10     	; 0x555e <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5554:	84 e0       	ldi	r24, 0x04	; 4
    5556:	03 c0       	rjmp	.+6      	; 0x555e <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    5558:	81 e0       	ldi	r24, 0x01	; 1
    555a:	01 c0       	rjmp	.+2      	; 0x555e <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    555c:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    555e:	0f 90       	pop	r0
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	ff 90       	pop	r15
    556a:	ef 90       	pop	r14
    556c:	df 90       	pop	r13
    556e:	cf 90       	pop	r12
    5570:	08 95       	ret

00005572 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    5572:	df 92       	push	r13
    5574:	ef 92       	push	r14
    5576:	ff 92       	push	r15
    5578:	0f 93       	push	r16
    557a:	1f 93       	push	r17
    557c:	cf 93       	push	r28
    557e:	df 93       	push	r29
    5580:	7c 01       	movw	r14, r24
    5582:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    5584:	0e 94 35 2a 	call	0x546a	; 0x546a <isEepromFormatted>
    5588:	88 23       	and	r24, r24
    558a:	89 f1       	breq	.+98     	; 0x55ee <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    558c:	8f ef       	ldi	r24, 0xFF	; 255
    558e:	e8 16       	cp	r14, r24
    5590:	f8 06       	cpc	r15, r24
    5592:	79 f1       	breq	.+94     	; 0x55f2 <EepromReadBlock+0x80>
    5594:	00 e0       	ldi	r16, 0x00	; 0
    5596:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    5598:	c8 01       	movw	r24, r16
    559a:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    559e:	d8 2e       	mov	r13, r24
    55a0:	c8 01       	movw	r24, r16
    55a2:	01 96       	adiw	r24, 0x01	; 1
    55a4:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    55a8:	28 2f       	mov	r18, r24
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	32 2f       	mov	r19, r18
    55ae:	22 27       	eor	r18, r18
    55b0:	2d 0d       	add	r18, r13
    55b2:	31 1d       	adc	r19, r1
		if(id==blockId){
    55b4:	2e 15       	cp	r18, r14
    55b6:	3f 05       	cpc	r19, r15
    55b8:	39 f4       	brne	.+14     	; 0x55c8 <EepromReadBlock+0x56>
    55ba:	7e 01       	movw	r14, r28
    55bc:	80 e2       	ldi	r24, 0x20	; 32
    55be:	e8 0e       	add	r14, r24
    55c0:	f1 1c       	adc	r15, r1
    55c2:	0c 1b       	sub	r16, r28
    55c4:	1d 0b       	sbc	r17, r29
    55c6:	08 c0       	rjmp	.+16     	; 0x55d8 <EepromReadBlock+0x66>
    55c8:	00 5e       	subi	r16, 0xE0	; 224
    55ca:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    55cc:	01 15       	cp	r16, r1
    55ce:	84 e0       	ldi	r24, 0x04	; 4
    55d0:	18 07       	cpc	r17, r24
    55d2:	11 f7       	brne	.-60     	; 0x5598 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    55d4:	83 e0       	ldi	r24, 0x03	; 3
    55d6:	0e c0       	rjmp	.+28     	; 0x55f4 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    55d8:	ce 01       	movw	r24, r28
    55da:	80 0f       	add	r24, r16
    55dc:	91 1f       	adc	r25, r17
    55de:	0e 94 b9 29 	call	0x5372	; 0x5372 <ReadEeprom>
    55e2:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    55e4:	ce 15       	cp	r28, r14
    55e6:	df 05       	cpc	r29, r15
    55e8:	b9 f7       	brne	.-18     	; 0x55d8 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    55ea:	80 e0       	ldi	r24, 0x00	; 0
    55ec:	03 c0       	rjmp	.+6      	; 0x55f4 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    55ee:	84 e0       	ldi	r24, 0x04	; 4
    55f0:	01 c0       	rjmp	.+2      	; 0x55f4 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    55f2:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    55f4:	df 91       	pop	r29
    55f6:	cf 91       	pop	r28
    55f8:	1f 91       	pop	r17
    55fa:	0f 91       	pop	r16
    55fc:	ff 90       	pop	r15
    55fe:	ef 90       	pop	r14
    5600:	df 90       	pop	r13
    5602:	08 95       	ret

00005604 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    5604:	fc 01       	movw	r30, r24
    5606:	45 87       	std	Z+13, r20	; 0x0d
    5608:	08 95       	ret

0000560a <PatchCommand01>:
}
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
    560a:	08 95       	ret

0000560c <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    560c:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    560e:	90 81       	ld	r25, Z
    5610:	9f 75       	andi	r25, 0x5F	; 95
    5612:	90 83       	st	Z, r25
    5614:	08 95       	ret

00005616 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    5616:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    5618:	90 81       	ld	r25, Z
    561a:	90 64       	ori	r25, 0x40	; 64
    561c:	90 83       	st	Z, r25
    561e:	08 95       	ret

00005620 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    5620:	fc 01       	movw	r30, r24
    5622:	44 87       	std	Z+12, r20	; 0x0c
    5624:	08 95       	ret

00005626 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    5626:	fc 01       	movw	r30, r24
    5628:	47 83       	std	Z+7, r20	; 0x07
    562a:	08 95       	ret

0000562c <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    562c:	fc 01       	movw	r30, r24
    562e:	40 87       	std	Z+8, r20	; 0x08
    5630:	08 95       	ret

00005632 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    5632:	1f 93       	push	r17
    5634:	cf 93       	push	r28
    5636:	df 93       	push	r29
    5638:	ec 01       	movw	r28, r24
    563a:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    563c:	29 81       	ldd	r18, Y+1	; 0x01
    563e:	30 e0       	ldi	r19, 0x00	; 0
    5640:	f9 01       	movw	r30, r18
    5642:	ee 0f       	add	r30, r30
    5644:	ff 1f       	adc	r31, r31
    5646:	e8 5f       	subi	r30, 0xF8	; 248
    5648:	f1 4a       	sbci	r31, 0xA1	; 161
    564a:	65 91       	lpm	r22, Z+
    564c:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    564e:	f9 01       	movw	r30, r18
    5650:	e4 0f       	add	r30, r20
    5652:	f1 1d       	adc	r31, r1
    5654:	47 fd       	sbrc	r20, 7
    5656:	fa 95       	dec	r31
    5658:	ee 0f       	add	r30, r30
    565a:	ff 1f       	adc	r31, r31
    565c:	e8 5f       	subi	r30, 0xF8	; 248
    565e:	f1 4a       	sbci	r31, 0xA1	; 161
    5660:	85 91       	lpm	r24, Z+
    5662:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    5664:	86 1b       	sub	r24, r22
    5666:	97 0b       	sbc	r25, r23
    5668:	60 91 c6 0a 	lds	r22, 0x0AC6
    566c:	70 e0       	ldi	r23, 0x00	; 0
    566e:	0e 94 cf 3b 	call	0x779e	; 0x779e <__divmodhi4>
	if(delta==0)delta++;
    5672:	61 15       	cp	r22, r1
    5674:	71 05       	cpc	r23, r1
    5676:	11 f4       	brne	.+4      	; 0x567c <PatchCommand11+0x4a>
    5678:	61 e0       	ldi	r22, 0x01	; 1
    567a:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    567c:	86 e0       	ldi	r24, 0x06	; 6
    567e:	18 9f       	mul	r17, r24
    5680:	f0 01       	movw	r30, r0
    5682:	11 24       	eor	r1, r1
    5684:	ee 56       	subi	r30, 0x6E	; 110
    5686:	f5 4f       	sbci	r31, 0xF5	; 245
    5688:	81 81       	ldd	r24, Z+1	; 0x01
    568a:	92 81       	ldd	r25, Z+2	; 0x02
    568c:	86 0f       	add	r24, r22
    568e:	97 1f       	adc	r25, r23
    5690:	92 83       	std	Z+2, r25	; 0x02
    5692:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    5694:	7b 83       	std	Y+3, r23	; 0x03
    5696:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    5698:	88 81       	ld	r24, Y
    569a:	88 60       	ori	r24, 0x08	; 8
    569c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    569e:	89 81       	ldd	r24, Y+1	; 0x01
    56a0:	48 0f       	add	r20, r24
    56a2:	4c 83       	std	Y+4, r20	; 0x04
}
    56a4:	df 91       	pop	r29
    56a6:	cf 91       	pop	r28
    56a8:	1f 91       	pop	r17
    56aa:	08 95       	ret

000056ac <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    56ac:	40 93 c6 0a 	sts	0x0AC6, r20
    56b0:	08 95       	ret

000056b2 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    56b2:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    56b4:	64 2f       	mov	r22, r20
    56b6:	0c 94 e4 2e 	jmp	0x5dc8	; 0x5dc8 <SetMixerWave>

000056ba <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    56ba:	fc 01       	movw	r30, r24
    56bc:	86 2f       	mov	r24, r22
	track->note+=param;
    56be:	91 81       	ldd	r25, Z+1	; 0x01
    56c0:	64 2f       	mov	r22, r20
    56c2:	69 0f       	add	r22, r25
    56c4:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    56c6:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <SetMixerNote>

000056ca <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    56ca:	fc 01       	movw	r30, r24
    56cc:	86 2f       	mov	r24, r22
	track->note-=param;
    56ce:	91 81       	ldd	r25, Z+1	; 0x01
    56d0:	69 2f       	mov	r22, r25
    56d2:	64 1b       	sub	r22, r20
    56d4:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    56d6:	0c 94 d0 2e 	jmp	0x5da0	; 0x5da0 <SetMixerNote>

000056da <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	cf 93       	push	r28
    56e0:	df 93       	push	r29
    56e2:	1f 92       	push	r1
    56e4:	cd b7       	in	r28, 0x3d	; 61
    56e6:	de b7       	in	r29, 0x3e	; 62
    56e8:	8c 01       	movw	r16, r24
    56ea:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    56ec:	64 2f       	mov	r22, r20
    56ee:	49 83       	std	Y+1, r20	; 0x01
    56f0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <SetMixerNote>
	track->note=param;
    56f4:	49 81       	ldd	r20, Y+1	; 0x01
    56f6:	f8 01       	movw	r30, r16
    56f8:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    56fa:	80 81       	ld	r24, Z
    56fc:	87 7f       	andi	r24, 0xF7	; 247
    56fe:	80 83       	st	Z, r24
}
    5700:	0f 90       	pop	r0
    5702:	df 91       	pop	r29
    5704:	cf 91       	pop	r28
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	08 95       	ret

0000570c <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    570c:	90 93 1c 0b 	sts	0x0B1C, r25
    5710:	80 93 1b 0b 	sts	0x0B1B, r24

	masterVolume=DEFAULT_MASTER_VOL;
    5714:	8f e6       	ldi	r24, 0x6F	; 111
    5716:	80 93 1e 0b 	sts	0x0B1E, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    571a:	10 92 80 08 	sts	0x0880, r1
    571e:	ef ec       	ldi	r30, 0xCF	; 207
    5720:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    5722:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5724:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    5726:	28 e1       	ldi	r18, 0x18	; 24
    5728:	df 01       	movw	r26, r30
    572a:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    572c:	8c 93       	st	X, r24
    572e:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    5730:	1c 92       	st	X, r1
    5732:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    5734:	9c 93       	st	X, r25
    5736:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    5738:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    573a:	10 82       	st	Z, r1
    573c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    573e:	2c 93       	st	X, r18
    5740:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    5742:	8c 93       	st	X, r24
    5744:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    5746:	3b e0       	ldi	r19, 0x0B	; 11
    5748:	e7 32       	cpi	r30, 0x27	; 39
    574a:	f3 07       	cpc	r31, r19
    574c:	69 f7       	brne	.-38     	; 0x5728 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    574e:	08 95       	ret

00005750 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    5750:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    5752:	ed 91       	ld	r30, X+
    5754:	fc 91       	ld	r31, X
    5756:	11 97       	sbiw	r26, 0x01	; 1
    5758:	9f 01       	movw	r18, r30
    575a:	2f 5f       	subi	r18, 0xFF	; 255
    575c:	3f 4f       	sbci	r19, 0xFF	; 255
    575e:	11 96       	adiw	r26, 0x01	; 1
    5760:	3c 93       	st	X, r19
    5762:	2e 93       	st	-X, r18
    5764:	e4 91       	lpm	r30, Z
    5766:	e7 fd       	sbrc	r30, 7
    5768:	03 c0       	rjmp	.+6      	; 0x5770 <ReadVarLen+0x20>
    576a:	8e 2f       	mov	r24, r30
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	08 95       	ret
    {
       value &= 0x7F;
    5770:	ef 77       	andi	r30, 0x7F	; 127
    5772:	8e 2f       	mov	r24, r30
    5774:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    5776:	96 95       	lsr	r25
    5778:	98 2f       	mov	r25, r24
    577a:	88 27       	eor	r24, r24
    577c:	97 95       	ror	r25
    577e:	87 95       	ror	r24
    5780:	2f 5f       	subi	r18, 0xFF	; 255
    5782:	3f 4f       	sbci	r19, 0xFF	; 255
    5784:	f9 01       	movw	r30, r18
    5786:	31 97       	sbiw	r30, 0x01	; 1
    5788:	e4 91       	lpm	r30, Z
    578a:	4e 2f       	mov	r20, r30
    578c:	4f 77       	andi	r20, 0x7F	; 127
    578e:	84 0f       	add	r24, r20
    5790:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    5792:	e7 fd       	sbrc	r30, 7
    5794:	f0 cf       	rjmp	.-32     	; 0x5776 <ReadVarLen+0x26>
    5796:	2d 93       	st	X+, r18
    5798:	3c 93       	st	X, r19
    }


    return value;
}
    579a:	08 95       	ret

0000579c <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    579c:	8f 92       	push	r8
    579e:	9f 92       	push	r9
    57a0:	af 92       	push	r10
    57a2:	bf 92       	push	r11
    57a4:	df 92       	push	r13
    57a6:	ef 92       	push	r14
    57a8:	ff 92       	push	r15
    57aa:	0f 93       	push	r16
    57ac:	1f 93       	push	r17
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	1f 92       	push	r1
    57b4:	cd b7       	in	r28, 0x3d	; 61
    57b6:	de b7       	in	r29, 0x3e	; 62
    57b8:	f8 2e       	mov	r15, r24
    57ba:	e6 2e       	mov	r14, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    57bc:	88 2e       	mov	r8, r24
    57be:	91 2c       	mov	r9, r1
    57c0:	86 e1       	ldi	r24, 0x16	; 22
    57c2:	f8 9e       	mul	r15, r24
    57c4:	f0 01       	movw	r30, r0
    57c6:	11 24       	eor	r1, r1
    57c8:	ef 53       	subi	r30, 0x3F	; 63
    57ca:	f5 4f       	sbci	r31, 0xF5	; 245
    57cc:	80 81       	ld	r24, Z
    57ce:	98 2f       	mov	r25, r24
    57d0:	90 78       	andi	r25, 0x80	; 128
    57d2:	d9 2e       	mov	r13, r25

	track->patchCurrDeltaTime=0;
    57d4:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    57d6:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    57d8:	9f ef       	ldi	r25, 0xFF	; 255
    57da:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    57dc:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    57de:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    57e0:	87 7b       	andi	r24, 0xB7	; 183
    57e2:	80 62       	ori	r24, 0x20	; 32
    57e4:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    57e6:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    57e8:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    57ea:	21 83       	std	Z+1, r18	; 0x01
    57ec:	e9 e0       	ldi	r30, 0x09	; 9
    57ee:	6e 9f       	mul	r22, r30
    57f0:	80 01       	movw	r16, r0
    57f2:	11 24       	eor	r1, r1
				SetMixerNote(channel,note);
				SetMixerWave(channel,0);
			}
		#else
			//if it's a PCM channel
			if(channel==3){
    57f4:	f3 e0       	ldi	r31, 0x03	; 3
    57f6:	ff 12       	cpse	r15, r31
    57f8:	2a c0       	rjmp	.+84     	; 0x584e <TriggerCommon+0xb2>
				mixer.channels.type.pcm.positionFrac=0;
    57fa:	10 92 a7 0a 	sts	0x0AA7, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    57fe:	40 91 1b 0b 	lds	r20, 0x0B1B
    5802:	50 91 1c 0b 	lds	r21, 0x0B1C
    5806:	40 0f       	add	r20, r16
    5808:	51 1f       	adc	r21, r17
    580a:	fa 01       	movw	r30, r20
    580c:	31 96       	adiw	r30, 0x01	; 1
    580e:	a5 90       	lpm	r10, Z+
    5810:	b4 90       	lpm	r11, Z
				mixer.channels.type.pcm.position=pos;
    5812:	b0 92 a9 0a 	sts	0x0AA9, r11
    5816:	a0 92 a8 0a 	sts	0x0AA8, r10
				//mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    581a:	da 01       	movw	r26, r20
    581c:	17 96       	adiw	r26, 0x07	; 7
    581e:	fd 01       	movw	r30, r26
    5820:	85 91       	lpm	r24, Z+
    5822:	94 91       	lpm	r25, Z
    5824:	4b 5f       	subi	r20, 0xFB	; 251
    5826:	5f 4f       	sbci	r21, 0xFF	; 255
    5828:	fa 01       	movw	r30, r20
    582a:	65 91       	lpm	r22, Z+
    582c:	74 91       	lpm	r23, Z
    582e:	86 1b       	sub	r24, r22
    5830:	97 0b       	sbc	r25, r23
    5832:	90 93 ab 0a 	sts	0x0AAB, r25
    5836:	80 93 aa 0a 	sts	0x0AAA, r24
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    583a:	fd 01       	movw	r30, r26
    583c:	85 91       	lpm	r24, Z+
    583e:	94 91       	lpm	r25, Z
    5840:	a8 0e       	add	r10, r24
    5842:	b9 1e       	adc	r11, r25
    5844:	b0 92 ad 0a 	sts	0x0AAD, r11
    5848:	a0 92 ac 0a 	sts	0x0AAC, r10
    584c:	06 c0       	rjmp	.+12     	; 0x585a <TriggerCommon+0xbe>
			}else{
				SetMixerWave(channel,0);
    584e:	60 e0       	ldi	r22, 0x00	; 0
    5850:	8f 2d       	mov	r24, r15
    5852:	29 83       	std	Y+1, r18	; 0x01
    5854:	0e 94 e4 2e 	call	0x5dc8	; 0x5dc8 <SetMixerWave>
    5858:	29 81       	ldd	r18, Y+1	; 0x01
			}

			SetMixerNote(channel,note);
    585a:	62 2f       	mov	r22, r18
    585c:	8f 2d       	mov	r24, r15
    585e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    5862:	86 e1       	ldi	r24, 0x16	; 22
    5864:	88 9d       	mul	r24, r8
    5866:	f0 01       	movw	r30, r0
    5868:	89 9d       	mul	r24, r9
    586a:	f0 0d       	add	r31, r0
    586c:	11 24       	eor	r1, r1
    586e:	ef 53       	subi	r30, 0x3F	; 63
    5870:	f5 4f       	sbci	r31, 0xF5	; 245

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    5872:	dd 20       	and	r13, r13
    5874:	11 f0       	breq	.+4      	; 0x587a <TriggerCommon+0xde>
		track->fxPatchNo=patch;
    5876:	e7 86       	std	Z+15, r14	; 0x0f
    5878:	01 c0       	rjmp	.+2      	; 0x587c <TriggerCommon+0xe0>
	}else{
		track->patchNo=patch;	
    587a:	e6 86       	std	Z+14, r14	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    587c:	e0 91 1b 0b 	lds	r30, 0x0B1B
    5880:	f0 91 1c 0b 	lds	r31, 0x0B1C
    5884:	e0 0f       	add	r30, r16
    5886:	f1 1f       	adc	r31, r17
    5888:	33 96       	adiw	r30, 0x03	; 3
    588a:	85 91       	lpm	r24, Z+
    588c:	94 91       	lpm	r25, Z
	if(pos==NULL){
    588e:	00 97       	sbiw	r24, 0x00	; 0
    5890:	59 f4       	brne	.+22     	; 0x58a8 <TriggerCommon+0x10c>
		track->patchCommandStreamPos=NULL;
    5892:	86 e1       	ldi	r24, 0x16	; 22
    5894:	88 9d       	mul	r24, r8
    5896:	f0 01       	movw	r30, r0
    5898:	89 9d       	mul	r24, r9
    589a:	f0 0d       	add	r31, r0
    589c:	11 24       	eor	r1, r1
    589e:	ef 53       	subi	r30, 0x3F	; 63
    58a0:	f5 4f       	sbci	r31, 0xF5	; 245
    58a2:	15 8a       	std	Z+21, r1	; 0x15
    58a4:	14 8a       	std	Z+20, r1	; 0x14
    58a6:	0e c0       	rjmp	.+28     	; 0x58c4 <TriggerCommon+0x128>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    58a8:	fc 01       	movw	r30, r24
    58aa:	24 91       	lpm	r18, Z
    58ac:	36 e1       	ldi	r19, 0x16	; 22
    58ae:	38 9d       	mul	r19, r8
    58b0:	f0 01       	movw	r30, r0
    58b2:	39 9d       	mul	r19, r9
    58b4:	f0 0d       	add	r31, r0
    58b6:	11 24       	eor	r1, r1
    58b8:	ef 53       	subi	r30, 0x3F	; 63
    58ba:	f5 4f       	sbci	r31, 0xF5	; 245
    58bc:	21 8b       	std	Z+17, r18	; 0x11
    58be:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    58c0:	95 8b       	std	Z+21, r25	; 0x15
    58c2:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    58c4:	0f 90       	pop	r0
    58c6:	df 91       	pop	r29
    58c8:	cf 91       	pop	r28
    58ca:	1f 91       	pop	r17
    58cc:	0f 91       	pop	r16
    58ce:	ff 90       	pop	r15
    58d0:	ef 90       	pop	r14
    58d2:	df 90       	pop	r13
    58d4:	bf 90       	pop	r11
    58d6:	af 90       	pop	r10
    58d8:	9f 90       	pop	r9
    58da:	8f 90       	pop	r8
    58dc:	08 95       	ret

000058de <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    58de:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    58e0:	a8 2f       	mov	r26, r24
    58e2:	b0 e0       	ldi	r27, 0x00	; 0
    58e4:	96 e1       	ldi	r25, 0x16	; 22
    58e6:	89 9f       	mul	r24, r25
    58e8:	f0 01       	movw	r30, r0
    58ea:	11 24       	eor	r1, r1
    58ec:	ef 53       	subi	r30, 0x3F	; 63
    58ee:	f5 4f       	sbci	r31, 0xF5	; 245
    58f0:	90 81       	ld	r25, Z
    58f2:	95 ff       	sbrs	r25, 5
    58f4:	02 c0       	rjmp	.+4      	; 0x58fa <TriggerNote+0x1c>
    58f6:	97 fd       	sbrc	r25, 7
    58f8:	28 c0       	rjmp	.+80     	; 0x594a <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    58fa:	31 11       	cpse	r19, r1
    58fc:	18 c0       	rjmp	.+48     	; 0x592e <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    58fe:	86 e1       	ldi	r24, 0x16	; 22
    5900:	8a 9f       	mul	r24, r26
    5902:	f0 01       	movw	r30, r0
    5904:	8b 9f       	mul	r24, r27
    5906:	f0 0d       	add	r31, r0
    5908:	11 24       	eor	r1, r1
    590a:	ef 53       	subi	r30, 0x3F	; 63
    590c:	f5 4f       	sbci	r31, 0xF5	; 245
    590e:	85 85       	ldd	r24, Z+13	; 0x0d
    5910:	81 11       	cpse	r24, r1
    5912:	02 c0       	rjmp	.+4      	; 0x5918 <TriggerNote+0x3a>
    5914:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    5916:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    5918:	86 e1       	ldi	r24, 0x16	; 22
    591a:	8a 9f       	mul	r24, r26
    591c:	f0 01       	movw	r30, r0
    591e:	8b 9f       	mul	r24, r27
    5920:	f0 0d       	add	r31, r0
    5922:	11 24       	eor	r1, r1
    5924:	ef 53       	subi	r30, 0x3F	; 63
    5926:	f5 4f       	sbci	r31, 0xF5	; 245
    5928:	9f 7b       	andi	r25, 0xBF	; 191
    592a:	90 83       	st	Z, r25
    592c:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    592e:	26 e1       	ldi	r18, 0x16	; 22
    5930:	2a 9f       	mul	r18, r26
    5932:	f0 01       	movw	r30, r0
    5934:	2b 9f       	mul	r18, r27
    5936:	f0 0d       	add	r31, r0
    5938:	11 24       	eor	r1, r1
    593a:	ef 53       	subi	r30, 0x3F	; 63
    593c:	f5 4f       	sbci	r31, 0xF5	; 245
    593e:	9f 77       	andi	r25, 0x7F	; 127
    5940:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    5942:	24 2f       	mov	r18, r20
    5944:	43 2f       	mov	r20, r19
    5946:	0c 94 ce 2b 	jmp	0x579c	; 0x579c <TriggerCommon>
    594a:	08 95       	ret

0000594c <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    594c:	5f 92       	push	r5
    594e:	6f 92       	push	r6
    5950:	7f 92       	push	r7
    5952:	8f 92       	push	r8
    5954:	9f 92       	push	r9
    5956:	af 92       	push	r10
    5958:	bf 92       	push	r11
    595a:	cf 92       	push	r12
    595c:	df 92       	push	r13
    595e:	ef 92       	push	r14
    5960:	ff 92       	push	r15
    5962:	0f 93       	push	r16
    5964:	1f 93       	push	r17
    5966:	cf 93       	push	r28
    5968:	df 93       	push	r29
    596a:	c1 ec       	ldi	r28, 0xC1	; 193
    596c:	da e0       	ldi	r29, 0x0A	; 10
    596e:	82 e9       	ldi	r24, 0x92	; 146
    5970:	e8 2e       	mov	r14, r24
    5972:	8a e0       	ldi	r24, 0x0A	; 10
    5974:	f8 2e       	mov	r15, r24
    5976:	d7 01       	movw	r26, r14
    5978:	9e 01       	movw	r18, r28
    597a:	40 e0       	ldi	r20, 0x00	; 0
    597c:	50 e0       	ldi	r21, 0x00	; 0
    597e:	ca 01       	movw	r24, r20
    5980:	8f 53       	subi	r24, 0x3F	; 63
    5982:	95 4f       	sbci	r25, 0xF5	; 245
    5984:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    5986:	fc 01       	movw	r30, r24
    5988:	85 85       	ldd	r24, Z+13	; 0x0d
    598a:	88 23       	and	r24, r24
    598c:	91 f0       	breq	.+36     	; 0x59b2 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    598e:	64 85       	ldd	r22, Z+12	; 0x0c
    5990:	99 27       	eor	r25, r25
    5992:	87 fd       	sbrc	r24, 7
    5994:	90 95       	com	r25
    5996:	86 0f       	add	r24, r22
    5998:	91 1d       	adc	r25, r1
    599a:	8f 3f       	cpi	r24, 0xFF	; 255
    599c:	91 05       	cpc	r25, r1
    599e:	19 f0       	breq	.+6      	; 0x59a6 <ProcessMusic+0x5a>
    59a0:	14 f0       	brlt	.+4      	; 0x59a6 <ProcessMusic+0x5a>
    59a2:	8f ef       	ldi	r24, 0xFF	; 255
    59a4:	90 e0       	ldi	r25, 0x00	; 0
    59a6:	97 ff       	sbrs	r25, 7
    59a8:	02 c0       	rjmp	.+4      	; 0x59ae <ProcessMusic+0x62>
    59aa:	80 e0       	ldi	r24, 0x00	; 0
    59ac:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    59ae:	f6 01       	movw	r30, r12
    59b0:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    59b2:	f9 01       	movw	r30, r18
    59b4:	10 81       	ld	r17, Z
    59b6:	13 ff       	sbrs	r17, 3
    59b8:	29 c0       	rjmp	.+82     	; 0x5a0c <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    59ba:	62 81       	ldd	r22, Z+2	; 0x02
    59bc:	73 81       	ldd	r23, Z+3	; 0x03
    59be:	11 96       	adiw	r26, 0x01	; 1
    59c0:	8d 91       	ld	r24, X+
    59c2:	9c 91       	ld	r25, X
    59c4:	12 97       	sbiw	r26, 0x02	; 2
    59c6:	86 0f       	add	r24, r22
    59c8:	97 1f       	adc	r25, r23
    59ca:	12 96       	adiw	r26, 0x02	; 2
    59cc:	9c 93       	st	X, r25
    59ce:	8e 93       	st	-X, r24
    59d0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    59d2:	f6 01       	movw	r30, r12
    59d4:	04 81       	ldd	r16, Z+4	; 0x04
    59d6:	e0 2f       	mov	r30, r16
    59d8:	f0 e0       	ldi	r31, 0x00	; 0
    59da:	ee 0f       	add	r30, r30
    59dc:	ff 1f       	adc	r31, r31
    59de:	e8 5f       	subi	r30, 0xF8	; 248
    59e0:	f1 4a       	sbci	r31, 0xA1	; 161
    59e2:	c5 90       	lpm	r12, Z+
    59e4:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    59e6:	16 16       	cp	r1, r22
    59e8:	17 06       	cpc	r1, r23
    59ea:	24 f4       	brge	.+8      	; 0x59f4 <ProcessMusic+0xa8>
    59ec:	8c 15       	cp	r24, r12
    59ee:	9d 05       	cpc	r25, r13
    59f0:	30 f4       	brcc	.+12     	; 0x59fe <ProcessMusic+0xb2>
    59f2:	0c c0       	rjmp	.+24     	; 0x5a0c <ProcessMusic+0xc0>
    59f4:	67 2b       	or	r22, r23
    59f6:	51 f0       	breq	.+20     	; 0x5a0c <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    59f8:	c8 16       	cp	r12, r24
    59fa:	d9 06       	cpc	r13, r25
    59fc:	38 f0       	brcs	.+14     	; 0x5a0c <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    59fe:	12 96       	adiw	r26, 0x02	; 2
    5a00:	dc 92       	st	X, r13
    5a02:	ce 92       	st	-X, r12
    5a04:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    5a06:	17 7f       	andi	r17, 0xF7	; 247
    5a08:	f9 01       	movw	r30, r18
    5a0a:	10 83       	st	Z, r17
    5a0c:	4a 5e       	subi	r20, 0xEA	; 234
    5a0e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a10:	2a 5e       	subi	r18, 0xEA	; 234
    5a12:	3f 4f       	sbci	r19, 0xFF	; 255
    5a14:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5a16:	48 35       	cpi	r20, 0x58	; 88
    5a18:	51 05       	cpc	r21, r1
    5a1a:	09 f0       	breq	.+2      	; 0x5a1e <ProcessMusic+0xd2>
    5a1c:	b0 cf       	rjmp	.-160    	; 0x597e <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    5a1e:	80 91 80 08 	lds	r24, 0x0880
    5a22:	88 23       	and	r24, r24
    5a24:	09 f4       	brne	.+2      	; 0x5a28 <ProcessMusic+0xdc>
    5a26:	cb c0       	rjmp	.+406    	; 0x5bbe <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    5a28:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    5a2a:	80 91 19 0b 	lds	r24, 0x0B19
    5a2e:	90 91 1a 0b 	lds	r25, 0x0B1A
    5a32:	20 91 1f 0b 	lds	r18, 0x0B1F
    5a36:	30 91 20 0b 	lds	r19, 0x0B20
    5a3a:	82 17       	cp	r24, r18
    5a3c:	93 07       	cpc	r25, r19
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <ProcessMusic+0xf6>
    5a40:	b9 c0       	rjmp	.+370    	; 0x5bb4 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    5a42:	20 91 22 0b 	lds	r18, 0x0B22
    5a46:	30 91 23 0b 	lds	r19, 0x0B23
    5a4a:	b9 01       	movw	r22, r18
    5a4c:	6f 5f       	subi	r22, 0xFF	; 255
    5a4e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a50:	70 93 23 0b 	sts	0x0B23, r23
    5a54:	60 93 22 0b 	sts	0x0B22, r22
    5a58:	f9 01       	movw	r30, r18
    5a5a:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    5a5c:	4f 3f       	cpi	r20, 0xFF	; 255
    5a5e:	79 f5       	brne	.+94     	; 0x5abe <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    5a60:	a9 01       	movw	r20, r18
    5a62:	4e 5f       	subi	r20, 0xFE	; 254
    5a64:	5f 4f       	sbci	r21, 0xFF	; 255
    5a66:	50 93 23 0b 	sts	0x0B23, r21
    5a6a:	40 93 22 0b 	sts	0x0B22, r20
    5a6e:	fb 01       	movw	r30, r22
    5a70:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    5a72:	6f 32       	cpi	r22, 0x2F	; 47
    5a74:	19 f4       	brne	.+6      	; 0x5a7c <ProcessMusic+0x130>
						playSong=false;
    5a76:	10 92 80 08 	sts	0x0880, r1
						break;	
    5a7a:	9c c0       	rjmp	.+312    	; 0x5bb4 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    5a7c:	66 30       	cpi	r22, 0x06	; 6
    5a7e:	09 f0       	breq	.+2      	; 0x5a82 <ProcessMusic+0x136>
    5a80:	8c c0       	rjmp	.+280    	; 0x5b9a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    5a82:	fa 01       	movw	r30, r20
    5a84:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    5a86:	c9 01       	movw	r24, r18
    5a88:	04 96       	adiw	r24, 0x04	; 4
    5a8a:	90 93 23 0b 	sts	0x0B23, r25
    5a8e:	80 93 22 0b 	sts	0x0B22, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    5a92:	f9 01       	movw	r30, r18
    5a94:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    5a96:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    5a98:	e3 35       	cpi	r30, 0x53	; 83
    5a9a:	29 f4       	brne	.+10     	; 0x5aa6 <ProcessMusic+0x15a>
							loopStart=songPos;
    5a9c:	90 93 25 0b 	sts	0x0B25, r25
    5aa0:	80 93 24 0b 	sts	0x0B24, r24
    5aa4:	7a c0       	rjmp	.+244    	; 0x5b9a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    5aa6:	e5 34       	cpi	r30, 0x45	; 69
    5aa8:	09 f0       	breq	.+2      	; 0x5aac <ProcessMusic+0x160>
    5aaa:	77 c0       	rjmp	.+238    	; 0x5b9a <ProcessMusic+0x24e>
							songPos=loopStart;
    5aac:	80 91 24 0b 	lds	r24, 0x0B24
    5ab0:	90 91 25 0b 	lds	r25, 0x0B25
    5ab4:	90 93 23 0b 	sts	0x0B23, r25
    5ab8:	80 93 22 0b 	sts	0x0B22, r24
    5abc:	6e c0       	rjmp	.+220    	; 0x5b9a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    5abe:	47 fd       	sbrc	r20, 7
    5ac0:	40 93 1d 0b 	sts	0x0B1D, r20
					channel=lastStatus&0x0f;
    5ac4:	90 91 1d 0b 	lds	r25, 0x0B1D
    5ac8:	89 2f       	mov	r24, r25
    5aca:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    5acc:	47 ff       	sbrs	r20, 7
    5ace:	08 c0       	rjmp	.+16     	; 0x5ae0 <ProcessMusic+0x194>
    5ad0:	2e 5f       	subi	r18, 0xFE	; 254
    5ad2:	3f 4f       	sbci	r19, 0xFF	; 255
    5ad4:	30 93 23 0b 	sts	0x0B23, r19
    5ad8:	20 93 22 0b 	sts	0x0B22, r18
    5adc:	fb 01       	movw	r30, r22
    5ade:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    5ae0:	90 7f       	andi	r25, 0xF0	; 240
    5ae2:	90 3b       	cpi	r25, 0xB0	; 176
    5ae4:	e1 f0       	breq	.+56     	; 0x5b1e <ProcessMusic+0x1d2>
    5ae6:	90 3c       	cpi	r25, 0xC0	; 192
    5ae8:	09 f4       	brne	.+2      	; 0x5aec <ProcessMusic+0x1a0>
    5aea:	51 c0       	rjmp	.+162    	; 0x5b8e <ProcessMusic+0x242>
    5aec:	90 39       	cpi	r25, 0x90	; 144
    5aee:	09 f0       	breq	.+2      	; 0x5af2 <ProcessMusic+0x1a6>
    5af0:	54 c0       	rjmp	.+168    	; 0x5b9a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    5af2:	e0 91 22 0b 	lds	r30, 0x0B22
    5af6:	f0 91 23 0b 	lds	r31, 0x0B23
    5afa:	9f 01       	movw	r18, r30
    5afc:	2f 5f       	subi	r18, 0xFF	; 255
    5afe:	3f 4f       	sbci	r19, 0xFF	; 255
    5b00:	30 93 23 0b 	sts	0x0B23, r19
    5b04:	20 93 22 0b 	sts	0x0B22, r18
    5b08:	24 91       	lpm	r18, Z
    5b0a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    5b0c:	18 9f       	mul	r17, r24
    5b0e:	f0 01       	movw	r30, r0
    5b10:	11 24       	eor	r1, r1
    5b12:	ef 53       	subi	r30, 0x3F	; 63
    5b14:	f5 4f       	sbci	r31, 0xF5	; 245
    5b16:	66 85       	ldd	r22, Z+14	; 0x0e
    5b18:	0e 94 6f 2c 	call	0x58de	; 0x58de <TriggerNote>
    5b1c:	3e c0       	rjmp	.+124    	; 0x5b9a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    5b1e:	e0 91 22 0b 	lds	r30, 0x0B22
    5b22:	f0 91 23 0b 	lds	r31, 0x0B23
    5b26:	9f 01       	movw	r18, r30
    5b28:	2f 5f       	subi	r18, 0xFF	; 255
    5b2a:	3f 4f       	sbci	r19, 0xFF	; 255
    5b2c:	30 93 23 0b 	sts	0x0B23, r19
    5b30:	20 93 22 0b 	sts	0x0B22, r18
    5b34:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    5b36:	47 30       	cpi	r20, 0x07	; 7
    5b38:	49 f4       	brne	.+18     	; 0x5b4c <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    5b3a:	18 9f       	mul	r17, r24
    5b3c:	d0 01       	movw	r26, r0
    5b3e:	11 24       	eor	r1, r1
    5b40:	af 53       	subi	r26, 0x3F	; 63
    5b42:	b5 4f       	sbci	r27, 0xF5	; 245
    5b44:	ee 0f       	add	r30, r30
    5b46:	1a 96       	adiw	r26, 0x0a	; 10
    5b48:	ec 93       	st	X, r30
    5b4a:	27 c0       	rjmp	.+78     	; 0x5b9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    5b4c:	4b 30       	cpi	r20, 0x0B	; 11
    5b4e:	49 f4       	brne	.+18     	; 0x5b62 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    5b50:	18 9f       	mul	r17, r24
    5b52:	d0 01       	movw	r26, r0
    5b54:	11 24       	eor	r1, r1
    5b56:	af 53       	subi	r26, 0x3F	; 63
    5b58:	b5 4f       	sbci	r27, 0xF5	; 245
    5b5a:	ee 0f       	add	r30, r30
    5b5c:	19 96       	adiw	r26, 0x09	; 9
    5b5e:	ec 93       	st	X, r30
    5b60:	1c c0       	rjmp	.+56     	; 0x5b9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    5b62:	4c 35       	cpi	r20, 0x5C	; 92
    5b64:	49 f4       	brne	.+18     	; 0x5b78 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    5b66:	18 9f       	mul	r17, r24
    5b68:	d0 01       	movw	r26, r0
    5b6a:	11 24       	eor	r1, r1
    5b6c:	af 53       	subi	r26, 0x3F	; 63
    5b6e:	b5 4f       	sbci	r27, 0xF5	; 245
    5b70:	ee 0f       	add	r30, r30
    5b72:	17 96       	adiw	r26, 0x07	; 7
    5b74:	ec 93       	st	X, r30
    5b76:	11 c0       	rjmp	.+34     	; 0x5b9a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    5b78:	44 36       	cpi	r20, 0x64	; 100
    5b7a:	79 f4       	brne	.+30     	; 0x5b9a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    5b7c:	18 9f       	mul	r17, r24
    5b7e:	d0 01       	movw	r26, r0
    5b80:	11 24       	eor	r1, r1
    5b82:	af 53       	subi	r26, 0x3F	; 63
    5b84:	b5 4f       	sbci	r27, 0xF5	; 245
    5b86:	ee 0f       	add	r30, r30
    5b88:	18 96       	adiw	r26, 0x08	; 8
    5b8a:	ec 93       	st	X, r30
    5b8c:	06 c0       	rjmp	.+12     	; 0x5b9a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    5b8e:	18 9f       	mul	r17, r24
    5b90:	f0 01       	movw	r30, r0
    5b92:	11 24       	eor	r1, r1
    5b94:	ef 53       	subi	r30, 0x3F	; 63
    5b96:	f5 4f       	sbci	r31, 0xF5	; 245
    5b98:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    5b9a:	82 e2       	ldi	r24, 0x22	; 34
    5b9c:	9b e0       	ldi	r25, 0x0B	; 11
    5b9e:	0e 94 a8 2b 	call	0x5750	; 0x5750 <ReadVarLen>
    5ba2:	90 93 20 0b 	sts	0x0B20, r25
    5ba6:	80 93 1f 0b 	sts	0x0B1F, r24
				currDeltaTime=0;
    5baa:	10 92 1a 0b 	sts	0x0B1A, r1
    5bae:	10 92 19 0b 	sts	0x0B19, r1
    5bb2:	3b cf       	rjmp	.-394    	; 0x5a2a <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    5bb4:	01 96       	adiw	r24, 0x01	; 1
    5bb6:	90 93 1a 0b 	sts	0x0B1A, r25
    5bba:	80 93 19 0b 	sts	0x0B19, r24
    5bbe:	97 ec       	ldi	r25, 0xC7	; 199
    5bc0:	a9 2e       	mov	r10, r25
    5bc2:	9a e0       	ldi	r25, 0x0A	; 10
    5bc4:	b9 2e       	mov	r11, r25
    5bc6:	03 ed       	ldi	r16, 0xD3	; 211
    5bc8:	1a e0       	ldi	r17, 0x0A	; 10
    5bca:	22 ed       	ldi	r18, 0xD2	; 210
    5bcc:	c2 2e       	mov	r12, r18
    5bce:	2a e0       	ldi	r18, 0x0A	; 10
    5bd0:	d2 2e       	mov	r13, r18
    5bd2:	34 ed       	ldi	r19, 0xD4	; 212
    5bd4:	83 2e       	mov	r8, r19
    5bd6:	3a e0       	ldi	r19, 0x0A	; 10
    5bd8:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    5bda:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5bdc:	66 24       	eor	r6, r6
    5bde:	6a 94       	dec	r6
    5be0:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    5be2:	88 81       	ld	r24, Y
    5be4:	86 fd       	sbrc	r24, 6
    5be6:	43 c0       	rjmp	.+134    	; 0x5c6e <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    5be8:	8c 89       	ldd	r24, Y+20	; 0x14
    5bea:	9d 89       	ldd	r25, Y+21	; 0x15
    5bec:	89 2b       	or	r24, r25
    5bee:	09 f4       	brne	.+2      	; 0x5bf2 <ProcessMusic+0x2a6>
    5bf0:	3a c0       	rjmp	.+116    	; 0x5c66 <ProcessMusic+0x31a>
    5bf2:	d8 01       	movw	r26, r16
    5bf4:	9c 91       	ld	r25, X
    5bf6:	f6 01       	movw	r30, r12
    5bf8:	80 81       	ld	r24, Z
    5bfa:	98 17       	cp	r25, r24
    5bfc:	08 f4       	brcc	.+2      	; 0x5c00 <ProcessMusic+0x2b4>
    5bfe:	33 c0       	rjmp	.+102    	; 0x5c66 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    5c00:	d8 01       	movw	r26, r16
    5c02:	9c 91       	ld	r25, X
    5c04:	f6 01       	movw	r30, r12
    5c06:	80 81       	ld	r24, Z
    5c08:	98 13       	cpse	r25, r24
    5c0a:	2d c0       	rjmp	.+90     	; 0x5c66 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    5c0c:	ec 89       	ldd	r30, Y+20	; 0x14
    5c0e:	fd 89       	ldd	r31, Y+21	; 0x15
    5c10:	af 01       	movw	r20, r30
    5c12:	4f 5f       	subi	r20, 0xFF	; 255
    5c14:	5f 4f       	sbci	r21, 0xFF	; 255
    5c16:	5d 8b       	std	Y+21, r21	; 0x15
    5c18:	4c 8b       	std	Y+20, r20	; 0x14
    5c1a:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    5c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    5c1e:	31 f4       	brne	.+12     	; 0x5c2c <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    5c20:	88 81       	ld	r24, Y
    5c22:	8f 77       	andi	r24, 0x7F	; 127
    5c24:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    5c26:	1d 8a       	std	Y+21, r1	; 0x15
    5c28:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    5c2a:	1d c0       	rjmp	.+58     	; 0x5c66 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    5c2c:	32 96       	adiw	r30, 0x02	; 2
    5c2e:	fd 8b       	std	Y+21, r31	; 0x15
    5c30:	ec 8b       	std	Y+20, r30	; 0x14
    5c32:	fa 01       	movw	r30, r20
    5c34:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    5c36:	e8 2f       	mov	r30, r24
    5c38:	f0 e0       	ldi	r31, 0x00	; 0
    5c3a:	ee 0f       	add	r30, r30
    5c3c:	ff 1f       	adc	r31, r31
    5c3e:	e2 54       	subi	r30, 0x42	; 66
    5c40:	ff 4f       	sbci	r31, 0xFF	; 255
    5c42:	25 91       	lpm	r18, Z+
    5c44:	34 91       	lpm	r19, Z
    5c46:	65 2d       	mov	r22, r5
    5c48:	ce 01       	movw	r24, r28
    5c4a:	f9 01       	movw	r30, r18
    5c4c:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    5c4e:	ec 89       	ldd	r30, Y+20	; 0x14
    5c50:	fd 89       	ldd	r31, Y+21	; 0x15
    5c52:	cf 01       	movw	r24, r30
    5c54:	01 96       	adiw	r24, 0x01	; 1
    5c56:	9d 8b       	std	Y+21, r25	; 0x15
    5c58:	8c 8b       	std	Y+20, r24	; 0x14
    5c5a:	e4 91       	lpm	r30, Z
    5c5c:	d6 01       	movw	r26, r12
    5c5e:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    5c60:	f8 01       	movw	r30, r16
    5c62:	10 82       	st	Z, r1
    5c64:	cd cf       	rjmp	.-102    	; 0x5c00 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    5c66:	d8 01       	movw	r26, r16
    5c68:	8c 91       	ld	r24, X
    5c6a:	8f 5f       	subi	r24, 0xFF	; 255
    5c6c:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    5c6e:	98 81       	ld	r25, Y
    5c70:	95 ff       	sbrs	r25, 5
    5c72:	6c c0       	rjmp	.+216    	; 0x5d4c <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    5c74:	f4 01       	movw	r30, r8
    5c76:	80 81       	ld	r24, Z
    5c78:	8f 3f       	cpi	r24, 0xFF	; 255
    5c7a:	11 f0       	breq	.+4      	; 0x5c80 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    5c7c:	8f 5f       	subi	r24, 0xFF	; 255
    5c7e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    5c80:	97 fd       	sbrc	r25, 7
    5c82:	04 c0       	rjmp	.+8      	; 0x5c8c <ProcessMusic+0x340>
    5c84:	f8 01       	movw	r30, r16
    5c86:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    5c88:	90 81       	ld	r25, Z
    5c8a:	01 c0       	rjmp	.+2      	; 0x5c8e <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    5c8c:	9f ef       	ldi	r25, 0xFF	; 255
    5c8e:	f8 01       	movw	r30, r16
    5c90:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    5c92:	80 81       	ld	r24, Z
    5c94:	88 23       	and	r24, r24
    5c96:	09 f4       	brne	.+2      	; 0x5c9a <ProcessMusic+0x34e>
    5c98:	4e c0       	rjmp	.+156    	; 0x5d36 <ProcessMusic+0x3ea>
    5c9a:	31 96       	adiw	r30, 0x01	; 1
    5c9c:	50 81       	ld	r21, Z
    5c9e:	55 23       	and	r21, r21
    5ca0:	09 f4       	brne	.+2      	; 0x5ca4 <ProcessMusic+0x358>
    5ca2:	49 c0       	rjmp	.+146    	; 0x5d36 <ProcessMusic+0x3ea>
    5ca4:	99 23       	and	r25, r25
    5ca6:	09 f4       	brne	.+2      	; 0x5caa <ProcessMusic+0x35e>
    5ca8:	46 c0       	rjmp	.+140    	; 0x5d36 <ProcessMusic+0x3ea>
    5caa:	40 91 1e 0b 	lds	r20, 0x0B1E
    5cae:	44 23       	and	r20, r20
    5cb0:	09 f4       	brne	.+2      	; 0x5cb4 <ProcessMusic+0x368>
    5cb2:	41 c0       	rjmp	.+130    	; 0x5d36 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    5cb4:	89 9f       	mul	r24, r25
    5cb6:	c0 01       	movw	r24, r0
    5cb8:	11 24       	eor	r1, r1
    5cba:	93 95       	inc	r25
				uVol>>=8;
    5cbc:	89 2f       	mov	r24, r25
    5cbe:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    5cc0:	58 9f       	mul	r21, r24
    5cc2:	90 01       	movw	r18, r0
    5cc4:	59 9f       	mul	r21, r25
    5cc6:	30 0d       	add	r19, r0
    5cc8:	11 24       	eor	r1, r1
    5cca:	c9 01       	movw	r24, r18
    5ccc:	93 95       	inc	r25
				uVol>>=8;
    5cce:	89 2f       	mov	r24, r25
    5cd0:	99 27       	eor	r25, r25
    5cd2:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    5cd4:	50 81       	ld	r21, Z
    5cd6:	58 9f       	mul	r21, r24
    5cd8:	90 01       	movw	r18, r0
    5cda:	59 9f       	mul	r21, r25
    5cdc:	30 0d       	add	r19, r0
    5cde:	11 24       	eor	r1, r1
    5ce0:	33 95       	inc	r19
				uVol>>=8;
    5ce2:	23 2f       	mov	r18, r19
    5ce4:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    5ce6:	42 9f       	mul	r20, r18
    5ce8:	c0 01       	movw	r24, r0
    5cea:	43 9f       	mul	r20, r19
    5cec:	90 0d       	add	r25, r0
    5cee:	11 24       	eor	r1, r1
    5cf0:	93 95       	inc	r25
				uVol>>=8;
    5cf2:	89 2f       	mov	r24, r25
    5cf4:	99 27       	eor	r25, r25
    5cf6:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    5cf8:	20 81       	ld	r18, Z
    5cfa:	22 23       	and	r18, r18
    5cfc:	f1 f0       	breq	.+60     	; 0x5d3a <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    5cfe:	d5 01       	movw	r26, r10
    5d00:	ec 91       	ld	r30, X
    5d02:	f0 e0       	ldi	r31, 0x00	; 0
    5d04:	e0 50       	subi	r30, 0x00	; 0
    5d06:	f0 4a       	sbci	r31, 0xA0	; 160
    5d08:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    5d0a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    5d0c:	2e 9f       	mul	r18, r30
    5d0e:	f0 01       	movw	r30, r0
    5d10:	11 24       	eor	r1, r1
    5d12:	f3 95       	inc	r31
					tVol>>=8;
    5d14:	ef 2f       	mov	r30, r31
    5d16:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    5d18:	a3 01       	movw	r20, r6
    5d1a:	4e 1b       	sub	r20, r30
    5d1c:	5f 0b       	sbc	r21, r31
    5d1e:	48 9f       	mul	r20, r24
    5d20:	90 01       	movw	r18, r0
    5d22:	49 9f       	mul	r20, r25
    5d24:	30 0d       	add	r19, r0
    5d26:	58 9f       	mul	r21, r24
    5d28:	30 0d       	add	r19, r0
    5d2a:	11 24       	eor	r1, r1
    5d2c:	c9 01       	movw	r24, r18
    5d2e:	93 95       	inc	r25
					uVol>>=8;
    5d30:	89 2f       	mov	r24, r25
    5d32:	99 27       	eor	r25, r25
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    5d36:	80 e0       	ldi	r24, 0x00	; 0
    5d38:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    5d3a:	f5 01       	movw	r30, r10
    5d3c:	30 81       	ld	r19, Z
    5d3e:	f8 01       	movw	r30, r16
    5d40:	3a 97       	sbiw	r30, 0x0a	; 10
    5d42:	20 81       	ld	r18, Z
    5d44:	23 0f       	add	r18, r19
    5d46:	d5 01       	movw	r26, r10
    5d48:	2c 93       	st	X, r18
    5d4a:	02 c0       	rjmp	.+4      	; 0x5d50 <ProcessMusic+0x404>

		}else{
			uVol=0;
    5d4c:	80 e0       	ldi	r24, 0x00	; 0
    5d4e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    5d50:	f7 01       	movw	r30, r14
    5d52:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    5d54:	53 94       	inc	r5
    5d56:	66 96       	adiw	r28, 0x16	; 22
    5d58:	f6 e0       	ldi	r31, 0x06	; 6
    5d5a:	ef 0e       	add	r14, r31
    5d5c:	f1 1c       	adc	r15, r1
    5d5e:	86 e1       	ldi	r24, 0x16	; 22
    5d60:	a8 0e       	add	r10, r24
    5d62:	b1 1c       	adc	r11, r1
    5d64:	0a 5e       	subi	r16, 0xEA	; 234
    5d66:	1f 4f       	sbci	r17, 0xFF	; 255
    5d68:	96 e1       	ldi	r25, 0x16	; 22
    5d6a:	c9 0e       	add	r12, r25
    5d6c:	d1 1c       	adc	r13, r1
    5d6e:	a6 e1       	ldi	r26, 0x16	; 22
    5d70:	8a 0e       	add	r8, r26
    5d72:	91 1c       	adc	r9, r1
    5d74:	b4 e0       	ldi	r27, 0x04	; 4
    5d76:	5b 12       	cpse	r5, r27
    5d78:	34 cf       	rjmp	.-408    	; 0x5be2 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    5d7a:	df 91       	pop	r29
    5d7c:	cf 91       	pop	r28
    5d7e:	1f 91       	pop	r17
    5d80:	0f 91       	pop	r16
    5d82:	ff 90       	pop	r15
    5d84:	ef 90       	pop	r14
    5d86:	df 90       	pop	r13
    5d88:	cf 90       	pop	r12
    5d8a:	bf 90       	pop	r11
    5d8c:	af 90       	pop	r10
    5d8e:	9f 90       	pop	r9
    5d90:	8f 90       	pop	r8
    5d92:	7f 90       	pop	r7
    5d94:	6f 90       	pop	r6
    5d96:	5f 90       	pop	r5
    5d98:	08 95       	ret

00005d9a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    5d9a:	80 93 1e 0b 	sts	0x0B1E, r24
    5d9e:	08 95       	ret

00005da0 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    5da0:	99 27       	eor	r25, r25
	clr r23
    5da2:	77 27       	eor	r23, r23

00005da4 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    5da4:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    5da6:	fe e5       	ldi	r31, 0x5E	; 94
	lsl r22
    5da8:	66 0f       	add	r22, r22
	rol r23
    5daa:	77 1f       	adc	r23, r23
	add ZL,r22
    5dac:	e6 0f       	add	r30, r22
	adc ZH,r23	
    5dae:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    5db0:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    5db2:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    5db4:	e2 e9       	ldi	r30, 0x92	; 146
	ldi ZH,hi8(mixerStruct)
    5db6:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    5db8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    5dba:	28 9f       	mul	r18, r24
	add ZL,r0
    5dbc:	e0 0d       	add	r30, r0
	adc ZH,r1
    5dbe:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    5dc0:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    5dc2:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    5dc4:	11 24       	eor	r1, r1
	

	ret
    5dc6:	08 95       	ret

00005dc8 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    5dc8:	99 27       	eor	r25, r25
	clr r23
    5dca:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    5dcc:	e2 e9       	ldi	r30, 0x92	; 146
	ldi ZH,hi8(mixerStruct)
    5dce:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    5dd0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    5dd2:	28 9f       	mul	r18, r24
	add ZL,r0
    5dd4:	e0 0d       	add	r30, r0
	adc ZH,r1
    5dd6:	f1 1d       	adc	r31, r1
	sts tr4_params,r22	
	rjmp esmw
smw2:
#endif

	ldi r23,hi8(waves)
    5dd8:	70 e6       	ldi	r23, 0x60	; 96
	add r23,r22
    5dda:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    5ddc:	75 83       	std	Z+5, r23	; 0x05

00005dde <esmw>:

esmw:
	clr r1	
    5dde:	11 24       	eor	r1, r1
	ret
    5de0:	08 95       	ret
	...

00005e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    5e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    5e02:	80 93 91 0a 	sts	0x0A91, r24
	ret
    5e06:	08 95       	ret

00005e08 <steptable>:
    5e08:	22 00       	.word	0x0022	; ????
    5e0a:	24 00       	.word	0x0024	; ????
    5e0c:	26 00       	.word	0x0026	; ????
    5e0e:	28 00       	.word	0x0028	; ????
    5e10:	2b 00       	.word	0x002b	; ????
    5e12:	2d 00       	.word	0x002d	; ????
    5e14:	30 00       	.word	0x0030	; ????
    5e16:	33 00       	.word	0x0033	; ????
    5e18:	36 00       	.word	0x0036	; ????
    5e1a:	39 00       	.word	0x0039	; ????
    5e1c:	3d 00       	.word	0x003d	; ????
    5e1e:	40 00       	.word	0x0040	; ????
    5e20:	44 00       	.word	0x0044	; ????
    5e22:	48 00       	.word	0x0048	; ????
    5e24:	4c 00       	.word	0x004c	; ????
    5e26:	51 00       	.word	0x0051	; ????
    5e28:	56 00       	.word	0x0056	; ????
    5e2a:	5b 00       	.word	0x005b	; ????
    5e2c:	60 00       	.word	0x0060	; ????
    5e2e:	66 00       	.word	0x0066	; ????
    5e30:	6c 00       	.word	0x006c	; ????
    5e32:	73 00       	.word	0x0073	; ????
    5e34:	79 00       	.word	0x0079	; ????
    5e36:	81 00       	.word	0x0081	; ????
    5e38:	88 00       	.word	0x0088	; ????
    5e3a:	90 00       	.word	0x0090	; ????
    5e3c:	99 00       	.word	0x0099	; ????
    5e3e:	a2 00       	.word	0x00a2	; ????
    5e40:	ac 00       	.word	0x00ac	; ????
    5e42:	b6 00       	.word	0x00b6	; ????
    5e44:	c1 00       	.word	0x00c1	; ????
    5e46:	cc 00       	.word	0x00cc	; ????
    5e48:	d8 00       	.word	0x00d8	; ????
    5e4a:	e5 00       	.word	0x00e5	; ????
    5e4c:	f3 00       	.word	0x00f3	; ????
    5e4e:	01 01       	movw	r0, r2
    5e50:	10 01       	movw	r2, r0
    5e52:	21 01       	movw	r4, r2
    5e54:	32 01       	movw	r6, r4
    5e56:	44 01       	movw	r8, r8
    5e58:	57 01       	movw	r10, r14
    5e5a:	6c 01       	movw	r12, r24
    5e5c:	81 01       	movw	r16, r2
    5e5e:	98 01       	movw	r18, r16
    5e60:	b0 01       	movw	r22, r0
    5e62:	ca 01       	movw	r24, r20
    5e64:	e5 01       	movw	r28, r10
    5e66:	02 02       	muls	r16, r18
    5e68:	21 02       	muls	r18, r17
    5e6a:	41 02       	muls	r20, r17
    5e6c:	64 02       	muls	r22, r20
    5e6e:	88 02       	muls	r24, r24
    5e70:	ae 02       	muls	r26, r30
    5e72:	d7 02       	muls	r29, r23
    5e74:	03 03       	mulsu	r16, r19
    5e76:	30 03       	mulsu	r19, r16
    5e78:	61 03       	mulsu	r22, r17
    5e7a:	94 03       	fmuls	r17, r20
    5e7c:	cb 03       	fmulsu	r20, r19
    5e7e:	05 04       	cpc	r0, r5
    5e80:	42 04       	cpc	r4, r2
    5e82:	83 04       	cpc	r8, r3
    5e84:	c7 04       	cpc	r12, r7
    5e86:	10 05       	cpc	r17, r0
    5e88:	5d 05       	cpc	r21, r13
    5e8a:	af 05       	cpc	r26, r15
    5e8c:	05 06       	cpc	r0, r21
    5e8e:	61 06       	cpc	r6, r17
    5e90:	c2 06       	cpc	r12, r18
    5e92:	29 07       	cpc	r18, r25
    5e94:	96 07       	cpc	r25, r22
    5e96:	09 08       	sbc	r0, r9
    5e98:	83 08       	sbc	r8, r3
    5e9a:	05 09       	sbc	r16, r5
    5e9c:	8e 09       	sbc	r24, r14
    5e9e:	20 0a       	sbc	r2, r16
    5ea0:	ba 0a       	sbc	r11, r26
    5ea2:	5d 0b       	sbc	r21, r29
    5ea4:	0a 0c       	add	r0, r10
    5ea6:	c1 0c       	add	r12, r1
    5ea8:	84 0d       	add	r24, r4
    5eaa:	51 0e       	add	r5, r17
    5eac:	2b 0f       	add	r18, r27
    5eae:	12 10       	cpse	r1, r2
    5eb0:	07 11       	cpse	r16, r7
    5eb2:	0a 12       	cpse	r0, r26
    5eb4:	1d 13       	cpse	r17, r29
    5eb6:	40 14       	cp	r4, r0
    5eb8:	74 15       	cp	r23, r4
    5eba:	ba 16       	cp	r11, r26
    5ebc:	14 18       	sub	r1, r4
    5ebe:	83 19       	sub	r24, r3
    5ec0:	07 1b       	sub	r16, r23
    5ec2:	a3 1c       	adc	r10, r3
    5ec4:	57 1e       	adc	r5, r23
    5ec6:	24 20       	and	r2, r4
    5ec8:	0e 22       	and	r0, r30
    5eca:	14 24       	eor	r1, r4
    5ecc:	39 26       	eor	r3, r25
    5ece:	7f 28       	or	r7, r15
    5ed0:	e8 2a       	or	r14, r24
    5ed2:	75 2d       	mov	r23, r5
    5ed4:	29 30       	cpi	r18, 0x09	; 9
    5ed6:	06 33       	cpi	r16, 0x36	; 54
    5ed8:	0f 36       	cpi	r16, 0x6F	; 111
    5eda:	45 39       	cpi	r20, 0x95	; 149
    5edc:	ad 3c       	cpi	r26, 0xCD	; 205
    5ede:	49 40       	sbci	r20, 0x09	; 9
    5ee0:	1b 44       	sbci	r17, 0x4B	; 75
    5ee2:	28 48       	sbci	r18, 0x88	; 136
    5ee4:	73 4c       	sbci	r23, 0xC3	; 195
    5ee6:	fe 50       	subi	r31, 0x0E	; 14
    5ee8:	cf 55       	subi	r28, 0x5F	; 95
    5eea:	ea 5a       	subi	r30, 0xAA	; 170
    5eec:	51 60       	ori	r21, 0x01	; 1
    5eee:	0c 66       	ori	r16, 0x6C	; 108
    5ef0:	1d 6c       	ori	r17, 0xCD	; 205
    5ef2:	8b 72       	andi	r24, 0x2B	; 43
    5ef4:	5a 79       	andi	r21, 0x9A	; 154
    5ef6:	92 80       	ldd	r9, Z+2	; 0x02
    5ef8:	37 88       	ldd	r3, Z+23	; 0x17
    5efa:	50 90 e5 98 	lds	r5, 0x98E5
    5efe:	fd a1       	ldd	r31, Y+37	; 0x25
    5f00:	9f ab       	std	Y+55, r25	; 0x37
    5f02:	d3 b5       	in	r29, 0x23	; 35
    5f04:	a3 c0       	rjmp	.+326    	; 0x604c <waves+0x4c>
	...

00006000 <waves>:
    6000:	00 03       	mulsu	r16, r16
    6002:	06 09       	sbc	r16, r6
    6004:	0c 10       	cpse	r0, r12
    6006:	13 16       	cp	r1, r19
    6008:	19 1c       	adc	r1, r9
    600a:	1f 22       	and	r1, r31
    600c:	25 28       	or	r2, r5
    600e:	2b 2e       	mov	r2, r27
    6010:	31 33       	cpi	r19, 0x31	; 49
    6012:	36 39       	cpi	r19, 0x96	; 150
    6014:	3c 3f       	cpi	r19, 0xFC	; 252
    6016:	41 44       	sbci	r20, 0x41	; 65
    6018:	47 49       	sbci	r20, 0x97	; 151
    601a:	4c 4e       	sbci	r20, 0xEC	; 236
    601c:	51 53       	subi	r21, 0x31	; 49
    601e:	55 58       	subi	r21, 0x85	; 133
    6020:	5a 5c       	subi	r21, 0xCA	; 202
    6022:	5e 60       	ori	r21, 0x0E	; 14
    6024:	62 64       	ori	r22, 0x42	; 66
    6026:	66 68       	ori	r22, 0x86	; 134
    6028:	6a 6b       	ori	r22, 0xBA	; 186
    602a:	6d 6f       	ori	r22, 0xFD	; 253
    602c:	70 71       	andi	r23, 0x10	; 16
    602e:	73 74       	andi	r23, 0x43	; 67
    6030:	75 76       	andi	r23, 0x65	; 101
    6032:	78 79       	andi	r23, 0x98	; 152
    6034:	7a 7a       	andi	r23, 0xAA	; 170
    6036:	7b 7c       	andi	r23, 0xCB	; 203
    6038:	7d 7d       	andi	r23, 0xDD	; 221
    603a:	7e 7e       	andi	r23, 0xEE	; 238
    603c:	7e 7f       	andi	r23, 0xFE	; 254
    603e:	7f 7f       	andi	r23, 0xFF	; 255
    6040:	7f 7f       	andi	r23, 0xFF	; 255
    6042:	7f 7f       	andi	r23, 0xFF	; 255
    6044:	7e 7e       	andi	r23, 0xEE	; 238
    6046:	7e 7d       	andi	r23, 0xDE	; 222
    6048:	7d 7c       	andi	r23, 0xCD	; 205
    604a:	7b 7a       	andi	r23, 0xAB	; 171
    604c:	7a 79       	andi	r23, 0x9A	; 154
    604e:	78 76       	andi	r23, 0x68	; 104
    6050:	75 74       	andi	r23, 0x45	; 69
    6052:	73 71       	andi	r23, 0x13	; 19
    6054:	70 6f       	ori	r23, 0xF0	; 240
    6056:	6d 6b       	ori	r22, 0xBD	; 189
    6058:	6a 68       	ori	r22, 0x8A	; 138
    605a:	66 64       	ori	r22, 0x46	; 70
    605c:	62 60       	ori	r22, 0x02	; 2
    605e:	5e 5c       	subi	r21, 0xCE	; 206
    6060:	5a 58       	subi	r21, 0x8A	; 138
    6062:	55 53       	subi	r21, 0x35	; 53
    6064:	51 4e       	sbci	r21, 0xE1	; 225
    6066:	4c 49       	sbci	r20, 0x9C	; 156
    6068:	47 44       	sbci	r20, 0x47	; 71
    606a:	41 3f       	cpi	r20, 0xF1	; 241
    606c:	3c 39       	cpi	r19, 0x9C	; 156
    606e:	36 33       	cpi	r19, 0x36	; 54
    6070:	31 2e       	mov	r3, r17
    6072:	2b 28       	or	r2, r11
    6074:	25 22       	and	r2, r21
    6076:	1f 1c       	adc	r1, r15
    6078:	19 16       	cp	r1, r25
    607a:	13 10       	cpse	r1, r3
    607c:	0c 09       	sbc	r16, r12
    607e:	06 03       	mulsu	r16, r22
    6080:	00 fd       	sbrc	r16, 0
    6082:	fa f7       	brpl	.-2      	; 0x6082 <waves+0x82>
    6084:	f4 f0       	brlt	.+60     	; 0x60c2 <waves+0xc2>
    6086:	ed ea       	ldi	r30, 0xAD	; 173
    6088:	e7 e4       	ldi	r30, 0x47	; 71
    608a:	e1 de       	rcall	.-574    	; 0x5e4e <steptable+0x46>
    608c:	db d8       	rcall	.-3658   	; 0x5244 <mix_loop+0x96>
    608e:	d5 d2       	rcall	.+1450   	; 0x663a <waves+0x63a>
    6090:	cf cd       	rjmp	.-1122   	; 0x5c30 <ProcessMusic+0x2e4>
    6092:	ca c7       	rjmp	.+3988   	; 0x7028 <load_eeprom+0x4>
    6094:	c4 c1       	rjmp	.+904    	; 0x641e <waves+0x41e>
    6096:	bf bc       	out	0x2f, r11	; 47
    6098:	b9 b7       	in	r27, 0x39	; 57
    609a:	b4 b2       	in	r11, 0x14	; 20
    609c:	af ad       	ldd	r26, Y+63	; 0x3f
    609e:	ab a8       	ldd	r10, Y+51	; 0x33
    60a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    60a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    60a4:	9e 9c       	mul	r9, r14
    60a6:	9a 98       	cbi	0x13, 2	; 19
    60a8:	96 95       	lsr	r25
    60aa:	93 91       	.word	0x9193	; ????
    60ac:	90 8f       	std	Z+24, r25	; 0x18
    60ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    60b0:	8b 8a       	std	Y+19, r8	; 0x13
    60b2:	88 87       	std	Y+8, r24	; 0x08
    60b4:	86 86       	std	Z+14, r8	; 0x0e
    60b6:	85 84       	ldd	r8, Z+13	; 0x0d
    60b8:	83 83       	std	Z+3, r24	; 0x03
    60ba:	82 82       	std	Z+2, r8	; 0x02
    60bc:	82 81       	ldd	r24, Z+2	; 0x02
    60be:	81 81       	ldd	r24, Z+1	; 0x01
    60c0:	81 81       	ldd	r24, Z+1	; 0x01
    60c2:	81 81       	ldd	r24, Z+1	; 0x01
    60c4:	82 82       	std	Z+2, r8	; 0x02
    60c6:	82 83       	std	Z+2, r24	; 0x02
    60c8:	83 84       	ldd	r8, Z+11	; 0x0b
    60ca:	85 86       	std	Z+13, r8	; 0x0d
    60cc:	86 87       	std	Z+14, r24	; 0x0e
    60ce:	88 8a       	std	Y+16, r8	; 0x10
    60d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    60d2:	8d 8f       	std	Y+29, r24	; 0x1d
    60d4:	90 91 93 95 	lds	r25, 0x9593
    60d8:	96 98       	cbi	0x12, 6	; 18
    60da:	9a 9c       	mul	r9, r10
    60dc:	9e a0       	ldd	r9, Y+38	; 0x26
    60de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    60e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    60e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    60e4:	af b2       	in	r10, 0x1f	; 31
    60e6:	b4 b7       	in	r27, 0x34	; 52
    60e8:	b9 bc       	out	0x29, r11	; 41
    60ea:	bf c1       	rjmp	.+894    	; 0x646a <waves+0x46a>
    60ec:	c4 c7       	rjmp	.+3976   	; 0x7076 <update_splash+0x2>
    60ee:	ca cd       	rjmp	.-1132   	; 0x5c84 <ProcessMusic+0x338>
    60f0:	cf d2       	rcall	.+1438   	; 0x6690 <waves+0x690>
    60f2:	d5 d8       	rcall	.-3670   	; 0x529e <update_sound+0x14>
    60f4:	db de       	rcall	.-586    	; 0x5eac <steptable+0xa4>
    60f6:	e1 e4       	ldi	r30, 0x41	; 65
    60f8:	e7 ea       	ldi	r30, 0xA7	; 167
    60fa:	ed f0       	brhs	.+58     	; 0x6136 <waves+0x136>
    60fc:	f4 f7       	brge	.-4      	; 0x60fa <waves+0xfa>
    60fe:	fa fd       	.word	0xfdfa	; ????
    6100:	80 81       	ld	r24, Z
    6102:	82 83       	std	Z+2, r24	; 0x02
    6104:	84 85       	ldd	r24, Z+12	; 0x0c
    6106:	86 87       	std	Z+14, r24	; 0x0e
    6108:	88 89       	ldd	r24, Y+16	; 0x10
    610a:	8a 8b       	std	Y+18, r24	; 0x12
    610c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    610e:	8e 8f       	std	Y+30, r24	; 0x1e
    6110:	90 91 92 93 	lds	r25, 0x9392
    6114:	94 95       	.word	0x9594	; ????
    6116:	96 97       	sbiw	r26, 0x26	; 38
    6118:	98 99       	sbic	0x13, 0	; 19
    611a:	9a 9b       	sbis	0x13, 2	; 19
    611c:	9c 9d       	mul	r25, r12
    611e:	9e 9f       	mul	r25, r30
    6120:	a0 a1       	ldd	r26, Z+32	; 0x20
    6122:	a2 a3       	std	Z+34, r26	; 0x22
    6124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    6126:	a6 a7       	std	Z+46, r26	; 0x2e
    6128:	a8 a9       	ldd	r26, Y+48	; 0x30
    612a:	aa ab       	std	Y+50, r26	; 0x32
    612c:	ac ad       	ldd	r26, Y+60	; 0x3c
    612e:	ae af       	std	Y+62, r26	; 0x3e
    6130:	b0 b1       	in	r27, 0x00	; 0
    6132:	b2 b3       	in	r27, 0x12	; 18
    6134:	b4 b5       	in	r27, 0x24	; 36
    6136:	b6 b7       	in	r27, 0x36	; 54
    6138:	b8 b9       	out	0x08, r27	; 8
    613a:	ba bb       	out	0x1a, r27	; 26
    613c:	bc bd       	out	0x2c, r27	; 44
    613e:	be bf       	out	0x3e, r27	; 62
    6140:	c0 c1       	rjmp	.+896    	; 0x64c2 <waves+0x4c2>
    6142:	c2 c3       	rjmp	.+1924   	; 0x68c8 <waves+0x8c8>
    6144:	c4 c5       	rjmp	.+2952   	; 0x6cce <DrawMap2+0x26>
    6146:	c6 c7       	rjmp	.+3980   	; 0x70d4 <update_splash+0x60>
    6148:	c8 c9       	rjmp	.-3184   	; 0x54da <EepromWriteBlock+0x42>
    614a:	ca cb       	rjmp	.-2156   	; 0x58e0 <TriggerNote+0x2>
    614c:	cc cd       	rjmp	.-1128   	; 0x5ce6 <ProcessMusic+0x39a>
    614e:	ce cf       	rjmp	.-100    	; 0x60ec <waves+0xec>
    6150:	d0 d1       	rcall	.+928    	; 0x64f2 <waves+0x4f2>
    6152:	d2 d3       	rcall	.+1956   	; 0x68f8 <waves+0x8f8>
    6154:	d4 d5       	rcall	.+2984   	; 0x6cfe <DrawMap2+0x56>
    6156:	d6 d7       	rcall	.+4012   	; 0x7104 <update_splash+0x90>
    6158:	d8 d9       	rcall	.-3152   	; 0x550a <EepromWriteBlock+0x72>
    615a:	da db       	rcall	.-2124   	; 0x5910 <TriggerNote+0x32>
    615c:	dc dd       	rcall	.-1096   	; 0x5d16 <ProcessMusic+0x3ca>
    615e:	de df       	rcall	.-68     	; 0x611c <waves+0x11c>
    6160:	e0 e1       	ldi	r30, 0x10	; 16
    6162:	e2 e3       	ldi	r30, 0x32	; 50
    6164:	e4 e5       	ldi	r30, 0x54	; 84
    6166:	e6 e7       	ldi	r30, 0x76	; 118
    6168:	e8 e9       	ldi	r30, 0x98	; 152
    616a:	ea eb       	ldi	r30, 0xBA	; 186
    616c:	ec ed       	ldi	r30, 0xDC	; 220
    616e:	ee ef       	ldi	r30, 0xFE	; 254
    6170:	f0 f1       	brcs	.+124    	; 0x61ee <waves+0x1ee>
    6172:	f2 f3       	brmi	.-4      	; 0x6170 <waves+0x170>
    6174:	f4 f5       	brge	.+124    	; 0x61f2 <waves+0x1f2>
    6176:	f6 f7       	brtc	.-4      	; 0x6174 <waves+0x174>
    6178:	f8 f9       	.word	0xf9f8	; ????
    617a:	fa fb       	.word	0xfbfa	; ????
    617c:	fc fd       	.word	0xfdfc	; ????
    617e:	fe ff       	.word	0xfffe	; ????
    6180:	00 01       	movw	r0, r0
    6182:	02 03       	mulsu	r16, r18
    6184:	04 05       	cpc	r16, r4
    6186:	06 07       	cpc	r16, r22
    6188:	08 09       	sbc	r16, r8
    618a:	0a 0b       	sbc	r16, r26
    618c:	0c 0d       	add	r16, r12
    618e:	0e 0f       	add	r16, r30
    6190:	10 11       	cpse	r17, r0
    6192:	12 13       	cpse	r17, r18
    6194:	14 15       	cp	r17, r4
    6196:	16 17       	cp	r17, r22
    6198:	18 19       	sub	r17, r8
    619a:	1a 1b       	sub	r17, r26
    619c:	1c 1d       	adc	r17, r12
    619e:	1e 1f       	adc	r17, r30
    61a0:	20 21       	and	r18, r0
    61a2:	22 23       	and	r18, r18
    61a4:	24 25       	eor	r18, r4
    61a6:	26 27       	eor	r18, r22
    61a8:	28 29       	or	r18, r8
    61aa:	2a 2b       	or	r18, r26
    61ac:	2c 2d       	mov	r18, r12
    61ae:	2e 2f       	mov	r18, r30
    61b0:	30 31       	cpi	r19, 0x10	; 16
    61b2:	32 33       	cpi	r19, 0x32	; 50
    61b4:	34 35       	cpi	r19, 0x54	; 84
    61b6:	36 37       	cpi	r19, 0x76	; 118
    61b8:	38 39       	cpi	r19, 0x98	; 152
    61ba:	3a 3b       	cpi	r19, 0xBA	; 186
    61bc:	3c 3d       	cpi	r19, 0xDC	; 220
    61be:	3e 3f       	cpi	r19, 0xFE	; 254
    61c0:	40 41       	sbci	r20, 0x10	; 16
    61c2:	42 43       	sbci	r20, 0x32	; 50
    61c4:	44 45       	sbci	r20, 0x54	; 84
    61c6:	46 47       	sbci	r20, 0x76	; 118
    61c8:	48 49       	sbci	r20, 0x98	; 152
    61ca:	4a 4b       	sbci	r20, 0xBA	; 186
    61cc:	4c 4d       	sbci	r20, 0xDC	; 220
    61ce:	4e 4f       	sbci	r20, 0xFE	; 254
    61d0:	50 51       	subi	r21, 0x10	; 16
    61d2:	52 53       	subi	r21, 0x32	; 50
    61d4:	54 55       	subi	r21, 0x54	; 84
    61d6:	56 57       	subi	r21, 0x76	; 118
    61d8:	58 59       	subi	r21, 0x98	; 152
    61da:	5a 5b       	subi	r21, 0xBA	; 186
    61dc:	5c 5d       	subi	r21, 0xDC	; 220
    61de:	5e 5f       	subi	r21, 0xFE	; 254
    61e0:	60 61       	ori	r22, 0x10	; 16
    61e2:	62 63       	ori	r22, 0x32	; 50
    61e4:	64 65       	ori	r22, 0x54	; 84
    61e6:	66 67       	ori	r22, 0x76	; 118
    61e8:	68 69       	ori	r22, 0x98	; 152
    61ea:	6a 6b       	ori	r22, 0xBA	; 186
    61ec:	6c 6d       	ori	r22, 0xDC	; 220
    61ee:	6e 6f       	ori	r22, 0xFE	; 254
    61f0:	70 71       	andi	r23, 0x10	; 16
    61f2:	72 73       	andi	r23, 0x32	; 50
    61f4:	74 75       	andi	r23, 0x54	; 84
    61f6:	76 77       	andi	r23, 0x76	; 118
    61f8:	78 79       	andi	r23, 0x98	; 152
    61fa:	7a 7b       	andi	r23, 0xBA	; 186
    61fc:	7c 7d       	andi	r23, 0xDC	; 220
    61fe:	7e 7f       	andi	r23, 0xFE	; 254
    6200:	00 02       	muls	r16, r16
    6202:	04 06       	cpc	r0, r20
    6204:	08 0a       	sbc	r0, r24
    6206:	0c 0e       	add	r0, r28
    6208:	10 12       	cpse	r1, r16
    620a:	14 16       	cp	r1, r20
    620c:	18 1a       	sub	r1, r24
    620e:	1c 1e       	adc	r1, r28
    6210:	20 22       	and	r2, r16
    6212:	24 26       	eor	r2, r20
    6214:	28 2a       	or	r2, r24
    6216:	2c 2e       	mov	r2, r28
    6218:	30 32       	cpi	r19, 0x20	; 32
    621a:	34 36       	cpi	r19, 0x64	; 100
    621c:	38 3a       	cpi	r19, 0xA8	; 168
    621e:	3c 3e       	cpi	r19, 0xEC	; 236
    6220:	40 42       	sbci	r20, 0x20	; 32
    6222:	44 46       	sbci	r20, 0x64	; 100
    6224:	48 4a       	sbci	r20, 0xA8	; 168
    6226:	4c 4e       	sbci	r20, 0xEC	; 236
    6228:	50 52       	subi	r21, 0x20	; 32
    622a:	54 56       	subi	r21, 0x64	; 100
    622c:	58 5a       	subi	r21, 0xA8	; 168
    622e:	5c 5e       	subi	r21, 0xEC	; 236
    6230:	60 62       	ori	r22, 0x20	; 32
    6232:	64 66       	ori	r22, 0x64	; 100
    6234:	68 6a       	ori	r22, 0xA8	; 168
    6236:	6c 6e       	ori	r22, 0xEC	; 236
    6238:	70 72       	andi	r23, 0x20	; 32
    623a:	74 76       	andi	r23, 0x64	; 100
    623c:	78 7a       	andi	r23, 0xA8	; 168
    623e:	7c 7e       	andi	r23, 0xEC	; 236
    6240:	7f 7d       	andi	r23, 0xDF	; 223
    6242:	7b 79       	andi	r23, 0x9B	; 155
    6244:	77 75       	andi	r23, 0x57	; 87
    6246:	73 71       	andi	r23, 0x13	; 19
    6248:	6f 6d       	ori	r22, 0xDF	; 223
    624a:	6b 69       	ori	r22, 0x9B	; 155
    624c:	67 65       	ori	r22, 0x57	; 87
    624e:	63 61       	ori	r22, 0x13	; 19
    6250:	5f 5d       	subi	r21, 0xDF	; 223
    6252:	5b 59       	subi	r21, 0x9B	; 155
    6254:	57 55       	subi	r21, 0x57	; 87
    6256:	53 51       	subi	r21, 0x13	; 19
    6258:	4f 4d       	sbci	r20, 0xDF	; 223
    625a:	4b 49       	sbci	r20, 0x9B	; 155
    625c:	47 45       	sbci	r20, 0x57	; 87
    625e:	43 41       	sbci	r20, 0x13	; 19
    6260:	3f 3d       	cpi	r19, 0xDF	; 223
    6262:	3b 39       	cpi	r19, 0x9B	; 155
    6264:	37 35       	cpi	r19, 0x57	; 87
    6266:	33 31       	cpi	r19, 0x13	; 19
    6268:	2f 2d       	mov	r18, r15
    626a:	2b 29       	or	r18, r11
    626c:	27 25       	eor	r18, r7
    626e:	23 21       	and	r18, r3
    6270:	1f 1d       	adc	r17, r15
    6272:	1b 19       	sub	r17, r11
    6274:	17 15       	cp	r17, r7
    6276:	13 11       	cpse	r17, r3
    6278:	0f 0d       	add	r16, r15
    627a:	0b 09       	sbc	r16, r11
    627c:	07 05       	cpc	r16, r7
    627e:	03 01       	movw	r0, r6
    6280:	ff fd       	.word	0xfdff	; ????
    6282:	fb f9       	.word	0xf9fb	; ????
    6284:	f7 f5       	brid	.+124    	; 0x6302 <waves+0x302>
    6286:	f3 f1       	brvs	.+124    	; 0x6304 <waves+0x304>
    6288:	ef ed       	ldi	r30, 0xDF	; 223
    628a:	eb e9       	ldi	r30, 0x9B	; 155
    628c:	e7 e5       	ldi	r30, 0x57	; 87
    628e:	e3 e1       	ldi	r30, 0x13	; 19
    6290:	df dd       	rcall	.-1090   	; 0x5e50 <steptable+0x48>
    6292:	db d9       	rcall	.-3146   	; 0x564a <PatchCommand11+0x18>
    6294:	d7 d5       	rcall	.+2990   	; 0x6e44 <DisplayLogo+0x32>
    6296:	d3 d1       	rcall	.+934    	; 0x663e <waves+0x63e>
    6298:	cf cd       	rjmp	.-1122   	; 0x5e38 <steptable+0x30>
    629a:	cb c9       	rjmp	.-3178   	; 0x5632 <PatchCommand11>
    629c:	c7 c5       	rjmp	.+2958   	; 0x6e2c <DisplayLogo+0x1a>
    629e:	c3 c1       	rjmp	.+902    	; 0x6626 <waves+0x626>
    62a0:	bf bd       	out	0x2f, r27	; 47
    62a2:	bb b9       	out	0x0b, r27	; 11
    62a4:	b7 b5       	in	r27, 0x27	; 39
    62a6:	b3 b1       	in	r27, 0x03	; 3
    62a8:	af ad       	ldd	r26, Y+63	; 0x3f
    62aa:	ab a9       	ldd	r26, Y+51	; 0x33
    62ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    62ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    62b0:	9f 9d       	mul	r25, r15
    62b2:	9b 99       	sbic	0x13, 3	; 19
    62b4:	97 95       	ror	r25
    62b6:	93 91       	.word	0x9193	; ????
    62b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    62ba:	8b 89       	ldd	r24, Y+19	; 0x13
    62bc:	87 85       	ldd	r24, Z+15	; 0x0f
    62be:	83 81       	ldd	r24, Z+3	; 0x03
    62c0:	80 82       	st	Z, r8
    62c2:	84 86       	std	Z+12, r8	; 0x0c
    62c4:	88 8a       	std	Y+16, r8	; 0x10
    62c6:	8c 8e       	std	Y+28, r8	; 0x1c
    62c8:	90 92 94 96 	sts	0x9694, r9
    62cc:	98 9a       	sbi	0x13, 0	; 19
    62ce:	9c 9e       	mul	r9, r28
    62d0:	a0 a2       	std	Z+32, r10	; 0x20
    62d2:	a4 a6       	std	Z+44, r10	; 0x2c
    62d4:	a8 aa       	std	Y+48, r10	; 0x30
    62d6:	ac ae       	std	Y+60, r10	; 0x3c
    62d8:	b0 b2       	in	r11, 0x10	; 16
    62da:	b4 b6       	in	r11, 0x34	; 52
    62dc:	b8 ba       	out	0x18, r11	; 24
    62de:	bc be       	out	0x3c, r11	; 60
    62e0:	c0 c2       	rjmp	.+1408   	; 0x6862 <waves+0x862>
    62e2:	c4 c6       	rjmp	.+3464   	; 0x706c <clear_sprites+0x10>
    62e4:	c8 ca       	rjmp	.-2672   	; 0x5876 <TriggerCommon+0xda>
    62e6:	cc ce       	rjmp	.-616    	; 0x6080 <waves+0x80>
    62e8:	d0 d2       	rcall	.+1440   	; 0x688a <waves+0x88a>
    62ea:	d4 d6       	rcall	.+3496   	; 0x7094 <update_splash+0x20>
    62ec:	d8 da       	rcall	.-2640   	; 0x589e <TriggerCommon+0x102>
    62ee:	dc de       	rcall	.-584    	; 0x60a8 <waves+0xa8>
    62f0:	e0 e2       	ldi	r30, 0x20	; 32
    62f2:	e4 e6       	ldi	r30, 0x64	; 100
    62f4:	e8 ea       	ldi	r30, 0xA8	; 168
    62f6:	ec ee       	ldi	r30, 0xEC	; 236
    62f8:	f0 f2       	brcs	.-68     	; 0x62b6 <waves+0x2b6>
    62fa:	f4 f6       	brge	.-68     	; 0x62b8 <waves+0x2b8>
    62fc:	f8 fa       	.word	0xfaf8	; ????
    62fe:	fc fe       	.word	0xfefc	; ????
    6300:	7f 7f       	andi	r23, 0xFF	; 255
    6302:	7f 7f       	andi	r23, 0xFF	; 255
    6304:	7f 7f       	andi	r23, 0xFF	; 255
    6306:	7f 7f       	andi	r23, 0xFF	; 255
    6308:	7f 7f       	andi	r23, 0xFF	; 255
    630a:	7f 7f       	andi	r23, 0xFF	; 255
    630c:	7f 7f       	andi	r23, 0xFF	; 255
    630e:	7f 7f       	andi	r23, 0xFF	; 255
    6310:	7f 7f       	andi	r23, 0xFF	; 255
    6312:	7f 7f       	andi	r23, 0xFF	; 255
    6314:	7f 7f       	andi	r23, 0xFF	; 255
    6316:	7f 7f       	andi	r23, 0xFF	; 255
    6318:	7f 7f       	andi	r23, 0xFF	; 255
    631a:	7f 7f       	andi	r23, 0xFF	; 255
    631c:	7f 7f       	andi	r23, 0xFF	; 255
    631e:	7f 7f       	andi	r23, 0xFF	; 255
    6320:	7f 7f       	andi	r23, 0xFF	; 255
    6322:	7f 7f       	andi	r23, 0xFF	; 255
    6324:	7f 7f       	andi	r23, 0xFF	; 255
    6326:	7f 7f       	andi	r23, 0xFF	; 255
    6328:	7f 7f       	andi	r23, 0xFF	; 255
    632a:	7f 7f       	andi	r23, 0xFF	; 255
    632c:	7f 7f       	andi	r23, 0xFF	; 255
    632e:	7f 7f       	andi	r23, 0xFF	; 255
    6330:	7f 7f       	andi	r23, 0xFF	; 255
    6332:	7f 7f       	andi	r23, 0xFF	; 255
    6334:	7f 7f       	andi	r23, 0xFF	; 255
    6336:	7f 7f       	andi	r23, 0xFF	; 255
    6338:	7f 7f       	andi	r23, 0xFF	; 255
    633a:	7f 7f       	andi	r23, 0xFF	; 255
    633c:	7f 7f       	andi	r23, 0xFF	; 255
    633e:	7f 7f       	andi	r23, 0xFF	; 255
    6340:	80 80       	ld	r8, Z
    6342:	80 80       	ld	r8, Z
    6344:	80 80       	ld	r8, Z
    6346:	80 80       	ld	r8, Z
    6348:	80 80       	ld	r8, Z
    634a:	80 80       	ld	r8, Z
    634c:	80 80       	ld	r8, Z
    634e:	80 80       	ld	r8, Z
    6350:	80 80       	ld	r8, Z
    6352:	80 80       	ld	r8, Z
    6354:	80 80       	ld	r8, Z
    6356:	80 80       	ld	r8, Z
    6358:	80 80       	ld	r8, Z
    635a:	80 80       	ld	r8, Z
    635c:	80 80       	ld	r8, Z
    635e:	80 80       	ld	r8, Z
    6360:	80 80       	ld	r8, Z
    6362:	80 80       	ld	r8, Z
    6364:	80 80       	ld	r8, Z
    6366:	80 80       	ld	r8, Z
    6368:	80 80       	ld	r8, Z
    636a:	80 80       	ld	r8, Z
    636c:	80 80       	ld	r8, Z
    636e:	80 80       	ld	r8, Z
    6370:	80 80       	ld	r8, Z
    6372:	80 80       	ld	r8, Z
    6374:	80 80       	ld	r8, Z
    6376:	80 80       	ld	r8, Z
    6378:	80 80       	ld	r8, Z
    637a:	80 80       	ld	r8, Z
    637c:	80 80       	ld	r8, Z
    637e:	80 80       	ld	r8, Z
    6380:	80 80       	ld	r8, Z
    6382:	80 80       	ld	r8, Z
    6384:	80 80       	ld	r8, Z
    6386:	80 80       	ld	r8, Z
    6388:	80 80       	ld	r8, Z
    638a:	80 80       	ld	r8, Z
    638c:	80 80       	ld	r8, Z
    638e:	80 80       	ld	r8, Z
    6390:	80 80       	ld	r8, Z
    6392:	80 80       	ld	r8, Z
    6394:	80 80       	ld	r8, Z
    6396:	80 80       	ld	r8, Z
    6398:	80 80       	ld	r8, Z
    639a:	80 80       	ld	r8, Z
    639c:	80 80       	ld	r8, Z
    639e:	80 80       	ld	r8, Z
    63a0:	80 80       	ld	r8, Z
    63a2:	80 80       	ld	r8, Z
    63a4:	80 80       	ld	r8, Z
    63a6:	80 80       	ld	r8, Z
    63a8:	80 80       	ld	r8, Z
    63aa:	80 80       	ld	r8, Z
    63ac:	80 80       	ld	r8, Z
    63ae:	80 80       	ld	r8, Z
    63b0:	80 80       	ld	r8, Z
    63b2:	80 80       	ld	r8, Z
    63b4:	80 80       	ld	r8, Z
    63b6:	80 80       	ld	r8, Z
    63b8:	80 80       	ld	r8, Z
    63ba:	80 80       	ld	r8, Z
    63bc:	80 80       	ld	r8, Z
    63be:	80 80       	ld	r8, Z
    63c0:	80 80       	ld	r8, Z
    63c2:	80 80       	ld	r8, Z
    63c4:	80 80       	ld	r8, Z
    63c6:	80 80       	ld	r8, Z
    63c8:	80 80       	ld	r8, Z
    63ca:	80 80       	ld	r8, Z
    63cc:	80 80       	ld	r8, Z
    63ce:	80 80       	ld	r8, Z
    63d0:	80 80       	ld	r8, Z
    63d2:	80 80       	ld	r8, Z
    63d4:	80 80       	ld	r8, Z
    63d6:	80 80       	ld	r8, Z
    63d8:	80 80       	ld	r8, Z
    63da:	80 80       	ld	r8, Z
    63dc:	80 80       	ld	r8, Z
    63de:	80 80       	ld	r8, Z
    63e0:	80 80       	ld	r8, Z
    63e2:	80 80       	ld	r8, Z
    63e4:	80 80       	ld	r8, Z
    63e6:	80 80       	ld	r8, Z
    63e8:	80 80       	ld	r8, Z
    63ea:	80 80       	ld	r8, Z
    63ec:	80 80       	ld	r8, Z
    63ee:	80 80       	ld	r8, Z
    63f0:	80 80       	ld	r8, Z
    63f2:	80 80       	ld	r8, Z
    63f4:	80 80       	ld	r8, Z
    63f6:	80 80       	ld	r8, Z
    63f8:	80 80       	ld	r8, Z
    63fa:	80 80       	ld	r8, Z
    63fc:	80 80       	ld	r8, Z
    63fe:	80 80       	ld	r8, Z
    6400:	7f 7f       	andi	r23, 0xFF	; 255
    6402:	7f 7f       	andi	r23, 0xFF	; 255
    6404:	7f 7f       	andi	r23, 0xFF	; 255
    6406:	7f 7f       	andi	r23, 0xFF	; 255
    6408:	7f 7f       	andi	r23, 0xFF	; 255
    640a:	7f 7f       	andi	r23, 0xFF	; 255
    640c:	7f 7f       	andi	r23, 0xFF	; 255
    640e:	7f 7f       	andi	r23, 0xFF	; 255
    6410:	7f 7f       	andi	r23, 0xFF	; 255
    6412:	7f 7f       	andi	r23, 0xFF	; 255
    6414:	7f 7f       	andi	r23, 0xFF	; 255
    6416:	7f 7f       	andi	r23, 0xFF	; 255
    6418:	7f 7f       	andi	r23, 0xFF	; 255
    641a:	7f 7f       	andi	r23, 0xFF	; 255
    641c:	7f 7f       	andi	r23, 0xFF	; 255
    641e:	7f 7f       	andi	r23, 0xFF	; 255
    6420:	7f 7f       	andi	r23, 0xFF	; 255
    6422:	7f 7f       	andi	r23, 0xFF	; 255
    6424:	7f 7f       	andi	r23, 0xFF	; 255
    6426:	7f 7f       	andi	r23, 0xFF	; 255
    6428:	7f 7f       	andi	r23, 0xFF	; 255
    642a:	7f 7f       	andi	r23, 0xFF	; 255
    642c:	7f 7f       	andi	r23, 0xFF	; 255
    642e:	7f 7f       	andi	r23, 0xFF	; 255
    6430:	7f 7f       	andi	r23, 0xFF	; 255
    6432:	7f 7f       	andi	r23, 0xFF	; 255
    6434:	7f 7f       	andi	r23, 0xFF	; 255
    6436:	7f 7f       	andi	r23, 0xFF	; 255
    6438:	7f 7f       	andi	r23, 0xFF	; 255
    643a:	7f 7f       	andi	r23, 0xFF	; 255
    643c:	7f 7f       	andi	r23, 0xFF	; 255
    643e:	7f 7f       	andi	r23, 0xFF	; 255
    6440:	7f 7f       	andi	r23, 0xFF	; 255
    6442:	7f 7f       	andi	r23, 0xFF	; 255
    6444:	7f 7f       	andi	r23, 0xFF	; 255
    6446:	7f 7f       	andi	r23, 0xFF	; 255
    6448:	7f 7f       	andi	r23, 0xFF	; 255
    644a:	7f 7f       	andi	r23, 0xFF	; 255
    644c:	7f 7f       	andi	r23, 0xFF	; 255
    644e:	7f 7f       	andi	r23, 0xFF	; 255
    6450:	7f 7f       	andi	r23, 0xFF	; 255
    6452:	7f 7f       	andi	r23, 0xFF	; 255
    6454:	7f 7f       	andi	r23, 0xFF	; 255
    6456:	7f 7f       	andi	r23, 0xFF	; 255
    6458:	7f 7f       	andi	r23, 0xFF	; 255
    645a:	7f 7f       	andi	r23, 0xFF	; 255
    645c:	7f 7f       	andi	r23, 0xFF	; 255
    645e:	7f 7f       	andi	r23, 0xFF	; 255
    6460:	7f 7f       	andi	r23, 0xFF	; 255
    6462:	7f 7f       	andi	r23, 0xFF	; 255
    6464:	7f 7f       	andi	r23, 0xFF	; 255
    6466:	7f 7f       	andi	r23, 0xFF	; 255
    6468:	7f 7f       	andi	r23, 0xFF	; 255
    646a:	7f 7f       	andi	r23, 0xFF	; 255
    646c:	7f 7f       	andi	r23, 0xFF	; 255
    646e:	7f 7f       	andi	r23, 0xFF	; 255
    6470:	7f 7f       	andi	r23, 0xFF	; 255
    6472:	7f 7f       	andi	r23, 0xFF	; 255
    6474:	7f 7f       	andi	r23, 0xFF	; 255
    6476:	7f 7f       	andi	r23, 0xFF	; 255
    6478:	7f 7f       	andi	r23, 0xFF	; 255
    647a:	7f 7f       	andi	r23, 0xFF	; 255
    647c:	7f 7f       	andi	r23, 0xFF	; 255
    647e:	7f 7f       	andi	r23, 0xFF	; 255
    6480:	80 80       	ld	r8, Z
    6482:	80 80       	ld	r8, Z
    6484:	80 80       	ld	r8, Z
    6486:	80 80       	ld	r8, Z
    6488:	80 80       	ld	r8, Z
    648a:	80 80       	ld	r8, Z
    648c:	80 80       	ld	r8, Z
    648e:	80 80       	ld	r8, Z
    6490:	80 80       	ld	r8, Z
    6492:	80 80       	ld	r8, Z
    6494:	80 80       	ld	r8, Z
    6496:	80 80       	ld	r8, Z
    6498:	80 80       	ld	r8, Z
    649a:	80 80       	ld	r8, Z
    649c:	80 80       	ld	r8, Z
    649e:	80 80       	ld	r8, Z
    64a0:	80 80       	ld	r8, Z
    64a2:	80 80       	ld	r8, Z
    64a4:	80 80       	ld	r8, Z
    64a6:	80 80       	ld	r8, Z
    64a8:	80 80       	ld	r8, Z
    64aa:	80 80       	ld	r8, Z
    64ac:	80 80       	ld	r8, Z
    64ae:	80 80       	ld	r8, Z
    64b0:	80 80       	ld	r8, Z
    64b2:	80 80       	ld	r8, Z
    64b4:	80 80       	ld	r8, Z
    64b6:	80 80       	ld	r8, Z
    64b8:	80 80       	ld	r8, Z
    64ba:	80 80       	ld	r8, Z
    64bc:	80 80       	ld	r8, Z
    64be:	80 80       	ld	r8, Z
    64c0:	80 80       	ld	r8, Z
    64c2:	80 80       	ld	r8, Z
    64c4:	80 80       	ld	r8, Z
    64c6:	80 80       	ld	r8, Z
    64c8:	80 80       	ld	r8, Z
    64ca:	80 80       	ld	r8, Z
    64cc:	80 80       	ld	r8, Z
    64ce:	80 80       	ld	r8, Z
    64d0:	80 80       	ld	r8, Z
    64d2:	80 80       	ld	r8, Z
    64d4:	80 80       	ld	r8, Z
    64d6:	80 80       	ld	r8, Z
    64d8:	80 80       	ld	r8, Z
    64da:	80 80       	ld	r8, Z
    64dc:	80 80       	ld	r8, Z
    64de:	80 80       	ld	r8, Z
    64e0:	80 80       	ld	r8, Z
    64e2:	80 80       	ld	r8, Z
    64e4:	80 80       	ld	r8, Z
    64e6:	80 80       	ld	r8, Z
    64e8:	80 80       	ld	r8, Z
    64ea:	80 80       	ld	r8, Z
    64ec:	80 80       	ld	r8, Z
    64ee:	80 80       	ld	r8, Z
    64f0:	80 80       	ld	r8, Z
    64f2:	80 80       	ld	r8, Z
    64f4:	80 80       	ld	r8, Z
    64f6:	80 80       	ld	r8, Z
    64f8:	80 80       	ld	r8, Z
    64fa:	80 80       	ld	r8, Z
    64fc:	80 80       	ld	r8, Z
    64fe:	80 80       	ld	r8, Z
    6500:	7f 7f       	andi	r23, 0xFF	; 255
    6502:	7f 7f       	andi	r23, 0xFF	; 255
    6504:	7f 7f       	andi	r23, 0xFF	; 255
    6506:	7f 7f       	andi	r23, 0xFF	; 255
    6508:	7f 7f       	andi	r23, 0xFF	; 255
    650a:	7f 7f       	andi	r23, 0xFF	; 255
    650c:	7f 7f       	andi	r23, 0xFF	; 255
    650e:	7f 7f       	andi	r23, 0xFF	; 255
    6510:	7f 7f       	andi	r23, 0xFF	; 255
    6512:	7f 7f       	andi	r23, 0xFF	; 255
    6514:	7f 7f       	andi	r23, 0xFF	; 255
    6516:	7f 7f       	andi	r23, 0xFF	; 255
    6518:	7f 7f       	andi	r23, 0xFF	; 255
    651a:	7f 7f       	andi	r23, 0xFF	; 255
    651c:	7f 7f       	andi	r23, 0xFF	; 255
    651e:	7f 7f       	andi	r23, 0xFF	; 255
    6520:	7f 7f       	andi	r23, 0xFF	; 255
    6522:	7f 7f       	andi	r23, 0xFF	; 255
    6524:	7f 7f       	andi	r23, 0xFF	; 255
    6526:	7f 7f       	andi	r23, 0xFF	; 255
    6528:	7f 7f       	andi	r23, 0xFF	; 255
    652a:	7f 7f       	andi	r23, 0xFF	; 255
    652c:	7f 7f       	andi	r23, 0xFF	; 255
    652e:	7f 7f       	andi	r23, 0xFF	; 255
    6530:	7f 7f       	andi	r23, 0xFF	; 255
    6532:	7f 7f       	andi	r23, 0xFF	; 255
    6534:	7f 7f       	andi	r23, 0xFF	; 255
    6536:	7f 7f       	andi	r23, 0xFF	; 255
    6538:	7f 7f       	andi	r23, 0xFF	; 255
    653a:	7f 7f       	andi	r23, 0xFF	; 255
    653c:	7f 7f       	andi	r23, 0xFF	; 255
    653e:	7f 7f       	andi	r23, 0xFF	; 255
    6540:	7f 7f       	andi	r23, 0xFF	; 255
    6542:	7f 7f       	andi	r23, 0xFF	; 255
    6544:	7f 7f       	andi	r23, 0xFF	; 255
    6546:	7f 7f       	andi	r23, 0xFF	; 255
    6548:	7f 7f       	andi	r23, 0xFF	; 255
    654a:	7f 7f       	andi	r23, 0xFF	; 255
    654c:	7f 7f       	andi	r23, 0xFF	; 255
    654e:	7f 7f       	andi	r23, 0xFF	; 255
    6550:	7f 7f       	andi	r23, 0xFF	; 255
    6552:	7f 7f       	andi	r23, 0xFF	; 255
    6554:	7f 7f       	andi	r23, 0xFF	; 255
    6556:	7f 7f       	andi	r23, 0xFF	; 255
    6558:	7f 7f       	andi	r23, 0xFF	; 255
    655a:	7f 7f       	andi	r23, 0xFF	; 255
    655c:	7f 7f       	andi	r23, 0xFF	; 255
    655e:	7f 7f       	andi	r23, 0xFF	; 255
    6560:	7f 7f       	andi	r23, 0xFF	; 255
    6562:	7f 7f       	andi	r23, 0xFF	; 255
    6564:	7f 7f       	andi	r23, 0xFF	; 255
    6566:	7f 7f       	andi	r23, 0xFF	; 255
    6568:	7f 7f       	andi	r23, 0xFF	; 255
    656a:	7f 7f       	andi	r23, 0xFF	; 255
    656c:	7f 7f       	andi	r23, 0xFF	; 255
    656e:	7f 7f       	andi	r23, 0xFF	; 255
    6570:	7f 7f       	andi	r23, 0xFF	; 255
    6572:	7f 7f       	andi	r23, 0xFF	; 255
    6574:	7f 7f       	andi	r23, 0xFF	; 255
    6576:	7f 7f       	andi	r23, 0xFF	; 255
    6578:	7f 7f       	andi	r23, 0xFF	; 255
    657a:	7f 7f       	andi	r23, 0xFF	; 255
    657c:	7f 7f       	andi	r23, 0xFF	; 255
    657e:	7f 7f       	andi	r23, 0xFF	; 255
    6580:	7f 7f       	andi	r23, 0xFF	; 255
    6582:	7f 7f       	andi	r23, 0xFF	; 255
    6584:	7f 7f       	andi	r23, 0xFF	; 255
    6586:	7f 7f       	andi	r23, 0xFF	; 255
    6588:	7f 7f       	andi	r23, 0xFF	; 255
    658a:	7f 7f       	andi	r23, 0xFF	; 255
    658c:	7f 7f       	andi	r23, 0xFF	; 255
    658e:	7f 7f       	andi	r23, 0xFF	; 255
    6590:	7f 7f       	andi	r23, 0xFF	; 255
    6592:	7f 7f       	andi	r23, 0xFF	; 255
    6594:	7f 7f       	andi	r23, 0xFF	; 255
    6596:	7f 7f       	andi	r23, 0xFF	; 255
    6598:	7f 7f       	andi	r23, 0xFF	; 255
    659a:	7f 7f       	andi	r23, 0xFF	; 255
    659c:	7f 7f       	andi	r23, 0xFF	; 255
    659e:	7f 7f       	andi	r23, 0xFF	; 255
    65a0:	7f 7f       	andi	r23, 0xFF	; 255
    65a2:	7f 7f       	andi	r23, 0xFF	; 255
    65a4:	7f 7f       	andi	r23, 0xFF	; 255
    65a6:	7f 7f       	andi	r23, 0xFF	; 255
    65a8:	7f 7f       	andi	r23, 0xFF	; 255
    65aa:	7f 7f       	andi	r23, 0xFF	; 255
    65ac:	7f 7f       	andi	r23, 0xFF	; 255
    65ae:	7f 7f       	andi	r23, 0xFF	; 255
    65b0:	7f 7f       	andi	r23, 0xFF	; 255
    65b2:	7f 7f       	andi	r23, 0xFF	; 255
    65b4:	7f 7f       	andi	r23, 0xFF	; 255
    65b6:	7f 7f       	andi	r23, 0xFF	; 255
    65b8:	7f 7f       	andi	r23, 0xFF	; 255
    65ba:	7f 7f       	andi	r23, 0xFF	; 255
    65bc:	7f 7f       	andi	r23, 0xFF	; 255
    65be:	7f 7f       	andi	r23, 0xFF	; 255
    65c0:	80 80       	ld	r8, Z
    65c2:	80 80       	ld	r8, Z
    65c4:	80 80       	ld	r8, Z
    65c6:	80 80       	ld	r8, Z
    65c8:	80 80       	ld	r8, Z
    65ca:	80 80       	ld	r8, Z
    65cc:	80 80       	ld	r8, Z
    65ce:	80 80       	ld	r8, Z
    65d0:	80 80       	ld	r8, Z
    65d2:	80 80       	ld	r8, Z
    65d4:	80 80       	ld	r8, Z
    65d6:	80 80       	ld	r8, Z
    65d8:	80 80       	ld	r8, Z
    65da:	80 80       	ld	r8, Z
    65dc:	80 80       	ld	r8, Z
    65de:	80 80       	ld	r8, Z
    65e0:	80 80       	ld	r8, Z
    65e2:	80 80       	ld	r8, Z
    65e4:	80 80       	ld	r8, Z
    65e6:	80 80       	ld	r8, Z
    65e8:	80 80       	ld	r8, Z
    65ea:	80 80       	ld	r8, Z
    65ec:	80 80       	ld	r8, Z
    65ee:	80 80       	ld	r8, Z
    65f0:	80 80       	ld	r8, Z
    65f2:	80 80       	ld	r8, Z
    65f4:	80 80       	ld	r8, Z
    65f6:	80 80       	ld	r8, Z
    65f8:	80 80       	ld	r8, Z
    65fa:	80 80       	ld	r8, Z
    65fc:	80 80       	ld	r8, Z
    65fe:	80 80       	ld	r8, Z
    6600:	03 09       	sbc	r16, r3
    6602:	13 1e       	adc	r1, r19
    6604:	28 31       	cpi	r18, 0x18	; 24
    6606:	3a 40       	sbci	r19, 0x0A	; 10
    6608:	46 4c       	sbci	r20, 0xC6	; 198
    660a:	50 54       	subi	r21, 0x40	; 64
    660c:	58 5b       	subi	r21, 0xB8	; 184
    660e:	5e 61       	ori	r21, 0x1E	; 30
    6610:	63 65       	ori	r22, 0x53	; 83
    6612:	67 69       	ori	r22, 0x97	; 151
    6614:	6b 6c       	ori	r22, 0xCB	; 203
    6616:	6e 6f       	ori	r22, 0xFE	; 254
    6618:	70 71       	andi	r23, 0x10	; 16
    661a:	72 73       	andi	r23, 0x32	; 50
    661c:	74 75       	andi	r23, 0x54	; 84
    661e:	76 77       	andi	r23, 0x76	; 118
    6620:	77 78       	andi	r23, 0x87	; 135
    6622:	79 79       	andi	r23, 0x99	; 153
    6624:	7a 7a       	andi	r23, 0xAA	; 170
    6626:	7b 7b       	andi	r23, 0xBB	; 187
    6628:	7c 7c       	andi	r23, 0xCC	; 204
    662a:	7c 7d       	andi	r23, 0xDC	; 220
    662c:	7d 7d       	andi	r23, 0xDD	; 221
    662e:	7e 7e       	andi	r23, 0xEE	; 238
    6630:	7e 7e       	andi	r23, 0xEE	; 238
    6632:	7f 7f       	andi	r23, 0xFF	; 255
    6634:	7f 7f       	andi	r23, 0xFF	; 255
    6636:	7f 7f       	andi	r23, 0xFF	; 255
    6638:	7f 7f       	andi	r23, 0xFF	; 255
    663a:	7f 7f       	andi	r23, 0xFF	; 255
    663c:	7f 7f       	andi	r23, 0xFF	; 255
    663e:	7f 7f       	andi	r23, 0xFF	; 255
    6640:	7f 7f       	andi	r23, 0xFF	; 255
    6642:	7f 7f       	andi	r23, 0xFF	; 255
    6644:	7f 7f       	andi	r23, 0xFF	; 255
    6646:	7f 7f       	andi	r23, 0xFF	; 255
    6648:	7f 7f       	andi	r23, 0xFF	; 255
    664a:	7f 7f       	andi	r23, 0xFF	; 255
    664c:	7f 7e       	andi	r23, 0xEF	; 239
    664e:	7e 7e       	andi	r23, 0xEE	; 238
    6650:	7e 7d       	andi	r23, 0xDE	; 222
    6652:	7d 7d       	andi	r23, 0xDD	; 221
    6654:	7c 7c       	andi	r23, 0xCC	; 204
    6656:	7c 7b       	andi	r23, 0xBC	; 188
    6658:	7b 7a       	andi	r23, 0xAB	; 171
    665a:	7a 79       	andi	r23, 0x9A	; 154
    665c:	79 78       	andi	r23, 0x89	; 137
    665e:	77 77       	andi	r23, 0x77	; 119
    6660:	76 75       	andi	r23, 0x56	; 86
    6662:	74 73       	andi	r23, 0x34	; 52
    6664:	72 71       	andi	r23, 0x12	; 18
    6666:	70 6f       	ori	r23, 0xF0	; 240
    6668:	6e 6c       	ori	r22, 0xCE	; 206
    666a:	6b 69       	ori	r22, 0x9B	; 155
    666c:	67 65       	ori	r22, 0x57	; 87
    666e:	63 61       	ori	r22, 0x13	; 19
    6670:	5e 5b       	subi	r21, 0xBE	; 190
    6672:	58 54       	subi	r21, 0x48	; 72
    6674:	50 4c       	sbci	r21, 0xC0	; 192
    6676:	46 40       	sbci	r20, 0x06	; 6
    6678:	3a 31       	cpi	r19, 0x1A	; 26
    667a:	28 1e       	adc	r2, r24
    667c:	13 09       	sbc	r17, r3
    667e:	03 00       	.word	0x0003	; ????
    6680:	c6 cc       	rjmp	.-1652   	; 0x600e <waves+0xe>
    6682:	d5 db       	rcall	.-2134   	; 0x5e2e <steptable+0x26>
    6684:	df e3       	ldi	r29, 0x3F	; 63
    6686:	e5 e7       	ldi	r30, 0x75	; 117
    6688:	e9 ea       	ldi	r30, 0xA9	; 169
    668a:	eb ec       	ldi	r30, 0xCB	; 203
    668c:	ed ee       	ldi	r30, 0xED	; 237
    668e:	ef ef       	ldi	r30, 0xFF	; 255
    6690:	f0 f0       	brcs	.+60     	; 0x66ce <waves+0x6ce>
    6692:	f0 f1       	brcs	.+124    	; 0x6710 <waves+0x710>
    6694:	f1 f1       	breq	.+124    	; 0x6712 <waves+0x712>
    6696:	f1 f2       	breq	.-68     	; 0x6654 <waves+0x654>
    6698:	f2 f2       	brmi	.-68     	; 0x6656 <waves+0x656>
    669a:	f2 f2       	brmi	.-68     	; 0x6658 <waves+0x658>
    669c:	f2 f2       	brmi	.-68     	; 0x665a <waves+0x65a>
    669e:	f2 f3       	brmi	.-4      	; 0x669c <waves+0x69c>
    66a0:	f3 f3       	brvs	.-4      	; 0x669e <waves+0x69e>
    66a2:	f3 f3       	brvs	.-4      	; 0x66a0 <waves+0x6a0>
    66a4:	f3 f3       	brvs	.-4      	; 0x66a2 <waves+0x6a2>
    66a6:	f3 f3       	brvs	.-4      	; 0x66a4 <waves+0x6a4>
    66a8:	f3 f3       	brvs	.-4      	; 0x66a6 <waves+0x6a6>
    66aa:	f3 f3       	brvs	.-4      	; 0x66a8 <waves+0x6a8>
    66ac:	f3 f3       	brvs	.-4      	; 0x66aa <waves+0x6aa>
    66ae:	f3 f3       	brvs	.-4      	; 0x66ac <waves+0x6ac>
    66b0:	f3 f3       	brvs	.-4      	; 0x66ae <waves+0x6ae>
    66b2:	f3 f3       	brvs	.-4      	; 0x66b0 <waves+0x6b0>
    66b4:	f3 f3       	brvs	.-4      	; 0x66b2 <waves+0x6b2>
    66b6:	f3 f3       	brvs	.-4      	; 0x66b4 <waves+0x6b4>
    66b8:	f3 f3       	brvs	.-4      	; 0x66b6 <waves+0x6b6>
    66ba:	f3 f3       	brvs	.-4      	; 0x66b8 <waves+0x6b8>
    66bc:	f3 f3       	brvs	.-4      	; 0x66ba <waves+0x6ba>
    66be:	f3 f3       	brvs	.-4      	; 0x66bc <waves+0x6bc>
    66c0:	f3 f3       	brvs	.-4      	; 0x66be <waves+0x6be>
    66c2:	f3 f3       	brvs	.-4      	; 0x66c0 <waves+0x6c0>
    66c4:	f3 f3       	brvs	.-4      	; 0x66c2 <waves+0x6c2>
    66c6:	f3 f3       	brvs	.-4      	; 0x66c4 <waves+0x6c4>
    66c8:	f3 f3       	brvs	.-4      	; 0x66c6 <waves+0x6c6>
    66ca:	f3 f3       	brvs	.-4      	; 0x66c8 <waves+0x6c8>
    66cc:	f3 f3       	brvs	.-4      	; 0x66ca <waves+0x6ca>
    66ce:	f3 f3       	brvs	.-4      	; 0x66cc <waves+0x6cc>
    66d0:	f3 f3       	brvs	.-4      	; 0x66ce <waves+0x6ce>
    66d2:	f3 f3       	brvs	.-4      	; 0x66d0 <waves+0x6d0>
    66d4:	f3 f3       	brvs	.-4      	; 0x66d2 <waves+0x6d2>
    66d6:	f3 f3       	brvs	.-4      	; 0x66d4 <waves+0x6d4>
    66d8:	f3 f3       	brvs	.-4      	; 0x66d6 <waves+0x6d6>
    66da:	f3 f3       	brvs	.-4      	; 0x66d8 <waves+0x6d8>
    66dc:	f3 f3       	brvs	.-4      	; 0x66da <waves+0x6da>
    66de:	f3 f3       	brvs	.-4      	; 0x66dc <waves+0x6dc>
    66e0:	f2 f2       	brmi	.-68     	; 0x669e <waves+0x69e>
    66e2:	f2 f2       	brmi	.-68     	; 0x66a0 <waves+0x6a0>
    66e4:	f2 f2       	brmi	.-68     	; 0x66a2 <waves+0x6a2>
    66e6:	f2 f2       	brmi	.-68     	; 0x66a4 <waves+0x6a4>
    66e8:	f1 f1       	breq	.+124    	; 0x6766 <waves+0x766>
    66ea:	f1 f1       	breq	.+124    	; 0x6768 <waves+0x768>
    66ec:	f0 f0       	brcs	.+60     	; 0x672a <waves+0x72a>
    66ee:	f0 ef       	ldi	r31, 0xF0	; 240
    66f0:	ef ee       	ldi	r30, 0xEF	; 239
    66f2:	ed ec       	ldi	r30, 0xCD	; 205
    66f4:	eb ea       	ldi	r30, 0xAB	; 171
    66f6:	e9 e7       	ldi	r30, 0x79	; 121
    66f8:	e5 e3       	ldi	r30, 0x35	; 53
    66fa:	df db       	rcall	.-2114   	; 0x5eba <steptable+0xb2>
    66fc:	d5 cc       	rjmp	.-1622   	; 0x60a8 <waves+0xa8>
    66fe:	c6 00       	.word	0x00c6	; ????
    6700:	00 28       	or	r0, r0
    6702:	3d 42       	sbci	r19, 0x2D	; 45
    6704:	30 2d       	mov	r19, r0
    6706:	2c 2b       	or	r18, r28
    6708:	2c 2d       	mov	r18, r12
    670a:	2e 2f       	mov	r18, r30
    670c:	30 32       	cpi	r19, 0x20	; 32
    670e:	33 35       	cpi	r19, 0x53	; 83
    6710:	37 39       	cpi	r19, 0x97	; 151
    6712:	3b 3d       	cpi	r19, 0xDB	; 219
    6714:	3f 41       	sbci	r19, 0x1F	; 31
    6716:	43 45       	sbci	r20, 0x53	; 83
    6718:	48 4a       	sbci	r20, 0xA8	; 168
    671a:	4c 4e       	sbci	r20, 0xEC	; 236
    671c:	50 53       	subi	r21, 0x30	; 48
    671e:	55 57       	subi	r21, 0x75	; 117
    6720:	59 5b       	subi	r21, 0xB9	; 185
    6722:	5d 5f       	subi	r21, 0xFD	; 253
    6724:	61 63       	ori	r22, 0x31	; 49
    6726:	65 67       	ori	r22, 0x75	; 117
    6728:	69 6b       	ori	r22, 0xB9	; 185
    672a:	6c 6e       	ori	r22, 0xEC	; 236
    672c:	70 71       	andi	r23, 0x10	; 16
    672e:	73 74       	andi	r23, 0x43	; 67
    6730:	75 77       	andi	r23, 0x75	; 117
    6732:	78 79       	andi	r23, 0x98	; 152
    6734:	7a 7b       	andi	r23, 0xBA	; 186
    6736:	7c 7d       	andi	r23, 0xDC	; 220
    6738:	7d 7e       	andi	r23, 0xED	; 237
    673a:	7e 7f       	andi	r23, 0xFE	; 254
    673c:	7f 7f       	andi	r23, 0xFF	; 255
    673e:	7f 7f       	andi	r23, 0xFF	; 255
    6740:	7f 7f       	andi	r23, 0xFF	; 255
    6742:	7f 7f       	andi	r23, 0xFF	; 255
    6744:	7f 7f       	andi	r23, 0xFF	; 255
    6746:	7e 7e       	andi	r23, 0xEE	; 238
    6748:	7d 7d       	andi	r23, 0xDD	; 221
    674a:	7c 7b       	andi	r23, 0xBC	; 188
    674c:	7a 79       	andi	r23, 0x9A	; 154
    674e:	78 77       	andi	r23, 0x78	; 120
    6750:	75 74       	andi	r23, 0x45	; 69
    6752:	73 71       	andi	r23, 0x13	; 19
    6754:	70 6e       	ori	r23, 0xE0	; 224
    6756:	6c 6b       	ori	r22, 0xBC	; 188
    6758:	69 67       	ori	r22, 0x79	; 121
    675a:	65 63       	ori	r22, 0x35	; 53
    675c:	61 5f       	subi	r22, 0xF1	; 241
    675e:	5d 5b       	subi	r21, 0xBD	; 189
    6760:	59 57       	subi	r21, 0x79	; 121
    6762:	55 53       	subi	r21, 0x35	; 53
    6764:	50 4e       	sbci	r21, 0xE0	; 224
    6766:	4c 4a       	sbci	r20, 0xAC	; 172
    6768:	48 45       	sbci	r20, 0x58	; 88
    676a:	43 41       	sbci	r20, 0x13	; 19
    676c:	3f 3d       	cpi	r19, 0xDF	; 223
    676e:	3b 39       	cpi	r19, 0x9B	; 155
    6770:	37 35       	cpi	r19, 0x57	; 87
    6772:	33 32       	cpi	r19, 0x23	; 35
    6774:	30 2f       	mov	r19, r16
    6776:	2e 2d       	mov	r18, r14
    6778:	2c 2b       	or	r18, r28
    677a:	2c 2d       	mov	r18, r12
    677c:	30 42       	sbci	r19, 0x20	; 32
    677e:	3d 28       	or	r3, r13
    6780:	00 e9       	ldi	r16, 0x90	; 144
    6782:	e5 fe       	sbrs	r14, 5
    6784:	d4 d7       	rcall	.+4008   	; 0x772e <main+0x4c>
    6786:	d7 d7       	rcall	.+4014   	; 0x7736 <main+0x54>
    6788:	d6 d4       	rcall	.+2476   	; 0x7136 <update_splash+0xc2>
    678a:	d2 d0       	rcall	.+420    	; 0x6930 <waves+0x930>
    678c:	ce cc       	rjmp	.-1636   	; 0x612a <waves+0x12a>
    678e:	ca c8       	rjmp	.-3692   	; 0x5924 <TriggerNote+0x46>
    6790:	c6 c3       	rjmp	.+1932   	; 0x6f1e <VideoModeVsync>
    6792:	c1 bf       	out	0x31, r28	; 49
    6794:	bd ba       	out	0x1d, r11	; 29
    6796:	b8 b6       	in	r11, 0x38	; 56
    6798:	b4 b1       	in	r27, 0x04	; 4
    679a:	af ad       	ldd	r26, Y+63	; 0x3f
    679c:	ab a9       	ldd	r26, Y+51	; 0x33
    679e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    67a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    67a2:	9f 9e       	mul	r9, r31
    67a4:	9c 9a       	sbi	0x13, 4	; 19
    67a6:	99 97       	sbiw	r26, 0x29	; 41
    67a8:	95 94       	asr	r9
    67aa:	93 91       	.word	0x9193	; ????
    67ac:	90 8f       	std	Z+24, r25	; 0x18
    67ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    67b0:	8b 8a       	std	Y+19, r8	; 0x13
    67b2:	89 88       	ldd	r8, Y+17	; 0x11
    67b4:	88 87       	std	Y+8, r24	; 0x08
    67b6:	86 85       	ldd	r24, Z+14	; 0x0e
    67b8:	85 84       	ldd	r8, Z+13	; 0x0d
    67ba:	84 84       	ldd	r8, Z+12	; 0x0c
    67bc:	83 83       	std	Z+3, r24	; 0x03
    67be:	83 83       	std	Z+3, r24	; 0x03
    67c0:	83 83       	std	Z+3, r24	; 0x03
    67c2:	83 83       	std	Z+3, r24	; 0x03
    67c4:	83 84       	ldd	r8, Z+11	; 0x0b
    67c6:	84 84       	ldd	r8, Z+12	; 0x0c
    67c8:	85 85       	ldd	r24, Z+13	; 0x0d
    67ca:	86 87       	std	Z+14, r24	; 0x0e
    67cc:	88 88       	ldd	r8, Y+16	; 0x10
    67ce:	89 8a       	std	Y+17, r8	; 0x11
    67d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    67d2:	8d 8f       	std	Y+29, r24	; 0x1d
    67d4:	90 91 93 94 	lds	r25, 0x9493
    67d8:	95 97       	sbiw	r26, 0x25	; 37
    67da:	99 9a       	sbi	0x13, 1	; 19
    67dc:	9c 9e       	mul	r9, r28
    67de:	9f a1       	ldd	r25, Y+39	; 0x27
    67e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    67e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    67e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    67e6:	af b1       	in	r26, 0x0f	; 15
    67e8:	b4 b6       	in	r11, 0x34	; 52
    67ea:	b8 ba       	out	0x18, r11	; 24
    67ec:	bd bf       	out	0x3d, r27	; 61
    67ee:	c1 c3       	rjmp	.+1922   	; 0x6f72 <LBGetJoyPadState+0x4c>
    67f0:	c6 c8       	rjmp	.-3700   	; 0x597e <ProcessMusic+0x32>
    67f2:	ca cc       	rjmp	.-1644   	; 0x6188 <waves+0x188>
    67f4:	ce d0       	rcall	.+412    	; 0x6992 <waves+0x992>
    67f6:	d2 d4       	rcall	.+2468   	; 0x719c <update_tank_rank+0x2a>
    67f8:	d6 d7       	rcall	.+4012   	; 0x77a6 <__divmodhi4+0x8>
    67fa:	d7 d7       	rcall	.+4014   	; 0x77aa <__divmodhi4+0xc>
    67fc:	d4 fe       	sbrs	r13, 4
    67fe:	e5 e9       	ldi	r30, 0x95	; 149
    6800:	f9 f8       	.word	0xf8f9	; ????
    6802:	f9 f5       	brne	.+126    	; 0x6882 <waves+0x882>
    6804:	eb e1       	ldi	r30, 0x1B	; 27
    6806:	dd de       	rcall	.-582    	; 0x65c2 <waves+0x5c2>
    6808:	e0 e2       	ldi	r30, 0x20	; 32
    680a:	e4 e5       	ldi	r30, 0x54	; 84
    680c:	e6 e5       	ldi	r30, 0x56	; 86
    680e:	e4 e2       	ldi	r30, 0x24	; 36
    6810:	de d9       	rcall	.-3140   	; 0x5bce <ProcessMusic+0x282>
    6812:	d2 ca       	rjmp	.-2652   	; 0x5db8 <set_note_waves+0x14>
    6814:	c1 b7       	in	r28, 0x31	; 49
    6816:	ac a2       	std	Y+36, r10	; 0x24
    6818:	99 91       	ld	r25, Y+
    681a:	8a 86       	std	Y+10, r8	; 0x0a
    681c:	83 81       	ldd	r24, Z+3	; 0x03
    681e:	80 80       	ld	r8, Z
    6820:	81 82       	std	Z+1, r8	; 0x01
    6822:	83 85       	ldd	r24, Z+11	; 0x0b
    6824:	86 88       	ldd	r8, Z+22	; 0x16
    6826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    6828:	8d 8f       	std	Y+29, r24	; 0x1d
    682a:	90 92 93 95 	sts	0x9593, r9
    682e:	96 97       	sbiw	r26, 0x26	; 38
    6830:	98 99       	sbic	0x13, 0	; 19
    6832:	9a 9b       	sbis	0x13, 2	; 19
    6834:	9b 9c       	mul	r9, r11
    6836:	9d 9d       	mul	r25, r13
    6838:	9d 9e       	mul	r9, r29
    683a:	9e 9e       	mul	r9, r30
    683c:	9f 9f       	mul	r25, r31
    683e:	9f 9f       	mul	r25, r31
    6840:	9f 9f       	mul	r25, r31
    6842:	9f 9e       	mul	r9, r31
    6844:	9e 9e       	mul	r9, r30
    6846:	9d 9d       	mul	r25, r13
    6848:	9d 9c       	mul	r9, r13
    684a:	9b 9b       	sbis	0x13, 3	; 19
    684c:	9a 99       	sbic	0x13, 2	; 19
    684e:	98 97       	sbiw	r26, 0x28	; 40
    6850:	96 95       	lsr	r25
    6852:	93 92       	.word	0x9293	; ????
    6854:	90 8f       	std	Z+24, r25	; 0x18
    6856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    6858:	8a 88       	ldd	r8, Y+18	; 0x12
    685a:	86 85       	ldd	r24, Z+14	; 0x0e
    685c:	83 82       	std	Z+3, r8	; 0x03
    685e:	81 80       	ldd	r8, Z+1	; 0x01
    6860:	80 81       	ld	r24, Z
    6862:	83 86       	std	Z+11, r8	; 0x0b
    6864:	8a 91       	ld	r24, -Y
    6866:	99 a2       	std	Y+33, r9	; 0x21
    6868:	ac b7       	in	r26, 0x3c	; 60
    686a:	c1 ca       	rjmp	.-2686   	; 0x5dee <esmw+0x10>
    686c:	d2 d9       	rcall	.-3164   	; 0x5c12 <ProcessMusic+0x2c6>
    686e:	de e2       	ldi	r29, 0x2E	; 46
    6870:	e4 e5       	ldi	r30, 0x54	; 84
    6872:	e6 e5       	ldi	r30, 0x56	; 86
    6874:	e4 e2       	ldi	r30, 0x24	; 36
    6876:	e0 de       	rcall	.-576    	; 0x6638 <waves+0x638>
    6878:	dd e1       	ldi	r29, 0x1D	; 29
    687a:	eb f5       	brvc	.+122    	; 0x68f6 <waves+0x8f6>
    687c:	f9 f8       	.word	0xf8f9	; ????
    687e:	f9 00       	.word	0x00f9	; ????
    6880:	07 08       	sbc	r0, r7
    6882:	07 0b       	sbc	r16, r23
    6884:	15 1f       	adc	r17, r21
    6886:	23 22       	and	r2, r19
    6888:	20 1e       	adc	r2, r16
    688a:	1c 1b       	sub	r17, r28
    688c:	1a 1b       	sub	r17, r26
    688e:	1c 1e       	adc	r1, r28
    6890:	22 27       	eor	r18, r18
    6892:	2e 36       	cpi	r18, 0x6E	; 110
    6894:	3f 49       	sbci	r19, 0x9F	; 159
    6896:	54 5e       	subi	r21, 0xE4	; 228
    6898:	67 6f       	ori	r22, 0xF7	; 247
    689a:	76 7a       	andi	r23, 0xA6	; 166
    689c:	7e 7f       	andi	r23, 0xFE	; 254
    689e:	7f 7f       	andi	r23, 0xFF	; 255
    68a0:	7f 7e       	andi	r23, 0xEF	; 239
    68a2:	7d 7b       	andi	r23, 0xBD	; 189
    68a4:	7a 78       	andi	r23, 0x8A	; 138
    68a6:	76 74       	andi	r23, 0x46	; 70
    68a8:	73 71       	andi	r23, 0x13	; 19
    68aa:	70 6e       	ori	r23, 0xE0	; 224
    68ac:	6d 6b       	ori	r22, 0xBD	; 189
    68ae:	6a 69       	ori	r22, 0x9A	; 154
    68b0:	68 67       	ori	r22, 0x78	; 120
    68b2:	66 65       	ori	r22, 0x56	; 86
    68b4:	65 64       	ori	r22, 0x45	; 69
    68b6:	64 63       	ori	r22, 0x34	; 52
    68b8:	63 62       	ori	r22, 0x23	; 35
    68ba:	62 62       	ori	r22, 0x22	; 34
    68bc:	61 61       	ori	r22, 0x11	; 17
    68be:	61 61       	ori	r22, 0x11	; 17
    68c0:	61 61       	ori	r22, 0x11	; 17
    68c2:	61 62       	ori	r22, 0x21	; 33
    68c4:	62 62       	ori	r22, 0x22	; 34
    68c6:	63 63       	ori	r22, 0x33	; 51
    68c8:	63 64       	ori	r22, 0x43	; 67
    68ca:	65 65       	ori	r22, 0x55	; 85
    68cc:	66 67       	ori	r22, 0x76	; 118
    68ce:	68 69       	ori	r22, 0x98	; 152
    68d0:	6a 6b       	ori	r22, 0xBA	; 186
    68d2:	6d 6e       	ori	r22, 0xED	; 237
    68d4:	70 71       	andi	r23, 0x10	; 16
    68d6:	73 74       	andi	r23, 0x43	; 67
    68d8:	76 78       	andi	r23, 0x86	; 134
    68da:	7a 7b       	andi	r23, 0xBA	; 186
    68dc:	7d 7e       	andi	r23, 0xED	; 237
    68de:	7f 7f       	andi	r23, 0xFF	; 255
    68e0:	7f 7f       	andi	r23, 0xFF	; 255
    68e2:	7e 7a       	andi	r23, 0xAE	; 174
    68e4:	76 6f       	ori	r23, 0xF6	; 246
    68e6:	67 5e       	subi	r22, 0xE7	; 231
    68e8:	54 49       	sbci	r21, 0x94	; 148
    68ea:	3f 36       	cpi	r19, 0x6F	; 111
    68ec:	2e 27       	eor	r18, r30
    68ee:	22 1e       	adc	r2, r18
    68f0:	1c 1b       	sub	r17, r28
    68f2:	1a 1b       	sub	r17, r26
    68f4:	1c 1e       	adc	r1, r28
    68f6:	20 22       	and	r2, r16
    68f8:	23 1f       	adc	r18, r19
    68fa:	15 0b       	sbc	r17, r21
    68fc:	07 08       	sbc	r0, r7
    68fe:	07 00       	.word	0x0007	; ????
    6900:	1f 31       	cpi	r17, 0x1F	; 31
    6902:	3d 44       	sbci	r19, 0x4D	; 77
    6904:	4e 53       	subi	r20, 0x3E	; 62
    6906:	54 56       	subi	r21, 0x64	; 100
    6908:	5a 5f       	subi	r21, 0xFA	; 250
    690a:	64 69       	ori	r22, 0x94	; 148
    690c:	6e 74       	andi	r22, 0x4E	; 78
    690e:	76 79       	andi	r23, 0x96	; 150
    6910:	7c 7f       	andi	r23, 0xFC	; 252
    6912:	7f 7f       	andi	r23, 0xFF	; 255
    6914:	7f 7f       	andi	r23, 0xFF	; 255
    6916:	7f 7f       	andi	r23, 0xFF	; 255
    6918:	7f 7f       	andi	r23, 0xFF	; 255
    691a:	7f 7f       	andi	r23, 0xFF	; 255
    691c:	7f 7f       	andi	r23, 0xFF	; 255
    691e:	7f 7f       	andi	r23, 0xFF	; 255
    6920:	7f 7f       	andi	r23, 0xFF	; 255
    6922:	7f 7f       	andi	r23, 0xFF	; 255
    6924:	7f 7f       	andi	r23, 0xFF	; 255
    6926:	7f 7f       	andi	r23, 0xFF	; 255
    6928:	7f 7f       	andi	r23, 0xFF	; 255
    692a:	7f 7f       	andi	r23, 0xFF	; 255
    692c:	7f 7f       	andi	r23, 0xFF	; 255
    692e:	7f 7f       	andi	r23, 0xFF	; 255
    6930:	7f 7f       	andi	r23, 0xFF	; 255
    6932:	7f 7f       	andi	r23, 0xFF	; 255
    6934:	7f 7f       	andi	r23, 0xFF	; 255
    6936:	7f 7f       	andi	r23, 0xFF	; 255
    6938:	7f 7f       	andi	r23, 0xFF	; 255
    693a:	7f 7f       	andi	r23, 0xFF	; 255
    693c:	7f 7f       	andi	r23, 0xFF	; 255
    693e:	7f 7f       	andi	r23, 0xFF	; 255
    6940:	7f 7f       	andi	r23, 0xFF	; 255
    6942:	7f 7f       	andi	r23, 0xFF	; 255
    6944:	7f 7f       	andi	r23, 0xFF	; 255
    6946:	7f 7f       	andi	r23, 0xFF	; 255
    6948:	7f 7f       	andi	r23, 0xFF	; 255
    694a:	7f 7f       	andi	r23, 0xFF	; 255
    694c:	7f 7f       	andi	r23, 0xFF	; 255
    694e:	7f 7f       	andi	r23, 0xFF	; 255
    6950:	7f 7f       	andi	r23, 0xFF	; 255
    6952:	7f 7f       	andi	r23, 0xFF	; 255
    6954:	7f 7f       	andi	r23, 0xFF	; 255
    6956:	7f 7f       	andi	r23, 0xFF	; 255
    6958:	7f 7f       	andi	r23, 0xFF	; 255
    695a:	7f 7f       	andi	r23, 0xFF	; 255
    695c:	7f 7f       	andi	r23, 0xFF	; 255
    695e:	7f 7f       	andi	r23, 0xFF	; 255
    6960:	7f 7f       	andi	r23, 0xFF	; 255
    6962:	7f 7f       	andi	r23, 0xFF	; 255
    6964:	7f 7f       	andi	r23, 0xFF	; 255
    6966:	7f 7f       	andi	r23, 0xFF	; 255
    6968:	7f 7f       	andi	r23, 0xFF	; 255
    696a:	7f 7f       	andi	r23, 0xFF	; 255
    696c:	7f 7f       	andi	r23, 0xFF	; 255
    696e:	7f 7f       	andi	r23, 0xFF	; 255
    6970:	7f 7f       	andi	r23, 0xFF	; 255
    6972:	7f 7f       	andi	r23, 0xFF	; 255
    6974:	7f 7f       	andi	r23, 0xFF	; 255
    6976:	7f 7f       	andi	r23, 0xFF	; 255
    6978:	7f 7f       	andi	r23, 0xFF	; 255
    697a:	7f 7c       	andi	r23, 0xCF	; 207
    697c:	78 71       	andi	r23, 0x18	; 24
    697e:	68 4c       	sbci	r22, 0xC8	; 200
    6980:	2c 1c       	adc	r2, r12
    6982:	12 0c       	add	r1, r2
    6984:	0a 0b       	sbc	r16, r26
    6986:	0a 05       	cpc	r16, r10
    6988:	fd f3       	brhs	.-2      	; 0x6988 <waves+0x988>
    698a:	e9 df       	rcall	.-46     	; 0x695e <waves+0x95e>
    698c:	d4 ca       	rjmp	.-2648   	; 0x5f36 <steptable+0x12e>
    698e:	c0 b7       	in	r28, 0x30	; 48
    6990:	ae a6       	std	Y+46, r10	; 0x2e
    6992:	9e 97       	sbiw	r26, 0x2e	; 46
    6994:	91 8b       	std	Z+17, r25	; 0x11
    6996:	86 85       	ldd	r24, Z+14	; 0x0e
    6998:	82 80       	ldd	r8, Z+2	; 0x02
    699a:	80 80       	ld	r8, Z
    699c:	80 80       	ld	r8, Z
    699e:	80 80       	ld	r8, Z
    69a0:	80 80       	ld	r8, Z
    69a2:	80 80       	ld	r8, Z
    69a4:	80 80       	ld	r8, Z
    69a6:	80 80       	ld	r8, Z
    69a8:	80 80       	ld	r8, Z
    69aa:	80 80       	ld	r8, Z
    69ac:	80 80       	ld	r8, Z
    69ae:	80 80       	ld	r8, Z
    69b0:	80 80       	ld	r8, Z
    69b2:	80 80       	ld	r8, Z
    69b4:	80 80       	ld	r8, Z
    69b6:	80 80       	ld	r8, Z
    69b8:	80 80       	ld	r8, Z
    69ba:	80 80       	ld	r8, Z
    69bc:	80 80       	ld	r8, Z
    69be:	80 80       	ld	r8, Z
    69c0:	80 80       	ld	r8, Z
    69c2:	80 80       	ld	r8, Z
    69c4:	80 80       	ld	r8, Z
    69c6:	80 80       	ld	r8, Z
    69c8:	80 80       	ld	r8, Z
    69ca:	80 80       	ld	r8, Z
    69cc:	80 80       	ld	r8, Z
    69ce:	80 80       	ld	r8, Z
    69d0:	80 80       	ld	r8, Z
    69d2:	80 80       	ld	r8, Z
    69d4:	80 80       	ld	r8, Z
    69d6:	80 80       	ld	r8, Z
    69d8:	80 80       	ld	r8, Z
    69da:	80 80       	ld	r8, Z
    69dc:	80 80       	ld	r8, Z
    69de:	80 80       	ld	r8, Z
    69e0:	80 80       	ld	r8, Z
    69e2:	80 80       	ld	r8, Z
    69e4:	80 80       	ld	r8, Z
    69e6:	80 80       	ld	r8, Z
    69e8:	80 80       	ld	r8, Z
    69ea:	80 80       	ld	r8, Z
    69ec:	80 80       	ld	r8, Z
    69ee:	80 80       	ld	r8, Z
    69f0:	80 80       	ld	r8, Z
    69f2:	80 80       	ld	r8, Z
    69f4:	80 87       	std	Z+8, r24	; 0x08
    69f6:	91 9d       	mul	r25, r1
    69f8:	ac c4       	rjmp	.+2392   	; 0x7352 <_handle_select_helper+0xaa>
    69fa:	cb d4       	rcall	.+2454   	; 0x7392 <_handle_select_helper+0xea>
    69fc:	dd f2       	brhs	.-74     	; 0x69b4 <waves+0x9b4>
    69fe:	fa fa       	.word	0xfafa	; ????

00006a00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    6a00:	90 91 29 0b 	lds	r25, 0x0B29
    6a04:	ec e1       	ldi	r30, 0x1C	; 28
    6a06:	f8 e0       	ldi	r31, 0x08	; 8
    6a08:	80 e0       	ldi	r24, 0x00	; 0
    6a0a:	89 17       	cp	r24, r25
    6a0c:	49 f0       	breq	.+18     	; 0x6a20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    6a0e:	a0 81       	ld	r26, Z
    6a10:	b1 81       	ldd	r27, Z+1	; 0x01
    6a12:	a0 5a       	subi	r26, 0xA0	; 160
    6a14:	be 4f       	sbci	r27, 0xFE	; 254
    6a16:	22 81       	ldd	r18, Z+2	; 0x02
    6a18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    6a1a:	8f 5f       	subi	r24, 0xFF	; 255
    6a1c:	33 96       	adiw	r30, 0x03	; 3
    6a1e:	f5 cf       	rjmp	.-22     	; 0x6a0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    6a20:	08 95       	ret

00006a22 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    6a22:	2f 92       	push	r2
    6a24:	3f 92       	push	r3
    6a26:	4f 92       	push	r4
    6a28:	5f 92       	push	r5
    6a2a:	6f 92       	push	r6
    6a2c:	7f 92       	push	r7
    6a2e:	8f 92       	push	r8
    6a30:	9f 92       	push	r9
    6a32:	af 92       	push	r10
    6a34:	bf 92       	push	r11
    6a36:	cf 92       	push	r12
    6a38:	df 92       	push	r13
    6a3a:	ef 92       	push	r14
    6a3c:	ff 92       	push	r15
    6a3e:	0f 93       	push	r16
    6a40:	1f 93       	push	r17
    6a42:	cf 93       	push	r28
    6a44:	df 93       	push	r29
    6a46:	00 d0       	rcall	.+0      	; 0x6a48 <ProcessSprites+0x26>
    6a48:	1f 92       	push	r1
    6a4a:	cd b7       	in	r28, 0x3d	; 61
    6a4c:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    6a4e:	10 92 29 0b 	sts	0x0B29, r1
		if(!spritesOn) return;
    6a52:	80 91 00 01 	lds	r24, 0x0100
    6a56:	88 23       	and	r24, r24
    6a58:	09 f4       	brne	.+2      	; 0x6a5c <ProcessSprites+0x3a>
    6a5a:	a1 c0       	rjmp	.+322    	; 0x6b9e <ProcessSprites+0x17c>
    6a5c:	e8 ea       	ldi	r30, 0xA8	; 168
    6a5e:	ce 2e       	mov	r12, r30
    6a60:	e4 e0       	ldi	r30, 0x04	; 4
    6a62:	de 2e       	mov	r13, r30
    6a64:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    6a66:	f6 01       	movw	r30, r12
    6a68:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    6a6a:	80 3f       	cpi	r24, 0xF0	; 240
    6a6c:	09 f4       	brne	.+2      	; 0x6a70 <ProcessSprites+0x4e>
    6a6e:	79 c0       	rjmp	.+242    	; 0x6b62 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    6a70:	91 81       	ldd	r25, Z+1	; 0x01
    6a72:	29 2f       	mov	r18, r25
    6a74:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    6a76:	28 2e       	mov	r2, r24
    6a78:	26 94       	lsr	r2
    6a7a:	26 94       	lsr	r2
    6a7c:	26 94       	lsr	r2
				dx=ssx&0x7;
    6a7e:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    6a80:	19 f0       	breq	.+6      	; 0x6a88 <ProcessSprites+0x66>
    6a82:	72 e0       	ldi	r23, 0x02	; 2
    6a84:	47 2e       	mov	r4, r23
    6a86:	02 c0       	rjmp	.+4      	; 0x6a8c <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    6a88:	44 24       	eor	r4, r4
    6a8a:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    6a8c:	63 e0       	ldi	r22, 0x03	; 3
    6a8e:	36 95       	lsr	r19
    6a90:	27 95       	ror	r18
    6a92:	6a 95       	dec	r22
    6a94:	e1 f7       	brne	.-8      	; 0x6a8e <ProcessSprites+0x6c>
    6a96:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    6a98:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    6a9a:	19 f0       	breq	.+6      	; 0x6aa2 <ProcessSprites+0x80>
    6a9c:	52 e0       	ldi	r21, 0x02	; 2
    6a9e:	55 2e       	mov	r5, r21
    6aa0:	02 c0       	rjmp	.+4      	; 0x6aa6 <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    6aa2:	55 24       	eor	r5, r5
    6aa4:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6aa6:	29 2f       	mov	r18, r25
    6aa8:	30 e0       	ldi	r19, 0x00	; 0
    6aaa:	32 2f       	mov	r19, r18
    6aac:	22 27       	eor	r18, r18
    6aae:	a9 01       	movw	r20, r18
    6ab0:	48 0f       	add	r20, r24
    6ab2:	51 1d       	adc	r21, r1
    6ab4:	5b 83       	std	Y+3, r21	; 0x03
    6ab6:	4a 83       	std	Y+2, r20	; 0x02
    6ab8:	e1 2c       	mov	r14, r1
    6aba:	f1 2c       	mov	r15, r1
    6abc:	94 ee       	ldi	r25, 0xE4	; 228
    6abe:	93 0d       	add	r25, r3
    6ac0:	99 83       	std	Y+1, r25	; 0x01
    6ac2:	03 2d       	mov	r16, r3
    6ac4:	0e 0d       	add	r16, r14
    6ac6:	0c 31       	cpi	r16, 0x1C	; 28
    6ac8:	10 f0       	brcs	.+4      	; 0x6ace <ProcessSprites+0xac>
    6aca:	09 81       	ldd	r16, Y+1	; 0x01
    6acc:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    6ace:	5e e1       	ldi	r21, 0x1E	; 30
    6ad0:	05 9f       	mul	r16, r21
    6ad2:	80 01       	movw	r16, r0
    6ad4:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6ad6:	be 2c       	mov	r11, r14
    6ad8:	aa 24       	eor	r10, r10
    6ada:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    6adc:	ed e1       	ldi	r30, 0x1D	; 29
    6ade:	e7 15       	cp	r30, r7
    6ae0:	18 f4       	brcc	.+6      	; 0x6ae8 <ProcessSprites+0xc6>
    6ae2:	82 ee       	ldi	r24, 0xE2	; 226
    6ae4:	87 0d       	add	r24, r7
    6ae6:	01 c0       	rjmp	.+2      	; 0x6aea <ProcessSprites+0xc8>
    6ae8:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    6aea:	a8 01       	movw	r20, r16
    6aec:	48 0f       	add	r20, r24
    6aee:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    6af0:	ca 01       	movw	r24, r20
    6af2:	80 5a       	subi	r24, 0xA0	; 160
    6af4:	9e 4f       	sbci	r25, 0xFE	; 254
    6af6:	4c 01       	movw	r8, r24
    6af8:	fc 01       	movw	r30, r24
    6afa:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    6afc:	8d 30       	cpi	r24, 0x0D	; 13
    6afe:	e0 f0       	brcs	.+56     	; 0x6b38 <ProcessSprites+0x116>
    6b00:	60 91 29 0b 	lds	r22, 0x0B29
    6b04:	6d 30       	cpi	r22, 0x0D	; 13
    6b06:	f8 f4       	brcc	.+62     	; 0x6b46 <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    6b08:	26 2f       	mov	r18, r22
    6b0a:	30 e0       	ldi	r19, 0x00	; 0
    6b0c:	f9 01       	movw	r30, r18
    6b0e:	ee 0f       	add	r30, r30
    6b10:	ff 1f       	adc	r31, r31
    6b12:	e2 0f       	add	r30, r18
    6b14:	f3 1f       	adc	r31, r19
    6b16:	e4 5e       	subi	r30, 0xE4	; 228
    6b18:	f7 4f       	sbci	r31, 0xF7	; 247
    6b1a:	51 83       	std	Z+1, r21	; 0x01
    6b1c:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    6b1e:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    6b20:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    6b24:	80 91 29 0b 	lds	r24, 0x0B29
    6b28:	f4 01       	movw	r30, r8
    6b2a:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    6b2c:	91 e0       	ldi	r25, 0x01	; 1
    6b2e:	98 0f       	add	r25, r24
    6b30:	90 93 29 0b 	sts	0x0B29, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    6b34:	8d 30       	cpi	r24, 0x0D	; 13
    6b36:	38 f4       	brcc	.+14     	; 0x6b46 <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    6b38:	2a 81       	ldd	r18, Y+2	; 0x02
    6b3a:	3b 81       	ldd	r19, Y+3	; 0x03
    6b3c:	a5 01       	movw	r20, r10
    6b3e:	68 2f       	mov	r22, r24
    6b40:	86 2d       	mov	r24, r6
    6b42:	0e 94 ef 26 	call	0x4dde	; 0x4dde <BlitSprite>
    6b46:	ff ef       	ldi	r31, 0xFF	; 255
    6b48:	af 1a       	sub	r10, r31
    6b4a:	bf 0a       	sbc	r11, r31
    6b4c:	73 94       	inc	r7
    6b4e:	87 2d       	mov	r24, r7
    6b50:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    6b52:	84 15       	cp	r24, r4
    6b54:	18 f2       	brcs	.-122    	; 0x6adc <ProcessSprites+0xba>
    6b56:	4f ef       	ldi	r20, 0xFF	; 255
    6b58:	e4 1a       	sub	r14, r20
    6b5a:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    6b5c:	e5 14       	cp	r14, r5
    6b5e:	08 f4       	brcc	.+2      	; 0x6b62 <ProcessSprites+0x140>
    6b60:	b0 cf       	rjmp	.-160    	; 0x6ac2 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    6b62:	63 94       	inc	r6
    6b64:	84 e0       	ldi	r24, 0x04	; 4
    6b66:	c8 0e       	add	r12, r24
    6b68:	d1 1c       	adc	r13, r1
    6b6a:	9d e0       	ldi	r25, 0x0D	; 13
    6b6c:	69 12       	cpse	r6, r25
    6b6e:	7b cf       	rjmp	.-266    	; 0x6a66 <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    6b70:	0f 90       	pop	r0
    6b72:	0f 90       	pop	r0
    6b74:	0f 90       	pop	r0
    6b76:	df 91       	pop	r29
    6b78:	cf 91       	pop	r28
    6b7a:	1f 91       	pop	r17
    6b7c:	0f 91       	pop	r16
    6b7e:	ff 90       	pop	r15
    6b80:	ef 90       	pop	r14
    6b82:	df 90       	pop	r13
    6b84:	cf 90       	pop	r12
    6b86:	bf 90       	pop	r11
    6b88:	af 90       	pop	r10
    6b8a:	9f 90       	pop	r9
    6b8c:	8f 90       	pop	r8
    6b8e:	7f 90       	pop	r7
    6b90:	6f 90       	pop	r6
    6b92:	5f 90       	pop	r5
    6b94:	4f 90       	pop	r4
    6b96:	3f 90       	pop	r3
    6b98:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    6b9a:	0c 94 00 35 	jmp	0x6a00	; 0x6a00 <RestoreBackground>

	}
    6b9e:	0f 90       	pop	r0
    6ba0:	0f 90       	pop	r0
    6ba2:	0f 90       	pop	r0
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	1f 91       	pop	r17
    6baa:	0f 91       	pop	r16
    6bac:	ff 90       	pop	r15
    6bae:	ef 90       	pop	r14
    6bb0:	df 90       	pop	r13
    6bb2:	cf 90       	pop	r12
    6bb4:	bf 90       	pop	r11
    6bb6:	af 90       	pop	r10
    6bb8:	9f 90       	pop	r9
    6bba:	8f 90       	pop	r8
    6bbc:	7f 90       	pop	r7
    6bbe:	6f 90       	pop	r6
    6bc0:	5f 90       	pop	r5
    6bc2:	4f 90       	pop	r4
    6bc4:	3f 90       	pop	r3
    6bc6:	2f 90       	pop	r2
    6bc8:	08 95       	ret

00006bca <MapSprite>:
			}
		}
	#endif

	
	void MapSprite(unsigned char startSprite,const char *map){
    6bca:	bf 92       	push	r11
    6bcc:	cf 92       	push	r12
    6bce:	df 92       	push	r13
    6bd0:	ef 92       	push	r14
    6bd2:	ff 92       	push	r15
    6bd4:	0f 93       	push	r16
    6bd6:	1f 93       	push	r17
    6bd8:	cf 93       	push	r28
    6bda:	df 93       	push	r29
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    6bdc:	fb 01       	movw	r30, r22
    6bde:	c4 90       	lpm	r12, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    6be0:	31 96       	adiw	r30, 0x01	; 1
    6be2:	94 91       	lpm	r25, Z
    6be4:	0c 2d       	mov	r16, r12
    6be6:	10 e0       	ldi	r17, 0x00	; 0

		for(unsigned char dy=0;dy<mapHeight;dy++){
    6be8:	c0 e0       	ldi	r28, 0x00	; 0
    6bea:	d0 e0       	ldi	r29, 0x00	; 0
    6bec:	d1 2c       	mov	r13, r1
    6bee:	bc 2e       	mov	r11, r28
    6bf0:	b8 0e       	add	r11, r24
    6bf2:	d9 16       	cp	r13, r25
    6bf4:	01 f1       	breq	.+64     	; 0x6c36 <MapSprite+0x6c>
    6bf6:	20 e0       	ldi	r18, 0x00	; 0
    6bf8:	30 e0       	ldi	r19, 0x00	; 0
    6bfa:	7e 01       	movw	r14, r28
    6bfc:	42 e0       	ldi	r20, 0x02	; 2
    6bfe:	e4 0e       	add	r14, r20
    6c00:	f1 1c       	adc	r15, r1
    6c02:	ab 2d       	mov	r26, r11
    6c04:	a2 0f       	add	r26, r18
			for(unsigned char dx=0;dx<mapWidth;dx++){
    6c06:	2c 15       	cp	r18, r12
    6c08:	90 f4       	brcc	.+36     	; 0x6c2e <MapSprite+0x64>
    6c0a:	a7 01       	movw	r20, r14
    6c0c:	42 0f       	add	r20, r18
    6c0e:	53 1f       	adc	r21, r19
    6c10:	fb 01       	movw	r30, r22
    6c12:	e4 0f       	add	r30, r20
    6c14:	f5 1f       	adc	r31, r21
		
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
    6c16:	44 91       	lpm	r20, Z
				sprites[startSprite++].tileIndex=tile ;
    6c18:	f4 e0       	ldi	r31, 0x04	; 4
    6c1a:	af 9f       	mul	r26, r31
    6c1c:	d0 01       	movw	r26, r0
    6c1e:	11 24       	eor	r1, r1
    6c20:	a8 55       	subi	r26, 0x58	; 88
    6c22:	bb 4f       	sbci	r27, 0xFB	; 251
    6c24:	12 96       	adiw	r26, 0x02	; 2
    6c26:	4c 93       	st	X, r20
    6c28:	2f 5f       	subi	r18, 0xFF	; 255
    6c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c2c:	ea cf       	rjmp	.-44     	; 0x6c02 <MapSprite+0x38>
	void MapSprite(unsigned char startSprite,const char *map){
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
		unsigned char mapHeight=pgm_read_byte(&(map[1]));

		for(unsigned char dy=0;dy<mapHeight;dy++){
    6c2e:	d3 94       	inc	r13
    6c30:	c0 0f       	add	r28, r16
    6c32:	d1 1f       	adc	r29, r17
    6c34:	dc cf       	rjmp	.-72     	; 0x6bee <MapSprite+0x24>
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
				sprites[startSprite++].tileIndex=tile ;
			}
		}

	}
    6c36:	df 91       	pop	r29
    6c38:	cf 91       	pop	r28
    6c3a:	1f 91       	pop	r17
    6c3c:	0f 91       	pop	r16
    6c3e:	ff 90       	pop	r15
    6c40:	ef 90       	pop	r14
    6c42:	df 90       	pop	r13
    6c44:	cf 90       	pop	r12
    6c46:	bf 90       	pop	r11
    6c48:	08 95       	ret

00006c4a <MoveSprite>:
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
	    }
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    6c4a:	0f 93       	push	r16
    6c4c:	cf 93       	push	r28
    6c4e:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    6c50:	30 e0       	ldi	r19, 0x00	; 0
    6c52:	30 17       	cp	r19, r16
    6c54:	e1 f0       	breq	.+56     	; 0x6c8e <MoveSprite+0x44>
    6c56:	b4 2f       	mov	r27, r20
    6c58:	a0 e2       	ldi	r26, 0x20	; 32
    6c5a:	a4 0f       	add	r26, r20
    6c5c:	78 2f       	mov	r23, r24
    6c5e:	72 0f       	add	r23, r18
    6c60:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    6c62:	87 17       	cp	r24, r23
    6c64:	81 f0       	breq	.+32     	; 0x6c86 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    6c66:	c4 e0       	ldi	r28, 0x04	; 4
    6c68:	8c 9f       	mul	r24, r28
    6c6a:	f0 01       	movw	r30, r0
    6c6c:	11 24       	eor	r1, r1
    6c6e:	e8 55       	subi	r30, 0x58	; 88
    6c70:	fb 4f       	sbci	r31, 0xFB	; 251
    6c72:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    6c74:	41 3e       	cpi	r20, 0xE1	; 225
    6c76:	51 05       	cpc	r21, r1
    6c78:	14 f0       	brlt	.+4      	; 0x6c7e <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    6c7a:	a1 83       	std	Z+1, r26	; 0x01
    6c7c:	01 c0       	rjmp	.+2      	; 0x6c80 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    6c7e:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    6c80:	8f 5f       	subi	r24, 0xFF	; 255
    6c82:	98 5f       	subi	r25, 0xF8	; 248
    6c84:	ee cf       	rjmp	.-36     	; 0x6c62 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    6c86:	3f 5f       	subi	r19, 0xFF	; 255
    6c88:	48 5f       	subi	r20, 0xF8	; 248
    6c8a:	5f 4f       	sbci	r21, 0xFF	; 255
    6c8c:	e2 cf       	rjmp	.-60     	; 0x6c52 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    6c8e:	cf 91       	pop	r28
    6c90:	0f 91       	pop	r16
    6c92:	08 95       	ret

00006c94 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    6c94:	e8 ea       	ldi	r30, 0xA8	; 168
    6c96:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    6c98:	80 ef       	ldi	r24, 0xF0	; 240
    6c9a:	80 83       	st	Z, r24
    6c9c:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    6c9e:	94 e0       	ldi	r25, 0x04	; 4
    6ca0:	ec 3d       	cpi	r30, 0xDC	; 220
    6ca2:	f9 07       	cpc	r31, r25
    6ca4:	d1 f7       	brne	.-12     	; 0x6c9a <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    6ca6:	08 95       	ret

00006ca8 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    6ca8:	4f 92       	push	r4
    6caa:	5f 92       	push	r5
    6cac:	6f 92       	push	r6
    6cae:	7f 92       	push	r7
    6cb0:	8f 92       	push	r8
    6cb2:	9f 92       	push	r9
    6cb4:	af 92       	push	r10
    6cb6:	bf 92       	push	r11
    6cb8:	cf 92       	push	r12
    6cba:	df 92       	push	r13
    6cbc:	ef 92       	push	r14
    6cbe:	ff 92       	push	r15
    6cc0:	0f 93       	push	r16
    6cc2:	1f 93       	push	r17
    6cc4:	cf 93       	push	r28
    6cc6:	df 93       	push	r29
    6cc8:	68 2e       	mov	r6, r24
    6cca:	56 2e       	mov	r5, r22
    6ccc:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    6cce:	fa 01       	movw	r30, r20
    6cd0:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    6cd2:	31 96       	adiw	r30, 0x01	; 1
    6cd4:	84 90       	lpm	r8, Z
    6cd6:	c7 2c       	mov	r12, r7
    6cd8:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    6cda:	00 e0       	ldi	r16, 0x00	; 0
    6cdc:	10 e0       	ldi	r17, 0x00	; 0
    6cde:	91 2c       	mov	r9, r1
    6ce0:	98 14       	cp	r9, r8
    6ce2:	f1 f0       	breq	.+60     	; 0x6d20 <DrawMap2+0x78>
    6ce4:	c0 e0       	ldi	r28, 0x00	; 0
    6ce6:	d0 e0       	ldi	r29, 0x00	; 0
    6ce8:	58 01       	movw	r10, r16
    6cea:	f2 e0       	ldi	r31, 0x02	; 2
    6cec:	af 0e       	add	r10, r31
    6cee:	b1 1c       	adc	r11, r1
    6cf0:	49 2c       	mov	r4, r9
    6cf2:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    6cf4:	c7 15       	cp	r28, r7
    6cf6:	80 f4       	brcc	.+32     	; 0x6d18 <DrawMap2+0x70>
    6cf8:	95 01       	movw	r18, r10
    6cfa:	2c 0f       	add	r18, r28
    6cfc:	3d 1f       	adc	r19, r29
    6cfe:	f7 01       	movw	r30, r14
    6d00:	e2 0f       	add	r30, r18
    6d02:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    6d04:	24 91       	lpm	r18, Z
    6d06:	42 2f       	mov	r20, r18
    6d08:	50 e0       	ldi	r21, 0x00	; 0
    6d0a:	64 2d       	mov	r22, r4
    6d0c:	8c 2f       	mov	r24, r28
    6d0e:	86 0d       	add	r24, r6
    6d10:	0e 94 83 29 	call	0x5306	; 0x5306 <SetTile>
    6d14:	21 96       	adiw	r28, 0x01	; 1
    6d16:	ee cf       	rjmp	.-36     	; 0x6cf4 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    6d18:	93 94       	inc	r9
    6d1a:	0c 0d       	add	r16, r12
    6d1c:	1d 1d       	adc	r17, r13
    6d1e:	e0 cf       	rjmp	.-64     	; 0x6ce0 <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    6d20:	df 91       	pop	r29
    6d22:	cf 91       	pop	r28
    6d24:	1f 91       	pop	r17
    6d26:	0f 91       	pop	r16
    6d28:	ff 90       	pop	r15
    6d2a:	ef 90       	pop	r14
    6d2c:	df 90       	pop	r13
    6d2e:	cf 90       	pop	r12
    6d30:	bf 90       	pop	r11
    6d32:	af 90       	pop	r10
    6d34:	9f 90       	pop	r9
    6d36:	8f 90       	pop	r8
    6d38:	7f 90       	pop	r7
    6d3a:	6f 90       	pop	r6
    6d3c:	5f 90       	pop	r5
    6d3e:	4f 90       	pop	r4
    6d40:	08 95       	ret

00006d42 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    6d42:	df 92       	push	r13
    6d44:	ef 92       	push	r14
    6d46:	ff 92       	push	r15
    6d48:	0f 93       	push	r16
    6d4a:	1f 93       	push	r17
    6d4c:	cf 93       	push	r28
    6d4e:	df 93       	push	r29
    6d50:	f6 2e       	mov	r15, r22
    6d52:	04 2f       	mov	r16, r20
    6d54:	d2 2e       	mov	r13, r18
    6d56:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    6d58:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    6d5a:	8a e0       	ldi	r24, 0x0A	; 10
    6d5c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    6d5e:	01 11       	cpse	r16, r1
    6d60:	02 c0       	rjmp	.+4      	; 0x6d66 <PrintByte+0x24>
    6d62:	11 11       	cpse	r17, r1
    6d64:	07 c0       	rjmp	.+14     	; 0x6d74 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    6d66:	80 2f       	mov	r24, r16
    6d68:	6e 2d       	mov	r22, r14
    6d6a:	0e 94 af 3b 	call	0x775e	; 0x775e <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    6d6e:	40 e1       	ldi	r20, 0x10	; 16
    6d70:	49 0f       	add	r20, r25
    6d72:	05 c0       	rjmp	.+10     	; 0x6d7e <PrintByte+0x3c>
		}else{
			if(zeropad){
    6d74:	dd 20       	and	r13, r13
    6d76:	11 f0       	breq	.+4      	; 0x6d7c <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    6d78:	40 e1       	ldi	r20, 0x10	; 16
    6d7a:	01 c0       	rjmp	.+2      	; 0x6d7e <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    6d7c:	40 e0       	ldi	r20, 0x00	; 0
    6d7e:	6f 2d       	mov	r22, r15
    6d80:	8c 2f       	mov	r24, r28
    6d82:	0e 94 7f 29 	call	0x52fe	; 0x52fe <SetFont>
			}
		}
		val=val/10;
    6d86:	80 2f       	mov	r24, r16
    6d88:	6e 2d       	mov	r22, r14
    6d8a:	0e 94 af 3b 	call	0x775e	; 0x775e <__udivmodqi4>
    6d8e:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    6d90:	1f 5f       	subi	r17, 0xFF	; 255
    6d92:	21 97       	sbiw	r28, 0x01	; 1
    6d94:	13 30       	cpi	r17, 0x03	; 3
    6d96:	19 f7       	brne	.-58     	; 0x6d5e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    6d98:	df 91       	pop	r29
    6d9a:	cf 91       	pop	r28
    6d9c:	1f 91       	pop	r17
    6d9e:	0f 91       	pop	r16
    6da0:	ff 90       	pop	r15
    6da2:	ef 90       	pop	r14
    6da4:	df 90       	pop	r13
    6da6:	08 95       	ret

00006da8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    6da8:	0f 93       	push	r16
    6daa:	1f 93       	push	r17
    6dac:	cf 93       	push	r28
    6dae:	df 93       	push	r29
    6db0:	06 2f       	mov	r16, r22
    6db2:	c4 2f       	mov	r28, r20
    6db4:	d5 2f       	mov	r29, r21
    6db6:	18 2f       	mov	r17, r24
    6db8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    6dba:	fe 01       	movw	r30, r28
    6dbc:	44 91       	lpm	r20, Z
		if(c!=0){
    6dbe:	44 23       	and	r20, r20
    6dc0:	49 f0       	breq	.+18     	; 0x6dd4 <Print+0x2c>
			c=((c&127)-32);			
    6dc2:	4f 77       	andi	r20, 0x7F	; 127
    6dc4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    6dc6:	60 2f       	mov	r22, r16
    6dc8:	8c 2f       	mov	r24, r28
    6dca:	81 0f       	add	r24, r17
    6dcc:	0e 94 7f 29 	call	0x52fe	; 0x52fe <SetFont>
    6dd0:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    6dd2:	f3 cf       	rjmp	.-26     	; 0x6dba <Print+0x12>
	
}
    6dd4:	df 91       	pop	r29
    6dd6:	cf 91       	pop	r28
    6dd8:	1f 91       	pop	r17
    6dda:	0f 91       	pop	r16
    6ddc:	08 95       	ret

00006dde <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    6dde:	40 52       	subi	r20, 0x20	; 32
    6de0:	0c 94 7f 29 	jmp	0x52fe	; 0x52fe <SetFont>

00006de4 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    6de4:	0f 93       	push	r16
    6de6:	1f 93       	push	r17
    6de8:	cf 93       	push	r28
    6dea:	df 93       	push	r29
    6dec:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6dee:	c0 e0       	ldi	r28, 0x00	; 0
    6df0:	d0 e0       	ldi	r29, 0x00	; 0
    6df2:	c0 17       	cp	r28, r16
    6df4:	d1 07       	cpc	r29, r17
    6df6:	44 f4       	brge	.+16     	; 0x6e08 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    6df8:	0e 94 99 29 	call	0x5332	; 0x5332 <GetVsyncFlag>
    6dfc:	88 23       	and	r24, r24
    6dfe:	e1 f3       	breq	.-8      	; 0x6df8 <WaitVsync+0x14>
		ClearVsyncFlag();		
    6e00:	0e 94 9d 29 	call	0x533a	; 0x533a <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    6e04:	21 96       	adiw	r28, 0x01	; 1
    6e06:	f5 cf       	rjmp	.-22     	; 0x6df2 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    6e08:	df 91       	pop	r29
    6e0a:	cf 91       	pop	r28
    6e0c:	1f 91       	pop	r17
    6e0e:	0f 91       	pop	r16
    6e10:	08 95       	ret

00006e12 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    6e12:	8b e0       	ldi	r24, 0x0B	; 11
    6e14:	99 e0       	ldi	r25, 0x09	; 9
    6e16:	0e 94 86 2b 	call	0x570c	; 0x570c <InitMusicPlayer>
			SetTileTable(logo_tileset);
    6e1a:	8b e0       	ldi	r24, 0x0B	; 11
    6e1c:	91 e0       	ldi	r25, 0x01	; 1
    6e1e:	0e 94 94 29 	call	0x5328	; 0x5328 <SetTileTable>
			
			//draw logo
			ClearVram();
    6e22:	0e 94 75 29 	call	0x52ea	; 0x52ea <ClearVram>
			WaitVsync(15);		
    6e26:	8f e0       	ldi	r24, 0x0F	; 15
    6e28:	90 e0       	ldi	r25, 0x00	; 0
    6e2a:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <WaitVsync>

			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6e2e:	45 ef       	ldi	r20, 0xF5	; 245
    6e30:	50 e0       	ldi	r21, 0x00	; 0
    6e32:	6c e0       	ldi	r22, 0x0C	; 12
    6e34:	8c e0       	ldi	r24, 0x0C	; 12
    6e36:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <DrawMap2>
			WaitVsync(3);
    6e3a:	83 e0       	ldi	r24, 0x03	; 3
    6e3c:	90 e0       	ldi	r25, 0x00	; 0
    6e3e:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    6e42:	44 ee       	ldi	r20, 0xE4	; 228
    6e44:	50 e0       	ldi	r21, 0x00	; 0
    6e46:	6c e0       	ldi	r22, 0x0C	; 12
    6e48:	8c e0       	ldi	r24, 0x0C	; 12
    6e4a:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <DrawMap2>
			WaitVsync(2);
    6e4e:	82 e0       	ldi	r24, 0x02	; 2
    6e50:	90 e0       	ldi	r25, 0x00	; 0
    6e52:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    6e56:	45 ef       	ldi	r20, 0xF5	; 245
    6e58:	50 e0       	ldi	r21, 0x00	; 0
    6e5a:	6c e0       	ldi	r22, 0x0C	; 12
    6e5c:	8c e0       	ldi	r24, 0x0C	; 12
    6e5e:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <DrawMap2>

			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
    6e62:	80 ec       	ldi	r24, 0xC0	; 192
    6e64:	0e 94 cd 2e 	call	0x5d9a	; 0x5d9a <SetMasterVolume>
				TriggerNote(3,0,16,0xff);
    6e68:	2f ef       	ldi	r18, 0xFF	; 255
    6e6a:	40 e1       	ldi	r20, 0x10	; 16
    6e6c:	60 e0       	ldi	r22, 0x00	; 0
    6e6e:	83 e0       	ldi	r24, 0x03	; 3
    6e70:	0e 94 6f 2c 	call	0x58de	; 0x58de <TriggerNote>
			#endif 
		
			WaitVsync(65);
    6e74:	81 e4       	ldi	r24, 0x41	; 65
    6e76:	90 e0       	ldi	r25, 0x00	; 0
    6e78:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <WaitVsync>
			ClearVram();
    6e7c:	0e 94 75 29 	call	0x52ea	; 0x52ea <ClearVram>
			WaitVsync(20);
    6e80:	84 e1       	ldi	r24, 0x14	; 20
    6e82:	90 e0       	ldi	r25, 0x00	; 0
    6e84:	0c 94 f2 36 	jmp	0x6de4	; 0x6de4 <WaitVsync>

00006e88 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    6e88:	80 93 27 0b 	sts	0x0B27, r24
	currFadeFrame=0;
    6e8c:	10 92 2b 0b 	sts	0x0B2B, r1
	fadeActive=true;
    6e90:	81 e0       	ldi	r24, 0x01	; 1
    6e92:	80 93 2a 0b 	sts	0x0B2A, r24
		
	if(blocking){
    6e96:	66 23       	and	r22, r22
    6e98:	21 f0       	breq	.+8      	; 0x6ea2 <doFade+0x1a>
		while(fadeActive==true);
    6e9a:	80 91 2a 0b 	lds	r24, 0x0B2A
    6e9e:	81 11       	cpse	r24, r1
    6ea0:	fc cf       	rjmp	.-8      	; 0x6e9a <doFade+0x12>
    6ea2:	08 95       	ret

00006ea4 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    6ea4:	81 11       	cpse	r24, r1
    6ea6:	03 c0       	rjmp	.+6      	; 0x6eae <FadeIn+0xa>
		DDRC=0xff;
    6ea8:	8f ef       	ldi	r24, 0xFF	; 255
    6eaa:	87 b9       	out	0x07, r24	; 7
		return;
    6eac:	08 95       	ret
	}
	fadeStep=1;
    6eae:	91 e0       	ldi	r25, 0x01	; 1
    6eb0:	90 93 2c 0b 	sts	0x0B2C, r25
	fadeDir=1;
    6eb4:	90 93 28 0b 	sts	0x0B28, r25
	doFade(speed,blocking);
    6eb8:	0c 94 44 37 	jmp	0x6e88	; 0x6e88 <doFade>

00006ebc <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    6ebc:	81 11       	cpse	r24, r1
    6ebe:	02 c0       	rjmp	.+4      	; 0x6ec4 <FadeOut+0x8>
		DDRC=0;
    6ec0:	17 b8       	out	0x07, r1	; 7
		return;
    6ec2:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    6ec4:	9c e0       	ldi	r25, 0x0C	; 12
    6ec6:	90 93 2c 0b 	sts	0x0B2C, r25
	fadeDir=-1;
    6eca:	9f ef       	ldi	r25, 0xFF	; 255
    6ecc:	90 93 28 0b 	sts	0x0B28, r25
	doFade(speed,blocking);
    6ed0:	0c 94 44 37 	jmp	0x6e88	; 0x6e88 <doFade>

00006ed4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    6ed4:	80 91 2a 0b 	lds	r24, 0x0B2A
    6ed8:	88 23       	and	r24, r24
    6eda:	01 f1       	breq	.+64     	; 0x6f1c <ProcessFading+0x48>
		if(currFadeFrame==0){
    6edc:	80 91 2b 0b 	lds	r24, 0x0B2B
    6ee0:	81 11       	cpse	r24, r1
    6ee2:	19 c0       	rjmp	.+50     	; 0x6f16 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    6ee4:	80 91 27 0b 	lds	r24, 0x0B27
    6ee8:	80 93 2b 0b 	sts	0x0B2B, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    6eec:	e0 91 2c 0b 	lds	r30, 0x0B2C
    6ef0:	f0 e0       	ldi	r31, 0x00	; 0
    6ef2:	e9 52       	subi	r30, 0x29	; 41
    6ef4:	ff 4f       	sbci	r31, 0xFF	; 255
    6ef6:	e4 91       	lpm	r30, Z
    6ef8:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    6efa:	90 91 28 0b 	lds	r25, 0x0B28
    6efe:	80 91 2c 0b 	lds	r24, 0x0B2C
    6f02:	89 0f       	add	r24, r25
    6f04:	80 93 2c 0b 	sts	0x0B2C, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    6f08:	88 23       	and	r24, r24
    6f0a:	11 f0       	breq	.+4      	; 0x6f10 <ProcessFading+0x3c>
    6f0c:	8d 30       	cpi	r24, 0x0D	; 13
    6f0e:	31 f4       	brne	.+12     	; 0x6f1c <ProcessFading+0x48>
				fadeActive=false;
    6f10:	10 92 2a 0b 	sts	0x0B2A, r1
    6f14:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    6f16:	81 50       	subi	r24, 0x01	; 1
    6f18:	80 93 2b 0b 	sts	0x0B2B, r24
    6f1c:	08 95       	ret

00006f1e <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    6f1e:	0e 94 6a 37 	call	0x6ed4	; 0x6ed4 <ProcessFading>
		ProcessSprites();
    6f22:	0c 94 11 35 	jmp	0x6a22	; 0x6a22 <ProcessSprites>

00006f26 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    6f26:	0f 93       	push	r16
    6f28:	1f 93       	push	r17
    6f2a:	cf 93       	push	r28
    6f2c:	df 93       	push	r29
    6f2e:	8c 01       	movw	r16, r24
    6f30:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    6f32:	80 e0       	ldi	r24, 0x00	; 0
    6f34:	0e 94 a3 29 	call	0x5346	; 0x5346 <ReadJoypad>
    6f38:	f8 01       	movw	r30, r16
    6f3a:	95 83       	std	Z+5, r25	; 0x05
    6f3c:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    6f3e:	20 91 bc 0a 	lds	r18, 0x0ABC
    6f42:	30 91 bd 0a 	lds	r19, 0x0ABD
    6f46:	a9 01       	movw	r20, r18
    6f48:	40 95       	com	r20
    6f4a:	50 95       	com	r21
    6f4c:	48 23       	and	r20, r24
    6f4e:	59 23       	and	r21, r25
    6f50:	51 83       	std	Z+1, r21	; 0x01
    6f52:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    6f54:	ac 01       	movw	r20, r24
    6f56:	40 95       	com	r20
    6f58:	50 95       	com	r21
    6f5a:	24 23       	and	r18, r20
    6f5c:	35 23       	and	r19, r21
    6f5e:	33 83       	std	Z+3, r19	; 0x03
    6f60:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    6f62:	90 93 bd 0a 	sts	0x0ABD, r25
    6f66:	80 93 bc 0a 	sts	0x0ABC, r24
	p2->held = ReadJoypad(1);
    6f6a:	81 e0       	ldi	r24, 0x01	; 1
    6f6c:	0e 94 a3 29 	call	0x5346	; 0x5346 <ReadJoypad>
    6f70:	9d 83       	std	Y+5, r25	; 0x05
    6f72:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    6f74:	20 91 ba 0a 	lds	r18, 0x0ABA
    6f78:	30 91 bb 0a 	lds	r19, 0x0ABB
    6f7c:	a9 01       	movw	r20, r18
    6f7e:	40 95       	com	r20
    6f80:	50 95       	com	r21
    6f82:	48 23       	and	r20, r24
    6f84:	59 23       	and	r21, r25
    6f86:	59 83       	std	Y+1, r21	; 0x01
    6f88:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    6f8a:	ac 01       	movw	r20, r24
    6f8c:	40 95       	com	r20
    6f8e:	50 95       	com	r21
    6f90:	24 23       	and	r18, r20
    6f92:	35 23       	and	r19, r21
    6f94:	3b 83       	std	Y+3, r19	; 0x03
    6f96:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    6f98:	90 93 bb 0a 	sts	0x0ABB, r25
    6f9c:	80 93 ba 0a 	sts	0x0ABA, r24
}
    6fa0:	df 91       	pop	r29
    6fa2:	cf 91       	pop	r28
    6fa4:	1f 91       	pop	r17
    6fa6:	0f 91       	pop	r16
    6fa8:	08 95       	ret

00006faa <LBCopyChars>:

void LBCopyChars(unsigned char* dst, unsigned char *src, unsigned char count)
/*
 * Custom string copy
 */
{
    6faa:	36 2f       	mov	r19, r22
	for (unsigned char i = 0; i < count; i++)
    6fac:	fb 01       	movw	r30, r22
    6fae:	2e 2f       	mov	r18, r30
    6fb0:	23 1b       	sub	r18, r19
    6fb2:	24 17       	cp	r18, r20
    6fb4:	28 f4       	brcc	.+10     	; 0x6fc0 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    6fb6:	21 91       	ld	r18, Z+
    6fb8:	dc 01       	movw	r26, r24
    6fba:	2d 93       	st	X+, r18
    6fbc:	cd 01       	movw	r24, r26
    6fbe:	f7 cf       	rjmp	.-18     	; 0x6fae <LBCopyChars+0x4>
	}
}
    6fc0:	08 95       	ret

00006fc2 <LBPrintStr>:

void LBPrintStr(unsigned char x, unsigned char y, unsigned char* txt, unsigned char count)
{
    6fc2:	af 92       	push	r10
    6fc4:	bf 92       	push	r11
    6fc6:	cf 92       	push	r12
    6fc8:	df 92       	push	r13
    6fca:	ef 92       	push	r14
    6fcc:	ff 92       	push	r15
    6fce:	0f 93       	push	r16
    6fd0:	1f 93       	push	r17
    6fd2:	cf 93       	push	r28
    6fd4:	df 93       	push	r29
    6fd6:	1f 92       	push	r1
    6fd8:	cd b7       	in	r28, 0x3d	; 61
    6fda:	de b7       	in	r29, 0x3e	; 62
    6fdc:	7a 01       	movw	r14, r20
	for (unsigned char i = 0; i < count; i++)
    6fde:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    6fe0:	c6 2e       	mov	r12, r22
    6fe2:	d1 2c       	mov	r13, r1
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	5c 01       	movw	r10, r24
    6fe8:	a4 1a       	sub	r10, r20
    6fea:	b5 0a       	sbc	r11, r21
    6fec:	80 2f       	mov	r24, r16
    6fee:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(unsigned char x, unsigned char y, unsigned char* txt, unsigned char count)
{
	for (unsigned char i = 0; i < count; i++)
    6ff0:	82 17       	cp	r24, r18
    6ff2:	60 f4       	brcc	.+24     	; 0x700c <LBPrintStr+0x4a>
    6ff4:	c5 01       	movw	r24, r10
    6ff6:	80 0f       	add	r24, r16
    6ff8:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    6ffa:	f8 01       	movw	r30, r16
    6ffc:	41 91       	ld	r20, Z+
    6ffe:	8f 01       	movw	r16, r30
    7000:	b6 01       	movw	r22, r12
    7002:	29 83       	std	Y+1, r18	; 0x01
    7004:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
    7008:	29 81       	ldd	r18, Y+1	; 0x01
    700a:	f0 cf       	rjmp	.-32     	; 0x6fec <LBPrintStr+0x2a>
	}
}
    700c:	0f 90       	pop	r0
    700e:	df 91       	pop	r29
    7010:	cf 91       	pop	r28
    7012:	1f 91       	pop	r17
    7014:	0f 91       	pop	r16
    7016:	ff 90       	pop	r15
    7018:	ef 90       	pop	r14
    701a:	df 90       	pop	r13
    701c:	cf 90       	pop	r12
    701e:	bf 90       	pop	r11
    7020:	af 90       	pop	r10
    7022:	08 95       	ret

00007024 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    7024:	cf 93       	push	r28
    7026:	df 93       	push	r29
    7028:	ec 01       	movw	r28, r24
	unsigned char status = 0;
	status = EepromReadBlock(block->id, block);
    702a:	bc 01       	movw	r22, r24
    702c:	88 81       	ld	r24, Y
    702e:	99 81       	ldd	r25, Y+1	; 0x01
    7030:	0e 94 b9 2a 	call	0x5572	; 0x5572 <EepromReadBlock>
	if (status == 0x03)
    7034:	83 30       	cpi	r24, 0x03	; 3
    7036:	29 f4       	brne	.+10     	; 0x7042 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    7038:	ce 01       	movw	r24, r28
	}
}
    703a:	df 91       	pop	r29
    703c:	cf 91       	pop	r28
{
	unsigned char status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    703e:	0c 94 4c 2a 	jmp	0x5498	; 0x5498 <EepromWriteBlock>
	}
}
    7042:	df 91       	pop	r29
    7044:	cf 91       	pop	r28
    7046:	08 95       	ret

00007048 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    7048:	61 e0       	ldi	r22, 0x01	; 1
    704a:	83 e0       	ldi	r24, 0x03	; 3
    704c:	0e 94 5e 37 	call	0x6ebc	; 0x6ebc <FadeOut>
	ClearVram();
    7050:	0e 94 75 29 	call	0x52ea	; 0x52ea <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    7054:	60 e0       	ldi	r22, 0x00	; 0
    7056:	83 e0       	ldi	r24, 0x03	; 3
    7058:	0c 94 52 37 	jmp	0x6ea4	; 0x6ea4 <FadeIn>

0000705c <clear_sprites>:
}

void clear_sprites()
{
    705c:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    705e:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite(i, map_none);
    7060:	61 ef       	ldi	r22, 0xF1	; 241
    7062:	79 e1       	ldi	r23, 0x19	; 25
    7064:	8c 2f       	mov	r24, r28
    7066:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
    706a:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    706c:	cd 30       	cpi	r28, 0x0D	; 13
    706e:	c1 f7       	brne	.-16     	; 0x7060 <clear_sprites+0x4>
	{
		MapSprite(i, map_none);
	}
}
    7070:	cf 91       	pop	r28
    7072:	08 95       	ret

00007074 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    7074:	0f 93       	push	r16
    7076:	cf 93       	push	r28
    7078:	df 93       	push	r29
    707a:	ec 01       	movw	r28, r24
	clear_sprites();
    707c:	0e 94 2e 38 	call	0x705c	; 0x705c <clear_sprites>
	Print(7, 13, str1Player);
    7080:	4b e7       	ldi	r20, 0x7B	; 123
    7082:	59 e1       	ldi	r21, 0x19	; 25
    7084:	6d e0       	ldi	r22, 0x0D	; 13
    7086:	70 e0       	ldi	r23, 0x00	; 0
    7088:	87 e0       	ldi	r24, 0x07	; 7
    708a:	90 e0       	ldi	r25, 0x00	; 0
    708c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
	Print(7, 14, str2Player);
    7090:	4a e6       	ldi	r20, 0x6A	; 106
    7092:	59 e1       	ldi	r21, 0x19	; 25
    7094:	6e e0       	ldi	r22, 0x0E	; 14
    7096:	70 e0       	ldi	r23, 0x00	; 0
    7098:	87 e0       	ldi	r24, 0x07	; 7
    709a:	90 e0       	ldi	r25, 0x00	; 0
    709c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
	Print(7, 15, strHighscores);
    70a0:	40 e6       	ldi	r20, 0x60	; 96
    70a2:	59 e1       	ldi	r21, 0x19	; 25
    70a4:	6f e0       	ldi	r22, 0x0F	; 15
    70a6:	70 e0       	ldi	r23, 0x00	; 0
    70a8:	87 e0       	ldi	r24, 0x07	; 7
    70aa:	90 e0       	ldi	r25, 0x00	; 0
    70ac:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
	Print(4, 26, strCopyright);
    70b0:	49 e8       	ldi	r20, 0x89	; 137
    70b2:	59 e1       	ldi	r21, 0x19	; 25
    70b4:	6a e1       	ldi	r22, 0x1A	; 26
    70b6:	70 e0       	ldi	r23, 0x00	; 0
    70b8:	84 e0       	ldi	r24, 0x04	; 4
    70ba:	90 e0       	ldi	r25, 0x00	; 0
    70bc:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    70c0:	48 e1       	ldi	r20, 0x18	; 24
    70c2:	5a e1       	ldi	r21, 0x1A	; 26
    70c4:	65 e0       	ldi	r22, 0x05	; 5
    70c6:	84 e0       	ldi	r24, 0x04	; 4
    70c8:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <DrawMap2>
	MapSprite(0, map_ball);
    70cc:	6c ea       	ldi	r22, 0xAC	; 172
    70ce:	79 e1       	ldi	r23, 0x19	; 25
    70d0:	80 e0       	ldi	r24, 0x00	; 0
    70d2:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>

	// Update
	if (p1->pressed & BTN_UP)
    70d6:	28 81       	ld	r18, Y
    70d8:	39 81       	ldd	r19, Y+1	; 0x01
    70da:	80 91 36 0b 	lds	r24, 0x0B36
    70de:	24 ff       	sbrs	r18, 4
    70e0:	06 c0       	rjmp	.+12     	; 0x70ee <update_splash+0x7a>
	{
		game.selection--;
    70e2:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    70e4:	87 ff       	sbrs	r24, 7
    70e6:	09 c0       	rjmp	.+18     	; 0x70fa <update_splash+0x86>
    70e8:	10 92 36 0b 	sts	0x0B36, r1
    70ec:	26 c0       	rjmp	.+76     	; 0x713a <update_splash+0xc6>
	}
	else if (p1->pressed & BTN_DOWN)
    70ee:	25 ff       	sbrs	r18, 5
    70f0:	07 c0       	rjmp	.+14     	; 0x7100 <update_splash+0x8c>
	{
		game.selection++;
    70f2:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    70f4:	83 30       	cpi	r24, 0x03	; 3
    70f6:	0c f0       	brlt	.+2      	; 0x70fa <update_splash+0x86>
    70f8:	82 e0       	ldi	r24, 0x02	; 2
    70fa:	80 93 36 0b 	sts	0x0B36, r24
    70fe:	1d c0       	rjmp	.+58     	; 0x713a <update_splash+0xc6>
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    7100:	30 ff       	sbrs	r19, 0
    7102:	1b c0       	rjmp	.+54     	; 0x713a <update_splash+0xc6>
    7104:	82 30       	cpi	r24, 0x02	; 2
    7106:	70 f4       	brcc	.+28     	; 0x7124 <update_splash+0xb0>
	{
		p1s.select_state = SELECTING;
    7108:	10 92 b9 0a 	sts	0x0AB9, r1
		p2s.select_state = SELECTING;
    710c:	10 92 b3 0a 	sts	0x0AB3, r1
		fade_through();
    7110:	0e 94 24 38 	call	0x7048	; 0x7048 <fade_through>
		load_eeprom(&handles);
    7114:	81 e2       	ldi	r24, 0x21	; 33
    7116:	91 e0       	ldi	r25, 0x01	; 1
    7118:	0e 94 12 38 	call	0x7024	; 0x7024 <load_eeprom>
		game.current_screen = HANDLE_SELECT;
    711c:	82 e0       	ldi	r24, 0x02	; 2
    711e:	80 93 33 0b 	sts	0x0B33, r24
		return;
    7122:	23 c0       	rjmp	.+70     	; 0x716a <update_splash+0xf6>
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    7124:	82 30       	cpi	r24, 0x02	; 2
    7126:	49 f4       	brne	.+18     	; 0x713a <update_splash+0xc6>
	{
		fade_through();
    7128:	0e 94 24 38 	call	0x7048	; 0x7048 <fade_through>
		load_eeprom(&scores);
    712c:	81 e0       	ldi	r24, 0x01	; 1
    712e:	91 e0       	ldi	r25, 0x01	; 1
    7130:	0e 94 12 38 	call	0x7024	; 0x7024 <load_eeprom>
		game.current_screen = TANK_RANK;
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	80 93 33 0b 	sts	0x0B33, r24
	}

	// Render
	switch (game.selection)
    713a:	80 91 36 0b 	lds	r24, 0x0B36
    713e:	81 30       	cpi	r24, 0x01	; 1
    7140:	49 f0       	breq	.+18     	; 0x7154 <update_splash+0xe0>
    7142:	82 30       	cpi	r24, 0x02	; 2
    7144:	59 f0       	breq	.+22     	; 0x715c <update_splash+0xe8>
    7146:	81 11       	cpse	r24, r1
    7148:	10 c0       	rjmp	.+32     	; 0x716a <update_splash+0xf6>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    714a:	01 e0       	ldi	r16, 0x01	; 1
    714c:	21 e0       	ldi	r18, 0x01	; 1
    714e:	48 e6       	ldi	r20, 0x68	; 104
    7150:	60 e3       	ldi	r22, 0x30	; 48
    7152:	09 c0       	rjmp	.+18     	; 0x7166 <update_splash+0xf2>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    7154:	01 e0       	ldi	r16, 0x01	; 1
    7156:	21 e0       	ldi	r18, 0x01	; 1
    7158:	40 e7       	ldi	r20, 0x70	; 112
    715a:	03 c0       	rjmp	.+6      	; 0x7162 <update_splash+0xee>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    715c:	01 e0       	ldi	r16, 0x01	; 1
    715e:	21 e0       	ldi	r18, 0x01	; 1
    7160:	48 e7       	ldi	r20, 0x78	; 120
    7162:	60 e3       	ldi	r22, 0x30	; 48
    7164:	80 e0       	ldi	r24, 0x00	; 0
    7166:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
			break;
	}
}
    716a:	df 91       	pop	r29
    716c:	cf 91       	pop	r28
    716e:	0f 91       	pop	r16
    7170:	08 95       	ret

00007172 <update_tank_rank>:

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    7172:	ef 92       	push	r14
    7174:	ff 92       	push	r15
    7176:	0f 93       	push	r16
    7178:	1f 93       	push	r17
    717a:	cf 93       	push	r28
    717c:	df 93       	push	r29
    717e:	1f 92       	push	r1
    7180:	cd b7       	in	r28, 0x3d	; 61
    7182:	de b7       	in	r29, 0x3e	; 62
	unsigned char y = 7;
	unsigned char rank = 1;

	// Update
	if (p1->pressed & BTN_X)
    7184:	fc 01       	movw	r30, r24
    7186:	80 81       	ld	r24, Z
    7188:	91 81       	ldd	r25, Z+1	; 0x01
    718a:	91 ff       	sbrs	r25, 1
    718c:	05 c0       	rjmp	.+10     	; 0x7198 <update_tank_rank+0x26>
	{
		fade_through();
    718e:	0e 94 24 38 	call	0x7048	; 0x7048 <fade_through>
		game.current_screen = SPLASH;
    7192:	10 92 33 0b 	sts	0x0B33, r1
		return;
    7196:	80 c0       	rjmp	.+256    	; 0x7298 <update_tank_rank+0x126>
	}
	// Render
	clear_sprites();
    7198:	0e 94 2e 38 	call	0x705c	; 0x705c <clear_sprites>
	MapSprite(0, map_tank1_up_0);
    719c:	6b ee       	ldi	r22, 0xEB	; 235
    719e:	79 e1       	ldi	r23, 0x19	; 25
    71a0:	80 e0       	ldi	r24, 0x00	; 0
    71a2:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
	MapSprite(4, map_tank2_up_0);
    71a6:	63 ed       	ldi	r22, 0xD3	; 211
    71a8:	79 e1       	ldi	r23, 0x19	; 25
    71aa:	84 e0       	ldi	r24, 0x04	; 4
    71ac:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    71b0:	02 e0       	ldi	r16, 0x02	; 2
    71b2:	22 e0       	ldi	r18, 0x02	; 2
    71b4:	48 e0       	ldi	r20, 0x08	; 8
    71b6:	68 e3       	ldi	r22, 0x38	; 56
    71b8:	80 e0       	ldi	r24, 0x00	; 0
    71ba:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    71be:	22 e0       	ldi	r18, 0x02	; 2
    71c0:	48 e0       	ldi	r20, 0x08	; 8
    71c2:	60 ea       	ldi	r22, 0xA0	; 160
    71c4:	84 e0       	ldi	r24, 0x04	; 4
    71c6:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
	Print(10, 2, strHighscores);
    71ca:	40 e6       	ldi	r20, 0x60	; 96
    71cc:	59 e1       	ldi	r21, 0x19	; 25
    71ce:	62 e0       	ldi	r22, 0x02	; 2
    71d0:	70 e0       	ldi	r23, 0x00	; 0
    71d2:	8a e0       	ldi	r24, 0x0A	; 10
    71d4:	90 e0       	ldi	r25, 0x00	; 0
    71d6:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
    71da:	06 e0       	ldi	r16, 0x06	; 6
    71dc:	11 e0       	ldi	r17, 0x01	; 1
    71de:	87 e0       	ldi	r24, 0x07	; 7
    71e0:	e8 2e       	mov	r14, r24
    71e2:	f1 2c       	mov	r15, r1
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	unsigned char y = 7;
	unsigned char rank = 1;
    71e4:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (unsigned char i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    71e6:	20 e0       	ldi	r18, 0x00	; 0
    71e8:	43 2f       	mov	r20, r19
    71ea:	b7 01       	movw	r22, r14
    71ec:	82 e0       	ldi	r24, 0x02	; 2
    71ee:	90 e0       	ldi	r25, 0x00	; 0
    71f0:	39 83       	std	Y+1, r19	; 0x01
    71f2:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <PrintByte>
		PrintChar(3, y, '.');
    71f6:	4e e2       	ldi	r20, 0x2E	; 46
    71f8:	b7 01       	movw	r22, r14
    71fa:	83 e0       	ldi	r24, 0x03	; 3
    71fc:	90 e0       	ldi	r25, 0x00	; 0
    71fe:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
    7202:	f8 01       	movw	r30, r16
    7204:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    7206:	80 81       	ld	r24, Z
    7208:	f3 e0       	ldi	r31, 0x03	; 3
    720a:	8f 9f       	mul	r24, r31
    720c:	a0 01       	movw	r20, r0
    720e:	11 24       	eor	r1, r1
    7210:	4d 5d       	subi	r20, 0xDD	; 221
    7212:	5e 4f       	sbci	r21, 0xFE	; 254
    7214:	23 e0       	ldi	r18, 0x03	; 3
    7216:	6e 2d       	mov	r22, r14
    7218:	85 e0       	ldi	r24, 0x05	; 5
    721a:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBPrintStr>
		Print(9, y, strOwns);
    721e:	49 e0       	ldi	r20, 0x09	; 9
    7220:	59 e1       	ldi	r21, 0x19	; 25
    7222:	b7 01       	movw	r22, r14
    7224:	89 e0       	ldi	r24, 0x09	; 9
    7226:	90 e0       	ldi	r25, 0x00	; 0
    7228:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
    722c:	f8 01       	movw	r30, r16
    722e:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    7230:	80 81       	ld	r24, Z
    7232:	93 e0       	ldi	r25, 0x03	; 3
    7234:	89 9f       	mul	r24, r25
    7236:	a0 01       	movw	r20, r0
    7238:	11 24       	eor	r1, r1
    723a:	4d 5d       	subi	r20, 0xDD	; 221
    723c:	5e 4f       	sbci	r21, 0xFE	; 254
    723e:	23 e0       	ldi	r18, 0x03	; 3
    7240:	6e 2d       	mov	r22, r14
    7242:	8e e0       	ldi	r24, 0x0E	; 14
    7244:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBPrintStr>
		Print(18, y, strBy);
    7248:	46 e0       	ldi	r20, 0x06	; 6
    724a:	59 e1       	ldi	r21, 0x19	; 25
    724c:	b7 01       	movw	r22, r14
    724e:	82 e1       	ldi	r24, 0x12	; 18
    7250:	90 e0       	ldi	r25, 0x00	; 0
    7252:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
    7256:	f8 01       	movw	r30, r16
    7258:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    725a:	21 e0       	ldi	r18, 0x01	; 1
    725c:	40 81       	ld	r20, Z
    725e:	b7 01       	movw	r22, r14
    7260:	87 e1       	ldi	r24, 0x17	; 23
    7262:	90 e0       	ldi	r25, 0x00	; 0
    7264:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <PrintByte>
		PrintChar(24, y, '-');
    7268:	4d e2       	ldi	r20, 0x2D	; 45
    726a:	b7 01       	movw	r22, r14
    726c:	88 e1       	ldi	r24, 0x18	; 24
    726e:	90 e0       	ldi	r25, 0x00	; 0
    7270:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    7274:	21 e0       	ldi	r18, 0x01	; 1
    7276:	f8 01       	movw	r30, r16
    7278:	40 81       	ld	r20, Z
    727a:	b7 01       	movw	r22, r14
    727c:	8b e1       	ldi	r24, 0x1B	; 27
    727e:	90 e0       	ldi	r25, 0x00	; 0
    7280:	0e 94 a1 36 	call	0x6d42	; 0x6d42 <PrintByte>
		y += 3;
		rank += 1;
    7284:	39 81       	ldd	r19, Y+1	; 0x01
    7286:	3f 5f       	subi	r19, 0xFF	; 255
    7288:	f3 e0       	ldi	r31, 0x03	; 3
    728a:	ef 0e       	add	r14, r31
    728c:	f1 1c       	adc	r15, r1
    728e:	0c 5f       	subi	r16, 0xFC	; 252
    7290:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite(0, map_tank1_up_0);
	MapSprite(4, map_tank2_up_0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (unsigned char i = 0; i < 20; i += 4)
    7292:	36 30       	cpi	r19, 0x06	; 6
    7294:	09 f0       	breq	.+2      	; 0x7298 <update_tank_rank+0x126>
    7296:	a7 cf       	rjmp	.-178    	; 0x71e6 <update_tank_rank+0x74>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
}
    7298:	0f 90       	pop	r0
    729a:	df 91       	pop	r29
    729c:	cf 91       	pop	r28
    729e:	1f 91       	pop	r17
    72a0:	0f 91       	pop	r16
    72a2:	ff 90       	pop	r15
    72a4:	ef 90       	pop	r14
    72a6:	08 95       	ret

000072a8 <_handle_select_helper>:


unsigned char _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    72a8:	ef 92       	push	r14
    72aa:	ff 92       	push	r15
    72ac:	1f 93       	push	r17
    72ae:	cf 93       	push	r28
    72b0:	df 93       	push	r29
    72b2:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    72b4:	fb 01       	movw	r30, r22
    72b6:	20 81       	ld	r18, Z
    72b8:	31 81       	ldd	r19, Z+1	; 0x01
    72ba:	f9 01       	movw	r30, r18
    72bc:	e0 71       	andi	r30, 0x10	; 16
    72be:	ff 27       	eor	r31, r31
    72c0:	24 ff       	sbrs	r18, 4
    72c2:	09 c0       	rjmp	.+18     	; 0x72d6 <_handle_select_helper+0x2e>
    72c4:	8d 81       	ldd	r24, Y+5	; 0x05
    72c6:	81 11       	cpse	r24, r1
    72c8:	06 c0       	rjmp	.+12     	; 0x72d6 <_handle_select_helper+0x2e>
	{
		ps->handle_id--;
    72ca:	88 81       	ld	r24, Y
    72cc:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    72ce:	87 ff       	sbrs	r24, 7
    72d0:	0f c0       	rjmp	.+30     	; 0x72f0 <_handle_select_helper+0x48>
    72d2:	18 82       	st	Y, r1
    72d4:	8b c0       	rjmp	.+278    	; 0x73ec <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    72d6:	c9 01       	movw	r24, r18
    72d8:	80 72       	andi	r24, 0x20	; 32
    72da:	99 27       	eor	r25, r25
    72dc:	25 ff       	sbrs	r18, 5
    72de:	0a c0       	rjmp	.+20     	; 0x72f4 <_handle_select_helper+0x4c>
    72e0:	6d 81       	ldd	r22, Y+5	; 0x05
    72e2:	61 11       	cpse	r22, r1
    72e4:	07 c0       	rjmp	.+14     	; 0x72f4 <_handle_select_helper+0x4c>
	{
		ps->handle_id++;
    72e6:	88 81       	ld	r24, Y
    72e8:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 9) ps->handle_id = 9;
    72ea:	8a 30       	cpi	r24, 0x0A	; 10
    72ec:	0c f0       	brlt	.+2      	; 0x72f0 <_handle_select_helper+0x48>
    72ee:	89 e0       	ldi	r24, 0x09	; 9
    72f0:	88 83       	st	Y, r24
    72f2:	7c c0       	rjmp	.+248    	; 0x73ec <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    72f4:	b9 01       	movw	r22, r18
    72f6:	66 27       	eor	r22, r22
    72f8:	71 70       	andi	r23, 0x01	; 1
    72fa:	30 ff       	sbrs	r19, 0
    72fc:	11 c0       	rjmp	.+34     	; 0x7320 <_handle_select_helper+0x78>
    72fe:	ad 81       	ldd	r26, Y+5	; 0x05
    7300:	a1 11       	cpse	r26, r1
    7302:	0e c0       	rjmp	.+28     	; 0x7320 <_handle_select_helper+0x78>
	{
		ps->select_state = EDITING;
    7304:	81 e0       	ldi	r24, 0x01	; 1
    7306:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    7308:	69 91       	ld	r22, Y+
    730a:	f3 e0       	ldi	r31, 0x03	; 3
    730c:	6f 02       	muls	r22, r31
    730e:	b0 01       	movw	r22, r0
    7310:	11 24       	eor	r1, r1
    7312:	6d 5d       	subi	r22, 0xDD	; 221
    7314:	7e 4f       	sbci	r23, 0xFE	; 254
    7316:	43 e0       	ldi	r20, 0x03	; 3
    7318:	ce 01       	movw	r24, r28
    731a:	0e 94 d5 37 	call	0x6faa	; 0x6faa <LBCopyChars>
    731e:	66 c0       	rjmp	.+204    	; 0x73ec <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    7320:	27 ff       	sbrs	r18, 7
    7322:	0a c0       	rjmp	.+20     	; 0x7338 <_handle_select_helper+0x90>
    7324:	1d 81       	ldd	r17, Y+5	; 0x05
    7326:	11 30       	cpi	r17, 0x01	; 1
    7328:	39 f4       	brne	.+14     	; 0x7338 <_handle_select_helper+0x90>
	{
		ps->char_index++;
    732a:	8c 81       	ldd	r24, Y+4	; 0x04
    732c:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    732e:	83 30       	cpi	r24, 0x03	; 3
    7330:	64 f0       	brlt	.+24     	; 0x734a <_handle_select_helper+0xa2>
    7332:	82 e0       	ldi	r24, 0x02	; 2
    7334:	8c 83       	std	Y+4, r24	; 0x04
    7336:	61 c0       	rjmp	.+194    	; 0x73fa <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    7338:	26 ff       	sbrs	r18, 6
    733a:	0b c0       	rjmp	.+22     	; 0x7352 <_handle_select_helper+0xaa>
    733c:	1d 81       	ldd	r17, Y+5	; 0x05
    733e:	11 30       	cpi	r17, 0x01	; 1
    7340:	39 f5       	brne	.+78     	; 0x7390 <_handle_select_helper+0xe8>
	{
		ps->char_index--;
    7342:	8c 81       	ldd	r24, Y+4	; 0x04
    7344:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    7346:	87 fd       	sbrc	r24, 7
    7348:	02 c0       	rjmp	.+4      	; 0x734e <_handle_select_helper+0xa6>
		ps->char_index++;
		if (ps->char_index > 2) ps->char_index = 2;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    734a:	8c 83       	std	Y+4, r24	; 0x04
    734c:	4f c0       	rjmp	.+158    	; 0x73ec <_handle_select_helper+0x144>
		if (ps->char_index < 0) ps->char_index = 0;
    734e:	1c 82       	std	Y+4, r1	; 0x04
    7350:	54 c0       	rjmp	.+168    	; 0x73fa <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    7352:	ef 2b       	or	r30, r31
    7354:	61 f0       	breq	.+24     	; 0x736e <_handle_select_helper+0xc6>
    7356:	1d 81       	ldd	r17, Y+5	; 0x05
    7358:	11 30       	cpi	r17, 0x01	; 1
    735a:	e9 f5       	brne	.+122    	; 0x73d6 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]--;
    735c:	8c 81       	ldd	r24, Y+4	; 0x04
    735e:	c8 0f       	add	r28, r24
    7360:	d1 1d       	adc	r29, r1
    7362:	99 81       	ldd	r25, Y+1	; 0x01
    7364:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
    7366:	91 34       	cpi	r25, 0x41	; 65
    7368:	70 f4       	brcc	.+28     	; 0x7386 <_handle_select_helper+0xde>
    736a:	81 e4       	ldi	r24, 0x41	; 65
    736c:	0f c0       	rjmp	.+30     	; 0x738c <_handle_select_helper+0xe4>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    736e:	89 2b       	or	r24, r25
    7370:	89 f0       	breq	.+34     	; 0x7394 <_handle_select_helper+0xec>
    7372:	1d 81       	ldd	r17, Y+5	; 0x05
    7374:	11 30       	cpi	r17, 0x01	; 1
    7376:	79 f5       	brne	.+94     	; 0x73d6 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]++;
    7378:	8c 81       	ldd	r24, Y+4	; 0x04
    737a:	c8 0f       	add	r28, r24
    737c:	d1 1d       	adc	r29, r1
    737e:	99 81       	ldd	r25, Y+1	; 0x01
    7380:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
    7382:	9b 35       	cpi	r25, 0x5B	; 91
    7384:	10 f4       	brcc	.+4      	; 0x738a <_handle_select_helper+0xe2>
		ps->handle[(unsigned char) ps->char_index]--;
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(unsigned char) ps->char_index]++;
    7386:	99 83       	std	Y+1, r25	; 0x01
    7388:	31 c0       	rjmp	.+98     	; 0x73ec <_handle_select_helper+0x144>
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
    738a:	8a e5       	ldi	r24, 0x5A	; 90
    738c:	89 83       	std	Y+1, r24	; 0x01
    738e:	35 c0       	rjmp	.+106    	; 0x73fa <_handle_select_helper+0x152>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(unsigned char) ps->char_index]--;
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    7390:	89 2b       	or	r24, r25
    7392:	09 f5       	brne	.+66     	; 0x73d6 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]++;
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    7394:	67 2b       	or	r22, r23
    7396:	f9 f0       	breq	.+62     	; 0x73d6 <_handle_select_helper+0x12e>
    7398:	1d 81       	ldd	r17, Y+5	; 0x05
    739a:	11 30       	cpi	r17, 0x01	; 1
    739c:	e1 f4       	brne	.+56     	; 0x73d6 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    739e:	fe 01       	movw	r30, r28
    73a0:	21 91       	ld	r18, Z+
    73a2:	7f 01       	movw	r14, r30
    73a4:	fa 01       	movw	r30, r20
    73a6:	21 93       	st	Z+, r18
    73a8:	cf 01       	movw	r24, r30
		LBCopyChars(player->handle, ps->handle, 3);
    73aa:	43 e0       	ldi	r20, 0x03	; 3
    73ac:	b7 01       	movw	r22, r14
    73ae:	0e 94 d5 37 	call	0x6faa	; 0x6faa <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    73b2:	88 81       	ld	r24, Y
    73b4:	f3 e0       	ldi	r31, 0x03	; 3
    73b6:	8f 02       	muls	r24, r31
    73b8:	c0 01       	movw	r24, r0
    73ba:	11 24       	eor	r1, r1
    73bc:	43 e0       	ldi	r20, 0x03	; 3
    73be:	b7 01       	movw	r22, r14
    73c0:	8d 5d       	subi	r24, 0xDD	; 221
    73c2:	9e 4f       	sbci	r25, 0xFE	; 254
    73c4:	0e 94 d5 37 	call	0x6faa	; 0x6faa <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    73c8:	81 e2       	ldi	r24, 0x21	; 33
    73ca:	91 e0       	ldi	r25, 0x01	; 1
    73cc:	0e 94 4c 2a 	call	0x5498	; 0x5498 <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    73d0:	82 e0       	ldi	r24, 0x02	; 2
    73d2:	8d 83       	std	Y+5, r24	; 0x05
    73d4:	12 c0       	rjmp	.+36     	; 0x73fa <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    73d6:	31 ff       	sbrs	r19, 1
    73d8:	09 c0       	rjmp	.+18     	; 0x73ec <_handle_select_helper+0x144>
    73da:	1d 81       	ldd	r17, Y+5	; 0x05
    73dc:	11 30       	cpi	r17, 0x01	; 1
    73de:	11 f4       	brne	.+4      	; 0x73e4 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    73e0:	1d 82       	std	Y+5, r1	; 0x05
    73e2:	0b c0       	rjmp	.+22     	; 0x73fa <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    73e4:	12 30       	cpi	r17, 0x02	; 2
    73e6:	21 f4       	brne	.+8      	; 0x73f0 <_handle_select_helper+0x148>
		{
			ps->select_state = EDITING;
    73e8:	81 e0       	ldi	r24, 0x01	; 1
    73ea:	8d 83       	std	Y+5, r24	; 0x05
	{
		fade_through();
		game.current_screen = SPLASH;
		return 0;
	}
	return 1;
    73ec:	11 e0       	ldi	r17, 0x01	; 1
	{
		ps->select_state = SELECTING;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
		{
			ps->select_state = EDITING;
    73ee:	05 c0       	rjmp	.+10     	; 0x73fa <_handle_select_helper+0x152>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    73f0:	0e 94 24 38 	call	0x7048	; 0x7048 <fade_through>
		game.current_screen = SPLASH;
    73f4:	10 92 33 0b 	sts	0x0B33, r1
		return 0;
    73f8:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}
    73fa:	81 2f       	mov	r24, r17
    73fc:	df 91       	pop	r29
    73fe:	cf 91       	pop	r28
    7400:	1f 91       	pop	r17
    7402:	ff 90       	pop	r15
    7404:	ef 90       	pop	r14
    7406:	08 95       	ret

00007408 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, unsigned char x_offset, unsigned char idx)
{
    7408:	af 92       	push	r10
    740a:	bf 92       	push	r11
    740c:	cf 92       	push	r12
    740e:	df 92       	push	r13
    7410:	ef 92       	push	r14
    7412:	ff 92       	push	r15
    7414:	0f 93       	push	r16
    7416:	1f 93       	push	r17
    7418:	cf 93       	push	r28
    741a:	df 93       	push	r29
    741c:	00 d0       	rcall	.+0      	; 0x741e <_handle_select_render_helper+0x16>
    741e:	1f 92       	push	r1
    7420:	cd b7       	in	r28, 0x3d	; 61
    7422:	de b7       	in	r29, 0x3e	; 62
    7424:	7c 01       	movw	r14, r24
    7426:	14 2f       	mov	r17, r20
    7428:	b2 2e       	mov	r11, r18
	unsigned char tmp[3] = {' ', ' ', ' '};
    742a:	80 e2       	ldi	r24, 0x20	; 32
    742c:	89 83       	std	Y+1, r24	; 0x01
    742e:	8a 83       	std	Y+2, r24	; 0x02
    7430:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    7432:	f7 01       	movw	r30, r14
    7434:	85 81       	ldd	r24, Z+5	; 0x05
    7436:	81 11       	cpse	r24, r1
    7438:	15 c0       	rjmp	.+42     	; 0x7464 <_handle_select_render_helper+0x5c>
	{
		MapSprite(idx, map_ball);
    743a:	6c ea       	ldi	r22, 0xAC	; 172
    743c:	79 e1       	ldi	r23, 0x19	; 25
    743e:	82 2f       	mov	r24, r18
    7440:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    7444:	f7 01       	movw	r30, r14
    7446:	40 81       	ld	r20, Z
    7448:	44 0f       	add	r20, r20
    744a:	44 0f       	add	r20, r20
    744c:	44 0f       	add	r20, r20
    744e:	40 5c       	subi	r20, 0xC0	; 192
    7450:	01 e0       	ldi	r16, 0x01	; 1
    7452:	21 e0       	ldi	r18, 0x01	; 1
    7454:	61 2f       	mov	r22, r17
    7456:	66 0f       	add	r22, r22
    7458:	66 0f       	add	r22, r22
    745a:	66 0f       	add	r22, r22
    745c:	8b 2d       	mov	r24, r11
    745e:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
    7462:	60 c0       	rjmp	.+192    	; 0x7524 <_handle_select_render_helper+0x11c>
	}
	else if (ps->select_state == EDITING)
    7464:	81 30       	cpi	r24, 0x01	; 1
    7466:	09 f0       	breq	.+2      	; 0x746a <_handle_select_render_helper+0x62>
    7468:	42 c0       	rjmp	.+132    	; 0x74ee <_handle_select_render_helper+0xe6>
	{
		MapSprite(idx, map_ball);
    746a:	6c ea       	ldi	r22, 0xAC	; 172
    746c:	79 e1       	ldi	r23, 0x19	; 25
    746e:	82 2f       	mov	r24, r18
    7470:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
		MapSprite(idx+1, map_ball);
    7474:	aa 24       	eor	r10, r10
    7476:	a3 94       	inc	r10
    7478:	ab 0c       	add	r10, r11
    747a:	6c ea       	ldi	r22, 0xAC	; 172
    747c:	79 e1       	ldi	r23, 0x19	; 25
    747e:	8a 2d       	mov	r24, r10
    7480:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    7484:	c1 2e       	mov	r12, r17
    7486:	d1 2c       	mov	r13, r1
    7488:	f5 e0       	ldi	r31, 0x05	; 5
    748a:	cf 0e       	add	r12, r31
    748c:	d1 1c       	adc	r13, r1
    748e:	f7 01       	movw	r30, r14
    7490:	40 81       	ld	r20, Z
    7492:	44 0f       	add	r20, r20
    7494:	44 0f       	add	r20, r20
    7496:	44 0f       	add	r20, r20
    7498:	48 5c       	subi	r20, 0xC8	; 200
    749a:	84 81       	ldd	r24, Z+4	; 0x04
    749c:	b6 01       	movw	r22, r12
    749e:	68 0f       	add	r22, r24
    74a0:	71 1d       	adc	r23, r1
    74a2:	87 fd       	sbrc	r24, 7
    74a4:	7a 95       	dec	r23
    74a6:	66 0f       	add	r22, r22
    74a8:	66 0f       	add	r22, r22
    74aa:	66 0f       	add	r22, r22
    74ac:	01 e0       	ldi	r16, 0x01	; 1
    74ae:	21 e0       	ldi	r18, 0x01	; 1
    74b0:	8b 2d       	mov	r24, r11
    74b2:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    74b6:	f7 01       	movw	r30, r14
    74b8:	40 81       	ld	r20, Z
    74ba:	44 0f       	add	r20, r20
    74bc:	44 0f       	add	r20, r20
    74be:	44 0f       	add	r20, r20
    74c0:	48 5b       	subi	r20, 0xB8	; 184
    74c2:	84 81       	ldd	r24, Z+4	; 0x04
    74c4:	c8 0e       	add	r12, r24
    74c6:	d1 1c       	adc	r13, r1
    74c8:	87 fd       	sbrc	r24, 7
    74ca:	da 94       	dec	r13
    74cc:	6c 2d       	mov	r22, r12
    74ce:	66 0f       	add	r22, r22
    74d0:	66 0f       	add	r22, r22
    74d2:	66 0f       	add	r22, r22
    74d4:	21 e0       	ldi	r18, 0x01	; 1
    74d6:	8a 2d       	mov	r24, r10
    74d8:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    74dc:	43 e0       	ldi	r20, 0x03	; 3
    74de:	b7 01       	movw	r22, r14
    74e0:	6f 5f       	subi	r22, 0xFF	; 255
    74e2:	7f 4f       	sbci	r23, 0xFF	; 255
    74e4:	ce 01       	movw	r24, r28
    74e6:	01 96       	adiw	r24, 0x01	; 1
    74e8:	0e 94 d5 37 	call	0x6faa	; 0x6faa <LBCopyChars>
    74ec:	1b c0       	rjmp	.+54     	; 0x7524 <_handle_select_render_helper+0x11c>
	}
	else if (ps->select_state == CONFIRMED)
    74ee:	82 30       	cpi	r24, 0x02	; 2
    74f0:	c9 f4       	brne	.+50     	; 0x7524 <_handle_select_render_helper+0x11c>
	{
		PrintChar(x_offset+6, 5, '(');
    74f2:	c4 2e       	mov	r12, r20
    74f4:	d1 2c       	mov	r13, r1
    74f6:	48 e2       	ldi	r20, 0x28	; 40
    74f8:	65 e0       	ldi	r22, 0x05	; 5
    74fa:	70 e0       	ldi	r23, 0x00	; 0
    74fc:	c6 01       	movw	r24, r12
    74fe:	06 96       	adiw	r24, 0x06	; 6
    7500:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    7504:	23 e0       	ldi	r18, 0x03	; 3
    7506:	a7 01       	movw	r20, r14
    7508:	4f 5f       	subi	r20, 0xFF	; 255
    750a:	5f 4f       	sbci	r21, 0xFF	; 255
    750c:	65 e0       	ldi	r22, 0x05	; 5
    750e:	87 e0       	ldi	r24, 0x07	; 7
    7510:	81 0f       	add	r24, r17
    7512:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    7516:	49 e2       	ldi	r20, 0x29	; 41
    7518:	65 e0       	ldi	r22, 0x05	; 5
    751a:	70 e0       	ldi	r23, 0x00	; 0
    751c:	c6 01       	movw	r24, r12
    751e:	0a 96       	adiw	r24, 0x0a	; 10
    7520:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    7524:	f7 01       	movw	r30, r14
    7526:	60 81       	ld	r22, Z
    7528:	68 5f       	subi	r22, 0xF8	; 248
    752a:	23 e0       	ldi	r18, 0x03	; 3
    752c:	ae 01       	movw	r20, r28
    752e:	4f 5f       	subi	r20, 0xFF	; 255
    7530:	5f 4f       	sbci	r21, 0xFF	; 255
    7532:	85 e0       	ldi	r24, 0x05	; 5
    7534:	81 0f       	add	r24, r17
    7536:	0e 94 e1 37 	call	0x6fc2	; 0x6fc2 <LBPrintStr>
}
    753a:	0f 90       	pop	r0
    753c:	0f 90       	pop	r0
    753e:	0f 90       	pop	r0
    7540:	df 91       	pop	r29
    7542:	cf 91       	pop	r28
    7544:	1f 91       	pop	r17
    7546:	0f 91       	pop	r16
    7548:	ff 90       	pop	r15
    754a:	ef 90       	pop	r14
    754c:	df 90       	pop	r13
    754e:	cf 90       	pop	r12
    7550:	bf 90       	pop	r11
    7552:	af 90       	pop	r10
    7554:	08 95       	ret

00007556 <update_handle_select>:

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    7556:	8f 92       	push	r8
    7558:	9f 92       	push	r9
    755a:	af 92       	push	r10
    755c:	bf 92       	push	r11
    755e:	cf 92       	push	r12
    7560:	df 92       	push	r13
    7562:	ef 92       	push	r14
    7564:	ff 92       	push	r15
    7566:	0f 93       	push	r16
    7568:	1f 93       	push	r17
    756a:	cf 93       	push	r28
    756c:	df 93       	push	r29
    756e:	7c 01       	movw	r14, r24
    7570:	eb 01       	movw	r28, r22
	unsigned char do_render = 0;
	unsigned char start_game = 0;

	// Update
	do_render = _handle_select_helper(&p1s, p1, &player1);
    7572:	47 e3       	ldi	r20, 0x37	; 55
    7574:	5b e0       	ldi	r21, 0x0B	; 11
    7576:	bc 01       	movw	r22, r24
    7578:	84 eb       	ldi	r24, 0xB4	; 180
    757a:	9a e0       	ldi	r25, 0x0A	; 10
    757c:	0e 94 54 39 	call	0x72a8	; 0x72a8 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if ((game.selection == PVP) && (do_render))
    7580:	90 91 36 0b 	lds	r25, 0x0B36
    7584:	91 30       	cpi	r25, 0x01	; 1
    7586:	51 f4       	brne	.+20     	; 0x759c <update_handle_select+0x46>
    7588:	88 23       	and	r24, r24
    758a:	09 f4       	brne	.+2      	; 0x758e <update_handle_select+0x38>
    758c:	9d c0       	rjmp	.+314    	; 0x76c8 <update_handle_select+0x172>
	{
		do_render = _handle_select_helper(&p2s, p2, &player2);
    758e:	4f e5       	ldi	r20, 0x5F	; 95
    7590:	5e e0       	ldi	r21, 0x0E	; 14
    7592:	be 01       	movw	r22, r28
    7594:	8e ea       	ldi	r24, 0xAE	; 174
    7596:	9a e0       	ldi	r25, 0x0A	; 10
    7598:	0e 94 54 39 	call	0x72a8	; 0x72a8 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}

	// Render
	if (do_render)
    759c:	88 23       	and	r24, r24
    759e:	09 f4       	brne	.+2      	; 0x75a2 <update_handle_select+0x4c>
    75a0:	93 c0       	rjmp	.+294    	; 0x76c8 <update_handle_select+0x172>
	{
		clear_sprites();
    75a2:	0e 94 2e 38 	call	0x705c	; 0x705c <clear_sprites>
		MapSprite(0, map_tank1_up_0);
    75a6:	6b ee       	ldi	r22, 0xEB	; 235
    75a8:	79 e1       	ldi	r23, 0x19	; 25
    75aa:	80 e0       	ldi	r24, 0x00	; 0
    75ac:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>
		MapSprite(4, map_tank2_up_0);
    75b0:	63 ed       	ldi	r22, 0xD3	; 211
    75b2:	79 e1       	ldi	r23, 0x19	; 25
    75b4:	84 e0       	ldi	r24, 0x04	; 4
    75b6:	0e 94 e5 35 	call	0x6bca	; 0x6bca <MapSprite>

		// Position sprites
		MoveSprite(0, 3*8, 4*8, 2, 2);
    75ba:	02 e0       	ldi	r16, 0x02	; 2
    75bc:	22 e0       	ldi	r18, 0x02	; 2
    75be:	40 e2       	ldi	r20, 0x20	; 32
    75c0:	68 e1       	ldi	r22, 0x18	; 24
    75c2:	80 e0       	ldi	r24, 0x00	; 0
    75c4:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
		MoveSprite(4, 20*8, 4*8, 2, 2);
    75c8:	22 e0       	ldi	r18, 0x02	; 2
    75ca:	40 e2       	ldi	r20, 0x20	; 32
    75cc:	60 ea       	ldi	r22, 0xA0	; 160
    75ce:	84 e0       	ldi	r24, 0x04	; 4
    75d0:	0e 94 25 36 	call	0x6c4a	; 0x6c4a <MoveSprite>
		_handle_select_render_helper(&p1s, p1, 2, 8);
    75d4:	28 e0       	ldi	r18, 0x08	; 8
    75d6:	42 e0       	ldi	r20, 0x02	; 2
    75d8:	b7 01       	movw	r22, r14
    75da:	84 eb       	ldi	r24, 0xB4	; 180
    75dc:	9a e0       	ldi	r25, 0x0A	; 10
    75de:	0e 94 04 3a 	call	0x7408	; 0x7408 <_handle_select_render_helper>
		if (game.selection == PVP)
    75e2:	80 91 36 0b 	lds	r24, 0x0B36
    75e6:	81 30       	cpi	r24, 0x01	; 1
    75e8:	39 f4       	brne	.+14     	; 0x75f8 <update_handle_select+0xa2>
		{
			_handle_select_render_helper(&p2s, p2, 19, 10);
    75ea:	2a e0       	ldi	r18, 0x0A	; 10
    75ec:	43 e1       	ldi	r20, 0x13	; 19
    75ee:	be 01       	movw	r22, r28
    75f0:	8e ea       	ldi	r24, 0xAE	; 174
    75f2:	9a e0       	ldi	r25, 0x0A	; 10
    75f4:	0e 94 04 3a 	call	0x7408	; 0x7408 <_handle_select_render_helper>
		}

		// Print
		Print(9, 1, strHandlesTitle);
    75f8:	44 e5       	ldi	r20, 0x54	; 84
    75fa:	59 e1       	ldi	r21, 0x19	; 25
    75fc:	61 e0       	ldi	r22, 0x01	; 1
    75fe:	70 e0       	ldi	r23, 0x00	; 0
    7600:	89 e0       	ldi	r24, 0x09	; 9
    7602:	90 e0       	ldi	r25, 0x00	; 0
    7604:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
		Print(6, 5, strPlayer1);
    7608:	45 e4       	ldi	r20, 0x45	; 69
    760a:	59 e1       	ldi	r21, 0x19	; 25
    760c:	65 e0       	ldi	r22, 0x05	; 5
    760e:	70 e0       	ldi	r23, 0x00	; 0
    7610:	86 e0       	ldi	r24, 0x06	; 6
    7612:	90 e0       	ldi	r25, 0x00	; 0
    7614:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
		Print(23, 5, strPlayer2);
    7618:	42 e4       	ldi	r20, 0x42	; 66
    761a:	59 e1       	ldi	r21, 0x19	; 25
    761c:	65 e0       	ldi	r22, 0x05	; 5
    761e:	70 e0       	ldi	r23, 0x00	; 0
    7620:	87 e1       	ldi	r24, 0x17	; 23
    7622:	90 e0       	ldi	r25, 0x00	; 0
    7624:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
    7628:	83 e2       	ldi	r24, 0x23	; 35
    762a:	e8 2e       	mov	r14, r24
    762c:	81 e0       	ldi	r24, 0x01	; 1
    762e:	f8 2e       	mov	r15, r24
		//Print(1, 5, strUnderline);
		//Print(18, 5, strUnderline);
		for (int i = 0; i < 30; i += 1)
    7630:	c0 e0       	ldi	r28, 0x00	; 0
    7632:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    7634:	93 e0       	ldi	r25, 0x03	; 3
    7636:	a9 2e       	mov	r10, r25
    7638:	b1 2c       	mov	r11, r1
    763a:	67 01       	movw	r12, r14
    763c:	ce 01       	movw	r24, r28
    763e:	b5 01       	movw	r22, r10
    7640:	0e 94 cf 3b 	call	0x779e	; 0x779e <__divmodhi4>
    7644:	4c 01       	movw	r8, r24
    7646:	8b 01       	movw	r16, r22
    7648:	08 5f       	subi	r16, 0xF8	; 248
    764a:	1f 4f       	sbci	r17, 0xFF	; 255
    764c:	f7 01       	movw	r30, r14
    764e:	41 91       	ld	r20, Z+
    7650:	7f 01       	movw	r14, r30
    7652:	b8 01       	movw	r22, r16
    7654:	03 96       	adiw	r24, 0x03	; 3
    7656:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
			PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    765a:	f6 01       	movw	r30, r12
    765c:	40 81       	ld	r20, Z
    765e:	b8 01       	movw	r22, r16
    7660:	c4 01       	movw	r24, r8
    7662:	44 96       	adiw	r24, 0x14	; 20
    7664:	0e 94 ef 36 	call	0x6dde	; 0x6dde <PrintChar>
		Print(9, 1, strHandlesTitle);
		Print(6, 5, strPlayer1);
		Print(23, 5, strPlayer2);
		//Print(1, 5, strUnderline);
		//Print(18, 5, strUnderline);
		for (int i = 0; i < 30; i += 1)
    7668:	21 96       	adiw	r28, 0x01	; 1
    766a:	ce 31       	cpi	r28, 0x1E	; 30
    766c:	d1 05       	cpc	r29, r1
    766e:	29 f7       	brne	.-54     	; 0x763a <update_handle_select+0xe4>
			PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
			PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
		}

		// Instructions
		Print(8, 21, strSelectHandle);
    7670:	46 e3       	ldi	r20, 0x36	; 54
    7672:	59 e1       	ldi	r21, 0x19	; 25
    7674:	65 e1       	ldi	r22, 0x15	; 21
    7676:	70 e0       	ldi	r23, 0x00	; 0
    7678:	88 e0       	ldi	r24, 0x08	; 8
    767a:	90 e0       	ldi	r25, 0x00	; 0
    767c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
		Print(8, 22, strConfirmHandle);
    7680:	4a e2       	ldi	r20, 0x2A	; 42
    7682:	59 e1       	ldi	r21, 0x19	; 25
    7684:	66 e1       	ldi	r22, 0x16	; 22
    7686:	70 e0       	ldi	r23, 0x00	; 0
    7688:	88 e0       	ldi	r24, 0x08	; 8
    768a:	90 e0       	ldi	r25, 0x00	; 0
    768c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
		Print(8, 23, strCancelHandle);
    7690:	4e e1       	ldi	r20, 0x1E	; 30
    7692:	59 e1       	ldi	r21, 0x19	; 25
    7694:	67 e1       	ldi	r22, 0x17	; 23
    7696:	70 e0       	ldi	r23, 0x00	; 0
    7698:	88 e0       	ldi	r24, 0x08	; 8
    769a:	90 e0       	ldi	r25, 0x00	; 0
    769c:	0e 94 d4 36 	call	0x6da8	; 0x6da8 <Print>
		Print(8, 24, strChangeHandle);
    76a0:	4e e0       	ldi	r20, 0x0E	; 14
    76a2:	59 e1       	ldi	r21, 0x19	; 25
    76a4:	68 e1       	ldi	r22, 0x18	; 24
    76a6:	70 e0       	ldi	r23, 0x00	; 0
    76a8:	88 e0       	ldi	r24, 0x08	; 8
    76aa:	90 e0       	ldi	r25, 0x00	; 0
	// Start Game
	if (start_game)
	{

	}
}
    76ac:	df 91       	pop	r29
    76ae:	cf 91       	pop	r28
    76b0:	1f 91       	pop	r17
    76b2:	0f 91       	pop	r16
    76b4:	ff 90       	pop	r15
    76b6:	ef 90       	pop	r14
    76b8:	df 90       	pop	r13
    76ba:	cf 90       	pop	r12
    76bc:	bf 90       	pop	r11
    76be:	af 90       	pop	r10
    76c0:	9f 90       	pop	r9
    76c2:	8f 90       	pop	r8

		// Instructions
		Print(8, 21, strSelectHandle);
		Print(8, 22, strConfirmHandle);
		Print(8, 23, strCancelHandle);
		Print(8, 24, strChangeHandle);
    76c4:	0c 94 d4 36 	jmp	0x6da8	; 0x6da8 <Print>
	// Start Game
	if (start_game)
	{

	}
}
    76c8:	df 91       	pop	r29
    76ca:	cf 91       	pop	r28
    76cc:	1f 91       	pop	r17
    76ce:	0f 91       	pop	r16
    76d0:	ff 90       	pop	r15
    76d2:	ef 90       	pop	r14
    76d4:	df 90       	pop	r13
    76d6:	cf 90       	pop	r12
    76d8:	bf 90       	pop	r11
    76da:	af 90       	pop	r10
    76dc:	9f 90       	pop	r9
    76de:	8f 90       	pop	r8
    76e0:	08 95       	ret

000076e2 <main>:
}

int main()
{
	// Initialize
	SetTileTable(tiles_data);
    76e2:	8e e6       	ldi	r24, 0x6E	; 110
    76e4:	96 e2       	ldi	r25, 0x26	; 38
    76e6:	0e 94 94 29 	call	0x5328	; 0x5328 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    76ea:	8e e6       	ldi	r24, 0x6E	; 110
    76ec:	9a e1       	ldi	r25, 0x1A	; 26
    76ee:	0e 94 70 29 	call	0x52e0	; 0x52e0 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    76f2:	8f e2       	ldi	r24, 0x2F	; 47
    76f4:	0e 94 91 29 	call	0x5322	; 0x5322 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    76f8:	60 e0       	ldi	r22, 0x00	; 0
    76fa:	83 e0       	ldi	r24, 0x03	; 3
    76fc:	0e 94 52 37 	call	0x6ea4	; 0x6ea4 <FadeIn>
	EepromWriteBlock(block);
}

void resetGameState(Game* s)
{
	s->current_screen = SPLASH;
    7700:	10 92 33 0b 	sts	0x0B33, r1
	s->current_level = 0;
    7704:	10 92 34 0b 	sts	0x0B34, r1
	s->level_count = LEVEL_COUNT;
    7708:	81 e0       	ldi	r24, 0x01	; 1
    770a:	80 93 35 0b 	sts	0x0B35, r24
	s->selection = PVCPU;
    770e:	10 92 36 0b 	sts	0x0B36, r1
	FadeIn(FRAMES_PER_FADE, false);
	resetGameState(&game);

	while (1)
	{
		WaitVsync(1);
    7712:	81 e0       	ldi	r24, 0x01	; 1
    7714:	90 e0       	ldi	r25, 0x00	; 0
    7716:	0e 94 f2 36 	call	0x6de4	; 0x6de4 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    771a:	6d e2       	ldi	r22, 0x2D	; 45
    771c:	7b e0       	ldi	r23, 0x0B	; 11
    771e:	8a e6       	ldi	r24, 0x6A	; 106
    7720:	9b e0       	ldi	r25, 0x0B	; 11
    7722:	0e 94 93 37 	call	0x6f26	; 0x6f26 <LBGetJoyPadState>
		switch (game.current_screen)
    7726:	80 91 33 0b 	lds	r24, 0x0B33
    772a:	81 30       	cpi	r24, 0x01	; 1
    772c:	89 f0       	breq	.+34     	; 0x7750 <main+0x6e>
    772e:	48 f0       	brcs	.+18     	; 0x7742 <main+0x60>
    7730:	82 30       	cpi	r24, 0x02	; 2
    7732:	79 f7       	brne	.-34     	; 0x7712 <main+0x30>
				break;
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
				break;
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    7734:	6d e2       	ldi	r22, 0x2D	; 45
    7736:	7b e0       	ldi	r23, 0x0B	; 11
    7738:	8a e6       	ldi	r24, 0x6A	; 106
    773a:	9b e0       	ldi	r25, 0x0B	; 11
    773c:	0e 94 ab 3a 	call	0x7556	; 0x7556 <update_handle_select>
				break;
    7740:	e8 cf       	rjmp	.-48     	; 0x7712 <main+0x30>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    7742:	6d e2       	ldi	r22, 0x2D	; 45
    7744:	7b e0       	ldi	r23, 0x0B	; 11
    7746:	8a e6       	ldi	r24, 0x6A	; 106
    7748:	9b e0       	ldi	r25, 0x0B	; 11
    774a:	0e 94 3a 38 	call	0x7074	; 0x7074 <update_splash>
				break;
    774e:	e1 cf       	rjmp	.-62     	; 0x7712 <main+0x30>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    7750:	6d e2       	ldi	r22, 0x2D	; 45
    7752:	7b e0       	ldi	r23, 0x0B	; 11
    7754:	8a e6       	ldi	r24, 0x6A	; 106
    7756:	9b e0       	ldi	r25, 0x0B	; 11
    7758:	0e 94 b9 38 	call	0x7172	; 0x7172 <update_tank_rank>
				break;
    775c:	da cf       	rjmp	.-76     	; 0x7712 <main+0x30>

0000775e <__udivmodqi4>:
    775e:	99 1b       	sub	r25, r25
    7760:	79 e0       	ldi	r23, 0x09	; 9
    7762:	04 c0       	rjmp	.+8      	; 0x776c <__udivmodqi4_ep>

00007764 <__udivmodqi4_loop>:
    7764:	99 1f       	adc	r25, r25
    7766:	96 17       	cp	r25, r22
    7768:	08 f0       	brcs	.+2      	; 0x776c <__udivmodqi4_ep>
    776a:	96 1b       	sub	r25, r22

0000776c <__udivmodqi4_ep>:
    776c:	88 1f       	adc	r24, r24
    776e:	7a 95       	dec	r23
    7770:	c9 f7       	brne	.-14     	; 0x7764 <__udivmodqi4_loop>
    7772:	80 95       	com	r24
    7774:	08 95       	ret

00007776 <__udivmodhi4>:
    7776:	aa 1b       	sub	r26, r26
    7778:	bb 1b       	sub	r27, r27
    777a:	51 e1       	ldi	r21, 0x11	; 17
    777c:	07 c0       	rjmp	.+14     	; 0x778c <__udivmodhi4_ep>

0000777e <__udivmodhi4_loop>:
    777e:	aa 1f       	adc	r26, r26
    7780:	bb 1f       	adc	r27, r27
    7782:	a6 17       	cp	r26, r22
    7784:	b7 07       	cpc	r27, r23
    7786:	10 f0       	brcs	.+4      	; 0x778c <__udivmodhi4_ep>
    7788:	a6 1b       	sub	r26, r22
    778a:	b7 0b       	sbc	r27, r23

0000778c <__udivmodhi4_ep>:
    778c:	88 1f       	adc	r24, r24
    778e:	99 1f       	adc	r25, r25
    7790:	5a 95       	dec	r21
    7792:	a9 f7       	brne	.-22     	; 0x777e <__udivmodhi4_loop>
    7794:	80 95       	com	r24
    7796:	90 95       	com	r25
    7798:	bc 01       	movw	r22, r24
    779a:	cd 01       	movw	r24, r26
    779c:	08 95       	ret

0000779e <__divmodhi4>:
    779e:	97 fb       	bst	r25, 7
    77a0:	07 2e       	mov	r0, r23
    77a2:	16 f4       	brtc	.+4      	; 0x77a8 <__divmodhi4+0xa>
    77a4:	00 94       	com	r0
    77a6:	07 d0       	rcall	.+14     	; 0x77b6 <__divmodhi4_neg1>
    77a8:	77 fd       	sbrc	r23, 7
    77aa:	09 d0       	rcall	.+18     	; 0x77be <__divmodhi4_neg2>
    77ac:	0e 94 bb 3b 	call	0x7776	; 0x7776 <__udivmodhi4>
    77b0:	07 fc       	sbrc	r0, 7
    77b2:	05 d0       	rcall	.+10     	; 0x77be <__divmodhi4_neg2>
    77b4:	3e f4       	brtc	.+14     	; 0x77c4 <__divmodhi4_exit>

000077b6 <__divmodhi4_neg1>:
    77b6:	90 95       	com	r25
    77b8:	81 95       	neg	r24
    77ba:	9f 4f       	sbci	r25, 0xFF	; 255
    77bc:	08 95       	ret

000077be <__divmodhi4_neg2>:
    77be:	70 95       	com	r23
    77c0:	61 95       	neg	r22
    77c2:	7f 4f       	sbci	r23, 0xFF	; 255

000077c4 <__divmodhi4_exit>:
    77c4:	08 95       	ret

000077c6 <_exit>:
    77c6:	f8 94       	cli

000077c8 <__stop_program>:
    77c8:	ff cf       	rjmp	.-2      	; 0x77c8 <__stop_program>
