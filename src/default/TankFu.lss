
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000ec7c  0000ed7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000ec7c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fa6  00800104  00800104  0000ed84  2**5
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000ed80  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000007a8  00000000  00000000  0000ed98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000a601  00000000  00000000  0000f540  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000016e4  00000000  00000000  00019b41  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002664  00000000  00000000  0001b225  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001684  00000000  00000000  0001d88c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001ef1  00000000  00000000  0001ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000093ab  00000000  00000000  00020e01  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000007e8  00000000  00000000  0002a1b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 3f 	jmp	0x7ea6	; 0x7ea6 <__ctors_end>
       4:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
       8:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
       c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      10:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      14:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      18:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      1c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      20:	0c 94 5b 44 	jmp	0x88b6	; 0x88b6 <__vector_8>
      24:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      28:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      2c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      30:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      34:	0c 94 2a 42 	jmp	0x8454	; 0x8454 <__vector_13>
      38:	0c 94 69 42 	jmp	0x84d2	; 0x84d2 <__vector_14>
      3c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      40:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      44:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      48:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      4c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      50:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      54:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      58:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      5c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      60:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      64:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      68:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      6c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	d6 45 d9 45 35 46 39 46 40 46 e1 45 e6 45 eb 45     .E.E5F9F@F.E.E.E
      ce:	48 46 ee 45 f1 45 f4 45 2f 46 32 46 58 46           HF.E.E.E/F2FXF

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <strCredits>:
      e8:	54 41 4e 4b 20 46 55 20 56 32 2e 30 20 46 4f 52     TANK FU V2.0 FOR
      f8:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     108:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     118:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     128:	4f 4b 53 00 23 00                                   OKS.#.

0000012e <default_scores>:
     12e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     13e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000014c <default_handles>:
     14c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     15c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000016a <strLevels>:
     16a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     17a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     18a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     19a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     1aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     1ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     1ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     1da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     1ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     1fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     20a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000021a <strPaused>:
     21a:	50 41 55 53 45 44 00                                PAUSED.

00000221 <strExit>:
     221:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000022a <strTotal>:
     22a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000231 <strScore>:
     231:	53 43 4f 52 45 3a 00                                SCORE:.

00000238 <strBanterClear>:
     238:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000247 <banter_map>:
     247:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     257:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     267:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     277:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     287:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     297:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     2a7:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     2b7:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     2c7:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     2d7:	20 20 20 20 20 00                                        .

000002dd <strFinalScore>:
     2dd:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

000002e9 <strBy>:
     2e9:	42 59 00                                            BY.

000002ec <strOwns>:
     2ec:	4f 57 4e 53 00                                      OWNS.

000002f1 <strChangeHandle>:
     2f1:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000300 <strPlayer2>:
     300:	50 32 00                                            P2.

00000303 <strPlayer1>:
     303:	50 31 00                                            P1.

00000306 <strVertSep>:
     306:	3b 00                                               ;.

00000308 <strUnderline>:
     308:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000314 <strHandlesTitle>:
     314:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000320 <strHighscores>:
     320:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

0000032a <strCopyright>:
     32a:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     33a:	4f 4f 4b 53 00                                      OOKS.

0000033f <strSelectHandle>:
     33f:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

0000034e <strCancelHandle>:
     34e:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000359 <strReset>:
     359:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     369:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000372 <strConfirmHandle>:
     372:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     382:	54 00                                               T.

00000384 <str2Player>:
     384:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000395 <str1Player>:
     395:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

000003a3 <my_patches>:
     3a3:	02 85 13 00 00 4f 07 50 07 02 a0 0c 00 00 e3 06     .....O.P........
     3b3:	e4 06 02 59 0a 00 00 45 02 46 02 02 a8 08 00 00     ...Y...E.F......
     3c3:	af 01 b0 01 02 88 06 00 00 1e 02 1f 02 02 16 05     ................
     3d3:	00 00 70 01 71 01 02 59 0a 00 00 45 02 46 02 02     ..p.q..Y...E.F..
     3e3:	a0 0c 00 00 e3 06 e4 06 00 00 00 f4 03 00 00 00     ................
	...

000003f4 <ad_alarm>:
     3f4:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     404:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     414:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     424:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     434:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     444:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     454:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     464:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     474:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     484:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     494:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     4a4:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     4b4:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     4c4:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     4d4:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     4e4:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     4f4:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     504:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     514:	00 ff                                               ..

00000516 <ad_navigate>:
     516:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     526:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     536:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     546:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     556:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     566:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     576:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     586:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     596:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     5a6:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     5b6:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     5c6:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     5d6:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     5e6:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     5f6:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     606:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     616:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     626:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     636:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     646:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     656:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     666:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     676:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000688 <ad_metal>:
     688:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     698:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     6a8:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     6b8:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     6c8:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     6d8:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     6e8:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     6f8:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     708:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     718:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     728:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     738:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     748:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     758:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     768:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     778:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     788:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     798:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     7a8:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     7b8:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     7c8:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     7d8:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     7e8:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     7f8:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     808:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     818:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     828:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     838:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     848:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     858:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     868:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     878:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     888:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     898:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000008a8 <ad_item>:
     8a8:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     8b8:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     8c8:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     8d8:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     8e8:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     8f8:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     908:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     918:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     928:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     938:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     948:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     958:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     968:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     978:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     988:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     998:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     9a8:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     9b8:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     9c8:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     9d8:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     9e8:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     9f8:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     a08:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     a18:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     a28:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     a38:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     a48:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000a59 <ad_cannonball>:
     a59:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     a69:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     a79:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     a89:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     a99:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     aa9:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     ab9:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     ac9:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     ad9:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     ae9:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     af9:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     b09:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     b19:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     b29:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     b39:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     b49:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     b59:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     b69:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     b79:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     b89:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     b99:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     ba9:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     bb9:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     bc9:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     bd9:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     be9:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     bf9:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     c09:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     c19:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     c29:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     c39:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     c49:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     c59:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     c69:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     c79:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     c89:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c99:	ff ff ff ff ff 00 00                                .......

00000ca0 <ad_brick_explode>:
     ca0:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     cb0:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     cc0:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     cd0:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     ce0:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     cf0:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     d00:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     d10:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     d20:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     d30:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     d40:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     d50:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     d60:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     d70:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     d80:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     d90:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     da0:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     db0:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     dc0:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     dd0:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     de0:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     df0:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     e00:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     e10:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     e20:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     e30:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     e40:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     e50:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     e60:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     e70:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     e80:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     e90:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     ea0:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     eb0:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     ec0:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     ed0:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     ee0:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     ef0:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     f00:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     f10:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     f20:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     f30:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     f40:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     f50:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     f60:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     f70:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     f80:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     f90:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     fa0:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     fb0:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     fc0:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     fd0:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     fe0:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     ff0:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    1000:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    1010:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    1020:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    1030:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    1040:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    1050:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    1060:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    1070:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    1080:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    1090:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    10a0:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    10b0:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    10c0:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    10d0:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    10e0:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    10f0:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1100:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1110:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1120:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1130:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1140:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    1150:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    1160:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    1170:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    1180:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    1190:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    11a0:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    11b0:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    11c0:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    11d0:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    11e0:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    11f0:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1200:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1210:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1220:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1230:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1240:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1250:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1260:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1270:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1280:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1290:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    12a0:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    12b0:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    12c0:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    12d0:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    12e0:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    12f0:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1300:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1310:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1320:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1330:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1340:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1350:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1360:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1370:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1380:	04 04 02 01 00                                      .....

00001385 <ad_banter>:
    1385:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1395:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    13a5:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    13b5:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    13c5:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    13d5:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    13e5:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    13f5:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1405:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1415:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1425:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1435:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1445:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1455:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1465:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1475:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1485:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1495:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    14a5:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    14b5:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    14c5:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    14d5:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    14e5:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    14f5:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1505:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1515:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1525:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1535:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1545:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1555:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1565:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1575:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1585:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1595:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    15a5:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    15b5:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    15c5:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    15d5:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    15e5:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    15f5:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1605:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1615:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1625:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1635:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1645:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1655:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1665:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1675:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1685:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1695:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    16a5:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    16b5:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    16c5:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    16d5:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    16e5:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    16f5:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1705:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1715:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1725:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1735:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1745:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1755:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1765:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1775:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1785:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1795:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    17a5:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    17b5:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    17c5:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    17d5:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    17e5:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    17f5:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    1805:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    1815:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    1825:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    1835:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    1845:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1855:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1865:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1875:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1885:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1895:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    18a5:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    18b5:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    18c5:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    18d5:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    18e5:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    18f5:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    1905:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    1915:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    1925:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    1935:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    1945:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1955:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1965:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1975:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1985:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1995:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    19a5:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    19b5:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    19c5:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    19d5:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    19e5:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    19f5:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    1a05:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    1a15:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    1a25:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    1a35:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    1a45:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1a55:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1a65:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1a75:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1a85:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1a95:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1aa5:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1ab5:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1ac5:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001ad6 <level_data>:
    1ad6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ae6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b0e:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1b26:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1b36:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b46:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1b62:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1b72:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b82:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1b9e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1bbe:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1bce:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1bde:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1bee:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1bfe:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1c0e:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1c1e:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1c2e:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1c3e:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1c4e:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1c5e:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1c6e:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1c7e:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1c8e:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1ca6:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1cb6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1cd2:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1cea:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1d06:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1d16:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1d26:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1d42:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1d52:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1d62:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1d82:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1da2:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1db2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dc2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dd2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1de2:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dfe:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e1a:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1e2a:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1e3a:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1e4a:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1e5a:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1e6a:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1e7a:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1e8a:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e9a:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    1eaa:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1eba:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1eca:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1eda:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1eea:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1efa:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1f0a:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1f1a:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1f2a:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1f3a:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1f4a:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1f5a:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1f6a:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1f7a:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1f8a:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1f9a:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1faa:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1fba:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1fca:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1fda:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1fea:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1ffa:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    200a:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    201a:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    202a:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    203a:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    204a:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    205a:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2072:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    208e:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    209e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20ae:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20be:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20ce:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20ea:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    210a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2126:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2146:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2162:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2182:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    219a:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    21b6:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    21c6:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    21d6:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    21e6:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    21f6:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    2206:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    2216:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2226:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2236:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2246:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2256:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2266:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2276:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2286:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2296:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22a6:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    22b6:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22c6:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    22e2:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2306:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2326:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2342:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2362:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    237e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    238e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    239e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23ae:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23be:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    23ce:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    23de:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    23ee:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    23fe:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    240e:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    241e:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    242e:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    243e:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    244e:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    245e:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    246e:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    247e:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    248e:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    249e:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    24ae:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24ca:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    24e2:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    24f2:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2502:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2512:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    252a:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    253a:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    254a:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    255a:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    256a:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    257a:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2592:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    25a2:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    25b2:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    25ca:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    25da:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    25ea:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    25fa:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    260a:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    261a:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    262a:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2642:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2652:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    266a:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    267a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    268a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    269a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    26aa:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    26c6:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    26e2:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2702:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2712:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2722:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    273e:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    275e:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    277a:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    279a:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    27aa:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    27ba:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    27ca:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    27e2:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    27f2:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    2802:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    2812:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    2822:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2832:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    284e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    285e:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    286e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    287e:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    289e:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    28ba:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    28da:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    28f2:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2902:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    291e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    293a:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    295a:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    296a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    297a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    298a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    299a:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    29aa:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    29c2:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    29d2:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    29e2:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    29f2:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    2a02:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    2a12:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2a22:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    2a32:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2a42:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2a6a:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2a7a:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a8a:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2a9a:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    2ab2:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    2ac2:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    2ad2:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    2ae2:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    2af2:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    2b02:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    2b12:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    2b2a:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    2b3a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b4a:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2b5a:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2b6a:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b7a:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2b8a:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2b9a:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2baa:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2bba:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2bca:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2bda:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bea:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2bfa:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2c0a:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2c26:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c4a:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c7a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c8a:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2c9a:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2cb2:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2cc2:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2cd2:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2ce2:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2cf2:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d02:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2d12:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2d22:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2d32:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2d42:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2d52:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2d76:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d92:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2da2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2db2:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2dc2:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2dd2:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2de2:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2df2:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2e02:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2e1a:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2e2a:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e46:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e66:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2e76:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2e86:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2e96:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2ea6:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2eb6:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2ec6:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2ed6:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2ee6:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2ef6:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2f06:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2f16:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2f26:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2f36:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f46:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f56:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f66:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f76:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f92:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fae:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fce:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fea:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ffa:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    300a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3026:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    303e:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    304e:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    305e:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    306e:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    307e:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    308e:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    309e:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    30ae:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    30be:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    30ce:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    30de:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    30ee:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    3106:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    3116:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3126:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3136:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3146:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3156:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3172:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    318e:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    319e:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    31ae:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31ca:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31ea:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3206:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3226:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3236:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3246:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3256:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    327e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    329e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32ba:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32da:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    32ea:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    32fa:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3316:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3332:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    334a:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    335a:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    336a:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    337a:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    338a:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    339a:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    33aa:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    33ba:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    33ca:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    33da:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    33ea:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    33fa:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    340a:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3422:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3442:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    345e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    347e:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    348e:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    349e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34ba:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34d6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34f6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3512:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3522:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3532:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3542:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3552:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3562:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    357a:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    358a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    359a:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    35aa:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    35ba:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    35ca:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    35da:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    35f2:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3602:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3612:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    3622:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3632:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3642:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    365e:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    366e:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    367e:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    368e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    369e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    36ae:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    36be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    36ce:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    36de:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    36ee:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3712:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3722:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3732:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    3742:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    375a:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    376a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    377a:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    378a:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    379a:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    37aa:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    37ba:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    37d2:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    37e2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    37f2:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3802:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3812:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3822:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3832:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    3842:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3852:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3862:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3872:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3882:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3892:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    38a2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38b2:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    38c2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38d2:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    38e2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38f2:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3902:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3912:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3922:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3932:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3942:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3952:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3962:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3972:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3982:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    3992:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    39a2:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    39c2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39e2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39fe:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a1e:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    3a36:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    3a5a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a76:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a96:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ab2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3ac2:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ad2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aee:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3afe:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3b0e:	02 02                                               ..

00003b10 <sprites_data>:
    3b10:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3b20:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3b30:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3b40:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3b50:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3b60:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3b70:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3b80:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3b90:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3ba0:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3bb0:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3bc0:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3bd0:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3be0:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3bf0:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3c00:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3c10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c20:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3c30:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3c40:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c60:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3c70:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3c80:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3c90:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3ca0:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3cb0:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cc0:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3cd0:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3ce0:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cf0:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3d00:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3d10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d20:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d30:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d60:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d70:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d90:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3da0:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3db0:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3dc0:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3dd0:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3de0:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3df0:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3e00:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3e10:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3e20:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3e30:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3e40:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3e50:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3e60:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3e70:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3e80:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3e90:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3ea0:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3eb0:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3ec0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ed0:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3ee0:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3ef0:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3f00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f10:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3f20:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3f30:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3f40:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f50:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f60:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3f70:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3f80:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3f90:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3fa0:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3fb0:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3fc0:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3fd0:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3fe0:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3ff0:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    4000:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4010:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4020:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4030:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4040:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4050:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4060:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4070:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4080:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4090:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40a0:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    40b0:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    40c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40d0:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40e0:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40f0:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    4100:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    4110:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4120:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4130:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4140:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4150:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4160:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4170:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4180:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4190:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    41a0:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    41b0:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    41c0:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41e0:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    41f0:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    4200:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4210:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4220:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4230:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4240:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4250:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4260:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4270:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4280:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4290:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    42a0:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    42b0:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    42c0:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    42d0:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    42e0:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42f0:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4300:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4310:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4320:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4330:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4340:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4350:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4360:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4370:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    4380:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    4390:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    43a0:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    43b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43d0:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    43e0:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    43f0:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    4400:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4410:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4420:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4430:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4440:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004450 <map_sub_turret>:
    4450:	01 01 23                                            ..#

00004453 <map_sub_shot>:
    4453:	01 01 1b                                            ...

00004456 <map_up_arrow>:
    4456:	01 01 22                                            .."

00004459 <map_down_arrow>:
    4459:	01 01 21                                            ..!

0000445c <map_right_arrow>:
    445c:	01 01 20                                            .. 

0000445f <map_rocket_right_1>:
    445f:	01 01 1a                                            ...

00004462 <map_rocket_right_0>:
    4462:	01 01 19                                            ...

00004465 <map_rocket_up_1>:
    4465:	01 01 18                                            ...

00004468 <map_rocket_up_0>:
    4468:	01 01 17                                            ...

0000446b <map_ball>:
    446b:	01 01 16                                            ...

0000446e <map_explosion_2>:
    446e:	02 02 08 09 09 08                                   ......

00004474 <map_explosion_1>:
    4474:	02 02 06 07 10 11                                   ......

0000447a <map_explosion_0>:
    447a:	02 02 04 05 0e 0f                                   ......

00004480 <map_tank2_right_0>:
    4480:	02 02 14 15 1e 1f                                   ......

00004486 <map_tank2_up_0>:
    4486:	02 02 12 13 1c 1d                                   ......

0000448c <map_tank1_right_0>:
    448c:	02 02 02 03 0c 0d                                   ......

00004492 <map_tank1_up_0>:
    4492:	02 02 00 01 0a 0b                                   ......

00004498 <map_tank_blank>:
    4498:	02 02 24 24 24 24                                   ..$$$$

0000449e <map_none>:
    449e:	01 01 24                                            ..$

000044a1 <tiles_data>:
	...
    44e1:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    44f1:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4501:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4511:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4521:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    4531:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    4541:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4551:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4561:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    4571:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    4581:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    4591:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    45a1:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    45b1:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    45c1:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    45d1:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    45e1:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    45f1:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4601:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4611:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4629:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4639:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4649:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4661:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4671:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4681:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4691:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    46a9:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    46c9:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    46e1:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    46f1:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4701:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4711:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4721:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4731:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4741:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4751:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4761:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4771:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4781:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4791:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    47a1:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    47b1:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    47c1:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    47d1:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    47e1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    47f1:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4801:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4811:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4821:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4831:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4841:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4851:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4861:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    4871:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    4881:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    4891:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    48a1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48b1:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    48c1:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    48d1:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    48e1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48f1:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4901:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4911:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4921:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4931:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4941:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4951:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4961:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4971:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4981:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4991:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49a1:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    49b1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49c1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49d1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4a01:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4a11:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a21:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4a31:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a41:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a51:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a61:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4a71:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a81:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a91:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4aa1:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4ab1:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4ac1:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4ad1:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4ae1:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4af1:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4b01:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4b11:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4b21:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b31:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b41:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b51:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b61:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b71:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4ba1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bb1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bc1:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4bd1:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4be1:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4bf1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c01:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c11:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c21:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4c61:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4c71:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4c81:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4c91:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4ca1:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4cb1:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4cc1:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4cd1:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    4d11:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4d49:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4d59:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4d69:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4d79:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4d89:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4d99:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4da9:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4db9:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4dc9:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4dd9:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4de9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4df9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e09:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e19:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e29:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e39:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e49:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e59:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4e69:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4e79:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4e89:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4e99:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4ea9:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4eb9:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4ec9:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4ed9:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4ee9:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f21:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f31:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f41:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4f65:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4f75:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4f85:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4f95:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4fa5:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4fb5:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4fc5:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4fd5:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4fe5:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4ff5:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5005:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5015:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5025:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5035:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5045:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5055:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5065:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    5075:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5085:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5095:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    50a5:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    50b5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50c5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50d5:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    50e5:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    50f5:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    5105:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    5115:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    5125:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    5135:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5145:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5155:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5165:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5175:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5185:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5195:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    51a5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    51c5:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    51d5:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    51e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5205:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    5215:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5225:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5235:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5245:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5255:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5265:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5275:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5285:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5295:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    52a5:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    52b5:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52d5:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    52e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    52f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5305:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5315:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    5325:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5335:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5345:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5355:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5365:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5375:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5385:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5395:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    53a5:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    53d5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    53e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5405:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    5415:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    5425:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5435:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5445:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5455:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5465:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5475:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5485:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5495:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    54a5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    54c5:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    54d5:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    54e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5505:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5515:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5525:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5535:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5545:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5555:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5565:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5575:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5585:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5595:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    55a5:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55d5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    55e5:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5605:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5615:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5625:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5635:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5645:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5655:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5665:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5675:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5685:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5695:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    56a5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    56d5:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56e5:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56f5:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5705:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5715:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5725:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5735:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5745:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5755:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5765:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5775:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5785:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5795:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    57a5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    57b5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    57c5:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    57d5:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    57e5:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5805:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5815:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5825:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5835:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5845:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5855:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5865:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5875:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5885:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5895:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    58a5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    58b5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    58c5:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    58d5:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    58e5:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    58f5:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5905:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5915:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5925:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5935:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5945:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5955:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5965:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5975:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5985:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5995:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    59a5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59c5:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    59d5:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    59e5:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a05:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5a15:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5a25:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a35:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a45:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5a55:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5a65:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a75:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a95:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5aa5:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5ab5:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5ac5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ad5:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5ae5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5af5:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5b05:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5b15:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5b25:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5b35:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5b45:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5b55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5b65:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b75:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    5b85:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    5b95:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    5ba5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bb5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5bc5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5bd5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    5be5:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    5bf5:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c05:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c15:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5c25:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c35:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c45:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c55:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5c65:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c75:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c95:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ca5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cb5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5cc5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5cd5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5ce5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    5cf5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5d05:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5d15:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d25:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d35:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d45:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d55:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d75:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d85:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d95:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5da5:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    5db5:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    5dc5:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    5dd5:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    5de5:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    5df5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e05:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5e15:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5e25:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5e35:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5e45:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5e55:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5e65:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5e75:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    5e85:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    5e95:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5ea5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5eb5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    5ec5:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    5ed5:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5ee5:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5ef5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5f05:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5f15:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5f25:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f35:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5f45:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5f55:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5f65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f75:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f95:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    5fa5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5fb5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5fc5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5fd5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5fe5:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5ff5:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6005:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6015:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6025:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6035:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6045:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6055:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6065:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6075:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6085:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    6095:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    60a5:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    60b5:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    60c5:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    60d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    60e5:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    60f5:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6105:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6115:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    6125:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6135:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6145:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6155:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6165:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    6175:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    6185:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    6195:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    61a5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    61b5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61c5:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    61d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    61e5:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    61f5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6205:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6215:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6225:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6235:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6245:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6255:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6265:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    6275:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6285:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6295:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    62a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62b5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    62d5:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    62e5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62f5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6305:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6315:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6325:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6335:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6345:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6355:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6365:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6375:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6385:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6395:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    63a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    63b5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    63d5:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    63e5:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    63f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6405:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6415:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6425:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6435:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6445:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6455:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6465:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    6475:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6485:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6495:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    64a5:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    64b5:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    64c5:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    64d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    64e5:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    64f5:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    6505:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6515:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6525:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6535:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6545:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6555:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6565:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6575:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6585:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6595:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    65a5:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    65c5:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    65d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    65e5:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6605:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6615:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6625:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6635:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6645:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6655:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6665:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6675:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6685:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6695:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66a5:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    66b5:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    66c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66e5:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    66f5:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6705:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6715:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6725:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6735:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6745:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6755:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6765:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6775:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6785:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6795:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67a5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    67e5:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    67f5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6805:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6815:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6825:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6835:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6845:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6855:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6865:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6875:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6885:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6895:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    68a5:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    68e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    68f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6905:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6915:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6925:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6935:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6945:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6955:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6965:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6975:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6985:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6995:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69a5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69d5:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69e5:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    69f5:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6a05:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a15:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a25:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a35:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6a45:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a65:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a75:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a85:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a95:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6aa5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ab5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ac5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6ad5:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6ae5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6af5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b05:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6b15:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6b25:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b35:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b45:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6b55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    6ba9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6bb9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6bd1:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6be9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6bf9:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6c29:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6c39:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6c49:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6c61:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    6c71:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    6c81:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6c91:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ca9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6cb9:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6cc9:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    6ce1:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    6cf1:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6d01:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6d11:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6d29:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6d39:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6d6d:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    6d7d:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6d8d:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    6da9:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    6db9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6dc9:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6de9:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6df9:	df df df df df df df df 00 00 df df df df 00 00     ................
    6e09:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    6e29:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e39:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6e49:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6e89:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e99:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6eb9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6f09:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6f2d:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    6f3d:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    6f4d:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6f69:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6f79:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    6f89:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6fa9:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    6fb9:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    6fc9:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6fe9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6ff9:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7009:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    7029:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    7039:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    7049:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    706d:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    707d:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    708d:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    70a9:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    70b9:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    70c9:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    70e9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    70f9:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    7109:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7129:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    7139:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7149:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    7169:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7179:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7189:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    71a9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    71b9:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    71c9:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    71f1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7209:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7221:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7231:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7241:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7251:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7261:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    7271:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7281:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7291:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72b1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72c9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72e1:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    72f1:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7301:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7311:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7329:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7339:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7351:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7369:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7379:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    7389:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    73a9:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    73b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    73c9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    73e9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    73f9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7409:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7429:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7439:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7449:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7469:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    7479:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7489:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    74a9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74b9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    74c9:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    74e9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74f9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7509:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7529:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7539:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7549:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7569:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7579:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7589:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    75a9:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    75b9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    75c9:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    75ed:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    75fd:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    760d:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7629:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7639:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7649:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7669:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7679:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7689:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    76a9:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    76b9:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    76c9:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    76e9:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    76f9:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7709:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7729:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7739:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7749:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7769:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7779:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7789:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    77a9:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    77b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    77c9:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    77e9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    77f9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7809:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7829:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7839:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7849:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7869:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7879:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7889:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    78a9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78c9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    78e9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78f9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7909:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7929:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7939:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7949:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7969:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7979:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7989:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    79a9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    79b9:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    79c9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    79e9:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    79f9:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7a09:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7a29:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7a39:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a49:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7a69:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7a79:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a89:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7aa9:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ab9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ac9:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7aed:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    7afd:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7b51:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00007b61 <map_sub_emerging>:
    7b61:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b71:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7b81:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b91:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ba1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7bb1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    7bc1:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    7bd1:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    7be1:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    7bf1:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    7c01:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    7c11:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    7c21:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c31:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7c41:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c51:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c61:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c71:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c81:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c91:	0d 0d 0d 0d 0d 0d                                   ......

00007c97 <map_sub>:
    7c97:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ca7:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7cb7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7cc7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7cd7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ce7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7cf7:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7d07:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7d17:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7d27:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7d37:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7d47:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7d57:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d67:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7d77:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d87:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d97:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7da7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7db7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7dc7:	0d 0d 0d 0d 0d 0d                                   ......

00007dcd <map_scope_2>:
    7dcd:	01 01 12                                            ...

00007dd0 <map_scope_1>:
    7dd0:	01 01 11                                            ...

00007dd3 <map_scope_0>:
    7dd3:	01 01 10                                            ...

00007dd6 <map_blue_tank>:
    7dd6:	02 02 2b 2c 31 32                                   ..+,12

00007ddc <map_green_tank>:
    7ddc:	02 02 18 19 23 24                                   ....#$

00007de2 <map_fence>:
    7de2:	01 01 0f                                            ...

00007de5 <map_turf>:
    7de5:	01 01 0e                                            ...

00007de8 <map_water>:
    7de8:	01 01 0d                                            ...

00007deb <map_metal_bl>:
    7deb:	01 01 0c                                            ...

00007dee <map_metal_tr>:
    7dee:	01 01 0b                                            ...

00007df1 <map_metal_br>:
    7df1:	01 01 0a                                            ...

00007df4 <map_metal_tl>:
    7df4:	01 01 09                                            ...

00007df7 <map_tile_exp_2>:
    7df7:	01 01 08                                            ...

00007dfa <map_tile_exp_1>:
    7dfa:	01 01 07                                            ...

00007dfd <map_tile_exp_0>:
    7dfd:	01 01 06                                            ...

00007e00 <map_rocket_itm>:
    7e00:	01 01 04                                            ...

00007e03 <map_explode_itm>:
    7e03:	01 01 03                                            ...

00007e06 <map_speed_itm>:
    7e06:	01 01 02                                            ...

00007e09 <map_metal>:
    7e09:	01 01 05                                            ...

00007e0c <map_brick>:
    7e0c:	01 01 01                                            ...

00007e0f <map_splash>:
    7e0f:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    7e1f:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    7e2f:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    7e3f:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    7e4f:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    7e5f:	1a 00 00 1a 2f 30                                   ..../0

00007e65 <map_pause>:
    7e65:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    7e75:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    7e85:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    7e95:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00007ea3 <map_tile_none>:
    7ea3:	01 01 00                                            ...

00007ea6 <__ctors_end>:
    7ea6:	11 24       	eor	r1, r1
    7ea8:	1f be       	out	0x3f, r1	; 63
    7eaa:	cf ef       	ldi	r28, 0xFF	; 255
    7eac:	d0 e1       	ldi	r29, 0x10	; 16
    7eae:	de bf       	out	0x3e, r29	; 62
    7eb0:	cd bf       	out	0x3d, r28	; 61

00007eb2 <__do_copy_data>:
    7eb2:	11 e0       	ldi	r17, 0x01	; 1
    7eb4:	a0 e0       	ldi	r26, 0x00	; 0
    7eb6:	b1 e0       	ldi	r27, 0x01	; 1
    7eb8:	ec e7       	ldi	r30, 0x7C	; 124
    7eba:	fc ee       	ldi	r31, 0xEC	; 236
    7ebc:	02 c0       	rjmp	.+4      	; 0x7ec2 <__do_copy_data+0x10>
    7ebe:	05 90       	lpm	r0, Z+
    7ec0:	0d 92       	st	X+, r0
    7ec2:	a4 30       	cpi	r26, 0x04	; 4
    7ec4:	b1 07       	cpc	r27, r17
    7ec6:	d9 f7       	brne	.-10     	; 0x7ebe <__do_copy_data+0xc>

00007ec8 <__do_clear_bss>:
    7ec8:	10 e1       	ldi	r17, 0x10	; 16
    7eca:	a4 e0       	ldi	r26, 0x04	; 4
    7ecc:	b1 e0       	ldi	r27, 0x01	; 1
    7ece:	01 c0       	rjmp	.+2      	; 0x7ed2 <.do_clear_bss_start>

00007ed0 <.do_clear_bss_loop>:
    7ed0:	1d 92       	st	X+, r1

00007ed2 <.do_clear_bss_start>:
    7ed2:	aa 3a       	cpi	r26, 0xAA	; 170
    7ed4:	b1 07       	cpc	r27, r17
    7ed6:	e1 f7       	brne	.-8      	; 0x7ed0 <.do_clear_bss_loop>

00007ed8 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7ed8:	0e 94 2e 44 	call	0x885c	; 0x885c <wdt_randomize>
#endif

    MCUSR = 0;
    7edc:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7ede:	88 e1       	ldi	r24, 0x18	; 24
    7ee0:	0f b6       	in	r0, 0x3f	; 63
    7ee2:	f8 94       	cli
    7ee4:	80 93 60 00 	sts	0x0060, r24
    7ee8:	10 92 60 00 	sts	0x0060, r1
    7eec:	0f be       	out	0x3f, r0	; 63

00007eee <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7eee:	0e 94 f0 44 	call	0x89e0	; 0x89e0 <isEepromFormatted>
    7ef2:	81 11       	cpse	r24, r1
    7ef4:	02 c0       	rjmp	.+4      	; 0x7efa <Initialize+0xc>
    7ef6:	0e 94 ce 44 	call	0x899c	; 0x899c <FormatEeprom>

	cli();
    7efa:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7efc:	81 e0       	ldi	r24, 0x01	; 1
    7efe:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    7f02:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7f06:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7f0a:	10 92 02 0b 	sts	0x0B02, r1
    7f0e:	10 92 08 0b 	sts	0x0B08, r1
    7f12:	10 92 0e 0b 	sts	0x0B0E, r1
    7f16:	10 92 14 0b 	sts	0x0B14, r1
    7f1a:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7f1e:	10 92 ea 0a 	sts	0x0AEA, r1
	sync_flags=0;
    7f22:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7f26:	92 e1       	ldi	r25, 0x12	; 18
    7f28:	90 93 eb 0a 	sts	0x0AEB, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7f2c:	90 ee       	ldi	r25, 0xE0	; 224
    7f2e:	90 93 f2 0a 	sts	0x0AF2, r25
	first_render_line=FIRST_RENDER_LINE;
    7f32:	94 e1       	ldi	r25, 0x14	; 20
    7f34:	90 93 f1 0a 	sts	0x0AF1, r25

	joypad1_status_hi=0;
    7f38:	10 92 f6 0a 	sts	0x0AF6, r1
    7f3c:	10 92 f5 0a 	sts	0x0AF5, r1
	joypad2_status_hi=0;
    7f40:	10 92 fa 0a 	sts	0x0AFA, r1
    7f44:	10 92 f9 0a 	sts	0x0AF9, r1
	sound_enabled=1;
    7f48:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    7f4c:	0e 94 f8 51 	call	0xa3f0	; 0xa3f0 <InitializeVideoMode>
    7f50:	80 e7       	ldi	r24, 0x70	; 112
    7f52:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7f54:	fc 01       	movw	r30, r24
    7f56:	25 91       	lpm	r18, Z+
    7f58:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7f5a:	f9 01       	movw	r30, r18
    7f5c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7f5e:	30 83       	st	Z, r19
    7f60:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	8e 39       	cpi	r24, 0x9E	; 158
    7f66:	92 07       	cpc	r25, r18
    7f68:	a9 f7       	brne	.-22     	; 0x7f54 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7f6a:	78 94       	sei
	
	DisplayLogo();
    7f6c:	0e 94 f7 51 	call	0xa3ee	; 0xa3ee <DisplayLogo>
    7f70:	0e 94 49 73 	call	0xe692	; 0xe692 <main>
    7f74:	0c 94 3c 76 	jmp	0xec78	; 0xec78 <_exit>

00007f78 <__bad_interrupt>:
    7f78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007f7c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    7f7c:	0b e9       	ldi	r16, 0x9B	; 155
    7f7e:	0a 95       	dec	r16
    7f80:	f1 f7       	brne	.-4      	; 0x7f7e <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    7f82:	00 91 d9 0a 	lds	r16, 0x0AD9

		ldi ZL,lo8(ram_tiles_restore);
    7f86:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    7f88:	fa e0       	ldi	r31, 0x0A	; 10
		ldi r18,3
    7f8a:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    7f8c:	02 9f       	mul	r16, r18
		add ZL,r0
    7f8e:	e0 0d       	add	r30, r0
		adc ZH,r1
    7f90:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    7f92:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7f94:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7f96:	20 91 d8 0a 	lds	r18, 0x0AD8
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    7f9a:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    7f9c:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    7f9e:	30 0f       	add	r19, r16

		cp r18,r16
    7fa0:	20 17       	cp	r18, r16
		breq no_ramtiles
    7fa2:	51 f0       	breq	.+20     	; 0x7fb8 <no_ramtiles>
		nop
    7fa4:	00 00       	nop
	...

00007fa8 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    7fa8:	a1 91       	ld	r26, Z+
		ld XH,Z+
    7faa:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    7fac:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    7fae:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    7fb0:	0c 93       	st	X, r16

		inc r16
    7fb2:	03 95       	inc	r16
		cp r16,r18
    7fb4:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    7fb6:	c0 f3       	brcs	.-16     	; 0x7fa8 <upd_loop>

00007fb8 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    7fb8:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    7fba:	1a 95       	dec	r17
		brne .-4
    7fbc:	f1 f7       	brne	.-4      	; 0x7fba <no_ramtiles+0x2>
		rjmp .
    7fbe:	00 c0       	rjmp	.+0      	; 0x7fc0 <no_ramtiles+0x8>
		dec r19
    7fc0:	3a 95       	dec	r19
		brne 1b
    7fc2:	d1 f7       	brne	.-12     	; 0x7fb8 <no_ramtiles>
		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1

#endif


		lds r2,overlay_tile_table
    7fc4:	20 90 e7 0a 	lds	r2, 0x0AE7
		lds r3,overlay_tile_table+1
    7fc8:	30 90 e8 0a 	lds	r3, 0x0AE8
		lds r16,tile_table_lo 
    7fcc:	00 91 e3 0a 	lds	r16, 0x0AE3
		lds r17,tile_table_hi
    7fd0:	10 91 e4 0a 	lds	r17, 0x0AE4
		movw r12,r16
    7fd4:	68 01       	movw	r12, r16
		movw r6,r16
    7fd6:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    7fd8:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    7fda:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7fdc:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    7fde:	4e 01       	movw	r8, r28
		clr r0
    7fe0:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    7fe2:	30 91 e6 0a 	lds	r19, 0x0AE6
		cpi r19,0
    7fe6:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    7fe8:	09 f0       	breq	.+2      	; 0x7fec <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    7fea:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    7fec:	09 f0       	breq	.+2      	; 0x7ff0 <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    7fee:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    7ff0:	09 f0       	breq	.+2      	; 0x7ff4 <no_ramtiles+0x3c>
		mov r24,r19
    7ff2:	83 2f       	mov	r24, r19

		breq .+2
    7ff4:	09 f0       	breq	.+2      	; 0x7ff8 <no_ramtiles+0x40>
		movw r12,r2
    7ff6:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    7ff8:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    7ffa:	a0 2e       	mov	r10, r16
		clr r22
    7ffc:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    7ffe:	78 e0       	ldi	r23, 0x08	; 8

00008000 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    8000:	09 d3       	rcall	.+1554   	; 0x8614 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    8002:	3c e0       	ldi	r19, 0x0C	; 12
    8004:	3a 95       	dec	r19
    8006:	f1 f7       	brne	.-4      	; 0x8004 <next_tile_line+0x4>
    8008:	00 c0       	rjmp	.+0      	; 0x800a <next_tile_line+0xa>

		;***draw line***
		call render_tile_line
    800a:	0e 94 34 40 	call	0x8068	; 0x8068 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    800e:	3f e0       	ldi	r19, 0x0F	; 15
    8010:	3a 95       	dec	r19
    8012:	f1 f7       	brne	.-4      	; 0x8010 <next_tile_line+0x10>
    8014:	00 c0       	rjmp	.+0      	; 0x8016 <next_tile_line+0x16>

		dec r10
    8016:	aa 94       	dec	r10
		breq frame_end
    8018:	a1 f0       	breq	.+40     	; 0x8042 <frame_end>
	
		inc r22
    801a:	63 95       	inc	r22
		lpm ;3 nop
    801c:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    801e:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    8020:	29 f0       	breq	.+10     	; 0x802c <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    8022:	33 e0       	ldi	r19, 0x03	; 3
    8024:	3a 95       	dec	r19
    8026:	f1 f7       	brne	.-4      	; 0x8024 <next_tile_line+0x24>
    8028:	00 c0       	rjmp	.+0      	; 0x802a <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    802a:	ea cf       	rjmp	.-44     	; 0x8000 <next_tile_line>

0000802c <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    802c:	66 27       	eor	r22, r22

		clr r0
    802e:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    8030:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    8032:	c3 0f       	add	r28, r19
		adc YH,r0
    8034:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    8036:	8a 95       	dec	r24
		brne .+2
    8038:	09 f4       	brne	.+2      	; 0x803c <next_tile_row+0x10>
		movw YL,r8	;main vram
    803a:	e4 01       	movw	r28, r8
		brne .+2
    803c:	09 f4       	brne	.+2      	; 0x8040 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    803e:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    8040:	df cf       	rjmp	.-66     	; 0x8000 <next_tile_line>

00008042 <frame_end>:

	frame_end:

		WAIT r19,18
    8042:	36 e0       	ldi	r19, 0x06	; 6
    8044:	3a 95       	dec	r19
    8046:	f1 f7       	brne	.-4      	; 0x8044 <frame_end+0x2>

		rcall hsync_pulse ;145
    8048:	e5 d2       	rcall	.+1482   	; 0x8614 <hsync_pulse>
	
#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
		clr r1
    804a:	11 24       	eor	r1, r1
		call RestoreBackground
    804c:	0e 94 b0 41 	call	0x8360	; 0x8360 <RestoreBackground>
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    8050:	e0 91 ec 0a 	lds	r30, 0x0AEC
		ldi r20,SYNC_FLAG_FIELD
    8054:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    8056:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    8058:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    805a:	e0 93 ec 0a 	sts	0x0AEC, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    805e:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8060:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    8064:	11 24       	eor	r1, r1


		ret
    8066:	08 95       	ret

00008068 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    8068:	de 01       	movw	r26, r28

		mul r22,r23
    806a:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    806c:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    806e:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8070:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    8072:	00 0d       	add	r16, r0
		adc r17,r1
    8074:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    8076:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    8078:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    807a:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    807c:	00 0d       	add	r16, r0
		adc r17,r1
    807e:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    8080:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8082:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    8084:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    8086:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    8088:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    808a:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    808c:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    808e:	08 f4       	brcc	.+2      	; 0x8092 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    8090:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    8092:	04 0e       	add	r0, r20
	    adc r1,r21
    8094:	15 1e       	adc	r1, r21

		movw ZL,r0
    8096:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    8098:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    809a:	f0 f0       	brcs	.+60     	; 0x80d8 <ramloop>

0000809c <romloop>:
	

	romloop:
	    lpm r16,Z+
    809c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    809e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    80a0:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    80a2:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    80a4:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    80a6:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    80a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    80aa:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    80ac:	28 31       	cpi	r18, 0x18	; 24
		nop
    80ae:	00 00       	nop

	    lpm r16,Z+
    80b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    80b2:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    80b4:	08 f4       	brcc	.+2      	; 0x80b8 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    80b6:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    80b8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    80ba:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    80bc:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    80be:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    80c0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    80c2:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    80c4:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    80c6:	1a 95       	dec	r17
   
	    lpm r16,Z+
    80c8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    80ca:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    80cc:	05 91       	lpm	r16, Z+

		breq end	
    80ce:	31 f1       	breq	.+76     	; 0x811c <end>
	    movw ZL,r0   	;copy next tile adress
    80d0:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    80d2:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    80d4:	18 f7       	brcc	.-58     	; 0x809c <romloop>
	
		rjmp .
    80d6:	00 c0       	rjmp	.+0      	; 0x80d8 <ramloop>

000080d8 <ramloop>:

	ramloop:

	    ld r16,Z+
    80d8:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    80da:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    80dc:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    80de:	01 91       	ld	r16, Z+
		nop   
    80e0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    80e2:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    80e4:	23 9f       	mul	r18, r19


	    ld r16,Z+
    80e6:	01 91       	ld	r16, Z+
		nop
    80e8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    80ea:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    80ec:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    80ee:	00 c0       	rjmp	.+0      	; 0x80f0 <ramloop+0x18>

	    ld r16,Z+
    80f0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    80f2:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    80f4:	08 f0       	brcs	.+2      	; 0x80f8 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    80f6:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    80f8:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    80fa:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    80fc:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    80fe:	15 1e       	adc	r1, r21
		rjmp .
    8100:	00 c0       	rjmp	.+0      	; 0x8102 <ramloop+0x2a>
    
		ld r16,Z+		
    8102:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    8104:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    8106:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    8108:	00 c0       	rjmp	.+0      	; 0x810a <ramloop+0x32>

	    ld r16,Z+	
    810a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    810c:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    810e:	01 91       	ld	r16, Z+

	    dec r17
    8110:	1a 95       	dec	r17
	    breq end
    8112:	21 f0       	breq	.+8      	; 0x811c <end>
	
		movw ZL,r0
    8114:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8116:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    8118:	08 f6       	brcc	.-126    	; 0x809c <romloop>
		rjmp ramloop
    811a:	de cf       	rjmp	.-68     	; 0x80d8 <ramloop>

0000811c <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    811c:	08 b9       	out	0x08, r16	; 8
		clr r16	
    811e:	00 27       	eor	r16, r16
		lpm	
    8120:	c8 95       	lpm
		nop
    8122:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    8124:	08 b9       	out	0x08, r16	; 8

		ret
    8126:	08 95       	ret

00008128 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8128:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    812a:	e0 91 e3 0a 	lds	r30, 0x0AE3
	lds ZH,tile_table_hi
    812e:	f0 91 e4 0a 	lds	r31, 0x0AE4
	mul r24,r18
    8132:	82 9f       	mul	r24, r18
	add ZL,r0
    8134:	e0 0d       	add	r30, r0
	adc ZH,r1
    8136:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8138:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    813a:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    813c:	62 9f       	mul	r22, r18
	add XL,r0
    813e:	a0 0d       	add	r26, r0
	adc XH,r1
    8140:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    8142:	15 90       	lpm	r1, Z+
    8144:	1d 92       	st	X+, r1
    8146:	15 90       	lpm	r1, Z+
    8148:	1d 92       	st	X+, r1
    814a:	15 90       	lpm	r1, Z+
    814c:	1d 92       	st	X+, r1
    814e:	15 90       	lpm	r1, Z+
    8150:	1d 92       	st	X+, r1
    8152:	15 90       	lpm	r1, Z+
    8154:	1d 92       	st	X+, r1
    8156:	15 90       	lpm	r1, Z+
    8158:	1d 92       	st	X+, r1
    815a:	15 90       	lpm	r1, Z+
    815c:	1d 92       	st	X+, r1
    815e:	15 90       	lpm	r1, Z+
    8160:	1d 92       	st	X+, r1
    8162:	15 90       	lpm	r1, Z+
    8164:	1d 92       	st	X+, r1
    8166:	15 90       	lpm	r1, Z+
    8168:	1d 92       	st	X+, r1
    816a:	15 90       	lpm	r1, Z+
    816c:	1d 92       	st	X+, r1
    816e:	15 90       	lpm	r1, Z+
    8170:	1d 92       	st	X+, r1
    8172:	15 90       	lpm	r1, Z+
    8174:	1d 92       	st	X+, r1
    8176:	15 90       	lpm	r1, Z+
    8178:	1d 92       	st	X+, r1
    817a:	15 90       	lpm	r1, Z+
    817c:	1d 92       	st	X+, r1
    817e:	15 90       	lpm	r1, Z+
    8180:	1d 92       	st	X+, r1
    8182:	15 90       	lpm	r1, Z+
    8184:	1d 92       	st	X+, r1
    8186:	15 90       	lpm	r1, Z+
    8188:	1d 92       	st	X+, r1
    818a:	15 90       	lpm	r1, Z+
    818c:	1d 92       	st	X+, r1
    818e:	15 90       	lpm	r1, Z+
    8190:	1d 92       	st	X+, r1
    8192:	15 90       	lpm	r1, Z+
    8194:	1d 92       	st	X+, r1
    8196:	15 90       	lpm	r1, Z+
    8198:	1d 92       	st	X+, r1
    819a:	15 90       	lpm	r1, Z+
    819c:	1d 92       	st	X+, r1
    819e:	15 90       	lpm	r1, Z+
    81a0:	1d 92       	st	X+, r1
    81a2:	15 90       	lpm	r1, Z+
    81a4:	1d 92       	st	X+, r1
    81a6:	15 90       	lpm	r1, Z+
    81a8:	1d 92       	st	X+, r1
    81aa:	15 90       	lpm	r1, Z+
    81ac:	1d 92       	st	X+, r1
    81ae:	15 90       	lpm	r1, Z+
    81b0:	1d 92       	st	X+, r1
    81b2:	15 90       	lpm	r1, Z+
    81b4:	1d 92       	st	X+, r1
    81b6:	15 90       	lpm	r1, Z+
    81b8:	1d 92       	st	X+, r1
    81ba:	15 90       	lpm	r1, Z+
    81bc:	1d 92       	st	X+, r1
    81be:	15 90       	lpm	r1, Z+
    81c0:	1d 92       	st	X+, r1
    81c2:	15 90       	lpm	r1, Z+
    81c4:	1d 92       	st	X+, r1
    81c6:	15 90       	lpm	r1, Z+
    81c8:	1d 92       	st	X+, r1
    81ca:	15 90       	lpm	r1, Z+
    81cc:	1d 92       	st	X+, r1
    81ce:	15 90       	lpm	r1, Z+
    81d0:	1d 92       	st	X+, r1
    81d2:	15 90       	lpm	r1, Z+
    81d4:	1d 92       	st	X+, r1
    81d6:	15 90       	lpm	r1, Z+
    81d8:	1d 92       	st	X+, r1
    81da:	15 90       	lpm	r1, Z+
    81dc:	1d 92       	st	X+, r1
    81de:	15 90       	lpm	r1, Z+
    81e0:	1d 92       	st	X+, r1
    81e2:	15 90       	lpm	r1, Z+
    81e4:	1d 92       	st	X+, r1
    81e6:	15 90       	lpm	r1, Z+
    81e8:	1d 92       	st	X+, r1
    81ea:	15 90       	lpm	r1, Z+
    81ec:	1d 92       	st	X+, r1
    81ee:	15 90       	lpm	r1, Z+
    81f0:	1d 92       	st	X+, r1
    81f2:	15 90       	lpm	r1, Z+
    81f4:	1d 92       	st	X+, r1
    81f6:	15 90       	lpm	r1, Z+
    81f8:	1d 92       	st	X+, r1
    81fa:	15 90       	lpm	r1, Z+
    81fc:	1d 92       	st	X+, r1
    81fe:	15 90       	lpm	r1, Z+
    8200:	1d 92       	st	X+, r1
    8202:	15 90       	lpm	r1, Z+
    8204:	1d 92       	st	X+, r1
    8206:	15 90       	lpm	r1, Z+
    8208:	1d 92       	st	X+, r1
    820a:	15 90       	lpm	r1, Z+
    820c:	1d 92       	st	X+, r1
    820e:	15 90       	lpm	r1, Z+
    8210:	1d 92       	st	X+, r1
    8212:	15 90       	lpm	r1, Z+
    8214:	1d 92       	st	X+, r1
    8216:	15 90       	lpm	r1, Z+
    8218:	1d 92       	st	X+, r1
    821a:	15 90       	lpm	r1, Z+
    821c:	1d 92       	st	X+, r1
    821e:	15 90       	lpm	r1, Z+
    8220:	1d 92       	st	X+, r1
    8222:	15 90       	lpm	r1, Z+
    8224:	1d 92       	st	X+, r1
    8226:	15 90       	lpm	r1, Z+
    8228:	1d 92       	st	X+, r1
    822a:	15 90       	lpm	r1, Z+
    822c:	1d 92       	st	X+, r1
    822e:	15 90       	lpm	r1, Z+
    8230:	1d 92       	st	X+, r1
    8232:	15 90       	lpm	r1, Z+
    8234:	1d 92       	st	X+, r1
    8236:	15 90       	lpm	r1, Z+
    8238:	1d 92       	st	X+, r1
    823a:	15 90       	lpm	r1, Z+
    823c:	1d 92       	st	X+, r1
    823e:	15 90       	lpm	r1, Z+
    8240:	1d 92       	st	X+, r1
	clr r1
    8242:	11 24       	eor	r1, r1
	ret
    8244:	08 95       	ret

00008246 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    8246:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    8248:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    824a:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    824c:	82 9f       	mul	r24, r18
	add ZL,r0
    824e:	e0 0d       	add	r30, r0
	adc ZH,r1
    8250:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8252:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8254:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8256:	62 9f       	mul	r22, r18
	add XL,r0
    8258:	a0 0d       	add	r26, r0
	adc XH,r1
    825a:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    825c:	11 90       	ld	r1, Z+
    825e:	1d 92       	st	X+, r1
    8260:	11 90       	ld	r1, Z+
    8262:	1d 92       	st	X+, r1
    8264:	11 90       	ld	r1, Z+
    8266:	1d 92       	st	X+, r1
    8268:	11 90       	ld	r1, Z+
    826a:	1d 92       	st	X+, r1
    826c:	11 90       	ld	r1, Z+
    826e:	1d 92       	st	X+, r1
    8270:	11 90       	ld	r1, Z+
    8272:	1d 92       	st	X+, r1
    8274:	11 90       	ld	r1, Z+
    8276:	1d 92       	st	X+, r1
    8278:	11 90       	ld	r1, Z+
    827a:	1d 92       	st	X+, r1
    827c:	11 90       	ld	r1, Z+
    827e:	1d 92       	st	X+, r1
    8280:	11 90       	ld	r1, Z+
    8282:	1d 92       	st	X+, r1
    8284:	11 90       	ld	r1, Z+
    8286:	1d 92       	st	X+, r1
    8288:	11 90       	ld	r1, Z+
    828a:	1d 92       	st	X+, r1
    828c:	11 90       	ld	r1, Z+
    828e:	1d 92       	st	X+, r1
    8290:	11 90       	ld	r1, Z+
    8292:	1d 92       	st	X+, r1
    8294:	11 90       	ld	r1, Z+
    8296:	1d 92       	st	X+, r1
    8298:	11 90       	ld	r1, Z+
    829a:	1d 92       	st	X+, r1
    829c:	11 90       	ld	r1, Z+
    829e:	1d 92       	st	X+, r1
    82a0:	11 90       	ld	r1, Z+
    82a2:	1d 92       	st	X+, r1
    82a4:	11 90       	ld	r1, Z+
    82a6:	1d 92       	st	X+, r1
    82a8:	11 90       	ld	r1, Z+
    82aa:	1d 92       	st	X+, r1
    82ac:	11 90       	ld	r1, Z+
    82ae:	1d 92       	st	X+, r1
    82b0:	11 90       	ld	r1, Z+
    82b2:	1d 92       	st	X+, r1
    82b4:	11 90       	ld	r1, Z+
    82b6:	1d 92       	st	X+, r1
    82b8:	11 90       	ld	r1, Z+
    82ba:	1d 92       	st	X+, r1
    82bc:	11 90       	ld	r1, Z+
    82be:	1d 92       	st	X+, r1
    82c0:	11 90       	ld	r1, Z+
    82c2:	1d 92       	st	X+, r1
    82c4:	11 90       	ld	r1, Z+
    82c6:	1d 92       	st	X+, r1
    82c8:	11 90       	ld	r1, Z+
    82ca:	1d 92       	st	X+, r1
    82cc:	11 90       	ld	r1, Z+
    82ce:	1d 92       	st	X+, r1
    82d0:	11 90       	ld	r1, Z+
    82d2:	1d 92       	st	X+, r1
    82d4:	11 90       	ld	r1, Z+
    82d6:	1d 92       	st	X+, r1
    82d8:	11 90       	ld	r1, Z+
    82da:	1d 92       	st	X+, r1
    82dc:	11 90       	ld	r1, Z+
    82de:	1d 92       	st	X+, r1
    82e0:	11 90       	ld	r1, Z+
    82e2:	1d 92       	st	X+, r1
    82e4:	11 90       	ld	r1, Z+
    82e6:	1d 92       	st	X+, r1
    82e8:	11 90       	ld	r1, Z+
    82ea:	1d 92       	st	X+, r1
    82ec:	11 90       	ld	r1, Z+
    82ee:	1d 92       	st	X+, r1
    82f0:	11 90       	ld	r1, Z+
    82f2:	1d 92       	st	X+, r1
    82f4:	11 90       	ld	r1, Z+
    82f6:	1d 92       	st	X+, r1
    82f8:	11 90       	ld	r1, Z+
    82fa:	1d 92       	st	X+, r1
    82fc:	11 90       	ld	r1, Z+
    82fe:	1d 92       	st	X+, r1
    8300:	11 90       	ld	r1, Z+
    8302:	1d 92       	st	X+, r1
    8304:	11 90       	ld	r1, Z+
    8306:	1d 92       	st	X+, r1
    8308:	11 90       	ld	r1, Z+
    830a:	1d 92       	st	X+, r1
    830c:	11 90       	ld	r1, Z+
    830e:	1d 92       	st	X+, r1
    8310:	11 90       	ld	r1, Z+
    8312:	1d 92       	st	X+, r1
    8314:	11 90       	ld	r1, Z+
    8316:	1d 92       	st	X+, r1
    8318:	11 90       	ld	r1, Z+
    831a:	1d 92       	st	X+, r1
    831c:	11 90       	ld	r1, Z+
    831e:	1d 92       	st	X+, r1
    8320:	11 90       	ld	r1, Z+
    8322:	1d 92       	st	X+, r1
    8324:	11 90       	ld	r1, Z+
    8326:	1d 92       	st	X+, r1
    8328:	11 90       	ld	r1, Z+
    832a:	1d 92       	st	X+, r1
    832c:	11 90       	ld	r1, Z+
    832e:	1d 92       	st	X+, r1
    8330:	11 90       	ld	r1, Z+
    8332:	1d 92       	st	X+, r1
    8334:	11 90       	ld	r1, Z+
    8336:	1d 92       	st	X+, r1
    8338:	11 90       	ld	r1, Z+
    833a:	1d 92       	st	X+, r1
    833c:	11 90       	ld	r1, Z+
    833e:	1d 92       	st	X+, r1
    8340:	11 90       	ld	r1, Z+
    8342:	1d 92       	st	X+, r1
    8344:	11 90       	ld	r1, Z+
    8346:	1d 92       	st	X+, r1
    8348:	11 90       	ld	r1, Z+
    834a:	1d 92       	st	X+, r1
    834c:	11 90       	ld	r1, Z+
    834e:	1d 92       	st	X+, r1
    8350:	11 90       	ld	r1, Z+
    8352:	1d 92       	st	X+, r1
    8354:	11 90       	ld	r1, Z+
    8356:	1d 92       	st	X+, r1
    8358:	11 90       	ld	r1, Z+
    835a:	1d 92       	st	X+, r1
	clr r1
    835c:	11 24       	eor	r1, r1
	ret
    835e:	08 95       	ret

00008360 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    8360:	e0 91 d9 0a 	lds	r30, 0x0AD9
	mov   r24,     ZL
    8364:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    8366:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    8368:	e8 0f       	add	r30, r24
	clr   ZH
    836a:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    836c:	e0 57       	subi	r30, 0x70	; 112
	sbci  ZH,      hi8(-(ram_tiles_restore))
    836e:	f5 4f       	sbci	r31, 0xF5	; 245

	lds   r0,      free_tile_index
    8370:	00 90 d8 0a 	lds	r0, 0x0AD8
	sub   r24,     r0
    8374:	80 19       	sub	r24, r0
	brcc  rbg_exit
    8376:	30 f4       	brcc	.+12     	; 0x8384 <rbg_exit>

00008378 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    8378:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    837a:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    837c:	01 90       	ld	r0, Z+
	st    X,       r0
    837e:	0c 92       	st	X, r0
	inc   r24
    8380:	83 95       	inc	r24
	brne  rbg_loop
    8382:	d1 f7       	brne	.-12     	; 0x8378 <rbg_loop>

00008384 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    8384:	08 95       	ret

00008386 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    8386:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    8388:	79 9f       	mul	r23, r25
	mov   XL,      r1
    838a:	a1 2d       	mov	r26, r1
	clr   XH
    838c:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    838e:	a5 52       	subi	r26, 0x25	; 37
	sbci  XH,      hi8(-(sprites_tile_banks))
    8390:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    8392:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    8394:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    8396:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    8398:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    839a:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    839c:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    839e:	89 9f       	mul	r24, r25
	movw  XL,      r0
    83a0:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    83a2:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    83a4:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    83a6:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    83a8:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    83aa:	09 c0       	rjmp	.+18     	; 0x83be <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    83ac:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    83ae:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    83b0:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    83b2:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    83b4:	0a c0       	rjmp	.+20     	; 0x83ca <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    83b6:	17 96       	adiw	r26, 0x07	; 7

000083b8 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    83b8:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    83ba:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    83bc:	08 c0       	rjmp	.+16     	; 0x83ce <x_check_end>

000083be <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    83be:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    83c0:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    83c2:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    83c4:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    83c6:	f8 cf       	rjmp	.-16     	; 0x83b8 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    83c8:	11 97       	sbiw	r26, 0x01	; 1

000083ca <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    83ca:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    83cc:	b9 1f       	adc	r27, r25

000083ce <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    83ce:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    83d0:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    83d2:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    83d4:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    83d6:	09 c0       	rjmp	.+18     	; 0x83ea <y_2nd_tile>

	mul   r22,     r19
    83d8:	63 9f       	mul	r22, r19
	add   XL,      r0
    83da:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    83dc:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83de:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    83e0:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83e2:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    83e4:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    83e6:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    83e8:	08 c0       	rjmp	.+16     	; 0x83fa <y_check_end>

000083ea <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    83ea:	13 2e       	mov	r1, r19
	dec   r1
    83ec:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    83ee:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    83f0:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    83f2:	61 9d       	mul	r22, r1
	add   ZL,      r0
    83f4:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    83f6:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    83f8:	13 2e       	mov	r1, r19

000083fa <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83fa:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    83fc:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    83fe:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    8400:	05 c0       	rjmp	.+10     	; 0x840c <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    8402:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    8404:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    8406:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    8408:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    840a:	04 c0       	rjmp	.+8      	; 0x8414 <x_diff_end>

0000840c <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    840c:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    840e:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    8410:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    8412:	6f ef       	ldi	r22, 0xFF	; 255

00008414 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    8414:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    8416:	04 2e       	mov	r0, r20
	lsr   r20
    8418:	46 95       	lsr	r20
	brcc  x_loop1
    841a:	30 f4       	brcc	.+12     	; 0x8428 <x_loop1>
	breq  x_loopx
    841c:	61 f0       	breq	.+24     	; 0x8436 <x_loopx>

0000841e <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    841e:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    8420:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    8422:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    8424:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    8426:	b7 1f       	adc	r27, r23

00008428 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    8428:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    842a:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    842c:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    842e:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    8430:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    8432:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    8434:	a1 f7       	brne	.-24     	; 0x841e <x_loop0>

00008436 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    8436:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    8438:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    843a:	2c 93       	st	X, r18

	dec   r1
    843c:	1a 94       	dec	r1
	breq  loop_e
    843e:	49 f0       	breq	.+18     	; 0x8452 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    8440:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    8442:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    8444:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    8446:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    8448:	40 2d       	mov	r20, r0
	lsr   r20
    844a:	46 95       	lsr	r20
	brcc  x_loop1
    844c:	68 f7       	brcc	.-38     	; 0x8428 <x_loop1>
	brne  x_loop0
    844e:	39 f7       	brne	.-50     	; 0x841e <x_loop0>
	rjmp  x_loopx
    8450:	f2 cf       	rjmp	.-28     	; 0x8436 <x_loopx>

00008452 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    8452:	08 95       	ret

00008454 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    8454:	0f 92       	push	r0
	push  r1
    8456:	1f 92       	push	r1
	push  ZL
    8458:	ef 93       	push	r30
	push  ZH
    845a:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    845c:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    845e:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    8462:	ff 93       	push	r31

	sbrc  ZL,      2
    8464:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    8466:	04 c0       	rjmp	.+8      	; 0x8470 <__vector_13+0x1c>
	sbrc  ZL,      1
    8468:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    846a:	02 c0       	rjmp	.+4      	; 0x8470 <__vector_13+0x1c>
	nop
    846c:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    846e:	00 c0       	rjmp	.+0      	; 0x8470 <__vector_13+0x1c>
	sbrs  ZL,      0
    8470:	e0 ff       	sbrs	r30, 0
	rjmp  .
    8472:	00 c0       	rjmp	.+0      	; 0x8474 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    8474:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    8478:	ea 95       	dec	r30
	sts sync_pulse,ZL
    847a:	e0 93 eb 0a 	sts	0x0AEB, r30

	;process sync phases
	lds ZH,sync_phase
    847e:	f0 91 ea 0a 	lds	r31, 0x0AEA
	sbrc ZH,0
    8482:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8484:	51 c0       	rjmp	.+162    	; 0x8528 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8486:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    8488:	98 f0       	brcs	.+38     	; 0x84b0 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    848a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    848c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8490:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8492:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    8496:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    8498:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    849a:	26 f4       	brtc	.+8      	; 0x84a4 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    849c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    849e:	0e 94 1b 43 	call	0x8636	; 0x8636 <update_sound>
	rjmp sync_end
    84a2:	b1 c0       	rjmp	.+354    	; 0x8606 <sync_end>

000084a4 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    84a4:	e5 e1       	ldi	r30, 0x15	; 21
    84a6:	ea 95       	dec	r30
    84a8:	f1 f7       	brne	.-4      	; 0x84a6 <sync_pre_eq_no_sound_update+0x2>
    84aa:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    84ac:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    84ae:	ab c0       	rjmp	.+342    	; 0x8606 <sync_end>

000084b0 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    84b0:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    84b2:	08 f1       	brcs	.+66     	; 0x84f6 <sync_post_eq>

	rjmp .
    84b4:	00 c0       	rjmp	.+0      	; 0x84b6 <sync_eq+0x6>
	rjmp .
    84b6:	00 c0       	rjmp	.+0      	; 0x84b8 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84b8:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    84ba:	e0 fb       	bst	r30, 0
	ldi ZL,4
    84bc:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    84be:	16 f4       	brtc	.+4      	; 0x84c4 <sync_eq_skip>
	
	call update_sound
    84c0:	0e 94 1b 43 	call	0x8636	; 0x8636 <update_sound>

000084c4 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    84c4:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    84c6:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    84ca:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    84cc:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    84d0:	9a c0       	rjmp	.+308    	; 0x8606 <sync_end>

000084d2 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    84d2:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    84d4:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    84d8:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    84da:	04 c0       	rjmp	.+8      	; 0x84e4 <__vector_14+0x12>
	sbrc  ZL,      1
    84dc:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    84de:	02 c0       	rjmp	.+4      	; 0x84e4 <__vector_14+0x12>
	nop
    84e0:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    84e2:	00 c0       	rjmp	.+0      	; 0x84e4 <__vector_14+0x12>
	sbrs  ZL,      0
    84e4:	e0 ff       	sbrs	r30, 0
	rjmp  .
    84e6:	00 c0       	rjmp	.+0      	; 0x84e8 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    84e8:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    84ea:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    84ec:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    84ee:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    84f2:	ef 91       	pop	r30
	reti
    84f4:	18 95       	reti

000084f6 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    84f6:	00 c0       	rjmp	.+0      	; 0x84f8 <sync_post_eq+0x2>

	bst ZL,0
    84f8:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84fa:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    84fc:	26 f4       	brtc	.+8      	; 0x8506 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    84fe:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8500:	0e 94 1b 43 	call	0x8636	; 0x8636 <update_sound>
	rjmp sync_pre_eq_cont
    8504:	05 c0       	rjmp	.+10     	; 0x8510 <sync_pre_eq_cont>

00008506 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    8506:	e5 e1       	ldi	r30, 0x15	; 21
    8508:	ea 95       	dec	r30
    850a:	f1 f7       	brne	.-4      	; 0x8508 <sync_post_eq_no_sound_update+0x2>
    850c:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    850e:	28 9a       	sbi	0x05, 0	; 5

00008510 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    8510:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    8514:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    8516:	09 f0       	breq	.+2      	; 0x851a <sync_pre_eq_cont+0xa>
	rjmp sync_end
    8518:	76 c0       	rjmp	.+236    	; 0x8606 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    851a:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    851c:	e0 93 eb 0a 	sts	0x0AEB, r30
	ldi ZL,1
    8520:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    8522:	e0 93 ea 0a 	sts	0x0AEA, r30
	
	rjmp sync_end
    8526:	6f c0       	rjmp	.+222    	; 0x8606 <sync_end>

00008528 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    8528:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    852a:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    852e:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    8530:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    8534:	00 c0       	rjmp	.+0      	; 0x8536 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8536:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    8538:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    853a:	00 c0       	rjmp	.+0      	; 0x853c <sync_hsync+0x14>
	call update_sound
    853c:	0e 94 1b 43 	call	0x8636	; 0x8636 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8540:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8542:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    8546:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    8548:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cp ZL,ZH
    854c:	ef 17       	cp	r30, r31
	brsh no_render
    854e:	d0 f4       	brcc	.+52     	; 0x8584 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8550:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8552:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    8556:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    8558:	00 90 f2 0a 	lds	r0, 0x0AF2
	sub ZH,r0			
    855c:	f0 19       	sub	r31, r0
	cp ZL,ZH
    855e:	ef 17       	cp	r30, r31
	brlo no_render
    8560:	88 f0       	brcs	.+34     	; 0x8584 <no_render>

	;push r1-r29
	ldi ZL,29
    8562:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8564:	ff 27       	eor	r31, r31

00008566 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    8566:	00 80       	ld	r0, Z
	push r0
    8568:	0f 92       	push	r0
	dec ZL
    856a:	ea 95       	dec	r30
	brne push_loop	
    856c:	e1 f7       	brne	.-8      	; 0x8566 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    856e:	06 e0       	ldi	r16, 0x06	; 6
    8570:	0a 95       	dec	r16
    8572:	f1 f7       	brne	.-4      	; 0x8570 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8574:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    8578:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    857a:	ff 27       	eor	r31, r31

0000857c <pop_loop>:
pop_loop:
	pop r0
    857c:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    857e:	01 92       	st	Z+, r0
	cpi ZL,30
    8580:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8582:	e0 f3       	brcs	.-8      	; 0x857c <pop_loop>

00008584 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8584:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    8588:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    858a:	09 f0       	breq	.+2      	; 0x858e <no_render+0xa>
	rjmp sync_end
    858c:	3c c0       	rjmp	.+120    	; 0x8606 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    858e:	2f 93       	push	r18
	push r19
    8590:	3f 93       	push	r19
	push r20
    8592:	4f 93       	push	r20
	push r21
    8594:	5f 93       	push	r21
	push r22
    8596:	6f 93       	push	r22
	push r23
    8598:	7f 93       	push	r23
	push r24
    859a:	8f 93       	push	r24
	push r25
    859c:	9f 93       	push	r25
	push r26
    859e:	af 93       	push	r26
	push r27
    85a0:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    85a2:	78 94       	sei
	clr r1
    85a4:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    85a6:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    85a8:	e0 93 ea 0a 	sts	0x0AEA, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    85ac:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    85ae:	e0 93 eb 0a 	sts	0x0AEB, r30



	;increment the vsync counter
	lds r24,vsync_counter
    85b2:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,vsync_counter+1
    85b6:	90 91 fc 0a 	lds	r25, 0x0AFC
	adiw r24,1
    85ba:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    85bc:	80 93 fb 0a 	sts	0x0AFB, r24
	sts vsync_counter+1,r25
    85c0:	90 93 fc 0a 	sts	0x0AFC, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    85c4:	e0 91 ed 0a 	lds	r30, 0x0AED
	lds ZH,pre_vsync_user_callback+1
    85c8:	f0 91 ee 0a 	lds	r31, 0x0AEE
	cp  ZL,r1
    85cc:	e1 15       	cp	r30, r1
	cpc ZH,r1
    85ce:	f1 05       	cpc	r31, r1
	breq .+2 
    85d0:	09 f0       	breq	.+2      	; 0x85d4 <no_render+0x50>
	icall
    85d2:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    85d4:	0e 94 be 44 	call	0x897c	; 0x897c <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    85d8:	0e 94 06 53 	call	0xa60c	; 0xa60c <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    85dc:	0e 94 15 43 	call	0x862a	; 0x862a <process_music>
	clr r1
    85e0:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    85e2:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,post_vsync_user_callback+1
    85e6:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    85ea:	e1 15       	cp	r30, r1
	cpc ZH,r1
    85ec:	f1 05       	cpc	r31, r1
	breq .+2 
    85ee:	09 f0       	breq	.+2      	; 0x85f2 <no_render+0x6e>
	icall
    85f0:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    85f2:	bf 91       	pop	r27
	pop r26
    85f4:	af 91       	pop	r26
	pop r25
    85f6:	9f 91       	pop	r25
	pop r24
    85f8:	8f 91       	pop	r24
	pop r23
    85fa:	7f 91       	pop	r23
	pop r22
    85fc:	6f 91       	pop	r22
	pop r21
    85fe:	5f 91       	pop	r21
	pop r20
    8600:	4f 91       	pop	r20
	pop r19
    8602:	3f 91       	pop	r19
	pop r18
    8604:	2f 91       	pop	r18

00008606 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8606:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    8608:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    860a:	ff 91       	pop	r31
	pop ZL
    860c:	ef 91       	pop	r30
	pop r1
    860e:	1f 90       	pop	r1
	pop r0
    8610:	0f 90       	pop	r0
	reti
    8612:	18 95       	reti

00008614 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8614:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8616:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8618:	00 c0       	rjmp	.+0      	; 0x861a <hsync_pulse+0x6>
	call update_sound
    861a:	0e 94 1b 43 	call	0x8636	; 0x8636 <update_sound>

	lds ZL,sync_pulse
    861e:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    8622:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8624:	e0 93 eb 0a 	sts	0x0AEB, r30

	ret
    8628:	08 95       	ret

0000862a <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    862a:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    862e:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8630:	0e 94 e0 47 	call	0x8fc0	; 0x8fc0 <ProcessMusic>
#endif

	ret
    8634:	08 95       	ret

00008636 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    8636:	0f 93       	push	r16
	push r17
    8638:	1f 93       	push	r17
	push r18
    863a:	2f 93       	push	r18
	push r28
    863c:	cf 93       	push	r28
	push r29
    863e:	df 93       	push	r29

	mov r18,ZL
    8640:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8642:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    8646:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    864a:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    864c:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    8650:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    8654:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    8658:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    865a:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    865c:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    8660:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    8664:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    8668:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    866a:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    866c:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    866e:	d0 2d       	mov	r29, r0
	nop
    8670:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8672:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    8676:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    867a:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    867c:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    8680:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    8684:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    8688:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    868a:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    868c:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    8690:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    8694:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8698:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    869a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    869c:	20 ff       	sbrs	r18, 0
	rjmp .
    869e:	00 c0       	rjmp	.+0      	; 0x86a0 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    86a0:	01 03       	mulsu	r16, r17
	clr r0
    86a2:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    86a4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    86a6:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    86a8:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    86aa:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    86ae:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    86b2:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    86b4:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    86b8:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    86bc:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    86c0:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    86c2:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    86c4:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    86c8:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    86cc:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    86d0:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    86d2:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    86d4:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    86d6:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    86d8:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    86dc:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    86e0:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    86e4:	ea 95       	dec	r30
	brpl ch4_no_shift	
    86e6:	92 f4       	brpl	.+36     	; 0x870c <ch4_no_shift>

	lds ZH,tr4_params
    86e8:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    86ec:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    86ee:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    86f0:	00 2e       	mov	r0, r16
	lsr r0
    86f2:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    86f4:	00 26       	eor	r0, r16
	bst r0,0
    86f6:	00 fa       	bst	r0, 0
	lsr r17
    86f8:	16 95       	lsr	r17
	ror r16
    86fa:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    86fc:	16 f9       	bld	r17, 6
	sbrs ZH,0
    86fe:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8700:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8702:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8706:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    870a:	03 c0       	rjmp	.+6      	; 0x8712 <ch4_end>

0000870c <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    870c:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    870e:	1a 95       	dec	r17
	brne .-4
    8710:	f1 f7       	brne	.-4      	; 0x870e <ch4_no_shift+0x2>

00008712 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8712:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8716:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8718:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    871a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    871c:	21 ff       	sbrs	r18, 1
	rjmp .
    871e:	00 c0       	rjmp	.+0      	; 0x8720 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8720:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8722:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8724:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    8728:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    872a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    872c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    872e:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8730:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8734:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    8738:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    873a:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    873e:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    8742:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    8746:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    8748:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    874c:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    874e:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8750:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8752:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    8756:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    875a:	00 19       	sub	r16, r0
	sbc r17,r1
    875c:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    875e:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    8762:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    8766:	e0 15       	cp	r30, r0
	cpc ZH,r1
    8768:	f1 05       	cpc	r31, r1
	brlo .+2
    876a:	08 f0       	brcs	.+2      	; 0x876e <ch4_end+0x5c>
	movw ZL,r16
    876c:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    876e:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    8772:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    8776:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    8778:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    877c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    877e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8780:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8782:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8784:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    8786:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    8788:	d0 05       	cpc	r29, r0
	brlt .+2
    878a:	0c f0       	brlt	.+2      	; 0x878e <ch4_end+0x7c>
	ldi r28,127
    878c:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    878e:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8790:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8792:	d0 05       	cpc	r29, r0
	brge .+2
    8794:	0c f4       	brge	.+2      	; 0x8798 <ch4_end+0x86>
	ldi r28,-128
    8796:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    8798:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    879a:	c0 93 b3 00 	sts	0x00B3, r28

0000879e <update_sound_end>:
#endif


update_sound_end:

	pop r29
    879e:	df 91       	pop	r29
	pop r28
    87a0:	cf 91       	pop	r28
	pop r18
    87a2:	2f 91       	pop	r18
	pop r17
    87a4:	1f 91       	pop	r17
	pop r16
    87a6:	0f 91       	pop	r16
	
	ret
    87a8:	08 95       	ret

000087aa <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    87aa:	80 93 db 0a 	sts	0x0ADB, r24
	sts sprites_tile_banks+1,r25
    87ae:	90 93 dc 0a 	sts	0x0ADC, r25
	ret
    87b2:	08 95       	ret

000087b4 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    87b4:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    87b6:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    87b8:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    87ba:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    87bc:	68 e1       	ldi	r22, 0x18	; 24

000087be <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    87be:	6d 93       	st	X+, r22
	sbiw r30,1
    87c0:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    87c2:	e9 f7       	brne	.-6      	; 0x87be <fill_vram_loop>

	clr r1
    87c4:	11 24       	eor	r1, r1

	ret
    87c6:	08 95       	ret

000087c8 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    87c8:	50 91 e5 0a 	lds	r21, 0x0AE5
	add r20,21
    87cc:	45 0f       	add	r20, r21
	rjmp SetTile	
    87ce:	00 c0       	rjmp	.+0      	; 0x87d0 <SetTile>

000087d0 <SetTile>:

	ret

#else

	clr r25
    87d0:	99 27       	eor	r25, r25
	clr r23	
    87d2:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    87d4:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    87d6:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    87d8:	08 0e       	add	r0, r24
	adc r1,r25
    87da:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    87dc:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    87de:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    87e0:	a0 0d       	add	r26, r0
	adc XH,r1
    87e2:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    87e4:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    87e6:	4c 93       	st	X, r20

	clr r1
    87e8:	11 24       	eor	r1, r1

	ret
    87ea:	08 95       	ret

000087ec <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    87ec:	80 93 e5 0a 	sts	0x0AE5, r24
	ret
    87f0:	08 95       	ret

000087f2 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    87f2:	80 93 e3 0a 	sts	0x0AE3, r24
	sts tile_table_hi,r25	
    87f6:	90 93 e4 0a 	sts	0x0AE4, r25
	ret
    87fa:	08 95       	ret

000087fc <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    87fc:	80 91 ec 0a 	lds	r24, 0x0AEC
	andi r24,SYNC_FLAG_VSYNC
    8800:	81 70       	andi	r24, 0x01	; 1
	ret
    8802:	08 95       	ret

00008804 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8804:	20 91 ec 0a 	lds	r18, 0x0AEC
	andi r18,~SYNC_FLAG_VSYNC
    8808:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    880a:	20 93 ec 0a 	sts	0x0AEC, r18
	ret
    880e:	08 95       	ret

00008810 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8810:	88 23       	and	r24, r24
	brne rj_p2
    8812:	29 f4       	brne	.+10     	; 0x881e <rj_p2>
		
	lds r24,joypad1_status_lo
    8814:	80 91 f3 0a 	lds	r24, 0x0AF3
	lds r25,joypad1_status_lo+1
    8818:	90 91 f4 0a 	lds	r25, 0x0AF4
	ret
    881c:	08 95       	ret

0000881e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    881e:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad2_status_lo+1	
    8822:	90 91 f8 0a 	lds	r25, 0x0AF8

	ret
    8826:	08 95       	ret

00008828 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    8828:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    882a:	7a 95       	dec	r23
	brne .-4 ;~1 us
    882c:	f1 f7       	brne	.-4      	; 0x882a <WaitUs+0x2>
	nop
    882e:	00 00       	nop
	sbiw r24,1
    8830:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8832:	d1 f7       	brne	.-12     	; 0x8828 <WaitUs>

	ret
    8834:	08 95       	ret

00008836 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8836:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    8838:	fe cf       	rjmp	.-4      	; 0x8836 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    883a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    883c:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    883e:	60 bd       	out	0x20, r22	; 32
   cli
    8840:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8842:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8844:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    8846:	78 94       	sei
   ret
    8848:	08 95       	ret

0000884a <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    884a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    884c:	fe cf       	rjmp	.-4      	; 0x884a <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    884e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8850:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8852:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8854:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    8856:	80 b5       	in	r24, 0x20	; 32
   sei
    8858:	78 94       	sei
   ret
    885a:	08 95       	ret

0000885c <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    885c:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    885e:	80 93 eb 0a 	sts	0x0AEB, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8862:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    8866:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    886a:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    886e:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8872:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    8876:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    887a:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    887e:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8882:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8884:	80 93 81 00 	sts	0x0081, r24

		cli
    8888:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    888a:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    888c:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8890:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8892:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    8896:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    8898:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    889c:	90 93 60 00 	sts	0x0060, r25
	
		sei
    88a0:	78 94       	sei

000088a2 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    88a2:	80 91 eb 0a 	lds	r24, 0x0AEB
		cpi r24,8
    88a6:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    88a8:	e0 f3       	brcs	.-8      	; 0x88a2 <wait>

		ret
    88aa:	08 95       	ret

000088ac <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    88ac:	80 91 fd 0a 	lds	r24, 0x0AFD
		lds r25,random_value+1
    88b0:	90 91 fe 0a 	lds	r25, 0x0AFE
		ret
    88b4:	08 95       	ret

000088b6 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    88b6:	0f 93       	push	r16
		push r17
    88b8:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    88ba:	0f b7       	in	r16, 0x3f	; 63
		push r16
    88bc:	0f 93       	push	r16

		lds r16,sync_pulse
    88be:	00 91 eb 0a 	lds	r16, 0x0AEB
		inc r16
    88c2:	03 95       	inc	r16
		sts sync_pulse,r16
    88c4:	00 93 eb 0a 	sts	0x0AEB, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    88c8:	00 fd       	sbrc	r16, 0
		rjmp 1f
    88ca:	08 c0       	rjmp	.+16     	; 0x88dc <__vector_8+0x26>
		lds r17,random_value
    88cc:	10 91 fd 0a 	lds	r17, 0x0AFD
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    88d0:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    88d4:	10 27       	eor	r17, r16
		sts random_value,r17
    88d6:	10 93 fd 0a 	sts	0x0AFD, r17
		rjmp 2f
    88da:	07 c0       	rjmp	.+14     	; 0x88ea <__vector_8+0x34>
	1:
		lds r17,random_value+1
    88dc:	10 91 fe 0a 	lds	r17, 0x0AFE
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    88e0:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    88e4:	10 27       	eor	r17, r16
		sts random_value+1,r17
    88e6:	10 93 fe 0a 	sts	0x0AFE, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    88ea:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    88ec:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    88f0:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    88f2:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    88f4:	1f 91       	pop	r17
		pop r16
    88f6:	0f 91       	pop	r16
		reti
    88f8:	18 95       	reti

000088fa <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    88fa:	98 e0       	ldi	r25, 0x08	; 8
    88fc:	88 e1       	ldi	r24, 0x18	; 24
    88fe:	0f b6       	in	r0, 0x3f	; 63
    8900:	f8 94       	cli
    8902:	a8 95       	wdr
    8904:	80 93 60 00 	sts	0x0060, r24
    8908:	0f be       	out	0x3f, r0	; 63
    890a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    890e:	ff cf       	rjmp	.-2      	; 0x890e <SoftReset+0x14>

00008910 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8910:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8912:	c8 95       	lpm
    8914:	c8 95       	lpm
		Wait200ns();
    8916:	c8 95       	lpm
    8918:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    891a:	12 98       	cbi	0x02, 2	; 2
    891c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    891e:	80 e0       	ldi	r24, 0x00	; 0
    8920:	90 e0       	ldi	r25, 0x00	; 0
    8922:	20 e0       	ldi	r18, 0x00	; 0
    8924:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    8926:	36 95       	lsr	r19
    8928:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    892a:	96 95       	lsr	r25
    892c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    892e:	c8 95       	lpm
    8930:	c8 95       	lpm
			Wait200ns();
    8932:	c8 95       	lpm
    8934:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    8936:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    8938:	00 9b       	sbis	0x00, 0	; 0
    893a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    893c:	01 9b       	sbis	0x00, 1	; 0
    893e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8940:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8942:	c8 95       	lpm
    8944:	c8 95       	lpm
			Wait200ns();
    8946:	c8 95       	lpm
    8948:	c8 95       	lpm
    894a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    894c:	61 f7       	brne	.-40     	; 0x8926 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    894e:	30 93 f4 0a 	sts	0x0AF4, r19
    8952:	20 93 f3 0a 	sts	0x0AF3, r18
		joypad2_status_lo=p2ButtonsLo;
    8956:	90 93 f8 0a 	sts	0x0AF8, r25
    895a:	80 93 f7 0a 	sts	0x0AF7, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    895e:	80 91 f3 0a 	lds	r24, 0x0AF3
    8962:	90 91 f4 0a 	lds	r25, 0x0AF4
    8966:	0f 97       	sbiw	r24, 0x0f	; 15
    8968:	31 f0       	breq	.+12     	; 0x8976 <ReadButtons+0x66>
    896a:	80 91 f7 0a 	lds	r24, 0x0AF7
    896e:	90 91 f8 0a 	lds	r25, 0x0AF8
    8972:	0f 97       	sbiw	r24, 0x0f	; 15
    8974:	11 f4       	brne	.+4      	; 0x897a <ReadButtons+0x6a>
		SoftReset();
    8976:	0e 94 7d 44 	call	0x88fa	; 0x88fa <SoftReset>
    897a:	08 95       	ret

0000897c <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    897c:	10 92 37 0b 	sts	0x0B37, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8980:	00 99       	sbic	0x00, 0	; 0
    8982:	03 c0       	rjmp	.+6      	; 0x898a <ReadControllers+0xe>
    8984:	81 e0       	ldi	r24, 0x01	; 1
    8986:	80 93 37 0b 	sts	0x0B37, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    898a:	01 99       	sbic	0x00, 1	; 0
    898c:	05 c0       	rjmp	.+10     	; 0x8998 <ReadControllers+0x1c>
    898e:	80 91 37 0b 	lds	r24, 0x0B37
    8992:	82 60       	ori	r24, 0x02	; 2
    8994:	80 93 37 0b 	sts	0x0B37, r24
			
	//read the standard buttons
	ReadButtons();
    8998:	0c 94 88 44 	jmp	0x8910	; 0x8910 <ReadButtons>

0000899c <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    899c:	cf 93       	push	r28
    899e:	df 93       	push	r29
    89a0:	c0 e0       	ldi	r28, 0x00	; 0
    89a2:	d0 e0       	ldi	r29, 0x00	; 0
    89a4:	fe 01       	movw	r30, r28
    89a6:	e2 56       	subi	r30, 0x62	; 98
    89a8:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    89aa:	64 91       	lpm	r22, Z
    89ac:	ce 01       	movw	r24, r28
    89ae:	0e 94 1b 44 	call	0x8836	; 0x8836 <WriteEeprom>
    89b2:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    89b4:	c0 32       	cpi	r28, 0x20	; 32
    89b6:	d1 05       	cpc	r29, r1
    89b8:	a9 f7       	brne	.-22     	; 0x89a4 <FormatEeprom+0x8>
    89ba:	c0 e2       	ldi	r28, 0x20	; 32
    89bc:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    89be:	6f ef       	ldi	r22, 0xFF	; 255
    89c0:	ce 01       	movw	r24, r28
    89c2:	0e 94 1b 44 	call	0x8836	; 0x8836 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    89c6:	6f ef       	ldi	r22, 0xFF	; 255
    89c8:	ce 01       	movw	r24, r28
    89ca:	01 96       	adiw	r24, 0x01	; 1
    89cc:	0e 94 1b 44 	call	0x8836	; 0x8836 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    89d0:	a0 96       	adiw	r28, 0x20	; 32
    89d2:	c1 15       	cp	r28, r1
    89d4:	88 e0       	ldi	r24, 0x08	; 8
    89d6:	d8 07       	cpc	r29, r24
    89d8:	91 f7       	brne	.-28     	; 0x89be <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    89da:	df 91       	pop	r29
    89dc:	cf 91       	pop	r28
    89de:	08 95       	ret

000089e0 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    89e0:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    89e2:	80 e0       	ldi	r24, 0x00	; 0
    89e4:	90 e0       	ldi	r25, 0x00	; 0
    89e6:	0e 94 25 44 	call	0x884a	; 0x884a <ReadEeprom>
    89ea:	c8 2f       	mov	r28, r24
    89ec:	81 e0       	ldi	r24, 0x01	; 1
    89ee:	90 e0       	ldi	r25, 0x00	; 0
    89f0:	0e 94 25 44 	call	0x884a	; 0x884a <ReadEeprom>
    89f4:	28 2f       	mov	r18, r24
    89f6:	30 e0       	ldi	r19, 0x00	; 0
    89f8:	32 2f       	mov	r19, r18
    89fa:	22 27       	eor	r18, r18
    89fc:	2c 0f       	add	r18, r28
    89fe:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8a00:	81 e0       	ldi	r24, 0x01	; 1
    8a02:	2a 35       	cpi	r18, 0x5A	; 90
    8a04:	35 45       	sbci	r19, 0x55	; 85
    8a06:	09 f0       	breq	.+2      	; 0x8a0a <isEepromFormatted+0x2a>
    8a08:	80 e0       	ldi	r24, 0x00	; 0
}
    8a0a:	cf 91       	pop	r28
    8a0c:	08 95       	ret

00008a0e <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8a0e:	8f 92       	push	r8
    8a10:	9f 92       	push	r9
    8a12:	af 92       	push	r10
    8a14:	bf 92       	push	r11
    8a16:	cf 92       	push	r12
    8a18:	df 92       	push	r13
    8a1a:	ef 92       	push	r14
    8a1c:	ff 92       	push	r15
    8a1e:	0f 93       	push	r16
    8a20:	1f 93       	push	r17
    8a22:	cf 93       	push	r28
    8a24:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    8a26:	fb 01       	movw	r30, r22
    8a28:	11 82       	std	Z+1, r1	; 0x01
    8a2a:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8a2c:	8f 3f       	cpi	r24, 0xFF	; 255
    8a2e:	ff ef       	ldi	r31, 0xFF	; 255
    8a30:	9f 07       	cpc	r25, r31
    8a32:	89 f1       	breq	.+98     	; 0x8a96 <EepromBlockExists+0x88>
    8a34:	6a 01       	movw	r12, r20
    8a36:	8b 01       	movw	r16, r22
    8a38:	7c 01       	movw	r14, r24
    8a3a:	a1 2c       	mov	r10, r1
    8a3c:	b1 2c       	mov	r11, r1
    8a3e:	c0 e0       	ldi	r28, 0x00	; 0
    8a40:	d3 e0       	ldi	r29, 0x03	; 3
    8a42:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8a44:	c5 01       	movw	r24, r10
    8a46:	0e 94 25 44 	call	0x884a	; 0x884a <ReadEeprom>
    8a4a:	88 2e       	mov	r8, r24
    8a4c:	c5 01       	movw	r24, r10
    8a4e:	01 96       	adiw	r24, 0x01	; 1
    8a50:	0e 94 25 44 	call	0x884a	; 0x884a <ReadEeprom>
    8a54:	28 2f       	mov	r18, r24
    8a56:	30 e0       	ldi	r19, 0x00	; 0
    8a58:	32 2f       	mov	r19, r18
    8a5a:	22 27       	eor	r18, r18
    8a5c:	28 0d       	add	r18, r8
    8a5e:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8a60:	2e 15       	cp	r18, r14
    8a62:	3f 05       	cpc	r19, r15
    8a64:	29 f4       	brne	.+10     	; 0x8a70 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    8a66:	f8 01       	movw	r30, r16
    8a68:	b1 82       	std	Z+1, r11	; 0x01
    8a6a:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8a6c:	d0 e0       	ldi	r29, 0x00	; 0
    8a6e:	0b c0       	rjmp	.+22     	; 0x8a86 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8a70:	2f 3f       	cpi	r18, 0xFF	; 255
    8a72:	3f 4f       	sbci	r19, 0xFF	; 255
    8a74:	41 f4       	brne	.+16     	; 0x8a86 <EepromBlockExists+0x78>
    8a76:	91 10       	cpse	r9, r1
    8a78:	06 c0       	rjmp	.+12     	; 0x8a86 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8a7a:	c1 14       	cp	r12, r1
    8a7c:	d1 04       	cpc	r13, r1
    8a7e:	11 f0       	breq	.+4      	; 0x8a84 <EepromBlockExists+0x76>
    8a80:	f6 01       	movw	r30, r12
    8a82:	c0 83       	st	Z, r28
    8a84:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    8a86:	cf 5f       	subi	r28, 0xFF	; 255
    8a88:	f0 e2       	ldi	r31, 0x20	; 32
    8a8a:	af 0e       	add	r10, r31
    8a8c:	b1 1c       	adc	r11, r1
    8a8e:	c0 34       	cpi	r28, 0x40	; 64
    8a90:	c9 f6       	brne	.-78     	; 0x8a44 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8a92:	8d 2f       	mov	r24, r29
    8a94:	01 c0       	rjmp	.+2      	; 0x8a98 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8a96:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    8a98:	df 91       	pop	r29
    8a9a:	cf 91       	pop	r28
    8a9c:	1f 91       	pop	r17
    8a9e:	0f 91       	pop	r16
    8aa0:	ff 90       	pop	r15
    8aa2:	ef 90       	pop	r14
    8aa4:	df 90       	pop	r13
    8aa6:	cf 90       	pop	r12
    8aa8:	bf 90       	pop	r11
    8aaa:	af 90       	pop	r10
    8aac:	9f 90       	pop	r9
    8aae:	8f 90       	pop	r8
    8ab0:	08 95       	ret

00008ab2 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8ab2:	ef 92       	push	r14
    8ab4:	ff 92       	push	r15
    8ab6:	0f 93       	push	r16
    8ab8:	1f 93       	push	r17
    8aba:	cf 93       	push	r28
    8abc:	df 93       	push	r29
    8abe:	00 d0       	rcall	.+0      	; 0x8ac0 <EepromWriteBlock+0xe>
    8ac0:	1f 92       	push	r1
    8ac2:	cd b7       	in	r28, 0x3d	; 61
    8ac4:	de b7       	in	r29, 0x3e	; 62
    8ac6:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8ac8:	1a 82       	std	Y+2, r1	; 0x02
    8aca:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8acc:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8ace:	ae 01       	movw	r20, r28
    8ad0:	4d 5f       	subi	r20, 0xFD	; 253
    8ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    8ad4:	be 01       	movw	r22, r28
    8ad6:	6f 5f       	subi	r22, 0xFF	; 255
    8ad8:	7f 4f       	sbci	r23, 0xFF	; 255
    8ada:	fc 01       	movw	r30, r24
    8adc:	80 81       	ld	r24, Z
    8ade:	91 81       	ldd	r25, Z+1	; 0x01
    8ae0:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8ae4:	88 23       	and	r24, r24
    8ae6:	11 f0       	breq	.+4      	; 0x8aec <EepromWriteBlock+0x3a>
    8ae8:	83 30       	cpi	r24, 0x03	; 3
    8aea:	19 f5       	brne	.+70     	; 0x8b32 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8aec:	89 81       	ldd	r24, Y+1	; 0x01
    8aee:	9a 81       	ldd	r25, Y+2	; 0x02
    8af0:	89 2b       	or	r24, r25
    8af2:	49 f4       	brne	.+18     	; 0x8b06 <EepromWriteBlock+0x54>
    8af4:	8b 81       	ldd	r24, Y+3	; 0x03
    8af6:	88 23       	and	r24, r24
    8af8:	d9 f0       	breq	.+54     	; 0x8b30 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8afa:	f0 e2       	ldi	r31, 0x20	; 32
    8afc:	8f 9f       	mul	r24, r31
    8afe:	c0 01       	movw	r24, r0
    8b00:	11 24       	eor	r1, r1
    8b02:	9a 83       	std	Y+2, r25	; 0x02
    8b04:	89 83       	std	Y+1, r24	; 0x01
    8b06:	78 01       	movw	r14, r16
    8b08:	20 e2       	ldi	r18, 0x20	; 32
    8b0a:	e2 0e       	add	r14, r18
    8b0c:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8b0e:	f8 01       	movw	r30, r16
    8b10:	61 91       	ld	r22, Z+
    8b12:	8f 01       	movw	r16, r30
    8b14:	89 81       	ldd	r24, Y+1	; 0x01
    8b16:	9a 81       	ldd	r25, Y+2	; 0x02
    8b18:	9c 01       	movw	r18, r24
    8b1a:	2f 5f       	subi	r18, 0xFF	; 255
    8b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b1e:	3a 83       	std	Y+2, r19	; 0x02
    8b20:	29 83       	std	Y+1, r18	; 0x01
    8b22:	0e 94 1b 44 	call	0x8836	; 0x8836 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8b26:	0e 15       	cp	r16, r14
    8b28:	1f 05       	cpc	r17, r15
    8b2a:	89 f7       	brne	.-30     	; 0x8b0e <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8b2c:	80 e0       	ldi	r24, 0x00	; 0
    8b2e:	01 c0       	rjmp	.+2      	; 0x8b32 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8b30:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8b32:	0f 90       	pop	r0
    8b34:	0f 90       	pop	r0
    8b36:	0f 90       	pop	r0
    8b38:	df 91       	pop	r29
    8b3a:	cf 91       	pop	r28
    8b3c:	1f 91       	pop	r17
    8b3e:	0f 91       	pop	r16
    8b40:	ff 90       	pop	r15
    8b42:	ef 90       	pop	r14
    8b44:	08 95       	ret

00008b46 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    8b46:	cf 92       	push	r12
    8b48:	df 92       	push	r13
    8b4a:	ff 92       	push	r15
    8b4c:	0f 93       	push	r16
    8b4e:	1f 93       	push	r17
    8b50:	cf 93       	push	r28
    8b52:	df 93       	push	r29
    8b54:	00 d0       	rcall	.+0      	; 0x8b56 <EepromReadBlock+0x10>
    8b56:	cd b7       	in	r28, 0x3d	; 61
    8b58:	de b7       	in	r29, 0x3e	; 62
    8b5a:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8b5c:	40 e0       	ldi	r20, 0x00	; 0
    8b5e:	50 e0       	ldi	r21, 0x00	; 0
    8b60:	be 01       	movw	r22, r28
    8b62:	6f 5f       	subi	r22, 0xFF	; 255
    8b64:	7f 4f       	sbci	r23, 0xFF	; 255
    8b66:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <EepromBlockExists>
    8b6a:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8b6c:	81 11       	cpse	r24, r1
    8b6e:	13 c0       	rjmp	.+38     	; 0x8b96 <EepromReadBlock+0x50>
    8b70:	68 01       	movw	r12, r16
    8b72:	80 e2       	ldi	r24, 0x20	; 32
    8b74:	c8 0e       	add	r12, r24
    8b76:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8b78:	89 81       	ldd	r24, Y+1	; 0x01
    8b7a:	9a 81       	ldd	r25, Y+2	; 0x02
    8b7c:	9c 01       	movw	r18, r24
    8b7e:	2f 5f       	subi	r18, 0xFF	; 255
    8b80:	3f 4f       	sbci	r19, 0xFF	; 255
    8b82:	3a 83       	std	Y+2, r19	; 0x02
    8b84:	29 83       	std	Y+1, r18	; 0x01
    8b86:	0e 94 25 44 	call	0x884a	; 0x884a <ReadEeprom>
    8b8a:	f8 01       	movw	r30, r16
    8b8c:	81 93       	st	Z+, r24
    8b8e:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8b90:	ec 15       	cp	r30, r12
    8b92:	fd 05       	cpc	r31, r13
    8b94:	89 f7       	brne	.-30     	; 0x8b78 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8b96:	8f 2d       	mov	r24, r15
    8b98:	0f 90       	pop	r0
    8b9a:	0f 90       	pop	r0
    8b9c:	df 91       	pop	r29
    8b9e:	cf 91       	pop	r28
    8ba0:	1f 91       	pop	r17
    8ba2:	0f 91       	pop	r16
    8ba4:	ff 90       	pop	r15
    8ba6:	df 90       	pop	r13
    8ba8:	cf 90       	pop	r12
    8baa:	08 95       	ret

00008bac <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8bac:	fc 01       	movw	r30, r24
    8bae:	67 87       	std	Z+15, r22	; 0x0f
    8bb0:	08 95       	ret

00008bb2 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8bb2:	e2 e0       	ldi	r30, 0x02	; 2
    8bb4:	fb e0       	ldi	r31, 0x0B	; 11
    8bb6:	81 e0       	ldi	r24, 0x01	; 1
    8bb8:	91 e0       	ldi	r25, 0x01	; 1
    8bba:	95 8b       	std	Z+21, r25	; 0x15
    8bbc:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8bbe:	63 8b       	std	Z+19, r22	; 0x13
    8bc0:	08 95       	ret

00008bc2 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8bc2:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8bc4:	90 81       	ld	r25, Z
    8bc6:	9f 75       	andi	r25, 0x5F	; 95
    8bc8:	90 83       	st	Z, r25
    8bca:	08 95       	ret

00008bcc <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8bcc:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8bce:	90 81       	ld	r25, Z
    8bd0:	90 64       	ori	r25, 0x40	; 64
    8bd2:	90 83       	st	Z, r25
    8bd4:	08 95       	ret

00008bd6 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8bd6:	fc 01       	movw	r30, r24
    8bd8:	66 87       	std	Z+14, r22	; 0x0e
    8bda:	08 95       	ret

00008bdc <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8bdc:	fc 01       	movw	r30, r24
    8bde:	62 87       	std	Z+10, r22	; 0x0a
    8be0:	08 95       	ret

00008be2 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8be2:	fc 01       	movw	r30, r24
    8be4:	63 87       	std	Z+11, r22	; 0x0b
    8be6:	08 95       	ret

00008be8 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8be8:	cf 93       	push	r28
    8bea:	df 93       	push	r29
    8bec:	ec 01       	movw	r28, r24
    8bee:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8bf0:	29 81       	ldd	r18, Y+1	; 0x01
    8bf2:	30 e0       	ldi	r19, 0x00	; 0
    8bf4:	f9 01       	movw	r30, r18
    8bf6:	ee 0f       	add	r30, r30
    8bf8:	ff 1f       	adc	r31, r31
    8bfa:	e8 5f       	subi	r30, 0xF8	; 248
    8bfc:	fa 46       	sbci	r31, 0x6A	; 106
    8bfe:	65 91       	lpm	r22, Z+
    8c00:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8c02:	f9 01       	movw	r30, r18
    8c04:	e4 0f       	add	r30, r20
    8c06:	f1 1d       	adc	r31, r1
    8c08:	47 fd       	sbrc	r20, 7
    8c0a:	fa 95       	dec	r31
    8c0c:	ee 0f       	add	r30, r30
    8c0e:	ff 1f       	adc	r31, r31
    8c10:	e8 5f       	subi	r30, 0xF8	; 248
    8c12:	fa 46       	sbci	r31, 0x6A	; 106
    8c14:	85 91       	lpm	r24, Z+
    8c16:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8c18:	86 1b       	sub	r24, r22
    8c1a:	97 0b       	sbc	r25, r23
    8c1c:	68 85       	ldd	r22, Y+8	; 0x08
    8c1e:	70 e0       	ldi	r23, 0x00	; 0
    8c20:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
	if(delta==0)delta++;
    8c24:	61 15       	cp	r22, r1
    8c26:	71 05       	cpc	r23, r1
    8c28:	11 f4       	brne	.+4      	; 0x8c2e <PatchCommand11+0x46>
    8c2a:	61 e0       	ldi	r22, 0x01	; 1
    8c2c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8c2e:	ea 81       	ldd	r30, Y+2	; 0x02
    8c30:	86 e0       	ldi	r24, 0x06	; 6
    8c32:	e8 9f       	mul	r30, r24
    8c34:	f0 01       	movw	r30, r0
    8c36:	11 24       	eor	r1, r1
    8c38:	ee 5f       	subi	r30, 0xFE	; 254
    8c3a:	f4 4f       	sbci	r31, 0xF4	; 244
    8c3c:	81 81       	ldd	r24, Z+1	; 0x01
    8c3e:	92 81       	ldd	r25, Z+2	; 0x02
    8c40:	86 0f       	add	r24, r22
    8c42:	97 1f       	adc	r25, r23
    8c44:	92 83       	std	Z+2, r25	; 0x02
    8c46:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8c48:	7e 83       	std	Y+6, r23	; 0x06
    8c4a:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8c4c:	88 81       	ld	r24, Y
    8c4e:	88 60       	ori	r24, 0x08	; 8
    8c50:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8c52:	89 81       	ldd	r24, Y+1	; 0x01
    8c54:	48 0f       	add	r20, r24
    8c56:	4f 83       	std	Y+7, r20	; 0x07
}
    8c58:	df 91       	pop	r29
    8c5a:	cf 91       	pop	r28
    8c5c:	08 95       	ret

00008c5e <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8c5e:	fc 01       	movw	r30, r24
    8c60:	60 87       	std	Z+8, r22	; 0x08
    8c62:	08 95       	ret

00008c64 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8c64:	fc 01       	movw	r30, r24
    8c66:	64 83       	std	Z+4, r22	; 0x04
    8c68:	08 95       	ret

00008c6a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8c6a:	fc 01       	movw	r30, r24
    8c6c:	82 81       	ldd	r24, Z+2	; 0x02
    8c6e:	0c 94 19 4a 	jmp	0x9432	; 0x9432 <SetMixerWave>

00008c72 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8c72:	fc 01       	movw	r30, r24
	track->note+=param;
    8c74:	91 81       	ldd	r25, Z+1	; 0x01
    8c76:	69 0f       	add	r22, r25
    8c78:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8c7a:	82 81       	ldd	r24, Z+2	; 0x02
    8c7c:	0c 94 02 4a 	jmp	0x9404	; 0x9404 <SetMixerNote>

00008c80 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8c80:	fc 01       	movw	r30, r24
	track->note-=param;
    8c82:	91 81       	ldd	r25, Z+1	; 0x01
    8c84:	96 1b       	sub	r25, r22
    8c86:	69 2f       	mov	r22, r25
    8c88:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8c8a:	82 81       	ldd	r24, Z+2	; 0x02
    8c8c:	0c 94 02 4a 	jmp	0x9404	; 0x9404 <SetMixerNote>

00008c90 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8c90:	1f 93       	push	r17
    8c92:	cf 93       	push	r28
    8c94:	df 93       	push	r29
    8c96:	ec 01       	movw	r28, r24
    8c98:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    8c9c:	0e 94 02 4a 	call	0x9404	; 0x9404 <SetMixerNote>
	track->note=param;
    8ca0:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8ca2:	88 81       	ld	r24, Y
    8ca4:	87 7f       	andi	r24, 0xF7	; 247
    8ca6:	88 83       	st	Y, r24
}
    8ca8:	df 91       	pop	r29
    8caa:	cf 91       	pop	r28
    8cac:	1f 91       	pop	r17
    8cae:	08 95       	ret

00008cb0 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8cb0:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8cb2:	14 96       	adiw	r26, 0x04	; 4
    8cb4:	8c 91       	ld	r24, X
    8cb6:	14 97       	sbiw	r26, 0x04	; 4
    8cb8:	88 23       	and	r24, r24
    8cba:	19 f1       	breq	.+70     	; 0x8d02 <PatchCommand14+0x52>
    8cbc:	55 96       	adiw	r26, 0x15	; 21
    8cbe:	2d 91       	ld	r18, X+
    8cc0:	3c 91       	ld	r19, X
    8cc2:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8cc4:	66 23       	and	r22, r22
    8cc6:	79 f0       	breq	.+30     	; 0x8ce6 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8cc8:	77 27       	eor	r23, r23
    8cca:	67 fd       	sbrc	r22, 7
    8ccc:	70 95       	com	r23
    8cce:	6f 5f       	subi	r22, 0xFF	; 255
    8cd0:	7f 4f       	sbci	r23, 0xFF	; 255
    8cd2:	ab 01       	movw	r20, r22
    8cd4:	44 0f       	add	r20, r20
    8cd6:	55 1f       	adc	r21, r21
    8cd8:	64 0f       	add	r22, r20
    8cda:	75 1f       	adc	r23, r21
    8cdc:	26 1b       	sub	r18, r22
    8cde:	37 0b       	sbc	r19, r23
    8ce0:	09 c0       	rjmp	.+18     	; 0x8cf4 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8ce2:	ef 3f       	cpi	r30, 0xFF	; 255
    8ce4:	39 f0       	breq	.+14     	; 0x8cf4 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8ce6:	23 50       	subi	r18, 0x03	; 3
    8ce8:	31 09       	sbc	r19, r1
    8cea:	f9 01       	movw	r30, r18
    8cec:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8cee:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8cf0:	ed 30       	cpi	r30, 0x0D	; 13
    8cf2:	b9 f7       	brne	.-18     	; 0x8ce2 <PatchCommand14+0x32>
    8cf4:	56 96       	adiw	r26, 0x16	; 22
    8cf6:	3c 93       	st	X, r19
    8cf8:	2e 93       	st	-X, r18
    8cfa:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8cfc:	81 50       	subi	r24, 0x01	; 1
    8cfe:	14 96       	adiw	r26, 0x04	; 4
    8d00:	8c 93       	st	X, r24
    8d02:	08 95       	ret

00008d04 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8d04:	90 93 b0 0b 	sts	0x0BB0, r25
    8d08:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8d0c:	8f e6       	ldi	r24, 0x6F	; 111
    8d0e:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8d12:	10 92 00 0b 	sts	0x0B00, r1
    8d16:	ea e4       	ldi	r30, 0x4A	; 74
    8d18:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8d1a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8d1c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8d1e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8d20:	28 e1       	ldi	r18, 0x18	; 24
    8d22:	df 01       	movw	r26, r30
    8d24:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8d26:	8c 93       	st	X, r24
    8d28:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8d2a:	9c 93       	st	X, r25
    8d2c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8d2e:	1c 92       	st	X, r1
    8d30:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8d32:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8d34:	10 82       	st	Z, r1
    8d36:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8d38:	2c 93       	st	X, r18
    8d3a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8d3c:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8d3e:	8f 5f       	subi	r24, 0xFF	; 255
    8d40:	77 96       	adiw	r30, 0x17	; 23
    8d42:	85 30       	cpi	r24, 0x05	; 5
    8d44:	71 f7       	brne	.-36     	; 0x8d22 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8d46:	08 95       	ret

00008d48 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8d48:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8d4a:	ed 91       	ld	r30, X+
    8d4c:	fc 91       	ld	r31, X
    8d4e:	11 97       	sbiw	r26, 0x01	; 1
    8d50:	9f 01       	movw	r18, r30
    8d52:	2f 5f       	subi	r18, 0xFF	; 255
    8d54:	3f 4f       	sbci	r19, 0xFF	; 255
    8d56:	11 96       	adiw	r26, 0x01	; 1
    8d58:	3c 93       	st	X, r19
    8d5a:	2e 93       	st	-X, r18
    8d5c:	e4 91       	lpm	r30, Z
    8d5e:	e7 fd       	sbrc	r30, 7
    8d60:	03 c0       	rjmp	.+6      	; 0x8d68 <ReadVarLen+0x20>
    8d62:	8e 2f       	mov	r24, r30
    8d64:	90 e0       	ldi	r25, 0x00	; 0
    8d66:	08 95       	ret
    {
       value &= 0x7F;
    8d68:	ef 77       	andi	r30, 0x7F	; 127
    8d6a:	8e 2f       	mov	r24, r30
    8d6c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8d6e:	96 95       	lsr	r25
    8d70:	98 2f       	mov	r25, r24
    8d72:	88 27       	eor	r24, r24
    8d74:	97 95       	ror	r25
    8d76:	87 95       	ror	r24
    8d78:	2f 5f       	subi	r18, 0xFF	; 255
    8d7a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d7c:	f9 01       	movw	r30, r18
    8d7e:	31 97       	sbiw	r30, 0x01	; 1
    8d80:	e4 91       	lpm	r30, Z
    8d82:	4e 2f       	mov	r20, r30
    8d84:	4f 77       	andi	r20, 0x7F	; 127
    8d86:	84 0f       	add	r24, r20
    8d88:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8d8a:	e7 fd       	sbrc	r30, 7
    8d8c:	f0 cf       	rjmp	.-32     	; 0x8d6e <ReadVarLen+0x26>
    8d8e:	2d 93       	st	X+, r18
    8d90:	3c 93       	st	X, r19
    }


    return value;
}
    8d92:	08 95       	ret

00008d94 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8d94:	ef 92       	push	r14
    8d96:	ff 92       	push	r15
    8d98:	0f 93       	push	r16
    8d9a:	1f 93       	push	r17
    8d9c:	cf 93       	push	r28
    8d9e:	df 93       	push	r29
    8da0:	1f 92       	push	r1
    8da2:	cd b7       	in	r28, 0x3d	; 61
    8da4:	de b7       	in	r29, 0x3e	; 62
    8da6:	7c 01       	movw	r14, r24
    8da8:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8daa:	fc 01       	movw	r30, r24
    8dac:	80 81       	ld	r24, Z
    8dae:	08 2f       	mov	r16, r24
    8db0:	00 1f       	adc	r16, r16
    8db2:	00 27       	eor	r16, r16
    8db4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8db6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8db8:	9f ef       	ldi	r25, 0xFF	; 255
    8dba:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8dbc:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8dbe:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8dc0:	87 7b       	andi	r24, 0xB7	; 183
    8dc2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8dc4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8dc6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8dc8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8dca:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8dcc:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8dce:	82 81       	ldd	r24, Z+2	; 0x02
    8dd0:	83 30       	cpi	r24, 0x03	; 3
    8dd2:	69 f4       	brne	.+26     	; 0x8dee <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8dd4:	01 11       	cpse	r16, r1
    8dd6:	01 c0       	rjmp	.+2      	; 0x8dda <TriggerCommon+0x46>
    8dd8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8dda:	81 e0       	ldi	r24, 0x01	; 1
    8ddc:	91 e0       	ldi	r25, 0x01	; 1
    8dde:	90 93 17 0b 	sts	0x0B17, r25
    8de2:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8de6:	81 e0       	ldi	r24, 0x01	; 1
    8de8:	80 93 15 0b 	sts	0x0B15, r24
    8dec:	39 c0       	rjmp	.+114    	; 0x8e60 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8dee:	84 30       	cpi	r24, 0x04	; 4
    8df0:	69 f5       	brne	.+90     	; 0x8e4c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8df2:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8df6:	80 91 af 0b 	lds	r24, 0x0BAF
    8dfa:	90 91 b0 0b 	lds	r25, 0x0BB0
    8dfe:	f9 e0       	ldi	r31, 0x09	; 9
    8e00:	6f 9f       	mul	r22, r31
    8e02:	80 0d       	add	r24, r0
    8e04:	91 1d       	adc	r25, r1
    8e06:	11 24       	eor	r1, r1
    8e08:	fc 01       	movw	r30, r24
    8e0a:	31 96       	adiw	r30, 0x01	; 1
    8e0c:	a5 91       	lpm	r26, Z+
    8e0e:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8e10:	b0 93 1f 0b 	sts	0x0B1F, r27
    8e14:	a0 93 1e 0b 	sts	0x0B1E, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8e18:	ac 01       	movw	r20, r24
    8e1a:	49 5f       	subi	r20, 0xF9	; 249
    8e1c:	5f 4f       	sbci	r21, 0xFF	; 255
    8e1e:	fa 01       	movw	r30, r20
    8e20:	65 91       	lpm	r22, Z+
    8e22:	74 91       	lpm	r23, Z
    8e24:	05 96       	adiw	r24, 0x05	; 5
    8e26:	fc 01       	movw	r30, r24
    8e28:	85 91       	lpm	r24, Z+
    8e2a:	94 91       	lpm	r25, Z
    8e2c:	68 1b       	sub	r22, r24
    8e2e:	79 0b       	sbc	r23, r25
    8e30:	70 93 21 0b 	sts	0x0B21, r23
    8e34:	60 93 20 0b 	sts	0x0B20, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8e38:	fa 01       	movw	r30, r20
    8e3a:	85 91       	lpm	r24, Z+
    8e3c:	94 91       	lpm	r25, Z
    8e3e:	a8 0f       	add	r26, r24
    8e40:	b9 1f       	adc	r27, r25
    8e42:	b0 93 23 0b 	sts	0x0B23, r27
    8e46:	a0 93 22 0b 	sts	0x0B22, r26
    8e4a:	05 c0       	rjmp	.+10     	; 0x8e56 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8e4c:	60 e0       	ldi	r22, 0x00	; 0
    8e4e:	29 83       	std	Y+1, r18	; 0x01
    8e50:	0e 94 19 4a 	call	0x9432	; 0x9432 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8e54:	29 81       	ldd	r18, Y+1	; 0x01
    8e56:	62 2f       	mov	r22, r18
    8e58:	f7 01       	movw	r30, r14
    8e5a:	82 81       	ldd	r24, Z+2	; 0x02
    8e5c:	0e 94 02 4a 	call	0x9404	; 0x9404 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8e60:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8e62:	00 23       	and	r16, r16
    8e64:	11 f0       	breq	.+4      	; 0x8e6a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8e66:	11 8b       	std	Z+17, r17	; 0x11
    8e68:	01 c0       	rjmp	.+2      	; 0x8e6c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8e6a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8e6c:	e0 91 af 0b 	lds	r30, 0x0BAF
    8e70:	f0 91 b0 0b 	lds	r31, 0x0BB0
    8e74:	39 e0       	ldi	r19, 0x09	; 9
    8e76:	13 9f       	mul	r17, r19
    8e78:	e0 0d       	add	r30, r0
    8e7a:	f1 1d       	adc	r31, r1
    8e7c:	11 24       	eor	r1, r1
    8e7e:	33 96       	adiw	r30, 0x03	; 3
    8e80:	85 91       	lpm	r24, Z+
    8e82:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8e84:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8e86:	00 97       	sbiw	r24, 0x00	; 0
    8e88:	19 f4       	brne	.+6      	; 0x8e90 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8e8a:	16 8a       	std	Z+22, r1	; 0x16
    8e8c:	15 8a       	std	Z+21, r1	; 0x15
    8e8e:	08 c0       	rjmp	.+16     	; 0x8ea0 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8e90:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8e92:	fc 01       	movw	r30, r24
    8e94:	24 91       	lpm	r18, Z
    8e96:	f7 01       	movw	r30, r14
    8e98:	22 8b       	std	Z+18, r18	; 0x12
    8e9a:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8e9c:	96 8b       	std	Z+22, r25	; 0x16
    8e9e:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8ea0:	0f 90       	pop	r0
    8ea2:	df 91       	pop	r29
    8ea4:	cf 91       	pop	r28
    8ea6:	1f 91       	pop	r17
    8ea8:	0f 91       	pop	r16
    8eaa:	ff 90       	pop	r15
    8eac:	ef 90       	pop	r14
    8eae:	08 95       	ret

00008eb0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8eb0:	cf 93       	push	r28
    8eb2:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8eb4:	e0 91 af 0b 	lds	r30, 0x0BAF
    8eb8:	f0 91 b0 0b 	lds	r31, 0x0BB0
    8ebc:	99 e0       	ldi	r25, 0x09	; 9
    8ebe:	89 9f       	mul	r24, r25
    8ec0:	e0 0d       	add	r30, r0
    8ec2:	f1 1d       	adc	r31, r1
    8ec4:	11 24       	eor	r1, r1
    8ec6:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8ec8:	e1 30       	cpi	r30, 0x01	; 1
    8eca:	e9 f0       	breq	.+58     	; 0x8f06 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8ecc:	e2 30       	cpi	r30, 0x02	; 2
    8ece:	e9 f0       	breq	.+58     	; 0x8f0a <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8ed0:	20 91 51 0b 	lds	r18, 0x0B51
    8ed4:	27 ff       	sbrs	r18, 7
    8ed6:	1d c0       	rjmp	.+58     	; 0x8f12 <TriggerFx+0x62>
    8ed8:	20 91 62 0b 	lds	r18, 0x0B62
    8edc:	28 13       	cpse	r18, r24
    8ede:	02 c0       	rjmp	.+4      	; 0x8ee4 <TriggerFx+0x34>
    8ee0:	41 11       	cpse	r20, r1
    8ee2:	17 c0       	rjmp	.+46     	; 0x8f12 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8ee4:	20 91 68 0b 	lds	r18, 0x0B68
    8ee8:	27 ff       	sbrs	r18, 7
    8eea:	11 c0       	rjmp	.+34     	; 0x8f0e <TriggerFx+0x5e>
    8eec:	20 91 79 0b 	lds	r18, 0x0B79
    8ef0:	28 13       	cpse	r18, r24
    8ef2:	02 c0       	rjmp	.+4      	; 0x8ef8 <TriggerFx+0x48>
    8ef4:	41 11       	cpse	r20, r1
    8ef6:	0b c0       	rjmp	.+22     	; 0x8f0e <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8ef8:	20 91 65 0b 	lds	r18, 0x0B65
    8efc:	90 91 7c 0b 	lds	r25, 0x0B7C
    8f00:	92 17       	cp	r25, r18
    8f02:	28 f4       	brcc	.+10     	; 0x8f0e <TriggerFx+0x5e>
    8f04:	06 c0       	rjmp	.+12     	; 0x8f12 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8f06:	c3 e0       	ldi	r28, 0x03	; 3
    8f08:	05 c0       	rjmp	.+10     	; 0x8f14 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8f0a:	c4 e0       	ldi	r28, 0x04	; 4
    8f0c:	03 c0       	rjmp	.+6      	; 0x8f14 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8f0e:	c2 e0       	ldi	r28, 0x02	; 2
    8f10:	01 c0       	rjmp	.+2      	; 0x8f14 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8f12:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8f14:	97 e1       	ldi	r25, 0x17	; 23
    8f16:	c9 9f       	mul	r28, r25
    8f18:	e0 01       	movw	r28, r0
    8f1a:	11 24       	eor	r1, r1
    8f1c:	c6 5c       	subi	r28, 0xC6	; 198
    8f1e:	d4 4f       	sbci	r29, 0xF4	; 244
    8f20:	90 e8       	ldi	r25, 0x80	; 128
    8f22:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8f24:	1e 8a       	std	Y+22, r1	; 0x16
    8f26:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8f28:	20 e5       	ldi	r18, 0x50	; 80
    8f2a:	46 2f       	mov	r20, r22
    8f2c:	68 2f       	mov	r22, r24
    8f2e:	ce 01       	movw	r24, r28
    8f30:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8f34:	88 81       	ld	r24, Y
    8f36:	80 62       	ori	r24, 0x20	; 32
    8f38:	88 83       	st	Y, r24
}
    8f3a:	df 91       	pop	r29
    8f3c:	cf 91       	pop	r28
    8f3e:	08 95       	ret

00008f40 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8f40:	cf 93       	push	r28
    8f42:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8f44:	a8 2f       	mov	r26, r24
    8f46:	b0 e0       	ldi	r27, 0x00	; 0
    8f48:	97 e1       	ldi	r25, 0x17	; 23
    8f4a:	89 9f       	mul	r24, r25
    8f4c:	f0 01       	movw	r30, r0
    8f4e:	11 24       	eor	r1, r1
    8f50:	e6 5c       	subi	r30, 0xC6	; 198
    8f52:	f4 4f       	sbci	r31, 0xF4	; 244
    8f54:	80 81       	ld	r24, Z
    8f56:	85 ff       	sbrs	r24, 5
    8f58:	02 c0       	rjmp	.+4      	; 0x8f5e <TriggerNote+0x1e>
    8f5a:	87 fd       	sbrc	r24, 7
    8f5c:	2e c0       	rjmp	.+92     	; 0x8fba <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8f5e:	21 11       	cpse	r18, r1
    8f60:	18 c0       	rjmp	.+48     	; 0x8f92 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8f62:	97 e1       	ldi	r25, 0x17	; 23
    8f64:	9a 9f       	mul	r25, r26
    8f66:	f0 01       	movw	r30, r0
    8f68:	9b 9f       	mul	r25, r27
    8f6a:	f0 0d       	add	r31, r0
    8f6c:	11 24       	eor	r1, r1
    8f6e:	e6 5c       	subi	r30, 0xC6	; 198
    8f70:	f4 4f       	sbci	r31, 0xF4	; 244
    8f72:	97 85       	ldd	r25, Z+15	; 0x0f
    8f74:	91 11       	cpse	r25, r1
    8f76:	02 c0       	rjmp	.+4      	; 0x8f7c <TriggerNote+0x3c>
    8f78:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8f7a:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8f7c:	97 e1       	ldi	r25, 0x17	; 23
    8f7e:	9a 9f       	mul	r25, r26
    8f80:	f0 01       	movw	r30, r0
    8f82:	9b 9f       	mul	r25, r27
    8f84:	f0 0d       	add	r31, r0
    8f86:	11 24       	eor	r1, r1
    8f88:	e6 5c       	subi	r30, 0xC6	; 198
    8f8a:	f4 4f       	sbci	r31, 0xF4	; 244
    8f8c:	8f 7b       	andi	r24, 0xBF	; 191
    8f8e:	80 83       	st	Z, r24
    8f90:	14 c0       	rjmp	.+40     	; 0x8fba <TriggerNote+0x7a>
    8f92:	82 2f       	mov	r24, r18
    8f94:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8f96:	97 e1       	ldi	r25, 0x17	; 23
    8f98:	9a 9f       	mul	r25, r26
    8f9a:	e0 01       	movw	r28, r0
    8f9c:	9b 9f       	mul	r25, r27
    8f9e:	d0 0d       	add	r29, r0
    8fa0:	11 24       	eor	r1, r1
    8fa2:	c6 5c       	subi	r28, 0xC6	; 198
    8fa4:	d4 4f       	sbci	r29, 0xF4	; 244
    8fa6:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8fa8:	1e 8a       	std	Y+22, r1	; 0x16
    8faa:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8fac:	48 2f       	mov	r20, r24
    8fae:	ce 01       	movw	r24, r28
    8fb0:	0e 94 ca 46 	call	0x8d94	; 0x8d94 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8fb4:	88 81       	ld	r24, Y
    8fb6:	80 62       	ori	r24, 0x20	; 32
    8fb8:	88 83       	st	Y, r24
		}

	}
}
    8fba:	df 91       	pop	r29
    8fbc:	cf 91       	pop	r28
    8fbe:	08 95       	ret

00008fc0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8fc0:	6f 92       	push	r6
    8fc2:	7f 92       	push	r7
    8fc4:	8f 92       	push	r8
    8fc6:	9f 92       	push	r9
    8fc8:	af 92       	push	r10
    8fca:	bf 92       	push	r11
    8fcc:	cf 92       	push	r12
    8fce:	df 92       	push	r13
    8fd0:	ef 92       	push	r14
    8fd2:	ff 92       	push	r15
    8fd4:	0f 93       	push	r16
    8fd6:	1f 93       	push	r17
    8fd8:	cf 93       	push	r28
    8fda:	df 93       	push	r29
    8fdc:	ca e3       	ldi	r28, 0x3A	; 58
    8fde:	db e0       	ldi	r29, 0x0B	; 11
    8fe0:	02 e0       	ldi	r16, 0x02	; 2
    8fe2:	1b e0       	ldi	r17, 0x0B	; 11
    8fe4:	d8 01       	movw	r26, r16
    8fe6:	9e 01       	movw	r18, r28
    8fe8:	40 e0       	ldi	r20, 0x00	; 0
    8fea:	50 e0       	ldi	r21, 0x00	; 0
    8fec:	ca 01       	movw	r24, r20
    8fee:	86 5c       	subi	r24, 0xC6	; 198
    8ff0:	94 4f       	sbci	r25, 0xF4	; 244
    8ff2:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8ff4:	fc 01       	movw	r30, r24
    8ff6:	87 85       	ldd	r24, Z+15	; 0x0f
    8ff8:	88 23       	and	r24, r24
    8ffa:	91 f0       	breq	.+36     	; 0x9020 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8ffc:	66 85       	ldd	r22, Z+14	; 0x0e
    8ffe:	99 27       	eor	r25, r25
    9000:	87 fd       	sbrc	r24, 7
    9002:	90 95       	com	r25
    9004:	86 0f       	add	r24, r22
    9006:	91 1d       	adc	r25, r1
    9008:	8f 3f       	cpi	r24, 0xFF	; 255
    900a:	91 05       	cpc	r25, r1
    900c:	19 f0       	breq	.+6      	; 0x9014 <ProcessMusic+0x54>
    900e:	14 f0       	brlt	.+4      	; 0x9014 <ProcessMusic+0x54>
    9010:	8f ef       	ldi	r24, 0xFF	; 255
    9012:	90 e0       	ldi	r25, 0x00	; 0
    9014:	97 ff       	sbrs	r25, 7
    9016:	02 c0       	rjmp	.+4      	; 0x901c <ProcessMusic+0x5c>
    9018:	80 e0       	ldi	r24, 0x00	; 0
    901a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    901c:	f6 01       	movw	r30, r12
    901e:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    9020:	f9 01       	movw	r30, r18
    9022:	f0 80       	ld	r15, Z
    9024:	f3 fe       	sbrs	r15, 3
    9026:	2a c0       	rjmp	.+84     	; 0x907c <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9028:	65 81       	ldd	r22, Z+5	; 0x05
    902a:	76 81       	ldd	r23, Z+6	; 0x06
    902c:	11 96       	adiw	r26, 0x01	; 1
    902e:	8d 91       	ld	r24, X+
    9030:	9c 91       	ld	r25, X
    9032:	12 97       	sbiw	r26, 0x02	; 2
    9034:	86 0f       	add	r24, r22
    9036:	97 1f       	adc	r25, r23
    9038:	12 96       	adiw	r26, 0x02	; 2
    903a:	9c 93       	st	X, r25
    903c:	8e 93       	st	-X, r24
    903e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9040:	f6 01       	movw	r30, r12
    9042:	e7 80       	ldd	r14, Z+7	; 0x07
    9044:	ee 2d       	mov	r30, r14
    9046:	f0 e0       	ldi	r31, 0x00	; 0
    9048:	ee 0f       	add	r30, r30
    904a:	ff 1f       	adc	r31, r31
    904c:	e8 5f       	subi	r30, 0xF8	; 248
    904e:	fa 46       	sbci	r31, 0x6A	; 106
    9050:	c5 90       	lpm	r12, Z+
    9052:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9054:	16 16       	cp	r1, r22
    9056:	17 06       	cpc	r1, r23
    9058:	24 f4       	brge	.+8      	; 0x9062 <ProcessMusic+0xa2>
    905a:	8c 15       	cp	r24, r12
    905c:	9d 05       	cpc	r25, r13
    905e:	30 f4       	brcc	.+12     	; 0x906c <ProcessMusic+0xac>
    9060:	0d c0       	rjmp	.+26     	; 0x907c <ProcessMusic+0xbc>
    9062:	67 2b       	or	r22, r23
    9064:	59 f0       	breq	.+22     	; 0x907c <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    9066:	c8 16       	cp	r12, r24
    9068:	d9 06       	cpc	r13, r25
    906a:	40 f0       	brcs	.+16     	; 0x907c <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    906c:	12 96       	adiw	r26, 0x02	; 2
    906e:	dc 92       	st	X, r13
    9070:	ce 92       	st	-X, r12
    9072:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9074:	8f 2d       	mov	r24, r15
    9076:	87 7f       	andi	r24, 0xF7	; 247
    9078:	f9 01       	movw	r30, r18
    907a:	80 83       	st	Z, r24
    907c:	49 5e       	subi	r20, 0xE9	; 233
    907e:	5f 4f       	sbci	r21, 0xFF	; 255
    9080:	29 5e       	subi	r18, 0xE9	; 233
    9082:	3f 4f       	sbci	r19, 0xFF	; 255
    9084:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    9086:	43 37       	cpi	r20, 0x73	; 115
    9088:	51 05       	cpc	r21, r1
    908a:	09 f0       	breq	.+2      	; 0x908e <ProcessMusic+0xce>
    908c:	af cf       	rjmp	.-162    	; 0x8fec <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    908e:	80 91 00 0b 	lds	r24, 0x0B00
    9092:	88 23       	and	r24, r24
    9094:	09 f4       	brne	.+2      	; 0x9098 <ProcessMusic+0xd8>
    9096:	cc c0       	rjmp	.+408    	; 0x9230 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    9098:	57 e1       	ldi	r21, 0x17	; 23
    909a:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    909c:	80 91 ad 0b 	lds	r24, 0x0BAD
    90a0:	90 91 ae 0b 	lds	r25, 0x0BAE
    90a4:	20 91 b3 0b 	lds	r18, 0x0BB3
    90a8:	30 91 b4 0b 	lds	r19, 0x0BB4
    90ac:	82 17       	cp	r24, r18
    90ae:	93 07       	cpc	r25, r19
    90b0:	09 f0       	breq	.+2      	; 0x90b4 <ProcessMusic+0xf4>
    90b2:	b9 c0       	rjmp	.+370    	; 0x9226 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    90b4:	20 91 b6 0b 	lds	r18, 0x0BB6
    90b8:	30 91 b7 0b 	lds	r19, 0x0BB7
    90bc:	b9 01       	movw	r22, r18
    90be:	6f 5f       	subi	r22, 0xFF	; 255
    90c0:	7f 4f       	sbci	r23, 0xFF	; 255
    90c2:	70 93 b7 0b 	sts	0x0BB7, r23
    90c6:	60 93 b6 0b 	sts	0x0BB6, r22
    90ca:	f9 01       	movw	r30, r18
    90cc:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    90ce:	4f 3f       	cpi	r20, 0xFF	; 255
    90d0:	79 f5       	brne	.+94     	; 0x9130 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    90d2:	a9 01       	movw	r20, r18
    90d4:	4e 5f       	subi	r20, 0xFE	; 254
    90d6:	5f 4f       	sbci	r21, 0xFF	; 255
    90d8:	50 93 b7 0b 	sts	0x0BB7, r21
    90dc:	40 93 b6 0b 	sts	0x0BB6, r20
    90e0:	fb 01       	movw	r30, r22
    90e2:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    90e4:	6f 32       	cpi	r22, 0x2F	; 47
    90e6:	19 f4       	brne	.+6      	; 0x90ee <ProcessMusic+0x12e>
						playSong=false;
    90e8:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    90ec:	9c c0       	rjmp	.+312    	; 0x9226 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    90ee:	66 30       	cpi	r22, 0x06	; 6
    90f0:	09 f0       	breq	.+2      	; 0x90f4 <ProcessMusic+0x134>
    90f2:	8c c0       	rjmp	.+280    	; 0x920c <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    90f4:	fa 01       	movw	r30, r20
    90f6:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    90f8:	c9 01       	movw	r24, r18
    90fa:	04 96       	adiw	r24, 0x04	; 4
    90fc:	90 93 b7 0b 	sts	0x0BB7, r25
    9100:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    9104:	f9 01       	movw	r30, r18
    9106:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9108:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    910a:	e3 35       	cpi	r30, 0x53	; 83
    910c:	29 f4       	brne	.+10     	; 0x9118 <ProcessMusic+0x158>
							loopStart=songPos;
    910e:	90 93 b9 0b 	sts	0x0BB9, r25
    9112:	80 93 b8 0b 	sts	0x0BB8, r24
    9116:	7a c0       	rjmp	.+244    	; 0x920c <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    9118:	e5 34       	cpi	r30, 0x45	; 69
    911a:	09 f0       	breq	.+2      	; 0x911e <ProcessMusic+0x15e>
    911c:	77 c0       	rjmp	.+238    	; 0x920c <ProcessMusic+0x24c>
							songPos=loopStart;
    911e:	80 91 b8 0b 	lds	r24, 0x0BB8
    9122:	90 91 b9 0b 	lds	r25, 0x0BB9
    9126:	90 93 b7 0b 	sts	0x0BB7, r25
    912a:	80 93 b6 0b 	sts	0x0BB6, r24
    912e:	6e c0       	rjmp	.+220    	; 0x920c <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    9130:	47 fd       	sbrc	r20, 7
    9132:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    9136:	90 91 b1 0b 	lds	r25, 0x0BB1
    913a:	89 2f       	mov	r24, r25
    913c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    913e:	47 ff       	sbrs	r20, 7
    9140:	08 c0       	rjmp	.+16     	; 0x9152 <ProcessMusic+0x192>
    9142:	2e 5f       	subi	r18, 0xFE	; 254
    9144:	3f 4f       	sbci	r19, 0xFF	; 255
    9146:	30 93 b7 0b 	sts	0x0BB7, r19
    914a:	20 93 b6 0b 	sts	0x0BB6, r18
    914e:	fb 01       	movw	r30, r22
    9150:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    9152:	90 7f       	andi	r25, 0xF0	; 240
    9154:	90 3b       	cpi	r25, 0xB0	; 176
    9156:	e1 f0       	breq	.+56     	; 0x9190 <ProcessMusic+0x1d0>
    9158:	90 3c       	cpi	r25, 0xC0	; 192
    915a:	09 f4       	brne	.+2      	; 0x915e <ProcessMusic+0x19e>
    915c:	51 c0       	rjmp	.+162    	; 0x9200 <ProcessMusic+0x240>
    915e:	90 39       	cpi	r25, 0x90	; 144
    9160:	09 f0       	breq	.+2      	; 0x9164 <ProcessMusic+0x1a4>
    9162:	54 c0       	rjmp	.+168    	; 0x920c <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    9164:	e0 91 b6 0b 	lds	r30, 0x0BB6
    9168:	f0 91 b7 0b 	lds	r31, 0x0BB7
    916c:	9f 01       	movw	r18, r30
    916e:	2f 5f       	subi	r18, 0xFF	; 255
    9170:	3f 4f       	sbci	r19, 0xFF	; 255
    9172:	30 93 b7 0b 	sts	0x0BB7, r19
    9176:	20 93 b6 0b 	sts	0x0BB6, r18
    917a:	24 91       	lpm	r18, Z
    917c:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    917e:	f8 9e       	mul	r15, r24
    9180:	f0 01       	movw	r30, r0
    9182:	11 24       	eor	r1, r1
    9184:	e6 5c       	subi	r30, 0xC6	; 198
    9186:	f4 4f       	sbci	r31, 0xF4	; 244
    9188:	60 89       	ldd	r22, Z+16	; 0x10
    918a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
    918e:	3e c0       	rjmp	.+124    	; 0x920c <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    9190:	e0 91 b6 0b 	lds	r30, 0x0BB6
    9194:	f0 91 b7 0b 	lds	r31, 0x0BB7
    9198:	9f 01       	movw	r18, r30
    919a:	2f 5f       	subi	r18, 0xFF	; 255
    919c:	3f 4f       	sbci	r19, 0xFF	; 255
    919e:	30 93 b7 0b 	sts	0x0BB7, r19
    91a2:	20 93 b6 0b 	sts	0x0BB6, r18
    91a6:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    91a8:	47 30       	cpi	r20, 0x07	; 7
    91aa:	49 f4       	brne	.+18     	; 0x91be <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    91ac:	f8 9e       	mul	r15, r24
    91ae:	d0 01       	movw	r26, r0
    91b0:	11 24       	eor	r1, r1
    91b2:	a6 5c       	subi	r26, 0xC6	; 198
    91b4:	b4 4f       	sbci	r27, 0xF4	; 244
    91b6:	ee 0f       	add	r30, r30
    91b8:	1c 96       	adiw	r26, 0x0c	; 12
    91ba:	ec 93       	st	X, r30
    91bc:	27 c0       	rjmp	.+78     	; 0x920c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    91be:	4b 30       	cpi	r20, 0x0B	; 11
    91c0:	49 f4       	brne	.+18     	; 0x91d4 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    91c2:	f8 9e       	mul	r15, r24
    91c4:	d0 01       	movw	r26, r0
    91c6:	11 24       	eor	r1, r1
    91c8:	a6 5c       	subi	r26, 0xC6	; 198
    91ca:	b4 4f       	sbci	r27, 0xF4	; 244
    91cc:	ee 0f       	add	r30, r30
    91ce:	13 96       	adiw	r26, 0x03	; 3
    91d0:	ec 93       	st	X, r30
    91d2:	1c c0       	rjmp	.+56     	; 0x920c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    91d4:	4c 35       	cpi	r20, 0x5C	; 92
    91d6:	49 f4       	brne	.+18     	; 0x91ea <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    91d8:	f8 9e       	mul	r15, r24
    91da:	d0 01       	movw	r26, r0
    91dc:	11 24       	eor	r1, r1
    91de:	a6 5c       	subi	r26, 0xC6	; 198
    91e0:	b4 4f       	sbci	r27, 0xF4	; 244
    91e2:	ee 0f       	add	r30, r30
    91e4:	1a 96       	adiw	r26, 0x0a	; 10
    91e6:	ec 93       	st	X, r30
    91e8:	11 c0       	rjmp	.+34     	; 0x920c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    91ea:	44 36       	cpi	r20, 0x64	; 100
    91ec:	79 f4       	brne	.+30     	; 0x920c <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    91ee:	f8 9e       	mul	r15, r24
    91f0:	d0 01       	movw	r26, r0
    91f2:	11 24       	eor	r1, r1
    91f4:	a6 5c       	subi	r26, 0xC6	; 198
    91f6:	b4 4f       	sbci	r27, 0xF4	; 244
    91f8:	ee 0f       	add	r30, r30
    91fa:	1b 96       	adiw	r26, 0x0b	; 11
    91fc:	ec 93       	st	X, r30
    91fe:	06 c0       	rjmp	.+12     	; 0x920c <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9200:	f8 9e       	mul	r15, r24
    9202:	f0 01       	movw	r30, r0
    9204:	11 24       	eor	r1, r1
    9206:	e6 5c       	subi	r30, 0xC6	; 198
    9208:	f4 4f       	sbci	r31, 0xF4	; 244
    920a:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    920c:	86 eb       	ldi	r24, 0xB6	; 182
    920e:	9b e0       	ldi	r25, 0x0B	; 11
    9210:	0e 94 a4 46 	call	0x8d48	; 0x8d48 <ReadVarLen>
    9214:	90 93 b4 0b 	sts	0x0BB4, r25
    9218:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    921c:	10 92 ae 0b 	sts	0x0BAE, r1
    9220:	10 92 ad 0b 	sts	0x0BAD, r1
    9224:	3b cf       	rjmp	.-394    	; 0x909c <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9226:	01 96       	adiw	r24, 0x01	; 1
    9228:	90 93 ae 0b 	sts	0x0BAE, r25
    922c:	80 93 ad 0b 	sts	0x0BAD, r24
    9230:	93 e4       	ldi	r25, 0x43	; 67
    9232:	a9 2e       	mov	r10, r25
    9234:	9b e0       	ldi	r25, 0x0B	; 11
    9236:	b9 2e       	mov	r11, r25
    9238:	2d e4       	ldi	r18, 0x4D	; 77
    923a:	c2 2e       	mov	r12, r18
    923c:	2b e0       	ldi	r18, 0x0B	; 11
    923e:	d2 2e       	mov	r13, r18
    9240:	3e e4       	ldi	r19, 0x4E	; 78
    9242:	e3 2e       	mov	r14, r19
    9244:	3b e0       	ldi	r19, 0x0B	; 11
    9246:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9248:	66 24       	eor	r6, r6
    924a:	6a 94       	dec	r6
    924c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    924e:	88 81       	ld	r24, Y
    9250:	85 ff       	sbrs	r24, 5
    9252:	42 c0       	rjmp	.+132    	; 0x92d8 <ProcessMusic+0x318>
    9254:	2d 89       	ldd	r18, Y+21	; 0x15
    9256:	3e 89       	ldd	r19, Y+22	; 0x16
    9258:	23 2b       	or	r18, r19
    925a:	09 f4       	brne	.+2      	; 0x925e <ProcessMusic+0x29e>
    925c:	3d c0       	rjmp	.+122    	; 0x92d8 <ProcessMusic+0x318>
    925e:	86 fd       	sbrc	r24, 6
    9260:	3b c0       	rjmp	.+118    	; 0x92d8 <ProcessMusic+0x318>
    9262:	47 01       	movw	r8, r14
    9264:	f2 e0       	ldi	r31, 0x02	; 2
    9266:	8f 1a       	sub	r8, r31
    9268:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    926a:	d6 01       	movw	r26, r12
    926c:	9c 91       	ld	r25, X
    926e:	f4 01       	movw	r30, r8
    9270:	80 81       	ld	r24, Z
    9272:	98 13       	cpse	r25, r24
    9274:	2e c0       	rjmp	.+92     	; 0x92d2 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    9276:	ed 89       	ldd	r30, Y+21	; 0x15
    9278:	fe 89       	ldd	r31, Y+22	; 0x16
    927a:	bf 01       	movw	r22, r30
    927c:	6f 5f       	subi	r22, 0xFF	; 255
    927e:	7f 4f       	sbci	r23, 0xFF	; 255
    9280:	7e 8b       	std	Y+22, r23	; 0x16
    9282:	6d 8b       	std	Y+21, r22	; 0x15
    9284:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    9286:	8f 3f       	cpi	r24, 0xFF	; 255
    9288:	31 f4       	brne	.+12     	; 0x9296 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    928a:	88 81       	ld	r24, Y
    928c:	8f 77       	andi	r24, 0x7F	; 127
    928e:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    9290:	1e 8a       	std	Y+22, r1	; 0x16
    9292:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    9294:	1e c0       	rjmp	.+60     	; 0x92d2 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    9296:	9f 01       	movw	r18, r30
    9298:	2e 5f       	subi	r18, 0xFE	; 254
    929a:	3f 4f       	sbci	r19, 0xFF	; 255
    929c:	3e 8b       	std	Y+22, r19	; 0x16
    929e:	2d 8b       	std	Y+21, r18	; 0x15
    92a0:	fb 01       	movw	r30, r22
    92a2:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    92a4:	e8 2f       	mov	r30, r24
    92a6:	f0 e0       	ldi	r31, 0x00	; 0
    92a8:	ee 0f       	add	r30, r30
    92aa:	ff 1f       	adc	r31, r31
    92ac:	e2 54       	subi	r30, 0x42	; 66
    92ae:	ff 4f       	sbci	r31, 0xFF	; 255
    92b0:	25 91       	lpm	r18, Z+
    92b2:	34 91       	lpm	r19, Z
    92b4:	ce 01       	movw	r24, r28
    92b6:	f9 01       	movw	r30, r18
    92b8:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    92ba:	ed 89       	ldd	r30, Y+21	; 0x15
    92bc:	fe 89       	ldd	r31, Y+22	; 0x16
    92be:	cf 01       	movw	r24, r30
    92c0:	01 96       	adiw	r24, 0x01	; 1
    92c2:	9e 8b       	std	Y+22, r25	; 0x16
    92c4:	8d 8b       	std	Y+21, r24	; 0x15
    92c6:	e4 91       	lpm	r30, Z
    92c8:	d4 01       	movw	r26, r8
    92ca:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    92cc:	f6 01       	movw	r30, r12
    92ce:	10 82       	st	Z, r1
    92d0:	cc cf       	rjmp	.-104    	; 0x926a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    92d2:	9f 5f       	subi	r25, 0xFF	; 255
    92d4:	d6 01       	movw	r26, r12
    92d6:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    92d8:	98 81       	ld	r25, Y
    92da:	95 ff       	sbrs	r25, 5
    92dc:	6c c0       	rjmp	.+216    	; 0x93b6 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    92de:	f7 01       	movw	r30, r14
    92e0:	80 81       	ld	r24, Z
    92e2:	8f 3f       	cpi	r24, 0xFF	; 255
    92e4:	11 f0       	breq	.+4      	; 0x92ea <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    92e6:	8f 5f       	subi	r24, 0xFF	; 255
    92e8:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    92ea:	97 fd       	sbrc	r25, 7
    92ec:	04 c0       	rjmp	.+8      	; 0x92f6 <ProcessMusic+0x336>
    92ee:	f7 01       	movw	r30, r14
    92f0:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    92f2:	90 81       	ld	r25, Z
    92f4:	01 c0       	rjmp	.+2      	; 0x92f8 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    92f6:	9f ef       	ldi	r25, 0xFF	; 255
    92f8:	f7 01       	movw	r30, r14
    92fa:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    92fc:	80 81       	ld	r24, Z
    92fe:	88 23       	and	r24, r24
    9300:	09 f4       	brne	.+2      	; 0x9304 <ProcessMusic+0x344>
    9302:	4e c0       	rjmp	.+156    	; 0x93a0 <ProcessMusic+0x3e0>
    9304:	31 96       	adiw	r30, 0x01	; 1
    9306:	50 81       	ld	r21, Z
    9308:	55 23       	and	r21, r21
    930a:	09 f4       	brne	.+2      	; 0x930e <ProcessMusic+0x34e>
    930c:	49 c0       	rjmp	.+146    	; 0x93a0 <ProcessMusic+0x3e0>
    930e:	99 23       	and	r25, r25
    9310:	09 f4       	brne	.+2      	; 0x9314 <ProcessMusic+0x354>
    9312:	46 c0       	rjmp	.+140    	; 0x93a0 <ProcessMusic+0x3e0>
    9314:	40 91 b2 0b 	lds	r20, 0x0BB2
    9318:	44 23       	and	r20, r20
    931a:	09 f4       	brne	.+2      	; 0x931e <ProcessMusic+0x35e>
    931c:	41 c0       	rjmp	.+130    	; 0x93a0 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    931e:	89 9f       	mul	r24, r25
    9320:	c0 01       	movw	r24, r0
    9322:	11 24       	eor	r1, r1
    9324:	93 95       	inc	r25
				uVol>>=8;
    9326:	89 2f       	mov	r24, r25
    9328:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    932a:	58 9f       	mul	r21, r24
    932c:	90 01       	movw	r18, r0
    932e:	59 9f       	mul	r21, r25
    9330:	30 0d       	add	r19, r0
    9332:	11 24       	eor	r1, r1
    9334:	c9 01       	movw	r24, r18
    9336:	93 95       	inc	r25
				uVol>>=8;
    9338:	89 2f       	mov	r24, r25
    933a:	99 27       	eor	r25, r25
    933c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    933e:	50 81       	ld	r21, Z
    9340:	58 9f       	mul	r21, r24
    9342:	90 01       	movw	r18, r0
    9344:	59 9f       	mul	r21, r25
    9346:	30 0d       	add	r19, r0
    9348:	11 24       	eor	r1, r1
    934a:	33 95       	inc	r19
					uVol>>=8;
    934c:	23 2f       	mov	r18, r19
    934e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    9350:	42 9f       	mul	r20, r18
    9352:	c0 01       	movw	r24, r0
    9354:	43 9f       	mul	r20, r19
    9356:	90 0d       	add	r25, r0
    9358:	11 24       	eor	r1, r1
    935a:	93 95       	inc	r25
				uVol>>=8;
    935c:	89 2f       	mov	r24, r25
    935e:	99 27       	eor	r25, r25
    9360:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    9362:	20 81       	ld	r18, Z
    9364:	22 23       	and	r18, r18
    9366:	f1 f0       	breq	.+60     	; 0x93a4 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9368:	d5 01       	movw	r26, r10
    936a:	ec 91       	ld	r30, X
    936c:	f0 e0       	ldi	r31, 0x00	; 0
    936e:	e0 50       	subi	r30, 0x00	; 0
    9370:	f9 46       	sbci	r31, 0x69	; 105
    9372:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9374:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9376:	2e 9f       	mul	r18, r30
    9378:	f0 01       	movw	r30, r0
    937a:	11 24       	eor	r1, r1
    937c:	f3 95       	inc	r31
					tVol>>=8;
    937e:	ef 2f       	mov	r30, r31
    9380:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9382:	a3 01       	movw	r20, r6
    9384:	4e 1b       	sub	r20, r30
    9386:	5f 0b       	sbc	r21, r31
    9388:	48 9f       	mul	r20, r24
    938a:	90 01       	movw	r18, r0
    938c:	49 9f       	mul	r20, r25
    938e:	30 0d       	add	r19, r0
    9390:	58 9f       	mul	r21, r24
    9392:	30 0d       	add	r19, r0
    9394:	11 24       	eor	r1, r1
    9396:	c9 01       	movw	r24, r18
    9398:	93 95       	inc	r25
					uVol>>=8;
    939a:	89 2f       	mov	r24, r25
    939c:	99 27       	eor	r25, r25
    939e:	02 c0       	rjmp	.+4      	; 0x93a4 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    93a0:	80 e0       	ldi	r24, 0x00	; 0
    93a2:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    93a4:	f5 01       	movw	r30, r10
    93a6:	30 81       	ld	r19, Z
    93a8:	f7 01       	movw	r30, r14
    93aa:	39 97       	sbiw	r30, 0x09	; 9
    93ac:	20 81       	ld	r18, Z
    93ae:	23 0f       	add	r18, r19
    93b0:	d5 01       	movw	r26, r10
    93b2:	2c 93       	st	X, r18
    93b4:	02 c0       	rjmp	.+4      	; 0x93ba <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    93b6:	80 e0       	ldi	r24, 0x00	; 0
    93b8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    93ba:	f8 01       	movw	r30, r16
    93bc:	80 83       	st	Z, r24
    93be:	67 96       	adiw	r28, 0x17	; 23
    93c0:	0a 5f       	subi	r16, 0xFA	; 250
    93c2:	1f 4f       	sbci	r17, 0xFF	; 255
    93c4:	f7 e1       	ldi	r31, 0x17	; 23
    93c6:	af 0e       	add	r10, r31
    93c8:	b1 1c       	adc	r11, r1
    93ca:	87 e1       	ldi	r24, 0x17	; 23
    93cc:	c8 0e       	add	r12, r24
    93ce:	d1 1c       	adc	r13, r1
    93d0:	97 e1       	ldi	r25, 0x17	; 23
    93d2:	e9 0e       	add	r14, r25
    93d4:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    93d6:	ab e0       	ldi	r26, 0x0B	; 11
    93d8:	cd 3a       	cpi	r28, 0xAD	; 173
    93da:	da 07       	cpc	r29, r26
    93dc:	09 f0       	breq	.+2      	; 0x93e0 <ProcessMusic+0x420>
    93de:	37 cf       	rjmp	.-402    	; 0x924e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    93e0:	df 91       	pop	r29
    93e2:	cf 91       	pop	r28
    93e4:	1f 91       	pop	r17
    93e6:	0f 91       	pop	r16
    93e8:	ff 90       	pop	r15
    93ea:	ef 90       	pop	r14
    93ec:	df 90       	pop	r13
    93ee:	cf 90       	pop	r12
    93f0:	bf 90       	pop	r11
    93f2:	af 90       	pop	r10
    93f4:	9f 90       	pop	r9
    93f6:	8f 90       	pop	r8
    93f8:	7f 90       	pop	r7
    93fa:	6f 90       	pop	r6
    93fc:	08 95       	ret

000093fe <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    93fe:	80 93 b2 0b 	sts	0x0BB2, r24
    9402:	08 95       	ret

00009404 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9404:	99 27       	eor	r25, r25
	clr r23
    9406:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9408:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    940a:	09 f4       	brne	.+2      	; 0x940e <set_note_waves>
		ret
    940c:	08 95       	ret

0000940e <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    940e:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9410:	f5 e9       	ldi	r31, 0x95	; 149
	lsl r22
    9412:	66 0f       	add	r22, r22
	rol r23
    9414:	77 1f       	adc	r23, r23
	add ZL,r22
    9416:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9418:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    941a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    941c:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    941e:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9420:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9422:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9424:	28 9f       	mul	r18, r24
	add ZL,r0
    9426:	e0 0d       	add	r30, r0
	adc ZH,r1
    9428:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    942a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    942c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    942e:	11 24       	eor	r1, r1
	

	ret
    9430:	08 95       	ret

00009432 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9432:	99 27       	eor	r25, r25
	clr r23
    9434:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9436:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    9438:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    943a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    943c:	28 9f       	mul	r18, r24
	add ZL,r0
    943e:	e0 0d       	add	r30, r0
	adc ZH,r1
    9440:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    9442:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9444:	31 f4       	brne	.+12     	; 0x9452 <smw1>
	lds r22,tr4_params
    9446:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    944a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    944c:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    9450:	0b c0       	rjmp	.+22     	; 0x9468 <esmw>

00009452 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9452:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9454:	31 f4       	brne	.+12     	; 0x9462 <smw2>
	lds r22,tr4_params
    9456:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    945a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    945c:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    9460:	03 c0       	rjmp	.+6      	; 0x9468 <esmw>

00009462 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9462:	77 e9       	ldi	r23, 0x97	; 151
	add r23,r22
    9464:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9466:	75 83       	std	Z+5, r23	; 0x05

00009468 <esmw>:

esmw:
	clr r1	
    9468:	11 24       	eor	r1, r1
	ret
    946a:	08 95       	ret
	...

00009500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9502:	80 93 01 0b 	sts	0x0B01, r24
	ret
    9506:	08 95       	ret

00009508 <steptable>:
    9508:	22 00       	.word	0x0022	; ????
    950a:	24 00       	.word	0x0024	; ????
    950c:	26 00       	.word	0x0026	; ????
    950e:	28 00       	.word	0x0028	; ????
    9510:	2b 00       	.word	0x002b	; ????
    9512:	2d 00       	.word	0x002d	; ????
    9514:	30 00       	.word	0x0030	; ????
    9516:	33 00       	.word	0x0033	; ????
    9518:	36 00       	.word	0x0036	; ????
    951a:	39 00       	.word	0x0039	; ????
    951c:	3d 00       	.word	0x003d	; ????
    951e:	40 00       	.word	0x0040	; ????
    9520:	44 00       	.word	0x0044	; ????
    9522:	48 00       	.word	0x0048	; ????
    9524:	4c 00       	.word	0x004c	; ????
    9526:	51 00       	.word	0x0051	; ????
    9528:	56 00       	.word	0x0056	; ????
    952a:	5b 00       	.word	0x005b	; ????
    952c:	60 00       	.word	0x0060	; ????
    952e:	66 00       	.word	0x0066	; ????
    9530:	6c 00       	.word	0x006c	; ????
    9532:	73 00       	.word	0x0073	; ????
    9534:	79 00       	.word	0x0079	; ????
    9536:	81 00       	.word	0x0081	; ????
    9538:	88 00       	.word	0x0088	; ????
    953a:	90 00       	.word	0x0090	; ????
    953c:	99 00       	.word	0x0099	; ????
    953e:	a2 00       	.word	0x00a2	; ????
    9540:	ac 00       	.word	0x00ac	; ????
    9542:	b6 00       	.word	0x00b6	; ????
    9544:	c1 00       	.word	0x00c1	; ????
    9546:	cc 00       	.word	0x00cc	; ????
    9548:	d8 00       	.word	0x00d8	; ????
    954a:	e5 00       	.word	0x00e5	; ????
    954c:	f3 00       	.word	0x00f3	; ????
    954e:	01 01       	movw	r0, r2
    9550:	10 01       	movw	r2, r0
    9552:	21 01       	movw	r4, r2
    9554:	32 01       	movw	r6, r4
    9556:	44 01       	movw	r8, r8
    9558:	57 01       	movw	r10, r14
    955a:	6c 01       	movw	r12, r24
    955c:	81 01       	movw	r16, r2
    955e:	98 01       	movw	r18, r16
    9560:	b0 01       	movw	r22, r0
    9562:	ca 01       	movw	r24, r20
    9564:	e5 01       	movw	r28, r10
    9566:	02 02       	muls	r16, r18
    9568:	21 02       	muls	r18, r17
    956a:	41 02       	muls	r20, r17
    956c:	64 02       	muls	r22, r20
    956e:	88 02       	muls	r24, r24
    9570:	ae 02       	muls	r26, r30
    9572:	d7 02       	muls	r29, r23
    9574:	03 03       	mulsu	r16, r19
    9576:	30 03       	mulsu	r19, r16
    9578:	61 03       	mulsu	r22, r17
    957a:	94 03       	fmuls	r17, r20
    957c:	cb 03       	fmulsu	r20, r19
    957e:	05 04       	cpc	r0, r5
    9580:	42 04       	cpc	r4, r2
    9582:	83 04       	cpc	r8, r3
    9584:	c7 04       	cpc	r12, r7
    9586:	10 05       	cpc	r17, r0
    9588:	5d 05       	cpc	r21, r13
    958a:	af 05       	cpc	r26, r15
    958c:	05 06       	cpc	r0, r21
    958e:	61 06       	cpc	r6, r17
    9590:	c2 06       	cpc	r12, r18
    9592:	29 07       	cpc	r18, r25
    9594:	96 07       	cpc	r25, r22
    9596:	09 08       	sbc	r0, r9
    9598:	83 08       	sbc	r8, r3
    959a:	05 09       	sbc	r16, r5
    959c:	8e 09       	sbc	r24, r14
    959e:	20 0a       	sbc	r2, r16
    95a0:	ba 0a       	sbc	r11, r26
    95a2:	5d 0b       	sbc	r21, r29
    95a4:	0a 0c       	add	r0, r10
    95a6:	c1 0c       	add	r12, r1
    95a8:	84 0d       	add	r24, r4
    95aa:	51 0e       	add	r5, r17
    95ac:	2b 0f       	add	r18, r27
    95ae:	12 10       	cpse	r1, r2
    95b0:	07 11       	cpse	r16, r7
    95b2:	0a 12       	cpse	r0, r26
    95b4:	1d 13       	cpse	r17, r29
    95b6:	40 14       	cp	r4, r0
    95b8:	74 15       	cp	r23, r4
    95ba:	ba 16       	cp	r11, r26
    95bc:	14 18       	sub	r1, r4
    95be:	83 19       	sub	r24, r3
    95c0:	07 1b       	sub	r16, r23
    95c2:	a3 1c       	adc	r10, r3
    95c4:	57 1e       	adc	r5, r23
    95c6:	24 20       	and	r2, r4
    95c8:	0e 22       	and	r0, r30
    95ca:	14 24       	eor	r1, r4
    95cc:	39 26       	eor	r3, r25
    95ce:	7f 28       	or	r7, r15
    95d0:	e8 2a       	or	r14, r24
    95d2:	75 2d       	mov	r23, r5
    95d4:	29 30       	cpi	r18, 0x09	; 9
    95d6:	06 33       	cpi	r16, 0x36	; 54
    95d8:	0f 36       	cpi	r16, 0x6F	; 111
    95da:	45 39       	cpi	r20, 0x95	; 149
    95dc:	ad 3c       	cpi	r26, 0xCD	; 205
    95de:	49 40       	sbci	r20, 0x09	; 9
    95e0:	1b 44       	sbci	r17, 0x4B	; 75
    95e2:	28 48       	sbci	r18, 0x88	; 136
    95e4:	73 4c       	sbci	r23, 0xC3	; 195
    95e6:	fe 50       	subi	r31, 0x0E	; 14
    95e8:	cf 55       	subi	r28, 0x5F	; 95
    95ea:	ea 5a       	subi	r30, 0xAA	; 170
    95ec:	51 60       	ori	r21, 0x01	; 1
    95ee:	0c 66       	ori	r16, 0x6C	; 108
    95f0:	1d 6c       	ori	r17, 0xCD	; 205
    95f2:	8b 72       	andi	r24, 0x2B	; 43
    95f4:	5a 79       	andi	r21, 0x9A	; 154
    95f6:	92 80       	ldd	r9, Z+2	; 0x02
    95f8:	37 88       	ldd	r3, Z+23	; 0x17
    95fa:	50 90 e5 98 	lds	r5, 0x98E5
    95fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9600:	9f ab       	std	Y+55, r25	; 0x37
    9602:	d3 b5       	in	r29, 0x23	; 35
    9604:	a3 c0       	rjmp	.+326    	; 0x974c <waves+0x4c>
	...

00009700 <waves>:
    9700:	00 03       	mulsu	r16, r16
    9702:	06 09       	sbc	r16, r6
    9704:	0c 10       	cpse	r0, r12
    9706:	13 16       	cp	r1, r19
    9708:	19 1c       	adc	r1, r9
    970a:	1f 22       	and	r1, r31
    970c:	25 28       	or	r2, r5
    970e:	2b 2e       	mov	r2, r27
    9710:	31 33       	cpi	r19, 0x31	; 49
    9712:	36 39       	cpi	r19, 0x96	; 150
    9714:	3c 3f       	cpi	r19, 0xFC	; 252
    9716:	41 44       	sbci	r20, 0x41	; 65
    9718:	47 49       	sbci	r20, 0x97	; 151
    971a:	4c 4e       	sbci	r20, 0xEC	; 236
    971c:	51 53       	subi	r21, 0x31	; 49
    971e:	55 58       	subi	r21, 0x85	; 133
    9720:	5a 5c       	subi	r21, 0xCA	; 202
    9722:	5e 60       	ori	r21, 0x0E	; 14
    9724:	62 64       	ori	r22, 0x42	; 66
    9726:	66 68       	ori	r22, 0x86	; 134
    9728:	6a 6b       	ori	r22, 0xBA	; 186
    972a:	6d 6f       	ori	r22, 0xFD	; 253
    972c:	70 71       	andi	r23, 0x10	; 16
    972e:	73 74       	andi	r23, 0x43	; 67
    9730:	75 76       	andi	r23, 0x65	; 101
    9732:	78 79       	andi	r23, 0x98	; 152
    9734:	7a 7a       	andi	r23, 0xAA	; 170
    9736:	7b 7c       	andi	r23, 0xCB	; 203
    9738:	7d 7d       	andi	r23, 0xDD	; 221
    973a:	7e 7e       	andi	r23, 0xEE	; 238
    973c:	7e 7f       	andi	r23, 0xFE	; 254
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7e 7e       	andi	r23, 0xEE	; 238
    9746:	7e 7d       	andi	r23, 0xDE	; 222
    9748:	7d 7c       	andi	r23, 0xCD	; 205
    974a:	7b 7a       	andi	r23, 0xAB	; 171
    974c:	7a 79       	andi	r23, 0x9A	; 154
    974e:	78 76       	andi	r23, 0x68	; 104
    9750:	75 74       	andi	r23, 0x45	; 69
    9752:	73 71       	andi	r23, 0x13	; 19
    9754:	70 6f       	ori	r23, 0xF0	; 240
    9756:	6d 6b       	ori	r22, 0xBD	; 189
    9758:	6a 68       	ori	r22, 0x8A	; 138
    975a:	66 64       	ori	r22, 0x46	; 70
    975c:	62 60       	ori	r22, 0x02	; 2
    975e:	5e 5c       	subi	r21, 0xCE	; 206
    9760:	5a 58       	subi	r21, 0x8A	; 138
    9762:	55 53       	subi	r21, 0x35	; 53
    9764:	51 4e       	sbci	r21, 0xE1	; 225
    9766:	4c 49       	sbci	r20, 0x9C	; 156
    9768:	47 44       	sbci	r20, 0x47	; 71
    976a:	41 3f       	cpi	r20, 0xF1	; 241
    976c:	3c 39       	cpi	r19, 0x9C	; 156
    976e:	36 33       	cpi	r19, 0x36	; 54
    9770:	31 2e       	mov	r3, r17
    9772:	2b 28       	or	r2, r11
    9774:	25 22       	and	r2, r21
    9776:	1f 1c       	adc	r1, r15
    9778:	19 16       	cp	r1, r25
    977a:	13 10       	cpse	r1, r3
    977c:	0c 09       	sbc	r16, r12
    977e:	06 03       	mulsu	r16, r22
    9780:	00 fd       	sbrc	r16, 0
    9782:	fa f7       	brpl	.-2      	; 0x9782 <waves+0x82>
    9784:	f4 f0       	brlt	.+60     	; 0x97c2 <waves+0xc2>
    9786:	ed ea       	ldi	r30, 0xAD	; 173
    9788:	e7 e4       	ldi	r30, 0x47	; 71
    978a:	e1 de       	rcall	.-574    	; 0x954e <steptable+0x46>
    978c:	db d8       	rcall	.-3658   	; 0x8944 <ReadButtons+0x34>
    978e:	d5 d2       	rcall	.+1450   	; 0x9d3a <waves+0x63a>
    9790:	cf cd       	rjmp	.-1122   	; 0x9330 <ProcessMusic+0x370>
    9792:	ca c7       	rjmp	.+3988   	; 0xa728 <LBGetJoyPadState+0x72>
    9794:	c4 c1       	rjmp	.+904    	; 0x9b1e <waves+0x41e>
    9796:	bf bc       	out	0x2f, r11	; 47
    9798:	b9 b7       	in	r27, 0x39	; 57
    979a:	b4 b2       	in	r11, 0x14	; 20
    979c:	af ad       	ldd	r26, Y+63	; 0x3f
    979e:	ab a8       	ldd	r10, Y+51	; 0x33
    97a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    97a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    97a4:	9e 9c       	mul	r9, r14
    97a6:	9a 98       	cbi	0x13, 2	; 19
    97a8:	96 95       	lsr	r25
    97aa:	93 91       	.word	0x9193	; ????
    97ac:	90 8f       	std	Z+24, r25	; 0x18
    97ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    97b0:	8b 8a       	std	Y+19, r8	; 0x13
    97b2:	88 87       	std	Y+8, r24	; 0x08
    97b4:	86 86       	std	Z+14, r8	; 0x0e
    97b6:	85 84       	ldd	r8, Z+13	; 0x0d
    97b8:	83 83       	std	Z+3, r24	; 0x03
    97ba:	82 82       	std	Z+2, r8	; 0x02
    97bc:	82 81       	ldd	r24, Z+2	; 0x02
    97be:	81 81       	ldd	r24, Z+1	; 0x01
    97c0:	81 81       	ldd	r24, Z+1	; 0x01
    97c2:	81 81       	ldd	r24, Z+1	; 0x01
    97c4:	82 82       	std	Z+2, r8	; 0x02
    97c6:	82 83       	std	Z+2, r24	; 0x02
    97c8:	83 84       	ldd	r8, Z+11	; 0x0b
    97ca:	85 86       	std	Z+13, r8	; 0x0d
    97cc:	86 87       	std	Z+14, r24	; 0x0e
    97ce:	88 8a       	std	Y+16, r8	; 0x10
    97d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    97d2:	8d 8f       	std	Y+29, r24	; 0x1d
    97d4:	90 91 93 95 	lds	r25, 0x9593
    97d8:	96 98       	cbi	0x12, 6	; 18
    97da:	9a 9c       	mul	r9, r10
    97dc:	9e a0       	ldd	r9, Y+38	; 0x26
    97de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    97e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    97e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    97e4:	af b2       	in	r10, 0x1f	; 31
    97e6:	b4 b7       	in	r27, 0x34	; 52
    97e8:	b9 bc       	out	0x29, r11	; 41
    97ea:	bf c1       	rjmp	.+894    	; 0x9b6a <waves+0x46a>
    97ec:	c4 c7       	rjmp	.+3976   	; 0xa776 <LBPrintStr+0x12>
    97ee:	ca cd       	rjmp	.-1132   	; 0x9384 <ProcessMusic+0x3c4>
    97f0:	cf d2       	rcall	.+1438   	; 0x9d90 <waves+0x690>
    97f2:	d5 d8       	rcall	.-3670   	; 0x899e <FormatEeprom+0x2>
    97f4:	db de       	rcall	.-586    	; 0x95ac <steptable+0xa4>
    97f6:	e1 e4       	ldi	r30, 0x41	; 65
    97f8:	e7 ea       	ldi	r30, 0xA7	; 167
    97fa:	ed f0       	brhs	.+58     	; 0x9836 <waves+0x136>
    97fc:	f4 f7       	brge	.-4      	; 0x97fa <waves+0xfa>
    97fe:	fa fd       	.word	0xfdfa	; ????
    9800:	80 81       	ld	r24, Z
    9802:	82 83       	std	Z+2, r24	; 0x02
    9804:	84 85       	ldd	r24, Z+12	; 0x0c
    9806:	86 87       	std	Z+14, r24	; 0x0e
    9808:	88 89       	ldd	r24, Y+16	; 0x10
    980a:	8a 8b       	std	Y+18, r24	; 0x12
    980c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    980e:	8e 8f       	std	Y+30, r24	; 0x1e
    9810:	90 91 92 93 	lds	r25, 0x9392
    9814:	94 95       	.word	0x9594	; ????
    9816:	96 97       	sbiw	r26, 0x26	; 38
    9818:	98 99       	sbic	0x13, 0	; 19
    981a:	9a 9b       	sbis	0x13, 2	; 19
    981c:	9c 9d       	mul	r25, r12
    981e:	9e 9f       	mul	r25, r30
    9820:	a0 a1       	ldd	r26, Z+32	; 0x20
    9822:	a2 a3       	std	Z+34, r26	; 0x22
    9824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9826:	a6 a7       	std	Z+46, r26	; 0x2e
    9828:	a8 a9       	ldd	r26, Y+48	; 0x30
    982a:	aa ab       	std	Y+50, r26	; 0x32
    982c:	ac ad       	ldd	r26, Y+60	; 0x3c
    982e:	ae af       	std	Y+62, r26	; 0x3e
    9830:	b0 b1       	in	r27, 0x00	; 0
    9832:	b2 b3       	in	r27, 0x12	; 18
    9834:	b4 b5       	in	r27, 0x24	; 36
    9836:	b6 b7       	in	r27, 0x36	; 54
    9838:	b8 b9       	out	0x08, r27	; 8
    983a:	ba bb       	out	0x1a, r27	; 26
    983c:	bc bd       	out	0x2c, r27	; 44
    983e:	be bf       	out	0x3e, r27	; 62
    9840:	c0 c1       	rjmp	.+896    	; 0x9bc2 <waves+0x4c2>
    9842:	c2 c3       	rjmp	.+1924   	; 0x9fc8 <waves+0x8c8>
    9844:	c4 c5       	rjmp	.+2952   	; 0xa3ce <MoveSprite+0x2a>
    9846:	c6 c7       	rjmp	.+3980   	; 0xa7d4 <LBCollides+0xe>
    9848:	c8 c9       	rjmp	.-3184   	; 0x8bda <PatchCommand07+0x4>
    984a:	ca cb       	rjmp	.-2156   	; 0x8fe0 <ProcessMusic+0x20>
    984c:	cc cd       	rjmp	.-1128   	; 0x93e6 <ProcessMusic+0x426>
    984e:	ce cf       	rjmp	.-100    	; 0x97ec <waves+0xec>
    9850:	d0 d1       	rcall	.+928    	; 0x9bf2 <waves+0x4f2>
    9852:	d2 d3       	rcall	.+1956   	; 0x9ff8 <waves+0x8f8>
    9854:	d4 d5       	rcall	.+2984   	; 0xa3fe <InitializeVideoMode+0xe>
    9856:	d6 d7       	rcall	.+4012   	; 0xa804 <LBCollides+0x3e>
    9858:	d8 d9       	rcall	.-3152   	; 0x8c0a <PatchCommand11+0x22>
    985a:	da db       	rcall	.-2124   	; 0x9010 <ProcessMusic+0x50>
    985c:	dc dd       	rcall	.-1096   	; 0x9416 <set_note_waves+0x8>
    985e:	de df       	rcall	.-68     	; 0x981c <waves+0x11c>
    9860:	e0 e1       	ldi	r30, 0x10	; 16
    9862:	e2 e3       	ldi	r30, 0x32	; 50
    9864:	e4 e5       	ldi	r30, 0x54	; 84
    9866:	e6 e7       	ldi	r30, 0x76	; 118
    9868:	e8 e9       	ldi	r30, 0x98	; 152
    986a:	ea eb       	ldi	r30, 0xBA	; 186
    986c:	ec ed       	ldi	r30, 0xDC	; 220
    986e:	ee ef       	ldi	r30, 0xFE	; 254
    9870:	f0 f1       	brcs	.+124    	; 0x98ee <waves+0x1ee>
    9872:	f2 f3       	brmi	.-4      	; 0x9870 <waves+0x170>
    9874:	f4 f5       	brge	.+124    	; 0x98f2 <waves+0x1f2>
    9876:	f6 f7       	brtc	.-4      	; 0x9874 <waves+0x174>
    9878:	f8 f9       	.word	0xf9f8	; ????
    987a:	fa fb       	.word	0xfbfa	; ????
    987c:	fc fd       	.word	0xfdfc	; ????
    987e:	fe ff       	.word	0xfffe	; ????
    9880:	00 01       	movw	r0, r0
    9882:	02 03       	mulsu	r16, r18
    9884:	04 05       	cpc	r16, r4
    9886:	06 07       	cpc	r16, r22
    9888:	08 09       	sbc	r16, r8
    988a:	0a 0b       	sbc	r16, r26
    988c:	0c 0d       	add	r16, r12
    988e:	0e 0f       	add	r16, r30
    9890:	10 11       	cpse	r17, r0
    9892:	12 13       	cpse	r17, r18
    9894:	14 15       	cp	r17, r4
    9896:	16 17       	cp	r17, r22
    9898:	18 19       	sub	r17, r8
    989a:	1a 1b       	sub	r17, r26
    989c:	1c 1d       	adc	r17, r12
    989e:	1e 1f       	adc	r17, r30
    98a0:	20 21       	and	r18, r0
    98a2:	22 23       	and	r18, r18
    98a4:	24 25       	eor	r18, r4
    98a6:	26 27       	eor	r18, r22
    98a8:	28 29       	or	r18, r8
    98aa:	2a 2b       	or	r18, r26
    98ac:	2c 2d       	mov	r18, r12
    98ae:	2e 2f       	mov	r18, r30
    98b0:	30 31       	cpi	r19, 0x10	; 16
    98b2:	32 33       	cpi	r19, 0x32	; 50
    98b4:	34 35       	cpi	r19, 0x54	; 84
    98b6:	36 37       	cpi	r19, 0x76	; 118
    98b8:	38 39       	cpi	r19, 0x98	; 152
    98ba:	3a 3b       	cpi	r19, 0xBA	; 186
    98bc:	3c 3d       	cpi	r19, 0xDC	; 220
    98be:	3e 3f       	cpi	r19, 0xFE	; 254
    98c0:	40 41       	sbci	r20, 0x10	; 16
    98c2:	42 43       	sbci	r20, 0x32	; 50
    98c4:	44 45       	sbci	r20, 0x54	; 84
    98c6:	46 47       	sbci	r20, 0x76	; 118
    98c8:	48 49       	sbci	r20, 0x98	; 152
    98ca:	4a 4b       	sbci	r20, 0xBA	; 186
    98cc:	4c 4d       	sbci	r20, 0xDC	; 220
    98ce:	4e 4f       	sbci	r20, 0xFE	; 254
    98d0:	50 51       	subi	r21, 0x10	; 16
    98d2:	52 53       	subi	r21, 0x32	; 50
    98d4:	54 55       	subi	r21, 0x54	; 84
    98d6:	56 57       	subi	r21, 0x76	; 118
    98d8:	58 59       	subi	r21, 0x98	; 152
    98da:	5a 5b       	subi	r21, 0xBA	; 186
    98dc:	5c 5d       	subi	r21, 0xDC	; 220
    98de:	5e 5f       	subi	r21, 0xFE	; 254
    98e0:	60 61       	ori	r22, 0x10	; 16
    98e2:	62 63       	ori	r22, 0x32	; 50
    98e4:	64 65       	ori	r22, 0x54	; 84
    98e6:	66 67       	ori	r22, 0x76	; 118
    98e8:	68 69       	ori	r22, 0x98	; 152
    98ea:	6a 6b       	ori	r22, 0xBA	; 186
    98ec:	6c 6d       	ori	r22, 0xDC	; 220
    98ee:	6e 6f       	ori	r22, 0xFE	; 254
    98f0:	70 71       	andi	r23, 0x10	; 16
    98f2:	72 73       	andi	r23, 0x32	; 50
    98f4:	74 75       	andi	r23, 0x54	; 84
    98f6:	76 77       	andi	r23, 0x76	; 118
    98f8:	78 79       	andi	r23, 0x98	; 152
    98fa:	7a 7b       	andi	r23, 0xBA	; 186
    98fc:	7c 7d       	andi	r23, 0xDC	; 220
    98fe:	7e 7f       	andi	r23, 0xFE	; 254
    9900:	00 02       	muls	r16, r16
    9902:	04 06       	cpc	r0, r20
    9904:	08 0a       	sbc	r0, r24
    9906:	0c 0e       	add	r0, r28
    9908:	10 12       	cpse	r1, r16
    990a:	14 16       	cp	r1, r20
    990c:	18 1a       	sub	r1, r24
    990e:	1c 1e       	adc	r1, r28
    9910:	20 22       	and	r2, r16
    9912:	24 26       	eor	r2, r20
    9914:	28 2a       	or	r2, r24
    9916:	2c 2e       	mov	r2, r28
    9918:	30 32       	cpi	r19, 0x20	; 32
    991a:	34 36       	cpi	r19, 0x64	; 100
    991c:	38 3a       	cpi	r19, 0xA8	; 168
    991e:	3c 3e       	cpi	r19, 0xEC	; 236
    9920:	40 42       	sbci	r20, 0x20	; 32
    9922:	44 46       	sbci	r20, 0x64	; 100
    9924:	48 4a       	sbci	r20, 0xA8	; 168
    9926:	4c 4e       	sbci	r20, 0xEC	; 236
    9928:	50 52       	subi	r21, 0x20	; 32
    992a:	54 56       	subi	r21, 0x64	; 100
    992c:	58 5a       	subi	r21, 0xA8	; 168
    992e:	5c 5e       	subi	r21, 0xEC	; 236
    9930:	60 62       	ori	r22, 0x20	; 32
    9932:	64 66       	ori	r22, 0x64	; 100
    9934:	68 6a       	ori	r22, 0xA8	; 168
    9936:	6c 6e       	ori	r22, 0xEC	; 236
    9938:	70 72       	andi	r23, 0x20	; 32
    993a:	74 76       	andi	r23, 0x64	; 100
    993c:	78 7a       	andi	r23, 0xA8	; 168
    993e:	7c 7e       	andi	r23, 0xEC	; 236
    9940:	7f 7d       	andi	r23, 0xDF	; 223
    9942:	7b 79       	andi	r23, 0x9B	; 155
    9944:	77 75       	andi	r23, 0x57	; 87
    9946:	73 71       	andi	r23, 0x13	; 19
    9948:	6f 6d       	ori	r22, 0xDF	; 223
    994a:	6b 69       	ori	r22, 0x9B	; 155
    994c:	67 65       	ori	r22, 0x57	; 87
    994e:	63 61       	ori	r22, 0x13	; 19
    9950:	5f 5d       	subi	r21, 0xDF	; 223
    9952:	5b 59       	subi	r21, 0x9B	; 155
    9954:	57 55       	subi	r21, 0x57	; 87
    9956:	53 51       	subi	r21, 0x13	; 19
    9958:	4f 4d       	sbci	r20, 0xDF	; 223
    995a:	4b 49       	sbci	r20, 0x9B	; 155
    995c:	47 45       	sbci	r20, 0x57	; 87
    995e:	43 41       	sbci	r20, 0x13	; 19
    9960:	3f 3d       	cpi	r19, 0xDF	; 223
    9962:	3b 39       	cpi	r19, 0x9B	; 155
    9964:	37 35       	cpi	r19, 0x57	; 87
    9966:	33 31       	cpi	r19, 0x13	; 19
    9968:	2f 2d       	mov	r18, r15
    996a:	2b 29       	or	r18, r11
    996c:	27 25       	eor	r18, r7
    996e:	23 21       	and	r18, r3
    9970:	1f 1d       	adc	r17, r15
    9972:	1b 19       	sub	r17, r11
    9974:	17 15       	cp	r17, r7
    9976:	13 11       	cpse	r17, r3
    9978:	0f 0d       	add	r16, r15
    997a:	0b 09       	sbc	r16, r11
    997c:	07 05       	cpc	r16, r7
    997e:	03 01       	movw	r0, r6
    9980:	ff fd       	.word	0xfdff	; ????
    9982:	fb f9       	.word	0xf9fb	; ????
    9984:	f7 f5       	brid	.+124    	; 0x9a02 <waves+0x302>
    9986:	f3 f1       	brvs	.+124    	; 0x9a04 <waves+0x304>
    9988:	ef ed       	ldi	r30, 0xDF	; 223
    998a:	eb e9       	ldi	r30, 0x9B	; 155
    998c:	e7 e5       	ldi	r30, 0x57	; 87
    998e:	e3 e1       	ldi	r30, 0x13	; 19
    9990:	df dd       	rcall	.-1090   	; 0x9550 <steptable+0x48>
    9992:	db d9       	rcall	.-3146   	; 0x8d4a <ReadVarLen+0x2>
    9994:	d7 d5       	rcall	.+2990   	; 0xa544 <PrintChar+0x2>
    9996:	d3 d1       	rcall	.+934    	; 0x9d3e <waves+0x63e>
    9998:	cf cd       	rjmp	.-1122   	; 0x9538 <steptable+0x30>
    999a:	cb c9       	rjmp	.-3178   	; 0x8d32 <InitMusicPlayer+0x2e>
    999c:	c7 c5       	rjmp	.+2958   	; 0xa52c <Print+0x20>
    999e:	c3 c1       	rjmp	.+902    	; 0x9d26 <waves+0x626>
    99a0:	bf bd       	out	0x2f, r27	; 47
    99a2:	bb b9       	out	0x0b, r27	; 11
    99a4:	b7 b5       	in	r27, 0x27	; 39
    99a6:	b3 b1       	in	r27, 0x03	; 3
    99a8:	af ad       	ldd	r26, Y+63	; 0x3f
    99aa:	ab a9       	ldd	r26, Y+51	; 0x33
    99ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    99b0:	9f 9d       	mul	r25, r15
    99b2:	9b 99       	sbic	0x13, 3	; 19
    99b4:	97 95       	ror	r25
    99b6:	93 91       	.word	0x9193	; ????
    99b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99ba:	8b 89       	ldd	r24, Y+19	; 0x13
    99bc:	87 85       	ldd	r24, Z+15	; 0x0f
    99be:	83 81       	ldd	r24, Z+3	; 0x03
    99c0:	80 82       	st	Z, r8
    99c2:	84 86       	std	Z+12, r8	; 0x0c
    99c4:	88 8a       	std	Y+16, r8	; 0x10
    99c6:	8c 8e       	std	Y+28, r8	; 0x1c
    99c8:	90 92 94 96 	sts	0x9694, r9
    99cc:	98 9a       	sbi	0x13, 0	; 19
    99ce:	9c 9e       	mul	r9, r28
    99d0:	a0 a2       	std	Z+32, r10	; 0x20
    99d2:	a4 a6       	std	Z+44, r10	; 0x2c
    99d4:	a8 aa       	std	Y+48, r10	; 0x30
    99d6:	ac ae       	std	Y+60, r10	; 0x3c
    99d8:	b0 b2       	in	r11, 0x10	; 16
    99da:	b4 b6       	in	r11, 0x34	; 52
    99dc:	b8 ba       	out	0x18, r11	; 24
    99de:	bc be       	out	0x3c, r11	; 60
    99e0:	c0 c2       	rjmp	.+1408   	; 0x9f62 <waves+0x862>
    99e2:	c4 c6       	rjmp	.+3464   	; 0xa76c <LBPrintStr+0x8>
    99e4:	c8 ca       	rjmp	.-2672   	; 0x8f76 <TriggerNote+0x36>
    99e6:	cc ce       	rjmp	.-616    	; 0x9780 <waves+0x80>
    99e8:	d0 d2       	rcall	.+1440   	; 0x9f8a <waves+0x88a>
    99ea:	d4 d6       	rcall	.+3496   	; 0xa794 <LBPrintStr+0x30>
    99ec:	d8 da       	rcall	.-2640   	; 0x8f9e <TriggerNote+0x5e>
    99ee:	dc de       	rcall	.-584    	; 0x97a8 <waves+0xa8>
    99f0:	e0 e2       	ldi	r30, 0x20	; 32
    99f2:	e4 e6       	ldi	r30, 0x64	; 100
    99f4:	e8 ea       	ldi	r30, 0xA8	; 168
    99f6:	ec ee       	ldi	r30, 0xEC	; 236
    99f8:	f0 f2       	brcs	.-68     	; 0x99b6 <waves+0x2b6>
    99fa:	f4 f6       	brge	.-68     	; 0x99b8 <waves+0x2b8>
    99fc:	f8 fa       	.word	0xfaf8	; ????
    99fe:	fc fe       	.word	0xfefc	; ????
    9a00:	7f 7f       	andi	r23, 0xFF	; 255
    9a02:	7f 7f       	andi	r23, 0xFF	; 255
    9a04:	7f 7f       	andi	r23, 0xFF	; 255
    9a06:	7f 7f       	andi	r23, 0xFF	; 255
    9a08:	7f 7f       	andi	r23, 0xFF	; 255
    9a0a:	7f 7f       	andi	r23, 0xFF	; 255
    9a0c:	7f 7f       	andi	r23, 0xFF	; 255
    9a0e:	7f 7f       	andi	r23, 0xFF	; 255
    9a10:	7f 7f       	andi	r23, 0xFF	; 255
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	80 80       	ld	r8, Z
    9a42:	80 80       	ld	r8, Z
    9a44:	80 80       	ld	r8, Z
    9a46:	80 80       	ld	r8, Z
    9a48:	80 80       	ld	r8, Z
    9a4a:	80 80       	ld	r8, Z
    9a4c:	80 80       	ld	r8, Z
    9a4e:	80 80       	ld	r8, Z
    9a50:	80 80       	ld	r8, Z
    9a52:	80 80       	ld	r8, Z
    9a54:	80 80       	ld	r8, Z
    9a56:	80 80       	ld	r8, Z
    9a58:	80 80       	ld	r8, Z
    9a5a:	80 80       	ld	r8, Z
    9a5c:	80 80       	ld	r8, Z
    9a5e:	80 80       	ld	r8, Z
    9a60:	80 80       	ld	r8, Z
    9a62:	80 80       	ld	r8, Z
    9a64:	80 80       	ld	r8, Z
    9a66:	80 80       	ld	r8, Z
    9a68:	80 80       	ld	r8, Z
    9a6a:	80 80       	ld	r8, Z
    9a6c:	80 80       	ld	r8, Z
    9a6e:	80 80       	ld	r8, Z
    9a70:	80 80       	ld	r8, Z
    9a72:	80 80       	ld	r8, Z
    9a74:	80 80       	ld	r8, Z
    9a76:	80 80       	ld	r8, Z
    9a78:	80 80       	ld	r8, Z
    9a7a:	80 80       	ld	r8, Z
    9a7c:	80 80       	ld	r8, Z
    9a7e:	80 80       	ld	r8, Z
    9a80:	80 80       	ld	r8, Z
    9a82:	80 80       	ld	r8, Z
    9a84:	80 80       	ld	r8, Z
    9a86:	80 80       	ld	r8, Z
    9a88:	80 80       	ld	r8, Z
    9a8a:	80 80       	ld	r8, Z
    9a8c:	80 80       	ld	r8, Z
    9a8e:	80 80       	ld	r8, Z
    9a90:	80 80       	ld	r8, Z
    9a92:	80 80       	ld	r8, Z
    9a94:	80 80       	ld	r8, Z
    9a96:	80 80       	ld	r8, Z
    9a98:	80 80       	ld	r8, Z
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 80       	ld	r8, Z
    9af6:	80 80       	ld	r8, Z
    9af8:	80 80       	ld	r8, Z
    9afa:	80 80       	ld	r8, Z
    9afc:	80 80       	ld	r8, Z
    9afe:	80 80       	ld	r8, Z
    9b00:	7f 7f       	andi	r23, 0xFF	; 255
    9b02:	7f 7f       	andi	r23, 0xFF	; 255
    9b04:	7f 7f       	andi	r23, 0xFF	; 255
    9b06:	7f 7f       	andi	r23, 0xFF	; 255
    9b08:	7f 7f       	andi	r23, 0xFF	; 255
    9b0a:	7f 7f       	andi	r23, 0xFF	; 255
    9b0c:	7f 7f       	andi	r23, 0xFF	; 255
    9b0e:	7f 7f       	andi	r23, 0xFF	; 255
    9b10:	7f 7f       	andi	r23, 0xFF	; 255
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7f       	andi	r23, 0xFF	; 255
    9b7c:	7f 7f       	andi	r23, 0xFF	; 255
    9b7e:	7f 7f       	andi	r23, 0xFF	; 255
    9b80:	80 80       	ld	r8, Z
    9b82:	80 80       	ld	r8, Z
    9b84:	80 80       	ld	r8, Z
    9b86:	80 80       	ld	r8, Z
    9b88:	80 80       	ld	r8, Z
    9b8a:	80 80       	ld	r8, Z
    9b8c:	80 80       	ld	r8, Z
    9b8e:	80 80       	ld	r8, Z
    9b90:	80 80       	ld	r8, Z
    9b92:	80 80       	ld	r8, Z
    9b94:	80 80       	ld	r8, Z
    9b96:	80 80       	ld	r8, Z
    9b98:	80 80       	ld	r8, Z
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 80       	ld	r8, Z
    9bf6:	80 80       	ld	r8, Z
    9bf8:	80 80       	ld	r8, Z
    9bfa:	80 80       	ld	r8, Z
    9bfc:	80 80       	ld	r8, Z
    9bfe:	80 80       	ld	r8, Z
    9c00:	7f 7f       	andi	r23, 0xFF	; 255
    9c02:	7f 7f       	andi	r23, 0xFF	; 255
    9c04:	7f 7f       	andi	r23, 0xFF	; 255
    9c06:	7f 7f       	andi	r23, 0xFF	; 255
    9c08:	7f 7f       	andi	r23, 0xFF	; 255
    9c0a:	7f 7f       	andi	r23, 0xFF	; 255
    9c0c:	7f 7f       	andi	r23, 0xFF	; 255
    9c0e:	7f 7f       	andi	r23, 0xFF	; 255
    9c10:	7f 7f       	andi	r23, 0xFF	; 255
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	7f 7f       	andi	r23, 0xFF	; 255
    9c42:	7f 7f       	andi	r23, 0xFF	; 255
    9c44:	7f 7f       	andi	r23, 0xFF	; 255
    9c46:	7f 7f       	andi	r23, 0xFF	; 255
    9c48:	7f 7f       	andi	r23, 0xFF	; 255
    9c4a:	7f 7f       	andi	r23, 0xFF	; 255
    9c4c:	7f 7f       	andi	r23, 0xFF	; 255
    9c4e:	7f 7f       	andi	r23, 0xFF	; 255
    9c50:	7f 7f       	andi	r23, 0xFF	; 255
    9c52:	7f 7f       	andi	r23, 0xFF	; 255
    9c54:	7f 7f       	andi	r23, 0xFF	; 255
    9c56:	7f 7f       	andi	r23, 0xFF	; 255
    9c58:	7f 7f       	andi	r23, 0xFF	; 255
    9c5a:	7f 7f       	andi	r23, 0xFF	; 255
    9c5c:	7f 7f       	andi	r23, 0xFF	; 255
    9c5e:	7f 7f       	andi	r23, 0xFF	; 255
    9c60:	7f 7f       	andi	r23, 0xFF	; 255
    9c62:	7f 7f       	andi	r23, 0xFF	; 255
    9c64:	7f 7f       	andi	r23, 0xFF	; 255
    9c66:	7f 7f       	andi	r23, 0xFF	; 255
    9c68:	7f 7f       	andi	r23, 0xFF	; 255
    9c6a:	7f 7f       	andi	r23, 0xFF	; 255
    9c6c:	7f 7f       	andi	r23, 0xFF	; 255
    9c6e:	7f 7f       	andi	r23, 0xFF	; 255
    9c70:	7f 7f       	andi	r23, 0xFF	; 255
    9c72:	7f 7f       	andi	r23, 0xFF	; 255
    9c74:	7f 7f       	andi	r23, 0xFF	; 255
    9c76:	7f 7f       	andi	r23, 0xFF	; 255
    9c78:	7f 7f       	andi	r23, 0xFF	; 255
    9c7a:	7f 7f       	andi	r23, 0xFF	; 255
    9c7c:	7f 7f       	andi	r23, 0xFF	; 255
    9c7e:	7f 7f       	andi	r23, 0xFF	; 255
    9c80:	7f 7f       	andi	r23, 0xFF	; 255
    9c82:	7f 7f       	andi	r23, 0xFF	; 255
    9c84:	7f 7f       	andi	r23, 0xFF	; 255
    9c86:	7f 7f       	andi	r23, 0xFF	; 255
    9c88:	7f 7f       	andi	r23, 0xFF	; 255
    9c8a:	7f 7f       	andi	r23, 0xFF	; 255
    9c8c:	7f 7f       	andi	r23, 0xFF	; 255
    9c8e:	7f 7f       	andi	r23, 0xFF	; 255
    9c90:	7f 7f       	andi	r23, 0xFF	; 255
    9c92:	7f 7f       	andi	r23, 0xFF	; 255
    9c94:	7f 7f       	andi	r23, 0xFF	; 255
    9c96:	7f 7f       	andi	r23, 0xFF	; 255
    9c98:	7f 7f       	andi	r23, 0xFF	; 255
    9c9a:	7f 7f       	andi	r23, 0xFF	; 255
    9c9c:	7f 7f       	andi	r23, 0xFF	; 255
    9c9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ca0:	7f 7f       	andi	r23, 0xFF	; 255
    9ca2:	7f 7f       	andi	r23, 0xFF	; 255
    9ca4:	7f 7f       	andi	r23, 0xFF	; 255
    9ca6:	7f 7f       	andi	r23, 0xFF	; 255
    9ca8:	7f 7f       	andi	r23, 0xFF	; 255
    9caa:	7f 7f       	andi	r23, 0xFF	; 255
    9cac:	7f 7f       	andi	r23, 0xFF	; 255
    9cae:	7f 7f       	andi	r23, 0xFF	; 255
    9cb0:	7f 7f       	andi	r23, 0xFF	; 255
    9cb2:	7f 7f       	andi	r23, 0xFF	; 255
    9cb4:	7f 7f       	andi	r23, 0xFF	; 255
    9cb6:	7f 7f       	andi	r23, 0xFF	; 255
    9cb8:	7f 7f       	andi	r23, 0xFF	; 255
    9cba:	7f 7f       	andi	r23, 0xFF	; 255
    9cbc:	7f 7f       	andi	r23, 0xFF	; 255
    9cbe:	7f 7f       	andi	r23, 0xFF	; 255
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 80       	ld	r8, Z
    9cf6:	80 80       	ld	r8, Z
    9cf8:	80 80       	ld	r8, Z
    9cfa:	80 80       	ld	r8, Z
    9cfc:	80 80       	ld	r8, Z
    9cfe:	80 80       	ld	r8, Z
    9d00:	03 09       	sbc	r16, r3
    9d02:	13 1e       	adc	r1, r19
    9d04:	28 31       	cpi	r18, 0x18	; 24
    9d06:	3a 40       	sbci	r19, 0x0A	; 10
    9d08:	46 4c       	sbci	r20, 0xC6	; 198
    9d0a:	50 54       	subi	r21, 0x40	; 64
    9d0c:	58 5b       	subi	r21, 0xB8	; 184
    9d0e:	5e 61       	ori	r21, 0x1E	; 30
    9d10:	63 65       	ori	r22, 0x53	; 83
    9d12:	67 69       	ori	r22, 0x97	; 151
    9d14:	6b 6c       	ori	r22, 0xCB	; 203
    9d16:	6e 6f       	ori	r22, 0xFE	; 254
    9d18:	70 71       	andi	r23, 0x10	; 16
    9d1a:	72 73       	andi	r23, 0x32	; 50
    9d1c:	74 75       	andi	r23, 0x54	; 84
    9d1e:	76 77       	andi	r23, 0x76	; 118
    9d20:	77 78       	andi	r23, 0x87	; 135
    9d22:	79 79       	andi	r23, 0x99	; 153
    9d24:	7a 7a       	andi	r23, 0xAA	; 170
    9d26:	7b 7b       	andi	r23, 0xBB	; 187
    9d28:	7c 7c       	andi	r23, 0xCC	; 204
    9d2a:	7c 7d       	andi	r23, 0xDC	; 220
    9d2c:	7d 7d       	andi	r23, 0xDD	; 221
    9d2e:	7e 7e       	andi	r23, 0xEE	; 238
    9d30:	7e 7e       	andi	r23, 0xEE	; 238
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7e       	andi	r23, 0xEF	; 239
    9d4e:	7e 7e       	andi	r23, 0xEE	; 238
    9d50:	7e 7d       	andi	r23, 0xDE	; 222
    9d52:	7d 7d       	andi	r23, 0xDD	; 221
    9d54:	7c 7c       	andi	r23, 0xCC	; 204
    9d56:	7c 7b       	andi	r23, 0xBC	; 188
    9d58:	7b 7a       	andi	r23, 0xAB	; 171
    9d5a:	7a 79       	andi	r23, 0x9A	; 154
    9d5c:	79 78       	andi	r23, 0x89	; 137
    9d5e:	77 77       	andi	r23, 0x77	; 119
    9d60:	76 75       	andi	r23, 0x56	; 86
    9d62:	74 73       	andi	r23, 0x34	; 52
    9d64:	72 71       	andi	r23, 0x12	; 18
    9d66:	70 6f       	ori	r23, 0xF0	; 240
    9d68:	6e 6c       	ori	r22, 0xCE	; 206
    9d6a:	6b 69       	ori	r22, 0x9B	; 155
    9d6c:	67 65       	ori	r22, 0x57	; 87
    9d6e:	63 61       	ori	r22, 0x13	; 19
    9d70:	5e 5b       	subi	r21, 0xBE	; 190
    9d72:	58 54       	subi	r21, 0x48	; 72
    9d74:	50 4c       	sbci	r21, 0xC0	; 192
    9d76:	46 40       	sbci	r20, 0x06	; 6
    9d78:	3a 31       	cpi	r19, 0x1A	; 26
    9d7a:	28 1e       	adc	r2, r24
    9d7c:	13 09       	sbc	r17, r3
    9d7e:	03 00       	.word	0x0003	; ????
    9d80:	c6 cc       	rjmp	.-1652   	; 0x970e <waves+0xe>
    9d82:	d5 db       	rcall	.-2134   	; 0x952e <steptable+0x26>
    9d84:	df e3       	ldi	r29, 0x3F	; 63
    9d86:	e5 e7       	ldi	r30, 0x75	; 117
    9d88:	e9 ea       	ldi	r30, 0xA9	; 169
    9d8a:	eb ec       	ldi	r30, 0xCB	; 203
    9d8c:	ed ee       	ldi	r30, 0xED	; 237
    9d8e:	ef ef       	ldi	r30, 0xFF	; 255
    9d90:	f0 f0       	brcs	.+60     	; 0x9dce <waves+0x6ce>
    9d92:	f0 f1       	brcs	.+124    	; 0x9e10 <waves+0x710>
    9d94:	f1 f1       	breq	.+124    	; 0x9e12 <waves+0x712>
    9d96:	f1 f2       	breq	.-68     	; 0x9d54 <waves+0x654>
    9d98:	f2 f2       	brmi	.-68     	; 0x9d56 <waves+0x656>
    9d9a:	f2 f2       	brmi	.-68     	; 0x9d58 <waves+0x658>
    9d9c:	f2 f2       	brmi	.-68     	; 0x9d5a <waves+0x65a>
    9d9e:	f2 f3       	brmi	.-4      	; 0x9d9c <waves+0x69c>
    9da0:	f3 f3       	brvs	.-4      	; 0x9d9e <waves+0x69e>
    9da2:	f3 f3       	brvs	.-4      	; 0x9da0 <waves+0x6a0>
    9da4:	f3 f3       	brvs	.-4      	; 0x9da2 <waves+0x6a2>
    9da6:	f3 f3       	brvs	.-4      	; 0x9da4 <waves+0x6a4>
    9da8:	f3 f3       	brvs	.-4      	; 0x9da6 <waves+0x6a6>
    9daa:	f3 f3       	brvs	.-4      	; 0x9da8 <waves+0x6a8>
    9dac:	f3 f3       	brvs	.-4      	; 0x9daa <waves+0x6aa>
    9dae:	f3 f3       	brvs	.-4      	; 0x9dac <waves+0x6ac>
    9db0:	f3 f3       	brvs	.-4      	; 0x9dae <waves+0x6ae>
    9db2:	f3 f3       	brvs	.-4      	; 0x9db0 <waves+0x6b0>
    9db4:	f3 f3       	brvs	.-4      	; 0x9db2 <waves+0x6b2>
    9db6:	f3 f3       	brvs	.-4      	; 0x9db4 <waves+0x6b4>
    9db8:	f3 f3       	brvs	.-4      	; 0x9db6 <waves+0x6b6>
    9dba:	f3 f3       	brvs	.-4      	; 0x9db8 <waves+0x6b8>
    9dbc:	f3 f3       	brvs	.-4      	; 0x9dba <waves+0x6ba>
    9dbe:	f3 f3       	brvs	.-4      	; 0x9dbc <waves+0x6bc>
    9dc0:	f3 f3       	brvs	.-4      	; 0x9dbe <waves+0x6be>
    9dc2:	f3 f3       	brvs	.-4      	; 0x9dc0 <waves+0x6c0>
    9dc4:	f3 f3       	brvs	.-4      	; 0x9dc2 <waves+0x6c2>
    9dc6:	f3 f3       	brvs	.-4      	; 0x9dc4 <waves+0x6c4>
    9dc8:	f3 f3       	brvs	.-4      	; 0x9dc6 <waves+0x6c6>
    9dca:	f3 f3       	brvs	.-4      	; 0x9dc8 <waves+0x6c8>
    9dcc:	f3 f3       	brvs	.-4      	; 0x9dca <waves+0x6ca>
    9dce:	f3 f3       	brvs	.-4      	; 0x9dcc <waves+0x6cc>
    9dd0:	f3 f3       	brvs	.-4      	; 0x9dce <waves+0x6ce>
    9dd2:	f3 f3       	brvs	.-4      	; 0x9dd0 <waves+0x6d0>
    9dd4:	f3 f3       	brvs	.-4      	; 0x9dd2 <waves+0x6d2>
    9dd6:	f3 f3       	brvs	.-4      	; 0x9dd4 <waves+0x6d4>
    9dd8:	f3 f3       	brvs	.-4      	; 0x9dd6 <waves+0x6d6>
    9dda:	f3 f3       	brvs	.-4      	; 0x9dd8 <waves+0x6d8>
    9ddc:	f3 f3       	brvs	.-4      	; 0x9dda <waves+0x6da>
    9dde:	f3 f3       	brvs	.-4      	; 0x9ddc <waves+0x6dc>
    9de0:	f2 f2       	brmi	.-68     	; 0x9d9e <waves+0x69e>
    9de2:	f2 f2       	brmi	.-68     	; 0x9da0 <waves+0x6a0>
    9de4:	f2 f2       	brmi	.-68     	; 0x9da2 <waves+0x6a2>
    9de6:	f2 f2       	brmi	.-68     	; 0x9da4 <waves+0x6a4>
    9de8:	f1 f1       	breq	.+124    	; 0x9e66 <waves+0x766>
    9dea:	f1 f1       	breq	.+124    	; 0x9e68 <waves+0x768>
    9dec:	f0 f0       	brcs	.+60     	; 0x9e2a <waves+0x72a>
    9dee:	f0 ef       	ldi	r31, 0xF0	; 240
    9df0:	ef ee       	ldi	r30, 0xEF	; 239
    9df2:	ed ec       	ldi	r30, 0xCD	; 205
    9df4:	eb ea       	ldi	r30, 0xAB	; 171
    9df6:	e9 e7       	ldi	r30, 0x79	; 121
    9df8:	e5 e3       	ldi	r30, 0x35	; 53
    9dfa:	df db       	rcall	.-2114   	; 0x95ba <steptable+0xb2>
    9dfc:	d5 cc       	rjmp	.-1622   	; 0x97a8 <waves+0xa8>
    9dfe:	c6 00       	.word	0x00c6	; ????
    9e00:	00 28       	or	r0, r0
    9e02:	3d 42       	sbci	r19, 0x2D	; 45
    9e04:	30 2d       	mov	r19, r0
    9e06:	2c 2b       	or	r18, r28
    9e08:	2c 2d       	mov	r18, r12
    9e0a:	2e 2f       	mov	r18, r30
    9e0c:	30 32       	cpi	r19, 0x20	; 32
    9e0e:	33 35       	cpi	r19, 0x53	; 83
    9e10:	37 39       	cpi	r19, 0x97	; 151
    9e12:	3b 3d       	cpi	r19, 0xDB	; 219
    9e14:	3f 41       	sbci	r19, 0x1F	; 31
    9e16:	43 45       	sbci	r20, 0x53	; 83
    9e18:	48 4a       	sbci	r20, 0xA8	; 168
    9e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9e1c:	50 53       	subi	r21, 0x30	; 48
    9e1e:	55 57       	subi	r21, 0x75	; 117
    9e20:	59 5b       	subi	r21, 0xB9	; 185
    9e22:	5d 5f       	subi	r21, 0xFD	; 253
    9e24:	61 63       	ori	r22, 0x31	; 49
    9e26:	65 67       	ori	r22, 0x75	; 117
    9e28:	69 6b       	ori	r22, 0xB9	; 185
    9e2a:	6c 6e       	ori	r22, 0xEC	; 236
    9e2c:	70 71       	andi	r23, 0x10	; 16
    9e2e:	73 74       	andi	r23, 0x43	; 67
    9e30:	75 77       	andi	r23, 0x75	; 117
    9e32:	78 79       	andi	r23, 0x98	; 152
    9e34:	7a 7b       	andi	r23, 0xBA	; 186
    9e36:	7c 7d       	andi	r23, 0xDC	; 220
    9e38:	7d 7e       	andi	r23, 0xED	; 237
    9e3a:	7e 7f       	andi	r23, 0xFE	; 254
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	7f 7f       	andi	r23, 0xFF	; 255
    9e42:	7f 7f       	andi	r23, 0xFF	; 255
    9e44:	7f 7f       	andi	r23, 0xFF	; 255
    9e46:	7e 7e       	andi	r23, 0xEE	; 238
    9e48:	7d 7d       	andi	r23, 0xDD	; 221
    9e4a:	7c 7b       	andi	r23, 0xBC	; 188
    9e4c:	7a 79       	andi	r23, 0x9A	; 154
    9e4e:	78 77       	andi	r23, 0x78	; 120
    9e50:	75 74       	andi	r23, 0x45	; 69
    9e52:	73 71       	andi	r23, 0x13	; 19
    9e54:	70 6e       	ori	r23, 0xE0	; 224
    9e56:	6c 6b       	ori	r22, 0xBC	; 188
    9e58:	69 67       	ori	r22, 0x79	; 121
    9e5a:	65 63       	ori	r22, 0x35	; 53
    9e5c:	61 5f       	subi	r22, 0xF1	; 241
    9e5e:	5d 5b       	subi	r21, 0xBD	; 189
    9e60:	59 57       	subi	r21, 0x79	; 121
    9e62:	55 53       	subi	r21, 0x35	; 53
    9e64:	50 4e       	sbci	r21, 0xE0	; 224
    9e66:	4c 4a       	sbci	r20, 0xAC	; 172
    9e68:	48 45       	sbci	r20, 0x58	; 88
    9e6a:	43 41       	sbci	r20, 0x13	; 19
    9e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9e6e:	3b 39       	cpi	r19, 0x9B	; 155
    9e70:	37 35       	cpi	r19, 0x57	; 87
    9e72:	33 32       	cpi	r19, 0x23	; 35
    9e74:	30 2f       	mov	r19, r16
    9e76:	2e 2d       	mov	r18, r14
    9e78:	2c 2b       	or	r18, r28
    9e7a:	2c 2d       	mov	r18, r12
    9e7c:	30 42       	sbci	r19, 0x20	; 32
    9e7e:	3d 28       	or	r3, r13
    9e80:	00 e9       	ldi	r16, 0x90	; 144
    9e82:	e5 fe       	sbrs	r14, 5
    9e84:	d4 d7       	rcall	.+4008   	; 0xae2e <clear_sprites+0x10>
    9e86:	d7 d7       	rcall	.+4014   	; 0xae36 <clear_sprites+0x18>
    9e88:	d6 d4       	rcall	.+2476   	; 0xa836 <LBLineIntersect+0x1c>
    9e8a:	d2 d0       	rcall	.+420    	; 0xa030 <waves+0x930>
    9e8c:	ce cc       	rjmp	.-1636   	; 0x982a <waves+0x12a>
    9e8e:	ca c8       	rjmp	.-3692   	; 0x9024 <ProcessMusic+0x64>
    9e90:	c6 c3       	rjmp	.+1932   	; 0xa61e <LBGetNextFrame+0xa>
    9e92:	c1 bf       	out	0x31, r28	; 49
    9e94:	bd ba       	out	0x1d, r11	; 29
    9e96:	b8 b6       	in	r11, 0x38	; 56
    9e98:	b4 b1       	in	r27, 0x04	; 4
    9e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9ea2:	9f 9e       	mul	r9, r31
    9ea4:	9c 9a       	sbi	0x13, 4	; 19
    9ea6:	99 97       	sbiw	r26, 0x29	; 41
    9ea8:	95 94       	asr	r9
    9eaa:	93 91       	.word	0x9193	; ????
    9eac:	90 8f       	std	Z+24, r25	; 0x18
    9eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9eb0:	8b 8a       	std	Y+19, r8	; 0x13
    9eb2:	89 88       	ldd	r8, Y+17	; 0x11
    9eb4:	88 87       	std	Y+8, r24	; 0x08
    9eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    9eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    9eba:	84 84       	ldd	r8, Z+12	; 0x0c
    9ebc:	83 83       	std	Z+3, r24	; 0x03
    9ebe:	83 83       	std	Z+3, r24	; 0x03
    9ec0:	83 83       	std	Z+3, r24	; 0x03
    9ec2:	83 83       	std	Z+3, r24	; 0x03
    9ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    9ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    9ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    9eca:	86 87       	std	Z+14, r24	; 0x0e
    9ecc:	88 88       	ldd	r8, Y+16	; 0x10
    9ece:	89 8a       	std	Y+17, r8	; 0x11
    9ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ed4:	90 91 93 94 	lds	r25, 0x9493
    9ed8:	95 97       	sbiw	r26, 0x25	; 37
    9eda:	99 9a       	sbi	0x13, 1	; 19
    9edc:	9c 9e       	mul	r9, r28
    9ede:	9f a1       	ldd	r25, Y+39	; 0x27
    9ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ee6:	af b1       	in	r26, 0x0f	; 15
    9ee8:	b4 b6       	in	r11, 0x34	; 52
    9eea:	b8 ba       	out	0x18, r11	; 24
    9eec:	bd bf       	out	0x3d, r27	; 61
    9eee:	c1 c3       	rjmp	.+1922   	; 0xa672 <LBGetNextFrameReverse+0x14>
    9ef0:	c6 c8       	rjmp	.-3700   	; 0x907e <ProcessMusic+0xbe>
    9ef2:	ca cc       	rjmp	.-1644   	; 0x9888 <waves+0x188>
    9ef4:	ce d0       	rcall	.+412    	; 0xa092 <waves+0x992>
    9ef6:	d2 d4       	rcall	.+2468   	; 0xa89c <LBLineIntersect+0x82>
    9ef8:	d6 d7       	rcall	.+4012   	; 0xaea6 <save_score+0x6e>
    9efa:	d7 d7       	rcall	.+4014   	; 0xaeaa <save_score+0x72>
    9efc:	d4 fe       	sbrs	r13, 4
    9efe:	e5 e9       	ldi	r30, 0x95	; 149
    9f00:	f9 f8       	.word	0xf8f9	; ????
    9f02:	f9 f5       	brne	.+126    	; 0x9f82 <waves+0x882>
    9f04:	eb e1       	ldi	r30, 0x1B	; 27
    9f06:	dd de       	rcall	.-582    	; 0x9cc2 <waves+0x5c2>
    9f08:	e0 e2       	ldi	r30, 0x20	; 32
    9f0a:	e4 e5       	ldi	r30, 0x54	; 84
    9f0c:	e6 e5       	ldi	r30, 0x56	; 86
    9f0e:	e4 e2       	ldi	r30, 0x24	; 36
    9f10:	de d9       	rcall	.-3140   	; 0x92ce <ProcessMusic+0x30e>
    9f12:	d2 ca       	rjmp	.-2652   	; 0x94b8 <esmw+0x50>
    9f14:	c1 b7       	in	r28, 0x31	; 49
    9f16:	ac a2       	std	Y+36, r10	; 0x24
    9f18:	99 91       	ld	r25, Y+
    9f1a:	8a 86       	std	Y+10, r8	; 0x0a
    9f1c:	83 81       	ldd	r24, Z+3	; 0x03
    9f1e:	80 80       	ld	r8, Z
    9f20:	81 82       	std	Z+1, r8	; 0x01
    9f22:	83 85       	ldd	r24, Z+11	; 0x0b
    9f24:	86 88       	ldd	r8, Z+22	; 0x16
    9f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9f28:	8d 8f       	std	Y+29, r24	; 0x1d
    9f2a:	90 92 93 95 	sts	0x9593, r9
    9f2e:	96 97       	sbiw	r26, 0x26	; 38
    9f30:	98 99       	sbic	0x13, 0	; 19
    9f32:	9a 9b       	sbis	0x13, 2	; 19
    9f34:	9b 9c       	mul	r9, r11
    9f36:	9d 9d       	mul	r25, r13
    9f38:	9d 9e       	mul	r9, r29
    9f3a:	9e 9e       	mul	r9, r30
    9f3c:	9f 9f       	mul	r25, r31
    9f3e:	9f 9f       	mul	r25, r31
    9f40:	9f 9f       	mul	r25, r31
    9f42:	9f 9e       	mul	r9, r31
    9f44:	9e 9e       	mul	r9, r30
    9f46:	9d 9d       	mul	r25, r13
    9f48:	9d 9c       	mul	r9, r13
    9f4a:	9b 9b       	sbis	0x13, 3	; 19
    9f4c:	9a 99       	sbic	0x13, 2	; 19
    9f4e:	98 97       	sbiw	r26, 0x28	; 40
    9f50:	96 95       	lsr	r25
    9f52:	93 92       	.word	0x9293	; ????
    9f54:	90 8f       	std	Z+24, r25	; 0x18
    9f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9f58:	8a 88       	ldd	r8, Y+18	; 0x12
    9f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9f5c:	83 82       	std	Z+3, r8	; 0x03
    9f5e:	81 80       	ldd	r8, Z+1	; 0x01
    9f60:	80 81       	ld	r24, Z
    9f62:	83 86       	std	Z+11, r8	; 0x0b
    9f64:	8a 91       	ld	r24, -Y
    9f66:	99 a2       	std	Y+33, r9	; 0x21
    9f68:	ac b7       	in	r26, 0x3c	; 60
    9f6a:	c1 ca       	rjmp	.-2686   	; 0x94ee <esmw+0x86>
    9f6c:	d2 d9       	rcall	.-3164   	; 0x9312 <ProcessMusic+0x352>
    9f6e:	de e2       	ldi	r29, 0x2E	; 46
    9f70:	e4 e5       	ldi	r30, 0x54	; 84
    9f72:	e6 e5       	ldi	r30, 0x56	; 86
    9f74:	e4 e2       	ldi	r30, 0x24	; 36
    9f76:	e0 de       	rcall	.-576    	; 0x9d38 <waves+0x638>
    9f78:	dd e1       	ldi	r29, 0x1D	; 29
    9f7a:	eb f5       	brvc	.+122    	; 0x9ff6 <waves+0x8f6>
    9f7c:	f9 f8       	.word	0xf8f9	; ????
    9f7e:	f9 00       	.word	0x00f9	; ????
    9f80:	07 08       	sbc	r0, r7
    9f82:	07 0b       	sbc	r16, r23
    9f84:	15 1f       	adc	r17, r21
    9f86:	23 22       	and	r2, r19
    9f88:	20 1e       	adc	r2, r16
    9f8a:	1c 1b       	sub	r17, r28
    9f8c:	1a 1b       	sub	r17, r26
    9f8e:	1c 1e       	adc	r1, r28
    9f90:	22 27       	eor	r18, r18
    9f92:	2e 36       	cpi	r18, 0x6E	; 110
    9f94:	3f 49       	sbci	r19, 0x9F	; 159
    9f96:	54 5e       	subi	r21, 0xE4	; 228
    9f98:	67 6f       	ori	r22, 0xF7	; 247
    9f9a:	76 7a       	andi	r23, 0xA6	; 166
    9f9c:	7e 7f       	andi	r23, 0xFE	; 254
    9f9e:	7f 7f       	andi	r23, 0xFF	; 255
    9fa0:	7f 7e       	andi	r23, 0xEF	; 239
    9fa2:	7d 7b       	andi	r23, 0xBD	; 189
    9fa4:	7a 78       	andi	r23, 0x8A	; 138
    9fa6:	76 74       	andi	r23, 0x46	; 70
    9fa8:	73 71       	andi	r23, 0x13	; 19
    9faa:	70 6e       	ori	r23, 0xE0	; 224
    9fac:	6d 6b       	ori	r22, 0xBD	; 189
    9fae:	6a 69       	ori	r22, 0x9A	; 154
    9fb0:	68 67       	ori	r22, 0x78	; 120
    9fb2:	66 65       	ori	r22, 0x56	; 86
    9fb4:	65 64       	ori	r22, 0x45	; 69
    9fb6:	64 63       	ori	r22, 0x34	; 52
    9fb8:	63 62       	ori	r22, 0x23	; 35
    9fba:	62 62       	ori	r22, 0x22	; 34
    9fbc:	61 61       	ori	r22, 0x11	; 17
    9fbe:	61 61       	ori	r22, 0x11	; 17
    9fc0:	61 61       	ori	r22, 0x11	; 17
    9fc2:	61 62       	ori	r22, 0x21	; 33
    9fc4:	62 62       	ori	r22, 0x22	; 34
    9fc6:	63 63       	ori	r22, 0x33	; 51
    9fc8:	63 64       	ori	r22, 0x43	; 67
    9fca:	65 65       	ori	r22, 0x55	; 85
    9fcc:	66 67       	ori	r22, 0x76	; 118
    9fce:	68 69       	ori	r22, 0x98	; 152
    9fd0:	6a 6b       	ori	r22, 0xBA	; 186
    9fd2:	6d 6e       	ori	r22, 0xED	; 237
    9fd4:	70 71       	andi	r23, 0x10	; 16
    9fd6:	73 74       	andi	r23, 0x43	; 67
    9fd8:	76 78       	andi	r23, 0x86	; 134
    9fda:	7a 7b       	andi	r23, 0xBA	; 186
    9fdc:	7d 7e       	andi	r23, 0xED	; 237
    9fde:	7f 7f       	andi	r23, 0xFF	; 255
    9fe0:	7f 7f       	andi	r23, 0xFF	; 255
    9fe2:	7e 7a       	andi	r23, 0xAE	; 174
    9fe4:	76 6f       	ori	r23, 0xF6	; 246
    9fe6:	67 5e       	subi	r22, 0xE7	; 231
    9fe8:	54 49       	sbci	r21, 0x94	; 148
    9fea:	3f 36       	cpi	r19, 0x6F	; 111
    9fec:	2e 27       	eor	r18, r30
    9fee:	22 1e       	adc	r2, r18
    9ff0:	1c 1b       	sub	r17, r28
    9ff2:	1a 1b       	sub	r17, r26
    9ff4:	1c 1e       	adc	r1, r28
    9ff6:	20 22       	and	r2, r16
    9ff8:	23 1f       	adc	r18, r19
    9ffa:	15 0b       	sbc	r17, r21
    9ffc:	07 08       	sbc	r0, r7
    9ffe:	07 00       	.word	0x0007	; ????
    a000:	1f 31       	cpi	r17, 0x1F	; 31
    a002:	3d 44       	sbci	r19, 0x4D	; 77
    a004:	4e 53       	subi	r20, 0x3E	; 62
    a006:	54 56       	subi	r21, 0x64	; 100
    a008:	5a 5f       	subi	r21, 0xFA	; 250
    a00a:	64 69       	ori	r22, 0x94	; 148
    a00c:	6e 74       	andi	r22, 0x4E	; 78
    a00e:	76 79       	andi	r23, 0x96	; 150
    a010:	7c 7f       	andi	r23, 0xFC	; 252
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7c       	andi	r23, 0xCF	; 207
    a07c:	78 71       	andi	r23, 0x18	; 24
    a07e:	68 4c       	sbci	r22, 0xC8	; 200
    a080:	2c 1c       	adc	r2, r12
    a082:	12 0c       	add	r1, r2
    a084:	0a 0b       	sbc	r16, r26
    a086:	0a 05       	cpc	r16, r10
    a088:	fd f3       	brhs	.-2      	; 0xa088 <waves+0x988>
    a08a:	e9 df       	rcall	.-46     	; 0xa05e <waves+0x95e>
    a08c:	d4 ca       	rjmp	.-2648   	; 0x9636 <steptable+0x12e>
    a08e:	c0 b7       	in	r28, 0x30	; 48
    a090:	ae a6       	std	Y+46, r10	; 0x2e
    a092:	9e 97       	sbiw	r26, 0x2e	; 46
    a094:	91 8b       	std	Z+17, r25	; 0x11
    a096:	86 85       	ldd	r24, Z+14	; 0x0e
    a098:	82 80       	ldd	r8, Z+2	; 0x02
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 87       	std	Z+8, r24	; 0x08
    a0f6:	91 9d       	mul	r25, r1
    a0f8:	ac c4       	rjmp	.+2392   	; 0xaa52 <LBHideAllSprites+0x4>
    a0fa:	cb d4       	rcall	.+2454   	; 0xaa92 <init_tile_animations>
    a0fc:	dd f2       	brhs	.-74     	; 0xa0b4 <waves+0x9b4>
    a0fe:	fa fa       	.word	0xfafa	; ????

0000a100 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    a100:	2f 92       	push	r2
    a102:	3f 92       	push	r3
    a104:	4f 92       	push	r4
    a106:	5f 92       	push	r5
    a108:	6f 92       	push	r6
    a10a:	7f 92       	push	r7
    a10c:	8f 92       	push	r8
    a10e:	9f 92       	push	r9
    a110:	af 92       	push	r10
    a112:	bf 92       	push	r11
    a114:	cf 92       	push	r12
    a116:	df 92       	push	r13
    a118:	ef 92       	push	r14
    a11a:	ff 92       	push	r15
    a11c:	0f 93       	push	r16
    a11e:	1f 93       	push	r17
    a120:	cf 93       	push	r28
    a122:	df 93       	push	r29
    a124:	00 d0       	rcall	.+0      	; 0xa126 <ProcessSprites+0x26>
    a126:	00 d0       	rcall	.+0      	; 0xa128 <ProcessSprites+0x28>
    a128:	00 d0       	rcall	.+0      	; 0xa12a <ProcessSprites+0x2a>
    a12a:	cd b7       	in	r28, 0x3d	; 61
    a12c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    a12e:	80 91 00 01 	lds	r24, 0x0100
    a132:	88 23       	and	r24, r24
    a134:	09 f4       	brne	.+2      	; 0xa138 <ProcessSprites+0x38>
    a136:	cb c0       	rjmp	.+406    	; 0xa2ce <ProcessSprites+0x1ce>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    a138:	80 91 da 0a 	lds	r24, 0x0ADA
    a13c:	80 93 d9 0a 	sts	0x0AD9, r24
	free_tile_index = user_ram_tiles_c;
    a140:	80 93 d8 0a 	sts	0x0AD8, r24
    a144:	00 e0       	ldi	r16, 0x00	; 0
    a146:	10 e0       	ldi	r17, 0x00	; 0
    a148:	f8 01       	movw	r30, r16
    a14a:	e8 59       	subi	r30, 0x98	; 152
    a14c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    a14e:	81 81       	ldd	r24, Z+1	; 0x01
    a150:	90 81       	ld	r25, Z
    a152:	32 81       	ldd	r19, Z+2	; 0x02
    a154:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    a156:	28 e0       	ldi	r18, 0x08	; 8
    a158:	29 0f       	add	r18, r25
    a15a:	26 95       	lsr	r18
    a15c:	26 95       	lsr	r18
    a15e:	26 95       	lsr	r18
    a160:	33 24       	eor	r3, r3
    a162:	3a 94       	dec	r3
    a164:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    a166:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    a168:	19 f0       	breq	.+6      	; 0xa170 <ProcessSprites+0x70>
    a16a:	e2 e0       	ldi	r30, 0x02	; 2
    a16c:	2e 2e       	mov	r2, r30
    a16e:	02 c0       	rjmp	.+4      	; 0xa174 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    a170:	22 24       	eor	r2, r2
    a172:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    a174:	28 e0       	ldi	r18, 0x08	; 8
    a176:	28 0f       	add	r18, r24
    a178:	52 2e       	mov	r5, r18
    a17a:	56 94       	lsr	r5
    a17c:	56 94       	lsr	r5
    a17e:	56 94       	lsr	r5
    a180:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    a182:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    a184:	19 f0       	breq	.+6      	; 0xa18c <ProcessSprites+0x8c>
    a186:	22 e0       	ldi	r18, 0x02	; 2
    a188:	29 83       	std	Y+1, r18	; 0x01
    a18a:	02 c0       	rjmp	.+4      	; 0xa190 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    a18c:	e1 e0       	ldi	r30, 0x01	; 1
    a18e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    a190:	68 2e       	mov	r6, r24
    a192:	71 2c       	mov	r7, r1
    a194:	76 2c       	mov	r7, r6
    a196:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a198:	69 0e       	add	r6, r25
    a19a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    a19c:	50 e0       	ldi	r21, 0x00	; 0
    a19e:	54 2f       	mov	r21, r20
    a1a0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a1a2:	ca 01       	movw	r24, r20
    a1a4:	83 0f       	add	r24, r19
    a1a6:	91 1d       	adc	r25, r1
    a1a8:	9b 83       	std	Y+3, r25	; 0x03
    a1aa:	8a 83       	std	Y+2, r24	; 0x02
    a1ac:	e1 2c       	mov	r14, r1
    a1ae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1b0:	9e e1       	ldi	r25, 0x1E	; 30
    a1b2:	59 9e       	mul	r5, r25
    a1b4:	50 01       	movw	r10, r0
    a1b6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    a1b8:	9e 2c       	mov	r9, r14
    a1ba:	88 24       	eor	r8, r8
    a1bc:	43 2c       	mov	r4, r3
    a1be:	c1 2c       	mov	r12, r1
    a1c0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    a1c2:	ed e1       	ldi	r30, 0x1D	; 29
    a1c4:	e4 15       	cp	r30, r4
    a1c6:	08 f4       	brcc	.+2      	; 0xa1ca <ProcessSprites+0xca>
    a1c8:	53 c0       	rjmp	.+166    	; 0xa270 <ProcessSprites+0x170>
    a1ca:	fb e1       	ldi	r31, 0x1B	; 27
    a1cc:	f5 15       	cp	r31, r5
    a1ce:	08 f4       	brcc	.+2      	; 0xa1d2 <ProcessSprites+0xd2>
    a1d0:	4f c0       	rjmp	.+158    	; 0xa270 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1d2:	c5 01       	movw	r24, r10
    a1d4:	84 0d       	add	r24, r4
    a1d6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    a1d8:	9c 01       	movw	r18, r24
    a1da:	20 5e       	subi	r18, 0xE0	; 224
    a1dc:	3e 4f       	sbci	r19, 0xFE	; 254
    a1de:	3e 83       	std	Y+6, r19	; 0x06
    a1e0:	2d 83       	std	Y+5, r18	; 0x05
    a1e2:	f9 01       	movw	r30, r18
    a1e4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    a1e6:	81 e0       	ldi	r24, 0x01	; 1
    a1e8:	98 31       	cpi	r25, 0x18	; 24
    a1ea:	08 f4       	brcc	.+2      	; 0xa1ee <ProcessSprites+0xee>
    a1ec:	80 e0       	ldi	r24, 0x00	; 0
    a1ee:	21 e0       	ldi	r18, 0x01	; 1
    a1f0:	30 91 d9 0a 	lds	r19, 0x0AD9
    a1f4:	93 17       	cp	r25, r19
    a1f6:	18 f0       	brcs	.+6      	; 0xa1fe <ProcessSprites+0xfe>
    a1f8:	20 e0       	ldi	r18, 0x00	; 0
    a1fa:	88 23       	and	r24, r24
    a1fc:	61 f1       	breq	.+88     	; 0xa256 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    a1fe:	60 91 d8 0a 	lds	r22, 0x0AD8
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    a202:	68 31       	cpi	r22, 0x18	; 24
    a204:	30 f5       	brcc	.+76     	; 0xa252 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    a206:	88 23       	and	r24, r24
    a208:	31 f0       	breq	.+12     	; 0xa216 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    a20a:	88 ee       	ldi	r24, 0xE8	; 232
    a20c:	89 0f       	add	r24, r25
    a20e:	9c 83       	std	Y+4, r25	; 0x04
    a210:	0e 94 94 40 	call	0x8128	; 0x8128 <CopyFlashTile>
    a214:	06 c0       	rjmp	.+12     	; 0xa222 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    a216:	22 23       	and	r18, r18
    a218:	29 f0       	breq	.+10     	; 0xa224 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    a21a:	89 2f       	mov	r24, r25
    a21c:	9c 83       	std	Y+4, r25	; 0x04
    a21e:	0e 94 23 41 	call	0x8246	; 0x8246 <CopyRamTile>
    a222:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    a224:	80 91 d8 0a 	lds	r24, 0x0AD8
    a228:	e8 2f       	mov	r30, r24
    a22a:	f0 e0       	ldi	r31, 0x00	; 0
    a22c:	9f 01       	movw	r18, r30
    a22e:	22 0f       	add	r18, r18
    a230:	33 1f       	adc	r19, r19
    a232:	e2 0f       	add	r30, r18
    a234:	f3 1f       	adc	r31, r19
    a236:	e0 57       	subi	r30, 0x70	; 112
    a238:	f5 4f       	sbci	r31, 0xF5	; 245
    a23a:	2d 81       	ldd	r18, Y+5	; 0x05
    a23c:	3e 81       	ldd	r19, Y+6	; 0x06
    a23e:	31 83       	std	Z+1, r19	; 0x01
    a240:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    a242:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    a244:	f9 01       	movw	r30, r18
    a246:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    a248:	91 e0       	ldi	r25, 0x01	; 1
    a24a:	98 0f       	add	r25, r24
    a24c:	90 93 d8 0a 	sts	0x0AD8, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    a250:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    a252:	98 31       	cpi	r25, 0x18	; 24
    a254:	68 f4       	brcc	.+26     	; 0xa270 <ProcessSprites+0x170>
    a256:	80 91 d9 0a 	lds	r24, 0x0AD9
    a25a:	98 17       	cp	r25, r24
    a25c:	48 f0       	brcs	.+18     	; 0xa270 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a25e:	93 01       	movw	r18, r6
    a260:	a6 01       	movw	r20, r12
    a262:	48 0d       	add	r20, r8
    a264:	59 1d       	adc	r21, r9
    a266:	6a 81       	ldd	r22, Y+2	; 0x02
    a268:	7b 81       	ldd	r23, Y+3	; 0x03
    a26a:	89 2f       	mov	r24, r25
    a26c:	0e 94 c3 41 	call	0x8386	; 0x8386 <BlitSpritePart>
    a270:	ff ef       	ldi	r31, 0xFF	; 255
    a272:	cf 1a       	sub	r12, r31
    a274:	df 0a       	sbc	r13, r31
    a276:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    a278:	c2 14       	cp	r12, r2
    a27a:	08 f4       	brcc	.+2      	; 0xa27e <ProcessSprites+0x17e>
    a27c:	a2 cf       	rjmp	.-188    	; 0xa1c2 <ProcessSprites+0xc2>
    a27e:	2f ef       	ldi	r18, 0xFF	; 255
    a280:	e2 1a       	sub	r14, r18
    a282:	f2 0a       	sbc	r15, r18
    a284:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    a286:	99 81       	ldd	r25, Y+1	; 0x01
    a288:	e9 16       	cp	r14, r25
    a28a:	08 f4       	brcc	.+2      	; 0xa28e <ProcessSprites+0x18e>
    a28c:	91 cf       	rjmp	.-222    	; 0xa1b0 <ProcessSprites+0xb0>
    a28e:	0c 5f       	subi	r16, 0xFC	; 252
    a290:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    a292:	08 32       	cpi	r16, 0x28	; 40
    a294:	11 05       	cpc	r17, r1
    a296:	09 f0       	breq	.+2      	; 0xa29a <ProcessSprites+0x19a>
    a298:	57 cf       	rjmp	.-338    	; 0xa148 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    a29a:	26 96       	adiw	r28, 0x06	; 6
    a29c:	0f b6       	in	r0, 0x3f	; 63
    a29e:	f8 94       	cli
    a2a0:	de bf       	out	0x3e, r29	; 62
    a2a2:	0f be       	out	0x3f, r0	; 63
    a2a4:	cd bf       	out	0x3d, r28	; 61
    a2a6:	df 91       	pop	r29
    a2a8:	cf 91       	pop	r28
    a2aa:	1f 91       	pop	r17
    a2ac:	0f 91       	pop	r16
    a2ae:	ff 90       	pop	r15
    a2b0:	ef 90       	pop	r14
    a2b2:	df 90       	pop	r13
    a2b4:	cf 90       	pop	r12
    a2b6:	bf 90       	pop	r11
    a2b8:	af 90       	pop	r10
    a2ba:	9f 90       	pop	r9
    a2bc:	8f 90       	pop	r8
    a2be:	7f 90       	pop	r7
    a2c0:	6f 90       	pop	r6
    a2c2:	5f 90       	pop	r5
    a2c4:	4f 90       	pop	r4
    a2c6:	3f 90       	pop	r3
    a2c8:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    a2ca:	0c 94 b0 41 	jmp	0x8360	; 0x8360 <RestoreBackground>
	#endif

}
    a2ce:	26 96       	adiw	r28, 0x06	; 6
    a2d0:	0f b6       	in	r0, 0x3f	; 63
    a2d2:	f8 94       	cli
    a2d4:	de bf       	out	0x3e, r29	; 62
    a2d6:	0f be       	out	0x3f, r0	; 63
    a2d8:	cd bf       	out	0x3d, r28	; 61
    a2da:	df 91       	pop	r29
    a2dc:	cf 91       	pop	r28
    a2de:	1f 91       	pop	r17
    a2e0:	0f 91       	pop	r16
    a2e2:	ff 90       	pop	r15
    a2e4:	ef 90       	pop	r14
    a2e6:	df 90       	pop	r13
    a2e8:	cf 90       	pop	r12
    a2ea:	bf 90       	pop	r11
    a2ec:	af 90       	pop	r10
    a2ee:	9f 90       	pop	r9
    a2f0:	8f 90       	pop	r8
    a2f2:	7f 90       	pop	r7
    a2f4:	6f 90       	pop	r6
    a2f6:	5f 90       	pop	r5
    a2f8:	4f 90       	pop	r4
    a2fa:	3f 90       	pop	r3
    a2fc:	2f 90       	pop	r2
    a2fe:	08 95       	ret

0000a300 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a300:	df 92       	push	r13
    a302:	ef 92       	push	r14
    a304:	ff 92       	push	r15
    a306:	0f 93       	push	r16
    a308:	1f 93       	push	r17
    a30a:	cf 93       	push	r28
    a30c:	df 93       	push	r29
    a30e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a310:	fb 01       	movw	r30, r22
    a312:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a314:	31 96       	adiw	r30, 0x01	; 1
    a316:	64 91       	lpm	r22, Z
    a318:	5f ef       	ldi	r21, 0xFF	; 255
    a31a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a31c:	24 2f       	mov	r18, r20
    a31e:	21 70       	andi	r18, 0x01	; 1
    a320:	40 ff       	sbrs	r20, 0
    a322:	04 c0       	rjmp	.+8      	; 0xa32c <MapSprite2+0x2c>
			x=(mapWidth-1);
    a324:	95 2f       	mov	r25, r21
			dx=-1;
    a326:	ff 24       	eor	r15, r15
    a328:	fa 94       	dec	r15
    a32a:	03 c0       	rjmp	.+6      	; 0xa332 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a32c:	ff 24       	eor	r15, r15
    a32e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a330:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a332:	41 ff       	sbrs	r20, 1
    a334:	05 c0       	rjmp	.+10     	; 0xa340 <MapSprite2+0x40>
			y=(mapHeight-1);
    a336:	7f ef       	ldi	r23, 0xFF	; 255
    a338:	76 0f       	add	r23, r22
			dy=-1;
    a33a:	ee 24       	eor	r14, r14
    a33c:	ea 94       	dec	r14
    a33e:	03 c0       	rjmp	.+6      	; 0xa346 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a340:	ee 24       	eor	r14, r14
    a342:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a344:	70 e0       	ldi	r23, 0x00	; 0
    a346:	21 11       	cpse	r18, r1
    a348:	01 c0       	rjmp	.+2      	; 0xa34c <MapSprite2+0x4c>
    a34a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a34c:	00 e0       	ldi	r16, 0x00	; 0
    a34e:	06 17       	cp	r16, r22
    a350:	09 f1       	breq	.+66     	; 0xa394 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a352:	71 03       	mulsu	r23, r17
    a354:	e0 01       	movw	r28, r0
    a356:	11 24       	eor	r1, r1
    a358:	d8 2e       	mov	r13, r24
    a35a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a35c:	8d 15       	cp	r24, r13
    a35e:	b1 f0       	breq	.+44     	; 0xa38c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a360:	9e 01       	movw	r18, r28
    a362:	29 0f       	add	r18, r25
    a364:	31 1d       	adc	r19, r1
    a366:	97 fd       	sbrc	r25, 7
    a368:	3a 95       	dec	r19
    a36a:	2e 5f       	subi	r18, 0xFE	; 254
    a36c:	3f 4f       	sbci	r19, 0xFF	; 255
    a36e:	fd 01       	movw	r30, r26
    a370:	e2 0f       	add	r30, r18
    a372:	f3 1f       	adc	r31, r19
    a374:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a376:	34 e0       	ldi	r19, 0x04	; 4
    a378:	83 9f       	mul	r24, r19
    a37a:	f0 01       	movw	r30, r0
    a37c:	11 24       	eor	r1, r1
    a37e:	e8 59       	subi	r30, 0x98	; 152
    a380:	fb 4f       	sbci	r31, 0xFB	; 251
    a382:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a384:	8f 5f       	subi	r24, 0xFF	; 255
    a386:	43 83       	std	Z+3, r20	; 0x03
    a388:	9f 0d       	add	r25, r15
    a38a:	e8 cf       	rjmp	.-48     	; 0xa35c <MapSprite2+0x5c>
    a38c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a38e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a390:	95 2f       	mov	r25, r21
    a392:	dd cf       	rjmp	.-70     	; 0xa34e <MapSprite2+0x4e>
	    }
	}
    a394:	df 91       	pop	r29
    a396:	cf 91       	pop	r28
    a398:	1f 91       	pop	r17
    a39a:	0f 91       	pop	r16
    a39c:	ff 90       	pop	r15
    a39e:	ef 90       	pop	r14
    a3a0:	df 90       	pop	r13
    a3a2:	08 95       	ret

0000a3a4 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a3a4:	0f 93       	push	r16
    a3a6:	cf 93       	push	r28
    a3a8:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a3aa:	30 e0       	ldi	r19, 0x00	; 0
    a3ac:	30 17       	cp	r19, r16
    a3ae:	e1 f0       	breq	.+56     	; 0xa3e8 <MoveSprite+0x44>
    a3b0:	b4 2f       	mov	r27, r20
    a3b2:	a0 e2       	ldi	r26, 0x20	; 32
    a3b4:	a4 0f       	add	r26, r20
    a3b6:	78 2f       	mov	r23, r24
    a3b8:	72 0f       	add	r23, r18
    a3ba:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a3bc:	87 17       	cp	r24, r23
    a3be:	81 f0       	breq	.+32     	; 0xa3e0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a3c0:	c4 e0       	ldi	r28, 0x04	; 4
    a3c2:	8c 9f       	mul	r24, r28
    a3c4:	f0 01       	movw	r30, r0
    a3c6:	11 24       	eor	r1, r1
    a3c8:	e8 59       	subi	r30, 0x98	; 152
    a3ca:	fb 4f       	sbci	r31, 0xFB	; 251
    a3cc:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a3ce:	41 3e       	cpi	r20, 0xE1	; 225
    a3d0:	51 05       	cpc	r21, r1
    a3d2:	14 f0       	brlt	.+4      	; 0xa3d8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a3d4:	a1 83       	std	Z+1, r26	; 0x01
    a3d6:	01 c0       	rjmp	.+2      	; 0xa3da <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a3d8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a3da:	8f 5f       	subi	r24, 0xFF	; 255
    a3dc:	98 5f       	subi	r25, 0xF8	; 248
    a3de:	ee cf       	rjmp	.-36     	; 0xa3bc <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a3e0:	3f 5f       	subi	r19, 0xFF	; 255
    a3e2:	48 5f       	subi	r20, 0xF8	; 248
    a3e4:	5f 4f       	sbci	r21, 0xFF	; 255
    a3e6:	e2 cf       	rjmp	.-60     	; 0xa3ac <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a3e8:	cf 91       	pop	r28
    a3ea:	0f 91       	pop	r16
    a3ec:	08 95       	ret

0000a3ee <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    a3ee:	08 95       	ret

0000a3f0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a3f0:	e8 e6       	ldi	r30, 0x68	; 104
    a3f2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a3f4:	80 ef       	ldi	r24, 0xF0	; 240
    a3f6:	80 83       	st	Z, r24
    a3f8:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    a3fa:	94 e0       	ldi	r25, 0x04	; 4
    a3fc:	e0 39       	cpi	r30, 0x90	; 144
    a3fe:	f9 07       	cpc	r31, r25
    a400:	d1 f7       	brne	.-12     	; 0xa3f6 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    a402:	10 92 d8 0a 	sts	0x0AD8, r1
		user_ram_tiles_c_tmp = 0U;
    a406:	10 92 da 0a 	sts	0x0ADA, r1
    a40a:	08 95       	ret

0000a40c <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    a40c:	4f 92       	push	r4
    a40e:	5f 92       	push	r5
    a410:	6f 92       	push	r6
    a412:	7f 92       	push	r7
    a414:	8f 92       	push	r8
    a416:	9f 92       	push	r9
    a418:	af 92       	push	r10
    a41a:	bf 92       	push	r11
    a41c:	cf 92       	push	r12
    a41e:	df 92       	push	r13
    a420:	ef 92       	push	r14
    a422:	ff 92       	push	r15
    a424:	0f 93       	push	r16
    a426:	1f 93       	push	r17
    a428:	cf 93       	push	r28
    a42a:	df 93       	push	r29
    a42c:	68 2e       	mov	r6, r24
    a42e:	56 2e       	mov	r5, r22
    a430:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    a432:	fa 01       	movw	r30, r20
    a434:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    a436:	31 96       	adiw	r30, 0x01	; 1
    a438:	84 90       	lpm	r8, Z
    a43a:	c7 2c       	mov	r12, r7
    a43c:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a43e:	00 e0       	ldi	r16, 0x00	; 0
    a440:	10 e0       	ldi	r17, 0x00	; 0
    a442:	91 2c       	mov	r9, r1
    a444:	98 14       	cp	r9, r8
    a446:	f1 f0       	breq	.+60     	; 0xa484 <DrawMap+0x78>
    a448:	c0 e0       	ldi	r28, 0x00	; 0
    a44a:	d0 e0       	ldi	r29, 0x00	; 0
    a44c:	58 01       	movw	r10, r16
    a44e:	f2 e0       	ldi	r31, 0x02	; 2
    a450:	af 0e       	add	r10, r31
    a452:	b1 1c       	adc	r11, r1
    a454:	49 2c       	mov	r4, r9
    a456:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    a458:	c7 15       	cp	r28, r7
    a45a:	80 f4       	brcc	.+32     	; 0xa47c <DrawMap+0x70>
    a45c:	95 01       	movw	r18, r10
    a45e:	2c 0f       	add	r18, r28
    a460:	3d 1f       	adc	r19, r29
    a462:	f7 01       	movw	r30, r14
    a464:	e2 0f       	add	r30, r18
    a466:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a468:	24 91       	lpm	r18, Z
    a46a:	42 2f       	mov	r20, r18
    a46c:	50 e0       	ldi	r21, 0x00	; 0
    a46e:	64 2d       	mov	r22, r4
    a470:	8c 2f       	mov	r24, r28
    a472:	86 0d       	add	r24, r6
    a474:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
    a478:	21 96       	adiw	r28, 0x01	; 1
    a47a:	ee cf       	rjmp	.-36     	; 0xa458 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a47c:	93 94       	inc	r9
    a47e:	0c 0d       	add	r16, r12
    a480:	1d 1d       	adc	r17, r13
    a482:	e0 cf       	rjmp	.-64     	; 0xa444 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    a484:	df 91       	pop	r29
    a486:	cf 91       	pop	r28
    a488:	1f 91       	pop	r17
    a48a:	0f 91       	pop	r16
    a48c:	ff 90       	pop	r15
    a48e:	ef 90       	pop	r14
    a490:	df 90       	pop	r13
    a492:	cf 90       	pop	r12
    a494:	bf 90       	pop	r11
    a496:	af 90       	pop	r10
    a498:	9f 90       	pop	r9
    a49a:	8f 90       	pop	r8
    a49c:	7f 90       	pop	r7
    a49e:	6f 90       	pop	r6
    a4a0:	5f 90       	pop	r5
    a4a2:	4f 90       	pop	r4
    a4a4:	08 95       	ret

0000a4a6 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    a4a6:	df 92       	push	r13
    a4a8:	ef 92       	push	r14
    a4aa:	ff 92       	push	r15
    a4ac:	0f 93       	push	r16
    a4ae:	1f 93       	push	r17
    a4b0:	cf 93       	push	r28
    a4b2:	df 93       	push	r29
    a4b4:	f6 2e       	mov	r15, r22
    a4b6:	04 2f       	mov	r16, r20
    a4b8:	d2 2e       	mov	r13, r18
    a4ba:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    a4bc:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    a4be:	8a e0       	ldi	r24, 0x0A	; 10
    a4c0:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    a4c2:	01 11       	cpse	r16, r1
    a4c4:	02 c0       	rjmp	.+4      	; 0xa4ca <PrintByte+0x24>
    a4c6:	11 11       	cpse	r17, r1
    a4c8:	07 c0       	rjmp	.+14     	; 0xa4d8 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    a4ca:	80 2f       	mov	r24, r16
    a4cc:	6e 2d       	mov	r22, r14
    a4ce:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    a4d2:	40 e1       	ldi	r20, 0x10	; 16
    a4d4:	49 0f       	add	r20, r25
    a4d6:	05 c0       	rjmp	.+10     	; 0xa4e2 <PrintByte+0x3c>
		}else{
			if(zeropad){
    a4d8:	dd 20       	and	r13, r13
    a4da:	11 f0       	breq	.+4      	; 0xa4e0 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    a4dc:	40 e1       	ldi	r20, 0x10	; 16
    a4de:	01 c0       	rjmp	.+2      	; 0xa4e2 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    a4e0:	40 e0       	ldi	r20, 0x00	; 0
    a4e2:	6f 2d       	mov	r22, r15
    a4e4:	8c 2f       	mov	r24, r28
    a4e6:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <SetFont>
			}
		}
		val=val/10;
    a4ea:	80 2f       	mov	r24, r16
    a4ec:	6e 2d       	mov	r22, r14
    a4ee:	0e 94 d9 73 	call	0xe7b2	; 0xe7b2 <__udivmodqi4>
    a4f2:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    a4f4:	1f 5f       	subi	r17, 0xFF	; 255
    a4f6:	21 97       	sbiw	r28, 0x01	; 1
    a4f8:	13 30       	cpi	r17, 0x03	; 3
    a4fa:	19 f7       	brne	.-58     	; 0xa4c2 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    a4fc:	df 91       	pop	r29
    a4fe:	cf 91       	pop	r28
    a500:	1f 91       	pop	r17
    a502:	0f 91       	pop	r16
    a504:	ff 90       	pop	r15
    a506:	ef 90       	pop	r14
    a508:	df 90       	pop	r13
    a50a:	08 95       	ret

0000a50c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    a50c:	0f 93       	push	r16
    a50e:	1f 93       	push	r17
    a510:	cf 93       	push	r28
    a512:	df 93       	push	r29
    a514:	06 2f       	mov	r16, r22
    a516:	c4 2f       	mov	r28, r20
    a518:	d5 2f       	mov	r29, r21
    a51a:	18 2f       	mov	r17, r24
    a51c:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a51e:	fe 01       	movw	r30, r28
    a520:	44 91       	lpm	r20, Z
		if(c!=0){
    a522:	44 23       	and	r20, r20
    a524:	49 f0       	breq	.+18     	; 0xa538 <Print+0x2c>
			c=((c&127)-32);			
    a526:	4f 77       	andi	r20, 0x7F	; 127
    a528:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    a52a:	60 2f       	mov	r22, r16
    a52c:	8c 2f       	mov	r24, r28
    a52e:	81 0f       	add	r24, r17
    a530:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <SetFont>
    a534:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    a536:	f3 cf       	rjmp	.-26     	; 0xa51e <Print+0x12>
	
}
    a538:	df 91       	pop	r29
    a53a:	cf 91       	pop	r28
    a53c:	1f 91       	pop	r17
    a53e:	0f 91       	pop	r16
    a540:	08 95       	ret

0000a542 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    a542:	40 52       	subi	r20, 0x20	; 32
    a544:	0c 94 e4 43 	jmp	0x87c8	; 0x87c8 <SetFont>

0000a548 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a548:	0f 93       	push	r16
    a54a:	1f 93       	push	r17
    a54c:	cf 93       	push	r28
    a54e:	df 93       	push	r29
    a550:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a552:	c0 e0       	ldi	r28, 0x00	; 0
    a554:	d0 e0       	ldi	r29, 0x00	; 0
    a556:	c0 17       	cp	r28, r16
    a558:	d1 07       	cpc	r29, r17
    a55a:	44 f4       	brge	.+16     	; 0xa56c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a55c:	0e 94 fe 43 	call	0x87fc	; 0x87fc <GetVsyncFlag>
    a560:	88 23       	and	r24, r24
    a562:	e1 f3       	breq	.-8      	; 0xa55c <WaitVsync+0x14>
		ClearVsyncFlag();		
    a564:	0e 94 02 44 	call	0x8804	; 0x8804 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a568:	21 96       	adiw	r28, 0x01	; 1
    a56a:	f5 cf       	rjmp	.-22     	; 0xa556 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a56c:	df 91       	pop	r29
    a56e:	cf 91       	pop	r28
    a570:	1f 91       	pop	r17
    a572:	0f 91       	pop	r16
    a574:	08 95       	ret

0000a576 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a576:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    a57a:	10 92 be 0b 	sts	0x0BBE, r1
	fadeActive=true;
    a57e:	81 e0       	ldi	r24, 0x01	; 1
    a580:	80 93 bd 0b 	sts	0x0BBD, r24
		
	if(blocking){
    a584:	66 23       	and	r22, r22
    a586:	21 f0       	breq	.+8      	; 0xa590 <doFade+0x1a>
		while(fadeActive==true);
    a588:	80 91 bd 0b 	lds	r24, 0x0BBD
    a58c:	81 11       	cpse	r24, r1
    a58e:	fc cf       	rjmp	.-8      	; 0xa588 <doFade+0x12>
    a590:	08 95       	ret

0000a592 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a592:	81 11       	cpse	r24, r1
    a594:	03 c0       	rjmp	.+6      	; 0xa59c <FadeIn+0xa>
		DDRC=0xff;
    a596:	8f ef       	ldi	r24, 0xFF	; 255
    a598:	87 b9       	out	0x07, r24	; 7
		return;
    a59a:	08 95       	ret
	}
	fadeStep=1;
    a59c:	91 e0       	ldi	r25, 0x01	; 1
    a59e:	90 93 bf 0b 	sts	0x0BBF, r25
	fadeDir=1;
    a5a2:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    a5a6:	0c 94 bb 52 	jmp	0xa576	; 0xa576 <doFade>

0000a5aa <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a5aa:	81 11       	cpse	r24, r1
    a5ac:	02 c0       	rjmp	.+4      	; 0xa5b2 <FadeOut+0x8>
		DDRC=0;
    a5ae:	17 b8       	out	0x07, r1	; 7
		return;
    a5b0:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a5b2:	9c e0       	ldi	r25, 0x0C	; 12
    a5b4:	90 93 bf 0b 	sts	0x0BBF, r25
	fadeDir=-1;
    a5b8:	9f ef       	ldi	r25, 0xFF	; 255
    a5ba:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    a5be:	0c 94 bb 52 	jmp	0xa576	; 0xa576 <doFade>

0000a5c2 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a5c2:	80 91 bd 0b 	lds	r24, 0x0BBD
    a5c6:	88 23       	and	r24, r24
    a5c8:	01 f1       	breq	.+64     	; 0xa60a <ProcessFading+0x48>
		if(currFadeFrame==0){
    a5ca:	80 91 be 0b 	lds	r24, 0x0BBE
    a5ce:	81 11       	cpse	r24, r1
    a5d0:	19 c0       	rjmp	.+50     	; 0xa604 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a5d2:	80 91 bb 0b 	lds	r24, 0x0BBB
    a5d6:	80 93 be 0b 	sts	0x0BBE, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a5da:	e0 91 bf 0b 	lds	r30, 0x0BBF
    a5de:	f0 e0       	ldi	r31, 0x00	; 0
    a5e0:	e5 52       	subi	r30, 0x25	; 37
    a5e2:	ff 4f       	sbci	r31, 0xFF	; 255
    a5e4:	e4 91       	lpm	r30, Z
    a5e6:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a5e8:	90 91 bc 0b 	lds	r25, 0x0BBC
    a5ec:	80 91 bf 0b 	lds	r24, 0x0BBF
    a5f0:	89 0f       	add	r24, r25
    a5f2:	80 93 bf 0b 	sts	0x0BBF, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a5f6:	88 23       	and	r24, r24
    a5f8:	11 f0       	breq	.+4      	; 0xa5fe <ProcessFading+0x3c>
    a5fa:	8d 30       	cpi	r24, 0x0D	; 13
    a5fc:	31 f4       	brne	.+12     	; 0xa60a <ProcessFading+0x48>
				fadeActive=false;
    a5fe:	10 92 bd 0b 	sts	0x0BBD, r1
    a602:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a604:	81 50       	subi	r24, 0x01	; 1
    a606:	80 93 be 0b 	sts	0x0BBE, r24
    a60a:	08 95       	ret

0000a60c <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    a60c:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    a610:	0c 94 80 50 	jmp	0xa100	; 0xa100 <ProcessSprites>

0000a614 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    a614:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a616:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a618:	93 81       	ldd	r25, Z+3	; 0x03
    a61a:	9f 5f       	subi	r25, 0xFF	; 255
    a61c:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a61e:	22 81       	ldd	r18, Z+2	; 0x02
    a620:	80 81       	ld	r24, Z
    a622:	92 17       	cp	r25, r18
    a624:	38 f4       	brcc	.+14     	; 0xa634 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    a626:	e8 0f       	add	r30, r24
    a628:	f1 1d       	adc	r31, r1
    a62a:	e8 0f       	add	r30, r24
    a62c:	f1 1d       	adc	r31, r1
    a62e:	86 81       	ldd	r24, Z+6	; 0x06
    a630:	97 81       	ldd	r25, Z+7	; 0x07
    a632:	08 95       	ret
	}
	anim->frame_count = 0;
    a634:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a636:	90 e0       	ldi	r25, 0x00	; 0
    a638:	01 96       	adiw	r24, 0x01	; 1
    a63a:	61 81       	ldd	r22, Z+1	; 0x01
    a63c:	70 e0       	ldi	r23, 0x00	; 0
    a63e:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    a642:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a644:	81 11       	cpse	r24, r1
    a646:	02 c0       	rjmp	.+4      	; 0xa64c <LBGetNextFrame+0x38>
    a648:	21 e0       	ldi	r18, 0x01	; 1
    a64a:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    a64c:	99 27       	eor	r25, r25
    a64e:	03 96       	adiw	r24, 0x03	; 3
    a650:	88 0f       	add	r24, r24
    a652:	99 1f       	adc	r25, r25
    a654:	e8 0f       	add	r30, r24
    a656:	f9 1f       	adc	r31, r25
    a658:	80 81       	ld	r24, Z
    a65a:	91 81       	ldd	r25, Z+1	; 0x01
}
    a65c:	08 95       	ret

0000a65e <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    a65e:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a660:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a662:	93 81       	ldd	r25, Z+3	; 0x03
    a664:	9f 5f       	subi	r25, 0xFF	; 255
    a666:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a668:	22 81       	ldd	r18, Z+2	; 0x02
    a66a:	80 81       	ld	r24, Z
    a66c:	92 17       	cp	r25, r18
    a66e:	e0 f0       	brcs	.+56     	; 0xa6a8 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    a670:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    a672:	95 81       	ldd	r25, Z+5	; 0x05
    a674:	99 23       	and	r25, r25
    a676:	49 f0       	breq	.+18     	; 0xa68a <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    a678:	81 50       	subi	r24, 0x01	; 1
    a67a:	10 f0       	brcs	.+4      	; 0xa680 <LBGetNextFrameReverse+0x22>
    a67c:	80 83       	st	Z, r24
    a67e:	13 c0       	rjmp	.+38     	; 0xa6a6 <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    a680:	10 82       	st	Z, r1
			anim->looped = 1;
    a682:	81 e0       	ldi	r24, 0x01	; 1
    a684:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    a686:	15 82       	std	Z+5, r1	; 0x05
    a688:	0e c0       	rjmp	.+28     	; 0xa6a6 <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a68a:	21 81       	ldd	r18, Z+1	; 0x01
    a68c:	90 e0       	ldi	r25, 0x00	; 0
    a68e:	01 96       	adiw	r24, 0x01	; 1
    a690:	62 2f       	mov	r22, r18
    a692:	70 e0       	ldi	r23, 0x00	; 0
    a694:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    a698:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    a69a:	81 11       	cpse	r24, r1
    a69c:	04 c0       	rjmp	.+8      	; 0xa6a6 <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    a69e:	81 e0       	ldi	r24, 0x01	; 1
    a6a0:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    a6a2:	21 50       	subi	r18, 0x01	; 1
    a6a4:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    a6a6:	80 81       	ld	r24, Z
    a6a8:	e8 0f       	add	r30, r24
    a6aa:	f1 1d       	adc	r31, r1
    a6ac:	e8 0f       	add	r30, r24
    a6ae:	f1 1d       	adc	r31, r1
    a6b0:	86 81       	ldd	r24, Z+6	; 0x06
    a6b2:	97 81       	ldd	r25, Z+7	; 0x07
}
    a6b4:	08 95       	ret

0000a6b6 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a6b6:	0f 93       	push	r16
    a6b8:	1f 93       	push	r17
    a6ba:	cf 93       	push	r28
    a6bc:	df 93       	push	r29
    a6be:	1f 92       	push	r1
    a6c0:	cd b7       	in	r28, 0x3d	; 61
    a6c2:	de b7       	in	r29, 0x3e	; 62
    a6c4:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    a6c6:	86 2f       	mov	r24, r22
    a6c8:	69 83       	std	Y+1, r22	; 0x01
    a6ca:	0e 94 08 44 	call	0x8810	; 0x8810 <ReadJoypad>
    a6ce:	d8 01       	movw	r26, r16
    a6d0:	15 96       	adiw	r26, 0x05	; 5
    a6d2:	9c 93       	st	X, r25
    a6d4:	8e 93       	st	-X, r24
    a6d6:	14 97       	sbiw	r26, 0x04	; 4
    a6d8:	69 81       	ldd	r22, Y+1	; 0x01
    a6da:	e6 2f       	mov	r30, r22
    a6dc:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a6de:	00 97       	sbiw	r24, 0x00	; 0
    a6e0:	51 f0       	breq	.+20     	; 0xa6f6 <LBGetJoyPadState+0x40>
    a6e2:	df 01       	movw	r26, r30
    a6e4:	aa 0f       	add	r26, r26
    a6e6:	bb 1f       	adc	r27, r27
    a6e8:	ad 5c       	subi	r26, 0xCD	; 205
    a6ea:	b4 4f       	sbci	r27, 0xF4	; 244
    a6ec:	2d 91       	ld	r18, X+
    a6ee:	3c 91       	ld	r19, X
    a6f0:	82 17       	cp	r24, r18
    a6f2:	93 07       	cpc	r25, r19
    a6f4:	21 f0       	breq	.+8      	; 0xa6fe <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a6f6:	d8 01       	movw	r26, r16
    a6f8:	16 96       	adiw	r26, 0x06	; 6
    a6fa:	1c 92       	st	X, r1
    a6fc:	07 c0       	rjmp	.+14     	; 0xa70c <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a6fe:	d8 01       	movw	r26, r16
    a700:	16 96       	adiw	r26, 0x06	; 6
    a702:	2c 91       	ld	r18, X
    a704:	16 97       	sbiw	r26, 0x06	; 6
    a706:	2f 5f       	subi	r18, 0xFF	; 255
    a708:	16 96       	adiw	r26, 0x06	; 6
    a70a:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a70c:	ee 0f       	add	r30, r30
    a70e:	ff 1f       	adc	r31, r31
    a710:	ed 5c       	subi	r30, 0xCD	; 205
    a712:	f4 4f       	sbci	r31, 0xF4	; 244
    a714:	20 81       	ld	r18, Z
    a716:	31 81       	ldd	r19, Z+1	; 0x01
    a718:	a9 01       	movw	r20, r18
    a71a:	40 95       	com	r20
    a71c:	50 95       	com	r21
    a71e:	48 23       	and	r20, r24
    a720:	59 23       	and	r21, r25
    a722:	d8 01       	movw	r26, r16
    a724:	11 96       	adiw	r26, 0x01	; 1
    a726:	5c 93       	st	X, r21
    a728:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a72a:	ac 01       	movw	r20, r24
    a72c:	40 95       	com	r20
    a72e:	50 95       	com	r21
    a730:	24 23       	and	r18, r20
    a732:	35 23       	and	r19, r21
    a734:	13 96       	adiw	r26, 0x03	; 3
    a736:	3c 93       	st	X, r19
    a738:	2e 93       	st	-X, r18
    a73a:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a73c:	91 83       	std	Z+1, r25	; 0x01
    a73e:	80 83       	st	Z, r24
}
    a740:	0f 90       	pop	r0
    a742:	df 91       	pop	r29
    a744:	cf 91       	pop	r28
    a746:	1f 91       	pop	r17
    a748:	0f 91       	pop	r16
    a74a:	08 95       	ret

0000a74c <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    a74c:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    a74e:	fb 01       	movw	r30, r22
    a750:	2e 2f       	mov	r18, r30
    a752:	23 1b       	sub	r18, r19
    a754:	24 17       	cp	r18, r20
    a756:	28 f4       	brcc	.+10     	; 0xa762 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    a758:	21 91       	ld	r18, Z+
    a75a:	dc 01       	movw	r26, r24
    a75c:	2d 93       	st	X+, r18
    a75e:	cd 01       	movw	r24, r26
    a760:	f7 cf       	rjmp	.-18     	; 0xa750 <LBCopyChars+0x4>
	}
}
    a762:	08 95       	ret

0000a764 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    a764:	af 92       	push	r10
    a766:	bf 92       	push	r11
    a768:	cf 92       	push	r12
    a76a:	df 92       	push	r13
    a76c:	ef 92       	push	r14
    a76e:	ff 92       	push	r15
    a770:	0f 93       	push	r16
    a772:	1f 93       	push	r17
    a774:	cf 93       	push	r28
    a776:	df 93       	push	r29
    a778:	1f 92       	push	r1
    a77a:	cd b7       	in	r28, 0x3d	; 61
    a77c:	de b7       	in	r29, 0x3e	; 62
    a77e:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    a780:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    a782:	c6 2e       	mov	r12, r22
    a784:	d1 2c       	mov	r13, r1
    a786:	90 e0       	ldi	r25, 0x00	; 0
    a788:	5c 01       	movw	r10, r24
    a78a:	a4 1a       	sub	r10, r20
    a78c:	b5 0a       	sbc	r11, r21
    a78e:	80 2f       	mov	r24, r16
    a790:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    a792:	82 17       	cp	r24, r18
    a794:	60 f4       	brcc	.+24     	; 0xa7ae <LBPrintStr+0x4a>
    a796:	c5 01       	movw	r24, r10
    a798:	80 0f       	add	r24, r16
    a79a:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    a79c:	f8 01       	movw	r30, r16
    a79e:	41 91       	ld	r20, Z+
    a7a0:	8f 01       	movw	r16, r30
    a7a2:	b6 01       	movw	r22, r12
    a7a4:	29 83       	std	Y+1, r18	; 0x01
    a7a6:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
    a7aa:	29 81       	ldd	r18, Y+1	; 0x01
    a7ac:	f0 cf       	rjmp	.-32     	; 0xa78e <LBPrintStr+0x2a>
	}
}
    a7ae:	0f 90       	pop	r0
    a7b0:	df 91       	pop	r29
    a7b2:	cf 91       	pop	r28
    a7b4:	1f 91       	pop	r17
    a7b6:	0f 91       	pop	r16
    a7b8:	ff 90       	pop	r15
    a7ba:	ef 90       	pop	r14
    a7bc:	df 90       	pop	r13
    a7be:	cf 90       	pop	r12
    a7c0:	bf 90       	pop	r11
    a7c2:	af 90       	pop	r10
    a7c4:	08 95       	ret

0000a7c6 <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a7c6:	af 92       	push	r10
    a7c8:	cf 92       	push	r12
    a7ca:	ef 92       	push	r14
    a7cc:	ff 92       	push	r15
    a7ce:	0f 93       	push	r16
    a7d0:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a7d2:	70 e0       	ldi	r23, 0x00	; 0
    a7d4:	f1 2c       	mov	r15, r1
    a7d6:	fb 01       	movw	r30, r22
    a7d8:	e2 0f       	add	r30, r18
    a7da:	f1 1d       	adc	r31, r1
    a7dc:	ee 16       	cp	r14, r30
    a7de:	ff 06       	cpc	r15, r31
    a7e0:	a4 f4       	brge	.+40     	; 0xa80a <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a7e2:	ea 0c       	add	r14, r10
    a7e4:	f1 1c       	adc	r15, r1
    a7e6:	6e 15       	cp	r22, r14
    a7e8:	7f 05       	cpc	r23, r15
    a7ea:	7c f4       	brge	.+30     	; 0xa80a <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a7ec:	28 2f       	mov	r18, r24
    a7ee:	30 e0       	ldi	r19, 0x00	; 0
    a7f0:	10 e0       	ldi	r17, 0x00	; 0
    a7f2:	c9 01       	movw	r24, r18
    a7f4:	84 0f       	add	r24, r20
    a7f6:	91 1d       	adc	r25, r1
    a7f8:	08 17       	cp	r16, r24
    a7fa:	19 07       	cpc	r17, r25
    a7fc:	34 f4       	brge	.+12     	; 0xa80a <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a7fe:	0c 0d       	add	r16, r12
    a800:	11 1d       	adc	r17, r1
    a802:	81 e0       	ldi	r24, 0x01	; 1
    a804:	20 17       	cp	r18, r16
    a806:	31 07       	cpc	r19, r17
    a808:	0c f0       	brlt	.+2      	; 0xa80c <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a80a:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a80c:	1f 91       	pop	r17
    a80e:	0f 91       	pop	r16
    a810:	ff 90       	pop	r15
    a812:	ef 90       	pop	r14
    a814:	cf 90       	pop	r12
    a816:	af 90       	pop	r10
    a818:	08 95       	ret

0000a81a <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    a81a:	2f 92       	push	r2
    a81c:	3f 92       	push	r3
    a81e:	4f 92       	push	r4
    a820:	5f 92       	push	r5
    a822:	6f 92       	push	r6
    a824:	7f 92       	push	r7
    a826:	8f 92       	push	r8
    a828:	9f 92       	push	r9
    a82a:	af 92       	push	r10
    a82c:	bf 92       	push	r11
    a82e:	cf 92       	push	r12
    a830:	df 92       	push	r13
    a832:	ef 92       	push	r14
    a834:	ff 92       	push	r15
    a836:	0f 93       	push	r16
    a838:	1f 93       	push	r17
    a83a:	cf 93       	push	r28
    a83c:	df 93       	push	r29
    a83e:	00 d0       	rcall	.+0      	; 0xa840 <LBLineIntersect+0x26>
    a840:	00 d0       	rcall	.+0      	; 0xa842 <LBLineIntersect+0x28>
    a842:	cd b7       	in	r28, 0x3d	; 61
    a844:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a846:	f1 2c       	mov	r15, r1
    a848:	8a 2c       	mov	r8, r10
    a84a:	91 2c       	mov	r9, r1
    a84c:	8e 18       	sub	r8, r14
    a84e:	9f 08       	sbc	r9, r15
    a850:	a8 2e       	mov	r10, r24
    a852:	b1 2c       	mov	r11, r1
    a854:	24 2e       	mov	r2, r20
    a856:	31 2c       	mov	r3, r1
    a858:	2a 18       	sub	r2, r10
    a85a:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a85c:	10 e0       	ldi	r17, 0x00	; 0
    a85e:	d1 2c       	mov	r13, r1
    a860:	c0 1a       	sub	r12, r16
    a862:	d1 0a       	sbc	r13, r17
    a864:	46 2f       	mov	r20, r22
    a866:	50 e0       	ldi	r21, 0x00	; 0
    a868:	5c 83       	std	Y+4, r21	; 0x04
    a86a:	4b 83       	std	Y+3, r20	; 0x03
    a86c:	82 2f       	mov	r24, r18
    a86e:	90 e0       	ldi	r25, 0x00	; 0
    a870:	9a 83       	std	Y+2, r25	; 0x02
    a872:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a874:	82 9c       	mul	r8, r2
    a876:	90 01       	movw	r18, r0
    a878:	83 9c       	mul	r8, r3
    a87a:	30 0d       	add	r19, r0
    a87c:	92 9c       	mul	r9, r2
    a87e:	30 0d       	add	r19, r0
    a880:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a882:	ca 01       	movw	r24, r20
    a884:	e9 81       	ldd	r30, Y+1	; 0x01
    a886:	fa 81       	ldd	r31, Y+2	; 0x02
    a888:	8e 1b       	sub	r24, r30
    a88a:	9f 0b       	sbc	r25, r31
    a88c:	c8 9e       	mul	r12, r24
    a88e:	b0 01       	movw	r22, r0
    a890:	c9 9e       	mul	r12, r25
    a892:	70 0d       	add	r23, r0
    a894:	d8 9e       	mul	r13, r24
    a896:	70 0d       	add	r23, r0
    a898:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a89a:	62 0f       	add	r22, r18
    a89c:	73 1f       	adc	r23, r19
    a89e:	88 27       	eor	r24, r24
    a8a0:	77 fd       	sbrc	r23, 7
    a8a2:	80 95       	com	r24
    a8a4:	98 2f       	mov	r25, r24
    a8a6:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    a8aa:	2b 01       	movw	r4, r22
    a8ac:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a8ae:	20 e0       	ldi	r18, 0x00	; 0
    a8b0:	30 e0       	ldi	r19, 0x00	; 0
    a8b2:	a9 01       	movw	r20, r18
    a8b4:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    a8b8:	88 23       	and	r24, r24
    a8ba:	09 f4       	brne	.+2      	; 0xa8be <LBLineIntersect+0xa4>
    a8bc:	6c c0       	rjmp	.+216    	; 0xa996 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8be:	4b 81       	ldd	r20, Y+3	; 0x03
    a8c0:	5c 81       	ldd	r21, Y+4	; 0x04
    a8c2:	4e 19       	sub	r20, r14
    a8c4:	5f 09       	sbc	r21, r15
    a8c6:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8c8:	0a 19       	sub	r16, r10
    a8ca:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8cc:	c4 9e       	mul	r12, r20
    a8ce:	c0 01       	movw	r24, r0
    a8d0:	c5 9e       	mul	r12, r21
    a8d2:	90 0d       	add	r25, r0
    a8d4:	d4 9e       	mul	r13, r20
    a8d6:	90 0d       	add	r25, r0
    a8d8:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8da:	80 9e       	mul	r8, r16
    a8dc:	b0 01       	movw	r22, r0
    a8de:	81 9e       	mul	r8, r17
    a8e0:	70 0d       	add	r23, r0
    a8e2:	90 9e       	mul	r9, r16
    a8e4:	70 0d       	add	r23, r0
    a8e6:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8e8:	68 0f       	add	r22, r24
    a8ea:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a8ec:	88 27       	eor	r24, r24
    a8ee:	77 fd       	sbrc	r23, 7
    a8f0:	80 95       	com	r24
    a8f2:	98 2f       	mov	r25, r24
    a8f4:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a8f8:	a3 01       	movw	r20, r6
    a8fa:	92 01       	movw	r18, r4
    a8fc:	0e 94 76 74 	call	0xe8ec	; 0xe8ec <__divsf3>
    a900:	4b 01       	movw	r8, r22
    a902:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a904:	20 e0       	ldi	r18, 0x00	; 0
    a906:	30 e0       	ldi	r19, 0x00	; 0
    a908:	a9 01       	movw	r20, r18
    a90a:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    a90e:	87 fd       	sbrc	r24, 7
    a910:	42 c0       	rjmp	.+132    	; 0xa996 <LBLineIntersect+0x17c>
    a912:	20 e0       	ldi	r18, 0x00	; 0
    a914:	30 e0       	ldi	r19, 0x00	; 0
    a916:	40 e8       	ldi	r20, 0x80	; 128
    a918:	5f e3       	ldi	r21, 0x3F	; 63
    a91a:	c5 01       	movw	r24, r10
    a91c:	b4 01       	movw	r22, r8
    a91e:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    a922:	18 16       	cp	r1, r24
    a924:	c4 f1       	brlt	.+112    	; 0xa996 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a926:	2e 9c       	mul	r2, r14
    a928:	b0 01       	movw	r22, r0
    a92a:	2f 9c       	mul	r2, r15
    a92c:	70 0d       	add	r23, r0
    a92e:	3e 9c       	mul	r3, r14
    a930:	70 0d       	add	r23, r0
    a932:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a934:	29 81       	ldd	r18, Y+1	; 0x01
    a936:	3a 81       	ldd	r19, Y+2	; 0x02
    a938:	8b 81       	ldd	r24, Y+3	; 0x03
    a93a:	9c 81       	ldd	r25, Y+4	; 0x04
    a93c:	28 1b       	sub	r18, r24
    a93e:	39 0b       	sbc	r19, r25
    a940:	20 9f       	mul	r18, r16
    a942:	c0 01       	movw	r24, r0
    a944:	21 9f       	mul	r18, r17
    a946:	90 0d       	add	r25, r0
    a948:	30 9f       	mul	r19, r16
    a94a:	90 0d       	add	r25, r0
    a94c:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a94e:	68 0f       	add	r22, r24
    a950:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a952:	88 27       	eor	r24, r24
    a954:	77 fd       	sbrc	r23, 7
    a956:	80 95       	com	r24
    a958:	98 2f       	mov	r25, r24
    a95a:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a95e:	a3 01       	movw	r20, r6
    a960:	92 01       	movw	r18, r4
    a962:	0e 94 76 74 	call	0xe8ec	; 0xe8ec <__divsf3>
    a966:	6b 01       	movw	r12, r22
    a968:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a96a:	20 e0       	ldi	r18, 0x00	; 0
    a96c:	30 e0       	ldi	r19, 0x00	; 0
    a96e:	a9 01       	movw	r20, r18
    a970:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    a974:	87 fd       	sbrc	r24, 7
    a976:	0f c0       	rjmp	.+30     	; 0xa996 <LBLineIntersect+0x17c>
    a978:	11 e0       	ldi	r17, 0x01	; 1
    a97a:	20 e0       	ldi	r18, 0x00	; 0
    a97c:	30 e0       	ldi	r19, 0x00	; 0
    a97e:	40 e8       	ldi	r20, 0x80	; 128
    a980:	5f e3       	ldi	r21, 0x3F	; 63
    a982:	c7 01       	movw	r24, r14
    a984:	b6 01       	movw	r22, r12
    a986:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    a98a:	18 16       	cp	r1, r24
    a98c:	0c f0       	brlt	.+2      	; 0xa990 <LBLineIntersect+0x176>
    a98e:	10 e0       	ldi	r17, 0x00	; 0
    a990:	81 e0       	ldi	r24, 0x01	; 1
    a992:	81 27       	eor	r24, r17
    a994:	01 c0       	rjmp	.+2      	; 0xa998 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a996:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a998:	0f 90       	pop	r0
    a99a:	0f 90       	pop	r0
    a99c:	0f 90       	pop	r0
    a99e:	0f 90       	pop	r0
    a9a0:	df 91       	pop	r29
    a9a2:	cf 91       	pop	r28
    a9a4:	1f 91       	pop	r17
    a9a6:	0f 91       	pop	r16
    a9a8:	ff 90       	pop	r15
    a9aa:	ef 90       	pop	r14
    a9ac:	df 90       	pop	r13
    a9ae:	cf 90       	pop	r12
    a9b0:	bf 90       	pop	r11
    a9b2:	af 90       	pop	r10
    a9b4:	9f 90       	pop	r9
    a9b6:	8f 90       	pop	r8
    a9b8:	7f 90       	pop	r7
    a9ba:	6f 90       	pop	r6
    a9bc:	5f 90       	pop	r5
    a9be:	4f 90       	pop	r4
    a9c0:	3f 90       	pop	r3
    a9c2:	2f 90       	pop	r2
    a9c4:	08 95       	ret

0000a9c6 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a9c6:	0f 93       	push	r16
    a9c8:	1f 93       	push	r17
    a9ca:	cf 93       	push	r28
    a9cc:	df 93       	push	r29
    a9ce:	8c 01       	movw	r16, r24
    a9d0:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetTrueRandomSeed();
    a9d2:	80 91 31 0b 	lds	r24, 0x0B31
    a9d6:	90 91 32 0b 	lds	r25, 0x0B32
    a9da:	89 2b       	or	r24, r25
    a9dc:	31 f4       	brne	.+12     	; 0xa9ea <LBRandom+0x24>
    a9de:	0e 94 56 44 	call	0x88ac	; 0x88ac <GetTrueRandomSeed>
    a9e2:	90 93 32 0b 	sts	0x0B32, r25
    a9e6:	80 93 31 0b 	sts	0x0B31, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    a9ea:	90 91 30 0b 	lds	r25, 0x0B30
    a9ee:	20 91 31 0b 	lds	r18, 0x0B31
    a9f2:	30 91 32 0b 	lds	r19, 0x0B32
    a9f6:	09 2e       	mov	r0, r25
    a9f8:	02 c0       	rjmp	.+4      	; 0xa9fe <LBRandom+0x38>
    a9fa:	36 95       	lsr	r19
    a9fc:	27 95       	ror	r18
    a9fe:	0a 94       	dec	r0
    aa00:	e2 f7       	brpl	.-8      	; 0xa9fa <LBRandom+0x34>
	unsigned int delta = to - from;
    aa02:	be 01       	movw	r22, r28
    aa04:	60 1b       	sub	r22, r16
    aa06:	71 0b       	sbc	r23, r17

	shift_count++;
    aa08:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    aa0a:	90 31       	cpi	r25, 0x10	; 16
    aa0c:	18 f4       	brcc	.+6      	; 0xaa14 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    aa0e:	90 93 30 0b 	sts	0x0B30, r25
    aa12:	02 c0       	rjmp	.+4      	; 0xaa18 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    aa14:	10 92 30 0b 	sts	0x0B30, r1

	return from + ((delta + shifted) % delta);
    aa18:	cb 01       	movw	r24, r22
    aa1a:	82 0f       	add	r24, r18
    aa1c:	93 1f       	adc	r25, r19
    aa1e:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <__udivmodhi4>
}
    aa22:	80 0f       	add	r24, r16
    aa24:	91 1f       	adc	r25, r17
    aa26:	df 91       	pop	r29
    aa28:	cf 91       	pop	r28
    aa2a:	1f 91       	pop	r17
    aa2c:	0f 91       	pop	r16
    aa2e:	08 95       	ret

0000aa30 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    aa30:	cf 93       	push	r28
    aa32:	df 93       	push	r29
    aa34:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    aa36:	c0 e0       	ldi	r28, 0x00	; 0
    aa38:	cd 17       	cp	r28, r29
    aa3a:	31 f0       	breq	.+12     	; 0xaa48 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    aa3c:	8f ef       	ldi	r24, 0xFF	; 255
    aa3e:	9f ef       	ldi	r25, 0xFF	; 255
    aa40:	0e 94 14 44 	call	0x8828	; 0x8828 <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    aa44:	cf 5f       	subi	r28, 0xFF	; 255
    aa46:	f8 cf       	rjmp	.-16     	; 0xaa38 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    aa48:	df 91       	pop	r29
    aa4a:	cf 91       	pop	r28
    aa4c:	08 95       	ret

0000aa4e <LBHideAllSprites>:

void LBHideAllSprites()
{
    aa4e:	e8 e6       	ldi	r30, 0x68	; 104
    aa50:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    aa52:	80 ef       	ldi	r24, 0xF0	; 240
    aa54:	80 83       	st	Z, r24
    aa56:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    aa58:	94 e0       	ldi	r25, 0x04	; 4
    aa5a:	e0 39       	cpi	r30, 0x90	; 144
    aa5c:	f9 07       	cpc	r31, r25
    aa5e:	d1 f7       	brne	.-12     	; 0xaa54 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    aa60:	08 95       	ret

0000aa62 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    aa62:	2b e8       	ldi	r18, 0x8B	; 139
    aa64:	30 e0       	ldi	r19, 0x00	; 0
    aa66:	fc 01       	movw	r30, r24
    aa68:	21 93       	st	Z+, r18
    aa6a:	31 93       	st	Z+, r19
    aa6c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    aa6e:	4e e1       	ldi	r20, 0x1E	; 30
    aa70:	50 e0       	ldi	r21, 0x00	; 0
    aa72:	6e e2       	ldi	r22, 0x2E	; 46
    aa74:	71 e0       	ldi	r23, 0x01	; 1
    aa76:	0c 94 28 76 	jmp	0xec50	; 0xec50 <memcpy_P>

0000aa7a <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    aa7a:	2a e8       	ldi	r18, 0x8A	; 138
    aa7c:	30 e0       	ldi	r19, 0x00	; 0
    aa7e:	fc 01       	movw	r30, r24
    aa80:	21 93       	st	Z+, r18
    aa82:	31 93       	st	Z+, r19
    aa84:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    aa86:	4e e1       	ldi	r20, 0x1E	; 30
    aa88:	50 e0       	ldi	r21, 0x00	; 0
    aa8a:	6c e4       	ldi	r22, 0x4C	; 76
    aa8c:	71 e0       	ldi	r23, 0x01	; 1
    aa8e:	0c 94 28 76 	jmp	0xec50	; 0xec50 <memcpy_P>

0000aa92 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    aa92:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    aa94:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aa96:	16 86       	std	Z+14, r1	; 0x0e
    aa98:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    aa9a:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    aa9c:	73 e0       	ldi	r23, 0x03	; 3
    aa9e:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aaa0:	65 e0       	ldi	r22, 0x05	; 5
    aaa2:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    aaa4:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    aaa6:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    aaa8:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aaaa:	4d ef       	ldi	r20, 0xFD	; 253
    aaac:	5d e7       	ldi	r21, 0x7D	; 125
    aaae:	50 87       	std	Z+8, r21	; 0x08
    aab0:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aab2:	2a ef       	ldi	r18, 0xFA	; 250
    aab4:	3d e7       	ldi	r19, 0x7D	; 125
    aab6:	32 87       	std	Z+10, r19	; 0x0a
    aab8:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aaba:	87 ef       	ldi	r24, 0xF7	; 247
    aabc:	9d e7       	ldi	r25, 0x7D	; 125
    aabe:	94 87       	std	Z+12, r25	; 0x0c
    aac0:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    aac2:	14 8e       	std	Z+28, r1	; 0x1c
    aac4:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    aac6:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    aac8:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    aaca:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    aacc:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    aace:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    aad0:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    aad2:	56 8b       	std	Z+22, r21	; 0x16
    aad4:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    aad6:	30 8f       	std	Z+24, r19	; 0x18
    aad8:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    aada:	92 8f       	std	Z+26, r25	; 0x1a
    aadc:	81 8f       	std	Z+25, r24	; 0x19
    aade:	08 95       	ret

0000aae0 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    aae0:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    aae2:	15 86       	std	Z+13, r1	; 0x0d
    aae4:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    aae6:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    aae8:	83 e0       	ldi	r24, 0x03	; 3
    aaea:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    aaec:	8e e1       	ldi	r24, 0x1E	; 30
    aaee:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    aaf0:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    aaf2:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    aaf4:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    aaf6:	83 ed       	ldi	r24, 0xD3	; 211
    aaf8:	9d e7       	ldi	r25, 0x7D	; 125
    aafa:	97 83       	std	Z+7, r25	; 0x07
    aafc:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    aafe:	80 ed       	ldi	r24, 0xD0	; 208
    ab00:	9d e7       	ldi	r25, 0x7D	; 125
    ab02:	91 87       	std	Z+9, r25	; 0x09
    ab04:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    ab06:	8d ec       	ldi	r24, 0xCD	; 205
    ab08:	9d e7       	ldi	r25, 0x7D	; 125
    ab0a:	93 87       	std	Z+11, r25	; 0x0b
    ab0c:	82 87       	std	Z+10, r24	; 0x0a
    ab0e:	08 95       	ret

0000ab10 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    ab10:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    ab12:	15 86       	std	Z+13, r1	; 0x0d
    ab14:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    ab16:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    ab18:	82 e0       	ldi	r24, 0x02	; 2
    ab1a:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    ab1c:	8c e3       	ldi	r24, 0x3C	; 60
    ab1e:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    ab20:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    ab22:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    ab24:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    ab26:	81 e6       	ldi	r24, 0x61	; 97
    ab28:	9b e7       	ldi	r25, 0x7B	; 123
    ab2a:	97 83       	std	Z+7, r25	; 0x07
    ab2c:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    ab2e:	87 e9       	ldi	r24, 0x97	; 151
    ab30:	9c e7       	ldi	r25, 0x7C	; 124
    ab32:	91 87       	std	Z+9, r25	; 0x09
    ab34:	80 87       	std	Z+8, r24	; 0x08
    ab36:	08 95       	ret

0000ab38 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    ab38:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    ab3a:	88 e7       	ldi	r24, 0x78	; 120
    ab3c:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    ab3e:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    ab40:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    ab42:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    ab44:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    ab46:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    ab48:	84 e0       	ldi	r24, 0x04	; 4
    ab4a:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    ab4c:	66 23       	and	r22, r22
    ab4e:	11 f0       	breq	.+4      	; 0xab54 <init_shot_state+0x1c>
    ab50:	85 e0       	ldi	r24, 0x05	; 5
    ab52:	01 c0       	rjmp	.+2      	; 0xab56 <init_shot_state+0x1e>
    ab54:	81 e0       	ldi	r24, 0x01	; 1
    ab56:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    ab58:	80 e0       	ldi	r24, 0x00	; 0
    ab5a:	90 e0       	ldi	r25, 0x00	; 0
    ab5c:	a0 e7       	ldi	r26, 0x70	; 112
    ab5e:	b3 e4       	ldi	r27, 0x43	; 67
    ab60:	83 83       	std	Z+3, r24	; 0x03
    ab62:	94 83       	std	Z+4, r25	; 0x04
    ab64:	a5 83       	std	Z+5, r26	; 0x05
    ab66:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    ab68:	17 82       	std	Z+7, r1	; 0x07
    ab6a:	10 86       	std	Z+8, r1	; 0x08
    ab6c:	11 86       	std	Z+9, r1	; 0x09
    ab6e:	12 86       	std	Z+10, r1	; 0x0a
    ab70:	08 95       	ret

0000ab72 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    ab72:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    ab74:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    ab76:	82 e0       	ldi	r24, 0x02	; 2
    ab78:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ab7a:	85 e0       	ldi	r24, 0x05	; 5
    ab7c:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    ab7e:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    ab80:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    ab82:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    ab84:	61 11       	cpse	r22, r1
    ab86:	03 c0       	rjmp	.+6      	; 0xab8e <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    ab88:	8b e6       	ldi	r24, 0x6B	; 107
    ab8a:	94 e4       	ldi	r25, 0x44	; 68
    ab8c:	13 c0       	rjmp	.+38     	; 0xabb4 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    ab8e:	61 30       	cpi	r22, 0x01	; 1
    ab90:	79 f4       	brne	.+30     	; 0xabb0 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    ab92:	88 e6       	ldi	r24, 0x68	; 104
    ab94:	94 e4       	ldi	r25, 0x44	; 68
    ab96:	97 8b       	std	Z+23, r25	; 0x17
    ab98:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    ab9a:	85 e6       	ldi	r24, 0x65	; 101
    ab9c:	94 e4       	ldi	r25, 0x44	; 68
    ab9e:	91 8f       	std	Z+25, r25	; 0x19
    aba0:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    aba2:	82 e6       	ldi	r24, 0x62	; 98
    aba4:	94 e4       	ldi	r25, 0x44	; 68
    aba6:	93 a3       	std	Z+35, r25	; 0x23
    aba8:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    abaa:	8f e5       	ldi	r24, 0x5F	; 95
    abac:	94 e4       	ldi	r25, 0x44	; 68
    abae:	08 c0       	rjmp	.+16     	; 0xabc0 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    abb0:	83 e5       	ldi	r24, 0x53	; 83
    abb2:	94 e4       	ldi	r25, 0x44	; 68
    abb4:	97 8b       	std	Z+23, r25	; 0x17
    abb6:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    abb8:	91 8f       	std	Z+25, r25	; 0x19
    abba:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    abbc:	93 a3       	std	Z+35, r25	; 0x23
    abbe:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    abc0:	95 a3       	std	Z+37, r25	; 0x25
    abc2:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    abc4:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    abc6:	82 e0       	ldi	r24, 0x02	; 2
    abc8:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    abca:	85 e0       	ldi	r24, 0x05	; 5
    abcc:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    abce:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    abd0:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    abd2:	11 a2       	std	Z+33, r1	; 0x21
    abd4:	08 95       	ret

0000abd6 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    abd6:	0f 93       	push	r16
    abd8:	1f 93       	push	r17
    abda:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    abdc:	85 e0       	ldi	r24, 0x05	; 5
    abde:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    abe0:	83 e0       	ldi	r24, 0x03	; 3
    abe2:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    abe4:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    abe6:	8a e5       	ldi	r24, 0x5A	; 90
    abe8:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    abea:	43 83       	std	Z+3, r20	; 0x03
    abec:	54 83       	std	Z+4, r21	; 0x04
    abee:	65 83       	std	Z+5, r22	; 0x05
    abf0:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    abf2:	07 83       	std	Z+7, r16	; 0x07
    abf4:	10 87       	std	Z+8, r17	; 0x08
    abf6:	21 87       	std	Z+9, r18	; 0x09
    abf8:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    abfa:	8a ef       	ldi	r24, 0xFA	; 250
    abfc:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    abfe:	82 e0       	ldi	r24, 0x02	; 2
    ac00:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    ac02:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    ac04:	40 e0       	ldi	r20, 0x00	; 0
    ac06:	50 e0       	ldi	r21, 0x00	; 0
    ac08:	60 e7       	ldi	r22, 0x70	; 112
    ac0a:	73 e4       	ldi	r23, 0x43	; 67
    ac0c:	47 87       	std	Z+15, r20	; 0x0f
    ac0e:	50 8b       	std	Z+16, r21	; 0x10
    ac10:	61 8b       	std	Z+17, r22	; 0x11
    ac12:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    ac14:	13 8a       	std	Z+19, r1	; 0x13
    ac16:	14 8a       	std	Z+20, r1	; 0x14
    ac18:	15 8a       	std	Z+21, r1	; 0x15
    ac1a:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    ac1c:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    ac1e:	94 e6       	ldi	r25, 0x64	; 100
    ac20:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    ac22:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    ac24:	84 e0       	ldi	r24, 0x04	; 4
    ac26:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    ac28:	81 e0       	ldi	r24, 0x01	; 1
    ac2a:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    ac2c:	62 e0       	ldi	r22, 0x02	; 2
    ac2e:	cf 01       	movw	r24, r30
    ac30:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    ac32:	1f 91       	pop	r17
    ac34:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    ac36:	0c 94 b9 55 	jmp	0xab72	; 0xab72 <set_shot_animations>

0000ac3a <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    ac3a:	0f 93       	push	r16
    ac3c:	1f 93       	push	r17
    ac3e:	cf 93       	push	r28
    ac40:	df 93       	push	r29
    ac42:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    ac44:	8a e5       	ldi	r24, 0x5A	; 90
    ac46:	8e 8b       	std	Y+22, r24	; 0x16
	p->grace_frame = FRAMES_PER_GRACE;
    ac48:	88 e7       	ldi	r24, 0x78	; 120
    ac4a:	88 8f       	std	Y+24, r24	; 0x18
	p->banter_index = 0;
    ac4c:	1f 8a       	std	Y+23, r1	; 0x17
	p->score = 0;
    ac4e:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    ac50:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    ac52:	18 82       	st	Y, r1
	p->shared.speed = 0;
    ac54:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    ac56:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    ac58:	82 e3       	ldi	r24, 0x32	; 50
    ac5a:	89 8f       	std	Y+25, r24	; 0x19
	p->has_over_speed = false;
    ac5c:	1b 8e       	std	Y+27, r1	; 0x1b
	p->has_rocket = false;
    ac5e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->flags = 0;
    ac60:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    ac62:	fe 01       	movw	r30, r28
    ac64:	e9 5a       	subi	r30, 0xA9	; 169
    ac66:	ff 4f       	sbci	r31, 0xFF	; 255
    ac68:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    ac6a:	31 96       	adiw	r30, 0x01	; 1
    ac6c:	91 e0       	ldi	r25, 0x01	; 1
    ac6e:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ac70:	31 96       	adiw	r30, 0x01	; 1
    ac72:	85 e0       	ldi	r24, 0x05	; 5
    ac74:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    ac76:	31 96       	adiw	r30, 0x01	; 1
    ac78:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    ac7a:	31 96       	adiw	r30, 0x01	; 1
    ac7c:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    ac7e:	31 96       	adiw	r30, 0x01	; 1
    ac80:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    ac82:	31 96       	adiw	r30, 0x01	; 1
    ac84:	71 83       	std	Z+1, r23	; 0x01
    ac86:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    ac88:	36 96       	adiw	r30, 0x06	; 6
    ac8a:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    ac8c:	31 96       	adiw	r30, 0x01	; 1
    ac8e:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    ac90:	31 96       	adiw	r30, 0x01	; 1
    ac92:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    ac94:	31 96       	adiw	r30, 0x01	; 1
    ac96:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    ac98:	31 96       	adiw	r30, 0x01	; 1
    ac9a:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    ac9c:	31 96       	adiw	r30, 0x01	; 1
    ac9e:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    aca0:	31 96       	adiw	r30, 0x01	; 1
    aca2:	51 83       	std	Z+1, r21	; 0x01
    aca4:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    aca6:	36 96       	adiw	r30, 0x06	; 6
    aca8:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    acaa:	31 96       	adiw	r30, 0x01	; 1
    acac:	93 e0       	ldi	r25, 0x03	; 3
    acae:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    acb0:	31 96       	adiw	r30, 0x01	; 1
    acb2:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    acb4:	31 96       	adiw	r30, 0x01	; 1
    acb6:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    acb8:	31 96       	adiw	r30, 0x01	; 1
    acba:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    acbc:	31 96       	adiw	r30, 0x01	; 1
    acbe:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    acc0:	31 96       	adiw	r30, 0x01	; 1
    acc2:	8a e7       	ldi	r24, 0x7A	; 122
    acc4:	94 e4       	ldi	r25, 0x44	; 68
    acc6:	91 83       	std	Z+1, r25	; 0x01
    acc8:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    acca:	32 96       	adiw	r30, 0x02	; 2
    accc:	84 e7       	ldi	r24, 0x74	; 116
    acce:	94 e4       	ldi	r25, 0x44	; 68
    acd0:	91 83       	std	Z+1, r25	; 0x01
    acd2:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    acd4:	32 96       	adiw	r30, 0x02	; 2
    acd6:	8e e6       	ldi	r24, 0x6E	; 110
    acd8:	94 e4       	ldi	r25, 0x44	; 68
    acda:	91 83       	std	Z+1, r25	; 0x01
    acdc:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    acde:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    ace0:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    ace2:	8e 01       	movw	r16, r28
    ace4:	01 5d       	subi	r16, 0xD1	; 209
    ace6:	1f 4f       	sbci	r17, 0xFF	; 255
    ace8:	60 e0       	ldi	r22, 0x00	; 0
    acea:	c8 01       	movw	r24, r16
    acec:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    acf0:	60 e0       	ldi	r22, 0x00	; 0
    acf2:	c8 01       	movw	r24, r16
    acf4:	0e 94 b9 55 	call	0xab72	; 0xab72 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    acf8:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal_direction = 0;
    acfa:	18 a2       	std	Y+32, r1	; 0x20
    acfc:	1f 8e       	std	Y+31, r1	; 0x1f
	p->goal = 0;
    acfe:	1d a2       	std	Y+37, r1	; 0x25
	p->goal_reached = 0;
    ad00:	1e a2       	std	Y+38, r1	; 0x26
	p->old_x = 0;
    ad02:	1f a2       	std	Y+39, r1	; 0x27
    ad04:	18 a6       	std	Y+40, r1	; 0x28
    ad06:	19 a6       	std	Y+41, r1	; 0x29
    ad08:	1a a6       	std	Y+42, r1	; 0x2a
	p->old_y = 0;
    ad0a:	1b a6       	std	Y+43, r1	; 0x2b
    ad0c:	1c a6       	std	Y+44, r1	; 0x2c
    ad0e:	1d a6       	std	Y+45, r1	; 0x2d
    ad10:	1e a6       	std	Y+46, r1	; 0x2e
	p->deadlock_count_x = 0;
    ad12:	1a a2       	std	Y+34, r1	; 0x22
    ad14:	19 a2       	std	Y+33, r1	; 0x21
	p->deadlock_count_y = 0;
    ad16:	1c a2       	std	Y+36, r1	; 0x24
    ad18:	1b a2       	std	Y+35, r1	; 0x23
}
    ad1a:	df 91       	pop	r29
    ad1c:	cf 91       	pop	r28
    ad1e:	1f 91       	pop	r17
    ad20:	0f 91       	pop	r16
    ad22:	08 95       	ret

0000ad24 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    ad24:	fc 01       	movw	r30, r24
    ad26:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    ad28:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    ad2a:	60 e0       	ldi	r22, 0x00	; 0
    ad2c:	8f 96       	adiw	r24, 0x2f	; 47
    ad2e:	0c 94 9c 55 	jmp	0xab38	; 0xab38 <init_shot_state>

0000ad32 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    ad32:	e7 e0       	ldi	r30, 0x07	; 7
    ad34:	fc e0       	ldi	r31, 0x0C	; 12
    ad36:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    ad38:	15 8a       	std	Z+21, r1	; 0x15
	game.paused = 0;
    ad3a:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    ad3c:	16 86       	std	Z+14, r1	; 0x0e
    ad3e:	15 86       	std	Z+13, r1	; 0x0d
	game.boss_fight_status = 0;
    ad40:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    ad42:	12 8a       	std	Z+18, r1	; 0x12
    ad44:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_joypad = 0;
    ad46:	14 8a       	std	Z+20, r1	; 0x14
    ad48:	13 8a       	std	Z+19, r1	; 0x13
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    ad4a:	82 e0       	ldi	r24, 0x02	; 2
    ad4c:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    ad4e:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    ad50:	84 e1       	ldi	r24, 0x14	; 20
    ad52:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    ad54:	17 82       	std	Z+7, r1	; 0x07
	game.clear_banter_1 = 1;
    ad56:	81 e0       	ldi	r24, 0x01	; 1
    ad58:	80 87       	std	Z+8, r24	; 0x08
	game.clear_banter_2 = 1;
    ad5a:	81 87       	std	Z+9, r24	; 0x09
	game.demo_counter = 0;
    ad5c:	14 86       	std	Z+12, r1	; 0x0c
    ad5e:	13 86       	std	Z+11, r1	; 0x0b
	game.demo_choice = 0;
    ad60:	12 86       	std	Z+10, r1	; 0x0a
	game.tank_rank_counter = 0;
    ad62:	10 8a       	std	Z+16, r1	; 0x10
    ad64:	17 86       	std	Z+15, r1	; 0x0f
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    ad66:	4c e8       	ldi	r20, 0x8C	; 140
    ad68:	54 e4       	ldi	r21, 0x44	; 68
    ad6a:	62 e9       	ldi	r22, 0x92	; 146
    ad6c:	74 e4       	ldi	r23, 0x44	; 68
    ad6e:	8a e3       	ldi	r24, 0x3A	; 58
    ad70:	9c e0       	ldi	r25, 0x0C	; 12
    ad72:	0e 94 1d 56 	call	0xac3a	; 0xac3a <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    ad76:	40 e8       	ldi	r20, 0x80	; 128
    ad78:	54 e4       	ldi	r21, 0x44	; 68
    ad7a:	66 e8       	ldi	r22, 0x86	; 134
    ad7c:	74 e4       	ldi	r23, 0x44	; 68
    ad7e:	8b ea       	ldi	r24, 0xAB	; 171
    ad80:	9f e0       	ldi	r25, 0x0F	; 15
    ad82:	0c 94 1d 56 	jmp	0xac3a	; 0xac3a <init_player>

0000ad86 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    ad86:	cf 93       	push	r28
    ad88:	df 93       	push	r29
    ad8a:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    ad8c:	18 8e       	std	Y+24, r1	; 0x18
	player->shared.x = player->spawn_x;
    ad8e:	6b 89       	ldd	r22, Y+19	; 0x13
    ad90:	70 e0       	ldi	r23, 0x00	; 0
    ad92:	80 e0       	ldi	r24, 0x00	; 0
    ad94:	90 e0       	ldi	r25, 0x00	; 0
    ad96:	0e 94 0f 75 	call	0xea1e	; 0xea1e <__floatunsisf>
    ad9a:	6b 83       	std	Y+3, r22	; 0x03
    ad9c:	7c 83       	std	Y+4, r23	; 0x04
    ad9e:	8d 83       	std	Y+5, r24	; 0x05
    ada0:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    ada2:	6c 89       	ldd	r22, Y+20	; 0x14
    ada4:	70 e0       	ldi	r23, 0x00	; 0
    ada6:	80 e0       	ldi	r24, 0x00	; 0
    ada8:	90 e0       	ldi	r25, 0x00	; 0
    adaa:	0e 94 0f 75 	call	0xea1e	; 0xea1e <__floatunsisf>
    adae:	6f 83       	std	Y+7, r22	; 0x07
    adb0:	78 87       	std	Y+8, r23	; 0x08
    adb2:	89 87       	std	Y+9, r24	; 0x09
    adb4:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    adb6:	18 82       	st	Y, r1
	player->shared.speed = 0;
    adb8:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    adba:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    adbc:	62 e0       	ldi	r22, 0x02	; 2
    adbe:	70 e0       	ldi	r23, 0x00	; 0
    adc0:	80 e0       	ldi	r24, 0x00	; 0
    adc2:	90 e0       	ldi	r25, 0x00	; 0
    adc4:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    adc8:	8d 8f       	std	Y+29, r24	; 0x1d
	player->shot_tactic = LBRandom(0, 2);
    adca:	62 e0       	ldi	r22, 0x02	; 2
    adcc:	70 e0       	ldi	r23, 0x00	; 0
    adce:	80 e0       	ldi	r24, 0x00	; 0
    add0:	90 e0       	ldi	r25, 0x00	; 0
    add2:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    add6:	8e 8f       	std	Y+30, r24	; 0x1e
	
}
    add8:	df 91       	pop	r29
    adda:	cf 91       	pop	r28
    addc:	08 95       	ret

0000adde <waitForVSync>:

void waitForVSync()
{
    WaitVsync(1);
    adde:	81 e0       	ldi	r24, 0x01	; 1
    ade0:	90 e0       	ldi	r25, 0x00	; 0
    ade2:	0c 94 a4 52 	jmp	0xa548	; 0xa548 <WaitVsync>

0000ade6 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    ade6:	cf 93       	push	r28
    ade8:	df 93       	push	r29
    adea:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    adec:	bc 01       	movw	r22, r24
    adee:	88 81       	ld	r24, Y
    adf0:	99 81       	ldd	r25, Y+1	; 0x01
    adf2:	0e 94 a3 45 	call	0x8b46	; 0x8b46 <EepromReadBlock>
	if (status == 0x03)
    adf6:	83 30       	cpi	r24, 0x03	; 3
    adf8:	29 f4       	brne	.+10     	; 0xae04 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    adfa:	ce 01       	movw	r24, r28
	}
}
    adfc:	df 91       	pop	r29
    adfe:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    ae00:	0c 94 59 45 	jmp	0x8ab2	; 0x8ab2 <EepromWriteBlock>
	}
}
    ae04:	df 91       	pop	r29
    ae06:	cf 91       	pop	r28
    ae08:	08 95       	ret

0000ae0a <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    ae0a:	61 e0       	ldi	r22, 0x01	; 1
    ae0c:	83 e0       	ldi	r24, 0x03	; 3
    ae0e:	0e 94 d5 52 	call	0xa5aa	; 0xa5aa <FadeOut>
	ClearVram();
    ae12:	0e 94 da 43 	call	0x87b4	; 0x87b4 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    ae16:	60 e0       	ldi	r22, 0x00	; 0
    ae18:	83 e0       	ldi	r24, 0x03	; 3
    ae1a:	0c 94 c9 52 	jmp	0xa592	; 0xa592 <FadeIn>

0000ae1e <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    ae1e:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    ae20:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    ae22:	40 e0       	ldi	r20, 0x00	; 0
    ae24:	6e e9       	ldi	r22, 0x9E	; 158
    ae26:	74 e4       	ldi	r23, 0x44	; 68
    ae28:	8c 2f       	mov	r24, r28
    ae2a:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
    ae2e:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    ae30:	ca 30       	cpi	r28, 0x0A	; 10
    ae32:	b9 f7       	brne	.-18     	; 0xae22 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    ae34:	cf 91       	pop	r28
    ae36:	08 95       	ret

0000ae38 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    ae38:	cf 92       	push	r12
    ae3a:	df 92       	push	r13
    ae3c:	ff 92       	push	r15
    ae3e:	0f 93       	push	r16
    ae40:	1f 93       	push	r17
    ae42:	cf 93       	push	r28
    ae44:	df 93       	push	r29
    ae46:	cd b7       	in	r28, 0x3d	; 61
    ae48:	de b7       	in	r29, 0x3e	; 62
    ae4a:	2a 97       	sbiw	r28, 0x0a	; 10
    ae4c:	0f b6       	in	r0, 0x3f	; 63
    ae4e:	f8 94       	cli
    ae50:	de bf       	out	0x3e, r29	; 62
    ae52:	0f be       	out	0x3f, r0	; 63
    ae54:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    ae56:	90 91 49 0c 	lds	r25, 0x0C49
    ae5a:	80 91 ba 0f 	lds	r24, 0x0FBA
    ae5e:	98 17       	cp	r25, r24
    ae60:	28 f4       	brcc	.+10     	; 0xae6c <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    ae62:	ea e3       	ldi	r30, 0x3A	; 58
    ae64:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    ae66:	ab ea       	ldi	r26, 0xAB	; 171
    ae68:	bf e0       	ldi	r27, 0x0F	; 15
    ae6a:	04 c0       	rjmp	.+8      	; 0xae74 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    ae6c:	eb ea       	ldi	r30, 0xAB	; 171
    ae6e:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    ae70:	aa e3       	ldi	r26, 0x3A	; 58
    ae72:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    ae74:	1b 96       	adiw	r26, 0x0b	; 11
    ae76:	8c 91       	ld	r24, X
    ae78:	1b 97       	sbiw	r26, 0x0b	; 11
    ae7a:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    ae7c:	83 85       	ldd	r24, Z+11	; 0x0b
    ae7e:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    ae80:	1f 96       	adiw	r26, 0x0f	; 15
    ae82:	8c 91       	ld	r24, X
    ae84:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    ae86:	97 85       	ldd	r25, Z+15	; 0x0f
    ae88:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    ae8a:	21 e0       	ldi	r18, 0x01	; 1
    ae8c:	30 91 0a 0c 	lds	r19, 0x0C0A
    ae90:	38 30       	cpi	r19, 0x08	; 8
    ae92:	09 f0       	breq	.+2      	; 0xae96 <save_score+0x5e>
    ae94:	20 e0       	ldi	r18, 0x00	; 0
    ae96:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    ae98:	f8 2e       	mov	r15, r24
    ae9a:	f9 1a       	sub	r15, r25
    ae9c:	00 e0       	ldi	r16, 0x00	; 0
    ae9e:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    aea0:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    aea2:	81 11       	cpse	r24, r1
    aea4:	08 c0       	rjmp	.+16     	; 0xaeb6 <save_score+0x7e>
    aea6:	f8 01       	movw	r30, r16
    aea8:	e0 54       	subi	r30, 0x40	; 64
    aeaa:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    aeac:	94 81       	ldd	r25, Z+4	; 0x04
    aeae:	25 81       	ldd	r18, Z+5	; 0x05
    aeb0:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    aeb2:	9f 15       	cp	r25, r15
    aeb4:	d0 f4       	brcc	.+52     	; 0xaeea <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    aeb6:	45 e0       	ldi	r20, 0x05	; 5
    aeb8:	c8 01       	movw	r24, r16
    aeba:	8e 53       	subi	r24, 0x3E	; 62
    aebc:	94 4f       	sbci	r25, 0xF4	; 244
    aebe:	6c 01       	movw	r12, r24
    aec0:	bc 01       	movw	r22, r24
    aec2:	ce 01       	movw	r24, r28
    aec4:	06 96       	adiw	r24, 0x06	; 6
    aec6:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    aeca:	45 e0       	ldi	r20, 0x05	; 5
    aecc:	be 01       	movw	r22, r28
    aece:	6f 5f       	subi	r22, 0xFF	; 255
    aed0:	7f 4f       	sbci	r23, 0xFF	; 255
    aed2:	c6 01       	movw	r24, r12
    aed4:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    aed8:	45 e0       	ldi	r20, 0x05	; 5
    aeda:	be 01       	movw	r22, r28
    aedc:	6a 5f       	subi	r22, 0xFA	; 250
    aede:	7f 4f       	sbci	r23, 0xFF	; 255
    aee0:	ce 01       	movw	r24, r28
    aee2:	01 96       	adiw	r24, 0x01	; 1
    aee4:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
				saved = 1;
    aee8:	81 e0       	ldi	r24, 0x01	; 1
    aeea:	0b 5f       	subi	r16, 0xFB	; 251
    aeec:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    aeee:	0e 31       	cpi	r16, 0x1E	; 30
    aef0:	11 05       	cpc	r17, r1
    aef2:	b9 f6       	brne	.-82     	; 0xaea2 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    aef4:	80 ec       	ldi	r24, 0xC0	; 192
    aef6:	9b e0       	ldi	r25, 0x0B	; 11
    aef8:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    aefc:	2a 96       	adiw	r28, 0x0a	; 10
    aefe:	0f b6       	in	r0, 0x3f	; 63
    af00:	f8 94       	cli
    af02:	de bf       	out	0x3e, r29	; 62
    af04:	0f be       	out	0x3f, r0	; 63
    af06:	cd bf       	out	0x3d, r28	; 61
    af08:	df 91       	pop	r29
    af0a:	cf 91       	pop	r28
    af0c:	1f 91       	pop	r17
    af0e:	0f 91       	pop	r16
    af10:	ff 90       	pop	r15
    af12:	df 90       	pop	r13
    af14:	cf 90       	pop	r12
    af16:	08 95       	ret

0000af18 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    af18:	0f 93       	push	r16
    af1a:	1f 93       	push	r17
    af1c:	cf 93       	push	r28
    af1e:	df 93       	push	r29
    af20:	8c 01       	movw	r16, r24
    af22:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    af24:	88 81       	ld	r24, Y
    af26:	81 30       	cpi	r24, 0x01	; 1
    af28:	69 f1       	breq	.+90     	; 0xaf84 <position_shot+0x6c>
    af2a:	98 f0       	brcs	.+38     	; 0xaf52 <position_shot+0x3a>
    af2c:	82 30       	cpi	r24, 0x02	; 2
    af2e:	f1 f1       	breq	.+124    	; 0xafac <position_shot+0x94>
    af30:	83 30       	cpi	r24, 0x03	; 3
    af32:	09 f0       	breq	.+2      	; 0xaf36 <position_shot+0x1e>
    af34:	59 c0       	rjmp	.+178    	; 0xafe8 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    af36:	f8 01       	movw	r30, r16
    af38:	83 81       	ldd	r24, Z+3	; 0x03
    af3a:	94 81       	ldd	r25, Z+4	; 0x04
    af3c:	a5 81       	ldd	r26, Z+5	; 0x05
    af3e:	b6 81       	ldd	r27, Z+6	; 0x06
    af40:	8b 83       	std	Y+3, r24	; 0x03
    af42:	9c 83       	std	Y+4, r25	; 0x04
    af44:	ad 83       	std	Y+5, r26	; 0x05
    af46:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    af48:	20 e0       	ldi	r18, 0x00	; 0
    af4a:	30 e0       	ldi	r19, 0x00	; 0
    af4c:	40 e8       	ldi	r20, 0x80	; 128
    af4e:	50 e4       	ldi	r21, 0x40	; 64
    af50:	41 c0       	rjmp	.+130    	; 0xafd4 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    af52:	20 e0       	ldi	r18, 0x00	; 0
    af54:	30 e0       	ldi	r19, 0x00	; 0
    af56:	40 e8       	ldi	r20, 0x80	; 128
    af58:	50 e4       	ldi	r21, 0x40	; 64
    af5a:	f8 01       	movw	r30, r16
    af5c:	63 81       	ldd	r22, Z+3	; 0x03
    af5e:	74 81       	ldd	r23, Z+4	; 0x04
    af60:	85 81       	ldd	r24, Z+5	; 0x05
    af62:	96 81       	ldd	r25, Z+6	; 0x06
    af64:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    af68:	6b 83       	std	Y+3, r22	; 0x03
    af6a:	7c 83       	std	Y+4, r23	; 0x04
    af6c:	8d 83       	std	Y+5, r24	; 0x05
    af6e:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    af70:	f8 01       	movw	r30, r16
    af72:	87 81       	ldd	r24, Z+7	; 0x07
    af74:	90 85       	ldd	r25, Z+8	; 0x08
    af76:	a1 85       	ldd	r26, Z+9	; 0x09
    af78:	b2 85       	ldd	r27, Z+10	; 0x0a
    af7a:	8f 83       	std	Y+7, r24	; 0x07
    af7c:	98 87       	std	Y+8, r25	; 0x08
    af7e:	a9 87       	std	Y+9, r26	; 0x09
    af80:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    af82:	32 c0       	rjmp	.+100    	; 0xafe8 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    af84:	20 e0       	ldi	r18, 0x00	; 0
    af86:	30 e0       	ldi	r19, 0x00	; 0
    af88:	40 e0       	ldi	r20, 0x00	; 0
    af8a:	51 e4       	ldi	r21, 0x41	; 65
    af8c:	f8 01       	movw	r30, r16
    af8e:	63 81       	ldd	r22, Z+3	; 0x03
    af90:	74 81       	ldd	r23, Z+4	; 0x04
    af92:	85 81       	ldd	r24, Z+5	; 0x05
    af94:	96 81       	ldd	r25, Z+6	; 0x06
    af96:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    af9a:	6b 83       	std	Y+3, r22	; 0x03
    af9c:	7c 83       	std	Y+4, r23	; 0x04
    af9e:	8d 83       	std	Y+5, r24	; 0x05
    afa0:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    afa2:	20 e0       	ldi	r18, 0x00	; 0
    afa4:	30 e0       	ldi	r19, 0x00	; 0
    afa6:	40 e8       	ldi	r20, 0x80	; 128
    afa8:	50 e4       	ldi	r21, 0x40	; 64
    afaa:	13 c0       	rjmp	.+38     	; 0xafd2 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    afac:	20 e0       	ldi	r18, 0x00	; 0
    afae:	30 e0       	ldi	r19, 0x00	; 0
    afb0:	40 e8       	ldi	r20, 0x80	; 128
    afb2:	50 e4       	ldi	r21, 0x40	; 64
    afb4:	f8 01       	movw	r30, r16
    afb6:	63 81       	ldd	r22, Z+3	; 0x03
    afb8:	74 81       	ldd	r23, Z+4	; 0x04
    afba:	85 81       	ldd	r24, Z+5	; 0x05
    afbc:	96 81       	ldd	r25, Z+6	; 0x06
    afbe:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    afc2:	6b 83       	std	Y+3, r22	; 0x03
    afc4:	7c 83       	std	Y+4, r23	; 0x04
    afc6:	8d 83       	std	Y+5, r24	; 0x05
    afc8:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    afca:	20 e0       	ldi	r18, 0x00	; 0
    afcc:	30 e0       	ldi	r19, 0x00	; 0
    afce:	40 e0       	ldi	r20, 0x00	; 0
    afd0:	51 e4       	ldi	r21, 0x41	; 65
    afd2:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    afd4:	67 81       	ldd	r22, Z+7	; 0x07
    afd6:	70 85       	ldd	r23, Z+8	; 0x08
    afd8:	81 85       	ldd	r24, Z+9	; 0x09
    afda:	92 85       	ldd	r25, Z+10	; 0x0a
    afdc:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    afe0:	6f 83       	std	Y+7, r22	; 0x07
    afe2:	78 87       	std	Y+8, r23	; 0x08
    afe4:	89 87       	std	Y+9, r24	; 0x09
    afe6:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    afe8:	df 91       	pop	r29
    afea:	cf 91       	pop	r28
    afec:	1f 91       	pop	r17
    afee:	0f 91       	pop	r16
    aff0:	08 95       	ret

0000aff2 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    aff2:	0f 93       	push	r16
    aff4:	1f 93       	push	r17
    aff6:	cf 93       	push	r28
    aff8:	df 93       	push	r29
    affa:	8c 01       	movw	r16, r24
    affc:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    affe:	ac 01       	movw	r20, r24
    b000:	44 5f       	subi	r20, 0xF4	; 244
    b002:	5f 4f       	sbci	r21, 0xFF	; 255
    b004:	23 e0       	ldi	r18, 0x03	; 3
    b006:	6e e0       	ldi	r22, 0x0E	; 14
    b008:	84 e0       	ldi	r24, 0x04	; 4
    b00a:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    b00e:	4c ee       	ldi	r20, 0xEC	; 236
    b010:	52 e0       	ldi	r21, 0x02	; 2
    b012:	6e e0       	ldi	r22, 0x0E	; 14
    b014:	70 e0       	ldi	r23, 0x00	; 0
    b016:	88 e0       	ldi	r24, 0x08	; 8
    b018:	90 e0       	ldi	r25, 0x00	; 0
    b01a:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    b01e:	ae 01       	movw	r20, r28
    b020:	44 5f       	subi	r20, 0xF4	; 244
    b022:	5f 4f       	sbci	r21, 0xFF	; 255
    b024:	23 e0       	ldi	r18, 0x03	; 3
    b026:	6e e0       	ldi	r22, 0x0E	; 14
    b028:	8d e0       	ldi	r24, 0x0D	; 13
    b02a:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
	Print(17, 14, (char*) strBy);
    b02e:	49 ee       	ldi	r20, 0xE9	; 233
    b030:	52 e0       	ldi	r21, 0x02	; 2
    b032:	6e e0       	ldi	r22, 0x0E	; 14
    b034:	70 e0       	ldi	r23, 0x00	; 0
    b036:	81 e1       	ldi	r24, 0x11	; 17
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	PrintByte(22, 14, winner->level_score ,true);
    b03e:	21 e0       	ldi	r18, 0x01	; 1
    b040:	f8 01       	movw	r30, r16
    b042:	40 89       	ldd	r20, Z+16	; 0x10
    b044:	6e e0       	ldi	r22, 0x0E	; 14
    b046:	70 e0       	ldi	r23, 0x00	; 0
    b048:	86 e1       	ldi	r24, 0x16	; 22
    b04a:	90 e0       	ldi	r25, 0x00	; 0
    b04c:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
	PrintChar(23, 14, '-');
    b050:	4d e2       	ldi	r20, 0x2D	; 45
    b052:	6e e0       	ldi	r22, 0x0E	; 14
    b054:	70 e0       	ldi	r23, 0x00	; 0
    b056:	87 e1       	ldi	r24, 0x17	; 23
    b058:	90 e0       	ldi	r25, 0x00	; 0
    b05a:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    b05e:	21 e0       	ldi	r18, 0x01	; 1
    b060:	48 89       	ldd	r20, Y+16	; 0x10
    b062:	6e e0       	ldi	r22, 0x0E	; 14
    b064:	70 e0       	ldi	r23, 0x00	; 0
    b066:	8a e1       	ldi	r24, 0x1A	; 26
    b068:	90 e0       	ldi	r25, 0x00	; 0
}
    b06a:	df 91       	pop	r29
    b06c:	cf 91       	pop	r28
    b06e:	1f 91       	pop	r17
    b070:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    b072:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <PrintByte>

0000b076 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    b076:	0f 93       	push	r16
    b078:	1f 93       	push	r17
    b07a:	cf 93       	push	r28
    b07c:	df 93       	push	r29
    b07e:	8c 01       	movw	r16, r24
    b080:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    b082:	4d ed       	ldi	r20, 0xDD	; 221
    b084:	52 e0       	ldi	r21, 0x02	; 2
    b086:	6c e0       	ldi	r22, 0x0C	; 12
    b088:	70 e0       	ldi	r23, 0x00	; 0
    b08a:	89 e0       	ldi	r24, 0x09	; 9
    b08c:	90 e0       	ldi	r25, 0x00	; 0
    b08e:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    b092:	a8 01       	movw	r20, r16
    b094:	44 5f       	subi	r20, 0xF4	; 244
    b096:	5f 4f       	sbci	r21, 0xFF	; 255
    b098:	23 e0       	ldi	r18, 0x03	; 3
    b09a:	6e e0       	ldi	r22, 0x0E	; 14
    b09c:	84 e0       	ldi	r24, 0x04	; 4
    b09e:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    b0a2:	4c ee       	ldi	r20, 0xEC	; 236
    b0a4:	52 e0       	ldi	r21, 0x02	; 2
    b0a6:	6e e0       	ldi	r22, 0x0E	; 14
    b0a8:	70 e0       	ldi	r23, 0x00	; 0
    b0aa:	88 e0       	ldi	r24, 0x08	; 8
    b0ac:	90 e0       	ldi	r25, 0x00	; 0
    b0ae:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    b0b2:	ae 01       	movw	r20, r28
    b0b4:	44 5f       	subi	r20, 0xF4	; 244
    b0b6:	5f 4f       	sbci	r21, 0xFF	; 255
    b0b8:	23 e0       	ldi	r18, 0x03	; 3
    b0ba:	6e e0       	ldi	r22, 0x0E	; 14
    b0bc:	8d e0       	ldi	r24, 0x0D	; 13
    b0be:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
    Print(17, 14, (char*) strBy);
    b0c2:	49 ee       	ldi	r20, 0xE9	; 233
    b0c4:	52 e0       	ldi	r21, 0x02	; 2
    b0c6:	6e e0       	ldi	r22, 0x0E	; 14
    b0c8:	70 e0       	ldi	r23, 0x00	; 0
    b0ca:	81 e1       	ldi	r24, 0x11	; 17
    b0cc:	90 e0       	ldi	r25, 0x00	; 0
    b0ce:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    PrintByte(22, 14, winner->score ,true);
    b0d2:	21 e0       	ldi	r18, 0x01	; 1
    b0d4:	f8 01       	movw	r30, r16
    b0d6:	47 85       	ldd	r20, Z+15	; 0x0f
    b0d8:	6e e0       	ldi	r22, 0x0E	; 14
    b0da:	70 e0       	ldi	r23, 0x00	; 0
    b0dc:	86 e1       	ldi	r24, 0x16	; 22
    b0de:	90 e0       	ldi	r25, 0x00	; 0
    b0e0:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
    PrintChar(23, 14, '-');
    b0e4:	4d e2       	ldi	r20, 0x2D	; 45
    b0e6:	6e e0       	ldi	r22, 0x0E	; 14
    b0e8:	70 e0       	ldi	r23, 0x00	; 0
    b0ea:	87 e1       	ldi	r24, 0x17	; 23
    b0ec:	90 e0       	ldi	r25, 0x00	; 0
    b0ee:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    b0f2:	21 e0       	ldi	r18, 0x01	; 1
    b0f4:	4f 85       	ldd	r20, Y+15	; 0x0f
    b0f6:	6e e0       	ldi	r22, 0x0E	; 14
    b0f8:	70 e0       	ldi	r23, 0x00	; 0
    b0fa:	8a e1       	ldi	r24, 0x1A	; 26
    b0fc:	90 e0       	ldi	r25, 0x00	; 0
    b0fe:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    b102:	80 91 0a 0c 	lds	r24, 0x0C0A
    b106:	88 30       	cpi	r24, 0x08	; 8
    b108:	59 f4       	brne	.+22     	; 0xb120 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    b10a:	4a e2       	ldi	r20, 0x2A	; 42
    b10c:	6e e0       	ldi	r22, 0x0E	; 14
    b10e:	70 e0       	ldi	r23, 0x00	; 0
    b110:	8c e1       	ldi	r24, 0x1C	; 28
    b112:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    b114:	df 91       	pop	r29
    b116:	cf 91       	pop	r28
    b118:	1f 91       	pop	r17
    b11a:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    b11c:	0c 94 a1 52 	jmp	0xa542	; 0xa542 <PrintChar>
	}
}
    b120:	df 91       	pop	r29
    b122:	cf 91       	pop	r28
    b124:	1f 91       	pop	r17
    b126:	0f 91       	pop	r16
    b128:	08 95       	ret

0000b12a <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    b12a:	fc 01       	movw	r30, r24
    b12c:	20 81       	ld	r18, Z
    b12e:	31 81       	ldd	r19, Z+1	; 0x01
    b130:	21 70       	andi	r18, 0x01	; 1
    b132:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    b134:	81 e0       	ldi	r24, 0x01	; 1
    b136:	23 2b       	or	r18, r19
    b138:	09 f4       	brne	.+2      	; 0xb13c <shoot_pressed+0x12>
    b13a:	80 e0       	ldi	r24, 0x00	; 0
}
    b13c:	08 95       	ret

0000b13e <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b13e:	fc 01       	movw	r30, r24
    b140:	85 a1       	ldd	r24, Z+37	; 0x25
    b142:	fb 01       	movw	r30, r22
    b144:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    b146:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    b148:	81 11       	cpse	r24, r1
    b14a:	09 c0       	rjmp	.+18     	; 0xb15e <get_delta+0x20>
		return FRAME_TIME * s->speed;
    b14c:	80 e0       	ldi	r24, 0x00	; 0
    b14e:	90 e0       	ldi	r25, 0x00	; 0
    b150:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    b154:	25 e6       	ldi	r18, 0x65	; 101
    b156:	38 e8       	ldi	r19, 0x88	; 136
    b158:	48 e8       	ldi	r20, 0x88	; 136
    b15a:	5c e3       	ldi	r21, 0x3C	; 60
    b15c:	0e c0       	rjmp	.+28     	; 0xb17a <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    b15e:	80 e0       	ldi	r24, 0x00	; 0
    b160:	90 e0       	ldi	r25, 0x00	; 0
    b162:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    b166:	25 e6       	ldi	r18, 0x65	; 101
    b168:	38 e8       	ldi	r19, 0x88	; 136
    b16a:	48 e8       	ldi	r20, 0x88	; 136
    b16c:	5c e3       	ldi	r21, 0x3C	; 60
    b16e:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    b172:	23 e3       	ldi	r18, 0x33	; 51
    b174:	33 e3       	ldi	r19, 0x33	; 51
    b176:	43 eb       	ldi	r20, 0xB3	; 179
    b178:	5f e3       	ldi	r21, 0x3F	; 63
    b17a:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
}
    b17e:	08 95       	ret

0000b180 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    b180:	cf 93       	push	r28
    b182:	df 93       	push	r29
    b184:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    b186:	ac 01       	movw	r20, r24
    b188:	44 5f       	subi	r20, 0xF4	; 244
    b18a:	5f 4f       	sbci	r21, 0xFF	; 255
    b18c:	23 e0       	ldi	r18, 0x03	; 3
    b18e:	60 e0       	ldi	r22, 0x00	; 0
    b190:	8a e0       	ldi	r24, 0x0A	; 10
    b192:	8c 0f       	add	r24, r28
    b194:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
	Print(x, 0, (char*) strScore);
    b198:	d0 e0       	ldi	r29, 0x00	; 0
    b19a:	41 e3       	ldi	r20, 0x31	; 49
    b19c:	52 e0       	ldi	r21, 0x02	; 2
    b19e:	60 e0       	ldi	r22, 0x00	; 0
    b1a0:	70 e0       	ldi	r23, 0x00	; 0
    b1a2:	ce 01       	movw	r24, r28
    b1a4:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(x, 1, (char*) strTotal);
    b1a8:	4a e2       	ldi	r20, 0x2A	; 42
    b1aa:	52 e0       	ldi	r21, 0x02	; 2
    b1ac:	61 e0       	ldi	r22, 0x01	; 1
    b1ae:	70 e0       	ldi	r23, 0x00	; 0
    b1b0:	ce 01       	movw	r24, r28
	
}
    b1b2:	df 91       	pop	r29
    b1b4:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    b1b6:	0c 94 86 52 	jmp	0xa50c	; 0xa50c <Print>

0000b1ba <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    b1ba:	0f 93       	push	r16
    b1bc:	1f 93       	push	r17
    b1be:	cf 93       	push	r28
    b1c0:	df 93       	push	r29
    b1c2:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    b1c4:	c6 2f       	mov	r28, r22
    b1c6:	d0 e0       	ldi	r29, 0x00	; 0
    b1c8:	28 96       	adiw	r28, 0x08	; 8
    b1ca:	20 e0       	ldi	r18, 0x00	; 0
    b1cc:	fc 01       	movw	r30, r24
    b1ce:	40 89       	ldd	r20, Z+16	; 0x10
    b1d0:	60 e0       	ldi	r22, 0x00	; 0
    b1d2:	70 e0       	ldi	r23, 0x00	; 0
    b1d4:	ce 01       	movw	r24, r28
    b1d6:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    b1da:	20 e0       	ldi	r18, 0x00	; 0
    b1dc:	f8 01       	movw	r30, r16
    b1de:	47 85       	ldd	r20, Z+15	; 0x0f
    b1e0:	61 e0       	ldi	r22, 0x01	; 1
    b1e2:	70 e0       	ldi	r23, 0x00	; 0
    b1e4:	ce 01       	movw	r24, r28
}
    b1e6:	df 91       	pop	r29
    b1e8:	cf 91       	pop	r28
    b1ea:	1f 91       	pop	r17
    b1ec:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    b1ee:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <PrintByte>

0000b1f2 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    b1f2:	cf 93       	push	r28
    b1f4:	df 93       	push	r29
    b1f6:	ec 01       	movw	r28, r24
    b1f8:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b1fa:	9e 89       	ldd	r25, Y+22	; 0x16
    b1fc:	9a 35       	cpi	r25, 0x5A	; 90
    b1fe:	99 f0       	breq	.+38     	; 0xb226 <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b200:	91 11       	cpse	r25, r1
    b202:	0c c0       	rjmp	.+24     	; 0xb21c <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b204:	4f 89       	ldd	r20, Y+23	; 0x17
    b206:	9f e0       	ldi	r25, 0x0F	; 15
    b208:	49 9f       	mul	r20, r25
    b20a:	a0 01       	movw	r20, r0
    b20c:	11 24       	eor	r1, r1
    b20e:	49 5b       	subi	r20, 0xB9	; 185
    b210:	5d 4f       	sbci	r21, 0xFD	; 253
    b212:	62 e0       	ldi	r22, 0x02	; 2
    b214:	70 e0       	ldi	r23, 0x00	; 0
    b216:	90 e0       	ldi	r25, 0x00	; 0
    b218:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b21c:	8e 89       	ldd	r24, Y+22	; 0x16
    b21e:	8f 5f       	subi	r24, 0xFF	; 255
    b220:	8e 8b       	std	Y+22, r24	; 0x16
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b222:	41 e0       	ldi	r20, 0x01	; 1
    b224:	0a c0       	rjmp	.+20     	; 0xb23a <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b226:	44 23       	and	r20, r20
    b228:	41 f0       	breq	.+16     	; 0xb23a <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b22a:	48 e3       	ldi	r20, 0x38	; 56
    b22c:	52 e0       	ldi	r21, 0x02	; 2
    b22e:	62 e0       	ldi	r22, 0x02	; 2
    b230:	70 e0       	ldi	r23, 0x00	; 0
    b232:	90 e0       	ldi	r25, 0x00	; 0
    b234:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    b238:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b23a:	84 2f       	mov	r24, r20
    b23c:	df 91       	pop	r29
    b23e:	cf 91       	pop	r28
    b240:	08 95       	ret

0000b242 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b242:	ef 92       	push	r14
    b244:	ff 92       	push	r15
    b246:	0f 93       	push	r16
    b248:	1f 93       	push	r17
    b24a:	cf 93       	push	r28
    b24c:	df 93       	push	r29
    b24e:	1f 92       	push	r1
    b250:	cd b7       	in	r28, 0x3d	; 61
    b252:	de b7       	in	r29, 0x3e	; 62
    b254:	7c 01       	movw	r14, r24
    b256:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    b258:	fc 01       	movw	r30, r24
    b25a:	67 81       	ldd	r22, Z+7	; 0x07
    b25c:	70 85       	ldd	r23, Z+8	; 0x08
    b25e:	81 85       	ldd	r24, Z+9	; 0x09
    b260:	92 85       	ldd	r25, Z+10	; 0x0a
    b262:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b266:	46 2f       	mov	r20, r22
    b268:	f7 01       	movw	r30, r14
    b26a:	63 81       	ldd	r22, Z+3	; 0x03
    b26c:	74 81       	ldd	r23, Z+4	; 0x04
    b26e:	85 81       	ldd	r24, Z+5	; 0x05
    b270:	96 81       	ldd	r25, Z+6	; 0x06
    b272:	49 83       	std	Y+1, r20	; 0x01
    b274:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b278:	02 e0       	ldi	r16, 0x02	; 2
    b27a:	22 e0       	ldi	r18, 0x02	; 2
    b27c:	49 81       	ldd	r20, Y+1	; 0x01
    b27e:	81 2f       	mov	r24, r17
    b280:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
}
    b284:	0f 90       	pop	r0
    b286:	df 91       	pop	r29
    b288:	cf 91       	pop	r28
    b28a:	1f 91       	pop	r17
    b28c:	0f 91       	pop	r16
    b28e:	ff 90       	pop	r15
    b290:	ef 90       	pop	r14
    b292:	08 95       	ret

0000b294 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b294:	ef 92       	push	r14
    b296:	ff 92       	push	r15
    b298:	0f 93       	push	r16
    b29a:	1f 93       	push	r17
    b29c:	cf 93       	push	r28
    b29e:	df 93       	push	r29
    b2a0:	1f 92       	push	r1
    b2a2:	cd b7       	in	r28, 0x3d	; 61
    b2a4:	de b7       	in	r29, 0x3e	; 62
    b2a6:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b2a8:	81 89       	ldd	r24, Z+17	; 0x11
    b2aa:	88 23       	and	r24, r24
    b2ac:	b9 f0       	breq	.+46     	; 0xb2dc <render_shot+0x48>
    b2ae:	16 2f       	mov	r17, r22
    b2b0:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    b2b2:	66 a9       	ldd	r22, Z+54	; 0x36
    b2b4:	77 a9       	ldd	r23, Z+55	; 0x37
    b2b6:	80 ad       	ldd	r24, Z+56	; 0x38
    b2b8:	91 ad       	ldd	r25, Z+57	; 0x39
    b2ba:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b2be:	46 2f       	mov	r20, r22
    b2c0:	f7 01       	movw	r30, r14
    b2c2:	62 a9       	ldd	r22, Z+50	; 0x32
    b2c4:	73 a9       	ldd	r23, Z+51	; 0x33
    b2c6:	84 a9       	ldd	r24, Z+52	; 0x34
    b2c8:	95 a9       	ldd	r25, Z+53	; 0x35
    b2ca:	49 83       	std	Y+1, r20	; 0x01
    b2cc:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b2d0:	01 e0       	ldi	r16, 0x01	; 1
    b2d2:	21 e0       	ldi	r18, 0x01	; 1
    b2d4:	49 81       	ldd	r20, Y+1	; 0x01
    b2d6:	81 2f       	mov	r24, r17
    b2d8:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
			sprite_index++;
		}
	}
}
    b2dc:	0f 90       	pop	r0
    b2de:	df 91       	pop	r29
    b2e0:	cf 91       	pop	r28
    b2e2:	1f 91       	pop	r17
    b2e4:	0f 91       	pop	r16
    b2e6:	ff 90       	pop	r15
    b2e8:	ef 90       	pop	r14
    b2ea:	08 95       	ret

0000b2ec <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b2ec:	ef 92       	push	r14
    b2ee:	ff 92       	push	r15
    b2f0:	0f 93       	push	r16
    b2f2:	1f 93       	push	r17
    b2f4:	cf 93       	push	r28
    b2f6:	df 93       	push	r29
    b2f8:	ec 01       	movw	r28, r24
    b2fa:	25 96       	adiw	r28, 0x05	; 5
    b2fc:	8c 01       	movw	r16, r24
    b2fe:	0f 5d       	subi	r16, 0xDF	; 223
    b300:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b302:	8e e1       	ldi	r24, 0x1E	; 30
    b304:	e8 2e       	mov	r14, r24
    b306:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b308:	88 85       	ldd	r24, Y+8	; 0x08
    b30a:	99 85       	ldd	r25, Y+9	; 0x09
    b30c:	89 2b       	or	r24, r25
    b30e:	c1 f0       	breq	.+48     	; 0xb340 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b310:	ce 01       	movw	r24, r28
    b312:	04 97       	sbiw	r24, 0x04	; 4
    b314:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b318:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b31a:	48 81       	ld	r20, Y
    b31c:	88 85       	ldd	r24, Y+8	; 0x08
    b31e:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b320:	b7 01       	movw	r22, r14
    b322:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    b326:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b328:	44 23       	and	r20, r20
    b32a:	39 f0       	breq	.+14     	; 0xb33a <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b32c:	40 e0       	ldi	r20, 0x00	; 0
    b32e:	50 e0       	ldi	r21, 0x00	; 0
    b330:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
				ta->anims[i].tile_index = 0;
    b334:	19 86       	std	Y+9, r1	; 0x09
    b336:	18 86       	std	Y+8, r1	; 0x08
    b338:	03 c0       	rjmp	.+6      	; 0xb340 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b33a:	a9 01       	movw	r20, r18
    b33c:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
    b340:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b342:	c0 17       	cp	r28, r16
    b344:	d1 07       	cpc	r29, r17
    b346:	01 f7       	brne	.-64     	; 0xb308 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b348:	df 91       	pop	r29
    b34a:	cf 91       	pop	r28
    b34c:	1f 91       	pop	r17
    b34e:	0f 91       	pop	r16
    b350:	ff 90       	pop	r15
    b352:	ef 90       	pop	r14
    b354:	08 95       	ret

0000b356 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b356:	cf 93       	push	r28
    b358:	df 93       	push	r29
    b35a:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b35c:	0e 94 2f 53 	call	0xa65e	; 0xa65e <LBGetNextFrameReverse>
    b360:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b362:	4c 81       	ldd	r20, Y+4	; 0x04
    b364:	8c 85       	ldd	r24, Y+12	; 0x0c
    b366:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b368:	6e e1       	ldi	r22, 0x1E	; 30
    b36a:	70 e0       	ldi	r23, 0x00	; 0
    b36c:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    b370:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b372:	44 23       	and	r20, r20
    b374:	19 f0       	breq	.+6      	; 0xb37c <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b376:	48 ee       	ldi	r20, 0xE8	; 232
    b378:	5d e7       	ldi	r21, 0x7D	; 125
    b37a:	01 c0       	rjmp	.+2      	; 0xb37e <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b37c:	a9 01       	movw	r20, r18
    b37e:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	}
	return ta->anim.looped;
}
    b382:	8c 81       	ldd	r24, Y+4	; 0x04
    b384:	df 91       	pop	r29
    b386:	cf 91       	pop	r28
    b388:	08 95       	ret

0000b38a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b38a:	1f 93       	push	r17
    b38c:	cf 93       	push	r28
    b38e:	df 93       	push	r29
    b390:	ec 01       	movw	r28, r24
    b392:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    b394:	8d 89       	ldd	r24, Y+21	; 0x15
    b396:	80 ff       	sbrs	r24, 0
    b398:	17 c0       	rjmp	.+46     	; 0xb3c8 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b39a:	ce 01       	movw	r24, r28
    b39c:	81 59       	subi	r24, 0x91	; 145
    b39e:	9f 4f       	sbci	r25, 0xFF	; 255
    b3a0:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b3a4:	fe 01       	movw	r30, r28
    b3a6:	ed 58       	subi	r30, 0x8D	; 141
    b3a8:	ff 4f       	sbci	r31, 0xFF	; 255
    b3aa:	20 81       	ld	r18, Z
    b3ac:	22 23       	and	r18, r18
    b3ae:	09 f4       	brne	.+2      	; 0xb3b2 <tank_map+0x28>
    b3b0:	4a c0       	rjmp	.+148    	; 0xb446 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b3b2:	8d 89       	ldd	r24, Y+21	; 0x15
    b3b4:	91 e0       	ldi	r25, 0x01	; 1
    b3b6:	98 27       	eor	r25, r24
    b3b8:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b3ba:	ce 01       	movw	r24, r28
    b3bc:	0e 94 c3 56 	call	0xad86	; 0xad86 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b3c0:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b3c2:	88 e9       	ldi	r24, 0x98	; 152
    b3c4:	94 e4       	ldi	r25, 0x44	; 68
    b3c6:	40 c0       	rjmp	.+128    	; 0xb448 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b3c8:	98 8d       	ldd	r25, Y+24	; 0x18
    b3ca:	98 37       	cpi	r25, 0x78	; 120
    b3cc:	11 f0       	breq	.+4      	; 0xb3d2 <tank_map+0x48>
		{
			player->grace_frame++;
    b3ce:	9f 5f       	subi	r25, 0xFF	; 255
    b3d0:	98 8f       	std	Y+24, r25	; 0x18
		}
		switch (player->shared.direction)
    b3d2:	98 81       	ld	r25, Y
    b3d4:	91 30       	cpi	r25, 0x01	; 1
    b3d6:	61 f0       	breq	.+24     	; 0xb3f0 <tank_map+0x66>
    b3d8:	b0 f0       	brcs	.+44     	; 0xb406 <tank_map+0x7c>
    b3da:	92 30       	cpi	r25, 0x02	; 2
    b3dc:	69 f0       	breq	.+26     	; 0xb3f8 <tank_map+0x6e>
    b3de:	93 30       	cpi	r25, 0x03	; 3
    b3e0:	91 f4       	brne	.+36     	; 0xb406 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b3e2:	ce 01       	movw	r24, r28
    b3e4:	8d 59       	subi	r24, 0x9D	; 157
    b3e6:	9f 4f       	sbci	r25, 0xFF	; 255
    b3e8:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b3ec:	41 e0       	ldi	r20, 0x01	; 1
    b3ee:	11 c0       	rjmp	.+34     	; 0xb412 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b3f0:	ce 01       	movw	r24, r28
    b3f2:	8d 59       	subi	r24, 0x9D	; 157
    b3f4:	9f 4f       	sbci	r25, 0xFF	; 255
    b3f6:	0a c0       	rjmp	.+20     	; 0xb40c <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b3f8:	ce 01       	movw	r24, r28
    b3fa:	89 5a       	subi	r24, 0xA9	; 169
    b3fc:	9f 4f       	sbci	r25, 0xFF	; 255
    b3fe:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b402:	42 e0       	ldi	r20, 0x02	; 2
    b404:	06 c0       	rjmp	.+12     	; 0xb412 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b406:	ce 01       	movw	r24, r28
    b408:	89 5a       	subi	r24, 0xA9	; 169
    b40a:	9f 4f       	sbci	r25, 0xFF	; 255
    b40c:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b410:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    b412:	28 8d       	ldd	r18, Y+24	; 0x18
    b414:	28 37       	cpi	r18, 0x78	; 120
    b416:	31 f0       	breq	.+12     	; 0xb424 <tank_map+0x9a>
    b418:	20 91 0e 0c 	lds	r18, 0x0C0E
    b41c:	22 23       	and	r18, r18
    b41e:	11 f0       	breq	.+4      	; 0xb424 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b420:	88 e9       	ldi	r24, 0x98	; 152
    b422:	94 e4       	ldi	r25, 0x44	; 68
		}
		game.toggle_counter--;
    b424:	20 91 0d 0c 	lds	r18, 0x0C0D
    b428:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    b42a:	19 f0       	breq	.+6      	; 0xb432 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    b42c:	20 93 0d 0c 	sts	0x0C0D, r18
    b430:	0b c0       	rjmp	.+22     	; 0xb448 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    b432:	24 e1       	ldi	r18, 0x14	; 20
    b434:	20 93 0d 0c 	sts	0x0C0D, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    b438:	30 91 0e 0c 	lds	r19, 0x0C0E
    b43c:	21 e0       	ldi	r18, 0x01	; 1
    b43e:	23 27       	eor	r18, r19
    b440:	20 93 0e 0c 	sts	0x0C0E, r18
    b444:	01 c0       	rjmp	.+2      	; 0xb448 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b446:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b448:	bc 01       	movw	r22, r24
    b44a:	81 2f       	mov	r24, r17
    b44c:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b450:	84 e0       	ldi	r24, 0x04	; 4
    b452:	81 0f       	add	r24, r17
    b454:	df 91       	pop	r29
    b456:	cf 91       	pop	r28
    b458:	1f 91       	pop	r17
    b45a:	08 95       	ret

0000b45c <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b45c:	cf 93       	push	r28
    b45e:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    b460:	fc 01       	movw	r30, r24
    b462:	25 ad       	ldd	r18, Z+61	; 0x3d
    b464:	22 23       	and	r18, r18
    b466:	d9 f0       	breq	.+54     	; 0xb49e <shot_map+0x42>
		{
			switch (shot->shared.direction)
    b468:	27 a5       	ldd	r18, Z+47	; 0x2f
    b46a:	21 30       	cpi	r18, 0x01	; 1
    b46c:	59 f0       	breq	.+22     	; 0xb484 <shot_map+0x28>
    b46e:	a8 f0       	brcs	.+42     	; 0xb49a <shot_map+0x3e>
    b470:	22 30       	cpi	r18, 0x02	; 2
    b472:	71 f0       	breq	.+28     	; 0xb490 <shot_map+0x34>
    b474:	23 30       	cpi	r18, 0x03	; 3
    b476:	89 f4       	brne	.+34     	; 0xb49a <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    b478:	85 5b       	subi	r24, 0xB5	; 181
    b47a:	9f 4f       	sbci	r25, 0xFF	; 255
    b47c:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b480:	41 e0       	ldi	r20, 0x01	; 1
    b482:	10 c0       	rjmp	.+32     	; 0xb4a4 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    b484:	85 5b       	subi	r24, 0xB5	; 181
    b486:	9f 4f       	sbci	r25, 0xFF	; 255
    b488:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b48c:	40 e0       	ldi	r20, 0x00	; 0
    b48e:	0a c0       	rjmp	.+20     	; 0xb4a4 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    b490:	cf 96       	adiw	r24, 0x3f	; 63
    b492:	0e 94 0a 53 	call	0xa614	; 0xa614 <LBGetNextFrame>
    b496:	42 e0       	ldi	r20, 0x02	; 2
    b498:	05 c0       	rjmp	.+10     	; 0xb4a4 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    b49a:	cf 96       	adiw	r24, 0x3f	; 63
    b49c:	f5 cf       	rjmp	.-22     	; 0xb488 <shot_map+0x2c>
    b49e:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    b4a0:	88 e9       	ldi	r24, 0x98	; 152
    b4a2:	94 e4       	ldi	r25, 0x44	; 68
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    b4a4:	bc 01       	movw	r22, r24
    b4a6:	8c 2f       	mov	r24, r28
    b4a8:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    b4ac:	81 e0       	ldi	r24, 0x01	; 1
    b4ae:	8c 0f       	add	r24, r28
    b4b0:	cf 91       	pop	r28
    b4b2:	08 95       	ret

0000b4b4 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    b4b4:	cf 93       	push	r28
    b4b6:	df 93       	push	r29
    b4b8:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    b4ba:	88 81       	ld	r24, Y
    b4bc:	81 11       	cpse	r24, r1
    b4be:	0b c0       	rjmp	.+22     	; 0xb4d6 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    b4c0:	6f 81       	ldd	r22, Y+7	; 0x07
    b4c2:	78 85       	ldd	r23, Y+8	; 0x08
    b4c4:	89 85       	ldd	r24, Y+9	; 0x09
    b4c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4c8:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b4cc:	66 95       	lsr	r22
    b4ce:	66 95       	lsr	r22
    b4d0:	66 95       	lsr	r22
    b4d2:	6f 5f       	subi	r22, 0xFF	; 255
    b4d4:	1d c0       	rjmp	.+58     	; 0xb510 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    b4d6:	81 30       	cpi	r24, 0x01	; 1
    b4d8:	69 f4       	brne	.+26     	; 0xb4f4 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    b4da:	20 e0       	ldi	r18, 0x00	; 0
    b4dc:	30 e0       	ldi	r19, 0x00	; 0
    b4de:	40 e0       	ldi	r20, 0x00	; 0
    b4e0:	5e e3       	ldi	r21, 0x3E	; 62
    b4e2:	6b 81       	ldd	r22, Y+3	; 0x03
    b4e4:	7c 81       	ldd	r23, Y+4	; 0x04
    b4e6:	8d 81       	ldd	r24, Y+5	; 0x05
    b4e8:	9e 81       	ldd	r25, Y+6	; 0x06
    b4ea:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    b4ee:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b4f2:	27 c0       	rjmp	.+78     	; 0xb542 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    b4f4:	82 30       	cpi	r24, 0x02	; 2
    b4f6:	d9 f4       	brne	.+54     	; 0xb52e <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    b4f8:	20 e0       	ldi	r18, 0x00	; 0
    b4fa:	30 e0       	ldi	r19, 0x00	; 0
    b4fc:	40 e0       	ldi	r20, 0x00	; 0
    b4fe:	5e e3       	ldi	r21, 0x3E	; 62
    b500:	6f 81       	ldd	r22, Y+7	; 0x07
    b502:	78 85       	ldd	r23, Y+8	; 0x08
    b504:	89 85       	ldd	r24, Y+9	; 0x09
    b506:	9a 85       	ldd	r25, Y+10	; 0x0a
    b508:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    b50c:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
		sprite->y = tile * 8;
    b510:	88 e0       	ldi	r24, 0x08	; 8
    b512:	68 9f       	mul	r22, r24
    b514:	b0 01       	movw	r22, r0
    b516:	11 24       	eor	r1, r1
    b518:	88 27       	eor	r24, r24
    b51a:	77 fd       	sbrc	r23, 7
    b51c:	80 95       	com	r24
    b51e:	98 2f       	mov	r25, r24
    b520:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    b524:	6f 83       	std	Y+7, r22	; 0x07
    b526:	78 87       	std	Y+8, r23	; 0x08
    b528:	89 87       	std	Y+9, r24	; 0x09
    b52a:	9a 87       	std	Y+10, r25	; 0x0a
    b52c:	18 c0       	rjmp	.+48     	; 0xb55e <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    b52e:	6b 81       	ldd	r22, Y+3	; 0x03
    b530:	7c 81       	ldd	r23, Y+4	; 0x04
    b532:	8d 81       	ldd	r24, Y+5	; 0x05
    b534:	9e 81       	ldd	r25, Y+6	; 0x06
    b536:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b53a:	66 95       	lsr	r22
    b53c:	66 95       	lsr	r22
    b53e:	66 95       	lsr	r22
    b540:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    b542:	88 e0       	ldi	r24, 0x08	; 8
    b544:	68 9f       	mul	r22, r24
    b546:	b0 01       	movw	r22, r0
    b548:	11 24       	eor	r1, r1
    b54a:	88 27       	eor	r24, r24
    b54c:	77 fd       	sbrc	r23, 7
    b54e:	80 95       	com	r24
    b550:	98 2f       	mov	r25, r24
    b552:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    b556:	6b 83       	std	Y+3, r22	; 0x03
    b558:	7c 83       	std	Y+4, r23	; 0x04
    b55a:	8d 83       	std	Y+5, r24	; 0x05
    b55c:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b55e:	81 e0       	ldi	r24, 0x01	; 1
    b560:	8a 83       	std	Y+2, r24	; 0x02
}
    b562:	df 91       	pop	r29
    b564:	cf 91       	pop	r28
    b566:	08 95       	ret

0000b568 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    b568:	cf 93       	push	r28
    b56a:	df 93       	push	r29
    b56c:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    b56e:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    b572:	9b 01       	movw	r18, r22
    b574:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    b576:	88 81       	ld	r24, Y
    b578:	81 11       	cpse	r24, r1
    b57a:	07 c0       	rjmp	.+14     	; 0xb58a <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    b57c:	6f 81       	ldd	r22, Y+7	; 0x07
    b57e:	78 85       	ldd	r23, Y+8	; 0x08
    b580:	89 85       	ldd	r24, Y+9	; 0x09
    b582:	9a 85       	ldd	r25, Y+10	; 0x0a
    b584:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b588:	11 c0       	rjmp	.+34     	; 0xb5ac <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    b58a:	81 30       	cpi	r24, 0x01	; 1
    b58c:	39 f4       	brne	.+14     	; 0xb59c <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    b58e:	6b 81       	ldd	r22, Y+3	; 0x03
    b590:	7c 81       	ldd	r23, Y+4	; 0x04
    b592:	8d 81       	ldd	r24, Y+5	; 0x05
    b594:	9e 81       	ldd	r25, Y+6	; 0x06
    b596:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    b59a:	13 c0       	rjmp	.+38     	; 0xb5c2 <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    b59c:	82 30       	cpi	r24, 0x02	; 2
    b59e:	59 f4       	brne	.+22     	; 0xb5b6 <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    b5a0:	6f 81       	ldd	r22, Y+7	; 0x07
    b5a2:	78 85       	ldd	r23, Y+8	; 0x08
    b5a4:	89 85       	ldd	r24, Y+9	; 0x09
    b5a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    b5a8:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    b5ac:	6f 83       	std	Y+7, r22	; 0x07
    b5ae:	78 87       	std	Y+8, r23	; 0x08
    b5b0:	89 87       	std	Y+9, r24	; 0x09
    b5b2:	9a 87       	std	Y+10, r25	; 0x0a
    b5b4:	0a c0       	rjmp	.+20     	; 0xb5ca <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    b5b6:	6b 81       	ldd	r22, Y+3	; 0x03
    b5b8:	7c 81       	ldd	r23, Y+4	; 0x04
    b5ba:	8d 81       	ldd	r24, Y+5	; 0x05
    b5bc:	9e 81       	ldd	r25, Y+6	; 0x06
    b5be:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b5c2:	6b 83       	std	Y+3, r22	; 0x03
    b5c4:	7c 83       	std	Y+4, r23	; 0x04
    b5c6:	8d 83       	std	Y+5, r24	; 0x05
    b5c8:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b5ca:	81 e0       	ldi	r24, 0x01	; 1
    b5cc:	8a 83       	std	Y+2, r24	; 0x02
}
    b5ce:	df 91       	pop	r29
    b5d0:	cf 91       	pop	r28
    b5d2:	08 95       	ret

0000b5d4 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b5d4:	84 54       	subi	r24, 0x44	; 68
    b5d6:	93 4f       	sbci	r25, 0xF3	; 243
    b5d8:	fc 01       	movw	r30, r24
    b5da:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b5dc:	81 30       	cpi	r24, 0x01	; 1
    b5de:	31 f0       	breq	.+12     	; 0xb5ec <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b5e0:	82 30       	cpi	r24, 0x02	; 2
    b5e2:	31 f0       	breq	.+12     	; 0xb5f0 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b5e4:	87 33       	cpi	r24, 0x37	; 55
    b5e6:	31 f0       	breq	.+12     	; 0xb5f4 <solid_square_tile+0x20>

	return 0;
    b5e8:	80 e0       	ldi	r24, 0x00	; 0
    b5ea:	08 95       	ret
    b5ec:	81 e0       	ldi	r24, 0x01	; 1
    b5ee:	08 95       	ret
    b5f0:	82 e0       	ldi	r24, 0x02	; 2
    b5f2:	08 95       	ret
    b5f4:	87 e3       	ldi	r24, 0x37	; 55
}
    b5f6:	08 95       	ret

0000b5f8 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b5f8:	84 54       	subi	r24, 0x44	; 68
    b5fa:	93 4f       	sbci	r25, 0xF3	; 243
    b5fc:	fc 01       	movw	r30, r24
    b5fe:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b600:	83 30       	cpi	r24, 0x03	; 3
    b602:	41 f0       	breq	.+16     	; 0xb614 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b604:	86 30       	cpi	r24, 0x06	; 6
    b606:	41 f0       	breq	.+16     	; 0xb618 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b608:	84 30       	cpi	r24, 0x04	; 4
    b60a:	41 f0       	breq	.+16     	; 0xb61c <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b60c:	85 30       	cpi	r24, 0x05	; 5
    b60e:	41 f0       	breq	.+16     	; 0xb620 <solid_directional_tile+0x28>
	
	return 0;
    b610:	80 e0       	ldi	r24, 0x00	; 0
    b612:	08 95       	ret
    b614:	83 e0       	ldi	r24, 0x03	; 3
    b616:	08 95       	ret
    b618:	86 e0       	ldi	r24, 0x06	; 6
    b61a:	08 95       	ret
    b61c:	84 e0       	ldi	r24, 0x04	; 4
    b61e:	08 95       	ret
    b620:	85 e0       	ldi	r24, 0x05	; 5
}
    b622:	08 95       	ret

0000b624 <solid_tile>:

u8 solid_tile(int tile_index)
{
    b624:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    b626:	fc 01       	movw	r30, r24
    b628:	e4 54       	subi	r30, 0x44	; 68
    b62a:	f3 4f       	sbci	r31, 0xF3	; 243
    b62c:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b62e:	91 30       	cpi	r25, 0x01	; 1
    b630:	39 f0       	breq	.+14     	; 0xb640 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    b632:	92 30       	cpi	r25, 0x02	; 2
    b634:	39 f0       	breq	.+14     	; 0xb644 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    b636:	97 33       	cpi	r25, 0x37	; 55
    b638:	39 f0       	breq	.+14     	; 0xb648 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    b63a:	c9 01       	movw	r24, r18
    b63c:	0c 94 fc 5a 	jmp	0xb5f8	; 0xb5f8 <solid_directional_tile>
    b640:	81 e0       	ldi	r24, 0x01	; 1
    b642:	08 95       	ret
    b644:	82 e0       	ldi	r24, 0x02	; 2
    b646:	08 95       	ret
    b648:	87 e3       	ldi	r24, 0x37	; 55
}
    b64a:	08 95       	ret

0000b64c <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    b64c:	7f 92       	push	r7
    b64e:	8f 92       	push	r8
    b650:	9f 92       	push	r9
    b652:	af 92       	push	r10
    b654:	bf 92       	push	r11
    b656:	cf 92       	push	r12
    b658:	df 92       	push	r13
    b65a:	ef 92       	push	r14
    b65c:	ff 92       	push	r15
    b65e:	0f 93       	push	r16
    b660:	1f 93       	push	r17
    b662:	cf 93       	push	r28
    b664:	df 93       	push	r29
    b666:	b6 2e       	mov	r11, r22
    b668:	94 2e       	mov	r9, r20
    b66a:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    b66c:	fc 01       	movw	r30, r24
    b66e:	e4 54       	subi	r30, 0x44	; 68
    b670:	f3 4f       	sbci	r31, 0xF3	; 243
    b672:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    b674:	6e e1       	ldi	r22, 0x1E	; 30
    b676:	70 e0       	ldi	r23, 0x00	; 0
    b678:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    b67c:	f8 2e       	mov	r15, r24
    b67e:	ff 0c       	add	r15, r15
    b680:	ff 0c       	add	r15, r15
    b682:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    b684:	6d 5f       	subi	r22, 0xFD	; 253
    b686:	7f 4f       	sbci	r23, 0xFF	; 255
    b688:	16 2f       	mov	r17, r22
    b68a:	11 0f       	add	r17, r17
    b68c:	11 0f       	add	r17, r17
    b68e:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    b690:	83 e0       	ldi	r24, 0x03	; 3
    b692:	d8 16       	cp	r13, r24
    b694:	19 f0       	breq	.+6      	; 0xb69c <collides_directional_tile+0x50>
    b696:	86 e0       	ldi	r24, 0x06	; 6
    b698:	d8 12       	cpse	r13, r24
    b69a:	31 c0       	rjmp	.+98     	; 0xb6fe <collides_directional_tile+0xb2>
    b69c:	cf ef       	ldi	r28, 0xFF	; 255
    b69e:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    b6a0:	c9 0d       	add	r28, r9
    b6a2:	27 e0       	ldi	r18, 0x07	; 7
    b6a4:	72 2e       	mov	r7, r18
    b6a6:	7f 0c       	add	r7, r15
    b6a8:	37 e0       	ldi	r19, 0x07	; 7
    b6aa:	83 2e       	mov	r8, r19
    b6ac:	81 0e       	add	r8, r17
    b6ae:	ac 2e       	mov	r10, r28
    b6b0:	cb 2c       	mov	r12, r11
    b6b2:	e9 2c       	mov	r14, r9
    b6b4:	0b 2d       	mov	r16, r11
    b6b6:	21 2f       	mov	r18, r17
    b6b8:	47 2d       	mov	r20, r7
    b6ba:	68 2d       	mov	r22, r8
    b6bc:	8f 2d       	mov	r24, r15
    b6be:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b6c2:	81 11       	cpse	r24, r1
    b6c4:	58 c0       	rjmp	.+176    	; 0xb776 <collides_directional_tile+0x12a>
    b6c6:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    b6c8:	db 0d       	add	r29, r11
    b6ca:	a9 2c       	mov	r10, r9
    b6cc:	cd 2e       	mov	r12, r29
    b6ce:	21 2f       	mov	r18, r17
    b6d0:	47 2d       	mov	r20, r7
    b6d2:	68 2d       	mov	r22, r8
    b6d4:	8f 2d       	mov	r24, r15
    b6d6:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b6da:	81 11       	cpse	r24, r1
    b6dc:	4c c0       	rjmp	.+152    	; 0xb776 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    b6de:	ac 2e       	mov	r10, r28
    b6e0:	0d 2f       	mov	r16, r29
    b6e2:	21 2f       	mov	r18, r17
    b6e4:	47 2d       	mov	r20, r7
    b6e6:	68 2d       	mov	r22, r8
    b6e8:	8f 2d       	mov	r24, r15
    b6ea:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b6ee:	81 11       	cpse	r24, r1
    b6f0:	42 c0       	rjmp	.+132    	; 0xb776 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    b6f2:	ec 2e       	mov	r14, r28
    b6f4:	0b 2d       	mov	r16, r11
    b6f6:	21 2f       	mov	r18, r17
    b6f8:	47 2d       	mov	r20, r7
    b6fa:	68 2d       	mov	r22, r8
    b6fc:	34 c0       	rjmp	.+104    	; 0xb766 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    b6fe:	8c ef       	ldi	r24, 0xFC	; 252
    b700:	8d 0d       	add	r24, r13
    b702:	82 30       	cpi	r24, 0x02	; 2
    b704:	b0 f5       	brcc	.+108    	; 0xb772 <collides_directional_tile+0x126>
    b706:	cf ef       	ldi	r28, 0xFF	; 255
    b708:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    b70a:	c4 0f       	add	r28, r20
    b70c:	87 e0       	ldi	r24, 0x07	; 7
    b70e:	78 2e       	mov	r7, r24
    b710:	71 0e       	add	r7, r17
    b712:	97 e0       	ldi	r25, 0x07	; 7
    b714:	89 2e       	mov	r8, r25
    b716:	8f 0c       	add	r8, r15
    b718:	ac 2e       	mov	r10, r28
    b71a:	cb 2c       	mov	r12, r11
    b71c:	e4 2e       	mov	r14, r20
    b71e:	0b 2d       	mov	r16, r11
    b720:	27 2d       	mov	r18, r7
    b722:	48 2d       	mov	r20, r8
    b724:	61 2f       	mov	r22, r17
    b726:	8f 2d       	mov	r24, r15
    b728:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b72c:	81 11       	cpse	r24, r1
    b72e:	23 c0       	rjmp	.+70     	; 0xb776 <collides_directional_tile+0x12a>
    b730:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    b732:	db 0d       	add	r29, r11
    b734:	a9 2c       	mov	r10, r9
    b736:	cd 2e       	mov	r12, r29
    b738:	27 2d       	mov	r18, r7
    b73a:	48 2d       	mov	r20, r8
    b73c:	61 2f       	mov	r22, r17
    b73e:	8f 2d       	mov	r24, r15
    b740:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b744:	81 11       	cpse	r24, r1
    b746:	17 c0       	rjmp	.+46     	; 0xb776 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    b748:	ac 2e       	mov	r10, r28
    b74a:	0d 2f       	mov	r16, r29
    b74c:	27 2d       	mov	r18, r7
    b74e:	48 2d       	mov	r20, r8
    b750:	61 2f       	mov	r22, r17
    b752:	8f 2d       	mov	r24, r15
    b754:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b758:	81 11       	cpse	r24, r1
    b75a:	0d c0       	rjmp	.+26     	; 0xb776 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    b75c:	ec 2e       	mov	r14, r28
    b75e:	0b 2d       	mov	r16, r11
    b760:	27 2d       	mov	r18, r7
    b762:	48 2d       	mov	r20, r8
    b764:	61 2f       	mov	r22, r17
    b766:	8f 2d       	mov	r24, r15
    b768:	0e 94 0d 54 	call	0xa81a	; 0xa81a <LBLineIntersect>
    b76c:	81 11       	cpse	r24, r1
    b76e:	03 c0       	rjmp	.+6      	; 0xb776 <collides_directional_tile+0x12a>
    b770:	03 c0       	rjmp	.+6      	; 0xb778 <collides_directional_tile+0x12c>
	}
	
	return 0;
    b772:	80 e0       	ldi	r24, 0x00	; 0
    b774:	01 c0       	rjmp	.+2      	; 0xb778 <collides_directional_tile+0x12c>
    b776:	8d 2d       	mov	r24, r13
}
    b778:	df 91       	pop	r29
    b77a:	cf 91       	pop	r28
    b77c:	1f 91       	pop	r17
    b77e:	0f 91       	pop	r16
    b780:	ff 90       	pop	r15
    b782:	ef 90       	pop	r14
    b784:	df 90       	pop	r13
    b786:	cf 90       	pop	r12
    b788:	bf 90       	pop	r11
    b78a:	af 90       	pop	r10
    b78c:	9f 90       	pop	r9
    b78e:	8f 90       	pop	r8
    b790:	7f 90       	pop	r7
    b792:	08 95       	ret

0000b794 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    b794:	8f 92       	push	r8
    b796:	9f 92       	push	r9
    b798:	af 92       	push	r10
    b79a:	cf 92       	push	r12
    b79c:	ef 92       	push	r14
    b79e:	0f 93       	push	r16
    b7a0:	1f 93       	push	r17
    b7a2:	cf 93       	push	r28
    b7a4:	df 93       	push	r29
    b7a6:	4c 01       	movw	r8, r24
    b7a8:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b7aa:	20 e0       	ldi	r18, 0x00	; 0
    b7ac:	30 e0       	ldi	r19, 0x00	; 0
    b7ae:	40 e0       	ldi	r20, 0x00	; 0
    b7b0:	50 e4       	ldi	r21, 0x40	; 64
    b7b2:	6f 81       	ldd	r22, Y+7	; 0x07
    b7b4:	78 85       	ldd	r23, Y+8	; 0x08
    b7b6:	89 85       	ldd	r24, Y+9	; 0x09
    b7b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    b7ba:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b7be:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b7c2:	e6 2e       	mov	r14, r22
    b7c4:	20 e0       	ldi	r18, 0x00	; 0
    b7c6:	30 e0       	ldi	r19, 0x00	; 0
    b7c8:	40 e0       	ldi	r20, 0x00	; 0
    b7ca:	50 e4       	ldi	r21, 0x40	; 64
    b7cc:	6b 81       	ldd	r22, Y+3	; 0x03
    b7ce:	7c 81       	ldd	r23, Y+4	; 0x04
    b7d0:	8d 81       	ldd	r24, Y+5	; 0x05
    b7d2:	9e 81       	ldd	r25, Y+6	; 0x06
    b7d4:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b7d8:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b7dc:	06 2f       	mov	r16, r22
    b7de:	20 e0       	ldi	r18, 0x00	; 0
    b7e0:	30 e0       	ldi	r19, 0x00	; 0
    b7e2:	40 e8       	ldi	r20, 0x80	; 128
    b7e4:	5f e3       	ldi	r21, 0x3F	; 63
    b7e6:	f4 01       	movw	r30, r8
    b7e8:	67 81       	ldd	r22, Z+7	; 0x07
    b7ea:	70 85       	ldd	r23, Z+8	; 0x08
    b7ec:	81 85       	ldd	r24, Z+9	; 0x09
    b7ee:	92 85       	ldd	r25, Z+10	; 0x0a
    b7f0:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b7f4:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b7f8:	16 2f       	mov	r17, r22
    b7fa:	20 e0       	ldi	r18, 0x00	; 0
    b7fc:	30 e0       	ldi	r19, 0x00	; 0
    b7fe:	40 e8       	ldi	r20, 0x80	; 128
    b800:	5f e3       	ldi	r21, 0x3F	; 63
    b802:	f4 01       	movw	r30, r8
    b804:	63 81       	ldd	r22, Z+3	; 0x03
    b806:	74 81       	ldd	r23, Z+4	; 0x04
    b808:	85 81       	ldd	r24, Z+5	; 0x05
    b80a:	96 81       	ldd	r25, Z+6	; 0x06
    b80c:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b810:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b814:	86 2f       	mov	r24, r22
    b816:	94 e0       	ldi	r25, 0x04	; 4
    b818:	a9 2e       	mov	r10, r25
    b81a:	24 e0       	ldi	r18, 0x04	; 4
    b81c:	c2 2e       	mov	r12, r18
    b81e:	2e e0       	ldi	r18, 0x0E	; 14
    b820:	4e e0       	ldi	r20, 0x0E	; 14
    b822:	61 2f       	mov	r22, r17
    b824:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b828:	88 23       	and	r24, r24
    b82a:	41 f0       	breq	.+16     	; 0xb83c <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b82c:	f4 01       	movw	r30, r8
    b82e:	80 8d       	ldd	r24, Z+24	; 0x18
    b830:	88 37       	cpi	r24, 0x78	; 120
    b832:	21 f4       	brne	.+8      	; 0xb83c <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b834:	81 e0       	ldi	r24, 0x01	; 1
    b836:	9f 85       	ldd	r25, Y+15	; 0x0f
    b838:	99 30       	cpi	r25, 0x09	; 9
    b83a:	08 f4       	brcc	.+2      	; 0xb83e <player_shot+0xaa>
    b83c:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    b83e:	df 91       	pop	r29
    b840:	cf 91       	pop	r28
    b842:	1f 91       	pop	r17
    b844:	0f 91       	pop	r16
    b846:	ef 90       	pop	r14
    b848:	cf 90       	pop	r12
    b84a:	af 90       	pop	r10
    b84c:	9f 90       	pop	r9
    b84e:	8f 90       	pop	r8
    b850:	08 95       	ret

0000b852 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    b852:	af 92       	push	r10
    b854:	cf 92       	push	r12
    b856:	ef 92       	push	r14
    b858:	0f 93       	push	r16
    b85a:	1f 93       	push	r17
    b85c:	cf 93       	push	r28
    b85e:	df 93       	push	r29
    b860:	ec 01       	movw	r28, r24
    b862:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    b864:	20 e0       	ldi	r18, 0x00	; 0
    b866:	30 e0       	ldi	r19, 0x00	; 0
    b868:	40 e0       	ldi	r20, 0x00	; 0
    b86a:	50 e4       	ldi	r21, 0x40	; 64
    b86c:	fb 01       	movw	r30, r22
    b86e:	67 81       	ldd	r22, Z+7	; 0x07
    b870:	70 85       	ldd	r23, Z+8	; 0x08
    b872:	81 85       	ldd	r24, Z+9	; 0x09
    b874:	92 85       	ldd	r25, Z+10	; 0x0a
    b876:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b87a:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b87e:	e6 2e       	mov	r14, r22
    b880:	20 e0       	ldi	r18, 0x00	; 0
    b882:	30 e0       	ldi	r19, 0x00	; 0
    b884:	40 e0       	ldi	r20, 0x00	; 0
    b886:	50 e4       	ldi	r21, 0x40	; 64
    b888:	f8 01       	movw	r30, r16
    b88a:	63 81       	ldd	r22, Z+3	; 0x03
    b88c:	74 81       	ldd	r23, Z+4	; 0x04
    b88e:	85 81       	ldd	r24, Z+5	; 0x05
    b890:	96 81       	ldd	r25, Z+6	; 0x06
    b892:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b896:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b89a:	06 2f       	mov	r16, r22
    b89c:	6f 81       	ldd	r22, Y+7	; 0x07
    b89e:	78 85       	ldd	r23, Y+8	; 0x08
    b8a0:	89 85       	ldd	r24, Y+9	; 0x09
    b8a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    b8a4:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b8a8:	16 2f       	mov	r17, r22
    b8aa:	6b 81       	ldd	r22, Y+3	; 0x03
    b8ac:	7c 81       	ldd	r23, Y+4	; 0x04
    b8ae:	8d 81       	ldd	r24, Y+5	; 0x05
    b8b0:	9e 81       	ldd	r25, Y+6	; 0x06
    b8b2:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    b8b6:	86 2f       	mov	r24, r22
    b8b8:	94 e0       	ldi	r25, 0x04	; 4
    b8ba:	a9 2e       	mov	r10, r25
    b8bc:	24 e0       	ldi	r18, 0x04	; 4
    b8be:	c2 2e       	mov	r12, r18
    b8c0:	28 e0       	ldi	r18, 0x08	; 8
    b8c2:	48 e0       	ldi	r20, 0x08	; 8
    b8c4:	61 2f       	mov	r22, r17
    b8c6:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
    b8ca:	88 23       	and	r24, r24
    b8cc:	39 f0       	breq	.+14     	; 0xb8dc <turret_shot+0x8a>
    b8ce:	91 e0       	ldi	r25, 0x01	; 1
    b8d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    b8d2:	81 11       	cpse	r24, r1
    b8d4:	01 c0       	rjmp	.+2      	; 0xb8d8 <turret_shot+0x86>
    b8d6:	90 e0       	ldi	r25, 0x00	; 0
    b8d8:	89 2f       	mov	r24, r25
    b8da:	01 c0       	rjmp	.+2      	; 0xb8de <turret_shot+0x8c>
    b8dc:	80 e0       	ldi	r24, 0x00	; 0
}
    b8de:	df 91       	pop	r29
    b8e0:	cf 91       	pop	r28
    b8e2:	1f 91       	pop	r17
    b8e4:	0f 91       	pop	r16
    b8e6:	ef 90       	pop	r14
    b8e8:	cf 90       	pop	r12
    b8ea:	af 90       	pop	r10
    b8ec:	08 95       	ret

0000b8ee <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    b8ee:	cf 92       	push	r12
    b8f0:	df 92       	push	r13
    b8f2:	ef 92       	push	r14
    b8f4:	ff 92       	push	r15
    b8f6:	cf 93       	push	r28
    b8f8:	df 93       	push	r29
    b8fa:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b8fc:	cb 80       	ldd	r12, Y+3	; 0x03
    b8fe:	dc 80       	ldd	r13, Y+4	; 0x04
    b900:	ed 80       	ldd	r14, Y+5	; 0x05
    b902:	fe 80       	ldd	r15, Y+6	; 0x06
    b904:	20 e0       	ldi	r18, 0x00	; 0
    b906:	30 e0       	ldi	r19, 0x00	; 0
    b908:	a9 01       	movw	r20, r18
    b90a:	c7 01       	movw	r24, r14
    b90c:	b6 01       	movw	r22, r12
    b90e:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    b912:	87 fd       	sbrc	r24, 7
    b914:	31 c0       	rjmp	.+98     	; 0xb978 <collision_detect_boundries+0x8a>
    b916:	20 e0       	ldi	r18, 0x00	; 0
    b918:	30 e0       	ldi	r19, 0x00	; 0
    b91a:	40 e0       	ldi	r20, 0x00	; 0
    b91c:	51 e4       	ldi	r21, 0x41	; 65
    b91e:	c7 01       	movw	r24, r14
    b920:	b6 01       	movw	r22, r12
    b922:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b926:	20 e0       	ldi	r18, 0x00	; 0
    b928:	30 e0       	ldi	r19, 0x00	; 0
    b92a:	40 e7       	ldi	r20, 0x70	; 112
    b92c:	53 e4       	ldi	r21, 0x43	; 67
    b92e:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    b932:	18 16       	cp	r1, r24
    b934:	0c f1       	brlt	.+66     	; 0xb978 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b936:	cf 80       	ldd	r12, Y+7	; 0x07
    b938:	d8 84       	ldd	r13, Y+8	; 0x08
    b93a:	e9 84       	ldd	r14, Y+9	; 0x09
    b93c:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b93e:	20 e0       	ldi	r18, 0x00	; 0
    b940:	30 e0       	ldi	r19, 0x00	; 0
    b942:	40 ec       	ldi	r20, 0xC0	; 192
    b944:	51 e4       	ldi	r21, 0x41	; 65
    b946:	c7 01       	movw	r24, r14
    b948:	b6 01       	movw	r22, r12
    b94a:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    b94e:	87 fd       	sbrc	r24, 7
    b950:	13 c0       	rjmp	.+38     	; 0xb978 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b952:	20 e0       	ldi	r18, 0x00	; 0
    b954:	30 e0       	ldi	r19, 0x00	; 0
    b956:	40 e0       	ldi	r20, 0x00	; 0
    b958:	51 e4       	ldi	r21, 0x41	; 65
    b95a:	c7 01       	movw	r24, r14
    b95c:	b6 01       	movw	r22, r12
    b95e:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    b962:	c1 e0       	ldi	r28, 0x01	; 1
    b964:	20 e0       	ldi	r18, 0x00	; 0
    b966:	30 e0       	ldi	r19, 0x00	; 0
    b968:	40 e6       	ldi	r20, 0x60	; 96
    b96a:	53 e4       	ldi	r21, 0x43	; 67
    b96c:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    b970:	18 16       	cp	r1, r24
    b972:	1c f0       	brlt	.+6      	; 0xb97a <collision_detect_boundries+0x8c>
    b974:	c0 e0       	ldi	r28, 0x00	; 0
    b976:	01 c0       	rjmp	.+2      	; 0xb97a <collision_detect_boundries+0x8c>
	{
		return 1;
    b978:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    b97a:	8c 2f       	mov	r24, r28
    b97c:	df 91       	pop	r29
    b97e:	cf 91       	pop	r28
    b980:	ff 90       	pop	r15
    b982:	ef 90       	pop	r14
    b984:	df 90       	pop	r13
    b986:	cf 90       	pop	r12
    b988:	08 95       	ret

0000b98a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b98a:	1f 93       	push	r17
    b98c:	cf 93       	push	r28
    b98e:	df 93       	push	r29
    b990:	9c 01       	movw	r18, r24
    b992:	fb 01       	movw	r30, r22
    b994:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    b996:	6e e1       	ldi	r22, 0x1E	; 30
    b998:	70 e0       	ldi	r23, 0x00	; 0
    b99a:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    b99e:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    b9a0:	63 e0       	ldi	r22, 0x03	; 3
    b9a2:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    b9a4:	e9 01       	movw	r28, r18
    b9a6:	c4 54       	subi	r28, 0x44	; 68
    b9a8:	d3 4f       	sbci	r29, 0xF3	; 243
    b9aa:	49 81       	ldd	r20, Y+1	; 0x01
    b9ac:	44 23       	and	r20, r20
    b9ae:	71 f0       	breq	.+28     	; 0xb9cc <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b9b0:	e9 01       	movw	r28, r18
    b9b2:	c3 54       	subi	r28, 0x43	; 67
    b9b4:	d3 4f       	sbci	r29, 0xF3	; 243
    b9b6:	49 81       	ldd	r20, Y+1	; 0x01
    b9b8:	44 23       	and	r20, r20
    b9ba:	91 f0       	breq	.+36     	; 0xb9e0 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b9bc:	e9 01       	movw	r28, r18
    b9be:	c6 52       	subi	r28, 0x26	; 38
    b9c0:	d3 4f       	sbci	r29, 0xF3	; 243
    b9c2:	49 81       	ldd	r20, Y+1	; 0x01
    b9c4:	41 11       	cpse	r20, r1
    b9c6:	04 c0       	rjmp	.+8      	; 0xb9d0 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b9c8:	64 e0       	ldi	r22, 0x04	; 4
    b9ca:	69 0f       	add	r22, r25
    b9cc:	af 01       	movw	r20, r30
    b9ce:	0a c0       	rjmp	.+20     	; 0xb9e4 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b9d0:	e9 01       	movw	r28, r18
    b9d2:	c5 52       	subi	r28, 0x25	; 37
    b9d4:	d3 4f       	sbci	r29, 0xF3	; 243
    b9d6:	29 81       	ldd	r18, Y+1	; 0x01
    b9d8:	21 11       	cpse	r18, r1
    b9da:	07 c0       	rjmp	.+14     	; 0xb9ea <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b9dc:	64 e0       	ldi	r22, 0x04	; 4
    b9de:	69 0f       	add	r22, r25
    b9e0:	af 01       	movw	r20, r30
    b9e2:	8f 5f       	subi	r24, 0xFF	; 255
    b9e4:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b9e8:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b9ea:	df 91       	pop	r29
    b9ec:	cf 91       	pop	r28
    b9ee:	1f 91       	pop	r17
    b9f0:	08 95       	ret

0000b9f2 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b9f2:	ff 92       	push	r15
    b9f4:	0f 93       	push	r16
    b9f6:	1f 93       	push	r17
    b9f8:	cf 93       	push	r28
    b9fa:	df 93       	push	r29
    b9fc:	ec 01       	movw	r28, r24
    b9fe:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    ba00:	20 e0       	ldi	r18, 0x00	; 0
    ba02:	30 e0       	ldi	r19, 0x00	; 0
    ba04:	40 e0       	ldi	r20, 0x00	; 0
    ba06:	5e e3       	ldi	r21, 0x3E	; 62
    ba08:	6f 81       	ldd	r22, Y+7	; 0x07
    ba0a:	78 85       	ldd	r23, Y+8	; 0x08
    ba0c:	89 85       	ldd	r24, Y+9	; 0x09
    ba0e:	9a 85       	ldd	r25, Y+10	; 0x0a
    ba10:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    ba14:	20 e0       	ldi	r18, 0x00	; 0
    ba16:	30 e0       	ldi	r19, 0x00	; 0
    ba18:	40 e4       	ldi	r20, 0x40	; 64
    ba1a:	50 e4       	ldi	r21, 0x40	; 64
    ba1c:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    ba20:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    ba24:	8e e1       	ldi	r24, 0x1E	; 30
    ba26:	68 9f       	mul	r22, r24
    ba28:	80 01       	movw	r16, r0
    ba2a:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    ba2c:	20 e0       	ldi	r18, 0x00	; 0
    ba2e:	30 e0       	ldi	r19, 0x00	; 0
    ba30:	40 e0       	ldi	r20, 0x00	; 0
    ba32:	5e e3       	ldi	r21, 0x3E	; 62
    ba34:	6b 81       	ldd	r22, Y+3	; 0x03
    ba36:	7c 81       	ldd	r23, Y+4	; 0x04
    ba38:	8d 81       	ldd	r24, Y+5	; 0x05
    ba3a:	9e 81       	ldd	r25, Y+6	; 0x06
    ba3c:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    ba40:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    ba44:	06 0f       	add	r16, r22
    ba46:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    ba48:	8b 8d       	ldd	r24, Y+27	; 0x1b
    ba4a:	88 23       	and	r24, r24
    ba4c:	79 f0       	breq	.+30     	; 0xba6c <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ba4e:	40 e0       	ldi	r20, 0x00	; 0
    ba50:	50 e0       	ldi	r21, 0x00	; 0
    ba52:	61 e0       	ldi	r22, 0x01	; 1
    ba54:	8a e0       	ldi	r24, 0x0A	; 10
    ba56:	8f 0d       	add	r24, r15
    ba58:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ba5c:	47 e0       	ldi	r20, 0x07	; 7
    ba5e:	66 e0       	ldi	r22, 0x06	; 6
    ba60:	7e e7       	ldi	r23, 0x7E	; 126
    ba62:	c8 01       	movw	r24, r16
    ba64:	0e 94 c5 5c 	call	0xb98a	; 0xb98a <drop_item>
		player->max_speed = MAX_SPEED;
    ba68:	82 e3       	ldi	r24, 0x32	; 50
    ba6a:	89 8f       	std	Y+25, r24	; 0x19
	}
	if (player->has_rocket)
    ba6c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ba6e:	88 23       	and	r24, r24
    ba70:	69 f0       	breq	.+26     	; 0xba8c <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    ba72:	40 e0       	ldi	r20, 0x00	; 0
    ba74:	50 e0       	ldi	r21, 0x00	; 0
    ba76:	61 e0       	ldi	r22, 0x01	; 1
    ba78:	8b e0       	ldi	r24, 0x0B	; 11
    ba7a:	8f 0d       	add	r24, r15
    ba7c:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ba80:	49 e0       	ldi	r20, 0x09	; 9
    ba82:	60 e0       	ldi	r22, 0x00	; 0
    ba84:	7e e7       	ldi	r23, 0x7E	; 126
    ba86:	c8 01       	movw	r24, r16
    ba88:	0e 94 c5 5c 	call	0xb98a	; 0xb98a <drop_item>
	}
	player->has_over_speed = false;
    ba8c:	1b 8e       	std	Y+27, r1	; 0x1b
	player->has_rocket = false;
    ba8e:	1a 8e       	std	Y+26, r1	; 0x1a
	player->flags = player->flags | EXPLODING_FLAG;
    ba90:	8d 89       	ldd	r24, Y+21	; 0x15
    ba92:	81 60       	ori	r24, 0x01	; 1
    ba94:	8d 8b       	std	Y+21, r24	; 0x15
}
    ba96:	df 91       	pop	r29
    ba98:	cf 91       	pop	r28
    ba9a:	1f 91       	pop	r17
    ba9c:	0f 91       	pop	r16
    ba9e:	ff 90       	pop	r15
    baa0:	08 95       	ret

0000baa2 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    baa2:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    baa4:	70 e0       	ldi	r23, 0x00	; 0
    baa6:	8e e1       	ldi	r24, 0x1E	; 30
    baa8:	48 9f       	mul	r20, r24
    baaa:	60 0d       	add	r22, r0
    baac:	71 1d       	adc	r23, r1
    baae:	11 24       	eor	r1, r1
	if (direction == D_UP)
    bab0:	21 11       	cpse	r18, r1
    bab2:	05 c0       	rjmp	.+10     	; 0xbabe <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    bab4:	71 83       	std	Z+1, r23	; 0x01
    bab6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bab8:	6f 5f       	subi	r22, 0xFF	; 255
    baba:	7f 4f       	sbci	r23, 0xFF	; 255
    babc:	0c c0       	rjmp	.+24     	; 0xbad6 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    babe:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    bac0:	21 30       	cpi	r18, 0x01	; 1
    bac2:	11 f4       	brne	.+4      	; 0xbac8 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    bac4:	01 96       	adiw	r24, 0x01	; 1
    bac6:	03 c0       	rjmp	.+6      	; 0xbace <get_interesting_tile_indexes_shot+0x2c>
    bac8:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    baca:	22 30       	cpi	r18, 0x02	; 2
    bacc:	39 f4       	brne	.+14     	; 0xbadc <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    bace:	91 83       	std	Z+1, r25	; 0x01
    bad0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    bad2:	61 5e       	subi	r22, 0xE1	; 225
    bad4:	7f 4f       	sbci	r23, 0xFF	; 255
    bad6:	73 83       	std	Z+3, r23	; 0x03
    bad8:	62 83       	std	Z+2, r22	; 0x02
    bada:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    badc:	71 83       	std	Z+1, r23	; 0x01
    bade:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    bae0:	93 83       	std	Z+3, r25	; 0x03
    bae2:	82 83       	std	Z+2, r24	; 0x02
    bae4:	08 95       	ret

0000bae6 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    bae6:	ef 92       	push	r14
    bae8:	ff 92       	push	r15
    baea:	0f 93       	push	r16
    baec:	1f 93       	push	r17
    baee:	cf 93       	push	r28
    baf0:	df 93       	push	r29
    baf2:	ec 01       	movw	r28, r24
    baf4:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    baf6:	8e e1       	ldi	r24, 0x1E	; 30
    baf8:	e8 2e       	mov	r14, r24
    bafa:	f1 2c       	mov	r15, r1
    bafc:	cb 01       	movw	r24, r22
    bafe:	b7 01       	movw	r22, r14
    bb00:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    bb04:	6d 5f       	subi	r22, 0xFD	; 253
    bb06:	40 e0       	ldi	r20, 0x00	; 0
    bb08:	50 e0       	ldi	r21, 0x00	; 0
    bb0a:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    bb0e:	88 81       	ld	r24, Y
    bb10:	fe 01       	movw	r30, r28
    bb12:	9e e0       	ldi	r25, 0x0E	; 14
    bb14:	89 9f       	mul	r24, r25
    bb16:	e0 0d       	add	r30, r0
    bb18:	f1 1d       	adc	r31, r1
    bb1a:	11 24       	eor	r1, r1
    bb1c:	85 85       	ldd	r24, Z+13	; 0x0d
    bb1e:	96 85       	ldd	r25, Z+14	; 0x0e
    bb20:	00 97       	sbiw	r24, 0x00	; 0
    bb22:	41 f0       	breq	.+16     	; 0xbb34 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    bb24:	b7 01       	movw	r22, r14
    bb26:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    bb2a:	6d 5f       	subi	r22, 0xFD	; 253
    bb2c:	40 e0       	ldi	r20, 0x00	; 0
    bb2e:	50 e0       	ldi	r21, 0x00	; 0
    bb30:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    bb34:	88 81       	ld	r24, Y
    bb36:	fe 01       	movw	r30, r28
    bb38:	9e e0       	ldi	r25, 0x0E	; 14
    bb3a:	89 9f       	mul	r24, r25
    bb3c:	e0 0d       	add	r30, r0
    bb3e:	f1 1d       	adc	r31, r1
    bb40:	11 24       	eor	r1, r1
    bb42:	16 87       	std	Z+14, r17	; 0x0e
    bb44:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    bb46:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    bb48:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    bb4a:	82 30       	cpi	r24, 0x02	; 2
    bb4c:	11 f0       	breq	.+4      	; 0xbb52 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    bb4e:	88 83       	st	Y, r24
    bb50:	01 c0       	rjmp	.+2      	; 0xbb54 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    bb52:	18 82       	st	Y, r1
	}
}
    bb54:	df 91       	pop	r29
    bb56:	cf 91       	pop	r28
    bb58:	1f 91       	pop	r17
    bb5a:	0f 91       	pop	r16
    bb5c:	ff 90       	pop	r15
    bb5e:	ef 90       	pop	r14
    bb60:	08 95       	ret

0000bb62 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    bb62:	fb 01       	movw	r30, r22
	switch (tile_type)
    bb64:	84 30       	cpi	r24, 0x04	; 4
    bb66:	71 f0       	breq	.+28     	; 0xbb84 <richochet+0x22>
    bb68:	18 f4       	brcc	.+6      	; 0xbb70 <richochet+0xe>
    bb6a:	83 30       	cpi	r24, 0x03	; 3
    bb6c:	31 f0       	breq	.+12     	; 0xbb7a <richochet+0x18>
    bb6e:	08 95       	ret
    bb70:	85 30       	cpi	r24, 0x05	; 5
    bb72:	99 f0       	breq	.+38     	; 0xbb9a <richochet+0x38>
    bb74:	86 30       	cpi	r24, 0x06	; 6
    bb76:	59 f0       	breq	.+22     	; 0xbb8e <richochet+0x2c>
    bb78:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bb7a:	80 81       	ld	r24, Z
    bb7c:	8d 7f       	andi	r24, 0xFD	; 253
    bb7e:	29 f4       	brne	.+10     	; 0xbb8a <richochet+0x28>
				sprite->direction = D_RIGHT;
    bb80:	81 e0       	ldi	r24, 0x01	; 1
    bb82:	09 c0       	rjmp	.+18     	; 0xbb96 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    bb84:	80 81       	ld	r24, Z
    bb86:	8d 7f       	andi	r24, 0xFD	; 253
    bb88:	29 f0       	breq	.+10     	; 0xbb94 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    bb8a:	82 e0       	ldi	r24, 0x02	; 2
    bb8c:	04 c0       	rjmp	.+8      	; 0xbb96 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bb8e:	80 81       	ld	r24, Z
    bb90:	8d 7f       	andi	r24, 0xFD	; 253
    bb92:	31 f4       	brne	.+12     	; 0xbba0 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    bb94:	83 e0       	ldi	r24, 0x03	; 3
    bb96:	80 83       	st	Z, r24
    bb98:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    bb9a:	80 81       	ld	r24, Z
    bb9c:	8d 7f       	andi	r24, 0xFD	; 253
    bb9e:	81 f3       	breq	.-32     	; 0xbb80 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    bba0:	10 82       	st	Z, r1
    bba2:	08 95       	ret

0000bba4 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    bba4:	2f 92       	push	r2
    bba6:	3f 92       	push	r3
    bba8:	4f 92       	push	r4
    bbaa:	5f 92       	push	r5
    bbac:	6f 92       	push	r6
    bbae:	7f 92       	push	r7
    bbb0:	8f 92       	push	r8
    bbb2:	9f 92       	push	r9
    bbb4:	af 92       	push	r10
    bbb6:	bf 92       	push	r11
    bbb8:	cf 92       	push	r12
    bbba:	df 92       	push	r13
    bbbc:	ef 92       	push	r14
    bbbe:	ff 92       	push	r15
    bbc0:	0f 93       	push	r16
    bbc2:	1f 93       	push	r17
    bbc4:	cf 93       	push	r28
    bbc6:	df 93       	push	r29
    bbc8:	00 d0       	rcall	.+0      	; 0xbbca <collision_detect_shot+0x26>
    bbca:	00 d0       	rcall	.+0      	; 0xbbcc <collision_detect_shot+0x28>
    bbcc:	1f 92       	push	r1
    bbce:	cd b7       	in	r28, 0x3d	; 61
    bbd0:	de b7       	in	r29, 0x3e	; 62
    bbd2:	3c 01       	movw	r6, r24
    bbd4:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    bbd6:	1a 82       	std	Y+2, r1	; 0x02
    bbd8:	19 82       	std	Y+1, r1	; 0x01
    bbda:	1c 82       	std	Y+4, r1	; 0x04
    bbdc:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    bbde:	20 e0       	ldi	r18, 0x00	; 0
    bbe0:	30 e0       	ldi	r19, 0x00	; 0
    bbe2:	40 e0       	ldi	r20, 0x00	; 0
    bbe4:	5e e3       	ldi	r21, 0x3E	; 62
    bbe6:	db 01       	movw	r26, r22
    bbe8:	17 96       	adiw	r26, 0x07	; 7
    bbea:	6d 91       	ld	r22, X+
    bbec:	7d 91       	ld	r23, X+
    bbee:	8d 91       	ld	r24, X+
    bbf0:	9c 91       	ld	r25, X
    bbf2:	1a 97       	sbiw	r26, 0x0a	; 10
    bbf4:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    bbf8:	20 e0       	ldi	r18, 0x00	; 0
    bbfa:	30 e0       	ldi	r19, 0x00	; 0
    bbfc:	40 e4       	ldi	r20, 0x40	; 64
    bbfe:	50 e4       	ldi	r21, 0x40	; 64
    bc00:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    bc04:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    bc08:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    bc0a:	20 e0       	ldi	r18, 0x00	; 0
    bc0c:	30 e0       	ldi	r19, 0x00	; 0
    bc0e:	40 e0       	ldi	r20, 0x00	; 0
    bc10:	5e e3       	ldi	r21, 0x3E	; 62
    bc12:	f4 01       	movw	r30, r8
    bc14:	63 81       	ldd	r22, Z+3	; 0x03
    bc16:	74 81       	ldd	r23, Z+4	; 0x04
    bc18:	85 81       	ldd	r24, Z+5	; 0x05
    bc1a:	96 81       	ldd	r25, Z+6	; 0x06
    bc1c:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    bc20:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    bc24:	d4 01       	movw	r26, r8
    bc26:	2c 91       	ld	r18, X
    bc28:	41 2f       	mov	r20, r17
    bc2a:	ce 01       	movw	r24, r28
    bc2c:	01 96       	adiw	r24, 0x01	; 1
    bc2e:	0e 94 51 5d 	call	0xbaa2	; 0xbaa2 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    bc32:	c4 01       	movw	r24, r8
    bc34:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <collision_detect_boundries>
    bc38:	88 23       	and	r24, r24
    bc3a:	69 f0       	breq	.+26     	; 0xbc56 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    bc3c:	f4 01       	movw	r30, r8
    bc3e:	63 85       	ldd	r22, Z+11	; 0x0b
    bc40:	c4 01       	movw	r24, r8
    bc42:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
		player->active_shots--;
    bc46:	d3 01       	movw	r26, r6
    bc48:	51 96       	adiw	r26, 0x11	; 17
    bc4a:	8c 91       	ld	r24, X
    bc4c:	51 97       	sbiw	r26, 0x11	; 17
    bc4e:	81 50       	subi	r24, 0x01	; 1
    bc50:	51 96       	adiw	r26, 0x11	; 17
    bc52:	8c 93       	st	X, r24
		return;
    bc54:	ab c1       	rjmp	.+854    	; 0xbfac <collision_detect_shot+0x408>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    bc56:	b4 01       	movw	r22, r8
    bc58:	8a e3       	ldi	r24, 0x3A	; 58
    bc5a:	9c e0       	ldi	r25, 0x0C	; 12
    bc5c:	0e 94 ca 5b 	call	0xb794	; 0xb794 <player_shot>
    bc60:	88 23       	and	r24, r24
    bc62:	b9 f0       	breq	.+46     	; 0xbc92 <collision_detect_shot+0xee>
    bc64:	80 91 4f 0c 	lds	r24, 0x0C4F
    bc68:	80 fd       	sbrc	r24, 0
    bc6a:	13 c0       	rjmp	.+38     	; 0xbc92 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    bc6c:	80 91 bb 0f 	lds	r24, 0x0FBB
    bc70:	8f 5f       	subi	r24, 0xFF	; 255
    bc72:	80 93 bb 0f 	sts	0x0FBB, r24
		player2.score++;
    bc76:	80 91 ba 0f 	lds	r24, 0x0FBA
    bc7a:	8f 5f       	subi	r24, 0xFF	; 255
    bc7c:	80 93 ba 0f 	sts	0x0FBA, r24
		render_score(&player2, 15);
    bc80:	6f e0       	ldi	r22, 0x0F	; 15
    bc82:	8b ea       	ldi	r24, 0xAB	; 171
    bc84:	9f e0       	ldi	r25, 0x0F	; 15
    bc86:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    bc8a:	0a e3       	ldi	r16, 0x3A	; 58
    bc8c:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    bc8e:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    bc90:	54 c0       	rjmp	.+168    	; 0xbd3a <collision_detect_shot+0x196>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    bc92:	b4 01       	movw	r22, r8
    bc94:	8b ea       	ldi	r24, 0xAB	; 171
    bc96:	9f e0       	ldi	r25, 0x0F	; 15
    bc98:	0e 94 ca 5b 	call	0xb794	; 0xb794 <player_shot>
    bc9c:	90 91 0a 0c 	lds	r25, 0x0C0A
    bca0:	88 23       	and	r24, r24
    bca2:	d1 f0       	breq	.+52     	; 0xbcd8 <collision_detect_shot+0x134>
    bca4:	80 91 c0 0f 	lds	r24, 0x0FC0
    bca8:	80 fd       	sbrc	r24, 0
    bcaa:	16 c0       	rjmp	.+44     	; 0xbcd8 <collision_detect_shot+0x134>
    bcac:	91 11       	cpse	r25, r1
    bcae:	14 c0       	rjmp	.+40     	; 0xbcd8 <collision_detect_shot+0x134>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    bcb0:	80 91 4a 0c 	lds	r24, 0x0C4A
    bcb4:	8f 5f       	subi	r24, 0xFF	; 255
    bcb6:	80 93 4a 0c 	sts	0x0C4A, r24
		player1.score++;
    bcba:	80 91 49 0c 	lds	r24, 0x0C49
    bcbe:	8f 5f       	subi	r24, 0xFF	; 255
    bcc0:	80 93 49 0c 	sts	0x0C49, r24
		render_score(&player1, 0);
    bcc4:	60 e0       	ldi	r22, 0x00	; 0
    bcc6:	8a e3       	ldi	r24, 0x3A	; 58
    bcc8:	9c e0       	ldi	r25, 0x0C	; 12
    bcca:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    bcce:	0b ea       	ldi	r16, 0xAB	; 171
    bcd0:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    bcd2:	6f e0       	ldi	r22, 0x0F	; 15
    bcd4:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    bcd6:	31 c0       	rjmp	.+98     	; 0xbd3a <collision_detect_shot+0x196>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    bcd8:	94 30       	cpi	r25, 0x04	; 4
    bcda:	91 f5       	brne	.+100    	; 0xbd40 <collision_detect_shot+0x19c>
	{
		if (turret_shot(&turret1, shot))
    bcdc:	b4 01       	movw	r22, r8
    bcde:	86 e7       	ldi	r24, 0x76	; 118
    bce0:	90 e1       	ldi	r25, 0x10	; 16
    bce2:	0e 94 29 5c 	call	0xb852	; 0xb852 <turret_shot>
    bce6:	88 23       	and	r24, r24
    bce8:	41 f0       	breq	.+16     	; 0xbcfa <collision_detect_shot+0x156>
		{
			turret1.lives--;
    bcea:	80 91 81 10 	lds	r24, 0x1081
    bcee:	81 50       	subi	r24, 0x01	; 1
    bcf0:	80 93 81 10 	sts	0x1081, r24
			init_shot_state(shot, shot->shot_type);
    bcf4:	f4 01       	movw	r30, r8
    bcf6:	63 85       	ldd	r22, Z+11	; 0x0b
    bcf8:	0f c0       	rjmp	.+30     	; 0xbd18 <collision_detect_shot+0x174>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    bcfa:	b4 01       	movw	r22, r8
    bcfc:	82 e4       	ldi	r24, 0x42	; 66
    bcfe:	90 e1       	ldi	r25, 0x10	; 16
    bd00:	0e 94 29 5c 	call	0xb852	; 0xb852 <turret_shot>
    bd04:	88 23       	and	r24, r24
    bd06:	e1 f0       	breq	.+56     	; 0xbd40 <collision_detect_shot+0x19c>
		{
			turret2.lives--;
    bd08:	80 91 4d 10 	lds	r24, 0x104D
    bd0c:	81 50       	subi	r24, 0x01	; 1
    bd0e:	80 93 4d 10 	sts	0x104D, r24
			init_shot_state(shot, shot->shot_type);
    bd12:	d4 01       	movw	r26, r8
    bd14:	1b 96       	adiw	r26, 0x0b	; 11
    bd16:	6c 91       	ld	r22, X
    bd18:	c4 01       	movw	r24, r8
    bd1a:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
			game.boss_fight_player->active_shots--;
    bd1e:	e0 91 18 0c 	lds	r30, 0x0C18
    bd22:	f0 91 19 0c 	lds	r31, 0x0C19
    bd26:	81 89       	ldd	r24, Z+17	; 0x11
    bd28:	81 50       	subi	r24, 0x01	; 1
    bd2a:	81 8b       	std	Z+17, r24	; 0x11
			SFX_TANK_EXPLODE;
    bd2c:	2f ef       	ldi	r18, 0xFF	; 255
    bd2e:	40 e1       	ldi	r20, 0x10	; 16
    bd30:	67 e0       	ldi	r22, 0x07	; 7
    bd32:	84 e0       	ldi	r24, 0x04	; 4
    bd34:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
    bd38:	03 c0       	rjmp	.+6      	; 0xbd40 <collision_detect_shot+0x19c>
		}
	}
	if (p)
    bd3a:	01 15       	cp	r16, r1
    bd3c:	11 05       	cpc	r17, r1
    bd3e:	59 f4       	brne	.+22     	; 0xbd56 <collision_detect_shot+0x1b2>
    bd40:	fe 01       	movw	r30, r28
    bd42:	31 96       	adiw	r30, 0x01	; 1
    bd44:	2f 01       	movw	r4, r30
    bd46:	1d 82       	std	Y+5, r1	; 0x05
    bd48:	f1 2c       	mov	r15, r1
    bd4a:	d1 2c       	mov	r13, r1
    bd4c:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bd4e:	5e e1       	ldi	r21, 0x1E	; 30
    bd50:	25 2e       	mov	r2, r21
    bd52:	31 2c       	mov	r3, r1
    bd54:	44 c0       	rjmp	.+136    	; 0xbdde <collision_detect_shot+0x23a>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    bd56:	d4 01       	movw	r26, r8
    bd58:	1b 96       	adiw	r26, 0x0b	; 11
    bd5a:	6c 91       	ld	r22, X
    bd5c:	c4 01       	movw	r24, r8
    bd5e:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
		player->active_shots--;
    bd62:	f3 01       	movw	r30, r6
    bd64:	81 89       	ldd	r24, Z+17	; 0x11
    bd66:	81 50       	subi	r24, 0x01	; 1
    bd68:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    bd6a:	6f 2d       	mov	r22, r15
    bd6c:	c8 01       	movw	r24, r16
    bd6e:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <kill_player>
		SFX_TANK_EXPLODE;
    bd72:	2f ef       	ldi	r18, 0xFF	; 255
    bd74:	40 e1       	ldi	r20, 0x10	; 16
    bd76:	67 e0       	ldi	r22, 0x07	; 7
    bd78:	11 c1       	rjmp	.+546    	; 0xbf9c <collision_detect_shot+0x3f8>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    bd7a:	c5 01       	movw	r24, r10
    bd7c:	0e 94 fc 5a 	call	0xb5f8	; 0xb5f8 <solid_directional_tile>
    bd80:	88 23       	and	r24, r24
    bd82:	c1 f1       	breq	.+112    	; 0xbdf4 <collision_detect_shot+0x250>
    bd84:	20 e0       	ldi	r18, 0x00	; 0
    bd86:	30 e0       	ldi	r19, 0x00	; 0
    bd88:	40 e0       	ldi	r20, 0x00	; 0
    bd8a:	50 e4       	ldi	r21, 0x40	; 64
    bd8c:	f4 01       	movw	r30, r8
    bd8e:	67 81       	ldd	r22, Z+7	; 0x07
    bd90:	70 85       	ldd	r23, Z+8	; 0x08
    bd92:	81 85       	ldd	r24, Z+9	; 0x09
    bd94:	92 85       	ldd	r25, Z+10	; 0x0a
    bd96:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    bd9a:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    bd9e:	c6 2e       	mov	r12, r22
    bda0:	20 e0       	ldi	r18, 0x00	; 0
    bda2:	30 e0       	ldi	r19, 0x00	; 0
    bda4:	40 e0       	ldi	r20, 0x00	; 0
    bda6:	50 e4       	ldi	r21, 0x40	; 64
    bda8:	d4 01       	movw	r26, r8
    bdaa:	13 96       	adiw	r26, 0x03	; 3
    bdac:	6d 91       	ld	r22, X+
    bdae:	7d 91       	ld	r23, X+
    bdb0:	8d 91       	ld	r24, X+
    bdb2:	9c 91       	ld	r25, X
    bdb4:	16 97       	sbiw	r26, 0x06	; 6
    bdb6:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    bdba:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    bdbe:	04 e0       	ldi	r16, 0x04	; 4
    bdc0:	24 e0       	ldi	r18, 0x04	; 4
    bdc2:	4c 2d       	mov	r20, r12
    bdc4:	c5 01       	movw	r24, r10
    bdc6:	0e 94 26 5b 	call	0xb64c	; 0xb64c <collides_directional_tile>
    bdca:	88 23       	and	r24, r24
    bdcc:	99 f0       	breq	.+38     	; 0xbdf4 <collision_detect_shot+0x250>
		{
			hit = hit | HIT_ANGLE;
    bdce:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    bdd0:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    bdd2:	bd 81       	ldd	r27, Y+5	; 0x05
    bdd4:	b1 30       	cpi	r27, 0x01	; 1
    bdd6:	09 f4       	brne	.+2      	; 0xbdda <collision_detect_shot+0x236>
    bdd8:	88 c0       	rjmp	.+272    	; 0xbeea <collision_detect_shot+0x346>
    bdda:	f1 e0       	ldi	r31, 0x01	; 1
    bddc:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    bdde:	d2 01       	movw	r26, r4
    bde0:	ad 90       	ld	r10, X+
    bde2:	bd 90       	ld	r11, X+
    bde4:	2d 01       	movw	r4, r26
    bde6:	f5 01       	movw	r30, r10
    bde8:	e4 54       	subi	r30, 0x44	; 68
    bdea:	f3 4f       	sbci	r31, 0xF3	; 243
    bdec:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    bdee:	ee 20       	and	r14, r14
    bdf0:	81 f3       	breq	.-32     	; 0xbdd2 <collision_detect_shot+0x22e>
    bdf2:	c3 cf       	rjmp	.-122    	; 0xbd7a <collision_detect_shot+0x1d6>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    bdf4:	b1 e0       	ldi	r27, 0x01	; 1
    bdf6:	eb 12       	cpse	r14, r27
    bdf8:	3b c0       	rjmp	.+118    	; 0xbe70 <collision_detect_shot+0x2cc>
    bdfa:	c5 01       	movw	r24, r10
    bdfc:	b1 01       	movw	r22, r2
    bdfe:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    be02:	6d 5f       	subi	r22, 0xFD	; 253
    be04:	7f 4f       	sbci	r23, 0xFF	; 255
    be06:	e6 2e       	mov	r14, r22
    be08:	ee 0c       	add	r14, r14
    be0a:	ee 0c       	add	r14, r14
    be0c:	ee 0c       	add	r14, r14
    be0e:	08 2f       	mov	r16, r24
    be10:	00 0f       	add	r16, r16
    be12:	00 0f       	add	r16, r16
    be14:	00 0f       	add	r16, r16
    be16:	20 e0       	ldi	r18, 0x00	; 0
    be18:	30 e0       	ldi	r19, 0x00	; 0
    be1a:	40 e0       	ldi	r20, 0x00	; 0
    be1c:	50 e4       	ldi	r21, 0x40	; 64
    be1e:	f4 01       	movw	r30, r8
    be20:	67 81       	ldd	r22, Z+7	; 0x07
    be22:	70 85       	ldd	r23, Z+8	; 0x08
    be24:	81 85       	ldd	r24, Z+9	; 0x09
    be26:	92 85       	ldd	r25, Z+10	; 0x0a
    be28:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    be2c:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    be30:	b6 2e       	mov	r11, r22
    be32:	20 e0       	ldi	r18, 0x00	; 0
    be34:	30 e0       	ldi	r19, 0x00	; 0
    be36:	40 e0       	ldi	r20, 0x00	; 0
    be38:	50 e4       	ldi	r21, 0x40	; 64
    be3a:	d4 01       	movw	r26, r8
    be3c:	13 96       	adiw	r26, 0x03	; 3
    be3e:	6d 91       	ld	r22, X+
    be40:	7d 91       	ld	r23, X+
    be42:	8d 91       	ld	r24, X+
    be44:	9c 91       	ld	r25, X
    be46:	16 97       	sbiw	r26, 0x06	; 6
    be48:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    be4c:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    be50:	86 2f       	mov	r24, r22
    be52:	38 e0       	ldi	r19, 0x08	; 8
    be54:	a3 2e       	mov	r10, r19
    be56:	48 e0       	ldi	r20, 0x08	; 8
    be58:	c4 2e       	mov	r12, r20
    be5a:	24 e0       	ldi	r18, 0x04	; 4
    be5c:	44 e0       	ldi	r20, 0x04	; 4
    be5e:	6b 2d       	mov	r22, r11
    be60:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
    be64:	88 23       	and	r24, r24
    be66:	09 f4       	brne	.+2      	; 0xbe6a <collision_detect_shot+0x2c6>
    be68:	b4 cf       	rjmp	.-152    	; 0xbdd2 <collision_detect_shot+0x22e>
		{
			hit = hit | HIT_BRICK;
    be6a:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    be6c:	dd 80       	ldd	r13, Y+5	; 0x05
    be6e:	b1 cf       	rjmp	.-158    	; 0xbdd2 <collision_detect_shot+0x22e>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    be70:	b2 e0       	ldi	r27, 0x02	; 2
    be72:	eb 12       	cpse	r14, r27
    be74:	ae cf       	rjmp	.-164    	; 0xbdd2 <collision_detect_shot+0x22e>
    be76:	c5 01       	movw	r24, r10
    be78:	b1 01       	movw	r22, r2
    be7a:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    be7e:	6d 5f       	subi	r22, 0xFD	; 253
    be80:	7f 4f       	sbci	r23, 0xFF	; 255
    be82:	e6 2e       	mov	r14, r22
    be84:	ee 0c       	add	r14, r14
    be86:	ee 0c       	add	r14, r14
    be88:	ee 0c       	add	r14, r14
    be8a:	08 2f       	mov	r16, r24
    be8c:	00 0f       	add	r16, r16
    be8e:	00 0f       	add	r16, r16
    be90:	00 0f       	add	r16, r16
    be92:	20 e0       	ldi	r18, 0x00	; 0
    be94:	30 e0       	ldi	r19, 0x00	; 0
    be96:	40 e0       	ldi	r20, 0x00	; 0
    be98:	50 e4       	ldi	r21, 0x40	; 64
    be9a:	f4 01       	movw	r30, r8
    be9c:	67 81       	ldd	r22, Z+7	; 0x07
    be9e:	70 85       	ldd	r23, Z+8	; 0x08
    bea0:	81 85       	ldd	r24, Z+9	; 0x09
    bea2:	92 85       	ldd	r25, Z+10	; 0x0a
    bea4:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    bea8:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    beac:	b6 2e       	mov	r11, r22
    beae:	20 e0       	ldi	r18, 0x00	; 0
    beb0:	30 e0       	ldi	r19, 0x00	; 0
    beb2:	40 e0       	ldi	r20, 0x00	; 0
    beb4:	50 e4       	ldi	r21, 0x40	; 64
    beb6:	d4 01       	movw	r26, r8
    beb8:	13 96       	adiw	r26, 0x03	; 3
    beba:	6d 91       	ld	r22, X+
    bebc:	7d 91       	ld	r23, X+
    bebe:	8d 91       	ld	r24, X+
    bec0:	9c 91       	ld	r25, X
    bec2:	16 97       	sbiw	r26, 0x06	; 6
    bec4:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    bec8:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    becc:	86 2f       	mov	r24, r22
    bece:	98 e0       	ldi	r25, 0x08	; 8
    bed0:	a9 2e       	mov	r10, r25
    bed2:	28 e0       	ldi	r18, 0x08	; 8
    bed4:	c2 2e       	mov	r12, r18
    bed6:	24 e0       	ldi	r18, 0x04	; 4
    bed8:	44 e0       	ldi	r20, 0x04	; 4
    beda:	6b 2d       	mov	r22, r11
    bedc:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
    bee0:	88 23       	and	r24, r24
    bee2:	09 f4       	brne	.+2      	; 0xbee6 <collision_detect_shot+0x342>
    bee4:	76 cf       	rjmp	.-276    	; 0xbdd2 <collision_detect_shot+0x22e>
        {
		    hit = hit | HIT_METAL;
    bee6:	11 60       	ori	r17, 0x01	; 1
    bee8:	74 cf       	rjmp	.-280    	; 0xbdd2 <collision_detect_shot+0x22e>
        }
	}
	
	if (hit & HIT_ANGLE)
    beea:	12 ff       	sbrs	r17, 2
    beec:	25 c0       	rjmp	.+74     	; 0xbf38 <collision_detect_shot+0x394>
	{
		recoil_sprite_fine(player, &shot->shared);
    beee:	b4 01       	movw	r22, r8
    bef0:	c3 01       	movw	r24, r6
    bef2:	0e 94 b4 5a 	call	0xb568	; 0xb568 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    bef6:	b4 01       	movw	r22, r8
    bef8:	8f 2d       	mov	r24, r15
    befa:	0e 94 b1 5d 	call	0xbb62	; 0xbb62 <richochet>
		shot->rebounds--;
    befe:	f4 01       	movw	r30, r8
    bf00:	85 85       	ldd	r24, Z+13	; 0x0d
    bf02:	81 50       	subi	r24, 0x01	; 1
    bf04:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    bf06:	81 11       	cpse	r24, r1
    bf08:	0b c0       	rjmp	.+22     	; 0xbf20 <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    bf0a:	63 85       	ldd	r22, Z+11	; 0x0b
    bf0c:	c4 01       	movw	r24, r8
    bf0e:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
			player->active_shots--;
    bf12:	d3 01       	movw	r26, r6
    bf14:	51 96       	adiw	r26, 0x11	; 17
    bf16:	8c 91       	ld	r24, X
    bf18:	51 97       	sbiw	r26, 0x11	; 17
    bf1a:	81 50       	subi	r24, 0x01	; 1
    bf1c:	51 96       	adiw	r26, 0x11	; 17
    bf1e:	8c 93       	st	X, r24
		}
		SFX_METAL;
    bf20:	80 91 4f 0c 	lds	r24, 0x0C4F
    bf24:	80 fd       	sbrc	r24, 0
    bf26:	42 c0       	rjmp	.+132    	; 0xbfac <collision_detect_shot+0x408>
    bf28:	80 91 c0 0f 	lds	r24, 0x0FC0
    bf2c:	80 fd       	sbrc	r24, 0
    bf2e:	3e c0       	rjmp	.+124    	; 0xbfac <collision_detect_shot+0x408>
    bf30:	2f ef       	ldi	r18, 0xFF	; 255
    bf32:	47 e1       	ldi	r20, 0x17	; 23
    bf34:	64 e0       	ldi	r22, 0x04	; 4
    bf36:	32 c0       	rjmp	.+100    	; 0xbf9c <collision_detect_shot+0x3f8>
	}
	else if (hit & HIT_BRICK)
    bf38:	11 ff       	sbrs	r17, 1
    bf3a:	34 c0       	rjmp	.+104    	; 0xbfa4 <collision_detect_shot+0x400>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    bf3c:	fe 01       	movw	r30, r28
    bf3e:	31 96       	adiw	r30, 0x01	; 1
    bf40:	7f 01       	movw	r14, r30
    bf42:	ed 0c       	add	r14, r13
    bf44:	f1 1c       	adc	r15, r1
    bf46:	ed 0c       	add	r14, r13
    bf48:	f1 1c       	adc	r15, r1
    bf4a:	d7 01       	movw	r26, r14
    bf4c:	6d 91       	ld	r22, X+
    bf4e:	7c 91       	ld	r23, X
    bf50:	8d e1       	ldi	r24, 0x1D	; 29
    bf52:	9c e0       	ldi	r25, 0x0C	; 12
    bf54:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    bf58:	d7 01       	movw	r26, r14
    bf5a:	ed 91       	ld	r30, X+
    bf5c:	fc 91       	ld	r31, X
    bf5e:	e4 54       	subi	r30, 0x44	; 68
    bf60:	f3 4f       	sbci	r31, 0xF3	; 243
    bf62:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    bf64:	f4 01       	movw	r30, r8
    bf66:	84 85       	ldd	r24, Z+12	; 0x0c
    bf68:	81 50       	subi	r24, 0x01	; 1
    bf6a:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    bf6c:	81 11       	cpse	r24, r1
    bf6e:	0b c0       	rjmp	.+22     	; 0xbf86 <collision_detect_shot+0x3e2>
		{
			init_shot_state(shot, shot->shot_type);
    bf70:	63 85       	ldd	r22, Z+11	; 0x0b
    bf72:	c4 01       	movw	r24, r8
    bf74:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
			player->active_shots--;
    bf78:	d3 01       	movw	r26, r6
    bf7a:	51 96       	adiw	r26, 0x11	; 17
    bf7c:	8c 91       	ld	r24, X
    bf7e:	51 97       	sbiw	r26, 0x11	; 17
    bf80:	81 50       	subi	r24, 0x01	; 1
    bf82:	51 96       	adiw	r26, 0x11	; 17
    bf84:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    bf86:	80 91 4f 0c 	lds	r24, 0x0C4F
    bf8a:	80 fd       	sbrc	r24, 0
    bf8c:	0f c0       	rjmp	.+30     	; 0xbfac <collision_detect_shot+0x408>
    bf8e:	80 91 c0 0f 	lds	r24, 0x0FC0
    bf92:	80 fd       	sbrc	r24, 0
    bf94:	0b c0       	rjmp	.+22     	; 0xbfac <collision_detect_shot+0x408>
    bf96:	2f ed       	ldi	r18, 0xDF	; 223
    bf98:	47 e1       	ldi	r20, 0x17	; 23
    bf9a:	61 e0       	ldi	r22, 0x01	; 1
    bf9c:	84 e0       	ldi	r24, 0x04	; 4
    bf9e:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
    bfa2:	04 c0       	rjmp	.+8      	; 0xbfac <collision_detect_shot+0x408>
	}
	else if (hit & HIT_METAL)
    bfa4:	10 ff       	sbrs	r17, 0
    bfa6:	02 c0       	rjmp	.+4      	; 0xbfac <collision_detect_shot+0x408>
	{
        init_shot_state(shot, shot->shot_type);
    bfa8:	f4 01       	movw	r30, r8
    bfaa:	af cf       	rjmp	.-162    	; 0xbf0a <collision_detect_shot+0x366>
        player->active_shots--;
        SFX_METAL;
	}
}
    bfac:	0f 90       	pop	r0
    bfae:	0f 90       	pop	r0
    bfb0:	0f 90       	pop	r0
    bfb2:	0f 90       	pop	r0
    bfb4:	0f 90       	pop	r0
    bfb6:	df 91       	pop	r29
    bfb8:	cf 91       	pop	r28
    bfba:	1f 91       	pop	r17
    bfbc:	0f 91       	pop	r16
    bfbe:	ff 90       	pop	r15
    bfc0:	ef 90       	pop	r14
    bfc2:	df 90       	pop	r13
    bfc4:	cf 90       	pop	r12
    bfc6:	bf 90       	pop	r11
    bfc8:	af 90       	pop	r10
    bfca:	9f 90       	pop	r9
    bfcc:	8f 90       	pop	r8
    bfce:	7f 90       	pop	r7
    bfd0:	6f 90       	pop	r6
    bfd2:	5f 90       	pop	r5
    bfd4:	4f 90       	pop	r4
    bfd6:	3f 90       	pop	r3
    bfd8:	2f 90       	pop	r2
    bfda:	08 95       	ret

0000bfdc <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    bfdc:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    bfde:	70 e0       	ldi	r23, 0x00	; 0
    bfe0:	8e e1       	ldi	r24, 0x1E	; 30
    bfe2:	48 9f       	mul	r20, r24
    bfe4:	60 0d       	add	r22, r0
    bfe6:	71 1d       	adc	r23, r1
    bfe8:	11 24       	eor	r1, r1
	if (direction == D_UP)
    bfea:	21 11       	cpse	r18, r1
    bfec:	09 c0       	rjmp	.+18     	; 0xc000 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    bfee:	71 83       	std	Z+1, r23	; 0x01
    bff0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bff2:	cb 01       	movw	r24, r22
    bff4:	01 96       	adiw	r24, 0x01	; 1
    bff6:	93 83       	std	Z+3, r25	; 0x03
    bff8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    bffa:	6e 5f       	subi	r22, 0xFE	; 254
    bffc:	7f 4f       	sbci	r23, 0xFF	; 255
    bffe:	12 c0       	rjmp	.+36     	; 0xc024 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    c000:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    c002:	21 30       	cpi	r18, 0x01	; 1
    c004:	29 f4       	brne	.+10     	; 0xc010 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    c006:	02 96       	adiw	r24, 0x02	; 2
    c008:	91 83       	std	Z+1, r25	; 0x01
    c00a:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    c00c:	4e 96       	adiw	r24, 0x1e	; 30
    c00e:	06 c0       	rjmp	.+12     	; 0xc01c <get_interesting_tile_indexes+0x40>
    c010:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    c012:	22 30       	cpi	r18, 0x02	; 2
    c014:	51 f4       	brne	.+20     	; 0xc02a <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    c016:	91 83       	std	Z+1, r25	; 0x01
    c018:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    c01a:	01 96       	adiw	r24, 0x01	; 1
    c01c:	93 83       	std	Z+3, r25	; 0x03
    c01e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    c020:	62 5c       	subi	r22, 0xC2	; 194
    c022:	7f 4f       	sbci	r23, 0xFF	; 255
    c024:	75 83       	std	Z+5, r23	; 0x05
    c026:	64 83       	std	Z+4, r22	; 0x04
    c028:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    c02a:	71 83       	std	Z+1, r23	; 0x01
    c02c:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    c02e:	62 5e       	subi	r22, 0xE2	; 226
    c030:	7f 4f       	sbci	r23, 0xFF	; 255
    c032:	73 83       	std	Z+3, r23	; 0x03
    c034:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    c036:	95 83       	std	Z+5, r25	; 0x05
    c038:	84 83       	std	Z+4, r24	; 0x04
    c03a:	08 95       	ret

0000c03c <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    c03c:	1f 93       	push	r17
    c03e:	cf 93       	push	r28
    c040:	df 93       	push	r29
    c042:	fc 01       	movw	r30, r24
    c044:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    c046:	55 96       	adiw	r26, 0x15	; 21
    c048:	8c 91       	ld	r24, X
    c04a:	55 97       	sbiw	r26, 0x15	; 21
    c04c:	80 fd       	sbrc	r24, 0
    c04e:	13 c0       	rjmp	.+38     	; 0xc076 <explode_player+0x3a>
    c050:	12 2f       	mov	r17, r18
    c052:	64 2f       	mov	r22, r20
    c054:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    c056:	80 89       	ldd	r24, Z+16	; 0x10
    c058:	8f 5f       	subi	r24, 0xFF	; 255
    c05a:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    c05c:	87 85       	ldd	r24, Z+15	; 0x0f
    c05e:	8f 5f       	subi	r24, 0xFF	; 255
    c060:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    c062:	cf 01       	movw	r24, r30
    c064:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <render_score>
		kill_player(other_player, other_player_hud_x);
    c068:	61 2f       	mov	r22, r17
    c06a:	ce 01       	movw	r24, r28
	}
}
    c06c:	df 91       	pop	r29
    c06e:	cf 91       	pop	r28
    c070:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    c072:	0c 94 f9 5c 	jmp	0xb9f2	; 0xb9f2 <kill_player>
	}
}
    c076:	df 91       	pop	r29
    c078:	cf 91       	pop	r28
    c07a:	1f 91       	pop	r17
    c07c:	08 95       	ret

0000c07e <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    c07e:	cf 92       	push	r12
    c080:	df 92       	push	r13
    c082:	ef 92       	push	r14
    c084:	ff 92       	push	r15
    c086:	cf 93       	push	r28
    c088:	df 93       	push	r29
    c08a:	ec 01       	movw	r28, r24
    c08c:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    c08e:	98 81       	ld	r25, Y
    c090:	9d 7f       	andi	r25, 0xFD	; 253
    c092:	09 f0       	breq	.+2      	; 0xc096 <slide+0x18>
    c094:	54 c0       	rjmp	.+168    	; 0xc13e <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    c096:	ca 01       	movw	r24, r20
    c098:	6e e1       	ldi	r22, 0x1E	; 30
    c09a:	70 e0       	ldi	r23, 0x00	; 0
    c09c:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    c0a0:	88 0f       	add	r24, r24
    c0a2:	88 0f       	add	r24, r24
    c0a4:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    c0a6:	21 11       	cpse	r18, r1
    c0a8:	22 c0       	rjmp	.+68     	; 0xc0ee <slide+0x70>
    c0aa:	cb 80       	ldd	r12, Y+3	; 0x03
    c0ac:	dc 80       	ldd	r13, Y+4	; 0x04
    c0ae:	ed 80       	ldd	r14, Y+5	; 0x05
    c0b0:	fe 80       	ldd	r15, Y+6	; 0x06
    c0b2:	68 2f       	mov	r22, r24
    c0b4:	70 e0       	ldi	r23, 0x00	; 0
    c0b6:	80 e0       	ldi	r24, 0x00	; 0
    c0b8:	90 e0       	ldi	r25, 0x00	; 0
    c0ba:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c0be:	9b 01       	movw	r18, r22
    c0c0:	ac 01       	movw	r20, r24
    c0c2:	c7 01       	movw	r24, r14
    c0c4:	b6 01       	movw	r22, r12
    c0c6:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c0ca:	20 e0       	ldi	r18, 0x00	; 0
    c0cc:	30 e0       	ldi	r19, 0x00	; 0
    c0ce:	40 e8       	ldi	r20, 0x80	; 128
    c0d0:	50 e4       	ldi	r21, 0x40	; 64
    c0d2:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    c0d6:	18 16       	cp	r1, r24
    c0d8:	0c f0       	brlt	.+2      	; 0xc0dc <slide+0x5e>
    c0da:	85 c0       	rjmp	.+266    	; 0xc1e6 <slide+0x168>
			player->shared.x++; 
    c0dc:	20 e0       	ldi	r18, 0x00	; 0
    c0de:	30 e0       	ldi	r19, 0x00	; 0
    c0e0:	40 e8       	ldi	r20, 0x80	; 128
    c0e2:	5f e3       	ldi	r21, 0x3F	; 63
    c0e4:	c7 01       	movw	r24, r14
    c0e6:	b6 01       	movw	r22, r12
    c0e8:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    c0ec:	23 c0       	rjmp	.+70     	; 0xc134 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    c0ee:	22 30       	cpi	r18, 0x02	; 2
    c0f0:	09 f0       	breq	.+2      	; 0xc0f4 <slide+0x76>
    c0f2:	79 c0       	rjmp	.+242    	; 0xc1e6 <slide+0x168>
    c0f4:	cb 80       	ldd	r12, Y+3	; 0x03
    c0f6:	dc 80       	ldd	r13, Y+4	; 0x04
    c0f8:	ed 80       	ldd	r14, Y+5	; 0x05
    c0fa:	fe 80       	ldd	r15, Y+6	; 0x06
    c0fc:	68 2f       	mov	r22, r24
    c0fe:	70 e0       	ldi	r23, 0x00	; 0
    c100:	80 e0       	ldi	r24, 0x00	; 0
    c102:	90 e0       	ldi	r25, 0x00	; 0
    c104:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c108:	9b 01       	movw	r18, r22
    c10a:	ac 01       	movw	r20, r24
    c10c:	c7 01       	movw	r24, r14
    c10e:	b6 01       	movw	r22, r12
    c110:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c114:	20 e0       	ldi	r18, 0x00	; 0
    c116:	30 e0       	ldi	r19, 0x00	; 0
    c118:	40 e4       	ldi	r20, 0x40	; 64
    c11a:	51 ec       	ldi	r21, 0xC1	; 193
    c11c:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    c120:	87 ff       	sbrs	r24, 7
    c122:	61 c0       	rjmp	.+194    	; 0xc1e6 <slide+0x168>
			player->shared.x--;
    c124:	20 e0       	ldi	r18, 0x00	; 0
    c126:	30 e0       	ldi	r19, 0x00	; 0
    c128:	40 e8       	ldi	r20, 0x80	; 128
    c12a:	5f e3       	ldi	r21, 0x3F	; 63
    c12c:	c7 01       	movw	r24, r14
    c12e:	b6 01       	movw	r22, r12
    c130:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c134:	6b 83       	std	Y+3, r22	; 0x03
    c136:	7c 83       	std	Y+4, r23	; 0x04
    c138:	8d 83       	std	Y+5, r24	; 0x05
    c13a:	9e 83       	std	Y+6, r25	; 0x06
    c13c:	54 c0       	rjmp	.+168    	; 0xc1e6 <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    c13e:	ca 01       	movw	r24, r20
    c140:	6e e1       	ldi	r22, 0x1E	; 30
    c142:	70 e0       	ldi	r23, 0x00	; 0
    c144:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    c148:	ab 01       	movw	r20, r22
    c14a:	4d 5f       	subi	r20, 0xFD	; 253
    c14c:	5f 4f       	sbci	r21, 0xFF	; 255
    c14e:	44 0f       	add	r20, r20
    c150:	44 0f       	add	r20, r20
    c152:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    c154:	21 11       	cpse	r18, r1
    c156:	21 c0       	rjmp	.+66     	; 0xc19a <slide+0x11c>
    c158:	cf 80       	ldd	r12, Y+7	; 0x07
    c15a:	d8 84       	ldd	r13, Y+8	; 0x08
    c15c:	e9 84       	ldd	r14, Y+9	; 0x09
    c15e:	fa 84       	ldd	r15, Y+10	; 0x0a
    c160:	64 2f       	mov	r22, r20
    c162:	70 e0       	ldi	r23, 0x00	; 0
    c164:	80 e0       	ldi	r24, 0x00	; 0
    c166:	90 e0       	ldi	r25, 0x00	; 0
    c168:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c16c:	9b 01       	movw	r18, r22
    c16e:	ac 01       	movw	r20, r24
    c170:	c7 01       	movw	r24, r14
    c172:	b6 01       	movw	r22, r12
    c174:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c178:	20 e0       	ldi	r18, 0x00	; 0
    c17a:	30 e0       	ldi	r19, 0x00	; 0
    c17c:	40 e8       	ldi	r20, 0x80	; 128
    c17e:	50 e4       	ldi	r21, 0x40	; 64
    c180:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    c184:	18 16       	cp	r1, r24
    c186:	7c f5       	brge	.+94     	; 0xc1e6 <slide+0x168>
			player->shared.y++;
    c188:	20 e0       	ldi	r18, 0x00	; 0
    c18a:	30 e0       	ldi	r19, 0x00	; 0
    c18c:	40 e8       	ldi	r20, 0x80	; 128
    c18e:	5f e3       	ldi	r21, 0x3F	; 63
    c190:	c7 01       	movw	r24, r14
    c192:	b6 01       	movw	r22, r12
    c194:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    c198:	22 c0       	rjmp	.+68     	; 0xc1de <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    c19a:	22 30       	cpi	r18, 0x02	; 2
    c19c:	21 f5       	brne	.+72     	; 0xc1e6 <slide+0x168>
    c19e:	cf 80       	ldd	r12, Y+7	; 0x07
    c1a0:	d8 84       	ldd	r13, Y+8	; 0x08
    c1a2:	e9 84       	ldd	r14, Y+9	; 0x09
    c1a4:	fa 84       	ldd	r15, Y+10	; 0x0a
    c1a6:	64 2f       	mov	r22, r20
    c1a8:	70 e0       	ldi	r23, 0x00	; 0
    c1aa:	80 e0       	ldi	r24, 0x00	; 0
    c1ac:	90 e0       	ldi	r25, 0x00	; 0
    c1ae:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c1b2:	9b 01       	movw	r18, r22
    c1b4:	ac 01       	movw	r20, r24
    c1b6:	c7 01       	movw	r24, r14
    c1b8:	b6 01       	movw	r22, r12
    c1ba:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c1be:	20 e0       	ldi	r18, 0x00	; 0
    c1c0:	30 e0       	ldi	r19, 0x00	; 0
    c1c2:	40 e4       	ldi	r20, 0x40	; 64
    c1c4:	51 ec       	ldi	r21, 0xC1	; 193
    c1c6:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    c1ca:	87 ff       	sbrs	r24, 7
    c1cc:	0c c0       	rjmp	.+24     	; 0xc1e6 <slide+0x168>
			player->shared.y--;
    c1ce:	20 e0       	ldi	r18, 0x00	; 0
    c1d0:	30 e0       	ldi	r19, 0x00	; 0
    c1d2:	40 e8       	ldi	r20, 0x80	; 128
    c1d4:	5f e3       	ldi	r21, 0x3F	; 63
    c1d6:	c7 01       	movw	r24, r14
    c1d8:	b6 01       	movw	r22, r12
    c1da:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c1de:	6f 83       	std	Y+7, r22	; 0x07
    c1e0:	78 87       	std	Y+8, r23	; 0x08
    c1e2:	89 87       	std	Y+9, r24	; 0x09
    c1e4:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    c1e6:	df 91       	pop	r29
    c1e8:	cf 91       	pop	r28
    c1ea:	ff 90       	pop	r15
    c1ec:	ef 90       	pop	r14
    c1ee:	df 90       	pop	r13
    c1f0:	cf 90       	pop	r12
    c1f2:	08 95       	ret

0000c1f4 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    c1f4:	2f 92       	push	r2
    c1f6:	3f 92       	push	r3
    c1f8:	4f 92       	push	r4
    c1fa:	5f 92       	push	r5
    c1fc:	6f 92       	push	r6
    c1fe:	7f 92       	push	r7
    c200:	8f 92       	push	r8
    c202:	9f 92       	push	r9
    c204:	af 92       	push	r10
    c206:	bf 92       	push	r11
    c208:	cf 92       	push	r12
    c20a:	df 92       	push	r13
    c20c:	ef 92       	push	r14
    c20e:	ff 92       	push	r15
    c210:	0f 93       	push	r16
    c212:	1f 93       	push	r17
    c214:	cf 93       	push	r28
    c216:	df 93       	push	r29
    c218:	cd b7       	in	r28, 0x3d	; 61
    c21a:	de b7       	in	r29, 0x3e	; 62
    c21c:	2b 97       	sbiw	r28, 0x0b	; 11
    c21e:	0f b6       	in	r0, 0x3f	; 63
    c220:	f8 94       	cli
    c222:	de bf       	out	0x3e, r29	; 62
    c224:	0f be       	out	0x3f, r0	; 63
    c226:	cd bf       	out	0x3d, r28	; 61
    c228:	4c 01       	movw	r8, r24
    c22a:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    c22c:	1a 82       	std	Y+2, r1	; 0x02
    c22e:	19 82       	std	Y+1, r1	; 0x01
    c230:	1c 82       	std	Y+4, r1	; 0x04
    c232:	1b 82       	std	Y+3, r1	; 0x03
    c234:	1e 82       	std	Y+6, r1	; 0x06
    c236:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    c238:	20 e0       	ldi	r18, 0x00	; 0
    c23a:	30 e0       	ldi	r19, 0x00	; 0
    c23c:	40 e0       	ldi	r20, 0x00	; 0
    c23e:	5e e3       	ldi	r21, 0x3E	; 62
    c240:	dc 01       	movw	r26, r24
    c242:	17 96       	adiw	r26, 0x07	; 7
    c244:	6d 91       	ld	r22, X+
    c246:	7d 91       	ld	r23, X+
    c248:	8d 91       	ld	r24, X+
    c24a:	9c 91       	ld	r25, X
    c24c:	1a 97       	sbiw	r26, 0x0a	; 10
    c24e:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    c252:	20 e0       	ldi	r18, 0x00	; 0
    c254:	30 e0       	ldi	r19, 0x00	; 0
    c256:	40 e4       	ldi	r20, 0x40	; 64
    c258:	50 e4       	ldi	r21, 0x40	; 64
    c25a:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c25e:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c262:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    c264:	20 e0       	ldi	r18, 0x00	; 0
    c266:	30 e0       	ldi	r19, 0x00	; 0
    c268:	40 e0       	ldi	r20, 0x00	; 0
    c26a:	5e e3       	ldi	r21, 0x3E	; 62
    c26c:	f4 01       	movw	r30, r8
    c26e:	63 81       	ldd	r22, Z+3	; 0x03
    c270:	74 81       	ldd	r23, Z+4	; 0x04
    c272:	85 81       	ldd	r24, Z+5	; 0x05
    c274:	96 81       	ldd	r25, Z+6	; 0x06
    c276:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    c27a:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    c27e:	d4 01       	movw	r26, r8
    c280:	2c 91       	ld	r18, X
    c282:	40 2f       	mov	r20, r16
    c284:	ce 01       	movw	r24, r28
    c286:	01 96       	adiw	r24, 0x01	; 1
    c288:	0e 94 ee 5f 	call	0xbfdc	; 0xbfdc <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c28c:	c4 01       	movw	r24, r8
    c28e:	0e 94 77 5c 	call	0xb8ee	; 0xb8ee <collision_detect_boundries>
    c292:	88 23       	and	r24, r24
    c294:	39 f0       	breq	.+14     	; 0xc2a4 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    c296:	c4 01       	movw	r24, r8
    c298:	0e 94 5a 5a 	call	0xb4b4	; 0xb4b4 <recoil_sprite>
		player->shared.speed = 0;
    c29c:	f4 01       	movw	r30, r8
    c29e:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    c2a0:	d1 2c       	mov	r13, r1
    c2a2:	2c c1       	rjmp	.+600    	; 0xc4fc <collision_detect_player+0x308>
    c2a4:	ce 01       	movw	r24, r28
    c2a6:	01 96       	adiw	r24, 0x01	; 1
    c2a8:	98 87       	std	Y+8, r25	; 0x08
    c2aa:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    c2ac:	41 2c       	mov	r4, r1
    c2ae:	51 2c       	mov	r5, r1
    c2b0:	b1 2c       	mov	r11, r1
    c2b2:	d1 2c       	mov	r13, r1
    c2b4:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c2b6:	9b e0       	ldi	r25, 0x0B	; 11
    c2b8:	91 0f       	add	r25, r17
    c2ba:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c2bc:	16 5f       	subi	r17, 0xF6	; 246
    c2be:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    c2c0:	af 81       	ldd	r26, Y+7	; 0x07
    c2c2:	b8 85       	ldd	r27, Y+8	; 0x08
    c2c4:	6d 90       	ld	r6, X+
    c2c6:	7d 90       	ld	r7, X+
    c2c8:	b8 87       	std	Y+8, r27	; 0x08
    c2ca:	af 83       	std	Y+7, r26	; 0x07
    c2cc:	c3 01       	movw	r24, r6
    c2ce:	6e e1       	ldi	r22, 0x1E	; 30
    c2d0:	70 e0       	ldi	r23, 0x00	; 0
    c2d2:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    c2d6:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    c2d8:	13 e0       	ldi	r17, 0x03	; 3
    c2da:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    c2dc:	c3 01       	movw	r24, r6
    c2de:	0e 94 fc 5a 	call	0xb5f8	; 0xb5f8 <solid_directional_tile>
    c2e2:	88 23       	and	r24, r24
    c2e4:	51 f1       	breq	.+84     	; 0xc33a <collision_detect_player+0x146>
    c2e6:	f4 01       	movw	r30, r8
    c2e8:	67 81       	ldd	r22, Z+7	; 0x07
    c2ea:	70 85       	ldd	r23, Z+8	; 0x08
    c2ec:	81 85       	ldd	r24, Z+9	; 0x09
    c2ee:	92 85       	ldd	r25, Z+10	; 0x0a
    c2f0:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c2f4:	46 2f       	mov	r20, r22
    c2f6:	d4 01       	movw	r26, r8
    c2f8:	13 96       	adiw	r26, 0x03	; 3
    c2fa:	6d 91       	ld	r22, X+
    c2fc:	7d 91       	ld	r23, X+
    c2fe:	8d 91       	ld	r24, X+
    c300:	9c 91       	ld	r25, X
    c302:	16 97       	sbiw	r26, 0x06	; 6
    c304:	4b 87       	std	Y+11, r20	; 0x0b
    c306:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c30a:	00 e1       	ldi	r16, 0x10	; 16
    c30c:	20 e1       	ldi	r18, 0x10	; 16
    c30e:	4b 85       	ldd	r20, Y+11	; 0x0b
    c310:	c3 01       	movw	r24, r6
    c312:	0e 94 26 5b 	call	0xb64c	; 0xb64c <collides_directional_tile>
    c316:	88 23       	and	r24, r24
    c318:	81 f0       	breq	.+32     	; 0xc33a <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    c31a:	f4 01       	movw	r30, r8
    c31c:	83 85       	ldd	r24, Z+11	; 0x0b
    c31e:	89 30       	cpi	r24, 0x09	; 9
    c320:	21 f4       	brne	.+8      	; 0xc32a <collision_detect_player+0x136>
    c322:	c4 01       	movw	r24, r8
    c324:	0e 94 5a 5a 	call	0xb4b4	; 0xb4b4 <recoil_sprite>
    c328:	04 c0       	rjmp	.+8      	; 0xc332 <collision_detect_player+0x13e>
    c32a:	b4 01       	movw	r22, r8
    c32c:	c4 01       	movw	r24, r8
    c32e:	0e 94 b4 5a 	call	0xb568	; 0xb568 <recoil_sprite_fine>
			player->shared.speed = 0;
    c332:	d4 01       	movw	r26, r8
    c334:	11 96       	adiw	r26, 0x01	; 1
    c336:	1c 92       	st	X, r1
    c338:	bc c0       	rjmp	.+376    	; 0xc4b2 <collision_detect_player+0x2be>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c33a:	c3 01       	movw	r24, r6
    c33c:	0e 94 ea 5a 	call	0xb5d4	; 0xb5d4 <solid_square_tile>
    c340:	88 23       	and	r24, r24
    c342:	51 f1       	breq	.+84     	; 0xc398 <collision_detect_player+0x1a4>
    c344:	f4 01       	movw	r30, r8
    c346:	67 81       	ldd	r22, Z+7	; 0x07
    c348:	70 85       	ldd	r23, Z+8	; 0x08
    c34a:	81 85       	ldd	r24, Z+9	; 0x09
    c34c:	92 85       	ldd	r25, Z+10	; 0x0a
    c34e:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c352:	26 2e       	mov	r2, r22
    c354:	d4 01       	movw	r26, r8
    c356:	13 96       	adiw	r26, 0x03	; 3
    c358:	6d 91       	ld	r22, X+
    c35a:	7d 91       	ld	r23, X+
    c35c:	8d 91       	ld	r24, X+
    c35e:	9c 91       	ld	r25, X
    c360:	16 97       	sbiw	r26, 0x06	; 6
    c362:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c366:	86 2f       	mov	r24, r22
    c368:	38 e0       	ldi	r19, 0x08	; 8
    c36a:	a3 2e       	mov	r10, r19
    c36c:	48 e0       	ldi	r20, 0x08	; 8
    c36e:	c4 2e       	mov	r12, r20
    c370:	e1 2e       	mov	r14, r17
    c372:	ee 0c       	add	r14, r14
    c374:	ee 0c       	add	r14, r14
    c376:	ee 0c       	add	r14, r14
    c378:	0f 2d       	mov	r16, r15
    c37a:	00 0f       	add	r16, r16
    c37c:	00 0f       	add	r16, r16
    c37e:	00 0f       	add	r16, r16
    c380:	20 e1       	ldi	r18, 0x10	; 16
    c382:	40 e1       	ldi	r20, 0x10	; 16
    c384:	62 2d       	mov	r22, r2
    c386:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
    c38a:	88 23       	and	r24, r24
    c38c:	29 f0       	breq	.+10     	; 0xc398 <collision_detect_player+0x1a4>
		{
			collision_count++;
    c38e:	53 94       	inc	r5
			collision_tile = i;
			player->shared.speed = 0;
    c390:	f4 01       	movw	r30, r8
    c392:	11 82       	std	Z+1, r1	; 0x01
    c394:	b4 2c       	mov	r11, r4
    c396:	8d c0       	rjmp	.+282    	; 0xc4b2 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c398:	f3 01       	movw	r30, r6
    c39a:	e4 54       	subi	r30, 0x44	; 68
    c39c:	f3 4f       	sbci	r31, 0xF3	; 243
    c39e:	81 81       	ldd	r24, Z+1	; 0x01
    c3a0:	8d 34       	cpi	r24, 0x4D	; 77
    c3a2:	59 f5       	brne	.+86     	; 0xc3fa <collision_detect_player+0x206>
    c3a4:	e1 2e       	mov	r14, r17
    c3a6:	ee 0c       	add	r14, r14
    c3a8:	ee 0c       	add	r14, r14
    c3aa:	ee 0c       	add	r14, r14
    c3ac:	0f 2d       	mov	r16, r15
    c3ae:	00 0f       	add	r16, r16
    c3b0:	00 0f       	add	r16, r16
    c3b2:	00 0f       	add	r16, r16
    c3b4:	d4 01       	movw	r26, r8
    c3b6:	17 96       	adiw	r26, 0x07	; 7
    c3b8:	6d 91       	ld	r22, X+
    c3ba:	7d 91       	ld	r23, X+
    c3bc:	8d 91       	ld	r24, X+
    c3be:	9c 91       	ld	r25, X
    c3c0:	1a 97       	sbiw	r26, 0x0a	; 10
    c3c2:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c3c6:	76 2e       	mov	r7, r22
    c3c8:	f4 01       	movw	r30, r8
    c3ca:	63 81       	ldd	r22, Z+3	; 0x03
    c3cc:	74 81       	ldd	r23, Z+4	; 0x04
    c3ce:	85 81       	ldd	r24, Z+5	; 0x05
    c3d0:	96 81       	ldd	r25, Z+6	; 0x06
    c3d2:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c3d6:	86 2f       	mov	r24, r22
    c3d8:	98 e0       	ldi	r25, 0x08	; 8
    c3da:	a9 2e       	mov	r10, r25
    c3dc:	28 e0       	ldi	r18, 0x08	; 8
    c3de:	c2 2e       	mov	r12, r18
    c3e0:	20 e1       	ldi	r18, 0x10	; 16
    c3e2:	40 e1       	ldi	r20, 0x10	; 16
    c3e4:	67 2d       	mov	r22, r7
    c3e6:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <LBCollides>
    c3ea:	88 23       	and	r24, r24
    c3ec:	09 f4       	brne	.+2      	; 0xc3f0 <collision_detect_player+0x1fc>
    c3ee:	61 c0       	rjmp	.+194    	; 0xc4b2 <collision_detect_player+0x2be>
		{
			player->max_speed = WATER_SPEED;
    c3f0:	e9 e1       	ldi	r30, 0x19	; 25
    c3f2:	d4 01       	movw	r26, r8
    c3f4:	59 96       	adiw	r26, 0x19	; 25
    c3f6:	ec 93       	st	X, r30
    c3f8:	67 c0       	rjmp	.+206    	; 0xc4c8 <collision_detect_player+0x2d4>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    c3fa:	8c 32       	cpi	r24, 0x2C	; 44
    c3fc:	99 f2       	breq	.-90     	; 0xc3a4 <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    c3fe:	87 30       	cpi	r24, 0x07	; 7
    c400:	99 f4       	brne	.+38     	; 0xc428 <collision_detect_player+0x234>
    c402:	d4 01       	movw	r26, r8
    c404:	55 96       	adiw	r26, 0x15	; 21
    c406:	8c 91       	ld	r24, X
    c408:	55 97       	sbiw	r26, 0x15	; 21
    c40a:	80 fd       	sbrc	r24, 0
    c40c:	52 c0       	rjmp	.+164    	; 0xc4b2 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c40e:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c410:	e1 e4       	ldi	r30, 0x41	; 65
    c412:	59 96       	adiw	r26, 0x19	; 25
    c414:	ec 93       	st	X, r30
    c416:	59 97       	sbiw	r26, 0x19	; 25
			player->has_over_speed = true;
    c418:	f1 e0       	ldi	r31, 0x01	; 1
    c41a:	5b 96       	adiw	r26, 0x1b	; 27
    c41c:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c41e:	46 e0       	ldi	r20, 0x06	; 6
    c420:	5e e7       	ldi	r21, 0x7E	; 126
    c422:	61 e0       	ldi	r22, 0x01	; 1
    c424:	8a 85       	ldd	r24, Y+10	; 0x0a
    c426:	10 c0       	rjmp	.+32     	; 0xc448 <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c428:	89 30       	cpi	r24, 0x09	; 9
    c42a:	29 f5       	brne	.+74     	; 0xc476 <collision_detect_player+0x282>
    c42c:	d4 01       	movw	r26, r8
    c42e:	55 96       	adiw	r26, 0x15	; 21
    c430:	8c 91       	ld	r24, X
    c432:	55 97       	sbiw	r26, 0x15	; 21
    c434:	80 fd       	sbrc	r24, 0
    c436:	3d c0       	rjmp	.+122    	; 0xc4b2 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c438:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c43a:	e1 e0       	ldi	r30, 0x01	; 1
    c43c:	5a 96       	adiw	r26, 0x1a	; 26
    c43e:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c440:	40 e0       	ldi	r20, 0x00	; 0
    c442:	5e e7       	ldi	r21, 0x7E	; 126
    c444:	61 e0       	ldi	r22, 0x01	; 1
    c446:	89 85       	ldd	r24, Y+9	; 0x09
    c448:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
			SetTile(tile_x, tile_y, 0);
    c44c:	40 e0       	ldi	r20, 0x00	; 0
    c44e:	50 e0       	ldi	r21, 0x00	; 0
    c450:	61 2f       	mov	r22, r17
    c452:	8f 2d       	mov	r24, r15
    c454:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
			SFX_ITEM;
    c458:	80 91 4f 0c 	lds	r24, 0x0C4F
    c45c:	80 fd       	sbrc	r24, 0
    c45e:	29 c0       	rjmp	.+82     	; 0xc4b2 <collision_detect_player+0x2be>
    c460:	80 91 c0 0f 	lds	r24, 0x0FC0
    c464:	80 fd       	sbrc	r24, 0
    c466:	25 c0       	rjmp	.+74     	; 0xc4b2 <collision_detect_player+0x2be>
    c468:	2f ef       	ldi	r18, 0xFF	; 255
    c46a:	47 e1       	ldi	r20, 0x17	; 23
    c46c:	63 e0       	ldi	r22, 0x03	; 3
    c46e:	84 e0       	ldi	r24, 0x04	; 4
    c470:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
    c474:	1e c0       	rjmp	.+60     	; 0xc4b2 <collision_detect_player+0x2be>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c476:	88 30       	cpi	r24, 0x08	; 8
    c478:	e1 f4       	brne	.+56     	; 0xc4b2 <collision_detect_player+0x2be>
    c47a:	d4 01       	movw	r26, r8
    c47c:	55 96       	adiw	r26, 0x15	; 21
    c47e:	8c 91       	ld	r24, X
    c480:	80 fd       	sbrc	r24, 0
    c482:	17 c0       	rjmp	.+46     	; 0xc4b2 <collision_detect_player+0x2be>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c484:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    c486:	40 e0       	ldi	r20, 0x00	; 0
    c488:	50 e0       	ldi	r21, 0x00	; 0
    c48a:	61 2f       	mov	r22, r17
    c48c:	8f 2d       	mov	r24, r15
    c48e:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
			SFX_ITEM;
    c492:	80 91 4f 0c 	lds	r24, 0x0C4F
    c496:	80 fd       	sbrc	r24, 0
    c498:	0a c0       	rjmp	.+20     	; 0xc4ae <collision_detect_player+0x2ba>
    c49a:	80 91 c0 0f 	lds	r24, 0x0FC0
    c49e:	80 fd       	sbrc	r24, 0
    c4a0:	06 c0       	rjmp	.+12     	; 0xc4ae <collision_detect_player+0x2ba>
    c4a2:	2f ef       	ldi	r18, 0xFF	; 255
    c4a4:	47 e1       	ldi	r20, 0x17	; 23
    c4a6:	63 e0       	ldi	r22, 0x03	; 3
    c4a8:	84 e0       	ldi	r24, 0x04	; 4
    c4aa:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
			explode = 1;
    c4ae:	dd 24       	eor	r13, r13
    c4b0:	d3 94       	inc	r13
		}
		
		if (!hit_water)
    c4b2:	31 10       	cpse	r3, r1
    c4b4:	09 c0       	rjmp	.+18     	; 0xc4c8 <collision_detect_player+0x2d4>
		{
			player->max_speed = MAX_SPEED;
    c4b6:	82 e3       	ldi	r24, 0x32	; 50
    c4b8:	f4 01       	movw	r30, r8
    c4ba:	81 8f       	std	Z+25, r24	; 0x19
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    c4bc:	83 8d       	ldd	r24, Z+27	; 0x1b
    c4be:	88 23       	and	r24, r24
    c4c0:	29 f0       	breq	.+10     	; 0xc4cc <collision_detect_player+0x2d8>
    c4c2:	91 e4       	ldi	r25, 0x41	; 65
    c4c4:	91 8f       	std	Z+25, r25	; 0x19
    c4c6:	02 c0       	rjmp	.+4      	; 0xc4cc <collision_detect_player+0x2d8>
    c4c8:	33 24       	eor	r3, r3
    c4ca:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c4cc:	43 94       	inc	r4
    c4ce:	a3 e0       	ldi	r26, 0x03	; 3
    c4d0:	4a 12       	cpse	r4, r26
    c4d2:	f6 ce       	rjmp	.-532    	; 0xc2c0 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    c4d4:	55 20       	and	r5, r5
    c4d6:	91 f0       	breq	.+36     	; 0xc4fc <collision_detect_player+0x308>
    c4d8:	c4 01       	movw	r24, r8
    c4da:	0e 94 5a 5a 	call	0xb4b4	; 0xb4b4 <recoil_sprite>
	if (collision_count == 1)
    c4de:	b1 e0       	ldi	r27, 0x01	; 1
    c4e0:	5b 12       	cpse	r5, r27
    c4e2:	0c c0       	rjmp	.+24     	; 0xc4fc <collision_detect_player+0x308>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    c4e4:	fe 01       	movw	r30, r28
    c4e6:	31 96       	adiw	r30, 0x01	; 1
    c4e8:	eb 0d       	add	r30, r11
    c4ea:	f1 1d       	adc	r31, r1
    c4ec:	eb 0d       	add	r30, r11
    c4ee:	f1 1d       	adc	r31, r1
    c4f0:	40 81       	ld	r20, Z
    c4f2:	51 81       	ldd	r21, Z+1	; 0x01
    c4f4:	6b 2d       	mov	r22, r11
    c4f6:	c4 01       	movw	r24, r8
    c4f8:	0e 94 3f 60 	call	0xc07e	; 0xc07e <slide>
	}
	return explode;
}
    c4fc:	8d 2d       	mov	r24, r13
    c4fe:	2b 96       	adiw	r28, 0x0b	; 11
    c500:	0f b6       	in	r0, 0x3f	; 63
    c502:	f8 94       	cli
    c504:	de bf       	out	0x3e, r29	; 62
    c506:	0f be       	out	0x3f, r0	; 63
    c508:	cd bf       	out	0x3d, r28	; 61
    c50a:	df 91       	pop	r29
    c50c:	cf 91       	pop	r28
    c50e:	1f 91       	pop	r17
    c510:	0f 91       	pop	r16
    c512:	ff 90       	pop	r15
    c514:	ef 90       	pop	r14
    c516:	df 90       	pop	r13
    c518:	cf 90       	pop	r12
    c51a:	bf 90       	pop	r11
    c51c:	af 90       	pop	r10
    c51e:	9f 90       	pop	r9
    c520:	8f 90       	pop	r8
    c522:	7f 90       	pop	r7
    c524:	6f 90       	pop	r6
    c526:	5f 90       	pop	r5
    c528:	4f 90       	pop	r4
    c52a:	3f 90       	pop	r3
    c52c:	2f 90       	pop	r2
    c52e:	08 95       	ret

0000c530 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c530:	ef 92       	push	r14
    c532:	ff 92       	push	r15
    c534:	1f 93       	push	r17
    c536:	cf 93       	push	r28
    c538:	df 93       	push	r29
    c53a:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c53c:	c0 e0       	ldi	r28, 0x00	; 0
    c53e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c540:	8e e1       	ldi	r24, 0x1E	; 30
    c542:	e8 2e       	mov	r14, r24
    c544:	f1 2c       	mov	r15, r1
    c546:	ce 01       	movw	r24, r28
    c548:	b7 01       	movw	r22, r14
    c54a:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
		y = 3 + i / 30;
    c54e:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c550:	11 23       	and	r17, r17
    c552:	19 f0       	breq	.+6      	; 0xc55a <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c554:	43 ea       	ldi	r20, 0xA3	; 163
    c556:	5e e7       	ldi	r21, 0x7E	; 126
    c558:	2d c0       	rjmp	.+90     	; 0xc5b4 <load_level_tiles+0x84>
    c55a:	fe 01       	movw	r30, r28
    c55c:	e4 54       	subi	r30, 0x44	; 68
    c55e:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c560:	91 81       	ldd	r25, Z+1	; 0x01
    c562:	97 30       	cpi	r25, 0x07	; 7
    c564:	99 f1       	breq	.+102    	; 0xc5cc <load_level_tiles+0x9c>
    c566:	88 f4       	brcc	.+34     	; 0xc58a <load_level_tiles+0x5a>
    c568:	93 30       	cpi	r25, 0x03	; 3
    c56a:	39 f1       	breq	.+78     	; 0xc5ba <load_level_tiles+0x8a>
    c56c:	40 f4       	brcc	.+16     	; 0xc57e <load_level_tiles+0x4e>
    c56e:	91 30       	cpi	r25, 0x01	; 1
    c570:	f9 f0       	breq	.+62     	; 0xc5b0 <load_level_tiles+0x80>
    c572:	92 30       	cpi	r25, 0x02	; 2
    c574:	09 f0       	breq	.+2      	; 0xc578 <load_level_tiles+0x48>
    c576:	3f c0       	rjmp	.+126    	; 0xc5f6 <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c578:	49 e0       	ldi	r20, 0x09	; 9
    c57a:	5e e7       	ldi	r21, 0x7E	; 126
    c57c:	1b c0       	rjmp	.+54     	; 0xc5b4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c57e:	95 30       	cpi	r25, 0x05	; 5
    c580:	f9 f0       	breq	.+62     	; 0xc5c0 <load_level_tiles+0x90>
    c582:	08 f5       	brcc	.+66     	; 0xc5c6 <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c584:	4e ee       	ldi	r20, 0xEE	; 238
    c586:	5d e7       	ldi	r21, 0x7D	; 125
    c588:	15 c0       	rjmp	.+42     	; 0xc5b4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c58a:	9c 32       	cpi	r25, 0x2C	; 44
    c58c:	59 f1       	breq	.+86     	; 0xc5e4 <load_level_tiles+0xb4>
    c58e:	38 f4       	brcc	.+14     	; 0xc59e <load_level_tiles+0x6e>
    c590:	98 30       	cpi	r25, 0x08	; 8
    c592:	f9 f0       	breq	.+62     	; 0xc5d2 <load_level_tiles+0xa2>
    c594:	99 30       	cpi	r25, 0x09	; 9
    c596:	79 f5       	brne	.+94     	; 0xc5f6 <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c598:	40 e0       	ldi	r20, 0x00	; 0
    c59a:	5e e7       	ldi	r21, 0x7E	; 126
    c59c:	0b c0       	rjmp	.+22     	; 0xc5b4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c59e:	92 34       	cpi	r25, 0x42	; 66
    c5a0:	d9 f0       	breq	.+54     	; 0xc5d8 <load_level_tiles+0xa8>
    c5a2:	9d 34       	cpi	r25, 0x4D	; 77
    c5a4:	e1 f0       	breq	.+56     	; 0xc5de <load_level_tiles+0xae>
    c5a6:	97 33       	cpi	r25, 0x37	; 55
    c5a8:	31 f5       	brne	.+76     	; 0xc5f6 <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    c5aa:	42 ee       	ldi	r20, 0xE2	; 226
    c5ac:	5d e7       	ldi	r21, 0x7D	; 125
    c5ae:	02 c0       	rjmp	.+4      	; 0xc5b4 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c5b0:	4c e0       	ldi	r20, 0x0C	; 12
    c5b2:	5e e7       	ldi	r21, 0x7E	; 126
    c5b4:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
    c5b8:	22 c0       	rjmp	.+68     	; 0xc5fe <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c5ba:	44 ef       	ldi	r20, 0xF4	; 244
    c5bc:	5d e7       	ldi	r21, 0x7D	; 125
    c5be:	fa cf       	rjmp	.-12     	; 0xc5b4 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c5c0:	4b ee       	ldi	r20, 0xEB	; 235
    c5c2:	5d e7       	ldi	r21, 0x7D	; 125
    c5c4:	f7 cf       	rjmp	.-18     	; 0xc5b4 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c5c6:	41 ef       	ldi	r20, 0xF1	; 241
    c5c8:	5d e7       	ldi	r21, 0x7D	; 125
    c5ca:	f4 cf       	rjmp	.-24     	; 0xc5b4 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c5cc:	46 e0       	ldi	r20, 0x06	; 6
    c5ce:	5e e7       	ldi	r21, 0x7E	; 126
    c5d0:	f1 cf       	rjmp	.-30     	; 0xc5b4 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c5d2:	43 e0       	ldi	r20, 0x03	; 3
    c5d4:	5e e7       	ldi	r21, 0x7E	; 126
    c5d6:	ee cf       	rjmp	.-36     	; 0xc5b4 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c5d8:	45 ee       	ldi	r20, 0xE5	; 229
    c5da:	5d e7       	ldi	r21, 0x7D	; 125
    c5dc:	eb cf       	rjmp	.-42     	; 0xc5b4 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    c5de:	48 ee       	ldi	r20, 0xE8	; 232
    c5e0:	5d e7       	ldi	r21, 0x7D	; 125
    c5e2:	e8 cf       	rjmp	.-48     	; 0xc5b4 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    c5e4:	48 ee       	ldi	r20, 0xE8	; 232
    c5e6:	5d e7       	ldi	r21, 0x7D	; 125
    c5e8:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
    c5ec:	d0 93 41 10 	sts	0x1041, r29
    c5f0:	c0 93 40 10 	sts	0x1040, r28
    c5f4:	04 c0       	rjmp	.+8      	; 0xc5fe <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c5f6:	40 e0       	ldi	r20, 0x00	; 0
    c5f8:	50 e0       	ldi	r21, 0x00	; 0
    c5fa:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c5fe:	21 96       	adiw	r28, 0x01	; 1
    c600:	ce 3e       	cpi	r28, 0xEE	; 238
    c602:	82 e0       	ldi	r24, 0x02	; 2
    c604:	d8 07       	cpc	r29, r24
    c606:	09 f0       	breq	.+2      	; 0xc60a <load_level_tiles+0xda>
    c608:	9e cf       	rjmp	.-196    	; 0xc546 <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c60a:	df 91       	pop	r29
    c60c:	cf 91       	pop	r28
    c60e:	1f 91       	pop	r17
    c610:	ff 90       	pop	r15
    c612:	ef 90       	pop	r14
    c614:	08 95       	ret

0000c616 <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    c616:	cf 93       	push	r28
    c618:	df 93       	push	r29
    c61a:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    c61c:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    c61e:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    c620:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    c622:	1b 8e       	std	Y+27, r1	; 0x1b
	p->has_rocket = false;
    c624:	1a 8e       	std	Y+26, r1	; 0x1a
	p->max_speed = MAX_SPEED;
    c626:	82 e3       	ldi	r24, 0x32	; 50
    c628:	89 8f       	std	Y+25, r24	; 0x19
	player_init_shot_state(p);
    c62a:	ce 01       	movw	r24, r28
    c62c:	0e 94 92 56 	call	0xad24	; 0xad24 <player_init_shot_state>
	player_spawn(p);
    c630:	ce 01       	movw	r24, r28
}
    c632:	df 91       	pop	r29
    c634:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    c636:	0c 94 c3 56 	jmp	0xad86	; 0xad86 <player_spawn>

0000c63a <load_level>:
}

void load_level(int level_number)
{
    c63a:	8f 92       	push	r8
    c63c:	9f 92       	push	r9
    c63e:	af 92       	push	r10
    c640:	bf 92       	push	r11
    c642:	cf 92       	push	r12
    c644:	df 92       	push	r13
    c646:	ef 92       	push	r14
    c648:	ff 92       	push	r15
    c64a:	0f 93       	push	r16
    c64c:	1f 93       	push	r17
    c64e:	cf 93       	push	r28
    c650:	df 93       	push	r29
    c652:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c654:	8e ee       	ldi	r24, 0xEE	; 238
    c656:	92 e0       	ldi	r25, 0x02	; 2
    c658:	c8 9f       	mul	r28, r24
    c65a:	70 01       	movw	r14, r0
    c65c:	c9 9f       	mul	r28, r25
    c65e:	f0 0c       	add	r15, r0
    c660:	d8 9f       	mul	r29, r24
    c662:	f0 0c       	add	r15, r0
    c664:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    c666:	10 92 15 0c 	sts	0x0C15, r1
    c66a:	10 92 14 0c 	sts	0x0C14, r1
	init_tile_animations(&tile_animations);
    c66e:	8d e1       	ldi	r24, 0x1D	; 29
    c670:	9c e0       	ldi	r25, 0x0C	; 12
    c672:	0e 94 49 55 	call	0xaa92	; 0xaa92 <init_tile_animations>
	init_scope_animation(&scope_animation);
    c676:	84 e3       	ldi	r24, 0x34	; 52
    c678:	90 e1       	ldi	r25, 0x10	; 16
    c67a:	0e 94 70 55 	call	0xaae0	; 0xaae0 <init_scope_animation>
	init_sub_animation(&sub_animation);
    c67e:	86 e2       	ldi	r24, 0x26	; 38
    c680:	90 e1       	ldi	r25, 0x10	; 16
    c682:	0e 94 88 55 	call	0xab10	; 0xab10 <init_sub_animation>
	game.current_screen = LEVEL;
    c686:	83 e0       	ldi	r24, 0x03	; 3
    c688:	80 93 07 0c 	sts	0x0C07, r24
	clear_sprites();
    c68c:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
	game.current_level = level_number;
    c690:	c0 93 08 0c 	sts	0x0C08, r28
    c694:	8d eb       	ldi	r24, 0xBD	; 189
    c696:	a8 2e       	mov	r10, r24
    c698:	8c e0       	ldi	r24, 0x0C	; 12
    c69a:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    c69c:	00 e0       	ldi	r16, 0x00	; 0
    c69e:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    c6a0:	9e e1       	ldi	r25, 0x1E	; 30
    c6a2:	c9 2e       	mov	r12, r25
    c6a4:	d1 2c       	mov	r13, r1
    c6a6:	c8 01       	movw	r24, r16
    c6a8:	b6 01       	movw	r22, r12
    c6aa:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    c6ae:	d8 2f       	mov	r29, r24
    c6b0:	dd 0f       	add	r29, r29
    c6b2:	dd 0f       	add	r29, r29
    c6b4:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    c6b6:	ab 01       	movw	r20, r22
    c6b8:	4d 5f       	subi	r20, 0xFD	; 253
    c6ba:	5f 4f       	sbci	r21, 0xFF	; 255
    c6bc:	c4 2f       	mov	r28, r20
    c6be:	cc 0f       	add	r28, r28
    c6c0:	cc 0f       	add	r28, r28
    c6c2:	cc 0f       	add	r28, r28
    c6c4:	f8 01       	movw	r30, r16
    c6c6:	ee 0d       	add	r30, r14
    c6c8:	ff 1d       	adc	r31, r15
    c6ca:	ea 52       	subi	r30, 0x2A	; 42
    c6cc:	f5 4e       	sbci	r31, 0xE5	; 229
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c6ce:	e4 91       	lpm	r30, Z
    c6d0:	45 01       	movw	r8, r10
    c6d2:	d5 01       	movw	r26, r10
    c6d4:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c6d6:	e8 35       	cpi	r30, 0x58	; 88
    c6d8:	31 f4       	brne	.+12     	; 0xc6e6 <load_level+0xac>
		{
			prep_player(&player1, x, y);
    c6da:	4c 2f       	mov	r20, r28
    c6dc:	6d 2f       	mov	r22, r29
    c6de:	8a e3       	ldi	r24, 0x3A	; 58
    c6e0:	9c e0       	ldi	r25, 0x0C	; 12
    c6e2:	0e 94 0b 63 	call	0xc616	; 0xc616 <prep_player>
    c6e6:	bf ef       	ldi	r27, 0xFF	; 255
    c6e8:	ab 1a       	sub	r10, r27
    c6ea:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c6ec:	f4 01       	movw	r30, r8
    c6ee:	80 81       	ld	r24, Z
    c6f0:	83 36       	cpi	r24, 0x63	; 99
    c6f2:	31 f4       	brne	.+12     	; 0xc700 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    c6f4:	4c 2f       	mov	r20, r28
    c6f6:	6d 2f       	mov	r22, r29
    c6f8:	8b ea       	ldi	r24, 0xAB	; 171
    c6fa:	9f e0       	ldi	r25, 0x0F	; 15
    c6fc:	0e 94 0b 63 	call	0xc616	; 0xc616 <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c700:	0f 5f       	subi	r16, 0xFF	; 255
    c702:	1f 4f       	sbci	r17, 0xFF	; 255
    c704:	0e 3e       	cpi	r16, 0xEE	; 238
    c706:	f2 e0       	ldi	r31, 0x02	; 2
    c708:	1f 07       	cpc	r17, r31
    c70a:	69 f6       	brne	.-102    	; 0xc6a6 <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    c70c:	60 e0       	ldi	r22, 0x00	; 0
    c70e:	8a e3       	ldi	r24, 0x3A	; 58
    c710:	9c e0       	ldi	r25, 0x0C	; 12
    c712:	0e 94 c0 58 	call	0xb180	; 0xb180 <render_hud>
	render_hud(&player2, 15);
    c716:	6f e0       	ldi	r22, 0x0F	; 15
    c718:	8b ea       	ldi	r24, 0xAB	; 171
    c71a:	9f e0       	ldi	r25, 0x0F	; 15
    c71c:	0e 94 c0 58 	call	0xb180	; 0xb180 <render_hud>
	render_score(&player1, 0);
    c720:	60 e0       	ldi	r22, 0x00	; 0
    c722:	8a e3       	ldi	r24, 0x3A	; 58
    c724:	9c e0       	ldi	r25, 0x0C	; 12
    c726:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <render_score>
	render_score(&player2, 15);
    c72a:	6f e0       	ldi	r22, 0x0F	; 15
    c72c:	8b ea       	ldi	r24, 0xAB	; 171
    c72e:	9f e0       	ldi	r25, 0x0F	; 15
    c730:	0e 94 dd 58 	call	0xb1ba	; 0xb1ba <render_score>
	Print(14, 0, (char*) strVertSep);
    c734:	46 e0       	ldi	r20, 0x06	; 6
    c736:	53 e0       	ldi	r21, 0x03	; 3
    c738:	60 e0       	ldi	r22, 0x00	; 0
    c73a:	70 e0       	ldi	r23, 0x00	; 0
    c73c:	8e e0       	ldi	r24, 0x0E	; 14
    c73e:	90 e0       	ldi	r25, 0x00	; 0
    c740:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(14, 1, (char*) strVertSep);
    c744:	46 e0       	ldi	r20, 0x06	; 6
    c746:	53 e0       	ldi	r21, 0x03	; 3
    c748:	61 e0       	ldi	r22, 0x01	; 1
    c74a:	70 e0       	ldi	r23, 0x00	; 0
    c74c:	8e e0       	ldi	r24, 0x0E	; 14
    c74e:	90 e0       	ldi	r25, 0x00	; 0
    c750:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(14, 2, (char*) strVertSep);
    c754:	46 e0       	ldi	r20, 0x06	; 6
    c756:	53 e0       	ldi	r21, 0x03	; 3
    c758:	62 e0       	ldi	r22, 0x02	; 2
    c75a:	70 e0       	ldi	r23, 0x00	; 0
    c75c:	8e e0       	ldi	r24, 0x0E	; 14
    c75e:	90 e0       	ldi	r25, 0x00	; 0
    c760:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	load_level_tiles(false);
    c764:	80 e0       	ldi	r24, 0x00	; 0
}
    c766:	df 91       	pop	r29
    c768:	cf 91       	pop	r28
    c76a:	1f 91       	pop	r17
    c76c:	0f 91       	pop	r16
    c76e:	ff 90       	pop	r15
    c770:	ef 90       	pop	r14
    c772:	df 90       	pop	r13
    c774:	cf 90       	pop	r12
    c776:	bf 90       	pop	r11
    c778:	af 90       	pop	r10
    c77a:	9f 90       	pop	r9
    c77c:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    c77e:	0c 94 98 62 	jmp	0xc530	; 0xc530 <load_level_tiles>

0000c782 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c782:	cf 93       	push	r28
    c784:	df 93       	push	r29
    c786:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c788:	61 e0       	ldi	r22, 0x01	; 1
    c78a:	83 e0       	ldi	r24, 0x03	; 3
    c78c:	0e 94 d5 52 	call	0xa5aa	; 0xa5aa <FadeOut>
	ClearVram();
    c790:	0e 94 da 43 	call	0x87b4	; 0x87b4 <ClearVram>
	clear_sprites();
    c794:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c798:	d0 e0       	ldi	r29, 0x00	; 0
    c79a:	ae 01       	movw	r20, r28
    c79c:	84 e0       	ldi	r24, 0x04	; 4
    c79e:	44 0f       	add	r20, r20
    c7a0:	55 1f       	adc	r21, r21
    c7a2:	8a 95       	dec	r24
    c7a4:	e1 f7       	brne	.-8      	; 0xc79e <level_transition+0x1c>
    c7a6:	46 59       	subi	r20, 0x96	; 150
    c7a8:	5e 4f       	sbci	r21, 0xFE	; 254
    c7aa:	6c e0       	ldi	r22, 0x0C	; 12
    c7ac:	70 e0       	ldi	r23, 0x00	; 0
    c7ae:	88 e0       	ldi	r24, 0x08	; 8
    c7b0:	90 e0       	ldi	r25, 0x00	; 0
    c7b2:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	FadeIn(1, true);
    c7b6:	61 e0       	ldi	r22, 0x01	; 1
    c7b8:	81 e0       	ldi	r24, 0x01	; 1
    c7ba:	0e 94 c9 52 	call	0xa592	; 0xa592 <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c7be:	84 e0       	ldi	r24, 0x04	; 4
    c7c0:	0e 94 18 55 	call	0xaa30	; 0xaa30 <LBWaitSeconds>
	FadeOut(1, true);
    c7c4:	61 e0       	ldi	r22, 0x01	; 1
    c7c6:	81 e0       	ldi	r24, 0x01	; 1
    c7c8:	0e 94 d5 52 	call	0xa5aa	; 0xa5aa <FadeOut>
	ClearVram();
    c7cc:	0e 94 da 43 	call	0x87b4	; 0x87b4 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c7d0:	60 e0       	ldi	r22, 0x00	; 0
    c7d2:	83 e0       	ldi	r24, 0x03	; 3
    c7d4:	0e 94 c9 52 	call	0xa592	; 0xa592 <FadeIn>
	load_level(index);
    c7d8:	ce 01       	movw	r24, r28
}
    c7da:	df 91       	pop	r29
    c7dc:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c7de:	0c 94 1d 63 	jmp	0xc63a	; 0xc63a <load_level>

0000c7e2 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c7e2:	84 e3       	ldi	r24, 0x34	; 52
    c7e4:	90 e1       	ldi	r25, 0x10	; 16
    c7e6:	0e 94 ab 59 	call	0xb356	; 0xb356 <render_scope>
    c7ea:	88 23       	and	r24, r24
    c7ec:	41 f0       	breq	.+16     	; 0xc7fe <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c7ee:	82 e0       	ldi	r24, 0x02	; 2
    c7f0:	80 93 0a 0c 	sts	0x0C0A, r24
		SFX_ALARM;
    c7f4:	41 e0       	ldi	r20, 0x01	; 1
    c7f6:	6f ef       	ldi	r22, 0xFF	; 255
    c7f8:	88 e0       	ldi	r24, 0x08	; 8
    c7fa:	0c 94 58 47 	jmp	0x8eb0	; 0x8eb0 <TriggerFx>
    c7fe:	08 95       	ret

0000c800 <render_boss_fight_sub_load>:
	}
}

void render_boss_fight_sub_load()
{
    c800:	0f 93       	push	r16
    c802:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c804:	86 e2       	ldi	r24, 0x26	; 38
    c806:	90 e1       	ldi	r25, 0x10	; 16
    c808:	0e 94 2f 53 	call	0xa65e	; 0xa65e <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c80c:	ac 01       	movw	r20, r24
    c80e:	64 e0       	ldi	r22, 0x04	; 4
    c810:	81 e0       	ldi	r24, 0x01	; 1
    c812:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	if (sub_animation.anim.reversing)
    c816:	80 91 2b 10 	lds	r24, 0x102B
    c81a:	88 23       	and	r24, r24
    c81c:	d9 f0       	breq	.+54     	; 0xc854 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c81e:	84 e0       	ldi	r24, 0x04	; 4
    c820:	80 93 0a 0c 	sts	0x0C0A, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    c824:	00 e0       	ldi	r16, 0x00	; 0
    c826:	10 e0       	ldi	r17, 0x00	; 0
    c828:	20 e9       	ldi	r18, 0x90	; 144
    c82a:	32 e4       	ldi	r19, 0x42	; 66
    c82c:	40 e0       	ldi	r20, 0x00	; 0
    c82e:	50 e0       	ldi	r21, 0x00	; 0
    c830:	60 ec       	ldi	r22, 0xC0	; 192
    c832:	72 e4       	ldi	r23, 0x42	; 66
    c834:	86 e7       	ldi	r24, 0x76	; 118
    c836:	90 e1       	ldi	r25, 0x10	; 16
    c838:	0e 94 eb 55 	call	0xabd6	; 0xabd6 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    c83c:	00 e0       	ldi	r16, 0x00	; 0
    c83e:	10 e0       	ldi	r17, 0x00	; 0
    c840:	20 e9       	ldi	r18, 0x90	; 144
    c842:	32 e4       	ldi	r19, 0x42	; 66
    c844:	40 e0       	ldi	r20, 0x00	; 0
    c846:	50 e0       	ldi	r21, 0x00	; 0
    c848:	60 e4       	ldi	r22, 0x40	; 64
    c84a:	73 e4       	ldi	r23, 0x43	; 67
    c84c:	82 e4       	ldi	r24, 0x42	; 66
    c84e:	90 e1       	ldi	r25, 0x10	; 16
    c850:	0e 94 eb 55 	call	0xabd6	; 0xabd6 <init_turret>
	}
}
    c854:	1f 91       	pop	r17
    c856:	0f 91       	pop	r16
    c858:	08 95       	ret

0000c85a <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c85a:	86 e2       	ldi	r24, 0x26	; 38
    c85c:	90 e1       	ldi	r25, 0x10	; 16
    c85e:	0e 94 2f 53 	call	0xa65e	; 0xa65e <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    c862:	20 91 26 10 	lds	r18, 0x1026
    c866:	21 11       	cpse	r18, r1
    c868:	05 c0       	rjmp	.+10     	; 0xc874 <render_boss_fight_sub_sinking+0x1a>
    c86a:	ac 01       	movw	r20, r24
    c86c:	64 e0       	ldi	r22, 0x04	; 4
    c86e:	81 e0       	ldi	r24, 0x01	; 1
    c870:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	if (sub_animation.anim.looped)
    c874:	80 91 2a 10 	lds	r24, 0x102A
    c878:	88 23       	and	r24, r24
    c87a:	19 f0       	breq	.+6      	; 0xc882 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    c87c:	88 e0       	ldi	r24, 0x08	; 8
    c87e:	80 93 0a 0c 	sts	0x0C0A, r24
    c882:	08 95       	ret

0000c884 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    c884:	ef 92       	push	r14
    c886:	ff 92       	push	r15
    c888:	0f 93       	push	r16
    c88a:	1f 93       	push	r17
    c88c:	cf 93       	push	r28
    c88e:	df 93       	push	r29
    c890:	1f 92       	push	r1
    c892:	cd b7       	in	r28, 0x3d	; 61
    c894:	de b7       	in	r29, 0x3e	; 62
    c896:	7c 01       	movw	r14, r24
    c898:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    c89a:	fc 01       	movw	r30, r24
    c89c:	67 81       	ldd	r22, Z+7	; 0x07
    c89e:	70 85       	ldd	r23, Z+8	; 0x08
    c8a0:	81 85       	ldd	r24, Z+9	; 0x09
    c8a2:	92 85       	ldd	r25, Z+10	; 0x0a
    c8a4:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c8a8:	46 2f       	mov	r20, r22
    c8aa:	f7 01       	movw	r30, r14
    c8ac:	63 81       	ldd	r22, Z+3	; 0x03
    c8ae:	74 81       	ldd	r23, Z+4	; 0x04
    c8b0:	85 81       	ldd	r24, Z+5	; 0x05
    c8b2:	96 81       	ldd	r25, Z+6	; 0x06
    c8b4:	49 83       	std	Y+1, r20	; 0x01
    c8b6:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c8ba:	01 e0       	ldi	r16, 0x01	; 1
    c8bc:	21 e0       	ldi	r18, 0x01	; 1
    c8be:	49 81       	ldd	r20, Y+1	; 0x01
    c8c0:	81 2f       	mov	r24, r17
    c8c2:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
}
    c8c6:	0f 90       	pop	r0
    c8c8:	df 91       	pop	r29
    c8ca:	cf 91       	pop	r28
    c8cc:	1f 91       	pop	r17
    c8ce:	0f 91       	pop	r16
    c8d0:	ff 90       	pop	r15
    c8d2:	ef 90       	pop	r14
    c8d4:	08 95       	ret

0000c8d6 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    c8d6:	ef 92       	push	r14
    c8d8:	ff 92       	push	r15
    c8da:	0f 93       	push	r16
    c8dc:	1f 93       	push	r17
    c8de:	cf 93       	push	r28
    c8e0:	df 93       	push	r29
    c8e2:	1f 92       	push	r1
    c8e4:	cd b7       	in	r28, 0x3d	; 61
    c8e6:	de b7       	in	r29, 0x3e	; 62
    c8e8:	7c 01       	movw	r14, r24
    c8ea:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    c8ec:	fc 01       	movw	r30, r24
    c8ee:	63 89       	ldd	r22, Z+19	; 0x13
    c8f0:	74 89       	ldd	r23, Z+20	; 0x14
    c8f2:	85 89       	ldd	r24, Z+21	; 0x15
    c8f4:	96 89       	ldd	r25, Z+22	; 0x16
    c8f6:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c8fa:	46 2f       	mov	r20, r22
    c8fc:	f7 01       	movw	r30, r14
    c8fe:	67 85       	ldd	r22, Z+15	; 0x0f
    c900:	70 89       	ldd	r23, Z+16	; 0x10
    c902:	81 89       	ldd	r24, Z+17	; 0x11
    c904:	92 89       	ldd	r25, Z+18	; 0x12
    c906:	49 83       	std	Y+1, r20	; 0x01
    c908:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    c90c:	01 e0       	ldi	r16, 0x01	; 1
    c90e:	21 e0       	ldi	r18, 0x01	; 1
    c910:	49 81       	ldd	r20, Y+1	; 0x01
    c912:	81 2f       	mov	r24, r17
    c914:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
}
    c918:	0f 90       	pop	r0
    c91a:	df 91       	pop	r29
    c91c:	cf 91       	pop	r28
    c91e:	1f 91       	pop	r17
    c920:	0f 91       	pop	r16
    c922:	ff 90       	pop	r15
    c924:	ef 90       	pop	r14
    c926:	08 95       	ret

0000c928 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c928:	cf 92       	push	r12
    c92a:	df 92       	push	r13
    c92c:	ef 92       	push	r14
    c92e:	ff 92       	push	r15
    c930:	cf 93       	push	r28
    c932:	df 93       	push	r29
    c934:	ec 01       	movw	r28, r24
    c936:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    c938:	cb 80       	ldd	r12, Y+3	; 0x03
    c93a:	dc 80       	ldd	r13, Y+4	; 0x04
    c93c:	ed 80       	ldd	r14, Y+5	; 0x05
    c93e:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    c940:	6f 81       	ldd	r22, Y+7	; 0x07
    c942:	78 85       	ldd	r23, Y+8	; 0x08
    c944:	89 85       	ldd	r24, Y+9	; 0x09
    c946:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    c948:	2b 85       	ldd	r18, Y+11	; 0x0b
    c94a:	21 11       	cpse	r18, r1
    c94c:	27 c0       	rjmp	.+78     	; 0xc99c <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    c94e:	20 e0       	ldi	r18, 0x00	; 0
    c950:	30 e0       	ldi	r19, 0x00	; 0
    c952:	40 e0       	ldi	r20, 0x00	; 0
    c954:	5e e3       	ldi	r21, 0x3E	; 62
    c956:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    c95a:	20 e0       	ldi	r18, 0x00	; 0
    c95c:	30 e0       	ldi	r19, 0x00	; 0
    c95e:	40 e4       	ldi	r20, 0x40	; 64
    c960:	50 e4       	ldi	r21, 0x40	; 64
    c962:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c966:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    c96a:	8e e1       	ldi	r24, 0x1E	; 30
    c96c:	68 9f       	mul	r22, r24
    c96e:	e0 01       	movw	r28, r0
    c970:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    c972:	20 e0       	ldi	r18, 0x00	; 0
    c974:	30 e0       	ldi	r19, 0x00	; 0
    c976:	40 e0       	ldi	r20, 0x00	; 0
    c978:	5e e3       	ldi	r21, 0x3E	; 62
    c97a:	c7 01       	movw	r24, r14
    c97c:	b6 01       	movw	r22, r12
    c97e:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    c982:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c986:	c6 0f       	add	r28, r22
    c988:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    c98a:	be 01       	movw	r22, r28
    c98c:	8d e1       	ldi	r24, 0x1D	; 29
    c98e:	9c e0       	ldi	r25, 0x0C	; 12
    c990:	0e 94 73 5d 	call	0xbae6	; 0xbae6 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    c994:	c4 54       	subi	r28, 0x44	; 68
    c996:	d3 4f       	sbci	r29, 0xF3	; 243
    c998:	19 82       	std	Y+1, r1	; 0x01
    c99a:	56 c0       	rjmp	.+172    	; 0xca48 <update_turret+0x120>
	}
	else if (t->shared.direction == D_LEFT)
    c99c:	98 81       	ld	r25, Y
    c99e:	93 30       	cpi	r25, 0x03	; 3
    c9a0:	19 f5       	brne	.+70     	; 0xc9e8 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    c9a2:	63 2f       	mov	r22, r19
    c9a4:	70 e0       	ldi	r23, 0x00	; 0
    c9a6:	80 e0       	ldi	r24, 0x00	; 0
    c9a8:	90 e0       	ldi	r25, 0x00	; 0
    c9aa:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c9ae:	9b 01       	movw	r18, r22
    c9b0:	ac 01       	movw	r20, r24
    c9b2:	c7 01       	movw	r24, r14
    c9b4:	b6 01       	movw	r22, r12
    c9b6:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    c9ba:	87 ff       	sbrs	r24, 7
    c9bc:	02 c0       	rjmp	.+4      	; 0xc9c2 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    c9be:	81 e0       	ldi	r24, 0x01	; 1
    c9c0:	24 c0       	rjmp	.+72     	; 0xca0a <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    c9c2:	69 81       	ldd	r22, Y+1	; 0x01
    c9c4:	70 e0       	ldi	r23, 0x00	; 0
    c9c6:	80 e0       	ldi	r24, 0x00	; 0
    c9c8:	90 e0       	ldi	r25, 0x00	; 0
    c9ca:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c9ce:	25 e6       	ldi	r18, 0x65	; 101
    c9d0:	38 e8       	ldi	r19, 0x88	; 136
    c9d2:	48 e8       	ldi	r20, 0x88	; 136
    c9d4:	5c e3       	ldi	r21, 0x3C	; 60
    c9d6:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    c9da:	9b 01       	movw	r18, r22
    c9dc:	ac 01       	movw	r20, r24
    c9de:	c7 01       	movw	r24, r14
    c9e0:	b6 01       	movw	r22, r12
    c9e2:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    c9e6:	2c c0       	rjmp	.+88     	; 0xca40 <update_turret+0x118>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    c9e8:	91 30       	cpi	r25, 0x01	; 1
    c9ea:	71 f5       	brne	.+92     	; 0xca48 <update_turret+0x120>
	{
		if (t->shared.x > right_limit)
    c9ec:	64 2f       	mov	r22, r20
    c9ee:	70 e0       	ldi	r23, 0x00	; 0
    c9f0:	80 e0       	ldi	r24, 0x00	; 0
    c9f2:	90 e0       	ldi	r25, 0x00	; 0
    c9f4:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    c9f8:	9b 01       	movw	r18, r22
    c9fa:	ac 01       	movw	r20, r24
    c9fc:	c7 01       	movw	r24, r14
    c9fe:	b6 01       	movw	r22, r12
    ca00:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    ca04:	18 16       	cp	r1, r24
    ca06:	54 f4       	brge	.+20     	; 0xca1c <update_turret+0xf4>
		{
			t->shared.direction = D_LEFT;
    ca08:	83 e0       	ldi	r24, 0x03	; 3
    ca0a:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    ca0c:	6c e8       	ldi	r22, 0x8C	; 140
    ca0e:	70 e0       	ldi	r23, 0x00	; 0
    ca10:	8a e5       	ldi	r24, 0x5A	; 90
    ca12:	90 e0       	ldi	r25, 0x00	; 0
    ca14:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    ca18:	89 83       	std	Y+1, r24	; 0x01
    ca1a:	16 c0       	rjmp	.+44     	; 0xca48 <update_turret+0x120>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    ca1c:	69 81       	ldd	r22, Y+1	; 0x01
    ca1e:	70 e0       	ldi	r23, 0x00	; 0
    ca20:	80 e0       	ldi	r24, 0x00	; 0
    ca22:	90 e0       	ldi	r25, 0x00	; 0
    ca24:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    ca28:	25 e6       	ldi	r18, 0x65	; 101
    ca2a:	38 e8       	ldi	r19, 0x88	; 136
    ca2c:	48 e8       	ldi	r20, 0x88	; 136
    ca2e:	5c e3       	ldi	r21, 0x3C	; 60
    ca30:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    ca34:	9b 01       	movw	r18, r22
    ca36:	ac 01       	movw	r20, r24
    ca38:	c7 01       	movw	r24, r14
    ca3a:	b6 01       	movw	r22, r12
    ca3c:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    ca40:	6b 83       	std	Y+3, r22	; 0x03
    ca42:	7c 83       	std	Y+4, r23	; 0x04
    ca44:	8d 83       	std	Y+5, r24	; 0x05
    ca46:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    ca48:	df 91       	pop	r29
    ca4a:	cf 91       	pop	r28
    ca4c:	ff 90       	pop	r15
    ca4e:	ef 90       	pop	r14
    ca50:	df 90       	pop	r13
    ca52:	cf 90       	pop	r12
    ca54:	08 95       	ret

0000ca56 <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    ca56:	0f 93       	push	r16
    ca58:	1f 93       	push	r17
    ca5a:	cf 93       	push	r28
    ca5c:	df 93       	push	r29
    ca5e:	8c 01       	movw	r16, r24
    ca60:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    ca62:	fc 01       	movw	r30, r24
    ca64:	83 85       	ldd	r24, Z+11	; 0x0b
    ca66:	81 11       	cpse	r24, r1
    ca68:	02 c0       	rjmp	.+4      	; 0xca6e <update_turret_shot+0x18>
	{
		s->active = 0;
    ca6a:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    ca6c:	76 c0       	rjmp	.+236    	; 0xcb5a <update_turret_shot+0x104>
	}
	if (!s->active)
    ca6e:	8e 85       	ldd	r24, Y+14	; 0x0e
    ca70:	81 11       	cpse	r24, r1
    ca72:	2e c0       	rjmp	.+92     	; 0xcad0 <update_turret_shot+0x7a>
	{
		s->active = 1;
    ca74:	81 e0       	ldi	r24, 0x01	; 1
    ca76:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    ca78:	20 e0       	ldi	r18, 0x00	; 0
    ca7a:	30 e0       	ldi	r19, 0x00	; 0
    ca7c:	40 e4       	ldi	r20, 0x40	; 64
    ca7e:	50 e4       	ldi	r21, 0x40	; 64
    ca80:	f8 01       	movw	r30, r16
    ca82:	63 81       	ldd	r22, Z+3	; 0x03
    ca84:	74 81       	ldd	r23, Z+4	; 0x04
    ca86:	85 81       	ldd	r24, Z+5	; 0x05
    ca88:	96 81       	ldd	r25, Z+6	; 0x06
    ca8a:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    ca8e:	6b 83       	std	Y+3, r22	; 0x03
    ca90:	7c 83       	std	Y+4, r23	; 0x04
    ca92:	8d 83       	std	Y+5, r24	; 0x05
    ca94:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    ca96:	20 e0       	ldi	r18, 0x00	; 0
    ca98:	30 e0       	ldi	r19, 0x00	; 0
    ca9a:	40 e4       	ldi	r20, 0x40	; 64
    ca9c:	50 e4       	ldi	r21, 0x40	; 64
    ca9e:	f8 01       	movw	r30, r16
    caa0:	67 81       	ldd	r22, Z+7	; 0x07
    caa2:	70 85       	ldd	r23, Z+8	; 0x08
    caa4:	81 85       	ldd	r24, Z+9	; 0x09
    caa6:	92 85       	ldd	r25, Z+10	; 0x0a
    caa8:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    caac:	6f 83       	std	Y+7, r22	; 0x07
    caae:	78 87       	std	Y+8, r23	; 0x08
    cab0:	89 87       	std	Y+9, r24	; 0x09
    cab2:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
    cab4:	80 91 4f 0c 	lds	r24, 0x0C4F
    cab8:	80 fd       	sbrc	r24, 0
    caba:	0a c0       	rjmp	.+20     	; 0xcad0 <update_turret_shot+0x7a>
    cabc:	80 91 c0 0f 	lds	r24, 0x0FC0
    cac0:	80 fd       	sbrc	r24, 0
    cac2:	06 c0       	rjmp	.+12     	; 0xcad0 <update_turret_shot+0x7a>
    cac4:	2f ef       	ldi	r18, 0xFF	; 255
    cac6:	47 e1       	ldi	r20, 0x17	; 23
    cac8:	62 e0       	ldi	r22, 0x02	; 2
    caca:	84 e0       	ldi	r24, 0x04	; 4
    cacc:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    cad0:	23 e3       	ldi	r18, 0x33	; 51
    cad2:	35 e5       	ldi	r19, 0x55	; 85
    cad4:	45 e8       	ldi	r20, 0x85	; 133
    cad6:	50 e4       	ldi	r21, 0x40	; 64
    cad8:	6f 81       	ldd	r22, Y+7	; 0x07
    cada:	78 85       	ldd	r23, Y+8	; 0x08
    cadc:	89 85       	ldd	r24, Y+9	; 0x09
    cade:	9a 85       	ldd	r25, Y+10	; 0x0a
    cae0:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    cae4:	6f 83       	std	Y+7, r22	; 0x07
    cae6:	78 87       	std	Y+8, r23	; 0x08
    cae8:	89 87       	std	Y+9, r24	; 0x09
    caea:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    caec:	20 e0       	ldi	r18, 0x00	; 0
    caee:	30 e0       	ldi	r19, 0x00	; 0
    caf0:	40 e0       	ldi	r20, 0x00	; 0
    caf2:	51 e4       	ldi	r21, 0x41	; 65
    caf4:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    caf8:	20 e0       	ldi	r18, 0x00	; 0
    cafa:	30 e0       	ldi	r19, 0x00	; 0
    cafc:	48 e5       	ldi	r20, 0x58	; 88
    cafe:	53 e4       	ldi	r21, 0x43	; 67
    cb00:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    cb04:	18 16       	cp	r1, r24
    cb06:	0c f4       	brge	.+2      	; 0xcb0a <update_turret_shot+0xb4>
    cb08:	b0 cf       	rjmp	.-160    	; 0xca6a <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    cb0a:	00 91 18 0c 	lds	r16, 0x0C18
    cb0e:	10 91 19 0c 	lds	r17, 0x0C19
    cb12:	be 01       	movw	r22, r28
    cb14:	c8 01       	movw	r24, r16
    cb16:	0e 94 ca 5b 	call	0xb794	; 0xb794 <player_shot>
    cb1a:	88 23       	and	r24, r24
    cb1c:	f1 f0       	breq	.+60     	; 0xcb5a <update_turret_shot+0x104>
    cb1e:	f8 01       	movw	r30, r16
    cb20:	85 89       	ldd	r24, Z+21	; 0x15
    cb22:	80 fd       	sbrc	r24, 0
    cb24:	1a c0       	rjmp	.+52     	; 0xcb5a <update_turret_shot+0x104>
	{
		game.boss_fight_player_lives--;
    cb26:	90 91 0c 0c 	lds	r25, 0x0C0C
    cb2a:	91 50       	subi	r25, 0x01	; 1
    cb2c:	90 93 0c 0c 	sts	0x0C0C, r25
		if (game.boss_fight_player_lives <= 0)
    cb30:	91 11       	cpse	r25, r1
    cb32:	03 c0       	rjmp	.+6      	; 0xcb3a <update_turret_shot+0xe4>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    cb34:	80 e1       	ldi	r24, 0x10	; 16
    cb36:	80 93 0a 0c 	sts	0x0C0A, r24
		}
		s->active = 0;
    cb3a:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    cb3c:	60 91 0b 0c 	lds	r22, 0x0C0B
    cb40:	c8 01       	movw	r24, r16
    cb42:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <kill_player>
		SFX_TANK_EXPLODE;
    cb46:	2f ef       	ldi	r18, 0xFF	; 255
    cb48:	40 e1       	ldi	r20, 0x10	; 16
    cb4a:	67 e0       	ldi	r22, 0x07	; 7
    cb4c:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    cb4e:	df 91       	pop	r29
    cb50:	cf 91       	pop	r28
    cb52:	1f 91       	pop	r17
    cb54:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    cb56:	0c 94 a0 47 	jmp	0x8f40	; 0x8f40 <TriggerNote>
	}
}
    cb5a:	df 91       	pop	r29
    cb5c:	cf 91       	pop	r28
    cb5e:	1f 91       	pop	r17
    cb60:	0f 91       	pop	r16
    cb62:	08 95       	ret

0000cb64 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    cb64:	10 92 07 0c 	sts	0x0C07, r1
	clear_sprites();
    cb68:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else	
	Print(7, 13, (char*) str1Player);
    cb6c:	45 e9       	ldi	r20, 0x95	; 149
    cb6e:	53 e0       	ldi	r21, 0x03	; 3
    cb70:	6d e0       	ldi	r22, 0x0D	; 13
    cb72:	70 e0       	ldi	r23, 0x00	; 0
    cb74:	87 e0       	ldi	r24, 0x07	; 7
    cb76:	90 e0       	ldi	r25, 0x00	; 0
    cb78:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(7, 14, (char*) str2Player);
    cb7c:	44 e8       	ldi	r20, 0x84	; 132
    cb7e:	53 e0       	ldi	r21, 0x03	; 3
    cb80:	6e e0       	ldi	r22, 0x0E	; 14
    cb82:	70 e0       	ldi	r23, 0x00	; 0
    cb84:	87 e0       	ldi	r24, 0x07	; 7
    cb86:	90 e0       	ldi	r25, 0x00	; 0
    cb88:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(7, 15, (char*) strHighscores);
    cb8c:	40 e2       	ldi	r20, 0x20	; 32
    cb8e:	53 e0       	ldi	r21, 0x03	; 3
    cb90:	6f e0       	ldi	r22, 0x0F	; 15
    cb92:	70 e0       	ldi	r23, 0x00	; 0
    cb94:	87 e0       	ldi	r24, 0x07	; 7
    cb96:	90 e0       	ldi	r25, 0x00	; 0
    cb98:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(7, 13, (char*) str1Player);
    cb9c:	45 e9       	ldi	r20, 0x95	; 149
    cb9e:	53 e0       	ldi	r21, 0x03	; 3
    cba0:	6d e0       	ldi	r22, 0x0D	; 13
    cba2:	70 e0       	ldi	r23, 0x00	; 0
    cba4:	87 e0       	ldi	r24, 0x07	; 7
    cba6:	90 e0       	ldi	r25, 0x00	; 0
    cba8:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(5, 26, (char*) strCopyright);
    cbac:	4a e2       	ldi	r20, 0x2A	; 42
    cbae:	53 e0       	ldi	r21, 0x03	; 3
    cbb0:	6a e1       	ldi	r22, 0x1A	; 26
    cbb2:	70 e0       	ldi	r23, 0x00	; 0
    cbb4:	85 e0       	ldi	r24, 0x05	; 5
    cbb6:	90 e0       	ldi	r25, 0x00	; 0
    cbb8:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	MapSprite2(0, map_right_arrow, 0);
    cbbc:	40 e0       	ldi	r20, 0x00	; 0
    cbbe:	6c e5       	ldi	r22, 0x5C	; 92
    cbc0:	74 e4       	ldi	r23, 0x44	; 68
    cbc2:	80 e0       	ldi	r24, 0x00	; 0
    cbc4:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    cbc8:	4f e0       	ldi	r20, 0x0F	; 15
    cbca:	5e e7       	ldi	r21, 0x7E	; 126
    cbcc:	65 e0       	ldi	r22, 0x05	; 5
    cbce:	84 e0       	ldi	r24, 0x04	; 4
    cbd0:	0c 94 06 52 	jmp	0xa40c	; 0xa40c <DrawMap>

0000cbd4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    cbd4:	fc 01       	movw	r30, r24
    cbd6:	20 81       	ld	r18, Z
    cbd8:	31 81       	ldd	r19, Z+1	; 0x01
    cbda:	28 70       	andi	r18, 0x08	; 8
    cbdc:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    cbde:	81 e0       	ldi	r24, 0x01	; 1
    cbe0:	23 2b       	or	r18, r19
    cbe2:	09 f4       	brne	.+2      	; 0xcbe6 <select_pressed+0x12>
    cbe4:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    cbe6:	08 95       	ret

0000cbe8 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    cbe8:	ff 92       	push	r15
    cbea:	0f 93       	push	r16
    cbec:	1f 93       	push	r17
    cbee:	cf 93       	push	r28
    cbf0:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    cbf2:	81 e0       	ldi	r24, 0x01	; 1
    cbf4:	80 93 07 0c 	sts	0x0C07, r24
	clear_sprites();
    cbf8:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    cbfc:	4c ed       	ldi	r20, 0xDC	; 220
    cbfe:	5d e7       	ldi	r21, 0x7D	; 125
    cc00:	61 e0       	ldi	r22, 0x01	; 1
    cc02:	87 e0       	ldi	r24, 0x07	; 7
    cc04:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    cc08:	46 ed       	ldi	r20, 0xD6	; 214
    cc0a:	5d e7       	ldi	r21, 0x7D	; 125
    cc0c:	61 e0       	ldi	r22, 0x01	; 1
    cc0e:	84 e1       	ldi	r24, 0x14	; 20
    cc10:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	Print(10, 2, (char*) strHighscores);
    cc14:	40 e2       	ldi	r20, 0x20	; 32
    cc16:	53 e0       	ldi	r21, 0x03	; 3
    cc18:	62 e0       	ldi	r22, 0x02	; 2
    cc1a:	70 e0       	ldi	r23, 0x00	; 0
    cc1c:	8a e0       	ldi	r24, 0x0A	; 10
    cc1e:	90 e0       	ldi	r25, 0x00	; 0
    cc20:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    cc24:	06 ec       	ldi	r16, 0xC6	; 198
    cc26:	1b e0       	ldi	r17, 0x0B	; 11
    cc28:	c7 e0       	ldi	r28, 0x07	; 7
    cc2a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    cc2c:	ff 24       	eor	r15, r15
    cc2e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    cc30:	20 e0       	ldi	r18, 0x00	; 0
    cc32:	4f 2d       	mov	r20, r15
    cc34:	be 01       	movw	r22, r28
    cc36:	82 e0       	ldi	r24, 0x02	; 2
    cc38:	90 e0       	ldi	r25, 0x00	; 0
    cc3a:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
		PrintChar(3, y, '.');
    cc3e:	4e e2       	ldi	r20, 0x2E	; 46
    cc40:	be 01       	movw	r22, r28
    cc42:	83 e0       	ldi	r24, 0x03	; 3
    cc44:	90 e0       	ldi	r25, 0x00	; 0
    cc46:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
    cc4a:	f8 01       	movw	r30, r16
    cc4c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    cc4e:	80 81       	ld	r24, Z
    cc50:	93 e0       	ldi	r25, 0x03	; 3
    cc52:	89 9f       	mul	r24, r25
    cc54:	a0 01       	movw	r20, r0
    cc56:	11 24       	eor	r1, r1
    cc58:	47 51       	subi	r20, 0x17	; 23
    cc5a:	54 4f       	sbci	r21, 0xF4	; 244
    cc5c:	23 e0       	ldi	r18, 0x03	; 3
    cc5e:	6c 2f       	mov	r22, r28
    cc60:	85 e0       	ldi	r24, 0x05	; 5
    cc62:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
		Print(9, y, (char*) strOwns);
    cc66:	4c ee       	ldi	r20, 0xEC	; 236
    cc68:	52 e0       	ldi	r21, 0x02	; 2
    cc6a:	be 01       	movw	r22, r28
    cc6c:	89 e0       	ldi	r24, 0x09	; 9
    cc6e:	90 e0       	ldi	r25, 0x00	; 0
    cc70:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    cc74:	f8 01       	movw	r30, r16
    cc76:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    cc78:	80 81       	ld	r24, Z
    cc7a:	e3 e0       	ldi	r30, 0x03	; 3
    cc7c:	8e 9f       	mul	r24, r30
    cc7e:	a0 01       	movw	r20, r0
    cc80:	11 24       	eor	r1, r1
    cc82:	47 51       	subi	r20, 0x17	; 23
    cc84:	54 4f       	sbci	r21, 0xF4	; 244
    cc86:	23 e0       	ldi	r18, 0x03	; 3
    cc88:	6c 2f       	mov	r22, r28
    cc8a:	8e e0       	ldi	r24, 0x0E	; 14
    cc8c:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
		Print(18, y, (char*) strBy);
    cc90:	49 ee       	ldi	r20, 0xE9	; 233
    cc92:	52 e0       	ldi	r21, 0x02	; 2
    cc94:	be 01       	movw	r22, r28
    cc96:	82 e1       	ldi	r24, 0x12	; 18
    cc98:	90 e0       	ldi	r25, 0x00	; 0
    cc9a:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    cc9e:	21 e0       	ldi	r18, 0x01	; 1
    cca0:	f8 01       	movw	r30, r16
    cca2:	32 97       	sbiw	r30, 0x02	; 2
    cca4:	40 81       	ld	r20, Z
    cca6:	be 01       	movw	r22, r28
    cca8:	87 e1       	ldi	r24, 0x17	; 23
    ccaa:	90 e0       	ldi	r25, 0x00	; 0
    ccac:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
		PrintChar(24, y, '-');
    ccb0:	4d e2       	ldi	r20, 0x2D	; 45
    ccb2:	be 01       	movw	r22, r28
    ccb4:	88 e1       	ldi	r24, 0x18	; 24
    ccb6:	90 e0       	ldi	r25, 0x00	; 0
    ccb8:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    ccbc:	21 e0       	ldi	r18, 0x01	; 1
    ccbe:	f8 01       	movw	r30, r16
    ccc0:	31 97       	sbiw	r30, 0x01	; 1
    ccc2:	40 81       	ld	r20, Z
    ccc4:	be 01       	movw	r22, r28
    ccc6:	8b e1       	ldi	r24, 0x1B	; 27
    ccc8:	90 e0       	ldi	r25, 0x00	; 0
    ccca:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <PrintByte>
		if (scores.data[i+4])
    ccce:	f8 01       	movw	r30, r16
    ccd0:	80 81       	ld	r24, Z
    ccd2:	88 23       	and	r24, r24
    ccd4:	11 f0       	breq	.+4      	; 0xccda <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    ccd6:	4a e2       	ldi	r20, 0x2A	; 42
    ccd8:	01 c0       	rjmp	.+2      	; 0xccdc <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    ccda:	40 e2       	ldi	r20, 0x20	; 32
    ccdc:	be 01       	movw	r22, r28
    ccde:	8d e1       	ldi	r24, 0x1D	; 29
    cce0:	90 e0       	ldi	r25, 0x00	; 0
    cce2:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
		y += 3;
		rank += 1;
    cce6:	f3 94       	inc	r15
    cce8:	23 96       	adiw	r28, 0x03	; 3
    ccea:	0b 5f       	subi	r16, 0xFB	; 251
    ccec:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    ccee:	f6 e0       	ldi	r31, 0x06	; 6
    ccf0:	ff 12       	cpse	r15, r31
    ccf2:	9e cf       	rjmp	.-196    	; 0xcc30 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    ccf4:	49 e5       	ldi	r20, 0x59	; 89
    ccf6:	53 e0       	ldi	r21, 0x03	; 3
    ccf8:	66 e1       	ldi	r22, 0x16	; 22
    ccfa:	70 e0       	ldi	r23, 0x00	; 0
    ccfc:	83 e0       	ldi	r24, 0x03	; 3
    ccfe:	90 e0       	ldi	r25, 0x00	; 0
    cd00:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(10, 24, (char*) strCancelHandle);
    cd04:	4e e4       	ldi	r20, 0x4E	; 78
    cd06:	53 e0       	ldi	r21, 0x03	; 3
    cd08:	68 e1       	ldi	r22, 0x18	; 24
    cd0a:	70 e0       	ldi	r23, 0x00	; 0
    cd0c:	8a e0       	ldi	r24, 0x0A	; 10
    cd0e:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    cd10:	df 91       	pop	r29
    cd12:	cf 91       	pop	r28
    cd14:	1f 91       	pop	r17
    cd16:	0f 91       	pop	r16
    cd18:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    cd1a:	0c 94 86 52 	jmp	0xa50c	; 0xa50c <Print>

0000cd1e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    cd1e:	0e 94 1c 57 	call	0xae38	; 0xae38 <save_score>
	fade_through();
    cd22:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
	init_game_state();
    cd26:	0e 94 99 56 	call	0xad32	; 0xad32 <init_game_state>
	load_tank_rank();
    cd2a:	0c 94 f4 65 	jmp	0xcbe8	; 0xcbe8 <load_tank_rank>

0000cd2e <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    cd2e:	cf 92       	push	r12
    cd30:	df 92       	push	r13
    cd32:	ef 92       	push	r14
    cd34:	ff 92       	push	r15
    cd36:	0f 93       	push	r16
    cd38:	1f 93       	push	r17
    cd3a:	cf 93       	push	r28
    cd3c:	df 93       	push	r29
    cd3e:	00 d0       	rcall	.+0      	; 0xcd40 <update_player+0x12>
    cd40:	00 d0       	rcall	.+0      	; 0xcd42 <update_player+0x14>
    cd42:	cd b7       	in	r28, 0x3d	; 61
    cd44:	de b7       	in	r29, 0x3e	; 62
    cd46:	8c 01       	movw	r16, r24
    cd48:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    cd4a:	fb 01       	movw	r30, r22
    cd4c:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    cd4e:	81 89       	ldd	r24, Z+17	; 0x11
    cd50:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    cd52:	f8 01       	movw	r30, r16
    cd54:	80 81       	ld	r24, Z
    cd56:	83 ff       	sbrs	r24, 3
    cd58:	13 c0       	rjmp	.+38     	; 0xcd80 <update_player+0x52>
    cd5a:	80 91 0a 0c 	lds	r24, 0x0C0A
    cd5e:	81 11       	cpse	r24, r1
    cd60:	0f c0       	rjmp	.+30     	; 0xcd80 <update_player+0x52>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
    cd62:	2f ef       	ldi	r18, 0xFF	; 255
    cd64:	47 e1       	ldi	r20, 0x17	; 23
    cd66:	65 e0       	ldi	r22, 0x05	; 5
    cd68:	84 e0       	ldi	r24, 0x04	; 4
    cd6a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		game.paused = game.paused ^ 1;
    cd6e:	90 91 09 0c 	lds	r25, 0x0C09
    cd72:	81 e0       	ldi	r24, 0x01	; 1
    cd74:	89 27       	eor	r24, r25
    cd76:	80 93 09 0c 	sts	0x0C09, r24
		load_level_tiles(false);
    cd7a:	80 e0       	ldi	r24, 0x00	; 0
    cd7c:	0e 94 98 62 	call	0xc530	; 0xc530 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    cd80:	80 91 09 0c 	lds	r24, 0x0C09
    cd84:	81 11       	cpse	r24, r1
    cd86:	d1 c0       	rjmp	.+418    	; 0xcf2a <update_player+0x1fc>
    cd88:	f6 01       	movw	r30, r12
    cd8a:	85 89       	ldd	r24, Z+21	; 0x15
    cd8c:	80 fd       	sbrc	r24, 0
    cd8e:	cd c0       	rjmp	.+410    	; 0xcf2a <update_player+0x1fc>
	{
#if JAMMA
#else
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    cd90:	f8 01       	movw	r30, r16
    cd92:	80 81       	ld	r24, Z
    cd94:	91 81       	ldd	r25, Z+1	; 0x01
    cd96:	93 ff       	sbrs	r25, 3
    cd98:	1b c0       	rjmp	.+54     	; 0xcdd0 <update_player+0xa2>
    cd9a:	f6 01       	movw	r30, r12
    cd9c:	86 89       	ldd	r24, Z+22	; 0x16
    cd9e:	8a 35       	cpi	r24, 0x5A	; 90
    cda0:	b9 f4       	brne	.+46     	; 0xcdd0 <update_player+0xa2>
		{
			player->banter_frame = 0;
    cda2:	16 8a       	std	Z+22, r1	; 0x16
			player->banter_index = (u8) LBRandom(0, 9);
    cda4:	69 e0       	ldi	r22, 0x09	; 9
    cda6:	70 e0       	ldi	r23, 0x00	; 0
    cda8:	80 e0       	ldi	r24, 0x00	; 0
    cdaa:	90 e0       	ldi	r25, 0x00	; 0
    cdac:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    cdb0:	f6 01       	movw	r30, r12
    cdb2:	87 8b       	std	Z+23, r24	; 0x17
			SFX_BANTER;
    cdb4:	80 91 4f 0c 	lds	r24, 0x0C4F
    cdb8:	80 fd       	sbrc	r24, 0
    cdba:	0a c0       	rjmp	.+20     	; 0xcdd0 <update_player+0xa2>
    cdbc:	80 91 c0 0f 	lds	r24, 0x0FC0
    cdc0:	80 fd       	sbrc	r24, 0
    cdc2:	06 c0       	rjmp	.+12     	; 0xcdd0 <update_player+0xa2>
    cdc4:	2f e5       	ldi	r18, 0x5F	; 95
    cdc6:	4e e1       	ldi	r20, 0x1E	; 30
    cdc8:	60 e0       	ldi	r22, 0x00	; 0
    cdca:	84 e0       	ldi	r24, 0x04	; 4
    cdcc:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		}
#endif
		player->shared.speed = player->max_speed;
    cdd0:	f6 01       	movw	r30, r12
    cdd2:	81 8d       	ldd	r24, Z+25	; 0x19
    cdd4:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    cdd6:	f8 01       	movw	r30, r16
    cdd8:	84 81       	ldd	r24, Z+4	; 0x04
    cdda:	84 ff       	sbrs	r24, 4
    cddc:	10 c0       	rjmp	.+32     	; 0xcdfe <update_player+0xd0>
		{
			player->shared.direction = D_UP;
    cdde:	f6 01       	movw	r30, r12
    cde0:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    cde2:	b6 01       	movw	r22, r12
    cde4:	c6 01       	movw	r24, r12
    cde6:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cdea:	9b 01       	movw	r18, r22
    cdec:	ac 01       	movw	r20, r24
    cdee:	f6 01       	movw	r30, r12
    cdf0:	67 81       	ldd	r22, Z+7	; 0x07
    cdf2:	70 85       	ldd	r23, Z+8	; 0x08
    cdf4:	81 85       	ldd	r24, Z+9	; 0x09
    cdf6:	92 85       	ldd	r25, Z+10	; 0x0a
    cdf8:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    cdfc:	25 c0       	rjmp	.+74     	; 0xce48 <update_player+0x11a>
		}
		else if ((p->held & BTN_RIGHT))
    cdfe:	87 ff       	sbrs	r24, 7
    ce00:	11 c0       	rjmp	.+34     	; 0xce24 <update_player+0xf6>
		{
			player->shared.direction = D_RIGHT;
    ce02:	81 e0       	ldi	r24, 0x01	; 1
    ce04:	f6 01       	movw	r30, r12
    ce06:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    ce08:	b6 01       	movw	r22, r12
    ce0a:	c6 01       	movw	r24, r12
    ce0c:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    ce10:	9b 01       	movw	r18, r22
    ce12:	ac 01       	movw	r20, r24
    ce14:	f6 01       	movw	r30, r12
    ce16:	63 81       	ldd	r22, Z+3	; 0x03
    ce18:	74 81       	ldd	r23, Z+4	; 0x04
    ce1a:	85 81       	ldd	r24, Z+5	; 0x05
    ce1c:	96 81       	ldd	r25, Z+6	; 0x06
    ce1e:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    ce22:	2a c0       	rjmp	.+84     	; 0xce78 <update_player+0x14a>
		}
		else if ((p->held & BTN_DOWN))
    ce24:	85 ff       	sbrs	r24, 5
    ce26:	16 c0       	rjmp	.+44     	; 0xce54 <update_player+0x126>
		{
			player->shared.direction = D_DOWN;
    ce28:	82 e0       	ldi	r24, 0x02	; 2
    ce2a:	f6 01       	movw	r30, r12
    ce2c:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    ce2e:	b6 01       	movw	r22, r12
    ce30:	c6 01       	movw	r24, r12
    ce32:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    ce36:	9b 01       	movw	r18, r22
    ce38:	ac 01       	movw	r20, r24
    ce3a:	f6 01       	movw	r30, r12
    ce3c:	67 81       	ldd	r22, Z+7	; 0x07
    ce3e:	70 85       	ldd	r23, Z+8	; 0x08
    ce40:	81 85       	ldd	r24, Z+9	; 0x09
    ce42:	92 85       	ldd	r25, Z+10	; 0x0a
    ce44:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    ce48:	f6 01       	movw	r30, r12
    ce4a:	67 83       	std	Z+7, r22	; 0x07
    ce4c:	70 87       	std	Z+8, r23	; 0x08
    ce4e:	81 87       	std	Z+9, r24	; 0x09
    ce50:	92 87       	std	Z+10, r25	; 0x0a
    ce52:	1a c0       	rjmp	.+52     	; 0xce88 <update_player+0x15a>
		}
		else if ((p->held & BTN_LEFT))
    ce54:	86 ff       	sbrs	r24, 6
    ce56:	16 c0       	rjmp	.+44     	; 0xce84 <update_player+0x156>
		{
			player->shared.direction = D_LEFT;
    ce58:	83 e0       	ldi	r24, 0x03	; 3
    ce5a:	f6 01       	movw	r30, r12
    ce5c:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    ce5e:	b6 01       	movw	r22, r12
    ce60:	c6 01       	movw	r24, r12
    ce62:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    ce66:	9b 01       	movw	r18, r22
    ce68:	ac 01       	movw	r20, r24
    ce6a:	f6 01       	movw	r30, r12
    ce6c:	63 81       	ldd	r22, Z+3	; 0x03
    ce6e:	74 81       	ldd	r23, Z+4	; 0x04
    ce70:	85 81       	ldd	r24, Z+5	; 0x05
    ce72:	96 81       	ldd	r25, Z+6	; 0x06
    ce74:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    ce78:	f6 01       	movw	r30, r12
    ce7a:	63 83       	std	Z+3, r22	; 0x03
    ce7c:	74 83       	std	Z+4, r23	; 0x04
    ce7e:	85 83       	std	Z+5, r24	; 0x05
    ce80:	96 83       	std	Z+6, r25	; 0x06
    ce82:	02 c0       	rjmp	.+4      	; 0xce88 <update_player+0x15a>
		}
		else
		{
			player->shared.speed = 0;
    ce84:	f6 01       	movw	r30, r12
    ce86:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    ce88:	c8 01       	movw	r24, r16
    ce8a:	0e 94 95 58 	call	0xb12a	; 0xb12a <shoot_pressed>
    ce8e:	88 23       	and	r24, r24
    ce90:	09 f4       	brne	.+2      	; 0xce94 <update_player+0x166>
    ce92:	4b c0       	rjmp	.+150    	; 0xcf2a <update_player+0x1fc>
    ce94:	f6 01       	movw	r30, r12
    ce96:	81 89       	ldd	r24, Z+17	; 0x11
    ce98:	81 11       	cpse	r24, r1
    ce9a:	47 c0       	rjmp	.+142    	; 0xcf2a <update_player+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    ce9c:	85 ad       	ldd	r24, Z+61	; 0x3d
    ce9e:	81 11       	cpse	r24, r1
    cea0:	44 c0       	rjmp	.+136    	; 0xcf2a <update_player+0x1fc>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    cea2:	76 01       	movw	r14, r12
    cea4:	ff e2       	ldi	r31, 0x2F	; 47
    cea6:	ef 0e       	add	r14, r31
    cea8:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    ceaa:	f6 01       	movw	r30, r12
    ceac:	82 8d       	ldd	r24, Z+26	; 0x1a
    ceae:	88 23       	and	r24, r24
    ceb0:	a1 f0       	breq	.+40     	; 0xceda <update_player+0x1ac>
					{
						init_shot_state(shot, ROCKET_SHOT);
    ceb2:	61 e0       	ldi	r22, 0x01	; 1
    ceb4:	c7 01       	movw	r24, r14
    ceb6:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    ceba:	61 e0       	ldi	r22, 0x01	; 1
    cebc:	c7 01       	movw	r24, r14
    cebe:	0e 94 b9 55 	call	0xab72	; 0xab72 <set_shot_animations>
						SFX_ROCKET;
    cec2:	80 91 4f 0c 	lds	r24, 0x0C4F
    cec6:	80 fd       	sbrc	r24, 0
    cec8:	1e c0       	rjmp	.+60     	; 0xcf06 <update_player+0x1d8>
    ceca:	80 91 c0 0f 	lds	r24, 0x0FC0
    cece:	80 fd       	sbrc	r24, 0
    ced0:	1a c0       	rjmp	.+52     	; 0xcf06 <update_player+0x1d8>
    ced2:	2f ef       	ldi	r18, 0xFF	; 255
    ced4:	47 e1       	ldi	r20, 0x17	; 23
    ced6:	66 e0       	ldi	r22, 0x06	; 6
    ced8:	13 c0       	rjmp	.+38     	; 0xcf00 <update_player+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    ceda:	60 e0       	ldi	r22, 0x00	; 0
    cedc:	c7 01       	movw	r24, r14
    cede:	0e 94 9c 55 	call	0xab38	; 0xab38 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    cee2:	60 e0       	ldi	r22, 0x00	; 0
    cee4:	c7 01       	movw	r24, r14
    cee6:	0e 94 b9 55 	call	0xab72	; 0xab72 <set_shot_animations>
						SFX_CANNONBALL;
    ceea:	80 91 4f 0c 	lds	r24, 0x0C4F
    ceee:	80 fd       	sbrc	r24, 0
    cef0:	0a c0       	rjmp	.+20     	; 0xcf06 <update_player+0x1d8>
    cef2:	80 91 c0 0f 	lds	r24, 0x0FC0
    cef6:	80 fd       	sbrc	r24, 0
    cef8:	06 c0       	rjmp	.+12     	; 0xcf06 <update_player+0x1d8>
    cefa:	2f ef       	ldi	r18, 0xFF	; 255
    cefc:	47 e1       	ldi	r20, 0x17	; 23
    cefe:	62 e0       	ldi	r22, 0x02	; 2
    cf00:	84 e0       	ldi	r24, 0x04	; 4
    cf02:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
					}
					player->active_shots++;
    cf06:	f6 01       	movw	r30, r12
    cf08:	81 89       	ldd	r24, Z+17	; 0x11
    cf0a:	8f 5f       	subi	r24, 0xFF	; 255
    cf0c:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    cf0e:	80 81       	ld	r24, Z
    cf10:	87 a7       	std	Z+47, r24	; 0x2f
					position_shot(player, shot);
    cf12:	b7 01       	movw	r22, r14
    cf14:	c6 01       	movw	r24, r12
    cf16:	0e 94 8c 57 	call	0xaf18	; 0xaf18 <position_shot>
					shot->active = 1;
    cf1a:	81 e0       	ldi	r24, 0x01	; 1
    cf1c:	f6 01       	movw	r30, r12
    cf1e:	85 af       	std	Z+61, r24	; 0x3d
					if (player->has_over_speed)
    cf20:	83 8d       	ldd	r24, Z+27	; 0x1b
    cf22:	88 23       	and	r24, r24
    cf24:	11 f0       	breq	.+4      	; 0xcf2a <update_player+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    cf26:	8a ea       	ldi	r24, 0xAA	; 170
    cf28:	80 ab       	std	Z+48, r24	; 0x30
				}
			}
		}
	}
	
	if (!game.paused)
    cf2a:	80 91 09 0c 	lds	r24, 0x0C09
    cf2e:	81 11       	cpse	r24, r1
    cf30:	86 c0       	rjmp	.+268    	; 0xd03e <update_player+0x310>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    cf32:	86 01       	movw	r16, r12
    cf34:	01 5d       	subi	r16, 0xD1	; 209
    cf36:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    cf38:	f6 01       	movw	r30, r12
    cf3a:	85 ad       	ldd	r24, Z+61	; 0x3d
    cf3c:	88 23       	and	r24, r24
    cf3e:	09 f4       	brne	.+2      	; 0xcf42 <update_player+0x214>
    cf40:	97 c0       	rjmp	.+302    	; 0xd070 <update_player+0x342>
			{
				switch (shot->shared.direction)
    cf42:	87 a5       	ldd	r24, Z+47	; 0x2f
    cf44:	81 30       	cpi	r24, 0x01	; 1
    cf46:	11 f1       	breq	.+68     	; 0xcf8c <update_player+0x25e>
    cf48:	98 f0       	brcs	.+38     	; 0xcf70 <update_player+0x242>
    cf4a:	82 30       	cpi	r24, 0x02	; 2
    cf4c:	69 f1       	breq	.+90     	; 0xcfa8 <update_player+0x27a>
    cf4e:	83 30       	cpi	r24, 0x03	; 3
    cf50:	09 f0       	breq	.+2      	; 0xcf54 <update_player+0x226>
    cf52:	42 c0       	rjmp	.+132    	; 0xcfd8 <update_player+0x2aa>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    cf54:	b8 01       	movw	r22, r16
    cf56:	c6 01       	movw	r24, r12
    cf58:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cf5c:	9b 01       	movw	r18, r22
    cf5e:	ac 01       	movw	r20, r24
    cf60:	f6 01       	movw	r30, r12
    cf62:	62 a9       	ldd	r22, Z+50	; 0x32
    cf64:	73 a9       	ldd	r23, Z+51	; 0x33
    cf66:	84 a9       	ldd	r24, Z+52	; 0x34
    cf68:	95 a9       	ldd	r25, Z+53	; 0x35
    cf6a:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    cf6e:	2f c0       	rjmp	.+94     	; 0xcfce <update_player+0x2a0>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    cf70:	b8 01       	movw	r22, r16
    cf72:	c6 01       	movw	r24, r12
    cf74:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cf78:	9b 01       	movw	r18, r22
    cf7a:	ac 01       	movw	r20, r24
    cf7c:	f6 01       	movw	r30, r12
    cf7e:	66 a9       	ldd	r22, Z+54	; 0x36
    cf80:	77 a9       	ldd	r23, Z+55	; 0x37
    cf82:	80 ad       	ldd	r24, Z+56	; 0x38
    cf84:	91 ad       	ldd	r25, Z+57	; 0x39
    cf86:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    cf8a:	1b c0       	rjmp	.+54     	; 0xcfc2 <update_player+0x294>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    cf8c:	b8 01       	movw	r22, r16
    cf8e:	c6 01       	movw	r24, r12
    cf90:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cf94:	9b 01       	movw	r18, r22
    cf96:	ac 01       	movw	r20, r24
    cf98:	f6 01       	movw	r30, r12
    cf9a:	62 a9       	ldd	r22, Z+50	; 0x32
    cf9c:	73 a9       	ldd	r23, Z+51	; 0x33
    cf9e:	84 a9       	ldd	r24, Z+52	; 0x34
    cfa0:	95 a9       	ldd	r25, Z+53	; 0x35
    cfa2:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    cfa6:	13 c0       	rjmp	.+38     	; 0xcfce <update_player+0x2a0>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    cfa8:	b8 01       	movw	r22, r16
    cfaa:	c6 01       	movw	r24, r12
    cfac:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cfb0:	9b 01       	movw	r18, r22
    cfb2:	ac 01       	movw	r20, r24
    cfb4:	f6 01       	movw	r30, r12
    cfb6:	66 a9       	ldd	r22, Z+54	; 0x36
    cfb8:	77 a9       	ldd	r23, Z+55	; 0x37
    cfba:	80 ad       	ldd	r24, Z+56	; 0x38
    cfbc:	91 ad       	ldd	r25, Z+57	; 0x39
    cfbe:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    cfc2:	f6 01       	movw	r30, r12
    cfc4:	66 ab       	std	Z+54, r22	; 0x36
    cfc6:	77 ab       	std	Z+55, r23	; 0x37
    cfc8:	80 af       	std	Z+56, r24	; 0x38
    cfca:	91 af       	std	Z+57, r25	; 0x39
    cfcc:	05 c0       	rjmp	.+10     	; 0xcfd8 <update_player+0x2aa>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    cfce:	f6 01       	movw	r30, r12
    cfd0:	62 ab       	std	Z+50, r22	; 0x32
    cfd2:	73 ab       	std	Z+51, r23	; 0x33
    cfd4:	84 ab       	std	Z+52, r24	; 0x34
    cfd6:	95 ab       	std	Z+53, r25	; 0x35
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    cfd8:	f6 01       	movw	r30, r12
    cfda:	f6 ac       	ldd	r15, Z+62	; 0x3e
    cfdc:	f8 e0       	ldi	r31, 0x08	; 8
    cfde:	ff 15       	cp	r31, r15
    cfe0:	38 f0       	brcs	.+14     	; 0xcff0 <update_player+0x2c2>
    cfe2:	b8 01       	movw	r22, r16
    cfe4:	c6 01       	movw	r24, r12
    cfe6:	0e 94 9f 58 	call	0xb13e	; 0xb13e <get_delta>
    cfea:	9b 01       	movw	r18, r22
    cfec:	ac 01       	movw	r20, r24
    cfee:	03 c0       	rjmp	.+6      	; 0xcff6 <update_player+0x2c8>
    cff0:	20 e0       	ldi	r18, 0x00	; 0
    cff2:	30 e0       	ldi	r19, 0x00	; 0
    cff4:	a9 01       	movw	r20, r18
    cff6:	6f 2d       	mov	r22, r15
    cff8:	70 e0       	ldi	r23, 0x00	; 0
    cffa:	80 e0       	ldi	r24, 0x00	; 0
    cffc:	90 e0       	ldi	r25, 0x00	; 0
    cffe:	29 83       	std	Y+1, r18	; 0x01
    d000:	3a 83       	std	Y+2, r19	; 0x02
    d002:	4b 83       	std	Y+3, r20	; 0x03
    d004:	5c 83       	std	Y+4, r21	; 0x04
    d006:	0e 94 11 75 	call	0xea22	; 0xea22 <__floatsisf>
    d00a:	29 81       	ldd	r18, Y+1	; 0x01
    d00c:	3a 81       	ldd	r19, Y+2	; 0x02
    d00e:	4b 81       	ldd	r20, Y+3	; 0x03
    d010:	5c 81       	ldd	r21, Y+4	; 0x04
    d012:	0e 94 0e 74 	call	0xe81c	; 0xe81c <__addsf3>
    d016:	0e 94 e3 74 	call	0xe9c6	; 0xe9c6 <__fixunssfsi>
    d01a:	f6 01       	movw	r30, r12
    d01c:	66 af       	std	Z+62, r22	; 0x3e
				collision_detect_shot(player, shot);
    d01e:	b8 01       	movw	r22, r16
    d020:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    d022:	0f 90       	pop	r0
    d024:	0f 90       	pop	r0
    d026:	0f 90       	pop	r0
    d028:	0f 90       	pop	r0
    d02a:	df 91       	pop	r29
    d02c:	cf 91       	pop	r28
    d02e:	1f 91       	pop	r17
    d030:	0f 91       	pop	r16
    d032:	ff 90       	pop	r15
    d034:	ef 90       	pop	r14
    d036:	df 90       	pop	r13
    d038:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d03a:	0c 94 d2 5d 	jmp	0xbba4	; 0xbba4 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d03e:	f8 01       	movw	r30, r16
    d040:	80 81       	ld	r24, Z
    d042:	91 81       	ldd	r25, Z+1	; 0x01
    d044:	91 ff       	sbrs	r25, 1
    d046:	14 c0       	rjmp	.+40     	; 0xd070 <update_player+0x342>
		{
			SFX_NAVIGATE;
    d048:	2f ef       	ldi	r18, 0xFF	; 255
    d04a:	47 e1       	ldi	r20, 0x17	; 23
    d04c:	65 e0       	ldi	r22, 0x05	; 5
    d04e:	84 e0       	ldi	r24, 0x04	; 4
    d050:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
			exit_game();
		}
	}
}
    d054:	0f 90       	pop	r0
    d056:	0f 90       	pop	r0
    d058:	0f 90       	pop	r0
    d05a:	0f 90       	pop	r0
    d05c:	df 91       	pop	r29
    d05e:	cf 91       	pop	r28
    d060:	1f 91       	pop	r17
    d062:	0f 91       	pop	r16
    d064:	ff 90       	pop	r15
    d066:	ef 90       	pop	r14
    d068:	df 90       	pop	r13
    d06a:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    d06c:	0c 94 8f 66 	jmp	0xcd1e	; 0xcd1e <exit_game>
		}
	}
}
    d070:	0f 90       	pop	r0
    d072:	0f 90       	pop	r0
    d074:	0f 90       	pop	r0
    d076:	0f 90       	pop	r0
    d078:	df 91       	pop	r29
    d07a:	cf 91       	pop	r28
    d07c:	1f 91       	pop	r17
    d07e:	0f 91       	pop	r16
    d080:	ff 90       	pop	r15
    d082:	ef 90       	pop	r14
    d084:	df 90       	pop	r13
    d086:	cf 90       	pop	r12
    d088:	08 95       	ret

0000d08a <resolve_scoring>:

void resolve_scoring()
{
    d08a:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    d08c:	c0 91 08 0c 	lds	r28, 0x0C08
    d090:	80 91 4a 0c 	lds	r24, 0x0C4A
    d094:	ca 30       	cpi	r28, 0x0A	; 10
    d096:	80 f5       	brcc	.+96     	; 0xd0f8 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    d098:	8a 30       	cpi	r24, 0x0A	; 10
    d09a:	70 f0       	brcs	.+28     	; 0xd0b8 <resolve_scoring+0x2e>
    d09c:	80 91 c0 0f 	lds	r24, 0x0FC0
    d0a0:	80 fd       	sbrc	r24, 0
    d0a2:	0a c0       	rjmp	.+20     	; 0xd0b8 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    d0a4:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <LBHideAllSprites>
			load_level_tiles(true);
    d0a8:	81 e0       	ldi	r24, 0x01	; 1
    d0aa:	0e 94 98 62 	call	0xc530	; 0xc530 <load_level_tiles>
			print_level_score(&player1, &player2);
    d0ae:	6b ea       	ldi	r22, 0xAB	; 171
    d0b0:	7f e0       	ldi	r23, 0x0F	; 15
    d0b2:	8a e3       	ldi	r24, 0x3A	; 58
    d0b4:	9c e0       	ldi	r25, 0x0C	; 12
    d0b6:	12 c0       	rjmp	.+36     	; 0xd0dc <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    d0b8:	80 91 bb 0f 	lds	r24, 0x0FBB
    d0bc:	8a 30       	cpi	r24, 0x0A	; 10
    d0be:	08 f4       	brcc	.+2      	; 0xd0c2 <resolve_scoring+0x38>
    d0c0:	a7 c0       	rjmp	.+334    	; 0xd210 <resolve_scoring+0x186>
    d0c2:	80 91 4f 0c 	lds	r24, 0x0C4F
    d0c6:	80 fd       	sbrc	r24, 0
    d0c8:	a3 c0       	rjmp	.+326    	; 0xd210 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    d0ca:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <LBHideAllSprites>
			load_level_tiles(true);
    d0ce:	81 e0       	ldi	r24, 0x01	; 1
    d0d0:	0e 94 98 62 	call	0xc530	; 0xc530 <load_level_tiles>
			print_level_score(&player2, &player1);
    d0d4:	6a e3       	ldi	r22, 0x3A	; 58
    d0d6:	7c e0       	ldi	r23, 0x0C	; 12
    d0d8:	8b ea       	ldi	r24, 0xAB	; 171
    d0da:	9f e0       	ldi	r25, 0x0F	; 15
    d0dc:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d0e0:	84 e0       	ldi	r24, 0x04	; 4
    d0e2:	0e 94 18 55 	call	0xaa30	; 0xaa30 <LBWaitSeconds>
			player1.level_score = 0;
    d0e6:	10 92 4a 0c 	sts	0x0C4A, r1
			player2.level_score = 0;
    d0ea:	10 92 bb 0f 	sts	0x0FBB, r1
			level_transition(next_level);
    d0ee:	81 e0       	ldi	r24, 0x01	; 1
    d0f0:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    d0f2:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    d0f4:	0c 94 c1 63 	jmp	0xc782	; 0xc782 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    d0f8:	8a 30       	cpi	r24, 0x0A	; 10
    d0fa:	28 f4       	brcc	.+10     	; 0xd106 <resolve_scoring+0x7c>
    d0fc:	80 91 bb 0f 	lds	r24, 0x0FBB
    d100:	8a 30       	cpi	r24, 0x0A	; 10
    d102:	08 f4       	brcc	.+2      	; 0xd106 <resolve_scoring+0x7c>
    d104:	85 c0       	rjmp	.+266    	; 0xd210 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    d106:	90 91 49 0c 	lds	r25, 0x0C49
    d10a:	80 91 ba 0f 	lds	r24, 0x0FBA
    d10e:	98 17       	cp	r25, r24
    d110:	09 f4       	brne	.+2      	; 0xd114 <resolve_scoring+0x8a>
    d112:	7e c0       	rjmp	.+252    	; 0xd210 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    d114:	20 91 0a 0c 	lds	r18, 0x0C0A
    d118:	21 11       	cpse	r18, r1
    d11a:	46 c0       	rjmp	.+140    	; 0xd1a8 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    d11c:	c1 e0       	ldi	r28, 0x01	; 1
    d11e:	c0 93 0a 0c 	sts	0x0C0A, r28
				if (player1.score > player2.score)
    d122:	89 17       	cp	r24, r25
    d124:	e8 f4       	brcc	.+58     	; 0xd160 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    d126:	8a e3       	ldi	r24, 0x3A	; 58
    d128:	9c e0       	ldi	r25, 0x0C	; 12
    d12a:	90 93 19 0c 	sts	0x0C19, r25
    d12e:	80 93 18 0c 	sts	0x0C18, r24
					game.boss_fight_joypad = &p1;
    d132:	85 eb       	ldi	r24, 0xB5	; 181
    d134:	9c e0       	ldi	r25, 0x0C	; 12
    d136:	90 93 1b 0c 	sts	0x0C1B, r25
    d13a:	80 93 1a 0c 	sts	0x0C1A, r24
					game.boss_fight_player_hud = 0;
    d13e:	10 92 0b 0c 	sts	0x0C0B, r1
					kill_player(&player2, 15);
    d142:	6f e0       	ldi	r22, 0x0F	; 15
    d144:	8b ea       	ldi	r24, 0xAB	; 171
    d146:	9f e0       	ldi	r25, 0x0F	; 15
    d148:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <kill_player>
					player_spawn(&player2);
    d14c:	8b ea       	ldi	r24, 0xAB	; 171
    d14e:	9f e0       	ldi	r25, 0x0F	; 15
    d150:	0e 94 c3 56 	call	0xad86	; 0xad86 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    d154:	80 91 c0 0f 	lds	r24, 0x0FC0
    d158:	c8 27       	eor	r28, r24
    d15a:	c0 93 c0 0f 	sts	0x0FC0, r28
    d15e:	1d c0       	rjmp	.+58     	; 0xd19a <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    d160:	8b ea       	ldi	r24, 0xAB	; 171
    d162:	9f e0       	ldi	r25, 0x0F	; 15
    d164:	90 93 19 0c 	sts	0x0C19, r25
    d168:	80 93 18 0c 	sts	0x0C18, r24
					game.boss_fight_joypad = &p2;
    d16c:	80 ee       	ldi	r24, 0xE0	; 224
    d16e:	9b e0       	ldi	r25, 0x0B	; 11
    d170:	90 93 1b 0c 	sts	0x0C1B, r25
    d174:	80 93 1a 0c 	sts	0x0C1A, r24
					game.boss_fight_player_hud = 15;
    d178:	8f e0       	ldi	r24, 0x0F	; 15
    d17a:	80 93 0b 0c 	sts	0x0C0B, r24
					kill_player(&player1, 0);
    d17e:	60 e0       	ldi	r22, 0x00	; 0
    d180:	8a e3       	ldi	r24, 0x3A	; 58
    d182:	9c e0       	ldi	r25, 0x0C	; 12
    d184:	0e 94 f9 5c 	call	0xb9f2	; 0xb9f2 <kill_player>
					player_spawn(&player1);
    d188:	8a e3       	ldi	r24, 0x3A	; 58
    d18a:	9c e0       	ldi	r25, 0x0C	; 12
    d18c:	0e 94 c3 56 	call	0xad86	; 0xad86 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    d190:	80 91 4f 0c 	lds	r24, 0x0C4F
    d194:	c8 27       	eor	r28, r24
    d196:	c0 93 4f 0c 	sts	0x0C4F, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    d19a:	85 ea       	ldi	r24, 0xA5	; 165
    d19c:	90 e0       	ldi	r25, 0x00	; 0
    d19e:	90 93 41 10 	sts	0x1041, r25
    d1a2:	80 93 40 10 	sts	0x1040, r24
				return;
    d1a6:	34 c0       	rjmp	.+104    	; 0xd210 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    d1a8:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <LBHideAllSprites>
			load_level_tiles(true);
    d1ac:	81 e0       	ldi	r24, 0x01	; 1
    d1ae:	0e 94 98 62 	call	0xc530	; 0xc530 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    d1b2:	90 91 4a 0c 	lds	r25, 0x0C4A
    d1b6:	80 91 bb 0f 	lds	r24, 0x0FBB
    d1ba:	89 17       	cp	r24, r25
    d1bc:	28 f4       	brcc	.+10     	; 0xd1c8 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    d1be:	6b ea       	ldi	r22, 0xAB	; 171
    d1c0:	7f e0       	ldi	r23, 0x0F	; 15
    d1c2:	8a e3       	ldi	r24, 0x3A	; 58
    d1c4:	9c e0       	ldi	r25, 0x0C	; 12
    d1c6:	04 c0       	rjmp	.+8      	; 0xd1d0 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    d1c8:	6a e3       	ldi	r22, 0x3A	; 58
    d1ca:	7c e0       	ldi	r23, 0x0C	; 12
    d1cc:	8b ea       	ldi	r24, 0xAB	; 171
    d1ce:	9f e0       	ldi	r25, 0x0F	; 15
    d1d0:	0e 94 f9 57 	call	0xaff2	; 0xaff2 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    d1d4:	84 e0       	ldi	r24, 0x04	; 4
    d1d6:	0e 94 18 55 	call	0xaa30	; 0xaa30 <LBWaitSeconds>
			player1.level_score = 0;
    d1da:	10 92 4a 0c 	sts	0x0C4A, r1
			player2.level_score = 0;
    d1de:	10 92 bb 0f 	sts	0x0FBB, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    d1e2:	90 91 49 0c 	lds	r25, 0x0C49
    d1e6:	80 91 ba 0f 	lds	r24, 0x0FBA
    d1ea:	89 17       	cp	r24, r25
    d1ec:	28 f4       	brcc	.+10     	; 0xd1f8 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    d1ee:	6b ea       	ldi	r22, 0xAB	; 171
    d1f0:	7f e0       	ldi	r23, 0x0F	; 15
    d1f2:	8a e3       	ldi	r24, 0x3A	; 58
    d1f4:	9c e0       	ldi	r25, 0x0C	; 12
    d1f6:	04 c0       	rjmp	.+8      	; 0xd200 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    d1f8:	6a e3       	ldi	r22, 0x3A	; 58
    d1fa:	7c e0       	ldi	r23, 0x0C	; 12
    d1fc:	8b ea       	ldi	r24, 0xAB	; 171
    d1fe:	9f e0       	ldi	r25, 0x0F	; 15
    d200:	0e 94 3b 58 	call	0xb076	; 0xb076 <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    d204:	84 e0       	ldi	r24, 0x04	; 4
    d206:	0e 94 18 55 	call	0xaa30	; 0xaa30 <LBWaitSeconds>
			exit_game();
		}
	}
}
    d20a:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    d20c:	0c 94 8f 66 	jmp	0xcd1e	; 0xcd1e <exit_game>
		}
	}
}
    d210:	cf 91       	pop	r28
    d212:	08 95       	ret

0000d214 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d214:	df 92       	push	r13
    d216:	ef 92       	push	r14
    d218:	ff 92       	push	r15
    d21a:	0f 93       	push	r16
    d21c:	1f 93       	push	r17
    d21e:	cf 93       	push	r28
    d220:	df 93       	push	r29
    d222:	8c 01       	movw	r16, r24
    d224:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    d226:	80 91 09 0c 	lds	r24, 0x0C09
    d22a:	88 23       	and	r24, r24
    d22c:	19 f1       	breq	.+70     	; 0xd274 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    d22e:	0e 94 27 55 	call	0xaa4e	; 0xaa4e <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    d232:	45 e6       	ldi	r20, 0x65	; 101
    d234:	5e e7       	ldi	r21, 0x7E	; 126
    d236:	6c e0       	ldi	r22, 0x0C	; 12
    d238:	88 e0       	ldi	r24, 0x08	; 8
    d23a:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
		Print(12, 13, (char*) strPaused);
    d23e:	4a e1       	ldi	r20, 0x1A	; 26
    d240:	52 e0       	ldi	r21, 0x02	; 2
    d242:	6d e0       	ldi	r22, 0x0D	; 13
    d244:	70 e0       	ldi	r23, 0x00	; 0
    d246:	8c e0       	ldi	r24, 0x0C	; 12
    d248:	90 e0       	ldi	r25, 0x00	; 0
    d24a:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
		Print(11, 14, (char*) strExit);
    d24e:	41 e2       	ldi	r20, 0x21	; 33
    d250:	52 e0       	ldi	r21, 0x02	; 2
    d252:	6e e0       	ldi	r22, 0x0E	; 14
    d254:	70 e0       	ldi	r23, 0x00	; 0
    d256:	8b e0       	ldi	r24, 0x0B	; 11
    d258:	90 e0       	ldi	r25, 0x00	; 0
    d25a:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
		
		// Update
		update_player(p1, &player1);
    d25e:	6a e3       	ldi	r22, 0x3A	; 58
    d260:	7c e0       	ldi	r23, 0x0C	; 12
    d262:	c8 01       	movw	r24, r16
    d264:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
		update_player(p2, &player2);
    d268:	6b ea       	ldi	r22, 0xAB	; 171
    d26a:	7f e0       	ldi	r23, 0x0F	; 15
    d26c:	ce 01       	movw	r24, r28
    d26e:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
    d272:	d8 c1       	rjmp	.+944    	; 0xd624 <update_level+0x410>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d274:	90 91 0a 0c 	lds	r25, 0x0C0A
    d278:	91 30       	cpi	r25, 0x01	; 1
    d27a:	19 f4       	brne	.+6      	; 0xd282 <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    d27c:	0e 94 f1 63 	call	0xc7e2	; 0xc7e2 <render_boss_fight_scope_load>
    d280:	05 c0       	rjmp	.+10     	; 0xd28c <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d282:	92 30       	cpi	r25, 0x02	; 2
    d284:	09 f0       	breq	.+2      	; 0xd288 <update_level+0x74>
    d286:	4e c0       	rjmp	.+156    	; 0xd324 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    d288:	0e 94 00 64 	call	0xc800	; 0xc800 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d28c:	60 e0       	ldi	r22, 0x00	; 0
    d28e:	80 91 18 0c 	lds	r24, 0x0C18
    d292:	90 91 19 0c 	lds	r25, 0x0C19
    d296:	0e 94 c5 59 	call	0xb38a	; 0xb38a <tank_map>
    d29a:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d29c:	40 e0       	ldi	r20, 0x00	; 0
    d29e:	68 e9       	ldi	r22, 0x98	; 152
    d2a0:	74 e4       	ldi	r23, 0x44	; 68
    d2a2:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d2a6:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d2a8:	6c 2f       	mov	r22, r28
    d2aa:	80 91 18 0c 	lds	r24, 0x0C18
    d2ae:	90 91 19 0c 	lds	r25, 0x0C19
    d2b2:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
    d2b6:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d2b8:	40 e0       	ldi	r20, 0x00	; 0
    d2ba:	6e e9       	ldi	r22, 0x9E	; 158
    d2bc:	74 e4       	ldi	r23, 0x44	; 68
    d2be:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d2c2:	6c 2f       	mov	r22, r28
    d2c4:	80 91 18 0c 	lds	r24, 0x0C18
    d2c8:	90 91 19 0c 	lds	r25, 0x0C19
    d2cc:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d2d0:	60 e0       	ldi	r22, 0x00	; 0
    d2d2:	80 91 18 0c 	lds	r24, 0x0C18
    d2d6:	90 91 19 0c 	lds	r25, 0x0C19
    d2da:	0e 94 21 59 	call	0xb242	; 0xb242 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d2de:	6c 2f       	mov	r22, r28
    d2e0:	80 91 18 0c 	lds	r24, 0x0C18
    d2e4:	90 91 19 0c 	lds	r25, 0x0C19
    d2e8:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_shot(&player2, p2_shot_index);
    d2ec:	6d 2f       	mov	r22, r29
    d2ee:	8b ea       	ldi	r24, 0xAB	; 171
    d2f0:	9f e0       	ldi	r25, 0x0F	; 15
    d2f2:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_tile_explosions(&tile_animations);
    d2f6:	8d e1       	ldi	r24, 0x1D	; 29
    d2f8:	9c e0       	ldi	r25, 0x0C	; 12
    d2fa:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d2fe:	60 91 18 0c 	lds	r22, 0x0C18
    d302:	70 91 19 0c 	lds	r23, 0x0C19
    d306:	80 91 1a 0c 	lds	r24, 0x0C1A
    d30a:	90 91 1b 0c 	lds	r25, 0x0C1B
    d30e:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d312:	60 91 0b 0c 	lds	r22, 0x0C0B
    d316:	80 91 18 0c 	lds	r24, 0x0C18
    d31a:	90 91 19 0c 	lds	r25, 0x0C19
    d31e:	0e 94 fa 60 	call	0xc1f4	; 0xc1f4 <collision_detect_player>
    d322:	80 c1       	rjmp	.+768    	; 0xd624 <update_level+0x410>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d324:	94 30       	cpi	r25, 0x04	; 4
    d326:	09 f0       	breq	.+2      	; 0xd32a <update_level+0x116>
    d328:	94 c0       	rjmp	.+296    	; 0xd452 <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d32a:	80 91 81 10 	lds	r24, 0x1081
    d32e:	81 11       	cpse	r24, r1
    d330:	07 c0       	rjmp	.+14     	; 0xd340 <update_level+0x12c>
    d332:	80 91 4d 10 	lds	r24, 0x104D
    d336:	81 11       	cpse	r24, r1
    d338:	03 c0       	rjmp	.+6      	; 0xd340 <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d33a:	80 e2       	ldi	r24, 0x20	; 32
    d33c:	80 93 0a 0c 	sts	0x0C0A, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d340:	60 e0       	ldi	r22, 0x00	; 0
    d342:	80 91 18 0c 	lds	r24, 0x0C18
    d346:	90 91 19 0c 	lds	r25, 0x0C19
    d34a:	0e 94 c5 59 	call	0xb38a	; 0xb38a <tank_map>
    d34e:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d350:	68 2f       	mov	r22, r24
    d352:	80 91 18 0c 	lds	r24, 0x0C18
    d356:	90 91 19 0c 	lds	r25, 0x0C19
    d35a:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
    d35e:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d360:	01 e0       	ldi	r16, 0x01	; 1
    d362:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d364:	12 e0       	ldi	r17, 0x02	; 2
    d366:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d368:	d3 e0       	ldi	r29, 0x03	; 3
    d36a:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d36c:	80 91 81 10 	lds	r24, 0x1081
    d370:	88 23       	and	r24, r24
    d372:	19 f0       	breq	.+6      	; 0xd37a <update_level+0x166>
	return (char*) map_sub_turret;
    d374:	60 e5       	ldi	r22, 0x50	; 80
    d376:	74 e4       	ldi	r23, 0x44	; 68
    d378:	02 c0       	rjmp	.+4      	; 0xd37e <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d37a:	6e e9       	ldi	r22, 0x9E	; 158
    d37c:	74 e4       	ldi	r23, 0x44	; 68
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d37e:	40 e0       	ldi	r20, 0x00	; 0
    d380:	8c 2f       	mov	r24, r28
    d382:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d386:	80 91 81 10 	lds	r24, 0x1081
    d38a:	88 23       	and	r24, r24
    d38c:	19 f0       	breq	.+6      	; 0xd394 <update_level+0x180>
	return (char*) map_sub_shot;
    d38e:	63 e5       	ldi	r22, 0x53	; 83
    d390:	74 e4       	ldi	r23, 0x44	; 68
    d392:	02 c0       	rjmp	.+4      	; 0xd398 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d394:	6e e9       	ldi	r22, 0x9E	; 158
    d396:	74 e4       	ldi	r23, 0x44	; 68
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d398:	40 e0       	ldi	r20, 0x00	; 0
    d39a:	80 2f       	mov	r24, r16
    d39c:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d3a0:	80 91 4d 10 	lds	r24, 0x104D
    d3a4:	88 23       	and	r24, r24
    d3a6:	19 f0       	breq	.+6      	; 0xd3ae <update_level+0x19a>
	return (char*) map_sub_turret;
    d3a8:	60 e5       	ldi	r22, 0x50	; 80
    d3aa:	74 e4       	ldi	r23, 0x44	; 68
    d3ac:	02 c0       	rjmp	.+4      	; 0xd3b2 <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d3ae:	6e e9       	ldi	r22, 0x9E	; 158
    d3b0:	74 e4       	ldi	r23, 0x44	; 68
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d3b2:	40 e0       	ldi	r20, 0x00	; 0
    d3b4:	81 2f       	mov	r24, r17
    d3b6:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d3ba:	80 91 4d 10 	lds	r24, 0x104D
    d3be:	88 23       	and	r24, r24
    d3c0:	19 f0       	breq	.+6      	; 0xd3c8 <update_level+0x1b4>
	return (char*) map_sub_shot;
    d3c2:	63 e5       	ldi	r22, 0x53	; 83
    d3c4:	74 e4       	ldi	r23, 0x44	; 68
    d3c6:	02 c0       	rjmp	.+4      	; 0xd3cc <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d3c8:	6e e9       	ldi	r22, 0x9E	; 158
    d3ca:	74 e4       	ldi	r23, 0x44	; 68
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d3cc:	40 e0       	ldi	r20, 0x00	; 0
    d3ce:	8d 2f       	mov	r24, r29
    d3d0:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d3d4:	60 e0       	ldi	r22, 0x00	; 0
    d3d6:	80 91 18 0c 	lds	r24, 0x0C18
    d3da:	90 91 19 0c 	lds	r25, 0x0C19
    d3de:	0e 94 21 59 	call	0xb242	; 0xb242 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d3e2:	6f 2d       	mov	r22, r15
    d3e4:	80 91 18 0c 	lds	r24, 0x0C18
    d3e8:	90 91 19 0c 	lds	r25, 0x0C19
    d3ec:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_tile_explosions(&tile_animations);
    d3f0:	8d e1       	ldi	r24, 0x1D	; 29
    d3f2:	9c e0       	ldi	r25, 0x0C	; 12
    d3f4:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d3f8:	6c 2f       	mov	r22, r28
    d3fa:	86 e7       	ldi	r24, 0x76	; 118
    d3fc:	90 e1       	ldi	r25, 0x10	; 16
    d3fe:	0e 94 42 64 	call	0xc884	; 0xc884 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d402:	60 2f       	mov	r22, r16
    d404:	86 e7       	ldi	r24, 0x76	; 118
    d406:	90 e1       	ldi	r25, 0x10	; 16
    d408:	0e 94 6b 64 	call	0xc8d6	; 0xc8d6 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d40c:	61 2f       	mov	r22, r17
    d40e:	82 e4       	ldi	r24, 0x42	; 66
    d410:	90 e1       	ldi	r25, 0x10	; 16
    d412:	0e 94 42 64 	call	0xc884	; 0xc884 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d416:	6d 2f       	mov	r22, r29
    d418:	82 e4       	ldi	r24, 0x42	; 66
    d41a:	90 e1       	ldi	r25, 0x10	; 16
    d41c:	0e 94 6b 64 	call	0xc8d6	; 0xc8d6 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d420:	40 e6       	ldi	r20, 0x60	; 96
    d422:	68 e2       	ldi	r22, 0x28	; 40
    d424:	86 e7       	ldi	r24, 0x76	; 118
    d426:	90 e1       	ldi	r25, 0x10	; 16
    d428:	0e 94 94 64 	call	0xc928	; 0xc928 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d42c:	40 ec       	ldi	r20, 0xC0	; 192
    d42e:	68 e8       	ldi	r22, 0x88	; 136
    d430:	82 e4       	ldi	r24, 0x42	; 66
    d432:	90 e1       	ldi	r25, 0x10	; 16
    d434:	0e 94 94 64 	call	0xc928	; 0xc928 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d438:	62 e8       	ldi	r22, 0x82	; 130
    d43a:	70 e1       	ldi	r23, 0x10	; 16
    d43c:	86 e7       	ldi	r24, 0x76	; 118
    d43e:	90 e1       	ldi	r25, 0x10	; 16
    d440:	0e 94 2b 65 	call	0xca56	; 0xca56 <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    d444:	6e e4       	ldi	r22, 0x4E	; 78
    d446:	70 e1       	ldi	r23, 0x10	; 16
    d448:	82 e4       	ldi	r24, 0x42	; 66
    d44a:	90 e1       	ldi	r25, 0x10	; 16
    d44c:	0e 94 2b 65 	call	0xca56	; 0xca56 <update_turret_shot>
    d450:	56 cf       	rjmp	.-340    	; 0xd2fe <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    d452:	90 32       	cpi	r25, 0x20	; 32
    d454:	09 f0       	breq	.+2      	; 0xd458 <update_level+0x244>
    d456:	55 c0       	rjmp	.+170    	; 0xd502 <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    d458:	0e 94 2d 64 	call	0xc85a	; 0xc85a <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d45c:	60 e0       	ldi	r22, 0x00	; 0
    d45e:	80 91 18 0c 	lds	r24, 0x0C18
    d462:	90 91 19 0c 	lds	r25, 0x0C19
    d466:	0e 94 c5 59 	call	0xb38a	; 0xb38a <tank_map>
    d46a:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d46c:	40 e0       	ldi	r20, 0x00	; 0
    d46e:	68 e9       	ldi	r22, 0x98	; 152
    d470:	74 e4       	ldi	r23, 0x44	; 68
    d472:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d476:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d478:	6c 2f       	mov	r22, r28
    d47a:	80 91 18 0c 	lds	r24, 0x0C18
    d47e:	90 91 19 0c 	lds	r25, 0x0C19
    d482:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
    d486:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d488:	40 e0       	ldi	r20, 0x00	; 0
    d48a:	6e e9       	ldi	r22, 0x9E	; 158
    d48c:	74 e4       	ldi	r23, 0x44	; 68
    d48e:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d492:	6c 2f       	mov	r22, r28
    d494:	80 91 18 0c 	lds	r24, 0x0C18
    d498:	90 91 19 0c 	lds	r25, 0x0C19
    d49c:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d4a0:	60 e0       	ldi	r22, 0x00	; 0
    d4a2:	80 91 18 0c 	lds	r24, 0x0C18
    d4a6:	90 91 19 0c 	lds	r25, 0x0C19
    d4aa:	0e 94 21 59 	call	0xb242	; 0xb242 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d4ae:	6c 2f       	mov	r22, r28
    d4b0:	80 91 18 0c 	lds	r24, 0x0C18
    d4b4:	90 91 19 0c 	lds	r25, 0x0C19
    d4b8:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_shot(&player2, p2_shot_index);
    d4bc:	6d 2f       	mov	r22, r29
    d4be:	8b ea       	ldi	r24, 0xAB	; 171
    d4c0:	9f e0       	ldi	r25, 0x0F	; 15
    d4c2:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_tile_explosions(&tile_animations);
    d4c6:	8d e1       	ldi	r24, 0x1D	; 29
    d4c8:	9c e0       	ldi	r25, 0x0C	; 12
    d4ca:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d4ce:	60 91 18 0c 	lds	r22, 0x0C18
    d4d2:	70 91 19 0c 	lds	r23, 0x0C19
    d4d6:	80 91 1a 0c 	lds	r24, 0x0C1A
    d4da:	90 91 1b 0c 	lds	r25, 0x0C1B
    d4de:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d4e2:	60 91 0b 0c 	lds	r22, 0x0C0B
    d4e6:	80 91 18 0c 	lds	r24, 0x0C18
    d4ea:	90 91 19 0c 	lds	r25, 0x0C19
    d4ee:	0e 94 fa 60 	call	0xc1f4	; 0xc1f4 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    d4f2:	80 91 0a 0c 	lds	r24, 0x0C0A
    d4f6:	80 32       	cpi	r24, 0x20	; 32
    d4f8:	09 f4       	brne	.+2      	; 0xd4fc <update_level+0x2e8>
    d4fa:	94 c0       	rjmp	.+296    	; 0xd624 <update_level+0x410>
		{
			resolve_scoring();
    d4fc:	0e 94 45 68 	call	0xd08a	; 0xd08a <resolve_scoring>
    d500:	91 c0       	rjmp	.+290    	; 0xd624 <update_level+0x410>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    d502:	90 31       	cpi	r25, 0x10	; 16
    d504:	d9 f3       	breq	.-10     	; 0xd4fc <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    d506:	91 11       	cpse	r25, r1
    d508:	8d c0       	rjmp	.+282    	; 0xd624 <update_level+0x410>
	{
		p2_index = tank_map(&player1, p1_index);
    d50a:	60 e0       	ldi	r22, 0x00	; 0
    d50c:	8a e3       	ldi	r24, 0x3A	; 58
    d50e:	9c e0       	ldi	r25, 0x0C	; 12
    d510:	0e 94 c5 59 	call	0xb38a	; 0xb38a <tank_map>
    d514:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    d516:	68 2f       	mov	r22, r24
    d518:	8b ea       	ldi	r24, 0xAB	; 171
    d51a:	9f e0       	ldi	r25, 0x0F	; 15
    d51c:	0e 94 c5 59 	call	0xb38a	; 0xb38a <tank_map>
    d520:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    d522:	68 2f       	mov	r22, r24
    d524:	8a e3       	ldi	r24, 0x3A	; 58
    d526:	9c e0       	ldi	r25, 0x0C	; 12
    d528:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
    d52c:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    d52e:	68 2f       	mov	r22, r24
    d530:	8b ea       	ldi	r24, 0xAB	; 171
    d532:	9f e0       	ldi	r25, 0x0F	; 15
    d534:	0e 94 2e 5a 	call	0xb45c	; 0xb45c <shot_map>
		game.clear_banter_1 = render_banter(&player1, 15, game.clear_banter_1);
    d538:	40 91 0f 0c 	lds	r20, 0x0C0F
    d53c:	6f e0       	ldi	r22, 0x0F	; 15
    d53e:	8a e3       	ldi	r24, 0x3A	; 58
    d540:	9c e0       	ldi	r25, 0x0C	; 12
    d542:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <render_banter>
    d546:	80 93 0f 0c 	sts	0x0C0F, r24
		game.clear_banter_2 = render_banter(&player2, 0, game.clear_banter_2);
    d54a:	40 91 10 0c 	lds	r20, 0x0C10
    d54e:	60 e0       	ldi	r22, 0x00	; 0
    d550:	8b ea       	ldi	r24, 0xAB	; 171
    d552:	9f e0       	ldi	r25, 0x0F	; 15
    d554:	0e 94 f9 58 	call	0xb1f2	; 0xb1f2 <render_banter>
    d558:	80 93 10 0c 	sts	0x0C10, r24
		render_player(&player1, p1_index);
    d55c:	60 e0       	ldi	r22, 0x00	; 0
    d55e:	8a e3       	ldi	r24, 0x3A	; 58
    d560:	9c e0       	ldi	r25, 0x0C	; 12
    d562:	0e 94 21 59 	call	0xb242	; 0xb242 <render_player>
		render_player(&player2, p2_index);
    d566:	6d 2d       	mov	r22, r13
    d568:	8b ea       	ldi	r24, 0xAB	; 171
    d56a:	9f e0       	ldi	r25, 0x0F	; 15
    d56c:	0e 94 21 59 	call	0xb242	; 0xb242 <render_player>
		render_shot(&player1, p1_shot_index);
    d570:	6e 2d       	mov	r22, r14
    d572:	8a e3       	ldi	r24, 0x3A	; 58
    d574:	9c e0       	ldi	r25, 0x0C	; 12
    d576:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_shot(&player2, p2_shot_index);
    d57a:	6f 2d       	mov	r22, r15
    d57c:	8b ea       	ldi	r24, 0xAB	; 171
    d57e:	9f e0       	ldi	r25, 0x0F	; 15
    d580:	0e 94 4a 59 	call	0xb294	; 0xb294 <render_shot>
		render_tile_explosions(&tile_animations);
    d584:	8d e1       	ldi	r24, 0x1D	; 29
    d586:	9c e0       	ldi	r25, 0x0C	; 12
    d588:	0e 94 76 59 	call	0xb2ec	; 0xb2ec <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    d58c:	80 91 14 0c 	lds	r24, 0x0C14
    d590:	90 91 15 0c 	lds	r25, 0x0C15
    d594:	89 3e       	cpi	r24, 0xE9	; 233
    d596:	93 40       	sbci	r25, 0x03	; 3
    d598:	88 f0       	brcs	.+34     	; 0xd5bc <update_level+0x3a8>
    d59a:	80 91 40 10 	lds	r24, 0x1040
    d59e:	90 91 41 10 	lds	r25, 0x1041
    d5a2:	18 16       	cp	r1, r24
    d5a4:	19 06       	cpc	r1, r25
    d5a6:	54 f4       	brge	.+20     	; 0xd5bc <update_level+0x3a8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    d5a8:	84 e3       	ldi	r24, 0x34	; 52
    d5aa:	90 e1       	ldi	r25, 0x10	; 16
    d5ac:	0e 94 ab 59 	call	0xb356	; 0xb356 <render_scope>
    d5b0:	88 23       	and	r24, r24
    d5b2:	21 f0       	breq	.+8      	; 0xd5bc <update_level+0x3a8>
    d5b4:	10 92 15 0c 	sts	0x0C15, r1
    d5b8:	10 92 14 0c 	sts	0x0C14, r1
		}
		game.scope_counter++;
    d5bc:	20 91 14 0c 	lds	r18, 0x0C14
    d5c0:	30 91 15 0c 	lds	r19, 0x0C15
    d5c4:	2f 5f       	subi	r18, 0xFF	; 255
    d5c6:	3f 4f       	sbci	r19, 0xFF	; 255
    d5c8:	30 93 15 0c 	sts	0x0C15, r19
    d5cc:	20 93 14 0c 	sts	0x0C14, r18
		
		// Update
		update_player(p1, &player1);
    d5d0:	6a e3       	ldi	r22, 0x3A	; 58
    d5d2:	7c e0       	ldi	r23, 0x0C	; 12
    d5d4:	c8 01       	movw	r24, r16
    d5d6:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
		update_player(p2, &player2);
    d5da:	6b ea       	ldi	r22, 0xAB	; 171
    d5dc:	7f e0       	ldi	r23, 0x0F	; 15
    d5de:	ce 01       	movw	r24, r28
    d5e0:	0e 94 97 66 	call	0xcd2e	; 0xcd2e <update_player>
		resolve_scoring();
    d5e4:	0e 94 45 68 	call	0xd08a	; 0xd08a <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d5e8:	60 e0       	ldi	r22, 0x00	; 0
    d5ea:	8a e3       	ldi	r24, 0x3A	; 58
    d5ec:	9c e0       	ldi	r25, 0x0C	; 12
    d5ee:	0e 94 fa 60 	call	0xc1f4	; 0xc1f4 <collision_detect_player>
    d5f2:	88 23       	and	r24, r24
    d5f4:	41 f0       	breq	.+16     	; 0xd606 <update_level+0x3f2>
    d5f6:	2f e0       	ldi	r18, 0x0F	; 15
    d5f8:	40 e0       	ldi	r20, 0x00	; 0
    d5fa:	6b ea       	ldi	r22, 0xAB	; 171
    d5fc:	7f e0       	ldi	r23, 0x0F	; 15
    d5fe:	8a e3       	ldi	r24, 0x3A	; 58
    d600:	9c e0       	ldi	r25, 0x0C	; 12
    d602:	0e 94 1e 60 	call	0xc03c	; 0xc03c <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d606:	6f e0       	ldi	r22, 0x0F	; 15
    d608:	8b ea       	ldi	r24, 0xAB	; 171
    d60a:	9f e0       	ldi	r25, 0x0F	; 15
    d60c:	0e 94 fa 60 	call	0xc1f4	; 0xc1f4 <collision_detect_player>
    d610:	88 23       	and	r24, r24
    d612:	41 f0       	breq	.+16     	; 0xd624 <update_level+0x410>
    d614:	20 e0       	ldi	r18, 0x00	; 0
    d616:	4f e0       	ldi	r20, 0x0F	; 15
    d618:	6a e3       	ldi	r22, 0x3A	; 58
    d61a:	7c e0       	ldi	r23, 0x0C	; 12
    d61c:	8b ea       	ldi	r24, 0xAB	; 171
    d61e:	9f e0       	ldi	r25, 0x0F	; 15
    d620:	0e 94 1e 60 	call	0xc03c	; 0xc03c <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d624:	80 91 1c 0c 	lds	r24, 0x0C1C
    d628:	83 30       	cpi	r24, 0x03	; 3
    d62a:	71 f5       	brne	.+92     	; 0xd688 <update_level+0x474>
	{
		game.demo_counter++;
    d62c:	80 91 12 0c 	lds	r24, 0x0C12
    d630:	90 91 13 0c 	lds	r25, 0x0C13
    d634:	01 96       	adiw	r24, 0x01	; 1
    d636:	90 93 13 0c 	sts	0x0C13, r25
    d63a:	80 93 12 0c 	sts	0x0C12, r24
		held = ReadJoypad(0);
    d63e:	80 e0       	ldi	r24, 0x00	; 0
    d640:	0e 94 08 44 	call	0x8810	; 0x8810 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d644:	80 e0       	ldi	r24, 0x00	; 0
    d646:	0e 94 08 44 	call	0x8810	; 0x8810 <ReadJoypad>
    d64a:	89 2b       	or	r24, r25
    d64c:	89 f0       	breq	.+34     	; 0xd670 <update_level+0x45c>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    d64e:	10 92 13 0c 	sts	0x0C13, r1
    d652:	10 92 12 0c 	sts	0x0C12, r1
			fade_through();
    d656:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
			init_game_state();
    d65a:	0e 94 99 56 	call	0xad32	; 0xad32 <init_game_state>
			load_splash();
#endif
		}
	}
}
    d65e:	df 91       	pop	r29
    d660:	cf 91       	pop	r28
    d662:	1f 91       	pop	r17
    d664:	0f 91       	pop	r16
    d666:	ff 90       	pop	r15
    d668:	ef 90       	pop	r14
    d66a:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    d66c:	0c 94 b2 65 	jmp	0xcb64	; 0xcb64 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d670:	81 e0       	ldi	r24, 0x01	; 1
    d672:	0e 94 08 44 	call	0x8810	; 0x8810 <ReadJoypad>
    d676:	89 2b       	or	r24, r25
    d678:	51 f7       	brne	.-44     	; 0xd64e <update_level+0x43a>
    d67a:	80 91 12 0c 	lds	r24, 0x0C12
    d67e:	90 91 13 0c 	lds	r25, 0x0C13
    d682:	88 30       	cpi	r24, 0x08	; 8
    d684:	97 40       	sbci	r25, 0x07	; 7
    d686:	18 f7       	brcc	.-58     	; 0xd64e <update_level+0x43a>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    d688:	df 91       	pop	r29
    d68a:	cf 91       	pop	r28
    d68c:	1f 91       	pop	r17
    d68e:	0f 91       	pop	r16
    d690:	ff 90       	pop	r15
    d692:	ef 90       	pop	r14
    d694:	df 90       	pop	r13
    d696:	08 95       	ret

0000d698 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    d698:	cf 93       	push	r28
    d69a:	df 93       	push	r29
    d69c:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    d69e:	88 81       	ld	r24, Y
    d6a0:	99 81       	ldd	r25, Y+1	; 0x01
    d6a2:	91 ff       	sbrs	r25, 1
    d6a4:	0e c0       	rjmp	.+28     	; 0xd6c2 <update_tank_rank+0x2a>
	{
		game.tank_rank_counter = 0;
    d6a6:	10 92 17 0c 	sts	0x0C17, r1
    d6aa:	10 92 16 0c 	sts	0x0C16, r1
		SFX_NAVIGATE;
    d6ae:	2f ef       	ldi	r18, 0xFF	; 255
    d6b0:	47 e1       	ldi	r20, 0x17	; 23
    d6b2:	65 e0       	ldi	r22, 0x05	; 5
    d6b4:	84 e0       	ldi	r24, 0x04	; 4
    d6b6:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		fade_through();
    d6ba:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
		load_splash();
    d6be:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d6c2:	8c 81       	ldd	r24, Y+4	; 0x04
    d6c4:	9d 81       	ldd	r25, Y+5	; 0x05
    d6c6:	92 ff       	sbrs	r25, 2
    d6c8:	1f c0       	rjmp	.+62     	; 0xd708 <update_tank_rank+0x70>
    d6ca:	8e 81       	ldd	r24, Y+6	; 0x06
    d6cc:	8f 3f       	cpi	r24, 0xFF	; 255
    d6ce:	e1 f4       	brne	.+56     	; 0xd708 <update_tank_rank+0x70>
	{
		game.tank_rank_counter = 0;
    d6d0:	10 92 17 0c 	sts	0x0C17, r1
    d6d4:	10 92 16 0c 	sts	0x0C16, r1
	    SFX_NAVIGATE;
    d6d8:	2f ef       	ldi	r18, 0xFF	; 255
    d6da:	47 e1       	ldi	r20, 0x17	; 23
    d6dc:	65 e0       	ldi	r22, 0x05	; 5
    d6de:	84 e0       	ldi	r24, 0x04	; 4
    d6e0:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
	    init_scores(&scores);
    d6e4:	80 ec       	ldi	r24, 0xC0	; 192
    d6e6:	9b e0       	ldi	r25, 0x0B	; 11
    d6e8:	0e 94 31 55 	call	0xaa62	; 0xaa62 <init_scores>
	    init_handles(&handles);
    d6ec:	87 ee       	ldi	r24, 0xE7	; 231
    d6ee:	9b e0       	ldi	r25, 0x0B	; 11
    d6f0:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d6f4:	80 ec       	ldi	r24, 0xC0	; 192
    d6f6:	9b e0       	ldi	r25, 0x0B	; 11
    d6f8:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <EepromWriteBlock>
    d6fc:	87 ee       	ldi	r24, 0xE7	; 231
    d6fe:	9b e0       	ldi	r25, 0x0B	; 11
    d700:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d704:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    d708:	80 91 16 0c 	lds	r24, 0x0C16
    d70c:	90 91 17 0c 	lds	r25, 0x0C17
    d710:	85 38       	cpi	r24, 0x85	; 133
    d712:	93 40       	sbci	r25, 0x03	; 3
    d714:	70 f0       	brcs	.+28     	; 0xd732 <update_tank_rank+0x9a>
	{
		game.tank_rank_counter = 0;
    d716:	10 92 17 0c 	sts	0x0C17, r1
    d71a:	10 92 16 0c 	sts	0x0C16, r1
		SFX_NAVIGATE;
    d71e:	2f ef       	ldi	r18, 0xFF	; 255
    d720:	47 e1       	ldi	r20, 0x17	; 23
    d722:	65 e0       	ldi	r22, 0x05	; 5
    d724:	84 e0       	ldi	r24, 0x04	; 4
    d726:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		fade_through();
    d72a:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
		load_splash();
    d72e:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <load_splash>
	}
	game.tank_rank_counter++;
    d732:	80 91 16 0c 	lds	r24, 0x0C16
    d736:	90 91 17 0c 	lds	r25, 0x0C17
    d73a:	01 96       	adiw	r24, 0x01	; 1
    d73c:	90 93 17 0c 	sts	0x0C17, r25
    d740:	80 93 16 0c 	sts	0x0C16, r24
#endif
}
    d744:	df 91       	pop	r29
    d746:	cf 91       	pop	r28
    d748:	08 95       	ret

0000d74a <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d74a:	af 92       	push	r10
    d74c:	bf 92       	push	r11
    d74e:	cf 92       	push	r12
    d750:	df 92       	push	r13
    d752:	ef 92       	push	r14
    d754:	ff 92       	push	r15
    d756:	0f 93       	push	r16
    d758:	1f 93       	push	r17
    d75a:	cf 93       	push	r28
    d75c:	df 93       	push	r29
    d75e:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d760:	fb 01       	movw	r30, r22
    d762:	00 81       	ld	r16, Z
    d764:	11 81       	ldd	r17, Z+1	; 0x01
    d766:	68 01       	movw	r12, r16
    d768:	f0 e1       	ldi	r31, 0x10	; 16
    d76a:	cf 22       	and	r12, r31
    d76c:	dd 24       	eor	r13, r13
    d76e:	04 ff       	sbrs	r16, 4
    d770:	09 c0       	rjmp	.+18     	; 0xd784 <_handle_select_helper+0x3a>
    d772:	8d 81       	ldd	r24, Y+5	; 0x05
    d774:	81 11       	cpse	r24, r1
    d776:	06 c0       	rjmp	.+12     	; 0xd784 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    d778:	88 81       	ld	r24, Y
    d77a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d77c:	87 ff       	sbrs	r24, 7
    d77e:	10 c0       	rjmp	.+32     	; 0xd7a0 <_handle_select_helper+0x56>
    d780:	18 82       	st	Y, r1
    d782:	26 c0       	rjmp	.+76     	; 0xd7d0 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d784:	58 01       	movw	r10, r16
    d786:	20 e2       	ldi	r18, 0x20	; 32
    d788:	a2 22       	and	r10, r18
    d78a:	bb 24       	eor	r11, r11
    d78c:	05 ff       	sbrs	r16, 5
    d78e:	0a c0       	rjmp	.+20     	; 0xd7a4 <_handle_select_helper+0x5a>
    d790:	8d 81       	ldd	r24, Y+5	; 0x05
    d792:	81 11       	cpse	r24, r1
    d794:	07 c0       	rjmp	.+14     	; 0xd7a4 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    d796:	88 81       	ld	r24, Y
    d798:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d79a:	89 30       	cpi	r24, 0x09	; 9
    d79c:	0c f0       	brlt	.+2      	; 0xd7a0 <_handle_select_helper+0x56>
    d79e:	88 e0       	ldi	r24, 0x08	; 8
    d7a0:	88 83       	st	Y, r24
    d7a2:	16 c0       	rjmp	.+44     	; 0xd7d0 <_handle_select_helper+0x86>
    d7a4:	7a 01       	movw	r14, r20
    d7a6:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    d7a8:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <select_pressed>
    d7ac:	88 23       	and	r24, r24
    d7ae:	01 f1       	breq	.+64     	; 0xd7f0 <_handle_select_helper+0xa6>
    d7b0:	9d 81       	ldd	r25, Y+5	; 0x05
    d7b2:	91 11       	cpse	r25, r1
    d7b4:	1d c0       	rjmp	.+58     	; 0xd7f0 <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    d7b6:	81 e0       	ldi	r24, 0x01	; 1
    d7b8:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d7ba:	69 91       	ld	r22, Y+
    d7bc:	83 e0       	ldi	r24, 0x03	; 3
    d7be:	68 02       	muls	r22, r24
    d7c0:	b0 01       	movw	r22, r0
    d7c2:	11 24       	eor	r1, r1
    d7c4:	67 51       	subi	r22, 0x17	; 23
    d7c6:	74 4f       	sbci	r23, 0xF4	; 244
    d7c8:	43 e0       	ldi	r20, 0x03	; 3
    d7ca:	ce 01       	movw	r24, r28
    d7cc:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
		SFX_NAVIGATE;
    d7d0:	2f ef       	ldi	r18, 0xFF	; 255
    d7d2:	47 e1       	ldi	r20, 0x17	; 23
    d7d4:	65 e0       	ldi	r22, 0x05	; 5
    d7d6:	84 e0       	ldi	r24, 0x04	; 4
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
#endif
}
    d7d8:	df 91       	pop	r29
    d7da:	cf 91       	pop	r28
    d7dc:	1f 91       	pop	r17
    d7de:	0f 91       	pop	r16
    d7e0:	ff 90       	pop	r15
    d7e2:	ef 90       	pop	r14
    d7e4:	df 90       	pop	r13
    d7e6:	cf 90       	pop	r12
    d7e8:	bf 90       	pop	r11
    d7ea:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d7ec:	0c 94 a0 47 	jmp	0x8f40	; 0x8f40 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d7f0:	07 ff       	sbrs	r16, 7
    d7f2:	09 c0       	rjmp	.+18     	; 0xd806 <_handle_select_helper+0xbc>
    d7f4:	9d 81       	ldd	r25, Y+5	; 0x05
    d7f6:	91 30       	cpi	r25, 0x01	; 1
    d7f8:	31 f4       	brne	.+12     	; 0xd806 <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    d7fa:	8c 81       	ldd	r24, Y+4	; 0x04
    d7fc:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d7fe:	83 30       	cpi	r24, 0x03	; 3
    d800:	5c f0       	brlt	.+22     	; 0xd818 <_handle_select_helper+0xce>
    d802:	82 e0       	ldi	r24, 0x02	; 2
    d804:	09 c0       	rjmp	.+18     	; 0xd818 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d806:	06 ff       	sbrs	r16, 6
    d808:	0b c0       	rjmp	.+22     	; 0xd820 <_handle_select_helper+0xd6>
    d80a:	9d 81       	ldd	r25, Y+5	; 0x05
    d80c:	91 30       	cpi	r25, 0x01	; 1
    d80e:	41 f5       	brne	.+80     	; 0xd860 <_handle_select_helper+0x116>
	{
		ps->char_index--;
    d810:	8c 81       	ldd	r24, Y+4	; 0x04
    d812:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d814:	87 fd       	sbrc	r24, 7
    d816:	02 c0       	rjmp	.+4      	; 0xd81c <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d818:	8c 83       	std	Y+4, r24	; 0x04
    d81a:	da cf       	rjmp	.-76     	; 0xd7d0 <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    d81c:	1c 82       	std	Y+4, r1	; 0x04
    d81e:	d8 cf       	rjmp	.-80     	; 0xd7d0 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d820:	cd 28       	or	r12, r13
    d822:	69 f0       	breq	.+26     	; 0xd83e <_handle_select_helper+0xf4>
    d824:	8d 81       	ldd	r24, Y+5	; 0x05
    d826:	81 30       	cpi	r24, 0x01	; 1
    d828:	09 f0       	breq	.+2      	; 0xd82c <_handle_select_helper+0xe2>
    d82a:	44 c0       	rjmp	.+136    	; 0xd8b4 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    d82c:	8c 81       	ldd	r24, Y+4	; 0x04
    d82e:	c8 0f       	add	r28, r24
    d830:	d1 1d       	adc	r29, r1
    d832:	99 81       	ldd	r25, Y+1	; 0x01
    d834:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d836:	91 34       	cpi	r25, 0x41	; 65
    d838:	70 f4       	brcc	.+28     	; 0xd856 <_handle_select_helper+0x10c>
    d83a:	81 e4       	ldi	r24, 0x41	; 65
    d83c:	0f c0       	rjmp	.+30     	; 0xd85c <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d83e:	ab 28       	or	r10, r11
    d840:	89 f0       	breq	.+34     	; 0xd864 <_handle_select_helper+0x11a>
    d842:	8d 81       	ldd	r24, Y+5	; 0x05
    d844:	81 30       	cpi	r24, 0x01	; 1
    d846:	b1 f5       	brne	.+108    	; 0xd8b4 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    d848:	8c 81       	ldd	r24, Y+4	; 0x04
    d84a:	c8 0f       	add	r28, r24
    d84c:	d1 1d       	adc	r29, r1
    d84e:	99 81       	ldd	r25, Y+1	; 0x01
    d850:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d852:	9b 35       	cpi	r25, 0x5B	; 91
    d854:	10 f4       	brcc	.+4      	; 0xd85a <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d856:	99 83       	std	Y+1, r25	; 0x01
    d858:	bb cf       	rjmp	.-138    	; 0xd7d0 <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d85a:	8a e5       	ldi	r24, 0x5A	; 90
    d85c:	89 83       	std	Y+1, r24	; 0x01
    d85e:	b8 cf       	rjmp	.-144    	; 0xd7d0 <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d860:	ab 28       	or	r10, r11
    d862:	41 f5       	brne	.+80     	; 0xd8b4 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    d864:	88 23       	and	r24, r24
    d866:	31 f1       	breq	.+76     	; 0xd8b4 <_handle_select_helper+0x16a>
    d868:	8d 81       	ldd	r24, Y+5	; 0x05
    d86a:	81 30       	cpi	r24, 0x01	; 1
    d86c:	19 f5       	brne	.+70     	; 0xd8b4 <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    d86e:	fe 01       	movw	r30, r28
    d870:	81 91       	ld	r24, Z+
    d872:	8f 01       	movw	r16, r30
    d874:	f7 01       	movw	r30, r14
    d876:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d878:	43 e0       	ldi	r20, 0x03	; 3
    d87a:	b8 01       	movw	r22, r16
    d87c:	c7 01       	movw	r24, r14
    d87e:	0c 96       	adiw	r24, 0x0c	; 12
    d880:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d884:	88 81       	ld	r24, Y
    d886:	f3 e0       	ldi	r31, 0x03	; 3
    d888:	8f 02       	muls	r24, r31
    d88a:	c0 01       	movw	r24, r0
    d88c:	11 24       	eor	r1, r1
    d88e:	43 e0       	ldi	r20, 0x03	; 3
    d890:	b8 01       	movw	r22, r16
    d892:	87 51       	subi	r24, 0x17	; 23
    d894:	94 4f       	sbci	r25, 0xF4	; 244
    d896:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
		SFX_NAVIGATE;
    d89a:	2f ef       	ldi	r18, 0xFF	; 255
    d89c:	47 e1       	ldi	r20, 0x17	; 23
    d89e:	65 e0       	ldi	r22, 0x05	; 5
    d8a0:	84 e0       	ldi	r24, 0x04	; 4
    d8a2:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d8a6:	87 ee       	ldi	r24, 0xE7	; 231
    d8a8:	9b e0       	ldi	r25, 0x0B	; 11
    d8aa:	0e 94 59 45 	call	0x8ab2	; 0x8ab2 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d8ae:	82 e0       	ldi	r24, 0x02	; 2
    d8b0:	8d 83       	std	Y+5, r24	; 0x05
    d8b2:	20 c0       	rjmp	.+64     	; 0xd8f4 <_handle_select_helper+0x1aa>
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d8b4:	11 ff       	sbrs	r17, 1
    d8b6:	1e c0       	rjmp	.+60     	; 0xd8f4 <_handle_select_helper+0x1aa>
    d8b8:	8d 81       	ldd	r24, Y+5	; 0x05
    d8ba:	81 30       	cpi	r24, 0x01	; 1
    d8bc:	11 f4       	brne	.+4      	; 0xd8c2 <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    d8be:	1d 82       	std	Y+5, r1	; 0x05
    d8c0:	87 cf       	rjmp	.-242    	; 0xd7d0 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d8c2:	82 30       	cpi	r24, 0x02	; 2
    d8c4:	19 f4       	brne	.+6      	; 0xd8cc <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    d8c6:	81 e0       	ldi	r24, 0x01	; 1
    d8c8:	8d 83       	std	Y+5, r24	; 0x05
    d8ca:	82 cf       	rjmp	.-252    	; 0xd7d0 <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d8cc:	2f ef       	ldi	r18, 0xFF	; 255
    d8ce:	47 e1       	ldi	r20, 0x17	; 23
    d8d0:	65 e0       	ldi	r22, 0x05	; 5
    d8d2:	84 e0       	ldi	r24, 0x04	; 4
    d8d4:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		fade_through();
    d8d8:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
		load_splash();
	}
#endif
}
    d8dc:	df 91       	pop	r29
    d8de:	cf 91       	pop	r28
    d8e0:	1f 91       	pop	r17
    d8e2:	0f 91       	pop	r16
    d8e4:	ff 90       	pop	r15
    d8e6:	ef 90       	pop	r14
    d8e8:	df 90       	pop	r13
    d8ea:	cf 90       	pop	r12
    d8ec:	bf 90       	pop	r11
    d8ee:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d8f0:	0c 94 b2 65 	jmp	0xcb64	; 0xcb64 <load_splash>
	}
#endif
}
    d8f4:	df 91       	pop	r29
    d8f6:	cf 91       	pop	r28
    d8f8:	1f 91       	pop	r17
    d8fa:	0f 91       	pop	r16
    d8fc:	ff 90       	pop	r15
    d8fe:	ef 90       	pop	r14
    d900:	df 90       	pop	r13
    d902:	cf 90       	pop	r12
    d904:	bf 90       	pop	r11
    d906:	af 90       	pop	r10
    d908:	08 95       	ret

0000d90a <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d90a:	af 92       	push	r10
    d90c:	bf 92       	push	r11
    d90e:	cf 92       	push	r12
    d910:	df 92       	push	r13
    d912:	ef 92       	push	r14
    d914:	ff 92       	push	r15
    d916:	0f 93       	push	r16
    d918:	1f 93       	push	r17
    d91a:	cf 93       	push	r28
    d91c:	df 93       	push	r29
    d91e:	00 d0       	rcall	.+0      	; 0xd920 <_handle_select_render_helper+0x16>
    d920:	1f 92       	push	r1
    d922:	cd b7       	in	r28, 0x3d	; 61
    d924:	de b7       	in	r29, 0x3e	; 62
    d926:	7c 01       	movw	r14, r24
    d928:	b4 2e       	mov	r11, r20
    d92a:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d92c:	80 e2       	ldi	r24, 0x20	; 32
    d92e:	89 83       	std	Y+1, r24	; 0x01
    d930:	8a 83       	std	Y+2, r24	; 0x02
    d932:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d934:	f7 01       	movw	r30, r14
    d936:	85 81       	ldd	r24, Z+5	; 0x05
    d938:	81 11       	cpse	r24, r1
    d93a:	1d c0       	rjmp	.+58     	; 0xd976 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d93c:	40 e0       	ldi	r20, 0x00	; 0
    d93e:	6c e5       	ldi	r22, 0x5C	; 92
    d940:	74 e4       	ldi	r23, 0x44	; 68
    d942:	82 2f       	mov	r24, r18
    d944:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d948:	40 e0       	ldi	r20, 0x00	; 0
    d94a:	6e e9       	ldi	r22, 0x9E	; 158
    d94c:	74 e4       	ldi	r23, 0x44	; 68
    d94e:	81 e0       	ldi	r24, 0x01	; 1
    d950:	81 0f       	add	r24, r17
    d952:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d956:	f7 01       	movw	r30, r14
    d958:	40 81       	ld	r20, Z
    d95a:	44 0f       	add	r20, r20
    d95c:	44 0f       	add	r20, r20
    d95e:	44 0f       	add	r20, r20
    d960:	40 5c       	subi	r20, 0xC0	; 192
    d962:	01 e0       	ldi	r16, 0x01	; 1
    d964:	21 e0       	ldi	r18, 0x01	; 1
    d966:	6b 2d       	mov	r22, r11
    d968:	66 0f       	add	r22, r22
    d96a:	66 0f       	add	r22, r22
    d96c:	66 0f       	add	r22, r22
    d96e:	81 2f       	mov	r24, r17
    d970:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
    d974:	6f c0       	rjmp	.+222    	; 0xda54 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d976:	81 30       	cpi	r24, 0x01	; 1
    d978:	09 f0       	breq	.+2      	; 0xd97c <_handle_select_render_helper+0x72>
    d97a:	44 c0       	rjmp	.+136    	; 0xda04 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d97c:	40 e0       	ldi	r20, 0x00	; 0
    d97e:	69 e5       	ldi	r22, 0x59	; 89
    d980:	74 e4       	ldi	r23, 0x44	; 68
    d982:	82 2f       	mov	r24, r18
    d984:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d988:	aa 24       	eor	r10, r10
    d98a:	a3 94       	inc	r10
    d98c:	a1 0e       	add	r10, r17
    d98e:	40 e0       	ldi	r20, 0x00	; 0
    d990:	66 e5       	ldi	r22, 0x56	; 86
    d992:	74 e4       	ldi	r23, 0x44	; 68
    d994:	8a 2d       	mov	r24, r10
    d996:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d99a:	cb 2c       	mov	r12, r11
    d99c:	d1 2c       	mov	r13, r1
    d99e:	f5 e0       	ldi	r31, 0x05	; 5
    d9a0:	cf 0e       	add	r12, r31
    d9a2:	d1 1c       	adc	r13, r1
    d9a4:	f7 01       	movw	r30, r14
    d9a6:	40 81       	ld	r20, Z
    d9a8:	44 0f       	add	r20, r20
    d9aa:	44 0f       	add	r20, r20
    d9ac:	44 0f       	add	r20, r20
    d9ae:	48 5c       	subi	r20, 0xC8	; 200
    d9b0:	84 81       	ldd	r24, Z+4	; 0x04
    d9b2:	b6 01       	movw	r22, r12
    d9b4:	68 0f       	add	r22, r24
    d9b6:	71 1d       	adc	r23, r1
    d9b8:	87 fd       	sbrc	r24, 7
    d9ba:	7a 95       	dec	r23
    d9bc:	66 0f       	add	r22, r22
    d9be:	66 0f       	add	r22, r22
    d9c0:	66 0f       	add	r22, r22
    d9c2:	01 e0       	ldi	r16, 0x01	; 1
    d9c4:	21 e0       	ldi	r18, 0x01	; 1
    d9c6:	81 2f       	mov	r24, r17
    d9c8:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d9cc:	f7 01       	movw	r30, r14
    d9ce:	40 81       	ld	r20, Z
    d9d0:	44 0f       	add	r20, r20
    d9d2:	44 0f       	add	r20, r20
    d9d4:	44 0f       	add	r20, r20
    d9d6:	48 5b       	subi	r20, 0xB8	; 184
    d9d8:	84 81       	ldd	r24, Z+4	; 0x04
    d9da:	c8 0e       	add	r12, r24
    d9dc:	d1 1c       	adc	r13, r1
    d9de:	87 fd       	sbrc	r24, 7
    d9e0:	da 94       	dec	r13
    d9e2:	6c 2d       	mov	r22, r12
    d9e4:	66 0f       	add	r22, r22
    d9e6:	66 0f       	add	r22, r22
    d9e8:	66 0f       	add	r22, r22
    d9ea:	21 e0       	ldi	r18, 0x01	; 1
    d9ec:	8a 2d       	mov	r24, r10
    d9ee:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d9f2:	43 e0       	ldi	r20, 0x03	; 3
    d9f4:	b7 01       	movw	r22, r14
    d9f6:	6f 5f       	subi	r22, 0xFF	; 255
    d9f8:	7f 4f       	sbci	r23, 0xFF	; 255
    d9fa:	ce 01       	movw	r24, r28
    d9fc:	01 96       	adiw	r24, 0x01	; 1
    d9fe:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
    da02:	28 c0       	rjmp	.+80     	; 0xda54 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    da04:	82 30       	cpi	r24, 0x02	; 2
    da06:	31 f5       	brne	.+76     	; 0xda54 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    da08:	c4 2e       	mov	r12, r20
    da0a:	d1 2c       	mov	r13, r1
    da0c:	48 e2       	ldi	r20, 0x28	; 40
    da0e:	65 e0       	ldi	r22, 0x05	; 5
    da10:	70 e0       	ldi	r23, 0x00	; 0
    da12:	c6 01       	movw	r24, r12
    da14:	06 96       	adiw	r24, 0x06	; 6
    da16:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    da1a:	23 e0       	ldi	r18, 0x03	; 3
    da1c:	a7 01       	movw	r20, r14
    da1e:	4f 5f       	subi	r20, 0xFF	; 255
    da20:	5f 4f       	sbci	r21, 0xFF	; 255
    da22:	65 e0       	ldi	r22, 0x05	; 5
    da24:	87 e0       	ldi	r24, 0x07	; 7
    da26:	8b 0d       	add	r24, r11
    da28:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    da2c:	49 e2       	ldi	r20, 0x29	; 41
    da2e:	65 e0       	ldi	r22, 0x05	; 5
    da30:	70 e0       	ldi	r23, 0x00	; 0
    da32:	c6 01       	movw	r24, r12
    da34:	0a 96       	adiw	r24, 0x0a	; 10
    da36:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
		MapSprite2(idx, map_none, 0);
    da3a:	40 e0       	ldi	r20, 0x00	; 0
    da3c:	6e e9       	ldi	r22, 0x9E	; 158
    da3e:	74 e4       	ldi	r23, 0x44	; 68
    da40:	81 2f       	mov	r24, r17
    da42:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    da46:	40 e0       	ldi	r20, 0x00	; 0
    da48:	6e e9       	ldi	r22, 0x9E	; 158
    da4a:	74 e4       	ldi	r23, 0x44	; 68
    da4c:	81 e0       	ldi	r24, 0x01	; 1
    da4e:	81 0f       	add	r24, r17
    da50:	0e 94 80 51 	call	0xa300	; 0xa300 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    da54:	f7 01       	movw	r30, r14
    da56:	60 81       	ld	r22, Z
    da58:	68 5f       	subi	r22, 0xF8	; 248
    da5a:	23 e0       	ldi	r18, 0x03	; 3
    da5c:	ae 01       	movw	r20, r28
    da5e:	4f 5f       	subi	r20, 0xFF	; 255
    da60:	5f 4f       	sbci	r21, 0xFF	; 255
    da62:	85 e0       	ldi	r24, 0x05	; 5
    da64:	8b 0d       	add	r24, r11
    da66:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
}
    da6a:	0f 90       	pop	r0
    da6c:	0f 90       	pop	r0
    da6e:	0f 90       	pop	r0
    da70:	df 91       	pop	r29
    da72:	cf 91       	pop	r28
    da74:	1f 91       	pop	r17
    da76:	0f 91       	pop	r16
    da78:	ff 90       	pop	r15
    da7a:	ef 90       	pop	r14
    da7c:	df 90       	pop	r13
    da7e:	cf 90       	pop	r12
    da80:	bf 90       	pop	r11
    da82:	af 90       	pop	r10
    da84:	08 95       	ret

0000da86 <load_handle_select>:

void load_handle_select()
{
    da86:	8f 92       	push	r8
    da88:	9f 92       	push	r9
    da8a:	af 92       	push	r10
    da8c:	bf 92       	push	r11
    da8e:	cf 92       	push	r12
    da90:	df 92       	push	r13
    da92:	ef 92       	push	r14
    da94:	ff 92       	push	r15
    da96:	0f 93       	push	r16
    da98:	1f 93       	push	r17
    da9a:	cf 93       	push	r28
    da9c:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    da9e:	82 e0       	ldi	r24, 0x02	; 2
    daa0:	80 93 07 0c 	sts	0x0C07, r24
	clear_sprites();
    daa4:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    daa8:	4c ed       	ldi	r20, 0xDC	; 220
    daaa:	5d e7       	ldi	r21, 0x7D	; 125
    daac:	64 e0       	ldi	r22, 0x04	; 4
    daae:	83 e0       	ldi	r24, 0x03	; 3
    dab0:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    dab4:	46 ed       	ldi	r20, 0xD6	; 214
    dab6:	5d e7       	ldi	r21, 0x7D	; 125
    dab8:	64 e0       	ldi	r22, 0x04	; 4
    daba:	84 e1       	ldi	r24, 0x14	; 20
    dabc:	0e 94 06 52 	call	0xa40c	; 0xa40c <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    dac0:	44 e1       	ldi	r20, 0x14	; 20
    dac2:	53 e0       	ldi	r21, 0x03	; 3
    dac4:	61 e0       	ldi	r22, 0x01	; 1
    dac6:	70 e0       	ldi	r23, 0x00	; 0
    dac8:	89 e0       	ldi	r24, 0x09	; 9
    daca:	90 e0       	ldi	r25, 0x00	; 0
    dacc:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(6, 5, (char*) strPlayer1);
    dad0:	43 e0       	ldi	r20, 0x03	; 3
    dad2:	53 e0       	ldi	r21, 0x03	; 3
    dad4:	65 e0       	ldi	r22, 0x05	; 5
    dad6:	70 e0       	ldi	r23, 0x00	; 0
    dad8:	86 e0       	ldi	r24, 0x06	; 6
    dada:	90 e0       	ldi	r25, 0x00	; 0
    dadc:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(23, 5, (char*) strPlayer2);
    dae0:	40 e0       	ldi	r20, 0x00	; 0
    dae2:	53 e0       	ldi	r21, 0x03	; 3
    dae4:	65 e0       	ldi	r22, 0x05	; 5
    dae6:	70 e0       	ldi	r23, 0x00	; 0
    dae8:	87 e1       	ldi	r24, 0x17	; 23
    daea:	90 e0       	ldi	r25, 0x00	; 0
    daec:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
    daf0:	89 ee       	ldi	r24, 0xE9	; 233
    daf2:	e8 2e       	mov	r14, r24
    daf4:	8b e0       	ldi	r24, 0x0B	; 11
    daf6:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    daf8:	c0 e0       	ldi	r28, 0x00	; 0
    dafa:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    dafc:	93 e0       	ldi	r25, 0x03	; 3
    dafe:	a9 2e       	mov	r10, r25
    db00:	b1 2c       	mov	r11, r1
    db02:	67 01       	movw	r12, r14
    db04:	ce 01       	movw	r24, r28
    db06:	b5 01       	movw	r22, r10
    db08:	0e 94 f9 73 	call	0xe7f2	; 0xe7f2 <__divmodhi4>
    db0c:	4c 01       	movw	r8, r24
    db0e:	8b 01       	movw	r16, r22
    db10:	08 5f       	subi	r16, 0xF8	; 248
    db12:	1f 4f       	sbci	r17, 0xFF	; 255
    db14:	f7 01       	movw	r30, r14
    db16:	41 91       	ld	r20, Z+
    db18:	7f 01       	movw	r14, r30
    db1a:	b8 01       	movw	r22, r16
    db1c:	03 96       	adiw	r24, 0x03	; 3
    db1e:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    db22:	f6 01       	movw	r30, r12
    db24:	40 81       	ld	r20, Z
    db26:	b8 01       	movw	r22, r16
    db28:	c4 01       	movw	r24, r8
    db2a:	44 96       	adiw	r24, 0x14	; 20
    db2c:	0e 94 a1 52 	call	0xa542	; 0xa542 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    db30:	21 96       	adiw	r28, 0x01	; 1
    db32:	cb 31       	cpi	r28, 0x1B	; 27
    db34:	d1 05       	cpc	r29, r1
    db36:	29 f7       	brne	.-54     	; 0xdb02 <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    db38:	4f e3       	ldi	r20, 0x3F	; 63
    db3a:	53 e0       	ldi	r21, 0x03	; 3
    db3c:	65 e1       	ldi	r22, 0x15	; 21
    db3e:	70 e0       	ldi	r23, 0x00	; 0
    db40:	85 e0       	ldi	r24, 0x05	; 5
    db42:	90 e0       	ldi	r25, 0x00	; 0
    db44:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(5, 22, (char*) strConfirmHandle);
    db48:	42 e7       	ldi	r20, 0x72	; 114
    db4a:	53 e0       	ldi	r21, 0x03	; 3
    db4c:	66 e1       	ldi	r22, 0x16	; 22
    db4e:	70 e0       	ldi	r23, 0x00	; 0
    db50:	85 e0       	ldi	r24, 0x05	; 5
    db52:	90 e0       	ldi	r25, 0x00	; 0
    db54:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(5, 23, (char*) strCancelHandle);
    db58:	4e e4       	ldi	r20, 0x4E	; 78
    db5a:	53 e0       	ldi	r21, 0x03	; 3
    db5c:	67 e1       	ldi	r22, 0x17	; 23
    db5e:	70 e0       	ldi	r23, 0x00	; 0
    db60:	85 e0       	ldi	r24, 0x05	; 5
    db62:	90 e0       	ldi	r25, 0x00	; 0
    db64:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>
	Print(5, 24, (char*) strChangeHandle);
    db68:	41 ef       	ldi	r20, 0xF1	; 241
    db6a:	52 e0       	ldi	r21, 0x02	; 2
    db6c:	68 e1       	ldi	r22, 0x18	; 24
    db6e:	70 e0       	ldi	r23, 0x00	; 0
    db70:	85 e0       	ldi	r24, 0x05	; 5
    db72:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    db74:	df 91       	pop	r29
    db76:	cf 91       	pop	r28
    db78:	1f 91       	pop	r17
    db7a:	0f 91       	pop	r16
    db7c:	ff 90       	pop	r15
    db7e:	ef 90       	pop	r14
    db80:	df 90       	pop	r13
    db82:	cf 90       	pop	r12
    db84:	bf 90       	pop	r11
    db86:	af 90       	pop	r10
    db88:	9f 90       	pop	r9
    db8a:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    db8c:	0c 94 86 52 	jmp	0xa50c	; 0xa50c <Print>

0000db90 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    db90:	0f 93       	push	r16
    db92:	cf 93       	push	r28
    db94:	df 93       	push	r29
    db96:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    db98:	90 91 1c 0c 	lds	r25, 0x0C1C
    db9c:	91 30       	cpi	r25, 0x01	; 1
    db9e:	41 f0       	breq	.+16     	; 0xdbb0 <update_splash+0x20>
    dba0:	92 30       	cpi	r25, 0x02	; 2
    dba2:	51 f0       	breq	.+20     	; 0xdbb8 <update_splash+0x28>
    dba4:	91 11       	cpse	r25, r1
    dba6:	0f c0       	rjmp	.+30     	; 0xdbc6 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    dba8:	01 e0       	ldi	r16, 0x01	; 1
    dbaa:	21 e0       	ldi	r18, 0x01	; 1
    dbac:	48 e6       	ldi	r20, 0x68	; 104
    dbae:	07 c0       	rjmp	.+14     	; 0xdbbe <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    dbb0:	01 e0       	ldi	r16, 0x01	; 1
    dbb2:	21 e0       	ldi	r18, 0x01	; 1
    dbb4:	40 e7       	ldi	r20, 0x70	; 112
    dbb6:	03 c0       	rjmp	.+6      	; 0xdbbe <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    dbb8:	01 e0       	ldi	r16, 0x01	; 1
    dbba:	21 e0       	ldi	r18, 0x01	; 1
    dbbc:	48 e7       	ldi	r20, 0x78	; 120
    dbbe:	60 e3       	ldi	r22, 0x30	; 48
    dbc0:	80 e0       	ldi	r24, 0x00	; 0
    dbc2:	0e 94 d2 51 	call	0xa3a4	; 0xa3a4 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    dbc6:	4f e3       	ldi	r20, 0x3F	; 63
    dbc8:	53 e0       	ldi	r21, 0x03	; 3
    dbca:	65 e1       	ldi	r22, 0x15	; 21
    dbcc:	70 e0       	ldi	r23, 0x00	; 0
    dbce:	86 e0       	ldi	r24, 0x06	; 6
    dbd0:	90 e0       	ldi	r25, 0x00	; 0
    dbd2:	0e 94 86 52 	call	0xa50c	; 0xa50c <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    dbd6:	28 81       	ld	r18, Y
    dbd8:	39 81       	ldd	r19, Y+1	; 0x01
    dbda:	21 15       	cp	r18, r1
    dbdc:	31 05       	cpc	r19, r1
    dbde:	21 f0       	breq	.+8      	; 0xdbe8 <update_splash+0x58>
    dbe0:	10 92 13 0c 	sts	0x0C13, r1
    dbe4:	10 92 12 0c 	sts	0x0C12, r1
	
	if (p1->pressed & BTN_UP)
    dbe8:	24 ff       	sbrs	r18, 4
    dbea:	0e c0       	rjmp	.+28     	; 0xdc08 <update_splash+0x78>
	{
		game.selection--;
    dbec:	80 91 1c 0c 	lds	r24, 0x0C1C
    dbf0:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    dbf2:	87 ff       	sbrs	r24, 7
    dbf4:	11 c0       	rjmp	.+34     	; 0xdc18 <update_splash+0x88>
    dbf6:	10 92 1c 0c 	sts	0x0C1C, r1
		SFX_NAVIGATE;
    dbfa:	2f ef       	ldi	r18, 0xFF	; 255
    dbfc:	47 e1       	ldi	r20, 0x17	; 23
    dbfe:	65 e0       	ldi	r22, 0x05	; 5
    dc00:	84 e0       	ldi	r24, 0x04	; 4
    dc02:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
    dc06:	91 c0       	rjmp	.+290    	; 0xdd2a <update_splash+0x19a>
	}
	else if (p1->pressed & BTN_DOWN)
    dc08:	25 ff       	sbrs	r18, 5
    dc0a:	09 c0       	rjmp	.+18     	; 0xdc1e <update_splash+0x8e>
	{
		game.selection++;
    dc0c:	80 91 1c 0c 	lds	r24, 0x0C1C
    dc10:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    dc12:	83 30       	cpi	r24, 0x03	; 3
    dc14:	0c f0       	brlt	.+2      	; 0xdc18 <update_splash+0x88>
    dc16:	82 e0       	ldi	r24, 0x02	; 2
    dc18:	80 93 1c 0c 	sts	0x0C1C, r24
    dc1c:	ee cf       	rjmp	.-36     	; 0xdbfa <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    dc1e:	ce 01       	movw	r24, r28
    dc20:	0e 94 ea 65 	call	0xcbd4	; 0xcbd4 <select_pressed>
    dc24:	88 23       	and	r24, r24
    dc26:	a1 f1       	breq	.+104    	; 0xdc90 <update_splash+0x100>
    dc28:	80 91 1c 0c 	lds	r24, 0x0C1C
    dc2c:	82 30       	cpi	r24, 0x02	; 2
    dc2e:	c8 f4       	brcc	.+50     	; 0xdc62 <update_splash+0xd2>
	{
		game.demo_counter = 0;
    dc30:	10 92 13 0c 	sts	0x0C13, r1
    dc34:	10 92 12 0c 	sts	0x0C12, r1
		p1s.select_state = SELECTING;
    dc38:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    dc3c:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    dc40:	2f ef       	ldi	r18, 0xFF	; 255
    dc42:	47 e1       	ldi	r20, 0x17	; 23
    dc44:	65 e0       	ldi	r22, 0x05	; 5
    dc46:	84 e0       	ldi	r24, 0x04	; 4
    dc48:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		fade_through();
    dc4c:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
		load_eeprom(&handles);
    dc50:	87 ee       	ldi	r24, 0xE7	; 231
    dc52:	9b e0       	ldi	r25, 0x0B	; 11
    dc54:	0e 94 f3 56 	call	0xade6	; 0xade6 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    dc58:	df 91       	pop	r29
    dc5a:	cf 91       	pop	r28
    dc5c:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    dc5e:	0c 94 43 6d 	jmp	0xda86	; 0xda86 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    dc62:	82 30       	cpi	r24, 0x02	; 2
    dc64:	a9 f4       	brne	.+42     	; 0xdc90 <update_splash+0x100>
	{
		game.demo_counter = 0;
    dc66:	10 92 13 0c 	sts	0x0C13, r1
    dc6a:	10 92 12 0c 	sts	0x0C12, r1
		SFX_NAVIGATE;
    dc6e:	2f ef       	ldi	r18, 0xFF	; 255
    dc70:	47 e1       	ldi	r20, 0x17	; 23
    dc72:	65 e0       	ldi	r22, 0x05	; 5
    dc74:	84 e0       	ldi	r24, 0x04	; 4
    dc76:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
		fade_through();
    dc7a:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
		load_eeprom(&scores);
    dc7e:	80 ec       	ldi	r24, 0xC0	; 192
    dc80:	9b e0       	ldi	r25, 0x0B	; 11
    dc82:	0e 94 f3 56 	call	0xade6	; 0xade6 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    dc86:	df 91       	pop	r29
    dc88:	cf 91       	pop	r28
    dc8a:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    dc8c:	0c 94 f4 65 	jmp	0xcbe8	; 0xcbe8 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    dc90:	80 91 12 0c 	lds	r24, 0x0C12
    dc94:	90 91 13 0c 	lds	r25, 0x0C13
    dc98:	88 35       	cpi	r24, 0x58	; 88
    dc9a:	92 40       	sbci	r25, 0x02	; 2
    dc9c:	08 f4       	brcc	.+2      	; 0xdca0 <update_splash+0x110>
    dc9e:	45 c0       	rjmp	.+138    	; 0xdd2a <update_splash+0x19a>
	{
		game.demo_counter = 0;
    dca0:	10 92 13 0c 	sts	0x0C13, r1
    dca4:	10 92 12 0c 	sts	0x0C12, r1
		if (game.demo_choice % 2 == 0)
    dca8:	80 91 11 0c 	lds	r24, 0x0C11
    dcac:	80 fd       	sbrc	r24, 0
    dcae:	29 c0       	rjmp	.+82     	; 0xdd02 <update_splash+0x172>
		{
			game.selection = CPUVCPU;
    dcb0:	83 e0       	ldi	r24, 0x03	; 3
    dcb2:	80 93 1c 0c 	sts	0x0C1C, r24
			player1.handle_id = 9;
    dcb6:	c9 e0       	ldi	r28, 0x09	; 9
    dcb8:	c0 93 45 0c 	sts	0x0C45, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    dcbc:	43 e0       	ldi	r20, 0x03	; 3
    dcbe:	64 e0       	ldi	r22, 0x04	; 4
    dcc0:	7c e0       	ldi	r23, 0x0C	; 12
    dcc2:	86 e4       	ldi	r24, 0x46	; 70
    dcc4:	9c e0       	ldi	r25, 0x0C	; 12
    dcc6:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
			player2.handle_id = 9;
    dcca:	c0 93 b6 0f 	sts	0x0FB6, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    dcce:	43 e0       	ldi	r20, 0x03	; 3
    dcd0:	64 e0       	ldi	r22, 0x04	; 4
    dcd2:	7c e0       	ldi	r23, 0x0C	; 12
    dcd4:	87 eb       	ldi	r24, 0xB7	; 183
    dcd6:	9f e0       	ldi	r25, 0x0F	; 15
    dcd8:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
			SFX_NAVIGATE;
    dcdc:	2f ef       	ldi	r18, 0xFF	; 255
    dcde:	47 e1       	ldi	r20, 0x17	; 23
    dce0:	65 e0       	ldi	r22, 0x05	; 5
    dce2:	84 e0       	ldi	r24, 0x04	; 4
    dce4:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
			clear_sprites();
    dce8:	0e 94 0f 57 	call	0xae1e	; 0xae1e <clear_sprites>
			fade_through();
    dcec:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
			level_transition(LBRandom(0, 10));
    dcf0:	6a e0       	ldi	r22, 0x0A	; 10
    dcf2:	70 e0       	ldi	r23, 0x00	; 0
    dcf4:	80 e0       	ldi	r24, 0x00	; 0
    dcf6:	90 e0       	ldi	r25, 0x00	; 0
    dcf8:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    dcfc:	0e 94 c1 63 	call	0xc782	; 0xc782 <level_transition>
    dd00:	0e c0       	rjmp	.+28     	; 0xdd1e <update_splash+0x18e>
		}
		else
		{
			SFX_NAVIGATE;
    dd02:	2f ef       	ldi	r18, 0xFF	; 255
    dd04:	47 e1       	ldi	r20, 0x17	; 23
    dd06:	65 e0       	ldi	r22, 0x05	; 5
    dd08:	84 e0       	ldi	r24, 0x04	; 4
    dd0a:	0e 94 a0 47 	call	0x8f40	; 0x8f40 <TriggerNote>
			fade_through();
    dd0e:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
			load_eeprom(&scores);
    dd12:	80 ec       	ldi	r24, 0xC0	; 192
    dd14:	9b e0       	ldi	r25, 0x0B	; 11
    dd16:	0e 94 f3 56 	call	0xade6	; 0xade6 <load_eeprom>
			load_tank_rank();
    dd1a:	0e 94 f4 65 	call	0xcbe8	; 0xcbe8 <load_tank_rank>
		}
		game.demo_choice++;
    dd1e:	80 91 11 0c 	lds	r24, 0x0C11
    dd22:	8f 5f       	subi	r24, 0xFF	; 255
    dd24:	80 93 11 0c 	sts	0x0C11, r24
		return;
    dd28:	09 c0       	rjmp	.+18     	; 0xdd3c <update_splash+0x1ac>
		
	}
	game.demo_counter++;
    dd2a:	80 91 12 0c 	lds	r24, 0x0C12
    dd2e:	90 91 13 0c 	lds	r25, 0x0C13
    dd32:	01 96       	adiw	r24, 0x01	; 1
    dd34:	90 93 13 0c 	sts	0x0C13, r25
    dd38:	80 93 12 0c 	sts	0x0C12, r24
#endif
}
    dd3c:	df 91       	pop	r29
    dd3e:	cf 91       	pop	r28
    dd40:	0f 91       	pop	r16
    dd42:	08 95       	ret

0000dd44 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    dd44:	0f 93       	push	r16
    dd46:	1f 93       	push	r17
    dd48:	cf 93       	push	r28
    dd4a:	df 93       	push	r29
    dd4c:	8c 01       	movw	r16, r24
    dd4e:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    dd50:	26 e0       	ldi	r18, 0x06	; 6
    dd52:	42 e0       	ldi	r20, 0x02	; 2
    dd54:	bc 01       	movw	r22, r24
    dd56:	8a e2       	ldi	r24, 0x2A	; 42
    dd58:	9b e0       	ldi	r25, 0x0B	; 11
    dd5a:	0e 94 85 6c 	call	0xd90a	; 0xd90a <_handle_select_render_helper>
	if (game.selection == PVP)
    dd5e:	80 91 1c 0c 	lds	r24, 0x0C1C
    dd62:	81 30       	cpi	r24, 0x01	; 1
    dd64:	39 f4       	brne	.+14     	; 0xdd74 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    dd66:	28 e0       	ldi	r18, 0x08	; 8
    dd68:	43 e1       	ldi	r20, 0x13	; 19
    dd6a:	be 01       	movw	r22, r28
    dd6c:	84 e2       	ldi	r24, 0x24	; 36
    dd6e:	9b e0       	ldi	r25, 0x0B	; 11
    dd70:	0e 94 85 6c 	call	0xd90a	; 0xd90a <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    dd74:	4a e3       	ldi	r20, 0x3A	; 58
    dd76:	5c e0       	ldi	r21, 0x0C	; 12
    dd78:	b8 01       	movw	r22, r16
    dd7a:	8a e2       	ldi	r24, 0x2A	; 42
    dd7c:	9b e0       	ldi	r25, 0x0B	; 11
    dd7e:	0e 94 a5 6b 	call	0xd74a	; 0xd74a <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    dd82:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    dd86:	80 91 1c 0c 	lds	r24, 0x0C1C
    dd8a:	81 30       	cpi	r24, 0x01	; 1
    dd8c:	19 f0       	breq	.+6      	; 0xdd94 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    dd8e:	12 30       	cpi	r17, 0x02	; 2
    dd90:	69 f0       	breq	.+26     	; 0xddac <update_handle_select+0x68>
    dd92:	21 c0       	rjmp	.+66     	; 0xddd6 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    dd94:	4b ea       	ldi	r20, 0xAB	; 171
    dd96:	5f e0       	ldi	r21, 0x0F	; 15
    dd98:	be 01       	movw	r22, r28
    dd9a:	84 e2       	ldi	r24, 0x24	; 36
    dd9c:	9b e0       	ldi	r25, 0x0B	; 11
    dd9e:	0e 94 a5 6b 	call	0xd74a	; 0xd74a <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    dda2:	80 91 29 0b 	lds	r24, 0x0B29
    dda6:	82 30       	cpi	r24, 0x02	; 2
    dda8:	b1 f4       	brne	.+44     	; 0xddd6 <update_handle_select+0x92>
    ddaa:	f1 cf       	rjmp	.-30     	; 0xdd8e <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    ddac:	80 91 1c 0c 	lds	r24, 0x0C1C
    ddb0:	81 11       	cpse	r24, r1
    ddb2:	0a c0       	rjmp	.+20     	; 0xddc8 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    ddb4:	89 e0       	ldi	r24, 0x09	; 9
    ddb6:	80 93 b6 0f 	sts	0x0FB6, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    ddba:	43 e0       	ldi	r20, 0x03	; 3
    ddbc:	64 e0       	ldi	r22, 0x04	; 4
    ddbe:	7c e0       	ldi	r23, 0x0C	; 12
    ddc0:	87 eb       	ldi	r24, 0xB7	; 183
    ddc2:	9f e0       	ldi	r25, 0x0F	; 15
    ddc4:	0e 94 a6 53 	call	0xa74c	; 0xa74c <LBCopyChars>
		}
		level_transition(0);
    ddc8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    ddca:	df 91       	pop	r29
    ddcc:	cf 91       	pop	r28
    ddce:	1f 91       	pop	r17
    ddd0:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    ddd2:	0c 94 c1 63 	jmp	0xc782	; 0xc782 <level_transition>
	}
}
    ddd6:	df 91       	pop	r29
    ddd8:	cf 91       	pop	r28
    ddda:	1f 91       	pop	r17
    dddc:	0f 91       	pop	r16
    ddde:	08 95       	ret

0000dde0 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    dde0:	00 97       	sbiw	r24, 0x00	; 0
    dde2:	41 f0       	breq	.+16     	; 0xddf4 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    dde4:	81 30       	cpi	r24, 0x01	; 1
    dde6:	91 05       	cpc	r25, r1
    dde8:	41 f0       	breq	.+16     	; 0xddfa <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    ddea:	82 30       	cpi	r24, 0x02	; 2
    ddec:	91 05       	cpc	r25, r1
    ddee:	41 f0       	breq	.+16     	; 0xde00 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    ddf0:	03 97       	sbiw	r24, 0x03	; 3
    ddf2:	49 f0       	breq	.+18     	; 0xde06 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ddf4:	80 e1       	ldi	r24, 0x10	; 16
    ddf6:	90 e0       	ldi	r25, 0x00	; 0
    ddf8:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    ddfa:	80 e2       	ldi	r24, 0x20	; 32
    ddfc:	90 e0       	ldi	r25, 0x00	; 0
    ddfe:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    de00:	80 e4       	ldi	r24, 0x40	; 64
    de02:	90 e0       	ldi	r25, 0x00	; 0
    de04:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    de06:	80 e8       	ldi	r24, 0x80	; 128
    de08:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    de0a:	08 95       	ret

0000de0c <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    de0c:	8f 92       	push	r8
    de0e:	9f 92       	push	r9
    de10:	af 92       	push	r10
    de12:	bf 92       	push	r11
    de14:	cf 92       	push	r12
    de16:	df 92       	push	r13
    de18:	ef 92       	push	r14
    de1a:	ff 92       	push	r15
    de1c:	0f 93       	push	r16
    de1e:	1f 93       	push	r17
    de20:	cf 93       	push	r28
    de22:	df 93       	push	r29
    de24:	f8 2e       	mov	r15, r24
    de26:	e6 2e       	mov	r14, r22
    de28:	d4 2e       	mov	r13, r20
    de2a:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    de2c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    de2e:	88 23       	and	r24, r24
    de30:	09 f4       	brne	.+2      	; 0xde34 <crash_and_turn+0x28>
    de32:	a8 c0       	rjmp	.+336    	; 0xdf84 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    de34:	f8 01       	movw	r30, r16
    de36:	c4 80       	ldd	r12, Z+4	; 0x04
    de38:	c4 fe       	sbrs	r12, 4
    de3a:	23 c0       	rjmp	.+70     	; 0xde82 <crash_and_turn+0x76>
    de3c:	fe e1       	ldi	r31, 0x1E	; 30
    de3e:	6f 02       	muls	r22, r31
    de40:	40 01       	movw	r8, r0
    de42:	11 24       	eor	r1, r1
    de44:	af 2c       	mov	r10, r15
    de46:	bb 24       	eor	r11, r11
    de48:	a7 fc       	sbrc	r10, 7
    de4a:	b0 94       	com	r11
    de4c:	c4 01       	movw	r24, r8
    de4e:	8a 0d       	add	r24, r10
    de50:	9b 1d       	adc	r25, r11
    de52:	01 97       	sbiw	r24, 0x01	; 1
    de54:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    de58:	81 11       	cpse	r24, r1
    de5a:	13 c0       	rjmp	.+38     	; 0xde82 <crash_and_turn+0x76>
    de5c:	c4 01       	movw	r24, r8
    de5e:	8a 0d       	add	r24, r10
    de60:	9b 1d       	adc	r25, r11
    de62:	4d 96       	adiw	r24, 0x1d	; 29
    de64:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    de68:	81 11       	cpse	r24, r1
    de6a:	0b c0       	rjmp	.+22     	; 0xde82 <crash_and_turn+0x76>
    de6c:	c4 01       	movw	r24, r8
    de6e:	8a 0d       	add	r24, r10
    de70:	9b 1d       	adc	r25, r11
    de72:	cb 96       	adiw	r24, 0x3b	; 59
    de74:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    de78:	81 11       	cpse	r24, r1
    de7a:	03 c0       	rjmp	.+6      	; 0xde82 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    de7c:	80 e4       	ldi	r24, 0x40	; 64
    de7e:	90 e0       	ldi	r25, 0x00	; 0
    de80:	6f c0       	rjmp	.+222    	; 0xdf60 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    de82:	c6 fe       	sbrs	r12, 6
    de84:	23 c0       	rjmp	.+70     	; 0xdecc <crash_and_turn+0xc0>
    de86:	8e 2d       	mov	r24, r14
    de88:	99 27       	eor	r25, r25
    de8a:	87 fd       	sbrc	r24, 7
    de8c:	90 95       	com	r25
    de8e:	02 96       	adiw	r24, 0x02	; 2
    de90:	2e e1       	ldi	r18, 0x1E	; 30
    de92:	28 9f       	mul	r18, r24
    de94:	50 01       	movw	r10, r0
    de96:	29 9f       	mul	r18, r25
    de98:	b0 0c       	add	r11, r0
    de9a:	11 24       	eor	r1, r1
    de9c:	af 0c       	add	r10, r15
    de9e:	b1 1c       	adc	r11, r1
    dea0:	f7 fc       	sbrc	r15, 7
    dea2:	ba 94       	dec	r11
    dea4:	c5 01       	movw	r24, r10
    dea6:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    deaa:	81 11       	cpse	r24, r1
    deac:	0f c0       	rjmp	.+30     	; 0xdecc <crash_and_turn+0xc0>
    deae:	c5 01       	movw	r24, r10
    deb0:	01 96       	adiw	r24, 0x01	; 1
    deb2:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    deb6:	81 11       	cpse	r24, r1
    deb8:	09 c0       	rjmp	.+18     	; 0xdecc <crash_and_turn+0xc0>
    deba:	c5 01       	movw	r24, r10
    debc:	02 96       	adiw	r24, 0x02	; 2
    debe:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    dec2:	81 11       	cpse	r24, r1
    dec4:	03 c0       	rjmp	.+6      	; 0xdecc <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    dec6:	80 e2       	ldi	r24, 0x20	; 32
    dec8:	90 e0       	ldi	r25, 0x00	; 0
    deca:	4a c0       	rjmp	.+148    	; 0xdf60 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    decc:	c5 fe       	sbrs	r12, 5
    dece:	24 c0       	rjmp	.+72     	; 0xdf18 <crash_and_turn+0x10c>
    ded0:	fe 2d       	mov	r31, r14
    ded2:	8e e1       	ldi	r24, 0x1E	; 30
    ded4:	f8 02       	muls	r31, r24
    ded6:	40 01       	movw	r8, r0
    ded8:	11 24       	eor	r1, r1
    deda:	af 2c       	mov	r10, r15
    dedc:	bb 24       	eor	r11, r11
    dede:	a7 fc       	sbrc	r10, 7
    dee0:	b0 94       	com	r11
    dee2:	c4 01       	movw	r24, r8
    dee4:	8a 0d       	add	r24, r10
    dee6:	9b 1d       	adc	r25, r11
    dee8:	02 96       	adiw	r24, 0x02	; 2
    deea:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    deee:	81 11       	cpse	r24, r1
    def0:	13 c0       	rjmp	.+38     	; 0xdf18 <crash_and_turn+0x10c>
    def2:	c4 01       	movw	r24, r8
    def4:	8a 0d       	add	r24, r10
    def6:	9b 1d       	adc	r25, r11
    def8:	80 96       	adiw	r24, 0x20	; 32
    defa:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    defe:	81 11       	cpse	r24, r1
    df00:	0b c0       	rjmp	.+22     	; 0xdf18 <crash_and_turn+0x10c>
    df02:	c4 01       	movw	r24, r8
    df04:	8a 0d       	add	r24, r10
    df06:	9b 1d       	adc	r25, r11
    df08:	ce 96       	adiw	r24, 0x3e	; 62
    df0a:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    df0e:	81 11       	cpse	r24, r1
    df10:	03 c0       	rjmp	.+6      	; 0xdf18 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    df12:	80 e8       	ldi	r24, 0x80	; 128
    df14:	90 e0       	ldi	r25, 0x00	; 0
    df16:	24 c0       	rjmp	.+72     	; 0xdf60 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    df18:	c7 fe       	sbrs	r12, 7
    df1a:	29 c0       	rjmp	.+82     	; 0xdf6e <crash_and_turn+0x162>
    df1c:	8e 2d       	mov	r24, r14
    df1e:	99 27       	eor	r25, r25
    df20:	87 fd       	sbrc	r24, 7
    df22:	90 95       	com	r25
    df24:	01 97       	sbiw	r24, 0x01	; 1
    df26:	2e e1       	ldi	r18, 0x1E	; 30
    df28:	28 9f       	mul	r18, r24
    df2a:	50 01       	movw	r10, r0
    df2c:	29 9f       	mul	r18, r25
    df2e:	b0 0c       	add	r11, r0
    df30:	11 24       	eor	r1, r1
    df32:	af 0c       	add	r10, r15
    df34:	b1 1c       	adc	r11, r1
    df36:	f7 fc       	sbrc	r15, 7
    df38:	ba 94       	dec	r11
    df3a:	c5 01       	movw	r24, r10
    df3c:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    df40:	81 11       	cpse	r24, r1
    df42:	15 c0       	rjmp	.+42     	; 0xdf6e <crash_and_turn+0x162>
    df44:	c5 01       	movw	r24, r10
    df46:	01 96       	adiw	r24, 0x01	; 1
    df48:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    df4c:	81 11       	cpse	r24, r1
    df4e:	0f c0       	rjmp	.+30     	; 0xdf6e <crash_and_turn+0x162>
    df50:	c5 01       	movw	r24, r10
    df52:	02 96       	adiw	r24, 0x02	; 2
    df54:	0e 94 12 5b 	call	0xb624	; 0xb624 <solid_tile>
    df58:	81 11       	cpse	r24, r1
    df5a:	09 c0       	rjmp	.+18     	; 0xdf6e <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    df5c:	80 e1       	ldi	r24, 0x10	; 16
    df5e:	90 e0       	ldi	r25, 0x00	; 0
    df60:	f8 01       	movw	r30, r16
    df62:	95 83       	std	Z+5, r25	; 0x05
    df64:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    df66:	ce 01       	movw	r24, r28
    df68:	0e 94 5a 5a 	call	0xb4b4	; 0xb4b4 <recoil_sprite>
			recoiled = 0;
    df6c:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    df6e:	f8 01       	movw	r30, r16
    df70:	24 81       	ldd	r18, Z+4	; 0x04
    df72:	35 81       	ldd	r19, Z+5	; 0x05
    df74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    df76:	98 a1       	ldd	r25, Y+32	; 0x20
    df78:	82 23       	and	r24, r18
    df7a:	93 23       	and	r25, r19
    df7c:	89 2b       	or	r24, r25
    df7e:	11 f0       	breq	.+4      	; 0xdf84 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    df80:	1c 8e       	std	Y+28, r1	; 0x1c
    df82:	1c c0       	rjmp	.+56     	; 0xdfbc <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    df84:	dd 20       	and	r13, r13
    df86:	d1 f0       	breq	.+52     	; 0xdfbc <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    df88:	f8 01       	movw	r30, r16
    df8a:	84 81       	ldd	r24, Z+4	; 0x04
    df8c:	86 ff       	sbrs	r24, 6
    df8e:	03 c0       	rjmp	.+6      	; 0xdf96 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    df90:	80 e1       	ldi	r24, 0x10	; 16
    df92:	90 e0       	ldi	r25, 0x00	; 0
    df94:	0f c0       	rjmp	.+30     	; 0xdfb4 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    df96:	84 ff       	sbrs	r24, 4
    df98:	03 c0       	rjmp	.+6      	; 0xdfa0 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    df9a:	80 e8       	ldi	r24, 0x80	; 128
    df9c:	90 e0       	ldi	r25, 0x00	; 0
    df9e:	09 c0       	rjmp	.+18     	; 0xdfb2 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    dfa0:	87 ff       	sbrs	r24, 7
    dfa2:	03 c0       	rjmp	.+6      	; 0xdfaa <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    dfa4:	80 e2       	ldi	r24, 0x20	; 32
    dfa6:	90 e0       	ldi	r25, 0x00	; 0
    dfa8:	04 c0       	rjmp	.+8      	; 0xdfb2 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    dfaa:	85 ff       	sbrs	r24, 5
    dfac:	07 c0       	rjmp	.+14     	; 0xdfbc <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    dfae:	80 e4       	ldi	r24, 0x40	; 64
    dfb0:	90 e0       	ldi	r25, 0x00	; 0
    dfb2:	f8 01       	movw	r30, r16
    dfb4:	95 83       	std	Z+5, r25	; 0x05
    dfb6:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    dfb8:	81 e0       	ldi	r24, 0x01	; 1
    dfba:	8c 8f       	std	Y+28, r24	; 0x1c
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    dfbc:	8f 8d       	ldd	r24, Y+31	; 0x1f
    dfbe:	98 a1       	ldd	r25, Y+32	; 0x20
    dfc0:	80 31       	cpi	r24, 0x10	; 16
    dfc2:	91 05       	cpc	r25, r1
    dfc4:	19 f0       	breq	.+6      	; 0xdfcc <crash_and_turn+0x1c0>
    dfc6:	80 32       	cpi	r24, 0x20	; 32
    dfc8:	91 05       	cpc	r25, r1
    dfca:	19 f4       	brne	.+6      	; 0xdfd2 <crash_and_turn+0x1c6>
    dfcc:	2d a1       	ldd	r18, Y+37	; 0x25
    dfce:	e2 16       	cp	r14, r18
    dfd0:	59 f0       	breq	.+22     	; 0xdfe8 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    dfd2:	80 34       	cpi	r24, 0x40	; 64
    dfd4:	91 05       	cpc	r25, r1
    dfd6:	19 f0       	breq	.+6      	; 0xdfde <crash_and_turn+0x1d2>
    dfd8:	80 38       	cpi	r24, 0x80	; 128
    dfda:	91 05       	cpc	r25, r1
    dfdc:	39 f4       	brne	.+14     	; 0xdfec <crash_and_turn+0x1e0>
    dfde:	81 e0       	ldi	r24, 0x01	; 1
    dfe0:	9d a1       	ldd	r25, Y+37	; 0x25
    dfe2:	f9 12       	cpse	r15, r25
    dfe4:	03 c0       	rjmp	.+6      	; 0xdfec <crash_and_turn+0x1e0>
    dfe6:	03 c0       	rjmp	.+6      	; 0xdfee <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    dfe8:	81 e0       	ldi	r24, 0x01	; 1
    dfea:	01 c0       	rjmp	.+2      	; 0xdfee <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    dfec:	80 e0       	ldi	r24, 0x00	; 0
}
    dfee:	df 91       	pop	r29
    dff0:	cf 91       	pop	r28
    dff2:	1f 91       	pop	r17
    dff4:	0f 91       	pop	r16
    dff6:	ff 90       	pop	r15
    dff8:	ef 90       	pop	r14
    dffa:	df 90       	pop	r13
    dffc:	cf 90       	pop	r12
    dffe:	bf 90       	pop	r11
    e000:	af 90       	pop	r10
    e002:	9f 90       	pop	r9
    e004:	8f 90       	pop	r8
    e006:	08 95       	ret

0000e008 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    e008:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    e00a:	26 2f       	mov	r18, r22
    e00c:	33 27       	eor	r19, r19
    e00e:	27 fd       	sbrc	r18, 7
    e010:	30 95       	com	r19
    e012:	37 ff       	sbrs	r19, 7
    e014:	03 c0       	rjmp	.+6      	; 0xe01c <get_cpu_goal_direction+0x14>
    e016:	31 95       	neg	r19
    e018:	21 95       	neg	r18
    e01a:	31 09       	sbc	r19, r1
    e01c:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    e01e:	24 2f       	mov	r18, r20
    e020:	33 27       	eor	r19, r19
    e022:	27 fd       	sbrc	r18, 7
    e024:	30 95       	com	r19
    e026:	37 ff       	sbrs	r19, 7
    e028:	03 c0       	rjmp	.+6      	; 0xe030 <get_cpu_goal_direction+0x28>
    e02a:	31 95       	neg	r19
    e02c:	21 95       	neg	r18
    e02e:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    e030:	85 8d       	ldd	r24, Z+29	; 0x1d
    e032:	81 11       	cpse	r24, r1
    e034:	08 c0       	rjmp	.+16     	; 0xe046 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    e036:	29 17       	cp	r18, r25
    e038:	1c f4       	brge	.+6      	; 0xe040 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    e03a:	16 16       	cp	r1, r22
    e03c:	94 f0       	brlt	.+36     	; 0xe062 <get_cpu_goal_direction+0x5a>
    e03e:	0b c0       	rjmp	.+22     	; 0xe056 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    e040:	14 16       	cp	r1, r20
    e042:	94 f0       	brlt	.+36     	; 0xe068 <get_cpu_goal_direction+0x60>
    e044:	0b c0       	rjmp	.+22     	; 0xe05c <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    e046:	29 17       	cp	r18, r25
    e048:	1c f4       	brge	.+6      	; 0xe050 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    e04a:	16 16       	cp	r1, r22
    e04c:	24 f0       	brlt	.+8      	; 0xe056 <get_cpu_goal_direction+0x4e>
    e04e:	09 c0       	rjmp	.+18     	; 0xe062 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    e050:	14 16       	cp	r1, r20
    e052:	24 f0       	brlt	.+8      	; 0xe05c <get_cpu_goal_direction+0x54>
    e054:	09 c0       	rjmp	.+18     	; 0xe068 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    e056:	80 e4       	ldi	r24, 0x40	; 64
    e058:	90 e0       	ldi	r25, 0x00	; 0
    e05a:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    e05c:	80 e1       	ldi	r24, 0x10	; 16
    e05e:	90 e0       	ldi	r25, 0x00	; 0
    e060:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    e062:	80 e8       	ldi	r24, 0x80	; 128
    e064:	90 e0       	ldi	r25, 0x00	; 0
    e066:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    e068:	80 e2       	ldi	r24, 0x20	; 32
    e06a:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    e06c:	08 95       	ret

0000e06e <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    e06e:	2f 92       	push	r2
    e070:	3f 92       	push	r3
    e072:	4f 92       	push	r4
    e074:	5f 92       	push	r5
    e076:	7f 92       	push	r7
    e078:	8f 92       	push	r8
    e07a:	9f 92       	push	r9
    e07c:	af 92       	push	r10
    e07e:	bf 92       	push	r11
    e080:	cf 92       	push	r12
    e082:	df 92       	push	r13
    e084:	ef 92       	push	r14
    e086:	ff 92       	push	r15
    e088:	0f 93       	push	r16
    e08a:	1f 93       	push	r17
    e08c:	cf 93       	push	r28
    e08e:	df 93       	push	r29
    e090:	cd b7       	in	r28, 0x3d	; 61
    e092:	de b7       	in	r29, 0x3e	; 62
    e094:	2a 97       	sbiw	r28, 0x0a	; 10
    e096:	0f b6       	in	r0, 0x3f	; 63
    e098:	f8 94       	cli
    e09a:	de bf       	out	0x3e, r29	; 62
    e09c:	0f be       	out	0x3f, r0	; 63
    e09e:	cd bf       	out	0x3d, r28	; 61
    e0a0:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e0a2:	db 01       	movw	r26, r22
    e0a4:	13 96       	adiw	r26, 0x03	; 3
    e0a6:	8d 91       	ld	r24, X+
    e0a8:	9d 91       	ld	r25, X+
    e0aa:	0d 90       	ld	r0, X+
    e0ac:	bc 91       	ld	r27, X
    e0ae:	a0 2d       	mov	r26, r0
    e0b0:	89 83       	std	Y+1, r24	; 0x01
    e0b2:	9a 83       	std	Y+2, r25	; 0x02
    e0b4:	ab 83       	std	Y+3, r26	; 0x03
    e0b6:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    e0b8:	fb 01       	movw	r30, r22
    e0ba:	87 80       	ldd	r8, Z+7	; 0x07
    e0bc:	90 84       	ldd	r9, Z+8	; 0x08
    e0be:	a1 84       	ldd	r10, Z+9	; 0x09
    e0c0:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    e0c2:	d9 01       	movw	r26, r18
    e0c4:	13 96       	adiw	r26, 0x03	; 3
    e0c6:	cd 90       	ld	r12, X+
    e0c8:	dd 90       	ld	r13, X+
    e0ca:	ed 90       	ld	r14, X+
    e0cc:	fc 90       	ld	r15, X
    e0ce:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    e0d0:	17 96       	adiw	r26, 0x07	; 7
    e0d2:	8d 91       	ld	r24, X+
    e0d4:	9d 91       	ld	r25, X+
    e0d6:	0d 90       	ld	r0, X+
    e0d8:	bc 91       	ld	r27, X
    e0da:	a0 2d       	mov	r26, r0
    e0dc:	8d 83       	std	Y+5, r24	; 0x05
    e0de:	9e 83       	std	Y+6, r25	; 0x06
    e0e0:	af 83       	std	Y+7, r26	; 0x07
    e0e2:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    e0e4:	f9 01       	movw	r30, r18
    e0e6:	80 8d       	ldd	r24, Z+24	; 0x18
    e0e8:	81 11       	cpse	r24, r1
    e0ea:	06 c0       	rjmp	.+12     	; 0xe0f8 <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    e0ec:	da 01       	movw	r26, r20
    e0ee:	15 96       	adiw	r26, 0x05	; 5
    e0f0:	1c 92       	st	X, r1
    e0f2:	1e 92       	st	-X, r1
    e0f4:	14 97       	sbiw	r26, 0x04	; 4
		return;
    e0f6:	5c c2       	rjmp	.+1208   	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e0f8:	2a 01       	movw	r4, r20
    e0fa:	1b 01       	movw	r2, r22
    e0fc:	3a 87       	std	Y+10, r19	; 0x0a
    e0fe:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    e100:	ca 01       	movw	r24, r20
    e102:	0e 94 95 58 	call	0xb12a	; 0xb12a <shoot_pressed>
    e106:	88 23       	and	r24, r24
    e108:	19 f0       	breq	.+6      	; 0xe110 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    e10a:	f2 01       	movw	r30, r4
    e10c:	11 82       	std	Z+1, r1	; 0x01
    e10e:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    e110:	20 91 01 01 	lds	r18, 0x0101
    e114:	30 91 02 01 	lds	r19, 0x0102
    e118:	c9 01       	movw	r24, r18
    e11a:	6a e0       	ldi	r22, 0x0A	; 10
    e11c:	70 e0       	ldi	r23, 0x00	; 0
    e11e:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <__udivmodhi4>
    e122:	89 2b       	or	r24, r25
    e124:	59 f4       	brne	.+22     	; 0xe13c <get_cpu_joypad_state+0xce>
    e126:	a9 85       	ldd	r26, Y+9	; 0x09
    e128:	ba 85       	ldd	r27, Y+10	; 0x0a
    e12a:	58 96       	adiw	r26, 0x18	; 24
    e12c:	8c 91       	ld	r24, X
    e12e:	83 33       	cpi	r24, 0x33	; 51
    e130:	28 f0       	brcs	.+10     	; 0xe13c <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    e132:	81 e0       	ldi	r24, 0x01	; 1
    e134:	90 e0       	ldi	r25, 0x00	; 0
    e136:	f2 01       	movw	r30, r4
    e138:	91 83       	std	Z+1, r25	; 0x01
    e13a:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    e13c:	c9 01       	movw	r24, r18
    e13e:	64 eb       	ldi	r22, 0xB4	; 180
    e140:	70 e0       	ldi	r23, 0x00	; 0
    e142:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <__udivmodhi4>
    e146:	89 2b       	or	r24, r25
    e148:	61 f0       	breq	.+24     	; 0xe162 <get_cpu_joypad_state+0xf4>
    e14a:	a9 85       	ldd	r26, Y+9	; 0x09
    e14c:	ba 85       	ldd	r27, Y+10	; 0x0a
    e14e:	58 96       	adiw	r26, 0x18	; 24
    e150:	8c 91       	ld	r24, X
    e152:	58 97       	sbiw	r26, 0x18	; 24
    e154:	8a 30       	cpi	r24, 0x0A	; 10
    e156:	29 f0       	breq	.+10     	; 0xe162 <get_cpu_joypad_state+0xf4>
    e158:	96 96       	adiw	r26, 0x26	; 38
    e15a:	8c 91       	ld	r24, X
    e15c:	88 23       	and	r24, r24
    e15e:	09 f4       	brne	.+2      	; 0xe162 <get_cpu_joypad_state+0xf4>
    e160:	81 c0       	rjmp	.+258    	; 0xe264 <get_cpu_joypad_state+0x1f6>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    e162:	20 e0       	ldi	r18, 0x00	; 0
    e164:	30 e0       	ldi	r19, 0x00	; 0
    e166:	40 e0       	ldi	r20, 0x00	; 0
    e168:	5e e3       	ldi	r21, 0x3E	; 62
    e16a:	69 81       	ldd	r22, Y+1	; 0x01
    e16c:	7a 81       	ldd	r23, Y+2	; 0x02
    e16e:	8b 81       	ldd	r24, Y+3	; 0x03
    e170:	9c 81       	ldd	r25, Y+4	; 0x04
    e172:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e176:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
    e17a:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    e17c:	20 e0       	ldi	r18, 0x00	; 0
    e17e:	30 e0       	ldi	r19, 0x00	; 0
    e180:	40 e0       	ldi	r20, 0x00	; 0
    e182:	5e e3       	ldi	r21, 0x3E	; 62
    e184:	c5 01       	movw	r24, r10
    e186:	b4 01       	movw	r22, r8
    e188:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e18c:	20 e0       	ldi	r18, 0x00	; 0
    e18e:	30 e0       	ldi	r19, 0x00	; 0
    e190:	40 e4       	ldi	r20, 0x40	; 64
    e192:	50 e4       	ldi	r21, 0x40	; 64
    e194:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    e198:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
    e19c:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    e19e:	20 e0       	ldi	r18, 0x00	; 0
    e1a0:	30 e0       	ldi	r19, 0x00	; 0
    e1a2:	40 e0       	ldi	r20, 0x00	; 0
    e1a4:	5e e3       	ldi	r21, 0x3E	; 62
    e1a6:	c7 01       	movw	r24, r14
    e1a8:	b6 01       	movw	r22, r12
    e1aa:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e1ae:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    e1b2:	f7 2c       	mov	r15, r7
    e1b4:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    e1b6:	20 e0       	ldi	r18, 0x00	; 0
    e1b8:	30 e0       	ldi	r19, 0x00	; 0
    e1ba:	40 e0       	ldi	r20, 0x00	; 0
    e1bc:	5e e3       	ldi	r21, 0x3E	; 62
    e1be:	6d 81       	ldd	r22, Y+5	; 0x05
    e1c0:	7e 81       	ldd	r23, Y+6	; 0x06
    e1c2:	8f 81       	ldd	r24, Y+7	; 0x07
    e1c4:	98 85       	ldd	r25, Y+8	; 0x08
    e1c6:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e1ca:	20 e0       	ldi	r18, 0x00	; 0
    e1cc:	30 e0       	ldi	r19, 0x00	; 0
    e1ce:	40 e4       	ldi	r20, 0x40	; 64
    e1d0:	50 e4       	ldi	r21, 0x40	; 64
    e1d2:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    e1d6:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    e1da:	4b 2d       	mov	r20, r11
    e1dc:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    e1de:	e9 85       	ldd	r30, Y+9	; 0x09
    e1e0:	fa 85       	ldd	r31, Y+10	; 0x0a
    e1e2:	16 a2       	std	Z+38, r1	; 0x26
		player->feeling_my_way = 0;
    e1e4:	14 8e       	std	Z+28, r1	; 0x1c
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    e1e6:	82 e0       	ldi	r24, 0x02	; 2
    e1e8:	8f 0d       	add	r24, r15
    e1ea:	85 30       	cpi	r24, 0x05	; 5
    e1ec:	e0 f4       	brcc	.+56     	; 0xe226 <get_cpu_joypad_state+0x1b8>
    e1ee:	4e 3f       	cpi	r20, 0xFE	; 254
    e1f0:	d4 f0       	brlt	.+52     	; 0xe226 <get_cpu_joypad_state+0x1b8>
    e1f2:	43 30       	cpi	r20, 0x03	; 3
    e1f4:	c4 f4       	brge	.+48     	; 0xe226 <get_cpu_joypad_state+0x1b8>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    e1f6:	64 e0       	ldi	r22, 0x04	; 4
    e1f8:	70 e0       	ldi	r23, 0x00	; 0
    e1fa:	80 e0       	ldi	r24, 0x00	; 0
    e1fc:	90 e0       	ldi	r25, 0x00	; 0
    e1fe:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    e202:	0e 94 f0 6e 	call	0xdde0	; 0xdde0 <button_map>
    e206:	a9 85       	ldd	r26, Y+9	; 0x09
    e208:	ba 85       	ldd	r27, Y+10	; 0x0a
    e20a:	90 96       	adiw	r26, 0x20	; 32
    e20c:	9c 93       	st	X, r25
    e20e:	8e 93       	st	-X, r24
    e210:	5f 97       	sbiw	r26, 0x1f	; 31
			player->goal = LBRandom(5, 18);
    e212:	62 e1       	ldi	r22, 0x12	; 18
    e214:	70 e0       	ldi	r23, 0x00	; 0
    e216:	85 e0       	ldi	r24, 0x05	; 5
    e218:	90 e0       	ldi	r25, 0x00	; 0
    e21a:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    e21e:	e9 85       	ldd	r30, Y+9	; 0x09
    e220:	fa 85       	ldd	r31, Y+10	; 0x0a
    e222:	85 a3       	std	Z+37, r24	; 0x25
    e224:	16 c0       	rjmp	.+44     	; 0xe252 <get_cpu_joypad_state+0x1e4>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    e226:	6f 2d       	mov	r22, r15
    e228:	89 85       	ldd	r24, Y+9	; 0x09
    e22a:	9a 85       	ldd	r25, Y+10	; 0x0a
    e22c:	0e 94 04 70 	call	0xe008	; 0xe008 <get_cpu_goal_direction>
    e230:	a9 85       	ldd	r26, Y+9	; 0x09
    e232:	ba 85       	ldd	r27, Y+10	; 0x0a
    e234:	90 96       	adiw	r26, 0x20	; 32
    e236:	9c 93       	st	X, r25
    e238:	8e 93       	st	-X, r24
    e23a:	5f 97       	sbiw	r26, 0x1f	; 31
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e23c:	80 31       	cpi	r24, 0x10	; 16
    e23e:	91 05       	cpc	r25, r1
    e240:	29 f0       	breq	.+10     	; 0xe24c <get_cpu_joypad_state+0x1de>
    e242:	80 97       	sbiw	r24, 0x20	; 32
    e244:	19 f0       	breq	.+6      	; 0xe24c <get_cpu_joypad_state+0x1de>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    e246:	95 96       	adiw	r26, 0x25	; 37
    e248:	7c 92       	st	X, r7
    e24a:	03 c0       	rjmp	.+6      	; 0xe252 <get_cpu_joypad_state+0x1e4>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    e24c:	e9 85       	ldd	r30, Y+9	; 0x09
    e24e:	fa 85       	ldd	r31, Y+10	; 0x0a
    e250:	b5 a2       	std	Z+37, r11	; 0x25
		}
		p->held = player->goal_direction;
    e252:	a9 85       	ldd	r26, Y+9	; 0x09
    e254:	ba 85       	ldd	r27, Y+10	; 0x0a
    e256:	5f 96       	adiw	r26, 0x1f	; 31
    e258:	8d 91       	ld	r24, X+
    e25a:	9c 91       	ld	r25, X
    e25c:	90 97       	sbiw	r26, 0x20	; 32
    e25e:	f2 01       	movw	r30, r4
    e260:	95 83       	std	Z+5, r25	; 0x05
    e262:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    e264:	a9 85       	ldd	r26, Y+9	; 0x09
    e266:	ba 85       	ldd	r27, Y+10	; 0x0a
    e268:	13 96       	adiw	r26, 0x03	; 3
    e26a:	cd 90       	ld	r12, X+
    e26c:	dd 90       	ld	r13, X+
    e26e:	ed 90       	ld	r14, X+
    e270:	fc 90       	ld	r15, X
    e272:	16 97       	sbiw	r26, 0x06	; 6
    e274:	97 96       	adiw	r26, 0x27	; 39
    e276:	2d 91       	ld	r18, X+
    e278:	3d 91       	ld	r19, X+
    e27a:	4d 91       	ld	r20, X+
    e27c:	5c 91       	ld	r21, X
    e27e:	9a 97       	sbiw	r26, 0x2a	; 42
    e280:	c7 01       	movw	r24, r14
    e282:	b6 01       	movw	r22, r12
    e284:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    e288:	88 23       	and	r24, r24
    e28a:	29 f0       	breq	.+10     	; 0xe296 <get_cpu_joypad_state+0x228>
		player->deadlock_count_x = 0;
    e28c:	e9 85       	ldd	r30, Y+9	; 0x09
    e28e:	fa 85       	ldd	r31, Y+10	; 0x0a
    e290:	12 a2       	std	Z+34, r1	; 0x22
    e292:	11 a2       	std	Z+33, r1	; 0x21
    e294:	0b c0       	rjmp	.+22     	; 0xe2ac <get_cpu_joypad_state+0x23e>
	else 
		player->deadlock_count_x++;
    e296:	a9 85       	ldd	r26, Y+9	; 0x09
    e298:	ba 85       	ldd	r27, Y+10	; 0x0a
    e29a:	91 96       	adiw	r26, 0x21	; 33
    e29c:	8d 91       	ld	r24, X+
    e29e:	9c 91       	ld	r25, X
    e2a0:	92 97       	sbiw	r26, 0x22	; 34
    e2a2:	01 96       	adiw	r24, 0x01	; 1
    e2a4:	92 96       	adiw	r26, 0x22	; 34
    e2a6:	9c 93       	st	X, r25
    e2a8:	8e 93       	st	-X, r24
    e2aa:	91 97       	sbiw	r26, 0x21	; 33
	if (player->shared.y != player->old_y)
    e2ac:	e9 85       	ldd	r30, Y+9	; 0x09
    e2ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    e2b0:	87 80       	ldd	r8, Z+7	; 0x07
    e2b2:	90 84       	ldd	r9, Z+8	; 0x08
    e2b4:	a1 84       	ldd	r10, Z+9	; 0x09
    e2b6:	b2 84       	ldd	r11, Z+10	; 0x0a
    e2b8:	23 a5       	ldd	r18, Z+43	; 0x2b
    e2ba:	34 a5       	ldd	r19, Z+44	; 0x2c
    e2bc:	45 a5       	ldd	r20, Z+45	; 0x2d
    e2be:	56 a5       	ldd	r21, Z+46	; 0x2e
    e2c0:	c5 01       	movw	r24, r10
    e2c2:	b4 01       	movw	r22, r8
    e2c4:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    e2c8:	88 23       	and	r24, r24
    e2ca:	39 f0       	breq	.+14     	; 0xe2da <get_cpu_joypad_state+0x26c>
		player->deadlock_count_y = 0;
    e2cc:	a9 85       	ldd	r26, Y+9	; 0x09
    e2ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    e2d0:	94 96       	adiw	r26, 0x24	; 36
    e2d2:	1c 92       	st	X, r1
    e2d4:	1e 92       	st	-X, r1
    e2d6:	93 97       	sbiw	r26, 0x23	; 35
    e2d8:	07 c0       	rjmp	.+14     	; 0xe2e8 <get_cpu_joypad_state+0x27a>
	else
		player->deadlock_count_y++;
    e2da:	e9 85       	ldd	r30, Y+9	; 0x09
    e2dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    e2de:	83 a1       	ldd	r24, Z+35	; 0x23
    e2e0:	94 a1       	ldd	r25, Z+36	; 0x24
    e2e2:	01 96       	adiw	r24, 0x01	; 1
    e2e4:	94 a3       	std	Z+36, r25	; 0x24
    e2e6:	83 a3       	std	Z+35, r24	; 0x23
	player->old_x = player->shared.x;
    e2e8:	a9 85       	ldd	r26, Y+9	; 0x09
    e2ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    e2ec:	97 96       	adiw	r26, 0x27	; 39
    e2ee:	cd 92       	st	X+, r12
    e2f0:	dd 92       	st	X+, r13
    e2f2:	ed 92       	st	X+, r14
    e2f4:	fc 92       	st	X, r15
    e2f6:	9a 97       	sbiw	r26, 0x2a	; 42
	player->old_y = player->shared.y;
    e2f8:	fd 01       	movw	r30, r26
    e2fa:	83 a6       	std	Z+43, r8	; 0x2b
    e2fc:	94 a6       	std	Z+44, r9	; 0x2c
    e2fe:	a5 a6       	std	Z+45, r10	; 0x2d
    e300:	b6 a6       	std	Z+46, r11	; 0x2e
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    e302:	81 a1       	ldd	r24, Z+33	; 0x21
    e304:	92 a1       	ldd	r25, Z+34	; 0x22
    e306:	80 34       	cpi	r24, 0x40	; 64
    e308:	91 40       	sbci	r25, 0x01	; 1
    e30a:	90 f0       	brcs	.+36     	; 0xe330 <get_cpu_joypad_state+0x2c2>
	{
		p->held = button_map(LBRandom(2, 4));
    e30c:	64 e0       	ldi	r22, 0x04	; 4
    e30e:	70 e0       	ldi	r23, 0x00	; 0
    e310:	82 e0       	ldi	r24, 0x02	; 2
    e312:	90 e0       	ldi	r25, 0x00	; 0
    e314:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    e318:	0e 94 f0 6e 	call	0xdde0	; 0xdde0 <button_map>
    e31c:	d2 01       	movw	r26, r4
    e31e:	15 96       	adiw	r26, 0x05	; 5
    e320:	9c 93       	st	X, r25
    e322:	8e 93       	st	-X, r24
    e324:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    e326:	e9 85       	ldd	r30, Y+9	; 0x09
    e328:	fa 85       	ldd	r31, Y+10	; 0x0a
    e32a:	12 a2       	std	Z+34, r1	; 0x22
    e32c:	11 a2       	std	Z+33, r1	; 0x21
    e32e:	43 c0       	rjmp	.+134    	; 0xe3b6 <get_cpu_joypad_state+0x348>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    e330:	a9 85       	ldd	r26, Y+9	; 0x09
    e332:	ba 85       	ldd	r27, Y+10	; 0x0a
    e334:	93 96       	adiw	r26, 0x23	; 35
    e336:	8d 91       	ld	r24, X+
    e338:	9c 91       	ld	r25, X
    e33a:	94 97       	sbiw	r26, 0x24	; 36
    e33c:	80 34       	cpi	r24, 0x40	; 64
    e33e:	91 40       	sbci	r25, 0x01	; 1
    e340:	90 f0       	brcs	.+36     	; 0xe366 <get_cpu_joypad_state+0x2f8>
	{
		p->held = button_map(LBRandom(0, 2));
    e342:	62 e0       	ldi	r22, 0x02	; 2
    e344:	70 e0       	ldi	r23, 0x00	; 0
    e346:	80 e0       	ldi	r24, 0x00	; 0
    e348:	90 e0       	ldi	r25, 0x00	; 0
    e34a:	0e 94 e3 54 	call	0xa9c6	; 0xa9c6 <LBRandom>
    e34e:	0e 94 f0 6e 	call	0xdde0	; 0xdde0 <button_map>
    e352:	f2 01       	movw	r30, r4
    e354:	95 83       	std	Z+5, r25	; 0x05
    e356:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    e358:	a9 85       	ldd	r26, Y+9	; 0x09
    e35a:	ba 85       	ldd	r27, Y+10	; 0x0a
    e35c:	94 96       	adiw	r26, 0x24	; 36
    e35e:	1c 92       	st	X, r1
    e360:	1e 92       	st	-X, r1
    e362:	93 97       	sbiw	r26, 0x23	; 35
    e364:	28 c0       	rjmp	.+80     	; 0xe3b6 <get_cpu_joypad_state+0x348>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    e366:	20 e0       	ldi	r18, 0x00	; 0
    e368:	30 e0       	ldi	r19, 0x00	; 0
    e36a:	40 e0       	ldi	r20, 0x00	; 0
    e36c:	5e e3       	ldi	r21, 0x3E	; 62
    e36e:	c5 01       	movw	r24, r10
    e370:	b4 01       	movw	r22, r8
    e372:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e376:	20 e0       	ldi	r18, 0x00	; 0
    e378:	30 e0       	ldi	r19, 0x00	; 0
    e37a:	40 e4       	ldi	r20, 0x40	; 64
    e37c:	50 e4       	ldi	r21, 0x40	; 64
    e37e:	0e 94 0d 74 	call	0xe81a	; 0xe81a <__subsf3>
    e382:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
    e386:	b6 2e       	mov	r11, r22
    e388:	20 e0       	ldi	r18, 0x00	; 0
    e38a:	30 e0       	ldi	r19, 0x00	; 0
    e38c:	40 e0       	ldi	r20, 0x00	; 0
    e38e:	5e e3       	ldi	r21, 0x3E	; 62
    e390:	c7 01       	movw	r24, r14
    e392:	b6 01       	movw	r22, r12
    e394:	0e 94 c5 75 	call	0xeb8a	; 0xeb8a <__mulsf3>
    e398:	0e 94 de 74 	call	0xe9bc	; 0xe9bc <__fixsfsi>
    e39c:	86 2f       	mov	r24, r22
    e39e:	82 01       	movw	r16, r4
    e3a0:	29 85       	ldd	r18, Y+9	; 0x09
    e3a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    e3a4:	f9 01       	movw	r30, r18
    e3a6:	42 81       	ldd	r20, Z+2	; 0x02
    e3a8:	6b 2d       	mov	r22, r11
    e3aa:	0e 94 06 6f 	call	0xde0c	; 0xde0c <crash_and_turn>
    e3ae:	a9 85       	ldd	r26, Y+9	; 0x09
    e3b0:	ba 85       	ldd	r27, Y+10	; 0x0a
    e3b2:	96 96       	adiw	r26, 0x26	; 38
    e3b4:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    e3b6:	e9 85       	ldd	r30, Y+9	; 0x09
    e3b8:	fa 85       	ldd	r31, Y+10	; 0x0a
    e3ba:	86 8d       	ldd	r24, Z+30	; 0x1e
    e3bc:	81 30       	cpi	r24, 0x01	; 1
    e3be:	09 f0       	breq	.+2      	; 0xe3c2 <get_cpu_joypad_state+0x354>
    e3c0:	f7 c0       	rjmp	.+494    	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e3c2:	d1 01       	movw	r26, r2
    e3c4:	52 96       	adiw	r26, 0x12	; 18
    e3c6:	9c 91       	ld	r25, X
    e3c8:	52 97       	sbiw	r26, 0x12	; 18
    e3ca:	51 96       	adiw	r26, 0x11	; 17
    e3cc:	8c 91       	ld	r24, X
    e3ce:	51 97       	sbiw	r26, 0x11	; 17
    e3d0:	98 17       	cp	r25, r24
    e3d2:	08 f0       	brcs	.+2      	; 0xe3d6 <get_cpu_joypad_state+0x368>
    e3d4:	ed c0       	rjmp	.+474    	; 0xe5b0 <get_cpu_joypad_state+0x542>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    e3d6:	17 96       	adiw	r26, 0x07	; 7
    e3d8:	cd 90       	ld	r12, X+
    e3da:	dd 90       	ld	r13, X+
    e3dc:	ed 90       	ld	r14, X+
    e3de:	fc 90       	ld	r15, X
    e3e0:	1a 97       	sbiw	r26, 0x0a	; 10
    e3e2:	87 80       	ldd	r8, Z+7	; 0x07
    e3e4:	90 84       	ldd	r9, Z+8	; 0x08
    e3e6:	a1 84       	ldd	r10, Z+9	; 0x09
    e3e8:	b2 84       	ldd	r11, Z+10	; 0x0a
    e3ea:	a5 01       	movw	r20, r10
    e3ec:	94 01       	movw	r18, r8
    e3ee:	c7 01       	movw	r24, r14
    e3f0:	b6 01       	movw	r22, r12
    e3f2:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    e3f6:	87 ff       	sbrs	r24, 7
    e3f8:	64 c0       	rjmp	.+200    	; 0xe4c2 <get_cpu_joypad_state+0x454>
    e3fa:	e9 85       	ldd	r30, Y+9	; 0x09
    e3fc:	fa 85       	ldd	r31, Y+10	; 0x0a
    e3fe:	23 81       	ldd	r18, Z+3	; 0x03
    e400:	34 81       	ldd	r19, Z+4	; 0x04
    e402:	45 81       	ldd	r20, Z+5	; 0x05
    e404:	56 81       	ldd	r21, Z+6	; 0x06
    e406:	d1 01       	movw	r26, r2
    e408:	13 96       	adiw	r26, 0x03	; 3
    e40a:	6d 91       	ld	r22, X+
    e40c:	7d 91       	ld	r23, X+
    e40e:	8d 91       	ld	r24, X+
    e410:	9c 91       	ld	r25, X
    e412:	16 97       	sbiw	r26, 0x06	; 6
    e414:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    e418:	87 ff       	sbrs	r24, 7
    e41a:	27 c0       	rjmp	.+78     	; 0xe46a <get_cpu_joypad_state+0x3fc>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    e41c:	f1 01       	movw	r30, r2
    e41e:	80 81       	ld	r24, Z
    e420:	82 30       	cpi	r24, 0x02	; 2
    e422:	79 f4       	brne	.+30     	; 0xe442 <get_cpu_joypad_state+0x3d4>
    e424:	a9 85       	ldd	r26, Y+9	; 0x09
    e426:	ba 85       	ldd	r27, Y+10	; 0x0a
    e428:	8c 91       	ld	r24, X
    e42a:	83 30       	cpi	r24, 0x03	; 3
    e42c:	51 f4       	brne	.+20     	; 0xe442 <get_cpu_joypad_state+0x3d4>
			{
				p->held = BTN_RIGHT;
    e42e:	80 e8       	ldi	r24, 0x80	; 128
    e430:	90 e0       	ldi	r25, 0x00	; 0
    e432:	f2 01       	movw	r30, r4
    e434:	95 83       	std	Z+5, r25	; 0x05
    e436:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    e438:	96 96       	adiw	r26, 0x26	; 38
    e43a:	1c 92       	st	X, r1
    e43c:	96 97       	sbiw	r26, 0x26	; 38
				player->feeling_my_way = 0;
    e43e:	5c 96       	adiw	r26, 0x1c	; 28
    e440:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    e442:	d1 01       	movw	r26, r2
    e444:	8c 91       	ld	r24, X
    e446:	81 30       	cpi	r24, 0x01	; 1
    e448:	09 f0       	breq	.+2      	; 0xe44c <get_cpu_joypad_state+0x3de>
    e44a:	b2 c0       	rjmp	.+356    	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e44c:	e9 85       	ldd	r30, Y+9	; 0x09
    e44e:	fa 85       	ldd	r31, Y+10	; 0x0a
    e450:	80 81       	ld	r24, Z
    e452:	81 11       	cpse	r24, r1
    e454:	ad c0       	rjmp	.+346    	; 0xe5b0 <get_cpu_joypad_state+0x542>
			{
				player->goal_reached = 0;
    e456:	a9 85       	ldd	r26, Y+9	; 0x09
    e458:	ba 85       	ldd	r27, Y+10	; 0x0a
    e45a:	96 96       	adiw	r26, 0x26	; 38
    e45c:	1c 92       	st	X, r1
    e45e:	96 97       	sbiw	r26, 0x26	; 38
				player->feeling_my_way = 0;
    e460:	5c 96       	adiw	r26, 0x1c	; 28
    e462:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    e464:	80 e2       	ldi	r24, 0x20	; 32
    e466:	90 e0       	ldi	r25, 0x00	; 0
    e468:	6c c0       	rjmp	.+216    	; 0xe542 <get_cpu_joypad_state+0x4d4>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    e46a:	a9 85       	ldd	r26, Y+9	; 0x09
    e46c:	ba 85       	ldd	r27, Y+10	; 0x0a
    e46e:	13 96       	adiw	r26, 0x03	; 3
    e470:	2d 91       	ld	r18, X+
    e472:	3d 91       	ld	r19, X+
    e474:	4d 91       	ld	r20, X+
    e476:	5c 91       	ld	r21, X
    e478:	16 97       	sbiw	r26, 0x06	; 6
    e47a:	f1 01       	movw	r30, r2
    e47c:	63 81       	ldd	r22, Z+3	; 0x03
    e47e:	74 81       	ldd	r23, Z+4	; 0x04
    e480:	85 81       	ldd	r24, Z+5	; 0x05
    e482:	96 81       	ldd	r25, Z+6	; 0x06
    e484:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    e488:	18 16       	cp	r1, r24
    e48a:	dc f4       	brge	.+54     	; 0xe4c2 <get_cpu_joypad_state+0x454>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    e48c:	d1 01       	movw	r26, r2
    e48e:	8c 91       	ld	r24, X
    e490:	82 30       	cpi	r24, 0x02	; 2
    e492:	71 f4       	brne	.+28     	; 0xe4b0 <get_cpu_joypad_state+0x442>
    e494:	e9 85       	ldd	r30, Y+9	; 0x09
    e496:	fa 85       	ldd	r31, Y+10	; 0x0a
    e498:	80 81       	ld	r24, Z
    e49a:	81 30       	cpi	r24, 0x01	; 1
    e49c:	49 f4       	brne	.+18     	; 0xe4b0 <get_cpu_joypad_state+0x442>
			{
				player->goal_reached = 0;
    e49e:	16 a2       	std	Z+38, r1	; 0x26
				player->feeling_my_way = 0;
    e4a0:	14 8e       	std	Z+28, r1	; 0x1c
				p->held = BTN_LEFT;
    e4a2:	80 e4       	ldi	r24, 0x40	; 64
    e4a4:	90 e0       	ldi	r25, 0x00	; 0
    e4a6:	d2 01       	movw	r26, r4
    e4a8:	15 96       	adiw	r26, 0x05	; 5
    e4aa:	9c 93       	st	X, r25
    e4ac:	8e 93       	st	-X, r24
    e4ae:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    e4b0:	f1 01       	movw	r30, r2
    e4b2:	80 81       	ld	r24, Z
    e4b4:	83 30       	cpi	r24, 0x03	; 3
    e4b6:	09 f0       	breq	.+2      	; 0xe4ba <get_cpu_joypad_state+0x44c>
    e4b8:	7b c0       	rjmp	.+246    	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e4ba:	a9 85       	ldd	r26, Y+9	; 0x09
    e4bc:	ba 85       	ldd	r27, Y+10	; 0x0a
    e4be:	8c 91       	ld	r24, X
    e4c0:	c8 cf       	rjmp	.-112    	; 0xe452 <get_cpu_joypad_state+0x3e4>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    e4c2:	a5 01       	movw	r20, r10
    e4c4:	94 01       	movw	r18, r8
    e4c6:	c7 01       	movw	r24, r14
    e4c8:	b6 01       	movw	r22, r12
    e4ca:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    e4ce:	18 16       	cp	r1, r24
    e4d0:	e4 f5       	brge	.+120    	; 0xe54a <get_cpu_joypad_state+0x4dc>
    e4d2:	e9 85       	ldd	r30, Y+9	; 0x09
    e4d4:	fa 85       	ldd	r31, Y+10	; 0x0a
    e4d6:	23 81       	ldd	r18, Z+3	; 0x03
    e4d8:	34 81       	ldd	r19, Z+4	; 0x04
    e4da:	45 81       	ldd	r20, Z+5	; 0x05
    e4dc:	56 81       	ldd	r21, Z+6	; 0x06
    e4de:	d1 01       	movw	r26, r2
    e4e0:	13 96       	adiw	r26, 0x03	; 3
    e4e2:	6d 91       	ld	r22, X+
    e4e4:	7d 91       	ld	r23, X+
    e4e6:	8d 91       	ld	r24, X+
    e4e8:	9c 91       	ld	r25, X
    e4ea:	16 97       	sbiw	r26, 0x06	; 6
    e4ec:	0e 94 72 74 	call	0xe8e4	; 0xe8e4 <__cmpsf2>
    e4f0:	87 ff       	sbrs	r24, 7
    e4f2:	33 c0       	rjmp	.+102    	; 0xe55a <get_cpu_joypad_state+0x4ec>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    e4f4:	f1 01       	movw	r30, r2
    e4f6:	80 81       	ld	r24, Z
    e4f8:	81 11       	cpse	r24, r1
    e4fa:	0f c0       	rjmp	.+30     	; 0xe51a <get_cpu_joypad_state+0x4ac>
    e4fc:	a9 85       	ldd	r26, Y+9	; 0x09
    e4fe:	ba 85       	ldd	r27, Y+10	; 0x0a
    e500:	8c 91       	ld	r24, X
    e502:	83 30       	cpi	r24, 0x03	; 3
    e504:	51 f4       	brne	.+20     	; 0xe51a <get_cpu_joypad_state+0x4ac>
			{
				player->goal_reached = 0;
    e506:	96 96       	adiw	r26, 0x26	; 38
    e508:	1c 92       	st	X, r1
    e50a:	96 97       	sbiw	r26, 0x26	; 38
				player->feeling_my_way = 0;
    e50c:	5c 96       	adiw	r26, 0x1c	; 28
    e50e:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    e510:	80 e8       	ldi	r24, 0x80	; 128
    e512:	90 e0       	ldi	r25, 0x00	; 0
    e514:	f2 01       	movw	r30, r4
    e516:	95 83       	std	Z+5, r25	; 0x05
    e518:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    e51a:	d1 01       	movw	r26, r2
    e51c:	8c 91       	ld	r24, X
    e51e:	81 30       	cpi	r24, 0x01	; 1
    e520:	09 f0       	breq	.+2      	; 0xe524 <get_cpu_joypad_state+0x4b6>
    e522:	46 c0       	rjmp	.+140    	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e524:	e9 85       	ldd	r30, Y+9	; 0x09
    e526:	fa 85       	ldd	r31, Y+10	; 0x0a
    e528:	80 81       	ld	r24, Z
    e52a:	82 30       	cpi	r24, 0x02	; 2
    e52c:	09 f0       	breq	.+2      	; 0xe530 <get_cpu_joypad_state+0x4c2>
    e52e:	40 c0       	rjmp	.+128    	; 0xe5b0 <get_cpu_joypad_state+0x542>
			{
				player->goal_reached = 0;
    e530:	a9 85       	ldd	r26, Y+9	; 0x09
    e532:	ba 85       	ldd	r27, Y+10	; 0x0a
    e534:	96 96       	adiw	r26, 0x26	; 38
    e536:	1c 92       	st	X, r1
    e538:	96 97       	sbiw	r26, 0x26	; 38
				player->feeling_my_way = 0;
    e53a:	5c 96       	adiw	r26, 0x1c	; 28
    e53c:	1c 92       	st	X, r1
				p->held = BTN_UP;
    e53e:	80 e1       	ldi	r24, 0x10	; 16
    e540:	90 e0       	ldi	r25, 0x00	; 0
    e542:	f2 01       	movw	r30, r4
    e544:	95 83       	std	Z+5, r25	; 0x05
    e546:	84 83       	std	Z+4, r24	; 0x04
    e548:	33 c0       	rjmp	.+102    	; 0xe5b0 <get_cpu_joypad_state+0x542>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    e54a:	a5 01       	movw	r20, r10
    e54c:	94 01       	movw	r18, r8
    e54e:	c7 01       	movw	r24, r14
    e550:	b6 01       	movw	r22, r12
    e552:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    e556:	18 16       	cp	r1, r24
    e558:	5c f5       	brge	.+86     	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e55a:	a9 85       	ldd	r26, Y+9	; 0x09
    e55c:	ba 85       	ldd	r27, Y+10	; 0x0a
    e55e:	13 96       	adiw	r26, 0x03	; 3
    e560:	2d 91       	ld	r18, X+
    e562:	3d 91       	ld	r19, X+
    e564:	4d 91       	ld	r20, X+
    e566:	5c 91       	ld	r21, X
    e568:	16 97       	sbiw	r26, 0x06	; 6
    e56a:	f1 01       	movw	r30, r2
    e56c:	63 81       	ldd	r22, Z+3	; 0x03
    e56e:	74 81       	ldd	r23, Z+4	; 0x04
    e570:	85 81       	ldd	r24, Z+5	; 0x05
    e572:	96 81       	ldd	r25, Z+6	; 0x06
    e574:	0e 94 c1 75 	call	0xeb82	; 0xeb82 <__gesf2>
    e578:	18 16       	cp	r1, r24
    e57a:	d4 f4       	brge	.+52     	; 0xe5b0 <get_cpu_joypad_state+0x542>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    e57c:	d1 01       	movw	r26, r2
    e57e:	8c 91       	ld	r24, X
    e580:	81 11       	cpse	r24, r1
    e582:	0e c0       	rjmp	.+28     	; 0xe5a0 <get_cpu_joypad_state+0x532>
    e584:	e9 85       	ldd	r30, Y+9	; 0x09
    e586:	fa 85       	ldd	r31, Y+10	; 0x0a
    e588:	80 81       	ld	r24, Z
    e58a:	81 30       	cpi	r24, 0x01	; 1
    e58c:	49 f4       	brne	.+18     	; 0xe5a0 <get_cpu_joypad_state+0x532>
			{
				player->goal_reached = 0;
    e58e:	16 a2       	std	Z+38, r1	; 0x26
				player->feeling_my_way = 0;
    e590:	14 8e       	std	Z+28, r1	; 0x1c
				p->held = BTN_LEFT;
    e592:	80 e4       	ldi	r24, 0x40	; 64
    e594:	90 e0       	ldi	r25, 0x00	; 0
    e596:	d2 01       	movw	r26, r4
    e598:	15 96       	adiw	r26, 0x05	; 5
    e59a:	9c 93       	st	X, r25
    e59c:	8e 93       	st	-X, r24
    e59e:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    e5a0:	f1 01       	movw	r30, r2
    e5a2:	80 81       	ld	r24, Z
    e5a4:	83 30       	cpi	r24, 0x03	; 3
    e5a6:	21 f4       	brne	.+8      	; 0xe5b0 <get_cpu_joypad_state+0x542>
    e5a8:	a9 85       	ldd	r26, Y+9	; 0x09
    e5aa:	ba 85       	ldd	r27, Y+10	; 0x0a
    e5ac:	8c 91       	ld	r24, X
    e5ae:	bd cf       	rjmp	.-134    	; 0xe52a <get_cpu_joypad_state+0x4bc>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    e5b0:	2a 96       	adiw	r28, 0x0a	; 10
    e5b2:	0f b6       	in	r0, 0x3f	; 63
    e5b4:	f8 94       	cli
    e5b6:	de bf       	out	0x3e, r29	; 62
    e5b8:	0f be       	out	0x3f, r0	; 63
    e5ba:	cd bf       	out	0x3d, r28	; 61
    e5bc:	df 91       	pop	r29
    e5be:	cf 91       	pop	r28
    e5c0:	1f 91       	pop	r17
    e5c2:	0f 91       	pop	r16
    e5c4:	ff 90       	pop	r15
    e5c6:	ef 90       	pop	r14
    e5c8:	df 90       	pop	r13
    e5ca:	cf 90       	pop	r12
    e5cc:	bf 90       	pop	r11
    e5ce:	af 90       	pop	r10
    e5d0:	9f 90       	pop	r9
    e5d2:	8f 90       	pop	r8
    e5d4:	7f 90       	pop	r7
    e5d6:	5f 90       	pop	r5
    e5d8:	4f 90       	pop	r4
    e5da:	3f 90       	pop	r3
    e5dc:	2f 90       	pop	r2
    e5de:	08 95       	ret

0000e5e0 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    e5e0:	bf 92       	push	r11
    e5e2:	cf 92       	push	r12
    e5e4:	df 92       	push	r13
    e5e6:	ef 92       	push	r14
    e5e8:	ff 92       	push	r15
    e5ea:	0f 93       	push	r16
    e5ec:	1f 93       	push	r17
    e5ee:	cf 93       	push	r28
    e5f0:	df 93       	push	r29
    e5f2:	1f 92       	push	r1
    e5f4:	cd b7       	in	r28, 0x3d	; 61
    e5f6:	de b7       	in	r29, 0x3e	; 62
    e5f8:	8c 01       	movw	r16, r24
    e5fa:	f6 2e       	mov	r15, r22
    e5fc:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    e5fe:	8f e0       	ldi	r24, 0x0F	; 15
    e600:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    e602:	f8 01       	movw	r30, r16
    e604:	84 91       	lpm	r24, Z
    e606:	83 32       	cpi	r24, 0x23	; 35
    e608:	59 f1       	breq	.+86     	; 0xe660 <stream_text_middle+0x80>
	{
		ln = strnlen_P(dialogue, 255);
    e60a:	6f ef       	ldi	r22, 0xFF	; 255
    e60c:	70 e0       	ldi	r23, 0x00	; 0
    e60e:	c8 01       	movw	r24, r16
    e610:	0e 94 31 76 	call	0xec62	; 0xec62 <strnlen_P>
		x = 15 - ln / 2;
    e614:	86 95       	lsr	r24
    e616:	eb 2c       	mov	r14, r11
    e618:	e8 1a       	sub	r14, r24
    e61a:	e0 1a       	sub	r14, r16
    e61c:	8e 2d       	mov	r24, r14
    e61e:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    e620:	0f 5f       	subi	r16, 0xFF	; 255
    e622:	1f 4f       	sbci	r17, 0xFF	; 255
    e624:	f8 01       	movw	r30, r16
    e626:	31 97       	sbiw	r30, 0x01	; 1
    e628:	e4 91       	lpm	r30, Z
    e62a:	e9 83       	std	Y+1, r30	; 0x01
    e62c:	ee 23       	and	r30, r30
    e62e:	b1 f0       	breq	.+44     	; 0xe65c <stream_text_middle+0x7c>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    e630:	21 e0       	ldi	r18, 0x01	; 1
    e632:	ae 01       	movw	r20, r28
    e634:	4f 5f       	subi	r20, 0xFF	; 255
    e636:	5f 4f       	sbci	r21, 0xFF	; 255
    e638:	6f 2d       	mov	r22, r15
    e63a:	0e 94 b2 53 	call	0xa764	; 0xa764 <LBPrintStr>
			LBGetJoyPadState(&p1, 0);
    e63e:	60 e0       	ldi	r22, 0x00	; 0
    e640:	85 eb       	ldi	r24, 0xB5	; 181
    e642:	9c e0       	ldi	r25, 0x0C	; 12
    e644:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
			if (!(p1.held & BTN_A)) LBWaitUs(delay);
    e648:	80 91 b9 0c 	lds	r24, 0x0CB9
    e64c:	90 91 ba 0c 	lds	r25, 0x0CBA
    e650:	90 fd       	sbrc	r25, 0
    e652:	e4 cf       	rjmp	.-56     	; 0xe61c <stream_text_middle+0x3c>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    e654:	c6 01       	movw	r24, r12
    e656:	0e 94 14 44 	call	0x8828	; 0x8828 <WaitUs>
    e65a:	e0 cf       	rjmp	.-64     	; 0xe61c <stream_text_middle+0x3c>
		}
		y++;
    e65c:	f3 94       	inc	r15
    e65e:	d1 cf       	rjmp	.-94     	; 0xe602 <stream_text_middle+0x22>
	}
}
    e660:	0f 90       	pop	r0
    e662:	df 91       	pop	r29
    e664:	cf 91       	pop	r28
    e666:	1f 91       	pop	r17
    e668:	0f 91       	pop	r16
    e66a:	ff 90       	pop	r15
    e66c:	ef 90       	pop	r14
    e66e:	df 90       	pop	r13
    e670:	cf 90       	pop	r12
    e672:	bf 90       	pop	r11
    e674:	08 95       	ret

0000e676 <load_credits>:

void load_credits()
{
	fade_through();
    e676:	0e 94 05 57 	call	0xae0a	; 0xae0a <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    e67a:	44 e6       	ldi	r20, 0x64	; 100
    e67c:	50 e0       	ldi	r21, 0x00	; 0
    e67e:	65 e0       	ldi	r22, 0x05	; 5
    e680:	88 ee       	ldi	r24, 0xE8	; 232
    e682:	90 e0       	ldi	r25, 0x00	; 0
    e684:	0e 94 f0 72 	call	0xe5e0	; 0xe5e0 <stream_text_middle>
	LBWaitSeconds(4);
    e688:	84 e0       	ldi	r24, 0x04	; 4
    e68a:	0e 94 18 55 	call	0xaa30	; 0xaa30 <LBWaitSeconds>
	fade_through();
    e68e:	0c 94 05 57 	jmp	0xae0a	; 0xae0a <fade_through>

0000e692 <main>:
#endif

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    e692:	83 ea       	ldi	r24, 0xA3	; 163
    e694:	93 e0       	ldi	r25, 0x03	; 3
    e696:	0e 94 82 46 	call	0x8d04	; 0x8d04 <InitMusicPlayer>
	SetMasterVolume(0xff);
    e69a:	8f ef       	ldi	r24, 0xFF	; 255
    e69c:	0e 94 ff 49 	call	0x93fe	; 0x93fe <SetMasterVolume>
	SetTileTable(tiles_data);
    e6a0:	81 ea       	ldi	r24, 0xA1	; 161
    e6a2:	94 e4       	ldi	r25, 0x44	; 68
    e6a4:	0e 94 f9 43 	call	0x87f2	; 0x87f2 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e6a8:	80 e1       	ldi	r24, 0x10	; 16
    e6aa:	9b e3       	ldi	r25, 0x3B	; 59
    e6ac:	0e 94 d5 43 	call	0x87aa	; 0x87aa <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e6b0:	8b e9       	ldi	r24, 0x9B	; 155
    e6b2:	0e 94 f6 43 	call	0x87ec	; 0x87ec <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e6b6:	60 e0       	ldi	r22, 0x00	; 0
    e6b8:	83 e0       	ldi	r24, 0x03	; 3
    e6ba:	0e 94 c9 52 	call	0xa592	; 0xa592 <FadeIn>
	ClearVram();
    e6be:	0e 94 da 43 	call	0x87b4	; 0x87b4 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    e6c2:	80 ec       	ldi	r24, 0xC0	; 192
    e6c4:	9b e0       	ldi	r25, 0x0B	; 11
    e6c6:	0e 94 31 55 	call	0xaa62	; 0xaa62 <init_scores>
	init_handles(&handles);
    e6ca:	87 ee       	ldi	r24, 0xE7	; 231
    e6cc:	9b e0       	ldi	r25, 0x0B	; 11
    e6ce:	0e 94 3d 55 	call	0xaa7a	; 0xaa7a <init_handles>
	init_game_state();
    e6d2:	0e 94 99 56 	call	0xad32	; 0xad32 <init_game_state>
	load_credits();
    e6d6:	0e 94 3b 73 	call	0xe676	; 0xe676 <load_credits>
	load_splash();
    e6da:	0e 94 b2 65 	call	0xcb64	; 0xcb64 <load_splash>
	
	while (1)
	{
		waitForVSync();
    e6de:	0e 94 ef 56 	call	0xadde	; 0xadde <waitForVSync>
		switch (game.current_screen)
    e6e2:	80 91 07 0c 	lds	r24, 0x0C07
    e6e6:	81 30       	cpi	r24, 0x01	; 1
    e6e8:	91 f0       	breq	.+36     	; 0xe70e <main+0x7c>
    e6ea:	28 f0       	brcs	.+10     	; 0xe6f6 <main+0x64>
    e6ec:	82 30       	cpi	r24, 0x02	; 2
    e6ee:	c9 f0       	breq	.+50     	; 0xe722 <main+0x90>
    e6f0:	83 30       	cpi	r24, 0x03	; 3
    e6f2:	41 f1       	breq	.+80     	; 0xe744 <main+0xb2>
    e6f4:	54 c0       	rjmp	.+168    	; 0xe79e <main+0x10c>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    e6f6:	60 e0       	ldi	r22, 0x00	; 0
    e6f8:	85 eb       	ldi	r24, 0xB5	; 181
    e6fa:	9c e0       	ldi	r25, 0x0C	; 12
    e6fc:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    e700:	60 ee       	ldi	r22, 0xE0	; 224
    e702:	7b e0       	ldi	r23, 0x0B	; 11
    e704:	85 eb       	ldi	r24, 0xB5	; 181
    e706:	9c e0       	ldi	r25, 0x0C	; 12
    e708:	0e 94 c8 6d 	call	0xdb90	; 0xdb90 <update_splash>
				break;
    e70c:	48 c0       	rjmp	.+144    	; 0xe79e <main+0x10c>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e70e:	60 e0       	ldi	r22, 0x00	; 0
    e710:	85 eb       	ldi	r24, 0xB5	; 181
    e712:	9c e0       	ldi	r25, 0x0C	; 12
    e714:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
				update_tank_rank(&p1);
    e718:	85 eb       	ldi	r24, 0xB5	; 181
    e71a:	9c e0       	ldi	r25, 0x0C	; 12
    e71c:	0e 94 4c 6b 	call	0xd698	; 0xd698 <update_tank_rank>
				break;
    e720:	3e c0       	rjmp	.+124    	; 0xe79e <main+0x10c>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    e722:	60 e0       	ldi	r22, 0x00	; 0
    e724:	85 eb       	ldi	r24, 0xB5	; 181
    e726:	9c e0       	ldi	r25, 0x0C	; 12
    e728:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    e72c:	61 e0       	ldi	r22, 0x01	; 1
    e72e:	80 ee       	ldi	r24, 0xE0	; 224
    e730:	9b e0       	ldi	r25, 0x0B	; 11
    e732:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    e736:	60 ee       	ldi	r22, 0xE0	; 224
    e738:	7b e0       	ldi	r23, 0x0B	; 11
    e73a:	85 eb       	ldi	r24, 0xB5	; 181
    e73c:	9c e0       	ldi	r25, 0x0C	; 12
    e73e:	0e 94 a2 6e 	call	0xdd44	; 0xdd44 <update_handle_select>
				break;
    e742:	2d c0       	rjmp	.+90     	; 0xe79e <main+0x10c>
			case LEVEL:
				if (game.selection == PVCPU)
    e744:	80 91 1c 0c 	lds	r24, 0x0C1C
    e748:	81 11       	cpse	r24, r1
    e74a:	06 c0       	rjmp	.+12     	; 0xe758 <main+0xc6>
				{
					LBGetJoyPadState(&p1, 0);
    e74c:	60 e0       	ldi	r22, 0x00	; 0
    e74e:	85 eb       	ldi	r24, 0xB5	; 181
    e750:	9c e0       	ldi	r25, 0x0C	; 12
    e752:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
    e756:	0a c0       	rjmp	.+20     	; 0xe76c <main+0xda>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e758:	83 30       	cpi	r24, 0x03	; 3
    e75a:	89 f4       	brne	.+34     	; 0xe77e <main+0xec>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e75c:	45 eb       	ldi	r20, 0xB5	; 181
    e75e:	5c e0       	ldi	r21, 0x0C	; 12
    e760:	6b ea       	ldi	r22, 0xAB	; 171
    e762:	7f e0       	ldi	r23, 0x0F	; 15
    e764:	8a e3       	ldi	r24, 0x3A	; 58
    e766:	9c e0       	ldi	r25, 0x0C	; 12
    e768:	0e 94 37 70 	call	0xe06e	; 0xe06e <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e76c:	40 ee       	ldi	r20, 0xE0	; 224
    e76e:	5b e0       	ldi	r21, 0x0B	; 11
    e770:	6a e3       	ldi	r22, 0x3A	; 58
    e772:	7c e0       	ldi	r23, 0x0C	; 12
    e774:	8b ea       	ldi	r24, 0xAB	; 171
    e776:	9f e0       	ldi	r25, 0x0F	; 15
    e778:	0e 94 37 70 	call	0xe06e	; 0xe06e <get_cpu_joypad_state>
    e77c:	0a c0       	rjmp	.+20     	; 0xe792 <main+0x100>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e77e:	60 e0       	ldi	r22, 0x00	; 0
    e780:	85 eb       	ldi	r24, 0xB5	; 181
    e782:	9c e0       	ldi	r25, 0x0C	; 12
    e784:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e788:	61 e0       	ldi	r22, 0x01	; 1
    e78a:	80 ee       	ldi	r24, 0xE0	; 224
    e78c:	9b e0       	ldi	r25, 0x0B	; 11
    e78e:	0e 94 5b 53 	call	0xa6b6	; 0xa6b6 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e792:	60 ee       	ldi	r22, 0xE0	; 224
    e794:	7b e0       	ldi	r23, 0x0B	; 11
    e796:	85 eb       	ldi	r24, 0xB5	; 181
    e798:	9c e0       	ldi	r25, 0x0C	; 12
    e79a:	0e 94 0a 69 	call	0xd214	; 0xd214 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e79e:	80 91 01 01 	lds	r24, 0x0101
    e7a2:	90 91 02 01 	lds	r25, 0x0102
    e7a6:	01 96       	adiw	r24, 0x01	; 1
    e7a8:	90 93 02 01 	sts	0x0102, r25
    e7ac:	80 93 01 01 	sts	0x0101, r24
	}
    e7b0:	96 cf       	rjmp	.-212    	; 0xe6de <main+0x4c>

0000e7b2 <__udivmodqi4>:
    e7b2:	99 1b       	sub	r25, r25
    e7b4:	79 e0       	ldi	r23, 0x09	; 9
    e7b6:	04 c0       	rjmp	.+8      	; 0xe7c0 <__udivmodqi4_ep>

0000e7b8 <__udivmodqi4_loop>:
    e7b8:	99 1f       	adc	r25, r25
    e7ba:	96 17       	cp	r25, r22
    e7bc:	08 f0       	brcs	.+2      	; 0xe7c0 <__udivmodqi4_ep>
    e7be:	96 1b       	sub	r25, r22

0000e7c0 <__udivmodqi4_ep>:
    e7c0:	88 1f       	adc	r24, r24
    e7c2:	7a 95       	dec	r23
    e7c4:	c9 f7       	brne	.-14     	; 0xe7b8 <__udivmodqi4_loop>
    e7c6:	80 95       	com	r24
    e7c8:	08 95       	ret

0000e7ca <__udivmodhi4>:
    e7ca:	aa 1b       	sub	r26, r26
    e7cc:	bb 1b       	sub	r27, r27
    e7ce:	51 e1       	ldi	r21, 0x11	; 17
    e7d0:	07 c0       	rjmp	.+14     	; 0xe7e0 <__udivmodhi4_ep>

0000e7d2 <__udivmodhi4_loop>:
    e7d2:	aa 1f       	adc	r26, r26
    e7d4:	bb 1f       	adc	r27, r27
    e7d6:	a6 17       	cp	r26, r22
    e7d8:	b7 07       	cpc	r27, r23
    e7da:	10 f0       	brcs	.+4      	; 0xe7e0 <__udivmodhi4_ep>
    e7dc:	a6 1b       	sub	r26, r22
    e7de:	b7 0b       	sbc	r27, r23

0000e7e0 <__udivmodhi4_ep>:
    e7e0:	88 1f       	adc	r24, r24
    e7e2:	99 1f       	adc	r25, r25
    e7e4:	5a 95       	dec	r21
    e7e6:	a9 f7       	brne	.-22     	; 0xe7d2 <__udivmodhi4_loop>
    e7e8:	80 95       	com	r24
    e7ea:	90 95       	com	r25
    e7ec:	bc 01       	movw	r22, r24
    e7ee:	cd 01       	movw	r24, r26
    e7f0:	08 95       	ret

0000e7f2 <__divmodhi4>:
    e7f2:	97 fb       	bst	r25, 7
    e7f4:	07 2e       	mov	r0, r23
    e7f6:	16 f4       	brtc	.+4      	; 0xe7fc <__divmodhi4+0xa>
    e7f8:	00 94       	com	r0
    e7fa:	07 d0       	rcall	.+14     	; 0xe80a <__divmodhi4_neg1>
    e7fc:	77 fd       	sbrc	r23, 7
    e7fe:	09 d0       	rcall	.+18     	; 0xe812 <__divmodhi4_neg2>
    e800:	0e 94 e5 73 	call	0xe7ca	; 0xe7ca <__udivmodhi4>
    e804:	07 fc       	sbrc	r0, 7
    e806:	05 d0       	rcall	.+10     	; 0xe812 <__divmodhi4_neg2>
    e808:	3e f4       	brtc	.+14     	; 0xe818 <__divmodhi4_exit>

0000e80a <__divmodhi4_neg1>:
    e80a:	90 95       	com	r25
    e80c:	81 95       	neg	r24
    e80e:	9f 4f       	sbci	r25, 0xFF	; 255
    e810:	08 95       	ret

0000e812 <__divmodhi4_neg2>:
    e812:	70 95       	com	r23
    e814:	61 95       	neg	r22
    e816:	7f 4f       	sbci	r23, 0xFF	; 255

0000e818 <__divmodhi4_exit>:
    e818:	08 95       	ret

0000e81a <__subsf3>:
    e81a:	50 58       	subi	r21, 0x80	; 128

0000e81c <__addsf3>:
    e81c:	bb 27       	eor	r27, r27
    e81e:	aa 27       	eor	r26, r26
    e820:	0e d0       	rcall	.+28     	; 0xe83e <__addsf3x>
    e822:	75 c1       	rjmp	.+746    	; 0xeb0e <__fp_round>
    e824:	66 d1       	rcall	.+716    	; 0xeaf2 <__fp_pscA>
    e826:	30 f0       	brcs	.+12     	; 0xe834 <__addsf3+0x18>
    e828:	6b d1       	rcall	.+726    	; 0xeb00 <__fp_pscB>
    e82a:	20 f0       	brcs	.+8      	; 0xe834 <__addsf3+0x18>
    e82c:	31 f4       	brne	.+12     	; 0xe83a <__addsf3+0x1e>
    e82e:	9f 3f       	cpi	r25, 0xFF	; 255
    e830:	11 f4       	brne	.+4      	; 0xe836 <__addsf3+0x1a>
    e832:	1e f4       	brtc	.+6      	; 0xe83a <__addsf3+0x1e>
    e834:	5b c1       	rjmp	.+694    	; 0xeaec <__fp_nan>
    e836:	0e f4       	brtc	.+2      	; 0xe83a <__addsf3+0x1e>
    e838:	e0 95       	com	r30
    e83a:	e7 fb       	bst	r30, 7
    e83c:	51 c1       	rjmp	.+674    	; 0xeae0 <__fp_inf>

0000e83e <__addsf3x>:
    e83e:	e9 2f       	mov	r30, r25
    e840:	77 d1       	rcall	.+750    	; 0xeb30 <__fp_split3>
    e842:	80 f3       	brcs	.-32     	; 0xe824 <__addsf3+0x8>
    e844:	ba 17       	cp	r27, r26
    e846:	62 07       	cpc	r22, r18
    e848:	73 07       	cpc	r23, r19
    e84a:	84 07       	cpc	r24, r20
    e84c:	95 07       	cpc	r25, r21
    e84e:	18 f0       	brcs	.+6      	; 0xe856 <__addsf3x+0x18>
    e850:	71 f4       	brne	.+28     	; 0xe86e <__addsf3x+0x30>
    e852:	9e f5       	brtc	.+102    	; 0xe8ba <__addsf3x+0x7c>
    e854:	8f c1       	rjmp	.+798    	; 0xeb74 <__fp_zero>
    e856:	0e f4       	brtc	.+2      	; 0xe85a <__addsf3x+0x1c>
    e858:	e0 95       	com	r30
    e85a:	0b 2e       	mov	r0, r27
    e85c:	ba 2f       	mov	r27, r26
    e85e:	a0 2d       	mov	r26, r0
    e860:	0b 01       	movw	r0, r22
    e862:	b9 01       	movw	r22, r18
    e864:	90 01       	movw	r18, r0
    e866:	0c 01       	movw	r0, r24
    e868:	ca 01       	movw	r24, r20
    e86a:	a0 01       	movw	r20, r0
    e86c:	11 24       	eor	r1, r1
    e86e:	ff 27       	eor	r31, r31
    e870:	59 1b       	sub	r21, r25
    e872:	99 f0       	breq	.+38     	; 0xe89a <__addsf3x+0x5c>
    e874:	59 3f       	cpi	r21, 0xF9	; 249
    e876:	50 f4       	brcc	.+20     	; 0xe88c <__addsf3x+0x4e>
    e878:	50 3e       	cpi	r21, 0xE0	; 224
    e87a:	68 f1       	brcs	.+90     	; 0xe8d6 <__addsf3x+0x98>
    e87c:	1a 16       	cp	r1, r26
    e87e:	f0 40       	sbci	r31, 0x00	; 0
    e880:	a2 2f       	mov	r26, r18
    e882:	23 2f       	mov	r18, r19
    e884:	34 2f       	mov	r19, r20
    e886:	44 27       	eor	r20, r20
    e888:	58 5f       	subi	r21, 0xF8	; 248
    e88a:	f3 cf       	rjmp	.-26     	; 0xe872 <__addsf3x+0x34>
    e88c:	46 95       	lsr	r20
    e88e:	37 95       	ror	r19
    e890:	27 95       	ror	r18
    e892:	a7 95       	ror	r26
    e894:	f0 40       	sbci	r31, 0x00	; 0
    e896:	53 95       	inc	r21
    e898:	c9 f7       	brne	.-14     	; 0xe88c <__addsf3x+0x4e>
    e89a:	7e f4       	brtc	.+30     	; 0xe8ba <__addsf3x+0x7c>
    e89c:	1f 16       	cp	r1, r31
    e89e:	ba 0b       	sbc	r27, r26
    e8a0:	62 0b       	sbc	r22, r18
    e8a2:	73 0b       	sbc	r23, r19
    e8a4:	84 0b       	sbc	r24, r20
    e8a6:	ba f0       	brmi	.+46     	; 0xe8d6 <__addsf3x+0x98>
    e8a8:	91 50       	subi	r25, 0x01	; 1
    e8aa:	a1 f0       	breq	.+40     	; 0xe8d4 <__addsf3x+0x96>
    e8ac:	ff 0f       	add	r31, r31
    e8ae:	bb 1f       	adc	r27, r27
    e8b0:	66 1f       	adc	r22, r22
    e8b2:	77 1f       	adc	r23, r23
    e8b4:	88 1f       	adc	r24, r24
    e8b6:	c2 f7       	brpl	.-16     	; 0xe8a8 <__addsf3x+0x6a>
    e8b8:	0e c0       	rjmp	.+28     	; 0xe8d6 <__addsf3x+0x98>
    e8ba:	ba 0f       	add	r27, r26
    e8bc:	62 1f       	adc	r22, r18
    e8be:	73 1f       	adc	r23, r19
    e8c0:	84 1f       	adc	r24, r20
    e8c2:	48 f4       	brcc	.+18     	; 0xe8d6 <__addsf3x+0x98>
    e8c4:	87 95       	ror	r24
    e8c6:	77 95       	ror	r23
    e8c8:	67 95       	ror	r22
    e8ca:	b7 95       	ror	r27
    e8cc:	f7 95       	ror	r31
    e8ce:	9e 3f       	cpi	r25, 0xFE	; 254
    e8d0:	08 f0       	brcs	.+2      	; 0xe8d4 <__addsf3x+0x96>
    e8d2:	b3 cf       	rjmp	.-154    	; 0xe83a <__addsf3+0x1e>
    e8d4:	93 95       	inc	r25
    e8d6:	88 0f       	add	r24, r24
    e8d8:	08 f0       	brcs	.+2      	; 0xe8dc <__addsf3x+0x9e>
    e8da:	99 27       	eor	r25, r25
    e8dc:	ee 0f       	add	r30, r30
    e8de:	97 95       	ror	r25
    e8e0:	87 95       	ror	r24
    e8e2:	08 95       	ret

0000e8e4 <__cmpsf2>:
    e8e4:	d9 d0       	rcall	.+434    	; 0xea98 <__fp_cmp>
    e8e6:	08 f4       	brcc	.+2      	; 0xe8ea <__cmpsf2+0x6>
    e8e8:	81 e0       	ldi	r24, 0x01	; 1
    e8ea:	08 95       	ret

0000e8ec <__divsf3>:
    e8ec:	0c d0       	rcall	.+24     	; 0xe906 <__divsf3x>
    e8ee:	0f c1       	rjmp	.+542    	; 0xeb0e <__fp_round>
    e8f0:	07 d1       	rcall	.+526    	; 0xeb00 <__fp_pscB>
    e8f2:	40 f0       	brcs	.+16     	; 0xe904 <__divsf3+0x18>
    e8f4:	fe d0       	rcall	.+508    	; 0xeaf2 <__fp_pscA>
    e8f6:	30 f0       	brcs	.+12     	; 0xe904 <__divsf3+0x18>
    e8f8:	21 f4       	brne	.+8      	; 0xe902 <__divsf3+0x16>
    e8fa:	5f 3f       	cpi	r21, 0xFF	; 255
    e8fc:	19 f0       	breq	.+6      	; 0xe904 <__divsf3+0x18>
    e8fe:	f0 c0       	rjmp	.+480    	; 0xeae0 <__fp_inf>
    e900:	51 11       	cpse	r21, r1
    e902:	39 c1       	rjmp	.+626    	; 0xeb76 <__fp_szero>
    e904:	f3 c0       	rjmp	.+486    	; 0xeaec <__fp_nan>

0000e906 <__divsf3x>:
    e906:	14 d1       	rcall	.+552    	; 0xeb30 <__fp_split3>
    e908:	98 f3       	brcs	.-26     	; 0xe8f0 <__divsf3+0x4>

0000e90a <__divsf3_pse>:
    e90a:	99 23       	and	r25, r25
    e90c:	c9 f3       	breq	.-14     	; 0xe900 <__divsf3+0x14>
    e90e:	55 23       	and	r21, r21
    e910:	b1 f3       	breq	.-20     	; 0xe8fe <__divsf3+0x12>
    e912:	95 1b       	sub	r25, r21
    e914:	55 0b       	sbc	r21, r21
    e916:	bb 27       	eor	r27, r27
    e918:	aa 27       	eor	r26, r26
    e91a:	62 17       	cp	r22, r18
    e91c:	73 07       	cpc	r23, r19
    e91e:	84 07       	cpc	r24, r20
    e920:	38 f0       	brcs	.+14     	; 0xe930 <__divsf3_pse+0x26>
    e922:	9f 5f       	subi	r25, 0xFF	; 255
    e924:	5f 4f       	sbci	r21, 0xFF	; 255
    e926:	22 0f       	add	r18, r18
    e928:	33 1f       	adc	r19, r19
    e92a:	44 1f       	adc	r20, r20
    e92c:	aa 1f       	adc	r26, r26
    e92e:	a9 f3       	breq	.-22     	; 0xe91a <__divsf3_pse+0x10>
    e930:	33 d0       	rcall	.+102    	; 0xe998 <__divsf3_pse+0x8e>
    e932:	0e 2e       	mov	r0, r30
    e934:	3a f0       	brmi	.+14     	; 0xe944 <__divsf3_pse+0x3a>
    e936:	e0 e8       	ldi	r30, 0x80	; 128
    e938:	30 d0       	rcall	.+96     	; 0xe99a <__divsf3_pse+0x90>
    e93a:	91 50       	subi	r25, 0x01	; 1
    e93c:	50 40       	sbci	r21, 0x00	; 0
    e93e:	e6 95       	lsr	r30
    e940:	00 1c       	adc	r0, r0
    e942:	ca f7       	brpl	.-14     	; 0xe936 <__divsf3_pse+0x2c>
    e944:	29 d0       	rcall	.+82     	; 0xe998 <__divsf3_pse+0x8e>
    e946:	fe 2f       	mov	r31, r30
    e948:	27 d0       	rcall	.+78     	; 0xe998 <__divsf3_pse+0x8e>
    e94a:	66 0f       	add	r22, r22
    e94c:	77 1f       	adc	r23, r23
    e94e:	88 1f       	adc	r24, r24
    e950:	bb 1f       	adc	r27, r27
    e952:	26 17       	cp	r18, r22
    e954:	37 07       	cpc	r19, r23
    e956:	48 07       	cpc	r20, r24
    e958:	ab 07       	cpc	r26, r27
    e95a:	b0 e8       	ldi	r27, 0x80	; 128
    e95c:	09 f0       	breq	.+2      	; 0xe960 <__divsf3_pse+0x56>
    e95e:	bb 0b       	sbc	r27, r27
    e960:	80 2d       	mov	r24, r0
    e962:	bf 01       	movw	r22, r30
    e964:	ff 27       	eor	r31, r31
    e966:	93 58       	subi	r25, 0x83	; 131
    e968:	5f 4f       	sbci	r21, 0xFF	; 255
    e96a:	2a f0       	brmi	.+10     	; 0xe976 <__divsf3_pse+0x6c>
    e96c:	9e 3f       	cpi	r25, 0xFE	; 254
    e96e:	51 05       	cpc	r21, r1
    e970:	68 f0       	brcs	.+26     	; 0xe98c <__divsf3_pse+0x82>
    e972:	b6 c0       	rjmp	.+364    	; 0xeae0 <__fp_inf>
    e974:	00 c1       	rjmp	.+512    	; 0xeb76 <__fp_szero>
    e976:	5f 3f       	cpi	r21, 0xFF	; 255
    e978:	ec f3       	brlt	.-6      	; 0xe974 <__divsf3_pse+0x6a>
    e97a:	98 3e       	cpi	r25, 0xE8	; 232
    e97c:	dc f3       	brlt	.-10     	; 0xe974 <__divsf3_pse+0x6a>
    e97e:	86 95       	lsr	r24
    e980:	77 95       	ror	r23
    e982:	67 95       	ror	r22
    e984:	b7 95       	ror	r27
    e986:	f7 95       	ror	r31
    e988:	9f 5f       	subi	r25, 0xFF	; 255
    e98a:	c9 f7       	brne	.-14     	; 0xe97e <__divsf3_pse+0x74>
    e98c:	88 0f       	add	r24, r24
    e98e:	91 1d       	adc	r25, r1
    e990:	96 95       	lsr	r25
    e992:	87 95       	ror	r24
    e994:	97 f9       	bld	r25, 7
    e996:	08 95       	ret
    e998:	e1 e0       	ldi	r30, 0x01	; 1
    e99a:	66 0f       	add	r22, r22
    e99c:	77 1f       	adc	r23, r23
    e99e:	88 1f       	adc	r24, r24
    e9a0:	bb 1f       	adc	r27, r27
    e9a2:	62 17       	cp	r22, r18
    e9a4:	73 07       	cpc	r23, r19
    e9a6:	84 07       	cpc	r24, r20
    e9a8:	ba 07       	cpc	r27, r26
    e9aa:	20 f0       	brcs	.+8      	; 0xe9b4 <__divsf3_pse+0xaa>
    e9ac:	62 1b       	sub	r22, r18
    e9ae:	73 0b       	sbc	r23, r19
    e9b0:	84 0b       	sbc	r24, r20
    e9b2:	ba 0b       	sbc	r27, r26
    e9b4:	ee 1f       	adc	r30, r30
    e9b6:	88 f7       	brcc	.-30     	; 0xe99a <__divsf3_pse+0x90>
    e9b8:	e0 95       	com	r30
    e9ba:	08 95       	ret

0000e9bc <__fixsfsi>:
    e9bc:	04 d0       	rcall	.+8      	; 0xe9c6 <__fixunssfsi>
    e9be:	68 94       	set
    e9c0:	b1 11       	cpse	r27, r1
    e9c2:	d9 c0       	rjmp	.+434    	; 0xeb76 <__fp_szero>
    e9c4:	08 95       	ret

0000e9c6 <__fixunssfsi>:
    e9c6:	bc d0       	rcall	.+376    	; 0xeb40 <__fp_splitA>
    e9c8:	88 f0       	brcs	.+34     	; 0xe9ec <__fixunssfsi+0x26>
    e9ca:	9f 57       	subi	r25, 0x7F	; 127
    e9cc:	90 f0       	brcs	.+36     	; 0xe9f2 <__fixunssfsi+0x2c>
    e9ce:	b9 2f       	mov	r27, r25
    e9d0:	99 27       	eor	r25, r25
    e9d2:	b7 51       	subi	r27, 0x17	; 23
    e9d4:	a0 f0       	brcs	.+40     	; 0xe9fe <__fixunssfsi+0x38>
    e9d6:	d1 f0       	breq	.+52     	; 0xea0c <__fixunssfsi+0x46>
    e9d8:	66 0f       	add	r22, r22
    e9da:	77 1f       	adc	r23, r23
    e9dc:	88 1f       	adc	r24, r24
    e9de:	99 1f       	adc	r25, r25
    e9e0:	1a f0       	brmi	.+6      	; 0xe9e8 <__fixunssfsi+0x22>
    e9e2:	ba 95       	dec	r27
    e9e4:	c9 f7       	brne	.-14     	; 0xe9d8 <__fixunssfsi+0x12>
    e9e6:	12 c0       	rjmp	.+36     	; 0xea0c <__fixunssfsi+0x46>
    e9e8:	b1 30       	cpi	r27, 0x01	; 1
    e9ea:	81 f0       	breq	.+32     	; 0xea0c <__fixunssfsi+0x46>
    e9ec:	c3 d0       	rcall	.+390    	; 0xeb74 <__fp_zero>
    e9ee:	b1 e0       	ldi	r27, 0x01	; 1
    e9f0:	08 95       	ret
    e9f2:	c0 c0       	rjmp	.+384    	; 0xeb74 <__fp_zero>
    e9f4:	67 2f       	mov	r22, r23
    e9f6:	78 2f       	mov	r23, r24
    e9f8:	88 27       	eor	r24, r24
    e9fa:	b8 5f       	subi	r27, 0xF8	; 248
    e9fc:	39 f0       	breq	.+14     	; 0xea0c <__fixunssfsi+0x46>
    e9fe:	b9 3f       	cpi	r27, 0xF9	; 249
    ea00:	cc f3       	brlt	.-14     	; 0xe9f4 <__fixunssfsi+0x2e>
    ea02:	86 95       	lsr	r24
    ea04:	77 95       	ror	r23
    ea06:	67 95       	ror	r22
    ea08:	b3 95       	inc	r27
    ea0a:	d9 f7       	brne	.-10     	; 0xea02 <__fixunssfsi+0x3c>
    ea0c:	3e f4       	brtc	.+14     	; 0xea1c <__fixunssfsi+0x56>
    ea0e:	90 95       	com	r25
    ea10:	80 95       	com	r24
    ea12:	70 95       	com	r23
    ea14:	61 95       	neg	r22
    ea16:	7f 4f       	sbci	r23, 0xFF	; 255
    ea18:	8f 4f       	sbci	r24, 0xFF	; 255
    ea1a:	9f 4f       	sbci	r25, 0xFF	; 255
    ea1c:	08 95       	ret

0000ea1e <__floatunsisf>:
    ea1e:	e8 94       	clt
    ea20:	09 c0       	rjmp	.+18     	; 0xea34 <__floatsisf+0x12>

0000ea22 <__floatsisf>:
    ea22:	97 fb       	bst	r25, 7
    ea24:	3e f4       	brtc	.+14     	; 0xea34 <__floatsisf+0x12>
    ea26:	90 95       	com	r25
    ea28:	80 95       	com	r24
    ea2a:	70 95       	com	r23
    ea2c:	61 95       	neg	r22
    ea2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ea30:	8f 4f       	sbci	r24, 0xFF	; 255
    ea32:	9f 4f       	sbci	r25, 0xFF	; 255
    ea34:	99 23       	and	r25, r25
    ea36:	a9 f0       	breq	.+42     	; 0xea62 <__floatsisf+0x40>
    ea38:	f9 2f       	mov	r31, r25
    ea3a:	96 e9       	ldi	r25, 0x96	; 150
    ea3c:	bb 27       	eor	r27, r27
    ea3e:	93 95       	inc	r25
    ea40:	f6 95       	lsr	r31
    ea42:	87 95       	ror	r24
    ea44:	77 95       	ror	r23
    ea46:	67 95       	ror	r22
    ea48:	b7 95       	ror	r27
    ea4a:	f1 11       	cpse	r31, r1
    ea4c:	f8 cf       	rjmp	.-16     	; 0xea3e <__floatsisf+0x1c>
    ea4e:	fa f4       	brpl	.+62     	; 0xea8e <__floatsisf+0x6c>
    ea50:	bb 0f       	add	r27, r27
    ea52:	11 f4       	brne	.+4      	; 0xea58 <__floatsisf+0x36>
    ea54:	60 ff       	sbrs	r22, 0
    ea56:	1b c0       	rjmp	.+54     	; 0xea8e <__floatsisf+0x6c>
    ea58:	6f 5f       	subi	r22, 0xFF	; 255
    ea5a:	7f 4f       	sbci	r23, 0xFF	; 255
    ea5c:	8f 4f       	sbci	r24, 0xFF	; 255
    ea5e:	9f 4f       	sbci	r25, 0xFF	; 255
    ea60:	16 c0       	rjmp	.+44     	; 0xea8e <__floatsisf+0x6c>
    ea62:	88 23       	and	r24, r24
    ea64:	11 f0       	breq	.+4      	; 0xea6a <__floatsisf+0x48>
    ea66:	96 e9       	ldi	r25, 0x96	; 150
    ea68:	11 c0       	rjmp	.+34     	; 0xea8c <__floatsisf+0x6a>
    ea6a:	77 23       	and	r23, r23
    ea6c:	21 f0       	breq	.+8      	; 0xea76 <__floatsisf+0x54>
    ea6e:	9e e8       	ldi	r25, 0x8E	; 142
    ea70:	87 2f       	mov	r24, r23
    ea72:	76 2f       	mov	r23, r22
    ea74:	05 c0       	rjmp	.+10     	; 0xea80 <__floatsisf+0x5e>
    ea76:	66 23       	and	r22, r22
    ea78:	71 f0       	breq	.+28     	; 0xea96 <__floatsisf+0x74>
    ea7a:	96 e8       	ldi	r25, 0x86	; 134
    ea7c:	86 2f       	mov	r24, r22
    ea7e:	70 e0       	ldi	r23, 0x00	; 0
    ea80:	60 e0       	ldi	r22, 0x00	; 0
    ea82:	2a f0       	brmi	.+10     	; 0xea8e <__floatsisf+0x6c>
    ea84:	9a 95       	dec	r25
    ea86:	66 0f       	add	r22, r22
    ea88:	77 1f       	adc	r23, r23
    ea8a:	88 1f       	adc	r24, r24
    ea8c:	da f7       	brpl	.-10     	; 0xea84 <__floatsisf+0x62>
    ea8e:	88 0f       	add	r24, r24
    ea90:	96 95       	lsr	r25
    ea92:	87 95       	ror	r24
    ea94:	97 f9       	bld	r25, 7
    ea96:	08 95       	ret

0000ea98 <__fp_cmp>:
    ea98:	99 0f       	add	r25, r25
    ea9a:	00 08       	sbc	r0, r0
    ea9c:	55 0f       	add	r21, r21
    ea9e:	aa 0b       	sbc	r26, r26
    eaa0:	e0 e8       	ldi	r30, 0x80	; 128
    eaa2:	fe ef       	ldi	r31, 0xFE	; 254
    eaa4:	16 16       	cp	r1, r22
    eaa6:	17 06       	cpc	r1, r23
    eaa8:	e8 07       	cpc	r30, r24
    eaaa:	f9 07       	cpc	r31, r25
    eaac:	c0 f0       	brcs	.+48     	; 0xeade <__fp_cmp+0x46>
    eaae:	12 16       	cp	r1, r18
    eab0:	13 06       	cpc	r1, r19
    eab2:	e4 07       	cpc	r30, r20
    eab4:	f5 07       	cpc	r31, r21
    eab6:	98 f0       	brcs	.+38     	; 0xeade <__fp_cmp+0x46>
    eab8:	62 1b       	sub	r22, r18
    eaba:	73 0b       	sbc	r23, r19
    eabc:	84 0b       	sbc	r24, r20
    eabe:	95 0b       	sbc	r25, r21
    eac0:	39 f4       	brne	.+14     	; 0xead0 <__fp_cmp+0x38>
    eac2:	0a 26       	eor	r0, r26
    eac4:	61 f0       	breq	.+24     	; 0xeade <__fp_cmp+0x46>
    eac6:	23 2b       	or	r18, r19
    eac8:	24 2b       	or	r18, r20
    eaca:	25 2b       	or	r18, r21
    eacc:	21 f4       	brne	.+8      	; 0xead6 <__fp_cmp+0x3e>
    eace:	08 95       	ret
    ead0:	0a 26       	eor	r0, r26
    ead2:	09 f4       	brne	.+2      	; 0xead6 <__fp_cmp+0x3e>
    ead4:	a1 40       	sbci	r26, 0x01	; 1
    ead6:	a6 95       	lsr	r26
    ead8:	8f ef       	ldi	r24, 0xFF	; 255
    eada:	81 1d       	adc	r24, r1
    eadc:	81 1d       	adc	r24, r1
    eade:	08 95       	ret

0000eae0 <__fp_inf>:
    eae0:	97 f9       	bld	r25, 7
    eae2:	9f 67       	ori	r25, 0x7F	; 127
    eae4:	80 e8       	ldi	r24, 0x80	; 128
    eae6:	70 e0       	ldi	r23, 0x00	; 0
    eae8:	60 e0       	ldi	r22, 0x00	; 0
    eaea:	08 95       	ret

0000eaec <__fp_nan>:
    eaec:	9f ef       	ldi	r25, 0xFF	; 255
    eaee:	80 ec       	ldi	r24, 0xC0	; 192
    eaf0:	08 95       	ret

0000eaf2 <__fp_pscA>:
    eaf2:	00 24       	eor	r0, r0
    eaf4:	0a 94       	dec	r0
    eaf6:	16 16       	cp	r1, r22
    eaf8:	17 06       	cpc	r1, r23
    eafa:	18 06       	cpc	r1, r24
    eafc:	09 06       	cpc	r0, r25
    eafe:	08 95       	ret

0000eb00 <__fp_pscB>:
    eb00:	00 24       	eor	r0, r0
    eb02:	0a 94       	dec	r0
    eb04:	12 16       	cp	r1, r18
    eb06:	13 06       	cpc	r1, r19
    eb08:	14 06       	cpc	r1, r20
    eb0a:	05 06       	cpc	r0, r21
    eb0c:	08 95       	ret

0000eb0e <__fp_round>:
    eb0e:	09 2e       	mov	r0, r25
    eb10:	03 94       	inc	r0
    eb12:	00 0c       	add	r0, r0
    eb14:	11 f4       	brne	.+4      	; 0xeb1a <__fp_round+0xc>
    eb16:	88 23       	and	r24, r24
    eb18:	52 f0       	brmi	.+20     	; 0xeb2e <__fp_round+0x20>
    eb1a:	bb 0f       	add	r27, r27
    eb1c:	40 f4       	brcc	.+16     	; 0xeb2e <__fp_round+0x20>
    eb1e:	bf 2b       	or	r27, r31
    eb20:	11 f4       	brne	.+4      	; 0xeb26 <__fp_round+0x18>
    eb22:	60 ff       	sbrs	r22, 0
    eb24:	04 c0       	rjmp	.+8      	; 0xeb2e <__fp_round+0x20>
    eb26:	6f 5f       	subi	r22, 0xFF	; 255
    eb28:	7f 4f       	sbci	r23, 0xFF	; 255
    eb2a:	8f 4f       	sbci	r24, 0xFF	; 255
    eb2c:	9f 4f       	sbci	r25, 0xFF	; 255
    eb2e:	08 95       	ret

0000eb30 <__fp_split3>:
    eb30:	57 fd       	sbrc	r21, 7
    eb32:	90 58       	subi	r25, 0x80	; 128
    eb34:	44 0f       	add	r20, r20
    eb36:	55 1f       	adc	r21, r21
    eb38:	59 f0       	breq	.+22     	; 0xeb50 <__fp_splitA+0x10>
    eb3a:	5f 3f       	cpi	r21, 0xFF	; 255
    eb3c:	71 f0       	breq	.+28     	; 0xeb5a <__fp_splitA+0x1a>
    eb3e:	47 95       	ror	r20

0000eb40 <__fp_splitA>:
    eb40:	88 0f       	add	r24, r24
    eb42:	97 fb       	bst	r25, 7
    eb44:	99 1f       	adc	r25, r25
    eb46:	61 f0       	breq	.+24     	; 0xeb60 <__fp_splitA+0x20>
    eb48:	9f 3f       	cpi	r25, 0xFF	; 255
    eb4a:	79 f0       	breq	.+30     	; 0xeb6a <__fp_splitA+0x2a>
    eb4c:	87 95       	ror	r24
    eb4e:	08 95       	ret
    eb50:	12 16       	cp	r1, r18
    eb52:	13 06       	cpc	r1, r19
    eb54:	14 06       	cpc	r1, r20
    eb56:	55 1f       	adc	r21, r21
    eb58:	f2 cf       	rjmp	.-28     	; 0xeb3e <__fp_split3+0xe>
    eb5a:	46 95       	lsr	r20
    eb5c:	f1 df       	rcall	.-30     	; 0xeb40 <__fp_splitA>
    eb5e:	08 c0       	rjmp	.+16     	; 0xeb70 <__fp_splitA+0x30>
    eb60:	16 16       	cp	r1, r22
    eb62:	17 06       	cpc	r1, r23
    eb64:	18 06       	cpc	r1, r24
    eb66:	99 1f       	adc	r25, r25
    eb68:	f1 cf       	rjmp	.-30     	; 0xeb4c <__fp_splitA+0xc>
    eb6a:	86 95       	lsr	r24
    eb6c:	71 05       	cpc	r23, r1
    eb6e:	61 05       	cpc	r22, r1
    eb70:	08 94       	sec
    eb72:	08 95       	ret

0000eb74 <__fp_zero>:
    eb74:	e8 94       	clt

0000eb76 <__fp_szero>:
    eb76:	bb 27       	eor	r27, r27
    eb78:	66 27       	eor	r22, r22
    eb7a:	77 27       	eor	r23, r23
    eb7c:	cb 01       	movw	r24, r22
    eb7e:	97 f9       	bld	r25, 7
    eb80:	08 95       	ret

0000eb82 <__gesf2>:
    eb82:	8a df       	rcall	.-236    	; 0xea98 <__fp_cmp>
    eb84:	08 f4       	brcc	.+2      	; 0xeb88 <__gesf2+0x6>
    eb86:	8f ef       	ldi	r24, 0xFF	; 255
    eb88:	08 95       	ret

0000eb8a <__mulsf3>:
    eb8a:	0b d0       	rcall	.+22     	; 0xeba2 <__mulsf3x>
    eb8c:	c0 cf       	rjmp	.-128    	; 0xeb0e <__fp_round>
    eb8e:	b1 df       	rcall	.-158    	; 0xeaf2 <__fp_pscA>
    eb90:	28 f0       	brcs	.+10     	; 0xeb9c <__mulsf3+0x12>
    eb92:	b6 df       	rcall	.-148    	; 0xeb00 <__fp_pscB>
    eb94:	18 f0       	brcs	.+6      	; 0xeb9c <__mulsf3+0x12>
    eb96:	95 23       	and	r25, r21
    eb98:	09 f0       	breq	.+2      	; 0xeb9c <__mulsf3+0x12>
    eb9a:	a2 cf       	rjmp	.-188    	; 0xeae0 <__fp_inf>
    eb9c:	a7 cf       	rjmp	.-178    	; 0xeaec <__fp_nan>
    eb9e:	11 24       	eor	r1, r1
    eba0:	ea cf       	rjmp	.-44     	; 0xeb76 <__fp_szero>

0000eba2 <__mulsf3x>:
    eba2:	c6 df       	rcall	.-116    	; 0xeb30 <__fp_split3>
    eba4:	a0 f3       	brcs	.-24     	; 0xeb8e <__mulsf3+0x4>

0000eba6 <__mulsf3_pse>:
    eba6:	95 9f       	mul	r25, r21
    eba8:	d1 f3       	breq	.-12     	; 0xeb9e <__mulsf3+0x14>
    ebaa:	95 0f       	add	r25, r21
    ebac:	50 e0       	ldi	r21, 0x00	; 0
    ebae:	55 1f       	adc	r21, r21
    ebb0:	62 9f       	mul	r22, r18
    ebb2:	f0 01       	movw	r30, r0
    ebb4:	72 9f       	mul	r23, r18
    ebb6:	bb 27       	eor	r27, r27
    ebb8:	f0 0d       	add	r31, r0
    ebba:	b1 1d       	adc	r27, r1
    ebbc:	63 9f       	mul	r22, r19
    ebbe:	aa 27       	eor	r26, r26
    ebc0:	f0 0d       	add	r31, r0
    ebc2:	b1 1d       	adc	r27, r1
    ebc4:	aa 1f       	adc	r26, r26
    ebc6:	64 9f       	mul	r22, r20
    ebc8:	66 27       	eor	r22, r22
    ebca:	b0 0d       	add	r27, r0
    ebcc:	a1 1d       	adc	r26, r1
    ebce:	66 1f       	adc	r22, r22
    ebd0:	82 9f       	mul	r24, r18
    ebd2:	22 27       	eor	r18, r18
    ebd4:	b0 0d       	add	r27, r0
    ebd6:	a1 1d       	adc	r26, r1
    ebd8:	62 1f       	adc	r22, r18
    ebda:	73 9f       	mul	r23, r19
    ebdc:	b0 0d       	add	r27, r0
    ebde:	a1 1d       	adc	r26, r1
    ebe0:	62 1f       	adc	r22, r18
    ebe2:	83 9f       	mul	r24, r19
    ebe4:	a0 0d       	add	r26, r0
    ebe6:	61 1d       	adc	r22, r1
    ebe8:	22 1f       	adc	r18, r18
    ebea:	74 9f       	mul	r23, r20
    ebec:	33 27       	eor	r19, r19
    ebee:	a0 0d       	add	r26, r0
    ebf0:	61 1d       	adc	r22, r1
    ebf2:	23 1f       	adc	r18, r19
    ebf4:	84 9f       	mul	r24, r20
    ebf6:	60 0d       	add	r22, r0
    ebf8:	21 1d       	adc	r18, r1
    ebfa:	82 2f       	mov	r24, r18
    ebfc:	76 2f       	mov	r23, r22
    ebfe:	6a 2f       	mov	r22, r26
    ec00:	11 24       	eor	r1, r1
    ec02:	9f 57       	subi	r25, 0x7F	; 127
    ec04:	50 40       	sbci	r21, 0x00	; 0
    ec06:	8a f0       	brmi	.+34     	; 0xec2a <__mulsf3_pse+0x84>
    ec08:	e1 f0       	breq	.+56     	; 0xec42 <__mulsf3_pse+0x9c>
    ec0a:	88 23       	and	r24, r24
    ec0c:	4a f0       	brmi	.+18     	; 0xec20 <__mulsf3_pse+0x7a>
    ec0e:	ee 0f       	add	r30, r30
    ec10:	ff 1f       	adc	r31, r31
    ec12:	bb 1f       	adc	r27, r27
    ec14:	66 1f       	adc	r22, r22
    ec16:	77 1f       	adc	r23, r23
    ec18:	88 1f       	adc	r24, r24
    ec1a:	91 50       	subi	r25, 0x01	; 1
    ec1c:	50 40       	sbci	r21, 0x00	; 0
    ec1e:	a9 f7       	brne	.-22     	; 0xec0a <__mulsf3_pse+0x64>
    ec20:	9e 3f       	cpi	r25, 0xFE	; 254
    ec22:	51 05       	cpc	r21, r1
    ec24:	70 f0       	brcs	.+28     	; 0xec42 <__mulsf3_pse+0x9c>
    ec26:	5c cf       	rjmp	.-328    	; 0xeae0 <__fp_inf>
    ec28:	a6 cf       	rjmp	.-180    	; 0xeb76 <__fp_szero>
    ec2a:	5f 3f       	cpi	r21, 0xFF	; 255
    ec2c:	ec f3       	brlt	.-6      	; 0xec28 <__mulsf3_pse+0x82>
    ec2e:	98 3e       	cpi	r25, 0xE8	; 232
    ec30:	dc f3       	brlt	.-10     	; 0xec28 <__mulsf3_pse+0x82>
    ec32:	86 95       	lsr	r24
    ec34:	77 95       	ror	r23
    ec36:	67 95       	ror	r22
    ec38:	b7 95       	ror	r27
    ec3a:	f7 95       	ror	r31
    ec3c:	e7 95       	ror	r30
    ec3e:	9f 5f       	subi	r25, 0xFF	; 255
    ec40:	c1 f7       	brne	.-16     	; 0xec32 <__mulsf3_pse+0x8c>
    ec42:	fe 2b       	or	r31, r30
    ec44:	88 0f       	add	r24, r24
    ec46:	91 1d       	adc	r25, r1
    ec48:	96 95       	lsr	r25
    ec4a:	87 95       	ror	r24
    ec4c:	97 f9       	bld	r25, 7
    ec4e:	08 95       	ret

0000ec50 <memcpy_P>:
    ec50:	fb 01       	movw	r30, r22
    ec52:	dc 01       	movw	r26, r24
    ec54:	02 c0       	rjmp	.+4      	; 0xec5a <memcpy_P+0xa>
    ec56:	05 90       	lpm	r0, Z+
    ec58:	0d 92       	st	X+, r0
    ec5a:	41 50       	subi	r20, 0x01	; 1
    ec5c:	50 40       	sbci	r21, 0x00	; 0
    ec5e:	d8 f7       	brcc	.-10     	; 0xec56 <memcpy_P+0x6>
    ec60:	08 95       	ret

0000ec62 <strnlen_P>:
    ec62:	fc 01       	movw	r30, r24
    ec64:	05 90       	lpm	r0, Z+
    ec66:	61 50       	subi	r22, 0x01	; 1
    ec68:	70 40       	sbci	r23, 0x00	; 0
    ec6a:	01 10       	cpse	r0, r1
    ec6c:	d8 f7       	brcc	.-10     	; 0xec64 <strnlen_P+0x2>
    ec6e:	80 95       	com	r24
    ec70:	90 95       	com	r25
    ec72:	8e 0f       	add	r24, r30
    ec74:	9f 1f       	adc	r25, r31
    ec76:	08 95       	ret

0000ec78 <_exit>:
    ec78:	f8 94       	cli

0000ec7a <__stop_program>:
    ec7a:	ff cf       	rjmp	.-2      	; 0xec7a <__stop_program>
