
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00009a56  00009b56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00009a56  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cd0  008001e0  008001e0  00009c20  2**5
                  ALLOC
  3 .stab         00000648  00000000  00000000  00009c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000029b  00000000  00000000  0000a264  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000a4ff  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000450  00000000  00000000  0000a510  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00005e95  00000000  00000000  0000a960  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001425  00000000  00000000  000107f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000165c  00000000  00000000  00011c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000bdc  00000000  00000000  00013278  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000145b  00000000  00000000  00013e54  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00004ac0  00000000  00000000  000152af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004c0  00000000  00000000  00019d70  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 f6 33 	jmp	0x67ec	; 0x67ec <__ctors_end>
       4:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
       8:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
       c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      10:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      14:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      18:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      1c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      20:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      24:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      28:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      2c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      30:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      34:	0c 94 3e 36 	jmp	0x6c7c	; 0x6c7c <__vector_13>
      38:	0c 94 7e 36 	jmp	0x6cfc	; 0x6cfc <__vector_14>
      3c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      40:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      44:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      48:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      4c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      50:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      54:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      58:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      5c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      60:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      64:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      68:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      6c:	0c 94 69 34 	jmp	0x68d2	; 0x68d2 <__bad_interrupt>
      70:	02 49       	sbci	r16, 0x92	; 146
      72:	05 49       	sbci	r16, 0x95	; 149
      74:	0a 49       	sbci	r16, 0x9A	; 154
      76:	0d 49       	sbci	r16, 0x9D	; 157
      78:	10 49       	sbci	r17, 0x90	; 144
      7a:	13 49       	sbci	r17, 0x93	; 147
      7c:	16 49       	sbci	r17, 0x96	; 150
      7e:	19 49       	sbci	r17, 0x99	; 153
      80:	1c 49       	sbci	r17, 0x9C	; 156

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	e1 39 e4 39 38 3a 3c 3a 44 3a e5 39 ea 39 ef 39     .9.98:<:D:.9.9.9
      e0:	4c 3a f2 39 f5 39 f8 39 35 3a                       L:.9.9.95:

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <map_uzeboxlogo2>:
      f6:	05 03 00 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f     ................
	...

00000107 <map_uzeboxlogo>:
     107:	05 04 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d     ................
     117:	00 0e 0f 10 11 12                                   ......

0000011d <logo_tileset>:
	...
     179:	00 00 00 49 00 00 00 00 00 49 52 52 00 00 00 49     ...I.....IRR...I
     189:	52 53 1c 25 00 49 52 52 24 25 25 1b 52 52 5c 2d     RS.%.IRR$%%.RR\-
     199:	2d 1c 12 12 00 00 00 00 00 00 00 00 00 00 00 00     -...............
     1a9:	40 49 49 49 00 40 49 49 52 5b 5b 5b 4a 52 52 5b     @III.@IIR[[[JRR[
     1b9:	1c 1c 13 12 5b 1c 24 1c 12 09 09 09 24 1b 12 09     ....[.$.....$...
     1c9:	09 09 09 0a 0a 0a 0a 0a 0a 0a 0a 13 0a 0a 12 0a     ................
     1d9:	0a 12 13 0a 00 00 00 00 00 00 00 00 92 52 52 52     .............RRR
     1e9:	52 52 52 49 13 12 13 09 00 1c 1b 13 0a 12 12 40     RRRI...........@
     1f9:	1b 65 64 1c 09 0a 00 09 24 1b 1c 65 12 00 00 25     .ed.....$..e...%
     209:	1c 1c 1c 1c 01 00 25 24 1c 1c 1c 1c 00 24 25 24     ......%$.....$%$
     219:	24 24 1c 1c 00 00 00 00 00 00 00 00 49 40 00 00     $$..........I@..
     229:	00 00 00 00 52 49 49 00 00 00 00 00 1c 5b 4a 48     ....RII......[JH
     239:	00 00 00 00 1c 25 52 49 00 00 00 00 65 24 64 49     .....%RI....e$dI
     249:	00 00 00 00 65 25 64 49 00 00 00 00 6d 2e 5c 49     ....e%dI....m.\I
	...
     261:	00 00 40 52 00 00 00 00 00 49 52 5c 00 00 00 00     ..@R.....IR\....
     271:	53 52 24 25 00 00 00 53 52 25 25 25 00 00 4a 52     SR$%...SR%%%..JR
     281:	25 25 1b 00 00 00 5b 25 13 00 00 1b 00 5b 53 00     %%....[%.....[S.
     291:	0a 1c 37 37 09 5b 1c 65 7f 37 2e 2e 52 2e 2e 1c     ..77.[.e.7..R...
     2a1:	13 13 12 00 2e 25 1b 13 12 00 00 12 1c 1c 12 00     .....%..........
     2b1:	00 12 25 1c 12 00 00 12 2e 37 1c 13 00 13 2e 37     ..%......7.....7
     2c1:	36 1c 13 1b 37 37 2e 2e 25 13 1c 1c 2e 2e 2e 2e     6...77..%.......
     2d1:	1b 1c 1c 1c 6e 6e 6e 1c 1c 1c 1c 1c 09 13 13 12     ....nnn.........
     2e1:	12 13 13 00 13 13 13 13 13 1c 00 09 13 13 13 13     ................
     2f1:	1c 01 00 37 13 13 13 1c 13 00 2e 2e 1b 1b 1c 1c     ...7............
     301:	00 1c 77 2e 1b 1b 25 00 13 7f 25 1c 1c 1c 01 0a     ..w...%...%.....
     311:	37 24 1c 1c 1c 13 0a 2e 25 25 09 00 13 2e 24 25     7$......%%....$%
     321:	25 25 25 25 2e 25 25 25 25 25 25 25 25 25 2d 2e     %%%%.%%%%%%%%%-.
     331:	25 1b 1c 1c 2e 2e 25 1c 13 25 1b 13 25 1c 1c 1c     %.....%..%..%...
     341:	1c 01 09 52 1c 1c 13 00 01 1c 5b 5c 0a 00 01 65     ...R......[\...e
     351:	77 5c 1b 00 01 6e 7f 6e 52 1b 00 00 6d 1c 52 49     w\...n.nR...m.RI
     361:	00 00 00 00 1c 13 53 00 00 00 00 00 1c 52 4a 00     ......S......RJ.
     371:	00 00 00 00 5b 5b 00 00 00 00 00 00 5c 00 00 00     ....[[......\...
	...
     39d:	13 5b 7f 77 6e 6e 6e 6e 13 65 77 76 6e 6e 6e 6e     .[.wnnnn.ewvnnnn
     3ad:	1b 65 77 76 76 76 6e 77 1b 5b bf 76 b6 76 76 76     .ewvvvnw.[.v.vvv
     3bd:	09 13 6d bf b7 b6 b7 65 00 1b 12 5c 76 bf 76 6d     ..m....e...\v.vm
     3cd:	00 00 12 1b 12 5b 5b 5c 00 00 00 00 09 0a 12 13     .....[[\........
     3dd:	6e 77 24 1c 1c 1c 1c 1c 77 25 1c 1c 1c 1c 24 25     nw$.....w%....$%
     3ed:	6e 1c 1c 1c 24 25 25 1b 1c 1c 24 25 25 13 00 00     n...$%%...$%%...
     3fd:	64 6d 6d 1b 00 09 6e bf 6d 5b 09 12 6e bf 6d 5b     dmm...n.m[..n.m[
     40d:	5b 12 5b 64 5b 12 13 12 13 1b 12 12 09 01 00 00     [.[d[...........
     41d:	1c 24 2e 1c 09 00 09 6e 25 24 01 00 09 76 7f 7f     .$.....n%$...v..
     42d:	00 00 12 77 7f 7f 64 12 64 bf bf 77 5b 12 1b 09     ...w..d.d..w[...
     43d:	bf 6d 5b 12 1b 09 00 00 12 13 1b 09 00 00 00 00     .m[.............
     44d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     45d:	7f 7f 53 13 13 00 00 00 64 12 1b 01 00 00 00 00     ..S.....d.......
     46d:	1b 12 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     4a5:	26 00 00 00 26 00 26 26 2f 00 00 00 2f 00 00 00     &...&.&&/.../...
     4b5:	37 00 00 00 37 00 00 00 ff 00 00 00 ff 00 00 00     7...7...........
     4c5:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     4d5:	00 26 26 00 00 00 26 26 00 00 00 00 00 00 00 00     .&&...&&........
     4e5:	26 26 26 00 26 26 26 26 00 00 2f 00 2f 00 00 00     &&&.&&&&.././...
     4f5:	00 37 00 00 37 00 00 00 ff 00 00 00 ff ff ff ff     .7..7...........
     505:	00 00 00 00 bf 00 00 00 00 00 00 00 37 00 00 00     ............7...
     515:	26 26 26 00 26 26 26 26 00 00 00 00 00 00 00 00     &&&.&&&&........
     525:	26 00 26 26 26 26 00 00 00 00 2f 00 00 00 2f 00     &.&&&&..../.../.
     535:	00 00 37 00 00 00 37 00 00 00 ff ff ff ff 00 00     ..7...7.........
     545:	00 00 bf 00 00 00 bf 00 00 00 37 00 00 00 37 00     ..........7...7.
     555:	26 00 26 26 26 26 00 00 00 00 00 00 00 00 00 00     &.&&&&..........
     565:	00 00 26 26 26 00 26 00 00 2f 00 00 2f 00 2f 00     ..&&&.&../.././.
     575:	37 00 00 00 37 00 00 37 ff 00 00 00 ff 00 00 00     7...7..7........
     585:	bf 00 00 00 bf 00 00 bf 37 00 00 37 00 00 37 00     ........7..7..7.
     595:	26 26 26 00 00 00 26 00 00 00 00 00 00 00 00 00     &&&...&.........
     5a5:	00 00 26 00 00 00 00 00 00 00 2f 00 00 00 00 00     ..&......./.....
     5b5:	00 37 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     .7..............
     5c5:	00 bf 00 00 00 00 00 00 00 00 37 00 00 00 00 00     ..........7.....
     5d5:	00 00 26 00 00 00 00 00 00 00 00 00 00 00 00 00     ..&.............
	...
     5f9:	00 00 00 e4 00 00 00 00 09 9b ed f6 00 00 00 9b     ................
     609:	a4 ad bf bf 00 52 9b a4 76 7f 7f b7 5b 9b 6d 77     .....R..v...[.mw
     619:	7f 76 6e b7 00 00 00 00 00 00 00 00 00 00 00 00     .vn.............
     629:	5b b6 f6 f6 00 5b f6 ff ff ff ff bf f6 ff ff ff     [....[..........
     639:	ff bf bf ae ff bf ff ff ff b7 ad 65 bf bf ff ff     ...........e....
     649:	b7 b6 ad 65 b7 bf ff ff bf b7 ae 6e b7 bf ff ff     ...e.......n....
     659:	bf b7 b7 65 00 00 00 00 00 00 00 00 f6 f6 ed ed     ...e............
     669:	ad a4 a4 9b b6 6d 6d 5c 52 6e 65 64 65 65 65 52     .....mm\RnedeeeR
     679:	65 76 6d 25 5c 5c 52 53 6e 24 65 6e 65 52 52 6e     evm%\\RSn$eneRRn
     689:	25 25 24 25 5b 52 77 2d 25 25 25 24 52 6e 6e 2d     %%$%[Rw-%%%$Rnn-
     699:	25 25 25 25 00 00 00 00 00 00 00 00 9b 49 00 00     %%%%.........I..
     6a9:	00 00 00 00 a4 9b 92 00 00 00 00 00 25 64 93 49     ............%d.I
     6b9:	00 00 00 00 65 2e 9b 52 00 00 00 00 6d 25 65 52     ....e..R....m%eR
     6c9:	00 00 00 00 6d 2d 65 52 00 00 00 00 6e 2e 64 52     ....m-eR....n.dR
	...
     6e1:	00 00 49 5b 00 00 00 00 00 4a 5b 65 00 00 00 00     ..I[.....J[e....
     6f1:	5b 9b 6d 2d 00 00 00 5b 5b 2d 2e 25 00 00 52 5b     [.m-...[[-.%..R[
     701:	2e 2e 1c 09 00 01 5b 2d 1c 01 09 1c 00 5c 5b 01     ......[-.....\[.
     711:	4a 65 77 7f 4a 5b 1c 6e 7f 77 77 76 9b 77 77 6d     Jew.J[.n.wwv.wwm
     721:	65 6e 6e a4 77 6e 65 65 65 5b a4 b7 25 25 5c 52     enn.wneee[..%%\R
     731:	52 6d bf bf 13 09 49 64 7f bf bf bf 09 5c 7f 7f     Rm....Id.....\..
     741:	bf bf b7 bf 7f 7f 77 7f 7f b7 bf bf 77 77 7f 7f     ......w.....ww..
     751:	6e b7 bf bf 77 7f 7f 6e 77 bf bf bf b6 ff ff ff     n...w..nw.......
     761:	bf bf b7 5b bf ff ff ff bf bf a4 64 bf ff ff ff     ...[.......d....
     771:	bf ad a4 7f bf ff ff ff bf a4 bf 7f ff ff ff bf     ................
     781:	ad bf bf bf ff ff ff b6 bf bf bf 77 ff ff f7 bf     ...........w....
     791:	bf bf 77 77 ff ff ff bf bf bf 64 52 6d 7f 6e 2e     ..ww......dRm.n.
     7a1:	2d 2d 25 6e 7f 76 6e 6e 6e 2e 25 65 77 77 77 76     --%n.vnnn.%ewwwv
     7b1:	2e 1c 25 24 7f 77 6e 25 1c 25 1c 1b 77 65 25 25     ..%$.wn%.%..we%%
     7c1:	1c 09 0a 5b 6e 6e 1c 09 49 25 64 64 5b 49 4a 6e     ...[nn..I%dd[IJn
     7d1:	7f 64 5c 00 53 77 bf 77 5b 5c 00 00 6e 25 5b 4a     .d\.Sw.w[\..n%[J
     7e1:	00 00 00 00 1c 1b 5b 00 00 00 00 00 24 5b 53 00     ......[.....$[S.
     7f1:	00 00 00 00 5b 5c 00 00 00 00 00 00 64 00 00 00     ....[\......d...
	...
     81d:	5b 5c 7f bf 77 76 77 77 5c 6d 7f b7 77 77 77 77     [\..wvww\m..wwww
     82d:	5c 6d 7f bf 77 77 77 bf 5c 64 bf bf bf bf bf 7f     \m..www.\d......
     83d:	0a 5c 6e bf bf bf bf 76 00 65 64 6d bf bf bf bf     .\n....v.edm....
     84d:	00 00 5b 6d 64 6d ad b6 00 00 00 00 12 5b 64 6d     ..[mdm.......[dm
     85d:	77 7f 6e 6e 77 bf bf bf 7f 76 6d 76 77 bf bf bf     w.nnw....vmvw...
     86d:	77 6d 6e 76 7f bf bf bf 6d 6e 76 7f bf b7 ad f6     wmnv....mnv.....
     87d:	76 bf bf 76 a4 ad ff ff bf b6 64 ad ff ff ff ff     v..v......d.....
     88d:	b6 ad bf ff ff ff ff f6 ad b6 ad 64 5b 52 00 00     ...........d[R..
     89d:	ff ff bf bf ad 5b 64 bf ff ff b6 ad ad bf ff bf     .....[d.........
     8ad:	ff f6 ff ff ff ff bf 64 ff ff ff ff bf b6 76 5b     .......d......v[
     8bd:	ff ff ff bf bf 5b 00 00 ff ff ff 5c 00 00 00 00     .....[.....\....
     8cd:	a4 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8dd:	bf bf 64 5c 5c 00 00 00 6e 5c 65 49 00 00 00 00     ..d\\...n\eI....
     8ed:	6d 5b 00 00 00 00 00 00 00 00 00 00 00 00 00 00     m[..............
	...

0000091d <logoInitPatches>:
     91d:	00 26 09 00 00 80 0f 80 0f                          .&.......

00000926 <voice>:
	...
     942:	00 00 01 01 01 02 03 04 05 06 07 09 0a 0c 0e 10     ................
     952:	11 12 14 15 16 17 17 18 17 16 14 10 0a 05 f9 f3     ................
     962:	ed e7 e5 e2 e1 e0 e0 e1 e1 e3 e4 e6 e8 ea ec ee     ................
     972:	f0 f2 f4 f6 f8 fb fd 01 04 06 09 0b 0e 10 12 15     ................
     982:	18 1a 1d 1f 22 24 27 29 2b 2d 2d 2d 2d 2a 24 1e     ...."$')+----*$.
     992:	0f 01 f6 e3 dd d6 d0 d0 cf d0 d1 d3 d6 d9 dd e1     ................
     9a2:	e7 ec f2 f7 fe 03 08 0e 0d 11 0c 08 0b 08 0b 0d     ................
     9b2:	10 12 15 17 1a 1c 1d 1e 19 18 11 05 06 00 00 ff     ................
     9c2:	ff fd f6 f6 ee ee ee e9 e9 e6 da dd db db e2 e6     ................
     9d2:	eb f2 f9 01 08 10 18 1f 28 2d 32 36 30 2c 25 18     ........(-260,%.
     9e2:	10 0a fd f3 f4 ee f0 f1 f1 ec ed e3 db de dc df     ................
     9f2:	e7 e9 ed f3 ea f2 ef ec f5 f7 ff 07 10 18 1f 26     ...............&
     a02:	2c 31 36 38 38 39 30 2a 23 1c 09 fb f3 da d3 cc     ,168890*#.......
     a12:	c4 c9 c9 c8 cd c6 c7 cd cf d8 e1 e9 f4 fd 0c 16     ................
     a22:	21 2c 35 3d 42 4a 47 47 4c 3e 3e 35 2e 21 0c 01     !,5=BJGGL>>5.!..
     a32:	ec e5 cf cc c4 bf bc b5 b9 bb c0 c8 ce d4 de dd     ................
     a42:	e8 ee f0 fc 03 0d 1a 24 2f 37 3f 46 4b 4c 51 46     .......$/7?FKLQF
     a52:	44 3d 30 2f 29 17 0e ff e4 d4 c0 b8 ac ae af b5     D=0/)...........
     a62:	ba c4 cb d3 dc e4 ed f7 00 0d 15 20 28 32 33 37     ........... (237
     a72:	37 26 2c 21 16 1b 14 15 10 0b 03 ff f9 f0 f3 e9     7&,!............
     a82:	eb e3 d9 e0 de e4 ec f1 f5 fc f9 ff 02 05 07 04     ................
     a92:	08 0b 05 07 0c 04 0a 0a 0a 0a 06 09 04 07 0b 0b     ................
     aa2:	0b 0c 06 02 fb fb f7 f0 f4 e9 e5 eb eb f1 f8 fd     ................
     ab2:	03 05 0a 0b 06 0c 0c 07 0a 08 04 ff fc f9 f8 f9     ................
     ac2:	fd fa f9 fd fd 02 09 0c 11 11 15 13 0e 15 11 0f     ................
     ad2:	11 04 fe fd f2 ed ec ed ea e1 e3 e2 db e0 e3 e0     ................
     ae2:	e7 eb ef f6 fc 04 0a 12 1a 1f 25 2a 2a 2f 2b 2e     ..........%**/+.
     af2:	2f 2b 2c 22 15 15 06 fd fa ea e4 da d7 d1 ce d3     /+,"............
     b02:	d1 d0 d6 d6 d9 dd dd e5 ea f2 fb fe 06 0f 13 1d     ................
     b12:	24 2b 30 35 39 38 3b 3b 30 32 28 1f 19 0c fd f4     $+0598;;02(.....
     b22:	e5 d4 d0 ca c8 c9 ca c6 cb ce d3 db e3 ea f4 fc     ................
     b32:	04 0d 16 1d 24 28 2c 2a 2b 27 25 28 25 20 1a 0f     ....$(,*+'%(% ..
     b42:	06 02 f7 f2 ed ea e5 e5 e0 d8 dc dc df e7 eb ef     ................
     b52:	f4 fa fa ff 07 0c 15 18 1b 1b 15 12 15 17 15 19     ................
     b62:	12 09 0c 07 07 05 00 fc fa f0 e9 ec ec ec ee ef     ................
     b72:	e4 e3 e6 e6 ed f3 f9 00 05 08 0c 11 0d 12 17 16     ................
     b82:	18 18 0a 09 05 ff 02 fe 01 03 03 05 00 ff 01 ff     ................
     b92:	03 fe ff 02 04 06 08 08 fd fc fa f1 f5 f2 f0 f6     ................
     ba2:	f6 f7 f5 f1 ea ec ec ee ef ed f2 f6 fc 02 07 0d     ................
     bb2:	12 17 1b 1f 21 25 20 20 1e 19 1e 20 1d 1b 15 fe     ....!%  ... ....
     bc2:	f3 ef ea e8 e5 e3 de dd dd dd d8 d9 d9 d9 df e3     ................
     bd2:	eb f3 f9 02 07 0b 12 17 1d 21 27 2c 30 30 30 2e     .........!',000.
     be2:	1e 1a 1b 15 18 0e 08 fe e4 dc d9 d2 d0 d7 da db     ................
     bf2:	e0 e0 de e4 e9 ef f6 fd 03 0b 12 18 1f 22 20 1f     ............." .
     c02:	21 1d 1a 1f 1c 1e 1a 09 07 01 f6 f6 f4 ea e7 e0     !...............
     c12:	d7 da d9 dd e1 e7 ed f4 f7 fd ff ff 07 0d 13 1c     ................
     c22:	21 24 26 20 1a 15 17 13 10 12 14 10 07 05 fd e9     !$& ............
     c32:	e2 e2 e0 e3 e8 eb ec e5 e3 e3 e4 e9 ef f6 fb 02     ................
     c42:	08 0d 10 16 13 0e 11 13 13 15 18 19 19 0a 03 05     ................
     c52:	00 fd 05 06 05 06 00 f1 f3 f4 f7 fb fe 01 02 f6     ................
     c62:	f7 f5 f1 f4 f6 f7 f2 f4 f7 f7 f9 fb fc ff 03 fb     ................
     c72:	f8 fd f5 f7 fc fd fe 04 09 0f 15 1b 1d 1c 11 0b     ................
     c82:	0f 11 18 1e 22 21 1d 06 fc f6 e7 e1 e4 e7 e9 ed     ...."!..........
     c92:	ef e4 e4 dc d0 d4 d7 db e5 f0 f8 01 08 0b 0e 16     ................
     ca2:	1c 24 29 2f 32 2e 28 29 22 17 16 16 0a 09 01 f6     .$)/2.()".......
     cb2:	f0 e5 e3 d5 d6 d2 cf d8 db e3 e8 ef ed ed f5 fc     ................
     cc2:	03 0d 15 1d 1f 1f 25 28 29 2d 23 1e 1b 09 04 06     ......%()-#.....
     cd2:	02 04 06 06 fe ee de ca c6 c3 c3 ca d2 da e4 ed     ................
     ce2:	f5 fe 01 02 0b 12 1c 27 32 39 40 3d 32 32 29 1a     .......'29@=22).
     cf2:	18 1b 16 18 0d 05 f5 e2 dc d0 d0 ce d0 d2 cb cc     ................
     d02:	d0 d3 d7 de e8 f0 fa 04 0e 17 1c 1f 21 18 1a 19     ............!...
     d12:	15 1b 1e 21 23 20 20 21 18 0e 07 fd f6 f4 f7 f7     ...!#  !........
     d22:	fa fc f6 f6 f6 f0 e8 e8 e3 e5 ea ef f3 f7 f4 f1     ................
     d32:	f4 ee f3 f8 fb 00 0a 0f 12 13 0e 04 ff fd fe 01     ................
     d42:	06 0a 0e 0c 0b 0e 0f 0b 10 14 18 1b 1d 19 12 0b     ................
     d52:	ff fa f0 ee eb e5 ea ed f1 f2 ee ee e6 de dc de     ................
     d62:	e1 e8 f1 f9 01 09 10 13 18 1c 1d 1b 1f 1f 21 21     ..............!!
     d72:	20 16 10 07 01 f9 f0 f0 f0 ec ef f1 f1 f1 eb e6      ...............
     d82:	e7 e9 ee f4 fa ff 04 04 04 09 0d 0e 10 16 19 1d     ................
     d92:	1d 1c 12 08 01 fc fa fb fe fe 01 03 02 fb f3 ee     ................
     da2:	e2 d9 d8 d9 dc e2 ea f0 f6 fc 01 02 08 0e 14 1a     ................
     db2:	20 26 2a 2b 26 20 1c 19 16 11 07 04 04 ff fe fd      &*+& ..........
     dc2:	fb f5 e9 e2 df d8 d7 d9 dd e1 e6 e9 ed f4 fa ff     ................
     dd2:	05 0c 10 13 15 12 0b 08 08 0a 0c 0f 12 12 14 16     ................
     de2:	15 11 0d 07 fc fa fa fc fe 00 01 00 fb f1 ee ea     ................
     df2:	eb ed f2 f6 fa fc fe f8 f5 f5 f7 fa fe 01 03 09     ................
     e02:	0d 10 11 12 11 0a 01 ff fc f9 fa fc fe 01 03 03     ................
     e12:	06 08 0a 0c 0b 08 07 06 00 f8 f7 f7 f7 f8 fb fa     ................
     e22:	f8 f9 fb fd fe fe fe f8 f4 f6 f8 fb fe 02 05 06     ................
     e32:	04 06 07 0a 0c 0f 11 11 0f 0b 01 fb f5 f1 ef f0     ................
     e42:	f1 f1 f5 f9 fd 00 03 05 04 00 ff 00 01 03 06 09     ................
     e52:	0b 0b 09 08 09 09 0a 08 06 04 02 fb f7 f7 f6 f7     ................
     e62:	f8 fa f9 fa f8 f8 f8 f9 f9 f8 f6 f3 f3 f5 f7 fa     ................
     e72:	fd 00 03 05 07 0b 0e 11 14 16 16 15 11 0c 0a 06     ................
     e82:	04 03 02 01 ff fe fd fd fd fc fa f7 f1 ed eb eb     ................
     e92:	ec ee f2 f5 f8 fb ff 02 05 08 09 0a 0a 08 04 04     ................
     ea2:	04 04 04 05 05 05 04 04 05 06 07 07 07 06 04 02     ................
     eb2:	01 00 00 fe fd fb fa fa f9 f9 fa fb fc fc fb f9     ................
     ec2:	f9 f9 f9 fa fc fe ff 01 03 05 06 07 08 07 06 04     ................
     ed2:	02 00 00 00 00 01 01 01 02 02 02 02 02 01 00 ff     ................
     ee2:	fe fd fc fd fd fd fe fe ff ff 00 00 00 01 01 02     ................
     ef2:	01 01 00 ff ff ff fe ff ff 00 01 02 03 03 04 04     ................
     f02:	03 01 ff fd fb fb fb fb fb fb fc fd ff 00 01 02     ................
     f12:	03 04 03 03 03 03 03 03 03 03 04 04 03 02 01 01     ................
     f22:	01 00 ff fe fc fc fc fd fd fd fd fc fb fc fd fe     ................
     f32:	ff 00 01 01 01 00 ff fe ff 00 00 ff 00 01 03 05     ................
     f42:	06 08 08 06 02 ff fe ff 00 00 ff fe 00 02 03 03     ................
     f52:	02 01 00 fe fd fc fb fb f9 f7 f8 fb fd fd fd fe     ................
     f62:	01 04 06 07 06 02 ff fc fe 01 04 03 ff f9 f8 fb     ................
     f72:	00 04 06 08 0a 0b 0c 0d 0f 0c 01 f4 ee f0 f6 fe     ................
     f82:	04 07 05 fe fd fb f8 f4 ee ee f1 f3 f7 fc 01 04     ................
     f92:	04 05 08 06 04 07 0b 0f 0f 0c 0d 0a 04 03 05 02     ................
     fa2:	ff ff fc fa fd ff 00 fa f6 ef ef f4 f4 ee e9 ee     ................
     fb2:	f7 02 0c 16 18 0c 06 0f 1a 1d 0f 00 fa f5 ed f1     ................
     fc2:	fd 05 04 fe 07 13 1b 1e 15 06 e8 cc cc d8 ea f6     ................
     fd2:	f9 ed df df e9 fa 08 0f 16 1d 24 24 25 30 31 17     ..........$$%01.
     fe2:	f9 f4 f3 f8 06 1b 2c 25 07 f0 ee ed db d3 dd ed     ......,%........
     ff2:	f8 f4 e9 df db d2 e1 f8 0a 10 12 14 19 13 12 1f     ................
    1002:	2b 21 06 f1 e2 ef 09 25 30 1f fb ea ef ec e9 f5     +!.....%0.......
    1012:	f5 e0 d6 e1 f6 0b 1c 34 4b 41 10 d9 e0 fb 06 f4     .......4KA......
    1022:	f4 ff 01 ee e1 f2 fc f2 f1 09 19 11 08 0d 11 fd     ................
    1032:	ea e0 e1 f0 f5 e8 d3 dd eb fe 0e 1c 23 33 4c 62     ............#3Lb
    1042:	5a 2d 07 df dd d2 d6 e9 f5 02 1b 36 28 f4 d6 dd     Z-.........6(...
    1052:	cd b5 ba ca e0 f6 10 26 1c ef c6 dd 04 1f 27 34     .......&......'4
    1062:	3d 3a 25 21 48 67 61 18 d3 bd b7 cd eb f9 e6 ea     =:%!Hga.........
    1072:	f0 f1 d6 cc bd b1 c4 d8 ef 02 0c 10 28 55 77 5f     ............(Uw_
    1082:	17 ee f2 fd f6 05 22 31 2b 0b 03 ff f4 0c 2b 23     ......"1+.....+#
    1092:	0f f1 d6 b8 af c6 e2 f7 f0 ce b0 c5 da eb f9 0d     ................
    10a2:	16 1c 34 54 64 47 0b fd 01 0e 0e f4 ed 06 1e 31     ..4TdG.........1
    10b2:	2e 31 29 ef ca b9 d9 f2 e7 c1 b6 d8 ff 03 db c9     .1).............
    10c2:	e7 02 10 19 2d 34 33 18 1f 40 54 40 04 e2 e9 ee     ....-43..@T@....
    10d2:	e8 d9 d8 f5 11 15 e6 bb ab c9 df f2 fe 14 29 30     ..............)0
    10e2:	15 f5 08 30 3a 1d ed fb fe f5 f9 10 21 30 20 04     ...0:.......!0 .
    10f2:	fb e4 e3 eb 18 2b 16 ce ac c5 e4 00 06 fe d5 d8     .....+..........
    1102:	e9 fa 04 0f 1d 29 48 5c 3e f7 c7 dc f7 0a 14 19     .....)H\>.......
    1112:	07 f4 03 f5 e6 06 2b 37 ef a4 b8 dd fd f7 db d4     ......+7........
    1122:	f7 0b 07 e1 e9 0b 1c 22 2b 3d 45 3e 27 3d 54 4b     ......."+=E>'=TK
    1132:	00 e7 d9 d4 cc b8 cf e9 03 07 db 9e a5 c5 dc e3     ................
    1142:	ef fd 0e 1c 29 19 00 00 29 41 42 13 0b 12 0c 19     ....)...)AB.....
    1152:	18 20 3d 4f 32 ee d6 e7 f0 f3 f2 eb c3 ca d6 ed     . =O2...........
    1162:	f1 f4 cd cf e0 ed f6 fb 03 13 2b 3c 2d fc f1 eb     ..........+<-...
    1172:	fa 02 06 1c 34 3c 14 e5 ea ff 23 37 43 12 d0 cf     ....4<....#7C...
    1182:	d3 d2 cf d6 e8 01 08 f7 da ee fd 0f 15 1f 2b 38     ..............+8
    1192:	2f 25 2b 2a f9 fb 04 08 ce c2 d7 f3 0d 14 ee b3     /%+*............
    11a2:	c4 d9 ec f0 fb 0d 1d 11 01 ee f1 fd 10 24 2f 39     .............$/9
    11b2:	21 04 00 f9 06 0a 1e 36 47 23 d2 d1 e5 ef f5 fb     !......6G#......
    11c2:	e4 dc eb f6 fe f7 db e3 f3 00 05 07 10 21 2f 16     .............!/.
    11d2:	e8 e4 f9 fe ee f2 00 0d 1c 25 1c f6 e3 ee 09 1a     .........%......
    11e2:	28 20 05 dd c6 cd d9 e4 f0 02 0e 13 fd f4 03 11     ( ..............
    11f2:	20 26 31 3d 48 3e 23 0f ea e9 fd 02 f5 e2 da ea      &1=H>#.........
    1202:	f8 e8 cb bd c5 d3 dc e7 f1 fe 00 f7 f1 f8 fe 02     ................
    1212:	0d 1c 27 33 3e 38 18 05 09 17 26 32 39 2e 0f df     ..'3>8....&29...
    1222:	cd e0 f2 f4 e5 e3 ed f3 f4 f5 e4 e0 ed f6 01 08     ................
    1232:	0d 0b 06 f2 e9 f3 fa fe fb f8 03 11 19 14 0c 0e     ................
    1242:	13 0b 0a 18 20 17 03 f8 e3 d5 dc e5 f0 f9 00 06     .... ...........
    1252:	04 f6 f4 00 0d 17 1e 26 29 23 12 08 00 f8 f9 f3     .......&)#......
    1262:	f6 fd ff f7 f2 eb e4 db de e6 ed f4 fb fc f5 f0     ................
    1272:	f0 f7 fe 01 05 0f 19 1f 22 26 29 1b 09 0e 1a 1e     ........"&).....
    1282:	14 0a 02 f6 ef eb ed f4 f0 ec f2 f8 fc ff f4 ec     ................
    1292:	f4 fb 01 08 0b 07 fc ef eb ef f3 f9 ff fe fe 05     ................
    12a2:	09 05 05 0b 10 16 18 10 0a 05 f7 f5 fc f8 ea e8     ................
    12b2:	f0 f6 fc 03 0a 07 00 04 0e 15 1c 21 24 21 1c 0e     ...........!$!..
    12c2:	f8 f5 f7 f2 f6 fa fe 02 f4 e0 e3 e3 db e0 e7 e7     ................
    12d2:	e5 e4 e4 ea f0 f6 fd 04 0a 0f 16 1f 27 2c 31 38     ............',18
    12e2:	2e 17 19 20 16 0f 0e 01 f4 f9 f7 f0 f3 f0 ee f2     ... ............
    12f2:	f8 f9 ef ea f0 f5 f7 f7 f7 ed e0 de e3 e7 ed f3     ................
    1302:	fc 02 ff 03 0d 0a 0b 14 19 1d 25 28 1e 10 05 f9     ..........%(....
    1312:	f9 01 04 f9 ee f5 fc fd 06 0c 03 02 0c 0f 0f 13     ................
    1322:	0f 0b 14 12 f9 f0 f3 ef f1 f9 fe f9 f2 f1 eb e1     ................
    1332:	dd e0 e3 e7 ea e8 e5 e7 ef f7 00 07 0e 15 18 1c     ................
    1342:	27 30 34 38 3d 33 17 04 fe fc 00 04 fe f5 fa 00     '048=3..........
    1352:	f5 ee f3 f7 fb 00 f6 f0 f8 f9 fa 03 00 eb e1 e2     ................
    1362:	e2 e7 f0 f6 f8 fb 00 00 ff 01 06 0b 0f 11 0e 08     ................
    1372:	08 0a fe f8 ff 01 03 07 05 ff 02 09 0b 10 11 0a     ................
    1382:	0c 13 18 1d 1d 16 11 13 0a f8 f4 f7 f4 f5 f4 ed     ................
    1392:	ec ed ec e7 dd d7 d3 d1 d5 db e3 ea ef f6 fd 03     ................
    13a2:	0a 10 16 1c 21 26 2b 2d 2e 2e 2b 1e 12 0f 09 05     ....!&+-..+.....
    13b2:	07 01 fd 00 01 fa f6 f6 f7 f9 f7 f2 f0 ee ea ea     ................
    13c2:	e9 e5 e7 ea ea ed f2 f5 f9 fd 01 02 01 03 07 09     ................
    13d2:	0c 10 14 13 10 10 0c 06 05 06 06 05 06 08 05 02     ................
    13e2:	03 05 04 01 fe fe fe ff 01 02 02 05 03 fb fa fc     ................
    13f2:	fc fc fb f9 fa f9 f9 f9 f8 f7 f6 f6 f5 f5 f5 f7     ................
    1402:	fa fc fe 00 02 04 07 08 0a 0c 0e 0e 0d 0c 08 07     ................
    1412:	07 04 02 03 03 02 00 00 03 03 01 ff fe 00 fe fc     ................
    1422:	fe ff ff fe f9 f7 f7 f8 f8 f9 f9 fa fc fd fe fe     ................
    1432:	fe fe ff ff ff ff 00 01 02 04 04 02 03 04 02 04     ................
    1442:	04 06 07 07 03 03 05 05 03 04 06 05 04 02 02 05     ................
    1452:	02 fd fd fd fe fc f9 fa fc fc fb f9 f6 f3 f8 f6     ................
    1462:	f5 f8 f8 f9 fb fd fe 00 02 04 05 06 07 08 0a 0d     ................
    1472:	0e 0e 0c 0a 08 06 05 01 02 04 02 fe 01 01 fd 00     ................
    1482:	04 01 fa f6 f6 f8 fa f5 f5 f6 f7 f8 f8 f8 fa fc     ................
    1492:	ff 01 01 fe 00 02 00 04 06 08 08 06 05 03 05 00     ................
    14a2:	02 08 08 01 01 04 06 09 0a 02 fc fe fc fa fa 00     ................
    14b2:	00 00 04 06 ff fb 01 00 fc fa fb fb fc fd fe 00     ................
    14c2:	fb fb ff ff fd f3 f7 fa fa fc fd fe 00 03 05 07     ................
    14d2:	08 05 04 04 07 01 02 09 0a 05 07 0a 01 01 06 01     ................
    14e2:	00 02 fb fe 04 0c 0c fd fd 05 fc f6 f8 f4 f6 f7     ................
    14f2:	f7 f7 f8 fa fb ff fb fd ff ff f9 f5 fc fd ff 01     ................
    1502:	04 04 06 00 ff 06 09 0c 08 03 06 07 09 0d 0c 03     ................
    1512:	09 0a fd 01 03 fc 03 03 02 fd fe 04 fb f6 fd fc     ................
    1522:	f7 f7 f3 f5 f7 f0 f3 f9 fc ff fc f6 fa fc fe ff     ................
    1532:	00 03 05 07 08 0a 0b 0d 0b 0b 06 0b 0b 05 06 06     ................
    1542:	09 04 01 04 fe 00 01 f8 fd 01 ff fd f9 f7 f5 f5     ................
    1552:	f9 f7 f7 f9 f9 fa fb fb fd fe fb ff 02 04 06 04     ................
    1562:	03 05 01 07 01 02 05 05 fe 02 04 06 07 09 04 ff     ................
    1572:	05 00 00 03 ff fe ff fc 00 ff 01 ff 01 fc 00 00     ................
    1582:	fe fc fc fd ff 00 ff fe 03 fd f8 00 f9 fe fe 00     ................
    1592:	fb fd ff fe ff 02 00 01 03 ff 01 03 01 00 04 04     ................
    15a2:	05 06 06 01 06 05 06 02 03 00 02 fe 03 03 05 ff     ................
    15b2:	05 ff fa fc f9 fa fa fb fb fc fc fc fe fd f8 fe     ................
    15c2:	fb fd fe ff fe fe 01 01 01 02 02 04 00 01 04 04     ................
    15d2:	06 05 08 08 03 06 07 04 07 03 02 ff ff 01 00 fd     ................
    15e2:	01 fd ff fd ff fc fa fa fa fb fa fb fc f9 fa fd     ................
    15f2:	fc fd fe ff 00 01 fd 02 01 01 03 04 04 05 06 06     ................
    1602:	03 03 05 03 04 05 05 04 03 05 03 05 02 fe fe fa     ................
    1612:	fe fe fe ff fc fc fe fc f9 fc fb fb fc fd fd ff     ................
    1622:	fe fc ff ff 01 02 02 04 03 ff 03 00 01 02 02 03     ................
    1632:	00 01 03 02 01 04 02 01 05 01 00 02 01 01 04 ff     ................
    1642:	fd 00 fc ff 00 00 fe ff ff 00 ff fd ff 00 ff 00     ................
    1652:	00 fc fd fb fc fd fe 00 ff 00 02 ff fd 01 fd ff     ................
    1662:	00 00 01 ff 00 01 01 02 04 03 04 06 03 03 05 04     ................
    1672:	05 06 01 ff 01 02 02 03 fe fe 00 fc ff fc fa fd     ................
    1682:	fc fc fd fc fa fb fa fb fb fe fe ff ff 00 ff 01     ................
    1692:	01 01 01 03 03 00 02 03 03 05 06 06 06 07 08 04     ................
    16a2:	02 05 03 02 02 fd fe 00 00 fd fb fc fd fb fd fc     ................
    16b2:	fa fc fc fc fc fe fb fa fd fc fd ff 00 00 01 02     ................
    16c2:	04 01 02 03 03 04 05 02 01 04 01 01 05 04 03 04     ................
    16d2:	05 02 01 03 02 00 03 fd fa ff ff fb fb fe fd fd     ................
    16e2:	fe fe fe fc fd fe fe ff fd fe ff ff ff 00 02 01     ................
    16f2:	01 03 00 00 02 01 01 02 03 fe ff 02 ff 00 02 02     ................
    1702:	02 03 03 03 03 01 01 02 02 ff fd 00 01 fc fe 00     ................
    1712:	ff ff 00 01 ff ff 01 fe ff 00 fb fd fe fd fe ff     ................
    1722:	00 ff 00 00 ff 02 00 fe 00 01 ff fe 01 00 01 01     ................
    1732:	02 02 03 03 04 04 03 03 04 03 04 01 00 01 00 fe     ................
    1742:	fe fe fd ff ff ff fe 01 fd fb fe fa fb fd fc fd     ................
    1752:	fe fe fe ff 00 00 01 01 00 01 01 02 01 00 02 02     ................
    1762:	02 03 03 04 04 05 05 03 04 05 01 02 01 ff 00 00     ................
    1772:	fc fe fc fc fd fd fd fe fe fc fd fd fd fe fc fc     ................
    1782:	fe fd fe ff 00 01 02 02 03 03 04 05 02 01 02 00     ................
    1792:	02 02 00 03 02 02 03 03 02 03 01 01 01 00 01 01     ................
    17a2:	fc ff fd fc fd fd fd fe fe fe ff ff ff 01 fd fd     ................
    17b2:	00 fe ff 00 00 01 01 ff 03 00 00 03 01 00 02 ff     ................
    17c2:	02 ff fd 00 ff ff 01 01 01 03 02 02 03 02 03 03     ................
    17d2:	ff 01 01 ff 01 ff fe 00 ff 00 00 00 00 02 fe fe     ................
    17e2:	00 fd fe fd fd fe fd fd ff fd fe 00 ff 00 00 00     ................
    17f2:	02 00 fe 00 00 00 01 01 02 03 03 04 04 04 05 04     ................
    1802:	03 04 03 03 02 00 00 00 fd fe fe fd fe ff fd fe     ................
    1812:	fe fd fe fc fb fd fc fd fe fe fe ff 00 00 00 01     ................
    1822:	01 01 01 02 02 02 01 02 02 02 03 03 03 03 03 03     ................
    1832:	03 02 03 02 01 01 ff ff fe fe fd fd fe fd fe fe     ................
    1842:	fe ff fe fe fe fe ff fe fe ff ff 00 00 00 01 01     ................
    1852:	01 02 02 02 02 01 02 01 00 01 01 00 01 01 01 01     ................
    1862:	01 01 01 01 00 00 00 00 ff fe ff ff ff ff ff ff     ................
    1872:	ff ff 00 00 00 00 ff 00 00 ff 00 00 00 00 00 00     ................
	...
    188a:	00 00 ff 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    189a:	01 01 01 00 00 00 00 00 00 00 00 00                 ............

000018a6 <strPaused>:
    18a6:	50 61 75 73 65 64 00                                Paused.

000018ad <strExit>:
    18ad:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

000018b6 <strTotal>:
    18b6:	54 6f 74 61 6c 3a 00                                Total:.

000018bd <strScore>:
    18bd:	53 63 6f 72 65 3a 00                                Score:.

000018c4 <strBanterClear>:
    18c4:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000018d3 <strB10>:
    18d3:	52 54 46 4d 21 00                                   RTFM!.

000018d9 <strB9>:
    18d9:	4e 65 65 64 20 68 65 6c 70 3f 00                    Need help?.

000018e4 <strB8>:
    18e4:	54 68 61 74 27 73 20 69 74 3f 00                    That's it?.

000018ef <strB7>:
    18ef:	41 20 74 75 72 6b 65 79 20 73 68 6f 6f 74 00        A turkey shoot.

000018fe <strB6>:
    18fe:	2a 59 41 57 4e 2a 00                                *YAWN*.

00001905 <strB5>:
    1905:	54 6f 6f 20 65 61 73 79 00                          Too easy.

0000190e <strB4>:
    190e:	41 74 20 6c 65 61 73 74 20 74 72 79 00              At least try.

0000191b <strB3>:
    191b:	42 72 6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00        Broken button?.

0000192a <strB2>:
    192a:	4c 4f 4c 00                                         LOL.

0000192e <strB1>:
    192e:	59 6f 75 20 73 75 63 6b 20 62 72 6f 00              You suck bro.

0000193b <strBy>:
    193b:	42 79 00                                            By.

0000193e <strOwns>:
    193e:	50 77 6e 73 00                                      Pwns.

00001943 <strChangeHandle>:
    1943:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00001952 <strCancelHandle>:
    1952:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

0000195d <strConfirmHandle>:
    195d:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

00001969 <strSelectHandle>:
    1969:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

00001974 <strPlayer2>:
    1974:	50 32 00                                            P2.

00001977 <strPlayer1>:
    1977:	50 31 00                                            P1.

0000197a <strVertSep>:
    197a:	7c 00                                               |.

0000197c <strUnderline>:
    197c:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00001988 <strHandlesTitle>:
    1988:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

00001994 <strHighscores>:
    1994:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

0000199e <str2Player>:
    199e:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000019af <str1Player>:
    19af:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000019bd <strCopyright>:
    19bd:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
    19cd:	42 72 6f 6f 6b 73 00                                Brooks.

000019d4 <level_data>:
    19d4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    19e4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    19f4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1a04:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 02 02     ................
    1a14:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a24:	00 00 00 00 00 04 02 02 01 01 01 01 02 03 00 00     ................
	...
    1a48:	04 02 01 01 01 01 03 00 00 00 00 00 00 00 00 00     ................
	...
    1a64:	00 00 00 04 01 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1a84:	00 00 01 01 01 01 00 00 00 00 02 00 00 00 00 00     ................
	...
    1a9c:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1aac:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1abc:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
    1ad8:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1ae8:	02 00 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
    1af8:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
    1b14:	00 00 00 02 00 00 00 00 01 01 01 01 00 58 58 00     .............XX.
    1b24:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b34:	00 02 00 63 63 00 01 01 01 01 00 58 58 00 02 00     ...cc......XX...
	...
    1b50:	00 00 00 02 00 63 63 00 01 01 01 01 00 00 00 00     .....cc.........
    1b60:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b70:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
    1b8c:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1b9c:	02 00 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
    1bac:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
    1bc8:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
    1bd8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1be8:	00 02 00 00 00 00 01 01 01 01 00 00 00 00 02 00     ................
	...
    1c04:	00 00 00 02 00 00 00 00 01 01 01 01 00 00 00 00     ................
	...
    1c28:	00 00 01 01 01 01 05 00 00 00 00 00 00 00 00 00     ................
	...
    1c44:	00 00 00 06 01 01 01 01 02 05 00 00 00 00 00 00     ................
	...
    1c64:	06 02 01 01 01 01 02 02 05 00 00 00 00 00 00 00     ................
	...
    1c80:	00 06 02 02 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1c90:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1ca0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1cb0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1cc0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00003720 <map_rocket_right_1>:
    3720:	01 01 26                                            ..&

00003723 <map_rocket_right_0>:
    3723:	01 01 25                                            ..%

00003726 <map_rocket_up_1>:
    3726:	01 01 24                                            ..$

00003729 <map_rocket_up_0>:
    3729:	01 01 23                                            ..#

0000372c <map_ball>:
    372c:	01 01 22                                            .."

0000372f <map_explosion_2>:
    372f:	02 02 0c 0d 0d 0c                                   ......

00003735 <map_explosion_1>:
    3735:	02 02 0a 0b 18 19                                   ......

0000373b <map_explosion_0>:
    373b:	02 02 08 09 16 17                                   ......

00003741 <map_tank2_right_1>:
    3741:	02 02 20 21 2e 2f                                   .. !./

00003747 <map_tank2_right_0>:
    3747:	02 02 1e 1f 2c 2d                                   ....,-

0000374d <map_tank2_up_1>:
    374d:	02 02 1c 1d 2a 2b                                   ....*+

00003753 <map_tank2_up_0>:
    3753:	02 02 1a 1b 28 29                                   ....()

00003759 <map_tank1_right_1>:
    3759:	02 02 06 07 14 15                                   ......

0000375f <map_tank1_right_0>:
    375f:	02 02 04 05 12 13                                   ......

00003765 <map_tank1_up_1>:
    3765:	02 02 02 03 10 11                                   ......

0000376b <map_tank1_up_0>:
    376b:	02 02 00 01 0e 0f                                   ......

00003771 <map_none>:
    3771:	01 01 27                                            ..'

00003774 <map_metal_bl>:
    3774:	01 01 0c                                            ...

00003777 <map_metal_tr>:
    3777:	01 01 0b                                            ...

0000377a <map_metal_br>:
    377a:	01 01 0a                                            ...

0000377d <map_metal_tl>:
    377d:	01 01 09                                            ...

00003780 <map_tile_exp_2>:
    3780:	01 01 08                                            ...

00003783 <map_tile_exp_1>:
    3783:	01 01 07                                            ...

00003786 <map_tile_exp_0>:
    3786:	01 01 06                                            ...

00003789 <map_rocket_itm>:
    3789:	01 01 04                                            ...

0000378c <map_explode_itm>:
    378c:	01 01 03                                            ...

0000378f <map_speed_itm>:
    378f:	01 01 02                                            ...

00003792 <map_metal>:
    3792:	01 01 05                                            ...

00003795 <map_brick>:
    3795:	01 01 01                                            ...

00003798 <map_pause>:
    3798:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    37a8:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    37b8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    37c8:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000037d6 <map_splash>:
    37d6:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    37e6:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    37f6:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    3806:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    3816:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    3826:	2a 00 00 2c 2d 2e                                   *..,-.

0000382c <sprites_data>:
    382c:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    383c:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    384c:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    385c:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    386c:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    387c:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    388c:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    389c:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    38ac:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    38bc:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    38cc:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    38dc:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    38ec:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    38fc:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    390c:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    391c:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    392c:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    393c:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    394c:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    395c:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    396c:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    397c:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    398c:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    399c:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    39ac:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    39bc:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    39cc:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    39dc:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    39ec:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    39fc:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    3a0c:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3a1c:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3a2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a3c:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3a4c:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3a5c:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a7c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a8c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a9c:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3aac:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3abc:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3acc:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3adc:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3aec:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3afc:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3b0c:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3b1c:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3b2c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b3c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b4c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b5c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b6c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b7c:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3b8c:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3b9c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bac:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3bbc:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3bcc:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3bdc:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3bec:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3bfc:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3c0c:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3c1c:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3c2c:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3c3c:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3c4c:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3c5c:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3c6c:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3c7c:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3c8c:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3c9c:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3cac:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3cbc:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3ccc:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3cdc:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3cec:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3cfc:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3d0c:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3d1c:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3d2c:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3d3c:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3d4c:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3d5c:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3d6c:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3d7c:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3d8c:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3d9c:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3dac:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3dbc:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3dcc:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3ddc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3dec:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3dfc:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3e0c:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3e1c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e2c:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3e3c:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3e4c:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e5c:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e6c:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3e7c:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3e8c:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3e9c:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3eac:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3ebc:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3ecc:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3edc:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3eec:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3efc:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3f0c:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3f1c:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3f2c:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3f3c:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3f4c:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3f5c:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3f6c:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3f7c:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3f8c:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3f9c:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3fac:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3fbc:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3fcc:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3fdc:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3fec:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3ffc:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    400c:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    401c:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    402c:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    403c:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    404c:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    405c:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    406c:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    407c:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    408c:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    409c:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    40ac:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40bc:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    40cc:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    40dc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40ec:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40fc:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    410c:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    411c:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    412c:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    413c:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    414c:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    415c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    416c:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    417c:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    418c:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    419c:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41ac:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    41bc:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    41cc:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    41dc:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41ec:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41fc:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    420c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    421c:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    422c:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    423c:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    424c:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    425c:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    426c:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    427c:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    428c:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    429c:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    42ac:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    42bc:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    42cc:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    42dc:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    42ec:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    42fc:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    430c:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    431c:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    432c:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    433c:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    434c:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    435c:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    436c:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    437c:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    438c:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    439c:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    43ac:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    43bc:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    43cc:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    43dc:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    43ec:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    43fc:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    440c:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    441c:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

0000442c <tiles_data>:
	...
    446c:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    447c:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    448c:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    449c:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    44ac:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    44bc:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    44cc:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    44dc:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44ec:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    44fc:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    450c:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    451c:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    452c:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    453c:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    454c:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    455c:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    456c:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    457c:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    458c:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    459c:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    45b4:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    45c4:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    45d4:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    45ec:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    45fc:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    460c:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    461c:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4634:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4654:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    466c:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    467c:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    468c:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    469c:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    46ac:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    46bc:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    46cc:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    46dc:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    46ec:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    46fc:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    470c:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    471c:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    472c:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    473c:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    474c:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    475c:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    476c:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    477c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    478c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    479c:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    47ac:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    47bc:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    47cc:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    47dc:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    47ec:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    47fc:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    480c:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    481c:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    482c:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    483c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    484c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    485c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    486c:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    487c:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    488c:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    489c:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    48ac:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    48bc:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    48cc:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    48dc:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    48ec:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    48fc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    490c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    491c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    494c:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    495c:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    498c:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    499c:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    49ac:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    49bc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49cc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49dc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49ec:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    49fc:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a0c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a1c:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4a2c:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4a3c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a4c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a5c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a6c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a7c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a8c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4a9c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4aac:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4abc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4acc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4adc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4aec:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4afc:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b0c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b1c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b2c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b3c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4b4c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4b5c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4b6c:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4b7c:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4bac:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4bbc:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4bcc:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4bdc:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4bec:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4bfc:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c0c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c1c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c2c:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4c3c:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c4c:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c5c:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4c6c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c7c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c8c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4c9c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4cd4:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4ce4:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4cf4:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d04:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d14:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d24:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4d34:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d44:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d54:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4d64:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4d74:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d84:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d94:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4da4:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4db4:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4dc4:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4dd4:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4de4:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4df4:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4e04:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4e14:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e24:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4e34:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4e44:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4e6c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e7c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e8c:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4e9c:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4eac:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ebc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4ecc:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4edc:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4eec:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4efc:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4f0c:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4f1c:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4f2c:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4f3c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4f4c:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4f5c:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4f74:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4f84:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4f94:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4fa4:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4fb4:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4fc4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4fd4:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4fe4:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    5034:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5044:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    505c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5074:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5084:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    50b4:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    50c4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    50d4:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    50ec:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    50fc:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    510c:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    511c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5134:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5144:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5154:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    516c:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    517c:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    518c:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    519c:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    51b4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    51c4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    51f8:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5208:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5218:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5234:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5244:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5254:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5274:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    5284:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    5294:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    52b4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    52c4:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    52d4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5314:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5324:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5344:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5394:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    53b8:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    53c8:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    53d8:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    53f4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5404:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5414:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5434:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    5444:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5454:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5474:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5484:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5494:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    54b4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    54c4:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    54d4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    54f8:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5508:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    5518:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    5534:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5544:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5554:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5574:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5584:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5594:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    55b4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    55c4:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    55d4:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    55f4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5604:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5614:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5634:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5644:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5654:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    567c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5694:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    56bc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    56d4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    56e4:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    56f4:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5704:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5714:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    573c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5754:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    576c:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    577c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    578c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    579c:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    57b4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57c4:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    57dc:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    57f4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5804:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5814:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    5834:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5844:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5854:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5874:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5884:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5894:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    58b4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    58c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    58d4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    58f4:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5904:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5914:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5934:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5944:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5954:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5974:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5984:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5994:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    59b4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    59c4:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    59d4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    59f4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5a04:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5a14:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5a34:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5a44:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a54:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5a78:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a88:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5a98:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5ab4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5ac4:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5ad4:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5af4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b04:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b14:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5b34:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5b44:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5b54:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5b74:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5b84:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5b94:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5bb4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bc4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5bd4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5bf4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c04:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c14:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5c34:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c44:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c54:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5c74:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c84:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5c94:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5cb4:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5cc4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5cd4:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5cf4:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5d04:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5d14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5d34:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d44:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d54:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5d74:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d84:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d94:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5db4:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5dc4:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5dd4:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5df4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e04:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5e14:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5e34:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e44:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5e54:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5e74:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5e84:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5e94:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5eb4:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5ec4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5ed4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5ef4:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5f04:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f14:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5f34:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f44:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f54:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5f78:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5f88:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5fdc:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5ff4:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6004:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6014:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    603c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    604c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    605c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6074:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6084:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6094:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    60bc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    60cc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    60dc:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    60f8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6108:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6118:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    613c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    614c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    615c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6178:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6188:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6198:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    61bc:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    61cc:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    61dc:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    61f4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6204:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6214:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6234:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    6244:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6254:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6278:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    6288:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6298:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    62a8:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    62b8:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    62c8:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    62d8:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    62f4:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6304:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6314:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    633c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    634c:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    635c:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    637c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    638c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    639c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    63bc:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63cc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63dc:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    63fc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    640c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    641c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    643c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    644c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    645c:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    647c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    648c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    649c:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    64bc:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    64cc:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    64dc:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    64f4:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    6504:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6514:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    653c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    654c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    655c:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    657c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    658c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    659c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    65bc:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    65cc:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    65dc:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    65fc:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    660c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    661c:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    663c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    664c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    665c:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    667c:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    668c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    669c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    66b4:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    66c4:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    66d4:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    66ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66fc:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    670c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    671c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6734:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    6744:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    6754:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6770:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6780:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6790:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    67a0:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    67b0:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    67c0:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    67d0:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

000067ec <__ctors_end>:
    67ec:	11 24       	eor	r1, r1
    67ee:	1f be       	out	0x3f, r1	; 63
    67f0:	cf ef       	ldi	r28, 0xFF	; 255
    67f2:	d0 e1       	ldi	r29, 0x10	; 16
    67f4:	de bf       	out	0x3e, r29	; 62
    67f6:	cd bf       	out	0x3d, r28	; 61

000067f8 <__do_copy_data>:
    67f8:	11 e0       	ldi	r17, 0x01	; 1
    67fa:	a0 e0       	ldi	r26, 0x00	; 0
    67fc:	b1 e0       	ldi	r27, 0x01	; 1
    67fe:	e6 e5       	ldi	r30, 0x56	; 86
    6800:	fa e9       	ldi	r31, 0x9A	; 154
    6802:	02 c0       	rjmp	.+4      	; 0x6808 <__do_copy_data+0x10>
    6804:	05 90       	lpm	r0, Z+
    6806:	0d 92       	st	X+, r0
    6808:	a4 3c       	cpi	r26, 0xC4	; 196
    680a:	b1 07       	cpc	r27, r17
    680c:	d9 f7       	brne	.-10     	; 0x6804 <__do_copy_data+0xc>

0000680e <__do_clear_bss>:
    680e:	1e e0       	ldi	r17, 0x0E	; 14
    6810:	a0 ee       	ldi	r26, 0xE0	; 224
    6812:	b1 e0       	ldi	r27, 0x01	; 1
    6814:	01 c0       	rjmp	.+2      	; 0x6818 <.do_clear_bss_start>

00006816 <.do_clear_bss_loop>:
    6816:	1d 92       	st	X+, r1

00006818 <.do_clear_bss_start>:
    6818:	a0 3b       	cpi	r26, 0xB0	; 176
    681a:	b1 07       	cpc	r27, r17
    681c:	e1 f7       	brne	.-8      	; 0x6816 <.do_clear_bss_loop>

0000681e <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    681e:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6820:	88 e1       	ldi	r24, 0x18	; 24
    6822:	0f b6       	in	r0, 0x3f	; 63
    6824:	f8 94       	cli
    6826:	80 93 60 00 	sts	0x0060, r24
    682a:	10 92 60 00 	sts	0x0060, r1
    682e:	0f be       	out	0x3f, r0	; 63

00006830 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6830:	0e 94 14 39 	call	0x7228	; 0x7228 <isEepromFormatted>
    6834:	81 11       	cpse	r24, r1
    6836:	02 c0       	rjmp	.+4      	; 0x683c <Initialize+0xc>
    6838:	0e 94 f2 38 	call	0x71e4	; 0x71e4 <FormatEeprom>

	cli();
    683c:	f8 94       	cli
    683e:	e1 e0       	ldi	r30, 0x01	; 1
    6840:	f9 e0       	ldi	r31, 0x09	; 9
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
			mix_buf[j]=0x80;//(i<128?i:128);
    6842:	80 e8       	ldi	r24, 0x80	; 128
    6844:	81 93       	st	Z+, r24

	#if SOUND_MIXER == MIXER_TYPE_VSYNC
	
		//Initialize the mixer buffer
		//ramp up to avoid initial click
		for(int j=0;j<MIX_BANK_SIZE*2;j++){
    6846:	2b e0       	ldi	r18, 0x0B	; 11
    6848:	ed 30       	cpi	r30, 0x0D	; 13
    684a:	f2 07       	cpc	r31, r18
    684c:	d9 f7       	brne	.-10     	; 0x6844 <Initialize+0x14>
			mix_buf[j]=0x80;//(i<128?i:128);
		}	
	
		mix_pos=mix_buf;
    684e:	81 e0       	ldi	r24, 0x01	; 1
    6850:	99 e0       	ldi	r25, 0x09	; 9
    6852:	90 93 0e 0b 	sts	0x0B0E, r25
    6856:	80 93 0d 0b 	sts	0x0B0D, r24
		mix_bank=0;
    685a:	10 92 0f 0b 	sts	0x0B0F, r1
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    685e:	10 92 12 0b 	sts	0x0B12, r1
    6862:	10 92 18 0b 	sts	0x0B18, r1
    6866:	10 92 1e 0b 	sts	0x0B1E, r1
    686a:	10 92 24 0b 	sts	0x0B24, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    686e:	10 92 d2 08 	sts	0x08D2, r1
	sync_flags=0;
    6872:	10 92 d4 08 	sts	0x08D4, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6876:	82 e1       	ldi	r24, 0x12	; 18
    6878:	80 93 d3 08 	sts	0x08D3, r24

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    687c:	80 ee       	ldi	r24, 0xE0	; 224
    687e:	80 93 dc 08 	sts	0x08DC, r24
	render_lines_count=FRAME_LINES;
    6882:	80 93 da 08 	sts	0x08DA, r24
	first_render_line_tmp=FIRST_RENDER_LINE;
    6886:	84 e1       	ldi	r24, 0x14	; 20
    6888:	80 93 db 08 	sts	0x08DB, r24
	first_render_line=FIRST_RENDER_LINE;
    688c:	80 93 d9 08 	sts	0x08D9, r24

	joypad1_status_hi=0;
    6890:	10 92 e0 08 	sts	0x08E0, r1
    6894:	10 92 df 08 	sts	0x08DF, r1
	joypad2_status_hi=0;
    6898:	10 92 e4 08 	sts	0x08E4, r1
    689c:	10 92 e3 08 	sts	0x08E3, r1
	sound_enabled=1;
    68a0:	81 e0       	ldi	r24, 0x01	; 1
    68a2:	80 93 11 0b 	sts	0x0B11, r24

	InitializeVideoMode();
    68a6:	0e 94 4a 45 	call	0x8a94	; 0x8a94 <InitializeVideoMode>
    68aa:	82 e8       	ldi	r24, 0x82	; 130
    68ac:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    68ae:	fc 01       	movw	r30, r24
    68b0:	25 91       	lpm	r18, Z+
    68b2:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    68b4:	f9 01       	movw	r30, r18
    68b6:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    68b8:	30 83       	st	Z, r19
    68ba:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    68bc:	20 e0       	ldi	r18, 0x00	; 0
    68be:	80 3b       	cpi	r24, 0xB0	; 176
    68c0:	92 07       	cpc	r25, r18
    68c2:	a9 f7       	brne	.-22     	; 0x68ae <Initialize+0x7e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    68c4:	78 94       	sei
	
	DisplayLogo();
    68c6:	0e 94 09 46 	call	0x8c12	; 0x8c12 <DisplayLogo>
    68ca:	0e 94 a9 4c 	call	0x9952	; 0x9952 <main>
    68ce:	0c 94 29 4d 	jmp	0x9a52	; 0x9a52 <_exit>

000068d2 <__bad_interrupt>:
    68d2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000068d6 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    68d6:	0c e0       	ldi	r16, 0x0C	; 12
    68d8:	0a 95       	dec	r16
    68da:	f1 f7       	brne	.-4      	; 0x68d8 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    68dc:	ec e9       	ldi	r30, 0x9C	; 156
		ldi ZH,hi8(ram_tiles_restore);
    68de:	f8 e0       	ldi	r31, 0x08	; 8

		ldi YL,lo8(vram)
    68e0:	c0 ee       	ldi	r28, 0xE0	; 224
		ldi YH,hi8(vram)
    68e2:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    68e4:	20 91 af 0b 	lds	r18, 0x0BAF


		clr r16
    68e8:	00 27       	eor	r16, r16

000068ea <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    68ea:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    68ec:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    68ee:	ac 0f       	add	r26, r28
		adc XH,YH
    68f0:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    68f2:	1c 91       	ld	r17, X
		std Z+2,r17
    68f4:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    68f6:	02 17       	cp	r16, r18
		brsh noov
    68f8:	08 f4       	brcc	.+2      	; 0x68fc <noov>
		mov r17,r16
    68fa:	10 2f       	mov	r17, r16

000068fc <noov>:
	noov:
		st X,r17
    68fc:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    68fe:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6900:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6902:	0d 30       	cpi	r16, 0x0D	; 13
		brlo upd_loop ;23
    6904:	90 f3       	brcs	.-28     	; 0x68ea <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6906:	00 e3       	ldi	r16, 0x30	; 48

00006908 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    6908:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    690a:	1a 95       	dec	r17
		brne .-4
    690c:	f1 f7       	brne	.-4      	; 0x690a <wait_loop+0x2>

		dec r16
    690e:	0a 95       	dec	r16
		brne wait_loop
    6910:	d9 f7       	brne	.-10     	; 0x6908 <wait_loop>

		lds r2,overlay_tile_table
    6912:	20 90 cf 08 	lds	r2, 0x08CF
		lds r3,overlay_tile_table+1
    6916:	30 90 d0 08 	lds	r3, 0x08D0
		lds r16,tile_table_lo 
    691a:	00 91 cb 08 	lds	r16, 0x08CB
		lds r17,tile_table_hi
    691e:	10 91 cc 08 	lds	r17, 0x08CC
		movw r12,r16
    6922:	68 01       	movw	r12, r16
		movw r6,r16
    6924:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6926:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6928:	c0 ee       	ldi	r28, 0xE0	; 224
		ldi YH,hi8(vram)
    692a:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    692c:	4e 01       	movw	r8, r28
		clr r0
    692e:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6930:	30 91 ce 08 	lds	r19, 0x08CE
		cpi r19,0
    6934:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6936:	09 f0       	breq	.+2      	; 0x693a <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    6938:	c8 e2       	ldi	r28, 0x28	; 40
		
		breq .+2
    693a:	09 f0       	breq	.+2      	; 0x693e <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    693c:	d5 e0       	ldi	r29, 0x05	; 5
		
		breq .+2
    693e:	09 f0       	breq	.+2      	; 0x6942 <wait_loop+0x3a>
		mov r24,r19
    6940:	83 2f       	mov	r24, r19

		breq .+2
    6942:	09 f0       	breq	.+2      	; 0x6946 <wait_loop+0x3e>
		movw r12,r2
    6944:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6946:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6948:	a0 2e       	mov	r10, r16
		clr r22
    694a:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    694c:	78 e0       	ldi	r23, 0x08	; 8

0000694e <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    694e:	7e d2       	rcall	.+1276   	; 0x6e4c <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6950:	36 e2       	ldi	r19, 0x26	; 38
    6952:	3a 95       	dec	r19
    6954:	f1 f7       	brne	.-4      	; 0x6952 <next_tile_line+0x4>
    6956:	00 00       	nop

		;***draw line***
		call render_tile_line
    6958:	0e 94 dd 34 	call	0x69ba	; 0x69ba <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    695c:	3f e0       	ldi	r19, 0x0F	; 15
    695e:	3a 95       	dec	r19
    6960:	f1 f7       	brne	.-4      	; 0x695e <next_tile_line+0x10>
    6962:	00 00       	nop
    6964:	00 00       	nop

		dec r10
    6966:	aa 94       	dec	r10
		breq frame_end
    6968:	a9 f0       	breq	.+42     	; 0x6994 <frame_end>
	
		inc r22
    696a:	63 95       	inc	r22
		lpm ;3 nop
    696c:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    696e:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6970:	31 f0       	breq	.+12     	; 0x697e <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6972:	33 e0       	ldi	r19, 0x03	; 3
    6974:	3a 95       	dec	r19
    6976:	f1 f7       	brne	.-4      	; 0x6974 <next_tile_line+0x26>
    6978:	00 00       	nop
    697a:	00 00       	nop
		
		rjmp next_tile_line	
    697c:	e8 cf       	rjmp	.-48     	; 0x694e <next_tile_line>

0000697e <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    697e:	66 27       	eor	r22, r22

		clr r0
    6980:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6982:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6984:	c3 0f       	add	r28, r19
		adc YH,r0
    6986:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6988:	8a 95       	dec	r24
		brne .+2
    698a:	09 f4       	brne	.+2      	; 0x698e <next_tile_row+0x10>
		movw YL,r8	;main vram
    698c:	e4 01       	movw	r28, r8
		brne .+2
    698e:	09 f4       	brne	.+2      	; 0x6992 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6990:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6992:	dd cf       	rjmp	.-70     	; 0x694e <next_tile_line>

00006994 <frame_end>:

	frame_end:

		WAIT r19,18
    6994:	36 e0       	ldi	r19, 0x06	; 6
    6996:	3a 95       	dec	r19
    6998:	f1 f7       	brne	.-4      	; 0x6996 <frame_end+0x2>

		rcall hsync_pulse ;145
    699a:	58 d2       	rcall	.+1200   	; 0x6e4c <hsync_pulse>
	
		clr r1
    699c:	11 24       	eor	r1, r1
		call RestoreBackground
    699e:	0e 94 00 44 	call	0x8800	; 0x8800 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    69a2:	e0 91 d4 08 	lds	r30, 0x08D4
		ldi r20,SYNC_FLAG_FIELD
    69a6:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    69a8:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    69aa:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    69ac:	e0 93 d4 08 	sts	0x08D4, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    69b0:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    69b2:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    69b6:	11 24       	eor	r1, r1


		ret
    69b8:	08 95       	ret

000069ba <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    69ba:	de 01       	movw	r26, r28

		mul r22,r23
    69bc:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    69be:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    69c0:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    69c2:	13 40       	sbci	r17, 0x03	; 3

		add r16,r0
    69c4:	00 0d       	add	r16, r0
		adc r17,r1
    69c6:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    69c8:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    69ca:	0c e5       	ldi	r16, 0x5C	; 92
		ldi r17,hi8(ram_tiles)
    69cc:	15 e0       	ldi	r17, 0x05	; 5
		add r16,r0
    69ce:	00 0d       	add	r16, r0
		adc r17,r1
    69d0:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    69d2:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    69d4:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    69d6:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    69d8:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    69da:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    69dc:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    69de:	2d 30       	cpi	r18, 0x0D	; 13
		brcc .+2
    69e0:	08 f4       	brcc	.+2      	; 0x69e4 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    69e2:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    69e4:	04 0e       	add	r0, r20
	    adc r1,r21
    69e6:	15 1e       	adc	r1, r21

		movw ZL,r0
    69e8:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    69ea:	2d 30       	cpi	r18, 0x0D	; 13
		brcs ramloop
    69ec:	f0 f0       	brcs	.+60     	; 0x6a2a <ramloop>

000069ee <romloop>:
	

	romloop:
	    lpm r16,Z+
    69ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    69f0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    69f2:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    69f4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    69f6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    69f8:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    69fa:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    69fc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    69fe:	2d 30       	cpi	r18, 0x0D	; 13
		nop
    6a00:	00 00       	nop

	    lpm r16,Z+
    6a02:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6a04:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6a06:	08 f4       	brcc	.+2      	; 0x6a0a <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6a08:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6a0a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6a0c:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6a0e:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6a10:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6a12:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6a14:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6a16:	2d 30       	cpi	r18, 0x0D	; 13
		dec r17			;decrement tiles to draw on line
    6a18:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6a1a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6a1c:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6a1e:	05 91       	lpm	r16, Z+

		breq end	
    6a20:	31 f1       	breq	.+76     	; 0x6a6e <end>
	    movw ZL,r0   	;copy next tile adress
    6a22:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6a24:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6a26:	18 f7       	brcc	.-58     	; 0x69ee <romloop>
	
		rjmp .
    6a28:	00 c0       	rjmp	.+0      	; 0x6a2a <ramloop>

00006a2a <ramloop>:

	ramloop:

	    ld r16,Z+
    6a2a:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6a2c:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6a2e:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6a30:	01 91       	ld	r16, Z+
		nop   
    6a32:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6a34:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6a36:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6a38:	01 91       	ld	r16, Z+
		nop
    6a3a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6a3c:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6a3e:	2d 30       	cpi	r18, 0x0D	; 13
   		rjmp .
    6a40:	00 c0       	rjmp	.+0      	; 0x6a42 <ramloop+0x18>

	    ld r16,Z+
    6a42:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6a44:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6a46:	08 f0       	brcs	.+2      	; 0x6a4a <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6a48:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6a4a:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6a4c:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6a4e:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6a50:	15 1e       	adc	r1, r21
		rjmp .
    6a52:	00 c0       	rjmp	.+0      	; 0x6a54 <ramloop+0x2a>
    
		ld r16,Z+		
    6a54:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6a56:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6a58:	2d 30       	cpi	r18, 0x0D	; 13
		rjmp .  
    6a5a:	00 c0       	rjmp	.+0      	; 0x6a5c <ramloop+0x32>

	    ld r16,Z+	
    6a5c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6a5e:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6a60:	01 91       	ld	r16, Z+

	    dec r17
    6a62:	1a 95       	dec	r17
	    breq end
    6a64:	21 f0       	breq	.+8      	; 0x6a6e <end>
	
		movw ZL,r0
    6a66:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6a68:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6a6a:	08 f6       	brcc	.-126    	; 0x69ee <romloop>
		rjmp ramloop
    6a6c:	de cf       	rjmp	.-68     	; 0x6a2a <ramloop>

00006a6e <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6a6e:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6a70:	00 27       	eor	r16, r16
		lpm	
    6a72:	c8 95       	lpm
		nop
    6a74:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6a76:	08 b9       	out	0x08, r16	; 8

		ret
    6a78:	08 95       	ret

00006a7a <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6a7a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6a7c:	e0 91 cb 08 	lds	r30, 0x08CB
	lds ZH,tile_table_hi
    6a80:	f0 91 cc 08 	lds	r31, 0x08CC
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6a84:	8d 50       	subi	r24, 0x0D	; 13
	mul r24,r18
    6a86:	82 9f       	mul	r24, r18
	add ZL,r0
    6a88:	e0 0d       	add	r30, r0
	adc ZH,r1
    6a8a:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6a8c:	ac e5       	ldi	r26, 0x5C	; 92
	ldi XH,hi8(ram_tiles)
    6a8e:	b5 e0       	ldi	r27, 0x05	; 5
	mul r22,r18
    6a90:	62 9f       	mul	r22, r18
	add XL,r0
    6a92:	a0 0d       	add	r26, r0
	adc XH,r1
    6a94:	b1 1d       	adc	r27, r1

	clr r0
    6a96:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6a98:	05 90       	lpm	r0, Z+
    6a9a:	0d 92       	st	X+, r0
    6a9c:	05 90       	lpm	r0, Z+
    6a9e:	0d 92       	st	X+, r0
    6aa0:	05 90       	lpm	r0, Z+
    6aa2:	0d 92       	st	X+, r0
    6aa4:	05 90       	lpm	r0, Z+
    6aa6:	0d 92       	st	X+, r0
    6aa8:	05 90       	lpm	r0, Z+
    6aaa:	0d 92       	st	X+, r0
    6aac:	05 90       	lpm	r0, Z+
    6aae:	0d 92       	st	X+, r0
    6ab0:	05 90       	lpm	r0, Z+
    6ab2:	0d 92       	st	X+, r0
    6ab4:	05 90       	lpm	r0, Z+
    6ab6:	0d 92       	st	X+, r0
    6ab8:	05 90       	lpm	r0, Z+
    6aba:	0d 92       	st	X+, r0
    6abc:	05 90       	lpm	r0, Z+
    6abe:	0d 92       	st	X+, r0
    6ac0:	05 90       	lpm	r0, Z+
    6ac2:	0d 92       	st	X+, r0
    6ac4:	05 90       	lpm	r0, Z+
    6ac6:	0d 92       	st	X+, r0
    6ac8:	05 90       	lpm	r0, Z+
    6aca:	0d 92       	st	X+, r0
    6acc:	05 90       	lpm	r0, Z+
    6ace:	0d 92       	st	X+, r0
    6ad0:	05 90       	lpm	r0, Z+
    6ad2:	0d 92       	st	X+, r0
    6ad4:	05 90       	lpm	r0, Z+
    6ad6:	0d 92       	st	X+, r0
    6ad8:	05 90       	lpm	r0, Z+
    6ada:	0d 92       	st	X+, r0
    6adc:	05 90       	lpm	r0, Z+
    6ade:	0d 92       	st	X+, r0
    6ae0:	05 90       	lpm	r0, Z+
    6ae2:	0d 92       	st	X+, r0
    6ae4:	05 90       	lpm	r0, Z+
    6ae6:	0d 92       	st	X+, r0
    6ae8:	05 90       	lpm	r0, Z+
    6aea:	0d 92       	st	X+, r0
    6aec:	05 90       	lpm	r0, Z+
    6aee:	0d 92       	st	X+, r0
    6af0:	05 90       	lpm	r0, Z+
    6af2:	0d 92       	st	X+, r0
    6af4:	05 90       	lpm	r0, Z+
    6af6:	0d 92       	st	X+, r0
    6af8:	05 90       	lpm	r0, Z+
    6afa:	0d 92       	st	X+, r0
    6afc:	05 90       	lpm	r0, Z+
    6afe:	0d 92       	st	X+, r0
    6b00:	05 90       	lpm	r0, Z+
    6b02:	0d 92       	st	X+, r0
    6b04:	05 90       	lpm	r0, Z+
    6b06:	0d 92       	st	X+, r0
    6b08:	05 90       	lpm	r0, Z+
    6b0a:	0d 92       	st	X+, r0
    6b0c:	05 90       	lpm	r0, Z+
    6b0e:	0d 92       	st	X+, r0
    6b10:	05 90       	lpm	r0, Z+
    6b12:	0d 92       	st	X+, r0
    6b14:	05 90       	lpm	r0, Z+
    6b16:	0d 92       	st	X+, r0
    6b18:	05 90       	lpm	r0, Z+
    6b1a:	0d 92       	st	X+, r0
    6b1c:	05 90       	lpm	r0, Z+
    6b1e:	0d 92       	st	X+, r0
    6b20:	05 90       	lpm	r0, Z+
    6b22:	0d 92       	st	X+, r0
    6b24:	05 90       	lpm	r0, Z+
    6b26:	0d 92       	st	X+, r0
    6b28:	05 90       	lpm	r0, Z+
    6b2a:	0d 92       	st	X+, r0
    6b2c:	05 90       	lpm	r0, Z+
    6b2e:	0d 92       	st	X+, r0
    6b30:	05 90       	lpm	r0, Z+
    6b32:	0d 92       	st	X+, r0
    6b34:	05 90       	lpm	r0, Z+
    6b36:	0d 92       	st	X+, r0
    6b38:	05 90       	lpm	r0, Z+
    6b3a:	0d 92       	st	X+, r0
    6b3c:	05 90       	lpm	r0, Z+
    6b3e:	0d 92       	st	X+, r0
    6b40:	05 90       	lpm	r0, Z+
    6b42:	0d 92       	st	X+, r0
    6b44:	05 90       	lpm	r0, Z+
    6b46:	0d 92       	st	X+, r0
    6b48:	05 90       	lpm	r0, Z+
    6b4a:	0d 92       	st	X+, r0
    6b4c:	05 90       	lpm	r0, Z+
    6b4e:	0d 92       	st	X+, r0
    6b50:	05 90       	lpm	r0, Z+
    6b52:	0d 92       	st	X+, r0
    6b54:	05 90       	lpm	r0, Z+
    6b56:	0d 92       	st	X+, r0
    6b58:	05 90       	lpm	r0, Z+
    6b5a:	0d 92       	st	X+, r0
    6b5c:	05 90       	lpm	r0, Z+
    6b5e:	0d 92       	st	X+, r0
    6b60:	05 90       	lpm	r0, Z+
    6b62:	0d 92       	st	X+, r0
    6b64:	05 90       	lpm	r0, Z+
    6b66:	0d 92       	st	X+, r0
    6b68:	05 90       	lpm	r0, Z+
    6b6a:	0d 92       	st	X+, r0
    6b6c:	05 90       	lpm	r0, Z+
    6b6e:	0d 92       	st	X+, r0
    6b70:	05 90       	lpm	r0, Z+
    6b72:	0d 92       	st	X+, r0
    6b74:	05 90       	lpm	r0, Z+
    6b76:	0d 92       	st	X+, r0
    6b78:	05 90       	lpm	r0, Z+
    6b7a:	0d 92       	st	X+, r0
    6b7c:	05 90       	lpm	r0, Z+
    6b7e:	0d 92       	st	X+, r0
    6b80:	05 90       	lpm	r0, Z+
    6b82:	0d 92       	st	X+, r0
    6b84:	05 90       	lpm	r0, Z+
    6b86:	0d 92       	st	X+, r0
    6b88:	05 90       	lpm	r0, Z+
    6b8a:	0d 92       	st	X+, r0
    6b8c:	05 90       	lpm	r0, Z+
    6b8e:	0d 92       	st	X+, r0
    6b90:	05 90       	lpm	r0, Z+
    6b92:	0d 92       	st	X+, r0
    6b94:	05 90       	lpm	r0, Z+
    6b96:	0d 92       	st	X+, r0


	clr r1
    6b98:	11 24       	eor	r1, r1
	ret
    6b9a:	08 95       	ret

00006b9c <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6b9c:	0f 93       	push	r16
	push r17
    6b9e:	1f 93       	push	r17
	push YL
    6ba0:	cf 93       	push	r28
	push YH
    6ba2:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6ba4:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6ba6:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6ba8:	e8 e2       	ldi	r30, 0x28	; 40
	ldi ZH,hi8(sprites)	
    6baa:	f5 e0       	ldi	r31, 0x05	; 5
	add ZL,r0
    6bac:	e0 0d       	add	r30, r0
	adc ZH,r1
    6bae:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6bb0:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6bb2:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6bb4:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6bb6:	8e 9f       	mul	r24, r30
	movw r26,r0
    6bb8:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6bba:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6bbc:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6bbe:	c3 ec       	ldi	r28, 0xC3	; 195
	ldi YH,hi8(sprites_tile_banks)	
    6bc0:	d8 e0       	ldi	r29, 0x08	; 8
	clr r0
    6bc2:	00 24       	eor	r0, r0
	add YL,r1
    6bc4:	c1 0d       	add	r28, r1
	adc YH,r0		
    6bc6:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6bc8:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6bca:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6bcc:	ea 0f       	add	r30, r26
	adc ZH,r27
    6bce:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6bd0:	ac e5       	ldi	r26, 0x5C	; 92
	ldi XH,hi8(ram_tiles)
    6bd2:	b5 e0       	ldi	r27, 0x05	; 5
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6bd4:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6bd6:	69 9f       	mul	r22, r25
	add XL,r0
    6bd8:	a0 0d       	add	r26, r0
	adc XH,r1
    6bda:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6bdc:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6bde:	dd 27       	eor	r29, r29

	cpi r20,0	
    6be0:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6be2:	51 f4       	brne	.+20     	; 0x6bf8 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6be4:	a2 0f       	add	r26, r18
	adc XH,r1
    6be6:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6be8:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6bea:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6bec:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6bee:	11 c0       	rjmp	.+34     	; 0x6c12 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6bf0:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6bf2:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6bf4:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6bf6:	0d c0       	rjmp	.+26     	; 0x6c12 <x_check_end>

00006bf8 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6bf8:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6bfa:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6bfc:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6bfe:	04 c0       	rjmp	.+8      	; 0x6c08 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6c00:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6c02:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6c04:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6c06:	05 c0       	rjmp	.+10     	; 0x6c12 <x_check_end>

00006c08 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6c08:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6c0a:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6c0c:	e2 0f       	add	r30, r18
	adc ZH,r1
    6c0e:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6c10:	31 97       	sbiw	r30, 0x01	; 1

00006c12 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6c12:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6c14:	41 f4       	brne	.+16     	; 0x6c26 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6c16:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6c18:	93 9f       	mul	r25, r19
	add XL,r0
    6c1a:	a0 0d       	add	r26, r0
	adc XH,r1
    6c1c:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6c1e:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6c20:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6c22:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6c24:	0a c0       	rjmp	.+20     	; 0x6c3a <y_check_end>

00006c26 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6c26:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6c28:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6c2a:	63 2f       	mov	r22, r19
	dec r22
    6c2c:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6c2e:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6c30:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6c32:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6c34:	56 9f       	mul	r21, r22
	add ZL,r0
    6c36:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6c38:	f1 1d       	adc	r31, r1

00006c3a <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6c3a:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6c3c:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6c3e:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6c40:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6c42:	00 ff       	sbrs	r16, 0
	clr r23
    6c44:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6c46:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6c48:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6c4a:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6c4c:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6c4e:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6c50:	59 1b       	sub	r21, r25

00006c52 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6c52:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6c54:	48 1b       	sub	r20, r24

00006c56 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6c56:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6c58:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6c5a:	2c 93       	st	X, r18
	adiw XL,1
    6c5c:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6c5e:	e6 0f       	add	r30, r22
	adc ZH,r23
    6c60:	f7 1f       	adc	r31, r23
	dec r20
    6c62:	4a 95       	dec	r20
	brne x_loop
    6c64:	c1 f7       	brne	.-16     	; 0x6c56 <x_loop>

	add ZL,YL		;src+=srcXdiff
    6c66:	ec 0f       	add	r30, r28
	adc ZH,YH
    6c68:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6c6a:	a8 0f       	add	r26, r24
	adc XH,r1
    6c6c:	b1 1d       	adc	r27, r1
	dec r21
    6c6e:	5a 95       	dec	r21
	brne y_loop
    6c70:	81 f7       	brne	.-32     	; 0x6c52 <y_loop>


	pop YH
    6c72:	df 91       	pop	r29
	pop YL
    6c74:	cf 91       	pop	r28
	pop r17
    6c76:	1f 91       	pop	r17
	pop r16
    6c78:	0f 91       	pop	r16
	ret
    6c7a:	08 95       	ret

00006c7c <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6c7c:	0f 92       	push	r0
	push r1
    6c7e:	1f 92       	push	r1
	push ZL;2
    6c80:	ef 93       	push	r30
	push ZH;2
    6c82:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c84:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c86:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c88:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6c8c:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6c8e:	f1 e0       	ldi	r31, 0x01	; 1

00006c90 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6c90:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6c92:	00 f0       	brcs	.+0      	; 0x6c94 <latency_loop+0x4>
	inc ZH
    6c94:	f3 95       	inc	r31
	cpi ZH,10
    6c96:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6c98:	d8 f3       	brcs	.-10     	; 0x6c90 <latency_loop>
	jmp .
    6c9a:	0c 94 4f 36 	jmp	0x6c9e	; 0x6c9e <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6c9e:	e0 91 d3 08 	lds	r30, 0x08D3
	dec ZL
    6ca2:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6ca4:	e0 93 d3 08 	sts	0x08D3, r30

	;process sync phases
	lds ZH,sync_phase
    6ca8:	f0 91 d2 08 	lds	r31, 0x08D2
	sbrc ZH,0
    6cac:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6cae:	57 c0       	rjmp	.+174    	; 0x6d5e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6cb0:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6cb2:	98 f0       	brcs	.+38     	; 0x6cda <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6cb4:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6cb6:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6cba:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6cbc:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6cc0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6cc2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6cc4:	26 f4       	brtc	.+8      	; 0x6cce <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6cc6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6cc8:	0e 94 24 38 	call	0x7048	; 0x7048 <update_sound>
	rjmp sync_end
    6ccc:	b8 c0       	rjmp	.+368    	; 0x6e3e <sync_end>

00006cce <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6cce:	e5 e1       	ldi	r30, 0x15	; 21
    6cd0:	ea 95       	dec	r30
    6cd2:	f1 f7       	brne	.-4      	; 0x6cd0 <sync_pre_eq_no_sound_update+0x2>
    6cd4:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6cd6:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6cd8:	b2 c0       	rjmp	.+356    	; 0x6e3e <sync_end>

00006cda <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6cda:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6cdc:	38 f1       	brcs	.+78     	; 0x6d2c <sync_post_eq>

	rjmp .
    6cde:	00 c0       	rjmp	.+0      	; 0x6ce0 <sync_eq+0x6>
	rjmp .
    6ce0:	00 c0       	rjmp	.+0      	; 0x6ce2 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ce2:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6ce4:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6ce6:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6ce8:	16 f4       	brtc	.+4      	; 0x6cee <sync_eq_skip>
	
	call update_sound
    6cea:	0e 94 24 38 	call	0x7048	; 0x7048 <update_sound>

00006cee <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6cee:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6cf0:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6cf4:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6cf6:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6cfa:	a1 c0       	rjmp	.+322    	; 0x6e3e <sync_end>

00006cfc <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6cfc:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6cfe:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6d00:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6d02:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6d06:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6d08:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6d0a:	00 f0       	brcs	.+0      	; 0x6d0c <__vector_14+0x10>

	cpi ZL,2
    6d0c:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6d0e:	00 f0       	brcs	.+0      	; 0x6d10 <__vector_14+0x14>

	cpi ZL,3
    6d10:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6d12:	00 f0       	brcs	.+0      	; 0x6d14 <__vector_14+0x18>

	cpi ZL,4
    6d14:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6d16:	00 f0       	brcs	.+0      	; 0x6d18 <__vector_14+0x1c>

	cpi ZL,5
    6d18:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6d1a:	00 f0       	brcs	.+0      	; 0x6d1c <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6d1c:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6d1e:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6d20:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6d24:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6d26:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6d28:	ef 91       	pop	r30
	reti
    6d2a:	18 95       	reti

00006d2c <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6d2c:	00 c0       	rjmp	.+0      	; 0x6d2e <sync_post_eq+0x2>

	bst ZL,0
    6d2e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d30:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6d32:	26 f4       	brtc	.+8      	; 0x6d3c <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6d34:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6d36:	0e 94 24 38 	call	0x7048	; 0x7048 <update_sound>
	rjmp sync_pre_eq_cont
    6d3a:	05 c0       	rjmp	.+10     	; 0x6d46 <sync_pre_eq_cont>

00006d3c <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6d3c:	e5 e1       	ldi	r30, 0x15	; 21
    6d3e:	ea 95       	dec	r30
    6d40:	f1 f7       	brne	.-4      	; 0x6d3e <sync_post_eq_no_sound_update+0x2>
    6d42:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6d44:	28 9a       	sbi	0x05, 0	; 5

00006d46 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6d46:	e0 91 d3 08 	lds	r30, 0x08D3
	cpi ZL,0
    6d4a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6d4c:	09 f0       	breq	.+2      	; 0x6d50 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6d4e:	77 c0       	rjmp	.+238    	; 0x6e3e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6d50:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6d52:	e0 93 d3 08 	sts	0x08D3, r30
	ldi ZL,1
    6d56:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6d58:	e0 93 d2 08 	sts	0x08D2, r30
	
	rjmp sync_end
    6d5c:	70 c0       	rjmp	.+224    	; 0x6e3e <sync_end>

00006d5e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6d5e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6d60:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6d64:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6d66:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6d6a:	00 c0       	rjmp	.+0      	; 0x6d6c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d6c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6d6e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d70:	00 c0       	rjmp	.+0      	; 0x6d72 <sync_hsync+0x14>
	call update_sound
    6d72:	0e 94 24 38 	call	0x7048	; 0x7048 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6d76:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d78:	00 90 d9 08 	lds	r0, 0x08D9
	sub ZH,r0				
    6d7c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6d7e:	e0 91 d3 08 	lds	r30, 0x08D3
	cp ZL,ZH
    6d82:	ef 17       	cp	r30, r31
	brsh no_render
    6d84:	e0 f4       	brcc	.+56     	; 0x6dbe <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6d86:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6d88:	00 90 d9 08 	lds	r0, 0x08D9
	sub ZH,r0				
    6d8c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6d8e:	00 90 da 08 	lds	r0, 0x08DA
	sub ZH,r0			
    6d92:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6d94:	ef 17       	cp	r30, r31
	brlo no_render
    6d96:	98 f0       	brcs	.+38     	; 0x6dbe <no_render>

	;push r1-r29
	ldi ZL,29
    6d98:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6d9a:	ff 27       	eor	r31, r31

00006d9c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6d9c:	00 80       	ld	r0, Z
	push r0
    6d9e:	0f 92       	push	r0
	dec ZL
    6da0:	ea 95       	dec	r30
	brne push_loop	
    6da2:	e1 f7       	brne	.-8      	; 0x6d9c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6da4:	0f e1       	ldi	r16, 0x1F	; 31
    6da6:	0a 95       	dec	r16
    6da8:	f1 f7       	brne	.-4      	; 0x6da6 <push_loop+0xa>
    6daa:	00 00       	nop
    6dac:	00 00       	nop

	call VMODE_FUNC		;TCNT1=0x234
    6dae:	0e 94 6b 34 	call	0x68d6	; 0x68d6 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6db2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6db4:	ff 27       	eor	r31, r31

00006db6 <pop_loop>:
pop_loop:
	pop r0
    6db6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6db8:	01 92       	st	Z+, r0
	cpi ZL,30
    6dba:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6dbc:	e0 f3       	brcs	.-8      	; 0x6db6 <pop_loop>

00006dbe <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6dbe:	e0 91 d3 08 	lds	r30, 0x08D3
	cpi ZL,0
    6dc2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6dc4:	09 f0       	breq	.+2      	; 0x6dc8 <no_render+0xa>
	rjmp sync_end
    6dc6:	3b c0       	rjmp	.+118    	; 0x6e3e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6dc8:	2f 93       	push	r18
	push r19
    6dca:	3f 93       	push	r19
	push r20
    6dcc:	4f 93       	push	r20
	push r21
    6dce:	5f 93       	push	r21
	push r22
    6dd0:	6f 93       	push	r22
	push r23
    6dd2:	7f 93       	push	r23
	push r24
    6dd4:	8f 93       	push	r24
	push r25
    6dd6:	9f 93       	push	r25
	push r26
    6dd8:	af 93       	push	r26
	push r27
    6dda:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6ddc:	78 94       	sei
	clr r1
    6dde:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6de0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6de2:	e0 93 d2 08 	sts	0x08D2, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6de6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6de8:	e0 93 d3 08 	sts	0x08D3, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6dec:	f0 91 db 08 	lds	r31, 0x08DB
	sts first_render_line,ZH
    6df0:	f0 93 d9 08 	sts	0x08D9, r31
	
	lds ZH,render_lines_count_tmp
    6df4:	f0 91 dc 08 	lds	r31, 0x08DC
	sts render_lines_count,ZH
    6df8:	f0 93 da 08 	sts	0x08DA, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6dfc:	e0 91 d5 08 	lds	r30, 0x08D5
	lds ZH,pre_vsync_user_callback+1
    6e00:	f0 91 d6 08 	lds	r31, 0x08D6
	cp  ZL,r1
    6e04:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e06:	f1 05       	cpc	r31, r1
	breq .+2 
    6e08:	09 f0       	breq	.+2      	; 0x6e0c <no_render+0x4e>
	icall
    6e0a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6e0c:	0e 94 e2 38 	call	0x71c4	; 0x71c4 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6e10:	0e 94 8f 46 	call	0x8d1e	; 0x8d1e <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6e14:	0e 94 31 37 	call	0x6e62	; 0x6e62 <process_music>
	clr r1
    6e18:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6e1a:	e0 91 d7 08 	lds	r30, 0x08D7
	lds ZH,post_vsync_user_callback+1
    6e1e:	f0 91 d8 08 	lds	r31, 0x08D8
	cp  ZL,r1
    6e22:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6e24:	f1 05       	cpc	r31, r1
	breq .+2 
    6e26:	09 f0       	breq	.+2      	; 0x6e2a <no_render+0x6c>
	icall
    6e28:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6e2a:	bf 91       	pop	r27
	pop r26
    6e2c:	af 91       	pop	r26
	pop r25
    6e2e:	9f 91       	pop	r25
	pop r24
    6e30:	8f 91       	pop	r24
	pop r23
    6e32:	7f 91       	pop	r23
	pop r22
    6e34:	6f 91       	pop	r22
	pop r21
    6e36:	5f 91       	pop	r21
	pop r20
    6e38:	4f 91       	pop	r20
	pop r19
    6e3a:	3f 91       	pop	r19
	pop r18
    6e3c:	2f 91       	pop	r18

00006e3e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6e3e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6e40:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6e42:	ff 91       	pop	r31
	pop ZL
    6e44:	ef 91       	pop	r30
	pop r1
    6e46:	1f 90       	pop	r1
	pop r0
    6e48:	0f 90       	pop	r0
	reti
    6e4a:	18 95       	reti

00006e4c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6e4c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6e4e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6e50:	00 c0       	rjmp	.+0      	; 0x6e52 <hsync_pulse+0x6>
	call update_sound
    6e52:	0e 94 24 38 	call	0x7048	; 0x7048 <update_sound>

	lds ZL,sync_pulse
    6e56:	e0 91 d3 08 	lds	r30, 0x08D3
	dec ZL
    6e5a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6e5c:	e0 93 d3 08 	sts	0x08D3, r30

	ret
    6e60:	08 95       	ret

00006e62 <process_music>:
process_music:

	//call update_sound
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6e62:	e0 91 11 0b 	lds	r30, 0x0B11
	sbrc ZL,0
    6e66:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6e68:	0e 94 85 3b 	call	0x770a	; 0x770a <ProcessMusic>
#endif


	;Flip mix bank & set target bank adress for mixing
	lds r0,mix_bank
    6e6c:	00 90 0f 0b 	lds	r0, 0x0B0F
	tst r0
    6e70:	00 20       	and	r0, r0
	brne set_hi_bank
    6e72:	19 f4       	brne	.+6      	; 0x6e7a <set_hi_bank>
	ldi XL,lo8(mix_buf)
    6e74:	a1 e0       	ldi	r26, 0x01	; 1
	ldi XH,hi8(mix_buf)
    6e76:	b9 e0       	ldi	r27, 0x09	; 9
	rjmp end_set_bank
    6e78:	02 c0       	rjmp	.+4      	; 0x6e7e <end_set_bank>

00006e7a <set_hi_bank>:
set_hi_bank:
	ldi XL,lo8(mix_buf+MIX_BANK_SIZE)
    6e7a:	a7 e0       	ldi	r26, 0x07	; 7
	ldi XH,hi8(mix_buf+MIX_BANK_SIZE)
    6e7c:	ba e0       	ldi	r27, 0x0A	; 10

00006e7e <end_set_bank>:
end_set_bank:

	ldi r18,1
    6e7e:	21 e0       	ldi	r18, 0x01	; 1
	eor	r0,r18
    6e80:	02 26       	eor	r0, r18
	sts mix_bank,r0
    6e82:	00 92 0f 0b 	sts	0x0B0F, r0
	
	ldi r18,2
    6e86:	22 e0       	ldi	r18, 0x02	; 2
	sts mix_block,r18	
    6e88:	20 93 10 0b 	sts	0x0B10, r18


#if ENABLE_MIXER==1

	lds ZL,sound_enabled
    6e8c:	e0 91 11 0b 	lds	r30, 0x0B11
	sbrs ZL,0
    6e90:	e0 ff       	sbrs	r30, 0
	ret
    6e92:	08 95       	ret

	push r2
    6e94:	2f 92       	push	r2
	push r3
    6e96:	3f 92       	push	r3
	push r4
    6e98:	4f 92       	push	r4
	push r5
    6e9a:	5f 92       	push	r5
	push r6
    6e9c:	6f 92       	push	r6
	push r7
    6e9e:	7f 92       	push	r7
	push r8
    6ea0:	8f 92       	push	r8
	push r9
    6ea2:	9f 92       	push	r9
	push r10
    6ea4:	af 92       	push	r10
	push r11
    6ea6:	bf 92       	push	r11
	push r12
    6ea8:	cf 92       	push	r12
	push r13
    6eaa:	df 92       	push	r13
	push r14
    6eac:	ef 92       	push	r14
	push r15
    6eae:	ff 92       	push	r15
	push r16
    6eb0:	0f 93       	push	r16
	push r17
    6eb2:	1f 93       	push	r17
	push r28
    6eb4:	cf 93       	push	r28
	push r29
    6eb6:	df 93       	push	r29
			lds r21,tr4_vol
			lds r22,tr4_barrel_lo
			lds r23,tr4_barrel_hi
			lds r24,tr4_divider
		#else
			lds r21,tr4_vol
    6eb8:	50 91 24 0b 	lds	r21, 0x0B24
			lds r22,tr4_pos_lo
    6ebc:	60 91 28 0b 	lds	r22, 0x0B28
			lds r23,tr4_pos_hi
    6ec0:	70 91 29 0b 	lds	r23, 0x0B29
			lds r24,tr4_pos_frac
    6ec4:	80 91 27 0b 	lds	r24, 0x0B27

			lds r4,tr4_step_lo 
    6ec8:	40 90 25 0b 	lds	r4, 0x0B25
			lds r5,tr4_step_hi 
    6ecc:	50 90 26 0b 	lds	r5, 0x0B26
			clr r6
    6ed0:	66 24       	eor	r6, r6
			lds r8,tr4_loop_end_lo
    6ed2:	80 90 2c 0b 	lds	r8, 0x0B2C
			lds r9,tr4_loop_end_hi
    6ed6:	90 90 2d 0b 	lds	r9, 0x0B2D

			//lds r10,tr4_loop_start_lo
			//lds r11,tr4_loop_start_hi
			
			;compute loop lenght
			lds ZL,tr4_loop_start_lo
    6eda:	e0 91 2a 0b 	lds	r30, 0x0B2A
			lds ZH,tr4_loop_start_hi
    6ede:	f0 91 2b 0b 	lds	r31, 0x0B2B
			movw r10,r8
    6ee2:	54 01       	movw	r10, r8
			sub r10,ZL
    6ee4:	ae 1a       	sub	r10, r30
			sbc r11,ZH
    6ee6:	bf 0a       	sbc	r11, r31
			

			movw r2,XL	;push
    6ee8:	1d 01       	movw	r2, r26

			ldi r28,lo8(262/2)
    6eea:	c3 e8       	ldi	r28, 0x83	; 131

00006eec <ch4_loop>:
			movw ZL,r22
			lpm	r20,Z	;load sample
			mulsu r20,r21;(sample*mixing vol)
			st X+,r1

		.endr	
    6eec:	84 0d       	add	r24, r4
    6eee:	65 1d       	adc	r22, r5
    6ef0:	76 1d       	adc	r23, r6
    6ef2:	68 15       	cp	r22, r8
    6ef4:	79 05       	cpc	r23, r9
    6ef6:	10 f0       	brcs	.+4      	; 0x6efc <ch4_loop+0x10>
    6ef8:	6a 19       	sub	r22, r10
    6efa:	7b 09       	sbc	r23, r11
    6efc:	fb 01       	movw	r30, r22
    6efe:	44 91       	lpm	r20, Z
    6f00:	45 03       	mulsu	r20, r21
    6f02:	1d 92       	st	X+, r1
    6f04:	84 0d       	add	r24, r4
    6f06:	65 1d       	adc	r22, r5
    6f08:	76 1d       	adc	r23, r6
    6f0a:	68 15       	cp	r22, r8
    6f0c:	79 05       	cpc	r23, r9
    6f0e:	10 f0       	brcs	.+4      	; 0x6f14 <ch4_loop+0x28>
    6f10:	6a 19       	sub	r22, r10
    6f12:	7b 09       	sbc	r23, r11
    6f14:	fb 01       	movw	r30, r22
    6f16:	44 91       	lpm	r20, Z
    6f18:	45 03       	mulsu	r20, r21
    6f1a:	1d 92       	st	X+, r1
			dec r28
    6f1c:	ca 95       	dec	r28
			brne ch4_loop
    6f1e:	31 f7       	brne	.-52     	; 0x6eec <ch4_loop>

			movw XL,r2	;push
    6f20:	d1 01       	movw	r26, r2





	lds r2,tr1_step_lo
    6f22:	20 90 13 0b 	lds	r2, 0x0B13
	lds r3,tr1_step_hi
    6f26:	30 90 14 0b 	lds	r3, 0x0B14
	lds r4,tr1_pos_lo
    6f2a:	40 90 16 0b 	lds	r4, 0x0B16
	lds r5,tr1_pos_hi 
    6f2e:	50 90 17 0b 	lds	r5, 0x0B17
	lds r6,tr1_pos_frac
    6f32:	60 90 15 0b 	lds	r6, 0x0B15
	lds r17,tr1_vol
    6f36:	10 91 12 0b 	lds	r17, 0x0B12
	
	lds r7,tr2_step_lo
    6f3a:	70 90 19 0b 	lds	r7, 0x0B19
	lds r8,tr2_step_hi
    6f3e:	80 90 1a 0b 	lds	r8, 0x0B1A
	lds r9,tr2_pos_frac
    6f42:	90 90 1b 0b 	lds	r9, 0x0B1B
	lds r10,tr2_pos_lo
    6f46:	a0 90 1c 0b 	lds	r10, 0x0B1C
	lds r11,tr2_pos_hi
    6f4a:	b0 90 1d 0b 	lds	r11, 0x0B1D
	lds r18,tr2_vol	
    6f4e:	20 91 18 0b 	lds	r18, 0x0B18

	lds r12,tr3_step_lo
    6f52:	c0 90 1f 0b 	lds	r12, 0x0B1F
	lds r13,tr3_step_hi
    6f56:	d0 90 20 0b 	lds	r13, 0x0B20
	lds r14,tr3_pos_lo
    6f5a:	e0 90 22 0b 	lds	r14, 0x0B22
	lds r15,tr3_pos_hi
    6f5e:	f0 90 23 0b 	lds	r15, 0x0B23
	lds r16,tr3_pos_frac
    6f62:	00 91 21 0b 	lds	r16, 0x0B21
	lds r19,tr3_vol	
    6f66:	30 91 1e 0b 	lds	r19, 0x0B1E



	

	ldi r25,0xff 
    6f6a:	9f ef       	ldi	r25, 0xFF	; 255

00006f6c <mix_loop>:
mix_loop:

	#if MIXER_CHAN4_TYPE == 1 && SOUND_CHANNEL_4_ENABLE == 1
		ld 28,X
    6f6c:	cc 91       	ld	r28, X
		clr r29	;sign extend
    6f6e:	dd 27       	eor	r29, r29
		sbrc r28,7
    6f70:	c7 fd       	sbrc	r28, 7
		ser r29
    6f72:	df ef       	ldi	r29, 0xFF	; 255
	#endif

	;channel 1 - 12 cycles/sample
	add	r6,r2	;add step to fractional part of sample pos
    6f74:	62 0c       	add	r6, r2
	adc r4,r3	;add step to low byte of sample pos
    6f76:	43 1c       	adc	r4, r3
	movw ZL,r4
    6f78:	f2 01       	movw	r30, r4
	lpm	r20,Z	;load sample
    6f7a:	44 91       	lpm	r20, Z
	mulsu r20,r17;(sample*mixing vol)
    6f7c:	41 03       	mulsu	r20, r17
	;clr r0
	sbc r0,r0	;sign extend
    6f7e:	00 08       	sbc	r0, r0

	#if MIXER_CHAN4_TYPE == 0 || SOUND_CHANNEL_4_ENABLE == 0
		mov r28,r1	;add (sample*vol>>8) to mix buffer lsb
		mov r29,r0	;ajust mix buffer msb
	#else
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f80:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb		
    6f82:	d0 1d       	adc	r29, r0
	#endif

	#if SOUND_CHANNEL_2_ENABLE == 1
		;channel 2
		add	r9,r7	;add step to fractional part of sample pos
    6f84:	97 0c       	add	r9, r7
		adc r10,r8	;add step to low byte of sample pos 
    6f86:	a8 1c       	adc	r10, r8
		movw ZL,r10
    6f88:	f5 01       	movw	r30, r10
		lpm	r20,Z	;load sample
    6f8a:	44 91       	lpm	r20, Z
		mulsu r20,r18;(sample*mixing vol)
    6f8c:	42 03       	mulsu	r20, r18
		;clr r0
		sbc r0,r0	;sign extend
    6f8e:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6f90:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6f92:	d0 1d       	adc	r29, r0
	#endif 

	#if SOUND_CHANNEL_3_ENABLE == 1
		;channel 3
		add	r16,r12	;add step to fractional part of sample pos
    6f94:	0c 0d       	add	r16, r12
		adc r14,r13	;add step to low byte of sample pos 
    6f96:	ed 1c       	adc	r14, r13
		movw ZL,r14
    6f98:	f7 01       	movw	r30, r14
		lpm	r20,Z	;load sample
    6f9a:	44 91       	lpm	r20, Z
		mulsu r20,r19;(sample*mixing vol)
    6f9c:	43 03       	mulsu	r20, r19
		;clr r0
		sbc r0,r0	;sign extend
    6f9e:	00 08       	sbc	r0, r0
		add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6fa0:	c1 0d       	add	r28, r1
		adc r29,r0	;ajust mix buffer msb
    6fa2:	d0 1d       	adc	r29, r0
	#endif

	;final processing

	;clip
	clr r0
    6fa4:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6fa6:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6fa8:	d0 05       	cpc	r29, r0
	brlt .+2
    6faa:	0c f0       	brlt	.+2      	; 0x6fae <mix_loop+0x42>
	ldi r28,127
    6fac:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6fae:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6fb0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6fb2:	d0 05       	cpc	r29, r0
	brge .+2
    6fb4:	0c f4       	brge	.+2      	; 0x6fb8 <mix_loop+0x4c>
	ldi r28,-128
    6fb6:	c0 e8       	ldi	r28, 0x80	; 128


	subi r28,128	;convert to unsigned
    6fb8:	c0 58       	subi	r28, 0x80	; 128
	st X+,r28
    6fba:	cd 93       	st	X+, r28


	dec r25
    6fbc:	9a 95       	dec	r25
	breq .+2
    6fbe:	09 f0       	breq	.+2      	; 0x6fc2 <mix_loop+0x56>
	rjmp mix_loop
    6fc0:	d5 cf       	rjmp	.-86     	; 0x6f6c <mix_loop>

	lds r20,mix_block
    6fc2:	40 91 10 0b 	lds	r20, 0x0B10
	dec r20
    6fc6:	4a 95       	dec	r20
	sts mix_block,r20
    6fc8:	40 93 10 0b 	sts	0x0B10, r20
	ldi r25,(MIX_BANK_SIZE-0xff)
    6fcc:	97 e0       	ldi	r25, 0x07	; 7
	breq .+2
    6fce:	09 f0       	breq	.+2      	; 0x6fd2 <mix_loop+0x66>
	rjmp mix_loop
    6fd0:	cd cf       	rjmp	.-102    	; 0x6f6c <mix_loop>


	//save current positions
	sts tr1_pos_frac,r6
    6fd2:	60 92 15 0b 	sts	0x0B15, r6
	sts tr1_pos_lo,r4	
    6fd6:	40 92 16 0b 	sts	0x0B16, r4

	sts tr2_pos_frac,r9
    6fda:	90 92 1b 0b 	sts	0x0B1B, r9
	sts tr2_pos_lo,r10
    6fde:	a0 92 1c 0b 	sts	0x0B1C, r10

	sts tr3_pos_frac,r16
    6fe2:	00 93 21 0b 	sts	0x0B21, r16
	sts tr3_pos_lo,r14
    6fe6:	e0 92 22 0b 	sts	0x0B22, r14
#if MIXER_CHAN4_TYPE == 0
	sts tr4_barrel_lo,r22
	sts tr4_barrel_hi,r23
	sts tr4_divider,r24
#else
	sts tr4_vol,r21	
    6fea:	50 93 24 0b 	sts	0x0B24, r21
	sts tr4_pos_lo,r22
    6fee:	60 93 28 0b 	sts	0x0B28, r22
	sts tr4_pos_hi,r23
    6ff2:	70 93 29 0b 	sts	0x0B29, r23
	sts tr4_pos_frac,r24
    6ff6:	80 93 27 0b 	sts	0x0B27, r24

#endif

	pop r29
    6ffa:	df 91       	pop	r29
	pop r28
    6ffc:	cf 91       	pop	r28
	pop r17
    6ffe:	1f 91       	pop	r17
	pop r16
    7000:	0f 91       	pop	r16
	pop r15
    7002:	ff 90       	pop	r15
	pop r14
    7004:	ef 90       	pop	r14
	pop r13
    7006:	df 90       	pop	r13
	pop r12
    7008:	cf 90       	pop	r12
	pop r11
    700a:	bf 90       	pop	r11
	pop r10
    700c:	af 90       	pop	r10
	pop r9
    700e:	9f 90       	pop	r9
	pop r8
    7010:	8f 90       	pop	r8
	pop r7
    7012:	7f 90       	pop	r7
	pop r6
    7014:	6f 90       	pop	r6
	pop r5
    7016:	5f 90       	pop	r5
	pop r4
    7018:	4f 90       	pop	r4
	pop r3
    701a:	3f 90       	pop	r3
	pop r2
    701c:	2f 90       	pop	r2

#endif // ENABLE_MIXER==1

	ret
    701e:	08 95       	ret

00007020 <update_sound_buffer_fast>:
; NO MIDI
; Destroys: Z,r16,r17
; Cycles: 24
;**********************************
update_sound_buffer_fast:
	lds ZL,mix_pos
    7020:	e0 91 0d 0b 	lds	r30, 0x0B0D
	lds ZH,mix_pos+1
    7024:	f0 91 0e 0b 	lds	r31, 0x0B0E
			
	ld r16,Z+		;load next sample
    7028:	01 91       	ld	r16, Z+
	;subi r16,128	;convert to unsigned
	nop
    702a:	00 00       	nop
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    702c:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    7030:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    7032:	ed 30       	cpi	r30, 0x0D	; 13
	cpc ZH,r16
    7034:	f0 07       	cpc	r31, r16
	;12

	ldi r16,lo8(mix_buf)
    7036:	01 e0       	ldi	r16, 0x01	; 1
	ldi r17,hi8(mix_buf)
    7038:	19 e0       	ldi	r17, 0x09	; 9
	brlo .+2
    703a:	08 f0       	brcs	.+2      	; 0x703e <update_sound_buffer_fast+0x1e>
	movw ZL,r16
    703c:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    703e:	e0 93 0d 0b 	sts	0x0B0D, r30
	sts mix_pos+1,ZH		
    7042:	f0 93 0e 0b 	sts	0x0B0E, r31

	ret ;20+4=24
    7046:	08 95       	ret

00007048 <update_sound>:
; Destroys: ZH
; Cycles: VSYNC = 68
;         HSYNC = 135
;***********************
update_sound:
	push r16
    7048:	0f 93       	push	r16
	push r17
    704a:	1f 93       	push	r17
	push r18
    704c:	2f 93       	push	r18
	push ZL
    704e:	ef 93       	push	r30

	lds ZL,mix_pos
    7050:	e0 91 0d 0b 	lds	r30, 0x0B0D
	lds ZH,mix_pos+1
    7054:	f0 91 0e 0b 	lds	r31, 0x0B0E
			
	ld r16,Z+
    7058:	01 91       	ld	r16, Z+
	sts _SFR_MEM_ADDR(OCR2A),r16 ;output sound byte
    705a:	00 93 b3 00 	sts	0x00B3, r16

	;compare+wrap=8 cycles fixed
	ldi r16,hi8(MIX_BUF_SIZE+mix_buf)
    705e:	0b e0       	ldi	r16, 0x0B	; 11
	cpi ZL,lo8(MIX_BUF_SIZE+mix_buf)
    7060:	ed 30       	cpi	r30, 0x0D	; 13
	cpc ZH,r16
    7062:	f0 07       	cpc	r31, r16

	ldi r16,lo8(mix_buf)
    7064:	01 e0       	ldi	r16, 0x01	; 1
	ldi r17,hi8(mix_buf)
    7066:	19 e0       	ldi	r17, 0x09	; 9

	brlo .+2
    7068:	08 f0       	brcs	.+2      	; 0x706c <update_sound+0x24>
	movw ZL,r16
    706a:	f8 01       	movw	r30, r16

	sts mix_pos,ZL
    706c:	e0 93 0d 0b 	sts	0x0B0D, r30
	sts mix_pos+1,ZH	
    7070:	f0 93 0e 0b 	sts	0x0B0E, r31
	rjmp .
	rjmp .
	rjmp .
#else
	//alignment cycles
	ldi ZL,8
    7074:	e8 e0       	ldi	r30, 0x08	; 8
	dec ZL
    7076:	ea 95       	dec	r30
	brne .-4
    7078:	f1 f7       	brne	.-4      	; 0x7076 <update_sound+0x2e>
#endif

	pop ZL
    707a:	ef 91       	pop	r30
	pop r18
    707c:	2f 91       	pop	r18
	pop r17
    707e:	1f 91       	pop	r17
	pop r16
    7080:	0f 91       	pop	r16

	;*** Video sync update ***
	sbrc ZL,0								;pre-eq/post-eq sync
    7082:	e0 fd       	sbrc	r30, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7084:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,0								
    7086:	e0 ff       	sbrs	r30, 0
	rjmp .+2
    7088:	01 c0       	rjmp	.+2      	; 0x708c <update_sound+0x44>
	ret
    708a:	08 95       	ret

	ldi ZH,20
    708c:	f4 e1       	ldi	r31, 0x14	; 20
	dec ZH
    708e:	fa 95       	dec	r31
	brne .-4
    7090:	f1 f7       	brne	.-4      	; 0x708e <update_sound+0x46>
	rjmp .
    7092:	00 c0       	rjmp	.+0      	; 0x7094 <update_sound+0x4c>

	;*** Video sync update ***
	sbrc ZL,1								;hsync
    7094:	e1 fd       	sbrc	r30, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7096:	28 9a       	sbi	0x05, 0	; 5
	sbrs ZL,1								
    7098:	e1 ff       	sbrs	r30, 1
	rjmp .
    709a:	00 c0       	rjmp	.+0      	; 0x709c <update_sound+0x54>

	ret 
    709c:	08 95       	ret

0000709e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    709e:	80 93 c3 08 	sts	0x08C3, r24
	sts sprites_tile_banks+1,r25
    70a2:	90 93 c4 08 	sts	0x08C4, r25
	ret
    70a6:	08 95       	ret

000070a8 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    70a8:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    70aa:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    70ac:	a0 ee       	ldi	r26, 0xE0	; 224
	ldi XH,hi8(vram)
    70ae:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    70b0:	6d e0       	ldi	r22, 0x0D	; 13

000070b2 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    70b2:	6d 93       	st	X+, r22
	sbiw r30,1
    70b4:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    70b6:	e9 f7       	brne	.-6      	; 0x70b2 <fill_vram_loop>

	clr r1
    70b8:	11 24       	eor	r1, r1

	ret
    70ba:	08 95       	ret

000070bc <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    70bc:	50 91 cd 08 	lds	r21, 0x08CD
	add r20,21
    70c0:	45 0f       	add	r20, r21
	rjmp SetTile	
    70c2:	00 c0       	rjmp	.+0      	; 0x70c4 <SetTile>

000070c4 <SetTile>:

	ret

#else

	clr r25
    70c4:	99 27       	eor	r25, r25
	clr r23	
    70c6:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    70c8:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    70ca:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    70cc:	08 0e       	add	r0, r24
	adc r1,r25
    70ce:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    70d0:	a0 ee       	ldi	r26, 0xE0	; 224
	ldi XH,hi8(vram)
    70d2:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    70d4:	a0 0d       	add	r26, r0
	adc XH,r1
    70d6:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    70d8:	43 5f       	subi	r20, 0xF3	; 243
	st X,r20
    70da:	4c 93       	st	X, r20

	clr r1
    70dc:	11 24       	eor	r1, r1

	ret
    70de:	08 95       	ret

000070e0 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    70e0:	80 93 cd 08 	sts	0x08CD, r24
	ret
    70e4:	08 95       	ret

000070e6 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    70e6:	80 93 cb 08 	sts	0x08CB, r24
	sts tile_table_hi,r25	
    70ea:	90 93 cc 08 	sts	0x08CC, r25
	ret
    70ee:	08 95       	ret

000070f0 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    70f0:	80 91 d4 08 	lds	r24, 0x08D4
	andi r24,SYNC_FLAG_VSYNC
    70f4:	81 70       	andi	r24, 0x01	; 1
	ret
    70f6:	08 95       	ret

000070f8 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    70f8:	20 91 d4 08 	lds	r18, 0x08D4
	andi r18,~SYNC_FLAG_VSYNC
    70fc:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    70fe:	20 93 d4 08 	sts	0x08D4, r18
	ret
    7102:	08 95       	ret

00007104 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7104:	88 23       	and	r24, r24
	brne rj_p2
    7106:	29 f4       	brne	.+10     	; 0x7112 <rj_p2>
		
	lds r24,joypad1_status_lo
    7108:	80 91 dd 08 	lds	r24, 0x08DD
	lds r25,joypad1_status_lo+1
    710c:	90 91 de 08 	lds	r25, 0x08DE
	ret
    7110:	08 95       	ret

00007112 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7112:	80 91 e1 08 	lds	r24, 0x08E1
	lds r25,joypad2_status_lo+1	
    7116:	90 91 e2 08 	lds	r25, 0x08E2

	ret
    711a:	08 95       	ret

0000711c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    711c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    711e:	fe cf       	rjmp	.-4      	; 0x711c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7120:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7122:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7124:	60 bd       	out	0x20, r22	; 32
   cli
    7126:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7128:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    712a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    712c:	78 94       	sei
   ret
    712e:	08 95       	ret

00007130 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7130:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7132:	fe cf       	rjmp	.-4      	; 0x7130 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7134:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7136:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7138:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    713a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    713c:	80 b5       	in	r24, 0x20	; 32
   sei
    713e:	78 94       	sei
   ret
    7140:	08 95       	ret

00007142 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7142:	98 e0       	ldi	r25, 0x08	; 8
    7144:	88 e1       	ldi	r24, 0x18	; 24
    7146:	0f b6       	in	r0, 0x3f	; 63
    7148:	f8 94       	cli
    714a:	a8 95       	wdr
    714c:	80 93 60 00 	sts	0x0060, r24
    7150:	0f be       	out	0x3f, r0	; 63
    7152:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7156:	ff cf       	rjmp	.-2      	; 0x7156 <SoftReset+0x14>

00007158 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7158:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    715a:	c8 95       	lpm
    715c:	c8 95       	lpm
		Wait200ns();
    715e:	c8 95       	lpm
    7160:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7162:	12 98       	cbi	0x02, 2	; 2
    7164:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7166:	80 e0       	ldi	r24, 0x00	; 0
    7168:	90 e0       	ldi	r25, 0x00	; 0
    716a:	20 e0       	ldi	r18, 0x00	; 0
    716c:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    716e:	36 95       	lsr	r19
    7170:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7172:	96 95       	lsr	r25
    7174:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7176:	c8 95       	lpm
    7178:	c8 95       	lpm
			Wait200ns();
    717a:	c8 95       	lpm
    717c:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    717e:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7180:	00 9b       	sbis	0x00, 0	; 0
    7182:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7184:	01 9b       	sbis	0x00, 1	; 0
    7186:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7188:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    718a:	c8 95       	lpm
    718c:	c8 95       	lpm
			Wait200ns();
    718e:	c8 95       	lpm
    7190:	c8 95       	lpm
    7192:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7194:	61 f7       	brne	.-40     	; 0x716e <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7196:	30 93 de 08 	sts	0x08DE, r19
    719a:	20 93 dd 08 	sts	0x08DD, r18
		joypad2_status_lo=p2ButtonsLo;
    719e:	90 93 e2 08 	sts	0x08E2, r25
    71a2:	80 93 e1 08 	sts	0x08E1, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    71a6:	80 91 dd 08 	lds	r24, 0x08DD
    71aa:	90 91 de 08 	lds	r25, 0x08DE
    71ae:	0f 97       	sbiw	r24, 0x0f	; 15
    71b0:	31 f0       	breq	.+12     	; 0x71be <ReadButtons+0x66>
    71b2:	80 91 e1 08 	lds	r24, 0x08E1
    71b6:	90 91 e2 08 	lds	r25, 0x08E2
    71ba:	0f 97       	sbiw	r24, 0x0f	; 15
    71bc:	11 f4       	brne	.+4      	; 0x71c2 <ReadButtons+0x6a>
		SoftReset();
    71be:	0e 94 a1 38 	call	0x7142	; 0x7142 <SoftReset>
    71c2:	08 95       	ret

000071c4 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    71c4:	10 92 44 0b 	sts	0x0B44, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    71c8:	00 99       	sbic	0x00, 0	; 0
    71ca:	03 c0       	rjmp	.+6      	; 0x71d2 <ReadControllers+0xe>
    71cc:	81 e0       	ldi	r24, 0x01	; 1
    71ce:	80 93 44 0b 	sts	0x0B44, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    71d2:	01 99       	sbic	0x00, 1	; 0
    71d4:	05 c0       	rjmp	.+10     	; 0x71e0 <ReadControllers+0x1c>
    71d6:	80 91 44 0b 	lds	r24, 0x0B44
    71da:	82 60       	ori	r24, 0x02	; 2
    71dc:	80 93 44 0b 	sts	0x0B44, r24
			
	//read the standard buttons
	ReadButtons();
    71e0:	0c 94 ac 38 	jmp	0x7158	; 0x7158 <ReadButtons>

000071e4 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    71e4:	cf 93       	push	r28
    71e6:	df 93       	push	r29
    71e8:	c0 e0       	ldi	r28, 0x00	; 0
    71ea:	d0 e0       	ldi	r29, 0x00	; 0
    71ec:	fe 01       	movw	r30, r28
    71ee:	e0 55       	subi	r30, 0x50	; 80
    71f0:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    71f2:	64 91       	lpm	r22, Z
    71f4:	ce 01       	movw	r24, r28
    71f6:	0e 94 8e 38 	call	0x711c	; 0x711c <WriteEeprom>
    71fa:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    71fc:	c0 32       	cpi	r28, 0x20	; 32
    71fe:	d1 05       	cpc	r29, r1
    7200:	a9 f7       	brne	.-22     	; 0x71ec <FormatEeprom+0x8>
    7202:	c0 e2       	ldi	r28, 0x20	; 32
    7204:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7206:	6f ef       	ldi	r22, 0xFF	; 255
    7208:	ce 01       	movw	r24, r28
    720a:	0e 94 8e 38 	call	0x711c	; 0x711c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    720e:	6f ef       	ldi	r22, 0xFF	; 255
    7210:	ce 01       	movw	r24, r28
    7212:	01 96       	adiw	r24, 0x01	; 1
    7214:	0e 94 8e 38 	call	0x711c	; 0x711c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7218:	a0 96       	adiw	r28, 0x20	; 32
    721a:	c1 15       	cp	r28, r1
    721c:	88 e0       	ldi	r24, 0x08	; 8
    721e:	d8 07       	cpc	r29, r24
    7220:	91 f7       	brne	.-28     	; 0x7206 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7222:	df 91       	pop	r29
    7224:	cf 91       	pop	r28
    7226:	08 95       	ret

00007228 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7228:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    722a:	80 e0       	ldi	r24, 0x00	; 0
    722c:	90 e0       	ldi	r25, 0x00	; 0
    722e:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    7232:	c8 2f       	mov	r28, r24
    7234:	81 e0       	ldi	r24, 0x01	; 1
    7236:	90 e0       	ldi	r25, 0x00	; 0
    7238:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    723c:	28 2f       	mov	r18, r24
    723e:	30 e0       	ldi	r19, 0x00	; 0
    7240:	32 2f       	mov	r19, r18
    7242:	22 27       	eor	r18, r18
    7244:	2c 0f       	add	r18, r28
    7246:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7248:	81 e0       	ldi	r24, 0x01	; 1
    724a:	2a 35       	cpi	r18, 0x5A	; 90
    724c:	35 45       	sbci	r19, 0x55	; 85
    724e:	09 f0       	breq	.+2      	; 0x7252 <isEepromFormatted+0x2a>
    7250:	80 e0       	ldi	r24, 0x00	; 0
}
    7252:	cf 91       	pop	r28
    7254:	08 95       	ret

00007256 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7256:	cf 92       	push	r12
    7258:	df 92       	push	r13
    725a:	ef 92       	push	r14
    725c:	ff 92       	push	r15
    725e:	0f 93       	push	r16
    7260:	1f 93       	push	r17
    7262:	cf 93       	push	r28
    7264:	df 93       	push	r29
    7266:	1f 92       	push	r1
    7268:	cd b7       	in	r28, 0x3d	; 61
    726a:	de b7       	in	r29, 0x3e	; 62
    726c:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    726e:	0e 94 14 39 	call	0x7228	; 0x7228 <isEepromFormatted>
    7272:	88 23       	and	r24, r24
    7274:	09 f4       	brne	.+2      	; 0x7278 <EepromWriteBlock+0x22>
    7276:	4d c0       	rjmp	.+154    	; 0x7312 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7278:	f6 01       	movw	r30, r12
    727a:	80 81       	ld	r24, Z
    727c:	91 81       	ldd	r25, Z+1	; 0x01
    727e:	8f 3f       	cpi	r24, 0xFF	; 255
    7280:	ff ef       	ldi	r31, 0xFF	; 255
    7282:	9f 07       	cpc	r25, r31
    7284:	09 f4       	brne	.+2      	; 0x7288 <EepromWriteBlock+0x32>
    7286:	47 c0       	rjmp	.+142    	; 0x7316 <EepromWriteBlock+0xc0>
    7288:	8a 35       	cpi	r24, 0x5A	; 90
    728a:	95 45       	sbci	r25, 0x55	; 85
    728c:	09 f4       	brne	.+2      	; 0x7290 <EepromWriteBlock+0x3a>
    728e:	43 c0       	rjmp	.+134    	; 0x7316 <EepromWriteBlock+0xc0>
    7290:	00 e2       	ldi	r16, 0x20	; 32
    7292:	10 e0       	ldi	r17, 0x00	; 0
    7294:	f1 2c       	mov	r15, r1
    7296:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7298:	c8 01       	movw	r24, r16
    729a:	49 83       	std	Y+1, r20	; 0x01
    729c:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    72a0:	e8 2e       	mov	r14, r24
    72a2:	c8 01       	movw	r24, r16
    72a4:	01 96       	adiw	r24, 0x01	; 1
    72a6:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    72aa:	28 2f       	mov	r18, r24
    72ac:	30 e0       	ldi	r19, 0x00	; 0
    72ae:	32 2f       	mov	r19, r18
    72b0:	22 27       	eor	r18, r18
    72b2:	c9 01       	movw	r24, r18
    72b4:	8e 0d       	add	r24, r14
    72b6:	91 1d       	adc	r25, r1
		if(id==block->id){
    72b8:	f6 01       	movw	r30, r12
    72ba:	20 81       	ld	r18, Z
    72bc:	31 81       	ldd	r19, Z+1	; 0x01
    72be:	49 81       	ldd	r20, Y+1	; 0x01
    72c0:	82 17       	cp	r24, r18
    72c2:	93 07       	cpc	r25, r19
    72c4:	19 f4       	brne	.+6      	; 0x72cc <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    72c6:	ff 20       	and	r15, r15
    72c8:	89 f0       	breq	.+34     	; 0x72ec <EepromWriteBlock+0x96>
    72ca:	0c c0       	rjmp	.+24     	; 0x72e4 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    72cc:	01 96       	adiw	r24, 0x01	; 1
    72ce:	19 f4       	brne	.+6      	; 0x72d6 <EepromWriteBlock+0x80>
    72d0:	f1 10       	cpse	r15, r1
    72d2:	01 c0       	rjmp	.+2      	; 0x72d6 <EepromWriteBlock+0x80>
    72d4:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    72d6:	4f 5f       	subi	r20, 0xFF	; 255
    72d8:	00 5e       	subi	r16, 0xE0	; 224
    72da:	1f 4f       	sbci	r17, 0xFF	; 255
    72dc:	40 34       	cpi	r20, 0x40	; 64
    72de:	e1 f6       	brne	.-72     	; 0x7298 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    72e0:	ff 20       	and	r15, r15
    72e2:	d9 f0       	breq	.+54     	; 0x731a <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    72e4:	20 e2       	ldi	r18, 0x20	; 32
    72e6:	f2 9e       	mul	r15, r18
    72e8:	80 01       	movw	r16, r0
    72ea:	11 24       	eor	r1, r1
    72ec:	76 01       	movw	r14, r12
    72ee:	80 e2       	ldi	r24, 0x20	; 32
    72f0:	e8 0e       	add	r14, r24
    72f2:	f1 1c       	adc	r15, r1
    72f4:	0c 19       	sub	r16, r12
    72f6:	1d 09       	sbc	r17, r13
    72f8:	c6 01       	movw	r24, r12
    72fa:	80 0f       	add	r24, r16
    72fc:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    72fe:	f6 01       	movw	r30, r12
    7300:	61 91       	ld	r22, Z+
    7302:	6f 01       	movw	r12, r30
    7304:	0e 94 8e 38 	call	0x711c	; 0x711c <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7308:	ce 14       	cp	r12, r14
    730a:	df 04       	cpc	r13, r15
    730c:	a9 f7       	brne	.-22     	; 0x72f8 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    730e:	80 e0       	ldi	r24, 0x00	; 0
    7310:	05 c0       	rjmp	.+10     	; 0x731c <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7312:	84 e0       	ldi	r24, 0x04	; 4
    7314:	03 c0       	rjmp	.+6      	; 0x731c <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7316:	81 e0       	ldi	r24, 0x01	; 1
    7318:	01 c0       	rjmp	.+2      	; 0x731c <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    731a:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    731c:	0f 90       	pop	r0
    731e:	df 91       	pop	r29
    7320:	cf 91       	pop	r28
    7322:	1f 91       	pop	r17
    7324:	0f 91       	pop	r16
    7326:	ff 90       	pop	r15
    7328:	ef 90       	pop	r14
    732a:	df 90       	pop	r13
    732c:	cf 90       	pop	r12
    732e:	08 95       	ret

00007330 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    7330:	df 92       	push	r13
    7332:	ef 92       	push	r14
    7334:	ff 92       	push	r15
    7336:	0f 93       	push	r16
    7338:	1f 93       	push	r17
    733a:	cf 93       	push	r28
    733c:	df 93       	push	r29
    733e:	7c 01       	movw	r14, r24
    7340:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7342:	0e 94 14 39 	call	0x7228	; 0x7228 <isEepromFormatted>
    7346:	88 23       	and	r24, r24
    7348:	89 f1       	breq	.+98     	; 0x73ac <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    734a:	8f ef       	ldi	r24, 0xFF	; 255
    734c:	e8 16       	cp	r14, r24
    734e:	f8 06       	cpc	r15, r24
    7350:	79 f1       	breq	.+94     	; 0x73b0 <EepromReadBlock+0x80>
    7352:	00 e0       	ldi	r16, 0x00	; 0
    7354:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7356:	c8 01       	movw	r24, r16
    7358:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    735c:	d8 2e       	mov	r13, r24
    735e:	c8 01       	movw	r24, r16
    7360:	01 96       	adiw	r24, 0x01	; 1
    7362:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    7366:	28 2f       	mov	r18, r24
    7368:	30 e0       	ldi	r19, 0x00	; 0
    736a:	32 2f       	mov	r19, r18
    736c:	22 27       	eor	r18, r18
    736e:	2d 0d       	add	r18, r13
    7370:	31 1d       	adc	r19, r1
		if(id==blockId){
    7372:	2e 15       	cp	r18, r14
    7374:	3f 05       	cpc	r19, r15
    7376:	39 f4       	brne	.+14     	; 0x7386 <EepromReadBlock+0x56>
    7378:	7e 01       	movw	r14, r28
    737a:	80 e2       	ldi	r24, 0x20	; 32
    737c:	e8 0e       	add	r14, r24
    737e:	f1 1c       	adc	r15, r1
    7380:	0c 1b       	sub	r16, r28
    7382:	1d 0b       	sbc	r17, r29
    7384:	08 c0       	rjmp	.+16     	; 0x7396 <EepromReadBlock+0x66>
    7386:	00 5e       	subi	r16, 0xE0	; 224
    7388:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    738a:	01 15       	cp	r16, r1
    738c:	84 e0       	ldi	r24, 0x04	; 4
    738e:	18 07       	cpc	r17, r24
    7390:	11 f7       	brne	.-60     	; 0x7356 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7392:	83 e0       	ldi	r24, 0x03	; 3
    7394:	0e c0       	rjmp	.+28     	; 0x73b2 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7396:	ce 01       	movw	r24, r28
    7398:	80 0f       	add	r24, r16
    739a:	91 1f       	adc	r25, r17
    739c:	0e 94 98 38 	call	0x7130	; 0x7130 <ReadEeprom>
    73a0:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    73a2:	ce 15       	cp	r28, r14
    73a4:	df 05       	cpc	r29, r15
    73a6:	b9 f7       	brne	.-18     	; 0x7396 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    73a8:	80 e0       	ldi	r24, 0x00	; 0
    73aa:	03 c0       	rjmp	.+6      	; 0x73b2 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    73ac:	84 e0       	ldi	r24, 0x04	; 4
    73ae:	01 c0       	rjmp	.+2      	; 0x73b2 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    73b0:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    73b2:	df 91       	pop	r29
    73b4:	cf 91       	pop	r28
    73b6:	1f 91       	pop	r17
    73b8:	0f 91       	pop	r16
    73ba:	ff 90       	pop	r15
    73bc:	ef 90       	pop	r14
    73be:	df 90       	pop	r13
    73c0:	08 95       	ret

000073c2 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    73c2:	fc 01       	movw	r30, r24
    73c4:	45 87       	std	Z+13, r20	; 0x0d
    73c6:	08 95       	ret

000073c8 <PatchCommand01>:
}
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
    73c8:	08 95       	ret

000073ca <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    73ca:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    73cc:	90 81       	ld	r25, Z
    73ce:	9f 75       	andi	r25, 0x5F	; 95
    73d0:	90 83       	st	Z, r25
    73d2:	08 95       	ret

000073d4 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    73d4:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    73d6:	90 81       	ld	r25, Z
    73d8:	90 64       	ori	r25, 0x40	; 64
    73da:	90 83       	st	Z, r25
    73dc:	08 95       	ret

000073de <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    73de:	fc 01       	movw	r30, r24
    73e0:	44 87       	std	Z+12, r20	; 0x0c
    73e2:	08 95       	ret

000073e4 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    73e4:	fc 01       	movw	r30, r24
    73e6:	47 83       	std	Z+7, r20	; 0x07
    73e8:	08 95       	ret

000073ea <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    73ea:	fc 01       	movw	r30, r24
    73ec:	40 87       	std	Z+8, r20	; 0x08
    73ee:	08 95       	ret

000073f0 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    73f0:	1f 93       	push	r17
    73f2:	cf 93       	push	r28
    73f4:	df 93       	push	r29
    73f6:	ec 01       	movw	r28, r24
    73f8:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    73fa:	29 81       	ldd	r18, Y+1	; 0x01
    73fc:	30 e0       	ldi	r19, 0x00	; 0
    73fe:	f9 01       	movw	r30, r18
    7400:	ee 0f       	add	r30, r30
    7402:	ff 1f       	adc	r31, r31
    7404:	e8 5f       	subi	r30, 0xF8	; 248
    7406:	f3 48       	sbci	r31, 0x83	; 131
    7408:	65 91       	lpm	r22, Z+
    740a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    740c:	f9 01       	movw	r30, r18
    740e:	e4 0f       	add	r30, r20
    7410:	f1 1d       	adc	r31, r1
    7412:	47 fd       	sbrc	r20, 7
    7414:	fa 95       	dec	r31
    7416:	ee 0f       	add	r30, r30
    7418:	ff 1f       	adc	r31, r31
    741a:	e8 5f       	subi	r30, 0xF8	; 248
    741c:	f3 48       	sbci	r31, 0x83	; 131
    741e:	85 91       	lpm	r24, Z+
    7420:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    7422:	86 1b       	sub	r24, r22
    7424:	97 0b       	sbc	r25, r23
    7426:	60 91 4c 0b 	lds	r22, 0x0B4C
    742a:	70 e0       	ldi	r23, 0x00	; 0
    742c:	0e 94 0f 4d 	call	0x9a1e	; 0x9a1e <__divmodhi4>
	if(delta==0)delta++;
    7430:	61 15       	cp	r22, r1
    7432:	71 05       	cpc	r23, r1
    7434:	11 f4       	brne	.+4      	; 0x743a <PatchCommand11+0x4a>
    7436:	61 e0       	ldi	r22, 0x01	; 1
    7438:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    743a:	86 e0       	ldi	r24, 0x06	; 6
    743c:	18 9f       	mul	r17, r24
    743e:	f0 01       	movw	r30, r0
    7440:	11 24       	eor	r1, r1
    7442:	ee 5e       	subi	r30, 0xEE	; 238
    7444:	f4 4f       	sbci	r31, 0xF4	; 244
    7446:	81 81       	ldd	r24, Z+1	; 0x01
    7448:	92 81       	ldd	r25, Z+2	; 0x02
    744a:	86 0f       	add	r24, r22
    744c:	97 1f       	adc	r25, r23
    744e:	92 83       	std	Z+2, r25	; 0x02
    7450:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7452:	7b 83       	std	Y+3, r23	; 0x03
    7454:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    7456:	88 81       	ld	r24, Y
    7458:	88 60       	ori	r24, 0x08	; 8
    745a:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    745c:	89 81       	ldd	r24, Y+1	; 0x01
    745e:	48 0f       	add	r20, r24
    7460:	4c 83       	std	Y+4, r20	; 0x04
}
    7462:	df 91       	pop	r29
    7464:	cf 91       	pop	r28
    7466:	1f 91       	pop	r17
    7468:	08 95       	ret

0000746a <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    746a:	40 93 4c 0b 	sts	0x0B4C, r20
    746e:	08 95       	ret

00007470 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7470:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7472:	64 2f       	mov	r22, r20
    7474:	0c 94 c3 3d 	jmp	0x7b86	; 0x7b86 <SetMixerWave>

00007478 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    7478:	fc 01       	movw	r30, r24
    747a:	86 2f       	mov	r24, r22
	track->note+=param;
    747c:	91 81       	ldd	r25, Z+1	; 0x01
    747e:	64 2f       	mov	r22, r20
    7480:	69 0f       	add	r22, r25
    7482:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7484:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <SetMixerNote>

00007488 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    7488:	fc 01       	movw	r30, r24
    748a:	86 2f       	mov	r24, r22
	track->note-=param;
    748c:	91 81       	ldd	r25, Z+1	; 0x01
    748e:	69 2f       	mov	r22, r25
    7490:	64 1b       	sub	r22, r20
    7492:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7494:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <SetMixerNote>

00007498 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    7498:	0f 93       	push	r16
    749a:	1f 93       	push	r17
    749c:	cf 93       	push	r28
    749e:	df 93       	push	r29
    74a0:	1f 92       	push	r1
    74a2:	cd b7       	in	r28, 0x3d	; 61
    74a4:	de b7       	in	r29, 0x3e	; 62
    74a6:	8c 01       	movw	r16, r24
    74a8:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    74aa:	64 2f       	mov	r22, r20
    74ac:	49 83       	std	Y+1, r20	; 0x01
    74ae:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <SetMixerNote>
	track->note=param;
    74b2:	49 81       	ldd	r20, Y+1	; 0x01
    74b4:	f8 01       	movw	r30, r16
    74b6:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    74b8:	80 81       	ld	r24, Z
    74ba:	87 7f       	andi	r24, 0xF7	; 247
    74bc:	80 83       	st	Z, r24
}
    74be:	0f 90       	pop	r0
    74c0:	df 91       	pop	r29
    74c2:	cf 91       	pop	r28
    74c4:	1f 91       	pop	r17
    74c6:	0f 91       	pop	r16
    74c8:	08 95       	ret

000074ca <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    74ca:	90 93 a2 0b 	sts	0x0BA2, r25
    74ce:	80 93 a1 0b 	sts	0x0BA1, r24

	masterVolume=DEFAULT_MASTER_VOL;
    74d2:	8f e6       	ldi	r24, 0x6F	; 111
    74d4:	80 93 a4 0b 	sts	0x0BA4, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    74d8:	10 92 00 09 	sts	0x0900, r1
    74dc:	e5 e5       	ldi	r30, 0x55	; 85
    74de:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    74e0:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    74e2:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    74e4:	28 e1       	ldi	r18, 0x18	; 24
    74e6:	df 01       	movw	r26, r30
    74e8:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    74ea:	8c 93       	st	X, r24
    74ec:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    74ee:	1c 92       	st	X, r1
    74f0:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    74f2:	9c 93       	st	X, r25
    74f4:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    74f6:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    74f8:	10 82       	st	Z, r1
    74fa:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    74fc:	2c 93       	st	X, r18
    74fe:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7500:	8c 93       	st	X, r24
    7502:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7504:	3b e0       	ldi	r19, 0x0B	; 11
    7506:	ed 3a       	cpi	r30, 0xAD	; 173
    7508:	f3 07       	cpc	r31, r19
    750a:	69 f7       	brne	.-38     	; 0x74e6 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    750c:	08 95       	ret

0000750e <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    750e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7510:	ed 91       	ld	r30, X+
    7512:	fc 91       	ld	r31, X
    7514:	11 97       	sbiw	r26, 0x01	; 1
    7516:	9f 01       	movw	r18, r30
    7518:	2f 5f       	subi	r18, 0xFF	; 255
    751a:	3f 4f       	sbci	r19, 0xFF	; 255
    751c:	11 96       	adiw	r26, 0x01	; 1
    751e:	3c 93       	st	X, r19
    7520:	2e 93       	st	-X, r18
    7522:	e4 91       	lpm	r30, Z
    7524:	e7 fd       	sbrc	r30, 7
    7526:	03 c0       	rjmp	.+6      	; 0x752e <ReadVarLen+0x20>
    7528:	8e 2f       	mov	r24, r30
    752a:	90 e0       	ldi	r25, 0x00	; 0
    752c:	08 95       	ret
    {
       value &= 0x7F;
    752e:	ef 77       	andi	r30, 0x7F	; 127
    7530:	8e 2f       	mov	r24, r30
    7532:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7534:	96 95       	lsr	r25
    7536:	98 2f       	mov	r25, r24
    7538:	88 27       	eor	r24, r24
    753a:	97 95       	ror	r25
    753c:	87 95       	ror	r24
    753e:	2f 5f       	subi	r18, 0xFF	; 255
    7540:	3f 4f       	sbci	r19, 0xFF	; 255
    7542:	f9 01       	movw	r30, r18
    7544:	31 97       	sbiw	r30, 0x01	; 1
    7546:	e4 91       	lpm	r30, Z
    7548:	4e 2f       	mov	r20, r30
    754a:	4f 77       	andi	r20, 0x7F	; 127
    754c:	84 0f       	add	r24, r20
    754e:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7550:	e7 fd       	sbrc	r30, 7
    7552:	f0 cf       	rjmp	.-32     	; 0x7534 <ReadVarLen+0x26>
    7554:	2d 93       	st	X+, r18
    7556:	3c 93       	st	X, r19
    }


    return value;
}
    7558:	08 95       	ret

0000755a <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    755a:	8f 92       	push	r8
    755c:	9f 92       	push	r9
    755e:	af 92       	push	r10
    7560:	bf 92       	push	r11
    7562:	df 92       	push	r13
    7564:	ef 92       	push	r14
    7566:	ff 92       	push	r15
    7568:	0f 93       	push	r16
    756a:	1f 93       	push	r17
    756c:	cf 93       	push	r28
    756e:	df 93       	push	r29
    7570:	1f 92       	push	r1
    7572:	cd b7       	in	r28, 0x3d	; 61
    7574:	de b7       	in	r29, 0x3e	; 62
    7576:	f8 2e       	mov	r15, r24
    7578:	e6 2e       	mov	r14, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    757a:	88 2e       	mov	r8, r24
    757c:	91 2c       	mov	r9, r1
    757e:	86 e1       	ldi	r24, 0x16	; 22
    7580:	f8 9e       	mul	r15, r24
    7582:	f0 01       	movw	r30, r0
    7584:	11 24       	eor	r1, r1
    7586:	e9 5b       	subi	r30, 0xB9	; 185
    7588:	f4 4f       	sbci	r31, 0xF4	; 244
    758a:	80 81       	ld	r24, Z
    758c:	98 2f       	mov	r25, r24
    758e:	90 78       	andi	r25, 0x80	; 128
    7590:	d9 2e       	mov	r13, r25

	track->patchCurrDeltaTime=0;
    7592:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    7594:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7596:	9f ef       	ldi	r25, 0xFF	; 255
    7598:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    759a:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    759c:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    759e:	87 7b       	andi	r24, 0xB7	; 183
    75a0:	80 62       	ori	r24, 0x20	; 32
    75a2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    75a4:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    75a6:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    75a8:	21 83       	std	Z+1, r18	; 0x01
    75aa:	e9 e0       	ldi	r30, 0x09	; 9
    75ac:	6e 9f       	mul	r22, r30
    75ae:	80 01       	movw	r16, r0
    75b0:	11 24       	eor	r1, r1
				SetMixerNote(channel,note);
				SetMixerWave(channel,0);
			}
		#else
			//if it's a PCM channel
			if(channel==3){
    75b2:	f3 e0       	ldi	r31, 0x03	; 3
    75b4:	ff 12       	cpse	r15, r31
    75b6:	2a c0       	rjmp	.+84     	; 0x760c <TriggerCommon+0xb2>
				mixer.channels.type.pcm.positionFrac=0;
    75b8:	10 92 27 0b 	sts	0x0B27, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    75bc:	40 91 a1 0b 	lds	r20, 0x0BA1
    75c0:	50 91 a2 0b 	lds	r21, 0x0BA2
    75c4:	40 0f       	add	r20, r16
    75c6:	51 1f       	adc	r21, r17
    75c8:	fa 01       	movw	r30, r20
    75ca:	31 96       	adiw	r30, 0x01	; 1
    75cc:	a5 90       	lpm	r10, Z+
    75ce:	b4 90       	lpm	r11, Z
				mixer.channels.type.pcm.position=pos;
    75d0:	b0 92 29 0b 	sts	0x0B29, r11
    75d4:	a0 92 28 0b 	sts	0x0B28, r10
				//mixer.pcmLoopStart=pos+pgm_read_word(&(patchPointers[patch].loopStart));
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    75d8:	da 01       	movw	r26, r20
    75da:	17 96       	adiw	r26, 0x07	; 7
    75dc:	fd 01       	movw	r30, r26
    75de:	85 91       	lpm	r24, Z+
    75e0:	94 91       	lpm	r25, Z
    75e2:	4b 5f       	subi	r20, 0xFB	; 251
    75e4:	5f 4f       	sbci	r21, 0xFF	; 255
    75e6:	fa 01       	movw	r30, r20
    75e8:	65 91       	lpm	r22, Z+
    75ea:	74 91       	lpm	r23, Z
    75ec:	86 1b       	sub	r24, r22
    75ee:	97 0b       	sbc	r25, r23
    75f0:	90 93 2b 0b 	sts	0x0B2B, r25
    75f4:	80 93 2a 0b 	sts	0x0B2A, r24
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    75f8:	fd 01       	movw	r30, r26
    75fa:	85 91       	lpm	r24, Z+
    75fc:	94 91       	lpm	r25, Z
    75fe:	a8 0e       	add	r10, r24
    7600:	b9 1e       	adc	r11, r25
    7602:	b0 92 2d 0b 	sts	0x0B2D, r11
    7606:	a0 92 2c 0b 	sts	0x0B2C, r10
    760a:	06 c0       	rjmp	.+12     	; 0x7618 <TriggerCommon+0xbe>
			}else{
				SetMixerWave(channel,0);
    760c:	60 e0       	ldi	r22, 0x00	; 0
    760e:	8f 2d       	mov	r24, r15
    7610:	29 83       	std	Y+1, r18	; 0x01
    7612:	0e 94 c3 3d 	call	0x7b86	; 0x7b86 <SetMixerWave>
    7616:	29 81       	ldd	r18, Y+1	; 0x01
			}

			SetMixerNote(channel,note);
    7618:	62 2f       	mov	r22, r18
    761a:	8f 2d       	mov	r24, r15
    761c:	0e 94 af 3d 	call	0x7b5e	; 0x7b5e <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7620:	86 e1       	ldi	r24, 0x16	; 22
    7622:	88 9d       	mul	r24, r8
    7624:	f0 01       	movw	r30, r0
    7626:	89 9d       	mul	r24, r9
    7628:	f0 0d       	add	r31, r0
    762a:	11 24       	eor	r1, r1
    762c:	e9 5b       	subi	r30, 0xB9	; 185
    762e:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7630:	dd 20       	and	r13, r13
    7632:	11 f0       	breq	.+4      	; 0x7638 <TriggerCommon+0xde>
		track->fxPatchNo=patch;
    7634:	e7 86       	std	Z+15, r14	; 0x0f
    7636:	01 c0       	rjmp	.+2      	; 0x763a <TriggerCommon+0xe0>
	}else{
		track->patchNo=patch;	
    7638:	e6 86       	std	Z+14, r14	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    763a:	e0 91 a1 0b 	lds	r30, 0x0BA1
    763e:	f0 91 a2 0b 	lds	r31, 0x0BA2
    7642:	e0 0f       	add	r30, r16
    7644:	f1 1f       	adc	r31, r17
    7646:	33 96       	adiw	r30, 0x03	; 3
    7648:	85 91       	lpm	r24, Z+
    764a:	94 91       	lpm	r25, Z
	if(pos==NULL){
    764c:	00 97       	sbiw	r24, 0x00	; 0
    764e:	59 f4       	brne	.+22     	; 0x7666 <TriggerCommon+0x10c>
		track->patchCommandStreamPos=NULL;
    7650:	86 e1       	ldi	r24, 0x16	; 22
    7652:	88 9d       	mul	r24, r8
    7654:	f0 01       	movw	r30, r0
    7656:	89 9d       	mul	r24, r9
    7658:	f0 0d       	add	r31, r0
    765a:	11 24       	eor	r1, r1
    765c:	e9 5b       	subi	r30, 0xB9	; 185
    765e:	f4 4f       	sbci	r31, 0xF4	; 244
    7660:	15 8a       	std	Z+21, r1	; 0x15
    7662:	14 8a       	std	Z+20, r1	; 0x14
    7664:	0e c0       	rjmp	.+28     	; 0x7682 <TriggerCommon+0x128>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7666:	fc 01       	movw	r30, r24
    7668:	24 91       	lpm	r18, Z
    766a:	36 e1       	ldi	r19, 0x16	; 22
    766c:	38 9d       	mul	r19, r8
    766e:	f0 01       	movw	r30, r0
    7670:	39 9d       	mul	r19, r9
    7672:	f0 0d       	add	r31, r0
    7674:	11 24       	eor	r1, r1
    7676:	e9 5b       	subi	r30, 0xB9	; 185
    7678:	f4 4f       	sbci	r31, 0xF4	; 244
    767a:	21 8b       	std	Z+17, r18	; 0x11
    767c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    767e:	95 8b       	std	Z+21, r25	; 0x15
    7680:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7682:	0f 90       	pop	r0
    7684:	df 91       	pop	r29
    7686:	cf 91       	pop	r28
    7688:	1f 91       	pop	r17
    768a:	0f 91       	pop	r16
    768c:	ff 90       	pop	r15
    768e:	ef 90       	pop	r14
    7690:	df 90       	pop	r13
    7692:	bf 90       	pop	r11
    7694:	af 90       	pop	r10
    7696:	9f 90       	pop	r9
    7698:	8f 90       	pop	r8
    769a:	08 95       	ret

0000769c <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    769c:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    769e:	a8 2f       	mov	r26, r24
    76a0:	b0 e0       	ldi	r27, 0x00	; 0
    76a2:	96 e1       	ldi	r25, 0x16	; 22
    76a4:	89 9f       	mul	r24, r25
    76a6:	f0 01       	movw	r30, r0
    76a8:	11 24       	eor	r1, r1
    76aa:	e9 5b       	subi	r30, 0xB9	; 185
    76ac:	f4 4f       	sbci	r31, 0xF4	; 244
    76ae:	90 81       	ld	r25, Z
    76b0:	95 ff       	sbrs	r25, 5
    76b2:	02 c0       	rjmp	.+4      	; 0x76b8 <TriggerNote+0x1c>
    76b4:	97 fd       	sbrc	r25, 7
    76b6:	28 c0       	rjmp	.+80     	; 0x7708 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    76b8:	31 11       	cpse	r19, r1
    76ba:	18 c0       	rjmp	.+48     	; 0x76ec <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    76bc:	86 e1       	ldi	r24, 0x16	; 22
    76be:	8a 9f       	mul	r24, r26
    76c0:	f0 01       	movw	r30, r0
    76c2:	8b 9f       	mul	r24, r27
    76c4:	f0 0d       	add	r31, r0
    76c6:	11 24       	eor	r1, r1
    76c8:	e9 5b       	subi	r30, 0xB9	; 185
    76ca:	f4 4f       	sbci	r31, 0xF4	; 244
    76cc:	85 85       	ldd	r24, Z+13	; 0x0d
    76ce:	81 11       	cpse	r24, r1
    76d0:	02 c0       	rjmp	.+4      	; 0x76d6 <TriggerNote+0x3a>
    76d2:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    76d4:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    76d6:	86 e1       	ldi	r24, 0x16	; 22
    76d8:	8a 9f       	mul	r24, r26
    76da:	f0 01       	movw	r30, r0
    76dc:	8b 9f       	mul	r24, r27
    76de:	f0 0d       	add	r31, r0
    76e0:	11 24       	eor	r1, r1
    76e2:	e9 5b       	subi	r30, 0xB9	; 185
    76e4:	f4 4f       	sbci	r31, 0xF4	; 244
    76e6:	9f 7b       	andi	r25, 0xBF	; 191
    76e8:	90 83       	st	Z, r25
    76ea:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    76ec:	26 e1       	ldi	r18, 0x16	; 22
    76ee:	2a 9f       	mul	r18, r26
    76f0:	f0 01       	movw	r30, r0
    76f2:	2b 9f       	mul	r18, r27
    76f4:	f0 0d       	add	r31, r0
    76f6:	11 24       	eor	r1, r1
    76f8:	e9 5b       	subi	r30, 0xB9	; 185
    76fa:	f4 4f       	sbci	r31, 0xF4	; 244
    76fc:	9f 77       	andi	r25, 0x7F	; 127
    76fe:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    7700:	24 2f       	mov	r18, r20
    7702:	43 2f       	mov	r20, r19
    7704:	0c 94 ad 3a 	jmp	0x755a	; 0x755a <TriggerCommon>
    7708:	08 95       	ret

0000770a <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    770a:	5f 92       	push	r5
    770c:	6f 92       	push	r6
    770e:	7f 92       	push	r7
    7710:	8f 92       	push	r8
    7712:	9f 92       	push	r9
    7714:	af 92       	push	r10
    7716:	bf 92       	push	r11
    7718:	cf 92       	push	r12
    771a:	df 92       	push	r13
    771c:	ef 92       	push	r14
    771e:	ff 92       	push	r15
    7720:	0f 93       	push	r16
    7722:	1f 93       	push	r17
    7724:	cf 93       	push	r28
    7726:	df 93       	push	r29
    7728:	c7 e4       	ldi	r28, 0x47	; 71
    772a:	db e0       	ldi	r29, 0x0B	; 11
    772c:	82 e1       	ldi	r24, 0x12	; 18
    772e:	e8 2e       	mov	r14, r24
    7730:	8b e0       	ldi	r24, 0x0B	; 11
    7732:	f8 2e       	mov	r15, r24
    7734:	d7 01       	movw	r26, r14
    7736:	9e 01       	movw	r18, r28
    7738:	40 e0       	ldi	r20, 0x00	; 0
    773a:	50 e0       	ldi	r21, 0x00	; 0
    773c:	ca 01       	movw	r24, r20
    773e:	89 5b       	subi	r24, 0xB9	; 185
    7740:	94 4f       	sbci	r25, 0xF4	; 244
    7742:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7744:	fc 01       	movw	r30, r24
    7746:	85 85       	ldd	r24, Z+13	; 0x0d
    7748:	88 23       	and	r24, r24
    774a:	91 f0       	breq	.+36     	; 0x7770 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    774c:	64 85       	ldd	r22, Z+12	; 0x0c
    774e:	99 27       	eor	r25, r25
    7750:	87 fd       	sbrc	r24, 7
    7752:	90 95       	com	r25
    7754:	86 0f       	add	r24, r22
    7756:	91 1d       	adc	r25, r1
    7758:	8f 3f       	cpi	r24, 0xFF	; 255
    775a:	91 05       	cpc	r25, r1
    775c:	19 f0       	breq	.+6      	; 0x7764 <ProcessMusic+0x5a>
    775e:	14 f0       	brlt	.+4      	; 0x7764 <ProcessMusic+0x5a>
    7760:	8f ef       	ldi	r24, 0xFF	; 255
    7762:	90 e0       	ldi	r25, 0x00	; 0
    7764:	97 ff       	sbrs	r25, 7
    7766:	02 c0       	rjmp	.+4      	; 0x776c <ProcessMusic+0x62>
    7768:	80 e0       	ldi	r24, 0x00	; 0
    776a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    776c:	f6 01       	movw	r30, r12
    776e:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7770:	f9 01       	movw	r30, r18
    7772:	10 81       	ld	r17, Z
    7774:	13 ff       	sbrs	r17, 3
    7776:	29 c0       	rjmp	.+82     	; 0x77ca <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7778:	62 81       	ldd	r22, Z+2	; 0x02
    777a:	73 81       	ldd	r23, Z+3	; 0x03
    777c:	11 96       	adiw	r26, 0x01	; 1
    777e:	8d 91       	ld	r24, X+
    7780:	9c 91       	ld	r25, X
    7782:	12 97       	sbiw	r26, 0x02	; 2
    7784:	86 0f       	add	r24, r22
    7786:	97 1f       	adc	r25, r23
    7788:	12 96       	adiw	r26, 0x02	; 2
    778a:	9c 93       	st	X, r25
    778c:	8e 93       	st	-X, r24
    778e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7790:	f6 01       	movw	r30, r12
    7792:	04 81       	ldd	r16, Z+4	; 0x04
    7794:	e0 2f       	mov	r30, r16
    7796:	f0 e0       	ldi	r31, 0x00	; 0
    7798:	ee 0f       	add	r30, r30
    779a:	ff 1f       	adc	r31, r31
    779c:	e8 5f       	subi	r30, 0xF8	; 248
    779e:	f3 48       	sbci	r31, 0x83	; 131
    77a0:	c5 90       	lpm	r12, Z+
    77a2:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    77a4:	16 16       	cp	r1, r22
    77a6:	17 06       	cpc	r1, r23
    77a8:	24 f4       	brge	.+8      	; 0x77b2 <ProcessMusic+0xa8>
    77aa:	8c 15       	cp	r24, r12
    77ac:	9d 05       	cpc	r25, r13
    77ae:	30 f4       	brcc	.+12     	; 0x77bc <ProcessMusic+0xb2>
    77b0:	0c c0       	rjmp	.+24     	; 0x77ca <ProcessMusic+0xc0>
    77b2:	67 2b       	or	r22, r23
    77b4:	51 f0       	breq	.+20     	; 0x77ca <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    77b6:	c8 16       	cp	r12, r24
    77b8:	d9 06       	cpc	r13, r25
    77ba:	38 f0       	brcs	.+14     	; 0x77ca <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    77bc:	12 96       	adiw	r26, 0x02	; 2
    77be:	dc 92       	st	X, r13
    77c0:	ce 92       	st	-X, r12
    77c2:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    77c4:	17 7f       	andi	r17, 0xF7	; 247
    77c6:	f9 01       	movw	r30, r18
    77c8:	10 83       	st	Z, r17
    77ca:	4a 5e       	subi	r20, 0xEA	; 234
    77cc:	5f 4f       	sbci	r21, 0xFF	; 255
    77ce:	2a 5e       	subi	r18, 0xEA	; 234
    77d0:	3f 4f       	sbci	r19, 0xFF	; 255
    77d2:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    77d4:	48 35       	cpi	r20, 0x58	; 88
    77d6:	51 05       	cpc	r21, r1
    77d8:	09 f0       	breq	.+2      	; 0x77dc <ProcessMusic+0xd2>
    77da:	b0 cf       	rjmp	.-160    	; 0x773c <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    77dc:	80 91 00 09 	lds	r24, 0x0900
    77e0:	88 23       	and	r24, r24
    77e2:	09 f4       	brne	.+2      	; 0x77e6 <ProcessMusic+0xdc>
    77e4:	cb c0       	rjmp	.+406    	; 0x797c <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    77e6:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    77e8:	80 91 9f 0b 	lds	r24, 0x0B9F
    77ec:	90 91 a0 0b 	lds	r25, 0x0BA0
    77f0:	20 91 a5 0b 	lds	r18, 0x0BA5
    77f4:	30 91 a6 0b 	lds	r19, 0x0BA6
    77f8:	82 17       	cp	r24, r18
    77fa:	93 07       	cpc	r25, r19
    77fc:	09 f0       	breq	.+2      	; 0x7800 <ProcessMusic+0xf6>
    77fe:	b9 c0       	rjmp	.+370    	; 0x7972 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    7800:	20 91 a8 0b 	lds	r18, 0x0BA8
    7804:	30 91 a9 0b 	lds	r19, 0x0BA9
    7808:	b9 01       	movw	r22, r18
    780a:	6f 5f       	subi	r22, 0xFF	; 255
    780c:	7f 4f       	sbci	r23, 0xFF	; 255
    780e:	70 93 a9 0b 	sts	0x0BA9, r23
    7812:	60 93 a8 0b 	sts	0x0BA8, r22
    7816:	f9 01       	movw	r30, r18
    7818:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    781a:	4f 3f       	cpi	r20, 0xFF	; 255
    781c:	79 f5       	brne	.+94     	; 0x787c <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    781e:	a9 01       	movw	r20, r18
    7820:	4e 5f       	subi	r20, 0xFE	; 254
    7822:	5f 4f       	sbci	r21, 0xFF	; 255
    7824:	50 93 a9 0b 	sts	0x0BA9, r21
    7828:	40 93 a8 0b 	sts	0x0BA8, r20
    782c:	fb 01       	movw	r30, r22
    782e:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7830:	6f 32       	cpi	r22, 0x2F	; 47
    7832:	19 f4       	brne	.+6      	; 0x783a <ProcessMusic+0x130>
						playSong=false;
    7834:	10 92 00 09 	sts	0x0900, r1
						break;	
    7838:	9c c0       	rjmp	.+312    	; 0x7972 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    783a:	66 30       	cpi	r22, 0x06	; 6
    783c:	09 f0       	breq	.+2      	; 0x7840 <ProcessMusic+0x136>
    783e:	8c c0       	rjmp	.+280    	; 0x7958 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    7840:	fa 01       	movw	r30, r20
    7842:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7844:	c9 01       	movw	r24, r18
    7846:	04 96       	adiw	r24, 0x04	; 4
    7848:	90 93 a9 0b 	sts	0x0BA9, r25
    784c:	80 93 a8 0b 	sts	0x0BA8, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7850:	f9 01       	movw	r30, r18
    7852:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7854:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7856:	e3 35       	cpi	r30, 0x53	; 83
    7858:	29 f4       	brne	.+10     	; 0x7864 <ProcessMusic+0x15a>
							loopStart=songPos;
    785a:	90 93 ab 0b 	sts	0x0BAB, r25
    785e:	80 93 aa 0b 	sts	0x0BAA, r24
    7862:	7a c0       	rjmp	.+244    	; 0x7958 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    7864:	e5 34       	cpi	r30, 0x45	; 69
    7866:	09 f0       	breq	.+2      	; 0x786a <ProcessMusic+0x160>
    7868:	77 c0       	rjmp	.+238    	; 0x7958 <ProcessMusic+0x24e>
							songPos=loopStart;
    786a:	80 91 aa 0b 	lds	r24, 0x0BAA
    786e:	90 91 ab 0b 	lds	r25, 0x0BAB
    7872:	90 93 a9 0b 	sts	0x0BA9, r25
    7876:	80 93 a8 0b 	sts	0x0BA8, r24
    787a:	6e c0       	rjmp	.+220    	; 0x7958 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    787c:	47 fd       	sbrc	r20, 7
    787e:	40 93 a3 0b 	sts	0x0BA3, r20
					channel=lastStatus&0x0f;
    7882:	90 91 a3 0b 	lds	r25, 0x0BA3
    7886:	89 2f       	mov	r24, r25
    7888:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    788a:	47 ff       	sbrs	r20, 7
    788c:	08 c0       	rjmp	.+16     	; 0x789e <ProcessMusic+0x194>
    788e:	2e 5f       	subi	r18, 0xFE	; 254
    7890:	3f 4f       	sbci	r19, 0xFF	; 255
    7892:	30 93 a9 0b 	sts	0x0BA9, r19
    7896:	20 93 a8 0b 	sts	0x0BA8, r18
    789a:	fb 01       	movw	r30, r22
    789c:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    789e:	90 7f       	andi	r25, 0xF0	; 240
    78a0:	90 3b       	cpi	r25, 0xB0	; 176
    78a2:	e1 f0       	breq	.+56     	; 0x78dc <ProcessMusic+0x1d2>
    78a4:	90 3c       	cpi	r25, 0xC0	; 192
    78a6:	09 f4       	brne	.+2      	; 0x78aa <ProcessMusic+0x1a0>
    78a8:	51 c0       	rjmp	.+162    	; 0x794c <ProcessMusic+0x242>
    78aa:	90 39       	cpi	r25, 0x90	; 144
    78ac:	09 f0       	breq	.+2      	; 0x78b0 <ProcessMusic+0x1a6>
    78ae:	54 c0       	rjmp	.+168    	; 0x7958 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    78b0:	e0 91 a8 0b 	lds	r30, 0x0BA8
    78b4:	f0 91 a9 0b 	lds	r31, 0x0BA9
    78b8:	9f 01       	movw	r18, r30
    78ba:	2f 5f       	subi	r18, 0xFF	; 255
    78bc:	3f 4f       	sbci	r19, 0xFF	; 255
    78be:	30 93 a9 0b 	sts	0x0BA9, r19
    78c2:	20 93 a8 0b 	sts	0x0BA8, r18
    78c6:	24 91       	lpm	r18, Z
    78c8:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    78ca:	18 9f       	mul	r17, r24
    78cc:	f0 01       	movw	r30, r0
    78ce:	11 24       	eor	r1, r1
    78d0:	e9 5b       	subi	r30, 0xB9	; 185
    78d2:	f4 4f       	sbci	r31, 0xF4	; 244
    78d4:	66 85       	ldd	r22, Z+14	; 0x0e
    78d6:	0e 94 4e 3b 	call	0x769c	; 0x769c <TriggerNote>
    78da:	3e c0       	rjmp	.+124    	; 0x7958 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    78dc:	e0 91 a8 0b 	lds	r30, 0x0BA8
    78e0:	f0 91 a9 0b 	lds	r31, 0x0BA9
    78e4:	9f 01       	movw	r18, r30
    78e6:	2f 5f       	subi	r18, 0xFF	; 255
    78e8:	3f 4f       	sbci	r19, 0xFF	; 255
    78ea:	30 93 a9 0b 	sts	0x0BA9, r19
    78ee:	20 93 a8 0b 	sts	0x0BA8, r18
    78f2:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    78f4:	47 30       	cpi	r20, 0x07	; 7
    78f6:	49 f4       	brne	.+18     	; 0x790a <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    78f8:	18 9f       	mul	r17, r24
    78fa:	d0 01       	movw	r26, r0
    78fc:	11 24       	eor	r1, r1
    78fe:	a9 5b       	subi	r26, 0xB9	; 185
    7900:	b4 4f       	sbci	r27, 0xF4	; 244
    7902:	ee 0f       	add	r30, r30
    7904:	1a 96       	adiw	r26, 0x0a	; 10
    7906:	ec 93       	st	X, r30
    7908:	27 c0       	rjmp	.+78     	; 0x7958 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    790a:	4b 30       	cpi	r20, 0x0B	; 11
    790c:	49 f4       	brne	.+18     	; 0x7920 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    790e:	18 9f       	mul	r17, r24
    7910:	d0 01       	movw	r26, r0
    7912:	11 24       	eor	r1, r1
    7914:	a9 5b       	subi	r26, 0xB9	; 185
    7916:	b4 4f       	sbci	r27, 0xF4	; 244
    7918:	ee 0f       	add	r30, r30
    791a:	19 96       	adiw	r26, 0x09	; 9
    791c:	ec 93       	st	X, r30
    791e:	1c c0       	rjmp	.+56     	; 0x7958 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    7920:	4c 35       	cpi	r20, 0x5C	; 92
    7922:	49 f4       	brne	.+18     	; 0x7936 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    7924:	18 9f       	mul	r17, r24
    7926:	d0 01       	movw	r26, r0
    7928:	11 24       	eor	r1, r1
    792a:	a9 5b       	subi	r26, 0xB9	; 185
    792c:	b4 4f       	sbci	r27, 0xF4	; 244
    792e:	ee 0f       	add	r30, r30
    7930:	17 96       	adiw	r26, 0x07	; 7
    7932:	ec 93       	st	X, r30
    7934:	11 c0       	rjmp	.+34     	; 0x7958 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7936:	44 36       	cpi	r20, 0x64	; 100
    7938:	79 f4       	brne	.+30     	; 0x7958 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    793a:	18 9f       	mul	r17, r24
    793c:	d0 01       	movw	r26, r0
    793e:	11 24       	eor	r1, r1
    7940:	a9 5b       	subi	r26, 0xB9	; 185
    7942:	b4 4f       	sbci	r27, 0xF4	; 244
    7944:	ee 0f       	add	r30, r30
    7946:	18 96       	adiw	r26, 0x08	; 8
    7948:	ec 93       	st	X, r30
    794a:	06 c0       	rjmp	.+12     	; 0x7958 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    794c:	18 9f       	mul	r17, r24
    794e:	f0 01       	movw	r30, r0
    7950:	11 24       	eor	r1, r1
    7952:	e9 5b       	subi	r30, 0xB9	; 185
    7954:	f4 4f       	sbci	r31, 0xF4	; 244
    7956:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7958:	88 ea       	ldi	r24, 0xA8	; 168
    795a:	9b e0       	ldi	r25, 0x0B	; 11
    795c:	0e 94 87 3a 	call	0x750e	; 0x750e <ReadVarLen>
    7960:	90 93 a6 0b 	sts	0x0BA6, r25
    7964:	80 93 a5 0b 	sts	0x0BA5, r24
				currDeltaTime=0;
    7968:	10 92 a0 0b 	sts	0x0BA0, r1
    796c:	10 92 9f 0b 	sts	0x0B9F, r1
    7970:	3b cf       	rjmp	.-394    	; 0x77e8 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7972:	01 96       	adiw	r24, 0x01	; 1
    7974:	90 93 a0 0b 	sts	0x0BA0, r25
    7978:	80 93 9f 0b 	sts	0x0B9F, r24
    797c:	9d e4       	ldi	r25, 0x4D	; 77
    797e:	a9 2e       	mov	r10, r25
    7980:	9b e0       	ldi	r25, 0x0B	; 11
    7982:	b9 2e       	mov	r11, r25
    7984:	09 e5       	ldi	r16, 0x59	; 89
    7986:	1b e0       	ldi	r17, 0x0B	; 11
    7988:	28 e5       	ldi	r18, 0x58	; 88
    798a:	c2 2e       	mov	r12, r18
    798c:	2b e0       	ldi	r18, 0x0B	; 11
    798e:	d2 2e       	mov	r13, r18
    7990:	3a e5       	ldi	r19, 0x5A	; 90
    7992:	83 2e       	mov	r8, r19
    7994:	3b e0       	ldi	r19, 0x0B	; 11
    7996:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7998:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    799a:	66 24       	eor	r6, r6
    799c:	6a 94       	dec	r6
    799e:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    79a0:	88 81       	ld	r24, Y
    79a2:	86 fd       	sbrc	r24, 6
    79a4:	43 c0       	rjmp	.+134    	; 0x7a2c <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    79a6:	8c 89       	ldd	r24, Y+20	; 0x14
    79a8:	9d 89       	ldd	r25, Y+21	; 0x15
    79aa:	89 2b       	or	r24, r25
    79ac:	09 f4       	brne	.+2      	; 0x79b0 <ProcessMusic+0x2a6>
    79ae:	3a c0       	rjmp	.+116    	; 0x7a24 <ProcessMusic+0x31a>
    79b0:	d8 01       	movw	r26, r16
    79b2:	9c 91       	ld	r25, X
    79b4:	f6 01       	movw	r30, r12
    79b6:	80 81       	ld	r24, Z
    79b8:	98 17       	cp	r25, r24
    79ba:	08 f4       	brcc	.+2      	; 0x79be <ProcessMusic+0x2b4>
    79bc:	33 c0       	rjmp	.+102    	; 0x7a24 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    79be:	d8 01       	movw	r26, r16
    79c0:	9c 91       	ld	r25, X
    79c2:	f6 01       	movw	r30, r12
    79c4:	80 81       	ld	r24, Z
    79c6:	98 13       	cpse	r25, r24
    79c8:	2d c0       	rjmp	.+90     	; 0x7a24 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    79ca:	ec 89       	ldd	r30, Y+20	; 0x14
    79cc:	fd 89       	ldd	r31, Y+21	; 0x15
    79ce:	af 01       	movw	r20, r30
    79d0:	4f 5f       	subi	r20, 0xFF	; 255
    79d2:	5f 4f       	sbci	r21, 0xFF	; 255
    79d4:	5d 8b       	std	Y+21, r21	; 0x15
    79d6:	4c 8b       	std	Y+20, r20	; 0x14
    79d8:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    79da:	8f 3f       	cpi	r24, 0xFF	; 255
    79dc:	31 f4       	brne	.+12     	; 0x79ea <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    79de:	88 81       	ld	r24, Y
    79e0:	8f 77       	andi	r24, 0x7F	; 127
    79e2:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    79e4:	1d 8a       	std	Y+21, r1	; 0x15
    79e6:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    79e8:	1d c0       	rjmp	.+58     	; 0x7a24 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    79ea:	32 96       	adiw	r30, 0x02	; 2
    79ec:	fd 8b       	std	Y+21, r31	; 0x15
    79ee:	ec 8b       	std	Y+20, r30	; 0x14
    79f0:	fa 01       	movw	r30, r20
    79f2:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    79f4:	e8 2f       	mov	r30, r24
    79f6:	f0 e0       	ldi	r31, 0x00	; 0
    79f8:	ee 0f       	add	r30, r30
    79fa:	ff 1f       	adc	r31, r31
    79fc:	e0 53       	subi	r30, 0x30	; 48
    79fe:	ff 4f       	sbci	r31, 0xFF	; 255
    7a00:	25 91       	lpm	r18, Z+
    7a02:	34 91       	lpm	r19, Z
    7a04:	65 2d       	mov	r22, r5
    7a06:	ce 01       	movw	r24, r28
    7a08:	f9 01       	movw	r30, r18
    7a0a:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    7a0c:	ec 89       	ldd	r30, Y+20	; 0x14
    7a0e:	fd 89       	ldd	r31, Y+21	; 0x15
    7a10:	cf 01       	movw	r24, r30
    7a12:	01 96       	adiw	r24, 0x01	; 1
    7a14:	9d 8b       	std	Y+21, r25	; 0x15
    7a16:	8c 8b       	std	Y+20, r24	; 0x14
    7a18:	e4 91       	lpm	r30, Z
    7a1a:	d6 01       	movw	r26, r12
    7a1c:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    7a1e:	f8 01       	movw	r30, r16
    7a20:	10 82       	st	Z, r1
    7a22:	cd cf       	rjmp	.-102    	; 0x79be <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    7a24:	d8 01       	movw	r26, r16
    7a26:	8c 91       	ld	r24, X
    7a28:	8f 5f       	subi	r24, 0xFF	; 255
    7a2a:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    7a2c:	98 81       	ld	r25, Y
    7a2e:	95 ff       	sbrs	r25, 5
    7a30:	6c c0       	rjmp	.+216    	; 0x7b0a <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    7a32:	f4 01       	movw	r30, r8
    7a34:	80 81       	ld	r24, Z
    7a36:	8f 3f       	cpi	r24, 0xFF	; 255
    7a38:	11 f0       	breq	.+4      	; 0x7a3e <ProcessMusic+0x334>
				track->patchPlayingTime++;
    7a3a:	8f 5f       	subi	r24, 0xFF	; 255
    7a3c:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7a3e:	97 fd       	sbrc	r25, 7
    7a40:	04 c0       	rjmp	.+8      	; 0x7a4a <ProcessMusic+0x340>
    7a42:	f8 01       	movw	r30, r16
    7a44:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7a46:	90 81       	ld	r25, Z
    7a48:	01 c0       	rjmp	.+2      	; 0x7a4c <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7a4a:	9f ef       	ldi	r25, 0xFF	; 255
    7a4c:	f8 01       	movw	r30, r16
    7a4e:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7a50:	80 81       	ld	r24, Z
    7a52:	88 23       	and	r24, r24
    7a54:	09 f4       	brne	.+2      	; 0x7a58 <ProcessMusic+0x34e>
    7a56:	4e c0       	rjmp	.+156    	; 0x7af4 <ProcessMusic+0x3ea>
    7a58:	31 96       	adiw	r30, 0x01	; 1
    7a5a:	50 81       	ld	r21, Z
    7a5c:	55 23       	and	r21, r21
    7a5e:	09 f4       	brne	.+2      	; 0x7a62 <ProcessMusic+0x358>
    7a60:	49 c0       	rjmp	.+146    	; 0x7af4 <ProcessMusic+0x3ea>
    7a62:	99 23       	and	r25, r25
    7a64:	09 f4       	brne	.+2      	; 0x7a68 <ProcessMusic+0x35e>
    7a66:	46 c0       	rjmp	.+140    	; 0x7af4 <ProcessMusic+0x3ea>
    7a68:	40 91 a4 0b 	lds	r20, 0x0BA4
    7a6c:	44 23       	and	r20, r20
    7a6e:	09 f4       	brne	.+2      	; 0x7a72 <ProcessMusic+0x368>
    7a70:	41 c0       	rjmp	.+130    	; 0x7af4 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    7a72:	89 9f       	mul	r24, r25
    7a74:	c0 01       	movw	r24, r0
    7a76:	11 24       	eor	r1, r1
    7a78:	93 95       	inc	r25
				uVol>>=8;
    7a7a:	89 2f       	mov	r24, r25
    7a7c:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7a7e:	58 9f       	mul	r21, r24
    7a80:	90 01       	movw	r18, r0
    7a82:	59 9f       	mul	r21, r25
    7a84:	30 0d       	add	r19, r0
    7a86:	11 24       	eor	r1, r1
    7a88:	c9 01       	movw	r24, r18
    7a8a:	93 95       	inc	r25
				uVol>>=8;
    7a8c:	89 2f       	mov	r24, r25
    7a8e:	99 27       	eor	r25, r25
    7a90:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    7a92:	50 81       	ld	r21, Z
    7a94:	58 9f       	mul	r21, r24
    7a96:	90 01       	movw	r18, r0
    7a98:	59 9f       	mul	r21, r25
    7a9a:	30 0d       	add	r19, r0
    7a9c:	11 24       	eor	r1, r1
    7a9e:	33 95       	inc	r19
				uVol>>=8;
    7aa0:	23 2f       	mov	r18, r19
    7aa2:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7aa4:	42 9f       	mul	r20, r18
    7aa6:	c0 01       	movw	r24, r0
    7aa8:	43 9f       	mul	r20, r19
    7aaa:	90 0d       	add	r25, r0
    7aac:	11 24       	eor	r1, r1
    7aae:	93 95       	inc	r25
				uVol>>=8;
    7ab0:	89 2f       	mov	r24, r25
    7ab2:	99 27       	eor	r25, r25
    7ab4:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7ab6:	20 81       	ld	r18, Z
    7ab8:	22 23       	and	r18, r18
    7aba:	f1 f0       	breq	.+60     	; 0x7af8 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7abc:	d5 01       	movw	r26, r10
    7abe:	ec 91       	ld	r30, X
    7ac0:	f0 e0       	ldi	r31, 0x00	; 0
    7ac2:	e0 50       	subi	r30, 0x00	; 0
    7ac4:	f2 48       	sbci	r31, 0x82	; 130
    7ac6:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7ac8:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7aca:	2e 9f       	mul	r18, r30
    7acc:	f0 01       	movw	r30, r0
    7ace:	11 24       	eor	r1, r1
    7ad0:	f3 95       	inc	r31
					tVol>>=8;
    7ad2:	ef 2f       	mov	r30, r31
    7ad4:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7ad6:	a3 01       	movw	r20, r6
    7ad8:	4e 1b       	sub	r20, r30
    7ada:	5f 0b       	sbc	r21, r31
    7adc:	48 9f       	mul	r20, r24
    7ade:	90 01       	movw	r18, r0
    7ae0:	49 9f       	mul	r20, r25
    7ae2:	30 0d       	add	r19, r0
    7ae4:	58 9f       	mul	r21, r24
    7ae6:	30 0d       	add	r19, r0
    7ae8:	11 24       	eor	r1, r1
    7aea:	c9 01       	movw	r24, r18
    7aec:	93 95       	inc	r25
					uVol>>=8;
    7aee:	89 2f       	mov	r24, r25
    7af0:	99 27       	eor	r25, r25
    7af2:	02 c0       	rjmp	.+4      	; 0x7af8 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7af4:	80 e0       	ldi	r24, 0x00	; 0
    7af6:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7af8:	f5 01       	movw	r30, r10
    7afa:	30 81       	ld	r19, Z
    7afc:	f8 01       	movw	r30, r16
    7afe:	3a 97       	sbiw	r30, 0x0a	; 10
    7b00:	20 81       	ld	r18, Z
    7b02:	23 0f       	add	r18, r19
    7b04:	d5 01       	movw	r26, r10
    7b06:	2c 93       	st	X, r18
    7b08:	02 c0       	rjmp	.+4      	; 0x7b0e <ProcessMusic+0x404>

		}else{
			uVol=0;
    7b0a:	80 e0       	ldi	r24, 0x00	; 0
    7b0c:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7b0e:	f7 01       	movw	r30, r14
    7b10:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7b12:	53 94       	inc	r5
    7b14:	66 96       	adiw	r28, 0x16	; 22
    7b16:	f6 e0       	ldi	r31, 0x06	; 6
    7b18:	ef 0e       	add	r14, r31
    7b1a:	f1 1c       	adc	r15, r1
    7b1c:	86 e1       	ldi	r24, 0x16	; 22
    7b1e:	a8 0e       	add	r10, r24
    7b20:	b1 1c       	adc	r11, r1
    7b22:	0a 5e       	subi	r16, 0xEA	; 234
    7b24:	1f 4f       	sbci	r17, 0xFF	; 255
    7b26:	96 e1       	ldi	r25, 0x16	; 22
    7b28:	c9 0e       	add	r12, r25
    7b2a:	d1 1c       	adc	r13, r1
    7b2c:	a6 e1       	ldi	r26, 0x16	; 22
    7b2e:	8a 0e       	add	r8, r26
    7b30:	91 1c       	adc	r9, r1
    7b32:	b4 e0       	ldi	r27, 0x04	; 4
    7b34:	5b 12       	cpse	r5, r27
    7b36:	34 cf       	rjmp	.-408    	; 0x79a0 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7b38:	df 91       	pop	r29
    7b3a:	cf 91       	pop	r28
    7b3c:	1f 91       	pop	r17
    7b3e:	0f 91       	pop	r16
    7b40:	ff 90       	pop	r15
    7b42:	ef 90       	pop	r14
    7b44:	df 90       	pop	r13
    7b46:	cf 90       	pop	r12
    7b48:	bf 90       	pop	r11
    7b4a:	af 90       	pop	r10
    7b4c:	9f 90       	pop	r9
    7b4e:	8f 90       	pop	r8
    7b50:	7f 90       	pop	r7
    7b52:	6f 90       	pop	r6
    7b54:	5f 90       	pop	r5
    7b56:	08 95       	ret

00007b58 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7b58:	80 93 a4 0b 	sts	0x0BA4, r24
    7b5c:	08 95       	ret

00007b5e <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7b5e:	99 27       	eor	r25, r25
	clr r23
    7b60:	77 27       	eor	r23, r23

00007b62 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7b62:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7b64:	fc e7       	ldi	r31, 0x7C	; 124
	lsl r22
    7b66:	66 0f       	add	r22, r22
	rol r23
    7b68:	77 1f       	adc	r23, r23
	add ZL,r22
    7b6a:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7b6c:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7b6e:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7b70:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7b72:	e2 e1       	ldi	r30, 0x12	; 18
	ldi ZH,hi8(mixerStruct)
    7b74:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7b76:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7b78:	28 9f       	mul	r18, r24
	add ZL,r0
    7b7a:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b7c:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7b7e:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7b80:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7b82:	11 24       	eor	r1, r1
	

	ret
    7b84:	08 95       	ret

00007b86 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7b86:	99 27       	eor	r25, r25
	clr r23
    7b88:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7b8a:	e2 e1       	ldi	r30, 0x12	; 18
	ldi ZH,hi8(mixerStruct)
    7b8c:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7b8e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7b90:	28 9f       	mul	r18, r24
	add ZL,r0
    7b92:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b94:	f1 1d       	adc	r31, r1
	sts tr4_params,r22	
	rjmp esmw
smw2:
#endif

	ldi r23,hi8(waves)
    7b96:	7e e7       	ldi	r23, 0x7E	; 126
	add r23,r22
    7b98:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7b9a:	75 83       	std	Z+5, r23	; 0x05

00007b9c <esmw>:

esmw:
	clr r1	
    7b9c:	11 24       	eor	r1, r1
	ret
    7b9e:	08 95       	ret
	...

00007c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7c02:	80 93 11 0b 	sts	0x0B11, r24
	ret
    7c06:	08 95       	ret

00007c08 <steptable>:
    7c08:	22 00       	.word	0x0022	; ????
    7c0a:	24 00       	.word	0x0024	; ????
    7c0c:	26 00       	.word	0x0026	; ????
    7c0e:	28 00       	.word	0x0028	; ????
    7c10:	2b 00       	.word	0x002b	; ????
    7c12:	2d 00       	.word	0x002d	; ????
    7c14:	30 00       	.word	0x0030	; ????
    7c16:	33 00       	.word	0x0033	; ????
    7c18:	36 00       	.word	0x0036	; ????
    7c1a:	39 00       	.word	0x0039	; ????
    7c1c:	3d 00       	.word	0x003d	; ????
    7c1e:	40 00       	.word	0x0040	; ????
    7c20:	44 00       	.word	0x0044	; ????
    7c22:	48 00       	.word	0x0048	; ????
    7c24:	4c 00       	.word	0x004c	; ????
    7c26:	51 00       	.word	0x0051	; ????
    7c28:	56 00       	.word	0x0056	; ????
    7c2a:	5b 00       	.word	0x005b	; ????
    7c2c:	60 00       	.word	0x0060	; ????
    7c2e:	66 00       	.word	0x0066	; ????
    7c30:	6c 00       	.word	0x006c	; ????
    7c32:	73 00       	.word	0x0073	; ????
    7c34:	79 00       	.word	0x0079	; ????
    7c36:	81 00       	.word	0x0081	; ????
    7c38:	88 00       	.word	0x0088	; ????
    7c3a:	90 00       	.word	0x0090	; ????
    7c3c:	99 00       	.word	0x0099	; ????
    7c3e:	a2 00       	.word	0x00a2	; ????
    7c40:	ac 00       	.word	0x00ac	; ????
    7c42:	b6 00       	.word	0x00b6	; ????
    7c44:	c1 00       	.word	0x00c1	; ????
    7c46:	cc 00       	.word	0x00cc	; ????
    7c48:	d8 00       	.word	0x00d8	; ????
    7c4a:	e5 00       	.word	0x00e5	; ????
    7c4c:	f3 00       	.word	0x00f3	; ????
    7c4e:	01 01       	movw	r0, r2
    7c50:	10 01       	movw	r2, r0
    7c52:	21 01       	movw	r4, r2
    7c54:	32 01       	movw	r6, r4
    7c56:	44 01       	movw	r8, r8
    7c58:	57 01       	movw	r10, r14
    7c5a:	6c 01       	movw	r12, r24
    7c5c:	81 01       	movw	r16, r2
    7c5e:	98 01       	movw	r18, r16
    7c60:	b0 01       	movw	r22, r0
    7c62:	ca 01       	movw	r24, r20
    7c64:	e5 01       	movw	r28, r10
    7c66:	02 02       	muls	r16, r18
    7c68:	21 02       	muls	r18, r17
    7c6a:	41 02       	muls	r20, r17
    7c6c:	64 02       	muls	r22, r20
    7c6e:	88 02       	muls	r24, r24
    7c70:	ae 02       	muls	r26, r30
    7c72:	d7 02       	muls	r29, r23
    7c74:	03 03       	mulsu	r16, r19
    7c76:	30 03       	mulsu	r19, r16
    7c78:	61 03       	mulsu	r22, r17
    7c7a:	94 03       	fmuls	r17, r20
    7c7c:	cb 03       	fmulsu	r20, r19
    7c7e:	05 04       	cpc	r0, r5
    7c80:	42 04       	cpc	r4, r2
    7c82:	83 04       	cpc	r8, r3
    7c84:	c7 04       	cpc	r12, r7
    7c86:	10 05       	cpc	r17, r0
    7c88:	5d 05       	cpc	r21, r13
    7c8a:	af 05       	cpc	r26, r15
    7c8c:	05 06       	cpc	r0, r21
    7c8e:	61 06       	cpc	r6, r17
    7c90:	c2 06       	cpc	r12, r18
    7c92:	29 07       	cpc	r18, r25
    7c94:	96 07       	cpc	r25, r22
    7c96:	09 08       	sbc	r0, r9
    7c98:	83 08       	sbc	r8, r3
    7c9a:	05 09       	sbc	r16, r5
    7c9c:	8e 09       	sbc	r24, r14
    7c9e:	20 0a       	sbc	r2, r16
    7ca0:	ba 0a       	sbc	r11, r26
    7ca2:	5d 0b       	sbc	r21, r29
    7ca4:	0a 0c       	add	r0, r10
    7ca6:	c1 0c       	add	r12, r1
    7ca8:	84 0d       	add	r24, r4
    7caa:	51 0e       	add	r5, r17
    7cac:	2b 0f       	add	r18, r27
    7cae:	12 10       	cpse	r1, r2
    7cb0:	07 11       	cpse	r16, r7
    7cb2:	0a 12       	cpse	r0, r26
    7cb4:	1d 13       	cpse	r17, r29
    7cb6:	40 14       	cp	r4, r0
    7cb8:	74 15       	cp	r23, r4
    7cba:	ba 16       	cp	r11, r26
    7cbc:	14 18       	sub	r1, r4
    7cbe:	83 19       	sub	r24, r3
    7cc0:	07 1b       	sub	r16, r23
    7cc2:	a3 1c       	adc	r10, r3
    7cc4:	57 1e       	adc	r5, r23
    7cc6:	24 20       	and	r2, r4
    7cc8:	0e 22       	and	r0, r30
    7cca:	14 24       	eor	r1, r4
    7ccc:	39 26       	eor	r3, r25
    7cce:	7f 28       	or	r7, r15
    7cd0:	e8 2a       	or	r14, r24
    7cd2:	75 2d       	mov	r23, r5
    7cd4:	29 30       	cpi	r18, 0x09	; 9
    7cd6:	06 33       	cpi	r16, 0x36	; 54
    7cd8:	0f 36       	cpi	r16, 0x6F	; 111
    7cda:	45 39       	cpi	r20, 0x95	; 149
    7cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7cde:	49 40       	sbci	r20, 0x09	; 9
    7ce0:	1b 44       	sbci	r17, 0x4B	; 75
    7ce2:	28 48       	sbci	r18, 0x88	; 136
    7ce4:	73 4c       	sbci	r23, 0xC3	; 195
    7ce6:	fe 50       	subi	r31, 0x0E	; 14
    7ce8:	cf 55       	subi	r28, 0x5F	; 95
    7cea:	ea 5a       	subi	r30, 0xAA	; 170
    7cec:	51 60       	ori	r21, 0x01	; 1
    7cee:	0c 66       	ori	r16, 0x6C	; 108
    7cf0:	1d 6c       	ori	r17, 0xCD	; 205
    7cf2:	8b 72       	andi	r24, 0x2B	; 43
    7cf4:	5a 79       	andi	r21, 0x9A	; 154
    7cf6:	92 80       	ldd	r9, Z+2	; 0x02
    7cf8:	37 88       	ldd	r3, Z+23	; 0x17
    7cfa:	50 90 e5 98 	lds	r5, 0x98E5
    7cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7d00:	9f ab       	std	Y+55, r25	; 0x37
    7d02:	d3 b5       	in	r29, 0x23	; 35
    7d04:	a3 c0       	rjmp	.+326    	; 0x7e4c <waves+0x4c>
	...

00007e00 <waves>:
    7e00:	00 03       	mulsu	r16, r16
    7e02:	06 09       	sbc	r16, r6
    7e04:	0c 10       	cpse	r0, r12
    7e06:	13 16       	cp	r1, r19
    7e08:	19 1c       	adc	r1, r9
    7e0a:	1f 22       	and	r1, r31
    7e0c:	25 28       	or	r2, r5
    7e0e:	2b 2e       	mov	r2, r27
    7e10:	31 33       	cpi	r19, 0x31	; 49
    7e12:	36 39       	cpi	r19, 0x96	; 150
    7e14:	3c 3f       	cpi	r19, 0xFC	; 252
    7e16:	41 44       	sbci	r20, 0x41	; 65
    7e18:	47 49       	sbci	r20, 0x97	; 151
    7e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7e1c:	51 53       	subi	r21, 0x31	; 49
    7e1e:	55 58       	subi	r21, 0x85	; 133
    7e20:	5a 5c       	subi	r21, 0xCA	; 202
    7e22:	5e 60       	ori	r21, 0x0E	; 14
    7e24:	62 64       	ori	r22, 0x42	; 66
    7e26:	66 68       	ori	r22, 0x86	; 134
    7e28:	6a 6b       	ori	r22, 0xBA	; 186
    7e2a:	6d 6f       	ori	r22, 0xFD	; 253
    7e2c:	70 71       	andi	r23, 0x10	; 16
    7e2e:	73 74       	andi	r23, 0x43	; 67
    7e30:	75 76       	andi	r23, 0x65	; 101
    7e32:	78 79       	andi	r23, 0x98	; 152
    7e34:	7a 7a       	andi	r23, 0xAA	; 170
    7e36:	7b 7c       	andi	r23, 0xCB	; 203
    7e38:	7d 7d       	andi	r23, 0xDD	; 221
    7e3a:	7e 7e       	andi	r23, 0xEE	; 238
    7e3c:	7e 7f       	andi	r23, 0xFE	; 254
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7e 7e       	andi	r23, 0xEE	; 238
    7e46:	7e 7d       	andi	r23, 0xDE	; 222
    7e48:	7d 7c       	andi	r23, 0xCD	; 205
    7e4a:	7b 7a       	andi	r23, 0xAB	; 171
    7e4c:	7a 79       	andi	r23, 0x9A	; 154
    7e4e:	78 76       	andi	r23, 0x68	; 104
    7e50:	75 74       	andi	r23, 0x45	; 69
    7e52:	73 71       	andi	r23, 0x13	; 19
    7e54:	70 6f       	ori	r23, 0xF0	; 240
    7e56:	6d 6b       	ori	r22, 0xBD	; 189
    7e58:	6a 68       	ori	r22, 0x8A	; 138
    7e5a:	66 64       	ori	r22, 0x46	; 70
    7e5c:	62 60       	ori	r22, 0x02	; 2
    7e5e:	5e 5c       	subi	r21, 0xCE	; 206
    7e60:	5a 58       	subi	r21, 0x8A	; 138
    7e62:	55 53       	subi	r21, 0x35	; 53
    7e64:	51 4e       	sbci	r21, 0xE1	; 225
    7e66:	4c 49       	sbci	r20, 0x9C	; 156
    7e68:	47 44       	sbci	r20, 0x47	; 71
    7e6a:	41 3f       	cpi	r20, 0xF1	; 241
    7e6c:	3c 39       	cpi	r19, 0x9C	; 156
    7e6e:	36 33       	cpi	r19, 0x36	; 54
    7e70:	31 2e       	mov	r3, r17
    7e72:	2b 28       	or	r2, r11
    7e74:	25 22       	and	r2, r21
    7e76:	1f 1c       	adc	r1, r15
    7e78:	19 16       	cp	r1, r25
    7e7a:	13 10       	cpse	r1, r3
    7e7c:	0c 09       	sbc	r16, r12
    7e7e:	06 03       	mulsu	r16, r22
    7e80:	00 fd       	sbrc	r16, 0
    7e82:	fa f7       	brpl	.-2      	; 0x7e82 <waves+0x82>
    7e84:	f4 f0       	brlt	.+60     	; 0x7ec2 <waves+0xc2>
    7e86:	ed ea       	ldi	r30, 0xAD	; 173
    7e88:	e7 e4       	ldi	r30, 0x47	; 71
    7e8a:	e1 de       	rcall	.-574    	; 0x7c4e <steptable+0x46>
    7e8c:	db d8       	rcall	.-3658   	; 0x7044 <update_sound_buffer_fast+0x24>
    7e8e:	d5 d2       	rcall	.+1450   	; 0x843a <waves+0x63a>
    7e90:	cf cd       	rjmp	.-1122   	; 0x7a30 <ProcessMusic+0x326>
    7e92:	ca c7       	rjmp	.+3988   	; 0x8e28 <random+0x4>
    7e94:	c4 c1       	rjmp	.+904    	; 0x821e <waves+0x41e>
    7e96:	bf bc       	out	0x2f, r11	; 47
    7e98:	b9 b7       	in	r27, 0x39	; 57
    7e9a:	b4 b2       	in	r11, 0x14	; 20
    7e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7ea4:	9e 9c       	mul	r9, r14
    7ea6:	9a 98       	cbi	0x13, 2	; 19
    7ea8:	96 95       	lsr	r25
    7eaa:	93 91       	.word	0x9193	; ????
    7eac:	90 8f       	std	Z+24, r25	; 0x18
    7eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7eb0:	8b 8a       	std	Y+19, r8	; 0x13
    7eb2:	88 87       	std	Y+8, r24	; 0x08
    7eb4:	86 86       	std	Z+14, r8	; 0x0e
    7eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    7eb8:	83 83       	std	Z+3, r24	; 0x03
    7eba:	82 82       	std	Z+2, r8	; 0x02
    7ebc:	82 81       	ldd	r24, Z+2	; 0x02
    7ebe:	81 81       	ldd	r24, Z+1	; 0x01
    7ec0:	81 81       	ldd	r24, Z+1	; 0x01
    7ec2:	81 81       	ldd	r24, Z+1	; 0x01
    7ec4:	82 82       	std	Z+2, r8	; 0x02
    7ec6:	82 83       	std	Z+2, r24	; 0x02
    7ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    7eca:	85 86       	std	Z+13, r8	; 0x0d
    7ecc:	86 87       	std	Z+14, r24	; 0x0e
    7ece:	88 8a       	std	Y+16, r8	; 0x10
    7ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    7ed4:	90 91 93 95 	lds	r25, 0x9593
    7ed8:	96 98       	cbi	0x12, 6	; 18
    7eda:	9a 9c       	mul	r9, r10
    7edc:	9e a0       	ldd	r9, Y+38	; 0x26
    7ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7ee4:	af b2       	in	r10, 0x1f	; 31
    7ee6:	b4 b7       	in	r27, 0x34	; 52
    7ee8:	b9 bc       	out	0x29, r11	; 41
    7eea:	bf c1       	rjmp	.+894    	; 0x826a <waves+0x46a>
    7eec:	c4 c7       	rjmp	.+3976   	; 0x8e76 <load_eeprom+0x14>
    7eee:	ca cd       	rjmp	.-1132   	; 0x7a84 <ProcessMusic+0x37a>
    7ef0:	cf d2       	rcall	.+1438   	; 0x8490 <waves+0x690>
    7ef2:	d5 d8       	rcall	.-3670   	; 0x709e <SetSpritesTileTable>
    7ef4:	db de       	rcall	.-586    	; 0x7cac <steptable+0xa4>
    7ef6:	e1 e4       	ldi	r30, 0x41	; 65
    7ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    7efa:	ed f0       	brhs	.+58     	; 0x7f36 <waves+0x136>
    7efc:	f4 f7       	brge	.-4      	; 0x7efa <waves+0xfa>
    7efe:	fa fd       	.word	0xfdfa	; ????
    7f00:	80 81       	ld	r24, Z
    7f02:	82 83       	std	Z+2, r24	; 0x02
    7f04:	84 85       	ldd	r24, Z+12	; 0x0c
    7f06:	86 87       	std	Z+14, r24	; 0x0e
    7f08:	88 89       	ldd	r24, Y+16	; 0x10
    7f0a:	8a 8b       	std	Y+18, r24	; 0x12
    7f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7f10:	90 91 92 93 	lds	r25, 0x9392
    7f14:	94 95       	.word	0x9594	; ????
    7f16:	96 97       	sbiw	r26, 0x26	; 38
    7f18:	98 99       	sbic	0x13, 0	; 19
    7f1a:	9a 9b       	sbis	0x13, 2	; 19
    7f1c:	9c 9d       	mul	r25, r12
    7f1e:	9e 9f       	mul	r25, r30
    7f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7f22:	a2 a3       	std	Z+34, r26	; 0x22
    7f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7f26:	a6 a7       	std	Z+46, r26	; 0x2e
    7f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7f2a:	aa ab       	std	Y+50, r26	; 0x32
    7f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7f2e:	ae af       	std	Y+62, r26	; 0x3e
    7f30:	b0 b1       	in	r27, 0x00	; 0
    7f32:	b2 b3       	in	r27, 0x12	; 18
    7f34:	b4 b5       	in	r27, 0x24	; 36
    7f36:	b6 b7       	in	r27, 0x36	; 54
    7f38:	b8 b9       	out	0x08, r27	; 8
    7f3a:	ba bb       	out	0x1a, r27	; 26
    7f3c:	bc bd       	out	0x2c, r27	; 44
    7f3e:	be bf       	out	0x3e, r27	; 62
    7f40:	c0 c1       	rjmp	.+896    	; 0x82c2 <waves+0x4c2>
    7f42:	c2 c3       	rjmp	.+1924   	; 0x86c8 <waves+0x8c8>
    7f44:	c4 c5       	rjmp	.+2952   	; 0x8ace <DrawMap2+0x26>
    7f46:	c6 c7       	rjmp	.+3980   	; 0x8ed4 <reset_game_state+0x22>
    7f48:	c8 c9       	rjmp	.-3184   	; 0x72da <EepromWriteBlock+0x84>
    7f4a:	ca cb       	rjmp	.-2156   	; 0x76e0 <TriggerNote+0x44>
    7f4c:	cc cd       	rjmp	.-1128   	; 0x7ae6 <ProcessMusic+0x3dc>
    7f4e:	ce cf       	rjmp	.-100    	; 0x7eec <waves+0xec>
    7f50:	d0 d1       	rcall	.+928    	; 0x82f2 <waves+0x4f2>
    7f52:	d2 d3       	rcall	.+1956   	; 0x86f8 <waves+0x8f8>
    7f54:	d4 d5       	rcall	.+2984   	; 0x8afe <DrawMap2+0x56>
    7f56:	d6 d7       	rcall	.+4012   	; 0x8f04 <load_level+0x26>
    7f58:	d8 d9       	rcall	.-3152   	; 0x730a <EepromWriteBlock+0xb4>
    7f5a:	da db       	rcall	.-2124   	; 0x7710 <ProcessMusic+0x6>
    7f5c:	dc dd       	rcall	.-1096   	; 0x7b16 <ProcessMusic+0x40c>
    7f5e:	de df       	rcall	.-68     	; 0x7f1c <waves+0x11c>
    7f60:	e0 e1       	ldi	r30, 0x10	; 16
    7f62:	e2 e3       	ldi	r30, 0x32	; 50
    7f64:	e4 e5       	ldi	r30, 0x54	; 84
    7f66:	e6 e7       	ldi	r30, 0x76	; 118
    7f68:	e8 e9       	ldi	r30, 0x98	; 152
    7f6a:	ea eb       	ldi	r30, 0xBA	; 186
    7f6c:	ec ed       	ldi	r30, 0xDC	; 220
    7f6e:	ee ef       	ldi	r30, 0xFE	; 254
    7f70:	f0 f1       	brcs	.+124    	; 0x7fee <waves+0x1ee>
    7f72:	f2 f3       	brmi	.-4      	; 0x7f70 <waves+0x170>
    7f74:	f4 f5       	brge	.+124    	; 0x7ff2 <waves+0x1f2>
    7f76:	f6 f7       	brtc	.-4      	; 0x7f74 <waves+0x174>
    7f78:	f8 f9       	.word	0xf9f8	; ????
    7f7a:	fa fb       	.word	0xfbfa	; ????
    7f7c:	fc fd       	.word	0xfdfc	; ????
    7f7e:	fe ff       	.word	0xfffe	; ????
    7f80:	00 01       	movw	r0, r0
    7f82:	02 03       	mulsu	r16, r18
    7f84:	04 05       	cpc	r16, r4
    7f86:	06 07       	cpc	r16, r22
    7f88:	08 09       	sbc	r16, r8
    7f8a:	0a 0b       	sbc	r16, r26
    7f8c:	0c 0d       	add	r16, r12
    7f8e:	0e 0f       	add	r16, r30
    7f90:	10 11       	cpse	r17, r0
    7f92:	12 13       	cpse	r17, r18
    7f94:	14 15       	cp	r17, r4
    7f96:	16 17       	cp	r17, r22
    7f98:	18 19       	sub	r17, r8
    7f9a:	1a 1b       	sub	r17, r26
    7f9c:	1c 1d       	adc	r17, r12
    7f9e:	1e 1f       	adc	r17, r30
    7fa0:	20 21       	and	r18, r0
    7fa2:	22 23       	and	r18, r18
    7fa4:	24 25       	eor	r18, r4
    7fa6:	26 27       	eor	r18, r22
    7fa8:	28 29       	or	r18, r8
    7faa:	2a 2b       	or	r18, r26
    7fac:	2c 2d       	mov	r18, r12
    7fae:	2e 2f       	mov	r18, r30
    7fb0:	30 31       	cpi	r19, 0x10	; 16
    7fb2:	32 33       	cpi	r19, 0x32	; 50
    7fb4:	34 35       	cpi	r19, 0x54	; 84
    7fb6:	36 37       	cpi	r19, 0x76	; 118
    7fb8:	38 39       	cpi	r19, 0x98	; 152
    7fba:	3a 3b       	cpi	r19, 0xBA	; 186
    7fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    7fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    7fc0:	40 41       	sbci	r20, 0x10	; 16
    7fc2:	42 43       	sbci	r20, 0x32	; 50
    7fc4:	44 45       	sbci	r20, 0x54	; 84
    7fc6:	46 47       	sbci	r20, 0x76	; 118
    7fc8:	48 49       	sbci	r20, 0x98	; 152
    7fca:	4a 4b       	sbci	r20, 0xBA	; 186
    7fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    7fce:	4e 4f       	sbci	r20, 0xFE	; 254
    7fd0:	50 51       	subi	r21, 0x10	; 16
    7fd2:	52 53       	subi	r21, 0x32	; 50
    7fd4:	54 55       	subi	r21, 0x54	; 84
    7fd6:	56 57       	subi	r21, 0x76	; 118
    7fd8:	58 59       	subi	r21, 0x98	; 152
    7fda:	5a 5b       	subi	r21, 0xBA	; 186
    7fdc:	5c 5d       	subi	r21, 0xDC	; 220
    7fde:	5e 5f       	subi	r21, 0xFE	; 254
    7fe0:	60 61       	ori	r22, 0x10	; 16
    7fe2:	62 63       	ori	r22, 0x32	; 50
    7fe4:	64 65       	ori	r22, 0x54	; 84
    7fe6:	66 67       	ori	r22, 0x76	; 118
    7fe8:	68 69       	ori	r22, 0x98	; 152
    7fea:	6a 6b       	ori	r22, 0xBA	; 186
    7fec:	6c 6d       	ori	r22, 0xDC	; 220
    7fee:	6e 6f       	ori	r22, 0xFE	; 254
    7ff0:	70 71       	andi	r23, 0x10	; 16
    7ff2:	72 73       	andi	r23, 0x32	; 50
    7ff4:	74 75       	andi	r23, 0x54	; 84
    7ff6:	76 77       	andi	r23, 0x76	; 118
    7ff8:	78 79       	andi	r23, 0x98	; 152
    7ffa:	7a 7b       	andi	r23, 0xBA	; 186
    7ffc:	7c 7d       	andi	r23, 0xDC	; 220
    7ffe:	7e 7f       	andi	r23, 0xFE	; 254
    8000:	00 02       	muls	r16, r16
    8002:	04 06       	cpc	r0, r20
    8004:	08 0a       	sbc	r0, r24
    8006:	0c 0e       	add	r0, r28
    8008:	10 12       	cpse	r1, r16
    800a:	14 16       	cp	r1, r20
    800c:	18 1a       	sub	r1, r24
    800e:	1c 1e       	adc	r1, r28
    8010:	20 22       	and	r2, r16
    8012:	24 26       	eor	r2, r20
    8014:	28 2a       	or	r2, r24
    8016:	2c 2e       	mov	r2, r28
    8018:	30 32       	cpi	r19, 0x20	; 32
    801a:	34 36       	cpi	r19, 0x64	; 100
    801c:	38 3a       	cpi	r19, 0xA8	; 168
    801e:	3c 3e       	cpi	r19, 0xEC	; 236
    8020:	40 42       	sbci	r20, 0x20	; 32
    8022:	44 46       	sbci	r20, 0x64	; 100
    8024:	48 4a       	sbci	r20, 0xA8	; 168
    8026:	4c 4e       	sbci	r20, 0xEC	; 236
    8028:	50 52       	subi	r21, 0x20	; 32
    802a:	54 56       	subi	r21, 0x64	; 100
    802c:	58 5a       	subi	r21, 0xA8	; 168
    802e:	5c 5e       	subi	r21, 0xEC	; 236
    8030:	60 62       	ori	r22, 0x20	; 32
    8032:	64 66       	ori	r22, 0x64	; 100
    8034:	68 6a       	ori	r22, 0xA8	; 168
    8036:	6c 6e       	ori	r22, 0xEC	; 236
    8038:	70 72       	andi	r23, 0x20	; 32
    803a:	74 76       	andi	r23, 0x64	; 100
    803c:	78 7a       	andi	r23, 0xA8	; 168
    803e:	7c 7e       	andi	r23, 0xEC	; 236
    8040:	7f 7d       	andi	r23, 0xDF	; 223
    8042:	7b 79       	andi	r23, 0x9B	; 155
    8044:	77 75       	andi	r23, 0x57	; 87
    8046:	73 71       	andi	r23, 0x13	; 19
    8048:	6f 6d       	ori	r22, 0xDF	; 223
    804a:	6b 69       	ori	r22, 0x9B	; 155
    804c:	67 65       	ori	r22, 0x57	; 87
    804e:	63 61       	ori	r22, 0x13	; 19
    8050:	5f 5d       	subi	r21, 0xDF	; 223
    8052:	5b 59       	subi	r21, 0x9B	; 155
    8054:	57 55       	subi	r21, 0x57	; 87
    8056:	53 51       	subi	r21, 0x13	; 19
    8058:	4f 4d       	sbci	r20, 0xDF	; 223
    805a:	4b 49       	sbci	r20, 0x9B	; 155
    805c:	47 45       	sbci	r20, 0x57	; 87
    805e:	43 41       	sbci	r20, 0x13	; 19
    8060:	3f 3d       	cpi	r19, 0xDF	; 223
    8062:	3b 39       	cpi	r19, 0x9B	; 155
    8064:	37 35       	cpi	r19, 0x57	; 87
    8066:	33 31       	cpi	r19, 0x13	; 19
    8068:	2f 2d       	mov	r18, r15
    806a:	2b 29       	or	r18, r11
    806c:	27 25       	eor	r18, r7
    806e:	23 21       	and	r18, r3
    8070:	1f 1d       	adc	r17, r15
    8072:	1b 19       	sub	r17, r11
    8074:	17 15       	cp	r17, r7
    8076:	13 11       	cpse	r17, r3
    8078:	0f 0d       	add	r16, r15
    807a:	0b 09       	sbc	r16, r11
    807c:	07 05       	cpc	r16, r7
    807e:	03 01       	movw	r0, r6
    8080:	ff fd       	.word	0xfdff	; ????
    8082:	fb f9       	.word	0xf9fb	; ????
    8084:	f7 f5       	brid	.+124    	; 0x8102 <waves+0x302>
    8086:	f3 f1       	brvs	.+124    	; 0x8104 <waves+0x304>
    8088:	ef ed       	ldi	r30, 0xDF	; 223
    808a:	eb e9       	ldi	r30, 0x9B	; 155
    808c:	e7 e5       	ldi	r30, 0x57	; 87
    808e:	e3 e1       	ldi	r30, 0x13	; 19
    8090:	df dd       	rcall	.-1090   	; 0x7c50 <steptable+0x48>
    8092:	db d9       	rcall	.-3146   	; 0x744a <PatchCommand11+0x5a>
    8094:	d7 d5       	rcall	.+2990   	; 0x8c44 <DisplayLogo+0x32>
    8096:	d3 d1       	rcall	.+934    	; 0x843e <waves+0x63e>
    8098:	cf cd       	rjmp	.-1122   	; 0x7c38 <steptable+0x30>
    809a:	cb c9       	rjmp	.-3178   	; 0x7432 <PatchCommand11+0x42>
    809c:	c7 c5       	rjmp	.+2958   	; 0x8c2c <DisplayLogo+0x1a>
    809e:	c3 c1       	rjmp	.+902    	; 0x8426 <waves+0x626>
    80a0:	bf bd       	out	0x2f, r27	; 47
    80a2:	bb b9       	out	0x0b, r27	; 11
    80a4:	b7 b5       	in	r27, 0x27	; 39
    80a6:	b3 b1       	in	r27, 0x03	; 3
    80a8:	af ad       	ldd	r26, Y+63	; 0x3f
    80aa:	ab a9       	ldd	r26, Y+51	; 0x33
    80ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    80ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    80b0:	9f 9d       	mul	r25, r15
    80b2:	9b 99       	sbic	0x13, 3	; 19
    80b4:	97 95       	ror	r25
    80b6:	93 91       	.word	0x9193	; ????
    80b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    80ba:	8b 89       	ldd	r24, Y+19	; 0x13
    80bc:	87 85       	ldd	r24, Z+15	; 0x0f
    80be:	83 81       	ldd	r24, Z+3	; 0x03
    80c0:	80 82       	st	Z, r8
    80c2:	84 86       	std	Z+12, r8	; 0x0c
    80c4:	88 8a       	std	Y+16, r8	; 0x10
    80c6:	8c 8e       	std	Y+28, r8	; 0x1c
    80c8:	90 92 94 96 	sts	0x9694, r9
    80cc:	98 9a       	sbi	0x13, 0	; 19
    80ce:	9c 9e       	mul	r9, r28
    80d0:	a0 a2       	std	Z+32, r10	; 0x20
    80d2:	a4 a6       	std	Z+44, r10	; 0x2c
    80d4:	a8 aa       	std	Y+48, r10	; 0x30
    80d6:	ac ae       	std	Y+60, r10	; 0x3c
    80d8:	b0 b2       	in	r11, 0x10	; 16
    80da:	b4 b6       	in	r11, 0x34	; 52
    80dc:	b8 ba       	out	0x18, r11	; 24
    80de:	bc be       	out	0x3c, r11	; 60
    80e0:	c0 c2       	rjmp	.+1408   	; 0x8662 <waves+0x862>
    80e2:	c4 c6       	rjmp	.+3464   	; 0x8e6c <load_eeprom+0xa>
    80e4:	c8 ca       	rjmp	.-2672   	; 0x7676 <TriggerCommon+0x11c>
    80e6:	cc ce       	rjmp	.-616    	; 0x7e80 <waves+0x80>
    80e8:	d0 d2       	rcall	.+1440   	; 0x868a <waves+0x88a>
    80ea:	d4 d6       	rcall	.+3496   	; 0x8e94 <fade_through+0xe>
    80ec:	d8 da       	rcall	.-2640   	; 0x769e <TriggerNote+0x2>
    80ee:	dc de       	rcall	.-584    	; 0x7ea8 <waves+0xa8>
    80f0:	e0 e2       	ldi	r30, 0x20	; 32
    80f2:	e4 e6       	ldi	r30, 0x64	; 100
    80f4:	e8 ea       	ldi	r30, 0xA8	; 168
    80f6:	ec ee       	ldi	r30, 0xEC	; 236
    80f8:	f0 f2       	brcs	.-68     	; 0x80b6 <waves+0x2b6>
    80fa:	f4 f6       	brge	.-68     	; 0x80b8 <waves+0x2b8>
    80fc:	f8 fa       	.word	0xfaf8	; ????
    80fe:	fc fe       	.word	0xfefc	; ????
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	80 80       	ld	r8, Z
    8142:	80 80       	ld	r8, Z
    8144:	80 80       	ld	r8, Z
    8146:	80 80       	ld	r8, Z
    8148:	80 80       	ld	r8, Z
    814a:	80 80       	ld	r8, Z
    814c:	80 80       	ld	r8, Z
    814e:	80 80       	ld	r8, Z
    8150:	80 80       	ld	r8, Z
    8152:	80 80       	ld	r8, Z
    8154:	80 80       	ld	r8, Z
    8156:	80 80       	ld	r8, Z
    8158:	80 80       	ld	r8, Z
    815a:	80 80       	ld	r8, Z
    815c:	80 80       	ld	r8, Z
    815e:	80 80       	ld	r8, Z
    8160:	80 80       	ld	r8, Z
    8162:	80 80       	ld	r8, Z
    8164:	80 80       	ld	r8, Z
    8166:	80 80       	ld	r8, Z
    8168:	80 80       	ld	r8, Z
    816a:	80 80       	ld	r8, Z
    816c:	80 80       	ld	r8, Z
    816e:	80 80       	ld	r8, Z
    8170:	80 80       	ld	r8, Z
    8172:	80 80       	ld	r8, Z
    8174:	80 80       	ld	r8, Z
    8176:	80 80       	ld	r8, Z
    8178:	80 80       	ld	r8, Z
    817a:	80 80       	ld	r8, Z
    817c:	80 80       	ld	r8, Z
    817e:	80 80       	ld	r8, Z
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	80 80       	ld	r8, Z
    8282:	80 80       	ld	r8, Z
    8284:	80 80       	ld	r8, Z
    8286:	80 80       	ld	r8, Z
    8288:	80 80       	ld	r8, Z
    828a:	80 80       	ld	r8, Z
    828c:	80 80       	ld	r8, Z
    828e:	80 80       	ld	r8, Z
    8290:	80 80       	ld	r8, Z
    8292:	80 80       	ld	r8, Z
    8294:	80 80       	ld	r8, Z
    8296:	80 80       	ld	r8, Z
    8298:	80 80       	ld	r8, Z
    829a:	80 80       	ld	r8, Z
    829c:	80 80       	ld	r8, Z
    829e:	80 80       	ld	r8, Z
    82a0:	80 80       	ld	r8, Z
    82a2:	80 80       	ld	r8, Z
    82a4:	80 80       	ld	r8, Z
    82a6:	80 80       	ld	r8, Z
    82a8:	80 80       	ld	r8, Z
    82aa:	80 80       	ld	r8, Z
    82ac:	80 80       	ld	r8, Z
    82ae:	80 80       	ld	r8, Z
    82b0:	80 80       	ld	r8, Z
    82b2:	80 80       	ld	r8, Z
    82b4:	80 80       	ld	r8, Z
    82b6:	80 80       	ld	r8, Z
    82b8:	80 80       	ld	r8, Z
    82ba:	80 80       	ld	r8, Z
    82bc:	80 80       	ld	r8, Z
    82be:	80 80       	ld	r8, Z
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	7f 7f       	andi	r23, 0xFF	; 255
    8302:	7f 7f       	andi	r23, 0xFF	; 255
    8304:	7f 7f       	andi	r23, 0xFF	; 255
    8306:	7f 7f       	andi	r23, 0xFF	; 255
    8308:	7f 7f       	andi	r23, 0xFF	; 255
    830a:	7f 7f       	andi	r23, 0xFF	; 255
    830c:	7f 7f       	andi	r23, 0xFF	; 255
    830e:	7f 7f       	andi	r23, 0xFF	; 255
    8310:	7f 7f       	andi	r23, 0xFF	; 255
    8312:	7f 7f       	andi	r23, 0xFF	; 255
    8314:	7f 7f       	andi	r23, 0xFF	; 255
    8316:	7f 7f       	andi	r23, 0xFF	; 255
    8318:	7f 7f       	andi	r23, 0xFF	; 255
    831a:	7f 7f       	andi	r23, 0xFF	; 255
    831c:	7f 7f       	andi	r23, 0xFF	; 255
    831e:	7f 7f       	andi	r23, 0xFF	; 255
    8320:	7f 7f       	andi	r23, 0xFF	; 255
    8322:	7f 7f       	andi	r23, 0xFF	; 255
    8324:	7f 7f       	andi	r23, 0xFF	; 255
    8326:	7f 7f       	andi	r23, 0xFF	; 255
    8328:	7f 7f       	andi	r23, 0xFF	; 255
    832a:	7f 7f       	andi	r23, 0xFF	; 255
    832c:	7f 7f       	andi	r23, 0xFF	; 255
    832e:	7f 7f       	andi	r23, 0xFF	; 255
    8330:	7f 7f       	andi	r23, 0xFF	; 255
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7f       	andi	r23, 0xFF	; 255
    834e:	7f 7f       	andi	r23, 0xFF	; 255
    8350:	7f 7f       	andi	r23, 0xFF	; 255
    8352:	7f 7f       	andi	r23, 0xFF	; 255
    8354:	7f 7f       	andi	r23, 0xFF	; 255
    8356:	7f 7f       	andi	r23, 0xFF	; 255
    8358:	7f 7f       	andi	r23, 0xFF	; 255
    835a:	7f 7f       	andi	r23, 0xFF	; 255
    835c:	7f 7f       	andi	r23, 0xFF	; 255
    835e:	7f 7f       	andi	r23, 0xFF	; 255
    8360:	7f 7f       	andi	r23, 0xFF	; 255
    8362:	7f 7f       	andi	r23, 0xFF	; 255
    8364:	7f 7f       	andi	r23, 0xFF	; 255
    8366:	7f 7f       	andi	r23, 0xFF	; 255
    8368:	7f 7f       	andi	r23, 0xFF	; 255
    836a:	7f 7f       	andi	r23, 0xFF	; 255
    836c:	7f 7f       	andi	r23, 0xFF	; 255
    836e:	7f 7f       	andi	r23, 0xFF	; 255
    8370:	7f 7f       	andi	r23, 0xFF	; 255
    8372:	7f 7f       	andi	r23, 0xFF	; 255
    8374:	7f 7f       	andi	r23, 0xFF	; 255
    8376:	7f 7f       	andi	r23, 0xFF	; 255
    8378:	7f 7f       	andi	r23, 0xFF	; 255
    837a:	7f 7f       	andi	r23, 0xFF	; 255
    837c:	7f 7f       	andi	r23, 0xFF	; 255
    837e:	7f 7f       	andi	r23, 0xFF	; 255
    8380:	7f 7f       	andi	r23, 0xFF	; 255
    8382:	7f 7f       	andi	r23, 0xFF	; 255
    8384:	7f 7f       	andi	r23, 0xFF	; 255
    8386:	7f 7f       	andi	r23, 0xFF	; 255
    8388:	7f 7f       	andi	r23, 0xFF	; 255
    838a:	7f 7f       	andi	r23, 0xFF	; 255
    838c:	7f 7f       	andi	r23, 0xFF	; 255
    838e:	7f 7f       	andi	r23, 0xFF	; 255
    8390:	7f 7f       	andi	r23, 0xFF	; 255
    8392:	7f 7f       	andi	r23, 0xFF	; 255
    8394:	7f 7f       	andi	r23, 0xFF	; 255
    8396:	7f 7f       	andi	r23, 0xFF	; 255
    8398:	7f 7f       	andi	r23, 0xFF	; 255
    839a:	7f 7f       	andi	r23, 0xFF	; 255
    839c:	7f 7f       	andi	r23, 0xFF	; 255
    839e:	7f 7f       	andi	r23, 0xFF	; 255
    83a0:	7f 7f       	andi	r23, 0xFF	; 255
    83a2:	7f 7f       	andi	r23, 0xFF	; 255
    83a4:	7f 7f       	andi	r23, 0xFF	; 255
    83a6:	7f 7f       	andi	r23, 0xFF	; 255
    83a8:	7f 7f       	andi	r23, 0xFF	; 255
    83aa:	7f 7f       	andi	r23, 0xFF	; 255
    83ac:	7f 7f       	andi	r23, 0xFF	; 255
    83ae:	7f 7f       	andi	r23, 0xFF	; 255
    83b0:	7f 7f       	andi	r23, 0xFF	; 255
    83b2:	7f 7f       	andi	r23, 0xFF	; 255
    83b4:	7f 7f       	andi	r23, 0xFF	; 255
    83b6:	7f 7f       	andi	r23, 0xFF	; 255
    83b8:	7f 7f       	andi	r23, 0xFF	; 255
    83ba:	7f 7f       	andi	r23, 0xFF	; 255
    83bc:	7f 7f       	andi	r23, 0xFF	; 255
    83be:	7f 7f       	andi	r23, 0xFF	; 255
    83c0:	80 80       	ld	r8, Z
    83c2:	80 80       	ld	r8, Z
    83c4:	80 80       	ld	r8, Z
    83c6:	80 80       	ld	r8, Z
    83c8:	80 80       	ld	r8, Z
    83ca:	80 80       	ld	r8, Z
    83cc:	80 80       	ld	r8, Z
    83ce:	80 80       	ld	r8, Z
    83d0:	80 80       	ld	r8, Z
    83d2:	80 80       	ld	r8, Z
    83d4:	80 80       	ld	r8, Z
    83d6:	80 80       	ld	r8, Z
    83d8:	80 80       	ld	r8, Z
    83da:	80 80       	ld	r8, Z
    83dc:	80 80       	ld	r8, Z
    83de:	80 80       	ld	r8, Z
    83e0:	80 80       	ld	r8, Z
    83e2:	80 80       	ld	r8, Z
    83e4:	80 80       	ld	r8, Z
    83e6:	80 80       	ld	r8, Z
    83e8:	80 80       	ld	r8, Z
    83ea:	80 80       	ld	r8, Z
    83ec:	80 80       	ld	r8, Z
    83ee:	80 80       	ld	r8, Z
    83f0:	80 80       	ld	r8, Z
    83f2:	80 80       	ld	r8, Z
    83f4:	80 80       	ld	r8, Z
    83f6:	80 80       	ld	r8, Z
    83f8:	80 80       	ld	r8, Z
    83fa:	80 80       	ld	r8, Z
    83fc:	80 80       	ld	r8, Z
    83fe:	80 80       	ld	r8, Z
    8400:	03 09       	sbc	r16, r3
    8402:	13 1e       	adc	r1, r19
    8404:	28 31       	cpi	r18, 0x18	; 24
    8406:	3a 40       	sbci	r19, 0x0A	; 10
    8408:	46 4c       	sbci	r20, 0xC6	; 198
    840a:	50 54       	subi	r21, 0x40	; 64
    840c:	58 5b       	subi	r21, 0xB8	; 184
    840e:	5e 61       	ori	r21, 0x1E	; 30
    8410:	63 65       	ori	r22, 0x53	; 83
    8412:	67 69       	ori	r22, 0x97	; 151
    8414:	6b 6c       	ori	r22, 0xCB	; 203
    8416:	6e 6f       	ori	r22, 0xFE	; 254
    8418:	70 71       	andi	r23, 0x10	; 16
    841a:	72 73       	andi	r23, 0x32	; 50
    841c:	74 75       	andi	r23, 0x54	; 84
    841e:	76 77       	andi	r23, 0x76	; 118
    8420:	77 78       	andi	r23, 0x87	; 135
    8422:	79 79       	andi	r23, 0x99	; 153
    8424:	7a 7a       	andi	r23, 0xAA	; 170
    8426:	7b 7b       	andi	r23, 0xBB	; 187
    8428:	7c 7c       	andi	r23, 0xCC	; 204
    842a:	7c 7d       	andi	r23, 0xDC	; 220
    842c:	7d 7d       	andi	r23, 0xDD	; 221
    842e:	7e 7e       	andi	r23, 0xEE	; 238
    8430:	7e 7e       	andi	r23, 0xEE	; 238
    8432:	7f 7f       	andi	r23, 0xFF	; 255
    8434:	7f 7f       	andi	r23, 0xFF	; 255
    8436:	7f 7f       	andi	r23, 0xFF	; 255
    8438:	7f 7f       	andi	r23, 0xFF	; 255
    843a:	7f 7f       	andi	r23, 0xFF	; 255
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7f 7f       	andi	r23, 0xFF	; 255
    8448:	7f 7f       	andi	r23, 0xFF	; 255
    844a:	7f 7f       	andi	r23, 0xFF	; 255
    844c:	7f 7e       	andi	r23, 0xEF	; 239
    844e:	7e 7e       	andi	r23, 0xEE	; 238
    8450:	7e 7d       	andi	r23, 0xDE	; 222
    8452:	7d 7d       	andi	r23, 0xDD	; 221
    8454:	7c 7c       	andi	r23, 0xCC	; 204
    8456:	7c 7b       	andi	r23, 0xBC	; 188
    8458:	7b 7a       	andi	r23, 0xAB	; 171
    845a:	7a 79       	andi	r23, 0x9A	; 154
    845c:	79 78       	andi	r23, 0x89	; 137
    845e:	77 77       	andi	r23, 0x77	; 119
    8460:	76 75       	andi	r23, 0x56	; 86
    8462:	74 73       	andi	r23, 0x34	; 52
    8464:	72 71       	andi	r23, 0x12	; 18
    8466:	70 6f       	ori	r23, 0xF0	; 240
    8468:	6e 6c       	ori	r22, 0xCE	; 206
    846a:	6b 69       	ori	r22, 0x9B	; 155
    846c:	67 65       	ori	r22, 0x57	; 87
    846e:	63 61       	ori	r22, 0x13	; 19
    8470:	5e 5b       	subi	r21, 0xBE	; 190
    8472:	58 54       	subi	r21, 0x48	; 72
    8474:	50 4c       	sbci	r21, 0xC0	; 192
    8476:	46 40       	sbci	r20, 0x06	; 6
    8478:	3a 31       	cpi	r19, 0x1A	; 26
    847a:	28 1e       	adc	r2, r24
    847c:	13 09       	sbc	r17, r3
    847e:	03 00       	.word	0x0003	; ????
    8480:	c6 cc       	rjmp	.-1652   	; 0x7e0e <waves+0xe>
    8482:	d5 db       	rcall	.-2134   	; 0x7c2e <steptable+0x26>
    8484:	df e3       	ldi	r29, 0x3F	; 63
    8486:	e5 e7       	ldi	r30, 0x75	; 117
    8488:	e9 ea       	ldi	r30, 0xA9	; 169
    848a:	eb ec       	ldi	r30, 0xCB	; 203
    848c:	ed ee       	ldi	r30, 0xED	; 237
    848e:	ef ef       	ldi	r30, 0xFF	; 255
    8490:	f0 f0       	brcs	.+60     	; 0x84ce <waves+0x6ce>
    8492:	f0 f1       	brcs	.+124    	; 0x8510 <waves+0x710>
    8494:	f1 f1       	breq	.+124    	; 0x8512 <waves+0x712>
    8496:	f1 f2       	breq	.-68     	; 0x8454 <waves+0x654>
    8498:	f2 f2       	brmi	.-68     	; 0x8456 <waves+0x656>
    849a:	f2 f2       	brmi	.-68     	; 0x8458 <waves+0x658>
    849c:	f2 f2       	brmi	.-68     	; 0x845a <waves+0x65a>
    849e:	f2 f3       	brmi	.-4      	; 0x849c <waves+0x69c>
    84a0:	f3 f3       	brvs	.-4      	; 0x849e <waves+0x69e>
    84a2:	f3 f3       	brvs	.-4      	; 0x84a0 <waves+0x6a0>
    84a4:	f3 f3       	brvs	.-4      	; 0x84a2 <waves+0x6a2>
    84a6:	f3 f3       	brvs	.-4      	; 0x84a4 <waves+0x6a4>
    84a8:	f3 f3       	brvs	.-4      	; 0x84a6 <waves+0x6a6>
    84aa:	f3 f3       	brvs	.-4      	; 0x84a8 <waves+0x6a8>
    84ac:	f3 f3       	brvs	.-4      	; 0x84aa <waves+0x6aa>
    84ae:	f3 f3       	brvs	.-4      	; 0x84ac <waves+0x6ac>
    84b0:	f3 f3       	brvs	.-4      	; 0x84ae <waves+0x6ae>
    84b2:	f3 f3       	brvs	.-4      	; 0x84b0 <waves+0x6b0>
    84b4:	f3 f3       	brvs	.-4      	; 0x84b2 <waves+0x6b2>
    84b6:	f3 f3       	brvs	.-4      	; 0x84b4 <waves+0x6b4>
    84b8:	f3 f3       	brvs	.-4      	; 0x84b6 <waves+0x6b6>
    84ba:	f3 f3       	brvs	.-4      	; 0x84b8 <waves+0x6b8>
    84bc:	f3 f3       	brvs	.-4      	; 0x84ba <waves+0x6ba>
    84be:	f3 f3       	brvs	.-4      	; 0x84bc <waves+0x6bc>
    84c0:	f3 f3       	brvs	.-4      	; 0x84be <waves+0x6be>
    84c2:	f3 f3       	brvs	.-4      	; 0x84c0 <waves+0x6c0>
    84c4:	f3 f3       	brvs	.-4      	; 0x84c2 <waves+0x6c2>
    84c6:	f3 f3       	brvs	.-4      	; 0x84c4 <waves+0x6c4>
    84c8:	f3 f3       	brvs	.-4      	; 0x84c6 <waves+0x6c6>
    84ca:	f3 f3       	brvs	.-4      	; 0x84c8 <waves+0x6c8>
    84cc:	f3 f3       	brvs	.-4      	; 0x84ca <waves+0x6ca>
    84ce:	f3 f3       	brvs	.-4      	; 0x84cc <waves+0x6cc>
    84d0:	f3 f3       	brvs	.-4      	; 0x84ce <waves+0x6ce>
    84d2:	f3 f3       	brvs	.-4      	; 0x84d0 <waves+0x6d0>
    84d4:	f3 f3       	brvs	.-4      	; 0x84d2 <waves+0x6d2>
    84d6:	f3 f3       	brvs	.-4      	; 0x84d4 <waves+0x6d4>
    84d8:	f3 f3       	brvs	.-4      	; 0x84d6 <waves+0x6d6>
    84da:	f3 f3       	brvs	.-4      	; 0x84d8 <waves+0x6d8>
    84dc:	f3 f3       	brvs	.-4      	; 0x84da <waves+0x6da>
    84de:	f3 f3       	brvs	.-4      	; 0x84dc <waves+0x6dc>
    84e0:	f2 f2       	brmi	.-68     	; 0x849e <waves+0x69e>
    84e2:	f2 f2       	brmi	.-68     	; 0x84a0 <waves+0x6a0>
    84e4:	f2 f2       	brmi	.-68     	; 0x84a2 <waves+0x6a2>
    84e6:	f2 f2       	brmi	.-68     	; 0x84a4 <waves+0x6a4>
    84e8:	f1 f1       	breq	.+124    	; 0x8566 <waves+0x766>
    84ea:	f1 f1       	breq	.+124    	; 0x8568 <waves+0x768>
    84ec:	f0 f0       	brcs	.+60     	; 0x852a <waves+0x72a>
    84ee:	f0 ef       	ldi	r31, 0xF0	; 240
    84f0:	ef ee       	ldi	r30, 0xEF	; 239
    84f2:	ed ec       	ldi	r30, 0xCD	; 205
    84f4:	eb ea       	ldi	r30, 0xAB	; 171
    84f6:	e9 e7       	ldi	r30, 0x79	; 121
    84f8:	e5 e3       	ldi	r30, 0x35	; 53
    84fa:	df db       	rcall	.-2114   	; 0x7cba <steptable+0xb2>
    84fc:	d5 cc       	rjmp	.-1622   	; 0x7ea8 <waves+0xa8>
    84fe:	c6 00       	.word	0x00c6	; ????
    8500:	00 28       	or	r0, r0
    8502:	3d 42       	sbci	r19, 0x2D	; 45
    8504:	30 2d       	mov	r19, r0
    8506:	2c 2b       	or	r18, r28
    8508:	2c 2d       	mov	r18, r12
    850a:	2e 2f       	mov	r18, r30
    850c:	30 32       	cpi	r19, 0x20	; 32
    850e:	33 35       	cpi	r19, 0x53	; 83
    8510:	37 39       	cpi	r19, 0x97	; 151
    8512:	3b 3d       	cpi	r19, 0xDB	; 219
    8514:	3f 41       	sbci	r19, 0x1F	; 31
    8516:	43 45       	sbci	r20, 0x53	; 83
    8518:	48 4a       	sbci	r20, 0xA8	; 168
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	50 53       	subi	r21, 0x30	; 48
    851e:	55 57       	subi	r21, 0x75	; 117
    8520:	59 5b       	subi	r21, 0xB9	; 185
    8522:	5d 5f       	subi	r21, 0xFD	; 253
    8524:	61 63       	ori	r22, 0x31	; 49
    8526:	65 67       	ori	r22, 0x75	; 117
    8528:	69 6b       	ori	r22, 0xB9	; 185
    852a:	6c 6e       	ori	r22, 0xEC	; 236
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 77       	andi	r23, 0x75	; 117
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7b       	andi	r23, 0xBA	; 186
    8536:	7c 7d       	andi	r23, 0xDC	; 220
    8538:	7d 7e       	andi	r23, 0xED	; 237
    853a:	7e 7f       	andi	r23, 0xFE	; 254
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7f 7f       	andi	r23, 0xFF	; 255
    8546:	7e 7e       	andi	r23, 0xEE	; 238
    8548:	7d 7d       	andi	r23, 0xDD	; 221
    854a:	7c 7b       	andi	r23, 0xBC	; 188
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 77       	andi	r23, 0x78	; 120
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6e       	ori	r23, 0xE0	; 224
    8556:	6c 6b       	ori	r22, 0xBC	; 188
    8558:	69 67       	ori	r22, 0x79	; 121
    855a:	65 63       	ori	r22, 0x35	; 53
    855c:	61 5f       	subi	r22, 0xF1	; 241
    855e:	5d 5b       	subi	r21, 0xBD	; 189
    8560:	59 57       	subi	r21, 0x79	; 121
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	50 4e       	sbci	r21, 0xE0	; 224
    8566:	4c 4a       	sbci	r20, 0xAC	; 172
    8568:	48 45       	sbci	r20, 0x58	; 88
    856a:	43 41       	sbci	r20, 0x13	; 19
    856c:	3f 3d       	cpi	r19, 0xDF	; 223
    856e:	3b 39       	cpi	r19, 0x9B	; 155
    8570:	37 35       	cpi	r19, 0x57	; 87
    8572:	33 32       	cpi	r19, 0x23	; 35
    8574:	30 2f       	mov	r19, r16
    8576:	2e 2d       	mov	r18, r14
    8578:	2c 2b       	or	r18, r28
    857a:	2c 2d       	mov	r18, r12
    857c:	30 42       	sbci	r19, 0x20	; 32
    857e:	3d 28       	or	r3, r13
    8580:	00 e9       	ldi	r16, 0x90	; 144
    8582:	e5 fe       	sbrs	r14, 5
    8584:	d4 d7       	rcall	.+4008   	; 0x952e <_handle_select_helper+0x68>
    8586:	d7 d7       	rcall	.+4014   	; 0x9536 <_handle_select_helper+0x70>
    8588:	d6 d4       	rcall	.+2476   	; 0x8f36 <load_level+0x58>
    858a:	d2 d0       	rcall	.+420    	; 0x8730 <waves+0x930>
    858c:	ce cc       	rjmp	.-1636   	; 0x7f2a <waves+0x12a>
    858e:	ca c8       	rjmp	.-3692   	; 0x7724 <ProcessMusic+0x1a>
    8590:	c6 c3       	rjmp	.+1932   	; 0x8d1e <VideoModeVsync>
    8592:	c1 bf       	out	0x31, r28	; 49
    8594:	bd ba       	out	0x1d, r11	; 29
    8596:	b8 b6       	in	r11, 0x38	; 56
    8598:	b4 b1       	in	r27, 0x04	; 4
    859a:	af ad       	ldd	r26, Y+63	; 0x3f
    859c:	ab a9       	ldd	r26, Y+51	; 0x33
    859e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    85a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    85a2:	9f 9e       	mul	r9, r31
    85a4:	9c 9a       	sbi	0x13, 4	; 19
    85a6:	99 97       	sbiw	r26, 0x29	; 41
    85a8:	95 94       	asr	r9
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	89 88       	ldd	r8, Y+17	; 0x11
    85b4:	88 87       	std	Y+8, r24	; 0x08
    85b6:	86 85       	ldd	r24, Z+14	; 0x0e
    85b8:	85 84       	ldd	r8, Z+13	; 0x0d
    85ba:	84 84       	ldd	r8, Z+12	; 0x0c
    85bc:	83 83       	std	Z+3, r24	; 0x03
    85be:	83 83       	std	Z+3, r24	; 0x03
    85c0:	83 83       	std	Z+3, r24	; 0x03
    85c2:	83 83       	std	Z+3, r24	; 0x03
    85c4:	83 84       	ldd	r8, Z+11	; 0x0b
    85c6:	84 84       	ldd	r8, Z+12	; 0x0c
    85c8:	85 85       	ldd	r24, Z+13	; 0x0d
    85ca:	86 87       	std	Z+14, r24	; 0x0e
    85cc:	88 88       	ldd	r8, Y+16	; 0x10
    85ce:	89 8a       	std	Y+17, r8	; 0x11
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 94 	lds	r25, 0x9493
    85d8:	95 97       	sbiw	r26, 0x25	; 37
    85da:	99 9a       	sbi	0x13, 1	; 19
    85dc:	9c 9e       	mul	r9, r28
    85de:	9f a1       	ldd	r25, Y+39	; 0x27
    85e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    85e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    85e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e6:	af b1       	in	r26, 0x0f	; 15
    85e8:	b4 b6       	in	r11, 0x34	; 52
    85ea:	b8 ba       	out	0x18, r11	; 24
    85ec:	bd bf       	out	0x3d, r27	; 61
    85ee:	c1 c3       	rjmp	.+1922   	; 0x8d72 <LBGetJoyPadState+0x4c>
    85f0:	c6 c8       	rjmp	.-3700   	; 0x777e <ProcessMusic+0x74>
    85f2:	ca cc       	rjmp	.-1644   	; 0x7f88 <waves+0x188>
    85f4:	ce d0       	rcall	.+412    	; 0x8792 <waves+0x992>
    85f6:	d2 d4       	rcall	.+2468   	; 0x8f9c <save_score+0x5e>
    85f8:	d6 d7       	rcall	.+4012   	; 0x95a6 <_handle_select_helper+0xe0>
    85fa:	d7 d7       	rcall	.+4014   	; 0x95aa <_handle_select_helper+0xe4>
    85fc:	d4 fe       	sbrs	r13, 4
    85fe:	e5 e9       	ldi	r30, 0x95	; 149
    8600:	f9 f8       	.word	0xf8f9	; ????
    8602:	f9 f5       	brne	.+126    	; 0x8682 <waves+0x882>
    8604:	eb e1       	ldi	r30, 0x1B	; 27
    8606:	dd de       	rcall	.-582    	; 0x83c2 <waves+0x5c2>
    8608:	e0 e2       	ldi	r30, 0x20	; 32
    860a:	e4 e5       	ldi	r30, 0x54	; 84
    860c:	e6 e5       	ldi	r30, 0x56	; 86
    860e:	e4 e2       	ldi	r30, 0x24	; 36
    8610:	de d9       	rcall	.-3140   	; 0x79ce <ProcessMusic+0x2c4>
    8612:	d2 ca       	rjmp	.-2652   	; 0x7bb8 <esmw+0x1c>
    8614:	c1 b7       	in	r28, 0x31	; 49
    8616:	ac a2       	std	Y+36, r10	; 0x24
    8618:	99 91       	ld	r25, Y+
    861a:	8a 86       	std	Y+10, r8	; 0x0a
    861c:	83 81       	ldd	r24, Z+3	; 0x03
    861e:	80 80       	ld	r8, Z
    8620:	81 82       	std	Z+1, r8	; 0x01
    8622:	83 85       	ldd	r24, Z+11	; 0x0b
    8624:	86 88       	ldd	r8, Z+22	; 0x16
    8626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8628:	8d 8f       	std	Y+29, r24	; 0x1d
    862a:	90 92 93 95 	sts	0x9593, r9
    862e:	96 97       	sbiw	r26, 0x26	; 38
    8630:	98 99       	sbic	0x13, 0	; 19
    8632:	9a 9b       	sbis	0x13, 2	; 19
    8634:	9b 9c       	mul	r9, r11
    8636:	9d 9d       	mul	r25, r13
    8638:	9d 9e       	mul	r9, r29
    863a:	9e 9e       	mul	r9, r30
    863c:	9f 9f       	mul	r25, r31
    863e:	9f 9f       	mul	r25, r31
    8640:	9f 9f       	mul	r25, r31
    8642:	9f 9e       	mul	r9, r31
    8644:	9e 9e       	mul	r9, r30
    8646:	9d 9d       	mul	r25, r13
    8648:	9d 9c       	mul	r9, r13
    864a:	9b 9b       	sbis	0x13, 3	; 19
    864c:	9a 99       	sbic	0x13, 2	; 19
    864e:	98 97       	sbiw	r26, 0x28	; 40
    8650:	96 95       	lsr	r25
    8652:	93 92       	.word	0x9293	; ????
    8654:	90 8f       	std	Z+24, r25	; 0x18
    8656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8658:	8a 88       	ldd	r8, Y+18	; 0x12
    865a:	86 85       	ldd	r24, Z+14	; 0x0e
    865c:	83 82       	std	Z+3, r8	; 0x03
    865e:	81 80       	ldd	r8, Z+1	; 0x01
    8660:	80 81       	ld	r24, Z
    8662:	83 86       	std	Z+11, r8	; 0x0b
    8664:	8a 91       	ld	r24, -Y
    8666:	99 a2       	std	Y+33, r9	; 0x21
    8668:	ac b7       	in	r26, 0x3c	; 60
    866a:	c1 ca       	rjmp	.-2686   	; 0x7bee <esmw+0x52>
    866c:	d2 d9       	rcall	.-3164   	; 0x7a12 <ProcessMusic+0x308>
    866e:	de e2       	ldi	r29, 0x2E	; 46
    8670:	e4 e5       	ldi	r30, 0x54	; 84
    8672:	e6 e5       	ldi	r30, 0x56	; 86
    8674:	e4 e2       	ldi	r30, 0x24	; 36
    8676:	e0 de       	rcall	.-576    	; 0x8438 <waves+0x638>
    8678:	dd e1       	ldi	r29, 0x1D	; 29
    867a:	eb f5       	brvc	.+122    	; 0x86f6 <waves+0x8f6>
    867c:	f9 f8       	.word	0xf8f9	; ????
    867e:	f9 00       	.word	0x00f9	; ????
    8680:	07 08       	sbc	r0, r7
    8682:	07 0b       	sbc	r16, r23
    8684:	15 1f       	adc	r17, r21
    8686:	23 22       	and	r2, r19
    8688:	20 1e       	adc	r2, r16
    868a:	1c 1b       	sub	r17, r28
    868c:	1a 1b       	sub	r17, r26
    868e:	1c 1e       	adc	r1, r28
    8690:	22 27       	eor	r18, r18
    8692:	2e 36       	cpi	r18, 0x6E	; 110
    8694:	3f 49       	sbci	r19, 0x9F	; 159
    8696:	54 5e       	subi	r21, 0xE4	; 228
    8698:	67 6f       	ori	r22, 0xF7	; 247
    869a:	76 7a       	andi	r23, 0xA6	; 166
    869c:	7e 7f       	andi	r23, 0xFE	; 254
    869e:	7f 7f       	andi	r23, 0xFF	; 255
    86a0:	7f 7e       	andi	r23, 0xEF	; 239
    86a2:	7d 7b       	andi	r23, 0xBD	; 189
    86a4:	7a 78       	andi	r23, 0x8A	; 138
    86a6:	76 74       	andi	r23, 0x46	; 70
    86a8:	73 71       	andi	r23, 0x13	; 19
    86aa:	70 6e       	ori	r23, 0xE0	; 224
    86ac:	6d 6b       	ori	r22, 0xBD	; 189
    86ae:	6a 69       	ori	r22, 0x9A	; 154
    86b0:	68 67       	ori	r22, 0x78	; 120
    86b2:	66 65       	ori	r22, 0x56	; 86
    86b4:	65 64       	ori	r22, 0x45	; 69
    86b6:	64 63       	ori	r22, 0x34	; 52
    86b8:	63 62       	ori	r22, 0x23	; 35
    86ba:	62 62       	ori	r22, 0x22	; 34
    86bc:	61 61       	ori	r22, 0x11	; 17
    86be:	61 61       	ori	r22, 0x11	; 17
    86c0:	61 61       	ori	r22, 0x11	; 17
    86c2:	61 62       	ori	r22, 0x21	; 33
    86c4:	62 62       	ori	r22, 0x22	; 34
    86c6:	63 63       	ori	r22, 0x33	; 51
    86c8:	63 64       	ori	r22, 0x43	; 67
    86ca:	65 65       	ori	r22, 0x55	; 85
    86cc:	66 67       	ori	r22, 0x76	; 118
    86ce:	68 69       	ori	r22, 0x98	; 152
    86d0:	6a 6b       	ori	r22, 0xBA	; 186
    86d2:	6d 6e       	ori	r22, 0xED	; 237
    86d4:	70 71       	andi	r23, 0x10	; 16
    86d6:	73 74       	andi	r23, 0x43	; 67
    86d8:	76 78       	andi	r23, 0x86	; 134
    86da:	7a 7b       	andi	r23, 0xBA	; 186
    86dc:	7d 7e       	andi	r23, 0xED	; 237
    86de:	7f 7f       	andi	r23, 0xFF	; 255
    86e0:	7f 7f       	andi	r23, 0xFF	; 255
    86e2:	7e 7a       	andi	r23, 0xAE	; 174
    86e4:	76 6f       	ori	r23, 0xF6	; 246
    86e6:	67 5e       	subi	r22, 0xE7	; 231
    86e8:	54 49       	sbci	r21, 0x94	; 148
    86ea:	3f 36       	cpi	r19, 0x6F	; 111
    86ec:	2e 27       	eor	r18, r30
    86ee:	22 1e       	adc	r2, r18
    86f0:	1c 1b       	sub	r17, r28
    86f2:	1a 1b       	sub	r17, r26
    86f4:	1c 1e       	adc	r1, r28
    86f6:	20 22       	and	r2, r16
    86f8:	23 1f       	adc	r18, r19
    86fa:	15 0b       	sbc	r17, r21
    86fc:	07 08       	sbc	r0, r7
    86fe:	07 00       	.word	0x0007	; ????
    8700:	1f 31       	cpi	r17, 0x1F	; 31
    8702:	3d 44       	sbci	r19, 0x4D	; 77
    8704:	4e 53       	subi	r20, 0x3E	; 62
    8706:	54 56       	subi	r21, 0x64	; 100
    8708:	5a 5f       	subi	r21, 0xFA	; 250
    870a:	64 69       	ori	r22, 0x94	; 148
    870c:	6e 74       	andi	r22, 0x4E	; 78
    870e:	76 79       	andi	r23, 0x96	; 150
    8710:	7c 7f       	andi	r23, 0xFC	; 252
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7c       	andi	r23, 0xCF	; 207
    877c:	78 71       	andi	r23, 0x18	; 24
    877e:	68 4c       	sbci	r22, 0xC8	; 200
    8780:	2c 1c       	adc	r2, r12
    8782:	12 0c       	add	r1, r2
    8784:	0a 0b       	sbc	r16, r26
    8786:	0a 05       	cpc	r16, r10
    8788:	fd f3       	brhs	.-2      	; 0x8788 <waves+0x988>
    878a:	e9 df       	rcall	.-46     	; 0x875e <waves+0x95e>
    878c:	d4 ca       	rjmp	.-2648   	; 0x7d36 <steptable+0x12e>
    878e:	c0 b7       	in	r28, 0x30	; 48
    8790:	ae a6       	std	Y+46, r10	; 0x2e
    8792:	9e 97       	sbiw	r26, 0x2e	; 46
    8794:	91 8b       	std	Z+17, r25	; 0x11
    8796:	86 85       	ldd	r24, Z+14	; 0x0e
    8798:	82 80       	ldd	r8, Z+2	; 0x02
    879a:	80 80       	ld	r8, Z
    879c:	80 80       	ld	r8, Z
    879e:	80 80       	ld	r8, Z
    87a0:	80 80       	ld	r8, Z
    87a2:	80 80       	ld	r8, Z
    87a4:	80 80       	ld	r8, Z
    87a6:	80 80       	ld	r8, Z
    87a8:	80 80       	ld	r8, Z
    87aa:	80 80       	ld	r8, Z
    87ac:	80 80       	ld	r8, Z
    87ae:	80 80       	ld	r8, Z
    87b0:	80 80       	ld	r8, Z
    87b2:	80 80       	ld	r8, Z
    87b4:	80 80       	ld	r8, Z
    87b6:	80 80       	ld	r8, Z
    87b8:	80 80       	ld	r8, Z
    87ba:	80 80       	ld	r8, Z
    87bc:	80 80       	ld	r8, Z
    87be:	80 80       	ld	r8, Z
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 87       	std	Z+8, r24	; 0x08
    87f6:	91 9d       	mul	r25, r1
    87f8:	ac c4       	rjmp	.+2392   	; 0x9152 <update_level+0x2a>
    87fa:	cb d4       	rcall	.+2454   	; 0x9192 <update_level+0x6a>
    87fc:	dd f2       	brhs	.-74     	; 0x87b4 <waves+0x9b4>
    87fe:	fa fa       	.word	0xfafa	; ????

00008800 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8800:	90 91 af 0b 	lds	r25, 0x0BAF
    8804:	ec e9       	ldi	r30, 0x9C	; 156
    8806:	f8 e0       	ldi	r31, 0x08	; 8
    8808:	80 e0       	ldi	r24, 0x00	; 0
    880a:	89 17       	cp	r24, r25
    880c:	49 f0       	breq	.+18     	; 0x8820 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    880e:	a0 81       	ld	r26, Z
    8810:	b1 81       	ldd	r27, Z+1	; 0x01
    8812:	a0 52       	subi	r26, 0x20	; 32
    8814:	be 4f       	sbci	r27, 0xFE	; 254
    8816:	22 81       	ldd	r18, Z+2	; 0x02
    8818:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    881a:	8f 5f       	subi	r24, 0xFF	; 255
    881c:	33 96       	adiw	r30, 0x03	; 3
    881e:	f5 cf       	rjmp	.-22     	; 0x880a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8820:	08 95       	ret

00008822 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8822:	2f 92       	push	r2
    8824:	3f 92       	push	r3
    8826:	4f 92       	push	r4
    8828:	5f 92       	push	r5
    882a:	6f 92       	push	r6
    882c:	7f 92       	push	r7
    882e:	8f 92       	push	r8
    8830:	9f 92       	push	r9
    8832:	af 92       	push	r10
    8834:	bf 92       	push	r11
    8836:	cf 92       	push	r12
    8838:	df 92       	push	r13
    883a:	ef 92       	push	r14
    883c:	ff 92       	push	r15
    883e:	0f 93       	push	r16
    8840:	1f 93       	push	r17
    8842:	cf 93       	push	r28
    8844:	df 93       	push	r29
    8846:	00 d0       	rcall	.+0      	; 0x8848 <ProcessSprites+0x26>
    8848:	1f 92       	push	r1
    884a:	cd b7       	in	r28, 0x3d	; 61
    884c:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    884e:	10 92 af 0b 	sts	0x0BAF, r1
		if(!spritesOn) return;
    8852:	80 91 00 01 	lds	r24, 0x0100
    8856:	88 23       	and	r24, r24
    8858:	09 f4       	brne	.+2      	; 0x885c <ProcessSprites+0x3a>
    885a:	a1 c0       	rjmp	.+322    	; 0x899e <ProcessSprites+0x17c>
    885c:	e8 e2       	ldi	r30, 0x28	; 40
    885e:	ce 2e       	mov	r12, r30
    8860:	e5 e0       	ldi	r30, 0x05	; 5
    8862:	de 2e       	mov	r13, r30
    8864:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8866:	f6 01       	movw	r30, r12
    8868:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    886a:	80 3f       	cpi	r24, 0xF0	; 240
    886c:	09 f4       	brne	.+2      	; 0x8870 <ProcessSprites+0x4e>
    886e:	79 c0       	rjmp	.+242    	; 0x8962 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8870:	91 81       	ldd	r25, Z+1	; 0x01
    8872:	29 2f       	mov	r18, r25
    8874:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8876:	28 2e       	mov	r2, r24
    8878:	26 94       	lsr	r2
    887a:	26 94       	lsr	r2
    887c:	26 94       	lsr	r2
				dx=ssx&0x7;
    887e:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8880:	19 f0       	breq	.+6      	; 0x8888 <ProcessSprites+0x66>
    8882:	72 e0       	ldi	r23, 0x02	; 2
    8884:	47 2e       	mov	r4, r23
    8886:	02 c0       	rjmp	.+4      	; 0x888c <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8888:	44 24       	eor	r4, r4
    888a:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    888c:	63 e0       	ldi	r22, 0x03	; 3
    888e:	36 95       	lsr	r19
    8890:	27 95       	ror	r18
    8892:	6a 95       	dec	r22
    8894:	e1 f7       	brne	.-8      	; 0x888e <ProcessSprites+0x6c>
    8896:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    8898:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    889a:	19 f0       	breq	.+6      	; 0x88a2 <ProcessSprites+0x80>
    889c:	52 e0       	ldi	r21, 0x02	; 2
    889e:	55 2e       	mov	r5, r21
    88a0:	02 c0       	rjmp	.+4      	; 0x88a6 <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    88a2:	55 24       	eor	r5, r5
    88a4:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88a6:	29 2f       	mov	r18, r25
    88a8:	30 e0       	ldi	r19, 0x00	; 0
    88aa:	32 2f       	mov	r19, r18
    88ac:	22 27       	eor	r18, r18
    88ae:	a9 01       	movw	r20, r18
    88b0:	48 0f       	add	r20, r24
    88b2:	51 1d       	adc	r21, r1
    88b4:	5b 83       	std	Y+3, r21	; 0x03
    88b6:	4a 83       	std	Y+2, r20	; 0x02
    88b8:	e1 2c       	mov	r14, r1
    88ba:	f1 2c       	mov	r15, r1
    88bc:	94 ee       	ldi	r25, 0xE4	; 228
    88be:	93 0d       	add	r25, r3
    88c0:	99 83       	std	Y+1, r25	; 0x01
    88c2:	03 2d       	mov	r16, r3
    88c4:	0e 0d       	add	r16, r14
    88c6:	0c 31       	cpi	r16, 0x1C	; 28
    88c8:	10 f0       	brcs	.+4      	; 0x88ce <ProcessSprites+0xac>
    88ca:	09 81       	ldd	r16, Y+1	; 0x01
    88cc:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    88ce:	5e e1       	ldi	r21, 0x1E	; 30
    88d0:	05 9f       	mul	r16, r21
    88d2:	80 01       	movw	r16, r0
    88d4:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    88d6:	be 2c       	mov	r11, r14
    88d8:	aa 24       	eor	r10, r10
    88da:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    88dc:	ed e1       	ldi	r30, 0x1D	; 29
    88de:	e7 15       	cp	r30, r7
    88e0:	18 f4       	brcc	.+6      	; 0x88e8 <ProcessSprites+0xc6>
    88e2:	82 ee       	ldi	r24, 0xE2	; 226
    88e4:	87 0d       	add	r24, r7
    88e6:	01 c0       	rjmp	.+2      	; 0x88ea <ProcessSprites+0xc8>
    88e8:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    88ea:	a8 01       	movw	r20, r16
    88ec:	48 0f       	add	r20, r24
    88ee:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    88f0:	ca 01       	movw	r24, r20
    88f2:	80 52       	subi	r24, 0x20	; 32
    88f4:	9e 4f       	sbci	r25, 0xFE	; 254
    88f6:	4c 01       	movw	r8, r24
    88f8:	fc 01       	movw	r30, r24
    88fa:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    88fc:	8d 30       	cpi	r24, 0x0D	; 13
    88fe:	e0 f0       	brcs	.+56     	; 0x8938 <ProcessSprites+0x116>
    8900:	60 91 af 0b 	lds	r22, 0x0BAF
    8904:	6d 30       	cpi	r22, 0x0D	; 13
    8906:	f8 f4       	brcc	.+62     	; 0x8946 <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8908:	26 2f       	mov	r18, r22
    890a:	30 e0       	ldi	r19, 0x00	; 0
    890c:	f9 01       	movw	r30, r18
    890e:	ee 0f       	add	r30, r30
    8910:	ff 1f       	adc	r31, r31
    8912:	e2 0f       	add	r30, r18
    8914:	f3 1f       	adc	r31, r19
    8916:	e4 56       	subi	r30, 0x64	; 100
    8918:	f7 4f       	sbci	r31, 0xF7	; 247
    891a:	51 83       	std	Z+1, r21	; 0x01
    891c:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    891e:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8920:	0e 94 3d 35 	call	0x6a7a	; 0x6a7a <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    8924:	80 91 af 0b 	lds	r24, 0x0BAF
    8928:	f4 01       	movw	r30, r8
    892a:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    892c:	91 e0       	ldi	r25, 0x01	; 1
    892e:	98 0f       	add	r25, r24
    8930:	90 93 af 0b 	sts	0x0BAF, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    8934:	8d 30       	cpi	r24, 0x0D	; 13
    8936:	38 f4       	brcc	.+14     	; 0x8946 <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8938:	2a 81       	ldd	r18, Y+2	; 0x02
    893a:	3b 81       	ldd	r19, Y+3	; 0x03
    893c:	a5 01       	movw	r20, r10
    893e:	68 2f       	mov	r22, r24
    8940:	86 2d       	mov	r24, r6
    8942:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <BlitSprite>
    8946:	ff ef       	ldi	r31, 0xFF	; 255
    8948:	af 1a       	sub	r10, r31
    894a:	bf 0a       	sbc	r11, r31
    894c:	73 94       	inc	r7
    894e:	87 2d       	mov	r24, r7
    8950:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8952:	84 15       	cp	r24, r4
    8954:	18 f2       	brcs	.-122    	; 0x88dc <ProcessSprites+0xba>
    8956:	4f ef       	ldi	r20, 0xFF	; 255
    8958:	e4 1a       	sub	r14, r20
    895a:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    895c:	e5 14       	cp	r14, r5
    895e:	08 f4       	brcc	.+2      	; 0x8962 <ProcessSprites+0x140>
    8960:	b0 cf       	rjmp	.-160    	; 0x88c2 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8962:	63 94       	inc	r6
    8964:	84 e0       	ldi	r24, 0x04	; 4
    8966:	c8 0e       	add	r12, r24
    8968:	d1 1c       	adc	r13, r1
    896a:	9d e0       	ldi	r25, 0x0D	; 13
    896c:	69 12       	cpse	r6, r25
    896e:	7b cf       	rjmp	.-266    	; 0x8866 <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8970:	0f 90       	pop	r0
    8972:	0f 90       	pop	r0
    8974:	0f 90       	pop	r0
    8976:	df 91       	pop	r29
    8978:	cf 91       	pop	r28
    897a:	1f 91       	pop	r17
    897c:	0f 91       	pop	r16
    897e:	ff 90       	pop	r15
    8980:	ef 90       	pop	r14
    8982:	df 90       	pop	r13
    8984:	cf 90       	pop	r12
    8986:	bf 90       	pop	r11
    8988:	af 90       	pop	r10
    898a:	9f 90       	pop	r9
    898c:	8f 90       	pop	r8
    898e:	7f 90       	pop	r7
    8990:	6f 90       	pop	r6
    8992:	5f 90       	pop	r5
    8994:	4f 90       	pop	r4
    8996:	3f 90       	pop	r3
    8998:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    899a:	0c 94 00 44 	jmp	0x8800	; 0x8800 <RestoreBackground>

	}
    899e:	0f 90       	pop	r0
    89a0:	0f 90       	pop	r0
    89a2:	0f 90       	pop	r0
    89a4:	df 91       	pop	r29
    89a6:	cf 91       	pop	r28
    89a8:	1f 91       	pop	r17
    89aa:	0f 91       	pop	r16
    89ac:	ff 90       	pop	r15
    89ae:	ef 90       	pop	r14
    89b0:	df 90       	pop	r13
    89b2:	cf 90       	pop	r12
    89b4:	bf 90       	pop	r11
    89b6:	af 90       	pop	r10
    89b8:	9f 90       	pop	r9
    89ba:	8f 90       	pop	r8
    89bc:	7f 90       	pop	r7
    89be:	6f 90       	pop	r6
    89c0:	5f 90       	pop	r5
    89c2:	4f 90       	pop	r4
    89c4:	3f 90       	pop	r3
    89c6:	2f 90       	pop	r2
    89c8:	08 95       	ret

000089ca <MapSprite>:
			}
		}
	#endif

	
	void MapSprite(unsigned char startSprite,const char *map){
    89ca:	bf 92       	push	r11
    89cc:	cf 92       	push	r12
    89ce:	df 92       	push	r13
    89d0:	ef 92       	push	r14
    89d2:	ff 92       	push	r15
    89d4:	0f 93       	push	r16
    89d6:	1f 93       	push	r17
    89d8:	cf 93       	push	r28
    89da:	df 93       	push	r29
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    89dc:	fb 01       	movw	r30, r22
    89de:	c4 90       	lpm	r12, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    89e0:	31 96       	adiw	r30, 0x01	; 1
    89e2:	94 91       	lpm	r25, Z
    89e4:	0c 2d       	mov	r16, r12
    89e6:	10 e0       	ldi	r17, 0x00	; 0

		for(unsigned char dy=0;dy<mapHeight;dy++){
    89e8:	c0 e0       	ldi	r28, 0x00	; 0
    89ea:	d0 e0       	ldi	r29, 0x00	; 0
    89ec:	d1 2c       	mov	r13, r1
    89ee:	bc 2e       	mov	r11, r28
    89f0:	b8 0e       	add	r11, r24
    89f2:	d9 16       	cp	r13, r25
    89f4:	01 f1       	breq	.+64     	; 0x8a36 <MapSprite+0x6c>
    89f6:	20 e0       	ldi	r18, 0x00	; 0
    89f8:	30 e0       	ldi	r19, 0x00	; 0
    89fa:	7e 01       	movw	r14, r28
    89fc:	42 e0       	ldi	r20, 0x02	; 2
    89fe:	e4 0e       	add	r14, r20
    8a00:	f1 1c       	adc	r15, r1
    8a02:	ab 2d       	mov	r26, r11
    8a04:	a2 0f       	add	r26, r18
			for(unsigned char dx=0;dx<mapWidth;dx++){
    8a06:	2c 15       	cp	r18, r12
    8a08:	90 f4       	brcc	.+36     	; 0x8a2e <MapSprite+0x64>
    8a0a:	a7 01       	movw	r20, r14
    8a0c:	42 0f       	add	r20, r18
    8a0e:	53 1f       	adc	r21, r19
    8a10:	fb 01       	movw	r30, r22
    8a12:	e4 0f       	add	r30, r20
    8a14:	f5 1f       	adc	r31, r21
		
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
    8a16:	44 91       	lpm	r20, Z
				sprites[startSprite++].tileIndex=tile ;
    8a18:	f4 e0       	ldi	r31, 0x04	; 4
    8a1a:	af 9f       	mul	r26, r31
    8a1c:	d0 01       	movw	r26, r0
    8a1e:	11 24       	eor	r1, r1
    8a20:	a8 5d       	subi	r26, 0xD8	; 216
    8a22:	ba 4f       	sbci	r27, 0xFA	; 250
    8a24:	12 96       	adiw	r26, 0x02	; 2
    8a26:	4c 93       	st	X, r20
    8a28:	2f 5f       	subi	r18, 0xFF	; 255
    8a2a:	3f 4f       	sbci	r19, 0xFF	; 255
    8a2c:	ea cf       	rjmp	.-44     	; 0x8a02 <MapSprite+0x38>
	void MapSprite(unsigned char startSprite,const char *map){
		unsigned char tile;
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
		unsigned char mapHeight=pgm_read_byte(&(map[1]));

		for(unsigned char dy=0;dy<mapHeight;dy++){
    8a2e:	d3 94       	inc	r13
    8a30:	c0 0f       	add	r28, r16
    8a32:	d1 1f       	adc	r29, r17
    8a34:	dc cf       	rjmp	.-72     	; 0x89ee <MapSprite+0x24>
			 	tile=pgm_read_byte(&(map[(dy*mapWidth)+dx+2]));		
				sprites[startSprite++].tileIndex=tile ;
			}
		}

	}
    8a36:	df 91       	pop	r29
    8a38:	cf 91       	pop	r28
    8a3a:	1f 91       	pop	r17
    8a3c:	0f 91       	pop	r16
    8a3e:	ff 90       	pop	r15
    8a40:	ef 90       	pop	r14
    8a42:	df 90       	pop	r13
    8a44:	cf 90       	pop	r12
    8a46:	bf 90       	pop	r11
    8a48:	08 95       	ret

00008a4a <MoveSprite>:
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
	    }
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8a4a:	0f 93       	push	r16
    8a4c:	cf 93       	push	r28
    8a4e:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8a50:	30 e0       	ldi	r19, 0x00	; 0
    8a52:	30 17       	cp	r19, r16
    8a54:	e1 f0       	breq	.+56     	; 0x8a8e <MoveSprite+0x44>
    8a56:	b4 2f       	mov	r27, r20
    8a58:	a0 e2       	ldi	r26, 0x20	; 32
    8a5a:	a4 0f       	add	r26, r20
    8a5c:	78 2f       	mov	r23, r24
    8a5e:	72 0f       	add	r23, r18
    8a60:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8a62:	87 17       	cp	r24, r23
    8a64:	81 f0       	breq	.+32     	; 0x8a86 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8a66:	c4 e0       	ldi	r28, 0x04	; 4
    8a68:	8c 9f       	mul	r24, r28
    8a6a:	f0 01       	movw	r30, r0
    8a6c:	11 24       	eor	r1, r1
    8a6e:	e8 5d       	subi	r30, 0xD8	; 216
    8a70:	fa 4f       	sbci	r31, 0xFA	; 250
    8a72:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8a74:	41 3e       	cpi	r20, 0xE1	; 225
    8a76:	51 05       	cpc	r21, r1
    8a78:	14 f0       	brlt	.+4      	; 0x8a7e <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8a7a:	a1 83       	std	Z+1, r26	; 0x01
    8a7c:	01 c0       	rjmp	.+2      	; 0x8a80 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8a7e:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8a80:	8f 5f       	subi	r24, 0xFF	; 255
    8a82:	98 5f       	subi	r25, 0xF8	; 248
    8a84:	ee cf       	rjmp	.-36     	; 0x8a62 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8a86:	3f 5f       	subi	r19, 0xFF	; 255
    8a88:	48 5f       	subi	r20, 0xF8	; 248
    8a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    8a8c:	e2 cf       	rjmp	.-60     	; 0x8a52 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8a8e:	cf 91       	pop	r28
    8a90:	0f 91       	pop	r16
    8a92:	08 95       	ret

00008a94 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8a94:	e8 e2       	ldi	r30, 0x28	; 40
    8a96:	f5 e0       	ldi	r31, 0x05	; 5

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8a98:	80 ef       	ldi	r24, 0xF0	; 240
    8a9a:	80 83       	st	Z, r24
    8a9c:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8a9e:	95 e0       	ldi	r25, 0x05	; 5
    8aa0:	ec 35       	cpi	r30, 0x5C	; 92
    8aa2:	f9 07       	cpc	r31, r25
    8aa4:	d1 f7       	brne	.-12     	; 0x8a9a <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8aa6:	08 95       	ret

00008aa8 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8aa8:	4f 92       	push	r4
    8aaa:	5f 92       	push	r5
    8aac:	6f 92       	push	r6
    8aae:	7f 92       	push	r7
    8ab0:	8f 92       	push	r8
    8ab2:	9f 92       	push	r9
    8ab4:	af 92       	push	r10
    8ab6:	bf 92       	push	r11
    8ab8:	cf 92       	push	r12
    8aba:	df 92       	push	r13
    8abc:	ef 92       	push	r14
    8abe:	ff 92       	push	r15
    8ac0:	0f 93       	push	r16
    8ac2:	1f 93       	push	r17
    8ac4:	cf 93       	push	r28
    8ac6:	df 93       	push	r29
    8ac8:	68 2e       	mov	r6, r24
    8aca:	56 2e       	mov	r5, r22
    8acc:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8ace:	fa 01       	movw	r30, r20
    8ad0:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8ad2:	31 96       	adiw	r30, 0x01	; 1
    8ad4:	84 90       	lpm	r8, Z
    8ad6:	c7 2c       	mov	r12, r7
    8ad8:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8ada:	00 e0       	ldi	r16, 0x00	; 0
    8adc:	10 e0       	ldi	r17, 0x00	; 0
    8ade:	91 2c       	mov	r9, r1
    8ae0:	98 14       	cp	r9, r8
    8ae2:	f1 f0       	breq	.+60     	; 0x8b20 <DrawMap2+0x78>
    8ae4:	c0 e0       	ldi	r28, 0x00	; 0
    8ae6:	d0 e0       	ldi	r29, 0x00	; 0
    8ae8:	58 01       	movw	r10, r16
    8aea:	f2 e0       	ldi	r31, 0x02	; 2
    8aec:	af 0e       	add	r10, r31
    8aee:	b1 1c       	adc	r11, r1
    8af0:	49 2c       	mov	r4, r9
    8af2:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8af4:	c7 15       	cp	r28, r7
    8af6:	80 f4       	brcc	.+32     	; 0x8b18 <DrawMap2+0x70>
    8af8:	95 01       	movw	r18, r10
    8afa:	2c 0f       	add	r18, r28
    8afc:	3d 1f       	adc	r19, r29
    8afe:	f7 01       	movw	r30, r14
    8b00:	e2 0f       	add	r30, r18
    8b02:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8b04:	24 91       	lpm	r18, Z
    8b06:	42 2f       	mov	r20, r18
    8b08:	50 e0       	ldi	r21, 0x00	; 0
    8b0a:	64 2d       	mov	r22, r4
    8b0c:	8c 2f       	mov	r24, r28
    8b0e:	86 0d       	add	r24, r6
    8b10:	0e 94 62 38 	call	0x70c4	; 0x70c4 <SetTile>
    8b14:	21 96       	adiw	r28, 0x01	; 1
    8b16:	ee cf       	rjmp	.-36     	; 0x8af4 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8b18:	93 94       	inc	r9
    8b1a:	0c 0d       	add	r16, r12
    8b1c:	1d 1d       	adc	r17, r13
    8b1e:	e0 cf       	rjmp	.-64     	; 0x8ae0 <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8b20:	df 91       	pop	r29
    8b22:	cf 91       	pop	r28
    8b24:	1f 91       	pop	r17
    8b26:	0f 91       	pop	r16
    8b28:	ff 90       	pop	r15
    8b2a:	ef 90       	pop	r14
    8b2c:	df 90       	pop	r13
    8b2e:	cf 90       	pop	r12
    8b30:	bf 90       	pop	r11
    8b32:	af 90       	pop	r10
    8b34:	9f 90       	pop	r9
    8b36:	8f 90       	pop	r8
    8b38:	7f 90       	pop	r7
    8b3a:	6f 90       	pop	r6
    8b3c:	5f 90       	pop	r5
    8b3e:	4f 90       	pop	r4
    8b40:	08 95       	ret

00008b42 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8b42:	df 92       	push	r13
    8b44:	ef 92       	push	r14
    8b46:	ff 92       	push	r15
    8b48:	0f 93       	push	r16
    8b4a:	1f 93       	push	r17
    8b4c:	cf 93       	push	r28
    8b4e:	df 93       	push	r29
    8b50:	f6 2e       	mov	r15, r22
    8b52:	04 2f       	mov	r16, r20
    8b54:	d2 2e       	mov	r13, r18
    8b56:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8b58:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8b5a:	8a e0       	ldi	r24, 0x0A	; 10
    8b5c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8b5e:	01 11       	cpse	r16, r1
    8b60:	02 c0       	rjmp	.+4      	; 0x8b66 <PrintByte+0x24>
    8b62:	11 11       	cpse	r17, r1
    8b64:	07 c0       	rjmp	.+14     	; 0x8b74 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8b66:	80 2f       	mov	r24, r16
    8b68:	6e 2d       	mov	r22, r14
    8b6a:	0e 94 ef 4c 	call	0x99de	; 0x99de <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8b6e:	40 e1       	ldi	r20, 0x10	; 16
    8b70:	49 0f       	add	r20, r25
    8b72:	05 c0       	rjmp	.+10     	; 0x8b7e <PrintByte+0x3c>
		}else{
			if(zeropad){
    8b74:	dd 20       	and	r13, r13
    8b76:	11 f0       	breq	.+4      	; 0x8b7c <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8b78:	40 e1       	ldi	r20, 0x10	; 16
    8b7a:	01 c0       	rjmp	.+2      	; 0x8b7e <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8b7c:	40 e0       	ldi	r20, 0x00	; 0
    8b7e:	6f 2d       	mov	r22, r15
    8b80:	8c 2f       	mov	r24, r28
    8b82:	0e 94 5e 38 	call	0x70bc	; 0x70bc <SetFont>
			}
		}
		val=val/10;
    8b86:	80 2f       	mov	r24, r16
    8b88:	6e 2d       	mov	r22, r14
    8b8a:	0e 94 ef 4c 	call	0x99de	; 0x99de <__udivmodqi4>
    8b8e:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8b90:	1f 5f       	subi	r17, 0xFF	; 255
    8b92:	21 97       	sbiw	r28, 0x01	; 1
    8b94:	13 30       	cpi	r17, 0x03	; 3
    8b96:	19 f7       	brne	.-58     	; 0x8b5e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8b98:	df 91       	pop	r29
    8b9a:	cf 91       	pop	r28
    8b9c:	1f 91       	pop	r17
    8b9e:	0f 91       	pop	r16
    8ba0:	ff 90       	pop	r15
    8ba2:	ef 90       	pop	r14
    8ba4:	df 90       	pop	r13
    8ba6:	08 95       	ret

00008ba8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8ba8:	0f 93       	push	r16
    8baa:	1f 93       	push	r17
    8bac:	cf 93       	push	r28
    8bae:	df 93       	push	r29
    8bb0:	06 2f       	mov	r16, r22
    8bb2:	c4 2f       	mov	r28, r20
    8bb4:	d5 2f       	mov	r29, r21
    8bb6:	18 2f       	mov	r17, r24
    8bb8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8bba:	fe 01       	movw	r30, r28
    8bbc:	44 91       	lpm	r20, Z
		if(c!=0){
    8bbe:	44 23       	and	r20, r20
    8bc0:	49 f0       	breq	.+18     	; 0x8bd4 <Print+0x2c>
			c=((c&127)-32);			
    8bc2:	4f 77       	andi	r20, 0x7F	; 127
    8bc4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8bc6:	60 2f       	mov	r22, r16
    8bc8:	8c 2f       	mov	r24, r28
    8bca:	81 0f       	add	r24, r17
    8bcc:	0e 94 5e 38 	call	0x70bc	; 0x70bc <SetFont>
    8bd0:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8bd2:	f3 cf       	rjmp	.-26     	; 0x8bba <Print+0x12>
	
}
    8bd4:	df 91       	pop	r29
    8bd6:	cf 91       	pop	r28
    8bd8:	1f 91       	pop	r17
    8bda:	0f 91       	pop	r16
    8bdc:	08 95       	ret

00008bde <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8bde:	40 52       	subi	r20, 0x20	; 32
    8be0:	0c 94 5e 38 	jmp	0x70bc	; 0x70bc <SetFont>

00008be4 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8be4:	0f 93       	push	r16
    8be6:	1f 93       	push	r17
    8be8:	cf 93       	push	r28
    8bea:	df 93       	push	r29
    8bec:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8bee:	c0 e0       	ldi	r28, 0x00	; 0
    8bf0:	d0 e0       	ldi	r29, 0x00	; 0
    8bf2:	c0 17       	cp	r28, r16
    8bf4:	d1 07       	cpc	r29, r17
    8bf6:	44 f4       	brge	.+16     	; 0x8c08 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8bf8:	0e 94 78 38 	call	0x70f0	; 0x70f0 <GetVsyncFlag>
    8bfc:	88 23       	and	r24, r24
    8bfe:	e1 f3       	breq	.-8      	; 0x8bf8 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8c00:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8c04:	21 96       	adiw	r28, 0x01	; 1
    8c06:	f5 cf       	rjmp	.-22     	; 0x8bf2 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8c08:	df 91       	pop	r29
    8c0a:	cf 91       	pop	r28
    8c0c:	1f 91       	pop	r17
    8c0e:	0f 91       	pop	r16
    8c10:	08 95       	ret

00008c12 <DisplayLogo>:
	void DisplayLogo(){
	
		#if INTRO_LOGO !=0
			#define LOGO_X_POS 12
			
			InitMusicPlayer(logoInitPatches);
    8c12:	8d e1       	ldi	r24, 0x1D	; 29
    8c14:	99 e0       	ldi	r25, 0x09	; 9
    8c16:	0e 94 65 3a 	call	0x74ca	; 0x74ca <InitMusicPlayer>
			SetTileTable(logo_tileset);
    8c1a:	8d e1       	ldi	r24, 0x1D	; 29
    8c1c:	91 e0       	ldi	r25, 0x01	; 1
    8c1e:	0e 94 73 38 	call	0x70e6	; 0x70e6 <SetTileTable>
			
			//draw logo
			ClearVram();
    8c22:	0e 94 54 38 	call	0x70a8	; 0x70a8 <ClearVram>
			WaitVsync(15);		
    8c26:	8f e0       	ldi	r24, 0x0F	; 15
    8c28:	90 e0       	ldi	r25, 0x00	; 0
    8c2a:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <WaitVsync>

			#if INTRO_LOGO == 1 
				TriggerFx(0,0xff,true);
			#endif

			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8c2e:	47 e0       	ldi	r20, 0x07	; 7
    8c30:	51 e0       	ldi	r21, 0x01	; 1
    8c32:	6c e0       	ldi	r22, 0x0C	; 12
    8c34:	8c e0       	ldi	r24, 0x0C	; 12
    8c36:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>
			WaitVsync(3);
    8c3a:	83 e0       	ldi	r24, 0x03	; 3
    8c3c:	90 e0       	ldi	r25, 0x00	; 0
    8c3e:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo2);
    8c42:	46 ef       	ldi	r20, 0xF6	; 246
    8c44:	50 e0       	ldi	r21, 0x00	; 0
    8c46:	6c e0       	ldi	r22, 0x0C	; 12
    8c48:	8c e0       	ldi	r24, 0x0C	; 12
    8c4a:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>
			WaitVsync(2);
    8c4e:	82 e0       	ldi	r24, 0x02	; 2
    8c50:	90 e0       	ldi	r25, 0x00	; 0
    8c52:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <WaitVsync>
			DrawMap2(LOGO_X_POS,12,map_uzeboxlogo);
    8c56:	47 e0       	ldi	r20, 0x07	; 7
    8c58:	51 e0       	ldi	r21, 0x01	; 1
    8c5a:	6c e0       	ldi	r22, 0x0C	; 12
    8c5c:	8c e0       	ldi	r24, 0x0C	; 12
    8c5e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>

			#if INTRO_LOGO == 2
				SetMasterVolume(0xc0);
    8c62:	80 ec       	ldi	r24, 0xC0	; 192
    8c64:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <SetMasterVolume>
				TriggerNote(3,0,16,0xff);
    8c68:	2f ef       	ldi	r18, 0xFF	; 255
    8c6a:	40 e1       	ldi	r20, 0x10	; 16
    8c6c:	60 e0       	ldi	r22, 0x00	; 0
    8c6e:	83 e0       	ldi	r24, 0x03	; 3
    8c70:	0e 94 4e 3b 	call	0x769c	; 0x769c <TriggerNote>
			#endif 
		
			WaitVsync(65);
    8c74:	81 e4       	ldi	r24, 0x41	; 65
    8c76:	90 e0       	ldi	r25, 0x00	; 0
    8c78:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <WaitVsync>
			ClearVram();
    8c7c:	0e 94 54 38 	call	0x70a8	; 0x70a8 <ClearVram>
			WaitVsync(20);
    8c80:	84 e1       	ldi	r24, 0x14	; 20
    8c82:	90 e0       	ldi	r25, 0x00	; 0
    8c84:	0c 94 f2 45 	jmp	0x8be4	; 0x8be4 <WaitVsync>

00008c88 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8c88:	80 93 ad 0b 	sts	0x0BAD, r24
	currFadeFrame=0;
    8c8c:	10 92 b1 0b 	sts	0x0BB1, r1
	fadeActive=true;
    8c90:	81 e0       	ldi	r24, 0x01	; 1
    8c92:	80 93 b0 0b 	sts	0x0BB0, r24
		
	if(blocking){
    8c96:	66 23       	and	r22, r22
    8c98:	21 f0       	breq	.+8      	; 0x8ca2 <doFade+0x1a>
		while(fadeActive==true);
    8c9a:	80 91 b0 0b 	lds	r24, 0x0BB0
    8c9e:	81 11       	cpse	r24, r1
    8ca0:	fc cf       	rjmp	.-8      	; 0x8c9a <doFade+0x12>
    8ca2:	08 95       	ret

00008ca4 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8ca4:	81 11       	cpse	r24, r1
    8ca6:	03 c0       	rjmp	.+6      	; 0x8cae <FadeIn+0xa>
		DDRC=0xff;
    8ca8:	8f ef       	ldi	r24, 0xFF	; 255
    8caa:	87 b9       	out	0x07, r24	; 7
		return;
    8cac:	08 95       	ret
	}
	fadeStep=1;
    8cae:	91 e0       	ldi	r25, 0x01	; 1
    8cb0:	90 93 b2 0b 	sts	0x0BB2, r25
	fadeDir=1;
    8cb4:	90 93 ae 0b 	sts	0x0BAE, r25
	doFade(speed,blocking);
    8cb8:	0c 94 44 46 	jmp	0x8c88	; 0x8c88 <doFade>

00008cbc <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8cbc:	81 11       	cpse	r24, r1
    8cbe:	02 c0       	rjmp	.+4      	; 0x8cc4 <FadeOut+0x8>
		DDRC=0;
    8cc0:	17 b8       	out	0x07, r1	; 7
		return;
    8cc2:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8cc4:	9c e0       	ldi	r25, 0x0C	; 12
    8cc6:	90 93 b2 0b 	sts	0x0BB2, r25
	fadeDir=-1;
    8cca:	9f ef       	ldi	r25, 0xFF	; 255
    8ccc:	90 93 ae 0b 	sts	0x0BAE, r25
	doFade(speed,blocking);
    8cd0:	0c 94 44 46 	jmp	0x8c88	; 0x8c88 <doFade>

00008cd4 <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8cd4:	80 91 b0 0b 	lds	r24, 0x0BB0
    8cd8:	88 23       	and	r24, r24
    8cda:	01 f1       	breq	.+64     	; 0x8d1c <ProcessFading+0x48>
		if(currFadeFrame==0){
    8cdc:	80 91 b1 0b 	lds	r24, 0x0BB1
    8ce0:	81 11       	cpse	r24, r1
    8ce2:	19 c0       	rjmp	.+50     	; 0x8d16 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8ce4:	80 91 ad 0b 	lds	r24, 0x0BAD
    8ce8:	80 93 b1 0b 	sts	0x0BB1, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8cec:	e0 91 b2 0b 	lds	r30, 0x0BB2
    8cf0:	f0 e0       	ldi	r31, 0x00	; 0
    8cf2:	e7 51       	subi	r30, 0x17	; 23
    8cf4:	ff 4f       	sbci	r31, 0xFF	; 255
    8cf6:	e4 91       	lpm	r30, Z
    8cf8:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8cfa:	90 91 ae 0b 	lds	r25, 0x0BAE
    8cfe:	80 91 b2 0b 	lds	r24, 0x0BB2
    8d02:	89 0f       	add	r24, r25
    8d04:	80 93 b2 0b 	sts	0x0BB2, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8d08:	88 23       	and	r24, r24
    8d0a:	11 f0       	breq	.+4      	; 0x8d10 <ProcessFading+0x3c>
    8d0c:	8d 30       	cpi	r24, 0x0D	; 13
    8d0e:	31 f4       	brne	.+12     	; 0x8d1c <ProcessFading+0x48>
				fadeActive=false;
    8d10:	10 92 b0 0b 	sts	0x0BB0, r1
    8d14:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8d16:	81 50       	subi	r24, 0x01	; 1
    8d18:	80 93 b1 0b 	sts	0x0BB1, r24
    8d1c:	08 95       	ret

00008d1e <VideoModeVsync>:
	}

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8d1e:	0e 94 6a 46 	call	0x8cd4	; 0x8cd4 <ProcessFading>
		ProcessSprites();
    8d22:	0c 94 11 44 	jmp	0x8822	; 0x8822 <ProcessSprites>

00008d26 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8d26:	0f 93       	push	r16
    8d28:	1f 93       	push	r17
    8d2a:	cf 93       	push	r28
    8d2c:	df 93       	push	r29
    8d2e:	8c 01       	movw	r16, r24
    8d30:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    8d32:	80 e0       	ldi	r24, 0x00	; 0
    8d34:	0e 94 82 38 	call	0x7104	; 0x7104 <ReadJoypad>
    8d38:	f8 01       	movw	r30, r16
    8d3a:	95 83       	std	Z+5, r25	; 0x05
    8d3c:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    8d3e:	20 91 42 0b 	lds	r18, 0x0B42
    8d42:	30 91 43 0b 	lds	r19, 0x0B43
    8d46:	a9 01       	movw	r20, r18
    8d48:	40 95       	com	r20
    8d4a:	50 95       	com	r21
    8d4c:	48 23       	and	r20, r24
    8d4e:	59 23       	and	r21, r25
    8d50:	51 83       	std	Z+1, r21	; 0x01
    8d52:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8d54:	ac 01       	movw	r20, r24
    8d56:	40 95       	com	r20
    8d58:	50 95       	com	r21
    8d5a:	24 23       	and	r18, r20
    8d5c:	35 23       	and	r19, r21
    8d5e:	33 83       	std	Z+3, r19	; 0x03
    8d60:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    8d62:	90 93 43 0b 	sts	0x0B43, r25
    8d66:	80 93 42 0b 	sts	0x0B42, r24
	p2->held = ReadJoypad(1);
    8d6a:	81 e0       	ldi	r24, 0x01	; 1
    8d6c:	0e 94 82 38 	call	0x7104	; 0x7104 <ReadJoypad>
    8d70:	9d 83       	std	Y+5, r25	; 0x05
    8d72:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8d74:	20 91 40 0b 	lds	r18, 0x0B40
    8d78:	30 91 41 0b 	lds	r19, 0x0B41
    8d7c:	a9 01       	movw	r20, r18
    8d7e:	40 95       	com	r20
    8d80:	50 95       	com	r21
    8d82:	48 23       	and	r20, r24
    8d84:	59 23       	and	r21, r25
    8d86:	59 83       	std	Y+1, r21	; 0x01
    8d88:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8d8a:	ac 01       	movw	r20, r24
    8d8c:	40 95       	com	r20
    8d8e:	50 95       	com	r21
    8d90:	24 23       	and	r18, r20
    8d92:	35 23       	and	r19, r21
    8d94:	3b 83       	std	Y+3, r19	; 0x03
    8d96:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    8d98:	90 93 41 0b 	sts	0x0B41, r25
    8d9c:	80 93 40 0b 	sts	0x0B40, r24
}
    8da0:	df 91       	pop	r29
    8da2:	cf 91       	pop	r28
    8da4:	1f 91       	pop	r17
    8da6:	0f 91       	pop	r16
    8da8:	08 95       	ret

00008daa <LBCopyChars>:

void LBCopyChars(unsigned char* dst, unsigned char *src, unsigned char count)
/*
 * Custom string copy
 */
{
    8daa:	36 2f       	mov	r19, r22
	for (unsigned char i = 0; i < count; i++)
    8dac:	fb 01       	movw	r30, r22
    8dae:	2e 2f       	mov	r18, r30
    8db0:	23 1b       	sub	r18, r19
    8db2:	24 17       	cp	r18, r20
    8db4:	28 f4       	brcc	.+10     	; 0x8dc0 <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8db6:	21 91       	ld	r18, Z+
    8db8:	dc 01       	movw	r26, r24
    8dba:	2d 93       	st	X+, r18
    8dbc:	cd 01       	movw	r24, r26
    8dbe:	f7 cf       	rjmp	.-18     	; 0x8dae <LBCopyChars+0x4>
	}
}
    8dc0:	08 95       	ret

00008dc2 <LBPrintStr>:

void LBPrintStr(unsigned char x, unsigned char y, unsigned char* txt, unsigned char count)
{
    8dc2:	af 92       	push	r10
    8dc4:	bf 92       	push	r11
    8dc6:	cf 92       	push	r12
    8dc8:	df 92       	push	r13
    8dca:	ef 92       	push	r14
    8dcc:	ff 92       	push	r15
    8dce:	0f 93       	push	r16
    8dd0:	1f 93       	push	r17
    8dd2:	cf 93       	push	r28
    8dd4:	df 93       	push	r29
    8dd6:	1f 92       	push	r1
    8dd8:	cd b7       	in	r28, 0x3d	; 61
    8dda:	de b7       	in	r29, 0x3e	; 62
    8ddc:	7a 01       	movw	r14, r20
	for (unsigned char i = 0; i < count; i++)
    8dde:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    8de0:	c6 2e       	mov	r12, r22
    8de2:	d1 2c       	mov	r13, r1
    8de4:	90 e0       	ldi	r25, 0x00	; 0
    8de6:	5c 01       	movw	r10, r24
    8de8:	a4 1a       	sub	r10, r20
    8dea:	b5 0a       	sbc	r11, r21
    8dec:	80 2f       	mov	r24, r16
    8dee:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(unsigned char x, unsigned char y, unsigned char* txt, unsigned char count)
{
	for (unsigned char i = 0; i < count; i++)
    8df0:	82 17       	cp	r24, r18
    8df2:	60 f4       	brcc	.+24     	; 0x8e0c <LBPrintStr+0x4a>
    8df4:	c5 01       	movw	r24, r10
    8df6:	80 0f       	add	r24, r16
    8df8:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    8dfa:	f8 01       	movw	r30, r16
    8dfc:	41 91       	ld	r20, Z+
    8dfe:	8f 01       	movw	r16, r30
    8e00:	b6 01       	movw	r22, r12
    8e02:	29 83       	std	Y+1, r18	; 0x01
    8e04:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
    8e08:	29 81       	ldd	r18, Y+1	; 0x01
    8e0a:	f0 cf       	rjmp	.-32     	; 0x8dec <LBPrintStr+0x2a>
	}
}
    8e0c:	0f 90       	pop	r0
    8e0e:	df 91       	pop	r29
    8e10:	cf 91       	pop	r28
    8e12:	1f 91       	pop	r17
    8e14:	0f 91       	pop	r16
    8e16:	ff 90       	pop	r15
    8e18:	ef 90       	pop	r14
    8e1a:	df 90       	pop	r13
    8e1c:	cf 90       	pop	r12
    8e1e:	bf 90       	pop	r11
    8e20:	af 90       	pop	r10
    8e22:	08 95       	ret

00008e24 <random>:

int random(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8e24:	fc 01       	movw	r30, r24
	static unsigned char shift_count = 0;
	int shifted = random_seed >> shift_count;
    8e26:	90 91 3f 0b 	lds	r25, 0x0B3F
    8e2a:	20 91 ae 0e 	lds	r18, 0x0EAE
    8e2e:	30 91 af 0e 	lds	r19, 0x0EAF
    8e32:	09 2e       	mov	r0, r25
    8e34:	02 c0       	rjmp	.+4      	; 0x8e3a <random+0x16>
    8e36:	35 95       	asr	r19
    8e38:	27 95       	ror	r18
    8e3a:	0a 94       	dec	r0
    8e3c:	e2 f7       	brpl	.-8      	; 0x8e36 <random+0x12>
	int delta = to - from;
    8e3e:	6e 1b       	sub	r22, r30
    8e40:	7f 0b       	sbc	r23, r31

	shift_count++;
    8e42:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    8e44:	90 31       	cpi	r25, 0x10	; 16
    8e46:	18 f4       	brcc	.+6      	; 0x8e4e <random+0x2a>
{
	static unsigned char shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8e48:	90 93 3f 0b 	sts	0x0B3F, r25
    8e4c:	02 c0       	rjmp	.+4      	; 0x8e52 <random+0x2e>
	if (shift_count >= 16) shift_count = 0;
    8e4e:	10 92 3f 0b 	sts	0x0B3F, r1

	return from + ((delta + shifted) % delta);
    8e52:	cb 01       	movw	r24, r22
    8e54:	82 0f       	add	r24, r18
    8e56:	93 1f       	adc	r25, r19
    8e58:	0e 94 0f 4d 	call	0x9a1e	; 0x9a1e <__divmodhi4>
}
    8e5c:	8e 0f       	add	r24, r30
    8e5e:	9f 1f       	adc	r25, r31
    8e60:	08 95       	ret

00008e62 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    8e62:	cf 93       	push	r28
    8e64:	df 93       	push	r29
    8e66:	ec 01       	movw	r28, r24
	unsigned char status = 0;
	status = EepromReadBlock(block->id, block);
    8e68:	bc 01       	movw	r22, r24
    8e6a:	88 81       	ld	r24, Y
    8e6c:	99 81       	ldd	r25, Y+1	; 0x01
    8e6e:	0e 94 98 39 	call	0x7330	; 0x7330 <EepromReadBlock>
	if (status == 0x03)
    8e72:	83 30       	cpi	r24, 0x03	; 3
    8e74:	29 f4       	brne	.+10     	; 0x8e80 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    8e76:	ce 01       	movw	r24, r28
	}
}
    8e78:	df 91       	pop	r29
    8e7a:	cf 91       	pop	r28
{
	unsigned char status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    8e7c:	0c 94 2b 39 	jmp	0x7256	; 0x7256 <EepromWriteBlock>
	}
}
    8e80:	df 91       	pop	r29
    8e82:	cf 91       	pop	r28
    8e84:	08 95       	ret

00008e86 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    8e86:	61 e0       	ldi	r22, 0x01	; 1
    8e88:	83 e0       	ldi	r24, 0x03	; 3
    8e8a:	0e 94 5e 46 	call	0x8cbc	; 0x8cbc <FadeOut>
	ClearVram();
    8e8e:	0e 94 54 38 	call	0x70a8	; 0x70a8 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8e92:	60 e0       	ldi	r22, 0x00	; 0
    8e94:	83 e0       	ldi	r24, 0x03	; 3
    8e96:	0c 94 52 46 	jmp	0x8ca4	; 0x8ca4 <FadeIn>

00008e9a <clear_sprites>:
}

void clear_sprites()
{
    8e9a:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    8e9c:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite(i, map_none);
    8e9e:	61 e7       	ldi	r22, 0x71	; 113
    8ea0:	77 e3       	ldi	r23, 0x37	; 55
    8ea2:	8c 2f       	mov	r24, r28
    8ea4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
    8ea8:	cf 5f       	subi	r28, 0xFF	; 255
	FadeIn(FRAMES_PER_FADE, false);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    8eaa:	cd 30       	cpi	r28, 0x0D	; 13
    8eac:	c1 f7       	brne	.-16     	; 0x8e9e <clear_sprites+0x4>
	{
		MapSprite(i, map_none);
	}
}
    8eae:	cf 91       	pop	r28
    8eb0:	08 95       	ret

00008eb2 <reset_game_state>:

}

void reset_game_state()
{
	game.current_screen = SPLASH;
    8eb2:	ea e3       	ldi	r30, 0x3A	; 58
    8eb4:	fb e0       	ldi	r31, 0x0B	; 11
    8eb6:	10 82       	st	Z, r1
	game.current_level = 0;
    8eb8:	11 82       	std	Z+1, r1	; 0x01
	game.level_count = LEVEL_COUNT;
    8eba:	81 e0       	ldi	r24, 0x01	; 1
    8ebc:	82 83       	std	Z+2, r24	; 0x02
	game.selection = PVCPU;
    8ebe:	14 82       	std	Z+4, r1	; 0x04
	game.paused = 0;
    8ec0:	13 82       	std	Z+3, r1	; 0x03
	EepromWriteBlock(block);
}

void reset_player_state(Player* s)
{
	s->banter_frame = FRAMES_PER_BANTER;
    8ec2:	e8 e7       	ldi	r30, 0x78	; 120
    8ec4:	f1 e0       	ldi	r31, 0x01	; 1
    8ec6:	8e e1       	ldi	r24, 0x1E	; 30
    8ec8:	85 87       	std	Z+13, r24	; 0x0d
	s->banter_index = 0;
    8eca:	16 86       	std	Z+14, r1	; 0x0e
	s->score = 0;
    8ecc:	14 82       	std	Z+4, r1	; 0x04
	s->level_score = 0;
    8ece:	15 82       	std	Z+5, r1	; 0x05
	EepromWriteBlock(block);
}

void reset_player_state(Player* s)
{
	s->banter_frame = FRAMES_PER_BANTER;
    8ed0:	e1 e4       	ldi	r30, 0x41	; 65
    8ed2:	f1 e0       	ldi	r31, 0x01	; 1
    8ed4:	85 87       	std	Z+13, r24	; 0x0d
	s->banter_index = 0;
    8ed6:	16 86       	std	Z+14, r1	; 0x0e
	s->score = 0;
    8ed8:	14 82       	std	Z+4, r1	; 0x04
	s->level_score = 0;
    8eda:	15 82       	std	Z+5, r1	; 0x05
    8edc:	08 95       	ret

00008ede <load_level>:
	reset_player_state(&player1);
	reset_player_state(&player2);
}

void load_level(int level_number)
{
    8ede:	cf 93       	push	r28
    8ee0:	df 93       	push	r29
    int level_start = level_number*30*25;
    8ee2:	2e ee       	ldi	r18, 0xEE	; 238
    8ee4:	32 e0       	ldi	r19, 0x02	; 2
    8ee6:	82 9f       	mul	r24, r18
    8ee8:	e0 01       	movw	r28, r0
    8eea:	83 9f       	mul	r24, r19
    8eec:	d0 0d       	add	r29, r0
    8eee:	92 9f       	mul	r25, r18
    8ef0:	d0 0d       	add	r29, r0
    8ef2:	11 24       	eor	r1, r1

	fade_through();
    8ef4:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
	game.current_screen = LEVEL;
    8ef8:	83 e0       	ldi	r24, 0x03	; 3
    8efa:	80 93 3a 0b 	sts	0x0B3A, r24
	game.current_level = 0;
    8efe:	10 92 3b 0b 	sts	0x0B3B, r1
	game.level_count = LEVEL_COUNT;
    8f02:	81 e0       	ldi	r24, 0x01	; 1
    8f04:	80 93 3c 0b 	sts	0x0B3C, r24
	for (int i = 0; i < 30*25; i++)
    8f08:	20 e0       	ldi	r18, 0x00	; 0
    8f0a:	30 e0       	ldi	r19, 0x00	; 0
    8f0c:	f9 01       	movw	r30, r18
    8f0e:	ec 0f       	add	r30, r28
    8f10:	fd 1f       	adc	r31, r29
    8f12:	ec 52       	subi	r30, 0x2C	; 44
    8f14:	f6 4e       	sbci	r31, 0xE6	; 230
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    8f16:	e4 91       	lpm	r30, Z
    8f18:	d9 01       	movw	r26, r18
    8f1a:	a1 54       	subi	r26, 0x41	; 65
    8f1c:	b4 4f       	sbci	r27, 0xF4	; 244
    8f1e:	11 96       	adiw	r26, 0x01	; 1
    8f20:	ec 93       	st	X, r30

	fade_through();
	game.current_screen = LEVEL;
	game.current_level = 0;
	game.level_count = LEVEL_COUNT;
	for (int i = 0; i < 30*25; i++)
    8f22:	2f 5f       	subi	r18, 0xFF	; 255
    8f24:	3f 4f       	sbci	r19, 0xFF	; 255
    8f26:	2e 3e       	cpi	r18, 0xEE	; 238
    8f28:	82 e0       	ldi	r24, 0x02	; 2
    8f2a:	38 07       	cpc	r19, r24
    8f2c:	79 f7       	brne	.-34     	; 0x8f0c <load_level+0x2e>
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
	}
	player1.level_score = 0;
    8f2e:	10 92 7d 01 	sts	0x017D, r1
	player2.level_score = 0;
    8f32:	10 92 46 01 	sts	0x0146, r1
	clear_sprites();
}
    8f36:	df 91       	pop	r29
    8f38:	cf 91       	pop	r28
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
	}
	player1.level_score = 0;
	player2.level_score = 0;
	clear_sprites();
    8f3a:	0c 94 4d 47 	jmp	0x8e9a	; 0x8e9a <clear_sprites>

00008f3e <save_score>:
}

void save_score()
{
    8f3e:	cf 92       	push	r12
    8f40:	df 92       	push	r13
    8f42:	ff 92       	push	r15
    8f44:	0f 93       	push	r16
    8f46:	1f 93       	push	r17
    8f48:	cf 93       	push	r28
    8f4a:	df 93       	push	r29
    8f4c:	cd b7       	in	r28, 0x3d	; 61
    8f4e:	de b7       	in	r29, 0x3e	; 62
    8f50:	28 97       	sbiw	r28, 0x08	; 8
    8f52:	0f b6       	in	r0, 0x3f	; 63
    8f54:	f8 94       	cli
    8f56:	de bf       	out	0x3e, r29	; 62
    8f58:	0f be       	out	0x3f, r0	; 63
    8f5a:	cd bf       	out	0x3d, r28	; 61
	unsigned char save_delta = 0;
	unsigned char saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    8f5c:	90 91 7c 01 	lds	r25, 0x017C
    8f60:	80 91 45 01 	lds	r24, 0x0145
    8f64:	98 17       	cp	r25, r24
    8f66:	28 f4       	brcc	.+10     	; 0x8f72 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    8f68:	e8 e7       	ldi	r30, 0x78	; 120
    8f6a:	f1 e0       	ldi	r31, 0x01	; 1
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    8f6c:	a1 e4       	ldi	r26, 0x41	; 65
    8f6e:	b1 e0       	ldi	r27, 0x01	; 1
    8f70:	04 c0       	rjmp	.+8      	; 0x8f7a <save_score+0x3c>
	unsigned char tmp_score[4];
	unsigned char save_score[4];
	unsigned char save_delta = 0;
	unsigned char saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    8f72:	e1 e4       	ldi	r30, 0x41	; 65
    8f74:	f1 e0       	ldi	r31, 0x01	; 1
	unsigned char cur_delta = 0;
	unsigned char tmp_score[4];
	unsigned char save_score[4];
	unsigned char save_delta = 0;
	unsigned char saved = 0;
	Player* p_win = &player1;
    8f76:	a8 e7       	ldi	r26, 0x78	; 120
    8f78:	b1 e0       	ldi	r27, 0x01	; 1
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    8f7a:	8c 91       	ld	r24, X
    8f7c:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    8f7e:	80 81       	ld	r24, Z
    8f80:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    8f82:	14 96       	adiw	r26, 0x04	; 4
    8f84:	8c 91       	ld	r24, X
    8f86:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    8f88:	94 81       	ldd	r25, Z+4	; 0x04
    8f8a:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    8f8c:	f8 2e       	mov	r15, r24
    8f8e:	f9 1a       	sub	r15, r25
    8f90:	00 e0       	ldi	r16, 0x00	; 0
    8f92:	10 e0       	ldi	r17, 0x00	; 0
{
	unsigned char cur_delta = 0;
	unsigned char tmp_score[4];
	unsigned char save_score[4];
	unsigned char save_delta = 0;
	unsigned char saved = 0;
    8f94:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (unsigned char i = 0; i < 28; i += 4)
	{
		if (saved)
    8f96:	81 11       	cpse	r24, r1
    8f98:	08 c0       	rjmp	.+16     	; 0x8faa <save_score+0x6c>
    8f9a:	f8 01       	movw	r30, r16
    8f9c:	ef 5f       	subi	r30, 0xFF	; 255
    8f9e:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    8fa0:	94 81       	ldd	r25, Z+4	; 0x04
    8fa2:	25 81       	ldd	r18, Z+5	; 0x05
    8fa4:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    8fa6:	9f 15       	cp	r25, r15
    8fa8:	d0 f4       	brcc	.+52     	; 0x8fde <save_score+0xa0>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    8faa:	44 e0       	ldi	r20, 0x04	; 4
    8fac:	c8 01       	movw	r24, r16
    8fae:	8d 5f       	subi	r24, 0xFD	; 253
    8fb0:	9e 4f       	sbci	r25, 0xFE	; 254
    8fb2:	6c 01       	movw	r12, r24
    8fb4:	bc 01       	movw	r22, r24
    8fb6:	ce 01       	movw	r24, r28
    8fb8:	05 96       	adiw	r24, 0x05	; 5
    8fba:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    8fbe:	44 e0       	ldi	r20, 0x04	; 4
    8fc0:	be 01       	movw	r22, r28
    8fc2:	6f 5f       	subi	r22, 0xFF	; 255
    8fc4:	7f 4f       	sbci	r23, 0xFF	; 255
    8fc6:	c6 01       	movw	r24, r12
    8fc8:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    8fcc:	44 e0       	ldi	r20, 0x04	; 4
    8fce:	be 01       	movw	r22, r28
    8fd0:	6b 5f       	subi	r22, 0xFB	; 251
    8fd2:	7f 4f       	sbci	r23, 0xFF	; 255
    8fd4:	ce 01       	movw	r24, r28
    8fd6:	01 96       	adiw	r24, 0x01	; 1
    8fd8:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
				saved = 1;
    8fdc:	81 e0       	ldi	r24, 0x01	; 1
    8fde:	0c 5f       	subi	r16, 0xFC	; 252
    8fe0:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (unsigned char i = 0; i < 28; i += 4)
    8fe2:	0c 31       	cpi	r16, 0x1C	; 28
    8fe4:	11 05       	cpc	r17, r1
    8fe6:	b9 f6       	brne	.-82     	; 0x8f96 <save_score+0x58>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    8fe8:	81 e0       	ldi	r24, 0x01	; 1
    8fea:	91 e0       	ldi	r25, 0x01	; 1
    8fec:	0e 94 2b 39 	call	0x7256	; 0x7256 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    8ff0:	28 96       	adiw	r28, 0x08	; 8
    8ff2:	0f b6       	in	r0, 0x3f	; 63
    8ff4:	f8 94       	cli
    8ff6:	de bf       	out	0x3e, r29	; 62
    8ff8:	0f be       	out	0x3f, r0	; 63
    8ffa:	cd bf       	out	0x3d, r28	; 61
    8ffc:	df 91       	pop	r29
    8ffe:	cf 91       	pop	r28
    9000:	1f 91       	pop	r17
    9002:	0f 91       	pop	r16
    9004:	ff 90       	pop	r15
    9006:	df 90       	pop	r13
    9008:	cf 90       	pop	r12
    900a:	08 95       	ret

0000900c <update_level_helper>:

unsigned char update_level_helper(JoyPadState* p, Player* player)
{
    900c:	cf 93       	push	r28
    900e:	df 93       	push	r29
    9010:	eb 01       	movw	r28, r22
	if ((p->pressed & BTN_START))
    9012:	fc 01       	movw	r30, r24
    9014:	80 81       	ld	r24, Z
    9016:	91 81       	ldd	r25, Z+1	; 0x01
    9018:	83 ff       	sbrs	r24, 3
    901a:	06 c0       	rjmp	.+12     	; 0x9028 <update_level_helper+0x1c>
	{
		game.paused = game.paused ^ 1;
    901c:	30 91 3d 0b 	lds	r19, 0x0B3D
    9020:	21 e0       	ldi	r18, 0x01	; 1
    9022:	23 27       	eor	r18, r19
    9024:	20 93 3d 0b 	sts	0x0B3D, r18
	}
	if (!game.paused)
    9028:	20 91 3d 0b 	lds	r18, 0x0B3D
    902c:	21 11       	cpse	r18, r1
    902e:	0e c0       	rjmp	.+28     	; 0x904c <update_level_helper+0x40>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    9030:	93 ff       	sbrs	r25, 3
    9032:	19 c0       	rjmp	.+50     	; 0x9066 <update_level_helper+0x5a>
    9034:	8d 85       	ldd	r24, Y+13	; 0x0d
    9036:	8e 31       	cpi	r24, 0x1E	; 30
    9038:	b1 f4       	brne	.+44     	; 0x9066 <update_level_helper+0x5a>
		{
			player->banter_frame = 0;
    903a:	1d 86       	std	Y+13, r1	; 0x0d
			player->banter_index = (unsigned char) random(0, 9);
    903c:	69 e0       	ldi	r22, 0x09	; 9
    903e:	70 e0       	ldi	r23, 0x00	; 0
    9040:	80 e0       	ldi	r24, 0x00	; 0
    9042:	90 e0       	ldi	r25, 0x00	; 0
    9044:	0e 94 12 47 	call	0x8e24	; 0x8e24 <random>
    9048:	8e 87       	std	Y+14, r24	; 0x0e
    904a:	0d c0       	rjmp	.+26     	; 0x9066 <update_level_helper+0x5a>
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    904c:	91 ff       	sbrs	r25, 1
    904e:	0b c0       	rjmp	.+22     	; 0x9066 <update_level_helper+0x5a>
		{
			save_score();
    9050:	0e 94 9f 47 	call	0x8f3e	; 0x8f3e <save_score>
			fade_through();
    9054:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
			reset_game_state();
    9058:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <reset_game_state>
			game.current_screen = TANK_RANK;
    905c:	81 e0       	ldi	r24, 0x01	; 1
    905e:	80 93 3a 0b 	sts	0x0B3A, r24
			return 0;
    9062:	80 e0       	ldi	r24, 0x00	; 0
    9064:	01 c0       	rjmp	.+2      	; 0x9068 <update_level_helper+0x5c>
		}
	}
	return 1;
    9066:	81 e0       	ldi	r24, 0x01	; 1
}
    9068:	df 91       	pop	r29
    906a:	cf 91       	pop	r28
    906c:	08 95       	ret

0000906e <render_score>:

void render_score(Player* player, unsigned char x, unsigned char banter_x)
{
    906e:	cf 92       	push	r12
    9070:	df 92       	push	r13
    9072:	ff 92       	push	r15
    9074:	0f 93       	push	r16
    9076:	1f 93       	push	r17
    9078:	cf 93       	push	r28
    907a:	df 93       	push	r29
    907c:	ec 01       	movw	r28, r24
    907e:	06 2f       	mov	r16, r22
    9080:	f4 2e       	mov	r15, r20
	LBPrintStr(x+10, 0, player->handle, 3);
    9082:	ac 01       	movw	r20, r24
    9084:	4f 5f       	subi	r20, 0xFF	; 255
    9086:	5f 4f       	sbci	r21, 0xFF	; 255
    9088:	23 e0       	ldi	r18, 0x03	; 3
    908a:	60 e0       	ldi	r22, 0x00	; 0
    908c:	8a e0       	ldi	r24, 0x0A	; 10
    908e:	80 0f       	add	r24, r16
    9090:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <LBPrintStr>
	Print(x, 0, strScore);
    9094:	10 e0       	ldi	r17, 0x00	; 0
    9096:	4d eb       	ldi	r20, 0xBD	; 189
    9098:	58 e1       	ldi	r21, 0x18	; 24
    909a:	60 e0       	ldi	r22, 0x00	; 0
    909c:	70 e0       	ldi	r23, 0x00	; 0
    909e:	c8 01       	movw	r24, r16
    90a0:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	PrintByte(x+8, 0, player->level_score, false);
    90a4:	68 01       	movw	r12, r16
    90a6:	88 e0       	ldi	r24, 0x08	; 8
    90a8:	c8 0e       	add	r12, r24
    90aa:	d1 1c       	adc	r13, r1
    90ac:	20 e0       	ldi	r18, 0x00	; 0
    90ae:	4d 81       	ldd	r20, Y+5	; 0x05
    90b0:	60 e0       	ldi	r22, 0x00	; 0
    90b2:	70 e0       	ldi	r23, 0x00	; 0
    90b4:	c6 01       	movw	r24, r12
    90b6:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <PrintByte>
	Print(x, 1, strTotal);
    90ba:	46 eb       	ldi	r20, 0xB6	; 182
    90bc:	58 e1       	ldi	r21, 0x18	; 24
    90be:	61 e0       	ldi	r22, 0x01	; 1
    90c0:	70 e0       	ldi	r23, 0x00	; 0
    90c2:	c8 01       	movw	r24, r16
    90c4:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	PrintByte(x+8, 1, player->score, false);
    90c8:	20 e0       	ldi	r18, 0x00	; 0
    90ca:	4c 81       	ldd	r20, Y+4	; 0x04
    90cc:	61 e0       	ldi	r22, 0x01	; 1
    90ce:	70 e0       	ldi	r23, 0x00	; 0
    90d0:	c6 01       	movw	r24, r12
    90d2:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <PrintByte>

	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    90d6:	2d 85       	ldd	r18, Y+13	; 0x0d
    90d8:	8f 2d       	mov	r24, r15
    90da:	90 e0       	ldi	r25, 0x00	; 0
    90dc:	2e 31       	cpi	r18, 0x1E	; 30
    90de:	b9 f0       	breq	.+46     	; 0x910e <render_score+0xa0>
	{
		Print(banter_x, 2, banter_map[player->banter_index]);
    90e0:	ee 85       	ldd	r30, Y+14	; 0x0e
    90e2:	f0 e0       	ldi	r31, 0x00	; 0
    90e4:	ee 0f       	add	r30, r30
    90e6:	ff 1f       	adc	r31, r31
    90e8:	e1 55       	subi	r30, 0x51	; 81
    90ea:	fe 4f       	sbci	r31, 0xFE	; 254
    90ec:	40 81       	ld	r20, Z
    90ee:	51 81       	ldd	r21, Z+1	; 0x01
    90f0:	62 e0       	ldi	r22, 0x02	; 2
    90f2:	70 e0       	ldi	r23, 0x00	; 0
    90f4:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		player->banter_frame++;
    90f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    90fa:	8f 5f       	subi	r24, 0xFF	; 255
    90fc:	8d 87       	std	Y+13, r24	; 0x0d
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
	}
}
    90fe:	df 91       	pop	r29
    9100:	cf 91       	pop	r28
    9102:	1f 91       	pop	r17
    9104:	0f 91       	pop	r16
    9106:	ff 90       	pop	r15
    9108:	df 90       	pop	r13
    910a:	cf 90       	pop	r12
    910c:	08 95       	ret
		Print(banter_x, 2, banter_map[player->banter_index]);
		player->banter_frame++;
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
    910e:	44 ec       	ldi	r20, 0xC4	; 196
    9110:	58 e1       	ldi	r21, 0x18	; 24
    9112:	62 e0       	ldi	r22, 0x02	; 2
    9114:	70 e0       	ldi	r23, 0x00	; 0
	}
}
    9116:	df 91       	pop	r29
    9118:	cf 91       	pop	r28
    911a:	1f 91       	pop	r17
    911c:	0f 91       	pop	r16
    911e:	ff 90       	pop	r15
    9120:	df 90       	pop	r13
    9122:	cf 90       	pop	r12
		Print(banter_x, 2, banter_map[player->banter_index]);
		player->banter_frame++;
	}
	else
	{
		Print(banter_x, 2, strBanterClear);
    9124:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <Print>

00009128 <update_level>:
	}
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    9128:	0f 93       	push	r16
    912a:	1f 93       	push	r17
    912c:	cf 93       	push	r28
    912e:	df 93       	push	r29
    9130:	eb 01       	movw	r28, r22
	unsigned char do_render = 0;

	// Update
	do_render = update_level_helper(p1, &player1);
    9132:	68 e7       	ldi	r22, 0x78	; 120
    9134:	71 e0       	ldi	r23, 0x01	; 1
    9136:	0e 94 06 48 	call	0x900c	; 0x900c <update_level_helper>
	if (do_render)
    913a:	88 23       	and	r24, r24
    913c:	09 f4       	brne	.+2      	; 0x9140 <update_level+0x18>
    913e:	8d c0       	rjmp	.+282    	; 0x925a <update_level+0x132>
	{
		do_render = update_level_helper(p2, &player2);
    9140:	61 e4       	ldi	r22, 0x41	; 65
    9142:	71 e0       	ldi	r23, 0x01	; 1
    9144:	ce 01       	movw	r24, r28
    9146:	0e 94 06 48 	call	0x900c	; 0x900c <update_level_helper>
	}

	// Render
	if (do_render)
    914a:	88 23       	and	r24, r24
    914c:	09 f4       	brne	.+2      	; 0x9150 <update_level+0x28>
    914e:	85 c0       	rjmp	.+266    	; 0x925a <update_level+0x132>
	{
		render_score(&player1, 0, 15);
    9150:	4f e0       	ldi	r20, 0x0F	; 15
    9152:	60 e0       	ldi	r22, 0x00	; 0
    9154:	88 e7       	ldi	r24, 0x78	; 120
    9156:	91 e0       	ldi	r25, 0x01	; 1
    9158:	0e 94 37 48 	call	0x906e	; 0x906e <render_score>
		render_score(&player2, 15, 0);
    915c:	40 e0       	ldi	r20, 0x00	; 0
    915e:	6f e0       	ldi	r22, 0x0F	; 15
    9160:	81 e4       	ldi	r24, 0x41	; 65
    9162:	91 e0       	ldi	r25, 0x01	; 1
    9164:	0e 94 37 48 	call	0x906e	; 0x906e <render_score>
		Print(14, 0, strVertSep);
    9168:	4a e7       	ldi	r20, 0x7A	; 122
    916a:	59 e1       	ldi	r21, 0x19	; 25
    916c:	60 e0       	ldi	r22, 0x00	; 0
    916e:	70 e0       	ldi	r23, 0x00	; 0
    9170:	8e e0       	ldi	r24, 0x0E	; 14
    9172:	90 e0       	ldi	r25, 0x00	; 0
    9174:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(14, 1, strVertSep);
    9178:	4a e7       	ldi	r20, 0x7A	; 122
    917a:	59 e1       	ldi	r21, 0x19	; 25
    917c:	61 e0       	ldi	r22, 0x01	; 1
    917e:	70 e0       	ldi	r23, 0x00	; 0
    9180:	8e e0       	ldi	r24, 0x0E	; 14
    9182:	90 e0       	ldi	r25, 0x00	; 0
    9184:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(14, 2, strVertSep);
    9188:	4a e7       	ldi	r20, 0x7A	; 122
    918a:	59 e1       	ldi	r21, 0x19	; 25
    918c:	62 e0       	ldi	r22, 0x02	; 2
    918e:	70 e0       	ldi	r23, 0x00	; 0
    9190:	8e e0       	ldi	r24, 0x0E	; 14
    9192:	90 e0       	ldi	r25, 0x00	; 0
    9194:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>

		if (game.paused)
    9198:	80 91 3d 0b 	lds	r24, 0x0B3D
    919c:	88 23       	and	r24, r24
    919e:	d1 f0       	breq	.+52     	; 0x91d4 <update_level+0xac>
		{
			DrawMap2(8, 12, (const char*) map_pause);
    91a0:	48 e9       	ldi	r20, 0x98	; 152
    91a2:	57 e3       	ldi	r21, 0x37	; 55
    91a4:	6c e0       	ldi	r22, 0x0C	; 12
    91a6:	88 e0       	ldi	r24, 0x08	; 8
    91a8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>
			Print(12, 13, strPaused);
    91ac:	46 ea       	ldi	r20, 0xA6	; 166
    91ae:	58 e1       	ldi	r21, 0x18	; 24
    91b0:	6d e0       	ldi	r22, 0x0D	; 13
    91b2:	70 e0       	ldi	r23, 0x00	; 0
    91b4:	8c e0       	ldi	r24, 0x0C	; 12
    91b6:	90 e0       	ldi	r25, 0x00	; 0
    91b8:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
			Print(11, 14, strExit);
    91bc:	4d ea       	ldi	r20, 0xAD	; 173
    91be:	58 e1       	ldi	r21, 0x18	; 24
    91c0:	6e e0       	ldi	r22, 0x0E	; 14
    91c2:	70 e0       	ldi	r23, 0x00	; 0
    91c4:	8b e0       	ldi	r24, 0x0B	; 11
    91c6:	90 e0       	ldi	r25, 0x00	; 0
					default : SetTile(i % 30, 3 + i / 30, 0); break;
				}
			}
		}
	}
}
    91c8:	df 91       	pop	r29
    91ca:	cf 91       	pop	r28
    91cc:	1f 91       	pop	r17
    91ce:	0f 91       	pop	r16

		if (game.paused)
		{
			DrawMap2(8, 12, (const char*) map_pause);
			Print(12, 13, strPaused);
			Print(11, 14, strExit);
    91d0:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <Print>
		render_score(&player2, 15, 0);
		Print(14, 0, strVertSep);
		Print(14, 1, strVertSep);
		Print(14, 2, strVertSep);

		if (game.paused)
    91d4:	c0 e0       	ldi	r28, 0x00	; 0
    91d6:	d0 e0       	ldi	r29, 0x00	; 0
					case L_BL: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_bl); break;
					case L_BR: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_br); break;
					case L_SPEED: DrawMap2(i % 30, 3 + i / 30, (const char*) map_speed_itm); break;
					case L_EXPLODE: DrawMap2(i % 30, 3 + i / 30, (const char*) map_explode_itm); break;
					case L_ROCKET: DrawMap2(i % 30, 3 + i / 30, (const char*) map_rocket_itm); break;
					default : SetTile(i % 30, 3 + i / 30, 0); break;
    91d8:	0e e1       	ldi	r16, 0x1E	; 30
    91da:	10 e0       	ldi	r17, 0x00	; 0
    91dc:	fe 01       	movw	r30, r28
    91de:	e1 54       	subi	r30, 0x41	; 65
    91e0:	f4 4f       	sbci	r31, 0xF4	; 244
		}
		else
		{
			for(unsigned int i = 0; i < 30*25; i++)
			{
				switch (level.level_map[i])
    91e2:	e1 81       	ldd	r30, Z+1	; 0x01
    91e4:	8e 2f       	mov	r24, r30
    91e6:	90 e0       	ldi	r25, 0x00	; 0
    91e8:	fc 01       	movw	r30, r24
    91ea:	31 97       	sbiw	r30, 0x01	; 1
    91ec:	e9 30       	cpi	r30, 0x09	; 9
    91ee:	f1 05       	cpc	r31, r1
    91f0:	30 f5       	brcc	.+76     	; 0x923e <update_level+0x116>
    91f2:	e8 5c       	subi	r30, 0xC8	; 200
    91f4:	ff 4f       	sbci	r31, 0xFF	; 255
					case L_TR: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_tr); break;
					case L_BL: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_bl); break;
					case L_BR: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_br); break;
					case L_SPEED: DrawMap2(i % 30, 3 + i / 30, (const char*) map_speed_itm); break;
					case L_EXPLODE: DrawMap2(i % 30, 3 + i / 30, (const char*) map_explode_itm); break;
					case L_ROCKET: DrawMap2(i % 30, 3 + i / 30, (const char*) map_rocket_itm); break;
    91f6:	ce 01       	movw	r24, r28
    91f8:	b8 01       	movw	r22, r16
    91fa:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <__udivmodhi4>
    91fe:	6d 5f       	subi	r22, 0xFD	; 253
		}
		else
		{
			for(unsigned int i = 0; i < 30*25; i++)
			{
				switch (level.level_map[i])
    9200:	0c 94 23 4d 	jmp	0x9a46	; 0x9a46 <__tablejump2__>
				{
					case L_BRICK: DrawMap2(i % 30, 3 + i / 30, (const char*) map_brick); break;
    9204:	45 e9       	ldi	r20, 0x95	; 149
    9206:	57 e3       	ldi	r21, 0x37	; 55
    9208:	02 c0       	rjmp	.+4      	; 0x920e <update_level+0xe6>
					case L_METAL: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal); break;
    920a:	42 e9       	ldi	r20, 0x92	; 146
    920c:	57 e3       	ldi	r21, 0x37	; 55
    920e:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>
    9212:	1e c0       	rjmp	.+60     	; 0x9250 <update_level+0x128>
					case L_TL: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_tl); break;
    9214:	4d e7       	ldi	r20, 0x7D	; 125
    9216:	57 e3       	ldi	r21, 0x37	; 55
    9218:	fa cf       	rjmp	.-12     	; 0x920e <update_level+0xe6>
					case L_TR: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_tr); break;
    921a:	47 e7       	ldi	r20, 0x77	; 119
    921c:	57 e3       	ldi	r21, 0x37	; 55
    921e:	f7 cf       	rjmp	.-18     	; 0x920e <update_level+0xe6>
					case L_BL: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_bl); break;
    9220:	44 e7       	ldi	r20, 0x74	; 116
    9222:	57 e3       	ldi	r21, 0x37	; 55
    9224:	f4 cf       	rjmp	.-24     	; 0x920e <update_level+0xe6>
					case L_BR: DrawMap2(i % 30, 3 + i / 30, (const char*) map_metal_br); break;
    9226:	4a e7       	ldi	r20, 0x7A	; 122
    9228:	57 e3       	ldi	r21, 0x37	; 55
    922a:	f1 cf       	rjmp	.-30     	; 0x920e <update_level+0xe6>
					case L_SPEED: DrawMap2(i % 30, 3 + i / 30, (const char*) map_speed_itm); break;
    922c:	4f e8       	ldi	r20, 0x8F	; 143
    922e:	57 e3       	ldi	r21, 0x37	; 55
    9230:	ee cf       	rjmp	.-36     	; 0x920e <update_level+0xe6>
					case L_EXPLODE: DrawMap2(i % 30, 3 + i / 30, (const char*) map_explode_itm); break;
    9232:	4c e8       	ldi	r20, 0x8C	; 140
    9234:	57 e3       	ldi	r21, 0x37	; 55
    9236:	eb cf       	rjmp	.-42     	; 0x920e <update_level+0xe6>
					case L_ROCKET: DrawMap2(i % 30, 3 + i / 30, (const char*) map_rocket_itm); break;
    9238:	49 e8       	ldi	r20, 0x89	; 137
    923a:	57 e3       	ldi	r21, 0x37	; 55
    923c:	e8 cf       	rjmp	.-48     	; 0x920e <update_level+0xe6>
					default : SetTile(i % 30, 3 + i / 30, 0); break;
    923e:	ce 01       	movw	r24, r28
    9240:	b8 01       	movw	r22, r16
    9242:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <__udivmodhi4>
    9246:	6d 5f       	subi	r22, 0xFD	; 253
    9248:	40 e0       	ldi	r20, 0x00	; 0
    924a:	50 e0       	ldi	r21, 0x00	; 0
    924c:	0e 94 62 38 	call	0x70c4	; 0x70c4 <SetTile>
			Print(12, 13, strPaused);
			Print(11, 14, strExit);
		}
		else
		{
			for(unsigned int i = 0; i < 30*25; i++)
    9250:	21 96       	adiw	r28, 0x01	; 1
    9252:	ce 3e       	cpi	r28, 0xEE	; 238
    9254:	82 e0       	ldi	r24, 0x02	; 2
    9256:	d8 07       	cpc	r29, r24
    9258:	09 f6       	brne	.-126    	; 0x91dc <update_level+0xb4>
					default : SetTile(i % 30, 3 + i / 30, 0); break;
				}
			}
		}
	}
}
    925a:	df 91       	pop	r29
    925c:	cf 91       	pop	r28
    925e:	1f 91       	pop	r17
    9260:	0f 91       	pop	r16
    9262:	08 95       	ret

00009264 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    9264:	0f 93       	push	r16
    9266:	cf 93       	push	r28
    9268:	df 93       	push	r29
    926a:	ec 01       	movw	r28, r24
	clear_sprites();
    926c:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <clear_sprites>
	Print(7, 13, str1Player);
    9270:	4f ea       	ldi	r20, 0xAF	; 175
    9272:	59 e1       	ldi	r21, 0x19	; 25
    9274:	6d e0       	ldi	r22, 0x0D	; 13
    9276:	70 e0       	ldi	r23, 0x00	; 0
    9278:	87 e0       	ldi	r24, 0x07	; 7
    927a:	90 e0       	ldi	r25, 0x00	; 0
    927c:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	Print(7, 14, str2Player);
    9280:	4e e9       	ldi	r20, 0x9E	; 158
    9282:	59 e1       	ldi	r21, 0x19	; 25
    9284:	6e e0       	ldi	r22, 0x0E	; 14
    9286:	70 e0       	ldi	r23, 0x00	; 0
    9288:	87 e0       	ldi	r24, 0x07	; 7
    928a:	90 e0       	ldi	r25, 0x00	; 0
    928c:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	Print(7, 15, strHighscores);
    9290:	44 e9       	ldi	r20, 0x94	; 148
    9292:	59 e1       	ldi	r21, 0x19	; 25
    9294:	6f e0       	ldi	r22, 0x0F	; 15
    9296:	70 e0       	ldi	r23, 0x00	; 0
    9298:	87 e0       	ldi	r24, 0x07	; 7
    929a:	90 e0       	ldi	r25, 0x00	; 0
    929c:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	Print(4, 26, strCopyright);
    92a0:	4d eb       	ldi	r20, 0xBD	; 189
    92a2:	59 e1       	ldi	r21, 0x19	; 25
    92a4:	6a e1       	ldi	r22, 0x1A	; 26
    92a6:	70 e0       	ldi	r23, 0x00	; 0
    92a8:	84 e0       	ldi	r24, 0x04	; 4
    92aa:	90 e0       	ldi	r25, 0x00	; 0
    92ac:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    92b0:	46 ed       	ldi	r20, 0xD6	; 214
    92b2:	57 e3       	ldi	r21, 0x37	; 55
    92b4:	65 e0       	ldi	r22, 0x05	; 5
    92b6:	84 e0       	ldi	r24, 0x04	; 4
    92b8:	0e 94 54 45 	call	0x8aa8	; 0x8aa8 <DrawMap2>
	MapSprite(0, map_ball);
    92bc:	6c e2       	ldi	r22, 0x2C	; 44
    92be:	77 e3       	ldi	r23, 0x37	; 55
    92c0:	80 e0       	ldi	r24, 0x00	; 0
    92c2:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>

	// Update
	if (p1->pressed & BTN_UP)
    92c6:	28 81       	ld	r18, Y
    92c8:	39 81       	ldd	r19, Y+1	; 0x01
    92ca:	80 91 3e 0b 	lds	r24, 0x0B3E
    92ce:	24 ff       	sbrs	r18, 4
    92d0:	06 c0       	rjmp	.+12     	; 0x92de <update_splash+0x7a>
	{
		game.selection--;
    92d2:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    92d4:	87 ff       	sbrs	r24, 7
    92d6:	29 c0       	rjmp	.+82     	; 0x932a <update_splash+0xc6>
    92d8:	10 92 3e 0b 	sts	0x0B3E, r1
    92dc:	28 c0       	rjmp	.+80     	; 0x932e <update_splash+0xca>
	}
	else if (p1->pressed & BTN_DOWN)
    92de:	25 ff       	sbrs	r18, 5
    92e0:	05 c0       	rjmp	.+10     	; 0x92ec <update_splash+0x88>
	{
		game.selection++;
    92e2:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    92e4:	83 30       	cpi	r24, 0x03	; 3
    92e6:	0c f1       	brlt	.+66     	; 0x932a <update_splash+0xc6>
    92e8:	82 e0       	ldi	r24, 0x02	; 2
    92ea:	1f c0       	rjmp	.+62     	; 0x932a <update_splash+0xc6>
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    92ec:	30 ff       	sbrs	r19, 0
    92ee:	1f c0       	rjmp	.+62     	; 0x932e <update_splash+0xca>
    92f0:	82 30       	cpi	r24, 0x02	; 2
    92f2:	60 f4       	brcc	.+24     	; 0x930c <update_splash+0xa8>
	{
		p1s.select_state = SELECTING;
    92f4:	10 92 39 0b 	sts	0x0B39, r1
		p2s.select_state = SELECTING;
    92f8:	10 92 33 0b 	sts	0x0B33, r1
		fade_through();
    92fc:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
		load_eeprom(&handles);
    9300:	81 e2       	ldi	r24, 0x21	; 33
    9302:	91 e0       	ldi	r25, 0x01	; 1
    9304:	0e 94 31 47 	call	0x8e62	; 0x8e62 <load_eeprom>
		game.current_screen = HANDLE_SELECT;
    9308:	82 e0       	ldi	r24, 0x02	; 2
    930a:	09 c0       	rjmp	.+18     	; 0x931e <update_splash+0xba>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    930c:	82 30       	cpi	r24, 0x02	; 2
    930e:	79 f4       	brne	.+30     	; 0x932e <update_splash+0xca>
	{
		fade_through();
    9310:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
		load_eeprom(&scores);
    9314:	81 e0       	ldi	r24, 0x01	; 1
    9316:	91 e0       	ldi	r25, 0x01	; 1
    9318:	0e 94 31 47 	call	0x8e62	; 0x8e62 <load_eeprom>
		game.current_screen = TANK_RANK;
    931c:	81 e0       	ldi	r24, 0x01	; 1
    931e:	80 93 3a 0b 	sts	0x0B3A, r24
			break;
	}

	// Instructions
	Print(9, 21, strSelectHandle);
}
    9322:	df 91       	pop	r29
    9324:	cf 91       	pop	r28
    9326:	0f 91       	pop	r16
    9328:	08 95       	ret
	MapSprite(0, map_ball);

	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
    932a:	80 93 3e 0b 	sts	0x0B3E, r24
		game.current_screen = TANK_RANK;
		return;
	}

	// Render
	switch (game.selection)
    932e:	80 91 3e 0b 	lds	r24, 0x0B3E
    9332:	81 30       	cpi	r24, 0x01	; 1
    9334:	49 f0       	breq	.+18     	; 0x9348 <update_splash+0xe4>
    9336:	82 30       	cpi	r24, 0x02	; 2
    9338:	59 f0       	breq	.+22     	; 0x9350 <update_splash+0xec>
    933a:	81 11       	cpse	r24, r1
    933c:	10 c0       	rjmp	.+32     	; 0x935e <update_splash+0xfa>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    933e:	01 e0       	ldi	r16, 0x01	; 1
    9340:	21 e0       	ldi	r18, 0x01	; 1
    9342:	48 e6       	ldi	r20, 0x68	; 104
    9344:	60 e3       	ldi	r22, 0x30	; 48
    9346:	09 c0       	rjmp	.+18     	; 0x935a <update_splash+0xf6>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    9348:	01 e0       	ldi	r16, 0x01	; 1
    934a:	21 e0       	ldi	r18, 0x01	; 1
    934c:	40 e7       	ldi	r20, 0x70	; 112
    934e:	03 c0       	rjmp	.+6      	; 0x9356 <update_splash+0xf2>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    9350:	01 e0       	ldi	r16, 0x01	; 1
    9352:	21 e0       	ldi	r18, 0x01	; 1
    9354:	48 e7       	ldi	r20, 0x78	; 120
    9356:	60 e3       	ldi	r22, 0x30	; 48
    9358:	80 e0       	ldi	r24, 0x00	; 0
    935a:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
			break;
	}

	// Instructions
	Print(9, 21, strSelectHandle);
    935e:	49 e6       	ldi	r20, 0x69	; 105
    9360:	59 e1       	ldi	r21, 0x19	; 25
    9362:	65 e1       	ldi	r22, 0x15	; 21
    9364:	70 e0       	ldi	r23, 0x00	; 0
    9366:	89 e0       	ldi	r24, 0x09	; 9
    9368:	90 e0       	ldi	r25, 0x00	; 0
}
    936a:	df 91       	pop	r29
    936c:	cf 91       	pop	r28
    936e:	0f 91       	pop	r16
			MoveSprite(0, 6*8, 15*8, 1, 1);
			break;
	}

	// Instructions
	Print(9, 21, strSelectHandle);
    9370:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <Print>

00009374 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    9374:	ef 92       	push	r14
    9376:	ff 92       	push	r15
    9378:	0f 93       	push	r16
    937a:	1f 93       	push	r17
    937c:	cf 93       	push	r28
    937e:	df 93       	push	r29
    9380:	1f 92       	push	r1
    9382:	cd b7       	in	r28, 0x3d	; 61
    9384:	de b7       	in	r29, 0x3e	; 62
	unsigned char y = 7;
	unsigned char rank = 1;

	// Update
	if (p1->pressed & BTN_X)
    9386:	fc 01       	movw	r30, r24
    9388:	80 81       	ld	r24, Z
    938a:	91 81       	ldd	r25, Z+1	; 0x01
    938c:	91 ff       	sbrs	r25, 1
    938e:	0c c0       	rjmp	.+24     	; 0x93a8 <update_tank_rank+0x34>
	{
		fade_through();
    9390:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
		game.current_screen = SPLASH;
    9394:	10 92 3a 0b 	sts	0x0B3A, r1
		rank += 1;
	}

	// Instructions
	Print(10, 23, strCancelHandle);
}
    9398:	0f 90       	pop	r0
    939a:	df 91       	pop	r29
    939c:	cf 91       	pop	r28
    939e:	1f 91       	pop	r17
    93a0:	0f 91       	pop	r16
    93a2:	ff 90       	pop	r15
    93a4:	ef 90       	pop	r14
    93a6:	08 95       	ret
		fade_through();
		game.current_screen = SPLASH;
		return;
	}
	// Render
	clear_sprites();
    93a8:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <clear_sprites>
	MapSprite(0, map_tank1_up_0);
    93ac:	6b e6       	ldi	r22, 0x6B	; 107
    93ae:	77 e3       	ldi	r23, 0x37	; 55
    93b0:	80 e0       	ldi	r24, 0x00	; 0
    93b2:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
	MapSprite(4, map_tank2_up_0);
    93b6:	63 e5       	ldi	r22, 0x53	; 83
    93b8:	77 e3       	ldi	r23, 0x37	; 55
    93ba:	84 e0       	ldi	r24, 0x04	; 4
    93bc:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    93c0:	02 e0       	ldi	r16, 0x02	; 2
    93c2:	22 e0       	ldi	r18, 0x02	; 2
    93c4:	48 e0       	ldi	r20, 0x08	; 8
    93c6:	68 e3       	ldi	r22, 0x38	; 56
    93c8:	80 e0       	ldi	r24, 0x00	; 0
    93ca:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    93ce:	22 e0       	ldi	r18, 0x02	; 2
    93d0:	48 e0       	ldi	r20, 0x08	; 8
    93d2:	60 ea       	ldi	r22, 0xA0	; 160
    93d4:	84 e0       	ldi	r24, 0x04	; 4
    93d6:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
	Print(10, 2, strHighscores);
    93da:	44 e9       	ldi	r20, 0x94	; 148
    93dc:	59 e1       	ldi	r21, 0x19	; 25
    93de:	62 e0       	ldi	r22, 0x02	; 2
    93e0:	70 e0       	ldi	r23, 0x00	; 0
    93e2:	8a e0       	ldi	r24, 0x0A	; 10
    93e4:	90 e0       	ldi	r25, 0x00	; 0
    93e6:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
    93ea:	06 e0       	ldi	r16, 0x06	; 6
    93ec:	11 e0       	ldi	r17, 0x01	; 1
    93ee:	87 e0       	ldi	r24, 0x07	; 7
    93f0:	e8 2e       	mov	r14, r24
    93f2:	f1 2c       	mov	r15, r1
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	unsigned char y = 7;
	unsigned char rank = 1;
    93f4:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (unsigned char i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    93f6:	20 e0       	ldi	r18, 0x00	; 0
    93f8:	43 2f       	mov	r20, r19
    93fa:	b7 01       	movw	r22, r14
    93fc:	82 e0       	ldi	r24, 0x02	; 2
    93fe:	90 e0       	ldi	r25, 0x00	; 0
    9400:	39 83       	std	Y+1, r19	; 0x01
    9402:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <PrintByte>
		PrintChar(3, y, '.');
    9406:	4e e2       	ldi	r20, 0x2E	; 46
    9408:	b7 01       	movw	r22, r14
    940a:	83 e0       	ldi	r24, 0x03	; 3
    940c:	90 e0       	ldi	r25, 0x00	; 0
    940e:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
    9412:	f8 01       	movw	r30, r16
    9414:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    9416:	80 81       	ld	r24, Z
    9418:	f3 e0       	ldi	r31, 0x03	; 3
    941a:	8f 9f       	mul	r24, r31
    941c:	a0 01       	movw	r20, r0
    941e:	11 24       	eor	r1, r1
    9420:	4d 5d       	subi	r20, 0xDD	; 221
    9422:	5e 4f       	sbci	r21, 0xFE	; 254
    9424:	23 e0       	ldi	r18, 0x03	; 3
    9426:	6e 2d       	mov	r22, r14
    9428:	85 e0       	ldi	r24, 0x05	; 5
    942a:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <LBPrintStr>
		Print(9, y, strOwns);
    942e:	4e e3       	ldi	r20, 0x3E	; 62
    9430:	59 e1       	ldi	r21, 0x19	; 25
    9432:	b7 01       	movw	r22, r14
    9434:	89 e0       	ldi	r24, 0x09	; 9
    9436:	90 e0       	ldi	r25, 0x00	; 0
    9438:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
    943c:	f8 01       	movw	r30, r16
    943e:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    9440:	80 81       	ld	r24, Z
    9442:	93 e0       	ldi	r25, 0x03	; 3
    9444:	89 9f       	mul	r24, r25
    9446:	a0 01       	movw	r20, r0
    9448:	11 24       	eor	r1, r1
    944a:	4d 5d       	subi	r20, 0xDD	; 221
    944c:	5e 4f       	sbci	r21, 0xFE	; 254
    944e:	23 e0       	ldi	r18, 0x03	; 3
    9450:	6e 2d       	mov	r22, r14
    9452:	8e e0       	ldi	r24, 0x0E	; 14
    9454:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <LBPrintStr>
		Print(18, y, strBy);
    9458:	4b e3       	ldi	r20, 0x3B	; 59
    945a:	59 e1       	ldi	r21, 0x19	; 25
    945c:	b7 01       	movw	r22, r14
    945e:	82 e1       	ldi	r24, 0x12	; 18
    9460:	90 e0       	ldi	r25, 0x00	; 0
    9462:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
    9466:	f8 01       	movw	r30, r16
    9468:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    946a:	21 e0       	ldi	r18, 0x01	; 1
    946c:	40 81       	ld	r20, Z
    946e:	b7 01       	movw	r22, r14
    9470:	87 e1       	ldi	r24, 0x17	; 23
    9472:	90 e0       	ldi	r25, 0x00	; 0
    9474:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <PrintByte>
		PrintChar(24, y, '-');
    9478:	4d e2       	ldi	r20, 0x2D	; 45
    947a:	b7 01       	movw	r22, r14
    947c:	88 e1       	ldi	r24, 0x18	; 24
    947e:	90 e0       	ldi	r25, 0x00	; 0
    9480:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    9484:	21 e0       	ldi	r18, 0x01	; 1
    9486:	f8 01       	movw	r30, r16
    9488:	40 81       	ld	r20, Z
    948a:	b7 01       	movw	r22, r14
    948c:	8b e1       	ldi	r24, 0x1B	; 27
    948e:	90 e0       	ldi	r25, 0x00	; 0
    9490:	0e 94 a1 45 	call	0x8b42	; 0x8b42 <PrintByte>
		y += 3;
		rank += 1;
    9494:	39 81       	ldd	r19, Y+1	; 0x01
    9496:	3f 5f       	subi	r19, 0xFF	; 255
    9498:	f3 e0       	ldi	r31, 0x03	; 3
    949a:	ef 0e       	add	r14, r31
    949c:	f1 1c       	adc	r15, r1
    949e:	0c 5f       	subi	r16, 0xFC	; 252
    94a0:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite(0, map_tank1_up_0);
	MapSprite(4, map_tank2_up_0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (unsigned char i = 0; i < 20; i += 4)
    94a2:	36 30       	cpi	r19, 0x06	; 6
    94a4:	09 f0       	breq	.+2      	; 0x94a8 <update_tank_rank+0x134>
    94a6:	a7 cf       	rjmp	.-178    	; 0x93f6 <update_tank_rank+0x82>
		y += 3;
		rank += 1;
	}

	// Instructions
	Print(10, 23, strCancelHandle);
    94a8:	42 e5       	ldi	r20, 0x52	; 82
    94aa:	59 e1       	ldi	r21, 0x19	; 25
    94ac:	67 e1       	ldi	r22, 0x17	; 23
    94ae:	70 e0       	ldi	r23, 0x00	; 0
    94b0:	8a e0       	ldi	r24, 0x0A	; 10
    94b2:	90 e0       	ldi	r25, 0x00	; 0
}
    94b4:	0f 90       	pop	r0
    94b6:	df 91       	pop	r29
    94b8:	cf 91       	pop	r28
    94ba:	1f 91       	pop	r17
    94bc:	0f 91       	pop	r16
    94be:	ff 90       	pop	r15
    94c0:	ef 90       	pop	r14
		y += 3;
		rank += 1;
	}

	// Instructions
	Print(10, 23, strCancelHandle);
    94c2:	0c 94 d4 45 	jmp	0x8ba8	; 0x8ba8 <Print>

000094c6 <_handle_select_helper>:
}


unsigned char _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    94c6:	ef 92       	push	r14
    94c8:	ff 92       	push	r15
    94ca:	1f 93       	push	r17
    94cc:	cf 93       	push	r28
    94ce:	df 93       	push	r29
    94d0:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    94d2:	fb 01       	movw	r30, r22
    94d4:	20 81       	ld	r18, Z
    94d6:	31 81       	ldd	r19, Z+1	; 0x01
    94d8:	f9 01       	movw	r30, r18
    94da:	e0 71       	andi	r30, 0x10	; 16
    94dc:	ff 27       	eor	r31, r31
    94de:	24 ff       	sbrs	r18, 4
    94e0:	09 c0       	rjmp	.+18     	; 0x94f4 <_handle_select_helper+0x2e>
    94e2:	8d 81       	ldd	r24, Y+5	; 0x05
    94e4:	81 11       	cpse	r24, r1
    94e6:	06 c0       	rjmp	.+12     	; 0x94f4 <_handle_select_helper+0x2e>
	{
		ps->handle_id--;
    94e8:	88 81       	ld	r24, Y
    94ea:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    94ec:	87 ff       	sbrs	r24, 7
    94ee:	0f c0       	rjmp	.+30     	; 0x950e <_handle_select_helper+0x48>
    94f0:	18 82       	st	Y, r1
    94f2:	8b c0       	rjmp	.+278    	; 0x960a <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    94f4:	c9 01       	movw	r24, r18
    94f6:	80 72       	andi	r24, 0x20	; 32
    94f8:	99 27       	eor	r25, r25
    94fa:	25 ff       	sbrs	r18, 5
    94fc:	0a c0       	rjmp	.+20     	; 0x9512 <_handle_select_helper+0x4c>
    94fe:	6d 81       	ldd	r22, Y+5	; 0x05
    9500:	61 11       	cpse	r22, r1
    9502:	07 c0       	rjmp	.+14     	; 0x9512 <_handle_select_helper+0x4c>
	{
		ps->handle_id++;
    9504:	88 81       	ld	r24, Y
    9506:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    9508:	89 30       	cpi	r24, 0x09	; 9
    950a:	0c f0       	brlt	.+2      	; 0x950e <_handle_select_helper+0x48>
    950c:	88 e0       	ldi	r24, 0x08	; 8
    950e:	88 83       	st	Y, r24
    9510:	7c c0       	rjmp	.+248    	; 0x960a <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    9512:	b9 01       	movw	r22, r18
    9514:	66 27       	eor	r22, r22
    9516:	71 70       	andi	r23, 0x01	; 1
    9518:	30 ff       	sbrs	r19, 0
    951a:	11 c0       	rjmp	.+34     	; 0x953e <_handle_select_helper+0x78>
    951c:	ad 81       	ldd	r26, Y+5	; 0x05
    951e:	a1 11       	cpse	r26, r1
    9520:	0e c0       	rjmp	.+28     	; 0x953e <_handle_select_helper+0x78>
	{
		ps->select_state = EDITING;
    9522:	81 e0       	ldi	r24, 0x01	; 1
    9524:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    9526:	69 91       	ld	r22, Y+
    9528:	f3 e0       	ldi	r31, 0x03	; 3
    952a:	6f 02       	muls	r22, r31
    952c:	b0 01       	movw	r22, r0
    952e:	11 24       	eor	r1, r1
    9530:	6d 5d       	subi	r22, 0xDD	; 221
    9532:	7e 4f       	sbci	r23, 0xFE	; 254
    9534:	43 e0       	ldi	r20, 0x03	; 3
    9536:	ce 01       	movw	r24, r28
    9538:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
    953c:	66 c0       	rjmp	.+204    	; 0x960a <_handle_select_helper+0x144>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    953e:	27 ff       	sbrs	r18, 7
    9540:	0a c0       	rjmp	.+20     	; 0x9556 <_handle_select_helper+0x90>
    9542:	1d 81       	ldd	r17, Y+5	; 0x05
    9544:	11 30       	cpi	r17, 0x01	; 1
    9546:	39 f4       	brne	.+14     	; 0x9556 <_handle_select_helper+0x90>
	{
		ps->char_index++;
    9548:	8c 81       	ldd	r24, Y+4	; 0x04
    954a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    954c:	83 30       	cpi	r24, 0x03	; 3
    954e:	64 f0       	brlt	.+24     	; 0x9568 <_handle_select_helper+0xa2>
    9550:	82 e0       	ldi	r24, 0x02	; 2
    9552:	8c 83       	std	Y+4, r24	; 0x04
    9554:	61 c0       	rjmp	.+194    	; 0x9618 <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    9556:	26 ff       	sbrs	r18, 6
    9558:	0b c0       	rjmp	.+22     	; 0x9570 <_handle_select_helper+0xaa>
    955a:	1d 81       	ldd	r17, Y+5	; 0x05
    955c:	11 30       	cpi	r17, 0x01	; 1
    955e:	39 f5       	brne	.+78     	; 0x95ae <_handle_select_helper+0xe8>
	{
		ps->char_index--;
    9560:	8c 81       	ldd	r24, Y+4	; 0x04
    9562:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    9564:	87 fd       	sbrc	r24, 7
    9566:	02 c0       	rjmp	.+4      	; 0x956c <_handle_select_helper+0xa6>
		ps->char_index++;
		if (ps->char_index > 2) ps->char_index = 2;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    9568:	8c 83       	std	Y+4, r24	; 0x04
    956a:	4f c0       	rjmp	.+158    	; 0x960a <_handle_select_helper+0x144>
		if (ps->char_index < 0) ps->char_index = 0;
    956c:	1c 82       	std	Y+4, r1	; 0x04
    956e:	54 c0       	rjmp	.+168    	; 0x9618 <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    9570:	ef 2b       	or	r30, r31
    9572:	61 f0       	breq	.+24     	; 0x958c <_handle_select_helper+0xc6>
    9574:	1d 81       	ldd	r17, Y+5	; 0x05
    9576:	11 30       	cpi	r17, 0x01	; 1
    9578:	e9 f5       	brne	.+122    	; 0x95f4 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]--;
    957a:	8c 81       	ldd	r24, Y+4	; 0x04
    957c:	c8 0f       	add	r28, r24
    957e:	d1 1d       	adc	r29, r1
    9580:	99 81       	ldd	r25, Y+1	; 0x01
    9582:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
    9584:	91 34       	cpi	r25, 0x41	; 65
    9586:	70 f4       	brcc	.+28     	; 0x95a4 <_handle_select_helper+0xde>
    9588:	81 e4       	ldi	r24, 0x41	; 65
    958a:	0f c0       	rjmp	.+30     	; 0x95aa <_handle_select_helper+0xe4>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    958c:	89 2b       	or	r24, r25
    958e:	89 f0       	breq	.+34     	; 0x95b2 <_handle_select_helper+0xec>
    9590:	1d 81       	ldd	r17, Y+5	; 0x05
    9592:	11 30       	cpi	r17, 0x01	; 1
    9594:	79 f5       	brne	.+94     	; 0x95f4 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]++;
    9596:	8c 81       	ldd	r24, Y+4	; 0x04
    9598:	c8 0f       	add	r28, r24
    959a:	d1 1d       	adc	r29, r1
    959c:	99 81       	ldd	r25, Y+1	; 0x01
    959e:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
    95a0:	9b 35       	cpi	r25, 0x5B	; 91
    95a2:	10 f4       	brcc	.+4      	; 0x95a8 <_handle_select_helper+0xe2>
		ps->handle[(unsigned char) ps->char_index]--;
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(unsigned char) ps->char_index]++;
    95a4:	99 83       	std	Y+1, r25	; 0x01
    95a6:	31 c0       	rjmp	.+98     	; 0x960a <_handle_select_helper+0x144>
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
    95a8:	8a e5       	ldi	r24, 0x5A	; 90
    95aa:	89 83       	std	Y+1, r24	; 0x01
    95ac:	35 c0       	rjmp	.+106    	; 0x9618 <_handle_select_helper+0x152>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(unsigned char) ps->char_index]--;
		if (ps->handle[(unsigned char) ps->char_index] < 'A') ps->handle[(unsigned char) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    95ae:	89 2b       	or	r24, r25
    95b0:	09 f5       	brne	.+66     	; 0x95f4 <_handle_select_helper+0x12e>
	{
		ps->handle[(unsigned char) ps->char_index]++;
		if (ps->handle[(unsigned char) ps->char_index] > 'Z') ps->handle[(unsigned char) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    95b2:	67 2b       	or	r22, r23
    95b4:	f9 f0       	breq	.+62     	; 0x95f4 <_handle_select_helper+0x12e>
    95b6:	1d 81       	ldd	r17, Y+5	; 0x05
    95b8:	11 30       	cpi	r17, 0x01	; 1
    95ba:	e1 f4       	brne	.+56     	; 0x95f4 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    95bc:	fe 01       	movw	r30, r28
    95be:	21 91       	ld	r18, Z+
    95c0:	7f 01       	movw	r14, r30
    95c2:	fa 01       	movw	r30, r20
    95c4:	21 93       	st	Z+, r18
    95c6:	cf 01       	movw	r24, r30
		LBCopyChars(player->handle, ps->handle, 3);
    95c8:	43 e0       	ldi	r20, 0x03	; 3
    95ca:	b7 01       	movw	r22, r14
    95cc:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    95d0:	88 81       	ld	r24, Y
    95d2:	f3 e0       	ldi	r31, 0x03	; 3
    95d4:	8f 02       	muls	r24, r31
    95d6:	c0 01       	movw	r24, r0
    95d8:	11 24       	eor	r1, r1
    95da:	43 e0       	ldi	r20, 0x03	; 3
    95dc:	b7 01       	movw	r22, r14
    95de:	8d 5d       	subi	r24, 0xDD	; 221
    95e0:	9e 4f       	sbci	r25, 0xFE	; 254
    95e2:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    95e6:	81 e2       	ldi	r24, 0x21	; 33
    95e8:	91 e0       	ldi	r25, 0x01	; 1
    95ea:	0e 94 2b 39 	call	0x7256	; 0x7256 <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    95ee:	82 e0       	ldi	r24, 0x02	; 2
    95f0:	8d 83       	std	Y+5, r24	; 0x05
    95f2:	12 c0       	rjmp	.+36     	; 0x9618 <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    95f4:	31 ff       	sbrs	r19, 1
    95f6:	09 c0       	rjmp	.+18     	; 0x960a <_handle_select_helper+0x144>
    95f8:	1d 81       	ldd	r17, Y+5	; 0x05
    95fa:	11 30       	cpi	r17, 0x01	; 1
    95fc:	11 f4       	brne	.+4      	; 0x9602 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    95fe:	1d 82       	std	Y+5, r1	; 0x05
    9600:	0b c0       	rjmp	.+22     	; 0x9618 <_handle_select_helper+0x152>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    9602:	12 30       	cpi	r17, 0x02	; 2
    9604:	21 f4       	brne	.+8      	; 0x960e <_handle_select_helper+0x148>
		{
			ps->select_state = EDITING;
    9606:	81 e0       	ldi	r24, 0x01	; 1
    9608:	8d 83       	std	Y+5, r24	; 0x05
	{
		fade_through();
		game.current_screen = SPLASH;
		return 0;
	}
	return 1;
    960a:	11 e0       	ldi	r17, 0x01	; 1
	{
		ps->select_state = SELECTING;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
		{
			ps->select_state = EDITING;
    960c:	05 c0       	rjmp	.+10     	; 0x9618 <_handle_select_helper+0x152>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    960e:	0e 94 43 47 	call	0x8e86	; 0x8e86 <fade_through>
		game.current_screen = SPLASH;
    9612:	10 92 3a 0b 	sts	0x0B3A, r1
		return 0;
    9616:	10 e0       	ldi	r17, 0x00	; 0
	}
	return 1;
}
    9618:	81 2f       	mov	r24, r17
    961a:	df 91       	pop	r29
    961c:	cf 91       	pop	r28
    961e:	1f 91       	pop	r17
    9620:	ff 90       	pop	r15
    9622:	ef 90       	pop	r14
    9624:	08 95       	ret

00009626 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, unsigned char x_offset, unsigned char idx)
{
    9626:	af 92       	push	r10
    9628:	bf 92       	push	r11
    962a:	cf 92       	push	r12
    962c:	df 92       	push	r13
    962e:	ef 92       	push	r14
    9630:	ff 92       	push	r15
    9632:	0f 93       	push	r16
    9634:	1f 93       	push	r17
    9636:	cf 93       	push	r28
    9638:	df 93       	push	r29
    963a:	00 d0       	rcall	.+0      	; 0x963c <_handle_select_render_helper+0x16>
    963c:	1f 92       	push	r1
    963e:	cd b7       	in	r28, 0x3d	; 61
    9640:	de b7       	in	r29, 0x3e	; 62
    9642:	7c 01       	movw	r14, r24
    9644:	14 2f       	mov	r17, r20
    9646:	b2 2e       	mov	r11, r18
	unsigned char tmp[3] = {' ', ' ', ' '};
    9648:	80 e2       	ldi	r24, 0x20	; 32
    964a:	89 83       	std	Y+1, r24	; 0x01
    964c:	8a 83       	std	Y+2, r24	; 0x02
    964e:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    9650:	f7 01       	movw	r30, r14
    9652:	85 81       	ldd	r24, Z+5	; 0x05
    9654:	81 11       	cpse	r24, r1
    9656:	15 c0       	rjmp	.+42     	; 0x9682 <_handle_select_render_helper+0x5c>
	{
		MapSprite(idx, map_ball);
    9658:	6c e2       	ldi	r22, 0x2C	; 44
    965a:	77 e3       	ldi	r23, 0x37	; 55
    965c:	82 2f       	mov	r24, r18
    965e:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    9662:	f7 01       	movw	r30, r14
    9664:	40 81       	ld	r20, Z
    9666:	44 0f       	add	r20, r20
    9668:	44 0f       	add	r20, r20
    966a:	44 0f       	add	r20, r20
    966c:	40 5c       	subi	r20, 0xC0	; 192
    966e:	01 e0       	ldi	r16, 0x01	; 1
    9670:	21 e0       	ldi	r18, 0x01	; 1
    9672:	61 2f       	mov	r22, r17
    9674:	66 0f       	add	r22, r22
    9676:	66 0f       	add	r22, r22
    9678:	66 0f       	add	r22, r22
    967a:	8b 2d       	mov	r24, r11
    967c:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
    9680:	60 c0       	rjmp	.+192    	; 0x9742 <_handle_select_render_helper+0x11c>
	}
	else if (ps->select_state == EDITING)
    9682:	81 30       	cpi	r24, 0x01	; 1
    9684:	09 f0       	breq	.+2      	; 0x9688 <_handle_select_render_helper+0x62>
    9686:	42 c0       	rjmp	.+132    	; 0x970c <_handle_select_render_helper+0xe6>
	{
		MapSprite(idx, map_ball);
    9688:	6c e2       	ldi	r22, 0x2C	; 44
    968a:	77 e3       	ldi	r23, 0x37	; 55
    968c:	82 2f       	mov	r24, r18
    968e:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
		MapSprite(idx+1, map_ball);
    9692:	aa 24       	eor	r10, r10
    9694:	a3 94       	inc	r10
    9696:	ab 0c       	add	r10, r11
    9698:	6c e2       	ldi	r22, 0x2C	; 44
    969a:	77 e3       	ldi	r23, 0x37	; 55
    969c:	8a 2d       	mov	r24, r10
    969e:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    96a2:	c1 2e       	mov	r12, r17
    96a4:	d1 2c       	mov	r13, r1
    96a6:	f5 e0       	ldi	r31, 0x05	; 5
    96a8:	cf 0e       	add	r12, r31
    96aa:	d1 1c       	adc	r13, r1
    96ac:	f7 01       	movw	r30, r14
    96ae:	40 81       	ld	r20, Z
    96b0:	44 0f       	add	r20, r20
    96b2:	44 0f       	add	r20, r20
    96b4:	44 0f       	add	r20, r20
    96b6:	48 5c       	subi	r20, 0xC8	; 200
    96b8:	84 81       	ldd	r24, Z+4	; 0x04
    96ba:	b6 01       	movw	r22, r12
    96bc:	68 0f       	add	r22, r24
    96be:	71 1d       	adc	r23, r1
    96c0:	87 fd       	sbrc	r24, 7
    96c2:	7a 95       	dec	r23
    96c4:	66 0f       	add	r22, r22
    96c6:	66 0f       	add	r22, r22
    96c8:	66 0f       	add	r22, r22
    96ca:	01 e0       	ldi	r16, 0x01	; 1
    96cc:	21 e0       	ldi	r18, 0x01	; 1
    96ce:	8b 2d       	mov	r24, r11
    96d0:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    96d4:	f7 01       	movw	r30, r14
    96d6:	40 81       	ld	r20, Z
    96d8:	44 0f       	add	r20, r20
    96da:	44 0f       	add	r20, r20
    96dc:	44 0f       	add	r20, r20
    96de:	48 5b       	subi	r20, 0xB8	; 184
    96e0:	84 81       	ldd	r24, Z+4	; 0x04
    96e2:	c8 0e       	add	r12, r24
    96e4:	d1 1c       	adc	r13, r1
    96e6:	87 fd       	sbrc	r24, 7
    96e8:	da 94       	dec	r13
    96ea:	6c 2d       	mov	r22, r12
    96ec:	66 0f       	add	r22, r22
    96ee:	66 0f       	add	r22, r22
    96f0:	66 0f       	add	r22, r22
    96f2:	21 e0       	ldi	r18, 0x01	; 1
    96f4:	8a 2d       	mov	r24, r10
    96f6:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    96fa:	43 e0       	ldi	r20, 0x03	; 3
    96fc:	b7 01       	movw	r22, r14
    96fe:	6f 5f       	subi	r22, 0xFF	; 255
    9700:	7f 4f       	sbci	r23, 0xFF	; 255
    9702:	ce 01       	movw	r24, r28
    9704:	01 96       	adiw	r24, 0x01	; 1
    9706:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
    970a:	1b c0       	rjmp	.+54     	; 0x9742 <_handle_select_render_helper+0x11c>
	}
	else if (ps->select_state == CONFIRMED)
    970c:	82 30       	cpi	r24, 0x02	; 2
    970e:	c9 f4       	brne	.+50     	; 0x9742 <_handle_select_render_helper+0x11c>
	{
		PrintChar(x_offset+6, 5, '(');
    9710:	c4 2e       	mov	r12, r20
    9712:	d1 2c       	mov	r13, r1
    9714:	48 e2       	ldi	r20, 0x28	; 40
    9716:	65 e0       	ldi	r22, 0x05	; 5
    9718:	70 e0       	ldi	r23, 0x00	; 0
    971a:	c6 01       	movw	r24, r12
    971c:	06 96       	adiw	r24, 0x06	; 6
    971e:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    9722:	23 e0       	ldi	r18, 0x03	; 3
    9724:	a7 01       	movw	r20, r14
    9726:	4f 5f       	subi	r20, 0xFF	; 255
    9728:	5f 4f       	sbci	r21, 0xFF	; 255
    972a:	65 e0       	ldi	r22, 0x05	; 5
    972c:	87 e0       	ldi	r24, 0x07	; 7
    972e:	81 0f       	add	r24, r17
    9730:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    9734:	49 e2       	ldi	r20, 0x29	; 41
    9736:	65 e0       	ldi	r22, 0x05	; 5
    9738:	70 e0       	ldi	r23, 0x00	; 0
    973a:	c6 01       	movw	r24, r12
    973c:	0a 96       	adiw	r24, 0x0a	; 10
    973e:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    9742:	f7 01       	movw	r30, r14
    9744:	60 81       	ld	r22, Z
    9746:	68 5f       	subi	r22, 0xF8	; 248
    9748:	23 e0       	ldi	r18, 0x03	; 3
    974a:	ae 01       	movw	r20, r28
    974c:	4f 5f       	subi	r20, 0xFF	; 255
    974e:	5f 4f       	sbci	r21, 0xFF	; 255
    9750:	85 e0       	ldi	r24, 0x05	; 5
    9752:	81 0f       	add	r24, r17
    9754:	0e 94 e1 46 	call	0x8dc2	; 0x8dc2 <LBPrintStr>
}
    9758:	0f 90       	pop	r0
    975a:	0f 90       	pop	r0
    975c:	0f 90       	pop	r0
    975e:	df 91       	pop	r29
    9760:	cf 91       	pop	r28
    9762:	1f 91       	pop	r17
    9764:	0f 91       	pop	r16
    9766:	ff 90       	pop	r15
    9768:	ef 90       	pop	r14
    976a:	df 90       	pop	r13
    976c:	cf 90       	pop	r12
    976e:	bf 90       	pop	r11
    9770:	af 90       	pop	r10
    9772:	08 95       	ret

00009774 <update_handle_select>:

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    9774:	7f 92       	push	r7
    9776:	8f 92       	push	r8
    9778:	9f 92       	push	r9
    977a:	af 92       	push	r10
    977c:	bf 92       	push	r11
    977e:	cf 92       	push	r12
    9780:	df 92       	push	r13
    9782:	ef 92       	push	r14
    9784:	ff 92       	push	r15
    9786:	0f 93       	push	r16
    9788:	1f 93       	push	r17
    978a:	cf 93       	push	r28
    978c:	df 93       	push	r29
    978e:	ec 01       	movw	r28, r24
    9790:	7b 01       	movw	r14, r22
	unsigned char do_render = 0;
	unsigned char start_game = 0;

	// Update
	do_render = _handle_select_helper(&p1s, p1, &player1);
    9792:	48 e7       	ldi	r20, 0x78	; 120
    9794:	51 e0       	ldi	r21, 0x01	; 1
    9796:	bc 01       	movw	r22, r24
    9798:	84 e3       	ldi	r24, 0x34	; 52
    979a:	9b e0       	ldi	r25, 0x0B	; 11
    979c:	0e 94 63 4a 	call	0x94c6	; 0x94c6 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    97a0:	91 e0       	ldi	r25, 0x01	; 1
    97a2:	20 91 39 0b 	lds	r18, 0x0B39
    97a6:	22 30       	cpi	r18, 0x02	; 2
    97a8:	09 f0       	breq	.+2      	; 0x97ac <update_handle_select+0x38>
    97aa:	90 e0       	ldi	r25, 0x00	; 0
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
	unsigned char do_render = 0;
	unsigned char start_game = 0;
    97ac:	79 2e       	mov	r7, r25

	// Update
	do_render = _handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if ((game.selection == PVP) && (do_render))
    97ae:	20 91 3e 0b 	lds	r18, 0x0B3E
    97b2:	21 30       	cpi	r18, 0x01	; 1
    97b4:	71 f4       	brne	.+28     	; 0x97d2 <update_handle_select+0x5e>
    97b6:	88 23       	and	r24, r24
    97b8:	09 f4       	brne	.+2      	; 0x97bc <update_handle_select+0x48>
    97ba:	bb c0       	rjmp	.+374    	; 0x9932 <update_handle_select+0x1be>
	{
		do_render = _handle_select_helper(&p2s, p2, &player2);
    97bc:	41 e4       	ldi	r20, 0x41	; 65
    97be:	51 e0       	ldi	r21, 0x01	; 1
    97c0:	b7 01       	movw	r22, r14
    97c2:	8e e2       	ldi	r24, 0x2E	; 46
    97c4:	9b e0       	ldi	r25, 0x0B	; 11
    97c6:	0e 94 63 4a 	call	0x94c6	; 0x94c6 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    97ca:	90 91 33 0b 	lds	r25, 0x0B33
    97ce:	92 30       	cpi	r25, 0x02	; 2
    97d0:	21 f4       	brne	.+8      	; 0x97da <update_handle_select+0x66>
	}

	// Render
	if (do_render)
    97d2:	88 23       	and	r24, r24
    97d4:	09 f4       	brne	.+2      	; 0x97d8 <update_handle_select+0x64>
    97d6:	8c c0       	rjmp	.+280    	; 0x98f0 <update_handle_select+0x17c>
    97d8:	04 c0       	rjmp	.+8      	; 0x97e2 <update_handle_select+0x6e>
    97da:	88 23       	and	r24, r24
    97dc:	09 f4       	brne	.+2      	; 0x97e0 <update_handle_select+0x6c>
    97de:	ab c0       	rjmp	.+342    	; 0x9936 <update_handle_select+0x1c2>
	do_render = _handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if ((game.selection == PVP) && (do_render))
	{
		do_render = _handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
    97e0:	71 2c       	mov	r7, r1
	}

	// Render
	if (do_render)
	{
		clear_sprites();
    97e2:	0e 94 4d 47 	call	0x8e9a	; 0x8e9a <clear_sprites>
		MapSprite(0, map_tank1_up_0);
    97e6:	6b e6       	ldi	r22, 0x6B	; 107
    97e8:	77 e3       	ldi	r23, 0x37	; 55
    97ea:	80 e0       	ldi	r24, 0x00	; 0
    97ec:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>
		MapSprite(4, map_tank2_up_0);
    97f0:	63 e5       	ldi	r22, 0x53	; 83
    97f2:	77 e3       	ldi	r23, 0x37	; 55
    97f4:	84 e0       	ldi	r24, 0x04	; 4
    97f6:	0e 94 e5 44 	call	0x89ca	; 0x89ca <MapSprite>

		// Position sprites
		MoveSprite(0, 3*8, 4*8, 2, 2);
    97fa:	02 e0       	ldi	r16, 0x02	; 2
    97fc:	22 e0       	ldi	r18, 0x02	; 2
    97fe:	40 e2       	ldi	r20, 0x20	; 32
    9800:	68 e1       	ldi	r22, 0x18	; 24
    9802:	80 e0       	ldi	r24, 0x00	; 0
    9804:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
		MoveSprite(4, 20*8, 4*8, 2, 2);
    9808:	22 e0       	ldi	r18, 0x02	; 2
    980a:	40 e2       	ldi	r20, 0x20	; 32
    980c:	60 ea       	ldi	r22, 0xA0	; 160
    980e:	84 e0       	ldi	r24, 0x04	; 4
    9810:	0e 94 25 45 	call	0x8a4a	; 0x8a4a <MoveSprite>
		_handle_select_render_helper(&p1s, p1, 2, 8);
    9814:	28 e0       	ldi	r18, 0x08	; 8
    9816:	42 e0       	ldi	r20, 0x02	; 2
    9818:	be 01       	movw	r22, r28
    981a:	84 e3       	ldi	r24, 0x34	; 52
    981c:	9b e0       	ldi	r25, 0x0B	; 11
    981e:	0e 94 13 4b 	call	0x9626	; 0x9626 <_handle_select_render_helper>
		if (game.selection == PVP)
    9822:	80 91 3e 0b 	lds	r24, 0x0B3E
    9826:	81 30       	cpi	r24, 0x01	; 1
    9828:	39 f4       	brne	.+14     	; 0x9838 <update_handle_select+0xc4>
		{
			_handle_select_render_helper(&p2s, p2, 19, 10);
    982a:	2a e0       	ldi	r18, 0x0A	; 10
    982c:	43 e1       	ldi	r20, 0x13	; 19
    982e:	b7 01       	movw	r22, r14
    9830:	8e e2       	ldi	r24, 0x2E	; 46
    9832:	9b e0       	ldi	r25, 0x0B	; 11
    9834:	0e 94 13 4b 	call	0x9626	; 0x9626 <_handle_select_render_helper>
		}

		// Print
		Print(9, 1, strHandlesTitle);
    9838:	48 e8       	ldi	r20, 0x88	; 136
    983a:	59 e1       	ldi	r21, 0x19	; 25
    983c:	61 e0       	ldi	r22, 0x01	; 1
    983e:	70 e0       	ldi	r23, 0x00	; 0
    9840:	89 e0       	ldi	r24, 0x09	; 9
    9842:	90 e0       	ldi	r25, 0x00	; 0
    9844:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(6, 5, strPlayer1);
    9848:	47 e7       	ldi	r20, 0x77	; 119
    984a:	59 e1       	ldi	r21, 0x19	; 25
    984c:	65 e0       	ldi	r22, 0x05	; 5
    984e:	70 e0       	ldi	r23, 0x00	; 0
    9850:	86 e0       	ldi	r24, 0x06	; 6
    9852:	90 e0       	ldi	r25, 0x00	; 0
    9854:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(23, 5, strPlayer2);
    9858:	44 e7       	ldi	r20, 0x74	; 116
    985a:	59 e1       	ldi	r21, 0x19	; 25
    985c:	65 e0       	ldi	r22, 0x05	; 5
    985e:	70 e0       	ldi	r23, 0x00	; 0
    9860:	87 e1       	ldi	r24, 0x17	; 23
    9862:	90 e0       	ldi	r25, 0x00	; 0
    9864:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
    9868:	83 e2       	ldi	r24, 0x23	; 35
    986a:	e8 2e       	mov	r14, r24
    986c:	81 e0       	ldi	r24, 0x01	; 1
    986e:	f8 2e       	mov	r15, r24
		for (int i = 0; i < 27; i += 1)
    9870:	c0 e0       	ldi	r28, 0x00	; 0
    9872:	d0 e0       	ldi	r29, 0x00	; 0
		{
			PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    9874:	93 e0       	ldi	r25, 0x03	; 3
    9876:	a9 2e       	mov	r10, r25
    9878:	b1 2c       	mov	r11, r1
    987a:	67 01       	movw	r12, r14
    987c:	ce 01       	movw	r24, r28
    987e:	b5 01       	movw	r22, r10
    9880:	0e 94 0f 4d 	call	0x9a1e	; 0x9a1e <__divmodhi4>
    9884:	4c 01       	movw	r8, r24
    9886:	8b 01       	movw	r16, r22
    9888:	08 5f       	subi	r16, 0xF8	; 248
    988a:	1f 4f       	sbci	r17, 0xFF	; 255
    988c:	f7 01       	movw	r30, r14
    988e:	41 91       	ld	r20, Z+
    9890:	7f 01       	movw	r14, r30
    9892:	b8 01       	movw	r22, r16
    9894:	03 96       	adiw	r24, 0x03	; 3
    9896:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>
			PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    989a:	f6 01       	movw	r30, r12
    989c:	40 81       	ld	r20, Z
    989e:	b8 01       	movw	r22, r16
    98a0:	c4 01       	movw	r24, r8
    98a2:	44 96       	adiw	r24, 0x14	; 20
    98a4:	0e 94 ef 45 	call	0x8bde	; 0x8bde <PrintChar>

		// Print
		Print(9, 1, strHandlesTitle);
		Print(6, 5, strPlayer1);
		Print(23, 5, strPlayer2);
		for (int i = 0; i < 27; i += 1)
    98a8:	21 96       	adiw	r28, 0x01	; 1
    98aa:	cb 31       	cpi	r28, 0x1B	; 27
    98ac:	d1 05       	cpc	r29, r1
    98ae:	29 f7       	brne	.-54     	; 0x987a <update_handle_select+0x106>
			PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
			PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
		}

		// Instructions
		Print(8, 21, strSelectHandle);
    98b0:	49 e6       	ldi	r20, 0x69	; 105
    98b2:	59 e1       	ldi	r21, 0x19	; 25
    98b4:	65 e1       	ldi	r22, 0x15	; 21
    98b6:	70 e0       	ldi	r23, 0x00	; 0
    98b8:	88 e0       	ldi	r24, 0x08	; 8
    98ba:	90 e0       	ldi	r25, 0x00	; 0
    98bc:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(8, 22, strConfirmHandle);
    98c0:	4d e5       	ldi	r20, 0x5D	; 93
    98c2:	59 e1       	ldi	r21, 0x19	; 25
    98c4:	66 e1       	ldi	r22, 0x16	; 22
    98c6:	70 e0       	ldi	r23, 0x00	; 0
    98c8:	88 e0       	ldi	r24, 0x08	; 8
    98ca:	90 e0       	ldi	r25, 0x00	; 0
    98cc:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(8, 23, strCancelHandle);
    98d0:	42 e5       	ldi	r20, 0x52	; 82
    98d2:	59 e1       	ldi	r21, 0x19	; 25
    98d4:	67 e1       	ldi	r22, 0x17	; 23
    98d6:	70 e0       	ldi	r23, 0x00	; 0
    98d8:	88 e0       	ldi	r24, 0x08	; 8
    98da:	90 e0       	ldi	r25, 0x00	; 0
    98dc:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
		Print(8, 24, strChangeHandle);
    98e0:	43 e4       	ldi	r20, 0x43	; 67
    98e2:	59 e1       	ldi	r21, 0x19	; 25
    98e4:	68 e1       	ldi	r22, 0x18	; 24
    98e6:	70 e0       	ldi	r23, 0x00	; 0
    98e8:	88 e0       	ldi	r24, 0x08	; 8
    98ea:	90 e0       	ldi	r25, 0x00	; 0
    98ec:	0e 94 d4 45 	call	0x8ba8	; 0x8ba8 <Print>
	}

	// Start Game
	if (start_game)
    98f0:	77 20       	and	r7, r7
    98f2:	09 f1       	breq	.+66     	; 0x9936 <update_handle_select+0x1c2>
	{
		if (game.selection == PVCPU)
    98f4:	80 91 3e 0b 	lds	r24, 0x0B3E
    98f8:	81 11       	cpse	r24, r1
    98fa:	0a c0       	rjmp	.+20     	; 0x9910 <update_handle_select+0x19c>
		{
			player2.handle_id = 9;
    98fc:	89 e0       	ldi	r24, 0x09	; 9
    98fe:	80 93 41 01 	sts	0x0141, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    9902:	43 e0       	ldi	r20, 0x03	; 3
    9904:	6e e3       	ldi	r22, 0x3E	; 62
    9906:	71 e0       	ldi	r23, 0x01	; 1
    9908:	82 e4       	ldi	r24, 0x42	; 66
    990a:	91 e0       	ldi	r25, 0x01	; 1
    990c:	0e 94 d5 46 	call	0x8daa	; 0x8daa <LBCopyChars>
		}
		load_level(0);
    9910:	80 e0       	ldi	r24, 0x00	; 0
    9912:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    9914:	df 91       	pop	r29
    9916:	cf 91       	pop	r28
    9918:	1f 91       	pop	r17
    991a:	0f 91       	pop	r16
    991c:	ff 90       	pop	r15
    991e:	ef 90       	pop	r14
    9920:	df 90       	pop	r13
    9922:	cf 90       	pop	r12
    9924:	bf 90       	pop	r11
    9926:	af 90       	pop	r10
    9928:	9f 90       	pop	r9
    992a:	8f 90       	pop	r8
    992c:	7f 90       	pop	r7
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		load_level(0);
    992e:	0c 94 6f 47 	jmp	0x8ede	; 0x8ede <load_level>
		Print(8, 23, strCancelHandle);
		Print(8, 24, strChangeHandle);
	}

	// Start Game
	if (start_game)
    9932:	91 11       	cpse	r25, r1
    9934:	ed cf       	rjmp	.-38     	; 0x9910 <update_handle_select+0x19c>
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		load_level(0);
	}
}
    9936:	df 91       	pop	r29
    9938:	cf 91       	pop	r28
    993a:	1f 91       	pop	r17
    993c:	0f 91       	pop	r16
    993e:	ff 90       	pop	r15
    9940:	ef 90       	pop	r14
    9942:	df 90       	pop	r13
    9944:	cf 90       	pop	r12
    9946:	bf 90       	pop	r11
    9948:	af 90       	pop	r10
    994a:	9f 90       	pop	r9
    994c:	8f 90       	pop	r8
    994e:	7f 90       	pop	r7
    9950:	08 95       	ret

00009952 <main>:
}

int main()
{
	// Initialize
	random_seed = get_random_seed();
    9952:	8f ef       	ldi	r24, 0xFF	; 255
    9954:	9f e7       	ldi	r25, 0x7F	; 127
    9956:	90 93 af 0e 	sts	0x0EAF, r25
    995a:	80 93 ae 0e 	sts	0x0EAE, r24
	SetTileTable(tiles_data);
    995e:	8c e2       	ldi	r24, 0x2C	; 44
    9960:	94 e4       	ldi	r25, 0x44	; 68
    9962:	0e 94 73 38 	call	0x70e6	; 0x70e6 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    9966:	8c e2       	ldi	r24, 0x2C	; 44
    9968:	98 e3       	ldi	r25, 0x38	; 56
    996a:	0e 94 4f 38 	call	0x709e	; 0x709e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    996e:	8f e2       	ldi	r24, 0x2F	; 47
    9970:	0e 94 70 38 	call	0x70e0	; 0x70e0 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    9974:	60 e0       	ldi	r22, 0x00	; 0
    9976:	83 e0       	ldi	r24, 0x03	; 3
    9978:	0e 94 52 46 	call	0x8ca4	; 0x8ca4 <FadeIn>
	reset_game_state();
    997c:	0e 94 59 47 	call	0x8eb2	; 0x8eb2 <reset_game_state>

	while (1)
	{
		WaitVsync(1);
    9980:	81 e0       	ldi	r24, 0x01	; 1
    9982:	90 e0       	ldi	r25, 0x00	; 0
    9984:	0e 94 f2 45 	call	0x8be4	; 0x8be4 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    9988:	63 eb       	ldi	r22, 0xB3	; 179
    998a:	7b e0       	ldi	r23, 0x0B	; 11
    998c:	89 eb       	ldi	r24, 0xB9	; 185
    998e:	9b e0       	ldi	r25, 0x0B	; 11
    9990:	0e 94 93 46 	call	0x8d26	; 0x8d26 <LBGetJoyPadState>
		switch (game.current_screen)
    9994:	80 91 3a 0b 	lds	r24, 0x0B3A
    9998:	81 30       	cpi	r24, 0x01	; 1
    999a:	99 f0       	breq	.+38     	; 0x99c2 <main+0x70>
    999c:	58 f0       	brcs	.+22     	; 0x99b4 <main+0x62>
    999e:	82 30       	cpi	r24, 0x02	; 2
    99a0:	b9 f0       	breq	.+46     	; 0x99d0 <main+0x7e>
    99a2:	83 30       	cpi	r24, 0x03	; 3
    99a4:	69 f7       	brne	.-38     	; 0x9980 <main+0x2e>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				/* p2 should be replaced by AI input for Player v CPU */
				update_level(&p1, &p2);
    99a6:	63 eb       	ldi	r22, 0xB3	; 179
    99a8:	7b e0       	ldi	r23, 0x0B	; 11
    99aa:	89 eb       	ldi	r24, 0xB9	; 185
    99ac:	9b e0       	ldi	r25, 0x0B	; 11
    99ae:	0e 94 94 48 	call	0x9128	; 0x9128 <update_level>
				break;
    99b2:	e6 cf       	rjmp	.-52     	; 0x9980 <main+0x2e>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    99b4:	63 eb       	ldi	r22, 0xB3	; 179
    99b6:	7b e0       	ldi	r23, 0x0B	; 11
    99b8:	89 eb       	ldi	r24, 0xB9	; 185
    99ba:	9b e0       	ldi	r25, 0x0B	; 11
    99bc:	0e 94 32 49 	call	0x9264	; 0x9264 <update_splash>
				break;
    99c0:	df cf       	rjmp	.-66     	; 0x9980 <main+0x2e>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    99c2:	63 eb       	ldi	r22, 0xB3	; 179
    99c4:	7b e0       	ldi	r23, 0x0B	; 11
    99c6:	89 eb       	ldi	r24, 0xB9	; 185
    99c8:	9b e0       	ldi	r25, 0x0B	; 11
    99ca:	0e 94 ba 49 	call	0x9374	; 0x9374 <update_tank_rank>
				break;
    99ce:	d8 cf       	rjmp	.-80     	; 0x9980 <main+0x2e>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    99d0:	63 eb       	ldi	r22, 0xB3	; 179
    99d2:	7b e0       	ldi	r23, 0x0B	; 11
    99d4:	89 eb       	ldi	r24, 0xB9	; 185
    99d6:	9b e0       	ldi	r25, 0x0B	; 11
    99d8:	0e 94 ba 4b 	call	0x9774	; 0x9774 <update_handle_select>
				break;
    99dc:	d1 cf       	rjmp	.-94     	; 0x9980 <main+0x2e>

000099de <__udivmodqi4>:
    99de:	99 1b       	sub	r25, r25
    99e0:	79 e0       	ldi	r23, 0x09	; 9
    99e2:	04 c0       	rjmp	.+8      	; 0x99ec <__udivmodqi4_ep>

000099e4 <__udivmodqi4_loop>:
    99e4:	99 1f       	adc	r25, r25
    99e6:	96 17       	cp	r25, r22
    99e8:	08 f0       	brcs	.+2      	; 0x99ec <__udivmodqi4_ep>
    99ea:	96 1b       	sub	r25, r22

000099ec <__udivmodqi4_ep>:
    99ec:	88 1f       	adc	r24, r24
    99ee:	7a 95       	dec	r23
    99f0:	c9 f7       	brne	.-14     	; 0x99e4 <__udivmodqi4_loop>
    99f2:	80 95       	com	r24
    99f4:	08 95       	ret

000099f6 <__udivmodhi4>:
    99f6:	aa 1b       	sub	r26, r26
    99f8:	bb 1b       	sub	r27, r27
    99fa:	51 e1       	ldi	r21, 0x11	; 17
    99fc:	07 c0       	rjmp	.+14     	; 0x9a0c <__udivmodhi4_ep>

000099fe <__udivmodhi4_loop>:
    99fe:	aa 1f       	adc	r26, r26
    9a00:	bb 1f       	adc	r27, r27
    9a02:	a6 17       	cp	r26, r22
    9a04:	b7 07       	cpc	r27, r23
    9a06:	10 f0       	brcs	.+4      	; 0x9a0c <__udivmodhi4_ep>
    9a08:	a6 1b       	sub	r26, r22
    9a0a:	b7 0b       	sbc	r27, r23

00009a0c <__udivmodhi4_ep>:
    9a0c:	88 1f       	adc	r24, r24
    9a0e:	99 1f       	adc	r25, r25
    9a10:	5a 95       	dec	r21
    9a12:	a9 f7       	brne	.-22     	; 0x99fe <__udivmodhi4_loop>
    9a14:	80 95       	com	r24
    9a16:	90 95       	com	r25
    9a18:	bc 01       	movw	r22, r24
    9a1a:	cd 01       	movw	r24, r26
    9a1c:	08 95       	ret

00009a1e <__divmodhi4>:
    9a1e:	97 fb       	bst	r25, 7
    9a20:	07 2e       	mov	r0, r23
    9a22:	16 f4       	brtc	.+4      	; 0x9a28 <__divmodhi4+0xa>
    9a24:	00 94       	com	r0
    9a26:	07 d0       	rcall	.+14     	; 0x9a36 <__divmodhi4_neg1>
    9a28:	77 fd       	sbrc	r23, 7
    9a2a:	09 d0       	rcall	.+18     	; 0x9a3e <__divmodhi4_neg2>
    9a2c:	0e 94 fb 4c 	call	0x99f6	; 0x99f6 <__udivmodhi4>
    9a30:	07 fc       	sbrc	r0, 7
    9a32:	05 d0       	rcall	.+10     	; 0x9a3e <__divmodhi4_neg2>
    9a34:	3e f4       	brtc	.+14     	; 0x9a44 <__divmodhi4_exit>

00009a36 <__divmodhi4_neg1>:
    9a36:	90 95       	com	r25
    9a38:	81 95       	neg	r24
    9a3a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a3c:	08 95       	ret

00009a3e <__divmodhi4_neg2>:
    9a3e:	70 95       	com	r23
    9a40:	61 95       	neg	r22
    9a42:	7f 4f       	sbci	r23, 0xFF	; 255

00009a44 <__divmodhi4_exit>:
    9a44:	08 95       	ret

00009a46 <__tablejump2__>:
    9a46:	ee 0f       	add	r30, r30
    9a48:	ff 1f       	adc	r31, r31
    9a4a:	05 90       	lpm	r0, Z+
    9a4c:	f4 91       	lpm	r31, Z
    9a4e:	e0 2d       	mov	r30, r0
    9a50:	09 94       	ijmp

00009a52 <_exit>:
    9a52:	f8 94       	cli

00009a54 <__stop_program>:
    9a54:	ff cf       	rjmp	.-2      	; 0x9a54 <__stop_program>
