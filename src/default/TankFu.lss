
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000e596  0000e696  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e596  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f13  00800104  00800104  0000e6a4  2**5
                  ALLOC
  3 .stab         0000066c  00000000  00000000  0000e69c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000034b  00000000  00000000  0000ed08  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f053  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000007a8  00000000  00000000  0000f068  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000ac9a  00000000  00000000  0000f810  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001716  00000000  00000000  0001a4aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000260d  00000000  00000000  0001bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001910  00000000  00000000  0001e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00002101  00000000  00000000  0001fae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00009f29  00000000  00000000  00021be1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000890  00000000  00000000  0002bb10  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 3c 	jmp	0x78c4	; 0x78c4 <__ctors_end>
       4:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
       8:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
       c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      10:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      14:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      18:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      1c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      20:	0c 94 5e 41 	jmp	0x82bc	; 0x82bc <__vector_8>
      24:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      28:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      2c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      30:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      34:	0c 94 1d 3f 	jmp	0x7e3a	; 0x7e3a <__vector_13>
      38:	0c 94 5c 3f 	jmp	0x7eb8	; 0x7eb8 <__vector_14>
      3c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      40:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      44:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      48:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      4c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      50:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      54:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      58:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      5c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      60:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      64:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      68:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>
      6c:	0c 94 cd 3c 	jmp	0x799a	; 0x799a <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	3c 43 3f 43 9b 43 9f 43 a6 43 47 43 4c 43 51 43     <C?C.C.C.CGCLCQC
      ce:	ae 43 54 43 57 43 5a 43 95 43 98 43 be 43           .CTCWCZC.C.C.C

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.3012>:
      e8:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

000000f6 <__c.3014>:
      f6:	4f 4b 0d 0a 00                                      OK...

000000fb <__c.3008>:
      fb:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

0000010a <__c.3010>:
     10a:	4f 4b 0d 0a 00                                      OK...

0000010f <__c.3003>:
     10f:	2b 2b 2b 00                                         +++.

00000113 <__c.2998>:
     113:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

00000120 <__c.2994>:
     120:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

0000012f <__c.2996>:
     12f:	4f 4b 0d 0a 00                                      OK...

00000134 <__c.2990>:
     134:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     144:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     154:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

00000160 <__c.2992>:
     160:	4f 4b 0d 0a 00                                      OK...

00000165 <__c.2986>:
     165:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     175:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000183 <__c.2988>:
     183:	4f 4b 0d 0a 00                                      OK...

00000188 <__c.2984>:
     188:	4f 4b 0d 0a 00                                      OK...

0000018d <__c.2980>:
     18d:	41 54 2b 43 57 4c 41 50 0d 0a 00                    AT+CWLAP...

00000198 <__c.2982>:
     198:	4f 4b 0d 0a 00                                      OK...

0000019d <__c.2976>:
     19d:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 31 2c     AT+CWDHCP_CUR=1,
     1ad:	30 0d 0a 00                                         0...

000001b1 <__c.2978>:
     1b1:	4f 4b 0d 0a 00                                      OK...

000001b6 <__c.2972>:
     1b6:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     1c6:	0a 00                                               ..

000001c8 <__c.2974>:
     1c8:	4f 4b 0d 0a 00                                      OK...

000001cd <__c.2966>:
     1cd:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000001da <__c.2962>:
     1da:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001e9 <__c.2964>:
     1e9:	4f 4b 0d 0a 00                                      OK...

000001ee <__c.2958>:
     1ee:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1fe:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     20e:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

0000021c <__c.2960>:
     21c:	4f 4b 0d 0a 00                                      OK...

00000221 <__c.2956>:
     221:	4f 4b 0d 0a 00                                      OK...

00000226 <__c.2949>:
     226:	4f 4b 0d 0a 00                                      OK...

0000022b <__c.2947>:
     22b:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     23b:	0d 0a 00                                            ...

0000023e <__c.2943>:
     23e:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     24e:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

0000025b <__c.2945>:
     25b:	4f 4b 0d 0a 00                                      OK...

00000260 <__c.2939>:
     260:	41 54 2b 43 57 44 48 43 50 5f 43 55 52 3d 30 2c     AT+CWDHCP_CUR=0,
     270:	30 0d 0a 00                                         0...

00000274 <__c.2941>:
     274:	4f 4b 0d 0a 00                                      OK...

00000279 <__c.2935>:
     279:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     289:	0a 00                                               ..

0000028b <__c.2937>:
     28b:	4f 4b 0d 0a 00                                      OK...

00000290 <__c.2902>:
     290:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 34 34 30     AT+UART_CUR=1440
     2a0:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

000002ac <__c.2904>:
     2ac:	4f 4b 0d 0a 00                                      OK...

000002b1 <__c.2896>:
     2b1:	41 54 0d 0a 00                                      AT...

000002b6 <__c.2898>:
     2b6:	4f 4b 0d 0a 00                                      OK...

000002bb <bauds>:
     2bb:	72 01 f6 00 b8 00 5c 00 3c 00 2c 00 1e 00           r.....\.<.,...

000002c9 <strCredits>:
     2c9:	54 41 4e 4b 20 46 55 20 56 33 2e 30 20 46 4f 52     TANK FU V3.0 FOR
     2d9:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2e9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2f9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     309:	4f 4b 53 00 00 00 00 00 4c 4f 4f 4b 49 4e 47 20     OKS.....LOOKING 
     319:	46 4f 52 20 57 49 46 49 20 44 45 56 49 43 45 2e     FOR WIFI DEVICE.
     329:	2e 2e 00 23 00                                      ...#.

0000032e <default_scores>:
     32e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     33e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000034c <default_handles>:
     34c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     35c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000036a <strLevels>:
     36a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     37a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     38a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     39a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     3aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     3ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     3ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     3da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     3ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     3fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     40a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000041a <strPaused>:
     41a:	50 41 55 53 45 44 00                                PAUSED.

00000421 <strExit>:
     421:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000042a <strTotal>:
     42a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000431 <strScore>:
     431:	53 43 4f 52 45 3a 00                                SCORE:.

00000438 <strFinalScore>:
     438:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000444 <strBy>:
     444:	42 59 00                                            BY.

00000447 <strOwns>:
     447:	4f 57 4e 53 00                                      OWNS.

0000044c <strChangeHandle>:
     44c:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

0000045b <strPlayer2>:
     45b:	50 32 00                                            P2.

0000045e <strPlayer1>:
     45e:	50 31 00                                            P1.

00000461 <strVertSep>:
     461:	3b 00                                               ;.

00000463 <strUnderline>:
     463:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000046f <strHandlesTitle>:
     46f:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000047b <strHighscores>:
     47b:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000485 <strCopyright>:
     485:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     495:	4f 4f 4b 53 00                                      OOKS.

0000049a <strSelectHandle>:
     49a:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

000004a9 <strCancelHandle>:
     4a9:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000004b4 <strReset>:
     4b4:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     4c4:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000004cd <strConfirmHandle>:
     4cd:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     4dd:	54 00                                               T.

000004df <strJoinNetGame>:
     4df:	4a 4f 49 4e 20 4e 45 54 20 47 41 4d 45 00           JOIN NET GAME.

000004ed <strHostNetGame>:
     4ed:	48 4f 53 54 20 4e 45 54 20 47 41 4d 45 00           HOST NET GAME.

000004fb <str2Player>:
     4fb:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

0000050c <str1Player>:
     50c:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

0000051a <my_patches>:
     51a:	02 0e 0e 00 00 e3 06 e4 06 02 c7 0b 00 00 45 02     ..............E.
     52a:	46 02 02 16 0a 00 00 af 01 b0 01 02 f6 07 00 00     F...............
     53a:	1e 02 1f 02 02 84 06 00 00 70 01 71 01 02 c7 0b     .........p.q....
     54a:	00 00 45 02 46 02 02 0e 0e 00 00 e3 06 e4 06 00     ..E.F...........
     55a:	00 00 62 05 00 00 00 00                             ..b.....

00000562 <ad_alarm>:
     562:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     572:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     582:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     592:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5a2:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     5b2:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     5c2:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     5d2:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5e2:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5f2:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     602:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     612:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     622:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     632:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     642:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     652:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     662:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     672:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     682:	00 ff                                               ..

00000684 <ad_navigate>:
     684:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     694:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     6a4:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     6b4:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     6c4:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     6d4:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     6e4:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     6f4:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     704:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     714:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     724:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     734:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     744:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     754:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     764:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     774:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     784:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     794:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     7a4:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     7b4:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     7c4:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     7d4:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     7e4:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

000007f6 <ad_metal>:
     7f6:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     806:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     816:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     826:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     836:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     846:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     856:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     866:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     876:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     886:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     896:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     8a6:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     8b6:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     8c6:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     8d6:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     8e6:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     8f6:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     906:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     916:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     926:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     936:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     946:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     956:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     966:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     976:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     986:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     996:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     9a6:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     9b6:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     9c6:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     9d6:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     9e6:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     9f6:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     a06:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000a16 <ad_item>:
     a16:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     a26:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     a36:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     a46:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     a56:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     a66:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     a76:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     a86:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     a96:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     aa6:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     ab6:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     ac6:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     ad6:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     ae6:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     af6:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     b06:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     b16:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     b26:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     b36:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     b46:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     b56:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     b66:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     b76:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     b86:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     b96:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     ba6:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     bb6:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000bc7 <ad_cannonball>:
     bc7:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     bd7:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     be7:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     bf7:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     c07:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     c17:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     c27:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     c37:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     c47:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     c57:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     c67:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     c77:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     c87:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     c97:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     ca7:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     cb7:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     cc7:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     cd7:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     ce7:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     cf7:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     d07:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     d17:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     d27:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     d37:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     d47:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     d57:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     d67:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     d77:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     d87:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     d97:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     da7:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     db7:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     dc7:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     dd7:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     de7:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     df7:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     e07:	ff ff ff ff ff 00 00                                .......

00000e0e <ad_brick_explode>:
     e0e:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     e1e:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     e2e:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     e3e:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     e4e:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     e5e:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     e6e:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     e7e:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     e8e:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     e9e:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     eae:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     ebe:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     ece:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     ede:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     eee:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     efe:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     f0e:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     f1e:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     f2e:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     f3e:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     f4e:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     f5e:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     f6e:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     f7e:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     f8e:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     f9e:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     fae:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     fbe:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     fce:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     fde:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     fee:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     ffe:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    100e:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    101e:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    102e:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    103e:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    104e:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    105e:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    106e:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    107e:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    108e:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    109e:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    10ae:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    10be:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    10ce:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    10de:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    10ee:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    10fe:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    110e:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    111e:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    112e:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    113e:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    114e:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    115e:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    116e:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    117e:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    118e:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    119e:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    11ae:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    11be:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    11ce:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    11de:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    11ee:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    11fe:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    120e:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    121e:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    122e:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    123e:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    124e:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    125e:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    126e:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    127e:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    128e:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    129e:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    12ae:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    12be:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    12ce:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    12de:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    12ee:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    12fe:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    130e:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    131e:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    132e:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    133e:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    134e:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    135e:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    136e:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    137e:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    138e:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    139e:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    13ae:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    13be:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    13ce:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    13de:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    13ee:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    13fe:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    140e:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    141e:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    142e:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    143e:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    144e:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    145e:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    146e:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    147e:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    148e:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    149e:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    14ae:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    14be:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    14ce:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    14de:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    14ee:	04 04 02 01 00                                      .....

000014f3 <level_data>:
    14f3:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1503:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    152b:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1543:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1553:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1563:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    157f:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    158f:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    159f:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    15bb:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    15db:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    15eb:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    15fb:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    160b:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    161b:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    162b:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    163b:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    164b:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    165b:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    166b:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    167b:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    168b:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    169b:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    16ab:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    16c3:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    16d3:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    16ef:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1707:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1723:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1733:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1743:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    175f:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    176f:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    177f:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    179f:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    17bf:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17cf:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17df:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17ef:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    17ff:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    181b:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1837:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1847:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1857:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1867:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1877:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1887:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1897:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    18a7:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    18b7:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    18c7:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    18d7:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    18e7:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    18f7:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1907:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1917:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1927:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1937:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1947:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1957:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1967:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1977:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1987:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1997:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    19a7:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    19b7:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    19c7:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    19d7:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    19e7:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    19f7:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1a07:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1a17:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1a27:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1a37:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1a47:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1a57:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1a67:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1a77:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a8f:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1aab:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    1abb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1acb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1adb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1aeb:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b07:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b27:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b43:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b63:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b7f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b9f:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    1bb7:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    1bd3:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1be3:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1bf3:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    1c03:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    1c13:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1c23:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    1c33:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    1c43:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    1c53:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    1c63:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    1c73:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    1c83:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1c93:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    1ca3:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    1cb3:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cc3:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1cd3:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ce3:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    1cff:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1d23:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d43:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d5f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d7f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d9b:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dab:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dbb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dcb:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ddb:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1deb:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1dfb:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    1e0b:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    1e1b:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    1e2b:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1e3b:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1e4b:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1e5b:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1e6b:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1e7b:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1e8b:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1e9b:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1eab:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1ebb:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1ecb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ee7:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1eff:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    1f0f:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    1f1f:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    1f2f:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1f47:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1f57:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1f67:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1f77:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1f87:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1f97:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    1faf:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    1fbf:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    1fcf:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1fe7:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1ff7:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2007:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    2017:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    2027:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    2037:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    2047:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    205f:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    206f:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2087:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2097:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20a7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20b7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20c7:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    20e3:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    20ff:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    211f:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    212f:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    213f:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    215b:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    217b:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2197:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    21b7:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    21c7:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    21d7:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    21e7:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    21ff:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    220f:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    221f:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    222f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    223f:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    224f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    226b:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    227b:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    228b:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    229b:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    22bb:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    22d7:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    22f7:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    230f:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    231f:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    233b:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    2357:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2377:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2387:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2397:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23a7:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23b7:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    23c7:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    23df:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    23ef:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    23ff:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    240f:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    241f:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    242f:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    243f:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    244f:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    245f:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2487:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2497:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    24a7:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    24b7:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    24cf:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    24df:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    24ef:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    24ff:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    250f:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    251f:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    252f:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    2547:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    2557:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2567:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2577:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2587:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2597:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    25a7:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    25b7:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    25c7:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    25d7:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    25e7:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    25f7:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2607:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2617:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2627:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2643:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2667:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2677:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2687:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2697:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    26a7:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    26b7:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    26cf:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    26df:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    26ef:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    26ff:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    270f:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    271f:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    272f:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    273f:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    274f:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    275f:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    276f:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2793:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27af:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    27bf:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    27cf:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    27df:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    27ef:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    27ff:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    280f:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    281f:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2837:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2847:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2863:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2883:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2893:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    28a3:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    28b3:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    28c3:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    28d3:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    28e3:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    28f3:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2903:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2913:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2923:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2933:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2943:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2953:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2963:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2973:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2983:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2993:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29af:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29cb:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29eb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a07:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2a17:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2a27:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a43:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a5b:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    2a6b:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2a7b:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    2a8b:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    2a9b:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    2aab:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    2abb:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    2acb:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    2adb:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    2aeb:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    2afb:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    2b0b:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2b23:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2b33:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2b43:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2b53:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2b63:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    2b73:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b8f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2bab:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2bbb:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2bcb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2be7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c07:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c23:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c43:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c53:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c63:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c73:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    2c9b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cbb:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cd7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cf7:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2d07:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2d17:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d33:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    2d4f:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2d67:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2d77:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2d87:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2d97:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2da7:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2db7:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2dc7:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2dd7:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2de7:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2df7:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    2e07:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2e17:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2e27:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    2e3f:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2e5f:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e7b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e9b:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2eab:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2ebb:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ed7:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ef3:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f13:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f2f:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f3f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f4f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f5f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f6f:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2f7f:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2f97:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2fa7:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2fb7:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2fc7:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2fd7:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2fe7:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2ff7:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    300f:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    301f:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    302f:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    303f:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    304f:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    305f:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    307b:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    308b:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    309b:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    30ab:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    30bb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    30cb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    30db:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30eb:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    30fb:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    310b:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    312f:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    313f:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    314f:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    315f:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3177:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3187:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3197:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    31a7:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    31b7:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    31c7:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    31d7:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    31ef:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    31ff:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    320f:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    321f:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    322f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    323f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    324f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    325f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    326f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    327f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    328f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    329f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    32af:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    32bf:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    32cf:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    32df:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    32ef:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    32ff:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    330f:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    331f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    332f:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    333f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    334f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    335f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    336f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    337f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    338f:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    339f:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    33af:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    33bf:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    33df:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33ff:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    341b:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    343b:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    3453:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    3477:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3493:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34b3:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34cf:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    34df:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    34ef:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    350b:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    351b:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    352b:	02 02                                               ..

0000352d <sprites_data>:
    352d:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    353d:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    354d:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    355d:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    356d:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    357d:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    358d:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    359d:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    35ad:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    35bd:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    35cd:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    35dd:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    35ed:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    35fd:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    360d:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    361d:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    362d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    363d:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    364d:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    365d:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    366d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    367d:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    368d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    369d:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    36ad:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    36bd:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    36cd:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    36dd:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    36ed:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    36fd:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    370d:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    371d:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    372d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    373d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    374d:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    375d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    376d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    377d:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    378d:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    379d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37ad:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    37bd:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    37cd:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    37dd:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    37ed:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    37fd:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    380d:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    381d:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    382d:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    383d:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    384d:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    385d:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    386d:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    387d:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    388d:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    389d:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    38ad:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    38bd:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    38cd:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    38dd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38ed:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    38fd:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    390d:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    391d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    392d:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    393d:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    394d:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    395d:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    396d:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    397d:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    398d:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    399d:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    39ad:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    39bd:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    39cd:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    39dd:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    39ed:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    39fd:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3a0d:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3a1d:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3a2d:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3a3d:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3a4d:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3a5d:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3a6d:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3a7d:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3a8d:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3a9d:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3aad:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3abd:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3acd:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3add:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3aed:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3afd:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3b0d:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3b1d:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3b2d:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3b3d:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3b4d:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3b5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b6d:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3b7d:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3b8d:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3b9d:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bad:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3bbd:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3bcd:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    3bdd:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bed:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bfd:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    3c0d:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    3c1d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c2d:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3c3d:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3c4d:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3c5d:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3c6d:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3c7d:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3c8d:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3c9d:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3cad:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3cbd:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3ccd:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3cdd:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3ced:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3cfd:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3d0d:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3d1d:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3d2d:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    3d3d:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    3d4d:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    3d5d:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3d6d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d7d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d8d:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3d9d:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3dad:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3dbd:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3dcd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ddd:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ded:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3dfd:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    3e0d:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    3e1d:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    3e2d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e3d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e4d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3e5d:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003e6d <map_sub_turret>:
    3e6d:	01 01 23                                            ..#

00003e70 <map_sub_shot>:
    3e70:	01 01 1b                                            ...

00003e73 <map_up_arrow>:
    3e73:	01 01 22                                            .."

00003e76 <map_down_arrow>:
    3e76:	01 01 21                                            ..!

00003e79 <map_right_arrow>:
    3e79:	01 01 20                                            .. 

00003e7c <map_rocket_right_1>:
    3e7c:	01 01 1a                                            ...

00003e7f <map_rocket_right_0>:
    3e7f:	01 01 19                                            ...

00003e82 <map_rocket_up_1>:
    3e82:	01 01 18                                            ...

00003e85 <map_rocket_up_0>:
    3e85:	01 01 17                                            ...

00003e88 <map_ball>:
    3e88:	01 01 16                                            ...

00003e8b <map_explosion_2>:
    3e8b:	02 02 08 09 09 08                                   ......

00003e91 <map_explosion_1>:
    3e91:	02 02 06 07 10 11                                   ......

00003e97 <map_explosion_0>:
    3e97:	02 02 04 05 0e 0f                                   ......

00003e9d <map_tank2_right_0>:
    3e9d:	02 02 14 15 1e 1f                                   ......

00003ea3 <map_tank2_up_0>:
    3ea3:	02 02 12 13 1c 1d                                   ......

00003ea9 <map_tank1_right_0>:
    3ea9:	02 02 02 03 0c 0d                                   ......

00003eaf <map_tank1_up_0>:
    3eaf:	02 02 00 01 0a 0b                                   ......

00003eb5 <map_tank_blank>:
    3eb5:	02 02 24 24 24 24                                   ..$$$$

00003ebb <map_none>:
    3ebb:	01 01 24                                            ..$

00003ebe <tiles_data>:
	...
    3efe:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3f0e:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3f1e:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3f2e:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3f3e:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    3f4e:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    3f5e:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3f6e:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3f7e:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    3f8e:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    3f9e:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    3fae:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3fbe:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    3fce:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    3fde:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3fee:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    3ffe:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    400e:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    401e:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    402e:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4046:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4056:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4066:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    407e:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    408e:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    409e:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    40ae:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    40c6:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    40e6:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    40fe:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    410e:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    411e:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    412e:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    413e:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    414e:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    415e:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    416e:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    417e:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    418e:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    419e:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    41ae:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    41be:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    41ce:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    41de:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    41ee:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    41fe:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    420e:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    421e:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    422e:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    423e:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    424e:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    425e:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    426e:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    427e:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    428e:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    429e:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    42ae:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    42be:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    42ce:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    42de:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    42ee:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    42fe:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    430e:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    431e:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    432e:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    433e:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    434e:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    435e:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    436e:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    437e:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    438e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    439e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    43ae:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    43be:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    43ce:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43de:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43ee:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    441e:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    442e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    443e:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    444e:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    445e:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    446e:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    447e:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    448e:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    449e:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    44ae:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    44be:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    44ce:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    44de:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    44ee:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    44fe:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    450e:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    451e:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    452e:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    453e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    454e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    455e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    456e:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    457e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    458e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    45be:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    45ce:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    45de:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    45ee:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    45fe:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    460e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    461e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    462e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    463e:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    467e:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    468e:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    469e:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    46ae:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    46be:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    46ce:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    46de:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    46ee:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    472e:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4766:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4776:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4786:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4796:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    47a6:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    47b6:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    47c6:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    47d6:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    47e6:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    47f6:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4806:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4816:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4826:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4836:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4846:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4856:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4866:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4876:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4886:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4896:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    48a6:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    48b6:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    48c6:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    48d6:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    48e6:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    48f6:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4906:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    493e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    494e:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    495e:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4982:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4992:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    49a2:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    49b2:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    49c2:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    49d2:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    49e2:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    49f2:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4a02:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4a12:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4a22:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4a32:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4a42:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4a52:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4a62:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4a72:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    4a82:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    4a92:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4aa2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ab2:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    4ac2:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    4ad2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4ae2:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4af2:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    4b02:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    4b12:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    4b22:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    4b32:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    4b42:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    4b52:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    4b62:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    4b72:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    4b82:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4b92:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4ba2:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4bb2:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4bc2:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4bd2:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4be2:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    4bf2:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    4c02:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4c12:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4c22:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    4c32:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4c42:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4c52:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4c62:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c72:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4c82:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    4c92:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4ca2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cb2:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4cc2:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    4cd2:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ce2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cf2:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4d02:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4d12:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d22:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d32:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    4d42:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    4d52:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d62:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4d72:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4d82:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d92:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4da2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4db2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4dc2:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4dd2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4de2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4df2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e02:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4e12:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e22:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4e32:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e42:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4e52:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4e62:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e72:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e82:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4e92:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4ea2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4eb2:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    4ec2:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4ed2:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    4ee2:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    4ef2:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    4f02:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4f12:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    4f22:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    4f32:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4f42:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4f52:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4f62:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4f72:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4f82:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4f92:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4fa2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    4fb2:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    4fc2:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fd2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fe2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ff2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    5002:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5012:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5022:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5032:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5042:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5052:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5062:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5072:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5082:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5092:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50a2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50b2:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    50c2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50e2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50f2:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5102:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    5112:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5122:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5132:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5142:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5152:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5162:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5172:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5182:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5192:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    51a2:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    51b2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    51c2:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    51d2:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    51e2:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    51f2:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5202:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5212:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5222:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5232:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5242:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5252:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5262:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5272:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5282:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5292:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    52a2:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    52b2:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    52c2:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    52d2:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    52e2:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    52f2:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    5302:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    5312:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5322:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5332:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5342:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5352:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5362:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5372:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5382:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5392:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    53a2:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    53b2:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    53c2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53d2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53e2:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    53f2:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5402:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5412:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5422:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5432:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5442:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5452:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5462:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5472:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5482:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5492:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54a2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54b2:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    54c2:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    54d2:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    54e2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    54f2:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5502:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5512:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5522:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5532:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5542:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5552:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5562:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5572:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5582:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5592:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    55a2:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    55b2:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    55c2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55d2:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    55e2:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    55f2:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    5602:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    5612:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5622:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5632:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5642:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5652:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5662:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5672:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5682:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5692:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    56a2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    56b2:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    56c2:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    56d2:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    56e2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    56f2:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5702:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    5712:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5722:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5732:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5742:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5752:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5762:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5772:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5782:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5792:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    57a2:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    57b2:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    57c2:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    57d2:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    57e2:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    57f2:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    5802:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    5812:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5822:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5832:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5842:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5852:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5862:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5872:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5882:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5892:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    58a2:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    58b2:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    58c2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    58d2:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    58e2:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    58f2:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5902:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5912:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5922:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5932:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5942:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5952:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5962:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5972:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5982:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5992:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    59a2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59b2:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    59c2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    59d2:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    59e2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    59f2:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5a02:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5a12:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a22:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5a32:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a42:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a52:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5a62:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    5a72:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a82:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a92:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5aa2:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    5ab2:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5ac2:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    5ad2:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    5ae2:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5af2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5b02:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    5b12:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5b22:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5b32:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    5b42:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5b52:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5b62:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5b72:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5b82:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    5b92:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    5ba2:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5bb2:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    5bc2:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5bd2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5be2:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5bf2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    5c02:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c12:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c22:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5c32:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c42:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c52:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c62:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    5c72:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c82:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    5c92:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ca2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cb2:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5cc2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5cd2:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ce2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cf2:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    5d02:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5d12:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d22:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d32:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d42:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5d52:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d62:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5d72:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5d82:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5d92:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5da2:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5db2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5dc2:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5dd2:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5de2:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5df2:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    5e02:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    5e12:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e22:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5e32:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5e42:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5e52:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5e62:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5e72:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5e82:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5e92:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ea2:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5eb2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5ec2:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5ed2:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ee2:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5ef2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    5f02:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    5f12:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    5f22:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5f32:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5f42:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5f52:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5f62:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5f72:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5f82:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5f92:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5fa2:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5fb2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5fc2:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5fd2:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5fe2:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5ff2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    6002:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6012:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6022:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6032:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6042:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6052:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6062:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6072:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6082:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6092:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    60a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60b2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60c2:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    60d2:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    60e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60f2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6102:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    6112:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6122:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6132:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6142:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6152:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6162:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6172:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6182:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6192:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61b2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61c2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61d2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61f2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6202:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6212:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6222:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6232:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6242:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6252:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6262:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6272:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6282:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6292:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    62a2:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    62b2:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    62c2:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62d2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62f2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6302:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6312:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6322:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6332:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6342:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6352:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6362:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6372:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6382:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6392:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    63a2:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    63b2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    63c2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    63d2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    63e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    63f2:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6402:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    6412:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6422:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6432:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6442:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6452:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6462:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6472:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6482:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6492:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64a2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    64b2:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    64c2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64d2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64e2:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    64f2:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6502:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6512:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6522:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6532:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6542:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6552:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6562:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6572:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    65c6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65ee:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6606:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6616:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6646:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6656:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6666:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    667e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    668e:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    669e:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    66ae:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    66c6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    66d6:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    66e6:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    66fe:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    670e:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    671e:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    672e:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6746:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6756:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    678a:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    679a:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    67aa:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    67c6:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    67d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67e6:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6806:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6816:	df df df df df df df df 00 00 df df df df 00 00     ................
    6826:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    6846:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6856:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6866:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    68a6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    68b6:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    68d6:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6926:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    694a:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    695a:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    696a:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6986:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6996:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    69a6:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    69c6:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    69d6:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    69e6:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6a06:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6a16:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6a26:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    6a46:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    6a56:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    6a66:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6a8a:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    6a9a:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    6aaa:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    6ac6:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    6ad6:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    6ae6:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6b06:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    6b16:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    6b26:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6b46:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    6b56:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6b66:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    6b86:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6b96:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6ba6:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6bc6:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6bd6:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    6be6:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    6c0e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6c26:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6c3e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6c4e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6c5e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6c6e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6c7e:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    6c8e:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6c9e:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6cae:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6cce:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6ce6:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6cfe:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    6d0e:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6d1e:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6d2e:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6d46:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6d56:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6d6e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6d86:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6d96:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6da6:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6dc6:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6dd6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6de6:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6e06:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6e16:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6e26:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6e46:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6e56:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6e66:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6e86:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6e96:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6ea6:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6ec6:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6ed6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6ee6:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6f06:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6f16:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6f26:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6f46:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6f56:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6f66:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6f86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6f96:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6fa6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6fc6:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6fd6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6fe6:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    700a:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    701a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    702a:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7046:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7056:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7066:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7086:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7096:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    70a6:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    70c6:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    70d6:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    70e6:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7106:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7116:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7126:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7146:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7156:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7166:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7186:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7196:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    71a6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    71c6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    71d6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    71e6:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7206:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7216:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7226:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7246:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7256:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7266:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7286:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7296:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72a6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    72c6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    72d6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    72e6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7306:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7316:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7326:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7346:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7356:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7366:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7386:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7396:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    73a6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    73c6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    73d6:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    73e6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7406:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7416:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7426:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7446:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7456:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7466:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7486:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7496:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    74a6:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    74c6:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    74d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    74e6:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    750a:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    751a:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    756e:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

0000757e <map_sub_emerging>:
    757e:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    758e:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    759e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75ae:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75be:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75ce:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    75de:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    75ee:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    75fe:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    760e:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    761e:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    762e:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    763e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    764e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    765e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    766e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    767e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    768e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    769e:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    76ae:	0d 0d 0d 0d 0d 0d                                   ......

000076b4 <map_sub>:
    76b4:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    76c4:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    76d4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    76e4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    76f4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7704:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7714:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7724:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7734:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7744:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7754:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7764:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7774:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7784:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7794:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77a4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77b4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77c4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77d4:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77e4:	0d 0d 0d 0d 0d 0d                                   ......

000077ea <map_scope_2>:
    77ea:	01 01 12                                            ...

000077ed <map_scope_1>:
    77ed:	01 01 11                                            ...

000077f0 <map_scope_0>:
    77f0:	01 01 10                                            ...

000077f3 <map_blue_tank>:
    77f3:	02 02 2b 2c 31 32                                   ..+,12

000077f9 <map_green_tank>:
    77f9:	02 02 18 19 23 24                                   ....#$

000077ff <map_fence>:
    77ff:	01 01 0f                                            ...

00007802 <map_turf>:
    7802:	01 01 0e                                            ...

00007805 <map_water>:
    7805:	01 01 0d                                            ...

00007808 <map_metal_bl>:
    7808:	01 01 0c                                            ...

0000780b <map_metal_tr>:
    780b:	01 01 0b                                            ...

0000780e <map_metal_br>:
    780e:	01 01 0a                                            ...

00007811 <map_metal_tl>:
    7811:	01 01 09                                            ...

00007814 <map_tile_exp_2>:
    7814:	01 01 08                                            ...

00007817 <map_tile_exp_1>:
    7817:	01 01 07                                            ...

0000781a <map_tile_exp_0>:
    781a:	01 01 06                                            ...

0000781d <map_rocket_itm>:
    781d:	01 01 04                                            ...

00007820 <map_explode_itm>:
    7820:	01 01 03                                            ...

00007823 <map_speed_itm>:
    7823:	01 01 02                                            ...

00007826 <map_metal>:
    7826:	01 01 05                                            ...

00007829 <map_brick>:
    7829:	01 01 01                                            ...

0000782c <map_splash>:
    782c:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    783c:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    784c:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    785c:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    786c:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    787c:	1a 00 00 1a 2f 30                                   ..../0

00007882 <map_pause>:
    7882:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    7892:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    78a2:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    78b2:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000078c0 <map_tile_none>:
    78c0:	01 01 00 00                                         ....

000078c4 <__ctors_end>:
    78c4:	11 24       	eor	r1, r1
    78c6:	1f be       	out	0x3f, r1	; 63
    78c8:	cf ef       	ldi	r28, 0xFF	; 255
    78ca:	d0 e1       	ldi	r29, 0x10	; 16
    78cc:	de bf       	out	0x3e, r29	; 62
    78ce:	cd bf       	out	0x3d, r28	; 61

000078d0 <__do_copy_data>:
    78d0:	11 e0       	ldi	r17, 0x01	; 1
    78d2:	a0 e0       	ldi	r26, 0x00	; 0
    78d4:	b1 e0       	ldi	r27, 0x01	; 1
    78d6:	e6 e9       	ldi	r30, 0x96	; 150
    78d8:	f5 ee       	ldi	r31, 0xE5	; 229
    78da:	02 c0       	rjmp	.+4      	; 0x78e0 <__do_copy_data+0x10>
    78dc:	05 90       	lpm	r0, Z+
    78de:	0d 92       	st	X+, r0
    78e0:	a4 30       	cpi	r26, 0x04	; 4
    78e2:	b1 07       	cpc	r27, r17
    78e4:	d9 f7       	brne	.-10     	; 0x78dc <__do_copy_data+0xc>

000078e6 <__do_clear_bss>:
    78e6:	10 e1       	ldi	r17, 0x10	; 16
    78e8:	a4 e0       	ldi	r26, 0x04	; 4
    78ea:	b1 e0       	ldi	r27, 0x01	; 1
    78ec:	01 c0       	rjmp	.+2      	; 0x78f0 <.do_clear_bss_start>

000078ee <.do_clear_bss_loop>:
    78ee:	1d 92       	st	X+, r1

000078f0 <.do_clear_bss_start>:
    78f0:	a7 31       	cpi	r26, 0x17	; 23
    78f2:	b1 07       	cpc	r27, r17
    78f4:	e1 f7       	brne	.-8      	; 0x78ee <.do_clear_bss_loop>

000078f6 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    78f6:	0e 94 31 41 	call	0x8262	; 0x8262 <wdt_randomize>
#endif

    MCUSR = 0;
    78fa:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    78fc:	88 e1       	ldi	r24, 0x18	; 24
    78fe:	0f b6       	in	r0, 0x3f	; 63
    7900:	f8 94       	cli
    7902:	80 93 60 00 	sts	0x0060, r24
    7906:	10 92 60 00 	sts	0x0060, r1
    790a:	0f be       	out	0x3f, r0	; 63

0000790c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    790c:	0e 94 f3 41 	call	0x83e6	; 0x83e6 <isEepromFormatted>
    7910:	81 11       	cpse	r24, r1
    7912:	02 c0       	rjmp	.+4      	; 0x7918 <Initialize+0xc>
    7914:	0e 94 d1 41 	call	0x83a2	; 0x83a2 <FormatEeprom>

	cli();
    7918:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    791a:	c1 e0       	ldi	r28, 0x01	; 1
    791c:	c0 93 18 0a 	sts	0x0A18, r28
		tr4_barrel_hi=1;		
    7920:	c0 93 19 0a 	sts	0x0A19, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    7924:	c0 93 17 0a 	sts	0x0A17, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    7928:	0e 94 f0 42 	call	0x85e0	; 0x85e0 <InitUartRxBuffer>
		InitUartTxBuffer();
    792c:	0e 94 09 43 	call	0x8612	; 0x8612 <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7930:	10 92 04 0a 	sts	0x0A04, r1
    7934:	10 92 0a 0a 	sts	0x0A0A, r1
    7938:	10 92 10 0a 	sts	0x0A10, r1
    793c:	10 92 16 0a 	sts	0x0A16, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7940:	10 92 de 09 	sts	0x09DE, r1
	sync_flags=0;
    7944:	10 92 e0 09 	sts	0x09E0, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7948:	82 e1       	ldi	r24, 0x12	; 18
    794a:	80 93 df 09 	sts	0x09DF, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    794e:	80 ee       	ldi	r24, 0xE0	; 224
    7950:	80 93 e6 09 	sts	0x09E6, r24
	first_render_line=FIRST_RENDER_LINE;
    7954:	84 e1       	ldi	r24, 0x14	; 20
    7956:	80 93 e5 09 	sts	0x09E5, r24

	joypad1_status_hi=0;
    795a:	10 92 ea 09 	sts	0x09EA, r1
    795e:	10 92 e9 09 	sts	0x09E9, r1
	joypad2_status_hi=0;
    7962:	10 92 ee 09 	sts	0x09EE, r1
    7966:	10 92 ed 09 	sts	0x09ED, r1
	sound_enabled=1;
    796a:	c0 93 03 0a 	sts	0x0A03, r28

	InitializeVideoMode();
    796e:	0e 94 de 4e 	call	0x9dbc	; 0x9dbc <InitializeVideoMode>
    7972:	80 e7       	ldi	r24, 0x70	; 112
    7974:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7976:	fc 01       	movw	r30, r24
    7978:	25 91       	lpm	r18, Z+
    797a:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    797c:	f9 01       	movw	r30, r18
    797e:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7980:	30 83       	st	Z, r19
    7982:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7984:	20 e0       	ldi	r18, 0x00	; 0
    7986:	8e 39       	cpi	r24, 0x9E	; 158
    7988:	92 07       	cpc	r25, r18
    798a:	a9 f7       	brne	.-22     	; 0x7976 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    798c:	78 94       	sei
	
	DisplayLogo();
    798e:	0e 94 dd 4e 	call	0x9dba	; 0x9dba <DisplayLogo>
    7992:	0e 94 c4 6f 	call	0xdf88	; 0xdf88 <main>
    7996:	0c 94 c9 72 	jmp	0xe592	; 0xe592 <_exit>

0000799a <__bad_interrupt>:
    799a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000799e <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    799e:	0b e9       	ldi	r16, 0x9B	; 155
    79a0:	0a 95       	dec	r16
    79a2:	f1 f7       	brne	.-4      	; 0x79a0 <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    79a4:	10 e0       	ldi	r17, 0x00	; 0
    79a6:	1a 95       	dec	r17
    79a8:	f1 f7       	brne	.-4      	; 0x79a6 <sub_video_mode3+0x8>
    79aa:	1e e1       	ldi	r17, 0x1E	; 30
    79ac:	1a 95       	dec	r17
    79ae:	f1 f7       	brne	.-4      	; 0x79ac <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    79b0:	20 90 db 09 	lds	r2, 0x09DB
		lds r3,overlay_tile_table+1
    79b4:	30 90 dc 09 	lds	r3, 0x09DC
		lds r16,tile_table_lo 
    79b8:	00 91 d7 09 	lds	r16, 0x09D7
		lds r17,tile_table_hi
    79bc:	10 91 d8 09 	lds	r17, 0x09D8
		movw r12,r16
    79c0:	68 01       	movw	r12, r16
		movw r6,r16
    79c2:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    79c4:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    79c6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    79c8:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    79ca:	4e 01       	movw	r8, r28
		clr r0
    79cc:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    79ce:	30 91 da 09 	lds	r19, 0x09DA
		cpi r19,0
    79d2:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    79d4:	09 f0       	breq	.+2      	; 0x79d8 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    79d6:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    79d8:	09 f0       	breq	.+2      	; 0x79dc <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    79da:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    79dc:	09 f0       	breq	.+2      	; 0x79e0 <sub_video_mode3+0x42>
		mov r24,r19
    79de:	83 2f       	mov	r24, r19

		breq .+2
    79e0:	09 f0       	breq	.+2      	; 0x79e4 <sub_video_mode3+0x46>
		movw r12,r2
    79e2:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    79e4:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    79e6:	a0 2e       	mov	r10, r16
		clr r22
    79e8:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    79ea:	78 e0       	ldi	r23, 0x08	; 8

000079ec <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    79ec:	07 d3       	rcall	.+1550   	; 0x7ffc <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    79ee:	3c e0       	ldi	r19, 0x0C	; 12
    79f0:	3a 95       	dec	r19
    79f2:	f1 f7       	brne	.-4      	; 0x79f0 <next_tile_line+0x4>
    79f4:	00 00       	nop

		;***draw line***
		call render_tile_line
    79f6:	0e 94 27 3d 	call	0x7a4e	; 0x7a4e <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    79fa:	3f e0       	ldi	r19, 0x0F	; 15
    79fc:	3a 95       	dec	r19
    79fe:	f1 f7       	brne	.-4      	; 0x79fc <next_tile_line+0x10>
    7a00:	00 c0       	rjmp	.+0      	; 0x7a02 <next_tile_line+0x16>

		dec r10
    7a02:	aa 94       	dec	r10
		breq frame_end
    7a04:	a1 f0       	breq	.+40     	; 0x7a2e <frame_end>
	
		inc r22
    7a06:	63 95       	inc	r22
		lpm ;3 nop
    7a08:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    7a0a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    7a0c:	29 f0       	breq	.+10     	; 0x7a18 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7a0e:	33 e0       	ldi	r19, 0x03	; 3
    7a10:	3a 95       	dec	r19
    7a12:	f1 f7       	brne	.-4      	; 0x7a10 <next_tile_line+0x24>
    7a14:	00 c0       	rjmp	.+0      	; 0x7a16 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    7a16:	ea cf       	rjmp	.-44     	; 0x79ec <next_tile_line>

00007a18 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    7a18:	66 27       	eor	r22, r22

		clr r0
    7a1a:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    7a1c:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7a1e:	c3 0f       	add	r28, r19
		adc YH,r0
    7a20:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7a22:	8a 95       	dec	r24
		brne .+2
    7a24:	09 f4       	brne	.+2      	; 0x7a28 <next_tile_row+0x10>
		movw YL,r8	;main vram
    7a26:	e4 01       	movw	r28, r8
		brne .+2
    7a28:	09 f4       	brne	.+2      	; 0x7a2c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    7a2a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    7a2c:	df cf       	rjmp	.-66     	; 0x79ec <next_tile_line>

00007a2e <frame_end>:

	frame_end:

		WAIT r19,18
    7a2e:	36 e0       	ldi	r19, 0x06	; 6
    7a30:	3a 95       	dec	r19
    7a32:	f1 f7       	brne	.-4      	; 0x7a30 <frame_end+0x2>

		rcall hsync_pulse ;145
    7a34:	e3 d2       	rcall	.+1478   	; 0x7ffc <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    7a36:	e0 91 e0 09 	lds	r30, 0x09E0
		ldi r20,SYNC_FLAG_FIELD
    7a3a:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7a3c:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7a3e:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7a40:	e0 93 e0 09 	sts	0x09E0, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7a44:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7a46:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    7a4a:	11 24       	eor	r1, r1


		ret
    7a4c:	08 95       	ret

00007a4e <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    7a4e:	de 01       	movw	r26, r28

		mul r22,r23
    7a50:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    7a52:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7a54:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7a56:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    7a58:	00 0d       	add	r16, r0
		adc r17,r1
    7a5a:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    7a5c:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7a5e:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    7a60:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    7a62:	00 0d       	add	r16, r0
		adc r17,r1
    7a64:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    7a66:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7a68:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    7a6a:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    7a6c:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    7a6e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7a70:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    7a72:	24 31       	cpi	r18, 0x14	; 20
		brcc .+2
    7a74:	08 f4       	brcc	.+2      	; 0x7a78 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    7a76:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    7a78:	04 0e       	add	r0, r20
	    adc r1,r21
    7a7a:	15 1e       	adc	r1, r21

		movw ZL,r0
    7a7c:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    7a7e:	24 31       	cpi	r18, 0x14	; 20
		brcs ramloop
    7a80:	f0 f0       	brcs	.+60     	; 0x7abe <ramloop>

00007a82 <romloop>:
	

	romloop:
	    lpm r16,Z+
    7a82:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7a84:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7a86:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    7a88:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7a8a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7a8c:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    7a8e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7a90:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7a92:	24 31       	cpi	r18, 0x14	; 20
		nop
    7a94:	00 00       	nop

	    lpm r16,Z+
    7a96:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7a98:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    7a9a:	08 f4       	brcc	.+2      	; 0x7a9e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7a9c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7a9e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7aa0:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    7aa2:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7aa4:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7aa6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7aa8:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    7aaa:	24 31       	cpi	r18, 0x14	; 20
		dec r17			;decrement tiles to draw on line
    7aac:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7aae:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7ab0:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7ab2:	05 91       	lpm	r16, Z+

		breq end	
    7ab4:	31 f1       	breq	.+76     	; 0x7b02 <end>
	    movw ZL,r0   	;copy next tile adress
    7ab6:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7ab8:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7aba:	18 f7       	brcc	.-58     	; 0x7a82 <romloop>
	
		rjmp .
    7abc:	00 c0       	rjmp	.+0      	; 0x7abe <ramloop>

00007abe <ramloop>:

	ramloop:

	    ld r16,Z+
    7abe:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7ac0:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7ac2:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    7ac4:	01 91       	ld	r16, Z+
		nop   
    7ac6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7ac8:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7aca:	23 9f       	mul	r18, r19


	    ld r16,Z+
    7acc:	01 91       	ld	r16, Z+
		nop
    7ace:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7ad0:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7ad2:	24 31       	cpi	r18, 0x14	; 20
   		rjmp .
    7ad4:	00 c0       	rjmp	.+0      	; 0x7ad6 <ramloop+0x18>

	    ld r16,Z+
    7ad6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7ad8:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7ada:	08 f0       	brcs	.+2      	; 0x7ade <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7adc:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7ade:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7ae0:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7ae2:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7ae4:	15 1e       	adc	r1, r21
		rjmp .
    7ae6:	00 c0       	rjmp	.+0      	; 0x7ae8 <ramloop+0x2a>
    
		ld r16,Z+		
    7ae8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7aea:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7aec:	24 31       	cpi	r18, 0x14	; 20
		rjmp .  
    7aee:	00 c0       	rjmp	.+0      	; 0x7af0 <ramloop+0x32>

	    ld r16,Z+	
    7af0:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    7af2:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    7af4:	01 91       	ld	r16, Z+

	    dec r17
    7af6:	1a 95       	dec	r17
	    breq end
    7af8:	21 f0       	breq	.+8      	; 0x7b02 <end>
	
		movw ZL,r0
    7afa:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7afc:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7afe:	08 f6       	brcc	.-126    	; 0x7a82 <romloop>
		rjmp ramloop
    7b00:	de cf       	rjmp	.-68     	; 0x7abe <ramloop>

00007b02 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7b02:	08 b9       	out	0x08, r16	; 8
		clr r16	
    7b04:	00 27       	eor	r16, r16
		lpm	
    7b06:	c8 95       	lpm
		nop
    7b08:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    7b0a:	08 b9       	out	0x08, r16	; 8

		ret
    7b0c:	08 95       	ret

00007b0e <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7b0e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7b10:	e0 91 d7 09 	lds	r30, 0x09D7
	lds ZH,tile_table_hi
    7b14:	f0 91 d8 09 	lds	r31, 0x09D8
	mul r24,r18
    7b18:	82 9f       	mul	r24, r18
	add ZL,r0
    7b1a:	e0 0d       	add	r30, r0
	adc ZH,r1
    7b1c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7b1e:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7b20:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7b22:	62 9f       	mul	r22, r18
	add XL,r0
    7b24:	a0 0d       	add	r26, r0
	adc XH,r1
    7b26:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    7b28:	15 90       	lpm	r1, Z+
    7b2a:	1d 92       	st	X+, r1
    7b2c:	15 90       	lpm	r1, Z+
    7b2e:	1d 92       	st	X+, r1
    7b30:	15 90       	lpm	r1, Z+
    7b32:	1d 92       	st	X+, r1
    7b34:	15 90       	lpm	r1, Z+
    7b36:	1d 92       	st	X+, r1
    7b38:	15 90       	lpm	r1, Z+
    7b3a:	1d 92       	st	X+, r1
    7b3c:	15 90       	lpm	r1, Z+
    7b3e:	1d 92       	st	X+, r1
    7b40:	15 90       	lpm	r1, Z+
    7b42:	1d 92       	st	X+, r1
    7b44:	15 90       	lpm	r1, Z+
    7b46:	1d 92       	st	X+, r1
    7b48:	15 90       	lpm	r1, Z+
    7b4a:	1d 92       	st	X+, r1
    7b4c:	15 90       	lpm	r1, Z+
    7b4e:	1d 92       	st	X+, r1
    7b50:	15 90       	lpm	r1, Z+
    7b52:	1d 92       	st	X+, r1
    7b54:	15 90       	lpm	r1, Z+
    7b56:	1d 92       	st	X+, r1
    7b58:	15 90       	lpm	r1, Z+
    7b5a:	1d 92       	st	X+, r1
    7b5c:	15 90       	lpm	r1, Z+
    7b5e:	1d 92       	st	X+, r1
    7b60:	15 90       	lpm	r1, Z+
    7b62:	1d 92       	st	X+, r1
    7b64:	15 90       	lpm	r1, Z+
    7b66:	1d 92       	st	X+, r1
    7b68:	15 90       	lpm	r1, Z+
    7b6a:	1d 92       	st	X+, r1
    7b6c:	15 90       	lpm	r1, Z+
    7b6e:	1d 92       	st	X+, r1
    7b70:	15 90       	lpm	r1, Z+
    7b72:	1d 92       	st	X+, r1
    7b74:	15 90       	lpm	r1, Z+
    7b76:	1d 92       	st	X+, r1
    7b78:	15 90       	lpm	r1, Z+
    7b7a:	1d 92       	st	X+, r1
    7b7c:	15 90       	lpm	r1, Z+
    7b7e:	1d 92       	st	X+, r1
    7b80:	15 90       	lpm	r1, Z+
    7b82:	1d 92       	st	X+, r1
    7b84:	15 90       	lpm	r1, Z+
    7b86:	1d 92       	st	X+, r1
    7b88:	15 90       	lpm	r1, Z+
    7b8a:	1d 92       	st	X+, r1
    7b8c:	15 90       	lpm	r1, Z+
    7b8e:	1d 92       	st	X+, r1
    7b90:	15 90       	lpm	r1, Z+
    7b92:	1d 92       	st	X+, r1
    7b94:	15 90       	lpm	r1, Z+
    7b96:	1d 92       	st	X+, r1
    7b98:	15 90       	lpm	r1, Z+
    7b9a:	1d 92       	st	X+, r1
    7b9c:	15 90       	lpm	r1, Z+
    7b9e:	1d 92       	st	X+, r1
    7ba0:	15 90       	lpm	r1, Z+
    7ba2:	1d 92       	st	X+, r1
    7ba4:	15 90       	lpm	r1, Z+
    7ba6:	1d 92       	st	X+, r1
    7ba8:	15 90       	lpm	r1, Z+
    7baa:	1d 92       	st	X+, r1
    7bac:	15 90       	lpm	r1, Z+
    7bae:	1d 92       	st	X+, r1
    7bb0:	15 90       	lpm	r1, Z+
    7bb2:	1d 92       	st	X+, r1
    7bb4:	15 90       	lpm	r1, Z+
    7bb6:	1d 92       	st	X+, r1
    7bb8:	15 90       	lpm	r1, Z+
    7bba:	1d 92       	st	X+, r1
    7bbc:	15 90       	lpm	r1, Z+
    7bbe:	1d 92       	st	X+, r1
    7bc0:	15 90       	lpm	r1, Z+
    7bc2:	1d 92       	st	X+, r1
    7bc4:	15 90       	lpm	r1, Z+
    7bc6:	1d 92       	st	X+, r1
    7bc8:	15 90       	lpm	r1, Z+
    7bca:	1d 92       	st	X+, r1
    7bcc:	15 90       	lpm	r1, Z+
    7bce:	1d 92       	st	X+, r1
    7bd0:	15 90       	lpm	r1, Z+
    7bd2:	1d 92       	st	X+, r1
    7bd4:	15 90       	lpm	r1, Z+
    7bd6:	1d 92       	st	X+, r1
    7bd8:	15 90       	lpm	r1, Z+
    7bda:	1d 92       	st	X+, r1
    7bdc:	15 90       	lpm	r1, Z+
    7bde:	1d 92       	st	X+, r1
    7be0:	15 90       	lpm	r1, Z+
    7be2:	1d 92       	st	X+, r1
    7be4:	15 90       	lpm	r1, Z+
    7be6:	1d 92       	st	X+, r1
    7be8:	15 90       	lpm	r1, Z+
    7bea:	1d 92       	st	X+, r1
    7bec:	15 90       	lpm	r1, Z+
    7bee:	1d 92       	st	X+, r1
    7bf0:	15 90       	lpm	r1, Z+
    7bf2:	1d 92       	st	X+, r1
    7bf4:	15 90       	lpm	r1, Z+
    7bf6:	1d 92       	st	X+, r1
    7bf8:	15 90       	lpm	r1, Z+
    7bfa:	1d 92       	st	X+, r1
    7bfc:	15 90       	lpm	r1, Z+
    7bfe:	1d 92       	st	X+, r1
    7c00:	15 90       	lpm	r1, Z+
    7c02:	1d 92       	st	X+, r1
    7c04:	15 90       	lpm	r1, Z+
    7c06:	1d 92       	st	X+, r1
    7c08:	15 90       	lpm	r1, Z+
    7c0a:	1d 92       	st	X+, r1
    7c0c:	15 90       	lpm	r1, Z+
    7c0e:	1d 92       	st	X+, r1
    7c10:	15 90       	lpm	r1, Z+
    7c12:	1d 92       	st	X+, r1
    7c14:	15 90       	lpm	r1, Z+
    7c16:	1d 92       	st	X+, r1
    7c18:	15 90       	lpm	r1, Z+
    7c1a:	1d 92       	st	X+, r1
    7c1c:	15 90       	lpm	r1, Z+
    7c1e:	1d 92       	st	X+, r1
    7c20:	15 90       	lpm	r1, Z+
    7c22:	1d 92       	st	X+, r1
    7c24:	15 90       	lpm	r1, Z+
    7c26:	1d 92       	st	X+, r1
	clr r1
    7c28:	11 24       	eor	r1, r1
	ret
    7c2a:	08 95       	ret

00007c2c <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7c2c:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7c2e:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    7c30:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    7c32:	82 9f       	mul	r24, r18
	add ZL,r0
    7c34:	e0 0d       	add	r30, r0
	adc ZH,r1
    7c36:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7c38:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7c3a:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7c3c:	62 9f       	mul	r22, r18
	add XL,r0
    7c3e:	a0 0d       	add	r26, r0
	adc XH,r1
    7c40:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7c42:	11 90       	ld	r1, Z+
    7c44:	1d 92       	st	X+, r1
    7c46:	11 90       	ld	r1, Z+
    7c48:	1d 92       	st	X+, r1
    7c4a:	11 90       	ld	r1, Z+
    7c4c:	1d 92       	st	X+, r1
    7c4e:	11 90       	ld	r1, Z+
    7c50:	1d 92       	st	X+, r1
    7c52:	11 90       	ld	r1, Z+
    7c54:	1d 92       	st	X+, r1
    7c56:	11 90       	ld	r1, Z+
    7c58:	1d 92       	st	X+, r1
    7c5a:	11 90       	ld	r1, Z+
    7c5c:	1d 92       	st	X+, r1
    7c5e:	11 90       	ld	r1, Z+
    7c60:	1d 92       	st	X+, r1
    7c62:	11 90       	ld	r1, Z+
    7c64:	1d 92       	st	X+, r1
    7c66:	11 90       	ld	r1, Z+
    7c68:	1d 92       	st	X+, r1
    7c6a:	11 90       	ld	r1, Z+
    7c6c:	1d 92       	st	X+, r1
    7c6e:	11 90       	ld	r1, Z+
    7c70:	1d 92       	st	X+, r1
    7c72:	11 90       	ld	r1, Z+
    7c74:	1d 92       	st	X+, r1
    7c76:	11 90       	ld	r1, Z+
    7c78:	1d 92       	st	X+, r1
    7c7a:	11 90       	ld	r1, Z+
    7c7c:	1d 92       	st	X+, r1
    7c7e:	11 90       	ld	r1, Z+
    7c80:	1d 92       	st	X+, r1
    7c82:	11 90       	ld	r1, Z+
    7c84:	1d 92       	st	X+, r1
    7c86:	11 90       	ld	r1, Z+
    7c88:	1d 92       	st	X+, r1
    7c8a:	11 90       	ld	r1, Z+
    7c8c:	1d 92       	st	X+, r1
    7c8e:	11 90       	ld	r1, Z+
    7c90:	1d 92       	st	X+, r1
    7c92:	11 90       	ld	r1, Z+
    7c94:	1d 92       	st	X+, r1
    7c96:	11 90       	ld	r1, Z+
    7c98:	1d 92       	st	X+, r1
    7c9a:	11 90       	ld	r1, Z+
    7c9c:	1d 92       	st	X+, r1
    7c9e:	11 90       	ld	r1, Z+
    7ca0:	1d 92       	st	X+, r1
    7ca2:	11 90       	ld	r1, Z+
    7ca4:	1d 92       	st	X+, r1
    7ca6:	11 90       	ld	r1, Z+
    7ca8:	1d 92       	st	X+, r1
    7caa:	11 90       	ld	r1, Z+
    7cac:	1d 92       	st	X+, r1
    7cae:	11 90       	ld	r1, Z+
    7cb0:	1d 92       	st	X+, r1
    7cb2:	11 90       	ld	r1, Z+
    7cb4:	1d 92       	st	X+, r1
    7cb6:	11 90       	ld	r1, Z+
    7cb8:	1d 92       	st	X+, r1
    7cba:	11 90       	ld	r1, Z+
    7cbc:	1d 92       	st	X+, r1
    7cbe:	11 90       	ld	r1, Z+
    7cc0:	1d 92       	st	X+, r1
    7cc2:	11 90       	ld	r1, Z+
    7cc4:	1d 92       	st	X+, r1
    7cc6:	11 90       	ld	r1, Z+
    7cc8:	1d 92       	st	X+, r1
    7cca:	11 90       	ld	r1, Z+
    7ccc:	1d 92       	st	X+, r1
    7cce:	11 90       	ld	r1, Z+
    7cd0:	1d 92       	st	X+, r1
    7cd2:	11 90       	ld	r1, Z+
    7cd4:	1d 92       	st	X+, r1
    7cd6:	11 90       	ld	r1, Z+
    7cd8:	1d 92       	st	X+, r1
    7cda:	11 90       	ld	r1, Z+
    7cdc:	1d 92       	st	X+, r1
    7cde:	11 90       	ld	r1, Z+
    7ce0:	1d 92       	st	X+, r1
    7ce2:	11 90       	ld	r1, Z+
    7ce4:	1d 92       	st	X+, r1
    7ce6:	11 90       	ld	r1, Z+
    7ce8:	1d 92       	st	X+, r1
    7cea:	11 90       	ld	r1, Z+
    7cec:	1d 92       	st	X+, r1
    7cee:	11 90       	ld	r1, Z+
    7cf0:	1d 92       	st	X+, r1
    7cf2:	11 90       	ld	r1, Z+
    7cf4:	1d 92       	st	X+, r1
    7cf6:	11 90       	ld	r1, Z+
    7cf8:	1d 92       	st	X+, r1
    7cfa:	11 90       	ld	r1, Z+
    7cfc:	1d 92       	st	X+, r1
    7cfe:	11 90       	ld	r1, Z+
    7d00:	1d 92       	st	X+, r1
    7d02:	11 90       	ld	r1, Z+
    7d04:	1d 92       	st	X+, r1
    7d06:	11 90       	ld	r1, Z+
    7d08:	1d 92       	st	X+, r1
    7d0a:	11 90       	ld	r1, Z+
    7d0c:	1d 92       	st	X+, r1
    7d0e:	11 90       	ld	r1, Z+
    7d10:	1d 92       	st	X+, r1
    7d12:	11 90       	ld	r1, Z+
    7d14:	1d 92       	st	X+, r1
    7d16:	11 90       	ld	r1, Z+
    7d18:	1d 92       	st	X+, r1
    7d1a:	11 90       	ld	r1, Z+
    7d1c:	1d 92       	st	X+, r1
    7d1e:	11 90       	ld	r1, Z+
    7d20:	1d 92       	st	X+, r1
    7d22:	11 90       	ld	r1, Z+
    7d24:	1d 92       	st	X+, r1
    7d26:	11 90       	ld	r1, Z+
    7d28:	1d 92       	st	X+, r1
    7d2a:	11 90       	ld	r1, Z+
    7d2c:	1d 92       	st	X+, r1
    7d2e:	11 90       	ld	r1, Z+
    7d30:	1d 92       	st	X+, r1
    7d32:	11 90       	ld	r1, Z+
    7d34:	1d 92       	st	X+, r1
    7d36:	11 90       	ld	r1, Z+
    7d38:	1d 92       	st	X+, r1
    7d3a:	11 90       	ld	r1, Z+
    7d3c:	1d 92       	st	X+, r1
    7d3e:	11 90       	ld	r1, Z+
    7d40:	1d 92       	st	X+, r1
	clr r1
    7d42:	11 24       	eor	r1, r1
	ret
    7d44:	08 95       	ret

00007d46 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7d46:	e0 91 cd 09 	lds	r30, 0x09CD
	mov   r24,     ZL
    7d4a:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7d4c:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7d4e:	e8 0f       	add	r30, r24
	clr   ZH
    7d50:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7d52:	e0 57       	subi	r30, 0x70	; 112
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7d54:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    7d56:	00 90 cc 09 	lds	r0, 0x09CC
	sub   r24,     r0
    7d5a:	80 19       	sub	r24, r0
	brcc  rbg_exit
    7d5c:	30 f4       	brcc	.+12     	; 0x7d6a <rbg_exit>

00007d5e <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    7d5e:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    7d60:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7d62:	01 90       	ld	r0, Z+
	st    X,       r0
    7d64:	0c 92       	st	X, r0
	inc   r24
    7d66:	83 95       	inc	r24
	brne  rbg_loop
    7d68:	d1 f7       	brne	.-12     	; 0x7d5e <rbg_loop>

00007d6a <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7d6a:	08 95       	ret

00007d6c <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7d6c:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    7d6e:	79 9f       	mul	r23, r25
	mov   XL,      r1
    7d70:	a1 2d       	mov	r26, r1
	clr   XH
    7d72:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7d74:	a1 53       	subi	r26, 0x31	; 49
	sbci  XH,      hi8(-(sprites_tile_banks))
    7d76:	b6 4f       	sbci	r27, 0xF6	; 246
	ld    ZL,      X+
    7d78:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7d7a:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7d7c:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    7d7e:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    7d80:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7d82:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7d84:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7d86:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7d88:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    7d8a:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7d8c:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7d8e:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    7d90:	09 c0       	rjmp	.+18     	; 0x7da4 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7d92:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7d94:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7d96:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7d98:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7d9a:	0a c0       	rjmp	.+20     	; 0x7db0 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7d9c:	17 96       	adiw	r26, 0x07	; 7

00007d9e <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7d9e:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    7da0:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7da2:	08 c0       	rjmp	.+16     	; 0x7db4 <x_check_end>

00007da4 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7da4:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7da6:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7da8:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7daa:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7dac:	f8 cf       	rjmp	.-16     	; 0x7d9e <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7dae:	11 97       	sbiw	r26, 0x01	; 1

00007db0 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    7db0:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7db2:	b9 1f       	adc	r27, r25

00007db4 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7db4:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7db6:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7db8:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7dba:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7dbc:	09 c0       	rjmp	.+18     	; 0x7dd0 <y_2nd_tile>

	mul   r22,     r19
    7dbe:	63 9f       	mul	r22, r19
	add   XL,      r0
    7dc0:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7dc2:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7dc4:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7dc6:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7dc8:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7dca:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7dcc:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    7dce:	08 c0       	rjmp	.+16     	; 0x7de0 <y_check_end>

00007dd0 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    7dd0:	13 2e       	mov	r1, r19
	dec   r1
    7dd2:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7dd4:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7dd6:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7dd8:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7dda:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7ddc:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    7dde:	13 2e       	mov	r1, r19

00007de0 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7de0:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    7de2:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    7de4:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7de6:	05 c0       	rjmp	.+10     	; 0x7df2 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7de8:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7dea:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7dec:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    7dee:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    7df0:	04 c0       	rjmp	.+8      	; 0x7dfa <x_diff_end>

00007df2 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    7df2:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    7df4:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7df6:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7df8:	6f ef       	ldi	r22, 0xFF	; 255

00007dfa <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7dfa:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7dfc:	04 2e       	mov	r0, r20
	lsr   r20
    7dfe:	46 95       	lsr	r20
	brcc  x_loop1
    7e00:	30 f4       	brcc	.+12     	; 0x7e0e <x_loop1>
	breq  x_loopx
    7e02:	61 f0       	breq	.+24     	; 0x7e1c <x_loopx>

00007e04 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7e04:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7e06:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7e08:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7e0a:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7e0c:	b7 1f       	adc	r27, r23

00007e0e <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7e0e:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7e10:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7e12:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7e14:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7e16:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    7e18:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7e1a:	a1 f7       	brne	.-24     	; 0x7e04 <x_loop0>

00007e1c <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7e1c:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7e1e:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7e20:	2c 93       	st	X, r18

	dec   r1
    7e22:	1a 94       	dec	r1
	breq  loop_e
    7e24:	49 f0       	breq	.+18     	; 0x7e38 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    7e26:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    7e28:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7e2a:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7e2c:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7e2e:	40 2d       	mov	r20, r0
	lsr   r20
    7e30:	46 95       	lsr	r20
	brcc  x_loop1
    7e32:	68 f7       	brcc	.-38     	; 0x7e0e <x_loop1>
	brne  x_loop0
    7e34:	39 f7       	brne	.-50     	; 0x7e04 <x_loop0>
	rjmp  x_loopx
    7e36:	f2 cf       	rjmp	.-28     	; 0x7e1c <x_loopx>

00007e38 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7e38:	08 95       	ret

00007e3a <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7e3a:	0f 92       	push	r0
	push  r1
    7e3c:	1f 92       	push	r1
	push  ZL
    7e3e:	ef 93       	push	r30
	push  ZH
    7e40:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7e42:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7e44:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7e48:	ff 93       	push	r31

	sbrc  ZL,      2
    7e4a:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7e4c:	04 c0       	rjmp	.+8      	; 0x7e56 <__vector_13+0x1c>
	sbrc  ZL,      1
    7e4e:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7e50:	02 c0       	rjmp	.+4      	; 0x7e56 <__vector_13+0x1c>
	nop
    7e52:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7e54:	00 c0       	rjmp	.+0      	; 0x7e56 <__vector_13+0x1c>
	sbrs  ZL,      0
    7e56:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7e58:	00 c0       	rjmp	.+0      	; 0x7e5a <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7e5a:	e0 91 df 09 	lds	r30, 0x09DF
	dec ZL
    7e5e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7e60:	e0 93 df 09 	sts	0x09DF, r30

	;process sync phases
	lds ZH,sync_phase
    7e64:	f0 91 de 09 	lds	r31, 0x09DE
	sbrc ZH,0
    7e68:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7e6a:	51 c0       	rjmp	.+162    	; 0x7f0e <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7e6c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7e6e:	98 f0       	brcs	.+38     	; 0x7e96 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7e70:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7e72:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7e76:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7e78:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7e7c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7e7e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7e80:	26 f4       	brtc	.+8      	; 0x7e8a <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7e82:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7e84:	0e 94 0f 40 	call	0x801e	; 0x801e <update_sound>
	rjmp sync_end
    7e88:	b2 c0       	rjmp	.+356    	; 0x7fee <sync_end>

00007e8a <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7e8a:	e5 e1       	ldi	r30, 0x15	; 21
    7e8c:	ea 95       	dec	r30
    7e8e:	f1 f7       	brne	.-4      	; 0x7e8c <sync_pre_eq_no_sound_update+0x2>
    7e90:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7e92:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7e94:	ac c0       	rjmp	.+344    	; 0x7fee <sync_end>

00007e96 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7e96:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7e98:	08 f1       	brcs	.+66     	; 0x7edc <sync_post_eq>

	rjmp .
    7e9a:	00 c0       	rjmp	.+0      	; 0x7e9c <sync_eq+0x6>
	rjmp .
    7e9c:	00 c0       	rjmp	.+0      	; 0x7e9e <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7e9e:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7ea0:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7ea2:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7ea4:	16 f4       	brtc	.+4      	; 0x7eaa <sync_eq_skip>
	
	call update_sound
    7ea6:	0e 94 0f 40 	call	0x801e	; 0x801e <update_sound>

00007eaa <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7eaa:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7eac:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7eb0:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7eb2:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7eb6:	9b c0       	rjmp	.+310    	; 0x7fee <sync_end>

00007eb8 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7eb8:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7eba:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7ebe:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7ec0:	04 c0       	rjmp	.+8      	; 0x7eca <__vector_14+0x12>
	sbrc  ZL,      1
    7ec2:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7ec4:	02 c0       	rjmp	.+4      	; 0x7eca <__vector_14+0x12>
	nop
    7ec6:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7ec8:	00 c0       	rjmp	.+0      	; 0x7eca <__vector_14+0x12>
	sbrs  ZL,      0
    7eca:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7ecc:	00 c0       	rjmp	.+0      	; 0x7ece <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    7ece:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    7ed0:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    7ed2:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7ed4:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7ed8:	ef 91       	pop	r30
	reti
    7eda:	18 95       	reti

00007edc <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7edc:	00 c0       	rjmp	.+0      	; 0x7ede <sync_post_eq+0x2>

	bst ZL,0
    7ede:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ee0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7ee2:	26 f4       	brtc	.+8      	; 0x7eec <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7ee4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7ee6:	0e 94 0f 40 	call	0x801e	; 0x801e <update_sound>
	rjmp sync_pre_eq_cont
    7eea:	05 c0       	rjmp	.+10     	; 0x7ef6 <sync_pre_eq_cont>

00007eec <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7eec:	e5 e1       	ldi	r30, 0x15	; 21
    7eee:	ea 95       	dec	r30
    7ef0:	f1 f7       	brne	.-4      	; 0x7eee <sync_post_eq_no_sound_update+0x2>
    7ef2:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7ef4:	28 9a       	sbi	0x05, 0	; 5

00007ef6 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7ef6:	e0 91 df 09 	lds	r30, 0x09DF
	cpi ZL,0
    7efa:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7efc:	09 f0       	breq	.+2      	; 0x7f00 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7efe:	77 c0       	rjmp	.+238    	; 0x7fee <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7f00:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7f02:	e0 93 df 09 	sts	0x09DF, r30
	ldi ZL,1
    7f06:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7f08:	e0 93 de 09 	sts	0x09DE, r30
	
	rjmp sync_end
    7f0c:	70 c0       	rjmp	.+224    	; 0x7fee <sync_end>

00007f0e <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7f0e:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7f10:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7f14:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7f16:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7f1a:	00 c0       	rjmp	.+0      	; 0x7f1c <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f1c:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7f1e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7f20:	00 c0       	rjmp	.+0      	; 0x7f22 <sync_hsync+0x14>
	call update_sound
    7f22:	0e 94 0f 40 	call	0x801e	; 0x801e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7f26:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f28:	00 90 e5 09 	lds	r0, 0x09E5
	sub ZH,r0				
    7f2c:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7f2e:	e0 91 df 09 	lds	r30, 0x09DF
	cp ZL,ZH
    7f32:	ef 17       	cp	r30, r31
	brsh no_render
    7f34:	d8 f4       	brcc	.+54     	; 0x7f6c <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7f36:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7f38:	00 90 e5 09 	lds	r0, 0x09E5
	sub ZH,r0				
    7f3c:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7f3e:	00 90 e6 09 	lds	r0, 0x09E6
	sub ZH,r0			
    7f42:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7f44:	ef 17       	cp	r30, r31
	brlo no_render
    7f46:	90 f0       	brcs	.+36     	; 0x7f6c <no_render>

	;push r1-r29
	ldi ZL,29
    7f48:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7f4a:	ff 27       	eor	r31, r31

00007f4c <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7f4c:	00 80       	ld	r0, Z
	push r0
    7f4e:	0f 92       	push	r0
	dec ZL
    7f50:	ea 95       	dec	r30
	brne push_loop	
    7f52:	e1 f7       	brne	.-8      	; 0x7f4c <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7f54:	05 e0       	ldi	r16, 0x05	; 5
    7f56:	0a 95       	dec	r16
    7f58:	f1 f7       	brne	.-4      	; 0x7f56 <push_loop+0xa>
    7f5a:	00 c0       	rjmp	.+0      	; 0x7f5c <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    7f5c:	0e 94 cf 3c 	call	0x799e	; 0x799e <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7f60:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7f62:	ff 27       	eor	r31, r31

00007f64 <pop_loop>:
pop_loop:
	pop r0
    7f64:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7f66:	01 92       	st	Z+, r0
	cpi ZL,30
    7f68:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7f6a:	e0 f3       	brcs	.-8      	; 0x7f64 <pop_loop>

00007f6c <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7f6c:	e0 91 df 09 	lds	r30, 0x09DF
	cpi ZL,0
    7f70:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7f72:	09 f0       	breq	.+2      	; 0x7f76 <no_render+0xa>
	rjmp sync_end
    7f74:	3c c0       	rjmp	.+120    	; 0x7fee <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7f76:	2f 93       	push	r18
	push r19
    7f78:	3f 93       	push	r19
	push r20
    7f7a:	4f 93       	push	r20
	push r21
    7f7c:	5f 93       	push	r21
	push r22
    7f7e:	6f 93       	push	r22
	push r23
    7f80:	7f 93       	push	r23
	push r24
    7f82:	8f 93       	push	r24
	push r25
    7f84:	9f 93       	push	r25
	push r26
    7f86:	af 93       	push	r26
	push r27
    7f88:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7f8a:	78 94       	sei
	clr r1
    7f8c:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7f8e:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7f90:	e0 93 de 09 	sts	0x09DE, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7f94:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7f96:	e0 93 df 09 	sts	0x09DF, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7f9a:	80 91 ef 09 	lds	r24, 0x09EF
	lds r25,vsync_counter+1
    7f9e:	90 91 f0 09 	lds	r25, 0x09F0
	adiw r24,1
    7fa2:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7fa4:	80 93 ef 09 	sts	0x09EF, r24
	sts vsync_counter+1,r25
    7fa8:	90 93 f0 09 	sts	0x09F0, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7fac:	e0 91 e1 09 	lds	r30, 0x09E1
	lds ZH,pre_vsync_user_callback+1
    7fb0:	f0 91 e2 09 	lds	r31, 0x09E2
	cp  ZL,r1
    7fb4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7fb6:	f1 05       	cpc	r31, r1
	breq .+2 
    7fb8:	09 f0       	breq	.+2      	; 0x7fbc <no_render+0x50>
	icall
    7fba:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7fbc:	0e 94 c1 41 	call	0x8382	; 0x8382 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7fc0:	0e 94 ec 4f 	call	0x9fd8	; 0x9fd8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7fc4:	0e 94 09 40 	call	0x8012	; 0x8012 <process_music>
	clr r1
    7fc8:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7fca:	e0 91 e3 09 	lds	r30, 0x09E3
	lds ZH,post_vsync_user_callback+1
    7fce:	f0 91 e4 09 	lds	r31, 0x09E4
	cp  ZL,r1
    7fd2:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7fd4:	f1 05       	cpc	r31, r1
	breq .+2 
    7fd6:	09 f0       	breq	.+2      	; 0x7fda <no_render+0x6e>
	icall
    7fd8:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7fda:	bf 91       	pop	r27
	pop r26
    7fdc:	af 91       	pop	r26
	pop r25
    7fde:	9f 91       	pop	r25
	pop r24
    7fe0:	8f 91       	pop	r24
	pop r23
    7fe2:	7f 91       	pop	r23
	pop r22
    7fe4:	6f 91       	pop	r22
	pop r21
    7fe6:	5f 91       	pop	r21
	pop r20
    7fe8:	4f 91       	pop	r20
	pop r19
    7fea:	3f 91       	pop	r19
	pop r18
    7fec:	2f 91       	pop	r18

00007fee <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7fee:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7ff0:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7ff2:	ff 91       	pop	r31
	pop ZL
    7ff4:	ef 91       	pop	r30
	pop r1
    7ff6:	1f 90       	pop	r1
	pop r0
    7ff8:	0f 90       	pop	r0
	reti
    7ffa:	18 95       	reti

00007ffc <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7ffc:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7ffe:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    8000:	00 c0       	rjmp	.+0      	; 0x8002 <hsync_pulse+0x6>
	call update_sound
    8002:	0e 94 0f 40 	call	0x801e	; 0x801e <update_sound>

	lds ZL,sync_pulse
    8006:	e0 91 df 09 	lds	r30, 0x09DF
	dec ZL
    800a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    800c:	e0 93 df 09 	sts	0x09DF, r30

	ret
    8010:	08 95       	ret

00008012 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    8012:	e0 91 03 0a 	lds	r30, 0x0A03
	sbrc ZL,0
    8016:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8018:	0e 94 cf 44 	call	0x899e	; 0x899e <ProcessMusic>
#endif

	ret
    801c:	08 95       	ret

0000801e <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    801e:	0f 93       	push	r16
	push r17
    8020:	1f 93       	push	r17
	push r18
    8022:	2f 93       	push	r18
	push r28
    8024:	cf 93       	push	r28
	push r29
    8026:	df 93       	push	r29

	mov r18,ZL
    8028:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    802a:	00 91 05 0a 	lds	r16, 0x0A05
	lds r17,tr1_pos_frac
    802e:	10 91 07 0a 	lds	r17, 0x0A07
	add	r17,r16	;add step to fractional part of sample pos
    8032:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8034:	00 91 06 0a 	lds	r16, 0x0A06
	lds ZL,tr1_pos_lo
    8038:	e0 91 08 0a 	lds	r30, 0x0A08
	lds ZH,tr1_pos_hi 
    803c:	f0 91 09 0a 	lds	r31, 0x0A09
	adc ZL,r16	;add step to low byte of sample pos
    8040:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8042:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8044:	e0 93 08 0a 	sts	0x0A08, r30
	sts tr1_pos_frac,r17
    8048:	10 93 07 0a 	sts	0x0A07, r17
	lds r17,tr1_vol
    804c:	10 91 04 0a 	lds	r17, 0x0A04
	mulsu r16,r17;(sample*mixing vol)
    8050:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    8052:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8054:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8056:	d0 2d       	mov	r29, r0
	nop
    8058:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    805a:	00 91 0b 0a 	lds	r16, 0x0A0B
	lds r17,tr2_pos_frac
    805e:	10 91 0d 0a 	lds	r17, 0x0A0D
	add	r17,r16	;add step to fractional part of sample pos
    8062:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8064:	00 91 0c 0a 	lds	r16, 0x0A0C
	lds ZL,tr2_pos_lo
    8068:	e0 91 0e 0a 	lds	r30, 0x0A0E
	lds ZH,tr2_pos_hi 
    806c:	f0 91 0f 0a 	lds	r31, 0x0A0F
	adc ZL,r16	;add step to low byte of sample pos
    8070:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    8072:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8074:	e0 93 0e 0a 	sts	0x0A0E, r30
	sts tr2_pos_frac,r17
    8078:	10 93 0d 0a 	sts	0x0A0D, r17
	lds r17,tr2_vol
    807c:	10 91 0a 0a 	lds	r17, 0x0A0A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    8080:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8082:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8084:	20 ff       	sbrs	r18, 0
	rjmp .
    8086:	00 c0       	rjmp	.+0      	; 0x8088 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8088:	01 03       	mulsu	r16, r17
	clr r0
    808a:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    808c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    808e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    8090:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    8092:	00 91 11 0a 	lds	r16, 0x0A11
	lds r17,tr3_pos_frac
    8096:	10 91 13 0a 	lds	r17, 0x0A13
	add	r17,r16				;add step to fractional part of sample pos
    809a:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    809c:	00 91 12 0a 	lds	r16, 0x0A12
	lds ZL,tr3_pos_lo
    80a0:	e0 91 14 0a 	lds	r30, 0x0A14
	lds ZH,tr3_pos_hi 
    80a4:	f0 91 15 0a 	lds	r31, 0x0A15
	adc ZL,r16				;add step to low byte of sample pos
    80a8:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    80aa:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    80ac:	e0 93 14 0a 	sts	0x0A14, r30
	sts tr3_pos_frac,r17
    80b0:	10 93 13 0a 	sts	0x0A13, r17
	lds r17,tr3_vol
    80b4:	10 91 10 0a 	lds	r17, 0x0A10
	mulsu r16,r17			;(sample*mixing vol)
    80b8:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    80ba:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    80bc:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    80be:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    80c0:	00 91 18 0a 	lds	r16, 0x0A18
	lds r17,tr4_barrel_hi
    80c4:	10 91 19 0a 	lds	r17, 0x0A19
	lds ZL,tr4_divider
    80c8:	e0 91 1a 0a 	lds	r30, 0x0A1A
	dec ZL	
    80cc:	ea 95       	dec	r30
	brpl ch4_no_shift	
    80ce:	92 f4       	brpl	.+36     	; 0x80f4 <ch4_no_shift>

	lds ZH,tr4_params
    80d0:	f0 91 17 0a 	lds	r31, 0x0A17
	mov ZL,ZH
    80d4:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    80d6:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    80d8:	00 2e       	mov	r0, r16
	lsr r0
    80da:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    80dc:	00 26       	eor	r0, r16
	bst r0,0
    80de:	00 fa       	bst	r0, 0
	lsr r17
    80e0:	16 95       	lsr	r17
	ror r16
    80e2:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    80e4:	16 f9       	bld	r17, 6
	sbrs ZH,0
    80e6:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    80e8:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    80ea:	00 93 18 0a 	sts	0x0A18, r16
	sts tr4_barrel_hi,r17
    80ee:	10 93 19 0a 	sts	0x0A19, r17

	rjmp ch4_end
    80f2:	03 c0       	rjmp	.+6      	; 0x80fa <ch4_end>

000080f4 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    80f4:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    80f6:	1a 95       	dec	r17
	brne .-4
    80f8:	f1 f7       	brne	.-4      	; 0x80f6 <ch4_no_shift+0x2>

000080fa <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    80fa:	e0 93 1a 0a 	sts	0x0A1A, r30
	ldi r17,0x80 ;-128
    80fe:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    8100:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    8102:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    8104:	21 ff       	sbrs	r18, 1
	rjmp .
    8106:	00 c0       	rjmp	.+0      	; 0x8108 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8108:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    810a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    810c:	00 91 16 0a 	lds	r16, 0x0A16

	mulsu r17,r16;(sample*mixing vol)
    8110:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    8112:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8114:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8116:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8118:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    811a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    811c:	d0 05       	cpc	r29, r0
	brlt .+2
    811e:	0c f0       	brlt	.+2      	; 0x8122 <ch4_end+0x28>
	ldi r28,127
    8120:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8122:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8124:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8126:	d0 05       	cpc	r29, r0
	brge .+2
    8128:	0c f4       	brge	.+2      	; 0x812c <ch4_end+0x32>
	ldi r28,-128
    812a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    812c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    812e:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    8132:	e0 e7       	ldi	r30, 0x70	; 112
	ldi ZH,hi8(uart_rx_buf)
    8134:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    8136:	00 91 6d 0a 	lds	r16, 0x0A6D

	clr r0
    813a:	00 24       	eor	r0, r0
	add ZL,r16
    813c:	e0 0f       	add	r30, r16
	adc ZH,r0
    813e:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    8140:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    8144:	17 ff       	sbrs	r17, 7
	rjmp 1f
    8146:	08 c0       	rjmp	.+16     	; 0x8158 <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    8148:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    814c:	20 83       	st	Z, r18
	inc r16
    814e:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    8150:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    8152:	00 93 6d 0a 	sts	0x0A6D, r16
	rjmp uart_tx
    8156:	03 c0       	rjmp	.+6      	; 0x815e <uart_tx>
1:
	WAIT r28,9
    8158:	c3 e0       	ldi	r28, 0x03	; 3
    815a:	ca 95       	dec	r28
    815c:	f1 f7       	brne	.-4      	; 0x815a <ch4_end+0x60>

0000815e <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    815e:	ec e2       	ldi	r30, 0x2C	; 44
	ldi ZH,hi8(uart_tx_buf)
    8160:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    8162:	00 91 b0 0a 	lds	r16, 0x0AB0
	lds r29,uart_tx_head
    8166:	d0 91 6e 0a 	lds	r29, 0x0A6E
	
	add ZL,r16
    816a:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    816c:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    816e:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    8172:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    8174:	d0 1b       	sub	r29, r16
	mul r28,r29
    8176:	cd 9f       	mul	r28, r29
	breq 1f		
    8178:	41 f0       	breq	.+16     	; 0x818a <uart_tx+0x2c>

	ld r18,Z
    817a:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    817c:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    8180:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    8182:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_tx_tail,r16
    8184:	00 93 b0 0a 	sts	0x0AB0, r16
	rjmp update_sound_end
    8188:	03 c0       	rjmp	.+6      	; 0x8190 <update_sound_end>
1:
	WAIT r28,9
    818a:	c3 e0       	ldi	r28, 0x03	; 3
    818c:	ca 95       	dec	r28
    818e:	f1 f7       	brne	.-4      	; 0x818c <uart_tx+0x2e>

00008190 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    8190:	df 91       	pop	r29
	pop r28
    8192:	cf 91       	pop	r28
	pop r18
    8194:	2f 91       	pop	r18
	pop r17
    8196:	1f 91       	pop	r17
	pop r16
    8198:	0f 91       	pop	r16
	
	ret
    819a:	08 95       	ret

0000819c <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    819c:	80 93 cf 09 	sts	0x09CF, r24
	sts sprites_tile_banks+1,r25
    81a0:	90 93 d0 09 	sts	0x09D0, r25
	ret
    81a4:	08 95       	ret

000081a6 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81a6:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    81a8:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    81aa:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    81ac:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    81ae:	64 e1       	ldi	r22, 0x14	; 20

000081b0 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    81b0:	6d 93       	st	X+, r22
	sbiw r30,1
    81b2:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    81b4:	e9 f7       	brne	.-6      	; 0x81b0 <fill_vram_loop>

	clr r1
    81b6:	11 24       	eor	r1, r1

	ret
    81b8:	08 95       	ret

000081ba <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    81ba:	50 91 d9 09 	lds	r21, 0x09D9
	add r20,21
    81be:	45 0f       	add	r20, r21
	rjmp SetTile	
    81c0:	00 c0       	rjmp	.+0      	; 0x81c2 <SetTile>

000081c2 <SetTile>:

	ret

#else

	clr r25
    81c2:	99 27       	eor	r25, r25
	clr r23	
    81c4:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    81c6:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    81c8:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    81ca:	08 0e       	add	r0, r24
	adc r1,r25
    81cc:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    81ce:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    81d0:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    81d2:	a0 0d       	add	r26, r0
	adc XH,r1
    81d4:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    81d6:	4c 5e       	subi	r20, 0xEC	; 236
	st X,r20
    81d8:	4c 93       	st	X, r20

	clr r1
    81da:	11 24       	eor	r1, r1

	ret
    81dc:	08 95       	ret

000081de <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    81de:	80 93 d9 09 	sts	0x09D9, r24
	ret
    81e2:	08 95       	ret

000081e4 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    81e4:	80 93 d7 09 	sts	0x09D7, r24
	sts tile_table_hi,r25	
    81e8:	90 93 d8 09 	sts	0x09D8, r25
	ret
    81ec:	08 95       	ret

000081ee <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    81ee:	80 91 e0 09 	lds	r24, 0x09E0
	andi r24,SYNC_FLAG_VSYNC
    81f2:	81 70       	andi	r24, 0x01	; 1
	ret
    81f4:	08 95       	ret

000081f6 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    81f6:	20 91 e0 09 	lds	r18, 0x09E0
	andi r18,~SYNC_FLAG_VSYNC
    81fa:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    81fc:	20 93 e0 09 	sts	0x09E0, r18
	ret
    8200:	08 95       	ret

00008202 <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    8202:	80 91 ef 09 	lds	r24, 0x09EF
	lds r25,vsync_counter+1
    8206:	90 91 f0 09 	lds	r25, 0x09F0
	ret
    820a:	08 95       	ret

0000820c <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    820c:	10 92 ef 09 	sts	0x09EF, r1
	sts vsync_counter+1,r1
    8210:	10 92 f0 09 	sts	0x09F0, r1
	ret
    8214:	08 95       	ret

00008216 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8216:	88 23       	and	r24, r24
	brne rj_p2
    8218:	29 f4       	brne	.+10     	; 0x8224 <rj_p2>
		
	lds r24,joypad1_status_lo
    821a:	80 91 e7 09 	lds	r24, 0x09E7
	lds r25,joypad1_status_lo+1
    821e:	90 91 e8 09 	lds	r25, 0x09E8
	ret
    8222:	08 95       	ret

00008224 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8224:	80 91 eb 09 	lds	r24, 0x09EB
	lds r25,joypad2_status_lo+1	
    8228:	90 91 ec 09 	lds	r25, 0x09EC

	ret
    822c:	08 95       	ret

0000822e <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    822e:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    8230:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8232:	f1 f7       	brne	.-4      	; 0x8230 <WaitUs+0x2>
	nop
    8234:	00 00       	nop
	sbiw r24,1
    8236:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8238:	d1 f7       	brne	.-12     	; 0x822e <WaitUs>

	ret
    823a:	08 95       	ret

0000823c <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    823c:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    823e:	fe cf       	rjmp	.-4      	; 0x823c <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8240:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8242:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8244:	60 bd       	out	0x20, r22	; 32
   cli
    8246:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8248:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    824a:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    824c:	78 94       	sei
   ret
    824e:	08 95       	ret

00008250 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8250:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8252:	fe cf       	rjmp	.-4      	; 0x8250 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8254:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8256:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8258:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    825a:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    825c:	80 b5       	in	r24, 0x20	; 32
   sei
    825e:	78 94       	sei
   ret
    8260:	08 95       	ret

00008262 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8262:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8264:	80 93 df 09 	sts	0x09DF, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8268:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    826c:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    8270:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8274:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8278:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    827c:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    8280:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8284:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8288:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    828a:	80 93 81 00 	sts	0x0081, r24

		cli
    828e:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    8290:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8292:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8296:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8298:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    829c:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    829e:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    82a2:	90 93 60 00 	sts	0x0060, r25
	
		sei
    82a6:	78 94       	sei

000082a8 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    82a8:	80 91 df 09 	lds	r24, 0x09DF
		cpi r24,8
    82ac:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    82ae:	e0 f3       	brcs	.-8      	; 0x82a8 <wait>

		ret
    82b0:	08 95       	ret

000082b2 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    82b2:	80 91 f1 09 	lds	r24, 0x09F1
		lds r25,random_value+1
    82b6:	90 91 f2 09 	lds	r25, 0x09F2
		ret
    82ba:	08 95       	ret

000082bc <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    82bc:	0f 93       	push	r16
		push r17
    82be:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    82c0:	0f b7       	in	r16, 0x3f	; 63
		push r16
    82c2:	0f 93       	push	r16

		lds r16,sync_pulse
    82c4:	00 91 df 09 	lds	r16, 0x09DF
		inc r16
    82c8:	03 95       	inc	r16
		sts sync_pulse,r16
    82ca:	00 93 df 09 	sts	0x09DF, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    82ce:	00 fd       	sbrc	r16, 0
		rjmp 1f
    82d0:	08 c0       	rjmp	.+16     	; 0x82e2 <__vector_8+0x26>
		lds r17,random_value
    82d2:	10 91 f1 09 	lds	r17, 0x09F1
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82d6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82da:	10 27       	eor	r17, r16
		sts random_value,r17
    82dc:	10 93 f1 09 	sts	0x09F1, r17
		rjmp 2f
    82e0:	07 c0       	rjmp	.+14     	; 0x82f0 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    82e2:	10 91 f2 09 	lds	r17, 0x09F2
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    82e6:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    82ea:	10 27       	eor	r17, r16
		sts random_value+1,r17
    82ec:	10 93 f2 09 	sts	0x09F2, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    82f0:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    82f2:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    82f6:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    82f8:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    82fa:	1f 91       	pop	r17
		pop r16
    82fc:	0f 91       	pop	r16
		reti
    82fe:	18 95       	reti

00008300 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8300:	98 e0       	ldi	r25, 0x08	; 8
    8302:	88 e1       	ldi	r24, 0x18	; 24
    8304:	0f b6       	in	r0, 0x3f	; 63
    8306:	f8 94       	cli
    8308:	a8 95       	wdr
    830a:	80 93 60 00 	sts	0x0060, r24
    830e:	0f be       	out	0x3f, r0	; 63
    8310:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8314:	ff cf       	rjmp	.-2      	; 0x8314 <SoftReset+0x14>

00008316 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8316:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8318:	c8 95       	lpm
    831a:	c8 95       	lpm
		Wait200ns();
    831c:	c8 95       	lpm
    831e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8320:	12 98       	cbi	0x02, 2	; 2
    8322:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8324:	80 e0       	ldi	r24, 0x00	; 0
    8326:	90 e0       	ldi	r25, 0x00	; 0
    8328:	20 e0       	ldi	r18, 0x00	; 0
    832a:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    832c:	36 95       	lsr	r19
    832e:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8330:	96 95       	lsr	r25
    8332:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8334:	c8 95       	lpm
    8336:	c8 95       	lpm
			Wait200ns();
    8338:	c8 95       	lpm
    833a:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    833c:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    833e:	00 9b       	sbis	0x00, 0	; 0
    8340:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8342:	01 9b       	sbis	0x00, 1	; 0
    8344:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8346:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8348:	c8 95       	lpm
    834a:	c8 95       	lpm
			Wait200ns();
    834c:	c8 95       	lpm
    834e:	c8 95       	lpm
    8350:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8352:	61 f7       	brne	.-40     	; 0x832c <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8354:	30 93 e8 09 	sts	0x09E8, r19
    8358:	20 93 e7 09 	sts	0x09E7, r18
		joypad2_status_lo=p2ButtonsLo;
    835c:	90 93 ec 09 	sts	0x09EC, r25
    8360:	80 93 eb 09 	sts	0x09EB, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8364:	80 91 e7 09 	lds	r24, 0x09E7
    8368:	90 91 e8 09 	lds	r25, 0x09E8
    836c:	0f 97       	sbiw	r24, 0x0f	; 15
    836e:	31 f0       	breq	.+12     	; 0x837c <ReadButtons+0x66>
    8370:	80 91 eb 09 	lds	r24, 0x09EB
    8374:	90 91 ec 09 	lds	r25, 0x09EC
    8378:	0f 97       	sbiw	r24, 0x0f	; 15
    837a:	11 f4       	brne	.+4      	; 0x8380 <ReadButtons+0x6a>
		SoftReset();
    837c:	0e 94 80 41 	call	0x8300	; 0x8300 <SoftReset>
    8380:	08 95       	ret

00008382 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8382:	10 92 6c 0a 	sts	0x0A6C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8386:	00 99       	sbic	0x00, 0	; 0
    8388:	03 c0       	rjmp	.+6      	; 0x8390 <ReadControllers+0xe>
    838a:	81 e0       	ldi	r24, 0x01	; 1
    838c:	80 93 6c 0a 	sts	0x0A6C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    8390:	01 99       	sbic	0x00, 1	; 0
    8392:	05 c0       	rjmp	.+10     	; 0x839e <ReadControllers+0x1c>
    8394:	80 91 6c 0a 	lds	r24, 0x0A6C
    8398:	82 60       	ori	r24, 0x02	; 2
    839a:	80 93 6c 0a 	sts	0x0A6C, r24
			
	//read the standard buttons
	ReadButtons();
    839e:	0c 94 8b 41 	jmp	0x8316	; 0x8316 <ReadButtons>

000083a2 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    83a2:	cf 93       	push	r28
    83a4:	df 93       	push	r29
    83a6:	c0 e0       	ldi	r28, 0x00	; 0
    83a8:	d0 e0       	ldi	r29, 0x00	; 0
    83aa:	fe 01       	movw	r30, r28
    83ac:	e2 56       	subi	r30, 0x62	; 98
    83ae:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    83b0:	64 91       	lpm	r22, Z
    83b2:	ce 01       	movw	r24, r28
    83b4:	0e 94 1e 41 	call	0x823c	; 0x823c <WriteEeprom>
    83b8:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    83ba:	c0 32       	cpi	r28, 0x20	; 32
    83bc:	d1 05       	cpc	r29, r1
    83be:	a9 f7       	brne	.-22     	; 0x83aa <FormatEeprom+0x8>
    83c0:	c0 e2       	ldi	r28, 0x20	; 32
    83c2:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    83c4:	6f ef       	ldi	r22, 0xFF	; 255
    83c6:	ce 01       	movw	r24, r28
    83c8:	0e 94 1e 41 	call	0x823c	; 0x823c <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    83cc:	6f ef       	ldi	r22, 0xFF	; 255
    83ce:	ce 01       	movw	r24, r28
    83d0:	01 96       	adiw	r24, 0x01	; 1
    83d2:	0e 94 1e 41 	call	0x823c	; 0x823c <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    83d6:	a0 96       	adiw	r28, 0x20	; 32
    83d8:	c1 15       	cp	r28, r1
    83da:	88 e0       	ldi	r24, 0x08	; 8
    83dc:	d8 07       	cpc	r29, r24
    83de:	91 f7       	brne	.-28     	; 0x83c4 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    83e0:	df 91       	pop	r29
    83e2:	cf 91       	pop	r28
    83e4:	08 95       	ret

000083e6 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    83e6:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    83e8:	80 e0       	ldi	r24, 0x00	; 0
    83ea:	90 e0       	ldi	r25, 0x00	; 0
    83ec:	0e 94 28 41 	call	0x8250	; 0x8250 <ReadEeprom>
    83f0:	c8 2f       	mov	r28, r24
    83f2:	81 e0       	ldi	r24, 0x01	; 1
    83f4:	90 e0       	ldi	r25, 0x00	; 0
    83f6:	0e 94 28 41 	call	0x8250	; 0x8250 <ReadEeprom>
    83fa:	28 2f       	mov	r18, r24
    83fc:	30 e0       	ldi	r19, 0x00	; 0
    83fe:	32 2f       	mov	r19, r18
    8400:	22 27       	eor	r18, r18
    8402:	2c 0f       	add	r18, r28
    8404:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8406:	81 e0       	ldi	r24, 0x01	; 1
    8408:	2a 35       	cpi	r18, 0x5A	; 90
    840a:	35 45       	sbci	r19, 0x55	; 85
    840c:	09 f0       	breq	.+2      	; 0x8410 <isEepromFormatted+0x2a>
    840e:	80 e0       	ldi	r24, 0x00	; 0
}
    8410:	cf 91       	pop	r28
    8412:	08 95       	ret

00008414 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8414:	8f 92       	push	r8
    8416:	9f 92       	push	r9
    8418:	af 92       	push	r10
    841a:	bf 92       	push	r11
    841c:	cf 92       	push	r12
    841e:	df 92       	push	r13
    8420:	ef 92       	push	r14
    8422:	ff 92       	push	r15
    8424:	0f 93       	push	r16
    8426:	1f 93       	push	r17
    8428:	cf 93       	push	r28
    842a:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    842c:	fb 01       	movw	r30, r22
    842e:	11 82       	std	Z+1, r1	; 0x01
    8430:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8432:	8f 3f       	cpi	r24, 0xFF	; 255
    8434:	ff ef       	ldi	r31, 0xFF	; 255
    8436:	9f 07       	cpc	r25, r31
    8438:	89 f1       	breq	.+98     	; 0x849c <EepromBlockExists+0x88>
    843a:	6a 01       	movw	r12, r20
    843c:	8b 01       	movw	r16, r22
    843e:	7c 01       	movw	r14, r24
    8440:	a1 2c       	mov	r10, r1
    8442:	b1 2c       	mov	r11, r1
    8444:	c0 e0       	ldi	r28, 0x00	; 0
    8446:	d3 e0       	ldi	r29, 0x03	; 3
    8448:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    844a:	c5 01       	movw	r24, r10
    844c:	0e 94 28 41 	call	0x8250	; 0x8250 <ReadEeprom>
    8450:	88 2e       	mov	r8, r24
    8452:	c5 01       	movw	r24, r10
    8454:	01 96       	adiw	r24, 0x01	; 1
    8456:	0e 94 28 41 	call	0x8250	; 0x8250 <ReadEeprom>
    845a:	28 2f       	mov	r18, r24
    845c:	30 e0       	ldi	r19, 0x00	; 0
    845e:	32 2f       	mov	r19, r18
    8460:	22 27       	eor	r18, r18
    8462:	28 0d       	add	r18, r8
    8464:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8466:	2e 15       	cp	r18, r14
    8468:	3f 05       	cpc	r19, r15
    846a:	29 f4       	brne	.+10     	; 0x8476 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    846c:	f8 01       	movw	r30, r16
    846e:	b1 82       	std	Z+1, r11	; 0x01
    8470:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8472:	d0 e0       	ldi	r29, 0x00	; 0
    8474:	0b c0       	rjmp	.+22     	; 0x848c <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8476:	2f 3f       	cpi	r18, 0xFF	; 255
    8478:	3f 4f       	sbci	r19, 0xFF	; 255
    847a:	41 f4       	brne	.+16     	; 0x848c <EepromBlockExists+0x78>
    847c:	91 10       	cpse	r9, r1
    847e:	06 c0       	rjmp	.+12     	; 0x848c <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8480:	c1 14       	cp	r12, r1
    8482:	d1 04       	cpc	r13, r1
    8484:	11 f0       	breq	.+4      	; 0x848a <EepromBlockExists+0x76>
    8486:	f6 01       	movw	r30, r12
    8488:	c0 83       	st	Z, r28
    848a:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    848c:	cf 5f       	subi	r28, 0xFF	; 255
    848e:	f0 e2       	ldi	r31, 0x20	; 32
    8490:	af 0e       	add	r10, r31
    8492:	b1 1c       	adc	r11, r1
    8494:	c0 34       	cpi	r28, 0x40	; 64
    8496:	c9 f6       	brne	.-78     	; 0x844a <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8498:	8d 2f       	mov	r24, r29
    849a:	01 c0       	rjmp	.+2      	; 0x849e <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    849c:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    849e:	df 91       	pop	r29
    84a0:	cf 91       	pop	r28
    84a2:	1f 91       	pop	r17
    84a4:	0f 91       	pop	r16
    84a6:	ff 90       	pop	r15
    84a8:	ef 90       	pop	r14
    84aa:	df 90       	pop	r13
    84ac:	cf 90       	pop	r12
    84ae:	bf 90       	pop	r11
    84b0:	af 90       	pop	r10
    84b2:	9f 90       	pop	r9
    84b4:	8f 90       	pop	r8
    84b6:	08 95       	ret

000084b8 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    84b8:	ef 92       	push	r14
    84ba:	ff 92       	push	r15
    84bc:	0f 93       	push	r16
    84be:	1f 93       	push	r17
    84c0:	cf 93       	push	r28
    84c2:	df 93       	push	r29
    84c4:	00 d0       	rcall	.+0      	; 0x84c6 <EepromWriteBlock+0xe>
    84c6:	1f 92       	push	r1
    84c8:	cd b7       	in	r28, 0x3d	; 61
    84ca:	de b7       	in	r29, 0x3e	; 62
    84cc:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    84ce:	1a 82       	std	Y+2, r1	; 0x02
    84d0:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    84d2:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    84d4:	ae 01       	movw	r20, r28
    84d6:	4d 5f       	subi	r20, 0xFD	; 253
    84d8:	5f 4f       	sbci	r21, 0xFF	; 255
    84da:	be 01       	movw	r22, r28
    84dc:	6f 5f       	subi	r22, 0xFF	; 255
    84de:	7f 4f       	sbci	r23, 0xFF	; 255
    84e0:	fc 01       	movw	r30, r24
    84e2:	80 81       	ld	r24, Z
    84e4:	91 81       	ldd	r25, Z+1	; 0x01
    84e6:	0e 94 0a 42 	call	0x8414	; 0x8414 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    84ea:	88 23       	and	r24, r24
    84ec:	11 f0       	breq	.+4      	; 0x84f2 <EepromWriteBlock+0x3a>
    84ee:	83 30       	cpi	r24, 0x03	; 3
    84f0:	19 f5       	brne	.+70     	; 0x8538 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    84f2:	89 81       	ldd	r24, Y+1	; 0x01
    84f4:	9a 81       	ldd	r25, Y+2	; 0x02
    84f6:	89 2b       	or	r24, r25
    84f8:	49 f4       	brne	.+18     	; 0x850c <EepromWriteBlock+0x54>
    84fa:	8b 81       	ldd	r24, Y+3	; 0x03
    84fc:	88 23       	and	r24, r24
    84fe:	d9 f0       	breq	.+54     	; 0x8536 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8500:	f0 e2       	ldi	r31, 0x20	; 32
    8502:	8f 9f       	mul	r24, r31
    8504:	c0 01       	movw	r24, r0
    8506:	11 24       	eor	r1, r1
    8508:	9a 83       	std	Y+2, r25	; 0x02
    850a:	89 83       	std	Y+1, r24	; 0x01
    850c:	78 01       	movw	r14, r16
    850e:	20 e2       	ldi	r18, 0x20	; 32
    8510:	e2 0e       	add	r14, r18
    8512:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8514:	f8 01       	movw	r30, r16
    8516:	61 91       	ld	r22, Z+
    8518:	8f 01       	movw	r16, r30
    851a:	89 81       	ldd	r24, Y+1	; 0x01
    851c:	9a 81       	ldd	r25, Y+2	; 0x02
    851e:	9c 01       	movw	r18, r24
    8520:	2f 5f       	subi	r18, 0xFF	; 255
    8522:	3f 4f       	sbci	r19, 0xFF	; 255
    8524:	3a 83       	std	Y+2, r19	; 0x02
    8526:	29 83       	std	Y+1, r18	; 0x01
    8528:	0e 94 1e 41 	call	0x823c	; 0x823c <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    852c:	0e 15       	cp	r16, r14
    852e:	1f 05       	cpc	r17, r15
    8530:	89 f7       	brne	.-30     	; 0x8514 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8532:	80 e0       	ldi	r24, 0x00	; 0
    8534:	01 c0       	rjmp	.+2      	; 0x8538 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8536:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8538:	0f 90       	pop	r0
    853a:	0f 90       	pop	r0
    853c:	0f 90       	pop	r0
    853e:	df 91       	pop	r29
    8540:	cf 91       	pop	r28
    8542:	1f 91       	pop	r17
    8544:	0f 91       	pop	r16
    8546:	ff 90       	pop	r15
    8548:	ef 90       	pop	r14
    854a:	08 95       	ret

0000854c <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    854c:	cf 92       	push	r12
    854e:	df 92       	push	r13
    8550:	ff 92       	push	r15
    8552:	0f 93       	push	r16
    8554:	1f 93       	push	r17
    8556:	cf 93       	push	r28
    8558:	df 93       	push	r29
    855a:	00 d0       	rcall	.+0      	; 0x855c <EepromReadBlock+0x10>
    855c:	cd b7       	in	r28, 0x3d	; 61
    855e:	de b7       	in	r29, 0x3e	; 62
    8560:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8562:	40 e0       	ldi	r20, 0x00	; 0
    8564:	50 e0       	ldi	r21, 0x00	; 0
    8566:	be 01       	movw	r22, r28
    8568:	6f 5f       	subi	r22, 0xFF	; 255
    856a:	7f 4f       	sbci	r23, 0xFF	; 255
    856c:	0e 94 0a 42 	call	0x8414	; 0x8414 <EepromBlockExists>
    8570:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8572:	81 11       	cpse	r24, r1
    8574:	13 c0       	rjmp	.+38     	; 0x859c <EepromReadBlock+0x50>
    8576:	68 01       	movw	r12, r16
    8578:	80 e2       	ldi	r24, 0x20	; 32
    857a:	c8 0e       	add	r12, r24
    857c:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    857e:	89 81       	ldd	r24, Y+1	; 0x01
    8580:	9a 81       	ldd	r25, Y+2	; 0x02
    8582:	9c 01       	movw	r18, r24
    8584:	2f 5f       	subi	r18, 0xFF	; 255
    8586:	3f 4f       	sbci	r19, 0xFF	; 255
    8588:	3a 83       	std	Y+2, r19	; 0x02
    858a:	29 83       	std	Y+1, r18	; 0x01
    858c:	0e 94 28 41 	call	0x8250	; 0x8250 <ReadEeprom>
    8590:	f8 01       	movw	r30, r16
    8592:	81 93       	st	Z+, r24
    8594:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8596:	ec 15       	cp	r30, r12
    8598:	fd 05       	cpc	r31, r13
    859a:	89 f7       	brne	.-30     	; 0x857e <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    859c:	8f 2d       	mov	r24, r15
    859e:	0f 90       	pop	r0
    85a0:	0f 90       	pop	r0
    85a2:	df 91       	pop	r29
    85a4:	cf 91       	pop	r28
    85a6:	1f 91       	pop	r17
    85a8:	0f 91       	pop	r16
    85aa:	ff 90       	pop	r15
    85ac:	df 90       	pop	r13
    85ae:	cf 90       	pop	r12
    85b0:	08 95       	ret

000085b2 <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    85b2:	90 91 6d 0a 	lds	r25, 0x0A6D
    85b6:	80 91 6f 0a 	lds	r24, 0x0A6F
    85ba:	98 17       	cp	r25, r24
    85bc:	71 f0       	breq	.+28     	; 0x85da <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    85be:	e0 91 6f 0a 	lds	r30, 0x0A6F
    85c2:	f0 e0       	ldi	r31, 0x00	; 0
    85c4:	e0 59       	subi	r30, 0x90	; 144
    85c6:	f5 4f       	sbci	r31, 0xF5	; 245
    85c8:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    85ca:	90 91 6f 0a 	lds	r25, 0x0A6F
    85ce:	9f 5f       	subi	r25, 0xFF	; 255
    85d0:	9f 73       	andi	r25, 0x3F	; 63
    85d2:	90 93 6f 0a 	sts	0x0A6F, r25
			return (data&0xff);
    85d6:	90 e0       	ldi	r25, 0x00	; 0
    85d8:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    85da:	8f ef       	ldi	r24, 0xFF	; 255
    85dc:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    85de:	08 95       	ret

000085e0 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    85e0:	10 92 6f 0a 	sts	0x0A6F, r1
		uart_rx_head=0;
    85e4:	10 92 6d 0a 	sts	0x0A6D, r1
    85e8:	08 95       	ret

000085ea <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    85ea:	90 91 6e 0a 	lds	r25, 0x0A6E
    85ee:	9f 5f       	subi	r25, 0xFF	; 255
    85f0:	9f 73       	andi	r25, 0x3F	; 63

		if (next_head != uart_tx_tail) {
    85f2:	20 91 b0 0a 	lds	r18, 0x0AB0
    85f6:	92 17       	cp	r25, r18
    85f8:	51 f0       	breq	.+20     	; 0x860e <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    85fa:	e0 91 6e 0a 	lds	r30, 0x0A6E
    85fe:	f0 e0       	ldi	r31, 0x00	; 0
    8600:	e4 5d       	subi	r30, 0xD4	; 212
    8602:	f5 4f       	sbci	r31, 0xF5	; 245
    8604:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    8606:	90 93 6e 0a 	sts	0x0A6E, r25
			return 0;
    860a:	80 e0       	ldi	r24, 0x00	; 0
    860c:	08 95       	ret
		}else{
			return -1; //buffer full
    860e:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    8610:	08 95       	ret

00008612 <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    8612:	10 92 b0 0a 	sts	0x0AB0, r1
		uart_tx_head=0;
    8616:	10 92 6e 0a 	sts	0x0A6E, r1
    861a:	08 95       	ret

0000861c <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    861c:	00 97       	sbiw	r24, 0x00	; 0
    861e:	21 f0       	breq	.+8      	; 0x8628 <GetPrngNumber+0xc>
    8620:	90 93 01 0a 	sts	0x0A01, r25
    8624:	80 93 00 0a 	sts	0x0A00, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8628:	20 91 00 0a 	lds	r18, 0x0A00
    862c:	30 91 01 0a 	lds	r19, 0x0A01
    8630:	a9 01       	movw	r20, r18
    8632:	56 95       	lsr	r21
    8634:	47 95       	ror	r20
    8636:	56 95       	lsr	r21
    8638:	47 95       	ror	r20
    863a:	c9 01       	movw	r24, r18
    863c:	63 e0       	ldi	r22, 0x03	; 3
    863e:	96 95       	lsr	r25
    8640:	87 95       	ror	r24
    8642:	6a 95       	dec	r22
    8644:	e1 f7       	brne	.-8      	; 0x863e <GetPrngNumber+0x22>
    8646:	84 27       	eor	r24, r20
    8648:	95 27       	eor	r25, r21
    864a:	82 27       	eor	r24, r18
    864c:	93 27       	eor	r25, r19
    864e:	a9 01       	movw	r20, r18
    8650:	75 e0       	ldi	r23, 0x05	; 5
    8652:	56 95       	lsr	r21
    8654:	47 95       	ror	r20
    8656:	7a 95       	dec	r23
    8658:	e1 f7       	brne	.-8      	; 0x8652 <GetPrngNumber+0x36>
    865a:	84 27       	eor	r24, r20
    865c:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    865e:	99 27       	eor	r25, r25
    8660:	86 95       	lsr	r24
    8662:	97 95       	ror	r25
    8664:	88 27       	eor	r24, r24
    8666:	36 95       	lsr	r19
    8668:	27 95       	ror	r18
    866a:	82 2b       	or	r24, r18
    866c:	93 2b       	or	r25, r19
    866e:	90 93 01 0a 	sts	0x0A01, r25
    8672:	80 93 00 0a 	sts	0x0A00, r24
	return prng_state;   
}
    8676:	08 95       	ret

00008678 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8678:	fc 01       	movw	r30, r24
    867a:	67 87       	std	Z+15, r22	; 0x0f
    867c:	08 95       	ret

0000867e <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    867e:	e4 e0       	ldi	r30, 0x04	; 4
    8680:	fa e0       	ldi	r31, 0x0A	; 10
    8682:	81 e0       	ldi	r24, 0x01	; 1
    8684:	91 e0       	ldi	r25, 0x01	; 1
    8686:	95 8b       	std	Z+21, r25	; 0x15
    8688:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    868a:	63 8b       	std	Z+19, r22	; 0x13
    868c:	08 95       	ret

0000868e <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    868e:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8690:	90 81       	ld	r25, Z
    8692:	9f 75       	andi	r25, 0x5F	; 95
    8694:	90 83       	st	Z, r25
    8696:	08 95       	ret

00008698 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8698:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    869a:	90 81       	ld	r25, Z
    869c:	90 64       	ori	r25, 0x40	; 64
    869e:	90 83       	st	Z, r25
    86a0:	08 95       	ret

000086a2 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    86a2:	fc 01       	movw	r30, r24
    86a4:	66 87       	std	Z+14, r22	; 0x0e
    86a6:	08 95       	ret

000086a8 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    86a8:	fc 01       	movw	r30, r24
    86aa:	62 87       	std	Z+10, r22	; 0x0a
    86ac:	08 95       	ret

000086ae <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    86ae:	fc 01       	movw	r30, r24
    86b0:	63 87       	std	Z+11, r22	; 0x0b
    86b2:	08 95       	ret

000086b4 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    86b4:	cf 93       	push	r28
    86b6:	df 93       	push	r29
    86b8:	ec 01       	movw	r28, r24
    86ba:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    86bc:	29 81       	ldd	r18, Y+1	; 0x01
    86be:	30 e0       	ldi	r19, 0x00	; 0
    86c0:	f9 01       	movw	r30, r18
    86c2:	ee 0f       	add	r30, r30
    86c4:	ff 1f       	adc	r31, r31
    86c6:	e8 5f       	subi	r30, 0xF8	; 248
    86c8:	f0 47       	sbci	r31, 0x70	; 112
    86ca:	65 91       	lpm	r22, Z+
    86cc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    86ce:	f9 01       	movw	r30, r18
    86d0:	e4 0f       	add	r30, r20
    86d2:	f1 1d       	adc	r31, r1
    86d4:	47 fd       	sbrc	r20, 7
    86d6:	fa 95       	dec	r31
    86d8:	ee 0f       	add	r30, r30
    86da:	ff 1f       	adc	r31, r31
    86dc:	e8 5f       	subi	r30, 0xF8	; 248
    86de:	f0 47       	sbci	r31, 0x70	; 112
    86e0:	85 91       	lpm	r24, Z+
    86e2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    86e4:	86 1b       	sub	r24, r22
    86e6:	97 0b       	sbc	r25, r23
    86e8:	68 85       	ldd	r22, Y+8	; 0x08
    86ea:	70 e0       	ldi	r23, 0x00	; 0
    86ec:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
	if(delta==0)delta++;
    86f0:	61 15       	cp	r22, r1
    86f2:	71 05       	cpc	r23, r1
    86f4:	11 f4       	brne	.+4      	; 0x86fa <PatchCommand11+0x46>
    86f6:	61 e0       	ldi	r22, 0x01	; 1
    86f8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    86fa:	ea 81       	ldd	r30, Y+2	; 0x02
    86fc:	86 e0       	ldi	r24, 0x06	; 6
    86fe:	e8 9f       	mul	r30, r24
    8700:	f0 01       	movw	r30, r0
    8702:	11 24       	eor	r1, r1
    8704:	ec 5f       	subi	r30, 0xFC	; 252
    8706:	f5 4f       	sbci	r31, 0xF5	; 245
    8708:	81 81       	ldd	r24, Z+1	; 0x01
    870a:	92 81       	ldd	r25, Z+2	; 0x02
    870c:	86 0f       	add	r24, r22
    870e:	97 1f       	adc	r25, r23
    8710:	92 83       	std	Z+2, r25	; 0x02
    8712:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8714:	7e 83       	std	Y+6, r23	; 0x06
    8716:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8718:	88 81       	ld	r24, Y
    871a:	88 60       	ori	r24, 0x08	; 8
    871c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    871e:	89 81       	ldd	r24, Y+1	; 0x01
    8720:	48 0f       	add	r20, r24
    8722:	4f 83       	std	Y+7, r20	; 0x07
}
    8724:	df 91       	pop	r29
    8726:	cf 91       	pop	r28
    8728:	08 95       	ret

0000872a <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    872a:	fc 01       	movw	r30, r24
    872c:	60 87       	std	Z+8, r22	; 0x08
    872e:	08 95       	ret

00008730 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8730:	fc 01       	movw	r30, r24
    8732:	64 83       	std	Z+4, r22	; 0x04
    8734:	08 95       	ret

00008736 <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8736:	fc 01       	movw	r30, r24
    8738:	82 81       	ldd	r24, Z+2	; 0x02
    873a:	0c 94 08 47 	jmp	0x8e10	; 0x8e10 <SetMixerWave>

0000873e <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    873e:	fc 01       	movw	r30, r24
	track->note+=param;
    8740:	91 81       	ldd	r25, Z+1	; 0x01
    8742:	69 0f       	add	r22, r25
    8744:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8746:	82 81       	ldd	r24, Z+2	; 0x02
    8748:	0c 94 f1 46 	jmp	0x8de2	; 0x8de2 <SetMixerNote>

0000874c <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    874c:	fc 01       	movw	r30, r24
	track->note-=param;
    874e:	91 81       	ldd	r25, Z+1	; 0x01
    8750:	96 1b       	sub	r25, r22
    8752:	69 2f       	mov	r22, r25
    8754:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8756:	82 81       	ldd	r24, Z+2	; 0x02
    8758:	0c 94 f1 46 	jmp	0x8de2	; 0x8de2 <SetMixerNote>

0000875c <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    875c:	1f 93       	push	r17
    875e:	cf 93       	push	r28
    8760:	df 93       	push	r29
    8762:	ec 01       	movw	r28, r24
    8764:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8766:	8a 81       	ldd	r24, Y+2	; 0x02
    8768:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <SetMixerNote>
	track->note=param;
    876c:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    876e:	88 81       	ld	r24, Y
    8770:	87 7f       	andi	r24, 0xF7	; 247
    8772:	88 83       	st	Y, r24
}
    8774:	df 91       	pop	r29
    8776:	cf 91       	pop	r28
    8778:	1f 91       	pop	r17
    877a:	08 95       	ret

0000877c <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    877c:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    877e:	14 96       	adiw	r26, 0x04	; 4
    8780:	8c 91       	ld	r24, X
    8782:	14 97       	sbiw	r26, 0x04	; 4
    8784:	88 23       	and	r24, r24
    8786:	19 f1       	breq	.+70     	; 0x87ce <PatchCommand14+0x52>
    8788:	55 96       	adiw	r26, 0x15	; 21
    878a:	2d 91       	ld	r18, X+
    878c:	3c 91       	ld	r19, X
    878e:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8790:	66 23       	and	r22, r22
    8792:	79 f0       	breq	.+30     	; 0x87b2 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8794:	77 27       	eor	r23, r23
    8796:	67 fd       	sbrc	r22, 7
    8798:	70 95       	com	r23
    879a:	6f 5f       	subi	r22, 0xFF	; 255
    879c:	7f 4f       	sbci	r23, 0xFF	; 255
    879e:	ab 01       	movw	r20, r22
    87a0:	44 0f       	add	r20, r20
    87a2:	55 1f       	adc	r21, r21
    87a4:	64 0f       	add	r22, r20
    87a6:	75 1f       	adc	r23, r21
    87a8:	26 1b       	sub	r18, r22
    87aa:	37 0b       	sbc	r19, r23
    87ac:	09 c0       	rjmp	.+18     	; 0x87c0 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    87ae:	ef 3f       	cpi	r30, 0xFF	; 255
    87b0:	39 f0       	breq	.+14     	; 0x87c0 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    87b2:	23 50       	subi	r18, 0x03	; 3
    87b4:	31 09       	sbc	r19, r1
    87b6:	f9 01       	movw	r30, r18
    87b8:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    87ba:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    87bc:	ed 30       	cpi	r30, 0x0D	; 13
    87be:	b9 f7       	brne	.-18     	; 0x87ae <PatchCommand14+0x32>
    87c0:	56 96       	adiw	r26, 0x16	; 22
    87c2:	3c 93       	st	X, r19
    87c4:	2e 93       	st	-X, r18
    87c6:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    87c8:	81 50       	subi	r24, 0x01	; 1
    87ca:	14 96       	adiw	r26, 0x04	; 4
    87cc:	8c 93       	st	X, r24
    87ce:	08 95       	ret

000087d0 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    87d0:	90 93 12 0b 	sts	0x0B12, r25
    87d4:	80 93 11 0b 	sts	0x0B11, r24

	masterVolume=DEFAULT_MASTER_VOL;
    87d8:	8f e6       	ldi	r24, 0x6F	; 111
    87da:	80 93 14 0b 	sts	0x0B14, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    87de:	10 92 02 0a 	sts	0x0A02, r1
    87e2:	e3 ec       	ldi	r30, 0xC3	; 195
    87e4:	fa e0       	ldi	r31, 0x0A	; 10

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    87e6:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    87e8:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    87ea:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    87ec:	28 e1       	ldi	r18, 0x18	; 24
    87ee:	df 01       	movw	r26, r30
    87f0:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    87f2:	8c 93       	st	X, r24
    87f4:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    87f6:	9c 93       	st	X, r25
    87f8:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    87fa:	1c 92       	st	X, r1
    87fc:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    87fe:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8800:	10 82       	st	Z, r1
    8802:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8804:	2c 93       	st	X, r18
    8806:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8808:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    880a:	8f 5f       	subi	r24, 0xFF	; 255
    880c:	77 96       	adiw	r30, 0x17	; 23
    880e:	84 30       	cpi	r24, 0x04	; 4
    8810:	71 f7       	brne	.-36     	; 0x87ee <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8812:	08 95       	ret

00008814 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8814:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8816:	ed 91       	ld	r30, X+
    8818:	fc 91       	ld	r31, X
    881a:	11 97       	sbiw	r26, 0x01	; 1
    881c:	9f 01       	movw	r18, r30
    881e:	2f 5f       	subi	r18, 0xFF	; 255
    8820:	3f 4f       	sbci	r19, 0xFF	; 255
    8822:	11 96       	adiw	r26, 0x01	; 1
    8824:	3c 93       	st	X, r19
    8826:	2e 93       	st	-X, r18
    8828:	e4 91       	lpm	r30, Z
    882a:	e7 fd       	sbrc	r30, 7
    882c:	03 c0       	rjmp	.+6      	; 0x8834 <ReadVarLen+0x20>
    882e:	8e 2f       	mov	r24, r30
    8830:	90 e0       	ldi	r25, 0x00	; 0
    8832:	08 95       	ret
    {
       value &= 0x7F;
    8834:	ef 77       	andi	r30, 0x7F	; 127
    8836:	8e 2f       	mov	r24, r30
    8838:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    883a:	96 95       	lsr	r25
    883c:	98 2f       	mov	r25, r24
    883e:	88 27       	eor	r24, r24
    8840:	97 95       	ror	r25
    8842:	87 95       	ror	r24
    8844:	2f 5f       	subi	r18, 0xFF	; 255
    8846:	3f 4f       	sbci	r19, 0xFF	; 255
    8848:	f9 01       	movw	r30, r18
    884a:	31 97       	sbiw	r30, 0x01	; 1
    884c:	e4 91       	lpm	r30, Z
    884e:	4e 2f       	mov	r20, r30
    8850:	4f 77       	andi	r20, 0x7F	; 127
    8852:	84 0f       	add	r24, r20
    8854:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8856:	e7 fd       	sbrc	r30, 7
    8858:	f0 cf       	rjmp	.-32     	; 0x883a <ReadVarLen+0x26>
    885a:	2d 93       	st	X+, r18
    885c:	3c 93       	st	X, r19
    }


    return value;
}
    885e:	08 95       	ret

00008860 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8860:	ef 92       	push	r14
    8862:	ff 92       	push	r15
    8864:	0f 93       	push	r16
    8866:	1f 93       	push	r17
    8868:	cf 93       	push	r28
    886a:	df 93       	push	r29
    886c:	1f 92       	push	r1
    886e:	cd b7       	in	r28, 0x3d	; 61
    8870:	de b7       	in	r29, 0x3e	; 62
    8872:	7c 01       	movw	r14, r24
    8874:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8876:	fc 01       	movw	r30, r24
    8878:	80 81       	ld	r24, Z
    887a:	08 2f       	mov	r16, r24
    887c:	00 1f       	adc	r16, r16
    887e:	00 27       	eor	r16, r16
    8880:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8882:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8884:	9f ef       	ldi	r25, 0xFF	; 255
    8886:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8888:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    888a:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    888c:	87 7b       	andi	r24, 0xB7	; 183
    888e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8890:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8892:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8894:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8896:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8898:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    889a:	82 81       	ldd	r24, Z+2	; 0x02
    889c:	83 30       	cpi	r24, 0x03	; 3
    889e:	69 f4       	brne	.+26     	; 0x88ba <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    88a0:	01 11       	cpse	r16, r1
    88a2:	01 c0       	rjmp	.+2      	; 0x88a6 <TriggerCommon+0x46>
    88a4:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    88a6:	81 e0       	ldi	r24, 0x01	; 1
    88a8:	91 e0       	ldi	r25, 0x01	; 1
    88aa:	90 93 19 0a 	sts	0x0A19, r25
    88ae:	80 93 18 0a 	sts	0x0A18, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    88b2:	81 e0       	ldi	r24, 0x01	; 1
    88b4:	80 93 17 0a 	sts	0x0A17, r24
    88b8:	0a c0       	rjmp	.+20     	; 0x88ce <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    88ba:	60 e0       	ldi	r22, 0x00	; 0
    88bc:	29 83       	std	Y+1, r18	; 0x01
    88be:	0e 94 08 47 	call	0x8e10	; 0x8e10 <SetMixerWave>
			SetMixerNote(track->channel,note);
    88c2:	29 81       	ldd	r18, Y+1	; 0x01
    88c4:	62 2f       	mov	r22, r18
    88c6:	f7 01       	movw	r30, r14
    88c8:	82 81       	ldd	r24, Z+2	; 0x02
    88ca:	0e 94 f1 46 	call	0x8de2	; 0x8de2 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    88ce:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    88d0:	00 23       	and	r16, r16
    88d2:	11 f0       	breq	.+4      	; 0x88d8 <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    88d4:	11 8b       	std	Z+17, r17	; 0x11
    88d6:	01 c0       	rjmp	.+2      	; 0x88da <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    88d8:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    88da:	e0 91 11 0b 	lds	r30, 0x0B11
    88de:	f0 91 12 0b 	lds	r31, 0x0B12
    88e2:	89 e0       	ldi	r24, 0x09	; 9
    88e4:	18 9f       	mul	r17, r24
    88e6:	e0 0d       	add	r30, r0
    88e8:	f1 1d       	adc	r31, r1
    88ea:	11 24       	eor	r1, r1
    88ec:	33 96       	adiw	r30, 0x03	; 3
    88ee:	85 91       	lpm	r24, Z+
    88f0:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    88f2:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    88f4:	00 97       	sbiw	r24, 0x00	; 0
    88f6:	19 f4       	brne	.+6      	; 0x88fe <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    88f8:	16 8a       	std	Z+22, r1	; 0x16
    88fa:	15 8a       	std	Z+21, r1	; 0x15
    88fc:	08 c0       	rjmp	.+16     	; 0x890e <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    88fe:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8900:	fc 01       	movw	r30, r24
    8902:	24 91       	lpm	r18, Z
    8904:	f7 01       	movw	r30, r14
    8906:	22 8b       	std	Z+18, r18	; 0x12
    8908:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    890a:	96 8b       	std	Z+22, r25	; 0x16
    890c:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    890e:	0f 90       	pop	r0
    8910:	df 91       	pop	r29
    8912:	cf 91       	pop	r28
    8914:	1f 91       	pop	r17
    8916:	0f 91       	pop	r16
    8918:	ff 90       	pop	r15
    891a:	ef 90       	pop	r14
    891c:	08 95       	ret

0000891e <TriggerNote>:
	TriggerCommon(track,patch,volume,80);
	track->flags|=TRACK_FLAGS_PLAYING;
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    891e:	cf 93       	push	r28
    8920:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8922:	a8 2f       	mov	r26, r24
    8924:	b0 e0       	ldi	r27, 0x00	; 0
    8926:	97 e1       	ldi	r25, 0x17	; 23
    8928:	89 9f       	mul	r24, r25
    892a:	f0 01       	movw	r30, r0
    892c:	11 24       	eor	r1, r1
    892e:	ed 54       	subi	r30, 0x4D	; 77
    8930:	f5 4f       	sbci	r31, 0xF5	; 245
    8932:	80 81       	ld	r24, Z
    8934:	85 ff       	sbrs	r24, 5
    8936:	02 c0       	rjmp	.+4      	; 0x893c <TriggerNote+0x1e>
    8938:	87 fd       	sbrc	r24, 7
    893a:	2e c0       	rjmp	.+92     	; 0x8998 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    893c:	21 11       	cpse	r18, r1
    893e:	18 c0       	rjmp	.+48     	; 0x8970 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8940:	97 e1       	ldi	r25, 0x17	; 23
    8942:	9a 9f       	mul	r25, r26
    8944:	f0 01       	movw	r30, r0
    8946:	9b 9f       	mul	r25, r27
    8948:	f0 0d       	add	r31, r0
    894a:	11 24       	eor	r1, r1
    894c:	ed 54       	subi	r30, 0x4D	; 77
    894e:	f5 4f       	sbci	r31, 0xF5	; 245
    8950:	97 85       	ldd	r25, Z+15	; 0x0f
    8952:	91 11       	cpse	r25, r1
    8954:	02 c0       	rjmp	.+4      	; 0x895a <TriggerNote+0x3c>
    8956:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8958:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    895a:	97 e1       	ldi	r25, 0x17	; 23
    895c:	9a 9f       	mul	r25, r26
    895e:	f0 01       	movw	r30, r0
    8960:	9b 9f       	mul	r25, r27
    8962:	f0 0d       	add	r31, r0
    8964:	11 24       	eor	r1, r1
    8966:	ed 54       	subi	r30, 0x4D	; 77
    8968:	f5 4f       	sbci	r31, 0xF5	; 245
    896a:	8f 7b       	andi	r24, 0xBF	; 191
    896c:	80 83       	st	Z, r24
    896e:	14 c0       	rjmp	.+40     	; 0x8998 <TriggerNote+0x7a>
    8970:	82 2f       	mov	r24, r18
    8972:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8974:	97 e1       	ldi	r25, 0x17	; 23
    8976:	9a 9f       	mul	r25, r26
    8978:	e0 01       	movw	r28, r0
    897a:	9b 9f       	mul	r25, r27
    897c:	d0 0d       	add	r29, r0
    897e:	11 24       	eor	r1, r1
    8980:	cd 54       	subi	r28, 0x4D	; 77
    8982:	d5 4f       	sbci	r29, 0xF5	; 245
    8984:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8986:	1e 8a       	std	Y+22, r1	; 0x16
    8988:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    898a:	48 2f       	mov	r20, r24
    898c:	ce 01       	movw	r24, r28
    898e:	0e 94 30 44 	call	0x8860	; 0x8860 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8992:	88 81       	ld	r24, Y
    8994:	80 62       	ori	r24, 0x20	; 32
    8996:	88 83       	st	Y, r24
		}

	}
}
    8998:	df 91       	pop	r29
    899a:	cf 91       	pop	r28
    899c:	08 95       	ret

0000899e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    899e:	6f 92       	push	r6
    89a0:	7f 92       	push	r7
    89a2:	8f 92       	push	r8
    89a4:	9f 92       	push	r9
    89a6:	af 92       	push	r10
    89a8:	bf 92       	push	r11
    89aa:	cf 92       	push	r12
    89ac:	df 92       	push	r13
    89ae:	ef 92       	push	r14
    89b0:	ff 92       	push	r15
    89b2:	0f 93       	push	r16
    89b4:	1f 93       	push	r17
    89b6:	cf 93       	push	r28
    89b8:	df 93       	push	r29
    89ba:	c3 eb       	ldi	r28, 0xB3	; 179
    89bc:	da e0       	ldi	r29, 0x0A	; 10
    89be:	04 e0       	ldi	r16, 0x04	; 4
    89c0:	1a e0       	ldi	r17, 0x0A	; 10
    89c2:	d8 01       	movw	r26, r16
    89c4:	9e 01       	movw	r18, r28
    89c6:	40 e0       	ldi	r20, 0x00	; 0
    89c8:	50 e0       	ldi	r21, 0x00	; 0
    89ca:	ca 01       	movw	r24, r20
    89cc:	8d 54       	subi	r24, 0x4D	; 77
    89ce:	95 4f       	sbci	r25, 0xF5	; 245
    89d0:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    89d2:	fc 01       	movw	r30, r24
    89d4:	87 85       	ldd	r24, Z+15	; 0x0f
    89d6:	88 23       	and	r24, r24
    89d8:	91 f0       	breq	.+36     	; 0x89fe <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    89da:	66 85       	ldd	r22, Z+14	; 0x0e
    89dc:	99 27       	eor	r25, r25
    89de:	87 fd       	sbrc	r24, 7
    89e0:	90 95       	com	r25
    89e2:	86 0f       	add	r24, r22
    89e4:	91 1d       	adc	r25, r1
    89e6:	8f 3f       	cpi	r24, 0xFF	; 255
    89e8:	91 05       	cpc	r25, r1
    89ea:	19 f0       	breq	.+6      	; 0x89f2 <ProcessMusic+0x54>
    89ec:	14 f0       	brlt	.+4      	; 0x89f2 <ProcessMusic+0x54>
    89ee:	8f ef       	ldi	r24, 0xFF	; 255
    89f0:	90 e0       	ldi	r25, 0x00	; 0
    89f2:	97 ff       	sbrs	r25, 7
    89f4:	02 c0       	rjmp	.+4      	; 0x89fa <ProcessMusic+0x5c>
    89f6:	80 e0       	ldi	r24, 0x00	; 0
    89f8:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    89fa:	f6 01       	movw	r30, r12
    89fc:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    89fe:	f9 01       	movw	r30, r18
    8a00:	f0 80       	ld	r15, Z
    8a02:	f3 fe       	sbrs	r15, 3
    8a04:	2a c0       	rjmp	.+84     	; 0x8a5a <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    8a06:	65 81       	ldd	r22, Z+5	; 0x05
    8a08:	76 81       	ldd	r23, Z+6	; 0x06
    8a0a:	11 96       	adiw	r26, 0x01	; 1
    8a0c:	8d 91       	ld	r24, X+
    8a0e:	9c 91       	ld	r25, X
    8a10:	12 97       	sbiw	r26, 0x02	; 2
    8a12:	86 0f       	add	r24, r22
    8a14:	97 1f       	adc	r25, r23
    8a16:	12 96       	adiw	r26, 0x02	; 2
    8a18:	9c 93       	st	X, r25
    8a1a:	8e 93       	st	-X, r24
    8a1c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8a1e:	f6 01       	movw	r30, r12
    8a20:	e7 80       	ldd	r14, Z+7	; 0x07
    8a22:	ee 2d       	mov	r30, r14
    8a24:	f0 e0       	ldi	r31, 0x00	; 0
    8a26:	ee 0f       	add	r30, r30
    8a28:	ff 1f       	adc	r31, r31
    8a2a:	e8 5f       	subi	r30, 0xF8	; 248
    8a2c:	f0 47       	sbci	r31, 0x70	; 112
    8a2e:	c5 90       	lpm	r12, Z+
    8a30:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8a32:	16 16       	cp	r1, r22
    8a34:	17 06       	cpc	r1, r23
    8a36:	24 f4       	brge	.+8      	; 0x8a40 <ProcessMusic+0xa2>
    8a38:	8c 15       	cp	r24, r12
    8a3a:	9d 05       	cpc	r25, r13
    8a3c:	30 f4       	brcc	.+12     	; 0x8a4a <ProcessMusic+0xac>
    8a3e:	0d c0       	rjmp	.+26     	; 0x8a5a <ProcessMusic+0xbc>
    8a40:	67 2b       	or	r22, r23
    8a42:	59 f0       	breq	.+22     	; 0x8a5a <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8a44:	c8 16       	cp	r12, r24
    8a46:	d9 06       	cpc	r13, r25
    8a48:	40 f0       	brcs	.+16     	; 0x8a5a <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    8a4a:	12 96       	adiw	r26, 0x02	; 2
    8a4c:	dc 92       	st	X, r13
    8a4e:	ce 92       	st	-X, r12
    8a50:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8a52:	8f 2d       	mov	r24, r15
    8a54:	87 7f       	andi	r24, 0xF7	; 247
    8a56:	f9 01       	movw	r30, r18
    8a58:	80 83       	st	Z, r24
    8a5a:	49 5e       	subi	r20, 0xE9	; 233
    8a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    8a5e:	29 5e       	subi	r18, 0xE9	; 233
    8a60:	3f 4f       	sbci	r19, 0xFF	; 255
    8a62:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8a64:	4c 35       	cpi	r20, 0x5C	; 92
    8a66:	51 05       	cpc	r21, r1
    8a68:	09 f0       	breq	.+2      	; 0x8a6c <ProcessMusic+0xce>
    8a6a:	af cf       	rjmp	.-162    	; 0x89ca <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8a6c:	80 91 02 0a 	lds	r24, 0x0A02
    8a70:	88 23       	and	r24, r24
    8a72:	09 f4       	brne	.+2      	; 0x8a76 <ProcessMusic+0xd8>
    8a74:	cc c0       	rjmp	.+408    	; 0x8c0e <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8a76:	57 e1       	ldi	r21, 0x17	; 23
    8a78:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8a7a:	80 91 0f 0b 	lds	r24, 0x0B0F
    8a7e:	90 91 10 0b 	lds	r25, 0x0B10
    8a82:	20 91 15 0b 	lds	r18, 0x0B15
    8a86:	30 91 16 0b 	lds	r19, 0x0B16
    8a8a:	82 17       	cp	r24, r18
    8a8c:	93 07       	cpc	r25, r19
    8a8e:	09 f0       	breq	.+2      	; 0x8a92 <ProcessMusic+0xf4>
    8a90:	b9 c0       	rjmp	.+370    	; 0x8c04 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    8a92:	20 91 18 0b 	lds	r18, 0x0B18
    8a96:	30 91 19 0b 	lds	r19, 0x0B19
    8a9a:	b9 01       	movw	r22, r18
    8a9c:	6f 5f       	subi	r22, 0xFF	; 255
    8a9e:	7f 4f       	sbci	r23, 0xFF	; 255
    8aa0:	70 93 19 0b 	sts	0x0B19, r23
    8aa4:	60 93 18 0b 	sts	0x0B18, r22
    8aa8:	f9 01       	movw	r30, r18
    8aaa:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8aac:	4f 3f       	cpi	r20, 0xFF	; 255
    8aae:	79 f5       	brne	.+94     	; 0x8b0e <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8ab0:	a9 01       	movw	r20, r18
    8ab2:	4e 5f       	subi	r20, 0xFE	; 254
    8ab4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ab6:	50 93 19 0b 	sts	0x0B19, r21
    8aba:	40 93 18 0b 	sts	0x0B18, r20
    8abe:	fb 01       	movw	r30, r22
    8ac0:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8ac2:	6f 32       	cpi	r22, 0x2F	; 47
    8ac4:	19 f4       	brne	.+6      	; 0x8acc <ProcessMusic+0x12e>
						playSong=false;
    8ac6:	10 92 02 0a 	sts	0x0A02, r1
						break;	
    8aca:	9c c0       	rjmp	.+312    	; 0x8c04 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8acc:	66 30       	cpi	r22, 0x06	; 6
    8ace:	09 f0       	breq	.+2      	; 0x8ad2 <ProcessMusic+0x134>
    8ad0:	8c c0       	rjmp	.+280    	; 0x8bea <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    8ad2:	fa 01       	movw	r30, r20
    8ad4:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8ad6:	c9 01       	movw	r24, r18
    8ad8:	04 96       	adiw	r24, 0x04	; 4
    8ada:	90 93 19 0b 	sts	0x0B19, r25
    8ade:	80 93 18 0b 	sts	0x0B18, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8ae2:	f9 01       	movw	r30, r18
    8ae4:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8ae6:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8ae8:	e3 35       	cpi	r30, 0x53	; 83
    8aea:	29 f4       	brne	.+10     	; 0x8af6 <ProcessMusic+0x158>
							loopStart=songPos;
    8aec:	90 93 1b 0b 	sts	0x0B1B, r25
    8af0:	80 93 1a 0b 	sts	0x0B1A, r24
    8af4:	7a c0       	rjmp	.+244    	; 0x8bea <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    8af6:	e5 34       	cpi	r30, 0x45	; 69
    8af8:	09 f0       	breq	.+2      	; 0x8afc <ProcessMusic+0x15e>
    8afa:	77 c0       	rjmp	.+238    	; 0x8bea <ProcessMusic+0x24c>
							songPos=loopStart;
    8afc:	80 91 1a 0b 	lds	r24, 0x0B1A
    8b00:	90 91 1b 0b 	lds	r25, 0x0B1B
    8b04:	90 93 19 0b 	sts	0x0B19, r25
    8b08:	80 93 18 0b 	sts	0x0B18, r24
    8b0c:	6e c0       	rjmp	.+220    	; 0x8bea <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8b0e:	47 fd       	sbrc	r20, 7
    8b10:	40 93 13 0b 	sts	0x0B13, r20
					channel=lastStatus&0x0f;
    8b14:	90 91 13 0b 	lds	r25, 0x0B13
    8b18:	89 2f       	mov	r24, r25
    8b1a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8b1c:	47 ff       	sbrs	r20, 7
    8b1e:	08 c0       	rjmp	.+16     	; 0x8b30 <ProcessMusic+0x192>
    8b20:	2e 5f       	subi	r18, 0xFE	; 254
    8b22:	3f 4f       	sbci	r19, 0xFF	; 255
    8b24:	30 93 19 0b 	sts	0x0B19, r19
    8b28:	20 93 18 0b 	sts	0x0B18, r18
    8b2c:	fb 01       	movw	r30, r22
    8b2e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8b30:	90 7f       	andi	r25, 0xF0	; 240
    8b32:	90 3b       	cpi	r25, 0xB0	; 176
    8b34:	e1 f0       	breq	.+56     	; 0x8b6e <ProcessMusic+0x1d0>
    8b36:	90 3c       	cpi	r25, 0xC0	; 192
    8b38:	09 f4       	brne	.+2      	; 0x8b3c <ProcessMusic+0x19e>
    8b3a:	51 c0       	rjmp	.+162    	; 0x8bde <ProcessMusic+0x240>
    8b3c:	90 39       	cpi	r25, 0x90	; 144
    8b3e:	09 f0       	breq	.+2      	; 0x8b42 <ProcessMusic+0x1a4>
    8b40:	54 c0       	rjmp	.+168    	; 0x8bea <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8b42:	e0 91 18 0b 	lds	r30, 0x0B18
    8b46:	f0 91 19 0b 	lds	r31, 0x0B19
    8b4a:	9f 01       	movw	r18, r30
    8b4c:	2f 5f       	subi	r18, 0xFF	; 255
    8b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    8b50:	30 93 19 0b 	sts	0x0B19, r19
    8b54:	20 93 18 0b 	sts	0x0B18, r18
    8b58:	24 91       	lpm	r18, Z
    8b5a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8b5c:	f8 9e       	mul	r15, r24
    8b5e:	f0 01       	movw	r30, r0
    8b60:	11 24       	eor	r1, r1
    8b62:	ed 54       	subi	r30, 0x4D	; 77
    8b64:	f5 4f       	sbci	r31, 0xF5	; 245
    8b66:	60 89       	ldd	r22, Z+16	; 0x10
    8b68:	0e 94 8f 44 	call	0x891e	; 0x891e <TriggerNote>
    8b6c:	3e c0       	rjmp	.+124    	; 0x8bea <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8b6e:	e0 91 18 0b 	lds	r30, 0x0B18
    8b72:	f0 91 19 0b 	lds	r31, 0x0B19
    8b76:	9f 01       	movw	r18, r30
    8b78:	2f 5f       	subi	r18, 0xFF	; 255
    8b7a:	3f 4f       	sbci	r19, 0xFF	; 255
    8b7c:	30 93 19 0b 	sts	0x0B19, r19
    8b80:	20 93 18 0b 	sts	0x0B18, r18
    8b84:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8b86:	47 30       	cpi	r20, 0x07	; 7
    8b88:	49 f4       	brne	.+18     	; 0x8b9c <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8b8a:	f8 9e       	mul	r15, r24
    8b8c:	d0 01       	movw	r26, r0
    8b8e:	11 24       	eor	r1, r1
    8b90:	ad 54       	subi	r26, 0x4D	; 77
    8b92:	b5 4f       	sbci	r27, 0xF5	; 245
    8b94:	ee 0f       	add	r30, r30
    8b96:	1c 96       	adiw	r26, 0x0c	; 12
    8b98:	ec 93       	st	X, r30
    8b9a:	27 c0       	rjmp	.+78     	; 0x8bea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8b9c:	4b 30       	cpi	r20, 0x0B	; 11
    8b9e:	49 f4       	brne	.+18     	; 0x8bb2 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8ba0:	f8 9e       	mul	r15, r24
    8ba2:	d0 01       	movw	r26, r0
    8ba4:	11 24       	eor	r1, r1
    8ba6:	ad 54       	subi	r26, 0x4D	; 77
    8ba8:	b5 4f       	sbci	r27, 0xF5	; 245
    8baa:	ee 0f       	add	r30, r30
    8bac:	13 96       	adiw	r26, 0x03	; 3
    8bae:	ec 93       	st	X, r30
    8bb0:	1c c0       	rjmp	.+56     	; 0x8bea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    8bb2:	4c 35       	cpi	r20, 0x5C	; 92
    8bb4:	49 f4       	brne	.+18     	; 0x8bc8 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    8bb6:	f8 9e       	mul	r15, r24
    8bb8:	d0 01       	movw	r26, r0
    8bba:	11 24       	eor	r1, r1
    8bbc:	ad 54       	subi	r26, 0x4D	; 77
    8bbe:	b5 4f       	sbci	r27, 0xF5	; 245
    8bc0:	ee 0f       	add	r30, r30
    8bc2:	1a 96       	adiw	r26, 0x0a	; 10
    8bc4:	ec 93       	st	X, r30
    8bc6:	11 c0       	rjmp	.+34     	; 0x8bea <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8bc8:	44 36       	cpi	r20, 0x64	; 100
    8bca:	79 f4       	brne	.+30     	; 0x8bea <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8bcc:	f8 9e       	mul	r15, r24
    8bce:	d0 01       	movw	r26, r0
    8bd0:	11 24       	eor	r1, r1
    8bd2:	ad 54       	subi	r26, 0x4D	; 77
    8bd4:	b5 4f       	sbci	r27, 0xF5	; 245
    8bd6:	ee 0f       	add	r30, r30
    8bd8:	1b 96       	adiw	r26, 0x0b	; 11
    8bda:	ec 93       	st	X, r30
    8bdc:	06 c0       	rjmp	.+12     	; 0x8bea <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8bde:	f8 9e       	mul	r15, r24
    8be0:	f0 01       	movw	r30, r0
    8be2:	11 24       	eor	r1, r1
    8be4:	ed 54       	subi	r30, 0x4D	; 77
    8be6:	f5 4f       	sbci	r31, 0xF5	; 245
    8be8:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8bea:	88 e1       	ldi	r24, 0x18	; 24
    8bec:	9b e0       	ldi	r25, 0x0B	; 11
    8bee:	0e 94 0a 44 	call	0x8814	; 0x8814 <ReadVarLen>
    8bf2:	90 93 16 0b 	sts	0x0B16, r25
    8bf6:	80 93 15 0b 	sts	0x0B15, r24
				currDeltaTime=0;
    8bfa:	10 92 10 0b 	sts	0x0B10, r1
    8bfe:	10 92 0f 0b 	sts	0x0B0F, r1
    8c02:	3b cf       	rjmp	.-394    	; 0x8a7a <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8c04:	01 96       	adiw	r24, 0x01	; 1
    8c06:	90 93 10 0b 	sts	0x0B10, r25
    8c0a:	80 93 0f 0b 	sts	0x0B0F, r24
    8c0e:	9c eb       	ldi	r25, 0xBC	; 188
    8c10:	a9 2e       	mov	r10, r25
    8c12:	9a e0       	ldi	r25, 0x0A	; 10
    8c14:	b9 2e       	mov	r11, r25
    8c16:	26 ec       	ldi	r18, 0xC6	; 198
    8c18:	c2 2e       	mov	r12, r18
    8c1a:	2a e0       	ldi	r18, 0x0A	; 10
    8c1c:	d2 2e       	mov	r13, r18
    8c1e:	37 ec       	ldi	r19, 0xC7	; 199
    8c20:	e3 2e       	mov	r14, r19
    8c22:	3a e0       	ldi	r19, 0x0A	; 10
    8c24:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8c26:	66 24       	eor	r6, r6
    8c28:	6a 94       	dec	r6
    8c2a:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8c2c:	88 81       	ld	r24, Y
    8c2e:	85 ff       	sbrs	r24, 5
    8c30:	42 c0       	rjmp	.+132    	; 0x8cb6 <ProcessMusic+0x318>
    8c32:	2d 89       	ldd	r18, Y+21	; 0x15
    8c34:	3e 89       	ldd	r19, Y+22	; 0x16
    8c36:	23 2b       	or	r18, r19
    8c38:	09 f4       	brne	.+2      	; 0x8c3c <ProcessMusic+0x29e>
    8c3a:	3d c0       	rjmp	.+122    	; 0x8cb6 <ProcessMusic+0x318>
    8c3c:	86 fd       	sbrc	r24, 6
    8c3e:	3b c0       	rjmp	.+118    	; 0x8cb6 <ProcessMusic+0x318>
    8c40:	47 01       	movw	r8, r14
    8c42:	f2 e0       	ldi	r31, 0x02	; 2
    8c44:	8f 1a       	sub	r8, r31
    8c46:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    8c48:	d6 01       	movw	r26, r12
    8c4a:	9c 91       	ld	r25, X
    8c4c:	f4 01       	movw	r30, r8
    8c4e:	80 81       	ld	r24, Z
    8c50:	98 13       	cpse	r25, r24
    8c52:	2e c0       	rjmp	.+92     	; 0x8cb0 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8c54:	ed 89       	ldd	r30, Y+21	; 0x15
    8c56:	fe 89       	ldd	r31, Y+22	; 0x16
    8c58:	bf 01       	movw	r22, r30
    8c5a:	6f 5f       	subi	r22, 0xFF	; 255
    8c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    8c5e:	7e 8b       	std	Y+22, r23	; 0x16
    8c60:	6d 8b       	std	Y+21, r22	; 0x15
    8c62:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8c64:	8f 3f       	cpi	r24, 0xFF	; 255
    8c66:	31 f4       	brne	.+12     	; 0x8c74 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8c68:	88 81       	ld	r24, Y
    8c6a:	8f 77       	andi	r24, 0x7F	; 127
    8c6c:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8c6e:	1e 8a       	std	Y+22, r1	; 0x16
    8c70:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8c72:	1e c0       	rjmp	.+60     	; 0x8cb0 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8c74:	9f 01       	movw	r18, r30
    8c76:	2e 5f       	subi	r18, 0xFE	; 254
    8c78:	3f 4f       	sbci	r19, 0xFF	; 255
    8c7a:	3e 8b       	std	Y+22, r19	; 0x16
    8c7c:	2d 8b       	std	Y+21, r18	; 0x15
    8c7e:	fb 01       	movw	r30, r22
    8c80:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8c82:	e8 2f       	mov	r30, r24
    8c84:	f0 e0       	ldi	r31, 0x00	; 0
    8c86:	ee 0f       	add	r30, r30
    8c88:	ff 1f       	adc	r31, r31
    8c8a:	e2 54       	subi	r30, 0x42	; 66
    8c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    8c8e:	25 91       	lpm	r18, Z+
    8c90:	34 91       	lpm	r19, Z
    8c92:	ce 01       	movw	r24, r28
    8c94:	f9 01       	movw	r30, r18
    8c96:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8c98:	ed 89       	ldd	r30, Y+21	; 0x15
    8c9a:	fe 89       	ldd	r31, Y+22	; 0x16
    8c9c:	cf 01       	movw	r24, r30
    8c9e:	01 96       	adiw	r24, 0x01	; 1
    8ca0:	9e 8b       	std	Y+22, r25	; 0x16
    8ca2:	8d 8b       	std	Y+21, r24	; 0x15
    8ca4:	e4 91       	lpm	r30, Z
    8ca6:	d4 01       	movw	r26, r8
    8ca8:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8caa:	f6 01       	movw	r30, r12
    8cac:	10 82       	st	Z, r1
    8cae:	cc cf       	rjmp	.-104    	; 0x8c48 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8cb0:	9f 5f       	subi	r25, 0xFF	; 255
    8cb2:	d6 01       	movw	r26, r12
    8cb4:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8cb6:	98 81       	ld	r25, Y
    8cb8:	95 ff       	sbrs	r25, 5
    8cba:	6c c0       	rjmp	.+216    	; 0x8d94 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8cbc:	f7 01       	movw	r30, r14
    8cbe:	80 81       	ld	r24, Z
    8cc0:	8f 3f       	cpi	r24, 0xFF	; 255
    8cc2:	11 f0       	breq	.+4      	; 0x8cc8 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8cc4:	8f 5f       	subi	r24, 0xFF	; 255
    8cc6:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8cc8:	97 fd       	sbrc	r25, 7
    8cca:	04 c0       	rjmp	.+8      	; 0x8cd4 <ProcessMusic+0x336>
    8ccc:	f7 01       	movw	r30, r14
    8cce:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8cd0:	90 81       	ld	r25, Z
    8cd2:	01 c0       	rjmp	.+2      	; 0x8cd6 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8cd4:	9f ef       	ldi	r25, 0xFF	; 255
    8cd6:	f7 01       	movw	r30, r14
    8cd8:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8cda:	80 81       	ld	r24, Z
    8cdc:	88 23       	and	r24, r24
    8cde:	09 f4       	brne	.+2      	; 0x8ce2 <ProcessMusic+0x344>
    8ce0:	4e c0       	rjmp	.+156    	; 0x8d7e <ProcessMusic+0x3e0>
    8ce2:	31 96       	adiw	r30, 0x01	; 1
    8ce4:	50 81       	ld	r21, Z
    8ce6:	55 23       	and	r21, r21
    8ce8:	09 f4       	brne	.+2      	; 0x8cec <ProcessMusic+0x34e>
    8cea:	49 c0       	rjmp	.+146    	; 0x8d7e <ProcessMusic+0x3e0>
    8cec:	99 23       	and	r25, r25
    8cee:	09 f4       	brne	.+2      	; 0x8cf2 <ProcessMusic+0x354>
    8cf0:	46 c0       	rjmp	.+140    	; 0x8d7e <ProcessMusic+0x3e0>
    8cf2:	40 91 14 0b 	lds	r20, 0x0B14
    8cf6:	44 23       	and	r20, r20
    8cf8:	09 f4       	brne	.+2      	; 0x8cfc <ProcessMusic+0x35e>
    8cfa:	41 c0       	rjmp	.+130    	; 0x8d7e <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8cfc:	89 9f       	mul	r24, r25
    8cfe:	c0 01       	movw	r24, r0
    8d00:	11 24       	eor	r1, r1
    8d02:	93 95       	inc	r25
				uVol>>=8;
    8d04:	89 2f       	mov	r24, r25
    8d06:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8d08:	58 9f       	mul	r21, r24
    8d0a:	90 01       	movw	r18, r0
    8d0c:	59 9f       	mul	r21, r25
    8d0e:	30 0d       	add	r19, r0
    8d10:	11 24       	eor	r1, r1
    8d12:	c9 01       	movw	r24, r18
    8d14:	93 95       	inc	r25
				uVol>>=8;
    8d16:	89 2f       	mov	r24, r25
    8d18:	99 27       	eor	r25, r25
    8d1a:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8d1c:	50 81       	ld	r21, Z
    8d1e:	58 9f       	mul	r21, r24
    8d20:	90 01       	movw	r18, r0
    8d22:	59 9f       	mul	r21, r25
    8d24:	30 0d       	add	r19, r0
    8d26:	11 24       	eor	r1, r1
    8d28:	33 95       	inc	r19
					uVol>>=8;
    8d2a:	23 2f       	mov	r18, r19
    8d2c:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8d2e:	42 9f       	mul	r20, r18
    8d30:	c0 01       	movw	r24, r0
    8d32:	43 9f       	mul	r20, r19
    8d34:	90 0d       	add	r25, r0
    8d36:	11 24       	eor	r1, r1
    8d38:	93 95       	inc	r25
				uVol>>=8;
    8d3a:	89 2f       	mov	r24, r25
    8d3c:	99 27       	eor	r25, r25
    8d3e:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8d40:	20 81       	ld	r18, Z
    8d42:	22 23       	and	r18, r18
    8d44:	f1 f0       	breq	.+60     	; 0x8d82 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8d46:	d5 01       	movw	r26, r10
    8d48:	ec 91       	ld	r30, X
    8d4a:	f0 e0       	ldi	r31, 0x00	; 0
    8d4c:	e0 50       	subi	r30, 0x00	; 0
    8d4e:	ff 46       	sbci	r31, 0x6F	; 111
    8d50:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8d52:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8d54:	2e 9f       	mul	r18, r30
    8d56:	f0 01       	movw	r30, r0
    8d58:	11 24       	eor	r1, r1
    8d5a:	f3 95       	inc	r31
					tVol>>=8;
    8d5c:	ef 2f       	mov	r30, r31
    8d5e:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8d60:	a3 01       	movw	r20, r6
    8d62:	4e 1b       	sub	r20, r30
    8d64:	5f 0b       	sbc	r21, r31
    8d66:	48 9f       	mul	r20, r24
    8d68:	90 01       	movw	r18, r0
    8d6a:	49 9f       	mul	r20, r25
    8d6c:	30 0d       	add	r19, r0
    8d6e:	58 9f       	mul	r21, r24
    8d70:	30 0d       	add	r19, r0
    8d72:	11 24       	eor	r1, r1
    8d74:	c9 01       	movw	r24, r18
    8d76:	93 95       	inc	r25
					uVol>>=8;
    8d78:	89 2f       	mov	r24, r25
    8d7a:	99 27       	eor	r25, r25
    8d7c:	02 c0       	rjmp	.+4      	; 0x8d82 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8d7e:	80 e0       	ldi	r24, 0x00	; 0
    8d80:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8d82:	f5 01       	movw	r30, r10
    8d84:	30 81       	ld	r19, Z
    8d86:	f7 01       	movw	r30, r14
    8d88:	39 97       	sbiw	r30, 0x09	; 9
    8d8a:	20 81       	ld	r18, Z
    8d8c:	23 0f       	add	r18, r19
    8d8e:	d5 01       	movw	r26, r10
    8d90:	2c 93       	st	X, r18
    8d92:	02 c0       	rjmp	.+4      	; 0x8d98 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8d94:	80 e0       	ldi	r24, 0x00	; 0
    8d96:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8d98:	f8 01       	movw	r30, r16
    8d9a:	80 83       	st	Z, r24
    8d9c:	67 96       	adiw	r28, 0x17	; 23
    8d9e:	0a 5f       	subi	r16, 0xFA	; 250
    8da0:	1f 4f       	sbci	r17, 0xFF	; 255
    8da2:	f7 e1       	ldi	r31, 0x17	; 23
    8da4:	af 0e       	add	r10, r31
    8da6:	b1 1c       	adc	r11, r1
    8da8:	87 e1       	ldi	r24, 0x17	; 23
    8daa:	c8 0e       	add	r12, r24
    8dac:	d1 1c       	adc	r13, r1
    8dae:	97 e1       	ldi	r25, 0x17	; 23
    8db0:	e9 0e       	add	r14, r25
    8db2:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8db4:	ab e0       	ldi	r26, 0x0B	; 11
    8db6:	cf 30       	cpi	r28, 0x0F	; 15
    8db8:	da 07       	cpc	r29, r26
    8dba:	09 f0       	breq	.+2      	; 0x8dbe <ProcessMusic+0x420>
    8dbc:	37 cf       	rjmp	.-402    	; 0x8c2c <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8dbe:	df 91       	pop	r29
    8dc0:	cf 91       	pop	r28
    8dc2:	1f 91       	pop	r17
    8dc4:	0f 91       	pop	r16
    8dc6:	ff 90       	pop	r15
    8dc8:	ef 90       	pop	r14
    8dca:	df 90       	pop	r13
    8dcc:	cf 90       	pop	r12
    8dce:	bf 90       	pop	r11
    8dd0:	af 90       	pop	r10
    8dd2:	9f 90       	pop	r9
    8dd4:	8f 90       	pop	r8
    8dd6:	7f 90       	pop	r7
    8dd8:	6f 90       	pop	r6
    8dda:	08 95       	ret

00008ddc <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8ddc:	80 93 14 0b 	sts	0x0B14, r24
    8de0:	08 95       	ret

00008de2 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8de2:	99 27       	eor	r25, r25
	clr r23
    8de4:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8de6:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8de8:	09 f4       	brne	.+2      	; 0x8dec <set_note_waves>
		ret
    8dea:	08 95       	ret

00008dec <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8dec:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8dee:	ff e8       	ldi	r31, 0x8F	; 143
	lsl r22
    8df0:	66 0f       	add	r22, r22
	rol r23
    8df2:	77 1f       	adc	r23, r23
	add ZL,r22
    8df4:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8df6:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8df8:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8dfa:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8dfc:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    8dfe:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8e00:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8e02:	28 9f       	mul	r18, r24
	add ZL,r0
    8e04:	e0 0d       	add	r30, r0
	adc ZH,r1
    8e06:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8e08:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8e0a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8e0c:	11 24       	eor	r1, r1
	

	ret
    8e0e:	08 95       	ret

00008e10 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8e10:	99 27       	eor	r25, r25
	clr r23
    8e12:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8e14:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    8e16:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8e18:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8e1a:	28 9f       	mul	r18, r24
	add ZL,r0
    8e1c:	e0 0d       	add	r30, r0
	adc ZH,r1
    8e1e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8e20:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8e22:	31 f4       	brne	.+12     	; 0x8e30 <smw1>
	lds r22,tr4_params
    8e24:	60 91 17 0a 	lds	r22, 0x0A17
	andi r22,0xfe;
    8e28:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8e2a:	60 93 17 0a 	sts	0x0A17, r22
	rjmp esmw	
    8e2e:	0b c0       	rjmp	.+22     	; 0x8e46 <esmw>

00008e30 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8e30:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8e32:	31 f4       	brne	.+12     	; 0x8e40 <smw2>
	lds r22,tr4_params
    8e34:	60 91 17 0a 	lds	r22, 0x0A17
	ori r22,0xfe;
    8e38:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8e3a:	60 93 17 0a 	sts	0x0A17, r22
	rjmp esmw
    8e3e:	03 c0       	rjmp	.+6      	; 0x8e46 <esmw>

00008e40 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8e40:	71 e9       	ldi	r23, 0x91	; 145
	add r23,r22
    8e42:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8e44:	75 83       	std	Z+5, r23	; 0x05

00008e46 <esmw>:

esmw:
	clr r1	
    8e46:	11 24       	eor	r1, r1
	ret
    8e48:	08 95       	ret
	...

00008f00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8f00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8f02:	80 93 03 0a 	sts	0x0A03, r24
	ret
    8f06:	08 95       	ret

00008f08 <steptable>:
    8f08:	22 00       	.word	0x0022	; ????
    8f0a:	24 00       	.word	0x0024	; ????
    8f0c:	26 00       	.word	0x0026	; ????
    8f0e:	28 00       	.word	0x0028	; ????
    8f10:	2b 00       	.word	0x002b	; ????
    8f12:	2d 00       	.word	0x002d	; ????
    8f14:	30 00       	.word	0x0030	; ????
    8f16:	33 00       	.word	0x0033	; ????
    8f18:	36 00       	.word	0x0036	; ????
    8f1a:	39 00       	.word	0x0039	; ????
    8f1c:	3d 00       	.word	0x003d	; ????
    8f1e:	40 00       	.word	0x0040	; ????
    8f20:	44 00       	.word	0x0044	; ????
    8f22:	48 00       	.word	0x0048	; ????
    8f24:	4c 00       	.word	0x004c	; ????
    8f26:	51 00       	.word	0x0051	; ????
    8f28:	56 00       	.word	0x0056	; ????
    8f2a:	5b 00       	.word	0x005b	; ????
    8f2c:	60 00       	.word	0x0060	; ????
    8f2e:	66 00       	.word	0x0066	; ????
    8f30:	6c 00       	.word	0x006c	; ????
    8f32:	73 00       	.word	0x0073	; ????
    8f34:	79 00       	.word	0x0079	; ????
    8f36:	81 00       	.word	0x0081	; ????
    8f38:	88 00       	.word	0x0088	; ????
    8f3a:	90 00       	.word	0x0090	; ????
    8f3c:	99 00       	.word	0x0099	; ????
    8f3e:	a2 00       	.word	0x00a2	; ????
    8f40:	ac 00       	.word	0x00ac	; ????
    8f42:	b6 00       	.word	0x00b6	; ????
    8f44:	c1 00       	.word	0x00c1	; ????
    8f46:	cc 00       	.word	0x00cc	; ????
    8f48:	d8 00       	.word	0x00d8	; ????
    8f4a:	e5 00       	.word	0x00e5	; ????
    8f4c:	f3 00       	.word	0x00f3	; ????
    8f4e:	01 01       	movw	r0, r2
    8f50:	10 01       	movw	r2, r0
    8f52:	21 01       	movw	r4, r2
    8f54:	32 01       	movw	r6, r4
    8f56:	44 01       	movw	r8, r8
    8f58:	57 01       	movw	r10, r14
    8f5a:	6c 01       	movw	r12, r24
    8f5c:	81 01       	movw	r16, r2
    8f5e:	98 01       	movw	r18, r16
    8f60:	b0 01       	movw	r22, r0
    8f62:	ca 01       	movw	r24, r20
    8f64:	e5 01       	movw	r28, r10
    8f66:	02 02       	muls	r16, r18
    8f68:	21 02       	muls	r18, r17
    8f6a:	41 02       	muls	r20, r17
    8f6c:	64 02       	muls	r22, r20
    8f6e:	88 02       	muls	r24, r24
    8f70:	ae 02       	muls	r26, r30
    8f72:	d7 02       	muls	r29, r23
    8f74:	03 03       	mulsu	r16, r19
    8f76:	30 03       	mulsu	r19, r16
    8f78:	61 03       	mulsu	r22, r17
    8f7a:	94 03       	fmuls	r17, r20
    8f7c:	cb 03       	fmulsu	r20, r19
    8f7e:	05 04       	cpc	r0, r5
    8f80:	42 04       	cpc	r4, r2
    8f82:	83 04       	cpc	r8, r3
    8f84:	c7 04       	cpc	r12, r7
    8f86:	10 05       	cpc	r17, r0
    8f88:	5d 05       	cpc	r21, r13
    8f8a:	af 05       	cpc	r26, r15
    8f8c:	05 06       	cpc	r0, r21
    8f8e:	61 06       	cpc	r6, r17
    8f90:	c2 06       	cpc	r12, r18
    8f92:	29 07       	cpc	r18, r25
    8f94:	96 07       	cpc	r25, r22
    8f96:	09 08       	sbc	r0, r9
    8f98:	83 08       	sbc	r8, r3
    8f9a:	05 09       	sbc	r16, r5
    8f9c:	8e 09       	sbc	r24, r14
    8f9e:	20 0a       	sbc	r2, r16
    8fa0:	ba 0a       	sbc	r11, r26
    8fa2:	5d 0b       	sbc	r21, r29
    8fa4:	0a 0c       	add	r0, r10
    8fa6:	c1 0c       	add	r12, r1
    8fa8:	84 0d       	add	r24, r4
    8faa:	51 0e       	add	r5, r17
    8fac:	2b 0f       	add	r18, r27
    8fae:	12 10       	cpse	r1, r2
    8fb0:	07 11       	cpse	r16, r7
    8fb2:	0a 12       	cpse	r0, r26
    8fb4:	1d 13       	cpse	r17, r29
    8fb6:	40 14       	cp	r4, r0
    8fb8:	74 15       	cp	r23, r4
    8fba:	ba 16       	cp	r11, r26
    8fbc:	14 18       	sub	r1, r4
    8fbe:	83 19       	sub	r24, r3
    8fc0:	07 1b       	sub	r16, r23
    8fc2:	a3 1c       	adc	r10, r3
    8fc4:	57 1e       	adc	r5, r23
    8fc6:	24 20       	and	r2, r4
    8fc8:	0e 22       	and	r0, r30
    8fca:	14 24       	eor	r1, r4
    8fcc:	39 26       	eor	r3, r25
    8fce:	7f 28       	or	r7, r15
    8fd0:	e8 2a       	or	r14, r24
    8fd2:	75 2d       	mov	r23, r5
    8fd4:	29 30       	cpi	r18, 0x09	; 9
    8fd6:	06 33       	cpi	r16, 0x36	; 54
    8fd8:	0f 36       	cpi	r16, 0x6F	; 111
    8fda:	45 39       	cpi	r20, 0x95	; 149
    8fdc:	ad 3c       	cpi	r26, 0xCD	; 205
    8fde:	49 40       	sbci	r20, 0x09	; 9
    8fe0:	1b 44       	sbci	r17, 0x4B	; 75
    8fe2:	28 48       	sbci	r18, 0x88	; 136
    8fe4:	73 4c       	sbci	r23, 0xC3	; 195
    8fe6:	fe 50       	subi	r31, 0x0E	; 14
    8fe8:	cf 55       	subi	r28, 0x5F	; 95
    8fea:	ea 5a       	subi	r30, 0xAA	; 170
    8fec:	51 60       	ori	r21, 0x01	; 1
    8fee:	0c 66       	ori	r16, 0x6C	; 108
    8ff0:	1d 6c       	ori	r17, 0xCD	; 205
    8ff2:	8b 72       	andi	r24, 0x2B	; 43
    8ff4:	5a 79       	andi	r21, 0x9A	; 154
    8ff6:	92 80       	ldd	r9, Z+2	; 0x02
    8ff8:	37 88       	ldd	r3, Z+23	; 0x17
    8ffa:	50 90 e5 98 	lds	r5, 0x98E5
    8ffe:	fd a1       	ldd	r31, Y+37	; 0x25
    9000:	9f ab       	std	Y+55, r25	; 0x37
    9002:	d3 b5       	in	r29, 0x23	; 35
    9004:	a3 c0       	rjmp	.+326    	; 0x914c <waves+0x4c>
	...

00009100 <waves>:
    9100:	00 03       	mulsu	r16, r16
    9102:	06 09       	sbc	r16, r6
    9104:	0c 10       	cpse	r0, r12
    9106:	13 16       	cp	r1, r19
    9108:	19 1c       	adc	r1, r9
    910a:	1f 22       	and	r1, r31
    910c:	25 28       	or	r2, r5
    910e:	2b 2e       	mov	r2, r27
    9110:	31 33       	cpi	r19, 0x31	; 49
    9112:	36 39       	cpi	r19, 0x96	; 150
    9114:	3c 3f       	cpi	r19, 0xFC	; 252
    9116:	41 44       	sbci	r20, 0x41	; 65
    9118:	47 49       	sbci	r20, 0x97	; 151
    911a:	4c 4e       	sbci	r20, 0xEC	; 236
    911c:	51 53       	subi	r21, 0x31	; 49
    911e:	55 58       	subi	r21, 0x85	; 133
    9120:	5a 5c       	subi	r21, 0xCA	; 202
    9122:	5e 60       	ori	r21, 0x0E	; 14
    9124:	62 64       	ori	r22, 0x42	; 66
    9126:	66 68       	ori	r22, 0x86	; 134
    9128:	6a 6b       	ori	r22, 0xBA	; 186
    912a:	6d 6f       	ori	r22, 0xFD	; 253
    912c:	70 71       	andi	r23, 0x10	; 16
    912e:	73 74       	andi	r23, 0x43	; 67
    9130:	75 76       	andi	r23, 0x65	; 101
    9132:	78 79       	andi	r23, 0x98	; 152
    9134:	7a 7a       	andi	r23, 0xAA	; 170
    9136:	7b 7c       	andi	r23, 0xCB	; 203
    9138:	7d 7d       	andi	r23, 0xDD	; 221
    913a:	7e 7e       	andi	r23, 0xEE	; 238
    913c:	7e 7f       	andi	r23, 0xFE	; 254
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7e 7e       	andi	r23, 0xEE	; 238
    9146:	7e 7d       	andi	r23, 0xDE	; 222
    9148:	7d 7c       	andi	r23, 0xCD	; 205
    914a:	7b 7a       	andi	r23, 0xAB	; 171
    914c:	7a 79       	andi	r23, 0x9A	; 154
    914e:	78 76       	andi	r23, 0x68	; 104
    9150:	75 74       	andi	r23, 0x45	; 69
    9152:	73 71       	andi	r23, 0x13	; 19
    9154:	70 6f       	ori	r23, 0xF0	; 240
    9156:	6d 6b       	ori	r22, 0xBD	; 189
    9158:	6a 68       	ori	r22, 0x8A	; 138
    915a:	66 64       	ori	r22, 0x46	; 70
    915c:	62 60       	ori	r22, 0x02	; 2
    915e:	5e 5c       	subi	r21, 0xCE	; 206
    9160:	5a 58       	subi	r21, 0x8A	; 138
    9162:	55 53       	subi	r21, 0x35	; 53
    9164:	51 4e       	sbci	r21, 0xE1	; 225
    9166:	4c 49       	sbci	r20, 0x9C	; 156
    9168:	47 44       	sbci	r20, 0x47	; 71
    916a:	41 3f       	cpi	r20, 0xF1	; 241
    916c:	3c 39       	cpi	r19, 0x9C	; 156
    916e:	36 33       	cpi	r19, 0x36	; 54
    9170:	31 2e       	mov	r3, r17
    9172:	2b 28       	or	r2, r11
    9174:	25 22       	and	r2, r21
    9176:	1f 1c       	adc	r1, r15
    9178:	19 16       	cp	r1, r25
    917a:	13 10       	cpse	r1, r3
    917c:	0c 09       	sbc	r16, r12
    917e:	06 03       	mulsu	r16, r22
    9180:	00 fd       	sbrc	r16, 0
    9182:	fa f7       	brpl	.-2      	; 0x9182 <waves+0x82>
    9184:	f4 f0       	brlt	.+60     	; 0x91c2 <waves+0xc2>
    9186:	ed ea       	ldi	r30, 0xAD	; 173
    9188:	e7 e4       	ldi	r30, 0x47	; 71
    918a:	e1 de       	rcall	.-574    	; 0x8f4e <steptable+0x46>
    918c:	db d8       	rcall	.-3658   	; 0x8344 <ReadButtons+0x2e>
    918e:	d5 d2       	rcall	.+1450   	; 0x973a <waves+0x63a>
    9190:	cf cd       	rjmp	.-1122   	; 0x8d30 <ProcessMusic+0x392>
    9192:	ca c7       	rjmp	.+3988   	; 0xa128 <LBCopyChars+0x14>
    9194:	c4 c1       	rjmp	.+904    	; 0x951e <waves+0x41e>
    9196:	bf bc       	out	0x2f, r11	; 47
    9198:	b9 b7       	in	r27, 0x39	; 57
    919a:	b4 b2       	in	r11, 0x14	; 20
    919c:	af ad       	ldd	r26, Y+63	; 0x3f
    919e:	ab a8       	ldd	r10, Y+51	; 0x33
    91a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    91a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    91a4:	9e 9c       	mul	r9, r14
    91a6:	9a 98       	cbi	0x13, 2	; 19
    91a8:	96 95       	lsr	r25
    91aa:	93 91       	.word	0x9193	; ????
    91ac:	90 8f       	std	Z+24, r25	; 0x18
    91ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    91b0:	8b 8a       	std	Y+19, r8	; 0x13
    91b2:	88 87       	std	Y+8, r24	; 0x08
    91b4:	86 86       	std	Z+14, r8	; 0x0e
    91b6:	85 84       	ldd	r8, Z+13	; 0x0d
    91b8:	83 83       	std	Z+3, r24	; 0x03
    91ba:	82 82       	std	Z+2, r8	; 0x02
    91bc:	82 81       	ldd	r24, Z+2	; 0x02
    91be:	81 81       	ldd	r24, Z+1	; 0x01
    91c0:	81 81       	ldd	r24, Z+1	; 0x01
    91c2:	81 81       	ldd	r24, Z+1	; 0x01
    91c4:	82 82       	std	Z+2, r8	; 0x02
    91c6:	82 83       	std	Z+2, r24	; 0x02
    91c8:	83 84       	ldd	r8, Z+11	; 0x0b
    91ca:	85 86       	std	Z+13, r8	; 0x0d
    91cc:	86 87       	std	Z+14, r24	; 0x0e
    91ce:	88 8a       	std	Y+16, r8	; 0x10
    91d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    91d2:	8d 8f       	std	Y+29, r24	; 0x1d
    91d4:	90 91 93 95 	lds	r25, 0x9593
    91d8:	96 98       	cbi	0x12, 6	; 18
    91da:	9a 9c       	mul	r9, r10
    91dc:	9e a0       	ldd	r9, Y+38	; 0x26
    91de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    91e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    91e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    91e4:	af b2       	in	r10, 0x1f	; 31
    91e6:	b4 b7       	in	r27, 0x34	; 52
    91e8:	b9 bc       	out	0x29, r11	; 41
    91ea:	bf c1       	rjmp	.+894    	; 0x956a <waves+0x46a>
    91ec:	c4 c7       	rjmp	.+3976   	; 0xa176 <LBPrintStr+0x4a>
    91ee:	ca cd       	rjmp	.-1132   	; 0x8d84 <ProcessMusic+0x3e6>
    91f0:	cf d2       	rcall	.+1438   	; 0x9790 <waves+0x690>
    91f2:	d5 d8       	rcall	.-3670   	; 0x839e <ReadControllers+0x1c>
    91f4:	db de       	rcall	.-586    	; 0x8fac <steptable+0xa4>
    91f6:	e1 e4       	ldi	r30, 0x41	; 65
    91f8:	e7 ea       	ldi	r30, 0xA7	; 167
    91fa:	ed f0       	brhs	.+58     	; 0x9236 <waves+0x136>
    91fc:	f4 f7       	brge	.-4      	; 0x91fa <waves+0xfa>
    91fe:	fa fd       	.word	0xfdfa	; ????
    9200:	80 81       	ld	r24, Z
    9202:	82 83       	std	Z+2, r24	; 0x02
    9204:	84 85       	ldd	r24, Z+12	; 0x0c
    9206:	86 87       	std	Z+14, r24	; 0x0e
    9208:	88 89       	ldd	r24, Y+16	; 0x10
    920a:	8a 8b       	std	Y+18, r24	; 0x12
    920c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    920e:	8e 8f       	std	Y+30, r24	; 0x1e
    9210:	90 91 92 93 	lds	r25, 0x9392
    9214:	94 95       	.word	0x9594	; ????
    9216:	96 97       	sbiw	r26, 0x26	; 38
    9218:	98 99       	sbic	0x13, 0	; 19
    921a:	9a 9b       	sbis	0x13, 2	; 19
    921c:	9c 9d       	mul	r25, r12
    921e:	9e 9f       	mul	r25, r30
    9220:	a0 a1       	ldd	r26, Z+32	; 0x20
    9222:	a2 a3       	std	Z+34, r26	; 0x22
    9224:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9226:	a6 a7       	std	Z+46, r26	; 0x2e
    9228:	a8 a9       	ldd	r26, Y+48	; 0x30
    922a:	aa ab       	std	Y+50, r26	; 0x32
    922c:	ac ad       	ldd	r26, Y+60	; 0x3c
    922e:	ae af       	std	Y+62, r26	; 0x3e
    9230:	b0 b1       	in	r27, 0x00	; 0
    9232:	b2 b3       	in	r27, 0x12	; 18
    9234:	b4 b5       	in	r27, 0x24	; 36
    9236:	b6 b7       	in	r27, 0x36	; 54
    9238:	b8 b9       	out	0x08, r27	; 8
    923a:	ba bb       	out	0x1a, r27	; 26
    923c:	bc bd       	out	0x2c, r27	; 44
    923e:	be bf       	out	0x3e, r27	; 62
    9240:	c0 c1       	rjmp	.+896    	; 0x95c2 <waves+0x4c2>
    9242:	c2 c3       	rjmp	.+1924   	; 0x99c8 <waves+0x8c8>
    9244:	c4 c5       	rjmp	.+2952   	; 0x9dce <InitializeVideoMode+0x12>
    9246:	c6 c7       	rjmp	.+3980   	; 0xa1d4 <LBCollides+0x46>
    9248:	c8 c9       	rjmp	.-3184   	; 0x85da <UartReadChar+0x28>
    924a:	ca cb       	rjmp	.-2156   	; 0x89e0 <ProcessMusic+0x42>
    924c:	cc cd       	rjmp	.-1128   	; 0x8de6 <SetMixerNote+0x4>
    924e:	ce cf       	rjmp	.-100    	; 0x91ec <waves+0xec>
    9250:	d0 d1       	rcall	.+928    	; 0x95f2 <waves+0x4f2>
    9252:	d2 d3       	rcall	.+1956   	; 0x99f8 <waves+0x8f8>
    9254:	d4 d5       	rcall	.+2984   	; 0x9dfe <DrawMap+0x26>
    9256:	d6 d7       	rcall	.+4012   	; 0xa204 <LBLineIntersect+0x22>
    9258:	d8 d9       	rcall	.-3152   	; 0x860a <UartSendChar+0x20>
    925a:	da db       	rcall	.-2124   	; 0x8a10 <ProcessMusic+0x72>
    925c:	dc dd       	rcall	.-1096   	; 0x8e16 <SetMixerWave+0x6>
    925e:	de df       	rcall	.-68     	; 0x921c <waves+0x11c>
    9260:	e0 e1       	ldi	r30, 0x10	; 16
    9262:	e2 e3       	ldi	r30, 0x32	; 50
    9264:	e4 e5       	ldi	r30, 0x54	; 84
    9266:	e6 e7       	ldi	r30, 0x76	; 118
    9268:	e8 e9       	ldi	r30, 0x98	; 152
    926a:	ea eb       	ldi	r30, 0xBA	; 186
    926c:	ec ed       	ldi	r30, 0xDC	; 220
    926e:	ee ef       	ldi	r30, 0xFE	; 254
    9270:	f0 f1       	brcs	.+124    	; 0x92ee <waves+0x1ee>
    9272:	f2 f3       	brmi	.-4      	; 0x9270 <waves+0x170>
    9274:	f4 f5       	brge	.+124    	; 0x92f2 <waves+0x1f2>
    9276:	f6 f7       	brtc	.-4      	; 0x9274 <waves+0x174>
    9278:	f8 f9       	.word	0xf9f8	; ????
    927a:	fa fb       	.word	0xfbfa	; ????
    927c:	fc fd       	.word	0xfdfc	; ????
    927e:	fe ff       	.word	0xfffe	; ????
    9280:	00 01       	movw	r0, r0
    9282:	02 03       	mulsu	r16, r18
    9284:	04 05       	cpc	r16, r4
    9286:	06 07       	cpc	r16, r22
    9288:	08 09       	sbc	r16, r8
    928a:	0a 0b       	sbc	r16, r26
    928c:	0c 0d       	add	r16, r12
    928e:	0e 0f       	add	r16, r30
    9290:	10 11       	cpse	r17, r0
    9292:	12 13       	cpse	r17, r18
    9294:	14 15       	cp	r17, r4
    9296:	16 17       	cp	r17, r22
    9298:	18 19       	sub	r17, r8
    929a:	1a 1b       	sub	r17, r26
    929c:	1c 1d       	adc	r17, r12
    929e:	1e 1f       	adc	r17, r30
    92a0:	20 21       	and	r18, r0
    92a2:	22 23       	and	r18, r18
    92a4:	24 25       	eor	r18, r4
    92a6:	26 27       	eor	r18, r22
    92a8:	28 29       	or	r18, r8
    92aa:	2a 2b       	or	r18, r26
    92ac:	2c 2d       	mov	r18, r12
    92ae:	2e 2f       	mov	r18, r30
    92b0:	30 31       	cpi	r19, 0x10	; 16
    92b2:	32 33       	cpi	r19, 0x32	; 50
    92b4:	34 35       	cpi	r19, 0x54	; 84
    92b6:	36 37       	cpi	r19, 0x76	; 118
    92b8:	38 39       	cpi	r19, 0x98	; 152
    92ba:	3a 3b       	cpi	r19, 0xBA	; 186
    92bc:	3c 3d       	cpi	r19, 0xDC	; 220
    92be:	3e 3f       	cpi	r19, 0xFE	; 254
    92c0:	40 41       	sbci	r20, 0x10	; 16
    92c2:	42 43       	sbci	r20, 0x32	; 50
    92c4:	44 45       	sbci	r20, 0x54	; 84
    92c6:	46 47       	sbci	r20, 0x76	; 118
    92c8:	48 49       	sbci	r20, 0x98	; 152
    92ca:	4a 4b       	sbci	r20, 0xBA	; 186
    92cc:	4c 4d       	sbci	r20, 0xDC	; 220
    92ce:	4e 4f       	sbci	r20, 0xFE	; 254
    92d0:	50 51       	subi	r21, 0x10	; 16
    92d2:	52 53       	subi	r21, 0x32	; 50
    92d4:	54 55       	subi	r21, 0x54	; 84
    92d6:	56 57       	subi	r21, 0x76	; 118
    92d8:	58 59       	subi	r21, 0x98	; 152
    92da:	5a 5b       	subi	r21, 0xBA	; 186
    92dc:	5c 5d       	subi	r21, 0xDC	; 220
    92de:	5e 5f       	subi	r21, 0xFE	; 254
    92e0:	60 61       	ori	r22, 0x10	; 16
    92e2:	62 63       	ori	r22, 0x32	; 50
    92e4:	64 65       	ori	r22, 0x54	; 84
    92e6:	66 67       	ori	r22, 0x76	; 118
    92e8:	68 69       	ori	r22, 0x98	; 152
    92ea:	6a 6b       	ori	r22, 0xBA	; 186
    92ec:	6c 6d       	ori	r22, 0xDC	; 220
    92ee:	6e 6f       	ori	r22, 0xFE	; 254
    92f0:	70 71       	andi	r23, 0x10	; 16
    92f2:	72 73       	andi	r23, 0x32	; 50
    92f4:	74 75       	andi	r23, 0x54	; 84
    92f6:	76 77       	andi	r23, 0x76	; 118
    92f8:	78 79       	andi	r23, 0x98	; 152
    92fa:	7a 7b       	andi	r23, 0xBA	; 186
    92fc:	7c 7d       	andi	r23, 0xDC	; 220
    92fe:	7e 7f       	andi	r23, 0xFE	; 254
    9300:	00 02       	muls	r16, r16
    9302:	04 06       	cpc	r0, r20
    9304:	08 0a       	sbc	r0, r24
    9306:	0c 0e       	add	r0, r28
    9308:	10 12       	cpse	r1, r16
    930a:	14 16       	cp	r1, r20
    930c:	18 1a       	sub	r1, r24
    930e:	1c 1e       	adc	r1, r28
    9310:	20 22       	and	r2, r16
    9312:	24 26       	eor	r2, r20
    9314:	28 2a       	or	r2, r24
    9316:	2c 2e       	mov	r2, r28
    9318:	30 32       	cpi	r19, 0x20	; 32
    931a:	34 36       	cpi	r19, 0x64	; 100
    931c:	38 3a       	cpi	r19, 0xA8	; 168
    931e:	3c 3e       	cpi	r19, 0xEC	; 236
    9320:	40 42       	sbci	r20, 0x20	; 32
    9322:	44 46       	sbci	r20, 0x64	; 100
    9324:	48 4a       	sbci	r20, 0xA8	; 168
    9326:	4c 4e       	sbci	r20, 0xEC	; 236
    9328:	50 52       	subi	r21, 0x20	; 32
    932a:	54 56       	subi	r21, 0x64	; 100
    932c:	58 5a       	subi	r21, 0xA8	; 168
    932e:	5c 5e       	subi	r21, 0xEC	; 236
    9330:	60 62       	ori	r22, 0x20	; 32
    9332:	64 66       	ori	r22, 0x64	; 100
    9334:	68 6a       	ori	r22, 0xA8	; 168
    9336:	6c 6e       	ori	r22, 0xEC	; 236
    9338:	70 72       	andi	r23, 0x20	; 32
    933a:	74 76       	andi	r23, 0x64	; 100
    933c:	78 7a       	andi	r23, 0xA8	; 168
    933e:	7c 7e       	andi	r23, 0xEC	; 236
    9340:	7f 7d       	andi	r23, 0xDF	; 223
    9342:	7b 79       	andi	r23, 0x9B	; 155
    9344:	77 75       	andi	r23, 0x57	; 87
    9346:	73 71       	andi	r23, 0x13	; 19
    9348:	6f 6d       	ori	r22, 0xDF	; 223
    934a:	6b 69       	ori	r22, 0x9B	; 155
    934c:	67 65       	ori	r22, 0x57	; 87
    934e:	63 61       	ori	r22, 0x13	; 19
    9350:	5f 5d       	subi	r21, 0xDF	; 223
    9352:	5b 59       	subi	r21, 0x9B	; 155
    9354:	57 55       	subi	r21, 0x57	; 87
    9356:	53 51       	subi	r21, 0x13	; 19
    9358:	4f 4d       	sbci	r20, 0xDF	; 223
    935a:	4b 49       	sbci	r20, 0x9B	; 155
    935c:	47 45       	sbci	r20, 0x57	; 87
    935e:	43 41       	sbci	r20, 0x13	; 19
    9360:	3f 3d       	cpi	r19, 0xDF	; 223
    9362:	3b 39       	cpi	r19, 0x9B	; 155
    9364:	37 35       	cpi	r19, 0x57	; 87
    9366:	33 31       	cpi	r19, 0x13	; 19
    9368:	2f 2d       	mov	r18, r15
    936a:	2b 29       	or	r18, r11
    936c:	27 25       	eor	r18, r7
    936e:	23 21       	and	r18, r3
    9370:	1f 1d       	adc	r17, r15
    9372:	1b 19       	sub	r17, r11
    9374:	17 15       	cp	r17, r7
    9376:	13 11       	cpse	r17, r3
    9378:	0f 0d       	add	r16, r15
    937a:	0b 09       	sbc	r16, r11
    937c:	07 05       	cpc	r16, r7
    937e:	03 01       	movw	r0, r6
    9380:	ff fd       	.word	0xfdff	; ????
    9382:	fb f9       	.word	0xf9fb	; ????
    9384:	f7 f5       	brid	.+124    	; 0x9402 <waves+0x302>
    9386:	f3 f1       	brvs	.+124    	; 0x9404 <waves+0x304>
    9388:	ef ed       	ldi	r30, 0xDF	; 223
    938a:	eb e9       	ldi	r30, 0x9B	; 155
    938c:	e7 e5       	ldi	r30, 0x57	; 87
    938e:	e3 e1       	ldi	r30, 0x13	; 19
    9390:	df dd       	rcall	.-1090   	; 0x8f50 <steptable+0x48>
    9392:	db d9       	rcall	.-3146   	; 0x874a <PatchCommand03+0xc>
    9394:	d7 d5       	rcall	.+2990   	; 0x9f44 <doFade+0x2>
    9396:	d3 d1       	rcall	.+934    	; 0x973e <waves+0x63e>
    9398:	cf cd       	rjmp	.-1122   	; 0x8f38 <steptable+0x30>
    939a:	cb c9       	rjmp	.-3178   	; 0x8732 <PatchCommand13+0x2>
    939c:	c7 c5       	rjmp	.+2958   	; 0x9f2c <WaitVsync+0x18>
    939e:	c3 c1       	rjmp	.+902    	; 0x9726 <waves+0x626>
    93a0:	bf bd       	out	0x2f, r27	; 47
    93a2:	bb b9       	out	0x0b, r27	; 11
    93a4:	b7 b5       	in	r27, 0x27	; 39
    93a6:	b3 b1       	in	r27, 0x03	; 3
    93a8:	af ad       	ldd	r26, Y+63	; 0x3f
    93aa:	ab a9       	ldd	r26, Y+51	; 0x33
    93ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    93ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    93b0:	9f 9d       	mul	r25, r15
    93b2:	9b 99       	sbic	0x13, 3	; 19
    93b4:	97 95       	ror	r25
    93b6:	93 91       	.word	0x9193	; ????
    93b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    93ba:	8b 89       	ldd	r24, Y+19	; 0x13
    93bc:	87 85       	ldd	r24, Z+15	; 0x0f
    93be:	83 81       	ldd	r24, Z+3	; 0x03
    93c0:	80 82       	st	Z, r8
    93c2:	84 86       	std	Z+12, r8	; 0x0c
    93c4:	88 8a       	std	Y+16, r8	; 0x10
    93c6:	8c 8e       	std	Y+28, r8	; 0x1c
    93c8:	90 92 94 96 	sts	0x9694, r9
    93cc:	98 9a       	sbi	0x13, 0	; 19
    93ce:	9c 9e       	mul	r9, r28
    93d0:	a0 a2       	std	Z+32, r10	; 0x20
    93d2:	a4 a6       	std	Z+44, r10	; 0x2c
    93d4:	a8 aa       	std	Y+48, r10	; 0x30
    93d6:	ac ae       	std	Y+60, r10	; 0x3c
    93d8:	b0 b2       	in	r11, 0x10	; 16
    93da:	b4 b6       	in	r11, 0x34	; 52
    93dc:	b8 ba       	out	0x18, r11	; 24
    93de:	bc be       	out	0x3c, r11	; 60
    93e0:	c0 c2       	rjmp	.+1408   	; 0x9962 <waves+0x862>
    93e2:	c4 c6       	rjmp	.+3464   	; 0xa16c <LBPrintStr+0x40>
    93e4:	c8 ca       	rjmp	.-2672   	; 0x8976 <TriggerNote+0x58>
    93e6:	cc ce       	rjmp	.-616    	; 0x9180 <waves+0x80>
    93e8:	d0 d2       	rcall	.+1440   	; 0x998a <waves+0x88a>
    93ea:	d4 d6       	rcall	.+3496   	; 0xa194 <LBCollides+0x6>
    93ec:	d8 da       	rcall	.-2640   	; 0x899e <ProcessMusic>
    93ee:	dc de       	rcall	.-584    	; 0x91a8 <waves+0xa8>
    93f0:	e0 e2       	ldi	r30, 0x20	; 32
    93f2:	e4 e6       	ldi	r30, 0x64	; 100
    93f4:	e8 ea       	ldi	r30, 0xA8	; 168
    93f6:	ec ee       	ldi	r30, 0xEC	; 236
    93f8:	f0 f2       	brcs	.-68     	; 0x93b6 <waves+0x2b6>
    93fa:	f4 f6       	brge	.-68     	; 0x93b8 <waves+0x2b8>
    93fc:	f8 fa       	.word	0xfaf8	; ????
    93fe:	fc fe       	.word	0xfefc	; ????
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	80 80       	ld	r8, Z
    9442:	80 80       	ld	r8, Z
    9444:	80 80       	ld	r8, Z
    9446:	80 80       	ld	r8, Z
    9448:	80 80       	ld	r8, Z
    944a:	80 80       	ld	r8, Z
    944c:	80 80       	ld	r8, Z
    944e:	80 80       	ld	r8, Z
    9450:	80 80       	ld	r8, Z
    9452:	80 80       	ld	r8, Z
    9454:	80 80       	ld	r8, Z
    9456:	80 80       	ld	r8, Z
    9458:	80 80       	ld	r8, Z
    945a:	80 80       	ld	r8, Z
    945c:	80 80       	ld	r8, Z
    945e:	80 80       	ld	r8, Z
    9460:	80 80       	ld	r8, Z
    9462:	80 80       	ld	r8, Z
    9464:	80 80       	ld	r8, Z
    9466:	80 80       	ld	r8, Z
    9468:	80 80       	ld	r8, Z
    946a:	80 80       	ld	r8, Z
    946c:	80 80       	ld	r8, Z
    946e:	80 80       	ld	r8, Z
    9470:	80 80       	ld	r8, Z
    9472:	80 80       	ld	r8, Z
    9474:	80 80       	ld	r8, Z
    9476:	80 80       	ld	r8, Z
    9478:	80 80       	ld	r8, Z
    947a:	80 80       	ld	r8, Z
    947c:	80 80       	ld	r8, Z
    947e:	80 80       	ld	r8, Z
    9480:	80 80       	ld	r8, Z
    9482:	80 80       	ld	r8, Z
    9484:	80 80       	ld	r8, Z
    9486:	80 80       	ld	r8, Z
    9488:	80 80       	ld	r8, Z
    948a:	80 80       	ld	r8, Z
    948c:	80 80       	ld	r8, Z
    948e:	80 80       	ld	r8, Z
    9490:	80 80       	ld	r8, Z
    9492:	80 80       	ld	r8, Z
    9494:	80 80       	ld	r8, Z
    9496:	80 80       	ld	r8, Z
    9498:	80 80       	ld	r8, Z
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	7f 7f       	andi	r23, 0xFF	; 255
    9502:	7f 7f       	andi	r23, 0xFF	; 255
    9504:	7f 7f       	andi	r23, 0xFF	; 255
    9506:	7f 7f       	andi	r23, 0xFF	; 255
    9508:	7f 7f       	andi	r23, 0xFF	; 255
    950a:	7f 7f       	andi	r23, 0xFF	; 255
    950c:	7f 7f       	andi	r23, 0xFF	; 255
    950e:	7f 7f       	andi	r23, 0xFF	; 255
    9510:	7f 7f       	andi	r23, 0xFF	; 255
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7f       	andi	r23, 0xFF	; 255
    954e:	7f 7f       	andi	r23, 0xFF	; 255
    9550:	7f 7f       	andi	r23, 0xFF	; 255
    9552:	7f 7f       	andi	r23, 0xFF	; 255
    9554:	7f 7f       	andi	r23, 0xFF	; 255
    9556:	7f 7f       	andi	r23, 0xFF	; 255
    9558:	7f 7f       	andi	r23, 0xFF	; 255
    955a:	7f 7f       	andi	r23, 0xFF	; 255
    955c:	7f 7f       	andi	r23, 0xFF	; 255
    955e:	7f 7f       	andi	r23, 0xFF	; 255
    9560:	7f 7f       	andi	r23, 0xFF	; 255
    9562:	7f 7f       	andi	r23, 0xFF	; 255
    9564:	7f 7f       	andi	r23, 0xFF	; 255
    9566:	7f 7f       	andi	r23, 0xFF	; 255
    9568:	7f 7f       	andi	r23, 0xFF	; 255
    956a:	7f 7f       	andi	r23, 0xFF	; 255
    956c:	7f 7f       	andi	r23, 0xFF	; 255
    956e:	7f 7f       	andi	r23, 0xFF	; 255
    9570:	7f 7f       	andi	r23, 0xFF	; 255
    9572:	7f 7f       	andi	r23, 0xFF	; 255
    9574:	7f 7f       	andi	r23, 0xFF	; 255
    9576:	7f 7f       	andi	r23, 0xFF	; 255
    9578:	7f 7f       	andi	r23, 0xFF	; 255
    957a:	7f 7f       	andi	r23, 0xFF	; 255
    957c:	7f 7f       	andi	r23, 0xFF	; 255
    957e:	7f 7f       	andi	r23, 0xFF	; 255
    9580:	80 80       	ld	r8, Z
    9582:	80 80       	ld	r8, Z
    9584:	80 80       	ld	r8, Z
    9586:	80 80       	ld	r8, Z
    9588:	80 80       	ld	r8, Z
    958a:	80 80       	ld	r8, Z
    958c:	80 80       	ld	r8, Z
    958e:	80 80       	ld	r8, Z
    9590:	80 80       	ld	r8, Z
    9592:	80 80       	ld	r8, Z
    9594:	80 80       	ld	r8, Z
    9596:	80 80       	ld	r8, Z
    9598:	80 80       	ld	r8, Z
    959a:	80 80       	ld	r8, Z
    959c:	80 80       	ld	r8, Z
    959e:	80 80       	ld	r8, Z
    95a0:	80 80       	ld	r8, Z
    95a2:	80 80       	ld	r8, Z
    95a4:	80 80       	ld	r8, Z
    95a6:	80 80       	ld	r8, Z
    95a8:	80 80       	ld	r8, Z
    95aa:	80 80       	ld	r8, Z
    95ac:	80 80       	ld	r8, Z
    95ae:	80 80       	ld	r8, Z
    95b0:	80 80       	ld	r8, Z
    95b2:	80 80       	ld	r8, Z
    95b4:	80 80       	ld	r8, Z
    95b6:	80 80       	ld	r8, Z
    95b8:	80 80       	ld	r8, Z
    95ba:	80 80       	ld	r8, Z
    95bc:	80 80       	ld	r8, Z
    95be:	80 80       	ld	r8, Z
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 80       	ld	r8, Z
    95f6:	80 80       	ld	r8, Z
    95f8:	80 80       	ld	r8, Z
    95fa:	80 80       	ld	r8, Z
    95fc:	80 80       	ld	r8, Z
    95fe:	80 80       	ld	r8, Z
    9600:	7f 7f       	andi	r23, 0xFF	; 255
    9602:	7f 7f       	andi	r23, 0xFF	; 255
    9604:	7f 7f       	andi	r23, 0xFF	; 255
    9606:	7f 7f       	andi	r23, 0xFF	; 255
    9608:	7f 7f       	andi	r23, 0xFF	; 255
    960a:	7f 7f       	andi	r23, 0xFF	; 255
    960c:	7f 7f       	andi	r23, 0xFF	; 255
    960e:	7f 7f       	andi	r23, 0xFF	; 255
    9610:	7f 7f       	andi	r23, 0xFF	; 255
    9612:	7f 7f       	andi	r23, 0xFF	; 255
    9614:	7f 7f       	andi	r23, 0xFF	; 255
    9616:	7f 7f       	andi	r23, 0xFF	; 255
    9618:	7f 7f       	andi	r23, 0xFF	; 255
    961a:	7f 7f       	andi	r23, 0xFF	; 255
    961c:	7f 7f       	andi	r23, 0xFF	; 255
    961e:	7f 7f       	andi	r23, 0xFF	; 255
    9620:	7f 7f       	andi	r23, 0xFF	; 255
    9622:	7f 7f       	andi	r23, 0xFF	; 255
    9624:	7f 7f       	andi	r23, 0xFF	; 255
    9626:	7f 7f       	andi	r23, 0xFF	; 255
    9628:	7f 7f       	andi	r23, 0xFF	; 255
    962a:	7f 7f       	andi	r23, 0xFF	; 255
    962c:	7f 7f       	andi	r23, 0xFF	; 255
    962e:	7f 7f       	andi	r23, 0xFF	; 255
    9630:	7f 7f       	andi	r23, 0xFF	; 255
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7f       	andi	r23, 0xFF	; 255
    964e:	7f 7f       	andi	r23, 0xFF	; 255
    9650:	7f 7f       	andi	r23, 0xFF	; 255
    9652:	7f 7f       	andi	r23, 0xFF	; 255
    9654:	7f 7f       	andi	r23, 0xFF	; 255
    9656:	7f 7f       	andi	r23, 0xFF	; 255
    9658:	7f 7f       	andi	r23, 0xFF	; 255
    965a:	7f 7f       	andi	r23, 0xFF	; 255
    965c:	7f 7f       	andi	r23, 0xFF	; 255
    965e:	7f 7f       	andi	r23, 0xFF	; 255
    9660:	7f 7f       	andi	r23, 0xFF	; 255
    9662:	7f 7f       	andi	r23, 0xFF	; 255
    9664:	7f 7f       	andi	r23, 0xFF	; 255
    9666:	7f 7f       	andi	r23, 0xFF	; 255
    9668:	7f 7f       	andi	r23, 0xFF	; 255
    966a:	7f 7f       	andi	r23, 0xFF	; 255
    966c:	7f 7f       	andi	r23, 0xFF	; 255
    966e:	7f 7f       	andi	r23, 0xFF	; 255
    9670:	7f 7f       	andi	r23, 0xFF	; 255
    9672:	7f 7f       	andi	r23, 0xFF	; 255
    9674:	7f 7f       	andi	r23, 0xFF	; 255
    9676:	7f 7f       	andi	r23, 0xFF	; 255
    9678:	7f 7f       	andi	r23, 0xFF	; 255
    967a:	7f 7f       	andi	r23, 0xFF	; 255
    967c:	7f 7f       	andi	r23, 0xFF	; 255
    967e:	7f 7f       	andi	r23, 0xFF	; 255
    9680:	7f 7f       	andi	r23, 0xFF	; 255
    9682:	7f 7f       	andi	r23, 0xFF	; 255
    9684:	7f 7f       	andi	r23, 0xFF	; 255
    9686:	7f 7f       	andi	r23, 0xFF	; 255
    9688:	7f 7f       	andi	r23, 0xFF	; 255
    968a:	7f 7f       	andi	r23, 0xFF	; 255
    968c:	7f 7f       	andi	r23, 0xFF	; 255
    968e:	7f 7f       	andi	r23, 0xFF	; 255
    9690:	7f 7f       	andi	r23, 0xFF	; 255
    9692:	7f 7f       	andi	r23, 0xFF	; 255
    9694:	7f 7f       	andi	r23, 0xFF	; 255
    9696:	7f 7f       	andi	r23, 0xFF	; 255
    9698:	7f 7f       	andi	r23, 0xFF	; 255
    969a:	7f 7f       	andi	r23, 0xFF	; 255
    969c:	7f 7f       	andi	r23, 0xFF	; 255
    969e:	7f 7f       	andi	r23, 0xFF	; 255
    96a0:	7f 7f       	andi	r23, 0xFF	; 255
    96a2:	7f 7f       	andi	r23, 0xFF	; 255
    96a4:	7f 7f       	andi	r23, 0xFF	; 255
    96a6:	7f 7f       	andi	r23, 0xFF	; 255
    96a8:	7f 7f       	andi	r23, 0xFF	; 255
    96aa:	7f 7f       	andi	r23, 0xFF	; 255
    96ac:	7f 7f       	andi	r23, 0xFF	; 255
    96ae:	7f 7f       	andi	r23, 0xFF	; 255
    96b0:	7f 7f       	andi	r23, 0xFF	; 255
    96b2:	7f 7f       	andi	r23, 0xFF	; 255
    96b4:	7f 7f       	andi	r23, 0xFF	; 255
    96b6:	7f 7f       	andi	r23, 0xFF	; 255
    96b8:	7f 7f       	andi	r23, 0xFF	; 255
    96ba:	7f 7f       	andi	r23, 0xFF	; 255
    96bc:	7f 7f       	andi	r23, 0xFF	; 255
    96be:	7f 7f       	andi	r23, 0xFF	; 255
    96c0:	80 80       	ld	r8, Z
    96c2:	80 80       	ld	r8, Z
    96c4:	80 80       	ld	r8, Z
    96c6:	80 80       	ld	r8, Z
    96c8:	80 80       	ld	r8, Z
    96ca:	80 80       	ld	r8, Z
    96cc:	80 80       	ld	r8, Z
    96ce:	80 80       	ld	r8, Z
    96d0:	80 80       	ld	r8, Z
    96d2:	80 80       	ld	r8, Z
    96d4:	80 80       	ld	r8, Z
    96d6:	80 80       	ld	r8, Z
    96d8:	80 80       	ld	r8, Z
    96da:	80 80       	ld	r8, Z
    96dc:	80 80       	ld	r8, Z
    96de:	80 80       	ld	r8, Z
    96e0:	80 80       	ld	r8, Z
    96e2:	80 80       	ld	r8, Z
    96e4:	80 80       	ld	r8, Z
    96e6:	80 80       	ld	r8, Z
    96e8:	80 80       	ld	r8, Z
    96ea:	80 80       	ld	r8, Z
    96ec:	80 80       	ld	r8, Z
    96ee:	80 80       	ld	r8, Z
    96f0:	80 80       	ld	r8, Z
    96f2:	80 80       	ld	r8, Z
    96f4:	80 80       	ld	r8, Z
    96f6:	80 80       	ld	r8, Z
    96f8:	80 80       	ld	r8, Z
    96fa:	80 80       	ld	r8, Z
    96fc:	80 80       	ld	r8, Z
    96fe:	80 80       	ld	r8, Z
    9700:	03 09       	sbc	r16, r3
    9702:	13 1e       	adc	r1, r19
    9704:	28 31       	cpi	r18, 0x18	; 24
    9706:	3a 40       	sbci	r19, 0x0A	; 10
    9708:	46 4c       	sbci	r20, 0xC6	; 198
    970a:	50 54       	subi	r21, 0x40	; 64
    970c:	58 5b       	subi	r21, 0xB8	; 184
    970e:	5e 61       	ori	r21, 0x1E	; 30
    9710:	63 65       	ori	r22, 0x53	; 83
    9712:	67 69       	ori	r22, 0x97	; 151
    9714:	6b 6c       	ori	r22, 0xCB	; 203
    9716:	6e 6f       	ori	r22, 0xFE	; 254
    9718:	70 71       	andi	r23, 0x10	; 16
    971a:	72 73       	andi	r23, 0x32	; 50
    971c:	74 75       	andi	r23, 0x54	; 84
    971e:	76 77       	andi	r23, 0x76	; 118
    9720:	77 78       	andi	r23, 0x87	; 135
    9722:	79 79       	andi	r23, 0x99	; 153
    9724:	7a 7a       	andi	r23, 0xAA	; 170
    9726:	7b 7b       	andi	r23, 0xBB	; 187
    9728:	7c 7c       	andi	r23, 0xCC	; 204
    972a:	7c 7d       	andi	r23, 0xDC	; 220
    972c:	7d 7d       	andi	r23, 0xDD	; 221
    972e:	7e 7e       	andi	r23, 0xEE	; 238
    9730:	7e 7e       	andi	r23, 0xEE	; 238
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7e       	andi	r23, 0xEF	; 239
    974e:	7e 7e       	andi	r23, 0xEE	; 238
    9750:	7e 7d       	andi	r23, 0xDE	; 222
    9752:	7d 7d       	andi	r23, 0xDD	; 221
    9754:	7c 7c       	andi	r23, 0xCC	; 204
    9756:	7c 7b       	andi	r23, 0xBC	; 188
    9758:	7b 7a       	andi	r23, 0xAB	; 171
    975a:	7a 79       	andi	r23, 0x9A	; 154
    975c:	79 78       	andi	r23, 0x89	; 137
    975e:	77 77       	andi	r23, 0x77	; 119
    9760:	76 75       	andi	r23, 0x56	; 86
    9762:	74 73       	andi	r23, 0x34	; 52
    9764:	72 71       	andi	r23, 0x12	; 18
    9766:	70 6f       	ori	r23, 0xF0	; 240
    9768:	6e 6c       	ori	r22, 0xCE	; 206
    976a:	6b 69       	ori	r22, 0x9B	; 155
    976c:	67 65       	ori	r22, 0x57	; 87
    976e:	63 61       	ori	r22, 0x13	; 19
    9770:	5e 5b       	subi	r21, 0xBE	; 190
    9772:	58 54       	subi	r21, 0x48	; 72
    9774:	50 4c       	sbci	r21, 0xC0	; 192
    9776:	46 40       	sbci	r20, 0x06	; 6
    9778:	3a 31       	cpi	r19, 0x1A	; 26
    977a:	28 1e       	adc	r2, r24
    977c:	13 09       	sbc	r17, r3
    977e:	03 00       	.word	0x0003	; ????
    9780:	c6 cc       	rjmp	.-1652   	; 0x910e <waves+0xe>
    9782:	d5 db       	rcall	.-2134   	; 0x8f2e <steptable+0x26>
    9784:	df e3       	ldi	r29, 0x3F	; 63
    9786:	e5 e7       	ldi	r30, 0x75	; 117
    9788:	e9 ea       	ldi	r30, 0xA9	; 169
    978a:	eb ec       	ldi	r30, 0xCB	; 203
    978c:	ed ee       	ldi	r30, 0xED	; 237
    978e:	ef ef       	ldi	r30, 0xFF	; 255
    9790:	f0 f0       	brcs	.+60     	; 0x97ce <waves+0x6ce>
    9792:	f0 f1       	brcs	.+124    	; 0x9810 <waves+0x710>
    9794:	f1 f1       	breq	.+124    	; 0x9812 <waves+0x712>
    9796:	f1 f2       	breq	.-68     	; 0x9754 <waves+0x654>
    9798:	f2 f2       	brmi	.-68     	; 0x9756 <waves+0x656>
    979a:	f2 f2       	brmi	.-68     	; 0x9758 <waves+0x658>
    979c:	f2 f2       	brmi	.-68     	; 0x975a <waves+0x65a>
    979e:	f2 f3       	brmi	.-4      	; 0x979c <waves+0x69c>
    97a0:	f3 f3       	brvs	.-4      	; 0x979e <waves+0x69e>
    97a2:	f3 f3       	brvs	.-4      	; 0x97a0 <waves+0x6a0>
    97a4:	f3 f3       	brvs	.-4      	; 0x97a2 <waves+0x6a2>
    97a6:	f3 f3       	brvs	.-4      	; 0x97a4 <waves+0x6a4>
    97a8:	f3 f3       	brvs	.-4      	; 0x97a6 <waves+0x6a6>
    97aa:	f3 f3       	brvs	.-4      	; 0x97a8 <waves+0x6a8>
    97ac:	f3 f3       	brvs	.-4      	; 0x97aa <waves+0x6aa>
    97ae:	f3 f3       	brvs	.-4      	; 0x97ac <waves+0x6ac>
    97b0:	f3 f3       	brvs	.-4      	; 0x97ae <waves+0x6ae>
    97b2:	f3 f3       	brvs	.-4      	; 0x97b0 <waves+0x6b0>
    97b4:	f3 f3       	brvs	.-4      	; 0x97b2 <waves+0x6b2>
    97b6:	f3 f3       	brvs	.-4      	; 0x97b4 <waves+0x6b4>
    97b8:	f3 f3       	brvs	.-4      	; 0x97b6 <waves+0x6b6>
    97ba:	f3 f3       	brvs	.-4      	; 0x97b8 <waves+0x6b8>
    97bc:	f3 f3       	brvs	.-4      	; 0x97ba <waves+0x6ba>
    97be:	f3 f3       	brvs	.-4      	; 0x97bc <waves+0x6bc>
    97c0:	f3 f3       	brvs	.-4      	; 0x97be <waves+0x6be>
    97c2:	f3 f3       	brvs	.-4      	; 0x97c0 <waves+0x6c0>
    97c4:	f3 f3       	brvs	.-4      	; 0x97c2 <waves+0x6c2>
    97c6:	f3 f3       	brvs	.-4      	; 0x97c4 <waves+0x6c4>
    97c8:	f3 f3       	brvs	.-4      	; 0x97c6 <waves+0x6c6>
    97ca:	f3 f3       	brvs	.-4      	; 0x97c8 <waves+0x6c8>
    97cc:	f3 f3       	brvs	.-4      	; 0x97ca <waves+0x6ca>
    97ce:	f3 f3       	brvs	.-4      	; 0x97cc <waves+0x6cc>
    97d0:	f3 f3       	brvs	.-4      	; 0x97ce <waves+0x6ce>
    97d2:	f3 f3       	brvs	.-4      	; 0x97d0 <waves+0x6d0>
    97d4:	f3 f3       	brvs	.-4      	; 0x97d2 <waves+0x6d2>
    97d6:	f3 f3       	brvs	.-4      	; 0x97d4 <waves+0x6d4>
    97d8:	f3 f3       	brvs	.-4      	; 0x97d6 <waves+0x6d6>
    97da:	f3 f3       	brvs	.-4      	; 0x97d8 <waves+0x6d8>
    97dc:	f3 f3       	brvs	.-4      	; 0x97da <waves+0x6da>
    97de:	f3 f3       	brvs	.-4      	; 0x97dc <waves+0x6dc>
    97e0:	f2 f2       	brmi	.-68     	; 0x979e <waves+0x69e>
    97e2:	f2 f2       	brmi	.-68     	; 0x97a0 <waves+0x6a0>
    97e4:	f2 f2       	brmi	.-68     	; 0x97a2 <waves+0x6a2>
    97e6:	f2 f2       	brmi	.-68     	; 0x97a4 <waves+0x6a4>
    97e8:	f1 f1       	breq	.+124    	; 0x9866 <waves+0x766>
    97ea:	f1 f1       	breq	.+124    	; 0x9868 <waves+0x768>
    97ec:	f0 f0       	brcs	.+60     	; 0x982a <waves+0x72a>
    97ee:	f0 ef       	ldi	r31, 0xF0	; 240
    97f0:	ef ee       	ldi	r30, 0xEF	; 239
    97f2:	ed ec       	ldi	r30, 0xCD	; 205
    97f4:	eb ea       	ldi	r30, 0xAB	; 171
    97f6:	e9 e7       	ldi	r30, 0x79	; 121
    97f8:	e5 e3       	ldi	r30, 0x35	; 53
    97fa:	df db       	rcall	.-2114   	; 0x8fba <steptable+0xb2>
    97fc:	d5 cc       	rjmp	.-1622   	; 0x91a8 <waves+0xa8>
    97fe:	c6 00       	.word	0x00c6	; ????
    9800:	00 28       	or	r0, r0
    9802:	3d 42       	sbci	r19, 0x2D	; 45
    9804:	30 2d       	mov	r19, r0
    9806:	2c 2b       	or	r18, r28
    9808:	2c 2d       	mov	r18, r12
    980a:	2e 2f       	mov	r18, r30
    980c:	30 32       	cpi	r19, 0x20	; 32
    980e:	33 35       	cpi	r19, 0x53	; 83
    9810:	37 39       	cpi	r19, 0x97	; 151
    9812:	3b 3d       	cpi	r19, 0xDB	; 219
    9814:	3f 41       	sbci	r19, 0x1F	; 31
    9816:	43 45       	sbci	r20, 0x53	; 83
    9818:	48 4a       	sbci	r20, 0xA8	; 168
    981a:	4c 4e       	sbci	r20, 0xEC	; 236
    981c:	50 53       	subi	r21, 0x30	; 48
    981e:	55 57       	subi	r21, 0x75	; 117
    9820:	59 5b       	subi	r21, 0xB9	; 185
    9822:	5d 5f       	subi	r21, 0xFD	; 253
    9824:	61 63       	ori	r22, 0x31	; 49
    9826:	65 67       	ori	r22, 0x75	; 117
    9828:	69 6b       	ori	r22, 0xB9	; 185
    982a:	6c 6e       	ori	r22, 0xEC	; 236
    982c:	70 71       	andi	r23, 0x10	; 16
    982e:	73 74       	andi	r23, 0x43	; 67
    9830:	75 77       	andi	r23, 0x75	; 117
    9832:	78 79       	andi	r23, 0x98	; 152
    9834:	7a 7b       	andi	r23, 0xBA	; 186
    9836:	7c 7d       	andi	r23, 0xDC	; 220
    9838:	7d 7e       	andi	r23, 0xED	; 237
    983a:	7e 7f       	andi	r23, 0xFE	; 254
    983c:	7f 7f       	andi	r23, 0xFF	; 255
    983e:	7f 7f       	andi	r23, 0xFF	; 255
    9840:	7f 7f       	andi	r23, 0xFF	; 255
    9842:	7f 7f       	andi	r23, 0xFF	; 255
    9844:	7f 7f       	andi	r23, 0xFF	; 255
    9846:	7e 7e       	andi	r23, 0xEE	; 238
    9848:	7d 7d       	andi	r23, 0xDD	; 221
    984a:	7c 7b       	andi	r23, 0xBC	; 188
    984c:	7a 79       	andi	r23, 0x9A	; 154
    984e:	78 77       	andi	r23, 0x78	; 120
    9850:	75 74       	andi	r23, 0x45	; 69
    9852:	73 71       	andi	r23, 0x13	; 19
    9854:	70 6e       	ori	r23, 0xE0	; 224
    9856:	6c 6b       	ori	r22, 0xBC	; 188
    9858:	69 67       	ori	r22, 0x79	; 121
    985a:	65 63       	ori	r22, 0x35	; 53
    985c:	61 5f       	subi	r22, 0xF1	; 241
    985e:	5d 5b       	subi	r21, 0xBD	; 189
    9860:	59 57       	subi	r21, 0x79	; 121
    9862:	55 53       	subi	r21, 0x35	; 53
    9864:	50 4e       	sbci	r21, 0xE0	; 224
    9866:	4c 4a       	sbci	r20, 0xAC	; 172
    9868:	48 45       	sbci	r20, 0x58	; 88
    986a:	43 41       	sbci	r20, 0x13	; 19
    986c:	3f 3d       	cpi	r19, 0xDF	; 223
    986e:	3b 39       	cpi	r19, 0x9B	; 155
    9870:	37 35       	cpi	r19, 0x57	; 87
    9872:	33 32       	cpi	r19, 0x23	; 35
    9874:	30 2f       	mov	r19, r16
    9876:	2e 2d       	mov	r18, r14
    9878:	2c 2b       	or	r18, r28
    987a:	2c 2d       	mov	r18, r12
    987c:	30 42       	sbci	r19, 0x20	; 32
    987e:	3d 28       	or	r3, r13
    9880:	00 e9       	ldi	r16, 0x90	; 144
    9882:	e5 fe       	sbrs	r14, 5
    9884:	d4 d7       	rcall	.+4008   	; 0xa82e <init_player+0xd8>
    9886:	d7 d7       	rcall	.+4014   	; 0xa836 <init_player+0xe0>
    9888:	d6 d4       	rcall	.+2476   	; 0xa236 <LBLineIntersect+0x54>
    988a:	d2 d0       	rcall	.+420    	; 0x9a30 <waves+0x930>
    988c:	ce cc       	rjmp	.-1636   	; 0x922a <waves+0x12a>
    988e:	ca c8       	rjmp	.-3692   	; 0x8a24 <ProcessMusic+0x86>
    9890:	c6 c3       	rjmp	.+1932   	; 0xa01e <LBGetNextFrame+0x42>
    9892:	c1 bf       	out	0x31, r28	; 49
    9894:	bd ba       	out	0x1d, r11	; 29
    9896:	b8 b6       	in	r11, 0x38	; 56
    9898:	b4 b1       	in	r27, 0x04	; 4
    989a:	af ad       	ldd	r26, Y+63	; 0x3f
    989c:	ab a9       	ldd	r26, Y+51	; 0x33
    989e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    98a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    98a2:	9f 9e       	mul	r9, r31
    98a4:	9c 9a       	sbi	0x13, 4	; 19
    98a6:	99 97       	sbiw	r26, 0x29	; 41
    98a8:	95 94       	asr	r9
    98aa:	93 91       	.word	0x9193	; ????
    98ac:	90 8f       	std	Z+24, r25	; 0x18
    98ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    98b0:	8b 8a       	std	Y+19, r8	; 0x13
    98b2:	89 88       	ldd	r8, Y+17	; 0x11
    98b4:	88 87       	std	Y+8, r24	; 0x08
    98b6:	86 85       	ldd	r24, Z+14	; 0x0e
    98b8:	85 84       	ldd	r8, Z+13	; 0x0d
    98ba:	84 84       	ldd	r8, Z+12	; 0x0c
    98bc:	83 83       	std	Z+3, r24	; 0x03
    98be:	83 83       	std	Z+3, r24	; 0x03
    98c0:	83 83       	std	Z+3, r24	; 0x03
    98c2:	83 83       	std	Z+3, r24	; 0x03
    98c4:	83 84       	ldd	r8, Z+11	; 0x0b
    98c6:	84 84       	ldd	r8, Z+12	; 0x0c
    98c8:	85 85       	ldd	r24, Z+13	; 0x0d
    98ca:	86 87       	std	Z+14, r24	; 0x0e
    98cc:	88 88       	ldd	r8, Y+16	; 0x10
    98ce:	89 8a       	std	Y+17, r8	; 0x11
    98d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    98d2:	8d 8f       	std	Y+29, r24	; 0x1d
    98d4:	90 91 93 94 	lds	r25, 0x9493
    98d8:	95 97       	sbiw	r26, 0x25	; 37
    98da:	99 9a       	sbi	0x13, 1	; 19
    98dc:	9c 9e       	mul	r9, r28
    98de:	9f a1       	ldd	r25, Y+39	; 0x27
    98e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    98e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    98e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    98e6:	af b1       	in	r26, 0x0f	; 15
    98e8:	b4 b6       	in	r11, 0x34	; 52
    98ea:	b8 ba       	out	0x18, r11	; 24
    98ec:	bd bf       	out	0x3d, r27	; 61
    98ee:	c1 c3       	rjmp	.+1922   	; 0xa072 <LBGetNextFrameReverse+0x4c>
    98f0:	c6 c8       	rjmp	.-3700   	; 0x8a7e <ProcessMusic+0xe0>
    98f2:	ca cc       	rjmp	.-1644   	; 0x9288 <waves+0x188>
    98f4:	ce d0       	rcall	.+412    	; 0x9a92 <waves+0x992>
    98f6:	d2 d4       	rcall	.+2468   	; 0xa29c <LBLineIntersect+0xba>
    98f8:	d6 d7       	rcall	.+4012   	; 0xa8a6 <player_spawn+0x10>
    98fa:	d7 d7       	rcall	.+4014   	; 0xa8aa <player_spawn+0x14>
    98fc:	d4 fe       	sbrs	r13, 4
    98fe:	e5 e9       	ldi	r30, 0x95	; 149
    9900:	f9 f8       	.word	0xf8f9	; ????
    9902:	f9 f5       	brne	.+126    	; 0x9982 <waves+0x882>
    9904:	eb e1       	ldi	r30, 0x1B	; 27
    9906:	dd de       	rcall	.-582    	; 0x96c2 <waves+0x5c2>
    9908:	e0 e2       	ldi	r30, 0x20	; 32
    990a:	e4 e5       	ldi	r30, 0x54	; 84
    990c:	e6 e5       	ldi	r30, 0x56	; 86
    990e:	e4 e2       	ldi	r30, 0x24	; 36
    9910:	de d9       	rcall	.-3140   	; 0x8cce <ProcessMusic+0x330>
    9912:	d2 ca       	rjmp	.-2652   	; 0x8eb8 <esmw+0x72>
    9914:	c1 b7       	in	r28, 0x31	; 49
    9916:	ac a2       	std	Y+36, r10	; 0x24
    9918:	99 91       	ld	r25, Y+
    991a:	8a 86       	std	Y+10, r8	; 0x0a
    991c:	83 81       	ldd	r24, Z+3	; 0x03
    991e:	80 80       	ld	r8, Z
    9920:	81 82       	std	Z+1, r8	; 0x01
    9922:	83 85       	ldd	r24, Z+11	; 0x0b
    9924:	86 88       	ldd	r8, Z+22	; 0x16
    9926:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9928:	8d 8f       	std	Y+29, r24	; 0x1d
    992a:	90 92 93 95 	sts	0x9593, r9
    992e:	96 97       	sbiw	r26, 0x26	; 38
    9930:	98 99       	sbic	0x13, 0	; 19
    9932:	9a 9b       	sbis	0x13, 2	; 19
    9934:	9b 9c       	mul	r9, r11
    9936:	9d 9d       	mul	r25, r13
    9938:	9d 9e       	mul	r9, r29
    993a:	9e 9e       	mul	r9, r30
    993c:	9f 9f       	mul	r25, r31
    993e:	9f 9f       	mul	r25, r31
    9940:	9f 9f       	mul	r25, r31
    9942:	9f 9e       	mul	r9, r31
    9944:	9e 9e       	mul	r9, r30
    9946:	9d 9d       	mul	r25, r13
    9948:	9d 9c       	mul	r9, r13
    994a:	9b 9b       	sbis	0x13, 3	; 19
    994c:	9a 99       	sbic	0x13, 2	; 19
    994e:	98 97       	sbiw	r26, 0x28	; 40
    9950:	96 95       	lsr	r25
    9952:	93 92       	.word	0x9293	; ????
    9954:	90 8f       	std	Z+24, r25	; 0x18
    9956:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9958:	8a 88       	ldd	r8, Y+18	; 0x12
    995a:	86 85       	ldd	r24, Z+14	; 0x0e
    995c:	83 82       	std	Z+3, r8	; 0x03
    995e:	81 80       	ldd	r8, Z+1	; 0x01
    9960:	80 81       	ld	r24, Z
    9962:	83 86       	std	Z+11, r8	; 0x0b
    9964:	8a 91       	ld	r24, -Y
    9966:	99 a2       	std	Y+33, r9	; 0x21
    9968:	ac b7       	in	r26, 0x3c	; 60
    996a:	c1 ca       	rjmp	.-2686   	; 0x8eee <esmw+0xa8>
    996c:	d2 d9       	rcall	.-3164   	; 0x8d12 <ProcessMusic+0x374>
    996e:	de e2       	ldi	r29, 0x2E	; 46
    9970:	e4 e5       	ldi	r30, 0x54	; 84
    9972:	e6 e5       	ldi	r30, 0x56	; 86
    9974:	e4 e2       	ldi	r30, 0x24	; 36
    9976:	e0 de       	rcall	.-576    	; 0x9738 <waves+0x638>
    9978:	dd e1       	ldi	r29, 0x1D	; 29
    997a:	eb f5       	brvc	.+122    	; 0x99f6 <waves+0x8f6>
    997c:	f9 f8       	.word	0xf8f9	; ????
    997e:	f9 00       	.word	0x00f9	; ????
    9980:	07 08       	sbc	r0, r7
    9982:	07 0b       	sbc	r16, r23
    9984:	15 1f       	adc	r17, r21
    9986:	23 22       	and	r2, r19
    9988:	20 1e       	adc	r2, r16
    998a:	1c 1b       	sub	r17, r28
    998c:	1a 1b       	sub	r17, r26
    998e:	1c 1e       	adc	r1, r28
    9990:	22 27       	eor	r18, r18
    9992:	2e 36       	cpi	r18, 0x6E	; 110
    9994:	3f 49       	sbci	r19, 0x9F	; 159
    9996:	54 5e       	subi	r21, 0xE4	; 228
    9998:	67 6f       	ori	r22, 0xF7	; 247
    999a:	76 7a       	andi	r23, 0xA6	; 166
    999c:	7e 7f       	andi	r23, 0xFE	; 254
    999e:	7f 7f       	andi	r23, 0xFF	; 255
    99a0:	7f 7e       	andi	r23, 0xEF	; 239
    99a2:	7d 7b       	andi	r23, 0xBD	; 189
    99a4:	7a 78       	andi	r23, 0x8A	; 138
    99a6:	76 74       	andi	r23, 0x46	; 70
    99a8:	73 71       	andi	r23, 0x13	; 19
    99aa:	70 6e       	ori	r23, 0xE0	; 224
    99ac:	6d 6b       	ori	r22, 0xBD	; 189
    99ae:	6a 69       	ori	r22, 0x9A	; 154
    99b0:	68 67       	ori	r22, 0x78	; 120
    99b2:	66 65       	ori	r22, 0x56	; 86
    99b4:	65 64       	ori	r22, 0x45	; 69
    99b6:	64 63       	ori	r22, 0x34	; 52
    99b8:	63 62       	ori	r22, 0x23	; 35
    99ba:	62 62       	ori	r22, 0x22	; 34
    99bc:	61 61       	ori	r22, 0x11	; 17
    99be:	61 61       	ori	r22, 0x11	; 17
    99c0:	61 61       	ori	r22, 0x11	; 17
    99c2:	61 62       	ori	r22, 0x21	; 33
    99c4:	62 62       	ori	r22, 0x22	; 34
    99c6:	63 63       	ori	r22, 0x33	; 51
    99c8:	63 64       	ori	r22, 0x43	; 67
    99ca:	65 65       	ori	r22, 0x55	; 85
    99cc:	66 67       	ori	r22, 0x76	; 118
    99ce:	68 69       	ori	r22, 0x98	; 152
    99d0:	6a 6b       	ori	r22, 0xBA	; 186
    99d2:	6d 6e       	ori	r22, 0xED	; 237
    99d4:	70 71       	andi	r23, 0x10	; 16
    99d6:	73 74       	andi	r23, 0x43	; 67
    99d8:	76 78       	andi	r23, 0x86	; 134
    99da:	7a 7b       	andi	r23, 0xBA	; 186
    99dc:	7d 7e       	andi	r23, 0xED	; 237
    99de:	7f 7f       	andi	r23, 0xFF	; 255
    99e0:	7f 7f       	andi	r23, 0xFF	; 255
    99e2:	7e 7a       	andi	r23, 0xAE	; 174
    99e4:	76 6f       	ori	r23, 0xF6	; 246
    99e6:	67 5e       	subi	r22, 0xE7	; 231
    99e8:	54 49       	sbci	r21, 0x94	; 148
    99ea:	3f 36       	cpi	r19, 0x6F	; 111
    99ec:	2e 27       	eor	r18, r30
    99ee:	22 1e       	adc	r2, r18
    99f0:	1c 1b       	sub	r17, r28
    99f2:	1a 1b       	sub	r17, r26
    99f4:	1c 1e       	adc	r1, r28
    99f6:	20 22       	and	r2, r16
    99f8:	23 1f       	adc	r18, r19
    99fa:	15 0b       	sbc	r17, r21
    99fc:	07 08       	sbc	r0, r7
    99fe:	07 00       	.word	0x0007	; ????
    9a00:	1f 31       	cpi	r17, 0x1F	; 31
    9a02:	3d 44       	sbci	r19, 0x4D	; 77
    9a04:	4e 53       	subi	r20, 0x3E	; 62
    9a06:	54 56       	subi	r21, 0x64	; 100
    9a08:	5a 5f       	subi	r21, 0xFA	; 250
    9a0a:	64 69       	ori	r22, 0x94	; 148
    9a0c:	6e 74       	andi	r22, 0x4E	; 78
    9a0e:	76 79       	andi	r23, 0x96	; 150
    9a10:	7c 7f       	andi	r23, 0xFC	; 252
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	7f 7f       	andi	r23, 0xFF	; 255
    9a42:	7f 7f       	andi	r23, 0xFF	; 255
    9a44:	7f 7f       	andi	r23, 0xFF	; 255
    9a46:	7f 7f       	andi	r23, 0xFF	; 255
    9a48:	7f 7f       	andi	r23, 0xFF	; 255
    9a4a:	7f 7f       	andi	r23, 0xFF	; 255
    9a4c:	7f 7f       	andi	r23, 0xFF	; 255
    9a4e:	7f 7f       	andi	r23, 0xFF	; 255
    9a50:	7f 7f       	andi	r23, 0xFF	; 255
    9a52:	7f 7f       	andi	r23, 0xFF	; 255
    9a54:	7f 7f       	andi	r23, 0xFF	; 255
    9a56:	7f 7f       	andi	r23, 0xFF	; 255
    9a58:	7f 7f       	andi	r23, 0xFF	; 255
    9a5a:	7f 7f       	andi	r23, 0xFF	; 255
    9a5c:	7f 7f       	andi	r23, 0xFF	; 255
    9a5e:	7f 7f       	andi	r23, 0xFF	; 255
    9a60:	7f 7f       	andi	r23, 0xFF	; 255
    9a62:	7f 7f       	andi	r23, 0xFF	; 255
    9a64:	7f 7f       	andi	r23, 0xFF	; 255
    9a66:	7f 7f       	andi	r23, 0xFF	; 255
    9a68:	7f 7f       	andi	r23, 0xFF	; 255
    9a6a:	7f 7f       	andi	r23, 0xFF	; 255
    9a6c:	7f 7f       	andi	r23, 0xFF	; 255
    9a6e:	7f 7f       	andi	r23, 0xFF	; 255
    9a70:	7f 7f       	andi	r23, 0xFF	; 255
    9a72:	7f 7f       	andi	r23, 0xFF	; 255
    9a74:	7f 7f       	andi	r23, 0xFF	; 255
    9a76:	7f 7f       	andi	r23, 0xFF	; 255
    9a78:	7f 7f       	andi	r23, 0xFF	; 255
    9a7a:	7f 7c       	andi	r23, 0xCF	; 207
    9a7c:	78 71       	andi	r23, 0x18	; 24
    9a7e:	68 4c       	sbci	r22, 0xC8	; 200
    9a80:	2c 1c       	adc	r2, r12
    9a82:	12 0c       	add	r1, r2
    9a84:	0a 0b       	sbc	r16, r26
    9a86:	0a 05       	cpc	r16, r10
    9a88:	fd f3       	brhs	.-2      	; 0x9a88 <waves+0x988>
    9a8a:	e9 df       	rcall	.-46     	; 0x9a5e <waves+0x95e>
    9a8c:	d4 ca       	rjmp	.-2648   	; 0x9036 <steptable+0x12e>
    9a8e:	c0 b7       	in	r28, 0x30	; 48
    9a90:	ae a6       	std	Y+46, r10	; 0x2e
    9a92:	9e 97       	sbiw	r26, 0x2e	; 46
    9a94:	91 8b       	std	Z+17, r25	; 0x11
    9a96:	86 85       	ldd	r24, Z+14	; 0x0e
    9a98:	82 80       	ldd	r8, Z+2	; 0x02
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 87       	std	Z+8, r24	; 0x08
    9af6:	91 9d       	mul	r25, r1
    9af8:	ac c4       	rjmp	.+2392   	; 0xa452 <wifiGetPBT+0x30>
    9afa:	cb d4       	rcall	.+2454   	; 0xa492 <wifiGetPBT+0x70>
    9afc:	dd f2       	brhs	.-74     	; 0x9ab4 <waves+0x9b4>
    9afe:	fa fa       	.word	0xfafa	; ????

00009b00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9b00:	2f 92       	push	r2
    9b02:	3f 92       	push	r3
    9b04:	4f 92       	push	r4
    9b06:	5f 92       	push	r5
    9b08:	6f 92       	push	r6
    9b0a:	7f 92       	push	r7
    9b0c:	8f 92       	push	r8
    9b0e:	9f 92       	push	r9
    9b10:	af 92       	push	r10
    9b12:	bf 92       	push	r11
    9b14:	cf 92       	push	r12
    9b16:	df 92       	push	r13
    9b18:	ef 92       	push	r14
    9b1a:	ff 92       	push	r15
    9b1c:	0f 93       	push	r16
    9b1e:	1f 93       	push	r17
    9b20:	cf 93       	push	r28
    9b22:	df 93       	push	r29
    9b24:	00 d0       	rcall	.+0      	; 0x9b26 <ProcessSprites+0x26>
    9b26:	00 d0       	rcall	.+0      	; 0x9b28 <ProcessSprites+0x28>
    9b28:	00 d0       	rcall	.+0      	; 0x9b2a <ProcessSprites+0x2a>
    9b2a:	cd b7       	in	r28, 0x3d	; 61
    9b2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    9b2e:	80 91 00 01 	lds	r24, 0x0100
    9b32:	88 23       	and	r24, r24
    9b34:	09 f4       	brne	.+2      	; 0x9b38 <ProcessSprites+0x38>
    9b36:	b1 c0       	rjmp	.+354    	; 0x9c9a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    9b38:	80 91 ce 09 	lds	r24, 0x09CE
    9b3c:	80 93 cd 09 	sts	0x09CD, r24
	free_tile_index = user_ram_tiles_c;
    9b40:	80 93 cc 09 	sts	0x09CC, r24
    9b44:	00 e0       	ldi	r16, 0x00	; 0
    9b46:	10 e0       	ldi	r17, 0x00	; 0
    9b48:	f8 01       	movw	r30, r16
    9b4a:	e8 59       	subi	r30, 0x98	; 152
    9b4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    9b4e:	81 81       	ldd	r24, Z+1	; 0x01
    9b50:	90 81       	ld	r25, Z
    9b52:	32 81       	ldd	r19, Z+2	; 0x02
    9b54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    9b56:	28 e0       	ldi	r18, 0x08	; 8
    9b58:	29 0f       	add	r18, r25
    9b5a:	26 95       	lsr	r18
    9b5c:	26 95       	lsr	r18
    9b5e:	26 95       	lsr	r18
    9b60:	33 24       	eor	r3, r3
    9b62:	3a 94       	dec	r3
    9b64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    9b66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    9b68:	19 f0       	breq	.+6      	; 0x9b70 <ProcessSprites+0x70>
    9b6a:	e2 e0       	ldi	r30, 0x02	; 2
    9b6c:	2e 2e       	mov	r2, r30
    9b6e:	02 c0       	rjmp	.+4      	; 0x9b74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    9b70:	22 24       	eor	r2, r2
    9b72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    9b74:	28 e0       	ldi	r18, 0x08	; 8
    9b76:	28 0f       	add	r18, r24
    9b78:	52 2e       	mov	r5, r18
    9b7a:	56 94       	lsr	r5
    9b7c:	56 94       	lsr	r5
    9b7e:	56 94       	lsr	r5
    9b80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    9b82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    9b84:	19 f0       	breq	.+6      	; 0x9b8c <ProcessSprites+0x8c>
    9b86:	22 e0       	ldi	r18, 0x02	; 2
    9b88:	29 83       	std	Y+1, r18	; 0x01
    9b8a:	02 c0       	rjmp	.+4      	; 0x9b90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    9b8c:	e1 e0       	ldi	r30, 0x01	; 1
    9b8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    9b90:	68 2e       	mov	r6, r24
    9b92:	71 2c       	mov	r7, r1
    9b94:	76 2c       	mov	r7, r6
    9b96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9b98:	69 0e       	add	r6, r25
    9b9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    9b9c:	50 e0       	ldi	r21, 0x00	; 0
    9b9e:	54 2f       	mov	r21, r20
    9ba0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9ba2:	ca 01       	movw	r24, r20
    9ba4:	83 0f       	add	r24, r19
    9ba6:	91 1d       	adc	r25, r1
    9ba8:	9b 83       	std	Y+3, r25	; 0x03
    9baa:	8a 83       	std	Y+2, r24	; 0x02
    9bac:	e1 2c       	mov	r14, r1
    9bae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    9bb0:	9e e1       	ldi	r25, 0x1E	; 30
    9bb2:	59 9e       	mul	r5, r25
    9bb4:	50 01       	movw	r10, r0
    9bb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    9bb8:	9e 2c       	mov	r9, r14
    9bba:	88 24       	eor	r8, r8
    9bbc:	43 2c       	mov	r4, r3
    9bbe:	c1 2c       	mov	r12, r1
    9bc0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    9bc2:	ed e1       	ldi	r30, 0x1D	; 29
    9bc4:	e4 15       	cp	r30, r4
    9bc6:	08 f4       	brcc	.+2      	; 0x9bca <ProcessSprites+0xca>
    9bc8:	53 c0       	rjmp	.+166    	; 0x9c70 <ProcessSprites+0x170>
    9bca:	fb e1       	ldi	r31, 0x1B	; 27
    9bcc:	f5 15       	cp	r31, r5
    9bce:	08 f4       	brcc	.+2      	; 0x9bd2 <ProcessSprites+0xd2>
    9bd0:	4f c0       	rjmp	.+158    	; 0x9c70 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    9bd2:	c5 01       	movw	r24, r10
    9bd4:	84 0d       	add	r24, r4
    9bd6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    9bd8:	9c 01       	movw	r18, r24
    9bda:	20 5e       	subi	r18, 0xE0	; 224
    9bdc:	3e 4f       	sbci	r19, 0xFE	; 254
    9bde:	3e 83       	std	Y+6, r19	; 0x06
    9be0:	2d 83       	std	Y+5, r18	; 0x05
    9be2:	f9 01       	movw	r30, r18
    9be4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    9be6:	81 e0       	ldi	r24, 0x01	; 1
    9be8:	94 31       	cpi	r25, 0x14	; 20
    9bea:	08 f4       	brcc	.+2      	; 0x9bee <ProcessSprites+0xee>
    9bec:	80 e0       	ldi	r24, 0x00	; 0
    9bee:	21 e0       	ldi	r18, 0x01	; 1
    9bf0:	30 91 cd 09 	lds	r19, 0x09CD
    9bf4:	93 17       	cp	r25, r19
    9bf6:	18 f0       	brcs	.+6      	; 0x9bfe <ProcessSprites+0xfe>
    9bf8:	20 e0       	ldi	r18, 0x00	; 0
    9bfa:	88 23       	and	r24, r24
    9bfc:	61 f1       	breq	.+88     	; 0x9c56 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    9bfe:	60 91 cc 09 	lds	r22, 0x09CC
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    9c02:	64 31       	cpi	r22, 0x14	; 20
    9c04:	30 f5       	brcc	.+76     	; 0x9c52 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    9c06:	88 23       	and	r24, r24
    9c08:	31 f0       	breq	.+12     	; 0x9c16 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    9c0a:	8c ee       	ldi	r24, 0xEC	; 236
    9c0c:	89 0f       	add	r24, r25
    9c0e:	9c 83       	std	Y+4, r25	; 0x04
    9c10:	0e 94 87 3d 	call	0x7b0e	; 0x7b0e <CopyFlashTile>
    9c14:	06 c0       	rjmp	.+12     	; 0x9c22 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    9c16:	22 23       	and	r18, r18
    9c18:	29 f0       	breq	.+10     	; 0x9c24 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    9c1a:	89 2f       	mov	r24, r25
    9c1c:	9c 83       	std	Y+4, r25	; 0x04
    9c1e:	0e 94 16 3e 	call	0x7c2c	; 0x7c2c <CopyRamTile>
    9c22:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    9c24:	80 91 cc 09 	lds	r24, 0x09CC
    9c28:	e8 2f       	mov	r30, r24
    9c2a:	f0 e0       	ldi	r31, 0x00	; 0
    9c2c:	9f 01       	movw	r18, r30
    9c2e:	22 0f       	add	r18, r18
    9c30:	33 1f       	adc	r19, r19
    9c32:	e2 0f       	add	r30, r18
    9c34:	f3 1f       	adc	r31, r19
    9c36:	e0 57       	subi	r30, 0x70	; 112
    9c38:	f6 4f       	sbci	r31, 0xF6	; 246
    9c3a:	2d 81       	ldd	r18, Y+5	; 0x05
    9c3c:	3e 81       	ldd	r19, Y+6	; 0x06
    9c3e:	31 83       	std	Z+1, r19	; 0x01
    9c40:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    9c42:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    9c44:	f9 01       	movw	r30, r18
    9c46:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    9c48:	91 e0       	ldi	r25, 0x01	; 1
    9c4a:	98 0f       	add	r25, r24
    9c4c:	90 93 cc 09 	sts	0x09CC, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    9c50:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    9c52:	94 31       	cpi	r25, 0x14	; 20
    9c54:	68 f4       	brcc	.+26     	; 0x9c70 <ProcessSprites+0x170>
    9c56:	80 91 cd 09 	lds	r24, 0x09CD
    9c5a:	98 17       	cp	r25, r24
    9c5c:	48 f0       	brcs	.+18     	; 0x9c70 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9c5e:	93 01       	movw	r18, r6
    9c60:	a6 01       	movw	r20, r12
    9c62:	48 0d       	add	r20, r8
    9c64:	59 1d       	adc	r21, r9
    9c66:	6a 81       	ldd	r22, Y+2	; 0x02
    9c68:	7b 81       	ldd	r23, Y+3	; 0x03
    9c6a:	89 2f       	mov	r24, r25
    9c6c:	0e 94 b6 3e 	call	0x7d6c	; 0x7d6c <BlitSpritePart>
    9c70:	ff ef       	ldi	r31, 0xFF	; 255
    9c72:	cf 1a       	sub	r12, r31
    9c74:	df 0a       	sbc	r13, r31
    9c76:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    9c78:	c2 14       	cp	r12, r2
    9c7a:	08 f4       	brcc	.+2      	; 0x9c7e <ProcessSprites+0x17e>
    9c7c:	a2 cf       	rjmp	.-188    	; 0x9bc2 <ProcessSprites+0xc2>
    9c7e:	2f ef       	ldi	r18, 0xFF	; 255
    9c80:	e2 1a       	sub	r14, r18
    9c82:	f2 0a       	sbc	r15, r18
    9c84:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9c86:	99 81       	ldd	r25, Y+1	; 0x01
    9c88:	e9 16       	cp	r14, r25
    9c8a:	08 f4       	brcc	.+2      	; 0x9c8e <ProcessSprites+0x18e>
    9c8c:	91 cf       	rjmp	.-222    	; 0x9bb0 <ProcessSprites+0xb0>
    9c8e:	0c 5f       	subi	r16, 0xFC	; 252
    9c90:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9c92:	08 32       	cpi	r16, 0x28	; 40
    9c94:	11 05       	cpc	r17, r1
    9c96:	09 f0       	breq	.+2      	; 0x9c9a <ProcessSprites+0x19a>
    9c98:	57 cf       	rjmp	.-338    	; 0x9b48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    9c9a:	26 96       	adiw	r28, 0x06	; 6
    9c9c:	0f b6       	in	r0, 0x3f	; 63
    9c9e:	f8 94       	cli
    9ca0:	de bf       	out	0x3e, r29	; 62
    9ca2:	0f be       	out	0x3f, r0	; 63
    9ca4:	cd bf       	out	0x3d, r28	; 61
    9ca6:	df 91       	pop	r29
    9ca8:	cf 91       	pop	r28
    9caa:	1f 91       	pop	r17
    9cac:	0f 91       	pop	r16
    9cae:	ff 90       	pop	r15
    9cb0:	ef 90       	pop	r14
    9cb2:	df 90       	pop	r13
    9cb4:	cf 90       	pop	r12
    9cb6:	bf 90       	pop	r11
    9cb8:	af 90       	pop	r10
    9cba:	9f 90       	pop	r9
    9cbc:	8f 90       	pop	r8
    9cbe:	7f 90       	pop	r7
    9cc0:	6f 90       	pop	r6
    9cc2:	5f 90       	pop	r5
    9cc4:	4f 90       	pop	r4
    9cc6:	3f 90       	pop	r3
    9cc8:	2f 90       	pop	r2
    9cca:	08 95       	ret

00009ccc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9ccc:	df 92       	push	r13
    9cce:	ef 92       	push	r14
    9cd0:	ff 92       	push	r15
    9cd2:	0f 93       	push	r16
    9cd4:	1f 93       	push	r17
    9cd6:	cf 93       	push	r28
    9cd8:	df 93       	push	r29
    9cda:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9cdc:	fb 01       	movw	r30, r22
    9cde:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9ce0:	31 96       	adiw	r30, 0x01	; 1
    9ce2:	64 91       	lpm	r22, Z
    9ce4:	5f ef       	ldi	r21, 0xFF	; 255
    9ce6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    9ce8:	24 2f       	mov	r18, r20
    9cea:	21 70       	andi	r18, 0x01	; 1
    9cec:	40 ff       	sbrs	r20, 0
    9cee:	04 c0       	rjmp	.+8      	; 0x9cf8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    9cf0:	95 2f       	mov	r25, r21
			dx=-1;
    9cf2:	ff 24       	eor	r15, r15
    9cf4:	fa 94       	dec	r15
    9cf6:	03 c0       	rjmp	.+6      	; 0x9cfe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    9cf8:	ff 24       	eor	r15, r15
    9cfa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9cfc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9cfe:	41 ff       	sbrs	r20, 1
    9d00:	05 c0       	rjmp	.+10     	; 0x9d0c <MapSprite2+0x40>
			y=(mapHeight-1);
    9d02:	7f ef       	ldi	r23, 0xFF	; 255
    9d04:	76 0f       	add	r23, r22
			dy=-1;
    9d06:	ee 24       	eor	r14, r14
    9d08:	ea 94       	dec	r14
    9d0a:	03 c0       	rjmp	.+6      	; 0x9d12 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9d0c:	ee 24       	eor	r14, r14
    9d0e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9d10:	70 e0       	ldi	r23, 0x00	; 0
    9d12:	21 11       	cpse	r18, r1
    9d14:	01 c0       	rjmp	.+2      	; 0x9d18 <MapSprite2+0x4c>
    9d16:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9d18:	00 e0       	ldi	r16, 0x00	; 0
    9d1a:	06 17       	cp	r16, r22
    9d1c:	09 f1       	breq	.+66     	; 0x9d60 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9d1e:	71 03       	mulsu	r23, r17
    9d20:	e0 01       	movw	r28, r0
    9d22:	11 24       	eor	r1, r1
    9d24:	d8 2e       	mov	r13, r24
    9d26:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9d28:	8d 15       	cp	r24, r13
    9d2a:	b1 f0       	breq	.+44     	; 0x9d58 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9d2c:	9e 01       	movw	r18, r28
    9d2e:	29 0f       	add	r18, r25
    9d30:	31 1d       	adc	r19, r1
    9d32:	97 fd       	sbrc	r25, 7
    9d34:	3a 95       	dec	r19
    9d36:	2e 5f       	subi	r18, 0xFE	; 254
    9d38:	3f 4f       	sbci	r19, 0xFF	; 255
    9d3a:	fd 01       	movw	r30, r26
    9d3c:	e2 0f       	add	r30, r18
    9d3e:	f3 1f       	adc	r31, r19
    9d40:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9d42:	34 e0       	ldi	r19, 0x04	; 4
    9d44:	83 9f       	mul	r24, r19
    9d46:	f0 01       	movw	r30, r0
    9d48:	11 24       	eor	r1, r1
    9d4a:	e8 59       	subi	r30, 0x98	; 152
    9d4c:	fb 4f       	sbci	r31, 0xFB	; 251
    9d4e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9d50:	8f 5f       	subi	r24, 0xFF	; 255
    9d52:	43 83       	std	Z+3, r20	; 0x03
    9d54:	9f 0d       	add	r25, r15
    9d56:	e8 cf       	rjmp	.-48     	; 0x9d28 <MapSprite2+0x5c>
    9d58:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9d5a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9d5c:	95 2f       	mov	r25, r21
    9d5e:	dd cf       	rjmp	.-70     	; 0x9d1a <MapSprite2+0x4e>
	    }
	}
    9d60:	df 91       	pop	r29
    9d62:	cf 91       	pop	r28
    9d64:	1f 91       	pop	r17
    9d66:	0f 91       	pop	r16
    9d68:	ff 90       	pop	r15
    9d6a:	ef 90       	pop	r14
    9d6c:	df 90       	pop	r13
    9d6e:	08 95       	ret

00009d70 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9d70:	0f 93       	push	r16
    9d72:	cf 93       	push	r28
    9d74:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9d76:	30 e0       	ldi	r19, 0x00	; 0
    9d78:	30 17       	cp	r19, r16
    9d7a:	e1 f0       	breq	.+56     	; 0x9db4 <MoveSprite+0x44>
    9d7c:	b4 2f       	mov	r27, r20
    9d7e:	a0 e2       	ldi	r26, 0x20	; 32
    9d80:	a4 0f       	add	r26, r20
    9d82:	78 2f       	mov	r23, r24
    9d84:	72 0f       	add	r23, r18
    9d86:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9d88:	87 17       	cp	r24, r23
    9d8a:	81 f0       	breq	.+32     	; 0x9dac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9d8c:	c4 e0       	ldi	r28, 0x04	; 4
    9d8e:	8c 9f       	mul	r24, r28
    9d90:	f0 01       	movw	r30, r0
    9d92:	11 24       	eor	r1, r1
    9d94:	e8 59       	subi	r30, 0x98	; 152
    9d96:	fb 4f       	sbci	r31, 0xFB	; 251
    9d98:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9d9a:	41 3e       	cpi	r20, 0xE1	; 225
    9d9c:	51 05       	cpc	r21, r1
    9d9e:	14 f0       	brlt	.+4      	; 0x9da4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    9da0:	a1 83       	std	Z+1, r26	; 0x01
    9da2:	01 c0       	rjmp	.+2      	; 0x9da6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9da4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    9da6:	8f 5f       	subi	r24, 0xFF	; 255
    9da8:	98 5f       	subi	r25, 0xF8	; 248
    9daa:	ee cf       	rjmp	.-36     	; 0x9d88 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    9dac:	3f 5f       	subi	r19, 0xFF	; 255
    9dae:	48 5f       	subi	r20, 0xF8	; 248
    9db0:	5f 4f       	sbci	r21, 0xFF	; 255
    9db2:	e2 cf       	rjmp	.-60     	; 0x9d78 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    9db4:	cf 91       	pop	r28
    9db6:	0f 91       	pop	r16
    9db8:	08 95       	ret

00009dba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    9dba:	08 95       	ret

00009dbc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9dbc:	e8 e6       	ldi	r30, 0x68	; 104
    9dbe:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9dc0:	80 ef       	ldi	r24, 0xF0	; 240
    9dc2:	80 83       	st	Z, r24
    9dc4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    9dc6:	94 e0       	ldi	r25, 0x04	; 4
    9dc8:	e0 39       	cpi	r30, 0x90	; 144
    9dca:	f9 07       	cpc	r31, r25
    9dcc:	d1 f7       	brne	.-12     	; 0x9dc2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9dce:	10 92 cc 09 	sts	0x09CC, r1
		user_ram_tiles_c_tmp = 0U;
    9dd2:	10 92 ce 09 	sts	0x09CE, r1
    9dd6:	08 95       	ret

00009dd8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9dd8:	4f 92       	push	r4
    9dda:	5f 92       	push	r5
    9ddc:	6f 92       	push	r6
    9dde:	7f 92       	push	r7
    9de0:	8f 92       	push	r8
    9de2:	9f 92       	push	r9
    9de4:	af 92       	push	r10
    9de6:	bf 92       	push	r11
    9de8:	cf 92       	push	r12
    9dea:	df 92       	push	r13
    9dec:	ef 92       	push	r14
    9dee:	ff 92       	push	r15
    9df0:	0f 93       	push	r16
    9df2:	1f 93       	push	r17
    9df4:	cf 93       	push	r28
    9df6:	df 93       	push	r29
    9df8:	68 2e       	mov	r6, r24
    9dfa:	56 2e       	mov	r5, r22
    9dfc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9dfe:	fa 01       	movw	r30, r20
    9e00:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9e02:	31 96       	adiw	r30, 0x01	; 1
    9e04:	84 90       	lpm	r8, Z
    9e06:	c7 2c       	mov	r12, r7
    9e08:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9e0a:	00 e0       	ldi	r16, 0x00	; 0
    9e0c:	10 e0       	ldi	r17, 0x00	; 0
    9e0e:	91 2c       	mov	r9, r1
    9e10:	98 14       	cp	r9, r8
    9e12:	f1 f0       	breq	.+60     	; 0x9e50 <DrawMap+0x78>
    9e14:	c0 e0       	ldi	r28, 0x00	; 0
    9e16:	d0 e0       	ldi	r29, 0x00	; 0
    9e18:	58 01       	movw	r10, r16
    9e1a:	f2 e0       	ldi	r31, 0x02	; 2
    9e1c:	af 0e       	add	r10, r31
    9e1e:	b1 1c       	adc	r11, r1
    9e20:	49 2c       	mov	r4, r9
    9e22:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9e24:	c7 15       	cp	r28, r7
    9e26:	80 f4       	brcc	.+32     	; 0x9e48 <DrawMap+0x70>
    9e28:	95 01       	movw	r18, r10
    9e2a:	2c 0f       	add	r18, r28
    9e2c:	3d 1f       	adc	r19, r29
    9e2e:	f7 01       	movw	r30, r14
    9e30:	e2 0f       	add	r30, r18
    9e32:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9e34:	24 91       	lpm	r18, Z
    9e36:	42 2f       	mov	r20, r18
    9e38:	50 e0       	ldi	r21, 0x00	; 0
    9e3a:	64 2d       	mov	r22, r4
    9e3c:	8c 2f       	mov	r24, r28
    9e3e:	86 0d       	add	r24, r6
    9e40:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
    9e44:	21 96       	adiw	r28, 0x01	; 1
    9e46:	ee cf       	rjmp	.-36     	; 0x9e24 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9e48:	93 94       	inc	r9
    9e4a:	0c 0d       	add	r16, r12
    9e4c:	1d 1d       	adc	r17, r13
    9e4e:	e0 cf       	rjmp	.-64     	; 0x9e10 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9e50:	df 91       	pop	r29
    9e52:	cf 91       	pop	r28
    9e54:	1f 91       	pop	r17
    9e56:	0f 91       	pop	r16
    9e58:	ff 90       	pop	r15
    9e5a:	ef 90       	pop	r14
    9e5c:	df 90       	pop	r13
    9e5e:	cf 90       	pop	r12
    9e60:	bf 90       	pop	r11
    9e62:	af 90       	pop	r10
    9e64:	9f 90       	pop	r9
    9e66:	8f 90       	pop	r8
    9e68:	7f 90       	pop	r7
    9e6a:	6f 90       	pop	r6
    9e6c:	5f 90       	pop	r5
    9e6e:	4f 90       	pop	r4
    9e70:	08 95       	ret

00009e72 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9e72:	df 92       	push	r13
    9e74:	ef 92       	push	r14
    9e76:	ff 92       	push	r15
    9e78:	0f 93       	push	r16
    9e7a:	1f 93       	push	r17
    9e7c:	cf 93       	push	r28
    9e7e:	df 93       	push	r29
    9e80:	f6 2e       	mov	r15, r22
    9e82:	04 2f       	mov	r16, r20
    9e84:	d2 2e       	mov	r13, r18
    9e86:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9e88:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    9e8a:	8a e0       	ldi	r24, 0x0A	; 10
    9e8c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    9e8e:	01 11       	cpse	r16, r1
    9e90:	02 c0       	rjmp	.+4      	; 0x9e96 <PrintByte+0x24>
    9e92:	11 11       	cpse	r17, r1
    9e94:	07 c0       	rjmp	.+14     	; 0x9ea4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9e96:	80 2f       	mov	r24, r16
    9e98:	6e 2d       	mov	r22, r14
    9e9a:	0e 94 58 70 	call	0xe0b0	; 0xe0b0 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    9e9e:	40 e1       	ldi	r20, 0x10	; 16
    9ea0:	49 0f       	add	r20, r25
    9ea2:	05 c0       	rjmp	.+10     	; 0x9eae <PrintByte+0x3c>
		}else{
			if(zeropad){
    9ea4:	dd 20       	and	r13, r13
    9ea6:	11 f0       	breq	.+4      	; 0x9eac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    9ea8:	40 e1       	ldi	r20, 0x10	; 16
    9eaa:	01 c0       	rjmp	.+2      	; 0x9eae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    9eac:	40 e0       	ldi	r20, 0x00	; 0
    9eae:	6f 2d       	mov	r22, r15
    9eb0:	8c 2f       	mov	r24, r28
    9eb2:	0e 94 dd 40 	call	0x81ba	; 0x81ba <SetFont>
			}
		}
		val=val/10;
    9eb6:	80 2f       	mov	r24, r16
    9eb8:	6e 2d       	mov	r22, r14
    9eba:	0e 94 58 70 	call	0xe0b0	; 0xe0b0 <__udivmodqi4>
    9ebe:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    9ec0:	1f 5f       	subi	r17, 0xFF	; 255
    9ec2:	21 97       	sbiw	r28, 0x01	; 1
    9ec4:	13 30       	cpi	r17, 0x03	; 3
    9ec6:	19 f7       	brne	.-58     	; 0x9e8e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    9ec8:	df 91       	pop	r29
    9eca:	cf 91       	pop	r28
    9ecc:	1f 91       	pop	r17
    9ece:	0f 91       	pop	r16
    9ed0:	ff 90       	pop	r15
    9ed2:	ef 90       	pop	r14
    9ed4:	df 90       	pop	r13
    9ed6:	08 95       	ret

00009ed8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    9ed8:	0f 93       	push	r16
    9eda:	1f 93       	push	r17
    9edc:	cf 93       	push	r28
    9ede:	df 93       	push	r29
    9ee0:	06 2f       	mov	r16, r22
    9ee2:	c4 2f       	mov	r28, r20
    9ee4:	d5 2f       	mov	r29, r21
    9ee6:	18 2f       	mov	r17, r24
    9ee8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    9eea:	fe 01       	movw	r30, r28
    9eec:	44 91       	lpm	r20, Z
		if(c!=0){
    9eee:	44 23       	and	r20, r20
    9ef0:	49 f0       	breq	.+18     	; 0x9f04 <Print+0x2c>
			c=((c&127)-32);			
    9ef2:	4f 77       	andi	r20, 0x7F	; 127
    9ef4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    9ef6:	60 2f       	mov	r22, r16
    9ef8:	8c 2f       	mov	r24, r28
    9efa:	81 0f       	add	r24, r17
    9efc:	0e 94 dd 40 	call	0x81ba	; 0x81ba <SetFont>
    9f00:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9f02:	f3 cf       	rjmp	.-26     	; 0x9eea <Print+0x12>
	
}
    9f04:	df 91       	pop	r29
    9f06:	cf 91       	pop	r28
    9f08:	1f 91       	pop	r17
    9f0a:	0f 91       	pop	r16
    9f0c:	08 95       	ret

00009f0e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9f0e:	40 52       	subi	r20, 0x20	; 32
    9f10:	0c 94 dd 40 	jmp	0x81ba	; 0x81ba <SetFont>

00009f14 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9f14:	0f 93       	push	r16
    9f16:	1f 93       	push	r17
    9f18:	cf 93       	push	r28
    9f1a:	df 93       	push	r29
    9f1c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9f1e:	c0 e0       	ldi	r28, 0x00	; 0
    9f20:	d0 e0       	ldi	r29, 0x00	; 0
    9f22:	c0 17       	cp	r28, r16
    9f24:	d1 07       	cpc	r29, r17
    9f26:	44 f4       	brge	.+16     	; 0x9f38 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9f28:	0e 94 f7 40 	call	0x81ee	; 0x81ee <GetVsyncFlag>
    9f2c:	88 23       	and	r24, r24
    9f2e:	e1 f3       	breq	.-8      	; 0x9f28 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9f30:	0e 94 fb 40 	call	0x81f6	; 0x81f6 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9f34:	21 96       	adiw	r28, 0x01	; 1
    9f36:	f5 cf       	rjmp	.-22     	; 0x9f22 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9f38:	df 91       	pop	r29
    9f3a:	cf 91       	pop	r28
    9f3c:	1f 91       	pop	r17
    9f3e:	0f 91       	pop	r16
    9f40:	08 95       	ret

00009f42 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9f42:	80 93 1d 0b 	sts	0x0B1D, r24
	currFadeFrame=0;
    9f46:	10 92 20 0b 	sts	0x0B20, r1
	fadeActive=true;
    9f4a:	81 e0       	ldi	r24, 0x01	; 1
    9f4c:	80 93 1f 0b 	sts	0x0B1F, r24
		
	if(blocking){
    9f50:	66 23       	and	r22, r22
    9f52:	21 f0       	breq	.+8      	; 0x9f5c <doFade+0x1a>
		while(fadeActive==true);
    9f54:	80 91 1f 0b 	lds	r24, 0x0B1F
    9f58:	81 11       	cpse	r24, r1
    9f5a:	fc cf       	rjmp	.-8      	; 0x9f54 <doFade+0x12>
    9f5c:	08 95       	ret

00009f5e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9f5e:	81 11       	cpse	r24, r1
    9f60:	03 c0       	rjmp	.+6      	; 0x9f68 <FadeIn+0xa>
		DDRC=0xff;
    9f62:	8f ef       	ldi	r24, 0xFF	; 255
    9f64:	87 b9       	out	0x07, r24	; 7
		return;
    9f66:	08 95       	ret
	}
	fadeStep=1;
    9f68:	91 e0       	ldi	r25, 0x01	; 1
    9f6a:	90 93 21 0b 	sts	0x0B21, r25
	fadeDir=1;
    9f6e:	90 93 1e 0b 	sts	0x0B1E, r25
	doFade(speed,blocking);
    9f72:	0c 94 a1 4f 	jmp	0x9f42	; 0x9f42 <doFade>

00009f76 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9f76:	81 11       	cpse	r24, r1
    9f78:	02 c0       	rjmp	.+4      	; 0x9f7e <FadeOut+0x8>
		DDRC=0;
    9f7a:	17 b8       	out	0x07, r1	; 7
		return;
    9f7c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9f7e:	9c e0       	ldi	r25, 0x0C	; 12
    9f80:	90 93 21 0b 	sts	0x0B21, r25
	fadeDir=-1;
    9f84:	9f ef       	ldi	r25, 0xFF	; 255
    9f86:	90 93 1e 0b 	sts	0x0B1E, r25
	doFade(speed,blocking);
    9f8a:	0c 94 a1 4f 	jmp	0x9f42	; 0x9f42 <doFade>

00009f8e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9f8e:	80 91 1f 0b 	lds	r24, 0x0B1F
    9f92:	88 23       	and	r24, r24
    9f94:	01 f1       	breq	.+64     	; 0x9fd6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9f96:	80 91 20 0b 	lds	r24, 0x0B20
    9f9a:	81 11       	cpse	r24, r1
    9f9c:	19 c0       	rjmp	.+50     	; 0x9fd0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9f9e:	80 91 1d 0b 	lds	r24, 0x0B1D
    9fa2:	80 93 20 0b 	sts	0x0B20, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9fa6:	e0 91 21 0b 	lds	r30, 0x0B21
    9faa:	f0 e0       	ldi	r31, 0x00	; 0
    9fac:	e5 52       	subi	r30, 0x25	; 37
    9fae:	ff 4f       	sbci	r31, 0xFF	; 255
    9fb0:	e4 91       	lpm	r30, Z
    9fb2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9fb4:	90 91 1e 0b 	lds	r25, 0x0B1E
    9fb8:	80 91 21 0b 	lds	r24, 0x0B21
    9fbc:	89 0f       	add	r24, r25
    9fbe:	80 93 21 0b 	sts	0x0B21, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9fc2:	88 23       	and	r24, r24
    9fc4:	11 f0       	breq	.+4      	; 0x9fca <ProcessFading+0x3c>
    9fc6:	8d 30       	cpi	r24, 0x0D	; 13
    9fc8:	31 f4       	brne	.+12     	; 0x9fd6 <ProcessFading+0x48>
				fadeActive=false;
    9fca:	10 92 1f 0b 	sts	0x0B1F, r1
    9fce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9fd0:	81 50       	subi	r24, 0x01	; 1
    9fd2:	80 93 20 0b 	sts	0x0B20, r24
    9fd6:	08 95       	ret

00009fd8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    9fd8:	0c 94 c7 4f 	jmp	0x9f8e	; 0x9f8e <ProcessFading>

00009fdc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9fdc:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9fde:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9fe0:	93 81       	ldd	r25, Z+3	; 0x03
    9fe2:	9f 5f       	subi	r25, 0xFF	; 255
    9fe4:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9fe6:	22 81       	ldd	r18, Z+2	; 0x02
    9fe8:	80 81       	ld	r24, Z
    9fea:	92 17       	cp	r25, r18
    9fec:	38 f4       	brcc	.+14     	; 0x9ffc <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9fee:	e8 0f       	add	r30, r24
    9ff0:	f1 1d       	adc	r31, r1
    9ff2:	e8 0f       	add	r30, r24
    9ff4:	f1 1d       	adc	r31, r1
    9ff6:	86 81       	ldd	r24, Z+6	; 0x06
    9ff8:	97 81       	ldd	r25, Z+7	; 0x07
    9ffa:	08 95       	ret
	}
	anim->frame_count = 0;
    9ffc:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9ffe:	90 e0       	ldi	r25, 0x00	; 0
    a000:	01 96       	adiw	r24, 0x01	; 1
    a002:	61 81       	ldd	r22, Z+1	; 0x01
    a004:	70 e0       	ldi	r23, 0x00	; 0
    a006:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    a00a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a00c:	81 11       	cpse	r24, r1
    a00e:	02 c0       	rjmp	.+4      	; 0xa014 <LBGetNextFrame+0x38>
    a010:	21 e0       	ldi	r18, 0x01	; 1
    a012:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    a014:	99 27       	eor	r25, r25
    a016:	03 96       	adiw	r24, 0x03	; 3
    a018:	88 0f       	add	r24, r24
    a01a:	99 1f       	adc	r25, r25
    a01c:	e8 0f       	add	r30, r24
    a01e:	f9 1f       	adc	r31, r25
    a020:	80 81       	ld	r24, Z
    a022:	91 81       	ldd	r25, Z+1	; 0x01
}
    a024:	08 95       	ret

0000a026 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    a026:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a028:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a02a:	93 81       	ldd	r25, Z+3	; 0x03
    a02c:	9f 5f       	subi	r25, 0xFF	; 255
    a02e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a030:	22 81       	ldd	r18, Z+2	; 0x02
    a032:	80 81       	ld	r24, Z
    a034:	92 17       	cp	r25, r18
    a036:	e0 f0       	brcs	.+56     	; 0xa070 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    a038:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    a03a:	95 81       	ldd	r25, Z+5	; 0x05
    a03c:	99 23       	and	r25, r25
    a03e:	49 f0       	breq	.+18     	; 0xa052 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    a040:	81 50       	subi	r24, 0x01	; 1
    a042:	10 f0       	brcs	.+4      	; 0xa048 <LBGetNextFrameReverse+0x22>
    a044:	80 83       	st	Z, r24
    a046:	13 c0       	rjmp	.+38     	; 0xa06e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    a048:	10 82       	st	Z, r1
			anim->looped = 1;
    a04a:	81 e0       	ldi	r24, 0x01	; 1
    a04c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    a04e:	15 82       	std	Z+5, r1	; 0x05
    a050:	0e c0       	rjmp	.+28     	; 0xa06e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a052:	21 81       	ldd	r18, Z+1	; 0x01
    a054:	90 e0       	ldi	r25, 0x00	; 0
    a056:	01 96       	adiw	r24, 0x01	; 1
    a058:	62 2f       	mov	r22, r18
    a05a:	70 e0       	ldi	r23, 0x00	; 0
    a05c:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    a060:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    a062:	81 11       	cpse	r24, r1
    a064:	04 c0       	rjmp	.+8      	; 0xa06e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    a066:	81 e0       	ldi	r24, 0x01	; 1
    a068:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    a06a:	21 50       	subi	r18, 0x01	; 1
    a06c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    a06e:	80 81       	ld	r24, Z
    a070:	e8 0f       	add	r30, r24
    a072:	f1 1d       	adc	r31, r1
    a074:	e8 0f       	add	r30, r24
    a076:	f1 1d       	adc	r31, r1
    a078:	86 81       	ldd	r24, Z+6	; 0x06
    a07a:	97 81       	ldd	r25, Z+7	; 0x07
}
    a07c:	08 95       	ret

0000a07e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a07e:	0f 93       	push	r16
    a080:	1f 93       	push	r17
    a082:	cf 93       	push	r28
    a084:	df 93       	push	r29
    a086:	1f 92       	push	r1
    a088:	cd b7       	in	r28, 0x3d	; 61
    a08a:	de b7       	in	r29, 0x3e	; 62
    a08c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    a08e:	86 2f       	mov	r24, r22
    a090:	69 83       	std	Y+1, r22	; 0x01
    a092:	0e 94 0b 41 	call	0x8216	; 0x8216 <ReadJoypad>
    a096:	d8 01       	movw	r26, r16
    a098:	15 96       	adiw	r26, 0x05	; 5
    a09a:	9c 93       	st	X, r25
    a09c:	8e 93       	st	-X, r24
    a09e:	14 97       	sbiw	r26, 0x04	; 4
    a0a0:	69 81       	ldd	r22, Y+1	; 0x01
    a0a2:	e6 2f       	mov	r30, r22
    a0a4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a0a6:	00 97       	sbiw	r24, 0x00	; 0
    a0a8:	51 f0       	breq	.+20     	; 0xa0be <LBGetJoyPadState+0x40>
    a0aa:	df 01       	movw	r26, r30
    a0ac:	aa 0f       	add	r26, r26
    a0ae:	bb 1f       	adc	r27, r27
    a0b0:	a8 5d       	subi	r26, 0xD8	; 216
    a0b2:	b5 4f       	sbci	r27, 0xF5	; 245
    a0b4:	2d 91       	ld	r18, X+
    a0b6:	3c 91       	ld	r19, X
    a0b8:	82 17       	cp	r24, r18
    a0ba:	93 07       	cpc	r25, r19
    a0bc:	21 f0       	breq	.+8      	; 0xa0c6 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a0be:	d8 01       	movw	r26, r16
    a0c0:	16 96       	adiw	r26, 0x06	; 6
    a0c2:	1c 92       	st	X, r1
    a0c4:	07 c0       	rjmp	.+14     	; 0xa0d4 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a0c6:	d8 01       	movw	r26, r16
    a0c8:	16 96       	adiw	r26, 0x06	; 6
    a0ca:	2c 91       	ld	r18, X
    a0cc:	16 97       	sbiw	r26, 0x06	; 6
    a0ce:	2f 5f       	subi	r18, 0xFF	; 255
    a0d0:	16 96       	adiw	r26, 0x06	; 6
    a0d2:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a0d4:	ee 0f       	add	r30, r30
    a0d6:	ff 1f       	adc	r31, r31
    a0d8:	e8 5d       	subi	r30, 0xD8	; 216
    a0da:	f5 4f       	sbci	r31, 0xF5	; 245
    a0dc:	20 81       	ld	r18, Z
    a0de:	31 81       	ldd	r19, Z+1	; 0x01
    a0e0:	a9 01       	movw	r20, r18
    a0e2:	40 95       	com	r20
    a0e4:	50 95       	com	r21
    a0e6:	48 23       	and	r20, r24
    a0e8:	59 23       	and	r21, r25
    a0ea:	d8 01       	movw	r26, r16
    a0ec:	11 96       	adiw	r26, 0x01	; 1
    a0ee:	5c 93       	st	X, r21
    a0f0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a0f2:	ac 01       	movw	r20, r24
    a0f4:	40 95       	com	r20
    a0f6:	50 95       	com	r21
    a0f8:	24 23       	and	r18, r20
    a0fa:	35 23       	and	r19, r21
    a0fc:	13 96       	adiw	r26, 0x03	; 3
    a0fe:	3c 93       	st	X, r19
    a100:	2e 93       	st	-X, r18
    a102:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a104:	91 83       	std	Z+1, r25	; 0x01
    a106:	80 83       	st	Z, r24
}
    a108:	0f 90       	pop	r0
    a10a:	df 91       	pop	r29
    a10c:	cf 91       	pop	r28
    a10e:	1f 91       	pop	r17
    a110:	0f 91       	pop	r16
    a112:	08 95       	ret

0000a114 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    a114:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    a116:	fb 01       	movw	r30, r22
    a118:	2e 2f       	mov	r18, r30
    a11a:	23 1b       	sub	r18, r19
    a11c:	24 17       	cp	r18, r20
    a11e:	28 f4       	brcc	.+10     	; 0xa12a <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    a120:	21 91       	ld	r18, Z+
    a122:	dc 01       	movw	r26, r24
    a124:	2d 93       	st	X+, r18
    a126:	cd 01       	movw	r24, r26
    a128:	f7 cf       	rjmp	.-18     	; 0xa118 <LBCopyChars+0x4>
	}
}
    a12a:	08 95       	ret

0000a12c <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    a12c:	af 92       	push	r10
    a12e:	bf 92       	push	r11
    a130:	cf 92       	push	r12
    a132:	df 92       	push	r13
    a134:	ef 92       	push	r14
    a136:	ff 92       	push	r15
    a138:	0f 93       	push	r16
    a13a:	1f 93       	push	r17
    a13c:	cf 93       	push	r28
    a13e:	df 93       	push	r29
    a140:	1f 92       	push	r1
    a142:	cd b7       	in	r28, 0x3d	; 61
    a144:	de b7       	in	r29, 0x3e	; 62
    a146:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    a148:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    a14a:	c6 2e       	mov	r12, r22
    a14c:	d1 2c       	mov	r13, r1
    a14e:	90 e0       	ldi	r25, 0x00	; 0
    a150:	5c 01       	movw	r10, r24
    a152:	a4 1a       	sub	r10, r20
    a154:	b5 0a       	sbc	r11, r21
    a156:	80 2f       	mov	r24, r16
    a158:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    a15a:	82 17       	cp	r24, r18
    a15c:	60 f4       	brcc	.+24     	; 0xa176 <LBPrintStr+0x4a>
    a15e:	c5 01       	movw	r24, r10
    a160:	80 0f       	add	r24, r16
    a162:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    a164:	f8 01       	movw	r30, r16
    a166:	41 91       	ld	r20, Z+
    a168:	8f 01       	movw	r16, r30
    a16a:	b6 01       	movw	r22, r12
    a16c:	29 83       	std	Y+1, r18	; 0x01
    a16e:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
    a172:	29 81       	ldd	r18, Y+1	; 0x01
    a174:	f0 cf       	rjmp	.-32     	; 0xa156 <LBPrintStr+0x2a>
	}
}
    a176:	0f 90       	pop	r0
    a178:	df 91       	pop	r29
    a17a:	cf 91       	pop	r28
    a17c:	1f 91       	pop	r17
    a17e:	0f 91       	pop	r16
    a180:	ff 90       	pop	r15
    a182:	ef 90       	pop	r14
    a184:	df 90       	pop	r13
    a186:	cf 90       	pop	r12
    a188:	bf 90       	pop	r11
    a18a:	af 90       	pop	r10
    a18c:	08 95       	ret

0000a18e <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a18e:	af 92       	push	r10
    a190:	cf 92       	push	r12
    a192:	ef 92       	push	r14
    a194:	ff 92       	push	r15
    a196:	0f 93       	push	r16
    a198:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a19a:	70 e0       	ldi	r23, 0x00	; 0
    a19c:	f1 2c       	mov	r15, r1
    a19e:	fb 01       	movw	r30, r22
    a1a0:	e2 0f       	add	r30, r18
    a1a2:	f1 1d       	adc	r31, r1
    a1a4:	ee 16       	cp	r14, r30
    a1a6:	ff 06       	cpc	r15, r31
    a1a8:	a4 f4       	brge	.+40     	; 0xa1d2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a1aa:	ea 0c       	add	r14, r10
    a1ac:	f1 1c       	adc	r15, r1
    a1ae:	6e 15       	cp	r22, r14
    a1b0:	7f 05       	cpc	r23, r15
    a1b2:	7c f4       	brge	.+30     	; 0xa1d2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a1b4:	28 2f       	mov	r18, r24
    a1b6:	30 e0       	ldi	r19, 0x00	; 0
    a1b8:	10 e0       	ldi	r17, 0x00	; 0
    a1ba:	c9 01       	movw	r24, r18
    a1bc:	84 0f       	add	r24, r20
    a1be:	91 1d       	adc	r25, r1
    a1c0:	08 17       	cp	r16, r24
    a1c2:	19 07       	cpc	r17, r25
    a1c4:	34 f4       	brge	.+12     	; 0xa1d2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a1c6:	0c 0d       	add	r16, r12
    a1c8:	11 1d       	adc	r17, r1
    a1ca:	81 e0       	ldi	r24, 0x01	; 1
    a1cc:	20 17       	cp	r18, r16
    a1ce:	31 07       	cpc	r19, r17
    a1d0:	0c f0       	brlt	.+2      	; 0xa1d4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a1d2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a1d4:	1f 91       	pop	r17
    a1d6:	0f 91       	pop	r16
    a1d8:	ff 90       	pop	r15
    a1da:	ef 90       	pop	r14
    a1dc:	cf 90       	pop	r12
    a1de:	af 90       	pop	r10
    a1e0:	08 95       	ret

0000a1e2 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    a1e2:	2f 92       	push	r2
    a1e4:	3f 92       	push	r3
    a1e6:	4f 92       	push	r4
    a1e8:	5f 92       	push	r5
    a1ea:	6f 92       	push	r6
    a1ec:	7f 92       	push	r7
    a1ee:	8f 92       	push	r8
    a1f0:	9f 92       	push	r9
    a1f2:	af 92       	push	r10
    a1f4:	bf 92       	push	r11
    a1f6:	cf 92       	push	r12
    a1f8:	df 92       	push	r13
    a1fa:	ef 92       	push	r14
    a1fc:	ff 92       	push	r15
    a1fe:	0f 93       	push	r16
    a200:	1f 93       	push	r17
    a202:	cf 93       	push	r28
    a204:	df 93       	push	r29
    a206:	00 d0       	rcall	.+0      	; 0xa208 <LBLineIntersect+0x26>
    a208:	00 d0       	rcall	.+0      	; 0xa20a <LBLineIntersect+0x28>
    a20a:	cd b7       	in	r28, 0x3d	; 61
    a20c:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a20e:	f1 2c       	mov	r15, r1
    a210:	8a 2c       	mov	r8, r10
    a212:	91 2c       	mov	r9, r1
    a214:	8e 18       	sub	r8, r14
    a216:	9f 08       	sbc	r9, r15
    a218:	a8 2e       	mov	r10, r24
    a21a:	b1 2c       	mov	r11, r1
    a21c:	24 2e       	mov	r2, r20
    a21e:	31 2c       	mov	r3, r1
    a220:	2a 18       	sub	r2, r10
    a222:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a224:	10 e0       	ldi	r17, 0x00	; 0
    a226:	d1 2c       	mov	r13, r1
    a228:	c0 1a       	sub	r12, r16
    a22a:	d1 0a       	sbc	r13, r17
    a22c:	46 2f       	mov	r20, r22
    a22e:	50 e0       	ldi	r21, 0x00	; 0
    a230:	5c 83       	std	Y+4, r21	; 0x04
    a232:	4b 83       	std	Y+3, r20	; 0x03
    a234:	82 2f       	mov	r24, r18
    a236:	90 e0       	ldi	r25, 0x00	; 0
    a238:	9a 83       	std	Y+2, r25	; 0x02
    a23a:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a23c:	82 9c       	mul	r8, r2
    a23e:	90 01       	movw	r18, r0
    a240:	83 9c       	mul	r8, r3
    a242:	30 0d       	add	r19, r0
    a244:	92 9c       	mul	r9, r2
    a246:	30 0d       	add	r19, r0
    a248:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a24a:	ca 01       	movw	r24, r20
    a24c:	e9 81       	ldd	r30, Y+1	; 0x01
    a24e:	fa 81       	ldd	r31, Y+2	; 0x02
    a250:	8e 1b       	sub	r24, r30
    a252:	9f 0b       	sbc	r25, r31
    a254:	c8 9e       	mul	r12, r24
    a256:	b0 01       	movw	r22, r0
    a258:	c9 9e       	mul	r12, r25
    a25a:	70 0d       	add	r23, r0
    a25c:	d8 9e       	mul	r13, r24
    a25e:	70 0d       	add	r23, r0
    a260:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a262:	62 0f       	add	r22, r18
    a264:	73 1f       	adc	r23, r19
    a266:	88 27       	eor	r24, r24
    a268:	77 fd       	sbrc	r23, 7
    a26a:	80 95       	com	r24
    a26c:	98 2f       	mov	r25, r24
    a26e:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    a272:	2b 01       	movw	r4, r22
    a274:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a276:	20 e0       	ldi	r18, 0x00	; 0
    a278:	30 e0       	ldi	r19, 0x00	; 0
    a27a:	a9 01       	movw	r20, r18
    a27c:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    a280:	88 23       	and	r24, r24
    a282:	09 f4       	brne	.+2      	; 0xa286 <LBLineIntersect+0xa4>
    a284:	6c c0       	rjmp	.+216    	; 0xa35e <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a286:	4b 81       	ldd	r20, Y+3	; 0x03
    a288:	5c 81       	ldd	r21, Y+4	; 0x04
    a28a:	4e 19       	sub	r20, r14
    a28c:	5f 09       	sbc	r21, r15
    a28e:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a290:	0a 19       	sub	r16, r10
    a292:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a294:	c4 9e       	mul	r12, r20
    a296:	c0 01       	movw	r24, r0
    a298:	c5 9e       	mul	r12, r21
    a29a:	90 0d       	add	r25, r0
    a29c:	d4 9e       	mul	r13, r20
    a29e:	90 0d       	add	r25, r0
    a2a0:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a2a2:	80 9e       	mul	r8, r16
    a2a4:	b0 01       	movw	r22, r0
    a2a6:	81 9e       	mul	r8, r17
    a2a8:	70 0d       	add	r23, r0
    a2aa:	90 9e       	mul	r9, r16
    a2ac:	70 0d       	add	r23, r0
    a2ae:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a2b0:	68 0f       	add	r22, r24
    a2b2:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a2b4:	88 27       	eor	r24, r24
    a2b6:	77 fd       	sbrc	r23, 7
    a2b8:	80 95       	com	r24
    a2ba:	98 2f       	mov	r25, r24
    a2bc:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a2c0:	a3 01       	movw	r20, r6
    a2c2:	92 01       	movw	r18, r4
    a2c4:	0e 94 03 71 	call	0xe206	; 0xe206 <__divsf3>
    a2c8:	4b 01       	movw	r8, r22
    a2ca:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a2cc:	20 e0       	ldi	r18, 0x00	; 0
    a2ce:	30 e0       	ldi	r19, 0x00	; 0
    a2d0:	a9 01       	movw	r20, r18
    a2d2:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    a2d6:	87 fd       	sbrc	r24, 7
    a2d8:	42 c0       	rjmp	.+132    	; 0xa35e <LBLineIntersect+0x17c>
    a2da:	20 e0       	ldi	r18, 0x00	; 0
    a2dc:	30 e0       	ldi	r19, 0x00	; 0
    a2de:	40 e8       	ldi	r20, 0x80	; 128
    a2e0:	5f e3       	ldi	r21, 0x3F	; 63
    a2e2:	c5 01       	movw	r24, r10
    a2e4:	b4 01       	movw	r22, r8
    a2e6:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    a2ea:	18 16       	cp	r1, r24
    a2ec:	c4 f1       	brlt	.+112    	; 0xa35e <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a2ee:	2e 9c       	mul	r2, r14
    a2f0:	b0 01       	movw	r22, r0
    a2f2:	2f 9c       	mul	r2, r15
    a2f4:	70 0d       	add	r23, r0
    a2f6:	3e 9c       	mul	r3, r14
    a2f8:	70 0d       	add	r23, r0
    a2fa:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a2fc:	29 81       	ldd	r18, Y+1	; 0x01
    a2fe:	3a 81       	ldd	r19, Y+2	; 0x02
    a300:	8b 81       	ldd	r24, Y+3	; 0x03
    a302:	9c 81       	ldd	r25, Y+4	; 0x04
    a304:	28 1b       	sub	r18, r24
    a306:	39 0b       	sbc	r19, r25
    a308:	20 9f       	mul	r18, r16
    a30a:	c0 01       	movw	r24, r0
    a30c:	21 9f       	mul	r18, r17
    a30e:	90 0d       	add	r25, r0
    a310:	30 9f       	mul	r19, r16
    a312:	90 0d       	add	r25, r0
    a314:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a316:	68 0f       	add	r22, r24
    a318:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a31a:	88 27       	eor	r24, r24
    a31c:	77 fd       	sbrc	r23, 7
    a31e:	80 95       	com	r24
    a320:	98 2f       	mov	r25, r24
    a322:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a326:	a3 01       	movw	r20, r6
    a328:	92 01       	movw	r18, r4
    a32a:	0e 94 03 71 	call	0xe206	; 0xe206 <__divsf3>
    a32e:	6b 01       	movw	r12, r22
    a330:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a332:	20 e0       	ldi	r18, 0x00	; 0
    a334:	30 e0       	ldi	r19, 0x00	; 0
    a336:	a9 01       	movw	r20, r18
    a338:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    a33c:	87 fd       	sbrc	r24, 7
    a33e:	0f c0       	rjmp	.+30     	; 0xa35e <LBLineIntersect+0x17c>
    a340:	11 e0       	ldi	r17, 0x01	; 1
    a342:	20 e0       	ldi	r18, 0x00	; 0
    a344:	30 e0       	ldi	r19, 0x00	; 0
    a346:	40 e8       	ldi	r20, 0x80	; 128
    a348:	5f e3       	ldi	r21, 0x3F	; 63
    a34a:	c7 01       	movw	r24, r14
    a34c:	b6 01       	movw	r22, r12
    a34e:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    a352:	18 16       	cp	r1, r24
    a354:	0c f0       	brlt	.+2      	; 0xa358 <LBLineIntersect+0x176>
    a356:	10 e0       	ldi	r17, 0x00	; 0
    a358:	81 e0       	ldi	r24, 0x01	; 1
    a35a:	81 27       	eor	r24, r17
    a35c:	01 c0       	rjmp	.+2      	; 0xa360 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a35e:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a360:	0f 90       	pop	r0
    a362:	0f 90       	pop	r0
    a364:	0f 90       	pop	r0
    a366:	0f 90       	pop	r0
    a368:	df 91       	pop	r29
    a36a:	cf 91       	pop	r28
    a36c:	1f 91       	pop	r17
    a36e:	0f 91       	pop	r16
    a370:	ff 90       	pop	r15
    a372:	ef 90       	pop	r14
    a374:	df 90       	pop	r13
    a376:	cf 90       	pop	r12
    a378:	bf 90       	pop	r11
    a37a:	af 90       	pop	r10
    a37c:	9f 90       	pop	r9
    a37e:	8f 90       	pop	r8
    a380:	7f 90       	pop	r7
    a382:	6f 90       	pop	r6
    a384:	5f 90       	pop	r5
    a386:	4f 90       	pop	r4
    a388:	3f 90       	pop	r3
    a38a:	2f 90       	pop	r2
    a38c:	08 95       	ret

0000a38e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a38e:	1f 93       	push	r17
    a390:	cf 93       	push	r28
    a392:	df 93       	push	r29
    a394:	1f 92       	push	r1
    a396:	cd b7       	in	r28, 0x3d	; 61
    a398:	de b7       	in	r29, 0x3e	; 62
    a39a:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    a39c:	80 e0       	ldi	r24, 0x00	; 0
    a39e:	90 e0       	ldi	r25, 0x00	; 0
    a3a0:	69 83       	std	Y+1, r22	; 0x01
    a3a2:	0e 94 0e 43 	call	0x861c	; 0x861c <GetPrngNumber>
    a3a6:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    a3a8:	69 81       	ldd	r22, Y+1	; 0x01
    a3aa:	70 e0       	ldi	r23, 0x00	; 0
    a3ac:	61 1b       	sub	r22, r17
    a3ae:	71 09       	sbc	r23, r1
    a3b0:	6f 5f       	subi	r22, 0xFF	; 255
    a3b2:	7f 4f       	sbci	r23, 0xFF	; 255
    a3b4:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
}
    a3b8:	81 0f       	add	r24, r17
    a3ba:	0f 90       	pop	r0
    a3bc:	df 91       	pop	r29
    a3be:	cf 91       	pop	r28
    a3c0:	1f 91       	pop	r17
    a3c2:	08 95       	ret

0000a3c4 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    a3c4:	cf 93       	push	r28
    a3c6:	df 93       	push	r29
    a3c8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a3ca:	c0 e0       	ldi	r28, 0x00	; 0
    a3cc:	cd 17       	cp	r28, r29
    a3ce:	31 f0       	breq	.+12     	; 0xa3dc <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    a3d0:	8f ef       	ldi	r24, 0xFF	; 255
    a3d2:	9f ef       	ldi	r25, 0xFF	; 255
    a3d4:	0e 94 17 41 	call	0x822e	; 0x822e <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a3d8:	cf 5f       	subi	r28, 0xFF	; 255
    a3da:	f8 cf       	rjmp	.-16     	; 0xa3cc <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    a3dc:	df 91       	pop	r29
    a3de:	cf 91       	pop	r28
    a3e0:	08 95       	ret

0000a3e2 <LBHideAllSprites>:

void LBHideAllSprites()
{
    a3e2:	e8 e6       	ldi	r30, 0x68	; 104
    a3e4:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    a3e6:	80 ef       	ldi	r24, 0xF0	; 240
    a3e8:	80 83       	st	Z, r24
    a3ea:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    a3ec:	94 e0       	ldi	r25, 0x04	; 4
    a3ee:	e0 39       	cpi	r30, 0x90	; 144
    a3f0:	f9 07       	cpc	r31, r25
    a3f2:	d1 f7       	brne	.-12     	; 0xa3e8 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    a3f4:	08 95       	ret

0000a3f6 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    a3f6:	1f 93       	push	r17
    a3f8:	cf 93       	push	r28
    a3fa:	df 93       	push	r29
    a3fc:	ec 01       	movw	r28, r24

	char c;
	while(str!=NULL){
    a3fe:	20 97       	sbiw	r28, 0x00	; 0
    a400:	59 f0       	breq	.+22     	; 0xa418 <wifiSendP+0x22>
		c=pgm_read_byte(str);
    a402:	fe 01       	movw	r30, r28
    a404:	14 91       	lpm	r17, Z
		if(c==0)break;
    a406:	11 23       	and	r17, r17
    a408:	39 f0       	breq	.+14     	; 0xa418 <wifiSendP+0x22>
		while(UartSendChar(c)==-1); //block if buffer full
    a40a:	81 2f       	mov	r24, r17
    a40c:	0e 94 f5 42 	call	0x85ea	; 0x85ea <UartSendChar>
    a410:	8f 3f       	cpi	r24, 0xFF	; 255
    a412:	d9 f3       	breq	.-10     	; 0xa40a <wifiSendP+0x14>
		str++;
    a414:	21 96       	adiw	r28, 0x01	; 1
    a416:	f3 cf       	rjmp	.-26     	; 0xa3fe <wifiSendP+0x8>
	};

	return WIFI_OK;
}
    a418:	80 e0       	ldi	r24, 0x00	; 0
    a41a:	df 91       	pop	r29
    a41c:	cf 91       	pop	r28
    a41e:	1f 91       	pop	r17
    a420:	08 95       	ret

0000a422 <wifiGetPBT>:
		}
	}

}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    a422:	cf 92       	push	r12
    a424:	df 92       	push	r13
    a426:	ef 92       	push	r14
    a428:	ff 92       	push	r15
    a42a:	0f 93       	push	r16
    a42c:	1f 93       	push	r17
    a42e:	cf 93       	push	r28
    a430:	df 93       	push	r29
    a432:	f8 2e       	mov	r15, r24
    a434:	e9 2e       	mov	r14, r25
    a436:	8b 01       	movw	r16, r22
    a438:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    a43a:	0e 94 06 41 	call	0x820c	; 0x820c <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    a43e:	cf 2d       	mov	r28, r15
    a440:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    a442:	0e 94 d9 42 	call	0x85b2	; 0x85b2 <UartReadChar>
        if(r!=-1){
    a446:	8f 3f       	cpi	r24, 0xFF	; 255
    a448:	ef ef       	ldi	r30, 0xFF	; 255
    a44a:	9e 07       	cpc	r25, r30
    a44c:	99 f0       	breq	.+38     	; 0xa474 <wifiGetPBT+0x52>

            c=r&(0xff);
    a44e:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    a450:	01 15       	cp	r16, r1
    a452:	11 05       	cpc	r17, r1
    a454:	19 f0       	breq	.+6      	; 0xa45c <wifiGetPBT+0x3a>
                *buf=c;
    a456:	f8 01       	movw	r30, r16
    a458:	81 93       	st	Z+, r24
    a45a:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    a45c:	fe 01       	movw	r30, r28
    a45e:	84 91       	lpm	r24, Z
    a460:	28 13       	cpse	r18, r24
    a462:	06 c0       	rjmp	.+12     	; 0xa470 <wifiGetPBT+0x4e>
                p++;
    a464:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    a466:	fe 01       	movw	r30, r28
    a468:	84 91       	lpm	r24, Z
    a46a:	81 11       	cpse	r24, r1
    a46c:	03 c0       	rjmp	.+6      	; 0xa474 <wifiGetPBT+0x52>
    a46e:	09 c0       	rjmp	.+18     	; 0xa482 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    a470:	cf 2d       	mov	r28, r15
    a472:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    a474:	0e 94 01 41 	call	0x8202	; 0x8202 <GetVsyncCounter>
    a478:	c8 16       	cp	r12, r24
    a47a:	d9 06       	cpc	r13, r25
    a47c:	10 f7       	brcc	.-60     	; 0xa442 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    a47e:	81 e0       	ldi	r24, 0x01	; 1
    a480:	01 c0       	rjmp	.+2      	; 0xa484 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    a482:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    a484:	df 91       	pop	r29
    a486:	cf 91       	pop	r28
    a488:	1f 91       	pop	r17
    a48a:	0f 91       	pop	r16
    a48c:	ff 90       	pop	r15
    a48e:	ef 90       	pop	r14
    a490:	df 90       	pop	r13
    a492:	cf 90       	pop	r12
    a494:	08 95       	ret

0000a496 <wifiRequestPT>:
	}

	return WIFI_OK;
}

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    a496:	0f 93       	push	r16
    a498:	1f 93       	push	r17
    a49a:	cf 93       	push	r28
    a49c:	df 93       	push	r29
    a49e:	00 d0       	rcall	.+0      	; 0xa4a0 <wifiRequestPT+0xa>
    a4a0:	cd b7       	in	r28, 0x3d	; 61
    a4a2:	de b7       	in	r29, 0x3e	; 62
    a4a4:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    a4a6:	49 83       	std	Y+1, r20	; 0x01
    a4a8:	5a 83       	std	Y+2, r21	; 0x02
    a4aa:	0e 94 fb 51 	call	0xa3f6	; 0xa3f6 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    a4ae:	49 81       	ldd	r20, Y+1	; 0x01
    a4b0:	5a 81       	ldd	r21, Y+2	; 0x02
    a4b2:	60 e0       	ldi	r22, 0x00	; 0
    a4b4:	70 e0       	ldi	r23, 0x00	; 0
    a4b6:	c8 01       	movw	r24, r16
    a4b8:	0e 94 11 52 	call	0xa422	; 0xa422 <wifiGetPBT>
    a4bc:	91 e0       	ldi	r25, 0x01	; 1
    a4be:	81 30       	cpi	r24, 0x01	; 1
    a4c0:	09 f0       	breq	.+2      	; 0xa4c4 <wifiRequestPT+0x2e>
    a4c2:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    a4c4:	89 2f       	mov	r24, r25
    a4c6:	0f 90       	pop	r0
    a4c8:	0f 90       	pop	r0
    a4ca:	df 91       	pop	r29
    a4cc:	cf 91       	pop	r28
    a4ce:	1f 91       	pop	r17
    a4d0:	0f 91       	pop	r16
    a4d2:	08 95       	ret

0000a4d4 <initWifi>:

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    a4d4:	1f 93       	push	r17
    a4d6:	cf 93       	push	r28
    a4d8:	df 93       	push	r29
    s8 i = 0;
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    a4da:	82 e0       	ldi	r24, 0x02	; 2
    a4dc:	80 93 c0 00 	sts	0x00C0, r24
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    a4e0:	86 e0       	ldi	r24, 0x06	; 6
    a4e2:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    a4e6:	88 e1       	ldi	r24, 0x18	; 24
    a4e8:	80 93 c1 00 	sts	0x00C1, r24
    return WIFI_OK;
}

const u16 bauds[] PROGMEM = {370,246,184,92,60,44,30};
u8 initWifi(){
    s8 i = 0;
    a4ec:	d0 e0       	ldi	r29, 0x00	; 0
    u8 result;
    UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i % 7])));
    a4ee:	17 e0       	ldi	r17, 0x07	; 7
    a4f0:	8d 2f       	mov	r24, r29
    a4f2:	61 2f       	mov	r22, r17
    a4f4:	0e 94 64 70 	call	0xe0c8	; 0xe0c8 <__divmodqi4>
    a4f8:	e9 2f       	mov	r30, r25
    a4fa:	ee 0f       	add	r30, r30
    a4fc:	ff 0b       	sbc	r31, r31
    a4fe:	e5 54       	subi	r30, 0x45	; 69
    a500:	fd 4f       	sbci	r31, 0xFD	; 253
    a502:	84 91       	lpm	r24, Z
    a504:	80 93 c4 00 	sts	0x00C4, r24
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i % 7]))+1);
    a508:	31 96       	adiw	r30, 0x01	; 1
    a50a:	e4 91       	lpm	r30, Z
    a50c:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    a510:	81 e0       	ldi	r24, 0x01	; 1
    a512:	90 e0       	ldi	r25, 0x00	; 0
    a514:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    a518:	4e e1       	ldi	r20, 0x1E	; 30
    a51a:	50 e0       	ldi	r21, 0x00	; 0
    a51c:	66 eb       	ldi	r22, 0xB6	; 182
    a51e:	72 e0       	ldi	r23, 0x02	; 2
    a520:	81 eb       	ldi	r24, 0xB1	; 177
    a522:	92 e0       	ldi	r25, 0x02	; 2
    a524:	0e 94 4b 52 	call	0xa496	; 0xa496 <wifiRequestPT>
    a528:	c8 2f       	mov	r28, r24
    a52a:	df 5f       	subi	r29, 0xFF	; 255
        i++;
    } while ((result != WIFI_OK) && (i < 14));
    a52c:	88 23       	and	r24, r24
    a52e:	19 f0       	breq	.+6      	; 0xa536 <initWifi+0x62>
    a530:	de 30       	cpi	r29, 0x0E	; 14
    a532:	f1 f6       	brne	.-68     	; 0xa4f0 <initWifi+0x1c>
    a534:	19 c0       	rjmp	.+50     	; 0xa568 <initWifi+0x94>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=14400,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    a536:	48 e7       	ldi	r20, 0x78	; 120
    a538:	50 e0       	ldi	r21, 0x00	; 0
    a53a:	6c ea       	ldi	r22, 0xAC	; 172
    a53c:	72 e0       	ldi	r23, 0x02	; 2
    a53e:	80 e9       	ldi	r24, 0x90	; 144
    a540:	92 e0       	ldi	r25, 0x02	; 2
    a542:	0e 94 4b 52 	call	0xa496	; 0xa496 <wifiRequestPT>
    a546:	c8 2f       	mov	r28, r24
        if (result == WIFI_OK) {
    a548:	81 11       	cpse	r24, r1
    a54a:	0e c0       	rjmp	.+28     	; 0xa568 <initWifi+0x94>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[1])));
    a54c:	ed eb       	ldi	r30, 0xBD	; 189
    a54e:	f2 e0       	ldi	r31, 0x02	; 2
    a550:	e4 91       	lpm	r30, Z
    a552:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[1]))+1); 
    a556:	ee eb       	ldi	r30, 0xBE	; 190
    a558:	f2 e0       	ldi	r31, 0x02	; 2
    a55a:	e4 91       	lpm	r30, Z
    a55c:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    a560:	81 e0       	ldi	r24, 0x01	; 1
    a562:	90 e0       	ldi	r25, 0x00	; 0
    a564:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <WaitVsync>
        }
    }
    return result;
}
    a568:	8c 2f       	mov	r24, r28
    a56a:	df 91       	pop	r29
    a56c:	cf 91       	pop	r28
    a56e:	1f 91       	pop	r17
    a570:	08 95       	ret

0000a572 <activateNet>:
	float pos_y;
	u8 zero;
} NetMessage;

u8 activateNet() {
	InitUartTxBuffer();
    a572:	0e 94 09 43 	call	0x8612	; 0x8612 <InitUartTxBuffer>
	InitUartRxBuffer();
    a576:	0e 94 f0 42 	call	0x85e0	; 0x85e0 <InitUartRxBuffer>
	return initWifi();
    a57a:	0c 94 6a 52 	jmp	0xa4d4	; 0xa4d4 <initWifi>

0000a57e <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    a57e:	2b e8       	ldi	r18, 0x8B	; 139
    a580:	30 e0       	ldi	r19, 0x00	; 0
    a582:	fc 01       	movw	r30, r24
    a584:	21 93       	st	Z+, r18
    a586:	31 93       	st	Z+, r19
    a588:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    a58a:	4e e1       	ldi	r20, 0x1E	; 30
    a58c:	50 e0       	ldi	r21, 0x00	; 0
    a58e:	6e e2       	ldi	r22, 0x2E	; 46
    a590:	73 e0       	ldi	r23, 0x03	; 3
    a592:	0c 94 b5 72 	jmp	0xe56a	; 0xe56a <memcpy_P>

0000a596 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    a596:	2a e8       	ldi	r18, 0x8A	; 138
    a598:	30 e0       	ldi	r19, 0x00	; 0
    a59a:	fc 01       	movw	r30, r24
    a59c:	21 93       	st	Z+, r18
    a59e:	31 93       	st	Z+, r19
    a5a0:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    a5a2:	4e e1       	ldi	r20, 0x1E	; 30
    a5a4:	50 e0       	ldi	r21, 0x00	; 0
    a5a6:	6c e4       	ldi	r22, 0x4C	; 76
    a5a8:	73 e0       	ldi	r23, 0x03	; 3
    a5aa:	0c 94 b5 72 	jmp	0xe56a	; 0xe56a <memcpy_P>

0000a5ae <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    a5ae:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    a5b0:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a5b2:	16 86       	std	Z+14, r1	; 0x0e
    a5b4:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    a5b6:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    a5b8:	73 e0       	ldi	r23, 0x03	; 3
    a5ba:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a5bc:	65 e0       	ldi	r22, 0x05	; 5
    a5be:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    a5c0:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    a5c2:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    a5c4:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a5c6:	4a e1       	ldi	r20, 0x1A	; 26
    a5c8:	58 e7       	ldi	r21, 0x78	; 120
    a5ca:	50 87       	std	Z+8, r21	; 0x08
    a5cc:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a5ce:	27 e1       	ldi	r18, 0x17	; 23
    a5d0:	38 e7       	ldi	r19, 0x78	; 120
    a5d2:	32 87       	std	Z+10, r19	; 0x0a
    a5d4:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a5d6:	84 e1       	ldi	r24, 0x14	; 20
    a5d8:	98 e7       	ldi	r25, 0x78	; 120
    a5da:	94 87       	std	Z+12, r25	; 0x0c
    a5dc:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a5de:	14 8e       	std	Z+28, r1	; 0x1c
    a5e0:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    a5e2:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    a5e4:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a5e6:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    a5e8:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    a5ea:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    a5ec:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a5ee:	56 8b       	std	Z+22, r21	; 0x16
    a5f0:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a5f2:	30 8f       	std	Z+24, r19	; 0x18
    a5f4:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a5f6:	92 8f       	std	Z+26, r25	; 0x1a
    a5f8:	81 8f       	std	Z+25, r24	; 0x19
    a5fa:	08 95       	ret

0000a5fc <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    a5fc:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a5fe:	15 86       	std	Z+13, r1	; 0x0d
    a600:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a602:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    a604:	83 e0       	ldi	r24, 0x03	; 3
    a606:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    a608:	8e e1       	ldi	r24, 0x1E	; 30
    a60a:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a60c:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a60e:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a610:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    a612:	80 ef       	ldi	r24, 0xF0	; 240
    a614:	97 e7       	ldi	r25, 0x77	; 119
    a616:	97 83       	std	Z+7, r25	; 0x07
    a618:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    a61a:	8d ee       	ldi	r24, 0xED	; 237
    a61c:	97 e7       	ldi	r25, 0x77	; 119
    a61e:	91 87       	std	Z+9, r25	; 0x09
    a620:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    a622:	8a ee       	ldi	r24, 0xEA	; 234
    a624:	97 e7       	ldi	r25, 0x77	; 119
    a626:	93 87       	std	Z+11, r25	; 0x0b
    a628:	82 87       	std	Z+10, r24	; 0x0a
    a62a:	08 95       	ret

0000a62c <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    a62c:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a62e:	15 86       	std	Z+13, r1	; 0x0d
    a630:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a632:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    a634:	82 e0       	ldi	r24, 0x02	; 2
    a636:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    a638:	8c e3       	ldi	r24, 0x3C	; 60
    a63a:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a63c:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a63e:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a640:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    a642:	8e e7       	ldi	r24, 0x7E	; 126
    a644:	95 e7       	ldi	r25, 0x75	; 117
    a646:	97 83       	std	Z+7, r25	; 0x07
    a648:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    a64a:	84 eb       	ldi	r24, 0xB4	; 180
    a64c:	96 e7       	ldi	r25, 0x76	; 118
    a64e:	91 87       	std	Z+9, r25	; 0x09
    a650:	80 87       	std	Z+8, r24	; 0x08
    a652:	08 95       	ret

0000a654 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    a654:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    a656:	88 e7       	ldi	r24, 0x78	; 120
    a658:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    a65a:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    a65c:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    a65e:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    a660:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    a662:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    a664:	84 e0       	ldi	r24, 0x04	; 4
    a666:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    a668:	66 23       	and	r22, r22
    a66a:	11 f0       	breq	.+4      	; 0xa670 <init_shot_state+0x1c>
    a66c:	85 e0       	ldi	r24, 0x05	; 5
    a66e:	01 c0       	rjmp	.+2      	; 0xa672 <init_shot_state+0x1e>
    a670:	81 e0       	ldi	r24, 0x01	; 1
    a672:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    a674:	80 e0       	ldi	r24, 0x00	; 0
    a676:	90 e0       	ldi	r25, 0x00	; 0
    a678:	a0 e7       	ldi	r26, 0x70	; 112
    a67a:	b3 e4       	ldi	r27, 0x43	; 67
    a67c:	83 83       	std	Z+3, r24	; 0x03
    a67e:	94 83       	std	Z+4, r25	; 0x04
    a680:	a5 83       	std	Z+5, r26	; 0x05
    a682:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    a684:	17 82       	std	Z+7, r1	; 0x07
    a686:	10 86       	std	Z+8, r1	; 0x08
    a688:	11 86       	std	Z+9, r1	; 0x09
    a68a:	12 86       	std	Z+10, r1	; 0x0a
    a68c:	08 95       	ret

0000a68e <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    a68e:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    a690:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    a692:	82 e0       	ldi	r24, 0x02	; 2
    a694:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a696:	85 e0       	ldi	r24, 0x05	; 5
    a698:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    a69a:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    a69c:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    a69e:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    a6a0:	61 11       	cpse	r22, r1
    a6a2:	03 c0       	rjmp	.+6      	; 0xa6aa <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    a6a4:	88 e8       	ldi	r24, 0x88	; 136
    a6a6:	9e e3       	ldi	r25, 0x3E	; 62
    a6a8:	13 c0       	rjmp	.+38     	; 0xa6d0 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    a6aa:	61 30       	cpi	r22, 0x01	; 1
    a6ac:	79 f4       	brne	.+30     	; 0xa6cc <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    a6ae:	85 e8       	ldi	r24, 0x85	; 133
    a6b0:	9e e3       	ldi	r25, 0x3E	; 62
    a6b2:	97 8b       	std	Z+23, r25	; 0x17
    a6b4:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    a6b6:	82 e8       	ldi	r24, 0x82	; 130
    a6b8:	9e e3       	ldi	r25, 0x3E	; 62
    a6ba:	91 8f       	std	Z+25, r25	; 0x19
    a6bc:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    a6be:	8f e7       	ldi	r24, 0x7F	; 127
    a6c0:	9e e3       	ldi	r25, 0x3E	; 62
    a6c2:	93 a3       	std	Z+35, r25	; 0x23
    a6c4:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    a6c6:	8c e7       	ldi	r24, 0x7C	; 124
    a6c8:	9e e3       	ldi	r25, 0x3E	; 62
    a6ca:	08 c0       	rjmp	.+16     	; 0xa6dc <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    a6cc:	80 e7       	ldi	r24, 0x70	; 112
    a6ce:	9e e3       	ldi	r25, 0x3E	; 62
    a6d0:	97 8b       	std	Z+23, r25	; 0x17
    a6d2:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    a6d4:	91 8f       	std	Z+25, r25	; 0x19
    a6d6:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    a6d8:	93 a3       	std	Z+35, r25	; 0x23
    a6da:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    a6dc:	95 a3       	std	Z+37, r25	; 0x25
    a6de:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    a6e0:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    a6e2:	82 e0       	ldi	r24, 0x02	; 2
    a6e4:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a6e6:	85 e0       	ldi	r24, 0x05	; 5
    a6e8:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    a6ea:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    a6ec:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    a6ee:	11 a2       	std	Z+33, r1	; 0x21
    a6f0:	08 95       	ret

0000a6f2 <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    a6f2:	0f 93       	push	r16
    a6f4:	1f 93       	push	r17
    a6f6:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    a6f8:	85 e0       	ldi	r24, 0x05	; 5
    a6fa:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    a6fc:	83 e0       	ldi	r24, 0x03	; 3
    a6fe:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    a700:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    a702:	8a e5       	ldi	r24, 0x5A	; 90
    a704:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    a706:	43 83       	std	Z+3, r20	; 0x03
    a708:	54 83       	std	Z+4, r21	; 0x04
    a70a:	65 83       	std	Z+5, r22	; 0x05
    a70c:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    a70e:	07 83       	std	Z+7, r16	; 0x07
    a710:	10 87       	std	Z+8, r17	; 0x08
    a712:	21 87       	std	Z+9, r18	; 0x09
    a714:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    a716:	8a ef       	ldi	r24, 0xFA	; 250
    a718:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    a71a:	82 e0       	ldi	r24, 0x02	; 2
    a71c:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    a71e:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    a720:	40 e0       	ldi	r20, 0x00	; 0
    a722:	50 e0       	ldi	r21, 0x00	; 0
    a724:	60 e7       	ldi	r22, 0x70	; 112
    a726:	73 e4       	ldi	r23, 0x43	; 67
    a728:	47 87       	std	Z+15, r20	; 0x0f
    a72a:	50 8b       	std	Z+16, r21	; 0x10
    a72c:	61 8b       	std	Z+17, r22	; 0x11
    a72e:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    a730:	13 8a       	std	Z+19, r1	; 0x13
    a732:	14 8a       	std	Z+20, r1	; 0x14
    a734:	15 8a       	std	Z+21, r1	; 0x15
    a736:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    a738:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    a73a:	94 e6       	ldi	r25, 0x64	; 100
    a73c:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    a73e:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    a740:	84 e0       	ldi	r24, 0x04	; 4
    a742:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    a744:	81 e0       	ldi	r24, 0x01	; 1
    a746:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a748:	62 e0       	ldi	r22, 0x02	; 2
    a74a:	cf 01       	movw	r24, r30
    a74c:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    a74e:	1f 91       	pop	r17
    a750:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a752:	0c 94 47 53 	jmp	0xa68e	; 0xa68e <set_shot_animations>

0000a756 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    a756:	0f 93       	push	r16
    a758:	1f 93       	push	r17
    a75a:	cf 93       	push	r28
    a75c:	df 93       	push	r29
    a75e:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    a760:	88 e7       	ldi	r24, 0x78	; 120
    a762:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    a764:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    a766:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    a768:	18 82       	st	Y, r1
	p->shared.speed = 0;
    a76a:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    a76c:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    a76e:	82 e3       	ldi	r24, 0x32	; 50
    a770:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    a772:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    a774:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    a776:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    a778:	fe 01       	movw	r30, r28
    a77a:	eb 5a       	subi	r30, 0xAB	; 171
    a77c:	ff 4f       	sbci	r31, 0xFF	; 255
    a77e:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    a780:	31 96       	adiw	r30, 0x01	; 1
    a782:	91 e0       	ldi	r25, 0x01	; 1
    a784:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a786:	31 96       	adiw	r30, 0x01	; 1
    a788:	85 e0       	ldi	r24, 0x05	; 5
    a78a:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    a78c:	31 96       	adiw	r30, 0x01	; 1
    a78e:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    a790:	31 96       	adiw	r30, 0x01	; 1
    a792:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    a794:	31 96       	adiw	r30, 0x01	; 1
    a796:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    a798:	31 96       	adiw	r30, 0x01	; 1
    a79a:	71 83       	std	Z+1, r23	; 0x01
    a79c:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    a79e:	36 96       	adiw	r30, 0x06	; 6
    a7a0:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    a7a2:	31 96       	adiw	r30, 0x01	; 1
    a7a4:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a7a6:	31 96       	adiw	r30, 0x01	; 1
    a7a8:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    a7aa:	31 96       	adiw	r30, 0x01	; 1
    a7ac:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    a7ae:	31 96       	adiw	r30, 0x01	; 1
    a7b0:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    a7b2:	31 96       	adiw	r30, 0x01	; 1
    a7b4:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    a7b6:	31 96       	adiw	r30, 0x01	; 1
    a7b8:	51 83       	std	Z+1, r21	; 0x01
    a7ba:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    a7bc:	36 96       	adiw	r30, 0x06	; 6
    a7be:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    a7c0:	31 96       	adiw	r30, 0x01	; 1
    a7c2:	93 e0       	ldi	r25, 0x03	; 3
    a7c4:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    a7c6:	31 96       	adiw	r30, 0x01	; 1
    a7c8:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    a7ca:	31 96       	adiw	r30, 0x01	; 1
    a7cc:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    a7ce:	31 96       	adiw	r30, 0x01	; 1
    a7d0:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    a7d2:	31 96       	adiw	r30, 0x01	; 1
    a7d4:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    a7d6:	31 96       	adiw	r30, 0x01	; 1
    a7d8:	87 e9       	ldi	r24, 0x97	; 151
    a7da:	9e e3       	ldi	r25, 0x3E	; 62
    a7dc:	91 83       	std	Z+1, r25	; 0x01
    a7de:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    a7e0:	32 96       	adiw	r30, 0x02	; 2
    a7e2:	81 e9       	ldi	r24, 0x91	; 145
    a7e4:	9e e3       	ldi	r25, 0x3E	; 62
    a7e6:	91 83       	std	Z+1, r25	; 0x01
    a7e8:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    a7ea:	32 96       	adiw	r30, 0x02	; 2
    a7ec:	8b e8       	ldi	r24, 0x8B	; 139
    a7ee:	9e e3       	ldi	r25, 0x3E	; 62
    a7f0:	91 83       	std	Z+1, r25	; 0x01
    a7f2:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    a7f4:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    a7f6:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    a7f8:	8e 01       	movw	r16, r28
    a7fa:	03 5d       	subi	r16, 0xD3	; 211
    a7fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a7fe:	60 e0       	ldi	r22, 0x00	; 0
    a800:	c8 01       	movw	r24, r16
    a802:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    a806:	60 e0       	ldi	r22, 0x00	; 0
    a808:	c8 01       	movw	r24, r16
    a80a:	0e 94 47 53 	call	0xa68e	; 0xa68e <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    a80e:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    a810:	1e 8e       	std	Y+30, r1	; 0x1e
    a812:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    a814:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    a816:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    a818:	1d a2       	std	Y+37, r1	; 0x25
    a81a:	1e a2       	std	Y+38, r1	; 0x26
    a81c:	1f a2       	std	Y+39, r1	; 0x27
    a81e:	18 a6       	std	Y+40, r1	; 0x28
	p->old_y = 0;
    a820:	19 a6       	std	Y+41, r1	; 0x29
    a822:	1a a6       	std	Y+42, r1	; 0x2a
    a824:	1b a6       	std	Y+43, r1	; 0x2b
    a826:	1c a6       	std	Y+44, r1	; 0x2c
	p->deadlock_count_x = 0;
    a828:	18 a2       	std	Y+32, r1	; 0x20
    a82a:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    a82c:	1a a2       	std	Y+34, r1	; 0x22
    a82e:	19 a2       	std	Y+33, r1	; 0x21
}
    a830:	df 91       	pop	r29
    a832:	cf 91       	pop	r28
    a834:	1f 91       	pop	r17
    a836:	0f 91       	pop	r16
    a838:	08 95       	ret

0000a83a <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    a83a:	fc 01       	movw	r30, r24
    a83c:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    a83e:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    a840:	60 e0       	ldi	r22, 0x00	; 0
    a842:	8d 96       	adiw	r24, 0x2d	; 45
    a844:	0c 94 2a 53 	jmp	0xa654	; 0xa654 <init_shot_state>

0000a848 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    a848:	e9 e6       	ldi	r30, 0x69	; 105
    a84a:	fb e0       	ldi	r31, 0x0B	; 11
    a84c:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    a84e:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    a850:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    a852:	14 86       	std	Z+12, r1	; 0x0c
    a854:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    a856:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    a858:	10 8a       	std	Z+16, r1	; 0x10
    a85a:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    a85c:	12 8a       	std	Z+18, r1	; 0x12
    a85e:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    a860:	82 e0       	ldi	r24, 0x02	; 2
    a862:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    a864:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    a866:	84 e1       	ldi	r24, 0x14	; 20
    a868:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    a86a:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    a86c:	12 86       	std	Z+10, r1	; 0x0a
    a86e:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    a870:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    a872:	16 86       	std	Z+14, r1	; 0x0e
    a874:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    a876:	49 ea       	ldi	r20, 0xA9	; 169
    a878:	5e e3       	ldi	r21, 0x3E	; 62
    a87a:	6f ea       	ldi	r22, 0xAF	; 175
    a87c:	7e e3       	ldi	r23, 0x3E	; 62
    a87e:	8b e9       	ldi	r24, 0x9B	; 155
    a880:	9b e0       	ldi	r25, 0x0B	; 11
    a882:	0e 94 ab 53 	call	0xa756	; 0xa756 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    a886:	4d e9       	ldi	r20, 0x9D	; 157
    a888:	5e e3       	ldi	r21, 0x3E	; 62
    a88a:	63 ea       	ldi	r22, 0xA3	; 163
    a88c:	7e e3       	ldi	r23, 0x3E	; 62
    a88e:	8a e0       	ldi	r24, 0x0A	; 10
    a890:	9f e0       	ldi	r25, 0x0F	; 15
    a892:	0c 94 ab 53 	jmp	0xa756	; 0xa756 <init_player>

0000a896 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    a896:	cf 93       	push	r28
    a898:	df 93       	push	r29
    a89a:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    a89c:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    a89e:	6b 89       	ldd	r22, Y+19	; 0x13
    a8a0:	70 e0       	ldi	r23, 0x00	; 0
    a8a2:	80 e0       	ldi	r24, 0x00	; 0
    a8a4:	90 e0       	ldi	r25, 0x00	; 0
    a8a6:	0e 94 9c 71 	call	0xe338	; 0xe338 <__floatunsisf>
    a8aa:	6b 83       	std	Y+3, r22	; 0x03
    a8ac:	7c 83       	std	Y+4, r23	; 0x04
    a8ae:	8d 83       	std	Y+5, r24	; 0x05
    a8b0:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    a8b2:	6c 89       	ldd	r22, Y+20	; 0x14
    a8b4:	70 e0       	ldi	r23, 0x00	; 0
    a8b6:	80 e0       	ldi	r24, 0x00	; 0
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 9c 71 	call	0xe338	; 0xe338 <__floatunsisf>
    a8be:	6f 83       	std	Y+7, r22	; 0x07
    a8c0:	78 87       	std	Y+8, r23	; 0x08
    a8c2:	89 87       	std	Y+9, r24	; 0x09
    a8c4:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    a8c6:	18 82       	st	Y, r1
	player->shared.speed = 0;
    a8c8:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    a8ca:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    a8cc:	62 e0       	ldi	r22, 0x02	; 2
    a8ce:	80 e0       	ldi	r24, 0x00	; 0
    a8d0:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    a8d4:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    a8d6:	62 e0       	ldi	r22, 0x02	; 2
    a8d8:	80 e0       	ldi	r24, 0x00	; 0
    a8da:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    a8de:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    a8e0:	df 91       	pop	r29
    a8e2:	cf 91       	pop	r28
    a8e4:	08 95       	ret

0000a8e6 <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    a8e6:	0e 94 80 4d 	call	0x9b00	; 0x9b00 <ProcessSprites>
    WaitVsync(1);
    a8ea:	81 e0       	ldi	r24, 0x01	; 1
    a8ec:	90 e0       	ldi	r25, 0x00	; 0
    a8ee:	0e 94 8a 4f 	call	0x9f14	; 0x9f14 <WaitVsync>
    RestoreBackground();
    a8f2:	0c 94 a3 3e 	jmp	0x7d46	; 0x7d46 <RestoreBackground>

0000a8f6 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a8f6:	cf 93       	push	r28
    a8f8:	df 93       	push	r29
    a8fa:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a8fc:	bc 01       	movw	r22, r24
    a8fe:	88 81       	ld	r24, Y
    a900:	99 81       	ldd	r25, Y+1	; 0x01
    a902:	0e 94 a6 42 	call	0x854c	; 0x854c <EepromReadBlock>
	if (status == 0x03)
    a906:	83 30       	cpi	r24, 0x03	; 3
    a908:	29 f4       	brne	.+10     	; 0xa914 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a90a:	ce 01       	movw	r24, r28
	}
}
    a90c:	df 91       	pop	r29
    a90e:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a910:	0c 94 5c 42 	jmp	0x84b8	; 0x84b8 <EepromWriteBlock>
	}
}
    a914:	df 91       	pop	r29
    a916:	cf 91       	pop	r28
    a918:	08 95       	ret

0000a91a <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    a91a:	61 e0       	ldi	r22, 0x01	; 1
    a91c:	83 e0       	ldi	r24, 0x03	; 3
    a91e:	0e 94 bb 4f 	call	0x9f76	; 0x9f76 <FadeOut>
	ClearVram();
    a922:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a926:	60 e0       	ldi	r22, 0x00	; 0
    a928:	83 e0       	ldi	r24, 0x03	; 3
    a92a:	0c 94 af 4f 	jmp	0x9f5e	; 0x9f5e <FadeIn>

0000a92e <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    a92e:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    a930:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    a932:	40 e0       	ldi	r20, 0x00	; 0
    a934:	6b eb       	ldi	r22, 0xBB	; 187
    a936:	7e e3       	ldi	r23, 0x3E	; 62
    a938:	8c 2f       	mov	r24, r28
    a93a:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
    a93e:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    a940:	ca 30       	cpi	r28, 0x0A	; 10
    a942:	b9 f7       	brne	.-18     	; 0xa932 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    a944:	cf 91       	pop	r28
    a946:	08 95       	ret

0000a948 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    a948:	cf 92       	push	r12
    a94a:	df 92       	push	r13
    a94c:	ff 92       	push	r15
    a94e:	0f 93       	push	r16
    a950:	1f 93       	push	r17
    a952:	cf 93       	push	r28
    a954:	df 93       	push	r29
    a956:	cd b7       	in	r28, 0x3d	; 61
    a958:	de b7       	in	r29, 0x3e	; 62
    a95a:	2a 97       	sbiw	r28, 0x0a	; 10
    a95c:	0f b6       	in	r0, 0x3f	; 63
    a95e:	f8 94       	cli
    a960:	de bf       	out	0x3e, r29	; 62
    a962:	0f be       	out	0x3f, r0	; 63
    a964:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    a966:	90 91 aa 0b 	lds	r25, 0x0BAA
    a96a:	80 91 19 0f 	lds	r24, 0x0F19
    a96e:	98 17       	cp	r25, r24
    a970:	28 f4       	brcc	.+10     	; 0xa97c <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    a972:	eb e9       	ldi	r30, 0x9B	; 155
    a974:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    a976:	aa e0       	ldi	r26, 0x0A	; 10
    a978:	bf e0       	ldi	r27, 0x0F	; 15
    a97a:	04 c0       	rjmp	.+8      	; 0xa984 <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    a97c:	ea e0       	ldi	r30, 0x0A	; 10
    a97e:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    a980:	ab e9       	ldi	r26, 0x9B	; 155
    a982:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    a984:	1b 96       	adiw	r26, 0x0b	; 11
    a986:	8c 91       	ld	r24, X
    a988:	1b 97       	sbiw	r26, 0x0b	; 11
    a98a:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    a98c:	83 85       	ldd	r24, Z+11	; 0x0b
    a98e:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    a990:	1f 96       	adiw	r26, 0x0f	; 15
    a992:	8c 91       	ld	r24, X
    a994:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    a996:	97 85       	ldd	r25, Z+15	; 0x0f
    a998:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    a99a:	21 e0       	ldi	r18, 0x01	; 1
    a99c:	30 91 6c 0b 	lds	r19, 0x0B6C
    a9a0:	38 30       	cpi	r19, 0x08	; 8
    a9a2:	09 f0       	breq	.+2      	; 0xa9a6 <save_score+0x5e>
    a9a4:	20 e0       	ldi	r18, 0x00	; 0
    a9a6:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    a9a8:	f8 2e       	mov	r15, r24
    a9aa:	f9 1a       	sub	r15, r25
    a9ac:	00 e0       	ldi	r16, 0x00	; 0
    a9ae:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a9b0:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a9b2:	81 11       	cpse	r24, r1
    a9b4:	08 c0       	rjmp	.+16     	; 0xa9c6 <save_score+0x7e>
    a9b6:	f8 01       	movw	r30, r16
    a9b8:	ee 5d       	subi	r30, 0xDE	; 222
    a9ba:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a9bc:	94 81       	ldd	r25, Z+4	; 0x04
    a9be:	25 81       	ldd	r18, Z+5	; 0x05
    a9c0:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    a9c2:	9f 15       	cp	r25, r15
    a9c4:	d0 f4       	brcc	.+52     	; 0xa9fa <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    a9c6:	45 e0       	ldi	r20, 0x05	; 5
    a9c8:	c8 01       	movw	r24, r16
    a9ca:	8c 5d       	subi	r24, 0xDC	; 220
    a9cc:	94 4f       	sbci	r25, 0xF4	; 244
    a9ce:	6c 01       	movw	r12, r24
    a9d0:	bc 01       	movw	r22, r24
    a9d2:	ce 01       	movw	r24, r28
    a9d4:	06 96       	adiw	r24, 0x06	; 6
    a9d6:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    a9da:	45 e0       	ldi	r20, 0x05	; 5
    a9dc:	be 01       	movw	r22, r28
    a9de:	6f 5f       	subi	r22, 0xFF	; 255
    a9e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a9e2:	c6 01       	movw	r24, r12
    a9e4:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    a9e8:	45 e0       	ldi	r20, 0x05	; 5
    a9ea:	be 01       	movw	r22, r28
    a9ec:	6a 5f       	subi	r22, 0xFA	; 250
    a9ee:	7f 4f       	sbci	r23, 0xFF	; 255
    a9f0:	ce 01       	movw	r24, r28
    a9f2:	01 96       	adiw	r24, 0x01	; 1
    a9f4:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
				saved = 1;
    a9f8:	81 e0       	ldi	r24, 0x01	; 1
    a9fa:	0b 5f       	subi	r16, 0xFB	; 251
    a9fc:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a9fe:	0e 31       	cpi	r16, 0x1E	; 30
    aa00:	11 05       	cpc	r17, r1
    aa02:	b9 f6       	brne	.-82     	; 0xa9b2 <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    aa04:	82 e2       	ldi	r24, 0x22	; 34
    aa06:	9b e0       	ldi	r25, 0x0B	; 11
    aa08:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    aa0c:	2a 96       	adiw	r28, 0x0a	; 10
    aa0e:	0f b6       	in	r0, 0x3f	; 63
    aa10:	f8 94       	cli
    aa12:	de bf       	out	0x3e, r29	; 62
    aa14:	0f be       	out	0x3f, r0	; 63
    aa16:	cd bf       	out	0x3d, r28	; 61
    aa18:	df 91       	pop	r29
    aa1a:	cf 91       	pop	r28
    aa1c:	1f 91       	pop	r17
    aa1e:	0f 91       	pop	r16
    aa20:	ff 90       	pop	r15
    aa22:	df 90       	pop	r13
    aa24:	cf 90       	pop	r12
    aa26:	08 95       	ret

0000aa28 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    aa28:	0f 93       	push	r16
    aa2a:	1f 93       	push	r17
    aa2c:	cf 93       	push	r28
    aa2e:	df 93       	push	r29
    aa30:	8c 01       	movw	r16, r24
    aa32:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    aa34:	88 81       	ld	r24, Y
    aa36:	81 30       	cpi	r24, 0x01	; 1
    aa38:	69 f1       	breq	.+90     	; 0xaa94 <position_shot+0x6c>
    aa3a:	98 f0       	brcs	.+38     	; 0xaa62 <position_shot+0x3a>
    aa3c:	82 30       	cpi	r24, 0x02	; 2
    aa3e:	f1 f1       	breq	.+124    	; 0xaabc <position_shot+0x94>
    aa40:	83 30       	cpi	r24, 0x03	; 3
    aa42:	09 f0       	breq	.+2      	; 0xaa46 <position_shot+0x1e>
    aa44:	59 c0       	rjmp	.+178    	; 0xaaf8 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    aa46:	f8 01       	movw	r30, r16
    aa48:	83 81       	ldd	r24, Z+3	; 0x03
    aa4a:	94 81       	ldd	r25, Z+4	; 0x04
    aa4c:	a5 81       	ldd	r26, Z+5	; 0x05
    aa4e:	b6 81       	ldd	r27, Z+6	; 0x06
    aa50:	8b 83       	std	Y+3, r24	; 0x03
    aa52:	9c 83       	std	Y+4, r25	; 0x04
    aa54:	ad 83       	std	Y+5, r26	; 0x05
    aa56:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    aa58:	20 e0       	ldi	r18, 0x00	; 0
    aa5a:	30 e0       	ldi	r19, 0x00	; 0
    aa5c:	40 e8       	ldi	r20, 0x80	; 128
    aa5e:	50 e4       	ldi	r21, 0x40	; 64
    aa60:	41 c0       	rjmp	.+130    	; 0xaae4 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    aa62:	20 e0       	ldi	r18, 0x00	; 0
    aa64:	30 e0       	ldi	r19, 0x00	; 0
    aa66:	40 e8       	ldi	r20, 0x80	; 128
    aa68:	50 e4       	ldi	r21, 0x40	; 64
    aa6a:	f8 01       	movw	r30, r16
    aa6c:	63 81       	ldd	r22, Z+3	; 0x03
    aa6e:	74 81       	ldd	r23, Z+4	; 0x04
    aa70:	85 81       	ldd	r24, Z+5	; 0x05
    aa72:	96 81       	ldd	r25, Z+6	; 0x06
    aa74:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    aa78:	6b 83       	std	Y+3, r22	; 0x03
    aa7a:	7c 83       	std	Y+4, r23	; 0x04
    aa7c:	8d 83       	std	Y+5, r24	; 0x05
    aa7e:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    aa80:	f8 01       	movw	r30, r16
    aa82:	87 81       	ldd	r24, Z+7	; 0x07
    aa84:	90 85       	ldd	r25, Z+8	; 0x08
    aa86:	a1 85       	ldd	r26, Z+9	; 0x09
    aa88:	b2 85       	ldd	r27, Z+10	; 0x0a
    aa8a:	8f 83       	std	Y+7, r24	; 0x07
    aa8c:	98 87       	std	Y+8, r25	; 0x08
    aa8e:	a9 87       	std	Y+9, r26	; 0x09
    aa90:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    aa92:	32 c0       	rjmp	.+100    	; 0xaaf8 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    aa94:	20 e0       	ldi	r18, 0x00	; 0
    aa96:	30 e0       	ldi	r19, 0x00	; 0
    aa98:	40 e0       	ldi	r20, 0x00	; 0
    aa9a:	51 e4       	ldi	r21, 0x41	; 65
    aa9c:	f8 01       	movw	r30, r16
    aa9e:	63 81       	ldd	r22, Z+3	; 0x03
    aaa0:	74 81       	ldd	r23, Z+4	; 0x04
    aaa2:	85 81       	ldd	r24, Z+5	; 0x05
    aaa4:	96 81       	ldd	r25, Z+6	; 0x06
    aaa6:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    aaaa:	6b 83       	std	Y+3, r22	; 0x03
    aaac:	7c 83       	std	Y+4, r23	; 0x04
    aaae:	8d 83       	std	Y+5, r24	; 0x05
    aab0:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    aab2:	20 e0       	ldi	r18, 0x00	; 0
    aab4:	30 e0       	ldi	r19, 0x00	; 0
    aab6:	40 e8       	ldi	r20, 0x80	; 128
    aab8:	50 e4       	ldi	r21, 0x40	; 64
    aaba:	13 c0       	rjmp	.+38     	; 0xaae2 <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    aabc:	20 e0       	ldi	r18, 0x00	; 0
    aabe:	30 e0       	ldi	r19, 0x00	; 0
    aac0:	40 e8       	ldi	r20, 0x80	; 128
    aac2:	50 e4       	ldi	r21, 0x40	; 64
    aac4:	f8 01       	movw	r30, r16
    aac6:	63 81       	ldd	r22, Z+3	; 0x03
    aac8:	74 81       	ldd	r23, Z+4	; 0x04
    aaca:	85 81       	ldd	r24, Z+5	; 0x05
    aacc:	96 81       	ldd	r25, Z+6	; 0x06
    aace:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    aad2:	6b 83       	std	Y+3, r22	; 0x03
    aad4:	7c 83       	std	Y+4, r23	; 0x04
    aad6:	8d 83       	std	Y+5, r24	; 0x05
    aad8:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    aada:	20 e0       	ldi	r18, 0x00	; 0
    aadc:	30 e0       	ldi	r19, 0x00	; 0
    aade:	40 e0       	ldi	r20, 0x00	; 0
    aae0:	51 e4       	ldi	r21, 0x41	; 65
    aae2:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    aae4:	67 81       	ldd	r22, Z+7	; 0x07
    aae6:	70 85       	ldd	r23, Z+8	; 0x08
    aae8:	81 85       	ldd	r24, Z+9	; 0x09
    aaea:	92 85       	ldd	r25, Z+10	; 0x0a
    aaec:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    aaf0:	6f 83       	std	Y+7, r22	; 0x07
    aaf2:	78 87       	std	Y+8, r23	; 0x08
    aaf4:	89 87       	std	Y+9, r24	; 0x09
    aaf6:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    aaf8:	df 91       	pop	r29
    aafa:	cf 91       	pop	r28
    aafc:	1f 91       	pop	r17
    aafe:	0f 91       	pop	r16
    ab00:	08 95       	ret

0000ab02 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    ab02:	0f 93       	push	r16
    ab04:	1f 93       	push	r17
    ab06:	cf 93       	push	r28
    ab08:	df 93       	push	r29
    ab0a:	8c 01       	movw	r16, r24
    ab0c:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    ab0e:	ac 01       	movw	r20, r24
    ab10:	44 5f       	subi	r20, 0xF4	; 244
    ab12:	5f 4f       	sbci	r21, 0xFF	; 255
    ab14:	23 e0       	ldi	r18, 0x03	; 3
    ab16:	6e e0       	ldi	r22, 0x0E	; 14
    ab18:	84 e0       	ldi	r24, 0x04	; 4
    ab1a:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    ab1e:	47 e4       	ldi	r20, 0x47	; 71
    ab20:	54 e0       	ldi	r21, 0x04	; 4
    ab22:	6e e0       	ldi	r22, 0x0E	; 14
    ab24:	70 e0       	ldi	r23, 0x00	; 0
    ab26:	88 e0       	ldi	r24, 0x08	; 8
    ab28:	90 e0       	ldi	r25, 0x00	; 0
    ab2a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    ab2e:	ae 01       	movw	r20, r28
    ab30:	44 5f       	subi	r20, 0xF4	; 244
    ab32:	5f 4f       	sbci	r21, 0xFF	; 255
    ab34:	23 e0       	ldi	r18, 0x03	; 3
    ab36:	6e e0       	ldi	r22, 0x0E	; 14
    ab38:	8d e0       	ldi	r24, 0x0D	; 13
    ab3a:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
	Print(17, 14, (char*) strBy);
    ab3e:	44 e4       	ldi	r20, 0x44	; 68
    ab40:	54 e0       	ldi	r21, 0x04	; 4
    ab42:	6e e0       	ldi	r22, 0x0E	; 14
    ab44:	70 e0       	ldi	r23, 0x00	; 0
    ab46:	81 e1       	ldi	r24, 0x11	; 17
    ab48:	90 e0       	ldi	r25, 0x00	; 0
    ab4a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    ab4e:	21 e0       	ldi	r18, 0x01	; 1
    ab50:	f8 01       	movw	r30, r16
    ab52:	40 89       	ldd	r20, Z+16	; 0x10
    ab54:	6e e0       	ldi	r22, 0x0E	; 14
    ab56:	70 e0       	ldi	r23, 0x00	; 0
    ab58:	86 e1       	ldi	r24, 0x16	; 22
    ab5a:	90 e0       	ldi	r25, 0x00	; 0
    ab5c:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
	PrintChar(23, 14, '-');
    ab60:	4d e2       	ldi	r20, 0x2D	; 45
    ab62:	6e e0       	ldi	r22, 0x0E	; 14
    ab64:	70 e0       	ldi	r23, 0x00	; 0
    ab66:	87 e1       	ldi	r24, 0x17	; 23
    ab68:	90 e0       	ldi	r25, 0x00	; 0
    ab6a:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    ab6e:	21 e0       	ldi	r18, 0x01	; 1
    ab70:	48 89       	ldd	r20, Y+16	; 0x10
    ab72:	6e e0       	ldi	r22, 0x0E	; 14
    ab74:	70 e0       	ldi	r23, 0x00	; 0
    ab76:	8a e1       	ldi	r24, 0x1A	; 26
    ab78:	90 e0       	ldi	r25, 0x00	; 0
}
    ab7a:	df 91       	pop	r29
    ab7c:	cf 91       	pop	r28
    ab7e:	1f 91       	pop	r17
    ab80:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    ab82:	0c 94 39 4f 	jmp	0x9e72	; 0x9e72 <PrintByte>

0000ab86 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    ab86:	0f 93       	push	r16
    ab88:	1f 93       	push	r17
    ab8a:	cf 93       	push	r28
    ab8c:	df 93       	push	r29
    ab8e:	8c 01       	movw	r16, r24
    ab90:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    ab92:	48 e3       	ldi	r20, 0x38	; 56
    ab94:	54 e0       	ldi	r21, 0x04	; 4
    ab96:	6c e0       	ldi	r22, 0x0C	; 12
    ab98:	70 e0       	ldi	r23, 0x00	; 0
    ab9a:	89 e0       	ldi	r24, 0x09	; 9
    ab9c:	90 e0       	ldi	r25, 0x00	; 0
    ab9e:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    aba2:	a8 01       	movw	r20, r16
    aba4:	44 5f       	subi	r20, 0xF4	; 244
    aba6:	5f 4f       	sbci	r21, 0xFF	; 255
    aba8:	23 e0       	ldi	r18, 0x03	; 3
    abaa:	6e e0       	ldi	r22, 0x0E	; 14
    abac:	84 e0       	ldi	r24, 0x04	; 4
    abae:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    abb2:	47 e4       	ldi	r20, 0x47	; 71
    abb4:	54 e0       	ldi	r21, 0x04	; 4
    abb6:	6e e0       	ldi	r22, 0x0E	; 14
    abb8:	70 e0       	ldi	r23, 0x00	; 0
    abba:	88 e0       	ldi	r24, 0x08	; 8
    abbc:	90 e0       	ldi	r25, 0x00	; 0
    abbe:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    abc2:	ae 01       	movw	r20, r28
    abc4:	44 5f       	subi	r20, 0xF4	; 244
    abc6:	5f 4f       	sbci	r21, 0xFF	; 255
    abc8:	23 e0       	ldi	r18, 0x03	; 3
    abca:	6e e0       	ldi	r22, 0x0E	; 14
    abcc:	8d e0       	ldi	r24, 0x0D	; 13
    abce:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
    Print(17, 14, (char*) strBy);
    abd2:	44 e4       	ldi	r20, 0x44	; 68
    abd4:	54 e0       	ldi	r21, 0x04	; 4
    abd6:	6e e0       	ldi	r22, 0x0E	; 14
    abd8:	70 e0       	ldi	r23, 0x00	; 0
    abda:	81 e1       	ldi	r24, 0x11	; 17
    abdc:	90 e0       	ldi	r25, 0x00	; 0
    abde:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    PrintByte(22, 14, winner->score ,true);
    abe2:	21 e0       	ldi	r18, 0x01	; 1
    abe4:	f8 01       	movw	r30, r16
    abe6:	47 85       	ldd	r20, Z+15	; 0x0f
    abe8:	6e e0       	ldi	r22, 0x0E	; 14
    abea:	70 e0       	ldi	r23, 0x00	; 0
    abec:	86 e1       	ldi	r24, 0x16	; 22
    abee:	90 e0       	ldi	r25, 0x00	; 0
    abf0:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
    PrintChar(23, 14, '-');
    abf4:	4d e2       	ldi	r20, 0x2D	; 45
    abf6:	6e e0       	ldi	r22, 0x0E	; 14
    abf8:	70 e0       	ldi	r23, 0x00	; 0
    abfa:	87 e1       	ldi	r24, 0x17	; 23
    abfc:	90 e0       	ldi	r25, 0x00	; 0
    abfe:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    ac02:	21 e0       	ldi	r18, 0x01	; 1
    ac04:	4f 85       	ldd	r20, Y+15	; 0x0f
    ac06:	6e e0       	ldi	r22, 0x0E	; 14
    ac08:	70 e0       	ldi	r23, 0x00	; 0
    ac0a:	8a e1       	ldi	r24, 0x1A	; 26
    ac0c:	90 e0       	ldi	r25, 0x00	; 0
    ac0e:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    ac12:	80 91 6c 0b 	lds	r24, 0x0B6C
    ac16:	88 30       	cpi	r24, 0x08	; 8
    ac18:	59 f4       	brne	.+22     	; 0xac30 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    ac1a:	4a e2       	ldi	r20, 0x2A	; 42
    ac1c:	6e e0       	ldi	r22, 0x0E	; 14
    ac1e:	70 e0       	ldi	r23, 0x00	; 0
    ac20:	8c e1       	ldi	r24, 0x1C	; 28
    ac22:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    ac24:	df 91       	pop	r29
    ac26:	cf 91       	pop	r28
    ac28:	1f 91       	pop	r17
    ac2a:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    ac2c:	0c 94 87 4f 	jmp	0x9f0e	; 0x9f0e <PrintChar>
	}
}
    ac30:	df 91       	pop	r29
    ac32:	cf 91       	pop	r28
    ac34:	1f 91       	pop	r17
    ac36:	0f 91       	pop	r16
    ac38:	08 95       	ret

0000ac3a <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    ac3a:	fc 01       	movw	r30, r24
    ac3c:	20 81       	ld	r18, Z
    ac3e:	31 81       	ldd	r19, Z+1	; 0x01
    ac40:	21 70       	andi	r18, 0x01	; 1
    ac42:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    ac44:	81 e0       	ldi	r24, 0x01	; 1
    ac46:	23 2b       	or	r18, r19
    ac48:	09 f4       	brne	.+2      	; 0xac4c <shoot_pressed+0x12>
    ac4a:	80 e0       	ldi	r24, 0x00	; 0
}
    ac4c:	08 95       	ret

0000ac4e <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    ac4e:	fc 01       	movw	r30, r24
    ac50:	83 a1       	ldd	r24, Z+35	; 0x23
    ac52:	fb 01       	movw	r30, r22
    ac54:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    ac56:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    ac58:	81 11       	cpse	r24, r1
    ac5a:	09 c0       	rjmp	.+18     	; 0xac6e <get_delta+0x20>
		return FRAME_TIME * s->speed;
    ac5c:	80 e0       	ldi	r24, 0x00	; 0
    ac5e:	90 e0       	ldi	r25, 0x00	; 0
    ac60:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    ac64:	25 e6       	ldi	r18, 0x65	; 101
    ac66:	38 e8       	ldi	r19, 0x88	; 136
    ac68:	48 e8       	ldi	r20, 0x88	; 136
    ac6a:	5c e3       	ldi	r21, 0x3C	; 60
    ac6c:	0e c0       	rjmp	.+28     	; 0xac8a <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    ac6e:	80 e0       	ldi	r24, 0x00	; 0
    ac70:	90 e0       	ldi	r25, 0x00	; 0
    ac72:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    ac76:	25 e6       	ldi	r18, 0x65	; 101
    ac78:	38 e8       	ldi	r19, 0x88	; 136
    ac7a:	48 e8       	ldi	r20, 0x88	; 136
    ac7c:	5c e3       	ldi	r21, 0x3C	; 60
    ac7e:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    ac82:	23 e3       	ldi	r18, 0x33	; 51
    ac84:	33 e3       	ldi	r19, 0x33	; 51
    ac86:	43 eb       	ldi	r20, 0xB3	; 179
    ac88:	5f e3       	ldi	r21, 0x3F	; 63
    ac8a:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
}
    ac8e:	08 95       	ret

0000ac90 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    ac90:	cf 93       	push	r28
    ac92:	df 93       	push	r29
    ac94:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    ac96:	ac 01       	movw	r20, r24
    ac98:	44 5f       	subi	r20, 0xF4	; 244
    ac9a:	5f 4f       	sbci	r21, 0xFF	; 255
    ac9c:	23 e0       	ldi	r18, 0x03	; 3
    ac9e:	60 e0       	ldi	r22, 0x00	; 0
    aca0:	8a e0       	ldi	r24, 0x0A	; 10
    aca2:	8c 0f       	add	r24, r28
    aca4:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
	Print(x, 0, (char*) strScore);
    aca8:	d0 e0       	ldi	r29, 0x00	; 0
    acaa:	41 e3       	ldi	r20, 0x31	; 49
    acac:	54 e0       	ldi	r21, 0x04	; 4
    acae:	60 e0       	ldi	r22, 0x00	; 0
    acb0:	70 e0       	ldi	r23, 0x00	; 0
    acb2:	ce 01       	movw	r24, r28
    acb4:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(x, 1, (char*) strTotal);
    acb8:	4a e2       	ldi	r20, 0x2A	; 42
    acba:	54 e0       	ldi	r21, 0x04	; 4
    acbc:	61 e0       	ldi	r22, 0x01	; 1
    acbe:	70 e0       	ldi	r23, 0x00	; 0
    acc0:	ce 01       	movw	r24, r28
	
}
    acc2:	df 91       	pop	r29
    acc4:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    acc6:	0c 94 6c 4f 	jmp	0x9ed8	; 0x9ed8 <Print>

0000acca <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    acca:	0f 93       	push	r16
    accc:	1f 93       	push	r17
    acce:	cf 93       	push	r28
    acd0:	df 93       	push	r29
    acd2:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    acd4:	c6 2f       	mov	r28, r22
    acd6:	d0 e0       	ldi	r29, 0x00	; 0
    acd8:	28 96       	adiw	r28, 0x08	; 8
    acda:	20 e0       	ldi	r18, 0x00	; 0
    acdc:	fc 01       	movw	r30, r24
    acde:	40 89       	ldd	r20, Z+16	; 0x10
    ace0:	60 e0       	ldi	r22, 0x00	; 0
    ace2:	70 e0       	ldi	r23, 0x00	; 0
    ace4:	ce 01       	movw	r24, r28
    ace6:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    acea:	20 e0       	ldi	r18, 0x00	; 0
    acec:	f8 01       	movw	r30, r16
    acee:	47 85       	ldd	r20, Z+15	; 0x0f
    acf0:	61 e0       	ldi	r22, 0x01	; 1
    acf2:	70 e0       	ldi	r23, 0x00	; 0
    acf4:	ce 01       	movw	r24, r28
}
    acf6:	df 91       	pop	r29
    acf8:	cf 91       	pop	r28
    acfa:	1f 91       	pop	r17
    acfc:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    acfe:	0c 94 39 4f 	jmp	0x9e72	; 0x9e72 <PrintByte>

0000ad02 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    ad02:	ef 92       	push	r14
    ad04:	ff 92       	push	r15
    ad06:	0f 93       	push	r16
    ad08:	1f 93       	push	r17
    ad0a:	cf 93       	push	r28
    ad0c:	df 93       	push	r29
    ad0e:	1f 92       	push	r1
    ad10:	cd b7       	in	r28, 0x3d	; 61
    ad12:	de b7       	in	r29, 0x3e	; 62
    ad14:	7c 01       	movw	r14, r24
    ad16:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    ad18:	fc 01       	movw	r30, r24
    ad1a:	67 81       	ldd	r22, Z+7	; 0x07
    ad1c:	70 85       	ldd	r23, Z+8	; 0x08
    ad1e:	81 85       	ldd	r24, Z+9	; 0x09
    ad20:	92 85       	ldd	r25, Z+10	; 0x0a
    ad22:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    ad26:	46 2f       	mov	r20, r22
    ad28:	f7 01       	movw	r30, r14
    ad2a:	63 81       	ldd	r22, Z+3	; 0x03
    ad2c:	74 81       	ldd	r23, Z+4	; 0x04
    ad2e:	85 81       	ldd	r24, Z+5	; 0x05
    ad30:	96 81       	ldd	r25, Z+6	; 0x06
    ad32:	49 83       	std	Y+1, r20	; 0x01
    ad34:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    ad38:	02 e0       	ldi	r16, 0x02	; 2
    ad3a:	22 e0       	ldi	r18, 0x02	; 2
    ad3c:	49 81       	ldd	r20, Y+1	; 0x01
    ad3e:	81 2f       	mov	r24, r17
    ad40:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
}
    ad44:	0f 90       	pop	r0
    ad46:	df 91       	pop	r29
    ad48:	cf 91       	pop	r28
    ad4a:	1f 91       	pop	r17
    ad4c:	0f 91       	pop	r16
    ad4e:	ff 90       	pop	r15
    ad50:	ef 90       	pop	r14
    ad52:	08 95       	ret

0000ad54 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    ad54:	ef 92       	push	r14
    ad56:	ff 92       	push	r15
    ad58:	0f 93       	push	r16
    ad5a:	1f 93       	push	r17
    ad5c:	cf 93       	push	r28
    ad5e:	df 93       	push	r29
    ad60:	1f 92       	push	r1
    ad62:	cd b7       	in	r28, 0x3d	; 61
    ad64:	de b7       	in	r29, 0x3e	; 62
    ad66:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    ad68:	81 89       	ldd	r24, Z+17	; 0x11
    ad6a:	88 23       	and	r24, r24
    ad6c:	b9 f0       	breq	.+46     	; 0xad9c <render_shot+0x48>
    ad6e:	16 2f       	mov	r17, r22
    ad70:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    ad72:	64 a9       	ldd	r22, Z+52	; 0x34
    ad74:	75 a9       	ldd	r23, Z+53	; 0x35
    ad76:	86 a9       	ldd	r24, Z+54	; 0x36
    ad78:	97 a9       	ldd	r25, Z+55	; 0x37
    ad7a:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    ad7e:	46 2f       	mov	r20, r22
    ad80:	f7 01       	movw	r30, r14
    ad82:	60 a9       	ldd	r22, Z+48	; 0x30
    ad84:	71 a9       	ldd	r23, Z+49	; 0x31
    ad86:	82 a9       	ldd	r24, Z+50	; 0x32
    ad88:	93 a9       	ldd	r25, Z+51	; 0x33
    ad8a:	49 83       	std	Y+1, r20	; 0x01
    ad8c:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    ad90:	01 e0       	ldi	r16, 0x01	; 1
    ad92:	21 e0       	ldi	r18, 0x01	; 1
    ad94:	49 81       	ldd	r20, Y+1	; 0x01
    ad96:	81 2f       	mov	r24, r17
    ad98:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
			sprite_index++;
		}
	}
}
    ad9c:	0f 90       	pop	r0
    ad9e:	df 91       	pop	r29
    ada0:	cf 91       	pop	r28
    ada2:	1f 91       	pop	r17
    ada4:	0f 91       	pop	r16
    ada6:	ff 90       	pop	r15
    ada8:	ef 90       	pop	r14
    adaa:	08 95       	ret

0000adac <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    adac:	ef 92       	push	r14
    adae:	ff 92       	push	r15
    adb0:	0f 93       	push	r16
    adb2:	1f 93       	push	r17
    adb4:	cf 93       	push	r28
    adb6:	df 93       	push	r29
    adb8:	ec 01       	movw	r28, r24
    adba:	25 96       	adiw	r28, 0x05	; 5
    adbc:	8c 01       	movw	r16, r24
    adbe:	0f 5d       	subi	r16, 0xDF	; 223
    adc0:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    adc2:	8e e1       	ldi	r24, 0x1E	; 30
    adc4:	e8 2e       	mov	r14, r24
    adc6:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    adc8:	88 85       	ldd	r24, Y+8	; 0x08
    adca:	99 85       	ldd	r25, Y+9	; 0x09
    adcc:	89 2b       	or	r24, r25
    adce:	c1 f0       	breq	.+48     	; 0xae00 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    add0:	ce 01       	movw	r24, r28
    add2:	04 97       	sbiw	r24, 0x04	; 4
    add4:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    add8:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    adda:	48 81       	ld	r20, Y
    addc:	88 85       	ldd	r24, Y+8	; 0x08
    adde:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    ade0:	b7 01       	movw	r22, r14
    ade2:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    ade6:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    ade8:	44 23       	and	r20, r20
    adea:	39 f0       	breq	.+14     	; 0xadfa <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    adec:	40 e0       	ldi	r20, 0x00	; 0
    adee:	50 e0       	ldi	r21, 0x00	; 0
    adf0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
				ta->anims[i].tile_index = 0;
    adf4:	19 86       	std	Y+9, r1	; 0x09
    adf6:	18 86       	std	Y+8, r1	; 0x08
    adf8:	03 c0       	rjmp	.+6      	; 0xae00 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    adfa:	a9 01       	movw	r20, r18
    adfc:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
    ae00:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    ae02:	c0 17       	cp	r28, r16
    ae04:	d1 07       	cpc	r29, r17
    ae06:	01 f7       	brne	.-64     	; 0xadc8 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    ae08:	df 91       	pop	r29
    ae0a:	cf 91       	pop	r28
    ae0c:	1f 91       	pop	r17
    ae0e:	0f 91       	pop	r16
    ae10:	ff 90       	pop	r15
    ae12:	ef 90       	pop	r14
    ae14:	08 95       	ret

0000ae16 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    ae16:	cf 93       	push	r28
    ae18:	df 93       	push	r29
    ae1a:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    ae1c:	0e 94 13 50 	call	0xa026	; 0xa026 <LBGetNextFrameReverse>
    ae20:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    ae22:	4c 81       	ldd	r20, Y+4	; 0x04
    ae24:	8c 85       	ldd	r24, Y+12	; 0x0c
    ae26:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    ae28:	6e e1       	ldi	r22, 0x1E	; 30
    ae2a:	70 e0       	ldi	r23, 0x00	; 0
    ae2c:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    ae30:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    ae32:	44 23       	and	r20, r20
    ae34:	19 f0       	breq	.+6      	; 0xae3c <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    ae36:	45 e0       	ldi	r20, 0x05	; 5
    ae38:	58 e7       	ldi	r21, 0x78	; 120
    ae3a:	01 c0       	rjmp	.+2      	; 0xae3e <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    ae3c:	a9 01       	movw	r20, r18
    ae3e:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	}
	return ta->anim.looped;
}
    ae42:	8c 81       	ldd	r24, Y+4	; 0x04
    ae44:	df 91       	pop	r29
    ae46:	cf 91       	pop	r28
    ae48:	08 95       	ret

0000ae4a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    ae4a:	1f 93       	push	r17
    ae4c:	cf 93       	push	r28
    ae4e:	df 93       	push	r29
    ae50:	ec 01       	movw	r28, r24
    ae52:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    ae54:	8d 89       	ldd	r24, Y+21	; 0x15
    ae56:	80 ff       	sbrs	r24, 0
    ae58:	17 c0       	rjmp	.+46     	; 0xae88 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    ae5a:	ce 01       	movw	r24, r28
    ae5c:	83 59       	subi	r24, 0x93	; 147
    ae5e:	9f 4f       	sbci	r25, 0xFF	; 255
    ae60:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    ae64:	fe 01       	movw	r30, r28
    ae66:	ef 58       	subi	r30, 0x8F	; 143
    ae68:	ff 4f       	sbci	r31, 0xFF	; 255
    ae6a:	20 81       	ld	r18, Z
    ae6c:	22 23       	and	r18, r18
    ae6e:	09 f4       	brne	.+2      	; 0xae72 <tank_map+0x28>
    ae70:	4a c0       	rjmp	.+148    	; 0xaf06 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    ae72:	8d 89       	ldd	r24, Y+21	; 0x15
    ae74:	91 e0       	ldi	r25, 0x01	; 1
    ae76:	98 27       	eor	r25, r24
    ae78:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    ae7a:	ce 01       	movw	r24, r28
    ae7c:	0e 94 4b 54 	call	0xa896	; 0xa896 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    ae80:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    ae82:	85 eb       	ldi	r24, 0xB5	; 181
    ae84:	9e e3       	ldi	r25, 0x3E	; 62
    ae86:	40 c0       	rjmp	.+128    	; 0xaf08 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    ae88:	9e 89       	ldd	r25, Y+22	; 0x16
    ae8a:	98 37       	cpi	r25, 0x78	; 120
    ae8c:	11 f0       	breq	.+4      	; 0xae92 <tank_map+0x48>
		{
			player->grace_frame++;
    ae8e:	9f 5f       	subi	r25, 0xFF	; 255
    ae90:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    ae92:	98 81       	ld	r25, Y
    ae94:	91 30       	cpi	r25, 0x01	; 1
    ae96:	61 f0       	breq	.+24     	; 0xaeb0 <tank_map+0x66>
    ae98:	b0 f0       	brcs	.+44     	; 0xaec6 <tank_map+0x7c>
    ae9a:	92 30       	cpi	r25, 0x02	; 2
    ae9c:	69 f0       	breq	.+26     	; 0xaeb8 <tank_map+0x6e>
    ae9e:	93 30       	cpi	r25, 0x03	; 3
    aea0:	91 f4       	brne	.+36     	; 0xaec6 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    aea2:	ce 01       	movw	r24, r28
    aea4:	8f 59       	subi	r24, 0x9F	; 159
    aea6:	9f 4f       	sbci	r25, 0xFF	; 255
    aea8:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    aeac:	41 e0       	ldi	r20, 0x01	; 1
    aeae:	11 c0       	rjmp	.+34     	; 0xaed2 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    aeb0:	ce 01       	movw	r24, r28
    aeb2:	8f 59       	subi	r24, 0x9F	; 159
    aeb4:	9f 4f       	sbci	r25, 0xFF	; 255
    aeb6:	0a c0       	rjmp	.+20     	; 0xaecc <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    aeb8:	ce 01       	movw	r24, r28
    aeba:	8b 5a       	subi	r24, 0xAB	; 171
    aebc:	9f 4f       	sbci	r25, 0xFF	; 255
    aebe:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    aec2:	42 e0       	ldi	r20, 0x02	; 2
    aec4:	06 c0       	rjmp	.+12     	; 0xaed2 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    aec6:	ce 01       	movw	r24, r28
    aec8:	8b 5a       	subi	r24, 0xAB	; 171
    aeca:	9f 4f       	sbci	r25, 0xFF	; 255
    aecc:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    aed0:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    aed2:	2e 89       	ldd	r18, Y+22	; 0x16
    aed4:	28 37       	cpi	r18, 0x78	; 120
    aed6:	31 f0       	breq	.+12     	; 0xaee4 <tank_map+0x9a>
    aed8:	20 91 70 0b 	lds	r18, 0x0B70
    aedc:	22 23       	and	r18, r18
    aede:	11 f0       	breq	.+4      	; 0xaee4 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    aee0:	85 eb       	ldi	r24, 0xB5	; 181
    aee2:	9e e3       	ldi	r25, 0x3E	; 62
		}
		game.toggle_counter--;
    aee4:	20 91 6f 0b 	lds	r18, 0x0B6F
    aee8:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    aeea:	19 f0       	breq	.+6      	; 0xaef2 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    aeec:	20 93 6f 0b 	sts	0x0B6F, r18
    aef0:	0b c0       	rjmp	.+22     	; 0xaf08 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    aef2:	24 e1       	ldi	r18, 0x14	; 20
    aef4:	20 93 6f 0b 	sts	0x0B6F, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    aef8:	30 91 70 0b 	lds	r19, 0x0B70
    aefc:	21 e0       	ldi	r18, 0x01	; 1
    aefe:	23 27       	eor	r18, r19
    af00:	20 93 70 0b 	sts	0x0B70, r18
    af04:	01 c0       	rjmp	.+2      	; 0xaf08 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    af06:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    af08:	bc 01       	movw	r22, r24
    af0a:	81 2f       	mov	r24, r17
    af0c:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    af10:	84 e0       	ldi	r24, 0x04	; 4
    af12:	81 0f       	add	r24, r17
    af14:	df 91       	pop	r29
    af16:	cf 91       	pop	r28
    af18:	1f 91       	pop	r17
    af1a:	08 95       	ret

0000af1c <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    af1c:	cf 93       	push	r28
    af1e:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    af20:	fc 01       	movw	r30, r24
    af22:	23 ad       	ldd	r18, Z+59	; 0x3b
    af24:	22 23       	and	r18, r18
    af26:	d9 f0       	breq	.+54     	; 0xaf5e <shot_map+0x42>
		{
			switch (shot->shared.direction)
    af28:	25 a5       	ldd	r18, Z+45	; 0x2d
    af2a:	21 30       	cpi	r18, 0x01	; 1
    af2c:	59 f0       	breq	.+22     	; 0xaf44 <shot_map+0x28>
    af2e:	a8 f0       	brcs	.+42     	; 0xaf5a <shot_map+0x3e>
    af30:	22 30       	cpi	r18, 0x02	; 2
    af32:	71 f0       	breq	.+28     	; 0xaf50 <shot_map+0x34>
    af34:	23 30       	cpi	r18, 0x03	; 3
    af36:	89 f4       	brne	.+34     	; 0xaf5a <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    af38:	87 5b       	subi	r24, 0xB7	; 183
    af3a:	9f 4f       	sbci	r25, 0xFF	; 255
    af3c:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    af40:	41 e0       	ldi	r20, 0x01	; 1
    af42:	10 c0       	rjmp	.+32     	; 0xaf64 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    af44:	87 5b       	subi	r24, 0xB7	; 183
    af46:	9f 4f       	sbci	r25, 0xFF	; 255
    af48:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    af4c:	40 e0       	ldi	r20, 0x00	; 0
    af4e:	0a c0       	rjmp	.+20     	; 0xaf64 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    af50:	cd 96       	adiw	r24, 0x3d	; 61
    af52:	0e 94 ee 4f 	call	0x9fdc	; 0x9fdc <LBGetNextFrame>
    af56:	42 e0       	ldi	r20, 0x02	; 2
    af58:	05 c0       	rjmp	.+10     	; 0xaf64 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    af5a:	cd 96       	adiw	r24, 0x3d	; 61
    af5c:	f5 cf       	rjmp	.-22     	; 0xaf48 <shot_map+0x2c>
    af5e:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    af60:	85 eb       	ldi	r24, 0xB5	; 181
    af62:	9e e3       	ldi	r25, 0x3E	; 62
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    af64:	bc 01       	movw	r22, r24
    af66:	8c 2f       	mov	r24, r28
    af68:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    af6c:	81 e0       	ldi	r24, 0x01	; 1
    af6e:	8c 0f       	add	r24, r28
    af70:	cf 91       	pop	r28
    af72:	08 95       	ret

0000af74 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    af74:	cf 93       	push	r28
    af76:	df 93       	push	r29
    af78:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    af7a:	88 81       	ld	r24, Y
    af7c:	81 11       	cpse	r24, r1
    af7e:	0b c0       	rjmp	.+22     	; 0xaf96 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    af80:	6f 81       	ldd	r22, Y+7	; 0x07
    af82:	78 85       	ldd	r23, Y+8	; 0x08
    af84:	89 85       	ldd	r24, Y+9	; 0x09
    af86:	9a 85       	ldd	r25, Y+10	; 0x0a
    af88:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    af8c:	66 95       	lsr	r22
    af8e:	66 95       	lsr	r22
    af90:	66 95       	lsr	r22
    af92:	6f 5f       	subi	r22, 0xFF	; 255
    af94:	1d c0       	rjmp	.+58     	; 0xafd0 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    af96:	81 30       	cpi	r24, 0x01	; 1
    af98:	69 f4       	brne	.+26     	; 0xafb4 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    af9a:	20 e0       	ldi	r18, 0x00	; 0
    af9c:	30 e0       	ldi	r19, 0x00	; 0
    af9e:	40 e0       	ldi	r20, 0x00	; 0
    afa0:	5e e3       	ldi	r21, 0x3E	; 62
    afa2:	6b 81       	ldd	r22, Y+3	; 0x03
    afa4:	7c 81       	ldd	r23, Y+4	; 0x04
    afa6:	8d 81       	ldd	r24, Y+5	; 0x05
    afa8:	9e 81       	ldd	r25, Y+6	; 0x06
    afaa:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    afae:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    afb2:	27 c0       	rjmp	.+78     	; 0xb002 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    afb4:	82 30       	cpi	r24, 0x02	; 2
    afb6:	d9 f4       	brne	.+54     	; 0xafee <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    afb8:	20 e0       	ldi	r18, 0x00	; 0
    afba:	30 e0       	ldi	r19, 0x00	; 0
    afbc:	40 e0       	ldi	r20, 0x00	; 0
    afbe:	5e e3       	ldi	r21, 0x3E	; 62
    afc0:	6f 81       	ldd	r22, Y+7	; 0x07
    afc2:	78 85       	ldd	r23, Y+8	; 0x08
    afc4:	89 85       	ldd	r24, Y+9	; 0x09
    afc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    afc8:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    afcc:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
		sprite->y = tile * 8;
    afd0:	88 e0       	ldi	r24, 0x08	; 8
    afd2:	68 9f       	mul	r22, r24
    afd4:	b0 01       	movw	r22, r0
    afd6:	11 24       	eor	r1, r1
    afd8:	88 27       	eor	r24, r24
    afda:	77 fd       	sbrc	r23, 7
    afdc:	80 95       	com	r24
    afde:	98 2f       	mov	r25, r24
    afe0:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    afe4:	6f 83       	std	Y+7, r22	; 0x07
    afe6:	78 87       	std	Y+8, r23	; 0x08
    afe8:	89 87       	std	Y+9, r24	; 0x09
    afea:	9a 87       	std	Y+10, r25	; 0x0a
    afec:	18 c0       	rjmp	.+48     	; 0xb01e <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    afee:	6b 81       	ldd	r22, Y+3	; 0x03
    aff0:	7c 81       	ldd	r23, Y+4	; 0x04
    aff2:	8d 81       	ldd	r24, Y+5	; 0x05
    aff4:	9e 81       	ldd	r25, Y+6	; 0x06
    aff6:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    affa:	66 95       	lsr	r22
    affc:	66 95       	lsr	r22
    affe:	66 95       	lsr	r22
    b000:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    b002:	88 e0       	ldi	r24, 0x08	; 8
    b004:	68 9f       	mul	r22, r24
    b006:	b0 01       	movw	r22, r0
    b008:	11 24       	eor	r1, r1
    b00a:	88 27       	eor	r24, r24
    b00c:	77 fd       	sbrc	r23, 7
    b00e:	80 95       	com	r24
    b010:	98 2f       	mov	r25, r24
    b012:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    b016:	6b 83       	std	Y+3, r22	; 0x03
    b018:	7c 83       	std	Y+4, r23	; 0x04
    b01a:	8d 83       	std	Y+5, r24	; 0x05
    b01c:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b01e:	81 e0       	ldi	r24, 0x01	; 1
    b020:	8a 83       	std	Y+2, r24	; 0x02
}
    b022:	df 91       	pop	r29
    b024:	cf 91       	pop	r28
    b026:	08 95       	ret

0000b028 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    b028:	cf 93       	push	r28
    b02a:	df 93       	push	r29
    b02c:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    b02e:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    b032:	9b 01       	movw	r18, r22
    b034:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    b036:	88 81       	ld	r24, Y
    b038:	81 11       	cpse	r24, r1
    b03a:	07 c0       	rjmp	.+14     	; 0xb04a <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    b03c:	6f 81       	ldd	r22, Y+7	; 0x07
    b03e:	78 85       	ldd	r23, Y+8	; 0x08
    b040:	89 85       	ldd	r24, Y+9	; 0x09
    b042:	9a 85       	ldd	r25, Y+10	; 0x0a
    b044:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b048:	11 c0       	rjmp	.+34     	; 0xb06c <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    b04a:	81 30       	cpi	r24, 0x01	; 1
    b04c:	39 f4       	brne	.+14     	; 0xb05c <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    b04e:	6b 81       	ldd	r22, Y+3	; 0x03
    b050:	7c 81       	ldd	r23, Y+4	; 0x04
    b052:	8d 81       	ldd	r24, Y+5	; 0x05
    b054:	9e 81       	ldd	r25, Y+6	; 0x06
    b056:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    b05a:	13 c0       	rjmp	.+38     	; 0xb082 <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    b05c:	82 30       	cpi	r24, 0x02	; 2
    b05e:	59 f4       	brne	.+22     	; 0xb076 <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    b060:	6f 81       	ldd	r22, Y+7	; 0x07
    b062:	78 85       	ldd	r23, Y+8	; 0x08
    b064:	89 85       	ldd	r24, Y+9	; 0x09
    b066:	9a 85       	ldd	r25, Y+10	; 0x0a
    b068:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    b06c:	6f 83       	std	Y+7, r22	; 0x07
    b06e:	78 87       	std	Y+8, r23	; 0x08
    b070:	89 87       	std	Y+9, r24	; 0x09
    b072:	9a 87       	std	Y+10, r25	; 0x0a
    b074:	0a c0       	rjmp	.+20     	; 0xb08a <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    b076:	6b 81       	ldd	r22, Y+3	; 0x03
    b078:	7c 81       	ldd	r23, Y+4	; 0x04
    b07a:	8d 81       	ldd	r24, Y+5	; 0x05
    b07c:	9e 81       	ldd	r25, Y+6	; 0x06
    b07e:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b082:	6b 83       	std	Y+3, r22	; 0x03
    b084:	7c 83       	std	Y+4, r23	; 0x04
    b086:	8d 83       	std	Y+5, r24	; 0x05
    b088:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    b08a:	81 e0       	ldi	r24, 0x01	; 1
    b08c:	8a 83       	std	Y+2, r24	; 0x02
}
    b08e:	df 91       	pop	r29
    b090:	cf 91       	pop	r28
    b092:	08 95       	ret

0000b094 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b094:	85 5e       	subi	r24, 0xE5	; 229
    b096:	93 4f       	sbci	r25, 0xF3	; 243
    b098:	fc 01       	movw	r30, r24
    b09a:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b09c:	81 30       	cpi	r24, 0x01	; 1
    b09e:	31 f0       	breq	.+12     	; 0xb0ac <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b0a0:	82 30       	cpi	r24, 0x02	; 2
    b0a2:	31 f0       	breq	.+12     	; 0xb0b0 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b0a4:	87 33       	cpi	r24, 0x37	; 55
    b0a6:	31 f0       	breq	.+12     	; 0xb0b4 <solid_square_tile+0x20>

	return 0;
    b0a8:	80 e0       	ldi	r24, 0x00	; 0
    b0aa:	08 95       	ret
    b0ac:	81 e0       	ldi	r24, 0x01	; 1
    b0ae:	08 95       	ret
    b0b0:	82 e0       	ldi	r24, 0x02	; 2
    b0b2:	08 95       	ret
    b0b4:	87 e3       	ldi	r24, 0x37	; 55
}
    b0b6:	08 95       	ret

0000b0b8 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b0b8:	85 5e       	subi	r24, 0xE5	; 229
    b0ba:	93 4f       	sbci	r25, 0xF3	; 243
    b0bc:	fc 01       	movw	r30, r24
    b0be:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b0c0:	83 30       	cpi	r24, 0x03	; 3
    b0c2:	41 f0       	breq	.+16     	; 0xb0d4 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b0c4:	86 30       	cpi	r24, 0x06	; 6
    b0c6:	41 f0       	breq	.+16     	; 0xb0d8 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b0c8:	84 30       	cpi	r24, 0x04	; 4
    b0ca:	41 f0       	breq	.+16     	; 0xb0dc <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b0cc:	85 30       	cpi	r24, 0x05	; 5
    b0ce:	41 f0       	breq	.+16     	; 0xb0e0 <solid_directional_tile+0x28>
	
	return 0;
    b0d0:	80 e0       	ldi	r24, 0x00	; 0
    b0d2:	08 95       	ret
    b0d4:	83 e0       	ldi	r24, 0x03	; 3
    b0d6:	08 95       	ret
    b0d8:	86 e0       	ldi	r24, 0x06	; 6
    b0da:	08 95       	ret
    b0dc:	84 e0       	ldi	r24, 0x04	; 4
    b0de:	08 95       	ret
    b0e0:	85 e0       	ldi	r24, 0x05	; 5
}
    b0e2:	08 95       	ret

0000b0e4 <solid_tile>:

u8 solid_tile(int tile_index)
{
    b0e4:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    b0e6:	fc 01       	movw	r30, r24
    b0e8:	e5 5e       	subi	r30, 0xE5	; 229
    b0ea:	f3 4f       	sbci	r31, 0xF3	; 243
    b0ec:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b0ee:	91 30       	cpi	r25, 0x01	; 1
    b0f0:	39 f0       	breq	.+14     	; 0xb100 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    b0f2:	92 30       	cpi	r25, 0x02	; 2
    b0f4:	39 f0       	breq	.+14     	; 0xb104 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    b0f6:	97 33       	cpi	r25, 0x37	; 55
    b0f8:	39 f0       	breq	.+14     	; 0xb108 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    b0fa:	c9 01       	movw	r24, r18
    b0fc:	0c 94 5c 58 	jmp	0xb0b8	; 0xb0b8 <solid_directional_tile>
    b100:	81 e0       	ldi	r24, 0x01	; 1
    b102:	08 95       	ret
    b104:	82 e0       	ldi	r24, 0x02	; 2
    b106:	08 95       	ret
    b108:	87 e3       	ldi	r24, 0x37	; 55
}
    b10a:	08 95       	ret

0000b10c <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    b10c:	7f 92       	push	r7
    b10e:	8f 92       	push	r8
    b110:	9f 92       	push	r9
    b112:	af 92       	push	r10
    b114:	bf 92       	push	r11
    b116:	cf 92       	push	r12
    b118:	df 92       	push	r13
    b11a:	ef 92       	push	r14
    b11c:	ff 92       	push	r15
    b11e:	0f 93       	push	r16
    b120:	1f 93       	push	r17
    b122:	cf 93       	push	r28
    b124:	df 93       	push	r29
    b126:	b6 2e       	mov	r11, r22
    b128:	94 2e       	mov	r9, r20
    b12a:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    b12c:	fc 01       	movw	r30, r24
    b12e:	e5 5e       	subi	r30, 0xE5	; 229
    b130:	f3 4f       	sbci	r31, 0xF3	; 243
    b132:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    b134:	6e e1       	ldi	r22, 0x1E	; 30
    b136:	70 e0       	ldi	r23, 0x00	; 0
    b138:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b13c:	f8 2e       	mov	r15, r24
    b13e:	ff 0c       	add	r15, r15
    b140:	ff 0c       	add	r15, r15
    b142:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    b144:	6d 5f       	subi	r22, 0xFD	; 253
    b146:	7f 4f       	sbci	r23, 0xFF	; 255
    b148:	16 2f       	mov	r17, r22
    b14a:	11 0f       	add	r17, r17
    b14c:	11 0f       	add	r17, r17
    b14e:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    b150:	83 e0       	ldi	r24, 0x03	; 3
    b152:	d8 16       	cp	r13, r24
    b154:	19 f0       	breq	.+6      	; 0xb15c <collides_directional_tile+0x50>
    b156:	86 e0       	ldi	r24, 0x06	; 6
    b158:	d8 12       	cpse	r13, r24
    b15a:	31 c0       	rjmp	.+98     	; 0xb1be <collides_directional_tile+0xb2>
    b15c:	cf ef       	ldi	r28, 0xFF	; 255
    b15e:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    b160:	c9 0d       	add	r28, r9
    b162:	27 e0       	ldi	r18, 0x07	; 7
    b164:	72 2e       	mov	r7, r18
    b166:	7f 0c       	add	r7, r15
    b168:	37 e0       	ldi	r19, 0x07	; 7
    b16a:	83 2e       	mov	r8, r19
    b16c:	81 0e       	add	r8, r17
    b16e:	ac 2e       	mov	r10, r28
    b170:	cb 2c       	mov	r12, r11
    b172:	e9 2c       	mov	r14, r9
    b174:	0b 2d       	mov	r16, r11
    b176:	21 2f       	mov	r18, r17
    b178:	47 2d       	mov	r20, r7
    b17a:	68 2d       	mov	r22, r8
    b17c:	8f 2d       	mov	r24, r15
    b17e:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b182:	81 11       	cpse	r24, r1
    b184:	58 c0       	rjmp	.+176    	; 0xb236 <collides_directional_tile+0x12a>
    b186:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    b188:	db 0d       	add	r29, r11
    b18a:	a9 2c       	mov	r10, r9
    b18c:	cd 2e       	mov	r12, r29
    b18e:	21 2f       	mov	r18, r17
    b190:	47 2d       	mov	r20, r7
    b192:	68 2d       	mov	r22, r8
    b194:	8f 2d       	mov	r24, r15
    b196:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b19a:	81 11       	cpse	r24, r1
    b19c:	4c c0       	rjmp	.+152    	; 0xb236 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    b19e:	ac 2e       	mov	r10, r28
    b1a0:	0d 2f       	mov	r16, r29
    b1a2:	21 2f       	mov	r18, r17
    b1a4:	47 2d       	mov	r20, r7
    b1a6:	68 2d       	mov	r22, r8
    b1a8:	8f 2d       	mov	r24, r15
    b1aa:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b1ae:	81 11       	cpse	r24, r1
    b1b0:	42 c0       	rjmp	.+132    	; 0xb236 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    b1b2:	ec 2e       	mov	r14, r28
    b1b4:	0b 2d       	mov	r16, r11
    b1b6:	21 2f       	mov	r18, r17
    b1b8:	47 2d       	mov	r20, r7
    b1ba:	68 2d       	mov	r22, r8
    b1bc:	34 c0       	rjmp	.+104    	; 0xb226 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    b1be:	8c ef       	ldi	r24, 0xFC	; 252
    b1c0:	8d 0d       	add	r24, r13
    b1c2:	82 30       	cpi	r24, 0x02	; 2
    b1c4:	b0 f5       	brcc	.+108    	; 0xb232 <collides_directional_tile+0x126>
    b1c6:	cf ef       	ldi	r28, 0xFF	; 255
    b1c8:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    b1ca:	c4 0f       	add	r28, r20
    b1cc:	87 e0       	ldi	r24, 0x07	; 7
    b1ce:	78 2e       	mov	r7, r24
    b1d0:	71 0e       	add	r7, r17
    b1d2:	97 e0       	ldi	r25, 0x07	; 7
    b1d4:	89 2e       	mov	r8, r25
    b1d6:	8f 0c       	add	r8, r15
    b1d8:	ac 2e       	mov	r10, r28
    b1da:	cb 2c       	mov	r12, r11
    b1dc:	e4 2e       	mov	r14, r20
    b1de:	0b 2d       	mov	r16, r11
    b1e0:	27 2d       	mov	r18, r7
    b1e2:	48 2d       	mov	r20, r8
    b1e4:	61 2f       	mov	r22, r17
    b1e6:	8f 2d       	mov	r24, r15
    b1e8:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b1ec:	81 11       	cpse	r24, r1
    b1ee:	23 c0       	rjmp	.+70     	; 0xb236 <collides_directional_tile+0x12a>
    b1f0:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    b1f2:	db 0d       	add	r29, r11
    b1f4:	a9 2c       	mov	r10, r9
    b1f6:	cd 2e       	mov	r12, r29
    b1f8:	27 2d       	mov	r18, r7
    b1fa:	48 2d       	mov	r20, r8
    b1fc:	61 2f       	mov	r22, r17
    b1fe:	8f 2d       	mov	r24, r15
    b200:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b204:	81 11       	cpse	r24, r1
    b206:	17 c0       	rjmp	.+46     	; 0xb236 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    b208:	ac 2e       	mov	r10, r28
    b20a:	0d 2f       	mov	r16, r29
    b20c:	27 2d       	mov	r18, r7
    b20e:	48 2d       	mov	r20, r8
    b210:	61 2f       	mov	r22, r17
    b212:	8f 2d       	mov	r24, r15
    b214:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b218:	81 11       	cpse	r24, r1
    b21a:	0d c0       	rjmp	.+26     	; 0xb236 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    b21c:	ec 2e       	mov	r14, r28
    b21e:	0b 2d       	mov	r16, r11
    b220:	27 2d       	mov	r18, r7
    b222:	48 2d       	mov	r20, r8
    b224:	61 2f       	mov	r22, r17
    b226:	8f 2d       	mov	r24, r15
    b228:	0e 94 f1 50 	call	0xa1e2	; 0xa1e2 <LBLineIntersect>
    b22c:	81 11       	cpse	r24, r1
    b22e:	03 c0       	rjmp	.+6      	; 0xb236 <collides_directional_tile+0x12a>
    b230:	03 c0       	rjmp	.+6      	; 0xb238 <collides_directional_tile+0x12c>
	}
	
	return 0;
    b232:	80 e0       	ldi	r24, 0x00	; 0
    b234:	01 c0       	rjmp	.+2      	; 0xb238 <collides_directional_tile+0x12c>
    b236:	8d 2d       	mov	r24, r13
}
    b238:	df 91       	pop	r29
    b23a:	cf 91       	pop	r28
    b23c:	1f 91       	pop	r17
    b23e:	0f 91       	pop	r16
    b240:	ff 90       	pop	r15
    b242:	ef 90       	pop	r14
    b244:	df 90       	pop	r13
    b246:	cf 90       	pop	r12
    b248:	bf 90       	pop	r11
    b24a:	af 90       	pop	r10
    b24c:	9f 90       	pop	r9
    b24e:	8f 90       	pop	r8
    b250:	7f 90       	pop	r7
    b252:	08 95       	ret

0000b254 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    b254:	8f 92       	push	r8
    b256:	9f 92       	push	r9
    b258:	af 92       	push	r10
    b25a:	cf 92       	push	r12
    b25c:	ef 92       	push	r14
    b25e:	0f 93       	push	r16
    b260:	1f 93       	push	r17
    b262:	cf 93       	push	r28
    b264:	df 93       	push	r29
    b266:	4c 01       	movw	r8, r24
    b268:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b26a:	20 e0       	ldi	r18, 0x00	; 0
    b26c:	30 e0       	ldi	r19, 0x00	; 0
    b26e:	40 e0       	ldi	r20, 0x00	; 0
    b270:	50 e4       	ldi	r21, 0x40	; 64
    b272:	6f 81       	ldd	r22, Y+7	; 0x07
    b274:	78 85       	ldd	r23, Y+8	; 0x08
    b276:	89 85       	ldd	r24, Y+9	; 0x09
    b278:	9a 85       	ldd	r25, Y+10	; 0x0a
    b27a:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b27e:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b282:	e6 2e       	mov	r14, r22
    b284:	20 e0       	ldi	r18, 0x00	; 0
    b286:	30 e0       	ldi	r19, 0x00	; 0
    b288:	40 e0       	ldi	r20, 0x00	; 0
    b28a:	50 e4       	ldi	r21, 0x40	; 64
    b28c:	6b 81       	ldd	r22, Y+3	; 0x03
    b28e:	7c 81       	ldd	r23, Y+4	; 0x04
    b290:	8d 81       	ldd	r24, Y+5	; 0x05
    b292:	9e 81       	ldd	r25, Y+6	; 0x06
    b294:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b298:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b29c:	06 2f       	mov	r16, r22
    b29e:	20 e0       	ldi	r18, 0x00	; 0
    b2a0:	30 e0       	ldi	r19, 0x00	; 0
    b2a2:	40 e8       	ldi	r20, 0x80	; 128
    b2a4:	5f e3       	ldi	r21, 0x3F	; 63
    b2a6:	f4 01       	movw	r30, r8
    b2a8:	67 81       	ldd	r22, Z+7	; 0x07
    b2aa:	70 85       	ldd	r23, Z+8	; 0x08
    b2ac:	81 85       	ldd	r24, Z+9	; 0x09
    b2ae:	92 85       	ldd	r25, Z+10	; 0x0a
    b2b0:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b2b4:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b2b8:	16 2f       	mov	r17, r22
    b2ba:	20 e0       	ldi	r18, 0x00	; 0
    b2bc:	30 e0       	ldi	r19, 0x00	; 0
    b2be:	40 e8       	ldi	r20, 0x80	; 128
    b2c0:	5f e3       	ldi	r21, 0x3F	; 63
    b2c2:	f4 01       	movw	r30, r8
    b2c4:	63 81       	ldd	r22, Z+3	; 0x03
    b2c6:	74 81       	ldd	r23, Z+4	; 0x04
    b2c8:	85 81       	ldd	r24, Z+5	; 0x05
    b2ca:	96 81       	ldd	r25, Z+6	; 0x06
    b2cc:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b2d0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b2d4:	86 2f       	mov	r24, r22
    b2d6:	94 e0       	ldi	r25, 0x04	; 4
    b2d8:	a9 2e       	mov	r10, r25
    b2da:	24 e0       	ldi	r18, 0x04	; 4
    b2dc:	c2 2e       	mov	r12, r18
    b2de:	2e e0       	ldi	r18, 0x0E	; 14
    b2e0:	4e e0       	ldi	r20, 0x0E	; 14
    b2e2:	61 2f       	mov	r22, r17
    b2e4:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b2e8:	88 23       	and	r24, r24
    b2ea:	41 f0       	breq	.+16     	; 0xb2fc <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b2ec:	f4 01       	movw	r30, r8
    b2ee:	86 89       	ldd	r24, Z+22	; 0x16
    b2f0:	88 37       	cpi	r24, 0x78	; 120
    b2f2:	21 f4       	brne	.+8      	; 0xb2fc <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b2f4:	81 e0       	ldi	r24, 0x01	; 1
    b2f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    b2f8:	99 30       	cpi	r25, 0x09	; 9
    b2fa:	08 f4       	brcc	.+2      	; 0xb2fe <player_shot+0xaa>
    b2fc:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    b2fe:	df 91       	pop	r29
    b300:	cf 91       	pop	r28
    b302:	1f 91       	pop	r17
    b304:	0f 91       	pop	r16
    b306:	ef 90       	pop	r14
    b308:	cf 90       	pop	r12
    b30a:	af 90       	pop	r10
    b30c:	9f 90       	pop	r9
    b30e:	8f 90       	pop	r8
    b310:	08 95       	ret

0000b312 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    b312:	af 92       	push	r10
    b314:	cf 92       	push	r12
    b316:	ef 92       	push	r14
    b318:	0f 93       	push	r16
    b31a:	1f 93       	push	r17
    b31c:	cf 93       	push	r28
    b31e:	df 93       	push	r29
    b320:	ec 01       	movw	r28, r24
    b322:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    b324:	20 e0       	ldi	r18, 0x00	; 0
    b326:	30 e0       	ldi	r19, 0x00	; 0
    b328:	40 e0       	ldi	r20, 0x00	; 0
    b32a:	50 e4       	ldi	r21, 0x40	; 64
    b32c:	fb 01       	movw	r30, r22
    b32e:	67 81       	ldd	r22, Z+7	; 0x07
    b330:	70 85       	ldd	r23, Z+8	; 0x08
    b332:	81 85       	ldd	r24, Z+9	; 0x09
    b334:	92 85       	ldd	r25, Z+10	; 0x0a
    b336:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b33a:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b33e:	e6 2e       	mov	r14, r22
    b340:	20 e0       	ldi	r18, 0x00	; 0
    b342:	30 e0       	ldi	r19, 0x00	; 0
    b344:	40 e0       	ldi	r20, 0x00	; 0
    b346:	50 e4       	ldi	r21, 0x40	; 64
    b348:	f8 01       	movw	r30, r16
    b34a:	63 81       	ldd	r22, Z+3	; 0x03
    b34c:	74 81       	ldd	r23, Z+4	; 0x04
    b34e:	85 81       	ldd	r24, Z+5	; 0x05
    b350:	96 81       	ldd	r25, Z+6	; 0x06
    b352:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b356:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b35a:	06 2f       	mov	r16, r22
    b35c:	6f 81       	ldd	r22, Y+7	; 0x07
    b35e:	78 85       	ldd	r23, Y+8	; 0x08
    b360:	89 85       	ldd	r24, Y+9	; 0x09
    b362:	9a 85       	ldd	r25, Y+10	; 0x0a
    b364:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b368:	16 2f       	mov	r17, r22
    b36a:	6b 81       	ldd	r22, Y+3	; 0x03
    b36c:	7c 81       	ldd	r23, Y+4	; 0x04
    b36e:	8d 81       	ldd	r24, Y+5	; 0x05
    b370:	9e 81       	ldd	r25, Y+6	; 0x06
    b372:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b376:	86 2f       	mov	r24, r22
    b378:	94 e0       	ldi	r25, 0x04	; 4
    b37a:	a9 2e       	mov	r10, r25
    b37c:	24 e0       	ldi	r18, 0x04	; 4
    b37e:	c2 2e       	mov	r12, r18
    b380:	28 e0       	ldi	r18, 0x08	; 8
    b382:	48 e0       	ldi	r20, 0x08	; 8
    b384:	61 2f       	mov	r22, r17
    b386:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
    b38a:	88 23       	and	r24, r24
    b38c:	39 f0       	breq	.+14     	; 0xb39c <turret_shot+0x8a>
    b38e:	91 e0       	ldi	r25, 0x01	; 1
    b390:	8b 85       	ldd	r24, Y+11	; 0x0b
    b392:	81 11       	cpse	r24, r1
    b394:	01 c0       	rjmp	.+2      	; 0xb398 <turret_shot+0x86>
    b396:	90 e0       	ldi	r25, 0x00	; 0
    b398:	89 2f       	mov	r24, r25
    b39a:	01 c0       	rjmp	.+2      	; 0xb39e <turret_shot+0x8c>
    b39c:	80 e0       	ldi	r24, 0x00	; 0
}
    b39e:	df 91       	pop	r29
    b3a0:	cf 91       	pop	r28
    b3a2:	1f 91       	pop	r17
    b3a4:	0f 91       	pop	r16
    b3a6:	ef 90       	pop	r14
    b3a8:	cf 90       	pop	r12
    b3aa:	af 90       	pop	r10
    b3ac:	08 95       	ret

0000b3ae <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    b3ae:	cf 92       	push	r12
    b3b0:	df 92       	push	r13
    b3b2:	ef 92       	push	r14
    b3b4:	ff 92       	push	r15
    b3b6:	cf 93       	push	r28
    b3b8:	df 93       	push	r29
    b3ba:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b3bc:	cb 80       	ldd	r12, Y+3	; 0x03
    b3be:	dc 80       	ldd	r13, Y+4	; 0x04
    b3c0:	ed 80       	ldd	r14, Y+5	; 0x05
    b3c2:	fe 80       	ldd	r15, Y+6	; 0x06
    b3c4:	20 e0       	ldi	r18, 0x00	; 0
    b3c6:	30 e0       	ldi	r19, 0x00	; 0
    b3c8:	a9 01       	movw	r20, r18
    b3ca:	c7 01       	movw	r24, r14
    b3cc:	b6 01       	movw	r22, r12
    b3ce:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    b3d2:	87 fd       	sbrc	r24, 7
    b3d4:	31 c0       	rjmp	.+98     	; 0xb438 <collision_detect_boundries+0x8a>
    b3d6:	20 e0       	ldi	r18, 0x00	; 0
    b3d8:	30 e0       	ldi	r19, 0x00	; 0
    b3da:	40 e0       	ldi	r20, 0x00	; 0
    b3dc:	51 e4       	ldi	r21, 0x41	; 65
    b3de:	c7 01       	movw	r24, r14
    b3e0:	b6 01       	movw	r22, r12
    b3e2:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b3e6:	20 e0       	ldi	r18, 0x00	; 0
    b3e8:	30 e0       	ldi	r19, 0x00	; 0
    b3ea:	40 e7       	ldi	r20, 0x70	; 112
    b3ec:	53 e4       	ldi	r21, 0x43	; 67
    b3ee:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    b3f2:	18 16       	cp	r1, r24
    b3f4:	0c f1       	brlt	.+66     	; 0xb438 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b3f6:	cf 80       	ldd	r12, Y+7	; 0x07
    b3f8:	d8 84       	ldd	r13, Y+8	; 0x08
    b3fa:	e9 84       	ldd	r14, Y+9	; 0x09
    b3fc:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b3fe:	20 e0       	ldi	r18, 0x00	; 0
    b400:	30 e0       	ldi	r19, 0x00	; 0
    b402:	40 ec       	ldi	r20, 0xC0	; 192
    b404:	51 e4       	ldi	r21, 0x41	; 65
    b406:	c7 01       	movw	r24, r14
    b408:	b6 01       	movw	r22, r12
    b40a:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    b40e:	87 fd       	sbrc	r24, 7
    b410:	13 c0       	rjmp	.+38     	; 0xb438 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b412:	20 e0       	ldi	r18, 0x00	; 0
    b414:	30 e0       	ldi	r19, 0x00	; 0
    b416:	40 e0       	ldi	r20, 0x00	; 0
    b418:	51 e4       	ldi	r21, 0x41	; 65
    b41a:	c7 01       	movw	r24, r14
    b41c:	b6 01       	movw	r22, r12
    b41e:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b422:	c1 e0       	ldi	r28, 0x01	; 1
    b424:	20 e0       	ldi	r18, 0x00	; 0
    b426:	30 e0       	ldi	r19, 0x00	; 0
    b428:	40 e6       	ldi	r20, 0x60	; 96
    b42a:	53 e4       	ldi	r21, 0x43	; 67
    b42c:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    b430:	18 16       	cp	r1, r24
    b432:	1c f0       	brlt	.+6      	; 0xb43a <collision_detect_boundries+0x8c>
    b434:	c0 e0       	ldi	r28, 0x00	; 0
    b436:	01 c0       	rjmp	.+2      	; 0xb43a <collision_detect_boundries+0x8c>
	{
		return 1;
    b438:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    b43a:	8c 2f       	mov	r24, r28
    b43c:	df 91       	pop	r29
    b43e:	cf 91       	pop	r28
    b440:	ff 90       	pop	r15
    b442:	ef 90       	pop	r14
    b444:	df 90       	pop	r13
    b446:	cf 90       	pop	r12
    b448:	08 95       	ret

0000b44a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b44a:	1f 93       	push	r17
    b44c:	cf 93       	push	r28
    b44e:	df 93       	push	r29
    b450:	9c 01       	movw	r18, r24
    b452:	fb 01       	movw	r30, r22
    b454:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    b456:	6e e1       	ldi	r22, 0x1E	; 30
    b458:	70 e0       	ldi	r23, 0x00	; 0
    b45a:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b45e:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    b460:	63 e0       	ldi	r22, 0x03	; 3
    b462:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    b464:	e9 01       	movw	r28, r18
    b466:	c5 5e       	subi	r28, 0xE5	; 229
    b468:	d3 4f       	sbci	r29, 0xF3	; 243
    b46a:	49 81       	ldd	r20, Y+1	; 0x01
    b46c:	44 23       	and	r20, r20
    b46e:	71 f0       	breq	.+28     	; 0xb48c <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b470:	e9 01       	movw	r28, r18
    b472:	c4 5e       	subi	r28, 0xE4	; 228
    b474:	d3 4f       	sbci	r29, 0xF3	; 243
    b476:	49 81       	ldd	r20, Y+1	; 0x01
    b478:	44 23       	and	r20, r20
    b47a:	91 f0       	breq	.+36     	; 0xb4a0 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b47c:	e9 01       	movw	r28, r18
    b47e:	c7 5c       	subi	r28, 0xC7	; 199
    b480:	d3 4f       	sbci	r29, 0xF3	; 243
    b482:	49 81       	ldd	r20, Y+1	; 0x01
    b484:	41 11       	cpse	r20, r1
    b486:	04 c0       	rjmp	.+8      	; 0xb490 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b488:	64 e0       	ldi	r22, 0x04	; 4
    b48a:	69 0f       	add	r22, r25
    b48c:	af 01       	movw	r20, r30
    b48e:	0a c0       	rjmp	.+20     	; 0xb4a4 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b490:	e9 01       	movw	r28, r18
    b492:	c6 5c       	subi	r28, 0xC6	; 198
    b494:	d3 4f       	sbci	r29, 0xF3	; 243
    b496:	29 81       	ldd	r18, Y+1	; 0x01
    b498:	21 11       	cpse	r18, r1
    b49a:	07 c0       	rjmp	.+14     	; 0xb4aa <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b49c:	64 e0       	ldi	r22, 0x04	; 4
    b49e:	69 0f       	add	r22, r25
    b4a0:	af 01       	movw	r20, r30
    b4a2:	8f 5f       	subi	r24, 0xFF	; 255
    b4a4:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b4a8:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b4aa:	df 91       	pop	r29
    b4ac:	cf 91       	pop	r28
    b4ae:	1f 91       	pop	r17
    b4b0:	08 95       	ret

0000b4b2 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b4b2:	ff 92       	push	r15
    b4b4:	0f 93       	push	r16
    b4b6:	1f 93       	push	r17
    b4b8:	cf 93       	push	r28
    b4ba:	df 93       	push	r29
    b4bc:	ec 01       	movw	r28, r24
    b4be:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b4c0:	20 e0       	ldi	r18, 0x00	; 0
    b4c2:	30 e0       	ldi	r19, 0x00	; 0
    b4c4:	40 e0       	ldi	r20, 0x00	; 0
    b4c6:	5e e3       	ldi	r21, 0x3E	; 62
    b4c8:	6f 81       	ldd	r22, Y+7	; 0x07
    b4ca:	78 85       	ldd	r23, Y+8	; 0x08
    b4cc:	89 85       	ldd	r24, Y+9	; 0x09
    b4ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    b4d0:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    b4d4:	20 e0       	ldi	r18, 0x00	; 0
    b4d6:	30 e0       	ldi	r19, 0x00	; 0
    b4d8:	40 e4       	ldi	r20, 0x40	; 64
    b4da:	50 e4       	ldi	r21, 0x40	; 64
    b4dc:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    b4e0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b4e4:	8e e1       	ldi	r24, 0x1E	; 30
    b4e6:	68 9f       	mul	r22, r24
    b4e8:	80 01       	movw	r16, r0
    b4ea:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    b4ec:	20 e0       	ldi	r18, 0x00	; 0
    b4ee:	30 e0       	ldi	r19, 0x00	; 0
    b4f0:	40 e0       	ldi	r20, 0x00	; 0
    b4f2:	5e e3       	ldi	r21, 0x3E	; 62
    b4f4:	6b 81       	ldd	r22, Y+3	; 0x03
    b4f6:	7c 81       	ldd	r23, Y+4	; 0x04
    b4f8:	8d 81       	ldd	r24, Y+5	; 0x05
    b4fa:	9e 81       	ldd	r25, Y+6	; 0x06
    b4fc:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    b500:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b504:	06 0f       	add	r16, r22
    b506:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    b508:	89 8d       	ldd	r24, Y+25	; 0x19
    b50a:	88 23       	and	r24, r24
    b50c:	79 f0       	breq	.+30     	; 0xb52c <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    b50e:	40 e0       	ldi	r20, 0x00	; 0
    b510:	50 e0       	ldi	r21, 0x00	; 0
    b512:	61 e0       	ldi	r22, 0x01	; 1
    b514:	8a e0       	ldi	r24, 0x0A	; 10
    b516:	8f 0d       	add	r24, r15
    b518:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    b51c:	47 e0       	ldi	r20, 0x07	; 7
    b51e:	63 e2       	ldi	r22, 0x23	; 35
    b520:	78 e7       	ldi	r23, 0x78	; 120
    b522:	c8 01       	movw	r24, r16
    b524:	0e 94 25 5a 	call	0xb44a	; 0xb44a <drop_item>
		player->max_speed = MAX_SPEED;
    b528:	82 e3       	ldi	r24, 0x32	; 50
    b52a:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    b52c:	88 8d       	ldd	r24, Y+24	; 0x18
    b52e:	88 23       	and	r24, r24
    b530:	69 f0       	breq	.+26     	; 0xb54c <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    b532:	40 e0       	ldi	r20, 0x00	; 0
    b534:	50 e0       	ldi	r21, 0x00	; 0
    b536:	61 e0       	ldi	r22, 0x01	; 1
    b538:	8b e0       	ldi	r24, 0x0B	; 11
    b53a:	8f 0d       	add	r24, r15
    b53c:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    b540:	49 e0       	ldi	r20, 0x09	; 9
    b542:	6d e1       	ldi	r22, 0x1D	; 29
    b544:	78 e7       	ldi	r23, 0x78	; 120
    b546:	c8 01       	movw	r24, r16
    b548:	0e 94 25 5a 	call	0xb44a	; 0xb44a <drop_item>
	}
	player->has_over_speed = false;
    b54c:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    b54e:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    b550:	8d 89       	ldd	r24, Y+21	; 0x15
    b552:	81 60       	ori	r24, 0x01	; 1
    b554:	8d 8b       	std	Y+21, r24	; 0x15
}
    b556:	df 91       	pop	r29
    b558:	cf 91       	pop	r28
    b55a:	1f 91       	pop	r17
    b55c:	0f 91       	pop	r16
    b55e:	ff 90       	pop	r15
    b560:	08 95       	ret

0000b562 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    b562:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    b564:	70 e0       	ldi	r23, 0x00	; 0
    b566:	8e e1       	ldi	r24, 0x1E	; 30
    b568:	48 9f       	mul	r20, r24
    b56a:	60 0d       	add	r22, r0
    b56c:	71 1d       	adc	r23, r1
    b56e:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b570:	21 11       	cpse	r18, r1
    b572:	05 c0       	rjmp	.+10     	; 0xb57e <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    b574:	71 83       	std	Z+1, r23	; 0x01
    b576:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b578:	6f 5f       	subi	r22, 0xFF	; 255
    b57a:	7f 4f       	sbci	r23, 0xFF	; 255
    b57c:	0c c0       	rjmp	.+24     	; 0xb596 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    b57e:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    b580:	21 30       	cpi	r18, 0x01	; 1
    b582:	11 f4       	brne	.+4      	; 0xb588 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    b584:	01 96       	adiw	r24, 0x01	; 1
    b586:	03 c0       	rjmp	.+6      	; 0xb58e <get_interesting_tile_indexes_shot+0x2c>
    b588:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    b58a:	22 30       	cpi	r18, 0x02	; 2
    b58c:	39 f4       	brne	.+14     	; 0xb59c <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    b58e:	91 83       	std	Z+1, r25	; 0x01
    b590:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b592:	61 5e       	subi	r22, 0xE1	; 225
    b594:	7f 4f       	sbci	r23, 0xFF	; 255
    b596:	73 83       	std	Z+3, r23	; 0x03
    b598:	62 83       	std	Z+2, r22	; 0x02
    b59a:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b59c:	71 83       	std	Z+1, r23	; 0x01
    b59e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b5a0:	93 83       	std	Z+3, r25	; 0x03
    b5a2:	82 83       	std	Z+2, r24	; 0x02
    b5a4:	08 95       	ret

0000b5a6 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    b5a6:	ef 92       	push	r14
    b5a8:	ff 92       	push	r15
    b5aa:	0f 93       	push	r16
    b5ac:	1f 93       	push	r17
    b5ae:	cf 93       	push	r28
    b5b0:	df 93       	push	r29
    b5b2:	ec 01       	movw	r28, r24
    b5b4:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    b5b6:	8e e1       	ldi	r24, 0x1E	; 30
    b5b8:	e8 2e       	mov	r14, r24
    b5ba:	f1 2c       	mov	r15, r1
    b5bc:	cb 01       	movw	r24, r22
    b5be:	b7 01       	movw	r22, r14
    b5c0:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b5c4:	6d 5f       	subi	r22, 0xFD	; 253
    b5c6:	40 e0       	ldi	r20, 0x00	; 0
    b5c8:	50 e0       	ldi	r21, 0x00	; 0
    b5ca:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    b5ce:	88 81       	ld	r24, Y
    b5d0:	fe 01       	movw	r30, r28
    b5d2:	9e e0       	ldi	r25, 0x0E	; 14
    b5d4:	89 9f       	mul	r24, r25
    b5d6:	e0 0d       	add	r30, r0
    b5d8:	f1 1d       	adc	r31, r1
    b5da:	11 24       	eor	r1, r1
    b5dc:	85 85       	ldd	r24, Z+13	; 0x0d
    b5de:	96 85       	ldd	r25, Z+14	; 0x0e
    b5e0:	00 97       	sbiw	r24, 0x00	; 0
    b5e2:	41 f0       	breq	.+16     	; 0xb5f4 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    b5e4:	b7 01       	movw	r22, r14
    b5e6:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b5ea:	6d 5f       	subi	r22, 0xFD	; 253
    b5ec:	40 e0       	ldi	r20, 0x00	; 0
    b5ee:	50 e0       	ldi	r21, 0x00	; 0
    b5f0:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    b5f4:	88 81       	ld	r24, Y
    b5f6:	fe 01       	movw	r30, r28
    b5f8:	9e e0       	ldi	r25, 0x0E	; 14
    b5fa:	89 9f       	mul	r24, r25
    b5fc:	e0 0d       	add	r30, r0
    b5fe:	f1 1d       	adc	r31, r1
    b600:	11 24       	eor	r1, r1
    b602:	16 87       	std	Z+14, r17	; 0x0e
    b604:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    b606:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    b608:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    b60a:	82 30       	cpi	r24, 0x02	; 2
    b60c:	11 f0       	breq	.+4      	; 0xb612 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    b60e:	88 83       	st	Y, r24
    b610:	01 c0       	rjmp	.+2      	; 0xb614 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    b612:	18 82       	st	Y, r1
	}
}
    b614:	df 91       	pop	r29
    b616:	cf 91       	pop	r28
    b618:	1f 91       	pop	r17
    b61a:	0f 91       	pop	r16
    b61c:	ff 90       	pop	r15
    b61e:	ef 90       	pop	r14
    b620:	08 95       	ret

0000b622 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    b622:	fb 01       	movw	r30, r22
	switch (tile_type)
    b624:	84 30       	cpi	r24, 0x04	; 4
    b626:	71 f0       	breq	.+28     	; 0xb644 <richochet+0x22>
    b628:	18 f4       	brcc	.+6      	; 0xb630 <richochet+0xe>
    b62a:	83 30       	cpi	r24, 0x03	; 3
    b62c:	31 f0       	breq	.+12     	; 0xb63a <richochet+0x18>
    b62e:	08 95       	ret
    b630:	85 30       	cpi	r24, 0x05	; 5
    b632:	99 f0       	breq	.+38     	; 0xb65a <richochet+0x38>
    b634:	86 30       	cpi	r24, 0x06	; 6
    b636:	59 f0       	breq	.+22     	; 0xb64e <richochet+0x2c>
    b638:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b63a:	80 81       	ld	r24, Z
    b63c:	8d 7f       	andi	r24, 0xFD	; 253
    b63e:	29 f4       	brne	.+10     	; 0xb64a <richochet+0x28>
				sprite->direction = D_RIGHT;
    b640:	81 e0       	ldi	r24, 0x01	; 1
    b642:	09 c0       	rjmp	.+18     	; 0xb656 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b644:	80 81       	ld	r24, Z
    b646:	8d 7f       	andi	r24, 0xFD	; 253
    b648:	29 f0       	breq	.+10     	; 0xb654 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    b64a:	82 e0       	ldi	r24, 0x02	; 2
    b64c:	04 c0       	rjmp	.+8      	; 0xb656 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b64e:	80 81       	ld	r24, Z
    b650:	8d 7f       	andi	r24, 0xFD	; 253
    b652:	31 f4       	brne	.+12     	; 0xb660 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    b654:	83 e0       	ldi	r24, 0x03	; 3
    b656:	80 83       	st	Z, r24
    b658:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b65a:	80 81       	ld	r24, Z
    b65c:	8d 7f       	andi	r24, 0xFD	; 253
    b65e:	81 f3       	breq	.-32     	; 0xb640 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    b660:	10 82       	st	Z, r1
    b662:	08 95       	ret

0000b664 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    b664:	2f 92       	push	r2
    b666:	3f 92       	push	r3
    b668:	4f 92       	push	r4
    b66a:	5f 92       	push	r5
    b66c:	6f 92       	push	r6
    b66e:	7f 92       	push	r7
    b670:	8f 92       	push	r8
    b672:	9f 92       	push	r9
    b674:	af 92       	push	r10
    b676:	bf 92       	push	r11
    b678:	cf 92       	push	r12
    b67a:	df 92       	push	r13
    b67c:	ef 92       	push	r14
    b67e:	ff 92       	push	r15
    b680:	0f 93       	push	r16
    b682:	1f 93       	push	r17
    b684:	cf 93       	push	r28
    b686:	df 93       	push	r29
    b688:	00 d0       	rcall	.+0      	; 0xb68a <collision_detect_shot+0x26>
    b68a:	00 d0       	rcall	.+0      	; 0xb68c <collision_detect_shot+0x28>
    b68c:	1f 92       	push	r1
    b68e:	cd b7       	in	r28, 0x3d	; 61
    b690:	de b7       	in	r29, 0x3e	; 62
    b692:	3c 01       	movw	r6, r24
    b694:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    b696:	1a 82       	std	Y+2, r1	; 0x02
    b698:	19 82       	std	Y+1, r1	; 0x01
    b69a:	1c 82       	std	Y+4, r1	; 0x04
    b69c:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    b69e:	20 e0       	ldi	r18, 0x00	; 0
    b6a0:	30 e0       	ldi	r19, 0x00	; 0
    b6a2:	40 e0       	ldi	r20, 0x00	; 0
    b6a4:	5e e3       	ldi	r21, 0x3E	; 62
    b6a6:	db 01       	movw	r26, r22
    b6a8:	17 96       	adiw	r26, 0x07	; 7
    b6aa:	6d 91       	ld	r22, X+
    b6ac:	7d 91       	ld	r23, X+
    b6ae:	8d 91       	ld	r24, X+
    b6b0:	9c 91       	ld	r25, X
    b6b2:	1a 97       	sbiw	r26, 0x0a	; 10
    b6b4:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    b6b8:	20 e0       	ldi	r18, 0x00	; 0
    b6ba:	30 e0       	ldi	r19, 0x00	; 0
    b6bc:	40 e4       	ldi	r20, 0x40	; 64
    b6be:	50 e4       	ldi	r21, 0x40	; 64
    b6c0:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    b6c4:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b6c8:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    b6ca:	20 e0       	ldi	r18, 0x00	; 0
    b6cc:	30 e0       	ldi	r19, 0x00	; 0
    b6ce:	40 e0       	ldi	r20, 0x00	; 0
    b6d0:	5e e3       	ldi	r21, 0x3E	; 62
    b6d2:	f4 01       	movw	r30, r8
    b6d4:	63 81       	ldd	r22, Z+3	; 0x03
    b6d6:	74 81       	ldd	r23, Z+4	; 0x04
    b6d8:	85 81       	ldd	r24, Z+5	; 0x05
    b6da:	96 81       	ldd	r25, Z+6	; 0x06
    b6dc:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    b6e0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    b6e4:	d4 01       	movw	r26, r8
    b6e6:	2c 91       	ld	r18, X
    b6e8:	41 2f       	mov	r20, r17
    b6ea:	ce 01       	movw	r24, r28
    b6ec:	01 96       	adiw	r24, 0x01	; 1
    b6ee:	0e 94 b1 5a 	call	0xb562	; 0xb562 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    b6f2:	c4 01       	movw	r24, r8
    b6f4:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <collision_detect_boundries>
    b6f8:	81 11       	cpse	r24, r1
    b6fa:	6f c1       	rjmp	.+734    	; 0xb9da <collision_detect_shot+0x376>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    b6fc:	b4 01       	movw	r22, r8
    b6fe:	8b e9       	ldi	r24, 0x9B	; 155
    b700:	9b e0       	ldi	r25, 0x0B	; 11
    b702:	0e 94 2a 59 	call	0xb254	; 0xb254 <player_shot>
    b706:	88 23       	and	r24, r24
    b708:	b9 f0       	breq	.+46     	; 0xb738 <collision_detect_shot+0xd4>
    b70a:	80 91 b0 0b 	lds	r24, 0x0BB0
    b70e:	80 fd       	sbrc	r24, 0
    b710:	13 c0       	rjmp	.+38     	; 0xb738 <collision_detect_shot+0xd4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    b712:	80 91 1a 0f 	lds	r24, 0x0F1A
    b716:	8f 5f       	subi	r24, 0xFF	; 255
    b718:	80 93 1a 0f 	sts	0x0F1A, r24
		player2.score++;
    b71c:	80 91 19 0f 	lds	r24, 0x0F19
    b720:	8f 5f       	subi	r24, 0xFF	; 255
    b722:	80 93 19 0f 	sts	0x0F19, r24
		render_score(&player2, 15);
    b726:	6f e0       	ldi	r22, 0x0F	; 15
    b728:	8a e0       	ldi	r24, 0x0A	; 10
    b72a:	9f e0       	ldi	r25, 0x0F	; 15
    b72c:	0e 94 65 56 	call	0xacca	; 0xacca <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    b730:	0b e9       	ldi	r16, 0x9B	; 155
    b732:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    b734:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    b736:	4e c0       	rjmp	.+156    	; 0xb7d4 <collision_detect_shot+0x170>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    b738:	b4 01       	movw	r22, r8
    b73a:	8a e0       	ldi	r24, 0x0A	; 10
    b73c:	9f e0       	ldi	r25, 0x0F	; 15
    b73e:	0e 94 2a 59 	call	0xb254	; 0xb254 <player_shot>
    b742:	90 91 6c 0b 	lds	r25, 0x0B6C
    b746:	88 23       	and	r24, r24
    b748:	d1 f0       	breq	.+52     	; 0xb77e <collision_detect_shot+0x11a>
    b74a:	80 91 1f 0f 	lds	r24, 0x0F1F
    b74e:	80 fd       	sbrc	r24, 0
    b750:	16 c0       	rjmp	.+44     	; 0xb77e <collision_detect_shot+0x11a>
    b752:	91 11       	cpse	r25, r1
    b754:	14 c0       	rjmp	.+40     	; 0xb77e <collision_detect_shot+0x11a>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    b756:	80 91 ab 0b 	lds	r24, 0x0BAB
    b75a:	8f 5f       	subi	r24, 0xFF	; 255
    b75c:	80 93 ab 0b 	sts	0x0BAB, r24
		player1.score++;
    b760:	80 91 aa 0b 	lds	r24, 0x0BAA
    b764:	8f 5f       	subi	r24, 0xFF	; 255
    b766:	80 93 aa 0b 	sts	0x0BAA, r24
		render_score(&player1, 0);
    b76a:	60 e0       	ldi	r22, 0x00	; 0
    b76c:	8b e9       	ldi	r24, 0x9B	; 155
    b76e:	9b e0       	ldi	r25, 0x0B	; 11
    b770:	0e 94 65 56 	call	0xacca	; 0xacca <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    b774:	0a e0       	ldi	r16, 0x0A	; 10
    b776:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    b778:	6f e0       	ldi	r22, 0x0F	; 15
    b77a:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    b77c:	2b c0       	rjmp	.+86     	; 0xb7d4 <collision_detect_shot+0x170>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    b77e:	94 30       	cpi	r25, 0x04	; 4
    b780:	61 f5       	brne	.+88     	; 0xb7da <collision_detect_shot+0x176>
	{
		if (turret_shot(&turret1, shot))
    b782:	b4 01       	movw	r22, r8
    b784:	83 ee       	ldi	r24, 0xE3	; 227
    b786:	9f e0       	ldi	r25, 0x0F	; 15
    b788:	0e 94 89 59 	call	0xb312	; 0xb312 <turret_shot>
    b78c:	88 23       	and	r24, r24
    b78e:	41 f0       	breq	.+16     	; 0xb7a0 <collision_detect_shot+0x13c>
		{
			turret1.lives--;
    b790:	80 91 ee 0f 	lds	r24, 0x0FEE
    b794:	81 50       	subi	r24, 0x01	; 1
    b796:	80 93 ee 0f 	sts	0x0FEE, r24
			init_shot_state(shot, shot->shot_type);
    b79a:	f4 01       	movw	r30, r8
    b79c:	63 85       	ldd	r22, Z+11	; 0x0b
    b79e:	0f c0       	rjmp	.+30     	; 0xb7be <collision_detect_shot+0x15a>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    b7a0:	b4 01       	movw	r22, r8
    b7a2:	8f ea       	ldi	r24, 0xAF	; 175
    b7a4:	9f e0       	ldi	r25, 0x0F	; 15
    b7a6:	0e 94 89 59 	call	0xb312	; 0xb312 <turret_shot>
    b7aa:	88 23       	and	r24, r24
    b7ac:	b1 f0       	breq	.+44     	; 0xb7da <collision_detect_shot+0x176>
		{
			turret2.lives--;
    b7ae:	80 91 ba 0f 	lds	r24, 0x0FBA
    b7b2:	81 50       	subi	r24, 0x01	; 1
    b7b4:	80 93 ba 0f 	sts	0x0FBA, r24
			init_shot_state(shot, shot->shot_type);
    b7b8:	d4 01       	movw	r26, r8
    b7ba:	1b 96       	adiw	r26, 0x0b	; 11
    b7bc:	6c 91       	ld	r22, X
    b7be:	c4 01       	movw	r24, r8
    b7c0:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
			game.boss_fight_player->active_shots--;
    b7c4:	e0 91 78 0b 	lds	r30, 0x0B78
    b7c8:	f0 91 79 0b 	lds	r31, 0x0B79
    b7cc:	81 89       	ldd	r24, Z+17	; 0x11
    b7ce:	81 50       	subi	r24, 0x01	; 1
    b7d0:	81 8b       	std	Z+17, r24	; 0x11
    b7d2:	03 c0       	rjmp	.+6      	; 0xb7da <collision_detect_shot+0x176>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
    b7d4:	01 15       	cp	r16, r1
    b7d6:	11 05       	cpc	r17, r1
    b7d8:	59 f4       	brne	.+22     	; 0xb7f0 <collision_detect_shot+0x18c>
    b7da:	fe 01       	movw	r30, r28
    b7dc:	31 96       	adiw	r30, 0x01	; 1
    b7de:	2f 01       	movw	r4, r30
    b7e0:	1d 82       	std	Y+5, r1	; 0x05
    b7e2:	f1 2c       	mov	r15, r1
    b7e4:	d1 2c       	mov	r13, r1
    b7e6:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b7e8:	5e e1       	ldi	r21, 0x1E	; 30
    b7ea:	25 2e       	mov	r2, r21
    b7ec:	31 2c       	mov	r3, r1
    b7ee:	41 c0       	rjmp	.+130    	; 0xb872 <collision_detect_shot+0x20e>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    b7f0:	d4 01       	movw	r26, r8
    b7f2:	1b 96       	adiw	r26, 0x0b	; 11
    b7f4:	6c 91       	ld	r22, X
    b7f6:	c4 01       	movw	r24, r8
    b7f8:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
		player->active_shots--;
    b7fc:	f3 01       	movw	r30, r6
    b7fe:	81 89       	ldd	r24, Z+17	; 0x11
    b800:	81 50       	subi	r24, 0x01	; 1
    b802:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    b804:	6f 2d       	mov	r22, r15
    b806:	c8 01       	movw	r24, r16
    b808:	0e 94 59 5a 	call	0xb4b2	; 0xb4b2 <kill_player>
		SFX_TANK_EXPLODE;
		return;
    b80c:	f2 c0       	rjmp	.+484    	; 0xb9f2 <collision_detect_shot+0x38e>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    b80e:	c5 01       	movw	r24, r10
    b810:	0e 94 5c 58 	call	0xb0b8	; 0xb0b8 <solid_directional_tile>
    b814:	88 23       	and	r24, r24
    b816:	c1 f1       	breq	.+112    	; 0xb888 <collision_detect_shot+0x224>
    b818:	20 e0       	ldi	r18, 0x00	; 0
    b81a:	30 e0       	ldi	r19, 0x00	; 0
    b81c:	40 e0       	ldi	r20, 0x00	; 0
    b81e:	50 e4       	ldi	r21, 0x40	; 64
    b820:	f4 01       	movw	r30, r8
    b822:	67 81       	ldd	r22, Z+7	; 0x07
    b824:	70 85       	ldd	r23, Z+8	; 0x08
    b826:	81 85       	ldd	r24, Z+9	; 0x09
    b828:	92 85       	ldd	r25, Z+10	; 0x0a
    b82a:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b82e:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b832:	c6 2e       	mov	r12, r22
    b834:	20 e0       	ldi	r18, 0x00	; 0
    b836:	30 e0       	ldi	r19, 0x00	; 0
    b838:	40 e0       	ldi	r20, 0x00	; 0
    b83a:	50 e4       	ldi	r21, 0x40	; 64
    b83c:	d4 01       	movw	r26, r8
    b83e:	13 96       	adiw	r26, 0x03	; 3
    b840:	6d 91       	ld	r22, X+
    b842:	7d 91       	ld	r23, X+
    b844:	8d 91       	ld	r24, X+
    b846:	9c 91       	ld	r25, X
    b848:	16 97       	sbiw	r26, 0x06	; 6
    b84a:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b84e:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b852:	04 e0       	ldi	r16, 0x04	; 4
    b854:	24 e0       	ldi	r18, 0x04	; 4
    b856:	4c 2d       	mov	r20, r12
    b858:	c5 01       	movw	r24, r10
    b85a:	0e 94 86 58 	call	0xb10c	; 0xb10c <collides_directional_tile>
    b85e:	88 23       	and	r24, r24
    b860:	99 f0       	breq	.+38     	; 0xb888 <collision_detect_shot+0x224>
		{
			hit = hit | HIT_ANGLE;
    b862:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    b864:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    b866:	bd 81       	ldd	r27, Y+5	; 0x05
    b868:	b1 30       	cpi	r27, 0x01	; 1
    b86a:	09 f4       	brne	.+2      	; 0xb86e <collision_detect_shot+0x20a>
    b86c:	88 c0       	rjmp	.+272    	; 0xb97e <collision_detect_shot+0x31a>
    b86e:	f1 e0       	ldi	r31, 0x01	; 1
    b870:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    b872:	d2 01       	movw	r26, r4
    b874:	ad 90       	ld	r10, X+
    b876:	bd 90       	ld	r11, X+
    b878:	2d 01       	movw	r4, r26
    b87a:	f5 01       	movw	r30, r10
    b87c:	e5 5e       	subi	r30, 0xE5	; 229
    b87e:	f3 4f       	sbci	r31, 0xF3	; 243
    b880:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    b882:	ee 20       	and	r14, r14
    b884:	81 f3       	breq	.-32     	; 0xb866 <collision_detect_shot+0x202>
    b886:	c3 cf       	rjmp	.-122    	; 0xb80e <collision_detect_shot+0x1aa>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b888:	b1 e0       	ldi	r27, 0x01	; 1
    b88a:	eb 12       	cpse	r14, r27
    b88c:	3b c0       	rjmp	.+118    	; 0xb904 <collision_detect_shot+0x2a0>
    b88e:	c5 01       	movw	r24, r10
    b890:	b1 01       	movw	r22, r2
    b892:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b896:	6d 5f       	subi	r22, 0xFD	; 253
    b898:	7f 4f       	sbci	r23, 0xFF	; 255
    b89a:	e6 2e       	mov	r14, r22
    b89c:	ee 0c       	add	r14, r14
    b89e:	ee 0c       	add	r14, r14
    b8a0:	ee 0c       	add	r14, r14
    b8a2:	08 2f       	mov	r16, r24
    b8a4:	00 0f       	add	r16, r16
    b8a6:	00 0f       	add	r16, r16
    b8a8:	00 0f       	add	r16, r16
    b8aa:	20 e0       	ldi	r18, 0x00	; 0
    b8ac:	30 e0       	ldi	r19, 0x00	; 0
    b8ae:	40 e0       	ldi	r20, 0x00	; 0
    b8b0:	50 e4       	ldi	r21, 0x40	; 64
    b8b2:	f4 01       	movw	r30, r8
    b8b4:	67 81       	ldd	r22, Z+7	; 0x07
    b8b6:	70 85       	ldd	r23, Z+8	; 0x08
    b8b8:	81 85       	ldd	r24, Z+9	; 0x09
    b8ba:	92 85       	ldd	r25, Z+10	; 0x0a
    b8bc:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b8c0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b8c4:	b6 2e       	mov	r11, r22
    b8c6:	20 e0       	ldi	r18, 0x00	; 0
    b8c8:	30 e0       	ldi	r19, 0x00	; 0
    b8ca:	40 e0       	ldi	r20, 0x00	; 0
    b8cc:	50 e4       	ldi	r21, 0x40	; 64
    b8ce:	d4 01       	movw	r26, r8
    b8d0:	13 96       	adiw	r26, 0x03	; 3
    b8d2:	6d 91       	ld	r22, X+
    b8d4:	7d 91       	ld	r23, X+
    b8d6:	8d 91       	ld	r24, X+
    b8d8:	9c 91       	ld	r25, X
    b8da:	16 97       	sbiw	r26, 0x06	; 6
    b8dc:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b8e0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b8e4:	86 2f       	mov	r24, r22
    b8e6:	38 e0       	ldi	r19, 0x08	; 8
    b8e8:	a3 2e       	mov	r10, r19
    b8ea:	48 e0       	ldi	r20, 0x08	; 8
    b8ec:	c4 2e       	mov	r12, r20
    b8ee:	24 e0       	ldi	r18, 0x04	; 4
    b8f0:	44 e0       	ldi	r20, 0x04	; 4
    b8f2:	6b 2d       	mov	r22, r11
    b8f4:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
    b8f8:	88 23       	and	r24, r24
    b8fa:	09 f4       	brne	.+2      	; 0xb8fe <collision_detect_shot+0x29a>
    b8fc:	b4 cf       	rjmp	.-152    	; 0xb866 <collision_detect_shot+0x202>
		{
			hit = hit | HIT_BRICK;
    b8fe:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    b900:	dd 80       	ldd	r13, Y+5	; 0x05
    b902:	b1 cf       	rjmp	.-158    	; 0xb866 <collision_detect_shot+0x202>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b904:	b2 e0       	ldi	r27, 0x02	; 2
    b906:	eb 12       	cpse	r14, r27
    b908:	ae cf       	rjmp	.-164    	; 0xb866 <collision_detect_shot+0x202>
    b90a:	c5 01       	movw	r24, r10
    b90c:	b1 01       	movw	r22, r2
    b90e:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    b912:	6d 5f       	subi	r22, 0xFD	; 253
    b914:	7f 4f       	sbci	r23, 0xFF	; 255
    b916:	e6 2e       	mov	r14, r22
    b918:	ee 0c       	add	r14, r14
    b91a:	ee 0c       	add	r14, r14
    b91c:	ee 0c       	add	r14, r14
    b91e:	08 2f       	mov	r16, r24
    b920:	00 0f       	add	r16, r16
    b922:	00 0f       	add	r16, r16
    b924:	00 0f       	add	r16, r16
    b926:	20 e0       	ldi	r18, 0x00	; 0
    b928:	30 e0       	ldi	r19, 0x00	; 0
    b92a:	40 e0       	ldi	r20, 0x00	; 0
    b92c:	50 e4       	ldi	r21, 0x40	; 64
    b92e:	f4 01       	movw	r30, r8
    b930:	67 81       	ldd	r22, Z+7	; 0x07
    b932:	70 85       	ldd	r23, Z+8	; 0x08
    b934:	81 85       	ldd	r24, Z+9	; 0x09
    b936:	92 85       	ldd	r25, Z+10	; 0x0a
    b938:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b93c:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b940:	b6 2e       	mov	r11, r22
    b942:	20 e0       	ldi	r18, 0x00	; 0
    b944:	30 e0       	ldi	r19, 0x00	; 0
    b946:	40 e0       	ldi	r20, 0x00	; 0
    b948:	50 e4       	ldi	r21, 0x40	; 64
    b94a:	d4 01       	movw	r26, r8
    b94c:	13 96       	adiw	r26, 0x03	; 3
    b94e:	6d 91       	ld	r22, X+
    b950:	7d 91       	ld	r23, X+
    b952:	8d 91       	ld	r24, X+
    b954:	9c 91       	ld	r25, X
    b956:	16 97       	sbiw	r26, 0x06	; 6
    b958:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    b95c:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    b960:	86 2f       	mov	r24, r22
    b962:	98 e0       	ldi	r25, 0x08	; 8
    b964:	a9 2e       	mov	r10, r25
    b966:	28 e0       	ldi	r18, 0x08	; 8
    b968:	c2 2e       	mov	r12, r18
    b96a:	24 e0       	ldi	r18, 0x04	; 4
    b96c:	44 e0       	ldi	r20, 0x04	; 4
    b96e:	6b 2d       	mov	r22, r11
    b970:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
    b974:	88 23       	and	r24, r24
    b976:	09 f4       	brne	.+2      	; 0xb97a <collision_detect_shot+0x316>
    b978:	76 cf       	rjmp	.-276    	; 0xb866 <collision_detect_shot+0x202>
        {
		    hit = hit | HIT_METAL;
    b97a:	11 60       	ori	r17, 0x01	; 1
    b97c:	74 cf       	rjmp	.-280    	; 0xb866 <collision_detect_shot+0x202>
        }
	}
	
	if (hit & HIT_ANGLE)
    b97e:	12 ff       	sbrs	r17, 2
    b980:	0d c0       	rjmp	.+26     	; 0xb99c <collision_detect_shot+0x338>
	{
		recoil_sprite_fine(player, &shot->shared);
    b982:	b4 01       	movw	r22, r8
    b984:	c3 01       	movw	r24, r6
    b986:	0e 94 14 58 	call	0xb028	; 0xb028 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    b98a:	b4 01       	movw	r22, r8
    b98c:	8f 2d       	mov	r24, r15
    b98e:	0e 94 11 5b 	call	0xb622	; 0xb622 <richochet>
		shot->rebounds--;
    b992:	f4 01       	movw	r30, r8
    b994:	85 85       	ldd	r24, Z+13	; 0x0d
    b996:	81 50       	subi	r24, 0x01	; 1
    b998:	85 87       	std	Z+13, r24	; 0x0d
    b99a:	1a c0       	rjmp	.+52     	; 0xb9d0 <collision_detect_shot+0x36c>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    b99c:	11 ff       	sbrs	r17, 1
    b99e:	1b c0       	rjmp	.+54     	; 0xb9d6 <collision_detect_shot+0x372>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    b9a0:	fe 01       	movw	r30, r28
    b9a2:	31 96       	adiw	r30, 0x01	; 1
    b9a4:	7f 01       	movw	r14, r30
    b9a6:	ed 0c       	add	r14, r13
    b9a8:	f1 1c       	adc	r15, r1
    b9aa:	ed 0c       	add	r14, r13
    b9ac:	f1 1c       	adc	r15, r1
    b9ae:	d7 01       	movw	r26, r14
    b9b0:	6d 91       	ld	r22, X+
    b9b2:	7c 91       	ld	r23, X
    b9b4:	8d e7       	ldi	r24, 0x7D	; 125
    b9b6:	9b e0       	ldi	r25, 0x0B	; 11
    b9b8:	0e 94 d3 5a 	call	0xb5a6	; 0xb5a6 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    b9bc:	d7 01       	movw	r26, r14
    b9be:	ed 91       	ld	r30, X+
    b9c0:	fc 91       	ld	r31, X
    b9c2:	e5 5e       	subi	r30, 0xE5	; 229
    b9c4:	f3 4f       	sbci	r31, 0xF3	; 243
    b9c6:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    b9c8:	f4 01       	movw	r30, r8
    b9ca:	84 85       	ldd	r24, Z+12	; 0x0c
    b9cc:	81 50       	subi	r24, 0x01	; 1
    b9ce:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    b9d0:	81 11       	cpse	r24, r1
    b9d2:	0f c0       	rjmp	.+30     	; 0xb9f2 <collision_detect_shot+0x38e>
    b9d4:	03 c0       	rjmp	.+6      	; 0xb9dc <collision_detect_shot+0x378>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_BRICK_EXPLODE;
	}
	else if (hit & HIT_METAL)
    b9d6:	10 ff       	sbrs	r17, 0
    b9d8:	0c c0       	rjmp	.+24     	; 0xb9f2 <collision_detect_shot+0x38e>
	{
        init_shot_state(shot, shot->shot_type);
    b9da:	f4 01       	movw	r30, r8
    b9dc:	63 85       	ldd	r22, Z+11	; 0x0b
    b9de:	c4 01       	movw	r24, r8
    b9e0:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
        player->active_shots--;
    b9e4:	d3 01       	movw	r26, r6
    b9e6:	51 96       	adiw	r26, 0x11	; 17
    b9e8:	8c 91       	ld	r24, X
    b9ea:	51 97       	sbiw	r26, 0x11	; 17
    b9ec:	81 50       	subi	r24, 0x01	; 1
    b9ee:	51 96       	adiw	r26, 0x11	; 17
    b9f0:	8c 93       	st	X, r24
        SFX_METAL;
	}
}
    b9f2:	0f 90       	pop	r0
    b9f4:	0f 90       	pop	r0
    b9f6:	0f 90       	pop	r0
    b9f8:	0f 90       	pop	r0
    b9fa:	0f 90       	pop	r0
    b9fc:	df 91       	pop	r29
    b9fe:	cf 91       	pop	r28
    ba00:	1f 91       	pop	r17
    ba02:	0f 91       	pop	r16
    ba04:	ff 90       	pop	r15
    ba06:	ef 90       	pop	r14
    ba08:	df 90       	pop	r13
    ba0a:	cf 90       	pop	r12
    ba0c:	bf 90       	pop	r11
    ba0e:	af 90       	pop	r10
    ba10:	9f 90       	pop	r9
    ba12:	8f 90       	pop	r8
    ba14:	7f 90       	pop	r7
    ba16:	6f 90       	pop	r6
    ba18:	5f 90       	pop	r5
    ba1a:	4f 90       	pop	r4
    ba1c:	3f 90       	pop	r3
    ba1e:	2f 90       	pop	r2
    ba20:	08 95       	ret

0000ba22 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ba22:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ba24:	70 e0       	ldi	r23, 0x00	; 0
    ba26:	8e e1       	ldi	r24, 0x1E	; 30
    ba28:	48 9f       	mul	r20, r24
    ba2a:	60 0d       	add	r22, r0
    ba2c:	71 1d       	adc	r23, r1
    ba2e:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ba30:	21 11       	cpse	r18, r1
    ba32:	09 c0       	rjmp	.+18     	; 0xba46 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ba34:	71 83       	std	Z+1, r23	; 0x01
    ba36:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ba38:	cb 01       	movw	r24, r22
    ba3a:	01 96       	adiw	r24, 0x01	; 1
    ba3c:	93 83       	std	Z+3, r25	; 0x03
    ba3e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ba40:	6e 5f       	subi	r22, 0xFE	; 254
    ba42:	7f 4f       	sbci	r23, 0xFF	; 255
    ba44:	12 c0       	rjmp	.+36     	; 0xba6a <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    ba46:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    ba48:	21 30       	cpi	r18, 0x01	; 1
    ba4a:	29 f4       	brne	.+10     	; 0xba56 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    ba4c:	02 96       	adiw	r24, 0x02	; 2
    ba4e:	91 83       	std	Z+1, r25	; 0x01
    ba50:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    ba52:	4e 96       	adiw	r24, 0x1e	; 30
    ba54:	06 c0       	rjmp	.+12     	; 0xba62 <get_interesting_tile_indexes+0x40>
    ba56:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    ba58:	22 30       	cpi	r18, 0x02	; 2
    ba5a:	51 f4       	brne	.+20     	; 0xba70 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    ba5c:	91 83       	std	Z+1, r25	; 0x01
    ba5e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    ba60:	01 96       	adiw	r24, 0x01	; 1
    ba62:	93 83       	std	Z+3, r25	; 0x03
    ba64:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    ba66:	62 5c       	subi	r22, 0xC2	; 194
    ba68:	7f 4f       	sbci	r23, 0xFF	; 255
    ba6a:	75 83       	std	Z+5, r23	; 0x05
    ba6c:	64 83       	std	Z+4, r22	; 0x04
    ba6e:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    ba70:	71 83       	std	Z+1, r23	; 0x01
    ba72:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ba74:	62 5e       	subi	r22, 0xE2	; 226
    ba76:	7f 4f       	sbci	r23, 0xFF	; 255
    ba78:	73 83       	std	Z+3, r23	; 0x03
    ba7a:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    ba7c:	95 83       	std	Z+5, r25	; 0x05
    ba7e:	84 83       	std	Z+4, r24	; 0x04
    ba80:	08 95       	ret

0000ba82 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    ba82:	1f 93       	push	r17
    ba84:	cf 93       	push	r28
    ba86:	df 93       	push	r29
    ba88:	fc 01       	movw	r30, r24
    ba8a:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    ba8c:	55 96       	adiw	r26, 0x15	; 21
    ba8e:	8c 91       	ld	r24, X
    ba90:	55 97       	sbiw	r26, 0x15	; 21
    ba92:	80 fd       	sbrc	r24, 0
    ba94:	13 c0       	rjmp	.+38     	; 0xbabc <explode_player+0x3a>
    ba96:	12 2f       	mov	r17, r18
    ba98:	64 2f       	mov	r22, r20
    ba9a:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    ba9c:	80 89       	ldd	r24, Z+16	; 0x10
    ba9e:	8f 5f       	subi	r24, 0xFF	; 255
    baa0:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    baa2:	87 85       	ldd	r24, Z+15	; 0x0f
    baa4:	8f 5f       	subi	r24, 0xFF	; 255
    baa6:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    baa8:	cf 01       	movw	r24, r30
    baaa:	0e 94 65 56 	call	0xacca	; 0xacca <render_score>
		kill_player(other_player, other_player_hud_x);
    baae:	61 2f       	mov	r22, r17
    bab0:	ce 01       	movw	r24, r28
	}
}
    bab2:	df 91       	pop	r29
    bab4:	cf 91       	pop	r28
    bab6:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    bab8:	0c 94 59 5a 	jmp	0xb4b2	; 0xb4b2 <kill_player>
	}
}
    babc:	df 91       	pop	r29
    babe:	cf 91       	pop	r28
    bac0:	1f 91       	pop	r17
    bac2:	08 95       	ret

0000bac4 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    bac4:	cf 92       	push	r12
    bac6:	df 92       	push	r13
    bac8:	ef 92       	push	r14
    baca:	ff 92       	push	r15
    bacc:	cf 93       	push	r28
    bace:	df 93       	push	r29
    bad0:	ec 01       	movw	r28, r24
    bad2:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    bad4:	98 81       	ld	r25, Y
    bad6:	9d 7f       	andi	r25, 0xFD	; 253
    bad8:	09 f0       	breq	.+2      	; 0xbadc <slide+0x18>
    bada:	54 c0       	rjmp	.+168    	; 0xbb84 <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    badc:	ca 01       	movw	r24, r20
    bade:	6e e1       	ldi	r22, 0x1E	; 30
    bae0:	70 e0       	ldi	r23, 0x00	; 0
    bae2:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    bae6:	88 0f       	add	r24, r24
    bae8:	88 0f       	add	r24, r24
    baea:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    baec:	21 11       	cpse	r18, r1
    baee:	22 c0       	rjmp	.+68     	; 0xbb34 <slide+0x70>
    baf0:	cb 80       	ldd	r12, Y+3	; 0x03
    baf2:	dc 80       	ldd	r13, Y+4	; 0x04
    baf4:	ed 80       	ldd	r14, Y+5	; 0x05
    baf6:	fe 80       	ldd	r15, Y+6	; 0x06
    baf8:	68 2f       	mov	r22, r24
    bafa:	70 e0       	ldi	r23, 0x00	; 0
    bafc:	80 e0       	ldi	r24, 0x00	; 0
    bafe:	90 e0       	ldi	r25, 0x00	; 0
    bb00:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    bb04:	9b 01       	movw	r18, r22
    bb06:	ac 01       	movw	r20, r24
    bb08:	c7 01       	movw	r24, r14
    bb0a:	b6 01       	movw	r22, r12
    bb0c:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bb10:	20 e0       	ldi	r18, 0x00	; 0
    bb12:	30 e0       	ldi	r19, 0x00	; 0
    bb14:	40 e8       	ldi	r20, 0x80	; 128
    bb16:	50 e4       	ldi	r21, 0x40	; 64
    bb18:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    bb1c:	18 16       	cp	r1, r24
    bb1e:	0c f0       	brlt	.+2      	; 0xbb22 <slide+0x5e>
    bb20:	85 c0       	rjmp	.+266    	; 0xbc2c <slide+0x168>
			player->shared.x++; 
    bb22:	20 e0       	ldi	r18, 0x00	; 0
    bb24:	30 e0       	ldi	r19, 0x00	; 0
    bb26:	40 e8       	ldi	r20, 0x80	; 128
    bb28:	5f e3       	ldi	r21, 0x3F	; 63
    bb2a:	c7 01       	movw	r24, r14
    bb2c:	b6 01       	movw	r22, r12
    bb2e:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    bb32:	23 c0       	rjmp	.+70     	; 0xbb7a <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    bb34:	22 30       	cpi	r18, 0x02	; 2
    bb36:	09 f0       	breq	.+2      	; 0xbb3a <slide+0x76>
    bb38:	79 c0       	rjmp	.+242    	; 0xbc2c <slide+0x168>
    bb3a:	cb 80       	ldd	r12, Y+3	; 0x03
    bb3c:	dc 80       	ldd	r13, Y+4	; 0x04
    bb3e:	ed 80       	ldd	r14, Y+5	; 0x05
    bb40:	fe 80       	ldd	r15, Y+6	; 0x06
    bb42:	68 2f       	mov	r22, r24
    bb44:	70 e0       	ldi	r23, 0x00	; 0
    bb46:	80 e0       	ldi	r24, 0x00	; 0
    bb48:	90 e0       	ldi	r25, 0x00	; 0
    bb4a:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    bb4e:	9b 01       	movw	r18, r22
    bb50:	ac 01       	movw	r20, r24
    bb52:	c7 01       	movw	r24, r14
    bb54:	b6 01       	movw	r22, r12
    bb56:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bb5a:	20 e0       	ldi	r18, 0x00	; 0
    bb5c:	30 e0       	ldi	r19, 0x00	; 0
    bb5e:	40 e4       	ldi	r20, 0x40	; 64
    bb60:	51 ec       	ldi	r21, 0xC1	; 193
    bb62:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    bb66:	87 ff       	sbrs	r24, 7
    bb68:	61 c0       	rjmp	.+194    	; 0xbc2c <slide+0x168>
			player->shared.x--;
    bb6a:	20 e0       	ldi	r18, 0x00	; 0
    bb6c:	30 e0       	ldi	r19, 0x00	; 0
    bb6e:	40 e8       	ldi	r20, 0x80	; 128
    bb70:	5f e3       	ldi	r21, 0x3F	; 63
    bb72:	c7 01       	movw	r24, r14
    bb74:	b6 01       	movw	r22, r12
    bb76:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bb7a:	6b 83       	std	Y+3, r22	; 0x03
    bb7c:	7c 83       	std	Y+4, r23	; 0x04
    bb7e:	8d 83       	std	Y+5, r24	; 0x05
    bb80:	9e 83       	std	Y+6, r25	; 0x06
    bb82:	54 c0       	rjmp	.+168    	; 0xbc2c <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    bb84:	ca 01       	movw	r24, r20
    bb86:	6e e1       	ldi	r22, 0x1E	; 30
    bb88:	70 e0       	ldi	r23, 0x00	; 0
    bb8a:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    bb8e:	ab 01       	movw	r20, r22
    bb90:	4d 5f       	subi	r20, 0xFD	; 253
    bb92:	5f 4f       	sbci	r21, 0xFF	; 255
    bb94:	44 0f       	add	r20, r20
    bb96:	44 0f       	add	r20, r20
    bb98:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    bb9a:	21 11       	cpse	r18, r1
    bb9c:	21 c0       	rjmp	.+66     	; 0xbbe0 <slide+0x11c>
    bb9e:	cf 80       	ldd	r12, Y+7	; 0x07
    bba0:	d8 84       	ldd	r13, Y+8	; 0x08
    bba2:	e9 84       	ldd	r14, Y+9	; 0x09
    bba4:	fa 84       	ldd	r15, Y+10	; 0x0a
    bba6:	64 2f       	mov	r22, r20
    bba8:	70 e0       	ldi	r23, 0x00	; 0
    bbaa:	80 e0       	ldi	r24, 0x00	; 0
    bbac:	90 e0       	ldi	r25, 0x00	; 0
    bbae:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    bbb2:	9b 01       	movw	r18, r22
    bbb4:	ac 01       	movw	r20, r24
    bbb6:	c7 01       	movw	r24, r14
    bbb8:	b6 01       	movw	r22, r12
    bbba:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bbbe:	20 e0       	ldi	r18, 0x00	; 0
    bbc0:	30 e0       	ldi	r19, 0x00	; 0
    bbc2:	40 e8       	ldi	r20, 0x80	; 128
    bbc4:	50 e4       	ldi	r21, 0x40	; 64
    bbc6:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    bbca:	18 16       	cp	r1, r24
    bbcc:	7c f5       	brge	.+94     	; 0xbc2c <slide+0x168>
			player->shared.y++;
    bbce:	20 e0       	ldi	r18, 0x00	; 0
    bbd0:	30 e0       	ldi	r19, 0x00	; 0
    bbd2:	40 e8       	ldi	r20, 0x80	; 128
    bbd4:	5f e3       	ldi	r21, 0x3F	; 63
    bbd6:	c7 01       	movw	r24, r14
    bbd8:	b6 01       	movw	r22, r12
    bbda:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    bbde:	22 c0       	rjmp	.+68     	; 0xbc24 <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    bbe0:	22 30       	cpi	r18, 0x02	; 2
    bbe2:	21 f5       	brne	.+72     	; 0xbc2c <slide+0x168>
    bbe4:	cf 80       	ldd	r12, Y+7	; 0x07
    bbe6:	d8 84       	ldd	r13, Y+8	; 0x08
    bbe8:	e9 84       	ldd	r14, Y+9	; 0x09
    bbea:	fa 84       	ldd	r15, Y+10	; 0x0a
    bbec:	64 2f       	mov	r22, r20
    bbee:	70 e0       	ldi	r23, 0x00	; 0
    bbf0:	80 e0       	ldi	r24, 0x00	; 0
    bbf2:	90 e0       	ldi	r25, 0x00	; 0
    bbf4:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    bbf8:	9b 01       	movw	r18, r22
    bbfa:	ac 01       	movw	r20, r24
    bbfc:	c7 01       	movw	r24, r14
    bbfe:	b6 01       	movw	r22, r12
    bc00:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bc04:	20 e0       	ldi	r18, 0x00	; 0
    bc06:	30 e0       	ldi	r19, 0x00	; 0
    bc08:	40 e4       	ldi	r20, 0x40	; 64
    bc0a:	51 ec       	ldi	r21, 0xC1	; 193
    bc0c:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    bc10:	87 ff       	sbrs	r24, 7
    bc12:	0c c0       	rjmp	.+24     	; 0xbc2c <slide+0x168>
			player->shared.y--;
    bc14:	20 e0       	ldi	r18, 0x00	; 0
    bc16:	30 e0       	ldi	r19, 0x00	; 0
    bc18:	40 e8       	ldi	r20, 0x80	; 128
    bc1a:	5f e3       	ldi	r21, 0x3F	; 63
    bc1c:	c7 01       	movw	r24, r14
    bc1e:	b6 01       	movw	r22, r12
    bc20:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bc24:	6f 83       	std	Y+7, r22	; 0x07
    bc26:	78 87       	std	Y+8, r23	; 0x08
    bc28:	89 87       	std	Y+9, r24	; 0x09
    bc2a:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    bc2c:	df 91       	pop	r29
    bc2e:	cf 91       	pop	r28
    bc30:	ff 90       	pop	r15
    bc32:	ef 90       	pop	r14
    bc34:	df 90       	pop	r13
    bc36:	cf 90       	pop	r12
    bc38:	08 95       	ret

0000bc3a <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    bc3a:	2f 92       	push	r2
    bc3c:	3f 92       	push	r3
    bc3e:	4f 92       	push	r4
    bc40:	5f 92       	push	r5
    bc42:	6f 92       	push	r6
    bc44:	7f 92       	push	r7
    bc46:	8f 92       	push	r8
    bc48:	9f 92       	push	r9
    bc4a:	af 92       	push	r10
    bc4c:	bf 92       	push	r11
    bc4e:	cf 92       	push	r12
    bc50:	df 92       	push	r13
    bc52:	ef 92       	push	r14
    bc54:	ff 92       	push	r15
    bc56:	0f 93       	push	r16
    bc58:	1f 93       	push	r17
    bc5a:	cf 93       	push	r28
    bc5c:	df 93       	push	r29
    bc5e:	cd b7       	in	r28, 0x3d	; 61
    bc60:	de b7       	in	r29, 0x3e	; 62
    bc62:	2b 97       	sbiw	r28, 0x0b	; 11
    bc64:	0f b6       	in	r0, 0x3f	; 63
    bc66:	f8 94       	cli
    bc68:	de bf       	out	0x3e, r29	; 62
    bc6a:	0f be       	out	0x3f, r0	; 63
    bc6c:	cd bf       	out	0x3d, r28	; 61
    bc6e:	4c 01       	movw	r8, r24
    bc70:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    bc72:	1a 82       	std	Y+2, r1	; 0x02
    bc74:	19 82       	std	Y+1, r1	; 0x01
    bc76:	1c 82       	std	Y+4, r1	; 0x04
    bc78:	1b 82       	std	Y+3, r1	; 0x03
    bc7a:	1e 82       	std	Y+6, r1	; 0x06
    bc7c:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    bc7e:	20 e0       	ldi	r18, 0x00	; 0
    bc80:	30 e0       	ldi	r19, 0x00	; 0
    bc82:	40 e0       	ldi	r20, 0x00	; 0
    bc84:	5e e3       	ldi	r21, 0x3E	; 62
    bc86:	dc 01       	movw	r26, r24
    bc88:	17 96       	adiw	r26, 0x07	; 7
    bc8a:	6d 91       	ld	r22, X+
    bc8c:	7d 91       	ld	r23, X+
    bc8e:	8d 91       	ld	r24, X+
    bc90:	9c 91       	ld	r25, X
    bc92:	1a 97       	sbiw	r26, 0x0a	; 10
    bc94:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    bc98:	20 e0       	ldi	r18, 0x00	; 0
    bc9a:	30 e0       	ldi	r19, 0x00	; 0
    bc9c:	40 e4       	ldi	r20, 0x40	; 64
    bc9e:	50 e4       	ldi	r21, 0x40	; 64
    bca0:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    bca4:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    bca8:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    bcaa:	20 e0       	ldi	r18, 0x00	; 0
    bcac:	30 e0       	ldi	r19, 0x00	; 0
    bcae:	40 e0       	ldi	r20, 0x00	; 0
    bcb0:	5e e3       	ldi	r21, 0x3E	; 62
    bcb2:	f4 01       	movw	r30, r8
    bcb4:	63 81       	ldd	r22, Z+3	; 0x03
    bcb6:	74 81       	ldd	r23, Z+4	; 0x04
    bcb8:	85 81       	ldd	r24, Z+5	; 0x05
    bcba:	96 81       	ldd	r25, Z+6	; 0x06
    bcbc:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    bcc0:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    bcc4:	d4 01       	movw	r26, r8
    bcc6:	2c 91       	ld	r18, X
    bcc8:	40 2f       	mov	r20, r16
    bcca:	ce 01       	movw	r24, r28
    bccc:	01 96       	adiw	r24, 0x01	; 1
    bcce:	0e 94 11 5d 	call	0xba22	; 0xba22 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    bcd2:	c4 01       	movw	r24, r8
    bcd4:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <collision_detect_boundries>
    bcd8:	88 23       	and	r24, r24
    bcda:	39 f0       	breq	.+14     	; 0xbcea <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    bcdc:	c4 01       	movw	r24, r8
    bcde:	0e 94 ba 57 	call	0xaf74	; 0xaf74 <recoil_sprite>
		player->shared.speed = 0;
    bce2:	f4 01       	movw	r30, r8
    bce4:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    bce6:	41 2c       	mov	r4, r1
    bce8:	10 c1       	rjmp	.+544    	; 0xbf0a <collision_detect_player+0x2d0>
    bcea:	ce 01       	movw	r24, r28
    bcec:	01 96       	adiw	r24, 0x01	; 1
    bcee:	98 87       	std	Y+8, r25	; 0x08
    bcf0:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    bcf2:	51 2c       	mov	r5, r1
    bcf4:	b1 2c       	mov	r11, r1
    bcf6:	d1 2c       	mov	r13, r1
    bcf8:	41 2c       	mov	r4, r1
    bcfa:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    bcfc:	9b e0       	ldi	r25, 0x0B	; 11
    bcfe:	91 0f       	add	r25, r17
    bd00:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    bd02:	16 5f       	subi	r17, 0xF6	; 246
    bd04:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    bd06:	af 81       	ldd	r26, Y+7	; 0x07
    bd08:	b8 85       	ldd	r27, Y+8	; 0x08
    bd0a:	6d 90       	ld	r6, X+
    bd0c:	7d 90       	ld	r7, X+
    bd0e:	b8 87       	std	Y+8, r27	; 0x08
    bd10:	af 83       	std	Y+7, r26	; 0x07
    bd12:	c3 01       	movw	r24, r6
    bd14:	6e e1       	ldi	r22, 0x1E	; 30
    bd16:	70 e0       	ldi	r23, 0x00	; 0
    bd18:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    bd1c:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    bd1e:	13 e0       	ldi	r17, 0x03	; 3
    bd20:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    bd22:	c3 01       	movw	r24, r6
    bd24:	0e 94 5c 58 	call	0xb0b8	; 0xb0b8 <solid_directional_tile>
    bd28:	88 23       	and	r24, r24
    bd2a:	51 f1       	breq	.+84     	; 0xbd80 <collision_detect_player+0x146>
    bd2c:	f4 01       	movw	r30, r8
    bd2e:	67 81       	ldd	r22, Z+7	; 0x07
    bd30:	70 85       	ldd	r23, Z+8	; 0x08
    bd32:	81 85       	ldd	r24, Z+9	; 0x09
    bd34:	92 85       	ldd	r25, Z+10	; 0x0a
    bd36:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    bd3a:	46 2f       	mov	r20, r22
    bd3c:	d4 01       	movw	r26, r8
    bd3e:	13 96       	adiw	r26, 0x03	; 3
    bd40:	6d 91       	ld	r22, X+
    bd42:	7d 91       	ld	r23, X+
    bd44:	8d 91       	ld	r24, X+
    bd46:	9c 91       	ld	r25, X
    bd48:	16 97       	sbiw	r26, 0x06	; 6
    bd4a:	4b 87       	std	Y+11, r20	; 0x0b
    bd4c:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    bd50:	00 e1       	ldi	r16, 0x10	; 16
    bd52:	20 e1       	ldi	r18, 0x10	; 16
    bd54:	4b 85       	ldd	r20, Y+11	; 0x0b
    bd56:	c3 01       	movw	r24, r6
    bd58:	0e 94 86 58 	call	0xb10c	; 0xb10c <collides_directional_tile>
    bd5c:	88 23       	and	r24, r24
    bd5e:	81 f0       	breq	.+32     	; 0xbd80 <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    bd60:	f4 01       	movw	r30, r8
    bd62:	83 85       	ldd	r24, Z+11	; 0x0b
    bd64:	89 30       	cpi	r24, 0x09	; 9
    bd66:	21 f4       	brne	.+8      	; 0xbd70 <collision_detect_player+0x136>
    bd68:	c4 01       	movw	r24, r8
    bd6a:	0e 94 ba 57 	call	0xaf74	; 0xaf74 <recoil_sprite>
    bd6e:	04 c0       	rjmp	.+8      	; 0xbd78 <collision_detect_player+0x13e>
    bd70:	b4 01       	movw	r22, r8
    bd72:	c4 01       	movw	r24, r8
    bd74:	0e 94 14 58 	call	0xb028	; 0xb028 <recoil_sprite_fine>
			player->shared.speed = 0;
    bd78:	d4 01       	movw	r26, r8
    bd7a:	11 96       	adiw	r26, 0x01	; 1
    bd7c:	1c 92       	st	X, r1
    bd7e:	a0 c0       	rjmp	.+320    	; 0xbec0 <collision_detect_player+0x286>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    bd80:	c3 01       	movw	r24, r6
    bd82:	0e 94 4a 58 	call	0xb094	; 0xb094 <solid_square_tile>
    bd86:	88 23       	and	r24, r24
    bd88:	51 f1       	breq	.+84     	; 0xbdde <collision_detect_player+0x1a4>
    bd8a:	f4 01       	movw	r30, r8
    bd8c:	67 81       	ldd	r22, Z+7	; 0x07
    bd8e:	70 85       	ldd	r23, Z+8	; 0x08
    bd90:	81 85       	ldd	r24, Z+9	; 0x09
    bd92:	92 85       	ldd	r25, Z+10	; 0x0a
    bd94:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    bd98:	26 2e       	mov	r2, r22
    bd9a:	d4 01       	movw	r26, r8
    bd9c:	13 96       	adiw	r26, 0x03	; 3
    bd9e:	6d 91       	ld	r22, X+
    bda0:	7d 91       	ld	r23, X+
    bda2:	8d 91       	ld	r24, X+
    bda4:	9c 91       	ld	r25, X
    bda6:	16 97       	sbiw	r26, 0x06	; 6
    bda8:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    bdac:	86 2f       	mov	r24, r22
    bdae:	38 e0       	ldi	r19, 0x08	; 8
    bdb0:	a3 2e       	mov	r10, r19
    bdb2:	48 e0       	ldi	r20, 0x08	; 8
    bdb4:	c4 2e       	mov	r12, r20
    bdb6:	e1 2e       	mov	r14, r17
    bdb8:	ee 0c       	add	r14, r14
    bdba:	ee 0c       	add	r14, r14
    bdbc:	ee 0c       	add	r14, r14
    bdbe:	0f 2d       	mov	r16, r15
    bdc0:	00 0f       	add	r16, r16
    bdc2:	00 0f       	add	r16, r16
    bdc4:	00 0f       	add	r16, r16
    bdc6:	20 e1       	ldi	r18, 0x10	; 16
    bdc8:	40 e1       	ldi	r20, 0x10	; 16
    bdca:	62 2d       	mov	r22, r2
    bdcc:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
    bdd0:	88 23       	and	r24, r24
    bdd2:	29 f0       	breq	.+10     	; 0xbdde <collision_detect_player+0x1a4>
		{
			collision_count++;
    bdd4:	b3 94       	inc	r11
			collision_tile = i;
			player->shared.speed = 0;
    bdd6:	f4 01       	movw	r30, r8
    bdd8:	11 82       	std	Z+1, r1	; 0x01
    bdda:	d5 2c       	mov	r13, r5
    bddc:	71 c0       	rjmp	.+226    	; 0xbec0 <collision_detect_player+0x286>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    bdde:	f3 01       	movw	r30, r6
    bde0:	e5 5e       	subi	r30, 0xE5	; 229
    bde2:	f3 4f       	sbci	r31, 0xF3	; 243
    bde4:	81 81       	ldd	r24, Z+1	; 0x01
    bde6:	8d 34       	cpi	r24, 0x4D	; 77
    bde8:	59 f5       	brne	.+86     	; 0xbe40 <collision_detect_player+0x206>
    bdea:	e1 2e       	mov	r14, r17
    bdec:	ee 0c       	add	r14, r14
    bdee:	ee 0c       	add	r14, r14
    bdf0:	ee 0c       	add	r14, r14
    bdf2:	0f 2d       	mov	r16, r15
    bdf4:	00 0f       	add	r16, r16
    bdf6:	00 0f       	add	r16, r16
    bdf8:	00 0f       	add	r16, r16
    bdfa:	d4 01       	movw	r26, r8
    bdfc:	17 96       	adiw	r26, 0x07	; 7
    bdfe:	6d 91       	ld	r22, X+
    be00:	7d 91       	ld	r23, X+
    be02:	8d 91       	ld	r24, X+
    be04:	9c 91       	ld	r25, X
    be06:	1a 97       	sbiw	r26, 0x0a	; 10
    be08:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    be0c:	76 2e       	mov	r7, r22
    be0e:	f4 01       	movw	r30, r8
    be10:	63 81       	ldd	r22, Z+3	; 0x03
    be12:	74 81       	ldd	r23, Z+4	; 0x04
    be14:	85 81       	ldd	r24, Z+5	; 0x05
    be16:	96 81       	ldd	r25, Z+6	; 0x06
    be18:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    be1c:	86 2f       	mov	r24, r22
    be1e:	98 e0       	ldi	r25, 0x08	; 8
    be20:	a9 2e       	mov	r10, r25
    be22:	28 e0       	ldi	r18, 0x08	; 8
    be24:	c2 2e       	mov	r12, r18
    be26:	20 e1       	ldi	r18, 0x10	; 16
    be28:	40 e1       	ldi	r20, 0x10	; 16
    be2a:	67 2d       	mov	r22, r7
    be2c:	0e 94 c7 50 	call	0xa18e	; 0xa18e <LBCollides>
    be30:	88 23       	and	r24, r24
    be32:	09 f4       	brne	.+2      	; 0xbe36 <collision_detect_player+0x1fc>
    be34:	45 c0       	rjmp	.+138    	; 0xbec0 <collision_detect_player+0x286>
		{
			player->max_speed = WATER_SPEED;
    be36:	e9 e1       	ldi	r30, 0x19	; 25
    be38:	d4 01       	movw	r26, r8
    be3a:	57 96       	adiw	r26, 0x17	; 23
    be3c:	ec 93       	st	X, r30
    be3e:	4b c0       	rjmp	.+150    	; 0xbed6 <collision_detect_player+0x29c>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    be40:	8c 32       	cpi	r24, 0x2C	; 44
    be42:	99 f2       	breq	.-90     	; 0xbdea <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    be44:	87 30       	cpi	r24, 0x07	; 7
    be46:	99 f4       	brne	.+38     	; 0xbe6e <collision_detect_player+0x234>
    be48:	d4 01       	movw	r26, r8
    be4a:	55 96       	adiw	r26, 0x15	; 21
    be4c:	8c 91       	ld	r24, X
    be4e:	55 97       	sbiw	r26, 0x15	; 21
    be50:	80 fd       	sbrc	r24, 0
    be52:	36 c0       	rjmp	.+108    	; 0xbec0 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    be54:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    be56:	e1 e4       	ldi	r30, 0x41	; 65
    be58:	57 96       	adiw	r26, 0x17	; 23
    be5a:	ec 93       	st	X, r30
    be5c:	57 97       	sbiw	r26, 0x17	; 23
			player->has_over_speed = true;
    be5e:	f1 e0       	ldi	r31, 0x01	; 1
    be60:	59 96       	adiw	r26, 0x19	; 25
    be62:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    be64:	43 e2       	ldi	r20, 0x23	; 35
    be66:	58 e7       	ldi	r21, 0x78	; 120
    be68:	61 e0       	ldi	r22, 0x01	; 1
    be6a:	8a 85       	ldd	r24, Y+10	; 0x0a
    be6c:	10 c0       	rjmp	.+32     	; 0xbe8e <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    be6e:	89 30       	cpi	r24, 0x09	; 9
    be70:	b9 f4       	brne	.+46     	; 0xbea0 <collision_detect_player+0x266>
    be72:	d4 01       	movw	r26, r8
    be74:	55 96       	adiw	r26, 0x15	; 21
    be76:	8c 91       	ld	r24, X
    be78:	55 97       	sbiw	r26, 0x15	; 21
    be7a:	80 fd       	sbrc	r24, 0
    be7c:	21 c0       	rjmp	.+66     	; 0xbec0 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    be7e:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    be80:	e1 e0       	ldi	r30, 0x01	; 1
    be82:	58 96       	adiw	r26, 0x18	; 24
    be84:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    be86:	4d e1       	ldi	r20, 0x1D	; 29
    be88:	58 e7       	ldi	r21, 0x78	; 120
    be8a:	61 e0       	ldi	r22, 0x01	; 1
    be8c:	89 85       	ldd	r24, Y+9	; 0x09
    be8e:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    be92:	40 e0       	ldi	r20, 0x00	; 0
    be94:	50 e0       	ldi	r21, 0x00	; 0
    be96:	61 2f       	mov	r22, r17
    be98:	8f 2d       	mov	r24, r15
    be9a:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
    be9e:	10 c0       	rjmp	.+32     	; 0xbec0 <collision_detect_player+0x286>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    bea0:	88 30       	cpi	r24, 0x08	; 8
    bea2:	71 f4       	brne	.+28     	; 0xbec0 <collision_detect_player+0x286>
    bea4:	d4 01       	movw	r26, r8
    bea6:	55 96       	adiw	r26, 0x15	; 21
    bea8:	8c 91       	ld	r24, X
    beaa:	80 fd       	sbrc	r24, 0
    beac:	09 c0       	rjmp	.+18     	; 0xbec0 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    beae:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    beb0:	40 e0       	ldi	r20, 0x00	; 0
    beb2:	50 e0       	ldi	r21, 0x00	; 0
    beb4:	61 2f       	mov	r22, r17
    beb6:	8f 2d       	mov	r24, r15
    beb8:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
			SFX_ITEM;
			explode = 1;
    bebc:	44 24       	eor	r4, r4
    bebe:	43 94       	inc	r4
		}
		
		if (!hit_water)
    bec0:	31 10       	cpse	r3, r1
    bec2:	09 c0       	rjmp	.+18     	; 0xbed6 <collision_detect_player+0x29c>
		{
			player->max_speed = MAX_SPEED;
    bec4:	82 e3       	ldi	r24, 0x32	; 50
    bec6:	f4 01       	movw	r30, r8
    bec8:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    beca:	81 8d       	ldd	r24, Z+25	; 0x19
    becc:	88 23       	and	r24, r24
    bece:	29 f0       	breq	.+10     	; 0xbeda <collision_detect_player+0x2a0>
    bed0:	91 e4       	ldi	r25, 0x41	; 65
    bed2:	97 8b       	std	Z+23, r25	; 0x17
    bed4:	02 c0       	rjmp	.+4      	; 0xbeda <collision_detect_player+0x2a0>
    bed6:	33 24       	eor	r3, r3
    bed8:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    beda:	53 94       	inc	r5
    bedc:	a3 e0       	ldi	r26, 0x03	; 3
    bede:	5a 12       	cpse	r5, r26
    bee0:	12 cf       	rjmp	.-476    	; 0xbd06 <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    bee2:	bb 20       	and	r11, r11
    bee4:	91 f0       	breq	.+36     	; 0xbf0a <collision_detect_player+0x2d0>
    bee6:	c4 01       	movw	r24, r8
    bee8:	0e 94 ba 57 	call	0xaf74	; 0xaf74 <recoil_sprite>
	if (collision_count == 1)
    beec:	b1 e0       	ldi	r27, 0x01	; 1
    beee:	bb 12       	cpse	r11, r27
    bef0:	0c c0       	rjmp	.+24     	; 0xbf0a <collision_detect_player+0x2d0>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    bef2:	fe 01       	movw	r30, r28
    bef4:	31 96       	adiw	r30, 0x01	; 1
    bef6:	ed 0d       	add	r30, r13
    bef8:	f1 1d       	adc	r31, r1
    befa:	ed 0d       	add	r30, r13
    befc:	f1 1d       	adc	r31, r1
    befe:	40 81       	ld	r20, Z
    bf00:	51 81       	ldd	r21, Z+1	; 0x01
    bf02:	6d 2d       	mov	r22, r13
    bf04:	c4 01       	movw	r24, r8
    bf06:	0e 94 62 5d 	call	0xbac4	; 0xbac4 <slide>
	}
	return explode;
}
    bf0a:	84 2d       	mov	r24, r4
    bf0c:	2b 96       	adiw	r28, 0x0b	; 11
    bf0e:	0f b6       	in	r0, 0x3f	; 63
    bf10:	f8 94       	cli
    bf12:	de bf       	out	0x3e, r29	; 62
    bf14:	0f be       	out	0x3f, r0	; 63
    bf16:	cd bf       	out	0x3d, r28	; 61
    bf18:	df 91       	pop	r29
    bf1a:	cf 91       	pop	r28
    bf1c:	1f 91       	pop	r17
    bf1e:	0f 91       	pop	r16
    bf20:	ff 90       	pop	r15
    bf22:	ef 90       	pop	r14
    bf24:	df 90       	pop	r13
    bf26:	cf 90       	pop	r12
    bf28:	bf 90       	pop	r11
    bf2a:	af 90       	pop	r10
    bf2c:	9f 90       	pop	r9
    bf2e:	8f 90       	pop	r8
    bf30:	7f 90       	pop	r7
    bf32:	6f 90       	pop	r6
    bf34:	5f 90       	pop	r5
    bf36:	4f 90       	pop	r4
    bf38:	3f 90       	pop	r3
    bf3a:	2f 90       	pop	r2
    bf3c:	08 95       	ret

0000bf3e <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    bf3e:	ef 92       	push	r14
    bf40:	ff 92       	push	r15
    bf42:	1f 93       	push	r17
    bf44:	cf 93       	push	r28
    bf46:	df 93       	push	r29
    bf48:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bf4a:	c0 e0       	ldi	r28, 0x00	; 0
    bf4c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    bf4e:	8e e1       	ldi	r24, 0x1E	; 30
    bf50:	e8 2e       	mov	r14, r24
    bf52:	f1 2c       	mov	r15, r1
    bf54:	ce 01       	movw	r24, r28
    bf56:	b7 01       	movw	r22, r14
    bf58:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
		y = 3 + i / 30;
    bf5c:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    bf5e:	11 23       	and	r17, r17
    bf60:	19 f0       	breq	.+6      	; 0xbf68 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    bf62:	40 ec       	ldi	r20, 0xC0	; 192
    bf64:	58 e7       	ldi	r21, 0x78	; 120
    bf66:	2d c0       	rjmp	.+90     	; 0xbfc2 <load_level_tiles+0x84>
    bf68:	fe 01       	movw	r30, r28
    bf6a:	e5 5e       	subi	r30, 0xE5	; 229
    bf6c:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    bf6e:	91 81       	ldd	r25, Z+1	; 0x01
    bf70:	97 30       	cpi	r25, 0x07	; 7
    bf72:	99 f1       	breq	.+102    	; 0xbfda <load_level_tiles+0x9c>
    bf74:	88 f4       	brcc	.+34     	; 0xbf98 <load_level_tiles+0x5a>
    bf76:	93 30       	cpi	r25, 0x03	; 3
    bf78:	39 f1       	breq	.+78     	; 0xbfc8 <load_level_tiles+0x8a>
    bf7a:	40 f4       	brcc	.+16     	; 0xbf8c <load_level_tiles+0x4e>
    bf7c:	91 30       	cpi	r25, 0x01	; 1
    bf7e:	f9 f0       	breq	.+62     	; 0xbfbe <load_level_tiles+0x80>
    bf80:	92 30       	cpi	r25, 0x02	; 2
    bf82:	09 f0       	breq	.+2      	; 0xbf86 <load_level_tiles+0x48>
    bf84:	3f c0       	rjmp	.+126    	; 0xc004 <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    bf86:	46 e2       	ldi	r20, 0x26	; 38
    bf88:	58 e7       	ldi	r21, 0x78	; 120
    bf8a:	1b c0       	rjmp	.+54     	; 0xbfc2 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bf8c:	95 30       	cpi	r25, 0x05	; 5
    bf8e:	f9 f0       	breq	.+62     	; 0xbfce <load_level_tiles+0x90>
    bf90:	08 f5       	brcc	.+66     	; 0xbfd4 <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    bf92:	4b e0       	ldi	r20, 0x0B	; 11
    bf94:	58 e7       	ldi	r21, 0x78	; 120
    bf96:	15 c0       	rjmp	.+42     	; 0xbfc2 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bf98:	9c 32       	cpi	r25, 0x2C	; 44
    bf9a:	59 f1       	breq	.+86     	; 0xbff2 <load_level_tiles+0xb4>
    bf9c:	38 f4       	brcc	.+14     	; 0xbfac <load_level_tiles+0x6e>
    bf9e:	98 30       	cpi	r25, 0x08	; 8
    bfa0:	f9 f0       	breq	.+62     	; 0xbfe0 <load_level_tiles+0xa2>
    bfa2:	99 30       	cpi	r25, 0x09	; 9
    bfa4:	79 f5       	brne	.+94     	; 0xc004 <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    bfa6:	4d e1       	ldi	r20, 0x1D	; 29
    bfa8:	58 e7       	ldi	r21, 0x78	; 120
    bfaa:	0b c0       	rjmp	.+22     	; 0xbfc2 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bfac:	92 34       	cpi	r25, 0x42	; 66
    bfae:	d9 f0       	breq	.+54     	; 0xbfe6 <load_level_tiles+0xa8>
    bfb0:	9d 34       	cpi	r25, 0x4D	; 77
    bfb2:	e1 f0       	breq	.+56     	; 0xbfec <load_level_tiles+0xae>
    bfb4:	97 33       	cpi	r25, 0x37	; 55
    bfb6:	31 f5       	brne	.+76     	; 0xc004 <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    bfb8:	4f ef       	ldi	r20, 0xFF	; 255
    bfba:	57 e7       	ldi	r21, 0x77	; 119
    bfbc:	02 c0       	rjmp	.+4      	; 0xbfc2 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    bfbe:	49 e2       	ldi	r20, 0x29	; 41
    bfc0:	58 e7       	ldi	r21, 0x78	; 120
    bfc2:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
    bfc6:	22 c0       	rjmp	.+68     	; 0xc00c <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    bfc8:	41 e1       	ldi	r20, 0x11	; 17
    bfca:	58 e7       	ldi	r21, 0x78	; 120
    bfcc:	fa cf       	rjmp	.-12     	; 0xbfc2 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    bfce:	48 e0       	ldi	r20, 0x08	; 8
    bfd0:	58 e7       	ldi	r21, 0x78	; 120
    bfd2:	f7 cf       	rjmp	.-18     	; 0xbfc2 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    bfd4:	4e e0       	ldi	r20, 0x0E	; 14
    bfd6:	58 e7       	ldi	r21, 0x78	; 120
    bfd8:	f4 cf       	rjmp	.-24     	; 0xbfc2 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    bfda:	43 e2       	ldi	r20, 0x23	; 35
    bfdc:	58 e7       	ldi	r21, 0x78	; 120
    bfde:	f1 cf       	rjmp	.-30     	; 0xbfc2 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    bfe0:	40 e2       	ldi	r20, 0x20	; 32
    bfe2:	58 e7       	ldi	r21, 0x78	; 120
    bfe4:	ee cf       	rjmp	.-36     	; 0xbfc2 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    bfe6:	42 e0       	ldi	r20, 0x02	; 2
    bfe8:	58 e7       	ldi	r21, 0x78	; 120
    bfea:	eb cf       	rjmp	.-42     	; 0xbfc2 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    bfec:	45 e0       	ldi	r20, 0x05	; 5
    bfee:	58 e7       	ldi	r21, 0x78	; 120
    bff0:	e8 cf       	rjmp	.-48     	; 0xbfc2 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    bff2:	45 e0       	ldi	r20, 0x05	; 5
    bff4:	58 e7       	ldi	r21, 0x78	; 120
    bff6:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
    bffa:	d0 93 9e 0f 	sts	0x0F9E, r29
    bffe:	c0 93 9d 0f 	sts	0x0F9D, r28
    c002:	04 c0       	rjmp	.+8      	; 0xc00c <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c004:	40 e0       	ldi	r20, 0x00	; 0
    c006:	50 e0       	ldi	r21, 0x00	; 0
    c008:	0e 94 e1 40 	call	0x81c2	; 0x81c2 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c00c:	21 96       	adiw	r28, 0x01	; 1
    c00e:	ce 3e       	cpi	r28, 0xEE	; 238
    c010:	82 e0       	ldi	r24, 0x02	; 2
    c012:	d8 07       	cpc	r29, r24
    c014:	09 f0       	breq	.+2      	; 0xc018 <load_level_tiles+0xda>
    c016:	9e cf       	rjmp	.-196    	; 0xbf54 <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c018:	df 91       	pop	r29
    c01a:	cf 91       	pop	r28
    c01c:	1f 91       	pop	r17
    c01e:	ff 90       	pop	r15
    c020:	ef 90       	pop	r14
    c022:	08 95       	ret

0000c024 <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    c024:	cf 93       	push	r28
    c026:	df 93       	push	r29
    c028:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    c02a:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    c02c:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    c02e:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    c030:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    c032:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    c034:	82 e3       	ldi	r24, 0x32	; 50
    c036:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    c038:	ce 01       	movw	r24, r28
    c03a:	0e 94 1d 54 	call	0xa83a	; 0xa83a <player_init_shot_state>
	player_spawn(p);
    c03e:	ce 01       	movw	r24, r28
}
    c040:	df 91       	pop	r29
    c042:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    c044:	0c 94 4b 54 	jmp	0xa896	; 0xa896 <player_spawn>

0000c048 <load_level>:
}

void load_level(int level_number)
{
    c048:	8f 92       	push	r8
    c04a:	9f 92       	push	r9
    c04c:	af 92       	push	r10
    c04e:	bf 92       	push	r11
    c050:	cf 92       	push	r12
    c052:	df 92       	push	r13
    c054:	ef 92       	push	r14
    c056:	ff 92       	push	r15
    c058:	0f 93       	push	r16
    c05a:	1f 93       	push	r17
    c05c:	cf 93       	push	r28
    c05e:	df 93       	push	r29
    c060:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c062:	8e ee       	ldi	r24, 0xEE	; 238
    c064:	92 e0       	ldi	r25, 0x02	; 2
    c066:	c8 9f       	mul	r28, r24
    c068:	70 01       	movw	r14, r0
    c06a:	c9 9f       	mul	r28, r25
    c06c:	f0 0c       	add	r15, r0
    c06e:	d8 9f       	mul	r29, r24
    c070:	f0 0c       	add	r15, r0
    c072:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    c074:	10 92 75 0b 	sts	0x0B75, r1
    c078:	10 92 74 0b 	sts	0x0B74, r1
	init_tile_animations(&tile_animations);
    c07c:	8d e7       	ldi	r24, 0x7D	; 125
    c07e:	9b e0       	ldi	r25, 0x0B	; 11
    c080:	0e 94 d7 52 	call	0xa5ae	; 0xa5ae <init_tile_animations>
	init_scope_animation(&scope_animation);
    c084:	81 e9       	ldi	r24, 0x91	; 145
    c086:	9f e0       	ldi	r25, 0x0F	; 15
    c088:	0e 94 fe 52 	call	0xa5fc	; 0xa5fc <init_scope_animation>
	init_sub_animation(&sub_animation);
    c08c:	83 e8       	ldi	r24, 0x83	; 131
    c08e:	9f e0       	ldi	r25, 0x0F	; 15
    c090:	0e 94 16 53 	call	0xa62c	; 0xa62c <init_sub_animation>
	game.current_screen = LEVEL;
    c094:	83 e0       	ldi	r24, 0x03	; 3
    c096:	80 93 69 0b 	sts	0x0B69, r24
	clear_sprites();
    c09a:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
	game.current_level = level_number;
    c09e:	c0 93 6a 0b 	sts	0x0B6A, r28
    c0a2:	8c e1       	ldi	r24, 0x1C	; 28
    c0a4:	a8 2e       	mov	r10, r24
    c0a6:	8c e0       	ldi	r24, 0x0C	; 12
    c0a8:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    c0aa:	00 e0       	ldi	r16, 0x00	; 0
    c0ac:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    c0ae:	9e e1       	ldi	r25, 0x1E	; 30
    c0b0:	c9 2e       	mov	r12, r25
    c0b2:	d1 2c       	mov	r13, r1
    c0b4:	c8 01       	movw	r24, r16
    c0b6:	b6 01       	movw	r22, r12
    c0b8:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    c0bc:	d8 2f       	mov	r29, r24
    c0be:	dd 0f       	add	r29, r29
    c0c0:	dd 0f       	add	r29, r29
    c0c2:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    c0c4:	ab 01       	movw	r20, r22
    c0c6:	4d 5f       	subi	r20, 0xFD	; 253
    c0c8:	5f 4f       	sbci	r21, 0xFF	; 255
    c0ca:	c4 2f       	mov	r28, r20
    c0cc:	cc 0f       	add	r28, r28
    c0ce:	cc 0f       	add	r28, r28
    c0d0:	cc 0f       	add	r28, r28
    c0d2:	f8 01       	movw	r30, r16
    c0d4:	ee 0d       	add	r30, r14
    c0d6:	ff 1d       	adc	r31, r15
    c0d8:	ed 50       	subi	r30, 0x0D	; 13
    c0da:	fb 4e       	sbci	r31, 0xEB	; 235
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c0dc:	e4 91       	lpm	r30, Z
    c0de:	45 01       	movw	r8, r10
    c0e0:	d5 01       	movw	r26, r10
    c0e2:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c0e4:	e8 35       	cpi	r30, 0x58	; 88
    c0e6:	31 f4       	brne	.+12     	; 0xc0f4 <load_level+0xac>
		{
			prep_player(&player1, x, y);
    c0e8:	4c 2f       	mov	r20, r28
    c0ea:	6d 2f       	mov	r22, r29
    c0ec:	8b e9       	ldi	r24, 0x9B	; 155
    c0ee:	9b e0       	ldi	r25, 0x0B	; 11
    c0f0:	0e 94 12 60 	call	0xc024	; 0xc024 <prep_player>
    c0f4:	bf ef       	ldi	r27, 0xFF	; 255
    c0f6:	ab 1a       	sub	r10, r27
    c0f8:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c0fa:	f4 01       	movw	r30, r8
    c0fc:	80 81       	ld	r24, Z
    c0fe:	83 36       	cpi	r24, 0x63	; 99
    c100:	31 f4       	brne	.+12     	; 0xc10e <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    c102:	4c 2f       	mov	r20, r28
    c104:	6d 2f       	mov	r22, r29
    c106:	8a e0       	ldi	r24, 0x0A	; 10
    c108:	9f e0       	ldi	r25, 0x0F	; 15
    c10a:	0e 94 12 60 	call	0xc024	; 0xc024 <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c10e:	0f 5f       	subi	r16, 0xFF	; 255
    c110:	1f 4f       	sbci	r17, 0xFF	; 255
    c112:	0e 3e       	cpi	r16, 0xEE	; 238
    c114:	f2 e0       	ldi	r31, 0x02	; 2
    c116:	1f 07       	cpc	r17, r31
    c118:	69 f6       	brne	.-102    	; 0xc0b4 <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    c11a:	60 e0       	ldi	r22, 0x00	; 0
    c11c:	8b e9       	ldi	r24, 0x9B	; 155
    c11e:	9b e0       	ldi	r25, 0x0B	; 11
    c120:	0e 94 48 56 	call	0xac90	; 0xac90 <render_hud>
	render_hud(&player2, 15);
    c124:	6f e0       	ldi	r22, 0x0F	; 15
    c126:	8a e0       	ldi	r24, 0x0A	; 10
    c128:	9f e0       	ldi	r25, 0x0F	; 15
    c12a:	0e 94 48 56 	call	0xac90	; 0xac90 <render_hud>
	render_score(&player1, 0);
    c12e:	60 e0       	ldi	r22, 0x00	; 0
    c130:	8b e9       	ldi	r24, 0x9B	; 155
    c132:	9b e0       	ldi	r25, 0x0B	; 11
    c134:	0e 94 65 56 	call	0xacca	; 0xacca <render_score>
	render_score(&player2, 15);
    c138:	6f e0       	ldi	r22, 0x0F	; 15
    c13a:	8a e0       	ldi	r24, 0x0A	; 10
    c13c:	9f e0       	ldi	r25, 0x0F	; 15
    c13e:	0e 94 65 56 	call	0xacca	; 0xacca <render_score>
	Print(14, 0, (char*) strVertSep);
    c142:	41 e6       	ldi	r20, 0x61	; 97
    c144:	54 e0       	ldi	r21, 0x04	; 4
    c146:	60 e0       	ldi	r22, 0x00	; 0
    c148:	70 e0       	ldi	r23, 0x00	; 0
    c14a:	8e e0       	ldi	r24, 0x0E	; 14
    c14c:	90 e0       	ldi	r25, 0x00	; 0
    c14e:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(14, 1, (char*) strVertSep);
    c152:	41 e6       	ldi	r20, 0x61	; 97
    c154:	54 e0       	ldi	r21, 0x04	; 4
    c156:	61 e0       	ldi	r22, 0x01	; 1
    c158:	70 e0       	ldi	r23, 0x00	; 0
    c15a:	8e e0       	ldi	r24, 0x0E	; 14
    c15c:	90 e0       	ldi	r25, 0x00	; 0
    c15e:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(14, 2, (char*) strVertSep);
    c162:	41 e6       	ldi	r20, 0x61	; 97
    c164:	54 e0       	ldi	r21, 0x04	; 4
    c166:	62 e0       	ldi	r22, 0x02	; 2
    c168:	70 e0       	ldi	r23, 0x00	; 0
    c16a:	8e e0       	ldi	r24, 0x0E	; 14
    c16c:	90 e0       	ldi	r25, 0x00	; 0
    c16e:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	load_level_tiles(false);
    c172:	80 e0       	ldi	r24, 0x00	; 0
}
    c174:	df 91       	pop	r29
    c176:	cf 91       	pop	r28
    c178:	1f 91       	pop	r17
    c17a:	0f 91       	pop	r16
    c17c:	ff 90       	pop	r15
    c17e:	ef 90       	pop	r14
    c180:	df 90       	pop	r13
    c182:	cf 90       	pop	r12
    c184:	bf 90       	pop	r11
    c186:	af 90       	pop	r10
    c188:	9f 90       	pop	r9
    c18a:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    c18c:	0c 94 9f 5f 	jmp	0xbf3e	; 0xbf3e <load_level_tiles>

0000c190 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c190:	cf 93       	push	r28
    c192:	df 93       	push	r29
    c194:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c196:	61 e0       	ldi	r22, 0x01	; 1
    c198:	83 e0       	ldi	r24, 0x03	; 3
    c19a:	0e 94 bb 4f 	call	0x9f76	; 0x9f76 <FadeOut>
	ClearVram();
    c19e:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <ClearVram>
	clear_sprites();
    c1a2:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c1a6:	d0 e0       	ldi	r29, 0x00	; 0
    c1a8:	ae 01       	movw	r20, r28
    c1aa:	84 e0       	ldi	r24, 0x04	; 4
    c1ac:	44 0f       	add	r20, r20
    c1ae:	55 1f       	adc	r21, r21
    c1b0:	8a 95       	dec	r24
    c1b2:	e1 f7       	brne	.-8      	; 0xc1ac <level_transition+0x1c>
    c1b4:	46 59       	subi	r20, 0x96	; 150
    c1b6:	5c 4f       	sbci	r21, 0xFC	; 252
    c1b8:	6c e0       	ldi	r22, 0x0C	; 12
    c1ba:	70 e0       	ldi	r23, 0x00	; 0
    c1bc:	88 e0       	ldi	r24, 0x08	; 8
    c1be:	90 e0       	ldi	r25, 0x00	; 0
    c1c0:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	FadeIn(1, true);
    c1c4:	61 e0       	ldi	r22, 0x01	; 1
    c1c6:	81 e0       	ldi	r24, 0x01	; 1
    c1c8:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c1cc:	84 e0       	ldi	r24, 0x04	; 4
    c1ce:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <LBWaitSeconds>
	FadeOut(1, true);
    c1d2:	61 e0       	ldi	r22, 0x01	; 1
    c1d4:	81 e0       	ldi	r24, 0x01	; 1
    c1d6:	0e 94 bb 4f 	call	0x9f76	; 0x9f76 <FadeOut>
	ClearVram();
    c1da:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c1de:	60 e0       	ldi	r22, 0x00	; 0
    c1e0:	83 e0       	ldi	r24, 0x03	; 3
    c1e2:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <FadeIn>
	load_level(index);
    c1e6:	ce 01       	movw	r24, r28
}
    c1e8:	df 91       	pop	r29
    c1ea:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c1ec:	0c 94 24 60 	jmp	0xc048	; 0xc048 <load_level>

0000c1f0 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c1f0:	81 e9       	ldi	r24, 0x91	; 145
    c1f2:	9f e0       	ldi	r25, 0x0F	; 15
    c1f4:	0e 94 0b 57 	call	0xae16	; 0xae16 <render_scope>
    c1f8:	88 23       	and	r24, r24
    c1fa:	19 f0       	breq	.+6      	; 0xc202 <render_boss_fight_scope_load+0x12>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c1fc:	82 e0       	ldi	r24, 0x02	; 2
    c1fe:	80 93 6c 0b 	sts	0x0B6C, r24
    c202:	08 95       	ret

0000c204 <render_boss_fight_sub_load>:
		SFX_ALARM;
	}
}

void render_boss_fight_sub_load()
{
    c204:	0f 93       	push	r16
    c206:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c208:	83 e8       	ldi	r24, 0x83	; 131
    c20a:	9f e0       	ldi	r25, 0x0F	; 15
    c20c:	0e 94 13 50 	call	0xa026	; 0xa026 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c210:	ac 01       	movw	r20, r24
    c212:	64 e0       	ldi	r22, 0x04	; 4
    c214:	81 e0       	ldi	r24, 0x01	; 1
    c216:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	if (sub_animation.anim.reversing)
    c21a:	80 91 88 0f 	lds	r24, 0x0F88
    c21e:	88 23       	and	r24, r24
    c220:	d9 f0       	breq	.+54     	; 0xc258 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c222:	84 e0       	ldi	r24, 0x04	; 4
    c224:	80 93 6c 0b 	sts	0x0B6C, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    c228:	00 e0       	ldi	r16, 0x00	; 0
    c22a:	10 e0       	ldi	r17, 0x00	; 0
    c22c:	20 e9       	ldi	r18, 0x90	; 144
    c22e:	32 e4       	ldi	r19, 0x42	; 66
    c230:	40 e0       	ldi	r20, 0x00	; 0
    c232:	50 e0       	ldi	r21, 0x00	; 0
    c234:	60 ec       	ldi	r22, 0xC0	; 192
    c236:	72 e4       	ldi	r23, 0x42	; 66
    c238:	83 ee       	ldi	r24, 0xE3	; 227
    c23a:	9f e0       	ldi	r25, 0x0F	; 15
    c23c:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    c240:	00 e0       	ldi	r16, 0x00	; 0
    c242:	10 e0       	ldi	r17, 0x00	; 0
    c244:	20 e9       	ldi	r18, 0x90	; 144
    c246:	32 e4       	ldi	r19, 0x42	; 66
    c248:	40 e0       	ldi	r20, 0x00	; 0
    c24a:	50 e0       	ldi	r21, 0x00	; 0
    c24c:	60 e4       	ldi	r22, 0x40	; 64
    c24e:	73 e4       	ldi	r23, 0x43	; 67
    c250:	8f ea       	ldi	r24, 0xAF	; 175
    c252:	9f e0       	ldi	r25, 0x0F	; 15
    c254:	0e 94 79 53 	call	0xa6f2	; 0xa6f2 <init_turret>
	}
}
    c258:	1f 91       	pop	r17
    c25a:	0f 91       	pop	r16
    c25c:	08 95       	ret

0000c25e <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c25e:	83 e8       	ldi	r24, 0x83	; 131
    c260:	9f e0       	ldi	r25, 0x0F	; 15
    c262:	0e 94 13 50 	call	0xa026	; 0xa026 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    c266:	20 91 83 0f 	lds	r18, 0x0F83
    c26a:	21 11       	cpse	r18, r1
    c26c:	05 c0       	rjmp	.+10     	; 0xc278 <render_boss_fight_sub_sinking+0x1a>
    c26e:	ac 01       	movw	r20, r24
    c270:	64 e0       	ldi	r22, 0x04	; 4
    c272:	81 e0       	ldi	r24, 0x01	; 1
    c274:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	if (sub_animation.anim.looped)
    c278:	80 91 87 0f 	lds	r24, 0x0F87
    c27c:	88 23       	and	r24, r24
    c27e:	19 f0       	breq	.+6      	; 0xc286 <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    c280:	88 e0       	ldi	r24, 0x08	; 8
    c282:	80 93 6c 0b 	sts	0x0B6C, r24
    c286:	08 95       	ret

0000c288 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    c288:	ef 92       	push	r14
    c28a:	ff 92       	push	r15
    c28c:	0f 93       	push	r16
    c28e:	1f 93       	push	r17
    c290:	cf 93       	push	r28
    c292:	df 93       	push	r29
    c294:	1f 92       	push	r1
    c296:	cd b7       	in	r28, 0x3d	; 61
    c298:	de b7       	in	r29, 0x3e	; 62
    c29a:	7c 01       	movw	r14, r24
    c29c:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    c29e:	fc 01       	movw	r30, r24
    c2a0:	67 81       	ldd	r22, Z+7	; 0x07
    c2a2:	70 85       	ldd	r23, Z+8	; 0x08
    c2a4:	81 85       	ldd	r24, Z+9	; 0x09
    c2a6:	92 85       	ldd	r25, Z+10	; 0x0a
    c2a8:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    c2ac:	46 2f       	mov	r20, r22
    c2ae:	f7 01       	movw	r30, r14
    c2b0:	63 81       	ldd	r22, Z+3	; 0x03
    c2b2:	74 81       	ldd	r23, Z+4	; 0x04
    c2b4:	85 81       	ldd	r24, Z+5	; 0x05
    c2b6:	96 81       	ldd	r25, Z+6	; 0x06
    c2b8:	49 83       	std	Y+1, r20	; 0x01
    c2ba:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    c2be:	01 e0       	ldi	r16, 0x01	; 1
    c2c0:	21 e0       	ldi	r18, 0x01	; 1
    c2c2:	49 81       	ldd	r20, Y+1	; 0x01
    c2c4:	81 2f       	mov	r24, r17
    c2c6:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
}
    c2ca:	0f 90       	pop	r0
    c2cc:	df 91       	pop	r29
    c2ce:	cf 91       	pop	r28
    c2d0:	1f 91       	pop	r17
    c2d2:	0f 91       	pop	r16
    c2d4:	ff 90       	pop	r15
    c2d6:	ef 90       	pop	r14
    c2d8:	08 95       	ret

0000c2da <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    c2da:	ef 92       	push	r14
    c2dc:	ff 92       	push	r15
    c2de:	0f 93       	push	r16
    c2e0:	1f 93       	push	r17
    c2e2:	cf 93       	push	r28
    c2e4:	df 93       	push	r29
    c2e6:	1f 92       	push	r1
    c2e8:	cd b7       	in	r28, 0x3d	; 61
    c2ea:	de b7       	in	r29, 0x3e	; 62
    c2ec:	7c 01       	movw	r14, r24
    c2ee:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    c2f0:	fc 01       	movw	r30, r24
    c2f2:	63 89       	ldd	r22, Z+19	; 0x13
    c2f4:	74 89       	ldd	r23, Z+20	; 0x14
    c2f6:	85 89       	ldd	r24, Z+21	; 0x15
    c2f8:	96 89       	ldd	r25, Z+22	; 0x16
    c2fa:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    c2fe:	46 2f       	mov	r20, r22
    c300:	f7 01       	movw	r30, r14
    c302:	67 85       	ldd	r22, Z+15	; 0x0f
    c304:	70 89       	ldd	r23, Z+16	; 0x10
    c306:	81 89       	ldd	r24, Z+17	; 0x11
    c308:	92 89       	ldd	r25, Z+18	; 0x12
    c30a:	49 83       	std	Y+1, r20	; 0x01
    c30c:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    c310:	01 e0       	ldi	r16, 0x01	; 1
    c312:	21 e0       	ldi	r18, 0x01	; 1
    c314:	49 81       	ldd	r20, Y+1	; 0x01
    c316:	81 2f       	mov	r24, r17
    c318:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
}
    c31c:	0f 90       	pop	r0
    c31e:	df 91       	pop	r29
    c320:	cf 91       	pop	r28
    c322:	1f 91       	pop	r17
    c324:	0f 91       	pop	r16
    c326:	ff 90       	pop	r15
    c328:	ef 90       	pop	r14
    c32a:	08 95       	ret

0000c32c <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c32c:	cf 92       	push	r12
    c32e:	df 92       	push	r13
    c330:	ef 92       	push	r14
    c332:	ff 92       	push	r15
    c334:	cf 93       	push	r28
    c336:	df 93       	push	r29
    c338:	ec 01       	movw	r28, r24
    c33a:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    c33c:	cb 80       	ldd	r12, Y+3	; 0x03
    c33e:	dc 80       	ldd	r13, Y+4	; 0x04
    c340:	ed 80       	ldd	r14, Y+5	; 0x05
    c342:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    c344:	6f 81       	ldd	r22, Y+7	; 0x07
    c346:	78 85       	ldd	r23, Y+8	; 0x08
    c348:	89 85       	ldd	r24, Y+9	; 0x09
    c34a:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    c34c:	2b 85       	ldd	r18, Y+11	; 0x0b
    c34e:	21 11       	cpse	r18, r1
    c350:	27 c0       	rjmp	.+78     	; 0xc3a0 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    c352:	20 e0       	ldi	r18, 0x00	; 0
    c354:	30 e0       	ldi	r19, 0x00	; 0
    c356:	40 e0       	ldi	r20, 0x00	; 0
    c358:	5e e3       	ldi	r21, 0x3E	; 62
    c35a:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    c35e:	20 e0       	ldi	r18, 0x00	; 0
    c360:	30 e0       	ldi	r19, 0x00	; 0
    c362:	40 e4       	ldi	r20, 0x40	; 64
    c364:	50 e4       	ldi	r21, 0x40	; 64
    c366:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c36a:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    c36e:	8e e1       	ldi	r24, 0x1E	; 30
    c370:	68 9f       	mul	r22, r24
    c372:	e0 01       	movw	r28, r0
    c374:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    c376:	20 e0       	ldi	r18, 0x00	; 0
    c378:	30 e0       	ldi	r19, 0x00	; 0
    c37a:	40 e0       	ldi	r20, 0x00	; 0
    c37c:	5e e3       	ldi	r21, 0x3E	; 62
    c37e:	c7 01       	movw	r24, r14
    c380:	b6 01       	movw	r22, r12
    c382:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    c386:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    c38a:	c6 0f       	add	r28, r22
    c38c:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    c38e:	be 01       	movw	r22, r28
    c390:	8d e7       	ldi	r24, 0x7D	; 125
    c392:	9b e0       	ldi	r25, 0x0B	; 11
    c394:	0e 94 d3 5a 	call	0xb5a6	; 0xb5a6 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    c398:	c5 5e       	subi	r28, 0xE5	; 229
    c39a:	d3 4f       	sbci	r29, 0xF3	; 243
    c39c:	19 82       	std	Y+1, r1	; 0x01
    c39e:	54 c0       	rjmp	.+168    	; 0xc448 <update_turret+0x11c>
	}
	else if (t->shared.direction == D_LEFT)
    c3a0:	98 81       	ld	r25, Y
    c3a2:	93 30       	cpi	r25, 0x03	; 3
    c3a4:	19 f5       	brne	.+70     	; 0xc3ec <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    c3a6:	63 2f       	mov	r22, r19
    c3a8:	70 e0       	ldi	r23, 0x00	; 0
    c3aa:	80 e0       	ldi	r24, 0x00	; 0
    c3ac:	90 e0       	ldi	r25, 0x00	; 0
    c3ae:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    c3b2:	9b 01       	movw	r18, r22
    c3b4:	ac 01       	movw	r20, r24
    c3b6:	c7 01       	movw	r24, r14
    c3b8:	b6 01       	movw	r22, r12
    c3ba:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    c3be:	87 ff       	sbrs	r24, 7
    c3c0:	02 c0       	rjmp	.+4      	; 0xc3c6 <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    c3c2:	81 e0       	ldi	r24, 0x01	; 1
    c3c4:	24 c0       	rjmp	.+72     	; 0xc40e <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    c3c6:	69 81       	ldd	r22, Y+1	; 0x01
    c3c8:	70 e0       	ldi	r23, 0x00	; 0
    c3ca:	80 e0       	ldi	r24, 0x00	; 0
    c3cc:	90 e0       	ldi	r25, 0x00	; 0
    c3ce:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    c3d2:	25 e6       	ldi	r18, 0x65	; 101
    c3d4:	38 e8       	ldi	r19, 0x88	; 136
    c3d6:	48 e8       	ldi	r20, 0x88	; 136
    c3d8:	5c e3       	ldi	r21, 0x3C	; 60
    c3da:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    c3de:	9b 01       	movw	r18, r22
    c3e0:	ac 01       	movw	r20, r24
    c3e2:	c7 01       	movw	r24, r14
    c3e4:	b6 01       	movw	r22, r12
    c3e6:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c3ea:	2a c0       	rjmp	.+84     	; 0xc440 <update_turret+0x114>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    c3ec:	91 30       	cpi	r25, 0x01	; 1
    c3ee:	61 f5       	brne	.+88     	; 0xc448 <update_turret+0x11c>
	{
		if (t->shared.x > right_limit)
    c3f0:	64 2f       	mov	r22, r20
    c3f2:	70 e0       	ldi	r23, 0x00	; 0
    c3f4:	80 e0       	ldi	r24, 0x00	; 0
    c3f6:	90 e0       	ldi	r25, 0x00	; 0
    c3f8:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    c3fc:	9b 01       	movw	r18, r22
    c3fe:	ac 01       	movw	r20, r24
    c400:	c7 01       	movw	r24, r14
    c402:	b6 01       	movw	r22, r12
    c404:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    c408:	18 16       	cp	r1, r24
    c40a:	44 f4       	brge	.+16     	; 0xc41c <update_turret+0xf0>
		{
			t->shared.direction = D_LEFT;
    c40c:	83 e0       	ldi	r24, 0x03	; 3
    c40e:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    c410:	6c e8       	ldi	r22, 0x8C	; 140
    c412:	8a e5       	ldi	r24, 0x5A	; 90
    c414:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    c418:	89 83       	std	Y+1, r24	; 0x01
    c41a:	16 c0       	rjmp	.+44     	; 0xc448 <update_turret+0x11c>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    c41c:	69 81       	ldd	r22, Y+1	; 0x01
    c41e:	70 e0       	ldi	r23, 0x00	; 0
    c420:	80 e0       	ldi	r24, 0x00	; 0
    c422:	90 e0       	ldi	r25, 0x00	; 0
    c424:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    c428:	25 e6       	ldi	r18, 0x65	; 101
    c42a:	38 e8       	ldi	r19, 0x88	; 136
    c42c:	48 e8       	ldi	r20, 0x88	; 136
    c42e:	5c e3       	ldi	r21, 0x3C	; 60
    c430:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    c434:	9b 01       	movw	r18, r22
    c436:	ac 01       	movw	r20, r24
    c438:	c7 01       	movw	r24, r14
    c43a:	b6 01       	movw	r22, r12
    c43c:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c440:	6b 83       	std	Y+3, r22	; 0x03
    c442:	7c 83       	std	Y+4, r23	; 0x04
    c444:	8d 83       	std	Y+5, r24	; 0x05
    c446:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    c448:	df 91       	pop	r29
    c44a:	cf 91       	pop	r28
    c44c:	ff 90       	pop	r15
    c44e:	ef 90       	pop	r14
    c450:	df 90       	pop	r13
    c452:	cf 90       	pop	r12
    c454:	08 95       	ret

0000c456 <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    c456:	0f 93       	push	r16
    c458:	1f 93       	push	r17
    c45a:	cf 93       	push	r28
    c45c:	df 93       	push	r29
    c45e:	8c 01       	movw	r16, r24
    c460:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    c462:	fc 01       	movw	r30, r24
    c464:	83 85       	ldd	r24, Z+11	; 0x0b
    c466:	81 11       	cpse	r24, r1
    c468:	02 c0       	rjmp	.+4      	; 0xc46e <update_turret_shot+0x18>
	{
		s->active = 0;
    c46a:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    c46c:	62 c0       	rjmp	.+196    	; 0xc532 <update_turret_shot+0xdc>
	}
	if (!s->active)
    c46e:	8e 85       	ldd	r24, Y+14	; 0x0e
    c470:	81 11       	cpse	r24, r1
    c472:	20 c0       	rjmp	.+64     	; 0xc4b4 <update_turret_shot+0x5e>
	{
		s->active = 1;
    c474:	81 e0       	ldi	r24, 0x01	; 1
    c476:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    c478:	20 e0       	ldi	r18, 0x00	; 0
    c47a:	30 e0       	ldi	r19, 0x00	; 0
    c47c:	40 e4       	ldi	r20, 0x40	; 64
    c47e:	50 e4       	ldi	r21, 0x40	; 64
    c480:	f8 01       	movw	r30, r16
    c482:	63 81       	ldd	r22, Z+3	; 0x03
    c484:	74 81       	ldd	r23, Z+4	; 0x04
    c486:	85 81       	ldd	r24, Z+5	; 0x05
    c488:	96 81       	ldd	r25, Z+6	; 0x06
    c48a:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c48e:	6b 83       	std	Y+3, r22	; 0x03
    c490:	7c 83       	std	Y+4, r23	; 0x04
    c492:	8d 83       	std	Y+5, r24	; 0x05
    c494:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    c496:	20 e0       	ldi	r18, 0x00	; 0
    c498:	30 e0       	ldi	r19, 0x00	; 0
    c49a:	40 e4       	ldi	r20, 0x40	; 64
    c49c:	50 e4       	ldi	r21, 0x40	; 64
    c49e:	f8 01       	movw	r30, r16
    c4a0:	67 81       	ldd	r22, Z+7	; 0x07
    c4a2:	70 85       	ldd	r23, Z+8	; 0x08
    c4a4:	81 85       	ldd	r24, Z+9	; 0x09
    c4a6:	92 85       	ldd	r25, Z+10	; 0x0a
    c4a8:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c4ac:	6f 83       	std	Y+7, r22	; 0x07
    c4ae:	78 87       	std	Y+8, r23	; 0x08
    c4b0:	89 87       	std	Y+9, r24	; 0x09
    c4b2:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    c4b4:	23 e3       	ldi	r18, 0x33	; 51
    c4b6:	35 e5       	ldi	r19, 0x55	; 85
    c4b8:	45 e8       	ldi	r20, 0x85	; 133
    c4ba:	50 e4       	ldi	r21, 0x40	; 64
    c4bc:	6f 81       	ldd	r22, Y+7	; 0x07
    c4be:	78 85       	ldd	r23, Y+8	; 0x08
    c4c0:	89 85       	ldd	r24, Y+9	; 0x09
    c4c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    c4c4:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c4c8:	6f 83       	std	Y+7, r22	; 0x07
    c4ca:	78 87       	std	Y+8, r23	; 0x08
    c4cc:	89 87       	std	Y+9, r24	; 0x09
    c4ce:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    c4d0:	20 e0       	ldi	r18, 0x00	; 0
    c4d2:	30 e0       	ldi	r19, 0x00	; 0
    c4d4:	40 e0       	ldi	r20, 0x00	; 0
    c4d6:	51 e4       	ldi	r21, 0x41	; 65
    c4d8:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c4dc:	20 e0       	ldi	r18, 0x00	; 0
    c4de:	30 e0       	ldi	r19, 0x00	; 0
    c4e0:	48 e5       	ldi	r20, 0x58	; 88
    c4e2:	53 e4       	ldi	r21, 0x43	; 67
    c4e4:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    c4e8:	18 16       	cp	r1, r24
    c4ea:	0c f4       	brge	.+2      	; 0xc4ee <update_turret_shot+0x98>
    c4ec:	be cf       	rjmp	.-132    	; 0xc46a <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    c4ee:	00 91 78 0b 	lds	r16, 0x0B78
    c4f2:	10 91 79 0b 	lds	r17, 0x0B79
    c4f6:	be 01       	movw	r22, r28
    c4f8:	c8 01       	movw	r24, r16
    c4fa:	0e 94 2a 59 	call	0xb254	; 0xb254 <player_shot>
    c4fe:	88 23       	and	r24, r24
    c500:	c1 f0       	breq	.+48     	; 0xc532 <update_turret_shot+0xdc>
    c502:	f8 01       	movw	r30, r16
    c504:	85 89       	ldd	r24, Z+21	; 0x15
    c506:	80 fd       	sbrc	r24, 0
    c508:	14 c0       	rjmp	.+40     	; 0xc532 <update_turret_shot+0xdc>
	{
		game.boss_fight_player_lives--;
    c50a:	90 91 6e 0b 	lds	r25, 0x0B6E
    c50e:	91 50       	subi	r25, 0x01	; 1
    c510:	90 93 6e 0b 	sts	0x0B6E, r25
		if (game.boss_fight_player_lives <= 0)
    c514:	91 11       	cpse	r25, r1
    c516:	03 c0       	rjmp	.+6      	; 0xc51e <update_turret_shot+0xc8>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    c518:	80 e1       	ldi	r24, 0x10	; 16
    c51a:	80 93 6c 0b 	sts	0x0B6C, r24
		}
		s->active = 0;
    c51e:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c520:	60 91 6d 0b 	lds	r22, 0x0B6D
    c524:	c8 01       	movw	r24, r16
		SFX_TANK_EXPLODE;
	}
}
    c526:	df 91       	pop	r29
    c528:	cf 91       	pop	r28
    c52a:	1f 91       	pop	r17
    c52c:	0f 91       	pop	r16
		if (game.boss_fight_player_lives <= 0)
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c52e:	0c 94 59 5a 	jmp	0xb4b2	; 0xb4b2 <kill_player>
		SFX_TANK_EXPLODE;
	}
}
    c532:	df 91       	pop	r29
    c534:	cf 91       	pop	r28
    c536:	1f 91       	pop	r17
    c538:	0f 91       	pop	r16
    c53a:	08 95       	ret

0000c53c <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    c53c:	10 92 69 0b 	sts	0x0B69, r1
	clear_sprites();
    c540:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else	
	Print(7, 13, (char*) str1Player);
    c544:	4c e0       	ldi	r20, 0x0C	; 12
    c546:	55 e0       	ldi	r21, 0x05	; 5
    c548:	6d e0       	ldi	r22, 0x0D	; 13
    c54a:	70 e0       	ldi	r23, 0x00	; 0
    c54c:	87 e0       	ldi	r24, 0x07	; 7
    c54e:	90 e0       	ldi	r25, 0x00	; 0
    c550:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(7, 14, (char*) str2Player);
    c554:	4b ef       	ldi	r20, 0xFB	; 251
    c556:	54 e0       	ldi	r21, 0x04	; 4
    c558:	6e e0       	ldi	r22, 0x0E	; 14
    c55a:	70 e0       	ldi	r23, 0x00	; 0
    c55c:	87 e0       	ldi	r24, 0x07	; 7
    c55e:	90 e0       	ldi	r25, 0x00	; 0
    c560:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	if (wifi_status == WIFI_OK) {
    c564:	80 91 9a 0b 	lds	r24, 0x0B9A
    c568:	81 11       	cpse	r24, r1
    c56a:	10 c0       	rjmp	.+32     	; 0xc58c <load_splash+0x50>
		Print(7, 15, (char*) strHostNetGame);
    c56c:	4d ee       	ldi	r20, 0xED	; 237
    c56e:	54 e0       	ldi	r21, 0x04	; 4
    c570:	6f e0       	ldi	r22, 0x0F	; 15
    c572:	70 e0       	ldi	r23, 0x00	; 0
    c574:	87 e0       	ldi	r24, 0x07	; 7
    c576:	90 e0       	ldi	r25, 0x00	; 0
    c578:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
		Print(7, 16, (char*) strJoinNetGame);
    c57c:	4f ed       	ldi	r20, 0xDF	; 223
    c57e:	54 e0       	ldi	r21, 0x04	; 4
    c580:	60 e1       	ldi	r22, 0x10	; 16
    c582:	70 e0       	ldi	r23, 0x00	; 0
    c584:	87 e0       	ldi	r24, 0x07	; 7
    c586:	90 e0       	ldi	r25, 0x00	; 0
    c588:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	}
	Print(7, 17, (char*) strHighscores);
    c58c:	4b e7       	ldi	r20, 0x7B	; 123
    c58e:	54 e0       	ldi	r21, 0x04	; 4
    c590:	61 e1       	ldi	r22, 0x11	; 17
    c592:	70 e0       	ldi	r23, 0x00	; 0
    c594:	87 e0       	ldi	r24, 0x07	; 7
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(5, 26, (char*) strCopyright);
    c59c:	45 e8       	ldi	r20, 0x85	; 133
    c59e:	54 e0       	ldi	r21, 0x04	; 4
    c5a0:	6a e1       	ldi	r22, 0x1A	; 26
    c5a2:	70 e0       	ldi	r23, 0x00	; 0
    c5a4:	85 e0       	ldi	r24, 0x05	; 5
    c5a6:	90 e0       	ldi	r25, 0x00	; 0
    c5a8:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    c5ac:	40 e0       	ldi	r20, 0x00	; 0
    c5ae:	69 e7       	ldi	r22, 0x79	; 121
    c5b0:	7e e3       	ldi	r23, 0x3E	; 62
    c5b2:	80 e0       	ldi	r24, 0x00	; 0
    c5b4:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    c5b8:	4c e2       	ldi	r20, 0x2C	; 44
    c5ba:	58 e7       	ldi	r21, 0x78	; 120
    c5bc:	65 e0       	ldi	r22, 0x05	; 5
    c5be:	84 e0       	ldi	r24, 0x04	; 4
    c5c0:	0c 94 ec 4e 	jmp	0x9dd8	; 0x9dd8 <DrawMap>

0000c5c4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    c5c4:	fc 01       	movw	r30, r24
    c5c6:	20 81       	ld	r18, Z
    c5c8:	31 81       	ldd	r19, Z+1	; 0x01
    c5ca:	28 70       	andi	r18, 0x08	; 8
    c5cc:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c5ce:	81 e0       	ldi	r24, 0x01	; 1
    c5d0:	23 2b       	or	r18, r19
    c5d2:	09 f4       	brne	.+2      	; 0xc5d6 <select_pressed+0x12>
    c5d4:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    c5d6:	08 95       	ret

0000c5d8 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    c5d8:	ff 92       	push	r15
    c5da:	0f 93       	push	r16
    c5dc:	1f 93       	push	r17
    c5de:	cf 93       	push	r28
    c5e0:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    c5e2:	81 e0       	ldi	r24, 0x01	; 1
    c5e4:	80 93 69 0b 	sts	0x0B69, r24
	clear_sprites();
    c5e8:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    c5ec:	49 ef       	ldi	r20, 0xF9	; 249
    c5ee:	57 e7       	ldi	r21, 0x77	; 119
    c5f0:	61 e0       	ldi	r22, 0x01	; 1
    c5f2:	87 e0       	ldi	r24, 0x07	; 7
    c5f4:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    c5f8:	43 ef       	ldi	r20, 0xF3	; 243
    c5fa:	57 e7       	ldi	r21, 0x77	; 119
    c5fc:	61 e0       	ldi	r22, 0x01	; 1
    c5fe:	84 e1       	ldi	r24, 0x14	; 20
    c600:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    c604:	4b e7       	ldi	r20, 0x7B	; 123
    c606:	54 e0       	ldi	r21, 0x04	; 4
    c608:	62 e0       	ldi	r22, 0x02	; 2
    c60a:	70 e0       	ldi	r23, 0x00	; 0
    c60c:	8a e0       	ldi	r24, 0x0A	; 10
    c60e:	90 e0       	ldi	r25, 0x00	; 0
    c610:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    c614:	08 e2       	ldi	r16, 0x28	; 40
    c616:	1b e0       	ldi	r17, 0x0B	; 11
    c618:	c7 e0       	ldi	r28, 0x07	; 7
    c61a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    c61c:	ff 24       	eor	r15, r15
    c61e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    c620:	20 e0       	ldi	r18, 0x00	; 0
    c622:	4f 2d       	mov	r20, r15
    c624:	be 01       	movw	r22, r28
    c626:	82 e0       	ldi	r24, 0x02	; 2
    c628:	90 e0       	ldi	r25, 0x00	; 0
    c62a:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
		PrintChar(3, y, '.');
    c62e:	4e e2       	ldi	r20, 0x2E	; 46
    c630:	be 01       	movw	r22, r28
    c632:	83 e0       	ldi	r24, 0x03	; 3
    c634:	90 e0       	ldi	r25, 0x00	; 0
    c636:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
    c63a:	f8 01       	movw	r30, r16
    c63c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    c63e:	80 81       	ld	r24, Z
    c640:	93 e0       	ldi	r25, 0x03	; 3
    c642:	89 9f       	mul	r24, r25
    c644:	a0 01       	movw	r20, r0
    c646:	11 24       	eor	r1, r1
    c648:	45 5b       	subi	r20, 0xB5	; 181
    c64a:	54 4f       	sbci	r21, 0xF4	; 244
    c64c:	23 e0       	ldi	r18, 0x03	; 3
    c64e:	6c 2f       	mov	r22, r28
    c650:	85 e0       	ldi	r24, 0x05	; 5
    c652:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
		Print(9, y, (char*) strOwns);
    c656:	47 e4       	ldi	r20, 0x47	; 71
    c658:	54 e0       	ldi	r21, 0x04	; 4
    c65a:	be 01       	movw	r22, r28
    c65c:	89 e0       	ldi	r24, 0x09	; 9
    c65e:	90 e0       	ldi	r25, 0x00	; 0
    c660:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    c664:	f8 01       	movw	r30, r16
    c666:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    c668:	80 81       	ld	r24, Z
    c66a:	e3 e0       	ldi	r30, 0x03	; 3
    c66c:	8e 9f       	mul	r24, r30
    c66e:	a0 01       	movw	r20, r0
    c670:	11 24       	eor	r1, r1
    c672:	45 5b       	subi	r20, 0xB5	; 181
    c674:	54 4f       	sbci	r21, 0xF4	; 244
    c676:	23 e0       	ldi	r18, 0x03	; 3
    c678:	6c 2f       	mov	r22, r28
    c67a:	8e e0       	ldi	r24, 0x0E	; 14
    c67c:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
		Print(18, y, (char*) strBy);
    c680:	44 e4       	ldi	r20, 0x44	; 68
    c682:	54 e0       	ldi	r21, 0x04	; 4
    c684:	be 01       	movw	r22, r28
    c686:	82 e1       	ldi	r24, 0x12	; 18
    c688:	90 e0       	ldi	r25, 0x00	; 0
    c68a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    c68e:	21 e0       	ldi	r18, 0x01	; 1
    c690:	f8 01       	movw	r30, r16
    c692:	32 97       	sbiw	r30, 0x02	; 2
    c694:	40 81       	ld	r20, Z
    c696:	be 01       	movw	r22, r28
    c698:	87 e1       	ldi	r24, 0x17	; 23
    c69a:	90 e0       	ldi	r25, 0x00	; 0
    c69c:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
		PrintChar(24, y, '-');
    c6a0:	4d e2       	ldi	r20, 0x2D	; 45
    c6a2:	be 01       	movw	r22, r28
    c6a4:	88 e1       	ldi	r24, 0x18	; 24
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    c6ac:	21 e0       	ldi	r18, 0x01	; 1
    c6ae:	f8 01       	movw	r30, r16
    c6b0:	31 97       	sbiw	r30, 0x01	; 1
    c6b2:	40 81       	ld	r20, Z
    c6b4:	be 01       	movw	r22, r28
    c6b6:	8b e1       	ldi	r24, 0x1B	; 27
    c6b8:	90 e0       	ldi	r25, 0x00	; 0
    c6ba:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <PrintByte>
		if (scores.data[i+4])
    c6be:	f8 01       	movw	r30, r16
    c6c0:	80 81       	ld	r24, Z
    c6c2:	88 23       	and	r24, r24
    c6c4:	11 f0       	breq	.+4      	; 0xc6ca <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    c6c6:	4a e2       	ldi	r20, 0x2A	; 42
    c6c8:	01 c0       	rjmp	.+2      	; 0xc6cc <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    c6ca:	40 e2       	ldi	r20, 0x20	; 32
    c6cc:	be 01       	movw	r22, r28
    c6ce:	8d e1       	ldi	r24, 0x1D	; 29
    c6d0:	90 e0       	ldi	r25, 0x00	; 0
    c6d2:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
		y += 3;
		rank += 1;
    c6d6:	f3 94       	inc	r15
    c6d8:	23 96       	adiw	r28, 0x03	; 3
    c6da:	0b 5f       	subi	r16, 0xFB	; 251
    c6dc:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    c6de:	f6 e0       	ldi	r31, 0x06	; 6
    c6e0:	ff 12       	cpse	r15, r31
    c6e2:	9e cf       	rjmp	.-196    	; 0xc620 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    c6e4:	44 eb       	ldi	r20, 0xB4	; 180
    c6e6:	54 e0       	ldi	r21, 0x04	; 4
    c6e8:	66 e1       	ldi	r22, 0x16	; 22
    c6ea:	70 e0       	ldi	r23, 0x00	; 0
    c6ec:	83 e0       	ldi	r24, 0x03	; 3
    c6ee:	90 e0       	ldi	r25, 0x00	; 0
    c6f0:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    c6f4:	49 ea       	ldi	r20, 0xA9	; 169
    c6f6:	54 e0       	ldi	r21, 0x04	; 4
    c6f8:	68 e1       	ldi	r22, 0x18	; 24
    c6fa:	70 e0       	ldi	r23, 0x00	; 0
    c6fc:	8a e0       	ldi	r24, 0x0A	; 10
    c6fe:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    c700:	df 91       	pop	r29
    c702:	cf 91       	pop	r28
    c704:	1f 91       	pop	r17
    c706:	0f 91       	pop	r16
    c708:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    c70a:	0c 94 6c 4f 	jmp	0x9ed8	; 0x9ed8 <Print>

0000c70e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    c70e:	0e 94 a4 54 	call	0xa948	; 0xa948 <save_score>
	fade_through();
    c712:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
	init_game_state();
    c716:	0e 94 24 54 	call	0xa848	; 0xa848 <init_game_state>
	load_tank_rank();
    c71a:	0c 94 ec 62 	jmp	0xc5d8	; 0xc5d8 <load_tank_rank>

0000c71e <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    c71e:	cf 92       	push	r12
    c720:	df 92       	push	r13
    c722:	ef 92       	push	r14
    c724:	ff 92       	push	r15
    c726:	0f 93       	push	r16
    c728:	1f 93       	push	r17
    c72a:	cf 93       	push	r28
    c72c:	df 93       	push	r29
    c72e:	00 d0       	rcall	.+0      	; 0xc730 <update_player+0x12>
    c730:	00 d0       	rcall	.+0      	; 0xc732 <update_player+0x14>
    c732:	cd b7       	in	r28, 0x3d	; 61
    c734:	de b7       	in	r29, 0x3e	; 62
    c736:	7c 01       	movw	r14, r24
    c738:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    c73a:	fb 01       	movw	r30, r22
    c73c:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    c73e:	81 89       	ldd	r24, Z+17	; 0x11
    c740:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    c742:	f7 01       	movw	r30, r14
    c744:	80 81       	ld	r24, Z
    c746:	83 ff       	sbrs	r24, 3
    c748:	0d c0       	rjmp	.+26     	; 0xc764 <update_player+0x46>
    c74a:	80 91 6c 0b 	lds	r24, 0x0B6C
    c74e:	81 11       	cpse	r24, r1
    c750:	09 c0       	rjmp	.+18     	; 0xc764 <update_player+0x46>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
		game.paused = game.paused ^ 1;
    c752:	90 91 6b 0b 	lds	r25, 0x0B6B
    c756:	81 e0       	ldi	r24, 0x01	; 1
    c758:	89 27       	eor	r24, r25
    c75a:	80 93 6b 0b 	sts	0x0B6B, r24
		load_level_tiles(false);
    c75e:	80 e0       	ldi	r24, 0x00	; 0
    c760:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    c764:	80 91 6b 0b 	lds	r24, 0x0B6B
    c768:	81 11       	cpse	r24, r1
    c76a:	91 c0       	rjmp	.+290    	; 0xc88e <update_player+0x170>
    c76c:	f6 01       	movw	r30, r12
    c76e:	85 89       	ldd	r24, Z+21	; 0x15
    c770:	80 fd       	sbrc	r24, 0
    c772:	8d c0       	rjmp	.+282    	; 0xc88e <update_player+0x170>
	{
		player->shared.speed = player->max_speed;
    c774:	87 89       	ldd	r24, Z+23	; 0x17
    c776:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    c778:	f7 01       	movw	r30, r14
    c77a:	84 81       	ldd	r24, Z+4	; 0x04
    c77c:	84 ff       	sbrs	r24, 4
    c77e:	10 c0       	rjmp	.+32     	; 0xc7a0 <update_player+0x82>
		{
			player->shared.direction = D_UP;
    c780:	f6 01       	movw	r30, r12
    c782:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    c784:	b6 01       	movw	r22, r12
    c786:	c6 01       	movw	r24, r12
    c788:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c78c:	9b 01       	movw	r18, r22
    c78e:	ac 01       	movw	r20, r24
    c790:	f6 01       	movw	r30, r12
    c792:	67 81       	ldd	r22, Z+7	; 0x07
    c794:	70 85       	ldd	r23, Z+8	; 0x08
    c796:	81 85       	ldd	r24, Z+9	; 0x09
    c798:	92 85       	ldd	r25, Z+10	; 0x0a
    c79a:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c79e:	25 c0       	rjmp	.+74     	; 0xc7ea <update_player+0xcc>
		}
		else if ((p->held & BTN_RIGHT))
    c7a0:	87 ff       	sbrs	r24, 7
    c7a2:	11 c0       	rjmp	.+34     	; 0xc7c6 <update_player+0xa8>
		{
			player->shared.direction = D_RIGHT;
    c7a4:	81 e0       	ldi	r24, 0x01	; 1
    c7a6:	f6 01       	movw	r30, r12
    c7a8:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    c7aa:	b6 01       	movw	r22, r12
    c7ac:	c6 01       	movw	r24, r12
    c7ae:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c7b2:	9b 01       	movw	r18, r22
    c7b4:	ac 01       	movw	r20, r24
    c7b6:	f6 01       	movw	r30, r12
    c7b8:	63 81       	ldd	r22, Z+3	; 0x03
    c7ba:	74 81       	ldd	r23, Z+4	; 0x04
    c7bc:	85 81       	ldd	r24, Z+5	; 0x05
    c7be:	96 81       	ldd	r25, Z+6	; 0x06
    c7c0:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c7c4:	2a c0       	rjmp	.+84     	; 0xc81a <update_player+0xfc>
		}
		else if ((p->held & BTN_DOWN))
    c7c6:	85 ff       	sbrs	r24, 5
    c7c8:	16 c0       	rjmp	.+44     	; 0xc7f6 <update_player+0xd8>
		{
			player->shared.direction = D_DOWN;
    c7ca:	82 e0       	ldi	r24, 0x02	; 2
    c7cc:	f6 01       	movw	r30, r12
    c7ce:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    c7d0:	b6 01       	movw	r22, r12
    c7d2:	c6 01       	movw	r24, r12
    c7d4:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c7d8:	9b 01       	movw	r18, r22
    c7da:	ac 01       	movw	r20, r24
    c7dc:	f6 01       	movw	r30, r12
    c7de:	67 81       	ldd	r22, Z+7	; 0x07
    c7e0:	70 85       	ldd	r23, Z+8	; 0x08
    c7e2:	81 85       	ldd	r24, Z+9	; 0x09
    c7e4:	92 85       	ldd	r25, Z+10	; 0x0a
    c7e6:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c7ea:	f6 01       	movw	r30, r12
    c7ec:	67 83       	std	Z+7, r22	; 0x07
    c7ee:	70 87       	std	Z+8, r23	; 0x08
    c7f0:	81 87       	std	Z+9, r24	; 0x09
    c7f2:	92 87       	std	Z+10, r25	; 0x0a
    c7f4:	1a c0       	rjmp	.+52     	; 0xc82a <update_player+0x10c>
		}
		else if ((p->held & BTN_LEFT))
    c7f6:	86 ff       	sbrs	r24, 6
    c7f8:	16 c0       	rjmp	.+44     	; 0xc826 <update_player+0x108>
		{
			player->shared.direction = D_LEFT;
    c7fa:	83 e0       	ldi	r24, 0x03	; 3
    c7fc:	f6 01       	movw	r30, r12
    c7fe:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    c800:	b6 01       	movw	r22, r12
    c802:	c6 01       	movw	r24, r12
    c804:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c808:	9b 01       	movw	r18, r22
    c80a:	ac 01       	movw	r20, r24
    c80c:	f6 01       	movw	r30, r12
    c80e:	63 81       	ldd	r22, Z+3	; 0x03
    c810:	74 81       	ldd	r23, Z+4	; 0x04
    c812:	85 81       	ldd	r24, Z+5	; 0x05
    c814:	96 81       	ldd	r25, Z+6	; 0x06
    c816:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c81a:	f6 01       	movw	r30, r12
    c81c:	63 83       	std	Z+3, r22	; 0x03
    c81e:	74 83       	std	Z+4, r23	; 0x04
    c820:	85 83       	std	Z+5, r24	; 0x05
    c822:	96 83       	std	Z+6, r25	; 0x06
    c824:	02 c0       	rjmp	.+4      	; 0xc82a <update_player+0x10c>
		}
		else
		{
			player->shared.speed = 0;
    c826:	f6 01       	movw	r30, r12
    c828:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    c82a:	c7 01       	movw	r24, r14
    c82c:	0e 94 1d 56 	call	0xac3a	; 0xac3a <shoot_pressed>
    c830:	88 23       	and	r24, r24
    c832:	69 f1       	breq	.+90     	; 0xc88e <update_player+0x170>
    c834:	f6 01       	movw	r30, r12
    c836:	81 89       	ldd	r24, Z+17	; 0x11
    c838:	81 11       	cpse	r24, r1
    c83a:	29 c0       	rjmp	.+82     	; 0xc88e <update_player+0x170>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    c83c:	83 ad       	ldd	r24, Z+59	; 0x3b
    c83e:	81 11       	cpse	r24, r1
    c840:	26 c0       	rjmp	.+76     	; 0xc88e <update_player+0x170>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    c842:	86 01       	movw	r16, r12
    c844:	03 5d       	subi	r16, 0xD3	; 211
    c846:	1f 4f       	sbci	r17, 0xFF	; 255
				if (!shot->active)
				{
					if (player->has_rocket)
    c848:	80 8d       	ldd	r24, Z+24	; 0x18
    c84a:	88 23       	and	r24, r24
    c84c:	31 f0       	breq	.+12     	; 0xc85a <update_player+0x13c>
					{
						init_shot_state(shot, ROCKET_SHOT);
    c84e:	61 e0       	ldi	r22, 0x01	; 1
    c850:	c8 01       	movw	r24, r16
    c852:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    c856:	61 e0       	ldi	r22, 0x01	; 1
    c858:	05 c0       	rjmp	.+10     	; 0xc864 <update_player+0x146>
						SFX_ROCKET;
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    c85a:	60 e0       	ldi	r22, 0x00	; 0
    c85c:	c8 01       	movw	r24, r16
    c85e:	0e 94 2a 53 	call	0xa654	; 0xa654 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    c862:	60 e0       	ldi	r22, 0x00	; 0
    c864:	c8 01       	movw	r24, r16
    c866:	0e 94 47 53 	call	0xa68e	; 0xa68e <set_shot_animations>
						SFX_CANNONBALL;
					}
					player->active_shots++;
    c86a:	f6 01       	movw	r30, r12
    c86c:	81 89       	ldd	r24, Z+17	; 0x11
    c86e:	8f 5f       	subi	r24, 0xFF	; 255
    c870:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    c872:	80 81       	ld	r24, Z
    c874:	85 a7       	std	Z+45, r24	; 0x2d
					position_shot(player, shot);
    c876:	b8 01       	movw	r22, r16
    c878:	c6 01       	movw	r24, r12
    c87a:	0e 94 14 55 	call	0xaa28	; 0xaa28 <position_shot>
					shot->active = 1;
    c87e:	81 e0       	ldi	r24, 0x01	; 1
    c880:	f6 01       	movw	r30, r12
    c882:	83 af       	std	Z+59, r24	; 0x3b
					if (player->has_over_speed)
    c884:	81 8d       	ldd	r24, Z+25	; 0x19
    c886:	88 23       	and	r24, r24
    c888:	11 f0       	breq	.+4      	; 0xc88e <update_player+0x170>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    c88a:	8a ea       	ldi	r24, 0xAA	; 170
    c88c:	86 a7       	std	Z+46, r24	; 0x2e
				}
			}
		}
	}
	
	if (!game.paused)
    c88e:	80 91 6b 0b 	lds	r24, 0x0B6B
    c892:	81 11       	cpse	r24, r1
    c894:	86 c0       	rjmp	.+268    	; 0xc9a2 <update_player+0x284>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    c896:	86 01       	movw	r16, r12
    c898:	03 5d       	subi	r16, 0xD3	; 211
    c89a:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    c89c:	f6 01       	movw	r30, r12
    c89e:	83 ad       	ldd	r24, Z+59	; 0x3b
    c8a0:	88 23       	and	r24, r24
    c8a2:	09 f4       	brne	.+2      	; 0xc8a6 <update_player+0x188>
    c8a4:	91 c0       	rjmp	.+290    	; 0xc9c8 <update_player+0x2aa>
			{
				switch (shot->shared.direction)
    c8a6:	85 a5       	ldd	r24, Z+45	; 0x2d
    c8a8:	81 30       	cpi	r24, 0x01	; 1
    c8aa:	11 f1       	breq	.+68     	; 0xc8f0 <update_player+0x1d2>
    c8ac:	98 f0       	brcs	.+38     	; 0xc8d4 <update_player+0x1b6>
    c8ae:	82 30       	cpi	r24, 0x02	; 2
    c8b0:	69 f1       	breq	.+90     	; 0xc90c <update_player+0x1ee>
    c8b2:	83 30       	cpi	r24, 0x03	; 3
    c8b4:	09 f0       	breq	.+2      	; 0xc8b8 <update_player+0x19a>
    c8b6:	42 c0       	rjmp	.+132    	; 0xc93c <update_player+0x21e>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c8b8:	b8 01       	movw	r22, r16
    c8ba:	c6 01       	movw	r24, r12
    c8bc:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c8c0:	9b 01       	movw	r18, r22
    c8c2:	ac 01       	movw	r20, r24
    c8c4:	f6 01       	movw	r30, r12
    c8c6:	60 a9       	ldd	r22, Z+48	; 0x30
    c8c8:	71 a9       	ldd	r23, Z+49	; 0x31
    c8ca:	82 a9       	ldd	r24, Z+50	; 0x32
    c8cc:	93 a9       	ldd	r25, Z+51	; 0x33
    c8ce:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c8d2:	2f c0       	rjmp	.+94     	; 0xc932 <update_player+0x214>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    c8d4:	b8 01       	movw	r22, r16
    c8d6:	c6 01       	movw	r24, r12
    c8d8:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c8dc:	9b 01       	movw	r18, r22
    c8de:	ac 01       	movw	r20, r24
    c8e0:	f6 01       	movw	r30, r12
    c8e2:	64 a9       	ldd	r22, Z+52	; 0x34
    c8e4:	75 a9       	ldd	r23, Z+53	; 0x35
    c8e6:	86 a9       	ldd	r24, Z+54	; 0x36
    c8e8:	97 a9       	ldd	r25, Z+55	; 0x37
    c8ea:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    c8ee:	1b c0       	rjmp	.+54     	; 0xc926 <update_player+0x208>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    c8f0:	b8 01       	movw	r22, r16
    c8f2:	c6 01       	movw	r24, r12
    c8f4:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c8f8:	9b 01       	movw	r18, r22
    c8fa:	ac 01       	movw	r20, r24
    c8fc:	f6 01       	movw	r30, r12
    c8fe:	60 a9       	ldd	r22, Z+48	; 0x30
    c900:	71 a9       	ldd	r23, Z+49	; 0x31
    c902:	82 a9       	ldd	r24, Z+50	; 0x32
    c904:	93 a9       	ldd	r25, Z+51	; 0x33
    c906:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c90a:	13 c0       	rjmp	.+38     	; 0xc932 <update_player+0x214>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    c90c:	b8 01       	movw	r22, r16
    c90e:	c6 01       	movw	r24, r12
    c910:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c914:	9b 01       	movw	r18, r22
    c916:	ac 01       	movw	r20, r24
    c918:	f6 01       	movw	r30, r12
    c91a:	64 a9       	ldd	r22, Z+52	; 0x34
    c91c:	75 a9       	ldd	r23, Z+53	; 0x35
    c91e:	86 a9       	ldd	r24, Z+54	; 0x36
    c920:	97 a9       	ldd	r25, Z+55	; 0x37
    c922:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c926:	f6 01       	movw	r30, r12
    c928:	64 ab       	std	Z+52, r22	; 0x34
    c92a:	75 ab       	std	Z+53, r23	; 0x35
    c92c:	86 ab       	std	Z+54, r24	; 0x36
    c92e:	97 ab       	std	Z+55, r25	; 0x37
    c930:	05 c0       	rjmp	.+10     	; 0xc93c <update_player+0x21e>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c932:	f6 01       	movw	r30, r12
    c934:	60 ab       	std	Z+48, r22	; 0x30
    c936:	71 ab       	std	Z+49, r23	; 0x31
    c938:	82 ab       	std	Z+50, r24	; 0x32
    c93a:	93 ab       	std	Z+51, r25	; 0x33
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    c93c:	f6 01       	movw	r30, r12
    c93e:	f4 ac       	ldd	r15, Z+60	; 0x3c
    c940:	f8 e0       	ldi	r31, 0x08	; 8
    c942:	ff 15       	cp	r31, r15
    c944:	38 f0       	brcs	.+14     	; 0xc954 <update_player+0x236>
    c946:	b8 01       	movw	r22, r16
    c948:	c6 01       	movw	r24, r12
    c94a:	0e 94 27 56 	call	0xac4e	; 0xac4e <get_delta>
    c94e:	9b 01       	movw	r18, r22
    c950:	ac 01       	movw	r20, r24
    c952:	03 c0       	rjmp	.+6      	; 0xc95a <update_player+0x23c>
    c954:	20 e0       	ldi	r18, 0x00	; 0
    c956:	30 e0       	ldi	r19, 0x00	; 0
    c958:	a9 01       	movw	r20, r18
    c95a:	6f 2d       	mov	r22, r15
    c95c:	70 e0       	ldi	r23, 0x00	; 0
    c95e:	80 e0       	ldi	r24, 0x00	; 0
    c960:	90 e0       	ldi	r25, 0x00	; 0
    c962:	29 83       	std	Y+1, r18	; 0x01
    c964:	3a 83       	std	Y+2, r19	; 0x02
    c966:	4b 83       	std	Y+3, r20	; 0x03
    c968:	5c 83       	std	Y+4, r21	; 0x04
    c96a:	0e 94 9e 71 	call	0xe33c	; 0xe33c <__floatsisf>
    c96e:	29 81       	ldd	r18, Y+1	; 0x01
    c970:	3a 81       	ldd	r19, Y+2	; 0x02
    c972:	4b 81       	ldd	r20, Y+3	; 0x03
    c974:	5c 81       	ldd	r21, Y+4	; 0x04
    c976:	0e 94 9b 70 	call	0xe136	; 0xe136 <__addsf3>
    c97a:	0e 94 70 71 	call	0xe2e0	; 0xe2e0 <__fixunssfsi>
    c97e:	f6 01       	movw	r30, r12
    c980:	64 af       	std	Z+60, r22	; 0x3c
				collision_detect_shot(player, shot);
    c982:	b8 01       	movw	r22, r16
    c984:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c986:	0f 90       	pop	r0
    c988:	0f 90       	pop	r0
    c98a:	0f 90       	pop	r0
    c98c:	0f 90       	pop	r0
    c98e:	df 91       	pop	r29
    c990:	cf 91       	pop	r28
    c992:	1f 91       	pop	r17
    c994:	0f 91       	pop	r16
    c996:	ff 90       	pop	r15
    c998:	ef 90       	pop	r14
    c99a:	df 90       	pop	r13
    c99c:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    c99e:	0c 94 32 5b 	jmp	0xb664	; 0xb664 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    c9a2:	f7 01       	movw	r30, r14
    c9a4:	80 81       	ld	r24, Z
    c9a6:	91 81       	ldd	r25, Z+1	; 0x01
    c9a8:	91 ff       	sbrs	r25, 1
    c9aa:	0e c0       	rjmp	.+28     	; 0xc9c8 <update_player+0x2aa>
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c9ac:	0f 90       	pop	r0
    c9ae:	0f 90       	pop	r0
    c9b0:	0f 90       	pop	r0
    c9b2:	0f 90       	pop	r0
    c9b4:	df 91       	pop	r29
    c9b6:	cf 91       	pop	r28
    c9b8:	1f 91       	pop	r17
    c9ba:	0f 91       	pop	r16
    c9bc:	ff 90       	pop	r15
    c9be:	ef 90       	pop	r14
    c9c0:	df 90       	pop	r13
    c9c2:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    c9c4:	0c 94 87 63 	jmp	0xc70e	; 0xc70e <exit_game>
		}
	}
}
    c9c8:	0f 90       	pop	r0
    c9ca:	0f 90       	pop	r0
    c9cc:	0f 90       	pop	r0
    c9ce:	0f 90       	pop	r0
    c9d0:	df 91       	pop	r29
    c9d2:	cf 91       	pop	r28
    c9d4:	1f 91       	pop	r17
    c9d6:	0f 91       	pop	r16
    c9d8:	ff 90       	pop	r15
    c9da:	ef 90       	pop	r14
    c9dc:	df 90       	pop	r13
    c9de:	cf 90       	pop	r12
    c9e0:	08 95       	ret

0000c9e2 <resolve_scoring>:

void resolve_scoring()
{
    c9e2:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    c9e4:	c0 91 6a 0b 	lds	r28, 0x0B6A
    c9e8:	80 91 ab 0b 	lds	r24, 0x0BAB
    c9ec:	ca 30       	cpi	r28, 0x0A	; 10
    c9ee:	80 f5       	brcc	.+96     	; 0xca50 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    c9f0:	8a 30       	cpi	r24, 0x0A	; 10
    c9f2:	70 f0       	brcs	.+28     	; 0xca10 <resolve_scoring+0x2e>
    c9f4:	80 91 1f 0f 	lds	r24, 0x0F1F
    c9f8:	80 fd       	sbrc	r24, 0
    c9fa:	0a c0       	rjmp	.+20     	; 0xca10 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    c9fc:	0e 94 f1 51 	call	0xa3e2	; 0xa3e2 <LBHideAllSprites>
			load_level_tiles(true);
    ca00:	81 e0       	ldi	r24, 0x01	; 1
    ca02:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <load_level_tiles>
			print_level_score(&player1, &player2);
    ca06:	6a e0       	ldi	r22, 0x0A	; 10
    ca08:	7f e0       	ldi	r23, 0x0F	; 15
    ca0a:	8b e9       	ldi	r24, 0x9B	; 155
    ca0c:	9b e0       	ldi	r25, 0x0B	; 11
    ca0e:	12 c0       	rjmp	.+36     	; 0xca34 <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    ca10:	80 91 1a 0f 	lds	r24, 0x0F1A
    ca14:	8a 30       	cpi	r24, 0x0A	; 10
    ca16:	08 f4       	brcc	.+2      	; 0xca1a <resolve_scoring+0x38>
    ca18:	a7 c0       	rjmp	.+334    	; 0xcb68 <resolve_scoring+0x186>
    ca1a:	80 91 b0 0b 	lds	r24, 0x0BB0
    ca1e:	80 fd       	sbrc	r24, 0
    ca20:	a3 c0       	rjmp	.+326    	; 0xcb68 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    ca22:	0e 94 f1 51 	call	0xa3e2	; 0xa3e2 <LBHideAllSprites>
			load_level_tiles(true);
    ca26:	81 e0       	ldi	r24, 0x01	; 1
    ca28:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <load_level_tiles>
			print_level_score(&player2, &player1);
    ca2c:	6b e9       	ldi	r22, 0x9B	; 155
    ca2e:	7b e0       	ldi	r23, 0x0B	; 11
    ca30:	8a e0       	ldi	r24, 0x0A	; 10
    ca32:	9f e0       	ldi	r25, 0x0F	; 15
    ca34:	0e 94 81 55 	call	0xab02	; 0xab02 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    ca38:	84 e0       	ldi	r24, 0x04	; 4
    ca3a:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <LBWaitSeconds>
			player1.level_score = 0;
    ca3e:	10 92 ab 0b 	sts	0x0BAB, r1
			player2.level_score = 0;
    ca42:	10 92 1a 0f 	sts	0x0F1A, r1
			level_transition(next_level);
    ca46:	81 e0       	ldi	r24, 0x01	; 1
    ca48:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    ca4a:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    ca4c:	0c 94 c8 60 	jmp	0xc190	; 0xc190 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    ca50:	8a 30       	cpi	r24, 0x0A	; 10
    ca52:	28 f4       	brcc	.+10     	; 0xca5e <resolve_scoring+0x7c>
    ca54:	80 91 1a 0f 	lds	r24, 0x0F1A
    ca58:	8a 30       	cpi	r24, 0x0A	; 10
    ca5a:	08 f4       	brcc	.+2      	; 0xca5e <resolve_scoring+0x7c>
    ca5c:	85 c0       	rjmp	.+266    	; 0xcb68 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    ca5e:	90 91 aa 0b 	lds	r25, 0x0BAA
    ca62:	80 91 19 0f 	lds	r24, 0x0F19
    ca66:	98 17       	cp	r25, r24
    ca68:	09 f4       	brne	.+2      	; 0xca6c <resolve_scoring+0x8a>
    ca6a:	7e c0       	rjmp	.+252    	; 0xcb68 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    ca6c:	20 91 6c 0b 	lds	r18, 0x0B6C
    ca70:	21 11       	cpse	r18, r1
    ca72:	46 c0       	rjmp	.+140    	; 0xcb00 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    ca74:	c1 e0       	ldi	r28, 0x01	; 1
    ca76:	c0 93 6c 0b 	sts	0x0B6C, r28
				if (player1.score > player2.score)
    ca7a:	89 17       	cp	r24, r25
    ca7c:	e8 f4       	brcc	.+58     	; 0xcab8 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    ca7e:	8b e9       	ldi	r24, 0x9B	; 155
    ca80:	9b e0       	ldi	r25, 0x0B	; 11
    ca82:	90 93 79 0b 	sts	0x0B79, r25
    ca86:	80 93 78 0b 	sts	0x0B78, r24
					game.boss_fight_joypad = &p1;
    ca8a:	84 e1       	ldi	r24, 0x14	; 20
    ca8c:	9c e0       	ldi	r25, 0x0C	; 12
    ca8e:	90 93 7b 0b 	sts	0x0B7B, r25
    ca92:	80 93 7a 0b 	sts	0x0B7A, r24
					game.boss_fight_player_hud = 0;
    ca96:	10 92 6d 0b 	sts	0x0B6D, r1
					kill_player(&player2, 15);
    ca9a:	6f e0       	ldi	r22, 0x0F	; 15
    ca9c:	8a e0       	ldi	r24, 0x0A	; 10
    ca9e:	9f e0       	ldi	r25, 0x0F	; 15
    caa0:	0e 94 59 5a 	call	0xb4b2	; 0xb4b2 <kill_player>
					player_spawn(&player2);
    caa4:	8a e0       	ldi	r24, 0x0A	; 10
    caa6:	9f e0       	ldi	r25, 0x0F	; 15
    caa8:	0e 94 4b 54 	call	0xa896	; 0xa896 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    caac:	80 91 1f 0f 	lds	r24, 0x0F1F
    cab0:	c8 27       	eor	r28, r24
    cab2:	c0 93 1f 0f 	sts	0x0F1F, r28
    cab6:	1d c0       	rjmp	.+58     	; 0xcaf2 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    cab8:	8a e0       	ldi	r24, 0x0A	; 10
    caba:	9f e0       	ldi	r25, 0x0F	; 15
    cabc:	90 93 79 0b 	sts	0x0B79, r25
    cac0:	80 93 78 0b 	sts	0x0B78, r24
					game.boss_fight_joypad = &p2;
    cac4:	82 e4       	ldi	r24, 0x42	; 66
    cac6:	9b e0       	ldi	r25, 0x0B	; 11
    cac8:	90 93 7b 0b 	sts	0x0B7B, r25
    cacc:	80 93 7a 0b 	sts	0x0B7A, r24
					game.boss_fight_player_hud = 15;
    cad0:	8f e0       	ldi	r24, 0x0F	; 15
    cad2:	80 93 6d 0b 	sts	0x0B6D, r24
					kill_player(&player1, 0);
    cad6:	60 e0       	ldi	r22, 0x00	; 0
    cad8:	8b e9       	ldi	r24, 0x9B	; 155
    cada:	9b e0       	ldi	r25, 0x0B	; 11
    cadc:	0e 94 59 5a 	call	0xb4b2	; 0xb4b2 <kill_player>
					player_spawn(&player1);
    cae0:	8b e9       	ldi	r24, 0x9B	; 155
    cae2:	9b e0       	ldi	r25, 0x0B	; 11
    cae4:	0e 94 4b 54 	call	0xa896	; 0xa896 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    cae8:	80 91 b0 0b 	lds	r24, 0x0BB0
    caec:	c8 27       	eor	r28, r24
    caee:	c0 93 b0 0b 	sts	0x0BB0, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    caf2:	85 ea       	ldi	r24, 0xA5	; 165
    caf4:	90 e0       	ldi	r25, 0x00	; 0
    caf6:	90 93 9e 0f 	sts	0x0F9E, r25
    cafa:	80 93 9d 0f 	sts	0x0F9D, r24
				return;
    cafe:	34 c0       	rjmp	.+104    	; 0xcb68 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    cb00:	0e 94 f1 51 	call	0xa3e2	; 0xa3e2 <LBHideAllSprites>
			load_level_tiles(true);
    cb04:	81 e0       	ldi	r24, 0x01	; 1
    cb06:	0e 94 9f 5f 	call	0xbf3e	; 0xbf3e <load_level_tiles>
			if (player1.level_score > player2.level_score)
    cb0a:	90 91 ab 0b 	lds	r25, 0x0BAB
    cb0e:	80 91 1a 0f 	lds	r24, 0x0F1A
    cb12:	89 17       	cp	r24, r25
    cb14:	28 f4       	brcc	.+10     	; 0xcb20 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    cb16:	6a e0       	ldi	r22, 0x0A	; 10
    cb18:	7f e0       	ldi	r23, 0x0F	; 15
    cb1a:	8b e9       	ldi	r24, 0x9B	; 155
    cb1c:	9b e0       	ldi	r25, 0x0B	; 11
    cb1e:	04 c0       	rjmp	.+8      	; 0xcb28 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    cb20:	6b e9       	ldi	r22, 0x9B	; 155
    cb22:	7b e0       	ldi	r23, 0x0B	; 11
    cb24:	8a e0       	ldi	r24, 0x0A	; 10
    cb26:	9f e0       	ldi	r25, 0x0F	; 15
    cb28:	0e 94 81 55 	call	0xab02	; 0xab02 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    cb2c:	84 e0       	ldi	r24, 0x04	; 4
    cb2e:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <LBWaitSeconds>
			player1.level_score = 0;
    cb32:	10 92 ab 0b 	sts	0x0BAB, r1
			player2.level_score = 0;
    cb36:	10 92 1a 0f 	sts	0x0F1A, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    cb3a:	90 91 aa 0b 	lds	r25, 0x0BAA
    cb3e:	80 91 19 0f 	lds	r24, 0x0F19
    cb42:	89 17       	cp	r24, r25
    cb44:	28 f4       	brcc	.+10     	; 0xcb50 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    cb46:	6a e0       	ldi	r22, 0x0A	; 10
    cb48:	7f e0       	ldi	r23, 0x0F	; 15
    cb4a:	8b e9       	ldi	r24, 0x9B	; 155
    cb4c:	9b e0       	ldi	r25, 0x0B	; 11
    cb4e:	04 c0       	rjmp	.+8      	; 0xcb58 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    cb50:	6b e9       	ldi	r22, 0x9B	; 155
    cb52:	7b e0       	ldi	r23, 0x0B	; 11
    cb54:	8a e0       	ldi	r24, 0x0A	; 10
    cb56:	9f e0       	ldi	r25, 0x0F	; 15
    cb58:	0e 94 c3 55 	call	0xab86	; 0xab86 <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    cb5c:	84 e0       	ldi	r24, 0x04	; 4
    cb5e:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <LBWaitSeconds>
			exit_game();
		}
	}
}
    cb62:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    cb64:	0c 94 87 63 	jmp	0xc70e	; 0xc70e <exit_game>
		}
	}
}
    cb68:	cf 91       	pop	r28
    cb6a:	08 95       	ret

0000cb6c <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    cb6c:	df 92       	push	r13
    cb6e:	ef 92       	push	r14
    cb70:	ff 92       	push	r15
    cb72:	0f 93       	push	r16
    cb74:	1f 93       	push	r17
    cb76:	cf 93       	push	r28
    cb78:	df 93       	push	r29
    cb7a:	8c 01       	movw	r16, r24
    cb7c:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    cb7e:	80 91 6b 0b 	lds	r24, 0x0B6B
    cb82:	88 23       	and	r24, r24
    cb84:	19 f1       	breq	.+70     	; 0xcbcc <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    cb86:	0e 94 f1 51 	call	0xa3e2	; 0xa3e2 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    cb8a:	42 e8       	ldi	r20, 0x82	; 130
    cb8c:	58 e7       	ldi	r21, 0x78	; 120
    cb8e:	6c e0       	ldi	r22, 0x0C	; 12
    cb90:	88 e0       	ldi	r24, 0x08	; 8
    cb92:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    cb96:	4a e1       	ldi	r20, 0x1A	; 26
    cb98:	54 e0       	ldi	r21, 0x04	; 4
    cb9a:	6d e0       	ldi	r22, 0x0D	; 13
    cb9c:	70 e0       	ldi	r23, 0x00	; 0
    cb9e:	8c e0       	ldi	r24, 0x0C	; 12
    cba0:	90 e0       	ldi	r25, 0x00	; 0
    cba2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
		Print(11, 14, (char*) strExit);
    cba6:	41 e2       	ldi	r20, 0x21	; 33
    cba8:	54 e0       	ldi	r21, 0x04	; 4
    cbaa:	6e e0       	ldi	r22, 0x0E	; 14
    cbac:	70 e0       	ldi	r23, 0x00	; 0
    cbae:	8b e0       	ldi	r24, 0x0B	; 11
    cbb0:	90 e0       	ldi	r25, 0x00	; 0
    cbb2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
		
		// Update
		update_player(p1, &player1);
    cbb6:	6b e9       	ldi	r22, 0x9B	; 155
    cbb8:	7b e0       	ldi	r23, 0x0B	; 11
    cbba:	c8 01       	movw	r24, r16
    cbbc:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
		update_player(p2, &player2);
    cbc0:	6a e0       	ldi	r22, 0x0A	; 10
    cbc2:	7f e0       	ldi	r23, 0x0F	; 15
    cbc4:	ce 01       	movw	r24, r28
    cbc6:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
    cbca:	c6 c1       	rjmp	.+908    	; 0xcf58 <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    cbcc:	90 91 6c 0b 	lds	r25, 0x0B6C
    cbd0:	91 30       	cpi	r25, 0x01	; 1
    cbd2:	19 f4       	brne	.+6      	; 0xcbda <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    cbd4:	0e 94 f8 60 	call	0xc1f0	; 0xc1f0 <render_boss_fight_scope_load>
    cbd8:	05 c0       	rjmp	.+10     	; 0xcbe4 <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    cbda:	92 30       	cpi	r25, 0x02	; 2
    cbdc:	09 f0       	breq	.+2      	; 0xcbe0 <update_level+0x74>
    cbde:	4e c0       	rjmp	.+156    	; 0xcc7c <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    cbe0:	0e 94 02 61 	call	0xc204	; 0xc204 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    cbe4:	60 e0       	ldi	r22, 0x00	; 0
    cbe6:	80 91 78 0b 	lds	r24, 0x0B78
    cbea:	90 91 79 0b 	lds	r25, 0x0B79
    cbee:	0e 94 25 57 	call	0xae4a	; 0xae4a <tank_map>
    cbf2:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    cbf4:	40 e0       	ldi	r20, 0x00	; 0
    cbf6:	65 eb       	ldi	r22, 0xB5	; 181
    cbf8:	7e e3       	ldi	r23, 0x3E	; 62
    cbfa:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		p1_shot_index = p2_index + 4;
    cbfe:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    cc00:	6c 2f       	mov	r22, r28
    cc02:	80 91 78 0b 	lds	r24, 0x0B78
    cc06:	90 91 79 0b 	lds	r25, 0x0B79
    cc0a:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
    cc0e:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    cc10:	40 e0       	ldi	r20, 0x00	; 0
    cc12:	6b eb       	ldi	r22, 0xBB	; 187
    cc14:	7e e3       	ldi	r23, 0x3E	; 62
    cc16:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    cc1a:	6c 2f       	mov	r22, r28
    cc1c:	80 91 78 0b 	lds	r24, 0x0B78
    cc20:	90 91 79 0b 	lds	r25, 0x0B79
    cc24:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
		render_player(game.boss_fight_player, p1_index);
    cc28:	60 e0       	ldi	r22, 0x00	; 0
    cc2a:	80 91 78 0b 	lds	r24, 0x0B78
    cc2e:	90 91 79 0b 	lds	r25, 0x0B79
    cc32:	0e 94 81 56 	call	0xad02	; 0xad02 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    cc36:	6c 2f       	mov	r22, r28
    cc38:	80 91 78 0b 	lds	r24, 0x0B78
    cc3c:	90 91 79 0b 	lds	r25, 0x0B79
    cc40:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_shot(&player2, p2_shot_index);
    cc44:	6d 2f       	mov	r22, r29
    cc46:	8a e0       	ldi	r24, 0x0A	; 10
    cc48:	9f e0       	ldi	r25, 0x0F	; 15
    cc4a:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_tile_explosions(&tile_animations);
    cc4e:	8d e7       	ldi	r24, 0x7D	; 125
    cc50:	9b e0       	ldi	r25, 0x0B	; 11
    cc52:	0e 94 d6 56 	call	0xadac	; 0xadac <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    cc56:	60 91 78 0b 	lds	r22, 0x0B78
    cc5a:	70 91 79 0b 	lds	r23, 0x0B79
    cc5e:	80 91 7a 0b 	lds	r24, 0x0B7A
    cc62:	90 91 7b 0b 	lds	r25, 0x0B7B
    cc66:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    cc6a:	60 91 6d 0b 	lds	r22, 0x0B6D
    cc6e:	80 91 78 0b 	lds	r24, 0x0B78
    cc72:	90 91 79 0b 	lds	r25, 0x0B79
    cc76:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <collision_detect_player>
    cc7a:	6e c1       	rjmp	.+732    	; 0xcf58 <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cc7c:	94 30       	cpi	r25, 0x04	; 4
    cc7e:	09 f0       	breq	.+2      	; 0xcc82 <update_level+0x116>
    cc80:	94 c0       	rjmp	.+296    	; 0xcdaa <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    cc82:	80 91 ee 0f 	lds	r24, 0x0FEE
    cc86:	81 11       	cpse	r24, r1
    cc88:	07 c0       	rjmp	.+14     	; 0xcc98 <update_level+0x12c>
    cc8a:	80 91 ba 0f 	lds	r24, 0x0FBA
    cc8e:	81 11       	cpse	r24, r1
    cc90:	03 c0       	rjmp	.+6      	; 0xcc98 <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    cc92:	80 e2       	ldi	r24, 0x20	; 32
    cc94:	80 93 6c 0b 	sts	0x0B6C, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    cc98:	60 e0       	ldi	r22, 0x00	; 0
    cc9a:	80 91 78 0b 	lds	r24, 0x0B78
    cc9e:	90 91 79 0b 	lds	r25, 0x0B79
    cca2:	0e 94 25 57 	call	0xae4a	; 0xae4a <tank_map>
    cca6:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    cca8:	68 2f       	mov	r22, r24
    ccaa:	80 91 78 0b 	lds	r24, 0x0B78
    ccae:	90 91 79 0b 	lds	r25, 0x0B79
    ccb2:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
    ccb6:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    ccb8:	01 e0       	ldi	r16, 0x01	; 1
    ccba:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    ccbc:	12 e0       	ldi	r17, 0x02	; 2
    ccbe:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    ccc0:	d3 e0       	ldi	r29, 0x03	; 3
    ccc2:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ccc4:	80 91 ee 0f 	lds	r24, 0x0FEE
    ccc8:	88 23       	and	r24, r24
    ccca:	19 f0       	breq	.+6      	; 0xccd2 <update_level+0x166>
	return (char*) map_sub_turret;
    cccc:	6d e6       	ldi	r22, 0x6D	; 109
    ccce:	7e e3       	ldi	r23, 0x3E	; 62
    ccd0:	02 c0       	rjmp	.+4      	; 0xccd6 <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ccd2:	6b eb       	ldi	r22, 0xBB	; 187
    ccd4:	7e e3       	ldi	r23, 0x3E	; 62
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    ccd6:	40 e0       	ldi	r20, 0x00	; 0
    ccd8:	8c 2f       	mov	r24, r28
    ccda:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ccde:	80 91 ee 0f 	lds	r24, 0x0FEE
    cce2:	88 23       	and	r24, r24
    cce4:	19 f0       	breq	.+6      	; 0xccec <update_level+0x180>
	return (char*) map_sub_shot;
    cce6:	60 e7       	ldi	r22, 0x70	; 112
    cce8:	7e e3       	ldi	r23, 0x3E	; 62
    ccea:	02 c0       	rjmp	.+4      	; 0xccf0 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ccec:	6b eb       	ldi	r22, 0xBB	; 187
    ccee:	7e e3       	ldi	r23, 0x3E	; 62
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    ccf0:	40 e0       	ldi	r20, 0x00	; 0
    ccf2:	80 2f       	mov	r24, r16
    ccf4:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    ccf8:	80 91 ba 0f 	lds	r24, 0x0FBA
    ccfc:	88 23       	and	r24, r24
    ccfe:	19 f0       	breq	.+6      	; 0xcd06 <update_level+0x19a>
	return (char*) map_sub_turret;
    cd00:	6d e6       	ldi	r22, 0x6D	; 109
    cd02:	7e e3       	ldi	r23, 0x3E	; 62
    cd04:	02 c0       	rjmp	.+4      	; 0xcd0a <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cd06:	6b eb       	ldi	r22, 0xBB	; 187
    cd08:	7e e3       	ldi	r23, 0x3E	; 62
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    cd0a:	40 e0       	ldi	r20, 0x00	; 0
    cd0c:	81 2f       	mov	r24, r17
    cd0e:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cd12:	80 91 ba 0f 	lds	r24, 0x0FBA
    cd16:	88 23       	and	r24, r24
    cd18:	19 f0       	breq	.+6      	; 0xcd20 <update_level+0x1b4>
	return (char*) map_sub_shot;
    cd1a:	60 e7       	ldi	r22, 0x70	; 112
    cd1c:	7e e3       	ldi	r23, 0x3E	; 62
    cd1e:	02 c0       	rjmp	.+4      	; 0xcd24 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cd20:	6b eb       	ldi	r22, 0xBB	; 187
    cd22:	7e e3       	ldi	r23, 0x3E	; 62
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    cd24:	40 e0       	ldi	r20, 0x00	; 0
    cd26:	8d 2f       	mov	r24, r29
    cd28:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    cd2c:	60 e0       	ldi	r22, 0x00	; 0
    cd2e:	80 91 78 0b 	lds	r24, 0x0B78
    cd32:	90 91 79 0b 	lds	r25, 0x0B79
    cd36:	0e 94 81 56 	call	0xad02	; 0xad02 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    cd3a:	6f 2d       	mov	r22, r15
    cd3c:	80 91 78 0b 	lds	r24, 0x0B78
    cd40:	90 91 79 0b 	lds	r25, 0x0B79
    cd44:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_tile_explosions(&tile_animations);
    cd48:	8d e7       	ldi	r24, 0x7D	; 125
    cd4a:	9b e0       	ldi	r25, 0x0B	; 11
    cd4c:	0e 94 d6 56 	call	0xadac	; 0xadac <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    cd50:	6c 2f       	mov	r22, r28
    cd52:	83 ee       	ldi	r24, 0xE3	; 227
    cd54:	9f e0       	ldi	r25, 0x0F	; 15
    cd56:	0e 94 44 61 	call	0xc288	; 0xc288 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    cd5a:	60 2f       	mov	r22, r16
    cd5c:	83 ee       	ldi	r24, 0xE3	; 227
    cd5e:	9f e0       	ldi	r25, 0x0F	; 15
    cd60:	0e 94 6d 61 	call	0xc2da	; 0xc2da <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    cd64:	61 2f       	mov	r22, r17
    cd66:	8f ea       	ldi	r24, 0xAF	; 175
    cd68:	9f e0       	ldi	r25, 0x0F	; 15
    cd6a:	0e 94 44 61 	call	0xc288	; 0xc288 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    cd6e:	6d 2f       	mov	r22, r29
    cd70:	8f ea       	ldi	r24, 0xAF	; 175
    cd72:	9f e0       	ldi	r25, 0x0F	; 15
    cd74:	0e 94 6d 61 	call	0xc2da	; 0xc2da <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    cd78:	40 e6       	ldi	r20, 0x60	; 96
    cd7a:	68 e2       	ldi	r22, 0x28	; 40
    cd7c:	83 ee       	ldi	r24, 0xE3	; 227
    cd7e:	9f e0       	ldi	r25, 0x0F	; 15
    cd80:	0e 94 96 61 	call	0xc32c	; 0xc32c <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    cd84:	40 ec       	ldi	r20, 0xC0	; 192
    cd86:	68 e8       	ldi	r22, 0x88	; 136
    cd88:	8f ea       	ldi	r24, 0xAF	; 175
    cd8a:	9f e0       	ldi	r25, 0x0F	; 15
    cd8c:	0e 94 96 61 	call	0xc32c	; 0xc32c <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    cd90:	6f ee       	ldi	r22, 0xEF	; 239
    cd92:	7f e0       	ldi	r23, 0x0F	; 15
    cd94:	83 ee       	ldi	r24, 0xE3	; 227
    cd96:	9f e0       	ldi	r25, 0x0F	; 15
    cd98:	0e 94 2b 62 	call	0xc456	; 0xc456 <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    cd9c:	6b eb       	ldi	r22, 0xBB	; 187
    cd9e:	7f e0       	ldi	r23, 0x0F	; 15
    cda0:	8f ea       	ldi	r24, 0xAF	; 175
    cda2:	9f e0       	ldi	r25, 0x0F	; 15
    cda4:	0e 94 2b 62 	call	0xc456	; 0xc456 <update_turret_shot>
    cda8:	56 cf       	rjmp	.-340    	; 0xcc56 <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    cdaa:	90 32       	cpi	r25, 0x20	; 32
    cdac:	09 f0       	breq	.+2      	; 0xcdb0 <update_level+0x244>
    cdae:	55 c0       	rjmp	.+170    	; 0xce5a <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    cdb0:	0e 94 2f 61 	call	0xc25e	; 0xc25e <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    cdb4:	60 e0       	ldi	r22, 0x00	; 0
    cdb6:	80 91 78 0b 	lds	r24, 0x0B78
    cdba:	90 91 79 0b 	lds	r25, 0x0B79
    cdbe:	0e 94 25 57 	call	0xae4a	; 0xae4a <tank_map>
    cdc2:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    cdc4:	40 e0       	ldi	r20, 0x00	; 0
    cdc6:	65 eb       	ldi	r22, 0xB5	; 181
    cdc8:	7e e3       	ldi	r23, 0x3E	; 62
    cdca:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		p1_shot_index = p2_index + 4;
    cdce:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    cdd0:	6c 2f       	mov	r22, r28
    cdd2:	80 91 78 0b 	lds	r24, 0x0B78
    cdd6:	90 91 79 0b 	lds	r25, 0x0B79
    cdda:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
    cdde:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    cde0:	40 e0       	ldi	r20, 0x00	; 0
    cde2:	6b eb       	ldi	r22, 0xBB	; 187
    cde4:	7e e3       	ldi	r23, 0x3E	; 62
    cde6:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    cdea:	6c 2f       	mov	r22, r28
    cdec:	80 91 78 0b 	lds	r24, 0x0B78
    cdf0:	90 91 79 0b 	lds	r25, 0x0B79
    cdf4:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
		render_player(game.boss_fight_player, p1_index);
    cdf8:	60 e0       	ldi	r22, 0x00	; 0
    cdfa:	80 91 78 0b 	lds	r24, 0x0B78
    cdfe:	90 91 79 0b 	lds	r25, 0x0B79
    ce02:	0e 94 81 56 	call	0xad02	; 0xad02 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    ce06:	6c 2f       	mov	r22, r28
    ce08:	80 91 78 0b 	lds	r24, 0x0B78
    ce0c:	90 91 79 0b 	lds	r25, 0x0B79
    ce10:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_shot(&player2, p2_shot_index);
    ce14:	6d 2f       	mov	r22, r29
    ce16:	8a e0       	ldi	r24, 0x0A	; 10
    ce18:	9f e0       	ldi	r25, 0x0F	; 15
    ce1a:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_tile_explosions(&tile_animations);
    ce1e:	8d e7       	ldi	r24, 0x7D	; 125
    ce20:	9b e0       	ldi	r25, 0x0B	; 11
    ce22:	0e 94 d6 56 	call	0xadac	; 0xadac <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    ce26:	60 91 78 0b 	lds	r22, 0x0B78
    ce2a:	70 91 79 0b 	lds	r23, 0x0B79
    ce2e:	80 91 7a 0b 	lds	r24, 0x0B7A
    ce32:	90 91 7b 0b 	lds	r25, 0x0B7B
    ce36:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    ce3a:	60 91 6d 0b 	lds	r22, 0x0B6D
    ce3e:	80 91 78 0b 	lds	r24, 0x0B78
    ce42:	90 91 79 0b 	lds	r25, 0x0B79
    ce46:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    ce4a:	80 91 6c 0b 	lds	r24, 0x0B6C
    ce4e:	80 32       	cpi	r24, 0x20	; 32
    ce50:	09 f4       	brne	.+2      	; 0xce54 <update_level+0x2e8>
    ce52:	82 c0       	rjmp	.+260    	; 0xcf58 <update_level+0x3ec>
		{
			resolve_scoring();
    ce54:	0e 94 f1 64 	call	0xc9e2	; 0xc9e2 <resolve_scoring>
    ce58:	7f c0       	rjmp	.+254    	; 0xcf58 <update_level+0x3ec>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    ce5a:	90 31       	cpi	r25, 0x10	; 16
    ce5c:	d9 f3       	breq	.-10     	; 0xce54 <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    ce5e:	91 11       	cpse	r25, r1
    ce60:	7b c0       	rjmp	.+246    	; 0xcf58 <update_level+0x3ec>
	{
		p2_index = tank_map(&player1, p1_index);
    ce62:	60 e0       	ldi	r22, 0x00	; 0
    ce64:	8b e9       	ldi	r24, 0x9B	; 155
    ce66:	9b e0       	ldi	r25, 0x0B	; 11
    ce68:	0e 94 25 57 	call	0xae4a	; 0xae4a <tank_map>
    ce6c:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    ce6e:	68 2f       	mov	r22, r24
    ce70:	8a e0       	ldi	r24, 0x0A	; 10
    ce72:	9f e0       	ldi	r25, 0x0F	; 15
    ce74:	0e 94 25 57 	call	0xae4a	; 0xae4a <tank_map>
    ce78:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    ce7a:	68 2f       	mov	r22, r24
    ce7c:	8b e9       	ldi	r24, 0x9B	; 155
    ce7e:	9b e0       	ldi	r25, 0x0B	; 11
    ce80:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
    ce84:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    ce86:	68 2f       	mov	r22, r24
    ce88:	8a e0       	ldi	r24, 0x0A	; 10
    ce8a:	9f e0       	ldi	r25, 0x0F	; 15
    ce8c:	0e 94 8e 57 	call	0xaf1c	; 0xaf1c <shot_map>
		render_player(&player1, p1_index);
    ce90:	60 e0       	ldi	r22, 0x00	; 0
    ce92:	8b e9       	ldi	r24, 0x9B	; 155
    ce94:	9b e0       	ldi	r25, 0x0B	; 11
    ce96:	0e 94 81 56 	call	0xad02	; 0xad02 <render_player>
		render_player(&player2, p2_index);
    ce9a:	6d 2d       	mov	r22, r13
    ce9c:	8a e0       	ldi	r24, 0x0A	; 10
    ce9e:	9f e0       	ldi	r25, 0x0F	; 15
    cea0:	0e 94 81 56 	call	0xad02	; 0xad02 <render_player>
		render_shot(&player1, p1_shot_index);
    cea4:	6e 2d       	mov	r22, r14
    cea6:	8b e9       	ldi	r24, 0x9B	; 155
    cea8:	9b e0       	ldi	r25, 0x0B	; 11
    ceaa:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_shot(&player2, p2_shot_index);
    ceae:	6f 2d       	mov	r22, r15
    ceb0:	8a e0       	ldi	r24, 0x0A	; 10
    ceb2:	9f e0       	ldi	r25, 0x0F	; 15
    ceb4:	0e 94 aa 56 	call	0xad54	; 0xad54 <render_shot>
		render_tile_explosions(&tile_animations);
    ceb8:	8d e7       	ldi	r24, 0x7D	; 125
    ceba:	9b e0       	ldi	r25, 0x0B	; 11
    cebc:	0e 94 d6 56 	call	0xadac	; 0xadac <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    cec0:	80 91 74 0b 	lds	r24, 0x0B74
    cec4:	90 91 75 0b 	lds	r25, 0x0B75
    cec8:	89 3e       	cpi	r24, 0xE9	; 233
    ceca:	93 40       	sbci	r25, 0x03	; 3
    cecc:	88 f0       	brcs	.+34     	; 0xcef0 <update_level+0x384>
    cece:	80 91 9d 0f 	lds	r24, 0x0F9D
    ced2:	90 91 9e 0f 	lds	r25, 0x0F9E
    ced6:	18 16       	cp	r1, r24
    ced8:	19 06       	cpc	r1, r25
    ceda:	54 f4       	brge	.+20     	; 0xcef0 <update_level+0x384>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    cedc:	81 e9       	ldi	r24, 0x91	; 145
    cede:	9f e0       	ldi	r25, 0x0F	; 15
    cee0:	0e 94 0b 57 	call	0xae16	; 0xae16 <render_scope>
    cee4:	88 23       	and	r24, r24
    cee6:	21 f0       	breq	.+8      	; 0xcef0 <update_level+0x384>
    cee8:	10 92 75 0b 	sts	0x0B75, r1
    ceec:	10 92 74 0b 	sts	0x0B74, r1
		}
		game.scope_counter++;
    cef0:	20 91 74 0b 	lds	r18, 0x0B74
    cef4:	30 91 75 0b 	lds	r19, 0x0B75
    cef8:	2f 5f       	subi	r18, 0xFF	; 255
    cefa:	3f 4f       	sbci	r19, 0xFF	; 255
    cefc:	30 93 75 0b 	sts	0x0B75, r19
    cf00:	20 93 74 0b 	sts	0x0B74, r18
		
		// Update
		update_player(p1, &player1);
    cf04:	6b e9       	ldi	r22, 0x9B	; 155
    cf06:	7b e0       	ldi	r23, 0x0B	; 11
    cf08:	c8 01       	movw	r24, r16
    cf0a:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
		update_player(p2, &player2);
    cf0e:	6a e0       	ldi	r22, 0x0A	; 10
    cf10:	7f e0       	ldi	r23, 0x0F	; 15
    cf12:	ce 01       	movw	r24, r28
    cf14:	0e 94 8f 63 	call	0xc71e	; 0xc71e <update_player>
		resolve_scoring();
    cf18:	0e 94 f1 64 	call	0xc9e2	; 0xc9e2 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    cf1c:	60 e0       	ldi	r22, 0x00	; 0
    cf1e:	8b e9       	ldi	r24, 0x9B	; 155
    cf20:	9b e0       	ldi	r25, 0x0B	; 11
    cf22:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <collision_detect_player>
    cf26:	88 23       	and	r24, r24
    cf28:	41 f0       	breq	.+16     	; 0xcf3a <update_level+0x3ce>
    cf2a:	2f e0       	ldi	r18, 0x0F	; 15
    cf2c:	40 e0       	ldi	r20, 0x00	; 0
    cf2e:	6a e0       	ldi	r22, 0x0A	; 10
    cf30:	7f e0       	ldi	r23, 0x0F	; 15
    cf32:	8b e9       	ldi	r24, 0x9B	; 155
    cf34:	9b e0       	ldi	r25, 0x0B	; 11
    cf36:	0e 94 41 5d 	call	0xba82	; 0xba82 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    cf3a:	6f e0       	ldi	r22, 0x0F	; 15
    cf3c:	8a e0       	ldi	r24, 0x0A	; 10
    cf3e:	9f e0       	ldi	r25, 0x0F	; 15
    cf40:	0e 94 1d 5e 	call	0xbc3a	; 0xbc3a <collision_detect_player>
    cf44:	88 23       	and	r24, r24
    cf46:	41 f0       	breq	.+16     	; 0xcf58 <update_level+0x3ec>
    cf48:	20 e0       	ldi	r18, 0x00	; 0
    cf4a:	4f e0       	ldi	r20, 0x0F	; 15
    cf4c:	6b e9       	ldi	r22, 0x9B	; 155
    cf4e:	7b e0       	ldi	r23, 0x0B	; 11
    cf50:	8a e0       	ldi	r24, 0x0A	; 10
    cf52:	9f e0       	ldi	r25, 0x0F	; 15
    cf54:	0e 94 41 5d 	call	0xba82	; 0xba82 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    cf58:	80 91 7c 0b 	lds	r24, 0x0B7C
    cf5c:	86 30       	cpi	r24, 0x06	; 6
    cf5e:	71 f5       	brne	.+92     	; 0xcfbc <update_level+0x450>
	{
		game.demo_counter++;
    cf60:	80 91 72 0b 	lds	r24, 0x0B72
    cf64:	90 91 73 0b 	lds	r25, 0x0B73
    cf68:	01 96       	adiw	r24, 0x01	; 1
    cf6a:	90 93 73 0b 	sts	0x0B73, r25
    cf6e:	80 93 72 0b 	sts	0x0B72, r24
		held = ReadJoypad(0);
    cf72:	80 e0       	ldi	r24, 0x00	; 0
    cf74:	0e 94 0b 41 	call	0x8216	; 0x8216 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cf78:	80 e0       	ldi	r24, 0x00	; 0
    cf7a:	0e 94 0b 41 	call	0x8216	; 0x8216 <ReadJoypad>
    cf7e:	89 2b       	or	r24, r25
    cf80:	89 f0       	breq	.+34     	; 0xcfa4 <update_level+0x438>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    cf82:	10 92 73 0b 	sts	0x0B73, r1
    cf86:	10 92 72 0b 	sts	0x0B72, r1
			fade_through();
    cf8a:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
			init_game_state();
    cf8e:	0e 94 24 54 	call	0xa848	; 0xa848 <init_game_state>
			load_splash();
#endif
		}
	}
}
    cf92:	df 91       	pop	r29
    cf94:	cf 91       	pop	r28
    cf96:	1f 91       	pop	r17
    cf98:	0f 91       	pop	r16
    cf9a:	ff 90       	pop	r15
    cf9c:	ef 90       	pop	r14
    cf9e:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    cfa0:	0c 94 9e 62 	jmp	0xc53c	; 0xc53c <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cfa4:	81 e0       	ldi	r24, 0x01	; 1
    cfa6:	0e 94 0b 41 	call	0x8216	; 0x8216 <ReadJoypad>
    cfaa:	89 2b       	or	r24, r25
    cfac:	51 f7       	brne	.-44     	; 0xcf82 <update_level+0x416>
    cfae:	80 91 72 0b 	lds	r24, 0x0B72
    cfb2:	90 91 73 0b 	lds	r25, 0x0B73
    cfb6:	88 30       	cpi	r24, 0x08	; 8
    cfb8:	97 40       	sbci	r25, 0x07	; 7
    cfba:	18 f7       	brcc	.-58     	; 0xcf82 <update_level+0x416>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    cfbc:	df 91       	pop	r29
    cfbe:	cf 91       	pop	r28
    cfc0:	1f 91       	pop	r17
    cfc2:	0f 91       	pop	r16
    cfc4:	ff 90       	pop	r15
    cfc6:	ef 90       	pop	r14
    cfc8:	df 90       	pop	r13
    cfca:	08 95       	ret

0000cfcc <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    cfcc:	cf 93       	push	r28
    cfce:	df 93       	push	r29
    cfd0:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    cfd2:	88 81       	ld	r24, Y
    cfd4:	99 81       	ldd	r25, Y+1	; 0x01
    cfd6:	91 ff       	sbrs	r25, 1
    cfd8:	08 c0       	rjmp	.+16     	; 0xcfea <update_tank_rank+0x1e>
	{
		game.tank_rank_counter = 0;
    cfda:	10 92 77 0b 	sts	0x0B77, r1
    cfde:	10 92 76 0b 	sts	0x0B76, r1
		SFX_NAVIGATE;
		fade_through();
    cfe2:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
		load_splash();
    cfe6:	0e 94 9e 62 	call	0xc53c	; 0xc53c <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    cfea:	8c 81       	ldd	r24, Y+4	; 0x04
    cfec:	9d 81       	ldd	r25, Y+5	; 0x05
    cfee:	92 ff       	sbrs	r25, 2
    cff0:	19 c0       	rjmp	.+50     	; 0xd024 <update_tank_rank+0x58>
    cff2:	8e 81       	ldd	r24, Y+6	; 0x06
    cff4:	8f 3f       	cpi	r24, 0xFF	; 255
    cff6:	b1 f4       	brne	.+44     	; 0xd024 <update_tank_rank+0x58>
	{
		game.tank_rank_counter = 0;
    cff8:	10 92 77 0b 	sts	0x0B77, r1
    cffc:	10 92 76 0b 	sts	0x0B76, r1
	    SFX_NAVIGATE;
	    init_scores(&scores);
    d000:	82 e2       	ldi	r24, 0x22	; 34
    d002:	9b e0       	ldi	r25, 0x0B	; 11
    d004:	0e 94 bf 52 	call	0xa57e	; 0xa57e <init_scores>
	    init_handles(&handles);
    d008:	89 e4       	ldi	r24, 0x49	; 73
    d00a:	9b e0       	ldi	r25, 0x0B	; 11
    d00c:	0e 94 cb 52 	call	0xa596	; 0xa596 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d010:	82 e2       	ldi	r24, 0x22	; 34
    d012:	9b e0       	ldi	r25, 0x0B	; 11
    d014:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <EepromWriteBlock>
    d018:	89 e4       	ldi	r24, 0x49	; 73
    d01a:	9b e0       	ldi	r25, 0x0B	; 11
    d01c:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d020:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    d024:	80 91 76 0b 	lds	r24, 0x0B76
    d028:	90 91 77 0b 	lds	r25, 0x0B77
    d02c:	85 38       	cpi	r24, 0x85	; 133
    d02e:	93 40       	sbci	r25, 0x03	; 3
    d030:	40 f0       	brcs	.+16     	; 0xd042 <update_tank_rank+0x76>
	{
		game.tank_rank_counter = 0;
    d032:	10 92 77 0b 	sts	0x0B77, r1
    d036:	10 92 76 0b 	sts	0x0B76, r1
		SFX_NAVIGATE;
		fade_through();
    d03a:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
		load_splash();
    d03e:	0e 94 9e 62 	call	0xc53c	; 0xc53c <load_splash>
	}
	game.tank_rank_counter++;
    d042:	80 91 76 0b 	lds	r24, 0x0B76
    d046:	90 91 77 0b 	lds	r25, 0x0B77
    d04a:	01 96       	adiw	r24, 0x01	; 1
    d04c:	90 93 77 0b 	sts	0x0B77, r25
    d050:	80 93 76 0b 	sts	0x0B76, r24
#endif
}
    d054:	df 91       	pop	r29
    d056:	cf 91       	pop	r28
    d058:	08 95       	ret

0000d05a <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d05a:	af 92       	push	r10
    d05c:	bf 92       	push	r11
    d05e:	cf 92       	push	r12
    d060:	df 92       	push	r13
    d062:	ef 92       	push	r14
    d064:	ff 92       	push	r15
    d066:	0f 93       	push	r16
    d068:	1f 93       	push	r17
    d06a:	cf 93       	push	r28
    d06c:	df 93       	push	r29
    d06e:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d070:	fb 01       	movw	r30, r22
    d072:	00 81       	ld	r16, Z
    d074:	11 81       	ldd	r17, Z+1	; 0x01
    d076:	68 01       	movw	r12, r16
    d078:	f0 e1       	ldi	r31, 0x10	; 16
    d07a:	cf 22       	and	r12, r31
    d07c:	dd 24       	eor	r13, r13
    d07e:	04 ff       	sbrs	r16, 4
    d080:	09 c0       	rjmp	.+18     	; 0xd094 <_handle_select_helper+0x3a>
    d082:	8d 81       	ldd	r24, Y+5	; 0x05
    d084:	81 11       	cpse	r24, r1
    d086:	06 c0       	rjmp	.+12     	; 0xd094 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    d088:	88 81       	ld	r24, Y
    d08a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d08c:	87 ff       	sbrs	r24, 7
    d08e:	10 c0       	rjmp	.+32     	; 0xd0b0 <_handle_select_helper+0x56>
    d090:	18 82       	st	Y, r1
    d092:	a3 c0       	rjmp	.+326    	; 0xd1da <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d094:	58 01       	movw	r10, r16
    d096:	20 e2       	ldi	r18, 0x20	; 32
    d098:	a2 22       	and	r10, r18
    d09a:	bb 24       	eor	r11, r11
    d09c:	05 ff       	sbrs	r16, 5
    d09e:	0a c0       	rjmp	.+20     	; 0xd0b4 <_handle_select_helper+0x5a>
    d0a0:	8d 81       	ldd	r24, Y+5	; 0x05
    d0a2:	81 11       	cpse	r24, r1
    d0a4:	07 c0       	rjmp	.+14     	; 0xd0b4 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    d0a6:	88 81       	ld	r24, Y
    d0a8:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d0aa:	89 30       	cpi	r24, 0x09	; 9
    d0ac:	0c f0       	brlt	.+2      	; 0xd0b0 <_handle_select_helper+0x56>
    d0ae:	88 e0       	ldi	r24, 0x08	; 8
    d0b0:	88 83       	st	Y, r24
    d0b2:	93 c0       	rjmp	.+294    	; 0xd1da <_handle_select_helper+0x180>
    d0b4:	7a 01       	movw	r14, r20
    d0b6:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    d0b8:	0e 94 e2 62 	call	0xc5c4	; 0xc5c4 <select_pressed>
    d0bc:	88 23       	and	r24, r24
    d0be:	d1 f0       	breq	.+52     	; 0xd0f4 <_handle_select_helper+0x9a>
    d0c0:	9d 81       	ldd	r25, Y+5	; 0x05
    d0c2:	91 11       	cpse	r25, r1
    d0c4:	17 c0       	rjmp	.+46     	; 0xd0f4 <_handle_select_helper+0x9a>
	{
		ps->select_state = EDITING;
    d0c6:	81 e0       	ldi	r24, 0x01	; 1
    d0c8:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d0ca:	69 91       	ld	r22, Y+
    d0cc:	83 e0       	ldi	r24, 0x03	; 3
    d0ce:	68 02       	muls	r22, r24
    d0d0:	b0 01       	movw	r22, r0
    d0d2:	11 24       	eor	r1, r1
    d0d4:	65 5b       	subi	r22, 0xB5	; 181
    d0d6:	74 4f       	sbci	r23, 0xF4	; 244
    d0d8:	43 e0       	ldi	r20, 0x03	; 3
    d0da:	ce 01       	movw	r24, r28
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
#endif
}
    d0dc:	df 91       	pop	r29
    d0de:	cf 91       	pop	r28
    d0e0:	1f 91       	pop	r17
    d0e2:	0f 91       	pop	r16
    d0e4:	ff 90       	pop	r15
    d0e6:	ef 90       	pop	r14
    d0e8:	df 90       	pop	r13
    d0ea:	cf 90       	pop	r12
    d0ec:	bf 90       	pop	r11
    d0ee:	af 90       	pop	r10
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d0f0:	0c 94 8a 50 	jmp	0xa114	; 0xa114 <LBCopyChars>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d0f4:	07 ff       	sbrs	r16, 7
    d0f6:	0a c0       	rjmp	.+20     	; 0xd10c <_handle_select_helper+0xb2>
    d0f8:	9d 81       	ldd	r25, Y+5	; 0x05
    d0fa:	91 30       	cpi	r25, 0x01	; 1
    d0fc:	39 f4       	brne	.+14     	; 0xd10c <_handle_select_helper+0xb2>
	{
		ps->char_index++;
    d0fe:	8c 81       	ldd	r24, Y+4	; 0x04
    d100:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d102:	83 30       	cpi	r24, 0x03	; 3
    d104:	0c f0       	brlt	.+2      	; 0xd108 <_handle_select_helper+0xae>
    d106:	82 e0       	ldi	r24, 0x02	; 2
    d108:	8c 83       	std	Y+4, r24	; 0x04
    d10a:	67 c0       	rjmp	.+206    	; 0xd1da <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d10c:	06 ff       	sbrs	r16, 6
    d10e:	09 c0       	rjmp	.+18     	; 0xd122 <_handle_select_helper+0xc8>
    d110:	9d 81       	ldd	r25, Y+5	; 0x05
    d112:	91 30       	cpi	r25, 0x01	; 1
    d114:	29 f5       	brne	.+74     	; 0xd160 <_handle_select_helper+0x106>
	{
		ps->char_index--;
    d116:	8c 81       	ldd	r24, Y+4	; 0x04
    d118:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d11a:	87 ff       	sbrs	r24, 7
    d11c:	f5 cf       	rjmp	.-22     	; 0xd108 <_handle_select_helper+0xae>
    d11e:	1c 82       	std	Y+4, r1	; 0x04
    d120:	5c c0       	rjmp	.+184    	; 0xd1da <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d122:	cd 28       	or	r12, r13
    d124:	61 f0       	breq	.+24     	; 0xd13e <_handle_select_helper+0xe4>
    d126:	8d 81       	ldd	r24, Y+5	; 0x05
    d128:	81 30       	cpi	r24, 0x01	; 1
    d12a:	e9 f5       	brne	.+122    	; 0xd1a6 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    d12c:	8c 81       	ldd	r24, Y+4	; 0x04
    d12e:	c8 0f       	add	r28, r24
    d130:	d1 1d       	adc	r29, r1
    d132:	99 81       	ldd	r25, Y+1	; 0x01
    d134:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d136:	91 34       	cpi	r25, 0x41	; 65
    d138:	70 f4       	brcc	.+28     	; 0xd156 <_handle_select_helper+0xfc>
    d13a:	81 e4       	ldi	r24, 0x41	; 65
    d13c:	0f c0       	rjmp	.+30     	; 0xd15c <_handle_select_helper+0x102>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d13e:	ab 28       	or	r10, r11
    d140:	89 f0       	breq	.+34     	; 0xd164 <_handle_select_helper+0x10a>
    d142:	8d 81       	ldd	r24, Y+5	; 0x05
    d144:	81 30       	cpi	r24, 0x01	; 1
    d146:	79 f5       	brne	.+94     	; 0xd1a6 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    d148:	8c 81       	ldd	r24, Y+4	; 0x04
    d14a:	c8 0f       	add	r28, r24
    d14c:	d1 1d       	adc	r29, r1
    d14e:	99 81       	ldd	r25, Y+1	; 0x01
    d150:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d152:	9b 35       	cpi	r25, 0x5B	; 91
    d154:	10 f4       	brcc	.+4      	; 0xd15a <_handle_select_helper+0x100>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d156:	99 83       	std	Y+1, r25	; 0x01
    d158:	40 c0       	rjmp	.+128    	; 0xd1da <_handle_select_helper+0x180>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d15a:	8a e5       	ldi	r24, 0x5A	; 90
    d15c:	89 83       	std	Y+1, r24	; 0x01
    d15e:	3d c0       	rjmp	.+122    	; 0xd1da <_handle_select_helper+0x180>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d160:	ab 28       	or	r10, r11
    d162:	09 f5       	brne	.+66     	; 0xd1a6 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    d164:	88 23       	and	r24, r24
    d166:	f9 f0       	breq	.+62     	; 0xd1a6 <_handle_select_helper+0x14c>
    d168:	8d 81       	ldd	r24, Y+5	; 0x05
    d16a:	81 30       	cpi	r24, 0x01	; 1
    d16c:	e1 f4       	brne	.+56     	; 0xd1a6 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    d16e:	fe 01       	movw	r30, r28
    d170:	81 91       	ld	r24, Z+
    d172:	8f 01       	movw	r16, r30
    d174:	f7 01       	movw	r30, r14
    d176:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    d178:	43 e0       	ldi	r20, 0x03	; 3
    d17a:	b8 01       	movw	r22, r16
    d17c:	c7 01       	movw	r24, r14
    d17e:	0c 96       	adiw	r24, 0x0c	; 12
    d180:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d184:	88 81       	ld	r24, Y
    d186:	f3 e0       	ldi	r31, 0x03	; 3
    d188:	8f 02       	muls	r24, r31
    d18a:	c0 01       	movw	r24, r0
    d18c:	11 24       	eor	r1, r1
    d18e:	43 e0       	ldi	r20, 0x03	; 3
    d190:	b8 01       	movw	r22, r16
    d192:	85 5b       	subi	r24, 0xB5	; 181
    d194:	94 4f       	sbci	r25, 0xF4	; 244
    d196:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d19a:	89 e4       	ldi	r24, 0x49	; 73
    d19c:	9b e0       	ldi	r25, 0x0B	; 11
    d19e:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d1a2:	82 e0       	ldi	r24, 0x02	; 2
    d1a4:	0a c0       	rjmp	.+20     	; 0xd1ba <_handle_select_helper+0x160>
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d1a6:	11 ff       	sbrs	r17, 1
    d1a8:	18 c0       	rjmp	.+48     	; 0xd1da <_handle_select_helper+0x180>
    d1aa:	8d 81       	ldd	r24, Y+5	; 0x05
    d1ac:	81 30       	cpi	r24, 0x01	; 1
    d1ae:	11 f4       	brne	.+4      	; 0xd1b4 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    d1b0:	1d 82       	std	Y+5, r1	; 0x05
    d1b2:	13 c0       	rjmp	.+38     	; 0xd1da <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d1b4:	82 30       	cpi	r24, 0x02	; 2
    d1b6:	19 f4       	brne	.+6      	; 0xd1be <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    d1b8:	81 e0       	ldi	r24, 0x01	; 1
    d1ba:	8d 83       	std	Y+5, r24	; 0x05
    d1bc:	0e c0       	rjmp	.+28     	; 0xd1da <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
    d1be:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
		load_splash();
	}
#endif
}
    d1c2:	df 91       	pop	r29
    d1c4:	cf 91       	pop	r28
    d1c6:	1f 91       	pop	r17
    d1c8:	0f 91       	pop	r16
    d1ca:	ff 90       	pop	r15
    d1cc:	ef 90       	pop	r14
    d1ce:	df 90       	pop	r13
    d1d0:	cf 90       	pop	r12
    d1d2:	bf 90       	pop	r11
    d1d4:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d1d6:	0c 94 9e 62 	jmp	0xc53c	; 0xc53c <load_splash>
	}
#endif
}
    d1da:	df 91       	pop	r29
    d1dc:	cf 91       	pop	r28
    d1de:	1f 91       	pop	r17
    d1e0:	0f 91       	pop	r16
    d1e2:	ff 90       	pop	r15
    d1e4:	ef 90       	pop	r14
    d1e6:	df 90       	pop	r13
    d1e8:	cf 90       	pop	r12
    d1ea:	bf 90       	pop	r11
    d1ec:	af 90       	pop	r10
    d1ee:	08 95       	ret

0000d1f0 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d1f0:	af 92       	push	r10
    d1f2:	bf 92       	push	r11
    d1f4:	cf 92       	push	r12
    d1f6:	df 92       	push	r13
    d1f8:	ef 92       	push	r14
    d1fa:	ff 92       	push	r15
    d1fc:	0f 93       	push	r16
    d1fe:	1f 93       	push	r17
    d200:	cf 93       	push	r28
    d202:	df 93       	push	r29
    d204:	00 d0       	rcall	.+0      	; 0xd206 <_handle_select_render_helper+0x16>
    d206:	1f 92       	push	r1
    d208:	cd b7       	in	r28, 0x3d	; 61
    d20a:	de b7       	in	r29, 0x3e	; 62
    d20c:	7c 01       	movw	r14, r24
    d20e:	b4 2e       	mov	r11, r20
    d210:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d212:	80 e2       	ldi	r24, 0x20	; 32
    d214:	89 83       	std	Y+1, r24	; 0x01
    d216:	8a 83       	std	Y+2, r24	; 0x02
    d218:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d21a:	f7 01       	movw	r30, r14
    d21c:	85 81       	ldd	r24, Z+5	; 0x05
    d21e:	81 11       	cpse	r24, r1
    d220:	1d c0       	rjmp	.+58     	; 0xd25c <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d222:	40 e0       	ldi	r20, 0x00	; 0
    d224:	69 e7       	ldi	r22, 0x79	; 121
    d226:	7e e3       	ldi	r23, 0x3E	; 62
    d228:	82 2f       	mov	r24, r18
    d22a:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d22e:	40 e0       	ldi	r20, 0x00	; 0
    d230:	6b eb       	ldi	r22, 0xBB	; 187
    d232:	7e e3       	ldi	r23, 0x3E	; 62
    d234:	81 e0       	ldi	r24, 0x01	; 1
    d236:	81 0f       	add	r24, r17
    d238:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d23c:	f7 01       	movw	r30, r14
    d23e:	40 81       	ld	r20, Z
    d240:	44 0f       	add	r20, r20
    d242:	44 0f       	add	r20, r20
    d244:	44 0f       	add	r20, r20
    d246:	40 5c       	subi	r20, 0xC0	; 192
    d248:	01 e0       	ldi	r16, 0x01	; 1
    d24a:	21 e0       	ldi	r18, 0x01	; 1
    d24c:	6b 2d       	mov	r22, r11
    d24e:	66 0f       	add	r22, r22
    d250:	66 0f       	add	r22, r22
    d252:	66 0f       	add	r22, r22
    d254:	81 2f       	mov	r24, r17
    d256:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
    d25a:	6f c0       	rjmp	.+222    	; 0xd33a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d25c:	81 30       	cpi	r24, 0x01	; 1
    d25e:	09 f0       	breq	.+2      	; 0xd262 <_handle_select_render_helper+0x72>
    d260:	44 c0       	rjmp	.+136    	; 0xd2ea <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d262:	40 e0       	ldi	r20, 0x00	; 0
    d264:	66 e7       	ldi	r22, 0x76	; 118
    d266:	7e e3       	ldi	r23, 0x3E	; 62
    d268:	82 2f       	mov	r24, r18
    d26a:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d26e:	aa 24       	eor	r10, r10
    d270:	a3 94       	inc	r10
    d272:	a1 0e       	add	r10, r17
    d274:	40 e0       	ldi	r20, 0x00	; 0
    d276:	63 e7       	ldi	r22, 0x73	; 115
    d278:	7e e3       	ldi	r23, 0x3E	; 62
    d27a:	8a 2d       	mov	r24, r10
    d27c:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d280:	cb 2c       	mov	r12, r11
    d282:	d1 2c       	mov	r13, r1
    d284:	f5 e0       	ldi	r31, 0x05	; 5
    d286:	cf 0e       	add	r12, r31
    d288:	d1 1c       	adc	r13, r1
    d28a:	f7 01       	movw	r30, r14
    d28c:	40 81       	ld	r20, Z
    d28e:	44 0f       	add	r20, r20
    d290:	44 0f       	add	r20, r20
    d292:	44 0f       	add	r20, r20
    d294:	48 5c       	subi	r20, 0xC8	; 200
    d296:	84 81       	ldd	r24, Z+4	; 0x04
    d298:	b6 01       	movw	r22, r12
    d29a:	68 0f       	add	r22, r24
    d29c:	71 1d       	adc	r23, r1
    d29e:	87 fd       	sbrc	r24, 7
    d2a0:	7a 95       	dec	r23
    d2a2:	66 0f       	add	r22, r22
    d2a4:	66 0f       	add	r22, r22
    d2a6:	66 0f       	add	r22, r22
    d2a8:	01 e0       	ldi	r16, 0x01	; 1
    d2aa:	21 e0       	ldi	r18, 0x01	; 1
    d2ac:	81 2f       	mov	r24, r17
    d2ae:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d2b2:	f7 01       	movw	r30, r14
    d2b4:	40 81       	ld	r20, Z
    d2b6:	44 0f       	add	r20, r20
    d2b8:	44 0f       	add	r20, r20
    d2ba:	44 0f       	add	r20, r20
    d2bc:	48 5b       	subi	r20, 0xB8	; 184
    d2be:	84 81       	ldd	r24, Z+4	; 0x04
    d2c0:	c8 0e       	add	r12, r24
    d2c2:	d1 1c       	adc	r13, r1
    d2c4:	87 fd       	sbrc	r24, 7
    d2c6:	da 94       	dec	r13
    d2c8:	6c 2d       	mov	r22, r12
    d2ca:	66 0f       	add	r22, r22
    d2cc:	66 0f       	add	r22, r22
    d2ce:	66 0f       	add	r22, r22
    d2d0:	21 e0       	ldi	r18, 0x01	; 1
    d2d2:	8a 2d       	mov	r24, r10
    d2d4:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d2d8:	43 e0       	ldi	r20, 0x03	; 3
    d2da:	b7 01       	movw	r22, r14
    d2dc:	6f 5f       	subi	r22, 0xFF	; 255
    d2de:	7f 4f       	sbci	r23, 0xFF	; 255
    d2e0:	ce 01       	movw	r24, r28
    d2e2:	01 96       	adiw	r24, 0x01	; 1
    d2e4:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
    d2e8:	28 c0       	rjmp	.+80     	; 0xd33a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d2ea:	82 30       	cpi	r24, 0x02	; 2
    d2ec:	31 f5       	brne	.+76     	; 0xd33a <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d2ee:	c4 2e       	mov	r12, r20
    d2f0:	d1 2c       	mov	r13, r1
    d2f2:	48 e2       	ldi	r20, 0x28	; 40
    d2f4:	65 e0       	ldi	r22, 0x05	; 5
    d2f6:	70 e0       	ldi	r23, 0x00	; 0
    d2f8:	c6 01       	movw	r24, r12
    d2fa:	06 96       	adiw	r24, 0x06	; 6
    d2fc:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d300:	23 e0       	ldi	r18, 0x03	; 3
    d302:	a7 01       	movw	r20, r14
    d304:	4f 5f       	subi	r20, 0xFF	; 255
    d306:	5f 4f       	sbci	r21, 0xFF	; 255
    d308:	65 e0       	ldi	r22, 0x05	; 5
    d30a:	87 e0       	ldi	r24, 0x07	; 7
    d30c:	8b 0d       	add	r24, r11
    d30e:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d312:	49 e2       	ldi	r20, 0x29	; 41
    d314:	65 e0       	ldi	r22, 0x05	; 5
    d316:	70 e0       	ldi	r23, 0x00	; 0
    d318:	c6 01       	movw	r24, r12
    d31a:	0a 96       	adiw	r24, 0x0a	; 10
    d31c:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
		MapSprite2(idx, map_none, 0);
    d320:	40 e0       	ldi	r20, 0x00	; 0
    d322:	6b eb       	ldi	r22, 0xBB	; 187
    d324:	7e e3       	ldi	r23, 0x3E	; 62
    d326:	81 2f       	mov	r24, r17
    d328:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d32c:	40 e0       	ldi	r20, 0x00	; 0
    d32e:	6b eb       	ldi	r22, 0xBB	; 187
    d330:	7e e3       	ldi	r23, 0x3E	; 62
    d332:	81 e0       	ldi	r24, 0x01	; 1
    d334:	81 0f       	add	r24, r17
    d336:	0e 94 66 4e 	call	0x9ccc	; 0x9ccc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d33a:	f7 01       	movw	r30, r14
    d33c:	60 81       	ld	r22, Z
    d33e:	68 5f       	subi	r22, 0xF8	; 248
    d340:	23 e0       	ldi	r18, 0x03	; 3
    d342:	ae 01       	movw	r20, r28
    d344:	4f 5f       	subi	r20, 0xFF	; 255
    d346:	5f 4f       	sbci	r21, 0xFF	; 255
    d348:	85 e0       	ldi	r24, 0x05	; 5
    d34a:	8b 0d       	add	r24, r11
    d34c:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
}
    d350:	0f 90       	pop	r0
    d352:	0f 90       	pop	r0
    d354:	0f 90       	pop	r0
    d356:	df 91       	pop	r29
    d358:	cf 91       	pop	r28
    d35a:	1f 91       	pop	r17
    d35c:	0f 91       	pop	r16
    d35e:	ff 90       	pop	r15
    d360:	ef 90       	pop	r14
    d362:	df 90       	pop	r13
    d364:	cf 90       	pop	r12
    d366:	bf 90       	pop	r11
    d368:	af 90       	pop	r10
    d36a:	08 95       	ret

0000d36c <load_handle_select>:

void load_handle_select()
{
    d36c:	8f 92       	push	r8
    d36e:	9f 92       	push	r9
    d370:	af 92       	push	r10
    d372:	bf 92       	push	r11
    d374:	cf 92       	push	r12
    d376:	df 92       	push	r13
    d378:	ef 92       	push	r14
    d37a:	ff 92       	push	r15
    d37c:	0f 93       	push	r16
    d37e:	1f 93       	push	r17
    d380:	cf 93       	push	r28
    d382:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d384:	82 e0       	ldi	r24, 0x02	; 2
    d386:	80 93 69 0b 	sts	0x0B69, r24
	clear_sprites();
    d38a:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d38e:	49 ef       	ldi	r20, 0xF9	; 249
    d390:	57 e7       	ldi	r21, 0x77	; 119
    d392:	64 e0       	ldi	r22, 0x04	; 4
    d394:	83 e0       	ldi	r24, 0x03	; 3
    d396:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    d39a:	43 ef       	ldi	r20, 0xF3	; 243
    d39c:	57 e7       	ldi	r21, 0x77	; 119
    d39e:	64 e0       	ldi	r22, 0x04	; 4
    d3a0:	84 e1       	ldi	r24, 0x14	; 20
    d3a2:	0e 94 ec 4e 	call	0x9dd8	; 0x9dd8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    d3a6:	4f e6       	ldi	r20, 0x6F	; 111
    d3a8:	54 e0       	ldi	r21, 0x04	; 4
    d3aa:	61 e0       	ldi	r22, 0x01	; 1
    d3ac:	70 e0       	ldi	r23, 0x00	; 0
    d3ae:	89 e0       	ldi	r24, 0x09	; 9
    d3b0:	90 e0       	ldi	r25, 0x00	; 0
    d3b2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(6, 5, (char*) strPlayer1);
    d3b6:	4e e5       	ldi	r20, 0x5E	; 94
    d3b8:	54 e0       	ldi	r21, 0x04	; 4
    d3ba:	65 e0       	ldi	r22, 0x05	; 5
    d3bc:	70 e0       	ldi	r23, 0x00	; 0
    d3be:	86 e0       	ldi	r24, 0x06	; 6
    d3c0:	90 e0       	ldi	r25, 0x00	; 0
    d3c2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(23, 5, (char*) strPlayer2);
    d3c6:	4b e5       	ldi	r20, 0x5B	; 91
    d3c8:	54 e0       	ldi	r21, 0x04	; 4
    d3ca:	65 e0       	ldi	r22, 0x05	; 5
    d3cc:	70 e0       	ldi	r23, 0x00	; 0
    d3ce:	87 e1       	ldi	r24, 0x17	; 23
    d3d0:	90 e0       	ldi	r25, 0x00	; 0
    d3d2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
    d3d6:	8b e4       	ldi	r24, 0x4B	; 75
    d3d8:	e8 2e       	mov	r14, r24
    d3da:	8b e0       	ldi	r24, 0x0B	; 11
    d3dc:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d3de:	c0 e0       	ldi	r28, 0x00	; 0
    d3e0:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d3e2:	93 e0       	ldi	r25, 0x03	; 3
    d3e4:	a9 2e       	mov	r10, r25
    d3e6:	b1 2c       	mov	r11, r1
    d3e8:	67 01       	movw	r12, r14
    d3ea:	ce 01       	movw	r24, r28
    d3ec:	b5 01       	movw	r22, r10
    d3ee:	0e 94 86 70 	call	0xe10c	; 0xe10c <__divmodhi4>
    d3f2:	4c 01       	movw	r8, r24
    d3f4:	8b 01       	movw	r16, r22
    d3f6:	08 5f       	subi	r16, 0xF8	; 248
    d3f8:	1f 4f       	sbci	r17, 0xFF	; 255
    d3fa:	f7 01       	movw	r30, r14
    d3fc:	41 91       	ld	r20, Z+
    d3fe:	7f 01       	movw	r14, r30
    d400:	b8 01       	movw	r22, r16
    d402:	03 96       	adiw	r24, 0x03	; 3
    d404:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d408:	f6 01       	movw	r30, r12
    d40a:	40 81       	ld	r20, Z
    d40c:	b8 01       	movw	r22, r16
    d40e:	c4 01       	movw	r24, r8
    d410:	44 96       	adiw	r24, 0x14	; 20
    d412:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d416:	21 96       	adiw	r28, 0x01	; 1
    d418:	cb 31       	cpi	r28, 0x1B	; 27
    d41a:	d1 05       	cpc	r29, r1
    d41c:	29 f7       	brne	.-54     	; 0xd3e8 <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    d41e:	4a e9       	ldi	r20, 0x9A	; 154
    d420:	54 e0       	ldi	r21, 0x04	; 4
    d422:	65 e1       	ldi	r22, 0x15	; 21
    d424:	70 e0       	ldi	r23, 0x00	; 0
    d426:	85 e0       	ldi	r24, 0x05	; 5
    d428:	90 e0       	ldi	r25, 0x00	; 0
    d42a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    d42e:	4d ec       	ldi	r20, 0xCD	; 205
    d430:	54 e0       	ldi	r21, 0x04	; 4
    d432:	66 e1       	ldi	r22, 0x16	; 22
    d434:	70 e0       	ldi	r23, 0x00	; 0
    d436:	85 e0       	ldi	r24, 0x05	; 5
    d438:	90 e0       	ldi	r25, 0x00	; 0
    d43a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    d43e:	49 ea       	ldi	r20, 0xA9	; 169
    d440:	54 e0       	ldi	r21, 0x04	; 4
    d442:	67 e1       	ldi	r22, 0x17	; 23
    d444:	70 e0       	ldi	r23, 0x00	; 0
    d446:	85 e0       	ldi	r24, 0x05	; 5
    d448:	90 e0       	ldi	r25, 0x00	; 0
    d44a:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    d44e:	4c e4       	ldi	r20, 0x4C	; 76
    d450:	54 e0       	ldi	r21, 0x04	; 4
    d452:	68 e1       	ldi	r22, 0x18	; 24
    d454:	70 e0       	ldi	r23, 0x00	; 0
    d456:	85 e0       	ldi	r24, 0x05	; 5
    d458:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    d45a:	df 91       	pop	r29
    d45c:	cf 91       	pop	r28
    d45e:	1f 91       	pop	r17
    d460:	0f 91       	pop	r16
    d462:	ff 90       	pop	r15
    d464:	ef 90       	pop	r14
    d466:	df 90       	pop	r13
    d468:	cf 90       	pop	r12
    d46a:	bf 90       	pop	r11
    d46c:	af 90       	pop	r10
    d46e:	9f 90       	pop	r9
    d470:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    d472:	0c 94 6c 4f 	jmp	0x9ed8	; 0x9ed8 <Print>

0000d476 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    d476:	0f 93       	push	r16
    d478:	cf 93       	push	r28
    d47a:	df 93       	push	r29
    d47c:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    d47e:	90 91 7c 0b 	lds	r25, 0x0B7C
    d482:	92 30       	cpi	r25, 0x02	; 2
    d484:	a9 f0       	breq	.+42     	; 0xd4b0 <update_splash+0x3a>
    d486:	44 f4       	brge	.+16     	; 0xd498 <update_splash+0x22>
    d488:	99 23       	and	r25, r25
    d48a:	71 f0       	breq	.+28     	; 0xd4a8 <update_splash+0x32>
    d48c:	91 30       	cpi	r25, 0x01	; 1
    d48e:	d9 f4       	brne	.+54     	; 0xd4c6 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    d490:	01 e0       	ldi	r16, 0x01	; 1
    d492:	21 e0       	ldi	r18, 0x01	; 1
    d494:	40 e7       	ldi	r20, 0x70	; 112
    d496:	13 c0       	rjmp	.+38     	; 0xd4be <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    d498:	93 30       	cpi	r25, 0x03	; 3
    d49a:	71 f0       	breq	.+28     	; 0xd4b8 <update_splash+0x42>
    d49c:	94 30       	cpi	r25, 0x04	; 4
    d49e:	99 f4       	brne	.+38     	; 0xd4c6 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    d4a0:	01 e0       	ldi	r16, 0x01	; 1
    d4a2:	21 e0       	ldi	r18, 0x01	; 1
    d4a4:	48 e8       	ldi	r20, 0x88	; 136
    d4a6:	0b c0       	rjmp	.+22     	; 0xd4be <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    d4a8:	01 e0       	ldi	r16, 0x01	; 1
    d4aa:	21 e0       	ldi	r18, 0x01	; 1
    d4ac:	48 e6       	ldi	r20, 0x68	; 104
    d4ae:	07 c0       	rjmp	.+14     	; 0xd4be <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    d4b0:	01 e0       	ldi	r16, 0x01	; 1
    d4b2:	21 e0       	ldi	r18, 0x01	; 1
    d4b4:	48 e7       	ldi	r20, 0x78	; 120
    d4b6:	03 c0       	rjmp	.+6      	; 0xd4be <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    d4b8:	01 e0       	ldi	r16, 0x01	; 1
    d4ba:	21 e0       	ldi	r18, 0x01	; 1
    d4bc:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    d4be:	60 e3       	ldi	r22, 0x30	; 48
    d4c0:	80 e0       	ldi	r24, 0x00	; 0
    d4c2:	0e 94 b8 4e 	call	0x9d70	; 0x9d70 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    d4c6:	4a e9       	ldi	r20, 0x9A	; 154
    d4c8:	54 e0       	ldi	r21, 0x04	; 4
    d4ca:	65 e1       	ldi	r22, 0x15	; 21
    d4cc:	70 e0       	ldi	r23, 0x00	; 0
    d4ce:	86 e0       	ldi	r24, 0x06	; 6
    d4d0:	90 e0       	ldi	r25, 0x00	; 0
    d4d2:	0e 94 6c 4f 	call	0x9ed8	; 0x9ed8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    d4d6:	28 81       	ld	r18, Y
    d4d8:	39 81       	ldd	r19, Y+1	; 0x01
    d4da:	21 15       	cp	r18, r1
    d4dc:	31 05       	cpc	r19, r1
    d4de:	21 f0       	breq	.+8      	; 0xd4e8 <update_splash+0x72>
    d4e0:	10 92 73 0b 	sts	0x0B73, r1
    d4e4:	10 92 72 0b 	sts	0x0B72, r1
	
	if (p1->pressed & BTN_UP)
    d4e8:	24 ff       	sbrs	r18, 4
    d4ea:	16 c0       	rjmp	.+44     	; 0xd518 <update_splash+0xa2>
	{
		game.selection--;
    d4ec:	80 91 7c 0b 	lds	r24, 0x0B7C
    d4f0:	9f ef       	ldi	r25, 0xFF	; 255
    d4f2:	98 0f       	add	r25, r24
    d4f4:	90 93 7c 0b 	sts	0x0B7C, r25
		if (game.selection == JOINNETGAME && wifi_status != WIFI_OK) game.selection -= 2;
    d4f8:	93 30       	cpi	r25, 0x03	; 3
    d4fa:	39 f4       	brne	.+14     	; 0xd50a <update_splash+0x94>
    d4fc:	90 91 9a 0b 	lds	r25, 0x0B9A
    d500:	99 23       	and	r25, r25
    d502:	19 f0       	breq	.+6      	; 0xd50a <update_splash+0x94>
    d504:	83 50       	subi	r24, 0x03	; 3
    d506:	80 93 7c 0b 	sts	0x0B7C, r24
		if (game.selection < PVCPU) game.selection = PVCPU;
    d50a:	80 91 7c 0b 	lds	r24, 0x0B7C
    d50e:	87 ff       	sbrs	r24, 7
    d510:	88 c0       	rjmp	.+272    	; 0xd622 <update_splash+0x1ac>
    d512:	10 92 7c 0b 	sts	0x0B7C, r1
    d516:	85 c0       	rjmp	.+266    	; 0xd622 <update_splash+0x1ac>
		SFX_NAVIGATE;
	}
	else if (p1->pressed & BTN_DOWN)
    d518:	25 ff       	sbrs	r18, 5
    d51a:	18 c0       	rjmp	.+48     	; 0xd54c <update_splash+0xd6>
	{
		game.selection++;
    d51c:	80 91 7c 0b 	lds	r24, 0x0B7C
    d520:	91 e0       	ldi	r25, 0x01	; 1
    d522:	98 0f       	add	r25, r24
    d524:	90 93 7c 0b 	sts	0x0B7C, r25
		if (game.selection == HOSTNETGAME && wifi_status != WIFI_OK) game.selection += 2;
    d528:	92 30       	cpi	r25, 0x02	; 2
    d52a:	39 f4       	brne	.+14     	; 0xd53a <update_splash+0xc4>
    d52c:	90 91 9a 0b 	lds	r25, 0x0B9A
    d530:	99 23       	and	r25, r25
    d532:	19 f0       	breq	.+6      	; 0xd53a <update_splash+0xc4>
    d534:	8d 5f       	subi	r24, 0xFD	; 253
    d536:	80 93 7c 0b 	sts	0x0B7C, r24
		if (game.selection > TR) game.selection = TR;
    d53a:	80 91 7c 0b 	lds	r24, 0x0B7C
    d53e:	85 30       	cpi	r24, 0x05	; 5
    d540:	0c f4       	brge	.+2      	; 0xd544 <update_splash+0xce>
    d542:	6f c0       	rjmp	.+222    	; 0xd622 <update_splash+0x1ac>
    d544:	84 e0       	ldi	r24, 0x04	; 4
    d546:	80 93 7c 0b 	sts	0x0B7C, r24
    d54a:	6b c0       	rjmp	.+214    	; 0xd622 <update_splash+0x1ac>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d54c:	ce 01       	movw	r24, r28
    d54e:	0e 94 e2 62 	call	0xc5c4	; 0xc5c4 <select_pressed>
    d552:	88 23       	and	r24, r24
    d554:	41 f1       	breq	.+80     	; 0xd5a6 <update_splash+0x130>
    d556:	80 91 7c 0b 	lds	r24, 0x0B7C
    d55a:	82 30       	cpi	r24, 0x02	; 2
    d55c:	98 f4       	brcc	.+38     	; 0xd584 <update_splash+0x10e>
	{
		game.demo_counter = 0;
    d55e:	10 92 73 0b 	sts	0x0B73, r1
    d562:	10 92 72 0b 	sts	0x0B72, r1
		p1s.select_state = SELECTING;
    d566:	10 92 27 0a 	sts	0x0A27, r1
		p2s.select_state = SELECTING;
    d56a:	10 92 21 0a 	sts	0x0A21, r1
		SFX_NAVIGATE;
		fade_through();
    d56e:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
		load_eeprom(&handles);
    d572:	89 e4       	ldi	r24, 0x49	; 73
    d574:	9b e0       	ldi	r25, 0x0B	; 11
    d576:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d57a:	df 91       	pop	r29
    d57c:	cf 91       	pop	r28
    d57e:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d580:	0c 94 b6 69 	jmp	0xd36c	; 0xd36c <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    d584:	84 30       	cpi	r24, 0x04	; 4
    d586:	79 f4       	brne	.+30     	; 0xd5a6 <update_splash+0x130>
	{
		game.demo_counter = 0;
    d588:	10 92 73 0b 	sts	0x0B73, r1
    d58c:	10 92 72 0b 	sts	0x0B72, r1
		SFX_NAVIGATE;
		fade_through();
    d590:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
		load_eeprom(&scores);
    d594:	82 e2       	ldi	r24, 0x22	; 34
    d596:	9b e0       	ldi	r25, 0x0B	; 11
    d598:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d59c:	df 91       	pop	r29
    d59e:	cf 91       	pop	r28
    d5a0:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d5a2:	0c 94 ec 62 	jmp	0xc5d8	; 0xc5d8 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    d5a6:	80 91 72 0b 	lds	r24, 0x0B72
    d5aa:	90 91 73 0b 	lds	r25, 0x0B73
    d5ae:	88 35       	cpi	r24, 0x58	; 88
    d5b0:	92 40       	sbci	r25, 0x02	; 2
    d5b2:	b8 f1       	brcs	.+110    	; 0xd622 <update_splash+0x1ac>
	{
		game.demo_counter = 0;
    d5b4:	10 92 73 0b 	sts	0x0B73, r1
    d5b8:	10 92 72 0b 	sts	0x0B72, r1
		if (game.demo_choice % 2 == 0)
    d5bc:	80 91 71 0b 	lds	r24, 0x0B71
    d5c0:	80 fd       	sbrc	r24, 0
    d5c2:	21 c0       	rjmp	.+66     	; 0xd606 <update_splash+0x190>
		{
			game.selection = CPUVCPU;
    d5c4:	86 e0       	ldi	r24, 0x06	; 6
    d5c6:	80 93 7c 0b 	sts	0x0B7C, r24
			player1.handle_id = 9;
    d5ca:	c9 e0       	ldi	r28, 0x09	; 9
    d5cc:	c0 93 a6 0b 	sts	0x0BA6, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d5d0:	43 e0       	ldi	r20, 0x03	; 3
    d5d2:	66 e6       	ldi	r22, 0x66	; 102
    d5d4:	7b e0       	ldi	r23, 0x0B	; 11
    d5d6:	87 ea       	ldi	r24, 0xA7	; 167
    d5d8:	9b e0       	ldi	r25, 0x0B	; 11
    d5da:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
			player2.handle_id = 9;
    d5de:	c0 93 15 0f 	sts	0x0F15, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d5e2:	43 e0       	ldi	r20, 0x03	; 3
    d5e4:	66 e6       	ldi	r22, 0x66	; 102
    d5e6:	7b e0       	ldi	r23, 0x0B	; 11
    d5e8:	86 e1       	ldi	r24, 0x16	; 22
    d5ea:	9f e0       	ldi	r25, 0x0F	; 15
    d5ec:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
			SFX_NAVIGATE;
			clear_sprites();
    d5f0:	0e 94 97 54 	call	0xa92e	; 0xa92e <clear_sprites>
			fade_through();
    d5f4:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
			level_transition(LBRandom(0, 10));
    d5f8:	6a e0       	ldi	r22, 0x0A	; 10
    d5fa:	80 e0       	ldi	r24, 0x00	; 0
    d5fc:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    d600:	0e 94 c8 60 	call	0xc190	; 0xc190 <level_transition>
    d604:	08 c0       	rjmp	.+16     	; 0xd616 <update_splash+0x1a0>
		}
		else
		{
			SFX_NAVIGATE;
			fade_through();
    d606:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
			load_eeprom(&scores);
    d60a:	82 e2       	ldi	r24, 0x22	; 34
    d60c:	9b e0       	ldi	r25, 0x0B	; 11
    d60e:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <load_eeprom>
			load_tank_rank();
    d612:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <load_tank_rank>
		}
		game.demo_choice++;
    d616:	80 91 71 0b 	lds	r24, 0x0B71
    d61a:	8f 5f       	subi	r24, 0xFF	; 255
    d61c:	80 93 71 0b 	sts	0x0B71, r24
		return;
    d620:	09 c0       	rjmp	.+18     	; 0xd634 <update_splash+0x1be>
		
	}
	game.demo_counter++;
    d622:	80 91 72 0b 	lds	r24, 0x0B72
    d626:	90 91 73 0b 	lds	r25, 0x0B73
    d62a:	01 96       	adiw	r24, 0x01	; 1
    d62c:	90 93 73 0b 	sts	0x0B73, r25
    d630:	80 93 72 0b 	sts	0x0B72, r24
#endif
}
    d634:	df 91       	pop	r29
    d636:	cf 91       	pop	r28
    d638:	0f 91       	pop	r16
    d63a:	08 95       	ret

0000d63c <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d63c:	0f 93       	push	r16
    d63e:	1f 93       	push	r17
    d640:	cf 93       	push	r28
    d642:	df 93       	push	r29
    d644:	8c 01       	movw	r16, r24
    d646:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d648:	26 e0       	ldi	r18, 0x06	; 6
    d64a:	42 e0       	ldi	r20, 0x02	; 2
    d64c:	bc 01       	movw	r22, r24
    d64e:	82 e2       	ldi	r24, 0x22	; 34
    d650:	9a e0       	ldi	r25, 0x0A	; 10
    d652:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <_handle_select_render_helper>
	if (game.selection == PVP)
    d656:	80 91 7c 0b 	lds	r24, 0x0B7C
    d65a:	81 30       	cpi	r24, 0x01	; 1
    d65c:	39 f4       	brne	.+14     	; 0xd66c <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d65e:	28 e0       	ldi	r18, 0x08	; 8
    d660:	43 e1       	ldi	r20, 0x13	; 19
    d662:	be 01       	movw	r22, r28
    d664:	8c e1       	ldi	r24, 0x1C	; 28
    d666:	9a e0       	ldi	r25, 0x0A	; 10
    d668:	0e 94 f8 68 	call	0xd1f0	; 0xd1f0 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d66c:	4b e9       	ldi	r20, 0x9B	; 155
    d66e:	5b e0       	ldi	r21, 0x0B	; 11
    d670:	b8 01       	movw	r22, r16
    d672:	82 e2       	ldi	r24, 0x22	; 34
    d674:	9a e0       	ldi	r25, 0x0A	; 10
    d676:	0e 94 2d 68 	call	0xd05a	; 0xd05a <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d67a:	10 91 27 0a 	lds	r17, 0x0A27
	if (game.selection == PVP)
    d67e:	80 91 7c 0b 	lds	r24, 0x0B7C
    d682:	81 30       	cpi	r24, 0x01	; 1
    d684:	19 f0       	breq	.+6      	; 0xd68c <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d686:	12 30       	cpi	r17, 0x02	; 2
    d688:	69 f0       	breq	.+26     	; 0xd6a4 <update_handle_select+0x68>
    d68a:	21 c0       	rjmp	.+66     	; 0xd6ce <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d68c:	4a e0       	ldi	r20, 0x0A	; 10
    d68e:	5f e0       	ldi	r21, 0x0F	; 15
    d690:	be 01       	movw	r22, r28
    d692:	8c e1       	ldi	r24, 0x1C	; 28
    d694:	9a e0       	ldi	r25, 0x0A	; 10
    d696:	0e 94 2d 68 	call	0xd05a	; 0xd05a <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d69a:	80 91 21 0a 	lds	r24, 0x0A21
    d69e:	82 30       	cpi	r24, 0x02	; 2
    d6a0:	b1 f4       	brne	.+44     	; 0xd6ce <update_handle_select+0x92>
    d6a2:	f1 cf       	rjmp	.-30     	; 0xd686 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d6a4:	80 91 7c 0b 	lds	r24, 0x0B7C
    d6a8:	81 11       	cpse	r24, r1
    d6aa:	0a c0       	rjmp	.+20     	; 0xd6c0 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d6ac:	89 e0       	ldi	r24, 0x09	; 9
    d6ae:	80 93 15 0f 	sts	0x0F15, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d6b2:	43 e0       	ldi	r20, 0x03	; 3
    d6b4:	66 e6       	ldi	r22, 0x66	; 102
    d6b6:	7b e0       	ldi	r23, 0x0B	; 11
    d6b8:	86 e1       	ldi	r24, 0x16	; 22
    d6ba:	9f e0       	ldi	r25, 0x0F	; 15
    d6bc:	0e 94 8a 50 	call	0xa114	; 0xa114 <LBCopyChars>
		}
		level_transition(0);
    d6c0:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    d6c2:	df 91       	pop	r29
    d6c4:	cf 91       	pop	r28
    d6c6:	1f 91       	pop	r17
    d6c8:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    d6ca:	0c 94 c8 60 	jmp	0xc190	; 0xc190 <level_transition>
	}
}
    d6ce:	df 91       	pop	r29
    d6d0:	cf 91       	pop	r28
    d6d2:	1f 91       	pop	r17
    d6d4:	0f 91       	pop	r16
    d6d6:	08 95       	ret

0000d6d8 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d6d8:	00 97       	sbiw	r24, 0x00	; 0
    d6da:	41 f0       	breq	.+16     	; 0xd6ec <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d6dc:	81 30       	cpi	r24, 0x01	; 1
    d6de:	91 05       	cpc	r25, r1
    d6e0:	41 f0       	breq	.+16     	; 0xd6f2 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d6e2:	82 30       	cpi	r24, 0x02	; 2
    d6e4:	91 05       	cpc	r25, r1
    d6e6:	41 f0       	breq	.+16     	; 0xd6f8 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d6e8:	03 97       	sbiw	r24, 0x03	; 3
    d6ea:	49 f0       	breq	.+18     	; 0xd6fe <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d6ec:	80 e1       	ldi	r24, 0x10	; 16
    d6ee:	90 e0       	ldi	r25, 0x00	; 0
    d6f0:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d6f2:	80 e2       	ldi	r24, 0x20	; 32
    d6f4:	90 e0       	ldi	r25, 0x00	; 0
    d6f6:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d6f8:	80 e4       	ldi	r24, 0x40	; 64
    d6fa:	90 e0       	ldi	r25, 0x00	; 0
    d6fc:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d6fe:	80 e8       	ldi	r24, 0x80	; 128
    d700:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d702:	08 95       	ret

0000d704 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d704:	8f 92       	push	r8
    d706:	9f 92       	push	r9
    d708:	af 92       	push	r10
    d70a:	bf 92       	push	r11
    d70c:	cf 92       	push	r12
    d70e:	df 92       	push	r13
    d710:	ef 92       	push	r14
    d712:	ff 92       	push	r15
    d714:	0f 93       	push	r16
    d716:	1f 93       	push	r17
    d718:	cf 93       	push	r28
    d71a:	df 93       	push	r29
    d71c:	f8 2e       	mov	r15, r24
    d71e:	e6 2e       	mov	r14, r22
    d720:	d4 2e       	mov	r13, r20
    d722:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d724:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d726:	88 23       	and	r24, r24
    d728:	09 f4       	brne	.+2      	; 0xd72c <crash_and_turn+0x28>
    d72a:	a8 c0       	rjmp	.+336    	; 0xd87c <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d72c:	f8 01       	movw	r30, r16
    d72e:	c4 80       	ldd	r12, Z+4	; 0x04
    d730:	c4 fe       	sbrs	r12, 4
    d732:	23 c0       	rjmp	.+70     	; 0xd77a <crash_and_turn+0x76>
    d734:	fe e1       	ldi	r31, 0x1E	; 30
    d736:	6f 02       	muls	r22, r31
    d738:	40 01       	movw	r8, r0
    d73a:	11 24       	eor	r1, r1
    d73c:	af 2c       	mov	r10, r15
    d73e:	bb 24       	eor	r11, r11
    d740:	a7 fc       	sbrc	r10, 7
    d742:	b0 94       	com	r11
    d744:	c4 01       	movw	r24, r8
    d746:	8a 0d       	add	r24, r10
    d748:	9b 1d       	adc	r25, r11
    d74a:	01 97       	sbiw	r24, 0x01	; 1
    d74c:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d750:	81 11       	cpse	r24, r1
    d752:	13 c0       	rjmp	.+38     	; 0xd77a <crash_and_turn+0x76>
    d754:	c4 01       	movw	r24, r8
    d756:	8a 0d       	add	r24, r10
    d758:	9b 1d       	adc	r25, r11
    d75a:	4d 96       	adiw	r24, 0x1d	; 29
    d75c:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d760:	81 11       	cpse	r24, r1
    d762:	0b c0       	rjmp	.+22     	; 0xd77a <crash_and_turn+0x76>
    d764:	c4 01       	movw	r24, r8
    d766:	8a 0d       	add	r24, r10
    d768:	9b 1d       	adc	r25, r11
    d76a:	cb 96       	adiw	r24, 0x3b	; 59
    d76c:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d770:	81 11       	cpse	r24, r1
    d772:	03 c0       	rjmp	.+6      	; 0xd77a <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    d774:	80 e4       	ldi	r24, 0x40	; 64
    d776:	90 e0       	ldi	r25, 0x00	; 0
    d778:	6f c0       	rjmp	.+222    	; 0xd858 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    d77a:	c6 fe       	sbrs	r12, 6
    d77c:	23 c0       	rjmp	.+70     	; 0xd7c4 <crash_and_turn+0xc0>
    d77e:	8e 2d       	mov	r24, r14
    d780:	99 27       	eor	r25, r25
    d782:	87 fd       	sbrc	r24, 7
    d784:	90 95       	com	r25
    d786:	02 96       	adiw	r24, 0x02	; 2
    d788:	2e e1       	ldi	r18, 0x1E	; 30
    d78a:	28 9f       	mul	r18, r24
    d78c:	50 01       	movw	r10, r0
    d78e:	29 9f       	mul	r18, r25
    d790:	b0 0c       	add	r11, r0
    d792:	11 24       	eor	r1, r1
    d794:	af 0c       	add	r10, r15
    d796:	b1 1c       	adc	r11, r1
    d798:	f7 fc       	sbrc	r15, 7
    d79a:	ba 94       	dec	r11
    d79c:	c5 01       	movw	r24, r10
    d79e:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d7a2:	81 11       	cpse	r24, r1
    d7a4:	0f c0       	rjmp	.+30     	; 0xd7c4 <crash_and_turn+0xc0>
    d7a6:	c5 01       	movw	r24, r10
    d7a8:	01 96       	adiw	r24, 0x01	; 1
    d7aa:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d7ae:	81 11       	cpse	r24, r1
    d7b0:	09 c0       	rjmp	.+18     	; 0xd7c4 <crash_and_turn+0xc0>
    d7b2:	c5 01       	movw	r24, r10
    d7b4:	02 96       	adiw	r24, 0x02	; 2
    d7b6:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d7ba:	81 11       	cpse	r24, r1
    d7bc:	03 c0       	rjmp	.+6      	; 0xd7c4 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    d7be:	80 e2       	ldi	r24, 0x20	; 32
    d7c0:	90 e0       	ldi	r25, 0x00	; 0
    d7c2:	4a c0       	rjmp	.+148    	; 0xd858 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    d7c4:	c5 fe       	sbrs	r12, 5
    d7c6:	24 c0       	rjmp	.+72     	; 0xd810 <crash_and_turn+0x10c>
    d7c8:	fe 2d       	mov	r31, r14
    d7ca:	8e e1       	ldi	r24, 0x1E	; 30
    d7cc:	f8 02       	muls	r31, r24
    d7ce:	40 01       	movw	r8, r0
    d7d0:	11 24       	eor	r1, r1
    d7d2:	af 2c       	mov	r10, r15
    d7d4:	bb 24       	eor	r11, r11
    d7d6:	a7 fc       	sbrc	r10, 7
    d7d8:	b0 94       	com	r11
    d7da:	c4 01       	movw	r24, r8
    d7dc:	8a 0d       	add	r24, r10
    d7de:	9b 1d       	adc	r25, r11
    d7e0:	02 96       	adiw	r24, 0x02	; 2
    d7e2:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d7e6:	81 11       	cpse	r24, r1
    d7e8:	13 c0       	rjmp	.+38     	; 0xd810 <crash_and_turn+0x10c>
    d7ea:	c4 01       	movw	r24, r8
    d7ec:	8a 0d       	add	r24, r10
    d7ee:	9b 1d       	adc	r25, r11
    d7f0:	80 96       	adiw	r24, 0x20	; 32
    d7f2:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d7f6:	81 11       	cpse	r24, r1
    d7f8:	0b c0       	rjmp	.+22     	; 0xd810 <crash_and_turn+0x10c>
    d7fa:	c4 01       	movw	r24, r8
    d7fc:	8a 0d       	add	r24, r10
    d7fe:	9b 1d       	adc	r25, r11
    d800:	ce 96       	adiw	r24, 0x3e	; 62
    d802:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d806:	81 11       	cpse	r24, r1
    d808:	03 c0       	rjmp	.+6      	; 0xd810 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    d80a:	80 e8       	ldi	r24, 0x80	; 128
    d80c:	90 e0       	ldi	r25, 0x00	; 0
    d80e:	24 c0       	rjmp	.+72     	; 0xd858 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    d810:	c7 fe       	sbrs	r12, 7
    d812:	29 c0       	rjmp	.+82     	; 0xd866 <crash_and_turn+0x162>
    d814:	8e 2d       	mov	r24, r14
    d816:	99 27       	eor	r25, r25
    d818:	87 fd       	sbrc	r24, 7
    d81a:	90 95       	com	r25
    d81c:	01 97       	sbiw	r24, 0x01	; 1
    d81e:	2e e1       	ldi	r18, 0x1E	; 30
    d820:	28 9f       	mul	r18, r24
    d822:	50 01       	movw	r10, r0
    d824:	29 9f       	mul	r18, r25
    d826:	b0 0c       	add	r11, r0
    d828:	11 24       	eor	r1, r1
    d82a:	af 0c       	add	r10, r15
    d82c:	b1 1c       	adc	r11, r1
    d82e:	f7 fc       	sbrc	r15, 7
    d830:	ba 94       	dec	r11
    d832:	c5 01       	movw	r24, r10
    d834:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d838:	81 11       	cpse	r24, r1
    d83a:	15 c0       	rjmp	.+42     	; 0xd866 <crash_and_turn+0x162>
    d83c:	c5 01       	movw	r24, r10
    d83e:	01 96       	adiw	r24, 0x01	; 1
    d840:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d844:	81 11       	cpse	r24, r1
    d846:	0f c0       	rjmp	.+30     	; 0xd866 <crash_and_turn+0x162>
    d848:	c5 01       	movw	r24, r10
    d84a:	02 96       	adiw	r24, 0x02	; 2
    d84c:	0e 94 72 58 	call	0xb0e4	; 0xb0e4 <solid_tile>
    d850:	81 11       	cpse	r24, r1
    d852:	09 c0       	rjmp	.+18     	; 0xd866 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    d854:	80 e1       	ldi	r24, 0x10	; 16
    d856:	90 e0       	ldi	r25, 0x00	; 0
    d858:	f8 01       	movw	r30, r16
    d85a:	95 83       	std	Z+5, r25	; 0x05
    d85c:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    d85e:	ce 01       	movw	r24, r28
    d860:	0e 94 ba 57 	call	0xaf74	; 0xaf74 <recoil_sprite>
			recoiled = 0;
    d864:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    d866:	f8 01       	movw	r30, r16
    d868:	24 81       	ldd	r18, Z+4	; 0x04
    d86a:	35 81       	ldd	r19, Z+5	; 0x05
    d86c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d86e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d870:	82 23       	and	r24, r18
    d872:	93 23       	and	r25, r19
    d874:	89 2b       	or	r24, r25
    d876:	11 f0       	breq	.+4      	; 0xd87c <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    d878:	1a 8e       	std	Y+26, r1	; 0x1a
    d87a:	1c c0       	rjmp	.+56     	; 0xd8b4 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    d87c:	dd 20       	and	r13, r13
    d87e:	d1 f0       	breq	.+52     	; 0xd8b4 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    d880:	f8 01       	movw	r30, r16
    d882:	84 81       	ldd	r24, Z+4	; 0x04
    d884:	86 ff       	sbrs	r24, 6
    d886:	03 c0       	rjmp	.+6      	; 0xd88e <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    d888:	80 e1       	ldi	r24, 0x10	; 16
    d88a:	90 e0       	ldi	r25, 0x00	; 0
    d88c:	0f c0       	rjmp	.+30     	; 0xd8ac <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    d88e:	84 ff       	sbrs	r24, 4
    d890:	03 c0       	rjmp	.+6      	; 0xd898 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    d892:	80 e8       	ldi	r24, 0x80	; 128
    d894:	90 e0       	ldi	r25, 0x00	; 0
    d896:	09 c0       	rjmp	.+18     	; 0xd8aa <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    d898:	87 ff       	sbrs	r24, 7
    d89a:	03 c0       	rjmp	.+6      	; 0xd8a2 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    d89c:	80 e2       	ldi	r24, 0x20	; 32
    d89e:	90 e0       	ldi	r25, 0x00	; 0
    d8a0:	04 c0       	rjmp	.+8      	; 0xd8aa <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    d8a2:	85 ff       	sbrs	r24, 5
    d8a4:	07 c0       	rjmp	.+14     	; 0xd8b4 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    d8a6:	80 e4       	ldi	r24, 0x40	; 64
    d8a8:	90 e0       	ldi	r25, 0x00	; 0
    d8aa:	f8 01       	movw	r30, r16
    d8ac:	95 83       	std	Z+5, r25	; 0x05
    d8ae:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    d8b0:	81 e0       	ldi	r24, 0x01	; 1
    d8b2:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d8b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d8b6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d8b8:	80 31       	cpi	r24, 0x10	; 16
    d8ba:	91 05       	cpc	r25, r1
    d8bc:	19 f0       	breq	.+6      	; 0xd8c4 <crash_and_turn+0x1c0>
    d8be:	80 32       	cpi	r24, 0x20	; 32
    d8c0:	91 05       	cpc	r25, r1
    d8c2:	19 f4       	brne	.+6      	; 0xd8ca <crash_and_turn+0x1c6>
    d8c4:	2b a1       	ldd	r18, Y+35	; 0x23
    d8c6:	e2 16       	cp	r14, r18
    d8c8:	59 f0       	breq	.+22     	; 0xd8e0 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    d8ca:	80 34       	cpi	r24, 0x40	; 64
    d8cc:	91 05       	cpc	r25, r1
    d8ce:	19 f0       	breq	.+6      	; 0xd8d6 <crash_and_turn+0x1d2>
    d8d0:	80 38       	cpi	r24, 0x80	; 128
    d8d2:	91 05       	cpc	r25, r1
    d8d4:	39 f4       	brne	.+14     	; 0xd8e4 <crash_and_turn+0x1e0>
    d8d6:	81 e0       	ldi	r24, 0x01	; 1
    d8d8:	9b a1       	ldd	r25, Y+35	; 0x23
    d8da:	f9 12       	cpse	r15, r25
    d8dc:	03 c0       	rjmp	.+6      	; 0xd8e4 <crash_and_turn+0x1e0>
    d8de:	03 c0       	rjmp	.+6      	; 0xd8e6 <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d8e0:	81 e0       	ldi	r24, 0x01	; 1
    d8e2:	01 c0       	rjmp	.+2      	; 0xd8e6 <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    d8e4:	80 e0       	ldi	r24, 0x00	; 0
}
    d8e6:	df 91       	pop	r29
    d8e8:	cf 91       	pop	r28
    d8ea:	1f 91       	pop	r17
    d8ec:	0f 91       	pop	r16
    d8ee:	ff 90       	pop	r15
    d8f0:	ef 90       	pop	r14
    d8f2:	df 90       	pop	r13
    d8f4:	cf 90       	pop	r12
    d8f6:	bf 90       	pop	r11
    d8f8:	af 90       	pop	r10
    d8fa:	9f 90       	pop	r9
    d8fc:	8f 90       	pop	r8
    d8fe:	08 95       	ret

0000d900 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    d900:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    d902:	26 2f       	mov	r18, r22
    d904:	33 27       	eor	r19, r19
    d906:	27 fd       	sbrc	r18, 7
    d908:	30 95       	com	r19
    d90a:	37 ff       	sbrs	r19, 7
    d90c:	03 c0       	rjmp	.+6      	; 0xd914 <get_cpu_goal_direction+0x14>
    d90e:	31 95       	neg	r19
    d910:	21 95       	neg	r18
    d912:	31 09       	sbc	r19, r1
    d914:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    d916:	24 2f       	mov	r18, r20
    d918:	33 27       	eor	r19, r19
    d91a:	27 fd       	sbrc	r18, 7
    d91c:	30 95       	com	r19
    d91e:	37 ff       	sbrs	r19, 7
    d920:	03 c0       	rjmp	.+6      	; 0xd928 <get_cpu_goal_direction+0x28>
    d922:	31 95       	neg	r19
    d924:	21 95       	neg	r18
    d926:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    d928:	83 8d       	ldd	r24, Z+27	; 0x1b
    d92a:	81 11       	cpse	r24, r1
    d92c:	08 c0       	rjmp	.+16     	; 0xd93e <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    d92e:	29 17       	cp	r18, r25
    d930:	1c f4       	brge	.+6      	; 0xd938 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    d932:	16 16       	cp	r1, r22
    d934:	94 f0       	brlt	.+36     	; 0xd95a <get_cpu_goal_direction+0x5a>
    d936:	0b c0       	rjmp	.+22     	; 0xd94e <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    d938:	14 16       	cp	r1, r20
    d93a:	94 f0       	brlt	.+36     	; 0xd960 <get_cpu_goal_direction+0x60>
    d93c:	0b c0       	rjmp	.+22     	; 0xd954 <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    d93e:	29 17       	cp	r18, r25
    d940:	1c f4       	brge	.+6      	; 0xd948 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    d942:	16 16       	cp	r1, r22
    d944:	24 f0       	brlt	.+8      	; 0xd94e <get_cpu_goal_direction+0x4e>
    d946:	09 c0       	rjmp	.+18     	; 0xd95a <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    d948:	14 16       	cp	r1, r20
    d94a:	24 f0       	brlt	.+8      	; 0xd954 <get_cpu_goal_direction+0x54>
    d94c:	09 c0       	rjmp	.+18     	; 0xd960 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    d94e:	80 e4       	ldi	r24, 0x40	; 64
    d950:	90 e0       	ldi	r25, 0x00	; 0
    d952:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    d954:	80 e1       	ldi	r24, 0x10	; 16
    d956:	90 e0       	ldi	r25, 0x00	; 0
    d958:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    d95a:	80 e8       	ldi	r24, 0x80	; 128
    d95c:	90 e0       	ldi	r25, 0x00	; 0
    d95e:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    d960:	80 e2       	ldi	r24, 0x20	; 32
    d962:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    d964:	08 95       	ret

0000d966 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    d966:	2f 92       	push	r2
    d968:	3f 92       	push	r3
    d96a:	4f 92       	push	r4
    d96c:	5f 92       	push	r5
    d96e:	7f 92       	push	r7
    d970:	8f 92       	push	r8
    d972:	9f 92       	push	r9
    d974:	af 92       	push	r10
    d976:	bf 92       	push	r11
    d978:	cf 92       	push	r12
    d97a:	df 92       	push	r13
    d97c:	ef 92       	push	r14
    d97e:	ff 92       	push	r15
    d980:	0f 93       	push	r16
    d982:	1f 93       	push	r17
    d984:	cf 93       	push	r28
    d986:	df 93       	push	r29
    d988:	cd b7       	in	r28, 0x3d	; 61
    d98a:	de b7       	in	r29, 0x3e	; 62
    d98c:	2a 97       	sbiw	r28, 0x0a	; 10
    d98e:	0f b6       	in	r0, 0x3f	; 63
    d990:	f8 94       	cli
    d992:	de bf       	out	0x3e, r29	; 62
    d994:	0f be       	out	0x3f, r0	; 63
    d996:	cd bf       	out	0x3d, r28	; 61
    d998:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d99a:	db 01       	movw	r26, r22
    d99c:	13 96       	adiw	r26, 0x03	; 3
    d99e:	8d 91       	ld	r24, X+
    d9a0:	9d 91       	ld	r25, X+
    d9a2:	0d 90       	ld	r0, X+
    d9a4:	bc 91       	ld	r27, X
    d9a6:	a0 2d       	mov	r26, r0
    d9a8:	89 83       	std	Y+1, r24	; 0x01
    d9aa:	9a 83       	std	Y+2, r25	; 0x02
    d9ac:	ab 83       	std	Y+3, r26	; 0x03
    d9ae:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    d9b0:	fb 01       	movw	r30, r22
    d9b2:	87 80       	ldd	r8, Z+7	; 0x07
    d9b4:	90 84       	ldd	r9, Z+8	; 0x08
    d9b6:	a1 84       	ldd	r10, Z+9	; 0x09
    d9b8:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    d9ba:	d9 01       	movw	r26, r18
    d9bc:	13 96       	adiw	r26, 0x03	; 3
    d9be:	cd 90       	ld	r12, X+
    d9c0:	dd 90       	ld	r13, X+
    d9c2:	ed 90       	ld	r14, X+
    d9c4:	fc 90       	ld	r15, X
    d9c6:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    d9c8:	17 96       	adiw	r26, 0x07	; 7
    d9ca:	8d 91       	ld	r24, X+
    d9cc:	9d 91       	ld	r25, X+
    d9ce:	0d 90       	ld	r0, X+
    d9d0:	bc 91       	ld	r27, X
    d9d2:	a0 2d       	mov	r26, r0
    d9d4:	8d 83       	std	Y+5, r24	; 0x05
    d9d6:	9e 83       	std	Y+6, r25	; 0x06
    d9d8:	af 83       	std	Y+7, r26	; 0x07
    d9da:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    d9dc:	f9 01       	movw	r30, r18
    d9de:	86 89       	ldd	r24, Z+22	; 0x16
    d9e0:	81 11       	cpse	r24, r1
    d9e2:	06 c0       	rjmp	.+12     	; 0xd9f0 <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    d9e4:	da 01       	movw	r26, r20
    d9e6:	15 96       	adiw	r26, 0x05	; 5
    d9e8:	1c 92       	st	X, r1
    d9ea:	1e 92       	st	-X, r1
    d9ec:	14 97       	sbiw	r26, 0x04	; 4
		return;
    d9ee:	57 c2       	rjmp	.+1198   	; 0xde9e <get_cpu_joypad_state+0x538>
    d9f0:	2a 01       	movw	r4, r20
    d9f2:	1b 01       	movw	r2, r22
    d9f4:	3a 87       	std	Y+10, r19	; 0x0a
    d9f6:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    d9f8:	ca 01       	movw	r24, r20
    d9fa:	0e 94 1d 56 	call	0xac3a	; 0xac3a <shoot_pressed>
    d9fe:	88 23       	and	r24, r24
    da00:	19 f0       	breq	.+6      	; 0xda08 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    da02:	f2 01       	movw	r30, r4
    da04:	11 82       	std	Z+1, r1	; 0x01
    da06:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    da08:	20 91 01 01 	lds	r18, 0x0101
    da0c:	30 91 02 01 	lds	r19, 0x0102
    da10:	c9 01       	movw	r24, r18
    da12:	6a e0       	ldi	r22, 0x0A	; 10
    da14:	70 e0       	ldi	r23, 0x00	; 0
    da16:	0e 94 72 70 	call	0xe0e4	; 0xe0e4 <__udivmodhi4>
    da1a:	89 2b       	or	r24, r25
    da1c:	59 f4       	brne	.+22     	; 0xda34 <get_cpu_joypad_state+0xce>
    da1e:	a9 85       	ldd	r26, Y+9	; 0x09
    da20:	ba 85       	ldd	r27, Y+10	; 0x0a
    da22:	56 96       	adiw	r26, 0x16	; 22
    da24:	8c 91       	ld	r24, X
    da26:	83 33       	cpi	r24, 0x33	; 51
    da28:	28 f0       	brcs	.+10     	; 0xda34 <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    da2a:	81 e0       	ldi	r24, 0x01	; 1
    da2c:	90 e0       	ldi	r25, 0x00	; 0
    da2e:	f2 01       	movw	r30, r4
    da30:	91 83       	std	Z+1, r25	; 0x01
    da32:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    da34:	c9 01       	movw	r24, r18
    da36:	64 eb       	ldi	r22, 0xB4	; 180
    da38:	70 e0       	ldi	r23, 0x00	; 0
    da3a:	0e 94 72 70 	call	0xe0e4	; 0xe0e4 <__udivmodhi4>
    da3e:	89 2b       	or	r24, r25
    da40:	61 f0       	breq	.+24     	; 0xda5a <get_cpu_joypad_state+0xf4>
    da42:	a9 85       	ldd	r26, Y+9	; 0x09
    da44:	ba 85       	ldd	r27, Y+10	; 0x0a
    da46:	56 96       	adiw	r26, 0x16	; 22
    da48:	8c 91       	ld	r24, X
    da4a:	56 97       	sbiw	r26, 0x16	; 22
    da4c:	8a 30       	cpi	r24, 0x0A	; 10
    da4e:	29 f0       	breq	.+10     	; 0xda5a <get_cpu_joypad_state+0xf4>
    da50:	94 96       	adiw	r26, 0x24	; 36
    da52:	8c 91       	ld	r24, X
    da54:	88 23       	and	r24, r24
    da56:	09 f4       	brne	.+2      	; 0xda5a <get_cpu_joypad_state+0xf4>
    da58:	7e c0       	rjmp	.+252    	; 0xdb56 <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    da5a:	20 e0       	ldi	r18, 0x00	; 0
    da5c:	30 e0       	ldi	r19, 0x00	; 0
    da5e:	40 e0       	ldi	r20, 0x00	; 0
    da60:	5e e3       	ldi	r21, 0x3E	; 62
    da62:	69 81       	ldd	r22, Y+1	; 0x01
    da64:	7a 81       	ldd	r23, Y+2	; 0x02
    da66:	8b 81       	ldd	r24, Y+3	; 0x03
    da68:	9c 81       	ldd	r25, Y+4	; 0x04
    da6a:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    da6e:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
    da72:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    da74:	20 e0       	ldi	r18, 0x00	; 0
    da76:	30 e0       	ldi	r19, 0x00	; 0
    da78:	40 e0       	ldi	r20, 0x00	; 0
    da7a:	5e e3       	ldi	r21, 0x3E	; 62
    da7c:	c5 01       	movw	r24, r10
    da7e:	b4 01       	movw	r22, r8
    da80:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    da84:	20 e0       	ldi	r18, 0x00	; 0
    da86:	30 e0       	ldi	r19, 0x00	; 0
    da88:	40 e4       	ldi	r20, 0x40	; 64
    da8a:	50 e4       	ldi	r21, 0x40	; 64
    da8c:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    da90:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
    da94:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    da96:	20 e0       	ldi	r18, 0x00	; 0
    da98:	30 e0       	ldi	r19, 0x00	; 0
    da9a:	40 e0       	ldi	r20, 0x00	; 0
    da9c:	5e e3       	ldi	r21, 0x3E	; 62
    da9e:	c7 01       	movw	r24, r14
    daa0:	b6 01       	movw	r22, r12
    daa2:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    daa6:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    daaa:	f7 2c       	mov	r15, r7
    daac:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    daae:	20 e0       	ldi	r18, 0x00	; 0
    dab0:	30 e0       	ldi	r19, 0x00	; 0
    dab2:	40 e0       	ldi	r20, 0x00	; 0
    dab4:	5e e3       	ldi	r21, 0x3E	; 62
    dab6:	6d 81       	ldd	r22, Y+5	; 0x05
    dab8:	7e 81       	ldd	r23, Y+6	; 0x06
    daba:	8f 81       	ldd	r24, Y+7	; 0x07
    dabc:	98 85       	ldd	r25, Y+8	; 0x08
    dabe:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    dac2:	20 e0       	ldi	r18, 0x00	; 0
    dac4:	30 e0       	ldi	r19, 0x00	; 0
    dac6:	40 e4       	ldi	r20, 0x40	; 64
    dac8:	50 e4       	ldi	r21, 0x40	; 64
    daca:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    dace:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    dad2:	4b 2d       	mov	r20, r11
    dad4:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    dad6:	e9 85       	ldd	r30, Y+9	; 0x09
    dad8:	fa 85       	ldd	r31, Y+10	; 0x0a
    dada:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    dadc:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    dade:	82 e0       	ldi	r24, 0x02	; 2
    dae0:	8f 0d       	add	r24, r15
    dae2:	85 30       	cpi	r24, 0x05	; 5
    dae4:	c8 f4       	brcc	.+50     	; 0xdb18 <get_cpu_joypad_state+0x1b2>
    dae6:	4e 3f       	cpi	r20, 0xFE	; 254
    dae8:	bc f0       	brlt	.+46     	; 0xdb18 <get_cpu_joypad_state+0x1b2>
    daea:	43 30       	cpi	r20, 0x03	; 3
    daec:	ac f4       	brge	.+42     	; 0xdb18 <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    daee:	64 e0       	ldi	r22, 0x04	; 4
    daf0:	80 e0       	ldi	r24, 0x00	; 0
    daf2:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    daf6:	90 e0       	ldi	r25, 0x00	; 0
    daf8:	0e 94 6c 6b 	call	0xd6d8	; 0xd6d8 <button_map>
    dafc:	a9 85       	ldd	r26, Y+9	; 0x09
    dafe:	ba 85       	ldd	r27, Y+10	; 0x0a
    db00:	5e 96       	adiw	r26, 0x1e	; 30
    db02:	9c 93       	st	X, r25
    db04:	8e 93       	st	-X, r24
    db06:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    db08:	62 e1       	ldi	r22, 0x12	; 18
    db0a:	85 e0       	ldi	r24, 0x05	; 5
    db0c:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    db10:	e9 85       	ldd	r30, Y+9	; 0x09
    db12:	fa 85       	ldd	r31, Y+10	; 0x0a
    db14:	83 a3       	std	Z+35, r24	; 0x23
    db16:	16 c0       	rjmp	.+44     	; 0xdb44 <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    db18:	6f 2d       	mov	r22, r15
    db1a:	89 85       	ldd	r24, Y+9	; 0x09
    db1c:	9a 85       	ldd	r25, Y+10	; 0x0a
    db1e:	0e 94 80 6c 	call	0xd900	; 0xd900 <get_cpu_goal_direction>
    db22:	a9 85       	ldd	r26, Y+9	; 0x09
    db24:	ba 85       	ldd	r27, Y+10	; 0x0a
    db26:	5e 96       	adiw	r26, 0x1e	; 30
    db28:	9c 93       	st	X, r25
    db2a:	8e 93       	st	-X, r24
    db2c:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    db2e:	80 31       	cpi	r24, 0x10	; 16
    db30:	91 05       	cpc	r25, r1
    db32:	29 f0       	breq	.+10     	; 0xdb3e <get_cpu_joypad_state+0x1d8>
    db34:	80 97       	sbiw	r24, 0x20	; 32
    db36:	19 f0       	breq	.+6      	; 0xdb3e <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    db38:	93 96       	adiw	r26, 0x23	; 35
    db3a:	7c 92       	st	X, r7
    db3c:	03 c0       	rjmp	.+6      	; 0xdb44 <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    db3e:	e9 85       	ldd	r30, Y+9	; 0x09
    db40:	fa 85       	ldd	r31, Y+10	; 0x0a
    db42:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    db44:	a9 85       	ldd	r26, Y+9	; 0x09
    db46:	ba 85       	ldd	r27, Y+10	; 0x0a
    db48:	5d 96       	adiw	r26, 0x1d	; 29
    db4a:	8d 91       	ld	r24, X+
    db4c:	9c 91       	ld	r25, X
    db4e:	5e 97       	sbiw	r26, 0x1e	; 30
    db50:	f2 01       	movw	r30, r4
    db52:	95 83       	std	Z+5, r25	; 0x05
    db54:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    db56:	a9 85       	ldd	r26, Y+9	; 0x09
    db58:	ba 85       	ldd	r27, Y+10	; 0x0a
    db5a:	13 96       	adiw	r26, 0x03	; 3
    db5c:	cd 90       	ld	r12, X+
    db5e:	dd 90       	ld	r13, X+
    db60:	ed 90       	ld	r14, X+
    db62:	fc 90       	ld	r15, X
    db64:	16 97       	sbiw	r26, 0x06	; 6
    db66:	95 96       	adiw	r26, 0x25	; 37
    db68:	2d 91       	ld	r18, X+
    db6a:	3d 91       	ld	r19, X+
    db6c:	4d 91       	ld	r20, X+
    db6e:	5c 91       	ld	r21, X
    db70:	98 97       	sbiw	r26, 0x28	; 40
    db72:	c7 01       	movw	r24, r14
    db74:	b6 01       	movw	r22, r12
    db76:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    db7a:	88 23       	and	r24, r24
    db7c:	29 f0       	breq	.+10     	; 0xdb88 <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    db7e:	e9 85       	ldd	r30, Y+9	; 0x09
    db80:	fa 85       	ldd	r31, Y+10	; 0x0a
    db82:	10 a2       	std	Z+32, r1	; 0x20
    db84:	17 8e       	std	Z+31, r1	; 0x1f
    db86:	0b c0       	rjmp	.+22     	; 0xdb9e <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    db88:	a9 85       	ldd	r26, Y+9	; 0x09
    db8a:	ba 85       	ldd	r27, Y+10	; 0x0a
    db8c:	5f 96       	adiw	r26, 0x1f	; 31
    db8e:	8d 91       	ld	r24, X+
    db90:	9c 91       	ld	r25, X
    db92:	90 97       	sbiw	r26, 0x20	; 32
    db94:	01 96       	adiw	r24, 0x01	; 1
    db96:	90 96       	adiw	r26, 0x20	; 32
    db98:	9c 93       	st	X, r25
    db9a:	8e 93       	st	-X, r24
    db9c:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    db9e:	e9 85       	ldd	r30, Y+9	; 0x09
    dba0:	fa 85       	ldd	r31, Y+10	; 0x0a
    dba2:	87 80       	ldd	r8, Z+7	; 0x07
    dba4:	90 84       	ldd	r9, Z+8	; 0x08
    dba6:	a1 84       	ldd	r10, Z+9	; 0x09
    dba8:	b2 84       	ldd	r11, Z+10	; 0x0a
    dbaa:	21 a5       	ldd	r18, Z+41	; 0x29
    dbac:	32 a5       	ldd	r19, Z+42	; 0x2a
    dbae:	43 a5       	ldd	r20, Z+43	; 0x2b
    dbb0:	54 a5       	ldd	r21, Z+44	; 0x2c
    dbb2:	c5 01       	movw	r24, r10
    dbb4:	b4 01       	movw	r22, r8
    dbb6:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    dbba:	88 23       	and	r24, r24
    dbbc:	39 f0       	breq	.+14     	; 0xdbcc <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    dbbe:	a9 85       	ldd	r26, Y+9	; 0x09
    dbc0:	ba 85       	ldd	r27, Y+10	; 0x0a
    dbc2:	92 96       	adiw	r26, 0x22	; 34
    dbc4:	1c 92       	st	X, r1
    dbc6:	1e 92       	st	-X, r1
    dbc8:	91 97       	sbiw	r26, 0x21	; 33
    dbca:	07 c0       	rjmp	.+14     	; 0xdbda <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    dbcc:	e9 85       	ldd	r30, Y+9	; 0x09
    dbce:	fa 85       	ldd	r31, Y+10	; 0x0a
    dbd0:	81 a1       	ldd	r24, Z+33	; 0x21
    dbd2:	92 a1       	ldd	r25, Z+34	; 0x22
    dbd4:	01 96       	adiw	r24, 0x01	; 1
    dbd6:	92 a3       	std	Z+34, r25	; 0x22
    dbd8:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    dbda:	a9 85       	ldd	r26, Y+9	; 0x09
    dbdc:	ba 85       	ldd	r27, Y+10	; 0x0a
    dbde:	95 96       	adiw	r26, 0x25	; 37
    dbe0:	cd 92       	st	X+, r12
    dbe2:	dd 92       	st	X+, r13
    dbe4:	ed 92       	st	X+, r14
    dbe6:	fc 92       	st	X, r15
    dbe8:	98 97       	sbiw	r26, 0x28	; 40
	player->old_y = player->shared.y;
    dbea:	fd 01       	movw	r30, r26
    dbec:	81 a6       	std	Z+41, r8	; 0x29
    dbee:	92 a6       	std	Z+42, r9	; 0x2a
    dbf0:	a3 a6       	std	Z+43, r10	; 0x2b
    dbf2:	b4 a6       	std	Z+44, r11	; 0x2c
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    dbf4:	87 8d       	ldd	r24, Z+31	; 0x1f
    dbf6:	90 a1       	ldd	r25, Z+32	; 0x20
    dbf8:	80 34       	cpi	r24, 0x40	; 64
    dbfa:	91 40       	sbci	r25, 0x01	; 1
    dbfc:	88 f0       	brcs	.+34     	; 0xdc20 <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    dbfe:	64 e0       	ldi	r22, 0x04	; 4
    dc00:	82 e0       	ldi	r24, 0x02	; 2
    dc02:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    dc06:	90 e0       	ldi	r25, 0x00	; 0
    dc08:	0e 94 6c 6b 	call	0xd6d8	; 0xd6d8 <button_map>
    dc0c:	d2 01       	movw	r26, r4
    dc0e:	15 96       	adiw	r26, 0x05	; 5
    dc10:	9c 93       	st	X, r25
    dc12:	8e 93       	st	-X, r24
    dc14:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    dc16:	e9 85       	ldd	r30, Y+9	; 0x09
    dc18:	fa 85       	ldd	r31, Y+10	; 0x0a
    dc1a:	10 a2       	std	Z+32, r1	; 0x20
    dc1c:	17 8e       	std	Z+31, r1	; 0x1f
    dc1e:	42 c0       	rjmp	.+132    	; 0xdca4 <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    dc20:	a9 85       	ldd	r26, Y+9	; 0x09
    dc22:	ba 85       	ldd	r27, Y+10	; 0x0a
    dc24:	91 96       	adiw	r26, 0x21	; 33
    dc26:	8d 91       	ld	r24, X+
    dc28:	9c 91       	ld	r25, X
    dc2a:	92 97       	sbiw	r26, 0x22	; 34
    dc2c:	80 34       	cpi	r24, 0x40	; 64
    dc2e:	91 40       	sbci	r25, 0x01	; 1
    dc30:	88 f0       	brcs	.+34     	; 0xdc54 <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    dc32:	62 e0       	ldi	r22, 0x02	; 2
    dc34:	80 e0       	ldi	r24, 0x00	; 0
    dc36:	0e 94 c7 51 	call	0xa38e	; 0xa38e <LBRandom>
    dc3a:	90 e0       	ldi	r25, 0x00	; 0
    dc3c:	0e 94 6c 6b 	call	0xd6d8	; 0xd6d8 <button_map>
    dc40:	f2 01       	movw	r30, r4
    dc42:	95 83       	std	Z+5, r25	; 0x05
    dc44:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    dc46:	a9 85       	ldd	r26, Y+9	; 0x09
    dc48:	ba 85       	ldd	r27, Y+10	; 0x0a
    dc4a:	92 96       	adiw	r26, 0x22	; 34
    dc4c:	1c 92       	st	X, r1
    dc4e:	1e 92       	st	-X, r1
    dc50:	91 97       	sbiw	r26, 0x21	; 33
    dc52:	28 c0       	rjmp	.+80     	; 0xdca4 <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    dc54:	20 e0       	ldi	r18, 0x00	; 0
    dc56:	30 e0       	ldi	r19, 0x00	; 0
    dc58:	40 e0       	ldi	r20, 0x00	; 0
    dc5a:	5e e3       	ldi	r21, 0x3E	; 62
    dc5c:	c5 01       	movw	r24, r10
    dc5e:	b4 01       	movw	r22, r8
    dc60:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    dc64:	20 e0       	ldi	r18, 0x00	; 0
    dc66:	30 e0       	ldi	r19, 0x00	; 0
    dc68:	40 e4       	ldi	r20, 0x40	; 64
    dc6a:	50 e4       	ldi	r21, 0x40	; 64
    dc6c:	0e 94 9a 70 	call	0xe134	; 0xe134 <__subsf3>
    dc70:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
    dc74:	b6 2e       	mov	r11, r22
    dc76:	20 e0       	ldi	r18, 0x00	; 0
    dc78:	30 e0       	ldi	r19, 0x00	; 0
    dc7a:	40 e0       	ldi	r20, 0x00	; 0
    dc7c:	5e e3       	ldi	r21, 0x3E	; 62
    dc7e:	c7 01       	movw	r24, r14
    dc80:	b6 01       	movw	r22, r12
    dc82:	0e 94 52 72 	call	0xe4a4	; 0xe4a4 <__mulsf3>
    dc86:	0e 94 6b 71 	call	0xe2d6	; 0xe2d6 <__fixsfsi>
    dc8a:	86 2f       	mov	r24, r22
    dc8c:	82 01       	movw	r16, r4
    dc8e:	29 85       	ldd	r18, Y+9	; 0x09
    dc90:	3a 85       	ldd	r19, Y+10	; 0x0a
    dc92:	f9 01       	movw	r30, r18
    dc94:	42 81       	ldd	r20, Z+2	; 0x02
    dc96:	6b 2d       	mov	r22, r11
    dc98:	0e 94 82 6b 	call	0xd704	; 0xd704 <crash_and_turn>
    dc9c:	a9 85       	ldd	r26, Y+9	; 0x09
    dc9e:	ba 85       	ldd	r27, Y+10	; 0x0a
    dca0:	94 96       	adiw	r26, 0x24	; 36
    dca2:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    dca4:	e9 85       	ldd	r30, Y+9	; 0x09
    dca6:	fa 85       	ldd	r31, Y+10	; 0x0a
    dca8:	84 8d       	ldd	r24, Z+28	; 0x1c
    dcaa:	81 30       	cpi	r24, 0x01	; 1
    dcac:	09 f0       	breq	.+2      	; 0xdcb0 <get_cpu_joypad_state+0x34a>
    dcae:	f7 c0       	rjmp	.+494    	; 0xde9e <get_cpu_joypad_state+0x538>
    dcb0:	d1 01       	movw	r26, r2
    dcb2:	52 96       	adiw	r26, 0x12	; 18
    dcb4:	9c 91       	ld	r25, X
    dcb6:	52 97       	sbiw	r26, 0x12	; 18
    dcb8:	51 96       	adiw	r26, 0x11	; 17
    dcba:	8c 91       	ld	r24, X
    dcbc:	51 97       	sbiw	r26, 0x11	; 17
    dcbe:	98 17       	cp	r25, r24
    dcc0:	08 f0       	brcs	.+2      	; 0xdcc4 <get_cpu_joypad_state+0x35e>
    dcc2:	ed c0       	rjmp	.+474    	; 0xde9e <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    dcc4:	17 96       	adiw	r26, 0x07	; 7
    dcc6:	cd 90       	ld	r12, X+
    dcc8:	dd 90       	ld	r13, X+
    dcca:	ed 90       	ld	r14, X+
    dccc:	fc 90       	ld	r15, X
    dcce:	1a 97       	sbiw	r26, 0x0a	; 10
    dcd0:	87 80       	ldd	r8, Z+7	; 0x07
    dcd2:	90 84       	ldd	r9, Z+8	; 0x08
    dcd4:	a1 84       	ldd	r10, Z+9	; 0x09
    dcd6:	b2 84       	ldd	r11, Z+10	; 0x0a
    dcd8:	a5 01       	movw	r20, r10
    dcda:	94 01       	movw	r18, r8
    dcdc:	c7 01       	movw	r24, r14
    dcde:	b6 01       	movw	r22, r12
    dce0:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    dce4:	87 ff       	sbrs	r24, 7
    dce6:	64 c0       	rjmp	.+200    	; 0xddb0 <get_cpu_joypad_state+0x44a>
    dce8:	e9 85       	ldd	r30, Y+9	; 0x09
    dcea:	fa 85       	ldd	r31, Y+10	; 0x0a
    dcec:	23 81       	ldd	r18, Z+3	; 0x03
    dcee:	34 81       	ldd	r19, Z+4	; 0x04
    dcf0:	45 81       	ldd	r20, Z+5	; 0x05
    dcf2:	56 81       	ldd	r21, Z+6	; 0x06
    dcf4:	d1 01       	movw	r26, r2
    dcf6:	13 96       	adiw	r26, 0x03	; 3
    dcf8:	6d 91       	ld	r22, X+
    dcfa:	7d 91       	ld	r23, X+
    dcfc:	8d 91       	ld	r24, X+
    dcfe:	9c 91       	ld	r25, X
    dd00:	16 97       	sbiw	r26, 0x06	; 6
    dd02:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    dd06:	87 ff       	sbrs	r24, 7
    dd08:	27 c0       	rjmp	.+78     	; 0xdd58 <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    dd0a:	f1 01       	movw	r30, r2
    dd0c:	80 81       	ld	r24, Z
    dd0e:	82 30       	cpi	r24, 0x02	; 2
    dd10:	79 f4       	brne	.+30     	; 0xdd30 <get_cpu_joypad_state+0x3ca>
    dd12:	a9 85       	ldd	r26, Y+9	; 0x09
    dd14:	ba 85       	ldd	r27, Y+10	; 0x0a
    dd16:	8c 91       	ld	r24, X
    dd18:	83 30       	cpi	r24, 0x03	; 3
    dd1a:	51 f4       	brne	.+20     	; 0xdd30 <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    dd1c:	80 e8       	ldi	r24, 0x80	; 128
    dd1e:	90 e0       	ldi	r25, 0x00	; 0
    dd20:	f2 01       	movw	r30, r4
    dd22:	95 83       	std	Z+5, r25	; 0x05
    dd24:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    dd26:	94 96       	adiw	r26, 0x24	; 36
    dd28:	1c 92       	st	X, r1
    dd2a:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    dd2c:	5a 96       	adiw	r26, 0x1a	; 26
    dd2e:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    dd30:	d1 01       	movw	r26, r2
    dd32:	8c 91       	ld	r24, X
    dd34:	81 30       	cpi	r24, 0x01	; 1
    dd36:	09 f0       	breq	.+2      	; 0xdd3a <get_cpu_joypad_state+0x3d4>
    dd38:	b2 c0       	rjmp	.+356    	; 0xde9e <get_cpu_joypad_state+0x538>
    dd3a:	e9 85       	ldd	r30, Y+9	; 0x09
    dd3c:	fa 85       	ldd	r31, Y+10	; 0x0a
    dd3e:	80 81       	ld	r24, Z
    dd40:	81 11       	cpse	r24, r1
    dd42:	ad c0       	rjmp	.+346    	; 0xde9e <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    dd44:	a9 85       	ldd	r26, Y+9	; 0x09
    dd46:	ba 85       	ldd	r27, Y+10	; 0x0a
    dd48:	94 96       	adiw	r26, 0x24	; 36
    dd4a:	1c 92       	st	X, r1
    dd4c:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    dd4e:	5a 96       	adiw	r26, 0x1a	; 26
    dd50:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    dd52:	80 e2       	ldi	r24, 0x20	; 32
    dd54:	90 e0       	ldi	r25, 0x00	; 0
    dd56:	6c c0       	rjmp	.+216    	; 0xde30 <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    dd58:	a9 85       	ldd	r26, Y+9	; 0x09
    dd5a:	ba 85       	ldd	r27, Y+10	; 0x0a
    dd5c:	13 96       	adiw	r26, 0x03	; 3
    dd5e:	2d 91       	ld	r18, X+
    dd60:	3d 91       	ld	r19, X+
    dd62:	4d 91       	ld	r20, X+
    dd64:	5c 91       	ld	r21, X
    dd66:	16 97       	sbiw	r26, 0x06	; 6
    dd68:	f1 01       	movw	r30, r2
    dd6a:	63 81       	ldd	r22, Z+3	; 0x03
    dd6c:	74 81       	ldd	r23, Z+4	; 0x04
    dd6e:	85 81       	ldd	r24, Z+5	; 0x05
    dd70:	96 81       	ldd	r25, Z+6	; 0x06
    dd72:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    dd76:	18 16       	cp	r1, r24
    dd78:	dc f4       	brge	.+54     	; 0xddb0 <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    dd7a:	d1 01       	movw	r26, r2
    dd7c:	8c 91       	ld	r24, X
    dd7e:	82 30       	cpi	r24, 0x02	; 2
    dd80:	71 f4       	brne	.+28     	; 0xdd9e <get_cpu_joypad_state+0x438>
    dd82:	e9 85       	ldd	r30, Y+9	; 0x09
    dd84:	fa 85       	ldd	r31, Y+10	; 0x0a
    dd86:	80 81       	ld	r24, Z
    dd88:	81 30       	cpi	r24, 0x01	; 1
    dd8a:	49 f4       	brne	.+18     	; 0xdd9e <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    dd8c:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    dd8e:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    dd90:	80 e4       	ldi	r24, 0x40	; 64
    dd92:	90 e0       	ldi	r25, 0x00	; 0
    dd94:	d2 01       	movw	r26, r4
    dd96:	15 96       	adiw	r26, 0x05	; 5
    dd98:	9c 93       	st	X, r25
    dd9a:	8e 93       	st	-X, r24
    dd9c:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    dd9e:	f1 01       	movw	r30, r2
    dda0:	80 81       	ld	r24, Z
    dda2:	83 30       	cpi	r24, 0x03	; 3
    dda4:	09 f0       	breq	.+2      	; 0xdda8 <get_cpu_joypad_state+0x442>
    dda6:	7b c0       	rjmp	.+246    	; 0xde9e <get_cpu_joypad_state+0x538>
    dda8:	a9 85       	ldd	r26, Y+9	; 0x09
    ddaa:	ba 85       	ldd	r27, Y+10	; 0x0a
    ddac:	8c 91       	ld	r24, X
    ddae:	c8 cf       	rjmp	.-112    	; 0xdd40 <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    ddb0:	a5 01       	movw	r20, r10
    ddb2:	94 01       	movw	r18, r8
    ddb4:	c7 01       	movw	r24, r14
    ddb6:	b6 01       	movw	r22, r12
    ddb8:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    ddbc:	18 16       	cp	r1, r24
    ddbe:	e4 f5       	brge	.+120    	; 0xde38 <get_cpu_joypad_state+0x4d2>
    ddc0:	e9 85       	ldd	r30, Y+9	; 0x09
    ddc2:	fa 85       	ldd	r31, Y+10	; 0x0a
    ddc4:	23 81       	ldd	r18, Z+3	; 0x03
    ddc6:	34 81       	ldd	r19, Z+4	; 0x04
    ddc8:	45 81       	ldd	r20, Z+5	; 0x05
    ddca:	56 81       	ldd	r21, Z+6	; 0x06
    ddcc:	d1 01       	movw	r26, r2
    ddce:	13 96       	adiw	r26, 0x03	; 3
    ddd0:	6d 91       	ld	r22, X+
    ddd2:	7d 91       	ld	r23, X+
    ddd4:	8d 91       	ld	r24, X+
    ddd6:	9c 91       	ld	r25, X
    ddd8:	16 97       	sbiw	r26, 0x06	; 6
    ddda:	0e 94 ff 70 	call	0xe1fe	; 0xe1fe <__cmpsf2>
    ddde:	87 ff       	sbrs	r24, 7
    dde0:	33 c0       	rjmp	.+102    	; 0xde48 <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    dde2:	f1 01       	movw	r30, r2
    dde4:	80 81       	ld	r24, Z
    dde6:	81 11       	cpse	r24, r1
    dde8:	0f c0       	rjmp	.+30     	; 0xde08 <get_cpu_joypad_state+0x4a2>
    ddea:	a9 85       	ldd	r26, Y+9	; 0x09
    ddec:	ba 85       	ldd	r27, Y+10	; 0x0a
    ddee:	8c 91       	ld	r24, X
    ddf0:	83 30       	cpi	r24, 0x03	; 3
    ddf2:	51 f4       	brne	.+20     	; 0xde08 <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    ddf4:	94 96       	adiw	r26, 0x24	; 36
    ddf6:	1c 92       	st	X, r1
    ddf8:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    ddfa:	5a 96       	adiw	r26, 0x1a	; 26
    ddfc:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    ddfe:	80 e8       	ldi	r24, 0x80	; 128
    de00:	90 e0       	ldi	r25, 0x00	; 0
    de02:	f2 01       	movw	r30, r4
    de04:	95 83       	std	Z+5, r25	; 0x05
    de06:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    de08:	d1 01       	movw	r26, r2
    de0a:	8c 91       	ld	r24, X
    de0c:	81 30       	cpi	r24, 0x01	; 1
    de0e:	09 f0       	breq	.+2      	; 0xde12 <get_cpu_joypad_state+0x4ac>
    de10:	46 c0       	rjmp	.+140    	; 0xde9e <get_cpu_joypad_state+0x538>
    de12:	e9 85       	ldd	r30, Y+9	; 0x09
    de14:	fa 85       	ldd	r31, Y+10	; 0x0a
    de16:	80 81       	ld	r24, Z
    de18:	82 30       	cpi	r24, 0x02	; 2
    de1a:	09 f0       	breq	.+2      	; 0xde1e <get_cpu_joypad_state+0x4b8>
    de1c:	40 c0       	rjmp	.+128    	; 0xde9e <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    de1e:	a9 85       	ldd	r26, Y+9	; 0x09
    de20:	ba 85       	ldd	r27, Y+10	; 0x0a
    de22:	94 96       	adiw	r26, 0x24	; 36
    de24:	1c 92       	st	X, r1
    de26:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    de28:	5a 96       	adiw	r26, 0x1a	; 26
    de2a:	1c 92       	st	X, r1
				p->held = BTN_UP;
    de2c:	80 e1       	ldi	r24, 0x10	; 16
    de2e:	90 e0       	ldi	r25, 0x00	; 0
    de30:	f2 01       	movw	r30, r4
    de32:	95 83       	std	Z+5, r25	; 0x05
    de34:	84 83       	std	Z+4, r24	; 0x04
    de36:	33 c0       	rjmp	.+102    	; 0xde9e <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    de38:	a5 01       	movw	r20, r10
    de3a:	94 01       	movw	r18, r8
    de3c:	c7 01       	movw	r24, r14
    de3e:	b6 01       	movw	r22, r12
    de40:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    de44:	18 16       	cp	r1, r24
    de46:	5c f5       	brge	.+86     	; 0xde9e <get_cpu_joypad_state+0x538>
    de48:	a9 85       	ldd	r26, Y+9	; 0x09
    de4a:	ba 85       	ldd	r27, Y+10	; 0x0a
    de4c:	13 96       	adiw	r26, 0x03	; 3
    de4e:	2d 91       	ld	r18, X+
    de50:	3d 91       	ld	r19, X+
    de52:	4d 91       	ld	r20, X+
    de54:	5c 91       	ld	r21, X
    de56:	16 97       	sbiw	r26, 0x06	; 6
    de58:	f1 01       	movw	r30, r2
    de5a:	63 81       	ldd	r22, Z+3	; 0x03
    de5c:	74 81       	ldd	r23, Z+4	; 0x04
    de5e:	85 81       	ldd	r24, Z+5	; 0x05
    de60:	96 81       	ldd	r25, Z+6	; 0x06
    de62:	0e 94 4e 72 	call	0xe49c	; 0xe49c <__gesf2>
    de66:	18 16       	cp	r1, r24
    de68:	d4 f4       	brge	.+52     	; 0xde9e <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    de6a:	d1 01       	movw	r26, r2
    de6c:	8c 91       	ld	r24, X
    de6e:	81 11       	cpse	r24, r1
    de70:	0e c0       	rjmp	.+28     	; 0xde8e <get_cpu_joypad_state+0x528>
    de72:	e9 85       	ldd	r30, Y+9	; 0x09
    de74:	fa 85       	ldd	r31, Y+10	; 0x0a
    de76:	80 81       	ld	r24, Z
    de78:	81 30       	cpi	r24, 0x01	; 1
    de7a:	49 f4       	brne	.+18     	; 0xde8e <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    de7c:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    de7e:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    de80:	80 e4       	ldi	r24, 0x40	; 64
    de82:	90 e0       	ldi	r25, 0x00	; 0
    de84:	d2 01       	movw	r26, r4
    de86:	15 96       	adiw	r26, 0x05	; 5
    de88:	9c 93       	st	X, r25
    de8a:	8e 93       	st	-X, r24
    de8c:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    de8e:	f1 01       	movw	r30, r2
    de90:	80 81       	ld	r24, Z
    de92:	83 30       	cpi	r24, 0x03	; 3
    de94:	21 f4       	brne	.+8      	; 0xde9e <get_cpu_joypad_state+0x538>
    de96:	a9 85       	ldd	r26, Y+9	; 0x09
    de98:	ba 85       	ldd	r27, Y+10	; 0x0a
    de9a:	8c 91       	ld	r24, X
    de9c:	bd cf       	rjmp	.-134    	; 0xde18 <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    de9e:	2a 96       	adiw	r28, 0x0a	; 10
    dea0:	0f b6       	in	r0, 0x3f	; 63
    dea2:	f8 94       	cli
    dea4:	de bf       	out	0x3e, r29	; 62
    dea6:	0f be       	out	0x3f, r0	; 63
    dea8:	cd bf       	out	0x3d, r28	; 61
    deaa:	df 91       	pop	r29
    deac:	cf 91       	pop	r28
    deae:	1f 91       	pop	r17
    deb0:	0f 91       	pop	r16
    deb2:	ff 90       	pop	r15
    deb4:	ef 90       	pop	r14
    deb6:	df 90       	pop	r13
    deb8:	cf 90       	pop	r12
    deba:	bf 90       	pop	r11
    debc:	af 90       	pop	r10
    debe:	9f 90       	pop	r9
    dec0:	8f 90       	pop	r8
    dec2:	7f 90       	pop	r7
    dec4:	5f 90       	pop	r5
    dec6:	4f 90       	pop	r4
    dec8:	3f 90       	pop	r3
    deca:	2f 90       	pop	r2
    decc:	08 95       	ret

0000dece <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    dece:	bf 92       	push	r11
    ded0:	cf 92       	push	r12
    ded2:	df 92       	push	r13
    ded4:	ef 92       	push	r14
    ded6:	ff 92       	push	r15
    ded8:	0f 93       	push	r16
    deda:	1f 93       	push	r17
    dedc:	cf 93       	push	r28
    dede:	df 93       	push	r29
    dee0:	1f 92       	push	r1
    dee2:	cd b7       	in	r28, 0x3d	; 61
    dee4:	de b7       	in	r29, 0x3e	; 62
    dee6:	8c 01       	movw	r16, r24
    dee8:	f6 2e       	mov	r15, r22
    deea:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    deec:	8f e0       	ldi	r24, 0x0F	; 15
    deee:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    def0:	f8 01       	movw	r30, r16
    def2:	84 91       	lpm	r24, Z
    def4:	83 32       	cpi	r24, 0x23	; 35
    def6:	59 f1       	breq	.+86     	; 0xdf4e <stream_text_middle+0x80>
	{
		ln = strnlen_P(dialogue, 255);
    def8:	6f ef       	ldi	r22, 0xFF	; 255
    defa:	70 e0       	ldi	r23, 0x00	; 0
    defc:	c8 01       	movw	r24, r16
    defe:	0e 94 be 72 	call	0xe57c	; 0xe57c <strnlen_P>
		x = 15 - ln / 2;
    df02:	86 95       	lsr	r24
    df04:	eb 2c       	mov	r14, r11
    df06:	e8 1a       	sub	r14, r24
    df08:	e0 1a       	sub	r14, r16
    df0a:	8e 2d       	mov	r24, r14
    df0c:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    df0e:	0f 5f       	subi	r16, 0xFF	; 255
    df10:	1f 4f       	sbci	r17, 0xFF	; 255
    df12:	f8 01       	movw	r30, r16
    df14:	31 97       	sbiw	r30, 0x01	; 1
    df16:	e4 91       	lpm	r30, Z
    df18:	e9 83       	std	Y+1, r30	; 0x01
    df1a:	ee 23       	and	r30, r30
    df1c:	b1 f0       	breq	.+44     	; 0xdf4a <stream_text_middle+0x7c>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    df1e:	21 e0       	ldi	r18, 0x01	; 1
    df20:	ae 01       	movw	r20, r28
    df22:	4f 5f       	subi	r20, 0xFF	; 255
    df24:	5f 4f       	sbci	r21, 0xFF	; 255
    df26:	6f 2d       	mov	r22, r15
    df28:	0e 94 96 50 	call	0xa12c	; 0xa12c <LBPrintStr>
			LBGetJoyPadState(&p1, 0);
    df2c:	60 e0       	ldi	r22, 0x00	; 0
    df2e:	84 e1       	ldi	r24, 0x14	; 20
    df30:	9c e0       	ldi	r25, 0x0C	; 12
    df32:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
			if (!(p1.held & BTN_A)) LBWaitUs(delay);
    df36:	80 91 18 0c 	lds	r24, 0x0C18
    df3a:	90 91 19 0c 	lds	r25, 0x0C19
    df3e:	90 fd       	sbrc	r25, 0
    df40:	e4 cf       	rjmp	.-56     	; 0xdf0a <stream_text_middle+0x3c>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    df42:	c6 01       	movw	r24, r12
    df44:	0e 94 17 41 	call	0x822e	; 0x822e <WaitUs>
    df48:	e0 cf       	rjmp	.-64     	; 0xdf0a <stream_text_middle+0x3c>
		}
		y++;
    df4a:	f3 94       	inc	r15
    df4c:	d1 cf       	rjmp	.-94     	; 0xdef0 <stream_text_middle+0x22>
	}
}
    df4e:	0f 90       	pop	r0
    df50:	df 91       	pop	r29
    df52:	cf 91       	pop	r28
    df54:	1f 91       	pop	r17
    df56:	0f 91       	pop	r16
    df58:	ff 90       	pop	r15
    df5a:	ef 90       	pop	r14
    df5c:	df 90       	pop	r13
    df5e:	cf 90       	pop	r12
    df60:	bf 90       	pop	r11
    df62:	08 95       	ret

0000df64 <load_credits>:

void load_credits()
{
	fade_through();
    df64:	0e 94 8d 54 	call	0xa91a	; 0xa91a <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    df68:	44 e6       	ldi	r20, 0x64	; 100
    df6a:	50 e0       	ldi	r21, 0x00	; 0
    df6c:	65 e0       	ldi	r22, 0x05	; 5
    df6e:	89 ec       	ldi	r24, 0xC9	; 201
    df70:	92 e0       	ldi	r25, 0x02	; 2
    df72:	0e 94 67 6f 	call	0xdece	; 0xdece <stream_text_middle>
#if JAMMA
	wifi_status = WIFI_TIMEOUT;
#else
	wifi_status = activateNet();
    df76:	0e 94 b9 52 	call	0xa572	; 0xa572 <activateNet>
    df7a:	80 93 9a 0b 	sts	0x0B9A, r24
#endif
	LBWaitSeconds(4);
    df7e:	84 e0       	ldi	r24, 0x04	; 4
    df80:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <LBWaitSeconds>
	fade_through();
    df84:	0c 94 8d 54 	jmp	0xa91a	; 0xa91a <fade_through>

0000df88 <main>:
#endif

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    df88:	0e 94 59 41 	call	0x82b2	; 0x82b2 <GetTrueRandomSeed>
    df8c:	0e 94 0e 43 	call	0x861c	; 0x861c <GetPrngNumber>
	InitMusicPlayer(my_patches);
    df90:	8a e1       	ldi	r24, 0x1A	; 26
    df92:	95 e0       	ldi	r25, 0x05	; 5
    df94:	0e 94 e8 43 	call	0x87d0	; 0x87d0 <InitMusicPlayer>
	SetMasterVolume(0xff);
    df98:	8f ef       	ldi	r24, 0xFF	; 255
    df9a:	0e 94 ee 46 	call	0x8ddc	; 0x8ddc <SetMasterVolume>
	SetTileTable(tiles_data);
    df9e:	8e eb       	ldi	r24, 0xBE	; 190
    dfa0:	9e e3       	ldi	r25, 0x3E	; 62
    dfa2:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    dfa6:	8d e2       	ldi	r24, 0x2D	; 45
    dfa8:	95 e3       	ldi	r25, 0x35	; 53
    dfaa:	0e 94 ce 40 	call	0x819c	; 0x819c <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    dfae:	8b e9       	ldi	r24, 0x9B	; 155
    dfb0:	0e 94 ef 40 	call	0x81de	; 0x81de <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    dfb4:	60 e0       	ldi	r22, 0x00	; 0
    dfb6:	83 e0       	ldi	r24, 0x03	; 3
    dfb8:	0e 94 af 4f 	call	0x9f5e	; 0x9f5e <FadeIn>
	ClearVram();
    dfbc:	0e 94 d3 40 	call	0x81a6	; 0x81a6 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    dfc0:	82 e2       	ldi	r24, 0x22	; 34
    dfc2:	9b e0       	ldi	r25, 0x0B	; 11
    dfc4:	0e 94 bf 52 	call	0xa57e	; 0xa57e <init_scores>
	init_handles(&handles);
    dfc8:	89 e4       	ldi	r24, 0x49	; 73
    dfca:	9b e0       	ldi	r25, 0x0B	; 11
    dfcc:	0e 94 cb 52 	call	0xa596	; 0xa596 <init_handles>
	init_game_state();
    dfd0:	0e 94 24 54 	call	0xa848	; 0xa848 <init_game_state>
	load_credits();
    dfd4:	0e 94 b2 6f 	call	0xdf64	; 0xdf64 <load_credits>
	load_splash();
    dfd8:	0e 94 9e 62 	call	0xc53c	; 0xc53c <load_splash>
	
	while (1)
	{
		waitForVSync();
    dfdc:	0e 94 73 54 	call	0xa8e6	; 0xa8e6 <waitForVSync>
		switch (game.current_screen)
    dfe0:	80 91 69 0b 	lds	r24, 0x0B69
    dfe4:	81 30       	cpi	r24, 0x01	; 1
    dfe6:	91 f0       	breq	.+36     	; 0xe00c <main+0x84>
    dfe8:	28 f0       	brcs	.+10     	; 0xdff4 <main+0x6c>
    dfea:	82 30       	cpi	r24, 0x02	; 2
    dfec:	c9 f0       	breq	.+50     	; 0xe020 <main+0x98>
    dfee:	83 30       	cpi	r24, 0x03	; 3
    dff0:	41 f1       	breq	.+80     	; 0xe042 <main+0xba>
    dff2:	54 c0       	rjmp	.+168    	; 0xe09c <main+0x114>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    dff4:	60 e0       	ldi	r22, 0x00	; 0
    dff6:	84 e1       	ldi	r24, 0x14	; 20
    dff8:	9c e0       	ldi	r25, 0x0C	; 12
    dffa:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    dffe:	62 e4       	ldi	r22, 0x42	; 66
    e000:	7b e0       	ldi	r23, 0x0B	; 11
    e002:	84 e1       	ldi	r24, 0x14	; 20
    e004:	9c e0       	ldi	r25, 0x0C	; 12
    e006:	0e 94 3b 6a 	call	0xd476	; 0xd476 <update_splash>
				break;
    e00a:	48 c0       	rjmp	.+144    	; 0xe09c <main+0x114>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    e00c:	60 e0       	ldi	r22, 0x00	; 0
    e00e:	84 e1       	ldi	r24, 0x14	; 20
    e010:	9c e0       	ldi	r25, 0x0C	; 12
    e012:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
				update_tank_rank(&p1);
    e016:	84 e1       	ldi	r24, 0x14	; 20
    e018:	9c e0       	ldi	r25, 0x0C	; 12
    e01a:	0e 94 e6 67 	call	0xcfcc	; 0xcfcc <update_tank_rank>
				break;
    e01e:	3e c0       	rjmp	.+124    	; 0xe09c <main+0x114>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    e020:	60 e0       	ldi	r22, 0x00	; 0
    e022:	84 e1       	ldi	r24, 0x14	; 20
    e024:	9c e0       	ldi	r25, 0x0C	; 12
    e026:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    e02a:	61 e0       	ldi	r22, 0x01	; 1
    e02c:	82 e4       	ldi	r24, 0x42	; 66
    e02e:	9b e0       	ldi	r25, 0x0B	; 11
    e030:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    e034:	62 e4       	ldi	r22, 0x42	; 66
    e036:	7b e0       	ldi	r23, 0x0B	; 11
    e038:	84 e1       	ldi	r24, 0x14	; 20
    e03a:	9c e0       	ldi	r25, 0x0C	; 12
    e03c:	0e 94 1e 6b 	call	0xd63c	; 0xd63c <update_handle_select>
				break;
    e040:	2d c0       	rjmp	.+90     	; 0xe09c <main+0x114>
			case LEVEL:
				if (game.selection == PVCPU)
    e042:	80 91 7c 0b 	lds	r24, 0x0B7C
    e046:	81 11       	cpse	r24, r1
    e048:	06 c0       	rjmp	.+12     	; 0xe056 <main+0xce>
				{
					LBGetJoyPadState(&p1, 0);
    e04a:	60 e0       	ldi	r22, 0x00	; 0
    e04c:	84 e1       	ldi	r24, 0x14	; 20
    e04e:	9c e0       	ldi	r25, 0x0C	; 12
    e050:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
    e054:	0a c0       	rjmp	.+20     	; 0xe06a <main+0xe2>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    e056:	86 30       	cpi	r24, 0x06	; 6
    e058:	89 f4       	brne	.+34     	; 0xe07c <main+0xf4>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    e05a:	44 e1       	ldi	r20, 0x14	; 20
    e05c:	5c e0       	ldi	r21, 0x0C	; 12
    e05e:	6a e0       	ldi	r22, 0x0A	; 10
    e060:	7f e0       	ldi	r23, 0x0F	; 15
    e062:	8b e9       	ldi	r24, 0x9B	; 155
    e064:	9b e0       	ldi	r25, 0x0B	; 11
    e066:	0e 94 b3 6c 	call	0xd966	; 0xd966 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    e06a:	42 e4       	ldi	r20, 0x42	; 66
    e06c:	5b e0       	ldi	r21, 0x0B	; 11
    e06e:	6b e9       	ldi	r22, 0x9B	; 155
    e070:	7b e0       	ldi	r23, 0x0B	; 11
    e072:	8a e0       	ldi	r24, 0x0A	; 10
    e074:	9f e0       	ldi	r25, 0x0F	; 15
    e076:	0e 94 b3 6c 	call	0xd966	; 0xd966 <get_cpu_joypad_state>
    e07a:	0a c0       	rjmp	.+20     	; 0xe090 <main+0x108>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    e07c:	60 e0       	ldi	r22, 0x00	; 0
    e07e:	84 e1       	ldi	r24, 0x14	; 20
    e080:	9c e0       	ldi	r25, 0x0C	; 12
    e082:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    e086:	61 e0       	ldi	r22, 0x01	; 1
    e088:	82 e4       	ldi	r24, 0x42	; 66
    e08a:	9b e0       	ldi	r25, 0x0B	; 11
    e08c:	0e 94 3f 50 	call	0xa07e	; 0xa07e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    e090:	62 e4       	ldi	r22, 0x42	; 66
    e092:	7b e0       	ldi	r23, 0x0B	; 11
    e094:	84 e1       	ldi	r24, 0x14	; 20
    e096:	9c e0       	ldi	r25, 0x0C	; 12
    e098:	0e 94 b6 65 	call	0xcb6c	; 0xcb6c <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e09c:	80 91 01 01 	lds	r24, 0x0101
    e0a0:	90 91 02 01 	lds	r25, 0x0102
    e0a4:	01 96       	adiw	r24, 0x01	; 1
    e0a6:	90 93 02 01 	sts	0x0102, r25
    e0aa:	80 93 01 01 	sts	0x0101, r24
	}
    e0ae:	96 cf       	rjmp	.-212    	; 0xdfdc <main+0x54>

0000e0b0 <__udivmodqi4>:
    e0b0:	99 1b       	sub	r25, r25
    e0b2:	79 e0       	ldi	r23, 0x09	; 9
    e0b4:	04 c0       	rjmp	.+8      	; 0xe0be <__udivmodqi4_ep>

0000e0b6 <__udivmodqi4_loop>:
    e0b6:	99 1f       	adc	r25, r25
    e0b8:	96 17       	cp	r25, r22
    e0ba:	08 f0       	brcs	.+2      	; 0xe0be <__udivmodqi4_ep>
    e0bc:	96 1b       	sub	r25, r22

0000e0be <__udivmodqi4_ep>:
    e0be:	88 1f       	adc	r24, r24
    e0c0:	7a 95       	dec	r23
    e0c2:	c9 f7       	brne	.-14     	; 0xe0b6 <__udivmodqi4_loop>
    e0c4:	80 95       	com	r24
    e0c6:	08 95       	ret

0000e0c8 <__divmodqi4>:
    e0c8:	87 fb       	bst	r24, 7
    e0ca:	08 2e       	mov	r0, r24
    e0cc:	06 26       	eor	r0, r22
    e0ce:	87 fd       	sbrc	r24, 7
    e0d0:	81 95       	neg	r24
    e0d2:	67 fd       	sbrc	r22, 7
    e0d4:	61 95       	neg	r22
    e0d6:	0e 94 58 70 	call	0xe0b0	; 0xe0b0 <__udivmodqi4>
    e0da:	0e f4       	brtc	.+2      	; 0xe0de <__divmodqi4_1>
    e0dc:	91 95       	neg	r25

0000e0de <__divmodqi4_1>:
    e0de:	07 fc       	sbrc	r0, 7
    e0e0:	81 95       	neg	r24

0000e0e2 <__divmodqi4_exit>:
    e0e2:	08 95       	ret

0000e0e4 <__udivmodhi4>:
    e0e4:	aa 1b       	sub	r26, r26
    e0e6:	bb 1b       	sub	r27, r27
    e0e8:	51 e1       	ldi	r21, 0x11	; 17
    e0ea:	07 c0       	rjmp	.+14     	; 0xe0fa <__udivmodhi4_ep>

0000e0ec <__udivmodhi4_loop>:
    e0ec:	aa 1f       	adc	r26, r26
    e0ee:	bb 1f       	adc	r27, r27
    e0f0:	a6 17       	cp	r26, r22
    e0f2:	b7 07       	cpc	r27, r23
    e0f4:	10 f0       	brcs	.+4      	; 0xe0fa <__udivmodhi4_ep>
    e0f6:	a6 1b       	sub	r26, r22
    e0f8:	b7 0b       	sbc	r27, r23

0000e0fa <__udivmodhi4_ep>:
    e0fa:	88 1f       	adc	r24, r24
    e0fc:	99 1f       	adc	r25, r25
    e0fe:	5a 95       	dec	r21
    e100:	a9 f7       	brne	.-22     	; 0xe0ec <__udivmodhi4_loop>
    e102:	80 95       	com	r24
    e104:	90 95       	com	r25
    e106:	bc 01       	movw	r22, r24
    e108:	cd 01       	movw	r24, r26
    e10a:	08 95       	ret

0000e10c <__divmodhi4>:
    e10c:	97 fb       	bst	r25, 7
    e10e:	07 2e       	mov	r0, r23
    e110:	16 f4       	brtc	.+4      	; 0xe116 <__divmodhi4+0xa>
    e112:	00 94       	com	r0
    e114:	07 d0       	rcall	.+14     	; 0xe124 <__divmodhi4_neg1>
    e116:	77 fd       	sbrc	r23, 7
    e118:	09 d0       	rcall	.+18     	; 0xe12c <__divmodhi4_neg2>
    e11a:	0e 94 72 70 	call	0xe0e4	; 0xe0e4 <__udivmodhi4>
    e11e:	07 fc       	sbrc	r0, 7
    e120:	05 d0       	rcall	.+10     	; 0xe12c <__divmodhi4_neg2>
    e122:	3e f4       	brtc	.+14     	; 0xe132 <__divmodhi4_exit>

0000e124 <__divmodhi4_neg1>:
    e124:	90 95       	com	r25
    e126:	81 95       	neg	r24
    e128:	9f 4f       	sbci	r25, 0xFF	; 255
    e12a:	08 95       	ret

0000e12c <__divmodhi4_neg2>:
    e12c:	70 95       	com	r23
    e12e:	61 95       	neg	r22
    e130:	7f 4f       	sbci	r23, 0xFF	; 255

0000e132 <__divmodhi4_exit>:
    e132:	08 95       	ret

0000e134 <__subsf3>:
    e134:	50 58       	subi	r21, 0x80	; 128

0000e136 <__addsf3>:
    e136:	bb 27       	eor	r27, r27
    e138:	aa 27       	eor	r26, r26
    e13a:	0e d0       	rcall	.+28     	; 0xe158 <__addsf3x>
    e13c:	75 c1       	rjmp	.+746    	; 0xe428 <__fp_round>
    e13e:	66 d1       	rcall	.+716    	; 0xe40c <__fp_pscA>
    e140:	30 f0       	brcs	.+12     	; 0xe14e <__addsf3+0x18>
    e142:	6b d1       	rcall	.+726    	; 0xe41a <__fp_pscB>
    e144:	20 f0       	brcs	.+8      	; 0xe14e <__addsf3+0x18>
    e146:	31 f4       	brne	.+12     	; 0xe154 <__addsf3+0x1e>
    e148:	9f 3f       	cpi	r25, 0xFF	; 255
    e14a:	11 f4       	brne	.+4      	; 0xe150 <__addsf3+0x1a>
    e14c:	1e f4       	brtc	.+6      	; 0xe154 <__addsf3+0x1e>
    e14e:	5b c1       	rjmp	.+694    	; 0xe406 <__fp_nan>
    e150:	0e f4       	brtc	.+2      	; 0xe154 <__addsf3+0x1e>
    e152:	e0 95       	com	r30
    e154:	e7 fb       	bst	r30, 7
    e156:	51 c1       	rjmp	.+674    	; 0xe3fa <__fp_inf>

0000e158 <__addsf3x>:
    e158:	e9 2f       	mov	r30, r25
    e15a:	77 d1       	rcall	.+750    	; 0xe44a <__fp_split3>
    e15c:	80 f3       	brcs	.-32     	; 0xe13e <__addsf3+0x8>
    e15e:	ba 17       	cp	r27, r26
    e160:	62 07       	cpc	r22, r18
    e162:	73 07       	cpc	r23, r19
    e164:	84 07       	cpc	r24, r20
    e166:	95 07       	cpc	r25, r21
    e168:	18 f0       	brcs	.+6      	; 0xe170 <__addsf3x+0x18>
    e16a:	71 f4       	brne	.+28     	; 0xe188 <__addsf3x+0x30>
    e16c:	9e f5       	brtc	.+102    	; 0xe1d4 <__addsf3x+0x7c>
    e16e:	8f c1       	rjmp	.+798    	; 0xe48e <__fp_zero>
    e170:	0e f4       	brtc	.+2      	; 0xe174 <__addsf3x+0x1c>
    e172:	e0 95       	com	r30
    e174:	0b 2e       	mov	r0, r27
    e176:	ba 2f       	mov	r27, r26
    e178:	a0 2d       	mov	r26, r0
    e17a:	0b 01       	movw	r0, r22
    e17c:	b9 01       	movw	r22, r18
    e17e:	90 01       	movw	r18, r0
    e180:	0c 01       	movw	r0, r24
    e182:	ca 01       	movw	r24, r20
    e184:	a0 01       	movw	r20, r0
    e186:	11 24       	eor	r1, r1
    e188:	ff 27       	eor	r31, r31
    e18a:	59 1b       	sub	r21, r25
    e18c:	99 f0       	breq	.+38     	; 0xe1b4 <__addsf3x+0x5c>
    e18e:	59 3f       	cpi	r21, 0xF9	; 249
    e190:	50 f4       	brcc	.+20     	; 0xe1a6 <__addsf3x+0x4e>
    e192:	50 3e       	cpi	r21, 0xE0	; 224
    e194:	68 f1       	brcs	.+90     	; 0xe1f0 <__addsf3x+0x98>
    e196:	1a 16       	cp	r1, r26
    e198:	f0 40       	sbci	r31, 0x00	; 0
    e19a:	a2 2f       	mov	r26, r18
    e19c:	23 2f       	mov	r18, r19
    e19e:	34 2f       	mov	r19, r20
    e1a0:	44 27       	eor	r20, r20
    e1a2:	58 5f       	subi	r21, 0xF8	; 248
    e1a4:	f3 cf       	rjmp	.-26     	; 0xe18c <__addsf3x+0x34>
    e1a6:	46 95       	lsr	r20
    e1a8:	37 95       	ror	r19
    e1aa:	27 95       	ror	r18
    e1ac:	a7 95       	ror	r26
    e1ae:	f0 40       	sbci	r31, 0x00	; 0
    e1b0:	53 95       	inc	r21
    e1b2:	c9 f7       	brne	.-14     	; 0xe1a6 <__addsf3x+0x4e>
    e1b4:	7e f4       	brtc	.+30     	; 0xe1d4 <__addsf3x+0x7c>
    e1b6:	1f 16       	cp	r1, r31
    e1b8:	ba 0b       	sbc	r27, r26
    e1ba:	62 0b       	sbc	r22, r18
    e1bc:	73 0b       	sbc	r23, r19
    e1be:	84 0b       	sbc	r24, r20
    e1c0:	ba f0       	brmi	.+46     	; 0xe1f0 <__addsf3x+0x98>
    e1c2:	91 50       	subi	r25, 0x01	; 1
    e1c4:	a1 f0       	breq	.+40     	; 0xe1ee <__addsf3x+0x96>
    e1c6:	ff 0f       	add	r31, r31
    e1c8:	bb 1f       	adc	r27, r27
    e1ca:	66 1f       	adc	r22, r22
    e1cc:	77 1f       	adc	r23, r23
    e1ce:	88 1f       	adc	r24, r24
    e1d0:	c2 f7       	brpl	.-16     	; 0xe1c2 <__addsf3x+0x6a>
    e1d2:	0e c0       	rjmp	.+28     	; 0xe1f0 <__addsf3x+0x98>
    e1d4:	ba 0f       	add	r27, r26
    e1d6:	62 1f       	adc	r22, r18
    e1d8:	73 1f       	adc	r23, r19
    e1da:	84 1f       	adc	r24, r20
    e1dc:	48 f4       	brcc	.+18     	; 0xe1f0 <__addsf3x+0x98>
    e1de:	87 95       	ror	r24
    e1e0:	77 95       	ror	r23
    e1e2:	67 95       	ror	r22
    e1e4:	b7 95       	ror	r27
    e1e6:	f7 95       	ror	r31
    e1e8:	9e 3f       	cpi	r25, 0xFE	; 254
    e1ea:	08 f0       	brcs	.+2      	; 0xe1ee <__addsf3x+0x96>
    e1ec:	b3 cf       	rjmp	.-154    	; 0xe154 <__addsf3+0x1e>
    e1ee:	93 95       	inc	r25
    e1f0:	88 0f       	add	r24, r24
    e1f2:	08 f0       	brcs	.+2      	; 0xe1f6 <__addsf3x+0x9e>
    e1f4:	99 27       	eor	r25, r25
    e1f6:	ee 0f       	add	r30, r30
    e1f8:	97 95       	ror	r25
    e1fa:	87 95       	ror	r24
    e1fc:	08 95       	ret

0000e1fe <__cmpsf2>:
    e1fe:	d9 d0       	rcall	.+434    	; 0xe3b2 <__fp_cmp>
    e200:	08 f4       	brcc	.+2      	; 0xe204 <__cmpsf2+0x6>
    e202:	81 e0       	ldi	r24, 0x01	; 1
    e204:	08 95       	ret

0000e206 <__divsf3>:
    e206:	0c d0       	rcall	.+24     	; 0xe220 <__divsf3x>
    e208:	0f c1       	rjmp	.+542    	; 0xe428 <__fp_round>
    e20a:	07 d1       	rcall	.+526    	; 0xe41a <__fp_pscB>
    e20c:	40 f0       	brcs	.+16     	; 0xe21e <__divsf3+0x18>
    e20e:	fe d0       	rcall	.+508    	; 0xe40c <__fp_pscA>
    e210:	30 f0       	brcs	.+12     	; 0xe21e <__divsf3+0x18>
    e212:	21 f4       	brne	.+8      	; 0xe21c <__divsf3+0x16>
    e214:	5f 3f       	cpi	r21, 0xFF	; 255
    e216:	19 f0       	breq	.+6      	; 0xe21e <__divsf3+0x18>
    e218:	f0 c0       	rjmp	.+480    	; 0xe3fa <__fp_inf>
    e21a:	51 11       	cpse	r21, r1
    e21c:	39 c1       	rjmp	.+626    	; 0xe490 <__fp_szero>
    e21e:	f3 c0       	rjmp	.+486    	; 0xe406 <__fp_nan>

0000e220 <__divsf3x>:
    e220:	14 d1       	rcall	.+552    	; 0xe44a <__fp_split3>
    e222:	98 f3       	brcs	.-26     	; 0xe20a <__divsf3+0x4>

0000e224 <__divsf3_pse>:
    e224:	99 23       	and	r25, r25
    e226:	c9 f3       	breq	.-14     	; 0xe21a <__divsf3+0x14>
    e228:	55 23       	and	r21, r21
    e22a:	b1 f3       	breq	.-20     	; 0xe218 <__divsf3+0x12>
    e22c:	95 1b       	sub	r25, r21
    e22e:	55 0b       	sbc	r21, r21
    e230:	bb 27       	eor	r27, r27
    e232:	aa 27       	eor	r26, r26
    e234:	62 17       	cp	r22, r18
    e236:	73 07       	cpc	r23, r19
    e238:	84 07       	cpc	r24, r20
    e23a:	38 f0       	brcs	.+14     	; 0xe24a <__divsf3_pse+0x26>
    e23c:	9f 5f       	subi	r25, 0xFF	; 255
    e23e:	5f 4f       	sbci	r21, 0xFF	; 255
    e240:	22 0f       	add	r18, r18
    e242:	33 1f       	adc	r19, r19
    e244:	44 1f       	adc	r20, r20
    e246:	aa 1f       	adc	r26, r26
    e248:	a9 f3       	breq	.-22     	; 0xe234 <__divsf3_pse+0x10>
    e24a:	33 d0       	rcall	.+102    	; 0xe2b2 <__divsf3_pse+0x8e>
    e24c:	0e 2e       	mov	r0, r30
    e24e:	3a f0       	brmi	.+14     	; 0xe25e <__divsf3_pse+0x3a>
    e250:	e0 e8       	ldi	r30, 0x80	; 128
    e252:	30 d0       	rcall	.+96     	; 0xe2b4 <__divsf3_pse+0x90>
    e254:	91 50       	subi	r25, 0x01	; 1
    e256:	50 40       	sbci	r21, 0x00	; 0
    e258:	e6 95       	lsr	r30
    e25a:	00 1c       	adc	r0, r0
    e25c:	ca f7       	brpl	.-14     	; 0xe250 <__divsf3_pse+0x2c>
    e25e:	29 d0       	rcall	.+82     	; 0xe2b2 <__divsf3_pse+0x8e>
    e260:	fe 2f       	mov	r31, r30
    e262:	27 d0       	rcall	.+78     	; 0xe2b2 <__divsf3_pse+0x8e>
    e264:	66 0f       	add	r22, r22
    e266:	77 1f       	adc	r23, r23
    e268:	88 1f       	adc	r24, r24
    e26a:	bb 1f       	adc	r27, r27
    e26c:	26 17       	cp	r18, r22
    e26e:	37 07       	cpc	r19, r23
    e270:	48 07       	cpc	r20, r24
    e272:	ab 07       	cpc	r26, r27
    e274:	b0 e8       	ldi	r27, 0x80	; 128
    e276:	09 f0       	breq	.+2      	; 0xe27a <__divsf3_pse+0x56>
    e278:	bb 0b       	sbc	r27, r27
    e27a:	80 2d       	mov	r24, r0
    e27c:	bf 01       	movw	r22, r30
    e27e:	ff 27       	eor	r31, r31
    e280:	93 58       	subi	r25, 0x83	; 131
    e282:	5f 4f       	sbci	r21, 0xFF	; 255
    e284:	2a f0       	brmi	.+10     	; 0xe290 <__divsf3_pse+0x6c>
    e286:	9e 3f       	cpi	r25, 0xFE	; 254
    e288:	51 05       	cpc	r21, r1
    e28a:	68 f0       	brcs	.+26     	; 0xe2a6 <__divsf3_pse+0x82>
    e28c:	b6 c0       	rjmp	.+364    	; 0xe3fa <__fp_inf>
    e28e:	00 c1       	rjmp	.+512    	; 0xe490 <__fp_szero>
    e290:	5f 3f       	cpi	r21, 0xFF	; 255
    e292:	ec f3       	brlt	.-6      	; 0xe28e <__divsf3_pse+0x6a>
    e294:	98 3e       	cpi	r25, 0xE8	; 232
    e296:	dc f3       	brlt	.-10     	; 0xe28e <__divsf3_pse+0x6a>
    e298:	86 95       	lsr	r24
    e29a:	77 95       	ror	r23
    e29c:	67 95       	ror	r22
    e29e:	b7 95       	ror	r27
    e2a0:	f7 95       	ror	r31
    e2a2:	9f 5f       	subi	r25, 0xFF	; 255
    e2a4:	c9 f7       	brne	.-14     	; 0xe298 <__divsf3_pse+0x74>
    e2a6:	88 0f       	add	r24, r24
    e2a8:	91 1d       	adc	r25, r1
    e2aa:	96 95       	lsr	r25
    e2ac:	87 95       	ror	r24
    e2ae:	97 f9       	bld	r25, 7
    e2b0:	08 95       	ret
    e2b2:	e1 e0       	ldi	r30, 0x01	; 1
    e2b4:	66 0f       	add	r22, r22
    e2b6:	77 1f       	adc	r23, r23
    e2b8:	88 1f       	adc	r24, r24
    e2ba:	bb 1f       	adc	r27, r27
    e2bc:	62 17       	cp	r22, r18
    e2be:	73 07       	cpc	r23, r19
    e2c0:	84 07       	cpc	r24, r20
    e2c2:	ba 07       	cpc	r27, r26
    e2c4:	20 f0       	brcs	.+8      	; 0xe2ce <__divsf3_pse+0xaa>
    e2c6:	62 1b       	sub	r22, r18
    e2c8:	73 0b       	sbc	r23, r19
    e2ca:	84 0b       	sbc	r24, r20
    e2cc:	ba 0b       	sbc	r27, r26
    e2ce:	ee 1f       	adc	r30, r30
    e2d0:	88 f7       	brcc	.-30     	; 0xe2b4 <__divsf3_pse+0x90>
    e2d2:	e0 95       	com	r30
    e2d4:	08 95       	ret

0000e2d6 <__fixsfsi>:
    e2d6:	04 d0       	rcall	.+8      	; 0xe2e0 <__fixunssfsi>
    e2d8:	68 94       	set
    e2da:	b1 11       	cpse	r27, r1
    e2dc:	d9 c0       	rjmp	.+434    	; 0xe490 <__fp_szero>
    e2de:	08 95       	ret

0000e2e0 <__fixunssfsi>:
    e2e0:	bc d0       	rcall	.+376    	; 0xe45a <__fp_splitA>
    e2e2:	88 f0       	brcs	.+34     	; 0xe306 <__fixunssfsi+0x26>
    e2e4:	9f 57       	subi	r25, 0x7F	; 127
    e2e6:	90 f0       	brcs	.+36     	; 0xe30c <__fixunssfsi+0x2c>
    e2e8:	b9 2f       	mov	r27, r25
    e2ea:	99 27       	eor	r25, r25
    e2ec:	b7 51       	subi	r27, 0x17	; 23
    e2ee:	a0 f0       	brcs	.+40     	; 0xe318 <__fixunssfsi+0x38>
    e2f0:	d1 f0       	breq	.+52     	; 0xe326 <__fixunssfsi+0x46>
    e2f2:	66 0f       	add	r22, r22
    e2f4:	77 1f       	adc	r23, r23
    e2f6:	88 1f       	adc	r24, r24
    e2f8:	99 1f       	adc	r25, r25
    e2fa:	1a f0       	brmi	.+6      	; 0xe302 <__fixunssfsi+0x22>
    e2fc:	ba 95       	dec	r27
    e2fe:	c9 f7       	brne	.-14     	; 0xe2f2 <__fixunssfsi+0x12>
    e300:	12 c0       	rjmp	.+36     	; 0xe326 <__fixunssfsi+0x46>
    e302:	b1 30       	cpi	r27, 0x01	; 1
    e304:	81 f0       	breq	.+32     	; 0xe326 <__fixunssfsi+0x46>
    e306:	c3 d0       	rcall	.+390    	; 0xe48e <__fp_zero>
    e308:	b1 e0       	ldi	r27, 0x01	; 1
    e30a:	08 95       	ret
    e30c:	c0 c0       	rjmp	.+384    	; 0xe48e <__fp_zero>
    e30e:	67 2f       	mov	r22, r23
    e310:	78 2f       	mov	r23, r24
    e312:	88 27       	eor	r24, r24
    e314:	b8 5f       	subi	r27, 0xF8	; 248
    e316:	39 f0       	breq	.+14     	; 0xe326 <__fixunssfsi+0x46>
    e318:	b9 3f       	cpi	r27, 0xF9	; 249
    e31a:	cc f3       	brlt	.-14     	; 0xe30e <__fixunssfsi+0x2e>
    e31c:	86 95       	lsr	r24
    e31e:	77 95       	ror	r23
    e320:	67 95       	ror	r22
    e322:	b3 95       	inc	r27
    e324:	d9 f7       	brne	.-10     	; 0xe31c <__fixunssfsi+0x3c>
    e326:	3e f4       	brtc	.+14     	; 0xe336 <__fixunssfsi+0x56>
    e328:	90 95       	com	r25
    e32a:	80 95       	com	r24
    e32c:	70 95       	com	r23
    e32e:	61 95       	neg	r22
    e330:	7f 4f       	sbci	r23, 0xFF	; 255
    e332:	8f 4f       	sbci	r24, 0xFF	; 255
    e334:	9f 4f       	sbci	r25, 0xFF	; 255
    e336:	08 95       	ret

0000e338 <__floatunsisf>:
    e338:	e8 94       	clt
    e33a:	09 c0       	rjmp	.+18     	; 0xe34e <__floatsisf+0x12>

0000e33c <__floatsisf>:
    e33c:	97 fb       	bst	r25, 7
    e33e:	3e f4       	brtc	.+14     	; 0xe34e <__floatsisf+0x12>
    e340:	90 95       	com	r25
    e342:	80 95       	com	r24
    e344:	70 95       	com	r23
    e346:	61 95       	neg	r22
    e348:	7f 4f       	sbci	r23, 0xFF	; 255
    e34a:	8f 4f       	sbci	r24, 0xFF	; 255
    e34c:	9f 4f       	sbci	r25, 0xFF	; 255
    e34e:	99 23       	and	r25, r25
    e350:	a9 f0       	breq	.+42     	; 0xe37c <__floatsisf+0x40>
    e352:	f9 2f       	mov	r31, r25
    e354:	96 e9       	ldi	r25, 0x96	; 150
    e356:	bb 27       	eor	r27, r27
    e358:	93 95       	inc	r25
    e35a:	f6 95       	lsr	r31
    e35c:	87 95       	ror	r24
    e35e:	77 95       	ror	r23
    e360:	67 95       	ror	r22
    e362:	b7 95       	ror	r27
    e364:	f1 11       	cpse	r31, r1
    e366:	f8 cf       	rjmp	.-16     	; 0xe358 <__floatsisf+0x1c>
    e368:	fa f4       	brpl	.+62     	; 0xe3a8 <__floatsisf+0x6c>
    e36a:	bb 0f       	add	r27, r27
    e36c:	11 f4       	brne	.+4      	; 0xe372 <__floatsisf+0x36>
    e36e:	60 ff       	sbrs	r22, 0
    e370:	1b c0       	rjmp	.+54     	; 0xe3a8 <__floatsisf+0x6c>
    e372:	6f 5f       	subi	r22, 0xFF	; 255
    e374:	7f 4f       	sbci	r23, 0xFF	; 255
    e376:	8f 4f       	sbci	r24, 0xFF	; 255
    e378:	9f 4f       	sbci	r25, 0xFF	; 255
    e37a:	16 c0       	rjmp	.+44     	; 0xe3a8 <__floatsisf+0x6c>
    e37c:	88 23       	and	r24, r24
    e37e:	11 f0       	breq	.+4      	; 0xe384 <__floatsisf+0x48>
    e380:	96 e9       	ldi	r25, 0x96	; 150
    e382:	11 c0       	rjmp	.+34     	; 0xe3a6 <__floatsisf+0x6a>
    e384:	77 23       	and	r23, r23
    e386:	21 f0       	breq	.+8      	; 0xe390 <__floatsisf+0x54>
    e388:	9e e8       	ldi	r25, 0x8E	; 142
    e38a:	87 2f       	mov	r24, r23
    e38c:	76 2f       	mov	r23, r22
    e38e:	05 c0       	rjmp	.+10     	; 0xe39a <__floatsisf+0x5e>
    e390:	66 23       	and	r22, r22
    e392:	71 f0       	breq	.+28     	; 0xe3b0 <__floatsisf+0x74>
    e394:	96 e8       	ldi	r25, 0x86	; 134
    e396:	86 2f       	mov	r24, r22
    e398:	70 e0       	ldi	r23, 0x00	; 0
    e39a:	60 e0       	ldi	r22, 0x00	; 0
    e39c:	2a f0       	brmi	.+10     	; 0xe3a8 <__floatsisf+0x6c>
    e39e:	9a 95       	dec	r25
    e3a0:	66 0f       	add	r22, r22
    e3a2:	77 1f       	adc	r23, r23
    e3a4:	88 1f       	adc	r24, r24
    e3a6:	da f7       	brpl	.-10     	; 0xe39e <__floatsisf+0x62>
    e3a8:	88 0f       	add	r24, r24
    e3aa:	96 95       	lsr	r25
    e3ac:	87 95       	ror	r24
    e3ae:	97 f9       	bld	r25, 7
    e3b0:	08 95       	ret

0000e3b2 <__fp_cmp>:
    e3b2:	99 0f       	add	r25, r25
    e3b4:	00 08       	sbc	r0, r0
    e3b6:	55 0f       	add	r21, r21
    e3b8:	aa 0b       	sbc	r26, r26
    e3ba:	e0 e8       	ldi	r30, 0x80	; 128
    e3bc:	fe ef       	ldi	r31, 0xFE	; 254
    e3be:	16 16       	cp	r1, r22
    e3c0:	17 06       	cpc	r1, r23
    e3c2:	e8 07       	cpc	r30, r24
    e3c4:	f9 07       	cpc	r31, r25
    e3c6:	c0 f0       	brcs	.+48     	; 0xe3f8 <__fp_cmp+0x46>
    e3c8:	12 16       	cp	r1, r18
    e3ca:	13 06       	cpc	r1, r19
    e3cc:	e4 07       	cpc	r30, r20
    e3ce:	f5 07       	cpc	r31, r21
    e3d0:	98 f0       	brcs	.+38     	; 0xe3f8 <__fp_cmp+0x46>
    e3d2:	62 1b       	sub	r22, r18
    e3d4:	73 0b       	sbc	r23, r19
    e3d6:	84 0b       	sbc	r24, r20
    e3d8:	95 0b       	sbc	r25, r21
    e3da:	39 f4       	brne	.+14     	; 0xe3ea <__fp_cmp+0x38>
    e3dc:	0a 26       	eor	r0, r26
    e3de:	61 f0       	breq	.+24     	; 0xe3f8 <__fp_cmp+0x46>
    e3e0:	23 2b       	or	r18, r19
    e3e2:	24 2b       	or	r18, r20
    e3e4:	25 2b       	or	r18, r21
    e3e6:	21 f4       	brne	.+8      	; 0xe3f0 <__fp_cmp+0x3e>
    e3e8:	08 95       	ret
    e3ea:	0a 26       	eor	r0, r26
    e3ec:	09 f4       	brne	.+2      	; 0xe3f0 <__fp_cmp+0x3e>
    e3ee:	a1 40       	sbci	r26, 0x01	; 1
    e3f0:	a6 95       	lsr	r26
    e3f2:	8f ef       	ldi	r24, 0xFF	; 255
    e3f4:	81 1d       	adc	r24, r1
    e3f6:	81 1d       	adc	r24, r1
    e3f8:	08 95       	ret

0000e3fa <__fp_inf>:
    e3fa:	97 f9       	bld	r25, 7
    e3fc:	9f 67       	ori	r25, 0x7F	; 127
    e3fe:	80 e8       	ldi	r24, 0x80	; 128
    e400:	70 e0       	ldi	r23, 0x00	; 0
    e402:	60 e0       	ldi	r22, 0x00	; 0
    e404:	08 95       	ret

0000e406 <__fp_nan>:
    e406:	9f ef       	ldi	r25, 0xFF	; 255
    e408:	80 ec       	ldi	r24, 0xC0	; 192
    e40a:	08 95       	ret

0000e40c <__fp_pscA>:
    e40c:	00 24       	eor	r0, r0
    e40e:	0a 94       	dec	r0
    e410:	16 16       	cp	r1, r22
    e412:	17 06       	cpc	r1, r23
    e414:	18 06       	cpc	r1, r24
    e416:	09 06       	cpc	r0, r25
    e418:	08 95       	ret

0000e41a <__fp_pscB>:
    e41a:	00 24       	eor	r0, r0
    e41c:	0a 94       	dec	r0
    e41e:	12 16       	cp	r1, r18
    e420:	13 06       	cpc	r1, r19
    e422:	14 06       	cpc	r1, r20
    e424:	05 06       	cpc	r0, r21
    e426:	08 95       	ret

0000e428 <__fp_round>:
    e428:	09 2e       	mov	r0, r25
    e42a:	03 94       	inc	r0
    e42c:	00 0c       	add	r0, r0
    e42e:	11 f4       	brne	.+4      	; 0xe434 <__fp_round+0xc>
    e430:	88 23       	and	r24, r24
    e432:	52 f0       	brmi	.+20     	; 0xe448 <__fp_round+0x20>
    e434:	bb 0f       	add	r27, r27
    e436:	40 f4       	brcc	.+16     	; 0xe448 <__fp_round+0x20>
    e438:	bf 2b       	or	r27, r31
    e43a:	11 f4       	brne	.+4      	; 0xe440 <__fp_round+0x18>
    e43c:	60 ff       	sbrs	r22, 0
    e43e:	04 c0       	rjmp	.+8      	; 0xe448 <__fp_round+0x20>
    e440:	6f 5f       	subi	r22, 0xFF	; 255
    e442:	7f 4f       	sbci	r23, 0xFF	; 255
    e444:	8f 4f       	sbci	r24, 0xFF	; 255
    e446:	9f 4f       	sbci	r25, 0xFF	; 255
    e448:	08 95       	ret

0000e44a <__fp_split3>:
    e44a:	57 fd       	sbrc	r21, 7
    e44c:	90 58       	subi	r25, 0x80	; 128
    e44e:	44 0f       	add	r20, r20
    e450:	55 1f       	adc	r21, r21
    e452:	59 f0       	breq	.+22     	; 0xe46a <__fp_splitA+0x10>
    e454:	5f 3f       	cpi	r21, 0xFF	; 255
    e456:	71 f0       	breq	.+28     	; 0xe474 <__fp_splitA+0x1a>
    e458:	47 95       	ror	r20

0000e45a <__fp_splitA>:
    e45a:	88 0f       	add	r24, r24
    e45c:	97 fb       	bst	r25, 7
    e45e:	99 1f       	adc	r25, r25
    e460:	61 f0       	breq	.+24     	; 0xe47a <__fp_splitA+0x20>
    e462:	9f 3f       	cpi	r25, 0xFF	; 255
    e464:	79 f0       	breq	.+30     	; 0xe484 <__fp_splitA+0x2a>
    e466:	87 95       	ror	r24
    e468:	08 95       	ret
    e46a:	12 16       	cp	r1, r18
    e46c:	13 06       	cpc	r1, r19
    e46e:	14 06       	cpc	r1, r20
    e470:	55 1f       	adc	r21, r21
    e472:	f2 cf       	rjmp	.-28     	; 0xe458 <__fp_split3+0xe>
    e474:	46 95       	lsr	r20
    e476:	f1 df       	rcall	.-30     	; 0xe45a <__fp_splitA>
    e478:	08 c0       	rjmp	.+16     	; 0xe48a <__fp_splitA+0x30>
    e47a:	16 16       	cp	r1, r22
    e47c:	17 06       	cpc	r1, r23
    e47e:	18 06       	cpc	r1, r24
    e480:	99 1f       	adc	r25, r25
    e482:	f1 cf       	rjmp	.-30     	; 0xe466 <__fp_splitA+0xc>
    e484:	86 95       	lsr	r24
    e486:	71 05       	cpc	r23, r1
    e488:	61 05       	cpc	r22, r1
    e48a:	08 94       	sec
    e48c:	08 95       	ret

0000e48e <__fp_zero>:
    e48e:	e8 94       	clt

0000e490 <__fp_szero>:
    e490:	bb 27       	eor	r27, r27
    e492:	66 27       	eor	r22, r22
    e494:	77 27       	eor	r23, r23
    e496:	cb 01       	movw	r24, r22
    e498:	97 f9       	bld	r25, 7
    e49a:	08 95       	ret

0000e49c <__gesf2>:
    e49c:	8a df       	rcall	.-236    	; 0xe3b2 <__fp_cmp>
    e49e:	08 f4       	brcc	.+2      	; 0xe4a2 <__gesf2+0x6>
    e4a0:	8f ef       	ldi	r24, 0xFF	; 255
    e4a2:	08 95       	ret

0000e4a4 <__mulsf3>:
    e4a4:	0b d0       	rcall	.+22     	; 0xe4bc <__mulsf3x>
    e4a6:	c0 cf       	rjmp	.-128    	; 0xe428 <__fp_round>
    e4a8:	b1 df       	rcall	.-158    	; 0xe40c <__fp_pscA>
    e4aa:	28 f0       	brcs	.+10     	; 0xe4b6 <__mulsf3+0x12>
    e4ac:	b6 df       	rcall	.-148    	; 0xe41a <__fp_pscB>
    e4ae:	18 f0       	brcs	.+6      	; 0xe4b6 <__mulsf3+0x12>
    e4b0:	95 23       	and	r25, r21
    e4b2:	09 f0       	breq	.+2      	; 0xe4b6 <__mulsf3+0x12>
    e4b4:	a2 cf       	rjmp	.-188    	; 0xe3fa <__fp_inf>
    e4b6:	a7 cf       	rjmp	.-178    	; 0xe406 <__fp_nan>
    e4b8:	11 24       	eor	r1, r1
    e4ba:	ea cf       	rjmp	.-44     	; 0xe490 <__fp_szero>

0000e4bc <__mulsf3x>:
    e4bc:	c6 df       	rcall	.-116    	; 0xe44a <__fp_split3>
    e4be:	a0 f3       	brcs	.-24     	; 0xe4a8 <__mulsf3+0x4>

0000e4c0 <__mulsf3_pse>:
    e4c0:	95 9f       	mul	r25, r21
    e4c2:	d1 f3       	breq	.-12     	; 0xe4b8 <__mulsf3+0x14>
    e4c4:	95 0f       	add	r25, r21
    e4c6:	50 e0       	ldi	r21, 0x00	; 0
    e4c8:	55 1f       	adc	r21, r21
    e4ca:	62 9f       	mul	r22, r18
    e4cc:	f0 01       	movw	r30, r0
    e4ce:	72 9f       	mul	r23, r18
    e4d0:	bb 27       	eor	r27, r27
    e4d2:	f0 0d       	add	r31, r0
    e4d4:	b1 1d       	adc	r27, r1
    e4d6:	63 9f       	mul	r22, r19
    e4d8:	aa 27       	eor	r26, r26
    e4da:	f0 0d       	add	r31, r0
    e4dc:	b1 1d       	adc	r27, r1
    e4de:	aa 1f       	adc	r26, r26
    e4e0:	64 9f       	mul	r22, r20
    e4e2:	66 27       	eor	r22, r22
    e4e4:	b0 0d       	add	r27, r0
    e4e6:	a1 1d       	adc	r26, r1
    e4e8:	66 1f       	adc	r22, r22
    e4ea:	82 9f       	mul	r24, r18
    e4ec:	22 27       	eor	r18, r18
    e4ee:	b0 0d       	add	r27, r0
    e4f0:	a1 1d       	adc	r26, r1
    e4f2:	62 1f       	adc	r22, r18
    e4f4:	73 9f       	mul	r23, r19
    e4f6:	b0 0d       	add	r27, r0
    e4f8:	a1 1d       	adc	r26, r1
    e4fa:	62 1f       	adc	r22, r18
    e4fc:	83 9f       	mul	r24, r19
    e4fe:	a0 0d       	add	r26, r0
    e500:	61 1d       	adc	r22, r1
    e502:	22 1f       	adc	r18, r18
    e504:	74 9f       	mul	r23, r20
    e506:	33 27       	eor	r19, r19
    e508:	a0 0d       	add	r26, r0
    e50a:	61 1d       	adc	r22, r1
    e50c:	23 1f       	adc	r18, r19
    e50e:	84 9f       	mul	r24, r20
    e510:	60 0d       	add	r22, r0
    e512:	21 1d       	adc	r18, r1
    e514:	82 2f       	mov	r24, r18
    e516:	76 2f       	mov	r23, r22
    e518:	6a 2f       	mov	r22, r26
    e51a:	11 24       	eor	r1, r1
    e51c:	9f 57       	subi	r25, 0x7F	; 127
    e51e:	50 40       	sbci	r21, 0x00	; 0
    e520:	8a f0       	brmi	.+34     	; 0xe544 <__mulsf3_pse+0x84>
    e522:	e1 f0       	breq	.+56     	; 0xe55c <__mulsf3_pse+0x9c>
    e524:	88 23       	and	r24, r24
    e526:	4a f0       	brmi	.+18     	; 0xe53a <__mulsf3_pse+0x7a>
    e528:	ee 0f       	add	r30, r30
    e52a:	ff 1f       	adc	r31, r31
    e52c:	bb 1f       	adc	r27, r27
    e52e:	66 1f       	adc	r22, r22
    e530:	77 1f       	adc	r23, r23
    e532:	88 1f       	adc	r24, r24
    e534:	91 50       	subi	r25, 0x01	; 1
    e536:	50 40       	sbci	r21, 0x00	; 0
    e538:	a9 f7       	brne	.-22     	; 0xe524 <__mulsf3_pse+0x64>
    e53a:	9e 3f       	cpi	r25, 0xFE	; 254
    e53c:	51 05       	cpc	r21, r1
    e53e:	70 f0       	brcs	.+28     	; 0xe55c <__mulsf3_pse+0x9c>
    e540:	5c cf       	rjmp	.-328    	; 0xe3fa <__fp_inf>
    e542:	a6 cf       	rjmp	.-180    	; 0xe490 <__fp_szero>
    e544:	5f 3f       	cpi	r21, 0xFF	; 255
    e546:	ec f3       	brlt	.-6      	; 0xe542 <__mulsf3_pse+0x82>
    e548:	98 3e       	cpi	r25, 0xE8	; 232
    e54a:	dc f3       	brlt	.-10     	; 0xe542 <__mulsf3_pse+0x82>
    e54c:	86 95       	lsr	r24
    e54e:	77 95       	ror	r23
    e550:	67 95       	ror	r22
    e552:	b7 95       	ror	r27
    e554:	f7 95       	ror	r31
    e556:	e7 95       	ror	r30
    e558:	9f 5f       	subi	r25, 0xFF	; 255
    e55a:	c1 f7       	brne	.-16     	; 0xe54c <__mulsf3_pse+0x8c>
    e55c:	fe 2b       	or	r31, r30
    e55e:	88 0f       	add	r24, r24
    e560:	91 1d       	adc	r25, r1
    e562:	96 95       	lsr	r25
    e564:	87 95       	ror	r24
    e566:	97 f9       	bld	r25, 7
    e568:	08 95       	ret

0000e56a <memcpy_P>:
    e56a:	fb 01       	movw	r30, r22
    e56c:	dc 01       	movw	r26, r24
    e56e:	02 c0       	rjmp	.+4      	; 0xe574 <memcpy_P+0xa>
    e570:	05 90       	lpm	r0, Z+
    e572:	0d 92       	st	X+, r0
    e574:	41 50       	subi	r20, 0x01	; 1
    e576:	50 40       	sbci	r21, 0x00	; 0
    e578:	d8 f7       	brcc	.-10     	; 0xe570 <memcpy_P+0x6>
    e57a:	08 95       	ret

0000e57c <strnlen_P>:
    e57c:	fc 01       	movw	r30, r24
    e57e:	05 90       	lpm	r0, Z+
    e580:	61 50       	subi	r22, 0x01	; 1
    e582:	70 40       	sbci	r23, 0x00	; 0
    e584:	01 10       	cpse	r0, r1
    e586:	d8 f7       	brcc	.-10     	; 0xe57e <strnlen_P+0x2>
    e588:	80 95       	com	r24
    e58a:	90 95       	com	r25
    e58c:	8e 0f       	add	r24, r30
    e58e:	9f 1f       	adc	r25, r31
    e590:	08 95       	ret

0000e592 <_exit>:
    e592:	f8 94       	cli

0000e594 <__stop_program>:
    e594:	ff cf       	rjmp	.-2      	; 0xe594 <__stop_program>
