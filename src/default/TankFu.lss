
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000b5e4  0000b6e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000b5e4  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000e87  00800144  00800144  0000b744  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000b728  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000bd40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000bfe5  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  0000bff8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007d53  00000000  00000000  0000c550  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ff  00000000  00000000  000142a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b42  00000000  00000000  000157a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a4  00000000  00000000  000172e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000018b3  00000000  00000000  00018488  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006e20  00000000  00000000  00019d3b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  00020b60  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 97 33 	jmp	0x672e	; 0x672e <__ctors_end>
       4:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
       8:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
       c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      10:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      14:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      18:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      1c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      20:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      24:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      28:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      2c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      30:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      34:	0c 94 d8 35 	jmp	0x6bb0	; 0x6bb0 <__vector_13>
      38:	0c 94 18 36 	jmp	0x6c30	; 0x6c30 <__vector_14>
      3c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      40:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      44:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      48:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      4c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      50:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      54:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      58:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      5c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      60:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      64:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      68:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      6c:	0c 94 02 34 	jmp	0x6804	; 0x6804 <__bad_interrupt>
      70:	08 51       	subi	r16, 0x18	; 24
      72:	0d 51       	subi	r16, 0x1D	; 29
      74:	10 51       	subi	r17, 0x10	; 16
      76:	13 51       	subi	r17, 0x13	; 19
      78:	16 51       	subi	r17, 0x16	; 22
      7a:	19 51       	subi	r17, 0x19	; 25
      7c:	1c 51       	subi	r17, 0x1C	; 28
      7e:	1f 51       	subi	r17, 0x1F	; 31
      80:	22 51       	subi	r18, 0x12	; 18

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	22 39 25 39 80 39 84 39 8c 39 2d 39 32 39 37 39     "9%9.9.9.9-92979
      e0:	94 39 3a 39 3d 39 40 39 7d 39                       .9:9=9@9}9

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 4c 65 76 65 6c 20 4f 6e 65 00 20 20 4c 65       Level One.  Le
     106:	76 65 6c 20 54 77 6f 00 4c 65 76 65 6c 20 54 68     vel Two.Level Th
     116:	72 65 65 00 20 4c 65 76 65 6c 20 46 6f 75 72 00     ree. Level Four.
     126:	20 4c 65 76 65 6c 20 46 69 76 65 00 20 20 4c 65      Level Five.  Le
     136:	76 65 6c 20 53 69 78 00 4c 65 76 65 6c 20 53 65     vel Six.Level Se
     146:	76 65 6e 00 4c 65 76 65 6c 20 45 69 67 68 74 00     ven.Level Eight.
     156:	20 4c 65 76 65 6c 20 4e 69 6e 65 00 20 20 4c 65      Level Nine.  Le
     166:	76 65 6c 20 54 65 6e 00                             vel Ten.

0000016e <strPaused>:
     16e:	50 61 75 73 65 64 00                                Paused.

00000175 <strExit>:
     175:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

0000017e <strTotal>:
     17e:	54 6f 74 61 6c 3a 00                                Total:.

00000185 <strScore>:
     185:	53 63 6f 72 65 3a 00                                Score:.

0000018c <strBanterClear>:
     18c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

0000019b <banter_map>:
     19b:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1ab:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1bb:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1cb:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     1db:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     1eb:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     1fb:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     20b:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     21b:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     22b:	20 20 20 20 20 00                                        .

00000231 <strBy>:
     231:	42 79 00                                            By.

00000234 <strOwns>:
     234:	50 77 6e 73 00                                      Pwns.

00000239 <strChangeHandle>:
     239:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000248 <strCancelHandle>:
     248:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000253 <strConfirmHandle>:
     253:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

0000025f <strSelectHandle>:
     25f:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

0000026a <strPlayer2>:
     26a:	50 32 00                                            P2.

0000026d <strPlayer1>:
     26d:	50 31 00                                            P1.

00000270 <strVertSep>:
     270:	7c 00                                               |.

00000272 <strUnderline>:
     272:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000027e <strHandlesTitle>:
     27e:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

0000028a <strHighscores>:
     28a:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000294 <str2Player>:
     294:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002a5 <str1Player>:
     2a5:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000002b3 <strCopyright>:
     2b3:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     2c3:	42 72 6f 6f 6b 73 00                                Brooks.

000002ca <my_patches>:
     2ca:	02 1d 30 00 00 4f 07 50 07 02 38 29 00 00 e3 06     ..0..O.P..8)....
     2da:	e4 06 02 f1 26 00 00 45 02 46 02 02 40 25 00 00     ....&..E.F..@%..
     2ea:	af 01 b0 01 02 3e 25 00 00 00 00 01 00 02 3c 25     .....>%.......<%
     2fa:	00 00 00 00 01 00 02 1c 23 00 00 1e 02 1f 02 02     ........#.......
     30a:	aa 21 00 00 70 01 71 01 02 f1 26 00 00 45 02 46     .!..p.q...&..E.F
     31a:	02 02 a6 21 00 00 00 00 01 00 02 38 29 00 00 e3     ...!.......8)...
     32a:	06 e4 06 02 a2 21 00 00 00 00 01 00 02 a0 21 00     .....!........!.
     33a:	00 00 00 00 00                                      .....

0000033f <level_data>:
     33f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     34f:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     35f:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     36f:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     37f:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     38f:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     3b3:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     3cf:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     3ef:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     407:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     417:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     427:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     443:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     453:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     463:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     47f:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     48f:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     49f:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     4bb:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     4cb:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4db:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     4f7:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     507:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     517:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     533:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     543:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     553:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     563:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     573:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     593:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     5af:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     5cf:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     5eb:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     607:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     617:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     627:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     797:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     7a7:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
     a83:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
     a9b:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
     d73:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     d83:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    105f:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1077:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    134f:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    135f:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    163b:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1653:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    192b:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    193b:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1c17:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1c2f:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1f07:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1f17:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

0000208b <map_rocket_right_1>:
    208b:	01 01 26                                            ..&

0000208e <map_rocket_right_0>:
    208e:	01 01 25                                            ..%

00002091 <map_rocket_up_1>:
    2091:	01 01 24                                            ..$

00002094 <map_rocket_up_0>:
    2094:	01 01 23                                            ..#

00002097 <map_ball>:
    2097:	01 01 22                                            .."

0000209a <map_explosion_2>:
    209a:	02 02 0c 0d 0d 0c                                   ......

000020a0 <map_explosion_1>:
    20a0:	02 02 0a 0b 18 19                                   ......

000020a6 <map_explosion_0>:
    20a6:	02 02 08 09 16 17                                   ......

000020ac <map_tank2_right_1>:
    20ac:	02 02 20 21 2e 2f                                   .. !./

000020b2 <map_tank2_right_0>:
    20b2:	02 02 1e 1f 2c 2d                                   ....,-

000020b8 <map_tank2_up_1>:
    20b8:	02 02 1c 1d 2a 2b                                   ....*+

000020be <map_tank2_up_0>:
    20be:	02 02 1a 1b 28 29                                   ....()

000020c4 <map_tank1_right_1>:
    20c4:	02 02 06 07 14 15                                   ......

000020ca <map_tank1_right_0>:
    20ca:	02 02 04 05 12 13                                   ......

000020d0 <map_tank1_up_1>:
    20d0:	02 02 02 03 10 11                                   ......

000020d6 <map_tank1_up_0>:
    20d6:	02 02 00 01 0e 0f                                   ......

000020dc <map_none>:
    20dc:	01 01 27                                            ..'

000020df <map_tank_blank>:
    20df:	02 02 27 27 27 27                                   ..''''

000020e5 <map_metal_bl>:
    20e5:	01 01 0c                                            ...

000020e8 <map_metal_tr>:
    20e8:	01 01 0b                                            ...

000020eb <map_metal_br>:
    20eb:	01 01 0a                                            ...

000020ee <map_metal_tl>:
    20ee:	01 01 09                                            ...

000020f1 <map_tile_exp_2>:
    20f1:	01 01 08                                            ...

000020f4 <map_tile_exp_1>:
    20f4:	01 01 07                                            ...

000020f7 <map_tile_exp_0>:
    20f7:	01 01 06                                            ...

000020fa <map_rocket_itm>:
    20fa:	01 01 04                                            ...

000020fd <map_explode_itm>:
    20fd:	01 01 03                                            ...

00002100 <map_speed_itm>:
    2100:	01 01 02                                            ...

00002103 <map_metal>:
    2103:	01 01 05                                            ...

00002106 <map_brick>:
    2106:	01 01 01                                            ...

00002109 <map_tile_none>:
    2109:	01 01 00                                            ...

0000210c <map_pause>:
    210c:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    211c:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    212c:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    213c:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

0000214a <map_splash>:
    214a:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    215a:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    216a:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    217a:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    218a:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    219a:	2a 00 00 2c 2d 2e                                   *..,-.

000021a0 <ad_silence>:
	...

000021a2 <ad_tracks>:
	...

000021a4 <ad_tank_explode>:
	...

000021a6 <ad_splash>:
	...

000021a8 <ad_rocket>:
	...

000021aa <ad_navigate>:
    21aa:	ff fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    21ba:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    21ca:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    21da:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    21ea:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    21fa:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    220a:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    221a:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    222a:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    223a:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    224a:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    225a:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    226a:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    227a:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    228a:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    229a:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    22aa:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    22ba:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    22ca:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    22da:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    22ea:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    22fa:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    230a:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
    231a:	fe 00                                               ..

0000231c <ad_metal>:
    231c:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    232c:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    233c:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    234c:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    235c:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    236c:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    237c:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    238c:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    239c:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    23ac:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    23bc:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    23cc:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    23dc:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    23ec:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    23fc:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    240c:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    241c:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    242c:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    243c:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    244c:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    245c:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    246c:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    247c:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    248c:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    249c:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    24ac:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    24bc:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    24cc:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    24dc:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    24ec:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    24fc:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    250c:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    251c:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    252c:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff fe ff     ................

0000253c <ad_level_start>:
	...

0000253e <ad_level_clear>:
	...

00002540 <ad_item>:
    2540:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    2550:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    2560:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    2570:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    2580:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    2590:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    25a0:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    25b0:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    25c0:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    25d0:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    25e0:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    25f0:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    2600:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    2610:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    2620:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    2630:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    2640:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    2650:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    2660:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    2670:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    2680:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    2690:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    26a0:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    26b0:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    26c0:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    26d0:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    26e0:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

000026f1 <ad_cannonball>:
    26f1:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    2701:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    2711:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    2721:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    2731:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    2741:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    2751:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    2761:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    2771:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    2781:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    2791:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    27a1:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    27b1:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    27c1:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    27d1:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    27e1:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    27f1:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    2801:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    2811:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    2821:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    2831:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    2841:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    2851:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    2861:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    2871:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    2881:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    2891:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    28a1:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    28b1:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    28c1:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    28d1:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    28e1:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    28f1:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    2901:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    2911:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    2921:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2931:	ff ff ff ff ff ff 00                                .......

00002938 <ad_brick_explode>:
    2938:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    2948:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    2958:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    2968:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    2978:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    2988:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    2998:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    29a8:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    29b8:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    29c8:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    29d8:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    29e8:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    29f8:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    2a08:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    2a18:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    2a28:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    2a38:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    2a48:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    2a58:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    2a68:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    2a78:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    2a88:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    2a98:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    2aa8:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    2ab8:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    2ac8:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    2ad8:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    2ae8:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    2af8:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    2b08:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    2b18:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    2b28:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    2b38:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    2b48:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    2b58:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    2b68:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    2b78:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    2b88:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    2b98:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    2ba8:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    2bb8:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    2bc8:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    2bd8:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    2be8:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    2bf8:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    2c08:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    2c18:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    2c28:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    2c38:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    2c48:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    2c58:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    2c68:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    2c78:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    2c88:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    2c98:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    2ca8:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    2cb8:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    2cc8:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    2cd8:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    2ce8:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    2cf8:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    2d08:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    2d18:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    2d28:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    2d38:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    2d48:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    2d58:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    2d68:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    2d78:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    2d88:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    2d98:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    2da8:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    2db8:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    2dc8:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    2dd8:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    2de8:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    2df8:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    2e08:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    2e18:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    2e28:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    2e38:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    2e48:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    2e58:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    2e68:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    2e78:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    2e88:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    2e98:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    2ea8:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    2eb8:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    2ec8:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    2ed8:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    2ee8:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    2ef8:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    2f08:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    2f18:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    2f28:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    2f38:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    2f48:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    2f58:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    2f68:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    2f78:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    2f88:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    2f98:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    2fa8:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    2fb8:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    2fc8:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    2fd8:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    2fe8:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    2ff8:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    3008:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    3018:	04 04 02 01 00                                      .....

0000301d <ad_banter>:
    301d:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    302d:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    303d:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    304d:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    305d:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    306d:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    307d:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    308d:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    309d:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    30ad:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    30bd:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    30cd:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    30dd:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    30ed:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    30fd:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    310d:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    311d:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    312d:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    313d:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    314d:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    315d:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    316d:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    317d:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    318d:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    319d:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    31ad:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    31bd:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    31cd:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    31dd:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    31ed:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    31fd:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    320d:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    321d:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    322d:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    323d:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    324d:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    325d:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    326d:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    327d:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    328d:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    329d:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    32ad:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    32bd:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    32cd:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    32dd:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    32ed:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    32fd:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    330d:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    331d:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    332d:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    333d:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    334d:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    335d:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    336d:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    337d:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    338d:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    339d:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    33ad:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    33bd:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    33cd:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    33dd:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    33ed:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    33fd:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    340d:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    341d:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    342d:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    343d:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    344d:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    345d:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    346d:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    347d:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    348d:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    349d:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    34ad:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    34bd:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    34cd:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    34dd:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    34ed:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    34fd:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    350d:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    351d:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    352d:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    353d:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    354d:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    355d:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    356d:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    357d:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    358d:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    359d:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    35ad:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    35bd:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    35cd:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    35dd:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    35ed:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    35fd:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    360d:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    361d:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    362d:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    363d:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    364d:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    365d:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    366d:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    367d:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    368d:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    369d:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    36ad:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    36bd:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    36cd:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    36dd:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    36ed:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    36fd:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    370d:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    371d:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    372d:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    373d:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    374d:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    375d:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

0000376e <sprites_data>:
    376e:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    377e:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    378e:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    379e:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    37ae:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    37be:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    37ce:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37de:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    37ee:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    37fe:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    380e:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    381e:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    382e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    383e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    384e:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    385e:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    386e:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    387e:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    388e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    389e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    38ae:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    38be:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    38ce:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    38de:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    38ee:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    38fe:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    390e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    391e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    392e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    393e:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    394e:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    395e:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    396e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    397e:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    398e:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    399e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    39ae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39be:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    39ce:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    39de:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    39ee:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    39fe:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3a0e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a1e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a2e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3a3e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3a4e:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3a5e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3a6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a7e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a8e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a9e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3aae:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3abe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3ace:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3ade:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3aee:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3afe:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3b0e:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3b1e:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3b2e:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3b3e:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3b4e:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3b5e:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3b6e:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3b7e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3b8e:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3b9e:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3bae:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3bbe:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3bce:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3bde:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3bee:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3bfe:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c0e:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3c1e:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3c2e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3c3e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3c4e:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3c5e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3c6e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3c7e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3c8e:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3c9e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3cae:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3cbe:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3cce:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3cde:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3cee:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3cfe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d0e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d2e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3d3e:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3d4e:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3d5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d6e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3d7e:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3d8e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3d9e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3dae:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3dbe:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3dce:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3dde:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3dee:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3dfe:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3e0e:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3e1e:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3e2e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3e3e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3e4e:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3e5e:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3e6e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3e7e:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    3e8e:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    3e9e:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3eae:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3ebe:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    3ece:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3ede:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3eee:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3efe:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3f0e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f1e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3f2e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3f3e:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3f4e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3f5e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3f6e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3f7e:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3f8e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3f9e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3fae:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3fbe:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3fce:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3fde:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3fee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ffe:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    400e:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    401e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    402e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    403e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    404e:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    405e:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    406e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    407e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    408e:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    409e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40ae:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    40be:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    40ce:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    40de:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40ee:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    40fe:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    410e:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    411e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    412e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    413e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    414e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    415e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    416e:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    417e:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    418e:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    419e:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    41ae:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    41be:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    41ce:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    41de:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    41ee:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    41fe:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    420e:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    421e:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    422e:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    423e:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    424e:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    425e:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    426e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    427e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    428e:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    429e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    42ae:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    42be:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42ce:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    42de:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    42ee:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    42fe:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    430e:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    431e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    432e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    433e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    434e:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    435e:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

0000436e <tiles_data>:
	...
    43ae:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    43be:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    43ce:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    43de:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    43ee:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    43fe:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    440e:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    441e:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    442e:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    443e:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    444e:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    445e:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    446e:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    447e:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    448e:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    449e:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    44ae:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    44be:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    44ce:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    44de:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    44f6:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4506:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4516:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    452e:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    453e:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    454e:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    455e:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4576:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4596:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    45ae:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    45be:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    45ce:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    45de:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    45ee:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    45fe:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    460e:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    461e:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    462e:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    463e:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    464e:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    465e:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    466e:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    467e:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    468e:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    469e:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    46ae:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    46be:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    46ce:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    46de:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    46ee:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    46fe:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    470e:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    471e:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    472e:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    473e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    474e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    475e:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    476e:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    477e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    478e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    479e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    47ae:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    47be:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    47ce:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    47de:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    47ee:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    47fe:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    480e:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    481e:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    482e:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    483e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    484e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    485e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    488e:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    489e:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    48ce:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    48de:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    48ee:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    48fe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    490e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    491e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    492e:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    493e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    494e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    495e:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    496e:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    497e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    498e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    499e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    49ae:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    49be:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    49ce:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    49de:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    49ee:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49fe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a0e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a1e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a2e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a3e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a4e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a5e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4a6e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4a7e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4a8e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4a9e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4aae:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4abe:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    4aee:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4afe:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b0e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b1e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4b2e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    4b3e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b4e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b5e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4b6e:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4b7e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4b8e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4b9e:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4bae:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4bbe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4bce:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4bde:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4c16:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4c26:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4c36:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c46:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c56:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4c66:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    4c76:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4c86:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4c96:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4ca6:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    4cb6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cc6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4cd6:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4ce6:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4cf6:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d06:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d16:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d26:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4d36:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4d46:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4d56:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4d66:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4d76:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4d86:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    4dae:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4dbe:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4dce:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    4dde:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    4dee:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4dfe:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e0e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e1e:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    4e2e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e3e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e4e:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    4e5e:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    4e6e:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4e7e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4e8e:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4e9e:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    4eb6:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    4ec6:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4ed6:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4ee6:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4ef6:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f06:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f16:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4f26:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4f76:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4f86:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4f9e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4fb6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4fc6:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4ff6:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5006:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5016:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    502e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    503e:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    504e:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    505e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5076:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5086:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5096:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    50ae:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    50be:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    50ce:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    50de:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    50f6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5106:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    513a:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    514a:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    515a:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5176:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5186:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5196:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    51b6:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    51c6:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    51d6:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    51f6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5206:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5216:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5256:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5266:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5286:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    52d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    52fa:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    530a:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    531a:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5336:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5346:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5356:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5376:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    5386:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5396:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    53b6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    53c6:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    53d6:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    53f6:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5406:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5416:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    543a:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    544a:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    545a:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    5476:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5486:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5496:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    54b6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    54c6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    54d6:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    54f6:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5506:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5516:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    5536:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5546:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5556:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5576:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5586:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5596:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    55be:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    55d6:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    55fe:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5616:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5626:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5636:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5646:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5656:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    567e:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5696:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56ae:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    56be:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    56ce:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    56de:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    56f6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5706:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    571e:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5736:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5746:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5756:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    5776:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5786:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5796:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    57b6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57c6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    57d6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    57f6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5806:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5816:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5836:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5846:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5856:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5876:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5886:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5896:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    58b6:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    58c6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    58d6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    58f6:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5906:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5916:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5936:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5946:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5956:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5976:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5986:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5996:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    59ba:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    59ca:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    59da:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    59f6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5a06:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5a16:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5a36:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a46:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5a56:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5a76:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5a86:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5a96:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5ab6:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5ac6:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5ad6:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5af6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b06:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b16:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5b36:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b46:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5b56:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5b76:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b96:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5bb6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bc6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5bd6:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5bf6:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5c06:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5c16:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5c36:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5c46:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5c56:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5c76:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c86:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c96:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    5cb6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cc6:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5cd6:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5cf6:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5d06:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5d16:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5d36:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d46:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5d56:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5d76:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d86:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5d96:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5db6:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    5dc6:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5dd6:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5df6:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5e06:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e16:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5e36:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5e46:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e56:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5e76:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e86:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5e96:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5eba:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    5eca:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5f1e:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5f36:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5f46:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5f56:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5f7e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5f8e:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5f9e:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fb6:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5fc6:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5fd6:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5ffe:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    600e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    601e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    603a:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    604a:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    605a:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    607e:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    608e:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    609e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    60ba:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    60ca:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    60da:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    60fe:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    610e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    611e:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6136:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6146:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6156:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6176:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    6186:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6196:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    61ba:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    61ca:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    61da:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    61ea:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    61fa:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    620a:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    621a:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    6236:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6246:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6256:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    627e:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    628e:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    629e:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    62be:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    62ce:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    62de:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    62fe:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    630e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    631e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    633e:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    634e:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    635e:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    637e:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    638e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    639e:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    63be:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63ce:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    63de:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    63fe:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    640e:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    641e:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6436:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    6446:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6456:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    647e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    648e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    649e:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    64be:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64ce:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    64de:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    64fe:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    650e:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    651e:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    653e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    654e:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    655e:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    657e:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    658e:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    659e:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    65be:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    65ce:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    65de:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    65f6:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6606:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6616:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    662e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    663e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    664e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    665e:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6676:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    6686:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    6696:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    66b2:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    66c2:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    66d2:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    66e2:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    66f2:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6702:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6712:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

0000672e <__ctors_end>:
    672e:	11 24       	eor	r1, r1
    6730:	1f be       	out	0x3f, r1	; 63
    6732:	cf ef       	ldi	r28, 0xFF	; 255
    6734:	d0 e1       	ldi	r29, 0x10	; 16
    6736:	de bf       	out	0x3e, r29	; 62
    6738:	cd bf       	out	0x3d, r28	; 61

0000673a <__do_copy_data>:
    673a:	11 e0       	ldi	r17, 0x01	; 1
    673c:	a0 e0       	ldi	r26, 0x00	; 0
    673e:	b1 e0       	ldi	r27, 0x01	; 1
    6740:	e4 ee       	ldi	r30, 0xE4	; 228
    6742:	f5 eb       	ldi	r31, 0xB5	; 181
    6744:	02 c0       	rjmp	.+4      	; 0x674a <__do_copy_data+0x10>
    6746:	05 90       	lpm	r0, Z+
    6748:	0d 92       	st	X+, r0
    674a:	a4 34       	cpi	r26, 0x44	; 68
    674c:	b1 07       	cpc	r27, r17
    674e:	d9 f7       	brne	.-10     	; 0x6746 <__do_copy_data+0xc>

00006750 <__do_clear_bss>:
    6750:	1f e0       	ldi	r17, 0x0F	; 15
    6752:	a4 e4       	ldi	r26, 0x44	; 68
    6754:	b1 e0       	ldi	r27, 0x01	; 1
    6756:	01 c0       	rjmp	.+2      	; 0x675a <.do_clear_bss_start>

00006758 <.do_clear_bss_loop>:
    6758:	1d 92       	st	X+, r1

0000675a <.do_clear_bss_start>:
    675a:	ab 3c       	cpi	r26, 0xCB	; 203
    675c:	b1 07       	cpc	r27, r17
    675e:	e1 f7       	brne	.-8      	; 0x6758 <.do_clear_bss_loop>

00006760 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    6760:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6762:	88 e1       	ldi	r24, 0x18	; 24
    6764:	0f b6       	in	r0, 0x3f	; 63
    6766:	f8 94       	cli
    6768:	80 93 60 00 	sts	0x0060, r24
    676c:	10 92 60 00 	sts	0x0060, r1
    6770:	0f be       	out	0x3f, r0	; 63

00006772 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6772:	0e 94 55 38 	call	0x70aa	; 0x70aa <isEepromFormatted>
    6776:	81 11       	cpse	r24, r1
    6778:	02 c0       	rjmp	.+4      	; 0x677e <Initialize+0xc>
    677a:	0e 94 33 38 	call	0x7066	; 0x7066 <FormatEeprom>

	cli();
    677e:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6780:	81 e0       	ldi	r24, 0x01	; 1
    6782:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    6786:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    678a:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    678e:	10 92 02 0b 	sts	0x0B02, r1
    6792:	10 92 08 0b 	sts	0x0B08, r1
    6796:	10 92 0e 0b 	sts	0x0B0E, r1
    679a:	10 92 14 0b 	sts	0x0B14, r1
    679e:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    67a2:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_flags=0;
    67a6:	10 92 ee 0a 	sts	0x0AEE, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    67aa:	92 e1       	ldi	r25, 0x12	; 18
    67ac:	90 93 ed 0a 	sts	0x0AED, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    67b0:	90 ee       	ldi	r25, 0xE0	; 224
    67b2:	90 93 f6 0a 	sts	0x0AF6, r25
	render_lines_count=FRAME_LINES;
    67b6:	90 93 f4 0a 	sts	0x0AF4, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    67ba:	94 e1       	ldi	r25, 0x14	; 20
    67bc:	90 93 f5 0a 	sts	0x0AF5, r25
	first_render_line=FIRST_RENDER_LINE;
    67c0:	90 93 f3 0a 	sts	0x0AF3, r25

	joypad1_status_hi=0;
    67c4:	10 92 fa 0a 	sts	0x0AFA, r1
    67c8:	10 92 f9 0a 	sts	0x0AF9, r1
	joypad2_status_hi=0;
    67cc:	10 92 fe 0a 	sts	0x0AFE, r1
    67d0:	10 92 fd 0a 	sts	0x0AFD, r1
	sound_enabled=1;
    67d4:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    67d8:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <InitializeVideoMode>
    67dc:	82 e8       	ldi	r24, 0x82	; 130
    67de:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    67e0:	fc 01       	movw	r30, r24
    67e2:	25 91       	lpm	r18, Z+
    67e4:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    67e6:	f9 01       	movw	r30, r18
    67e8:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    67ea:	30 83       	st	Z, r19
    67ec:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    67ee:	20 e0       	ldi	r18, 0x00	; 0
    67f0:	80 3b       	cpi	r24, 0xB0	; 176
    67f2:	92 07       	cpc	r25, r18
    67f4:	a9 f7       	brne	.-22     	; 0x67e0 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    67f6:	78 94       	sei
	
	DisplayLogo();
    67f8:	0e 94 df 44 	call	0x89be	; 0x89be <DisplayLogo>
    67fc:	0e 94 51 58 	call	0xb0a2	; 0xb0a2 <main>
    6800:	0c 94 f0 5a 	jmp	0xb5e0	; 0xb5e0 <_exit>

00006804 <__bad_interrupt>:
    6804:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006808 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6808:	0c e0       	ldi	r16, 0x0C	; 12
    680a:	0a 95       	dec	r16
    680c:	f1 f7       	brne	.-4      	; 0x680a <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    680e:	e8 e9       	ldi	r30, 0x98	; 152
		ldi ZH,hi8(ram_tiles_restore);
    6810:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6812:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6814:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6816:	20 91 b7 0b 	lds	r18, 0x0BB7


		clr r16
    681a:	00 27       	eor	r16, r16

0000681c <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    681c:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    681e:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6820:	ac 0f       	add	r26, r28
		adc XH,YH
    6822:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6824:	1c 91       	ld	r17, X
		std Z+2,r17
    6826:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    6828:	02 17       	cp	r16, r18
		brsh noov
    682a:	08 f4       	brcc	.+2      	; 0x682e <noov>
		mov r17,r16
    682c:	10 2f       	mov	r17, r16

0000682e <noov>:
	noov:
		st X,r17
    682e:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6830:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6832:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6834:	07 31       	cpi	r16, 0x17	; 23
		brlo upd_loop ;23
    6836:	90 f3       	brcs	.-28     	; 0x681c <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6838:	06 e2       	ldi	r16, 0x26	; 38

0000683a <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    683a:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    683c:	1a 95       	dec	r17
		brne .-4
    683e:	f1 f7       	brne	.-4      	; 0x683c <wait_loop+0x2>

		dec r16
    6840:	0a 95       	dec	r16
		brne wait_loop
    6842:	d9 f7       	brne	.-10     	; 0x683a <wait_loop>

		lds r2,overlay_tile_table
    6844:	20 90 e9 0a 	lds	r2, 0x0AE9
		lds r3,overlay_tile_table+1
    6848:	30 90 ea 0a 	lds	r3, 0x0AEA
		lds r16,tile_table_lo 
    684c:	00 91 e5 0a 	lds	r16, 0x0AE5
		lds r17,tile_table_hi
    6850:	10 91 e6 0a 	lds	r17, 0x0AE6
		movw r12,r16
    6854:	68 01       	movw	r12, r16
		movw r6,r16
    6856:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6858:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    685a:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    685c:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    685e:	4e 01       	movw	r8, r28
		clr r0
    6860:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6862:	30 91 e8 0a 	lds	r19, 0x0AE8
		cpi r19,0
    6866:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6868:	09 f0       	breq	.+2      	; 0x686c <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    686a:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    686c:	09 f0       	breq	.+2      	; 0x6870 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    686e:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6870:	09 f0       	breq	.+2      	; 0x6874 <wait_loop+0x3a>
		mov r24,r19
    6872:	83 2f       	mov	r24, r19

		breq .+2
    6874:	09 f0       	breq	.+2      	; 0x6878 <wait_loop+0x3e>
		movw r12,r2
    6876:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6878:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    687a:	a0 2e       	mov	r10, r16
		clr r22
    687c:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    687e:	78 e0       	ldi	r23, 0x08	; 8

00006880 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6880:	7d d2       	rcall	.+1274   	; 0x6d7c <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6882:	3c e0       	ldi	r19, 0x0C	; 12
    6884:	3a 95       	dec	r19
    6886:	f1 f7       	brne	.-4      	; 0x6884 <next_tile_line+0x4>
    6888:	00 00       	nop
    688a:	00 00       	nop

		;***draw line***
		call render_tile_line
    688c:	0e 94 77 34 	call	0x68ee	; 0x68ee <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6890:	3f e0       	ldi	r19, 0x0F	; 15
    6892:	3a 95       	dec	r19
    6894:	f1 f7       	brne	.-4      	; 0x6892 <next_tile_line+0x12>
    6896:	00 00       	nop
    6898:	00 00       	nop

		dec r10
    689a:	aa 94       	dec	r10
		breq frame_end
    689c:	a9 f0       	breq	.+42     	; 0x68c8 <frame_end>
	
		inc r22
    689e:	63 95       	inc	r22
		lpm ;3 nop
    68a0:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    68a2:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    68a4:	31 f0       	breq	.+12     	; 0x68b2 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    68a6:	33 e0       	ldi	r19, 0x03	; 3
    68a8:	3a 95       	dec	r19
    68aa:	f1 f7       	brne	.-4      	; 0x68a8 <next_tile_line+0x28>
    68ac:	00 00       	nop
    68ae:	00 00       	nop
		
		rjmp next_tile_line	
    68b0:	e7 cf       	rjmp	.-50     	; 0x6880 <next_tile_line>

000068b2 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    68b2:	66 27       	eor	r22, r22

		clr r0
    68b4:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    68b6:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    68b8:	c3 0f       	add	r28, r19
		adc YH,r0
    68ba:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    68bc:	8a 95       	dec	r24
		brne .+2
    68be:	09 f4       	brne	.+2      	; 0x68c2 <next_tile_row+0x10>
		movw YL,r8	;main vram
    68c0:	e4 01       	movw	r28, r8
		brne .+2
    68c2:	09 f4       	brne	.+2      	; 0x68c6 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    68c4:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    68c6:	dc cf       	rjmp	.-72     	; 0x6880 <next_tile_line>

000068c8 <frame_end>:

	frame_end:

		WAIT r19,18
    68c8:	36 e0       	ldi	r19, 0x06	; 6
    68ca:	3a 95       	dec	r19
    68cc:	f1 f7       	brne	.-4      	; 0x68ca <frame_end+0x2>

		rcall hsync_pulse ;145
    68ce:	56 d2       	rcall	.+1196   	; 0x6d7c <hsync_pulse>
	
		clr r1
    68d0:	11 24       	eor	r1, r1
		call RestoreBackground
    68d2:	0e 94 80 43 	call	0x8700	; 0x8700 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    68d6:	e0 91 ee 0a 	lds	r30, 0x0AEE
		ldi r20,SYNC_FLAG_FIELD
    68da:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    68dc:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    68de:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    68e0:	e0 93 ee 0a 	sts	0x0AEE, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    68e4:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    68e6:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    68ea:	11 24       	eor	r1, r1


		ret
    68ec:	08 95       	ret

000068ee <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    68ee:	de 01       	movw	r26, r28

		mul r22,r23
    68f0:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    68f2:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    68f4:	00 5c       	subi	r16, 0xC0	; 192
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    68f6:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    68f8:	00 0d       	add	r16, r0
		adc r17,r1
    68fa:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    68fc:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    68fe:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    6900:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6902:	00 0d       	add	r16, r0
		adc r17,r1
    6904:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6906:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6908:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    690a:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    690c:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    690e:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6910:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6912:	27 31       	cpi	r18, 0x17	; 23
		brcc .+2
    6914:	08 f4       	brcc	.+2      	; 0x6918 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6916:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6918:	04 0e       	add	r0, r20
	    adc r1,r21
    691a:	15 1e       	adc	r1, r21

		movw ZL,r0
    691c:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    691e:	27 31       	cpi	r18, 0x17	; 23
		brcs ramloop
    6920:	f0 f0       	brcs	.+60     	; 0x695e <ramloop>

00006922 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6922:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6924:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6926:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6928:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    692a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    692c:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    692e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6930:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6932:	27 31       	cpi	r18, 0x17	; 23
		nop
    6934:	00 00       	nop

	    lpm r16,Z+
    6936:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6938:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    693a:	08 f4       	brcc	.+2      	; 0x693e <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    693c:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    693e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6940:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6942:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6944:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6946:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6948:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    694a:	27 31       	cpi	r18, 0x17	; 23
		dec r17			;decrement tiles to draw on line
    694c:	1a 95       	dec	r17
   
	    lpm r16,Z+
    694e:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6950:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6952:	05 91       	lpm	r16, Z+

		breq end	
    6954:	31 f1       	breq	.+76     	; 0x69a2 <end>
	    movw ZL,r0   	;copy next tile adress
    6956:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6958:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    695a:	18 f7       	brcc	.-58     	; 0x6922 <romloop>
	
		rjmp .
    695c:	00 c0       	rjmp	.+0      	; 0x695e <ramloop>

0000695e <ramloop>:

	ramloop:

	    ld r16,Z+
    695e:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6960:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6962:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6964:	01 91       	ld	r16, Z+
		nop   
    6966:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6968:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    696a:	23 9f       	mul	r18, r19


	    ld r16,Z+
    696c:	01 91       	ld	r16, Z+
		nop
    696e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6970:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6972:	27 31       	cpi	r18, 0x17	; 23
   		rjmp .
    6974:	00 c0       	rjmp	.+0      	; 0x6976 <ramloop+0x18>

	    ld r16,Z+
    6976:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6978:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    697a:	08 f0       	brcs	.+2      	; 0x697e <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    697c:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    697e:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6980:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6982:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6984:	15 1e       	adc	r1, r21
		rjmp .
    6986:	00 c0       	rjmp	.+0      	; 0x6988 <ramloop+0x2a>
    
		ld r16,Z+		
    6988:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    698a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    698c:	27 31       	cpi	r18, 0x17	; 23
		rjmp .  
    698e:	00 c0       	rjmp	.+0      	; 0x6990 <ramloop+0x32>

	    ld r16,Z+	
    6990:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6992:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6994:	01 91       	ld	r16, Z+

	    dec r17
    6996:	1a 95       	dec	r17
	    breq end
    6998:	21 f0       	breq	.+8      	; 0x69a2 <end>
	
		movw ZL,r0
    699a:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    699c:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    699e:	08 f6       	brcc	.-126    	; 0x6922 <romloop>
		rjmp ramloop
    69a0:	de cf       	rjmp	.-68     	; 0x695e <ramloop>

000069a2 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    69a2:	08 b9       	out	0x08, r16	; 8
		clr r16	
    69a4:	00 27       	eor	r16, r16
		lpm	
    69a6:	c8 95       	lpm
		nop
    69a8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    69aa:	08 b9       	out	0x08, r16	; 8

		ret
    69ac:	08 95       	ret

000069ae <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    69ae:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    69b0:	e0 91 e5 0a 	lds	r30, 0x0AE5
	lds ZH,tile_table_hi
    69b4:	f0 91 e6 0a 	lds	r31, 0x0AE6
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    69b8:	87 51       	subi	r24, 0x17	; 23
	mul r24,r18
    69ba:	82 9f       	mul	r24, r18
	add ZL,r0
    69bc:	e0 0d       	add	r30, r0
	adc ZH,r1
    69be:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    69c0:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    69c2:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    69c4:	62 9f       	mul	r22, r18
	add XL,r0
    69c6:	a0 0d       	add	r26, r0
	adc XH,r1
    69c8:	b1 1d       	adc	r27, r1

	clr r0
    69ca:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    69cc:	05 90       	lpm	r0, Z+
    69ce:	0d 92       	st	X+, r0
    69d0:	05 90       	lpm	r0, Z+
    69d2:	0d 92       	st	X+, r0
    69d4:	05 90       	lpm	r0, Z+
    69d6:	0d 92       	st	X+, r0
    69d8:	05 90       	lpm	r0, Z+
    69da:	0d 92       	st	X+, r0
    69dc:	05 90       	lpm	r0, Z+
    69de:	0d 92       	st	X+, r0
    69e0:	05 90       	lpm	r0, Z+
    69e2:	0d 92       	st	X+, r0
    69e4:	05 90       	lpm	r0, Z+
    69e6:	0d 92       	st	X+, r0
    69e8:	05 90       	lpm	r0, Z+
    69ea:	0d 92       	st	X+, r0
    69ec:	05 90       	lpm	r0, Z+
    69ee:	0d 92       	st	X+, r0
    69f0:	05 90       	lpm	r0, Z+
    69f2:	0d 92       	st	X+, r0
    69f4:	05 90       	lpm	r0, Z+
    69f6:	0d 92       	st	X+, r0
    69f8:	05 90       	lpm	r0, Z+
    69fa:	0d 92       	st	X+, r0
    69fc:	05 90       	lpm	r0, Z+
    69fe:	0d 92       	st	X+, r0
    6a00:	05 90       	lpm	r0, Z+
    6a02:	0d 92       	st	X+, r0
    6a04:	05 90       	lpm	r0, Z+
    6a06:	0d 92       	st	X+, r0
    6a08:	05 90       	lpm	r0, Z+
    6a0a:	0d 92       	st	X+, r0
    6a0c:	05 90       	lpm	r0, Z+
    6a0e:	0d 92       	st	X+, r0
    6a10:	05 90       	lpm	r0, Z+
    6a12:	0d 92       	st	X+, r0
    6a14:	05 90       	lpm	r0, Z+
    6a16:	0d 92       	st	X+, r0
    6a18:	05 90       	lpm	r0, Z+
    6a1a:	0d 92       	st	X+, r0
    6a1c:	05 90       	lpm	r0, Z+
    6a1e:	0d 92       	st	X+, r0
    6a20:	05 90       	lpm	r0, Z+
    6a22:	0d 92       	st	X+, r0
    6a24:	05 90       	lpm	r0, Z+
    6a26:	0d 92       	st	X+, r0
    6a28:	05 90       	lpm	r0, Z+
    6a2a:	0d 92       	st	X+, r0
    6a2c:	05 90       	lpm	r0, Z+
    6a2e:	0d 92       	st	X+, r0
    6a30:	05 90       	lpm	r0, Z+
    6a32:	0d 92       	st	X+, r0
    6a34:	05 90       	lpm	r0, Z+
    6a36:	0d 92       	st	X+, r0
    6a38:	05 90       	lpm	r0, Z+
    6a3a:	0d 92       	st	X+, r0
    6a3c:	05 90       	lpm	r0, Z+
    6a3e:	0d 92       	st	X+, r0
    6a40:	05 90       	lpm	r0, Z+
    6a42:	0d 92       	st	X+, r0
    6a44:	05 90       	lpm	r0, Z+
    6a46:	0d 92       	st	X+, r0
    6a48:	05 90       	lpm	r0, Z+
    6a4a:	0d 92       	st	X+, r0
    6a4c:	05 90       	lpm	r0, Z+
    6a4e:	0d 92       	st	X+, r0
    6a50:	05 90       	lpm	r0, Z+
    6a52:	0d 92       	st	X+, r0
    6a54:	05 90       	lpm	r0, Z+
    6a56:	0d 92       	st	X+, r0
    6a58:	05 90       	lpm	r0, Z+
    6a5a:	0d 92       	st	X+, r0
    6a5c:	05 90       	lpm	r0, Z+
    6a5e:	0d 92       	st	X+, r0
    6a60:	05 90       	lpm	r0, Z+
    6a62:	0d 92       	st	X+, r0
    6a64:	05 90       	lpm	r0, Z+
    6a66:	0d 92       	st	X+, r0
    6a68:	05 90       	lpm	r0, Z+
    6a6a:	0d 92       	st	X+, r0
    6a6c:	05 90       	lpm	r0, Z+
    6a6e:	0d 92       	st	X+, r0
    6a70:	05 90       	lpm	r0, Z+
    6a72:	0d 92       	st	X+, r0
    6a74:	05 90       	lpm	r0, Z+
    6a76:	0d 92       	st	X+, r0
    6a78:	05 90       	lpm	r0, Z+
    6a7a:	0d 92       	st	X+, r0
    6a7c:	05 90       	lpm	r0, Z+
    6a7e:	0d 92       	st	X+, r0
    6a80:	05 90       	lpm	r0, Z+
    6a82:	0d 92       	st	X+, r0
    6a84:	05 90       	lpm	r0, Z+
    6a86:	0d 92       	st	X+, r0
    6a88:	05 90       	lpm	r0, Z+
    6a8a:	0d 92       	st	X+, r0
    6a8c:	05 90       	lpm	r0, Z+
    6a8e:	0d 92       	st	X+, r0
    6a90:	05 90       	lpm	r0, Z+
    6a92:	0d 92       	st	X+, r0
    6a94:	05 90       	lpm	r0, Z+
    6a96:	0d 92       	st	X+, r0
    6a98:	05 90       	lpm	r0, Z+
    6a9a:	0d 92       	st	X+, r0
    6a9c:	05 90       	lpm	r0, Z+
    6a9e:	0d 92       	st	X+, r0
    6aa0:	05 90       	lpm	r0, Z+
    6aa2:	0d 92       	st	X+, r0
    6aa4:	05 90       	lpm	r0, Z+
    6aa6:	0d 92       	st	X+, r0
    6aa8:	05 90       	lpm	r0, Z+
    6aaa:	0d 92       	st	X+, r0
    6aac:	05 90       	lpm	r0, Z+
    6aae:	0d 92       	st	X+, r0
    6ab0:	05 90       	lpm	r0, Z+
    6ab2:	0d 92       	st	X+, r0
    6ab4:	05 90       	lpm	r0, Z+
    6ab6:	0d 92       	st	X+, r0
    6ab8:	05 90       	lpm	r0, Z+
    6aba:	0d 92       	st	X+, r0
    6abc:	05 90       	lpm	r0, Z+
    6abe:	0d 92       	st	X+, r0
    6ac0:	05 90       	lpm	r0, Z+
    6ac2:	0d 92       	st	X+, r0
    6ac4:	05 90       	lpm	r0, Z+
    6ac6:	0d 92       	st	X+, r0
    6ac8:	05 90       	lpm	r0, Z+
    6aca:	0d 92       	st	X+, r0


	clr r1
    6acc:	11 24       	eor	r1, r1
	ret
    6ace:	08 95       	ret

00006ad0 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6ad0:	0f 93       	push	r16
	push r17
    6ad2:	1f 93       	push	r17
	push YL
    6ad4:	cf 93       	push	r28
	push YH
    6ad6:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6ad8:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6ada:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6adc:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    6ade:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6ae0:	e0 0d       	add	r30, r0
	adc ZH,r1
    6ae2:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6ae4:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6ae6:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6ae8:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6aea:	8e 9f       	mul	r24, r30
	movw r26,r0
    6aec:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6aee:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6af0:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6af2:	cd ed       	ldi	r28, 0xDD	; 221
	ldi YH,hi8(sprites_tile_banks)	
    6af4:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6af6:	00 24       	eor	r0, r0
	add YL,r1
    6af8:	c1 0d       	add	r28, r1
	adc YH,r0		
    6afa:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6afc:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6afe:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6b00:	ea 0f       	add	r30, r26
	adc ZH,r27
    6b02:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6b04:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6b06:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6b08:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6b0a:	69 9f       	mul	r22, r25
	add XL,r0
    6b0c:	a0 0d       	add	r26, r0
	adc XH,r1
    6b0e:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6b10:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6b12:	dd 27       	eor	r29, r29

	cpi r20,0	
    6b14:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6b16:	51 f4       	brne	.+20     	; 0x6b2c <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6b18:	a2 0f       	add	r26, r18
	adc XH,r1
    6b1a:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    6b1c:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6b1e:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6b20:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6b22:	11 c0       	rjmp	.+34     	; 0x6b46 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6b24:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6b26:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    6b28:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    6b2a:	0d c0       	rjmp	.+26     	; 0x6b46 <x_check_end>

00006b2c <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    6b2c:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6b2e:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6b30:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6b32:	04 c0       	rjmp	.+8      	; 0x6b3c <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6b34:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6b36:	e8 0f       	add	r30, r24
	adc ZH,r1	
    6b38:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    6b3a:	05 c0       	rjmp	.+10     	; 0x6b46 <x_check_end>

00006b3c <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    6b3c:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6b3e:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6b40:	e2 0f       	add	r30, r18
	adc ZH,r1
    6b42:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6b44:	31 97       	sbiw	r30, 0x01	; 1

00006b46 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6b46:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    6b48:	41 f4       	brne	.+16     	; 0x6b5a <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    6b4a:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    6b4c:	93 9f       	mul	r25, r19
	add XL,r0
    6b4e:	a0 0d       	add	r26, r0
	adc XH,r1
    6b50:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6b52:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6b54:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6b56:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    6b58:	0a c0       	rjmp	.+20     	; 0x6b6e <y_check_end>

00006b5a <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    6b5a:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    6b5c:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6b5e:	63 2f       	mov	r22, r19
	dec r22
    6b60:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6b62:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6b64:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6b66:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    6b68:	56 9f       	mul	r21, r22
	add ZL,r0
    6b6a:	e0 0d       	add	r30, r0
	adc ZH,r1	
    6b6c:	f1 1d       	adc	r31, r1

00006b6e <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    6b6e:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    6b70:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    6b72:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    6b74:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    6b76:	00 ff       	sbrs	r16, 0
	clr r23
    6b78:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    6b7a:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    6b7c:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    6b7e:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    6b80:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    6b82:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    6b84:	59 1b       	sub	r21, r25

00006b86 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    6b86:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    6b88:	48 1b       	sub	r20, r24

00006b8a <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    6b8a:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    6b8c:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    6b8e:	2c 93       	st	X, r18
	adiw XL,1
    6b90:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    6b92:	e6 0f       	add	r30, r22
	adc ZH,r23
    6b94:	f7 1f       	adc	r31, r23
	dec r20
    6b96:	4a 95       	dec	r20
	brne x_loop
    6b98:	c1 f7       	brne	.-16     	; 0x6b8a <x_loop>

	add ZL,YL		;src+=srcXdiff
    6b9a:	ec 0f       	add	r30, r28
	adc ZH,YH
    6b9c:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    6b9e:	a8 0f       	add	r26, r24
	adc XH,r1
    6ba0:	b1 1d       	adc	r27, r1
	dec r21
    6ba2:	5a 95       	dec	r21
	brne y_loop
    6ba4:	81 f7       	brne	.-32     	; 0x6b86 <y_loop>


	pop YH
    6ba6:	df 91       	pop	r29
	pop YL
    6ba8:	cf 91       	pop	r28
	pop r17
    6baa:	1f 91       	pop	r17
	pop r16
    6bac:	0f 91       	pop	r16
	ret
    6bae:	08 95       	ret

00006bb0 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    6bb0:	0f 92       	push	r0
	push r1
    6bb2:	1f 92       	push	r1
	push ZL;2
    6bb4:	ef 93       	push	r30
	push ZH;2
    6bb6:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6bb8:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6bba:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6bbc:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    6bc0:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    6bc2:	f1 e0       	ldi	r31, 0x01	; 1

00006bc4 <latency_loop>:
latency_loop:
	cp ZL,ZH
    6bc4:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    6bc6:	00 f0       	brcs	.+0      	; 0x6bc8 <latency_loop+0x4>
	inc ZH
    6bc8:	f3 95       	inc	r31
	cpi ZH,10
    6bca:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    6bcc:	d8 f3       	brcs	.-10     	; 0x6bc4 <latency_loop>
	jmp .
    6bce:	0c 94 e9 35 	jmp	0x6bd2	; 0x6bd2 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6bd2:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6bd6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6bd8:	e0 93 ed 0a 	sts	0x0AED, r30

	;process sync phases
	lds ZH,sync_phase
    6bdc:	f0 91 ec 0a 	lds	r31, 0x0AEC
	sbrc ZH,0
    6be0:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6be2:	57 c0       	rjmp	.+174    	; 0x6c92 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6be4:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6be6:	98 f0       	brcs	.+38     	; 0x6c0e <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    6be8:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    6bea:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6bee:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6bf0:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6bf4:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6bf6:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    6bf8:	26 f4       	brtc	.+8      	; 0x6c02 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    6bfa:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6bfc:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <update_sound>
	rjmp sync_end
    6c00:	b6 c0       	rjmp	.+364    	; 0x6d6e <sync_end>

00006c02 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6c02:	e5 e1       	ldi	r30, 0x15	; 21
    6c04:	ea 95       	dec	r30
    6c06:	f1 f7       	brne	.-4      	; 0x6c04 <sync_pre_eq_no_sound_update+0x2>
    6c08:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6c0a:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    6c0c:	b0 c0       	rjmp	.+352    	; 0x6d6e <sync_end>

00006c0e <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6c0e:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6c10:	38 f1       	brcs	.+78     	; 0x6c60 <sync_post_eq>

	rjmp .
    6c12:	00 c0       	rjmp	.+0      	; 0x6c14 <sync_eq+0x6>
	rjmp .
    6c14:	00 c0       	rjmp	.+0      	; 0x6c16 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c16:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    6c18:	e0 fb       	bst	r30, 0
	ldi ZL,4
    6c1a:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    6c1c:	16 f4       	brtc	.+4      	; 0x6c22 <sync_eq_skip>
	
	call update_sound
    6c1e:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <update_sound>

00006c22 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6c22:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6c24:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    6c28:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    6c2a:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6c2e:	9f c0       	rjmp	.+318    	; 0x6d6e <sync_end>

00006c30 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6c30:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6c32:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6c34:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6c36:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    6c3a:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    6c3c:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6c3e:	00 f0       	brcs	.+0      	; 0x6c40 <__vector_14+0x10>

	cpi ZL,2
    6c40:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6c42:	00 f0       	brcs	.+0      	; 0x6c44 <__vector_14+0x14>

	cpi ZL,3
    6c44:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6c46:	00 f0       	brcs	.+0      	; 0x6c48 <__vector_14+0x18>

	cpi ZL,4
    6c48:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    6c4a:	00 f0       	brcs	.+0      	; 0x6c4c <__vector_14+0x1c>

	cpi ZL,5
    6c4c:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6c4e:	00 f0       	brcs	.+0      	; 0x6c50 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6c50:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6c52:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6c54:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    6c58:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    6c5a:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    6c5c:	ef 91       	pop	r30
	reti
    6c5e:	18 95       	reti

00006c60 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6c60:	00 c0       	rjmp	.+0      	; 0x6c62 <sync_post_eq+0x2>

	bst ZL,0
    6c62:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6c64:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6c66:	26 f4       	brtc	.+8      	; 0x6c70 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    6c68:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    6c6a:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <update_sound>
	rjmp sync_pre_eq_cont
    6c6e:	05 c0       	rjmp	.+10     	; 0x6c7a <sync_pre_eq_cont>

00006c70 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    6c70:	e5 e1       	ldi	r30, 0x15	; 21
    6c72:	ea 95       	dec	r30
    6c74:	f1 f7       	brne	.-4      	; 0x6c72 <sync_post_eq_no_sound_update+0x2>
    6c76:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    6c78:	28 9a       	sbi	0x05, 0	; 5

00006c7a <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    6c7a:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6c7e:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    6c80:	09 f0       	breq	.+2      	; 0x6c84 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    6c82:	75 c0       	rjmp	.+234    	; 0x6d6e <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    6c84:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    6c86:	e0 93 ed 0a 	sts	0x0AED, r30
	ldi ZL,1
    6c8a:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    6c8c:	e0 93 ec 0a 	sts	0x0AEC, r30
	
	rjmp sync_end
    6c90:	6e c0       	rjmp	.+220    	; 0x6d6e <sync_end>

00006c92 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    6c92:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    6c94:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    6c98:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    6c9a:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    6c9e:	00 c0       	rjmp	.+0      	; 0x6ca0 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6ca0:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    6ca2:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6ca4:	00 c0       	rjmp	.+0      	; 0x6ca6 <sync_hsync+0x14>
	call update_sound
    6ca6:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    6caa:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6cac:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6cb0:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    6cb2:	e0 91 ed 0a 	lds	r30, 0x0AED
	cp ZL,ZH
    6cb6:	ef 17       	cp	r30, r31
	brsh no_render
    6cb8:	d0 f4       	brcc	.+52     	; 0x6cee <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    6cba:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    6cbc:	00 90 f3 0a 	lds	r0, 0x0AF3
	sub ZH,r0				
    6cc0:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    6cc2:	00 90 f4 0a 	lds	r0, 0x0AF4
	sub ZH,r0			
    6cc6:	f0 19       	sub	r31, r0
	cp ZL,ZH
    6cc8:	ef 17       	cp	r30, r31
	brlo no_render
    6cca:	88 f0       	brcs	.+34     	; 0x6cee <no_render>

	;push r1-r29
	ldi ZL,29
    6ccc:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6cce:	ff 27       	eor	r31, r31

00006cd0 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6cd0:	00 80       	ld	r0, Z
	push r0
    6cd2:	0f 92       	push	r0
	dec ZL
    6cd4:	ea 95       	dec	r30
	brne push_loop	
    6cd6:	e1 f7       	brne	.-8      	; 0x6cd0 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    6cd8:	06 e0       	ldi	r16, 0x06	; 6
    6cda:	0a 95       	dec	r16
    6cdc:	f1 f7       	brne	.-4      	; 0x6cda <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6cde:	0e 94 04 34 	call	0x6808	; 0x6808 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6ce2:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6ce4:	ff 27       	eor	r31, r31

00006ce6 <pop_loop>:
pop_loop:
	pop r0
    6ce6:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    6ce8:	01 92       	st	Z+, r0
	cpi ZL,30
    6cea:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    6cec:	e0 f3       	brcs	.-8      	; 0x6ce6 <pop_loop>

00006cee <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6cee:	e0 91 ed 0a 	lds	r30, 0x0AED
	cpi ZL,0
    6cf2:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6cf4:	09 f0       	breq	.+2      	; 0x6cf8 <no_render+0xa>
	rjmp sync_end
    6cf6:	3b c0       	rjmp	.+118    	; 0x6d6e <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    6cf8:	2f 93       	push	r18
	push r19
    6cfa:	3f 93       	push	r19
	push r20
    6cfc:	4f 93       	push	r20
	push r21
    6cfe:	5f 93       	push	r21
	push r22
    6d00:	6f 93       	push	r22
	push r23
    6d02:	7f 93       	push	r23
	push r24
    6d04:	8f 93       	push	r24
	push r25
    6d06:	9f 93       	push	r25
	push r26
    6d08:	af 93       	push	r26
	push r27
    6d0a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    6d0c:	78 94       	sei
	clr r1
    6d0e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6d10:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6d12:	e0 93 ec 0a 	sts	0x0AEC, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6d16:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    6d18:	e0 93 ed 0a 	sts	0x0AED, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    6d1c:	f0 91 f5 0a 	lds	r31, 0x0AF5
	sts first_render_line,ZH
    6d20:	f0 93 f3 0a 	sts	0x0AF3, r31
	
	lds ZH,render_lines_count_tmp
    6d24:	f0 91 f6 0a 	lds	r31, 0x0AF6
	sts render_lines_count,ZH
    6d28:	f0 93 f4 0a 	sts	0x0AF4, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    6d2c:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,pre_vsync_user_callback+1
    6d30:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    6d34:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6d36:	f1 05       	cpc	r31, r1
	breq .+2 
    6d38:	09 f0       	breq	.+2      	; 0x6d3c <no_render+0x4e>
	icall
    6d3a:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    6d3c:	0e 94 23 38 	call	0x7046	; 0x7046 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6d40:	0e 94 ea 45 	call	0x8bd4	; 0x8bd4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6d44:	0e 94 c9 36 	call	0x6d92	; 0x6d92 <process_music>
	clr r1
    6d48:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    6d4a:	e0 91 f1 0a 	lds	r30, 0x0AF1
	lds ZH,post_vsync_user_callback+1
    6d4e:	f0 91 f2 0a 	lds	r31, 0x0AF2
	cp  ZL,r1
    6d52:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6d54:	f1 05       	cpc	r31, r1
	breq .+2 
    6d56:	09 f0       	breq	.+2      	; 0x6d5a <no_render+0x6c>
	icall
    6d58:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    6d5a:	bf 91       	pop	r27
	pop r26
    6d5c:	af 91       	pop	r26
	pop r25
    6d5e:	9f 91       	pop	r25
	pop r24
    6d60:	8f 91       	pop	r24
	pop r23
    6d62:	7f 91       	pop	r23
	pop r22
    6d64:	6f 91       	pop	r22
	pop r21
    6d66:	5f 91       	pop	r21
	pop r20
    6d68:	4f 91       	pop	r20
	pop r19
    6d6a:	3f 91       	pop	r19
	pop r18
    6d6c:	2f 91       	pop	r18

00006d6e <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    6d6e:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    6d70:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    6d72:	ff 91       	pop	r31
	pop ZL
    6d74:	ef 91       	pop	r30
	pop r1
    6d76:	1f 90       	pop	r1
	pop r0
    6d78:	0f 90       	pop	r0
	reti
    6d7a:	18 95       	reti

00006d7c <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6d7c:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    6d7e:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    6d80:	00 c0       	rjmp	.+0      	; 0x6d82 <hsync_pulse+0x6>
	call update_sound
    6d82:	0e 94 cf 36 	call	0x6d9e	; 0x6d9e <update_sound>

	lds ZL,sync_pulse
    6d86:	e0 91 ed 0a 	lds	r30, 0x0AED
	dec ZL
    6d8a:	ea 95       	dec	r30
	sts sync_pulse,ZL
    6d8c:	e0 93 ed 0a 	sts	0x0AED, r30

	ret
    6d90:	08 95       	ret

00006d92 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    6d92:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    6d96:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    6d98:	0e 94 d9 3a 	call	0x75b2	; 0x75b2 <ProcessMusic>
#endif

	ret
    6d9c:	08 95       	ret

00006d9e <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    6d9e:	0f 93       	push	r16
	push r17
    6da0:	1f 93       	push	r17
	push r18
    6da2:	2f 93       	push	r18
	push r28
    6da4:	cf 93       	push	r28
	push r29
    6da6:	df 93       	push	r29

	mov r18,ZL
    6da8:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    6daa:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    6dae:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    6db2:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    6db4:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    6db8:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    6dbc:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    6dc0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6dc2:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    6dc4:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    6dc8:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    6dcc:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    6dd0:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6dd2:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6dd4:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6dd6:	d0 2d       	mov	r29, r0
	nop
    6dd8:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    6dda:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    6dde:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    6de2:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6de4:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    6de8:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    6dec:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    6df0:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6df2:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6df4:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    6df8:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    6dfc:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6e00:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6e02:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6e04:	20 ff       	sbrs	r18, 0
	rjmp .
    6e06:	00 c0       	rjmp	.+0      	; 0x6e08 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    6e08:	01 03       	mulsu	r16, r17
	clr r0
    6e0a:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    6e0c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e0e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6e10:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6e12:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    6e16:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    6e1a:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    6e1c:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    6e20:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    6e24:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    6e28:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    6e2a:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    6e2c:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    6e30:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    6e34:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    6e38:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    6e3a:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    6e3c:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6e3e:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6e40:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    6e44:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    6e48:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    6e4c:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6e4e:	92 f4       	brpl	.+36     	; 0x6e74 <ch4_no_shift>

	lds ZH,tr4_params
    6e50:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    6e54:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6e56:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    6e58:	00 2e       	mov	r0, r16
	lsr r0
    6e5a:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    6e5c:	00 26       	eor	r0, r16
	bst r0,0
    6e5e:	00 fa       	bst	r0, 0
	lsr r17
    6e60:	16 95       	lsr	r17
	ror r16
    6e62:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6e64:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6e66:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    6e68:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    6e6a:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    6e6e:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    6e72:	03 c0       	rjmp	.+6      	; 0x6e7a <ch4_end>

00006e74 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    6e74:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    6e76:	1a 95       	dec	r17
	brne .-4
    6e78:	f1 f7       	brne	.-4      	; 0x6e76 <ch4_no_shift+0x2>

00006e7a <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    6e7a:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    6e7e:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    6e80:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    6e82:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    6e84:	21 ff       	sbrs	r18, 1
	rjmp .
    6e86:	00 c0       	rjmp	.+0      	; 0x6e88 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    6e88:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    6e8a:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    6e8c:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    6e90:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    6e92:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6e94:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    6e96:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    6e98:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    6e9c:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    6ea0:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    6ea2:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    6ea6:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    6eaa:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    6eae:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    6eb0:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    6eb4:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    6eb6:	f0 1f       	adc	r31, r16

	movw r16,ZL
    6eb8:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    6eba:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    6ebe:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    6ec2:	00 19       	sub	r16, r0
	sbc r17,r1
    6ec4:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    6ec6:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    6eca:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    6ece:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6ed0:	f1 05       	cpc	r31, r1
	brlo .+2
    6ed2:	08 f0       	brcs	.+2      	; 0x6ed6 <ch4_end+0x5c>
	movw ZL,r16
    6ed4:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6ed6:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    6eda:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    6ede:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6ee0:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    6ee4:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6ee6:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6ee8:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6eea:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6eec:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6eee:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6ef0:	d0 05       	cpc	r29, r0
	brlt .+2
    6ef2:	0c f0       	brlt	.+2      	; 0x6ef6 <ch4_end+0x7c>
	ldi r28,127
    6ef4:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6ef6:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6ef8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6efa:	d0 05       	cpc	r29, r0
	brge .+2
    6efc:	0c f4       	brge	.+2      	; 0x6f00 <ch4_end+0x86>
	ldi r28,-128
    6efe:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6f00:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6f02:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6f06:	df 91       	pop	r29
	pop r28
    6f08:	cf 91       	pop	r28
	pop r18
    6f0a:	2f 91       	pop	r18
	pop r17
    6f0c:	1f 91       	pop	r17
	pop r16
    6f0e:	0f 91       	pop	r16
	
	ret
    6f10:	08 95       	ret

00006f12 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6f12:	80 93 dd 0a 	sts	0x0ADD, r24
	sts sprites_tile_banks+1,r25
    6f16:	90 93 de 0a 	sts	0x0ADE, r25
	ret
    6f1a:	08 95       	ret

00006f1c <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f1c:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6f1e:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6f20:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f22:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6f24:	67 e1       	ldi	r22, 0x17	; 23

00006f26 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6f26:	6d 93       	st	X+, r22
	sbiw r30,1
    6f28:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6f2a:	e9 f7       	brne	.-6      	; 0x6f26 <fill_vram_loop>

	clr r1
    6f2c:	11 24       	eor	r1, r1

	ret
    6f2e:	08 95       	ret

00006f30 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    6f30:	50 91 e7 0a 	lds	r21, 0x0AE7
	add r20,21
    6f34:	45 0f       	add	r20, r21
	rjmp SetTile	
    6f36:	00 c0       	rjmp	.+0      	; 0x6f38 <SetTile>

00006f38 <SetTile>:

	ret

#else

	clr r25
    6f38:	99 27       	eor	r25, r25
	clr r23	
    6f3a:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6f3c:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    6f3e:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    6f40:	08 0e       	add	r0, r24
	adc r1,r25
    6f42:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6f44:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6f46:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    6f48:	a0 0d       	add	r26, r0
	adc XH,r1
    6f4a:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6f4c:	49 5e       	subi	r20, 0xE9	; 233
	st X,r20
    6f4e:	4c 93       	st	X, r20

	clr r1
    6f50:	11 24       	eor	r1, r1

	ret
    6f52:	08 95       	ret

00006f54 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6f54:	80 93 e7 0a 	sts	0x0AE7, r24
	ret
    6f58:	08 95       	ret

00006f5a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6f5a:	80 93 e5 0a 	sts	0x0AE5, r24
	sts tile_table_hi,r25	
    6f5e:	90 93 e6 0a 	sts	0x0AE6, r25
	ret
    6f62:	08 95       	ret

00006f64 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6f64:	80 91 ee 0a 	lds	r24, 0x0AEE
	andi r24,SYNC_FLAG_VSYNC
    6f68:	81 70       	andi	r24, 0x01	; 1
	ret
    6f6a:	08 95       	ret

00006f6c <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6f6c:	20 91 ee 0a 	lds	r18, 0x0AEE
	andi r18,~SYNC_FLAG_VSYNC
    6f70:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6f72:	20 93 ee 0a 	sts	0x0AEE, r18
	ret
    6f76:	08 95       	ret

00006f78 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6f78:	88 23       	and	r24, r24
	brne rj_p2
    6f7a:	29 f4       	brne	.+10     	; 0x6f86 <rj_p2>
		
	lds r24,joypad1_status_lo
    6f7c:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad1_status_lo+1
    6f80:	90 91 f8 0a 	lds	r25, 0x0AF8
	ret
    6f84:	08 95       	ret

00006f86 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6f86:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,joypad2_status_lo+1	
    6f8a:	90 91 fc 0a 	lds	r25, 0x0AFC

	ret
    6f8e:	08 95       	ret

00006f90 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6f90:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6f92:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6f94:	f1 f7       	brne	.-4      	; 0x6f92 <WaitUs+0x2>
	nop
    6f96:	00 00       	nop
	sbiw r24,1
    6f98:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6f9a:	d1 f7       	brne	.-12     	; 0x6f90 <WaitUs>

	ret
    6f9c:	08 95       	ret

00006f9e <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6f9e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6fa0:	fe cf       	rjmp	.-4      	; 0x6f9e <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6fa2:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6fa4:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6fa6:	60 bd       	out	0x20, r22	; 32
   cli
    6fa8:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6faa:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6fac:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6fae:	78 94       	sei
   ret
    6fb0:	08 95       	ret

00006fb2 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6fb2:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6fb4:	fe cf       	rjmp	.-4      	; 0x6fb2 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6fb6:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6fb8:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6fba:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6fbc:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6fbe:	80 b5       	in	r24, 0x20	; 32
   sei
    6fc0:	78 94       	sei
   ret
    6fc2:	08 95       	ret

00006fc4 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6fc4:	98 e0       	ldi	r25, 0x08	; 8
    6fc6:	88 e1       	ldi	r24, 0x18	; 24
    6fc8:	0f b6       	in	r0, 0x3f	; 63
    6fca:	f8 94       	cli
    6fcc:	a8 95       	wdr
    6fce:	80 93 60 00 	sts	0x0060, r24
    6fd2:	0f be       	out	0x3f, r0	; 63
    6fd4:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6fd8:	ff cf       	rjmp	.-2      	; 0x6fd8 <SoftReset+0x14>

00006fda <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6fda:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6fdc:	c8 95       	lpm
    6fde:	c8 95       	lpm
		Wait200ns();
    6fe0:	c8 95       	lpm
    6fe2:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    6fe4:	12 98       	cbi	0x02, 2	; 2
    6fe6:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    6fe8:	80 e0       	ldi	r24, 0x00	; 0
    6fea:	90 e0       	ldi	r25, 0x00	; 0
    6fec:	20 e0       	ldi	r18, 0x00	; 0
    6fee:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6ff0:	36 95       	lsr	r19
    6ff2:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    6ff4:	96 95       	lsr	r25
    6ff6:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6ff8:	c8 95       	lpm
    6ffa:	c8 95       	lpm
			Wait200ns();
    6ffc:	c8 95       	lpm
    6ffe:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7000:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7002:	00 9b       	sbis	0x00, 0	; 0
    7004:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7006:	01 9b       	sbis	0x00, 1	; 0
    7008:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    700a:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    700c:	c8 95       	lpm
    700e:	c8 95       	lpm
			Wait200ns();
    7010:	c8 95       	lpm
    7012:	c8 95       	lpm
    7014:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7016:	61 f7       	brne	.-40     	; 0x6ff0 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7018:	30 93 f8 0a 	sts	0x0AF8, r19
    701c:	20 93 f7 0a 	sts	0x0AF7, r18
		joypad2_status_lo=p2ButtonsLo;
    7020:	90 93 fc 0a 	sts	0x0AFC, r25
    7024:	80 93 fb 0a 	sts	0x0AFB, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7028:	80 91 f7 0a 	lds	r24, 0x0AF7
    702c:	90 91 f8 0a 	lds	r25, 0x0AF8
    7030:	0f 97       	sbiw	r24, 0x0f	; 15
    7032:	31 f0       	breq	.+12     	; 0x7040 <ReadButtons+0x66>
    7034:	80 91 fb 0a 	lds	r24, 0x0AFB
    7038:	90 91 fc 0a 	lds	r25, 0x0AFC
    703c:	0f 97       	sbiw	r24, 0x0f	; 15
    703e:	11 f4       	brne	.+4      	; 0x7044 <ReadButtons+0x6a>
		SoftReset();
    7040:	0e 94 e2 37 	call	0x6fc4	; 0x6fc4 <SoftReset>
    7044:	08 95       	ret

00007046 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7046:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    704a:	00 99       	sbic	0x00, 0	; 0
    704c:	03 c0       	rjmp	.+6      	; 0x7054 <ReadControllers+0xe>
    704e:	81 e0       	ldi	r24, 0x01	; 1
    7050:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7054:	01 99       	sbic	0x00, 1	; 0
    7056:	05 c0       	rjmp	.+10     	; 0x7062 <ReadControllers+0x1c>
    7058:	80 91 36 0b 	lds	r24, 0x0B36
    705c:	82 60       	ori	r24, 0x02	; 2
    705e:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    7062:	0c 94 ed 37 	jmp	0x6fda	; 0x6fda <ReadButtons>

00007066 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7066:	cf 93       	push	r28
    7068:	df 93       	push	r29
    706a:	c0 e0       	ldi	r28, 0x00	; 0
    706c:	d0 e0       	ldi	r29, 0x00	; 0
    706e:	fe 01       	movw	r30, r28
    7070:	e0 55       	subi	r30, 0x50	; 80
    7072:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7074:	64 91       	lpm	r22, Z
    7076:	ce 01       	movw	r24, r28
    7078:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <WriteEeprom>
    707c:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    707e:	c0 32       	cpi	r28, 0x20	; 32
    7080:	d1 05       	cpc	r29, r1
    7082:	a9 f7       	brne	.-22     	; 0x706e <FormatEeprom+0x8>
    7084:	c0 e2       	ldi	r28, 0x20	; 32
    7086:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7088:	6f ef       	ldi	r22, 0xFF	; 255
    708a:	ce 01       	movw	r24, r28
    708c:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7090:	6f ef       	ldi	r22, 0xFF	; 255
    7092:	ce 01       	movw	r24, r28
    7094:	01 96       	adiw	r24, 0x01	; 1
    7096:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    709a:	a0 96       	adiw	r28, 0x20	; 32
    709c:	c1 15       	cp	r28, r1
    709e:	88 e0       	ldi	r24, 0x08	; 8
    70a0:	d8 07       	cpc	r29, r24
    70a2:	91 f7       	brne	.-28     	; 0x7088 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    70a4:	df 91       	pop	r29
    70a6:	cf 91       	pop	r28
    70a8:	08 95       	ret

000070aa <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    70aa:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    70ac:	80 e0       	ldi	r24, 0x00	; 0
    70ae:	90 e0       	ldi	r25, 0x00	; 0
    70b0:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    70b4:	c8 2f       	mov	r28, r24
    70b6:	81 e0       	ldi	r24, 0x01	; 1
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    70be:	28 2f       	mov	r18, r24
    70c0:	30 e0       	ldi	r19, 0x00	; 0
    70c2:	32 2f       	mov	r19, r18
    70c4:	22 27       	eor	r18, r18
    70c6:	2c 0f       	add	r18, r28
    70c8:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    70ca:	81 e0       	ldi	r24, 0x01	; 1
    70cc:	2a 35       	cpi	r18, 0x5A	; 90
    70ce:	35 45       	sbci	r19, 0x55	; 85
    70d0:	09 f0       	breq	.+2      	; 0x70d4 <isEepromFormatted+0x2a>
    70d2:	80 e0       	ldi	r24, 0x00	; 0
}
    70d4:	cf 91       	pop	r28
    70d6:	08 95       	ret

000070d8 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    70d8:	cf 92       	push	r12
    70da:	df 92       	push	r13
    70dc:	ef 92       	push	r14
    70de:	ff 92       	push	r15
    70e0:	0f 93       	push	r16
    70e2:	1f 93       	push	r17
    70e4:	cf 93       	push	r28
    70e6:	df 93       	push	r29
    70e8:	1f 92       	push	r1
    70ea:	cd b7       	in	r28, 0x3d	; 61
    70ec:	de b7       	in	r29, 0x3e	; 62
    70ee:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    70f0:	0e 94 55 38 	call	0x70aa	; 0x70aa <isEepromFormatted>
    70f4:	88 23       	and	r24, r24
    70f6:	09 f4       	brne	.+2      	; 0x70fa <EepromWriteBlock+0x22>
    70f8:	4d c0       	rjmp	.+154    	; 0x7194 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    70fa:	f6 01       	movw	r30, r12
    70fc:	80 81       	ld	r24, Z
    70fe:	91 81       	ldd	r25, Z+1	; 0x01
    7100:	8f 3f       	cpi	r24, 0xFF	; 255
    7102:	ff ef       	ldi	r31, 0xFF	; 255
    7104:	9f 07       	cpc	r25, r31
    7106:	09 f4       	brne	.+2      	; 0x710a <EepromWriteBlock+0x32>
    7108:	47 c0       	rjmp	.+142    	; 0x7198 <EepromWriteBlock+0xc0>
    710a:	8a 35       	cpi	r24, 0x5A	; 90
    710c:	95 45       	sbci	r25, 0x55	; 85
    710e:	09 f4       	brne	.+2      	; 0x7112 <EepromWriteBlock+0x3a>
    7110:	43 c0       	rjmp	.+134    	; 0x7198 <EepromWriteBlock+0xc0>
    7112:	00 e2       	ldi	r16, 0x20	; 32
    7114:	10 e0       	ldi	r17, 0x00	; 0
    7116:	f1 2c       	mov	r15, r1
    7118:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    711a:	c8 01       	movw	r24, r16
    711c:	49 83       	std	Y+1, r20	; 0x01
    711e:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    7122:	e8 2e       	mov	r14, r24
    7124:	c8 01       	movw	r24, r16
    7126:	01 96       	adiw	r24, 0x01	; 1
    7128:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    712c:	28 2f       	mov	r18, r24
    712e:	30 e0       	ldi	r19, 0x00	; 0
    7130:	32 2f       	mov	r19, r18
    7132:	22 27       	eor	r18, r18
    7134:	c9 01       	movw	r24, r18
    7136:	8e 0d       	add	r24, r14
    7138:	91 1d       	adc	r25, r1
		if(id==block->id){
    713a:	f6 01       	movw	r30, r12
    713c:	20 81       	ld	r18, Z
    713e:	31 81       	ldd	r19, Z+1	; 0x01
    7140:	49 81       	ldd	r20, Y+1	; 0x01
    7142:	82 17       	cp	r24, r18
    7144:	93 07       	cpc	r25, r19
    7146:	19 f4       	brne	.+6      	; 0x714e <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7148:	ff 20       	and	r15, r15
    714a:	89 f0       	breq	.+34     	; 0x716e <EepromWriteBlock+0x96>
    714c:	0c c0       	rjmp	.+24     	; 0x7166 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    714e:	01 96       	adiw	r24, 0x01	; 1
    7150:	19 f4       	brne	.+6      	; 0x7158 <EepromWriteBlock+0x80>
    7152:	f1 10       	cpse	r15, r1
    7154:	01 c0       	rjmp	.+2      	; 0x7158 <EepromWriteBlock+0x80>
    7156:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7158:	4f 5f       	subi	r20, 0xFF	; 255
    715a:	00 5e       	subi	r16, 0xE0	; 224
    715c:	1f 4f       	sbci	r17, 0xFF	; 255
    715e:	40 34       	cpi	r20, 0x40	; 64
    7160:	e1 f6       	brne	.-72     	; 0x711a <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7162:	ff 20       	and	r15, r15
    7164:	d9 f0       	breq	.+54     	; 0x719c <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7166:	20 e2       	ldi	r18, 0x20	; 32
    7168:	f2 9e       	mul	r15, r18
    716a:	80 01       	movw	r16, r0
    716c:	11 24       	eor	r1, r1
    716e:	76 01       	movw	r14, r12
    7170:	80 e2       	ldi	r24, 0x20	; 32
    7172:	e8 0e       	add	r14, r24
    7174:	f1 1c       	adc	r15, r1
    7176:	0c 19       	sub	r16, r12
    7178:	1d 09       	sbc	r17, r13
    717a:	c6 01       	movw	r24, r12
    717c:	80 0f       	add	r24, r16
    717e:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    7180:	f6 01       	movw	r30, r12
    7182:	61 91       	ld	r22, Z+
    7184:	6f 01       	movw	r12, r30
    7186:	0e 94 cf 37 	call	0x6f9e	; 0x6f9e <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    718a:	ce 14       	cp	r12, r14
    718c:	df 04       	cpc	r13, r15
    718e:	a9 f7       	brne	.-22     	; 0x717a <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    7190:	80 e0       	ldi	r24, 0x00	; 0
    7192:	05 c0       	rjmp	.+10     	; 0x719e <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7194:	84 e0       	ldi	r24, 0x04	; 4
    7196:	03 c0       	rjmp	.+6      	; 0x719e <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7198:	81 e0       	ldi	r24, 0x01	; 1
    719a:	01 c0       	rjmp	.+2      	; 0x719e <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    719c:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    719e:	0f 90       	pop	r0
    71a0:	df 91       	pop	r29
    71a2:	cf 91       	pop	r28
    71a4:	1f 91       	pop	r17
    71a6:	0f 91       	pop	r16
    71a8:	ff 90       	pop	r15
    71aa:	ef 90       	pop	r14
    71ac:	df 90       	pop	r13
    71ae:	cf 90       	pop	r12
    71b0:	08 95       	ret

000071b2 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    71b2:	df 92       	push	r13
    71b4:	ef 92       	push	r14
    71b6:	ff 92       	push	r15
    71b8:	0f 93       	push	r16
    71ba:	1f 93       	push	r17
    71bc:	cf 93       	push	r28
    71be:	df 93       	push	r29
    71c0:	7c 01       	movw	r14, r24
    71c2:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    71c4:	0e 94 55 38 	call	0x70aa	; 0x70aa <isEepromFormatted>
    71c8:	88 23       	and	r24, r24
    71ca:	89 f1       	breq	.+98     	; 0x722e <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    71cc:	8f ef       	ldi	r24, 0xFF	; 255
    71ce:	e8 16       	cp	r14, r24
    71d0:	f8 06       	cpc	r15, r24
    71d2:	79 f1       	breq	.+94     	; 0x7232 <EepromReadBlock+0x80>
    71d4:	00 e0       	ldi	r16, 0x00	; 0
    71d6:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    71d8:	c8 01       	movw	r24, r16
    71da:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    71de:	d8 2e       	mov	r13, r24
    71e0:	c8 01       	movw	r24, r16
    71e2:	01 96       	adiw	r24, 0x01	; 1
    71e4:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    71e8:	28 2f       	mov	r18, r24
    71ea:	30 e0       	ldi	r19, 0x00	; 0
    71ec:	32 2f       	mov	r19, r18
    71ee:	22 27       	eor	r18, r18
    71f0:	2d 0d       	add	r18, r13
    71f2:	31 1d       	adc	r19, r1
		if(id==blockId){
    71f4:	2e 15       	cp	r18, r14
    71f6:	3f 05       	cpc	r19, r15
    71f8:	39 f4       	brne	.+14     	; 0x7208 <EepromReadBlock+0x56>
    71fa:	7e 01       	movw	r14, r28
    71fc:	80 e2       	ldi	r24, 0x20	; 32
    71fe:	e8 0e       	add	r14, r24
    7200:	f1 1c       	adc	r15, r1
    7202:	0c 1b       	sub	r16, r28
    7204:	1d 0b       	sbc	r17, r29
    7206:	08 c0       	rjmp	.+16     	; 0x7218 <EepromReadBlock+0x66>
    7208:	00 5e       	subi	r16, 0xE0	; 224
    720a:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    720c:	01 15       	cp	r16, r1
    720e:	84 e0       	ldi	r24, 0x04	; 4
    7210:	18 07       	cpc	r17, r24
    7212:	11 f7       	brne	.-60     	; 0x71d8 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7214:	83 e0       	ldi	r24, 0x03	; 3
    7216:	0e c0       	rjmp	.+28     	; 0x7234 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7218:	ce 01       	movw	r24, r28
    721a:	80 0f       	add	r24, r16
    721c:	91 1f       	adc	r25, r17
    721e:	0e 94 d9 37 	call	0x6fb2	; 0x6fb2 <ReadEeprom>
    7222:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7224:	ce 15       	cp	r28, r14
    7226:	df 05       	cpc	r29, r15
    7228:	b9 f7       	brne	.-18     	; 0x7218 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    722a:	80 e0       	ldi	r24, 0x00	; 0
    722c:	03 c0       	rjmp	.+6      	; 0x7234 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    722e:	84 e0       	ldi	r24, 0x04	; 4
    7230:	01 c0       	rjmp	.+2      	; 0x7234 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7232:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    7234:	df 91       	pop	r29
    7236:	cf 91       	pop	r28
    7238:	1f 91       	pop	r17
    723a:	0f 91       	pop	r16
    723c:	ff 90       	pop	r15
    723e:	ef 90       	pop	r14
    7240:	df 90       	pop	r13
    7242:	08 95       	ret

00007244 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7244:	fc 01       	movw	r30, r24
    7246:	45 87       	std	Z+13, r20	; 0x0d
    7248:	08 95       	ret

0000724a <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    724a:	e2 e0       	ldi	r30, 0x02	; 2
    724c:	fb e0       	ldi	r31, 0x0B	; 11
    724e:	81 e0       	ldi	r24, 0x01	; 1
    7250:	91 e0       	ldi	r25, 0x01	; 1
    7252:	95 8b       	std	Z+21, r25	; 0x15
    7254:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7256:	43 8b       	std	Z+19, r20	; 0x13
    7258:	08 95       	ret

0000725a <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    725a:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    725c:	90 81       	ld	r25, Z
    725e:	9f 75       	andi	r25, 0x5F	; 95
    7260:	90 83       	st	Z, r25
    7262:	08 95       	ret

00007264 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    7264:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7266:	90 81       	ld	r25, Z
    7268:	90 64       	ori	r25, 0x40	; 64
    726a:	90 83       	st	Z, r25
    726c:	08 95       	ret

0000726e <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    726e:	fc 01       	movw	r30, r24
    7270:	44 87       	std	Z+12, r20	; 0x0c
    7272:	08 95       	ret

00007274 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    7274:	fc 01       	movw	r30, r24
    7276:	47 83       	std	Z+7, r20	; 0x07
    7278:	08 95       	ret

0000727a <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    727a:	fc 01       	movw	r30, r24
    727c:	40 87       	std	Z+8, r20	; 0x08
    727e:	08 95       	ret

00007280 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    7280:	1f 93       	push	r17
    7282:	cf 93       	push	r28
    7284:	df 93       	push	r29
    7286:	ec 01       	movw	r28, r24
    7288:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    728a:	29 81       	ldd	r18, Y+1	; 0x01
    728c:	30 e0       	ldi	r19, 0x00	; 0
    728e:	f9 01       	movw	r30, r18
    7290:	ee 0f       	add	r30, r30
    7292:	ff 1f       	adc	r31, r31
    7294:	e8 5f       	subi	r30, 0xF8	; 248
    7296:	f4 48       	sbci	r31, 0x84	; 132
    7298:	65 91       	lpm	r22, Z+
    729a:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    729c:	f9 01       	movw	r30, r18
    729e:	e4 0f       	add	r30, r20
    72a0:	f1 1d       	adc	r31, r1
    72a2:	47 fd       	sbrc	r20, 7
    72a4:	fa 95       	dec	r31
    72a6:	ee 0f       	add	r30, r30
    72a8:	ff 1f       	adc	r31, r31
    72aa:	e8 5f       	subi	r30, 0xF8	; 248
    72ac:	f4 48       	sbci	r31, 0x84	; 132
    72ae:	85 91       	lpm	r24, Z+
    72b0:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    72b2:	86 1b       	sub	r24, r22
    72b4:	97 0b       	sbc	r25, r23
    72b6:	60 91 3e 0b 	lds	r22, 0x0B3E
    72ba:	70 e0       	ldi	r23, 0x00	; 0
    72bc:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
	if(delta==0)delta++;
    72c0:	61 15       	cp	r22, r1
    72c2:	71 05       	cpc	r23, r1
    72c4:	11 f4       	brne	.+4      	; 0x72ca <PatchCommand11+0x4a>
    72c6:	61 e0       	ldi	r22, 0x01	; 1
    72c8:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    72ca:	86 e0       	ldi	r24, 0x06	; 6
    72cc:	18 9f       	mul	r17, r24
    72ce:	f0 01       	movw	r30, r0
    72d0:	11 24       	eor	r1, r1
    72d2:	ee 5f       	subi	r30, 0xFE	; 254
    72d4:	f4 4f       	sbci	r31, 0xF4	; 244
    72d6:	81 81       	ldd	r24, Z+1	; 0x01
    72d8:	92 81       	ldd	r25, Z+2	; 0x02
    72da:	86 0f       	add	r24, r22
    72dc:	97 1f       	adc	r25, r23
    72de:	92 83       	std	Z+2, r25	; 0x02
    72e0:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    72e2:	7b 83       	std	Y+3, r23	; 0x03
    72e4:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    72e6:	88 81       	ld	r24, Y
    72e8:	88 60       	ori	r24, 0x08	; 8
    72ea:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    72ec:	89 81       	ldd	r24, Y+1	; 0x01
    72ee:	48 0f       	add	r20, r24
    72f0:	4c 83       	std	Y+4, r20	; 0x04
}
    72f2:	df 91       	pop	r29
    72f4:	cf 91       	pop	r28
    72f6:	1f 91       	pop	r17
    72f8:	08 95       	ret

000072fa <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    72fa:	40 93 3e 0b 	sts	0x0B3E, r20
    72fe:	08 95       	ret

00007300 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7300:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7302:	64 2f       	mov	r22, r20
    7304:	0c 94 1a 3d 	jmp	0x7a34	; 0x7a34 <SetMixerWave>

00007308 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    7308:	fc 01       	movw	r30, r24
    730a:	86 2f       	mov	r24, r22
	track->note+=param;
    730c:	91 81       	ldd	r25, Z+1	; 0x01
    730e:	64 2f       	mov	r22, r20
    7310:	69 0f       	add	r22, r25
    7312:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7314:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <SetMixerNote>

00007318 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    7318:	fc 01       	movw	r30, r24
    731a:	86 2f       	mov	r24, r22
	track->note-=param;
    731c:	91 81       	ldd	r25, Z+1	; 0x01
    731e:	69 2f       	mov	r22, r25
    7320:	64 1b       	sub	r22, r20
    7322:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    7324:	0c 94 03 3d 	jmp	0x7a06	; 0x7a06 <SetMixerNote>

00007328 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    7328:	0f 93       	push	r16
    732a:	1f 93       	push	r17
    732c:	cf 93       	push	r28
    732e:	df 93       	push	r29
    7330:	1f 92       	push	r1
    7332:	cd b7       	in	r28, 0x3d	; 61
    7334:	de b7       	in	r29, 0x3e	; 62
    7336:	8c 01       	movw	r16, r24
    7338:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    733a:	64 2f       	mov	r22, r20
    733c:	49 83       	std	Y+1, r20	; 0x01
    733e:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <SetMixerNote>
	track->note=param;
    7342:	49 81       	ldd	r20, Y+1	; 0x01
    7344:	f8 01       	movw	r30, r16
    7346:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7348:	80 81       	ld	r24, Z
    734a:	87 7f       	andi	r24, 0xF7	; 247
    734c:	80 83       	st	Z, r24
}
    734e:	0f 90       	pop	r0
    7350:	df 91       	pop	r29
    7352:	cf 91       	pop	r28
    7354:	1f 91       	pop	r17
    7356:	0f 91       	pop	r16
    7358:	08 95       	ret

0000735a <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    735a:	90 93 aa 0b 	sts	0x0BAA, r25
    735e:	80 93 a9 0b 	sts	0x0BA9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7362:	8f e6       	ldi	r24, 0x6F	; 111
    7364:	80 93 ac 0b 	sts	0x0BAC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7368:	10 92 00 0b 	sts	0x0B00, r1
    736c:	e7 e4       	ldi	r30, 0x47	; 71
    736e:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7370:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7372:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7374:	28 e1       	ldi	r18, 0x18	; 24
    7376:	df 01       	movw	r26, r30
    7378:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    737a:	8c 93       	st	X, r24
    737c:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    737e:	1c 92       	st	X, r1
    7380:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    7382:	9c 93       	st	X, r25
    7384:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7386:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    7388:	10 82       	st	Z, r1
    738a:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    738c:	2c 93       	st	X, r18
    738e:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7390:	8c 93       	st	X, r24
    7392:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7394:	3b e0       	ldi	r19, 0x0B	; 11
    7396:	e5 3b       	cpi	r30, 0xB5	; 181
    7398:	f3 07       	cpc	r31, r19
    739a:	69 f7       	brne	.-38     	; 0x7376 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    739c:	08 95       	ret

0000739e <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    739e:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    73a0:	ed 91       	ld	r30, X+
    73a2:	fc 91       	ld	r31, X
    73a4:	11 97       	sbiw	r26, 0x01	; 1
    73a6:	9f 01       	movw	r18, r30
    73a8:	2f 5f       	subi	r18, 0xFF	; 255
    73aa:	3f 4f       	sbci	r19, 0xFF	; 255
    73ac:	11 96       	adiw	r26, 0x01	; 1
    73ae:	3c 93       	st	X, r19
    73b0:	2e 93       	st	-X, r18
    73b2:	e4 91       	lpm	r30, Z
    73b4:	e7 fd       	sbrc	r30, 7
    73b6:	03 c0       	rjmp	.+6      	; 0x73be <ReadVarLen+0x20>
    73b8:	8e 2f       	mov	r24, r30
    73ba:	90 e0       	ldi	r25, 0x00	; 0
    73bc:	08 95       	ret
    {
       value &= 0x7F;
    73be:	ef 77       	andi	r30, 0x7F	; 127
    73c0:	8e 2f       	mov	r24, r30
    73c2:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    73c4:	96 95       	lsr	r25
    73c6:	98 2f       	mov	r25, r24
    73c8:	88 27       	eor	r24, r24
    73ca:	97 95       	ror	r25
    73cc:	87 95       	ror	r24
    73ce:	2f 5f       	subi	r18, 0xFF	; 255
    73d0:	3f 4f       	sbci	r19, 0xFF	; 255
    73d2:	f9 01       	movw	r30, r18
    73d4:	31 97       	sbiw	r30, 0x01	; 1
    73d6:	e4 91       	lpm	r30, Z
    73d8:	4e 2f       	mov	r20, r30
    73da:	4f 77       	andi	r20, 0x7F	; 127
    73dc:	84 0f       	add	r24, r20
    73de:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    73e0:	e7 fd       	sbrc	r30, 7
    73e2:	f0 cf       	rjmp	.-32     	; 0x73c4 <ReadVarLen+0x26>
    73e4:	2d 93       	st	X+, r18
    73e6:	3c 93       	st	X, r19
    }


    return value;
}
    73e8:	08 95       	ret

000073ea <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    73ea:	cf 92       	push	r12
    73ec:	df 92       	push	r13
    73ee:	ff 92       	push	r15
    73f0:	0f 93       	push	r16
    73f2:	1f 93       	push	r17
    73f4:	cf 93       	push	r28
    73f6:	df 93       	push	r29
    73f8:	1f 92       	push	r1
    73fa:	cd b7       	in	r28, 0x3d	; 61
    73fc:	de b7       	in	r29, 0x3e	; 62
    73fe:	18 2f       	mov	r17, r24
    7400:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7402:	c8 2e       	mov	r12, r24
    7404:	d1 2c       	mov	r13, r1
    7406:	36 e1       	ldi	r19, 0x16	; 22
    7408:	83 9f       	mul	r24, r19
    740a:	f0 01       	movw	r30, r0
    740c:	11 24       	eor	r1, r1
    740e:	e7 5c       	subi	r30, 0xC7	; 199
    7410:	f4 4f       	sbci	r31, 0xF4	; 244
    7412:	80 81       	ld	r24, Z
    7414:	f8 2e       	mov	r15, r24
    7416:	ff 1c       	adc	r15, r15
    7418:	ff 24       	eor	r15, r15
    741a:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    741c:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    741e:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7420:	9f ef       	ldi	r25, 0xFF	; 255
    7422:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    7424:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    7426:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7428:	87 7b       	andi	r24, 0xB7	; 183
    742a:	80 62       	ori	r24, 0x20	; 32
    742c:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    742e:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7430:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    7432:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    7434:	13 30       	cpi	r17, 0x03	; 3
    7436:	69 f4       	brne	.+26     	; 0x7452 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    7438:	f1 10       	cpse	r15, r1
    743a:	01 c0       	rjmp	.+2      	; 0x743e <TriggerCommon+0x54>
    743c:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    743e:	81 e0       	ldi	r24, 0x01	; 1
    7440:	91 e0       	ldi	r25, 0x01	; 1
    7442:	90 93 17 0b 	sts	0x0B17, r25
    7446:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    744a:	81 e0       	ldi	r24, 0x01	; 1
    744c:	80 93 15 0b 	sts	0x0B15, r24
    7450:	3c c0       	rjmp	.+120    	; 0x74ca <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    7452:	14 30       	cpi	r17, 0x04	; 4
    7454:	09 f0       	breq	.+2      	; 0x7458 <TriggerCommon+0x6e>
    7456:	2f c0       	rjmp	.+94     	; 0x74b6 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    7458:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    745c:	80 91 a9 0b 	lds	r24, 0x0BA9
    7460:	90 91 aa 0b 	lds	r25, 0x0BAA
    7464:	e9 e0       	ldi	r30, 0x09	; 9
    7466:	6e 9f       	mul	r22, r30
    7468:	80 0d       	add	r24, r0
    746a:	91 1d       	adc	r25, r1
    746c:	11 24       	eor	r1, r1
    746e:	fc 01       	movw	r30, r24
    7470:	31 96       	adiw	r30, 0x01	; 1
    7472:	65 91       	lpm	r22, Z+
    7474:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    7476:	70 93 1f 0b 	sts	0x0B1F, r23
    747a:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    747e:	ac 01       	movw	r20, r24
    7480:	49 5f       	subi	r20, 0xF9	; 249
    7482:	5f 4f       	sbci	r21, 0xFF	; 255
    7484:	fa 01       	movw	r30, r20
    7486:	a5 91       	lpm	r26, Z+
    7488:	b4 91       	lpm	r27, Z
    748a:	05 96       	adiw	r24, 0x05	; 5
    748c:	fc 01       	movw	r30, r24
    748e:	85 91       	lpm	r24, Z+
    7490:	94 91       	lpm	r25, Z
    7492:	a8 1b       	sub	r26, r24
    7494:	b9 0b       	sbc	r27, r25
    7496:	b0 93 21 0b 	sts	0x0B21, r27
    749a:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    749e:	fa 01       	movw	r30, r20
    74a0:	85 91       	lpm	r24, Z+
    74a2:	94 91       	lpm	r25, Z
    74a4:	68 0f       	add	r22, r24
    74a6:	79 1f       	adc	r23, r25
    74a8:	70 93 23 0b 	sts	0x0B23, r23
    74ac:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    74b0:	62 2f       	mov	r22, r18
    74b2:	84 e0       	ldi	r24, 0x04	; 4
    74b4:	08 c0       	rjmp	.+16     	; 0x74c6 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    74b6:	60 e0       	ldi	r22, 0x00	; 0
    74b8:	81 2f       	mov	r24, r17
    74ba:	29 83       	std	Y+1, r18	; 0x01
    74bc:	0e 94 1a 3d 	call	0x7a34	; 0x7a34 <SetMixerWave>
			SetMixerNote(channel,note);
    74c0:	29 81       	ldd	r18, Y+1	; 0x01
    74c2:	62 2f       	mov	r22, r18
    74c4:	81 2f       	mov	r24, r17
    74c6:	0e 94 03 3d 	call	0x7a06	; 0x7a06 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    74ca:	86 e1       	ldi	r24, 0x16	; 22
    74cc:	8c 9d       	mul	r24, r12
    74ce:	f0 01       	movw	r30, r0
    74d0:	8d 9d       	mul	r24, r13
    74d2:	f0 0d       	add	r31, r0
    74d4:	11 24       	eor	r1, r1
    74d6:	e7 5c       	subi	r30, 0xC7	; 199
    74d8:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    74da:	ff 20       	and	r15, r15
    74dc:	11 f0       	breq	.+4      	; 0x74e2 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    74de:	07 87       	std	Z+15, r16	; 0x0f
    74e0:	01 c0       	rjmp	.+2      	; 0x74e4 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    74e2:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    74e4:	e0 91 a9 0b 	lds	r30, 0x0BA9
    74e8:	f0 91 aa 0b 	lds	r31, 0x0BAA
    74ec:	39 e0       	ldi	r19, 0x09	; 9
    74ee:	03 9f       	mul	r16, r19
    74f0:	e0 0d       	add	r30, r0
    74f2:	f1 1d       	adc	r31, r1
    74f4:	11 24       	eor	r1, r1
    74f6:	33 96       	adiw	r30, 0x03	; 3
    74f8:	85 91       	lpm	r24, Z+
    74fa:	94 91       	lpm	r25, Z
	if(pos==NULL){
    74fc:	00 97       	sbiw	r24, 0x00	; 0
    74fe:	59 f4       	brne	.+22     	; 0x7516 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    7500:	86 e1       	ldi	r24, 0x16	; 22
    7502:	8c 9d       	mul	r24, r12
    7504:	f0 01       	movw	r30, r0
    7506:	8d 9d       	mul	r24, r13
    7508:	f0 0d       	add	r31, r0
    750a:	11 24       	eor	r1, r1
    750c:	e7 5c       	subi	r30, 0xC7	; 199
    750e:	f4 4f       	sbci	r31, 0xF4	; 244
    7510:	15 8a       	std	Z+21, r1	; 0x15
    7512:	14 8a       	std	Z+20, r1	; 0x14
    7514:	0e c0       	rjmp	.+28     	; 0x7532 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7516:	fc 01       	movw	r30, r24
    7518:	24 91       	lpm	r18, Z
    751a:	36 e1       	ldi	r19, 0x16	; 22
    751c:	3c 9d       	mul	r19, r12
    751e:	f0 01       	movw	r30, r0
    7520:	3d 9d       	mul	r19, r13
    7522:	f0 0d       	add	r31, r0
    7524:	11 24       	eor	r1, r1
    7526:	e7 5c       	subi	r30, 0xC7	; 199
    7528:	f4 4f       	sbci	r31, 0xF4	; 244
    752a:	21 8b       	std	Z+17, r18	; 0x11
    752c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    752e:	95 8b       	std	Z+21, r25	; 0x15
    7530:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7532:	0f 90       	pop	r0
    7534:	df 91       	pop	r29
    7536:	cf 91       	pop	r28
    7538:	1f 91       	pop	r17
    753a:	0f 91       	pop	r16
    753c:	ff 90       	pop	r15
    753e:	df 90       	pop	r13
    7540:	cf 90       	pop	r12
    7542:	08 95       	ret

00007544 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7544:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7546:	a8 2f       	mov	r26, r24
    7548:	b0 e0       	ldi	r27, 0x00	; 0
    754a:	96 e1       	ldi	r25, 0x16	; 22
    754c:	89 9f       	mul	r24, r25
    754e:	f0 01       	movw	r30, r0
    7550:	11 24       	eor	r1, r1
    7552:	e7 5c       	subi	r30, 0xC7	; 199
    7554:	f4 4f       	sbci	r31, 0xF4	; 244
    7556:	90 81       	ld	r25, Z
    7558:	95 ff       	sbrs	r25, 5
    755a:	02 c0       	rjmp	.+4      	; 0x7560 <TriggerNote+0x1c>
    755c:	97 fd       	sbrc	r25, 7
    755e:	28 c0       	rjmp	.+80     	; 0x75b0 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    7560:	31 11       	cpse	r19, r1
    7562:	18 c0       	rjmp	.+48     	; 0x7594 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7564:	86 e1       	ldi	r24, 0x16	; 22
    7566:	8a 9f       	mul	r24, r26
    7568:	f0 01       	movw	r30, r0
    756a:	8b 9f       	mul	r24, r27
    756c:	f0 0d       	add	r31, r0
    756e:	11 24       	eor	r1, r1
    7570:	e7 5c       	subi	r30, 0xC7	; 199
    7572:	f4 4f       	sbci	r31, 0xF4	; 244
    7574:	85 85       	ldd	r24, Z+13	; 0x0d
    7576:	81 11       	cpse	r24, r1
    7578:	02 c0       	rjmp	.+4      	; 0x757e <TriggerNote+0x3a>
    757a:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    757c:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    757e:	86 e1       	ldi	r24, 0x16	; 22
    7580:	8a 9f       	mul	r24, r26
    7582:	f0 01       	movw	r30, r0
    7584:	8b 9f       	mul	r24, r27
    7586:	f0 0d       	add	r31, r0
    7588:	11 24       	eor	r1, r1
    758a:	e7 5c       	subi	r30, 0xC7	; 199
    758c:	f4 4f       	sbci	r31, 0xF4	; 244
    758e:	9f 7b       	andi	r25, 0xBF	; 191
    7590:	90 83       	st	Z, r25
    7592:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    7594:	26 e1       	ldi	r18, 0x16	; 22
    7596:	2a 9f       	mul	r18, r26
    7598:	f0 01       	movw	r30, r0
    759a:	2b 9f       	mul	r18, r27
    759c:	f0 0d       	add	r31, r0
    759e:	11 24       	eor	r1, r1
    75a0:	e7 5c       	subi	r30, 0xC7	; 199
    75a2:	f4 4f       	sbci	r31, 0xF4	; 244
    75a4:	9f 77       	andi	r25, 0x7F	; 127
    75a6:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    75a8:	24 2f       	mov	r18, r20
    75aa:	43 2f       	mov	r20, r19
    75ac:	0c 94 f5 39 	jmp	0x73ea	; 0x73ea <TriggerCommon>
    75b0:	08 95       	ret

000075b2 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    75b2:	5f 92       	push	r5
    75b4:	6f 92       	push	r6
    75b6:	7f 92       	push	r7
    75b8:	8f 92       	push	r8
    75ba:	9f 92       	push	r9
    75bc:	af 92       	push	r10
    75be:	bf 92       	push	r11
    75c0:	cf 92       	push	r12
    75c2:	df 92       	push	r13
    75c4:	ef 92       	push	r14
    75c6:	ff 92       	push	r15
    75c8:	0f 93       	push	r16
    75ca:	1f 93       	push	r17
    75cc:	cf 93       	push	r28
    75ce:	df 93       	push	r29
    75d0:	c9 e3       	ldi	r28, 0x39	; 57
    75d2:	db e0       	ldi	r29, 0x0B	; 11
    75d4:	82 e0       	ldi	r24, 0x02	; 2
    75d6:	e8 2e       	mov	r14, r24
    75d8:	8b e0       	ldi	r24, 0x0B	; 11
    75da:	f8 2e       	mov	r15, r24
    75dc:	d7 01       	movw	r26, r14
    75de:	9e 01       	movw	r18, r28
    75e0:	40 e0       	ldi	r20, 0x00	; 0
    75e2:	50 e0       	ldi	r21, 0x00	; 0
    75e4:	ca 01       	movw	r24, r20
    75e6:	87 5c       	subi	r24, 0xC7	; 199
    75e8:	94 4f       	sbci	r25, 0xF4	; 244
    75ea:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    75ec:	fc 01       	movw	r30, r24
    75ee:	85 85       	ldd	r24, Z+13	; 0x0d
    75f0:	88 23       	and	r24, r24
    75f2:	91 f0       	breq	.+36     	; 0x7618 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    75f4:	64 85       	ldd	r22, Z+12	; 0x0c
    75f6:	99 27       	eor	r25, r25
    75f8:	87 fd       	sbrc	r24, 7
    75fa:	90 95       	com	r25
    75fc:	86 0f       	add	r24, r22
    75fe:	91 1d       	adc	r25, r1
    7600:	8f 3f       	cpi	r24, 0xFF	; 255
    7602:	91 05       	cpc	r25, r1
    7604:	19 f0       	breq	.+6      	; 0x760c <ProcessMusic+0x5a>
    7606:	14 f0       	brlt	.+4      	; 0x760c <ProcessMusic+0x5a>
    7608:	8f ef       	ldi	r24, 0xFF	; 255
    760a:	90 e0       	ldi	r25, 0x00	; 0
    760c:	97 ff       	sbrs	r25, 7
    760e:	02 c0       	rjmp	.+4      	; 0x7614 <ProcessMusic+0x62>
    7610:	80 e0       	ldi	r24, 0x00	; 0
    7612:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7614:	f6 01       	movw	r30, r12
    7616:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7618:	f9 01       	movw	r30, r18
    761a:	10 81       	ld	r17, Z
    761c:	13 ff       	sbrs	r17, 3
    761e:	29 c0       	rjmp	.+82     	; 0x7672 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7620:	62 81       	ldd	r22, Z+2	; 0x02
    7622:	73 81       	ldd	r23, Z+3	; 0x03
    7624:	11 96       	adiw	r26, 0x01	; 1
    7626:	8d 91       	ld	r24, X+
    7628:	9c 91       	ld	r25, X
    762a:	12 97       	sbiw	r26, 0x02	; 2
    762c:	86 0f       	add	r24, r22
    762e:	97 1f       	adc	r25, r23
    7630:	12 96       	adiw	r26, 0x02	; 2
    7632:	9c 93       	st	X, r25
    7634:	8e 93       	st	-X, r24
    7636:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7638:	f6 01       	movw	r30, r12
    763a:	04 81       	ldd	r16, Z+4	; 0x04
    763c:	e0 2f       	mov	r30, r16
    763e:	f0 e0       	ldi	r31, 0x00	; 0
    7640:	ee 0f       	add	r30, r30
    7642:	ff 1f       	adc	r31, r31
    7644:	e8 5f       	subi	r30, 0xF8	; 248
    7646:	f4 48       	sbci	r31, 0x84	; 132
    7648:	c5 90       	lpm	r12, Z+
    764a:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    764c:	16 16       	cp	r1, r22
    764e:	17 06       	cpc	r1, r23
    7650:	24 f4       	brge	.+8      	; 0x765a <ProcessMusic+0xa8>
    7652:	8c 15       	cp	r24, r12
    7654:	9d 05       	cpc	r25, r13
    7656:	30 f4       	brcc	.+12     	; 0x7664 <ProcessMusic+0xb2>
    7658:	0c c0       	rjmp	.+24     	; 0x7672 <ProcessMusic+0xc0>
    765a:	67 2b       	or	r22, r23
    765c:	51 f0       	breq	.+20     	; 0x7672 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    765e:	c8 16       	cp	r12, r24
    7660:	d9 06       	cpc	r13, r25
    7662:	38 f0       	brcs	.+14     	; 0x7672 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7664:	12 96       	adiw	r26, 0x02	; 2
    7666:	dc 92       	st	X, r13
    7668:	ce 92       	st	-X, r12
    766a:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    766c:	17 7f       	andi	r17, 0xF7	; 247
    766e:	f9 01       	movw	r30, r18
    7670:	10 83       	st	Z, r17
    7672:	4a 5e       	subi	r20, 0xEA	; 234
    7674:	5f 4f       	sbci	r21, 0xFF	; 255
    7676:	2a 5e       	subi	r18, 0xEA	; 234
    7678:	3f 4f       	sbci	r19, 0xFF	; 255
    767a:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    767c:	4e 36       	cpi	r20, 0x6E	; 110
    767e:	51 05       	cpc	r21, r1
    7680:	09 f0       	breq	.+2      	; 0x7684 <ProcessMusic+0xd2>
    7682:	b0 cf       	rjmp	.-160    	; 0x75e4 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    7684:	80 91 00 0b 	lds	r24, 0x0B00
    7688:	88 23       	and	r24, r24
    768a:	09 f4       	brne	.+2      	; 0x768e <ProcessMusic+0xdc>
    768c:	cb c0       	rjmp	.+406    	; 0x7824 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    768e:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7690:	80 91 a7 0b 	lds	r24, 0x0BA7
    7694:	90 91 a8 0b 	lds	r25, 0x0BA8
    7698:	20 91 ad 0b 	lds	r18, 0x0BAD
    769c:	30 91 ae 0b 	lds	r19, 0x0BAE
    76a0:	82 17       	cp	r24, r18
    76a2:	93 07       	cpc	r25, r19
    76a4:	09 f0       	breq	.+2      	; 0x76a8 <ProcessMusic+0xf6>
    76a6:	b9 c0       	rjmp	.+370    	; 0x781a <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    76a8:	20 91 b0 0b 	lds	r18, 0x0BB0
    76ac:	30 91 b1 0b 	lds	r19, 0x0BB1
    76b0:	b9 01       	movw	r22, r18
    76b2:	6f 5f       	subi	r22, 0xFF	; 255
    76b4:	7f 4f       	sbci	r23, 0xFF	; 255
    76b6:	70 93 b1 0b 	sts	0x0BB1, r23
    76ba:	60 93 b0 0b 	sts	0x0BB0, r22
    76be:	f9 01       	movw	r30, r18
    76c0:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    76c2:	4f 3f       	cpi	r20, 0xFF	; 255
    76c4:	79 f5       	brne	.+94     	; 0x7724 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    76c6:	a9 01       	movw	r20, r18
    76c8:	4e 5f       	subi	r20, 0xFE	; 254
    76ca:	5f 4f       	sbci	r21, 0xFF	; 255
    76cc:	50 93 b1 0b 	sts	0x0BB1, r21
    76d0:	40 93 b0 0b 	sts	0x0BB0, r20
    76d4:	fb 01       	movw	r30, r22
    76d6:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    76d8:	6f 32       	cpi	r22, 0x2F	; 47
    76da:	19 f4       	brne	.+6      	; 0x76e2 <ProcessMusic+0x130>
						playSong=false;
    76dc:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    76e0:	9c c0       	rjmp	.+312    	; 0x781a <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    76e2:	66 30       	cpi	r22, 0x06	; 6
    76e4:	09 f0       	breq	.+2      	; 0x76e8 <ProcessMusic+0x136>
    76e6:	8c c0       	rjmp	.+280    	; 0x7800 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    76e8:	fa 01       	movw	r30, r20
    76ea:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    76ec:	c9 01       	movw	r24, r18
    76ee:	04 96       	adiw	r24, 0x04	; 4
    76f0:	90 93 b1 0b 	sts	0x0BB1, r25
    76f4:	80 93 b0 0b 	sts	0x0BB0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    76f8:	f9 01       	movw	r30, r18
    76fa:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    76fc:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    76fe:	e3 35       	cpi	r30, 0x53	; 83
    7700:	29 f4       	brne	.+10     	; 0x770c <ProcessMusic+0x15a>
							loopStart=songPos;
    7702:	90 93 b3 0b 	sts	0x0BB3, r25
    7706:	80 93 b2 0b 	sts	0x0BB2, r24
    770a:	7a c0       	rjmp	.+244    	; 0x7800 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    770c:	e5 34       	cpi	r30, 0x45	; 69
    770e:	09 f0       	breq	.+2      	; 0x7712 <ProcessMusic+0x160>
    7710:	77 c0       	rjmp	.+238    	; 0x7800 <ProcessMusic+0x24e>
							songPos=loopStart;
    7712:	80 91 b2 0b 	lds	r24, 0x0BB2
    7716:	90 91 b3 0b 	lds	r25, 0x0BB3
    771a:	90 93 b1 0b 	sts	0x0BB1, r25
    771e:	80 93 b0 0b 	sts	0x0BB0, r24
    7722:	6e c0       	rjmp	.+220    	; 0x7800 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7724:	47 fd       	sbrc	r20, 7
    7726:	40 93 ab 0b 	sts	0x0BAB, r20
					channel=lastStatus&0x0f;
    772a:	90 91 ab 0b 	lds	r25, 0x0BAB
    772e:	89 2f       	mov	r24, r25
    7730:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7732:	47 ff       	sbrs	r20, 7
    7734:	08 c0       	rjmp	.+16     	; 0x7746 <ProcessMusic+0x194>
    7736:	2e 5f       	subi	r18, 0xFE	; 254
    7738:	3f 4f       	sbci	r19, 0xFF	; 255
    773a:	30 93 b1 0b 	sts	0x0BB1, r19
    773e:	20 93 b0 0b 	sts	0x0BB0, r18
    7742:	fb 01       	movw	r30, r22
    7744:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7746:	90 7f       	andi	r25, 0xF0	; 240
    7748:	90 3b       	cpi	r25, 0xB0	; 176
    774a:	e1 f0       	breq	.+56     	; 0x7784 <ProcessMusic+0x1d2>
    774c:	90 3c       	cpi	r25, 0xC0	; 192
    774e:	09 f4       	brne	.+2      	; 0x7752 <ProcessMusic+0x1a0>
    7750:	51 c0       	rjmp	.+162    	; 0x77f4 <ProcessMusic+0x242>
    7752:	90 39       	cpi	r25, 0x90	; 144
    7754:	09 f0       	breq	.+2      	; 0x7758 <ProcessMusic+0x1a6>
    7756:	54 c0       	rjmp	.+168    	; 0x7800 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7758:	e0 91 b0 0b 	lds	r30, 0x0BB0
    775c:	f0 91 b1 0b 	lds	r31, 0x0BB1
    7760:	9f 01       	movw	r18, r30
    7762:	2f 5f       	subi	r18, 0xFF	; 255
    7764:	3f 4f       	sbci	r19, 0xFF	; 255
    7766:	30 93 b1 0b 	sts	0x0BB1, r19
    776a:	20 93 b0 0b 	sts	0x0BB0, r18
    776e:	24 91       	lpm	r18, Z
    7770:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7772:	18 9f       	mul	r17, r24
    7774:	f0 01       	movw	r30, r0
    7776:	11 24       	eor	r1, r1
    7778:	e7 5c       	subi	r30, 0xC7	; 199
    777a:	f4 4f       	sbci	r31, 0xF4	; 244
    777c:	66 85       	ldd	r22, Z+14	; 0x0e
    777e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
    7782:	3e c0       	rjmp	.+124    	; 0x7800 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7784:	e0 91 b0 0b 	lds	r30, 0x0BB0
    7788:	f0 91 b1 0b 	lds	r31, 0x0BB1
    778c:	9f 01       	movw	r18, r30
    778e:	2f 5f       	subi	r18, 0xFF	; 255
    7790:	3f 4f       	sbci	r19, 0xFF	; 255
    7792:	30 93 b1 0b 	sts	0x0BB1, r19
    7796:	20 93 b0 0b 	sts	0x0BB0, r18
    779a:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    779c:	47 30       	cpi	r20, 0x07	; 7
    779e:	49 f4       	brne	.+18     	; 0x77b2 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    77a0:	18 9f       	mul	r17, r24
    77a2:	d0 01       	movw	r26, r0
    77a4:	11 24       	eor	r1, r1
    77a6:	a7 5c       	subi	r26, 0xC7	; 199
    77a8:	b4 4f       	sbci	r27, 0xF4	; 244
    77aa:	ee 0f       	add	r30, r30
    77ac:	1a 96       	adiw	r26, 0x0a	; 10
    77ae:	ec 93       	st	X, r30
    77b0:	27 c0       	rjmp	.+78     	; 0x7800 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    77b2:	4b 30       	cpi	r20, 0x0B	; 11
    77b4:	49 f4       	brne	.+18     	; 0x77c8 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    77b6:	18 9f       	mul	r17, r24
    77b8:	d0 01       	movw	r26, r0
    77ba:	11 24       	eor	r1, r1
    77bc:	a7 5c       	subi	r26, 0xC7	; 199
    77be:	b4 4f       	sbci	r27, 0xF4	; 244
    77c0:	ee 0f       	add	r30, r30
    77c2:	19 96       	adiw	r26, 0x09	; 9
    77c4:	ec 93       	st	X, r30
    77c6:	1c c0       	rjmp	.+56     	; 0x7800 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    77c8:	4c 35       	cpi	r20, 0x5C	; 92
    77ca:	49 f4       	brne	.+18     	; 0x77de <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    77cc:	18 9f       	mul	r17, r24
    77ce:	d0 01       	movw	r26, r0
    77d0:	11 24       	eor	r1, r1
    77d2:	a7 5c       	subi	r26, 0xC7	; 199
    77d4:	b4 4f       	sbci	r27, 0xF4	; 244
    77d6:	ee 0f       	add	r30, r30
    77d8:	17 96       	adiw	r26, 0x07	; 7
    77da:	ec 93       	st	X, r30
    77dc:	11 c0       	rjmp	.+34     	; 0x7800 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    77de:	44 36       	cpi	r20, 0x64	; 100
    77e0:	79 f4       	brne	.+30     	; 0x7800 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    77e2:	18 9f       	mul	r17, r24
    77e4:	d0 01       	movw	r26, r0
    77e6:	11 24       	eor	r1, r1
    77e8:	a7 5c       	subi	r26, 0xC7	; 199
    77ea:	b4 4f       	sbci	r27, 0xF4	; 244
    77ec:	ee 0f       	add	r30, r30
    77ee:	18 96       	adiw	r26, 0x08	; 8
    77f0:	ec 93       	st	X, r30
    77f2:	06 c0       	rjmp	.+12     	; 0x7800 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    77f4:	18 9f       	mul	r17, r24
    77f6:	f0 01       	movw	r30, r0
    77f8:	11 24       	eor	r1, r1
    77fa:	e7 5c       	subi	r30, 0xC7	; 199
    77fc:	f4 4f       	sbci	r31, 0xF4	; 244
    77fe:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7800:	80 eb       	ldi	r24, 0xB0	; 176
    7802:	9b e0       	ldi	r25, 0x0B	; 11
    7804:	0e 94 cf 39 	call	0x739e	; 0x739e <ReadVarLen>
    7808:	90 93 ae 0b 	sts	0x0BAE, r25
    780c:	80 93 ad 0b 	sts	0x0BAD, r24
				currDeltaTime=0;
    7810:	10 92 a8 0b 	sts	0x0BA8, r1
    7814:	10 92 a7 0b 	sts	0x0BA7, r1
    7818:	3b cf       	rjmp	.-394    	; 0x7690 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    781a:	01 96       	adiw	r24, 0x01	; 1
    781c:	90 93 a8 0b 	sts	0x0BA8, r25
    7820:	80 93 a7 0b 	sts	0x0BA7, r24
    7824:	9f e3       	ldi	r25, 0x3F	; 63
    7826:	a9 2e       	mov	r10, r25
    7828:	9b e0       	ldi	r25, 0x0B	; 11
    782a:	b9 2e       	mov	r11, r25
    782c:	0b e4       	ldi	r16, 0x4B	; 75
    782e:	1b e0       	ldi	r17, 0x0B	; 11
    7830:	2a e4       	ldi	r18, 0x4A	; 74
    7832:	c2 2e       	mov	r12, r18
    7834:	2b e0       	ldi	r18, 0x0B	; 11
    7836:	d2 2e       	mov	r13, r18
    7838:	3c e4       	ldi	r19, 0x4C	; 76
    783a:	83 2e       	mov	r8, r19
    783c:	3b e0       	ldi	r19, 0x0B	; 11
    783e:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7840:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7842:	66 24       	eor	r6, r6
    7844:	6a 94       	dec	r6
    7846:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7848:	88 81       	ld	r24, Y
    784a:	86 fd       	sbrc	r24, 6
    784c:	43 c0       	rjmp	.+134    	; 0x78d4 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    784e:	8c 89       	ldd	r24, Y+20	; 0x14
    7850:	9d 89       	ldd	r25, Y+21	; 0x15
    7852:	89 2b       	or	r24, r25
    7854:	09 f4       	brne	.+2      	; 0x7858 <ProcessMusic+0x2a6>
    7856:	3a c0       	rjmp	.+116    	; 0x78cc <ProcessMusic+0x31a>
    7858:	d8 01       	movw	r26, r16
    785a:	9c 91       	ld	r25, X
    785c:	f6 01       	movw	r30, r12
    785e:	80 81       	ld	r24, Z
    7860:	98 17       	cp	r25, r24
    7862:	08 f4       	brcc	.+2      	; 0x7866 <ProcessMusic+0x2b4>
    7864:	33 c0       	rjmp	.+102    	; 0x78cc <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7866:	d8 01       	movw	r26, r16
    7868:	9c 91       	ld	r25, X
    786a:	f6 01       	movw	r30, r12
    786c:	80 81       	ld	r24, Z
    786e:	98 13       	cpse	r25, r24
    7870:	2d c0       	rjmp	.+90     	; 0x78cc <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7872:	ec 89       	ldd	r30, Y+20	; 0x14
    7874:	fd 89       	ldd	r31, Y+21	; 0x15
    7876:	af 01       	movw	r20, r30
    7878:	4f 5f       	subi	r20, 0xFF	; 255
    787a:	5f 4f       	sbci	r21, 0xFF	; 255
    787c:	5d 8b       	std	Y+21, r21	; 0x15
    787e:	4c 8b       	std	Y+20, r20	; 0x14
    7880:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    7882:	8f 3f       	cpi	r24, 0xFF	; 255
    7884:	31 f4       	brne	.+12     	; 0x7892 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7886:	88 81       	ld	r24, Y
    7888:	8f 77       	andi	r24, 0x7F	; 127
    788a:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    788c:	1d 8a       	std	Y+21, r1	; 0x15
    788e:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    7890:	1d c0       	rjmp	.+58     	; 0x78cc <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    7892:	32 96       	adiw	r30, 0x02	; 2
    7894:	fd 8b       	std	Y+21, r31	; 0x15
    7896:	ec 8b       	std	Y+20, r30	; 0x14
    7898:	fa 01       	movw	r30, r20
    789a:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    789c:	e8 2f       	mov	r30, r24
    789e:	f0 e0       	ldi	r31, 0x00	; 0
    78a0:	ee 0f       	add	r30, r30
    78a2:	ff 1f       	adc	r31, r31
    78a4:	e0 53       	subi	r30, 0x30	; 48
    78a6:	ff 4f       	sbci	r31, 0xFF	; 255
    78a8:	25 91       	lpm	r18, Z+
    78aa:	34 91       	lpm	r19, Z
    78ac:	65 2d       	mov	r22, r5
    78ae:	ce 01       	movw	r24, r28
    78b0:	f9 01       	movw	r30, r18
    78b2:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    78b4:	ec 89       	ldd	r30, Y+20	; 0x14
    78b6:	fd 89       	ldd	r31, Y+21	; 0x15
    78b8:	cf 01       	movw	r24, r30
    78ba:	01 96       	adiw	r24, 0x01	; 1
    78bc:	9d 8b       	std	Y+21, r25	; 0x15
    78be:	8c 8b       	std	Y+20, r24	; 0x14
    78c0:	e4 91       	lpm	r30, Z
    78c2:	d6 01       	movw	r26, r12
    78c4:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    78c6:	f8 01       	movw	r30, r16
    78c8:	10 82       	st	Z, r1
    78ca:	cd cf       	rjmp	.-102    	; 0x7866 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    78cc:	d8 01       	movw	r26, r16
    78ce:	8c 91       	ld	r24, X
    78d0:	8f 5f       	subi	r24, 0xFF	; 255
    78d2:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    78d4:	98 81       	ld	r25, Y
    78d6:	95 ff       	sbrs	r25, 5
    78d8:	6c c0       	rjmp	.+216    	; 0x79b2 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    78da:	f4 01       	movw	r30, r8
    78dc:	80 81       	ld	r24, Z
    78de:	8f 3f       	cpi	r24, 0xFF	; 255
    78e0:	11 f0       	breq	.+4      	; 0x78e6 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    78e2:	8f 5f       	subi	r24, 0xFF	; 255
    78e4:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    78e6:	97 fd       	sbrc	r25, 7
    78e8:	04 c0       	rjmp	.+8      	; 0x78f2 <ProcessMusic+0x340>
    78ea:	f8 01       	movw	r30, r16
    78ec:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    78ee:	90 81       	ld	r25, Z
    78f0:	01 c0       	rjmp	.+2      	; 0x78f4 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    78f2:	9f ef       	ldi	r25, 0xFF	; 255
    78f4:	f8 01       	movw	r30, r16
    78f6:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    78f8:	80 81       	ld	r24, Z
    78fa:	88 23       	and	r24, r24
    78fc:	09 f4       	brne	.+2      	; 0x7900 <ProcessMusic+0x34e>
    78fe:	4e c0       	rjmp	.+156    	; 0x799c <ProcessMusic+0x3ea>
    7900:	31 96       	adiw	r30, 0x01	; 1
    7902:	50 81       	ld	r21, Z
    7904:	55 23       	and	r21, r21
    7906:	09 f4       	brne	.+2      	; 0x790a <ProcessMusic+0x358>
    7908:	49 c0       	rjmp	.+146    	; 0x799c <ProcessMusic+0x3ea>
    790a:	99 23       	and	r25, r25
    790c:	09 f4       	brne	.+2      	; 0x7910 <ProcessMusic+0x35e>
    790e:	46 c0       	rjmp	.+140    	; 0x799c <ProcessMusic+0x3ea>
    7910:	40 91 ac 0b 	lds	r20, 0x0BAC
    7914:	44 23       	and	r20, r20
    7916:	09 f4       	brne	.+2      	; 0x791a <ProcessMusic+0x368>
    7918:	41 c0       	rjmp	.+130    	; 0x799c <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    791a:	89 9f       	mul	r24, r25
    791c:	c0 01       	movw	r24, r0
    791e:	11 24       	eor	r1, r1
    7920:	93 95       	inc	r25
				uVol>>=8;
    7922:	89 2f       	mov	r24, r25
    7924:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7926:	58 9f       	mul	r21, r24
    7928:	90 01       	movw	r18, r0
    792a:	59 9f       	mul	r21, r25
    792c:	30 0d       	add	r19, r0
    792e:	11 24       	eor	r1, r1
    7930:	c9 01       	movw	r24, r18
    7932:	93 95       	inc	r25
				uVol>>=8;
    7934:	89 2f       	mov	r24, r25
    7936:	99 27       	eor	r25, r25
    7938:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    793a:	50 81       	ld	r21, Z
    793c:	58 9f       	mul	r21, r24
    793e:	90 01       	movw	r18, r0
    7940:	59 9f       	mul	r21, r25
    7942:	30 0d       	add	r19, r0
    7944:	11 24       	eor	r1, r1
    7946:	33 95       	inc	r19
				uVol>>=8;
    7948:	23 2f       	mov	r18, r19
    794a:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    794c:	42 9f       	mul	r20, r18
    794e:	c0 01       	movw	r24, r0
    7950:	43 9f       	mul	r20, r19
    7952:	90 0d       	add	r25, r0
    7954:	11 24       	eor	r1, r1
    7956:	93 95       	inc	r25
				uVol>>=8;
    7958:	89 2f       	mov	r24, r25
    795a:	99 27       	eor	r25, r25
    795c:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    795e:	20 81       	ld	r18, Z
    7960:	22 23       	and	r18, r18
    7962:	f1 f0       	breq	.+60     	; 0x79a0 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7964:	d5 01       	movw	r26, r10
    7966:	ec 91       	ld	r30, X
    7968:	f0 e0       	ldi	r31, 0x00	; 0
    796a:	e0 50       	subi	r30, 0x00	; 0
    796c:	f3 48       	sbci	r31, 0x83	; 131
    796e:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7970:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7972:	2e 9f       	mul	r18, r30
    7974:	f0 01       	movw	r30, r0
    7976:	11 24       	eor	r1, r1
    7978:	f3 95       	inc	r31
					tVol>>=8;
    797a:	ef 2f       	mov	r30, r31
    797c:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    797e:	a3 01       	movw	r20, r6
    7980:	4e 1b       	sub	r20, r30
    7982:	5f 0b       	sbc	r21, r31
    7984:	48 9f       	mul	r20, r24
    7986:	90 01       	movw	r18, r0
    7988:	49 9f       	mul	r20, r25
    798a:	30 0d       	add	r19, r0
    798c:	58 9f       	mul	r21, r24
    798e:	30 0d       	add	r19, r0
    7990:	11 24       	eor	r1, r1
    7992:	c9 01       	movw	r24, r18
    7994:	93 95       	inc	r25
					uVol>>=8;
    7996:	89 2f       	mov	r24, r25
    7998:	99 27       	eor	r25, r25
    799a:	02 c0       	rjmp	.+4      	; 0x79a0 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    799c:	80 e0       	ldi	r24, 0x00	; 0
    799e:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    79a0:	f5 01       	movw	r30, r10
    79a2:	30 81       	ld	r19, Z
    79a4:	f8 01       	movw	r30, r16
    79a6:	3a 97       	sbiw	r30, 0x0a	; 10
    79a8:	20 81       	ld	r18, Z
    79aa:	23 0f       	add	r18, r19
    79ac:	d5 01       	movw	r26, r10
    79ae:	2c 93       	st	X, r18
    79b0:	02 c0       	rjmp	.+4      	; 0x79b6 <ProcessMusic+0x404>

		}else{
			uVol=0;
    79b2:	80 e0       	ldi	r24, 0x00	; 0
    79b4:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    79b6:	f7 01       	movw	r30, r14
    79b8:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    79ba:	53 94       	inc	r5
    79bc:	66 96       	adiw	r28, 0x16	; 22
    79be:	f6 e0       	ldi	r31, 0x06	; 6
    79c0:	ef 0e       	add	r14, r31
    79c2:	f1 1c       	adc	r15, r1
    79c4:	86 e1       	ldi	r24, 0x16	; 22
    79c6:	a8 0e       	add	r10, r24
    79c8:	b1 1c       	adc	r11, r1
    79ca:	0a 5e       	subi	r16, 0xEA	; 234
    79cc:	1f 4f       	sbci	r17, 0xFF	; 255
    79ce:	96 e1       	ldi	r25, 0x16	; 22
    79d0:	c9 0e       	add	r12, r25
    79d2:	d1 1c       	adc	r13, r1
    79d4:	a6 e1       	ldi	r26, 0x16	; 22
    79d6:	8a 0e       	add	r8, r26
    79d8:	91 1c       	adc	r9, r1
    79da:	b5 e0       	ldi	r27, 0x05	; 5
    79dc:	5b 12       	cpse	r5, r27
    79de:	34 cf       	rjmp	.-408    	; 0x7848 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    79e0:	df 91       	pop	r29
    79e2:	cf 91       	pop	r28
    79e4:	1f 91       	pop	r17
    79e6:	0f 91       	pop	r16
    79e8:	ff 90       	pop	r15
    79ea:	ef 90       	pop	r14
    79ec:	df 90       	pop	r13
    79ee:	cf 90       	pop	r12
    79f0:	bf 90       	pop	r11
    79f2:	af 90       	pop	r10
    79f4:	9f 90       	pop	r9
    79f6:	8f 90       	pop	r8
    79f8:	7f 90       	pop	r7
    79fa:	6f 90       	pop	r6
    79fc:	5f 90       	pop	r5
    79fe:	08 95       	ret

00007a00 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7a00:	80 93 ac 0b 	sts	0x0BAC, r24
    7a04:	08 95       	ret

00007a06 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7a06:	99 27       	eor	r25, r25
	clr r23
    7a08:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7a0a:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7a0c:	09 f4       	brne	.+2      	; 0x7a10 <set_note_waves>
		ret
    7a0e:	08 95       	ret

00007a10 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7a10:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7a12:	fb e7       	ldi	r31, 0x7B	; 123
	lsl r22
    7a14:	66 0f       	add	r22, r22
	rol r23
    7a16:	77 1f       	adc	r23, r23
	add ZL,r22
    7a18:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7a1a:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7a1c:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7a1e:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7a20:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a22:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a24:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7a26:	28 9f       	mul	r18, r24
	add ZL,r0
    7a28:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a2a:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7a2c:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7a2e:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7a30:	11 24       	eor	r1, r1
	

	ret
    7a32:	08 95       	ret

00007a34 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7a34:	99 27       	eor	r25, r25
	clr r23
    7a36:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7a38:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7a3a:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7a3c:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7a3e:	28 9f       	mul	r18, r24
	add ZL,r0
    7a40:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a42:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7a44:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7a46:	31 f4       	brne	.+12     	; 0x7a54 <smw1>
	lds r22,tr4_params
    7a48:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7a4c:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7a4e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7a52:	0b c0       	rjmp	.+22     	; 0x7a6a <esmw>

00007a54 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7a54:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7a56:	31 f4       	brne	.+12     	; 0x7a64 <smw2>
	lds r22,tr4_params
    7a58:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7a5c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7a5e:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7a62:	03 c0       	rjmp	.+6      	; 0x7a6a <esmw>

00007a64 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7a64:	7d e7       	ldi	r23, 0x7D	; 125
	add r23,r22
    7a66:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7a68:	75 83       	std	Z+5, r23	; 0x05

00007a6a <esmw>:

esmw:
	clr r1	
    7a6a:	11 24       	eor	r1, r1
	ret
    7a6c:	08 95       	ret
	...

00007b00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7b00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7b02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    7b06:	08 95       	ret

00007b08 <steptable>:
    7b08:	22 00       	.word	0x0022	; ????
    7b0a:	24 00       	.word	0x0024	; ????
    7b0c:	26 00       	.word	0x0026	; ????
    7b0e:	28 00       	.word	0x0028	; ????
    7b10:	2b 00       	.word	0x002b	; ????
    7b12:	2d 00       	.word	0x002d	; ????
    7b14:	30 00       	.word	0x0030	; ????
    7b16:	33 00       	.word	0x0033	; ????
    7b18:	36 00       	.word	0x0036	; ????
    7b1a:	39 00       	.word	0x0039	; ????
    7b1c:	3d 00       	.word	0x003d	; ????
    7b1e:	40 00       	.word	0x0040	; ????
    7b20:	44 00       	.word	0x0044	; ????
    7b22:	48 00       	.word	0x0048	; ????
    7b24:	4c 00       	.word	0x004c	; ????
    7b26:	51 00       	.word	0x0051	; ????
    7b28:	56 00       	.word	0x0056	; ????
    7b2a:	5b 00       	.word	0x005b	; ????
    7b2c:	60 00       	.word	0x0060	; ????
    7b2e:	66 00       	.word	0x0066	; ????
    7b30:	6c 00       	.word	0x006c	; ????
    7b32:	73 00       	.word	0x0073	; ????
    7b34:	79 00       	.word	0x0079	; ????
    7b36:	81 00       	.word	0x0081	; ????
    7b38:	88 00       	.word	0x0088	; ????
    7b3a:	90 00       	.word	0x0090	; ????
    7b3c:	99 00       	.word	0x0099	; ????
    7b3e:	a2 00       	.word	0x00a2	; ????
    7b40:	ac 00       	.word	0x00ac	; ????
    7b42:	b6 00       	.word	0x00b6	; ????
    7b44:	c1 00       	.word	0x00c1	; ????
    7b46:	cc 00       	.word	0x00cc	; ????
    7b48:	d8 00       	.word	0x00d8	; ????
    7b4a:	e5 00       	.word	0x00e5	; ????
    7b4c:	f3 00       	.word	0x00f3	; ????
    7b4e:	01 01       	movw	r0, r2
    7b50:	10 01       	movw	r2, r0
    7b52:	21 01       	movw	r4, r2
    7b54:	32 01       	movw	r6, r4
    7b56:	44 01       	movw	r8, r8
    7b58:	57 01       	movw	r10, r14
    7b5a:	6c 01       	movw	r12, r24
    7b5c:	81 01       	movw	r16, r2
    7b5e:	98 01       	movw	r18, r16
    7b60:	b0 01       	movw	r22, r0
    7b62:	ca 01       	movw	r24, r20
    7b64:	e5 01       	movw	r28, r10
    7b66:	02 02       	muls	r16, r18
    7b68:	21 02       	muls	r18, r17
    7b6a:	41 02       	muls	r20, r17
    7b6c:	64 02       	muls	r22, r20
    7b6e:	88 02       	muls	r24, r24
    7b70:	ae 02       	muls	r26, r30
    7b72:	d7 02       	muls	r29, r23
    7b74:	03 03       	mulsu	r16, r19
    7b76:	30 03       	mulsu	r19, r16
    7b78:	61 03       	mulsu	r22, r17
    7b7a:	94 03       	fmuls	r17, r20
    7b7c:	cb 03       	fmulsu	r20, r19
    7b7e:	05 04       	cpc	r0, r5
    7b80:	42 04       	cpc	r4, r2
    7b82:	83 04       	cpc	r8, r3
    7b84:	c7 04       	cpc	r12, r7
    7b86:	10 05       	cpc	r17, r0
    7b88:	5d 05       	cpc	r21, r13
    7b8a:	af 05       	cpc	r26, r15
    7b8c:	05 06       	cpc	r0, r21
    7b8e:	61 06       	cpc	r6, r17
    7b90:	c2 06       	cpc	r12, r18
    7b92:	29 07       	cpc	r18, r25
    7b94:	96 07       	cpc	r25, r22
    7b96:	09 08       	sbc	r0, r9
    7b98:	83 08       	sbc	r8, r3
    7b9a:	05 09       	sbc	r16, r5
    7b9c:	8e 09       	sbc	r24, r14
    7b9e:	20 0a       	sbc	r2, r16
    7ba0:	ba 0a       	sbc	r11, r26
    7ba2:	5d 0b       	sbc	r21, r29
    7ba4:	0a 0c       	add	r0, r10
    7ba6:	c1 0c       	add	r12, r1
    7ba8:	84 0d       	add	r24, r4
    7baa:	51 0e       	add	r5, r17
    7bac:	2b 0f       	add	r18, r27
    7bae:	12 10       	cpse	r1, r2
    7bb0:	07 11       	cpse	r16, r7
    7bb2:	0a 12       	cpse	r0, r26
    7bb4:	1d 13       	cpse	r17, r29
    7bb6:	40 14       	cp	r4, r0
    7bb8:	74 15       	cp	r23, r4
    7bba:	ba 16       	cp	r11, r26
    7bbc:	14 18       	sub	r1, r4
    7bbe:	83 19       	sub	r24, r3
    7bc0:	07 1b       	sub	r16, r23
    7bc2:	a3 1c       	adc	r10, r3
    7bc4:	57 1e       	adc	r5, r23
    7bc6:	24 20       	and	r2, r4
    7bc8:	0e 22       	and	r0, r30
    7bca:	14 24       	eor	r1, r4
    7bcc:	39 26       	eor	r3, r25
    7bce:	7f 28       	or	r7, r15
    7bd0:	e8 2a       	or	r14, r24
    7bd2:	75 2d       	mov	r23, r5
    7bd4:	29 30       	cpi	r18, 0x09	; 9
    7bd6:	06 33       	cpi	r16, 0x36	; 54
    7bd8:	0f 36       	cpi	r16, 0x6F	; 111
    7bda:	45 39       	cpi	r20, 0x95	; 149
    7bdc:	ad 3c       	cpi	r26, 0xCD	; 205
    7bde:	49 40       	sbci	r20, 0x09	; 9
    7be0:	1b 44       	sbci	r17, 0x4B	; 75
    7be2:	28 48       	sbci	r18, 0x88	; 136
    7be4:	73 4c       	sbci	r23, 0xC3	; 195
    7be6:	fe 50       	subi	r31, 0x0E	; 14
    7be8:	cf 55       	subi	r28, 0x5F	; 95
    7bea:	ea 5a       	subi	r30, 0xAA	; 170
    7bec:	51 60       	ori	r21, 0x01	; 1
    7bee:	0c 66       	ori	r16, 0x6C	; 108
    7bf0:	1d 6c       	ori	r17, 0xCD	; 205
    7bf2:	8b 72       	andi	r24, 0x2B	; 43
    7bf4:	5a 79       	andi	r21, 0x9A	; 154
    7bf6:	92 80       	ldd	r9, Z+2	; 0x02
    7bf8:	37 88       	ldd	r3, Z+23	; 0x17
    7bfa:	50 90 e5 98 	lds	r5, 0x98E5
    7bfe:	fd a1       	ldd	r31, Y+37	; 0x25
    7c00:	9f ab       	std	Y+55, r25	; 0x37
    7c02:	d3 b5       	in	r29, 0x23	; 35
    7c04:	a3 c0       	rjmp	.+326    	; 0x7d4c <waves+0x4c>
	...

00007d00 <waves>:
    7d00:	00 03       	mulsu	r16, r16
    7d02:	06 09       	sbc	r16, r6
    7d04:	0c 10       	cpse	r0, r12
    7d06:	13 16       	cp	r1, r19
    7d08:	19 1c       	adc	r1, r9
    7d0a:	1f 22       	and	r1, r31
    7d0c:	25 28       	or	r2, r5
    7d0e:	2b 2e       	mov	r2, r27
    7d10:	31 33       	cpi	r19, 0x31	; 49
    7d12:	36 39       	cpi	r19, 0x96	; 150
    7d14:	3c 3f       	cpi	r19, 0xFC	; 252
    7d16:	41 44       	sbci	r20, 0x41	; 65
    7d18:	47 49       	sbci	r20, 0x97	; 151
    7d1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7d1c:	51 53       	subi	r21, 0x31	; 49
    7d1e:	55 58       	subi	r21, 0x85	; 133
    7d20:	5a 5c       	subi	r21, 0xCA	; 202
    7d22:	5e 60       	ori	r21, 0x0E	; 14
    7d24:	62 64       	ori	r22, 0x42	; 66
    7d26:	66 68       	ori	r22, 0x86	; 134
    7d28:	6a 6b       	ori	r22, 0xBA	; 186
    7d2a:	6d 6f       	ori	r22, 0xFD	; 253
    7d2c:	70 71       	andi	r23, 0x10	; 16
    7d2e:	73 74       	andi	r23, 0x43	; 67
    7d30:	75 76       	andi	r23, 0x65	; 101
    7d32:	78 79       	andi	r23, 0x98	; 152
    7d34:	7a 7a       	andi	r23, 0xAA	; 170
    7d36:	7b 7c       	andi	r23, 0xCB	; 203
    7d38:	7d 7d       	andi	r23, 0xDD	; 221
    7d3a:	7e 7e       	andi	r23, 0xEE	; 238
    7d3c:	7e 7f       	andi	r23, 0xFE	; 254
    7d3e:	7f 7f       	andi	r23, 0xFF	; 255
    7d40:	7f 7f       	andi	r23, 0xFF	; 255
    7d42:	7f 7f       	andi	r23, 0xFF	; 255
    7d44:	7e 7e       	andi	r23, 0xEE	; 238
    7d46:	7e 7d       	andi	r23, 0xDE	; 222
    7d48:	7d 7c       	andi	r23, 0xCD	; 205
    7d4a:	7b 7a       	andi	r23, 0xAB	; 171
    7d4c:	7a 79       	andi	r23, 0x9A	; 154
    7d4e:	78 76       	andi	r23, 0x68	; 104
    7d50:	75 74       	andi	r23, 0x45	; 69
    7d52:	73 71       	andi	r23, 0x13	; 19
    7d54:	70 6f       	ori	r23, 0xF0	; 240
    7d56:	6d 6b       	ori	r22, 0xBD	; 189
    7d58:	6a 68       	ori	r22, 0x8A	; 138
    7d5a:	66 64       	ori	r22, 0x46	; 70
    7d5c:	62 60       	ori	r22, 0x02	; 2
    7d5e:	5e 5c       	subi	r21, 0xCE	; 206
    7d60:	5a 58       	subi	r21, 0x8A	; 138
    7d62:	55 53       	subi	r21, 0x35	; 53
    7d64:	51 4e       	sbci	r21, 0xE1	; 225
    7d66:	4c 49       	sbci	r20, 0x9C	; 156
    7d68:	47 44       	sbci	r20, 0x47	; 71
    7d6a:	41 3f       	cpi	r20, 0xF1	; 241
    7d6c:	3c 39       	cpi	r19, 0x9C	; 156
    7d6e:	36 33       	cpi	r19, 0x36	; 54
    7d70:	31 2e       	mov	r3, r17
    7d72:	2b 28       	or	r2, r11
    7d74:	25 22       	and	r2, r21
    7d76:	1f 1c       	adc	r1, r15
    7d78:	19 16       	cp	r1, r25
    7d7a:	13 10       	cpse	r1, r3
    7d7c:	0c 09       	sbc	r16, r12
    7d7e:	06 03       	mulsu	r16, r22
    7d80:	00 fd       	sbrc	r16, 0
    7d82:	fa f7       	brpl	.-2      	; 0x7d82 <waves+0x82>
    7d84:	f4 f0       	brlt	.+60     	; 0x7dc2 <waves+0xc2>
    7d86:	ed ea       	ldi	r30, 0xAD	; 173
    7d88:	e7 e4       	ldi	r30, 0x47	; 71
    7d8a:	e1 de       	rcall	.-574    	; 0x7b4e <steptable+0x46>
    7d8c:	db d8       	rcall	.-3658   	; 0x6f44 <SetTile+0xc>
    7d8e:	d5 d2       	rcall	.+1450   	; 0x833a <waves+0x63a>
    7d90:	cf cd       	rjmp	.-1122   	; 0x7930 <ProcessMusic+0x37e>
    7d92:	ca c7       	rjmp	.+3988   	; 0x8d28 <LBCollides+0x8>
    7d94:	c4 c1       	rjmp	.+904    	; 0x811e <waves+0x41e>
    7d96:	bf bc       	out	0x2f, r11	; 47
    7d98:	b9 b7       	in	r27, 0x39	; 57
    7d9a:	b4 b2       	in	r11, 0x14	; 20
    7d9c:	af ad       	ldd	r26, Y+63	; 0x3f
    7d9e:	ab a8       	ldd	r10, Y+51	; 0x33
    7da0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    7da2:	a2 a0       	ldd	r10, Z+34	; 0x22
    7da4:	9e 9c       	mul	r9, r14
    7da6:	9a 98       	cbi	0x13, 2	; 19
    7da8:	96 95       	lsr	r25
    7daa:	93 91       	.word	0x9193	; ????
    7dac:	90 8f       	std	Z+24, r25	; 0x18
    7dae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7db0:	8b 8a       	std	Y+19, r8	; 0x13
    7db2:	88 87       	std	Y+8, r24	; 0x08
    7db4:	86 86       	std	Z+14, r8	; 0x0e
    7db6:	85 84       	ldd	r8, Z+13	; 0x0d
    7db8:	83 83       	std	Z+3, r24	; 0x03
    7dba:	82 82       	std	Z+2, r8	; 0x02
    7dbc:	82 81       	ldd	r24, Z+2	; 0x02
    7dbe:	81 81       	ldd	r24, Z+1	; 0x01
    7dc0:	81 81       	ldd	r24, Z+1	; 0x01
    7dc2:	81 81       	ldd	r24, Z+1	; 0x01
    7dc4:	82 82       	std	Z+2, r8	; 0x02
    7dc6:	82 83       	std	Z+2, r24	; 0x02
    7dc8:	83 84       	ldd	r8, Z+11	; 0x0b
    7dca:	85 86       	std	Z+13, r8	; 0x0d
    7dcc:	86 87       	std	Z+14, r24	; 0x0e
    7dce:	88 8a       	std	Y+16, r8	; 0x10
    7dd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7dd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7dd4:	90 91 93 95 	lds	r25, 0x9593
    7dd8:	96 98       	cbi	0x12, 6	; 18
    7dda:	9a 9c       	mul	r9, r10
    7ddc:	9e a0       	ldd	r9, Y+38	; 0x26
    7dde:	a2 a4       	ldd	r10, Z+42	; 0x2a
    7de0:	a6 a8       	ldd	r10, Z+54	; 0x36
    7de2:	ab ad       	ldd	r26, Y+59	; 0x3b
    7de4:	af b2       	in	r10, 0x1f	; 31
    7de6:	b4 b7       	in	r27, 0x34	; 52
    7de8:	b9 bc       	out	0x29, r11	; 41
    7dea:	bf c1       	rjmp	.+894    	; 0x816a <waves+0x46a>
    7dec:	c4 c7       	rjmp	.+3976   	; 0x8d76 <LBLineIntersect+0x2>
    7dee:	ca cd       	rjmp	.-1132   	; 0x7984 <ProcessMusic+0x3d2>
    7df0:	cf d2       	rcall	.+1438   	; 0x8390 <waves+0x690>
    7df2:	d5 d8       	rcall	.-3670   	; 0x6f9e <WriteEeprom>
    7df4:	db de       	rcall	.-586    	; 0x7bac <steptable+0xa4>
    7df6:	e1 e4       	ldi	r30, 0x41	; 65
    7df8:	e7 ea       	ldi	r30, 0xA7	; 167
    7dfa:	ed f0       	brhs	.+58     	; 0x7e36 <waves+0x136>
    7dfc:	f4 f7       	brge	.-4      	; 0x7dfa <waves+0xfa>
    7dfe:	fa fd       	.word	0xfdfa	; ????
    7e00:	80 81       	ld	r24, Z
    7e02:	82 83       	std	Z+2, r24	; 0x02
    7e04:	84 85       	ldd	r24, Z+12	; 0x0c
    7e06:	86 87       	std	Z+14, r24	; 0x0e
    7e08:	88 89       	ldd	r24, Y+16	; 0x10
    7e0a:	8a 8b       	std	Y+18, r24	; 0x12
    7e0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    7e0e:	8e 8f       	std	Y+30, r24	; 0x1e
    7e10:	90 91 92 93 	lds	r25, 0x9392
    7e14:	94 95       	.word	0x9594	; ????
    7e16:	96 97       	sbiw	r26, 0x26	; 38
    7e18:	98 99       	sbic	0x13, 0	; 19
    7e1a:	9a 9b       	sbis	0x13, 2	; 19
    7e1c:	9c 9d       	mul	r25, r12
    7e1e:	9e 9f       	mul	r25, r30
    7e20:	a0 a1       	ldd	r26, Z+32	; 0x20
    7e22:	a2 a3       	std	Z+34, r26	; 0x22
    7e24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7e26:	a6 a7       	std	Z+46, r26	; 0x2e
    7e28:	a8 a9       	ldd	r26, Y+48	; 0x30
    7e2a:	aa ab       	std	Y+50, r26	; 0x32
    7e2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    7e2e:	ae af       	std	Y+62, r26	; 0x3e
    7e30:	b0 b1       	in	r27, 0x00	; 0
    7e32:	b2 b3       	in	r27, 0x12	; 18
    7e34:	b4 b5       	in	r27, 0x24	; 36
    7e36:	b6 b7       	in	r27, 0x36	; 54
    7e38:	b8 b9       	out	0x08, r27	; 8
    7e3a:	ba bb       	out	0x1a, r27	; 26
    7e3c:	bc bd       	out	0x2c, r27	; 44
    7e3e:	be bf       	out	0x3e, r27	; 62
    7e40:	c0 c1       	rjmp	.+896    	; 0x81c2 <waves+0x4c2>
    7e42:	c2 c3       	rjmp	.+1924   	; 0x85c8 <waves+0x8c8>
    7e44:	c4 c5       	rjmp	.+2952   	; 0x89ce <InitializeVideoMode+0xe>
    7e46:	c6 c7       	rjmp	.+3980   	; 0x8dd4 <LBLineIntersect+0x60>
    7e48:	c8 c9       	rjmp	.-3184   	; 0x71da <EepromReadBlock+0x28>
    7e4a:	ca cb       	rjmp	.-2156   	; 0x75e0 <ProcessMusic+0x2e>
    7e4c:	cc cd       	rjmp	.-1128   	; 0x79e6 <ProcessMusic+0x434>
    7e4e:	ce cf       	rjmp	.-100    	; 0x7dec <waves+0xec>
    7e50:	d0 d1       	rcall	.+928    	; 0x81f2 <waves+0x4f2>
    7e52:	d2 d3       	rcall	.+1956   	; 0x85f8 <waves+0x8f8>
    7e54:	d4 d5       	rcall	.+2984   	; 0x89fe <DrawMap2+0x2a>
    7e56:	d6 d7       	rcall	.+4012   	; 0x8e04 <LBLineIntersect+0x90>
    7e58:	d8 d9       	rcall	.-3152   	; 0x720a <EepromReadBlock+0x58>
    7e5a:	da db       	rcall	.-2124   	; 0x7610 <ProcessMusic+0x5e>
    7e5c:	dc dd       	rcall	.-1096   	; 0x7a16 <set_note_waves+0x6>
    7e5e:	de df       	rcall	.-68     	; 0x7e1c <waves+0x11c>
    7e60:	e0 e1       	ldi	r30, 0x10	; 16
    7e62:	e2 e3       	ldi	r30, 0x32	; 50
    7e64:	e4 e5       	ldi	r30, 0x54	; 84
    7e66:	e6 e7       	ldi	r30, 0x76	; 118
    7e68:	e8 e9       	ldi	r30, 0x98	; 152
    7e6a:	ea eb       	ldi	r30, 0xBA	; 186
    7e6c:	ec ed       	ldi	r30, 0xDC	; 220
    7e6e:	ee ef       	ldi	r30, 0xFE	; 254
    7e70:	f0 f1       	brcs	.+124    	; 0x7eee <waves+0x1ee>
    7e72:	f2 f3       	brmi	.-4      	; 0x7e70 <waves+0x170>
    7e74:	f4 f5       	brge	.+124    	; 0x7ef2 <waves+0x1f2>
    7e76:	f6 f7       	brtc	.-4      	; 0x7e74 <waves+0x174>
    7e78:	f8 f9       	.word	0xf9f8	; ????
    7e7a:	fa fb       	.word	0xfbfa	; ????
    7e7c:	fc fd       	.word	0xfdfc	; ????
    7e7e:	fe ff       	.word	0xfffe	; ????
    7e80:	00 01       	movw	r0, r0
    7e82:	02 03       	mulsu	r16, r18
    7e84:	04 05       	cpc	r16, r4
    7e86:	06 07       	cpc	r16, r22
    7e88:	08 09       	sbc	r16, r8
    7e8a:	0a 0b       	sbc	r16, r26
    7e8c:	0c 0d       	add	r16, r12
    7e8e:	0e 0f       	add	r16, r30
    7e90:	10 11       	cpse	r17, r0
    7e92:	12 13       	cpse	r17, r18
    7e94:	14 15       	cp	r17, r4
    7e96:	16 17       	cp	r17, r22
    7e98:	18 19       	sub	r17, r8
    7e9a:	1a 1b       	sub	r17, r26
    7e9c:	1c 1d       	adc	r17, r12
    7e9e:	1e 1f       	adc	r17, r30
    7ea0:	20 21       	and	r18, r0
    7ea2:	22 23       	and	r18, r18
    7ea4:	24 25       	eor	r18, r4
    7ea6:	26 27       	eor	r18, r22
    7ea8:	28 29       	or	r18, r8
    7eaa:	2a 2b       	or	r18, r26
    7eac:	2c 2d       	mov	r18, r12
    7eae:	2e 2f       	mov	r18, r30
    7eb0:	30 31       	cpi	r19, 0x10	; 16
    7eb2:	32 33       	cpi	r19, 0x32	; 50
    7eb4:	34 35       	cpi	r19, 0x54	; 84
    7eb6:	36 37       	cpi	r19, 0x76	; 118
    7eb8:	38 39       	cpi	r19, 0x98	; 152
    7eba:	3a 3b       	cpi	r19, 0xBA	; 186
    7ebc:	3c 3d       	cpi	r19, 0xDC	; 220
    7ebe:	3e 3f       	cpi	r19, 0xFE	; 254
    7ec0:	40 41       	sbci	r20, 0x10	; 16
    7ec2:	42 43       	sbci	r20, 0x32	; 50
    7ec4:	44 45       	sbci	r20, 0x54	; 84
    7ec6:	46 47       	sbci	r20, 0x76	; 118
    7ec8:	48 49       	sbci	r20, 0x98	; 152
    7eca:	4a 4b       	sbci	r20, 0xBA	; 186
    7ecc:	4c 4d       	sbci	r20, 0xDC	; 220
    7ece:	4e 4f       	sbci	r20, 0xFE	; 254
    7ed0:	50 51       	subi	r21, 0x10	; 16
    7ed2:	52 53       	subi	r21, 0x32	; 50
    7ed4:	54 55       	subi	r21, 0x54	; 84
    7ed6:	56 57       	subi	r21, 0x76	; 118
    7ed8:	58 59       	subi	r21, 0x98	; 152
    7eda:	5a 5b       	subi	r21, 0xBA	; 186
    7edc:	5c 5d       	subi	r21, 0xDC	; 220
    7ede:	5e 5f       	subi	r21, 0xFE	; 254
    7ee0:	60 61       	ori	r22, 0x10	; 16
    7ee2:	62 63       	ori	r22, 0x32	; 50
    7ee4:	64 65       	ori	r22, 0x54	; 84
    7ee6:	66 67       	ori	r22, 0x76	; 118
    7ee8:	68 69       	ori	r22, 0x98	; 152
    7eea:	6a 6b       	ori	r22, 0xBA	; 186
    7eec:	6c 6d       	ori	r22, 0xDC	; 220
    7eee:	6e 6f       	ori	r22, 0xFE	; 254
    7ef0:	70 71       	andi	r23, 0x10	; 16
    7ef2:	72 73       	andi	r23, 0x32	; 50
    7ef4:	74 75       	andi	r23, 0x54	; 84
    7ef6:	76 77       	andi	r23, 0x76	; 118
    7ef8:	78 79       	andi	r23, 0x98	; 152
    7efa:	7a 7b       	andi	r23, 0xBA	; 186
    7efc:	7c 7d       	andi	r23, 0xDC	; 220
    7efe:	7e 7f       	andi	r23, 0xFE	; 254
    7f00:	00 02       	muls	r16, r16
    7f02:	04 06       	cpc	r0, r20
    7f04:	08 0a       	sbc	r0, r24
    7f06:	0c 0e       	add	r0, r28
    7f08:	10 12       	cpse	r1, r16
    7f0a:	14 16       	cp	r1, r20
    7f0c:	18 1a       	sub	r1, r24
    7f0e:	1c 1e       	adc	r1, r28
    7f10:	20 22       	and	r2, r16
    7f12:	24 26       	eor	r2, r20
    7f14:	28 2a       	or	r2, r24
    7f16:	2c 2e       	mov	r2, r28
    7f18:	30 32       	cpi	r19, 0x20	; 32
    7f1a:	34 36       	cpi	r19, 0x64	; 100
    7f1c:	38 3a       	cpi	r19, 0xA8	; 168
    7f1e:	3c 3e       	cpi	r19, 0xEC	; 236
    7f20:	40 42       	sbci	r20, 0x20	; 32
    7f22:	44 46       	sbci	r20, 0x64	; 100
    7f24:	48 4a       	sbci	r20, 0xA8	; 168
    7f26:	4c 4e       	sbci	r20, 0xEC	; 236
    7f28:	50 52       	subi	r21, 0x20	; 32
    7f2a:	54 56       	subi	r21, 0x64	; 100
    7f2c:	58 5a       	subi	r21, 0xA8	; 168
    7f2e:	5c 5e       	subi	r21, 0xEC	; 236
    7f30:	60 62       	ori	r22, 0x20	; 32
    7f32:	64 66       	ori	r22, 0x64	; 100
    7f34:	68 6a       	ori	r22, 0xA8	; 168
    7f36:	6c 6e       	ori	r22, 0xEC	; 236
    7f38:	70 72       	andi	r23, 0x20	; 32
    7f3a:	74 76       	andi	r23, 0x64	; 100
    7f3c:	78 7a       	andi	r23, 0xA8	; 168
    7f3e:	7c 7e       	andi	r23, 0xEC	; 236
    7f40:	7f 7d       	andi	r23, 0xDF	; 223
    7f42:	7b 79       	andi	r23, 0x9B	; 155
    7f44:	77 75       	andi	r23, 0x57	; 87
    7f46:	73 71       	andi	r23, 0x13	; 19
    7f48:	6f 6d       	ori	r22, 0xDF	; 223
    7f4a:	6b 69       	ori	r22, 0x9B	; 155
    7f4c:	67 65       	ori	r22, 0x57	; 87
    7f4e:	63 61       	ori	r22, 0x13	; 19
    7f50:	5f 5d       	subi	r21, 0xDF	; 223
    7f52:	5b 59       	subi	r21, 0x9B	; 155
    7f54:	57 55       	subi	r21, 0x57	; 87
    7f56:	53 51       	subi	r21, 0x13	; 19
    7f58:	4f 4d       	sbci	r20, 0xDF	; 223
    7f5a:	4b 49       	sbci	r20, 0x9B	; 155
    7f5c:	47 45       	sbci	r20, 0x57	; 87
    7f5e:	43 41       	sbci	r20, 0x13	; 19
    7f60:	3f 3d       	cpi	r19, 0xDF	; 223
    7f62:	3b 39       	cpi	r19, 0x9B	; 155
    7f64:	37 35       	cpi	r19, 0x57	; 87
    7f66:	33 31       	cpi	r19, 0x13	; 19
    7f68:	2f 2d       	mov	r18, r15
    7f6a:	2b 29       	or	r18, r11
    7f6c:	27 25       	eor	r18, r7
    7f6e:	23 21       	and	r18, r3
    7f70:	1f 1d       	adc	r17, r15
    7f72:	1b 19       	sub	r17, r11
    7f74:	17 15       	cp	r17, r7
    7f76:	13 11       	cpse	r17, r3
    7f78:	0f 0d       	add	r16, r15
    7f7a:	0b 09       	sbc	r16, r11
    7f7c:	07 05       	cpc	r16, r7
    7f7e:	03 01       	movw	r0, r6
    7f80:	ff fd       	.word	0xfdff	; ????
    7f82:	fb f9       	.word	0xf9fb	; ????
    7f84:	f7 f5       	brid	.+124    	; 0x8002 <waves+0x302>
    7f86:	f3 f1       	brvs	.+124    	; 0x8004 <waves+0x304>
    7f88:	ef ed       	ldi	r30, 0xDF	; 223
    7f8a:	eb e9       	ldi	r30, 0x9B	; 155
    7f8c:	e7 e5       	ldi	r30, 0x57	; 87
    7f8e:	e3 e1       	ldi	r30, 0x13	; 19
    7f90:	df dd       	rcall	.-1090   	; 0x7b50 <steptable+0x48>
    7f92:	db d9       	rcall	.-3146   	; 0x734a <PatchCommand08+0x22>
    7f94:	d7 d5       	rcall	.+2990   	; 0x8b44 <doFade+0x6>
    7f96:	d3 d1       	rcall	.+934    	; 0x833e <waves+0x63e>
    7f98:	cf cd       	rjmp	.-1122   	; 0x7b38 <steptable+0x30>
    7f9a:	cb c9       	rjmp	.-3178   	; 0x7332 <PatchCommand08+0xa>
    7f9c:	c7 c5       	rjmp	.+2958   	; 0x8b2c <WaitVsync+0x1c>
    7f9e:	c3 c1       	rjmp	.+902    	; 0x8326 <waves+0x626>
    7fa0:	bf bd       	out	0x2f, r27	; 47
    7fa2:	bb b9       	out	0x0b, r27	; 11
    7fa4:	b7 b5       	in	r27, 0x27	; 39
    7fa6:	b3 b1       	in	r27, 0x03	; 3
    7fa8:	af ad       	ldd	r26, Y+63	; 0x3f
    7faa:	ab a9       	ldd	r26, Y+51	; 0x33
    7fac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7fae:	a3 a1       	ldd	r26, Z+35	; 0x23
    7fb0:	9f 9d       	mul	r25, r15
    7fb2:	9b 99       	sbic	0x13, 3	; 19
    7fb4:	97 95       	ror	r25
    7fb6:	93 91       	.word	0x9193	; ????
    7fb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7fba:	8b 89       	ldd	r24, Y+19	; 0x13
    7fbc:	87 85       	ldd	r24, Z+15	; 0x0f
    7fbe:	83 81       	ldd	r24, Z+3	; 0x03
    7fc0:	80 82       	st	Z, r8
    7fc2:	84 86       	std	Z+12, r8	; 0x0c
    7fc4:	88 8a       	std	Y+16, r8	; 0x10
    7fc6:	8c 8e       	std	Y+28, r8	; 0x1c
    7fc8:	90 92 94 96 	sts	0x9694, r9
    7fcc:	98 9a       	sbi	0x13, 0	; 19
    7fce:	9c 9e       	mul	r9, r28
    7fd0:	a0 a2       	std	Z+32, r10	; 0x20
    7fd2:	a4 a6       	std	Z+44, r10	; 0x2c
    7fd4:	a8 aa       	std	Y+48, r10	; 0x30
    7fd6:	ac ae       	std	Y+60, r10	; 0x3c
    7fd8:	b0 b2       	in	r11, 0x10	; 16
    7fda:	b4 b6       	in	r11, 0x34	; 52
    7fdc:	b8 ba       	out	0x18, r11	; 24
    7fde:	bc be       	out	0x3c, r11	; 60
    7fe0:	c0 c2       	rjmp	.+1408   	; 0x8562 <waves+0x862>
    7fe2:	c4 c6       	rjmp	.+3464   	; 0x8d6c <LBCollides+0x4c>
    7fe4:	c8 ca       	rjmp	.-2672   	; 0x7576 <TriggerNote+0x32>
    7fe6:	cc ce       	rjmp	.-616    	; 0x7d80 <waves+0x80>
    7fe8:	d0 d2       	rcall	.+1440   	; 0x858a <waves+0x88a>
    7fea:	d4 d6       	rcall	.+3496   	; 0x8d94 <LBLineIntersect+0x20>
    7fec:	d8 da       	rcall	.-2640   	; 0x759e <TriggerNote+0x5a>
    7fee:	dc de       	rcall	.-584    	; 0x7da8 <waves+0xa8>
    7ff0:	e0 e2       	ldi	r30, 0x20	; 32
    7ff2:	e4 e6       	ldi	r30, 0x64	; 100
    7ff4:	e8 ea       	ldi	r30, 0xA8	; 168
    7ff6:	ec ee       	ldi	r30, 0xEC	; 236
    7ff8:	f0 f2       	brcs	.-68     	; 0x7fb6 <waves+0x2b6>
    7ffa:	f4 f6       	brge	.-68     	; 0x7fb8 <waves+0x2b8>
    7ffc:	f8 fa       	.word	0xfaf8	; ????
    7ffe:	fc fe       	.word	0xfefc	; ????
    8000:	7f 7f       	andi	r23, 0xFF	; 255
    8002:	7f 7f       	andi	r23, 0xFF	; 255
    8004:	7f 7f       	andi	r23, 0xFF	; 255
    8006:	7f 7f       	andi	r23, 0xFF	; 255
    8008:	7f 7f       	andi	r23, 0xFF	; 255
    800a:	7f 7f       	andi	r23, 0xFF	; 255
    800c:	7f 7f       	andi	r23, 0xFF	; 255
    800e:	7f 7f       	andi	r23, 0xFF	; 255
    8010:	7f 7f       	andi	r23, 0xFF	; 255
    8012:	7f 7f       	andi	r23, 0xFF	; 255
    8014:	7f 7f       	andi	r23, 0xFF	; 255
    8016:	7f 7f       	andi	r23, 0xFF	; 255
    8018:	7f 7f       	andi	r23, 0xFF	; 255
    801a:	7f 7f       	andi	r23, 0xFF	; 255
    801c:	7f 7f       	andi	r23, 0xFF	; 255
    801e:	7f 7f       	andi	r23, 0xFF	; 255
    8020:	7f 7f       	andi	r23, 0xFF	; 255
    8022:	7f 7f       	andi	r23, 0xFF	; 255
    8024:	7f 7f       	andi	r23, 0xFF	; 255
    8026:	7f 7f       	andi	r23, 0xFF	; 255
    8028:	7f 7f       	andi	r23, 0xFF	; 255
    802a:	7f 7f       	andi	r23, 0xFF	; 255
    802c:	7f 7f       	andi	r23, 0xFF	; 255
    802e:	7f 7f       	andi	r23, 0xFF	; 255
    8030:	7f 7f       	andi	r23, 0xFF	; 255
    8032:	7f 7f       	andi	r23, 0xFF	; 255
    8034:	7f 7f       	andi	r23, 0xFF	; 255
    8036:	7f 7f       	andi	r23, 0xFF	; 255
    8038:	7f 7f       	andi	r23, 0xFF	; 255
    803a:	7f 7f       	andi	r23, 0xFF	; 255
    803c:	7f 7f       	andi	r23, 0xFF	; 255
    803e:	7f 7f       	andi	r23, 0xFF	; 255
    8040:	80 80       	ld	r8, Z
    8042:	80 80       	ld	r8, Z
    8044:	80 80       	ld	r8, Z
    8046:	80 80       	ld	r8, Z
    8048:	80 80       	ld	r8, Z
    804a:	80 80       	ld	r8, Z
    804c:	80 80       	ld	r8, Z
    804e:	80 80       	ld	r8, Z
    8050:	80 80       	ld	r8, Z
    8052:	80 80       	ld	r8, Z
    8054:	80 80       	ld	r8, Z
    8056:	80 80       	ld	r8, Z
    8058:	80 80       	ld	r8, Z
    805a:	80 80       	ld	r8, Z
    805c:	80 80       	ld	r8, Z
    805e:	80 80       	ld	r8, Z
    8060:	80 80       	ld	r8, Z
    8062:	80 80       	ld	r8, Z
    8064:	80 80       	ld	r8, Z
    8066:	80 80       	ld	r8, Z
    8068:	80 80       	ld	r8, Z
    806a:	80 80       	ld	r8, Z
    806c:	80 80       	ld	r8, Z
    806e:	80 80       	ld	r8, Z
    8070:	80 80       	ld	r8, Z
    8072:	80 80       	ld	r8, Z
    8074:	80 80       	ld	r8, Z
    8076:	80 80       	ld	r8, Z
    8078:	80 80       	ld	r8, Z
    807a:	80 80       	ld	r8, Z
    807c:	80 80       	ld	r8, Z
    807e:	80 80       	ld	r8, Z
    8080:	80 80       	ld	r8, Z
    8082:	80 80       	ld	r8, Z
    8084:	80 80       	ld	r8, Z
    8086:	80 80       	ld	r8, Z
    8088:	80 80       	ld	r8, Z
    808a:	80 80       	ld	r8, Z
    808c:	80 80       	ld	r8, Z
    808e:	80 80       	ld	r8, Z
    8090:	80 80       	ld	r8, Z
    8092:	80 80       	ld	r8, Z
    8094:	80 80       	ld	r8, Z
    8096:	80 80       	ld	r8, Z
    8098:	80 80       	ld	r8, Z
    809a:	80 80       	ld	r8, Z
    809c:	80 80       	ld	r8, Z
    809e:	80 80       	ld	r8, Z
    80a0:	80 80       	ld	r8, Z
    80a2:	80 80       	ld	r8, Z
    80a4:	80 80       	ld	r8, Z
    80a6:	80 80       	ld	r8, Z
    80a8:	80 80       	ld	r8, Z
    80aa:	80 80       	ld	r8, Z
    80ac:	80 80       	ld	r8, Z
    80ae:	80 80       	ld	r8, Z
    80b0:	80 80       	ld	r8, Z
    80b2:	80 80       	ld	r8, Z
    80b4:	80 80       	ld	r8, Z
    80b6:	80 80       	ld	r8, Z
    80b8:	80 80       	ld	r8, Z
    80ba:	80 80       	ld	r8, Z
    80bc:	80 80       	ld	r8, Z
    80be:	80 80       	ld	r8, Z
    80c0:	80 80       	ld	r8, Z
    80c2:	80 80       	ld	r8, Z
    80c4:	80 80       	ld	r8, Z
    80c6:	80 80       	ld	r8, Z
    80c8:	80 80       	ld	r8, Z
    80ca:	80 80       	ld	r8, Z
    80cc:	80 80       	ld	r8, Z
    80ce:	80 80       	ld	r8, Z
    80d0:	80 80       	ld	r8, Z
    80d2:	80 80       	ld	r8, Z
    80d4:	80 80       	ld	r8, Z
    80d6:	80 80       	ld	r8, Z
    80d8:	80 80       	ld	r8, Z
    80da:	80 80       	ld	r8, Z
    80dc:	80 80       	ld	r8, Z
    80de:	80 80       	ld	r8, Z
    80e0:	80 80       	ld	r8, Z
    80e2:	80 80       	ld	r8, Z
    80e4:	80 80       	ld	r8, Z
    80e6:	80 80       	ld	r8, Z
    80e8:	80 80       	ld	r8, Z
    80ea:	80 80       	ld	r8, Z
    80ec:	80 80       	ld	r8, Z
    80ee:	80 80       	ld	r8, Z
    80f0:	80 80       	ld	r8, Z
    80f2:	80 80       	ld	r8, Z
    80f4:	80 80       	ld	r8, Z
    80f6:	80 80       	ld	r8, Z
    80f8:	80 80       	ld	r8, Z
    80fa:	80 80       	ld	r8, Z
    80fc:	80 80       	ld	r8, Z
    80fe:	80 80       	ld	r8, Z
    8100:	7f 7f       	andi	r23, 0xFF	; 255
    8102:	7f 7f       	andi	r23, 0xFF	; 255
    8104:	7f 7f       	andi	r23, 0xFF	; 255
    8106:	7f 7f       	andi	r23, 0xFF	; 255
    8108:	7f 7f       	andi	r23, 0xFF	; 255
    810a:	7f 7f       	andi	r23, 0xFF	; 255
    810c:	7f 7f       	andi	r23, 0xFF	; 255
    810e:	7f 7f       	andi	r23, 0xFF	; 255
    8110:	7f 7f       	andi	r23, 0xFF	; 255
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	7f 7f       	andi	r23, 0xFF	; 255
    8142:	7f 7f       	andi	r23, 0xFF	; 255
    8144:	7f 7f       	andi	r23, 0xFF	; 255
    8146:	7f 7f       	andi	r23, 0xFF	; 255
    8148:	7f 7f       	andi	r23, 0xFF	; 255
    814a:	7f 7f       	andi	r23, 0xFF	; 255
    814c:	7f 7f       	andi	r23, 0xFF	; 255
    814e:	7f 7f       	andi	r23, 0xFF	; 255
    8150:	7f 7f       	andi	r23, 0xFF	; 255
    8152:	7f 7f       	andi	r23, 0xFF	; 255
    8154:	7f 7f       	andi	r23, 0xFF	; 255
    8156:	7f 7f       	andi	r23, 0xFF	; 255
    8158:	7f 7f       	andi	r23, 0xFF	; 255
    815a:	7f 7f       	andi	r23, 0xFF	; 255
    815c:	7f 7f       	andi	r23, 0xFF	; 255
    815e:	7f 7f       	andi	r23, 0xFF	; 255
    8160:	7f 7f       	andi	r23, 0xFF	; 255
    8162:	7f 7f       	andi	r23, 0xFF	; 255
    8164:	7f 7f       	andi	r23, 0xFF	; 255
    8166:	7f 7f       	andi	r23, 0xFF	; 255
    8168:	7f 7f       	andi	r23, 0xFF	; 255
    816a:	7f 7f       	andi	r23, 0xFF	; 255
    816c:	7f 7f       	andi	r23, 0xFF	; 255
    816e:	7f 7f       	andi	r23, 0xFF	; 255
    8170:	7f 7f       	andi	r23, 0xFF	; 255
    8172:	7f 7f       	andi	r23, 0xFF	; 255
    8174:	7f 7f       	andi	r23, 0xFF	; 255
    8176:	7f 7f       	andi	r23, 0xFF	; 255
    8178:	7f 7f       	andi	r23, 0xFF	; 255
    817a:	7f 7f       	andi	r23, 0xFF	; 255
    817c:	7f 7f       	andi	r23, 0xFF	; 255
    817e:	7f 7f       	andi	r23, 0xFF	; 255
    8180:	80 80       	ld	r8, Z
    8182:	80 80       	ld	r8, Z
    8184:	80 80       	ld	r8, Z
    8186:	80 80       	ld	r8, Z
    8188:	80 80       	ld	r8, Z
    818a:	80 80       	ld	r8, Z
    818c:	80 80       	ld	r8, Z
    818e:	80 80       	ld	r8, Z
    8190:	80 80       	ld	r8, Z
    8192:	80 80       	ld	r8, Z
    8194:	80 80       	ld	r8, Z
    8196:	80 80       	ld	r8, Z
    8198:	80 80       	ld	r8, Z
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 80       	ld	r8, Z
    81f6:	80 80       	ld	r8, Z
    81f8:	80 80       	ld	r8, Z
    81fa:	80 80       	ld	r8, Z
    81fc:	80 80       	ld	r8, Z
    81fe:	80 80       	ld	r8, Z
    8200:	7f 7f       	andi	r23, 0xFF	; 255
    8202:	7f 7f       	andi	r23, 0xFF	; 255
    8204:	7f 7f       	andi	r23, 0xFF	; 255
    8206:	7f 7f       	andi	r23, 0xFF	; 255
    8208:	7f 7f       	andi	r23, 0xFF	; 255
    820a:	7f 7f       	andi	r23, 0xFF	; 255
    820c:	7f 7f       	andi	r23, 0xFF	; 255
    820e:	7f 7f       	andi	r23, 0xFF	; 255
    8210:	7f 7f       	andi	r23, 0xFF	; 255
    8212:	7f 7f       	andi	r23, 0xFF	; 255
    8214:	7f 7f       	andi	r23, 0xFF	; 255
    8216:	7f 7f       	andi	r23, 0xFF	; 255
    8218:	7f 7f       	andi	r23, 0xFF	; 255
    821a:	7f 7f       	andi	r23, 0xFF	; 255
    821c:	7f 7f       	andi	r23, 0xFF	; 255
    821e:	7f 7f       	andi	r23, 0xFF	; 255
    8220:	7f 7f       	andi	r23, 0xFF	; 255
    8222:	7f 7f       	andi	r23, 0xFF	; 255
    8224:	7f 7f       	andi	r23, 0xFF	; 255
    8226:	7f 7f       	andi	r23, 0xFF	; 255
    8228:	7f 7f       	andi	r23, 0xFF	; 255
    822a:	7f 7f       	andi	r23, 0xFF	; 255
    822c:	7f 7f       	andi	r23, 0xFF	; 255
    822e:	7f 7f       	andi	r23, 0xFF	; 255
    8230:	7f 7f       	andi	r23, 0xFF	; 255
    8232:	7f 7f       	andi	r23, 0xFF	; 255
    8234:	7f 7f       	andi	r23, 0xFF	; 255
    8236:	7f 7f       	andi	r23, 0xFF	; 255
    8238:	7f 7f       	andi	r23, 0xFF	; 255
    823a:	7f 7f       	andi	r23, 0xFF	; 255
    823c:	7f 7f       	andi	r23, 0xFF	; 255
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7f 7f       	andi	r23, 0xFF	; 255
    8246:	7f 7f       	andi	r23, 0xFF	; 255
    8248:	7f 7f       	andi	r23, 0xFF	; 255
    824a:	7f 7f       	andi	r23, 0xFF	; 255
    824c:	7f 7f       	andi	r23, 0xFF	; 255
    824e:	7f 7f       	andi	r23, 0xFF	; 255
    8250:	7f 7f       	andi	r23, 0xFF	; 255
    8252:	7f 7f       	andi	r23, 0xFF	; 255
    8254:	7f 7f       	andi	r23, 0xFF	; 255
    8256:	7f 7f       	andi	r23, 0xFF	; 255
    8258:	7f 7f       	andi	r23, 0xFF	; 255
    825a:	7f 7f       	andi	r23, 0xFF	; 255
    825c:	7f 7f       	andi	r23, 0xFF	; 255
    825e:	7f 7f       	andi	r23, 0xFF	; 255
    8260:	7f 7f       	andi	r23, 0xFF	; 255
    8262:	7f 7f       	andi	r23, 0xFF	; 255
    8264:	7f 7f       	andi	r23, 0xFF	; 255
    8266:	7f 7f       	andi	r23, 0xFF	; 255
    8268:	7f 7f       	andi	r23, 0xFF	; 255
    826a:	7f 7f       	andi	r23, 0xFF	; 255
    826c:	7f 7f       	andi	r23, 0xFF	; 255
    826e:	7f 7f       	andi	r23, 0xFF	; 255
    8270:	7f 7f       	andi	r23, 0xFF	; 255
    8272:	7f 7f       	andi	r23, 0xFF	; 255
    8274:	7f 7f       	andi	r23, 0xFF	; 255
    8276:	7f 7f       	andi	r23, 0xFF	; 255
    8278:	7f 7f       	andi	r23, 0xFF	; 255
    827a:	7f 7f       	andi	r23, 0xFF	; 255
    827c:	7f 7f       	andi	r23, 0xFF	; 255
    827e:	7f 7f       	andi	r23, 0xFF	; 255
    8280:	7f 7f       	andi	r23, 0xFF	; 255
    8282:	7f 7f       	andi	r23, 0xFF	; 255
    8284:	7f 7f       	andi	r23, 0xFF	; 255
    8286:	7f 7f       	andi	r23, 0xFF	; 255
    8288:	7f 7f       	andi	r23, 0xFF	; 255
    828a:	7f 7f       	andi	r23, 0xFF	; 255
    828c:	7f 7f       	andi	r23, 0xFF	; 255
    828e:	7f 7f       	andi	r23, 0xFF	; 255
    8290:	7f 7f       	andi	r23, 0xFF	; 255
    8292:	7f 7f       	andi	r23, 0xFF	; 255
    8294:	7f 7f       	andi	r23, 0xFF	; 255
    8296:	7f 7f       	andi	r23, 0xFF	; 255
    8298:	7f 7f       	andi	r23, 0xFF	; 255
    829a:	7f 7f       	andi	r23, 0xFF	; 255
    829c:	7f 7f       	andi	r23, 0xFF	; 255
    829e:	7f 7f       	andi	r23, 0xFF	; 255
    82a0:	7f 7f       	andi	r23, 0xFF	; 255
    82a2:	7f 7f       	andi	r23, 0xFF	; 255
    82a4:	7f 7f       	andi	r23, 0xFF	; 255
    82a6:	7f 7f       	andi	r23, 0xFF	; 255
    82a8:	7f 7f       	andi	r23, 0xFF	; 255
    82aa:	7f 7f       	andi	r23, 0xFF	; 255
    82ac:	7f 7f       	andi	r23, 0xFF	; 255
    82ae:	7f 7f       	andi	r23, 0xFF	; 255
    82b0:	7f 7f       	andi	r23, 0xFF	; 255
    82b2:	7f 7f       	andi	r23, 0xFF	; 255
    82b4:	7f 7f       	andi	r23, 0xFF	; 255
    82b6:	7f 7f       	andi	r23, 0xFF	; 255
    82b8:	7f 7f       	andi	r23, 0xFF	; 255
    82ba:	7f 7f       	andi	r23, 0xFF	; 255
    82bc:	7f 7f       	andi	r23, 0xFF	; 255
    82be:	7f 7f       	andi	r23, 0xFF	; 255
    82c0:	80 80       	ld	r8, Z
    82c2:	80 80       	ld	r8, Z
    82c4:	80 80       	ld	r8, Z
    82c6:	80 80       	ld	r8, Z
    82c8:	80 80       	ld	r8, Z
    82ca:	80 80       	ld	r8, Z
    82cc:	80 80       	ld	r8, Z
    82ce:	80 80       	ld	r8, Z
    82d0:	80 80       	ld	r8, Z
    82d2:	80 80       	ld	r8, Z
    82d4:	80 80       	ld	r8, Z
    82d6:	80 80       	ld	r8, Z
    82d8:	80 80       	ld	r8, Z
    82da:	80 80       	ld	r8, Z
    82dc:	80 80       	ld	r8, Z
    82de:	80 80       	ld	r8, Z
    82e0:	80 80       	ld	r8, Z
    82e2:	80 80       	ld	r8, Z
    82e4:	80 80       	ld	r8, Z
    82e6:	80 80       	ld	r8, Z
    82e8:	80 80       	ld	r8, Z
    82ea:	80 80       	ld	r8, Z
    82ec:	80 80       	ld	r8, Z
    82ee:	80 80       	ld	r8, Z
    82f0:	80 80       	ld	r8, Z
    82f2:	80 80       	ld	r8, Z
    82f4:	80 80       	ld	r8, Z
    82f6:	80 80       	ld	r8, Z
    82f8:	80 80       	ld	r8, Z
    82fa:	80 80       	ld	r8, Z
    82fc:	80 80       	ld	r8, Z
    82fe:	80 80       	ld	r8, Z
    8300:	03 09       	sbc	r16, r3
    8302:	13 1e       	adc	r1, r19
    8304:	28 31       	cpi	r18, 0x18	; 24
    8306:	3a 40       	sbci	r19, 0x0A	; 10
    8308:	46 4c       	sbci	r20, 0xC6	; 198
    830a:	50 54       	subi	r21, 0x40	; 64
    830c:	58 5b       	subi	r21, 0xB8	; 184
    830e:	5e 61       	ori	r21, 0x1E	; 30
    8310:	63 65       	ori	r22, 0x53	; 83
    8312:	67 69       	ori	r22, 0x97	; 151
    8314:	6b 6c       	ori	r22, 0xCB	; 203
    8316:	6e 6f       	ori	r22, 0xFE	; 254
    8318:	70 71       	andi	r23, 0x10	; 16
    831a:	72 73       	andi	r23, 0x32	; 50
    831c:	74 75       	andi	r23, 0x54	; 84
    831e:	76 77       	andi	r23, 0x76	; 118
    8320:	77 78       	andi	r23, 0x87	; 135
    8322:	79 79       	andi	r23, 0x99	; 153
    8324:	7a 7a       	andi	r23, 0xAA	; 170
    8326:	7b 7b       	andi	r23, 0xBB	; 187
    8328:	7c 7c       	andi	r23, 0xCC	; 204
    832a:	7c 7d       	andi	r23, 0xDC	; 220
    832c:	7d 7d       	andi	r23, 0xDD	; 221
    832e:	7e 7e       	andi	r23, 0xEE	; 238
    8330:	7e 7e       	andi	r23, 0xEE	; 238
    8332:	7f 7f       	andi	r23, 0xFF	; 255
    8334:	7f 7f       	andi	r23, 0xFF	; 255
    8336:	7f 7f       	andi	r23, 0xFF	; 255
    8338:	7f 7f       	andi	r23, 0xFF	; 255
    833a:	7f 7f       	andi	r23, 0xFF	; 255
    833c:	7f 7f       	andi	r23, 0xFF	; 255
    833e:	7f 7f       	andi	r23, 0xFF	; 255
    8340:	7f 7f       	andi	r23, 0xFF	; 255
    8342:	7f 7f       	andi	r23, 0xFF	; 255
    8344:	7f 7f       	andi	r23, 0xFF	; 255
    8346:	7f 7f       	andi	r23, 0xFF	; 255
    8348:	7f 7f       	andi	r23, 0xFF	; 255
    834a:	7f 7f       	andi	r23, 0xFF	; 255
    834c:	7f 7e       	andi	r23, 0xEF	; 239
    834e:	7e 7e       	andi	r23, 0xEE	; 238
    8350:	7e 7d       	andi	r23, 0xDE	; 222
    8352:	7d 7d       	andi	r23, 0xDD	; 221
    8354:	7c 7c       	andi	r23, 0xCC	; 204
    8356:	7c 7b       	andi	r23, 0xBC	; 188
    8358:	7b 7a       	andi	r23, 0xAB	; 171
    835a:	7a 79       	andi	r23, 0x9A	; 154
    835c:	79 78       	andi	r23, 0x89	; 137
    835e:	77 77       	andi	r23, 0x77	; 119
    8360:	76 75       	andi	r23, 0x56	; 86
    8362:	74 73       	andi	r23, 0x34	; 52
    8364:	72 71       	andi	r23, 0x12	; 18
    8366:	70 6f       	ori	r23, 0xF0	; 240
    8368:	6e 6c       	ori	r22, 0xCE	; 206
    836a:	6b 69       	ori	r22, 0x9B	; 155
    836c:	67 65       	ori	r22, 0x57	; 87
    836e:	63 61       	ori	r22, 0x13	; 19
    8370:	5e 5b       	subi	r21, 0xBE	; 190
    8372:	58 54       	subi	r21, 0x48	; 72
    8374:	50 4c       	sbci	r21, 0xC0	; 192
    8376:	46 40       	sbci	r20, 0x06	; 6
    8378:	3a 31       	cpi	r19, 0x1A	; 26
    837a:	28 1e       	adc	r2, r24
    837c:	13 09       	sbc	r17, r3
    837e:	03 00       	.word	0x0003	; ????
    8380:	c6 cc       	rjmp	.-1652   	; 0x7d0e <waves+0xe>
    8382:	d5 db       	rcall	.-2134   	; 0x7b2e <steptable+0x26>
    8384:	df e3       	ldi	r29, 0x3F	; 63
    8386:	e5 e7       	ldi	r30, 0x75	; 117
    8388:	e9 ea       	ldi	r30, 0xA9	; 169
    838a:	eb ec       	ldi	r30, 0xCB	; 203
    838c:	ed ee       	ldi	r30, 0xED	; 237
    838e:	ef ef       	ldi	r30, 0xFF	; 255
    8390:	f0 f0       	brcs	.+60     	; 0x83ce <waves+0x6ce>
    8392:	f0 f1       	brcs	.+124    	; 0x8410 <waves+0x710>
    8394:	f1 f1       	breq	.+124    	; 0x8412 <waves+0x712>
    8396:	f1 f2       	breq	.-68     	; 0x8354 <waves+0x654>
    8398:	f2 f2       	brmi	.-68     	; 0x8356 <waves+0x656>
    839a:	f2 f2       	brmi	.-68     	; 0x8358 <waves+0x658>
    839c:	f2 f2       	brmi	.-68     	; 0x835a <waves+0x65a>
    839e:	f2 f3       	brmi	.-4      	; 0x839c <waves+0x69c>
    83a0:	f3 f3       	brvs	.-4      	; 0x839e <waves+0x69e>
    83a2:	f3 f3       	brvs	.-4      	; 0x83a0 <waves+0x6a0>
    83a4:	f3 f3       	brvs	.-4      	; 0x83a2 <waves+0x6a2>
    83a6:	f3 f3       	brvs	.-4      	; 0x83a4 <waves+0x6a4>
    83a8:	f3 f3       	brvs	.-4      	; 0x83a6 <waves+0x6a6>
    83aa:	f3 f3       	brvs	.-4      	; 0x83a8 <waves+0x6a8>
    83ac:	f3 f3       	brvs	.-4      	; 0x83aa <waves+0x6aa>
    83ae:	f3 f3       	brvs	.-4      	; 0x83ac <waves+0x6ac>
    83b0:	f3 f3       	brvs	.-4      	; 0x83ae <waves+0x6ae>
    83b2:	f3 f3       	brvs	.-4      	; 0x83b0 <waves+0x6b0>
    83b4:	f3 f3       	brvs	.-4      	; 0x83b2 <waves+0x6b2>
    83b6:	f3 f3       	brvs	.-4      	; 0x83b4 <waves+0x6b4>
    83b8:	f3 f3       	brvs	.-4      	; 0x83b6 <waves+0x6b6>
    83ba:	f3 f3       	brvs	.-4      	; 0x83b8 <waves+0x6b8>
    83bc:	f3 f3       	brvs	.-4      	; 0x83ba <waves+0x6ba>
    83be:	f3 f3       	brvs	.-4      	; 0x83bc <waves+0x6bc>
    83c0:	f3 f3       	brvs	.-4      	; 0x83be <waves+0x6be>
    83c2:	f3 f3       	brvs	.-4      	; 0x83c0 <waves+0x6c0>
    83c4:	f3 f3       	brvs	.-4      	; 0x83c2 <waves+0x6c2>
    83c6:	f3 f3       	brvs	.-4      	; 0x83c4 <waves+0x6c4>
    83c8:	f3 f3       	brvs	.-4      	; 0x83c6 <waves+0x6c6>
    83ca:	f3 f3       	brvs	.-4      	; 0x83c8 <waves+0x6c8>
    83cc:	f3 f3       	brvs	.-4      	; 0x83ca <waves+0x6ca>
    83ce:	f3 f3       	brvs	.-4      	; 0x83cc <waves+0x6cc>
    83d0:	f3 f3       	brvs	.-4      	; 0x83ce <waves+0x6ce>
    83d2:	f3 f3       	brvs	.-4      	; 0x83d0 <waves+0x6d0>
    83d4:	f3 f3       	brvs	.-4      	; 0x83d2 <waves+0x6d2>
    83d6:	f3 f3       	brvs	.-4      	; 0x83d4 <waves+0x6d4>
    83d8:	f3 f3       	brvs	.-4      	; 0x83d6 <waves+0x6d6>
    83da:	f3 f3       	brvs	.-4      	; 0x83d8 <waves+0x6d8>
    83dc:	f3 f3       	brvs	.-4      	; 0x83da <waves+0x6da>
    83de:	f3 f3       	brvs	.-4      	; 0x83dc <waves+0x6dc>
    83e0:	f2 f2       	brmi	.-68     	; 0x839e <waves+0x69e>
    83e2:	f2 f2       	brmi	.-68     	; 0x83a0 <waves+0x6a0>
    83e4:	f2 f2       	brmi	.-68     	; 0x83a2 <waves+0x6a2>
    83e6:	f2 f2       	brmi	.-68     	; 0x83a4 <waves+0x6a4>
    83e8:	f1 f1       	breq	.+124    	; 0x8466 <waves+0x766>
    83ea:	f1 f1       	breq	.+124    	; 0x8468 <waves+0x768>
    83ec:	f0 f0       	brcs	.+60     	; 0x842a <waves+0x72a>
    83ee:	f0 ef       	ldi	r31, 0xF0	; 240
    83f0:	ef ee       	ldi	r30, 0xEF	; 239
    83f2:	ed ec       	ldi	r30, 0xCD	; 205
    83f4:	eb ea       	ldi	r30, 0xAB	; 171
    83f6:	e9 e7       	ldi	r30, 0x79	; 121
    83f8:	e5 e3       	ldi	r30, 0x35	; 53
    83fa:	df db       	rcall	.-2114   	; 0x7bba <steptable+0xb2>
    83fc:	d5 cc       	rjmp	.-1622   	; 0x7da8 <waves+0xa8>
    83fe:	c6 00       	.word	0x00c6	; ????
    8400:	00 28       	or	r0, r0
    8402:	3d 42       	sbci	r19, 0x2D	; 45
    8404:	30 2d       	mov	r19, r0
    8406:	2c 2b       	or	r18, r28
    8408:	2c 2d       	mov	r18, r12
    840a:	2e 2f       	mov	r18, r30
    840c:	30 32       	cpi	r19, 0x20	; 32
    840e:	33 35       	cpi	r19, 0x53	; 83
    8410:	37 39       	cpi	r19, 0x97	; 151
    8412:	3b 3d       	cpi	r19, 0xDB	; 219
    8414:	3f 41       	sbci	r19, 0x1F	; 31
    8416:	43 45       	sbci	r20, 0x53	; 83
    8418:	48 4a       	sbci	r20, 0xA8	; 168
    841a:	4c 4e       	sbci	r20, 0xEC	; 236
    841c:	50 53       	subi	r21, 0x30	; 48
    841e:	55 57       	subi	r21, 0x75	; 117
    8420:	59 5b       	subi	r21, 0xB9	; 185
    8422:	5d 5f       	subi	r21, 0xFD	; 253
    8424:	61 63       	ori	r22, 0x31	; 49
    8426:	65 67       	ori	r22, 0x75	; 117
    8428:	69 6b       	ori	r22, 0xB9	; 185
    842a:	6c 6e       	ori	r22, 0xEC	; 236
    842c:	70 71       	andi	r23, 0x10	; 16
    842e:	73 74       	andi	r23, 0x43	; 67
    8430:	75 77       	andi	r23, 0x75	; 117
    8432:	78 79       	andi	r23, 0x98	; 152
    8434:	7a 7b       	andi	r23, 0xBA	; 186
    8436:	7c 7d       	andi	r23, 0xDC	; 220
    8438:	7d 7e       	andi	r23, 0xED	; 237
    843a:	7e 7f       	andi	r23, 0xFE	; 254
    843c:	7f 7f       	andi	r23, 0xFF	; 255
    843e:	7f 7f       	andi	r23, 0xFF	; 255
    8440:	7f 7f       	andi	r23, 0xFF	; 255
    8442:	7f 7f       	andi	r23, 0xFF	; 255
    8444:	7f 7f       	andi	r23, 0xFF	; 255
    8446:	7e 7e       	andi	r23, 0xEE	; 238
    8448:	7d 7d       	andi	r23, 0xDD	; 221
    844a:	7c 7b       	andi	r23, 0xBC	; 188
    844c:	7a 79       	andi	r23, 0x9A	; 154
    844e:	78 77       	andi	r23, 0x78	; 120
    8450:	75 74       	andi	r23, 0x45	; 69
    8452:	73 71       	andi	r23, 0x13	; 19
    8454:	70 6e       	ori	r23, 0xE0	; 224
    8456:	6c 6b       	ori	r22, 0xBC	; 188
    8458:	69 67       	ori	r22, 0x79	; 121
    845a:	65 63       	ori	r22, 0x35	; 53
    845c:	61 5f       	subi	r22, 0xF1	; 241
    845e:	5d 5b       	subi	r21, 0xBD	; 189
    8460:	59 57       	subi	r21, 0x79	; 121
    8462:	55 53       	subi	r21, 0x35	; 53
    8464:	50 4e       	sbci	r21, 0xE0	; 224
    8466:	4c 4a       	sbci	r20, 0xAC	; 172
    8468:	48 45       	sbci	r20, 0x58	; 88
    846a:	43 41       	sbci	r20, 0x13	; 19
    846c:	3f 3d       	cpi	r19, 0xDF	; 223
    846e:	3b 39       	cpi	r19, 0x9B	; 155
    8470:	37 35       	cpi	r19, 0x57	; 87
    8472:	33 32       	cpi	r19, 0x23	; 35
    8474:	30 2f       	mov	r19, r16
    8476:	2e 2d       	mov	r18, r14
    8478:	2c 2b       	or	r18, r28
    847a:	2c 2d       	mov	r18, r12
    847c:	30 42       	sbci	r19, 0x20	; 32
    847e:	3d 28       	or	r3, r13
    8480:	00 e9       	ldi	r16, 0x90	; 144
    8482:	e5 fe       	sbrs	r14, 5
    8484:	d4 d7       	rcall	.+4008   	; 0x942e <render_hud+0x16>
    8486:	d7 d7       	rcall	.+4014   	; 0x9436 <render_hud+0x1e>
    8488:	d6 d4       	rcall	.+2476   	; 0x8e36 <LBLineIntersect+0xc2>
    848a:	d2 d0       	rcall	.+420    	; 0x8630 <waves+0x930>
    848c:	ce cc       	rjmp	.-1636   	; 0x7e2a <waves+0x12a>
    848e:	ca c8       	rjmp	.-3692   	; 0x7624 <ProcessMusic+0x72>
    8490:	c6 c3       	rjmp	.+1932   	; 0x8c1e <LBGetNextFrame+0x42>
    8492:	c1 bf       	out	0x31, r28	; 49
    8494:	bd ba       	out	0x1d, r11	; 29
    8496:	b8 b6       	in	r11, 0x38	; 56
    8498:	b4 b1       	in	r27, 0x04	; 4
    849a:	af ad       	ldd	r26, Y+63	; 0x3f
    849c:	ab a9       	ldd	r26, Y+51	; 0x33
    849e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    84a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    84a2:	9f 9e       	mul	r9, r31
    84a4:	9c 9a       	sbi	0x13, 4	; 19
    84a6:	99 97       	sbiw	r26, 0x29	; 41
    84a8:	95 94       	asr	r9
    84aa:	93 91       	.word	0x9193	; ????
    84ac:	90 8f       	std	Z+24, r25	; 0x18
    84ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    84b0:	8b 8a       	std	Y+19, r8	; 0x13
    84b2:	89 88       	ldd	r8, Y+17	; 0x11
    84b4:	88 87       	std	Y+8, r24	; 0x08
    84b6:	86 85       	ldd	r24, Z+14	; 0x0e
    84b8:	85 84       	ldd	r8, Z+13	; 0x0d
    84ba:	84 84       	ldd	r8, Z+12	; 0x0c
    84bc:	83 83       	std	Z+3, r24	; 0x03
    84be:	83 83       	std	Z+3, r24	; 0x03
    84c0:	83 83       	std	Z+3, r24	; 0x03
    84c2:	83 83       	std	Z+3, r24	; 0x03
    84c4:	83 84       	ldd	r8, Z+11	; 0x0b
    84c6:	84 84       	ldd	r8, Z+12	; 0x0c
    84c8:	85 85       	ldd	r24, Z+13	; 0x0d
    84ca:	86 87       	std	Z+14, r24	; 0x0e
    84cc:	88 88       	ldd	r8, Y+16	; 0x10
    84ce:	89 8a       	std	Y+17, r8	; 0x11
    84d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    84d2:	8d 8f       	std	Y+29, r24	; 0x1d
    84d4:	90 91 93 94 	lds	r25, 0x9493
    84d8:	95 97       	sbiw	r26, 0x25	; 37
    84da:	99 9a       	sbi	0x13, 1	; 19
    84dc:	9c 9e       	mul	r9, r28
    84de:	9f a1       	ldd	r25, Y+39	; 0x27
    84e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    84e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    84e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    84e6:	af b1       	in	r26, 0x0f	; 15
    84e8:	b4 b6       	in	r11, 0x34	; 52
    84ea:	b8 ba       	out	0x18, r11	; 24
    84ec:	bd bf       	out	0x3d, r27	; 61
    84ee:	c1 c3       	rjmp	.+1922   	; 0x8c72 <LBGetJoyPadState+0x50>
    84f0:	c6 c8       	rjmp	.-3700   	; 0x767e <ProcessMusic+0xcc>
    84f2:	ca cc       	rjmp	.-1644   	; 0x7e88 <waves+0x188>
    84f4:	ce d0       	rcall	.+412    	; 0x8692 <waves+0x992>
    84f6:	d2 d4       	rcall	.+2468   	; 0x8e9c <LBLineIntersect+0x128>
    84f8:	d6 d7       	rcall	.+4012   	; 0x94a6 <render_banter+0x1c>
    84fa:	d7 d7       	rcall	.+4014   	; 0x94aa <render_banter+0x20>
    84fc:	d4 fe       	sbrs	r13, 4
    84fe:	e5 e9       	ldi	r30, 0x95	; 149
    8500:	f9 f8       	.word	0xf8f9	; ????
    8502:	f9 f5       	brne	.+126    	; 0x8582 <waves+0x882>
    8504:	eb e1       	ldi	r30, 0x1B	; 27
    8506:	dd de       	rcall	.-582    	; 0x82c2 <waves+0x5c2>
    8508:	e0 e2       	ldi	r30, 0x20	; 32
    850a:	e4 e5       	ldi	r30, 0x54	; 84
    850c:	e6 e5       	ldi	r30, 0x56	; 86
    850e:	e4 e2       	ldi	r30, 0x24	; 36
    8510:	de d9       	rcall	.-3140   	; 0x78ce <ProcessMusic+0x31c>
    8512:	d2 ca       	rjmp	.-2652   	; 0x7ab8 <esmw+0x4e>
    8514:	c1 b7       	in	r28, 0x31	; 49
    8516:	ac a2       	std	Y+36, r10	; 0x24
    8518:	99 91       	ld	r25, Y+
    851a:	8a 86       	std	Y+10, r8	; 0x0a
    851c:	83 81       	ldd	r24, Z+3	; 0x03
    851e:	80 80       	ld	r8, Z
    8520:	81 82       	std	Z+1, r8	; 0x01
    8522:	83 85       	ldd	r24, Z+11	; 0x0b
    8524:	86 88       	ldd	r8, Z+22	; 0x16
    8526:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8528:	8d 8f       	std	Y+29, r24	; 0x1d
    852a:	90 92 93 95 	sts	0x9593, r9
    852e:	96 97       	sbiw	r26, 0x26	; 38
    8530:	98 99       	sbic	0x13, 0	; 19
    8532:	9a 9b       	sbis	0x13, 2	; 19
    8534:	9b 9c       	mul	r9, r11
    8536:	9d 9d       	mul	r25, r13
    8538:	9d 9e       	mul	r9, r29
    853a:	9e 9e       	mul	r9, r30
    853c:	9f 9f       	mul	r25, r31
    853e:	9f 9f       	mul	r25, r31
    8540:	9f 9f       	mul	r25, r31
    8542:	9f 9e       	mul	r9, r31
    8544:	9e 9e       	mul	r9, r30
    8546:	9d 9d       	mul	r25, r13
    8548:	9d 9c       	mul	r9, r13
    854a:	9b 9b       	sbis	0x13, 3	; 19
    854c:	9a 99       	sbic	0x13, 2	; 19
    854e:	98 97       	sbiw	r26, 0x28	; 40
    8550:	96 95       	lsr	r25
    8552:	93 92       	.word	0x9293	; ????
    8554:	90 8f       	std	Z+24, r25	; 0x18
    8556:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8558:	8a 88       	ldd	r8, Y+18	; 0x12
    855a:	86 85       	ldd	r24, Z+14	; 0x0e
    855c:	83 82       	std	Z+3, r8	; 0x03
    855e:	81 80       	ldd	r8, Z+1	; 0x01
    8560:	80 81       	ld	r24, Z
    8562:	83 86       	std	Z+11, r8	; 0x0b
    8564:	8a 91       	ld	r24, -Y
    8566:	99 a2       	std	Y+33, r9	; 0x21
    8568:	ac b7       	in	r26, 0x3c	; 60
    856a:	c1 ca       	rjmp	.-2686   	; 0x7aee <esmw+0x84>
    856c:	d2 d9       	rcall	.-3164   	; 0x7912 <ProcessMusic+0x360>
    856e:	de e2       	ldi	r29, 0x2E	; 46
    8570:	e4 e5       	ldi	r30, 0x54	; 84
    8572:	e6 e5       	ldi	r30, 0x56	; 86
    8574:	e4 e2       	ldi	r30, 0x24	; 36
    8576:	e0 de       	rcall	.-576    	; 0x8338 <waves+0x638>
    8578:	dd e1       	ldi	r29, 0x1D	; 29
    857a:	eb f5       	brvc	.+122    	; 0x85f6 <waves+0x8f6>
    857c:	f9 f8       	.word	0xf8f9	; ????
    857e:	f9 00       	.word	0x00f9	; ????
    8580:	07 08       	sbc	r0, r7
    8582:	07 0b       	sbc	r16, r23
    8584:	15 1f       	adc	r17, r21
    8586:	23 22       	and	r2, r19
    8588:	20 1e       	adc	r2, r16
    858a:	1c 1b       	sub	r17, r28
    858c:	1a 1b       	sub	r17, r26
    858e:	1c 1e       	adc	r1, r28
    8590:	22 27       	eor	r18, r18
    8592:	2e 36       	cpi	r18, 0x6E	; 110
    8594:	3f 49       	sbci	r19, 0x9F	; 159
    8596:	54 5e       	subi	r21, 0xE4	; 228
    8598:	67 6f       	ori	r22, 0xF7	; 247
    859a:	76 7a       	andi	r23, 0xA6	; 166
    859c:	7e 7f       	andi	r23, 0xFE	; 254
    859e:	7f 7f       	andi	r23, 0xFF	; 255
    85a0:	7f 7e       	andi	r23, 0xEF	; 239
    85a2:	7d 7b       	andi	r23, 0xBD	; 189
    85a4:	7a 78       	andi	r23, 0x8A	; 138
    85a6:	76 74       	andi	r23, 0x46	; 70
    85a8:	73 71       	andi	r23, 0x13	; 19
    85aa:	70 6e       	ori	r23, 0xE0	; 224
    85ac:	6d 6b       	ori	r22, 0xBD	; 189
    85ae:	6a 69       	ori	r22, 0x9A	; 154
    85b0:	68 67       	ori	r22, 0x78	; 120
    85b2:	66 65       	ori	r22, 0x56	; 86
    85b4:	65 64       	ori	r22, 0x45	; 69
    85b6:	64 63       	ori	r22, 0x34	; 52
    85b8:	63 62       	ori	r22, 0x23	; 35
    85ba:	62 62       	ori	r22, 0x22	; 34
    85bc:	61 61       	ori	r22, 0x11	; 17
    85be:	61 61       	ori	r22, 0x11	; 17
    85c0:	61 61       	ori	r22, 0x11	; 17
    85c2:	61 62       	ori	r22, 0x21	; 33
    85c4:	62 62       	ori	r22, 0x22	; 34
    85c6:	63 63       	ori	r22, 0x33	; 51
    85c8:	63 64       	ori	r22, 0x43	; 67
    85ca:	65 65       	ori	r22, 0x55	; 85
    85cc:	66 67       	ori	r22, 0x76	; 118
    85ce:	68 69       	ori	r22, 0x98	; 152
    85d0:	6a 6b       	ori	r22, 0xBA	; 186
    85d2:	6d 6e       	ori	r22, 0xED	; 237
    85d4:	70 71       	andi	r23, 0x10	; 16
    85d6:	73 74       	andi	r23, 0x43	; 67
    85d8:	76 78       	andi	r23, 0x86	; 134
    85da:	7a 7b       	andi	r23, 0xBA	; 186
    85dc:	7d 7e       	andi	r23, 0xED	; 237
    85de:	7f 7f       	andi	r23, 0xFF	; 255
    85e0:	7f 7f       	andi	r23, 0xFF	; 255
    85e2:	7e 7a       	andi	r23, 0xAE	; 174
    85e4:	76 6f       	ori	r23, 0xF6	; 246
    85e6:	67 5e       	subi	r22, 0xE7	; 231
    85e8:	54 49       	sbci	r21, 0x94	; 148
    85ea:	3f 36       	cpi	r19, 0x6F	; 111
    85ec:	2e 27       	eor	r18, r30
    85ee:	22 1e       	adc	r2, r18
    85f0:	1c 1b       	sub	r17, r28
    85f2:	1a 1b       	sub	r17, r26
    85f4:	1c 1e       	adc	r1, r28
    85f6:	20 22       	and	r2, r16
    85f8:	23 1f       	adc	r18, r19
    85fa:	15 0b       	sbc	r17, r21
    85fc:	07 08       	sbc	r0, r7
    85fe:	07 00       	.word	0x0007	; ????
    8600:	1f 31       	cpi	r17, 0x1F	; 31
    8602:	3d 44       	sbci	r19, 0x4D	; 77
    8604:	4e 53       	subi	r20, 0x3E	; 62
    8606:	54 56       	subi	r21, 0x64	; 100
    8608:	5a 5f       	subi	r21, 0xFA	; 250
    860a:	64 69       	ori	r22, 0x94	; 148
    860c:	6e 74       	andi	r22, 0x4E	; 78
    860e:	76 79       	andi	r23, 0x96	; 150
    8610:	7c 7f       	andi	r23, 0xFC	; 252
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7c       	andi	r23, 0xCF	; 207
    867c:	78 71       	andi	r23, 0x18	; 24
    867e:	68 4c       	sbci	r22, 0xC8	; 200
    8680:	2c 1c       	adc	r2, r12
    8682:	12 0c       	add	r1, r2
    8684:	0a 0b       	sbc	r16, r26
    8686:	0a 05       	cpc	r16, r10
    8688:	fd f3       	brhs	.-2      	; 0x8688 <waves+0x988>
    868a:	e9 df       	rcall	.-46     	; 0x865e <waves+0x95e>
    868c:	d4 ca       	rjmp	.-2648   	; 0x7c36 <steptable+0x12e>
    868e:	c0 b7       	in	r28, 0x30	; 48
    8690:	ae a6       	std	Y+46, r10	; 0x2e
    8692:	9e 97       	sbiw	r26, 0x2e	; 46
    8694:	91 8b       	std	Z+17, r25	; 0x11
    8696:	86 85       	ldd	r24, Z+14	; 0x0e
    8698:	82 80       	ldd	r8, Z+2	; 0x02
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 87       	std	Z+8, r24	; 0x08
    86f6:	91 9d       	mul	r25, r1
    86f8:	ac c4       	rjmp	.+2392   	; 0x9052 <set_shot_animations+0x5e>
    86fa:	cb d4       	rcall	.+2454   	; 0x9092 <init_player+0x3c>
    86fc:	dd f2       	brhs	.-74     	; 0x86b4 <waves+0x9b4>
    86fe:	fa fa       	.word	0xfafa	; ????

00008700 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8700:	90 91 b7 0b 	lds	r25, 0x0BB7
    8704:	e8 e9       	ldi	r30, 0x98	; 152
    8706:	fa e0       	ldi	r31, 0x0A	; 10
    8708:	80 e0       	ldi	r24, 0x00	; 0
    870a:	89 17       	cp	r24, r25
    870c:	49 f0       	breq	.+18     	; 0x8720 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    870e:	a0 81       	ld	r26, Z
    8710:	b1 81       	ldd	r27, Z+1	; 0x01
    8712:	a0 5a       	subi	r26, 0xA0	; 160
    8714:	be 4f       	sbci	r27, 0xFE	; 254
    8716:	22 81       	ldd	r18, Z+2	; 0x02
    8718:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    871a:	8f 5f       	subi	r24, 0xFF	; 255
    871c:	33 96       	adiw	r30, 0x03	; 3
    871e:	f5 cf       	rjmp	.-22     	; 0x870a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8720:	08 95       	ret

00008722 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8722:	80 93 00 01 	sts	0x0100, r24
    8726:	08 95       	ret

00008728 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8728:	2f 92       	push	r2
    872a:	3f 92       	push	r3
    872c:	4f 92       	push	r4
    872e:	5f 92       	push	r5
    8730:	6f 92       	push	r6
    8732:	7f 92       	push	r7
    8734:	8f 92       	push	r8
    8736:	9f 92       	push	r9
    8738:	af 92       	push	r10
    873a:	bf 92       	push	r11
    873c:	cf 92       	push	r12
    873e:	df 92       	push	r13
    8740:	ef 92       	push	r14
    8742:	ff 92       	push	r15
    8744:	0f 93       	push	r16
    8746:	1f 93       	push	r17
    8748:	cf 93       	push	r28
    874a:	df 93       	push	r29
    874c:	00 d0       	rcall	.+0      	; 0x874e <ProcessSprites+0x26>
    874e:	1f 92       	push	r1
    8750:	cd b7       	in	r28, 0x3d	; 61
    8752:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8754:	10 92 b7 0b 	sts	0x0BB7, r1
		if(!spritesOn) return;
    8758:	80 91 00 01 	lds	r24, 0x0100
    875c:	88 23       	and	r24, r24
    875e:	09 f4       	brne	.+2      	; 0x8762 <ProcessSprites+0x3a>
    8760:	a1 c0       	rjmp	.+322    	; 0x88a4 <ProcessSprites+0x17c>
    8762:	e8 ea       	ldi	r30, 0xA8	; 168
    8764:	ce 2e       	mov	r12, r30
    8766:	e4 e0       	ldi	r30, 0x04	; 4
    8768:	de 2e       	mov	r13, r30
    876a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    876c:	f6 01       	movw	r30, r12
    876e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8770:	80 3f       	cpi	r24, 0xF0	; 240
    8772:	09 f4       	brne	.+2      	; 0x8776 <ProcessSprites+0x4e>
    8774:	79 c0       	rjmp	.+242    	; 0x8868 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8776:	91 81       	ldd	r25, Z+1	; 0x01
    8778:	29 2f       	mov	r18, r25
    877a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    877c:	28 2e       	mov	r2, r24
    877e:	26 94       	lsr	r2
    8780:	26 94       	lsr	r2
    8782:	26 94       	lsr	r2
				dx=ssx&0x7;
    8784:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8786:	19 f0       	breq	.+6      	; 0x878e <ProcessSprites+0x66>
    8788:	72 e0       	ldi	r23, 0x02	; 2
    878a:	47 2e       	mov	r4, r23
    878c:	02 c0       	rjmp	.+4      	; 0x8792 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    878e:	44 24       	eor	r4, r4
    8790:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8792:	63 e0       	ldi	r22, 0x03	; 3
    8794:	36 95       	lsr	r19
    8796:	27 95       	ror	r18
    8798:	6a 95       	dec	r22
    879a:	e1 f7       	brne	.-8      	; 0x8794 <ProcessSprites+0x6c>
    879c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    879e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    87a0:	19 f0       	breq	.+6      	; 0x87a8 <ProcessSprites+0x80>
    87a2:	52 e0       	ldi	r21, 0x02	; 2
    87a4:	55 2e       	mov	r5, r21
    87a6:	02 c0       	rjmp	.+4      	; 0x87ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    87a8:	55 24       	eor	r5, r5
    87aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87ac:	29 2f       	mov	r18, r25
    87ae:	30 e0       	ldi	r19, 0x00	; 0
    87b0:	32 2f       	mov	r19, r18
    87b2:	22 27       	eor	r18, r18
    87b4:	a9 01       	movw	r20, r18
    87b6:	48 0f       	add	r20, r24
    87b8:	51 1d       	adc	r21, r1
    87ba:	5b 83       	std	Y+3, r21	; 0x03
    87bc:	4a 83       	std	Y+2, r20	; 0x02
    87be:	e1 2c       	mov	r14, r1
    87c0:	f1 2c       	mov	r15, r1
    87c2:	94 ee       	ldi	r25, 0xE4	; 228
    87c4:	93 0d       	add	r25, r3
    87c6:	99 83       	std	Y+1, r25	; 0x01
    87c8:	03 2d       	mov	r16, r3
    87ca:	0e 0d       	add	r16, r14
    87cc:	0c 31       	cpi	r16, 0x1C	; 28
    87ce:	10 f0       	brcs	.+4      	; 0x87d4 <ProcessSprites+0xac>
    87d0:	09 81       	ldd	r16, Y+1	; 0x01
    87d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    87d4:	5e e1       	ldi	r21, 0x1E	; 30
    87d6:	05 9f       	mul	r16, r21
    87d8:	80 01       	movw	r16, r0
    87da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    87dc:	be 2c       	mov	r11, r14
    87de:	aa 24       	eor	r10, r10
    87e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    87e2:	ed e1       	ldi	r30, 0x1D	; 29
    87e4:	e7 15       	cp	r30, r7
    87e6:	18 f4       	brcc	.+6      	; 0x87ee <ProcessSprites+0xc6>
    87e8:	82 ee       	ldi	r24, 0xE2	; 226
    87ea:	87 0d       	add	r24, r7
    87ec:	01 c0       	rjmp	.+2      	; 0x87f0 <ProcessSprites+0xc8>
    87ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    87f0:	a8 01       	movw	r20, r16
    87f2:	48 0f       	add	r20, r24
    87f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    87f6:	ca 01       	movw	r24, r20
    87f8:	80 5a       	subi	r24, 0xA0	; 160
    87fa:	9e 4f       	sbci	r25, 0xFE	; 254
    87fc:	4c 01       	movw	r8, r24
    87fe:	fc 01       	movw	r30, r24
    8800:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8802:	87 31       	cpi	r24, 0x17	; 23
    8804:	e0 f0       	brcs	.+56     	; 0x883e <ProcessSprites+0x116>
    8806:	60 91 b7 0b 	lds	r22, 0x0BB7
    880a:	67 31       	cpi	r22, 0x17	; 23
    880c:	f8 f4       	brcc	.+62     	; 0x884c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    880e:	26 2f       	mov	r18, r22
    8810:	30 e0       	ldi	r19, 0x00	; 0
    8812:	f9 01       	movw	r30, r18
    8814:	ee 0f       	add	r30, r30
    8816:	ff 1f       	adc	r31, r31
    8818:	e2 0f       	add	r30, r18
    881a:	f3 1f       	adc	r31, r19
    881c:	e8 56       	subi	r30, 0x68	; 104
    881e:	f5 4f       	sbci	r31, 0xF5	; 245
    8820:	51 83       	std	Z+1, r21	; 0x01
    8822:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8824:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8826:	0e 94 d7 34 	call	0x69ae	; 0x69ae <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    882a:	80 91 b7 0b 	lds	r24, 0x0BB7
    882e:	f4 01       	movw	r30, r8
    8830:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8832:	91 e0       	ldi	r25, 0x01	; 1
    8834:	98 0f       	add	r25, r24
    8836:	90 93 b7 0b 	sts	0x0BB7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    883a:	87 31       	cpi	r24, 0x17	; 23
    883c:	38 f4       	brcc	.+14     	; 0x884c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    883e:	2a 81       	ldd	r18, Y+2	; 0x02
    8840:	3b 81       	ldd	r19, Y+3	; 0x03
    8842:	a5 01       	movw	r20, r10
    8844:	68 2f       	mov	r22, r24
    8846:	86 2d       	mov	r24, r6
    8848:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <BlitSprite>
    884c:	ff ef       	ldi	r31, 0xFF	; 255
    884e:	af 1a       	sub	r10, r31
    8850:	bf 0a       	sbc	r11, r31
    8852:	73 94       	inc	r7
    8854:	87 2d       	mov	r24, r7
    8856:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8858:	84 15       	cp	r24, r4
    885a:	18 f2       	brcs	.-122    	; 0x87e2 <ProcessSprites+0xba>
    885c:	4f ef       	ldi	r20, 0xFF	; 255
    885e:	e4 1a       	sub	r14, r20
    8860:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8862:	e5 14       	cp	r14, r5
    8864:	08 f4       	brcc	.+2      	; 0x8868 <ProcessSprites+0x140>
    8866:	b0 cf       	rjmp	.-160    	; 0x87c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8868:	63 94       	inc	r6
    886a:	84 e0       	ldi	r24, 0x04	; 4
    886c:	c8 0e       	add	r12, r24
    886e:	d1 1c       	adc	r13, r1
    8870:	9c e0       	ldi	r25, 0x0C	; 12
    8872:	69 12       	cpse	r6, r25
    8874:	7b cf       	rjmp	.-266    	; 0x876c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8876:	0f 90       	pop	r0
    8878:	0f 90       	pop	r0
    887a:	0f 90       	pop	r0
    887c:	df 91       	pop	r29
    887e:	cf 91       	pop	r28
    8880:	1f 91       	pop	r17
    8882:	0f 91       	pop	r16
    8884:	ff 90       	pop	r15
    8886:	ef 90       	pop	r14
    8888:	df 90       	pop	r13
    888a:	cf 90       	pop	r12
    888c:	bf 90       	pop	r11
    888e:	af 90       	pop	r10
    8890:	9f 90       	pop	r9
    8892:	8f 90       	pop	r8
    8894:	7f 90       	pop	r7
    8896:	6f 90       	pop	r6
    8898:	5f 90       	pop	r5
    889a:	4f 90       	pop	r4
    889c:	3f 90       	pop	r3
    889e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    88a0:	0c 94 80 43 	jmp	0x8700	; 0x8700 <RestoreBackground>

	}
    88a4:	0f 90       	pop	r0
    88a6:	0f 90       	pop	r0
    88a8:	0f 90       	pop	r0
    88aa:	df 91       	pop	r29
    88ac:	cf 91       	pop	r28
    88ae:	1f 91       	pop	r17
    88b0:	0f 91       	pop	r16
    88b2:	ff 90       	pop	r15
    88b4:	ef 90       	pop	r14
    88b6:	df 90       	pop	r13
    88b8:	cf 90       	pop	r12
    88ba:	bf 90       	pop	r11
    88bc:	af 90       	pop	r10
    88be:	9f 90       	pop	r9
    88c0:	8f 90       	pop	r8
    88c2:	7f 90       	pop	r7
    88c4:	6f 90       	pop	r6
    88c6:	5f 90       	pop	r5
    88c8:	4f 90       	pop	r4
    88ca:	3f 90       	pop	r3
    88cc:	2f 90       	pop	r2
    88ce:	08 95       	ret

000088d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    88d0:	df 92       	push	r13
    88d2:	ef 92       	push	r14
    88d4:	ff 92       	push	r15
    88d6:	0f 93       	push	r16
    88d8:	1f 93       	push	r17
    88da:	cf 93       	push	r28
    88dc:	df 93       	push	r29
    88de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    88e0:	fb 01       	movw	r30, r22
    88e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    88e4:	31 96       	adiw	r30, 0x01	; 1
    88e6:	64 91       	lpm	r22, Z
    88e8:	5f ef       	ldi	r21, 0xFF	; 255
    88ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    88ec:	24 2f       	mov	r18, r20
    88ee:	21 70       	andi	r18, 0x01	; 1
    88f0:	40 ff       	sbrs	r20, 0
    88f2:	04 c0       	rjmp	.+8      	; 0x88fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    88f4:	95 2f       	mov	r25, r21
			dx=-1;
    88f6:	ff 24       	eor	r15, r15
    88f8:	fa 94       	dec	r15
    88fa:	03 c0       	rjmp	.+6      	; 0x8902 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    88fc:	ff 24       	eor	r15, r15
    88fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8900:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8902:	41 ff       	sbrs	r20, 1
    8904:	05 c0       	rjmp	.+10     	; 0x8910 <MapSprite2+0x40>
			y=(mapHeight-1);
    8906:	7f ef       	ldi	r23, 0xFF	; 255
    8908:	76 0f       	add	r23, r22
			dy=-1;
    890a:	ee 24       	eor	r14, r14
    890c:	ea 94       	dec	r14
    890e:	03 c0       	rjmp	.+6      	; 0x8916 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8910:	ee 24       	eor	r14, r14
    8912:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8914:	70 e0       	ldi	r23, 0x00	; 0
    8916:	21 11       	cpse	r18, r1
    8918:	01 c0       	rjmp	.+2      	; 0x891c <MapSprite2+0x4c>
    891a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    891c:	00 e0       	ldi	r16, 0x00	; 0
    891e:	06 17       	cp	r16, r22
    8920:	09 f1       	breq	.+66     	; 0x8964 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8922:	71 03       	mulsu	r23, r17
    8924:	e0 01       	movw	r28, r0
    8926:	11 24       	eor	r1, r1
    8928:	d8 2e       	mov	r13, r24
    892a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    892c:	8d 15       	cp	r24, r13
    892e:	b1 f0       	breq	.+44     	; 0x895c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8930:	9e 01       	movw	r18, r28
    8932:	29 0f       	add	r18, r25
    8934:	31 1d       	adc	r19, r1
    8936:	97 fd       	sbrc	r25, 7
    8938:	3a 95       	dec	r19
    893a:	2e 5f       	subi	r18, 0xFE	; 254
    893c:	3f 4f       	sbci	r19, 0xFF	; 255
    893e:	fd 01       	movw	r30, r26
    8940:	e2 0f       	add	r30, r18
    8942:	f3 1f       	adc	r31, r19
    8944:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8946:	34 e0       	ldi	r19, 0x04	; 4
    8948:	83 9f       	mul	r24, r19
    894a:	f0 01       	movw	r30, r0
    894c:	11 24       	eor	r1, r1
    894e:	e8 55       	subi	r30, 0x58	; 88
    8950:	fb 4f       	sbci	r31, 0xFB	; 251
    8952:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8954:	8f 5f       	subi	r24, 0xFF	; 255
    8956:	43 83       	std	Z+3, r20	; 0x03
    8958:	9f 0d       	add	r25, r15
    895a:	e8 cf       	rjmp	.-48     	; 0x892c <MapSprite2+0x5c>
    895c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    895e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8960:	95 2f       	mov	r25, r21
    8962:	dd cf       	rjmp	.-70     	; 0x891e <MapSprite2+0x4e>
	    }
	}
    8964:	df 91       	pop	r29
    8966:	cf 91       	pop	r28
    8968:	1f 91       	pop	r17
    896a:	0f 91       	pop	r16
    896c:	ff 90       	pop	r15
    896e:	ef 90       	pop	r14
    8970:	df 90       	pop	r13
    8972:	08 95       	ret

00008974 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8974:	0f 93       	push	r16
    8976:	cf 93       	push	r28
    8978:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    897a:	30 e0       	ldi	r19, 0x00	; 0
    897c:	30 17       	cp	r19, r16
    897e:	e1 f0       	breq	.+56     	; 0x89b8 <MoveSprite+0x44>
    8980:	b4 2f       	mov	r27, r20
    8982:	a0 e2       	ldi	r26, 0x20	; 32
    8984:	a4 0f       	add	r26, r20
    8986:	78 2f       	mov	r23, r24
    8988:	72 0f       	add	r23, r18
    898a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    898c:	87 17       	cp	r24, r23
    898e:	81 f0       	breq	.+32     	; 0x89b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8990:	c4 e0       	ldi	r28, 0x04	; 4
    8992:	8c 9f       	mul	r24, r28
    8994:	f0 01       	movw	r30, r0
    8996:	11 24       	eor	r1, r1
    8998:	e8 55       	subi	r30, 0x58	; 88
    899a:	fb 4f       	sbci	r31, 0xFB	; 251
    899c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    899e:	41 3e       	cpi	r20, 0xE1	; 225
    89a0:	51 05       	cpc	r21, r1
    89a2:	14 f0       	brlt	.+4      	; 0x89a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    89a4:	a1 83       	std	Z+1, r26	; 0x01
    89a6:	01 c0       	rjmp	.+2      	; 0x89aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    89a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    89aa:	8f 5f       	subi	r24, 0xFF	; 255
    89ac:	98 5f       	subi	r25, 0xF8	; 248
    89ae:	ee cf       	rjmp	.-36     	; 0x898c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    89b0:	3f 5f       	subi	r19, 0xFF	; 255
    89b2:	48 5f       	subi	r20, 0xF8	; 248
    89b4:	5f 4f       	sbci	r21, 0xFF	; 255
    89b6:	e2 cf       	rjmp	.-60     	; 0x897c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    89b8:	cf 91       	pop	r28
    89ba:	0f 91       	pop	r16
    89bc:	08 95       	ret

000089be <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    89be:	08 95       	ret

000089c0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    89c0:	e8 ea       	ldi	r30, 0xA8	; 168
    89c2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    89c4:	80 ef       	ldi	r24, 0xF0	; 240
    89c6:	80 83       	st	Z, r24
    89c8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    89ca:	94 e0       	ldi	r25, 0x04	; 4
    89cc:	e8 3d       	cpi	r30, 0xD8	; 216
    89ce:	f9 07       	cpc	r31, r25
    89d0:	d1 f7       	brne	.-12     	; 0x89c6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    89d2:	08 95       	ret

000089d4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    89d4:	4f 92       	push	r4
    89d6:	5f 92       	push	r5
    89d8:	6f 92       	push	r6
    89da:	7f 92       	push	r7
    89dc:	8f 92       	push	r8
    89de:	9f 92       	push	r9
    89e0:	af 92       	push	r10
    89e2:	bf 92       	push	r11
    89e4:	cf 92       	push	r12
    89e6:	df 92       	push	r13
    89e8:	ef 92       	push	r14
    89ea:	ff 92       	push	r15
    89ec:	0f 93       	push	r16
    89ee:	1f 93       	push	r17
    89f0:	cf 93       	push	r28
    89f2:	df 93       	push	r29
    89f4:	68 2e       	mov	r6, r24
    89f6:	56 2e       	mov	r5, r22
    89f8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    89fa:	fa 01       	movw	r30, r20
    89fc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    89fe:	31 96       	adiw	r30, 0x01	; 1
    8a00:	84 90       	lpm	r8, Z
    8a02:	c7 2c       	mov	r12, r7
    8a04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8a06:	00 e0       	ldi	r16, 0x00	; 0
    8a08:	10 e0       	ldi	r17, 0x00	; 0
    8a0a:	91 2c       	mov	r9, r1
    8a0c:	98 14       	cp	r9, r8
    8a0e:	f1 f0       	breq	.+60     	; 0x8a4c <DrawMap2+0x78>
    8a10:	c0 e0       	ldi	r28, 0x00	; 0
    8a12:	d0 e0       	ldi	r29, 0x00	; 0
    8a14:	58 01       	movw	r10, r16
    8a16:	f2 e0       	ldi	r31, 0x02	; 2
    8a18:	af 0e       	add	r10, r31
    8a1a:	b1 1c       	adc	r11, r1
    8a1c:	49 2c       	mov	r4, r9
    8a1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8a20:	c7 15       	cp	r28, r7
    8a22:	80 f4       	brcc	.+32     	; 0x8a44 <DrawMap2+0x70>
    8a24:	95 01       	movw	r18, r10
    8a26:	2c 0f       	add	r18, r28
    8a28:	3d 1f       	adc	r19, r29
    8a2a:	f7 01       	movw	r30, r14
    8a2c:	e2 0f       	add	r30, r18
    8a2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8a30:	24 91       	lpm	r18, Z
    8a32:	42 2f       	mov	r20, r18
    8a34:	50 e0       	ldi	r21, 0x00	; 0
    8a36:	64 2d       	mov	r22, r4
    8a38:	8c 2f       	mov	r24, r28
    8a3a:	86 0d       	add	r24, r6
    8a3c:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
    8a40:	21 96       	adiw	r28, 0x01	; 1
    8a42:	ee cf       	rjmp	.-36     	; 0x8a20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8a44:	93 94       	inc	r9
    8a46:	0c 0d       	add	r16, r12
    8a48:	1d 1d       	adc	r17, r13
    8a4a:	e0 cf       	rjmp	.-64     	; 0x8a0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8a4c:	df 91       	pop	r29
    8a4e:	cf 91       	pop	r28
    8a50:	1f 91       	pop	r17
    8a52:	0f 91       	pop	r16
    8a54:	ff 90       	pop	r15
    8a56:	ef 90       	pop	r14
    8a58:	df 90       	pop	r13
    8a5a:	cf 90       	pop	r12
    8a5c:	bf 90       	pop	r11
    8a5e:	af 90       	pop	r10
    8a60:	9f 90       	pop	r9
    8a62:	8f 90       	pop	r8
    8a64:	7f 90       	pop	r7
    8a66:	6f 90       	pop	r6
    8a68:	5f 90       	pop	r5
    8a6a:	4f 90       	pop	r4
    8a6c:	08 95       	ret

00008a6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8a6e:	df 92       	push	r13
    8a70:	ef 92       	push	r14
    8a72:	ff 92       	push	r15
    8a74:	0f 93       	push	r16
    8a76:	1f 93       	push	r17
    8a78:	cf 93       	push	r28
    8a7a:	df 93       	push	r29
    8a7c:	f6 2e       	mov	r15, r22
    8a7e:	04 2f       	mov	r16, r20
    8a80:	d2 2e       	mov	r13, r18
    8a82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8a84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8a86:	8a e0       	ldi	r24, 0x0A	; 10
    8a88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8a8a:	01 11       	cpse	r16, r1
    8a8c:	02 c0       	rjmp	.+4      	; 0x8a92 <PrintByte+0x24>
    8a8e:	11 11       	cpse	r17, r1
    8a90:	07 c0       	rjmp	.+14     	; 0x8aa0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8a92:	80 2f       	mov	r24, r16
    8a94:	6e 2d       	mov	r22, r14
    8a96:	0e 94 a0 58 	call	0xb140	; 0xb140 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8a9a:	40 e1       	ldi	r20, 0x10	; 16
    8a9c:	49 0f       	add	r20, r25
    8a9e:	05 c0       	rjmp	.+10     	; 0x8aaa <PrintByte+0x3c>
		}else{
			if(zeropad){
    8aa0:	dd 20       	and	r13, r13
    8aa2:	11 f0       	breq	.+4      	; 0x8aa8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8aa4:	40 e1       	ldi	r20, 0x10	; 16
    8aa6:	01 c0       	rjmp	.+2      	; 0x8aaa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8aa8:	40 e0       	ldi	r20, 0x00	; 0
    8aaa:	6f 2d       	mov	r22, r15
    8aac:	8c 2f       	mov	r24, r28
    8aae:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SetFont>
			}
		}
		val=val/10;
    8ab2:	80 2f       	mov	r24, r16
    8ab4:	6e 2d       	mov	r22, r14
    8ab6:	0e 94 a0 58 	call	0xb140	; 0xb140 <__udivmodqi4>
    8aba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8abc:	1f 5f       	subi	r17, 0xFF	; 255
    8abe:	21 97       	sbiw	r28, 0x01	; 1
    8ac0:	13 30       	cpi	r17, 0x03	; 3
    8ac2:	19 f7       	brne	.-58     	; 0x8a8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8ac4:	df 91       	pop	r29
    8ac6:	cf 91       	pop	r28
    8ac8:	1f 91       	pop	r17
    8aca:	0f 91       	pop	r16
    8acc:	ff 90       	pop	r15
    8ace:	ef 90       	pop	r14
    8ad0:	df 90       	pop	r13
    8ad2:	08 95       	ret

00008ad4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8ad4:	0f 93       	push	r16
    8ad6:	1f 93       	push	r17
    8ad8:	cf 93       	push	r28
    8ada:	df 93       	push	r29
    8adc:	06 2f       	mov	r16, r22
    8ade:	c4 2f       	mov	r28, r20
    8ae0:	d5 2f       	mov	r29, r21
    8ae2:	18 2f       	mov	r17, r24
    8ae4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8ae6:	fe 01       	movw	r30, r28
    8ae8:	44 91       	lpm	r20, Z
		if(c!=0){
    8aea:	44 23       	and	r20, r20
    8aec:	49 f0       	breq	.+18     	; 0x8b00 <Print+0x2c>
			c=((c&127)-32);			
    8aee:	4f 77       	andi	r20, 0x7F	; 127
    8af0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8af2:	60 2f       	mov	r22, r16
    8af4:	8c 2f       	mov	r24, r28
    8af6:	81 0f       	add	r24, r17
    8af8:	0e 94 98 37 	call	0x6f30	; 0x6f30 <SetFont>
    8afc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8afe:	f3 cf       	rjmp	.-26     	; 0x8ae6 <Print+0x12>
	
}
    8b00:	df 91       	pop	r29
    8b02:	cf 91       	pop	r28
    8b04:	1f 91       	pop	r17
    8b06:	0f 91       	pop	r16
    8b08:	08 95       	ret

00008b0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    8b0a:	40 52       	subi	r20, 0x20	; 32
    8b0c:	0c 94 98 37 	jmp	0x6f30	; 0x6f30 <SetFont>

00008b10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8b10:	0f 93       	push	r16
    8b12:	1f 93       	push	r17
    8b14:	cf 93       	push	r28
    8b16:	df 93       	push	r29
    8b18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b1a:	c0 e0       	ldi	r28, 0x00	; 0
    8b1c:	d0 e0       	ldi	r29, 0x00	; 0
    8b1e:	c0 17       	cp	r28, r16
    8b20:	d1 07       	cpc	r29, r17
    8b22:	44 f4       	brge	.+16     	; 0x8b34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8b24:	0e 94 b2 37 	call	0x6f64	; 0x6f64 <GetVsyncFlag>
    8b28:	88 23       	and	r24, r24
    8b2a:	e1 f3       	breq	.-8      	; 0x8b24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    8b2c:	0e 94 b6 37 	call	0x6f6c	; 0x6f6c <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8b30:	21 96       	adiw	r28, 0x01	; 1
    8b32:	f5 cf       	rjmp	.-22     	; 0x8b1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8b34:	df 91       	pop	r29
    8b36:	cf 91       	pop	r28
    8b38:	1f 91       	pop	r17
    8b3a:	0f 91       	pop	r16
    8b3c:	08 95       	ret

00008b3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    8b3e:	80 93 b5 0b 	sts	0x0BB5, r24
	currFadeFrame=0;
    8b42:	10 92 b9 0b 	sts	0x0BB9, r1
	fadeActive=true;
    8b46:	81 e0       	ldi	r24, 0x01	; 1
    8b48:	80 93 b8 0b 	sts	0x0BB8, r24
		
	if(blocking){
    8b4c:	66 23       	and	r22, r22
    8b4e:	21 f0       	breq	.+8      	; 0x8b58 <doFade+0x1a>
		while(fadeActive==true);
    8b50:	80 91 b8 0b 	lds	r24, 0x0BB8
    8b54:	81 11       	cpse	r24, r1
    8b56:	fc cf       	rjmp	.-8      	; 0x8b50 <doFade+0x12>
    8b58:	08 95       	ret

00008b5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    8b5a:	81 11       	cpse	r24, r1
    8b5c:	03 c0       	rjmp	.+6      	; 0x8b64 <FadeIn+0xa>
		DDRC=0xff;
    8b5e:	8f ef       	ldi	r24, 0xFF	; 255
    8b60:	87 b9       	out	0x07, r24	; 7
		return;
    8b62:	08 95       	ret
	}
	fadeStep=1;
    8b64:	91 e0       	ldi	r25, 0x01	; 1
    8b66:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=1;
    8b6a:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8b6e:	0c 94 9f 45 	jmp	0x8b3e	; 0x8b3e <doFade>

00008b72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8b72:	81 11       	cpse	r24, r1
    8b74:	02 c0       	rjmp	.+4      	; 0x8b7a <FadeOut+0x8>
		DDRC=0;
    8b76:	17 b8       	out	0x07, r1	; 7
		return;
    8b78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    8b7a:	9c e0       	ldi	r25, 0x0C	; 12
    8b7c:	90 93 ba 0b 	sts	0x0BBA, r25
	fadeDir=-1;
    8b80:	9f ef       	ldi	r25, 0xFF	; 255
    8b82:	90 93 b6 0b 	sts	0x0BB6, r25
	doFade(speed,blocking);
    8b86:	0c 94 9f 45 	jmp	0x8b3e	; 0x8b3e <doFade>

00008b8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    8b8a:	80 91 b8 0b 	lds	r24, 0x0BB8
    8b8e:	88 23       	and	r24, r24
    8b90:	01 f1       	breq	.+64     	; 0x8bd2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8b92:	80 91 b9 0b 	lds	r24, 0x0BB9
    8b96:	81 11       	cpse	r24, r1
    8b98:	19 c0       	rjmp	.+50     	; 0x8bcc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    8b9a:	80 91 b5 0b 	lds	r24, 0x0BB5
    8b9e:	80 93 b9 0b 	sts	0x0BB9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    8ba2:	e0 91 ba 0b 	lds	r30, 0x0BBA
    8ba6:	f0 e0       	ldi	r31, 0x00	; 0
    8ba8:	e7 51       	subi	r30, 0x17	; 23
    8baa:	ff 4f       	sbci	r31, 0xFF	; 255
    8bac:	e4 91       	lpm	r30, Z
    8bae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    8bb0:	90 91 b6 0b 	lds	r25, 0x0BB6
    8bb4:	80 91 ba 0b 	lds	r24, 0x0BBA
    8bb8:	89 0f       	add	r24, r25
    8bba:	80 93 ba 0b 	sts	0x0BBA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    8bbe:	88 23       	and	r24, r24
    8bc0:	11 f0       	breq	.+4      	; 0x8bc6 <ProcessFading+0x3c>
    8bc2:	8d 30       	cpi	r24, 0x0D	; 13
    8bc4:	31 f4       	brne	.+12     	; 0x8bd2 <ProcessFading+0x48>
				fadeActive=false;
    8bc6:	10 92 b8 0b 	sts	0x0BB8, r1
    8bca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    8bcc:	81 50       	subi	r24, 0x01	; 1
    8bce:	80 93 b9 0b 	sts	0x0BB9, r24
    8bd2:	08 95       	ret

00008bd4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    8bd4:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <ProcessFading>
		ProcessSprites();
    8bd8:	0c 94 94 43 	jmp	0x8728	; 0x8728 <ProcessSprites>

00008bdc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    8bdc:	cf 93       	push	r28
    8bde:	df 93       	push	r29
    8be0:	fc 01       	movw	r30, r24
    8be2:	eb 01       	movw	r28, r22
	*looped = 0;
    8be4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    8be6:	93 81       	ldd	r25, Z+3	; 0x03
    8be8:	9f 5f       	subi	r25, 0xFF	; 255
    8bea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    8bec:	22 81       	ldd	r18, Z+2	; 0x02
    8bee:	80 81       	ld	r24, Z
    8bf0:	92 17       	cp	r25, r18
    8bf2:	70 f0       	brcs	.+28     	; 0x8c10 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    8bf4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    8bf6:	90 e0       	ldi	r25, 0x00	; 0
    8bf8:	01 96       	adiw	r24, 0x01	; 1
    8bfa:	21 81       	ldd	r18, Z+1	; 0x01
    8bfc:	62 2f       	mov	r22, r18
    8bfe:	70 e0       	ldi	r23, 0x00	; 0
    8c00:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    8c04:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8c06:	81 11       	cpse	r24, r1
    8c08:	02 c0       	rjmp	.+4      	; 0x8c0e <LBGetNextFrame+0x32>
    8c0a:	81 e0       	ldi	r24, 0x01	; 1
    8c0c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    8c0e:	80 81       	ld	r24, Z
    8c10:	e8 0f       	add	r30, r24
    8c12:	f1 1d       	adc	r31, r1
    8c14:	e8 0f       	add	r30, r24
    8c16:	f1 1d       	adc	r31, r1
    8c18:	84 81       	ldd	r24, Z+4	; 0x04
    8c1a:	95 81       	ldd	r25, Z+5	; 0x05
}
    8c1c:	df 91       	pop	r29
    8c1e:	cf 91       	pop	r28
    8c20:	08 95       	ret

00008c22 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8c22:	0f 93       	push	r16
    8c24:	1f 93       	push	r17
    8c26:	cf 93       	push	r28
    8c28:	df 93       	push	r29
    8c2a:	8c 01       	movw	r16, r24
    8c2c:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    8c2e:	80 e0       	ldi	r24, 0x00	; 0
    8c30:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <ReadJoypad>
    8c34:	f8 01       	movw	r30, r16
    8c36:	95 83       	std	Z+5, r25	; 0x05
    8c38:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    8c3a:	20 91 34 0b 	lds	r18, 0x0B34
    8c3e:	30 91 35 0b 	lds	r19, 0x0B35
    8c42:	a9 01       	movw	r20, r18
    8c44:	40 95       	com	r20
    8c46:	50 95       	com	r21
    8c48:	48 23       	and	r20, r24
    8c4a:	59 23       	and	r21, r25
    8c4c:	51 83       	std	Z+1, r21	; 0x01
    8c4e:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8c50:	ac 01       	movw	r20, r24
    8c52:	40 95       	com	r20
    8c54:	50 95       	com	r21
    8c56:	24 23       	and	r18, r20
    8c58:	35 23       	and	r19, r21
    8c5a:	33 83       	std	Z+3, r19	; 0x03
    8c5c:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    8c5e:	90 93 35 0b 	sts	0x0B35, r25
    8c62:	80 93 34 0b 	sts	0x0B34, r24
	p2->held = ReadJoypad(1);
    8c66:	81 e0       	ldi	r24, 0x01	; 1
    8c68:	0e 94 bc 37 	call	0x6f78	; 0x6f78 <ReadJoypad>
    8c6c:	9d 83       	std	Y+5, r25	; 0x05
    8c6e:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8c70:	20 91 32 0b 	lds	r18, 0x0B32
    8c74:	30 91 33 0b 	lds	r19, 0x0B33
    8c78:	a9 01       	movw	r20, r18
    8c7a:	40 95       	com	r20
    8c7c:	50 95       	com	r21
    8c7e:	48 23       	and	r20, r24
    8c80:	59 23       	and	r21, r25
    8c82:	59 83       	std	Y+1, r21	; 0x01
    8c84:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8c86:	ac 01       	movw	r20, r24
    8c88:	40 95       	com	r20
    8c8a:	50 95       	com	r21
    8c8c:	24 23       	and	r18, r20
    8c8e:	35 23       	and	r19, r21
    8c90:	3b 83       	std	Y+3, r19	; 0x03
    8c92:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    8c94:	90 93 33 0b 	sts	0x0B33, r25
    8c98:	80 93 32 0b 	sts	0x0B32, r24
}
    8c9c:	df 91       	pop	r29
    8c9e:	cf 91       	pop	r28
    8ca0:	1f 91       	pop	r17
    8ca2:	0f 91       	pop	r16
    8ca4:	08 95       	ret

00008ca6 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    8ca6:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    8ca8:	fb 01       	movw	r30, r22
    8caa:	2e 2f       	mov	r18, r30
    8cac:	23 1b       	sub	r18, r19
    8cae:	24 17       	cp	r18, r20
    8cb0:	28 f4       	brcc	.+10     	; 0x8cbc <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    8cb2:	21 91       	ld	r18, Z+
    8cb4:	dc 01       	movw	r26, r24
    8cb6:	2d 93       	st	X+, r18
    8cb8:	cd 01       	movw	r24, r26
    8cba:	f7 cf       	rjmp	.-18     	; 0x8caa <LBCopyChars+0x4>
	}
}
    8cbc:	08 95       	ret

00008cbe <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    8cbe:	af 92       	push	r10
    8cc0:	bf 92       	push	r11
    8cc2:	cf 92       	push	r12
    8cc4:	df 92       	push	r13
    8cc6:	ef 92       	push	r14
    8cc8:	ff 92       	push	r15
    8cca:	0f 93       	push	r16
    8ccc:	1f 93       	push	r17
    8cce:	cf 93       	push	r28
    8cd0:	df 93       	push	r29
    8cd2:	1f 92       	push	r1
    8cd4:	cd b7       	in	r28, 0x3d	; 61
    8cd6:	de b7       	in	r29, 0x3e	; 62
    8cd8:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    8cda:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    8cdc:	c6 2e       	mov	r12, r22
    8cde:	d1 2c       	mov	r13, r1
    8ce0:	90 e0       	ldi	r25, 0x00	; 0
    8ce2:	5c 01       	movw	r10, r24
    8ce4:	a4 1a       	sub	r10, r20
    8ce6:	b5 0a       	sbc	r11, r21
    8ce8:	80 2f       	mov	r24, r16
    8cea:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    8cec:	82 17       	cp	r24, r18
    8cee:	60 f4       	brcc	.+24     	; 0x8d08 <LBPrintStr+0x4a>
    8cf0:	c5 01       	movw	r24, r10
    8cf2:	80 0f       	add	r24, r16
    8cf4:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    8cf6:	f8 01       	movw	r30, r16
    8cf8:	41 91       	ld	r20, Z+
    8cfa:	8f 01       	movw	r16, r30
    8cfc:	b6 01       	movw	r22, r12
    8cfe:	29 83       	std	Y+1, r18	; 0x01
    8d00:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
    8d04:	29 81       	ldd	r18, Y+1	; 0x01
    8d06:	f0 cf       	rjmp	.-32     	; 0x8ce8 <LBPrintStr+0x2a>
	}
}
    8d08:	0f 90       	pop	r0
    8d0a:	df 91       	pop	r29
    8d0c:	cf 91       	pop	r28
    8d0e:	1f 91       	pop	r17
    8d10:	0f 91       	pop	r16
    8d12:	ff 90       	pop	r15
    8d14:	ef 90       	pop	r14
    8d16:	df 90       	pop	r13
    8d18:	cf 90       	pop	r12
    8d1a:	bf 90       	pop	r11
    8d1c:	af 90       	pop	r10
    8d1e:	08 95       	ret

00008d20 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8d20:	af 92       	push	r10
    8d22:	cf 92       	push	r12
    8d24:	ef 92       	push	r14
    8d26:	ff 92       	push	r15
    8d28:	0f 93       	push	r16
    8d2a:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    8d2c:	70 e0       	ldi	r23, 0x00	; 0
    8d2e:	f1 2c       	mov	r15, r1
    8d30:	fb 01       	movw	r30, r22
    8d32:	e2 0f       	add	r30, r18
    8d34:	f1 1d       	adc	r31, r1
    8d36:	ee 15       	cp	r30, r14
    8d38:	ff 05       	cpc	r31, r15
    8d3a:	a4 f0       	brlt	.+40     	; 0x8d64 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    8d3c:	ea 0c       	add	r14, r10
    8d3e:	f1 1c       	adc	r15, r1
    8d40:	e6 16       	cp	r14, r22
    8d42:	f7 06       	cpc	r15, r23
    8d44:	7c f0       	brlt	.+30     	; 0x8d64 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8d46:	28 2f       	mov	r18, r24
    8d48:	30 e0       	ldi	r19, 0x00	; 0
    8d4a:	10 e0       	ldi	r17, 0x00	; 0
    8d4c:	c9 01       	movw	r24, r18
    8d4e:	84 0f       	add	r24, r20
    8d50:	91 1d       	adc	r25, r1
    8d52:	80 17       	cp	r24, r16
    8d54:	91 07       	cpc	r25, r17
    8d56:	34 f0       	brlt	.+12     	; 0x8d64 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8d58:	0c 0d       	add	r16, r12
    8d5a:	11 1d       	adc	r17, r1
    8d5c:	81 e0       	ldi	r24, 0x01	; 1
    8d5e:	02 17       	cp	r16, r18
    8d60:	13 07       	cpc	r17, r19
    8d62:	0c f4       	brge	.+2      	; 0x8d66 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8d64:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8d66:	1f 91       	pop	r17
    8d68:	0f 91       	pop	r16
    8d6a:	ff 90       	pop	r15
    8d6c:	ef 90       	pop	r14
    8d6e:	cf 90       	pop	r12
    8d70:	af 90       	pop	r10
    8d72:	08 95       	ret

00008d74 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8d74:	2f 92       	push	r2
    8d76:	3f 92       	push	r3
    8d78:	4f 92       	push	r4
    8d7a:	5f 92       	push	r5
    8d7c:	6f 92       	push	r6
    8d7e:	7f 92       	push	r7
    8d80:	8f 92       	push	r8
    8d82:	9f 92       	push	r9
    8d84:	af 92       	push	r10
    8d86:	bf 92       	push	r11
    8d88:	cf 92       	push	r12
    8d8a:	df 92       	push	r13
    8d8c:	ef 92       	push	r14
    8d8e:	ff 92       	push	r15
    8d90:	0f 93       	push	r16
    8d92:	1f 93       	push	r17
    8d94:	cf 93       	push	r28
    8d96:	df 93       	push	r29
    8d98:	00 d0       	rcall	.+0      	; 0x8d9a <LBLineIntersect+0x26>
    8d9a:	00 d0       	rcall	.+0      	; 0x8d9c <LBLineIntersect+0x28>
    8d9c:	cd b7       	in	r28, 0x3d	; 61
    8d9e:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8da0:	f1 2c       	mov	r15, r1
    8da2:	8a 2c       	mov	r8, r10
    8da4:	91 2c       	mov	r9, r1
    8da6:	8e 18       	sub	r8, r14
    8da8:	9f 08       	sbc	r9, r15
    8daa:	a8 2e       	mov	r10, r24
    8dac:	b1 2c       	mov	r11, r1
    8dae:	24 2e       	mov	r2, r20
    8db0:	31 2c       	mov	r3, r1
    8db2:	2a 18       	sub	r2, r10
    8db4:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8db6:	10 e0       	ldi	r17, 0x00	; 0
    8db8:	d1 2c       	mov	r13, r1
    8dba:	c0 1a       	sub	r12, r16
    8dbc:	d1 0a       	sbc	r13, r17
    8dbe:	46 2f       	mov	r20, r22
    8dc0:	50 e0       	ldi	r21, 0x00	; 0
    8dc2:	5c 83       	std	Y+4, r21	; 0x04
    8dc4:	4b 83       	std	Y+3, r20	; 0x03
    8dc6:	82 2f       	mov	r24, r18
    8dc8:	90 e0       	ldi	r25, 0x00	; 0
    8dca:	9a 83       	std	Y+2, r25	; 0x02
    8dcc:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8dce:	82 9c       	mul	r8, r2
    8dd0:	90 01       	movw	r18, r0
    8dd2:	83 9c       	mul	r8, r3
    8dd4:	30 0d       	add	r19, r0
    8dd6:	92 9c       	mul	r9, r2
    8dd8:	30 0d       	add	r19, r0
    8dda:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    8ddc:	ca 01       	movw	r24, r20
    8dde:	e9 81       	ldd	r30, Y+1	; 0x01
    8de0:	fa 81       	ldd	r31, Y+2	; 0x02
    8de2:	8e 1b       	sub	r24, r30
    8de4:	9f 0b       	sbc	r25, r31
    8de6:	c8 9e       	mul	r12, r24
    8de8:	b0 01       	movw	r22, r0
    8dea:	c9 9e       	mul	r12, r25
    8dec:	70 0d       	add	r23, r0
    8dee:	d8 9e       	mul	r13, r24
    8df0:	70 0d       	add	r23, r0
    8df2:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    8df4:	62 0f       	add	r22, r18
    8df6:	73 1f       	adc	r23, r19
    8df8:	88 27       	eor	r24, r24
    8dfa:	77 fd       	sbrc	r23, 7
    8dfc:	80 95       	com	r24
    8dfe:	98 2f       	mov	r25, r24
    8e00:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    8e04:	2b 01       	movw	r4, r22
    8e06:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8e08:	20 e0       	ldi	r18, 0x00	; 0
    8e0a:	30 e0       	ldi	r19, 0x00	; 0
    8e0c:	a9 01       	movw	r20, r18
    8e0e:	0e 94 3f 59 	call	0xb27e	; 0xb27e <__cmpsf2>
    8e12:	88 23       	and	r24, r24
    8e14:	09 f4       	brne	.+2      	; 0x8e18 <LBLineIntersect+0xa4>
    8e16:	6c c0       	rjmp	.+216    	; 0x8ef0 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e18:	4b 81       	ldd	r20, Y+3	; 0x03
    8e1a:	5c 81       	ldd	r21, Y+4	; 0x04
    8e1c:	4e 19       	sub	r20, r14
    8e1e:	5f 09       	sbc	r21, r15
    8e20:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e22:	0a 19       	sub	r16, r10
    8e24:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e26:	c4 9e       	mul	r12, r20
    8e28:	c0 01       	movw	r24, r0
    8e2a:	c5 9e       	mul	r12, r21
    8e2c:	90 0d       	add	r25, r0
    8e2e:	d4 9e       	mul	r13, r20
    8e30:	90 0d       	add	r25, r0
    8e32:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e34:	80 9e       	mul	r8, r16
    8e36:	b0 01       	movw	r22, r0
    8e38:	81 9e       	mul	r8, r17
    8e3a:	70 0d       	add	r23, r0
    8e3c:	90 9e       	mul	r9, r16
    8e3e:	70 0d       	add	r23, r0
    8e40:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e42:	68 0f       	add	r22, r24
    8e44:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8e46:	88 27       	eor	r24, r24
    8e48:	77 fd       	sbrc	r23, 7
    8e4a:	80 95       	com	r24
    8e4c:	98 2f       	mov	r25, r24
    8e4e:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8e52:	a3 01       	movw	r20, r6
    8e54:	92 01       	movw	r18, r4
    8e56:	0e 94 43 59 	call	0xb286	; 0xb286 <__divsf3>
    8e5a:	4b 01       	movw	r8, r22
    8e5c:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8e5e:	20 e0       	ldi	r18, 0x00	; 0
    8e60:	30 e0       	ldi	r19, 0x00	; 0
    8e62:	a9 01       	movw	r20, r18
    8e64:	0e 94 3f 59 	call	0xb27e	; 0xb27e <__cmpsf2>
    8e68:	87 fd       	sbrc	r24, 7
    8e6a:	42 c0       	rjmp	.+132    	; 0x8ef0 <LBLineIntersect+0x17c>
    8e6c:	20 e0       	ldi	r18, 0x00	; 0
    8e6e:	30 e0       	ldi	r19, 0x00	; 0
    8e70:	40 e8       	ldi	r20, 0x80	; 128
    8e72:	5f e3       	ldi	r21, 0x3F	; 63
    8e74:	c5 01       	movw	r24, r10
    8e76:	b4 01       	movw	r22, r8
    8e78:	0e 94 89 5a 	call	0xb512	; 0xb512 <__gesf2>
    8e7c:	18 16       	cp	r1, r24
    8e7e:	c4 f1       	brlt	.+112    	; 0x8ef0 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8e80:	2e 9c       	mul	r2, r14
    8e82:	b0 01       	movw	r22, r0
    8e84:	2f 9c       	mul	r2, r15
    8e86:	70 0d       	add	r23, r0
    8e88:	3e 9c       	mul	r3, r14
    8e8a:	70 0d       	add	r23, r0
    8e8c:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8e8e:	29 81       	ldd	r18, Y+1	; 0x01
    8e90:	3a 81       	ldd	r19, Y+2	; 0x02
    8e92:	8b 81       	ldd	r24, Y+3	; 0x03
    8e94:	9c 81       	ldd	r25, Y+4	; 0x04
    8e96:	28 1b       	sub	r18, r24
    8e98:	39 0b       	sbc	r19, r25
    8e9a:	20 9f       	mul	r18, r16
    8e9c:	c0 01       	movw	r24, r0
    8e9e:	21 9f       	mul	r18, r17
    8ea0:	90 0d       	add	r25, r0
    8ea2:	30 9f       	mul	r19, r16
    8ea4:	90 0d       	add	r25, r0
    8ea6:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8ea8:	68 0f       	add	r22, r24
    8eaa:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    8eac:	88 27       	eor	r24, r24
    8eae:	77 fd       	sbrc	r23, 7
    8eb0:	80 95       	com	r24
    8eb2:	98 2f       	mov	r25, r24
    8eb4:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8eb8:	a3 01       	movw	r20, r6
    8eba:	92 01       	movw	r18, r4
    8ebc:	0e 94 43 59 	call	0xb286	; 0xb286 <__divsf3>
    8ec0:	6b 01       	movw	r12, r22
    8ec2:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    8ec4:	20 e0       	ldi	r18, 0x00	; 0
    8ec6:	30 e0       	ldi	r19, 0x00	; 0
    8ec8:	a9 01       	movw	r20, r18
    8eca:	0e 94 3f 59 	call	0xb27e	; 0xb27e <__cmpsf2>
    8ece:	87 fd       	sbrc	r24, 7
    8ed0:	0f c0       	rjmp	.+30     	; 0x8ef0 <LBLineIntersect+0x17c>
    8ed2:	11 e0       	ldi	r17, 0x01	; 1
    8ed4:	20 e0       	ldi	r18, 0x00	; 0
    8ed6:	30 e0       	ldi	r19, 0x00	; 0
    8ed8:	40 e8       	ldi	r20, 0x80	; 128
    8eda:	5f e3       	ldi	r21, 0x3F	; 63
    8edc:	c7 01       	movw	r24, r14
    8ede:	b6 01       	movw	r22, r12
    8ee0:	0e 94 89 5a 	call	0xb512	; 0xb512 <__gesf2>
    8ee4:	18 16       	cp	r1, r24
    8ee6:	0c f0       	brlt	.+2      	; 0x8eea <LBLineIntersect+0x176>
    8ee8:	10 e0       	ldi	r17, 0x00	; 0
    8eea:	81 e0       	ldi	r24, 0x01	; 1
    8eec:	81 27       	eor	r24, r17
    8eee:	01 c0       	rjmp	.+2      	; 0x8ef2 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8ef0:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    8ef2:	0f 90       	pop	r0
    8ef4:	0f 90       	pop	r0
    8ef6:	0f 90       	pop	r0
    8ef8:	0f 90       	pop	r0
    8efa:	df 91       	pop	r29
    8efc:	cf 91       	pop	r28
    8efe:	1f 91       	pop	r17
    8f00:	0f 91       	pop	r16
    8f02:	ff 90       	pop	r15
    8f04:	ef 90       	pop	r14
    8f06:	df 90       	pop	r13
    8f08:	cf 90       	pop	r12
    8f0a:	bf 90       	pop	r11
    8f0c:	af 90       	pop	r10
    8f0e:	9f 90       	pop	r9
    8f10:	8f 90       	pop	r8
    8f12:	7f 90       	pop	r7
    8f14:	6f 90       	pop	r6
    8f16:	5f 90       	pop	r5
    8f18:	4f 90       	pop	r4
    8f1a:	3f 90       	pop	r3
    8f1c:	2f 90       	pop	r2
    8f1e:	08 95       	ret

00008f20 <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8f20:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8f22:	90 91 31 0b 	lds	r25, 0x0B31
    8f26:	2f ef       	ldi	r18, 0xFF	; 255
    8f28:	3f e7       	ldi	r19, 0x7F	; 127
    8f2a:	09 2e       	mov	r0, r25
    8f2c:	02 c0       	rjmp	.+4      	; 0x8f32 <LBRandom+0x12>
    8f2e:	35 95       	asr	r19
    8f30:	27 95       	ror	r18
    8f32:	0a 94       	dec	r0
    8f34:	e2 f7       	brpl	.-8      	; 0x8f2e <LBRandom+0xe>
	int delta = to - from;
    8f36:	6e 1b       	sub	r22, r30
    8f38:	7f 0b       	sbc	r23, r31

	shift_count++;
    8f3a:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    8f3c:	90 31       	cpi	r25, 0x10	; 16
    8f3e:	18 f4       	brcc	.+6      	; 0x8f46 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8f40:	90 93 31 0b 	sts	0x0B31, r25
    8f44:	02 c0       	rjmp	.+4      	; 0x8f4a <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    8f46:	10 92 31 0b 	sts	0x0B31, r1

	return from + ((delta + shifted) % delta);
    8f4a:	cb 01       	movw	r24, r22
    8f4c:	82 0f       	add	r24, r18
    8f4e:	93 1f       	adc	r25, r19
    8f50:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
}
    8f54:	8e 0f       	add	r24, r30
    8f56:	9f 1f       	adc	r25, r31
    8f58:	08 95       	ret

00008f5a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8f5a:	cf 93       	push	r28
    8f5c:	df 93       	push	r29
    8f5e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8f60:	c0 e0       	ldi	r28, 0x00	; 0
    8f62:	cd 17       	cp	r28, r29
    8f64:	31 f0       	breq	.+12     	; 0x8f72 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8f66:	8f ef       	ldi	r24, 0xFF	; 255
    8f68:	9f ef       	ldi	r25, 0xFF	; 255
    8f6a:	0e 94 c8 37 	call	0x6f90	; 0x6f90 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8f6e:	cf 5f       	subi	r28, 0xFF	; 255
    8f70:	f8 cf       	rjmp	.-16     	; 0x8f62 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8f72:	df 91       	pop	r29
    8f74:	cf 91       	pop	r28
    8f76:	08 95       	ret

00008f78 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    8f78:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    8f7a:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8f7c:	14 86       	std	Z+12, r1	; 0x0c
    8f7e:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    8f80:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    8f82:	73 e0       	ldi	r23, 0x03	; 3
    8f84:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8f86:	65 e0       	ldi	r22, 0x05	; 5
    8f88:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    8f8a:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8f8c:	47 ef       	ldi	r20, 0xF7	; 247
    8f8e:	50 e2       	ldi	r21, 0x20	; 32
    8f90:	56 83       	std	Z+6, r21	; 0x06
    8f92:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8f94:	24 ef       	ldi	r18, 0xF4	; 244
    8f96:	30 e2       	ldi	r19, 0x20	; 32
    8f98:	30 87       	std	Z+8, r19	; 0x08
    8f9a:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8f9c:	81 ef       	ldi	r24, 0xF1	; 241
    8f9e:	90 e2       	ldi	r25, 0x20	; 32
    8fa0:	92 87       	std	Z+10, r25	; 0x0a
    8fa2:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8fa4:	10 8e       	std	Z+24, r1	; 0x18
    8fa6:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    8fa8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    8faa:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8fac:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    8fae:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8fb0:	52 8b       	std	Z+18, r21	; 0x12
    8fb2:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8fb4:	34 8b       	std	Z+20, r19	; 0x14
    8fb6:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8fb8:	96 8b       	std	Z+22, r25	; 0x16
    8fba:	85 8b       	std	Z+21, r24	; 0x15
    8fbc:	08 95       	ret

00008fbe <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    8fbe:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    8fc0:	84 e6       	ldi	r24, 0x64	; 100
    8fc2:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    8fc4:	10 82       	st	Z, r1
	s->active = 0;
    8fc6:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    8fc8:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    8fca:	84 e0       	ldi	r24, 0x04	; 4
    8fcc:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    8fce:	66 23       	and	r22, r22
    8fd0:	11 f0       	breq	.+4      	; 0x8fd6 <init_shot_state+0x18>
    8fd2:	85 e0       	ldi	r24, 0x05	; 5
    8fd4:	01 c0       	rjmp	.+2      	; 0x8fd8 <init_shot_state+0x1a>
    8fd6:	81 e0       	ldi	r24, 0x01	; 1
    8fd8:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    8fda:	80 e0       	ldi	r24, 0x00	; 0
    8fdc:	90 e0       	ldi	r25, 0x00	; 0
    8fde:	a0 e7       	ldi	r26, 0x70	; 112
    8fe0:	b3 e4       	ldi	r27, 0x43	; 67
    8fe2:	82 83       	std	Z+2, r24	; 0x02
    8fe4:	93 83       	std	Z+3, r25	; 0x03
    8fe6:	a4 83       	std	Z+4, r26	; 0x04
    8fe8:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    8fea:	16 82       	std	Z+6, r1	; 0x06
    8fec:	17 82       	std	Z+7, r1	; 0x07
    8fee:	10 86       	std	Z+8, r1	; 0x08
    8ff0:	11 86       	std	Z+9, r1	; 0x09
    8ff2:	08 95       	ret

00008ff4 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    8ff4:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    8ff6:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    8ff8:	82 e0       	ldi	r24, 0x02	; 2
    8ffa:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    8ffc:	85 e0       	ldi	r24, 0x05	; 5
    8ffe:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    9000:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9002:	66 23       	and	r22, r22
    9004:	19 f0       	breq	.+6      	; 0x900c <set_shot_animations+0x18>
    9006:	84 e9       	ldi	r24, 0x94	; 148
    9008:	90 e2       	ldi	r25, 0x20	; 32
    900a:	02 c0       	rjmp	.+4      	; 0x9010 <set_shot_animations+0x1c>
    900c:	87 e9       	ldi	r24, 0x97	; 151
    900e:	90 e2       	ldi	r25, 0x20	; 32
    9010:	93 8b       	std	Z+19, r25	; 0x13
    9012:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    9014:	66 23       	and	r22, r22
    9016:	19 f0       	breq	.+6      	; 0x901e <set_shot_animations+0x2a>
    9018:	81 e9       	ldi	r24, 0x91	; 145
    901a:	90 e2       	ldi	r25, 0x20	; 32
    901c:	02 c0       	rjmp	.+4      	; 0x9022 <set_shot_animations+0x2e>
    901e:	87 e9       	ldi	r24, 0x97	; 151
    9020:	90 e2       	ldi	r25, 0x20	; 32
    9022:	95 8b       	std	Z+21, r25	; 0x15
    9024:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    9026:	82 e0       	ldi	r24, 0x02	; 2
    9028:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    902a:	85 e0       	ldi	r24, 0x05	; 5
    902c:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    902e:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    9030:	66 23       	and	r22, r22
    9032:	19 f0       	breq	.+6      	; 0x903a <set_shot_animations+0x46>
    9034:	8e e8       	ldi	r24, 0x8E	; 142
    9036:	90 e2       	ldi	r25, 0x20	; 32
    9038:	02 c0       	rjmp	.+4      	; 0x903e <set_shot_animations+0x4a>
    903a:	87 e9       	ldi	r24, 0x97	; 151
    903c:	90 e2       	ldi	r25, 0x20	; 32
    903e:	95 8f       	std	Z+29, r25	; 0x1d
    9040:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    9042:	66 23       	and	r22, r22
    9044:	19 f0       	breq	.+6      	; 0x904c <set_shot_animations+0x58>
    9046:	8b e8       	ldi	r24, 0x8B	; 139
    9048:	90 e2       	ldi	r25, 0x20	; 32
    904a:	02 c0       	rjmp	.+4      	; 0x9050 <set_shot_animations+0x5c>
    904c:	87 e9       	ldi	r24, 0x97	; 151
    904e:	90 e2       	ldi	r25, 0x20	; 32
    9050:	97 8f       	std	Z+31, r25	; 0x1f
    9052:	86 8f       	std	Z+30, r24	; 0x1e
    9054:	08 95       	ret

00009056 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9056:	0f 93       	push	r16
    9058:	1f 93       	push	r17
    905a:	cf 93       	push	r28
    905c:	df 93       	push	r29
    905e:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    9060:	8a e5       	ldi	r24, 0x5A	; 90
    9062:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    9064:	88 e7       	ldi	r24, 0x78	; 120
    9066:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    9068:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    906a:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    906c:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    906e:	18 82       	st	Y, r1
	p->shared.speed = 0;
    9070:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    9072:	82 e3       	ldi	r24, 0x32	; 50
    9074:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    9076:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    9078:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    907a:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    907c:	fe 01       	movw	r30, r28
    907e:	e2 5a       	subi	r30, 0xA2	; 162
    9080:	ff 4f       	sbci	r31, 0xFF	; 255
    9082:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9084:	31 96       	adiw	r30, 0x01	; 1
    9086:	91 e0       	ldi	r25, 0x01	; 1
    9088:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    908a:	31 96       	adiw	r30, 0x01	; 1
    908c:	85 e0       	ldi	r24, 0x05	; 5
    908e:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9090:	31 96       	adiw	r30, 0x01	; 1
    9092:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9094:	31 96       	adiw	r30, 0x01	; 1
    9096:	71 83       	std	Z+1, r23	; 0x01
    9098:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    909a:	36 96       	adiw	r30, 0x06	; 6
    909c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    909e:	31 96       	adiw	r30, 0x01	; 1
    90a0:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    90a2:	31 96       	adiw	r30, 0x01	; 1
    90a4:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    90a6:	31 96       	adiw	r30, 0x01	; 1
    90a8:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    90aa:	31 96       	adiw	r30, 0x01	; 1
    90ac:	51 83       	std	Z+1, r21	; 0x01
    90ae:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    90b0:	36 96       	adiw	r30, 0x06	; 6
    90b2:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    90b4:	31 96       	adiw	r30, 0x01	; 1
    90b6:	93 e0       	ldi	r25, 0x03	; 3
    90b8:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    90ba:	31 96       	adiw	r30, 0x01	; 1
    90bc:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    90be:	31 96       	adiw	r30, 0x01	; 1
    90c0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    90c2:	31 96       	adiw	r30, 0x01	; 1
    90c4:	86 ea       	ldi	r24, 0xA6	; 166
    90c6:	90 e2       	ldi	r25, 0x20	; 32
    90c8:	91 83       	std	Z+1, r25	; 0x01
    90ca:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    90cc:	32 96       	adiw	r30, 0x02	; 2
    90ce:	80 ea       	ldi	r24, 0xA0	; 160
    90d0:	90 e2       	ldi	r25, 0x20	; 32
    90d2:	91 83       	std	Z+1, r25	; 0x01
    90d4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    90d6:	32 96       	adiw	r30, 0x02	; 2
    90d8:	8a e9       	ldi	r24, 0x9A	; 154
    90da:	90 e2       	ldi	r25, 0x20	; 32
    90dc:	91 83       	std	Z+1, r25	; 0x01
    90de:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    90e0:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    90e2:	8e 01       	movw	r16, r28
    90e4:	06 5e       	subi	r16, 0xE6	; 230
    90e6:	1f 4f       	sbci	r17, 0xFF	; 255
    90e8:	60 e0       	ldi	r22, 0x00	; 0
    90ea:	c8 01       	movw	r24, r16
    90ec:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    90f0:	60 e0       	ldi	r22, 0x00	; 0
    90f2:	c8 01       	movw	r24, r16
    90f4:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    90f8:	ec 96       	adiw	r28, 0x3c	; 60
    90fa:	60 e0       	ldi	r22, 0x00	; 0
    90fc:	ce 01       	movw	r24, r28
    90fe:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9102:	60 e0       	ldi	r22, 0x00	; 0
    9104:	ce 01       	movw	r24, r28
	}
}
    9106:	df 91       	pop	r29
    9108:	cf 91       	pop	r28
    910a:	1f 91       	pop	r17
    910c:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    910e:	0c 94 fa 47 	jmp	0x8ff4	; 0x8ff4 <set_shot_animations>

00009112 <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    9112:	cf 93       	push	r28
    9114:	df 93       	push	r29
    9116:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    9118:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    911a:	60 e0       	ldi	r22, 0x00	; 0
    911c:	4a 96       	adiw	r24, 0x1a	; 26
    911e:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
    9122:	60 e0       	ldi	r22, 0x00	; 0
    9124:	ce 01       	movw	r24, r28
    9126:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    9128:	df 91       	pop	r29
    912a:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    912c:	0c 94 df 47 	jmp	0x8fbe	; 0x8fbe <init_shot_state>

00009130 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9130:	e1 ec       	ldi	r30, 0xC1	; 193
    9132:	fb e0       	ldi	r31, 0x0B	; 11
    9134:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9136:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    9138:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    913a:	4a ec       	ldi	r20, 0xCA	; 202
    913c:	50 e2       	ldi	r21, 0x20	; 32
    913e:	66 ed       	ldi	r22, 0xD6	; 214
    9140:	70 e2       	ldi	r23, 0x20	; 32
    9142:	8e ed       	ldi	r24, 0xDE	; 222
    9144:	9b e0       	ldi	r25, 0x0B	; 11
    9146:	0e 94 2b 48 	call	0x9056	; 0x9056 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    914a:	42 eb       	ldi	r20, 0xB2	; 178
    914c:	50 e2       	ldi	r21, 0x20	; 32
    914e:	6e eb       	ldi	r22, 0xBE	; 190
    9150:	70 e2       	ldi	r23, 0x20	; 32
    9152:	8f e4       	ldi	r24, 0x4F	; 79
    9154:	9f e0       	ldi	r25, 0x0F	; 15
    9156:	0c 94 2b 48 	jmp	0x9056	; 0x9056 <init_player>

0000915a <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    915a:	cf 93       	push	r28
    915c:	df 93       	push	r29
    915e:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9160:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    9162:	69 89       	ldd	r22, Y+17	; 0x11
    9164:	70 e0       	ldi	r23, 0x00	; 0
    9166:	80 e0       	ldi	r24, 0x00	; 0
    9168:	90 e0       	ldi	r25, 0x00	; 0
    916a:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <__floatunsisf>
    916e:	6a 83       	std	Y+2, r22	; 0x02
    9170:	7b 83       	std	Y+3, r23	; 0x03
    9172:	8c 83       	std	Y+4, r24	; 0x04
    9174:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    9176:	6a 89       	ldd	r22, Y+18	; 0x12
    9178:	70 e0       	ldi	r23, 0x00	; 0
    917a:	80 e0       	ldi	r24, 0x00	; 0
    917c:	90 e0       	ldi	r25, 0x00	; 0
    917e:	0e 94 d7 59 	call	0xb3ae	; 0xb3ae <__floatunsisf>
    9182:	6e 83       	std	Y+6, r22	; 0x06
    9184:	7f 83       	std	Y+7, r23	; 0x07
    9186:	88 87       	std	Y+8, r24	; 0x08
    9188:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    918a:	18 82       	st	Y, r1
	player->shared.speed = 0;
    918c:	19 82       	std	Y+1, r1	; 0x01
	
}
    918e:	df 91       	pop	r29
    9190:	cf 91       	pop	r28
    9192:	08 95       	ret

00009194 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9194:	cf 93       	push	r28
    9196:	df 93       	push	r29
    9198:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    919a:	bc 01       	movw	r22, r24
    919c:	88 81       	ld	r24, Y
    919e:	99 81       	ldd	r25, Y+1	; 0x01
    91a0:	0e 94 d9 38 	call	0x71b2	; 0x71b2 <EepromReadBlock>
	if (status == 0x03)
    91a4:	83 30       	cpi	r24, 0x03	; 3
    91a6:	29 f4       	brne	.+10     	; 0x91b2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    91a8:	ce 01       	movw	r24, r28
	}
}
    91aa:	df 91       	pop	r29
    91ac:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    91ae:	0c 94 6c 38 	jmp	0x70d8	; 0x70d8 <EepromWriteBlock>
	}
}
    91b2:	df 91       	pop	r29
    91b4:	cf 91       	pop	r28
    91b6:	08 95       	ret

000091b8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    91b8:	61 e0       	ldi	r22, 0x01	; 1
    91ba:	83 e0       	ldi	r24, 0x03	; 3
    91bc:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <FadeOut>
	ClearVram();
    91c0:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    91c4:	60 e0       	ldi	r22, 0x00	; 0
    91c6:	83 e0       	ldi	r24, 0x03	; 3
    91c8:	0c 94 ad 45 	jmp	0x8b5a	; 0x8b5a <FadeIn>

000091cc <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    91cc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    91ce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    91d0:	40 e0       	ldi	r20, 0x00	; 0
    91d2:	6c ed       	ldi	r22, 0xDC	; 220
    91d4:	70 e2       	ldi	r23, 0x20	; 32
    91d6:	8c 2f       	mov	r24, r28
    91d8:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
    91dc:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    91de:	cc 30       	cpi	r28, 0x0C	; 12
    91e0:	b9 f7       	brne	.-18     	; 0x91d0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    91e2:	cf 91       	pop	r28
    91e4:	08 95       	ret

000091e6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    91e6:	cf 92       	push	r12
    91e8:	df 92       	push	r13
    91ea:	ff 92       	push	r15
    91ec:	0f 93       	push	r16
    91ee:	1f 93       	push	r17
    91f0:	cf 93       	push	r28
    91f2:	df 93       	push	r29
    91f4:	cd b7       	in	r28, 0x3d	; 61
    91f6:	de b7       	in	r29, 0x3e	; 62
    91f8:	28 97       	sbiw	r28, 0x08	; 8
    91fa:	0f b6       	in	r0, 0x3f	; 63
    91fc:	f8 94       	cli
    91fe:	de bf       	out	0x3e, r29	; 62
    9200:	0f be       	out	0x3f, r0	; 63
    9202:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9204:	90 91 ec 0b 	lds	r25, 0x0BEC
    9208:	80 91 5d 0f 	lds	r24, 0x0F5D
    920c:	98 17       	cp	r25, r24
    920e:	28 f4       	brcc	.+10     	; 0x921a <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    9210:	ee ed       	ldi	r30, 0xDE	; 222
    9212:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9214:	af e4       	ldi	r26, 0x4F	; 79
    9216:	bf e0       	ldi	r27, 0x0F	; 15
    9218:	04 c0       	rjmp	.+8      	; 0x9222 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    921a:	ef e4       	ldi	r30, 0x4F	; 79
    921c:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    921e:	ae ed       	ldi	r26, 0xDE	; 222
    9220:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9222:	1a 96       	adiw	r26, 0x0a	; 10
    9224:	8c 91       	ld	r24, X
    9226:	1a 97       	sbiw	r26, 0x0a	; 10
    9228:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    922a:	82 85       	ldd	r24, Z+10	; 0x0a
    922c:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    922e:	1e 96       	adiw	r26, 0x0e	; 14
    9230:	8c 91       	ld	r24, X
    9232:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    9234:	96 85       	ldd	r25, Z+14	; 0x0e
    9236:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    9238:	f8 2e       	mov	r15, r24
    923a:	f9 1a       	sub	r15, r25
    923c:	00 e0       	ldi	r16, 0x00	; 0
    923e:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    9240:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    9242:	81 11       	cpse	r24, r1
    9244:	08 c0       	rjmp	.+16     	; 0x9256 <save_score+0x70>
    9246:	f8 01       	movw	r30, r16
    9248:	ec 5f       	subi	r30, 0xFC	; 252
    924a:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    924c:	94 81       	ldd	r25, Z+4	; 0x04
    924e:	25 81       	ldd	r18, Z+5	; 0x05
    9250:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    9252:	9f 15       	cp	r25, r15
    9254:	d0 f4       	brcc	.+52     	; 0x928a <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    9256:	44 e0       	ldi	r20, 0x04	; 4
    9258:	c8 01       	movw	r24, r16
    925a:	8a 5f       	subi	r24, 0xFA	; 250
    925c:	9e 4f       	sbci	r25, 0xFE	; 254
    925e:	6c 01       	movw	r12, r24
    9260:	bc 01       	movw	r22, r24
    9262:	ce 01       	movw	r24, r28
    9264:	05 96       	adiw	r24, 0x05	; 5
    9266:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    926a:	44 e0       	ldi	r20, 0x04	; 4
    926c:	be 01       	movw	r22, r28
    926e:	6f 5f       	subi	r22, 0xFF	; 255
    9270:	7f 4f       	sbci	r23, 0xFF	; 255
    9272:	c6 01       	movw	r24, r12
    9274:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    9278:	44 e0       	ldi	r20, 0x04	; 4
    927a:	be 01       	movw	r22, r28
    927c:	6b 5f       	subi	r22, 0xFB	; 251
    927e:	7f 4f       	sbci	r23, 0xFF	; 255
    9280:	ce 01       	movw	r24, r28
    9282:	01 96       	adiw	r24, 0x01	; 1
    9284:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
				saved = 1;
    9288:	81 e0       	ldi	r24, 0x01	; 1
    928a:	0c 5f       	subi	r16, 0xFC	; 252
    928c:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    928e:	0c 31       	cpi	r16, 0x1C	; 28
    9290:	11 05       	cpc	r17, r1
    9292:	b9 f6       	brne	.-82     	; 0x9242 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    9294:	84 e0       	ldi	r24, 0x04	; 4
    9296:	91 e0       	ldi	r25, 0x01	; 1
    9298:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    929c:	28 96       	adiw	r28, 0x08	; 8
    929e:	0f b6       	in	r0, 0x3f	; 63
    92a0:	f8 94       	cli
    92a2:	de bf       	out	0x3e, r29	; 62
    92a4:	0f be       	out	0x3f, r0	; 63
    92a6:	cd bf       	out	0x3d, r28	; 61
    92a8:	df 91       	pop	r29
    92aa:	cf 91       	pop	r28
    92ac:	1f 91       	pop	r17
    92ae:	0f 91       	pop	r16
    92b0:	ff 90       	pop	r15
    92b2:	df 90       	pop	r13
    92b4:	cf 90       	pop	r12
    92b6:	08 95       	ret

000092b8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    92b8:	0f 93       	push	r16
    92ba:	1f 93       	push	r17
    92bc:	cf 93       	push	r28
    92be:	df 93       	push	r29
    92c0:	8c 01       	movw	r16, r24
    92c2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    92c4:	88 81       	ld	r24, Y
    92c6:	81 30       	cpi	r24, 0x01	; 1
    92c8:	69 f1       	breq	.+90     	; 0x9324 <position_shot+0x6c>
    92ca:	88 f0       	brcs	.+34     	; 0x92ee <position_shot+0x36>
    92cc:	82 30       	cpi	r24, 0x02	; 2
    92ce:	b1 f1       	breq	.+108    	; 0x933c <position_shot+0x84>
    92d0:	83 30       	cpi	r24, 0x03	; 3
    92d2:	09 f0       	breq	.+2      	; 0x92d6 <position_shot+0x1e>
    92d4:	5a c0       	rjmp	.+180    	; 0x938a <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    92d6:	20 e0       	ldi	r18, 0x00	; 0
    92d8:	30 e0       	ldi	r19, 0x00	; 0
    92da:	40 e0       	ldi	r20, 0x00	; 0
    92dc:	51 e4       	ldi	r21, 0x41	; 65
    92de:	f8 01       	movw	r30, r16
    92e0:	62 81       	ldd	r22, Z+2	; 0x02
    92e2:	73 81       	ldd	r23, Z+3	; 0x03
    92e4:	84 81       	ldd	r24, Z+4	; 0x04
    92e6:	95 81       	ldd	r25, Z+5	; 0x05
    92e8:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    92ec:	3b c0       	rjmp	.+118    	; 0x9364 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    92ee:	20 e0       	ldi	r18, 0x00	; 0
    92f0:	30 e0       	ldi	r19, 0x00	; 0
    92f2:	40 e8       	ldi	r20, 0x80	; 128
    92f4:	50 e4       	ldi	r21, 0x40	; 64
    92f6:	f8 01       	movw	r30, r16
    92f8:	62 81       	ldd	r22, Z+2	; 0x02
    92fa:	73 81       	ldd	r23, Z+3	; 0x03
    92fc:	84 81       	ldd	r24, Z+4	; 0x04
    92fe:	95 81       	ldd	r25, Z+5	; 0x05
    9300:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9304:	6a 83       	std	Y+2, r22	; 0x02
    9306:	7b 83       	std	Y+3, r23	; 0x03
    9308:	8c 83       	std	Y+4, r24	; 0x04
    930a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    930c:	20 e0       	ldi	r18, 0x00	; 0
    930e:	30 e0       	ldi	r19, 0x00	; 0
    9310:	40 e0       	ldi	r20, 0x00	; 0
    9312:	51 e4       	ldi	r21, 0x41	; 65
    9314:	f8 01       	movw	r30, r16
    9316:	66 81       	ldd	r22, Z+6	; 0x06
    9318:	77 81       	ldd	r23, Z+7	; 0x07
    931a:	80 85       	ldd	r24, Z+8	; 0x08
    931c:	91 85       	ldd	r25, Z+9	; 0x09
    931e:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    9322:	2f c0       	rjmp	.+94     	; 0x9382 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    9324:	20 e0       	ldi	r18, 0x00	; 0
    9326:	30 e0       	ldi	r19, 0x00	; 0
    9328:	40 e8       	ldi	r20, 0x80	; 128
    932a:	51 e4       	ldi	r21, 0x41	; 65
    932c:	f8 01       	movw	r30, r16
    932e:	62 81       	ldd	r22, Z+2	; 0x02
    9330:	73 81       	ldd	r23, Z+3	; 0x03
    9332:	84 81       	ldd	r24, Z+4	; 0x04
    9334:	95 81       	ldd	r25, Z+5	; 0x05
    9336:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    933a:	14 c0       	rjmp	.+40     	; 0x9364 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    933c:	20 e0       	ldi	r18, 0x00	; 0
    933e:	30 e0       	ldi	r19, 0x00	; 0
    9340:	40 e8       	ldi	r20, 0x80	; 128
    9342:	50 e4       	ldi	r21, 0x40	; 64
    9344:	f8 01       	movw	r30, r16
    9346:	62 81       	ldd	r22, Z+2	; 0x02
    9348:	73 81       	ldd	r23, Z+3	; 0x03
    934a:	84 81       	ldd	r24, Z+4	; 0x04
    934c:	95 81       	ldd	r25, Z+5	; 0x05
    934e:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9352:	6a 83       	std	Y+2, r22	; 0x02
    9354:	7b 83       	std	Y+3, r23	; 0x03
    9356:	8c 83       	std	Y+4, r24	; 0x04
    9358:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    935a:	20 e0       	ldi	r18, 0x00	; 0
    935c:	30 e0       	ldi	r19, 0x00	; 0
    935e:	40 e8       	ldi	r20, 0x80	; 128
    9360:	51 e4       	ldi	r21, 0x41	; 65
    9362:	08 c0       	rjmp	.+16     	; 0x9374 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    9364:	6a 83       	std	Y+2, r22	; 0x02
    9366:	7b 83       	std	Y+3, r23	; 0x03
    9368:	8c 83       	std	Y+4, r24	; 0x04
    936a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    936c:	20 e0       	ldi	r18, 0x00	; 0
    936e:	30 e0       	ldi	r19, 0x00	; 0
    9370:	40 e8       	ldi	r20, 0x80	; 128
    9372:	50 e4       	ldi	r21, 0x40	; 64
    9374:	f8 01       	movw	r30, r16
    9376:	66 81       	ldd	r22, Z+6	; 0x06
    9378:	77 81       	ldd	r23, Z+7	; 0x07
    937a:	80 85       	ldd	r24, Z+8	; 0x08
    937c:	91 85       	ldd	r25, Z+9	; 0x09
    937e:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9382:	6e 83       	std	Y+6, r22	; 0x06
    9384:	7f 83       	std	Y+7, r23	; 0x07
    9386:	88 87       	std	Y+8, r24	; 0x08
    9388:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    938a:	df 91       	pop	r29
    938c:	cf 91       	pop	r28
    938e:	1f 91       	pop	r17
    9390:	0f 91       	pop	r16
    9392:	08 95       	ret

00009394 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    9394:	0f 93       	push	r16
    9396:	1f 93       	push	r17
    9398:	cf 93       	push	r28
    939a:	df 93       	push	r29
    939c:	8c 01       	movw	r16, r24
    939e:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    93a0:	ac 01       	movw	r20, r24
    93a2:	45 5f       	subi	r20, 0xF5	; 245
    93a4:	5f 4f       	sbci	r21, 0xFF	; 255
    93a6:	23 e0       	ldi	r18, 0x03	; 3
    93a8:	6e e0       	ldi	r22, 0x0E	; 14
    93aa:	84 e0       	ldi	r24, 0x04	; 4
    93ac:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
	Print(8, 14, strOwns);
    93b0:	44 e3       	ldi	r20, 0x34	; 52
    93b2:	52 e0       	ldi	r21, 0x02	; 2
    93b4:	6e e0       	ldi	r22, 0x0E	; 14
    93b6:	70 e0       	ldi	r23, 0x00	; 0
    93b8:	88 e0       	ldi	r24, 0x08	; 8
    93ba:	90 e0       	ldi	r25, 0x00	; 0
    93bc:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    93c0:	ae 01       	movw	r20, r28
    93c2:	45 5f       	subi	r20, 0xF5	; 245
    93c4:	5f 4f       	sbci	r21, 0xFF	; 255
    93c6:	23 e0       	ldi	r18, 0x03	; 3
    93c8:	6e e0       	ldi	r22, 0x0E	; 14
    93ca:	8d e0       	ldi	r24, 0x0D	; 13
    93cc:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
	Print(17, 14, strBy);
    93d0:	41 e3       	ldi	r20, 0x31	; 49
    93d2:	52 e0       	ldi	r21, 0x02	; 2
    93d4:	6e e0       	ldi	r22, 0x0E	; 14
    93d6:	70 e0       	ldi	r23, 0x00	; 0
    93d8:	81 e1       	ldi	r24, 0x11	; 17
    93da:	90 e0       	ldi	r25, 0x00	; 0
    93dc:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    93e0:	21 e0       	ldi	r18, 0x01	; 1
    93e2:	f8 01       	movw	r30, r16
    93e4:	47 85       	ldd	r20, Z+15	; 0x0f
    93e6:	6e e0       	ldi	r22, 0x0E	; 14
    93e8:	70 e0       	ldi	r23, 0x00	; 0
    93ea:	86 e1       	ldi	r24, 0x16	; 22
    93ec:	90 e0       	ldi	r25, 0x00	; 0
    93ee:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <PrintByte>
	PrintChar(23, 14, '-');
    93f2:	4d e2       	ldi	r20, 0x2D	; 45
    93f4:	6e e0       	ldi	r22, 0x0E	; 14
    93f6:	70 e0       	ldi	r23, 0x00	; 0
    93f8:	87 e1       	ldi	r24, 0x17	; 23
    93fa:	90 e0       	ldi	r25, 0x00	; 0
    93fc:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    9400:	21 e0       	ldi	r18, 0x01	; 1
    9402:	4f 85       	ldd	r20, Y+15	; 0x0f
    9404:	6e e0       	ldi	r22, 0x0E	; 14
    9406:	70 e0       	ldi	r23, 0x00	; 0
    9408:	8a e1       	ldi	r24, 0x1A	; 26
    940a:	90 e0       	ldi	r25, 0x00	; 0
}
    940c:	df 91       	pop	r29
    940e:	cf 91       	pop	r28
    9410:	1f 91       	pop	r17
    9412:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    9414:	0c 94 37 45 	jmp	0x8a6e	; 0x8a6e <PrintByte>

00009418 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9418:	cf 93       	push	r28
    941a:	df 93       	push	r29
    941c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    941e:	ac 01       	movw	r20, r24
    9420:	45 5f       	subi	r20, 0xF5	; 245
    9422:	5f 4f       	sbci	r21, 0xFF	; 255
    9424:	23 e0       	ldi	r18, 0x03	; 3
    9426:	60 e0       	ldi	r22, 0x00	; 0
    9428:	8a e0       	ldi	r24, 0x0A	; 10
    942a:	8c 0f       	add	r24, r28
    942c:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
	Print(x, 0, strScore);
    9430:	d0 e0       	ldi	r29, 0x00	; 0
    9432:	45 e8       	ldi	r20, 0x85	; 133
    9434:	51 e0       	ldi	r21, 0x01	; 1
    9436:	60 e0       	ldi	r22, 0x00	; 0
    9438:	70 e0       	ldi	r23, 0x00	; 0
    943a:	ce 01       	movw	r24, r28
    943c:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(x, 1, strTotal);
    9440:	4e e7       	ldi	r20, 0x7E	; 126
    9442:	51 e0       	ldi	r21, 0x01	; 1
    9444:	61 e0       	ldi	r22, 0x01	; 1
    9446:	70 e0       	ldi	r23, 0x00	; 0
    9448:	ce 01       	movw	r24, r28
	
}
    944a:	df 91       	pop	r29
    944c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    944e:	0c 94 6a 45 	jmp	0x8ad4	; 0x8ad4 <Print>

00009452 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    9452:	0f 93       	push	r16
    9454:	1f 93       	push	r17
    9456:	cf 93       	push	r28
    9458:	df 93       	push	r29
    945a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    945c:	c6 2f       	mov	r28, r22
    945e:	d0 e0       	ldi	r29, 0x00	; 0
    9460:	28 96       	adiw	r28, 0x08	; 8
    9462:	20 e0       	ldi	r18, 0x00	; 0
    9464:	fc 01       	movw	r30, r24
    9466:	47 85       	ldd	r20, Z+15	; 0x0f
    9468:	60 e0       	ldi	r22, 0x00	; 0
    946a:	70 e0       	ldi	r23, 0x00	; 0
    946c:	ce 01       	movw	r24, r28
    946e:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    9472:	20 e0       	ldi	r18, 0x00	; 0
    9474:	f8 01       	movw	r30, r16
    9476:	46 85       	ldd	r20, Z+14	; 0x0e
    9478:	61 e0       	ldi	r22, 0x01	; 1
    947a:	70 e0       	ldi	r23, 0x00	; 0
    947c:	ce 01       	movw	r24, r28
}
    947e:	df 91       	pop	r29
    9480:	cf 91       	pop	r28
    9482:	1f 91       	pop	r17
    9484:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    9486:	0c 94 37 45 	jmp	0x8a6e	; 0x8a6e <PrintByte>

0000948a <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    948a:	cf 93       	push	r28
    948c:	df 93       	push	r29
    948e:	ec 01       	movw	r28, r24
    9490:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    9492:	9c 89       	ldd	r25, Y+20	; 0x14
    9494:	9a 35       	cpi	r25, 0x5A	; 90
    9496:	99 f0       	breq	.+38     	; 0x94be <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    9498:	91 11       	cpse	r25, r1
    949a:	0c c0       	rjmp	.+24     	; 0x94b4 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    949c:	4d 89       	ldd	r20, Y+21	; 0x15
    949e:	9f e0       	ldi	r25, 0x0F	; 15
    94a0:	49 9f       	mul	r20, r25
    94a2:	a0 01       	movw	r20, r0
    94a4:	11 24       	eor	r1, r1
    94a6:	45 56       	subi	r20, 0x65	; 101
    94a8:	5e 4f       	sbci	r21, 0xFE	; 254
    94aa:	62 e0       	ldi	r22, 0x02	; 2
    94ac:	70 e0       	ldi	r23, 0x00	; 0
    94ae:	90 e0       	ldi	r25, 0x00	; 0
    94b0:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    94b4:	8c 89       	ldd	r24, Y+20	; 0x14
    94b6:	8f 5f       	subi	r24, 0xFF	; 255
    94b8:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    94ba:	41 e0       	ldi	r20, 0x01	; 1
    94bc:	0a c0       	rjmp	.+20     	; 0x94d2 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    94be:	44 23       	and	r20, r20
    94c0:	41 f0       	breq	.+16     	; 0x94d2 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    94c2:	4c e8       	ldi	r20, 0x8C	; 140
    94c4:	51 e0       	ldi	r21, 0x01	; 1
    94c6:	62 e0       	ldi	r22, 0x02	; 2
    94c8:	70 e0       	ldi	r23, 0x00	; 0
    94ca:	90 e0       	ldi	r25, 0x00	; 0
    94cc:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    94d0:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    94d2:	84 2f       	mov	r24, r20
    94d4:	df 91       	pop	r29
    94d6:	cf 91       	pop	r28
    94d8:	08 95       	ret

000094da <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    94da:	ef 92       	push	r14
    94dc:	ff 92       	push	r15
    94de:	0f 93       	push	r16
    94e0:	1f 93       	push	r17
    94e2:	cf 93       	push	r28
    94e4:	df 93       	push	r29
    94e6:	1f 92       	push	r1
    94e8:	cd b7       	in	r28, 0x3d	; 61
    94ea:	de b7       	in	r29, 0x3e	; 62
    94ec:	7c 01       	movw	r14, r24
    94ee:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    94f0:	fc 01       	movw	r30, r24
    94f2:	66 81       	ldd	r22, Z+6	; 0x06
    94f4:	77 81       	ldd	r23, Z+7	; 0x07
    94f6:	80 85       	ldd	r24, Z+8	; 0x08
    94f8:	91 85       	ldd	r25, Z+9	; 0x09
    94fa:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    94fe:	46 2f       	mov	r20, r22
    9500:	f7 01       	movw	r30, r14
    9502:	62 81       	ldd	r22, Z+2	; 0x02
    9504:	73 81       	ldd	r23, Z+3	; 0x03
    9506:	84 81       	ldd	r24, Z+4	; 0x04
    9508:	95 81       	ldd	r25, Z+5	; 0x05
    950a:	49 83       	std	Y+1, r20	; 0x01
    950c:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9510:	02 e0       	ldi	r16, 0x02	; 2
    9512:	22 e0       	ldi	r18, 0x02	; 2
    9514:	49 81       	ldd	r20, Y+1	; 0x01
    9516:	81 2f       	mov	r24, r17
    9518:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
}
    951c:	0f 90       	pop	r0
    951e:	df 91       	pop	r29
    9520:	cf 91       	pop	r28
    9522:	1f 91       	pop	r17
    9524:	0f 91       	pop	r16
    9526:	ff 90       	pop	r15
    9528:	ef 90       	pop	r14
    952a:	08 95       	ret

0000952c <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    952c:	cf 92       	push	r12
    952e:	df 92       	push	r13
    9530:	ff 92       	push	r15
    9532:	0f 93       	push	r16
    9534:	1f 93       	push	r17
    9536:	cf 93       	push	r28
    9538:	df 93       	push	r29
    953a:	1f 92       	push	r1
    953c:	cd b7       	in	r28, 0x3d	; 61
    953e:	de b7       	in	r29, 0x3e	; 62
    9540:	fc 01       	movw	r30, r24
    9542:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    9544:	80 89       	ldd	r24, Z+16	; 0x10
    9546:	88 23       	and	r24, r24
    9548:	19 f1       	breq	.+70     	; 0x9590 <render_shot+0x64>
    954a:	6f 01       	movw	r12, r30
    954c:	8c e1       	ldi	r24, 0x1C	; 28
    954e:	c8 0e       	add	r12, r24
    9550:	d1 1c       	adc	r13, r1
    9552:	82 e0       	ldi	r24, 0x02	; 2
    9554:	f8 2e       	mov	r15, r24
    9556:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9558:	f6 01       	movw	r30, r12
    955a:	64 81       	ldd	r22, Z+4	; 0x04
    955c:	75 81       	ldd	r23, Z+5	; 0x05
    955e:	86 81       	ldd	r24, Z+6	; 0x06
    9560:	97 81       	ldd	r25, Z+7	; 0x07
    9562:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9566:	46 2f       	mov	r20, r22
    9568:	f6 01       	movw	r30, r12
    956a:	60 81       	ld	r22, Z
    956c:	71 81       	ldd	r23, Z+1	; 0x01
    956e:	82 81       	ldd	r24, Z+2	; 0x02
    9570:	93 81       	ldd	r25, Z+3	; 0x03
    9572:	49 83       	std	Y+1, r20	; 0x01
    9574:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9578:	01 e0       	ldi	r16, 0x01	; 1
    957a:	21 e0       	ldi	r18, 0x01	; 1
    957c:	49 81       	ldd	r20, Y+1	; 0x01
    957e:	81 2f       	mov	r24, r17
    9580:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
			sprite_index++;
    9584:	1f 5f       	subi	r17, 0xFF	; 255
    9586:	f2 e2       	ldi	r31, 0x22	; 34
    9588:	cf 0e       	add	r12, r31
    958a:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    958c:	1f 11       	cpse	r17, r15
    958e:	e4 cf       	rjmp	.-56     	; 0x9558 <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    9590:	0f 90       	pop	r0
    9592:	df 91       	pop	r29
    9594:	cf 91       	pop	r28
    9596:	1f 91       	pop	r17
    9598:	0f 91       	pop	r16
    959a:	ff 90       	pop	r15
    959c:	df 90       	pop	r13
    959e:	cf 90       	pop	r12
    95a0:	08 95       	ret

000095a2 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    95a2:	cf 92       	push	r12
    95a4:	df 92       	push	r13
    95a6:	ef 92       	push	r14
    95a8:	ff 92       	push	r15
    95aa:	0f 93       	push	r16
    95ac:	1f 93       	push	r17
    95ae:	cf 93       	push	r28
    95b0:	df 93       	push	r29
    95b2:	1f 92       	push	r1
    95b4:	cd b7       	in	r28, 0x3d	; 61
    95b6:	de b7       	in	r29, 0x3e	; 62
    95b8:	8c 01       	movw	r16, r24
    95ba:	0f 5f       	subi	r16, 0xFF	; 255
    95bc:	1f 4f       	sbci	r17, 0xFF	; 255
    95be:	7c 01       	movw	r14, r24
    95c0:	29 e1       	ldi	r18, 0x19	; 25
    95c2:	e2 0e       	add	r14, r18
    95c4:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    95c6:	8e e1       	ldi	r24, 0x1E	; 30
    95c8:	c8 2e       	mov	r12, r24
    95ca:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    95cc:	f8 01       	movw	r30, r16
    95ce:	82 85       	ldd	r24, Z+10	; 0x0a
    95d0:	93 85       	ldd	r25, Z+11	; 0x0b
    95d2:	89 2b       	or	r24, r25
    95d4:	e1 f0       	breq	.+56     	; 0x960e <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    95d6:	be 01       	movw	r22, r28
    95d8:	6f 5f       	subi	r22, 0xFF	; 255
    95da:	7f 4f       	sbci	r23, 0xFF	; 255
    95dc:	c8 01       	movw	r24, r16
    95de:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    95e2:	9c 01       	movw	r18, r24
			if (looped)
    95e4:	49 81       	ldd	r20, Y+1	; 0x01
    95e6:	f8 01       	movw	r30, r16
    95e8:	82 85       	ldd	r24, Z+10	; 0x0a
    95ea:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    95ec:	b6 01       	movw	r22, r12
    95ee:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    95f2:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    95f4:	44 23       	and	r20, r20
    95f6:	41 f0       	breq	.+16     	; 0x9608 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    95f8:	40 e0       	ldi	r20, 0x00	; 0
    95fa:	50 e0       	ldi	r21, 0x00	; 0
    95fc:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
				ta->anims[i].tile_index = 0;
    9600:	f8 01       	movw	r30, r16
    9602:	13 86       	std	Z+11, r1	; 0x0b
    9604:	12 86       	std	Z+10, r1	; 0x0a
    9606:	03 c0       	rjmp	.+6      	; 0x960e <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9608:	a9 01       	movw	r20, r18
    960a:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
    960e:	04 5f       	subi	r16, 0xF4	; 244
    9610:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9612:	0e 15       	cp	r16, r14
    9614:	1f 05       	cpc	r17, r15
    9616:	d1 f6       	brne	.-76     	; 0x95cc <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    9618:	0f 90       	pop	r0
    961a:	df 91       	pop	r29
    961c:	cf 91       	pop	r28
    961e:	1f 91       	pop	r17
    9620:	0f 91       	pop	r16
    9622:	ff 90       	pop	r15
    9624:	ef 90       	pop	r14
    9626:	df 90       	pop	r13
    9628:	cf 90       	pop	r12
    962a:	08 95       	ret

0000962c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    962c:	ff 92       	push	r15
    962e:	0f 93       	push	r16
    9630:	1f 93       	push	r17
    9632:	cf 93       	push	r28
    9634:	df 93       	push	r29
    9636:	1f 92       	push	r1
    9638:	cd b7       	in	r28, 0x3d	; 61
    963a:	de b7       	in	r29, 0x3e	; 62
    963c:	8c 01       	movw	r16, r24
    963e:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    9640:	fc 01       	movw	r30, r24
    9642:	83 89       	ldd	r24, Z+19	; 0x13
    9644:	80 ff       	sbrs	r24, 0
    9646:	18 c0       	rjmp	.+48     	; 0x9678 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9648:	be 01       	movw	r22, r28
    964a:	6f 5f       	subi	r22, 0xFF	; 255
    964c:	7f 4f       	sbci	r23, 0xFF	; 255
    964e:	c8 01       	movw	r24, r16
    9650:	8e 58       	subi	r24, 0x8E	; 142
    9652:	9f 4f       	sbci	r25, 0xFF	; 255
    9654:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9658:	29 81       	ldd	r18, Y+1	; 0x01
    965a:	22 23       	and	r18, r18
    965c:	09 f4       	brne	.+2      	; 0x9660 <tank_map+0x34>
    965e:	5a c0       	rjmp	.+180    	; 0x9714 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    9660:	f8 01       	movw	r30, r16
    9662:	83 89       	ldd	r24, Z+19	; 0x13
    9664:	91 e0       	ldi	r25, 0x01	; 1
    9666:	98 27       	eor	r25, r24
    9668:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    966a:	c8 01       	movw	r24, r16
    966c:	0e 94 ad 48 	call	0x915a	; 0x915a <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9670:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9672:	8f ed       	ldi	r24, 0xDF	; 223
    9674:	90 e2       	ldi	r25, 0x20	; 32
    9676:	4f c0       	rjmp	.+158    	; 0x9716 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9678:	f8 01       	movw	r30, r16
    967a:	96 89       	ldd	r25, Z+22	; 0x16
    967c:	98 37       	cpi	r25, 0x78	; 120
    967e:	11 f0       	breq	.+4      	; 0x9684 <tank_map+0x58>
		{
			player->grace_frame++;
    9680:	9f 5f       	subi	r25, 0xFF	; 255
    9682:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    9684:	f8 01       	movw	r30, r16
    9686:	90 81       	ld	r25, Z
    9688:	91 30       	cpi	r25, 0x01	; 1
    968a:	79 f0       	breq	.+30     	; 0x96aa <tank_map+0x7e>
    968c:	f8 f0       	brcs	.+62     	; 0x96cc <tank_map+0xa0>
    968e:	92 30       	cpi	r25, 0x02	; 2
    9690:	99 f0       	breq	.+38     	; 0x96b8 <tank_map+0x8c>
    9692:	93 30       	cpi	r25, 0x03	; 3
    9694:	d9 f4       	brne	.+54     	; 0x96cc <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9696:	be 01       	movw	r22, r28
    9698:	6f 5f       	subi	r22, 0xFF	; 255
    969a:	7f 4f       	sbci	r23, 0xFF	; 255
    969c:	c8 01       	movw	r24, r16
    969e:	88 59       	subi	r24, 0x98	; 152
    96a0:	9f 4f       	sbci	r25, 0xFF	; 255
    96a2:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    96a6:	41 e0       	ldi	r20, 0x01	; 1
    96a8:	1a c0       	rjmp	.+52     	; 0x96de <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    96aa:	be 01       	movw	r22, r28
    96ac:	6f 5f       	subi	r22, 0xFF	; 255
    96ae:	7f 4f       	sbci	r23, 0xFF	; 255
    96b0:	c8 01       	movw	r24, r16
    96b2:	88 59       	subi	r24, 0x98	; 152
    96b4:	9f 4f       	sbci	r25, 0xFF	; 255
    96b6:	10 c0       	rjmp	.+32     	; 0x96d8 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    96b8:	be 01       	movw	r22, r28
    96ba:	6f 5f       	subi	r22, 0xFF	; 255
    96bc:	7f 4f       	sbci	r23, 0xFF	; 255
    96be:	c8 01       	movw	r24, r16
    96c0:	82 5a       	subi	r24, 0xA2	; 162
    96c2:	9f 4f       	sbci	r25, 0xFF	; 255
    96c4:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    96c8:	42 e0       	ldi	r20, 0x02	; 2
    96ca:	09 c0       	rjmp	.+18     	; 0x96de <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    96cc:	be 01       	movw	r22, r28
    96ce:	6f 5f       	subi	r22, 0xFF	; 255
    96d0:	7f 4f       	sbci	r23, 0xFF	; 255
    96d2:	c8 01       	movw	r24, r16
    96d4:	82 5a       	subi	r24, 0xA2	; 162
    96d6:	9f 4f       	sbci	r25, 0xFF	; 255
    96d8:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    96dc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    96de:	f8 01       	movw	r30, r16
    96e0:	26 89       	ldd	r18, Z+22	; 0x16
    96e2:	28 37       	cpi	r18, 0x78	; 120
    96e4:	31 f0       	breq	.+12     	; 0x96f2 <tank_map+0xc6>
    96e6:	20 91 30 0b 	lds	r18, 0x0B30
    96ea:	22 23       	and	r18, r18
    96ec:	11 f0       	breq	.+4      	; 0x96f2 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    96ee:	8f ed       	ldi	r24, 0xDF	; 223
    96f0:	90 e2       	ldi	r25, 0x20	; 32
		}
		toggle_counter--;
    96f2:	20 91 03 01 	lds	r18, 0x0103
    96f6:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    96f8:	19 f0       	breq	.+6      	; 0x9700 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    96fa:	20 93 03 01 	sts	0x0103, r18
    96fe:	0b c0       	rjmp	.+22     	; 0x9716 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    9700:	24 e1       	ldi	r18, 0x14	; 20
    9702:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9706:	30 91 30 0b 	lds	r19, 0x0B30
    970a:	21 e0       	ldi	r18, 0x01	; 1
    970c:	23 27       	eor	r18, r19
    970e:	20 93 30 0b 	sts	0x0B30, r18
    9712:	01 c0       	rjmp	.+2      	; 0x9716 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9714:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9716:	bc 01       	movw	r22, r24
    9718:	8f 2d       	mov	r24, r15
    971a:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    971e:	84 e0       	ldi	r24, 0x04	; 4
    9720:	8f 0d       	add	r24, r15
    9722:	0f 90       	pop	r0
    9724:	df 91       	pop	r29
    9726:	cf 91       	pop	r28
    9728:	1f 91       	pop	r17
    972a:	0f 91       	pop	r16
    972c:	ff 90       	pop	r15
    972e:	08 95       	ret

00009730 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    9730:	ef 92       	push	r14
    9732:	ff 92       	push	r15
    9734:	0f 93       	push	r16
    9736:	1f 93       	push	r17
    9738:	cf 93       	push	r28
    973a:	df 93       	push	r29
    973c:	00 d0       	rcall	.+0      	; 0x973e <shot_map+0xe>
    973e:	cd b7       	in	r28, 0x3d	; 61
    9740:	de b7       	in	r29, 0x3e	; 62
    9742:	f6 2e       	mov	r15, r22
	char looped = 0;
    9744:	19 82       	std	Y+1, r1	; 0x01
    9746:	8c 01       	movw	r16, r24
    9748:	08 5d       	subi	r16, 0xD8	; 216
    974a:	1f 4f       	sbci	r17, 0xFF	; 255
    974c:	82 e0       	ldi	r24, 0x02	; 2
    974e:	e8 2e       	mov	r14, r24
    9750:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    9752:	20 e0       	ldi	r18, 0x00	; 0
    9754:	f8 01       	movw	r30, r16
    9756:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9758:	80 81       	ld	r24, Z
    975a:	88 23       	and	r24, r24
    975c:	41 f1       	breq	.+80     	; 0x97ae <shot_map+0x7e>
    975e:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    9760:	80 81       	ld	r24, Z
    9762:	81 30       	cpi	r24, 0x01	; 1
    9764:	71 f0       	breq	.+28     	; 0x9782 <shot_map+0x52>
    9766:	f0 f0       	brcs	.+60     	; 0x97a4 <shot_map+0x74>
    9768:	82 30       	cpi	r24, 0x02	; 2
    976a:	a1 f0       	breq	.+40     	; 0x9794 <shot_map+0x64>
    976c:	83 30       	cpi	r24, 0x03	; 3
    976e:	d1 f4       	brne	.+52     	; 0x97a4 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9770:	be 01       	movw	r22, r28
    9772:	6f 5f       	subi	r22, 0xFF	; 255
    9774:	7f 4f       	sbci	r23, 0xFF	; 255
    9776:	c8 01       	movw	r24, r16
    9778:	0a 96       	adiw	r24, 0x0a	; 10
    977a:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    977e:	21 e0       	ldi	r18, 0x01	; 1
    9780:	18 c0       	rjmp	.+48     	; 0x97b2 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9782:	be 01       	movw	r22, r28
    9784:	6f 5f       	subi	r22, 0xFF	; 255
    9786:	7f 4f       	sbci	r23, 0xFF	; 255
    9788:	c8 01       	movw	r24, r16
    978a:	0a 96       	adiw	r24, 0x0a	; 10
    978c:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    9790:	20 e0       	ldi	r18, 0x00	; 0
    9792:	0f c0       	rjmp	.+30     	; 0x97b2 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9794:	be 01       	movw	r22, r28
    9796:	6f 5f       	subi	r22, 0xFF	; 255
    9798:	7f 4f       	sbci	r23, 0xFF	; 255
    979a:	c8 01       	movw	r24, r16
    979c:	0e 94 ee 45 	call	0x8bdc	; 0x8bdc <LBGetNextFrame>
    97a0:	22 e0       	ldi	r18, 0x02	; 2
    97a2:	07 c0       	rjmp	.+14     	; 0x97b2 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    97a4:	be 01       	movw	r22, r28
    97a6:	6f 5f       	subi	r22, 0xFF	; 255
    97a8:	7f 4f       	sbci	r23, 0xFF	; 255
    97aa:	c8 01       	movw	r24, r16
    97ac:	ef cf       	rjmp	.-34     	; 0x978c <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    97ae:	8f ed       	ldi	r24, 0xDF	; 223
    97b0:	90 e2       	ldi	r25, 0x20	; 32
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    97b2:	42 2f       	mov	r20, r18
    97b4:	bc 01       	movw	r22, r24
    97b6:	8f 2d       	mov	r24, r15
    97b8:	2a 83       	std	Y+2, r18	; 0x02
    97ba:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
    97be:	f3 94       	inc	r15
    97c0:	0e 5d       	subi	r16, 0xDE	; 222
    97c2:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    97c4:	2a 81       	ldd	r18, Y+2	; 0x02
    97c6:	fe 10       	cpse	r15, r14
    97c8:	c5 cf       	rjmp	.-118    	; 0x9754 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    97ca:	8f 2d       	mov	r24, r15
    97cc:	0f 90       	pop	r0
    97ce:	0f 90       	pop	r0
    97d0:	df 91       	pop	r29
    97d2:	cf 91       	pop	r28
    97d4:	1f 91       	pop	r17
    97d6:	0f 91       	pop	r16
    97d8:	ff 90       	pop	r15
    97da:	ef 90       	pop	r14
    97dc:	08 95       	ret

000097de <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    97de:	cf 93       	push	r28
    97e0:	df 93       	push	r29
    97e2:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    97e4:	88 81       	ld	r24, Y
    97e6:	81 11       	cpse	r24, r1
    97e8:	15 c0       	rjmp	.+42     	; 0x9814 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    97ea:	69 81       	ldd	r22, Y+1	; 0x01
    97ec:	70 e0       	ldi	r23, 0x00	; 0
    97ee:	80 e0       	ldi	r24, 0x00	; 0
    97f0:	90 e0       	ldi	r25, 0x00	; 0
    97f2:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    97f6:	25 e6       	ldi	r18, 0x65	; 101
    97f8:	38 e8       	ldi	r19, 0x88	; 136
    97fa:	48 e8       	ldi	r20, 0x88	; 136
    97fc:	5c e3       	ldi	r21, 0x3C	; 60
    97fe:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9802:	9b 01       	movw	r18, r22
    9804:	ac 01       	movw	r20, r24
    9806:	6e 81       	ldd	r22, Y+6	; 0x06
    9808:	7f 81       	ldd	r23, Y+7	; 0x07
    980a:	88 85       	ldd	r24, Y+8	; 0x08
    980c:	99 85       	ldd	r25, Y+9	; 0x09
    980e:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9812:	2d c0       	rjmp	.+90     	; 0x986e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    9814:	81 30       	cpi	r24, 0x01	; 1
    9816:	a9 f4       	brne	.+42     	; 0x9842 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9818:	69 81       	ldd	r22, Y+1	; 0x01
    981a:	70 e0       	ldi	r23, 0x00	; 0
    981c:	80 e0       	ldi	r24, 0x00	; 0
    981e:	90 e0       	ldi	r25, 0x00	; 0
    9820:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    9824:	25 e6       	ldi	r18, 0x65	; 101
    9826:	38 e8       	ldi	r19, 0x88	; 136
    9828:	48 e8       	ldi	r20, 0x88	; 136
    982a:	5c e3       	ldi	r21, 0x3C	; 60
    982c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9830:	9b 01       	movw	r18, r22
    9832:	ac 01       	movw	r20, r24
    9834:	6a 81       	ldd	r22, Y+2	; 0x02
    9836:	7b 81       	ldd	r23, Y+3	; 0x03
    9838:	8c 81       	ldd	r24, Y+4	; 0x04
    983a:	9d 81       	ldd	r25, Y+5	; 0x05
    983c:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    9840:	31 c0       	rjmp	.+98     	; 0x98a4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    9842:	82 30       	cpi	r24, 0x02	; 2
    9844:	c9 f4       	brne	.+50     	; 0x9878 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9846:	69 81       	ldd	r22, Y+1	; 0x01
    9848:	70 e0       	ldi	r23, 0x00	; 0
    984a:	80 e0       	ldi	r24, 0x00	; 0
    984c:	90 e0       	ldi	r25, 0x00	; 0
    984e:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    9852:	25 e6       	ldi	r18, 0x65	; 101
    9854:	38 e8       	ldi	r19, 0x88	; 136
    9856:	48 e8       	ldi	r20, 0x88	; 136
    9858:	5c e3       	ldi	r21, 0x3C	; 60
    985a:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    985e:	9b 01       	movw	r18, r22
    9860:	ac 01       	movw	r20, r24
    9862:	6e 81       	ldd	r22, Y+6	; 0x06
    9864:	7f 81       	ldd	r23, Y+7	; 0x07
    9866:	88 85       	ldd	r24, Y+8	; 0x08
    9868:	99 85       	ldd	r25, Y+9	; 0x09
    986a:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    986e:	6e 83       	std	Y+6, r22	; 0x06
    9870:	7f 83       	std	Y+7, r23	; 0x07
    9872:	88 87       	std	Y+8, r24	; 0x08
    9874:	99 87       	std	Y+9, r25	; 0x09
    9876:	1a c0       	rjmp	.+52     	; 0x98ac <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    9878:	83 30       	cpi	r24, 0x03	; 3
    987a:	c1 f4       	brne	.+48     	; 0x98ac <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    987c:	69 81       	ldd	r22, Y+1	; 0x01
    987e:	70 e0       	ldi	r23, 0x00	; 0
    9880:	80 e0       	ldi	r24, 0x00	; 0
    9882:	90 e0       	ldi	r25, 0x00	; 0
    9884:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    9888:	25 e6       	ldi	r18, 0x65	; 101
    988a:	38 e8       	ldi	r19, 0x88	; 136
    988c:	48 e8       	ldi	r20, 0x88	; 136
    988e:	5c e3       	ldi	r21, 0x3C	; 60
    9890:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9894:	9b 01       	movw	r18, r22
    9896:	ac 01       	movw	r20, r24
    9898:	6a 81       	ldd	r22, Y+2	; 0x02
    989a:	7b 81       	ldd	r23, Y+3	; 0x03
    989c:	8c 81       	ldd	r24, Y+4	; 0x04
    989e:	9d 81       	ldd	r25, Y+5	; 0x05
    98a0:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    98a4:	6a 83       	std	Y+2, r22	; 0x02
    98a6:	7b 83       	std	Y+3, r23	; 0x03
    98a8:	8c 83       	std	Y+4, r24	; 0x04
    98aa:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    98ac:	df 91       	pop	r29
    98ae:	cf 91       	pop	r28
    98b0:	08 95       	ret

000098b2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    98b2:	80 5a       	subi	r24, 0xA0	; 160
    98b4:	93 4f       	sbci	r25, 0xF3	; 243
    98b6:	fc 01       	movw	r30, r24
    98b8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    98ba:	81 30       	cpi	r24, 0x01	; 1
    98bc:	21 f0       	breq	.+8      	; 0x98c6 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    98be:	82 30       	cpi	r24, 0x02	; 2
    98c0:	21 f0       	breq	.+8      	; 0x98ca <solid_square_tile+0x18>

	return 0;
    98c2:	80 e0       	ldi	r24, 0x00	; 0
    98c4:	08 95       	ret
    98c6:	81 e0       	ldi	r24, 0x01	; 1
    98c8:	08 95       	ret
    98ca:	82 e0       	ldi	r24, 0x02	; 2
}
    98cc:	08 95       	ret

000098ce <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    98ce:	5f 92       	push	r5
    98d0:	6f 92       	push	r6
    98d2:	7f 92       	push	r7
    98d4:	8f 92       	push	r8
    98d6:	9f 92       	push	r9
    98d8:	af 92       	push	r10
    98da:	bf 92       	push	r11
    98dc:	cf 92       	push	r12
    98de:	df 92       	push	r13
    98e0:	ef 92       	push	r14
    98e2:	ff 92       	push	r15
    98e4:	0f 93       	push	r16
    98e6:	1f 93       	push	r17
    98e8:	cf 93       	push	r28
    98ea:	df 93       	push	r29
    98ec:	f6 2e       	mov	r15, r22
    98ee:	d4 2e       	mov	r13, r20
    98f0:	92 2e       	mov	r9, r18
    98f2:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    98f4:	fc 01       	movw	r30, r24
    98f6:	e0 5a       	subi	r30, 0xA0	; 160
    98f8:	f3 4f       	sbci	r31, 0xF3	; 243
    98fa:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    98fc:	6e e1       	ldi	r22, 0x1E	; 30
    98fe:	70 e0       	ldi	r23, 0x00	; 0
    9900:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    9904:	d8 2f       	mov	r29, r24
    9906:	dd 0f       	add	r29, r29
    9908:	dd 0f       	add	r29, r29
    990a:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    990c:	6d 5f       	subi	r22, 0xFD	; 253
    990e:	7f 4f       	sbci	r23, 0xFF	; 255
    9910:	c6 2f       	mov	r28, r22
    9912:	cc 0f       	add	r28, r28
    9914:	cc 0f       	add	r28, r28
    9916:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    9918:	13 30       	cpi	r17, 0x03	; 3
    991a:	11 f0       	breq	.+4      	; 0x9920 <solid_directional_tile+0x52>
    991c:	16 30       	cpi	r17, 0x06	; 6
    991e:	a1 f5       	brne	.+104    	; 0x9988 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    9920:	6d 2c       	mov	r6, r13
    9922:	6b 0c       	add	r6, r11
    9924:	27 e0       	ldi	r18, 0x07	; 7
    9926:	72 2e       	mov	r7, r18
    9928:	7d 0e       	add	r7, r29
    992a:	37 e0       	ldi	r19, 0x07	; 7
    992c:	83 2e       	mov	r8, r19
    992e:	8c 0e       	add	r8, r28
    9930:	a6 2c       	mov	r10, r6
    9932:	cf 2c       	mov	r12, r15
    9934:	ed 2c       	mov	r14, r13
    9936:	0f 2d       	mov	r16, r15
    9938:	2c 2f       	mov	r18, r28
    993a:	47 2d       	mov	r20, r7
    993c:	68 2d       	mov	r22, r8
    993e:	8d 2f       	mov	r24, r29
    9940:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    9944:	81 11       	cpse	r24, r1
    9946:	59 c0       	rjmp	.+178    	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    9948:	5f 2c       	mov	r5, r15
    994a:	59 0c       	add	r5, r9
    994c:	ad 2c       	mov	r10, r13
    994e:	c5 2c       	mov	r12, r5
    9950:	2c 2f       	mov	r18, r28
    9952:	47 2d       	mov	r20, r7
    9954:	68 2d       	mov	r22, r8
    9956:	8d 2f       	mov	r24, r29
    9958:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    995c:	81 11       	cpse	r24, r1
    995e:	4d c0       	rjmp	.+154    	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    9960:	a6 2c       	mov	r10, r6
    9962:	05 2d       	mov	r16, r5
    9964:	2c 2f       	mov	r18, r28
    9966:	47 2d       	mov	r20, r7
    9968:	68 2d       	mov	r22, r8
    996a:	8d 2f       	mov	r24, r29
    996c:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    9970:	81 11       	cpse	r24, r1
    9972:	43 c0       	rjmp	.+134    	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    9974:	e6 2c       	mov	r14, r6
    9976:	0f 2d       	mov	r16, r15
    9978:	2c 2f       	mov	r18, r28
    997a:	47 2d       	mov	r20, r7
    997c:	68 2d       	mov	r22, r8
    997e:	8d 2f       	mov	r24, r29
    9980:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    9984:	81 11       	cpse	r24, r1
    9986:	39 c0       	rjmp	.+114    	; 0x99fa <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    9988:	8c ef       	ldi	r24, 0xFC	; 252
    998a:	81 0f       	add	r24, r17
    998c:	82 30       	cpi	r24, 0x02	; 2
    998e:	98 f5       	brcc	.+102    	; 0x99f6 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    9990:	bd 0c       	add	r11, r13
    9992:	87 e0       	ldi	r24, 0x07	; 7
    9994:	78 2e       	mov	r7, r24
    9996:	7c 0e       	add	r7, r28
    9998:	97 e0       	ldi	r25, 0x07	; 7
    999a:	89 2e       	mov	r8, r25
    999c:	8d 0e       	add	r8, r29
    999e:	ab 2c       	mov	r10, r11
    99a0:	cf 2c       	mov	r12, r15
    99a2:	ed 2c       	mov	r14, r13
    99a4:	0f 2d       	mov	r16, r15
    99a6:	27 2d       	mov	r18, r7
    99a8:	48 2d       	mov	r20, r8
    99aa:	6c 2f       	mov	r22, r28
    99ac:	8d 2f       	mov	r24, r29
    99ae:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    99b2:	81 11       	cpse	r24, r1
    99b4:	22 c0       	rjmp	.+68     	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    99b6:	9f 0c       	add	r9, r15
    99b8:	ad 2c       	mov	r10, r13
    99ba:	c9 2c       	mov	r12, r9
    99bc:	27 2d       	mov	r18, r7
    99be:	48 2d       	mov	r20, r8
    99c0:	6c 2f       	mov	r22, r28
    99c2:	8d 2f       	mov	r24, r29
    99c4:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    99c8:	81 11       	cpse	r24, r1
    99ca:	17 c0       	rjmp	.+46     	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    99cc:	ab 2c       	mov	r10, r11
    99ce:	09 2d       	mov	r16, r9
    99d0:	27 2d       	mov	r18, r7
    99d2:	48 2d       	mov	r20, r8
    99d4:	6c 2f       	mov	r22, r28
    99d6:	8d 2f       	mov	r24, r29
    99d8:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    99dc:	81 11       	cpse	r24, r1
    99de:	0d c0       	rjmp	.+26     	; 0x99fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    99e0:	eb 2c       	mov	r14, r11
    99e2:	0f 2d       	mov	r16, r15
    99e4:	27 2d       	mov	r18, r7
    99e6:	48 2d       	mov	r20, r8
    99e8:	6c 2f       	mov	r22, r28
    99ea:	8d 2f       	mov	r24, r29
    99ec:	0e 94 ba 46 	call	0x8d74	; 0x8d74 <LBLineIntersect>
    99f0:	81 11       	cpse	r24, r1
    99f2:	03 c0       	rjmp	.+6      	; 0x99fa <solid_directional_tile+0x12c>
    99f4:	03 c0       	rjmp	.+6      	; 0x99fc <solid_directional_tile+0x12e>
	}
	
	return 0;
    99f6:	80 e0       	ldi	r24, 0x00	; 0
    99f8:	01 c0       	rjmp	.+2      	; 0x99fc <solid_directional_tile+0x12e>
    99fa:	81 2f       	mov	r24, r17
}
    99fc:	df 91       	pop	r29
    99fe:	cf 91       	pop	r28
    9a00:	1f 91       	pop	r17
    9a02:	0f 91       	pop	r16
    9a04:	ff 90       	pop	r15
    9a06:	ef 90       	pop	r14
    9a08:	df 90       	pop	r13
    9a0a:	cf 90       	pop	r12
    9a0c:	bf 90       	pop	r11
    9a0e:	af 90       	pop	r10
    9a10:	9f 90       	pop	r9
    9a12:	8f 90       	pop	r8
    9a14:	7f 90       	pop	r7
    9a16:	6f 90       	pop	r6
    9a18:	5f 90       	pop	r5
    9a1a:	08 95       	ret

00009a1c <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    9a1c:	af 92       	push	r10
    9a1e:	cf 92       	push	r12
    9a20:	ef 92       	push	r14
    9a22:	0f 93       	push	r16
    9a24:	1f 93       	push	r17
    9a26:	cf 93       	push	r28
    9a28:	df 93       	push	r29
    9a2a:	ec 01       	movw	r28, r24
    9a2c:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    9a2e:	fb 01       	movw	r30, r22
    9a30:	66 81       	ldd	r22, Z+6	; 0x06
    9a32:	77 81       	ldd	r23, Z+7	; 0x07
    9a34:	80 85       	ldd	r24, Z+8	; 0x08
    9a36:	91 85       	ldd	r25, Z+9	; 0x09
    9a38:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9a3c:	e6 2e       	mov	r14, r22
    9a3e:	f8 01       	movw	r30, r16
    9a40:	62 81       	ldd	r22, Z+2	; 0x02
    9a42:	73 81       	ldd	r23, Z+3	; 0x03
    9a44:	84 81       	ldd	r24, Z+4	; 0x04
    9a46:	95 81       	ldd	r25, Z+5	; 0x05
    9a48:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9a4c:	06 2f       	mov	r16, r22
    9a4e:	6e 81       	ldd	r22, Y+6	; 0x06
    9a50:	7f 81       	ldd	r23, Y+7	; 0x07
    9a52:	88 85       	ldd	r24, Y+8	; 0x08
    9a54:	99 85       	ldd	r25, Y+9	; 0x09
    9a56:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9a5a:	16 2f       	mov	r17, r22
    9a5c:	6a 81       	ldd	r22, Y+2	; 0x02
    9a5e:	7b 81       	ldd	r23, Y+3	; 0x03
    9a60:	8c 81       	ldd	r24, Y+4	; 0x04
    9a62:	9d 81       	ldd	r25, Y+5	; 0x05
    9a64:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9a68:	86 2f       	mov	r24, r22
    9a6a:	97 e0       	ldi	r25, 0x07	; 7
    9a6c:	a9 2e       	mov	r10, r25
    9a6e:	27 e0       	ldi	r18, 0x07	; 7
    9a70:	c2 2e       	mov	r12, r18
    9a72:	2e e0       	ldi	r18, 0x0E	; 14
    9a74:	4e e0       	ldi	r20, 0x0E	; 14
    9a76:	61 2f       	mov	r22, r17
    9a78:	0e 94 90 46 	call	0x8d20	; 0x8d20 <LBCollides>
    9a7c:	88 23       	and	r24, r24
    9a7e:	39 f0       	breq	.+14     	; 0x9a8e <player_shot+0x72>
    9a80:	91 e0       	ldi	r25, 0x01	; 1
    9a82:	8e 89       	ldd	r24, Y+22	; 0x16
    9a84:	88 37       	cpi	r24, 0x78	; 120
    9a86:	09 f0       	breq	.+2      	; 0x9a8a <player_shot+0x6e>
    9a88:	90 e0       	ldi	r25, 0x00	; 0
    9a8a:	89 2f       	mov	r24, r25
    9a8c:	01 c0       	rjmp	.+2      	; 0x9a90 <player_shot+0x74>
    9a8e:	80 e0       	ldi	r24, 0x00	; 0
}
    9a90:	df 91       	pop	r29
    9a92:	cf 91       	pop	r28
    9a94:	1f 91       	pop	r17
    9a96:	0f 91       	pop	r16
    9a98:	ef 90       	pop	r14
    9a9a:	cf 90       	pop	r12
    9a9c:	af 90       	pop	r10
    9a9e:	08 95       	ret

00009aa0 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    9aa0:	cf 92       	push	r12
    9aa2:	df 92       	push	r13
    9aa4:	ef 92       	push	r14
    9aa6:	ff 92       	push	r15
    9aa8:	cf 93       	push	r28
    9aaa:	df 93       	push	r29
    9aac:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9aae:	ca 80       	ldd	r12, Y+2	; 0x02
    9ab0:	db 80       	ldd	r13, Y+3	; 0x03
    9ab2:	ec 80       	ldd	r14, Y+4	; 0x04
    9ab4:	fd 80       	ldd	r15, Y+5	; 0x05
    9ab6:	20 e0       	ldi	r18, 0x00	; 0
    9ab8:	30 e0       	ldi	r19, 0x00	; 0
    9aba:	a9 01       	movw	r20, r18
    9abc:	c7 01       	movw	r24, r14
    9abe:	b6 01       	movw	r22, r12
    9ac0:	0e 94 3f 59 	call	0xb27e	; 0xb27e <__cmpsf2>
    9ac4:	87 fd       	sbrc	r24, 7
    9ac6:	31 c0       	rjmp	.+98     	; 0x9b2a <collision_detect_boundries+0x8a>
    9ac8:	20 e0       	ldi	r18, 0x00	; 0
    9aca:	30 e0       	ldi	r19, 0x00	; 0
    9acc:	40 ee       	ldi	r20, 0xE0	; 224
    9ace:	50 e4       	ldi	r21, 0x40	; 64
    9ad0:	c7 01       	movw	r24, r14
    9ad2:	b6 01       	movw	r22, r12
    9ad4:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9ad8:	20 e0       	ldi	r18, 0x00	; 0
    9ada:	30 e0       	ldi	r19, 0x00	; 0
    9adc:	40 e7       	ldi	r20, 0x70	; 112
    9ade:	53 e4       	ldi	r21, 0x43	; 67
    9ae0:	0e 94 89 5a 	call	0xb512	; 0xb512 <__gesf2>
    9ae4:	18 16       	cp	r1, r24
    9ae6:	0c f1       	brlt	.+66     	; 0x9b2a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9ae8:	ce 80       	ldd	r12, Y+6	; 0x06
    9aea:	df 80       	ldd	r13, Y+7	; 0x07
    9aec:	e8 84       	ldd	r14, Y+8	; 0x08
    9aee:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    9af0:	20 e0       	ldi	r18, 0x00	; 0
    9af2:	30 e0       	ldi	r19, 0x00	; 0
    9af4:	40 ec       	ldi	r20, 0xC0	; 192
    9af6:	51 e4       	ldi	r21, 0x41	; 65
    9af8:	c7 01       	movw	r24, r14
    9afa:	b6 01       	movw	r22, r12
    9afc:	0e 94 3f 59 	call	0xb27e	; 0xb27e <__cmpsf2>
    9b00:	87 fd       	sbrc	r24, 7
    9b02:	13 c0       	rjmp	.+38     	; 0x9b2a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9b04:	20 e0       	ldi	r18, 0x00	; 0
    9b06:	30 e0       	ldi	r19, 0x00	; 0
    9b08:	40 ee       	ldi	r20, 0xE0	; 224
    9b0a:	50 e4       	ldi	r21, 0x40	; 64
    9b0c:	c7 01       	movw	r24, r14
    9b0e:	b6 01       	movw	r22, r12
    9b10:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    9b14:	c1 e0       	ldi	r28, 0x01	; 1
    9b16:	20 e0       	ldi	r18, 0x00	; 0
    9b18:	30 e0       	ldi	r19, 0x00	; 0
    9b1a:	40 e6       	ldi	r20, 0x60	; 96
    9b1c:	53 e4       	ldi	r21, 0x43	; 67
    9b1e:	0e 94 89 5a 	call	0xb512	; 0xb512 <__gesf2>
    9b22:	18 16       	cp	r1, r24
    9b24:	1c f0       	brlt	.+6      	; 0x9b2c <collision_detect_boundries+0x8c>
    9b26:	c0 e0       	ldi	r28, 0x00	; 0
    9b28:	01 c0       	rjmp	.+2      	; 0x9b2c <collision_detect_boundries+0x8c>
	{
		return 1;
    9b2a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    9b2c:	8c 2f       	mov	r24, r28
    9b2e:	df 91       	pop	r29
    9b30:	cf 91       	pop	r28
    9b32:	ff 90       	pop	r15
    9b34:	ef 90       	pop	r14
    9b36:	df 90       	pop	r13
    9b38:	cf 90       	pop	r12
    9b3a:	08 95       	ret

00009b3c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    9b3c:	ff 92       	push	r15
    9b3e:	0f 93       	push	r16
    9b40:	1f 93       	push	r17
    9b42:	cf 93       	push	r28
    9b44:	df 93       	push	r29
    9b46:	8c 01       	movw	r16, r24
    9b48:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9b4a:	20 e0       	ldi	r18, 0x00	; 0
    9b4c:	30 e0       	ldi	r19, 0x00	; 0
    9b4e:	40 e0       	ldi	r20, 0x00	; 0
    9b50:	5e e3       	ldi	r21, 0x3E	; 62
    9b52:	fc 01       	movw	r30, r24
    9b54:	66 81       	ldd	r22, Z+6	; 0x06
    9b56:	77 81       	ldd	r23, Z+7	; 0x07
    9b58:	80 85       	ldd	r24, Z+8	; 0x08
    9b5a:	91 85       	ldd	r25, Z+9	; 0x09
    9b5c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9b60:	20 e0       	ldi	r18, 0x00	; 0
    9b62:	30 e0       	ldi	r19, 0x00	; 0
    9b64:	40 e4       	ldi	r20, 0x40	; 64
    9b66:	50 e4       	ldi	r21, 0x40	; 64
    9b68:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    9b6c:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9b70:	fe e1       	ldi	r31, 0x1E	; 30
    9b72:	6f 9f       	mul	r22, r31
    9b74:	e0 01       	movw	r28, r0
    9b76:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9b78:	20 e0       	ldi	r18, 0x00	; 0
    9b7a:	30 e0       	ldi	r19, 0x00	; 0
    9b7c:	40 e0       	ldi	r20, 0x00	; 0
    9b7e:	5e e3       	ldi	r21, 0x3E	; 62
    9b80:	f8 01       	movw	r30, r16
    9b82:	62 81       	ldd	r22, Z+2	; 0x02
    9b84:	73 81       	ldd	r23, Z+3	; 0x03
    9b86:	84 81       	ldd	r24, Z+4	; 0x04
    9b88:	95 81       	ldd	r25, Z+5	; 0x05
    9b8a:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9b8e:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9b92:	c6 0f       	add	r28, r22
    9b94:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    9b96:	f8 01       	movw	r30, r16
    9b98:	81 8d       	ldd	r24, Z+25	; 0x19
    9b9a:	88 23       	and	r24, r24
    9b9c:	c9 f0       	breq	.+50     	; 0x9bd0 <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    9b9e:	40 e0       	ldi	r20, 0x00	; 0
    9ba0:	50 e0       	ldi	r21, 0x00	; 0
    9ba2:	61 e0       	ldi	r22, 0x01	; 1
    9ba4:	8a e0       	ldi	r24, 0x0A	; 10
    9ba6:	8f 0d       	add	r24, r15
    9ba8:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    9bac:	ce 01       	movw	r24, r28
    9bae:	6e e1       	ldi	r22, 0x1E	; 30
    9bb0:	70 e0       	ldi	r23, 0x00	; 0
    9bb2:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    9bb6:	6c 5f       	subi	r22, 0xFC	; 252
    9bb8:	40 e0       	ldi	r20, 0x00	; 0
    9bba:	51 e2       	ldi	r21, 0x21	; 33
    9bbc:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    9bc0:	87 e0       	ldi	r24, 0x07	; 7
    9bc2:	fe 01       	movw	r30, r28
    9bc4:	e0 5a       	subi	r30, 0xA0	; 160
    9bc6:	f3 4f       	sbci	r31, 0xF3	; 243
    9bc8:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    9bca:	82 e3       	ldi	r24, 0x32	; 50
    9bcc:	f8 01       	movw	r30, r16
    9bce:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    9bd0:	f8 01       	movw	r30, r16
    9bd2:	80 8d       	ldd	r24, Z+24	; 0x18
    9bd4:	88 23       	and	r24, r24
    9bd6:	b1 f0       	breq	.+44     	; 0x9c04 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    9bd8:	40 e0       	ldi	r20, 0x00	; 0
    9bda:	50 e0       	ldi	r21, 0x00	; 0
    9bdc:	61 e0       	ldi	r22, 0x01	; 1
    9bde:	8b e0       	ldi	r24, 0x0B	; 11
    9be0:	8f 0d       	add	r24, r15
    9be2:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    9be6:	ce 01       	movw	r24, r28
    9be8:	6e e1       	ldi	r22, 0x1E	; 30
    9bea:	70 e0       	ldi	r23, 0x00	; 0
    9bec:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    9bf0:	6c 5f       	subi	r22, 0xFC	; 252
    9bf2:	4a ef       	ldi	r20, 0xFA	; 250
    9bf4:	50 e2       	ldi	r21, 0x20	; 32
    9bf6:	8f 5f       	subi	r24, 0xFF	; 255
    9bf8:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    9bfc:	c0 5a       	subi	r28, 0xA0	; 160
    9bfe:	d3 4f       	sbci	r29, 0xF3	; 243
    9c00:	89 e0       	ldi	r24, 0x09	; 9
    9c02:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9c04:	f8 01       	movw	r30, r16
    9c06:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    9c08:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    9c0a:	83 89       	ldd	r24, Z+19	; 0x13
    9c0c:	81 60       	ori	r24, 0x01	; 1
    9c0e:	83 8b       	std	Z+19, r24	; 0x13
}
    9c10:	df 91       	pop	r29
    9c12:	cf 91       	pop	r28
    9c14:	1f 91       	pop	r17
    9c16:	0f 91       	pop	r16
    9c18:	ff 90       	pop	r15
    9c1a:	08 95       	ret

00009c1c <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    9c1c:	fc 01       	movw	r30, r24
    9c1e:	8e e1       	ldi	r24, 0x1E	; 30
    9c20:	48 9f       	mul	r20, r24
    9c22:	a0 01       	movw	r20, r0
    9c24:	11 24       	eor	r1, r1
    9c26:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9c28:	64 0f       	add	r22, r20
    9c2a:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9c2c:	21 11       	cpse	r18, r1
    9c2e:	05 c0       	rjmp	.+10     	; 0x9c3a <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9c30:	71 83       	std	Z+1, r23	; 0x01
    9c32:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9c34:	6f 5f       	subi	r22, 0xFF	; 255
    9c36:	7f 4f       	sbci	r23, 0xFF	; 255
    9c38:	12 c0       	rjmp	.+36     	; 0x9c5e <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    9c3a:	21 30       	cpi	r18, 0x01	; 1
    9c3c:	19 f4       	brne	.+6      	; 0x9c44 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    9c3e:	cb 01       	movw	r24, r22
    9c40:	01 96       	adiw	r24, 0x01	; 1
    9c42:	04 c0       	rjmp	.+8      	; 0x9c4c <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9c44:	22 30       	cpi	r18, 0x02	; 2
    9c46:	39 f4       	brne	.+14     	; 0x9c56 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9c48:	cb 01       	movw	r24, r22
    9c4a:	4e 96       	adiw	r24, 0x1e	; 30
    9c4c:	91 83       	std	Z+1, r25	; 0x01
    9c4e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9c50:	61 5e       	subi	r22, 0xE1	; 225
    9c52:	7f 4f       	sbci	r23, 0xFF	; 255
    9c54:	04 c0       	rjmp	.+8      	; 0x9c5e <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9c56:	71 83       	std	Z+1, r23	; 0x01
    9c58:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9c5a:	62 5e       	subi	r22, 0xE2	; 226
    9c5c:	7f 4f       	sbci	r23, 0xFF	; 255
    9c5e:	73 83       	std	Z+3, r23	; 0x03
    9c60:	62 83       	std	Z+2, r22	; 0x02
    9c62:	08 95       	ret

00009c64 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9c64:	ef 92       	push	r14
    9c66:	ff 92       	push	r15
    9c68:	0f 93       	push	r16
    9c6a:	1f 93       	push	r17
    9c6c:	cf 93       	push	r28
    9c6e:	df 93       	push	r29
    9c70:	ec 01       	movw	r28, r24
    9c72:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9c74:	8e e1       	ldi	r24, 0x1E	; 30
    9c76:	e8 2e       	mov	r14, r24
    9c78:	f1 2c       	mov	r15, r1
    9c7a:	cb 01       	movw	r24, r22
    9c7c:	b7 01       	movw	r22, r14
    9c7e:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    9c82:	6d 5f       	subi	r22, 0xFD	; 253
    9c84:	40 e0       	ldi	r20, 0x00	; 0
    9c86:	50 e0       	ldi	r21, 0x00	; 0
    9c88:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    9c8c:	88 81       	ld	r24, Y
    9c8e:	fe 01       	movw	r30, r28
    9c90:	9c e0       	ldi	r25, 0x0C	; 12
    9c92:	89 9f       	mul	r24, r25
    9c94:	e0 0d       	add	r30, r0
    9c96:	f1 1d       	adc	r31, r1
    9c98:	11 24       	eor	r1, r1
    9c9a:	83 85       	ldd	r24, Z+11	; 0x0b
    9c9c:	94 85       	ldd	r25, Z+12	; 0x0c
    9c9e:	00 97       	sbiw	r24, 0x00	; 0
    9ca0:	41 f0       	breq	.+16     	; 0x9cb2 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    9ca2:	b7 01       	movw	r22, r14
    9ca4:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    9ca8:	6d 5f       	subi	r22, 0xFD	; 253
    9caa:	40 e0       	ldi	r20, 0x00	; 0
    9cac:	50 e0       	ldi	r21, 0x00	; 0
    9cae:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    9cb2:	88 81       	ld	r24, Y
    9cb4:	fe 01       	movw	r30, r28
    9cb6:	9c e0       	ldi	r25, 0x0C	; 12
    9cb8:	89 9f       	mul	r24, r25
    9cba:	e0 0d       	add	r30, r0
    9cbc:	f1 1d       	adc	r31, r1
    9cbe:	11 24       	eor	r1, r1
    9cc0:	14 87       	std	Z+12, r17	; 0x0c
    9cc2:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    9cc4:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    9cc6:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    9cc8:	82 30       	cpi	r24, 0x02	; 2
    9cca:	11 f0       	breq	.+4      	; 0x9cd0 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    9ccc:	88 83       	st	Y, r24
    9cce:	01 c0       	rjmp	.+2      	; 0x9cd2 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    9cd0:	18 82       	st	Y, r1
	}
}
    9cd2:	df 91       	pop	r29
    9cd4:	cf 91       	pop	r28
    9cd6:	1f 91       	pop	r17
    9cd8:	0f 91       	pop	r16
    9cda:	ff 90       	pop	r15
    9cdc:	ef 90       	pop	r14
    9cde:	08 95       	ret

00009ce0 <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    9ce0:	6f 92       	push	r6
    9ce2:	7f 92       	push	r7
    9ce4:	8f 92       	push	r8
    9ce6:	9f 92       	push	r9
    9ce8:	af 92       	push	r10
    9cea:	bf 92       	push	r11
    9cec:	cf 92       	push	r12
    9cee:	df 92       	push	r13
    9cf0:	ef 92       	push	r14
    9cf2:	ff 92       	push	r15
    9cf4:	0f 93       	push	r16
    9cf6:	1f 93       	push	r17
    9cf8:	cf 93       	push	r28
    9cfa:	df 93       	push	r29
    9cfc:	00 d0       	rcall	.+0      	; 0x9cfe <collision_detect_shot+0x1e>
    9cfe:	00 d0       	rcall	.+0      	; 0x9d00 <collision_detect_shot+0x20>
    9d00:	1f 92       	push	r1
    9d02:	cd b7       	in	r28, 0x3d	; 61
    9d04:	de b7       	in	r29, 0x3e	; 62
    9d06:	6c 01       	movw	r12, r24
    9d08:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    9d0a:	1a 82       	std	Y+2, r1	; 0x02
    9d0c:	19 82       	std	Y+1, r1	; 0x01
    9d0e:	1c 82       	std	Y+4, r1	; 0x04
    9d10:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9d12:	20 e0       	ldi	r18, 0x00	; 0
    9d14:	30 e0       	ldi	r19, 0x00	; 0
    9d16:	40 e0       	ldi	r20, 0x00	; 0
    9d18:	5e e3       	ldi	r21, 0x3E	; 62
    9d1a:	fb 01       	movw	r30, r22
    9d1c:	66 81       	ldd	r22, Z+6	; 0x06
    9d1e:	77 81       	ldd	r23, Z+7	; 0x07
    9d20:	80 85       	ldd	r24, Z+8	; 0x08
    9d22:	91 85       	ldd	r25, Z+9	; 0x09
    9d24:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9d28:	20 e0       	ldi	r18, 0x00	; 0
    9d2a:	30 e0       	ldi	r19, 0x00	; 0
    9d2c:	40 e4       	ldi	r20, 0x40	; 64
    9d2e:	50 e4       	ldi	r21, 0x40	; 64
    9d30:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    9d34:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9d38:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    9d3a:	20 e0       	ldi	r18, 0x00	; 0
    9d3c:	30 e0       	ldi	r19, 0x00	; 0
    9d3e:	40 e0       	ldi	r20, 0x00	; 0
    9d40:	5e e3       	ldi	r21, 0x3E	; 62
    9d42:	f7 01       	movw	r30, r14
    9d44:	62 81       	ldd	r22, Z+2	; 0x02
    9d46:	73 81       	ldd	r23, Z+3	; 0x03
    9d48:	84 81       	ldd	r24, Z+4	; 0x04
    9d4a:	95 81       	ldd	r25, Z+5	; 0x05
    9d4c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    9d50:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9d54:	f7 01       	movw	r30, r14
    9d56:	20 81       	ld	r18, Z
    9d58:	41 2f       	mov	r20, r17
    9d5a:	ce 01       	movw	r24, r28
    9d5c:	01 96       	adiw	r24, 0x01	; 1
    9d5e:	0e 94 0e 4e 	call	0x9c1c	; 0x9c1c <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9d62:	c7 01       	movw	r24, r14
    9d64:	0e 94 50 4d 	call	0x9aa0	; 0x9aa0 <collision_detect_boundries>
    9d68:	88 23       	and	r24, r24
    9d6a:	51 f0       	breq	.+20     	; 0x9d80 <collision_detect_shot+0xa0>
	{
		init_shot_state(shot, shot->shot_type);
    9d6c:	f7 01       	movw	r30, r14
    9d6e:	62 85       	ldd	r22, Z+10	; 0x0a
    9d70:	c7 01       	movw	r24, r14
    9d72:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
		player->active_shots--;
    9d76:	f6 01       	movw	r30, r12
    9d78:	80 89       	ldd	r24, Z+16	; 0x10
    9d7a:	81 50       	subi	r24, 0x01	; 1
    9d7c:	80 8b       	std	Z+16, r24	; 0x10
		return;
    9d7e:	e4 c0       	rjmp	.+456    	; 0x9f48 <collision_detect_shot+0x268>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    9d80:	b7 01       	movw	r22, r14
    9d82:	8e ed       	ldi	r24, 0xDE	; 222
    9d84:	9b e0       	ldi	r25, 0x0B	; 11
    9d86:	0e 94 0e 4d 	call	0x9a1c	; 0x9a1c <player_shot>
    9d8a:	88 23       	and	r24, r24
    9d8c:	99 f0       	breq	.+38     	; 0x9db4 <collision_detect_shot+0xd4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    9d8e:	80 91 5e 0f 	lds	r24, 0x0F5E
    9d92:	8f 5f       	subi	r24, 0xFF	; 255
    9d94:	80 93 5e 0f 	sts	0x0F5E, r24
		player2.score++;
    9d98:	80 91 5d 0f 	lds	r24, 0x0F5D
    9d9c:	8f 5f       	subi	r24, 0xFF	; 255
    9d9e:	80 93 5d 0f 	sts	0x0F5D, r24
		render_score(&player2, 15);
    9da2:	6f e0       	ldi	r22, 0x0F	; 15
    9da4:	8f e4       	ldi	r24, 0x4F	; 79
    9da6:	9f e0       	ldi	r25, 0x0F	; 15
    9da8:	0e 94 29 4a 	call	0x9452	; 0x9452 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    9dac:	0e ed       	ldi	r16, 0xDE	; 222
    9dae:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    9db0:	b1 2c       	mov	r11, r1
    9db2:	20 c0       	rjmp	.+64     	; 0x9df4 <collision_detect_shot+0x114>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    9db4:	b7 01       	movw	r22, r14
    9db6:	8f e4       	ldi	r24, 0x4F	; 79
    9db8:	9f e0       	ldi	r25, 0x0F	; 15
    9dba:	0e 94 0e 4d 	call	0x9a1c	; 0x9a1c <player_shot>
    9dbe:	81 11       	cpse	r24, r1
    9dc0:	06 c0       	rjmp	.+12     	; 0x9dce <collision_detect_shot+0xee>
    9dc2:	ce 01       	movw	r24, r28
    9dc4:	01 96       	adiw	r24, 0x01	; 1
    9dc6:	3c 01       	movw	r6, r24
    9dc8:	a1 2c       	mov	r10, r1
    9dca:	b1 2c       	mov	r11, r1
    9dcc:	48 c0       	rjmp	.+144    	; 0x9e5e <collision_detect_shot+0x17e>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    9dce:	80 91 ed 0b 	lds	r24, 0x0BED
    9dd2:	8f 5f       	subi	r24, 0xFF	; 255
    9dd4:	80 93 ed 0b 	sts	0x0BED, r24
		player1.score++;
    9dd8:	80 91 ec 0b 	lds	r24, 0x0BEC
    9ddc:	8f 5f       	subi	r24, 0xFF	; 255
    9dde:	80 93 ec 0b 	sts	0x0BEC, r24
		render_score(&player1, 0);
    9de2:	60 e0       	ldi	r22, 0x00	; 0
    9de4:	8e ed       	ldi	r24, 0xDE	; 222
    9de6:	9b e0       	ldi	r25, 0x0B	; 11
    9de8:	0e 94 29 4a 	call	0x9452	; 0x9452 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    9dec:	0f e4       	ldi	r16, 0x4F	; 79
    9dee:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    9df0:	2f e0       	ldi	r18, 0x0F	; 15
    9df2:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    9df4:	01 15       	cp	r16, r1
    9df6:	11 05       	cpc	r17, r1
    9df8:	21 f3       	breq	.-56     	; 0x9dc2 <collision_detect_shot+0xe2>
	{
		init_shot_state(shot, shot->shot_type);
    9dfa:	f7 01       	movw	r30, r14
    9dfc:	62 85       	ldd	r22, Z+10	; 0x0a
    9dfe:	c7 01       	movw	r24, r14
    9e00:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
		player->active_shots--;
    9e04:	f6 01       	movw	r30, r12
    9e06:	80 89       	ldd	r24, Z+16	; 0x10
    9e08:	81 50       	subi	r24, 0x01	; 1
    9e0a:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    9e0c:	6b 2d       	mov	r22, r11
    9e0e:	c8 01       	movw	r24, r16
    9e10:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <kill_player>
		SFX_TANK_EXPLODE;
    9e14:	2f ef       	ldi	r18, 0xFF	; 255
    9e16:	40 e1       	ldi	r20, 0x10	; 16
    9e18:	6a e0       	ldi	r22, 0x0A	; 10
    9e1a:	93 c0       	rjmp	.+294    	; 0x9f42 <collision_detect_shot+0x262>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
    9e1c:	11 30       	cpi	r17, 0x01	; 1
    9e1e:	81 f1       	breq	.+96     	; 0x9e80 <collision_detect_shot+0x1a0>
				player->active_shots--;
			}
			SFX_BRICK_EXPLODE;
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    9e20:	f7 01       	movw	r30, r14
    9e22:	66 81       	ldd	r22, Z+6	; 0x06
    9e24:	77 81       	ldd	r23, Z+7	; 0x07
    9e26:	80 85       	ldd	r24, Z+8	; 0x08
    9e28:	91 85       	ldd	r25, Z+9	; 0x09
    9e2a:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9e2e:	46 2f       	mov	r20, r22
    9e30:	f7 01       	movw	r30, r14
    9e32:	62 81       	ldd	r22, Z+2	; 0x02
    9e34:	73 81       	ldd	r23, Z+3	; 0x03
    9e36:	84 81       	ldd	r24, Z+4	; 0x04
    9e38:	95 81       	ldd	r25, Z+5	; 0x05
    9e3a:	4d 83       	std	Y+5, r20	; 0x05
    9e3c:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    9e40:	07 e0       	ldi	r16, 0x07	; 7
    9e42:	27 e0       	ldi	r18, 0x07	; 7
    9e44:	4d 81       	ldd	r20, Y+5	; 0x05
    9e46:	c4 01       	movw	r24, r8
    9e48:	0e 94 67 4c 	call	0x98ce	; 0x98ce <solid_directional_tile>
    9e4c:	81 11       	cpse	r24, r1
    9e4e:	40 c0       	rjmp	.+128    	; 0x9ed0 <collision_detect_shot+0x1f0>
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    9e50:	aa 94       	dec	r10
    9e52:	ab 28       	or	r10, r11
    9e54:	09 f4       	brne	.+2      	; 0x9e58 <collision_detect_shot+0x178>
    9e56:	78 c0       	rjmp	.+240    	; 0x9f48 <collision_detect_shot+0x268>
    9e58:	aa 24       	eor	r10, r10
    9e5a:	a3 94       	inc	r10
    9e5c:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    9e5e:	f3 01       	movw	r30, r6
    9e60:	81 90       	ld	r8, Z+
    9e62:	91 90       	ld	r9, Z+
    9e64:	3f 01       	movw	r6, r30
    9e66:	f4 01       	movw	r30, r8
    9e68:	e0 5a       	subi	r30, 0xA0	; 160
    9e6a:	f3 4f       	sbci	r31, 0xF3	; 243
    9e6c:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    9e6e:	11 23       	and	r17, r17
    9e70:	79 f3       	breq	.-34     	; 0x9e50 <collision_detect_shot+0x170>
		if (tile == L_METAL)
    9e72:	12 30       	cpi	r17, 0x02	; 2
    9e74:	99 f6       	brne	.-90     	; 0x9e1c <collision_detect_shot+0x13c>
		{
			recoil_sprite(&shot->shared);
    9e76:	c7 01       	movw	r24, r14
    9e78:	0e 94 ef 4b 	call	0x97de	; 0x97de <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    9e7c:	f7 01       	movw	r30, r14
    9e7e:	56 c0       	rjmp	.+172    	; 0x9f2c <collision_detect_shot+0x24c>
			SFX_METAL;
			break;
		}
		else if (tile == L_BRICK)
		{
			explode_tile(&tile_animations, tiles[i]);
    9e80:	b4 01       	movw	r22, r8
    9e82:	85 ec       	ldi	r24, 0xC5	; 197
    9e84:	9b e0       	ldi	r25, 0x0B	; 11
    9e86:	0e 94 32 4e 	call	0x9c64	; 0x9c64 <explode_tile>
			recoil_sprite(&shot->shared);
    9e8a:	c7 01       	movw	r24, r14
    9e8c:	0e 94 ef 4b 	call	0x97de	; 0x97de <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    9e90:	aa 0c       	add	r10, r10
    9e92:	bb 1c       	adc	r11, r11
    9e94:	e1 e0       	ldi	r30, 0x01	; 1
    9e96:	f0 e0       	ldi	r31, 0x00	; 0
    9e98:	ec 0f       	add	r30, r28
    9e9a:	fd 1f       	adc	r31, r29
    9e9c:	ea 0d       	add	r30, r10
    9e9e:	fb 1d       	adc	r31, r11
    9ea0:	01 90       	ld	r0, Z+
    9ea2:	f0 81       	ld	r31, Z
    9ea4:	e0 2d       	mov	r30, r0
    9ea6:	e0 5a       	subi	r30, 0xA0	; 160
    9ea8:	f3 4f       	sbci	r31, 0xF3	; 243
    9eaa:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    9eac:	f7 01       	movw	r30, r14
    9eae:	83 85       	ldd	r24, Z+11	; 0x0b
    9eb0:	81 50       	subi	r24, 0x01	; 1
    9eb2:	83 87       	std	Z+11, r24	; 0x0b
			if (shot->hit_count <= 0)
    9eb4:	81 11       	cpse	r24, r1
    9eb6:	08 c0       	rjmp	.+16     	; 0x9ec8 <collision_detect_shot+0x1e8>
			{
				init_shot_state(shot, shot->shot_type);
    9eb8:	62 85       	ldd	r22, Z+10	; 0x0a
    9eba:	c7 01       	movw	r24, r14
    9ebc:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
				player->active_shots--;
    9ec0:	f6 01       	movw	r30, r12
    9ec2:	80 89       	ldd	r24, Z+16	; 0x10
    9ec4:	81 50       	subi	r24, 0x01	; 1
    9ec6:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_BRICK_EXPLODE;
    9ec8:	2f ed       	ldi	r18, 0xDF	; 223
    9eca:	47 e1       	ldi	r20, 0x17	; 23
    9ecc:	61 e0       	ldi	r22, 0x01	; 1
    9ece:	39 c0       	rjmp	.+114    	; 0x9f42 <collision_detect_shot+0x262>
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    9ed0:	c7 01       	movw	r24, r14
    9ed2:	0e 94 ef 4b 	call	0x97de	; 0x97de <recoil_sprite>
			switch (tile)
    9ed6:	14 30       	cpi	r17, 0x04	; 4
    9ed8:	79 f0       	breq	.+30     	; 0x9ef8 <collision_detect_shot+0x218>
    9eda:	18 f4       	brcc	.+6      	; 0x9ee2 <collision_detect_shot+0x202>
    9edc:	13 30       	cpi	r17, 0x03	; 3
    9ede:	31 f0       	breq	.+12     	; 0x9eec <collision_detect_shot+0x20c>
    9ee0:	1f c0       	rjmp	.+62     	; 0x9f20 <collision_detect_shot+0x240>
    9ee2:	15 30       	cpi	r17, 0x05	; 5
    9ee4:	b9 f0       	breq	.+46     	; 0x9f14 <collision_detect_shot+0x234>
    9ee6:	16 30       	cpi	r17, 0x06	; 6
    9ee8:	79 f0       	breq	.+30     	; 0x9f08 <collision_detect_shot+0x228>
    9eea:	1a c0       	rjmp	.+52     	; 0x9f20 <collision_detect_shot+0x240>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    9eec:	f7 01       	movw	r30, r14
    9eee:	80 81       	ld	r24, Z
    9ef0:	81 11       	cpse	r24, r1
    9ef2:	06 c0       	rjmp	.+12     	; 0x9f00 <collision_detect_shot+0x220>
						shot->shared.direction = D_RIGHT;
    9ef4:	81 e0       	ldi	r24, 0x01	; 1
    9ef6:	05 c0       	rjmp	.+10     	; 0x9f02 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    9ef8:	f7 01       	movw	r30, r14
    9efa:	80 81       	ld	r24, Z
    9efc:	88 23       	and	r24, r24
    9efe:	41 f0       	breq	.+16     	; 0x9f10 <collision_detect_shot+0x230>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    9f00:	82 e0       	ldi	r24, 0x02	; 2
    9f02:	f7 01       	movw	r30, r14
    9f04:	80 83       	st	Z, r24
    9f06:	0c c0       	rjmp	.+24     	; 0x9f20 <collision_detect_shot+0x240>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    9f08:	f7 01       	movw	r30, r14
    9f0a:	80 81       	ld	r24, Z
    9f0c:	82 30       	cpi	r24, 0x02	; 2
    9f0e:	31 f4       	brne	.+12     	; 0x9f1c <collision_detect_shot+0x23c>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    9f10:	83 e0       	ldi	r24, 0x03	; 3
    9f12:	f7 cf       	rjmp	.-18     	; 0x9f02 <collision_detect_shot+0x222>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    9f14:	f7 01       	movw	r30, r14
    9f16:	80 81       	ld	r24, Z
    9f18:	82 30       	cpi	r24, 0x02	; 2
    9f1a:	61 f3       	breq	.-40     	; 0x9ef4 <collision_detect_shot+0x214>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    9f1c:	f7 01       	movw	r30, r14
    9f1e:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    9f20:	f7 01       	movw	r30, r14
    9f22:	84 85       	ldd	r24, Z+12	; 0x0c
    9f24:	81 50       	subi	r24, 0x01	; 1
    9f26:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    9f28:	81 11       	cpse	r24, r1
    9f2a:	08 c0       	rjmp	.+16     	; 0x9f3c <collision_detect_shot+0x25c>
			{
				init_shot_state(shot, shot->shot_type);
    9f2c:	62 85       	ldd	r22, Z+10	; 0x0a
    9f2e:	c7 01       	movw	r24, r14
    9f30:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
				player->active_shots--;
    9f34:	f6 01       	movw	r30, r12
    9f36:	80 89       	ldd	r24, Z+16	; 0x10
    9f38:	81 50       	subi	r24, 0x01	; 1
    9f3a:	80 8b       	std	Z+16, r24	; 0x10
			}
			SFX_METAL;
    9f3c:	2f ef       	ldi	r18, 0xFF	; 255
    9f3e:	47 e1       	ldi	r20, 0x17	; 23
    9f40:	66 e0       	ldi	r22, 0x06	; 6
    9f42:	84 e0       	ldi	r24, 0x04	; 4
    9f44:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
			break;
		}
	}
}
    9f48:	0f 90       	pop	r0
    9f4a:	0f 90       	pop	r0
    9f4c:	0f 90       	pop	r0
    9f4e:	0f 90       	pop	r0
    9f50:	0f 90       	pop	r0
    9f52:	df 91       	pop	r29
    9f54:	cf 91       	pop	r28
    9f56:	1f 91       	pop	r17
    9f58:	0f 91       	pop	r16
    9f5a:	ff 90       	pop	r15
    9f5c:	ef 90       	pop	r14
    9f5e:	df 90       	pop	r13
    9f60:	cf 90       	pop	r12
    9f62:	bf 90       	pop	r11
    9f64:	af 90       	pop	r10
    9f66:	9f 90       	pop	r9
    9f68:	8f 90       	pop	r8
    9f6a:	7f 90       	pop	r7
    9f6c:	6f 90       	pop	r6
    9f6e:	08 95       	ret

00009f70 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    9f70:	fc 01       	movw	r30, r24
    9f72:	8e e1       	ldi	r24, 0x1E	; 30
    9f74:	48 9f       	mul	r20, r24
    9f76:	a0 01       	movw	r20, r0
    9f78:	11 24       	eor	r1, r1
    9f7a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9f7c:	64 0f       	add	r22, r20
    9f7e:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9f80:	21 11       	cpse	r18, r1
    9f82:	09 c0       	rjmp	.+18     	; 0x9f96 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    9f84:	71 83       	std	Z+1, r23	; 0x01
    9f86:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9f88:	cb 01       	movw	r24, r22
    9f8a:	01 96       	adiw	r24, 0x01	; 1
    9f8c:	93 83       	std	Z+3, r25	; 0x03
    9f8e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9f90:	6e 5f       	subi	r22, 0xFE	; 254
    9f92:	7f 4f       	sbci	r23, 0xFF	; 255
    9f94:	1c c0       	rjmp	.+56     	; 0x9fce <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    9f96:	21 30       	cpi	r18, 0x01	; 1
    9f98:	31 f4       	brne	.+12     	; 0x9fa6 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    9f9a:	cb 01       	movw	r24, r22
    9f9c:	02 96       	adiw	r24, 0x02	; 2
    9f9e:	91 83       	std	Z+1, r25	; 0x01
    9fa0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    9fa2:	4e 96       	adiw	r24, 0x1e	; 30
    9fa4:	07 c0       	rjmp	.+14     	; 0x9fb4 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    9fa6:	22 30       	cpi	r18, 0x02	; 2
    9fa8:	51 f4       	brne	.+20     	; 0x9fbe <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    9faa:	cb 01       	movw	r24, r22
    9fac:	cc 96       	adiw	r24, 0x3c	; 60
    9fae:	91 83       	std	Z+1, r25	; 0x01
    9fb0:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9fb2:	01 96       	adiw	r24, 0x01	; 1
    9fb4:	93 83       	std	Z+3, r25	; 0x03
    9fb6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9fb8:	62 5c       	subi	r22, 0xC2	; 194
    9fba:	7f 4f       	sbci	r23, 0xFF	; 255
    9fbc:	08 c0       	rjmp	.+16     	; 0x9fce <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9fbe:	71 83       	std	Z+1, r23	; 0x01
    9fc0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9fc2:	cb 01       	movw	r24, r22
    9fc4:	4e 96       	adiw	r24, 0x1e	; 30
    9fc6:	93 83       	std	Z+3, r25	; 0x03
    9fc8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    9fca:	64 5c       	subi	r22, 0xC4	; 196
    9fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    9fce:	75 83       	std	Z+5, r23	; 0x05
    9fd0:	64 83       	std	Z+4, r22	; 0x04
    9fd2:	08 95       	ret

00009fd4 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    9fd4:	2f 92       	push	r2
    9fd6:	3f 92       	push	r3
    9fd8:	4f 92       	push	r4
    9fda:	5f 92       	push	r5
    9fdc:	6f 92       	push	r6
    9fde:	7f 92       	push	r7
    9fe0:	8f 92       	push	r8
    9fe2:	9f 92       	push	r9
    9fe4:	af 92       	push	r10
    9fe6:	bf 92       	push	r11
    9fe8:	cf 92       	push	r12
    9fea:	df 92       	push	r13
    9fec:	ef 92       	push	r14
    9fee:	ff 92       	push	r15
    9ff0:	0f 93       	push	r16
    9ff2:	1f 93       	push	r17
    9ff4:	cf 93       	push	r28
    9ff6:	df 93       	push	r29
    9ff8:	cd b7       	in	r28, 0x3d	; 61
    9ffa:	de b7       	in	r29, 0x3e	; 62
    9ffc:	29 97       	sbiw	r28, 0x09	; 9
    9ffe:	0f b6       	in	r0, 0x3f	; 63
    a000:	f8 94       	cli
    a002:	de bf       	out	0x3e, r29	; 62
    a004:	0f be       	out	0x3f, r0	; 63
    a006:	cd bf       	out	0x3d, r28	; 61
    a008:	7c 01       	movw	r14, r24
    a00a:	3b 01       	movw	r6, r22
    a00c:	14 2f       	mov	r17, r20
    a00e:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    a010:	1a 82       	std	Y+2, r1	; 0x02
    a012:	19 82       	std	Y+1, r1	; 0x01
    a014:	1c 82       	std	Y+4, r1	; 0x04
    a016:	1b 82       	std	Y+3, r1	; 0x03
    a018:	1e 82       	std	Y+6, r1	; 0x06
    a01a:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a01c:	20 e0       	ldi	r18, 0x00	; 0
    a01e:	30 e0       	ldi	r19, 0x00	; 0
    a020:	40 e0       	ldi	r20, 0x00	; 0
    a022:	5e e3       	ldi	r21, 0x3E	; 62
    a024:	fc 01       	movw	r30, r24
    a026:	66 81       	ldd	r22, Z+6	; 0x06
    a028:	77 81       	ldd	r23, Z+7	; 0x07
    a02a:	80 85       	ldd	r24, Z+8	; 0x08
    a02c:	91 85       	ldd	r25, Z+9	; 0x09
    a02e:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a032:	20 e0       	ldi	r18, 0x00	; 0
    a034:	30 e0       	ldi	r19, 0x00	; 0
    a036:	40 e4       	ldi	r20, 0x40	; 64
    a038:	50 e4       	ldi	r21, 0x40	; 64
    a03a:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    a03e:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    a042:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a044:	20 e0       	ldi	r18, 0x00	; 0
    a046:	30 e0       	ldi	r19, 0x00	; 0
    a048:	40 e0       	ldi	r20, 0x00	; 0
    a04a:	5e e3       	ldi	r21, 0x3E	; 62
    a04c:	f7 01       	movw	r30, r14
    a04e:	62 81       	ldd	r22, Z+2	; 0x02
    a050:	73 81       	ldd	r23, Z+3	; 0x03
    a052:	84 81       	ldd	r24, Z+4	; 0x04
    a054:	95 81       	ldd	r25, Z+5	; 0x05
    a056:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a05a:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a05e:	f7 01       	movw	r30, r14
    a060:	20 81       	ld	r18, Z
    a062:	4d 2d       	mov	r20, r13
    a064:	ce 01       	movw	r24, r28
    a066:	01 96       	adiw	r24, 0x01	; 1
    a068:	0e 94 b8 4f 	call	0x9f70	; 0x9f70 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a06c:	c7 01       	movw	r24, r14
    a06e:	0e 94 50 4d 	call	0x9aa0	; 0x9aa0 <collision_detect_boundries>
    a072:	88 23       	and	r24, r24
    a074:	31 f0       	breq	.+12     	; 0xa082 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    a076:	c7 01       	movw	r24, r14
    a078:	0e 94 ef 4b 	call	0x97de	; 0x97de <recoil_sprite>
		player->shared.speed = 0;
    a07c:	f7 01       	movw	r30, r14
    a07e:	11 82       	std	Z+1, r1	; 0x01
    a080:	87 c0       	rjmp	.+270    	; 0xa190 <collision_detect_player+0x1bc>
    a082:	ce 01       	movw	r24, r28
    a084:	01 96       	adiw	r24, 0x01	; 1
    a086:	6c 01       	movw	r12, r24
    a088:	4e 01       	movw	r8, r28
    a08a:	97 e0       	ldi	r25, 0x07	; 7
    a08c:	89 0e       	add	r8, r25
    a08e:	91 1c       	adc	r9, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a090:	8e e1       	ldi	r24, 0x1E	; 30
    a092:	a8 2e       	mov	r10, r24
    a094:	b1 2c       	mov	r11, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a096:	33 24       	eor	r3, r3
    a098:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a09a:	eb e0       	ldi	r30, 0x0B	; 11
    a09c:	e1 0f       	add	r30, r17
    a09e:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a0a0:	fa e0       	ldi	r31, 0x0A	; 10
    a0a2:	f1 0f       	add	r31, r17
    a0a4:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    a0a6:	f6 01       	movw	r30, r12
    a0a8:	40 80       	ld	r4, Z
    a0aa:	51 80       	ldd	r5, Z+1	; 0x01
    a0ac:	c2 01       	movw	r24, r4
    a0ae:	0e 94 59 4c 	call	0x98b2	; 0x98b2 <solid_square_tile>
    a0b2:	81 11       	cpse	r24, r1
    a0b4:	18 c0       	rjmp	.+48     	; 0xa0e6 <collision_detect_player+0x112>
    a0b6:	f7 01       	movw	r30, r14
    a0b8:	66 81       	ldd	r22, Z+6	; 0x06
    a0ba:	77 81       	ldd	r23, Z+7	; 0x07
    a0bc:	80 85       	ldd	r24, Z+8	; 0x08
    a0be:	91 85       	ldd	r25, Z+9	; 0x09
    a0c0:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    a0c4:	46 2f       	mov	r20, r22
    a0c6:	f7 01       	movw	r30, r14
    a0c8:	62 81       	ldd	r22, Z+2	; 0x02
    a0ca:	73 81       	ldd	r23, Z+3	; 0x03
    a0cc:	84 81       	ldd	r24, Z+4	; 0x04
    a0ce:	95 81       	ldd	r25, Z+5	; 0x05
    a0d0:	49 87       	std	Y+9, r20	; 0x09
    a0d2:	0e 94 ab 59 	call	0xb356	; 0xb356 <__fixunssfsi>
    a0d6:	0e e0       	ldi	r16, 0x0E	; 14
    a0d8:	27 e0       	ldi	r18, 0x07	; 7
    a0da:	49 85       	ldd	r20, Y+9	; 0x09
    a0dc:	c2 01       	movw	r24, r4
    a0de:	0e 94 67 4c 	call	0x98ce	; 0x98ce <solid_directional_tile>
    a0e2:	88 23       	and	r24, r24
    a0e4:	31 f0       	breq	.+12     	; 0xa0f2 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    a0e6:	c7 01       	movw	r24, r14
    a0e8:	0e 94 ef 4b 	call	0x97de	; 0x97de <recoil_sprite>
			player->shared.speed = 0;
    a0ec:	f7 01       	movw	r30, r14
    a0ee:	11 82       	std	Z+1, r1	; 0x01
    a0f0:	48 c0       	rjmp	.+144    	; 0xa182 <collision_detect_player+0x1ae>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    a0f2:	f2 01       	movw	r30, r4
    a0f4:	e0 5a       	subi	r30, 0xA0	; 160
    a0f6:	f3 4f       	sbci	r31, 0xF3	; 243
    a0f8:	81 81       	ldd	r24, Z+1	; 0x01
    a0fa:	87 30       	cpi	r24, 0x07	; 7
    a0fc:	51 f4       	brne	.+20     	; 0xa112 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a0fe:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    a100:	80 e5       	ldi	r24, 0x50	; 80
    a102:	f7 01       	movw	r30, r14
    a104:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    a106:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a108:	40 e0       	ldi	r20, 0x00	; 0
    a10a:	51 e2       	ldi	r21, 0x21	; 33
    a10c:	61 e0       	ldi	r22, 0x01	; 1
    a10e:	88 85       	ldd	r24, Y+8	; 0x08
    a110:	09 c0       	rjmp	.+18     	; 0xa124 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    a112:	89 30       	cpi	r24, 0x09	; 9
    a114:	a9 f4       	brne	.+42     	; 0xa140 <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a116:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    a118:	f7 01       	movw	r30, r14
    a11a:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a11c:	4a ef       	ldi	r20, 0xFA	; 250
    a11e:	50 e2       	ldi	r21, 0x20	; 32
    a120:	61 e0       	ldi	r22, 0x01	; 1
    a122:	8f 81       	ldd	r24, Y+7	; 0x07
    a124:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a128:	f6 01       	movw	r30, r12
    a12a:	80 81       	ld	r24, Z
    a12c:	91 81       	ldd	r25, Z+1	; 0x01
    a12e:	b5 01       	movw	r22, r10
    a130:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    a134:	6d 5f       	subi	r22, 0xFD	; 253
    a136:	40 e0       	ldi	r20, 0x00	; 0
    a138:	50 e0       	ldi	r21, 0x00	; 0
    a13a:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
    a13e:	1b c0       	rjmp	.+54     	; 0xa176 <collision_detect_player+0x1a2>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    a140:	88 30       	cpi	r24, 0x08	; 8
    a142:	f9 f4       	brne	.+62     	; 0xa182 <collision_detect_player+0x1ae>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    a144:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a146:	c2 01       	movw	r24, r4
    a148:	b5 01       	movw	r22, r10
    a14a:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    a14e:	6d 5f       	subi	r22, 0xFD	; 253
    a150:	40 e0       	ldi	r20, 0x00	; 0
    a152:	50 e0       	ldi	r21, 0x00	; 0
    a154:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
			player->level_score++;
    a158:	f7 01       	movw	r30, r14
    a15a:	87 85       	ldd	r24, Z+15	; 0x0f
    a15c:	8f 5f       	subi	r24, 0xFF	; 255
    a15e:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    a160:	86 85       	ldd	r24, Z+14	; 0x0e
    a162:	8f 5f       	subi	r24, 0xFF	; 255
    a164:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    a166:	61 2f       	mov	r22, r17
    a168:	c7 01       	movw	r24, r14
    a16a:	0e 94 29 4a 	call	0x9452	; 0x9452 <render_score>
			kill_player(other_player, other_player_hud_x);
    a16e:	62 2d       	mov	r22, r2
    a170:	c3 01       	movw	r24, r6
    a172:	0e 94 9e 4d 	call	0x9b3c	; 0x9b3c <kill_player>
			SFX_ITEM;
    a176:	2f ef       	ldi	r18, 0xFF	; 255
    a178:	47 e1       	ldi	r20, 0x17	; 23
    a17a:	63 e0       	ldi	r22, 0x03	; 3
    a17c:	84 e0       	ldi	r24, 0x04	; 4
    a17e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
    a182:	f2 e0       	ldi	r31, 0x02	; 2
    a184:	cf 0e       	add	r12, r31
    a186:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    a188:	c8 14       	cp	r12, r8
    a18a:	d9 04       	cpc	r13, r9
    a18c:	09 f0       	breq	.+2      	; 0xa190 <collision_detect_player+0x1bc>
    a18e:	8b cf       	rjmp	.-234    	; 0xa0a6 <collision_detect_player+0xd2>
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
			SFX_ITEM;
		}
	}
}
    a190:	29 96       	adiw	r28, 0x09	; 9
    a192:	0f b6       	in	r0, 0x3f	; 63
    a194:	f8 94       	cli
    a196:	de bf       	out	0x3e, r29	; 62
    a198:	0f be       	out	0x3f, r0	; 63
    a19a:	cd bf       	out	0x3d, r28	; 61
    a19c:	df 91       	pop	r29
    a19e:	cf 91       	pop	r28
    a1a0:	1f 91       	pop	r17
    a1a2:	0f 91       	pop	r16
    a1a4:	ff 90       	pop	r15
    a1a6:	ef 90       	pop	r14
    a1a8:	df 90       	pop	r13
    a1aa:	cf 90       	pop	r12
    a1ac:	bf 90       	pop	r11
    a1ae:	af 90       	pop	r10
    a1b0:	9f 90       	pop	r9
    a1b2:	8f 90       	pop	r8
    a1b4:	7f 90       	pop	r7
    a1b6:	6f 90       	pop	r6
    a1b8:	5f 90       	pop	r5
    a1ba:	4f 90       	pop	r4
    a1bc:	3f 90       	pop	r3
    a1be:	2f 90       	pop	r2
    a1c0:	08 95       	ret

0000a1c2 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    a1c2:	bf 92       	push	r11
    a1c4:	cf 92       	push	r12
    a1c6:	df 92       	push	r13
    a1c8:	ef 92       	push	r14
    a1ca:	ff 92       	push	r15
    a1cc:	0f 93       	push	r16
    a1ce:	1f 93       	push	r17
    a1d0:	cf 93       	push	r28
    a1d2:	df 93       	push	r29
    a1d4:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a1d6:	c0 e0       	ldi	r28, 0x00	; 0
    a1d8:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    a1da:	0e e1       	ldi	r16, 0x1E	; 30
    a1dc:	10 e0       	ldi	r17, 0x00	; 0
    a1de:	ce 01       	movw	r24, r28
    a1e0:	b8 01       	movw	r22, r16
    a1e2:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
		y = 3 + i / 30;
    a1e6:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    a1e8:	bb 20       	and	r11, r11
    a1ea:	19 f0       	breq	.+6      	; 0xa1f2 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    a1ec:	49 e0       	ldi	r20, 0x09	; 9
    a1ee:	51 e2       	ldi	r21, 0x21	; 33
    a1f0:	11 c0       	rjmp	.+34     	; 0xa214 <load_level_tiles+0x52>
    a1f2:	fe 01       	movw	r30, r28
    a1f4:	e0 5a       	subi	r30, 0xA0	; 160
    a1f6:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    a1f8:	e1 81       	ldd	r30, Z+1	; 0x01
    a1fa:	ce 2e       	mov	r12, r30
    a1fc:	d1 2c       	mov	r13, r1
    a1fe:	f6 01       	movw	r30, r12
    a200:	31 97       	sbiw	r30, 0x01	; 1
    a202:	e9 30       	cpi	r30, 0x09	; 9
    a204:	f1 05       	cpc	r31, r1
    a206:	08 f5       	brcc	.+66     	; 0xa24a <load_level_tiles+0x88>
    a208:	e8 5c       	subi	r30, 0xC8	; 200
    a20a:	ff 4f       	sbci	r31, 0xFF	; 255
    a20c:	0c 94 d4 58 	jmp	0xb1a8	; 0xb1a8 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    a210:	46 e0       	ldi	r20, 0x06	; 6
    a212:	51 e2       	ldi	r21, 0x21	; 33
    a214:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
    a218:	1c c0       	rjmp	.+56     	; 0xa252 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    a21a:	43 e0       	ldi	r20, 0x03	; 3
    a21c:	51 e2       	ldi	r21, 0x21	; 33
    a21e:	fa cf       	rjmp	.-12     	; 0xa214 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    a220:	4e ee       	ldi	r20, 0xEE	; 238
    a222:	50 e2       	ldi	r21, 0x20	; 32
    a224:	f7 cf       	rjmp	.-18     	; 0xa214 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    a226:	48 ee       	ldi	r20, 0xE8	; 232
    a228:	50 e2       	ldi	r21, 0x20	; 32
    a22a:	f4 cf       	rjmp	.-24     	; 0xa214 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    a22c:	45 ee       	ldi	r20, 0xE5	; 229
    a22e:	50 e2       	ldi	r21, 0x20	; 32
    a230:	f1 cf       	rjmp	.-30     	; 0xa214 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    a232:	4b ee       	ldi	r20, 0xEB	; 235
    a234:	50 e2       	ldi	r21, 0x20	; 32
    a236:	ee cf       	rjmp	.-36     	; 0xa214 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    a238:	40 e0       	ldi	r20, 0x00	; 0
    a23a:	51 e2       	ldi	r21, 0x21	; 33
    a23c:	eb cf       	rjmp	.-42     	; 0xa214 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    a23e:	4d ef       	ldi	r20, 0xFD	; 253
    a240:	50 e2       	ldi	r21, 0x20	; 32
    a242:	e8 cf       	rjmp	.-48     	; 0xa214 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    a244:	4a ef       	ldi	r20, 0xFA	; 250
    a246:	50 e2       	ldi	r21, 0x20	; 32
    a248:	e5 cf       	rjmp	.-54     	; 0xa214 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    a24a:	40 e0       	ldi	r20, 0x00	; 0
    a24c:	50 e0       	ldi	r21, 0x00	; 0
    a24e:	0e 94 9c 37 	call	0x6f38	; 0x6f38 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    a252:	21 96       	adiw	r28, 0x01	; 1
    a254:	ce 3e       	cpi	r28, 0xEE	; 238
    a256:	82 e0       	ldi	r24, 0x02	; 2
    a258:	d8 07       	cpc	r29, r24
    a25a:	09 f6       	brne	.-126    	; 0xa1de <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    a25c:	df 91       	pop	r29
    a25e:	cf 91       	pop	r28
    a260:	1f 91       	pop	r17
    a262:	0f 91       	pop	r16
    a264:	ff 90       	pop	r15
    a266:	ef 90       	pop	r14
    a268:	df 90       	pop	r13
    a26a:	cf 90       	pop	r12
    a26c:	bf 90       	pop	r11
    a26e:	08 95       	ret

0000a270 <load_level>:

void load_level(int level_number)
{
    a270:	9f 92       	push	r9
    a272:	af 92       	push	r10
    a274:	bf 92       	push	r11
    a276:	cf 92       	push	r12
    a278:	df 92       	push	r13
    a27a:	ef 92       	push	r14
    a27c:	ff 92       	push	r15
    a27e:	0f 93       	push	r16
    a280:	1f 93       	push	r17
    a282:	cf 93       	push	r28
    a284:	df 93       	push	r29
    a286:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    a288:	8e ee       	ldi	r24, 0xEE	; 238
    a28a:	92 e0       	ldi	r25, 0x02	; 2
    a28c:	c8 9f       	mul	r28, r24
    a28e:	70 01       	movw	r14, r0
    a290:	c9 9f       	mul	r28, r25
    a292:	f0 0c       	add	r15, r0
    a294:	d8 9f       	mul	r29, r24
    a296:	f0 0c       	add	r15, r0
    a298:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    a29a:	83 e0       	ldi	r24, 0x03	; 3
    a29c:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a2a0:	0e 94 e6 48 	call	0x91cc	; 0x91cc <clear_sprites>
	game.current_level = level_number;
    a2a4:	c0 93 c2 0b 	sts	0x0BC2, r28
    a2a8:	81 e6       	ldi	r24, 0x61	; 97
    a2aa:	c8 2e       	mov	r12, r24
    a2ac:	8c e0       	ldi	r24, 0x0C	; 12
    a2ae:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    a2b0:	c0 e0       	ldi	r28, 0x00	; 0
    a2b2:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    a2b4:	0e e1       	ldi	r16, 0x1E	; 30
    a2b6:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    a2b8:	92 e3       	ldi	r25, 0x32	; 50
    a2ba:	99 2e       	mov	r9, r25
    a2bc:	fe 01       	movw	r30, r28
    a2be:	ee 0d       	add	r30, r14
    a2c0:	ff 1d       	adc	r31, r15
    a2c2:	e1 5c       	subi	r30, 0xC1	; 193
    a2c4:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    a2c6:	e4 91       	lpm	r30, Z
    a2c8:	56 01       	movw	r10, r12
    a2ca:	d6 01       	movw	r26, r12
    a2cc:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    a2ce:	e8 35       	cpi	r30, 0x58	; 88
    a2d0:	01 f5       	brne	.+64     	; 0xa312 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    a2d2:	ce 01       	movw	r24, r28
    a2d4:	b8 01       	movw	r22, r16
    a2d6:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    a2da:	88 0f       	add	r24, r24
    a2dc:	88 0f       	add	r24, r24
    a2de:	88 0f       	add	r24, r24
    a2e0:	80 93 ef 0b 	sts	0x0BEF, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    a2e4:	6d 5f       	subi	r22, 0xFD	; 253
    a2e6:	7f 4f       	sbci	r23, 0xFF	; 255
    a2e8:	66 0f       	add	r22, r22
    a2ea:	66 0f       	add	r22, r22
    a2ec:	66 0f       	add	r22, r22
    a2ee:	60 93 f0 0b 	sts	0x0BF0, r22
			player1.level_score = 0;
    a2f2:	10 92 ed 0b 	sts	0x0BED, r1
			player1.has_over_speed = false;
    a2f6:	10 92 f7 0b 	sts	0x0BF7, r1
			player1.has_rocket = false;
    a2fa:	10 92 f6 0b 	sts	0x0BF6, r1
			player1.max_speed = MAX_SPEED;
    a2fe:	90 92 f5 0b 	sts	0x0BF5, r9
			player_init_shot_state(&player1);
    a302:	8e ed       	ldi	r24, 0xDE	; 222
    a304:	9b e0       	ldi	r25, 0x0B	; 11
    a306:	0e 94 89 48 	call	0x9112	; 0x9112 <player_init_shot_state>
			player_spawn(&player1);
    a30a:	8e ed       	ldi	r24, 0xDE	; 222
    a30c:	9b e0       	ldi	r25, 0x0B	; 11
    a30e:	0e 94 ad 48 	call	0x915a	; 0x915a <player_spawn>
    a312:	bf ef       	ldi	r27, 0xFF	; 255
    a314:	cb 1a       	sub	r12, r27
    a316:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    a318:	f5 01       	movw	r30, r10
    a31a:	80 81       	ld	r24, Z
    a31c:	83 36       	cpi	r24, 0x63	; 99
    a31e:	01 f5       	brne	.+64     	; 0xa360 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    a320:	ce 01       	movw	r24, r28
    a322:	b8 01       	movw	r22, r16
    a324:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    a328:	88 0f       	add	r24, r24
    a32a:	88 0f       	add	r24, r24
    a32c:	88 0f       	add	r24, r24
    a32e:	80 93 60 0f 	sts	0x0F60, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    a332:	6d 5f       	subi	r22, 0xFD	; 253
    a334:	7f 4f       	sbci	r23, 0xFF	; 255
    a336:	66 0f       	add	r22, r22
    a338:	66 0f       	add	r22, r22
    a33a:	66 0f       	add	r22, r22
    a33c:	60 93 61 0f 	sts	0x0F61, r22
			player2.level_score = 0;
    a340:	10 92 5e 0f 	sts	0x0F5E, r1
			player2.has_over_speed = false;
    a344:	10 92 68 0f 	sts	0x0F68, r1
			player2.has_rocket = false;
    a348:	10 92 67 0f 	sts	0x0F67, r1
			player2.max_speed = MAX_SPEED;
    a34c:	90 92 66 0f 	sts	0x0F66, r9
			player_init_shot_state(&player2);
    a350:	8f e4       	ldi	r24, 0x4F	; 79
    a352:	9f e0       	ldi	r25, 0x0F	; 15
    a354:	0e 94 89 48 	call	0x9112	; 0x9112 <player_init_shot_state>
			player_spawn(&player2);
    a358:	8f e4       	ldi	r24, 0x4F	; 79
    a35a:	9f e0       	ldi	r25, 0x0F	; 15
    a35c:	0e 94 ad 48 	call	0x915a	; 0x915a <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    a360:	21 96       	adiw	r28, 0x01	; 1
    a362:	ce 3e       	cpi	r28, 0xEE	; 238
    a364:	f2 e0       	ldi	r31, 0x02	; 2
    a366:	df 07       	cpc	r29, r31
    a368:	09 f0       	breq	.+2      	; 0xa36c <load_level+0xfc>
    a36a:	a8 cf       	rjmp	.-176    	; 0xa2bc <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    a36c:	60 e0       	ldi	r22, 0x00	; 0
    a36e:	8e ed       	ldi	r24, 0xDE	; 222
    a370:	9b e0       	ldi	r25, 0x0B	; 11
    a372:	0e 94 0c 4a 	call	0x9418	; 0x9418 <render_hud>
	render_hud(&player2, 15);
    a376:	6f e0       	ldi	r22, 0x0F	; 15
    a378:	8f e4       	ldi	r24, 0x4F	; 79
    a37a:	9f e0       	ldi	r25, 0x0F	; 15
    a37c:	0e 94 0c 4a 	call	0x9418	; 0x9418 <render_hud>
	render_score(&player1, 0);
    a380:	60 e0       	ldi	r22, 0x00	; 0
    a382:	8e ed       	ldi	r24, 0xDE	; 222
    a384:	9b e0       	ldi	r25, 0x0B	; 11
    a386:	0e 94 29 4a 	call	0x9452	; 0x9452 <render_score>
	render_score(&player2, 15);
    a38a:	6f e0       	ldi	r22, 0x0F	; 15
    a38c:	8f e4       	ldi	r24, 0x4F	; 79
    a38e:	9f e0       	ldi	r25, 0x0F	; 15
    a390:	0e 94 29 4a 	call	0x9452	; 0x9452 <render_score>
	Print(14, 0, strVertSep);
    a394:	40 e7       	ldi	r20, 0x70	; 112
    a396:	52 e0       	ldi	r21, 0x02	; 2
    a398:	60 e0       	ldi	r22, 0x00	; 0
    a39a:	70 e0       	ldi	r23, 0x00	; 0
    a39c:	8e e0       	ldi	r24, 0x0E	; 14
    a39e:	90 e0       	ldi	r25, 0x00	; 0
    a3a0:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(14, 1, strVertSep);
    a3a4:	40 e7       	ldi	r20, 0x70	; 112
    a3a6:	52 e0       	ldi	r21, 0x02	; 2
    a3a8:	61 e0       	ldi	r22, 0x01	; 1
    a3aa:	70 e0       	ldi	r23, 0x00	; 0
    a3ac:	8e e0       	ldi	r24, 0x0E	; 14
    a3ae:	90 e0       	ldi	r25, 0x00	; 0
    a3b0:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(14, 2, strVertSep);
    a3b4:	40 e7       	ldi	r20, 0x70	; 112
    a3b6:	52 e0       	ldi	r21, 0x02	; 2
    a3b8:	62 e0       	ldi	r22, 0x02	; 2
    a3ba:	70 e0       	ldi	r23, 0x00	; 0
    a3bc:	8e e0       	ldi	r24, 0x0E	; 14
    a3be:	90 e0       	ldi	r25, 0x00	; 0
    a3c0:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	load_level_tiles(false);
    a3c4:	80 e0       	ldi	r24, 0x00	; 0
    a3c6:	0e 94 e1 50 	call	0xa1c2	; 0xa1c2 <load_level_tiles>
	SFX_LEVEL_START;
    a3ca:	2f ef       	ldi	r18, 0xFF	; 255
    a3cc:	47 e1       	ldi	r20, 0x17	; 23
    a3ce:	65 e0       	ldi	r22, 0x05	; 5
    a3d0:	84 e0       	ldi	r24, 0x04	; 4
}
    a3d2:	df 91       	pop	r29
    a3d4:	cf 91       	pop	r28
    a3d6:	1f 91       	pop	r17
    a3d8:	0f 91       	pop	r16
    a3da:	ff 90       	pop	r15
    a3dc:	ef 90       	pop	r14
    a3de:	df 90       	pop	r13
    a3e0:	cf 90       	pop	r12
    a3e2:	bf 90       	pop	r11
    a3e4:	af 90       	pop	r10
    a3e6:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    a3e8:	0c 94 a2 3a 	jmp	0x7544	; 0x7544 <TriggerNote>

0000a3ec <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    a3ec:	cf 93       	push	r28
    a3ee:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    a3f0:	61 e0       	ldi	r22, 0x01	; 1
    a3f2:	83 e0       	ldi	r24, 0x03	; 3
    a3f4:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <FadeOut>
	ClearVram();
    a3f8:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <ClearVram>
	clear_sprites();
    a3fc:	0e 94 e6 48 	call	0x91cc	; 0x91cc <clear_sprites>
	Print(9, 12, &strLevels[index*12]);
    a400:	8c e0       	ldi	r24, 0x0C	; 12
    a402:	c8 9f       	mul	r28, r24
    a404:	a0 01       	movw	r20, r0
    a406:	11 24       	eor	r1, r1
    a408:	4a 50       	subi	r20, 0x0A	; 10
    a40a:	5f 4f       	sbci	r21, 0xFF	; 255
    a40c:	6c e0       	ldi	r22, 0x0C	; 12
    a40e:	70 e0       	ldi	r23, 0x00	; 0
    a410:	89 e0       	ldi	r24, 0x09	; 9
    a412:	90 e0       	ldi	r25, 0x00	; 0
    a414:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	FadeIn(1, true);
    a418:	61 e0       	ldi	r22, 0x01	; 1
    a41a:	81 e0       	ldi	r24, 0x01	; 1
    a41c:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    a420:	82 e0       	ldi	r24, 0x02	; 2
    a422:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <LBWaitSeconds>
	FadeOut(1, true);
    a426:	61 e0       	ldi	r22, 0x01	; 1
    a428:	81 e0       	ldi	r24, 0x01	; 1
    a42a:	0e 94 b9 45 	call	0x8b72	; 0x8b72 <FadeOut>
	ClearVram();
    a42e:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a432:	60 e0       	ldi	r22, 0x00	; 0
    a434:	83 e0       	ldi	r24, 0x03	; 3
    a436:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <FadeIn>
	load_level(index);
    a43a:	8c 2f       	mov	r24, r28
    a43c:	90 e0       	ldi	r25, 0x00	; 0
}
    a43e:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    a440:	0c 94 38 51 	jmp	0xa270	; 0xa270 <load_level>

0000a444 <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    a444:	10 92 c1 0b 	sts	0x0BC1, r1
	clear_sprites();
    a448:	0e 94 e6 48 	call	0x91cc	; 0x91cc <clear_sprites>
	Print(7, 13, str1Player);
    a44c:	45 ea       	ldi	r20, 0xA5	; 165
    a44e:	52 e0       	ldi	r21, 0x02	; 2
    a450:	6d e0       	ldi	r22, 0x0D	; 13
    a452:	70 e0       	ldi	r23, 0x00	; 0
    a454:	87 e0       	ldi	r24, 0x07	; 7
    a456:	90 e0       	ldi	r25, 0x00	; 0
    a458:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(7, 14, str2Player);
    a45c:	44 e9       	ldi	r20, 0x94	; 148
    a45e:	52 e0       	ldi	r21, 0x02	; 2
    a460:	6e e0       	ldi	r22, 0x0E	; 14
    a462:	70 e0       	ldi	r23, 0x00	; 0
    a464:	87 e0       	ldi	r24, 0x07	; 7
    a466:	90 e0       	ldi	r25, 0x00	; 0
    a468:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(7, 15, strHighscores);
    a46c:	4a e8       	ldi	r20, 0x8A	; 138
    a46e:	52 e0       	ldi	r21, 0x02	; 2
    a470:	6f e0       	ldi	r22, 0x0F	; 15
    a472:	70 e0       	ldi	r23, 0x00	; 0
    a474:	87 e0       	ldi	r24, 0x07	; 7
    a476:	90 e0       	ldi	r25, 0x00	; 0
    a478:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(4, 26, strCopyright);
    a47c:	43 eb       	ldi	r20, 0xB3	; 179
    a47e:	52 e0       	ldi	r21, 0x02	; 2
    a480:	6a e1       	ldi	r22, 0x1A	; 26
    a482:	70 e0       	ldi	r23, 0x00	; 0
    a484:	84 e0       	ldi	r24, 0x04	; 4
    a486:	90 e0       	ldi	r25, 0x00	; 0
    a488:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    a48c:	4a e4       	ldi	r20, 0x4A	; 74
    a48e:	51 e2       	ldi	r21, 0x21	; 33
    a490:	65 e0       	ldi	r22, 0x05	; 5
    a492:	84 e0       	ldi	r24, 0x04	; 4
    a494:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    a498:	40 e0       	ldi	r20, 0x00	; 0
    a49a:	67 e9       	ldi	r22, 0x97	; 151
    a49c:	70 e2       	ldi	r23, 0x20	; 32
    a49e:	80 e0       	ldi	r24, 0x00	; 0
    a4a0:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	SFX_SPLASH;
    a4a4:	2f ef       	ldi	r18, 0xFF	; 255
    a4a6:	47 e1       	ldi	r20, 0x17	; 23
    a4a8:	69 e0       	ldi	r22, 0x09	; 9
    a4aa:	84 e0       	ldi	r24, 0x04	; 4
    a4ac:	0c 94 a2 3a 	jmp	0x7544	; 0x7544 <TriggerNote>

0000a4b0 <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    a4b0:	ef 92       	push	r14
    a4b2:	ff 92       	push	r15
    a4b4:	0f 93       	push	r16
    a4b6:	1f 93       	push	r17
    a4b8:	cf 93       	push	r28
    a4ba:	df 93       	push	r29
    a4bc:	1f 92       	push	r1
    a4be:	cd b7       	in	r28, 0x3d	; 61
    a4c0:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    a4c2:	81 e0       	ldi	r24, 0x01	; 1
    a4c4:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    a4c8:	0e 94 e6 48 	call	0x91cc	; 0x91cc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a4cc:	40 e0       	ldi	r20, 0x00	; 0
    a4ce:	66 ed       	ldi	r22, 0xD6	; 214
    a4d0:	70 e2       	ldi	r23, 0x20	; 32
    a4d2:	80 e0       	ldi	r24, 0x00	; 0
    a4d4:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a4d8:	40 e0       	ldi	r20, 0x00	; 0
    a4da:	6e eb       	ldi	r22, 0xBE	; 190
    a4dc:	70 e2       	ldi	r23, 0x20	; 32
    a4de:	84 e0       	ldi	r24, 0x04	; 4
    a4e0:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    a4e4:	02 e0       	ldi	r16, 0x02	; 2
    a4e6:	22 e0       	ldi	r18, 0x02	; 2
    a4e8:	48 e0       	ldi	r20, 0x08	; 8
    a4ea:	68 e3       	ldi	r22, 0x38	; 56
    a4ec:	80 e0       	ldi	r24, 0x00	; 0
    a4ee:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    a4f2:	22 e0       	ldi	r18, 0x02	; 2
    a4f4:	48 e0       	ldi	r20, 0x08	; 8
    a4f6:	60 ea       	ldi	r22, 0xA0	; 160
    a4f8:	84 e0       	ldi	r24, 0x04	; 4
    a4fa:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
	Print(10, 2, strHighscores);
    a4fe:	4a e8       	ldi	r20, 0x8A	; 138
    a500:	52 e0       	ldi	r21, 0x02	; 2
    a502:	62 e0       	ldi	r22, 0x02	; 2
    a504:	70 e0       	ldi	r23, 0x00	; 0
    a506:	8a e0       	ldi	r24, 0x0A	; 10
    a508:	90 e0       	ldi	r25, 0x00	; 0
    a50a:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    a50e:	09 e0       	ldi	r16, 0x09	; 9
    a510:	11 e0       	ldi	r17, 0x01	; 1
    a512:	87 e0       	ldi	r24, 0x07	; 7
    a514:	e8 2e       	mov	r14, r24
    a516:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    a518:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    a51a:	20 e0       	ldi	r18, 0x00	; 0
    a51c:	43 2f       	mov	r20, r19
    a51e:	b7 01       	movw	r22, r14
    a520:	82 e0       	ldi	r24, 0x02	; 2
    a522:	90 e0       	ldi	r25, 0x00	; 0
    a524:	39 83       	std	Y+1, r19	; 0x01
    a526:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <PrintByte>
		PrintChar(3, y, '.');
    a52a:	4e e2       	ldi	r20, 0x2E	; 46
    a52c:	b7 01       	movw	r22, r14
    a52e:	83 e0       	ldi	r24, 0x03	; 3
    a530:	90 e0       	ldi	r25, 0x00	; 0
    a532:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
    a536:	f8 01       	movw	r30, r16
    a538:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    a53a:	80 81       	ld	r24, Z
    a53c:	93 e0       	ldi	r25, 0x03	; 3
    a53e:	89 9f       	mul	r24, r25
    a540:	a0 01       	movw	r20, r0
    a542:	11 24       	eor	r1, r1
    a544:	4a 5d       	subi	r20, 0xDA	; 218
    a546:	5e 4f       	sbci	r21, 0xFE	; 254
    a548:	23 e0       	ldi	r18, 0x03	; 3
    a54a:	6e 2d       	mov	r22, r14
    a54c:	85 e0       	ldi	r24, 0x05	; 5
    a54e:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
		Print(9, y, strOwns);
    a552:	44 e3       	ldi	r20, 0x34	; 52
    a554:	52 e0       	ldi	r21, 0x02	; 2
    a556:	b7 01       	movw	r22, r14
    a558:	89 e0       	ldi	r24, 0x09	; 9
    a55a:	90 e0       	ldi	r25, 0x00	; 0
    a55c:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    a560:	f8 01       	movw	r30, r16
    a562:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    a564:	80 81       	ld	r24, Z
    a566:	e3 e0       	ldi	r30, 0x03	; 3
    a568:	8e 9f       	mul	r24, r30
    a56a:	a0 01       	movw	r20, r0
    a56c:	11 24       	eor	r1, r1
    a56e:	4a 5d       	subi	r20, 0xDA	; 218
    a570:	5e 4f       	sbci	r21, 0xFE	; 254
    a572:	23 e0       	ldi	r18, 0x03	; 3
    a574:	6e 2d       	mov	r22, r14
    a576:	8e e0       	ldi	r24, 0x0E	; 14
    a578:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
		Print(18, y, strBy);
    a57c:	41 e3       	ldi	r20, 0x31	; 49
    a57e:	52 e0       	ldi	r21, 0x02	; 2
    a580:	b7 01       	movw	r22, r14
    a582:	82 e1       	ldi	r24, 0x12	; 18
    a584:	90 e0       	ldi	r25, 0x00	; 0
    a586:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    a58a:	f8 01       	movw	r30, r16
    a58c:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    a58e:	21 e0       	ldi	r18, 0x01	; 1
    a590:	40 81       	ld	r20, Z
    a592:	b7 01       	movw	r22, r14
    a594:	87 e1       	ldi	r24, 0x17	; 23
    a596:	90 e0       	ldi	r25, 0x00	; 0
    a598:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <PrintByte>
		PrintChar(24, y, '-');
    a59c:	4d e2       	ldi	r20, 0x2D	; 45
    a59e:	b7 01       	movw	r22, r14
    a5a0:	88 e1       	ldi	r24, 0x18	; 24
    a5a2:	90 e0       	ldi	r25, 0x00	; 0
    a5a4:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    a5a8:	21 e0       	ldi	r18, 0x01	; 1
    a5aa:	f8 01       	movw	r30, r16
    a5ac:	40 81       	ld	r20, Z
    a5ae:	b7 01       	movw	r22, r14
    a5b0:	8b e1       	ldi	r24, 0x1B	; 27
    a5b2:	90 e0       	ldi	r25, 0x00	; 0
    a5b4:	0e 94 37 45 	call	0x8a6e	; 0x8a6e <PrintByte>
		y += 3;
		rank += 1;
    a5b8:	39 81       	ldd	r19, Y+1	; 0x01
    a5ba:	3f 5f       	subi	r19, 0xFF	; 255
    a5bc:	f3 e0       	ldi	r31, 0x03	; 3
    a5be:	ef 0e       	add	r14, r31
    a5c0:	f1 1c       	adc	r15, r1
    a5c2:	0c 5f       	subi	r16, 0xFC	; 252
    a5c4:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    a5c6:	36 30       	cpi	r19, 0x06	; 6
    a5c8:	09 f0       	breq	.+2      	; 0xa5cc <load_tank_rank+0x11c>
    a5ca:	a7 cf       	rjmp	.-178    	; 0xa51a <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a5cc:	48 e4       	ldi	r20, 0x48	; 72
    a5ce:	52 e0       	ldi	r21, 0x02	; 2
    a5d0:	67 e1       	ldi	r22, 0x17	; 23
    a5d2:	70 e0       	ldi	r23, 0x00	; 0
    a5d4:	8a e0       	ldi	r24, 0x0A	; 10
    a5d6:	90 e0       	ldi	r25, 0x00	; 0
}
    a5d8:	0f 90       	pop	r0
    a5da:	df 91       	pop	r29
    a5dc:	cf 91       	pop	r28
    a5de:	1f 91       	pop	r17
    a5e0:	0f 91       	pop	r16
    a5e2:	ff 90       	pop	r15
    a5e4:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a5e6:	0c 94 6a 45 	jmp	0x8ad4	; 0x8ad4 <Print>

0000a5ea <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    a5ea:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <fade_through>
	SetSpriteVisibility(true);
    a5ee:	81 e0       	ldi	r24, 0x01	; 1
    a5f0:	0e 94 91 43 	call	0x8722	; 0x8722 <SetSpriteVisibility>
	init_game_state();
    a5f4:	0e 94 98 48 	call	0x9130	; 0x9130 <init_game_state>
	load_tank_rank();
    a5f8:	0c 94 58 52 	jmp	0xa4b0	; 0xa4b0 <load_tank_rank>

0000a5fc <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a5fc:	af 92       	push	r10
    a5fe:	bf 92       	push	r11
    a600:	cf 92       	push	r12
    a602:	df 92       	push	r13
    a604:	ef 92       	push	r14
    a606:	ff 92       	push	r15
    a608:	0f 93       	push	r16
    a60a:	1f 93       	push	r17
    a60c:	cf 93       	push	r28
    a60e:	df 93       	push	r29
    a610:	8c 01       	movw	r16, r24
    a612:	eb 01       	movw	r28, r22
    a614:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    a616:	fc 01       	movw	r30, r24
    a618:	80 81       	ld	r24, Z
    a61a:	83 ff       	sbrs	r24, 3
    a61c:	0f c0       	rjmp	.+30     	; 0xa63c <update_level_helper+0x40>
	{
		SFX_NAVIGATE;
    a61e:	2f ef       	ldi	r18, 0xFF	; 255
    a620:	47 e1       	ldi	r20, 0x17	; 23
    a622:	67 e0       	ldi	r22, 0x07	; 7
    a624:	84 e0       	ldi	r24, 0x04	; 4
    a626:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		game.paused = game.paused ^ 1;
    a62a:	90 91 c3 0b 	lds	r25, 0x0BC3
    a62e:	81 e0       	ldi	r24, 0x01	; 1
    a630:	89 27       	eor	r24, r25
    a632:	80 93 c3 0b 	sts	0x0BC3, r24
		load_level_tiles(false);
    a636:	80 e0       	ldi	r24, 0x00	; 0
    a638:	0e 94 e1 50 	call	0xa1c2	; 0xa1c2 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    a63c:	20 91 c3 0b 	lds	r18, 0x0BC3
    a640:	f8 01       	movw	r30, r16
    a642:	80 81       	ld	r24, Z
    a644:	91 81       	ldd	r25, Z+1	; 0x01
    a646:	21 11       	cpse	r18, r1
    a648:	5f c1       	rjmp	.+702    	; 0xa908 <update_level_helper+0x30c>
    a64a:	2b 89       	ldd	r18, Y+19	; 0x13
    a64c:	20 fd       	sbrc	r18, 0
    a64e:	5c c1       	rjmp	.+696    	; 0xa908 <update_level_helper+0x30c>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    a650:	93 ff       	sbrs	r25, 3
    a652:	11 c0       	rjmp	.+34     	; 0xa676 <update_level_helper+0x7a>
    a654:	8c 89       	ldd	r24, Y+20	; 0x14
    a656:	8a 35       	cpi	r24, 0x5A	; 90
    a658:	71 f4       	brne	.+28     	; 0xa676 <update_level_helper+0x7a>
		{
			player->banter_frame = 0;
    a65a:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    a65c:	69 e0       	ldi	r22, 0x09	; 9
    a65e:	70 e0       	ldi	r23, 0x00	; 0
    a660:	80 e0       	ldi	r24, 0x00	; 0
    a662:	90 e0       	ldi	r25, 0x00	; 0
    a664:	0e 94 90 47 	call	0x8f20	; 0x8f20 <LBRandom>
    a668:	8d 8b       	std	Y+21, r24	; 0x15
			SFX_BANTER;
    a66a:	2f e5       	ldi	r18, 0x5F	; 95
    a66c:	4e e1       	ldi	r20, 0x1E	; 30
    a66e:	60 e0       	ldi	r22, 0x00	; 0
    a670:	84 e0       	ldi	r24, 0x04	; 4
    a672:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    a676:	6f 89       	ldd	r22, Y+23	; 0x17
    a678:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    a67a:	f8 01       	movw	r30, r16
    a67c:	84 81       	ldd	r24, Z+4	; 0x04
    a67e:	84 ff       	sbrs	r24, 4
    a680:	15 c0       	rjmp	.+42     	; 0xa6ac <update_level_helper+0xb0>
		{
			player->shared.direction = D_UP;
    a682:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    a684:	70 e0       	ldi	r23, 0x00	; 0
    a686:	80 e0       	ldi	r24, 0x00	; 0
    a688:	90 e0       	ldi	r25, 0x00	; 0
    a68a:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a68e:	25 e6       	ldi	r18, 0x65	; 101
    a690:	38 e8       	ldi	r19, 0x88	; 136
    a692:	48 e8       	ldi	r20, 0x88	; 136
    a694:	5c e3       	ldi	r21, 0x3C	; 60
    a696:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a69a:	9b 01       	movw	r18, r22
    a69c:	ac 01       	movw	r20, r24
    a69e:	6e 81       	ldd	r22, Y+6	; 0x06
    a6a0:	7f 81       	ldd	r23, Y+7	; 0x07
    a6a2:	88 85       	ldd	r24, Y+8	; 0x08
    a6a4:	99 85       	ldd	r25, Y+9	; 0x09
    a6a6:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    a6aa:	2f c0       	rjmp	.+94     	; 0xa70a <update_level_helper+0x10e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    a6ac:	87 ff       	sbrs	r24, 7
    a6ae:	16 c0       	rjmp	.+44     	; 0xa6dc <update_level_helper+0xe0>
		{
			player->shared.direction = D_RIGHT;
    a6b0:	81 e0       	ldi	r24, 0x01	; 1
    a6b2:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    a6b4:	70 e0       	ldi	r23, 0x00	; 0
    a6b6:	80 e0       	ldi	r24, 0x00	; 0
    a6b8:	90 e0       	ldi	r25, 0x00	; 0
    a6ba:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a6be:	25 e6       	ldi	r18, 0x65	; 101
    a6c0:	38 e8       	ldi	r19, 0x88	; 136
    a6c2:	48 e8       	ldi	r20, 0x88	; 136
    a6c4:	5c e3       	ldi	r21, 0x3C	; 60
    a6c6:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a6ca:	9b 01       	movw	r18, r22
    a6cc:	ac 01       	movw	r20, r24
    a6ce:	6a 81       	ldd	r22, Y+2	; 0x02
    a6d0:	7b 81       	ldd	r23, Y+3	; 0x03
    a6d2:	8c 81       	ldd	r24, Y+4	; 0x04
    a6d4:	9d 81       	ldd	r25, Y+5	; 0x05
    a6d6:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    a6da:	33 c0       	rjmp	.+102    	; 0xa742 <update_level_helper+0x146>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    a6dc:	85 ff       	sbrs	r24, 5
    a6de:	1a c0       	rjmp	.+52     	; 0xa714 <update_level_helper+0x118>
		{
			player->shared.direction = D_DOWN;
    a6e0:	82 e0       	ldi	r24, 0x02	; 2
    a6e2:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    a6e4:	70 e0       	ldi	r23, 0x00	; 0
    a6e6:	80 e0       	ldi	r24, 0x00	; 0
    a6e8:	90 e0       	ldi	r25, 0x00	; 0
    a6ea:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a6ee:	25 e6       	ldi	r18, 0x65	; 101
    a6f0:	38 e8       	ldi	r19, 0x88	; 136
    a6f2:	48 e8       	ldi	r20, 0x88	; 136
    a6f4:	5c e3       	ldi	r21, 0x3C	; 60
    a6f6:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a6fa:	9b 01       	movw	r18, r22
    a6fc:	ac 01       	movw	r20, r24
    a6fe:	6e 81       	ldd	r22, Y+6	; 0x06
    a700:	7f 81       	ldd	r23, Y+7	; 0x07
    a702:	88 85       	ldd	r24, Y+8	; 0x08
    a704:	99 85       	ldd	r25, Y+9	; 0x09
    a706:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    a70a:	6e 83       	std	Y+6, r22	; 0x06
    a70c:	7f 83       	std	Y+7, r23	; 0x07
    a70e:	88 87       	std	Y+8, r24	; 0x08
    a710:	99 87       	std	Y+9, r25	; 0x09
    a712:	1d c0       	rjmp	.+58     	; 0xa74e <update_level_helper+0x152>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    a714:	86 ff       	sbrs	r24, 6
    a716:	1a c0       	rjmp	.+52     	; 0xa74c <update_level_helper+0x150>
		{
			player->shared.direction = D_LEFT;
    a718:	83 e0       	ldi	r24, 0x03	; 3
    a71a:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    a71c:	70 e0       	ldi	r23, 0x00	; 0
    a71e:	80 e0       	ldi	r24, 0x00	; 0
    a720:	90 e0       	ldi	r25, 0x00	; 0
    a722:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a726:	25 e6       	ldi	r18, 0x65	; 101
    a728:	38 e8       	ldi	r19, 0x88	; 136
    a72a:	48 e8       	ldi	r20, 0x88	; 136
    a72c:	5c e3       	ldi	r21, 0x3C	; 60
    a72e:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a732:	9b 01       	movw	r18, r22
    a734:	ac 01       	movw	r20, r24
    a736:	6a 81       	ldd	r22, Y+2	; 0x02
    a738:	7b 81       	ldd	r23, Y+3	; 0x03
    a73a:	8c 81       	ldd	r24, Y+4	; 0x04
    a73c:	9d 81       	ldd	r25, Y+5	; 0x05
    a73e:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    a742:	6a 83       	std	Y+2, r22	; 0x02
    a744:	7b 83       	std	Y+3, r23	; 0x03
    a746:	8c 83       	std	Y+4, r24	; 0x04
    a748:	9d 83       	std	Y+5, r25	; 0x05
    a74a:	01 c0       	rjmp	.+2      	; 0xa74e <update_level_helper+0x152>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    a74c:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    a74e:	f8 01       	movw	r30, r16
    a750:	80 81       	ld	r24, Z
    a752:	91 81       	ldd	r25, Z+1	; 0x01
    a754:	90 ff       	sbrs	r25, 0
    a756:	50 c0       	rjmp	.+160    	; 0xa7f8 <update_level_helper+0x1fc>
    a758:	88 89       	ldd	r24, Y+16	; 0x10
    a75a:	82 30       	cpi	r24, 0x02	; 2
    a75c:	08 f0       	brcs	.+2      	; 0xa760 <update_level_helper+0x164>
    a75e:	4c c0       	rjmp	.+152    	; 0xa7f8 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    a760:	8f a1       	ldd	r24, Y+39	; 0x27
    a762:	81 11       	cpse	r24, r1
    a764:	06 c0       	rjmp	.+12     	; 0xa772 <update_level_helper+0x176>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a766:	8e 01       	movw	r16, r28
    a768:	06 5e       	subi	r16, 0xE6	; 230
    a76a:	1f 4f       	sbci	r17, 0xFF	; 255
    a76c:	a1 2c       	mov	r10, r1
    a76e:	b1 2c       	mov	r11, r1
    a770:	0c c0       	rjmp	.+24     	; 0xa78a <update_level_helper+0x18e>
				if (!shot->active)
    a772:	fe 01       	movw	r30, r28
    a774:	e7 5b       	subi	r30, 0xB7	; 183
    a776:	ff 4f       	sbci	r31, 0xFF	; 255
    a778:	80 81       	ld	r24, Z
    a77a:	81 11       	cpse	r24, r1
    a77c:	3d c0       	rjmp	.+122    	; 0xa7f8 <update_level_helper+0x1fc>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a77e:	8e 01       	movw	r16, r28
    a780:	04 5c       	subi	r16, 0xC4	; 196
    a782:	1f 4f       	sbci	r17, 0xFF	; 255
    a784:	aa 24       	eor	r10, r10
    a786:	a3 94       	inc	r10
    a788:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    a78a:	88 8d       	ldd	r24, Y+24	; 0x18
    a78c:	88 23       	and	r24, r24
    a78e:	61 f0       	breq	.+24     	; 0xa7a8 <update_level_helper+0x1ac>
					{
						init_shot_state(shot, ROCKET_SHOT);
    a790:	61 e0       	ldi	r22, 0x01	; 1
    a792:	c8 01       	movw	r24, r16
    a794:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    a798:	61 e0       	ldi	r22, 0x01	; 1
    a79a:	c8 01       	movw	r24, r16
    a79c:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <set_shot_animations>
						SFX_ROCKET;
    a7a0:	2f ef       	ldi	r18, 0xFF	; 255
    a7a2:	47 e1       	ldi	r20, 0x17	; 23
    a7a4:	68 e0       	ldi	r22, 0x08	; 8
    a7a6:	0b c0       	rjmp	.+22     	; 0xa7be <update_level_helper+0x1c2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    a7a8:	60 e0       	ldi	r22, 0x00	; 0
    a7aa:	c8 01       	movw	r24, r16
    a7ac:	0e 94 df 47 	call	0x8fbe	; 0x8fbe <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    a7b0:	60 e0       	ldi	r22, 0x00	; 0
    a7b2:	c8 01       	movw	r24, r16
    a7b4:	0e 94 fa 47 	call	0x8ff4	; 0x8ff4 <set_shot_animations>
						SFX_CANNONBALL;
    a7b8:	2f ef       	ldi	r18, 0xFF	; 255
    a7ba:	47 e1       	ldi	r20, 0x17	; 23
    a7bc:	62 e0       	ldi	r22, 0x02	; 2
    a7be:	84 e0       	ldi	r24, 0x04	; 4
    a7c0:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
					}
					player->active_shots++;
    a7c4:	88 89       	ldd	r24, Y+16	; 0x10
    a7c6:	8f 5f       	subi	r24, 0xFF	; 255
    a7c8:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    a7ca:	82 e2       	ldi	r24, 0x22	; 34
    a7cc:	8a 9d       	mul	r24, r10
    a7ce:	60 01       	movw	r12, r0
    a7d0:	8b 9d       	mul	r24, r11
    a7d2:	d0 0c       	add	r13, r0
    a7d4:	11 24       	eor	r1, r1
    a7d6:	cc 0e       	add	r12, r28
    a7d8:	dd 1e       	adc	r13, r29
    a7da:	88 81       	ld	r24, Y
    a7dc:	f6 01       	movw	r30, r12
    a7de:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    a7e0:	b8 01       	movw	r22, r16
    a7e2:	ce 01       	movw	r24, r28
    a7e4:	0e 94 5c 49 	call	0x92b8	; 0x92b8 <position_shot>
					shot->active = 1;
    a7e8:	81 e0       	ldi	r24, 0x01	; 1
    a7ea:	f6 01       	movw	r30, r12
    a7ec:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    a7ee:	89 8d       	ldd	r24, Y+25	; 0x19
    a7f0:	88 23       	and	r24, r24
    a7f2:	11 f0       	breq	.+4      	; 0xa7f8 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    a7f4:	86 e9       	ldi	r24, 0x96	; 150
    a7f6:	83 8f       	std	Z+27, r24	; 0x1b
    a7f8:	8e 01       	movw	r16, r28
    a7fa:	05 5e       	subi	r16, 0xE5	; 229
    a7fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a7fe:	5e 01       	movw	r10, r28
    a800:	ff e5       	ldi	r31, 0x5F	; 95
    a802:	af 0e       	add	r10, r31
    a804:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    a806:	f8 01       	movw	r30, r16
    a808:	84 85       	ldd	r24, Z+12	; 0x0c
    a80a:	88 23       	and	r24, r24
    a80c:	09 f4       	brne	.+2      	; 0xa810 <update_level_helper+0x214>
    a80e:	75 c0       	rjmp	.+234    	; 0xa8fa <update_level_helper+0x2fe>
			{
				switch (shot->shared.direction)
    a810:	82 91       	ld	r24, -Z
    a812:	6f 01       	movw	r12, r30
    a814:	81 30       	cpi	r24, 0x01	; 1
    a816:	a9 f1       	breq	.+106    	; 0xa882 <update_level_helper+0x286>
    a818:	e8 f0       	brcs	.+58     	; 0xa854 <update_level_helper+0x258>
    a81a:	82 30       	cpi	r24, 0x02	; 2
    a81c:	09 f4       	brne	.+2      	; 0xa820 <update_level_helper+0x224>
    a81e:	48 c0       	rjmp	.+144    	; 0xa8b0 <update_level_helper+0x2b4>
    a820:	83 30       	cpi	r24, 0x03	; 3
    a822:	09 f0       	breq	.+2      	; 0xa826 <update_level_helper+0x22a>
    a824:	66 c0       	rjmp	.+204    	; 0xa8f2 <update_level_helper+0x2f6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    a826:	f8 01       	movw	r30, r16
    a828:	60 81       	ld	r22, Z
    a82a:	70 e0       	ldi	r23, 0x00	; 0
    a82c:	80 e0       	ldi	r24, 0x00	; 0
    a82e:	90 e0       	ldi	r25, 0x00	; 0
    a830:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a834:	25 e6       	ldi	r18, 0x65	; 101
    a836:	38 e8       	ldi	r19, 0x88	; 136
    a838:	48 e8       	ldi	r20, 0x88	; 136
    a83a:	5c e3       	ldi	r21, 0x3C	; 60
    a83c:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a840:	9b 01       	movw	r18, r22
    a842:	ac 01       	movw	r20, r24
    a844:	f8 01       	movw	r30, r16
    a846:	61 81       	ldd	r22, Z+1	; 0x01
    a848:	72 81       	ldd	r23, Z+2	; 0x02
    a84a:	83 81       	ldd	r24, Z+3	; 0x03
    a84c:	94 81       	ldd	r25, Z+4	; 0x04
    a84e:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    a852:	4a c0       	rjmp	.+148    	; 0xa8e8 <update_level_helper+0x2ec>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    a854:	f8 01       	movw	r30, r16
    a856:	60 81       	ld	r22, Z
    a858:	70 e0       	ldi	r23, 0x00	; 0
    a85a:	80 e0       	ldi	r24, 0x00	; 0
    a85c:	90 e0       	ldi	r25, 0x00	; 0
    a85e:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a862:	25 e6       	ldi	r18, 0x65	; 101
    a864:	38 e8       	ldi	r19, 0x88	; 136
    a866:	48 e8       	ldi	r20, 0x88	; 136
    a868:	5c e3       	ldi	r21, 0x3C	; 60
    a86a:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a86e:	9b 01       	movw	r18, r22
    a870:	ac 01       	movw	r20, r24
    a872:	f8 01       	movw	r30, r16
    a874:	65 81       	ldd	r22, Z+5	; 0x05
    a876:	76 81       	ldd	r23, Z+6	; 0x06
    a878:	87 81       	ldd	r24, Z+7	; 0x07
    a87a:	90 85       	ldd	r25, Z+8	; 0x08
    a87c:	0e 94 da 58 	call	0xb1b4	; 0xb1b4 <__subsf3>
    a880:	2d c0       	rjmp	.+90     	; 0xa8dc <update_level_helper+0x2e0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    a882:	f8 01       	movw	r30, r16
    a884:	60 81       	ld	r22, Z
    a886:	70 e0       	ldi	r23, 0x00	; 0
    a888:	80 e0       	ldi	r24, 0x00	; 0
    a88a:	90 e0       	ldi	r25, 0x00	; 0
    a88c:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a890:	25 e6       	ldi	r18, 0x65	; 101
    a892:	38 e8       	ldi	r19, 0x88	; 136
    a894:	48 e8       	ldi	r20, 0x88	; 136
    a896:	5c e3       	ldi	r21, 0x3C	; 60
    a898:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a89c:	9b 01       	movw	r18, r22
    a89e:	ac 01       	movw	r20, r24
    a8a0:	f8 01       	movw	r30, r16
    a8a2:	61 81       	ldd	r22, Z+1	; 0x01
    a8a4:	72 81       	ldd	r23, Z+2	; 0x02
    a8a6:	83 81       	ldd	r24, Z+3	; 0x03
    a8a8:	94 81       	ldd	r25, Z+4	; 0x04
    a8aa:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    a8ae:	1c c0       	rjmp	.+56     	; 0xa8e8 <update_level_helper+0x2ec>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    a8b0:	f8 01       	movw	r30, r16
    a8b2:	60 81       	ld	r22, Z
    a8b4:	70 e0       	ldi	r23, 0x00	; 0
    a8b6:	80 e0       	ldi	r24, 0x00	; 0
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 d9 59 	call	0xb3b2	; 0xb3b2 <__floatsisf>
    a8be:	25 e6       	ldi	r18, 0x65	; 101
    a8c0:	38 e8       	ldi	r19, 0x88	; 136
    a8c2:	48 e8       	ldi	r20, 0x88	; 136
    a8c4:	5c e3       	ldi	r21, 0x3C	; 60
    a8c6:	0e 94 8d 5a 	call	0xb51a	; 0xb51a <__mulsf3>
    a8ca:	9b 01       	movw	r18, r22
    a8cc:	ac 01       	movw	r20, r24
    a8ce:	f8 01       	movw	r30, r16
    a8d0:	65 81       	ldd	r22, Z+5	; 0x05
    a8d2:	76 81       	ldd	r23, Z+6	; 0x06
    a8d4:	87 81       	ldd	r24, Z+7	; 0x07
    a8d6:	90 85       	ldd	r25, Z+8	; 0x08
    a8d8:	0e 94 db 58 	call	0xb1b6	; 0xb1b6 <__addsf3>
    a8dc:	f8 01       	movw	r30, r16
    a8de:	65 83       	std	Z+5, r22	; 0x05
    a8e0:	76 83       	std	Z+6, r23	; 0x06
    a8e2:	87 83       	std	Z+7, r24	; 0x07
    a8e4:	90 87       	std	Z+8, r25	; 0x08
    a8e6:	05 c0       	rjmp	.+10     	; 0xa8f2 <update_level_helper+0x2f6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    a8e8:	f8 01       	movw	r30, r16
    a8ea:	61 83       	std	Z+1, r22	; 0x01
    a8ec:	72 83       	std	Z+2, r23	; 0x02
    a8ee:	83 83       	std	Z+3, r24	; 0x03
    a8f0:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    a8f2:	b6 01       	movw	r22, r12
    a8f4:	ce 01       	movw	r24, r28
    a8f6:	0e 94 70 4e 	call	0x9ce0	; 0x9ce0 <collision_detect_shot>
    a8fa:	0e 5d       	subi	r16, 0xDE	; 222
    a8fc:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    a8fe:	0a 15       	cp	r16, r10
    a900:	1b 05       	cpc	r17, r11
    a902:	09 f0       	breq	.+2      	; 0xa906 <update_level_helper+0x30a>
    a904:	80 cf       	rjmp	.-256    	; 0xa806 <update_level_helper+0x20a>
    a906:	0c c0       	rjmp	.+24     	; 0xa920 <update_level_helper+0x324>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    a908:	91 ff       	sbrs	r25, 1
    a90a:	0a c0       	rjmp	.+20     	; 0xa920 <update_level_helper+0x324>
		{
			SFX_NAVIGATE;
    a90c:	2f ef       	ldi	r18, 0xFF	; 255
    a90e:	47 e1       	ldi	r20, 0x17	; 23
    a910:	67 e0       	ldi	r22, 0x07	; 7
    a912:	84 e0       	ldi	r24, 0x04	; 4
    a914:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
			save_score();
    a918:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <save_score>
			exit_game();
    a91c:	0e 94 f5 52 	call	0xa5ea	; 0xa5ea <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score == MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    a920:	8f 85       	ldd	r24, Y+15	; 0x0f
    a922:	85 30       	cpi	r24, 0x05	; 5
    a924:	d1 f5       	brne	.+116    	; 0xa99a <update_level_helper+0x39e>
    a926:	f7 01       	movw	r30, r14
    a928:	83 89       	ldd	r24, Z+19	; 0x13
    a92a:	80 fd       	sbrc	r24, 0
    a92c:	36 c0       	rjmp	.+108    	; 0xa99a <update_level_helper+0x39e>
	{
		save_score();
    a92e:	0e 94 f3 48 	call	0x91e6	; 0x91e6 <save_score>
		load_level_tiles(true);
    a932:	81 e0       	ldi	r24, 0x01	; 1
    a934:	0e 94 e1 50 	call	0xa1c2	; 0xa1c2 <load_level_tiles>
		SetSpriteVisibility(false);
    a938:	80 e0       	ldi	r24, 0x00	; 0
    a93a:	0e 94 91 43 	call	0x8722	; 0x8722 <SetSpriteVisibility>
		print_level_score(player, other_player);
    a93e:	b7 01       	movw	r22, r14
    a940:	ce 01       	movw	r24, r28
    a942:	0e 94 ca 49 	call	0x9394	; 0x9394 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    a946:	82 e0       	ldi	r24, 0x02	; 2
    a948:	0e 94 ad 47 	call	0x8f5a	; 0x8f5a <LBWaitSeconds>
		player->level_score = 0;
    a94c:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    a94e:	f7 01       	movw	r30, r14
    a950:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    a952:	c0 91 c2 0b 	lds	r28, 0x0BC2
    a956:	cf 5f       	subi	r28, 0xFF	; 255
		SFX_LEVEL_CLEAR;
    a958:	2f ef       	ldi	r18, 0xFF	; 255
    a95a:	47 e1       	ldi	r20, 0x17	; 23
    a95c:	64 e0       	ldi	r22, 0x04	; 4
    a95e:	84 e0       	ldi	r24, 0x04	; 4
    a960:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    a964:	ca 30       	cpi	r28, 0x0A	; 10
    a966:	60 f0       	brcs	.+24     	; 0xa980 <update_level_helper+0x384>
		else
		{
			level_transition(next_level);
		}
	}
}
    a968:	df 91       	pop	r29
    a96a:	cf 91       	pop	r28
    a96c:	1f 91       	pop	r17
    a96e:	0f 91       	pop	r16
    a970:	ff 90       	pop	r15
    a972:	ef 90       	pop	r14
    a974:	df 90       	pop	r13
    a976:	cf 90       	pop	r12
    a978:	bf 90       	pop	r11
    a97a:	af 90       	pop	r10
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		SFX_LEVEL_CLEAR;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    a97c:	0c 94 f5 52 	jmp	0xa5ea	; 0xa5ea <exit_game>
		}
		else
		{
			level_transition(next_level);
    a980:	8c 2f       	mov	r24, r28
		}
	}
}
    a982:	df 91       	pop	r29
    a984:	cf 91       	pop	r28
    a986:	1f 91       	pop	r17
    a988:	0f 91       	pop	r16
    a98a:	ff 90       	pop	r15
    a98c:	ef 90       	pop	r14
    a98e:	df 90       	pop	r13
    a990:	cf 90       	pop	r12
    a992:	bf 90       	pop	r11
    a994:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    a996:	0c 94 f6 51 	jmp	0xa3ec	; 0xa3ec <level_transition>
		}
	}
}
    a99a:	df 91       	pop	r29
    a99c:	cf 91       	pop	r28
    a99e:	1f 91       	pop	r17
    a9a0:	0f 91       	pop	r16
    a9a2:	ff 90       	pop	r15
    a9a4:	ef 90       	pop	r14
    a9a6:	df 90       	pop	r13
    a9a8:	cf 90       	pop	r12
    a9aa:	bf 90       	pop	r11
    a9ac:	af 90       	pop	r10
    a9ae:	08 95       	ret

0000a9b0 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    a9b0:	cf 92       	push	r12
    a9b2:	df 92       	push	r13
    a9b4:	ef 92       	push	r14
    a9b6:	ff 92       	push	r15
    a9b8:	1f 93       	push	r17
    a9ba:	cf 93       	push	r28
    a9bc:	df 93       	push	r29
    a9be:	6c 01       	movw	r12, r24
    a9c0:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    a9c2:	80 91 c3 0b 	lds	r24, 0x0BC3
    a9c6:	88 23       	and	r24, r24
    a9c8:	d1 f0       	breq	.+52     	; 0xa9fe <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    a9ca:	80 e0       	ldi	r24, 0x00	; 0
    a9cc:	0e 94 91 43 	call	0x8722	; 0x8722 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    a9d0:	4c e0       	ldi	r20, 0x0C	; 12
    a9d2:	51 e2       	ldi	r21, 0x21	; 33
    a9d4:	6c e0       	ldi	r22, 0x0C	; 12
    a9d6:	88 e0       	ldi	r24, 0x08	; 8
    a9d8:	0e 94 ea 44 	call	0x89d4	; 0x89d4 <DrawMap2>
		Print(12, 13, strPaused);
    a9dc:	4e e6       	ldi	r20, 0x6E	; 110
    a9de:	51 e0       	ldi	r21, 0x01	; 1
    a9e0:	6d e0       	ldi	r22, 0x0D	; 13
    a9e2:	70 e0       	ldi	r23, 0x00	; 0
    a9e4:	8c e0       	ldi	r24, 0x0C	; 12
    a9e6:	90 e0       	ldi	r25, 0x00	; 0
    a9e8:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
		Print(11, 14, strExit);
    a9ec:	45 e7       	ldi	r20, 0x75	; 117
    a9ee:	51 e0       	ldi	r21, 0x01	; 1
    a9f0:	6e e0       	ldi	r22, 0x0E	; 14
    a9f2:	70 e0       	ldi	r23, 0x00	; 0
    a9f4:	8b e0       	ldi	r24, 0x0B	; 11
    a9f6:	90 e0       	ldi	r25, 0x00	; 0
    a9f8:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    a9fc:	44 c0       	rjmp	.+136    	; 0xaa86 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    a9fe:	81 e0       	ldi	r24, 0x01	; 1
    aa00:	0e 94 91 43 	call	0x8722	; 0x8722 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    aa04:	60 e0       	ldi	r22, 0x00	; 0
    aa06:	8e ed       	ldi	r24, 0xDE	; 222
    aa08:	9b e0       	ldi	r25, 0x0B	; 11
    aa0a:	0e 94 16 4b 	call	0x962c	; 0x962c <tank_map>
    aa0e:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    aa10:	68 2f       	mov	r22, r24
    aa12:	8f e4       	ldi	r24, 0x4F	; 79
    aa14:	9f e0       	ldi	r25, 0x0F	; 15
    aa16:	0e 94 16 4b 	call	0x962c	; 0x962c <tank_map>
    aa1a:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    aa1c:	68 2f       	mov	r22, r24
    aa1e:	8e ed       	ldi	r24, 0xDE	; 222
    aa20:	9b e0       	ldi	r25, 0x0B	; 11
    aa22:	0e 94 98 4b 	call	0x9730	; 0x9730 <shot_map>
    aa26:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    aa28:	68 2f       	mov	r22, r24
    aa2a:	8f e4       	ldi	r24, 0x4F	; 79
    aa2c:	9f e0       	ldi	r25, 0x0F	; 15
    aa2e:	0e 94 98 4b 	call	0x9730	; 0x9730 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    aa32:	40 91 02 01 	lds	r20, 0x0102
    aa36:	6f e0       	ldi	r22, 0x0F	; 15
    aa38:	8e ed       	ldi	r24, 0xDE	; 222
    aa3a:	9b e0       	ldi	r25, 0x0B	; 11
    aa3c:	0e 94 45 4a 	call	0x948a	; 0x948a <render_banter>
    aa40:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    aa44:	40 91 01 01 	lds	r20, 0x0101
    aa48:	60 e0       	ldi	r22, 0x00	; 0
    aa4a:	8f e4       	ldi	r24, 0x4F	; 79
    aa4c:	9f e0       	ldi	r25, 0x0F	; 15
    aa4e:	0e 94 45 4a 	call	0x948a	; 0x948a <render_banter>
    aa52:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    aa56:	60 e0       	ldi	r22, 0x00	; 0
    aa58:	8e ed       	ldi	r24, 0xDE	; 222
    aa5a:	9b e0       	ldi	r25, 0x0B	; 11
    aa5c:	0e 94 6d 4a 	call	0x94da	; 0x94da <render_player>
		render_player(&player2, p2_index);
    aa60:	61 2f       	mov	r22, r17
    aa62:	8f e4       	ldi	r24, 0x4F	; 79
    aa64:	9f e0       	ldi	r25, 0x0F	; 15
    aa66:	0e 94 6d 4a 	call	0x94da	; 0x94da <render_player>
		render_shot(&player1, p1_shot_index);
    aa6a:	6d 2f       	mov	r22, r29
    aa6c:	8e ed       	ldi	r24, 0xDE	; 222
    aa6e:	9b e0       	ldi	r25, 0x0B	; 11
    aa70:	0e 94 96 4a 	call	0x952c	; 0x952c <render_shot>
		render_shot(&player2, p2_shot_index);
    aa74:	6c 2f       	mov	r22, r28
    aa76:	8f e4       	ldi	r24, 0x4F	; 79
    aa78:	9f e0       	ldi	r25, 0x0F	; 15
    aa7a:	0e 94 96 4a 	call	0x952c	; 0x952c <render_shot>
		render_tile_explosions(&tile_animations);
    aa7e:	85 ec       	ldi	r24, 0xC5	; 197
    aa80:	9b e0       	ldi	r25, 0x0B	; 11
    aa82:	0e 94 d1 4a 	call	0x95a2	; 0x95a2 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    aa86:	2f e0       	ldi	r18, 0x0F	; 15
    aa88:	4f e4       	ldi	r20, 0x4F	; 79
    aa8a:	5f e0       	ldi	r21, 0x0F	; 15
    aa8c:	6e ed       	ldi	r22, 0xDE	; 222
    aa8e:	7b e0       	ldi	r23, 0x0B	; 11
    aa90:	c6 01       	movw	r24, r12
    aa92:	0e 94 fe 52 	call	0xa5fc	; 0xa5fc <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    aa96:	20 e0       	ldi	r18, 0x00	; 0
    aa98:	4e ed       	ldi	r20, 0xDE	; 222
    aa9a:	5b e0       	ldi	r21, 0x0B	; 11
    aa9c:	6f e4       	ldi	r22, 0x4F	; 79
    aa9e:	7f e0       	ldi	r23, 0x0F	; 15
    aaa0:	c7 01       	movw	r24, r14
    aaa2:	0e 94 fe 52 	call	0xa5fc	; 0xa5fc <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    aaa6:	2f e0       	ldi	r18, 0x0F	; 15
    aaa8:	40 e0       	ldi	r20, 0x00	; 0
    aaaa:	6f e4       	ldi	r22, 0x4F	; 79
    aaac:	7f e0       	ldi	r23, 0x0F	; 15
    aaae:	8e ed       	ldi	r24, 0xDE	; 222
    aab0:	9b e0       	ldi	r25, 0x0B	; 11
    aab2:	0e 94 ea 4f 	call	0x9fd4	; 0x9fd4 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    aab6:	20 e0       	ldi	r18, 0x00	; 0
    aab8:	4f e0       	ldi	r20, 0x0F	; 15
    aaba:	6e ed       	ldi	r22, 0xDE	; 222
    aabc:	7b e0       	ldi	r23, 0x0B	; 11
    aabe:	8f e4       	ldi	r24, 0x4F	; 79
    aac0:	9f e0       	ldi	r25, 0x0F	; 15
}
    aac2:	df 91       	pop	r29
    aac4:	cf 91       	pop	r28
    aac6:	1f 91       	pop	r17
    aac8:	ff 90       	pop	r15
    aaca:	ef 90       	pop	r14
    aacc:	df 90       	pop	r13
    aace:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    aad0:	0c 94 ea 4f 	jmp	0x9fd4	; 0x9fd4 <collision_detect_player>

0000aad4 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    aad4:	fc 01       	movw	r30, r24
    aad6:	80 81       	ld	r24, Z
    aad8:	91 81       	ldd	r25, Z+1	; 0x01
    aada:	91 ff       	sbrs	r25, 1
    aadc:	0a c0       	rjmp	.+20     	; 0xaaf2 <update_tank_rank+0x1e>
	{
		SFX_NAVIGATE;
    aade:	2f ef       	ldi	r18, 0xFF	; 255
    aae0:	47 e1       	ldi	r20, 0x17	; 23
    aae2:	67 e0       	ldi	r22, 0x07	; 7
    aae4:	84 e0       	ldi	r24, 0x04	; 4
    aae6:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		fade_through();
    aaea:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <fade_through>
		load_splash();
    aaee:	0c 94 22 52 	jmp	0xa444	; 0xa444 <load_splash>
    aaf2:	08 95       	ret

0000aaf4 <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    aaf4:	0f 93       	push	r16
    aaf6:	1f 93       	push	r17
    aaf8:	cf 93       	push	r28
    aafa:	df 93       	push	r29
    aafc:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    aafe:	fb 01       	movw	r30, r22
    ab00:	20 81       	ld	r18, Z
    ab02:	31 81       	ldd	r19, Z+1	; 0x01
    ab04:	f9 01       	movw	r30, r18
    ab06:	e0 71       	andi	r30, 0x10	; 16
    ab08:	ff 27       	eor	r31, r31
    ab0a:	24 ff       	sbrs	r18, 4
    ab0c:	09 c0       	rjmp	.+18     	; 0xab20 <_handle_select_helper+0x2c>
    ab0e:	8d 81       	ldd	r24, Y+5	; 0x05
    ab10:	81 11       	cpse	r24, r1
    ab12:	06 c0       	rjmp	.+12     	; 0xab20 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    ab14:	88 81       	ld	r24, Y
    ab16:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    ab18:	87 ff       	sbrs	r24, 7
    ab1a:	0f c0       	rjmp	.+30     	; 0xab3a <_handle_select_helper+0x46>
    ab1c:	18 82       	st	Y, r1
    ab1e:	25 c0       	rjmp	.+74     	; 0xab6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    ab20:	b9 01       	movw	r22, r18
    ab22:	60 72       	andi	r22, 0x20	; 32
    ab24:	77 27       	eor	r23, r23
    ab26:	25 ff       	sbrs	r18, 5
    ab28:	0a c0       	rjmp	.+20     	; 0xab3e <_handle_select_helper+0x4a>
    ab2a:	8d 81       	ldd	r24, Y+5	; 0x05
    ab2c:	81 11       	cpse	r24, r1
    ab2e:	07 c0       	rjmp	.+14     	; 0xab3e <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    ab30:	88 81       	ld	r24, Y
    ab32:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    ab34:	89 30       	cpi	r24, 0x09	; 9
    ab36:	0c f0       	brlt	.+2      	; 0xab3a <_handle_select_helper+0x46>
    ab38:	88 e0       	ldi	r24, 0x08	; 8
    ab3a:	88 83       	st	Y, r24
    ab3c:	16 c0       	rjmp	.+44     	; 0xab6a <_handle_select_helper+0x76>
    ab3e:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    ab40:	a9 01       	movw	r20, r18
    ab42:	44 27       	eor	r20, r20
    ab44:	51 70       	andi	r21, 0x01	; 1
    ab46:	30 ff       	sbrs	r19, 0
    ab48:	1a c0       	rjmp	.+52     	; 0xab7e <_handle_select_helper+0x8a>
    ab4a:	ad 81       	ldd	r26, Y+5	; 0x05
    ab4c:	a1 11       	cpse	r26, r1
    ab4e:	17 c0       	rjmp	.+46     	; 0xab7e <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    ab50:	81 e0       	ldi	r24, 0x01	; 1
    ab52:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    ab54:	69 91       	ld	r22, Y+
    ab56:	f3 e0       	ldi	r31, 0x03	; 3
    ab58:	6f 02       	muls	r22, r31
    ab5a:	b0 01       	movw	r22, r0
    ab5c:	11 24       	eor	r1, r1
    ab5e:	6a 5d       	subi	r22, 0xDA	; 218
    ab60:	7e 4f       	sbci	r23, 0xFE	; 254
    ab62:	43 e0       	ldi	r20, 0x03	; 3
    ab64:	ce 01       	movw	r24, r28
    ab66:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
		SFX_NAVIGATE;
    ab6a:	2f ef       	ldi	r18, 0xFF	; 255
    ab6c:	47 e1       	ldi	r20, 0x17	; 23
    ab6e:	67 e0       	ldi	r22, 0x07	; 7
    ab70:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    ab72:	df 91       	pop	r29
    ab74:	cf 91       	pop	r28
    ab76:	1f 91       	pop	r17
    ab78:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    ab7a:	0c 94 a2 3a 	jmp	0x7544	; 0x7544 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    ab7e:	27 ff       	sbrs	r18, 7
    ab80:	09 c0       	rjmp	.+18     	; 0xab94 <_handle_select_helper+0xa0>
    ab82:	ad 81       	ldd	r26, Y+5	; 0x05
    ab84:	a1 30       	cpi	r26, 0x01	; 1
    ab86:	31 f4       	brne	.+12     	; 0xab94 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    ab88:	8c 81       	ldd	r24, Y+4	; 0x04
    ab8a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    ab8c:	83 30       	cpi	r24, 0x03	; 3
    ab8e:	5c f0       	brlt	.+22     	; 0xaba6 <_handle_select_helper+0xb2>
    ab90:	82 e0       	ldi	r24, 0x02	; 2
    ab92:	09 c0       	rjmp	.+18     	; 0xaba6 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    ab94:	26 ff       	sbrs	r18, 6
    ab96:	0b c0       	rjmp	.+22     	; 0xabae <_handle_select_helper+0xba>
    ab98:	ed 81       	ldd	r30, Y+5	; 0x05
    ab9a:	e1 30       	cpi	r30, 0x01	; 1
    ab9c:	41 f5       	brne	.+80     	; 0xabee <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    ab9e:	8c 81       	ldd	r24, Y+4	; 0x04
    aba0:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    aba2:	87 fd       	sbrc	r24, 7
    aba4:	02 c0       	rjmp	.+4      	; 0xabaa <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    aba6:	8c 83       	std	Y+4, r24	; 0x04
    aba8:	e0 cf       	rjmp	.-64     	; 0xab6a <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    abaa:	1c 82       	std	Y+4, r1	; 0x04
    abac:	de cf       	rjmp	.-68     	; 0xab6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    abae:	ef 2b       	or	r30, r31
    abb0:	69 f0       	breq	.+26     	; 0xabcc <_handle_select_helper+0xd8>
    abb2:	8d 81       	ldd	r24, Y+5	; 0x05
    abb4:	81 30       	cpi	r24, 0x01	; 1
    abb6:	09 f0       	breq	.+2      	; 0xabba <_handle_select_helper+0xc6>
    abb8:	43 c0       	rjmp	.+134    	; 0xac40 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    abba:	8c 81       	ldd	r24, Y+4	; 0x04
    abbc:	c8 0f       	add	r28, r24
    abbe:	d1 1d       	adc	r29, r1
    abc0:	99 81       	ldd	r25, Y+1	; 0x01
    abc2:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    abc4:	91 34       	cpi	r25, 0x41	; 65
    abc6:	70 f4       	brcc	.+28     	; 0xabe4 <_handle_select_helper+0xf0>
    abc8:	81 e4       	ldi	r24, 0x41	; 65
    abca:	0f c0       	rjmp	.+30     	; 0xabea <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    abcc:	67 2b       	or	r22, r23
    abce:	89 f0       	breq	.+34     	; 0xabf2 <_handle_select_helper+0xfe>
    abd0:	8d 81       	ldd	r24, Y+5	; 0x05
    abd2:	81 30       	cpi	r24, 0x01	; 1
    abd4:	a9 f5       	brne	.+106    	; 0xac40 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    abd6:	8c 81       	ldd	r24, Y+4	; 0x04
    abd8:	c8 0f       	add	r28, r24
    abda:	d1 1d       	adc	r29, r1
    abdc:	99 81       	ldd	r25, Y+1	; 0x01
    abde:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    abe0:	9b 35       	cpi	r25, 0x5B	; 91
    abe2:	10 f4       	brcc	.+4      	; 0xabe8 <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    abe4:	99 83       	std	Y+1, r25	; 0x01
    abe6:	c1 cf       	rjmp	.-126    	; 0xab6a <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    abe8:	8a e5       	ldi	r24, 0x5A	; 90
    abea:	89 83       	std	Y+1, r24	; 0x01
    abec:	be cf       	rjmp	.-132    	; 0xab6a <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    abee:	67 2b       	or	r22, r23
    abf0:	39 f5       	brne	.+78     	; 0xac40 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    abf2:	45 2b       	or	r20, r21
    abf4:	29 f1       	breq	.+74     	; 0xac40 <_handle_select_helper+0x14c>
    abf6:	4d 81       	ldd	r20, Y+5	; 0x05
    abf8:	41 30       	cpi	r20, 0x01	; 1
    abfa:	11 f5       	brne	.+68     	; 0xac40 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    abfc:	fe 01       	movw	r30, r28
    abfe:	21 91       	ld	r18, Z+
    ac00:	8f 01       	movw	r16, r30
    ac02:	fc 01       	movw	r30, r24
    ac04:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    ac06:	43 e0       	ldi	r20, 0x03	; 3
    ac08:	b8 01       	movw	r22, r16
    ac0a:	0b 96       	adiw	r24, 0x0b	; 11
    ac0c:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    ac10:	88 81       	ld	r24, Y
    ac12:	f3 e0       	ldi	r31, 0x03	; 3
    ac14:	8f 02       	muls	r24, r31
    ac16:	c0 01       	movw	r24, r0
    ac18:	11 24       	eor	r1, r1
    ac1a:	43 e0       	ldi	r20, 0x03	; 3
    ac1c:	b8 01       	movw	r22, r16
    ac1e:	8a 5d       	subi	r24, 0xDA	; 218
    ac20:	9e 4f       	sbci	r25, 0xFE	; 254
    ac22:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
		SFX_NAVIGATE;
    ac26:	2f ef       	ldi	r18, 0xFF	; 255
    ac28:	47 e1       	ldi	r20, 0x17	; 23
    ac2a:	67 e0       	ldi	r22, 0x07	; 7
    ac2c:	84 e0       	ldi	r24, 0x04	; 4
    ac2e:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ac32:	84 e2       	ldi	r24, 0x24	; 36
    ac34:	91 e0       	ldi	r25, 0x01	; 1
    ac36:	0e 94 6c 38 	call	0x70d8	; 0x70d8 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    ac3a:	82 e0       	ldi	r24, 0x02	; 2
    ac3c:	8d 83       	std	Y+5, r24	; 0x05
    ac3e:	1a c0       	rjmp	.+52     	; 0xac74 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    ac40:	31 ff       	sbrs	r19, 1
    ac42:	18 c0       	rjmp	.+48     	; 0xac74 <_handle_select_helper+0x180>
    ac44:	8d 81       	ldd	r24, Y+5	; 0x05
    ac46:	81 30       	cpi	r24, 0x01	; 1
    ac48:	11 f4       	brne	.+4      	; 0xac4e <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    ac4a:	1d 82       	std	Y+5, r1	; 0x05
    ac4c:	8e cf       	rjmp	.-228    	; 0xab6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    ac4e:	82 30       	cpi	r24, 0x02	; 2
    ac50:	19 f4       	brne	.+6      	; 0xac58 <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    ac52:	81 e0       	ldi	r24, 0x01	; 1
    ac54:	8d 83       	std	Y+5, r24	; 0x05
    ac56:	89 cf       	rjmp	.-238    	; 0xab6a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    ac58:	2f ef       	ldi	r18, 0xFF	; 255
    ac5a:	47 e1       	ldi	r20, 0x17	; 23
    ac5c:	67 e0       	ldi	r22, 0x07	; 7
    ac5e:	84 e0       	ldi	r24, 0x04	; 4
    ac60:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		fade_through();
    ac64:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <fade_through>
		load_splash();
	}
}
    ac68:	df 91       	pop	r29
    ac6a:	cf 91       	pop	r28
    ac6c:	1f 91       	pop	r17
    ac6e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    ac70:	0c 94 22 52 	jmp	0xa444	; 0xa444 <load_splash>
	}
}
    ac74:	df 91       	pop	r29
    ac76:	cf 91       	pop	r28
    ac78:	1f 91       	pop	r17
    ac7a:	0f 91       	pop	r16
    ac7c:	08 95       	ret

0000ac7e <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    ac7e:	af 92       	push	r10
    ac80:	bf 92       	push	r11
    ac82:	cf 92       	push	r12
    ac84:	df 92       	push	r13
    ac86:	ef 92       	push	r14
    ac88:	ff 92       	push	r15
    ac8a:	0f 93       	push	r16
    ac8c:	1f 93       	push	r17
    ac8e:	cf 93       	push	r28
    ac90:	df 93       	push	r29
    ac92:	00 d0       	rcall	.+0      	; 0xac94 <_handle_select_render_helper+0x16>
    ac94:	1f 92       	push	r1
    ac96:	cd b7       	in	r28, 0x3d	; 61
    ac98:	de b7       	in	r29, 0x3e	; 62
    ac9a:	7c 01       	movw	r14, r24
    ac9c:	b4 2e       	mov	r11, r20
    ac9e:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    aca0:	80 e2       	ldi	r24, 0x20	; 32
    aca2:	89 83       	std	Y+1, r24	; 0x01
    aca4:	8a 83       	std	Y+2, r24	; 0x02
    aca6:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    aca8:	f7 01       	movw	r30, r14
    acaa:	85 81       	ldd	r24, Z+5	; 0x05
    acac:	81 11       	cpse	r24, r1
    acae:	1d c0       	rjmp	.+58     	; 0xacea <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    acb0:	40 e0       	ldi	r20, 0x00	; 0
    acb2:	67 e9       	ldi	r22, 0x97	; 151
    acb4:	70 e2       	ldi	r23, 0x20	; 32
    acb6:	82 2f       	mov	r24, r18
    acb8:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    acbc:	40 e0       	ldi	r20, 0x00	; 0
    acbe:	6c ed       	ldi	r22, 0xDC	; 220
    acc0:	70 e2       	ldi	r23, 0x20	; 32
    acc2:	81 e0       	ldi	r24, 0x01	; 1
    acc4:	81 0f       	add	r24, r17
    acc6:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    acca:	f7 01       	movw	r30, r14
    accc:	40 81       	ld	r20, Z
    acce:	44 0f       	add	r20, r20
    acd0:	44 0f       	add	r20, r20
    acd2:	44 0f       	add	r20, r20
    acd4:	40 5c       	subi	r20, 0xC0	; 192
    acd6:	01 e0       	ldi	r16, 0x01	; 1
    acd8:	21 e0       	ldi	r18, 0x01	; 1
    acda:	6b 2d       	mov	r22, r11
    acdc:	66 0f       	add	r22, r22
    acde:	66 0f       	add	r22, r22
    ace0:	66 0f       	add	r22, r22
    ace2:	81 2f       	mov	r24, r17
    ace4:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
    ace8:	6f c0       	rjmp	.+222    	; 0xadc8 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    acea:	81 30       	cpi	r24, 0x01	; 1
    acec:	09 f0       	breq	.+2      	; 0xacf0 <_handle_select_render_helper+0x72>
    acee:	44 c0       	rjmp	.+136    	; 0xad78 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    acf0:	40 e0       	ldi	r20, 0x00	; 0
    acf2:	67 e9       	ldi	r22, 0x97	; 151
    acf4:	70 e2       	ldi	r23, 0x20	; 32
    acf6:	82 2f       	mov	r24, r18
    acf8:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    acfc:	aa 24       	eor	r10, r10
    acfe:	a3 94       	inc	r10
    ad00:	a1 0e       	add	r10, r17
    ad02:	40 e0       	ldi	r20, 0x00	; 0
    ad04:	67 e9       	ldi	r22, 0x97	; 151
    ad06:	70 e2       	ldi	r23, 0x20	; 32
    ad08:	8a 2d       	mov	r24, r10
    ad0a:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    ad0e:	cb 2c       	mov	r12, r11
    ad10:	d1 2c       	mov	r13, r1
    ad12:	f5 e0       	ldi	r31, 0x05	; 5
    ad14:	cf 0e       	add	r12, r31
    ad16:	d1 1c       	adc	r13, r1
    ad18:	f7 01       	movw	r30, r14
    ad1a:	40 81       	ld	r20, Z
    ad1c:	44 0f       	add	r20, r20
    ad1e:	44 0f       	add	r20, r20
    ad20:	44 0f       	add	r20, r20
    ad22:	48 5c       	subi	r20, 0xC8	; 200
    ad24:	84 81       	ldd	r24, Z+4	; 0x04
    ad26:	b6 01       	movw	r22, r12
    ad28:	68 0f       	add	r22, r24
    ad2a:	71 1d       	adc	r23, r1
    ad2c:	87 fd       	sbrc	r24, 7
    ad2e:	7a 95       	dec	r23
    ad30:	66 0f       	add	r22, r22
    ad32:	66 0f       	add	r22, r22
    ad34:	66 0f       	add	r22, r22
    ad36:	01 e0       	ldi	r16, 0x01	; 1
    ad38:	21 e0       	ldi	r18, 0x01	; 1
    ad3a:	81 2f       	mov	r24, r17
    ad3c:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    ad40:	f7 01       	movw	r30, r14
    ad42:	40 81       	ld	r20, Z
    ad44:	44 0f       	add	r20, r20
    ad46:	44 0f       	add	r20, r20
    ad48:	44 0f       	add	r20, r20
    ad4a:	48 5b       	subi	r20, 0xB8	; 184
    ad4c:	84 81       	ldd	r24, Z+4	; 0x04
    ad4e:	c8 0e       	add	r12, r24
    ad50:	d1 1c       	adc	r13, r1
    ad52:	87 fd       	sbrc	r24, 7
    ad54:	da 94       	dec	r13
    ad56:	6c 2d       	mov	r22, r12
    ad58:	66 0f       	add	r22, r22
    ad5a:	66 0f       	add	r22, r22
    ad5c:	66 0f       	add	r22, r22
    ad5e:	21 e0       	ldi	r18, 0x01	; 1
    ad60:	8a 2d       	mov	r24, r10
    ad62:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    ad66:	43 e0       	ldi	r20, 0x03	; 3
    ad68:	b7 01       	movw	r22, r14
    ad6a:	6f 5f       	subi	r22, 0xFF	; 255
    ad6c:	7f 4f       	sbci	r23, 0xFF	; 255
    ad6e:	ce 01       	movw	r24, r28
    ad70:	01 96       	adiw	r24, 0x01	; 1
    ad72:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
    ad76:	28 c0       	rjmp	.+80     	; 0xadc8 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    ad78:	82 30       	cpi	r24, 0x02	; 2
    ad7a:	31 f5       	brne	.+76     	; 0xadc8 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    ad7c:	c4 2e       	mov	r12, r20
    ad7e:	d1 2c       	mov	r13, r1
    ad80:	48 e2       	ldi	r20, 0x28	; 40
    ad82:	65 e0       	ldi	r22, 0x05	; 5
    ad84:	70 e0       	ldi	r23, 0x00	; 0
    ad86:	c6 01       	movw	r24, r12
    ad88:	06 96       	adiw	r24, 0x06	; 6
    ad8a:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    ad8e:	23 e0       	ldi	r18, 0x03	; 3
    ad90:	a7 01       	movw	r20, r14
    ad92:	4f 5f       	subi	r20, 0xFF	; 255
    ad94:	5f 4f       	sbci	r21, 0xFF	; 255
    ad96:	65 e0       	ldi	r22, 0x05	; 5
    ad98:	87 e0       	ldi	r24, 0x07	; 7
    ad9a:	8b 0d       	add	r24, r11
    ad9c:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    ada0:	49 e2       	ldi	r20, 0x29	; 41
    ada2:	65 e0       	ldi	r22, 0x05	; 5
    ada4:	70 e0       	ldi	r23, 0x00	; 0
    ada6:	c6 01       	movw	r24, r12
    ada8:	0a 96       	adiw	r24, 0x0a	; 10
    adaa:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    adae:	40 e0       	ldi	r20, 0x00	; 0
    adb0:	6c ed       	ldi	r22, 0xDC	; 220
    adb2:	70 e2       	ldi	r23, 0x20	; 32
    adb4:	81 2f       	mov	r24, r17
    adb6:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    adba:	40 e0       	ldi	r20, 0x00	; 0
    adbc:	6c ed       	ldi	r22, 0xDC	; 220
    adbe:	70 e2       	ldi	r23, 0x20	; 32
    adc0:	81 e0       	ldi	r24, 0x01	; 1
    adc2:	81 0f       	add	r24, r17
    adc4:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    adc8:	f7 01       	movw	r30, r14
    adca:	60 81       	ld	r22, Z
    adcc:	68 5f       	subi	r22, 0xF8	; 248
    adce:	23 e0       	ldi	r18, 0x03	; 3
    add0:	ae 01       	movw	r20, r28
    add2:	4f 5f       	subi	r20, 0xFF	; 255
    add4:	5f 4f       	sbci	r21, 0xFF	; 255
    add6:	85 e0       	ldi	r24, 0x05	; 5
    add8:	8b 0d       	add	r24, r11
    adda:	0e 94 5f 46 	call	0x8cbe	; 0x8cbe <LBPrintStr>
}
    adde:	0f 90       	pop	r0
    ade0:	0f 90       	pop	r0
    ade2:	0f 90       	pop	r0
    ade4:	df 91       	pop	r29
    ade6:	cf 91       	pop	r28
    ade8:	1f 91       	pop	r17
    adea:	0f 91       	pop	r16
    adec:	ff 90       	pop	r15
    adee:	ef 90       	pop	r14
    adf0:	df 90       	pop	r13
    adf2:	cf 90       	pop	r12
    adf4:	bf 90       	pop	r11
    adf6:	af 90       	pop	r10
    adf8:	08 95       	ret

0000adfa <load_handle_select>:

void load_handle_select()
{
    adfa:	8f 92       	push	r8
    adfc:	9f 92       	push	r9
    adfe:	af 92       	push	r10
    ae00:	bf 92       	push	r11
    ae02:	cf 92       	push	r12
    ae04:	df 92       	push	r13
    ae06:	ef 92       	push	r14
    ae08:	ff 92       	push	r15
    ae0a:	0f 93       	push	r16
    ae0c:	1f 93       	push	r17
    ae0e:	cf 93       	push	r28
    ae10:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    ae12:	82 e0       	ldi	r24, 0x02	; 2
    ae14:	80 93 c1 0b 	sts	0x0BC1, r24
	clear_sprites();
    ae18:	0e 94 e6 48 	call	0x91cc	; 0x91cc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    ae1c:	40 e0       	ldi	r20, 0x00	; 0
    ae1e:	66 ed       	ldi	r22, 0xD6	; 214
    ae20:	70 e2       	ldi	r23, 0x20	; 32
    ae22:	80 e0       	ldi	r24, 0x00	; 0
    ae24:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    ae28:	40 e0       	ldi	r20, 0x00	; 0
    ae2a:	6e eb       	ldi	r22, 0xBE	; 190
    ae2c:	70 e2       	ldi	r23, 0x20	; 32
    ae2e:	84 e0       	ldi	r24, 0x04	; 4
    ae30:	0e 94 68 44 	call	0x88d0	; 0x88d0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    ae34:	02 e0       	ldi	r16, 0x02	; 2
    ae36:	22 e0       	ldi	r18, 0x02	; 2
    ae38:	40 e2       	ldi	r20, 0x20	; 32
    ae3a:	68 e1       	ldi	r22, 0x18	; 24
    ae3c:	80 e0       	ldi	r24, 0x00	; 0
    ae3e:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    ae42:	22 e0       	ldi	r18, 0x02	; 2
    ae44:	40 e2       	ldi	r20, 0x20	; 32
    ae46:	60 ea       	ldi	r22, 0xA0	; 160
    ae48:	84 e0       	ldi	r24, 0x04	; 4
    ae4a:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    ae4e:	4e e7       	ldi	r20, 0x7E	; 126
    ae50:	52 e0       	ldi	r21, 0x02	; 2
    ae52:	61 e0       	ldi	r22, 0x01	; 1
    ae54:	70 e0       	ldi	r23, 0x00	; 0
    ae56:	89 e0       	ldi	r24, 0x09	; 9
    ae58:	90 e0       	ldi	r25, 0x00	; 0
    ae5a:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(6, 5, strPlayer1);
    ae5e:	4d e6       	ldi	r20, 0x6D	; 109
    ae60:	52 e0       	ldi	r21, 0x02	; 2
    ae62:	65 e0       	ldi	r22, 0x05	; 5
    ae64:	70 e0       	ldi	r23, 0x00	; 0
    ae66:	86 e0       	ldi	r24, 0x06	; 6
    ae68:	90 e0       	ldi	r25, 0x00	; 0
    ae6a:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(23, 5, strPlayer2);
    ae6e:	4a e6       	ldi	r20, 0x6A	; 106
    ae70:	52 e0       	ldi	r21, 0x02	; 2
    ae72:	65 e0       	ldi	r22, 0x05	; 5
    ae74:	70 e0       	ldi	r23, 0x00	; 0
    ae76:	87 e1       	ldi	r24, 0x17	; 23
    ae78:	90 e0       	ldi	r25, 0x00	; 0
    ae7a:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
    ae7e:	86 e2       	ldi	r24, 0x26	; 38
    ae80:	e8 2e       	mov	r14, r24
    ae82:	81 e0       	ldi	r24, 0x01	; 1
    ae84:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    ae86:	c0 e0       	ldi	r28, 0x00	; 0
    ae88:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    ae8a:	93 e0       	ldi	r25, 0x03	; 3
    ae8c:	a9 2e       	mov	r10, r25
    ae8e:	b1 2c       	mov	r11, r1
    ae90:	67 01       	movw	r12, r14
    ae92:	ce 01       	movw	r24, r28
    ae94:	b5 01       	movw	r22, r10
    ae96:	0e 94 c0 58 	call	0xb180	; 0xb180 <__divmodhi4>
    ae9a:	4c 01       	movw	r8, r24
    ae9c:	8b 01       	movw	r16, r22
    ae9e:	08 5f       	subi	r16, 0xF8	; 248
    aea0:	1f 4f       	sbci	r17, 0xFF	; 255
    aea2:	f7 01       	movw	r30, r14
    aea4:	41 91       	ld	r20, Z+
    aea6:	7f 01       	movw	r14, r30
    aea8:	b8 01       	movw	r22, r16
    aeaa:	03 96       	adiw	r24, 0x03	; 3
    aeac:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    aeb0:	f6 01       	movw	r30, r12
    aeb2:	40 81       	ld	r20, Z
    aeb4:	b8 01       	movw	r22, r16
    aeb6:	c4 01       	movw	r24, r8
    aeb8:	44 96       	adiw	r24, 0x14	; 20
    aeba:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    aebe:	21 96       	adiw	r28, 0x01	; 1
    aec0:	cb 31       	cpi	r28, 0x1B	; 27
    aec2:	d1 05       	cpc	r29, r1
    aec4:	29 f7       	brne	.-54     	; 0xae90 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    aec6:	4f e5       	ldi	r20, 0x5F	; 95
    aec8:	52 e0       	ldi	r21, 0x02	; 2
    aeca:	65 e1       	ldi	r22, 0x15	; 21
    aecc:	70 e0       	ldi	r23, 0x00	; 0
    aece:	88 e0       	ldi	r24, 0x08	; 8
    aed0:	90 e0       	ldi	r25, 0x00	; 0
    aed2:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(8, 22, strConfirmHandle);
    aed6:	43 e5       	ldi	r20, 0x53	; 83
    aed8:	52 e0       	ldi	r21, 0x02	; 2
    aeda:	66 e1       	ldi	r22, 0x16	; 22
    aedc:	70 e0       	ldi	r23, 0x00	; 0
    aede:	88 e0       	ldi	r24, 0x08	; 8
    aee0:	90 e0       	ldi	r25, 0x00	; 0
    aee2:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(8, 23, strCancelHandle);
    aee6:	48 e4       	ldi	r20, 0x48	; 72
    aee8:	52 e0       	ldi	r21, 0x02	; 2
    aeea:	67 e1       	ldi	r22, 0x17	; 23
    aeec:	70 e0       	ldi	r23, 0x00	; 0
    aeee:	88 e0       	ldi	r24, 0x08	; 8
    aef0:	90 e0       	ldi	r25, 0x00	; 0
    aef2:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>
	Print(8, 24, strChangeHandle);
    aef6:	49 e3       	ldi	r20, 0x39	; 57
    aef8:	52 e0       	ldi	r21, 0x02	; 2
    aefa:	68 e1       	ldi	r22, 0x18	; 24
    aefc:	70 e0       	ldi	r23, 0x00	; 0
    aefe:	88 e0       	ldi	r24, 0x08	; 8
    af00:	90 e0       	ldi	r25, 0x00	; 0
}
    af02:	df 91       	pop	r29
    af04:	cf 91       	pop	r28
    af06:	1f 91       	pop	r17
    af08:	0f 91       	pop	r16
    af0a:	ff 90       	pop	r15
    af0c:	ef 90       	pop	r14
    af0e:	df 90       	pop	r13
    af10:	cf 90       	pop	r12
    af12:	bf 90       	pop	r11
    af14:	af 90       	pop	r10
    af16:	9f 90       	pop	r9
    af18:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    af1a:	0c 94 6a 45 	jmp	0x8ad4	; 0x8ad4 <Print>

0000af1e <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    af1e:	0f 93       	push	r16
    af20:	cf 93       	push	r28
    af22:	df 93       	push	r29
    af24:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    af26:	90 91 c4 0b 	lds	r25, 0x0BC4
    af2a:	91 30       	cpi	r25, 0x01	; 1
    af2c:	41 f0       	breq	.+16     	; 0xaf3e <update_splash+0x20>
    af2e:	92 30       	cpi	r25, 0x02	; 2
    af30:	51 f0       	breq	.+20     	; 0xaf46 <update_splash+0x28>
    af32:	91 11       	cpse	r25, r1
    af34:	0f c0       	rjmp	.+30     	; 0xaf54 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    af36:	01 e0       	ldi	r16, 0x01	; 1
    af38:	21 e0       	ldi	r18, 0x01	; 1
    af3a:	48 e6       	ldi	r20, 0x68	; 104
    af3c:	07 c0       	rjmp	.+14     	; 0xaf4c <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    af3e:	01 e0       	ldi	r16, 0x01	; 1
    af40:	21 e0       	ldi	r18, 0x01	; 1
    af42:	40 e7       	ldi	r20, 0x70	; 112
    af44:	03 c0       	rjmp	.+6      	; 0xaf4c <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    af46:	01 e0       	ldi	r16, 0x01	; 1
    af48:	21 e0       	ldi	r18, 0x01	; 1
    af4a:	48 e7       	ldi	r20, 0x78	; 120
    af4c:	60 e3       	ldi	r22, 0x30	; 48
    af4e:	80 e0       	ldi	r24, 0x00	; 0
    af50:	0e 94 ba 44 	call	0x8974	; 0x8974 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    af54:	4f e5       	ldi	r20, 0x5F	; 95
    af56:	52 e0       	ldi	r21, 0x02	; 2
    af58:	65 e1       	ldi	r22, 0x15	; 21
    af5a:	70 e0       	ldi	r23, 0x00	; 0
    af5c:	89 e0       	ldi	r24, 0x09	; 9
    af5e:	90 e0       	ldi	r25, 0x00	; 0
    af60:	0e 94 6a 45 	call	0x8ad4	; 0x8ad4 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    af64:	88 81       	ld	r24, Y
    af66:	99 81       	ldd	r25, Y+1	; 0x01
    af68:	84 ff       	sbrs	r24, 4
    af6a:	10 c0       	rjmp	.+32     	; 0xaf8c <update_splash+0x6e>
	{
		game.selection--;
    af6c:	80 91 c4 0b 	lds	r24, 0x0BC4
    af70:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    af72:	87 ff       	sbrs	r24, 7
    af74:	13 c0       	rjmp	.+38     	; 0xaf9c <update_splash+0x7e>
    af76:	10 92 c4 0b 	sts	0x0BC4, r1
		SFX_NAVIGATE;
    af7a:	2f ef       	ldi	r18, 0xFF	; 255
    af7c:	47 e1       	ldi	r20, 0x17	; 23
    af7e:	67 e0       	ldi	r22, 0x07	; 7
    af80:	84 e0       	ldi	r24, 0x04	; 4
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    af82:	df 91       	pop	r29
    af84:	cf 91       	pop	r28
    af86:	0f 91       	pop	r16
	// Update
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
		if (game.selection < PVCPU) game.selection = PVCPU;
		SFX_NAVIGATE;
    af88:	0c 94 a2 3a 	jmp	0x7544	; 0x7544 <TriggerNote>
	}
	else if (p1->pressed & BTN_DOWN)
    af8c:	85 ff       	sbrs	r24, 5
    af8e:	09 c0       	rjmp	.+18     	; 0xafa2 <update_splash+0x84>
	{
		game.selection++;
    af90:	80 91 c4 0b 	lds	r24, 0x0BC4
    af94:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    af96:	83 30       	cpi	r24, 0x03	; 3
    af98:	0c f0       	brlt	.+2      	; 0xaf9c <update_splash+0x7e>
    af9a:	82 e0       	ldi	r24, 0x02	; 2
    af9c:	80 93 c4 0b 	sts	0x0BC4, r24
    afa0:	ec cf       	rjmp	.-40     	; 0xaf7a <update_splash+0x5c>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    afa2:	90 ff       	sbrs	r25, 0
    afa4:	2c c0       	rjmp	.+88     	; 0xaffe <update_splash+0xe0>
    afa6:	80 91 c4 0b 	lds	r24, 0x0BC4
    afaa:	82 30       	cpi	r24, 0x02	; 2
    afac:	a8 f4       	brcc	.+42     	; 0xafd8 <update_splash+0xba>
	{
		p1s.select_state = SELECTING;
    afae:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    afb2:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    afb6:	2f ef       	ldi	r18, 0xFF	; 255
    afb8:	47 e1       	ldi	r20, 0x17	; 23
    afba:	67 e0       	ldi	r22, 0x07	; 7
    afbc:	84 e0       	ldi	r24, 0x04	; 4
    afbe:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		fade_through();
    afc2:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <fade_through>
		load_eeprom(&handles);
    afc6:	84 e2       	ldi	r24, 0x24	; 36
    afc8:	91 e0       	ldi	r25, 0x01	; 1
    afca:	0e 94 ca 48 	call	0x9194	; 0x9194 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    afce:	df 91       	pop	r29
    afd0:	cf 91       	pop	r28
    afd2:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    afd4:	0c 94 fd 56 	jmp	0xadfa	; 0xadfa <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    afd8:	82 30       	cpi	r24, 0x02	; 2
    afda:	89 f4       	brne	.+34     	; 0xaffe <update_splash+0xe0>
	{
		SFX_NAVIGATE;
    afdc:	2f ef       	ldi	r18, 0xFF	; 255
    afde:	47 e1       	ldi	r20, 0x17	; 23
    afe0:	67 e0       	ldi	r22, 0x07	; 7
    afe2:	84 e0       	ldi	r24, 0x04	; 4
    afe4:	0e 94 a2 3a 	call	0x7544	; 0x7544 <TriggerNote>
		fade_through();
    afe8:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <fade_through>
		load_eeprom(&scores);
    afec:	84 e0       	ldi	r24, 0x04	; 4
    afee:	91 e0       	ldi	r25, 0x01	; 1
    aff0:	0e 94 ca 48 	call	0x9194	; 0x9194 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    aff4:	df 91       	pop	r29
    aff6:	cf 91       	pop	r28
    aff8:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    affa:	0c 94 58 52 	jmp	0xa4b0	; 0xa4b0 <load_tank_rank>
		return;
	}
}
    affe:	df 91       	pop	r29
    b000:	cf 91       	pop	r28
    b002:	0f 91       	pop	r16
    b004:	08 95       	ret

0000b006 <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    b006:	0f 93       	push	r16
    b008:	1f 93       	push	r17
    b00a:	cf 93       	push	r28
    b00c:	df 93       	push	r29
    b00e:	8c 01       	movw	r16, r24
    b010:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    b012:	28 e0       	ldi	r18, 0x08	; 8
    b014:	42 e0       	ldi	r20, 0x02	; 2
    b016:	bc 01       	movw	r22, r24
    b018:	8a e2       	ldi	r24, 0x2A	; 42
    b01a:	9b e0       	ldi	r25, 0x0B	; 11
    b01c:	0e 94 3f 56 	call	0xac7e	; 0xac7e <_handle_select_render_helper>
	if (game.selection == PVP)
    b020:	80 91 c4 0b 	lds	r24, 0x0BC4
    b024:	81 30       	cpi	r24, 0x01	; 1
    b026:	39 f4       	brne	.+14     	; 0xb036 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    b028:	2a e0       	ldi	r18, 0x0A	; 10
    b02a:	43 e1       	ldi	r20, 0x13	; 19
    b02c:	be 01       	movw	r22, r28
    b02e:	84 e2       	ldi	r24, 0x24	; 36
    b030:	9b e0       	ldi	r25, 0x0B	; 11
    b032:	0e 94 3f 56 	call	0xac7e	; 0xac7e <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    b036:	4e ed       	ldi	r20, 0xDE	; 222
    b038:	5b e0       	ldi	r21, 0x0B	; 11
    b03a:	b8 01       	movw	r22, r16
    b03c:	8a e2       	ldi	r24, 0x2A	; 42
    b03e:	9b e0       	ldi	r25, 0x0B	; 11
    b040:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    b044:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    b048:	80 91 c4 0b 	lds	r24, 0x0BC4
    b04c:	81 30       	cpi	r24, 0x01	; 1
    b04e:	19 f0       	breq	.+6      	; 0xb056 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    b050:	12 30       	cpi	r17, 0x02	; 2
    b052:	69 f0       	breq	.+26     	; 0xb06e <update_handle_select+0x68>
    b054:	21 c0       	rjmp	.+66     	; 0xb098 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    b056:	4f e4       	ldi	r20, 0x4F	; 79
    b058:	5f e0       	ldi	r21, 0x0F	; 15
    b05a:	be 01       	movw	r22, r28
    b05c:	84 e2       	ldi	r24, 0x24	; 36
    b05e:	9b e0       	ldi	r25, 0x0B	; 11
    b060:	0e 94 7a 55 	call	0xaaf4	; 0xaaf4 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    b064:	80 91 29 0b 	lds	r24, 0x0B29
    b068:	82 30       	cpi	r24, 0x02	; 2
    b06a:	b1 f4       	brne	.+44     	; 0xb098 <update_handle_select+0x92>
    b06c:	f1 cf       	rjmp	.-30     	; 0xb050 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    b06e:	80 91 c4 0b 	lds	r24, 0x0BC4
    b072:	81 11       	cpse	r24, r1
    b074:	0a c0       	rjmp	.+20     	; 0xb08a <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    b076:	89 e0       	ldi	r24, 0x09	; 9
    b078:	80 93 59 0f 	sts	0x0F59, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    b07c:	43 e0       	ldi	r20, 0x03	; 3
    b07e:	61 e4       	ldi	r22, 0x41	; 65
    b080:	71 e0       	ldi	r23, 0x01	; 1
    b082:	8a e5       	ldi	r24, 0x5A	; 90
    b084:	9f e0       	ldi	r25, 0x0F	; 15
    b086:	0e 94 53 46 	call	0x8ca6	; 0x8ca6 <LBCopyChars>
		}
		level_transition(0);
    b08a:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    b08c:	df 91       	pop	r29
    b08e:	cf 91       	pop	r28
    b090:	1f 91       	pop	r17
    b092:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    b094:	0c 94 f6 51 	jmp	0xa3ec	; 0xa3ec <level_transition>
	}
}
    b098:	df 91       	pop	r29
    b09a:	cf 91       	pop	r28
    b09c:	1f 91       	pop	r17
    b09e:	0f 91       	pop	r16
    b0a0:	08 95       	ret

0000b0a2 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    b0a2:	8a ec       	ldi	r24, 0xCA	; 202
    b0a4:	92 e0       	ldi	r25, 0x02	; 2
    b0a6:	0e 94 ad 39 	call	0x735a	; 0x735a <InitMusicPlayer>
	SetMasterVolume(0xff);
    b0aa:	8f ef       	ldi	r24, 0xFF	; 255
    b0ac:	0e 94 00 3d 	call	0x7a00	; 0x7a00 <SetMasterVolume>
	SetTileTable(tiles_data);
    b0b0:	8e e6       	ldi	r24, 0x6E	; 110
    b0b2:	93 e4       	ldi	r25, 0x43	; 67
    b0b4:	0e 94 ad 37 	call	0x6f5a	; 0x6f5a <SetTileTable>
	SetSpritesTileTable(sprites_data);
    b0b8:	8e e6       	ldi	r24, 0x6E	; 110
    b0ba:	97 e3       	ldi	r25, 0x37	; 55
    b0bc:	0e 94 89 37 	call	0x6f12	; 0x6f12 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    b0c0:	8f e2       	ldi	r24, 0x2F	; 47
    b0c2:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    b0c6:	60 e0       	ldi	r22, 0x00	; 0
    b0c8:	83 e0       	ldi	r24, 0x03	; 3
    b0ca:	0e 94 ad 45 	call	0x8b5a	; 0x8b5a <FadeIn>
	ClearVram();
    b0ce:	0e 94 8e 37 	call	0x6f1c	; 0x6f1c <ClearVram>
	init_game_state();
    b0d2:	0e 94 98 48 	call	0x9130	; 0x9130 <init_game_state>
	init_tile_animations(&tile_animations);
    b0d6:	85 ec       	ldi	r24, 0xC5	; 197
    b0d8:	9b e0       	ldi	r25, 0x0B	; 11
    b0da:	0e 94 bc 47 	call	0x8f78	; 0x8f78 <init_tile_animations>
	load_splash();
    b0de:	0e 94 22 52 	call	0xa444	; 0xa444 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    b0e2:	81 e0       	ldi	r24, 0x01	; 1
    b0e4:	90 e0       	ldi	r25, 0x00	; 0
    b0e6:	0e 94 88 45 	call	0x8b10	; 0x8b10 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    b0ea:	6b eb       	ldi	r22, 0xBB	; 187
    b0ec:	7b e0       	ldi	r23, 0x0B	; 11
    b0ee:	8a e5       	ldi	r24, 0x5A	; 90
    b0f0:	9c e0       	ldi	r25, 0x0C	; 12
    b0f2:	0e 94 11 46 	call	0x8c22	; 0x8c22 <LBGetJoyPadState>
		switch (game.current_screen)
    b0f6:	80 91 c1 0b 	lds	r24, 0x0BC1
    b0fa:	81 30       	cpi	r24, 0x01	; 1
    b0fc:	99 f0       	breq	.+38     	; 0xb124 <main+0x82>
    b0fe:	58 f0       	brcs	.+22     	; 0xb116 <main+0x74>
    b100:	82 30       	cpi	r24, 0x02	; 2
    b102:	b9 f0       	breq	.+46     	; 0xb132 <main+0x90>
    b104:	83 30       	cpi	r24, 0x03	; 3
    b106:	69 f7       	brne	.-38     	; 0xb0e2 <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				// p2 should be replaced by AI input for Player v CPU
				update_level(&p1, &p2);
    b108:	6b eb       	ldi	r22, 0xBB	; 187
    b10a:	7b e0       	ldi	r23, 0x0B	; 11
    b10c:	8a e5       	ldi	r24, 0x5A	; 90
    b10e:	9c e0       	ldi	r25, 0x0C	; 12
    b110:	0e 94 d8 54 	call	0xa9b0	; 0xa9b0 <update_level>
				break;
    b114:	e6 cf       	rjmp	.-52     	; 0xb0e2 <main+0x40>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    b116:	6b eb       	ldi	r22, 0xBB	; 187
    b118:	7b e0       	ldi	r23, 0x0B	; 11
    b11a:	8a e5       	ldi	r24, 0x5A	; 90
    b11c:	9c e0       	ldi	r25, 0x0C	; 12
    b11e:	0e 94 8f 57 	call	0xaf1e	; 0xaf1e <update_splash>
				break;
    b122:	df cf       	rjmp	.-66     	; 0xb0e2 <main+0x40>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    b124:	6b eb       	ldi	r22, 0xBB	; 187
    b126:	7b e0       	ldi	r23, 0x0B	; 11
    b128:	8a e5       	ldi	r24, 0x5A	; 90
    b12a:	9c e0       	ldi	r25, 0x0C	; 12
    b12c:	0e 94 6a 55 	call	0xaad4	; 0xaad4 <update_tank_rank>
				break;
    b130:	d8 cf       	rjmp	.-80     	; 0xb0e2 <main+0x40>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    b132:	6b eb       	ldi	r22, 0xBB	; 187
    b134:	7b e0       	ldi	r23, 0x0B	; 11
    b136:	8a e5       	ldi	r24, 0x5A	; 90
    b138:	9c e0       	ldi	r25, 0x0C	; 12
    b13a:	0e 94 03 58 	call	0xb006	; 0xb006 <update_handle_select>
				break;
    b13e:	d1 cf       	rjmp	.-94     	; 0xb0e2 <main+0x40>

0000b140 <__udivmodqi4>:
    b140:	99 1b       	sub	r25, r25
    b142:	79 e0       	ldi	r23, 0x09	; 9
    b144:	04 c0       	rjmp	.+8      	; 0xb14e <__udivmodqi4_ep>

0000b146 <__udivmodqi4_loop>:
    b146:	99 1f       	adc	r25, r25
    b148:	96 17       	cp	r25, r22
    b14a:	08 f0       	brcs	.+2      	; 0xb14e <__udivmodqi4_ep>
    b14c:	96 1b       	sub	r25, r22

0000b14e <__udivmodqi4_ep>:
    b14e:	88 1f       	adc	r24, r24
    b150:	7a 95       	dec	r23
    b152:	c9 f7       	brne	.-14     	; 0xb146 <__udivmodqi4_loop>
    b154:	80 95       	com	r24
    b156:	08 95       	ret

0000b158 <__udivmodhi4>:
    b158:	aa 1b       	sub	r26, r26
    b15a:	bb 1b       	sub	r27, r27
    b15c:	51 e1       	ldi	r21, 0x11	; 17
    b15e:	07 c0       	rjmp	.+14     	; 0xb16e <__udivmodhi4_ep>

0000b160 <__udivmodhi4_loop>:
    b160:	aa 1f       	adc	r26, r26
    b162:	bb 1f       	adc	r27, r27
    b164:	a6 17       	cp	r26, r22
    b166:	b7 07       	cpc	r27, r23
    b168:	10 f0       	brcs	.+4      	; 0xb16e <__udivmodhi4_ep>
    b16a:	a6 1b       	sub	r26, r22
    b16c:	b7 0b       	sbc	r27, r23

0000b16e <__udivmodhi4_ep>:
    b16e:	88 1f       	adc	r24, r24
    b170:	99 1f       	adc	r25, r25
    b172:	5a 95       	dec	r21
    b174:	a9 f7       	brne	.-22     	; 0xb160 <__udivmodhi4_loop>
    b176:	80 95       	com	r24
    b178:	90 95       	com	r25
    b17a:	bc 01       	movw	r22, r24
    b17c:	cd 01       	movw	r24, r26
    b17e:	08 95       	ret

0000b180 <__divmodhi4>:
    b180:	97 fb       	bst	r25, 7
    b182:	07 2e       	mov	r0, r23
    b184:	16 f4       	brtc	.+4      	; 0xb18a <__divmodhi4+0xa>
    b186:	00 94       	com	r0
    b188:	07 d0       	rcall	.+14     	; 0xb198 <__divmodhi4_neg1>
    b18a:	77 fd       	sbrc	r23, 7
    b18c:	09 d0       	rcall	.+18     	; 0xb1a0 <__divmodhi4_neg2>
    b18e:	0e 94 ac 58 	call	0xb158	; 0xb158 <__udivmodhi4>
    b192:	07 fc       	sbrc	r0, 7
    b194:	05 d0       	rcall	.+10     	; 0xb1a0 <__divmodhi4_neg2>
    b196:	3e f4       	brtc	.+14     	; 0xb1a6 <__divmodhi4_exit>

0000b198 <__divmodhi4_neg1>:
    b198:	90 95       	com	r25
    b19a:	81 95       	neg	r24
    b19c:	9f 4f       	sbci	r25, 0xFF	; 255
    b19e:	08 95       	ret

0000b1a0 <__divmodhi4_neg2>:
    b1a0:	70 95       	com	r23
    b1a2:	61 95       	neg	r22
    b1a4:	7f 4f       	sbci	r23, 0xFF	; 255

0000b1a6 <__divmodhi4_exit>:
    b1a6:	08 95       	ret

0000b1a8 <__tablejump2__>:
    b1a8:	ee 0f       	add	r30, r30
    b1aa:	ff 1f       	adc	r31, r31
    b1ac:	05 90       	lpm	r0, Z+
    b1ae:	f4 91       	lpm	r31, Z
    b1b0:	e0 2d       	mov	r30, r0
    b1b2:	09 94       	ijmp

0000b1b4 <__subsf3>:
    b1b4:	50 58       	subi	r21, 0x80	; 128

0000b1b6 <__addsf3>:
    b1b6:	bb 27       	eor	r27, r27
    b1b8:	aa 27       	eor	r26, r26
    b1ba:	0e d0       	rcall	.+28     	; 0xb1d8 <__addsf3x>
    b1bc:	70 c1       	rjmp	.+736    	; 0xb49e <__fp_round>
    b1be:	61 d1       	rcall	.+706    	; 0xb482 <__fp_pscA>
    b1c0:	30 f0       	brcs	.+12     	; 0xb1ce <__addsf3+0x18>
    b1c2:	66 d1       	rcall	.+716    	; 0xb490 <__fp_pscB>
    b1c4:	20 f0       	brcs	.+8      	; 0xb1ce <__addsf3+0x18>
    b1c6:	31 f4       	brne	.+12     	; 0xb1d4 <__addsf3+0x1e>
    b1c8:	9f 3f       	cpi	r25, 0xFF	; 255
    b1ca:	11 f4       	brne	.+4      	; 0xb1d0 <__addsf3+0x1a>
    b1cc:	1e f4       	brtc	.+6      	; 0xb1d4 <__addsf3+0x1e>
    b1ce:	56 c1       	rjmp	.+684    	; 0xb47c <__fp_nan>
    b1d0:	0e f4       	brtc	.+2      	; 0xb1d4 <__addsf3+0x1e>
    b1d2:	e0 95       	com	r30
    b1d4:	e7 fb       	bst	r30, 7
    b1d6:	4c c1       	rjmp	.+664    	; 0xb470 <__fp_inf>

0000b1d8 <__addsf3x>:
    b1d8:	e9 2f       	mov	r30, r25
    b1da:	72 d1       	rcall	.+740    	; 0xb4c0 <__fp_split3>
    b1dc:	80 f3       	brcs	.-32     	; 0xb1be <__addsf3+0x8>
    b1de:	ba 17       	cp	r27, r26
    b1e0:	62 07       	cpc	r22, r18
    b1e2:	73 07       	cpc	r23, r19
    b1e4:	84 07       	cpc	r24, r20
    b1e6:	95 07       	cpc	r25, r21
    b1e8:	18 f0       	brcs	.+6      	; 0xb1f0 <__addsf3x+0x18>
    b1ea:	71 f4       	brne	.+28     	; 0xb208 <__addsf3x+0x30>
    b1ec:	9e f5       	brtc	.+102    	; 0xb254 <__addsf3x+0x7c>
    b1ee:	8a c1       	rjmp	.+788    	; 0xb504 <__fp_zero>
    b1f0:	0e f4       	brtc	.+2      	; 0xb1f4 <__addsf3x+0x1c>
    b1f2:	e0 95       	com	r30
    b1f4:	0b 2e       	mov	r0, r27
    b1f6:	ba 2f       	mov	r27, r26
    b1f8:	a0 2d       	mov	r26, r0
    b1fa:	0b 01       	movw	r0, r22
    b1fc:	b9 01       	movw	r22, r18
    b1fe:	90 01       	movw	r18, r0
    b200:	0c 01       	movw	r0, r24
    b202:	ca 01       	movw	r24, r20
    b204:	a0 01       	movw	r20, r0
    b206:	11 24       	eor	r1, r1
    b208:	ff 27       	eor	r31, r31
    b20a:	59 1b       	sub	r21, r25
    b20c:	99 f0       	breq	.+38     	; 0xb234 <__addsf3x+0x5c>
    b20e:	59 3f       	cpi	r21, 0xF9	; 249
    b210:	50 f4       	brcc	.+20     	; 0xb226 <__addsf3x+0x4e>
    b212:	50 3e       	cpi	r21, 0xE0	; 224
    b214:	68 f1       	brcs	.+90     	; 0xb270 <__addsf3x+0x98>
    b216:	1a 16       	cp	r1, r26
    b218:	f0 40       	sbci	r31, 0x00	; 0
    b21a:	a2 2f       	mov	r26, r18
    b21c:	23 2f       	mov	r18, r19
    b21e:	34 2f       	mov	r19, r20
    b220:	44 27       	eor	r20, r20
    b222:	58 5f       	subi	r21, 0xF8	; 248
    b224:	f3 cf       	rjmp	.-26     	; 0xb20c <__addsf3x+0x34>
    b226:	46 95       	lsr	r20
    b228:	37 95       	ror	r19
    b22a:	27 95       	ror	r18
    b22c:	a7 95       	ror	r26
    b22e:	f0 40       	sbci	r31, 0x00	; 0
    b230:	53 95       	inc	r21
    b232:	c9 f7       	brne	.-14     	; 0xb226 <__addsf3x+0x4e>
    b234:	7e f4       	brtc	.+30     	; 0xb254 <__addsf3x+0x7c>
    b236:	1f 16       	cp	r1, r31
    b238:	ba 0b       	sbc	r27, r26
    b23a:	62 0b       	sbc	r22, r18
    b23c:	73 0b       	sbc	r23, r19
    b23e:	84 0b       	sbc	r24, r20
    b240:	ba f0       	brmi	.+46     	; 0xb270 <__addsf3x+0x98>
    b242:	91 50       	subi	r25, 0x01	; 1
    b244:	a1 f0       	breq	.+40     	; 0xb26e <__addsf3x+0x96>
    b246:	ff 0f       	add	r31, r31
    b248:	bb 1f       	adc	r27, r27
    b24a:	66 1f       	adc	r22, r22
    b24c:	77 1f       	adc	r23, r23
    b24e:	88 1f       	adc	r24, r24
    b250:	c2 f7       	brpl	.-16     	; 0xb242 <__addsf3x+0x6a>
    b252:	0e c0       	rjmp	.+28     	; 0xb270 <__addsf3x+0x98>
    b254:	ba 0f       	add	r27, r26
    b256:	62 1f       	adc	r22, r18
    b258:	73 1f       	adc	r23, r19
    b25a:	84 1f       	adc	r24, r20
    b25c:	48 f4       	brcc	.+18     	; 0xb270 <__addsf3x+0x98>
    b25e:	87 95       	ror	r24
    b260:	77 95       	ror	r23
    b262:	67 95       	ror	r22
    b264:	b7 95       	ror	r27
    b266:	f7 95       	ror	r31
    b268:	9e 3f       	cpi	r25, 0xFE	; 254
    b26a:	08 f0       	brcs	.+2      	; 0xb26e <__addsf3x+0x96>
    b26c:	b3 cf       	rjmp	.-154    	; 0xb1d4 <__addsf3+0x1e>
    b26e:	93 95       	inc	r25
    b270:	88 0f       	add	r24, r24
    b272:	08 f0       	brcs	.+2      	; 0xb276 <__addsf3x+0x9e>
    b274:	99 27       	eor	r25, r25
    b276:	ee 0f       	add	r30, r30
    b278:	97 95       	ror	r25
    b27a:	87 95       	ror	r24
    b27c:	08 95       	ret

0000b27e <__cmpsf2>:
    b27e:	d4 d0       	rcall	.+424    	; 0xb428 <__fp_cmp>
    b280:	08 f4       	brcc	.+2      	; 0xb284 <__cmpsf2+0x6>
    b282:	81 e0       	ldi	r24, 0x01	; 1
    b284:	08 95       	ret

0000b286 <__divsf3>:
    b286:	0c d0       	rcall	.+24     	; 0xb2a0 <__divsf3x>
    b288:	0a c1       	rjmp	.+532    	; 0xb49e <__fp_round>
    b28a:	02 d1       	rcall	.+516    	; 0xb490 <__fp_pscB>
    b28c:	40 f0       	brcs	.+16     	; 0xb29e <__divsf3+0x18>
    b28e:	f9 d0       	rcall	.+498    	; 0xb482 <__fp_pscA>
    b290:	30 f0       	brcs	.+12     	; 0xb29e <__divsf3+0x18>
    b292:	21 f4       	brne	.+8      	; 0xb29c <__divsf3+0x16>
    b294:	5f 3f       	cpi	r21, 0xFF	; 255
    b296:	19 f0       	breq	.+6      	; 0xb29e <__divsf3+0x18>
    b298:	eb c0       	rjmp	.+470    	; 0xb470 <__fp_inf>
    b29a:	51 11       	cpse	r21, r1
    b29c:	34 c1       	rjmp	.+616    	; 0xb506 <__fp_szero>
    b29e:	ee c0       	rjmp	.+476    	; 0xb47c <__fp_nan>

0000b2a0 <__divsf3x>:
    b2a0:	0f d1       	rcall	.+542    	; 0xb4c0 <__fp_split3>
    b2a2:	98 f3       	brcs	.-26     	; 0xb28a <__divsf3+0x4>

0000b2a4 <__divsf3_pse>:
    b2a4:	99 23       	and	r25, r25
    b2a6:	c9 f3       	breq	.-14     	; 0xb29a <__divsf3+0x14>
    b2a8:	55 23       	and	r21, r21
    b2aa:	b1 f3       	breq	.-20     	; 0xb298 <__divsf3+0x12>
    b2ac:	95 1b       	sub	r25, r21
    b2ae:	55 0b       	sbc	r21, r21
    b2b0:	bb 27       	eor	r27, r27
    b2b2:	aa 27       	eor	r26, r26
    b2b4:	62 17       	cp	r22, r18
    b2b6:	73 07       	cpc	r23, r19
    b2b8:	84 07       	cpc	r24, r20
    b2ba:	38 f0       	brcs	.+14     	; 0xb2ca <__divsf3_pse+0x26>
    b2bc:	9f 5f       	subi	r25, 0xFF	; 255
    b2be:	5f 4f       	sbci	r21, 0xFF	; 255
    b2c0:	22 0f       	add	r18, r18
    b2c2:	33 1f       	adc	r19, r19
    b2c4:	44 1f       	adc	r20, r20
    b2c6:	aa 1f       	adc	r26, r26
    b2c8:	a9 f3       	breq	.-22     	; 0xb2b4 <__divsf3_pse+0x10>
    b2ca:	33 d0       	rcall	.+102    	; 0xb332 <__divsf3_pse+0x8e>
    b2cc:	0e 2e       	mov	r0, r30
    b2ce:	3a f0       	brmi	.+14     	; 0xb2de <__divsf3_pse+0x3a>
    b2d0:	e0 e8       	ldi	r30, 0x80	; 128
    b2d2:	30 d0       	rcall	.+96     	; 0xb334 <__divsf3_pse+0x90>
    b2d4:	91 50       	subi	r25, 0x01	; 1
    b2d6:	50 40       	sbci	r21, 0x00	; 0
    b2d8:	e6 95       	lsr	r30
    b2da:	00 1c       	adc	r0, r0
    b2dc:	ca f7       	brpl	.-14     	; 0xb2d0 <__divsf3_pse+0x2c>
    b2de:	29 d0       	rcall	.+82     	; 0xb332 <__divsf3_pse+0x8e>
    b2e0:	fe 2f       	mov	r31, r30
    b2e2:	27 d0       	rcall	.+78     	; 0xb332 <__divsf3_pse+0x8e>
    b2e4:	66 0f       	add	r22, r22
    b2e6:	77 1f       	adc	r23, r23
    b2e8:	88 1f       	adc	r24, r24
    b2ea:	bb 1f       	adc	r27, r27
    b2ec:	26 17       	cp	r18, r22
    b2ee:	37 07       	cpc	r19, r23
    b2f0:	48 07       	cpc	r20, r24
    b2f2:	ab 07       	cpc	r26, r27
    b2f4:	b0 e8       	ldi	r27, 0x80	; 128
    b2f6:	09 f0       	breq	.+2      	; 0xb2fa <__divsf3_pse+0x56>
    b2f8:	bb 0b       	sbc	r27, r27
    b2fa:	80 2d       	mov	r24, r0
    b2fc:	bf 01       	movw	r22, r30
    b2fe:	ff 27       	eor	r31, r31
    b300:	93 58       	subi	r25, 0x83	; 131
    b302:	5f 4f       	sbci	r21, 0xFF	; 255
    b304:	2a f0       	brmi	.+10     	; 0xb310 <__divsf3_pse+0x6c>
    b306:	9e 3f       	cpi	r25, 0xFE	; 254
    b308:	51 05       	cpc	r21, r1
    b30a:	68 f0       	brcs	.+26     	; 0xb326 <__divsf3_pse+0x82>
    b30c:	b1 c0       	rjmp	.+354    	; 0xb470 <__fp_inf>
    b30e:	fb c0       	rjmp	.+502    	; 0xb506 <__fp_szero>
    b310:	5f 3f       	cpi	r21, 0xFF	; 255
    b312:	ec f3       	brlt	.-6      	; 0xb30e <__divsf3_pse+0x6a>
    b314:	98 3e       	cpi	r25, 0xE8	; 232
    b316:	dc f3       	brlt	.-10     	; 0xb30e <__divsf3_pse+0x6a>
    b318:	86 95       	lsr	r24
    b31a:	77 95       	ror	r23
    b31c:	67 95       	ror	r22
    b31e:	b7 95       	ror	r27
    b320:	f7 95       	ror	r31
    b322:	9f 5f       	subi	r25, 0xFF	; 255
    b324:	c9 f7       	brne	.-14     	; 0xb318 <__divsf3_pse+0x74>
    b326:	88 0f       	add	r24, r24
    b328:	91 1d       	adc	r25, r1
    b32a:	96 95       	lsr	r25
    b32c:	87 95       	ror	r24
    b32e:	97 f9       	bld	r25, 7
    b330:	08 95       	ret
    b332:	e1 e0       	ldi	r30, 0x01	; 1
    b334:	66 0f       	add	r22, r22
    b336:	77 1f       	adc	r23, r23
    b338:	88 1f       	adc	r24, r24
    b33a:	bb 1f       	adc	r27, r27
    b33c:	62 17       	cp	r22, r18
    b33e:	73 07       	cpc	r23, r19
    b340:	84 07       	cpc	r24, r20
    b342:	ba 07       	cpc	r27, r26
    b344:	20 f0       	brcs	.+8      	; 0xb34e <__divsf3_pse+0xaa>
    b346:	62 1b       	sub	r22, r18
    b348:	73 0b       	sbc	r23, r19
    b34a:	84 0b       	sbc	r24, r20
    b34c:	ba 0b       	sbc	r27, r26
    b34e:	ee 1f       	adc	r30, r30
    b350:	88 f7       	brcc	.-30     	; 0xb334 <__divsf3_pse+0x90>
    b352:	e0 95       	com	r30
    b354:	08 95       	ret

0000b356 <__fixunssfsi>:
    b356:	bc d0       	rcall	.+376    	; 0xb4d0 <__fp_splitA>
    b358:	88 f0       	brcs	.+34     	; 0xb37c <__fixunssfsi+0x26>
    b35a:	9f 57       	subi	r25, 0x7F	; 127
    b35c:	90 f0       	brcs	.+36     	; 0xb382 <__fixunssfsi+0x2c>
    b35e:	b9 2f       	mov	r27, r25
    b360:	99 27       	eor	r25, r25
    b362:	b7 51       	subi	r27, 0x17	; 23
    b364:	a0 f0       	brcs	.+40     	; 0xb38e <__fixunssfsi+0x38>
    b366:	d1 f0       	breq	.+52     	; 0xb39c <__fixunssfsi+0x46>
    b368:	66 0f       	add	r22, r22
    b36a:	77 1f       	adc	r23, r23
    b36c:	88 1f       	adc	r24, r24
    b36e:	99 1f       	adc	r25, r25
    b370:	1a f0       	brmi	.+6      	; 0xb378 <__fixunssfsi+0x22>
    b372:	ba 95       	dec	r27
    b374:	c9 f7       	brne	.-14     	; 0xb368 <__fixunssfsi+0x12>
    b376:	12 c0       	rjmp	.+36     	; 0xb39c <__fixunssfsi+0x46>
    b378:	b1 30       	cpi	r27, 0x01	; 1
    b37a:	81 f0       	breq	.+32     	; 0xb39c <__fixunssfsi+0x46>
    b37c:	c3 d0       	rcall	.+390    	; 0xb504 <__fp_zero>
    b37e:	b1 e0       	ldi	r27, 0x01	; 1
    b380:	08 95       	ret
    b382:	c0 c0       	rjmp	.+384    	; 0xb504 <__fp_zero>
    b384:	67 2f       	mov	r22, r23
    b386:	78 2f       	mov	r23, r24
    b388:	88 27       	eor	r24, r24
    b38a:	b8 5f       	subi	r27, 0xF8	; 248
    b38c:	39 f0       	breq	.+14     	; 0xb39c <__fixunssfsi+0x46>
    b38e:	b9 3f       	cpi	r27, 0xF9	; 249
    b390:	cc f3       	brlt	.-14     	; 0xb384 <__fixunssfsi+0x2e>
    b392:	86 95       	lsr	r24
    b394:	77 95       	ror	r23
    b396:	67 95       	ror	r22
    b398:	b3 95       	inc	r27
    b39a:	d9 f7       	brne	.-10     	; 0xb392 <__fixunssfsi+0x3c>
    b39c:	3e f4       	brtc	.+14     	; 0xb3ac <__fixunssfsi+0x56>
    b39e:	90 95       	com	r25
    b3a0:	80 95       	com	r24
    b3a2:	70 95       	com	r23
    b3a4:	61 95       	neg	r22
    b3a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b3a8:	8f 4f       	sbci	r24, 0xFF	; 255
    b3aa:	9f 4f       	sbci	r25, 0xFF	; 255
    b3ac:	08 95       	ret

0000b3ae <__floatunsisf>:
    b3ae:	e8 94       	clt
    b3b0:	09 c0       	rjmp	.+18     	; 0xb3c4 <__floatsisf+0x12>

0000b3b2 <__floatsisf>:
    b3b2:	97 fb       	bst	r25, 7
    b3b4:	3e f4       	brtc	.+14     	; 0xb3c4 <__floatsisf+0x12>
    b3b6:	90 95       	com	r25
    b3b8:	80 95       	com	r24
    b3ba:	70 95       	com	r23
    b3bc:	61 95       	neg	r22
    b3be:	7f 4f       	sbci	r23, 0xFF	; 255
    b3c0:	8f 4f       	sbci	r24, 0xFF	; 255
    b3c2:	9f 4f       	sbci	r25, 0xFF	; 255
    b3c4:	99 23       	and	r25, r25
    b3c6:	a9 f0       	breq	.+42     	; 0xb3f2 <__floatsisf+0x40>
    b3c8:	f9 2f       	mov	r31, r25
    b3ca:	96 e9       	ldi	r25, 0x96	; 150
    b3cc:	bb 27       	eor	r27, r27
    b3ce:	93 95       	inc	r25
    b3d0:	f6 95       	lsr	r31
    b3d2:	87 95       	ror	r24
    b3d4:	77 95       	ror	r23
    b3d6:	67 95       	ror	r22
    b3d8:	b7 95       	ror	r27
    b3da:	f1 11       	cpse	r31, r1
    b3dc:	f8 cf       	rjmp	.-16     	; 0xb3ce <__floatsisf+0x1c>
    b3de:	fa f4       	brpl	.+62     	; 0xb41e <__floatsisf+0x6c>
    b3e0:	bb 0f       	add	r27, r27
    b3e2:	11 f4       	brne	.+4      	; 0xb3e8 <__floatsisf+0x36>
    b3e4:	60 ff       	sbrs	r22, 0
    b3e6:	1b c0       	rjmp	.+54     	; 0xb41e <__floatsisf+0x6c>
    b3e8:	6f 5f       	subi	r22, 0xFF	; 255
    b3ea:	7f 4f       	sbci	r23, 0xFF	; 255
    b3ec:	8f 4f       	sbci	r24, 0xFF	; 255
    b3ee:	9f 4f       	sbci	r25, 0xFF	; 255
    b3f0:	16 c0       	rjmp	.+44     	; 0xb41e <__floatsisf+0x6c>
    b3f2:	88 23       	and	r24, r24
    b3f4:	11 f0       	breq	.+4      	; 0xb3fa <__floatsisf+0x48>
    b3f6:	96 e9       	ldi	r25, 0x96	; 150
    b3f8:	11 c0       	rjmp	.+34     	; 0xb41c <__floatsisf+0x6a>
    b3fa:	77 23       	and	r23, r23
    b3fc:	21 f0       	breq	.+8      	; 0xb406 <__floatsisf+0x54>
    b3fe:	9e e8       	ldi	r25, 0x8E	; 142
    b400:	87 2f       	mov	r24, r23
    b402:	76 2f       	mov	r23, r22
    b404:	05 c0       	rjmp	.+10     	; 0xb410 <__floatsisf+0x5e>
    b406:	66 23       	and	r22, r22
    b408:	71 f0       	breq	.+28     	; 0xb426 <__floatsisf+0x74>
    b40a:	96 e8       	ldi	r25, 0x86	; 134
    b40c:	86 2f       	mov	r24, r22
    b40e:	70 e0       	ldi	r23, 0x00	; 0
    b410:	60 e0       	ldi	r22, 0x00	; 0
    b412:	2a f0       	brmi	.+10     	; 0xb41e <__floatsisf+0x6c>
    b414:	9a 95       	dec	r25
    b416:	66 0f       	add	r22, r22
    b418:	77 1f       	adc	r23, r23
    b41a:	88 1f       	adc	r24, r24
    b41c:	da f7       	brpl	.-10     	; 0xb414 <__floatsisf+0x62>
    b41e:	88 0f       	add	r24, r24
    b420:	96 95       	lsr	r25
    b422:	87 95       	ror	r24
    b424:	97 f9       	bld	r25, 7
    b426:	08 95       	ret

0000b428 <__fp_cmp>:
    b428:	99 0f       	add	r25, r25
    b42a:	00 08       	sbc	r0, r0
    b42c:	55 0f       	add	r21, r21
    b42e:	aa 0b       	sbc	r26, r26
    b430:	e0 e8       	ldi	r30, 0x80	; 128
    b432:	fe ef       	ldi	r31, 0xFE	; 254
    b434:	16 16       	cp	r1, r22
    b436:	17 06       	cpc	r1, r23
    b438:	e8 07       	cpc	r30, r24
    b43a:	f9 07       	cpc	r31, r25
    b43c:	c0 f0       	brcs	.+48     	; 0xb46e <__fp_cmp+0x46>
    b43e:	12 16       	cp	r1, r18
    b440:	13 06       	cpc	r1, r19
    b442:	e4 07       	cpc	r30, r20
    b444:	f5 07       	cpc	r31, r21
    b446:	98 f0       	brcs	.+38     	; 0xb46e <__fp_cmp+0x46>
    b448:	62 1b       	sub	r22, r18
    b44a:	73 0b       	sbc	r23, r19
    b44c:	84 0b       	sbc	r24, r20
    b44e:	95 0b       	sbc	r25, r21
    b450:	39 f4       	brne	.+14     	; 0xb460 <__fp_cmp+0x38>
    b452:	0a 26       	eor	r0, r26
    b454:	61 f0       	breq	.+24     	; 0xb46e <__fp_cmp+0x46>
    b456:	23 2b       	or	r18, r19
    b458:	24 2b       	or	r18, r20
    b45a:	25 2b       	or	r18, r21
    b45c:	21 f4       	brne	.+8      	; 0xb466 <__fp_cmp+0x3e>
    b45e:	08 95       	ret
    b460:	0a 26       	eor	r0, r26
    b462:	09 f4       	brne	.+2      	; 0xb466 <__fp_cmp+0x3e>
    b464:	a1 40       	sbci	r26, 0x01	; 1
    b466:	a6 95       	lsr	r26
    b468:	8f ef       	ldi	r24, 0xFF	; 255
    b46a:	81 1d       	adc	r24, r1
    b46c:	81 1d       	adc	r24, r1
    b46e:	08 95       	ret

0000b470 <__fp_inf>:
    b470:	97 f9       	bld	r25, 7
    b472:	9f 67       	ori	r25, 0x7F	; 127
    b474:	80 e8       	ldi	r24, 0x80	; 128
    b476:	70 e0       	ldi	r23, 0x00	; 0
    b478:	60 e0       	ldi	r22, 0x00	; 0
    b47a:	08 95       	ret

0000b47c <__fp_nan>:
    b47c:	9f ef       	ldi	r25, 0xFF	; 255
    b47e:	80 ec       	ldi	r24, 0xC0	; 192
    b480:	08 95       	ret

0000b482 <__fp_pscA>:
    b482:	00 24       	eor	r0, r0
    b484:	0a 94       	dec	r0
    b486:	16 16       	cp	r1, r22
    b488:	17 06       	cpc	r1, r23
    b48a:	18 06       	cpc	r1, r24
    b48c:	09 06       	cpc	r0, r25
    b48e:	08 95       	ret

0000b490 <__fp_pscB>:
    b490:	00 24       	eor	r0, r0
    b492:	0a 94       	dec	r0
    b494:	12 16       	cp	r1, r18
    b496:	13 06       	cpc	r1, r19
    b498:	14 06       	cpc	r1, r20
    b49a:	05 06       	cpc	r0, r21
    b49c:	08 95       	ret

0000b49e <__fp_round>:
    b49e:	09 2e       	mov	r0, r25
    b4a0:	03 94       	inc	r0
    b4a2:	00 0c       	add	r0, r0
    b4a4:	11 f4       	brne	.+4      	; 0xb4aa <__fp_round+0xc>
    b4a6:	88 23       	and	r24, r24
    b4a8:	52 f0       	brmi	.+20     	; 0xb4be <__fp_round+0x20>
    b4aa:	bb 0f       	add	r27, r27
    b4ac:	40 f4       	brcc	.+16     	; 0xb4be <__fp_round+0x20>
    b4ae:	bf 2b       	or	r27, r31
    b4b0:	11 f4       	brne	.+4      	; 0xb4b6 <__fp_round+0x18>
    b4b2:	60 ff       	sbrs	r22, 0
    b4b4:	04 c0       	rjmp	.+8      	; 0xb4be <__fp_round+0x20>
    b4b6:	6f 5f       	subi	r22, 0xFF	; 255
    b4b8:	7f 4f       	sbci	r23, 0xFF	; 255
    b4ba:	8f 4f       	sbci	r24, 0xFF	; 255
    b4bc:	9f 4f       	sbci	r25, 0xFF	; 255
    b4be:	08 95       	ret

0000b4c0 <__fp_split3>:
    b4c0:	57 fd       	sbrc	r21, 7
    b4c2:	90 58       	subi	r25, 0x80	; 128
    b4c4:	44 0f       	add	r20, r20
    b4c6:	55 1f       	adc	r21, r21
    b4c8:	59 f0       	breq	.+22     	; 0xb4e0 <__fp_splitA+0x10>
    b4ca:	5f 3f       	cpi	r21, 0xFF	; 255
    b4cc:	71 f0       	breq	.+28     	; 0xb4ea <__fp_splitA+0x1a>
    b4ce:	47 95       	ror	r20

0000b4d0 <__fp_splitA>:
    b4d0:	88 0f       	add	r24, r24
    b4d2:	97 fb       	bst	r25, 7
    b4d4:	99 1f       	adc	r25, r25
    b4d6:	61 f0       	breq	.+24     	; 0xb4f0 <__fp_splitA+0x20>
    b4d8:	9f 3f       	cpi	r25, 0xFF	; 255
    b4da:	79 f0       	breq	.+30     	; 0xb4fa <__fp_splitA+0x2a>
    b4dc:	87 95       	ror	r24
    b4de:	08 95       	ret
    b4e0:	12 16       	cp	r1, r18
    b4e2:	13 06       	cpc	r1, r19
    b4e4:	14 06       	cpc	r1, r20
    b4e6:	55 1f       	adc	r21, r21
    b4e8:	f2 cf       	rjmp	.-28     	; 0xb4ce <__fp_split3+0xe>
    b4ea:	46 95       	lsr	r20
    b4ec:	f1 df       	rcall	.-30     	; 0xb4d0 <__fp_splitA>
    b4ee:	08 c0       	rjmp	.+16     	; 0xb500 <__fp_splitA+0x30>
    b4f0:	16 16       	cp	r1, r22
    b4f2:	17 06       	cpc	r1, r23
    b4f4:	18 06       	cpc	r1, r24
    b4f6:	99 1f       	adc	r25, r25
    b4f8:	f1 cf       	rjmp	.-30     	; 0xb4dc <__fp_splitA+0xc>
    b4fa:	86 95       	lsr	r24
    b4fc:	71 05       	cpc	r23, r1
    b4fe:	61 05       	cpc	r22, r1
    b500:	08 94       	sec
    b502:	08 95       	ret

0000b504 <__fp_zero>:
    b504:	e8 94       	clt

0000b506 <__fp_szero>:
    b506:	bb 27       	eor	r27, r27
    b508:	66 27       	eor	r22, r22
    b50a:	77 27       	eor	r23, r23
    b50c:	cb 01       	movw	r24, r22
    b50e:	97 f9       	bld	r25, 7
    b510:	08 95       	ret

0000b512 <__gesf2>:
    b512:	8a df       	rcall	.-236    	; 0xb428 <__fp_cmp>
    b514:	08 f4       	brcc	.+2      	; 0xb518 <__gesf2+0x6>
    b516:	8f ef       	ldi	r24, 0xFF	; 255
    b518:	08 95       	ret

0000b51a <__mulsf3>:
    b51a:	0b d0       	rcall	.+22     	; 0xb532 <__mulsf3x>
    b51c:	c0 cf       	rjmp	.-128    	; 0xb49e <__fp_round>
    b51e:	b1 df       	rcall	.-158    	; 0xb482 <__fp_pscA>
    b520:	28 f0       	brcs	.+10     	; 0xb52c <__mulsf3+0x12>
    b522:	b6 df       	rcall	.-148    	; 0xb490 <__fp_pscB>
    b524:	18 f0       	brcs	.+6      	; 0xb52c <__mulsf3+0x12>
    b526:	95 23       	and	r25, r21
    b528:	09 f0       	breq	.+2      	; 0xb52c <__mulsf3+0x12>
    b52a:	a2 cf       	rjmp	.-188    	; 0xb470 <__fp_inf>
    b52c:	a7 cf       	rjmp	.-178    	; 0xb47c <__fp_nan>
    b52e:	11 24       	eor	r1, r1
    b530:	ea cf       	rjmp	.-44     	; 0xb506 <__fp_szero>

0000b532 <__mulsf3x>:
    b532:	c6 df       	rcall	.-116    	; 0xb4c0 <__fp_split3>
    b534:	a0 f3       	brcs	.-24     	; 0xb51e <__mulsf3+0x4>

0000b536 <__mulsf3_pse>:
    b536:	95 9f       	mul	r25, r21
    b538:	d1 f3       	breq	.-12     	; 0xb52e <__mulsf3+0x14>
    b53a:	95 0f       	add	r25, r21
    b53c:	50 e0       	ldi	r21, 0x00	; 0
    b53e:	55 1f       	adc	r21, r21
    b540:	62 9f       	mul	r22, r18
    b542:	f0 01       	movw	r30, r0
    b544:	72 9f       	mul	r23, r18
    b546:	bb 27       	eor	r27, r27
    b548:	f0 0d       	add	r31, r0
    b54a:	b1 1d       	adc	r27, r1
    b54c:	63 9f       	mul	r22, r19
    b54e:	aa 27       	eor	r26, r26
    b550:	f0 0d       	add	r31, r0
    b552:	b1 1d       	adc	r27, r1
    b554:	aa 1f       	adc	r26, r26
    b556:	64 9f       	mul	r22, r20
    b558:	66 27       	eor	r22, r22
    b55a:	b0 0d       	add	r27, r0
    b55c:	a1 1d       	adc	r26, r1
    b55e:	66 1f       	adc	r22, r22
    b560:	82 9f       	mul	r24, r18
    b562:	22 27       	eor	r18, r18
    b564:	b0 0d       	add	r27, r0
    b566:	a1 1d       	adc	r26, r1
    b568:	62 1f       	adc	r22, r18
    b56a:	73 9f       	mul	r23, r19
    b56c:	b0 0d       	add	r27, r0
    b56e:	a1 1d       	adc	r26, r1
    b570:	62 1f       	adc	r22, r18
    b572:	83 9f       	mul	r24, r19
    b574:	a0 0d       	add	r26, r0
    b576:	61 1d       	adc	r22, r1
    b578:	22 1f       	adc	r18, r18
    b57a:	74 9f       	mul	r23, r20
    b57c:	33 27       	eor	r19, r19
    b57e:	a0 0d       	add	r26, r0
    b580:	61 1d       	adc	r22, r1
    b582:	23 1f       	adc	r18, r19
    b584:	84 9f       	mul	r24, r20
    b586:	60 0d       	add	r22, r0
    b588:	21 1d       	adc	r18, r1
    b58a:	82 2f       	mov	r24, r18
    b58c:	76 2f       	mov	r23, r22
    b58e:	6a 2f       	mov	r22, r26
    b590:	11 24       	eor	r1, r1
    b592:	9f 57       	subi	r25, 0x7F	; 127
    b594:	50 40       	sbci	r21, 0x00	; 0
    b596:	8a f0       	brmi	.+34     	; 0xb5ba <__mulsf3_pse+0x84>
    b598:	e1 f0       	breq	.+56     	; 0xb5d2 <__mulsf3_pse+0x9c>
    b59a:	88 23       	and	r24, r24
    b59c:	4a f0       	brmi	.+18     	; 0xb5b0 <__mulsf3_pse+0x7a>
    b59e:	ee 0f       	add	r30, r30
    b5a0:	ff 1f       	adc	r31, r31
    b5a2:	bb 1f       	adc	r27, r27
    b5a4:	66 1f       	adc	r22, r22
    b5a6:	77 1f       	adc	r23, r23
    b5a8:	88 1f       	adc	r24, r24
    b5aa:	91 50       	subi	r25, 0x01	; 1
    b5ac:	50 40       	sbci	r21, 0x00	; 0
    b5ae:	a9 f7       	brne	.-22     	; 0xb59a <__mulsf3_pse+0x64>
    b5b0:	9e 3f       	cpi	r25, 0xFE	; 254
    b5b2:	51 05       	cpc	r21, r1
    b5b4:	70 f0       	brcs	.+28     	; 0xb5d2 <__mulsf3_pse+0x9c>
    b5b6:	5c cf       	rjmp	.-328    	; 0xb470 <__fp_inf>
    b5b8:	a6 cf       	rjmp	.-180    	; 0xb506 <__fp_szero>
    b5ba:	5f 3f       	cpi	r21, 0xFF	; 255
    b5bc:	ec f3       	brlt	.-6      	; 0xb5b8 <__mulsf3_pse+0x82>
    b5be:	98 3e       	cpi	r25, 0xE8	; 232
    b5c0:	dc f3       	brlt	.-10     	; 0xb5b8 <__mulsf3_pse+0x82>
    b5c2:	86 95       	lsr	r24
    b5c4:	77 95       	ror	r23
    b5c6:	67 95       	ror	r22
    b5c8:	b7 95       	ror	r27
    b5ca:	f7 95       	ror	r31
    b5cc:	e7 95       	ror	r30
    b5ce:	9f 5f       	subi	r25, 0xFF	; 255
    b5d0:	c1 f7       	brne	.-16     	; 0xb5c2 <__mulsf3_pse+0x8c>
    b5d2:	fe 2b       	or	r31, r30
    b5d4:	88 0f       	add	r24, r24
    b5d6:	91 1d       	adc	r25, r1
    b5d8:	96 95       	lsr	r25
    b5da:	87 95       	ror	r24
    b5dc:	97 f9       	bld	r25, 7
    b5de:	08 95       	ret

0000b5e0 <_exit>:
    b5e0:	f8 94       	cli

0000b5e2 <__stop_program>:
    b5e2:	ff cf       	rjmp	.-2      	; 0xb5e2 <__stop_program>
