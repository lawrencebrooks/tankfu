
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000d88e  0000d98e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000d88e  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f31  00800106  00800106  0000d9a6  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000d994  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000df10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e166  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000610  00000000  00000000  0000e178  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000902a  00000000  00000000  0000e788  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001539  00000000  00000000  000177b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001fc9  00000000  00000000  00018ceb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000013d4  00000000  00000000  0001acb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001c6e  00000000  00000000  0001c088  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000084fb  00000000  00000000  0001dcf6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000718  00000000  00000000  000261f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 12 3d 	jmp	0x7a24	; 0x7a24 <__ctors_end>
       4:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
       8:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
       c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      10:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      14:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      18:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      1c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      20:	0c 94 7e 41 	jmp	0x82fc	; 0x82fc <__vector_8>
      24:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      28:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      2c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      30:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      34:	0c 94 55 3f 	jmp	0x7eaa	; 0x7eaa <__vector_13>
      38:	0c 94 95 3f 	jmp	0x7f2a	; 0x7f2a <__vector_14>
      3c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      40:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      44:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      48:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      4c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      50:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      54:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      58:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      5c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      60:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      64:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      68:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>
      6c:	0c 94 7f 3d 	jmp	0x7afe	; 0x7afe <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 4f       	sbci	r24, 0xFA	; 250
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	e0 42 e3 42 3e 43 42 43 4a 43 eb 42 f0 42 f5 42     .B.B>CBCJC.B.B.B
      ce:	52 43 f8 42 fb 42 fe 42 3b 43                       RC.B.B.B;C

000000d8 <fader>:
      d8:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e4 <default_scores>:
      e4:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
      f4:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

00000102 <default_handles>:
     102:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     112:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000120 <strLevels>:
     120:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     130:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     140:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     150:	20 20 20 20 20 4d 41 5a 45 20 20 20 20 20 20 00          MAZE      .
     160:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     170:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     180:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     190:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     1a0:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     1b0:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000001c0 <strPaused>:
     1c0:	50 41 55 53 45 44 00                                PAUSED.

000001c7 <strExit>:
     1c7:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000001d0 <strTotal>:
     1d0:	54 4f 54 41 4c 3a 00                                TOTAL:.

000001d7 <strScore>:
     1d7:	53 43 4f 52 45 3a 00                                SCORE:.

000001de <strBanterClear>:
     1de:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

000001ed <banter_map>:
     1ed:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     1fd:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     20d:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     21d:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     22d:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     23d:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     24d:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     25d:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     26d:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     27d:	20 20 20 20 20 00                                        .

00000283 <strFinalScore>:
     283:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

0000028f <strBy>:
     28f:	42 59 00                                            BY.

00000292 <strOwns>:
     292:	4f 57 4e 53 00                                      OWNS.

00000297 <strChangeHandle>:
     297:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

000002a6 <strReset>:
     2a6:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     2b6:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000002bf <strCancelHandle>:
     2bf:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000002ca <strConfirmHandle>:
     2ca:	43 4f 4e 46 49 52 4d 20 2d 20 41 00                 CONFIRM - A.

000002d6 <strSelectHandle>:
     2d6:	53 45 4c 45 43 54 20 2d 20 41 00                    SELECT - A.

000002e1 <strPlayer2>:
     2e1:	50 32 00                                            P2.

000002e4 <strPlayer1>:
     2e4:	50 31 00                                            P1.

000002e7 <strVertSep>:
     2e7:	3b 00                                               ;.

000002e9 <strUnderline>:
     2e9:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

000002f5 <strHandlesTitle>:
     2f5:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000301 <strHighscores>:
     301:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

0000030b <str2Player>:
     30b:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

0000031c <str1Player>:
     31c:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

0000032a <strCopyright>:
     32a:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     33a:	4f 4f 4b 53 00                                      OOKS.

0000033f <my_patches>:
     33f:	02 31 12 00 00 4f 07 50 07 02 4c 0b 00 00 e3 06     .1...O.P..L.....
     34f:	e4 06 02 05 09 00 00 45 02 46 02 02 54 07 00 00     .......E.F..T...
     35f:	af 01 b0 01 02 52 07 00 00 00 00 01 00 02 50 07     .....R........P.
     36f:	00 00 00 00 01 00 02 30 05 00 00 1e 02 1f 02 02     .......0........
     37f:	be 03 00 00 70 01 71 01 02 05 09 00 00 45 02 46     ....p.q......E.F
     38f:	02 02 ba 03 00 00 00 00 01 00 02 4c 0b 00 00 e3     ...........L....
     39f:	06 e4 06 02 b6 03 00 00 00 00 01 00 02 b4 03 00     ................
     3af:	00 00 00 00 00                                      .....

000003b4 <ad_silence>:
	...

000003b6 <ad_tracks>:
	...

000003b8 <ad_tank_explode>:
	...

000003ba <ad_splash>:
	...

000003bc <ad_rocket>:
	...

000003be <ad_navigate>:
     3be:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     3ce:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     3de:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     3ee:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     3fe:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     40e:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     41e:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     42e:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     43e:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     44e:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     45e:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     46e:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     47e:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     48e:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     49e:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     4ae:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     4be:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     4ce:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     4de:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     4ee:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     4fe:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     50e:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     51e:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000530 <ad_metal>:
     530:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     540:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     550:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     560:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     570:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     580:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     590:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     5a0:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     5b0:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     5c0:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     5d0:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     5e0:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     5f0:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     600:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     610:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     620:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     630:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     640:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     650:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     660:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     670:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     680:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     690:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     6a0:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     6b0:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     6c0:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     6d0:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     6e0:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     6f0:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     700:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     710:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     720:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     730:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     740:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000750 <ad_level_start>:
	...

00000752 <ad_level_clear>:
	...

00000754 <ad_item>:
     754:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     764:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     774:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     784:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     794:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     7a4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     7b4:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     7c4:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     7d4:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     7e4:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     7f4:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     804:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     814:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     824:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     834:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     844:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     854:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     864:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     874:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     884:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     894:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     8a4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     8b4:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     8c4:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     8d4:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     8e4:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     8f4:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000905 <ad_cannonball>:
     905:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     915:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     925:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     935:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     945:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     955:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     965:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     975:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     985:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     995:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     9a5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     9b5:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     9c5:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     9d5:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     9e5:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     9f5:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     a05:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     a15:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     a25:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     a35:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     a45:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     a55:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     a65:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     a75:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     a85:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     a95:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     aa5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     ab5:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     ac5:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     ad5:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     ae5:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     af5:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     b05:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     b15:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     b25:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     b35:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b45:	ff ff ff ff ff 00 00                                .......

00000b4c <ad_brick_explode>:
     b4c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     b5c:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     b6c:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     b7c:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     b8c:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     b9c:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     bac:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     bbc:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     bcc:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     bdc:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     bec:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     bfc:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     c0c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     c1c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     c2c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     c3c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     c4c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     c5c:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     c6c:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     c7c:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     c8c:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     c9c:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     cac:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     cbc:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     ccc:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     cdc:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     cec:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     cfc:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     d0c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     d1c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     d2c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     d3c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     d4c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     d5c:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     d6c:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     d7c:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     d8c:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     d9c:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     dac:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     dbc:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     dcc:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     ddc:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     dec:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     dfc:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     e0c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     e1c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     e2c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     e3c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     e4c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     e5c:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     e6c:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     e7c:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     e8c:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     e9c:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     eac:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     ebc:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     ecc:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     edc:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     eec:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     efc:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     f0c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     f1c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
     f2c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
     f3c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
     f4c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
     f5c:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
     f6c:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
     f7c:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
     f8c:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
     f9c:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
     fac:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
     fbc:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
     fcc:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
     fdc:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
     fec:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
     ffc:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    100c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    101c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    102c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    103c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    104c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    105c:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    106c:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    107c:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    108c:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    109c:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    10ac:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    10bc:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    10cc:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    10dc:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    10ec:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    10fc:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    110c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    111c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    112c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    113c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    114c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    115c:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    116c:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    117c:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    118c:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    119c:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    11ac:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    11bc:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    11cc:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    11dc:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    11ec:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    11fc:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    120c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    121c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    122c:	04 04 02 01 00                                      .....

00001231 <ad_banter>:
    1231:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1241:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1251:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1261:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1271:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    1281:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    1291:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    12a1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    12b1:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    12c1:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    12d1:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    12e1:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    12f1:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1301:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1311:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1321:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1331:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1341:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1351:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1361:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1371:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    1381:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    1391:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    13a1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    13b1:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    13c1:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    13d1:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    13e1:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    13f1:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1401:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1411:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1421:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1431:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1441:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1451:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1461:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1471:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    1481:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    1491:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    14a1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    14b1:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    14c1:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    14d1:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    14e1:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    14f1:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1501:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1511:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1521:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1531:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1541:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1551:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1561:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1571:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    1581:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    1591:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    15a1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    15b1:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    15c1:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    15d1:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    15e1:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    15f1:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1601:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1611:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1621:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1631:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1641:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1651:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1661:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1671:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    1681:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    1691:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    16a1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    16b1:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    16c1:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    16d1:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    16e1:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    16f1:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1701:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1711:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1721:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1731:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1741:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    1751:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    1761:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    1771:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    1781:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    1791:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    17a1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    17b1:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    17c1:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    17d1:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    17e1:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    17f1:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1801:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1811:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1821:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1831:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1841:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    1851:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    1861:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    1871:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    1881:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    1891:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    18a1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    18b1:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    18c1:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    18d1:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    18e1:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    18f1:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1901:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1911:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1921:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1931:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1941:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1951:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1961:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1971:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001982 <level_data>:
    1982:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1992:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    19ba:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    19d2:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    19e2:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    19f2:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1a0e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1a1e:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1a2e:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1a4a:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1a6a:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1a7a:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1a8a:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1a9a:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1aaa:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1aba:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1aca:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1ada:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1aea:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1afa:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1b0a:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1b1a:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1b2a:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1b3a:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1b52:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1b62:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1b7e:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1b96:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1bb2:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bc2:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1bd2:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1bee:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1bfe:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1c0e:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1c2e:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1c4e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c5e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c8e:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1caa:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cc6:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1cd6:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1ce6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1cf6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1d06:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1d16:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1d26:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1d36:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1d46:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    1d56:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1d66:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1d76:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1d86:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1d96:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1da6:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1db6:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1dc6:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1dd6:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1de6:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1df6:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1e06:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1e16:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1e26:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e36:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1e46:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1e56:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1e66:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1e76:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1e86:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1e96:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1ea6:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1eb6:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1ec6:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1ed6:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1ee6:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1ef6:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1f06:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f1e:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    1f3a:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    1f4a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f7a:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f96:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fd2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    200e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    202e:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    2046:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    2062:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2072:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    2082:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    2092:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    20a2:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    20b2:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    20c2:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    20d2:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    20e2:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    20f2:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2102:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2112:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2122:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2132:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2142:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2152:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    2162:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2172:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    218e:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    21b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21d2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21ee:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    220e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    222a:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    223a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    224a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    225a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    226a:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    227a:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    228a:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    229a:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    22aa:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    22ba:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    22ca:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    22da:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    22ea:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    22fa:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    230a:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    231a:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    232a:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    233a:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    234a:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    235a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2376:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    238e:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    239e:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    23ae:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    23be:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    23d6:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    23e6:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    23f6:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2406:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    2416:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2426:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    243e:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    244e:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    245e:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    2476:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    2486:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    2496:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    24a6:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    24b6:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    24c6:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    24d6:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    24ee:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    24fe:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2516:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2526:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2536:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2546:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2556:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2572:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    258e:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    25ae:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    25be:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    25ce:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    25ea:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    260a:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    2626:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2646:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2656:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2666:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2676:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    268e:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    269e:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    26ae:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    26be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    26ce:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    26de:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    26fa:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    270a:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    271a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    272a:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    274a:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    2766:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    2786:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    279e:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    27ae:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27ca:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    27e6:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2806:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2816:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2826:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2836:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2846:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    2856:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    286e:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    287e:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    288e:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    289e:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    28ae:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    28be:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    28ce:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    28de:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    28ee:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2916:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2926:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2936:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2946:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    295e:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    296e:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    297e:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    298e:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    299e:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    29ae:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    29be:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    29d6:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    29e6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    29f6:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2a06:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2a16:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a26:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2a36:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2a46:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2a56:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2a66:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2a76:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2a86:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2a96:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2aa6:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2ab6:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2ad2:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2af6:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b06:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b16:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b26:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b36:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2b46:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2b5e:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2b6e:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2b7e:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2b8e:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2b9e:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2bae:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2bbe:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2bce:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2bde:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2bee:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2bfe:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c22:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c3e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2c4e:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2c5e:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2c6e:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2c7e:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2c8e:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2c9e:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2cae:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2cc6:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2cd6:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cf2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d12:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2d22:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2d32:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2d42:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d52:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2d62:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2d72:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2d82:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2d92:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2da2:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2db2:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2dc2:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2dd2:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2de2:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2df2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e02:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e12:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e22:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e3e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e5a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e7a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e96:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ea6:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2eb6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ed2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2eea:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    2efa:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2f0a:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    2f1a:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    2f2a:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    2f3a:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    2f4a:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    2f5a:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    2f6a:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    2f7a:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    2f8a:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    2f9a:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2fb2:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2fc2:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2fd2:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2fe2:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ff2:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3002:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    301e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    303a:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    304a:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    305a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3076:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3096:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30d2:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30e2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    30f2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3102:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    312a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    314a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3166:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3186:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    3196:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    31a6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31c2:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    31de:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    31f6:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3206:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    3216:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3226:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    3236:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    3246:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    3256:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    3266:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    3276:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    3286:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    3296:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    32a6:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    32b6:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    32ce:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    32ee:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    330a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    332a:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    333a:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    334a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3366:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3382:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33a2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33be:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ce:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33de:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33ee:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33fe:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    340e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    341e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    342e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    343e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    344e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    345e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    346e:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    347e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    348e:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    349e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ae:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    34be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    34ce:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    34de:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    34ee:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    34fe:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    350e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    351e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    352e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    353e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    354e:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    355e:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3582:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    359e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35da:	00 00 00 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
	...
    35f6:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
	...
    3616:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3636:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3652:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3672:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3682:	00 07 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    3692:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36ae:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    36be:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................

000036ce <sprites_data>:
    36ce:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    36de:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    36ee:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    36fe:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    370e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    371e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    372e:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    373e:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    374e:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    375e:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    376e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    377e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    378e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    379e:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    37ae:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    37be:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    37ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    37de:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    37ee:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    37fe:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    380e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    381e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    382e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    383e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    384e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    385e:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    386e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    387e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    388e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    389e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    38ae:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    38be:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    38ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38de:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    38ee:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    38fe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    390e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    391e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    392e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    393e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    394e:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    395e:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    396e:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    397e:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    398e:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    399e:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    39ae:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    39be:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    39ce:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    39de:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    39ee:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    39fe:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3a0e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3a1e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3a2e:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3a3e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3a4e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3a5e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3a6e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3a7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a8e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3a9e:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3aae:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3abe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ace:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3ade:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3aee:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3afe:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3b0e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3b1e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3b2e:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3b3e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3b4e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3b5e:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3b6e:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3b7e:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3b8e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3b9e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3bae:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    3bbe:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3bce:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3bde:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3bee:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3bfe:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3c0e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3c1e:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3c2e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3c3e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3c4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c5e:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3c6e:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3c7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c8e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3c9e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3cae:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3cbe:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3cce:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3cde:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3cee:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3cfe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d0e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3d1e:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3d2e:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3d3e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d4e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3d5e:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3d6e:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    3d7e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d9e:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    3dae:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    3dbe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3dce:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3dde:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3dee:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3dfe:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3e0e:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3e1e:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3e2e:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3e3e:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3e4e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3e5e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3e6e:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3e7e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3e8e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3e9e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3eae:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3ebe:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3ece:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    3ede:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    3eee:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    3efe:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3f0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f2e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3f3e:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3f4e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3f5e:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3f6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f8e:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3f9e:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    3fae:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    3fbe:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    3fce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fde:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fee:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ffe:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

0000400e <map_sub_turret>:
    400e:	01 01 23                                            ..#

00004011 <map_sub_shot>:
    4011:	01 01 1b                                            ...

00004014 <map_up_arrow>:
    4014:	01 01 22                                            .."

00004017 <map_down_arrow>:
    4017:	01 01 21                                            ..!

0000401a <map_right_arrow>:
    401a:	01 01 20                                            .. 

0000401d <map_rocket_right_1>:
    401d:	01 01 1a                                            ...

00004020 <map_rocket_right_0>:
    4020:	01 01 19                                            ...

00004023 <map_rocket_up_1>:
    4023:	01 01 18                                            ...

00004026 <map_rocket_up_0>:
    4026:	01 01 17                                            ...

00004029 <map_ball>:
    4029:	01 01 16                                            ...

0000402c <map_explosion_2>:
    402c:	02 02 08 09 09 08                                   ......

00004032 <map_explosion_1>:
    4032:	02 02 06 07 10 11                                   ......

00004038 <map_explosion_0>:
    4038:	02 02 04 05 0e 0f                                   ......

0000403e <map_tank2_right_0>:
    403e:	02 02 14 15 1e 1f                                   ......

00004044 <map_tank2_up_0>:
    4044:	02 02 12 13 1c 1d                                   ......

0000404a <map_tank1_right_0>:
    404a:	02 02 02 03 0c 0d                                   ......

00004050 <map_tank1_up_0>:
    4050:	02 02 00 01 0a 0b                                   ......

00004056 <map_tank_blank>:
    4056:	02 02 24 24 24 24                                   ..$$$$

0000405c <map_none>:
    405c:	01 01 24                                            ..$

0000405f <tiles_data>:
	...
    409f:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    40af:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    40bf:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    40cf:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    40df:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    40ef:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    40ff:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    410f:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    411f:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    412f:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    413f:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    414f:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    415f:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    416f:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    417f:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    418f:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    419f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    41af:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    41bf:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    41cf:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    41e7:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    41f7:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4207:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    421f:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    422f:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    423f:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    424f:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    4267:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    4287:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    429f:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    42af:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    42bf:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    42cf:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    42df:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    42ef:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    42ff:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    430f:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    431f:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    432f:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    433f:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    434f:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    435f:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    436f:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    437f:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    438f:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    439f:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    43af:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    43bf:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    43cf:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    43df:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    43ef:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    43ff:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    440f:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    441f:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    442f:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    443f:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    444f:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    445f:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    446f:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    447f:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    448f:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    449f:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    44af:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    44bf:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    44cf:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    44df:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    44ef:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    44ff:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    450f:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    451f:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    452f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    453f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    454f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    455f:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    456f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    457f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    458f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    45bf:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    45cf:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    45df:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    45ef:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    45ff:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    460f:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    461f:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    462f:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    463f:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    464f:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    465f:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    466f:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    467f:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    468f:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    469f:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    46af:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    46bf:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    46cf:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    46df:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    46ef:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    46ff:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    470f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    471f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    472f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    475f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    476f:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    477f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    478f:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    479f:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    47af:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    47bf:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    47cf:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    47df:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    481f:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    482f:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    483f:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    484f:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    485f:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    486f:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    487f:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    488f:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    48cf:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4907:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4917:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4927:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4937:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4947:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4957:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4967:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4977:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4987:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4997:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    49a7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49b7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49c7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49d7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49e7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49f7:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a07:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a17:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4a27:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4a37:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4a47:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4a57:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4a67:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4a77:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4a87:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4a97:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4aa7:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4adf:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4aef:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4aff:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4b23:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4b33:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4b43:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4b53:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4b63:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4b73:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4b83:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4b93:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4ba3:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4bb3:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4bc3:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4bd3:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4be3:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4bf3:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4c03:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4c13:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    4c23:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    4c33:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c43:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c53:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    4c63:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    4c73:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c83:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c93:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    4ca3:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    4cb3:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    4cc3:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    4cd3:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    4ce3:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    4cf3:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    4d03:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    4d13:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    4d23:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d33:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4d43:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4d53:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4d63:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d73:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4d83:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    4d93:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    4da3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4db3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4dc3:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    4dd3:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4de3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4df3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4e03:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e13:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4e23:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    4e33:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4e43:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e53:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e63:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    4e73:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e83:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e93:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4ea3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4eb3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ec3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ed3:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    4ee3:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    4ef3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f03:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4f13:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4f23:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f33:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f43:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4f53:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4f63:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4f73:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4f83:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4f93:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4fa3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4fb3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fc3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4fd3:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4fe3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4ff3:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5003:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5013:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5023:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5033:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5043:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5053:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    5063:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5073:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    5083:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    5093:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    50a3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    50b3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    50c3:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    50d3:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    50e3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    50f3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5103:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5113:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5123:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5133:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5143:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5153:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    5163:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5173:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5183:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5193:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    51a3:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51b3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51c3:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    51d3:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    51e3:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51f3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5203:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5213:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5223:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5233:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5243:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5253:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5263:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5273:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5283:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5293:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    52a3:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    52b3:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    52c3:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    52d3:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    52e3:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    52f3:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5303:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5313:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5323:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5333:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5343:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5353:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5363:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5373:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    5383:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5393:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    53a3:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53b3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53c3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53d3:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    53e3:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    53f3:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5403:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5413:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5423:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5433:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5443:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5453:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    5463:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5473:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5483:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5493:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    54a3:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    54b3:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    54c3:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    54d3:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    54e3:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    54f3:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5503:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5513:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5523:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5533:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5543:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5553:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    5563:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5573:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5583:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5593:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    55a3:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55b3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55c3:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    55d3:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    55e3:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55f3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5603:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5613:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5623:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5633:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5643:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5653:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5663:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5673:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5683:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5693:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    56a3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    56b3:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    56c3:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    56d3:	a3 f4 f4 ff ad ad ad ad ad 9a f3 f0 f0 f3 a3 a3     ................
    56e3:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    56f3:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5703:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5713:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5723:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5733:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff ff ff ff     ................
    5743:	ff f0 f3 f0 f0 f5 ff ff ff ff f5 f0 f5 f4 f4 f5     ................
    5753:	f5 ff ff f5 f0 f0 f3 f0 f3 ff ff f0 a3 a3 a3 a3     ................
    5763:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5773:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5783:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5793:	9a 9a 9a 9a f0 f0 f3 e8 e8 e8 f3 f0 a3 a4 a4 a4     ................
    57a3:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    57b3:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    57c3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    57d3:	9a 9a 9a 9a f0 f0 e8 f0 f3 f0 f3 f0 9a 9a 9a a4     ................
    57e3:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57f3:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5803:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5813:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5823:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5833:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5843:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5853:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5863:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5873:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5883:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5893:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    58a3:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    58b3:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    58c3:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    58d3:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    58e3:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    58f3:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5903:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5913:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5923:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5933:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5943:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5953:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5963:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    5973:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    5983:	a4 a4 a4 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    5993:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    59a3:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    59b3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59c3:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 9a 9a 9a     ................
    59d3:	a3 a3 a3 a3 a4 9a 9a a4 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    59e3:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    59f3:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5a03:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5a13:	a4 a4 a4 a4 9a 9a 9a a4 a4 9a 9a a4 a0 a0 a0 a0     ................
    5a23:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5a33:	a0 a0 9a a4 a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a a4     ................
    5a43:	a4 a4 a4 a4 9a 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5a53:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5a63:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5a73:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    5a83:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    5a93:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5aa3:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5ab3:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ac3:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5ad3:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5ae3:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5af3:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5b03:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5b13:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5b23:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5b33:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5b43:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b53:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    5b63:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5b73:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5b83:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5b93:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5ba3:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5bb3:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5bc3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5bd3:	9a 9a 9a 9a f0 f0 f3 e8 e8 e8 e8 f0 a3 a3 a3 a3     ................
    5be3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bf3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5c03:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    5c13:	9a 9a 9a 9a f0 f0 f3 f0 e8 f0 f3 f0 a3 a3 a3 a3     ................
    5c23:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c33:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3     ................
    5c43:	f0 ff ff ff f0 f5 ff ff ff ff f5 f0 f5 ff ff ff     ................
    5c53:	ff f4 f4 f5 f0 ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5c63:	a3 9a f3 f0 9a 9a 9a 9a 9a f0 f0 ff 9a ff ff ff     ................
    5c73:	ff ff ff f4 9a ff ff ff ff f3 f0 f0 ff f0 f2 f3     ................
    5c83:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5c93:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5ca3:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    5cb3:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5cc3:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5cd3:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    5ce3:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5cf3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5d03:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d13:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a a3 a3 a3     ................
    5d23:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5d33:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3     ................
    5d43:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d53:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    5d63:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5d73:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3     ................
    5d83:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d93:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5da3:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5db3:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 f3 f0 f2 9a     ................
    5dc3:	a3 a3 a3 a3 f0 f5 f5 9a 9a 9a 9a 9a f5 f4 f4 f5     ................
    5dd3:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5de3:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    5df3:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e03:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5     ................
    5e13:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5e23:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e33:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e43:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5     ................
    5e53:	f5 f4 f4 9a f0 f0 f3 f0 f3 f0 f3 9a a4 a4 a4 a4     ................
    5e63:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5e73:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e83:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e93:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ea3:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5eb3:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ec3:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a f4 f4 f5     ................
    5ed3:	f5 f4 f4 f5 9a f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    5ee3:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    5ef3:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f03:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f5 f4 f4 f5     ................
    5f13:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5f23:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f33:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f43:	9a f0 f3 f0 9a 9a 9a 9a 9a f5 f5 f0 f5 f4 f4 f5     ................
    5f53:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5f63:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5f73:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3     ................
    5f83:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5f93:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5fa3:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5fb3:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a f3 f0 f2 f3     ................
    5fc3:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5fd3:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5fe3:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5ff3:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6003:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6013:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6023:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6033:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6043:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6053:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6063:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6073:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6083:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6093:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60a3:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    60b3:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    60c3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60d3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60e3:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    60f3:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6103:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6113:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6123:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6133:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6143:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6153:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6163:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6173:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6183:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6193:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61a3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61b3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61c3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61d3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61e3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61f3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6203:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6213:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 ff e8 e8 e8 e8     ................
    6223:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6233:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6243:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6253:	e8 e8 e8 e8 ff e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6263:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6273:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6283:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6293:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    62a3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    62b3:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    62c3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62d3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    62e3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    62f3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6303:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6313:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6323:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6333:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6343:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6353:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6363:	e8 e8 e8 ff e8 e8 ff ff e8 e8 ff ff e8 e8 e8 ff     ................
    6373:	ff ff ff ff e8 e8 e8 e8 ff ff ff ff e8 e8 e8 ff     ................
    6383:	ff ff ff ff e8 e8 e8 ff ff ff ff ff ff ff ff ff     ................
    6393:	ff ff ff ff ff ff ff ff ff ff ff ff ff e8 e8 e8     ................
    63a3:	e8 e8 e8 e8 ff ff e8 e8 e8 ff e8 e8 ff ff ff ff     ................
    63b3:	ff ff e8 e8 ff ff ff ff e8 e8 e8 e8 ff ff ff ff     ................
    63c3:	ff e8 e8 e8 ff ff ff ff ff e8 e8 e8 ff ff ff ff     ................
    63d3:	ff ff ff ff ff ff ff ff ff ff ff ff f0 f3 f0 f0     ................
    63e3:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    63f3:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6403:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6413:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6423:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6433:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6443:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6453:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6463:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6473:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6483:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6493:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    64a3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64b3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64c3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    64d3:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 ff ff     ................
    64e3:	ff ff ff ff e8 e8 e8 ff ff ff ff ff e8 e8 e8 ff     ................
    64f3:	ff ff ff ff e8 e8 e8 e8 ff ff ff ff e8 e8 e8 e8     ................
    6503:	ff ff ff ff e8 e8 ff ff e8 e8 ff ff e8 e8 ff e8     ................
    6513:	e8 e8 e8 ff e8 e8 e8 e8 e8 e8 e8 ff ff ff ff ff     ................
    6523:	ff ff e8 e8 ff ff ff ff ff e8 e8 e8 ff ff ff ff     ................
    6533:	ff e8 e8 e8 ff ff ff ff ff ff ff e8 ff ff ff ff     ................
    6543:	e8 e8 ff e8 ff ff e8 e8 e8 e8 e8 e8 ff e8 e8 e8     ................
    6553:	e8 e8 e8 e8 ff e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6563:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    6573:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6583:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6593:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    65a3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65b3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    65c3:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    65d3:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    65e3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    65f3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6603:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6613:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6623:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6633:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6643:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6653:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6663:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6673:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6683:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6693:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    66a3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66b3:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66c3:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    66d3:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    6727:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6737:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    674f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6767:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6777:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    67a7:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    67b7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    67c7:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    67df:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    67ef:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    67ff:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    680f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6827:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6837:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6847:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    685f:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    686f:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    687f:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    688f:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    68a7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    68b7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    68eb:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    68fb:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    690b:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    6927:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    6937:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6947:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6967:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6977:	df df df df df df df df 00 00 df df df df 00 00     ................
    6987:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    69a7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    69b7:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    69c7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6a07:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a17:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6a37:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6a87:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6aab:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    6abb:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    6acb:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ae7:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6af7:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    6b07:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6b27:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    6b37:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    6b47:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6b67:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6b77:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6b87:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    6ba7:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    6bb7:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    6bc7:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6beb:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    6bfb:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    6c0b:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    6c27:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    6c37:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    6c47:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6c67:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    6c77:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    6c87:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6ca7:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    6cb7:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6cc7:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    6ce7:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6cf7:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6d07:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6d27:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6d37:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    6d47:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    6d6f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6d87:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6d9f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6daf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6dbf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6dcf:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6ddf:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    6def:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6dff:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6e0f:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6e2f:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6e47:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6e5f:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    6e6f:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6e7f:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6e8f:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ea7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6eb7:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6ecf:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ee7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6ef7:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6f07:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6f27:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6f37:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6f47:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6f67:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6f77:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6f87:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6fa7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6fb7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6fc7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6fe7:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6ff7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7007:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7027:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7037:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7047:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7067:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7077:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7087:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    70a7:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    70b7:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    70c7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    70e7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70f7:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7107:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7127:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7137:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7147:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    716b:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    717b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    718b:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    71a7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    71b7:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    71c7:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    71e7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    71f7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7207:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7227:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    7237:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    7247:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7267:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    7277:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7287:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    72a7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    72b7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    72c7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    72e7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    72f7:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7307:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7327:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7337:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7347:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7367:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7377:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7387:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    73a7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    73b7:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    73c7:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    73e7:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    73f7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7407:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7427:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7437:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7447:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7467:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7477:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7487:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    74a7:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    74b7:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    74c7:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    74e7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    74f7:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7507:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7527:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7537:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    7547:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7567:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7577:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7587:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    75a7:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    75b7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    75c7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    75e7:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    75f7:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7607:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7627:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7637:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7647:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    766b:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    767b:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    76cf:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

000076df <map_sub_emerging>:
    76df:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    76ef:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    76ff:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    770f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    771f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    772f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 80 81 82     ................
    773f:	83 84 85 86 87 85 88 83 89 80 80 0d 0d 0d 0d 0d     ................
    774f:	0d 0d 0d 8a 80 8b 8b 8b 8b 85 85 85 85 85 85 8c     ................
    775f:	8d 85 85 85 85 85 85 8b 8b 8b 8b 80 8e 0d 0d 8f     ................
    776f:	90 91 91 91 91 85 85 85 85 85 85 92 93 85 85 85     ................
    777f:	85 85 85 91 91 91 91 90 94 0d 0d 0d 0d 0d 0d 0d     ................
    778f:	33 90 90 95 96 97 85 85 85 85 98 96 99 90 90 0d     3...............
    779f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77af:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    77bf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77cf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77df:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77ef:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    77ff:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    780f:	0d 0d 0d 0d 0d 0d                                   ......

00007815 <map_sub>:
    7815:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7825:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7835:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7845:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7855:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7865:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7875:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7885:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7895:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    78a5:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    78b5:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    78c5:	33 73 74 75 76 77 78 78 78 78 79 7a 7b 7c 7d 0d     3stuvwxxxxyz{|}.
    78d5:	0d 7e 7f 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     .~..............
    78e5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    78f5:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7905:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7915:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7925:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7935:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7945:	0d 0d 0d 0d 0d 0d                                   ......

0000794b <map_scope_2>:
    794b:	01 01 12                                            ...

0000794e <map_scope_1>:
    794e:	01 01 11                                            ...

00007951 <map_scope_0>:
    7951:	01 01 10                                            ...

00007954 <map_blue_tank>:
    7954:	02 02 2b 2c 31 32                                   ..+,12

0000795a <map_green_tank>:
    795a:	02 02 18 19 23 24                                   ....#$

00007960 <map_fence>:
    7960:	01 01 0f                                            ...

00007963 <map_turf>:
    7963:	01 01 0e                                            ...

00007966 <map_water>:
    7966:	01 01 0d                                            ...

00007969 <map_metal_bl>:
    7969:	01 01 0c                                            ...

0000796c <map_metal_tr>:
    796c:	01 01 0b                                            ...

0000796f <map_metal_br>:
    796f:	01 01 0a                                            ...

00007972 <map_metal_tl>:
    7972:	01 01 09                                            ...

00007975 <map_tile_exp_2>:
    7975:	01 01 08                                            ...

00007978 <map_tile_exp_1>:
    7978:	01 01 07                                            ...

0000797b <map_tile_exp_0>:
    797b:	01 01 06                                            ...

0000797e <map_rocket_itm>:
    797e:	01 01 04                                            ...

00007981 <map_explode_itm>:
    7981:	01 01 03                                            ...

00007984 <map_speed_itm>:
    7984:	01 01 02                                            ...

00007987 <map_metal>:
    7987:	01 01 05                                            ...

0000798a <map_brick>:
    798a:	01 01 01                                            ...

0000798d <map_splash>:
    798d:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    799d:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    79ad:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    79bd:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    79cd:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    79dd:	1a 00 00 1a 2f 30                                   ..../0

000079e3 <map_pause>:
    79e3:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    79f3:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    7a03:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    7a13:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00007a21 <map_tile_none>:
    7a21:	01 01 00                                            ...

00007a24 <__ctors_end>:
    7a24:	11 24       	eor	r1, r1
    7a26:	1f be       	out	0x3f, r1	; 63
    7a28:	cf ef       	ldi	r28, 0xFF	; 255
    7a2a:	d0 e1       	ldi	r29, 0x10	; 16
    7a2c:	de bf       	out	0x3e, r29	; 62
    7a2e:	cd bf       	out	0x3d, r28	; 61

00007a30 <__do_copy_data>:
    7a30:	11 e0       	ldi	r17, 0x01	; 1
    7a32:	a0 e0       	ldi	r26, 0x00	; 0
    7a34:	b1 e0       	ldi	r27, 0x01	; 1
    7a36:	ee e8       	ldi	r30, 0x8E	; 142
    7a38:	f8 ed       	ldi	r31, 0xD8	; 216
    7a3a:	02 c0       	rjmp	.+4      	; 0x7a40 <__do_copy_data+0x10>
    7a3c:	05 90       	lpm	r0, Z+
    7a3e:	0d 92       	st	X+, r0
    7a40:	a6 30       	cpi	r26, 0x06	; 6
    7a42:	b1 07       	cpc	r27, r17
    7a44:	d9 f7       	brne	.-10     	; 0x7a3c <__do_copy_data+0xc>

00007a46 <__do_clear_bss>:
    7a46:	10 e1       	ldi	r17, 0x10	; 16
    7a48:	a6 e0       	ldi	r26, 0x06	; 6
    7a4a:	b1 e0       	ldi	r27, 0x01	; 1
    7a4c:	01 c0       	rjmp	.+2      	; 0x7a50 <.do_clear_bss_start>

00007a4e <.do_clear_bss_loop>:
    7a4e:	1d 92       	st	X+, r1

00007a50 <.do_clear_bss_start>:
    7a50:	a7 33       	cpi	r26, 0x37	; 55
    7a52:	b1 07       	cpc	r27, r17
    7a54:	e1 f7       	brne	.-8      	; 0x7a4e <.do_clear_bss_loop>

00007a56 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7a56:	0e 94 5f 41 	call	0x82be	; 0x82be <wdt_randomize>
#endif

    MCUSR = 0;
    7a5a:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7a5c:	88 e1       	ldi	r24, 0x18	; 24
    7a5e:	0f b6       	in	r0, 0x3f	; 63
    7a60:	f8 94       	cli
    7a62:	80 93 60 00 	sts	0x0060, r24
    7a66:	10 92 60 00 	sts	0x0060, r1
    7a6a:	0f be       	out	0x3f, r0	; 63

00007a6c <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7a6c:	0e 94 13 42 	call	0x8426	; 0x8426 <isEepromFormatted>
    7a70:	81 11       	cpse	r24, r1
    7a72:	02 c0       	rjmp	.+4      	; 0x7a78 <Initialize+0xc>
    7a74:	0e 94 f1 41 	call	0x83e2	; 0x83e2 <FormatEeprom>

	cli();
    7a78:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    7a80:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7a84:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7a88:	10 92 02 0b 	sts	0x0B02, r1
    7a8c:	10 92 08 0b 	sts	0x0B08, r1
    7a90:	10 92 0e 0b 	sts	0x0B0E, r1
    7a94:	10 92 14 0b 	sts	0x0B14, r1
    7a98:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7a9c:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    7aa0:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7aa4:	92 e1       	ldi	r25, 0x12	; 18
    7aa6:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    7aaa:	90 ee       	ldi	r25, 0xE0	; 224
    7aac:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    7ab0:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    7ab4:	94 e1       	ldi	r25, 0x14	; 20
    7ab6:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    7aba:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    7abe:	10 92 f4 0a 	sts	0x0AF4, r1
    7ac2:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    7ac6:	10 92 f8 0a 	sts	0x0AF8, r1
    7aca:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    7ace:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    7ad2:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <InitializeVideoMode>
    7ad6:	80 e7       	ldi	r24, 0x70	; 112
    7ad8:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7ada:	fc 01       	movw	r30, r24
    7adc:	25 91       	lpm	r18, Z+
    7ade:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7ae0:	f9 01       	movw	r30, r18
    7ae2:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7ae4:	30 83       	st	Z, r19
    7ae6:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7ae8:	20 e0       	ldi	r18, 0x00	; 0
    7aea:	8e 39       	cpi	r24, 0x9E	; 158
    7aec:	92 07       	cpc	r25, r18
    7aee:	a9 f7       	brne	.-22     	; 0x7ada <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7af0:	78 94       	sei
	
	DisplayLogo();
    7af2:	0e 94 5f 4e 	call	0x9cbe	; 0x9cbe <DisplayLogo>
    7af6:	0e 94 5b 69 	call	0xd2b6	; 0xd2b6 <main>
    7afa:	0c 94 45 6c 	jmp	0xd88a	; 0xd88a <_exit>

00007afe <__bad_interrupt>:
    7afe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007b02 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    7b02:	0c e0       	ldi	r16, 0x0C	; 12
    7b04:	0a 95       	dec	r16
    7b06:	f1 f7       	brne	.-4      	; 0x7b04 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    7b08:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    7b0a:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    7b0c:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7b0e:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    7b10:	20 91 c0 0b 	lds	r18, 0x0BC0


		clr r16
    7b14:	00 27       	eor	r16, r16

00007b16 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    7b16:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    7b18:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    7b1a:	ac 0f       	add	r26, r28
		adc XH,YH
    7b1c:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    7b1e:	1c 91       	ld	r17, X
		std Z+2,r17
    7b20:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    7b22:	02 17       	cp	r16, r18
		brsh noov
    7b24:	08 f4       	brcc	.+2      	; 0x7b28 <noov>
		mov r17,r16
    7b26:	10 2f       	mov	r17, r16

00007b28 <noov>:
	noov:
		st X,r17
    7b28:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    7b2a:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    7b2c:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    7b2e:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    7b30:	90 f3       	brcs	.-28     	; 0x7b16 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    7b32:	05 e2       	ldi	r16, 0x25	; 37

00007b34 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    7b34:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    7b36:	1a 95       	dec	r17
		brne .-4
    7b38:	f1 f7       	brne	.-4      	; 0x7b36 <wait_loop+0x2>

		dec r16
    7b3a:	0a 95       	dec	r16
		brne wait_loop
    7b3c:	d9 f7       	brne	.-10     	; 0x7b34 <wait_loop>

		lds r2,overlay_tile_table
    7b3e:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    7b42:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    7b46:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    7b4a:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    7b4e:	68 01       	movw	r12, r16
		movw r6,r16
    7b50:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    7b52:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    7b54:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7b56:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    7b58:	4e 01       	movw	r8, r28
		clr r0
    7b5a:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    7b5c:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    7b60:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    7b62:	09 f0       	breq	.+2      	; 0x7b66 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    7b64:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    7b66:	09 f0       	breq	.+2      	; 0x7b6a <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    7b68:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    7b6a:	09 f0       	breq	.+2      	; 0x7b6e <wait_loop+0x3a>
		mov r24,r19
    7b6c:	83 2f       	mov	r24, r19

		breq .+2
    7b6e:	09 f0       	breq	.+2      	; 0x7b72 <wait_loop+0x3e>
		movw r12,r2
    7b70:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    7b72:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    7b74:	a0 2e       	mov	r10, r16
		clr r22
    7b76:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    7b78:	78 e0       	ldi	r23, 0x08	; 8

00007b7a <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    7b7a:	7d d2       	rcall	.+1274   	; 0x8076 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    7b7c:	3c e0       	ldi	r19, 0x0C	; 12
    7b7e:	3a 95       	dec	r19
    7b80:	f1 f7       	brne	.-4      	; 0x7b7e <next_tile_line+0x4>
    7b82:	00 00       	nop
    7b84:	00 00       	nop

		;***draw line***
		call render_tile_line
    7b86:	0e 94 f4 3d 	call	0x7be8	; 0x7be8 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    7b8a:	3f e0       	ldi	r19, 0x0F	; 15
    7b8c:	3a 95       	dec	r19
    7b8e:	f1 f7       	brne	.-4      	; 0x7b8c <next_tile_line+0x12>
    7b90:	00 00       	nop
    7b92:	00 00       	nop

		dec r10
    7b94:	aa 94       	dec	r10
		breq frame_end
    7b96:	a9 f0       	breq	.+42     	; 0x7bc2 <frame_end>
	
		inc r22
    7b98:	63 95       	inc	r22
		lpm ;3 nop
    7b9a:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    7b9c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    7b9e:	31 f0       	breq	.+12     	; 0x7bac <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7ba0:	33 e0       	ldi	r19, 0x03	; 3
    7ba2:	3a 95       	dec	r19
    7ba4:	f1 f7       	brne	.-4      	; 0x7ba2 <next_tile_line+0x28>
    7ba6:	00 00       	nop
    7ba8:	00 00       	nop
		
		rjmp next_tile_line	
    7baa:	e7 cf       	rjmp	.-50     	; 0x7b7a <next_tile_line>

00007bac <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    7bac:	66 27       	eor	r22, r22

		clr r0
    7bae:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    7bb0:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7bb2:	c3 0f       	add	r28, r19
		adc YH,r0
    7bb4:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7bb6:	8a 95       	dec	r24
		brne .+2
    7bb8:	09 f4       	brne	.+2      	; 0x7bbc <next_tile_row+0x10>
		movw YL,r8	;main vram
    7bba:	e4 01       	movw	r28, r8
		brne .+2
    7bbc:	09 f4       	brne	.+2      	; 0x7bc0 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    7bbe:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    7bc0:	dc cf       	rjmp	.-72     	; 0x7b7a <next_tile_line>

00007bc2 <frame_end>:

	frame_end:

		WAIT r19,18
    7bc2:	36 e0       	ldi	r19, 0x06	; 6
    7bc4:	3a 95       	dec	r19
    7bc6:	f1 f7       	brne	.-4      	; 0x7bc4 <frame_end+0x2>

		rcall hsync_pulse ;145
    7bc8:	56 d2       	rcall	.+1196   	; 0x8076 <hsync_pulse>
	
		clr r1
    7bca:	11 24       	eor	r1, r1
		call RestoreBackground
    7bcc:	0e 94 00 4d 	call	0x9a00	; 0x9a00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    7bd0:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    7bd4:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7bd6:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7bd8:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7bda:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7bde:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7be0:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    7be4:	11 24       	eor	r1, r1


		ret
    7be6:	08 95       	ret

00007be8 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    7be8:	de 01       	movw	r26, r28

		mul r22,r23
    7bea:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    7bec:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7bee:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7bf0:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    7bf2:	00 0d       	add	r16, r0
		adc r17,r1
    7bf4:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    7bf6:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7bf8:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    7bfa:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    7bfc:	00 0d       	add	r16, r0
		adc r17,r1
    7bfe:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    7c00:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    7c02:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    7c04:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    7c06:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    7c08:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7c0a:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    7c0c:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    7c0e:	08 f4       	brcc	.+2      	; 0x7c12 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    7c10:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    7c12:	04 0e       	add	r0, r20
	    adc r1,r21
    7c14:	15 1e       	adc	r1, r21

		movw ZL,r0
    7c16:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    7c18:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    7c1a:	f0 f0       	brcs	.+60     	; 0x7c58 <ramloop>

00007c1c <romloop>:
	

	romloop:
	    lpm r16,Z+
    7c1c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7c1e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7c20:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    7c22:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    7c24:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7c26:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    7c28:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    7c2a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    7c2c:	28 31       	cpi	r18, 0x18	; 24
		nop
    7c2e:	00 00       	nop

	    lpm r16,Z+
    7c30:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7c32:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    7c34:	08 f4       	brcc	.+2      	; 0x7c38 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    7c36:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    7c38:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    7c3a:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    7c3c:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    7c3e:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    7c40:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    7c42:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    7c44:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    7c46:	1a 95       	dec	r17
   
	    lpm r16,Z+
    7c48:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    7c4a:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    7c4c:	05 91       	lpm	r16, Z+

		breq end	
    7c4e:	31 f1       	breq	.+76     	; 0x7c9c <end>
	    movw ZL,r0   	;copy next tile adress
    7c50:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c52:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7c54:	18 f7       	brcc	.-58     	; 0x7c1c <romloop>
	
		rjmp .
    7c56:	00 c0       	rjmp	.+0      	; 0x7c58 <ramloop>

00007c58 <ramloop>:

	ramloop:

	    ld r16,Z+
    7c58:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7c5a:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7c5c:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    7c5e:	01 91       	ld	r16, Z+
		nop   
    7c60:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7c62:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7c64:	23 9f       	mul	r18, r19


	    ld r16,Z+
    7c66:	01 91       	ld	r16, Z+
		nop
    7c68:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7c6a:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7c6c:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    7c6e:	00 c0       	rjmp	.+0      	; 0x7c70 <ramloop+0x18>

	    ld r16,Z+
    7c70:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7c72:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7c74:	08 f0       	brcs	.+2      	; 0x7c78 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7c76:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7c78:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7c7a:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    7c7c:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    7c7e:	15 1e       	adc	r1, r21
		rjmp .
    7c80:	00 c0       	rjmp	.+0      	; 0x7c82 <ramloop+0x2a>
    
		ld r16,Z+		
    7c82:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7c84:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7c86:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    7c88:	00 c0       	rjmp	.+0      	; 0x7c8a <ramloop+0x32>

	    ld r16,Z+	
    7c8a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    7c8c:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    7c8e:	01 91       	ld	r16, Z+

	    dec r17
    7c90:	1a 95       	dec	r17
	    breq end
    7c92:	21 f0       	breq	.+8      	; 0x7c9c <end>
	
		movw ZL,r0
    7c94:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7c96:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7c98:	08 f6       	brcc	.-126    	; 0x7c1c <romloop>
		rjmp ramloop
    7c9a:	de cf       	rjmp	.-68     	; 0x7c58 <ramloop>

00007c9c <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7c9c:	08 b9       	out	0x08, r16	; 8
		clr r16	
    7c9e:	00 27       	eor	r16, r16
		lpm	
    7ca0:	c8 95       	lpm
		nop
    7ca2:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    7ca4:	08 b9       	out	0x08, r16	; 8

		ret
    7ca6:	08 95       	ret

00007ca8 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7ca8:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7caa:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    7cae:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    7cb2:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    7cb4:	82 9f       	mul	r24, r18
	add ZL,r0
    7cb6:	e0 0d       	add	r30, r0
	adc ZH,r1
    7cb8:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7cba:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7cbc:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7cbe:	62 9f       	mul	r22, r18
	add XL,r0
    7cc0:	a0 0d       	add	r26, r0
	adc XH,r1
    7cc2:	b1 1d       	adc	r27, r1

	clr r0
    7cc4:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    7cc6:	05 90       	lpm	r0, Z+
    7cc8:	0d 92       	st	X+, r0
    7cca:	05 90       	lpm	r0, Z+
    7ccc:	0d 92       	st	X+, r0
    7cce:	05 90       	lpm	r0, Z+
    7cd0:	0d 92       	st	X+, r0
    7cd2:	05 90       	lpm	r0, Z+
    7cd4:	0d 92       	st	X+, r0
    7cd6:	05 90       	lpm	r0, Z+
    7cd8:	0d 92       	st	X+, r0
    7cda:	05 90       	lpm	r0, Z+
    7cdc:	0d 92       	st	X+, r0
    7cde:	05 90       	lpm	r0, Z+
    7ce0:	0d 92       	st	X+, r0
    7ce2:	05 90       	lpm	r0, Z+
    7ce4:	0d 92       	st	X+, r0
    7ce6:	05 90       	lpm	r0, Z+
    7ce8:	0d 92       	st	X+, r0
    7cea:	05 90       	lpm	r0, Z+
    7cec:	0d 92       	st	X+, r0
    7cee:	05 90       	lpm	r0, Z+
    7cf0:	0d 92       	st	X+, r0
    7cf2:	05 90       	lpm	r0, Z+
    7cf4:	0d 92       	st	X+, r0
    7cf6:	05 90       	lpm	r0, Z+
    7cf8:	0d 92       	st	X+, r0
    7cfa:	05 90       	lpm	r0, Z+
    7cfc:	0d 92       	st	X+, r0
    7cfe:	05 90       	lpm	r0, Z+
    7d00:	0d 92       	st	X+, r0
    7d02:	05 90       	lpm	r0, Z+
    7d04:	0d 92       	st	X+, r0
    7d06:	05 90       	lpm	r0, Z+
    7d08:	0d 92       	st	X+, r0
    7d0a:	05 90       	lpm	r0, Z+
    7d0c:	0d 92       	st	X+, r0
    7d0e:	05 90       	lpm	r0, Z+
    7d10:	0d 92       	st	X+, r0
    7d12:	05 90       	lpm	r0, Z+
    7d14:	0d 92       	st	X+, r0
    7d16:	05 90       	lpm	r0, Z+
    7d18:	0d 92       	st	X+, r0
    7d1a:	05 90       	lpm	r0, Z+
    7d1c:	0d 92       	st	X+, r0
    7d1e:	05 90       	lpm	r0, Z+
    7d20:	0d 92       	st	X+, r0
    7d22:	05 90       	lpm	r0, Z+
    7d24:	0d 92       	st	X+, r0
    7d26:	05 90       	lpm	r0, Z+
    7d28:	0d 92       	st	X+, r0
    7d2a:	05 90       	lpm	r0, Z+
    7d2c:	0d 92       	st	X+, r0
    7d2e:	05 90       	lpm	r0, Z+
    7d30:	0d 92       	st	X+, r0
    7d32:	05 90       	lpm	r0, Z+
    7d34:	0d 92       	st	X+, r0
    7d36:	05 90       	lpm	r0, Z+
    7d38:	0d 92       	st	X+, r0
    7d3a:	05 90       	lpm	r0, Z+
    7d3c:	0d 92       	st	X+, r0
    7d3e:	05 90       	lpm	r0, Z+
    7d40:	0d 92       	st	X+, r0
    7d42:	05 90       	lpm	r0, Z+
    7d44:	0d 92       	st	X+, r0
    7d46:	05 90       	lpm	r0, Z+
    7d48:	0d 92       	st	X+, r0
    7d4a:	05 90       	lpm	r0, Z+
    7d4c:	0d 92       	st	X+, r0
    7d4e:	05 90       	lpm	r0, Z+
    7d50:	0d 92       	st	X+, r0
    7d52:	05 90       	lpm	r0, Z+
    7d54:	0d 92       	st	X+, r0
    7d56:	05 90       	lpm	r0, Z+
    7d58:	0d 92       	st	X+, r0
    7d5a:	05 90       	lpm	r0, Z+
    7d5c:	0d 92       	st	X+, r0
    7d5e:	05 90       	lpm	r0, Z+
    7d60:	0d 92       	st	X+, r0
    7d62:	05 90       	lpm	r0, Z+
    7d64:	0d 92       	st	X+, r0
    7d66:	05 90       	lpm	r0, Z+
    7d68:	0d 92       	st	X+, r0
    7d6a:	05 90       	lpm	r0, Z+
    7d6c:	0d 92       	st	X+, r0
    7d6e:	05 90       	lpm	r0, Z+
    7d70:	0d 92       	st	X+, r0
    7d72:	05 90       	lpm	r0, Z+
    7d74:	0d 92       	st	X+, r0
    7d76:	05 90       	lpm	r0, Z+
    7d78:	0d 92       	st	X+, r0
    7d7a:	05 90       	lpm	r0, Z+
    7d7c:	0d 92       	st	X+, r0
    7d7e:	05 90       	lpm	r0, Z+
    7d80:	0d 92       	st	X+, r0
    7d82:	05 90       	lpm	r0, Z+
    7d84:	0d 92       	st	X+, r0
    7d86:	05 90       	lpm	r0, Z+
    7d88:	0d 92       	st	X+, r0
    7d8a:	05 90       	lpm	r0, Z+
    7d8c:	0d 92       	st	X+, r0
    7d8e:	05 90       	lpm	r0, Z+
    7d90:	0d 92       	st	X+, r0
    7d92:	05 90       	lpm	r0, Z+
    7d94:	0d 92       	st	X+, r0
    7d96:	05 90       	lpm	r0, Z+
    7d98:	0d 92       	st	X+, r0
    7d9a:	05 90       	lpm	r0, Z+
    7d9c:	0d 92       	st	X+, r0
    7d9e:	05 90       	lpm	r0, Z+
    7da0:	0d 92       	st	X+, r0
    7da2:	05 90       	lpm	r0, Z+
    7da4:	0d 92       	st	X+, r0
    7da6:	05 90       	lpm	r0, Z+
    7da8:	0d 92       	st	X+, r0
    7daa:	05 90       	lpm	r0, Z+
    7dac:	0d 92       	st	X+, r0
    7dae:	05 90       	lpm	r0, Z+
    7db0:	0d 92       	st	X+, r0
    7db2:	05 90       	lpm	r0, Z+
    7db4:	0d 92       	st	X+, r0
    7db6:	05 90       	lpm	r0, Z+
    7db8:	0d 92       	st	X+, r0
    7dba:	05 90       	lpm	r0, Z+
    7dbc:	0d 92       	st	X+, r0
    7dbe:	05 90       	lpm	r0, Z+
    7dc0:	0d 92       	st	X+, r0
    7dc2:	05 90       	lpm	r0, Z+
    7dc4:	0d 92       	st	X+, r0


	clr r1
    7dc6:	11 24       	eor	r1, r1
	ret
    7dc8:	08 95       	ret

00007dca <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7dca:	0f 93       	push	r16
	push r17
    7dcc:	1f 93       	push	r17
	push YL
    7dce:	cf 93       	push	r28
	push YH
    7dd0:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7dd2:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7dd4:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7dd6:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    7dd8:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    7dda:	e0 0d       	add	r30, r0
	adc ZH,r1
    7ddc:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    7dde:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    7de0:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7de2:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7de4:	8e 9f       	mul	r24, r30
	movw r26,r0
    7de6:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7de8:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7dea:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    7dec:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    7dee:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    7df0:	00 24       	eor	r0, r0
	add YL,r1
    7df2:	c1 0d       	add	r28, r1
	adc YH,r0		
    7df4:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    7df6:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    7df8:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    7dfa:	ea 0f       	add	r30, r26
	adc ZH,r27
    7dfc:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    7dfe:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7e00:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    7e02:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    7e04:	69 9f       	mul	r22, r25
	add XL,r0
    7e06:	a0 0d       	add	r26, r0
	adc XH,r1
    7e08:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    7e0a:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    7e0c:	dd 27       	eor	r29, r29

	cpi r20,0	
    7e0e:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    7e10:	51 f4       	brne	.+20     	; 0x7e26 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    7e12:	a2 0f       	add	r26, r18
	adc XH,r1
    7e14:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7e16:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7e18:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7e1a:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7e1c:	11 c0       	rjmp	.+34     	; 0x7e40 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7e1e:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    7e20:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    7e22:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    7e24:	0d c0       	rjmp	.+26     	; 0x7e40 <x_check_end>

00007e26 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7e26:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7e28:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7e2a:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7e2c:	04 c0       	rjmp	.+8      	; 0x7e36 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7e2e:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    7e30:	e8 0f       	add	r30, r24
	adc ZH,r1	
    7e32:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    7e34:	05 c0       	rjmp	.+10     	; 0x7e40 <x_check_end>

00007e36 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7e36:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7e38:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7e3a:	e2 0f       	add	r30, r18
	adc ZH,r1
    7e3c:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7e3e:	31 97       	sbiw	r30, 0x01	; 1

00007e40 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    7e40:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    7e42:	41 f4       	brne	.+16     	; 0x7e54 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    7e44:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7e46:	93 9f       	mul	r25, r19
	add XL,r0
    7e48:	a0 0d       	add	r26, r0
	adc XH,r1
    7e4a:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7e4c:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    7e4e:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    7e50:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    7e52:	0a c0       	rjmp	.+20     	; 0x7e68 <y_check_end>

00007e54 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7e54:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7e56:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7e58:	63 2f       	mov	r22, r19
	dec r22
    7e5a:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7e5c:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7e5e:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    7e60:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7e62:	56 9f       	mul	r21, r22
	add ZL,r0
    7e64:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7e66:	f1 1d       	adc	r31, r1

00007e68 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7e68:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7e6a:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7e6c:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7e6e:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    7e70:	00 ff       	sbrs	r16, 0
	clr r23
    7e72:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7e74:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7e76:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7e78:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7e7a:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7e7c:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7e7e:	59 1b       	sub	r21, r25

00007e80 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    7e80:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7e82:	48 1b       	sub	r20, r24

00007e84 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7e84:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7e86:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7e88:	2c 93       	st	X, r18
	adiw XL,1
    7e8a:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7e8c:	e6 0f       	add	r30, r22
	adc ZH,r23
    7e8e:	f7 1f       	adc	r31, r23
	dec r20
    7e90:	4a 95       	dec	r20
	brne x_loop
    7e92:	c1 f7       	brne	.-16     	; 0x7e84 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7e94:	ec 0f       	add	r30, r28
	adc ZH,YH
    7e96:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7e98:	a8 0f       	add	r26, r24
	adc XH,r1
    7e9a:	b1 1d       	adc	r27, r1
	dec r21
    7e9c:	5a 95       	dec	r21
	brne y_loop
    7e9e:	81 f7       	brne	.-32     	; 0x7e80 <y_loop>


	pop YH
    7ea0:	df 91       	pop	r29
	pop YL
    7ea2:	cf 91       	pop	r28
	pop r17
    7ea4:	1f 91       	pop	r17
	pop r16
    7ea6:	0f 91       	pop	r16
	ret
    7ea8:	08 95       	ret

00007eaa <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7eaa:	0f 92       	push	r0
	push r1
    7eac:	1f 92       	push	r1
	push ZL;2
    7eae:	ef 93       	push	r30
	push ZH;2
    7eb0:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7eb2:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7eb4:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7eb6:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7eba:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    7ebc:	f1 e0       	ldi	r31, 0x01	; 1

00007ebe <latency_loop>:
latency_loop:
	cp ZL,ZH
    7ebe:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    7ec0:	00 f0       	brcs	.+0      	; 0x7ec2 <latency_loop+0x4>
	inc ZH
    7ec2:	f3 95       	inc	r31
	cpi ZH,10
    7ec4:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7ec6:	d8 f3       	brcs	.-10     	; 0x7ebe <latency_loop>
	jmp .
    7ec8:	0c 94 66 3f 	jmp	0x7ecc	; 0x7ecc <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    7ecc:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    7ed0:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7ed2:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    7ed6:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    7eda:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7edc:	57 c0       	rjmp	.+174    	; 0x7f8c <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7ede:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7ee0:	98 f0       	brcs	.+38     	; 0x7f08 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7ee2:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7ee4:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7ee8:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7eea:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7eee:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7ef0:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7ef2:	26 f4       	brtc	.+8      	; 0x7efc <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7ef4:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7ef6:	0e 94 4c 40 	call	0x8098	; 0x8098 <update_sound>
	rjmp sync_end
    7efa:	b6 c0       	rjmp	.+364    	; 0x8068 <sync_end>

00007efc <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7efc:	e5 e1       	ldi	r30, 0x15	; 21
    7efe:	ea 95       	dec	r30
    7f00:	f1 f7       	brne	.-4      	; 0x7efe <sync_pre_eq_no_sound_update+0x2>
    7f02:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7f04:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7f06:	b0 c0       	rjmp	.+352    	; 0x8068 <sync_end>

00007f08 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7f08:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7f0a:	38 f1       	brcs	.+78     	; 0x7f5a <sync_post_eq>

	rjmp .
    7f0c:	00 c0       	rjmp	.+0      	; 0x7f0e <sync_eq+0x6>
	rjmp .
    7f0e:	00 c0       	rjmp	.+0      	; 0x7f10 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f10:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7f12:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7f14:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7f16:	16 f4       	brtc	.+4      	; 0x7f1c <sync_eq_skip>
	
	call update_sound
    7f18:	0e 94 4c 40 	call	0x8098	; 0x8098 <update_sound>

00007f1c <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7f1c:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7f1e:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7f22:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7f24:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7f28:	9f c0       	rjmp	.+318    	; 0x8068 <sync_end>

00007f2a <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7f2a:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7f2c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7f2e:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7f30:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    7f34:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7f36:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7f38:	00 f0       	brcs	.+0      	; 0x7f3a <__vector_14+0x10>

	cpi ZL,2
    7f3a:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7f3c:	00 f0       	brcs	.+0      	; 0x7f3e <__vector_14+0x14>

	cpi ZL,3
    7f3e:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    7f40:	00 f0       	brcs	.+0      	; 0x7f42 <__vector_14+0x18>

	cpi ZL,4
    7f42:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    7f44:	00 f0       	brcs	.+0      	; 0x7f46 <__vector_14+0x1c>

	cpi ZL,5
    7f46:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7f48:	00 f0       	brcs	.+0      	; 0x7f4a <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7f4a:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7f4c:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7f4e:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7f52:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7f54:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7f56:	ef 91       	pop	r30
	reti
    7f58:	18 95       	reti

00007f5a <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7f5a:	00 c0       	rjmp	.+0      	; 0x7f5c <sync_post_eq+0x2>

	bst ZL,0
    7f5c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f5e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7f60:	26 f4       	brtc	.+8      	; 0x7f6a <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7f62:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7f64:	0e 94 4c 40 	call	0x8098	; 0x8098 <update_sound>
	rjmp sync_pre_eq_cont
    7f68:	05 c0       	rjmp	.+10     	; 0x7f74 <sync_pre_eq_cont>

00007f6a <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7f6a:	e5 e1       	ldi	r30, 0x15	; 21
    7f6c:	ea 95       	dec	r30
    7f6e:	f1 f7       	brne	.-4      	; 0x7f6c <sync_post_eq_no_sound_update+0x2>
    7f70:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7f72:	28 9a       	sbi	0x05, 0	; 5

00007f74 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7f74:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    7f78:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7f7a:	09 f0       	breq	.+2      	; 0x7f7e <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7f7c:	75 c0       	rjmp	.+234    	; 0x8068 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7f7e:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7f80:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    7f84:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7f86:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    7f8a:	6e c0       	rjmp	.+220    	; 0x8068 <sync_end>

00007f8c <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7f8c:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7f8e:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7f92:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7f94:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7f98:	00 c0       	rjmp	.+0      	; 0x7f9a <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7f9a:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7f9c:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7f9e:	00 c0       	rjmp	.+0      	; 0x7fa0 <sync_hsync+0x14>
	call update_sound
    7fa0:	0e 94 4c 40 	call	0x8098	; 0x8098 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7fa4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7fa6:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    7faa:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7fac:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    7fb0:	ef 17       	cp	r30, r31
	brsh no_render
    7fb2:	d0 f4       	brcc	.+52     	; 0x7fe8 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7fb4:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7fb6:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    7fba:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7fbc:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    7fc0:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7fc2:	ef 17       	cp	r30, r31
	brlo no_render
    7fc4:	88 f0       	brcs	.+34     	; 0x7fe8 <no_render>

	;push r1-r29
	ldi ZL,29
    7fc6:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7fc8:	ff 27       	eor	r31, r31

00007fca <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7fca:	00 80       	ld	r0, Z
	push r0
    7fcc:	0f 92       	push	r0
	dec ZL
    7fce:	ea 95       	dec	r30
	brne push_loop	
    7fd0:	e1 f7       	brne	.-8      	; 0x7fca <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7fd2:	06 e0       	ldi	r16, 0x06	; 6
    7fd4:	0a 95       	dec	r16
    7fd6:	f1 f7       	brne	.-4      	; 0x7fd4 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7fd8:	0e 94 81 3d 	call	0x7b02	; 0x7b02 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7fdc:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7fde:	ff 27       	eor	r31, r31

00007fe0 <pop_loop>:
pop_loop:
	pop r0
    7fe0:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7fe2:	01 92       	st	Z+, r0
	cpi ZL,30
    7fe4:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7fe6:	e0 f3       	brcs	.-8      	; 0x7fe0 <pop_loop>

00007fe8 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7fe8:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    7fec:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7fee:	09 f0       	breq	.+2      	; 0x7ff2 <no_render+0xa>
	rjmp sync_end
    7ff0:	3b c0       	rjmp	.+118    	; 0x8068 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7ff2:	2f 93       	push	r18
	push r19
    7ff4:	3f 93       	push	r19
	push r20
    7ff6:	4f 93       	push	r20
	push r21
    7ff8:	5f 93       	push	r21
	push r22
    7ffa:	6f 93       	push	r22
	push r23
    7ffc:	7f 93       	push	r23
	push r24
    7ffe:	8f 93       	push	r24
	push r25
    8000:	9f 93       	push	r25
	push r26
    8002:	af 93       	push	r26
	push r27
    8004:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8006:	78 94       	sei
	clr r1
    8008:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    800a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    800c:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8010:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    8012:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    8016:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    801a:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    801e:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    8022:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8026:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    802a:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    802e:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8030:	f1 05       	cpc	r31, r1
	breq .+2 
    8032:	09 f0       	breq	.+2      	; 0x8036 <no_render+0x4e>
	icall
    8034:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8036:	0e 94 e1 41 	call	0x83c2	; 0x83c2 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    803a:	0e 94 6a 4f 	call	0x9ed4	; 0x9ed4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    803e:	0e 94 46 40 	call	0x808c	; 0x808c <process_music>
	clr r1
    8042:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    8044:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    8048:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    804c:	e1 15       	cp	r30, r1
	cpc ZH,r1
    804e:	f1 05       	cpc	r31, r1
	breq .+2 
    8050:	09 f0       	breq	.+2      	; 0x8054 <no_render+0x6c>
	icall
    8052:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    8054:	bf 91       	pop	r27
	pop r26
    8056:	af 91       	pop	r26
	pop r25
    8058:	9f 91       	pop	r25
	pop r24
    805a:	8f 91       	pop	r24
	pop r23
    805c:	7f 91       	pop	r23
	pop r22
    805e:	6f 91       	pop	r22
	pop r21
    8060:	5f 91       	pop	r21
	pop r20
    8062:	4f 91       	pop	r20
	pop r19
    8064:	3f 91       	pop	r19
	pop r18
    8066:	2f 91       	pop	r18

00008068 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    8068:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    806a:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    806c:	ff 91       	pop	r31
	pop ZL
    806e:	ef 91       	pop	r30
	pop r1
    8070:	1f 90       	pop	r1
	pop r0
    8072:	0f 90       	pop	r0
	reti
    8074:	18 95       	reti

00008076 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    8076:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    8078:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    807a:	00 c0       	rjmp	.+0      	; 0x807c <hsync_pulse+0x6>
	call update_sound
    807c:	0e 94 4c 40 	call	0x8098	; 0x8098 <update_sound>

	lds ZL,sync_pulse
    8080:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    8084:	ea 95       	dec	r30
	sts sync_pulse,ZL
    8086:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    808a:	08 95       	ret

0000808c <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    808c:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    8090:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    8092:	0e 94 97 44 	call	0x892e	; 0x892e <ProcessMusic>
#endif

	ret
    8096:	08 95       	ret

00008098 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    8098:	0f 93       	push	r16
	push r17
    809a:	1f 93       	push	r17
	push r18
    809c:	2f 93       	push	r18
	push r28
    809e:	cf 93       	push	r28
	push r29
    80a0:	df 93       	push	r29

	mov r18,ZL
    80a2:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    80a4:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    80a8:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    80ac:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    80ae:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    80b2:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    80b6:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    80ba:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    80bc:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    80be:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    80c2:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    80c6:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    80ca:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    80cc:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    80ce:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    80d0:	d0 2d       	mov	r29, r0
	nop
    80d2:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    80d4:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    80d8:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    80dc:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    80de:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    80e2:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    80e6:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    80ea:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    80ec:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    80ee:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    80f2:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    80f6:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    80fa:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    80fc:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    80fe:	20 ff       	sbrs	r18, 0
	rjmp .
    8100:	00 c0       	rjmp	.+0      	; 0x8102 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8102:	01 03       	mulsu	r16, r17
	clr r0
    8104:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8106:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8108:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    810a:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    810c:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    8110:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    8114:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8116:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    811a:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    811e:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    8122:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8124:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8126:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    812a:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    812e:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    8132:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8134:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8136:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    8138:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    813a:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    813e:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    8142:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    8146:	ea 95       	dec	r30
	brpl ch4_no_shift	
    8148:	92 f4       	brpl	.+36     	; 0x816e <ch4_no_shift>

	lds ZH,tr4_params
    814a:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    814e:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    8150:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    8152:	00 2e       	mov	r0, r16
	lsr r0
    8154:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    8156:	00 26       	eor	r0, r16
	bst r0,0
    8158:	00 fa       	bst	r0, 0
	lsr r17
    815a:	16 95       	lsr	r17
	ror r16
    815c:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    815e:	16 f9       	bld	r17, 6
	sbrs ZH,0
    8160:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    8162:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    8164:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    8168:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    816c:	03 c0       	rjmp	.+6      	; 0x8174 <ch4_end>

0000816e <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    816e:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    8170:	1a 95       	dec	r17
	brne .-4
    8172:	f1 f7       	brne	.-4      	; 0x8170 <ch4_no_shift+0x2>

00008174 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    8174:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    8178:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    817a:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    817c:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    817e:	21 ff       	sbrs	r18, 1
	rjmp .
    8180:	00 c0       	rjmp	.+0      	; 0x8182 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    8182:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    8184:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    8186:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    818a:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    818c:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    818e:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    8190:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    8192:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    8196:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    819a:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    819c:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    81a0:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    81a4:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    81a8:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    81aa:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    81ae:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    81b0:	f0 1f       	adc	r31, r16

	movw r16,ZL
    81b2:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    81b4:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    81b8:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    81bc:	00 19       	sub	r16, r0
	sbc r17,r1
    81be:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    81c0:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    81c4:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    81c8:	e0 15       	cp	r30, r0
	cpc ZH,r1
    81ca:	f1 05       	cpc	r31, r1
	brlo .+2
    81cc:	08 f0       	brcs	.+2      	; 0x81d0 <ch4_end+0x5c>
	movw ZL,r16
    81ce:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    81d0:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    81d4:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    81d8:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    81da:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    81de:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    81e0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    81e2:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    81e4:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    81e6:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    81e8:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    81ea:	d0 05       	cpc	r29, r0
	brlt .+2
    81ec:	0c f0       	brlt	.+2      	; 0x81f0 <ch4_end+0x7c>
	ldi r28,127
    81ee:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    81f0:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    81f2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    81f4:	d0 05       	cpc	r29, r0
	brge .+2
    81f6:	0c f4       	brge	.+2      	; 0x81fa <ch4_end+0x86>
	ldi r28,-128
    81f8:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    81fa:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    81fc:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    8200:	df 91       	pop	r29
	pop r28
    8202:	cf 91       	pop	r28
	pop r18
    8204:	2f 91       	pop	r18
	pop r17
    8206:	1f 91       	pop	r17
	pop r16
    8208:	0f 91       	pop	r16
	
	ret
    820a:	08 95       	ret

0000820c <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    820c:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    8210:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    8214:	08 95       	ret

00008216 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8216:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8218:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    821a:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    821c:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    821e:	68 e1       	ldi	r22, 0x18	; 24

00008220 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8220:	6d 93       	st	X+, r22
	sbiw r30,1
    8222:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8224:	e9 f7       	brne	.-6      	; 0x8220 <fill_vram_loop>

	clr r1
    8226:	11 24       	eor	r1, r1

	ret
    8228:	08 95       	ret

0000822a <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    822a:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    822e:	45 0f       	add	r20, r21
	rjmp SetTile	
    8230:	00 c0       	rjmp	.+0      	; 0x8232 <SetTile>

00008232 <SetTile>:

	ret

#else

	clr r25
    8232:	99 27       	eor	r25, r25
	clr r23	
    8234:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8236:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    8238:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    823a:	08 0e       	add	r0, r24
	adc r1,r25
    823c:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    823e:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    8240:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    8242:	a0 0d       	add	r26, r0
	adc XH,r1
    8244:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    8246:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    8248:	4c 93       	st	X, r20

	clr r1
    824a:	11 24       	eor	r1, r1

	ret
    824c:	08 95       	ret

0000824e <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    824e:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    8252:	08 95       	ret

00008254 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    8254:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    8258:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    825c:	08 95       	ret

0000825e <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    825e:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    8262:	81 70       	andi	r24, 0x01	; 1
	ret
    8264:	08 95       	ret

00008266 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8266:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    826a:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    826c:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    8270:	08 95       	ret

00008272 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8272:	88 23       	and	r24, r24
	brne rj_p2
    8274:	29 f4       	brne	.+10     	; 0x8280 <rj_p2>
		
	lds r24,joypad1_status_lo
    8276:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    827a:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    827e:	08 95       	ret

00008280 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8280:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    8284:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    8288:	08 95       	ret

0000828a <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    828a:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    828c:	7a 95       	dec	r23
	brne .-4 ;~1 us
    828e:	f1 f7       	brne	.-4      	; 0x828c <WaitUs+0x2>
	nop
    8290:	00 00       	nop
	sbiw r24,1
    8292:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8294:	d1 f7       	brne	.-12     	; 0x828a <WaitUs>

	ret
    8296:	08 95       	ret

00008298 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    8298:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    829a:	fe cf       	rjmp	.-4      	; 0x8298 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    829c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    829e:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    82a0:	60 bd       	out	0x20, r22	; 32
   cli
    82a2:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    82a4:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    82a6:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    82a8:	78 94       	sei
   ret
    82aa:	08 95       	ret

000082ac <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    82ac:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    82ae:	fe cf       	rjmp	.-4      	; 0x82ac <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    82b0:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    82b2:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    82b4:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    82b6:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    82b8:	80 b5       	in	r24, 0x20	; 32
   sei
    82ba:	78 94       	sei
   ret
    82bc:	08 95       	ret

000082be <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    82be:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    82c0:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    82c4:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    82c8:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    82ca:	80 93 81 00 	sts	0x0081, r24

		cli
    82ce:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    82d0:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    82d2:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    82d6:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    82d8:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    82dc:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    82de:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    82e2:	90 93 60 00 	sts	0x0060, r25
	
		sei
    82e6:	78 94       	sei

000082e8 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    82e8:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    82ec:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    82ee:	e0 f3       	brcs	.-8      	; 0x82e8 <wait>

		ret
    82f0:	08 95       	ret

000082f2 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    82f2:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    82f6:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    82fa:	08 95       	ret

000082fc <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    82fc:	0f 93       	push	r16
		push r17
    82fe:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    8300:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8302:	0f 93       	push	r16

		lds r16,sync_pulse
    8304:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    8308:	03 95       	inc	r16
		sts sync_pulse,r16
    830a:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    830e:	00 fd       	sbrc	r16, 0
		rjmp 1f
    8310:	08 c0       	rjmp	.+16     	; 0x8322 <__vector_8+0x26>
		lds r17,random_value
    8312:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8316:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    831a:	10 27       	eor	r17, r16
		sts random_value,r17
    831c:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    8320:	07 c0       	rjmp	.+14     	; 0x8330 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    8322:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8326:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    832a:	10 27       	eor	r17, r16
		sts random_value+1,r17
    832c:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    8330:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    8332:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    8336:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    8338:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    833a:	1f 91       	pop	r17
		pop r16
    833c:	0f 91       	pop	r16
		reti
    833e:	18 95       	reti

00008340 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    8340:	98 e0       	ldi	r25, 0x08	; 8
    8342:	88 e1       	ldi	r24, 0x18	; 24
    8344:	0f b6       	in	r0, 0x3f	; 63
    8346:	f8 94       	cli
    8348:	a8 95       	wdr
    834a:	80 93 60 00 	sts	0x0060, r24
    834e:	0f be       	out	0x3f, r0	; 63
    8350:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8354:	ff cf       	rjmp	.-2      	; 0x8354 <SoftReset+0x14>

00008356 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8356:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8358:	c8 95       	lpm
    835a:	c8 95       	lpm
		Wait200ns();
    835c:	c8 95       	lpm
    835e:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    8360:	12 98       	cbi	0x02, 2	; 2
    8362:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8364:	80 e0       	ldi	r24, 0x00	; 0
    8366:	90 e0       	ldi	r25, 0x00	; 0
    8368:	20 e0       	ldi	r18, 0x00	; 0
    836a:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    836c:	36 95       	lsr	r19
    836e:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    8370:	96 95       	lsr	r25
    8372:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8374:	c8 95       	lpm
    8376:	c8 95       	lpm
			Wait200ns();
    8378:	c8 95       	lpm
    837a:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    837c:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    837e:	00 9b       	sbis	0x00, 0	; 0
    8380:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8382:	01 9b       	sbis	0x00, 1	; 0
    8384:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8386:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8388:	c8 95       	lpm
    838a:	c8 95       	lpm
			Wait200ns();
    838c:	c8 95       	lpm
    838e:	c8 95       	lpm
    8390:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8392:	61 f7       	brne	.-40     	; 0x836c <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8394:	30 93 f2 0a 	sts	0x0AF2, r19
    8398:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    839c:	90 93 f6 0a 	sts	0x0AF6, r25
    83a0:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    83a4:	80 91 f1 0a 	lds	r24, 0x0AF1
    83a8:	90 91 f2 0a 	lds	r25, 0x0AF2
    83ac:	0f 97       	sbiw	r24, 0x0f	; 15
    83ae:	31 f0       	breq	.+12     	; 0x83bc <ReadButtons+0x66>
    83b0:	80 91 f5 0a 	lds	r24, 0x0AF5
    83b4:	90 91 f6 0a 	lds	r25, 0x0AF6
    83b8:	0f 97       	sbiw	r24, 0x0f	; 15
    83ba:	11 f4       	brne	.+4      	; 0x83c0 <ReadButtons+0x6a>
		SoftReset();
    83bc:	0e 94 a0 41 	call	0x8340	; 0x8340 <SoftReset>
    83c0:	08 95       	ret

000083c2 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    83c2:	10 92 3f 0b 	sts	0x0B3F, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    83c6:	00 99       	sbic	0x00, 0	; 0
    83c8:	03 c0       	rjmp	.+6      	; 0x83d0 <ReadControllers+0xe>
    83ca:	81 e0       	ldi	r24, 0x01	; 1
    83cc:	80 93 3f 0b 	sts	0x0B3F, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    83d0:	01 99       	sbic	0x00, 1	; 0
    83d2:	05 c0       	rjmp	.+10     	; 0x83de <ReadControllers+0x1c>
    83d4:	80 91 3f 0b 	lds	r24, 0x0B3F
    83d8:	82 60       	ori	r24, 0x02	; 2
    83da:	80 93 3f 0b 	sts	0x0B3F, r24
			
	//read the standard buttons
	ReadButtons();
    83de:	0c 94 ab 41 	jmp	0x8356	; 0x8356 <ReadButtons>

000083e2 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    83e2:	cf 93       	push	r28
    83e4:	df 93       	push	r29
    83e6:	c0 e0       	ldi	r28, 0x00	; 0
    83e8:	d0 e0       	ldi	r29, 0x00	; 0
    83ea:	fe 01       	movw	r30, r28
    83ec:	e2 56       	subi	r30, 0x62	; 98
    83ee:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    83f0:	64 91       	lpm	r22, Z
    83f2:	ce 01       	movw	r24, r28
    83f4:	0e 94 4c 41 	call	0x8298	; 0x8298 <WriteEeprom>
    83f8:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    83fa:	c0 32       	cpi	r28, 0x20	; 32
    83fc:	d1 05       	cpc	r29, r1
    83fe:	a9 f7       	brne	.-22     	; 0x83ea <FormatEeprom+0x8>
    8400:	c0 e2       	ldi	r28, 0x20	; 32
    8402:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8404:	6f ef       	ldi	r22, 0xFF	; 255
    8406:	ce 01       	movw	r24, r28
    8408:	0e 94 4c 41 	call	0x8298	; 0x8298 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    840c:	6f ef       	ldi	r22, 0xFF	; 255
    840e:	ce 01       	movw	r24, r28
    8410:	01 96       	adiw	r24, 0x01	; 1
    8412:	0e 94 4c 41 	call	0x8298	; 0x8298 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8416:	a0 96       	adiw	r28, 0x20	; 32
    8418:	c1 15       	cp	r28, r1
    841a:	88 e0       	ldi	r24, 0x08	; 8
    841c:	d8 07       	cpc	r29, r24
    841e:	91 f7       	brne	.-28     	; 0x8404 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    8420:	df 91       	pop	r29
    8422:	cf 91       	pop	r28
    8424:	08 95       	ret

00008426 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    8426:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    8428:	80 e0       	ldi	r24, 0x00	; 0
    842a:	90 e0       	ldi	r25, 0x00	; 0
    842c:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    8430:	c8 2f       	mov	r28, r24
    8432:	81 e0       	ldi	r24, 0x01	; 1
    8434:	90 e0       	ldi	r25, 0x00	; 0
    8436:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    843a:	28 2f       	mov	r18, r24
    843c:	30 e0       	ldi	r19, 0x00	; 0
    843e:	32 2f       	mov	r19, r18
    8440:	22 27       	eor	r18, r18
    8442:	2c 0f       	add	r18, r28
    8444:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8446:	81 e0       	ldi	r24, 0x01	; 1
    8448:	2a 35       	cpi	r18, 0x5A	; 90
    844a:	35 45       	sbci	r19, 0x55	; 85
    844c:	09 f0       	breq	.+2      	; 0x8450 <isEepromFormatted+0x2a>
    844e:	80 e0       	ldi	r24, 0x00	; 0
}
    8450:	cf 91       	pop	r28
    8452:	08 95       	ret

00008454 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8454:	cf 92       	push	r12
    8456:	df 92       	push	r13
    8458:	ef 92       	push	r14
    845a:	ff 92       	push	r15
    845c:	0f 93       	push	r16
    845e:	1f 93       	push	r17
    8460:	cf 93       	push	r28
    8462:	df 93       	push	r29
    8464:	1f 92       	push	r1
    8466:	cd b7       	in	r28, 0x3d	; 61
    8468:	de b7       	in	r29, 0x3e	; 62
    846a:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    846c:	0e 94 13 42 	call	0x8426	; 0x8426 <isEepromFormatted>
    8470:	88 23       	and	r24, r24
    8472:	09 f4       	brne	.+2      	; 0x8476 <EepromWriteBlock+0x22>
    8474:	4d c0       	rjmp	.+154    	; 0x8510 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8476:	f6 01       	movw	r30, r12
    8478:	80 81       	ld	r24, Z
    847a:	91 81       	ldd	r25, Z+1	; 0x01
    847c:	8f 3f       	cpi	r24, 0xFF	; 255
    847e:	ff ef       	ldi	r31, 0xFF	; 255
    8480:	9f 07       	cpc	r25, r31
    8482:	09 f4       	brne	.+2      	; 0x8486 <EepromWriteBlock+0x32>
    8484:	47 c0       	rjmp	.+142    	; 0x8514 <EepromWriteBlock+0xc0>
    8486:	8a 35       	cpi	r24, 0x5A	; 90
    8488:	95 45       	sbci	r25, 0x55	; 85
    848a:	09 f4       	brne	.+2      	; 0x848e <EepromWriteBlock+0x3a>
    848c:	43 c0       	rjmp	.+134    	; 0x8514 <EepromWriteBlock+0xc0>
    848e:	00 e2       	ldi	r16, 0x20	; 32
    8490:	10 e0       	ldi	r17, 0x00	; 0
    8492:	f1 2c       	mov	r15, r1
    8494:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8496:	c8 01       	movw	r24, r16
    8498:	49 83       	std	Y+1, r20	; 0x01
    849a:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    849e:	e8 2e       	mov	r14, r24
    84a0:	c8 01       	movw	r24, r16
    84a2:	01 96       	adiw	r24, 0x01	; 1
    84a4:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    84a8:	28 2f       	mov	r18, r24
    84aa:	30 e0       	ldi	r19, 0x00	; 0
    84ac:	32 2f       	mov	r19, r18
    84ae:	22 27       	eor	r18, r18
    84b0:	c9 01       	movw	r24, r18
    84b2:	8e 0d       	add	r24, r14
    84b4:	91 1d       	adc	r25, r1
		if(id==block->id){
    84b6:	f6 01       	movw	r30, r12
    84b8:	20 81       	ld	r18, Z
    84ba:	31 81       	ldd	r19, Z+1	; 0x01
    84bc:	49 81       	ldd	r20, Y+1	; 0x01
    84be:	82 17       	cp	r24, r18
    84c0:	93 07       	cpc	r25, r19
    84c2:	19 f4       	brne	.+6      	; 0x84ca <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    84c4:	ff 20       	and	r15, r15
    84c6:	89 f0       	breq	.+34     	; 0x84ea <EepromWriteBlock+0x96>
    84c8:	0c c0       	rjmp	.+24     	; 0x84e2 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    84ca:	01 96       	adiw	r24, 0x01	; 1
    84cc:	19 f4       	brne	.+6      	; 0x84d4 <EepromWriteBlock+0x80>
    84ce:	f1 10       	cpse	r15, r1
    84d0:	01 c0       	rjmp	.+2      	; 0x84d4 <EepromWriteBlock+0x80>
    84d2:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    84d4:	4f 5f       	subi	r20, 0xFF	; 255
    84d6:	00 5e       	subi	r16, 0xE0	; 224
    84d8:	1f 4f       	sbci	r17, 0xFF	; 255
    84da:	40 34       	cpi	r20, 0x40	; 64
    84dc:	e1 f6       	brne	.-72     	; 0x8496 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    84de:	ff 20       	and	r15, r15
    84e0:	d9 f0       	breq	.+54     	; 0x8518 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    84e2:	20 e2       	ldi	r18, 0x20	; 32
    84e4:	f2 9e       	mul	r15, r18
    84e6:	80 01       	movw	r16, r0
    84e8:	11 24       	eor	r1, r1
    84ea:	76 01       	movw	r14, r12
    84ec:	80 e2       	ldi	r24, 0x20	; 32
    84ee:	e8 0e       	add	r14, r24
    84f0:	f1 1c       	adc	r15, r1
    84f2:	0c 19       	sub	r16, r12
    84f4:	1d 09       	sbc	r17, r13
    84f6:	c6 01       	movw	r24, r12
    84f8:	80 0f       	add	r24, r16
    84fa:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    84fc:	f6 01       	movw	r30, r12
    84fe:	61 91       	ld	r22, Z+
    8500:	6f 01       	movw	r12, r30
    8502:	0e 94 4c 41 	call	0x8298	; 0x8298 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    8506:	ce 14       	cp	r12, r14
    8508:	df 04       	cpc	r13, r15
    850a:	a9 f7       	brne	.-22     	; 0x84f6 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    850c:	80 e0       	ldi	r24, 0x00	; 0
    850e:	05 c0       	rjmp	.+10     	; 0x851a <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8510:	84 e0       	ldi	r24, 0x04	; 4
    8512:	03 c0       	rjmp	.+6      	; 0x851a <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    8514:	81 e0       	ldi	r24, 0x01	; 1
    8516:	01 c0       	rjmp	.+2      	; 0x851a <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8518:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    851a:	0f 90       	pop	r0
    851c:	df 91       	pop	r29
    851e:	cf 91       	pop	r28
    8520:	1f 91       	pop	r17
    8522:	0f 91       	pop	r16
    8524:	ff 90       	pop	r15
    8526:	ef 90       	pop	r14
    8528:	df 90       	pop	r13
    852a:	cf 90       	pop	r12
    852c:	08 95       	ret

0000852e <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    852e:	df 92       	push	r13
    8530:	ef 92       	push	r14
    8532:	ff 92       	push	r15
    8534:	0f 93       	push	r16
    8536:	1f 93       	push	r17
    8538:	cf 93       	push	r28
    853a:	df 93       	push	r29
    853c:	7c 01       	movw	r14, r24
    853e:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    8540:	0e 94 13 42 	call	0x8426	; 0x8426 <isEepromFormatted>
    8544:	88 23       	and	r24, r24
    8546:	89 f1       	breq	.+98     	; 0x85aa <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8548:	8f ef       	ldi	r24, 0xFF	; 255
    854a:	e8 16       	cp	r14, r24
    854c:	f8 06       	cpc	r15, r24
    854e:	79 f1       	breq	.+94     	; 0x85ae <EepromReadBlock+0x80>
    8550:	00 e0       	ldi	r16, 0x00	; 0
    8552:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8554:	c8 01       	movw	r24, r16
    8556:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    855a:	d8 2e       	mov	r13, r24
    855c:	c8 01       	movw	r24, r16
    855e:	01 96       	adiw	r24, 0x01	; 1
    8560:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    8564:	28 2f       	mov	r18, r24
    8566:	30 e0       	ldi	r19, 0x00	; 0
    8568:	32 2f       	mov	r19, r18
    856a:	22 27       	eor	r18, r18
    856c:	2d 0d       	add	r18, r13
    856e:	31 1d       	adc	r19, r1
		if(id==blockId){
    8570:	2e 15       	cp	r18, r14
    8572:	3f 05       	cpc	r19, r15
    8574:	39 f4       	brne	.+14     	; 0x8584 <EepromReadBlock+0x56>
    8576:	7e 01       	movw	r14, r28
    8578:	80 e2       	ldi	r24, 0x20	; 32
    857a:	e8 0e       	add	r14, r24
    857c:	f1 1c       	adc	r15, r1
    857e:	0c 1b       	sub	r16, r28
    8580:	1d 0b       	sbc	r17, r29
    8582:	08 c0       	rjmp	.+16     	; 0x8594 <EepromReadBlock+0x66>
    8584:	00 5e       	subi	r16, 0xE0	; 224
    8586:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    8588:	01 15       	cp	r16, r1
    858a:	84 e0       	ldi	r24, 0x04	; 4
    858c:	18 07       	cpc	r17, r24
    858e:	11 f7       	brne	.-60     	; 0x8554 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    8590:	83 e0       	ldi	r24, 0x03	; 3
    8592:	0e c0       	rjmp	.+28     	; 0x85b0 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    8594:	ce 01       	movw	r24, r28
    8596:	80 0f       	add	r24, r16
    8598:	91 1f       	adc	r25, r17
    859a:	0e 94 56 41 	call	0x82ac	; 0x82ac <ReadEeprom>
    859e:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    85a0:	ce 15       	cp	r28, r14
    85a2:	df 05       	cpc	r29, r15
    85a4:	b9 f7       	brne	.-18     	; 0x8594 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    85a6:	80 e0       	ldi	r24, 0x00	; 0
    85a8:	03 c0       	rjmp	.+6      	; 0x85b0 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    85aa:	84 e0       	ldi	r24, 0x04	; 4
    85ac:	01 c0       	rjmp	.+2      	; 0x85b0 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    85ae:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    85b0:	df 91       	pop	r29
    85b2:	cf 91       	pop	r28
    85b4:	1f 91       	pop	r17
    85b6:	0f 91       	pop	r16
    85b8:	ff 90       	pop	r15
    85ba:	ef 90       	pop	r14
    85bc:	df 90       	pop	r13
    85be:	08 95       	ret

000085c0 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    85c0:	fc 01       	movw	r30, r24
    85c2:	45 87       	std	Z+13, r20	; 0x0d
    85c4:	08 95       	ret

000085c6 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    85c6:	e2 e0       	ldi	r30, 0x02	; 2
    85c8:	fb e0       	ldi	r31, 0x0B	; 11
    85ca:	81 e0       	ldi	r24, 0x01	; 1
    85cc:	91 e0       	ldi	r25, 0x01	; 1
    85ce:	95 8b       	std	Z+21, r25	; 0x15
    85d0:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    85d2:	43 8b       	std	Z+19, r20	; 0x13
    85d4:	08 95       	ret

000085d6 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    85d6:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    85d8:	90 81       	ld	r25, Z
    85da:	9f 75       	andi	r25, 0x5F	; 95
    85dc:	90 83       	st	Z, r25
    85de:	08 95       	ret

000085e0 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    85e0:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    85e2:	90 81       	ld	r25, Z
    85e4:	90 64       	ori	r25, 0x40	; 64
    85e6:	90 83       	st	Z, r25
    85e8:	08 95       	ret

000085ea <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    85ea:	fc 01       	movw	r30, r24
    85ec:	44 87       	std	Z+12, r20	; 0x0c
    85ee:	08 95       	ret

000085f0 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    85f0:	fc 01       	movw	r30, r24
    85f2:	47 83       	std	Z+7, r20	; 0x07
    85f4:	08 95       	ret

000085f6 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    85f6:	fc 01       	movw	r30, r24
    85f8:	40 87       	std	Z+8, r20	; 0x08
    85fa:	08 95       	ret

000085fc <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    85fc:	1f 93       	push	r17
    85fe:	cf 93       	push	r28
    8600:	df 93       	push	r29
    8602:	ec 01       	movw	r28, r24
    8604:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8606:	29 81       	ldd	r18, Y+1	; 0x01
    8608:	30 e0       	ldi	r19, 0x00	; 0
    860a:	f9 01       	movw	r30, r18
    860c:	ee 0f       	add	r30, r30
    860e:	ff 1f       	adc	r31, r31
    8610:	e8 5f       	subi	r30, 0xF8	; 248
    8612:	f1 47       	sbci	r31, 0x71	; 113
    8614:	65 91       	lpm	r22, Z+
    8616:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8618:	f9 01       	movw	r30, r18
    861a:	e4 0f       	add	r30, r20
    861c:	f1 1d       	adc	r31, r1
    861e:	47 fd       	sbrc	r20, 7
    8620:	fa 95       	dec	r31
    8622:	ee 0f       	add	r30, r30
    8624:	ff 1f       	adc	r31, r31
    8626:	e8 5f       	subi	r30, 0xF8	; 248
    8628:	f1 47       	sbci	r31, 0x71	; 113
    862a:	85 91       	lpm	r24, Z+
    862c:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    862e:	86 1b       	sub	r24, r22
    8630:	97 0b       	sbc	r25, r23
    8632:	60 91 47 0b 	lds	r22, 0x0B47
    8636:	70 e0       	ldi	r23, 0x00	; 0
    8638:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
	if(delta==0)delta++;
    863c:	61 15       	cp	r22, r1
    863e:	71 05       	cpc	r23, r1
    8640:	11 f4       	brne	.+4      	; 0x8646 <PatchCommand11+0x4a>
    8642:	61 e0       	ldi	r22, 0x01	; 1
    8644:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    8646:	86 e0       	ldi	r24, 0x06	; 6
    8648:	18 9f       	mul	r17, r24
    864a:	f0 01       	movw	r30, r0
    864c:	11 24       	eor	r1, r1
    864e:	ee 5f       	subi	r30, 0xFE	; 254
    8650:	f4 4f       	sbci	r31, 0xF4	; 244
    8652:	81 81       	ldd	r24, Z+1	; 0x01
    8654:	92 81       	ldd	r25, Z+2	; 0x02
    8656:	86 0f       	add	r24, r22
    8658:	97 1f       	adc	r25, r23
    865a:	92 83       	std	Z+2, r25	; 0x02
    865c:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    865e:	7b 83       	std	Y+3, r23	; 0x03
    8660:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    8662:	88 81       	ld	r24, Y
    8664:	88 60       	ori	r24, 0x08	; 8
    8666:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8668:	89 81       	ldd	r24, Y+1	; 0x01
    866a:	48 0f       	add	r20, r24
    866c:	4c 83       	std	Y+4, r20	; 0x04
}
    866e:	df 91       	pop	r29
    8670:	cf 91       	pop	r28
    8672:	1f 91       	pop	r17
    8674:	08 95       	ret

00008676 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    8676:	40 93 47 0b 	sts	0x0B47, r20
    867a:	08 95       	ret

0000867c <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    867c:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    867e:	64 2f       	mov	r22, r20
    8680:	0c 94 d8 46 	jmp	0x8db0	; 0x8db0 <SetMixerWave>

00008684 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    8684:	fc 01       	movw	r30, r24
    8686:	86 2f       	mov	r24, r22
	track->note+=param;
    8688:	91 81       	ldd	r25, Z+1	; 0x01
    868a:	64 2f       	mov	r22, r20
    868c:	69 0f       	add	r22, r25
    868e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    8690:	0c 94 c1 46 	jmp	0x8d82	; 0x8d82 <SetMixerNote>

00008694 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    8694:	fc 01       	movw	r30, r24
    8696:	86 2f       	mov	r24, r22
	track->note-=param;
    8698:	91 81       	ldd	r25, Z+1	; 0x01
    869a:	69 2f       	mov	r22, r25
    869c:	64 1b       	sub	r22, r20
    869e:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    86a0:	0c 94 c1 46 	jmp	0x8d82	; 0x8d82 <SetMixerNote>

000086a4 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    86a4:	0f 93       	push	r16
    86a6:	1f 93       	push	r17
    86a8:	cf 93       	push	r28
    86aa:	df 93       	push	r29
    86ac:	1f 92       	push	r1
    86ae:	cd b7       	in	r28, 0x3d	; 61
    86b0:	de b7       	in	r29, 0x3e	; 62
    86b2:	8c 01       	movw	r16, r24
    86b4:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    86b6:	64 2f       	mov	r22, r20
    86b8:	49 83       	std	Y+1, r20	; 0x01
    86ba:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <SetMixerNote>
	track->note=param;
    86be:	49 81       	ldd	r20, Y+1	; 0x01
    86c0:	f8 01       	movw	r30, r16
    86c2:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    86c4:	80 81       	ld	r24, Z
    86c6:	87 7f       	andi	r24, 0xF7	; 247
    86c8:	80 83       	st	Z, r24
}
    86ca:	0f 90       	pop	r0
    86cc:	df 91       	pop	r29
    86ce:	cf 91       	pop	r28
    86d0:	1f 91       	pop	r17
    86d2:	0f 91       	pop	r16
    86d4:	08 95       	ret

000086d6 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    86d6:	90 93 b3 0b 	sts	0x0BB3, r25
    86da:	80 93 b2 0b 	sts	0x0BB2, r24

	masterVolume=DEFAULT_MASTER_VOL;
    86de:	8f e6       	ldi	r24, 0x6F	; 111
    86e0:	80 93 b5 0b 	sts	0x0BB5, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    86e4:	10 92 00 0b 	sts	0x0B00, r1
    86e8:	e0 e5       	ldi	r30, 0x50	; 80
    86ea:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    86ec:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    86ee:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    86f0:	28 e1       	ldi	r18, 0x18	; 24
    86f2:	df 01       	movw	r26, r30
    86f4:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    86f6:	8c 93       	st	X, r24
    86f8:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    86fa:	1c 92       	st	X, r1
    86fc:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    86fe:	9c 93       	st	X, r25
    8700:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8702:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    8704:	10 82       	st	Z, r1
    8706:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    8708:	2c 93       	st	X, r18
    870a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    870c:	8c 93       	st	X, r24
    870e:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8710:	3b e0       	ldi	r19, 0x0B	; 11
    8712:	ee 3b       	cpi	r30, 0xBE	; 190
    8714:	f3 07       	cpc	r31, r19
    8716:	69 f7       	brne	.-38     	; 0x86f2 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8718:	08 95       	ret

0000871a <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    871a:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    871c:	ed 91       	ld	r30, X+
    871e:	fc 91       	ld	r31, X
    8720:	11 97       	sbiw	r26, 0x01	; 1
    8722:	9f 01       	movw	r18, r30
    8724:	2f 5f       	subi	r18, 0xFF	; 255
    8726:	3f 4f       	sbci	r19, 0xFF	; 255
    8728:	11 96       	adiw	r26, 0x01	; 1
    872a:	3c 93       	st	X, r19
    872c:	2e 93       	st	-X, r18
    872e:	e4 91       	lpm	r30, Z
    8730:	e7 fd       	sbrc	r30, 7
    8732:	03 c0       	rjmp	.+6      	; 0x873a <ReadVarLen+0x20>
    8734:	8e 2f       	mov	r24, r30
    8736:	90 e0       	ldi	r25, 0x00	; 0
    8738:	08 95       	ret
    {
       value &= 0x7F;
    873a:	ef 77       	andi	r30, 0x7F	; 127
    873c:	8e 2f       	mov	r24, r30
    873e:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8740:	96 95       	lsr	r25
    8742:	98 2f       	mov	r25, r24
    8744:	88 27       	eor	r24, r24
    8746:	97 95       	ror	r25
    8748:	87 95       	ror	r24
    874a:	2f 5f       	subi	r18, 0xFF	; 255
    874c:	3f 4f       	sbci	r19, 0xFF	; 255
    874e:	f9 01       	movw	r30, r18
    8750:	31 97       	sbiw	r30, 0x01	; 1
    8752:	e4 91       	lpm	r30, Z
    8754:	4e 2f       	mov	r20, r30
    8756:	4f 77       	andi	r20, 0x7F	; 127
    8758:	84 0f       	add	r24, r20
    875a:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    875c:	e7 fd       	sbrc	r30, 7
    875e:	f0 cf       	rjmp	.-32     	; 0x8740 <ReadVarLen+0x26>
    8760:	2d 93       	st	X+, r18
    8762:	3c 93       	st	X, r19
    }


    return value;
}
    8764:	08 95       	ret

00008766 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    8766:	cf 92       	push	r12
    8768:	df 92       	push	r13
    876a:	ff 92       	push	r15
    876c:	0f 93       	push	r16
    876e:	1f 93       	push	r17
    8770:	cf 93       	push	r28
    8772:	df 93       	push	r29
    8774:	1f 92       	push	r1
    8776:	cd b7       	in	r28, 0x3d	; 61
    8778:	de b7       	in	r29, 0x3e	; 62
    877a:	18 2f       	mov	r17, r24
    877c:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    877e:	c8 2e       	mov	r12, r24
    8780:	d1 2c       	mov	r13, r1
    8782:	36 e1       	ldi	r19, 0x16	; 22
    8784:	83 9f       	mul	r24, r19
    8786:	f0 01       	movw	r30, r0
    8788:	11 24       	eor	r1, r1
    878a:	ee 5b       	subi	r30, 0xBE	; 190
    878c:	f4 4f       	sbci	r31, 0xF4	; 244
    878e:	80 81       	ld	r24, Z
    8790:	f8 2e       	mov	r15, r24
    8792:	ff 1c       	adc	r15, r15
    8794:	ff 24       	eor	r15, r15
    8796:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    8798:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    879a:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    879c:	9f ef       	ldi	r25, 0xFF	; 255
    879e:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    87a0:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    87a2:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    87a4:	87 7b       	andi	r24, 0xB7	; 183
    87a6:	80 62       	ori	r24, 0x20	; 32
    87a8:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    87aa:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    87ac:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    87ae:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    87b0:	13 30       	cpi	r17, 0x03	; 3
    87b2:	69 f4       	brne	.+26     	; 0x87ce <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    87b4:	f1 10       	cpse	r15, r1
    87b6:	01 c0       	rjmp	.+2      	; 0x87ba <TriggerCommon+0x54>
    87b8:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    87ba:	81 e0       	ldi	r24, 0x01	; 1
    87bc:	91 e0       	ldi	r25, 0x01	; 1
    87be:	90 93 17 0b 	sts	0x0B17, r25
    87c2:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    87c6:	81 e0       	ldi	r24, 0x01	; 1
    87c8:	80 93 15 0b 	sts	0x0B15, r24
    87cc:	3c c0       	rjmp	.+120    	; 0x8846 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    87ce:	14 30       	cpi	r17, 0x04	; 4
    87d0:	09 f0       	breq	.+2      	; 0x87d4 <TriggerCommon+0x6e>
    87d2:	2f c0       	rjmp	.+94     	; 0x8832 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    87d4:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    87d8:	80 91 b2 0b 	lds	r24, 0x0BB2
    87dc:	90 91 b3 0b 	lds	r25, 0x0BB3
    87e0:	e9 e0       	ldi	r30, 0x09	; 9
    87e2:	6e 9f       	mul	r22, r30
    87e4:	80 0d       	add	r24, r0
    87e6:	91 1d       	adc	r25, r1
    87e8:	11 24       	eor	r1, r1
    87ea:	fc 01       	movw	r30, r24
    87ec:	31 96       	adiw	r30, 0x01	; 1
    87ee:	65 91       	lpm	r22, Z+
    87f0:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    87f2:	70 93 1f 0b 	sts	0x0B1F, r23
    87f6:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    87fa:	ac 01       	movw	r20, r24
    87fc:	49 5f       	subi	r20, 0xF9	; 249
    87fe:	5f 4f       	sbci	r21, 0xFF	; 255
    8800:	fa 01       	movw	r30, r20
    8802:	a5 91       	lpm	r26, Z+
    8804:	b4 91       	lpm	r27, Z
    8806:	05 96       	adiw	r24, 0x05	; 5
    8808:	fc 01       	movw	r30, r24
    880a:	85 91       	lpm	r24, Z+
    880c:	94 91       	lpm	r25, Z
    880e:	a8 1b       	sub	r26, r24
    8810:	b9 0b       	sbc	r27, r25
    8812:	b0 93 21 0b 	sts	0x0B21, r27
    8816:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    881a:	fa 01       	movw	r30, r20
    881c:	85 91       	lpm	r24, Z+
    881e:	94 91       	lpm	r25, Z
    8820:	68 0f       	add	r22, r24
    8822:	79 1f       	adc	r23, r25
    8824:	70 93 23 0b 	sts	0x0B23, r23
    8828:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    882c:	62 2f       	mov	r22, r18
    882e:	84 e0       	ldi	r24, 0x04	; 4
    8830:	08 c0       	rjmp	.+16     	; 0x8842 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    8832:	60 e0       	ldi	r22, 0x00	; 0
    8834:	81 2f       	mov	r24, r17
    8836:	29 83       	std	Y+1, r18	; 0x01
    8838:	0e 94 d8 46 	call	0x8db0	; 0x8db0 <SetMixerWave>
			SetMixerNote(channel,note);
    883c:	29 81       	ldd	r18, Y+1	; 0x01
    883e:	62 2f       	mov	r22, r18
    8840:	81 2f       	mov	r24, r17
    8842:	0e 94 c1 46 	call	0x8d82	; 0x8d82 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8846:	86 e1       	ldi	r24, 0x16	; 22
    8848:	8c 9d       	mul	r24, r12
    884a:	f0 01       	movw	r30, r0
    884c:	8d 9d       	mul	r24, r13
    884e:	f0 0d       	add	r31, r0
    8850:	11 24       	eor	r1, r1
    8852:	ee 5b       	subi	r30, 0xBE	; 190
    8854:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8856:	ff 20       	and	r15, r15
    8858:	11 f0       	breq	.+4      	; 0x885e <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    885a:	07 87       	std	Z+15, r16	; 0x0f
    885c:	01 c0       	rjmp	.+2      	; 0x8860 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    885e:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8860:	e0 91 b2 0b 	lds	r30, 0x0BB2
    8864:	f0 91 b3 0b 	lds	r31, 0x0BB3
    8868:	39 e0       	ldi	r19, 0x09	; 9
    886a:	03 9f       	mul	r16, r19
    886c:	e0 0d       	add	r30, r0
    886e:	f1 1d       	adc	r31, r1
    8870:	11 24       	eor	r1, r1
    8872:	33 96       	adiw	r30, 0x03	; 3
    8874:	85 91       	lpm	r24, Z+
    8876:	94 91       	lpm	r25, Z
	if(pos==NULL){
    8878:	00 97       	sbiw	r24, 0x00	; 0
    887a:	59 f4       	brne	.+22     	; 0x8892 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    887c:	86 e1       	ldi	r24, 0x16	; 22
    887e:	8c 9d       	mul	r24, r12
    8880:	f0 01       	movw	r30, r0
    8882:	8d 9d       	mul	r24, r13
    8884:	f0 0d       	add	r31, r0
    8886:	11 24       	eor	r1, r1
    8888:	ee 5b       	subi	r30, 0xBE	; 190
    888a:	f4 4f       	sbci	r31, 0xF4	; 244
    888c:	15 8a       	std	Z+21, r1	; 0x15
    888e:	14 8a       	std	Z+20, r1	; 0x14
    8890:	0e c0       	rjmp	.+28     	; 0x88ae <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8892:	fc 01       	movw	r30, r24
    8894:	24 91       	lpm	r18, Z
    8896:	36 e1       	ldi	r19, 0x16	; 22
    8898:	3c 9d       	mul	r19, r12
    889a:	f0 01       	movw	r30, r0
    889c:	3d 9d       	mul	r19, r13
    889e:	f0 0d       	add	r31, r0
    88a0:	11 24       	eor	r1, r1
    88a2:	ee 5b       	subi	r30, 0xBE	; 190
    88a4:	f4 4f       	sbci	r31, 0xF4	; 244
    88a6:	21 8b       	std	Z+17, r18	; 0x11
    88a8:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    88aa:	95 8b       	std	Z+21, r25	; 0x15
    88ac:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    88ae:	0f 90       	pop	r0
    88b0:	df 91       	pop	r29
    88b2:	cf 91       	pop	r28
    88b4:	1f 91       	pop	r17
    88b6:	0f 91       	pop	r16
    88b8:	ff 90       	pop	r15
    88ba:	df 90       	pop	r13
    88bc:	cf 90       	pop	r12
    88be:	08 95       	ret

000088c0 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    88c0:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    88c2:	a8 2f       	mov	r26, r24
    88c4:	b0 e0       	ldi	r27, 0x00	; 0
    88c6:	96 e1       	ldi	r25, 0x16	; 22
    88c8:	89 9f       	mul	r24, r25
    88ca:	f0 01       	movw	r30, r0
    88cc:	11 24       	eor	r1, r1
    88ce:	ee 5b       	subi	r30, 0xBE	; 190
    88d0:	f4 4f       	sbci	r31, 0xF4	; 244
    88d2:	90 81       	ld	r25, Z
    88d4:	95 ff       	sbrs	r25, 5
    88d6:	02 c0       	rjmp	.+4      	; 0x88dc <TriggerNote+0x1c>
    88d8:	97 fd       	sbrc	r25, 7
    88da:	28 c0       	rjmp	.+80     	; 0x892c <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    88dc:	31 11       	cpse	r19, r1
    88de:	18 c0       	rjmp	.+48     	; 0x8910 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    88e0:	86 e1       	ldi	r24, 0x16	; 22
    88e2:	8a 9f       	mul	r24, r26
    88e4:	f0 01       	movw	r30, r0
    88e6:	8b 9f       	mul	r24, r27
    88e8:	f0 0d       	add	r31, r0
    88ea:	11 24       	eor	r1, r1
    88ec:	ee 5b       	subi	r30, 0xBE	; 190
    88ee:	f4 4f       	sbci	r31, 0xF4	; 244
    88f0:	85 85       	ldd	r24, Z+13	; 0x0d
    88f2:	81 11       	cpse	r24, r1
    88f4:	02 c0       	rjmp	.+4      	; 0x88fa <TriggerNote+0x3a>
    88f6:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    88f8:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    88fa:	86 e1       	ldi	r24, 0x16	; 22
    88fc:	8a 9f       	mul	r24, r26
    88fe:	f0 01       	movw	r30, r0
    8900:	8b 9f       	mul	r24, r27
    8902:	f0 0d       	add	r31, r0
    8904:	11 24       	eor	r1, r1
    8906:	ee 5b       	subi	r30, 0xBE	; 190
    8908:	f4 4f       	sbci	r31, 0xF4	; 244
    890a:	9f 7b       	andi	r25, 0xBF	; 191
    890c:	90 83       	st	Z, r25
    890e:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    8910:	26 e1       	ldi	r18, 0x16	; 22
    8912:	2a 9f       	mul	r18, r26
    8914:	f0 01       	movw	r30, r0
    8916:	2b 9f       	mul	r18, r27
    8918:	f0 0d       	add	r31, r0
    891a:	11 24       	eor	r1, r1
    891c:	ee 5b       	subi	r30, 0xBE	; 190
    891e:	f4 4f       	sbci	r31, 0xF4	; 244
    8920:	9f 77       	andi	r25, 0x7F	; 127
    8922:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    8924:	24 2f       	mov	r18, r20
    8926:	43 2f       	mov	r20, r19
    8928:	0c 94 b3 43 	jmp	0x8766	; 0x8766 <TriggerCommon>
    892c:	08 95       	ret

0000892e <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    892e:	5f 92       	push	r5
    8930:	6f 92       	push	r6
    8932:	7f 92       	push	r7
    8934:	8f 92       	push	r8
    8936:	9f 92       	push	r9
    8938:	af 92       	push	r10
    893a:	bf 92       	push	r11
    893c:	cf 92       	push	r12
    893e:	df 92       	push	r13
    8940:	ef 92       	push	r14
    8942:	ff 92       	push	r15
    8944:	0f 93       	push	r16
    8946:	1f 93       	push	r17
    8948:	cf 93       	push	r28
    894a:	df 93       	push	r29
    894c:	c2 e4       	ldi	r28, 0x42	; 66
    894e:	db e0       	ldi	r29, 0x0B	; 11
    8950:	82 e0       	ldi	r24, 0x02	; 2
    8952:	e8 2e       	mov	r14, r24
    8954:	8b e0       	ldi	r24, 0x0B	; 11
    8956:	f8 2e       	mov	r15, r24
    8958:	d7 01       	movw	r26, r14
    895a:	9e 01       	movw	r18, r28
    895c:	40 e0       	ldi	r20, 0x00	; 0
    895e:	50 e0       	ldi	r21, 0x00	; 0
    8960:	ca 01       	movw	r24, r20
    8962:	8e 5b       	subi	r24, 0xBE	; 190
    8964:	94 4f       	sbci	r25, 0xF4	; 244
    8966:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8968:	fc 01       	movw	r30, r24
    896a:	85 85       	ldd	r24, Z+13	; 0x0d
    896c:	88 23       	and	r24, r24
    896e:	91 f0       	breq	.+36     	; 0x8994 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    8970:	64 85       	ldd	r22, Z+12	; 0x0c
    8972:	99 27       	eor	r25, r25
    8974:	87 fd       	sbrc	r24, 7
    8976:	90 95       	com	r25
    8978:	86 0f       	add	r24, r22
    897a:	91 1d       	adc	r25, r1
    897c:	8f 3f       	cpi	r24, 0xFF	; 255
    897e:	91 05       	cpc	r25, r1
    8980:	19 f0       	breq	.+6      	; 0x8988 <ProcessMusic+0x5a>
    8982:	14 f0       	brlt	.+4      	; 0x8988 <ProcessMusic+0x5a>
    8984:	8f ef       	ldi	r24, 0xFF	; 255
    8986:	90 e0       	ldi	r25, 0x00	; 0
    8988:	97 ff       	sbrs	r25, 7
    898a:	02 c0       	rjmp	.+4      	; 0x8990 <ProcessMusic+0x62>
    898c:	80 e0       	ldi	r24, 0x00	; 0
    898e:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    8990:	f6 01       	movw	r30, r12
    8992:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    8994:	f9 01       	movw	r30, r18
    8996:	10 81       	ld	r17, Z
    8998:	13 ff       	sbrs	r17, 3
    899a:	29 c0       	rjmp	.+82     	; 0x89ee <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    899c:	62 81       	ldd	r22, Z+2	; 0x02
    899e:	73 81       	ldd	r23, Z+3	; 0x03
    89a0:	11 96       	adiw	r26, 0x01	; 1
    89a2:	8d 91       	ld	r24, X+
    89a4:	9c 91       	ld	r25, X
    89a6:	12 97       	sbiw	r26, 0x02	; 2
    89a8:	86 0f       	add	r24, r22
    89aa:	97 1f       	adc	r25, r23
    89ac:	12 96       	adiw	r26, 0x02	; 2
    89ae:	9c 93       	st	X, r25
    89b0:	8e 93       	st	-X, r24
    89b2:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    89b4:	f6 01       	movw	r30, r12
    89b6:	04 81       	ldd	r16, Z+4	; 0x04
    89b8:	e0 2f       	mov	r30, r16
    89ba:	f0 e0       	ldi	r31, 0x00	; 0
    89bc:	ee 0f       	add	r30, r30
    89be:	ff 1f       	adc	r31, r31
    89c0:	e8 5f       	subi	r30, 0xF8	; 248
    89c2:	f1 47       	sbci	r31, 0x71	; 113
    89c4:	c5 90       	lpm	r12, Z+
    89c6:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    89c8:	16 16       	cp	r1, r22
    89ca:	17 06       	cpc	r1, r23
    89cc:	24 f4       	brge	.+8      	; 0x89d6 <ProcessMusic+0xa8>
    89ce:	8c 15       	cp	r24, r12
    89d0:	9d 05       	cpc	r25, r13
    89d2:	30 f4       	brcc	.+12     	; 0x89e0 <ProcessMusic+0xb2>
    89d4:	0c c0       	rjmp	.+24     	; 0x89ee <ProcessMusic+0xc0>
    89d6:	67 2b       	or	r22, r23
    89d8:	51 f0       	breq	.+20     	; 0x89ee <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    89da:	c8 16       	cp	r12, r24
    89dc:	d9 06       	cpc	r13, r25
    89de:	38 f0       	brcs	.+14     	; 0x89ee <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    89e0:	12 96       	adiw	r26, 0x02	; 2
    89e2:	dc 92       	st	X, r13
    89e4:	ce 92       	st	-X, r12
    89e6:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    89e8:	17 7f       	andi	r17, 0xF7	; 247
    89ea:	f9 01       	movw	r30, r18
    89ec:	10 83       	st	Z, r17
    89ee:	4a 5e       	subi	r20, 0xEA	; 234
    89f0:	5f 4f       	sbci	r21, 0xFF	; 255
    89f2:	2a 5e       	subi	r18, 0xEA	; 234
    89f4:	3f 4f       	sbci	r19, 0xFF	; 255
    89f6:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    89f8:	4e 36       	cpi	r20, 0x6E	; 110
    89fa:	51 05       	cpc	r21, r1
    89fc:	09 f0       	breq	.+2      	; 0x8a00 <ProcessMusic+0xd2>
    89fe:	b0 cf       	rjmp	.-160    	; 0x8960 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    8a00:	80 91 00 0b 	lds	r24, 0x0B00
    8a04:	88 23       	and	r24, r24
    8a06:	09 f4       	brne	.+2      	; 0x8a0a <ProcessMusic+0xdc>
    8a08:	cb c0       	rjmp	.+406    	; 0x8ba0 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    8a0a:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8a0c:	80 91 b0 0b 	lds	r24, 0x0BB0
    8a10:	90 91 b1 0b 	lds	r25, 0x0BB1
    8a14:	20 91 b6 0b 	lds	r18, 0x0BB6
    8a18:	30 91 b7 0b 	lds	r19, 0x0BB7
    8a1c:	82 17       	cp	r24, r18
    8a1e:	93 07       	cpc	r25, r19
    8a20:	09 f0       	breq	.+2      	; 0x8a24 <ProcessMusic+0xf6>
    8a22:	b9 c0       	rjmp	.+370    	; 0x8b96 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    8a24:	20 91 b9 0b 	lds	r18, 0x0BB9
    8a28:	30 91 ba 0b 	lds	r19, 0x0BBA
    8a2c:	b9 01       	movw	r22, r18
    8a2e:	6f 5f       	subi	r22, 0xFF	; 255
    8a30:	7f 4f       	sbci	r23, 0xFF	; 255
    8a32:	70 93 ba 0b 	sts	0x0BBA, r23
    8a36:	60 93 b9 0b 	sts	0x0BB9, r22
    8a3a:	f9 01       	movw	r30, r18
    8a3c:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8a3e:	4f 3f       	cpi	r20, 0xFF	; 255
    8a40:	79 f5       	brne	.+94     	; 0x8aa0 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8a42:	a9 01       	movw	r20, r18
    8a44:	4e 5f       	subi	r20, 0xFE	; 254
    8a46:	5f 4f       	sbci	r21, 0xFF	; 255
    8a48:	50 93 ba 0b 	sts	0x0BBA, r21
    8a4c:	40 93 b9 0b 	sts	0x0BB9, r20
    8a50:	fb 01       	movw	r30, r22
    8a52:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8a54:	6f 32       	cpi	r22, 0x2F	; 47
    8a56:	19 f4       	brne	.+6      	; 0x8a5e <ProcessMusic+0x130>
						playSong=false;
    8a58:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    8a5c:	9c c0       	rjmp	.+312    	; 0x8b96 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    8a5e:	66 30       	cpi	r22, 0x06	; 6
    8a60:	09 f0       	breq	.+2      	; 0x8a64 <ProcessMusic+0x136>
    8a62:	8c c0       	rjmp	.+280    	; 0x8b7c <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    8a64:	fa 01       	movw	r30, r20
    8a66:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8a68:	c9 01       	movw	r24, r18
    8a6a:	04 96       	adiw	r24, 0x04	; 4
    8a6c:	90 93 ba 0b 	sts	0x0BBA, r25
    8a70:	80 93 b9 0b 	sts	0x0BB9, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8a74:	f9 01       	movw	r30, r18
    8a76:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8a78:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8a7a:	e3 35       	cpi	r30, 0x53	; 83
    8a7c:	29 f4       	brne	.+10     	; 0x8a88 <ProcessMusic+0x15a>
							loopStart=songPos;
    8a7e:	90 93 bc 0b 	sts	0x0BBC, r25
    8a82:	80 93 bb 0b 	sts	0x0BBB, r24
    8a86:	7a c0       	rjmp	.+244    	; 0x8b7c <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    8a88:	e5 34       	cpi	r30, 0x45	; 69
    8a8a:	09 f0       	breq	.+2      	; 0x8a8e <ProcessMusic+0x160>
    8a8c:	77 c0       	rjmp	.+238    	; 0x8b7c <ProcessMusic+0x24e>
							songPos=loopStart;
    8a8e:	80 91 bb 0b 	lds	r24, 0x0BBB
    8a92:	90 91 bc 0b 	lds	r25, 0x0BBC
    8a96:	90 93 ba 0b 	sts	0x0BBA, r25
    8a9a:	80 93 b9 0b 	sts	0x0BB9, r24
    8a9e:	6e c0       	rjmp	.+220    	; 0x8b7c <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    8aa0:	47 fd       	sbrc	r20, 7
    8aa2:	40 93 b4 0b 	sts	0x0BB4, r20
					channel=lastStatus&0x0f;
    8aa6:	90 91 b4 0b 	lds	r25, 0x0BB4
    8aaa:	89 2f       	mov	r24, r25
    8aac:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    8aae:	47 ff       	sbrs	r20, 7
    8ab0:	08 c0       	rjmp	.+16     	; 0x8ac2 <ProcessMusic+0x194>
    8ab2:	2e 5f       	subi	r18, 0xFE	; 254
    8ab4:	3f 4f       	sbci	r19, 0xFF	; 255
    8ab6:	30 93 ba 0b 	sts	0x0BBA, r19
    8aba:	20 93 b9 0b 	sts	0x0BB9, r18
    8abe:	fb 01       	movw	r30, r22
    8ac0:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8ac2:	90 7f       	andi	r25, 0xF0	; 240
    8ac4:	90 3b       	cpi	r25, 0xB0	; 176
    8ac6:	e1 f0       	breq	.+56     	; 0x8b00 <ProcessMusic+0x1d2>
    8ac8:	90 3c       	cpi	r25, 0xC0	; 192
    8aca:	09 f4       	brne	.+2      	; 0x8ace <ProcessMusic+0x1a0>
    8acc:	51 c0       	rjmp	.+162    	; 0x8b70 <ProcessMusic+0x242>
    8ace:	90 39       	cpi	r25, 0x90	; 144
    8ad0:	09 f0       	breq	.+2      	; 0x8ad4 <ProcessMusic+0x1a6>
    8ad2:	54 c0       	rjmp	.+168    	; 0x8b7c <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8ad4:	e0 91 b9 0b 	lds	r30, 0x0BB9
    8ad8:	f0 91 ba 0b 	lds	r31, 0x0BBA
    8adc:	9f 01       	movw	r18, r30
    8ade:	2f 5f       	subi	r18, 0xFF	; 255
    8ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ae2:	30 93 ba 0b 	sts	0x0BBA, r19
    8ae6:	20 93 b9 0b 	sts	0x0BB9, r18
    8aea:	24 91       	lpm	r18, Z
    8aec:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8aee:	18 9f       	mul	r17, r24
    8af0:	f0 01       	movw	r30, r0
    8af2:	11 24       	eor	r1, r1
    8af4:	ee 5b       	subi	r30, 0xBE	; 190
    8af6:	f4 4f       	sbci	r31, 0xF4	; 244
    8af8:	66 85       	ldd	r22, Z+14	; 0x0e
    8afa:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
    8afe:	3e c0       	rjmp	.+124    	; 0x8b7c <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8b00:	e0 91 b9 0b 	lds	r30, 0x0BB9
    8b04:	f0 91 ba 0b 	lds	r31, 0x0BBA
    8b08:	9f 01       	movw	r18, r30
    8b0a:	2f 5f       	subi	r18, 0xFF	; 255
    8b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    8b0e:	30 93 ba 0b 	sts	0x0BBA, r19
    8b12:	20 93 b9 0b 	sts	0x0BB9, r18
    8b16:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    8b18:	47 30       	cpi	r20, 0x07	; 7
    8b1a:	49 f4       	brne	.+18     	; 0x8b2e <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    8b1c:	18 9f       	mul	r17, r24
    8b1e:	d0 01       	movw	r26, r0
    8b20:	11 24       	eor	r1, r1
    8b22:	ae 5b       	subi	r26, 0xBE	; 190
    8b24:	b4 4f       	sbci	r27, 0xF4	; 244
    8b26:	ee 0f       	add	r30, r30
    8b28:	1a 96       	adiw	r26, 0x0a	; 10
    8b2a:	ec 93       	st	X, r30
    8b2c:	27 c0       	rjmp	.+78     	; 0x8b7c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    8b2e:	4b 30       	cpi	r20, 0x0B	; 11
    8b30:	49 f4       	brne	.+18     	; 0x8b44 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    8b32:	18 9f       	mul	r17, r24
    8b34:	d0 01       	movw	r26, r0
    8b36:	11 24       	eor	r1, r1
    8b38:	ae 5b       	subi	r26, 0xBE	; 190
    8b3a:	b4 4f       	sbci	r27, 0xF4	; 244
    8b3c:	ee 0f       	add	r30, r30
    8b3e:	19 96       	adiw	r26, 0x09	; 9
    8b40:	ec 93       	st	X, r30
    8b42:	1c c0       	rjmp	.+56     	; 0x8b7c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    8b44:	4c 35       	cpi	r20, 0x5C	; 92
    8b46:	49 f4       	brne	.+18     	; 0x8b5a <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    8b48:	18 9f       	mul	r17, r24
    8b4a:	d0 01       	movw	r26, r0
    8b4c:	11 24       	eor	r1, r1
    8b4e:	ae 5b       	subi	r26, 0xBE	; 190
    8b50:	b4 4f       	sbci	r27, 0xF4	; 244
    8b52:	ee 0f       	add	r30, r30
    8b54:	17 96       	adiw	r26, 0x07	; 7
    8b56:	ec 93       	st	X, r30
    8b58:	11 c0       	rjmp	.+34     	; 0x8b7c <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8b5a:	44 36       	cpi	r20, 0x64	; 100
    8b5c:	79 f4       	brne	.+30     	; 0x8b7c <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    8b5e:	18 9f       	mul	r17, r24
    8b60:	d0 01       	movw	r26, r0
    8b62:	11 24       	eor	r1, r1
    8b64:	ae 5b       	subi	r26, 0xBE	; 190
    8b66:	b4 4f       	sbci	r27, 0xF4	; 244
    8b68:	ee 0f       	add	r30, r30
    8b6a:	18 96       	adiw	r26, 0x08	; 8
    8b6c:	ec 93       	st	X, r30
    8b6e:	06 c0       	rjmp	.+12     	; 0x8b7c <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8b70:	18 9f       	mul	r17, r24
    8b72:	f0 01       	movw	r30, r0
    8b74:	11 24       	eor	r1, r1
    8b76:	ee 5b       	subi	r30, 0xBE	; 190
    8b78:	f4 4f       	sbci	r31, 0xF4	; 244
    8b7a:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8b7c:	89 eb       	ldi	r24, 0xB9	; 185
    8b7e:	9b e0       	ldi	r25, 0x0B	; 11
    8b80:	0e 94 8d 43 	call	0x871a	; 0x871a <ReadVarLen>
    8b84:	90 93 b7 0b 	sts	0x0BB7, r25
    8b88:	80 93 b6 0b 	sts	0x0BB6, r24
				currDeltaTime=0;
    8b8c:	10 92 b1 0b 	sts	0x0BB1, r1
    8b90:	10 92 b0 0b 	sts	0x0BB0, r1
    8b94:	3b cf       	rjmp	.-394    	; 0x8a0c <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8b96:	01 96       	adiw	r24, 0x01	; 1
    8b98:	90 93 b1 0b 	sts	0x0BB1, r25
    8b9c:	80 93 b0 0b 	sts	0x0BB0, r24
    8ba0:	98 e4       	ldi	r25, 0x48	; 72
    8ba2:	a9 2e       	mov	r10, r25
    8ba4:	9b e0       	ldi	r25, 0x0B	; 11
    8ba6:	b9 2e       	mov	r11, r25
    8ba8:	04 e5       	ldi	r16, 0x54	; 84
    8baa:	1b e0       	ldi	r17, 0x0B	; 11
    8bac:	23 e5       	ldi	r18, 0x53	; 83
    8bae:	c2 2e       	mov	r12, r18
    8bb0:	2b e0       	ldi	r18, 0x0B	; 11
    8bb2:	d2 2e       	mov	r13, r18
    8bb4:	35 e5       	ldi	r19, 0x55	; 85
    8bb6:	83 2e       	mov	r8, r19
    8bb8:	3b e0       	ldi	r19, 0x0B	; 11
    8bba:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    8bbc:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8bbe:	66 24       	eor	r6, r6
    8bc0:	6a 94       	dec	r6
    8bc2:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    8bc4:	88 81       	ld	r24, Y
    8bc6:	86 fd       	sbrc	r24, 6
    8bc8:	43 c0       	rjmp	.+134    	; 0x8c50 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    8bca:	8c 89       	ldd	r24, Y+20	; 0x14
    8bcc:	9d 89       	ldd	r25, Y+21	; 0x15
    8bce:	89 2b       	or	r24, r25
    8bd0:	09 f4       	brne	.+2      	; 0x8bd4 <ProcessMusic+0x2a6>
    8bd2:	3a c0       	rjmp	.+116    	; 0x8c48 <ProcessMusic+0x31a>
    8bd4:	d8 01       	movw	r26, r16
    8bd6:	9c 91       	ld	r25, X
    8bd8:	f6 01       	movw	r30, r12
    8bda:	80 81       	ld	r24, Z
    8bdc:	98 17       	cp	r25, r24
    8bde:	08 f4       	brcc	.+2      	; 0x8be2 <ProcessMusic+0x2b4>
    8be0:	33 c0       	rjmp	.+102    	; 0x8c48 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    8be2:	d8 01       	movw	r26, r16
    8be4:	9c 91       	ld	r25, X
    8be6:	f6 01       	movw	r30, r12
    8be8:	80 81       	ld	r24, Z
    8bea:	98 13       	cpse	r25, r24
    8bec:	2d c0       	rjmp	.+90     	; 0x8c48 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    8bee:	ec 89       	ldd	r30, Y+20	; 0x14
    8bf0:	fd 89       	ldd	r31, Y+21	; 0x15
    8bf2:	af 01       	movw	r20, r30
    8bf4:	4f 5f       	subi	r20, 0xFF	; 255
    8bf6:	5f 4f       	sbci	r21, 0xFF	; 255
    8bf8:	5d 8b       	std	Y+21, r21	; 0x15
    8bfa:	4c 8b       	std	Y+20, r20	; 0x14
    8bfc:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    8bfe:	8f 3f       	cpi	r24, 0xFF	; 255
    8c00:	31 f4       	brne	.+12     	; 0x8c0e <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8c02:	88 81       	ld	r24, Y
    8c04:	8f 77       	andi	r24, 0x7F	; 127
    8c06:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    8c08:	1d 8a       	std	Y+21, r1	; 0x15
    8c0a:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    8c0c:	1d c0       	rjmp	.+58     	; 0x8c48 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    8c0e:	32 96       	adiw	r30, 0x02	; 2
    8c10:	fd 8b       	std	Y+21, r31	; 0x15
    8c12:	ec 8b       	std	Y+20, r30	; 0x14
    8c14:	fa 01       	movw	r30, r20
    8c16:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    8c18:	e8 2f       	mov	r30, r24
    8c1a:	f0 e0       	ldi	r31, 0x00	; 0
    8c1c:	ee 0f       	add	r30, r30
    8c1e:	ff 1f       	adc	r31, r31
    8c20:	e2 54       	subi	r30, 0x42	; 66
    8c22:	ff 4f       	sbci	r31, 0xFF	; 255
    8c24:	25 91       	lpm	r18, Z+
    8c26:	34 91       	lpm	r19, Z
    8c28:	65 2d       	mov	r22, r5
    8c2a:	ce 01       	movw	r24, r28
    8c2c:	f9 01       	movw	r30, r18
    8c2e:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    8c30:	ec 89       	ldd	r30, Y+20	; 0x14
    8c32:	fd 89       	ldd	r31, Y+21	; 0x15
    8c34:	cf 01       	movw	r24, r30
    8c36:	01 96       	adiw	r24, 0x01	; 1
    8c38:	9d 8b       	std	Y+21, r25	; 0x15
    8c3a:	8c 8b       	std	Y+20, r24	; 0x14
    8c3c:	e4 91       	lpm	r30, Z
    8c3e:	d6 01       	movw	r26, r12
    8c40:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    8c42:	f8 01       	movw	r30, r16
    8c44:	10 82       	st	Z, r1
    8c46:	cd cf       	rjmp	.-102    	; 0x8be2 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    8c48:	d8 01       	movw	r26, r16
    8c4a:	8c 91       	ld	r24, X
    8c4c:	8f 5f       	subi	r24, 0xFF	; 255
    8c4e:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    8c50:	98 81       	ld	r25, Y
    8c52:	95 ff       	sbrs	r25, 5
    8c54:	6c c0       	rjmp	.+216    	; 0x8d2e <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    8c56:	f4 01       	movw	r30, r8
    8c58:	80 81       	ld	r24, Z
    8c5a:	8f 3f       	cpi	r24, 0xFF	; 255
    8c5c:	11 f0       	breq	.+4      	; 0x8c62 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    8c5e:	8f 5f       	subi	r24, 0xFF	; 255
    8c60:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8c62:	97 fd       	sbrc	r25, 7
    8c64:	04 c0       	rjmp	.+8      	; 0x8c6e <ProcessMusic+0x340>
    8c66:	f8 01       	movw	r30, r16
    8c68:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8c6a:	90 81       	ld	r25, Z
    8c6c:	01 c0       	rjmp	.+2      	; 0x8c70 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8c6e:	9f ef       	ldi	r25, 0xFF	; 255
    8c70:	f8 01       	movw	r30, r16
    8c72:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8c74:	80 81       	ld	r24, Z
    8c76:	88 23       	and	r24, r24
    8c78:	09 f4       	brne	.+2      	; 0x8c7c <ProcessMusic+0x34e>
    8c7a:	4e c0       	rjmp	.+156    	; 0x8d18 <ProcessMusic+0x3ea>
    8c7c:	31 96       	adiw	r30, 0x01	; 1
    8c7e:	50 81       	ld	r21, Z
    8c80:	55 23       	and	r21, r21
    8c82:	09 f4       	brne	.+2      	; 0x8c86 <ProcessMusic+0x358>
    8c84:	49 c0       	rjmp	.+146    	; 0x8d18 <ProcessMusic+0x3ea>
    8c86:	99 23       	and	r25, r25
    8c88:	09 f4       	brne	.+2      	; 0x8c8c <ProcessMusic+0x35e>
    8c8a:	46 c0       	rjmp	.+140    	; 0x8d18 <ProcessMusic+0x3ea>
    8c8c:	40 91 b5 0b 	lds	r20, 0x0BB5
    8c90:	44 23       	and	r20, r20
    8c92:	09 f4       	brne	.+2      	; 0x8c96 <ProcessMusic+0x368>
    8c94:	41 c0       	rjmp	.+130    	; 0x8d18 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    8c96:	89 9f       	mul	r24, r25
    8c98:	c0 01       	movw	r24, r0
    8c9a:	11 24       	eor	r1, r1
    8c9c:	93 95       	inc	r25
				uVol>>=8;
    8c9e:	89 2f       	mov	r24, r25
    8ca0:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    8ca2:	58 9f       	mul	r21, r24
    8ca4:	90 01       	movw	r18, r0
    8ca6:	59 9f       	mul	r21, r25
    8ca8:	30 0d       	add	r19, r0
    8caa:	11 24       	eor	r1, r1
    8cac:	c9 01       	movw	r24, r18
    8cae:	93 95       	inc	r25
				uVol>>=8;
    8cb0:	89 2f       	mov	r24, r25
    8cb2:	99 27       	eor	r25, r25
    8cb4:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    8cb6:	50 81       	ld	r21, Z
    8cb8:	58 9f       	mul	r21, r24
    8cba:	90 01       	movw	r18, r0
    8cbc:	59 9f       	mul	r21, r25
    8cbe:	30 0d       	add	r19, r0
    8cc0:	11 24       	eor	r1, r1
    8cc2:	33 95       	inc	r19
				uVol>>=8;
    8cc4:	23 2f       	mov	r18, r19
    8cc6:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    8cc8:	42 9f       	mul	r20, r18
    8cca:	c0 01       	movw	r24, r0
    8ccc:	43 9f       	mul	r20, r19
    8cce:	90 0d       	add	r25, r0
    8cd0:	11 24       	eor	r1, r1
    8cd2:	93 95       	inc	r25
				uVol>>=8;
    8cd4:	89 2f       	mov	r24, r25
    8cd6:	99 27       	eor	r25, r25
    8cd8:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    8cda:	20 81       	ld	r18, Z
    8cdc:	22 23       	and	r18, r18
    8cde:	f1 f0       	breq	.+60     	; 0x8d1c <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8ce0:	d5 01       	movw	r26, r10
    8ce2:	ec 91       	ld	r30, X
    8ce4:	f0 e0       	ldi	r31, 0x00	; 0
    8ce6:	e0 50       	subi	r30, 0x00	; 0
    8ce8:	f0 47       	sbci	r31, 0x70	; 112
    8cea:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8cec:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8cee:	2e 9f       	mul	r18, r30
    8cf0:	f0 01       	movw	r30, r0
    8cf2:	11 24       	eor	r1, r1
    8cf4:	f3 95       	inc	r31
					tVol>>=8;
    8cf6:	ef 2f       	mov	r30, r31
    8cf8:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8cfa:	a3 01       	movw	r20, r6
    8cfc:	4e 1b       	sub	r20, r30
    8cfe:	5f 0b       	sbc	r21, r31
    8d00:	48 9f       	mul	r20, r24
    8d02:	90 01       	movw	r18, r0
    8d04:	49 9f       	mul	r20, r25
    8d06:	30 0d       	add	r19, r0
    8d08:	58 9f       	mul	r21, r24
    8d0a:	30 0d       	add	r19, r0
    8d0c:	11 24       	eor	r1, r1
    8d0e:	c9 01       	movw	r24, r18
    8d10:	93 95       	inc	r25
					uVol>>=8;
    8d12:	89 2f       	mov	r24, r25
    8d14:	99 27       	eor	r25, r25
    8d16:	02 c0       	rjmp	.+4      	; 0x8d1c <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    8d18:	80 e0       	ldi	r24, 0x00	; 0
    8d1a:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8d1c:	f5 01       	movw	r30, r10
    8d1e:	30 81       	ld	r19, Z
    8d20:	f8 01       	movw	r30, r16
    8d22:	3a 97       	sbiw	r30, 0x0a	; 10
    8d24:	20 81       	ld	r18, Z
    8d26:	23 0f       	add	r18, r19
    8d28:	d5 01       	movw	r26, r10
    8d2a:	2c 93       	st	X, r18
    8d2c:	02 c0       	rjmp	.+4      	; 0x8d32 <ProcessMusic+0x404>

		}else{
			uVol=0;
    8d2e:	80 e0       	ldi	r24, 0x00	; 0
    8d30:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8d32:	f7 01       	movw	r30, r14
    8d34:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8d36:	53 94       	inc	r5
    8d38:	66 96       	adiw	r28, 0x16	; 22
    8d3a:	f6 e0       	ldi	r31, 0x06	; 6
    8d3c:	ef 0e       	add	r14, r31
    8d3e:	f1 1c       	adc	r15, r1
    8d40:	86 e1       	ldi	r24, 0x16	; 22
    8d42:	a8 0e       	add	r10, r24
    8d44:	b1 1c       	adc	r11, r1
    8d46:	0a 5e       	subi	r16, 0xEA	; 234
    8d48:	1f 4f       	sbci	r17, 0xFF	; 255
    8d4a:	96 e1       	ldi	r25, 0x16	; 22
    8d4c:	c9 0e       	add	r12, r25
    8d4e:	d1 1c       	adc	r13, r1
    8d50:	a6 e1       	ldi	r26, 0x16	; 22
    8d52:	8a 0e       	add	r8, r26
    8d54:	91 1c       	adc	r9, r1
    8d56:	b5 e0       	ldi	r27, 0x05	; 5
    8d58:	5b 12       	cpse	r5, r27
    8d5a:	34 cf       	rjmp	.-408    	; 0x8bc4 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8d5c:	df 91       	pop	r29
    8d5e:	cf 91       	pop	r28
    8d60:	1f 91       	pop	r17
    8d62:	0f 91       	pop	r16
    8d64:	ff 90       	pop	r15
    8d66:	ef 90       	pop	r14
    8d68:	df 90       	pop	r13
    8d6a:	cf 90       	pop	r12
    8d6c:	bf 90       	pop	r11
    8d6e:	af 90       	pop	r10
    8d70:	9f 90       	pop	r9
    8d72:	8f 90       	pop	r8
    8d74:	7f 90       	pop	r7
    8d76:	6f 90       	pop	r6
    8d78:	5f 90       	pop	r5
    8d7a:	08 95       	ret

00008d7c <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8d7c:	80 93 b5 0b 	sts	0x0BB5, r24
    8d80:	08 95       	ret

00008d82 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8d82:	99 27       	eor	r25, r25
	clr r23
    8d84:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8d86:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8d88:	09 f4       	brne	.+2      	; 0x8d8c <set_note_waves>
		ret
    8d8a:	08 95       	ret

00008d8c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8d8c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8d8e:	fe e8       	ldi	r31, 0x8E	; 142
	lsl r22
    8d90:	66 0f       	add	r22, r22
	rol r23
    8d92:	77 1f       	adc	r23, r23
	add ZL,r22
    8d94:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8d96:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8d98:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8d9a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8d9c:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    8d9e:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    8da0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8da2:	28 9f       	mul	r18, r24
	add ZL,r0
    8da4:	e0 0d       	add	r30, r0
	adc ZH,r1
    8da6:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8da8:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8daa:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8dac:	11 24       	eor	r1, r1
	

	ret
    8dae:	08 95       	ret

00008db0 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8db0:	99 27       	eor	r25, r25
	clr r23
    8db2:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8db4:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    8db6:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    8db8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8dba:	28 9f       	mul	r18, r24
	add ZL,r0
    8dbc:	e0 0d       	add	r30, r0
	adc ZH,r1
    8dbe:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8dc0:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8dc2:	31 f4       	brne	.+12     	; 0x8dd0 <smw1>
	lds r22,tr4_params
    8dc4:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    8dc8:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8dca:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    8dce:	0b c0       	rjmp	.+22     	; 0x8de6 <esmw>

00008dd0 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8dd0:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8dd2:	31 f4       	brne	.+12     	; 0x8de0 <smw2>
	lds r22,tr4_params
    8dd4:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    8dd8:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8dda:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    8dde:	03 c0       	rjmp	.+6      	; 0x8de6 <esmw>

00008de0 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8de0:	70 e9       	ldi	r23, 0x90	; 144
	add r23,r22
    8de2:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8de4:	75 83       	std	Z+5, r23	; 0x05

00008de6 <esmw>:

esmw:
	clr r1	
    8de6:	11 24       	eor	r1, r1
	ret
    8de8:	08 95       	ret
	...

00008e00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8e00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8e02:	80 93 01 0b 	sts	0x0B01, r24
	ret
    8e06:	08 95       	ret

00008e08 <steptable>:
    8e08:	22 00       	.word	0x0022	; ????
    8e0a:	24 00       	.word	0x0024	; ????
    8e0c:	26 00       	.word	0x0026	; ????
    8e0e:	28 00       	.word	0x0028	; ????
    8e10:	2b 00       	.word	0x002b	; ????
    8e12:	2d 00       	.word	0x002d	; ????
    8e14:	30 00       	.word	0x0030	; ????
    8e16:	33 00       	.word	0x0033	; ????
    8e18:	36 00       	.word	0x0036	; ????
    8e1a:	39 00       	.word	0x0039	; ????
    8e1c:	3d 00       	.word	0x003d	; ????
    8e1e:	40 00       	.word	0x0040	; ????
    8e20:	44 00       	.word	0x0044	; ????
    8e22:	48 00       	.word	0x0048	; ????
    8e24:	4c 00       	.word	0x004c	; ????
    8e26:	51 00       	.word	0x0051	; ????
    8e28:	56 00       	.word	0x0056	; ????
    8e2a:	5b 00       	.word	0x005b	; ????
    8e2c:	60 00       	.word	0x0060	; ????
    8e2e:	66 00       	.word	0x0066	; ????
    8e30:	6c 00       	.word	0x006c	; ????
    8e32:	73 00       	.word	0x0073	; ????
    8e34:	79 00       	.word	0x0079	; ????
    8e36:	81 00       	.word	0x0081	; ????
    8e38:	88 00       	.word	0x0088	; ????
    8e3a:	90 00       	.word	0x0090	; ????
    8e3c:	99 00       	.word	0x0099	; ????
    8e3e:	a2 00       	.word	0x00a2	; ????
    8e40:	ac 00       	.word	0x00ac	; ????
    8e42:	b6 00       	.word	0x00b6	; ????
    8e44:	c1 00       	.word	0x00c1	; ????
    8e46:	cc 00       	.word	0x00cc	; ????
    8e48:	d8 00       	.word	0x00d8	; ????
    8e4a:	e5 00       	.word	0x00e5	; ????
    8e4c:	f3 00       	.word	0x00f3	; ????
    8e4e:	01 01       	movw	r0, r2
    8e50:	10 01       	movw	r2, r0
    8e52:	21 01       	movw	r4, r2
    8e54:	32 01       	movw	r6, r4
    8e56:	44 01       	movw	r8, r8
    8e58:	57 01       	movw	r10, r14
    8e5a:	6c 01       	movw	r12, r24
    8e5c:	81 01       	movw	r16, r2
    8e5e:	98 01       	movw	r18, r16
    8e60:	b0 01       	movw	r22, r0
    8e62:	ca 01       	movw	r24, r20
    8e64:	e5 01       	movw	r28, r10
    8e66:	02 02       	muls	r16, r18
    8e68:	21 02       	muls	r18, r17
    8e6a:	41 02       	muls	r20, r17
    8e6c:	64 02       	muls	r22, r20
    8e6e:	88 02       	muls	r24, r24
    8e70:	ae 02       	muls	r26, r30
    8e72:	d7 02       	muls	r29, r23
    8e74:	03 03       	mulsu	r16, r19
    8e76:	30 03       	mulsu	r19, r16
    8e78:	61 03       	mulsu	r22, r17
    8e7a:	94 03       	fmuls	r17, r20
    8e7c:	cb 03       	fmulsu	r20, r19
    8e7e:	05 04       	cpc	r0, r5
    8e80:	42 04       	cpc	r4, r2
    8e82:	83 04       	cpc	r8, r3
    8e84:	c7 04       	cpc	r12, r7
    8e86:	10 05       	cpc	r17, r0
    8e88:	5d 05       	cpc	r21, r13
    8e8a:	af 05       	cpc	r26, r15
    8e8c:	05 06       	cpc	r0, r21
    8e8e:	61 06       	cpc	r6, r17
    8e90:	c2 06       	cpc	r12, r18
    8e92:	29 07       	cpc	r18, r25
    8e94:	96 07       	cpc	r25, r22
    8e96:	09 08       	sbc	r0, r9
    8e98:	83 08       	sbc	r8, r3
    8e9a:	05 09       	sbc	r16, r5
    8e9c:	8e 09       	sbc	r24, r14
    8e9e:	20 0a       	sbc	r2, r16
    8ea0:	ba 0a       	sbc	r11, r26
    8ea2:	5d 0b       	sbc	r21, r29
    8ea4:	0a 0c       	add	r0, r10
    8ea6:	c1 0c       	add	r12, r1
    8ea8:	84 0d       	add	r24, r4
    8eaa:	51 0e       	add	r5, r17
    8eac:	2b 0f       	add	r18, r27
    8eae:	12 10       	cpse	r1, r2
    8eb0:	07 11       	cpse	r16, r7
    8eb2:	0a 12       	cpse	r0, r26
    8eb4:	1d 13       	cpse	r17, r29
    8eb6:	40 14       	cp	r4, r0
    8eb8:	74 15       	cp	r23, r4
    8eba:	ba 16       	cp	r11, r26
    8ebc:	14 18       	sub	r1, r4
    8ebe:	83 19       	sub	r24, r3
    8ec0:	07 1b       	sub	r16, r23
    8ec2:	a3 1c       	adc	r10, r3
    8ec4:	57 1e       	adc	r5, r23
    8ec6:	24 20       	and	r2, r4
    8ec8:	0e 22       	and	r0, r30
    8eca:	14 24       	eor	r1, r4
    8ecc:	39 26       	eor	r3, r25
    8ece:	7f 28       	or	r7, r15
    8ed0:	e8 2a       	or	r14, r24
    8ed2:	75 2d       	mov	r23, r5
    8ed4:	29 30       	cpi	r18, 0x09	; 9
    8ed6:	06 33       	cpi	r16, 0x36	; 54
    8ed8:	0f 36       	cpi	r16, 0x6F	; 111
    8eda:	45 39       	cpi	r20, 0x95	; 149
    8edc:	ad 3c       	cpi	r26, 0xCD	; 205
    8ede:	49 40       	sbci	r20, 0x09	; 9
    8ee0:	1b 44       	sbci	r17, 0x4B	; 75
    8ee2:	28 48       	sbci	r18, 0x88	; 136
    8ee4:	73 4c       	sbci	r23, 0xC3	; 195
    8ee6:	fe 50       	subi	r31, 0x0E	; 14
    8ee8:	cf 55       	subi	r28, 0x5F	; 95
    8eea:	ea 5a       	subi	r30, 0xAA	; 170
    8eec:	51 60       	ori	r21, 0x01	; 1
    8eee:	0c 66       	ori	r16, 0x6C	; 108
    8ef0:	1d 6c       	ori	r17, 0xCD	; 205
    8ef2:	8b 72       	andi	r24, 0x2B	; 43
    8ef4:	5a 79       	andi	r21, 0x9A	; 154
    8ef6:	92 80       	ldd	r9, Z+2	; 0x02
    8ef8:	37 88       	ldd	r3, Z+23	; 0x17
    8efa:	50 90 e5 98 	lds	r5, 0x98E5
    8efe:	fd a1       	ldd	r31, Y+37	; 0x25
    8f00:	9f ab       	std	Y+55, r25	; 0x37
    8f02:	d3 b5       	in	r29, 0x23	; 35
    8f04:	a3 c0       	rjmp	.+326    	; 0x904c <waves+0x4c>
	...

00009000 <waves>:
    9000:	00 03       	mulsu	r16, r16
    9002:	06 09       	sbc	r16, r6
    9004:	0c 10       	cpse	r0, r12
    9006:	13 16       	cp	r1, r19
    9008:	19 1c       	adc	r1, r9
    900a:	1f 22       	and	r1, r31
    900c:	25 28       	or	r2, r5
    900e:	2b 2e       	mov	r2, r27
    9010:	31 33       	cpi	r19, 0x31	; 49
    9012:	36 39       	cpi	r19, 0x96	; 150
    9014:	3c 3f       	cpi	r19, 0xFC	; 252
    9016:	41 44       	sbci	r20, 0x41	; 65
    9018:	47 49       	sbci	r20, 0x97	; 151
    901a:	4c 4e       	sbci	r20, 0xEC	; 236
    901c:	51 53       	subi	r21, 0x31	; 49
    901e:	55 58       	subi	r21, 0x85	; 133
    9020:	5a 5c       	subi	r21, 0xCA	; 202
    9022:	5e 60       	ori	r21, 0x0E	; 14
    9024:	62 64       	ori	r22, 0x42	; 66
    9026:	66 68       	ori	r22, 0x86	; 134
    9028:	6a 6b       	ori	r22, 0xBA	; 186
    902a:	6d 6f       	ori	r22, 0xFD	; 253
    902c:	70 71       	andi	r23, 0x10	; 16
    902e:	73 74       	andi	r23, 0x43	; 67
    9030:	75 76       	andi	r23, 0x65	; 101
    9032:	78 79       	andi	r23, 0x98	; 152
    9034:	7a 7a       	andi	r23, 0xAA	; 170
    9036:	7b 7c       	andi	r23, 0xCB	; 203
    9038:	7d 7d       	andi	r23, 0xDD	; 221
    903a:	7e 7e       	andi	r23, 0xEE	; 238
    903c:	7e 7f       	andi	r23, 0xFE	; 254
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7e 7e       	andi	r23, 0xEE	; 238
    9046:	7e 7d       	andi	r23, 0xDE	; 222
    9048:	7d 7c       	andi	r23, 0xCD	; 205
    904a:	7b 7a       	andi	r23, 0xAB	; 171
    904c:	7a 79       	andi	r23, 0x9A	; 154
    904e:	78 76       	andi	r23, 0x68	; 104
    9050:	75 74       	andi	r23, 0x45	; 69
    9052:	73 71       	andi	r23, 0x13	; 19
    9054:	70 6f       	ori	r23, 0xF0	; 240
    9056:	6d 6b       	ori	r22, 0xBD	; 189
    9058:	6a 68       	ori	r22, 0x8A	; 138
    905a:	66 64       	ori	r22, 0x46	; 70
    905c:	62 60       	ori	r22, 0x02	; 2
    905e:	5e 5c       	subi	r21, 0xCE	; 206
    9060:	5a 58       	subi	r21, 0x8A	; 138
    9062:	55 53       	subi	r21, 0x35	; 53
    9064:	51 4e       	sbci	r21, 0xE1	; 225
    9066:	4c 49       	sbci	r20, 0x9C	; 156
    9068:	47 44       	sbci	r20, 0x47	; 71
    906a:	41 3f       	cpi	r20, 0xF1	; 241
    906c:	3c 39       	cpi	r19, 0x9C	; 156
    906e:	36 33       	cpi	r19, 0x36	; 54
    9070:	31 2e       	mov	r3, r17
    9072:	2b 28       	or	r2, r11
    9074:	25 22       	and	r2, r21
    9076:	1f 1c       	adc	r1, r15
    9078:	19 16       	cp	r1, r25
    907a:	13 10       	cpse	r1, r3
    907c:	0c 09       	sbc	r16, r12
    907e:	06 03       	mulsu	r16, r22
    9080:	00 fd       	sbrc	r16, 0
    9082:	fa f7       	brpl	.-2      	; 0x9082 <waves+0x82>
    9084:	f4 f0       	brlt	.+60     	; 0x90c2 <waves+0xc2>
    9086:	ed ea       	ldi	r30, 0xAD	; 173
    9088:	e7 e4       	ldi	r30, 0x47	; 71
    908a:	e1 de       	rcall	.-574    	; 0x8e4e <steptable+0x46>
    908c:	db d8       	rcall	.-3658   	; 0x8244 <SetTile+0x12>
    908e:	d5 d2       	rcall	.+1450   	; 0x963a <waves+0x63a>
    9090:	cf cd       	rjmp	.-1122   	; 0x8c30 <ProcessMusic+0x302>
    9092:	ca c7       	rjmp	.+3988   	; 0xa028 <LBCopyChars+0x14>
    9094:	c4 c1       	rjmp	.+904    	; 0x941e <waves+0x41e>
    9096:	bf bc       	out	0x2f, r11	; 47
    9098:	b9 b7       	in	r27, 0x39	; 57
    909a:	b4 b2       	in	r11, 0x14	; 20
    909c:	af ad       	ldd	r26, Y+63	; 0x3f
    909e:	ab a8       	ldd	r10, Y+51	; 0x33
    90a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    90a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    90a4:	9e 9c       	mul	r9, r14
    90a6:	9a 98       	cbi	0x13, 2	; 19
    90a8:	96 95       	lsr	r25
    90aa:	93 91       	.word	0x9193	; ????
    90ac:	90 8f       	std	Z+24, r25	; 0x18
    90ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    90b0:	8b 8a       	std	Y+19, r8	; 0x13
    90b2:	88 87       	std	Y+8, r24	; 0x08
    90b4:	86 86       	std	Z+14, r8	; 0x0e
    90b6:	85 84       	ldd	r8, Z+13	; 0x0d
    90b8:	83 83       	std	Z+3, r24	; 0x03
    90ba:	82 82       	std	Z+2, r8	; 0x02
    90bc:	82 81       	ldd	r24, Z+2	; 0x02
    90be:	81 81       	ldd	r24, Z+1	; 0x01
    90c0:	81 81       	ldd	r24, Z+1	; 0x01
    90c2:	81 81       	ldd	r24, Z+1	; 0x01
    90c4:	82 82       	std	Z+2, r8	; 0x02
    90c6:	82 83       	std	Z+2, r24	; 0x02
    90c8:	83 84       	ldd	r8, Z+11	; 0x0b
    90ca:	85 86       	std	Z+13, r8	; 0x0d
    90cc:	86 87       	std	Z+14, r24	; 0x0e
    90ce:	88 8a       	std	Y+16, r8	; 0x10
    90d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    90d2:	8d 8f       	std	Y+29, r24	; 0x1d
    90d4:	90 91 93 95 	lds	r25, 0x9593
    90d8:	96 98       	cbi	0x12, 6	; 18
    90da:	9a 9c       	mul	r9, r10
    90dc:	9e a0       	ldd	r9, Y+38	; 0x26
    90de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    90e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    90e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    90e4:	af b2       	in	r10, 0x1f	; 31
    90e6:	b4 b7       	in	r27, 0x34	; 52
    90e8:	b9 bc       	out	0x29, r11	; 41
    90ea:	bf c1       	rjmp	.+894    	; 0x946a <waves+0x46a>
    90ec:	c4 c7       	rjmp	.+3976   	; 0xa076 <LBPrintStr+0x4a>
    90ee:	ca cd       	rjmp	.-1132   	; 0x8c84 <ProcessMusic+0x356>
    90f0:	cf d2       	rcall	.+1438   	; 0x9690 <waves+0x690>
    90f2:	d5 d8       	rcall	.-3670   	; 0x829e <WriteEeprom+0x6>
    90f4:	db de       	rcall	.-586    	; 0x8eac <steptable+0xa4>
    90f6:	e1 e4       	ldi	r30, 0x41	; 65
    90f8:	e7 ea       	ldi	r30, 0xA7	; 167
    90fa:	ed f0       	brhs	.+58     	; 0x9136 <waves+0x136>
    90fc:	f4 f7       	brge	.-4      	; 0x90fa <waves+0xfa>
    90fe:	fa fd       	.word	0xfdfa	; ????
    9100:	80 81       	ld	r24, Z
    9102:	82 83       	std	Z+2, r24	; 0x02
    9104:	84 85       	ldd	r24, Z+12	; 0x0c
    9106:	86 87       	std	Z+14, r24	; 0x0e
    9108:	88 89       	ldd	r24, Y+16	; 0x10
    910a:	8a 8b       	std	Y+18, r24	; 0x12
    910c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    910e:	8e 8f       	std	Y+30, r24	; 0x1e
    9110:	90 91 92 93 	lds	r25, 0x9392
    9114:	94 95       	.word	0x9594	; ????
    9116:	96 97       	sbiw	r26, 0x26	; 38
    9118:	98 99       	sbic	0x13, 0	; 19
    911a:	9a 9b       	sbis	0x13, 2	; 19
    911c:	9c 9d       	mul	r25, r12
    911e:	9e 9f       	mul	r25, r30
    9120:	a0 a1       	ldd	r26, Z+32	; 0x20
    9122:	a2 a3       	std	Z+34, r26	; 0x22
    9124:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9126:	a6 a7       	std	Z+46, r26	; 0x2e
    9128:	a8 a9       	ldd	r26, Y+48	; 0x30
    912a:	aa ab       	std	Y+50, r26	; 0x32
    912c:	ac ad       	ldd	r26, Y+60	; 0x3c
    912e:	ae af       	std	Y+62, r26	; 0x3e
    9130:	b0 b1       	in	r27, 0x00	; 0
    9132:	b2 b3       	in	r27, 0x12	; 18
    9134:	b4 b5       	in	r27, 0x24	; 36
    9136:	b6 b7       	in	r27, 0x36	; 54
    9138:	b8 b9       	out	0x08, r27	; 8
    913a:	ba bb       	out	0x1a, r27	; 26
    913c:	bc bd       	out	0x2c, r27	; 44
    913e:	be bf       	out	0x3e, r27	; 62
    9140:	c0 c1       	rjmp	.+896    	; 0x94c2 <waves+0x4c2>
    9142:	c2 c3       	rjmp	.+1924   	; 0x98c8 <waves+0x8c8>
    9144:	c4 c5       	rjmp	.+2952   	; 0x9cce <InitializeVideoMode+0xe>
    9146:	c6 c7       	rjmp	.+3980   	; 0xa0d4 <LBCollides+0x46>
    9148:	c8 c9       	rjmp	.-3184   	; 0x84da <EepromWriteBlock+0x86>
    914a:	ca cb       	rjmp	.-2156   	; 0x88e0 <TriggerNote+0x20>
    914c:	cc cd       	rjmp	.-1128   	; 0x8ce6 <ProcessMusic+0x3b8>
    914e:	ce cf       	rjmp	.-100    	; 0x90ec <waves+0xec>
    9150:	d0 d1       	rcall	.+928    	; 0x94f2 <waves+0x4f2>
    9152:	d2 d3       	rcall	.+1956   	; 0x98f8 <waves+0x8f8>
    9154:	d4 d5       	rcall	.+2984   	; 0x9cfe <DrawMap2+0x2a>
    9156:	d6 d7       	rcall	.+4012   	; 0xa104 <LBLineIntersect+0x22>
    9158:	d8 d9       	rcall	.-3152   	; 0x850a <EepromWriteBlock+0xb6>
    915a:	da db       	rcall	.-2124   	; 0x8910 <TriggerNote+0x50>
    915c:	dc dd       	rcall	.-1096   	; 0x8d16 <ProcessMusic+0x3e8>
    915e:	de df       	rcall	.-68     	; 0x911c <waves+0x11c>
    9160:	e0 e1       	ldi	r30, 0x10	; 16
    9162:	e2 e3       	ldi	r30, 0x32	; 50
    9164:	e4 e5       	ldi	r30, 0x54	; 84
    9166:	e6 e7       	ldi	r30, 0x76	; 118
    9168:	e8 e9       	ldi	r30, 0x98	; 152
    916a:	ea eb       	ldi	r30, 0xBA	; 186
    916c:	ec ed       	ldi	r30, 0xDC	; 220
    916e:	ee ef       	ldi	r30, 0xFE	; 254
    9170:	f0 f1       	brcs	.+124    	; 0x91ee <waves+0x1ee>
    9172:	f2 f3       	brmi	.-4      	; 0x9170 <waves+0x170>
    9174:	f4 f5       	brge	.+124    	; 0x91f2 <waves+0x1f2>
    9176:	f6 f7       	brtc	.-4      	; 0x9174 <waves+0x174>
    9178:	f8 f9       	.word	0xf9f8	; ????
    917a:	fa fb       	.word	0xfbfa	; ????
    917c:	fc fd       	.word	0xfdfc	; ????
    917e:	fe ff       	.word	0xfffe	; ????
    9180:	00 01       	movw	r0, r0
    9182:	02 03       	mulsu	r16, r18
    9184:	04 05       	cpc	r16, r4
    9186:	06 07       	cpc	r16, r22
    9188:	08 09       	sbc	r16, r8
    918a:	0a 0b       	sbc	r16, r26
    918c:	0c 0d       	add	r16, r12
    918e:	0e 0f       	add	r16, r30
    9190:	10 11       	cpse	r17, r0
    9192:	12 13       	cpse	r17, r18
    9194:	14 15       	cp	r17, r4
    9196:	16 17       	cp	r17, r22
    9198:	18 19       	sub	r17, r8
    919a:	1a 1b       	sub	r17, r26
    919c:	1c 1d       	adc	r17, r12
    919e:	1e 1f       	adc	r17, r30
    91a0:	20 21       	and	r18, r0
    91a2:	22 23       	and	r18, r18
    91a4:	24 25       	eor	r18, r4
    91a6:	26 27       	eor	r18, r22
    91a8:	28 29       	or	r18, r8
    91aa:	2a 2b       	or	r18, r26
    91ac:	2c 2d       	mov	r18, r12
    91ae:	2e 2f       	mov	r18, r30
    91b0:	30 31       	cpi	r19, 0x10	; 16
    91b2:	32 33       	cpi	r19, 0x32	; 50
    91b4:	34 35       	cpi	r19, 0x54	; 84
    91b6:	36 37       	cpi	r19, 0x76	; 118
    91b8:	38 39       	cpi	r19, 0x98	; 152
    91ba:	3a 3b       	cpi	r19, 0xBA	; 186
    91bc:	3c 3d       	cpi	r19, 0xDC	; 220
    91be:	3e 3f       	cpi	r19, 0xFE	; 254
    91c0:	40 41       	sbci	r20, 0x10	; 16
    91c2:	42 43       	sbci	r20, 0x32	; 50
    91c4:	44 45       	sbci	r20, 0x54	; 84
    91c6:	46 47       	sbci	r20, 0x76	; 118
    91c8:	48 49       	sbci	r20, 0x98	; 152
    91ca:	4a 4b       	sbci	r20, 0xBA	; 186
    91cc:	4c 4d       	sbci	r20, 0xDC	; 220
    91ce:	4e 4f       	sbci	r20, 0xFE	; 254
    91d0:	50 51       	subi	r21, 0x10	; 16
    91d2:	52 53       	subi	r21, 0x32	; 50
    91d4:	54 55       	subi	r21, 0x54	; 84
    91d6:	56 57       	subi	r21, 0x76	; 118
    91d8:	58 59       	subi	r21, 0x98	; 152
    91da:	5a 5b       	subi	r21, 0xBA	; 186
    91dc:	5c 5d       	subi	r21, 0xDC	; 220
    91de:	5e 5f       	subi	r21, 0xFE	; 254
    91e0:	60 61       	ori	r22, 0x10	; 16
    91e2:	62 63       	ori	r22, 0x32	; 50
    91e4:	64 65       	ori	r22, 0x54	; 84
    91e6:	66 67       	ori	r22, 0x76	; 118
    91e8:	68 69       	ori	r22, 0x98	; 152
    91ea:	6a 6b       	ori	r22, 0xBA	; 186
    91ec:	6c 6d       	ori	r22, 0xDC	; 220
    91ee:	6e 6f       	ori	r22, 0xFE	; 254
    91f0:	70 71       	andi	r23, 0x10	; 16
    91f2:	72 73       	andi	r23, 0x32	; 50
    91f4:	74 75       	andi	r23, 0x54	; 84
    91f6:	76 77       	andi	r23, 0x76	; 118
    91f8:	78 79       	andi	r23, 0x98	; 152
    91fa:	7a 7b       	andi	r23, 0xBA	; 186
    91fc:	7c 7d       	andi	r23, 0xDC	; 220
    91fe:	7e 7f       	andi	r23, 0xFE	; 254
    9200:	00 02       	muls	r16, r16
    9202:	04 06       	cpc	r0, r20
    9204:	08 0a       	sbc	r0, r24
    9206:	0c 0e       	add	r0, r28
    9208:	10 12       	cpse	r1, r16
    920a:	14 16       	cp	r1, r20
    920c:	18 1a       	sub	r1, r24
    920e:	1c 1e       	adc	r1, r28
    9210:	20 22       	and	r2, r16
    9212:	24 26       	eor	r2, r20
    9214:	28 2a       	or	r2, r24
    9216:	2c 2e       	mov	r2, r28
    9218:	30 32       	cpi	r19, 0x20	; 32
    921a:	34 36       	cpi	r19, 0x64	; 100
    921c:	38 3a       	cpi	r19, 0xA8	; 168
    921e:	3c 3e       	cpi	r19, 0xEC	; 236
    9220:	40 42       	sbci	r20, 0x20	; 32
    9222:	44 46       	sbci	r20, 0x64	; 100
    9224:	48 4a       	sbci	r20, 0xA8	; 168
    9226:	4c 4e       	sbci	r20, 0xEC	; 236
    9228:	50 52       	subi	r21, 0x20	; 32
    922a:	54 56       	subi	r21, 0x64	; 100
    922c:	58 5a       	subi	r21, 0xA8	; 168
    922e:	5c 5e       	subi	r21, 0xEC	; 236
    9230:	60 62       	ori	r22, 0x20	; 32
    9232:	64 66       	ori	r22, 0x64	; 100
    9234:	68 6a       	ori	r22, 0xA8	; 168
    9236:	6c 6e       	ori	r22, 0xEC	; 236
    9238:	70 72       	andi	r23, 0x20	; 32
    923a:	74 76       	andi	r23, 0x64	; 100
    923c:	78 7a       	andi	r23, 0xA8	; 168
    923e:	7c 7e       	andi	r23, 0xEC	; 236
    9240:	7f 7d       	andi	r23, 0xDF	; 223
    9242:	7b 79       	andi	r23, 0x9B	; 155
    9244:	77 75       	andi	r23, 0x57	; 87
    9246:	73 71       	andi	r23, 0x13	; 19
    9248:	6f 6d       	ori	r22, 0xDF	; 223
    924a:	6b 69       	ori	r22, 0x9B	; 155
    924c:	67 65       	ori	r22, 0x57	; 87
    924e:	63 61       	ori	r22, 0x13	; 19
    9250:	5f 5d       	subi	r21, 0xDF	; 223
    9252:	5b 59       	subi	r21, 0x9B	; 155
    9254:	57 55       	subi	r21, 0x57	; 87
    9256:	53 51       	subi	r21, 0x13	; 19
    9258:	4f 4d       	sbci	r20, 0xDF	; 223
    925a:	4b 49       	sbci	r20, 0x9B	; 155
    925c:	47 45       	sbci	r20, 0x57	; 87
    925e:	43 41       	sbci	r20, 0x13	; 19
    9260:	3f 3d       	cpi	r19, 0xDF	; 223
    9262:	3b 39       	cpi	r19, 0x9B	; 155
    9264:	37 35       	cpi	r19, 0x57	; 87
    9266:	33 31       	cpi	r19, 0x13	; 19
    9268:	2f 2d       	mov	r18, r15
    926a:	2b 29       	or	r18, r11
    926c:	27 25       	eor	r18, r7
    926e:	23 21       	and	r18, r3
    9270:	1f 1d       	adc	r17, r15
    9272:	1b 19       	sub	r17, r11
    9274:	17 15       	cp	r17, r7
    9276:	13 11       	cpse	r17, r3
    9278:	0f 0d       	add	r16, r15
    927a:	0b 09       	sbc	r16, r11
    927c:	07 05       	cpc	r16, r7
    927e:	03 01       	movw	r0, r6
    9280:	ff fd       	.word	0xfdff	; ????
    9282:	fb f9       	.word	0xf9fb	; ????
    9284:	f7 f5       	brid	.+124    	; 0x9302 <waves+0x302>
    9286:	f3 f1       	brvs	.+124    	; 0x9304 <waves+0x304>
    9288:	ef ed       	ldi	r30, 0xDF	; 223
    928a:	eb e9       	ldi	r30, 0x9B	; 155
    928c:	e7 e5       	ldi	r30, 0x57	; 87
    928e:	e3 e1       	ldi	r30, 0x13	; 19
    9290:	df dd       	rcall	.-1090   	; 0x8e50 <steptable+0x48>
    9292:	db d9       	rcall	.-3146   	; 0x864a <PatchCommand11+0x4e>
    9294:	d7 d5       	rcall	.+2990   	; 0x9e44 <doFade+0x6>
    9296:	d3 d1       	rcall	.+934    	; 0x963e <waves+0x63e>
    9298:	cf cd       	rjmp	.-1122   	; 0x8e38 <steptable+0x30>
    929a:	cb c9       	rjmp	.-3178   	; 0x8632 <PatchCommand11+0x36>
    929c:	c7 c5       	rjmp	.+2958   	; 0x9e2c <WaitVsync+0x1c>
    929e:	c3 c1       	rjmp	.+902    	; 0x9626 <waves+0x626>
    92a0:	bf bd       	out	0x2f, r27	; 47
    92a2:	bb b9       	out	0x0b, r27	; 11
    92a4:	b7 b5       	in	r27, 0x27	; 39
    92a6:	b3 b1       	in	r27, 0x03	; 3
    92a8:	af ad       	ldd	r26, Y+63	; 0x3f
    92aa:	ab a9       	ldd	r26, Y+51	; 0x33
    92ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    92ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    92b0:	9f 9d       	mul	r25, r15
    92b2:	9b 99       	sbic	0x13, 3	; 19
    92b4:	97 95       	ror	r25
    92b6:	93 91       	.word	0x9193	; ????
    92b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    92ba:	8b 89       	ldd	r24, Y+19	; 0x13
    92bc:	87 85       	ldd	r24, Z+15	; 0x0f
    92be:	83 81       	ldd	r24, Z+3	; 0x03
    92c0:	80 82       	st	Z, r8
    92c2:	84 86       	std	Z+12, r8	; 0x0c
    92c4:	88 8a       	std	Y+16, r8	; 0x10
    92c6:	8c 8e       	std	Y+28, r8	; 0x1c
    92c8:	90 92 94 96 	sts	0x9694, r9
    92cc:	98 9a       	sbi	0x13, 0	; 19
    92ce:	9c 9e       	mul	r9, r28
    92d0:	a0 a2       	std	Z+32, r10	; 0x20
    92d2:	a4 a6       	std	Z+44, r10	; 0x2c
    92d4:	a8 aa       	std	Y+48, r10	; 0x30
    92d6:	ac ae       	std	Y+60, r10	; 0x3c
    92d8:	b0 b2       	in	r11, 0x10	; 16
    92da:	b4 b6       	in	r11, 0x34	; 52
    92dc:	b8 ba       	out	0x18, r11	; 24
    92de:	bc be       	out	0x3c, r11	; 60
    92e0:	c0 c2       	rjmp	.+1408   	; 0x9862 <waves+0x862>
    92e2:	c4 c6       	rjmp	.+3464   	; 0xa06c <LBPrintStr+0x40>
    92e4:	c8 ca       	rjmp	.-2672   	; 0x8876 <TriggerCommon+0x110>
    92e6:	cc ce       	rjmp	.-616    	; 0x9080 <waves+0x80>
    92e8:	d0 d2       	rcall	.+1440   	; 0x988a <waves+0x88a>
    92ea:	d4 d6       	rcall	.+3496   	; 0xa094 <LBCollides+0x6>
    92ec:	d8 da       	rcall	.-2640   	; 0x889e <TriggerCommon+0x138>
    92ee:	dc de       	rcall	.-584    	; 0x90a8 <waves+0xa8>
    92f0:	e0 e2       	ldi	r30, 0x20	; 32
    92f2:	e4 e6       	ldi	r30, 0x64	; 100
    92f4:	e8 ea       	ldi	r30, 0xA8	; 168
    92f6:	ec ee       	ldi	r30, 0xEC	; 236
    92f8:	f0 f2       	brcs	.-68     	; 0x92b6 <waves+0x2b6>
    92fa:	f4 f6       	brge	.-68     	; 0x92b8 <waves+0x2b8>
    92fc:	f8 fa       	.word	0xfaf8	; ????
    92fe:	fc fe       	.word	0xfefc	; ????
    9300:	7f 7f       	andi	r23, 0xFF	; 255
    9302:	7f 7f       	andi	r23, 0xFF	; 255
    9304:	7f 7f       	andi	r23, 0xFF	; 255
    9306:	7f 7f       	andi	r23, 0xFF	; 255
    9308:	7f 7f       	andi	r23, 0xFF	; 255
    930a:	7f 7f       	andi	r23, 0xFF	; 255
    930c:	7f 7f       	andi	r23, 0xFF	; 255
    930e:	7f 7f       	andi	r23, 0xFF	; 255
    9310:	7f 7f       	andi	r23, 0xFF	; 255
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	80 80       	ld	r8, Z
    9342:	80 80       	ld	r8, Z
    9344:	80 80       	ld	r8, Z
    9346:	80 80       	ld	r8, Z
    9348:	80 80       	ld	r8, Z
    934a:	80 80       	ld	r8, Z
    934c:	80 80       	ld	r8, Z
    934e:	80 80       	ld	r8, Z
    9350:	80 80       	ld	r8, Z
    9352:	80 80       	ld	r8, Z
    9354:	80 80       	ld	r8, Z
    9356:	80 80       	ld	r8, Z
    9358:	80 80       	ld	r8, Z
    935a:	80 80       	ld	r8, Z
    935c:	80 80       	ld	r8, Z
    935e:	80 80       	ld	r8, Z
    9360:	80 80       	ld	r8, Z
    9362:	80 80       	ld	r8, Z
    9364:	80 80       	ld	r8, Z
    9366:	80 80       	ld	r8, Z
    9368:	80 80       	ld	r8, Z
    936a:	80 80       	ld	r8, Z
    936c:	80 80       	ld	r8, Z
    936e:	80 80       	ld	r8, Z
    9370:	80 80       	ld	r8, Z
    9372:	80 80       	ld	r8, Z
    9374:	80 80       	ld	r8, Z
    9376:	80 80       	ld	r8, Z
    9378:	80 80       	ld	r8, Z
    937a:	80 80       	ld	r8, Z
    937c:	80 80       	ld	r8, Z
    937e:	80 80       	ld	r8, Z
    9380:	80 80       	ld	r8, Z
    9382:	80 80       	ld	r8, Z
    9384:	80 80       	ld	r8, Z
    9386:	80 80       	ld	r8, Z
    9388:	80 80       	ld	r8, Z
    938a:	80 80       	ld	r8, Z
    938c:	80 80       	ld	r8, Z
    938e:	80 80       	ld	r8, Z
    9390:	80 80       	ld	r8, Z
    9392:	80 80       	ld	r8, Z
    9394:	80 80       	ld	r8, Z
    9396:	80 80       	ld	r8, Z
    9398:	80 80       	ld	r8, Z
    939a:	80 80       	ld	r8, Z
    939c:	80 80       	ld	r8, Z
    939e:	80 80       	ld	r8, Z
    93a0:	80 80       	ld	r8, Z
    93a2:	80 80       	ld	r8, Z
    93a4:	80 80       	ld	r8, Z
    93a6:	80 80       	ld	r8, Z
    93a8:	80 80       	ld	r8, Z
    93aa:	80 80       	ld	r8, Z
    93ac:	80 80       	ld	r8, Z
    93ae:	80 80       	ld	r8, Z
    93b0:	80 80       	ld	r8, Z
    93b2:	80 80       	ld	r8, Z
    93b4:	80 80       	ld	r8, Z
    93b6:	80 80       	ld	r8, Z
    93b8:	80 80       	ld	r8, Z
    93ba:	80 80       	ld	r8, Z
    93bc:	80 80       	ld	r8, Z
    93be:	80 80       	ld	r8, Z
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 80       	ld	r8, Z
    93f6:	80 80       	ld	r8, Z
    93f8:	80 80       	ld	r8, Z
    93fa:	80 80       	ld	r8, Z
    93fc:	80 80       	ld	r8, Z
    93fe:	80 80       	ld	r8, Z
    9400:	7f 7f       	andi	r23, 0xFF	; 255
    9402:	7f 7f       	andi	r23, 0xFF	; 255
    9404:	7f 7f       	andi	r23, 0xFF	; 255
    9406:	7f 7f       	andi	r23, 0xFF	; 255
    9408:	7f 7f       	andi	r23, 0xFF	; 255
    940a:	7f 7f       	andi	r23, 0xFF	; 255
    940c:	7f 7f       	andi	r23, 0xFF	; 255
    940e:	7f 7f       	andi	r23, 0xFF	; 255
    9410:	7f 7f       	andi	r23, 0xFF	; 255
    9412:	7f 7f       	andi	r23, 0xFF	; 255
    9414:	7f 7f       	andi	r23, 0xFF	; 255
    9416:	7f 7f       	andi	r23, 0xFF	; 255
    9418:	7f 7f       	andi	r23, 0xFF	; 255
    941a:	7f 7f       	andi	r23, 0xFF	; 255
    941c:	7f 7f       	andi	r23, 0xFF	; 255
    941e:	7f 7f       	andi	r23, 0xFF	; 255
    9420:	7f 7f       	andi	r23, 0xFF	; 255
    9422:	7f 7f       	andi	r23, 0xFF	; 255
    9424:	7f 7f       	andi	r23, 0xFF	; 255
    9426:	7f 7f       	andi	r23, 0xFF	; 255
    9428:	7f 7f       	andi	r23, 0xFF	; 255
    942a:	7f 7f       	andi	r23, 0xFF	; 255
    942c:	7f 7f       	andi	r23, 0xFF	; 255
    942e:	7f 7f       	andi	r23, 0xFF	; 255
    9430:	7f 7f       	andi	r23, 0xFF	; 255
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7f       	andi	r23, 0xFF	; 255
    944e:	7f 7f       	andi	r23, 0xFF	; 255
    9450:	7f 7f       	andi	r23, 0xFF	; 255
    9452:	7f 7f       	andi	r23, 0xFF	; 255
    9454:	7f 7f       	andi	r23, 0xFF	; 255
    9456:	7f 7f       	andi	r23, 0xFF	; 255
    9458:	7f 7f       	andi	r23, 0xFF	; 255
    945a:	7f 7f       	andi	r23, 0xFF	; 255
    945c:	7f 7f       	andi	r23, 0xFF	; 255
    945e:	7f 7f       	andi	r23, 0xFF	; 255
    9460:	7f 7f       	andi	r23, 0xFF	; 255
    9462:	7f 7f       	andi	r23, 0xFF	; 255
    9464:	7f 7f       	andi	r23, 0xFF	; 255
    9466:	7f 7f       	andi	r23, 0xFF	; 255
    9468:	7f 7f       	andi	r23, 0xFF	; 255
    946a:	7f 7f       	andi	r23, 0xFF	; 255
    946c:	7f 7f       	andi	r23, 0xFF	; 255
    946e:	7f 7f       	andi	r23, 0xFF	; 255
    9470:	7f 7f       	andi	r23, 0xFF	; 255
    9472:	7f 7f       	andi	r23, 0xFF	; 255
    9474:	7f 7f       	andi	r23, 0xFF	; 255
    9476:	7f 7f       	andi	r23, 0xFF	; 255
    9478:	7f 7f       	andi	r23, 0xFF	; 255
    947a:	7f 7f       	andi	r23, 0xFF	; 255
    947c:	7f 7f       	andi	r23, 0xFF	; 255
    947e:	7f 7f       	andi	r23, 0xFF	; 255
    9480:	80 80       	ld	r8, Z
    9482:	80 80       	ld	r8, Z
    9484:	80 80       	ld	r8, Z
    9486:	80 80       	ld	r8, Z
    9488:	80 80       	ld	r8, Z
    948a:	80 80       	ld	r8, Z
    948c:	80 80       	ld	r8, Z
    948e:	80 80       	ld	r8, Z
    9490:	80 80       	ld	r8, Z
    9492:	80 80       	ld	r8, Z
    9494:	80 80       	ld	r8, Z
    9496:	80 80       	ld	r8, Z
    9498:	80 80       	ld	r8, Z
    949a:	80 80       	ld	r8, Z
    949c:	80 80       	ld	r8, Z
    949e:	80 80       	ld	r8, Z
    94a0:	80 80       	ld	r8, Z
    94a2:	80 80       	ld	r8, Z
    94a4:	80 80       	ld	r8, Z
    94a6:	80 80       	ld	r8, Z
    94a8:	80 80       	ld	r8, Z
    94aa:	80 80       	ld	r8, Z
    94ac:	80 80       	ld	r8, Z
    94ae:	80 80       	ld	r8, Z
    94b0:	80 80       	ld	r8, Z
    94b2:	80 80       	ld	r8, Z
    94b4:	80 80       	ld	r8, Z
    94b6:	80 80       	ld	r8, Z
    94b8:	80 80       	ld	r8, Z
    94ba:	80 80       	ld	r8, Z
    94bc:	80 80       	ld	r8, Z
    94be:	80 80       	ld	r8, Z
    94c0:	80 80       	ld	r8, Z
    94c2:	80 80       	ld	r8, Z
    94c4:	80 80       	ld	r8, Z
    94c6:	80 80       	ld	r8, Z
    94c8:	80 80       	ld	r8, Z
    94ca:	80 80       	ld	r8, Z
    94cc:	80 80       	ld	r8, Z
    94ce:	80 80       	ld	r8, Z
    94d0:	80 80       	ld	r8, Z
    94d2:	80 80       	ld	r8, Z
    94d4:	80 80       	ld	r8, Z
    94d6:	80 80       	ld	r8, Z
    94d8:	80 80       	ld	r8, Z
    94da:	80 80       	ld	r8, Z
    94dc:	80 80       	ld	r8, Z
    94de:	80 80       	ld	r8, Z
    94e0:	80 80       	ld	r8, Z
    94e2:	80 80       	ld	r8, Z
    94e4:	80 80       	ld	r8, Z
    94e6:	80 80       	ld	r8, Z
    94e8:	80 80       	ld	r8, Z
    94ea:	80 80       	ld	r8, Z
    94ec:	80 80       	ld	r8, Z
    94ee:	80 80       	ld	r8, Z
    94f0:	80 80       	ld	r8, Z
    94f2:	80 80       	ld	r8, Z
    94f4:	80 80       	ld	r8, Z
    94f6:	80 80       	ld	r8, Z
    94f8:	80 80       	ld	r8, Z
    94fa:	80 80       	ld	r8, Z
    94fc:	80 80       	ld	r8, Z
    94fe:	80 80       	ld	r8, Z
    9500:	7f 7f       	andi	r23, 0xFF	; 255
    9502:	7f 7f       	andi	r23, 0xFF	; 255
    9504:	7f 7f       	andi	r23, 0xFF	; 255
    9506:	7f 7f       	andi	r23, 0xFF	; 255
    9508:	7f 7f       	andi	r23, 0xFF	; 255
    950a:	7f 7f       	andi	r23, 0xFF	; 255
    950c:	7f 7f       	andi	r23, 0xFF	; 255
    950e:	7f 7f       	andi	r23, 0xFF	; 255
    9510:	7f 7f       	andi	r23, 0xFF	; 255
    9512:	7f 7f       	andi	r23, 0xFF	; 255
    9514:	7f 7f       	andi	r23, 0xFF	; 255
    9516:	7f 7f       	andi	r23, 0xFF	; 255
    9518:	7f 7f       	andi	r23, 0xFF	; 255
    951a:	7f 7f       	andi	r23, 0xFF	; 255
    951c:	7f 7f       	andi	r23, 0xFF	; 255
    951e:	7f 7f       	andi	r23, 0xFF	; 255
    9520:	7f 7f       	andi	r23, 0xFF	; 255
    9522:	7f 7f       	andi	r23, 0xFF	; 255
    9524:	7f 7f       	andi	r23, 0xFF	; 255
    9526:	7f 7f       	andi	r23, 0xFF	; 255
    9528:	7f 7f       	andi	r23, 0xFF	; 255
    952a:	7f 7f       	andi	r23, 0xFF	; 255
    952c:	7f 7f       	andi	r23, 0xFF	; 255
    952e:	7f 7f       	andi	r23, 0xFF	; 255
    9530:	7f 7f       	andi	r23, 0xFF	; 255
    9532:	7f 7f       	andi	r23, 0xFF	; 255
    9534:	7f 7f       	andi	r23, 0xFF	; 255
    9536:	7f 7f       	andi	r23, 0xFF	; 255
    9538:	7f 7f       	andi	r23, 0xFF	; 255
    953a:	7f 7f       	andi	r23, 0xFF	; 255
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7f 7f       	andi	r23, 0xFF	; 255
    9548:	7f 7f       	andi	r23, 0xFF	; 255
    954a:	7f 7f       	andi	r23, 0xFF	; 255
    954c:	7f 7f       	andi	r23, 0xFF	; 255
    954e:	7f 7f       	andi	r23, 0xFF	; 255
    9550:	7f 7f       	andi	r23, 0xFF	; 255
    9552:	7f 7f       	andi	r23, 0xFF	; 255
    9554:	7f 7f       	andi	r23, 0xFF	; 255
    9556:	7f 7f       	andi	r23, 0xFF	; 255
    9558:	7f 7f       	andi	r23, 0xFF	; 255
    955a:	7f 7f       	andi	r23, 0xFF	; 255
    955c:	7f 7f       	andi	r23, 0xFF	; 255
    955e:	7f 7f       	andi	r23, 0xFF	; 255
    9560:	7f 7f       	andi	r23, 0xFF	; 255
    9562:	7f 7f       	andi	r23, 0xFF	; 255
    9564:	7f 7f       	andi	r23, 0xFF	; 255
    9566:	7f 7f       	andi	r23, 0xFF	; 255
    9568:	7f 7f       	andi	r23, 0xFF	; 255
    956a:	7f 7f       	andi	r23, 0xFF	; 255
    956c:	7f 7f       	andi	r23, 0xFF	; 255
    956e:	7f 7f       	andi	r23, 0xFF	; 255
    9570:	7f 7f       	andi	r23, 0xFF	; 255
    9572:	7f 7f       	andi	r23, 0xFF	; 255
    9574:	7f 7f       	andi	r23, 0xFF	; 255
    9576:	7f 7f       	andi	r23, 0xFF	; 255
    9578:	7f 7f       	andi	r23, 0xFF	; 255
    957a:	7f 7f       	andi	r23, 0xFF	; 255
    957c:	7f 7f       	andi	r23, 0xFF	; 255
    957e:	7f 7f       	andi	r23, 0xFF	; 255
    9580:	7f 7f       	andi	r23, 0xFF	; 255
    9582:	7f 7f       	andi	r23, 0xFF	; 255
    9584:	7f 7f       	andi	r23, 0xFF	; 255
    9586:	7f 7f       	andi	r23, 0xFF	; 255
    9588:	7f 7f       	andi	r23, 0xFF	; 255
    958a:	7f 7f       	andi	r23, 0xFF	; 255
    958c:	7f 7f       	andi	r23, 0xFF	; 255
    958e:	7f 7f       	andi	r23, 0xFF	; 255
    9590:	7f 7f       	andi	r23, 0xFF	; 255
    9592:	7f 7f       	andi	r23, 0xFF	; 255
    9594:	7f 7f       	andi	r23, 0xFF	; 255
    9596:	7f 7f       	andi	r23, 0xFF	; 255
    9598:	7f 7f       	andi	r23, 0xFF	; 255
    959a:	7f 7f       	andi	r23, 0xFF	; 255
    959c:	7f 7f       	andi	r23, 0xFF	; 255
    959e:	7f 7f       	andi	r23, 0xFF	; 255
    95a0:	7f 7f       	andi	r23, 0xFF	; 255
    95a2:	7f 7f       	andi	r23, 0xFF	; 255
    95a4:	7f 7f       	andi	r23, 0xFF	; 255
    95a6:	7f 7f       	andi	r23, 0xFF	; 255
    95a8:	7f 7f       	andi	r23, 0xFF	; 255
    95aa:	7f 7f       	andi	r23, 0xFF	; 255
    95ac:	7f 7f       	andi	r23, 0xFF	; 255
    95ae:	7f 7f       	andi	r23, 0xFF	; 255
    95b0:	7f 7f       	andi	r23, 0xFF	; 255
    95b2:	7f 7f       	andi	r23, 0xFF	; 255
    95b4:	7f 7f       	andi	r23, 0xFF	; 255
    95b6:	7f 7f       	andi	r23, 0xFF	; 255
    95b8:	7f 7f       	andi	r23, 0xFF	; 255
    95ba:	7f 7f       	andi	r23, 0xFF	; 255
    95bc:	7f 7f       	andi	r23, 0xFF	; 255
    95be:	7f 7f       	andi	r23, 0xFF	; 255
    95c0:	80 80       	ld	r8, Z
    95c2:	80 80       	ld	r8, Z
    95c4:	80 80       	ld	r8, Z
    95c6:	80 80       	ld	r8, Z
    95c8:	80 80       	ld	r8, Z
    95ca:	80 80       	ld	r8, Z
    95cc:	80 80       	ld	r8, Z
    95ce:	80 80       	ld	r8, Z
    95d0:	80 80       	ld	r8, Z
    95d2:	80 80       	ld	r8, Z
    95d4:	80 80       	ld	r8, Z
    95d6:	80 80       	ld	r8, Z
    95d8:	80 80       	ld	r8, Z
    95da:	80 80       	ld	r8, Z
    95dc:	80 80       	ld	r8, Z
    95de:	80 80       	ld	r8, Z
    95e0:	80 80       	ld	r8, Z
    95e2:	80 80       	ld	r8, Z
    95e4:	80 80       	ld	r8, Z
    95e6:	80 80       	ld	r8, Z
    95e8:	80 80       	ld	r8, Z
    95ea:	80 80       	ld	r8, Z
    95ec:	80 80       	ld	r8, Z
    95ee:	80 80       	ld	r8, Z
    95f0:	80 80       	ld	r8, Z
    95f2:	80 80       	ld	r8, Z
    95f4:	80 80       	ld	r8, Z
    95f6:	80 80       	ld	r8, Z
    95f8:	80 80       	ld	r8, Z
    95fa:	80 80       	ld	r8, Z
    95fc:	80 80       	ld	r8, Z
    95fe:	80 80       	ld	r8, Z
    9600:	03 09       	sbc	r16, r3
    9602:	13 1e       	adc	r1, r19
    9604:	28 31       	cpi	r18, 0x18	; 24
    9606:	3a 40       	sbci	r19, 0x0A	; 10
    9608:	46 4c       	sbci	r20, 0xC6	; 198
    960a:	50 54       	subi	r21, 0x40	; 64
    960c:	58 5b       	subi	r21, 0xB8	; 184
    960e:	5e 61       	ori	r21, 0x1E	; 30
    9610:	63 65       	ori	r22, 0x53	; 83
    9612:	67 69       	ori	r22, 0x97	; 151
    9614:	6b 6c       	ori	r22, 0xCB	; 203
    9616:	6e 6f       	ori	r22, 0xFE	; 254
    9618:	70 71       	andi	r23, 0x10	; 16
    961a:	72 73       	andi	r23, 0x32	; 50
    961c:	74 75       	andi	r23, 0x54	; 84
    961e:	76 77       	andi	r23, 0x76	; 118
    9620:	77 78       	andi	r23, 0x87	; 135
    9622:	79 79       	andi	r23, 0x99	; 153
    9624:	7a 7a       	andi	r23, 0xAA	; 170
    9626:	7b 7b       	andi	r23, 0xBB	; 187
    9628:	7c 7c       	andi	r23, 0xCC	; 204
    962a:	7c 7d       	andi	r23, 0xDC	; 220
    962c:	7d 7d       	andi	r23, 0xDD	; 221
    962e:	7e 7e       	andi	r23, 0xEE	; 238
    9630:	7e 7e       	andi	r23, 0xEE	; 238
    9632:	7f 7f       	andi	r23, 0xFF	; 255
    9634:	7f 7f       	andi	r23, 0xFF	; 255
    9636:	7f 7f       	andi	r23, 0xFF	; 255
    9638:	7f 7f       	andi	r23, 0xFF	; 255
    963a:	7f 7f       	andi	r23, 0xFF	; 255
    963c:	7f 7f       	andi	r23, 0xFF	; 255
    963e:	7f 7f       	andi	r23, 0xFF	; 255
    9640:	7f 7f       	andi	r23, 0xFF	; 255
    9642:	7f 7f       	andi	r23, 0xFF	; 255
    9644:	7f 7f       	andi	r23, 0xFF	; 255
    9646:	7f 7f       	andi	r23, 0xFF	; 255
    9648:	7f 7f       	andi	r23, 0xFF	; 255
    964a:	7f 7f       	andi	r23, 0xFF	; 255
    964c:	7f 7e       	andi	r23, 0xEF	; 239
    964e:	7e 7e       	andi	r23, 0xEE	; 238
    9650:	7e 7d       	andi	r23, 0xDE	; 222
    9652:	7d 7d       	andi	r23, 0xDD	; 221
    9654:	7c 7c       	andi	r23, 0xCC	; 204
    9656:	7c 7b       	andi	r23, 0xBC	; 188
    9658:	7b 7a       	andi	r23, 0xAB	; 171
    965a:	7a 79       	andi	r23, 0x9A	; 154
    965c:	79 78       	andi	r23, 0x89	; 137
    965e:	77 77       	andi	r23, 0x77	; 119
    9660:	76 75       	andi	r23, 0x56	; 86
    9662:	74 73       	andi	r23, 0x34	; 52
    9664:	72 71       	andi	r23, 0x12	; 18
    9666:	70 6f       	ori	r23, 0xF0	; 240
    9668:	6e 6c       	ori	r22, 0xCE	; 206
    966a:	6b 69       	ori	r22, 0x9B	; 155
    966c:	67 65       	ori	r22, 0x57	; 87
    966e:	63 61       	ori	r22, 0x13	; 19
    9670:	5e 5b       	subi	r21, 0xBE	; 190
    9672:	58 54       	subi	r21, 0x48	; 72
    9674:	50 4c       	sbci	r21, 0xC0	; 192
    9676:	46 40       	sbci	r20, 0x06	; 6
    9678:	3a 31       	cpi	r19, 0x1A	; 26
    967a:	28 1e       	adc	r2, r24
    967c:	13 09       	sbc	r17, r3
    967e:	03 00       	.word	0x0003	; ????
    9680:	c6 cc       	rjmp	.-1652   	; 0x900e <waves+0xe>
    9682:	d5 db       	rcall	.-2134   	; 0x8e2e <steptable+0x26>
    9684:	df e3       	ldi	r29, 0x3F	; 63
    9686:	e5 e7       	ldi	r30, 0x75	; 117
    9688:	e9 ea       	ldi	r30, 0xA9	; 169
    968a:	eb ec       	ldi	r30, 0xCB	; 203
    968c:	ed ee       	ldi	r30, 0xED	; 237
    968e:	ef ef       	ldi	r30, 0xFF	; 255
    9690:	f0 f0       	brcs	.+60     	; 0x96ce <waves+0x6ce>
    9692:	f0 f1       	brcs	.+124    	; 0x9710 <waves+0x710>
    9694:	f1 f1       	breq	.+124    	; 0x9712 <waves+0x712>
    9696:	f1 f2       	breq	.-68     	; 0x9654 <waves+0x654>
    9698:	f2 f2       	brmi	.-68     	; 0x9656 <waves+0x656>
    969a:	f2 f2       	brmi	.-68     	; 0x9658 <waves+0x658>
    969c:	f2 f2       	brmi	.-68     	; 0x965a <waves+0x65a>
    969e:	f2 f3       	brmi	.-4      	; 0x969c <waves+0x69c>
    96a0:	f3 f3       	brvs	.-4      	; 0x969e <waves+0x69e>
    96a2:	f3 f3       	brvs	.-4      	; 0x96a0 <waves+0x6a0>
    96a4:	f3 f3       	brvs	.-4      	; 0x96a2 <waves+0x6a2>
    96a6:	f3 f3       	brvs	.-4      	; 0x96a4 <waves+0x6a4>
    96a8:	f3 f3       	brvs	.-4      	; 0x96a6 <waves+0x6a6>
    96aa:	f3 f3       	brvs	.-4      	; 0x96a8 <waves+0x6a8>
    96ac:	f3 f3       	brvs	.-4      	; 0x96aa <waves+0x6aa>
    96ae:	f3 f3       	brvs	.-4      	; 0x96ac <waves+0x6ac>
    96b0:	f3 f3       	brvs	.-4      	; 0x96ae <waves+0x6ae>
    96b2:	f3 f3       	brvs	.-4      	; 0x96b0 <waves+0x6b0>
    96b4:	f3 f3       	brvs	.-4      	; 0x96b2 <waves+0x6b2>
    96b6:	f3 f3       	brvs	.-4      	; 0x96b4 <waves+0x6b4>
    96b8:	f3 f3       	brvs	.-4      	; 0x96b6 <waves+0x6b6>
    96ba:	f3 f3       	brvs	.-4      	; 0x96b8 <waves+0x6b8>
    96bc:	f3 f3       	brvs	.-4      	; 0x96ba <waves+0x6ba>
    96be:	f3 f3       	brvs	.-4      	; 0x96bc <waves+0x6bc>
    96c0:	f3 f3       	brvs	.-4      	; 0x96be <waves+0x6be>
    96c2:	f3 f3       	brvs	.-4      	; 0x96c0 <waves+0x6c0>
    96c4:	f3 f3       	brvs	.-4      	; 0x96c2 <waves+0x6c2>
    96c6:	f3 f3       	brvs	.-4      	; 0x96c4 <waves+0x6c4>
    96c8:	f3 f3       	brvs	.-4      	; 0x96c6 <waves+0x6c6>
    96ca:	f3 f3       	brvs	.-4      	; 0x96c8 <waves+0x6c8>
    96cc:	f3 f3       	brvs	.-4      	; 0x96ca <waves+0x6ca>
    96ce:	f3 f3       	brvs	.-4      	; 0x96cc <waves+0x6cc>
    96d0:	f3 f3       	brvs	.-4      	; 0x96ce <waves+0x6ce>
    96d2:	f3 f3       	brvs	.-4      	; 0x96d0 <waves+0x6d0>
    96d4:	f3 f3       	brvs	.-4      	; 0x96d2 <waves+0x6d2>
    96d6:	f3 f3       	brvs	.-4      	; 0x96d4 <waves+0x6d4>
    96d8:	f3 f3       	brvs	.-4      	; 0x96d6 <waves+0x6d6>
    96da:	f3 f3       	brvs	.-4      	; 0x96d8 <waves+0x6d8>
    96dc:	f3 f3       	brvs	.-4      	; 0x96da <waves+0x6da>
    96de:	f3 f3       	brvs	.-4      	; 0x96dc <waves+0x6dc>
    96e0:	f2 f2       	brmi	.-68     	; 0x969e <waves+0x69e>
    96e2:	f2 f2       	brmi	.-68     	; 0x96a0 <waves+0x6a0>
    96e4:	f2 f2       	brmi	.-68     	; 0x96a2 <waves+0x6a2>
    96e6:	f2 f2       	brmi	.-68     	; 0x96a4 <waves+0x6a4>
    96e8:	f1 f1       	breq	.+124    	; 0x9766 <waves+0x766>
    96ea:	f1 f1       	breq	.+124    	; 0x9768 <waves+0x768>
    96ec:	f0 f0       	brcs	.+60     	; 0x972a <waves+0x72a>
    96ee:	f0 ef       	ldi	r31, 0xF0	; 240
    96f0:	ef ee       	ldi	r30, 0xEF	; 239
    96f2:	ed ec       	ldi	r30, 0xCD	; 205
    96f4:	eb ea       	ldi	r30, 0xAB	; 171
    96f6:	e9 e7       	ldi	r30, 0x79	; 121
    96f8:	e5 e3       	ldi	r30, 0x35	; 53
    96fa:	df db       	rcall	.-2114   	; 0x8eba <steptable+0xb2>
    96fc:	d5 cc       	rjmp	.-1622   	; 0x90a8 <waves+0xa8>
    96fe:	c6 00       	.word	0x00c6	; ????
    9700:	00 28       	or	r0, r0
    9702:	3d 42       	sbci	r19, 0x2D	; 45
    9704:	30 2d       	mov	r19, r0
    9706:	2c 2b       	or	r18, r28
    9708:	2c 2d       	mov	r18, r12
    970a:	2e 2f       	mov	r18, r30
    970c:	30 32       	cpi	r19, 0x20	; 32
    970e:	33 35       	cpi	r19, 0x53	; 83
    9710:	37 39       	cpi	r19, 0x97	; 151
    9712:	3b 3d       	cpi	r19, 0xDB	; 219
    9714:	3f 41       	sbci	r19, 0x1F	; 31
    9716:	43 45       	sbci	r20, 0x53	; 83
    9718:	48 4a       	sbci	r20, 0xA8	; 168
    971a:	4c 4e       	sbci	r20, 0xEC	; 236
    971c:	50 53       	subi	r21, 0x30	; 48
    971e:	55 57       	subi	r21, 0x75	; 117
    9720:	59 5b       	subi	r21, 0xB9	; 185
    9722:	5d 5f       	subi	r21, 0xFD	; 253
    9724:	61 63       	ori	r22, 0x31	; 49
    9726:	65 67       	ori	r22, 0x75	; 117
    9728:	69 6b       	ori	r22, 0xB9	; 185
    972a:	6c 6e       	ori	r22, 0xEC	; 236
    972c:	70 71       	andi	r23, 0x10	; 16
    972e:	73 74       	andi	r23, 0x43	; 67
    9730:	75 77       	andi	r23, 0x75	; 117
    9732:	78 79       	andi	r23, 0x98	; 152
    9734:	7a 7b       	andi	r23, 0xBA	; 186
    9736:	7c 7d       	andi	r23, 0xDC	; 220
    9738:	7d 7e       	andi	r23, 0xED	; 237
    973a:	7e 7f       	andi	r23, 0xFE	; 254
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7e 7e       	andi	r23, 0xEE	; 238
    9748:	7d 7d       	andi	r23, 0xDD	; 221
    974a:	7c 7b       	andi	r23, 0xBC	; 188
    974c:	7a 79       	andi	r23, 0x9A	; 154
    974e:	78 77       	andi	r23, 0x78	; 120
    9750:	75 74       	andi	r23, 0x45	; 69
    9752:	73 71       	andi	r23, 0x13	; 19
    9754:	70 6e       	ori	r23, 0xE0	; 224
    9756:	6c 6b       	ori	r22, 0xBC	; 188
    9758:	69 67       	ori	r22, 0x79	; 121
    975a:	65 63       	ori	r22, 0x35	; 53
    975c:	61 5f       	subi	r22, 0xF1	; 241
    975e:	5d 5b       	subi	r21, 0xBD	; 189
    9760:	59 57       	subi	r21, 0x79	; 121
    9762:	55 53       	subi	r21, 0x35	; 53
    9764:	50 4e       	sbci	r21, 0xE0	; 224
    9766:	4c 4a       	sbci	r20, 0xAC	; 172
    9768:	48 45       	sbci	r20, 0x58	; 88
    976a:	43 41       	sbci	r20, 0x13	; 19
    976c:	3f 3d       	cpi	r19, 0xDF	; 223
    976e:	3b 39       	cpi	r19, 0x9B	; 155
    9770:	37 35       	cpi	r19, 0x57	; 87
    9772:	33 32       	cpi	r19, 0x23	; 35
    9774:	30 2f       	mov	r19, r16
    9776:	2e 2d       	mov	r18, r14
    9778:	2c 2b       	or	r18, r28
    977a:	2c 2d       	mov	r18, r12
    977c:	30 42       	sbci	r19, 0x20	; 32
    977e:	3d 28       	or	r3, r13
    9780:	00 e9       	ldi	r16, 0x90	; 144
    9782:	e5 fe       	sbrs	r14, 5
    9784:	d4 d7       	rcall	.+4008   	; 0xa72e <position_shot+0xa>
    9786:	d7 d7       	rcall	.+4014   	; 0xa736 <position_shot+0x12>
    9788:	d6 d4       	rcall	.+2476   	; 0xa136 <LBLineIntersect+0x54>
    978a:	d2 d0       	rcall	.+420    	; 0x9930 <waves+0x930>
    978c:	ce cc       	rjmp	.-1636   	; 0x912a <waves+0x12a>
    978e:	ca c8       	rjmp	.-3692   	; 0x8924 <TriggerNote+0x64>
    9790:	c6 c3       	rjmp	.+1932   	; 0x9f1e <LBGetNextFrame+0x42>
    9792:	c1 bf       	out	0x31, r28	; 49
    9794:	bd ba       	out	0x1d, r11	; 29
    9796:	b8 b6       	in	r11, 0x38	; 56
    9798:	b4 b1       	in	r27, 0x04	; 4
    979a:	af ad       	ldd	r26, Y+63	; 0x3f
    979c:	ab a9       	ldd	r26, Y+51	; 0x33
    979e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    97a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    97a2:	9f 9e       	mul	r9, r31
    97a4:	9c 9a       	sbi	0x13, 4	; 19
    97a6:	99 97       	sbiw	r26, 0x29	; 41
    97a8:	95 94       	asr	r9
    97aa:	93 91       	.word	0x9193	; ????
    97ac:	90 8f       	std	Z+24, r25	; 0x18
    97ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    97b0:	8b 8a       	std	Y+19, r8	; 0x13
    97b2:	89 88       	ldd	r8, Y+17	; 0x11
    97b4:	88 87       	std	Y+8, r24	; 0x08
    97b6:	86 85       	ldd	r24, Z+14	; 0x0e
    97b8:	85 84       	ldd	r8, Z+13	; 0x0d
    97ba:	84 84       	ldd	r8, Z+12	; 0x0c
    97bc:	83 83       	std	Z+3, r24	; 0x03
    97be:	83 83       	std	Z+3, r24	; 0x03
    97c0:	83 83       	std	Z+3, r24	; 0x03
    97c2:	83 83       	std	Z+3, r24	; 0x03
    97c4:	83 84       	ldd	r8, Z+11	; 0x0b
    97c6:	84 84       	ldd	r8, Z+12	; 0x0c
    97c8:	85 85       	ldd	r24, Z+13	; 0x0d
    97ca:	86 87       	std	Z+14, r24	; 0x0e
    97cc:	88 88       	ldd	r8, Y+16	; 0x10
    97ce:	89 8a       	std	Y+17, r8	; 0x11
    97d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    97d2:	8d 8f       	std	Y+29, r24	; 0x1d
    97d4:	90 91 93 94 	lds	r25, 0x9493
    97d8:	95 97       	sbiw	r26, 0x25	; 37
    97da:	99 9a       	sbi	0x13, 1	; 19
    97dc:	9c 9e       	mul	r9, r28
    97de:	9f a1       	ldd	r25, Y+39	; 0x27
    97e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    97e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    97e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    97e6:	af b1       	in	r26, 0x0f	; 15
    97e8:	b4 b6       	in	r11, 0x34	; 52
    97ea:	b8 ba       	out	0x18, r11	; 24
    97ec:	bd bf       	out	0x3d, r27	; 61
    97ee:	c1 c3       	rjmp	.+1922   	; 0x9f72 <LBGetNextFrameReverse+0x4c>
    97f0:	c6 c8       	rjmp	.-3700   	; 0x897e <ProcessMusic+0x50>
    97f2:	ca cc       	rjmp	.-1644   	; 0x9188 <waves+0x188>
    97f4:	ce d0       	rcall	.+412    	; 0x9992 <waves+0x992>
    97f6:	d2 d4       	rcall	.+2468   	; 0xa19c <LBLineIntersect+0xba>
    97f8:	d6 d7       	rcall	.+4012   	; 0xa7a6 <position_shot+0x82>
    97fa:	d7 d7       	rcall	.+4014   	; 0xa7aa <position_shot+0x86>
    97fc:	d4 fe       	sbrs	r13, 4
    97fe:	e5 e9       	ldi	r30, 0x95	; 149
    9800:	f9 f8       	.word	0xf8f9	; ????
    9802:	f9 f5       	brne	.+126    	; 0x9882 <waves+0x882>
    9804:	eb e1       	ldi	r30, 0x1B	; 27
    9806:	dd de       	rcall	.-582    	; 0x95c2 <waves+0x5c2>
    9808:	e0 e2       	ldi	r30, 0x20	; 32
    980a:	e4 e5       	ldi	r30, 0x54	; 84
    980c:	e6 e5       	ldi	r30, 0x56	; 86
    980e:	e4 e2       	ldi	r30, 0x24	; 36
    9810:	de d9       	rcall	.-3140   	; 0x8bce <ProcessMusic+0x2a0>
    9812:	d2 ca       	rjmp	.-2652   	; 0x8db8 <SetMixerWave+0x8>
    9814:	c1 b7       	in	r28, 0x31	; 49
    9816:	ac a2       	std	Y+36, r10	; 0x24
    9818:	99 91       	ld	r25, Y+
    981a:	8a 86       	std	Y+10, r8	; 0x0a
    981c:	83 81       	ldd	r24, Z+3	; 0x03
    981e:	80 80       	ld	r8, Z
    9820:	81 82       	std	Z+1, r8	; 0x01
    9822:	83 85       	ldd	r24, Z+11	; 0x0b
    9824:	86 88       	ldd	r8, Z+22	; 0x16
    9826:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9828:	8d 8f       	std	Y+29, r24	; 0x1d
    982a:	90 92 93 95 	sts	0x9593, r9
    982e:	96 97       	sbiw	r26, 0x26	; 38
    9830:	98 99       	sbic	0x13, 0	; 19
    9832:	9a 9b       	sbis	0x13, 2	; 19
    9834:	9b 9c       	mul	r9, r11
    9836:	9d 9d       	mul	r25, r13
    9838:	9d 9e       	mul	r9, r29
    983a:	9e 9e       	mul	r9, r30
    983c:	9f 9f       	mul	r25, r31
    983e:	9f 9f       	mul	r25, r31
    9840:	9f 9f       	mul	r25, r31
    9842:	9f 9e       	mul	r9, r31
    9844:	9e 9e       	mul	r9, r30
    9846:	9d 9d       	mul	r25, r13
    9848:	9d 9c       	mul	r9, r13
    984a:	9b 9b       	sbis	0x13, 3	; 19
    984c:	9a 99       	sbic	0x13, 2	; 19
    984e:	98 97       	sbiw	r26, 0x28	; 40
    9850:	96 95       	lsr	r25
    9852:	93 92       	.word	0x9293	; ????
    9854:	90 8f       	std	Z+24, r25	; 0x18
    9856:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9858:	8a 88       	ldd	r8, Y+18	; 0x12
    985a:	86 85       	ldd	r24, Z+14	; 0x0e
    985c:	83 82       	std	Z+3, r8	; 0x03
    985e:	81 80       	ldd	r8, Z+1	; 0x01
    9860:	80 81       	ld	r24, Z
    9862:	83 86       	std	Z+11, r8	; 0x0b
    9864:	8a 91       	ld	r24, -Y
    9866:	99 a2       	std	Y+33, r9	; 0x21
    9868:	ac b7       	in	r26, 0x3c	; 60
    986a:	c1 ca       	rjmp	.-2686   	; 0x8dee <esmw+0x8>
    986c:	d2 d9       	rcall	.-3164   	; 0x8c12 <ProcessMusic+0x2e4>
    986e:	de e2       	ldi	r29, 0x2E	; 46
    9870:	e4 e5       	ldi	r30, 0x54	; 84
    9872:	e6 e5       	ldi	r30, 0x56	; 86
    9874:	e4 e2       	ldi	r30, 0x24	; 36
    9876:	e0 de       	rcall	.-576    	; 0x9638 <waves+0x638>
    9878:	dd e1       	ldi	r29, 0x1D	; 29
    987a:	eb f5       	brvc	.+122    	; 0x98f6 <waves+0x8f6>
    987c:	f9 f8       	.word	0xf8f9	; ????
    987e:	f9 00       	.word	0x00f9	; ????
    9880:	07 08       	sbc	r0, r7
    9882:	07 0b       	sbc	r16, r23
    9884:	15 1f       	adc	r17, r21
    9886:	23 22       	and	r2, r19
    9888:	20 1e       	adc	r2, r16
    988a:	1c 1b       	sub	r17, r28
    988c:	1a 1b       	sub	r17, r26
    988e:	1c 1e       	adc	r1, r28
    9890:	22 27       	eor	r18, r18
    9892:	2e 36       	cpi	r18, 0x6E	; 110
    9894:	3f 49       	sbci	r19, 0x9F	; 159
    9896:	54 5e       	subi	r21, 0xE4	; 228
    9898:	67 6f       	ori	r22, 0xF7	; 247
    989a:	76 7a       	andi	r23, 0xA6	; 166
    989c:	7e 7f       	andi	r23, 0xFE	; 254
    989e:	7f 7f       	andi	r23, 0xFF	; 255
    98a0:	7f 7e       	andi	r23, 0xEF	; 239
    98a2:	7d 7b       	andi	r23, 0xBD	; 189
    98a4:	7a 78       	andi	r23, 0x8A	; 138
    98a6:	76 74       	andi	r23, 0x46	; 70
    98a8:	73 71       	andi	r23, 0x13	; 19
    98aa:	70 6e       	ori	r23, 0xE0	; 224
    98ac:	6d 6b       	ori	r22, 0xBD	; 189
    98ae:	6a 69       	ori	r22, 0x9A	; 154
    98b0:	68 67       	ori	r22, 0x78	; 120
    98b2:	66 65       	ori	r22, 0x56	; 86
    98b4:	65 64       	ori	r22, 0x45	; 69
    98b6:	64 63       	ori	r22, 0x34	; 52
    98b8:	63 62       	ori	r22, 0x23	; 35
    98ba:	62 62       	ori	r22, 0x22	; 34
    98bc:	61 61       	ori	r22, 0x11	; 17
    98be:	61 61       	ori	r22, 0x11	; 17
    98c0:	61 61       	ori	r22, 0x11	; 17
    98c2:	61 62       	ori	r22, 0x21	; 33
    98c4:	62 62       	ori	r22, 0x22	; 34
    98c6:	63 63       	ori	r22, 0x33	; 51
    98c8:	63 64       	ori	r22, 0x43	; 67
    98ca:	65 65       	ori	r22, 0x55	; 85
    98cc:	66 67       	ori	r22, 0x76	; 118
    98ce:	68 69       	ori	r22, 0x98	; 152
    98d0:	6a 6b       	ori	r22, 0xBA	; 186
    98d2:	6d 6e       	ori	r22, 0xED	; 237
    98d4:	70 71       	andi	r23, 0x10	; 16
    98d6:	73 74       	andi	r23, 0x43	; 67
    98d8:	76 78       	andi	r23, 0x86	; 134
    98da:	7a 7b       	andi	r23, 0xBA	; 186
    98dc:	7d 7e       	andi	r23, 0xED	; 237
    98de:	7f 7f       	andi	r23, 0xFF	; 255
    98e0:	7f 7f       	andi	r23, 0xFF	; 255
    98e2:	7e 7a       	andi	r23, 0xAE	; 174
    98e4:	76 6f       	ori	r23, 0xF6	; 246
    98e6:	67 5e       	subi	r22, 0xE7	; 231
    98e8:	54 49       	sbci	r21, 0x94	; 148
    98ea:	3f 36       	cpi	r19, 0x6F	; 111
    98ec:	2e 27       	eor	r18, r30
    98ee:	22 1e       	adc	r2, r18
    98f0:	1c 1b       	sub	r17, r28
    98f2:	1a 1b       	sub	r17, r26
    98f4:	1c 1e       	adc	r1, r28
    98f6:	20 22       	and	r2, r16
    98f8:	23 1f       	adc	r18, r19
    98fa:	15 0b       	sbc	r17, r21
    98fc:	07 08       	sbc	r0, r7
    98fe:	07 00       	.word	0x0007	; ????
    9900:	1f 31       	cpi	r17, 0x1F	; 31
    9902:	3d 44       	sbci	r19, 0x4D	; 77
    9904:	4e 53       	subi	r20, 0x3E	; 62
    9906:	54 56       	subi	r21, 0x64	; 100
    9908:	5a 5f       	subi	r21, 0xFA	; 250
    990a:	64 69       	ori	r22, 0x94	; 148
    990c:	6e 74       	andi	r22, 0x4E	; 78
    990e:	76 79       	andi	r23, 0x96	; 150
    9910:	7c 7f       	andi	r23, 0xFC	; 252
    9912:	7f 7f       	andi	r23, 0xFF	; 255
    9914:	7f 7f       	andi	r23, 0xFF	; 255
    9916:	7f 7f       	andi	r23, 0xFF	; 255
    9918:	7f 7f       	andi	r23, 0xFF	; 255
    991a:	7f 7f       	andi	r23, 0xFF	; 255
    991c:	7f 7f       	andi	r23, 0xFF	; 255
    991e:	7f 7f       	andi	r23, 0xFF	; 255
    9920:	7f 7f       	andi	r23, 0xFF	; 255
    9922:	7f 7f       	andi	r23, 0xFF	; 255
    9924:	7f 7f       	andi	r23, 0xFF	; 255
    9926:	7f 7f       	andi	r23, 0xFF	; 255
    9928:	7f 7f       	andi	r23, 0xFF	; 255
    992a:	7f 7f       	andi	r23, 0xFF	; 255
    992c:	7f 7f       	andi	r23, 0xFF	; 255
    992e:	7f 7f       	andi	r23, 0xFF	; 255
    9930:	7f 7f       	andi	r23, 0xFF	; 255
    9932:	7f 7f       	andi	r23, 0xFF	; 255
    9934:	7f 7f       	andi	r23, 0xFF	; 255
    9936:	7f 7f       	andi	r23, 0xFF	; 255
    9938:	7f 7f       	andi	r23, 0xFF	; 255
    993a:	7f 7f       	andi	r23, 0xFF	; 255
    993c:	7f 7f       	andi	r23, 0xFF	; 255
    993e:	7f 7f       	andi	r23, 0xFF	; 255
    9940:	7f 7f       	andi	r23, 0xFF	; 255
    9942:	7f 7f       	andi	r23, 0xFF	; 255
    9944:	7f 7f       	andi	r23, 0xFF	; 255
    9946:	7f 7f       	andi	r23, 0xFF	; 255
    9948:	7f 7f       	andi	r23, 0xFF	; 255
    994a:	7f 7f       	andi	r23, 0xFF	; 255
    994c:	7f 7f       	andi	r23, 0xFF	; 255
    994e:	7f 7f       	andi	r23, 0xFF	; 255
    9950:	7f 7f       	andi	r23, 0xFF	; 255
    9952:	7f 7f       	andi	r23, 0xFF	; 255
    9954:	7f 7f       	andi	r23, 0xFF	; 255
    9956:	7f 7f       	andi	r23, 0xFF	; 255
    9958:	7f 7f       	andi	r23, 0xFF	; 255
    995a:	7f 7f       	andi	r23, 0xFF	; 255
    995c:	7f 7f       	andi	r23, 0xFF	; 255
    995e:	7f 7f       	andi	r23, 0xFF	; 255
    9960:	7f 7f       	andi	r23, 0xFF	; 255
    9962:	7f 7f       	andi	r23, 0xFF	; 255
    9964:	7f 7f       	andi	r23, 0xFF	; 255
    9966:	7f 7f       	andi	r23, 0xFF	; 255
    9968:	7f 7f       	andi	r23, 0xFF	; 255
    996a:	7f 7f       	andi	r23, 0xFF	; 255
    996c:	7f 7f       	andi	r23, 0xFF	; 255
    996e:	7f 7f       	andi	r23, 0xFF	; 255
    9970:	7f 7f       	andi	r23, 0xFF	; 255
    9972:	7f 7f       	andi	r23, 0xFF	; 255
    9974:	7f 7f       	andi	r23, 0xFF	; 255
    9976:	7f 7f       	andi	r23, 0xFF	; 255
    9978:	7f 7f       	andi	r23, 0xFF	; 255
    997a:	7f 7c       	andi	r23, 0xCF	; 207
    997c:	78 71       	andi	r23, 0x18	; 24
    997e:	68 4c       	sbci	r22, 0xC8	; 200
    9980:	2c 1c       	adc	r2, r12
    9982:	12 0c       	add	r1, r2
    9984:	0a 0b       	sbc	r16, r26
    9986:	0a 05       	cpc	r16, r10
    9988:	fd f3       	brhs	.-2      	; 0x9988 <waves+0x988>
    998a:	e9 df       	rcall	.-46     	; 0x995e <waves+0x95e>
    998c:	d4 ca       	rjmp	.-2648   	; 0x8f36 <steptable+0x12e>
    998e:	c0 b7       	in	r28, 0x30	; 48
    9990:	ae a6       	std	Y+46, r10	; 0x2e
    9992:	9e 97       	sbiw	r26, 0x2e	; 46
    9994:	91 8b       	std	Z+17, r25	; 0x11
    9996:	86 85       	ldd	r24, Z+14	; 0x0e
    9998:	82 80       	ldd	r8, Z+2	; 0x02
    999a:	80 80       	ld	r8, Z
    999c:	80 80       	ld	r8, Z
    999e:	80 80       	ld	r8, Z
    99a0:	80 80       	ld	r8, Z
    99a2:	80 80       	ld	r8, Z
    99a4:	80 80       	ld	r8, Z
    99a6:	80 80       	ld	r8, Z
    99a8:	80 80       	ld	r8, Z
    99aa:	80 80       	ld	r8, Z
    99ac:	80 80       	ld	r8, Z
    99ae:	80 80       	ld	r8, Z
    99b0:	80 80       	ld	r8, Z
    99b2:	80 80       	ld	r8, Z
    99b4:	80 80       	ld	r8, Z
    99b6:	80 80       	ld	r8, Z
    99b8:	80 80       	ld	r8, Z
    99ba:	80 80       	ld	r8, Z
    99bc:	80 80       	ld	r8, Z
    99be:	80 80       	ld	r8, Z
    99c0:	80 80       	ld	r8, Z
    99c2:	80 80       	ld	r8, Z
    99c4:	80 80       	ld	r8, Z
    99c6:	80 80       	ld	r8, Z
    99c8:	80 80       	ld	r8, Z
    99ca:	80 80       	ld	r8, Z
    99cc:	80 80       	ld	r8, Z
    99ce:	80 80       	ld	r8, Z
    99d0:	80 80       	ld	r8, Z
    99d2:	80 80       	ld	r8, Z
    99d4:	80 80       	ld	r8, Z
    99d6:	80 80       	ld	r8, Z
    99d8:	80 80       	ld	r8, Z
    99da:	80 80       	ld	r8, Z
    99dc:	80 80       	ld	r8, Z
    99de:	80 80       	ld	r8, Z
    99e0:	80 80       	ld	r8, Z
    99e2:	80 80       	ld	r8, Z
    99e4:	80 80       	ld	r8, Z
    99e6:	80 80       	ld	r8, Z
    99e8:	80 80       	ld	r8, Z
    99ea:	80 80       	ld	r8, Z
    99ec:	80 80       	ld	r8, Z
    99ee:	80 80       	ld	r8, Z
    99f0:	80 80       	ld	r8, Z
    99f2:	80 80       	ld	r8, Z
    99f4:	80 87       	std	Z+8, r24	; 0x08
    99f6:	91 9d       	mul	r25, r1
    99f8:	ac c4       	rjmp	.+2392   	; 0xa352 <init_tile_animations+0xc>
    99fa:	cb d4       	rcall	.+2454   	; 0xa392 <init_tile_animations+0x4c>
    99fc:	dd f2       	brhs	.-74     	; 0x99b4 <waves+0x9b4>
    99fe:	fa fa       	.word	0xfafa	; ????

00009a00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9a00:	90 91 c0 0b 	lds	r25, 0x0BC0
    9a04:	e0 e9       	ldi	r30, 0x90	; 144
    9a06:	fa e0       	ldi	r31, 0x0A	; 10
    9a08:	80 e0       	ldi	r24, 0x00	; 0
    9a0a:	89 17       	cp	r24, r25
    9a0c:	49 f0       	breq	.+18     	; 0x9a20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    9a0e:	a0 81       	ld	r26, Z
    9a10:	b1 81       	ldd	r27, Z+1	; 0x01
    9a12:	a0 5e       	subi	r26, 0xE0	; 224
    9a14:	be 4f       	sbci	r27, 0xFE	; 254
    9a16:	22 81       	ldd	r18, Z+2	; 0x02
    9a18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9a1a:	8f 5f       	subi	r24, 0xFF	; 255
    9a1c:	33 96       	adiw	r30, 0x03	; 3
    9a1e:	f5 cf       	rjmp	.-22     	; 0x9a0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    9a20:	08 95       	ret

00009a22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    9a22:	80 93 00 01 	sts	0x0100, r24
    9a26:	08 95       	ret

00009a28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9a28:	2f 92       	push	r2
    9a2a:	3f 92       	push	r3
    9a2c:	4f 92       	push	r4
    9a2e:	5f 92       	push	r5
    9a30:	6f 92       	push	r6
    9a32:	7f 92       	push	r7
    9a34:	8f 92       	push	r8
    9a36:	9f 92       	push	r9
    9a38:	af 92       	push	r10
    9a3a:	bf 92       	push	r11
    9a3c:	cf 92       	push	r12
    9a3e:	df 92       	push	r13
    9a40:	ef 92       	push	r14
    9a42:	ff 92       	push	r15
    9a44:	0f 93       	push	r16
    9a46:	1f 93       	push	r17
    9a48:	cf 93       	push	r28
    9a4a:	df 93       	push	r29
    9a4c:	00 d0       	rcall	.+0      	; 0x9a4e <ProcessSprites+0x26>
    9a4e:	1f 92       	push	r1
    9a50:	cd b7       	in	r28, 0x3d	; 61
    9a52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    9a54:	10 92 c0 0b 	sts	0x0BC0, r1
		if(!spritesOn) return;
    9a58:	80 91 00 01 	lds	r24, 0x0100
    9a5c:	88 23       	and	r24, r24
    9a5e:	09 f4       	brne	.+2      	; 0x9a62 <ProcessSprites+0x3a>
    9a60:	a1 c0       	rjmp	.+322    	; 0x9ba4 <ProcessSprites+0x17c>
    9a62:	e8 e6       	ldi	r30, 0x68	; 104
    9a64:	ce 2e       	mov	r12, r30
    9a66:	e4 e0       	ldi	r30, 0x04	; 4
    9a68:	de 2e       	mov	r13, r30
    9a6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    9a6c:	f6 01       	movw	r30, r12
    9a6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9a70:	80 3f       	cpi	r24, 0xF0	; 240
    9a72:	09 f4       	brne	.+2      	; 0x9a76 <ProcessSprites+0x4e>
    9a74:	79 c0       	rjmp	.+242    	; 0x9b68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    9a76:	91 81       	ldd	r25, Z+1	; 0x01
    9a78:	29 2f       	mov	r18, r25
    9a7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    9a7c:	28 2e       	mov	r2, r24
    9a7e:	26 94       	lsr	r2
    9a80:	26 94       	lsr	r2
    9a82:	26 94       	lsr	r2
				dx=ssx&0x7;
    9a84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9a86:	19 f0       	breq	.+6      	; 0x9a8e <ProcessSprites+0x66>
    9a88:	72 e0       	ldi	r23, 0x02	; 2
    9a8a:	47 2e       	mov	r4, r23
    9a8c:	02 c0       	rjmp	.+4      	; 0x9a92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    9a8e:	44 24       	eor	r4, r4
    9a90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9a92:	63 e0       	ldi	r22, 0x03	; 3
    9a94:	36 95       	lsr	r19
    9a96:	27 95       	ror	r18
    9a98:	6a 95       	dec	r22
    9a9a:	e1 f7       	brne	.-8      	; 0x9a94 <ProcessSprites+0x6c>
    9a9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    9a9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    9aa0:	19 f0       	breq	.+6      	; 0x9aa8 <ProcessSprites+0x80>
    9aa2:	52 e0       	ldi	r21, 0x02	; 2
    9aa4:	55 2e       	mov	r5, r21
    9aa6:	02 c0       	rjmp	.+4      	; 0x9aac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    9aa8:	55 24       	eor	r5, r5
    9aaa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9aac:	29 2f       	mov	r18, r25
    9aae:	30 e0       	ldi	r19, 0x00	; 0
    9ab0:	32 2f       	mov	r19, r18
    9ab2:	22 27       	eor	r18, r18
    9ab4:	a9 01       	movw	r20, r18
    9ab6:	48 0f       	add	r20, r24
    9ab8:	51 1d       	adc	r21, r1
    9aba:	5b 83       	std	Y+3, r21	; 0x03
    9abc:	4a 83       	std	Y+2, r20	; 0x02
    9abe:	e1 2c       	mov	r14, r1
    9ac0:	f1 2c       	mov	r15, r1
    9ac2:	94 ee       	ldi	r25, 0xE4	; 228
    9ac4:	93 0d       	add	r25, r3
    9ac6:	99 83       	std	Y+1, r25	; 0x01
    9ac8:	03 2d       	mov	r16, r3
    9aca:	0e 0d       	add	r16, r14
    9acc:	0c 31       	cpi	r16, 0x1C	; 28
    9ace:	10 f0       	brcs	.+4      	; 0x9ad4 <ProcessSprites+0xac>
    9ad0:	09 81       	ldd	r16, Y+1	; 0x01
    9ad2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    9ad4:	5e e1       	ldi	r21, 0x1E	; 30
    9ad6:	05 9f       	mul	r16, r21
    9ad8:	80 01       	movw	r16, r0
    9ada:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9adc:	be 2c       	mov	r11, r14
    9ade:	aa 24       	eor	r10, r10
    9ae0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    9ae2:	ed e1       	ldi	r30, 0x1D	; 29
    9ae4:	e7 15       	cp	r30, r7
    9ae6:	18 f4       	brcc	.+6      	; 0x9aee <ProcessSprites+0xc6>
    9ae8:	82 ee       	ldi	r24, 0xE2	; 226
    9aea:	87 0d       	add	r24, r7
    9aec:	01 c0       	rjmp	.+2      	; 0x9af0 <ProcessSprites+0xc8>
    9aee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    9af0:	a8 01       	movw	r20, r16
    9af2:	48 0f       	add	r20, r24
    9af4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    9af6:	ca 01       	movw	r24, r20
    9af8:	80 5e       	subi	r24, 0xE0	; 224
    9afa:	9e 4f       	sbci	r25, 0xFE	; 254
    9afc:	4c 01       	movw	r8, r24
    9afe:	fc 01       	movw	r30, r24
    9b00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    9b02:	88 31       	cpi	r24, 0x18	; 24
    9b04:	e0 f0       	brcs	.+56     	; 0x9b3e <ProcessSprites+0x116>
    9b06:	60 91 c0 0b 	lds	r22, 0x0BC0
    9b0a:	68 31       	cpi	r22, 0x18	; 24
    9b0c:	f8 f4       	brcc	.+62     	; 0x9b4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    9b0e:	26 2f       	mov	r18, r22
    9b10:	30 e0       	ldi	r19, 0x00	; 0
    9b12:	f9 01       	movw	r30, r18
    9b14:	ee 0f       	add	r30, r30
    9b16:	ff 1f       	adc	r31, r31
    9b18:	e2 0f       	add	r30, r18
    9b1a:	f3 1f       	adc	r31, r19
    9b1c:	e0 57       	subi	r30, 0x70	; 112
    9b1e:	f5 4f       	sbci	r31, 0xF5	; 245
    9b20:	51 83       	std	Z+1, r21	; 0x01
    9b22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9b24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    9b26:	0e 94 54 3e 	call	0x7ca8	; 0x7ca8 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    9b2a:	80 91 c0 0b 	lds	r24, 0x0BC0
    9b2e:	f4 01       	movw	r30, r8
    9b30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    9b32:	91 e0       	ldi	r25, 0x01	; 1
    9b34:	98 0f       	add	r25, r24
    9b36:	90 93 c0 0b 	sts	0x0BC0, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    9b3a:	88 31       	cpi	r24, 0x18	; 24
    9b3c:	38 f4       	brcc	.+14     	; 0x9b4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    9b3e:	2a 81       	ldd	r18, Y+2	; 0x02
    9b40:	3b 81       	ldd	r19, Y+3	; 0x03
    9b42:	a5 01       	movw	r20, r10
    9b44:	68 2f       	mov	r22, r24
    9b46:	86 2d       	mov	r24, r6
    9b48:	0e 94 e5 3e 	call	0x7dca	; 0x7dca <BlitSprite>
    9b4c:	ff ef       	ldi	r31, 0xFF	; 255
    9b4e:	af 1a       	sub	r10, r31
    9b50:	bf 0a       	sbc	r11, r31
    9b52:	73 94       	inc	r7
    9b54:	87 2d       	mov	r24, r7
    9b56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9b58:	84 15       	cp	r24, r4
    9b5a:	18 f2       	brcs	.-122    	; 0x9ae2 <ProcessSprites+0xba>
    9b5c:	4f ef       	ldi	r20, 0xFF	; 255
    9b5e:	e4 1a       	sub	r14, r20
    9b60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9b62:	e5 14       	cp	r14, r5
    9b64:	08 f4       	brcc	.+2      	; 0x9b68 <ProcessSprites+0x140>
    9b66:	b0 cf       	rjmp	.-160    	; 0x9ac8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    9b68:	63 94       	inc	r6
    9b6a:	84 e0       	ldi	r24, 0x04	; 4
    9b6c:	c8 0e       	add	r12, r24
    9b6e:	d1 1c       	adc	r13, r1
    9b70:	9a e0       	ldi	r25, 0x0A	; 10
    9b72:	69 12       	cpse	r6, r25
    9b74:	7b cf       	rjmp	.-266    	; 0x9a6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    9b76:	0f 90       	pop	r0
    9b78:	0f 90       	pop	r0
    9b7a:	0f 90       	pop	r0
    9b7c:	df 91       	pop	r29
    9b7e:	cf 91       	pop	r28
    9b80:	1f 91       	pop	r17
    9b82:	0f 91       	pop	r16
    9b84:	ff 90       	pop	r15
    9b86:	ef 90       	pop	r14
    9b88:	df 90       	pop	r13
    9b8a:	cf 90       	pop	r12
    9b8c:	bf 90       	pop	r11
    9b8e:	af 90       	pop	r10
    9b90:	9f 90       	pop	r9
    9b92:	8f 90       	pop	r8
    9b94:	7f 90       	pop	r7
    9b96:	6f 90       	pop	r6
    9b98:	5f 90       	pop	r5
    9b9a:	4f 90       	pop	r4
    9b9c:	3f 90       	pop	r3
    9b9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    9ba0:	0c 94 00 4d 	jmp	0x9a00	; 0x9a00 <RestoreBackground>

	}
    9ba4:	0f 90       	pop	r0
    9ba6:	0f 90       	pop	r0
    9ba8:	0f 90       	pop	r0
    9baa:	df 91       	pop	r29
    9bac:	cf 91       	pop	r28
    9bae:	1f 91       	pop	r17
    9bb0:	0f 91       	pop	r16
    9bb2:	ff 90       	pop	r15
    9bb4:	ef 90       	pop	r14
    9bb6:	df 90       	pop	r13
    9bb8:	cf 90       	pop	r12
    9bba:	bf 90       	pop	r11
    9bbc:	af 90       	pop	r10
    9bbe:	9f 90       	pop	r9
    9bc0:	8f 90       	pop	r8
    9bc2:	7f 90       	pop	r7
    9bc4:	6f 90       	pop	r6
    9bc6:	5f 90       	pop	r5
    9bc8:	4f 90       	pop	r4
    9bca:	3f 90       	pop	r3
    9bcc:	2f 90       	pop	r2
    9bce:	08 95       	ret

00009bd0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9bd0:	df 92       	push	r13
    9bd2:	ef 92       	push	r14
    9bd4:	ff 92       	push	r15
    9bd6:	0f 93       	push	r16
    9bd8:	1f 93       	push	r17
    9bda:	cf 93       	push	r28
    9bdc:	df 93       	push	r29
    9bde:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9be0:	fb 01       	movw	r30, r22
    9be2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9be4:	31 96       	adiw	r30, 0x01	; 1
    9be6:	64 91       	lpm	r22, Z
    9be8:	5f ef       	ldi	r21, 0xFF	; 255
    9bea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    9bec:	24 2f       	mov	r18, r20
    9bee:	21 70       	andi	r18, 0x01	; 1
    9bf0:	40 ff       	sbrs	r20, 0
    9bf2:	04 c0       	rjmp	.+8      	; 0x9bfc <MapSprite2+0x2c>
			x=(mapWidth-1);
    9bf4:	95 2f       	mov	r25, r21
			dx=-1;
    9bf6:	ff 24       	eor	r15, r15
    9bf8:	fa 94       	dec	r15
    9bfa:	03 c0       	rjmp	.+6      	; 0x9c02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    9bfc:	ff 24       	eor	r15, r15
    9bfe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9c00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9c02:	41 ff       	sbrs	r20, 1
    9c04:	05 c0       	rjmp	.+10     	; 0x9c10 <MapSprite2+0x40>
			y=(mapHeight-1);
    9c06:	7f ef       	ldi	r23, 0xFF	; 255
    9c08:	76 0f       	add	r23, r22
			dy=-1;
    9c0a:	ee 24       	eor	r14, r14
    9c0c:	ea 94       	dec	r14
    9c0e:	03 c0       	rjmp	.+6      	; 0x9c16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9c10:	ee 24       	eor	r14, r14
    9c12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9c14:	70 e0       	ldi	r23, 0x00	; 0
    9c16:	21 11       	cpse	r18, r1
    9c18:	01 c0       	rjmp	.+2      	; 0x9c1c <MapSprite2+0x4c>
    9c1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9c1c:	00 e0       	ldi	r16, 0x00	; 0
    9c1e:	06 17       	cp	r16, r22
    9c20:	09 f1       	breq	.+66     	; 0x9c64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9c22:	71 03       	mulsu	r23, r17
    9c24:	e0 01       	movw	r28, r0
    9c26:	11 24       	eor	r1, r1
    9c28:	d8 2e       	mov	r13, r24
    9c2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9c2c:	8d 15       	cp	r24, r13
    9c2e:	b1 f0       	breq	.+44     	; 0x9c5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9c30:	9e 01       	movw	r18, r28
    9c32:	29 0f       	add	r18, r25
    9c34:	31 1d       	adc	r19, r1
    9c36:	97 fd       	sbrc	r25, 7
    9c38:	3a 95       	dec	r19
    9c3a:	2e 5f       	subi	r18, 0xFE	; 254
    9c3c:	3f 4f       	sbci	r19, 0xFF	; 255
    9c3e:	fd 01       	movw	r30, r26
    9c40:	e2 0f       	add	r30, r18
    9c42:	f3 1f       	adc	r31, r19
    9c44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9c46:	34 e0       	ldi	r19, 0x04	; 4
    9c48:	83 9f       	mul	r24, r19
    9c4a:	f0 01       	movw	r30, r0
    9c4c:	11 24       	eor	r1, r1
    9c4e:	e8 59       	subi	r30, 0x98	; 152
    9c50:	fb 4f       	sbci	r31, 0xFB	; 251
    9c52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9c54:	8f 5f       	subi	r24, 0xFF	; 255
    9c56:	43 83       	std	Z+3, r20	; 0x03
    9c58:	9f 0d       	add	r25, r15
    9c5a:	e8 cf       	rjmp	.-48     	; 0x9c2c <MapSprite2+0x5c>
    9c5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9c5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9c60:	95 2f       	mov	r25, r21
    9c62:	dd cf       	rjmp	.-70     	; 0x9c1e <MapSprite2+0x4e>
	    }
	}
    9c64:	df 91       	pop	r29
    9c66:	cf 91       	pop	r28
    9c68:	1f 91       	pop	r17
    9c6a:	0f 91       	pop	r16
    9c6c:	ff 90       	pop	r15
    9c6e:	ef 90       	pop	r14
    9c70:	df 90       	pop	r13
    9c72:	08 95       	ret

00009c74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9c74:	0f 93       	push	r16
    9c76:	cf 93       	push	r28
    9c78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9c7a:	30 e0       	ldi	r19, 0x00	; 0
    9c7c:	30 17       	cp	r19, r16
    9c7e:	e1 f0       	breq	.+56     	; 0x9cb8 <MoveSprite+0x44>
    9c80:	b4 2f       	mov	r27, r20
    9c82:	a0 e2       	ldi	r26, 0x20	; 32
    9c84:	a4 0f       	add	r26, r20
    9c86:	78 2f       	mov	r23, r24
    9c88:	72 0f       	add	r23, r18
    9c8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9c8c:	87 17       	cp	r24, r23
    9c8e:	81 f0       	breq	.+32     	; 0x9cb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9c90:	c4 e0       	ldi	r28, 0x04	; 4
    9c92:	8c 9f       	mul	r24, r28
    9c94:	f0 01       	movw	r30, r0
    9c96:	11 24       	eor	r1, r1
    9c98:	e8 59       	subi	r30, 0x98	; 152
    9c9a:	fb 4f       	sbci	r31, 0xFB	; 251
    9c9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9c9e:	41 3e       	cpi	r20, 0xE1	; 225
    9ca0:	51 05       	cpc	r21, r1
    9ca2:	14 f0       	brlt	.+4      	; 0x9ca8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    9ca4:	a1 83       	std	Z+1, r26	; 0x01
    9ca6:	01 c0       	rjmp	.+2      	; 0x9caa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9ca8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    9caa:	8f 5f       	subi	r24, 0xFF	; 255
    9cac:	98 5f       	subi	r25, 0xF8	; 248
    9cae:	ee cf       	rjmp	.-36     	; 0x9c8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    9cb0:	3f 5f       	subi	r19, 0xFF	; 255
    9cb2:	48 5f       	subi	r20, 0xF8	; 248
    9cb4:	5f 4f       	sbci	r21, 0xFF	; 255
    9cb6:	e2 cf       	rjmp	.-60     	; 0x9c7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    9cb8:	cf 91       	pop	r28
    9cba:	0f 91       	pop	r16
    9cbc:	08 95       	ret

00009cbe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    9cbe:	08 95       	ret

00009cc0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9cc0:	e8 e6       	ldi	r30, 0x68	; 104
    9cc2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9cc4:	80 ef       	ldi	r24, 0xF0	; 240
    9cc6:	80 83       	st	Z, r24
    9cc8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    9cca:	94 e0       	ldi	r25, 0x04	; 4
    9ccc:	e0 39       	cpi	r30, 0x90	; 144
    9cce:	f9 07       	cpc	r31, r25
    9cd0:	d1 f7       	brne	.-12     	; 0x9cc6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    9cd2:	08 95       	ret

00009cd4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    9cd4:	4f 92       	push	r4
    9cd6:	5f 92       	push	r5
    9cd8:	6f 92       	push	r6
    9cda:	7f 92       	push	r7
    9cdc:	8f 92       	push	r8
    9cde:	9f 92       	push	r9
    9ce0:	af 92       	push	r10
    9ce2:	bf 92       	push	r11
    9ce4:	cf 92       	push	r12
    9ce6:	df 92       	push	r13
    9ce8:	ef 92       	push	r14
    9cea:	ff 92       	push	r15
    9cec:	0f 93       	push	r16
    9cee:	1f 93       	push	r17
    9cf0:	cf 93       	push	r28
    9cf2:	df 93       	push	r29
    9cf4:	68 2e       	mov	r6, r24
    9cf6:	56 2e       	mov	r5, r22
    9cf8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    9cfa:	fa 01       	movw	r30, r20
    9cfc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    9cfe:	31 96       	adiw	r30, 0x01	; 1
    9d00:	84 90       	lpm	r8, Z
    9d02:	c7 2c       	mov	r12, r7
    9d04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    9d06:	00 e0       	ldi	r16, 0x00	; 0
    9d08:	10 e0       	ldi	r17, 0x00	; 0
    9d0a:	91 2c       	mov	r9, r1
    9d0c:	98 14       	cp	r9, r8
    9d0e:	f1 f0       	breq	.+60     	; 0x9d4c <DrawMap2+0x78>
    9d10:	c0 e0       	ldi	r28, 0x00	; 0
    9d12:	d0 e0       	ldi	r29, 0x00	; 0
    9d14:	58 01       	movw	r10, r16
    9d16:	f2 e0       	ldi	r31, 0x02	; 2
    9d18:	af 0e       	add	r10, r31
    9d1a:	b1 1c       	adc	r11, r1
    9d1c:	49 2c       	mov	r4, r9
    9d1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    9d20:	c7 15       	cp	r28, r7
    9d22:	80 f4       	brcc	.+32     	; 0x9d44 <DrawMap2+0x70>
    9d24:	95 01       	movw	r18, r10
    9d26:	2c 0f       	add	r18, r28
    9d28:	3d 1f       	adc	r19, r29
    9d2a:	f7 01       	movw	r30, r14
    9d2c:	e2 0f       	add	r30, r18
    9d2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9d30:	24 91       	lpm	r18, Z
    9d32:	42 2f       	mov	r20, r18
    9d34:	50 e0       	ldi	r21, 0x00	; 0
    9d36:	64 2d       	mov	r22, r4
    9d38:	8c 2f       	mov	r24, r28
    9d3a:	86 0d       	add	r24, r6
    9d3c:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
    9d40:	21 96       	adiw	r28, 0x01	; 1
    9d42:	ee cf       	rjmp	.-36     	; 0x9d20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    9d44:	93 94       	inc	r9
    9d46:	0c 0d       	add	r16, r12
    9d48:	1d 1d       	adc	r17, r13
    9d4a:	e0 cf       	rjmp	.-64     	; 0x9d0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    9d4c:	df 91       	pop	r29
    9d4e:	cf 91       	pop	r28
    9d50:	1f 91       	pop	r17
    9d52:	0f 91       	pop	r16
    9d54:	ff 90       	pop	r15
    9d56:	ef 90       	pop	r14
    9d58:	df 90       	pop	r13
    9d5a:	cf 90       	pop	r12
    9d5c:	bf 90       	pop	r11
    9d5e:	af 90       	pop	r10
    9d60:	9f 90       	pop	r9
    9d62:	8f 90       	pop	r8
    9d64:	7f 90       	pop	r7
    9d66:	6f 90       	pop	r6
    9d68:	5f 90       	pop	r5
    9d6a:	4f 90       	pop	r4
    9d6c:	08 95       	ret

00009d6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9d6e:	df 92       	push	r13
    9d70:	ef 92       	push	r14
    9d72:	ff 92       	push	r15
    9d74:	0f 93       	push	r16
    9d76:	1f 93       	push	r17
    9d78:	cf 93       	push	r28
    9d7a:	df 93       	push	r29
    9d7c:	f6 2e       	mov	r15, r22
    9d7e:	04 2f       	mov	r16, r20
    9d80:	d2 2e       	mov	r13, r18
    9d82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9d84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    9d86:	8a e0       	ldi	r24, 0x0A	; 10
    9d88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    9d8a:	01 11       	cpse	r16, r1
    9d8c:	02 c0       	rjmp	.+4      	; 0x9d92 <PrintByte+0x24>
    9d8e:	11 11       	cpse	r17, r1
    9d90:	07 c0       	rjmp	.+14     	; 0x9da0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9d92:	80 2f       	mov	r24, r16
    9d94:	6e 2d       	mov	r22, r14
    9d96:	0e 94 ed 69 	call	0xd3da	; 0xd3da <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    9d9a:	40 e1       	ldi	r20, 0x10	; 16
    9d9c:	49 0f       	add	r20, r25
    9d9e:	05 c0       	rjmp	.+10     	; 0x9daa <PrintByte+0x3c>
		}else{
			if(zeropad){
    9da0:	dd 20       	and	r13, r13
    9da2:	11 f0       	breq	.+4      	; 0x9da8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    9da4:	40 e1       	ldi	r20, 0x10	; 16
    9da6:	01 c0       	rjmp	.+2      	; 0x9daa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    9da8:	40 e0       	ldi	r20, 0x00	; 0
    9daa:	6f 2d       	mov	r22, r15
    9dac:	8c 2f       	mov	r24, r28
    9dae:	0e 94 15 41 	call	0x822a	; 0x822a <SetFont>
			}
		}
		val=val/10;
    9db2:	80 2f       	mov	r24, r16
    9db4:	6e 2d       	mov	r22, r14
    9db6:	0e 94 ed 69 	call	0xd3da	; 0xd3da <__udivmodqi4>
    9dba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    9dbc:	1f 5f       	subi	r17, 0xFF	; 255
    9dbe:	21 97       	sbiw	r28, 0x01	; 1
    9dc0:	13 30       	cpi	r17, 0x03	; 3
    9dc2:	19 f7       	brne	.-58     	; 0x9d8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    9dc4:	df 91       	pop	r29
    9dc6:	cf 91       	pop	r28
    9dc8:	1f 91       	pop	r17
    9dca:	0f 91       	pop	r16
    9dcc:	ff 90       	pop	r15
    9dce:	ef 90       	pop	r14
    9dd0:	df 90       	pop	r13
    9dd2:	08 95       	ret

00009dd4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    9dd4:	0f 93       	push	r16
    9dd6:	1f 93       	push	r17
    9dd8:	cf 93       	push	r28
    9dda:	df 93       	push	r29
    9ddc:	06 2f       	mov	r16, r22
    9dde:	c4 2f       	mov	r28, r20
    9de0:	d5 2f       	mov	r29, r21
    9de2:	18 2f       	mov	r17, r24
    9de4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    9de6:	fe 01       	movw	r30, r28
    9de8:	44 91       	lpm	r20, Z
		if(c!=0){
    9dea:	44 23       	and	r20, r20
    9dec:	49 f0       	breq	.+18     	; 0x9e00 <Print+0x2c>
			c=((c&127)-32);			
    9dee:	4f 77       	andi	r20, 0x7F	; 127
    9df0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    9df2:	60 2f       	mov	r22, r16
    9df4:	8c 2f       	mov	r24, r28
    9df6:	81 0f       	add	r24, r17
    9df8:	0e 94 15 41 	call	0x822a	; 0x822a <SetFont>
    9dfc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9dfe:	f3 cf       	rjmp	.-26     	; 0x9de6 <Print+0x12>
	
}
    9e00:	df 91       	pop	r29
    9e02:	cf 91       	pop	r28
    9e04:	1f 91       	pop	r17
    9e06:	0f 91       	pop	r16
    9e08:	08 95       	ret

00009e0a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9e0a:	40 52       	subi	r20, 0x20	; 32
    9e0c:	0c 94 15 41 	jmp	0x822a	; 0x822a <SetFont>

00009e10 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9e10:	0f 93       	push	r16
    9e12:	1f 93       	push	r17
    9e14:	cf 93       	push	r28
    9e16:	df 93       	push	r29
    9e18:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9e1a:	c0 e0       	ldi	r28, 0x00	; 0
    9e1c:	d0 e0       	ldi	r29, 0x00	; 0
    9e1e:	c0 17       	cp	r28, r16
    9e20:	d1 07       	cpc	r29, r17
    9e22:	44 f4       	brge	.+16     	; 0x9e34 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9e24:	0e 94 2f 41 	call	0x825e	; 0x825e <GetVsyncFlag>
    9e28:	88 23       	and	r24, r24
    9e2a:	e1 f3       	breq	.-8      	; 0x9e24 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9e2c:	0e 94 33 41 	call	0x8266	; 0x8266 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9e30:	21 96       	adiw	r28, 0x01	; 1
    9e32:	f5 cf       	rjmp	.-22     	; 0x9e1e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9e34:	df 91       	pop	r29
    9e36:	cf 91       	pop	r28
    9e38:	1f 91       	pop	r17
    9e3a:	0f 91       	pop	r16
    9e3c:	08 95       	ret

00009e3e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9e3e:	80 93 be 0b 	sts	0x0BBE, r24
	currFadeFrame=0;
    9e42:	10 92 c2 0b 	sts	0x0BC2, r1
	fadeActive=true;
    9e46:	81 e0       	ldi	r24, 0x01	; 1
    9e48:	80 93 c1 0b 	sts	0x0BC1, r24
		
	if(blocking){
    9e4c:	66 23       	and	r22, r22
    9e4e:	21 f0       	breq	.+8      	; 0x9e58 <doFade+0x1a>
		while(fadeActive==true);
    9e50:	80 91 c1 0b 	lds	r24, 0x0BC1
    9e54:	81 11       	cpse	r24, r1
    9e56:	fc cf       	rjmp	.-8      	; 0x9e50 <doFade+0x12>
    9e58:	08 95       	ret

00009e5a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9e5a:	81 11       	cpse	r24, r1
    9e5c:	03 c0       	rjmp	.+6      	; 0x9e64 <FadeIn+0xa>
		DDRC=0xff;
    9e5e:	8f ef       	ldi	r24, 0xFF	; 255
    9e60:	87 b9       	out	0x07, r24	; 7
		return;
    9e62:	08 95       	ret
	}
	fadeStep=1;
    9e64:	91 e0       	ldi	r25, 0x01	; 1
    9e66:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=1;
    9e6a:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    9e6e:	0c 94 1f 4f 	jmp	0x9e3e	; 0x9e3e <doFade>

00009e72 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9e72:	81 11       	cpse	r24, r1
    9e74:	02 c0       	rjmp	.+4      	; 0x9e7a <FadeOut+0x8>
		DDRC=0;
    9e76:	17 b8       	out	0x07, r1	; 7
		return;
    9e78:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9e7a:	9c e0       	ldi	r25, 0x0C	; 12
    9e7c:	90 93 c3 0b 	sts	0x0BC3, r25
	fadeDir=-1;
    9e80:	9f ef       	ldi	r25, 0xFF	; 255
    9e82:	90 93 bf 0b 	sts	0x0BBF, r25
	doFade(speed,blocking);
    9e86:	0c 94 1f 4f 	jmp	0x9e3e	; 0x9e3e <doFade>

00009e8a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9e8a:	80 91 c1 0b 	lds	r24, 0x0BC1
    9e8e:	88 23       	and	r24, r24
    9e90:	01 f1       	breq	.+64     	; 0x9ed2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9e92:	80 91 c2 0b 	lds	r24, 0x0BC2
    9e96:	81 11       	cpse	r24, r1
    9e98:	19 c0       	rjmp	.+50     	; 0x9ecc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9e9a:	80 91 be 0b 	lds	r24, 0x0BBE
    9e9e:	80 93 c2 0b 	sts	0x0BC2, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9ea2:	e0 91 c3 0b 	lds	r30, 0x0BC3
    9ea6:	f0 e0       	ldi	r31, 0x00	; 0
    9ea8:	e9 52       	subi	r30, 0x29	; 41
    9eaa:	ff 4f       	sbci	r31, 0xFF	; 255
    9eac:	e4 91       	lpm	r30, Z
    9eae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9eb0:	90 91 bf 0b 	lds	r25, 0x0BBF
    9eb4:	80 91 c3 0b 	lds	r24, 0x0BC3
    9eb8:	89 0f       	add	r24, r25
    9eba:	80 93 c3 0b 	sts	0x0BC3, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9ebe:	88 23       	and	r24, r24
    9ec0:	11 f0       	breq	.+4      	; 0x9ec6 <ProcessFading+0x3c>
    9ec2:	8d 30       	cpi	r24, 0x0D	; 13
    9ec4:	31 f4       	brne	.+12     	; 0x9ed2 <ProcessFading+0x48>
				fadeActive=false;
    9ec6:	10 92 c1 0b 	sts	0x0BC1, r1
    9eca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9ecc:	81 50       	subi	r24, 0x01	; 1
    9ece:	80 93 c2 0b 	sts	0x0BC2, r24
    9ed2:	08 95       	ret

00009ed4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    9ed4:	0e 94 45 4f 	call	0x9e8a	; 0x9e8a <ProcessFading>
		ProcessSprites();
    9ed8:	0c 94 14 4d 	jmp	0x9a28	; 0x9a28 <ProcessSprites>

00009edc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9edc:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9ede:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9ee0:	93 81       	ldd	r25, Z+3	; 0x03
    9ee2:	9f 5f       	subi	r25, 0xFF	; 255
    9ee4:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9ee6:	22 81       	ldd	r18, Z+2	; 0x02
    9ee8:	80 81       	ld	r24, Z
    9eea:	92 17       	cp	r25, r18
    9eec:	38 f4       	brcc	.+14     	; 0x9efc <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9eee:	e8 0f       	add	r30, r24
    9ef0:	f1 1d       	adc	r31, r1
    9ef2:	e8 0f       	add	r30, r24
    9ef4:	f1 1d       	adc	r31, r1
    9ef6:	86 81       	ldd	r24, Z+6	; 0x06
    9ef8:	97 81       	ldd	r25, Z+7	; 0x07
    9efa:	08 95       	ret
	}
	anim->frame_count = 0;
    9efc:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9efe:	90 e0       	ldi	r25, 0x00	; 0
    9f00:	01 96       	adiw	r24, 0x01	; 1
    9f02:	61 81       	ldd	r22, Z+1	; 0x01
    9f04:	70 e0       	ldi	r23, 0x00	; 0
    9f06:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    9f0a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9f0c:	81 11       	cpse	r24, r1
    9f0e:	02 c0       	rjmp	.+4      	; 0x9f14 <LBGetNextFrame+0x38>
    9f10:	21 e0       	ldi	r18, 0x01	; 1
    9f12:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9f14:	99 27       	eor	r25, r25
    9f16:	03 96       	adiw	r24, 0x03	; 3
    9f18:	88 0f       	add	r24, r24
    9f1a:	99 1f       	adc	r25, r25
    9f1c:	e8 0f       	add	r30, r24
    9f1e:	f9 1f       	adc	r31, r25
    9f20:	80 81       	ld	r24, Z
    9f22:	91 81       	ldd	r25, Z+1	; 0x01
}
    9f24:	08 95       	ret

00009f26 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    9f26:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9f28:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9f2a:	93 81       	ldd	r25, Z+3	; 0x03
    9f2c:	9f 5f       	subi	r25, 0xFF	; 255
    9f2e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9f30:	22 81       	ldd	r18, Z+2	; 0x02
    9f32:	80 81       	ld	r24, Z
    9f34:	92 17       	cp	r25, r18
    9f36:	e0 f0       	brcs	.+56     	; 0x9f70 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    9f38:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    9f3a:	95 81       	ldd	r25, Z+5	; 0x05
    9f3c:	99 23       	and	r25, r25
    9f3e:	49 f0       	breq	.+18     	; 0x9f52 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9f40:	81 50       	subi	r24, 0x01	; 1
    9f42:	10 f0       	brcs	.+4      	; 0x9f48 <LBGetNextFrameReverse+0x22>
    9f44:	80 83       	st	Z, r24
    9f46:	13 c0       	rjmp	.+38     	; 0x9f6e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    9f48:	10 82       	st	Z, r1
			anim->looped = 1;
    9f4a:	81 e0       	ldi	r24, 0x01	; 1
    9f4c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    9f4e:	15 82       	std	Z+5, r1	; 0x05
    9f50:	0e c0       	rjmp	.+28     	; 0x9f6e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9f52:	21 81       	ldd	r18, Z+1	; 0x01
    9f54:	90 e0       	ldi	r25, 0x00	; 0
    9f56:	01 96       	adiw	r24, 0x01	; 1
    9f58:	62 2f       	mov	r22, r18
    9f5a:	70 e0       	ldi	r23, 0x00	; 0
    9f5c:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    9f60:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    9f62:	81 11       	cpse	r24, r1
    9f64:	04 c0       	rjmp	.+8      	; 0x9f6e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    9f66:	81 e0       	ldi	r24, 0x01	; 1
    9f68:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    9f6a:	21 50       	subi	r18, 0x01	; 1
    9f6c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    9f6e:	80 81       	ld	r24, Z
    9f70:	e8 0f       	add	r30, r24
    9f72:	f1 1d       	adc	r31, r1
    9f74:	e8 0f       	add	r30, r24
    9f76:	f1 1d       	adc	r31, r1
    9f78:	86 81       	ldd	r24, Z+6	; 0x06
    9f7a:	97 81       	ldd	r25, Z+7	; 0x07
}
    9f7c:	08 95       	ret

00009f7e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9f7e:	0f 93       	push	r16
    9f80:	1f 93       	push	r17
    9f82:	cf 93       	push	r28
    9f84:	df 93       	push	r29
    9f86:	1f 92       	push	r1
    9f88:	cd b7       	in	r28, 0x3d	; 61
    9f8a:	de b7       	in	r29, 0x3e	; 62
    9f8c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9f8e:	86 2f       	mov	r24, r22
    9f90:	69 83       	std	Y+1, r22	; 0x01
    9f92:	0e 94 39 41 	call	0x8272	; 0x8272 <ReadJoypad>
    9f96:	d8 01       	movw	r26, r16
    9f98:	15 96       	adiw	r26, 0x05	; 5
    9f9a:	9c 93       	st	X, r25
    9f9c:	8e 93       	st	-X, r24
    9f9e:	14 97       	sbiw	r26, 0x04	; 4
    9fa0:	69 81       	ldd	r22, Y+1	; 0x01
    9fa2:	e6 2f       	mov	r30, r22
    9fa4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9fa6:	00 97       	sbiw	r24, 0x00	; 0
    9fa8:	51 f0       	breq	.+20     	; 0x9fbe <LBGetJoyPadState+0x40>
    9faa:	df 01       	movw	r26, r30
    9fac:	aa 0f       	add	r26, r26
    9fae:	bb 1f       	adc	r27, r27
    9fb0:	a5 5c       	subi	r26, 0xC5	; 197
    9fb2:	b4 4f       	sbci	r27, 0xF4	; 244
    9fb4:	2d 91       	ld	r18, X+
    9fb6:	3c 91       	ld	r19, X
    9fb8:	82 17       	cp	r24, r18
    9fba:	93 07       	cpc	r25, r19
    9fbc:	21 f0       	breq	.+8      	; 0x9fc6 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9fbe:	d8 01       	movw	r26, r16
    9fc0:	16 96       	adiw	r26, 0x06	; 6
    9fc2:	1c 92       	st	X, r1
    9fc4:	07 c0       	rjmp	.+14     	; 0x9fd4 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9fc6:	d8 01       	movw	r26, r16
    9fc8:	16 96       	adiw	r26, 0x06	; 6
    9fca:	2c 91       	ld	r18, X
    9fcc:	16 97       	sbiw	r26, 0x06	; 6
    9fce:	2f 5f       	subi	r18, 0xFF	; 255
    9fd0:	16 96       	adiw	r26, 0x06	; 6
    9fd2:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9fd4:	ee 0f       	add	r30, r30
    9fd6:	ff 1f       	adc	r31, r31
    9fd8:	e5 5c       	subi	r30, 0xC5	; 197
    9fda:	f4 4f       	sbci	r31, 0xF4	; 244
    9fdc:	20 81       	ld	r18, Z
    9fde:	31 81       	ldd	r19, Z+1	; 0x01
    9fe0:	a9 01       	movw	r20, r18
    9fe2:	40 95       	com	r20
    9fe4:	50 95       	com	r21
    9fe6:	48 23       	and	r20, r24
    9fe8:	59 23       	and	r21, r25
    9fea:	d8 01       	movw	r26, r16
    9fec:	11 96       	adiw	r26, 0x01	; 1
    9fee:	5c 93       	st	X, r21
    9ff0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9ff2:	ac 01       	movw	r20, r24
    9ff4:	40 95       	com	r20
    9ff6:	50 95       	com	r21
    9ff8:	24 23       	and	r18, r20
    9ffa:	35 23       	and	r19, r21
    9ffc:	13 96       	adiw	r26, 0x03	; 3
    9ffe:	3c 93       	st	X, r19
    a000:	2e 93       	st	-X, r18
    a002:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a004:	91 83       	std	Z+1, r25	; 0x01
    a006:	80 83       	st	Z, r24
}
    a008:	0f 90       	pop	r0
    a00a:	df 91       	pop	r29
    a00c:	cf 91       	pop	r28
    a00e:	1f 91       	pop	r17
    a010:	0f 91       	pop	r16
    a012:	08 95       	ret

0000a014 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    a014:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    a016:	fb 01       	movw	r30, r22
    a018:	2e 2f       	mov	r18, r30
    a01a:	23 1b       	sub	r18, r19
    a01c:	24 17       	cp	r18, r20
    a01e:	28 f4       	brcc	.+10     	; 0xa02a <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    a020:	21 91       	ld	r18, Z+
    a022:	dc 01       	movw	r26, r24
    a024:	2d 93       	st	X+, r18
    a026:	cd 01       	movw	r24, r26
    a028:	f7 cf       	rjmp	.-18     	; 0xa018 <LBCopyChars+0x4>
	}
}
    a02a:	08 95       	ret

0000a02c <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    a02c:	af 92       	push	r10
    a02e:	bf 92       	push	r11
    a030:	cf 92       	push	r12
    a032:	df 92       	push	r13
    a034:	ef 92       	push	r14
    a036:	ff 92       	push	r15
    a038:	0f 93       	push	r16
    a03a:	1f 93       	push	r17
    a03c:	cf 93       	push	r28
    a03e:	df 93       	push	r29
    a040:	1f 92       	push	r1
    a042:	cd b7       	in	r28, 0x3d	; 61
    a044:	de b7       	in	r29, 0x3e	; 62
    a046:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    a048:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    a04a:	c6 2e       	mov	r12, r22
    a04c:	d1 2c       	mov	r13, r1
    a04e:	90 e0       	ldi	r25, 0x00	; 0
    a050:	5c 01       	movw	r10, r24
    a052:	a4 1a       	sub	r10, r20
    a054:	b5 0a       	sbc	r11, r21
    a056:	80 2f       	mov	r24, r16
    a058:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    a05a:	82 17       	cp	r24, r18
    a05c:	60 f4       	brcc	.+24     	; 0xa076 <LBPrintStr+0x4a>
    a05e:	c5 01       	movw	r24, r10
    a060:	80 0f       	add	r24, r16
    a062:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    a064:	f8 01       	movw	r30, r16
    a066:	41 91       	ld	r20, Z+
    a068:	8f 01       	movw	r16, r30
    a06a:	b6 01       	movw	r22, r12
    a06c:	29 83       	std	Y+1, r18	; 0x01
    a06e:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
    a072:	29 81       	ldd	r18, Y+1	; 0x01
    a074:	f0 cf       	rjmp	.-32     	; 0xa056 <LBPrintStr+0x2a>
	}
}
    a076:	0f 90       	pop	r0
    a078:	df 91       	pop	r29
    a07a:	cf 91       	pop	r28
    a07c:	1f 91       	pop	r17
    a07e:	0f 91       	pop	r16
    a080:	ff 90       	pop	r15
    a082:	ef 90       	pop	r14
    a084:	df 90       	pop	r13
    a086:	cf 90       	pop	r12
    a088:	bf 90       	pop	r11
    a08a:	af 90       	pop	r10
    a08c:	08 95       	ret

0000a08e <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    a08e:	af 92       	push	r10
    a090:	cf 92       	push	r12
    a092:	ef 92       	push	r14
    a094:	ff 92       	push	r15
    a096:	0f 93       	push	r16
    a098:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    a09a:	70 e0       	ldi	r23, 0x00	; 0
    a09c:	f1 2c       	mov	r15, r1
    a09e:	fb 01       	movw	r30, r22
    a0a0:	e2 0f       	add	r30, r18
    a0a2:	f1 1d       	adc	r31, r1
    a0a4:	ee 16       	cp	r14, r30
    a0a6:	ff 06       	cpc	r15, r31
    a0a8:	a4 f4       	brge	.+40     	; 0xa0d2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    a0aa:	ea 0c       	add	r14, r10
    a0ac:	f1 1c       	adc	r15, r1
    a0ae:	6e 15       	cp	r22, r14
    a0b0:	7f 05       	cpc	r23, r15
    a0b2:	7c f4       	brge	.+30     	; 0xa0d2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    a0b4:	28 2f       	mov	r18, r24
    a0b6:	30 e0       	ldi	r19, 0x00	; 0
    a0b8:	10 e0       	ldi	r17, 0x00	; 0
    a0ba:	c9 01       	movw	r24, r18
    a0bc:	84 0f       	add	r24, r20
    a0be:	91 1d       	adc	r25, r1
    a0c0:	08 17       	cp	r16, r24
    a0c2:	19 07       	cpc	r17, r25
    a0c4:	34 f4       	brge	.+12     	; 0xa0d2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    a0c6:	0c 0d       	add	r16, r12
    a0c8:	11 1d       	adc	r17, r1
    a0ca:	81 e0       	ldi	r24, 0x01	; 1
    a0cc:	20 17       	cp	r18, r16
    a0ce:	31 07       	cpc	r19, r17
    a0d0:	0c f0       	brlt	.+2      	; 0xa0d4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    a0d2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a0d4:	1f 91       	pop	r17
    a0d6:	0f 91       	pop	r16
    a0d8:	ff 90       	pop	r15
    a0da:	ef 90       	pop	r14
    a0dc:	cf 90       	pop	r12
    a0de:	af 90       	pop	r10
    a0e0:	08 95       	ret

0000a0e2 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    a0e2:	2f 92       	push	r2
    a0e4:	3f 92       	push	r3
    a0e6:	4f 92       	push	r4
    a0e8:	5f 92       	push	r5
    a0ea:	6f 92       	push	r6
    a0ec:	7f 92       	push	r7
    a0ee:	8f 92       	push	r8
    a0f0:	9f 92       	push	r9
    a0f2:	af 92       	push	r10
    a0f4:	bf 92       	push	r11
    a0f6:	cf 92       	push	r12
    a0f8:	df 92       	push	r13
    a0fa:	ef 92       	push	r14
    a0fc:	ff 92       	push	r15
    a0fe:	0f 93       	push	r16
    a100:	1f 93       	push	r17
    a102:	cf 93       	push	r28
    a104:	df 93       	push	r29
    a106:	00 d0       	rcall	.+0      	; 0xa108 <LBLineIntersect+0x26>
    a108:	00 d0       	rcall	.+0      	; 0xa10a <LBLineIntersect+0x28>
    a10a:	cd b7       	in	r28, 0x3d	; 61
    a10c:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a10e:	f1 2c       	mov	r15, r1
    a110:	8a 2c       	mov	r8, r10
    a112:	91 2c       	mov	r9, r1
    a114:	8e 18       	sub	r8, r14
    a116:	9f 08       	sbc	r9, r15
    a118:	a8 2e       	mov	r10, r24
    a11a:	b1 2c       	mov	r11, r1
    a11c:	24 2e       	mov	r2, r20
    a11e:	31 2c       	mov	r3, r1
    a120:	2a 18       	sub	r2, r10
    a122:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a124:	10 e0       	ldi	r17, 0x00	; 0
    a126:	d1 2c       	mov	r13, r1
    a128:	c0 1a       	sub	r12, r16
    a12a:	d1 0a       	sbc	r13, r17
    a12c:	46 2f       	mov	r20, r22
    a12e:	50 e0       	ldi	r21, 0x00	; 0
    a130:	5c 83       	std	Y+4, r21	; 0x04
    a132:	4b 83       	std	Y+3, r20	; 0x03
    a134:	82 2f       	mov	r24, r18
    a136:	90 e0       	ldi	r25, 0x00	; 0
    a138:	9a 83       	std	Y+2, r25	; 0x02
    a13a:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a13c:	82 9c       	mul	r8, r2
    a13e:	90 01       	movw	r18, r0
    a140:	83 9c       	mul	r8, r3
    a142:	30 0d       	add	r19, r0
    a144:	92 9c       	mul	r9, r2
    a146:	30 0d       	add	r19, r0
    a148:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a14a:	ca 01       	movw	r24, r20
    a14c:	e9 81       	ldd	r30, Y+1	; 0x01
    a14e:	fa 81       	ldd	r31, Y+2	; 0x02
    a150:	8e 1b       	sub	r24, r30
    a152:	9f 0b       	sbc	r25, r31
    a154:	c8 9e       	mul	r12, r24
    a156:	b0 01       	movw	r22, r0
    a158:	c9 9e       	mul	r12, r25
    a15a:	70 0d       	add	r23, r0
    a15c:	d8 9e       	mul	r13, r24
    a15e:	70 0d       	add	r23, r0
    a160:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a162:	62 0f       	add	r22, r18
    a164:	73 1f       	adc	r23, r19
    a166:	88 27       	eor	r24, r24
    a168:	77 fd       	sbrc	r23, 7
    a16a:	80 95       	com	r24
    a16c:	98 2f       	mov	r25, r24
    a16e:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    a172:	2b 01       	movw	r4, r22
    a174:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a176:	20 e0       	ldi	r18, 0x00	; 0
    a178:	30 e0       	ldi	r19, 0x00	; 0
    a17a:	a9 01       	movw	r20, r18
    a17c:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    a180:	88 23       	and	r24, r24
    a182:	09 f4       	brne	.+2      	; 0xa186 <LBLineIntersect+0xa4>
    a184:	6c c0       	rjmp	.+216    	; 0xa25e <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a186:	4b 81       	ldd	r20, Y+3	; 0x03
    a188:	5c 81       	ldd	r21, Y+4	; 0x04
    a18a:	4e 19       	sub	r20, r14
    a18c:	5f 09       	sbc	r21, r15
    a18e:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a190:	0a 19       	sub	r16, r10
    a192:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a194:	c4 9e       	mul	r12, r20
    a196:	c0 01       	movw	r24, r0
    a198:	c5 9e       	mul	r12, r21
    a19a:	90 0d       	add	r25, r0
    a19c:	d4 9e       	mul	r13, r20
    a19e:	90 0d       	add	r25, r0
    a1a0:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a1a2:	80 9e       	mul	r8, r16
    a1a4:	b0 01       	movw	r22, r0
    a1a6:	81 9e       	mul	r8, r17
    a1a8:	70 0d       	add	r23, r0
    a1aa:	90 9e       	mul	r9, r16
    a1ac:	70 0d       	add	r23, r0
    a1ae:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a1b0:	68 0f       	add	r22, r24
    a1b2:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a1b4:	88 27       	eor	r24, r24
    a1b6:	77 fd       	sbrc	r23, 7
    a1b8:	80 95       	com	r24
    a1ba:	98 2f       	mov	r25, r24
    a1bc:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a1c0:	a3 01       	movw	r20, r6
    a1c2:	92 01       	movw	r18, r4
    a1c4:	0e 94 8a 6a 	call	0xd514	; 0xd514 <__divsf3>
    a1c8:	4b 01       	movw	r8, r22
    a1ca:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a1cc:	20 e0       	ldi	r18, 0x00	; 0
    a1ce:	30 e0       	ldi	r19, 0x00	; 0
    a1d0:	a9 01       	movw	r20, r18
    a1d2:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    a1d6:	87 fd       	sbrc	r24, 7
    a1d8:	42 c0       	rjmp	.+132    	; 0xa25e <LBLineIntersect+0x17c>
    a1da:	20 e0       	ldi	r18, 0x00	; 0
    a1dc:	30 e0       	ldi	r19, 0x00	; 0
    a1de:	40 e8       	ldi	r20, 0x80	; 128
    a1e0:	5f e3       	ldi	r21, 0x3F	; 63
    a1e2:	c5 01       	movw	r24, r10
    a1e4:	b4 01       	movw	r22, r8
    a1e6:	0e 94 d5 6b 	call	0xd7aa	; 0xd7aa <__gesf2>
    a1ea:	18 16       	cp	r1, r24
    a1ec:	c4 f1       	brlt	.+112    	; 0xa25e <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a1ee:	2e 9c       	mul	r2, r14
    a1f0:	b0 01       	movw	r22, r0
    a1f2:	2f 9c       	mul	r2, r15
    a1f4:	70 0d       	add	r23, r0
    a1f6:	3e 9c       	mul	r3, r14
    a1f8:	70 0d       	add	r23, r0
    a1fa:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a1fc:	29 81       	ldd	r18, Y+1	; 0x01
    a1fe:	3a 81       	ldd	r19, Y+2	; 0x02
    a200:	8b 81       	ldd	r24, Y+3	; 0x03
    a202:	9c 81       	ldd	r25, Y+4	; 0x04
    a204:	28 1b       	sub	r18, r24
    a206:	39 0b       	sbc	r19, r25
    a208:	20 9f       	mul	r18, r16
    a20a:	c0 01       	movw	r24, r0
    a20c:	21 9f       	mul	r18, r17
    a20e:	90 0d       	add	r25, r0
    a210:	30 9f       	mul	r19, r16
    a212:	90 0d       	add	r25, r0
    a214:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a216:	68 0f       	add	r22, r24
    a218:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a21a:	88 27       	eor	r24, r24
    a21c:	77 fd       	sbrc	r23, 7
    a21e:	80 95       	com	r24
    a220:	98 2f       	mov	r25, r24
    a222:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a226:	a3 01       	movw	r20, r6
    a228:	92 01       	movw	r18, r4
    a22a:	0e 94 8a 6a 	call	0xd514	; 0xd514 <__divsf3>
    a22e:	6b 01       	movw	r12, r22
    a230:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a232:	20 e0       	ldi	r18, 0x00	; 0
    a234:	30 e0       	ldi	r19, 0x00	; 0
    a236:	a9 01       	movw	r20, r18
    a238:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    a23c:	87 fd       	sbrc	r24, 7
    a23e:	0f c0       	rjmp	.+30     	; 0xa25e <LBLineIntersect+0x17c>
    a240:	11 e0       	ldi	r17, 0x01	; 1
    a242:	20 e0       	ldi	r18, 0x00	; 0
    a244:	30 e0       	ldi	r19, 0x00	; 0
    a246:	40 e8       	ldi	r20, 0x80	; 128
    a248:	5f e3       	ldi	r21, 0x3F	; 63
    a24a:	c7 01       	movw	r24, r14
    a24c:	b6 01       	movw	r22, r12
    a24e:	0e 94 d5 6b 	call	0xd7aa	; 0xd7aa <__gesf2>
    a252:	18 16       	cp	r1, r24
    a254:	0c f0       	brlt	.+2      	; 0xa258 <LBLineIntersect+0x176>
    a256:	10 e0       	ldi	r17, 0x00	; 0
    a258:	81 e0       	ldi	r24, 0x01	; 1
    a25a:	81 27       	eor	r24, r17
    a25c:	01 c0       	rjmp	.+2      	; 0xa260 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a25e:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a260:	0f 90       	pop	r0
    a262:	0f 90       	pop	r0
    a264:	0f 90       	pop	r0
    a266:	0f 90       	pop	r0
    a268:	df 91       	pop	r29
    a26a:	cf 91       	pop	r28
    a26c:	1f 91       	pop	r17
    a26e:	0f 91       	pop	r16
    a270:	ff 90       	pop	r15
    a272:	ef 90       	pop	r14
    a274:	df 90       	pop	r13
    a276:	cf 90       	pop	r12
    a278:	bf 90       	pop	r11
    a27a:	af 90       	pop	r10
    a27c:	9f 90       	pop	r9
    a27e:	8f 90       	pop	r8
    a280:	7f 90       	pop	r7
    a282:	6f 90       	pop	r6
    a284:	5f 90       	pop	r5
    a286:	4f 90       	pop	r4
    a288:	3f 90       	pop	r3
    a28a:	2f 90       	pop	r2
    a28c:	08 95       	ret

0000a28e <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a28e:	0f 93       	push	r16
    a290:	1f 93       	push	r17
    a292:	cf 93       	push	r28
    a294:	df 93       	push	r29
    a296:	8c 01       	movw	r16, r24
    a298:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    a29a:	80 91 39 0b 	lds	r24, 0x0B39
    a29e:	90 91 3a 0b 	lds	r25, 0x0B3A
    a2a2:	89 2b       	or	r24, r25
    a2a4:	31 f4       	brne	.+12     	; 0xa2b2 <LBRandom+0x24>
    a2a6:	0e 94 79 41 	call	0x82f2	; 0x82f2 <GetRandomSeed>
    a2aa:	90 93 3a 0b 	sts	0x0B3A, r25
    a2ae:	80 93 39 0b 	sts	0x0B39, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    a2b2:	90 91 38 0b 	lds	r25, 0x0B38
    a2b6:	20 91 39 0b 	lds	r18, 0x0B39
    a2ba:	30 91 3a 0b 	lds	r19, 0x0B3A
    a2be:	09 2e       	mov	r0, r25
    a2c0:	02 c0       	rjmp	.+4      	; 0xa2c6 <LBRandom+0x38>
    a2c2:	36 95       	lsr	r19
    a2c4:	27 95       	ror	r18
    a2c6:	0a 94       	dec	r0
    a2c8:	e2 f7       	brpl	.-8      	; 0xa2c2 <LBRandom+0x34>
	unsigned int delta = to - from;
    a2ca:	be 01       	movw	r22, r28
    a2cc:	60 1b       	sub	r22, r16
    a2ce:	71 0b       	sbc	r23, r17

	shift_count++;
    a2d0:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    a2d2:	90 31       	cpi	r25, 0x10	; 16
    a2d4:	18 f4       	brcc	.+6      	; 0xa2dc <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    a2d6:	90 93 38 0b 	sts	0x0B38, r25
    a2da:	02 c0       	rjmp	.+4      	; 0xa2e0 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    a2dc:	10 92 38 0b 	sts	0x0B38, r1

	return from + ((delta + shifted) % delta);
    a2e0:	cb 01       	movw	r24, r22
    a2e2:	82 0f       	add	r24, r18
    a2e4:	93 1f       	adc	r25, r19
    a2e6:	0e 94 f9 69 	call	0xd3f2	; 0xd3f2 <__udivmodhi4>
}
    a2ea:	80 0f       	add	r24, r16
    a2ec:	91 1f       	adc	r25, r17
    a2ee:	df 91       	pop	r29
    a2f0:	cf 91       	pop	r28
    a2f2:	1f 91       	pop	r17
    a2f4:	0f 91       	pop	r16
    a2f6:	08 95       	ret

0000a2f8 <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    a2f8:	cf 93       	push	r28
    a2fa:	df 93       	push	r29
    a2fc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a2fe:	c0 e0       	ldi	r28, 0x00	; 0
    a300:	cd 17       	cp	r28, r29
    a302:	31 f0       	breq	.+12     	; 0xa310 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    a304:	8f ef       	ldi	r24, 0xFF	; 255
    a306:	9f ef       	ldi	r25, 0xFF	; 255
    a308:	0e 94 45 41 	call	0x828a	; 0x828a <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a30c:	cf 5f       	subi	r28, 0xFF	; 255
    a30e:	f8 cf       	rjmp	.-16     	; 0xa300 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    a310:	df 91       	pop	r29
    a312:	cf 91       	pop	r28
    a314:	08 95       	ret

0000a316 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    a316:	21 e9       	ldi	r18, 0x91	; 145
    a318:	30 e0       	ldi	r19, 0x00	; 0
    a31a:	fc 01       	movw	r30, r24
    a31c:	21 93       	st	Z+, r18
    a31e:	31 93       	st	Z+, r19
    a320:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    a322:	4e e1       	ldi	r20, 0x1E	; 30
    a324:	50 e0       	ldi	r21, 0x00	; 0
    a326:	64 ee       	ldi	r22, 0xE4	; 228
    a328:	70 e0       	ldi	r23, 0x00	; 0
    a32a:	0c 94 3c 6c 	jmp	0xd878	; 0xd878 <memcpy_P>

0000a32e <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    a32e:	20 e9       	ldi	r18, 0x90	; 144
    a330:	30 e0       	ldi	r19, 0x00	; 0
    a332:	fc 01       	movw	r30, r24
    a334:	21 93       	st	Z+, r18
    a336:	31 93       	st	Z+, r19
    a338:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    a33a:	4e e1       	ldi	r20, 0x1E	; 30
    a33c:	50 e0       	ldi	r21, 0x00	; 0
    a33e:	62 e0       	ldi	r22, 0x02	; 2
    a340:	71 e0       	ldi	r23, 0x01	; 1
    a342:	0c 94 3c 6c 	jmp	0xd878	; 0xd878 <memcpy_P>

0000a346 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    a346:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    a348:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a34a:	16 86       	std	Z+14, r1	; 0x0e
    a34c:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    a34e:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    a350:	73 e0       	ldi	r23, 0x03	; 3
    a352:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a354:	65 e0       	ldi	r22, 0x05	; 5
    a356:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    a358:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    a35a:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    a35c:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a35e:	4b e7       	ldi	r20, 0x7B	; 123
    a360:	59 e7       	ldi	r21, 0x79	; 121
    a362:	50 87       	std	Z+8, r21	; 0x08
    a364:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a366:	28 e7       	ldi	r18, 0x78	; 120
    a368:	39 e7       	ldi	r19, 0x79	; 121
    a36a:	32 87       	std	Z+10, r19	; 0x0a
    a36c:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a36e:	85 e7       	ldi	r24, 0x75	; 117
    a370:	99 e7       	ldi	r25, 0x79	; 121
    a372:	94 87       	std	Z+12, r25	; 0x0c
    a374:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a376:	14 8e       	std	Z+28, r1	; 0x1c
    a378:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    a37a:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    a37c:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a37e:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    a380:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    a382:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    a384:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a386:	56 8b       	std	Z+22, r21	; 0x16
    a388:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a38a:	30 8f       	std	Z+24, r19	; 0x18
    a38c:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a38e:	92 8f       	std	Z+26, r25	; 0x1a
    a390:	81 8f       	std	Z+25, r24	; 0x19
    a392:	08 95       	ret

0000a394 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    a394:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a396:	15 86       	std	Z+13, r1	; 0x0d
    a398:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a39a:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    a39c:	83 e0       	ldi	r24, 0x03	; 3
    a39e:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    a3a0:	8e e1       	ldi	r24, 0x1E	; 30
    a3a2:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a3a4:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a3a6:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a3a8:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    a3aa:	81 e5       	ldi	r24, 0x51	; 81
    a3ac:	99 e7       	ldi	r25, 0x79	; 121
    a3ae:	97 83       	std	Z+7, r25	; 0x07
    a3b0:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    a3b2:	8e e4       	ldi	r24, 0x4E	; 78
    a3b4:	99 e7       	ldi	r25, 0x79	; 121
    a3b6:	91 87       	std	Z+9, r25	; 0x09
    a3b8:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    a3ba:	8b e4       	ldi	r24, 0x4B	; 75
    a3bc:	99 e7       	ldi	r25, 0x79	; 121
    a3be:	93 87       	std	Z+11, r25	; 0x0b
    a3c0:	82 87       	std	Z+10, r24	; 0x0a
    a3c2:	08 95       	ret

0000a3c4 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    a3c4:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a3c6:	15 86       	std	Z+13, r1	; 0x0d
    a3c8:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a3ca:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    a3cc:	82 e0       	ldi	r24, 0x02	; 2
    a3ce:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    a3d0:	8e e1       	ldi	r24, 0x1E	; 30
    a3d2:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a3d4:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a3d6:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a3d8:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    a3da:	8f ed       	ldi	r24, 0xDF	; 223
    a3dc:	96 e7       	ldi	r25, 0x76	; 118
    a3de:	97 83       	std	Z+7, r25	; 0x07
    a3e0:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    a3e2:	85 e1       	ldi	r24, 0x15	; 21
    a3e4:	98 e7       	ldi	r25, 0x78	; 120
    a3e6:	91 87       	std	Z+9, r25	; 0x09
    a3e8:	80 87       	std	Z+8, r24	; 0x08
    a3ea:	08 95       	ret

0000a3ec <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    a3ec:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    a3ee:	88 e7       	ldi	r24, 0x78	; 120
    a3f0:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    a3f2:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    a3f4:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    a3f6:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    a3f8:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    a3fa:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    a3fc:	84 e0       	ldi	r24, 0x04	; 4
    a3fe:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    a400:	66 23       	and	r22, r22
    a402:	11 f0       	breq	.+4      	; 0xa408 <init_shot_state+0x1c>
    a404:	85 e0       	ldi	r24, 0x05	; 5
    a406:	01 c0       	rjmp	.+2      	; 0xa40a <init_shot_state+0x1e>
    a408:	81 e0       	ldi	r24, 0x01	; 1
    a40a:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    a40c:	80 e0       	ldi	r24, 0x00	; 0
    a40e:	90 e0       	ldi	r25, 0x00	; 0
    a410:	a0 e7       	ldi	r26, 0x70	; 112
    a412:	b3 e4       	ldi	r27, 0x43	; 67
    a414:	83 83       	std	Z+3, r24	; 0x03
    a416:	94 83       	std	Z+4, r25	; 0x04
    a418:	a5 83       	std	Z+5, r26	; 0x05
    a41a:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    a41c:	17 82       	std	Z+7, r1	; 0x07
    a41e:	10 86       	std	Z+8, r1	; 0x08
    a420:	11 86       	std	Z+9, r1	; 0x09
    a422:	12 86       	std	Z+10, r1	; 0x0a
    a424:	08 95       	ret

0000a426 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    a426:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    a428:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    a42a:	82 e0       	ldi	r24, 0x02	; 2
    a42c:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a42e:	85 e0       	ldi	r24, 0x05	; 5
    a430:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    a432:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    a434:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    a436:	15 8a       	std	Z+21, r1	; 0x15
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    a438:	66 23       	and	r22, r22
    a43a:	19 f0       	breq	.+6      	; 0xa442 <set_shot_animations+0x1c>
    a43c:	86 e2       	ldi	r24, 0x26	; 38
    a43e:	90 e4       	ldi	r25, 0x40	; 64
    a440:	02 c0       	rjmp	.+4      	; 0xa446 <set_shot_animations+0x20>
    a442:	89 e2       	ldi	r24, 0x29	; 41
    a444:	90 e4       	ldi	r25, 0x40	; 64
    a446:	97 8b       	std	Z+23, r25	; 0x17
    a448:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    a44a:	66 23       	and	r22, r22
    a44c:	19 f0       	breq	.+6      	; 0xa454 <set_shot_animations+0x2e>
    a44e:	83 e2       	ldi	r24, 0x23	; 35
    a450:	90 e4       	ldi	r25, 0x40	; 64
    a452:	02 c0       	rjmp	.+4      	; 0xa458 <set_shot_animations+0x32>
    a454:	89 e2       	ldi	r24, 0x29	; 41
    a456:	90 e4       	ldi	r25, 0x40	; 64
    a458:	91 8f       	std	Z+25, r25	; 0x19
    a45a:	80 8f       	std	Z+24, r24	; 0x18
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    a45c:	82 e0       	ldi	r24, 0x02	; 2
    a45e:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a460:	85 e0       	ldi	r24, 0x05	; 5
    a462:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    a464:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    a466:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    a468:	11 a2       	std	Z+33, r1	; 0x21
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    a46a:	66 23       	and	r22, r22
    a46c:	19 f0       	breq	.+6      	; 0xa474 <set_shot_animations+0x4e>
    a46e:	80 e2       	ldi	r24, 0x20	; 32
    a470:	90 e4       	ldi	r25, 0x40	; 64
    a472:	02 c0       	rjmp	.+4      	; 0xa478 <set_shot_animations+0x52>
    a474:	89 e2       	ldi	r24, 0x29	; 41
    a476:	90 e4       	ldi	r25, 0x40	; 64
    a478:	93 a3       	std	Z+35, r25	; 0x23
    a47a:	82 a3       	std	Z+34, r24	; 0x22
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    a47c:	66 23       	and	r22, r22
    a47e:	19 f0       	breq	.+6      	; 0xa486 <set_shot_animations+0x60>
    a480:	8d e1       	ldi	r24, 0x1D	; 29
    a482:	90 e4       	ldi	r25, 0x40	; 64
    a484:	02 c0       	rjmp	.+4      	; 0xa48a <set_shot_animations+0x64>
    a486:	89 e2       	ldi	r24, 0x29	; 41
    a488:	90 e4       	ldi	r25, 0x40	; 64
    a48a:	95 a3       	std	Z+37, r25	; 0x25
    a48c:	84 a3       	std	Z+36, r24	; 0x24
    a48e:	08 95       	ret

0000a490 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    a490:	0f 93       	push	r16
    a492:	1f 93       	push	r17
    a494:	cf 93       	push	r28
    a496:	df 93       	push	r29
    a498:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    a49a:	8a e5       	ldi	r24, 0x5A	; 90
    a49c:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    a49e:	88 e7       	ldi	r24, 0x78	; 120
    a4a0:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    a4a2:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    a4a4:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    a4a6:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    a4a8:	18 82       	st	Y, r1
	p->shared.speed = 0;
    a4aa:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    a4ac:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    a4ae:	82 e3       	ldi	r24, 0x32	; 50
    a4b0:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    a4b2:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    a4b4:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    a4b6:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    a4b8:	fe 01       	movw	r30, r28
    a4ba:	ec 5a       	subi	r30, 0xAC	; 172
    a4bc:	ff 4f       	sbci	r31, 0xFF	; 255
    a4be:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    a4c0:	31 96       	adiw	r30, 0x01	; 1
    a4c2:	91 e0       	ldi	r25, 0x01	; 1
    a4c4:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a4c6:	31 96       	adiw	r30, 0x01	; 1
    a4c8:	85 e0       	ldi	r24, 0x05	; 5
    a4ca:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    a4cc:	31 96       	adiw	r30, 0x01	; 1
    a4ce:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    a4d0:	31 96       	adiw	r30, 0x01	; 1
    a4d2:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    a4d4:	31 96       	adiw	r30, 0x01	; 1
    a4d6:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    a4d8:	31 96       	adiw	r30, 0x01	; 1
    a4da:	71 83       	std	Z+1, r23	; 0x01
    a4dc:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    a4de:	36 96       	adiw	r30, 0x06	; 6
    a4e0:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    a4e2:	31 96       	adiw	r30, 0x01	; 1
    a4e4:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a4e6:	31 96       	adiw	r30, 0x01	; 1
    a4e8:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    a4ea:	31 96       	adiw	r30, 0x01	; 1
    a4ec:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    a4ee:	31 96       	adiw	r30, 0x01	; 1
    a4f0:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    a4f2:	31 96       	adiw	r30, 0x01	; 1
    a4f4:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    a4f6:	31 96       	adiw	r30, 0x01	; 1
    a4f8:	51 83       	std	Z+1, r21	; 0x01
    a4fa:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    a4fc:	36 96       	adiw	r30, 0x06	; 6
    a4fe:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    a500:	31 96       	adiw	r30, 0x01	; 1
    a502:	93 e0       	ldi	r25, 0x03	; 3
    a504:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    a506:	31 96       	adiw	r30, 0x01	; 1
    a508:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    a50a:	31 96       	adiw	r30, 0x01	; 1
    a50c:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    a50e:	31 96       	adiw	r30, 0x01	; 1
    a510:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    a512:	31 96       	adiw	r30, 0x01	; 1
    a514:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    a516:	31 96       	adiw	r30, 0x01	; 1
    a518:	88 e3       	ldi	r24, 0x38	; 56
    a51a:	90 e4       	ldi	r25, 0x40	; 64
    a51c:	91 83       	std	Z+1, r25	; 0x01
    a51e:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    a520:	32 96       	adiw	r30, 0x02	; 2
    a522:	82 e3       	ldi	r24, 0x32	; 50
    a524:	90 e4       	ldi	r25, 0x40	; 64
    a526:	91 83       	std	Z+1, r25	; 0x01
    a528:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    a52a:	32 96       	adiw	r30, 0x02	; 2
    a52c:	8c e2       	ldi	r24, 0x2C	; 44
    a52e:	90 e4       	ldi	r25, 0x40	; 64
    a530:	91 83       	std	Z+1, r25	; 0x01
    a532:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    a534:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    a536:	8e 01       	movw	r16, r28
    a538:	04 5d       	subi	r16, 0xD4	; 212
    a53a:	1f 4f       	sbci	r17, 0xFF	; 255
    a53c:	60 e0       	ldi	r22, 0x00	; 0
    a53e:	c8 01       	movw	r24, r16
    a540:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    a544:	60 e0       	ldi	r22, 0x00	; 0
    a546:	c8 01       	movw	r24, r16
    a548:	0e 94 13 52 	call	0xa426	; 0xa426 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    a54c:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    a54e:	1d 8e       	std	Y+29, r1	; 0x1d
    a550:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    a552:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    a554:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    a556:	1c a2       	std	Y+36, r1	; 0x24
    a558:	1d a2       	std	Y+37, r1	; 0x25
    a55a:	1e a2       	std	Y+38, r1	; 0x26
    a55c:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    a55e:	18 a6       	std	Y+40, r1	; 0x28
    a560:	19 a6       	std	Y+41, r1	; 0x29
    a562:	1a a6       	std	Y+42, r1	; 0x2a
    a564:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    a566:	1f 8e       	std	Y+31, r1	; 0x1f
    a568:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    a56a:	19 a2       	std	Y+33, r1	; 0x21
    a56c:	18 a2       	std	Y+32, r1	; 0x20
}
    a56e:	df 91       	pop	r29
    a570:	cf 91       	pop	r28
    a572:	1f 91       	pop	r17
    a574:	0f 91       	pop	r16
    a576:	08 95       	ret

0000a578 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    a578:	fc 01       	movw	r30, r24
    a57a:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    a57c:	60 e0       	ldi	r22, 0x00	; 0
    a57e:	8c 96       	adiw	r24, 0x2c	; 44
    a580:	0c 94 f6 51 	jmp	0xa3ec	; 0xa3ec <init_shot_state>

0000a584 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    a584:	eb e0       	ldi	r30, 0x0B	; 11
    a586:	fc e0       	ldi	r31, 0x0C	; 12
    a588:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    a58a:	14 86       	std	Z+12, r1	; 0x0c
	game.paused = 0;
    a58c:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    a58e:	13 86       	std	Z+11, r1	; 0x0b
    a590:	12 86       	std	Z+10, r1	; 0x0a
	game.boss_fight_status = 0;
    a592:	13 82       	std	Z+3, r1	; 0x03
	game.boss_turret_1_lives = BOSS_TURRET_LIVES;
    a594:	84 e0       	ldi	r24, 0x04	; 4
    a596:	84 83       	std	Z+4, r24	; 0x04
	game.boss_turret_2_lives = BOSS_TURRET_LIVES;
    a598:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player = 0;
    a59a:	17 82       	std	Z+7, r1	; 0x07
    a59c:	16 82       	std	Z+6, r1	; 0x06
	game.boss_fight_joypad = 0;
    a59e:	11 86       	std	Z+9, r1	; 0x09
    a5a0:	10 86       	std	Z+8, r1	; 0x08
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    a5a2:	4a e4       	ldi	r20, 0x4A	; 74
    a5a4:	50 e4       	ldi	r21, 0x40	; 64
    a5a6:	60 e5       	ldi	r22, 0x50	; 80
    a5a8:	70 e4       	ldi	r23, 0x40	; 64
    a5aa:	85 e3       	ldi	r24, 0x35	; 53
    a5ac:	9c e0       	ldi	r25, 0x0C	; 12
    a5ae:	0e 94 48 52 	call	0xa490	; 0xa490 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    a5b2:	4e e3       	ldi	r20, 0x3E	; 62
    a5b4:	50 e4       	ldi	r21, 0x40	; 64
    a5b6:	64 e4       	ldi	r22, 0x44	; 68
    a5b8:	70 e4       	ldi	r23, 0x40	; 64
    a5ba:	83 ea       	ldi	r24, 0xA3	; 163
    a5bc:	9f e0       	ldi	r25, 0x0F	; 15
    a5be:	0c 94 48 52 	jmp	0xa490	; 0xa490 <init_player>

0000a5c2 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    a5c2:	cf 93       	push	r28
    a5c4:	df 93       	push	r29
    a5c6:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    a5c8:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    a5ca:	6a 89       	ldd	r22, Y+18	; 0x12
    a5cc:	70 e0       	ldi	r23, 0x00	; 0
    a5ce:	80 e0       	ldi	r24, 0x00	; 0
    a5d0:	90 e0       	ldi	r25, 0x00	; 0
    a5d2:	0e 94 23 6b 	call	0xd646	; 0xd646 <__floatunsisf>
    a5d6:	6b 83       	std	Y+3, r22	; 0x03
    a5d8:	7c 83       	std	Y+4, r23	; 0x04
    a5da:	8d 83       	std	Y+5, r24	; 0x05
    a5dc:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    a5de:	6b 89       	ldd	r22, Y+19	; 0x13
    a5e0:	70 e0       	ldi	r23, 0x00	; 0
    a5e2:	80 e0       	ldi	r24, 0x00	; 0
    a5e4:	90 e0       	ldi	r25, 0x00	; 0
    a5e6:	0e 94 23 6b 	call	0xd646	; 0xd646 <__floatunsisf>
    a5ea:	6f 83       	std	Y+7, r22	; 0x07
    a5ec:	78 87       	std	Y+8, r23	; 0x08
    a5ee:	89 87       	std	Y+9, r24	; 0x09
    a5f0:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    a5f2:	18 82       	st	Y, r1
	player->shared.speed = 0;
    a5f4:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    a5f6:	1a 82       	std	Y+2, r1	; 0x02
	
}
    a5f8:	df 91       	pop	r29
    a5fa:	cf 91       	pop	r28
    a5fc:	08 95       	ret

0000a5fe <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a5fe:	cf 93       	push	r28
    a600:	df 93       	push	r29
    a602:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a604:	bc 01       	movw	r22, r24
    a606:	88 81       	ld	r24, Y
    a608:	99 81       	ldd	r25, Y+1	; 0x01
    a60a:	0e 94 97 42 	call	0x852e	; 0x852e <EepromReadBlock>
	if (status == 0x03)
    a60e:	83 30       	cpi	r24, 0x03	; 3
    a610:	29 f4       	brne	.+10     	; 0xa61c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a612:	ce 01       	movw	r24, r28
	}
}
    a614:	df 91       	pop	r29
    a616:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a618:	0c 94 2a 42 	jmp	0x8454	; 0x8454 <EepromWriteBlock>
	}
}
    a61c:	df 91       	pop	r29
    a61e:	cf 91       	pop	r28
    a620:	08 95       	ret

0000a622 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    a622:	61 e0       	ldi	r22, 0x01	; 1
    a624:	83 e0       	ldi	r24, 0x03	; 3
    a626:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <FadeOut>
	ClearVram();
    a62a:	0e 94 0b 41 	call	0x8216	; 0x8216 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a62e:	60 e0       	ldi	r22, 0x00	; 0
    a630:	83 e0       	ldi	r24, 0x03	; 3
    a632:	0c 94 2d 4f 	jmp	0x9e5a	; 0x9e5a <FadeIn>

0000a636 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    a636:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    a638:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    a63a:	40 e0       	ldi	r20, 0x00	; 0
    a63c:	6c e5       	ldi	r22, 0x5C	; 92
    a63e:	70 e4       	ldi	r23, 0x40	; 64
    a640:	8c 2f       	mov	r24, r28
    a642:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
    a646:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    a648:	ca 30       	cpi	r28, 0x0A	; 10
    a64a:	b9 f7       	brne	.-18     	; 0xa63a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    a64c:	cf 91       	pop	r28
    a64e:	08 95       	ret

0000a650 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    a650:	cf 92       	push	r12
    a652:	df 92       	push	r13
    a654:	ff 92       	push	r15
    a656:	0f 93       	push	r16
    a658:	1f 93       	push	r17
    a65a:	cf 93       	push	r28
    a65c:	df 93       	push	r29
    a65e:	cd b7       	in	r28, 0x3d	; 61
    a660:	de b7       	in	r29, 0x3e	; 62
    a662:	2a 97       	sbiw	r28, 0x0a	; 10
    a664:	0f b6       	in	r0, 0x3f	; 63
    a666:	f8 94       	cli
    a668:	de bf       	out	0x3e, r29	; 62
    a66a:	0f be       	out	0x3f, r0	; 63
    a66c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    a66e:	90 91 44 0c 	lds	r25, 0x0C44
    a672:	80 91 b2 0f 	lds	r24, 0x0FB2
    a676:	98 17       	cp	r25, r24
    a678:	28 f4       	brcc	.+10     	; 0xa684 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    a67a:	e5 e3       	ldi	r30, 0x35	; 53
    a67c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    a67e:	a3 ea       	ldi	r26, 0xA3	; 163
    a680:	bf e0       	ldi	r27, 0x0F	; 15
    a682:	04 c0       	rjmp	.+8      	; 0xa68c <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    a684:	e3 ea       	ldi	r30, 0xA3	; 163
    a686:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    a688:	a5 e3       	ldi	r26, 0x35	; 53
    a68a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    a68c:	1b 96       	adiw	r26, 0x0b	; 11
    a68e:	8c 91       	ld	r24, X
    a690:	1b 97       	sbiw	r26, 0x0b	; 11
    a692:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    a694:	83 85       	ldd	r24, Z+11	; 0x0b
    a696:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    a698:	1f 96       	adiw	r26, 0x0f	; 15
    a69a:	8c 91       	ld	r24, X
    a69c:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    a69e:	97 85       	ldd	r25, Z+15	; 0x0f
    a6a0:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = 0;
    a6a2:	1d 82       	std	Y+5, r1	; 0x05
	save_delta = p_win->score - p_lose->score;
    a6a4:	f8 2e       	mov	r15, r24
    a6a6:	f9 1a       	sub	r15, r25
    a6a8:	00 e0       	ldi	r16, 0x00	; 0
    a6aa:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a6ac:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a6ae:	81 11       	cpse	r24, r1
    a6b0:	08 c0       	rjmp	.+16     	; 0xa6c2 <save_score+0x72>
    a6b2:	f8 01       	movw	r30, r16
    a6b4:	ec 53       	subi	r30, 0x3C	; 60
    a6b6:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a6b8:	94 81       	ldd	r25, Z+4	; 0x04
    a6ba:	25 81       	ldd	r18, Z+5	; 0x05
    a6bc:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    a6be:	9f 15       	cp	r25, r15
    a6c0:	d0 f4       	brcc	.+52     	; 0xa6f6 <save_score+0xa6>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    a6c2:	45 e0       	ldi	r20, 0x05	; 5
    a6c4:	c8 01       	movw	r24, r16
    a6c6:	8a 53       	subi	r24, 0x3A	; 58
    a6c8:	94 4f       	sbci	r25, 0xF4	; 244
    a6ca:	6c 01       	movw	r12, r24
    a6cc:	bc 01       	movw	r22, r24
    a6ce:	ce 01       	movw	r24, r28
    a6d0:	06 96       	adiw	r24, 0x06	; 6
    a6d2:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    a6d6:	45 e0       	ldi	r20, 0x05	; 5
    a6d8:	be 01       	movw	r22, r28
    a6da:	6f 5f       	subi	r22, 0xFF	; 255
    a6dc:	7f 4f       	sbci	r23, 0xFF	; 255
    a6de:	c6 01       	movw	r24, r12
    a6e0:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    a6e4:	45 e0       	ldi	r20, 0x05	; 5
    a6e6:	be 01       	movw	r22, r28
    a6e8:	6a 5f       	subi	r22, 0xFA	; 250
    a6ea:	7f 4f       	sbci	r23, 0xFF	; 255
    a6ec:	ce 01       	movw	r24, r28
    a6ee:	01 96       	adiw	r24, 0x01	; 1
    a6f0:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
				saved = 1;
    a6f4:	81 e0       	ldi	r24, 0x01	; 1
    a6f6:	0b 5f       	subi	r16, 0xFB	; 251
    a6f8:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a6fa:	0e 31       	cpi	r16, 0x1E	; 30
    a6fc:	11 05       	cpc	r17, r1
    a6fe:	b9 f6       	brne	.-82     	; 0xa6ae <save_score+0x5e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a700:	84 ec       	ldi	r24, 0xC4	; 196
    a702:	9b e0       	ldi	r25, 0x0B	; 11
    a704:	0e 94 2a 42 	call	0x8454	; 0x8454 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a708:	2a 96       	adiw	r28, 0x0a	; 10
    a70a:	0f b6       	in	r0, 0x3f	; 63
    a70c:	f8 94       	cli
    a70e:	de bf       	out	0x3e, r29	; 62
    a710:	0f be       	out	0x3f, r0	; 63
    a712:	cd bf       	out	0x3d, r28	; 61
    a714:	df 91       	pop	r29
    a716:	cf 91       	pop	r28
    a718:	1f 91       	pop	r17
    a71a:	0f 91       	pop	r16
    a71c:	ff 90       	pop	r15
    a71e:	df 90       	pop	r13
    a720:	cf 90       	pop	r12
    a722:	08 95       	ret

0000a724 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a724:	0f 93       	push	r16
    a726:	1f 93       	push	r17
    a728:	cf 93       	push	r28
    a72a:	df 93       	push	r29
    a72c:	8c 01       	movw	r16, r24
    a72e:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a730:	88 81       	ld	r24, Y
    a732:	81 30       	cpi	r24, 0x01	; 1
    a734:	69 f1       	breq	.+90     	; 0xa790 <position_shot+0x6c>
    a736:	98 f0       	brcs	.+38     	; 0xa75e <position_shot+0x3a>
    a738:	82 30       	cpi	r24, 0x02	; 2
    a73a:	f1 f1       	breq	.+124    	; 0xa7b8 <position_shot+0x94>
    a73c:	83 30       	cpi	r24, 0x03	; 3
    a73e:	09 f0       	breq	.+2      	; 0xa742 <position_shot+0x1e>
    a740:	59 c0       	rjmp	.+178    	; 0xa7f4 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a742:	f8 01       	movw	r30, r16
    a744:	83 81       	ldd	r24, Z+3	; 0x03
    a746:	94 81       	ldd	r25, Z+4	; 0x04
    a748:	a5 81       	ldd	r26, Z+5	; 0x05
    a74a:	b6 81       	ldd	r27, Z+6	; 0x06
    a74c:	8b 83       	std	Y+3, r24	; 0x03
    a74e:	9c 83       	std	Y+4, r25	; 0x04
    a750:	ad 83       	std	Y+5, r26	; 0x05
    a752:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a754:	20 e0       	ldi	r18, 0x00	; 0
    a756:	30 e0       	ldi	r19, 0x00	; 0
    a758:	40 e8       	ldi	r20, 0x80	; 128
    a75a:	50 e4       	ldi	r21, 0x40	; 64
    a75c:	41 c0       	rjmp	.+130    	; 0xa7e0 <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a75e:	20 e0       	ldi	r18, 0x00	; 0
    a760:	30 e0       	ldi	r19, 0x00	; 0
    a762:	40 e8       	ldi	r20, 0x80	; 128
    a764:	50 e4       	ldi	r21, 0x40	; 64
    a766:	f8 01       	movw	r30, r16
    a768:	63 81       	ldd	r22, Z+3	; 0x03
    a76a:	74 81       	ldd	r23, Z+4	; 0x04
    a76c:	85 81       	ldd	r24, Z+5	; 0x05
    a76e:	96 81       	ldd	r25, Z+6	; 0x06
    a770:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    a774:	6b 83       	std	Y+3, r22	; 0x03
    a776:	7c 83       	std	Y+4, r23	; 0x04
    a778:	8d 83       	std	Y+5, r24	; 0x05
    a77a:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a77c:	f8 01       	movw	r30, r16
    a77e:	87 81       	ldd	r24, Z+7	; 0x07
    a780:	90 85       	ldd	r25, Z+8	; 0x08
    a782:	a1 85       	ldd	r26, Z+9	; 0x09
    a784:	b2 85       	ldd	r27, Z+10	; 0x0a
    a786:	8f 83       	std	Y+7, r24	; 0x07
    a788:	98 87       	std	Y+8, r25	; 0x08
    a78a:	a9 87       	std	Y+9, r26	; 0x09
    a78c:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a78e:	32 c0       	rjmp	.+100    	; 0xa7f4 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a790:	20 e0       	ldi	r18, 0x00	; 0
    a792:	30 e0       	ldi	r19, 0x00	; 0
    a794:	40 e0       	ldi	r20, 0x00	; 0
    a796:	51 e4       	ldi	r21, 0x41	; 65
    a798:	f8 01       	movw	r30, r16
    a79a:	63 81       	ldd	r22, Z+3	; 0x03
    a79c:	74 81       	ldd	r23, Z+4	; 0x04
    a79e:	85 81       	ldd	r24, Z+5	; 0x05
    a7a0:	96 81       	ldd	r25, Z+6	; 0x06
    a7a2:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    a7a6:	6b 83       	std	Y+3, r22	; 0x03
    a7a8:	7c 83       	std	Y+4, r23	; 0x04
    a7aa:	8d 83       	std	Y+5, r24	; 0x05
    a7ac:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a7ae:	20 e0       	ldi	r18, 0x00	; 0
    a7b0:	30 e0       	ldi	r19, 0x00	; 0
    a7b2:	40 e8       	ldi	r20, 0x80	; 128
    a7b4:	50 e4       	ldi	r21, 0x40	; 64
    a7b6:	13 c0       	rjmp	.+38     	; 0xa7de <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a7b8:	20 e0       	ldi	r18, 0x00	; 0
    a7ba:	30 e0       	ldi	r19, 0x00	; 0
    a7bc:	40 e8       	ldi	r20, 0x80	; 128
    a7be:	50 e4       	ldi	r21, 0x40	; 64
    a7c0:	f8 01       	movw	r30, r16
    a7c2:	63 81       	ldd	r22, Z+3	; 0x03
    a7c4:	74 81       	ldd	r23, Z+4	; 0x04
    a7c6:	85 81       	ldd	r24, Z+5	; 0x05
    a7c8:	96 81       	ldd	r25, Z+6	; 0x06
    a7ca:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    a7ce:	6b 83       	std	Y+3, r22	; 0x03
    a7d0:	7c 83       	std	Y+4, r23	; 0x04
    a7d2:	8d 83       	std	Y+5, r24	; 0x05
    a7d4:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a7d6:	20 e0       	ldi	r18, 0x00	; 0
    a7d8:	30 e0       	ldi	r19, 0x00	; 0
    a7da:	40 e0       	ldi	r20, 0x00	; 0
    a7dc:	51 e4       	ldi	r21, 0x41	; 65
    a7de:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a7e0:	67 81       	ldd	r22, Z+7	; 0x07
    a7e2:	70 85       	ldd	r23, Z+8	; 0x08
    a7e4:	81 85       	ldd	r24, Z+9	; 0x09
    a7e6:	92 85       	ldd	r25, Z+10	; 0x0a
    a7e8:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    a7ec:	6f 83       	std	Y+7, r22	; 0x07
    a7ee:	78 87       	std	Y+8, r23	; 0x08
    a7f0:	89 87       	std	Y+9, r24	; 0x09
    a7f2:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a7f4:	df 91       	pop	r29
    a7f6:	cf 91       	pop	r28
    a7f8:	1f 91       	pop	r17
    a7fa:	0f 91       	pop	r16
    a7fc:	08 95       	ret

0000a7fe <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a7fe:	0f 93       	push	r16
    a800:	1f 93       	push	r17
    a802:	cf 93       	push	r28
    a804:	df 93       	push	r29
    a806:	8c 01       	movw	r16, r24
    a808:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a80a:	ac 01       	movw	r20, r24
    a80c:	44 5f       	subi	r20, 0xF4	; 244
    a80e:	5f 4f       	sbci	r21, 0xFF	; 255
    a810:	23 e0       	ldi	r18, 0x03	; 3
    a812:	6e e0       	ldi	r22, 0x0E	; 14
    a814:	84 e0       	ldi	r24, 0x04	; 4
    a816:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a81a:	42 e9       	ldi	r20, 0x92	; 146
    a81c:	52 e0       	ldi	r21, 0x02	; 2
    a81e:	6e e0       	ldi	r22, 0x0E	; 14
    a820:	70 e0       	ldi	r23, 0x00	; 0
    a822:	88 e0       	ldi	r24, 0x08	; 8
    a824:	90 e0       	ldi	r25, 0x00	; 0
    a826:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a82a:	ae 01       	movw	r20, r28
    a82c:	44 5f       	subi	r20, 0xF4	; 244
    a82e:	5f 4f       	sbci	r21, 0xFF	; 255
    a830:	23 e0       	ldi	r18, 0x03	; 3
    a832:	6e e0       	ldi	r22, 0x0E	; 14
    a834:	8d e0       	ldi	r24, 0x0D	; 13
    a836:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a83a:	4f e8       	ldi	r20, 0x8F	; 143
    a83c:	52 e0       	ldi	r21, 0x02	; 2
    a83e:	6e e0       	ldi	r22, 0x0E	; 14
    a840:	70 e0       	ldi	r23, 0x00	; 0
    a842:	81 e1       	ldi	r24, 0x11	; 17
    a844:	90 e0       	ldi	r25, 0x00	; 0
    a846:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a84a:	21 e0       	ldi	r18, 0x01	; 1
    a84c:	f8 01       	movw	r30, r16
    a84e:	40 89       	ldd	r20, Z+16	; 0x10
    a850:	6e e0       	ldi	r22, 0x0E	; 14
    a852:	70 e0       	ldi	r23, 0x00	; 0
    a854:	86 e1       	ldi	r24, 0x16	; 22
    a856:	90 e0       	ldi	r25, 0x00	; 0
    a858:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
	PrintChar(23, 14, '-');
    a85c:	4d e2       	ldi	r20, 0x2D	; 45
    a85e:	6e e0       	ldi	r22, 0x0E	; 14
    a860:	70 e0       	ldi	r23, 0x00	; 0
    a862:	87 e1       	ldi	r24, 0x17	; 23
    a864:	90 e0       	ldi	r25, 0x00	; 0
    a866:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a86a:	21 e0       	ldi	r18, 0x01	; 1
    a86c:	48 89       	ldd	r20, Y+16	; 0x10
    a86e:	6e e0       	ldi	r22, 0x0E	; 14
    a870:	70 e0       	ldi	r23, 0x00	; 0
    a872:	8a e1       	ldi	r24, 0x1A	; 26
    a874:	90 e0       	ldi	r25, 0x00	; 0
}
    a876:	df 91       	pop	r29
    a878:	cf 91       	pop	r28
    a87a:	1f 91       	pop	r17
    a87c:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a87e:	0c 94 b7 4e 	jmp	0x9d6e	; 0x9d6e <PrintByte>

0000a882 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a882:	0f 93       	push	r16
    a884:	1f 93       	push	r17
    a886:	cf 93       	push	r28
    a888:	df 93       	push	r29
    a88a:	8c 01       	movw	r16, r24
    a88c:	eb 01       	movw	r28, r22
    Print(9, 13, (char*) strFinalScore);
    a88e:	43 e8       	ldi	r20, 0x83	; 131
    a890:	52 e0       	ldi	r21, 0x02	; 2
    a892:	6d e0       	ldi	r22, 0x0D	; 13
    a894:	70 e0       	ldi	r23, 0x00	; 0
    a896:	89 e0       	ldi	r24, 0x09	; 9
    a898:	90 e0       	ldi	r25, 0x00	; 0
    a89a:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a89e:	a8 01       	movw	r20, r16
    a8a0:	44 5f       	subi	r20, 0xF4	; 244
    a8a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a8a4:	23 e0       	ldi	r18, 0x03	; 3
    a8a6:	6e e0       	ldi	r22, 0x0E	; 14
    a8a8:	84 e0       	ldi	r24, 0x04	; 4
    a8aa:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a8ae:	42 e9       	ldi	r20, 0x92	; 146
    a8b0:	52 e0       	ldi	r21, 0x02	; 2
    a8b2:	6e e0       	ldi	r22, 0x0E	; 14
    a8b4:	70 e0       	ldi	r23, 0x00	; 0
    a8b6:	88 e0       	ldi	r24, 0x08	; 8
    a8b8:	90 e0       	ldi	r25, 0x00	; 0
    a8ba:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a8be:	ae 01       	movw	r20, r28
    a8c0:	44 5f       	subi	r20, 0xF4	; 244
    a8c2:	5f 4f       	sbci	r21, 0xFF	; 255
    a8c4:	23 e0       	ldi	r18, 0x03	; 3
    a8c6:	6e e0       	ldi	r22, 0x0E	; 14
    a8c8:	8d e0       	ldi	r24, 0x0D	; 13
    a8ca:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a8ce:	4f e8       	ldi	r20, 0x8F	; 143
    a8d0:	52 e0       	ldi	r21, 0x02	; 2
    a8d2:	6e e0       	ldi	r22, 0x0E	; 14
    a8d4:	70 e0       	ldi	r23, 0x00	; 0
    a8d6:	81 e1       	ldi	r24, 0x11	; 17
    a8d8:	90 e0       	ldi	r25, 0x00	; 0
    a8da:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    PrintByte(22, 14, winner->score ,true);
    a8de:	21 e0       	ldi	r18, 0x01	; 1
    a8e0:	f8 01       	movw	r30, r16
    a8e2:	47 85       	ldd	r20, Z+15	; 0x0f
    a8e4:	6e e0       	ldi	r22, 0x0E	; 14
    a8e6:	70 e0       	ldi	r23, 0x00	; 0
    a8e8:	86 e1       	ldi	r24, 0x16	; 22
    a8ea:	90 e0       	ldi	r25, 0x00	; 0
    a8ec:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
    PrintChar(23, 14, '-');
    a8f0:	4d e2       	ldi	r20, 0x2D	; 45
    a8f2:	6e e0       	ldi	r22, 0x0E	; 14
    a8f4:	70 e0       	ldi	r23, 0x00	; 0
    a8f6:	87 e1       	ldi	r24, 0x17	; 23
    a8f8:	90 e0       	ldi	r25, 0x00	; 0
    a8fa:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a8fe:	21 e0       	ldi	r18, 0x01	; 1
    a900:	4f 85       	ldd	r20, Y+15	; 0x0f
    a902:	6e e0       	ldi	r22, 0x0E	; 14
    a904:	70 e0       	ldi	r23, 0x00	; 0
    a906:	8a e1       	ldi	r24, 0x1A	; 26
    a908:	90 e0       	ldi	r25, 0x00	; 0
}
    a90a:	df 91       	pop	r29
    a90c:	cf 91       	pop	r28
    a90e:	1f 91       	pop	r17
    a910:	0f 91       	pop	r16
    Print(8, 14, (char*) strOwns);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, (char*) strBy);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    a912:	0c 94 b7 4e 	jmp	0x9d6e	; 0x9d6e <PrintByte>

0000a916 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a916:	cf 93       	push	r28
    a918:	df 93       	push	r29
    a91a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a91c:	ac 01       	movw	r20, r24
    a91e:	44 5f       	subi	r20, 0xF4	; 244
    a920:	5f 4f       	sbci	r21, 0xFF	; 255
    a922:	23 e0       	ldi	r18, 0x03	; 3
    a924:	60 e0       	ldi	r22, 0x00	; 0
    a926:	8a e0       	ldi	r24, 0x0A	; 10
    a928:	8c 0f       	add	r24, r28
    a92a:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a92e:	d0 e0       	ldi	r29, 0x00	; 0
    a930:	47 ed       	ldi	r20, 0xD7	; 215
    a932:	51 e0       	ldi	r21, 0x01	; 1
    a934:	60 e0       	ldi	r22, 0x00	; 0
    a936:	70 e0       	ldi	r23, 0x00	; 0
    a938:	ce 01       	movw	r24, r28
    a93a:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(x, 1, (char*) strTotal);
    a93e:	40 ed       	ldi	r20, 0xD0	; 208
    a940:	51 e0       	ldi	r21, 0x01	; 1
    a942:	61 e0       	ldi	r22, 0x01	; 1
    a944:	70 e0       	ldi	r23, 0x00	; 0
    a946:	ce 01       	movw	r24, r28
	
}
    a948:	df 91       	pop	r29
    a94a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a94c:	0c 94 ea 4e 	jmp	0x9dd4	; 0x9dd4 <Print>

0000a950 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a950:	0f 93       	push	r16
    a952:	1f 93       	push	r17
    a954:	cf 93       	push	r28
    a956:	df 93       	push	r29
    a958:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a95a:	c6 2f       	mov	r28, r22
    a95c:	d0 e0       	ldi	r29, 0x00	; 0
    a95e:	28 96       	adiw	r28, 0x08	; 8
    a960:	20 e0       	ldi	r18, 0x00	; 0
    a962:	fc 01       	movw	r30, r24
    a964:	40 89       	ldd	r20, Z+16	; 0x10
    a966:	60 e0       	ldi	r22, 0x00	; 0
    a968:	70 e0       	ldi	r23, 0x00	; 0
    a96a:	ce 01       	movw	r24, r28
    a96c:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a970:	20 e0       	ldi	r18, 0x00	; 0
    a972:	f8 01       	movw	r30, r16
    a974:	47 85       	ldd	r20, Z+15	; 0x0f
    a976:	61 e0       	ldi	r22, 0x01	; 1
    a978:	70 e0       	ldi	r23, 0x00	; 0
    a97a:	ce 01       	movw	r24, r28
}
    a97c:	df 91       	pop	r29
    a97e:	cf 91       	pop	r28
    a980:	1f 91       	pop	r17
    a982:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a984:	0c 94 b7 4e 	jmp	0x9d6e	; 0x9d6e <PrintByte>

0000a988 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    a988:	cf 93       	push	r28
    a98a:	df 93       	push	r29
    a98c:	ec 01       	movw	r28, r24
    a98e:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    a990:	9d 89       	ldd	r25, Y+21	; 0x15
    a992:	9a 35       	cpi	r25, 0x5A	; 90
    a994:	99 f0       	breq	.+38     	; 0xa9bc <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    a996:	91 11       	cpse	r25, r1
    a998:	0c c0       	rjmp	.+24     	; 0xa9b2 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    a99a:	4e 89       	ldd	r20, Y+22	; 0x16
    a99c:	9f e0       	ldi	r25, 0x0F	; 15
    a99e:	49 9f       	mul	r20, r25
    a9a0:	a0 01       	movw	r20, r0
    a9a2:	11 24       	eor	r1, r1
    a9a4:	43 51       	subi	r20, 0x13	; 19
    a9a6:	5e 4f       	sbci	r21, 0xFE	; 254
    a9a8:	62 e0       	ldi	r22, 0x02	; 2
    a9aa:	70 e0       	ldi	r23, 0x00	; 0
    a9ac:	90 e0       	ldi	r25, 0x00	; 0
    a9ae:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    a9b2:	8d 89       	ldd	r24, Y+21	; 0x15
    a9b4:	8f 5f       	subi	r24, 0xFF	; 255
    a9b6:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    a9b8:	41 e0       	ldi	r20, 0x01	; 1
    a9ba:	0a c0       	rjmp	.+20     	; 0xa9d0 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    a9bc:	44 23       	and	r20, r20
    a9be:	41 f0       	breq	.+16     	; 0xa9d0 <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    a9c0:	4e ed       	ldi	r20, 0xDE	; 222
    a9c2:	51 e0       	ldi	r21, 0x01	; 1
    a9c4:	62 e0       	ldi	r22, 0x02	; 2
    a9c6:	70 e0       	ldi	r23, 0x00	; 0
    a9c8:	90 e0       	ldi	r25, 0x00	; 0
    a9ca:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    a9ce:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    a9d0:	84 2f       	mov	r24, r20
    a9d2:	df 91       	pop	r29
    a9d4:	cf 91       	pop	r28
    a9d6:	08 95       	ret

0000a9d8 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    a9d8:	ef 92       	push	r14
    a9da:	ff 92       	push	r15
    a9dc:	0f 93       	push	r16
    a9de:	1f 93       	push	r17
    a9e0:	cf 93       	push	r28
    a9e2:	df 93       	push	r29
    a9e4:	1f 92       	push	r1
    a9e6:	cd b7       	in	r28, 0x3d	; 61
    a9e8:	de b7       	in	r29, 0x3e	; 62
    a9ea:	7c 01       	movw	r14, r24
    a9ec:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a9ee:	fc 01       	movw	r30, r24
    a9f0:	67 81       	ldd	r22, Z+7	; 0x07
    a9f2:	70 85       	ldd	r23, Z+8	; 0x08
    a9f4:	81 85       	ldd	r24, Z+9	; 0x09
    a9f6:	92 85       	ldd	r25, Z+10	; 0x0a
    a9f8:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    a9fc:	46 2f       	mov	r20, r22
    a9fe:	f7 01       	movw	r30, r14
    aa00:	63 81       	ldd	r22, Z+3	; 0x03
    aa02:	74 81       	ldd	r23, Z+4	; 0x04
    aa04:	85 81       	ldd	r24, Z+5	; 0x05
    aa06:	96 81       	ldd	r25, Z+6	; 0x06
    aa08:	49 83       	std	Y+1, r20	; 0x01
    aa0a:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    aa0e:	02 e0       	ldi	r16, 0x02	; 2
    aa10:	22 e0       	ldi	r18, 0x02	; 2
    aa12:	49 81       	ldd	r20, Y+1	; 0x01
    aa14:	81 2f       	mov	r24, r17
    aa16:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
}
    aa1a:	0f 90       	pop	r0
    aa1c:	df 91       	pop	r29
    aa1e:	cf 91       	pop	r28
    aa20:	1f 91       	pop	r17
    aa22:	0f 91       	pop	r16
    aa24:	ff 90       	pop	r15
    aa26:	ef 90       	pop	r14
    aa28:	08 95       	ret

0000aa2a <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    aa2a:	ef 92       	push	r14
    aa2c:	ff 92       	push	r15
    aa2e:	0f 93       	push	r16
    aa30:	1f 93       	push	r17
    aa32:	cf 93       	push	r28
    aa34:	df 93       	push	r29
    aa36:	1f 92       	push	r1
    aa38:	cd b7       	in	r28, 0x3d	; 61
    aa3a:	de b7       	in	r29, 0x3e	; 62
    aa3c:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    aa3e:	81 89       	ldd	r24, Z+17	; 0x11
    aa40:	88 23       	and	r24, r24
    aa42:	b9 f0       	breq	.+46     	; 0xaa72 <render_shot+0x48>
    aa44:	16 2f       	mov	r17, r22
    aa46:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    aa48:	63 a9       	ldd	r22, Z+51	; 0x33
    aa4a:	74 a9       	ldd	r23, Z+52	; 0x34
    aa4c:	85 a9       	ldd	r24, Z+53	; 0x35
    aa4e:	96 a9       	ldd	r25, Z+54	; 0x36
    aa50:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    aa54:	46 2f       	mov	r20, r22
    aa56:	f7 01       	movw	r30, r14
    aa58:	67 a5       	ldd	r22, Z+47	; 0x2f
    aa5a:	70 a9       	ldd	r23, Z+48	; 0x30
    aa5c:	81 a9       	ldd	r24, Z+49	; 0x31
    aa5e:	92 a9       	ldd	r25, Z+50	; 0x32
    aa60:	49 83       	std	Y+1, r20	; 0x01
    aa62:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    aa66:	01 e0       	ldi	r16, 0x01	; 1
    aa68:	21 e0       	ldi	r18, 0x01	; 1
    aa6a:	49 81       	ldd	r20, Y+1	; 0x01
    aa6c:	81 2f       	mov	r24, r17
    aa6e:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
			sprite_index++;
		}
	}
}
    aa72:	0f 90       	pop	r0
    aa74:	df 91       	pop	r29
    aa76:	cf 91       	pop	r28
    aa78:	1f 91       	pop	r17
    aa7a:	0f 91       	pop	r16
    aa7c:	ff 90       	pop	r15
    aa7e:	ef 90       	pop	r14
    aa80:	08 95       	ret

0000aa82 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    aa82:	ef 92       	push	r14
    aa84:	ff 92       	push	r15
    aa86:	0f 93       	push	r16
    aa88:	1f 93       	push	r17
    aa8a:	cf 93       	push	r28
    aa8c:	df 93       	push	r29
    aa8e:	ec 01       	movw	r28, r24
    aa90:	25 96       	adiw	r28, 0x05	; 5
    aa92:	8c 01       	movw	r16, r24
    aa94:	0f 5d       	subi	r16, 0xDF	; 223
    aa96:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    aa98:	8e e1       	ldi	r24, 0x1E	; 30
    aa9a:	e8 2e       	mov	r14, r24
    aa9c:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    aa9e:	88 85       	ldd	r24, Y+8	; 0x08
    aaa0:	99 85       	ldd	r25, Y+9	; 0x09
    aaa2:	89 2b       	or	r24, r25
    aaa4:	c1 f0       	breq	.+48     	; 0xaad6 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    aaa6:	ce 01       	movw	r24, r28
    aaa8:	04 97       	sbiw	r24, 0x04	; 4
    aaaa:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    aaae:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    aab0:	48 81       	ld	r20, Y
    aab2:	88 85       	ldd	r24, Y+8	; 0x08
    aab4:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    aab6:	b7 01       	movw	r22, r14
    aab8:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    aabc:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    aabe:	44 23       	and	r20, r20
    aac0:	39 f0       	breq	.+14     	; 0xaad0 <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    aac2:	40 e0       	ldi	r20, 0x00	; 0
    aac4:	50 e0       	ldi	r21, 0x00	; 0
    aac6:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
				ta->anims[i].tile_index = 0;
    aaca:	19 86       	std	Y+9, r1	; 0x09
    aacc:	18 86       	std	Y+8, r1	; 0x08
    aace:	03 c0       	rjmp	.+6      	; 0xaad6 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    aad0:	a9 01       	movw	r20, r18
    aad2:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
    aad6:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    aad8:	c0 17       	cp	r28, r16
    aada:	d1 07       	cpc	r29, r17
    aadc:	01 f7       	brne	.-64     	; 0xaa9e <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    aade:	df 91       	pop	r29
    aae0:	cf 91       	pop	r28
    aae2:	1f 91       	pop	r17
    aae4:	0f 91       	pop	r16
    aae6:	ff 90       	pop	r15
    aae8:	ef 90       	pop	r14
    aaea:	08 95       	ret

0000aaec <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    aaec:	cf 93       	push	r28
    aaee:	df 93       	push	r29
    aaf0:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    aaf2:	0e 94 93 4f 	call	0x9f26	; 0x9f26 <LBGetNextFrameReverse>
    aaf6:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    aaf8:	4c 81       	ldd	r20, Y+4	; 0x04
    aafa:	8c 85       	ldd	r24, Y+12	; 0x0c
    aafc:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    aafe:	6e e1       	ldi	r22, 0x1E	; 30
    ab00:	70 e0       	ldi	r23, 0x00	; 0
    ab02:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    ab06:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    ab08:	44 23       	and	r20, r20
    ab0a:	19 f0       	breq	.+6      	; 0xab12 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    ab0c:	46 e6       	ldi	r20, 0x66	; 102
    ab0e:	59 e7       	ldi	r21, 0x79	; 121
    ab10:	01 c0       	rjmp	.+2      	; 0xab14 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    ab12:	a9 01       	movw	r20, r18
    ab14:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	}
	return ta->anim.looped;
}
    ab18:	8c 81       	ldd	r24, Y+4	; 0x04
    ab1a:	df 91       	pop	r29
    ab1c:	cf 91       	pop	r28
    ab1e:	08 95       	ret

0000ab20 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    ab20:	1f 93       	push	r17
    ab22:	cf 93       	push	r28
    ab24:	df 93       	push	r29
    ab26:	ec 01       	movw	r28, r24
    ab28:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
    ab2a:	8c 89       	ldd	r24, Y+20	; 0x14
    ab2c:	80 ff       	sbrs	r24, 0
    ab2e:	17 c0       	rjmp	.+46     	; 0xab5e <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    ab30:	ce 01       	movw	r24, r28
    ab32:	84 59       	subi	r24, 0x94	; 148
    ab34:	9f 4f       	sbci	r25, 0xFF	; 255
    ab36:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    ab3a:	fe 01       	movw	r30, r28
    ab3c:	e0 59       	subi	r30, 0x90	; 144
    ab3e:	ff 4f       	sbci	r31, 0xFF	; 255
    ab40:	20 81       	ld	r18, Z
    ab42:	22 23       	and	r18, r18
    ab44:	09 f4       	brne	.+2      	; 0xab48 <tank_map+0x28>
    ab46:	4a c0       	rjmp	.+148    	; 0xabdc <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    ab48:	8c 89       	ldd	r24, Y+20	; 0x14
    ab4a:	91 e0       	ldi	r25, 0x01	; 1
    ab4c:	98 27       	eor	r25, r24
    ab4e:	9c 8b       	std	Y+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    ab50:	ce 01       	movw	r24, r28
    ab52:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <player_spawn>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    ab56:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    ab58:	86 e5       	ldi	r24, 0x56	; 86
    ab5a:	90 e4       	ldi	r25, 0x40	; 64
    ab5c:	40 c0       	rjmp	.+128    	; 0xabde <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    ab5e:	9f 89       	ldd	r25, Y+23	; 0x17
    ab60:	98 37       	cpi	r25, 0x78	; 120
    ab62:	11 f0       	breq	.+4      	; 0xab68 <tank_map+0x48>
		{
			player->grace_frame++;
    ab64:	9f 5f       	subi	r25, 0xFF	; 255
    ab66:	9f 8b       	std	Y+23, r25	; 0x17
		}
		switch (player->shared.direction)
    ab68:	98 81       	ld	r25, Y
    ab6a:	91 30       	cpi	r25, 0x01	; 1
    ab6c:	61 f0       	breq	.+24     	; 0xab86 <tank_map+0x66>
    ab6e:	b0 f0       	brcs	.+44     	; 0xab9c <tank_map+0x7c>
    ab70:	92 30       	cpi	r25, 0x02	; 2
    ab72:	69 f0       	breq	.+26     	; 0xab8e <tank_map+0x6e>
    ab74:	93 30       	cpi	r25, 0x03	; 3
    ab76:	91 f4       	brne	.+36     	; 0xab9c <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    ab78:	ce 01       	movw	r24, r28
    ab7a:	80 5a       	subi	r24, 0xA0	; 160
    ab7c:	9f 4f       	sbci	r25, 0xFF	; 255
    ab7e:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    ab82:	41 e0       	ldi	r20, 0x01	; 1
    ab84:	11 c0       	rjmp	.+34     	; 0xaba8 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    ab86:	ce 01       	movw	r24, r28
    ab88:	80 5a       	subi	r24, 0xA0	; 160
    ab8a:	9f 4f       	sbci	r25, 0xFF	; 255
    ab8c:	0a c0       	rjmp	.+20     	; 0xaba2 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    ab8e:	ce 01       	movw	r24, r28
    ab90:	8c 5a       	subi	r24, 0xAC	; 172
    ab92:	9f 4f       	sbci	r25, 0xFF	; 255
    ab94:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    ab98:	42 e0       	ldi	r20, 0x02	; 2
    ab9a:	06 c0       	rjmp	.+12     	; 0xaba8 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    ab9c:	ce 01       	movw	r24, r28
    ab9e:	8c 5a       	subi	r24, 0xAC	; 172
    aba0:	9f 4f       	sbci	r25, 0xFF	; 255
    aba2:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    aba6:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    aba8:	2f 89       	ldd	r18, Y+23	; 0x17
    abaa:	28 37       	cpi	r18, 0x78	; 120
    abac:	31 f0       	breq	.+12     	; 0xabba <tank_map+0x9a>
    abae:	20 91 37 0b 	lds	r18, 0x0B37
    abb2:	22 23       	and	r18, r18
    abb4:	11 f0       	breq	.+4      	; 0xabba <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    abb6:	86 e5       	ldi	r24, 0x56	; 86
    abb8:	90 e4       	ldi	r25, 0x40	; 64
		}
		toggle_counter--;
    abba:	20 91 03 01 	lds	r18, 0x0103
    abbe:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    abc0:	19 f0       	breq	.+6      	; 0xabc8 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    abc2:	20 93 03 01 	sts	0x0103, r18
    abc6:	0b c0       	rjmp	.+22     	; 0xabde <tank_map+0xbe>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    abc8:	24 e1       	ldi	r18, 0x14	; 20
    abca:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    abce:	30 91 37 0b 	lds	r19, 0x0B37
    abd2:	21 e0       	ldi	r18, 0x01	; 1
    abd4:	23 27       	eor	r18, r19
    abd6:	20 93 37 0b 	sts	0x0B37, r18
    abda:	01 c0       	rjmp	.+2      	; 0xabde <tank_map+0xbe>
	static u8 toggle_blank = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    abdc:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    abde:	bc 01       	movw	r22, r24
    abe0:	81 2f       	mov	r24, r17
    abe2:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    abe6:	84 e0       	ldi	r24, 0x04	; 4
    abe8:	81 0f       	add	r24, r17
    abea:	df 91       	pop	r29
    abec:	cf 91       	pop	r28
    abee:	1f 91       	pop	r17
    abf0:	08 95       	ret

0000abf2 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    abf2:	cf 93       	push	r28
    abf4:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    abf6:	fc 01       	movw	r30, r24
    abf8:	22 ad       	ldd	r18, Z+58	; 0x3a
    abfa:	22 23       	and	r18, r18
    abfc:	d9 f0       	breq	.+54     	; 0xac34 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    abfe:	24 a5       	ldd	r18, Z+44	; 0x2c
    ac00:	21 30       	cpi	r18, 0x01	; 1
    ac02:	59 f0       	breq	.+22     	; 0xac1a <shot_map+0x28>
    ac04:	a8 f0       	brcs	.+42     	; 0xac30 <shot_map+0x3e>
    ac06:	22 30       	cpi	r18, 0x02	; 2
    ac08:	71 f0       	breq	.+28     	; 0xac26 <shot_map+0x34>
    ac0a:	23 30       	cpi	r18, 0x03	; 3
    ac0c:	89 f4       	brne	.+34     	; 0xac30 <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    ac0e:	88 5b       	subi	r24, 0xB8	; 184
    ac10:	9f 4f       	sbci	r25, 0xFF	; 255
    ac12:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    ac16:	41 e0       	ldi	r20, 0x01	; 1
    ac18:	10 c0       	rjmp	.+32     	; 0xac3a <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    ac1a:	88 5b       	subi	r24, 0xB8	; 184
    ac1c:	9f 4f       	sbci	r25, 0xFF	; 255
    ac1e:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    ac22:	40 e0       	ldi	r20, 0x00	; 0
    ac24:	0a c0       	rjmp	.+20     	; 0xac3a <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    ac26:	cc 96       	adiw	r24, 0x3c	; 60
    ac28:	0e 94 6e 4f 	call	0x9edc	; 0x9edc <LBGetNextFrame>
    ac2c:	42 e0       	ldi	r20, 0x02	; 2
    ac2e:	05 c0       	rjmp	.+10     	; 0xac3a <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    ac30:	cc 96       	adiw	r24, 0x3c	; 60
    ac32:	f5 cf       	rjmp	.-22     	; 0xac1e <shot_map+0x2c>
    ac34:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    ac36:	86 e5       	ldi	r24, 0x56	; 86
    ac38:	90 e4       	ldi	r25, 0x40	; 64
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    ac3a:	bc 01       	movw	r22, r24
    ac3c:	8c 2f       	mov	r24, r28
    ac3e:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    ac42:	81 e0       	ldi	r24, 0x01	; 1
    ac44:	8c 0f       	add	r24, r28
    ac46:	cf 91       	pop	r28
    ac48:	08 95       	ret

0000ac4a <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    ac4a:	cf 93       	push	r28
    ac4c:	df 93       	push	r29
    ac4e:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    ac50:	88 81       	ld	r24, Y
    ac52:	81 11       	cpse	r24, r1
    ac54:	0b c0       	rjmp	.+22     	; 0xac6c <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    ac56:	6f 81       	ldd	r22, Y+7	; 0x07
    ac58:	78 85       	ldd	r23, Y+8	; 0x08
    ac5a:	89 85       	ldd	r24, Y+9	; 0x09
    ac5c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac5e:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    ac62:	66 95       	lsr	r22
    ac64:	66 95       	lsr	r22
    ac66:	66 95       	lsr	r22
    ac68:	6f 5f       	subi	r22, 0xFF	; 255
    ac6a:	1d c0       	rjmp	.+58     	; 0xaca6 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    ac6c:	81 30       	cpi	r24, 0x01	; 1
    ac6e:	69 f4       	brne	.+26     	; 0xac8a <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    ac70:	20 e0       	ldi	r18, 0x00	; 0
    ac72:	30 e0       	ldi	r19, 0x00	; 0
    ac74:	40 e0       	ldi	r20, 0x00	; 0
    ac76:	5e e3       	ldi	r21, 0x3E	; 62
    ac78:	6b 81       	ldd	r22, Y+3	; 0x03
    ac7a:	7c 81       	ldd	r23, Y+4	; 0x04
    ac7c:	8d 81       	ldd	r24, Y+5	; 0x05
    ac7e:	9e 81       	ldd	r25, Y+6	; 0x06
    ac80:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    ac84:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    ac88:	27 c0       	rjmp	.+78     	; 0xacd8 <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    ac8a:	82 30       	cpi	r24, 0x02	; 2
    ac8c:	d9 f4       	brne	.+54     	; 0xacc4 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    ac8e:	20 e0       	ldi	r18, 0x00	; 0
    ac90:	30 e0       	ldi	r19, 0x00	; 0
    ac92:	40 e0       	ldi	r20, 0x00	; 0
    ac94:	5e e3       	ldi	r21, 0x3E	; 62
    ac96:	6f 81       	ldd	r22, Y+7	; 0x07
    ac98:	78 85       	ldd	r23, Y+8	; 0x08
    ac9a:	89 85       	ldd	r24, Y+9	; 0x09
    ac9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ac9e:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    aca2:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
		sprite->y = tile * 8;
    aca6:	88 e0       	ldi	r24, 0x08	; 8
    aca8:	68 9f       	mul	r22, r24
    acaa:	b0 01       	movw	r22, r0
    acac:	11 24       	eor	r1, r1
    acae:	88 27       	eor	r24, r24
    acb0:	77 fd       	sbrc	r23, 7
    acb2:	80 95       	com	r24
    acb4:	98 2f       	mov	r25, r24
    acb6:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    acba:	6f 83       	std	Y+7, r22	; 0x07
    acbc:	78 87       	std	Y+8, r23	; 0x08
    acbe:	89 87       	std	Y+9, r24	; 0x09
    acc0:	9a 87       	std	Y+10, r25	; 0x0a
    acc2:	18 c0       	rjmp	.+48     	; 0xacf4 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    acc4:	6b 81       	ldd	r22, Y+3	; 0x03
    acc6:	7c 81       	ldd	r23, Y+4	; 0x04
    acc8:	8d 81       	ldd	r24, Y+5	; 0x05
    acca:	9e 81       	ldd	r25, Y+6	; 0x06
    accc:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    acd0:	66 95       	lsr	r22
    acd2:	66 95       	lsr	r22
    acd4:	66 95       	lsr	r22
    acd6:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    acd8:	88 e0       	ldi	r24, 0x08	; 8
    acda:	68 9f       	mul	r22, r24
    acdc:	b0 01       	movw	r22, r0
    acde:	11 24       	eor	r1, r1
    ace0:	88 27       	eor	r24, r24
    ace2:	77 fd       	sbrc	r23, 7
    ace4:	80 95       	com	r24
    ace6:	98 2f       	mov	r25, r24
    ace8:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    acec:	6b 83       	std	Y+3, r22	; 0x03
    acee:	7c 83       	std	Y+4, r23	; 0x04
    acf0:	8d 83       	std	Y+5, r24	; 0x05
    acf2:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    acf4:	81 e0       	ldi	r24, 0x01	; 1
    acf6:	8a 83       	std	Y+2, r24	; 0x02
}
    acf8:	df 91       	pop	r29
    acfa:	cf 91       	pop	r28
    acfc:	08 95       	ret

0000acfe <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    acfe:	cf 93       	push	r28
    ad00:	df 93       	push	r29
    ad02:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    ad04:	88 81       	ld	r24, Y
    ad06:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    ad08:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    ad0a:	81 11       	cpse	r24, r1
    ad0c:	13 c0       	rjmp	.+38     	; 0xad34 <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    ad0e:	80 e0       	ldi	r24, 0x00	; 0
    ad10:	90 e0       	ldi	r25, 0x00	; 0
    ad12:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    ad16:	25 e6       	ldi	r18, 0x65	; 101
    ad18:	38 e8       	ldi	r19, 0x88	; 136
    ad1a:	48 e8       	ldi	r20, 0x88	; 136
    ad1c:	5c e3       	ldi	r21, 0x3C	; 60
    ad1e:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    ad22:	9b 01       	movw	r18, r22
    ad24:	ac 01       	movw	r20, r24
    ad26:	6f 81       	ldd	r22, Y+7	; 0x07
    ad28:	78 85       	ldd	r23, Y+8	; 0x08
    ad2a:	89 85       	ldd	r24, Y+9	; 0x09
    ad2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    ad2e:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    ad32:	29 c0       	rjmp	.+82     	; 0xad86 <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    ad34:	81 30       	cpi	r24, 0x01	; 1
    ad36:	99 f4       	brne	.+38     	; 0xad5e <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    ad38:	80 e0       	ldi	r24, 0x00	; 0
    ad3a:	90 e0       	ldi	r25, 0x00	; 0
    ad3c:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    ad40:	25 e6       	ldi	r18, 0x65	; 101
    ad42:	38 e8       	ldi	r19, 0x88	; 136
    ad44:	48 e8       	ldi	r20, 0x88	; 136
    ad46:	5c e3       	ldi	r21, 0x3C	; 60
    ad48:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    ad4c:	9b 01       	movw	r18, r22
    ad4e:	ac 01       	movw	r20, r24
    ad50:	6b 81       	ldd	r22, Y+3	; 0x03
    ad52:	7c 81       	ldd	r23, Y+4	; 0x04
    ad54:	8d 81       	ldd	r24, Y+5	; 0x05
    ad56:	9e 81       	ldd	r25, Y+6	; 0x06
    ad58:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    ad5c:	2b c0       	rjmp	.+86     	; 0xadb4 <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    ad5e:	82 30       	cpi	r24, 0x02	; 2
    ad60:	b9 f4       	brne	.+46     	; 0xad90 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    ad62:	80 e0       	ldi	r24, 0x00	; 0
    ad64:	90 e0       	ldi	r25, 0x00	; 0
    ad66:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    ad6a:	25 e6       	ldi	r18, 0x65	; 101
    ad6c:	38 e8       	ldi	r19, 0x88	; 136
    ad6e:	48 e8       	ldi	r20, 0x88	; 136
    ad70:	5c e3       	ldi	r21, 0x3C	; 60
    ad72:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    ad76:	9b 01       	movw	r18, r22
    ad78:	ac 01       	movw	r20, r24
    ad7a:	6f 81       	ldd	r22, Y+7	; 0x07
    ad7c:	78 85       	ldd	r23, Y+8	; 0x08
    ad7e:	89 85       	ldd	r24, Y+9	; 0x09
    ad80:	9a 85       	ldd	r25, Y+10	; 0x0a
    ad82:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    ad86:	6f 83       	std	Y+7, r22	; 0x07
    ad88:	78 87       	std	Y+8, r23	; 0x08
    ad8a:	89 87       	std	Y+9, r24	; 0x09
    ad8c:	9a 87       	std	Y+10, r25	; 0x0a
    ad8e:	16 c0       	rjmp	.+44     	; 0xadbc <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    ad90:	80 e0       	ldi	r24, 0x00	; 0
    ad92:	90 e0       	ldi	r25, 0x00	; 0
    ad94:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    ad98:	25 e6       	ldi	r18, 0x65	; 101
    ad9a:	38 e8       	ldi	r19, 0x88	; 136
    ad9c:	48 e8       	ldi	r20, 0x88	; 136
    ad9e:	5c e3       	ldi	r21, 0x3C	; 60
    ada0:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    ada4:	9b 01       	movw	r18, r22
    ada6:	ac 01       	movw	r20, r24
    ada8:	6b 81       	ldd	r22, Y+3	; 0x03
    adaa:	7c 81       	ldd	r23, Y+4	; 0x04
    adac:	8d 81       	ldd	r24, Y+5	; 0x05
    adae:	9e 81       	ldd	r25, Y+6	; 0x06
    adb0:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    adb4:	6b 83       	std	Y+3, r22	; 0x03
    adb6:	7c 83       	std	Y+4, r23	; 0x04
    adb8:	8d 83       	std	Y+5, r24	; 0x05
    adba:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    adbc:	81 e0       	ldi	r24, 0x01	; 1
    adbe:	8a 83       	std	Y+2, r24	; 0x02
}
    adc0:	df 91       	pop	r29
    adc2:	cf 91       	pop	r28
    adc4:	08 95       	ret

0000adc6 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    adc6:	8c 54       	subi	r24, 0x4C	; 76
    adc8:	93 4f       	sbci	r25, 0xF3	; 243
    adca:	fc 01       	movw	r30, r24
    adcc:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    adce:	81 30       	cpi	r24, 0x01	; 1
    add0:	31 f0       	breq	.+12     	; 0xadde <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    add2:	82 30       	cpi	r24, 0x02	; 2
    add4:	31 f0       	breq	.+12     	; 0xade2 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    add6:	87 33       	cpi	r24, 0x37	; 55
    add8:	31 f0       	breq	.+12     	; 0xade6 <solid_square_tile+0x20>

	return 0;
    adda:	80 e0       	ldi	r24, 0x00	; 0
    addc:	08 95       	ret
    adde:	81 e0       	ldi	r24, 0x01	; 1
    ade0:	08 95       	ret
    ade2:	82 e0       	ldi	r24, 0x02	; 2
    ade4:	08 95       	ret
    ade6:	87 e3       	ldi	r24, 0x37	; 55
}
    ade8:	08 95       	ret

0000adea <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    adea:	8c 54       	subi	r24, 0x4C	; 76
    adec:	93 4f       	sbci	r25, 0xF3	; 243
    adee:	fc 01       	movw	r30, r24
    adf0:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    adf2:	81 30       	cpi	r24, 0x01	; 1
    adf4:	71 f0       	breq	.+28     	; 0xae12 <solid_tile+0x28>
	if (tile == L_METAL) return tile;
    adf6:	82 30       	cpi	r24, 0x02	; 2
    adf8:	71 f0       	breq	.+28     	; 0xae16 <solid_tile+0x2c>
	if (tile == L_FENCE) return tile;
    adfa:	87 33       	cpi	r24, 0x37	; 55
    adfc:	71 f0       	breq	.+28     	; 0xae1a <solid_tile+0x30>
	if (tile == L_TL) return tile;
    adfe:	83 30       	cpi	r24, 0x03	; 3
    ae00:	71 f0       	breq	.+28     	; 0xae1e <solid_tile+0x34>
	if (tile == L_BR) return tile;
    ae02:	86 30       	cpi	r24, 0x06	; 6
    ae04:	71 f0       	breq	.+28     	; 0xae22 <solid_tile+0x38>
	if (tile == L_TR) return tile;
    ae06:	84 30       	cpi	r24, 0x04	; 4
    ae08:	71 f0       	breq	.+28     	; 0xae26 <solid_tile+0x3c>
	if (tile == L_BL) return tile;
    ae0a:	85 30       	cpi	r24, 0x05	; 5
    ae0c:	71 f0       	breq	.+28     	; 0xae2a <solid_tile+0x40>

	return 0;
    ae0e:	80 e0       	ldi	r24, 0x00	; 0
    ae10:	08 95       	ret
    ae12:	81 e0       	ldi	r24, 0x01	; 1
    ae14:	08 95       	ret
    ae16:	82 e0       	ldi	r24, 0x02	; 2
    ae18:	08 95       	ret
    ae1a:	87 e3       	ldi	r24, 0x37	; 55
    ae1c:	08 95       	ret
    ae1e:	83 e0       	ldi	r24, 0x03	; 3
    ae20:	08 95       	ret
    ae22:	86 e0       	ldi	r24, 0x06	; 6
    ae24:	08 95       	ret
    ae26:	84 e0       	ldi	r24, 0x04	; 4
    ae28:	08 95       	ret
    ae2a:	85 e0       	ldi	r24, 0x05	; 5
}
    ae2c:	08 95       	ret

0000ae2e <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    ae2e:	8c 54       	subi	r24, 0x4C	; 76
    ae30:	93 4f       	sbci	r25, 0xF3	; 243
    ae32:	fc 01       	movw	r30, r24
    ae34:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    ae36:	83 30       	cpi	r24, 0x03	; 3
    ae38:	41 f0       	breq	.+16     	; 0xae4a <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    ae3a:	86 30       	cpi	r24, 0x06	; 6
    ae3c:	41 f0       	breq	.+16     	; 0xae4e <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    ae3e:	84 30       	cpi	r24, 0x04	; 4
    ae40:	41 f0       	breq	.+16     	; 0xae52 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    ae42:	85 30       	cpi	r24, 0x05	; 5
    ae44:	41 f0       	breq	.+16     	; 0xae56 <solid_directional_tile+0x28>
	
	return 0;
    ae46:	80 e0       	ldi	r24, 0x00	; 0
    ae48:	08 95       	ret
    ae4a:	83 e0       	ldi	r24, 0x03	; 3
    ae4c:	08 95       	ret
    ae4e:	86 e0       	ldi	r24, 0x06	; 6
    ae50:	08 95       	ret
    ae52:	84 e0       	ldi	r24, 0x04	; 4
    ae54:	08 95       	ret
    ae56:	85 e0       	ldi	r24, 0x05	; 5
}
    ae58:	08 95       	ret

0000ae5a <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    ae5a:	7f 92       	push	r7
    ae5c:	8f 92       	push	r8
    ae5e:	9f 92       	push	r9
    ae60:	af 92       	push	r10
    ae62:	bf 92       	push	r11
    ae64:	cf 92       	push	r12
    ae66:	df 92       	push	r13
    ae68:	ef 92       	push	r14
    ae6a:	ff 92       	push	r15
    ae6c:	0f 93       	push	r16
    ae6e:	1f 93       	push	r17
    ae70:	cf 93       	push	r28
    ae72:	df 93       	push	r29
    ae74:	b6 2e       	mov	r11, r22
    ae76:	94 2e       	mov	r9, r20
    ae78:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    ae7a:	fc 01       	movw	r30, r24
    ae7c:	ec 54       	subi	r30, 0x4C	; 76
    ae7e:	f3 4f       	sbci	r31, 0xF3	; 243
    ae80:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    ae82:	6e e1       	ldi	r22, 0x1E	; 30
    ae84:	70 e0       	ldi	r23, 0x00	; 0
    ae86:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    ae8a:	f8 2e       	mov	r15, r24
    ae8c:	ff 0c       	add	r15, r15
    ae8e:	ff 0c       	add	r15, r15
    ae90:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    ae92:	6d 5f       	subi	r22, 0xFD	; 253
    ae94:	7f 4f       	sbci	r23, 0xFF	; 255
    ae96:	16 2f       	mov	r17, r22
    ae98:	11 0f       	add	r17, r17
    ae9a:	11 0f       	add	r17, r17
    ae9c:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    ae9e:	83 e0       	ldi	r24, 0x03	; 3
    aea0:	d8 16       	cp	r13, r24
    aea2:	19 f0       	breq	.+6      	; 0xaeaa <collides_directional_tile+0x50>
    aea4:	86 e0       	ldi	r24, 0x06	; 6
    aea6:	d8 12       	cpse	r13, r24
    aea8:	31 c0       	rjmp	.+98     	; 0xaf0c <collides_directional_tile+0xb2>
    aeaa:	cf ef       	ldi	r28, 0xFF	; 255
    aeac:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    aeae:	c9 0d       	add	r28, r9
    aeb0:	27 e0       	ldi	r18, 0x07	; 7
    aeb2:	72 2e       	mov	r7, r18
    aeb4:	7f 0c       	add	r7, r15
    aeb6:	37 e0       	ldi	r19, 0x07	; 7
    aeb8:	83 2e       	mov	r8, r19
    aeba:	81 0e       	add	r8, r17
    aebc:	ac 2e       	mov	r10, r28
    aebe:	cb 2c       	mov	r12, r11
    aec0:	e9 2c       	mov	r14, r9
    aec2:	0b 2d       	mov	r16, r11
    aec4:	21 2f       	mov	r18, r17
    aec6:	47 2d       	mov	r20, r7
    aec8:	68 2d       	mov	r22, r8
    aeca:	8f 2d       	mov	r24, r15
    aecc:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    aed0:	81 11       	cpse	r24, r1
    aed2:	58 c0       	rjmp	.+176    	; 0xaf84 <collides_directional_tile+0x12a>
    aed4:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    aed6:	db 0d       	add	r29, r11
    aed8:	a9 2c       	mov	r10, r9
    aeda:	cd 2e       	mov	r12, r29
    aedc:	21 2f       	mov	r18, r17
    aede:	47 2d       	mov	r20, r7
    aee0:	68 2d       	mov	r22, r8
    aee2:	8f 2d       	mov	r24, r15
    aee4:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    aee8:	81 11       	cpse	r24, r1
    aeea:	4c c0       	rjmp	.+152    	; 0xaf84 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    aeec:	ac 2e       	mov	r10, r28
    aeee:	0d 2f       	mov	r16, r29
    aef0:	21 2f       	mov	r18, r17
    aef2:	47 2d       	mov	r20, r7
    aef4:	68 2d       	mov	r22, r8
    aef6:	8f 2d       	mov	r24, r15
    aef8:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    aefc:	81 11       	cpse	r24, r1
    aefe:	42 c0       	rjmp	.+132    	; 0xaf84 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    af00:	ec 2e       	mov	r14, r28
    af02:	0b 2d       	mov	r16, r11
    af04:	21 2f       	mov	r18, r17
    af06:	47 2d       	mov	r20, r7
    af08:	68 2d       	mov	r22, r8
    af0a:	34 c0       	rjmp	.+104    	; 0xaf74 <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    af0c:	8c ef       	ldi	r24, 0xFC	; 252
    af0e:	8d 0d       	add	r24, r13
    af10:	82 30       	cpi	r24, 0x02	; 2
    af12:	b0 f5       	brcc	.+108    	; 0xaf80 <collides_directional_tile+0x126>
    af14:	cf ef       	ldi	r28, 0xFF	; 255
    af16:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    af18:	c4 0f       	add	r28, r20
    af1a:	87 e0       	ldi	r24, 0x07	; 7
    af1c:	78 2e       	mov	r7, r24
    af1e:	71 0e       	add	r7, r17
    af20:	97 e0       	ldi	r25, 0x07	; 7
    af22:	89 2e       	mov	r8, r25
    af24:	8f 0c       	add	r8, r15
    af26:	ac 2e       	mov	r10, r28
    af28:	cb 2c       	mov	r12, r11
    af2a:	e4 2e       	mov	r14, r20
    af2c:	0b 2d       	mov	r16, r11
    af2e:	27 2d       	mov	r18, r7
    af30:	48 2d       	mov	r20, r8
    af32:	61 2f       	mov	r22, r17
    af34:	8f 2d       	mov	r24, r15
    af36:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    af3a:	81 11       	cpse	r24, r1
    af3c:	23 c0       	rjmp	.+70     	; 0xaf84 <collides_directional_tile+0x12a>
    af3e:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    af40:	db 0d       	add	r29, r11
    af42:	a9 2c       	mov	r10, r9
    af44:	cd 2e       	mov	r12, r29
    af46:	27 2d       	mov	r18, r7
    af48:	48 2d       	mov	r20, r8
    af4a:	61 2f       	mov	r22, r17
    af4c:	8f 2d       	mov	r24, r15
    af4e:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    af52:	81 11       	cpse	r24, r1
    af54:	17 c0       	rjmp	.+46     	; 0xaf84 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    af56:	ac 2e       	mov	r10, r28
    af58:	0d 2f       	mov	r16, r29
    af5a:	27 2d       	mov	r18, r7
    af5c:	48 2d       	mov	r20, r8
    af5e:	61 2f       	mov	r22, r17
    af60:	8f 2d       	mov	r24, r15
    af62:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    af66:	81 11       	cpse	r24, r1
    af68:	0d c0       	rjmp	.+26     	; 0xaf84 <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    af6a:	ec 2e       	mov	r14, r28
    af6c:	0b 2d       	mov	r16, r11
    af6e:	27 2d       	mov	r18, r7
    af70:	48 2d       	mov	r20, r8
    af72:	61 2f       	mov	r22, r17
    af74:	8f 2d       	mov	r24, r15
    af76:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBLineIntersect>
    af7a:	81 11       	cpse	r24, r1
    af7c:	03 c0       	rjmp	.+6      	; 0xaf84 <collides_directional_tile+0x12a>
    af7e:	03 c0       	rjmp	.+6      	; 0xaf86 <collides_directional_tile+0x12c>
	}
	
	return 0;
    af80:	80 e0       	ldi	r24, 0x00	; 0
    af82:	01 c0       	rjmp	.+2      	; 0xaf86 <collides_directional_tile+0x12c>
    af84:	8d 2d       	mov	r24, r13
}
    af86:	df 91       	pop	r29
    af88:	cf 91       	pop	r28
    af8a:	1f 91       	pop	r17
    af8c:	0f 91       	pop	r16
    af8e:	ff 90       	pop	r15
    af90:	ef 90       	pop	r14
    af92:	df 90       	pop	r13
    af94:	cf 90       	pop	r12
    af96:	bf 90       	pop	r11
    af98:	af 90       	pop	r10
    af9a:	9f 90       	pop	r9
    af9c:	8f 90       	pop	r8
    af9e:	7f 90       	pop	r7
    afa0:	08 95       	ret

0000afa2 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    afa2:	8f 92       	push	r8
    afa4:	9f 92       	push	r9
    afa6:	af 92       	push	r10
    afa8:	cf 92       	push	r12
    afaa:	ef 92       	push	r14
    afac:	0f 93       	push	r16
    afae:	1f 93       	push	r17
    afb0:	cf 93       	push	r28
    afb2:	df 93       	push	r29
    afb4:	4c 01       	movw	r8, r24
    afb6:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    afb8:	20 e0       	ldi	r18, 0x00	; 0
    afba:	30 e0       	ldi	r19, 0x00	; 0
    afbc:	40 e0       	ldi	r20, 0x00	; 0
    afbe:	50 e4       	ldi	r21, 0x40	; 64
    afc0:	6f 81       	ldd	r22, Y+7	; 0x07
    afc2:	78 85       	ldd	r23, Y+8	; 0x08
    afc4:	89 85       	ldd	r24, Y+9	; 0x09
    afc6:	9a 85       	ldd	r25, Y+10	; 0x0a
    afc8:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    afcc:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    afd0:	e6 2e       	mov	r14, r22
    afd2:	20 e0       	ldi	r18, 0x00	; 0
    afd4:	30 e0       	ldi	r19, 0x00	; 0
    afd6:	40 e0       	ldi	r20, 0x00	; 0
    afd8:	50 e4       	ldi	r21, 0x40	; 64
    afda:	6b 81       	ldd	r22, Y+3	; 0x03
    afdc:	7c 81       	ldd	r23, Y+4	; 0x04
    afde:	8d 81       	ldd	r24, Y+5	; 0x05
    afe0:	9e 81       	ldd	r25, Y+6	; 0x06
    afe2:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    afe6:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    afea:	06 2f       	mov	r16, r22
    afec:	20 e0       	ldi	r18, 0x00	; 0
    afee:	30 e0       	ldi	r19, 0x00	; 0
    aff0:	40 e8       	ldi	r20, 0x80	; 128
    aff2:	5f e3       	ldi	r21, 0x3F	; 63
    aff4:	f4 01       	movw	r30, r8
    aff6:	67 81       	ldd	r22, Z+7	; 0x07
    aff8:	70 85       	ldd	r23, Z+8	; 0x08
    affa:	81 85       	ldd	r24, Z+9	; 0x09
    affc:	92 85       	ldd	r25, Z+10	; 0x0a
    affe:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b002:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b006:	16 2f       	mov	r17, r22
    b008:	20 e0       	ldi	r18, 0x00	; 0
    b00a:	30 e0       	ldi	r19, 0x00	; 0
    b00c:	40 e8       	ldi	r20, 0x80	; 128
    b00e:	5f e3       	ldi	r21, 0x3F	; 63
    b010:	f4 01       	movw	r30, r8
    b012:	63 81       	ldd	r22, Z+3	; 0x03
    b014:	74 81       	ldd	r23, Z+4	; 0x04
    b016:	85 81       	ldd	r24, Z+5	; 0x05
    b018:	96 81       	ldd	r25, Z+6	; 0x06
    b01a:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b01e:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b022:	86 2f       	mov	r24, r22
    b024:	94 e0       	ldi	r25, 0x04	; 4
    b026:	a9 2e       	mov	r10, r25
    b028:	24 e0       	ldi	r18, 0x04	; 4
    b02a:	c2 2e       	mov	r12, r18
    b02c:	2e e0       	ldi	r18, 0x0E	; 14
    b02e:	4e e0       	ldi	r20, 0x0E	; 14
    b030:	61 2f       	mov	r22, r17
    b032:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b036:	88 23       	and	r24, r24
    b038:	41 f0       	breq	.+16     	; 0xb04a <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    b03a:	f4 01       	movw	r30, r8
    b03c:	87 89       	ldd	r24, Z+23	; 0x17
    b03e:	88 37       	cpi	r24, 0x78	; 120
    b040:	21 f4       	brne	.+8      	; 0xb04a <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b042:	81 e0       	ldi	r24, 0x01	; 1
    b044:	9f 85       	ldd	r25, Y+15	; 0x0f
    b046:	99 30       	cpi	r25, 0x09	; 9
    b048:	08 f4       	brcc	.+2      	; 0xb04c <player_shot+0xaa>
    b04a:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    b04c:	df 91       	pop	r29
    b04e:	cf 91       	pop	r28
    b050:	1f 91       	pop	r17
    b052:	0f 91       	pop	r16
    b054:	ef 90       	pop	r14
    b056:	cf 90       	pop	r12
    b058:	af 90       	pop	r10
    b05a:	9f 90       	pop	r9
    b05c:	8f 90       	pop	r8
    b05e:	08 95       	ret

0000b060 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    b060:	cf 92       	push	r12
    b062:	df 92       	push	r13
    b064:	ef 92       	push	r14
    b066:	ff 92       	push	r15
    b068:	cf 93       	push	r28
    b06a:	df 93       	push	r29
    b06c:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b06e:	cb 80       	ldd	r12, Y+3	; 0x03
    b070:	dc 80       	ldd	r13, Y+4	; 0x04
    b072:	ed 80       	ldd	r14, Y+5	; 0x05
    b074:	fe 80       	ldd	r15, Y+6	; 0x06
    b076:	20 e0       	ldi	r18, 0x00	; 0
    b078:	30 e0       	ldi	r19, 0x00	; 0
    b07a:	a9 01       	movw	r20, r18
    b07c:	c7 01       	movw	r24, r14
    b07e:	b6 01       	movw	r22, r12
    b080:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    b084:	87 fd       	sbrc	r24, 7
    b086:	31 c0       	rjmp	.+98     	; 0xb0ea <collision_detect_boundries+0x8a>
    b088:	20 e0       	ldi	r18, 0x00	; 0
    b08a:	30 e0       	ldi	r19, 0x00	; 0
    b08c:	40 e0       	ldi	r20, 0x00	; 0
    b08e:	51 e4       	ldi	r21, 0x41	; 65
    b090:	c7 01       	movw	r24, r14
    b092:	b6 01       	movw	r22, r12
    b094:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b098:	20 e0       	ldi	r18, 0x00	; 0
    b09a:	30 e0       	ldi	r19, 0x00	; 0
    b09c:	40 e7       	ldi	r20, 0x70	; 112
    b09e:	53 e4       	ldi	r21, 0x43	; 67
    b0a0:	0e 94 d5 6b 	call	0xd7aa	; 0xd7aa <__gesf2>
    b0a4:	18 16       	cp	r1, r24
    b0a6:	0c f1       	brlt	.+66     	; 0xb0ea <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b0a8:	cf 80       	ldd	r12, Y+7	; 0x07
    b0aa:	d8 84       	ldd	r13, Y+8	; 0x08
    b0ac:	e9 84       	ldd	r14, Y+9	; 0x09
    b0ae:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    b0b0:	20 e0       	ldi	r18, 0x00	; 0
    b0b2:	30 e0       	ldi	r19, 0x00	; 0
    b0b4:	40 ec       	ldi	r20, 0xC0	; 192
    b0b6:	51 e4       	ldi	r21, 0x41	; 65
    b0b8:	c7 01       	movw	r24, r14
    b0ba:	b6 01       	movw	r22, r12
    b0bc:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    b0c0:	87 fd       	sbrc	r24, 7
    b0c2:	13 c0       	rjmp	.+38     	; 0xb0ea <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    b0c4:	20 e0       	ldi	r18, 0x00	; 0
    b0c6:	30 e0       	ldi	r19, 0x00	; 0
    b0c8:	40 e0       	ldi	r20, 0x00	; 0
    b0ca:	51 e4       	ldi	r21, 0x41	; 65
    b0cc:	c7 01       	movw	r24, r14
    b0ce:	b6 01       	movw	r22, r12
    b0d0:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b0d4:	c1 e0       	ldi	r28, 0x01	; 1
    b0d6:	20 e0       	ldi	r18, 0x00	; 0
    b0d8:	30 e0       	ldi	r19, 0x00	; 0
    b0da:	40 e6       	ldi	r20, 0x60	; 96
    b0dc:	53 e4       	ldi	r21, 0x43	; 67
    b0de:	0e 94 d5 6b 	call	0xd7aa	; 0xd7aa <__gesf2>
    b0e2:	18 16       	cp	r1, r24
    b0e4:	1c f0       	brlt	.+6      	; 0xb0ec <collision_detect_boundries+0x8c>
    b0e6:	c0 e0       	ldi	r28, 0x00	; 0
    b0e8:	01 c0       	rjmp	.+2      	; 0xb0ec <collision_detect_boundries+0x8c>
	{
		return 1;
    b0ea:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    b0ec:	8c 2f       	mov	r24, r28
    b0ee:	df 91       	pop	r29
    b0f0:	cf 91       	pop	r28
    b0f2:	ff 90       	pop	r15
    b0f4:	ef 90       	pop	r14
    b0f6:	df 90       	pop	r13
    b0f8:	cf 90       	pop	r12
    b0fa:	08 95       	ret

0000b0fc <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b0fc:	0f 93       	push	r16
    b0fe:	1f 93       	push	r17
    b100:	cf 93       	push	r28
    b102:	9b 01       	movw	r18, r22
    b104:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    b106:	8c 01       	movw	r16, r24
    b108:	0c 54       	subi	r16, 0x4C	; 76
    b10a:	13 4f       	sbci	r17, 0xF3	; 243
    b10c:	f8 01       	movw	r30, r16
    b10e:	41 81       	ldd	r20, Z+1	; 0x01
    b110:	41 11       	cpse	r20, r1
    b112:	06 c0       	rjmp	.+12     	; 0xb120 <drop_item+0x24>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    b114:	6e e1       	ldi	r22, 0x1E	; 30
    b116:	70 e0       	ldi	r23, 0x00	; 0
    b118:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b11c:	6d 5f       	subi	r22, 0xFD	; 253
    b11e:	19 c0       	rjmp	.+50     	; 0xb152 <drop_item+0x56>
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b120:	8c 01       	movw	r16, r24
    b122:	0b 54       	subi	r16, 0x4B	; 75
    b124:	13 4f       	sbci	r17, 0xF3	; 243
    b126:	f8 01       	movw	r30, r16
    b128:	41 81       	ldd	r20, Z+1	; 0x01
    b12a:	41 11       	cpse	r20, r1
    b12c:	06 c0       	rjmp	.+12     	; 0xb13a <drop_item+0x3e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    b12e:	6e e1       	ldi	r22, 0x1E	; 30
    b130:	70 e0       	ldi	r23, 0x00	; 0
    b132:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b136:	6d 5f       	subi	r22, 0xFD	; 253
    b138:	1a c0       	rjmp	.+52     	; 0xb16e <drop_item+0x72>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b13a:	8c 01       	movw	r16, r24
    b13c:	0e 52       	subi	r16, 0x2E	; 46
    b13e:	13 4f       	sbci	r17, 0xF3	; 243
    b140:	f8 01       	movw	r30, r16
    b142:	41 81       	ldd	r20, Z+1	; 0x01
    b144:	41 11       	cpse	r20, r1
    b146:	07 c0       	rjmp	.+14     	; 0xb156 <drop_item+0x5a>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    b148:	6e e1       	ldi	r22, 0x1E	; 30
    b14a:	70 e0       	ldi	r23, 0x00	; 0
    b14c:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b150:	6c 5f       	subi	r22, 0xFC	; 252
    b152:	a9 01       	movw	r20, r18
    b154:	0e c0       	rjmp	.+28     	; 0xb172 <drop_item+0x76>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b156:	8c 01       	movw	r16, r24
    b158:	0d 52       	subi	r16, 0x2D	; 45
    b15a:	13 4f       	sbci	r17, 0xF3	; 243
    b15c:	f8 01       	movw	r30, r16
    b15e:	41 81       	ldd	r20, Z+1	; 0x01
    b160:	41 11       	cpse	r20, r1
    b162:	0b c0       	rjmp	.+22     	; 0xb17a <drop_item+0x7e>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    b164:	6e e1       	ldi	r22, 0x1E	; 30
    b166:	70 e0       	ldi	r23, 0x00	; 0
    b168:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b16c:	6c 5f       	subi	r22, 0xFC	; 252
    b16e:	a9 01       	movw	r20, r18
    b170:	8f 5f       	subi	r24, 0xFF	; 255
    b172:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    b176:	f8 01       	movw	r30, r16
    b178:	c1 83       	std	Z+1, r28	; 0x01
	}
}
    b17a:	cf 91       	pop	r28
    b17c:	1f 91       	pop	r17
    b17e:	0f 91       	pop	r16
    b180:	08 95       	ret

0000b182 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b182:	ff 92       	push	r15
    b184:	0f 93       	push	r16
    b186:	1f 93       	push	r17
    b188:	cf 93       	push	r28
    b18a:	df 93       	push	r29
    b18c:	ec 01       	movw	r28, r24
    b18e:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b190:	20 e0       	ldi	r18, 0x00	; 0
    b192:	30 e0       	ldi	r19, 0x00	; 0
    b194:	40 e0       	ldi	r20, 0x00	; 0
    b196:	5e e3       	ldi	r21, 0x3E	; 62
    b198:	6f 81       	ldd	r22, Y+7	; 0x07
    b19a:	78 85       	ldd	r23, Y+8	; 0x08
    b19c:	89 85       	ldd	r24, Y+9	; 0x09
    b19e:	9a 85       	ldd	r25, Y+10	; 0x0a
    b1a0:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b1a4:	20 e0       	ldi	r18, 0x00	; 0
    b1a6:	30 e0       	ldi	r19, 0x00	; 0
    b1a8:	40 e4       	ldi	r20, 0x40	; 64
    b1aa:	50 e4       	ldi	r21, 0x40	; 64
    b1ac:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    b1b0:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b1b4:	8e e1       	ldi	r24, 0x1E	; 30
    b1b6:	68 9f       	mul	r22, r24
    b1b8:	80 01       	movw	r16, r0
    b1ba:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    b1bc:	20 e0       	ldi	r18, 0x00	; 0
    b1be:	30 e0       	ldi	r19, 0x00	; 0
    b1c0:	40 e0       	ldi	r20, 0x00	; 0
    b1c2:	5e e3       	ldi	r21, 0x3E	; 62
    b1c4:	6b 81       	ldd	r22, Y+3	; 0x03
    b1c6:	7c 81       	ldd	r23, Y+4	; 0x04
    b1c8:	8d 81       	ldd	r24, Y+5	; 0x05
    b1ca:	9e 81       	ldd	r25, Y+6	; 0x06
    b1cc:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b1d0:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b1d4:	06 0f       	add	r16, r22
    b1d6:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    b1d8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    b1da:	88 23       	and	r24, r24
    b1dc:	79 f0       	breq	.+30     	; 0xb1fc <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    b1de:	40 e0       	ldi	r20, 0x00	; 0
    b1e0:	50 e0       	ldi	r21, 0x00	; 0
    b1e2:	61 e0       	ldi	r22, 0x01	; 1
    b1e4:	8a e0       	ldi	r24, 0x0A	; 10
    b1e6:	8f 0d       	add	r24, r15
    b1e8:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    b1ec:	47 e0       	ldi	r20, 0x07	; 7
    b1ee:	64 e8       	ldi	r22, 0x84	; 132
    b1f0:	79 e7       	ldi	r23, 0x79	; 121
    b1f2:	c8 01       	movw	r24, r16
    b1f4:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <drop_item>
		player->max_speed = MAX_SPEED;
    b1f8:	82 e3       	ldi	r24, 0x32	; 50
    b1fa:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    b1fc:	89 8d       	ldd	r24, Y+25	; 0x19
    b1fe:	88 23       	and	r24, r24
    b200:	69 f0       	breq	.+26     	; 0xb21c <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    b202:	40 e0       	ldi	r20, 0x00	; 0
    b204:	50 e0       	ldi	r21, 0x00	; 0
    b206:	61 e0       	ldi	r22, 0x01	; 1
    b208:	8b e0       	ldi	r24, 0x0B	; 11
    b20a:	8f 0d       	add	r24, r15
    b20c:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    b210:	49 e0       	ldi	r20, 0x09	; 9
    b212:	6e e7       	ldi	r22, 0x7E	; 126
    b214:	79 e7       	ldi	r23, 0x79	; 121
    b216:	c8 01       	movw	r24, r16
    b218:	0e 94 7e 58 	call	0xb0fc	; 0xb0fc <drop_item>
	}
	player->has_over_speed = false;
    b21c:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    b21e:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    b220:	8c 89       	ldd	r24, Y+20	; 0x14
    b222:	81 60       	ori	r24, 0x01	; 1
    b224:	8c 8b       	std	Y+20, r24	; 0x14
}
    b226:	df 91       	pop	r29
    b228:	cf 91       	pop	r28
    b22a:	1f 91       	pop	r17
    b22c:	0f 91       	pop	r16
    b22e:	ff 90       	pop	r15
    b230:	08 95       	ret

0000b232 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    b232:	fc 01       	movw	r30, r24
    b234:	8e e1       	ldi	r24, 0x1E	; 30
    b236:	48 9f       	mul	r20, r24
    b238:	a0 01       	movw	r20, r0
    b23a:	11 24       	eor	r1, r1
    b23c:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    b23e:	64 0f       	add	r22, r20
    b240:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    b242:	21 11       	cpse	r18, r1
    b244:	05 c0       	rjmp	.+10     	; 0xb250 <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    b246:	71 83       	std	Z+1, r23	; 0x01
    b248:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b24a:	6f 5f       	subi	r22, 0xFF	; 255
    b24c:	7f 4f       	sbci	r23, 0xFF	; 255
    b24e:	12 c0       	rjmp	.+36     	; 0xb274 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    b250:	21 30       	cpi	r18, 0x01	; 1
    b252:	19 f4       	brne	.+6      	; 0xb25a <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    b254:	cb 01       	movw	r24, r22
    b256:	01 96       	adiw	r24, 0x01	; 1
    b258:	04 c0       	rjmp	.+8      	; 0xb262 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    b25a:	22 30       	cpi	r18, 0x02	; 2
    b25c:	39 f4       	brne	.+14     	; 0xb26c <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    b25e:	cb 01       	movw	r24, r22
    b260:	4e 96       	adiw	r24, 0x1e	; 30
    b262:	91 83       	std	Z+1, r25	; 0x01
    b264:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b266:	61 5e       	subi	r22, 0xE1	; 225
    b268:	7f 4f       	sbci	r23, 0xFF	; 255
    b26a:	04 c0       	rjmp	.+8      	; 0xb274 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    b26c:	71 83       	std	Z+1, r23	; 0x01
    b26e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b270:	62 5e       	subi	r22, 0xE2	; 226
    b272:	7f 4f       	sbci	r23, 0xFF	; 255
    b274:	73 83       	std	Z+3, r23	; 0x03
    b276:	62 83       	std	Z+2, r22	; 0x02
    b278:	08 95       	ret

0000b27a <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    b27a:	ef 92       	push	r14
    b27c:	ff 92       	push	r15
    b27e:	0f 93       	push	r16
    b280:	1f 93       	push	r17
    b282:	cf 93       	push	r28
    b284:	df 93       	push	r29
    b286:	ec 01       	movw	r28, r24
    b288:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    b28a:	8e e1       	ldi	r24, 0x1E	; 30
    b28c:	e8 2e       	mov	r14, r24
    b28e:	f1 2c       	mov	r15, r1
    b290:	cb 01       	movw	r24, r22
    b292:	b7 01       	movw	r22, r14
    b294:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b298:	6d 5f       	subi	r22, 0xFD	; 253
    b29a:	40 e0       	ldi	r20, 0x00	; 0
    b29c:	50 e0       	ldi	r21, 0x00	; 0
    b29e:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    b2a2:	88 81       	ld	r24, Y
    b2a4:	fe 01       	movw	r30, r28
    b2a6:	9e e0       	ldi	r25, 0x0E	; 14
    b2a8:	89 9f       	mul	r24, r25
    b2aa:	e0 0d       	add	r30, r0
    b2ac:	f1 1d       	adc	r31, r1
    b2ae:	11 24       	eor	r1, r1
    b2b0:	85 85       	ldd	r24, Z+13	; 0x0d
    b2b2:	96 85       	ldd	r25, Z+14	; 0x0e
    b2b4:	00 97       	sbiw	r24, 0x00	; 0
    b2b6:	41 f0       	breq	.+16     	; 0xb2c8 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    b2b8:	b7 01       	movw	r22, r14
    b2ba:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b2be:	6d 5f       	subi	r22, 0xFD	; 253
    b2c0:	40 e0       	ldi	r20, 0x00	; 0
    b2c2:	50 e0       	ldi	r21, 0x00	; 0
    b2c4:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    b2c8:	88 81       	ld	r24, Y
    b2ca:	fe 01       	movw	r30, r28
    b2cc:	9e e0       	ldi	r25, 0x0E	; 14
    b2ce:	89 9f       	mul	r24, r25
    b2d0:	e0 0d       	add	r30, r0
    b2d2:	f1 1d       	adc	r31, r1
    b2d4:	11 24       	eor	r1, r1
    b2d6:	16 87       	std	Z+14, r17	; 0x0e
    b2d8:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    b2da:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    b2dc:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    b2de:	82 30       	cpi	r24, 0x02	; 2
    b2e0:	11 f0       	breq	.+4      	; 0xb2e6 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    b2e2:	88 83       	st	Y, r24
    b2e4:	01 c0       	rjmp	.+2      	; 0xb2e8 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    b2e6:	18 82       	st	Y, r1
	}
}
    b2e8:	df 91       	pop	r29
    b2ea:	cf 91       	pop	r28
    b2ec:	1f 91       	pop	r17
    b2ee:	0f 91       	pop	r16
    b2f0:	ff 90       	pop	r15
    b2f2:	ef 90       	pop	r14
    b2f4:	08 95       	ret

0000b2f6 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    b2f6:	fb 01       	movw	r30, r22
	switch (tile_type)
    b2f8:	84 30       	cpi	r24, 0x04	; 4
    b2fa:	71 f0       	breq	.+28     	; 0xb318 <richochet+0x22>
    b2fc:	18 f4       	brcc	.+6      	; 0xb304 <richochet+0xe>
    b2fe:	83 30       	cpi	r24, 0x03	; 3
    b300:	31 f0       	breq	.+12     	; 0xb30e <richochet+0x18>
    b302:	08 95       	ret
    b304:	85 30       	cpi	r24, 0x05	; 5
    b306:	99 f0       	breq	.+38     	; 0xb32e <richochet+0x38>
    b308:	86 30       	cpi	r24, 0x06	; 6
    b30a:	59 f0       	breq	.+22     	; 0xb322 <richochet+0x2c>
    b30c:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b30e:	80 81       	ld	r24, Z
    b310:	8d 7f       	andi	r24, 0xFD	; 253
    b312:	29 f4       	brne	.+10     	; 0xb31e <richochet+0x28>
				sprite->direction = D_RIGHT;
    b314:	81 e0       	ldi	r24, 0x01	; 1
    b316:	09 c0       	rjmp	.+18     	; 0xb32a <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b318:	80 81       	ld	r24, Z
    b31a:	8d 7f       	andi	r24, 0xFD	; 253
    b31c:	29 f0       	breq	.+10     	; 0xb328 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    b31e:	82 e0       	ldi	r24, 0x02	; 2
    b320:	04 c0       	rjmp	.+8      	; 0xb32a <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b322:	80 81       	ld	r24, Z
    b324:	8d 7f       	andi	r24, 0xFD	; 253
    b326:	31 f4       	brne	.+12     	; 0xb334 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    b328:	83 e0       	ldi	r24, 0x03	; 3
    b32a:	80 83       	st	Z, r24
    b32c:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b32e:	80 81       	ld	r24, Z
    b330:	8d 7f       	andi	r24, 0xFD	; 253
    b332:	81 f3       	breq	.-32     	; 0xb314 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    b334:	10 82       	st	Z, r1
    b336:	08 95       	ret

0000b338 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    b338:	2f 92       	push	r2
    b33a:	3f 92       	push	r3
    b33c:	4f 92       	push	r4
    b33e:	5f 92       	push	r5
    b340:	6f 92       	push	r6
    b342:	7f 92       	push	r7
    b344:	8f 92       	push	r8
    b346:	9f 92       	push	r9
    b348:	af 92       	push	r10
    b34a:	bf 92       	push	r11
    b34c:	cf 92       	push	r12
    b34e:	df 92       	push	r13
    b350:	ef 92       	push	r14
    b352:	ff 92       	push	r15
    b354:	0f 93       	push	r16
    b356:	1f 93       	push	r17
    b358:	cf 93       	push	r28
    b35a:	df 93       	push	r29
    b35c:	00 d0       	rcall	.+0      	; 0xb35e <collision_detect_shot+0x26>
    b35e:	00 d0       	rcall	.+0      	; 0xb360 <collision_detect_shot+0x28>
    b360:	1f 92       	push	r1
    b362:	cd b7       	in	r28, 0x3d	; 61
    b364:	de b7       	in	r29, 0x3e	; 62
    b366:	3c 01       	movw	r6, r24
    b368:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    b36a:	1a 82       	std	Y+2, r1	; 0x02
    b36c:	19 82       	std	Y+1, r1	; 0x01
    b36e:	1c 82       	std	Y+4, r1	; 0x04
    b370:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    b372:	20 e0       	ldi	r18, 0x00	; 0
    b374:	30 e0       	ldi	r19, 0x00	; 0
    b376:	40 e0       	ldi	r20, 0x00	; 0
    b378:	5e e3       	ldi	r21, 0x3E	; 62
    b37a:	db 01       	movw	r26, r22
    b37c:	17 96       	adiw	r26, 0x07	; 7
    b37e:	6d 91       	ld	r22, X+
    b380:	7d 91       	ld	r23, X+
    b382:	8d 91       	ld	r24, X+
    b384:	9c 91       	ld	r25, X
    b386:	1a 97       	sbiw	r26, 0x0a	; 10
    b388:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b38c:	20 e0       	ldi	r18, 0x00	; 0
    b38e:	30 e0       	ldi	r19, 0x00	; 0
    b390:	40 e4       	ldi	r20, 0x40	; 64
    b392:	50 e4       	ldi	r21, 0x40	; 64
    b394:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    b398:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b39c:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    b39e:	20 e0       	ldi	r18, 0x00	; 0
    b3a0:	30 e0       	ldi	r19, 0x00	; 0
    b3a2:	40 e0       	ldi	r20, 0x00	; 0
    b3a4:	5e e3       	ldi	r21, 0x3E	; 62
    b3a6:	f4 01       	movw	r30, r8
    b3a8:	63 81       	ldd	r22, Z+3	; 0x03
    b3aa:	74 81       	ldd	r23, Z+4	; 0x04
    b3ac:	85 81       	ldd	r24, Z+5	; 0x05
    b3ae:	96 81       	ldd	r25, Z+6	; 0x06
    b3b0:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b3b4:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    b3b8:	d4 01       	movw	r26, r8
    b3ba:	2c 91       	ld	r18, X
    b3bc:	41 2f       	mov	r20, r17
    b3be:	ce 01       	movw	r24, r28
    b3c0:	01 96       	adiw	r24, 0x01	; 1
    b3c2:	0e 94 19 59 	call	0xb232	; 0xb232 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    b3c6:	c4 01       	movw	r24, r8
    b3c8:	0e 94 30 58 	call	0xb060	; 0xb060 <collision_detect_boundries>
    b3cc:	88 23       	and	r24, r24
    b3ce:	69 f0       	breq	.+26     	; 0xb3ea <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    b3d0:	f4 01       	movw	r30, r8
    b3d2:	63 85       	ldd	r22, Z+11	; 0x0b
    b3d4:	c4 01       	movw	r24, r8
    b3d6:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
		player->active_shots--;
    b3da:	d3 01       	movw	r26, r6
    b3dc:	51 96       	adiw	r26, 0x11	; 17
    b3de:	8c 91       	ld	r24, X
    b3e0:	51 97       	sbiw	r26, 0x11	; 17
    b3e2:	81 50       	subi	r24, 0x01	; 1
    b3e4:	51 96       	adiw	r26, 0x11	; 17
    b3e6:	8c 93       	st	X, r24
		return;
    b3e8:	63 c1       	rjmp	.+710    	; 0xb6b0 <collision_detect_shot+0x378>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    b3ea:	b4 01       	movw	r22, r8
    b3ec:	85 e3       	ldi	r24, 0x35	; 53
    b3ee:	9c e0       	ldi	r25, 0x0C	; 12
    b3f0:	0e 94 d1 57 	call	0xafa2	; 0xafa2 <player_shot>
    b3f4:	88 23       	and	r24, r24
    b3f6:	b9 f0       	breq	.+46     	; 0xb426 <collision_detect_shot+0xee>
    b3f8:	80 91 49 0c 	lds	r24, 0x0C49
    b3fc:	80 fd       	sbrc	r24, 0
    b3fe:	13 c0       	rjmp	.+38     	; 0xb426 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    b400:	80 91 b3 0f 	lds	r24, 0x0FB3
    b404:	8f 5f       	subi	r24, 0xFF	; 255
    b406:	80 93 b3 0f 	sts	0x0FB3, r24
		player2.score++;
    b40a:	80 91 b2 0f 	lds	r24, 0x0FB2
    b40e:	8f 5f       	subi	r24, 0xFF	; 255
    b410:	80 93 b2 0f 	sts	0x0FB2, r24
		render_score(&player2, 15);
    b414:	6f e0       	ldi	r22, 0x0F	; 15
    b416:	83 ea       	ldi	r24, 0xA3	; 163
    b418:	9f e0       	ldi	r25, 0x0F	; 15
    b41a:	0e 94 a8 54 	call	0xa950	; 0xa950 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    b41e:	05 e3       	ldi	r16, 0x35	; 53
    b420:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    b422:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    b424:	29 c0       	rjmp	.+82     	; 0xb478 <collision_detect_shot+0x140>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    b426:	b4 01       	movw	r22, r8
    b428:	83 ea       	ldi	r24, 0xA3	; 163
    b42a:	9f e0       	ldi	r25, 0x0F	; 15
    b42c:	0e 94 d1 57 	call	0xafa2	; 0xafa2 <player_shot>
    b430:	81 11       	cpse	r24, r1
    b432:	0b c0       	rjmp	.+22     	; 0xb44a <collision_detect_shot+0x112>
    b434:	fe 01       	movw	r30, r28
    b436:	31 96       	adiw	r30, 0x01	; 1
    b438:	2f 01       	movw	r4, r30
    b43a:	1d 82       	std	Y+5, r1	; 0x05
    b43c:	f1 2c       	mov	r15, r1
    b43e:	d1 2c       	mov	r13, r1
    b440:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b442:	6e e1       	ldi	r22, 0x1E	; 30
    b444:	26 2e       	mov	r2, r22
    b446:	31 2c       	mov	r3, r1
    b448:	5e c0       	rjmp	.+188    	; 0xb506 <collision_detect_shot+0x1ce>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    b44a:	80 91 b7 0f 	lds	r24, 0x0FB7
    b44e:	80 fd       	sbrc	r24, 0
    b450:	f1 cf       	rjmp	.-30     	; 0xb434 <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    b452:	80 91 45 0c 	lds	r24, 0x0C45
    b456:	8f 5f       	subi	r24, 0xFF	; 255
    b458:	80 93 45 0c 	sts	0x0C45, r24
		player1.score++;
    b45c:	80 91 44 0c 	lds	r24, 0x0C44
    b460:	8f 5f       	subi	r24, 0xFF	; 255
    b462:	80 93 44 0c 	sts	0x0C44, r24
		render_score(&player1, 0);
    b466:	60 e0       	ldi	r22, 0x00	; 0
    b468:	85 e3       	ldi	r24, 0x35	; 53
    b46a:	9c e0       	ldi	r25, 0x0C	; 12
    b46c:	0e 94 a8 54 	call	0xa950	; 0xa950 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    b470:	03 ea       	ldi	r16, 0xA3	; 163
    b472:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    b474:	5f e0       	ldi	r21, 0x0F	; 15
    b476:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    b478:	01 15       	cp	r16, r1
    b47a:	11 05       	cpc	r17, r1
    b47c:	d9 f2       	breq	.-74     	; 0xb434 <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    b47e:	d4 01       	movw	r26, r8
    b480:	1b 96       	adiw	r26, 0x0b	; 11
    b482:	6c 91       	ld	r22, X
    b484:	c4 01       	movw	r24, r8
    b486:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
		player->active_shots--;
    b48a:	f3 01       	movw	r30, r6
    b48c:	81 89       	ldd	r24, Z+17	; 0x11
    b48e:	81 50       	subi	r24, 0x01	; 1
    b490:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    b492:	6f 2d       	mov	r22, r15
    b494:	c8 01       	movw	r24, r16
    b496:	0e 94 c1 58 	call	0xb182	; 0xb182 <kill_player>
		SFX_TANK_EXPLODE;
    b49a:	2f ef       	ldi	r18, 0xFF	; 255
    b49c:	40 e1       	ldi	r20, 0x10	; 16
    b49e:	6a e0       	ldi	r22, 0x0A	; 10
    b4a0:	04 c1       	rjmp	.+520    	; 0xb6aa <collision_detect_shot+0x372>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    b4a2:	c5 01       	movw	r24, r10
    b4a4:	0e 94 17 57 	call	0xae2e	; 0xae2e <solid_directional_tile>
    b4a8:	88 23       	and	r24, r24
    b4aa:	c1 f1       	breq	.+112    	; 0xb51c <collision_detect_shot+0x1e4>
    b4ac:	20 e0       	ldi	r18, 0x00	; 0
    b4ae:	30 e0       	ldi	r19, 0x00	; 0
    b4b0:	40 e0       	ldi	r20, 0x00	; 0
    b4b2:	50 e4       	ldi	r21, 0x40	; 64
    b4b4:	f4 01       	movw	r30, r8
    b4b6:	67 81       	ldd	r22, Z+7	; 0x07
    b4b8:	70 85       	ldd	r23, Z+8	; 0x08
    b4ba:	81 85       	ldd	r24, Z+9	; 0x09
    b4bc:	92 85       	ldd	r25, Z+10	; 0x0a
    b4be:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b4c2:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b4c6:	c6 2e       	mov	r12, r22
    b4c8:	20 e0       	ldi	r18, 0x00	; 0
    b4ca:	30 e0       	ldi	r19, 0x00	; 0
    b4cc:	40 e0       	ldi	r20, 0x00	; 0
    b4ce:	50 e4       	ldi	r21, 0x40	; 64
    b4d0:	d4 01       	movw	r26, r8
    b4d2:	13 96       	adiw	r26, 0x03	; 3
    b4d4:	6d 91       	ld	r22, X+
    b4d6:	7d 91       	ld	r23, X+
    b4d8:	8d 91       	ld	r24, X+
    b4da:	9c 91       	ld	r25, X
    b4dc:	16 97       	sbiw	r26, 0x06	; 6
    b4de:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b4e2:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b4e6:	04 e0       	ldi	r16, 0x04	; 4
    b4e8:	24 e0       	ldi	r18, 0x04	; 4
    b4ea:	4c 2d       	mov	r20, r12
    b4ec:	c5 01       	movw	r24, r10
    b4ee:	0e 94 2d 57 	call	0xae5a	; 0xae5a <collides_directional_tile>
    b4f2:	88 23       	and	r24, r24
    b4f4:	99 f0       	breq	.+38     	; 0xb51c <collision_detect_shot+0x1e4>
		{
			hit = hit | HIT_ANGLE;
    b4f6:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    b4f8:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    b4fa:	bd 81       	ldd	r27, Y+5	; 0x05
    b4fc:	b1 30       	cpi	r27, 0x01	; 1
    b4fe:	09 f4       	brne	.+2      	; 0xb502 <collision_detect_shot+0x1ca>
    b500:	88 c0       	rjmp	.+272    	; 0xb612 <collision_detect_shot+0x2da>
    b502:	f1 e0       	ldi	r31, 0x01	; 1
    b504:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    b506:	d2 01       	movw	r26, r4
    b508:	ad 90       	ld	r10, X+
    b50a:	bd 90       	ld	r11, X+
    b50c:	2d 01       	movw	r4, r26
    b50e:	f5 01       	movw	r30, r10
    b510:	ec 54       	subi	r30, 0x4C	; 76
    b512:	f3 4f       	sbci	r31, 0xF3	; 243
    b514:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    b516:	ee 20       	and	r14, r14
    b518:	81 f3       	breq	.-32     	; 0xb4fa <collision_detect_shot+0x1c2>
    b51a:	c3 cf       	rjmp	.-122    	; 0xb4a2 <collision_detect_shot+0x16a>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b51c:	b1 e0       	ldi	r27, 0x01	; 1
    b51e:	eb 12       	cpse	r14, r27
    b520:	3b c0       	rjmp	.+118    	; 0xb598 <collision_detect_shot+0x260>
    b522:	c5 01       	movw	r24, r10
    b524:	b1 01       	movw	r22, r2
    b526:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b52a:	6d 5f       	subi	r22, 0xFD	; 253
    b52c:	7f 4f       	sbci	r23, 0xFF	; 255
    b52e:	e6 2e       	mov	r14, r22
    b530:	ee 0c       	add	r14, r14
    b532:	ee 0c       	add	r14, r14
    b534:	ee 0c       	add	r14, r14
    b536:	08 2f       	mov	r16, r24
    b538:	00 0f       	add	r16, r16
    b53a:	00 0f       	add	r16, r16
    b53c:	00 0f       	add	r16, r16
    b53e:	20 e0       	ldi	r18, 0x00	; 0
    b540:	30 e0       	ldi	r19, 0x00	; 0
    b542:	40 e0       	ldi	r20, 0x00	; 0
    b544:	50 e4       	ldi	r21, 0x40	; 64
    b546:	f4 01       	movw	r30, r8
    b548:	67 81       	ldd	r22, Z+7	; 0x07
    b54a:	70 85       	ldd	r23, Z+8	; 0x08
    b54c:	81 85       	ldd	r24, Z+9	; 0x09
    b54e:	92 85       	ldd	r25, Z+10	; 0x0a
    b550:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b554:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b558:	b6 2e       	mov	r11, r22
    b55a:	20 e0       	ldi	r18, 0x00	; 0
    b55c:	30 e0       	ldi	r19, 0x00	; 0
    b55e:	40 e0       	ldi	r20, 0x00	; 0
    b560:	50 e4       	ldi	r21, 0x40	; 64
    b562:	d4 01       	movw	r26, r8
    b564:	13 96       	adiw	r26, 0x03	; 3
    b566:	6d 91       	ld	r22, X+
    b568:	7d 91       	ld	r23, X+
    b56a:	8d 91       	ld	r24, X+
    b56c:	9c 91       	ld	r25, X
    b56e:	16 97       	sbiw	r26, 0x06	; 6
    b570:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b574:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b578:	86 2f       	mov	r24, r22
    b57a:	38 e0       	ldi	r19, 0x08	; 8
    b57c:	a3 2e       	mov	r10, r19
    b57e:	48 e0       	ldi	r20, 0x08	; 8
    b580:	c4 2e       	mov	r12, r20
    b582:	24 e0       	ldi	r18, 0x04	; 4
    b584:	44 e0       	ldi	r20, 0x04	; 4
    b586:	6b 2d       	mov	r22, r11
    b588:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBCollides>
    b58c:	88 23       	and	r24, r24
    b58e:	09 f4       	brne	.+2      	; 0xb592 <collision_detect_shot+0x25a>
    b590:	b4 cf       	rjmp	.-152    	; 0xb4fa <collision_detect_shot+0x1c2>
		{
			hit = hit | HIT_BRICK;
    b592:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    b594:	dd 80       	ldd	r13, Y+5	; 0x05
    b596:	b1 cf       	rjmp	.-158    	; 0xb4fa <collision_detect_shot+0x1c2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b598:	b2 e0       	ldi	r27, 0x02	; 2
    b59a:	eb 12       	cpse	r14, r27
    b59c:	ae cf       	rjmp	.-164    	; 0xb4fa <collision_detect_shot+0x1c2>
    b59e:	c5 01       	movw	r24, r10
    b5a0:	b1 01       	movw	r22, r2
    b5a2:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b5a6:	6d 5f       	subi	r22, 0xFD	; 253
    b5a8:	7f 4f       	sbci	r23, 0xFF	; 255
    b5aa:	e6 2e       	mov	r14, r22
    b5ac:	ee 0c       	add	r14, r14
    b5ae:	ee 0c       	add	r14, r14
    b5b0:	ee 0c       	add	r14, r14
    b5b2:	08 2f       	mov	r16, r24
    b5b4:	00 0f       	add	r16, r16
    b5b6:	00 0f       	add	r16, r16
    b5b8:	00 0f       	add	r16, r16
    b5ba:	20 e0       	ldi	r18, 0x00	; 0
    b5bc:	30 e0       	ldi	r19, 0x00	; 0
    b5be:	40 e0       	ldi	r20, 0x00	; 0
    b5c0:	50 e4       	ldi	r21, 0x40	; 64
    b5c2:	f4 01       	movw	r30, r8
    b5c4:	67 81       	ldd	r22, Z+7	; 0x07
    b5c6:	70 85       	ldd	r23, Z+8	; 0x08
    b5c8:	81 85       	ldd	r24, Z+9	; 0x09
    b5ca:	92 85       	ldd	r25, Z+10	; 0x0a
    b5cc:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b5d0:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b5d4:	b6 2e       	mov	r11, r22
    b5d6:	20 e0       	ldi	r18, 0x00	; 0
    b5d8:	30 e0       	ldi	r19, 0x00	; 0
    b5da:	40 e0       	ldi	r20, 0x00	; 0
    b5dc:	50 e4       	ldi	r21, 0x40	; 64
    b5de:	d4 01       	movw	r26, r8
    b5e0:	13 96       	adiw	r26, 0x03	; 3
    b5e2:	6d 91       	ld	r22, X+
    b5e4:	7d 91       	ld	r23, X+
    b5e6:	8d 91       	ld	r24, X+
    b5e8:	9c 91       	ld	r25, X
    b5ea:	16 97       	sbiw	r26, 0x06	; 6
    b5ec:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    b5f0:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b5f4:	86 2f       	mov	r24, r22
    b5f6:	98 e0       	ldi	r25, 0x08	; 8
    b5f8:	a9 2e       	mov	r10, r25
    b5fa:	28 e0       	ldi	r18, 0x08	; 8
    b5fc:	c2 2e       	mov	r12, r18
    b5fe:	24 e0       	ldi	r18, 0x04	; 4
    b600:	44 e0       	ldi	r20, 0x04	; 4
    b602:	6b 2d       	mov	r22, r11
    b604:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBCollides>
    b608:	88 23       	and	r24, r24
    b60a:	09 f4       	brne	.+2      	; 0xb60e <collision_detect_shot+0x2d6>
    b60c:	76 cf       	rjmp	.-276    	; 0xb4fa <collision_detect_shot+0x1c2>
        {
		    hit = hit | HIT_METAL;
    b60e:	11 60       	ori	r17, 0x01	; 1
    b610:	74 cf       	rjmp	.-280    	; 0xb4fa <collision_detect_shot+0x1c2>
        }
	}
	
	if (hit & HIT_ANGLE)
    b612:	12 ff       	sbrs	r17, 2
    b614:	0e c0       	rjmp	.+28     	; 0xb632 <collision_detect_shot+0x2fa>
	{
		recoil_sprite_fine(&shot->shared);
    b616:	c4 01       	movw	r24, r8
    b618:	0e 94 7f 56 	call	0xacfe	; 0xacfe <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    b61c:	b4 01       	movw	r22, r8
    b61e:	8f 2d       	mov	r24, r15
    b620:	0e 94 7b 59 	call	0xb2f6	; 0xb2f6 <richochet>
		shot->rebounds--;
    b624:	f4 01       	movw	r30, r8
    b626:	85 85       	ldd	r24, Z+13	; 0x0d
    b628:	81 50       	subi	r24, 0x01	; 1
    b62a:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    b62c:	81 11       	cpse	r24, r1
    b62e:	3a c0       	rjmp	.+116    	; 0xb6a4 <collision_detect_shot+0x36c>
    b630:	2e c0       	rjmp	.+92     	; 0xb68e <collision_detect_shot+0x356>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    b632:	11 ff       	sbrs	r17, 1
    b634:	29 c0       	rjmp	.+82     	; 0xb688 <collision_detect_shot+0x350>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    b636:	fe 01       	movw	r30, r28
    b638:	31 96       	adiw	r30, 0x01	; 1
    b63a:	7f 01       	movw	r14, r30
    b63c:	ed 0c       	add	r14, r13
    b63e:	f1 1c       	adc	r15, r1
    b640:	ed 0c       	add	r14, r13
    b642:	f1 1c       	adc	r15, r1
    b644:	d7 01       	movw	r26, r14
    b646:	6d 91       	ld	r22, X+
    b648:	7c 91       	ld	r23, X
    b64a:	88 e1       	ldi	r24, 0x18	; 24
    b64c:	9c e0       	ldi	r25, 0x0C	; 12
    b64e:	0e 94 3d 59 	call	0xb27a	; 0xb27a <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    b652:	d7 01       	movw	r26, r14
    b654:	ed 91       	ld	r30, X+
    b656:	fc 91       	ld	r31, X
    b658:	ec 54       	subi	r30, 0x4C	; 76
    b65a:	f3 4f       	sbci	r31, 0xF3	; 243
    b65c:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    b65e:	f4 01       	movw	r30, r8
    b660:	84 85       	ldd	r24, Z+12	; 0x0c
    b662:	81 50       	subi	r24, 0x01	; 1
    b664:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    b666:	81 11       	cpse	r24, r1
    b668:	0b c0       	rjmp	.+22     	; 0xb680 <collision_detect_shot+0x348>
		{
			init_shot_state(shot, shot->shot_type);
    b66a:	63 85       	ldd	r22, Z+11	; 0x0b
    b66c:	c4 01       	movw	r24, r8
    b66e:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
			player->active_shots--;
    b672:	d3 01       	movw	r26, r6
    b674:	51 96       	adiw	r26, 0x11	; 17
    b676:	8c 91       	ld	r24, X
    b678:	51 97       	sbiw	r26, 0x11	; 17
    b67a:	81 50       	subi	r24, 0x01	; 1
    b67c:	51 96       	adiw	r26, 0x11	; 17
    b67e:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    b680:	2f ed       	ldi	r18, 0xDF	; 223
    b682:	47 e1       	ldi	r20, 0x17	; 23
    b684:	61 e0       	ldi	r22, 0x01	; 1
    b686:	11 c0       	rjmp	.+34     	; 0xb6aa <collision_detect_shot+0x372>
	}
	else if (hit & HIT_METAL)
    b688:	10 ff       	sbrs	r17, 0
    b68a:	12 c0       	rjmp	.+36     	; 0xb6b0 <collision_detect_shot+0x378>
	{
        init_shot_state(shot, shot->shot_type);
    b68c:	f4 01       	movw	r30, r8
    b68e:	63 85       	ldd	r22, Z+11	; 0x0b
    b690:	c4 01       	movw	r24, r8
    b692:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
        player->active_shots--;
    b696:	d3 01       	movw	r26, r6
    b698:	51 96       	adiw	r26, 0x11	; 17
    b69a:	8c 91       	ld	r24, X
    b69c:	51 97       	sbiw	r26, 0x11	; 17
    b69e:	81 50       	subi	r24, 0x01	; 1
    b6a0:	51 96       	adiw	r26, 0x11	; 17
    b6a2:	8c 93       	st	X, r24
        SFX_METAL;
    b6a4:	2f ef       	ldi	r18, 0xFF	; 255
    b6a6:	47 e1       	ldi	r20, 0x17	; 23
    b6a8:	66 e0       	ldi	r22, 0x06	; 6
    b6aa:	84 e0       	ldi	r24, 0x04	; 4
    b6ac:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
	}
}
    b6b0:	0f 90       	pop	r0
    b6b2:	0f 90       	pop	r0
    b6b4:	0f 90       	pop	r0
    b6b6:	0f 90       	pop	r0
    b6b8:	0f 90       	pop	r0
    b6ba:	df 91       	pop	r29
    b6bc:	cf 91       	pop	r28
    b6be:	1f 91       	pop	r17
    b6c0:	0f 91       	pop	r16
    b6c2:	ff 90       	pop	r15
    b6c4:	ef 90       	pop	r14
    b6c6:	df 90       	pop	r13
    b6c8:	cf 90       	pop	r12
    b6ca:	bf 90       	pop	r11
    b6cc:	af 90       	pop	r10
    b6ce:	9f 90       	pop	r9
    b6d0:	8f 90       	pop	r8
    b6d2:	7f 90       	pop	r7
    b6d4:	6f 90       	pop	r6
    b6d6:	5f 90       	pop	r5
    b6d8:	4f 90       	pop	r4
    b6da:	3f 90       	pop	r3
    b6dc:	2f 90       	pop	r2
    b6de:	08 95       	ret

0000b6e0 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    b6e0:	fc 01       	movw	r30, r24
    b6e2:	8e e1       	ldi	r24, 0x1E	; 30
    b6e4:	48 9f       	mul	r20, r24
    b6e6:	a0 01       	movw	r20, r0
    b6e8:	11 24       	eor	r1, r1
    b6ea:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    b6ec:	64 0f       	add	r22, r20
    b6ee:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    b6f0:	21 11       	cpse	r18, r1
    b6f2:	09 c0       	rjmp	.+18     	; 0xb706 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    b6f4:	71 83       	std	Z+1, r23	; 0x01
    b6f6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b6f8:	cb 01       	movw	r24, r22
    b6fa:	01 96       	adiw	r24, 0x01	; 1
    b6fc:	93 83       	std	Z+3, r25	; 0x03
    b6fe:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b700:	6e 5f       	subi	r22, 0xFE	; 254
    b702:	7f 4f       	sbci	r23, 0xFF	; 255
    b704:	1c c0       	rjmp	.+56     	; 0xb73e <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    b706:	21 30       	cpi	r18, 0x01	; 1
    b708:	31 f4       	brne	.+12     	; 0xb716 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    b70a:	cb 01       	movw	r24, r22
    b70c:	02 96       	adiw	r24, 0x02	; 2
    b70e:	91 83       	std	Z+1, r25	; 0x01
    b710:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    b712:	4e 96       	adiw	r24, 0x1e	; 30
    b714:	07 c0       	rjmp	.+14     	; 0xb724 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    b716:	22 30       	cpi	r18, 0x02	; 2
    b718:	51 f4       	brne	.+20     	; 0xb72e <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    b71a:	cb 01       	movw	r24, r22
    b71c:	cc 96       	adiw	r24, 0x3c	; 60
    b71e:	91 83       	std	Z+1, r25	; 0x01
    b720:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b722:	01 96       	adiw	r24, 0x01	; 1
    b724:	93 83       	std	Z+3, r25	; 0x03
    b726:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b728:	62 5c       	subi	r22, 0xC2	; 194
    b72a:	7f 4f       	sbci	r23, 0xFF	; 255
    b72c:	08 c0       	rjmp	.+16     	; 0xb73e <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    b72e:	71 83       	std	Z+1, r23	; 0x01
    b730:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b732:	cb 01       	movw	r24, r22
    b734:	4e 96       	adiw	r24, 0x1e	; 30
    b736:	93 83       	std	Z+3, r25	; 0x03
    b738:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    b73a:	64 5c       	subi	r22, 0xC4	; 196
    b73c:	7f 4f       	sbci	r23, 0xFF	; 255
    b73e:	75 83       	std	Z+5, r23	; 0x05
    b740:	64 83       	std	Z+4, r22	; 0x04
    b742:	08 95       	ret

0000b744 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    b744:	1f 93       	push	r17
    b746:	cf 93       	push	r28
    b748:	df 93       	push	r29
    b74a:	fc 01       	movw	r30, r24
    b74c:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    b74e:	54 96       	adiw	r26, 0x14	; 20
    b750:	8c 91       	ld	r24, X
    b752:	54 97       	sbiw	r26, 0x14	; 20
    b754:	80 fd       	sbrc	r24, 0
    b756:	13 c0       	rjmp	.+38     	; 0xb77e <explode_player+0x3a>
    b758:	12 2f       	mov	r17, r18
    b75a:	64 2f       	mov	r22, r20
    b75c:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    b75e:	80 89       	ldd	r24, Z+16	; 0x10
    b760:	8f 5f       	subi	r24, 0xFF	; 255
    b762:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    b764:	87 85       	ldd	r24, Z+15	; 0x0f
    b766:	8f 5f       	subi	r24, 0xFF	; 255
    b768:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    b76a:	cf 01       	movw	r24, r30
    b76c:	0e 94 a8 54 	call	0xa950	; 0xa950 <render_score>
		kill_player(other_player, other_player_hud_x);
    b770:	61 2f       	mov	r22, r17
    b772:	ce 01       	movw	r24, r28
	}
}
    b774:	df 91       	pop	r29
    b776:	cf 91       	pop	r28
    b778:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    b77a:	0c 94 c1 58 	jmp	0xb182	; 0xb182 <kill_player>
	}
}
    b77e:	df 91       	pop	r29
    b780:	cf 91       	pop	r28
    b782:	1f 91       	pop	r17
    b784:	08 95       	ret

0000b786 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    b786:	2f 92       	push	r2
    b788:	3f 92       	push	r3
    b78a:	4f 92       	push	r4
    b78c:	5f 92       	push	r5
    b78e:	6f 92       	push	r6
    b790:	7f 92       	push	r7
    b792:	8f 92       	push	r8
    b794:	9f 92       	push	r9
    b796:	af 92       	push	r10
    b798:	bf 92       	push	r11
    b79a:	cf 92       	push	r12
    b79c:	df 92       	push	r13
    b79e:	ef 92       	push	r14
    b7a0:	ff 92       	push	r15
    b7a2:	0f 93       	push	r16
    b7a4:	1f 93       	push	r17
    b7a6:	cf 93       	push	r28
    b7a8:	df 93       	push	r29
    b7aa:	cd b7       	in	r28, 0x3d	; 61
    b7ac:	de b7       	in	r29, 0x3e	; 62
    b7ae:	2b 97       	sbiw	r28, 0x0b	; 11
    b7b0:	0f b6       	in	r0, 0x3f	; 63
    b7b2:	f8 94       	cli
    b7b4:	de bf       	out	0x3e, r29	; 62
    b7b6:	0f be       	out	0x3f, r0	; 63
    b7b8:	cd bf       	out	0x3d, r28	; 61
    b7ba:	4c 01       	movw	r8, r24
    b7bc:	06 2f       	mov	r16, r22
	int tiles[3] = {0,0,0};
    b7be:	1a 82       	std	Y+2, r1	; 0x02
    b7c0:	19 82       	std	Y+1, r1	; 0x01
    b7c2:	1c 82       	std	Y+4, r1	; 0x04
    b7c4:	1b 82       	std	Y+3, r1	; 0x03
    b7c6:	1e 82       	std	Y+6, r1	; 0x06
    b7c8:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b7ca:	20 e0       	ldi	r18, 0x00	; 0
    b7cc:	30 e0       	ldi	r19, 0x00	; 0
    b7ce:	40 e0       	ldi	r20, 0x00	; 0
    b7d0:	5e e3       	ldi	r21, 0x3E	; 62
    b7d2:	dc 01       	movw	r26, r24
    b7d4:	17 96       	adiw	r26, 0x07	; 7
    b7d6:	6d 91       	ld	r22, X+
    b7d8:	7d 91       	ld	r23, X+
    b7da:	8d 91       	ld	r24, X+
    b7dc:	9c 91       	ld	r25, X
    b7de:	1a 97       	sbiw	r26, 0x0a	; 10
    b7e0:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b7e4:	20 e0       	ldi	r18, 0x00	; 0
    b7e6:	30 e0       	ldi	r19, 0x00	; 0
    b7e8:	40 e4       	ldi	r20, 0x40	; 64
    b7ea:	50 e4       	ldi	r21, 0x40	; 64
    b7ec:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    b7f0:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b7f4:	16 2f       	mov	r17, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    b7f6:	20 e0       	ldi	r18, 0x00	; 0
    b7f8:	30 e0       	ldi	r19, 0x00	; 0
    b7fa:	40 e0       	ldi	r20, 0x00	; 0
    b7fc:	5e e3       	ldi	r21, 0x3E	; 62
    b7fe:	f4 01       	movw	r30, r8
    b800:	63 81       	ldd	r22, Z+3	; 0x03
    b802:	74 81       	ldd	r23, Z+4	; 0x04
    b804:	85 81       	ldd	r24, Z+5	; 0x05
    b806:	96 81       	ldd	r25, Z+6	; 0x06
    b808:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    b80c:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	u8 hit_water = 0;
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    b810:	d4 01       	movw	r26, r8
    b812:	2c 91       	ld	r18, X
    b814:	41 2f       	mov	r20, r17
    b816:	ce 01       	movw	r24, r28
    b818:	01 96       	adiw	r24, 0x01	; 1
    b81a:	0e 94 70 5b 	call	0xb6e0	; 0xb6e0 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b81e:	c4 01       	movw	r24, r8
    b820:	0e 94 30 58 	call	0xb060	; 0xb060 <collision_detect_boundries>
    b824:	88 23       	and	r24, r24
    b826:	39 f0       	breq	.+14     	; 0xb836 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    b828:	c4 01       	movw	r24, r8
    b82a:	0e 94 25 56 	call	0xac4a	; 0xac4a <recoil_sprite>
		player->shared.speed = 0;
    b82e:	f4 01       	movw	r30, r8
    b830:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    b832:	10 e0       	ldi	r17, 0x00	; 0
    b834:	36 c1       	rjmp	.+620    	; 0xbaa2 <collision_detect_player+0x31c>
    b836:	ce 01       	movw	r24, r28
    b838:	01 96       	adiw	r24, 0x01	; 1
    b83a:	3c 01       	movw	r6, r24
    b83c:	de 01       	movw	r26, r28
    b83e:	17 96       	adiw	r26, 0x07	; 7
    b840:	b8 87       	std	Y+8, r27	; 0x08
    b842:	af 83       	std	Y+7, r26	; 0x07
	char explode = 0;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b844:	10 e0       	ldi	r17, 0x00	; 0
    b846:	f1 2c       	mov	r15, r1
		}
		
		if (!hit_water)
		{
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    b848:	51 e4       	ldi	r21, 0x41	; 65
    b84a:	d5 2e       	mov	r13, r21
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    b84c:	6e e1       	ldi	r22, 0x1E	; 30
    b84e:	26 2e       	mov	r2, r22
    b850:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b852:	bb e0       	ldi	r27, 0x0B	; 11
    b854:	b0 0f       	add	r27, r16
    b856:	b9 87       	std	Y+9, r27	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b858:	06 5f       	subi	r16, 0xF6	; 246
    b85a:	0a 87       	std	Y+10, r16	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    b85c:	f3 01       	movw	r30, r6
    b85e:	40 80       	ld	r4, Z
    b860:	51 80       	ldd	r5, Z+1	; 0x01
    b862:	c2 01       	movw	r24, r4
    b864:	0e 94 17 57 	call	0xae2e	; 0xae2e <solid_directional_tile>
    b868:	88 23       	and	r24, r24
    b86a:	49 f1       	breq	.+82     	; 0xb8be <collision_detect_player+0x138>
    b86c:	d4 01       	movw	r26, r8
    b86e:	17 96       	adiw	r26, 0x07	; 7
    b870:	6d 91       	ld	r22, X+
    b872:	7d 91       	ld	r23, X+
    b874:	8d 91       	ld	r24, X+
    b876:	9c 91       	ld	r25, X
    b878:	1a 97       	sbiw	r26, 0x0a	; 10
    b87a:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b87e:	46 2f       	mov	r20, r22
    b880:	f4 01       	movw	r30, r8
    b882:	63 81       	ldd	r22, Z+3	; 0x03
    b884:	74 81       	ldd	r23, Z+4	; 0x04
    b886:	85 81       	ldd	r24, Z+5	; 0x05
    b888:	96 81       	ldd	r25, Z+6	; 0x06
    b88a:	4b 87       	std	Y+11, r20	; 0x0b
    b88c:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b890:	00 e1       	ldi	r16, 0x10	; 16
    b892:	20 e1       	ldi	r18, 0x10	; 16
    b894:	4b 85       	ldd	r20, Y+11	; 0x0b
    b896:	c2 01       	movw	r24, r4
    b898:	0e 94 2d 57 	call	0xae5a	; 0xae5a <collides_directional_tile>
    b89c:	88 23       	and	r24, r24
    b89e:	79 f0       	breq	.+30     	; 0xb8be <collision_detect_player+0x138>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    b8a0:	d4 01       	movw	r26, r8
    b8a2:	1b 96       	adiw	r26, 0x0b	; 11
    b8a4:	8c 91       	ld	r24, X
    b8a6:	89 30       	cpi	r24, 0x09	; 9
    b8a8:	21 f4       	brne	.+8      	; 0xb8b2 <collision_detect_player+0x12c>
    b8aa:	c4 01       	movw	r24, r8
    b8ac:	0e 94 25 56 	call	0xac4a	; 0xac4a <recoil_sprite>
    b8b0:	03 c0       	rjmp	.+6      	; 0xb8b8 <collision_detect_player+0x132>
    b8b2:	c4 01       	movw	r24, r8
    b8b4:	0e 94 7f 56 	call	0xacfe	; 0xacfe <recoil_sprite_fine>
			player->shared.speed = 0;
    b8b8:	f4 01       	movw	r30, r8
    b8ba:	11 82       	std	Z+1, r1	; 0x01
    b8bc:	dd c0       	rjmp	.+442    	; 0xba78 <collision_detect_player+0x2f2>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    b8be:	c2 01       	movw	r24, r4
    b8c0:	0e 94 e3 56 	call	0xadc6	; 0xadc6 <solid_square_tile>
    b8c4:	88 23       	and	r24, r24
    b8c6:	91 f1       	breq	.+100    	; 0xb92c <collision_detect_player+0x1a6>
    b8c8:	c2 01       	movw	r24, r4
    b8ca:	b1 01       	movw	r22, r2
    b8cc:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b8d0:	6d 5f       	subi	r22, 0xFD	; 253
    b8d2:	7f 4f       	sbci	r23, 0xFF	; 255
    b8d4:	e6 2e       	mov	r14, r22
    b8d6:	ee 0c       	add	r14, r14
    b8d8:	ee 0c       	add	r14, r14
    b8da:	ee 0c       	add	r14, r14
    b8dc:	08 2f       	mov	r16, r24
    b8de:	00 0f       	add	r16, r16
    b8e0:	00 0f       	add	r16, r16
    b8e2:	00 0f       	add	r16, r16
    b8e4:	d4 01       	movw	r26, r8
    b8e6:	17 96       	adiw	r26, 0x07	; 7
    b8e8:	6d 91       	ld	r22, X+
    b8ea:	7d 91       	ld	r23, X+
    b8ec:	8d 91       	ld	r24, X+
    b8ee:	9c 91       	ld	r25, X
    b8f0:	1a 97       	sbiw	r26, 0x0a	; 10
    b8f2:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b8f6:	b6 2e       	mov	r11, r22
    b8f8:	f4 01       	movw	r30, r8
    b8fa:	63 81       	ldd	r22, Z+3	; 0x03
    b8fc:	74 81       	ldd	r23, Z+4	; 0x04
    b8fe:	85 81       	ldd	r24, Z+5	; 0x05
    b900:	96 81       	ldd	r25, Z+6	; 0x06
    b902:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b906:	86 2f       	mov	r24, r22
    b908:	38 e0       	ldi	r19, 0x08	; 8
    b90a:	a3 2e       	mov	r10, r19
    b90c:	48 e0       	ldi	r20, 0x08	; 8
    b90e:	c4 2e       	mov	r12, r20
    b910:	20 e1       	ldi	r18, 0x10	; 16
    b912:	40 e1       	ldi	r20, 0x10	; 16
    b914:	6b 2d       	mov	r22, r11
    b916:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBCollides>
    b91a:	88 23       	and	r24, r24
    b91c:	39 f0       	breq	.+14     	; 0xb92c <collision_detect_player+0x1a6>
		{
			recoil_sprite(&player->shared);
    b91e:	c4 01       	movw	r24, r8
    b920:	0e 94 25 56 	call	0xac4a	; 0xac4a <recoil_sprite>
			player->shared.speed = 0;
    b924:	d4 01       	movw	r26, r8
    b926:	11 96       	adiw	r26, 0x01	; 1
    b928:	1c 92       	st	X, r1
    b92a:	a6 c0       	rjmp	.+332    	; 0xba78 <collision_detect_player+0x2f2>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    b92c:	f2 01       	movw	r30, r4
    b92e:	ec 54       	subi	r30, 0x4C	; 76
    b930:	f3 4f       	sbci	r31, 0xF3	; 243
    b932:	81 81       	ldd	r24, Z+1	; 0x01
    b934:	8d 34       	cpi	r24, 0x4D	; 77
    b936:	81 f5       	brne	.+96     	; 0xb998 <collision_detect_player+0x212>
    b938:	c2 01       	movw	r24, r4
    b93a:	b1 01       	movw	r22, r2
    b93c:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b940:	6d 5f       	subi	r22, 0xFD	; 253
    b942:	7f 4f       	sbci	r23, 0xFF	; 255
    b944:	e6 2e       	mov	r14, r22
    b946:	ee 0c       	add	r14, r14
    b948:	ee 0c       	add	r14, r14
    b94a:	ee 0c       	add	r14, r14
    b94c:	08 2f       	mov	r16, r24
    b94e:	00 0f       	add	r16, r16
    b950:	00 0f       	add	r16, r16
    b952:	00 0f       	add	r16, r16
    b954:	f4 01       	movw	r30, r8
    b956:	67 81       	ldd	r22, Z+7	; 0x07
    b958:	70 85       	ldd	r23, Z+8	; 0x08
    b95a:	81 85       	ldd	r24, Z+9	; 0x09
    b95c:	92 85       	ldd	r25, Z+10	; 0x0a
    b95e:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b962:	b6 2e       	mov	r11, r22
    b964:	d4 01       	movw	r26, r8
    b966:	13 96       	adiw	r26, 0x03	; 3
    b968:	6d 91       	ld	r22, X+
    b96a:	7d 91       	ld	r23, X+
    b96c:	8d 91       	ld	r24, X+
    b96e:	9c 91       	ld	r25, X
    b970:	16 97       	sbiw	r26, 0x06	; 6
    b972:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b976:	86 2f       	mov	r24, r22
    b978:	98 e0       	ldi	r25, 0x08	; 8
    b97a:	a9 2e       	mov	r10, r25
    b97c:	28 e0       	ldi	r18, 0x08	; 8
    b97e:	c2 2e       	mov	r12, r18
    b980:	20 e1       	ldi	r18, 0x10	; 16
    b982:	40 e1       	ldi	r20, 0x10	; 16
    b984:	6b 2d       	mov	r22, r11
    b986:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBCollides>
    b98a:	88 23       	and	r24, r24
    b98c:	09 f4       	brne	.+2      	; 0xb990 <collision_detect_player+0x20a>
    b98e:	74 c0       	rjmp	.+232    	; 0xba78 <collision_detect_player+0x2f2>
		{
			player->max_speed = WATER_SPEED;
    b990:	89 e1       	ldi	r24, 0x19	; 25
    b992:	f4 01       	movw	r30, r8
    b994:	80 8f       	std	Z+24, r24	; 0x18
    b996:	7a c0       	rjmp	.+244    	; 0xba8c <collision_detect_player+0x306>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    b998:	8c 32       	cpi	r24, 0x2C	; 44
    b99a:	f1 f4       	brne	.+60     	; 0xb9d8 <collision_detect_player+0x252>
    b99c:	c2 01       	movw	r24, r4
    b99e:	b1 01       	movw	r22, r2
    b9a0:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    b9a4:	6d 5f       	subi	r22, 0xFD	; 253
    b9a6:	7f 4f       	sbci	r23, 0xFF	; 255
    b9a8:	e6 2e       	mov	r14, r22
    b9aa:	ee 0c       	add	r14, r14
    b9ac:	ee 0c       	add	r14, r14
    b9ae:	ee 0c       	add	r14, r14
    b9b0:	08 2f       	mov	r16, r24
    b9b2:	00 0f       	add	r16, r16
    b9b4:	00 0f       	add	r16, r16
    b9b6:	00 0f       	add	r16, r16
    b9b8:	d4 01       	movw	r26, r8
    b9ba:	17 96       	adiw	r26, 0x07	; 7
    b9bc:	6d 91       	ld	r22, X+
    b9be:	7d 91       	ld	r23, X+
    b9c0:	8d 91       	ld	r24, X+
    b9c2:	9c 91       	ld	r25, X
    b9c4:	1a 97       	sbiw	r26, 0x0a	; 10
    b9c6:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    b9ca:	b6 2e       	mov	r11, r22
    b9cc:	f4 01       	movw	r30, r8
    b9ce:	63 81       	ldd	r22, Z+3	; 0x03
    b9d0:	74 81       	ldd	r23, Z+4	; 0x04
    b9d2:	85 81       	ldd	r24, Z+5	; 0x05
    b9d4:	96 81       	ldd	r25, Z+6	; 0x06
    b9d6:	cd cf       	rjmp	.-102    	; 0xb972 <collision_detect_player+0x1ec>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    b9d8:	87 30       	cpi	r24, 0x07	; 7
    b9da:	91 f4       	brne	.+36     	; 0xba00 <collision_detect_player+0x27a>
    b9dc:	d4 01       	movw	r26, r8
    b9de:	54 96       	adiw	r26, 0x14	; 20
    b9e0:	8c 91       	ld	r24, X
    b9e2:	54 97       	sbiw	r26, 0x14	; 20
    b9e4:	80 fd       	sbrc	r24, 0
    b9e6:	48 c0       	rjmp	.+144    	; 0xba78 <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b9e8:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    b9ea:	58 96       	adiw	r26, 0x18	; 24
    b9ec:	dc 92       	st	X, r13
    b9ee:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    b9f0:	e1 e0       	ldi	r30, 0x01	; 1
    b9f2:	5a 96       	adiw	r26, 0x1a	; 26
    b9f4:	ec 93       	st	X, r30
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b9f6:	44 e8       	ldi	r20, 0x84	; 132
    b9f8:	59 e7       	ldi	r21, 0x79	; 121
    b9fa:	61 e0       	ldi	r22, 0x01	; 1
    b9fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    b9fe:	10 c0       	rjmp	.+32     	; 0xba20 <collision_detect_player+0x29a>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    ba00:	89 30       	cpi	r24, 0x09	; 9
    ba02:	11 f5       	brne	.+68     	; 0xba48 <collision_detect_player+0x2c2>
    ba04:	d4 01       	movw	r26, r8
    ba06:	54 96       	adiw	r26, 0x14	; 20
    ba08:	8c 91       	ld	r24, X
    ba0a:	54 97       	sbiw	r26, 0x14	; 20
    ba0c:	80 fd       	sbrc	r24, 0
    ba0e:	34 c0       	rjmp	.+104    	; 0xba78 <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    ba10:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    ba12:	e1 e0       	ldi	r30, 0x01	; 1
    ba14:	59 96       	adiw	r26, 0x19	; 25
    ba16:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    ba18:	4e e7       	ldi	r20, 0x7E	; 126
    ba1a:	59 e7       	ldi	r21, 0x79	; 121
    ba1c:	61 e0       	ldi	r22, 0x01	; 1
    ba1e:	89 85       	ldd	r24, Y+9	; 0x09
    ba20:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    ba24:	d3 01       	movw	r26, r6
    ba26:	8d 91       	ld	r24, X+
    ba28:	9c 91       	ld	r25, X
    ba2a:	b1 01       	movw	r22, r2
    ba2c:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    ba30:	6d 5f       	subi	r22, 0xFD	; 253
    ba32:	40 e0       	ldi	r20, 0x00	; 0
    ba34:	50 e0       	ldi	r21, 0x00	; 0
    ba36:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
			SFX_ITEM;
    ba3a:	2f ef       	ldi	r18, 0xFF	; 255
    ba3c:	47 e1       	ldi	r20, 0x17	; 23
    ba3e:	63 e0       	ldi	r22, 0x03	; 3
    ba40:	84 e0       	ldi	r24, 0x04	; 4
    ba42:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
    ba46:	18 c0       	rjmp	.+48     	; 0xba78 <collision_detect_player+0x2f2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    ba48:	88 30       	cpi	r24, 0x08	; 8
    ba4a:	b1 f4       	brne	.+44     	; 0xba78 <collision_detect_player+0x2f2>
    ba4c:	d4 01       	movw	r26, r8
    ba4e:	54 96       	adiw	r26, 0x14	; 20
    ba50:	8c 91       	ld	r24, X
    ba52:	80 fd       	sbrc	r24, 0
    ba54:	11 c0       	rjmp	.+34     	; 0xba78 <collision_detect_player+0x2f2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    ba56:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    ba58:	c2 01       	movw	r24, r4
    ba5a:	b1 01       	movw	r22, r2
    ba5c:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    ba60:	6d 5f       	subi	r22, 0xFD	; 253
    ba62:	40 e0       	ldi	r20, 0x00	; 0
    ba64:	50 e0       	ldi	r21, 0x00	; 0
    ba66:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
			SFX_ITEM;
    ba6a:	2f ef       	ldi	r18, 0xFF	; 255
    ba6c:	47 e1       	ldi	r20, 0x17	; 23
    ba6e:	63 e0       	ldi	r22, 0x03	; 3
    ba70:	84 e0       	ldi	r24, 0x04	; 4
    ba72:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
			explode = 1;
    ba76:	11 e0       	ldi	r17, 0x01	; 1
		}
		
		if (!hit_water)
    ba78:	f1 10       	cpse	r15, r1
    ba7a:	08 c0       	rjmp	.+16     	; 0xba8c <collision_detect_player+0x306>
		{
			player->max_speed = MAX_SPEED;
    ba7c:	82 e3       	ldi	r24, 0x32	; 50
    ba7e:	f4 01       	movw	r30, r8
    ba80:	80 8f       	std	Z+24, r24	; 0x18
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    ba82:	82 8d       	ldd	r24, Z+26	; 0x1a
    ba84:	88 23       	and	r24, r24
    ba86:	21 f0       	breq	.+8      	; 0xba90 <collision_detect_player+0x30a>
    ba88:	d0 8e       	std	Z+24, r13	; 0x18
    ba8a:	02 c0       	rjmp	.+4      	; 0xba90 <collision_detect_player+0x30a>
    ba8c:	ff 24       	eor	r15, r15
    ba8e:	f3 94       	inc	r15
    ba90:	92 e0       	ldi	r25, 0x02	; 2
    ba92:	69 0e       	add	r6, r25
    ba94:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    ba96:	af 81       	ldd	r26, Y+7	; 0x07
    ba98:	b8 85       	ldd	r27, Y+8	; 0x08
    ba9a:	6a 16       	cp	r6, r26
    ba9c:	7b 06       	cpc	r7, r27
    ba9e:	09 f0       	breq	.+2      	; 0xbaa2 <collision_detect_player+0x31c>
    baa0:	dd ce       	rjmp	.-582    	; 0xb85c <collision_detect_player+0xd6>
			player->max_speed = MAX_SPEED;
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	return explode;
}
    baa2:	81 2f       	mov	r24, r17
    baa4:	2b 96       	adiw	r28, 0x0b	; 11
    baa6:	0f b6       	in	r0, 0x3f	; 63
    baa8:	f8 94       	cli
    baaa:	de bf       	out	0x3e, r29	; 62
    baac:	0f be       	out	0x3f, r0	; 63
    baae:	cd bf       	out	0x3d, r28	; 61
    bab0:	df 91       	pop	r29
    bab2:	cf 91       	pop	r28
    bab4:	1f 91       	pop	r17
    bab6:	0f 91       	pop	r16
    bab8:	ff 90       	pop	r15
    baba:	ef 90       	pop	r14
    babc:	df 90       	pop	r13
    babe:	cf 90       	pop	r12
    bac0:	bf 90       	pop	r11
    bac2:	af 90       	pop	r10
    bac4:	9f 90       	pop	r9
    bac6:	8f 90       	pop	r8
    bac8:	7f 90       	pop	r7
    baca:	6f 90       	pop	r6
    bacc:	5f 90       	pop	r5
    bace:	4f 90       	pop	r4
    bad0:	3f 90       	pop	r3
    bad2:	2f 90       	pop	r2
    bad4:	08 95       	ret

0000bad6 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    bad6:	ef 92       	push	r14
    bad8:	ff 92       	push	r15
    bada:	1f 93       	push	r17
    badc:	cf 93       	push	r28
    bade:	df 93       	push	r29
    bae0:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bae2:	c0 e0       	ldi	r28, 0x00	; 0
    bae4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    bae6:	8e e1       	ldi	r24, 0x1E	; 30
    bae8:	e8 2e       	mov	r14, r24
    baea:	f1 2c       	mov	r15, r1
    baec:	ce 01       	movw	r24, r28
    baee:	b7 01       	movw	r22, r14
    baf0:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
		y = 3 + i / 30;
    baf4:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    baf6:	11 23       	and	r17, r17
    baf8:	19 f0       	breq	.+6      	; 0xbb00 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    bafa:	41 e2       	ldi	r20, 0x21	; 33
    bafc:	5a e7       	ldi	r21, 0x7A	; 122
    bafe:	2d c0       	rjmp	.+90     	; 0xbb5a <load_level_tiles+0x84>
    bb00:	fe 01       	movw	r30, r28
    bb02:	ec 54       	subi	r30, 0x4C	; 76
    bb04:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    bb06:	91 81       	ldd	r25, Z+1	; 0x01
    bb08:	97 30       	cpi	r25, 0x07	; 7
    bb0a:	99 f1       	breq	.+102    	; 0xbb72 <load_level_tiles+0x9c>
    bb0c:	88 f4       	brcc	.+34     	; 0xbb30 <load_level_tiles+0x5a>
    bb0e:	93 30       	cpi	r25, 0x03	; 3
    bb10:	39 f1       	breq	.+78     	; 0xbb60 <load_level_tiles+0x8a>
    bb12:	40 f4       	brcc	.+16     	; 0xbb24 <load_level_tiles+0x4e>
    bb14:	91 30       	cpi	r25, 0x01	; 1
    bb16:	f9 f0       	breq	.+62     	; 0xbb56 <load_level_tiles+0x80>
    bb18:	92 30       	cpi	r25, 0x02	; 2
    bb1a:	09 f0       	breq	.+2      	; 0xbb1e <load_level_tiles+0x48>
    bb1c:	3f c0       	rjmp	.+126    	; 0xbb9c <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    bb1e:	47 e8       	ldi	r20, 0x87	; 135
    bb20:	59 e7       	ldi	r21, 0x79	; 121
    bb22:	1b c0       	rjmp	.+54     	; 0xbb5a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb24:	95 30       	cpi	r25, 0x05	; 5
    bb26:	f9 f0       	breq	.+62     	; 0xbb66 <load_level_tiles+0x90>
    bb28:	08 f5       	brcc	.+66     	; 0xbb6c <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    bb2a:	4c e6       	ldi	r20, 0x6C	; 108
    bb2c:	59 e7       	ldi	r21, 0x79	; 121
    bb2e:	15 c0       	rjmp	.+42     	; 0xbb5a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb30:	9c 32       	cpi	r25, 0x2C	; 44
    bb32:	59 f1       	breq	.+86     	; 0xbb8a <load_level_tiles+0xb4>
    bb34:	38 f4       	brcc	.+14     	; 0xbb44 <load_level_tiles+0x6e>
    bb36:	98 30       	cpi	r25, 0x08	; 8
    bb38:	f9 f0       	breq	.+62     	; 0xbb78 <load_level_tiles+0xa2>
    bb3a:	99 30       	cpi	r25, 0x09	; 9
    bb3c:	79 f5       	brne	.+94     	; 0xbb9c <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    bb3e:	4e e7       	ldi	r20, 0x7E	; 126
    bb40:	59 e7       	ldi	r21, 0x79	; 121
    bb42:	0b c0       	rjmp	.+22     	; 0xbb5a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb44:	92 34       	cpi	r25, 0x42	; 66
    bb46:	d9 f0       	breq	.+54     	; 0xbb7e <load_level_tiles+0xa8>
    bb48:	9d 34       	cpi	r25, 0x4D	; 77
    bb4a:	e1 f0       	breq	.+56     	; 0xbb84 <load_level_tiles+0xae>
    bb4c:	97 33       	cpi	r25, 0x37	; 55
    bb4e:	31 f5       	brne	.+76     	; 0xbb9c <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    bb50:	40 e6       	ldi	r20, 0x60	; 96
    bb52:	59 e7       	ldi	r21, 0x79	; 121
    bb54:	02 c0       	rjmp	.+4      	; 0xbb5a <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    bb56:	4a e8       	ldi	r20, 0x8A	; 138
    bb58:	59 e7       	ldi	r21, 0x79	; 121
    bb5a:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
    bb5e:	22 c0       	rjmp	.+68     	; 0xbba4 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    bb60:	42 e7       	ldi	r20, 0x72	; 114
    bb62:	59 e7       	ldi	r21, 0x79	; 121
    bb64:	fa cf       	rjmp	.-12     	; 0xbb5a <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    bb66:	49 e6       	ldi	r20, 0x69	; 105
    bb68:	59 e7       	ldi	r21, 0x79	; 121
    bb6a:	f7 cf       	rjmp	.-18     	; 0xbb5a <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    bb6c:	4f e6       	ldi	r20, 0x6F	; 111
    bb6e:	59 e7       	ldi	r21, 0x79	; 121
    bb70:	f4 cf       	rjmp	.-24     	; 0xbb5a <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    bb72:	44 e8       	ldi	r20, 0x84	; 132
    bb74:	59 e7       	ldi	r21, 0x79	; 121
    bb76:	f1 cf       	rjmp	.-30     	; 0xbb5a <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    bb78:	41 e8       	ldi	r20, 0x81	; 129
    bb7a:	59 e7       	ldi	r21, 0x79	; 121
    bb7c:	ee cf       	rjmp	.-36     	; 0xbb5a <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    bb7e:	43 e6       	ldi	r20, 0x63	; 99
    bb80:	59 e7       	ldi	r21, 0x79	; 121
    bb82:	eb cf       	rjmp	.-42     	; 0xbb5a <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    bb84:	46 e6       	ldi	r20, 0x66	; 102
    bb86:	59 e7       	ldi	r21, 0x79	; 121
    bb88:	e8 cf       	rjmp	.-48     	; 0xbb5a <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    bb8a:	46 e6       	ldi	r20, 0x66	; 102
    bb8c:	59 e7       	ldi	r21, 0x79	; 121
    bb8e:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
    bb92:	d0 93 36 10 	sts	0x1036, r29
    bb96:	c0 93 35 10 	sts	0x1035, r28
    bb9a:	04 c0       	rjmp	.+8      	; 0xbba4 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    bb9c:	40 e0       	ldi	r20, 0x00	; 0
    bb9e:	50 e0       	ldi	r21, 0x00	; 0
    bba0:	0e 94 19 41 	call	0x8232	; 0x8232 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bba4:	21 96       	adiw	r28, 0x01	; 1
    bba6:	ce 3e       	cpi	r28, 0xEE	; 238
    bba8:	82 e0       	ldi	r24, 0x02	; 2
    bbaa:	d8 07       	cpc	r29, r24
    bbac:	09 f0       	breq	.+2      	; 0xbbb0 <load_level_tiles+0xda>
    bbae:	9e cf       	rjmp	.-196    	; 0xbaec <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    bbb0:	df 91       	pop	r29
    bbb2:	cf 91       	pop	r28
    bbb4:	1f 91       	pop	r17
    bbb6:	ff 90       	pop	r15
    bbb8:	ef 90       	pop	r14
    bbba:	08 95       	ret

0000bbbc <load_level>:

void load_level(int level_number)
{
    bbbc:	9f 92       	push	r9
    bbbe:	af 92       	push	r10
    bbc0:	bf 92       	push	r11
    bbc2:	cf 92       	push	r12
    bbc4:	df 92       	push	r13
    bbc6:	ef 92       	push	r14
    bbc8:	ff 92       	push	r15
    bbca:	0f 93       	push	r16
    bbcc:	1f 93       	push	r17
    bbce:	cf 93       	push	r28
    bbd0:	df 93       	push	r29
    bbd2:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    bbd4:	8e ee       	ldi	r24, 0xEE	; 238
    bbd6:	92 e0       	ldi	r25, 0x02	; 2
    bbd8:	c8 9f       	mul	r28, r24
    bbda:	70 01       	movw	r14, r0
    bbdc:	c9 9f       	mul	r28, r25
    bbde:	f0 0c       	add	r15, r0
    bbe0:	d8 9f       	mul	r29, r24
    bbe2:	f0 0c       	add	r15, r0
    bbe4:	11 24       	eor	r1, r1

	game.scope_counter = 0;
    bbe6:	10 92 16 0c 	sts	0x0C16, r1
    bbea:	10 92 15 0c 	sts	0x0C15, r1
	init_tile_animations(&tile_animations);
    bbee:	88 e1       	ldi	r24, 0x18	; 24
    bbf0:	9c e0       	ldi	r25, 0x0C	; 12
    bbf2:	0e 94 a3 51 	call	0xa346	; 0xa346 <init_tile_animations>
	init_scope_animation(&scope_animation);
    bbf6:	89 e2       	ldi	r24, 0x29	; 41
    bbf8:	90 e1       	ldi	r25, 0x10	; 16
    bbfa:	0e 94 ca 51 	call	0xa394	; 0xa394 <init_scope_animation>
	init_sub_animation(&sub_animation);
    bbfe:	8b e1       	ldi	r24, 0x1B	; 27
    bc00:	90 e1       	ldi	r25, 0x10	; 16
    bc02:	0e 94 e2 51 	call	0xa3c4	; 0xa3c4 <init_sub_animation>
	game.current_screen = LEVEL;
    bc06:	83 e0       	ldi	r24, 0x03	; 3
    bc08:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    bc0c:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
	game.current_level = level_number;
    bc10:	c0 93 0c 0c 	sts	0x0C0C, r28
    bc14:	85 eb       	ldi	r24, 0xB5	; 181
    bc16:	c8 2e       	mov	r12, r24
    bc18:	8c e0       	ldi	r24, 0x0C	; 12
    bc1a:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    bc1c:	c0 e0       	ldi	r28, 0x00	; 0
    bc1e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    bc20:	0e e1       	ldi	r16, 0x1E	; 30
    bc22:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    bc24:	92 e3       	ldi	r25, 0x32	; 50
    bc26:	99 2e       	mov	r9, r25
    bc28:	fe 01       	movw	r30, r28
    bc2a:	ee 0d       	add	r30, r14
    bc2c:	ff 1d       	adc	r31, r15
    bc2e:	ee 57       	subi	r30, 0x7E	; 126
    bc30:	f6 4e       	sbci	r31, 0xE6	; 230
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    bc32:	e4 91       	lpm	r30, Z
    bc34:	56 01       	movw	r10, r12
    bc36:	d6 01       	movw	r26, r12
    bc38:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    bc3a:	e8 35       	cpi	r30, 0x58	; 88
    bc3c:	01 f5       	brne	.+64     	; 0xbc7e <load_level+0xc2>
		{
			player1.spawn_x = (i % 30) * 8;
    bc3e:	ce 01       	movw	r24, r28
    bc40:	b8 01       	movw	r22, r16
    bc42:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    bc46:	88 0f       	add	r24, r24
    bc48:	88 0f       	add	r24, r24
    bc4a:	88 0f       	add	r24, r24
    bc4c:	80 93 47 0c 	sts	0x0C47, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    bc50:	6d 5f       	subi	r22, 0xFD	; 253
    bc52:	7f 4f       	sbci	r23, 0xFF	; 255
    bc54:	66 0f       	add	r22, r22
    bc56:	66 0f       	add	r22, r22
    bc58:	66 0f       	add	r22, r22
    bc5a:	60 93 48 0c 	sts	0x0C48, r22
			player1.level_score = 0;
    bc5e:	10 92 45 0c 	sts	0x0C45, r1
			player1.has_over_speed = false;
    bc62:	10 92 4f 0c 	sts	0x0C4F, r1
			player1.has_rocket = false;
    bc66:	10 92 4e 0c 	sts	0x0C4E, r1
			player1.max_speed = MAX_SPEED;
    bc6a:	90 92 4d 0c 	sts	0x0C4D, r9
			player_init_shot_state(&player1);
    bc6e:	85 e3       	ldi	r24, 0x35	; 53
    bc70:	9c e0       	ldi	r25, 0x0C	; 12
    bc72:	0e 94 bc 52 	call	0xa578	; 0xa578 <player_init_shot_state>
			player_spawn(&player1);
    bc76:	85 e3       	ldi	r24, 0x35	; 53
    bc78:	9c e0       	ldi	r25, 0x0C	; 12
    bc7a:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <player_spawn>
    bc7e:	bf ef       	ldi	r27, 0xFF	; 255
    bc80:	cb 1a       	sub	r12, r27
    bc82:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    bc84:	f5 01       	movw	r30, r10
    bc86:	80 81       	ld	r24, Z
    bc88:	83 36       	cpi	r24, 0x63	; 99
    bc8a:	01 f5       	brne	.+64     	; 0xbccc <load_level+0x110>
		{
			player2.spawn_x = (i % 30) * 8;
    bc8c:	ce 01       	movw	r24, r28
    bc8e:	b8 01       	movw	r22, r16
    bc90:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    bc94:	88 0f       	add	r24, r24
    bc96:	88 0f       	add	r24, r24
    bc98:	88 0f       	add	r24, r24
    bc9a:	80 93 b5 0f 	sts	0x0FB5, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    bc9e:	6d 5f       	subi	r22, 0xFD	; 253
    bca0:	7f 4f       	sbci	r23, 0xFF	; 255
    bca2:	66 0f       	add	r22, r22
    bca4:	66 0f       	add	r22, r22
    bca6:	66 0f       	add	r22, r22
    bca8:	60 93 b6 0f 	sts	0x0FB6, r22
			player2.level_score = 0;
    bcac:	10 92 b3 0f 	sts	0x0FB3, r1
			player2.has_over_speed = false;
    bcb0:	10 92 bd 0f 	sts	0x0FBD, r1
			player2.has_rocket = false;
    bcb4:	10 92 bc 0f 	sts	0x0FBC, r1
			player2.max_speed = MAX_SPEED;
    bcb8:	90 92 bb 0f 	sts	0x0FBB, r9
			player_init_shot_state(&player2);
    bcbc:	83 ea       	ldi	r24, 0xA3	; 163
    bcbe:	9f e0       	ldi	r25, 0x0F	; 15
    bcc0:	0e 94 bc 52 	call	0xa578	; 0xa578 <player_init_shot_state>
			player_spawn(&player2);
    bcc4:	83 ea       	ldi	r24, 0xA3	; 163
    bcc6:	9f e0       	ldi	r25, 0x0F	; 15
    bcc8:	0e 94 e1 52 	call	0xa5c2	; 0xa5c2 <player_spawn>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    bccc:	21 96       	adiw	r28, 0x01	; 1
    bcce:	ce 3e       	cpi	r28, 0xEE	; 238
    bcd0:	f2 e0       	ldi	r31, 0x02	; 2
    bcd2:	df 07       	cpc	r29, r31
    bcd4:	09 f0       	breq	.+2      	; 0xbcd8 <load_level+0x11c>
    bcd6:	a8 cf       	rjmp	.-176    	; 0xbc28 <load_level+0x6c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    bcd8:	60 e0       	ldi	r22, 0x00	; 0
    bcda:	85 e3       	ldi	r24, 0x35	; 53
    bcdc:	9c e0       	ldi	r25, 0x0C	; 12
    bcde:	0e 94 8b 54 	call	0xa916	; 0xa916 <render_hud>
	render_hud(&player2, 15);
    bce2:	6f e0       	ldi	r22, 0x0F	; 15
    bce4:	83 ea       	ldi	r24, 0xA3	; 163
    bce6:	9f e0       	ldi	r25, 0x0F	; 15
    bce8:	0e 94 8b 54 	call	0xa916	; 0xa916 <render_hud>
	render_score(&player1, 0);
    bcec:	60 e0       	ldi	r22, 0x00	; 0
    bcee:	85 e3       	ldi	r24, 0x35	; 53
    bcf0:	9c e0       	ldi	r25, 0x0C	; 12
    bcf2:	0e 94 a8 54 	call	0xa950	; 0xa950 <render_score>
	render_score(&player2, 15);
    bcf6:	6f e0       	ldi	r22, 0x0F	; 15
    bcf8:	83 ea       	ldi	r24, 0xA3	; 163
    bcfa:	9f e0       	ldi	r25, 0x0F	; 15
    bcfc:	0e 94 a8 54 	call	0xa950	; 0xa950 <render_score>
	Print(14, 0, (char*) strVertSep);
    bd00:	47 ee       	ldi	r20, 0xE7	; 231
    bd02:	52 e0       	ldi	r21, 0x02	; 2
    bd04:	60 e0       	ldi	r22, 0x00	; 0
    bd06:	70 e0       	ldi	r23, 0x00	; 0
    bd08:	8e e0       	ldi	r24, 0x0E	; 14
    bd0a:	90 e0       	ldi	r25, 0x00	; 0
    bd0c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(14, 1, (char*) strVertSep);
    bd10:	47 ee       	ldi	r20, 0xE7	; 231
    bd12:	52 e0       	ldi	r21, 0x02	; 2
    bd14:	61 e0       	ldi	r22, 0x01	; 1
    bd16:	70 e0       	ldi	r23, 0x00	; 0
    bd18:	8e e0       	ldi	r24, 0x0E	; 14
    bd1a:	90 e0       	ldi	r25, 0x00	; 0
    bd1c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(14, 2, (char*) strVertSep);
    bd20:	47 ee       	ldi	r20, 0xE7	; 231
    bd22:	52 e0       	ldi	r21, 0x02	; 2
    bd24:	62 e0       	ldi	r22, 0x02	; 2
    bd26:	70 e0       	ldi	r23, 0x00	; 0
    bd28:	8e e0       	ldi	r24, 0x0E	; 14
    bd2a:	90 e0       	ldi	r25, 0x00	; 0
    bd2c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	load_level_tiles(false);
    bd30:	80 e0       	ldi	r24, 0x00	; 0
    bd32:	0e 94 6b 5d 	call	0xbad6	; 0xbad6 <load_level_tiles>
	SFX_LEVEL_START;
    bd36:	2f ef       	ldi	r18, 0xFF	; 255
    bd38:	47 e1       	ldi	r20, 0x17	; 23
    bd3a:	65 e0       	ldi	r22, 0x05	; 5
    bd3c:	84 e0       	ldi	r24, 0x04	; 4
}
    bd3e:	df 91       	pop	r29
    bd40:	cf 91       	pop	r28
    bd42:	1f 91       	pop	r17
    bd44:	0f 91       	pop	r16
    bd46:	ff 90       	pop	r15
    bd48:	ef 90       	pop	r14
    bd4a:	df 90       	pop	r13
    bd4c:	cf 90       	pop	r12
    bd4e:	bf 90       	pop	r11
    bd50:	af 90       	pop	r10
    bd52:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
	SFX_LEVEL_START;
    bd54:	0c 94 60 44 	jmp	0x88c0	; 0x88c0 <TriggerNote>

0000bd58 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    bd58:	cf 93       	push	r28
    bd5a:	df 93       	push	r29
    bd5c:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    bd5e:	61 e0       	ldi	r22, 0x01	; 1
    bd60:	83 e0       	ldi	r24, 0x03	; 3
    bd62:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <FadeOut>
	ClearVram();
    bd66:	0e 94 0b 41 	call	0x8216	; 0x8216 <ClearVram>
	clear_sprites();
    bd6a:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    bd6e:	d0 e0       	ldi	r29, 0x00	; 0
    bd70:	ae 01       	movw	r20, r28
    bd72:	84 e0       	ldi	r24, 0x04	; 4
    bd74:	44 0f       	add	r20, r20
    bd76:	55 1f       	adc	r21, r21
    bd78:	8a 95       	dec	r24
    bd7a:	e1 f7       	brne	.-8      	; 0xbd74 <level_transition+0x1c>
    bd7c:	40 5e       	subi	r20, 0xE0	; 224
    bd7e:	5e 4f       	sbci	r21, 0xFE	; 254
    bd80:	6c e0       	ldi	r22, 0x0C	; 12
    bd82:	70 e0       	ldi	r23, 0x00	; 0
    bd84:	88 e0       	ldi	r24, 0x08	; 8
    bd86:	90 e0       	ldi	r25, 0x00	; 0
    bd88:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	FadeIn(1, true);
    bd8c:	61 e0       	ldi	r22, 0x01	; 1
    bd8e:	81 e0       	ldi	r24, 0x01	; 1
    bd90:	0e 94 2d 4f 	call	0x9e5a	; 0x9e5a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    bd94:	82 e0       	ldi	r24, 0x02	; 2
    bd96:	0e 94 7c 51 	call	0xa2f8	; 0xa2f8 <LBWaitSeconds>
	FadeOut(1, true);
    bd9a:	61 e0       	ldi	r22, 0x01	; 1
    bd9c:	81 e0       	ldi	r24, 0x01	; 1
    bd9e:	0e 94 39 4f 	call	0x9e72	; 0x9e72 <FadeOut>
	ClearVram();
    bda2:	0e 94 0b 41 	call	0x8216	; 0x8216 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    bda6:	60 e0       	ldi	r22, 0x00	; 0
    bda8:	83 e0       	ldi	r24, 0x03	; 3
    bdaa:	0e 94 2d 4f 	call	0x9e5a	; 0x9e5a <FadeIn>
	load_level(index);
    bdae:	ce 01       	movw	r24, r28
}
    bdb0:	df 91       	pop	r29
    bdb2:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    bdb4:	0c 94 de 5d 	jmp	0xbbbc	; 0xbbbc <load_level>

0000bdb8 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    bdb8:	10 92 0b 0c 	sts	0x0C0B, r1
	clear_sprites();
    bdbc:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
	Print(7, 13, (char*) str1Player);
    bdc0:	4c e1       	ldi	r20, 0x1C	; 28
    bdc2:	53 e0       	ldi	r21, 0x03	; 3
    bdc4:	6d e0       	ldi	r22, 0x0D	; 13
    bdc6:	70 e0       	ldi	r23, 0x00	; 0
    bdc8:	87 e0       	ldi	r24, 0x07	; 7
    bdca:	90 e0       	ldi	r25, 0x00	; 0
    bdcc:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(7, 14, (char*) str2Player);
    bdd0:	4b e0       	ldi	r20, 0x0B	; 11
    bdd2:	53 e0       	ldi	r21, 0x03	; 3
    bdd4:	6e e0       	ldi	r22, 0x0E	; 14
    bdd6:	70 e0       	ldi	r23, 0x00	; 0
    bdd8:	87 e0       	ldi	r24, 0x07	; 7
    bdda:	90 e0       	ldi	r25, 0x00	; 0
    bddc:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(7, 15, (char*) strHighscores);
    bde0:	41 e0       	ldi	r20, 0x01	; 1
    bde2:	53 e0       	ldi	r21, 0x03	; 3
    bde4:	6f e0       	ldi	r22, 0x0F	; 15
    bde6:	70 e0       	ldi	r23, 0x00	; 0
    bde8:	87 e0       	ldi	r24, 0x07	; 7
    bdea:	90 e0       	ldi	r25, 0x00	; 0
    bdec:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(5, 26, (char*) strCopyright);
    bdf0:	4a e2       	ldi	r20, 0x2A	; 42
    bdf2:	53 e0       	ldi	r21, 0x03	; 3
    bdf4:	6a e1       	ldi	r22, 0x1A	; 26
    bdf6:	70 e0       	ldi	r23, 0x00	; 0
    bdf8:	85 e0       	ldi	r24, 0x05	; 5
    bdfa:	90 e0       	ldi	r25, 0x00	; 0
    bdfc:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    be00:	4d e8       	ldi	r20, 0x8D	; 141
    be02:	59 e7       	ldi	r21, 0x79	; 121
    be04:	65 e0       	ldi	r22, 0x05	; 5
    be06:	84 e0       	ldi	r24, 0x04	; 4
    be08:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    be0c:	40 e0       	ldi	r20, 0x00	; 0
    be0e:	6a e1       	ldi	r22, 0x1A	; 26
    be10:	70 e4       	ldi	r23, 0x40	; 64
    be12:	80 e0       	ldi	r24, 0x00	; 0
    be14:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
	SFX_SPLASH;
    be18:	2f ef       	ldi	r18, 0xFF	; 255
    be1a:	47 e1       	ldi	r20, 0x17	; 23
    be1c:	69 e0       	ldi	r22, 0x09	; 9
    be1e:	84 e0       	ldi	r24, 0x04	; 4
    be20:	0c 94 60 44 	jmp	0x88c0	; 0x88c0 <TriggerNote>

0000be24 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    be24:	ef 92       	push	r14
    be26:	ff 92       	push	r15
    be28:	0f 93       	push	r16
    be2a:	1f 93       	push	r17
    be2c:	cf 93       	push	r28
    be2e:	df 93       	push	r29
    be30:	1f 92       	push	r1
    be32:	cd b7       	in	r28, 0x3d	; 61
    be34:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    be36:	81 e0       	ldi	r24, 0x01	; 1
    be38:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    be3c:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    be40:	4a e5       	ldi	r20, 0x5A	; 90
    be42:	59 e7       	ldi	r21, 0x79	; 121
    be44:	61 e0       	ldi	r22, 0x01	; 1
    be46:	87 e0       	ldi	r24, 0x07	; 7
    be48:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    be4c:	44 e5       	ldi	r20, 0x54	; 84
    be4e:	59 e7       	ldi	r21, 0x79	; 121
    be50:	61 e0       	ldi	r22, 0x01	; 1
    be52:	84 e1       	ldi	r24, 0x14	; 20
    be54:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	Print(10, 2, (char*) strHighscores);
    be58:	41 e0       	ldi	r20, 0x01	; 1
    be5a:	53 e0       	ldi	r21, 0x03	; 3
    be5c:	62 e0       	ldi	r22, 0x02	; 2
    be5e:	70 e0       	ldi	r23, 0x00	; 0
    be60:	8a e0       	ldi	r24, 0x0A	; 10
    be62:	90 e0       	ldi	r25, 0x00	; 0
    be64:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    be68:	09 ec       	ldi	r16, 0xC9	; 201
    be6a:	1b e0       	ldi	r17, 0x0B	; 11
    be6c:	87 e0       	ldi	r24, 0x07	; 7
    be6e:	e8 2e       	mov	r14, r24
    be70:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    be72:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    be74:	20 e0       	ldi	r18, 0x00	; 0
    be76:	43 2f       	mov	r20, r19
    be78:	b7 01       	movw	r22, r14
    be7a:	82 e0       	ldi	r24, 0x02	; 2
    be7c:	90 e0       	ldi	r25, 0x00	; 0
    be7e:	39 83       	std	Y+1, r19	; 0x01
    be80:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
		PrintChar(3, y, '.');
    be84:	4e e2       	ldi	r20, 0x2E	; 46
    be86:	b7 01       	movw	r22, r14
    be88:	83 e0       	ldi	r24, 0x03	; 3
    be8a:	90 e0       	ldi	r25, 0x00	; 0
    be8c:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
    be90:	f8 01       	movw	r30, r16
    be92:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    be94:	80 81       	ld	r24, Z
    be96:	93 e0       	ldi	r25, 0x03	; 3
    be98:	89 9f       	mul	r24, r25
    be9a:	a0 01       	movw	r20, r0
    be9c:	11 24       	eor	r1, r1
    be9e:	43 51       	subi	r20, 0x13	; 19
    bea0:	54 4f       	sbci	r21, 0xF4	; 244
    bea2:	23 e0       	ldi	r18, 0x03	; 3
    bea4:	6e 2d       	mov	r22, r14
    bea6:	85 e0       	ldi	r24, 0x05	; 5
    bea8:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
		Print(9, y, (char*) strOwns);
    beac:	42 e9       	ldi	r20, 0x92	; 146
    beae:	52 e0       	ldi	r21, 0x02	; 2
    beb0:	b7 01       	movw	r22, r14
    beb2:	89 e0       	ldi	r24, 0x09	; 9
    beb4:	90 e0       	ldi	r25, 0x00	; 0
    beb6:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    beba:	f8 01       	movw	r30, r16
    bebc:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    bebe:	80 81       	ld	r24, Z
    bec0:	e3 e0       	ldi	r30, 0x03	; 3
    bec2:	8e 9f       	mul	r24, r30
    bec4:	a0 01       	movw	r20, r0
    bec6:	11 24       	eor	r1, r1
    bec8:	43 51       	subi	r20, 0x13	; 19
    beca:	54 4f       	sbci	r21, 0xF4	; 244
    becc:	23 e0       	ldi	r18, 0x03	; 3
    bece:	6e 2d       	mov	r22, r14
    bed0:	8e e0       	ldi	r24, 0x0E	; 14
    bed2:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
		Print(18, y, (char*) strBy);
    bed6:	4f e8       	ldi	r20, 0x8F	; 143
    bed8:	52 e0       	ldi	r21, 0x02	; 2
    beda:	b7 01       	movw	r22, r14
    bedc:	82 e1       	ldi	r24, 0x12	; 18
    bede:	90 e0       	ldi	r25, 0x00	; 0
    bee0:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    bee4:	f8 01       	movw	r30, r16
    bee6:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    bee8:	21 e0       	ldi	r18, 0x01	; 1
    beea:	40 81       	ld	r20, Z
    beec:	b7 01       	movw	r22, r14
    beee:	87 e1       	ldi	r24, 0x17	; 23
    bef0:	90 e0       	ldi	r25, 0x00	; 0
    bef2:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
		PrintChar(24, y, '-');
    bef6:	4d e2       	ldi	r20, 0x2D	; 45
    bef8:	b7 01       	movw	r22, r14
    befa:	88 e1       	ldi	r24, 0x18	; 24
    befc:	90 e0       	ldi	r25, 0x00	; 0
    befe:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    bf02:	21 e0       	ldi	r18, 0x01	; 1
    bf04:	f8 01       	movw	r30, r16
    bf06:	40 81       	ld	r20, Z
    bf08:	b7 01       	movw	r22, r14
    bf0a:	8b e1       	ldi	r24, 0x1B	; 27
    bf0c:	90 e0       	ldi	r25, 0x00	; 0
    bf0e:	0e 94 b7 4e 	call	0x9d6e	; 0x9d6e <PrintByte>
		y += 3;
		rank += 1;
    bf12:	39 81       	ldd	r19, Y+1	; 0x01
    bf14:	3f 5f       	subi	r19, 0xFF	; 255
    bf16:	f3 e0       	ldi	r31, 0x03	; 3
    bf18:	ef 0e       	add	r14, r31
    bf1a:	f1 1c       	adc	r15, r1
    bf1c:	0b 5f       	subi	r16, 0xFB	; 251
    bf1e:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    bf20:	36 30       	cpi	r19, 0x06	; 6
    bf22:	09 f0       	breq	.+2      	; 0xbf26 <load_tank_rank+0x102>
    bf24:	a7 cf       	rjmp	.-178    	; 0xbe74 <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
    bf26:	46 ea       	ldi	r20, 0xA6	; 166
    bf28:	52 e0       	ldi	r21, 0x02	; 2
    bf2a:	66 e1       	ldi	r22, 0x16	; 22
    bf2c:	70 e0       	ldi	r23, 0x00	; 0
    bf2e:	83 e0       	ldi	r24, 0x03	; 3
    bf30:	90 e0       	ldi	r25, 0x00	; 0
    bf32:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(10, 24, (char*) strCancelHandle);
    bf36:	4f eb       	ldi	r20, 0xBF	; 191
    bf38:	52 e0       	ldi	r21, 0x02	; 2
    bf3a:	68 e1       	ldi	r22, 0x18	; 24
    bf3c:	70 e0       	ldi	r23, 0x00	; 0
    bf3e:	8a e0       	ldi	r24, 0x0A	; 10
    bf40:	90 e0       	ldi	r25, 0x00	; 0
}
    bf42:	0f 90       	pop	r0
    bf44:	df 91       	pop	r29
    bf46:	cf 91       	pop	r28
    bf48:	1f 91       	pop	r17
    bf4a:	0f 91       	pop	r16
    bf4c:	ff 90       	pop	r15
    bf4e:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    bf50:	0c 94 ea 4e 	jmp	0x9dd4	; 0x9dd4 <Print>

0000bf54 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    bf54:	0e 94 28 53 	call	0xa650	; 0xa650 <save_score>
	fade_through();
    bf58:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
	SetSpriteVisibility(true);
    bf5c:	81 e0       	ldi	r24, 0x01	; 1
    bf5e:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <SetSpriteVisibility>
	init_game_state();
    bf62:	0e 94 c2 52 	call	0xa584	; 0xa584 <init_game_state>
	load_tank_rank();
    bf66:	0c 94 12 5f 	jmp	0xbe24	; 0xbe24 <load_tank_rank>

0000bf6a <update_player>:
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
}

void update_player(JoyPadState* p, Player* player)
{
    bf6a:	bf 92       	push	r11
    bf6c:	cf 92       	push	r12
    bf6e:	df 92       	push	r13
    bf70:	ef 92       	push	r14
    bf72:	ff 92       	push	r15
    bf74:	0f 93       	push	r16
    bf76:	1f 93       	push	r17
    bf78:	cf 93       	push	r28
    bf7a:	df 93       	push	r29
    bf7c:	8c 01       	movw	r16, r24
    bf7e:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    bf80:	1a 82       	std	Y+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    bf82:	fc 01       	movw	r30, r24
    bf84:	80 81       	ld	r24, Z
    bf86:	83 ff       	sbrs	r24, 3
    bf88:	0f c0       	rjmp	.+30     	; 0xbfa8 <update_player+0x3e>
	{
		SFX_NAVIGATE;
    bf8a:	2f ef       	ldi	r18, 0xFF	; 255
    bf8c:	47 e1       	ldi	r20, 0x17	; 23
    bf8e:	67 e0       	ldi	r22, 0x07	; 7
    bf90:	84 e0       	ldi	r24, 0x04	; 4
    bf92:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		game.paused = game.paused ^ 1;
    bf96:	90 91 0d 0c 	lds	r25, 0x0C0D
    bf9a:	81 e0       	ldi	r24, 0x01	; 1
    bf9c:	89 27       	eor	r24, r25
    bf9e:	80 93 0d 0c 	sts	0x0C0D, r24
		load_level_tiles(false);
    bfa2:	80 e0       	ldi	r24, 0x00	; 0
    bfa4:	0e 94 6b 5d 	call	0xbad6	; 0xbad6 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    bfa8:	20 91 0d 0c 	lds	r18, 0x0C0D
    bfac:	f8 01       	movw	r30, r16
    bfae:	80 81       	ld	r24, Z
    bfb0:	91 81       	ldd	r25, Z+1	; 0x01
    bfb2:	21 11       	cpse	r18, r1
    bfb4:	5a c1       	rjmp	.+692    	; 0xc26a <update_player+0x300>
    bfb6:	2c 89       	ldd	r18, Y+20	; 0x14
    bfb8:	20 fd       	sbrc	r18, 0
    bfba:	57 c1       	rjmp	.+686    	; 0xc26a <update_player+0x300>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    bfbc:	93 ff       	sbrs	r25, 3
    bfbe:	11 c0       	rjmp	.+34     	; 0xbfe2 <update_player+0x78>
    bfc0:	8d 89       	ldd	r24, Y+21	; 0x15
    bfc2:	8a 35       	cpi	r24, 0x5A	; 90
    bfc4:	71 f4       	brne	.+28     	; 0xbfe2 <update_player+0x78>
		{
			player->banter_frame = 0;
    bfc6:	1d 8a       	std	Y+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    bfc8:	69 e0       	ldi	r22, 0x09	; 9
    bfca:	70 e0       	ldi	r23, 0x00	; 0
    bfcc:	80 e0       	ldi	r24, 0x00	; 0
    bfce:	90 e0       	ldi	r25, 0x00	; 0
    bfd0:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    bfd4:	8e 8b       	std	Y+22, r24	; 0x16
			SFX_BANTER;
    bfd6:	2f e5       	ldi	r18, 0x5F	; 95
    bfd8:	4e e1       	ldi	r20, 0x1E	; 30
    bfda:	60 e0       	ldi	r22, 0x00	; 0
    bfdc:	84 e0       	ldi	r24, 0x04	; 4
    bfde:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    bfe2:	68 8d       	ldd	r22, Y+24	; 0x18
    bfe4:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    bfe6:	f8 01       	movw	r30, r16
    bfe8:	84 81       	ldd	r24, Z+4	; 0x04
    bfea:	84 ff       	sbrs	r24, 4
    bfec:	15 c0       	rjmp	.+42     	; 0xc018 <update_player+0xae>
		{
			player->shared.direction = D_UP;
    bfee:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    bff0:	70 e0       	ldi	r23, 0x00	; 0
    bff2:	80 e0       	ldi	r24, 0x00	; 0
    bff4:	90 e0       	ldi	r25, 0x00	; 0
    bff6:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    bffa:	25 e6       	ldi	r18, 0x65	; 101
    bffc:	38 e8       	ldi	r19, 0x88	; 136
    bffe:	48 e8       	ldi	r20, 0x88	; 136
    c000:	5c e3       	ldi	r21, 0x3C	; 60
    c002:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c006:	9b 01       	movw	r18, r22
    c008:	ac 01       	movw	r20, r24
    c00a:	6f 81       	ldd	r22, Y+7	; 0x07
    c00c:	78 85       	ldd	r23, Y+8	; 0x08
    c00e:	89 85       	ldd	r24, Y+9	; 0x09
    c010:	9a 85       	ldd	r25, Y+10	; 0x0a
    c012:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    c016:	2f c0       	rjmp	.+94     	; 0xc076 <update_player+0x10c>
		}
		else if ((p->held & BTN_RIGHT))
    c018:	87 ff       	sbrs	r24, 7
    c01a:	16 c0       	rjmp	.+44     	; 0xc048 <update_player+0xde>
		{
			player->shared.direction = D_RIGHT;
    c01c:	81 e0       	ldi	r24, 0x01	; 1
    c01e:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    c020:	70 e0       	ldi	r23, 0x00	; 0
    c022:	80 e0       	ldi	r24, 0x00	; 0
    c024:	90 e0       	ldi	r25, 0x00	; 0
    c026:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c02a:	25 e6       	ldi	r18, 0x65	; 101
    c02c:	38 e8       	ldi	r19, 0x88	; 136
    c02e:	48 e8       	ldi	r20, 0x88	; 136
    c030:	5c e3       	ldi	r21, 0x3C	; 60
    c032:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c036:	9b 01       	movw	r18, r22
    c038:	ac 01       	movw	r20, r24
    c03a:	6b 81       	ldd	r22, Y+3	; 0x03
    c03c:	7c 81       	ldd	r23, Y+4	; 0x04
    c03e:	8d 81       	ldd	r24, Y+5	; 0x05
    c040:	9e 81       	ldd	r25, Y+6	; 0x06
    c042:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    c046:	33 c0       	rjmp	.+102    	; 0xc0ae <update_player+0x144>
		}
		else if ((p->held & BTN_DOWN))
    c048:	85 ff       	sbrs	r24, 5
    c04a:	1a c0       	rjmp	.+52     	; 0xc080 <update_player+0x116>
		{
			player->shared.direction = D_DOWN;
    c04c:	82 e0       	ldi	r24, 0x02	; 2
    c04e:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    c050:	70 e0       	ldi	r23, 0x00	; 0
    c052:	80 e0       	ldi	r24, 0x00	; 0
    c054:	90 e0       	ldi	r25, 0x00	; 0
    c056:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c05a:	25 e6       	ldi	r18, 0x65	; 101
    c05c:	38 e8       	ldi	r19, 0x88	; 136
    c05e:	48 e8       	ldi	r20, 0x88	; 136
    c060:	5c e3       	ldi	r21, 0x3C	; 60
    c062:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c066:	9b 01       	movw	r18, r22
    c068:	ac 01       	movw	r20, r24
    c06a:	6f 81       	ldd	r22, Y+7	; 0x07
    c06c:	78 85       	ldd	r23, Y+8	; 0x08
    c06e:	89 85       	ldd	r24, Y+9	; 0x09
    c070:	9a 85       	ldd	r25, Y+10	; 0x0a
    c072:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    c076:	6f 83       	std	Y+7, r22	; 0x07
    c078:	78 87       	std	Y+8, r23	; 0x08
    c07a:	89 87       	std	Y+9, r24	; 0x09
    c07c:	9a 87       	std	Y+10, r25	; 0x0a
    c07e:	1d c0       	rjmp	.+58     	; 0xc0ba <update_player+0x150>
		}
		else if ((p->held & BTN_LEFT))
    c080:	86 ff       	sbrs	r24, 6
    c082:	1a c0       	rjmp	.+52     	; 0xc0b8 <update_player+0x14e>
		{
			player->shared.direction = D_LEFT;
    c084:	83 e0       	ldi	r24, 0x03	; 3
    c086:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    c088:	70 e0       	ldi	r23, 0x00	; 0
    c08a:	80 e0       	ldi	r24, 0x00	; 0
    c08c:	90 e0       	ldi	r25, 0x00	; 0
    c08e:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c092:	25 e6       	ldi	r18, 0x65	; 101
    c094:	38 e8       	ldi	r19, 0x88	; 136
    c096:	48 e8       	ldi	r20, 0x88	; 136
    c098:	5c e3       	ldi	r21, 0x3C	; 60
    c09a:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c09e:	9b 01       	movw	r18, r22
    c0a0:	ac 01       	movw	r20, r24
    c0a2:	6b 81       	ldd	r22, Y+3	; 0x03
    c0a4:	7c 81       	ldd	r23, Y+4	; 0x04
    c0a6:	8d 81       	ldd	r24, Y+5	; 0x05
    c0a8:	9e 81       	ldd	r25, Y+6	; 0x06
    c0aa:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    c0ae:	6b 83       	std	Y+3, r22	; 0x03
    c0b0:	7c 83       	std	Y+4, r23	; 0x04
    c0b2:	8d 83       	std	Y+5, r24	; 0x05
    c0b4:	9e 83       	std	Y+6, r25	; 0x06
    c0b6:	01 c0       	rjmp	.+2      	; 0xc0ba <update_player+0x150>
		}
		else
		{
			player->shared.speed = 0;
    c0b8:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    c0ba:	f8 01       	movw	r30, r16
    c0bc:	80 81       	ld	r24, Z
    c0be:	91 81       	ldd	r25, Z+1	; 0x01
    c0c0:	8e 01       	movw	r16, r28
    c0c2:	04 5d       	subi	r16, 0xD4	; 212
    c0c4:	1f 4f       	sbci	r17, 0xFF	; 255
    c0c6:	90 ff       	sbrs	r25, 0
    c0c8:	33 c0       	rjmp	.+102    	; 0xc130 <update_player+0x1c6>
    c0ca:	89 89       	ldd	r24, Y+17	; 0x11
    c0cc:	81 11       	cpse	r24, r1
    c0ce:	30 c0       	rjmp	.+96     	; 0xc130 <update_player+0x1c6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    c0d0:	8a ad       	ldd	r24, Y+58	; 0x3a
    c0d2:	81 11       	cpse	r24, r1
    c0d4:	2d c0       	rjmp	.+90     	; 0xc130 <update_player+0x1c6>
				{
					if (player->has_rocket)
    c0d6:	89 8d       	ldd	r24, Y+25	; 0x19
    c0d8:	88 23       	and	r24, r24
    c0da:	61 f0       	breq	.+24     	; 0xc0f4 <update_player+0x18a>
					{
						init_shot_state(shot, ROCKET_SHOT);
    c0dc:	61 e0       	ldi	r22, 0x01	; 1
    c0de:	c8 01       	movw	r24, r16
    c0e0:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    c0e4:	61 e0       	ldi	r22, 0x01	; 1
    c0e6:	c8 01       	movw	r24, r16
    c0e8:	0e 94 13 52 	call	0xa426	; 0xa426 <set_shot_animations>
						SFX_ROCKET;
    c0ec:	2f ef       	ldi	r18, 0xFF	; 255
    c0ee:	47 e1       	ldi	r20, 0x17	; 23
    c0f0:	68 e0       	ldi	r22, 0x08	; 8
    c0f2:	0b c0       	rjmp	.+22     	; 0xc10a <update_player+0x1a0>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    c0f4:	60 e0       	ldi	r22, 0x00	; 0
    c0f6:	c8 01       	movw	r24, r16
    c0f8:	0e 94 f6 51 	call	0xa3ec	; 0xa3ec <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    c0fc:	60 e0       	ldi	r22, 0x00	; 0
    c0fe:	c8 01       	movw	r24, r16
    c100:	0e 94 13 52 	call	0xa426	; 0xa426 <set_shot_animations>
						SFX_CANNONBALL;
    c104:	2f ef       	ldi	r18, 0xFF	; 255
    c106:	47 e1       	ldi	r20, 0x17	; 23
    c108:	62 e0       	ldi	r22, 0x02	; 2
    c10a:	84 e0       	ldi	r24, 0x04	; 4
    c10c:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
					}
					player->active_shots++;
    c110:	89 89       	ldd	r24, Y+17	; 0x11
    c112:	8f 5f       	subi	r24, 0xFF	; 255
    c114:	89 8b       	std	Y+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    c116:	88 81       	ld	r24, Y
    c118:	8c a7       	std	Y+44, r24	; 0x2c
					position_shot(player, shot);
    c11a:	b8 01       	movw	r22, r16
    c11c:	ce 01       	movw	r24, r28
    c11e:	0e 94 92 53 	call	0xa724	; 0xa724 <position_shot>
					shot->active = 1;
    c122:	81 e0       	ldi	r24, 0x01	; 1
    c124:	8a af       	std	Y+58, r24	; 0x3a
					if (player->has_over_speed)
    c126:	8a 8d       	ldd	r24, Y+26	; 0x1a
    c128:	88 23       	and	r24, r24
    c12a:	11 f0       	breq	.+4      	; 0xc130 <update_player+0x1c6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    c12c:	8a ea       	ldi	r24, 0xAA	; 170
    c12e:	8d a7       	std	Y+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    c130:	8a ad       	ldd	r24, Y+58	; 0x3a
    c132:	88 23       	and	r24, r24
    c134:	09 f4       	brne	.+2      	; 0xc138 <update_player+0x1ce>
    c136:	ac c0       	rjmp	.+344    	; 0xc290 <update_player+0x326>
			{
				switch (shot->shared.direction)
    c138:	8c a5       	ldd	r24, Y+44	; 0x2c
    c13a:	81 30       	cpi	r24, 0x01	; 1
    c13c:	89 f1       	breq	.+98     	; 0xc1a0 <update_player+0x236>
    c13e:	d8 f0       	brcs	.+54     	; 0xc176 <update_player+0x20c>
    c140:	82 30       	cpi	r24, 0x02	; 2
    c142:	09 f4       	brne	.+2      	; 0xc146 <update_player+0x1dc>
    c144:	42 c0       	rjmp	.+132    	; 0xc1ca <update_player+0x260>
    c146:	83 30       	cpi	r24, 0x03	; 3
    c148:	09 f0       	breq	.+2      	; 0xc14c <update_player+0x1e2>
    c14a:	5c c0       	rjmp	.+184    	; 0xc204 <update_player+0x29a>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    c14c:	6d a5       	ldd	r22, Y+45	; 0x2d
    c14e:	70 e0       	ldi	r23, 0x00	; 0
    c150:	80 e0       	ldi	r24, 0x00	; 0
    c152:	90 e0       	ldi	r25, 0x00	; 0
    c154:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c158:	25 e6       	ldi	r18, 0x65	; 101
    c15a:	38 e8       	ldi	r19, 0x88	; 136
    c15c:	48 e8       	ldi	r20, 0x88	; 136
    c15e:	5c e3       	ldi	r21, 0x3C	; 60
    c160:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c164:	9b 01       	movw	r18, r22
    c166:	ac 01       	movw	r20, r24
    c168:	6f a5       	ldd	r22, Y+47	; 0x2f
    c16a:	78 a9       	ldd	r23, Y+48	; 0x30
    c16c:	89 a9       	ldd	r24, Y+49	; 0x31
    c16e:	9a a9       	ldd	r25, Y+50	; 0x32
    c170:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    c174:	43 c0       	rjmp	.+134    	; 0xc1fc <update_player+0x292>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    c176:	6d a5       	ldd	r22, Y+45	; 0x2d
    c178:	70 e0       	ldi	r23, 0x00	; 0
    c17a:	80 e0       	ldi	r24, 0x00	; 0
    c17c:	90 e0       	ldi	r25, 0x00	; 0
    c17e:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c182:	25 e6       	ldi	r18, 0x65	; 101
    c184:	38 e8       	ldi	r19, 0x88	; 136
    c186:	48 e8       	ldi	r20, 0x88	; 136
    c188:	5c e3       	ldi	r21, 0x3C	; 60
    c18a:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c18e:	9b 01       	movw	r18, r22
    c190:	ac 01       	movw	r20, r24
    c192:	6b a9       	ldd	r22, Y+51	; 0x33
    c194:	7c a9       	ldd	r23, Y+52	; 0x34
    c196:	8d a9       	ldd	r24, Y+53	; 0x35
    c198:	9e a9       	ldd	r25, Y+54	; 0x36
    c19a:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    c19e:	29 c0       	rjmp	.+82     	; 0xc1f2 <update_player+0x288>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    c1a0:	6d a5       	ldd	r22, Y+45	; 0x2d
    c1a2:	70 e0       	ldi	r23, 0x00	; 0
    c1a4:	80 e0       	ldi	r24, 0x00	; 0
    c1a6:	90 e0       	ldi	r25, 0x00	; 0
    c1a8:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c1ac:	25 e6       	ldi	r18, 0x65	; 101
    c1ae:	38 e8       	ldi	r19, 0x88	; 136
    c1b0:	48 e8       	ldi	r20, 0x88	; 136
    c1b2:	5c e3       	ldi	r21, 0x3C	; 60
    c1b4:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c1b8:	9b 01       	movw	r18, r22
    c1ba:	ac 01       	movw	r20, r24
    c1bc:	6f a5       	ldd	r22, Y+47	; 0x2f
    c1be:	78 a9       	ldd	r23, Y+48	; 0x30
    c1c0:	89 a9       	ldd	r24, Y+49	; 0x31
    c1c2:	9a a9       	ldd	r25, Y+50	; 0x32
    c1c4:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    c1c8:	19 c0       	rjmp	.+50     	; 0xc1fc <update_player+0x292>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    c1ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    c1cc:	70 e0       	ldi	r23, 0x00	; 0
    c1ce:	80 e0       	ldi	r24, 0x00	; 0
    c1d0:	90 e0       	ldi	r25, 0x00	; 0
    c1d2:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c1d6:	25 e6       	ldi	r18, 0x65	; 101
    c1d8:	38 e8       	ldi	r19, 0x88	; 136
    c1da:	48 e8       	ldi	r20, 0x88	; 136
    c1dc:	5c e3       	ldi	r21, 0x3C	; 60
    c1de:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c1e2:	9b 01       	movw	r18, r22
    c1e4:	ac 01       	movw	r20, r24
    c1e6:	6b a9       	ldd	r22, Y+51	; 0x33
    c1e8:	7c a9       	ldd	r23, Y+52	; 0x34
    c1ea:	8d a9       	ldd	r24, Y+53	; 0x35
    c1ec:	9e a9       	ldd	r25, Y+54	; 0x36
    c1ee:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    c1f2:	6b ab       	std	Y+51, r22	; 0x33
    c1f4:	7c ab       	std	Y+52, r23	; 0x34
    c1f6:	8d ab       	std	Y+53, r24	; 0x35
    c1f8:	9e ab       	std	Y+54, r25	; 0x36
    c1fa:	04 c0       	rjmp	.+8      	; 0xc204 <update_player+0x29a>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    c1fc:	6f a7       	std	Y+47, r22	; 0x2f
    c1fe:	78 ab       	std	Y+48, r23	; 0x30
    c200:	89 ab       	std	Y+49, r24	; 0x31
    c202:	9a ab       	std	Y+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    c204:	bb ac       	ldd	r11, Y+59	; 0x3b
    c206:	6b 2d       	mov	r22, r11
    c208:	70 e0       	ldi	r23, 0x00	; 0
    c20a:	80 e0       	ldi	r24, 0x00	; 0
    c20c:	90 e0       	ldi	r25, 0x00	; 0
    c20e:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c212:	6b 01       	movw	r12, r22
    c214:	7c 01       	movw	r14, r24
    c216:	f8 e0       	ldi	r31, 0x08	; 8
    c218:	fb 15       	cp	r31, r11
    c21a:	80 f0       	brcs	.+32     	; 0xc23c <update_player+0x2d2>
    c21c:	8d a5       	ldd	r24, Y+45	; 0x2d
    c21e:	68 2f       	mov	r22, r24
    c220:	70 e0       	ldi	r23, 0x00	; 0
    c222:	80 e0       	ldi	r24, 0x00	; 0
    c224:	90 e0       	ldi	r25, 0x00	; 0
    c226:	0e 94 25 6b 	call	0xd64a	; 0xd64a <__floatsisf>
    c22a:	25 e6       	ldi	r18, 0x65	; 101
    c22c:	38 e8       	ldi	r19, 0x88	; 136
    c22e:	48 e8       	ldi	r20, 0x88	; 136
    c230:	5c e3       	ldi	r21, 0x3C	; 60
    c232:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    c236:	9b 01       	movw	r18, r22
    c238:	ac 01       	movw	r20, r24
    c23a:	03 c0       	rjmp	.+6      	; 0xc242 <update_player+0x2d8>
    c23c:	20 e0       	ldi	r18, 0x00	; 0
    c23e:	30 e0       	ldi	r19, 0x00	; 0
    c240:	a9 01       	movw	r20, r18
    c242:	c7 01       	movw	r24, r14
    c244:	b6 01       	movw	r22, r12
    c246:	0e 94 22 6a 	call	0xd444	; 0xd444 <__addsf3>
    c24a:	0e 94 f7 6a 	call	0xd5ee	; 0xd5ee <__fixunssfsi>
    c24e:	6b af       	std	Y+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    c250:	b8 01       	movw	r22, r16
    c252:	ce 01       	movw	r24, r28
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c254:	df 91       	pop	r29
    c256:	cf 91       	pop	r28
    c258:	1f 91       	pop	r17
    c25a:	0f 91       	pop	r16
    c25c:	ff 90       	pop	r15
    c25e:	ef 90       	pop	r14
    c260:	df 90       	pop	r13
    c262:	cf 90       	pop	r12
    c264:	bf 90       	pop	r11
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
				collision_detect_shot(player, shot);
    c266:	0c 94 9c 59 	jmp	0xb338	; 0xb338 <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    c26a:	91 ff       	sbrs	r25, 1
    c26c:	11 c0       	rjmp	.+34     	; 0xc290 <update_player+0x326>
		{
			SFX_NAVIGATE;
    c26e:	2f ef       	ldi	r18, 0xFF	; 255
    c270:	47 e1       	ldi	r20, 0x17	; 23
    c272:	67 e0       	ldi	r22, 0x07	; 7
    c274:	84 e0       	ldi	r24, 0x04	; 4
    c276:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
			exit_game();
		}
	}
}
    c27a:	df 91       	pop	r29
    c27c:	cf 91       	pop	r28
    c27e:	1f 91       	pop	r17
    c280:	0f 91       	pop	r16
    c282:	ff 90       	pop	r15
    c284:	ef 90       	pop	r14
    c286:	df 90       	pop	r13
    c288:	cf 90       	pop	r12
    c28a:	bf 90       	pop	r11
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    c28c:	0c 94 aa 5f 	jmp	0xbf54	; 0xbf54 <exit_game>
		}
	}
}
    c290:	df 91       	pop	r29
    c292:	cf 91       	pop	r28
    c294:	1f 91       	pop	r17
    c296:	0f 91       	pop	r16
    c298:	ff 90       	pop	r15
    c29a:	ef 90       	pop	r14
    c29c:	df 90       	pop	r13
    c29e:	cf 90       	pop	r12
    c2a0:	bf 90       	pop	r11
    c2a2:	08 95       	ret

0000c2a4 <update_level_helper>:

void update_level_helper(JoyPadState* p, Player* player, JoyPadState* op, Player* other_player)
{
    c2a4:	af 92       	push	r10
    c2a6:	bf 92       	push	r11
    c2a8:	cf 92       	push	r12
    c2aa:	df 92       	push	r13
    c2ac:	ef 92       	push	r14
    c2ae:	ff 92       	push	r15
    c2b0:	0f 93       	push	r16
    c2b2:	1f 93       	push	r17
    c2b4:	cf 93       	push	r28
    c2b6:	df 93       	push	r29
    c2b8:	1f 92       	push	r1
    c2ba:	cd b7       	in	r28, 0x3d	; 61
    c2bc:	de b7       	in	r29, 0x3e	; 62
    c2be:	7c 01       	movw	r14, r24
    c2c0:	5b 01       	movw	r10, r22
    c2c2:	6a 01       	movw	r12, r20
    c2c4:	89 01       	movw	r16, r18
	u8 next_level;
	Player* tmp;
	
	update_player(p, player);
    c2c6:	0e 94 b5 5f 	call	0xbf6a	; 0xbf6a <update_player>
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE)         &&
    c2ca:	f5 01       	movw	r30, r10
    c2cc:	80 89       	ldd	r24, Z+16	; 0x10
    c2ce:	8a 30       	cpi	r24, 0x0A	; 10
    c2d0:	08 f4       	brcc	.+2      	; 0xc2d4 <update_level_helper+0x30>
    c2d2:	79 c0       	rjmp	.+242    	; 0xc3c6 <update_level_helper+0x122>
	     !(other_player->flags & EXPLODING_FLAG)         &&
    c2d4:	f8 01       	movw	r30, r16
    c2d6:	84 89       	ldd	r24, Z+20	; 0x14
	Player* tmp;
	
	update_player(p, player);
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE)         &&
    c2d8:	80 fd       	sbrc	r24, 0
    c2da:	75 c0       	rjmp	.+234    	; 0xc3c6 <update_level_helper+0x122>
	     !(other_player->flags & EXPLODING_FLAG)         &&
		 !(game.boss_fight_status == BOSS_FIGHT)         &&
    c2dc:	90 91 0e 0c 	lds	r25, 0x0C0E
    c2e0:	8f ef       	ldi	r24, 0xFF	; 255
    c2e2:	89 0f       	add	r24, r25
    c2e4:	82 30       	cpi	r24, 0x02	; 2
    c2e6:	08 f4       	brcc	.+2      	; 0xc2ea <update_level_helper+0x46>
    c2e8:	6e c0       	rjmp	.+220    	; 0xc3c6 <update_level_helper+0x122>
		 !(game.boss_fight_status == BOSS_FIGHT_LOADING) &&
    c2ea:	90 31       	cpi	r25, 0x10	; 16
    c2ec:	09 f4       	brne	.+2      	; 0xc2f0 <update_level_helper+0x4c>
    c2ee:	6b c0       	rjmp	.+214    	; 0xc3c6 <update_level_helper+0x122>
		 !(game.boss_fight_status == BOSS_SINKING))
	{
	    next_level = game.current_level + 1;
    c2f0:	30 91 0c 0c 	lds	r19, 0x0C0C
    c2f4:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    c2f6:	3a 30       	cpi	r19, 0x0A	; 10
    c2f8:	f8 f0       	brcs	.+62     	; 0xc338 <update_level_helper+0x94>
    c2fa:	87 85       	ldd	r24, Z+15	; 0x0f
    c2fc:	f5 01       	movw	r30, r10
    c2fe:	27 85       	ldd	r18, Z+15	; 0x0f
    c300:	82 17       	cp	r24, r18
    c302:	09 f4       	brne	.+2      	; 0xc306 <update_level_helper+0x62>
    c304:	60 c0       	rjmp	.+192    	; 0xc3c6 <update_level_helper+0x122>
		
		// Load boss fight
		if (next_level >= LEVEL_COUNT && game.boss_fight_status == 0)
    c306:	91 11       	cpse	r25, r1
    c308:	17 c0       	rjmp	.+46     	; 0xc338 <update_level_helper+0x94>
		{
			game.boss_fight_status = BOSS_FIGHT_LOADING;
    c30a:	91 e0       	ldi	r25, 0x01	; 1
    c30c:	90 93 0e 0c 	sts	0x0C0E, r25
			game.boss_fight_player = player;
    c310:	b0 92 12 0c 	sts	0x0C12, r11
    c314:	a0 92 11 0c 	sts	0x0C11, r10
			game.boss_fight_joypad = p;
    c318:	f0 92 14 0c 	sts	0x0C14, r15
    c31c:	e0 92 13 0c 	sts	0x0C13, r14
			if (other_player->score > player->score)
    c320:	28 17       	cp	r18, r24
    c322:	08 f0       	brcs	.+2      	; 0xc326 <update_level_helper+0x82>
    c324:	50 c0       	rjmp	.+160    	; 0xc3c6 <update_level_helper+0x122>
			{
				game.boss_fight_player = other_player;
    c326:	10 93 12 0c 	sts	0x0C12, r17
    c32a:	00 93 11 0c 	sts	0x0C11, r16
				game.boss_fight_joypad = op;
    c32e:	d0 92 14 0c 	sts	0x0C14, r13
    c332:	c0 92 13 0c 	sts	0x0C13, r12
    c336:	47 c0       	rjmp	.+142    	; 0xc3c6 <update_level_helper+0x122>
			}
			return;
		}

		load_level_tiles(true);
    c338:	81 e0       	ldi	r24, 0x01	; 1
    c33a:	39 83       	std	Y+1, r19	; 0x01
    c33c:	0e 94 6b 5d 	call	0xbad6	; 0xbad6 <load_level_tiles>
		SetSpriteVisibility(false);
    c340:	80 e0       	ldi	r24, 0x00	; 0
    c342:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    c346:	b8 01       	movw	r22, r16
    c348:	c5 01       	movw	r24, r10
    c34a:	0e 94 ff 53 	call	0xa7fe	; 0xa7fe <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    c34e:	82 e0       	ldi	r24, 0x02	; 2
    c350:	0e 94 7c 51 	call	0xa2f8	; 0xa2f8 <LBWaitSeconds>
		player->level_score = 0;
    c354:	f5 01       	movw	r30, r10
    c356:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    c358:	f8 01       	movw	r30, r16
    c35a:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    c35c:	2f ef       	ldi	r18, 0xFF	; 255
    c35e:	47 e1       	ldi	r20, 0x17	; 23
    c360:	64 e0       	ldi	r22, 0x04	; 4
    c362:	84 e0       	ldi	r24, 0x04	; 4
    c364:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    c368:	39 81       	ldd	r19, Y+1	; 0x01
    c36a:	3a 30       	cpi	r19, 0x0A	; 10
    c36c:	f0 f0       	brcs	.+60     	; 0xc3aa <update_level_helper+0x106>
		{
		    if (other_player->score > player->score)
    c36e:	f8 01       	movw	r30, r16
    c370:	97 85       	ldd	r25, Z+15	; 0x0f
    c372:	f5 01       	movw	r30, r10
    c374:	87 85       	ldd	r24, Z+15	; 0x0f
    c376:	89 17       	cp	r24, r25
    c378:	20 f4       	brcc	.+8      	; 0xc382 <update_level_helper+0xde>
    c37a:	8b 2d       	mov	r24, r11
		    {
		        tmp = player;
		        player = other_player;
    c37c:	58 01       	movw	r10, r16
		        other_player = tmp;
    c37e:	0e 2f       	mov	r16, r30
    c380:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    c382:	b8 01       	movw	r22, r16
    c384:	c5 01       	movw	r24, r10
    c386:	0e 94 41 54 	call	0xa882	; 0xa882 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    c38a:	82 e0       	ldi	r24, 0x02	; 2
    c38c:	0e 94 7c 51 	call	0xa2f8	; 0xa2f8 <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    c390:	0f 90       	pop	r0
    c392:	df 91       	pop	r29
    c394:	cf 91       	pop	r28
    c396:	1f 91       	pop	r17
    c398:	0f 91       	pop	r16
    c39a:	ff 90       	pop	r15
    c39c:	ef 90       	pop	r14
    c39e:	df 90       	pop	r13
    c3a0:	cf 90       	pop	r12
    c3a2:	bf 90       	pop	r11
    c3a4:	af 90       	pop	r10
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    c3a6:	0c 94 aa 5f 	jmp	0xbf54	; 0xbf54 <exit_game>
		}
		else
		{
			level_transition(next_level);
    c3aa:	83 2f       	mov	r24, r19
		}
	}
}
    c3ac:	0f 90       	pop	r0
    c3ae:	df 91       	pop	r29
    c3b0:	cf 91       	pop	r28
    c3b2:	1f 91       	pop	r17
    c3b4:	0f 91       	pop	r16
    c3b6:	ff 90       	pop	r15
    c3b8:	ef 90       	pop	r14
    c3ba:	df 90       	pop	r13
    c3bc:	cf 90       	pop	r12
    c3be:	bf 90       	pop	r11
    c3c0:	af 90       	pop	r10
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    c3c2:	0c 94 ac 5e 	jmp	0xbd58	; 0xbd58 <level_transition>
		}
	}
}
    c3c6:	0f 90       	pop	r0
    c3c8:	df 91       	pop	r29
    c3ca:	cf 91       	pop	r28
    c3cc:	1f 91       	pop	r17
    c3ce:	0f 91       	pop	r16
    c3d0:	ff 90       	pop	r15
    c3d2:	ef 90       	pop	r14
    c3d4:	df 90       	pop	r13
    c3d6:	cf 90       	pop	r12
    c3d8:	bf 90       	pop	r11
    c3da:	af 90       	pop	r10
    c3dc:	08 95       	ret

0000c3de <update_level>:
{
	
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    c3de:	df 92       	push	r13
    c3e0:	ef 92       	push	r14
    c3e2:	ff 92       	push	r15
    c3e4:	0f 93       	push	r16
    c3e6:	1f 93       	push	r17
    c3e8:	cf 93       	push	r28
    c3ea:	df 93       	push	r29
    c3ec:	8c 01       	movw	r16, r24
    c3ee:	eb 01       	movw	r28, r22
	u16 held = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	if (game.paused)
    c3f0:	80 91 0d 0c 	lds	r24, 0x0C0D
    c3f4:	88 23       	and	r24, r24
    c3f6:	09 f4       	brne	.+2      	; 0xc3fa <update_level+0x1c>
    c3f8:	49 c0       	rjmp	.+146    	; 0xc48c <update_level+0xae>
	{
		// Render
		SetSpriteVisibility(false);
    c3fa:	80 e0       	ldi	r24, 0x00	; 0
    c3fc:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    c400:	43 ee       	ldi	r20, 0xE3	; 227
    c402:	59 e7       	ldi	r21, 0x79	; 121
    c404:	6c e0       	ldi	r22, 0x0C	; 12
    c406:	88 e0       	ldi	r24, 0x08	; 8
    c408:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
		Print(12, 13, (char*) strPaused);
    c40c:	40 ec       	ldi	r20, 0xC0	; 192
    c40e:	51 e0       	ldi	r21, 0x01	; 1
    c410:	6d e0       	ldi	r22, 0x0D	; 13
    c412:	70 e0       	ldi	r23, 0x00	; 0
    c414:	8c e0       	ldi	r24, 0x0C	; 12
    c416:	90 e0       	ldi	r25, 0x00	; 0
    c418:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
		Print(11, 14, (char*) strExit);
    c41c:	47 ec       	ldi	r20, 0xC7	; 199
    c41e:	51 e0       	ldi	r21, 0x01	; 1
    c420:	6e e0       	ldi	r22, 0x0E	; 14
    c422:	70 e0       	ldi	r23, 0x00	; 0
    c424:	8b e0       	ldi	r24, 0x0B	; 11
    c426:	90 e0       	ldi	r25, 0x00	; 0
    c428:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
		
		// Update
		update_level_helper(p1, &player1, p2, &player2);
    c42c:	23 ea       	ldi	r18, 0xA3	; 163
    c42e:	3f e0       	ldi	r19, 0x0F	; 15
    c430:	ae 01       	movw	r20, r28
    c432:	65 e3       	ldi	r22, 0x35	; 53
    c434:	7c e0       	ldi	r23, 0x0C	; 12
    c436:	c8 01       	movw	r24, r16
    c438:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <update_level_helper>
		update_level_helper(p2, &player2, p1, &player1);
    c43c:	25 e3       	ldi	r18, 0x35	; 53
    c43e:	3c e0       	ldi	r19, 0x0C	; 12
    c440:	a8 01       	movw	r20, r16
    c442:	63 ea       	ldi	r22, 0xA3	; 163
    c444:	7f e0       	ldi	r23, 0x0F	; 15
    c446:	ce 01       	movw	r24, r28
    c448:	0e 94 52 61 	call	0xc2a4	; 0xc2a4 <update_level_helper>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    c44c:	60 e0       	ldi	r22, 0x00	; 0
    c44e:	85 e3       	ldi	r24, 0x35	; 53
    c450:	9c e0       	ldi	r25, 0x0C	; 12
    c452:	0e 94 c3 5b 	call	0xb786	; 0xb786 <collision_detect_player>
    c456:	88 23       	and	r24, r24
    c458:	41 f0       	breq	.+16     	; 0xc46a <update_level+0x8c>
    c45a:	2f e0       	ldi	r18, 0x0F	; 15
    c45c:	40 e0       	ldi	r20, 0x00	; 0
    c45e:	63 ea       	ldi	r22, 0xA3	; 163
    c460:	7f e0       	ldi	r23, 0x0F	; 15
    c462:	85 e3       	ldi	r24, 0x35	; 53
    c464:	9c e0       	ldi	r25, 0x0C	; 12
    c466:	0e 94 a2 5b 	call	0xb744	; 0xb744 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    c46a:	6f e0       	ldi	r22, 0x0F	; 15
    c46c:	83 ea       	ldi	r24, 0xA3	; 163
    c46e:	9f e0       	ldi	r25, 0x0F	; 15
    c470:	0e 94 c3 5b 	call	0xb786	; 0xb786 <collision_detect_player>
    c474:	88 23       	and	r24, r24
    c476:	09 f4       	brne	.+2      	; 0xc47a <update_level+0x9c>
    c478:	7b c0       	rjmp	.+246    	; 0xc570 <update_level+0x192>
    c47a:	20 e0       	ldi	r18, 0x00	; 0
    c47c:	4f e0       	ldi	r20, 0x0F	; 15
    c47e:	65 e3       	ldi	r22, 0x35	; 53
    c480:	7c e0       	ldi	r23, 0x0C	; 12
    c482:	83 ea       	ldi	r24, 0xA3	; 163
    c484:	9f e0       	ldi	r25, 0x0F	; 15
    c486:	0e 94 a2 5b 	call	0xb744	; 0xb744 <explode_player>
    c48a:	72 c0       	rjmp	.+228    	; 0xc570 <update_level+0x192>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOADING)
    c48c:	80 91 0e 0c 	lds	r24, 0x0C0E
    c490:	9f ef       	ldi	r25, 0xFF	; 255
    c492:	98 0f       	add	r25, r24
    c494:	92 30       	cpi	r25, 0x02	; 2
    c496:	20 f4       	brcc	.+8      	; 0xc4a0 <update_level+0xc2>
	{
		// Render
		SetSpriteVisibility(true);
    c498:	81 e0       	ldi	r24, 0x01	; 1
    c49a:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <SetSpriteVisibility>
    c49e:	68 c0       	rjmp	.+208    	; 0xc570 <update_level+0x192>
		SetSpriteVisibility(true);
		
		// Update
		update_boss_fight();
	}
	else if (game.boss_fight_status == BOSS_SINKING)
    c4a0:	80 31       	cpi	r24, 0x10	; 16
    c4a2:	d1 f3       	breq	.-12     	; 0xc498 <update_level+0xba>
		// Update
		update_boss_fight();
	}
	else
	{
		SetSpriteVisibility(true);
    c4a4:	81 e0       	ldi	r24, 0x01	; 1
    c4a6:	0e 94 11 4d 	call	0x9a22	; 0x9a22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    c4aa:	60 e0       	ldi	r22, 0x00	; 0
    c4ac:	85 e3       	ldi	r24, 0x35	; 53
    c4ae:	9c e0       	ldi	r25, 0x0C	; 12
    c4b0:	0e 94 90 55 	call	0xab20	; 0xab20 <tank_map>
    c4b4:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    c4b6:	68 2f       	mov	r22, r24
    c4b8:	83 ea       	ldi	r24, 0xA3	; 163
    c4ba:	9f e0       	ldi	r25, 0x0F	; 15
    c4bc:	0e 94 90 55 	call	0xab20	; 0xab20 <tank_map>
    c4c0:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    c4c2:	68 2f       	mov	r22, r24
    c4c4:	85 e3       	ldi	r24, 0x35	; 53
    c4c6:	9c e0       	ldi	r25, 0x0C	; 12
    c4c8:	0e 94 f9 55 	call	0xabf2	; 0xabf2 <shot_map>
    c4cc:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    c4ce:	68 2f       	mov	r22, r24
    c4d0:	83 ea       	ldi	r24, 0xA3	; 163
    c4d2:	9f e0       	ldi	r25, 0x0F	; 15
    c4d4:	0e 94 f9 55 	call	0xabf2	; 0xabf2 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    c4d8:	40 91 02 01 	lds	r20, 0x0102
    c4dc:	6f e0       	ldi	r22, 0x0F	; 15
    c4de:	85 e3       	ldi	r24, 0x35	; 53
    c4e0:	9c e0       	ldi	r25, 0x0C	; 12
    c4e2:	0e 94 c4 54 	call	0xa988	; 0xa988 <render_banter>
    c4e6:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    c4ea:	40 91 01 01 	lds	r20, 0x0101
    c4ee:	60 e0       	ldi	r22, 0x00	; 0
    c4f0:	83 ea       	ldi	r24, 0xA3	; 163
    c4f2:	9f e0       	ldi	r25, 0x0F	; 15
    c4f4:	0e 94 c4 54 	call	0xa988	; 0xa988 <render_banter>
    c4f8:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    c4fc:	60 e0       	ldi	r22, 0x00	; 0
    c4fe:	85 e3       	ldi	r24, 0x35	; 53
    c500:	9c e0       	ldi	r25, 0x0C	; 12
    c502:	0e 94 ec 54 	call	0xa9d8	; 0xa9d8 <render_player>
		render_player(&player2, p2_index);
    c506:	6d 2d       	mov	r22, r13
    c508:	83 ea       	ldi	r24, 0xA3	; 163
    c50a:	9f e0       	ldi	r25, 0x0F	; 15
    c50c:	0e 94 ec 54 	call	0xa9d8	; 0xa9d8 <render_player>
		render_shot(&player1, p1_shot_index);
    c510:	6e 2d       	mov	r22, r14
    c512:	85 e3       	ldi	r24, 0x35	; 53
    c514:	9c e0       	ldi	r25, 0x0C	; 12
    c516:	0e 94 15 55 	call	0xaa2a	; 0xaa2a <render_shot>
		render_shot(&player2, p2_shot_index);
    c51a:	6f 2d       	mov	r22, r15
    c51c:	83 ea       	ldi	r24, 0xA3	; 163
    c51e:	9f e0       	ldi	r25, 0x0F	; 15
    c520:	0e 94 15 55 	call	0xaa2a	; 0xaa2a <render_shot>
		render_tile_explosions(&tile_animations);
    c524:	88 e1       	ldi	r24, 0x18	; 24
    c526:	9c e0       	ldi	r25, 0x0C	; 12
    c528:	0e 94 41 55 	call	0xaa82	; 0xaa82 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    c52c:	80 91 15 0c 	lds	r24, 0x0C15
    c530:	90 91 16 0c 	lds	r25, 0x0C16
    c534:	89 3e       	cpi	r24, 0xE9	; 233
    c536:	93 40       	sbci	r25, 0x03	; 3
    c538:	88 f0       	brcs	.+34     	; 0xc55c <update_level+0x17e>
    c53a:	80 91 35 10 	lds	r24, 0x1035
    c53e:	90 91 36 10 	lds	r25, 0x1036
    c542:	18 16       	cp	r1, r24
    c544:	19 06       	cpc	r1, r25
    c546:	54 f4       	brge	.+20     	; 0xc55c <update_level+0x17e>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    c548:	89 e2       	ldi	r24, 0x29	; 41
    c54a:	90 e1       	ldi	r25, 0x10	; 16
    c54c:	0e 94 76 55 	call	0xaaec	; 0xaaec <render_scope>
    c550:	88 23       	and	r24, r24
    c552:	21 f0       	breq	.+8      	; 0xc55c <update_level+0x17e>
    c554:	10 92 16 0c 	sts	0x0C16, r1
    c558:	10 92 15 0c 	sts	0x0C15, r1
		}
		game.scope_counter++;
    c55c:	80 91 15 0c 	lds	r24, 0x0C15
    c560:	90 91 16 0c 	lds	r25, 0x0C16
    c564:	01 96       	adiw	r24, 0x01	; 1
    c566:	90 93 16 0c 	sts	0x0C16, r25
    c56a:	80 93 15 0c 	sts	0x0C15, r24
    c56e:	5e cf       	rjmp	.-324    	; 0xc42c <update_level+0x4e>
		update_level_helper(p2, &player2, p1, &player1);
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
	}
	
	if (game.selection == CPUVCPU) 
    c570:	80 91 17 0c 	lds	r24, 0x0C17
    c574:	83 30       	cpi	r24, 0x03	; 3
    c576:	69 f4       	brne	.+26     	; 0xc592 <update_level+0x1b4>
	{
		demo_counter++;
    c578:	80 91 35 0b 	lds	r24, 0x0B35
    c57c:	90 91 36 0b 	lds	r25, 0x0B36
    c580:	01 96       	adiw	r24, 0x01	; 1
    c582:	90 93 36 0b 	sts	0x0B36, r25
    c586:	80 93 35 0b 	sts	0x0B35, r24
		held = ReadJoypad(0);
    c58a:	80 e0       	ldi	r24, 0x00	; 0
    c58c:	0e 94 39 41 	call	0x8272	; 0x8272 <ReadJoypad>
    c590:	02 c0       	rjmp	.+4      	; 0xc596 <update_level+0x1b8>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    c592:	80 e0       	ldi	r24, 0x00	; 0
    c594:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    c596:	20 91 17 0c 	lds	r18, 0x0C17
    c59a:	23 30       	cpi	r18, 0x03	; 3
    c59c:	e1 f4       	brne	.+56     	; 0xc5d6 <update_level+0x1f8>
    c59e:	8f 70       	andi	r24, 0x0F	; 15
    c5a0:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    c5a2:	89 2b       	or	r24, r25
    c5a4:	39 f4       	brne	.+14     	; 0xc5b4 <update_level+0x1d6>
		 (held & BTN_B)) ||
    c5a6:	80 91 35 0b 	lds	r24, 0x0B35
    c5aa:	90 91 36 0b 	lds	r25, 0x0B36
    c5ae:	88 30       	cpi	r24, 0x08	; 8
    c5b0:	97 40       	sbci	r25, 0x07	; 7
    c5b2:	88 f0       	brcs	.+34     	; 0xc5d6 <update_level+0x1f8>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    c5b4:	10 92 36 0b 	sts	0x0B36, r1
    c5b8:	10 92 35 0b 	sts	0x0B35, r1
		fade_through();
    c5bc:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		init_game_state();
    c5c0:	0e 94 c2 52 	call	0xa584	; 0xa584 <init_game_state>
		load_splash();
	}
}
    c5c4:	df 91       	pop	r29
    c5c6:	cf 91       	pop	r28
    c5c8:	1f 91       	pop	r17
    c5ca:	0f 91       	pop	r16
    c5cc:	ff 90       	pop	r15
    c5ce:	ef 90       	pop	r14
    c5d0:	df 90       	pop	r13
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    c5d2:	0c 94 dc 5e 	jmp	0xbdb8	; 0xbdb8 <load_splash>
	}
}
    c5d6:	df 91       	pop	r29
    c5d8:	cf 91       	pop	r28
    c5da:	1f 91       	pop	r17
    c5dc:	0f 91       	pop	r16
    c5de:	ff 90       	pop	r15
    c5e0:	ef 90       	pop	r14
    c5e2:	df 90       	pop	r13
    c5e4:	08 95       	ret

0000c5e6 <update_tank_rank>:
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    c5e6:	cf 93       	push	r28
    c5e8:	df 93       	push	r29
    c5ea:	ec 01       	movw	r28, r24
	static u16 tank_rank_counter = 0;
	
	// Update
	if (p1->pressed & BTN_X)
    c5ec:	88 81       	ld	r24, Y
    c5ee:	99 81       	ldd	r25, Y+1	; 0x01
    c5f0:	91 ff       	sbrs	r25, 1
    c5f2:	0e c0       	rjmp	.+28     	; 0xc610 <update_tank_rank+0x2a>
	{
		tank_rank_counter = 0;
    c5f4:	10 92 31 0b 	sts	0x0B31, r1
    c5f8:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    c5fc:	2f ef       	ldi	r18, 0xFF	; 255
    c5fe:	47 e1       	ldi	r20, 0x17	; 23
    c600:	67 e0       	ldi	r22, 0x07	; 7
    c602:	84 e0       	ldi	r24, 0x04	; 4
    c604:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		fade_through();
    c608:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		load_splash();
    c60c:	0e 94 dc 5e 	call	0xbdb8	; 0xbdb8 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    c610:	8c 81       	ldd	r24, Y+4	; 0x04
    c612:	9d 81       	ldd	r25, Y+5	; 0x05
    c614:	92 ff       	sbrs	r25, 2
    c616:	1f c0       	rjmp	.+62     	; 0xc656 <update_tank_rank+0x70>
    c618:	8e 81       	ldd	r24, Y+6	; 0x06
    c61a:	8f 3f       	cpi	r24, 0xFF	; 255
    c61c:	e1 f4       	brne	.+56     	; 0xc656 <update_tank_rank+0x70>
	{
		tank_rank_counter = 0;
    c61e:	10 92 31 0b 	sts	0x0B31, r1
    c622:	10 92 30 0b 	sts	0x0B30, r1
	    SFX_NAVIGATE;
    c626:	2f ef       	ldi	r18, 0xFF	; 255
    c628:	47 e1       	ldi	r20, 0x17	; 23
    c62a:	67 e0       	ldi	r22, 0x07	; 7
    c62c:	84 e0       	ldi	r24, 0x04	; 4
    c62e:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
	    init_scores(&scores);
    c632:	84 ec       	ldi	r24, 0xC4	; 196
    c634:	9b e0       	ldi	r25, 0x0B	; 11
    c636:	0e 94 8b 51 	call	0xa316	; 0xa316 <init_scores>
	    init_handles(&handles);
    c63a:	8b ee       	ldi	r24, 0xEB	; 235
    c63c:	9b e0       	ldi	r25, 0x0B	; 11
    c63e:	0e 94 97 51 	call	0xa32e	; 0xa32e <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c642:	84 ec       	ldi	r24, 0xC4	; 196
    c644:	9b e0       	ldi	r25, 0x0B	; 11
    c646:	0e 94 2a 42 	call	0x8454	; 0x8454 <EepromWriteBlock>
    c64a:	8b ee       	ldi	r24, 0xEB	; 235
    c64c:	9b e0       	ldi	r25, 0x0B	; 11
    c64e:	0e 94 2a 42 	call	0x8454	; 0x8454 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    c652:	0e 94 12 5f 	call	0xbe24	; 0xbe24 <load_tank_rank>
	}
	
	if (tank_rank_counter > TANK_RANK_LENGTH)
    c656:	80 91 30 0b 	lds	r24, 0x0B30
    c65a:	90 91 31 0b 	lds	r25, 0x0B31
    c65e:	85 38       	cpi	r24, 0x85	; 133
    c660:	93 40       	sbci	r25, 0x03	; 3
    c662:	70 f0       	brcs	.+28     	; 0xc680 <update_tank_rank+0x9a>
	{
		tank_rank_counter = 0;
    c664:	10 92 31 0b 	sts	0x0B31, r1
    c668:	10 92 30 0b 	sts	0x0B30, r1
		SFX_NAVIGATE;
    c66c:	2f ef       	ldi	r18, 0xFF	; 255
    c66e:	47 e1       	ldi	r20, 0x17	; 23
    c670:	67 e0       	ldi	r22, 0x07	; 7
    c672:	84 e0       	ldi	r24, 0x04	; 4
    c674:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		fade_through();
    c678:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		load_splash();
    c67c:	0e 94 dc 5e 	call	0xbdb8	; 0xbdb8 <load_splash>
	}
	tank_rank_counter++;
    c680:	80 91 30 0b 	lds	r24, 0x0B30
    c684:	90 91 31 0b 	lds	r25, 0x0B31
    c688:	01 96       	adiw	r24, 0x01	; 1
    c68a:	90 93 31 0b 	sts	0x0B31, r25
    c68e:	80 93 30 0b 	sts	0x0B30, r24
}
    c692:	df 91       	pop	r29
    c694:	cf 91       	pop	r28
    c696:	08 95       	ret

0000c698 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    c698:	0f 93       	push	r16
    c69a:	1f 93       	push	r17
    c69c:	cf 93       	push	r28
    c69e:	df 93       	push	r29
    c6a0:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    c6a2:	fb 01       	movw	r30, r22
    c6a4:	20 81       	ld	r18, Z
    c6a6:	31 81       	ldd	r19, Z+1	; 0x01
    c6a8:	f9 01       	movw	r30, r18
    c6aa:	e0 71       	andi	r30, 0x10	; 16
    c6ac:	ff 27       	eor	r31, r31
    c6ae:	24 ff       	sbrs	r18, 4
    c6b0:	09 c0       	rjmp	.+18     	; 0xc6c4 <_handle_select_helper+0x2c>
    c6b2:	8d 81       	ldd	r24, Y+5	; 0x05
    c6b4:	81 11       	cpse	r24, r1
    c6b6:	06 c0       	rjmp	.+12     	; 0xc6c4 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    c6b8:	88 81       	ld	r24, Y
    c6ba:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    c6bc:	87 ff       	sbrs	r24, 7
    c6be:	0f c0       	rjmp	.+30     	; 0xc6de <_handle_select_helper+0x46>
    c6c0:	18 82       	st	Y, r1
    c6c2:	25 c0       	rjmp	.+74     	; 0xc70e <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    c6c4:	b9 01       	movw	r22, r18
    c6c6:	60 72       	andi	r22, 0x20	; 32
    c6c8:	77 27       	eor	r23, r23
    c6ca:	25 ff       	sbrs	r18, 5
    c6cc:	0a c0       	rjmp	.+20     	; 0xc6e2 <_handle_select_helper+0x4a>
    c6ce:	8d 81       	ldd	r24, Y+5	; 0x05
    c6d0:	81 11       	cpse	r24, r1
    c6d2:	07 c0       	rjmp	.+14     	; 0xc6e2 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    c6d4:	88 81       	ld	r24, Y
    c6d6:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    c6d8:	89 30       	cpi	r24, 0x09	; 9
    c6da:	0c f0       	brlt	.+2      	; 0xc6de <_handle_select_helper+0x46>
    c6dc:	88 e0       	ldi	r24, 0x08	; 8
    c6de:	88 83       	st	Y, r24
    c6e0:	16 c0       	rjmp	.+44     	; 0xc70e <_handle_select_helper+0x76>
    c6e2:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    c6e4:	a9 01       	movw	r20, r18
    c6e6:	44 27       	eor	r20, r20
    c6e8:	51 70       	andi	r21, 0x01	; 1
    c6ea:	30 ff       	sbrs	r19, 0
    c6ec:	1a c0       	rjmp	.+52     	; 0xc722 <_handle_select_helper+0x8a>
    c6ee:	ad 81       	ldd	r26, Y+5	; 0x05
    c6f0:	a1 11       	cpse	r26, r1
    c6f2:	17 c0       	rjmp	.+46     	; 0xc722 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    c6f4:	81 e0       	ldi	r24, 0x01	; 1
    c6f6:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    c6f8:	69 91       	ld	r22, Y+
    c6fa:	f3 e0       	ldi	r31, 0x03	; 3
    c6fc:	6f 02       	muls	r22, r31
    c6fe:	b0 01       	movw	r22, r0
    c700:	11 24       	eor	r1, r1
    c702:	63 51       	subi	r22, 0x13	; 19
    c704:	74 4f       	sbci	r23, 0xF4	; 244
    c706:	43 e0       	ldi	r20, 0x03	; 3
    c708:	ce 01       	movw	r24, r28
    c70a:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
		SFX_NAVIGATE;
    c70e:	2f ef       	ldi	r18, 0xFF	; 255
    c710:	47 e1       	ldi	r20, 0x17	; 23
    c712:	67 e0       	ldi	r22, 0x07	; 7
    c714:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    c716:	df 91       	pop	r29
    c718:	cf 91       	pop	r28
    c71a:	1f 91       	pop	r17
    c71c:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    c71e:	0c 94 60 44 	jmp	0x88c0	; 0x88c0 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    c722:	27 ff       	sbrs	r18, 7
    c724:	09 c0       	rjmp	.+18     	; 0xc738 <_handle_select_helper+0xa0>
    c726:	ad 81       	ldd	r26, Y+5	; 0x05
    c728:	a1 30       	cpi	r26, 0x01	; 1
    c72a:	31 f4       	brne	.+12     	; 0xc738 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    c72c:	8c 81       	ldd	r24, Y+4	; 0x04
    c72e:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    c730:	83 30       	cpi	r24, 0x03	; 3
    c732:	5c f0       	brlt	.+22     	; 0xc74a <_handle_select_helper+0xb2>
    c734:	82 e0       	ldi	r24, 0x02	; 2
    c736:	09 c0       	rjmp	.+18     	; 0xc74a <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    c738:	26 ff       	sbrs	r18, 6
    c73a:	0b c0       	rjmp	.+22     	; 0xc752 <_handle_select_helper+0xba>
    c73c:	ed 81       	ldd	r30, Y+5	; 0x05
    c73e:	e1 30       	cpi	r30, 0x01	; 1
    c740:	41 f5       	brne	.+80     	; 0xc792 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    c742:	8c 81       	ldd	r24, Y+4	; 0x04
    c744:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    c746:	87 fd       	sbrc	r24, 7
    c748:	02 c0       	rjmp	.+4      	; 0xc74e <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    c74a:	8c 83       	std	Y+4, r24	; 0x04
    c74c:	e0 cf       	rjmp	.-64     	; 0xc70e <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    c74e:	1c 82       	std	Y+4, r1	; 0x04
    c750:	de cf       	rjmp	.-68     	; 0xc70e <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    c752:	ef 2b       	or	r30, r31
    c754:	69 f0       	breq	.+26     	; 0xc770 <_handle_select_helper+0xd8>
    c756:	8d 81       	ldd	r24, Y+5	; 0x05
    c758:	81 30       	cpi	r24, 0x01	; 1
    c75a:	09 f0       	breq	.+2      	; 0xc75e <_handle_select_helper+0xc6>
    c75c:	43 c0       	rjmp	.+134    	; 0xc7e4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    c75e:	8c 81       	ldd	r24, Y+4	; 0x04
    c760:	c8 0f       	add	r28, r24
    c762:	d1 1d       	adc	r29, r1
    c764:	99 81       	ldd	r25, Y+1	; 0x01
    c766:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    c768:	91 34       	cpi	r25, 0x41	; 65
    c76a:	70 f4       	brcc	.+28     	; 0xc788 <_handle_select_helper+0xf0>
    c76c:	81 e4       	ldi	r24, 0x41	; 65
    c76e:	0f c0       	rjmp	.+30     	; 0xc78e <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    c770:	67 2b       	or	r22, r23
    c772:	89 f0       	breq	.+34     	; 0xc796 <_handle_select_helper+0xfe>
    c774:	8d 81       	ldd	r24, Y+5	; 0x05
    c776:	81 30       	cpi	r24, 0x01	; 1
    c778:	a9 f5       	brne	.+106    	; 0xc7e4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    c77a:	8c 81       	ldd	r24, Y+4	; 0x04
    c77c:	c8 0f       	add	r28, r24
    c77e:	d1 1d       	adc	r29, r1
    c780:	99 81       	ldd	r25, Y+1	; 0x01
    c782:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    c784:	9b 35       	cpi	r25, 0x5B	; 91
    c786:	10 f4       	brcc	.+4      	; 0xc78c <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    c788:	99 83       	std	Y+1, r25	; 0x01
    c78a:	c1 cf       	rjmp	.-126    	; 0xc70e <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    c78c:	8a e5       	ldi	r24, 0x5A	; 90
    c78e:	89 83       	std	Y+1, r24	; 0x01
    c790:	be cf       	rjmp	.-132    	; 0xc70e <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    c792:	67 2b       	or	r22, r23
    c794:	39 f5       	brne	.+78     	; 0xc7e4 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    c796:	45 2b       	or	r20, r21
    c798:	29 f1       	breq	.+74     	; 0xc7e4 <_handle_select_helper+0x14c>
    c79a:	4d 81       	ldd	r20, Y+5	; 0x05
    c79c:	41 30       	cpi	r20, 0x01	; 1
    c79e:	11 f5       	brne	.+68     	; 0xc7e4 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    c7a0:	fe 01       	movw	r30, r28
    c7a2:	21 91       	ld	r18, Z+
    c7a4:	8f 01       	movw	r16, r30
    c7a6:	fc 01       	movw	r30, r24
    c7a8:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    c7aa:	43 e0       	ldi	r20, 0x03	; 3
    c7ac:	b8 01       	movw	r22, r16
    c7ae:	0c 96       	adiw	r24, 0x0c	; 12
    c7b0:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    c7b4:	88 81       	ld	r24, Y
    c7b6:	f3 e0       	ldi	r31, 0x03	; 3
    c7b8:	8f 02       	muls	r24, r31
    c7ba:	c0 01       	movw	r24, r0
    c7bc:	11 24       	eor	r1, r1
    c7be:	43 e0       	ldi	r20, 0x03	; 3
    c7c0:	b8 01       	movw	r22, r16
    c7c2:	83 51       	subi	r24, 0x13	; 19
    c7c4:	94 4f       	sbci	r25, 0xF4	; 244
    c7c6:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
		SFX_NAVIGATE;
    c7ca:	2f ef       	ldi	r18, 0xFF	; 255
    c7cc:	47 e1       	ldi	r20, 0x17	; 23
    c7ce:	67 e0       	ldi	r22, 0x07	; 7
    c7d0:	84 e0       	ldi	r24, 0x04	; 4
    c7d2:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    c7d6:	8b ee       	ldi	r24, 0xEB	; 235
    c7d8:	9b e0       	ldi	r25, 0x0B	; 11
    c7da:	0e 94 2a 42 	call	0x8454	; 0x8454 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    c7de:	82 e0       	ldi	r24, 0x02	; 2
    c7e0:	8d 83       	std	Y+5, r24	; 0x05
    c7e2:	1a c0       	rjmp	.+52     	; 0xc818 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    c7e4:	31 ff       	sbrs	r19, 1
    c7e6:	18 c0       	rjmp	.+48     	; 0xc818 <_handle_select_helper+0x180>
    c7e8:	8d 81       	ldd	r24, Y+5	; 0x05
    c7ea:	81 30       	cpi	r24, 0x01	; 1
    c7ec:	11 f4       	brne	.+4      	; 0xc7f2 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    c7ee:	1d 82       	std	Y+5, r1	; 0x05
    c7f0:	8e cf       	rjmp	.-228    	; 0xc70e <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    c7f2:	82 30       	cpi	r24, 0x02	; 2
    c7f4:	19 f4       	brne	.+6      	; 0xc7fc <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    c7f6:	81 e0       	ldi	r24, 0x01	; 1
    c7f8:	8d 83       	std	Y+5, r24	; 0x05
    c7fa:	89 cf       	rjmp	.-238    	; 0xc70e <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    c7fc:	2f ef       	ldi	r18, 0xFF	; 255
    c7fe:	47 e1       	ldi	r20, 0x17	; 23
    c800:	67 e0       	ldi	r22, 0x07	; 7
    c802:	84 e0       	ldi	r24, 0x04	; 4
    c804:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		fade_through();
    c808:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		load_splash();
	}
}
    c80c:	df 91       	pop	r29
    c80e:	cf 91       	pop	r28
    c810:	1f 91       	pop	r17
    c812:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    c814:	0c 94 dc 5e 	jmp	0xbdb8	; 0xbdb8 <load_splash>
	}
}
    c818:	df 91       	pop	r29
    c81a:	cf 91       	pop	r28
    c81c:	1f 91       	pop	r17
    c81e:	0f 91       	pop	r16
    c820:	08 95       	ret

0000c822 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    c822:	af 92       	push	r10
    c824:	bf 92       	push	r11
    c826:	cf 92       	push	r12
    c828:	df 92       	push	r13
    c82a:	ef 92       	push	r14
    c82c:	ff 92       	push	r15
    c82e:	0f 93       	push	r16
    c830:	1f 93       	push	r17
    c832:	cf 93       	push	r28
    c834:	df 93       	push	r29
    c836:	00 d0       	rcall	.+0      	; 0xc838 <_handle_select_render_helper+0x16>
    c838:	1f 92       	push	r1
    c83a:	cd b7       	in	r28, 0x3d	; 61
    c83c:	de b7       	in	r29, 0x3e	; 62
    c83e:	7c 01       	movw	r14, r24
    c840:	b4 2e       	mov	r11, r20
    c842:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    c844:	80 e2       	ldi	r24, 0x20	; 32
    c846:	89 83       	std	Y+1, r24	; 0x01
    c848:	8a 83       	std	Y+2, r24	; 0x02
    c84a:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    c84c:	f7 01       	movw	r30, r14
    c84e:	85 81       	ldd	r24, Z+5	; 0x05
    c850:	81 11       	cpse	r24, r1
    c852:	1d c0       	rjmp	.+58     	; 0xc88e <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    c854:	40 e0       	ldi	r20, 0x00	; 0
    c856:	6a e1       	ldi	r22, 0x1A	; 26
    c858:	70 e4       	ldi	r23, 0x40	; 64
    c85a:	82 2f       	mov	r24, r18
    c85c:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    c860:	40 e0       	ldi	r20, 0x00	; 0
    c862:	6c e5       	ldi	r22, 0x5C	; 92
    c864:	70 e4       	ldi	r23, 0x40	; 64
    c866:	81 e0       	ldi	r24, 0x01	; 1
    c868:	81 0f       	add	r24, r17
    c86a:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    c86e:	f7 01       	movw	r30, r14
    c870:	40 81       	ld	r20, Z
    c872:	44 0f       	add	r20, r20
    c874:	44 0f       	add	r20, r20
    c876:	44 0f       	add	r20, r20
    c878:	40 5c       	subi	r20, 0xC0	; 192
    c87a:	01 e0       	ldi	r16, 0x01	; 1
    c87c:	21 e0       	ldi	r18, 0x01	; 1
    c87e:	6b 2d       	mov	r22, r11
    c880:	66 0f       	add	r22, r22
    c882:	66 0f       	add	r22, r22
    c884:	66 0f       	add	r22, r22
    c886:	81 2f       	mov	r24, r17
    c888:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
    c88c:	6f c0       	rjmp	.+222    	; 0xc96c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    c88e:	81 30       	cpi	r24, 0x01	; 1
    c890:	09 f0       	breq	.+2      	; 0xc894 <_handle_select_render_helper+0x72>
    c892:	44 c0       	rjmp	.+136    	; 0xc91c <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    c894:	40 e0       	ldi	r20, 0x00	; 0
    c896:	67 e1       	ldi	r22, 0x17	; 23
    c898:	70 e4       	ldi	r23, 0x40	; 64
    c89a:	82 2f       	mov	r24, r18
    c89c:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    c8a0:	aa 24       	eor	r10, r10
    c8a2:	a3 94       	inc	r10
    c8a4:	a1 0e       	add	r10, r17
    c8a6:	40 e0       	ldi	r20, 0x00	; 0
    c8a8:	64 e1       	ldi	r22, 0x14	; 20
    c8aa:	70 e4       	ldi	r23, 0x40	; 64
    c8ac:	8a 2d       	mov	r24, r10
    c8ae:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    c8b2:	cb 2c       	mov	r12, r11
    c8b4:	d1 2c       	mov	r13, r1
    c8b6:	f5 e0       	ldi	r31, 0x05	; 5
    c8b8:	cf 0e       	add	r12, r31
    c8ba:	d1 1c       	adc	r13, r1
    c8bc:	f7 01       	movw	r30, r14
    c8be:	40 81       	ld	r20, Z
    c8c0:	44 0f       	add	r20, r20
    c8c2:	44 0f       	add	r20, r20
    c8c4:	44 0f       	add	r20, r20
    c8c6:	48 5c       	subi	r20, 0xC8	; 200
    c8c8:	84 81       	ldd	r24, Z+4	; 0x04
    c8ca:	b6 01       	movw	r22, r12
    c8cc:	68 0f       	add	r22, r24
    c8ce:	71 1d       	adc	r23, r1
    c8d0:	87 fd       	sbrc	r24, 7
    c8d2:	7a 95       	dec	r23
    c8d4:	66 0f       	add	r22, r22
    c8d6:	66 0f       	add	r22, r22
    c8d8:	66 0f       	add	r22, r22
    c8da:	01 e0       	ldi	r16, 0x01	; 1
    c8dc:	21 e0       	ldi	r18, 0x01	; 1
    c8de:	81 2f       	mov	r24, r17
    c8e0:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    c8e4:	f7 01       	movw	r30, r14
    c8e6:	40 81       	ld	r20, Z
    c8e8:	44 0f       	add	r20, r20
    c8ea:	44 0f       	add	r20, r20
    c8ec:	44 0f       	add	r20, r20
    c8ee:	48 5b       	subi	r20, 0xB8	; 184
    c8f0:	84 81       	ldd	r24, Z+4	; 0x04
    c8f2:	c8 0e       	add	r12, r24
    c8f4:	d1 1c       	adc	r13, r1
    c8f6:	87 fd       	sbrc	r24, 7
    c8f8:	da 94       	dec	r13
    c8fa:	6c 2d       	mov	r22, r12
    c8fc:	66 0f       	add	r22, r22
    c8fe:	66 0f       	add	r22, r22
    c900:	66 0f       	add	r22, r22
    c902:	21 e0       	ldi	r18, 0x01	; 1
    c904:	8a 2d       	mov	r24, r10
    c906:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    c90a:	43 e0       	ldi	r20, 0x03	; 3
    c90c:	b7 01       	movw	r22, r14
    c90e:	6f 5f       	subi	r22, 0xFF	; 255
    c910:	7f 4f       	sbci	r23, 0xFF	; 255
    c912:	ce 01       	movw	r24, r28
    c914:	01 96       	adiw	r24, 0x01	; 1
    c916:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
    c91a:	28 c0       	rjmp	.+80     	; 0xc96c <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    c91c:	82 30       	cpi	r24, 0x02	; 2
    c91e:	31 f5       	brne	.+76     	; 0xc96c <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    c920:	c4 2e       	mov	r12, r20
    c922:	d1 2c       	mov	r13, r1
    c924:	48 e2       	ldi	r20, 0x28	; 40
    c926:	65 e0       	ldi	r22, 0x05	; 5
    c928:	70 e0       	ldi	r23, 0x00	; 0
    c92a:	c6 01       	movw	r24, r12
    c92c:	06 96       	adiw	r24, 0x06	; 6
    c92e:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    c932:	23 e0       	ldi	r18, 0x03	; 3
    c934:	a7 01       	movw	r20, r14
    c936:	4f 5f       	subi	r20, 0xFF	; 255
    c938:	5f 4f       	sbci	r21, 0xFF	; 255
    c93a:	65 e0       	ldi	r22, 0x05	; 5
    c93c:	87 e0       	ldi	r24, 0x07	; 7
    c93e:	8b 0d       	add	r24, r11
    c940:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    c944:	49 e2       	ldi	r20, 0x29	; 41
    c946:	65 e0       	ldi	r22, 0x05	; 5
    c948:	70 e0       	ldi	r23, 0x00	; 0
    c94a:	c6 01       	movw	r24, r12
    c94c:	0a 96       	adiw	r24, 0x0a	; 10
    c94e:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
		MapSprite2(idx, map_none, 0);
    c952:	40 e0       	ldi	r20, 0x00	; 0
    c954:	6c e5       	ldi	r22, 0x5C	; 92
    c956:	70 e4       	ldi	r23, 0x40	; 64
    c958:	81 2f       	mov	r24, r17
    c95a:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    c95e:	40 e0       	ldi	r20, 0x00	; 0
    c960:	6c e5       	ldi	r22, 0x5C	; 92
    c962:	70 e4       	ldi	r23, 0x40	; 64
    c964:	81 e0       	ldi	r24, 0x01	; 1
    c966:	81 0f       	add	r24, r17
    c968:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    c96c:	f7 01       	movw	r30, r14
    c96e:	60 81       	ld	r22, Z
    c970:	68 5f       	subi	r22, 0xF8	; 248
    c972:	23 e0       	ldi	r18, 0x03	; 3
    c974:	ae 01       	movw	r20, r28
    c976:	4f 5f       	subi	r20, 0xFF	; 255
    c978:	5f 4f       	sbci	r21, 0xFF	; 255
    c97a:	85 e0       	ldi	r24, 0x05	; 5
    c97c:	8b 0d       	add	r24, r11
    c97e:	0e 94 16 50 	call	0xa02c	; 0xa02c <LBPrintStr>
}
    c982:	0f 90       	pop	r0
    c984:	0f 90       	pop	r0
    c986:	0f 90       	pop	r0
    c988:	df 91       	pop	r29
    c98a:	cf 91       	pop	r28
    c98c:	1f 91       	pop	r17
    c98e:	0f 91       	pop	r16
    c990:	ff 90       	pop	r15
    c992:	ef 90       	pop	r14
    c994:	df 90       	pop	r13
    c996:	cf 90       	pop	r12
    c998:	bf 90       	pop	r11
    c99a:	af 90       	pop	r10
    c99c:	08 95       	ret

0000c99e <load_handle_select>:

void load_handle_select()
{
    c99e:	8f 92       	push	r8
    c9a0:	9f 92       	push	r9
    c9a2:	af 92       	push	r10
    c9a4:	bf 92       	push	r11
    c9a6:	cf 92       	push	r12
    c9a8:	df 92       	push	r13
    c9aa:	ef 92       	push	r14
    c9ac:	ff 92       	push	r15
    c9ae:	0f 93       	push	r16
    c9b0:	1f 93       	push	r17
    c9b2:	cf 93       	push	r28
    c9b4:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    c9b6:	82 e0       	ldi	r24, 0x02	; 2
    c9b8:	80 93 0b 0c 	sts	0x0C0B, r24
	clear_sprites();
    c9bc:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    c9c0:	4a e5       	ldi	r20, 0x5A	; 90
    c9c2:	59 e7       	ldi	r21, 0x79	; 121
    c9c4:	64 e0       	ldi	r22, 0x04	; 4
    c9c6:	83 e0       	ldi	r24, 0x03	; 3
    c9c8:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    c9cc:	44 e5       	ldi	r20, 0x54	; 84
    c9ce:	59 e7       	ldi	r21, 0x79	; 121
    c9d0:	64 e0       	ldi	r22, 0x04	; 4
    c9d2:	84 e1       	ldi	r24, 0x14	; 20
    c9d4:	0e 94 6a 4e 	call	0x9cd4	; 0x9cd4 <DrawMap2>
	Print(9, 1, (char*) strHandlesTitle);
    c9d8:	45 ef       	ldi	r20, 0xF5	; 245
    c9da:	52 e0       	ldi	r21, 0x02	; 2
    c9dc:	61 e0       	ldi	r22, 0x01	; 1
    c9de:	70 e0       	ldi	r23, 0x00	; 0
    c9e0:	89 e0       	ldi	r24, 0x09	; 9
    c9e2:	90 e0       	ldi	r25, 0x00	; 0
    c9e4:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(6, 5, (char*) strPlayer1);
    c9e8:	44 ee       	ldi	r20, 0xE4	; 228
    c9ea:	52 e0       	ldi	r21, 0x02	; 2
    c9ec:	65 e0       	ldi	r22, 0x05	; 5
    c9ee:	70 e0       	ldi	r23, 0x00	; 0
    c9f0:	86 e0       	ldi	r24, 0x06	; 6
    c9f2:	90 e0       	ldi	r25, 0x00	; 0
    c9f4:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(23, 5, (char*) strPlayer2);
    c9f8:	41 ee       	ldi	r20, 0xE1	; 225
    c9fa:	52 e0       	ldi	r21, 0x02	; 2
    c9fc:	65 e0       	ldi	r22, 0x05	; 5
    c9fe:	70 e0       	ldi	r23, 0x00	; 0
    ca00:	87 e1       	ldi	r24, 0x17	; 23
    ca02:	90 e0       	ldi	r25, 0x00	; 0
    ca04:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
    ca08:	8d ee       	ldi	r24, 0xED	; 237
    ca0a:	e8 2e       	mov	r14, r24
    ca0c:	8b e0       	ldi	r24, 0x0B	; 11
    ca0e:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    ca10:	c0 e0       	ldi	r28, 0x00	; 0
    ca12:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    ca14:	93 e0       	ldi	r25, 0x03	; 3
    ca16:	a9 2e       	mov	r10, r25
    ca18:	b1 2c       	mov	r11, r1
    ca1a:	67 01       	movw	r12, r14
    ca1c:	ce 01       	movw	r24, r28
    ca1e:	b5 01       	movw	r22, r10
    ca20:	0e 94 0d 6a 	call	0xd41a	; 0xd41a <__divmodhi4>
    ca24:	4c 01       	movw	r8, r24
    ca26:	8b 01       	movw	r16, r22
    ca28:	08 5f       	subi	r16, 0xF8	; 248
    ca2a:	1f 4f       	sbci	r17, 0xFF	; 255
    ca2c:	f7 01       	movw	r30, r14
    ca2e:	41 91       	ld	r20, Z+
    ca30:	7f 01       	movw	r14, r30
    ca32:	b8 01       	movw	r22, r16
    ca34:	03 96       	adiw	r24, 0x03	; 3
    ca36:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    ca3a:	f6 01       	movw	r30, r12
    ca3c:	40 81       	ld	r20, Z
    ca3e:	b8 01       	movw	r22, r16
    ca40:	c4 01       	movw	r24, r8
    ca42:	44 96       	adiw	r24, 0x14	; 20
    ca44:	0e 94 05 4f 	call	0x9e0a	; 0x9e0a <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    ca48:	21 96       	adiw	r28, 0x01	; 1
    ca4a:	cb 31       	cpi	r28, 0x1B	; 27
    ca4c:	d1 05       	cpc	r29, r1
    ca4e:	29 f7       	brne	.-54     	; 0xca1a <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
    ca50:	46 ed       	ldi	r20, 0xD6	; 214
    ca52:	52 e0       	ldi	r21, 0x02	; 2
    ca54:	65 e1       	ldi	r22, 0x15	; 21
    ca56:	70 e0       	ldi	r23, 0x00	; 0
    ca58:	88 e0       	ldi	r24, 0x08	; 8
    ca5a:	90 e0       	ldi	r25, 0x00	; 0
    ca5c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(8, 22, (char*) strConfirmHandle);
    ca60:	4a ec       	ldi	r20, 0xCA	; 202
    ca62:	52 e0       	ldi	r21, 0x02	; 2
    ca64:	66 e1       	ldi	r22, 0x16	; 22
    ca66:	70 e0       	ldi	r23, 0x00	; 0
    ca68:	88 e0       	ldi	r24, 0x08	; 8
    ca6a:	90 e0       	ldi	r25, 0x00	; 0
    ca6c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(8, 23, (char*) strCancelHandle);
    ca70:	4f eb       	ldi	r20, 0xBF	; 191
    ca72:	52 e0       	ldi	r21, 0x02	; 2
    ca74:	67 e1       	ldi	r22, 0x17	; 23
    ca76:	70 e0       	ldi	r23, 0x00	; 0
    ca78:	88 e0       	ldi	r24, 0x08	; 8
    ca7a:	90 e0       	ldi	r25, 0x00	; 0
    ca7c:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>
	Print(8, 24, (char*) strChangeHandle);
    ca80:	47 e9       	ldi	r20, 0x97	; 151
    ca82:	52 e0       	ldi	r21, 0x02	; 2
    ca84:	68 e1       	ldi	r22, 0x18	; 24
    ca86:	70 e0       	ldi	r23, 0x00	; 0
    ca88:	88 e0       	ldi	r24, 0x08	; 8
    ca8a:	90 e0       	ldi	r25, 0x00	; 0
}
    ca8c:	df 91       	pop	r29
    ca8e:	cf 91       	pop	r28
    ca90:	1f 91       	pop	r17
    ca92:	0f 91       	pop	r16
    ca94:	ff 90       	pop	r15
    ca96:	ef 90       	pop	r14
    ca98:	df 90       	pop	r13
    ca9a:	cf 90       	pop	r12
    ca9c:	bf 90       	pop	r11
    ca9e:	af 90       	pop	r10
    caa0:	9f 90       	pop	r9
    caa2:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, (char*) strSelectHandle);
	Print(8, 22, (char*) strConfirmHandle);
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
    caa4:	0c 94 ea 4e 	jmp	0x9dd4	; 0x9dd4 <Print>

0000caa8 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    caa8:	0f 93       	push	r16
    caaa:	cf 93       	push	r28
    caac:	df 93       	push	r29
    caae:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	static u8 demo_choice = 0;
	
	// Render
	switch (game.selection)
    cab0:	90 91 17 0c 	lds	r25, 0x0C17
    cab4:	91 30       	cpi	r25, 0x01	; 1
    cab6:	41 f0       	breq	.+16     	; 0xcac8 <update_splash+0x20>
    cab8:	92 30       	cpi	r25, 0x02	; 2
    caba:	51 f0       	breq	.+20     	; 0xcad0 <update_splash+0x28>
    cabc:	91 11       	cpse	r25, r1
    cabe:	0f c0       	rjmp	.+30     	; 0xcade <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    cac0:	01 e0       	ldi	r16, 0x01	; 1
    cac2:	21 e0       	ldi	r18, 0x01	; 1
    cac4:	48 e6       	ldi	r20, 0x68	; 104
    cac6:	07 c0       	rjmp	.+14     	; 0xcad6 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    cac8:	01 e0       	ldi	r16, 0x01	; 1
    caca:	21 e0       	ldi	r18, 0x01	; 1
    cacc:	40 e7       	ldi	r20, 0x70	; 112
    cace:	03 c0       	rjmp	.+6      	; 0xcad6 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    cad0:	01 e0       	ldi	r16, 0x01	; 1
    cad2:	21 e0       	ldi	r18, 0x01	; 1
    cad4:	48 e7       	ldi	r20, 0x78	; 120
    cad6:	60 e3       	ldi	r22, 0x30	; 48
    cad8:	80 e0       	ldi	r24, 0x00	; 0
    cada:	0e 94 3a 4e 	call	0x9c74	; 0x9c74 <MoveSprite>
			break;
	}
	Print(9, 21, (char*) strSelectHandle);
    cade:	46 ed       	ldi	r20, 0xD6	; 214
    cae0:	52 e0       	ldi	r21, 0x02	; 2
    cae2:	65 e1       	ldi	r22, 0x15	; 21
    cae4:	70 e0       	ldi	r23, 0x00	; 0
    cae6:	89 e0       	ldi	r24, 0x09	; 9
    cae8:	90 e0       	ldi	r25, 0x00	; 0
    caea:	0e 94 ea 4e 	call	0x9dd4	; 0x9dd4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    caee:	88 81       	ld	r24, Y
    caf0:	99 81       	ldd	r25, Y+1	; 0x01
    caf2:	00 97       	sbiw	r24, 0x00	; 0
    caf4:	21 f0       	breq	.+8      	; 0xcafe <update_splash+0x56>
    caf6:	10 92 34 0b 	sts	0x0B34, r1
    cafa:	10 92 33 0b 	sts	0x0B33, r1
	
	if (p1->pressed & BTN_UP)
    cafe:	84 ff       	sbrs	r24, 4
    cb00:	0e c0       	rjmp	.+28     	; 0xcb1e <update_splash+0x76>
	{
		game.selection--;
    cb02:	80 91 17 0c 	lds	r24, 0x0C17
    cb06:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    cb08:	87 ff       	sbrs	r24, 7
    cb0a:	11 c0       	rjmp	.+34     	; 0xcb2e <update_splash+0x86>
    cb0c:	10 92 17 0c 	sts	0x0C17, r1
		SFX_NAVIGATE;
    cb10:	2f ef       	ldi	r18, 0xFF	; 255
    cb12:	47 e1       	ldi	r20, 0x17	; 23
    cb14:	67 e0       	ldi	r22, 0x07	; 7
    cb16:	84 e0       	ldi	r24, 0x04	; 4
    cb18:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
    cb1c:	8e c0       	rjmp	.+284    	; 0xcc3a <update_splash+0x192>
	}
	else if (p1->pressed & BTN_DOWN)
    cb1e:	85 ff       	sbrs	r24, 5
    cb20:	09 c0       	rjmp	.+18     	; 0xcb34 <update_splash+0x8c>
	{
		game.selection++;
    cb22:	80 91 17 0c 	lds	r24, 0x0C17
    cb26:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    cb28:	83 30       	cpi	r24, 0x03	; 3
    cb2a:	0c f0       	brlt	.+2      	; 0xcb2e <update_splash+0x86>
    cb2c:	82 e0       	ldi	r24, 0x02	; 2
    cb2e:	80 93 17 0c 	sts	0x0C17, r24
    cb32:	ee cf       	rjmp	.-36     	; 0xcb10 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    cb34:	90 ff       	sbrs	r25, 0
    cb36:	34 c0       	rjmp	.+104    	; 0xcba0 <update_splash+0xf8>
    cb38:	80 91 17 0c 	lds	r24, 0x0C17
    cb3c:	82 30       	cpi	r24, 0x02	; 2
    cb3e:	c8 f4       	brcc	.+50     	; 0xcb72 <update_splash+0xca>
	{
		demo_counter = 0;
    cb40:	10 92 34 0b 	sts	0x0B34, r1
    cb44:	10 92 33 0b 	sts	0x0B33, r1
		p1s.select_state = SELECTING;
    cb48:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    cb4c:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    cb50:	2f ef       	ldi	r18, 0xFF	; 255
    cb52:	47 e1       	ldi	r20, 0x17	; 23
    cb54:	67 e0       	ldi	r22, 0x07	; 7
    cb56:	84 e0       	ldi	r24, 0x04	; 4
    cb58:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		fade_through();
    cb5c:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		load_eeprom(&handles);
    cb60:	8b ee       	ldi	r24, 0xEB	; 235
    cb62:	9b e0       	ldi	r25, 0x0B	; 11
    cb64:	0e 94 ff 52 	call	0xa5fe	; 0xa5fe <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    cb68:	df 91       	pop	r29
    cb6a:	cf 91       	pop	r28
    cb6c:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    cb6e:	0c 94 cf 64 	jmp	0xc99e	; 0xc99e <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    cb72:	82 30       	cpi	r24, 0x02	; 2
    cb74:	a9 f4       	brne	.+42     	; 0xcba0 <update_splash+0xf8>
	{
		demo_counter = 0;
    cb76:	10 92 34 0b 	sts	0x0B34, r1
    cb7a:	10 92 33 0b 	sts	0x0B33, r1
		SFX_NAVIGATE;
    cb7e:	2f ef       	ldi	r18, 0xFF	; 255
    cb80:	47 e1       	ldi	r20, 0x17	; 23
    cb82:	67 e0       	ldi	r22, 0x07	; 7
    cb84:	84 e0       	ldi	r24, 0x04	; 4
    cb86:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
		fade_through();
    cb8a:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
		load_eeprom(&scores);
    cb8e:	84 ec       	ldi	r24, 0xC4	; 196
    cb90:	9b e0       	ldi	r25, 0x0B	; 11
    cb92:	0e 94 ff 52 	call	0xa5fe	; 0xa5fe <load_eeprom>
		demo_choice++;
		return;
		
	}
	demo_counter++;
}
    cb96:	df 91       	pop	r29
    cb98:	cf 91       	pop	r28
    cb9a:	0f 91       	pop	r16
	{
		demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    cb9c:	0c 94 12 5f 	jmp	0xbe24	; 0xbe24 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    cba0:	80 91 33 0b 	lds	r24, 0x0B33
    cba4:	90 91 34 0b 	lds	r25, 0x0B34
    cba8:	88 35       	cpi	r24, 0x58	; 88
    cbaa:	92 40       	sbci	r25, 0x02	; 2
    cbac:	08 f4       	brcc	.+2      	; 0xcbb0 <update_splash+0x108>
    cbae:	45 c0       	rjmp	.+138    	; 0xcc3a <update_splash+0x192>
	{
		demo_counter = 0;
    cbb0:	10 92 34 0b 	sts	0x0B34, r1
    cbb4:	10 92 33 0b 	sts	0x0B33, r1
		if (demo_choice % 2 == 0)
    cbb8:	80 91 32 0b 	lds	r24, 0x0B32
    cbbc:	80 fd       	sbrc	r24, 0
    cbbe:	29 c0       	rjmp	.+82     	; 0xcc12 <update_splash+0x16a>
		{
			game.selection = CPUVCPU;
    cbc0:	83 e0       	ldi	r24, 0x03	; 3
    cbc2:	80 93 17 0c 	sts	0x0C17, r24
			player1.handle_id = 9;
    cbc6:	c9 e0       	ldi	r28, 0x09	; 9
    cbc8:	c0 93 40 0c 	sts	0x0C40, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    cbcc:	43 e0       	ldi	r20, 0x03	; 3
    cbce:	68 e0       	ldi	r22, 0x08	; 8
    cbd0:	7c e0       	ldi	r23, 0x0C	; 12
    cbd2:	81 e4       	ldi	r24, 0x41	; 65
    cbd4:	9c e0       	ldi	r25, 0x0C	; 12
    cbd6:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
			player2.handle_id = 9;
    cbda:	c0 93 ae 0f 	sts	0x0FAE, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    cbde:	43 e0       	ldi	r20, 0x03	; 3
    cbe0:	68 e0       	ldi	r22, 0x08	; 8
    cbe2:	7c e0       	ldi	r23, 0x0C	; 12
    cbe4:	8f ea       	ldi	r24, 0xAF	; 175
    cbe6:	9f e0       	ldi	r25, 0x0F	; 15
    cbe8:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
			SFX_NAVIGATE;
    cbec:	2f ef       	ldi	r18, 0xFF	; 255
    cbee:	47 e1       	ldi	r20, 0x17	; 23
    cbf0:	67 e0       	ldi	r22, 0x07	; 7
    cbf2:	84 e0       	ldi	r24, 0x04	; 4
    cbf4:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
			clear_sprites();
    cbf8:	0e 94 1b 53 	call	0xa636	; 0xa636 <clear_sprites>
			fade_through();
    cbfc:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
			level_transition(LBRandom(0, 9));
    cc00:	69 e0       	ldi	r22, 0x09	; 9
    cc02:	70 e0       	ldi	r23, 0x00	; 0
    cc04:	80 e0       	ldi	r24, 0x00	; 0
    cc06:	90 e0       	ldi	r25, 0x00	; 0
    cc08:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    cc0c:	0e 94 ac 5e 	call	0xbd58	; 0xbd58 <level_transition>
    cc10:	0e c0       	rjmp	.+28     	; 0xcc2e <update_splash+0x186>
		}
		else
		{
			SFX_NAVIGATE;
    cc12:	2f ef       	ldi	r18, 0xFF	; 255
    cc14:	47 e1       	ldi	r20, 0x17	; 23
    cc16:	67 e0       	ldi	r22, 0x07	; 7
    cc18:	84 e0       	ldi	r24, 0x04	; 4
    cc1a:	0e 94 60 44 	call	0x88c0	; 0x88c0 <TriggerNote>
			fade_through();
    cc1e:	0e 94 11 53 	call	0xa622	; 0xa622 <fade_through>
			load_eeprom(&scores);
    cc22:	84 ec       	ldi	r24, 0xC4	; 196
    cc24:	9b e0       	ldi	r25, 0x0B	; 11
    cc26:	0e 94 ff 52 	call	0xa5fe	; 0xa5fe <load_eeprom>
			load_tank_rank();
    cc2a:	0e 94 12 5f 	call	0xbe24	; 0xbe24 <load_tank_rank>
		}
		demo_choice++;
    cc2e:	80 91 32 0b 	lds	r24, 0x0B32
    cc32:	8f 5f       	subi	r24, 0xFF	; 255
    cc34:	80 93 32 0b 	sts	0x0B32, r24
		return;
    cc38:	09 c0       	rjmp	.+18     	; 0xcc4c <update_splash+0x1a4>
		
	}
	demo_counter++;
    cc3a:	80 91 33 0b 	lds	r24, 0x0B33
    cc3e:	90 91 34 0b 	lds	r25, 0x0B34
    cc42:	01 96       	adiw	r24, 0x01	; 1
    cc44:	90 93 34 0b 	sts	0x0B34, r25
    cc48:	80 93 33 0b 	sts	0x0B33, r24
}
    cc4c:	df 91       	pop	r29
    cc4e:	cf 91       	pop	r28
    cc50:	0f 91       	pop	r16
    cc52:	08 95       	ret

0000cc54 <update_handle_select>:
	Print(8, 23, (char*) strCancelHandle);
	Print(8, 24, (char*) strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    cc54:	0f 93       	push	r16
    cc56:	1f 93       	push	r17
    cc58:	cf 93       	push	r28
    cc5a:	df 93       	push	r29
    cc5c:	8c 01       	movw	r16, r24
    cc5e:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    cc60:	26 e0       	ldi	r18, 0x06	; 6
    cc62:	42 e0       	ldi	r20, 0x02	; 2
    cc64:	bc 01       	movw	r22, r24
    cc66:	8a e2       	ldi	r24, 0x2A	; 42
    cc68:	9b e0       	ldi	r25, 0x0B	; 11
    cc6a:	0e 94 11 64 	call	0xc822	; 0xc822 <_handle_select_render_helper>
	if (game.selection == PVP)
    cc6e:	80 91 17 0c 	lds	r24, 0x0C17
    cc72:	81 30       	cpi	r24, 0x01	; 1
    cc74:	39 f4       	brne	.+14     	; 0xcc84 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    cc76:	28 e0       	ldi	r18, 0x08	; 8
    cc78:	43 e1       	ldi	r20, 0x13	; 19
    cc7a:	be 01       	movw	r22, r28
    cc7c:	84 e2       	ldi	r24, 0x24	; 36
    cc7e:	9b e0       	ldi	r25, 0x0B	; 11
    cc80:	0e 94 11 64 	call	0xc822	; 0xc822 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    cc84:	45 e3       	ldi	r20, 0x35	; 53
    cc86:	5c e0       	ldi	r21, 0x0C	; 12
    cc88:	b8 01       	movw	r22, r16
    cc8a:	8a e2       	ldi	r24, 0x2A	; 42
    cc8c:	9b e0       	ldi	r25, 0x0B	; 11
    cc8e:	0e 94 4c 63 	call	0xc698	; 0xc698 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    cc92:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    cc96:	80 91 17 0c 	lds	r24, 0x0C17
    cc9a:	81 30       	cpi	r24, 0x01	; 1
    cc9c:	19 f0       	breq	.+6      	; 0xcca4 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    cc9e:	12 30       	cpi	r17, 0x02	; 2
    cca0:	69 f0       	breq	.+26     	; 0xccbc <update_handle_select+0x68>
    cca2:	21 c0       	rjmp	.+66     	; 0xcce6 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    cca4:	43 ea       	ldi	r20, 0xA3	; 163
    cca6:	5f e0       	ldi	r21, 0x0F	; 15
    cca8:	be 01       	movw	r22, r28
    ccaa:	84 e2       	ldi	r24, 0x24	; 36
    ccac:	9b e0       	ldi	r25, 0x0B	; 11
    ccae:	0e 94 4c 63 	call	0xc698	; 0xc698 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    ccb2:	80 91 29 0b 	lds	r24, 0x0B29
    ccb6:	82 30       	cpi	r24, 0x02	; 2
    ccb8:	b1 f4       	brne	.+44     	; 0xcce6 <update_handle_select+0x92>
    ccba:	f1 cf       	rjmp	.-30     	; 0xcc9e <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    ccbc:	80 91 17 0c 	lds	r24, 0x0C17
    ccc0:	81 11       	cpse	r24, r1
    ccc2:	0a c0       	rjmp	.+20     	; 0xccd8 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    ccc4:	89 e0       	ldi	r24, 0x09	; 9
    ccc6:	80 93 ae 0f 	sts	0x0FAE, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    ccca:	43 e0       	ldi	r20, 0x03	; 3
    cccc:	68 e0       	ldi	r22, 0x08	; 8
    ccce:	7c e0       	ldi	r23, 0x0C	; 12
    ccd0:	8f ea       	ldi	r24, 0xAF	; 175
    ccd2:	9f e0       	ldi	r25, 0x0F	; 15
    ccd4:	0e 94 0a 50 	call	0xa014	; 0xa014 <LBCopyChars>
		}
		level_transition(0);
    ccd8:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    ccda:	df 91       	pop	r29
    ccdc:	cf 91       	pop	r28
    ccde:	1f 91       	pop	r17
    cce0:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    cce2:	0c 94 ac 5e 	jmp	0xbd58	; 0xbd58 <level_transition>
	}
}
    cce6:	df 91       	pop	r29
    cce8:	cf 91       	pop	r28
    ccea:	1f 91       	pop	r17
    ccec:	0f 91       	pop	r16
    ccee:	08 95       	ret

0000ccf0 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    ccf0:	00 97       	sbiw	r24, 0x00	; 0
    ccf2:	41 f0       	breq	.+16     	; 0xcd04 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    ccf4:	81 30       	cpi	r24, 0x01	; 1
    ccf6:	91 05       	cpc	r25, r1
    ccf8:	41 f0       	breq	.+16     	; 0xcd0a <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    ccfa:	82 30       	cpi	r24, 0x02	; 2
    ccfc:	91 05       	cpc	r25, r1
    ccfe:	41 f0       	breq	.+16     	; 0xcd10 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    cd00:	03 97       	sbiw	r24, 0x03	; 3
    cd02:	49 f0       	breq	.+18     	; 0xcd16 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    cd04:	80 e1       	ldi	r24, 0x10	; 16
    cd06:	90 e0       	ldi	r25, 0x00	; 0
    cd08:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    cd0a:	80 e2       	ldi	r24, 0x20	; 32
    cd0c:	90 e0       	ldi	r25, 0x00	; 0
    cd0e:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    cd10:	80 e4       	ldi	r24, 0x40	; 64
    cd12:	90 e0       	ldi	r25, 0x00	; 0
    cd14:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    cd16:	80 e8       	ldi	r24, 0x80	; 128
    cd18:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    cd1a:	08 95       	ret

0000cd1c <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    cd1c:	8f 92       	push	r8
    cd1e:	9f 92       	push	r9
    cd20:	af 92       	push	r10
    cd22:	bf 92       	push	r11
    cd24:	cf 92       	push	r12
    cd26:	df 92       	push	r13
    cd28:	ef 92       	push	r14
    cd2a:	ff 92       	push	r15
    cd2c:	0f 93       	push	r16
    cd2e:	1f 93       	push	r17
    cd30:	cf 93       	push	r28
    cd32:	df 93       	push	r29
    cd34:	e8 2e       	mov	r14, r24
    cd36:	d6 2e       	mov	r13, r22
    cd38:	f4 2e       	mov	r15, r20
    cd3a:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    cd3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    cd3e:	88 23       	and	r24, r24
    cd40:	09 f4       	brne	.+2      	; 0xcd44 <crash_and_turn+0x28>
    cd42:	a8 c0       	rjmp	.+336    	; 0xce94 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    cd44:	f8 01       	movw	r30, r16
    cd46:	c4 80       	ldd	r12, Z+4	; 0x04
    cd48:	c4 fe       	sbrs	r12, 4
    cd4a:	23 c0       	rjmp	.+70     	; 0xcd92 <crash_and_turn+0x76>
    cd4c:	fe e1       	ldi	r31, 0x1E	; 30
    cd4e:	6f 02       	muls	r22, r31
    cd50:	40 01       	movw	r8, r0
    cd52:	11 24       	eor	r1, r1
    cd54:	ae 2c       	mov	r10, r14
    cd56:	bb 24       	eor	r11, r11
    cd58:	a7 fc       	sbrc	r10, 7
    cd5a:	b0 94       	com	r11
    cd5c:	c4 01       	movw	r24, r8
    cd5e:	8a 0d       	add	r24, r10
    cd60:	9b 1d       	adc	r25, r11
    cd62:	01 97       	sbiw	r24, 0x01	; 1
    cd64:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cd68:	81 11       	cpse	r24, r1
    cd6a:	13 c0       	rjmp	.+38     	; 0xcd92 <crash_and_turn+0x76>
    cd6c:	c4 01       	movw	r24, r8
    cd6e:	8a 0d       	add	r24, r10
    cd70:	9b 1d       	adc	r25, r11
    cd72:	4d 96       	adiw	r24, 0x1d	; 29
    cd74:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cd78:	81 11       	cpse	r24, r1
    cd7a:	0b c0       	rjmp	.+22     	; 0xcd92 <crash_and_turn+0x76>
    cd7c:	c4 01       	movw	r24, r8
    cd7e:	8a 0d       	add	r24, r10
    cd80:	9b 1d       	adc	r25, r11
    cd82:	cb 96       	adiw	r24, 0x3b	; 59
    cd84:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cd88:	81 11       	cpse	r24, r1
    cd8a:	03 c0       	rjmp	.+6      	; 0xcd92 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    cd8c:	80 e4       	ldi	r24, 0x40	; 64
    cd8e:	90 e0       	ldi	r25, 0x00	; 0
    cd90:	6f c0       	rjmp	.+222    	; 0xce70 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    cd92:	c6 fe       	sbrs	r12, 6
    cd94:	23 c0       	rjmp	.+70     	; 0xcddc <crash_and_turn+0xc0>
    cd96:	8d 2d       	mov	r24, r13
    cd98:	99 27       	eor	r25, r25
    cd9a:	87 fd       	sbrc	r24, 7
    cd9c:	90 95       	com	r25
    cd9e:	02 96       	adiw	r24, 0x02	; 2
    cda0:	2e e1       	ldi	r18, 0x1E	; 30
    cda2:	28 9f       	mul	r18, r24
    cda4:	50 01       	movw	r10, r0
    cda6:	29 9f       	mul	r18, r25
    cda8:	b0 0c       	add	r11, r0
    cdaa:	11 24       	eor	r1, r1
    cdac:	ae 0c       	add	r10, r14
    cdae:	b1 1c       	adc	r11, r1
    cdb0:	e7 fc       	sbrc	r14, 7
    cdb2:	ba 94       	dec	r11
    cdb4:	c5 01       	movw	r24, r10
    cdb6:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cdba:	81 11       	cpse	r24, r1
    cdbc:	0f c0       	rjmp	.+30     	; 0xcddc <crash_and_turn+0xc0>
    cdbe:	c5 01       	movw	r24, r10
    cdc0:	01 96       	adiw	r24, 0x01	; 1
    cdc2:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cdc6:	81 11       	cpse	r24, r1
    cdc8:	09 c0       	rjmp	.+18     	; 0xcddc <crash_and_turn+0xc0>
    cdca:	c5 01       	movw	r24, r10
    cdcc:	02 96       	adiw	r24, 0x02	; 2
    cdce:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cdd2:	81 11       	cpse	r24, r1
    cdd4:	03 c0       	rjmp	.+6      	; 0xcddc <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    cdd6:	80 e2       	ldi	r24, 0x20	; 32
    cdd8:	90 e0       	ldi	r25, 0x00	; 0
    cdda:	4a c0       	rjmp	.+148    	; 0xce70 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    cddc:	c5 fe       	sbrs	r12, 5
    cdde:	24 c0       	rjmp	.+72     	; 0xce28 <crash_and_turn+0x10c>
    cde0:	fd 2d       	mov	r31, r13
    cde2:	8e e1       	ldi	r24, 0x1E	; 30
    cde4:	f8 02       	muls	r31, r24
    cde6:	40 01       	movw	r8, r0
    cde8:	11 24       	eor	r1, r1
    cdea:	ae 2c       	mov	r10, r14
    cdec:	bb 24       	eor	r11, r11
    cdee:	a7 fc       	sbrc	r10, 7
    cdf0:	b0 94       	com	r11
    cdf2:	c4 01       	movw	r24, r8
    cdf4:	8a 0d       	add	r24, r10
    cdf6:	9b 1d       	adc	r25, r11
    cdf8:	02 96       	adiw	r24, 0x02	; 2
    cdfa:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    cdfe:	81 11       	cpse	r24, r1
    ce00:	13 c0       	rjmp	.+38     	; 0xce28 <crash_and_turn+0x10c>
    ce02:	c4 01       	movw	r24, r8
    ce04:	8a 0d       	add	r24, r10
    ce06:	9b 1d       	adc	r25, r11
    ce08:	80 96       	adiw	r24, 0x20	; 32
    ce0a:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    ce0e:	81 11       	cpse	r24, r1
    ce10:	0b c0       	rjmp	.+22     	; 0xce28 <crash_and_turn+0x10c>
    ce12:	c4 01       	movw	r24, r8
    ce14:	8a 0d       	add	r24, r10
    ce16:	9b 1d       	adc	r25, r11
    ce18:	ce 96       	adiw	r24, 0x3e	; 62
    ce1a:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    ce1e:	81 11       	cpse	r24, r1
    ce20:	03 c0       	rjmp	.+6      	; 0xce28 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    ce22:	80 e8       	ldi	r24, 0x80	; 128
    ce24:	90 e0       	ldi	r25, 0x00	; 0
    ce26:	24 c0       	rjmp	.+72     	; 0xce70 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    ce28:	c7 fe       	sbrs	r12, 7
    ce2a:	29 c0       	rjmp	.+82     	; 0xce7e <crash_and_turn+0x162>
    ce2c:	8d 2d       	mov	r24, r13
    ce2e:	99 27       	eor	r25, r25
    ce30:	87 fd       	sbrc	r24, 7
    ce32:	90 95       	com	r25
    ce34:	01 97       	sbiw	r24, 0x01	; 1
    ce36:	2e e1       	ldi	r18, 0x1E	; 30
    ce38:	28 9f       	mul	r18, r24
    ce3a:	50 01       	movw	r10, r0
    ce3c:	29 9f       	mul	r18, r25
    ce3e:	b0 0c       	add	r11, r0
    ce40:	11 24       	eor	r1, r1
    ce42:	ae 0c       	add	r10, r14
    ce44:	b1 1c       	adc	r11, r1
    ce46:	e7 fc       	sbrc	r14, 7
    ce48:	ba 94       	dec	r11
    ce4a:	c5 01       	movw	r24, r10
    ce4c:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    ce50:	81 11       	cpse	r24, r1
    ce52:	15 c0       	rjmp	.+42     	; 0xce7e <crash_and_turn+0x162>
    ce54:	c5 01       	movw	r24, r10
    ce56:	01 96       	adiw	r24, 0x01	; 1
    ce58:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    ce5c:	81 11       	cpse	r24, r1
    ce5e:	0f c0       	rjmp	.+30     	; 0xce7e <crash_and_turn+0x162>
    ce60:	c5 01       	movw	r24, r10
    ce62:	02 96       	adiw	r24, 0x02	; 2
    ce64:	0e 94 f5 56 	call	0xadea	; 0xadea <solid_tile>
    ce68:	81 11       	cpse	r24, r1
    ce6a:	09 c0       	rjmp	.+18     	; 0xce7e <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    ce6c:	80 e1       	ldi	r24, 0x10	; 16
    ce6e:	90 e0       	ldi	r25, 0x00	; 0
    ce70:	f8 01       	movw	r30, r16
    ce72:	95 83       	std	Z+5, r25	; 0x05
    ce74:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    ce76:	ce 01       	movw	r24, r28
    ce78:	0e 94 25 56 	call	0xac4a	; 0xac4a <recoil_sprite>
			recoiled = 0;
    ce7c:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    ce7e:	f8 01       	movw	r30, r16
    ce80:	24 81       	ldd	r18, Z+4	; 0x04
    ce82:	35 81       	ldd	r19, Z+5	; 0x05
    ce84:	8c 8d       	ldd	r24, Y+28	; 0x1c
    ce86:	9d 8d       	ldd	r25, Y+29	; 0x1d
    ce88:	82 23       	and	r24, r18
    ce8a:	93 23       	and	r25, r19
    ce8c:	89 2b       	or	r24, r25
    ce8e:	11 f0       	breq	.+4      	; 0xce94 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    ce90:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    ce92:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    ce94:	f8 01       	movw	r30, r16
    ce96:	84 81       	ldd	r24, Z+4	; 0x04
    ce98:	86 ff       	sbrs	r24, 6
    ce9a:	05 c0       	rjmp	.+10     	; 0xcea6 <crash_and_turn+0x18a>
    ce9c:	ff 20       	and	r15, r15
    ce9e:	19 f0       	breq	.+6      	; 0xcea6 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    cea0:	80 e1       	ldi	r24, 0x10	; 16
    cea2:	90 e0       	ldi	r25, 0x00	; 0
    cea4:	15 c0       	rjmp	.+42     	; 0xced0 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    cea6:	84 ff       	sbrs	r24, 4
    cea8:	05 c0       	rjmp	.+10     	; 0xceb4 <crash_and_turn+0x198>
    ceaa:	ff 20       	and	r15, r15
    ceac:	19 f0       	breq	.+6      	; 0xceb4 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    ceae:	80 e8       	ldi	r24, 0x80	; 128
    ceb0:	90 e0       	ldi	r25, 0x00	; 0
    ceb2:	0d c0       	rjmp	.+26     	; 0xcece <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    ceb4:	87 ff       	sbrs	r24, 7
    ceb6:	05 c0       	rjmp	.+10     	; 0xcec2 <crash_and_turn+0x1a6>
    ceb8:	ff 20       	and	r15, r15
    ceba:	19 f0       	breq	.+6      	; 0xcec2 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    cebc:	80 e2       	ldi	r24, 0x20	; 32
    cebe:	90 e0       	ldi	r25, 0x00	; 0
    cec0:	06 c0       	rjmp	.+12     	; 0xcece <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    cec2:	85 ff       	sbrs	r24, 5
    cec4:	09 c0       	rjmp	.+18     	; 0xced8 <crash_and_turn+0x1bc>
    cec6:	ff 20       	and	r15, r15
    cec8:	39 f0       	breq	.+14     	; 0xced8 <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    ceca:	80 e4       	ldi	r24, 0x40	; 64
    cecc:	90 e0       	ldi	r25, 0x00	; 0
    cece:	f8 01       	movw	r30, r16
    ced0:	95 83       	std	Z+5, r25	; 0x05
    ced2:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    ced4:	81 e0       	ldi	r24, 0x01	; 1
    ced6:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    ced8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    ceda:	9d 8d       	ldd	r25, Y+29	; 0x1d
    cedc:	80 31       	cpi	r24, 0x10	; 16
    cede:	91 05       	cpc	r25, r1
    cee0:	19 f0       	breq	.+6      	; 0xcee8 <crash_and_turn+0x1cc>
    cee2:	80 32       	cpi	r24, 0x20	; 32
    cee4:	91 05       	cpc	r25, r1
    cee6:	19 f4       	brne	.+6      	; 0xceee <crash_and_turn+0x1d2>
    cee8:	2a a1       	ldd	r18, Y+34	; 0x22
    ceea:	d2 16       	cp	r13, r18
    ceec:	59 f0       	breq	.+22     	; 0xcf04 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    ceee:	80 34       	cpi	r24, 0x40	; 64
    cef0:	91 05       	cpc	r25, r1
    cef2:	19 f0       	breq	.+6      	; 0xcefa <crash_and_turn+0x1de>
    cef4:	80 38       	cpi	r24, 0x80	; 128
    cef6:	91 05       	cpc	r25, r1
    cef8:	39 f4       	brne	.+14     	; 0xcf08 <crash_and_turn+0x1ec>
    cefa:	81 e0       	ldi	r24, 0x01	; 1
    cefc:	9a a1       	ldd	r25, Y+34	; 0x22
    cefe:	e9 12       	cpse	r14, r25
    cf00:	03 c0       	rjmp	.+6      	; 0xcf08 <crash_and_turn+0x1ec>
    cf02:	03 c0       	rjmp	.+6      	; 0xcf0a <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    cf04:	81 e0       	ldi	r24, 0x01	; 1
    cf06:	01 c0       	rjmp	.+2      	; 0xcf0a <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    cf08:	80 e0       	ldi	r24, 0x00	; 0
}
    cf0a:	df 91       	pop	r29
    cf0c:	cf 91       	pop	r28
    cf0e:	1f 91       	pop	r17
    cf10:	0f 91       	pop	r16
    cf12:	ff 90       	pop	r15
    cf14:	ef 90       	pop	r14
    cf16:	df 90       	pop	r13
    cf18:	cf 90       	pop	r12
    cf1a:	bf 90       	pop	r11
    cf1c:	af 90       	pop	r10
    cf1e:	9f 90       	pop	r9
    cf20:	8f 90       	pop	r8
    cf22:	08 95       	ret

0000cf24 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    cf24:	48 2f       	mov	r20, r24
    cf26:	55 27       	eor	r21, r21
    cf28:	47 fd       	sbrc	r20, 7
    cf2a:	50 95       	com	r21
    cf2c:	57 ff       	sbrs	r21, 7
    cf2e:	03 c0       	rjmp	.+6      	; 0xcf36 <get_cpu_goal_direction+0x12>
    cf30:	51 95       	neg	r21
    cf32:	41 95       	neg	r20
    cf34:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    cf36:	26 2f       	mov	r18, r22
    cf38:	33 27       	eor	r19, r19
    cf3a:	27 fd       	sbrc	r18, 7
    cf3c:	30 95       	com	r19
    cf3e:	37 ff       	sbrs	r19, 7
    cf40:	03 c0       	rjmp	.+6      	; 0xcf48 <get_cpu_goal_direction+0x24>
    cf42:	31 95       	neg	r19
    cf44:	21 95       	neg	r18
    cf46:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    cf48:	24 17       	cp	r18, r20
    cf4a:	2c f4       	brge	.+10     	; 0xcf56 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    cf4c:	18 16       	cp	r1, r24
    cf4e:	44 f4       	brge	.+16     	; 0xcf60 <get_cpu_goal_direction+0x3c>
    cf50:	80 e8       	ldi	r24, 0x80	; 128
    cf52:	90 e0       	ldi	r25, 0x00	; 0
    cf54:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    cf56:	16 16       	cp	r1, r22
    cf58:	34 f4       	brge	.+12     	; 0xcf66 <get_cpu_goal_direction+0x42>
    cf5a:	80 e2       	ldi	r24, 0x20	; 32
    cf5c:	90 e0       	ldi	r25, 0x00	; 0
    cf5e:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    cf60:	80 e4       	ldi	r24, 0x40	; 64
    cf62:	90 e0       	ldi	r25, 0x00	; 0
    cf64:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    cf66:	80 e1       	ldi	r24, 0x10	; 16
    cf68:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    cf6a:	08 95       	ret

0000cf6c <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    cf6c:	2f 92       	push	r2
    cf6e:	3f 92       	push	r3
    cf70:	4f 92       	push	r4
    cf72:	5f 92       	push	r5
    cf74:	6f 92       	push	r6
    cf76:	7f 92       	push	r7
    cf78:	8f 92       	push	r8
    cf7a:	9f 92       	push	r9
    cf7c:	af 92       	push	r10
    cf7e:	bf 92       	push	r11
    cf80:	cf 92       	push	r12
    cf82:	df 92       	push	r13
    cf84:	ef 92       	push	r14
    cf86:	ff 92       	push	r15
    cf88:	0f 93       	push	r16
    cf8a:	1f 93       	push	r17
    cf8c:	cf 93       	push	r28
    cf8e:	df 93       	push	r29
    cf90:	00 d0       	rcall	.+0      	; 0xcf92 <get_cpu_joypad_state+0x26>
    cf92:	00 d0       	rcall	.+0      	; 0xcf94 <get_cpu_joypad_state+0x28>
    cf94:	00 d0       	rcall	.+0      	; 0xcf96 <get_cpu_joypad_state+0x2a>
    cf96:	cd b7       	in	r28, 0x3d	; 61
    cf98:	de b7       	in	r29, 0x3e	; 62
    cf9a:	1c 01       	movw	r2, r24
    cf9c:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    cf9e:	db 01       	movw	r26, r22
    cfa0:	13 96       	adiw	r26, 0x03	; 3
    cfa2:	8d 91       	ld	r24, X+
    cfa4:	9d 91       	ld	r25, X+
    cfa6:	0d 90       	ld	r0, X+
    cfa8:	bc 91       	ld	r27, X
    cfaa:	a0 2d       	mov	r26, r0
    cfac:	89 83       	std	Y+1, r24	; 0x01
    cfae:	9a 83       	std	Y+2, r25	; 0x02
    cfb0:	ab 83       	std	Y+3, r26	; 0x03
    cfb2:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    cfb4:	fb 01       	movw	r30, r22
    cfb6:	47 80       	ldd	r4, Z+7	; 0x07
    cfb8:	50 84       	ldd	r5, Z+8	; 0x08
    cfba:	61 84       	ldd	r6, Z+9	; 0x09
    cfbc:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    cfbe:	d1 01       	movw	r26, r2
    cfc0:	13 96       	adiw	r26, 0x03	; 3
    cfc2:	8d 90       	ld	r8, X+
    cfc4:	9d 90       	ld	r9, X+
    cfc6:	ad 90       	ld	r10, X+
    cfc8:	bc 90       	ld	r11, X
    cfca:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    cfcc:	17 96       	adiw	r26, 0x07	; 7
    cfce:	cd 90       	ld	r12, X+
    cfd0:	dd 90       	ld	r13, X+
    cfd2:	ed 90       	ld	r14, X+
    cfd4:	fc 90       	ld	r15, X
    cfd6:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    cfd8:	57 96       	adiw	r26, 0x17	; 23
    cfda:	8c 91       	ld	r24, X
    cfdc:	81 11       	cpse	r24, r1
    cfde:	04 c0       	rjmp	.+8      	; 0xcfe8 <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    cfe0:	fa 01       	movw	r30, r20
    cfe2:	15 82       	std	Z+5, r1	; 0x05
    cfe4:	14 82       	std	Z+4, r1	; 0x04
		return;
    cfe6:	4e c1       	rjmp	.+668    	; 0xd284 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    cfe8:	da 01       	movw	r26, r20
    cfea:	8d 91       	ld	r24, X+
    cfec:	9c 91       	ld	r25, X
    cfee:	11 97       	sbiw	r26, 0x01	; 1
    cff0:	90 ff       	sbrs	r25, 0
    cff2:	02 c0       	rjmp	.+4      	; 0xcff8 <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    cff4:	1d 92       	st	X+, r1
    cff6:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    cff8:	20 91 04 01 	lds	r18, 0x0104
    cffc:	30 91 05 01 	lds	r19, 0x0105
    d000:	c9 01       	movw	r24, r18
    d002:	6a e0       	ldi	r22, 0x0A	; 10
    d004:	70 e0       	ldi	r23, 0x00	; 0
    d006:	0e 94 f9 69 	call	0xd3f2	; 0xd3f2 <__udivmodhi4>
    d00a:	89 2b       	or	r24, r25
    d00c:	49 f4       	brne	.+18     	; 0xd020 <get_cpu_joypad_state+0xb4>
    d00e:	f1 01       	movw	r30, r2
    d010:	87 89       	ldd	r24, Z+23	; 0x17
    d012:	83 33       	cpi	r24, 0x33	; 51
    d014:	28 f0       	brcs	.+10     	; 0xd020 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    d016:	80 e0       	ldi	r24, 0x00	; 0
    d018:	91 e0       	ldi	r25, 0x01	; 1
    d01a:	d8 01       	movw	r26, r16
    d01c:	8d 93       	st	X+, r24
    d01e:	9c 93       	st	X, r25
    d020:	3e 82       	std	Y+6, r3	; 0x06
    d022:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    d024:	c9 01       	movw	r24, r18
    d026:	64 eb       	ldi	r22, 0xB4	; 180
    d028:	70 e0       	ldi	r23, 0x00	; 0
    d02a:	0e 94 f9 69 	call	0xd3f2	; 0xd3f2 <__udivmodhi4>
    d02e:	89 2b       	or	r24, r25
    d030:	41 f0       	breq	.+16     	; 0xd042 <get_cpu_joypad_state+0xd6>
    d032:	f1 01       	movw	r30, r2
    d034:	87 89       	ldd	r24, Z+23	; 0x17
    d036:	8a 30       	cpi	r24, 0x0A	; 10
    d038:	21 f0       	breq	.+8      	; 0xd042 <get_cpu_joypad_state+0xd6>
    d03a:	83 a1       	ldd	r24, Z+35	; 0x23
    d03c:	88 23       	and	r24, r24
    d03e:	09 f4       	brne	.+2      	; 0xd042 <get_cpu_joypad_state+0xd6>
    d040:	7e c0       	rjmp	.+252    	; 0xd13e <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d042:	20 e0       	ldi	r18, 0x00	; 0
    d044:	30 e0       	ldi	r19, 0x00	; 0
    d046:	40 e0       	ldi	r20, 0x00	; 0
    d048:	5e e3       	ldi	r21, 0x3E	; 62
    d04a:	69 81       	ldd	r22, Y+1	; 0x01
    d04c:	7a 81       	ldd	r23, Y+2	; 0x02
    d04e:	8b 81       	ldd	r24, Y+3	; 0x03
    d050:	9c 81       	ldd	r25, Y+4	; 0x04
    d052:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d056:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
    d05a:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    d05c:	20 e0       	ldi	r18, 0x00	; 0
    d05e:	30 e0       	ldi	r19, 0x00	; 0
    d060:	40 e0       	ldi	r20, 0x00	; 0
    d062:	5e e3       	ldi	r21, 0x3E	; 62
    d064:	c3 01       	movw	r24, r6
    d066:	b2 01       	movw	r22, r4
    d068:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d06c:	20 e0       	ldi	r18, 0x00	; 0
    d06e:	30 e0       	ldi	r19, 0x00	; 0
    d070:	40 e4       	ldi	r20, 0x40	; 64
    d072:	50 e4       	ldi	r21, 0x40	; 64
    d074:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    d078:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
    d07c:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    d07e:	20 e0       	ldi	r18, 0x00	; 0
    d080:	30 e0       	ldi	r19, 0x00	; 0
    d082:	40 e0       	ldi	r20, 0x00	; 0
    d084:	5e e3       	ldi	r21, 0x3E	; 62
    d086:	c5 01       	movw	r24, r10
    d088:	b4 01       	movw	r22, r8
    d08a:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d08e:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    d092:	b3 2c       	mov	r11, r3
    d094:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    d096:	20 e0       	ldi	r18, 0x00	; 0
    d098:	30 e0       	ldi	r19, 0x00	; 0
    d09a:	40 e0       	ldi	r20, 0x00	; 0
    d09c:	5e e3       	ldi	r21, 0x3E	; 62
    d09e:	c7 01       	movw	r24, r14
    d0a0:	b6 01       	movw	r22, r12
    d0a2:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d0a6:	20 e0       	ldi	r18, 0x00	; 0
    d0a8:	30 e0       	ldi	r19, 0x00	; 0
    d0aa:	40 e4       	ldi	r20, 0x40	; 64
    d0ac:	50 e4       	ldi	r21, 0x40	; 64
    d0ae:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    d0b2:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    d0b6:	f7 2d       	mov	r31, r7
    d0b8:	f6 1b       	sub	r31, r22
    d0ba:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    d0bc:	ad 81       	ldd	r26, Y+5	; 0x05
    d0be:	be 81       	ldd	r27, Y+6	; 0x06
    d0c0:	93 96       	adiw	r26, 0x23	; 35
    d0c2:	1c 92       	st	X, r1
    d0c4:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    d0c6:	5b 96       	adiw	r26, 0x1b	; 27
    d0c8:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    d0ca:	82 e0       	ldi	r24, 0x02	; 2
    d0cc:	8b 0d       	add	r24, r11
    d0ce:	85 30       	cpi	r24, 0x05	; 5
    d0d0:	d8 f4       	brcc	.+54     	; 0xd108 <get_cpu_joypad_state+0x19c>
    d0d2:	fe 3f       	cpi	r31, 0xFE	; 254
    d0d4:	cc f0       	brlt	.+50     	; 0xd108 <get_cpu_joypad_state+0x19c>
    d0d6:	f3 30       	cpi	r31, 0x03	; 3
    d0d8:	bc f4       	brge	.+46     	; 0xd108 <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    d0da:	64 e0       	ldi	r22, 0x04	; 4
    d0dc:	70 e0       	ldi	r23, 0x00	; 0
    d0de:	80 e0       	ldi	r24, 0x00	; 0
    d0e0:	90 e0       	ldi	r25, 0x00	; 0
    d0e2:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    d0e6:	0e 94 78 66 	call	0xccf0	; 0xccf0 <button_map>
    d0ea:	ed 81       	ldd	r30, Y+5	; 0x05
    d0ec:	fe 81       	ldd	r31, Y+6	; 0x06
    d0ee:	95 8f       	std	Z+29, r25	; 0x1d
    d0f0:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    d0f2:	62 e1       	ldi	r22, 0x12	; 18
    d0f4:	70 e0       	ldi	r23, 0x00	; 0
    d0f6:	85 e0       	ldi	r24, 0x05	; 5
    d0f8:	90 e0       	ldi	r25, 0x00	; 0
    d0fa:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    d0fe:	ad 81       	ldd	r26, Y+5	; 0x05
    d100:	be 81       	ldd	r27, Y+6	; 0x06
    d102:	92 96       	adiw	r26, 0x22	; 34
    d104:	8c 93       	st	X, r24
    d106:	12 c0       	rjmp	.+36     	; 0xd12c <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    d108:	8b 2d       	mov	r24, r11
    d10a:	0e 94 92 67 	call	0xcf24	; 0xcf24 <get_cpu_goal_direction>
    d10e:	ed 81       	ldd	r30, Y+5	; 0x05
    d110:	fe 81       	ldd	r31, Y+6	; 0x06
    d112:	95 8f       	std	Z+29, r25	; 0x1d
    d114:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d116:	80 31       	cpi	r24, 0x10	; 16
    d118:	91 05       	cpc	r25, r1
    d11a:	21 f0       	breq	.+8      	; 0xd124 <get_cpu_joypad_state+0x1b8>
    d11c:	80 97       	sbiw	r24, 0x20	; 32
    d11e:	11 f0       	breq	.+4      	; 0xd124 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    d120:	32 a2       	std	Z+34, r3	; 0x22
    d122:	04 c0       	rjmp	.+8      	; 0xd12c <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d124:	ad 81       	ldd	r26, Y+5	; 0x05
    d126:	be 81       	ldd	r27, Y+6	; 0x06
    d128:	92 96       	adiw	r26, 0x22	; 34
    d12a:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    d12c:	ed 81       	ldd	r30, Y+5	; 0x05
    d12e:	fe 81       	ldd	r31, Y+6	; 0x06
    d130:	84 8d       	ldd	r24, Z+28	; 0x1c
    d132:	95 8d       	ldd	r25, Z+29	; 0x1d
    d134:	d8 01       	movw	r26, r16
    d136:	15 96       	adiw	r26, 0x05	; 5
    d138:	9c 93       	st	X, r25
    d13a:	8e 93       	st	-X, r24
    d13c:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    d13e:	ed 81       	ldd	r30, Y+5	; 0x05
    d140:	fe 81       	ldd	r31, Y+6	; 0x06
    d142:	c3 80       	ldd	r12, Z+3	; 0x03
    d144:	d4 80       	ldd	r13, Z+4	; 0x04
    d146:	e5 80       	ldd	r14, Z+5	; 0x05
    d148:	f6 80       	ldd	r15, Z+6	; 0x06
    d14a:	24 a1       	ldd	r18, Z+36	; 0x24
    d14c:	35 a1       	ldd	r19, Z+37	; 0x25
    d14e:	46 a1       	ldd	r20, Z+38	; 0x26
    d150:	57 a1       	ldd	r21, Z+39	; 0x27
    d152:	c7 01       	movw	r24, r14
    d154:	b6 01       	movw	r22, r12
    d156:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    d15a:	88 23       	and	r24, r24
    d15c:	39 f0       	breq	.+14     	; 0xd16c <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    d15e:	ad 81       	ldd	r26, Y+5	; 0x05
    d160:	be 81       	ldd	r27, Y+6	; 0x06
    d162:	5f 96       	adiw	r26, 0x1f	; 31
    d164:	1c 92       	st	X, r1
    d166:	1e 92       	st	-X, r1
    d168:	5e 97       	sbiw	r26, 0x1e	; 30
    d16a:	07 c0       	rjmp	.+14     	; 0xd17a <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    d16c:	ed 81       	ldd	r30, Y+5	; 0x05
    d16e:	fe 81       	ldd	r31, Y+6	; 0x06
    d170:	86 8d       	ldd	r24, Z+30	; 0x1e
    d172:	97 8d       	ldd	r25, Z+31	; 0x1f
    d174:	01 96       	adiw	r24, 0x01	; 1
    d176:	97 8f       	std	Z+31, r25	; 0x1f
    d178:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    d17a:	ad 81       	ldd	r26, Y+5	; 0x05
    d17c:	be 81       	ldd	r27, Y+6	; 0x06
    d17e:	17 96       	adiw	r26, 0x07	; 7
    d180:	8d 90       	ld	r8, X+
    d182:	9d 90       	ld	r9, X+
    d184:	ad 90       	ld	r10, X+
    d186:	bc 90       	ld	r11, X
    d188:	1a 97       	sbiw	r26, 0x0a	; 10
    d18a:	98 96       	adiw	r26, 0x28	; 40
    d18c:	2d 91       	ld	r18, X+
    d18e:	3d 91       	ld	r19, X+
    d190:	4d 91       	ld	r20, X+
    d192:	5c 91       	ld	r21, X
    d194:	9b 97       	sbiw	r26, 0x2b	; 43
    d196:	c5 01       	movw	r24, r10
    d198:	b4 01       	movw	r22, r8
    d19a:	0e 94 86 6a 	call	0xd50c	; 0xd50c <__cmpsf2>
    d19e:	88 23       	and	r24, r24
    d1a0:	29 f0       	breq	.+10     	; 0xd1ac <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    d1a2:	ed 81       	ldd	r30, Y+5	; 0x05
    d1a4:	fe 81       	ldd	r31, Y+6	; 0x06
    d1a6:	11 a2       	std	Z+33, r1	; 0x21
    d1a8:	10 a2       	std	Z+32, r1	; 0x20
    d1aa:	0b c0       	rjmp	.+22     	; 0xd1c2 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    d1ac:	ad 81       	ldd	r26, Y+5	; 0x05
    d1ae:	be 81       	ldd	r27, Y+6	; 0x06
    d1b0:	90 96       	adiw	r26, 0x20	; 32
    d1b2:	8d 91       	ld	r24, X+
    d1b4:	9c 91       	ld	r25, X
    d1b6:	91 97       	sbiw	r26, 0x21	; 33
    d1b8:	01 96       	adiw	r24, 0x01	; 1
    d1ba:	91 96       	adiw	r26, 0x21	; 33
    d1bc:	9c 93       	st	X, r25
    d1be:	8e 93       	st	-X, r24
    d1c0:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    d1c2:	ed 81       	ldd	r30, Y+5	; 0x05
    d1c4:	fe 81       	ldd	r31, Y+6	; 0x06
    d1c6:	c4 a2       	std	Z+36, r12	; 0x24
    d1c8:	d5 a2       	std	Z+37, r13	; 0x25
    d1ca:	e6 a2       	std	Z+38, r14	; 0x26
    d1cc:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    d1ce:	80 a6       	std	Z+40, r8	; 0x28
    d1d0:	91 a6       	std	Z+41, r9	; 0x29
    d1d2:	a2 a6       	std	Z+42, r10	; 0x2a
    d1d4:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    d1d6:	86 8d       	ldd	r24, Z+30	; 0x1e
    d1d8:	97 8d       	ldd	r25, Z+31	; 0x1f
    d1da:	80 34       	cpi	r24, 0x40	; 64
    d1dc:	91 40       	sbci	r25, 0x01	; 1
    d1de:	90 f0       	brcs	.+36     	; 0xd204 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    d1e0:	64 e0       	ldi	r22, 0x04	; 4
    d1e2:	70 e0       	ldi	r23, 0x00	; 0
    d1e4:	82 e0       	ldi	r24, 0x02	; 2
    d1e6:	90 e0       	ldi	r25, 0x00	; 0
    d1e8:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    d1ec:	0e 94 78 66 	call	0xccf0	; 0xccf0 <button_map>
    d1f0:	f8 01       	movw	r30, r16
    d1f2:	95 83       	std	Z+5, r25	; 0x05
    d1f4:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    d1f6:	ad 81       	ldd	r26, Y+5	; 0x05
    d1f8:	be 81       	ldd	r27, Y+6	; 0x06
    d1fa:	5f 96       	adiw	r26, 0x1f	; 31
    d1fc:	1c 92       	st	X, r1
    d1fe:	1e 92       	st	-X, r1
    d200:	5e 97       	sbiw	r26, 0x1e	; 30
    d202:	40 c0       	rjmp	.+128    	; 0xd284 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    d204:	ed 81       	ldd	r30, Y+5	; 0x05
    d206:	fe 81       	ldd	r31, Y+6	; 0x06
    d208:	80 a1       	ldd	r24, Z+32	; 0x20
    d20a:	91 a1       	ldd	r25, Z+33	; 0x21
    d20c:	80 34       	cpi	r24, 0x40	; 64
    d20e:	91 40       	sbci	r25, 0x01	; 1
    d210:	90 f0       	brcs	.+36     	; 0xd236 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    d212:	62 e0       	ldi	r22, 0x02	; 2
    d214:	70 e0       	ldi	r23, 0x00	; 0
    d216:	80 e0       	ldi	r24, 0x00	; 0
    d218:	90 e0       	ldi	r25, 0x00	; 0
    d21a:	0e 94 47 51 	call	0xa28e	; 0xa28e <LBRandom>
    d21e:	0e 94 78 66 	call	0xccf0	; 0xccf0 <button_map>
    d222:	d8 01       	movw	r26, r16
    d224:	15 96       	adiw	r26, 0x05	; 5
    d226:	9c 93       	st	X, r25
    d228:	8e 93       	st	-X, r24
    d22a:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    d22c:	ed 81       	ldd	r30, Y+5	; 0x05
    d22e:	fe 81       	ldd	r31, Y+6	; 0x06
    d230:	11 a2       	std	Z+33, r1	; 0x21
    d232:	10 a2       	std	Z+32, r1	; 0x20
    d234:	27 c0       	rjmp	.+78     	; 0xd284 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    d236:	20 e0       	ldi	r18, 0x00	; 0
    d238:	30 e0       	ldi	r19, 0x00	; 0
    d23a:	40 e0       	ldi	r20, 0x00	; 0
    d23c:	5e e3       	ldi	r21, 0x3E	; 62
    d23e:	c5 01       	movw	r24, r10
    d240:	b4 01       	movw	r22, r8
    d242:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d246:	20 e0       	ldi	r18, 0x00	; 0
    d248:	30 e0       	ldi	r19, 0x00	; 0
    d24a:	40 e4       	ldi	r20, 0x40	; 64
    d24c:	50 e4       	ldi	r21, 0x40	; 64
    d24e:	0e 94 21 6a 	call	0xd442	; 0xd442 <__subsf3>
    d252:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
    d256:	b6 2e       	mov	r11, r22
    d258:	20 e0       	ldi	r18, 0x00	; 0
    d25a:	30 e0       	ldi	r19, 0x00	; 0
    d25c:	40 e0       	ldi	r20, 0x00	; 0
    d25e:	5e e3       	ldi	r21, 0x3E	; 62
    d260:	c7 01       	movw	r24, r14
    d262:	b6 01       	movw	r22, r12
    d264:	0e 94 d9 6b 	call	0xd7b2	; 0xd7b2 <__mulsf3>
    d268:	0e 94 f2 6a 	call	0xd5e4	; 0xd5e4 <__fixsfsi>
    d26c:	86 2f       	mov	r24, r22
    d26e:	2d 81       	ldd	r18, Y+5	; 0x05
    d270:	3e 81       	ldd	r19, Y+6	; 0x06
    d272:	d9 01       	movw	r26, r18
    d274:	12 96       	adiw	r26, 0x02	; 2
    d276:	4c 91       	ld	r20, X
    d278:	6b 2d       	mov	r22, r11
    d27a:	0e 94 8e 66 	call	0xcd1c	; 0xcd1c <crash_and_turn>
    d27e:	ed 81       	ldd	r30, Y+5	; 0x05
    d280:	fe 81       	ldd	r31, Y+6	; 0x06
    d282:	83 a3       	std	Z+35, r24	; 0x23
}
    d284:	26 96       	adiw	r28, 0x06	; 6
    d286:	0f b6       	in	r0, 0x3f	; 63
    d288:	f8 94       	cli
    d28a:	de bf       	out	0x3e, r29	; 62
    d28c:	0f be       	out	0x3f, r0	; 63
    d28e:	cd bf       	out	0x3d, r28	; 61
    d290:	df 91       	pop	r29
    d292:	cf 91       	pop	r28
    d294:	1f 91       	pop	r17
    d296:	0f 91       	pop	r16
    d298:	ff 90       	pop	r15
    d29a:	ef 90       	pop	r14
    d29c:	df 90       	pop	r13
    d29e:	cf 90       	pop	r12
    d2a0:	bf 90       	pop	r11
    d2a2:	af 90       	pop	r10
    d2a4:	9f 90       	pop	r9
    d2a6:	8f 90       	pop	r8
    d2a8:	7f 90       	pop	r7
    d2aa:	6f 90       	pop	r6
    d2ac:	5f 90       	pop	r5
    d2ae:	4f 90       	pop	r4
    d2b0:	3f 90       	pop	r3
    d2b2:	2f 90       	pop	r2
    d2b4:	08 95       	ret

0000d2b6 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    d2b6:	8f e3       	ldi	r24, 0x3F	; 63
    d2b8:	93 e0       	ldi	r25, 0x03	; 3
    d2ba:	0e 94 6b 43 	call	0x86d6	; 0x86d6 <InitMusicPlayer>
	SetMasterVolume(0xff);
    d2be:	8f ef       	ldi	r24, 0xFF	; 255
    d2c0:	0e 94 be 46 	call	0x8d7c	; 0x8d7c <SetMasterVolume>
	SetTileTable(tiles_data);
    d2c4:	8f e5       	ldi	r24, 0x5F	; 95
    d2c6:	90 e4       	ldi	r25, 0x40	; 64
    d2c8:	0e 94 2a 41 	call	0x8254	; 0x8254 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    d2cc:	8e ec       	ldi	r24, 0xCE	; 206
    d2ce:	96 e3       	ldi	r25, 0x36	; 54
    d2d0:	0e 94 06 41 	call	0x820c	; 0x820c <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    d2d4:	8a e9       	ldi	r24, 0x9A	; 154
    d2d6:	0e 94 27 41 	call	0x824e	; 0x824e <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    d2da:	60 e0       	ldi	r22, 0x00	; 0
    d2dc:	83 e0       	ldi	r24, 0x03	; 3
    d2de:	0e 94 2d 4f 	call	0x9e5a	; 0x9e5a <FadeIn>
	ClearVram();
    d2e2:	0e 94 0b 41 	call	0x8216	; 0x8216 <ClearVram>
	init_scores(&scores);
    d2e6:	84 ec       	ldi	r24, 0xC4	; 196
    d2e8:	9b e0       	ldi	r25, 0x0B	; 11
    d2ea:	0e 94 8b 51 	call	0xa316	; 0xa316 <init_scores>
	init_handles(&handles);
    d2ee:	8b ee       	ldi	r24, 0xEB	; 235
    d2f0:	9b e0       	ldi	r25, 0x0B	; 11
    d2f2:	0e 94 97 51 	call	0xa32e	; 0xa32e <init_handles>
	init_game_state();
    d2f6:	0e 94 c2 52 	call	0xa584	; 0xa584 <init_game_state>
	load_splash();
    d2fa:	0e 94 dc 5e 	call	0xbdb8	; 0xbdb8 <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    d2fe:	81 e0       	ldi	r24, 0x01	; 1
    d300:	90 e0       	ldi	r25, 0x00	; 0
    d302:	0e 94 08 4f 	call	0x9e10	; 0x9e10 <WaitVsync>
		switch (game.current_screen)
    d306:	80 91 0b 0c 	lds	r24, 0x0C0B
    d30a:	81 30       	cpi	r24, 0x01	; 1
    d30c:	91 f0       	breq	.+36     	; 0xd332 <main+0x7c>
    d30e:	28 f0       	brcs	.+10     	; 0xd31a <main+0x64>
    d310:	82 30       	cpi	r24, 0x02	; 2
    d312:	d9 f0       	breq	.+54     	; 0xd34a <main+0x94>
    d314:	83 30       	cpi	r24, 0x03	; 3
    d316:	51 f1       	breq	.+84     	; 0xd36c <main+0xb6>
    d318:	56 c0       	rjmp	.+172    	; 0xd3c6 <main+0x110>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    d31a:	60 e0       	ldi	r22, 0x00	; 0
    d31c:	8d ea       	ldi	r24, 0xAD	; 173
    d31e:	9c e0       	ldi	r25, 0x0C	; 12
    d320:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    d324:	64 ee       	ldi	r22, 0xE4	; 228
    d326:	7b e0       	ldi	r23, 0x0B	; 11
    d328:	8d ea       	ldi	r24, 0xAD	; 173
    d32a:	9c e0       	ldi	r25, 0x0C	; 12
    d32c:	0e 94 54 65 	call	0xcaa8	; 0xcaa8 <update_splash>
				break;
    d330:	4a c0       	rjmp	.+148    	; 0xd3c6 <main+0x110>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    d332:	60 e0       	ldi	r22, 0x00	; 0
    d334:	8d ea       	ldi	r24, 0xAD	; 173
    d336:	9c e0       	ldi	r25, 0x0C	; 12
    d338:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    d33c:	64 ee       	ldi	r22, 0xE4	; 228
    d33e:	7b e0       	ldi	r23, 0x0B	; 11
    d340:	8d ea       	ldi	r24, 0xAD	; 173
    d342:	9c e0       	ldi	r25, 0x0C	; 12
    d344:	0e 94 f3 62 	call	0xc5e6	; 0xc5e6 <update_tank_rank>
				break;
    d348:	3e c0       	rjmp	.+124    	; 0xd3c6 <main+0x110>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    d34a:	60 e0       	ldi	r22, 0x00	; 0
    d34c:	8d ea       	ldi	r24, 0xAD	; 173
    d34e:	9c e0       	ldi	r25, 0x0C	; 12
    d350:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    d354:	61 e0       	ldi	r22, 0x01	; 1
    d356:	84 ee       	ldi	r24, 0xE4	; 228
    d358:	9b e0       	ldi	r25, 0x0B	; 11
    d35a:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    d35e:	64 ee       	ldi	r22, 0xE4	; 228
    d360:	7b e0       	ldi	r23, 0x0B	; 11
    d362:	8d ea       	ldi	r24, 0xAD	; 173
    d364:	9c e0       	ldi	r25, 0x0C	; 12
    d366:	0e 94 2a 66 	call	0xcc54	; 0xcc54 <update_handle_select>
				break;
    d36a:	2d c0       	rjmp	.+90     	; 0xd3c6 <main+0x110>
			case LEVEL:
				if (game.selection == PVCPU)
    d36c:	80 91 17 0c 	lds	r24, 0x0C17
    d370:	81 11       	cpse	r24, r1
    d372:	06 c0       	rjmp	.+12     	; 0xd380 <main+0xca>
				{
					LBGetJoyPadState(&p1, 0);
    d374:	60 e0       	ldi	r22, 0x00	; 0
    d376:	8d ea       	ldi	r24, 0xAD	; 173
    d378:	9c e0       	ldi	r25, 0x0C	; 12
    d37a:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
    d37e:	0a c0       	rjmp	.+20     	; 0xd394 <main+0xde>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    d380:	83 30       	cpi	r24, 0x03	; 3
    d382:	89 f4       	brne	.+34     	; 0xd3a6 <main+0xf0>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    d384:	4d ea       	ldi	r20, 0xAD	; 173
    d386:	5c e0       	ldi	r21, 0x0C	; 12
    d388:	63 ea       	ldi	r22, 0xA3	; 163
    d38a:	7f e0       	ldi	r23, 0x0F	; 15
    d38c:	85 e3       	ldi	r24, 0x35	; 53
    d38e:	9c e0       	ldi	r25, 0x0C	; 12
    d390:	0e 94 b6 67 	call	0xcf6c	; 0xcf6c <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    d394:	44 ee       	ldi	r20, 0xE4	; 228
    d396:	5b e0       	ldi	r21, 0x0B	; 11
    d398:	65 e3       	ldi	r22, 0x35	; 53
    d39a:	7c e0       	ldi	r23, 0x0C	; 12
    d39c:	83 ea       	ldi	r24, 0xA3	; 163
    d39e:	9f e0       	ldi	r25, 0x0F	; 15
    d3a0:	0e 94 b6 67 	call	0xcf6c	; 0xcf6c <get_cpu_joypad_state>
    d3a4:	0a c0       	rjmp	.+20     	; 0xd3ba <main+0x104>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    d3a6:	60 e0       	ldi	r22, 0x00	; 0
    d3a8:	8d ea       	ldi	r24, 0xAD	; 173
    d3aa:	9c e0       	ldi	r25, 0x0C	; 12
    d3ac:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    d3b0:	61 e0       	ldi	r22, 0x01	; 1
    d3b2:	84 ee       	ldi	r24, 0xE4	; 228
    d3b4:	9b e0       	ldi	r25, 0x0B	; 11
    d3b6:	0e 94 bf 4f 	call	0x9f7e	; 0x9f7e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    d3ba:	64 ee       	ldi	r22, 0xE4	; 228
    d3bc:	7b e0       	ldi	r23, 0x0B	; 11
    d3be:	8d ea       	ldi	r24, 0xAD	; 173
    d3c0:	9c e0       	ldi	r25, 0x0C	; 12
    d3c2:	0e 94 ef 61 	call	0xc3de	; 0xc3de <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    d3c6:	80 91 04 01 	lds	r24, 0x0104
    d3ca:	90 91 05 01 	lds	r25, 0x0105
    d3ce:	01 96       	adiw	r24, 0x01	; 1
    d3d0:	90 93 05 01 	sts	0x0105, r25
    d3d4:	80 93 04 01 	sts	0x0104, r24
	}
    d3d8:	92 cf       	rjmp	.-220    	; 0xd2fe <main+0x48>

0000d3da <__udivmodqi4>:
    d3da:	99 1b       	sub	r25, r25
    d3dc:	79 e0       	ldi	r23, 0x09	; 9
    d3de:	04 c0       	rjmp	.+8      	; 0xd3e8 <__udivmodqi4_ep>

0000d3e0 <__udivmodqi4_loop>:
    d3e0:	99 1f       	adc	r25, r25
    d3e2:	96 17       	cp	r25, r22
    d3e4:	08 f0       	brcs	.+2      	; 0xd3e8 <__udivmodqi4_ep>
    d3e6:	96 1b       	sub	r25, r22

0000d3e8 <__udivmodqi4_ep>:
    d3e8:	88 1f       	adc	r24, r24
    d3ea:	7a 95       	dec	r23
    d3ec:	c9 f7       	brne	.-14     	; 0xd3e0 <__udivmodqi4_loop>
    d3ee:	80 95       	com	r24
    d3f0:	08 95       	ret

0000d3f2 <__udivmodhi4>:
    d3f2:	aa 1b       	sub	r26, r26
    d3f4:	bb 1b       	sub	r27, r27
    d3f6:	51 e1       	ldi	r21, 0x11	; 17
    d3f8:	07 c0       	rjmp	.+14     	; 0xd408 <__udivmodhi4_ep>

0000d3fa <__udivmodhi4_loop>:
    d3fa:	aa 1f       	adc	r26, r26
    d3fc:	bb 1f       	adc	r27, r27
    d3fe:	a6 17       	cp	r26, r22
    d400:	b7 07       	cpc	r27, r23
    d402:	10 f0       	brcs	.+4      	; 0xd408 <__udivmodhi4_ep>
    d404:	a6 1b       	sub	r26, r22
    d406:	b7 0b       	sbc	r27, r23

0000d408 <__udivmodhi4_ep>:
    d408:	88 1f       	adc	r24, r24
    d40a:	99 1f       	adc	r25, r25
    d40c:	5a 95       	dec	r21
    d40e:	a9 f7       	brne	.-22     	; 0xd3fa <__udivmodhi4_loop>
    d410:	80 95       	com	r24
    d412:	90 95       	com	r25
    d414:	bc 01       	movw	r22, r24
    d416:	cd 01       	movw	r24, r26
    d418:	08 95       	ret

0000d41a <__divmodhi4>:
    d41a:	97 fb       	bst	r25, 7
    d41c:	07 2e       	mov	r0, r23
    d41e:	16 f4       	brtc	.+4      	; 0xd424 <__divmodhi4+0xa>
    d420:	00 94       	com	r0
    d422:	07 d0       	rcall	.+14     	; 0xd432 <__divmodhi4_neg1>
    d424:	77 fd       	sbrc	r23, 7
    d426:	09 d0       	rcall	.+18     	; 0xd43a <__divmodhi4_neg2>
    d428:	0e 94 f9 69 	call	0xd3f2	; 0xd3f2 <__udivmodhi4>
    d42c:	07 fc       	sbrc	r0, 7
    d42e:	05 d0       	rcall	.+10     	; 0xd43a <__divmodhi4_neg2>
    d430:	3e f4       	brtc	.+14     	; 0xd440 <__divmodhi4_exit>

0000d432 <__divmodhi4_neg1>:
    d432:	90 95       	com	r25
    d434:	81 95       	neg	r24
    d436:	9f 4f       	sbci	r25, 0xFF	; 255
    d438:	08 95       	ret

0000d43a <__divmodhi4_neg2>:
    d43a:	70 95       	com	r23
    d43c:	61 95       	neg	r22
    d43e:	7f 4f       	sbci	r23, 0xFF	; 255

0000d440 <__divmodhi4_exit>:
    d440:	08 95       	ret

0000d442 <__subsf3>:
    d442:	50 58       	subi	r21, 0x80	; 128

0000d444 <__addsf3>:
    d444:	bb 27       	eor	r27, r27
    d446:	aa 27       	eor	r26, r26
    d448:	0e d0       	rcall	.+28     	; 0xd466 <__addsf3x>
    d44a:	75 c1       	rjmp	.+746    	; 0xd736 <__fp_round>
    d44c:	66 d1       	rcall	.+716    	; 0xd71a <__fp_pscA>
    d44e:	30 f0       	brcs	.+12     	; 0xd45c <__addsf3+0x18>
    d450:	6b d1       	rcall	.+726    	; 0xd728 <__fp_pscB>
    d452:	20 f0       	brcs	.+8      	; 0xd45c <__addsf3+0x18>
    d454:	31 f4       	brne	.+12     	; 0xd462 <__addsf3+0x1e>
    d456:	9f 3f       	cpi	r25, 0xFF	; 255
    d458:	11 f4       	brne	.+4      	; 0xd45e <__addsf3+0x1a>
    d45a:	1e f4       	brtc	.+6      	; 0xd462 <__addsf3+0x1e>
    d45c:	5b c1       	rjmp	.+694    	; 0xd714 <__fp_nan>
    d45e:	0e f4       	brtc	.+2      	; 0xd462 <__addsf3+0x1e>
    d460:	e0 95       	com	r30
    d462:	e7 fb       	bst	r30, 7
    d464:	51 c1       	rjmp	.+674    	; 0xd708 <__fp_inf>

0000d466 <__addsf3x>:
    d466:	e9 2f       	mov	r30, r25
    d468:	77 d1       	rcall	.+750    	; 0xd758 <__fp_split3>
    d46a:	80 f3       	brcs	.-32     	; 0xd44c <__addsf3+0x8>
    d46c:	ba 17       	cp	r27, r26
    d46e:	62 07       	cpc	r22, r18
    d470:	73 07       	cpc	r23, r19
    d472:	84 07       	cpc	r24, r20
    d474:	95 07       	cpc	r25, r21
    d476:	18 f0       	brcs	.+6      	; 0xd47e <__addsf3x+0x18>
    d478:	71 f4       	brne	.+28     	; 0xd496 <__addsf3x+0x30>
    d47a:	9e f5       	brtc	.+102    	; 0xd4e2 <__addsf3x+0x7c>
    d47c:	8f c1       	rjmp	.+798    	; 0xd79c <__fp_zero>
    d47e:	0e f4       	brtc	.+2      	; 0xd482 <__addsf3x+0x1c>
    d480:	e0 95       	com	r30
    d482:	0b 2e       	mov	r0, r27
    d484:	ba 2f       	mov	r27, r26
    d486:	a0 2d       	mov	r26, r0
    d488:	0b 01       	movw	r0, r22
    d48a:	b9 01       	movw	r22, r18
    d48c:	90 01       	movw	r18, r0
    d48e:	0c 01       	movw	r0, r24
    d490:	ca 01       	movw	r24, r20
    d492:	a0 01       	movw	r20, r0
    d494:	11 24       	eor	r1, r1
    d496:	ff 27       	eor	r31, r31
    d498:	59 1b       	sub	r21, r25
    d49a:	99 f0       	breq	.+38     	; 0xd4c2 <__addsf3x+0x5c>
    d49c:	59 3f       	cpi	r21, 0xF9	; 249
    d49e:	50 f4       	brcc	.+20     	; 0xd4b4 <__addsf3x+0x4e>
    d4a0:	50 3e       	cpi	r21, 0xE0	; 224
    d4a2:	68 f1       	brcs	.+90     	; 0xd4fe <__addsf3x+0x98>
    d4a4:	1a 16       	cp	r1, r26
    d4a6:	f0 40       	sbci	r31, 0x00	; 0
    d4a8:	a2 2f       	mov	r26, r18
    d4aa:	23 2f       	mov	r18, r19
    d4ac:	34 2f       	mov	r19, r20
    d4ae:	44 27       	eor	r20, r20
    d4b0:	58 5f       	subi	r21, 0xF8	; 248
    d4b2:	f3 cf       	rjmp	.-26     	; 0xd49a <__addsf3x+0x34>
    d4b4:	46 95       	lsr	r20
    d4b6:	37 95       	ror	r19
    d4b8:	27 95       	ror	r18
    d4ba:	a7 95       	ror	r26
    d4bc:	f0 40       	sbci	r31, 0x00	; 0
    d4be:	53 95       	inc	r21
    d4c0:	c9 f7       	brne	.-14     	; 0xd4b4 <__addsf3x+0x4e>
    d4c2:	7e f4       	brtc	.+30     	; 0xd4e2 <__addsf3x+0x7c>
    d4c4:	1f 16       	cp	r1, r31
    d4c6:	ba 0b       	sbc	r27, r26
    d4c8:	62 0b       	sbc	r22, r18
    d4ca:	73 0b       	sbc	r23, r19
    d4cc:	84 0b       	sbc	r24, r20
    d4ce:	ba f0       	brmi	.+46     	; 0xd4fe <__addsf3x+0x98>
    d4d0:	91 50       	subi	r25, 0x01	; 1
    d4d2:	a1 f0       	breq	.+40     	; 0xd4fc <__addsf3x+0x96>
    d4d4:	ff 0f       	add	r31, r31
    d4d6:	bb 1f       	adc	r27, r27
    d4d8:	66 1f       	adc	r22, r22
    d4da:	77 1f       	adc	r23, r23
    d4dc:	88 1f       	adc	r24, r24
    d4de:	c2 f7       	brpl	.-16     	; 0xd4d0 <__addsf3x+0x6a>
    d4e0:	0e c0       	rjmp	.+28     	; 0xd4fe <__addsf3x+0x98>
    d4e2:	ba 0f       	add	r27, r26
    d4e4:	62 1f       	adc	r22, r18
    d4e6:	73 1f       	adc	r23, r19
    d4e8:	84 1f       	adc	r24, r20
    d4ea:	48 f4       	brcc	.+18     	; 0xd4fe <__addsf3x+0x98>
    d4ec:	87 95       	ror	r24
    d4ee:	77 95       	ror	r23
    d4f0:	67 95       	ror	r22
    d4f2:	b7 95       	ror	r27
    d4f4:	f7 95       	ror	r31
    d4f6:	9e 3f       	cpi	r25, 0xFE	; 254
    d4f8:	08 f0       	brcs	.+2      	; 0xd4fc <__addsf3x+0x96>
    d4fa:	b3 cf       	rjmp	.-154    	; 0xd462 <__addsf3+0x1e>
    d4fc:	93 95       	inc	r25
    d4fe:	88 0f       	add	r24, r24
    d500:	08 f0       	brcs	.+2      	; 0xd504 <__addsf3x+0x9e>
    d502:	99 27       	eor	r25, r25
    d504:	ee 0f       	add	r30, r30
    d506:	97 95       	ror	r25
    d508:	87 95       	ror	r24
    d50a:	08 95       	ret

0000d50c <__cmpsf2>:
    d50c:	d9 d0       	rcall	.+434    	; 0xd6c0 <__fp_cmp>
    d50e:	08 f4       	brcc	.+2      	; 0xd512 <__cmpsf2+0x6>
    d510:	81 e0       	ldi	r24, 0x01	; 1
    d512:	08 95       	ret

0000d514 <__divsf3>:
    d514:	0c d0       	rcall	.+24     	; 0xd52e <__divsf3x>
    d516:	0f c1       	rjmp	.+542    	; 0xd736 <__fp_round>
    d518:	07 d1       	rcall	.+526    	; 0xd728 <__fp_pscB>
    d51a:	40 f0       	brcs	.+16     	; 0xd52c <__divsf3+0x18>
    d51c:	fe d0       	rcall	.+508    	; 0xd71a <__fp_pscA>
    d51e:	30 f0       	brcs	.+12     	; 0xd52c <__divsf3+0x18>
    d520:	21 f4       	brne	.+8      	; 0xd52a <__divsf3+0x16>
    d522:	5f 3f       	cpi	r21, 0xFF	; 255
    d524:	19 f0       	breq	.+6      	; 0xd52c <__divsf3+0x18>
    d526:	f0 c0       	rjmp	.+480    	; 0xd708 <__fp_inf>
    d528:	51 11       	cpse	r21, r1
    d52a:	39 c1       	rjmp	.+626    	; 0xd79e <__fp_szero>
    d52c:	f3 c0       	rjmp	.+486    	; 0xd714 <__fp_nan>

0000d52e <__divsf3x>:
    d52e:	14 d1       	rcall	.+552    	; 0xd758 <__fp_split3>
    d530:	98 f3       	brcs	.-26     	; 0xd518 <__divsf3+0x4>

0000d532 <__divsf3_pse>:
    d532:	99 23       	and	r25, r25
    d534:	c9 f3       	breq	.-14     	; 0xd528 <__divsf3+0x14>
    d536:	55 23       	and	r21, r21
    d538:	b1 f3       	breq	.-20     	; 0xd526 <__divsf3+0x12>
    d53a:	95 1b       	sub	r25, r21
    d53c:	55 0b       	sbc	r21, r21
    d53e:	bb 27       	eor	r27, r27
    d540:	aa 27       	eor	r26, r26
    d542:	62 17       	cp	r22, r18
    d544:	73 07       	cpc	r23, r19
    d546:	84 07       	cpc	r24, r20
    d548:	38 f0       	brcs	.+14     	; 0xd558 <__divsf3_pse+0x26>
    d54a:	9f 5f       	subi	r25, 0xFF	; 255
    d54c:	5f 4f       	sbci	r21, 0xFF	; 255
    d54e:	22 0f       	add	r18, r18
    d550:	33 1f       	adc	r19, r19
    d552:	44 1f       	adc	r20, r20
    d554:	aa 1f       	adc	r26, r26
    d556:	a9 f3       	breq	.-22     	; 0xd542 <__divsf3_pse+0x10>
    d558:	33 d0       	rcall	.+102    	; 0xd5c0 <__divsf3_pse+0x8e>
    d55a:	0e 2e       	mov	r0, r30
    d55c:	3a f0       	brmi	.+14     	; 0xd56c <__divsf3_pse+0x3a>
    d55e:	e0 e8       	ldi	r30, 0x80	; 128
    d560:	30 d0       	rcall	.+96     	; 0xd5c2 <__divsf3_pse+0x90>
    d562:	91 50       	subi	r25, 0x01	; 1
    d564:	50 40       	sbci	r21, 0x00	; 0
    d566:	e6 95       	lsr	r30
    d568:	00 1c       	adc	r0, r0
    d56a:	ca f7       	brpl	.-14     	; 0xd55e <__divsf3_pse+0x2c>
    d56c:	29 d0       	rcall	.+82     	; 0xd5c0 <__divsf3_pse+0x8e>
    d56e:	fe 2f       	mov	r31, r30
    d570:	27 d0       	rcall	.+78     	; 0xd5c0 <__divsf3_pse+0x8e>
    d572:	66 0f       	add	r22, r22
    d574:	77 1f       	adc	r23, r23
    d576:	88 1f       	adc	r24, r24
    d578:	bb 1f       	adc	r27, r27
    d57a:	26 17       	cp	r18, r22
    d57c:	37 07       	cpc	r19, r23
    d57e:	48 07       	cpc	r20, r24
    d580:	ab 07       	cpc	r26, r27
    d582:	b0 e8       	ldi	r27, 0x80	; 128
    d584:	09 f0       	breq	.+2      	; 0xd588 <__divsf3_pse+0x56>
    d586:	bb 0b       	sbc	r27, r27
    d588:	80 2d       	mov	r24, r0
    d58a:	bf 01       	movw	r22, r30
    d58c:	ff 27       	eor	r31, r31
    d58e:	93 58       	subi	r25, 0x83	; 131
    d590:	5f 4f       	sbci	r21, 0xFF	; 255
    d592:	2a f0       	brmi	.+10     	; 0xd59e <__divsf3_pse+0x6c>
    d594:	9e 3f       	cpi	r25, 0xFE	; 254
    d596:	51 05       	cpc	r21, r1
    d598:	68 f0       	brcs	.+26     	; 0xd5b4 <__divsf3_pse+0x82>
    d59a:	b6 c0       	rjmp	.+364    	; 0xd708 <__fp_inf>
    d59c:	00 c1       	rjmp	.+512    	; 0xd79e <__fp_szero>
    d59e:	5f 3f       	cpi	r21, 0xFF	; 255
    d5a0:	ec f3       	brlt	.-6      	; 0xd59c <__divsf3_pse+0x6a>
    d5a2:	98 3e       	cpi	r25, 0xE8	; 232
    d5a4:	dc f3       	brlt	.-10     	; 0xd59c <__divsf3_pse+0x6a>
    d5a6:	86 95       	lsr	r24
    d5a8:	77 95       	ror	r23
    d5aa:	67 95       	ror	r22
    d5ac:	b7 95       	ror	r27
    d5ae:	f7 95       	ror	r31
    d5b0:	9f 5f       	subi	r25, 0xFF	; 255
    d5b2:	c9 f7       	brne	.-14     	; 0xd5a6 <__divsf3_pse+0x74>
    d5b4:	88 0f       	add	r24, r24
    d5b6:	91 1d       	adc	r25, r1
    d5b8:	96 95       	lsr	r25
    d5ba:	87 95       	ror	r24
    d5bc:	97 f9       	bld	r25, 7
    d5be:	08 95       	ret
    d5c0:	e1 e0       	ldi	r30, 0x01	; 1
    d5c2:	66 0f       	add	r22, r22
    d5c4:	77 1f       	adc	r23, r23
    d5c6:	88 1f       	adc	r24, r24
    d5c8:	bb 1f       	adc	r27, r27
    d5ca:	62 17       	cp	r22, r18
    d5cc:	73 07       	cpc	r23, r19
    d5ce:	84 07       	cpc	r24, r20
    d5d0:	ba 07       	cpc	r27, r26
    d5d2:	20 f0       	brcs	.+8      	; 0xd5dc <__divsf3_pse+0xaa>
    d5d4:	62 1b       	sub	r22, r18
    d5d6:	73 0b       	sbc	r23, r19
    d5d8:	84 0b       	sbc	r24, r20
    d5da:	ba 0b       	sbc	r27, r26
    d5dc:	ee 1f       	adc	r30, r30
    d5de:	88 f7       	brcc	.-30     	; 0xd5c2 <__divsf3_pse+0x90>
    d5e0:	e0 95       	com	r30
    d5e2:	08 95       	ret

0000d5e4 <__fixsfsi>:
    d5e4:	04 d0       	rcall	.+8      	; 0xd5ee <__fixunssfsi>
    d5e6:	68 94       	set
    d5e8:	b1 11       	cpse	r27, r1
    d5ea:	d9 c0       	rjmp	.+434    	; 0xd79e <__fp_szero>
    d5ec:	08 95       	ret

0000d5ee <__fixunssfsi>:
    d5ee:	bc d0       	rcall	.+376    	; 0xd768 <__fp_splitA>
    d5f0:	88 f0       	brcs	.+34     	; 0xd614 <__fixunssfsi+0x26>
    d5f2:	9f 57       	subi	r25, 0x7F	; 127
    d5f4:	90 f0       	brcs	.+36     	; 0xd61a <__fixunssfsi+0x2c>
    d5f6:	b9 2f       	mov	r27, r25
    d5f8:	99 27       	eor	r25, r25
    d5fa:	b7 51       	subi	r27, 0x17	; 23
    d5fc:	a0 f0       	brcs	.+40     	; 0xd626 <__fixunssfsi+0x38>
    d5fe:	d1 f0       	breq	.+52     	; 0xd634 <__fixunssfsi+0x46>
    d600:	66 0f       	add	r22, r22
    d602:	77 1f       	adc	r23, r23
    d604:	88 1f       	adc	r24, r24
    d606:	99 1f       	adc	r25, r25
    d608:	1a f0       	brmi	.+6      	; 0xd610 <__fixunssfsi+0x22>
    d60a:	ba 95       	dec	r27
    d60c:	c9 f7       	brne	.-14     	; 0xd600 <__fixunssfsi+0x12>
    d60e:	12 c0       	rjmp	.+36     	; 0xd634 <__fixunssfsi+0x46>
    d610:	b1 30       	cpi	r27, 0x01	; 1
    d612:	81 f0       	breq	.+32     	; 0xd634 <__fixunssfsi+0x46>
    d614:	c3 d0       	rcall	.+390    	; 0xd79c <__fp_zero>
    d616:	b1 e0       	ldi	r27, 0x01	; 1
    d618:	08 95       	ret
    d61a:	c0 c0       	rjmp	.+384    	; 0xd79c <__fp_zero>
    d61c:	67 2f       	mov	r22, r23
    d61e:	78 2f       	mov	r23, r24
    d620:	88 27       	eor	r24, r24
    d622:	b8 5f       	subi	r27, 0xF8	; 248
    d624:	39 f0       	breq	.+14     	; 0xd634 <__fixunssfsi+0x46>
    d626:	b9 3f       	cpi	r27, 0xF9	; 249
    d628:	cc f3       	brlt	.-14     	; 0xd61c <__fixunssfsi+0x2e>
    d62a:	86 95       	lsr	r24
    d62c:	77 95       	ror	r23
    d62e:	67 95       	ror	r22
    d630:	b3 95       	inc	r27
    d632:	d9 f7       	brne	.-10     	; 0xd62a <__fixunssfsi+0x3c>
    d634:	3e f4       	brtc	.+14     	; 0xd644 <__fixunssfsi+0x56>
    d636:	90 95       	com	r25
    d638:	80 95       	com	r24
    d63a:	70 95       	com	r23
    d63c:	61 95       	neg	r22
    d63e:	7f 4f       	sbci	r23, 0xFF	; 255
    d640:	8f 4f       	sbci	r24, 0xFF	; 255
    d642:	9f 4f       	sbci	r25, 0xFF	; 255
    d644:	08 95       	ret

0000d646 <__floatunsisf>:
    d646:	e8 94       	clt
    d648:	09 c0       	rjmp	.+18     	; 0xd65c <__floatsisf+0x12>

0000d64a <__floatsisf>:
    d64a:	97 fb       	bst	r25, 7
    d64c:	3e f4       	brtc	.+14     	; 0xd65c <__floatsisf+0x12>
    d64e:	90 95       	com	r25
    d650:	80 95       	com	r24
    d652:	70 95       	com	r23
    d654:	61 95       	neg	r22
    d656:	7f 4f       	sbci	r23, 0xFF	; 255
    d658:	8f 4f       	sbci	r24, 0xFF	; 255
    d65a:	9f 4f       	sbci	r25, 0xFF	; 255
    d65c:	99 23       	and	r25, r25
    d65e:	a9 f0       	breq	.+42     	; 0xd68a <__floatsisf+0x40>
    d660:	f9 2f       	mov	r31, r25
    d662:	96 e9       	ldi	r25, 0x96	; 150
    d664:	bb 27       	eor	r27, r27
    d666:	93 95       	inc	r25
    d668:	f6 95       	lsr	r31
    d66a:	87 95       	ror	r24
    d66c:	77 95       	ror	r23
    d66e:	67 95       	ror	r22
    d670:	b7 95       	ror	r27
    d672:	f1 11       	cpse	r31, r1
    d674:	f8 cf       	rjmp	.-16     	; 0xd666 <__floatsisf+0x1c>
    d676:	fa f4       	brpl	.+62     	; 0xd6b6 <__floatsisf+0x6c>
    d678:	bb 0f       	add	r27, r27
    d67a:	11 f4       	brne	.+4      	; 0xd680 <__floatsisf+0x36>
    d67c:	60 ff       	sbrs	r22, 0
    d67e:	1b c0       	rjmp	.+54     	; 0xd6b6 <__floatsisf+0x6c>
    d680:	6f 5f       	subi	r22, 0xFF	; 255
    d682:	7f 4f       	sbci	r23, 0xFF	; 255
    d684:	8f 4f       	sbci	r24, 0xFF	; 255
    d686:	9f 4f       	sbci	r25, 0xFF	; 255
    d688:	16 c0       	rjmp	.+44     	; 0xd6b6 <__floatsisf+0x6c>
    d68a:	88 23       	and	r24, r24
    d68c:	11 f0       	breq	.+4      	; 0xd692 <__floatsisf+0x48>
    d68e:	96 e9       	ldi	r25, 0x96	; 150
    d690:	11 c0       	rjmp	.+34     	; 0xd6b4 <__floatsisf+0x6a>
    d692:	77 23       	and	r23, r23
    d694:	21 f0       	breq	.+8      	; 0xd69e <__floatsisf+0x54>
    d696:	9e e8       	ldi	r25, 0x8E	; 142
    d698:	87 2f       	mov	r24, r23
    d69a:	76 2f       	mov	r23, r22
    d69c:	05 c0       	rjmp	.+10     	; 0xd6a8 <__floatsisf+0x5e>
    d69e:	66 23       	and	r22, r22
    d6a0:	71 f0       	breq	.+28     	; 0xd6be <__floatsisf+0x74>
    d6a2:	96 e8       	ldi	r25, 0x86	; 134
    d6a4:	86 2f       	mov	r24, r22
    d6a6:	70 e0       	ldi	r23, 0x00	; 0
    d6a8:	60 e0       	ldi	r22, 0x00	; 0
    d6aa:	2a f0       	brmi	.+10     	; 0xd6b6 <__floatsisf+0x6c>
    d6ac:	9a 95       	dec	r25
    d6ae:	66 0f       	add	r22, r22
    d6b0:	77 1f       	adc	r23, r23
    d6b2:	88 1f       	adc	r24, r24
    d6b4:	da f7       	brpl	.-10     	; 0xd6ac <__floatsisf+0x62>
    d6b6:	88 0f       	add	r24, r24
    d6b8:	96 95       	lsr	r25
    d6ba:	87 95       	ror	r24
    d6bc:	97 f9       	bld	r25, 7
    d6be:	08 95       	ret

0000d6c0 <__fp_cmp>:
    d6c0:	99 0f       	add	r25, r25
    d6c2:	00 08       	sbc	r0, r0
    d6c4:	55 0f       	add	r21, r21
    d6c6:	aa 0b       	sbc	r26, r26
    d6c8:	e0 e8       	ldi	r30, 0x80	; 128
    d6ca:	fe ef       	ldi	r31, 0xFE	; 254
    d6cc:	16 16       	cp	r1, r22
    d6ce:	17 06       	cpc	r1, r23
    d6d0:	e8 07       	cpc	r30, r24
    d6d2:	f9 07       	cpc	r31, r25
    d6d4:	c0 f0       	brcs	.+48     	; 0xd706 <__fp_cmp+0x46>
    d6d6:	12 16       	cp	r1, r18
    d6d8:	13 06       	cpc	r1, r19
    d6da:	e4 07       	cpc	r30, r20
    d6dc:	f5 07       	cpc	r31, r21
    d6de:	98 f0       	brcs	.+38     	; 0xd706 <__fp_cmp+0x46>
    d6e0:	62 1b       	sub	r22, r18
    d6e2:	73 0b       	sbc	r23, r19
    d6e4:	84 0b       	sbc	r24, r20
    d6e6:	95 0b       	sbc	r25, r21
    d6e8:	39 f4       	brne	.+14     	; 0xd6f8 <__fp_cmp+0x38>
    d6ea:	0a 26       	eor	r0, r26
    d6ec:	61 f0       	breq	.+24     	; 0xd706 <__fp_cmp+0x46>
    d6ee:	23 2b       	or	r18, r19
    d6f0:	24 2b       	or	r18, r20
    d6f2:	25 2b       	or	r18, r21
    d6f4:	21 f4       	brne	.+8      	; 0xd6fe <__fp_cmp+0x3e>
    d6f6:	08 95       	ret
    d6f8:	0a 26       	eor	r0, r26
    d6fa:	09 f4       	brne	.+2      	; 0xd6fe <__fp_cmp+0x3e>
    d6fc:	a1 40       	sbci	r26, 0x01	; 1
    d6fe:	a6 95       	lsr	r26
    d700:	8f ef       	ldi	r24, 0xFF	; 255
    d702:	81 1d       	adc	r24, r1
    d704:	81 1d       	adc	r24, r1
    d706:	08 95       	ret

0000d708 <__fp_inf>:
    d708:	97 f9       	bld	r25, 7
    d70a:	9f 67       	ori	r25, 0x7F	; 127
    d70c:	80 e8       	ldi	r24, 0x80	; 128
    d70e:	70 e0       	ldi	r23, 0x00	; 0
    d710:	60 e0       	ldi	r22, 0x00	; 0
    d712:	08 95       	ret

0000d714 <__fp_nan>:
    d714:	9f ef       	ldi	r25, 0xFF	; 255
    d716:	80 ec       	ldi	r24, 0xC0	; 192
    d718:	08 95       	ret

0000d71a <__fp_pscA>:
    d71a:	00 24       	eor	r0, r0
    d71c:	0a 94       	dec	r0
    d71e:	16 16       	cp	r1, r22
    d720:	17 06       	cpc	r1, r23
    d722:	18 06       	cpc	r1, r24
    d724:	09 06       	cpc	r0, r25
    d726:	08 95       	ret

0000d728 <__fp_pscB>:
    d728:	00 24       	eor	r0, r0
    d72a:	0a 94       	dec	r0
    d72c:	12 16       	cp	r1, r18
    d72e:	13 06       	cpc	r1, r19
    d730:	14 06       	cpc	r1, r20
    d732:	05 06       	cpc	r0, r21
    d734:	08 95       	ret

0000d736 <__fp_round>:
    d736:	09 2e       	mov	r0, r25
    d738:	03 94       	inc	r0
    d73a:	00 0c       	add	r0, r0
    d73c:	11 f4       	brne	.+4      	; 0xd742 <__fp_round+0xc>
    d73e:	88 23       	and	r24, r24
    d740:	52 f0       	brmi	.+20     	; 0xd756 <__fp_round+0x20>
    d742:	bb 0f       	add	r27, r27
    d744:	40 f4       	brcc	.+16     	; 0xd756 <__fp_round+0x20>
    d746:	bf 2b       	or	r27, r31
    d748:	11 f4       	brne	.+4      	; 0xd74e <__fp_round+0x18>
    d74a:	60 ff       	sbrs	r22, 0
    d74c:	04 c0       	rjmp	.+8      	; 0xd756 <__fp_round+0x20>
    d74e:	6f 5f       	subi	r22, 0xFF	; 255
    d750:	7f 4f       	sbci	r23, 0xFF	; 255
    d752:	8f 4f       	sbci	r24, 0xFF	; 255
    d754:	9f 4f       	sbci	r25, 0xFF	; 255
    d756:	08 95       	ret

0000d758 <__fp_split3>:
    d758:	57 fd       	sbrc	r21, 7
    d75a:	90 58       	subi	r25, 0x80	; 128
    d75c:	44 0f       	add	r20, r20
    d75e:	55 1f       	adc	r21, r21
    d760:	59 f0       	breq	.+22     	; 0xd778 <__fp_splitA+0x10>
    d762:	5f 3f       	cpi	r21, 0xFF	; 255
    d764:	71 f0       	breq	.+28     	; 0xd782 <__fp_splitA+0x1a>
    d766:	47 95       	ror	r20

0000d768 <__fp_splitA>:
    d768:	88 0f       	add	r24, r24
    d76a:	97 fb       	bst	r25, 7
    d76c:	99 1f       	adc	r25, r25
    d76e:	61 f0       	breq	.+24     	; 0xd788 <__fp_splitA+0x20>
    d770:	9f 3f       	cpi	r25, 0xFF	; 255
    d772:	79 f0       	breq	.+30     	; 0xd792 <__fp_splitA+0x2a>
    d774:	87 95       	ror	r24
    d776:	08 95       	ret
    d778:	12 16       	cp	r1, r18
    d77a:	13 06       	cpc	r1, r19
    d77c:	14 06       	cpc	r1, r20
    d77e:	55 1f       	adc	r21, r21
    d780:	f2 cf       	rjmp	.-28     	; 0xd766 <__fp_split3+0xe>
    d782:	46 95       	lsr	r20
    d784:	f1 df       	rcall	.-30     	; 0xd768 <__fp_splitA>
    d786:	08 c0       	rjmp	.+16     	; 0xd798 <__fp_splitA+0x30>
    d788:	16 16       	cp	r1, r22
    d78a:	17 06       	cpc	r1, r23
    d78c:	18 06       	cpc	r1, r24
    d78e:	99 1f       	adc	r25, r25
    d790:	f1 cf       	rjmp	.-30     	; 0xd774 <__fp_splitA+0xc>
    d792:	86 95       	lsr	r24
    d794:	71 05       	cpc	r23, r1
    d796:	61 05       	cpc	r22, r1
    d798:	08 94       	sec
    d79a:	08 95       	ret

0000d79c <__fp_zero>:
    d79c:	e8 94       	clt

0000d79e <__fp_szero>:
    d79e:	bb 27       	eor	r27, r27
    d7a0:	66 27       	eor	r22, r22
    d7a2:	77 27       	eor	r23, r23
    d7a4:	cb 01       	movw	r24, r22
    d7a6:	97 f9       	bld	r25, 7
    d7a8:	08 95       	ret

0000d7aa <__gesf2>:
    d7aa:	8a df       	rcall	.-236    	; 0xd6c0 <__fp_cmp>
    d7ac:	08 f4       	brcc	.+2      	; 0xd7b0 <__gesf2+0x6>
    d7ae:	8f ef       	ldi	r24, 0xFF	; 255
    d7b0:	08 95       	ret

0000d7b2 <__mulsf3>:
    d7b2:	0b d0       	rcall	.+22     	; 0xd7ca <__mulsf3x>
    d7b4:	c0 cf       	rjmp	.-128    	; 0xd736 <__fp_round>
    d7b6:	b1 df       	rcall	.-158    	; 0xd71a <__fp_pscA>
    d7b8:	28 f0       	brcs	.+10     	; 0xd7c4 <__mulsf3+0x12>
    d7ba:	b6 df       	rcall	.-148    	; 0xd728 <__fp_pscB>
    d7bc:	18 f0       	brcs	.+6      	; 0xd7c4 <__mulsf3+0x12>
    d7be:	95 23       	and	r25, r21
    d7c0:	09 f0       	breq	.+2      	; 0xd7c4 <__mulsf3+0x12>
    d7c2:	a2 cf       	rjmp	.-188    	; 0xd708 <__fp_inf>
    d7c4:	a7 cf       	rjmp	.-178    	; 0xd714 <__fp_nan>
    d7c6:	11 24       	eor	r1, r1
    d7c8:	ea cf       	rjmp	.-44     	; 0xd79e <__fp_szero>

0000d7ca <__mulsf3x>:
    d7ca:	c6 df       	rcall	.-116    	; 0xd758 <__fp_split3>
    d7cc:	a0 f3       	brcs	.-24     	; 0xd7b6 <__mulsf3+0x4>

0000d7ce <__mulsf3_pse>:
    d7ce:	95 9f       	mul	r25, r21
    d7d0:	d1 f3       	breq	.-12     	; 0xd7c6 <__mulsf3+0x14>
    d7d2:	95 0f       	add	r25, r21
    d7d4:	50 e0       	ldi	r21, 0x00	; 0
    d7d6:	55 1f       	adc	r21, r21
    d7d8:	62 9f       	mul	r22, r18
    d7da:	f0 01       	movw	r30, r0
    d7dc:	72 9f       	mul	r23, r18
    d7de:	bb 27       	eor	r27, r27
    d7e0:	f0 0d       	add	r31, r0
    d7e2:	b1 1d       	adc	r27, r1
    d7e4:	63 9f       	mul	r22, r19
    d7e6:	aa 27       	eor	r26, r26
    d7e8:	f0 0d       	add	r31, r0
    d7ea:	b1 1d       	adc	r27, r1
    d7ec:	aa 1f       	adc	r26, r26
    d7ee:	64 9f       	mul	r22, r20
    d7f0:	66 27       	eor	r22, r22
    d7f2:	b0 0d       	add	r27, r0
    d7f4:	a1 1d       	adc	r26, r1
    d7f6:	66 1f       	adc	r22, r22
    d7f8:	82 9f       	mul	r24, r18
    d7fa:	22 27       	eor	r18, r18
    d7fc:	b0 0d       	add	r27, r0
    d7fe:	a1 1d       	adc	r26, r1
    d800:	62 1f       	adc	r22, r18
    d802:	73 9f       	mul	r23, r19
    d804:	b0 0d       	add	r27, r0
    d806:	a1 1d       	adc	r26, r1
    d808:	62 1f       	adc	r22, r18
    d80a:	83 9f       	mul	r24, r19
    d80c:	a0 0d       	add	r26, r0
    d80e:	61 1d       	adc	r22, r1
    d810:	22 1f       	adc	r18, r18
    d812:	74 9f       	mul	r23, r20
    d814:	33 27       	eor	r19, r19
    d816:	a0 0d       	add	r26, r0
    d818:	61 1d       	adc	r22, r1
    d81a:	23 1f       	adc	r18, r19
    d81c:	84 9f       	mul	r24, r20
    d81e:	60 0d       	add	r22, r0
    d820:	21 1d       	adc	r18, r1
    d822:	82 2f       	mov	r24, r18
    d824:	76 2f       	mov	r23, r22
    d826:	6a 2f       	mov	r22, r26
    d828:	11 24       	eor	r1, r1
    d82a:	9f 57       	subi	r25, 0x7F	; 127
    d82c:	50 40       	sbci	r21, 0x00	; 0
    d82e:	8a f0       	brmi	.+34     	; 0xd852 <__mulsf3_pse+0x84>
    d830:	e1 f0       	breq	.+56     	; 0xd86a <__mulsf3_pse+0x9c>
    d832:	88 23       	and	r24, r24
    d834:	4a f0       	brmi	.+18     	; 0xd848 <__mulsf3_pse+0x7a>
    d836:	ee 0f       	add	r30, r30
    d838:	ff 1f       	adc	r31, r31
    d83a:	bb 1f       	adc	r27, r27
    d83c:	66 1f       	adc	r22, r22
    d83e:	77 1f       	adc	r23, r23
    d840:	88 1f       	adc	r24, r24
    d842:	91 50       	subi	r25, 0x01	; 1
    d844:	50 40       	sbci	r21, 0x00	; 0
    d846:	a9 f7       	brne	.-22     	; 0xd832 <__mulsf3_pse+0x64>
    d848:	9e 3f       	cpi	r25, 0xFE	; 254
    d84a:	51 05       	cpc	r21, r1
    d84c:	70 f0       	brcs	.+28     	; 0xd86a <__mulsf3_pse+0x9c>
    d84e:	5c cf       	rjmp	.-328    	; 0xd708 <__fp_inf>
    d850:	a6 cf       	rjmp	.-180    	; 0xd79e <__fp_szero>
    d852:	5f 3f       	cpi	r21, 0xFF	; 255
    d854:	ec f3       	brlt	.-6      	; 0xd850 <__mulsf3_pse+0x82>
    d856:	98 3e       	cpi	r25, 0xE8	; 232
    d858:	dc f3       	brlt	.-10     	; 0xd850 <__mulsf3_pse+0x82>
    d85a:	86 95       	lsr	r24
    d85c:	77 95       	ror	r23
    d85e:	67 95       	ror	r22
    d860:	b7 95       	ror	r27
    d862:	f7 95       	ror	r31
    d864:	e7 95       	ror	r30
    d866:	9f 5f       	subi	r25, 0xFF	; 255
    d868:	c1 f7       	brne	.-16     	; 0xd85a <__mulsf3_pse+0x8c>
    d86a:	fe 2b       	or	r31, r30
    d86c:	88 0f       	add	r24, r24
    d86e:	91 1d       	adc	r25, r1
    d870:	96 95       	lsr	r25
    d872:	87 95       	ror	r24
    d874:	97 f9       	bld	r25, 7
    d876:	08 95       	ret

0000d878 <memcpy_P>:
    d878:	fb 01       	movw	r30, r22
    d87a:	dc 01       	movw	r26, r24
    d87c:	02 c0       	rjmp	.+4      	; 0xd882 <memcpy_P+0xa>
    d87e:	05 90       	lpm	r0, Z+
    d880:	0d 92       	st	X+, r0
    d882:	41 50       	subi	r20, 0x01	; 1
    d884:	50 40       	sbci	r21, 0x00	; 0
    d886:	d8 f7       	brcc	.-10     	; 0xd87e <memcpy_P+0x6>
    d888:	08 95       	ret

0000d88a <_exit>:
    d88a:	f8 94       	cli

0000d88c <__stop_program>:
    d88c:	ff cf       	rjmp	.-2      	; 0xd88c <__stop_program>
