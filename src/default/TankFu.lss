
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000054  00800100  0000e92a  0000ea2a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e92a  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f0b  00800154  00800154  0000ea94  2**5
                  ALLOC
  3 .stab         000008c4  00000000  00000000  0000ea80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002ff  00000000  00000000  0000f344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000f643  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000810  00000000  00000000  0000f658  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000c43e  00000000  00000000  0000fe68  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001702  00000000  00000000  0001c2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000029d3  00000000  00000000  0001d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000019ac  00000000  00000000  0002037c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000023b1  00000000  00000000  00021d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ac4d  00000000  00000000  000240d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000970  00000000  00000000  0002ed28  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e7 35 	jmp	0x6bce	; 0x6bce <__ctors_end>
       4:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
       8:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
       c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      10:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      14:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      18:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      1c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      20:	0c 94 fa 3a 	jmp	0x75f4	; 0x75f4 <__vector_8>
      24:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      28:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      2c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      30:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      34:	0c 94 c0 38 	jmp	0x7180	; 0x7180 <__vector_13>
      38:	0c 94 ff 38 	jmp	0x71fe	; 0x71fe <__vector_14>
      3c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      40:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      44:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      48:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      4c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      50:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      54:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      58:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      5c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      60:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      64:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      68:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>
      6c:	0c 94 52 36 	jmp	0x6ca4	; 0x6ca4 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	de 3c e1 3c 3d 3d 41 3d 48 3d e9 3c ee 3c f3 3c     .<.<==A=H=.<.<.<
      ce:	50 3d f6 3c f9 3c fc 3c 37 3d 3a 3d 60 3d           P=.<.<.<7=:=`=

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <__c.3017>:
      e8:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

000000f5 <__c.3019>:
      f5:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

000000fd <__c.3013>:
      fd:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

0000010c <__c.3015>:
     10c:	4f 4b 0d 0a 00                                      OK...

00000111 <__c.3009>:
     111:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     121:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 31 22 2c     ","192.168.4.1",
     131:	32 32 33 33 2c 31 30 30 31 0d 0a 00                 2233,1001...

0000013d <__c.3011>:
     13d:	4f 4b 0d 0a 00                                      OK...

00000142 <__c.3005>:
     142:	41 54 2b 43 49 50 53 54 41 5f 43 55 52 3d 22 31     AT+CIPSTA_CUR="1
     152:	39 32 2e 31 36 38 2e 34 2e 32 22 0d 0a 00           92.168.4.2"...

00000160 <__c.3007>:
     160:	4f 4b 0d 0a 00                                      OK...

00000165 <__c.3003>:
     165:	4f 4b 0d 0a 00                                      OK...

0000016a <__c.2999>:
     16a:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 31 0d     AT+CWMODE_CUR=1.
     17a:	0a 00                                               ..

0000017c <__c.3001>:
     17c:	4f 4b 0d 0a 00                                      OK...

00000181 <__c.2991>:
     181:	41 54 2b 43 49 50 53 45 4e 44 0d 0a 00              AT+CIPSEND...

0000018e <__c.2993>:
     18e:	4f 4b 0d 0a 0d 0a 3e 00                             OK....>.

00000196 <__c.2987>:
     196:	41 54 2b 43 49 50 4d 4f 44 45 3d 31 0d 0a 00        AT+CIPMODE=1...

000001a5 <__c.2989>:
     1a5:	4f 4b 0d 0a 00                                      OK...

000001aa <__c.2983>:
     1aa:	41 54 2b 43 49 50 53 54 41 52 54 3d 22 55 44 50     AT+CIPSTART="UDP
     1ba:	22 2c 22 31 39 32 2e 31 36 38 2e 34 2e 32 22 2c     ","192.168.4.2",
     1ca:	31 30 30 31 2c 32 32 33 33 2c 30 0d 0a 00           1001,2233,0...

000001d8 <__c.2985>:
     1d8:	4f 4b 0d 0a 00                                      OK...

000001dd <__c.2981>:
     1dd:	4f 4b 0d 0a 00                                      OK...

000001e2 <__c.2974>:
     1e2:	4f 4b 0d 0a 00                                      OK...

000001e7 <__c.2972>:
     1e7:	41 54 2b 43 49 50 41 50 4d 41 43 5f 43 55 52 3f     AT+CIPAPMAC_CUR?
     1f7:	0d 0a 00                                            ...

000001fa <__c.2968>:
     1fa:	41 54 2b 43 49 50 41 50 5f 43 55 52 3d 22 31 39     AT+CIPAP_CUR="19
     20a:	32 2e 31 36 38 2e 34 2e 31 22 0d 0a 00              2.168.4.1"...

00000217 <__c.2970>:
     217:	4f 4b 0d 0a 00                                      OK...

0000021c <__c.2964>:
     21c:	41 54 2b 43 57 4d 4f 44 45 5f 43 55 52 3d 32 0d     AT+CWMODE_CUR=2.
     22c:	0a 00                                               ..

0000022e <__c.2966>:
     22e:	4f 4b 0d 0a 00                                      OK...

00000233 <__c.2729>:
     233:	41 54 2b 55 41 52 54 5f 43 55 52 3d 31 39 32 30     AT+UART_CUR=1920
     243:	30 2c 38 2c 31 2c 30 2c 30 0d 0a 00                 0,8,1,0,0...

0000024f <__c.2731>:
     24f:	4f 4b 0d 0a 00                                      OK...

00000254 <__c.2723>:
     254:	41 54 0d 0a 00                                      AT...

00000259 <__c.2725>:
     259:	4f 4b 0d 0a 00                                      OK...

0000025e <__c.2704>:
     25e:	41 54 2b 43 49 50 43 4c 4f 53 45 0d 0a 00           AT+CIPCLOSE...

0000026c <__c.2706>:
     26c:	4f 4b 0d 0a 00                                      OK...

00000271 <__c.2700>:
     271:	41 54 2b 43 49 50 4d 4f 44 45 3d 30 0d 0a 00        AT+CIPMODE=0...

00000280 <__c.2702>:
     280:	4f 4b 0d 0a 00                                      OK...

00000285 <__c.2698>:
     285:	2b 2b 2b 00                                         +++.

00000289 <strCredits>:
     289:	54 41 4e 4b 20 46 55 20 56 33 2e 31 20 46 4f 52     TANK FU V3.1 FOR
     299:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     2a9:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     2b9:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     2c9:	4f 4b 53 00 23 00                                   OKS.#.

000002cf <default_scores>:
     2cf:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     2df:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

000002ed <default_handles>:
     2ed:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     2fd:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000030b <strLevels>:
     30b:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     31b:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     32b:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     33b:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     34b:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     35b:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     36b:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     37b:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     38b:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     39b:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     3ab:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

000003bb <strPaused>:
     3bb:	50 41 55 53 45 44 00                                PAUSED.

000003c2 <strExit>:
     3c2:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

000003cb <strTotal>:
     3cb:	54 4f 54 41 4c 3a 00                                TOTAL:.

000003d2 <strScore>:
     3d2:	53 43 4f 52 45 3a 00                                SCORE:.

000003d9 <strFinalScore>:
     3d9:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

000003e5 <strBy>:
     3e5:	42 59 00                                            BY.

000003e8 <strOwns>:
     3e8:	4f 57 4e 53 00                                      OWNS.

000003ed <strChangeHandle>:
     3ed:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

000003fc <strPlayer2>:
     3fc:	50 32 00                                            P2.

000003ff <strPlayer1>:
     3ff:	50 31 00                                            P1.

00000402 <strVertSep>:
     402:	3b 00                                               ;.

00000404 <strUnderline>:
     404:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000410 <strHandlesTitle>:
     410:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

0000041c <strHighscores>:
     41c:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

00000426 <strCopyright>:
     426:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     436:	4f 4f 4b 53 00                                      OOKS.

0000043b <strSelectHandle>:
     43b:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

0000044a <strCancelHandle>:
     44a:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000455 <strReset>:
     455:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     465:	20 53 4c 20 28 35 53 29 00                           SL (5S).

0000046e <strConfirmHandle>:
     46e:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     47e:	54 00                                               T.

00000480 <strNetworkError>:
     480:	4e 45 54 57 4f 52 4b 20 45 52 52 4f 52 00           NETWORK ERROR.

0000048e <strEnterGameId>:
     48e:	45 4e 54 45 52 20 48 4f 53 54 20 47 41 4d 45 20     ENTER HOST GAME 
     49e:	49 44 00                                            ID.

000004a1 <strConnecting>:
     4a1:	43 4f 4e 4e 45 43 54 49 4e 47 2e 2e 2e 00           CONNECTING....

000004af <strWaitingForNetOppenent>:
     4af:	57 41 49 54 49 4e 47 20 4f 4e 20 4c 41 4e 20 4f     WAITING ON LAN O
     4bf:	50 50 4f 4e 45 4e 54 2e 2e 2e 00                    PPONENT....

000004ca <strShareGameId>:
     4ca:	53 48 41 52 45 20 59 4f 55 52 20 47 41 4d 45 20     SHARE YOUR GAME 
     4da:	49 44 00                                            ID.

000004dd <strLookingForWifi>:
     4dd:	4c 4f 4f 4b 49 4e 47 20 46 4f 52 20 57 49 46 49     LOOKING FOR WIFI
     4ed:	20 44 45 56 49 43 45 2e 2e 2e 00                     DEVICE....

000004f8 <strJoinNetGame>:
     4f8:	4a 4f 49 4e 20 4c 41 4e 20 47 41 4d 45 00           JOIN LAN GAME.

00000506 <strHostNetGame>:
     506:	48 4f 53 54 20 4c 41 4e 20 47 41 4d 45 00           HOST LAN GAME.

00000514 <str2Player>:
     514:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000525 <str1Player>:
     525:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

00000533 <bauds>:
     533:	b9 00 7b 00 5c 00 3d 00 2e 00 1e 00 16 00 0f 00     ..{.\.=.........

00000543 <my_patches>:
     543:	00 00 00 9b 06 00 00 00 00 00 00 00 45 06 00 00     ............E...
     553:	00 00 00 00 00 23 06 00 00 00 00 00 00 00 34 06     .....#........4.
     563:	00 00 00 00 00 00 00 34 06 00 00 00 00 00 00 00     .......4........
     573:	45 06 00 00 00 00 00 00 00 2d 07 00 00 00 00 00     E........-......
     583:	00 00 8b 05 00 00 00 00                             ........

0000058b <ad_alarm>:
     58b:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     59b:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     5ab:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     5bb:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     5cb:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     5db:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     5eb:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     5fb:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     60b:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     61b:	01 03 01 01 05 00 00 ff                             ........

00000623 <ad_item>:
     623:	00 02 04 00 07 60 00 00 d8 00 08 64 01 05 00 00     .....`.....d....
     633:	ff                                                  .

00000634 <ad_navigate>:
     634:	00 02 04 00 07 50 00 00 d8 00 08 3c 01 05 00 00     .....P.....<....
     644:	ff                                                  .

00000645 <ad_cannonball>:
     645:	00 02 03 00 07 50 00 08 32 01 04 06 01 04 06 01     .....P..2.......
     655:	04 06 01 07 00 03 07 7f 00 08 32 01 04 06 01 04     ..........2.....
     665:	06 01 04 06 01 07 00 03 08 32 00 07 20 01 04 06     .........2.. ...
     675:	01 04 06 01 04 06 01 04 06 01 07 00 03 08 32 00     ..............2.
     685:	07 0f 01 04 06 01 04 06 01 04 06 01 04 06 01 07     ................
     695:	00 01 05 00 00 ff                                   ......

0000069b <ad_brick_explode>:
     69b:	00 07 7f 00 02 03 00 00 ff 00 07 7f 00 08 32 01     ..............2.
     6ab:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     6bb:	04 01 04 04 01 04 04 01 04 04 03 07 50 00 08 2d     ............P..-
     6cb:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     6db:	04 04 01 04 04 01 04 04 01 04 04 03 07 3c 00 08     .............<..
     6eb:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     6fb:	01 04 04 01 04 04 01 04 04 01 04 04 03 07 28 00     ..............(.
     70b:	08 23 01 04 04 01 04 04 01 04 04 01 04 04 01 04     .#..............
     71b:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 05 00     ................
     72b:	00 ff                                               ..

0000072d <ad_tank_explode>:
     72d:	00 07 7f 00 02 03 00 00 ff 00 08 41 01 04 04 01     ...........A....
     73d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     74d:	04 01 04 04 01 04 04 03 07 64 00 08 3c 01 04 04     .........d..<...
     75d:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     76d:	04 04 01 04 04 01 04 04 03 07 50 00 08 37 01 04     ..........P..7..
     77d:	04 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     ................
     78d:	01 04 04 01 04 04 01 04 04 03 07 32 00 08 32 01     ...........2..2.
     79d:	04 04 01 04 04 01 04 04 01 04 04 01 04 04 01 04     ................
     7ad:	04 01 04 04 01 04 04 01 04 04 03 07 28 00 08 2d     ............(..-
     7bd:	01 04 04 01 04 04 01 04 04 01 04 04 01 04 04 01     ................
     7cd:	04 04 01 04 04 01 04 04 01 04 04 03 07 14 00 08     ................
     7dd:	28 01 04 04 01 04 04 01 04 04 01 04 04 01 04 04     (...............
     7ed:	01 04 04 01 04 04 01 04 04 01 04 04 01 05 00 00     ................
     7fd:	ff                                                  .

000007fe <level_data>:
     7fe:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     80e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     836:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
     84e:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
     85e:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     86e:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
     88a:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
     89a:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8aa:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
     8c6:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
     8e6:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
     8f6:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
     906:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
     916:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     926:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
     936:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
     946:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
     956:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
     966:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
     976:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
     986:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
     996:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
     9a6:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
     9b6:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
     9ce:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     9de:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
     9fa:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
     a12:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
     a2e:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
     a3e:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a4e:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
     a6a:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
     a7a:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
     a8a:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
     aaa:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
     aca:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     ada:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     aea:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     afa:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     b0a:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     b26:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
     b42:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     b52:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
     b62:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     b72:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     b82:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
     b92:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
     ba2:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
     bb2:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     bc2:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
     bd2:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     be2:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     bf2:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
     c02:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
     c12:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
     c22:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
     c32:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
     c42:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
     c52:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
     c62:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
     c72:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
     c82:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
     c92:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
     ca2:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     cb2:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
     cc2:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     cd2:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
     ce2:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
     cf2:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
     d02:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
     d12:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
     d22:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
     d32:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
     d42:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
     d52:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
     d62:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
     d72:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
     d82:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d9a:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
     db6:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
     dc6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     dd6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     de6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     df6:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e12:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e32:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e4e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e6e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     e8a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     eaa:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
     ec2:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     ede:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     eee:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
     efe:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
     f0e:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
     f1e:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     f2e:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
     f3e:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
     f4e:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
     f5e:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
     f6e:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
     f7e:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
     f8e:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
     f9e:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
     fae:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
     fbe:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fce:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     fde:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     fee:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    100a:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    102e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    104e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    106a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    108a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    10a6:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10d6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    10e6:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    10f6:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1106:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    1116:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    1126:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    1136:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1146:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1156:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1166:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1176:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1186:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1196:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    11a6:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    11b6:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    11c6:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    11d6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    11f2:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    120a:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    121a:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    122a:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    123a:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1252:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1262:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1272:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1282:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1292:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    12a2:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    12ba:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    12ca:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    12da:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    12f2:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1302:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    1312:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1322:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1332:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1342:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1352:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    136a:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    137a:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1392:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    13a2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13b2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13c2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    13d2:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    13ee:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    140a:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    142a:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    143a:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    144a:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1466:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1486:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    14a2:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    14c2:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    14d2:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14e2:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    14f2:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    150a:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    151a:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    152a:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    153a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    154a:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    155a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1576:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1586:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    1596:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    15a6:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    15c6:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    15e2:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    1602:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    161a:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    162a:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1646:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    1662:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    1682:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1692:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16a2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16b2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    16c2:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    16d2:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    16ea:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    16fa:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    170a:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    171a:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    172a:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    173a:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    174a:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    175a:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    176a:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    1792:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    17a2:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    17b2:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    17c2:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    17da:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    17ea:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    17fa:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    180a:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    181a:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    182a:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    183a:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    1852:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    1862:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1872:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    1882:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    1892:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    18a2:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    18b2:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    18c2:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    18d2:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    18e2:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    18f2:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    1902:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1912:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    1922:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    1932:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    194e:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1972:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1982:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1992:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    19a2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    19b2:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    19c2:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    19da:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    19ea:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    19fa:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1a0a:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    1a1a:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1a2a:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1a3a:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1a4a:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1a5a:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1a6a:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1a7a:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    1a9e:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aba:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    1aca:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    1ada:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    1aea:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    1afa:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    1b0a:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    1b1a:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1b2a:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    1b42:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    1b52:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b6e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b8e:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    1b9e:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    1bae:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    1bbe:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1bce:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    1bde:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    1bee:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    1bfe:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1c0e:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    1c1e:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    1c2e:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    1c3e:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    1c4e:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    1c5e:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c8e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c9e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cba:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cd6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d12:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1d22:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1d32:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d4e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d66:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1d76:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1d86:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    1d96:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    1da6:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    1db6:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    1dc6:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    1dd6:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    1de6:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    1df6:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    1e06:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    1e16:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    1e2e:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    1e3e:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1e4e:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    1e5e:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e6e:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    1e7e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e9a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eb6:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1ec6:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1ed6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ef2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f12:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f2e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f4e:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f5e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f6e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1fa6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fc6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1fe2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2002:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2012:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2022:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    203e:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    205a:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2072:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2082:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2092:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    20a2:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    20b2:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    20c2:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    20d2:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    20e2:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    20f2:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2102:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    2112:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2122:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2132:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    214a:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    216a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2186:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21a6:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    21b6:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    21c6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21e2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    21fe:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    221e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    223a:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    224a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    225a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    226a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    227a:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    228a:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    22a2:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    22b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    22c2:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    22d2:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    22e2:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    22f2:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2302:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    231a:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    232a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    233a:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    234a:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    235a:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    236a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2386:	00 02 02 37 37 37 37 02 00 00 00 02 37 37 37 37     ...7777.....7777
    2396:	37 37 37 37 37 37 02 00 00 00 02 37 37 37 37 02     777777.....7777.
    23a6:	02 4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d     .MMMM.....MMMMMM
    23b6:	4d 4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d     MMMM.....MMMM..M
    23c6:	4d 4d 4d 02 00 00 00 02 4d 4d 4d 4d 2c 4d 4d 4d     MMM.....MMMM,MMM
    23d6:	4d 4d 02 00 00 00 02 4d 4d 4d 4d 02 02 4d 4d 4d     MM.....MMMM..MMM
    23e6:	4d 02 00 00 00 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M.....MMMMMMMMMM
    23f6:	02 00 00 00 02 4d 4d 4d 4d 02 02 37 37 37 37 02     .....MMMM..7777.
    2406:	00 00 00 02 37 37 37 37 37 37 37 37 37 37 02 00     ....7777777777..
    2416:	00 00 02 37 37 37 37 02 02 00 00 00 00 00 00 00     ...7777.........
	...
    243a:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    244a:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    245a:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    246a:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2482:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2492:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    24a2:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    24b2:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    24c2:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    24d2:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    24e2:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    24fa:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    250a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    251a:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    252a:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    253a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    254a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    255a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    256a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    257a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    258a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    259a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    25aa:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25ba:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    25ca:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25da:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    25ea:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    25fa:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    260a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    261a:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    262a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    263a:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    264a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    265a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    266a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    267a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    268a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    269a:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    26aa:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    26ba:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    26ca:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    26ea:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    270a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2726:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2746:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    275e:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    2782:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    279e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27be:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27da:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    27ea:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    27fa:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2816:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2826:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2836:	02 02                                               ..

00002838 <sprites_data>:
    2838:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2848:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    2858:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    2868:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2878:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2888:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2898:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    28a8:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    28b8:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    28c8:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    28d8:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    28e8:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    28f8:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2908:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2918:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2928:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2938:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2948:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    2958:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    2968:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2978:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2988:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2998:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    29a8:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    29b8:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    29c8:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    29d8:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    29e8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    29f8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2a08:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    2a18:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    2a28:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2a38:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a48:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a58:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a78:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a88:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2a98:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2aa8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ab8:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    2ac8:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    2ad8:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2ae8:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2af8:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2b08:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2b18:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2b28:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2b38:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2b48:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2b58:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2b68:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2b78:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2b88:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2b98:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2ba8:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2bb8:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2bc8:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2bd8:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2be8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2bf8:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c08:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2c18:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2c28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2c38:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2c48:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2c58:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c68:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c78:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2c88:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2c98:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2ca8:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2cb8:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2cc8:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2cd8:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2ce8:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2cf8:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2d08:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2d18:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2d28:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2d38:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2d48:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2d58:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2d68:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2d78:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2d88:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2d98:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2da8:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2db8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dc8:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2dd8:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2de8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2df8:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2e08:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2e18:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2e28:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2e38:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2e48:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2e58:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2e68:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e78:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2e88:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2e98:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2ea8:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2eb8:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2ec8:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2ed8:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2ee8:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ef8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f08:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    2f18:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    2f28:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2f38:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2f48:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2f58:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2f68:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2f78:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2f88:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2f98:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2fa8:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2fb8:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2fc8:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2fd8:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2fe8:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2ff8:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3008:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3018:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3028:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3038:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    3048:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    3058:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    3068:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3078:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3088:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3098:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    30a8:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    30b8:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    30c8:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    30d8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30e8:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    30f8:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3108:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    3118:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    3128:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    3138:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3148:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3158:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3168:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003178 <map_sub_turret>:
    3178:	01 01 23                                            ..#

0000317b <map_sub_shot>:
    317b:	01 01 1b                                            ...

0000317e <map_up_arrow>:
    317e:	01 01 22                                            .."

00003181 <map_down_arrow>:
    3181:	01 01 21                                            ..!

00003184 <map_right_arrow>:
    3184:	01 01 20                                            .. 

00003187 <map_rocket_right_1>:
    3187:	01 01 1a                                            ...

0000318a <map_rocket_right_0>:
    318a:	01 01 19                                            ...

0000318d <map_rocket_up_1>:
    318d:	01 01 18                                            ...

00003190 <map_rocket_up_0>:
    3190:	01 01 17                                            ...

00003193 <map_ball>:
    3193:	01 01 16                                            ...

00003196 <map_explosion_2>:
    3196:	02 02 08 09 09 08                                   ......

0000319c <map_explosion_1>:
    319c:	02 02 06 07 10 11                                   ......

000031a2 <map_explosion_0>:
    31a2:	02 02 04 05 0e 0f                                   ......

000031a8 <map_tank2_right_0>:
    31a8:	02 02 14 15 1e 1f                                   ......

000031ae <map_tank2_up_0>:
    31ae:	02 02 12 13 1c 1d                                   ......

000031b4 <map_tank1_right_0>:
    31b4:	02 02 02 03 0c 0d                                   ......

000031ba <map_tank1_up_0>:
    31ba:	02 02 00 01 0a 0b                                   ......

000031c0 <map_tank_blank>:
    31c0:	02 02 24 24 24 24                                   ..$$$$

000031c6 <map_none>:
    31c6:	01 01 24                                            ..$

000031c9 <tiles_data>:
	...
    3209:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3219:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3229:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3239:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3249:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    3259:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    3269:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3279:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3289:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    3299:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    32a9:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    32b9:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    32c9:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    32d9:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    32e9:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    32f9:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    3309:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3319:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3329:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    3339:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3351:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3361:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3371:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3389:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3399:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    33a9:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    33b9:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    33d1:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    33f1:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3409:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3419:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    3429:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    3439:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    3449:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3459:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3469:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3479:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3489:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3499:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    34a9:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    34b9:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    34c9:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    34d9:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    34e9:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    34f9:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    3509:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    3519:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3529:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    3539:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    3549:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    3559:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    3569:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    3579:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    3589:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    3599:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    35a9:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    35b9:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    35c9:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    35d9:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    35e9:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    35f9:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    3609:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    3619:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    3629:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    3639:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    3649:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    3659:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    3669:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    3679:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    3689:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    3699:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    36a9:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    36b9:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    36c9:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    36d9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36e9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    36f9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    3729:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3739:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3749:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    3759:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    3769:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    3779:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    3789:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    3799:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    37a9:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    37b9:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    37c9:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    37d9:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    37e9:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    37f9:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3809:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    3819:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    3829:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3839:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3849:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3859:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3869:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3879:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3889:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3899:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    38c9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38d9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    38e9:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    38f9:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    3909:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    3919:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3929:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3939:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3949:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    3989:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3999:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    39a9:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    39b9:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    39c9:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    39d9:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    39e9:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    39f9:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    3a39:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    3a71:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    3a81:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    3a91:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3aa1:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    3ab1:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    3ac1:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    3ad1:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    3ae1:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    3af1:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    3b01:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    3b11:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b21:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b31:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b41:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b51:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b61:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b71:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3b81:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    3b91:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    3ba1:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    3bb1:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    3bc1:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    3bd1:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    3be1:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    3bf1:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    3c01:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    3c11:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3c49:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3c59:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3c69:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    3c8d:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3c9d:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3cad:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3cbd:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3ccd:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3cdd:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3ced:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3cfd:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    3d0d:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3d1d:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3d2d:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    3d3d:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    3d4d:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d5d:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d6d:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    3d7d:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    3d8d:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    3d9d:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3dad:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3dbd:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    3dcd:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    3ddd:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3ded:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    3dfd:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    3e0d:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3e1d:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3e2d:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3e3d:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3e4d:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3e5d:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3e6d:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3e7d:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    3e8d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3e9d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3ead:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    3ebd:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    3ecd:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3edd:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3eed:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    3efd:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    3f0d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3f1d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    3f2d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    3f3d:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    3f4d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    3f5d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3f6d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3f7d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    3f8d:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    3f9d:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    3fad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fbd:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    3fcd:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    3fdd:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3fed:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    3ffd:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    400d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    401d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    402d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    403d:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    404d:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    405d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    406d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    407d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    408d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    409d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    40bd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    40cd:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    40dd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    40ed:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    40fd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    410d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    411d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    412d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    413d:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    414d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    415d:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    416d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    417d:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    418d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    419d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    41ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    41bd:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    41cd:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    41dd:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    41ed:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    41fd:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    420d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    421d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    422d:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    423d:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    424d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    425d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    426d:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    427d:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    428d:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    429d:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    42ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    42bd:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    42cd:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42dd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42ed:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    42fd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    430d:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    431d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    432d:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    433d:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    434d:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    435d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    436d:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    437d:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    438d:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    439d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    43ad:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    43bd:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    43cd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    43dd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    43ed:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    43fd:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    440d:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    441d:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    442d:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    443d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    444d:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    445d:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    446d:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    447d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    448d:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    449d:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    44ad:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    44bd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    44cd:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    44dd:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    44ed:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    44fd:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    450d:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    451d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    452d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    453d:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    454d:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    455d:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    456d:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    457d:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    458d:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    459d:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    45ad:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    45bd:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    45cd:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    45dd:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    45ed:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    45fd:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    460d:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    461d:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    462d:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    463d:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    464d:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    465d:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    466d:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    467d:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    468d:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    469d:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    46ad:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    46bd:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    46cd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46dd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    46ed:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    46fd:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    470d:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    471d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    472d:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    473d:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    474d:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    475d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    476d:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    477d:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    478d:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    479d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    47ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    47bd:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    47cd:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    47dd:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    47ed:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    47fd:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    480d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    481d:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    482d:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    483d:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    484d:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    485d:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    486d:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    487d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    488d:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    489d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    48ad:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    48bd:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    48cd:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    48dd:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    48ed:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    48fd:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    490d:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    491d:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    492d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    493d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    494d:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    495d:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    496d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    497d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    498d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    499d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    49ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    49bd:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    49cd:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    49dd:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    49ed:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    49fd:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4a0d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    4a1d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    4a2d:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    4a3d:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a4d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a5d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4a6d:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a7d:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4a8d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4a9d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4aad:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4abd:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4acd:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    4add:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    4aed:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    4afd:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    4b0d:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    4b1d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b2d:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4b3d:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    4b4d:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    4b5d:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    4b6d:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    4b7d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    4b8d:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    4b9d:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    4bad:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    4bbd:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4bcd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4bdd:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    4bed:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    4bfd:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    4c0d:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c1d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c2d:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    4c3d:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    4c4d:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c5d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4c6d:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    4c7d:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    4c8d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4c9d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4cad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cbd:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    4ccd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4cdd:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4ced:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4cfd:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    4d0d:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    4d1d:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d2d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    4d3d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d4d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d5d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    4d6d:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    4d7d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4d8d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4d9d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4dad:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    4dbd:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    4dcd:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    4ddd:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    4ded:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4dfd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    4e0d:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    4e1d:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4e2d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e3d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    4e4d:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4e5d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4e6d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4e7d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4e8d:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    4e9d:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    4ead:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    4ebd:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    4ecd:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    4edd:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4eed:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4efd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    4f0d:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    4f1d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f2d:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    4f3d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f4d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    4f5d:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    4f6d:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    4f7d:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4f8d:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    4f9d:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fad:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4fbd:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    4fcd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4fdd:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4fed:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ffd:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    500d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    501d:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    502d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    503d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    504d:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    505d:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    506d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    507d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    508d:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    509d:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50ad:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50bd:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    50cd:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    50dd:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    50ed:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    50fd:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    510d:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    511d:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    512d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    513d:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    514d:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    515d:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    516d:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    517d:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    518d:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    519d:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    51ad:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51bd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    51cd:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    51dd:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    51ed:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    51fd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    520d:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    521d:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    522d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    523d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    524d:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    525d:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    526d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    527d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    528d:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    529d:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52ad:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52bd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    52cd:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    52dd:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    52ed:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    52fd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    530d:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    531d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    532d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    533d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    534d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    535d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    536d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    537d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    538d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    539d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    53ad:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53bd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    53cd:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    53dd:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    53ed:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    53fd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    540d:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    541d:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    542d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    543d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    544d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    545d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    546d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    547d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    548d:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    549d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54ad:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54bd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54cd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54dd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54ed:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    54fd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    550d:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    551d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    552d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    553d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    554d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    555d:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    556d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    557d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    558d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    559d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    55ad:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    55bd:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    55cd:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55dd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55ed:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    55fd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    560d:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    561d:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    562d:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    563d:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    564d:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    565d:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    566d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    567d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    568d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    569d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    56ad:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    56bd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    56cd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56dd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56ed:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    56fd:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    570d:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    571d:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    572d:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    573d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    574d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    575d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    576d:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    577d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    578d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    579d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ad:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    57bd:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    57cd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57dd:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    57ed:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    57fd:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    580d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    581d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    582d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    583d:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    584d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    585d:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    586d:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    587d:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    58d1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    58e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    58f9:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5911:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5921:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5951:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    5961:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5971:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    5989:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    5999:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    59a9:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    59b9:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    59d1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    59e1:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    59f1:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    5a09:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    5a19:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    5a29:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    5a39:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5a51:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a61:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a95:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5aa5:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5ab5:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    5ad1:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    5ae1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5af1:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    5b11:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    5b21:	df df df df df df df df 00 00 df df df df 00 00     ................
    5b31:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    5b51:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5b61:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5b71:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5bb1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5bc1:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5be1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5c31:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5c55:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5c65:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5c75:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5c91:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5ca1:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    5cb1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5cd1:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    5ce1:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    5cf1:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    5d11:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5d21:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5d31:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    5d51:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    5d61:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    5d71:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5d95:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5da5:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5db5:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    5dd1:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    5de1:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    5df1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e11:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    5e21:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    5e31:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5e51:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    5e61:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    5e71:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    5e91:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5ea1:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5eb1:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5ed1:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    5ee1:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    5ef1:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    5f19:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5f31:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5f49:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f59:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f69:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f79:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f89:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    5f99:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5fa9:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5fb9:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fd9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5ff1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6009:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    6019:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6029:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6039:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6051:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6061:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6079:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6091:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    60a1:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    60b1:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    60d1:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    60e1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60f1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6111:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6121:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6131:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6151:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6161:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6171:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6191:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    61a1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    61b1:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    61d1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    61e1:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    61f1:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6211:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6221:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6231:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6251:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6261:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6271:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6291:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    62a1:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    62b1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    62d1:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    62e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62f1:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6315:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6325:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    6335:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    6351:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6361:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6371:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6391:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    63a1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    63b1:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    63d1:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    63e1:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    63f1:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6411:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    6421:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6431:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6451:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6461:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6471:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6491:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64a1:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64b1:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    64d1:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64e1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    64f1:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    6511:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6521:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6531:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6551:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6561:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6571:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6591:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    65a1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65b1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    65d1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65e1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    65f1:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    6611:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6621:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6631:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6651:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    6661:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    6671:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6691:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66a1:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    66b1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    66d1:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66e1:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    66f1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6711:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    6721:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6731:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6751:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6761:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6771:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    6791:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    67a1:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    67b1:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    67d1:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67e1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    67f1:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6815:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    6825:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    6879:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00006889 <map_sub_emerging>:
    6889:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6899:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    68a9:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68b9:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68c9:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    68d9:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    68e9:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    68f9:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    6909:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    6919:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    6929:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    6939:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    6949:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6959:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6969:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6979:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6989:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6999:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69a9:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69b9:	0d 0d 0d 0d 0d 0d                                   ......

000069bf <map_sub>:
    69bf:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69cf:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    69df:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69ef:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    69ff:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a0f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    6a1f:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    6a2f:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    6a3f:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    6a4f:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    6a5f:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    6a6f:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    6a7f:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6a8f:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    6a9f:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6aaf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6abf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6acf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6adf:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    6aef:	0d 0d 0d 0d 0d 0d                                   ......

00006af5 <map_scope_2>:
    6af5:	01 01 12                                            ...

00006af8 <map_scope_1>:
    6af8:	01 01 11                                            ...

00006afb <map_scope_0>:
    6afb:	01 01 10                                            ...

00006afe <map_blue_tank>:
    6afe:	02 02 2b 2c 31 32                                   ..+,12

00006b04 <map_green_tank>:
    6b04:	02 02 18 19 23 24                                   ....#$

00006b0a <map_fence>:
    6b0a:	01 01 0f                                            ...

00006b0d <map_turf>:
    6b0d:	01 01 0e                                            ...

00006b10 <map_water>:
    6b10:	01 01 0d                                            ...

00006b13 <map_metal_bl>:
    6b13:	01 01 0c                                            ...

00006b16 <map_metal_tr>:
    6b16:	01 01 0b                                            ...

00006b19 <map_metal_br>:
    6b19:	01 01 0a                                            ...

00006b1c <map_metal_tl>:
    6b1c:	01 01 09                                            ...

00006b1f <map_tile_exp_2>:
    6b1f:	01 01 08                                            ...

00006b22 <map_tile_exp_1>:
    6b22:	01 01 07                                            ...

00006b25 <map_tile_exp_0>:
    6b25:	01 01 06                                            ...

00006b28 <map_rocket_itm>:
    6b28:	01 01 04                                            ...

00006b2b <map_explode_itm>:
    6b2b:	01 01 03                                            ...

00006b2e <map_speed_itm>:
    6b2e:	01 01 02                                            ...

00006b31 <map_metal>:
    6b31:	01 01 05                                            ...

00006b34 <map_brick>:
    6b34:	01 01 01                                            ...

00006b37 <map_splash>:
    6b37:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    6b47:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    6b57:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    6b67:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    6b77:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    6b87:	1a 00 00 1a 2f 30                                   ..../0

00006b8d <map_pause>:
    6b8d:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6b9d:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6bad:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6bbd:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006bcb <map_tile_none>:
    6bcb:	01 01 00                                            ...

00006bce <__ctors_end>:
    6bce:	11 24       	eor	r1, r1
    6bd0:	1f be       	out	0x3f, r1	; 63
    6bd2:	cf ef       	ldi	r28, 0xFF	; 255
    6bd4:	d0 e1       	ldi	r29, 0x10	; 16
    6bd6:	de bf       	out	0x3e, r29	; 62
    6bd8:	cd bf       	out	0x3d, r28	; 61

00006bda <__do_copy_data>:
    6bda:	11 e0       	ldi	r17, 0x01	; 1
    6bdc:	a0 e0       	ldi	r26, 0x00	; 0
    6bde:	b1 e0       	ldi	r27, 0x01	; 1
    6be0:	ea e2       	ldi	r30, 0x2A	; 42
    6be2:	f9 ee       	ldi	r31, 0xE9	; 233
    6be4:	02 c0       	rjmp	.+4      	; 0x6bea <__do_copy_data+0x10>
    6be6:	05 90       	lpm	r0, Z+
    6be8:	0d 92       	st	X+, r0
    6bea:	a4 35       	cpi	r26, 0x54	; 84
    6bec:	b1 07       	cpc	r27, r17
    6bee:	d9 f7       	brne	.-10     	; 0x6be6 <__do_copy_data+0xc>

00006bf0 <__do_clear_bss>:
    6bf0:	10 e1       	ldi	r17, 0x10	; 16
    6bf2:	a4 e5       	ldi	r26, 0x54	; 84
    6bf4:	b1 e0       	ldi	r27, 0x01	; 1
    6bf6:	01 c0       	rjmp	.+2      	; 0x6bfa <.do_clear_bss_start>

00006bf8 <.do_clear_bss_loop>:
    6bf8:	1d 92       	st	X+, r1

00006bfa <.do_clear_bss_start>:
    6bfa:	af 35       	cpi	r26, 0x5F	; 95
    6bfc:	b1 07       	cpc	r27, r17
    6bfe:	e1 f7       	brne	.-8      	; 0x6bf8 <.do_clear_bss_loop>

00006c00 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6c00:	0e 94 cd 3a 	call	0x759a	; 0x759a <wdt_randomize>
#endif

    MCUSR = 0;
    6c04:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6c06:	88 e1       	ldi	r24, 0x18	; 24
    6c08:	0f b6       	in	r0, 0x3f	; 63
    6c0a:	f8 94       	cli
    6c0c:	80 93 60 00 	sts	0x0060, r24
    6c10:	10 92 60 00 	sts	0x0060, r1
    6c14:	0f be       	out	0x3f, r0	; 63

00006c16 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6c16:	0e 94 8f 3b 	call	0x771e	; 0x771e <isEepromFormatted>
    6c1a:	81 11       	cpse	r24, r1
    6c1c:	02 c0       	rjmp	.+4      	; 0x6c22 <Initialize+0xc>
    6c1e:	0e 94 6d 3b 	call	0x76da	; 0x76da <FormatEeprom>

	cli();
    6c22:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6c24:	c1 e0       	ldi	r28, 0x01	; 1
    6c26:	c0 93 98 0a 	sts	0x0A98, r28
		tr4_barrel_hi=1;		
    6c2a:	c0 93 99 0a 	sts	0x0A99, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    6c2e:	c0 93 97 0a 	sts	0x0A97, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    6c32:	0e 94 92 3c 	call	0x7924	; 0x7924 <InitUartRxBuffer>
		InitUartTxBuffer();
    6c36:	0e 94 ab 3c 	call	0x7956	; 0x7956 <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6c3a:	10 92 84 0a 	sts	0x0A84, r1
    6c3e:	10 92 8a 0a 	sts	0x0A8A, r1
    6c42:	10 92 90 0a 	sts	0x0A90, r1
    6c46:	10 92 96 0a 	sts	0x0A96, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6c4a:	10 92 60 0a 	sts	0x0A60, r1
	sync_flags=0;
    6c4e:	10 92 62 0a 	sts	0x0A62, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6c52:	82 e1       	ldi	r24, 0x12	; 18
    6c54:	80 93 61 0a 	sts	0x0A61, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    6c58:	80 ee       	ldi	r24, 0xE0	; 224
    6c5a:	80 93 68 0a 	sts	0x0A68, r24
	first_render_line=FIRST_RENDER_LINE;
    6c5e:	84 e1       	ldi	r24, 0x14	; 20
    6c60:	80 93 67 0a 	sts	0x0A67, r24

	joypad1_status_hi=0;
    6c64:	10 92 6c 0a 	sts	0x0A6C, r1
    6c68:	10 92 6b 0a 	sts	0x0A6B, r1
	joypad2_status_hi=0;
    6c6c:	10 92 70 0a 	sts	0x0A70, r1
    6c70:	10 92 6f 0a 	sts	0x0A6F, r1
	sound_enabled=1;
    6c74:	c0 93 83 0a 	sts	0x0A83, r28

	InitializeVideoMode();
    6c78:	0e 94 f8 48 	call	0x91f0	; 0x91f0 <InitializeVideoMode>
    6c7c:	80 e7       	ldi	r24, 0x70	; 112
    6c7e:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6c80:	fc 01       	movw	r30, r24
    6c82:	25 91       	lpm	r18, Z+
    6c84:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6c86:	f9 01       	movw	r30, r18
    6c88:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6c8a:	30 83       	st	Z, r19
    6c8c:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6c8e:	20 e0       	ldi	r18, 0x00	; 0
    6c90:	8e 39       	cpi	r24, 0x9E	; 158
    6c92:	92 07       	cpc	r25, r18
    6c94:	a9 f7       	brne	.-22     	; 0x6c80 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6c96:	78 94       	sei
	
	DisplayLogo();
    6c98:	0e 94 f7 48 	call	0x91ee	; 0x91ee <DisplayLogo>
    6c9c:	0e 94 80 70 	call	0xe100	; 0xe100 <main>
    6ca0:	0c 94 93 74 	jmp	0xe926	; 0xe926 <_exit>

00006ca4 <__bad_interrupt>:
    6ca4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006ca8 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    6ca8:	0b e9       	ldi	r16, 0x9B	; 155
    6caa:	0a 95       	dec	r16
    6cac:	f1 f7       	brne	.-4      	; 0x6caa <sub_video_mode3+0x2>

		;Refresh ramtiles indexes in VRAM
		;This has to be done because the main
		;program may have altered the VRAM
		;after vsync and the rendering interrupt.
		lds r16,user_ram_tiles_c
    6cae:	00 91 50 0a 	lds	r16, 0x0A50

		ldi ZL,lo8(ram_tiles_restore);
    6cb2:	e0 e1       	ldi	r30, 0x10	; 16
		ldi ZH,hi8(ram_tiles_restore);
    6cb4:	fa e0       	ldi	r31, 0x0A	; 10
		ldi r18,3
    6cb6:	23 e0       	ldi	r18, 0x03	; 3
		mul r16,r18
    6cb8:	02 9f       	mul	r16, r18
		add ZL,r0
    6cba:	e0 0d       	add	r30, r0
		adc ZH,r1
    6cbc:	f1 1d       	adc	r31, r1

		ldi YL,lo8(vram)
    6cbe:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6cc0:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6cc2:	20 91 4f 0a 	lds	r18, 0x0A4F
		ldi r19,MAX_RAMTILES		;maximum possible ramtiles
    6cc6:	3c e3       	ldi	r19, 0x3C	; 60
		sub r19,r18					;sub free tile
    6cc8:	32 1b       	sub	r19, r18
		add r19,r16					;add user tiles
    6cca:	30 0f       	add	r19, r16

		cp r18,r16
    6ccc:	20 17       	cp	r18, r16
		breq no_ramtiles
    6cce:	51 f0       	breq	.+20     	; 0x6ce4 <no_ramtiles>
		nop
    6cd0:	00 00       	nop
	...

00006cd4 <upd_loop>:
		nop
upd_loop:
		ld XL,Z+	;load vram offset of ramtile
    6cd4:	a1 91       	ld	r26, Z+
		ld XH,Z+
    6cd6:	b1 91       	ld	r27, Z+

		ld r17,X	;get latest VRAM tile that may have been modified my
    6cd8:	1c 91       	ld	r17, X
		st Z+,r17	;the main program and store it in the restore buffer
    6cda:	11 93       	st	Z+, r17
		st X,r16	;write the ramtile index back to vram
    6cdc:	0c 93       	st	X, r16

		inc r16
    6cde:	03 95       	inc	r16
		cp r16,r18
    6ce0:	02 17       	cp	r16, r18
		brlo upd_loop ;loop is 14 cycles
    6ce2:	c0 f3       	brcs	.-16     	; 0x6cd4 <upd_loop>

00006ce4 <no_ramtiles>:

no_ramtiles:
		;wait for remaining maximum possible ramtiles
1:
		ldi r17,3
    6ce4:	13 e0       	ldi	r17, 0x03	; 3
		dec r17
    6ce6:	1a 95       	dec	r17
		brne .-4
    6ce8:	f1 f7       	brne	.-4      	; 0x6ce6 <no_ramtiles+0x2>
		rjmp .
    6cea:	00 c0       	rjmp	.+0      	; 0x6cec <no_ramtiles+0x8>
		dec r19
    6cec:	3a 95       	dec	r19
		brne 1b
    6cee:	d1 f7       	brne	.-12     	; 0x6ce4 <no_ramtiles>
		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1

#endif


		lds r2,overlay_tile_table
    6cf0:	20 90 5e 0a 	lds	r2, 0x0A5E
		lds r3,overlay_tile_table+1
    6cf4:	30 90 5f 0a 	lds	r3, 0x0A5F
		lds r16,tile_table_lo 
    6cf8:	00 91 5a 0a 	lds	r16, 0x0A5A
		lds r17,tile_table_hi
    6cfc:	10 91 5b 0a 	lds	r17, 0x0A5B
		movw r12,r16
    6d00:	68 01       	movw	r12, r16
		movw r6,r16
    6d02:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6d04:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6d06:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6d08:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6d0a:	4e 01       	movw	r8, r28
		clr r0
    6d0c:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6d0e:	30 91 5d 0a 	lds	r19, 0x0A5D
		cpi r19,0
    6d12:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6d14:	09 f0       	breq	.+2      	; 0x6d18 <no_ramtiles+0x34>
		ldi YL,lo8(overlay_vram)
    6d16:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    6d18:	09 f0       	breq	.+2      	; 0x6d1c <no_ramtiles+0x38>
		ldi YH,hi8(overlay_vram)
    6d1a:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6d1c:	09 f0       	breq	.+2      	; 0x6d20 <no_ramtiles+0x3c>
		mov r24,r19
    6d1e:	83 2f       	mov	r24, r19

		breq .+2
    6d20:	09 f0       	breq	.+2      	; 0x6d24 <no_ramtiles+0x40>
		movw r12,r2
    6d22:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6d24:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6d26:	a0 2e       	mov	r10, r16
		clr r22
    6d28:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6d2a:	78 e0       	ldi	r23, 0x08	; 8

00006d2c <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6d2c:	0a d3       	rcall	.+1556   	; 0x7342 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6d2e:	3c e0       	ldi	r19, 0x0C	; 12
    6d30:	3a 95       	dec	r19
    6d32:	f1 f7       	brne	.-4      	; 0x6d30 <next_tile_line+0x4>
    6d34:	00 00       	nop

		;***draw line***
		call render_tile_line
    6d36:	0e 94 ca 36 	call	0x6d94	; 0x6d94 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6d3a:	3f e0       	ldi	r19, 0x0F	; 15
    6d3c:	3a 95       	dec	r19
    6d3e:	f1 f7       	brne	.-4      	; 0x6d3c <next_tile_line+0x10>
    6d40:	00 c0       	rjmp	.+0      	; 0x6d42 <next_tile_line+0x16>

		dec r10
    6d42:	aa 94       	dec	r10
		breq frame_end
    6d44:	a1 f0       	breq	.+40     	; 0x6d6e <frame_end>
	
		inc r22
    6d46:	63 95       	inc	r22
		lpm ;3 nop
    6d48:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6d4a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6d4c:	29 f0       	breq	.+10     	; 0x6d58 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6d4e:	33 e0       	ldi	r19, 0x03	; 3
    6d50:	3a 95       	dec	r19
    6d52:	f1 f7       	brne	.-4      	; 0x6d50 <next_tile_line+0x24>
    6d54:	00 c0       	rjmp	.+0      	; 0x6d56 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    6d56:	ea cf       	rjmp	.-44     	; 0x6d2c <next_tile_line>

00006d58 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6d58:	66 27       	eor	r22, r22

		clr r0
    6d5a:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6d5c:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6d5e:	c3 0f       	add	r28, r19
		adc YH,r0
    6d60:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6d62:	8a 95       	dec	r24
		brne .+2
    6d64:	09 f4       	brne	.+2      	; 0x6d68 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6d66:	e4 01       	movw	r28, r8
		brne .+2
    6d68:	09 f4       	brne	.+2      	; 0x6d6c <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6d6a:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6d6c:	df cf       	rjmp	.-66     	; 0x6d2c <next_tile_line>

00006d6e <frame_end>:

	frame_end:

		WAIT r19,18
    6d6e:	36 e0       	ldi	r19, 0x06	; 6
    6d70:	3a 95       	dec	r19
    6d72:	f1 f7       	brne	.-4      	; 0x6d70 <frame_end+0x2>

		rcall hsync_pulse ;145
    6d74:	e6 d2       	rcall	.+1484   	; 0x7342 <hsync_pulse>
	
#if ((RTLIST_ENABLE != 0) && (SPRITES_VSYNC_PROCESS != 0))
		clr r1
    6d76:	11 24       	eor	r1, r1
		call RestoreBackground
    6d78:	0e 94 46 38 	call	0x708c	; 0x708c <RestoreBackground>
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    6d7c:	e0 91 62 0a 	lds	r30, 0x0A62
		ldi r20,SYNC_FLAG_FIELD
    6d80:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6d82:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6d84:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6d86:	e0 93 62 0a 	sts	0x0A62, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6d8a:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6d8c:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6d90:	11 24       	eor	r1, r1


		ret
    6d92:	08 95       	ret

00006d94 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6d94:	de 01       	movw	r26, r28

		mul r22,r23
    6d96:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6d98:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d9a:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6d9c:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    6d9e:	00 0d       	add	r16, r0
		adc r17,r1
    6da0:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6da2:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6da4:	00 ed       	ldi	r16, 0xD0	; 208
		ldi r17,hi8(ram_tiles)
    6da6:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6da8:	00 0d       	add	r16, r0
		adc r17,r1
    6daa:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6dac:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6dae:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6db0:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6db2:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6db4:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6db6:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6db8:	25 31       	cpi	r18, 0x15	; 21
		brcc .+2
    6dba:	08 f4       	brcc	.+2      	; 0x6dbe <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6dbc:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6dbe:	04 0e       	add	r0, r20
	    adc r1,r21
    6dc0:	15 1e       	adc	r1, r21

		movw ZL,r0
    6dc2:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6dc4:	25 31       	cpi	r18, 0x15	; 21
		brcs ramloop
    6dc6:	f0 f0       	brcs	.+60     	; 0x6e04 <ramloop>

00006dc8 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6dc8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6dca:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6dcc:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6dce:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6dd0:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6dd2:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6dd4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6dd6:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6dd8:	25 31       	cpi	r18, 0x15	; 21
		nop
    6dda:	00 00       	nop

	    lpm r16,Z+
    6ddc:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6dde:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6de0:	08 f4       	brcc	.+2      	; 0x6de4 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6de2:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6de4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6de6:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6de8:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6dea:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6dec:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6dee:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6df0:	25 31       	cpi	r18, 0x15	; 21
		dec r17			;decrement tiles to draw on line
    6df2:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6df4:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6df6:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6df8:	05 91       	lpm	r16, Z+

		breq end	
    6dfa:	31 f1       	breq	.+76     	; 0x6e48 <end>
	    movw ZL,r0   	;copy next tile adress
    6dfc:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6dfe:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6e00:	18 f7       	brcc	.-58     	; 0x6dc8 <romloop>
	
		rjmp .
    6e02:	00 c0       	rjmp	.+0      	; 0x6e04 <ramloop>

00006e04 <ramloop>:

	ramloop:

	    ld r16,Z+
    6e04:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6e06:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6e08:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6e0a:	01 91       	ld	r16, Z+
		nop   
    6e0c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6e0e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6e10:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6e12:	01 91       	ld	r16, Z+
		nop
    6e14:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6e16:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6e18:	25 31       	cpi	r18, 0x15	; 21
   		rjmp .
    6e1a:	00 c0       	rjmp	.+0      	; 0x6e1c <ramloop+0x18>

	    ld r16,Z+
    6e1c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6e1e:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6e20:	08 f0       	brcs	.+2      	; 0x6e24 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6e22:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6e24:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6e26:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6e28:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6e2a:	15 1e       	adc	r1, r21
		rjmp .
    6e2c:	00 c0       	rjmp	.+0      	; 0x6e2e <ramloop+0x2a>
    
		ld r16,Z+		
    6e2e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6e30:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6e32:	25 31       	cpi	r18, 0x15	; 21
		rjmp .  
    6e34:	00 c0       	rjmp	.+0      	; 0x6e36 <ramloop+0x32>

	    ld r16,Z+	
    6e36:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6e38:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6e3a:	01 91       	ld	r16, Z+

	    dec r17
    6e3c:	1a 95       	dec	r17
	    breq end
    6e3e:	21 f0       	breq	.+8      	; 0x6e48 <end>
	
		movw ZL,r0
    6e40:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6e42:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6e44:	08 f6       	brcc	.-126    	; 0x6dc8 <romloop>
		rjmp ramloop
    6e46:	de cf       	rjmp	.-68     	; 0x6e04 <ramloop>

00006e48 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6e48:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6e4a:	00 27       	eor	r16, r16
		lpm	
    6e4c:	c8 95       	lpm
		nop
    6e4e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6e50:	08 b9       	out	0x08, r16	; 8

		ret
    6e52:	08 95       	ret

00006e54 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6e54:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6e56:	e0 91 5a 0a 	lds	r30, 0x0A5A
	lds ZH,tile_table_hi
    6e5a:	f0 91 5b 0a 	lds	r31, 0x0A5B
	mul r24,r18
    6e5e:	82 9f       	mul	r24, r18
	add ZL,r0
    6e60:	e0 0d       	add	r30, r0
	adc ZH,r1
    6e62:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6e64:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6e66:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6e68:	62 9f       	mul	r22, r18
	add XL,r0
    6e6a:	a0 0d       	add	r26, r0
	adc XH,r1
    6e6c:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    6e6e:	15 90       	lpm	r1, Z+
    6e70:	1d 92       	st	X+, r1
    6e72:	15 90       	lpm	r1, Z+
    6e74:	1d 92       	st	X+, r1
    6e76:	15 90       	lpm	r1, Z+
    6e78:	1d 92       	st	X+, r1
    6e7a:	15 90       	lpm	r1, Z+
    6e7c:	1d 92       	st	X+, r1
    6e7e:	15 90       	lpm	r1, Z+
    6e80:	1d 92       	st	X+, r1
    6e82:	15 90       	lpm	r1, Z+
    6e84:	1d 92       	st	X+, r1
    6e86:	15 90       	lpm	r1, Z+
    6e88:	1d 92       	st	X+, r1
    6e8a:	15 90       	lpm	r1, Z+
    6e8c:	1d 92       	st	X+, r1
    6e8e:	15 90       	lpm	r1, Z+
    6e90:	1d 92       	st	X+, r1
    6e92:	15 90       	lpm	r1, Z+
    6e94:	1d 92       	st	X+, r1
    6e96:	15 90       	lpm	r1, Z+
    6e98:	1d 92       	st	X+, r1
    6e9a:	15 90       	lpm	r1, Z+
    6e9c:	1d 92       	st	X+, r1
    6e9e:	15 90       	lpm	r1, Z+
    6ea0:	1d 92       	st	X+, r1
    6ea2:	15 90       	lpm	r1, Z+
    6ea4:	1d 92       	st	X+, r1
    6ea6:	15 90       	lpm	r1, Z+
    6ea8:	1d 92       	st	X+, r1
    6eaa:	15 90       	lpm	r1, Z+
    6eac:	1d 92       	st	X+, r1
    6eae:	15 90       	lpm	r1, Z+
    6eb0:	1d 92       	st	X+, r1
    6eb2:	15 90       	lpm	r1, Z+
    6eb4:	1d 92       	st	X+, r1
    6eb6:	15 90       	lpm	r1, Z+
    6eb8:	1d 92       	st	X+, r1
    6eba:	15 90       	lpm	r1, Z+
    6ebc:	1d 92       	st	X+, r1
    6ebe:	15 90       	lpm	r1, Z+
    6ec0:	1d 92       	st	X+, r1
    6ec2:	15 90       	lpm	r1, Z+
    6ec4:	1d 92       	st	X+, r1
    6ec6:	15 90       	lpm	r1, Z+
    6ec8:	1d 92       	st	X+, r1
    6eca:	15 90       	lpm	r1, Z+
    6ecc:	1d 92       	st	X+, r1
    6ece:	15 90       	lpm	r1, Z+
    6ed0:	1d 92       	st	X+, r1
    6ed2:	15 90       	lpm	r1, Z+
    6ed4:	1d 92       	st	X+, r1
    6ed6:	15 90       	lpm	r1, Z+
    6ed8:	1d 92       	st	X+, r1
    6eda:	15 90       	lpm	r1, Z+
    6edc:	1d 92       	st	X+, r1
    6ede:	15 90       	lpm	r1, Z+
    6ee0:	1d 92       	st	X+, r1
    6ee2:	15 90       	lpm	r1, Z+
    6ee4:	1d 92       	st	X+, r1
    6ee6:	15 90       	lpm	r1, Z+
    6ee8:	1d 92       	st	X+, r1
    6eea:	15 90       	lpm	r1, Z+
    6eec:	1d 92       	st	X+, r1
    6eee:	15 90       	lpm	r1, Z+
    6ef0:	1d 92       	st	X+, r1
    6ef2:	15 90       	lpm	r1, Z+
    6ef4:	1d 92       	st	X+, r1
    6ef6:	15 90       	lpm	r1, Z+
    6ef8:	1d 92       	st	X+, r1
    6efa:	15 90       	lpm	r1, Z+
    6efc:	1d 92       	st	X+, r1
    6efe:	15 90       	lpm	r1, Z+
    6f00:	1d 92       	st	X+, r1
    6f02:	15 90       	lpm	r1, Z+
    6f04:	1d 92       	st	X+, r1
    6f06:	15 90       	lpm	r1, Z+
    6f08:	1d 92       	st	X+, r1
    6f0a:	15 90       	lpm	r1, Z+
    6f0c:	1d 92       	st	X+, r1
    6f0e:	15 90       	lpm	r1, Z+
    6f10:	1d 92       	st	X+, r1
    6f12:	15 90       	lpm	r1, Z+
    6f14:	1d 92       	st	X+, r1
    6f16:	15 90       	lpm	r1, Z+
    6f18:	1d 92       	st	X+, r1
    6f1a:	15 90       	lpm	r1, Z+
    6f1c:	1d 92       	st	X+, r1
    6f1e:	15 90       	lpm	r1, Z+
    6f20:	1d 92       	st	X+, r1
    6f22:	15 90       	lpm	r1, Z+
    6f24:	1d 92       	st	X+, r1
    6f26:	15 90       	lpm	r1, Z+
    6f28:	1d 92       	st	X+, r1
    6f2a:	15 90       	lpm	r1, Z+
    6f2c:	1d 92       	st	X+, r1
    6f2e:	15 90       	lpm	r1, Z+
    6f30:	1d 92       	st	X+, r1
    6f32:	15 90       	lpm	r1, Z+
    6f34:	1d 92       	st	X+, r1
    6f36:	15 90       	lpm	r1, Z+
    6f38:	1d 92       	st	X+, r1
    6f3a:	15 90       	lpm	r1, Z+
    6f3c:	1d 92       	st	X+, r1
    6f3e:	15 90       	lpm	r1, Z+
    6f40:	1d 92       	st	X+, r1
    6f42:	15 90       	lpm	r1, Z+
    6f44:	1d 92       	st	X+, r1
    6f46:	15 90       	lpm	r1, Z+
    6f48:	1d 92       	st	X+, r1
    6f4a:	15 90       	lpm	r1, Z+
    6f4c:	1d 92       	st	X+, r1
    6f4e:	15 90       	lpm	r1, Z+
    6f50:	1d 92       	st	X+, r1
    6f52:	15 90       	lpm	r1, Z+
    6f54:	1d 92       	st	X+, r1
    6f56:	15 90       	lpm	r1, Z+
    6f58:	1d 92       	st	X+, r1
    6f5a:	15 90       	lpm	r1, Z+
    6f5c:	1d 92       	st	X+, r1
    6f5e:	15 90       	lpm	r1, Z+
    6f60:	1d 92       	st	X+, r1
    6f62:	15 90       	lpm	r1, Z+
    6f64:	1d 92       	st	X+, r1
    6f66:	15 90       	lpm	r1, Z+
    6f68:	1d 92       	st	X+, r1
    6f6a:	15 90       	lpm	r1, Z+
    6f6c:	1d 92       	st	X+, r1
	clr r1
    6f6e:	11 24       	eor	r1, r1
	ret
    6f70:	08 95       	ret

00006f72 <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6f72:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    6f74:	e0 ed       	ldi	r30, 0xD0	; 208
	ldi ZH,hi8(ram_tiles)
    6f76:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    6f78:	82 9f       	mul	r24, r18
	add ZL,r0
    6f7a:	e0 0d       	add	r30, r0
	adc ZH,r1
    6f7c:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6f7e:	a0 ed       	ldi	r26, 0xD0	; 208
	ldi XH,hi8(ram_tiles)
    6f80:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6f82:	62 9f       	mul	r22, r18
	add XL,r0
    6f84:	a0 0d       	add	r26, r0
	adc XH,r1
    6f86:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    6f88:	11 90       	ld	r1, Z+
    6f8a:	1d 92       	st	X+, r1
    6f8c:	11 90       	ld	r1, Z+
    6f8e:	1d 92       	st	X+, r1
    6f90:	11 90       	ld	r1, Z+
    6f92:	1d 92       	st	X+, r1
    6f94:	11 90       	ld	r1, Z+
    6f96:	1d 92       	st	X+, r1
    6f98:	11 90       	ld	r1, Z+
    6f9a:	1d 92       	st	X+, r1
    6f9c:	11 90       	ld	r1, Z+
    6f9e:	1d 92       	st	X+, r1
    6fa0:	11 90       	ld	r1, Z+
    6fa2:	1d 92       	st	X+, r1
    6fa4:	11 90       	ld	r1, Z+
    6fa6:	1d 92       	st	X+, r1
    6fa8:	11 90       	ld	r1, Z+
    6faa:	1d 92       	st	X+, r1
    6fac:	11 90       	ld	r1, Z+
    6fae:	1d 92       	st	X+, r1
    6fb0:	11 90       	ld	r1, Z+
    6fb2:	1d 92       	st	X+, r1
    6fb4:	11 90       	ld	r1, Z+
    6fb6:	1d 92       	st	X+, r1
    6fb8:	11 90       	ld	r1, Z+
    6fba:	1d 92       	st	X+, r1
    6fbc:	11 90       	ld	r1, Z+
    6fbe:	1d 92       	st	X+, r1
    6fc0:	11 90       	ld	r1, Z+
    6fc2:	1d 92       	st	X+, r1
    6fc4:	11 90       	ld	r1, Z+
    6fc6:	1d 92       	st	X+, r1
    6fc8:	11 90       	ld	r1, Z+
    6fca:	1d 92       	st	X+, r1
    6fcc:	11 90       	ld	r1, Z+
    6fce:	1d 92       	st	X+, r1
    6fd0:	11 90       	ld	r1, Z+
    6fd2:	1d 92       	st	X+, r1
    6fd4:	11 90       	ld	r1, Z+
    6fd6:	1d 92       	st	X+, r1
    6fd8:	11 90       	ld	r1, Z+
    6fda:	1d 92       	st	X+, r1
    6fdc:	11 90       	ld	r1, Z+
    6fde:	1d 92       	st	X+, r1
    6fe0:	11 90       	ld	r1, Z+
    6fe2:	1d 92       	st	X+, r1
    6fe4:	11 90       	ld	r1, Z+
    6fe6:	1d 92       	st	X+, r1
    6fe8:	11 90       	ld	r1, Z+
    6fea:	1d 92       	st	X+, r1
    6fec:	11 90       	ld	r1, Z+
    6fee:	1d 92       	st	X+, r1
    6ff0:	11 90       	ld	r1, Z+
    6ff2:	1d 92       	st	X+, r1
    6ff4:	11 90       	ld	r1, Z+
    6ff6:	1d 92       	st	X+, r1
    6ff8:	11 90       	ld	r1, Z+
    6ffa:	1d 92       	st	X+, r1
    6ffc:	11 90       	ld	r1, Z+
    6ffe:	1d 92       	st	X+, r1
    7000:	11 90       	ld	r1, Z+
    7002:	1d 92       	st	X+, r1
    7004:	11 90       	ld	r1, Z+
    7006:	1d 92       	st	X+, r1
    7008:	11 90       	ld	r1, Z+
    700a:	1d 92       	st	X+, r1
    700c:	11 90       	ld	r1, Z+
    700e:	1d 92       	st	X+, r1
    7010:	11 90       	ld	r1, Z+
    7012:	1d 92       	st	X+, r1
    7014:	11 90       	ld	r1, Z+
    7016:	1d 92       	st	X+, r1
    7018:	11 90       	ld	r1, Z+
    701a:	1d 92       	st	X+, r1
    701c:	11 90       	ld	r1, Z+
    701e:	1d 92       	st	X+, r1
    7020:	11 90       	ld	r1, Z+
    7022:	1d 92       	st	X+, r1
    7024:	11 90       	ld	r1, Z+
    7026:	1d 92       	st	X+, r1
    7028:	11 90       	ld	r1, Z+
    702a:	1d 92       	st	X+, r1
    702c:	11 90       	ld	r1, Z+
    702e:	1d 92       	st	X+, r1
    7030:	11 90       	ld	r1, Z+
    7032:	1d 92       	st	X+, r1
    7034:	11 90       	ld	r1, Z+
    7036:	1d 92       	st	X+, r1
    7038:	11 90       	ld	r1, Z+
    703a:	1d 92       	st	X+, r1
    703c:	11 90       	ld	r1, Z+
    703e:	1d 92       	st	X+, r1
    7040:	11 90       	ld	r1, Z+
    7042:	1d 92       	st	X+, r1
    7044:	11 90       	ld	r1, Z+
    7046:	1d 92       	st	X+, r1
    7048:	11 90       	ld	r1, Z+
    704a:	1d 92       	st	X+, r1
    704c:	11 90       	ld	r1, Z+
    704e:	1d 92       	st	X+, r1
    7050:	11 90       	ld	r1, Z+
    7052:	1d 92       	st	X+, r1
    7054:	11 90       	ld	r1, Z+
    7056:	1d 92       	st	X+, r1
    7058:	11 90       	ld	r1, Z+
    705a:	1d 92       	st	X+, r1
    705c:	11 90       	ld	r1, Z+
    705e:	1d 92       	st	X+, r1
    7060:	11 90       	ld	r1, Z+
    7062:	1d 92       	st	X+, r1
    7064:	11 90       	ld	r1, Z+
    7066:	1d 92       	st	X+, r1
    7068:	11 90       	ld	r1, Z+
    706a:	1d 92       	st	X+, r1
    706c:	11 90       	ld	r1, Z+
    706e:	1d 92       	st	X+, r1
    7070:	11 90       	ld	r1, Z+
    7072:	1d 92       	st	X+, r1
    7074:	11 90       	ld	r1, Z+
    7076:	1d 92       	st	X+, r1
    7078:	11 90       	ld	r1, Z+
    707a:	1d 92       	st	X+, r1
    707c:	11 90       	ld	r1, Z+
    707e:	1d 92       	st	X+, r1
    7080:	11 90       	ld	r1, Z+
    7082:	1d 92       	st	X+, r1
    7084:	11 90       	ld	r1, Z+
    7086:	1d 92       	st	X+, r1
	clr r1
    7088:	11 24       	eor	r1, r1
	ret
    708a:	08 95       	ret

0000708c <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    708c:	e0 91 50 0a 	lds	r30, 0x0A50
	mov   r24,     ZL
    7090:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7092:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7094:	e8 0f       	add	r30, r24
	clr   ZH
    7096:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7098:	e0 5f       	subi	r30, 0xF0	; 240
	sbci  ZH,      hi8(-(ram_tiles_restore))
    709a:	f5 4f       	sbci	r31, 0xF5	; 245

	lds   r0,      free_tile_index
    709c:	00 90 4f 0a 	lds	r0, 0x0A4F
	sub   r24,     r0
    70a0:	80 19       	sub	r24, r0
	brcc  rbg_exit
    70a2:	30 f4       	brcc	.+12     	; 0x70b0 <rbg_exit>

000070a4 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    70a4:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    70a6:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    70a8:	01 90       	ld	r0, Z+
	st    X,       r0
    70aa:	0c 92       	st	X, r0
	inc   r24
    70ac:	83 95       	inc	r24
	brne  rbg_loop
    70ae:	d1 f7       	brne	.-12     	; 0x70a4 <rbg_loop>

000070b0 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    70b0:	08 95       	ret

000070b2 <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    70b2:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    70b4:	79 9f       	mul	r23, r25
	mov   XL,      r1
    70b6:	a1 2d       	mov	r26, r1
	clr   XH
    70b8:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    70ba:	ae 5a       	subi	r26, 0xAE	; 174
	sbci  XH,      hi8(-(sprites_tile_banks))
    70bc:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    70be:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    70c0:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    70c2:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    70c4:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    70c6:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    70c8:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    70ca:	89 9f       	mul	r24, r25
	movw  XL,      r0
    70cc:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    70ce:	a0 53       	subi	r26, 0x30	; 48
	sbci  XH,      hi8(-(ram_tiles))
    70d0:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    70d2:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    70d4:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    70d6:	09 c0       	rjmp	.+18     	; 0x70ea <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    70d8:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    70da:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    70dc:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    70de:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    70e0:	0a c0       	rjmp	.+20     	; 0x70f6 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    70e2:	17 96       	adiw	r26, 0x07	; 7

000070e4 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    70e4:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    70e6:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    70e8:	08 c0       	rjmp	.+16     	; 0x70fa <x_check_end>

000070ea <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    70ea:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    70ec:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    70ee:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    70f0:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    70f2:	f8 cf       	rjmp	.-16     	; 0x70e4 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    70f4:	11 97       	sbiw	r26, 0x01	; 1

000070f6 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    70f6:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    70f8:	b9 1f       	adc	r27, r25

000070fa <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    70fa:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    70fc:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    70fe:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7100:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7102:	09 c0       	rjmp	.+18     	; 0x7116 <y_2nd_tile>

	mul   r22,     r19
    7104:	63 9f       	mul	r22, r19
	add   XL,      r0
    7106:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7108:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    710a:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    710c:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    710e:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7110:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7112:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    7114:	08 c0       	rjmp	.+16     	; 0x7126 <y_check_end>

00007116 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    7116:	13 2e       	mov	r1, r19
	dec   r1
    7118:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    711a:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    711c:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    711e:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7120:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7122:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    7124:	13 2e       	mov	r1, r19

00007126 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7126:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    7128:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    712a:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    712c:	05 c0       	rjmp	.+10     	; 0x7138 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    712e:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7130:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7132:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    7134:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    7136:	04 c0       	rjmp	.+8      	; 0x7140 <x_diff_end>

00007138 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    7138:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    713a:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    713c:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    713e:	6f ef       	ldi	r22, 0xFF	; 255

00007140 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7140:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7142:	04 2e       	mov	r0, r20
	lsr   r20
    7144:	46 95       	lsr	r20
	brcc  x_loop1
    7146:	30 f4       	brcc	.+12     	; 0x7154 <x_loop1>
	breq  x_loopx
    7148:	61 f0       	breq	.+24     	; 0x7162 <x_loopx>

0000714a <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    714a:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    714c:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    714e:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7150:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7152:	b7 1f       	adc	r27, r23

00007154 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7154:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7156:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7158:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    715a:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    715c:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    715e:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7160:	a1 f7       	brne	.-24     	; 0x714a <x_loop0>

00007162 <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7162:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7164:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7166:	2c 93       	st	X, r18

	dec   r1
    7168:	1a 94       	dec	r1
	breq  loop_e
    716a:	49 f0       	breq	.+18     	; 0x717e <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    716c:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    716e:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7170:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7172:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7174:	40 2d       	mov	r20, r0
	lsr   r20
    7176:	46 95       	lsr	r20
	brcc  x_loop1
    7178:	68 f7       	brcc	.-38     	; 0x7154 <x_loop1>
	brne  x_loop0
    717a:	39 f7       	brne	.-50     	; 0x714a <x_loop0>
	rjmp  x_loopx
    717c:	f2 cf       	rjmp	.-28     	; 0x7162 <x_loopx>

0000717e <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    717e:	08 95       	ret

00007180 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7180:	0f 92       	push	r0
	push  r1
    7182:	1f 92       	push	r1
	push  ZL
    7184:	ef 93       	push	r30
	push  ZH
    7186:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7188:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    718a:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    718e:	ff 93       	push	r31

	sbrc  ZL,      2
    7190:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7192:	04 c0       	rjmp	.+8      	; 0x719c <__vector_13+0x1c>
	sbrc  ZL,      1
    7194:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7196:	02 c0       	rjmp	.+4      	; 0x719c <__vector_13+0x1c>
	nop
    7198:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    719a:	00 c0       	rjmp	.+0      	; 0x719c <__vector_13+0x1c>
	sbrs  ZL,      0
    719c:	e0 ff       	sbrs	r30, 0
	rjmp  .
    719e:	00 c0       	rjmp	.+0      	; 0x71a0 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    71a0:	e0 91 61 0a 	lds	r30, 0x0A61
	dec ZL
    71a4:	ea 95       	dec	r30
	sts sync_pulse,ZL
    71a6:	e0 93 61 0a 	sts	0x0A61, r30

	;process sync phases
	lds ZH,sync_phase
    71aa:	f0 91 60 0a 	lds	r31, 0x0A60
	sbrc ZH,0
    71ae:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    71b0:	51 c0       	rjmp	.+162    	; 0x7254 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    71b2:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    71b4:	98 f0       	brcs	.+38     	; 0x71dc <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    71b6:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    71b8:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    71bc:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    71be:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    71c2:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    71c4:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    71c6:	26 f4       	brtc	.+8      	; 0x71d0 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    71c8:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    71ca:	0e 94 b2 39 	call	0x7364	; 0x7364 <update_sound>
	rjmp sync_end
    71ce:	b2 c0       	rjmp	.+356    	; 0x7334 <sync_end>

000071d0 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    71d0:	e5 e1       	ldi	r30, 0x15	; 21
    71d2:	ea 95       	dec	r30
    71d4:	f1 f7       	brne	.-4      	; 0x71d2 <sync_pre_eq_no_sound_update+0x2>
    71d6:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    71d8:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    71da:	ac c0       	rjmp	.+344    	; 0x7334 <sync_end>

000071dc <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    71dc:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    71de:	08 f1       	brcs	.+66     	; 0x7222 <sync_post_eq>

	rjmp .
    71e0:	00 c0       	rjmp	.+0      	; 0x71e2 <sync_eq+0x6>
	rjmp .
    71e2:	00 c0       	rjmp	.+0      	; 0x71e4 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    71e4:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    71e6:	e0 fb       	bst	r30, 0
	ldi ZL,4
    71e8:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    71ea:	16 f4       	brtc	.+4      	; 0x71f0 <sync_eq_skip>
	
	call update_sound
    71ec:	0e 94 b2 39 	call	0x7364	; 0x7364 <update_sound>

000071f0 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    71f0:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    71f2:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    71f6:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    71f8:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    71fc:	9b c0       	rjmp	.+310    	; 0x7334 <sync_end>

000071fe <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    71fe:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7200:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7204:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7206:	04 c0       	rjmp	.+8      	; 0x7210 <__vector_14+0x12>
	sbrc  ZL,      1
    7208:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    720a:	02 c0       	rjmp	.+4      	; 0x7210 <__vector_14+0x12>
	nop
    720c:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    720e:	00 c0       	rjmp	.+0      	; 0x7210 <__vector_14+0x12>
	sbrs  ZL,      0
    7210:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7212:	00 c0       	rjmp	.+0      	; 0x7214 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    7214:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    7216:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    7218:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    721a:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    721e:	ef 91       	pop	r30
	reti
    7220:	18 95       	reti

00007222 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7222:	00 c0       	rjmp	.+0      	; 0x7224 <sync_post_eq+0x2>

	bst ZL,0
    7224:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7226:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7228:	26 f4       	brtc	.+8      	; 0x7232 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    722a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    722c:	0e 94 b2 39 	call	0x7364	; 0x7364 <update_sound>
	rjmp sync_pre_eq_cont
    7230:	05 c0       	rjmp	.+10     	; 0x723c <sync_pre_eq_cont>

00007232 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7232:	e5 e1       	ldi	r30, 0x15	; 21
    7234:	ea 95       	dec	r30
    7236:	f1 f7       	brne	.-4      	; 0x7234 <sync_post_eq_no_sound_update+0x2>
    7238:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    723a:	28 9a       	sbi	0x05, 0	; 5

0000723c <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    723c:	e0 91 61 0a 	lds	r30, 0x0A61
	cpi ZL,0
    7240:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7242:	09 f0       	breq	.+2      	; 0x7246 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7244:	77 c0       	rjmp	.+238    	; 0x7334 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7246:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7248:	e0 93 61 0a 	sts	0x0A61, r30
	ldi ZL,1
    724c:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    724e:	e0 93 60 0a 	sts	0x0A60, r30
	
	rjmp sync_end
    7252:	70 c0       	rjmp	.+224    	; 0x7334 <sync_end>

00007254 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7254:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7256:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    725a:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    725c:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7260:	00 c0       	rjmp	.+0      	; 0x7262 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7262:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7264:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7266:	00 c0       	rjmp	.+0      	; 0x7268 <sync_hsync+0x14>
	call update_sound
    7268:	0e 94 b2 39 	call	0x7364	; 0x7364 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    726c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    726e:	00 90 67 0a 	lds	r0, 0x0A67
	sub ZH,r0				
    7272:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7274:	e0 91 61 0a 	lds	r30, 0x0A61
	cp ZL,ZH
    7278:	ef 17       	cp	r30, r31
	brsh no_render
    727a:	d8 f4       	brcc	.+54     	; 0x72b2 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    727c:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    727e:	00 90 67 0a 	lds	r0, 0x0A67
	sub ZH,r0				
    7282:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7284:	00 90 68 0a 	lds	r0, 0x0A68
	sub ZH,r0			
    7288:	f0 19       	sub	r31, r0
	cp ZL,ZH
    728a:	ef 17       	cp	r30, r31
	brlo no_render
    728c:	90 f0       	brcs	.+36     	; 0x72b2 <no_render>

	;push r1-r29
	ldi ZL,29
    728e:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7290:	ff 27       	eor	r31, r31

00007292 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7292:	00 80       	ld	r0, Z
	push r0
    7294:	0f 92       	push	r0
	dec ZL
    7296:	ea 95       	dec	r30
	brne push_loop	
    7298:	e1 f7       	brne	.-8      	; 0x7292 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    729a:	05 e0       	ldi	r16, 0x05	; 5
    729c:	0a 95       	dec	r16
    729e:	f1 f7       	brne	.-4      	; 0x729c <push_loop+0xa>
    72a0:	00 c0       	rjmp	.+0      	; 0x72a2 <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    72a2:	0e 94 54 36 	call	0x6ca8	; 0x6ca8 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    72a6:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    72a8:	ff 27       	eor	r31, r31

000072aa <pop_loop>:
pop_loop:
	pop r0
    72aa:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    72ac:	01 92       	st	Z+, r0
	cpi ZL,30
    72ae:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    72b0:	e0 f3       	brcs	.-8      	; 0x72aa <pop_loop>

000072b2 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    72b2:	e0 91 61 0a 	lds	r30, 0x0A61
	cpi ZL,0
    72b6:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    72b8:	09 f0       	breq	.+2      	; 0x72bc <no_render+0xa>
	rjmp sync_end
    72ba:	3c c0       	rjmp	.+120    	; 0x7334 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    72bc:	2f 93       	push	r18
	push r19
    72be:	3f 93       	push	r19
	push r20
    72c0:	4f 93       	push	r20
	push r21
    72c2:	5f 93       	push	r21
	push r22
    72c4:	6f 93       	push	r22
	push r23
    72c6:	7f 93       	push	r23
	push r24
    72c8:	8f 93       	push	r24
	push r25
    72ca:	9f 93       	push	r25
	push r26
    72cc:	af 93       	push	r26
	push r27
    72ce:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    72d0:	78 94       	sei
	clr r1
    72d2:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    72d4:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    72d6:	e0 93 60 0a 	sts	0x0A60, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    72da:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    72dc:	e0 93 61 0a 	sts	0x0A61, r30



	;increment the vsync counter
	lds r24,vsync_counter
    72e0:	80 91 71 0a 	lds	r24, 0x0A71
	lds r25,vsync_counter+1
    72e4:	90 91 72 0a 	lds	r25, 0x0A72
	adiw r24,1
    72e8:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    72ea:	80 93 71 0a 	sts	0x0A71, r24
	sts vsync_counter+1,r25
    72ee:	90 93 72 0a 	sts	0x0A72, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    72f2:	e0 91 63 0a 	lds	r30, 0x0A63
	lds ZH,pre_vsync_user_callback+1
    72f6:	f0 91 64 0a 	lds	r31, 0x0A64
	cp  ZL,r1
    72fa:	e1 15       	cp	r30, r1
	cpc ZH,r1
    72fc:	f1 05       	cpc	r31, r1
	breq .+2 
    72fe:	09 f0       	breq	.+2      	; 0x7302 <no_render+0x50>
	icall
    7300:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7302:	0e 94 5d 3b 	call	0x76ba	; 0x76ba <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7306:	0e 94 fa 49 	call	0x93f4	; 0x93f4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    730a:	0e 94 ac 39 	call	0x7358	; 0x7358 <process_music>
	clr r1
    730e:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7310:	e0 91 65 0a 	lds	r30, 0x0A65
	lds ZH,post_vsync_user_callback+1
    7314:	f0 91 66 0a 	lds	r31, 0x0A66
	cp  ZL,r1
    7318:	e1 15       	cp	r30, r1
	cpc ZH,r1
    731a:	f1 05       	cpc	r31, r1
	breq .+2 
    731c:	09 f0       	breq	.+2      	; 0x7320 <no_render+0x6e>
	icall
    731e:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7320:	bf 91       	pop	r27
	pop r26
    7322:	af 91       	pop	r26
	pop r25
    7324:	9f 91       	pop	r25
	pop r24
    7326:	8f 91       	pop	r24
	pop r23
    7328:	7f 91       	pop	r23
	pop r22
    732a:	6f 91       	pop	r22
	pop r21
    732c:	5f 91       	pop	r21
	pop r20
    732e:	4f 91       	pop	r20
	pop r19
    7330:	3f 91       	pop	r19
	pop r18
    7332:	2f 91       	pop	r18

00007334 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7334:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7336:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7338:	ff 91       	pop	r31
	pop ZL
    733a:	ef 91       	pop	r30
	pop r1
    733c:	1f 90       	pop	r1
	pop r0
    733e:	0f 90       	pop	r0
	reti
    7340:	18 95       	reti

00007342 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7342:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7344:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7346:	00 c0       	rjmp	.+0      	; 0x7348 <hsync_pulse+0x6>
	call update_sound
    7348:	0e 94 b2 39 	call	0x7364	; 0x7364 <update_sound>

	lds ZL,sync_pulse
    734c:	e0 91 61 0a 	lds	r30, 0x0A61
	dec ZL
    7350:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7352:	e0 93 61 0a 	sts	0x0A61, r30

	ret
    7356:	08 95       	ret

00007358 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7358:	e0 91 83 0a 	lds	r30, 0x0A83
	sbrc ZL,0
    735c:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    735e:	0e 94 b9 3e 	call	0x7d72	; 0x7d72 <ProcessMusic>
#endif

	ret
    7362:	08 95       	ret

00007364 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7364:	0f 93       	push	r16
	push r17
    7366:	1f 93       	push	r17
	push r18
    7368:	2f 93       	push	r18
	push r28
    736a:	cf 93       	push	r28
	push r29
    736c:	df 93       	push	r29

	mov r18,ZL
    736e:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7370:	00 91 85 0a 	lds	r16, 0x0A85
	lds r17,tr1_pos_frac
    7374:	10 91 87 0a 	lds	r17, 0x0A87
	add	r17,r16	;add step to fractional part of sample pos
    7378:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    737a:	00 91 86 0a 	lds	r16, 0x0A86
	lds ZL,tr1_pos_lo
    737e:	e0 91 88 0a 	lds	r30, 0x0A88
	lds ZH,tr1_pos_hi 
    7382:	f0 91 89 0a 	lds	r31, 0x0A89
	adc ZL,r16	;add step to low byte of sample pos
    7386:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7388:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    738a:	e0 93 88 0a 	sts	0x0A88, r30
	sts tr1_pos_frac,r17
    738e:	10 93 87 0a 	sts	0x0A87, r17
	lds r17,tr1_vol
    7392:	10 91 84 0a 	lds	r17, 0x0A84
	mulsu r16,r17;(sample*mixing vol)
    7396:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7398:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    739a:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    739c:	d0 2d       	mov	r29, r0
	nop
    739e:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    73a0:	00 91 8b 0a 	lds	r16, 0x0A8B
	lds r17,tr2_pos_frac
    73a4:	10 91 8d 0a 	lds	r17, 0x0A8D
	add	r17,r16	;add step to fractional part of sample pos
    73a8:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    73aa:	00 91 8c 0a 	lds	r16, 0x0A8C
	lds ZL,tr2_pos_lo
    73ae:	e0 91 8e 0a 	lds	r30, 0x0A8E
	lds ZH,tr2_pos_hi 
    73b2:	f0 91 8f 0a 	lds	r31, 0x0A8F
	adc ZL,r16	;add step to low byte of sample pos
    73b6:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    73b8:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    73ba:	e0 93 8e 0a 	sts	0x0A8E, r30
	sts tr2_pos_frac,r17
    73be:	10 93 8d 0a 	sts	0x0A8D, r17
	lds r17,tr2_vol
    73c2:	10 91 8a 0a 	lds	r17, 0x0A8A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    73c6:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    73c8:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    73ca:	20 ff       	sbrs	r18, 0
	rjmp .
    73cc:	00 c0       	rjmp	.+0      	; 0x73ce <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    73ce:	01 03       	mulsu	r16, r17
	clr r0
    73d0:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    73d2:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73d4:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    73d6:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    73d8:	00 91 91 0a 	lds	r16, 0x0A91
	lds r17,tr3_pos_frac
    73dc:	10 91 93 0a 	lds	r17, 0x0A93
	add	r17,r16				;add step to fractional part of sample pos
    73e0:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    73e2:	00 91 92 0a 	lds	r16, 0x0A92
	lds ZL,tr3_pos_lo
    73e6:	e0 91 94 0a 	lds	r30, 0x0A94
	lds ZH,tr3_pos_hi 
    73ea:	f0 91 95 0a 	lds	r31, 0x0A95
	adc ZL,r16				;add step to low byte of sample pos
    73ee:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    73f0:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    73f2:	e0 93 94 0a 	sts	0x0A94, r30
	sts tr3_pos_frac,r17
    73f6:	10 93 93 0a 	sts	0x0A93, r17
	lds r17,tr3_vol
    73fa:	10 91 90 0a 	lds	r17, 0x0A90
	mulsu r16,r17			;(sample*mixing vol)
    73fe:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7400:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7402:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7404:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7406:	00 91 98 0a 	lds	r16, 0x0A98
	lds r17,tr4_barrel_hi
    740a:	10 91 99 0a 	lds	r17, 0x0A99
	lds ZL,tr4_divider
    740e:	e0 91 9a 0a 	lds	r30, 0x0A9A
	dec ZL	
    7412:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7414:	92 f4       	brpl	.+36     	; 0x743a <ch4_no_shift>

	lds ZH,tr4_params
    7416:	f0 91 97 0a 	lds	r31, 0x0A97
	mov ZL,ZH
    741a:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    741c:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    741e:	00 2e       	mov	r0, r16
	lsr r0
    7420:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7422:	00 26       	eor	r0, r16
	bst r0,0
    7424:	00 fa       	bst	r0, 0
	lsr r17
    7426:	16 95       	lsr	r17
	ror r16
    7428:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    742a:	16 f9       	bld	r17, 6
	sbrs ZH,0
    742c:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    742e:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7430:	00 93 98 0a 	sts	0x0A98, r16
	sts tr4_barrel_hi,r17
    7434:	10 93 99 0a 	sts	0x0A99, r17

	rjmp ch4_end
    7438:	03 c0       	rjmp	.+6      	; 0x7440 <ch4_end>

0000743a <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    743a:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    743c:	1a 95       	dec	r17
	brne .-4
    743e:	f1 f7       	brne	.-4      	; 0x743c <ch4_no_shift+0x2>

00007440 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7440:	e0 93 9a 0a 	sts	0x0A9A, r30
	ldi r17,0x80 ;-128
    7444:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7446:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7448:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    744a:	21 ff       	sbrs	r18, 1
	rjmp .
    744c:	00 c0       	rjmp	.+0      	; 0x744e <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    744e:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7450:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7452:	00 91 96 0a 	lds	r16, 0x0A96

	mulsu r17,r16;(sample*mixing vol)
    7456:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7458:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    745a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    745c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    745e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7460:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7462:	d0 05       	cpc	r29, r0
	brlt .+2
    7464:	0c f0       	brlt	.+2      	; 0x7468 <ch4_end+0x28>
	ldi r28,127
    7466:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7468:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    746a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    746c:	d0 05       	cpc	r29, r0
	brge .+2
    746e:	0c f4       	brge	.+2      	; 0x7472 <ch4_end+0x32>
	ldi r28,-128
    7470:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7472:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7474:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    7478:	e4 ec       	ldi	r30, 0xC4	; 196
	ldi ZH,hi8(uart_rx_buf)
    747a:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    747c:	00 91 c1 0a 	lds	r16, 0x0AC1

	clr r0
    7480:	00 24       	eor	r0, r0
	add ZL,r16
    7482:	e0 0f       	add	r30, r16
	adc ZH,r0
    7484:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    7486:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    748a:	17 ff       	sbrs	r17, 7
	rjmp 1f
    748c:	08 c0       	rjmp	.+16     	; 0x749e <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    748e:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    7492:	20 83       	st	Z, r18
	inc r16
    7494:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    7496:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    7498:	00 93 c1 0a 	sts	0x0AC1, r16
	rjmp uart_tx
    749c:	03 c0       	rjmp	.+6      	; 0x74a4 <uart_tx>
1:
	WAIT r28,9
    749e:	c3 e0       	ldi	r28, 0x03	; 3
    74a0:	ca 95       	dec	r28
    74a2:	f1 f7       	brne	.-4      	; 0x74a0 <ch4_end+0x60>

000074a4 <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    74a4:	e0 ea       	ldi	r30, 0xA0	; 160
	ldi ZH,hi8(uart_tx_buf)
    74a6:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    74a8:	00 91 04 0b 	lds	r16, 0x0B04
	lds r29,uart_tx_head
    74ac:	d0 91 c2 0a 	lds	r29, 0x0AC2
	
	add ZL,r16
    74b0:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    74b2:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    74b4:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    74b8:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    74ba:	d0 1b       	sub	r29, r16
	mul r28,r29
    74bc:	cd 9f       	mul	r28, r29
	breq 1f		
    74be:	41 f0       	breq	.+16     	; 0x74d0 <uart_tx+0x2c>

	ld r18,Z
    74c0:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    74c2:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    74c6:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    74c8:	0f 71       	andi	r16, 0x1F	; 31
	sts uart_tx_tail,r16
    74ca:	00 93 04 0b 	sts	0x0B04, r16
	rjmp update_sound_end
    74ce:	03 c0       	rjmp	.+6      	; 0x74d6 <update_sound_end>
1:
	WAIT r28,9
    74d0:	c3 e0       	ldi	r28, 0x03	; 3
    74d2:	ca 95       	dec	r28
    74d4:	f1 f7       	brne	.-4      	; 0x74d2 <uart_tx+0x2e>

000074d6 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    74d6:	df 91       	pop	r29
	pop r28
    74d8:	cf 91       	pop	r28
	pop r18
    74da:	2f 91       	pop	r18
	pop r17
    74dc:	1f 91       	pop	r17
	pop r16
    74de:	0f 91       	pop	r16
	
	ret
    74e0:	08 95       	ret

000074e2 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    74e2:	80 93 52 0a 	sts	0x0A52, r24
	sts sprites_tile_banks+1,r25
    74e6:	90 93 53 0a 	sts	0x0A53, r25
	ret
    74ea:	08 95       	ret

000074ec <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    74ec:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    74ee:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    74f0:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    74f2:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    74f4:	65 e1       	ldi	r22, 0x15	; 21

000074f6 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    74f6:	6d 93       	st	X+, r22
	sbiw r30,1
    74f8:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    74fa:	e9 f7       	brne	.-6      	; 0x74f6 <fill_vram_loop>

	clr r1
    74fc:	11 24       	eor	r1, r1

	ret
    74fe:	08 95       	ret

00007500 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7500:	50 91 5c 0a 	lds	r21, 0x0A5C
	add r20,21
    7504:	45 0f       	add	r20, r21
	rjmp SetTile	
    7506:	00 c0       	rjmp	.+0      	; 0x7508 <SetTile>

00007508 <SetTile>:

	ret

#else

	clr r25
    7508:	99 27       	eor	r25, r25
	clr r23	
    750a:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    750c:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    750e:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7510:	08 0e       	add	r0, r24
	adc r1,r25
    7512:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7514:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    7516:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7518:	a0 0d       	add	r26, r0
	adc XH,r1
    751a:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    751c:	4b 5e       	subi	r20, 0xEB	; 235
	st X,r20
    751e:	4c 93       	st	X, r20

	clr r1
    7520:	11 24       	eor	r1, r1

	ret
    7522:	08 95       	ret

00007524 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7524:	80 93 5c 0a 	sts	0x0A5C, r24
	ret
    7528:	08 95       	ret

0000752a <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    752a:	80 93 5a 0a 	sts	0x0A5A, r24
	sts tile_table_hi,r25	
    752e:	90 93 5b 0a 	sts	0x0A5B, r25
	ret
    7532:	08 95       	ret

00007534 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7534:	80 91 62 0a 	lds	r24, 0x0A62
	andi r24,SYNC_FLAG_VSYNC
    7538:	81 70       	andi	r24, 0x01	; 1
	ret
    753a:	08 95       	ret

0000753c <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    753c:	20 91 62 0a 	lds	r18, 0x0A62
	andi r18,~SYNC_FLAG_VSYNC
    7540:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7542:	20 93 62 0a 	sts	0x0A62, r18
	ret
    7546:	08 95       	ret

00007548 <GetVsyncCounter>:
; C-callable
; returns: (unsigned int) r25:r24
;************************************
.section .text.GetVsyncCounter
GetVsyncCounter:
	lds r24,vsync_counter
    7548:	80 91 71 0a 	lds	r24, 0x0A71
	lds r25,vsync_counter+1
    754c:	90 91 72 0a 	lds	r25, 0x0A72
	ret
    7550:	08 95       	ret

00007552 <ClearVsyncCounter>:
;
; C-callable
;************************************
.section .text.ClearVsyncCounter
ClearVsyncCounter:
	sts vsync_counter,r1
    7552:	10 92 71 0a 	sts	0x0A71, r1
	sts vsync_counter+1,r1
    7556:	10 92 72 0a 	sts	0x0A72, r1
	ret
    755a:	08 95       	ret

0000755c <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    755c:	88 23       	and	r24, r24
	brne rj_p2
    755e:	29 f4       	brne	.+10     	; 0x756a <rj_p2>
		
	lds r24,joypad1_status_lo
    7560:	80 91 69 0a 	lds	r24, 0x0A69
	lds r25,joypad1_status_lo+1
    7564:	90 91 6a 0a 	lds	r25, 0x0A6A
	ret
    7568:	08 95       	ret

0000756a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    756a:	80 91 6d 0a 	lds	r24, 0x0A6D
	lds r25,joypad2_status_lo+1	
    756e:	90 91 6e 0a 	lds	r25, 0x0A6E

	ret
    7572:	08 95       	ret

00007574 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7574:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7576:	fe cf       	rjmp	.-4      	; 0x7574 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7578:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    757a:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    757c:	60 bd       	out	0x20, r22	; 32
   cli
    757e:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7580:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7582:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7584:	78 94       	sei
   ret
    7586:	08 95       	ret

00007588 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7588:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    758a:	fe cf       	rjmp	.-4      	; 0x7588 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    758c:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    758e:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7590:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7592:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7594:	80 b5       	in	r24, 0x20	; 32
   sei
    7596:	78 94       	sei
   ret
    7598:	08 95       	ret

0000759a <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    759a:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    759c:	80 93 61 0a 	sts	0x0A61, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    75a0:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    75a4:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    75a8:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    75ac:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    75b0:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    75b4:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    75b8:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    75bc:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    75c0:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    75c2:	80 93 81 00 	sts	0x0081, r24

		cli
    75c6:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    75c8:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    75ca:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    75ce:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    75d0:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    75d4:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    75d6:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    75da:	90 93 60 00 	sts	0x0060, r25
	
		sei
    75de:	78 94       	sei

000075e0 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    75e0:	80 91 61 0a 	lds	r24, 0x0A61
		cpi r24,8
    75e4:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    75e6:	e0 f3       	brcs	.-8      	; 0x75e0 <wait>

		ret
    75e8:	08 95       	ret

000075ea <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    75ea:	80 91 73 0a 	lds	r24, 0x0A73
		lds r25,random_value+1
    75ee:	90 91 74 0a 	lds	r25, 0x0A74
		ret
    75f2:	08 95       	ret

000075f4 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    75f4:	0f 93       	push	r16
		push r17
    75f6:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    75f8:	0f b7       	in	r16, 0x3f	; 63
		push r16
    75fa:	0f 93       	push	r16

		lds r16,sync_pulse
    75fc:	00 91 61 0a 	lds	r16, 0x0A61
		inc r16
    7600:	03 95       	inc	r16
		sts sync_pulse,r16
    7602:	00 93 61 0a 	sts	0x0A61, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7606:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7608:	08 c0       	rjmp	.+16     	; 0x761a <__vector_8+0x26>
		lds r17,random_value
    760a:	10 91 73 0a 	lds	r17, 0x0A73
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    760e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7612:	10 27       	eor	r17, r16
		sts random_value,r17
    7614:	10 93 73 0a 	sts	0x0A73, r17
		rjmp 2f
    7618:	07 c0       	rjmp	.+14     	; 0x7628 <__vector_8+0x34>
	1:
		lds r17,random_value+1
    761a:	10 91 74 0a 	lds	r17, 0x0A74
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    761e:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7622:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7624:	10 93 74 0a 	sts	0x0A74, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7628:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    762a:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    762e:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7630:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7632:	1f 91       	pop	r17
		pop r16
    7634:	0f 91       	pop	r16
		reti
    7636:	18 95       	reti

00007638 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7638:	98 e0       	ldi	r25, 0x08	; 8
    763a:	88 e1       	ldi	r24, 0x18	; 24
    763c:	0f b6       	in	r0, 0x3f	; 63
    763e:	f8 94       	cli
    7640:	a8 95       	wdr
    7642:	80 93 60 00 	sts	0x0060, r24
    7646:	0f be       	out	0x3f, r0	; 63
    7648:	90 93 60 00 	sts	0x0060, r25
	while(1);
    764c:	ff cf       	rjmp	.-2      	; 0x764c <SoftReset+0x14>

0000764e <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    764e:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7650:	c8 95       	lpm
    7652:	c8 95       	lpm
		Wait200ns();
    7654:	c8 95       	lpm
    7656:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7658:	12 98       	cbi	0x02, 2	; 2
    765a:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    765c:	80 e0       	ldi	r24, 0x00	; 0
    765e:	90 e0       	ldi	r25, 0x00	; 0
    7660:	20 e0       	ldi	r18, 0x00	; 0
    7662:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7664:	36 95       	lsr	r19
    7666:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7668:	96 95       	lsr	r25
    766a:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    766c:	c8 95       	lpm
    766e:	c8 95       	lpm
			Wait200ns();
    7670:	c8 95       	lpm
    7672:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7674:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7676:	00 9b       	sbis	0x00, 0	; 0
    7678:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    767a:	01 9b       	sbis	0x00, 1	; 0
    767c:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    767e:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7680:	c8 95       	lpm
    7682:	c8 95       	lpm
			Wait200ns();
    7684:	c8 95       	lpm
    7686:	c8 95       	lpm
    7688:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    768a:	61 f7       	brne	.-40     	; 0x7664 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    768c:	30 93 6a 0a 	sts	0x0A6A, r19
    7690:	20 93 69 0a 	sts	0x0A69, r18
		joypad2_status_lo=p2ButtonsLo;
    7694:	90 93 6e 0a 	sts	0x0A6E, r25
    7698:	80 93 6d 0a 	sts	0x0A6D, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    769c:	80 91 69 0a 	lds	r24, 0x0A69
    76a0:	90 91 6a 0a 	lds	r25, 0x0A6A
    76a4:	0f 97       	sbiw	r24, 0x0f	; 15
    76a6:	31 f0       	breq	.+12     	; 0x76b4 <ReadButtons+0x66>
    76a8:	80 91 6d 0a 	lds	r24, 0x0A6D
    76ac:	90 91 6e 0a 	lds	r25, 0x0A6E
    76b0:	0f 97       	sbiw	r24, 0x0f	; 15
    76b2:	11 f4       	brne	.+4      	; 0x76b8 <ReadButtons+0x6a>
		SoftReset();
    76b4:	0e 94 1c 3b 	call	0x7638	; 0x7638 <SoftReset>
    76b8:	08 95       	ret

000076ba <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    76ba:	10 92 c0 0a 	sts	0x0AC0, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    76be:	00 99       	sbic	0x00, 0	; 0
    76c0:	03 c0       	rjmp	.+6      	; 0x76c8 <ReadControllers+0xe>
    76c2:	81 e0       	ldi	r24, 0x01	; 1
    76c4:	80 93 c0 0a 	sts	0x0AC0, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    76c8:	01 99       	sbic	0x00, 1	; 0
    76ca:	05 c0       	rjmp	.+10     	; 0x76d6 <ReadControllers+0x1c>
    76cc:	80 91 c0 0a 	lds	r24, 0x0AC0
    76d0:	82 60       	ori	r24, 0x02	; 2
    76d2:	80 93 c0 0a 	sts	0x0AC0, r24
			
	//read the standard buttons
	ReadButtons();
    76d6:	0c 94 27 3b 	jmp	0x764e	; 0x764e <ReadButtons>

000076da <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    76da:	cf 93       	push	r28
    76dc:	df 93       	push	r29
    76de:	c0 e0       	ldi	r28, 0x00	; 0
    76e0:	d0 e0       	ldi	r29, 0x00	; 0
    76e2:	fe 01       	movw	r30, r28
    76e4:	e2 56       	subi	r30, 0x62	; 98
    76e6:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    76e8:	64 91       	lpm	r22, Z
    76ea:	ce 01       	movw	r24, r28
    76ec:	0e 94 ba 3a 	call	0x7574	; 0x7574 <WriteEeprom>
    76f0:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    76f2:	c0 32       	cpi	r28, 0x20	; 32
    76f4:	d1 05       	cpc	r29, r1
    76f6:	a9 f7       	brne	.-22     	; 0x76e2 <FormatEeprom+0x8>
    76f8:	c0 e2       	ldi	r28, 0x20	; 32
    76fa:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    76fc:	6f ef       	ldi	r22, 0xFF	; 255
    76fe:	ce 01       	movw	r24, r28
    7700:	0e 94 ba 3a 	call	0x7574	; 0x7574 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7704:	6f ef       	ldi	r22, 0xFF	; 255
    7706:	ce 01       	movw	r24, r28
    7708:	01 96       	adiw	r24, 0x01	; 1
    770a:	0e 94 ba 3a 	call	0x7574	; 0x7574 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    770e:	a0 96       	adiw	r28, 0x20	; 32
    7710:	c1 15       	cp	r28, r1
    7712:	88 e0       	ldi	r24, 0x08	; 8
    7714:	d8 07       	cpc	r29, r24
    7716:	91 f7       	brne	.-28     	; 0x76fc <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7718:	df 91       	pop	r29
    771a:	cf 91       	pop	r28
    771c:	08 95       	ret

0000771e <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    771e:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7720:	80 e0       	ldi	r24, 0x00	; 0
    7722:	90 e0       	ldi	r25, 0x00	; 0
    7724:	0e 94 c4 3a 	call	0x7588	; 0x7588 <ReadEeprom>
    7728:	c8 2f       	mov	r28, r24
    772a:	81 e0       	ldi	r24, 0x01	; 1
    772c:	90 e0       	ldi	r25, 0x00	; 0
    772e:	0e 94 c4 3a 	call	0x7588	; 0x7588 <ReadEeprom>
    7732:	28 2f       	mov	r18, r24
    7734:	30 e0       	ldi	r19, 0x00	; 0
    7736:	32 2f       	mov	r19, r18
    7738:	22 27       	eor	r18, r18
    773a:	2c 0f       	add	r18, r28
    773c:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    773e:	81 e0       	ldi	r24, 0x01	; 1
    7740:	2a 35       	cpi	r18, 0x5A	; 90
    7742:	35 45       	sbci	r19, 0x55	; 85
    7744:	09 f0       	breq	.+2      	; 0x7748 <isEepromFormatted+0x2a>
    7746:	80 e0       	ldi	r24, 0x00	; 0
}
    7748:	cf 91       	pop	r28
    774a:	08 95       	ret

0000774c <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    774c:	8f 92       	push	r8
    774e:	9f 92       	push	r9
    7750:	af 92       	push	r10
    7752:	bf 92       	push	r11
    7754:	cf 92       	push	r12
    7756:	df 92       	push	r13
    7758:	ef 92       	push	r14
    775a:	ff 92       	push	r15
    775c:	0f 93       	push	r16
    775e:	1f 93       	push	r17
    7760:	cf 93       	push	r28
    7762:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    7764:	fb 01       	movw	r30, r22
    7766:	11 82       	std	Z+1, r1	; 0x01
    7768:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    776a:	8f 3f       	cpi	r24, 0xFF	; 255
    776c:	ff ef       	ldi	r31, 0xFF	; 255
    776e:	9f 07       	cpc	r25, r31
    7770:	89 f1       	breq	.+98     	; 0x77d4 <EepromBlockExists+0x88>
    7772:	6a 01       	movw	r12, r20
    7774:	8b 01       	movw	r16, r22
    7776:	7c 01       	movw	r14, r24
    7778:	a1 2c       	mov	r10, r1
    777a:	b1 2c       	mov	r11, r1
    777c:	c0 e0       	ldi	r28, 0x00	; 0
    777e:	d3 e0       	ldi	r29, 0x03	; 3
    7780:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7782:	c5 01       	movw	r24, r10
    7784:	0e 94 c4 3a 	call	0x7588	; 0x7588 <ReadEeprom>
    7788:	88 2e       	mov	r8, r24
    778a:	c5 01       	movw	r24, r10
    778c:	01 96       	adiw	r24, 0x01	; 1
    778e:	0e 94 c4 3a 	call	0x7588	; 0x7588 <ReadEeprom>
    7792:	28 2f       	mov	r18, r24
    7794:	30 e0       	ldi	r19, 0x00	; 0
    7796:	32 2f       	mov	r19, r18
    7798:	22 27       	eor	r18, r18
    779a:	28 0d       	add	r18, r8
    779c:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    779e:	2e 15       	cp	r18, r14
    77a0:	3f 05       	cpc	r19, r15
    77a2:	29 f4       	brne	.+10     	; 0x77ae <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    77a4:	f8 01       	movw	r30, r16
    77a6:	b1 82       	std	Z+1, r11	; 0x01
    77a8:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    77aa:	d0 e0       	ldi	r29, 0x00	; 0
    77ac:	0b c0       	rjmp	.+22     	; 0x77c4 <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    77ae:	2f 3f       	cpi	r18, 0xFF	; 255
    77b0:	3f 4f       	sbci	r19, 0xFF	; 255
    77b2:	41 f4       	brne	.+16     	; 0x77c4 <EepromBlockExists+0x78>
    77b4:	91 10       	cpse	r9, r1
    77b6:	06 c0       	rjmp	.+12     	; 0x77c4 <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    77b8:	c1 14       	cp	r12, r1
    77ba:	d1 04       	cpc	r13, r1
    77bc:	11 f0       	breq	.+4      	; 0x77c2 <EepromBlockExists+0x76>
    77be:	f6 01       	movw	r30, r12
    77c0:	c0 83       	st	Z, r28
    77c2:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    77c4:	cf 5f       	subi	r28, 0xFF	; 255
    77c6:	f0 e2       	ldi	r31, 0x20	; 32
    77c8:	af 0e       	add	r10, r31
    77ca:	b1 1c       	adc	r11, r1
    77cc:	c0 34       	cpi	r28, 0x40	; 64
    77ce:	c9 f6       	brne	.-78     	; 0x7782 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    77d0:	8d 2f       	mov	r24, r29
    77d2:	01 c0       	rjmp	.+2      	; 0x77d6 <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    77d4:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    77d6:	df 91       	pop	r29
    77d8:	cf 91       	pop	r28
    77da:	1f 91       	pop	r17
    77dc:	0f 91       	pop	r16
    77de:	ff 90       	pop	r15
    77e0:	ef 90       	pop	r14
    77e2:	df 90       	pop	r13
    77e4:	cf 90       	pop	r12
    77e6:	bf 90       	pop	r11
    77e8:	af 90       	pop	r10
    77ea:	9f 90       	pop	r9
    77ec:	8f 90       	pop	r8
    77ee:	08 95       	ret

000077f0 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    77f0:	ef 92       	push	r14
    77f2:	ff 92       	push	r15
    77f4:	0f 93       	push	r16
    77f6:	1f 93       	push	r17
    77f8:	cf 93       	push	r28
    77fa:	df 93       	push	r29
    77fc:	00 d0       	rcall	.+0      	; 0x77fe <EepromWriteBlock+0xe>
    77fe:	1f 92       	push	r1
    7800:	cd b7       	in	r28, 0x3d	; 61
    7802:	de b7       	in	r29, 0x3e	; 62
    7804:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    7806:	1a 82       	std	Y+2, r1	; 0x02
    7808:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    780a:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    780c:	ae 01       	movw	r20, r28
    780e:	4d 5f       	subi	r20, 0xFD	; 253
    7810:	5f 4f       	sbci	r21, 0xFF	; 255
    7812:	be 01       	movw	r22, r28
    7814:	6f 5f       	subi	r22, 0xFF	; 255
    7816:	7f 4f       	sbci	r23, 0xFF	; 255
    7818:	fc 01       	movw	r30, r24
    781a:	80 81       	ld	r24, Z
    781c:	91 81       	ldd	r25, Z+1	; 0x01
    781e:	0e 94 a6 3b 	call	0x774c	; 0x774c <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    7822:	88 23       	and	r24, r24
    7824:	11 f0       	breq	.+4      	; 0x782a <EepromWriteBlock+0x3a>
    7826:	83 30       	cpi	r24, 0x03	; 3
    7828:	19 f5       	brne	.+70     	; 0x7870 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    782a:	89 81       	ldd	r24, Y+1	; 0x01
    782c:	9a 81       	ldd	r25, Y+2	; 0x02
    782e:	89 2b       	or	r24, r25
    7830:	49 f4       	brne	.+18     	; 0x7844 <EepromWriteBlock+0x54>
    7832:	8b 81       	ldd	r24, Y+3	; 0x03
    7834:	88 23       	and	r24, r24
    7836:	d9 f0       	breq	.+54     	; 0x786e <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7838:	f0 e2       	ldi	r31, 0x20	; 32
    783a:	8f 9f       	mul	r24, r31
    783c:	c0 01       	movw	r24, r0
    783e:	11 24       	eor	r1, r1
    7840:	9a 83       	std	Y+2, r25	; 0x02
    7842:	89 83       	std	Y+1, r24	; 0x01
    7844:	78 01       	movw	r14, r16
    7846:	20 e2       	ldi	r18, 0x20	; 32
    7848:	e2 0e       	add	r14, r18
    784a:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    784c:	f8 01       	movw	r30, r16
    784e:	61 91       	ld	r22, Z+
    7850:	8f 01       	movw	r16, r30
    7852:	89 81       	ldd	r24, Y+1	; 0x01
    7854:	9a 81       	ldd	r25, Y+2	; 0x02
    7856:	9c 01       	movw	r18, r24
    7858:	2f 5f       	subi	r18, 0xFF	; 255
    785a:	3f 4f       	sbci	r19, 0xFF	; 255
    785c:	3a 83       	std	Y+2, r19	; 0x02
    785e:	29 83       	std	Y+1, r18	; 0x01
    7860:	0e 94 ba 3a 	call	0x7574	; 0x7574 <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    7864:	0e 15       	cp	r16, r14
    7866:	1f 05       	cpc	r17, r15
    7868:	89 f7       	brne	.-30     	; 0x784c <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    786a:	80 e0       	ldi	r24, 0x00	; 0
    786c:	01 c0       	rjmp	.+2      	; 0x7870 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    786e:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    7870:	0f 90       	pop	r0
    7872:	0f 90       	pop	r0
    7874:	0f 90       	pop	r0
    7876:	df 91       	pop	r29
    7878:	cf 91       	pop	r28
    787a:	1f 91       	pop	r17
    787c:	0f 91       	pop	r16
    787e:	ff 90       	pop	r15
    7880:	ef 90       	pop	r14
    7882:	08 95       	ret

00007884 <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    7884:	cf 92       	push	r12
    7886:	df 92       	push	r13
    7888:	ff 92       	push	r15
    788a:	0f 93       	push	r16
    788c:	1f 93       	push	r17
    788e:	cf 93       	push	r28
    7890:	df 93       	push	r29
    7892:	00 d0       	rcall	.+0      	; 0x7894 <EepromReadBlock+0x10>
    7894:	cd b7       	in	r28, 0x3d	; 61
    7896:	de b7       	in	r29, 0x3e	; 62
    7898:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    789a:	40 e0       	ldi	r20, 0x00	; 0
    789c:	50 e0       	ldi	r21, 0x00	; 0
    789e:	be 01       	movw	r22, r28
    78a0:	6f 5f       	subi	r22, 0xFF	; 255
    78a2:	7f 4f       	sbci	r23, 0xFF	; 255
    78a4:	0e 94 a6 3b 	call	0x774c	; 0x774c <EepromBlockExists>
    78a8:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    78aa:	81 11       	cpse	r24, r1
    78ac:	13 c0       	rjmp	.+38     	; 0x78d4 <EepromReadBlock+0x50>
    78ae:	68 01       	movw	r12, r16
    78b0:	80 e2       	ldi	r24, 0x20	; 32
    78b2:	c8 0e       	add	r12, r24
    78b4:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    78b6:	89 81       	ldd	r24, Y+1	; 0x01
    78b8:	9a 81       	ldd	r25, Y+2	; 0x02
    78ba:	9c 01       	movw	r18, r24
    78bc:	2f 5f       	subi	r18, 0xFF	; 255
    78be:	3f 4f       	sbci	r19, 0xFF	; 255
    78c0:	3a 83       	std	Y+2, r19	; 0x02
    78c2:	29 83       	std	Y+1, r18	; 0x01
    78c4:	0e 94 c4 3a 	call	0x7588	; 0x7588 <ReadEeprom>
    78c8:	f8 01       	movw	r30, r16
    78ca:	81 93       	st	Z+, r24
    78cc:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    78ce:	ec 15       	cp	r30, r12
    78d0:	fd 05       	cpc	r31, r13
    78d2:	89 f7       	brne	.-30     	; 0x78b6 <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    78d4:	8f 2d       	mov	r24, r15
    78d6:	0f 90       	pop	r0
    78d8:	0f 90       	pop	r0
    78da:	df 91       	pop	r29
    78dc:	cf 91       	pop	r28
    78de:	1f 91       	pop	r17
    78e0:	0f 91       	pop	r16
    78e2:	ff 90       	pop	r15
    78e4:	df 90       	pop	r13
    78e6:	cf 90       	pop	r12
    78e8:	08 95       	ret

000078ea <UartUnreadCount>:
		uart_rx_tail&=(UART_RX_BUFFER_SIZE-1);		//wrap pointer to buffer size
	}

	//obsolete
	u8 UartUnreadCount(){
		return uart_rx_head-uart_rx_tail;
    78ea:	80 91 c1 0a 	lds	r24, 0x0AC1
    78ee:	90 91 c3 0a 	lds	r25, 0x0AC3
	}
    78f2:	89 1b       	sub	r24, r25
    78f4:	08 95       	ret

000078f6 <UartReadChar>:
		return (uart_rx_tail==uart_rx_head);
	}

	s16 UartReadChar(){

		if(uart_rx_head != uart_rx_tail){
    78f6:	90 91 c1 0a 	lds	r25, 0x0AC1
    78fa:	80 91 c3 0a 	lds	r24, 0x0AC3
    78fe:	98 17       	cp	r25, r24
    7900:	71 f0       	breq	.+28     	; 0x791e <UartReadChar+0x28>

			u8 data=uart_rx_buf[uart_rx_tail];
    7902:	e0 91 c3 0a 	lds	r30, 0x0AC3
    7906:	f0 e0       	ldi	r31, 0x00	; 0
    7908:	ec 53       	subi	r30, 0x3C	; 60
    790a:	f5 4f       	sbci	r31, 0xF5	; 245
    790c:	80 81       	ld	r24, Z
			uart_rx_tail=((uart_rx_tail+1) & (UART_RX_BUFFER_SIZE-1));	//wrap pointer to buffer size			
    790e:	90 91 c3 0a 	lds	r25, 0x0AC3
    7912:	9f 5f       	subi	r25, 0xFF	; 255
    7914:	9f 73       	andi	r25, 0x3F	; 63
    7916:	90 93 c3 0a 	sts	0x0AC3, r25
			return (data&0xff);
    791a:	90 e0       	ldi	r25, 0x00	; 0
    791c:	08 95       	ret

		}else{
			return -1;	//no data in buffer
    791e:	8f ef       	ldi	r24, 0xFF	; 255
    7920:	9f ef       	ldi	r25, 0xFF	; 255
		}
	}
    7922:	08 95       	ret

00007924 <InitUartRxBuffer>:

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    7924:	10 92 c3 0a 	sts	0x0AC3, r1
		uart_rx_head=0;
    7928:	10 92 c1 0a 	sts	0x0AC1, r1
    792c:	08 95       	ret

0000792e <UartSendChar>:
		return (next_head == uart_tx_tail);
	}

	s8 UartSendChar(u8 data){

 		u8 next_head = ((uart_tx_head + 1) & (UART_TX_BUFFER_SIZE-1));
    792e:	90 91 c2 0a 	lds	r25, 0x0AC2
    7932:	9f 5f       	subi	r25, 0xFF	; 255
    7934:	9f 71       	andi	r25, 0x1F	; 31

		if (next_head != uart_tx_tail) {
    7936:	20 91 04 0b 	lds	r18, 0x0B04
    793a:	92 17       	cp	r25, r18
    793c:	51 f0       	breq	.+20     	; 0x7952 <UartSendChar+0x24>
			uart_tx_buf[uart_tx_head]=data;
    793e:	e0 91 c2 0a 	lds	r30, 0x0AC2
    7942:	f0 e0       	ldi	r31, 0x00	; 0
    7944:	e0 56       	subi	r30, 0x60	; 96
    7946:	f5 4f       	sbci	r31, 0xF5	; 245
    7948:	80 83       	st	Z, r24
			uart_tx_head=next_head;		
    794a:	90 93 c2 0a 	sts	0x0AC2, r25
			return 0;
    794e:	80 e0       	ldi	r24, 0x00	; 0
    7950:	08 95       	ret
		}else{
			return -1; //buffer full
    7952:	8f ef       	ldi	r24, 0xFF	; 255
		}
	}
    7954:	08 95       	ret

00007956 <InitUartTxBuffer>:

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    7956:	10 92 04 0b 	sts	0x0B04, r1
		uart_tx_head=0;
    795a:	10 92 c2 0a 	sts	0x0AC2, r1
    795e:	08 95       	ret

00007960 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    7960:	00 97       	sbiw	r24, 0x00	; 0
    7962:	21 f0       	breq	.+8      	; 0x796c <GetPrngNumber+0xc>
    7964:	90 93 81 0a 	sts	0x0A81, r25
    7968:	80 93 80 0a 	sts	0x0A80, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    796c:	20 91 80 0a 	lds	r18, 0x0A80
    7970:	30 91 81 0a 	lds	r19, 0x0A81
    7974:	a9 01       	movw	r20, r18
    7976:	56 95       	lsr	r21
    7978:	47 95       	ror	r20
    797a:	56 95       	lsr	r21
    797c:	47 95       	ror	r20
    797e:	c9 01       	movw	r24, r18
    7980:	63 e0       	ldi	r22, 0x03	; 3
    7982:	96 95       	lsr	r25
    7984:	87 95       	ror	r24
    7986:	6a 95       	dec	r22
    7988:	e1 f7       	brne	.-8      	; 0x7982 <GetPrngNumber+0x22>
    798a:	84 27       	eor	r24, r20
    798c:	95 27       	eor	r25, r21
    798e:	82 27       	eor	r24, r18
    7990:	93 27       	eor	r25, r19
    7992:	a9 01       	movw	r20, r18
    7994:	75 e0       	ldi	r23, 0x05	; 5
    7996:	56 95       	lsr	r21
    7998:	47 95       	ror	r20
    799a:	7a 95       	dec	r23
    799c:	e1 f7       	brne	.-8      	; 0x7996 <GetPrngNumber+0x36>
    799e:	84 27       	eor	r24, r20
    79a0:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    79a2:	99 27       	eor	r25, r25
    79a4:	86 95       	lsr	r24
    79a6:	97 95       	ror	r25
    79a8:	88 27       	eor	r24, r24
    79aa:	36 95       	lsr	r19
    79ac:	27 95       	ror	r18
    79ae:	82 2b       	or	r24, r18
    79b0:	93 2b       	or	r25, r19
    79b2:	90 93 81 0a 	sts	0x0A81, r25
    79b6:	80 93 80 0a 	sts	0x0A80, r24
	return prng_state;   
}
    79ba:	08 95       	ret

000079bc <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    79bc:	fc 01       	movw	r30, r24
    79be:	67 87       	std	Z+15, r22	; 0x0f
    79c0:	08 95       	ret

000079c2 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    79c2:	e4 e8       	ldi	r30, 0x84	; 132
    79c4:	fa e0       	ldi	r31, 0x0A	; 10
    79c6:	81 e0       	ldi	r24, 0x01	; 1
    79c8:	91 e0       	ldi	r25, 0x01	; 1
    79ca:	95 8b       	std	Z+21, r25	; 0x15
    79cc:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    79ce:	63 8b       	std	Z+19, r22	; 0x13
    79d0:	08 95       	ret

000079d2 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    79d2:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    79d4:	90 81       	ld	r25, Z
    79d6:	9f 75       	andi	r25, 0x5F	; 95
    79d8:	90 83       	st	Z, r25
    79da:	08 95       	ret

000079dc <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    79dc:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    79de:	90 81       	ld	r25, Z
    79e0:	90 64       	ori	r25, 0x40	; 64
    79e2:	90 83       	st	Z, r25
    79e4:	08 95       	ret

000079e6 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    79e6:	fc 01       	movw	r30, r24
    79e8:	66 87       	std	Z+14, r22	; 0x0e
    79ea:	08 95       	ret

000079ec <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    79ec:	fc 01       	movw	r30, r24
    79ee:	62 87       	std	Z+10, r22	; 0x0a
    79f0:	08 95       	ret

000079f2 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    79f2:	fc 01       	movw	r30, r24
    79f4:	63 87       	std	Z+11, r22	; 0x0b
    79f6:	08 95       	ret

000079f8 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    79f8:	cf 93       	push	r28
    79fa:	df 93       	push	r29
    79fc:	ec 01       	movw	r28, r24
    79fe:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7a00:	29 81       	ldd	r18, Y+1	; 0x01
    7a02:	30 e0       	ldi	r19, 0x00	; 0
    7a04:	f9 01       	movw	r30, r18
    7a06:	ee 0f       	add	r30, r30
    7a08:	ff 1f       	adc	r31, r31
    7a0a:	e8 5f       	subi	r30, 0xF8	; 248
    7a0c:	fc 47       	sbci	r31, 0x7C	; 124
    7a0e:	65 91       	lpm	r22, Z+
    7a10:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7a12:	f9 01       	movw	r30, r18
    7a14:	e4 0f       	add	r30, r20
    7a16:	f1 1d       	adc	r31, r1
    7a18:	47 fd       	sbrc	r20, 7
    7a1a:	fa 95       	dec	r31
    7a1c:	ee 0f       	add	r30, r30
    7a1e:	ff 1f       	adc	r31, r31
    7a20:	e8 5f       	subi	r30, 0xF8	; 248
    7a22:	fc 47       	sbci	r31, 0x7C	; 124
    7a24:	85 91       	lpm	r24, Z+
    7a26:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    7a28:	86 1b       	sub	r24, r22
    7a2a:	97 0b       	sbc	r25, r23
    7a2c:	68 85       	ldd	r22, Y+8	; 0x08
    7a2e:	70 e0       	ldi	r23, 0x00	; 0
    7a30:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
	if(delta==0)delta++;
    7a34:	61 15       	cp	r22, r1
    7a36:	71 05       	cpc	r23, r1
    7a38:	11 f4       	brne	.+4      	; 0x7a3e <PatchCommand11+0x46>
    7a3a:	61 e0       	ldi	r22, 0x01	; 1
    7a3c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    7a3e:	ea 81       	ldd	r30, Y+2	; 0x02
    7a40:	86 e0       	ldi	r24, 0x06	; 6
    7a42:	e8 9f       	mul	r30, r24
    7a44:	f0 01       	movw	r30, r0
    7a46:	11 24       	eor	r1, r1
    7a48:	ec 57       	subi	r30, 0x7C	; 124
    7a4a:	f5 4f       	sbci	r31, 0xF5	; 245
    7a4c:	81 81       	ldd	r24, Z+1	; 0x01
    7a4e:	92 81       	ldd	r25, Z+2	; 0x02
    7a50:	86 0f       	add	r24, r22
    7a52:	97 1f       	adc	r25, r23
    7a54:	92 83       	std	Z+2, r25	; 0x02
    7a56:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7a58:	7e 83       	std	Y+6, r23	; 0x06
    7a5a:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    7a5c:	88 81       	ld	r24, Y
    7a5e:	88 60       	ori	r24, 0x08	; 8
    7a60:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7a62:	89 81       	ldd	r24, Y+1	; 0x01
    7a64:	48 0f       	add	r20, r24
    7a66:	4f 83       	std	Y+7, r20	; 0x07
}
    7a68:	df 91       	pop	r29
    7a6a:	cf 91       	pop	r28
    7a6c:	08 95       	ret

00007a6e <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    7a6e:	fc 01       	movw	r30, r24
    7a70:	60 87       	std	Z+8, r22	; 0x08
    7a72:	08 95       	ret

00007a74 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    7a74:	fc 01       	movw	r30, r24
    7a76:	64 83       	std	Z+4, r22	; 0x04
    7a78:	08 95       	ret

00007a7a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    7a7a:	fc 01       	movw	r30, r24
    7a7c:	82 81       	ldd	r24, Z+2	; 0x02
    7a7e:	0c 94 f2 40 	jmp	0x81e4	; 0x81e4 <SetMixerWave>

00007a82 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    7a82:	fc 01       	movw	r30, r24
	track->note+=param;
    7a84:	91 81       	ldd	r25, Z+1	; 0x01
    7a86:	69 0f       	add	r22, r25
    7a88:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    7a8a:	82 81       	ldd	r24, Z+2	; 0x02
    7a8c:	0c 94 db 40 	jmp	0x81b6	; 0x81b6 <SetMixerNote>

00007a90 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    7a90:	fc 01       	movw	r30, r24
	track->note-=param;
    7a92:	91 81       	ldd	r25, Z+1	; 0x01
    7a94:	96 1b       	sub	r25, r22
    7a96:	69 2f       	mov	r22, r25
    7a98:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    7a9a:	82 81       	ldd	r24, Z+2	; 0x02
    7a9c:	0c 94 db 40 	jmp	0x81b6	; 0x81b6 <SetMixerNote>

00007aa0 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    7aa0:	1f 93       	push	r17
    7aa2:	cf 93       	push	r28
    7aa4:	df 93       	push	r29
    7aa6:	ec 01       	movw	r28, r24
    7aa8:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    7aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    7aac:	0e 94 db 40 	call	0x81b6	; 0x81b6 <SetMixerNote>
	track->note=param;
    7ab0:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7ab2:	88 81       	ld	r24, Y
    7ab4:	87 7f       	andi	r24, 0xF7	; 247
    7ab6:	88 83       	st	Y, r24
}
    7ab8:	df 91       	pop	r29
    7aba:	cf 91       	pop	r28
    7abc:	1f 91       	pop	r17
    7abe:	08 95       	ret

00007ac0 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    7ac0:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    7ac2:	14 96       	adiw	r26, 0x04	; 4
    7ac4:	8c 91       	ld	r24, X
    7ac6:	14 97       	sbiw	r26, 0x04	; 4
    7ac8:	88 23       	and	r24, r24
    7aca:	19 f1       	breq	.+70     	; 0x7b12 <PatchCommand14+0x52>
    7acc:	55 96       	adiw	r26, 0x15	; 21
    7ace:	2d 91       	ld	r18, X+
    7ad0:	3c 91       	ld	r19, X
    7ad2:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    7ad4:	66 23       	and	r22, r22
    7ad6:	79 f0       	breq	.+30     	; 0x7af6 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    7ad8:	77 27       	eor	r23, r23
    7ada:	67 fd       	sbrc	r22, 7
    7adc:	70 95       	com	r23
    7ade:	6f 5f       	subi	r22, 0xFF	; 255
    7ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    7ae2:	ab 01       	movw	r20, r22
    7ae4:	44 0f       	add	r20, r20
    7ae6:	55 1f       	adc	r21, r21
    7ae8:	64 0f       	add	r22, r20
    7aea:	75 1f       	adc	r23, r21
    7aec:	26 1b       	sub	r18, r22
    7aee:	37 0b       	sbc	r19, r23
    7af0:	09 c0       	rjmp	.+18     	; 0x7b04 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7af2:	ef 3f       	cpi	r30, 0xFF	; 255
    7af4:	39 f0       	breq	.+14     	; 0x7b04 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    7af6:	23 50       	subi	r18, 0x03	; 3
    7af8:	31 09       	sbc	r19, r1
    7afa:	f9 01       	movw	r30, r18
    7afc:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    7afe:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    7b00:	ed 30       	cpi	r30, 0x0D	; 13
    7b02:	b9 f7       	brne	.-18     	; 0x7af2 <PatchCommand14+0x32>
    7b04:	56 96       	adiw	r26, 0x16	; 22
    7b06:	3c 93       	st	X, r19
    7b08:	2e 93       	st	-X, r18
    7b0a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    7b0c:	81 50       	subi	r24, 0x01	; 1
    7b0e:	14 96       	adiw	r26, 0x04	; 4
    7b10:	8c 93       	st	X, r24
    7b12:	08 95       	ret

00007b14 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    7b14:	90 93 66 0b 	sts	0x0B66, r25
    7b18:	80 93 65 0b 	sts	0x0B65, r24

	masterVolume=DEFAULT_MASTER_VOL;
    7b1c:	8f e6       	ldi	r24, 0x6F	; 111
    7b1e:	80 93 68 0b 	sts	0x0B68, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    7b22:	10 92 82 0a 	sts	0x0A82, r1
    7b26:	e7 e1       	ldi	r30, 0x17	; 23
    7b28:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7b2a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7b2c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7b2e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    7b30:	28 e1       	ldi	r18, 0x18	; 24
    7b32:	df 01       	movw	r26, r30
    7b34:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    7b36:	8c 93       	st	X, r24
    7b38:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    7b3a:	9c 93       	st	X, r25
    7b3c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    7b3e:	1c 92       	st	X, r1
    7b40:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    7b42:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    7b44:	10 82       	st	Z, r1
    7b46:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    7b48:	2c 93       	st	X, r18
    7b4a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    7b4c:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    7b4e:	8f 5f       	subi	r24, 0xFF	; 255
    7b50:	77 96       	adiw	r30, 0x17	; 23
    7b52:	84 30       	cpi	r24, 0x04	; 4
    7b54:	71 f7       	brne	.-36     	; 0x7b32 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7b56:	08 95       	ret

00007b58 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7b58:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7b5a:	ed 91       	ld	r30, X+
    7b5c:	fc 91       	ld	r31, X
    7b5e:	11 97       	sbiw	r26, 0x01	; 1
    7b60:	9f 01       	movw	r18, r30
    7b62:	2f 5f       	subi	r18, 0xFF	; 255
    7b64:	3f 4f       	sbci	r19, 0xFF	; 255
    7b66:	11 96       	adiw	r26, 0x01	; 1
    7b68:	3c 93       	st	X, r19
    7b6a:	2e 93       	st	-X, r18
    7b6c:	e4 91       	lpm	r30, Z
    7b6e:	e7 fd       	sbrc	r30, 7
    7b70:	03 c0       	rjmp	.+6      	; 0x7b78 <ReadVarLen+0x20>
    7b72:	8e 2f       	mov	r24, r30
    7b74:	90 e0       	ldi	r25, 0x00	; 0
    7b76:	08 95       	ret
    {
       value &= 0x7F;
    7b78:	ef 77       	andi	r30, 0x7F	; 127
    7b7a:	8e 2f       	mov	r24, r30
    7b7c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    7b7e:	96 95       	lsr	r25
    7b80:	98 2f       	mov	r25, r24
    7b82:	88 27       	eor	r24, r24
    7b84:	97 95       	ror	r25
    7b86:	87 95       	ror	r24
    7b88:	2f 5f       	subi	r18, 0xFF	; 255
    7b8a:	3f 4f       	sbci	r19, 0xFF	; 255
    7b8c:	f9 01       	movw	r30, r18
    7b8e:	31 97       	sbiw	r30, 0x01	; 1
    7b90:	e4 91       	lpm	r30, Z
    7b92:	4e 2f       	mov	r20, r30
    7b94:	4f 77       	andi	r20, 0x7F	; 127
    7b96:	84 0f       	add	r24, r20
    7b98:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7b9a:	e7 fd       	sbrc	r30, 7
    7b9c:	f0 cf       	rjmp	.-32     	; 0x7b7e <ReadVarLen+0x26>
    7b9e:	2d 93       	st	X+, r18
    7ba0:	3c 93       	st	X, r19
    }


    return value;
}
    7ba2:	08 95       	ret

00007ba4 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    7ba4:	ef 92       	push	r14
    7ba6:	ff 92       	push	r15
    7ba8:	0f 93       	push	r16
    7baa:	1f 93       	push	r17
    7bac:	cf 93       	push	r28
    7bae:	df 93       	push	r29
    7bb0:	1f 92       	push	r1
    7bb2:	cd b7       	in	r28, 0x3d	; 61
    7bb4:	de b7       	in	r29, 0x3e	; 62
    7bb6:	7c 01       	movw	r14, r24
    7bb8:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7bba:	fc 01       	movw	r30, r24
    7bbc:	80 81       	ld	r24, Z
    7bbe:	08 2f       	mov	r16, r24
    7bc0:	00 1f       	adc	r16, r16
    7bc2:	00 27       	eor	r16, r16
    7bc4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    7bc6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    7bc8:	9f ef       	ldi	r25, 0xFF	; 255
    7bca:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    7bcc:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    7bce:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    7bd0:	87 7b       	andi	r24, 0xB7	; 183
    7bd2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7bd4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    7bd6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    7bd8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    7bda:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7bdc:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    7bde:	82 81       	ldd	r24, Z+2	; 0x02
    7be0:	83 30       	cpi	r24, 0x03	; 3
    7be2:	69 f4       	brne	.+26     	; 0x7bfe <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    7be4:	01 11       	cpse	r16, r1
    7be6:	01 c0       	rjmp	.+2      	; 0x7bea <TriggerCommon+0x46>
    7be8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    7bea:	81 e0       	ldi	r24, 0x01	; 1
    7bec:	91 e0       	ldi	r25, 0x01	; 1
    7bee:	90 93 99 0a 	sts	0x0A99, r25
    7bf2:	80 93 98 0a 	sts	0x0A98, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    7bf6:	81 e0       	ldi	r24, 0x01	; 1
    7bf8:	80 93 97 0a 	sts	0x0A97, r24
    7bfc:	0a c0       	rjmp	.+20     	; 0x7c12 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    7bfe:	60 e0       	ldi	r22, 0x00	; 0
    7c00:	29 83       	std	Y+1, r18	; 0x01
    7c02:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <SetMixerWave>
			SetMixerNote(track->channel,note);
    7c06:	29 81       	ldd	r18, Y+1	; 0x01
    7c08:	62 2f       	mov	r22, r18
    7c0a:	f7 01       	movw	r30, r14
    7c0c:	82 81       	ldd	r24, Z+2	; 0x02
    7c0e:	0e 94 db 40 	call	0x81b6	; 0x81b6 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7c12:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7c14:	00 23       	and	r16, r16
    7c16:	11 f0       	breq	.+4      	; 0x7c1c <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    7c18:	11 8b       	std	Z+17, r17	; 0x11
    7c1a:	01 c0       	rjmp	.+2      	; 0x7c1e <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    7c1c:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7c1e:	e0 91 65 0b 	lds	r30, 0x0B65
    7c22:	f0 91 66 0b 	lds	r31, 0x0B66
    7c26:	89 e0       	ldi	r24, 0x09	; 9
    7c28:	18 9f       	mul	r17, r24
    7c2a:	e0 0d       	add	r30, r0
    7c2c:	f1 1d       	adc	r31, r1
    7c2e:	11 24       	eor	r1, r1
    7c30:	33 96       	adiw	r30, 0x03	; 3
    7c32:	85 91       	lpm	r24, Z+
    7c34:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    7c36:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    7c38:	00 97       	sbiw	r24, 0x00	; 0
    7c3a:	19 f4       	brne	.+6      	; 0x7c42 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    7c3c:	16 8a       	std	Z+22, r1	; 0x16
    7c3e:	15 8a       	std	Z+21, r1	; 0x15
    7c40:	08 c0       	rjmp	.+16     	; 0x7c52 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    7c42:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7c44:	fc 01       	movw	r30, r24
    7c46:	24 91       	lpm	r18, Z
    7c48:	f7 01       	movw	r30, r14
    7c4a:	22 8b       	std	Z+18, r18	; 0x12
    7c4c:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7c4e:	96 8b       	std	Z+22, r25	; 0x16
    7c50:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    7c52:	0f 90       	pop	r0
    7c54:	df 91       	pop	r29
    7c56:	cf 91       	pop	r28
    7c58:	1f 91       	pop	r17
    7c5a:	0f 91       	pop	r16
    7c5c:	ff 90       	pop	r15
    7c5e:	ef 90       	pop	r14
    7c60:	08 95       	ret

00007c62 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    7c62:	cf 93       	push	r28
    7c64:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    7c66:	e0 91 65 0b 	lds	r30, 0x0B65
    7c6a:	f0 91 66 0b 	lds	r31, 0x0B66
    7c6e:	99 e0       	ldi	r25, 0x09	; 9
    7c70:	89 9f       	mul	r24, r25
    7c72:	e0 0d       	add	r30, r0
    7c74:	f1 1d       	adc	r31, r1
    7c76:	11 24       	eor	r1, r1
    7c78:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    7c7a:	e1 30       	cpi	r30, 0x01	; 1
    7c7c:	e9 f0       	breq	.+58     	; 0x7cb8 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    7c7e:	e2 30       	cpi	r30, 0x02	; 2
    7c80:	e9 f0       	breq	.+58     	; 0x7cbc <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    7c82:	20 91 1e 0b 	lds	r18, 0x0B1E
    7c86:	27 ff       	sbrs	r18, 7
    7c88:	1d c0       	rjmp	.+58     	; 0x7cc4 <TriggerFx+0x62>
    7c8a:	20 91 2f 0b 	lds	r18, 0x0B2F
    7c8e:	28 13       	cpse	r18, r24
    7c90:	02 c0       	rjmp	.+4      	; 0x7c96 <TriggerFx+0x34>
    7c92:	41 11       	cpse	r20, r1
    7c94:	17 c0       	rjmp	.+46     	; 0x7cc4 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    7c96:	20 91 35 0b 	lds	r18, 0x0B35
    7c9a:	27 ff       	sbrs	r18, 7
    7c9c:	11 c0       	rjmp	.+34     	; 0x7cc0 <TriggerFx+0x5e>
    7c9e:	20 91 46 0b 	lds	r18, 0x0B46
    7ca2:	28 13       	cpse	r18, r24
    7ca4:	02 c0       	rjmp	.+4      	; 0x7caa <TriggerFx+0x48>
    7ca6:	41 11       	cpse	r20, r1
    7ca8:	0b c0       	rjmp	.+22     	; 0x7cc0 <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    7caa:	20 91 32 0b 	lds	r18, 0x0B32
    7cae:	90 91 49 0b 	lds	r25, 0x0B49
    7cb2:	92 17       	cp	r25, r18
    7cb4:	28 f4       	brcc	.+10     	; 0x7cc0 <TriggerFx+0x5e>
    7cb6:	06 c0       	rjmp	.+12     	; 0x7cc4 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    7cb8:	c3 e0       	ldi	r28, 0x03	; 3
    7cba:	05 c0       	rjmp	.+10     	; 0x7cc6 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    7cbc:	c4 e0       	ldi	r28, 0x04	; 4
    7cbe:	03 c0       	rjmp	.+6      	; 0x7cc6 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    7cc0:	c2 e0       	ldi	r28, 0x02	; 2
    7cc2:	01 c0       	rjmp	.+2      	; 0x7cc6 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    7cc4:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    7cc6:	97 e1       	ldi	r25, 0x17	; 23
    7cc8:	c9 9f       	mul	r28, r25
    7cca:	e0 01       	movw	r28, r0
    7ccc:	11 24       	eor	r1, r1
    7cce:	c9 5f       	subi	r28, 0xF9	; 249
    7cd0:	d4 4f       	sbci	r29, 0xF4	; 244
    7cd2:	90 e8       	ldi	r25, 0x80	; 128
    7cd4:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    7cd6:	1e 8a       	std	Y+22, r1	; 0x16
    7cd8:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    7cda:	20 e5       	ldi	r18, 0x50	; 80
    7cdc:	46 2f       	mov	r20, r22
    7cde:	68 2f       	mov	r22, r24
    7ce0:	ce 01       	movw	r24, r28
    7ce2:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    7ce6:	88 81       	ld	r24, Y
    7ce8:	80 62       	ori	r24, 0x20	; 32
    7cea:	88 83       	st	Y, r24
}
    7cec:	df 91       	pop	r29
    7cee:	cf 91       	pop	r28
    7cf0:	08 95       	ret

00007cf2 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7cf2:	cf 93       	push	r28
    7cf4:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    7cf6:	a8 2f       	mov	r26, r24
    7cf8:	b0 e0       	ldi	r27, 0x00	; 0
    7cfa:	97 e1       	ldi	r25, 0x17	; 23
    7cfc:	89 9f       	mul	r24, r25
    7cfe:	f0 01       	movw	r30, r0
    7d00:	11 24       	eor	r1, r1
    7d02:	e9 5f       	subi	r30, 0xF9	; 249
    7d04:	f4 4f       	sbci	r31, 0xF4	; 244
    7d06:	80 81       	ld	r24, Z
    7d08:	85 ff       	sbrs	r24, 5
    7d0a:	02 c0       	rjmp	.+4      	; 0x7d10 <TriggerNote+0x1e>
    7d0c:	87 fd       	sbrc	r24, 7
    7d0e:	2e c0       	rjmp	.+92     	; 0x7d6c <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    7d10:	21 11       	cpse	r18, r1
    7d12:	18 c0       	rjmp	.+48     	; 0x7d44 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    7d14:	97 e1       	ldi	r25, 0x17	; 23
    7d16:	9a 9f       	mul	r25, r26
    7d18:	f0 01       	movw	r30, r0
    7d1a:	9b 9f       	mul	r25, r27
    7d1c:	f0 0d       	add	r31, r0
    7d1e:	11 24       	eor	r1, r1
    7d20:	e9 5f       	subi	r30, 0xF9	; 249
    7d22:	f4 4f       	sbci	r31, 0xF4	; 244
    7d24:	97 85       	ldd	r25, Z+15	; 0x0f
    7d26:	91 11       	cpse	r25, r1
    7d28:	02 c0       	rjmp	.+4      	; 0x7d2e <TriggerNote+0x3c>
    7d2a:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    7d2c:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7d2e:	97 e1       	ldi	r25, 0x17	; 23
    7d30:	9a 9f       	mul	r25, r26
    7d32:	f0 01       	movw	r30, r0
    7d34:	9b 9f       	mul	r25, r27
    7d36:	f0 0d       	add	r31, r0
    7d38:	11 24       	eor	r1, r1
    7d3a:	e9 5f       	subi	r30, 0xF9	; 249
    7d3c:	f4 4f       	sbci	r31, 0xF4	; 244
    7d3e:	8f 7b       	andi	r24, 0xBF	; 191
    7d40:	80 83       	st	Z, r24
    7d42:	14 c0       	rjmp	.+40     	; 0x7d6c <TriggerNote+0x7a>
    7d44:	82 2f       	mov	r24, r18
    7d46:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7d48:	97 e1       	ldi	r25, 0x17	; 23
    7d4a:	9a 9f       	mul	r25, r26
    7d4c:	e0 01       	movw	r28, r0
    7d4e:	9b 9f       	mul	r25, r27
    7d50:	d0 0d       	add	r29, r0
    7d52:	11 24       	eor	r1, r1
    7d54:	c9 5f       	subi	r28, 0xF9	; 249
    7d56:	d4 4f       	sbci	r29, 0xF4	; 244
    7d58:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    7d5a:	1e 8a       	std	Y+22, r1	; 0x16
    7d5c:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    7d5e:	48 2f       	mov	r20, r24
    7d60:	ce 01       	movw	r24, r28
    7d62:	0e 94 d2 3d 	call	0x7ba4	; 0x7ba4 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    7d66:	88 81       	ld	r24, Y
    7d68:	80 62       	ori	r24, 0x20	; 32
    7d6a:	88 83       	st	Y, r24
		}

	}
}
    7d6c:	df 91       	pop	r29
    7d6e:	cf 91       	pop	r28
    7d70:	08 95       	ret

00007d72 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7d72:	6f 92       	push	r6
    7d74:	7f 92       	push	r7
    7d76:	8f 92       	push	r8
    7d78:	9f 92       	push	r9
    7d7a:	af 92       	push	r10
    7d7c:	bf 92       	push	r11
    7d7e:	cf 92       	push	r12
    7d80:	df 92       	push	r13
    7d82:	ef 92       	push	r14
    7d84:	ff 92       	push	r15
    7d86:	0f 93       	push	r16
    7d88:	1f 93       	push	r17
    7d8a:	cf 93       	push	r28
    7d8c:	df 93       	push	r29
    7d8e:	c7 e0       	ldi	r28, 0x07	; 7
    7d90:	db e0       	ldi	r29, 0x0B	; 11
    7d92:	04 e8       	ldi	r16, 0x84	; 132
    7d94:	1a e0       	ldi	r17, 0x0A	; 10
    7d96:	d8 01       	movw	r26, r16
    7d98:	9e 01       	movw	r18, r28
    7d9a:	40 e0       	ldi	r20, 0x00	; 0
    7d9c:	50 e0       	ldi	r21, 0x00	; 0
    7d9e:	ca 01       	movw	r24, r20
    7da0:	89 5f       	subi	r24, 0xF9	; 249
    7da2:	94 4f       	sbci	r25, 0xF4	; 244
    7da4:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7da6:	fc 01       	movw	r30, r24
    7da8:	87 85       	ldd	r24, Z+15	; 0x0f
    7daa:	88 23       	and	r24, r24
    7dac:	91 f0       	breq	.+36     	; 0x7dd2 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    7dae:	66 85       	ldd	r22, Z+14	; 0x0e
    7db0:	99 27       	eor	r25, r25
    7db2:	87 fd       	sbrc	r24, 7
    7db4:	90 95       	com	r25
    7db6:	86 0f       	add	r24, r22
    7db8:	91 1d       	adc	r25, r1
    7dba:	8f 3f       	cpi	r24, 0xFF	; 255
    7dbc:	91 05       	cpc	r25, r1
    7dbe:	19 f0       	breq	.+6      	; 0x7dc6 <ProcessMusic+0x54>
    7dc0:	14 f0       	brlt	.+4      	; 0x7dc6 <ProcessMusic+0x54>
    7dc2:	8f ef       	ldi	r24, 0xFF	; 255
    7dc4:	90 e0       	ldi	r25, 0x00	; 0
    7dc6:	97 ff       	sbrs	r25, 7
    7dc8:	02 c0       	rjmp	.+4      	; 0x7dce <ProcessMusic+0x5c>
    7dca:	80 e0       	ldi	r24, 0x00	; 0
    7dcc:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7dce:	f6 01       	movw	r30, r12
    7dd0:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    7dd2:	f9 01       	movw	r30, r18
    7dd4:	f0 80       	ld	r15, Z
    7dd6:	f3 fe       	sbrs	r15, 3
    7dd8:	2a c0       	rjmp	.+84     	; 0x7e2e <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7dda:	65 81       	ldd	r22, Z+5	; 0x05
    7ddc:	76 81       	ldd	r23, Z+6	; 0x06
    7dde:	11 96       	adiw	r26, 0x01	; 1
    7de0:	8d 91       	ld	r24, X+
    7de2:	9c 91       	ld	r25, X
    7de4:	12 97       	sbiw	r26, 0x02	; 2
    7de6:	86 0f       	add	r24, r22
    7de8:	97 1f       	adc	r25, r23
    7dea:	12 96       	adiw	r26, 0x02	; 2
    7dec:	9c 93       	st	X, r25
    7dee:	8e 93       	st	-X, r24
    7df0:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7df2:	f6 01       	movw	r30, r12
    7df4:	e7 80       	ldd	r14, Z+7	; 0x07
    7df6:	ee 2d       	mov	r30, r14
    7df8:	f0 e0       	ldi	r31, 0x00	; 0
    7dfa:	ee 0f       	add	r30, r30
    7dfc:	ff 1f       	adc	r31, r31
    7dfe:	e8 5f       	subi	r30, 0xF8	; 248
    7e00:	fc 47       	sbci	r31, 0x7C	; 124
    7e02:	c5 90       	lpm	r12, Z+
    7e04:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7e06:	16 16       	cp	r1, r22
    7e08:	17 06       	cpc	r1, r23
    7e0a:	24 f4       	brge	.+8      	; 0x7e14 <ProcessMusic+0xa2>
    7e0c:	8c 15       	cp	r24, r12
    7e0e:	9d 05       	cpc	r25, r13
    7e10:	30 f4       	brcc	.+12     	; 0x7e1e <ProcessMusic+0xac>
    7e12:	0d c0       	rjmp	.+26     	; 0x7e2e <ProcessMusic+0xbc>
    7e14:	67 2b       	or	r22, r23
    7e16:	59 f0       	breq	.+22     	; 0x7e2e <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7e18:	c8 16       	cp	r12, r24
    7e1a:	d9 06       	cpc	r13, r25
    7e1c:	40 f0       	brcs	.+16     	; 0x7e2e <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7e1e:	12 96       	adiw	r26, 0x02	; 2
    7e20:	dc 92       	st	X, r13
    7e22:	ce 92       	st	-X, r12
    7e24:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7e26:	8f 2d       	mov	r24, r15
    7e28:	87 7f       	andi	r24, 0xF7	; 247
    7e2a:	f9 01       	movw	r30, r18
    7e2c:	80 83       	st	Z, r24
    7e2e:	49 5e       	subi	r20, 0xE9	; 233
    7e30:	5f 4f       	sbci	r21, 0xFF	; 255
    7e32:	29 5e       	subi	r18, 0xE9	; 233
    7e34:	3f 4f       	sbci	r19, 0xFF	; 255
    7e36:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7e38:	4c 35       	cpi	r20, 0x5C	; 92
    7e3a:	51 05       	cpc	r21, r1
    7e3c:	09 f0       	breq	.+2      	; 0x7e40 <ProcessMusic+0xce>
    7e3e:	af cf       	rjmp	.-162    	; 0x7d9e <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    7e40:	80 91 82 0a 	lds	r24, 0x0A82
    7e44:	88 23       	and	r24, r24
    7e46:	09 f4       	brne	.+2      	; 0x7e4a <ProcessMusic+0xd8>
    7e48:	cc c0       	rjmp	.+408    	; 0x7fe2 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7e4a:	57 e1       	ldi	r21, 0x17	; 23
    7e4c:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7e4e:	80 91 63 0b 	lds	r24, 0x0B63
    7e52:	90 91 64 0b 	lds	r25, 0x0B64
    7e56:	20 91 69 0b 	lds	r18, 0x0B69
    7e5a:	30 91 6a 0b 	lds	r19, 0x0B6A
    7e5e:	82 17       	cp	r24, r18
    7e60:	93 07       	cpc	r25, r19
    7e62:	09 f0       	breq	.+2      	; 0x7e66 <ProcessMusic+0xf4>
    7e64:	b9 c0       	rjmp	.+370    	; 0x7fd8 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    7e66:	20 91 6c 0b 	lds	r18, 0x0B6C
    7e6a:	30 91 6d 0b 	lds	r19, 0x0B6D
    7e6e:	b9 01       	movw	r22, r18
    7e70:	6f 5f       	subi	r22, 0xFF	; 255
    7e72:	7f 4f       	sbci	r23, 0xFF	; 255
    7e74:	70 93 6d 0b 	sts	0x0B6D, r23
    7e78:	60 93 6c 0b 	sts	0x0B6C, r22
    7e7c:	f9 01       	movw	r30, r18
    7e7e:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7e80:	4f 3f       	cpi	r20, 0xFF	; 255
    7e82:	79 f5       	brne	.+94     	; 0x7ee2 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7e84:	a9 01       	movw	r20, r18
    7e86:	4e 5f       	subi	r20, 0xFE	; 254
    7e88:	5f 4f       	sbci	r21, 0xFF	; 255
    7e8a:	50 93 6d 0b 	sts	0x0B6D, r21
    7e8e:	40 93 6c 0b 	sts	0x0B6C, r20
    7e92:	fb 01       	movw	r30, r22
    7e94:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7e96:	6f 32       	cpi	r22, 0x2F	; 47
    7e98:	19 f4       	brne	.+6      	; 0x7ea0 <ProcessMusic+0x12e>
						playSong=false;
    7e9a:	10 92 82 0a 	sts	0x0A82, r1
						break;	
    7e9e:	9c c0       	rjmp	.+312    	; 0x7fd8 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    7ea0:	66 30       	cpi	r22, 0x06	; 6
    7ea2:	09 f0       	breq	.+2      	; 0x7ea6 <ProcessMusic+0x134>
    7ea4:	8c c0       	rjmp	.+280    	; 0x7fbe <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    7ea6:	fa 01       	movw	r30, r20
    7ea8:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7eaa:	c9 01       	movw	r24, r18
    7eac:	04 96       	adiw	r24, 0x04	; 4
    7eae:	90 93 6d 0b 	sts	0x0B6D, r25
    7eb2:	80 93 6c 0b 	sts	0x0B6C, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7eb6:	f9 01       	movw	r30, r18
    7eb8:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7eba:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7ebc:	e3 35       	cpi	r30, 0x53	; 83
    7ebe:	29 f4       	brne	.+10     	; 0x7eca <ProcessMusic+0x158>
							loopStart=songPos;
    7ec0:	90 93 6f 0b 	sts	0x0B6F, r25
    7ec4:	80 93 6e 0b 	sts	0x0B6E, r24
    7ec8:	7a c0       	rjmp	.+244    	; 0x7fbe <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    7eca:	e5 34       	cpi	r30, 0x45	; 69
    7ecc:	09 f0       	breq	.+2      	; 0x7ed0 <ProcessMusic+0x15e>
    7ece:	77 c0       	rjmp	.+238    	; 0x7fbe <ProcessMusic+0x24c>
							songPos=loopStart;
    7ed0:	80 91 6e 0b 	lds	r24, 0x0B6E
    7ed4:	90 91 6f 0b 	lds	r25, 0x0B6F
    7ed8:	90 93 6d 0b 	sts	0x0B6D, r25
    7edc:	80 93 6c 0b 	sts	0x0B6C, r24
    7ee0:	6e c0       	rjmp	.+220    	; 0x7fbe <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7ee2:	47 fd       	sbrc	r20, 7
    7ee4:	40 93 67 0b 	sts	0x0B67, r20
					channel=lastStatus&0x0f;
    7ee8:	90 91 67 0b 	lds	r25, 0x0B67
    7eec:	89 2f       	mov	r24, r25
    7eee:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7ef0:	47 ff       	sbrs	r20, 7
    7ef2:	08 c0       	rjmp	.+16     	; 0x7f04 <ProcessMusic+0x192>
    7ef4:	2e 5f       	subi	r18, 0xFE	; 254
    7ef6:	3f 4f       	sbci	r19, 0xFF	; 255
    7ef8:	30 93 6d 0b 	sts	0x0B6D, r19
    7efc:	20 93 6c 0b 	sts	0x0B6C, r18
    7f00:	fb 01       	movw	r30, r22
    7f02:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7f04:	90 7f       	andi	r25, 0xF0	; 240
    7f06:	90 3b       	cpi	r25, 0xB0	; 176
    7f08:	e1 f0       	breq	.+56     	; 0x7f42 <ProcessMusic+0x1d0>
    7f0a:	90 3c       	cpi	r25, 0xC0	; 192
    7f0c:	09 f4       	brne	.+2      	; 0x7f10 <ProcessMusic+0x19e>
    7f0e:	51 c0       	rjmp	.+162    	; 0x7fb2 <ProcessMusic+0x240>
    7f10:	90 39       	cpi	r25, 0x90	; 144
    7f12:	09 f0       	breq	.+2      	; 0x7f16 <ProcessMusic+0x1a4>
    7f14:	54 c0       	rjmp	.+168    	; 0x7fbe <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7f16:	e0 91 6c 0b 	lds	r30, 0x0B6C
    7f1a:	f0 91 6d 0b 	lds	r31, 0x0B6D
    7f1e:	9f 01       	movw	r18, r30
    7f20:	2f 5f       	subi	r18, 0xFF	; 255
    7f22:	3f 4f       	sbci	r19, 0xFF	; 255
    7f24:	30 93 6d 0b 	sts	0x0B6D, r19
    7f28:	20 93 6c 0b 	sts	0x0B6C, r18
    7f2c:	24 91       	lpm	r18, Z
    7f2e:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7f30:	f8 9e       	mul	r15, r24
    7f32:	f0 01       	movw	r30, r0
    7f34:	11 24       	eor	r1, r1
    7f36:	e9 5f       	subi	r30, 0xF9	; 249
    7f38:	f4 4f       	sbci	r31, 0xF4	; 244
    7f3a:	60 89       	ldd	r22, Z+16	; 0x10
    7f3c:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <TriggerNote>
    7f40:	3e c0       	rjmp	.+124    	; 0x7fbe <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7f42:	e0 91 6c 0b 	lds	r30, 0x0B6C
    7f46:	f0 91 6d 0b 	lds	r31, 0x0B6D
    7f4a:	9f 01       	movw	r18, r30
    7f4c:	2f 5f       	subi	r18, 0xFF	; 255
    7f4e:	3f 4f       	sbci	r19, 0xFF	; 255
    7f50:	30 93 6d 0b 	sts	0x0B6D, r19
    7f54:	20 93 6c 0b 	sts	0x0B6C, r18
    7f58:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7f5a:	47 30       	cpi	r20, 0x07	; 7
    7f5c:	49 f4       	brne	.+18     	; 0x7f70 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    7f5e:	f8 9e       	mul	r15, r24
    7f60:	d0 01       	movw	r26, r0
    7f62:	11 24       	eor	r1, r1
    7f64:	a9 5f       	subi	r26, 0xF9	; 249
    7f66:	b4 4f       	sbci	r27, 0xF4	; 244
    7f68:	ee 0f       	add	r30, r30
    7f6a:	1c 96       	adiw	r26, 0x0c	; 12
    7f6c:	ec 93       	st	X, r30
    7f6e:	27 c0       	rjmp	.+78     	; 0x7fbe <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    7f70:	4b 30       	cpi	r20, 0x0B	; 11
    7f72:	49 f4       	brne	.+18     	; 0x7f86 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    7f74:	f8 9e       	mul	r15, r24
    7f76:	d0 01       	movw	r26, r0
    7f78:	11 24       	eor	r1, r1
    7f7a:	a9 5f       	subi	r26, 0xF9	; 249
    7f7c:	b4 4f       	sbci	r27, 0xF4	; 244
    7f7e:	ee 0f       	add	r30, r30
    7f80:	13 96       	adiw	r26, 0x03	; 3
    7f82:	ec 93       	st	X, r30
    7f84:	1c c0       	rjmp	.+56     	; 0x7fbe <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    7f86:	4c 35       	cpi	r20, 0x5C	; 92
    7f88:	49 f4       	brne	.+18     	; 0x7f9c <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    7f8a:	f8 9e       	mul	r15, r24
    7f8c:	d0 01       	movw	r26, r0
    7f8e:	11 24       	eor	r1, r1
    7f90:	a9 5f       	subi	r26, 0xF9	; 249
    7f92:	b4 4f       	sbci	r27, 0xF4	; 244
    7f94:	ee 0f       	add	r30, r30
    7f96:	1a 96       	adiw	r26, 0x0a	; 10
    7f98:	ec 93       	st	X, r30
    7f9a:	11 c0       	rjmp	.+34     	; 0x7fbe <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7f9c:	44 36       	cpi	r20, 0x64	; 100
    7f9e:	79 f4       	brne	.+30     	; 0x7fbe <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    7fa0:	f8 9e       	mul	r15, r24
    7fa2:	d0 01       	movw	r26, r0
    7fa4:	11 24       	eor	r1, r1
    7fa6:	a9 5f       	subi	r26, 0xF9	; 249
    7fa8:	b4 4f       	sbci	r27, 0xF4	; 244
    7faa:	ee 0f       	add	r30, r30
    7fac:	1b 96       	adiw	r26, 0x0b	; 11
    7fae:	ec 93       	st	X, r30
    7fb0:	06 c0       	rjmp	.+12     	; 0x7fbe <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7fb2:	f8 9e       	mul	r15, r24
    7fb4:	f0 01       	movw	r30, r0
    7fb6:	11 24       	eor	r1, r1
    7fb8:	e9 5f       	subi	r30, 0xF9	; 249
    7fba:	f4 4f       	sbci	r31, 0xF4	; 244
    7fbc:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7fbe:	8c e6       	ldi	r24, 0x6C	; 108
    7fc0:	9b e0       	ldi	r25, 0x0B	; 11
    7fc2:	0e 94 ac 3d 	call	0x7b58	; 0x7b58 <ReadVarLen>
    7fc6:	90 93 6a 0b 	sts	0x0B6A, r25
    7fca:	80 93 69 0b 	sts	0x0B69, r24
				currDeltaTime=0;
    7fce:	10 92 64 0b 	sts	0x0B64, r1
    7fd2:	10 92 63 0b 	sts	0x0B63, r1
    7fd6:	3b cf       	rjmp	.-394    	; 0x7e4e <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7fd8:	01 96       	adiw	r24, 0x01	; 1
    7fda:	90 93 64 0b 	sts	0x0B64, r25
    7fde:	80 93 63 0b 	sts	0x0B63, r24
    7fe2:	90 e1       	ldi	r25, 0x10	; 16
    7fe4:	a9 2e       	mov	r10, r25
    7fe6:	9b e0       	ldi	r25, 0x0B	; 11
    7fe8:	b9 2e       	mov	r11, r25
    7fea:	2a e1       	ldi	r18, 0x1A	; 26
    7fec:	c2 2e       	mov	r12, r18
    7fee:	2b e0       	ldi	r18, 0x0B	; 11
    7ff0:	d2 2e       	mov	r13, r18
    7ff2:	3b e1       	ldi	r19, 0x1B	; 27
    7ff4:	e3 2e       	mov	r14, r19
    7ff6:	3b e0       	ldi	r19, 0x0B	; 11
    7ff8:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7ffa:	66 24       	eor	r6, r6
    7ffc:	6a 94       	dec	r6
    7ffe:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    8000:	88 81       	ld	r24, Y
    8002:	85 ff       	sbrs	r24, 5
    8004:	42 c0       	rjmp	.+132    	; 0x808a <ProcessMusic+0x318>
    8006:	2d 89       	ldd	r18, Y+21	; 0x15
    8008:	3e 89       	ldd	r19, Y+22	; 0x16
    800a:	23 2b       	or	r18, r19
    800c:	09 f4       	brne	.+2      	; 0x8010 <ProcessMusic+0x29e>
    800e:	3d c0       	rjmp	.+122    	; 0x808a <ProcessMusic+0x318>
    8010:	86 fd       	sbrc	r24, 6
    8012:	3b c0       	rjmp	.+118    	; 0x808a <ProcessMusic+0x318>
    8014:	47 01       	movw	r8, r14
    8016:	f2 e0       	ldi	r31, 0x02	; 2
    8018:	8f 1a       	sub	r8, r31
    801a:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    801c:	d6 01       	movw	r26, r12
    801e:	9c 91       	ld	r25, X
    8020:	f4 01       	movw	r30, r8
    8022:	80 81       	ld	r24, Z
    8024:	98 13       	cpse	r25, r24
    8026:	2e c0       	rjmp	.+92     	; 0x8084 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    8028:	ed 89       	ldd	r30, Y+21	; 0x15
    802a:	fe 89       	ldd	r31, Y+22	; 0x16
    802c:	bf 01       	movw	r22, r30
    802e:	6f 5f       	subi	r22, 0xFF	; 255
    8030:	7f 4f       	sbci	r23, 0xFF	; 255
    8032:	7e 8b       	std	Y+22, r23	; 0x16
    8034:	6d 8b       	std	Y+21, r22	; 0x15
    8036:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8038:	8f 3f       	cpi	r24, 0xFF	; 255
    803a:	31 f4       	brne	.+12     	; 0x8048 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    803c:	88 81       	ld	r24, Y
    803e:	8f 77       	andi	r24, 0x7F	; 127
    8040:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8042:	1e 8a       	std	Y+22, r1	; 0x16
    8044:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8046:	1e c0       	rjmp	.+60     	; 0x8084 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8048:	9f 01       	movw	r18, r30
    804a:	2e 5f       	subi	r18, 0xFE	; 254
    804c:	3f 4f       	sbci	r19, 0xFF	; 255
    804e:	3e 8b       	std	Y+22, r19	; 0x16
    8050:	2d 8b       	std	Y+21, r18	; 0x15
    8052:	fb 01       	movw	r30, r22
    8054:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8056:	e8 2f       	mov	r30, r24
    8058:	f0 e0       	ldi	r31, 0x00	; 0
    805a:	ee 0f       	add	r30, r30
    805c:	ff 1f       	adc	r31, r31
    805e:	e2 54       	subi	r30, 0x42	; 66
    8060:	ff 4f       	sbci	r31, 0xFF	; 255
    8062:	25 91       	lpm	r18, Z+
    8064:	34 91       	lpm	r19, Z
    8066:	ce 01       	movw	r24, r28
    8068:	f9 01       	movw	r30, r18
    806a:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    806c:	ed 89       	ldd	r30, Y+21	; 0x15
    806e:	fe 89       	ldd	r31, Y+22	; 0x16
    8070:	cf 01       	movw	r24, r30
    8072:	01 96       	adiw	r24, 0x01	; 1
    8074:	9e 8b       	std	Y+22, r25	; 0x16
    8076:	8d 8b       	std	Y+21, r24	; 0x15
    8078:	e4 91       	lpm	r30, Z
    807a:	d4 01       	movw	r26, r8
    807c:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    807e:	f6 01       	movw	r30, r12
    8080:	10 82       	st	Z, r1
    8082:	cc cf       	rjmp	.-104    	; 0x801c <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8084:	9f 5f       	subi	r25, 0xFF	; 255
    8086:	d6 01       	movw	r26, r12
    8088:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    808a:	98 81       	ld	r25, Y
    808c:	95 ff       	sbrs	r25, 5
    808e:	6c c0       	rjmp	.+216    	; 0x8168 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8090:	f7 01       	movw	r30, r14
    8092:	80 81       	ld	r24, Z
    8094:	8f 3f       	cpi	r24, 0xFF	; 255
    8096:	11 f0       	breq	.+4      	; 0x809c <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8098:	8f 5f       	subi	r24, 0xFF	; 255
    809a:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    809c:	97 fd       	sbrc	r25, 7
    809e:	04 c0       	rjmp	.+8      	; 0x80a8 <ProcessMusic+0x336>
    80a0:	f7 01       	movw	r30, r14
    80a2:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    80a4:	90 81       	ld	r25, Z
    80a6:	01 c0       	rjmp	.+2      	; 0x80aa <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    80a8:	9f ef       	ldi	r25, 0xFF	; 255
    80aa:	f7 01       	movw	r30, r14
    80ac:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    80ae:	80 81       	ld	r24, Z
    80b0:	88 23       	and	r24, r24
    80b2:	09 f4       	brne	.+2      	; 0x80b6 <ProcessMusic+0x344>
    80b4:	4e c0       	rjmp	.+156    	; 0x8152 <ProcessMusic+0x3e0>
    80b6:	31 96       	adiw	r30, 0x01	; 1
    80b8:	50 81       	ld	r21, Z
    80ba:	55 23       	and	r21, r21
    80bc:	09 f4       	brne	.+2      	; 0x80c0 <ProcessMusic+0x34e>
    80be:	49 c0       	rjmp	.+146    	; 0x8152 <ProcessMusic+0x3e0>
    80c0:	99 23       	and	r25, r25
    80c2:	09 f4       	brne	.+2      	; 0x80c6 <ProcessMusic+0x354>
    80c4:	46 c0       	rjmp	.+140    	; 0x8152 <ProcessMusic+0x3e0>
    80c6:	40 91 68 0b 	lds	r20, 0x0B68
    80ca:	44 23       	and	r20, r20
    80cc:	09 f4       	brne	.+2      	; 0x80d0 <ProcessMusic+0x35e>
    80ce:	41 c0       	rjmp	.+130    	; 0x8152 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    80d0:	89 9f       	mul	r24, r25
    80d2:	c0 01       	movw	r24, r0
    80d4:	11 24       	eor	r1, r1
    80d6:	93 95       	inc	r25
				uVol>>=8;
    80d8:	89 2f       	mov	r24, r25
    80da:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    80dc:	58 9f       	mul	r21, r24
    80de:	90 01       	movw	r18, r0
    80e0:	59 9f       	mul	r21, r25
    80e2:	30 0d       	add	r19, r0
    80e4:	11 24       	eor	r1, r1
    80e6:	c9 01       	movw	r24, r18
    80e8:	93 95       	inc	r25
				uVol>>=8;
    80ea:	89 2f       	mov	r24, r25
    80ec:	99 27       	eor	r25, r25
    80ee:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    80f0:	50 81       	ld	r21, Z
    80f2:	58 9f       	mul	r21, r24
    80f4:	90 01       	movw	r18, r0
    80f6:	59 9f       	mul	r21, r25
    80f8:	30 0d       	add	r19, r0
    80fa:	11 24       	eor	r1, r1
    80fc:	33 95       	inc	r19
					uVol>>=8;
    80fe:	23 2f       	mov	r18, r19
    8100:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8102:	42 9f       	mul	r20, r18
    8104:	c0 01       	movw	r24, r0
    8106:	43 9f       	mul	r20, r19
    8108:	90 0d       	add	r25, r0
    810a:	11 24       	eor	r1, r1
    810c:	93 95       	inc	r25
				uVol>>=8;
    810e:	89 2f       	mov	r24, r25
    8110:	99 27       	eor	r25, r25
    8112:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8114:	20 81       	ld	r18, Z
    8116:	22 23       	and	r18, r18
    8118:	f1 f0       	breq	.+60     	; 0x8156 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    811a:	d5 01       	movw	r26, r10
    811c:	ec 91       	ld	r30, X
    811e:	f0 e0       	ldi	r31, 0x00	; 0
    8120:	e0 50       	subi	r30, 0x00	; 0
    8122:	fb 47       	sbci	r31, 0x7B	; 123
    8124:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8126:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8128:	2e 9f       	mul	r18, r30
    812a:	f0 01       	movw	r30, r0
    812c:	11 24       	eor	r1, r1
    812e:	f3 95       	inc	r31
					tVol>>=8;
    8130:	ef 2f       	mov	r30, r31
    8132:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8134:	a3 01       	movw	r20, r6
    8136:	4e 1b       	sub	r20, r30
    8138:	5f 0b       	sbc	r21, r31
    813a:	48 9f       	mul	r20, r24
    813c:	90 01       	movw	r18, r0
    813e:	49 9f       	mul	r20, r25
    8140:	30 0d       	add	r19, r0
    8142:	58 9f       	mul	r21, r24
    8144:	30 0d       	add	r19, r0
    8146:	11 24       	eor	r1, r1
    8148:	c9 01       	movw	r24, r18
    814a:	93 95       	inc	r25
					uVol>>=8;
    814c:	89 2f       	mov	r24, r25
    814e:	99 27       	eor	r25, r25
    8150:	02 c0       	rjmp	.+4      	; 0x8156 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8152:	80 e0       	ldi	r24, 0x00	; 0
    8154:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8156:	f5 01       	movw	r30, r10
    8158:	30 81       	ld	r19, Z
    815a:	f7 01       	movw	r30, r14
    815c:	39 97       	sbiw	r30, 0x09	; 9
    815e:	20 81       	ld	r18, Z
    8160:	23 0f       	add	r18, r19
    8162:	d5 01       	movw	r26, r10
    8164:	2c 93       	st	X, r18
    8166:	02 c0       	rjmp	.+4      	; 0x816c <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8168:	80 e0       	ldi	r24, 0x00	; 0
    816a:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    816c:	f8 01       	movw	r30, r16
    816e:	80 83       	st	Z, r24
    8170:	67 96       	adiw	r28, 0x17	; 23
    8172:	0a 5f       	subi	r16, 0xFA	; 250
    8174:	1f 4f       	sbci	r17, 0xFF	; 255
    8176:	f7 e1       	ldi	r31, 0x17	; 23
    8178:	af 0e       	add	r10, r31
    817a:	b1 1c       	adc	r11, r1
    817c:	87 e1       	ldi	r24, 0x17	; 23
    817e:	c8 0e       	add	r12, r24
    8180:	d1 1c       	adc	r13, r1
    8182:	97 e1       	ldi	r25, 0x17	; 23
    8184:	e9 0e       	add	r14, r25
    8186:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8188:	ab e0       	ldi	r26, 0x0B	; 11
    818a:	c3 36       	cpi	r28, 0x63	; 99
    818c:	da 07       	cpc	r29, r26
    818e:	09 f0       	breq	.+2      	; 0x8192 <ProcessMusic+0x420>
    8190:	37 cf       	rjmp	.-402    	; 0x8000 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8192:	df 91       	pop	r29
    8194:	cf 91       	pop	r28
    8196:	1f 91       	pop	r17
    8198:	0f 91       	pop	r16
    819a:	ff 90       	pop	r15
    819c:	ef 90       	pop	r14
    819e:	df 90       	pop	r13
    81a0:	cf 90       	pop	r12
    81a2:	bf 90       	pop	r11
    81a4:	af 90       	pop	r10
    81a6:	9f 90       	pop	r9
    81a8:	8f 90       	pop	r8
    81aa:	7f 90       	pop	r7
    81ac:	6f 90       	pop	r6
    81ae:	08 95       	ret

000081b0 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    81b0:	80 93 68 0b 	sts	0x0B68, r24
    81b4:	08 95       	ret

000081b6 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    81b6:	99 27       	eor	r25, r25
	clr r23
    81b8:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    81ba:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    81bc:	09 f4       	brne	.+2      	; 0x81c0 <set_note_waves>
		ret
    81be:	08 95       	ret

000081c0 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    81c0:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    81c2:	f3 e8       	ldi	r31, 0x83	; 131
	lsl r22
    81c4:	66 0f       	add	r22, r22
	rol r23
    81c6:	77 1f       	adc	r23, r23
	add ZL,r22
    81c8:	e6 0f       	add	r30, r22
	adc ZH,r23	
    81ca:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    81cc:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    81ce:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    81d0:	e4 e8       	ldi	r30, 0x84	; 132
	ldi ZH,hi8(mixerStruct)
    81d2:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    81d4:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    81d6:	28 9f       	mul	r18, r24
	add ZL,r0
    81d8:	e0 0d       	add	r30, r0
	adc ZH,r1
    81da:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    81dc:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    81de:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    81e0:	11 24       	eor	r1, r1
	

	ret
    81e2:	08 95       	ret

000081e4 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    81e4:	99 27       	eor	r25, r25
	clr r23
    81e6:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    81e8:	e4 e8       	ldi	r30, 0x84	; 132
	ldi ZH,hi8(mixerStruct)
    81ea:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    81ec:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    81ee:	28 9f       	mul	r18, r24
	add ZL,r0
    81f0:	e0 0d       	add	r30, r0
	adc ZH,r1
    81f2:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    81f4:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    81f6:	31 f4       	brne	.+12     	; 0x8204 <smw1>
	lds r22,tr4_params
    81f8:	60 91 97 0a 	lds	r22, 0x0A97
	andi r22,0xfe;
    81fc:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    81fe:	60 93 97 0a 	sts	0x0A97, r22
	rjmp esmw	
    8202:	0b c0       	rjmp	.+22     	; 0x821a <esmw>

00008204 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8204:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8206:	31 f4       	brne	.+12     	; 0x8214 <smw2>
	lds r22,tr4_params
    8208:	60 91 97 0a 	lds	r22, 0x0A97
	ori r22,0xfe;
    820c:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    820e:	60 93 97 0a 	sts	0x0A97, r22
	rjmp esmw
    8212:	03 c0       	rjmp	.+6      	; 0x821a <esmw>

00008214 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8214:	75 e8       	ldi	r23, 0x85	; 133
	add r23,r22
    8216:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8218:	75 83       	std	Z+5, r23	; 0x05

0000821a <esmw>:

esmw:
	clr r1	
    821a:	11 24       	eor	r1, r1
	ret
    821c:	08 95       	ret
	...

00008300 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8300:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8302:	80 93 83 0a 	sts	0x0A83, r24
	ret
    8306:	08 95       	ret

00008308 <steptable>:
    8308:	22 00       	.word	0x0022	; ????
    830a:	24 00       	.word	0x0024	; ????
    830c:	26 00       	.word	0x0026	; ????
    830e:	28 00       	.word	0x0028	; ????
    8310:	2b 00       	.word	0x002b	; ????
    8312:	2d 00       	.word	0x002d	; ????
    8314:	30 00       	.word	0x0030	; ????
    8316:	33 00       	.word	0x0033	; ????
    8318:	36 00       	.word	0x0036	; ????
    831a:	39 00       	.word	0x0039	; ????
    831c:	3d 00       	.word	0x003d	; ????
    831e:	40 00       	.word	0x0040	; ????
    8320:	44 00       	.word	0x0044	; ????
    8322:	48 00       	.word	0x0048	; ????
    8324:	4c 00       	.word	0x004c	; ????
    8326:	51 00       	.word	0x0051	; ????
    8328:	56 00       	.word	0x0056	; ????
    832a:	5b 00       	.word	0x005b	; ????
    832c:	60 00       	.word	0x0060	; ????
    832e:	66 00       	.word	0x0066	; ????
    8330:	6c 00       	.word	0x006c	; ????
    8332:	73 00       	.word	0x0073	; ????
    8334:	79 00       	.word	0x0079	; ????
    8336:	81 00       	.word	0x0081	; ????
    8338:	88 00       	.word	0x0088	; ????
    833a:	90 00       	.word	0x0090	; ????
    833c:	99 00       	.word	0x0099	; ????
    833e:	a2 00       	.word	0x00a2	; ????
    8340:	ac 00       	.word	0x00ac	; ????
    8342:	b6 00       	.word	0x00b6	; ????
    8344:	c1 00       	.word	0x00c1	; ????
    8346:	cc 00       	.word	0x00cc	; ????
    8348:	d8 00       	.word	0x00d8	; ????
    834a:	e5 00       	.word	0x00e5	; ????
    834c:	f3 00       	.word	0x00f3	; ????
    834e:	01 01       	movw	r0, r2
    8350:	10 01       	movw	r2, r0
    8352:	21 01       	movw	r4, r2
    8354:	32 01       	movw	r6, r4
    8356:	44 01       	movw	r8, r8
    8358:	57 01       	movw	r10, r14
    835a:	6c 01       	movw	r12, r24
    835c:	81 01       	movw	r16, r2
    835e:	98 01       	movw	r18, r16
    8360:	b0 01       	movw	r22, r0
    8362:	ca 01       	movw	r24, r20
    8364:	e5 01       	movw	r28, r10
    8366:	02 02       	muls	r16, r18
    8368:	21 02       	muls	r18, r17
    836a:	41 02       	muls	r20, r17
    836c:	64 02       	muls	r22, r20
    836e:	88 02       	muls	r24, r24
    8370:	ae 02       	muls	r26, r30
    8372:	d7 02       	muls	r29, r23
    8374:	03 03       	mulsu	r16, r19
    8376:	30 03       	mulsu	r19, r16
    8378:	61 03       	mulsu	r22, r17
    837a:	94 03       	fmuls	r17, r20
    837c:	cb 03       	fmulsu	r20, r19
    837e:	05 04       	cpc	r0, r5
    8380:	42 04       	cpc	r4, r2
    8382:	83 04       	cpc	r8, r3
    8384:	c7 04       	cpc	r12, r7
    8386:	10 05       	cpc	r17, r0
    8388:	5d 05       	cpc	r21, r13
    838a:	af 05       	cpc	r26, r15
    838c:	05 06       	cpc	r0, r21
    838e:	61 06       	cpc	r6, r17
    8390:	c2 06       	cpc	r12, r18
    8392:	29 07       	cpc	r18, r25
    8394:	96 07       	cpc	r25, r22
    8396:	09 08       	sbc	r0, r9
    8398:	83 08       	sbc	r8, r3
    839a:	05 09       	sbc	r16, r5
    839c:	8e 09       	sbc	r24, r14
    839e:	20 0a       	sbc	r2, r16
    83a0:	ba 0a       	sbc	r11, r26
    83a2:	5d 0b       	sbc	r21, r29
    83a4:	0a 0c       	add	r0, r10
    83a6:	c1 0c       	add	r12, r1
    83a8:	84 0d       	add	r24, r4
    83aa:	51 0e       	add	r5, r17
    83ac:	2b 0f       	add	r18, r27
    83ae:	12 10       	cpse	r1, r2
    83b0:	07 11       	cpse	r16, r7
    83b2:	0a 12       	cpse	r0, r26
    83b4:	1d 13       	cpse	r17, r29
    83b6:	40 14       	cp	r4, r0
    83b8:	74 15       	cp	r23, r4
    83ba:	ba 16       	cp	r11, r26
    83bc:	14 18       	sub	r1, r4
    83be:	83 19       	sub	r24, r3
    83c0:	07 1b       	sub	r16, r23
    83c2:	a3 1c       	adc	r10, r3
    83c4:	57 1e       	adc	r5, r23
    83c6:	24 20       	and	r2, r4
    83c8:	0e 22       	and	r0, r30
    83ca:	14 24       	eor	r1, r4
    83cc:	39 26       	eor	r3, r25
    83ce:	7f 28       	or	r7, r15
    83d0:	e8 2a       	or	r14, r24
    83d2:	75 2d       	mov	r23, r5
    83d4:	29 30       	cpi	r18, 0x09	; 9
    83d6:	06 33       	cpi	r16, 0x36	; 54
    83d8:	0f 36       	cpi	r16, 0x6F	; 111
    83da:	45 39       	cpi	r20, 0x95	; 149
    83dc:	ad 3c       	cpi	r26, 0xCD	; 205
    83de:	49 40       	sbci	r20, 0x09	; 9
    83e0:	1b 44       	sbci	r17, 0x4B	; 75
    83e2:	28 48       	sbci	r18, 0x88	; 136
    83e4:	73 4c       	sbci	r23, 0xC3	; 195
    83e6:	fe 50       	subi	r31, 0x0E	; 14
    83e8:	cf 55       	subi	r28, 0x5F	; 95
    83ea:	ea 5a       	subi	r30, 0xAA	; 170
    83ec:	51 60       	ori	r21, 0x01	; 1
    83ee:	0c 66       	ori	r16, 0x6C	; 108
    83f0:	1d 6c       	ori	r17, 0xCD	; 205
    83f2:	8b 72       	andi	r24, 0x2B	; 43
    83f4:	5a 79       	andi	r21, 0x9A	; 154
    83f6:	92 80       	ldd	r9, Z+2	; 0x02
    83f8:	37 88       	ldd	r3, Z+23	; 0x17
    83fa:	50 90 e5 98 	lds	r5, 0x98E5
    83fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8400:	9f ab       	std	Y+55, r25	; 0x37
    8402:	d3 b5       	in	r29, 0x23	; 35
    8404:	a3 c0       	rjmp	.+326    	; 0x854c <waves+0x4c>
	...

00008500 <waves>:
    8500:	00 03       	mulsu	r16, r16
    8502:	06 09       	sbc	r16, r6
    8504:	0c 10       	cpse	r0, r12
    8506:	13 16       	cp	r1, r19
    8508:	19 1c       	adc	r1, r9
    850a:	1f 22       	and	r1, r31
    850c:	25 28       	or	r2, r5
    850e:	2b 2e       	mov	r2, r27
    8510:	31 33       	cpi	r19, 0x31	; 49
    8512:	36 39       	cpi	r19, 0x96	; 150
    8514:	3c 3f       	cpi	r19, 0xFC	; 252
    8516:	41 44       	sbci	r20, 0x41	; 65
    8518:	47 49       	sbci	r20, 0x97	; 151
    851a:	4c 4e       	sbci	r20, 0xEC	; 236
    851c:	51 53       	subi	r21, 0x31	; 49
    851e:	55 58       	subi	r21, 0x85	; 133
    8520:	5a 5c       	subi	r21, 0xCA	; 202
    8522:	5e 60       	ori	r21, 0x0E	; 14
    8524:	62 64       	ori	r22, 0x42	; 66
    8526:	66 68       	ori	r22, 0x86	; 134
    8528:	6a 6b       	ori	r22, 0xBA	; 186
    852a:	6d 6f       	ori	r22, 0xFD	; 253
    852c:	70 71       	andi	r23, 0x10	; 16
    852e:	73 74       	andi	r23, 0x43	; 67
    8530:	75 76       	andi	r23, 0x65	; 101
    8532:	78 79       	andi	r23, 0x98	; 152
    8534:	7a 7a       	andi	r23, 0xAA	; 170
    8536:	7b 7c       	andi	r23, 0xCB	; 203
    8538:	7d 7d       	andi	r23, 0xDD	; 221
    853a:	7e 7e       	andi	r23, 0xEE	; 238
    853c:	7e 7f       	andi	r23, 0xFE	; 254
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	7f 7f       	andi	r23, 0xFF	; 255
    8542:	7f 7f       	andi	r23, 0xFF	; 255
    8544:	7e 7e       	andi	r23, 0xEE	; 238
    8546:	7e 7d       	andi	r23, 0xDE	; 222
    8548:	7d 7c       	andi	r23, 0xCD	; 205
    854a:	7b 7a       	andi	r23, 0xAB	; 171
    854c:	7a 79       	andi	r23, 0x9A	; 154
    854e:	78 76       	andi	r23, 0x68	; 104
    8550:	75 74       	andi	r23, 0x45	; 69
    8552:	73 71       	andi	r23, 0x13	; 19
    8554:	70 6f       	ori	r23, 0xF0	; 240
    8556:	6d 6b       	ori	r22, 0xBD	; 189
    8558:	6a 68       	ori	r22, 0x8A	; 138
    855a:	66 64       	ori	r22, 0x46	; 70
    855c:	62 60       	ori	r22, 0x02	; 2
    855e:	5e 5c       	subi	r21, 0xCE	; 206
    8560:	5a 58       	subi	r21, 0x8A	; 138
    8562:	55 53       	subi	r21, 0x35	; 53
    8564:	51 4e       	sbci	r21, 0xE1	; 225
    8566:	4c 49       	sbci	r20, 0x9C	; 156
    8568:	47 44       	sbci	r20, 0x47	; 71
    856a:	41 3f       	cpi	r20, 0xF1	; 241
    856c:	3c 39       	cpi	r19, 0x9C	; 156
    856e:	36 33       	cpi	r19, 0x36	; 54
    8570:	31 2e       	mov	r3, r17
    8572:	2b 28       	or	r2, r11
    8574:	25 22       	and	r2, r21
    8576:	1f 1c       	adc	r1, r15
    8578:	19 16       	cp	r1, r25
    857a:	13 10       	cpse	r1, r3
    857c:	0c 09       	sbc	r16, r12
    857e:	06 03       	mulsu	r16, r22
    8580:	00 fd       	sbrc	r16, 0
    8582:	fa f7       	brpl	.-2      	; 0x8582 <waves+0x82>
    8584:	f4 f0       	brlt	.+60     	; 0x85c2 <waves+0xc2>
    8586:	ed ea       	ldi	r30, 0xAD	; 173
    8588:	e7 e4       	ldi	r30, 0x47	; 71
    858a:	e1 de       	rcall	.-574    	; 0x834e <steptable+0x46>
    858c:	db d8       	rcall	.-3658   	; 0x7744 <isEepromFormatted+0x26>
    858e:	d5 d2       	rcall	.+1450   	; 0x8b3a <waves+0x63a>
    8590:	cf cd       	rjmp	.-1122   	; 0x8130 <ProcessMusic+0x3be>
    8592:	ca c7       	rjmp	.+3988   	; 0x9528 <wifiGetAndDiscard+0x12>
    8594:	c4 c1       	rjmp	.+904    	; 0x891e <waves+0x41e>
    8596:	bf bc       	out	0x2f, r11	; 47
    8598:	b9 b7       	in	r27, 0x39	; 57
    859a:	b4 b2       	in	r11, 0x14	; 20
    859c:	af ad       	ldd	r26, Y+63	; 0x3f
    859e:	ab a8       	ldd	r10, Y+51	; 0x33
    85a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    85a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    85a4:	9e 9c       	mul	r9, r14
    85a6:	9a 98       	cbi	0x13, 2	; 19
    85a8:	96 95       	lsr	r25
    85aa:	93 91       	.word	0x9193	; ????
    85ac:	90 8f       	std	Z+24, r25	; 0x18
    85ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    85b0:	8b 8a       	std	Y+19, r8	; 0x13
    85b2:	88 87       	std	Y+8, r24	; 0x08
    85b4:	86 86       	std	Z+14, r8	; 0x0e
    85b6:	85 84       	ldd	r8, Z+13	; 0x0d
    85b8:	83 83       	std	Z+3, r24	; 0x03
    85ba:	82 82       	std	Z+2, r8	; 0x02
    85bc:	82 81       	ldd	r24, Z+2	; 0x02
    85be:	81 81       	ldd	r24, Z+1	; 0x01
    85c0:	81 81       	ldd	r24, Z+1	; 0x01
    85c2:	81 81       	ldd	r24, Z+1	; 0x01
    85c4:	82 82       	std	Z+2, r8	; 0x02
    85c6:	82 83       	std	Z+2, r24	; 0x02
    85c8:	83 84       	ldd	r8, Z+11	; 0x0b
    85ca:	85 86       	std	Z+13, r8	; 0x0d
    85cc:	86 87       	std	Z+14, r24	; 0x0e
    85ce:	88 8a       	std	Y+16, r8	; 0x10
    85d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    85d2:	8d 8f       	std	Y+29, r24	; 0x1d
    85d4:	90 91 93 95 	lds	r25, 0x9593
    85d8:	96 98       	cbi	0x12, 6	; 18
    85da:	9a 9c       	mul	r9, r10
    85dc:	9e a0       	ldd	r9, Y+38	; 0x26
    85de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    85e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    85e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    85e4:	af b2       	in	r10, 0x1f	; 31
    85e6:	b4 b7       	in	r27, 0x34	; 52
    85e8:	b9 bc       	out	0x29, r11	; 41
    85ea:	bf c1       	rjmp	.+894    	; 0x896a <waves+0x46a>
    85ec:	c4 c7       	rjmp	.+3976   	; 0x9576 <wifiGetPB+0x40>
    85ee:	ca cd       	rjmp	.-1132   	; 0x8184 <ProcessMusic+0x412>
    85f0:	cf d2       	rcall	.+1438   	; 0x8b90 <waves+0x690>
    85f2:	d5 d8       	rcall	.-3670   	; 0x779e <EepromBlockExists+0x52>
    85f4:	db de       	rcall	.-586    	; 0x83ac <steptable+0xa4>
    85f6:	e1 e4       	ldi	r30, 0x41	; 65
    85f8:	e7 ea       	ldi	r30, 0xA7	; 167
    85fa:	ed f0       	brhs	.+58     	; 0x8636 <waves+0x136>
    85fc:	f4 f7       	brge	.-4      	; 0x85fa <waves+0xfa>
    85fe:	fa fd       	.word	0xfdfa	; ????
    8600:	80 81       	ld	r24, Z
    8602:	82 83       	std	Z+2, r24	; 0x02
    8604:	84 85       	ldd	r24, Z+12	; 0x0c
    8606:	86 87       	std	Z+14, r24	; 0x0e
    8608:	88 89       	ldd	r24, Y+16	; 0x10
    860a:	8a 8b       	std	Y+18, r24	; 0x12
    860c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    860e:	8e 8f       	std	Y+30, r24	; 0x1e
    8610:	90 91 92 93 	lds	r25, 0x9392
    8614:	94 95       	.word	0x9594	; ????
    8616:	96 97       	sbiw	r26, 0x26	; 38
    8618:	98 99       	sbic	0x13, 0	; 19
    861a:	9a 9b       	sbis	0x13, 2	; 19
    861c:	9c 9d       	mul	r25, r12
    861e:	9e 9f       	mul	r25, r30
    8620:	a0 a1       	ldd	r26, Z+32	; 0x20
    8622:	a2 a3       	std	Z+34, r26	; 0x22
    8624:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8626:	a6 a7       	std	Z+46, r26	; 0x2e
    8628:	a8 a9       	ldd	r26, Y+48	; 0x30
    862a:	aa ab       	std	Y+50, r26	; 0x32
    862c:	ac ad       	ldd	r26, Y+60	; 0x3c
    862e:	ae af       	std	Y+62, r26	; 0x3e
    8630:	b0 b1       	in	r27, 0x00	; 0
    8632:	b2 b3       	in	r27, 0x12	; 18
    8634:	b4 b5       	in	r27, 0x24	; 36
    8636:	b6 b7       	in	r27, 0x36	; 54
    8638:	b8 b9       	out	0x08, r27	; 8
    863a:	ba bb       	out	0x1a, r27	; 26
    863c:	bc bd       	out	0x2c, r27	; 44
    863e:	be bf       	out	0x3e, r27	; 62
    8640:	c0 c1       	rjmp	.+896    	; 0x89c2 <waves+0x4c2>
    8642:	c2 c3       	rjmp	.+1924   	; 0x8dc8 <waves+0x8c8>
    8644:	c4 c5       	rjmp	.+2952   	; 0x91ce <MoveSprite+0x2a>
    8646:	c6 c7       	rjmp	.+3980   	; 0x95d4 <wifiGetPBT+0x34>
    8648:	c8 c9       	rjmp	.-3184   	; 0x79da <PatchCommand05+0x8>
    864a:	ca cb       	rjmp	.-2156   	; 0x7de0 <ProcessMusic+0x6e>
    864c:	cc cd       	rjmp	.-1128   	; 0x81e6 <SetMixerWave+0x2>
    864e:	ce cf       	rjmp	.-100    	; 0x85ec <waves+0xec>
    8650:	d0 d1       	rcall	.+928    	; 0x89f2 <waves+0x4f2>
    8652:	d2 d3       	rcall	.+1956   	; 0x8df8 <waves+0x8f8>
    8654:	d4 d5       	rcall	.+2984   	; 0x91fe <InitializeVideoMode+0xe>
    8656:	d6 d7       	rcall	.+4012   	; 0x9604 <wifiGetPBT+0x64>
    8658:	d8 d9       	rcall	.-3152   	; 0x7a0a <PatchCommand11+0x12>
    865a:	da db       	rcall	.-2124   	; 0x7e10 <ProcessMusic+0x9e>
    865c:	dc dd       	rcall	.-1096   	; 0x8216 <smw2+0x2>
    865e:	de df       	rcall	.-68     	; 0x861c <waves+0x11c>
    8660:	e0 e1       	ldi	r30, 0x10	; 16
    8662:	e2 e3       	ldi	r30, 0x32	; 50
    8664:	e4 e5       	ldi	r30, 0x54	; 84
    8666:	e6 e7       	ldi	r30, 0x76	; 118
    8668:	e8 e9       	ldi	r30, 0x98	; 152
    866a:	ea eb       	ldi	r30, 0xBA	; 186
    866c:	ec ed       	ldi	r30, 0xDC	; 220
    866e:	ee ef       	ldi	r30, 0xFE	; 254
    8670:	f0 f1       	brcs	.+124    	; 0x86ee <waves+0x1ee>
    8672:	f2 f3       	brmi	.-4      	; 0x8670 <waves+0x170>
    8674:	f4 f5       	brge	.+124    	; 0x86f2 <waves+0x1f2>
    8676:	f6 f7       	brtc	.-4      	; 0x8674 <waves+0x174>
    8678:	f8 f9       	.word	0xf9f8	; ????
    867a:	fa fb       	.word	0xfbfa	; ????
    867c:	fc fd       	.word	0xfdfc	; ????
    867e:	fe ff       	.word	0xfffe	; ????
    8680:	00 01       	movw	r0, r0
    8682:	02 03       	mulsu	r16, r18
    8684:	04 05       	cpc	r16, r4
    8686:	06 07       	cpc	r16, r22
    8688:	08 09       	sbc	r16, r8
    868a:	0a 0b       	sbc	r16, r26
    868c:	0c 0d       	add	r16, r12
    868e:	0e 0f       	add	r16, r30
    8690:	10 11       	cpse	r17, r0
    8692:	12 13       	cpse	r17, r18
    8694:	14 15       	cp	r17, r4
    8696:	16 17       	cp	r17, r22
    8698:	18 19       	sub	r17, r8
    869a:	1a 1b       	sub	r17, r26
    869c:	1c 1d       	adc	r17, r12
    869e:	1e 1f       	adc	r17, r30
    86a0:	20 21       	and	r18, r0
    86a2:	22 23       	and	r18, r18
    86a4:	24 25       	eor	r18, r4
    86a6:	26 27       	eor	r18, r22
    86a8:	28 29       	or	r18, r8
    86aa:	2a 2b       	or	r18, r26
    86ac:	2c 2d       	mov	r18, r12
    86ae:	2e 2f       	mov	r18, r30
    86b0:	30 31       	cpi	r19, 0x10	; 16
    86b2:	32 33       	cpi	r19, 0x32	; 50
    86b4:	34 35       	cpi	r19, 0x54	; 84
    86b6:	36 37       	cpi	r19, 0x76	; 118
    86b8:	38 39       	cpi	r19, 0x98	; 152
    86ba:	3a 3b       	cpi	r19, 0xBA	; 186
    86bc:	3c 3d       	cpi	r19, 0xDC	; 220
    86be:	3e 3f       	cpi	r19, 0xFE	; 254
    86c0:	40 41       	sbci	r20, 0x10	; 16
    86c2:	42 43       	sbci	r20, 0x32	; 50
    86c4:	44 45       	sbci	r20, 0x54	; 84
    86c6:	46 47       	sbci	r20, 0x76	; 118
    86c8:	48 49       	sbci	r20, 0x98	; 152
    86ca:	4a 4b       	sbci	r20, 0xBA	; 186
    86cc:	4c 4d       	sbci	r20, 0xDC	; 220
    86ce:	4e 4f       	sbci	r20, 0xFE	; 254
    86d0:	50 51       	subi	r21, 0x10	; 16
    86d2:	52 53       	subi	r21, 0x32	; 50
    86d4:	54 55       	subi	r21, 0x54	; 84
    86d6:	56 57       	subi	r21, 0x76	; 118
    86d8:	58 59       	subi	r21, 0x98	; 152
    86da:	5a 5b       	subi	r21, 0xBA	; 186
    86dc:	5c 5d       	subi	r21, 0xDC	; 220
    86de:	5e 5f       	subi	r21, 0xFE	; 254
    86e0:	60 61       	ori	r22, 0x10	; 16
    86e2:	62 63       	ori	r22, 0x32	; 50
    86e4:	64 65       	ori	r22, 0x54	; 84
    86e6:	66 67       	ori	r22, 0x76	; 118
    86e8:	68 69       	ori	r22, 0x98	; 152
    86ea:	6a 6b       	ori	r22, 0xBA	; 186
    86ec:	6c 6d       	ori	r22, 0xDC	; 220
    86ee:	6e 6f       	ori	r22, 0xFE	; 254
    86f0:	70 71       	andi	r23, 0x10	; 16
    86f2:	72 73       	andi	r23, 0x32	; 50
    86f4:	74 75       	andi	r23, 0x54	; 84
    86f6:	76 77       	andi	r23, 0x76	; 118
    86f8:	78 79       	andi	r23, 0x98	; 152
    86fa:	7a 7b       	andi	r23, 0xBA	; 186
    86fc:	7c 7d       	andi	r23, 0xDC	; 220
    86fe:	7e 7f       	andi	r23, 0xFE	; 254
    8700:	00 02       	muls	r16, r16
    8702:	04 06       	cpc	r0, r20
    8704:	08 0a       	sbc	r0, r24
    8706:	0c 0e       	add	r0, r28
    8708:	10 12       	cpse	r1, r16
    870a:	14 16       	cp	r1, r20
    870c:	18 1a       	sub	r1, r24
    870e:	1c 1e       	adc	r1, r28
    8710:	20 22       	and	r2, r16
    8712:	24 26       	eor	r2, r20
    8714:	28 2a       	or	r2, r24
    8716:	2c 2e       	mov	r2, r28
    8718:	30 32       	cpi	r19, 0x20	; 32
    871a:	34 36       	cpi	r19, 0x64	; 100
    871c:	38 3a       	cpi	r19, 0xA8	; 168
    871e:	3c 3e       	cpi	r19, 0xEC	; 236
    8720:	40 42       	sbci	r20, 0x20	; 32
    8722:	44 46       	sbci	r20, 0x64	; 100
    8724:	48 4a       	sbci	r20, 0xA8	; 168
    8726:	4c 4e       	sbci	r20, 0xEC	; 236
    8728:	50 52       	subi	r21, 0x20	; 32
    872a:	54 56       	subi	r21, 0x64	; 100
    872c:	58 5a       	subi	r21, 0xA8	; 168
    872e:	5c 5e       	subi	r21, 0xEC	; 236
    8730:	60 62       	ori	r22, 0x20	; 32
    8732:	64 66       	ori	r22, 0x64	; 100
    8734:	68 6a       	ori	r22, 0xA8	; 168
    8736:	6c 6e       	ori	r22, 0xEC	; 236
    8738:	70 72       	andi	r23, 0x20	; 32
    873a:	74 76       	andi	r23, 0x64	; 100
    873c:	78 7a       	andi	r23, 0xA8	; 168
    873e:	7c 7e       	andi	r23, 0xEC	; 236
    8740:	7f 7d       	andi	r23, 0xDF	; 223
    8742:	7b 79       	andi	r23, 0x9B	; 155
    8744:	77 75       	andi	r23, 0x57	; 87
    8746:	73 71       	andi	r23, 0x13	; 19
    8748:	6f 6d       	ori	r22, 0xDF	; 223
    874a:	6b 69       	ori	r22, 0x9B	; 155
    874c:	67 65       	ori	r22, 0x57	; 87
    874e:	63 61       	ori	r22, 0x13	; 19
    8750:	5f 5d       	subi	r21, 0xDF	; 223
    8752:	5b 59       	subi	r21, 0x9B	; 155
    8754:	57 55       	subi	r21, 0x57	; 87
    8756:	53 51       	subi	r21, 0x13	; 19
    8758:	4f 4d       	sbci	r20, 0xDF	; 223
    875a:	4b 49       	sbci	r20, 0x9B	; 155
    875c:	47 45       	sbci	r20, 0x57	; 87
    875e:	43 41       	sbci	r20, 0x13	; 19
    8760:	3f 3d       	cpi	r19, 0xDF	; 223
    8762:	3b 39       	cpi	r19, 0x9B	; 155
    8764:	37 35       	cpi	r19, 0x57	; 87
    8766:	33 31       	cpi	r19, 0x13	; 19
    8768:	2f 2d       	mov	r18, r15
    876a:	2b 29       	or	r18, r11
    876c:	27 25       	eor	r18, r7
    876e:	23 21       	and	r18, r3
    8770:	1f 1d       	adc	r17, r15
    8772:	1b 19       	sub	r17, r11
    8774:	17 15       	cp	r17, r7
    8776:	13 11       	cpse	r17, r3
    8778:	0f 0d       	add	r16, r15
    877a:	0b 09       	sbc	r16, r11
    877c:	07 05       	cpc	r16, r7
    877e:	03 01       	movw	r0, r6
    8780:	ff fd       	.word	0xfdff	; ????
    8782:	fb f9       	.word	0xf9fb	; ????
    8784:	f7 f5       	brid	.+124    	; 0x8802 <waves+0x302>
    8786:	f3 f1       	brvs	.+124    	; 0x8804 <waves+0x304>
    8788:	ef ed       	ldi	r30, 0xDF	; 223
    878a:	eb e9       	ldi	r30, 0x9B	; 155
    878c:	e7 e5       	ldi	r30, 0x57	; 87
    878e:	e3 e1       	ldi	r30, 0x13	; 19
    8790:	df dd       	rcall	.-1090   	; 0x8350 <steptable+0x48>
    8792:	db d9       	rcall	.-3146   	; 0x7b4a <InitMusicPlayer+0x36>
    8794:	d7 d5       	rcall	.+2990   	; 0x9344 <PrintChar+0x2>
    8796:	d3 d1       	rcall	.+934    	; 0x8b3e <waves+0x63e>
    8798:	cf cd       	rjmp	.-1122   	; 0x8338 <steptable+0x30>
    879a:	cb c9       	rjmp	.-3178   	; 0x7b32 <InitMusicPlayer+0x1e>
    879c:	c7 c5       	rjmp	.+2958   	; 0x932c <Print+0x20>
    879e:	c3 c1       	rjmp	.+902    	; 0x8b26 <waves+0x626>
    87a0:	bf bd       	out	0x2f, r27	; 47
    87a2:	bb b9       	out	0x0b, r27	; 11
    87a4:	b7 b5       	in	r27, 0x27	; 39
    87a6:	b3 b1       	in	r27, 0x03	; 3
    87a8:	af ad       	ldd	r26, Y+63	; 0x3f
    87aa:	ab a9       	ldd	r26, Y+51	; 0x33
    87ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    87ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    87b0:	9f 9d       	mul	r25, r15
    87b2:	9b 99       	sbic	0x13, 3	; 19
    87b4:	97 95       	ror	r25
    87b6:	93 91       	.word	0x9193	; ????
    87b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    87ba:	8b 89       	ldd	r24, Y+19	; 0x13
    87bc:	87 85       	ldd	r24, Z+15	; 0x0f
    87be:	83 81       	ldd	r24, Z+3	; 0x03
    87c0:	80 82       	st	Z, r8
    87c2:	84 86       	std	Z+12, r8	; 0x0c
    87c4:	88 8a       	std	Y+16, r8	; 0x10
    87c6:	8c 8e       	std	Y+28, r8	; 0x1c
    87c8:	90 92 94 96 	sts	0x9694, r9
    87cc:	98 9a       	sbi	0x13, 0	; 19
    87ce:	9c 9e       	mul	r9, r28
    87d0:	a0 a2       	std	Z+32, r10	; 0x20
    87d2:	a4 a6       	std	Z+44, r10	; 0x2c
    87d4:	a8 aa       	std	Y+48, r10	; 0x30
    87d6:	ac ae       	std	Y+60, r10	; 0x3c
    87d8:	b0 b2       	in	r11, 0x10	; 16
    87da:	b4 b6       	in	r11, 0x34	; 52
    87dc:	b8 ba       	out	0x18, r11	; 24
    87de:	bc be       	out	0x3c, r11	; 60
    87e0:	c0 c2       	rjmp	.+1408   	; 0x8d62 <waves+0x862>
    87e2:	c4 c6       	rjmp	.+3464   	; 0x956c <wifiGetPB+0x36>
    87e4:	c8 ca       	rjmp	.-2672   	; 0x7d76 <ProcessMusic+0x4>
    87e6:	cc ce       	rjmp	.-616    	; 0x8580 <waves+0x80>
    87e8:	d0 d2       	rcall	.+1440   	; 0x8d8a <waves+0x88a>
    87ea:	d4 d6       	rcall	.+3496   	; 0x9594 <wifiGetPB+0x5e>
    87ec:	d8 da       	rcall	.-2640   	; 0x7d9e <ProcessMusic+0x2c>
    87ee:	dc de       	rcall	.-584    	; 0x85a8 <waves+0xa8>
    87f0:	e0 e2       	ldi	r30, 0x20	; 32
    87f2:	e4 e6       	ldi	r30, 0x64	; 100
    87f4:	e8 ea       	ldi	r30, 0xA8	; 168
    87f6:	ec ee       	ldi	r30, 0xEC	; 236
    87f8:	f0 f2       	brcs	.-68     	; 0x87b6 <waves+0x2b6>
    87fa:	f4 f6       	brge	.-68     	; 0x87b8 <waves+0x2b8>
    87fc:	f8 fa       	.word	0xfaf8	; ????
    87fe:	fc fe       	.word	0xfefc	; ????
    8800:	7f 7f       	andi	r23, 0xFF	; 255
    8802:	7f 7f       	andi	r23, 0xFF	; 255
    8804:	7f 7f       	andi	r23, 0xFF	; 255
    8806:	7f 7f       	andi	r23, 0xFF	; 255
    8808:	7f 7f       	andi	r23, 0xFF	; 255
    880a:	7f 7f       	andi	r23, 0xFF	; 255
    880c:	7f 7f       	andi	r23, 0xFF	; 255
    880e:	7f 7f       	andi	r23, 0xFF	; 255
    8810:	7f 7f       	andi	r23, 0xFF	; 255
    8812:	7f 7f       	andi	r23, 0xFF	; 255
    8814:	7f 7f       	andi	r23, 0xFF	; 255
    8816:	7f 7f       	andi	r23, 0xFF	; 255
    8818:	7f 7f       	andi	r23, 0xFF	; 255
    881a:	7f 7f       	andi	r23, 0xFF	; 255
    881c:	7f 7f       	andi	r23, 0xFF	; 255
    881e:	7f 7f       	andi	r23, 0xFF	; 255
    8820:	7f 7f       	andi	r23, 0xFF	; 255
    8822:	7f 7f       	andi	r23, 0xFF	; 255
    8824:	7f 7f       	andi	r23, 0xFF	; 255
    8826:	7f 7f       	andi	r23, 0xFF	; 255
    8828:	7f 7f       	andi	r23, 0xFF	; 255
    882a:	7f 7f       	andi	r23, 0xFF	; 255
    882c:	7f 7f       	andi	r23, 0xFF	; 255
    882e:	7f 7f       	andi	r23, 0xFF	; 255
    8830:	7f 7f       	andi	r23, 0xFF	; 255
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	80 80       	ld	r8, Z
    8842:	80 80       	ld	r8, Z
    8844:	80 80       	ld	r8, Z
    8846:	80 80       	ld	r8, Z
    8848:	80 80       	ld	r8, Z
    884a:	80 80       	ld	r8, Z
    884c:	80 80       	ld	r8, Z
    884e:	80 80       	ld	r8, Z
    8850:	80 80       	ld	r8, Z
    8852:	80 80       	ld	r8, Z
    8854:	80 80       	ld	r8, Z
    8856:	80 80       	ld	r8, Z
    8858:	80 80       	ld	r8, Z
    885a:	80 80       	ld	r8, Z
    885c:	80 80       	ld	r8, Z
    885e:	80 80       	ld	r8, Z
    8860:	80 80       	ld	r8, Z
    8862:	80 80       	ld	r8, Z
    8864:	80 80       	ld	r8, Z
    8866:	80 80       	ld	r8, Z
    8868:	80 80       	ld	r8, Z
    886a:	80 80       	ld	r8, Z
    886c:	80 80       	ld	r8, Z
    886e:	80 80       	ld	r8, Z
    8870:	80 80       	ld	r8, Z
    8872:	80 80       	ld	r8, Z
    8874:	80 80       	ld	r8, Z
    8876:	80 80       	ld	r8, Z
    8878:	80 80       	ld	r8, Z
    887a:	80 80       	ld	r8, Z
    887c:	80 80       	ld	r8, Z
    887e:	80 80       	ld	r8, Z
    8880:	80 80       	ld	r8, Z
    8882:	80 80       	ld	r8, Z
    8884:	80 80       	ld	r8, Z
    8886:	80 80       	ld	r8, Z
    8888:	80 80       	ld	r8, Z
    888a:	80 80       	ld	r8, Z
    888c:	80 80       	ld	r8, Z
    888e:	80 80       	ld	r8, Z
    8890:	80 80       	ld	r8, Z
    8892:	80 80       	ld	r8, Z
    8894:	80 80       	ld	r8, Z
    8896:	80 80       	ld	r8, Z
    8898:	80 80       	ld	r8, Z
    889a:	80 80       	ld	r8, Z
    889c:	80 80       	ld	r8, Z
    889e:	80 80       	ld	r8, Z
    88a0:	80 80       	ld	r8, Z
    88a2:	80 80       	ld	r8, Z
    88a4:	80 80       	ld	r8, Z
    88a6:	80 80       	ld	r8, Z
    88a8:	80 80       	ld	r8, Z
    88aa:	80 80       	ld	r8, Z
    88ac:	80 80       	ld	r8, Z
    88ae:	80 80       	ld	r8, Z
    88b0:	80 80       	ld	r8, Z
    88b2:	80 80       	ld	r8, Z
    88b4:	80 80       	ld	r8, Z
    88b6:	80 80       	ld	r8, Z
    88b8:	80 80       	ld	r8, Z
    88ba:	80 80       	ld	r8, Z
    88bc:	80 80       	ld	r8, Z
    88be:	80 80       	ld	r8, Z
    88c0:	80 80       	ld	r8, Z
    88c2:	80 80       	ld	r8, Z
    88c4:	80 80       	ld	r8, Z
    88c6:	80 80       	ld	r8, Z
    88c8:	80 80       	ld	r8, Z
    88ca:	80 80       	ld	r8, Z
    88cc:	80 80       	ld	r8, Z
    88ce:	80 80       	ld	r8, Z
    88d0:	80 80       	ld	r8, Z
    88d2:	80 80       	ld	r8, Z
    88d4:	80 80       	ld	r8, Z
    88d6:	80 80       	ld	r8, Z
    88d8:	80 80       	ld	r8, Z
    88da:	80 80       	ld	r8, Z
    88dc:	80 80       	ld	r8, Z
    88de:	80 80       	ld	r8, Z
    88e0:	80 80       	ld	r8, Z
    88e2:	80 80       	ld	r8, Z
    88e4:	80 80       	ld	r8, Z
    88e6:	80 80       	ld	r8, Z
    88e8:	80 80       	ld	r8, Z
    88ea:	80 80       	ld	r8, Z
    88ec:	80 80       	ld	r8, Z
    88ee:	80 80       	ld	r8, Z
    88f0:	80 80       	ld	r8, Z
    88f2:	80 80       	ld	r8, Z
    88f4:	80 80       	ld	r8, Z
    88f6:	80 80       	ld	r8, Z
    88f8:	80 80       	ld	r8, Z
    88fa:	80 80       	ld	r8, Z
    88fc:	80 80       	ld	r8, Z
    88fe:	80 80       	ld	r8, Z
    8900:	7f 7f       	andi	r23, 0xFF	; 255
    8902:	7f 7f       	andi	r23, 0xFF	; 255
    8904:	7f 7f       	andi	r23, 0xFF	; 255
    8906:	7f 7f       	andi	r23, 0xFF	; 255
    8908:	7f 7f       	andi	r23, 0xFF	; 255
    890a:	7f 7f       	andi	r23, 0xFF	; 255
    890c:	7f 7f       	andi	r23, 0xFF	; 255
    890e:	7f 7f       	andi	r23, 0xFF	; 255
    8910:	7f 7f       	andi	r23, 0xFF	; 255
    8912:	7f 7f       	andi	r23, 0xFF	; 255
    8914:	7f 7f       	andi	r23, 0xFF	; 255
    8916:	7f 7f       	andi	r23, 0xFF	; 255
    8918:	7f 7f       	andi	r23, 0xFF	; 255
    891a:	7f 7f       	andi	r23, 0xFF	; 255
    891c:	7f 7f       	andi	r23, 0xFF	; 255
    891e:	7f 7f       	andi	r23, 0xFF	; 255
    8920:	7f 7f       	andi	r23, 0xFF	; 255
    8922:	7f 7f       	andi	r23, 0xFF	; 255
    8924:	7f 7f       	andi	r23, 0xFF	; 255
    8926:	7f 7f       	andi	r23, 0xFF	; 255
    8928:	7f 7f       	andi	r23, 0xFF	; 255
    892a:	7f 7f       	andi	r23, 0xFF	; 255
    892c:	7f 7f       	andi	r23, 0xFF	; 255
    892e:	7f 7f       	andi	r23, 0xFF	; 255
    8930:	7f 7f       	andi	r23, 0xFF	; 255
    8932:	7f 7f       	andi	r23, 0xFF	; 255
    8934:	7f 7f       	andi	r23, 0xFF	; 255
    8936:	7f 7f       	andi	r23, 0xFF	; 255
    8938:	7f 7f       	andi	r23, 0xFF	; 255
    893a:	7f 7f       	andi	r23, 0xFF	; 255
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7f 7f       	andi	r23, 0xFF	; 255
    8948:	7f 7f       	andi	r23, 0xFF	; 255
    894a:	7f 7f       	andi	r23, 0xFF	; 255
    894c:	7f 7f       	andi	r23, 0xFF	; 255
    894e:	7f 7f       	andi	r23, 0xFF	; 255
    8950:	7f 7f       	andi	r23, 0xFF	; 255
    8952:	7f 7f       	andi	r23, 0xFF	; 255
    8954:	7f 7f       	andi	r23, 0xFF	; 255
    8956:	7f 7f       	andi	r23, 0xFF	; 255
    8958:	7f 7f       	andi	r23, 0xFF	; 255
    895a:	7f 7f       	andi	r23, 0xFF	; 255
    895c:	7f 7f       	andi	r23, 0xFF	; 255
    895e:	7f 7f       	andi	r23, 0xFF	; 255
    8960:	7f 7f       	andi	r23, 0xFF	; 255
    8962:	7f 7f       	andi	r23, 0xFF	; 255
    8964:	7f 7f       	andi	r23, 0xFF	; 255
    8966:	7f 7f       	andi	r23, 0xFF	; 255
    8968:	7f 7f       	andi	r23, 0xFF	; 255
    896a:	7f 7f       	andi	r23, 0xFF	; 255
    896c:	7f 7f       	andi	r23, 0xFF	; 255
    896e:	7f 7f       	andi	r23, 0xFF	; 255
    8970:	7f 7f       	andi	r23, 0xFF	; 255
    8972:	7f 7f       	andi	r23, 0xFF	; 255
    8974:	7f 7f       	andi	r23, 0xFF	; 255
    8976:	7f 7f       	andi	r23, 0xFF	; 255
    8978:	7f 7f       	andi	r23, 0xFF	; 255
    897a:	7f 7f       	andi	r23, 0xFF	; 255
    897c:	7f 7f       	andi	r23, 0xFF	; 255
    897e:	7f 7f       	andi	r23, 0xFF	; 255
    8980:	80 80       	ld	r8, Z
    8982:	80 80       	ld	r8, Z
    8984:	80 80       	ld	r8, Z
    8986:	80 80       	ld	r8, Z
    8988:	80 80       	ld	r8, Z
    898a:	80 80       	ld	r8, Z
    898c:	80 80       	ld	r8, Z
    898e:	80 80       	ld	r8, Z
    8990:	80 80       	ld	r8, Z
    8992:	80 80       	ld	r8, Z
    8994:	80 80       	ld	r8, Z
    8996:	80 80       	ld	r8, Z
    8998:	80 80       	ld	r8, Z
    899a:	80 80       	ld	r8, Z
    899c:	80 80       	ld	r8, Z
    899e:	80 80       	ld	r8, Z
    89a0:	80 80       	ld	r8, Z
    89a2:	80 80       	ld	r8, Z
    89a4:	80 80       	ld	r8, Z
    89a6:	80 80       	ld	r8, Z
    89a8:	80 80       	ld	r8, Z
    89aa:	80 80       	ld	r8, Z
    89ac:	80 80       	ld	r8, Z
    89ae:	80 80       	ld	r8, Z
    89b0:	80 80       	ld	r8, Z
    89b2:	80 80       	ld	r8, Z
    89b4:	80 80       	ld	r8, Z
    89b6:	80 80       	ld	r8, Z
    89b8:	80 80       	ld	r8, Z
    89ba:	80 80       	ld	r8, Z
    89bc:	80 80       	ld	r8, Z
    89be:	80 80       	ld	r8, Z
    89c0:	80 80       	ld	r8, Z
    89c2:	80 80       	ld	r8, Z
    89c4:	80 80       	ld	r8, Z
    89c6:	80 80       	ld	r8, Z
    89c8:	80 80       	ld	r8, Z
    89ca:	80 80       	ld	r8, Z
    89cc:	80 80       	ld	r8, Z
    89ce:	80 80       	ld	r8, Z
    89d0:	80 80       	ld	r8, Z
    89d2:	80 80       	ld	r8, Z
    89d4:	80 80       	ld	r8, Z
    89d6:	80 80       	ld	r8, Z
    89d8:	80 80       	ld	r8, Z
    89da:	80 80       	ld	r8, Z
    89dc:	80 80       	ld	r8, Z
    89de:	80 80       	ld	r8, Z
    89e0:	80 80       	ld	r8, Z
    89e2:	80 80       	ld	r8, Z
    89e4:	80 80       	ld	r8, Z
    89e6:	80 80       	ld	r8, Z
    89e8:	80 80       	ld	r8, Z
    89ea:	80 80       	ld	r8, Z
    89ec:	80 80       	ld	r8, Z
    89ee:	80 80       	ld	r8, Z
    89f0:	80 80       	ld	r8, Z
    89f2:	80 80       	ld	r8, Z
    89f4:	80 80       	ld	r8, Z
    89f6:	80 80       	ld	r8, Z
    89f8:	80 80       	ld	r8, Z
    89fa:	80 80       	ld	r8, Z
    89fc:	80 80       	ld	r8, Z
    89fe:	80 80       	ld	r8, Z
    8a00:	7f 7f       	andi	r23, 0xFF	; 255
    8a02:	7f 7f       	andi	r23, 0xFF	; 255
    8a04:	7f 7f       	andi	r23, 0xFF	; 255
    8a06:	7f 7f       	andi	r23, 0xFF	; 255
    8a08:	7f 7f       	andi	r23, 0xFF	; 255
    8a0a:	7f 7f       	andi	r23, 0xFF	; 255
    8a0c:	7f 7f       	andi	r23, 0xFF	; 255
    8a0e:	7f 7f       	andi	r23, 0xFF	; 255
    8a10:	7f 7f       	andi	r23, 0xFF	; 255
    8a12:	7f 7f       	andi	r23, 0xFF	; 255
    8a14:	7f 7f       	andi	r23, 0xFF	; 255
    8a16:	7f 7f       	andi	r23, 0xFF	; 255
    8a18:	7f 7f       	andi	r23, 0xFF	; 255
    8a1a:	7f 7f       	andi	r23, 0xFF	; 255
    8a1c:	7f 7f       	andi	r23, 0xFF	; 255
    8a1e:	7f 7f       	andi	r23, 0xFF	; 255
    8a20:	7f 7f       	andi	r23, 0xFF	; 255
    8a22:	7f 7f       	andi	r23, 0xFF	; 255
    8a24:	7f 7f       	andi	r23, 0xFF	; 255
    8a26:	7f 7f       	andi	r23, 0xFF	; 255
    8a28:	7f 7f       	andi	r23, 0xFF	; 255
    8a2a:	7f 7f       	andi	r23, 0xFF	; 255
    8a2c:	7f 7f       	andi	r23, 0xFF	; 255
    8a2e:	7f 7f       	andi	r23, 0xFF	; 255
    8a30:	7f 7f       	andi	r23, 0xFF	; 255
    8a32:	7f 7f       	andi	r23, 0xFF	; 255
    8a34:	7f 7f       	andi	r23, 0xFF	; 255
    8a36:	7f 7f       	andi	r23, 0xFF	; 255
    8a38:	7f 7f       	andi	r23, 0xFF	; 255
    8a3a:	7f 7f       	andi	r23, 0xFF	; 255
    8a3c:	7f 7f       	andi	r23, 0xFF	; 255
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7f 7f       	andi	r23, 0xFF	; 255
    8a46:	7f 7f       	andi	r23, 0xFF	; 255
    8a48:	7f 7f       	andi	r23, 0xFF	; 255
    8a4a:	7f 7f       	andi	r23, 0xFF	; 255
    8a4c:	7f 7f       	andi	r23, 0xFF	; 255
    8a4e:	7f 7f       	andi	r23, 0xFF	; 255
    8a50:	7f 7f       	andi	r23, 0xFF	; 255
    8a52:	7f 7f       	andi	r23, 0xFF	; 255
    8a54:	7f 7f       	andi	r23, 0xFF	; 255
    8a56:	7f 7f       	andi	r23, 0xFF	; 255
    8a58:	7f 7f       	andi	r23, 0xFF	; 255
    8a5a:	7f 7f       	andi	r23, 0xFF	; 255
    8a5c:	7f 7f       	andi	r23, 0xFF	; 255
    8a5e:	7f 7f       	andi	r23, 0xFF	; 255
    8a60:	7f 7f       	andi	r23, 0xFF	; 255
    8a62:	7f 7f       	andi	r23, 0xFF	; 255
    8a64:	7f 7f       	andi	r23, 0xFF	; 255
    8a66:	7f 7f       	andi	r23, 0xFF	; 255
    8a68:	7f 7f       	andi	r23, 0xFF	; 255
    8a6a:	7f 7f       	andi	r23, 0xFF	; 255
    8a6c:	7f 7f       	andi	r23, 0xFF	; 255
    8a6e:	7f 7f       	andi	r23, 0xFF	; 255
    8a70:	7f 7f       	andi	r23, 0xFF	; 255
    8a72:	7f 7f       	andi	r23, 0xFF	; 255
    8a74:	7f 7f       	andi	r23, 0xFF	; 255
    8a76:	7f 7f       	andi	r23, 0xFF	; 255
    8a78:	7f 7f       	andi	r23, 0xFF	; 255
    8a7a:	7f 7f       	andi	r23, 0xFF	; 255
    8a7c:	7f 7f       	andi	r23, 0xFF	; 255
    8a7e:	7f 7f       	andi	r23, 0xFF	; 255
    8a80:	7f 7f       	andi	r23, 0xFF	; 255
    8a82:	7f 7f       	andi	r23, 0xFF	; 255
    8a84:	7f 7f       	andi	r23, 0xFF	; 255
    8a86:	7f 7f       	andi	r23, 0xFF	; 255
    8a88:	7f 7f       	andi	r23, 0xFF	; 255
    8a8a:	7f 7f       	andi	r23, 0xFF	; 255
    8a8c:	7f 7f       	andi	r23, 0xFF	; 255
    8a8e:	7f 7f       	andi	r23, 0xFF	; 255
    8a90:	7f 7f       	andi	r23, 0xFF	; 255
    8a92:	7f 7f       	andi	r23, 0xFF	; 255
    8a94:	7f 7f       	andi	r23, 0xFF	; 255
    8a96:	7f 7f       	andi	r23, 0xFF	; 255
    8a98:	7f 7f       	andi	r23, 0xFF	; 255
    8a9a:	7f 7f       	andi	r23, 0xFF	; 255
    8a9c:	7f 7f       	andi	r23, 0xFF	; 255
    8a9e:	7f 7f       	andi	r23, 0xFF	; 255
    8aa0:	7f 7f       	andi	r23, 0xFF	; 255
    8aa2:	7f 7f       	andi	r23, 0xFF	; 255
    8aa4:	7f 7f       	andi	r23, 0xFF	; 255
    8aa6:	7f 7f       	andi	r23, 0xFF	; 255
    8aa8:	7f 7f       	andi	r23, 0xFF	; 255
    8aaa:	7f 7f       	andi	r23, 0xFF	; 255
    8aac:	7f 7f       	andi	r23, 0xFF	; 255
    8aae:	7f 7f       	andi	r23, 0xFF	; 255
    8ab0:	7f 7f       	andi	r23, 0xFF	; 255
    8ab2:	7f 7f       	andi	r23, 0xFF	; 255
    8ab4:	7f 7f       	andi	r23, 0xFF	; 255
    8ab6:	7f 7f       	andi	r23, 0xFF	; 255
    8ab8:	7f 7f       	andi	r23, 0xFF	; 255
    8aba:	7f 7f       	andi	r23, 0xFF	; 255
    8abc:	7f 7f       	andi	r23, 0xFF	; 255
    8abe:	7f 7f       	andi	r23, 0xFF	; 255
    8ac0:	80 80       	ld	r8, Z
    8ac2:	80 80       	ld	r8, Z
    8ac4:	80 80       	ld	r8, Z
    8ac6:	80 80       	ld	r8, Z
    8ac8:	80 80       	ld	r8, Z
    8aca:	80 80       	ld	r8, Z
    8acc:	80 80       	ld	r8, Z
    8ace:	80 80       	ld	r8, Z
    8ad0:	80 80       	ld	r8, Z
    8ad2:	80 80       	ld	r8, Z
    8ad4:	80 80       	ld	r8, Z
    8ad6:	80 80       	ld	r8, Z
    8ad8:	80 80       	ld	r8, Z
    8ada:	80 80       	ld	r8, Z
    8adc:	80 80       	ld	r8, Z
    8ade:	80 80       	ld	r8, Z
    8ae0:	80 80       	ld	r8, Z
    8ae2:	80 80       	ld	r8, Z
    8ae4:	80 80       	ld	r8, Z
    8ae6:	80 80       	ld	r8, Z
    8ae8:	80 80       	ld	r8, Z
    8aea:	80 80       	ld	r8, Z
    8aec:	80 80       	ld	r8, Z
    8aee:	80 80       	ld	r8, Z
    8af0:	80 80       	ld	r8, Z
    8af2:	80 80       	ld	r8, Z
    8af4:	80 80       	ld	r8, Z
    8af6:	80 80       	ld	r8, Z
    8af8:	80 80       	ld	r8, Z
    8afa:	80 80       	ld	r8, Z
    8afc:	80 80       	ld	r8, Z
    8afe:	80 80       	ld	r8, Z
    8b00:	03 09       	sbc	r16, r3
    8b02:	13 1e       	adc	r1, r19
    8b04:	28 31       	cpi	r18, 0x18	; 24
    8b06:	3a 40       	sbci	r19, 0x0A	; 10
    8b08:	46 4c       	sbci	r20, 0xC6	; 198
    8b0a:	50 54       	subi	r21, 0x40	; 64
    8b0c:	58 5b       	subi	r21, 0xB8	; 184
    8b0e:	5e 61       	ori	r21, 0x1E	; 30
    8b10:	63 65       	ori	r22, 0x53	; 83
    8b12:	67 69       	ori	r22, 0x97	; 151
    8b14:	6b 6c       	ori	r22, 0xCB	; 203
    8b16:	6e 6f       	ori	r22, 0xFE	; 254
    8b18:	70 71       	andi	r23, 0x10	; 16
    8b1a:	72 73       	andi	r23, 0x32	; 50
    8b1c:	74 75       	andi	r23, 0x54	; 84
    8b1e:	76 77       	andi	r23, 0x76	; 118
    8b20:	77 78       	andi	r23, 0x87	; 135
    8b22:	79 79       	andi	r23, 0x99	; 153
    8b24:	7a 7a       	andi	r23, 0xAA	; 170
    8b26:	7b 7b       	andi	r23, 0xBB	; 187
    8b28:	7c 7c       	andi	r23, 0xCC	; 204
    8b2a:	7c 7d       	andi	r23, 0xDC	; 220
    8b2c:	7d 7d       	andi	r23, 0xDD	; 221
    8b2e:	7e 7e       	andi	r23, 0xEE	; 238
    8b30:	7e 7e       	andi	r23, 0xEE	; 238
    8b32:	7f 7f       	andi	r23, 0xFF	; 255
    8b34:	7f 7f       	andi	r23, 0xFF	; 255
    8b36:	7f 7f       	andi	r23, 0xFF	; 255
    8b38:	7f 7f       	andi	r23, 0xFF	; 255
    8b3a:	7f 7f       	andi	r23, 0xFF	; 255
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7f 7f       	andi	r23, 0xFF	; 255
    8b48:	7f 7f       	andi	r23, 0xFF	; 255
    8b4a:	7f 7f       	andi	r23, 0xFF	; 255
    8b4c:	7f 7e       	andi	r23, 0xEF	; 239
    8b4e:	7e 7e       	andi	r23, 0xEE	; 238
    8b50:	7e 7d       	andi	r23, 0xDE	; 222
    8b52:	7d 7d       	andi	r23, 0xDD	; 221
    8b54:	7c 7c       	andi	r23, 0xCC	; 204
    8b56:	7c 7b       	andi	r23, 0xBC	; 188
    8b58:	7b 7a       	andi	r23, 0xAB	; 171
    8b5a:	7a 79       	andi	r23, 0x9A	; 154
    8b5c:	79 78       	andi	r23, 0x89	; 137
    8b5e:	77 77       	andi	r23, 0x77	; 119
    8b60:	76 75       	andi	r23, 0x56	; 86
    8b62:	74 73       	andi	r23, 0x34	; 52
    8b64:	72 71       	andi	r23, 0x12	; 18
    8b66:	70 6f       	ori	r23, 0xF0	; 240
    8b68:	6e 6c       	ori	r22, 0xCE	; 206
    8b6a:	6b 69       	ori	r22, 0x9B	; 155
    8b6c:	67 65       	ori	r22, 0x57	; 87
    8b6e:	63 61       	ori	r22, 0x13	; 19
    8b70:	5e 5b       	subi	r21, 0xBE	; 190
    8b72:	58 54       	subi	r21, 0x48	; 72
    8b74:	50 4c       	sbci	r21, 0xC0	; 192
    8b76:	46 40       	sbci	r20, 0x06	; 6
    8b78:	3a 31       	cpi	r19, 0x1A	; 26
    8b7a:	28 1e       	adc	r2, r24
    8b7c:	13 09       	sbc	r17, r3
    8b7e:	03 00       	.word	0x0003	; ????
    8b80:	c6 cc       	rjmp	.-1652   	; 0x850e <waves+0xe>
    8b82:	d5 db       	rcall	.-2134   	; 0x832e <steptable+0x26>
    8b84:	df e3       	ldi	r29, 0x3F	; 63
    8b86:	e5 e7       	ldi	r30, 0x75	; 117
    8b88:	e9 ea       	ldi	r30, 0xA9	; 169
    8b8a:	eb ec       	ldi	r30, 0xCB	; 203
    8b8c:	ed ee       	ldi	r30, 0xED	; 237
    8b8e:	ef ef       	ldi	r30, 0xFF	; 255
    8b90:	f0 f0       	brcs	.+60     	; 0x8bce <waves+0x6ce>
    8b92:	f0 f1       	brcs	.+124    	; 0x8c10 <waves+0x710>
    8b94:	f1 f1       	breq	.+124    	; 0x8c12 <waves+0x712>
    8b96:	f1 f2       	breq	.-68     	; 0x8b54 <waves+0x654>
    8b98:	f2 f2       	brmi	.-68     	; 0x8b56 <waves+0x656>
    8b9a:	f2 f2       	brmi	.-68     	; 0x8b58 <waves+0x658>
    8b9c:	f2 f2       	brmi	.-68     	; 0x8b5a <waves+0x65a>
    8b9e:	f2 f3       	brmi	.-4      	; 0x8b9c <waves+0x69c>
    8ba0:	f3 f3       	brvs	.-4      	; 0x8b9e <waves+0x69e>
    8ba2:	f3 f3       	brvs	.-4      	; 0x8ba0 <waves+0x6a0>
    8ba4:	f3 f3       	brvs	.-4      	; 0x8ba2 <waves+0x6a2>
    8ba6:	f3 f3       	brvs	.-4      	; 0x8ba4 <waves+0x6a4>
    8ba8:	f3 f3       	brvs	.-4      	; 0x8ba6 <waves+0x6a6>
    8baa:	f3 f3       	brvs	.-4      	; 0x8ba8 <waves+0x6a8>
    8bac:	f3 f3       	brvs	.-4      	; 0x8baa <waves+0x6aa>
    8bae:	f3 f3       	brvs	.-4      	; 0x8bac <waves+0x6ac>
    8bb0:	f3 f3       	brvs	.-4      	; 0x8bae <waves+0x6ae>
    8bb2:	f3 f3       	brvs	.-4      	; 0x8bb0 <waves+0x6b0>
    8bb4:	f3 f3       	brvs	.-4      	; 0x8bb2 <waves+0x6b2>
    8bb6:	f3 f3       	brvs	.-4      	; 0x8bb4 <waves+0x6b4>
    8bb8:	f3 f3       	brvs	.-4      	; 0x8bb6 <waves+0x6b6>
    8bba:	f3 f3       	brvs	.-4      	; 0x8bb8 <waves+0x6b8>
    8bbc:	f3 f3       	brvs	.-4      	; 0x8bba <waves+0x6ba>
    8bbe:	f3 f3       	brvs	.-4      	; 0x8bbc <waves+0x6bc>
    8bc0:	f3 f3       	brvs	.-4      	; 0x8bbe <waves+0x6be>
    8bc2:	f3 f3       	brvs	.-4      	; 0x8bc0 <waves+0x6c0>
    8bc4:	f3 f3       	brvs	.-4      	; 0x8bc2 <waves+0x6c2>
    8bc6:	f3 f3       	brvs	.-4      	; 0x8bc4 <waves+0x6c4>
    8bc8:	f3 f3       	brvs	.-4      	; 0x8bc6 <waves+0x6c6>
    8bca:	f3 f3       	brvs	.-4      	; 0x8bc8 <waves+0x6c8>
    8bcc:	f3 f3       	brvs	.-4      	; 0x8bca <waves+0x6ca>
    8bce:	f3 f3       	brvs	.-4      	; 0x8bcc <waves+0x6cc>
    8bd0:	f3 f3       	brvs	.-4      	; 0x8bce <waves+0x6ce>
    8bd2:	f3 f3       	brvs	.-4      	; 0x8bd0 <waves+0x6d0>
    8bd4:	f3 f3       	brvs	.-4      	; 0x8bd2 <waves+0x6d2>
    8bd6:	f3 f3       	brvs	.-4      	; 0x8bd4 <waves+0x6d4>
    8bd8:	f3 f3       	brvs	.-4      	; 0x8bd6 <waves+0x6d6>
    8bda:	f3 f3       	brvs	.-4      	; 0x8bd8 <waves+0x6d8>
    8bdc:	f3 f3       	brvs	.-4      	; 0x8bda <waves+0x6da>
    8bde:	f3 f3       	brvs	.-4      	; 0x8bdc <waves+0x6dc>
    8be0:	f2 f2       	brmi	.-68     	; 0x8b9e <waves+0x69e>
    8be2:	f2 f2       	brmi	.-68     	; 0x8ba0 <waves+0x6a0>
    8be4:	f2 f2       	brmi	.-68     	; 0x8ba2 <waves+0x6a2>
    8be6:	f2 f2       	brmi	.-68     	; 0x8ba4 <waves+0x6a4>
    8be8:	f1 f1       	breq	.+124    	; 0x8c66 <waves+0x766>
    8bea:	f1 f1       	breq	.+124    	; 0x8c68 <waves+0x768>
    8bec:	f0 f0       	brcs	.+60     	; 0x8c2a <waves+0x72a>
    8bee:	f0 ef       	ldi	r31, 0xF0	; 240
    8bf0:	ef ee       	ldi	r30, 0xEF	; 239
    8bf2:	ed ec       	ldi	r30, 0xCD	; 205
    8bf4:	eb ea       	ldi	r30, 0xAB	; 171
    8bf6:	e9 e7       	ldi	r30, 0x79	; 121
    8bf8:	e5 e3       	ldi	r30, 0x35	; 53
    8bfa:	df db       	rcall	.-2114   	; 0x83ba <steptable+0xb2>
    8bfc:	d5 cc       	rjmp	.-1622   	; 0x85a8 <waves+0xa8>
    8bfe:	c6 00       	.word	0x00c6	; ????
    8c00:	00 28       	or	r0, r0
    8c02:	3d 42       	sbci	r19, 0x2D	; 45
    8c04:	30 2d       	mov	r19, r0
    8c06:	2c 2b       	or	r18, r28
    8c08:	2c 2d       	mov	r18, r12
    8c0a:	2e 2f       	mov	r18, r30
    8c0c:	30 32       	cpi	r19, 0x20	; 32
    8c0e:	33 35       	cpi	r19, 0x53	; 83
    8c10:	37 39       	cpi	r19, 0x97	; 151
    8c12:	3b 3d       	cpi	r19, 0xDB	; 219
    8c14:	3f 41       	sbci	r19, 0x1F	; 31
    8c16:	43 45       	sbci	r20, 0x53	; 83
    8c18:	48 4a       	sbci	r20, 0xA8	; 168
    8c1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8c1c:	50 53       	subi	r21, 0x30	; 48
    8c1e:	55 57       	subi	r21, 0x75	; 117
    8c20:	59 5b       	subi	r21, 0xB9	; 185
    8c22:	5d 5f       	subi	r21, 0xFD	; 253
    8c24:	61 63       	ori	r22, 0x31	; 49
    8c26:	65 67       	ori	r22, 0x75	; 117
    8c28:	69 6b       	ori	r22, 0xB9	; 185
    8c2a:	6c 6e       	ori	r22, 0xEC	; 236
    8c2c:	70 71       	andi	r23, 0x10	; 16
    8c2e:	73 74       	andi	r23, 0x43	; 67
    8c30:	75 77       	andi	r23, 0x75	; 117
    8c32:	78 79       	andi	r23, 0x98	; 152
    8c34:	7a 7b       	andi	r23, 0xBA	; 186
    8c36:	7c 7d       	andi	r23, 0xDC	; 220
    8c38:	7d 7e       	andi	r23, 0xED	; 237
    8c3a:	7e 7f       	andi	r23, 0xFE	; 254
    8c3c:	7f 7f       	andi	r23, 0xFF	; 255
    8c3e:	7f 7f       	andi	r23, 0xFF	; 255
    8c40:	7f 7f       	andi	r23, 0xFF	; 255
    8c42:	7f 7f       	andi	r23, 0xFF	; 255
    8c44:	7f 7f       	andi	r23, 0xFF	; 255
    8c46:	7e 7e       	andi	r23, 0xEE	; 238
    8c48:	7d 7d       	andi	r23, 0xDD	; 221
    8c4a:	7c 7b       	andi	r23, 0xBC	; 188
    8c4c:	7a 79       	andi	r23, 0x9A	; 154
    8c4e:	78 77       	andi	r23, 0x78	; 120
    8c50:	75 74       	andi	r23, 0x45	; 69
    8c52:	73 71       	andi	r23, 0x13	; 19
    8c54:	70 6e       	ori	r23, 0xE0	; 224
    8c56:	6c 6b       	ori	r22, 0xBC	; 188
    8c58:	69 67       	ori	r22, 0x79	; 121
    8c5a:	65 63       	ori	r22, 0x35	; 53
    8c5c:	61 5f       	subi	r22, 0xF1	; 241
    8c5e:	5d 5b       	subi	r21, 0xBD	; 189
    8c60:	59 57       	subi	r21, 0x79	; 121
    8c62:	55 53       	subi	r21, 0x35	; 53
    8c64:	50 4e       	sbci	r21, 0xE0	; 224
    8c66:	4c 4a       	sbci	r20, 0xAC	; 172
    8c68:	48 45       	sbci	r20, 0x58	; 88
    8c6a:	43 41       	sbci	r20, 0x13	; 19
    8c6c:	3f 3d       	cpi	r19, 0xDF	; 223
    8c6e:	3b 39       	cpi	r19, 0x9B	; 155
    8c70:	37 35       	cpi	r19, 0x57	; 87
    8c72:	33 32       	cpi	r19, 0x23	; 35
    8c74:	30 2f       	mov	r19, r16
    8c76:	2e 2d       	mov	r18, r14
    8c78:	2c 2b       	or	r18, r28
    8c7a:	2c 2d       	mov	r18, r12
    8c7c:	30 42       	sbci	r19, 0x20	; 32
    8c7e:	3d 28       	or	r3, r13
    8c80:	00 e9       	ldi	r16, 0x90	; 144
    8c82:	e5 fe       	sbrs	r14, 5
    8c84:	d4 d7       	rcall	.+4008   	; 0x9c2e <init_scope_animation+0x10>
    8c86:	d7 d7       	rcall	.+4014   	; 0x9c36 <init_scope_animation+0x18>
    8c88:	d6 d4       	rcall	.+2476   	; 0x9636 <wifiRequestP+0x22>
    8c8a:	d2 d0       	rcall	.+420    	; 0x8e30 <waves+0x930>
    8c8c:	ce cc       	rjmp	.-1636   	; 0x862a <waves+0x12a>
    8c8e:	ca c8       	rjmp	.-3692   	; 0x7e24 <ProcessMusic+0xb2>
    8c90:	c6 c3       	rjmp	.+1932   	; 0x941e <wifiSendP+0x1a>
    8c92:	c1 bf       	out	0x31, r28	; 49
    8c94:	bd ba       	out	0x1d, r11	; 29
    8c96:	b8 b6       	in	r11, 0x38	; 56
    8c98:	b4 b1       	in	r27, 0x04	; 4
    8c9a:	af ad       	ldd	r26, Y+63	; 0x3f
    8c9c:	ab a9       	ldd	r26, Y+51	; 0x33
    8c9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8ca0:	a3 a1       	ldd	r26, Z+35	; 0x23
    8ca2:	9f 9e       	mul	r9, r31
    8ca4:	9c 9a       	sbi	0x13, 4	; 19
    8ca6:	99 97       	sbiw	r26, 0x29	; 41
    8ca8:	95 94       	asr	r9
    8caa:	93 91       	.word	0x9193	; ????
    8cac:	90 8f       	std	Z+24, r25	; 0x18
    8cae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8cb0:	8b 8a       	std	Y+19, r8	; 0x13
    8cb2:	89 88       	ldd	r8, Y+17	; 0x11
    8cb4:	88 87       	std	Y+8, r24	; 0x08
    8cb6:	86 85       	ldd	r24, Z+14	; 0x0e
    8cb8:	85 84       	ldd	r8, Z+13	; 0x0d
    8cba:	84 84       	ldd	r8, Z+12	; 0x0c
    8cbc:	83 83       	std	Z+3, r24	; 0x03
    8cbe:	83 83       	std	Z+3, r24	; 0x03
    8cc0:	83 83       	std	Z+3, r24	; 0x03
    8cc2:	83 83       	std	Z+3, r24	; 0x03
    8cc4:	83 84       	ldd	r8, Z+11	; 0x0b
    8cc6:	84 84       	ldd	r8, Z+12	; 0x0c
    8cc8:	85 85       	ldd	r24, Z+13	; 0x0d
    8cca:	86 87       	std	Z+14, r24	; 0x0e
    8ccc:	88 88       	ldd	r8, Y+16	; 0x10
    8cce:	89 8a       	std	Y+17, r8	; 0x11
    8cd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8cd2:	8d 8f       	std	Y+29, r24	; 0x1d
    8cd4:	90 91 93 94 	lds	r25, 0x9493
    8cd8:	95 97       	sbiw	r26, 0x25	; 37
    8cda:	99 9a       	sbi	0x13, 1	; 19
    8cdc:	9c 9e       	mul	r9, r28
    8cde:	9f a1       	ldd	r25, Y+39	; 0x27
    8ce0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    8ce2:	a7 a9       	ldd	r26, Z+55	; 0x37
    8ce4:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ce6:	af b1       	in	r26, 0x0f	; 15
    8ce8:	b4 b6       	in	r11, 0x34	; 52
    8cea:	b8 ba       	out	0x18, r11	; 24
    8cec:	bd bf       	out	0x3d, r27	; 61
    8cee:	c1 c3       	rjmp	.+1922   	; 0x9472 <wifiSend+0x2e>
    8cf0:	c6 c8       	rjmp	.-3700   	; 0x7e7e <ProcessMusic+0x10c>
    8cf2:	ca cc       	rjmp	.-1644   	; 0x8688 <waves+0x188>
    8cf4:	ce d0       	rcall	.+412    	; 0x8e92 <waves+0x992>
    8cf6:	d2 d4       	rcall	.+2468   	; 0x969c <wifiHWResetLow+0x2>
    8cf8:	d6 d7       	rcall	.+4012   	; 0x9ca6 <init_shot_state+0x30>
    8cfa:	d7 d7       	rcall	.+4014   	; 0x9caa <set_shot_animations>
    8cfc:	d4 fe       	sbrs	r13, 4
    8cfe:	e5 e9       	ldi	r30, 0x95	; 149
    8d00:	f9 f8       	.word	0xf8f9	; ????
    8d02:	f9 f5       	brne	.+126    	; 0x8d82 <waves+0x882>
    8d04:	eb e1       	ldi	r30, 0x1B	; 27
    8d06:	dd de       	rcall	.-582    	; 0x8ac2 <waves+0x5c2>
    8d08:	e0 e2       	ldi	r30, 0x20	; 32
    8d0a:	e4 e5       	ldi	r30, 0x54	; 84
    8d0c:	e6 e5       	ldi	r30, 0x56	; 86
    8d0e:	e4 e2       	ldi	r30, 0x24	; 36
    8d10:	de d9       	rcall	.-3140   	; 0x80ce <ProcessMusic+0x35c>
    8d12:	d2 ca       	rjmp	.-2652   	; 0x82b8 <esmw+0x9e>
    8d14:	c1 b7       	in	r28, 0x31	; 49
    8d16:	ac a2       	std	Y+36, r10	; 0x24
    8d18:	99 91       	ld	r25, Y+
    8d1a:	8a 86       	std	Y+10, r8	; 0x0a
    8d1c:	83 81       	ldd	r24, Z+3	; 0x03
    8d1e:	80 80       	ld	r8, Z
    8d20:	81 82       	std	Z+1, r8	; 0x01
    8d22:	83 85       	ldd	r24, Z+11	; 0x0b
    8d24:	86 88       	ldd	r8, Z+22	; 0x16
    8d26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8d28:	8d 8f       	std	Y+29, r24	; 0x1d
    8d2a:	90 92 93 95 	sts	0x9593, r9
    8d2e:	96 97       	sbiw	r26, 0x26	; 38
    8d30:	98 99       	sbic	0x13, 0	; 19
    8d32:	9a 9b       	sbis	0x13, 2	; 19
    8d34:	9b 9c       	mul	r9, r11
    8d36:	9d 9d       	mul	r25, r13
    8d38:	9d 9e       	mul	r9, r29
    8d3a:	9e 9e       	mul	r9, r30
    8d3c:	9f 9f       	mul	r25, r31
    8d3e:	9f 9f       	mul	r25, r31
    8d40:	9f 9f       	mul	r25, r31
    8d42:	9f 9e       	mul	r9, r31
    8d44:	9e 9e       	mul	r9, r30
    8d46:	9d 9d       	mul	r25, r13
    8d48:	9d 9c       	mul	r9, r13
    8d4a:	9b 9b       	sbis	0x13, 3	; 19
    8d4c:	9a 99       	sbic	0x13, 2	; 19
    8d4e:	98 97       	sbiw	r26, 0x28	; 40
    8d50:	96 95       	lsr	r25
    8d52:	93 92       	.word	0x9293	; ????
    8d54:	90 8f       	std	Z+24, r25	; 0x18
    8d56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8d58:	8a 88       	ldd	r8, Y+18	; 0x12
    8d5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8d5c:	83 82       	std	Z+3, r8	; 0x03
    8d5e:	81 80       	ldd	r8, Z+1	; 0x01
    8d60:	80 81       	ld	r24, Z
    8d62:	83 86       	std	Z+11, r8	; 0x0b
    8d64:	8a 91       	ld	r24, -Y
    8d66:	99 a2       	std	Y+33, r9	; 0x21
    8d68:	ac b7       	in	r26, 0x3c	; 60
    8d6a:	c1 ca       	rjmp	.-2686   	; 0x82ee <esmw+0xd4>
    8d6c:	d2 d9       	rcall	.-3164   	; 0x8112 <ProcessMusic+0x3a0>
    8d6e:	de e2       	ldi	r29, 0x2E	; 46
    8d70:	e4 e5       	ldi	r30, 0x54	; 84
    8d72:	e6 e5       	ldi	r30, 0x56	; 86
    8d74:	e4 e2       	ldi	r30, 0x24	; 36
    8d76:	e0 de       	rcall	.-576    	; 0x8b38 <waves+0x638>
    8d78:	dd e1       	ldi	r29, 0x1D	; 29
    8d7a:	eb f5       	brvc	.+122    	; 0x8df6 <waves+0x8f6>
    8d7c:	f9 f8       	.word	0xf8f9	; ????
    8d7e:	f9 00       	.word	0x00f9	; ????
    8d80:	07 08       	sbc	r0, r7
    8d82:	07 0b       	sbc	r16, r23
    8d84:	15 1f       	adc	r17, r21
    8d86:	23 22       	and	r2, r19
    8d88:	20 1e       	adc	r2, r16
    8d8a:	1c 1b       	sub	r17, r28
    8d8c:	1a 1b       	sub	r17, r26
    8d8e:	1c 1e       	adc	r1, r28
    8d90:	22 27       	eor	r18, r18
    8d92:	2e 36       	cpi	r18, 0x6E	; 110
    8d94:	3f 49       	sbci	r19, 0x9F	; 159
    8d96:	54 5e       	subi	r21, 0xE4	; 228
    8d98:	67 6f       	ori	r22, 0xF7	; 247
    8d9a:	76 7a       	andi	r23, 0xA6	; 166
    8d9c:	7e 7f       	andi	r23, 0xFE	; 254
    8d9e:	7f 7f       	andi	r23, 0xFF	; 255
    8da0:	7f 7e       	andi	r23, 0xEF	; 239
    8da2:	7d 7b       	andi	r23, 0xBD	; 189
    8da4:	7a 78       	andi	r23, 0x8A	; 138
    8da6:	76 74       	andi	r23, 0x46	; 70
    8da8:	73 71       	andi	r23, 0x13	; 19
    8daa:	70 6e       	ori	r23, 0xE0	; 224
    8dac:	6d 6b       	ori	r22, 0xBD	; 189
    8dae:	6a 69       	ori	r22, 0x9A	; 154
    8db0:	68 67       	ori	r22, 0x78	; 120
    8db2:	66 65       	ori	r22, 0x56	; 86
    8db4:	65 64       	ori	r22, 0x45	; 69
    8db6:	64 63       	ori	r22, 0x34	; 52
    8db8:	63 62       	ori	r22, 0x23	; 35
    8dba:	62 62       	ori	r22, 0x22	; 34
    8dbc:	61 61       	ori	r22, 0x11	; 17
    8dbe:	61 61       	ori	r22, 0x11	; 17
    8dc0:	61 61       	ori	r22, 0x11	; 17
    8dc2:	61 62       	ori	r22, 0x21	; 33
    8dc4:	62 62       	ori	r22, 0x22	; 34
    8dc6:	63 63       	ori	r22, 0x33	; 51
    8dc8:	63 64       	ori	r22, 0x43	; 67
    8dca:	65 65       	ori	r22, 0x55	; 85
    8dcc:	66 67       	ori	r22, 0x76	; 118
    8dce:	68 69       	ori	r22, 0x98	; 152
    8dd0:	6a 6b       	ori	r22, 0xBA	; 186
    8dd2:	6d 6e       	ori	r22, 0xED	; 237
    8dd4:	70 71       	andi	r23, 0x10	; 16
    8dd6:	73 74       	andi	r23, 0x43	; 67
    8dd8:	76 78       	andi	r23, 0x86	; 134
    8dda:	7a 7b       	andi	r23, 0xBA	; 186
    8ddc:	7d 7e       	andi	r23, 0xED	; 237
    8dde:	7f 7f       	andi	r23, 0xFF	; 255
    8de0:	7f 7f       	andi	r23, 0xFF	; 255
    8de2:	7e 7a       	andi	r23, 0xAE	; 174
    8de4:	76 6f       	ori	r23, 0xF6	; 246
    8de6:	67 5e       	subi	r22, 0xE7	; 231
    8de8:	54 49       	sbci	r21, 0x94	; 148
    8dea:	3f 36       	cpi	r19, 0x6F	; 111
    8dec:	2e 27       	eor	r18, r30
    8dee:	22 1e       	adc	r2, r18
    8df0:	1c 1b       	sub	r17, r28
    8df2:	1a 1b       	sub	r17, r26
    8df4:	1c 1e       	adc	r1, r28
    8df6:	20 22       	and	r2, r16
    8df8:	23 1f       	adc	r18, r19
    8dfa:	15 0b       	sbc	r17, r21
    8dfc:	07 08       	sbc	r0, r7
    8dfe:	07 00       	.word	0x0007	; ????
    8e00:	1f 31       	cpi	r17, 0x1F	; 31
    8e02:	3d 44       	sbci	r19, 0x4D	; 77
    8e04:	4e 53       	subi	r20, 0x3E	; 62
    8e06:	54 56       	subi	r21, 0x64	; 100
    8e08:	5a 5f       	subi	r21, 0xFA	; 250
    8e0a:	64 69       	ori	r22, 0x94	; 148
    8e0c:	6e 74       	andi	r22, 0x4E	; 78
    8e0e:	76 79       	andi	r23, 0x96	; 150
    8e10:	7c 7f       	andi	r23, 0xFC	; 252
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	7f 7f       	andi	r23, 0xFF	; 255
    8e42:	7f 7f       	andi	r23, 0xFF	; 255
    8e44:	7f 7f       	andi	r23, 0xFF	; 255
    8e46:	7f 7f       	andi	r23, 0xFF	; 255
    8e48:	7f 7f       	andi	r23, 0xFF	; 255
    8e4a:	7f 7f       	andi	r23, 0xFF	; 255
    8e4c:	7f 7f       	andi	r23, 0xFF	; 255
    8e4e:	7f 7f       	andi	r23, 0xFF	; 255
    8e50:	7f 7f       	andi	r23, 0xFF	; 255
    8e52:	7f 7f       	andi	r23, 0xFF	; 255
    8e54:	7f 7f       	andi	r23, 0xFF	; 255
    8e56:	7f 7f       	andi	r23, 0xFF	; 255
    8e58:	7f 7f       	andi	r23, 0xFF	; 255
    8e5a:	7f 7f       	andi	r23, 0xFF	; 255
    8e5c:	7f 7f       	andi	r23, 0xFF	; 255
    8e5e:	7f 7f       	andi	r23, 0xFF	; 255
    8e60:	7f 7f       	andi	r23, 0xFF	; 255
    8e62:	7f 7f       	andi	r23, 0xFF	; 255
    8e64:	7f 7f       	andi	r23, 0xFF	; 255
    8e66:	7f 7f       	andi	r23, 0xFF	; 255
    8e68:	7f 7f       	andi	r23, 0xFF	; 255
    8e6a:	7f 7f       	andi	r23, 0xFF	; 255
    8e6c:	7f 7f       	andi	r23, 0xFF	; 255
    8e6e:	7f 7f       	andi	r23, 0xFF	; 255
    8e70:	7f 7f       	andi	r23, 0xFF	; 255
    8e72:	7f 7f       	andi	r23, 0xFF	; 255
    8e74:	7f 7f       	andi	r23, 0xFF	; 255
    8e76:	7f 7f       	andi	r23, 0xFF	; 255
    8e78:	7f 7f       	andi	r23, 0xFF	; 255
    8e7a:	7f 7c       	andi	r23, 0xCF	; 207
    8e7c:	78 71       	andi	r23, 0x18	; 24
    8e7e:	68 4c       	sbci	r22, 0xC8	; 200
    8e80:	2c 1c       	adc	r2, r12
    8e82:	12 0c       	add	r1, r2
    8e84:	0a 0b       	sbc	r16, r26
    8e86:	0a 05       	cpc	r16, r10
    8e88:	fd f3       	brhs	.-2      	; 0x8e88 <waves+0x988>
    8e8a:	e9 df       	rcall	.-46     	; 0x8e5e <waves+0x95e>
    8e8c:	d4 ca       	rjmp	.-2648   	; 0x8436 <steptable+0x12e>
    8e8e:	c0 b7       	in	r28, 0x30	; 48
    8e90:	ae a6       	std	Y+46, r10	; 0x2e
    8e92:	9e 97       	sbiw	r26, 0x2e	; 46
    8e94:	91 8b       	std	Z+17, r25	; 0x11
    8e96:	86 85       	ldd	r24, Z+14	; 0x0e
    8e98:	82 80       	ldd	r8, Z+2	; 0x02
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 87       	std	Z+8, r24	; 0x08
    8ef6:	91 9d       	mul	r25, r1
    8ef8:	ac c4       	rjmp	.+2392   	; 0x9852 <LBGetJoyPadState+0x6e>
    8efa:	cb d4       	rcall	.+2454   	; 0x9892 <LBPrintStr+0x18>
    8efc:	dd f2       	brhs	.-74     	; 0x8eb4 <waves+0x9b4>
    8efe:	fa fa       	.word	0xfafa	; ????

00008f00 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    8f00:	2f 92       	push	r2
    8f02:	3f 92       	push	r3
    8f04:	4f 92       	push	r4
    8f06:	5f 92       	push	r5
    8f08:	6f 92       	push	r6
    8f0a:	7f 92       	push	r7
    8f0c:	8f 92       	push	r8
    8f0e:	9f 92       	push	r9
    8f10:	af 92       	push	r10
    8f12:	bf 92       	push	r11
    8f14:	cf 92       	push	r12
    8f16:	df 92       	push	r13
    8f18:	ef 92       	push	r14
    8f1a:	ff 92       	push	r15
    8f1c:	0f 93       	push	r16
    8f1e:	1f 93       	push	r17
    8f20:	cf 93       	push	r28
    8f22:	df 93       	push	r29
    8f24:	00 d0       	rcall	.+0      	; 0x8f26 <ProcessSprites+0x26>
    8f26:	00 d0       	rcall	.+0      	; 0x8f28 <ProcessSprites+0x28>
    8f28:	00 d0       	rcall	.+0      	; 0x8f2a <ProcessSprites+0x2a>
    8f2a:	cd b7       	in	r28, 0x3d	; 61
    8f2c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    8f2e:	80 91 00 01 	lds	r24, 0x0100
    8f32:	88 23       	and	r24, r24
    8f34:	09 f4       	brne	.+2      	; 0x8f38 <ProcessSprites+0x38>
    8f36:	cb c0       	rjmp	.+406    	; 0x90ce <ProcessSprites+0x1ce>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    8f38:	80 91 51 0a 	lds	r24, 0x0A51
    8f3c:	80 93 50 0a 	sts	0x0A50, r24
	free_tile_index = user_ram_tiles_c;
    8f40:	80 93 4f 0a 	sts	0x0A4F, r24
    8f44:	00 e0       	ldi	r16, 0x00	; 0
    8f46:	10 e0       	ldi	r17, 0x00	; 0
    8f48:	f8 01       	movw	r30, r16
    8f4a:	e8 55       	subi	r30, 0x58	; 88
    8f4c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    8f4e:	81 81       	ldd	r24, Z+1	; 0x01
    8f50:	90 81       	ld	r25, Z
    8f52:	32 81       	ldd	r19, Z+2	; 0x02
    8f54:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    8f56:	28 e0       	ldi	r18, 0x08	; 8
    8f58:	29 0f       	add	r18, r25
    8f5a:	26 95       	lsr	r18
    8f5c:	26 95       	lsr	r18
    8f5e:	26 95       	lsr	r18
    8f60:	33 24       	eor	r3, r3
    8f62:	3a 94       	dec	r3
    8f64:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    8f66:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    8f68:	19 f0       	breq	.+6      	; 0x8f70 <ProcessSprites+0x70>
    8f6a:	e2 e0       	ldi	r30, 0x02	; 2
    8f6c:	2e 2e       	mov	r2, r30
    8f6e:	02 c0       	rjmp	.+4      	; 0x8f74 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    8f70:	22 24       	eor	r2, r2
    8f72:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    8f74:	28 e0       	ldi	r18, 0x08	; 8
    8f76:	28 0f       	add	r18, r24
    8f78:	52 2e       	mov	r5, r18
    8f7a:	56 94       	lsr	r5
    8f7c:	56 94       	lsr	r5
    8f7e:	56 94       	lsr	r5
    8f80:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    8f82:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    8f84:	19 f0       	breq	.+6      	; 0x8f8c <ProcessSprites+0x8c>
    8f86:	22 e0       	ldi	r18, 0x02	; 2
    8f88:	29 83       	std	Y+1, r18	; 0x01
    8f8a:	02 c0       	rjmp	.+4      	; 0x8f90 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    8f8c:	e1 e0       	ldi	r30, 0x01	; 1
    8f8e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    8f90:	68 2e       	mov	r6, r24
    8f92:	71 2c       	mov	r7, r1
    8f94:	76 2c       	mov	r7, r6
    8f96:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8f98:	69 0e       	add	r6, r25
    8f9a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    8f9c:	50 e0       	ldi	r21, 0x00	; 0
    8f9e:	54 2f       	mov	r21, r20
    8fa0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    8fa2:	ca 01       	movw	r24, r20
    8fa4:	83 0f       	add	r24, r19
    8fa6:	91 1d       	adc	r25, r1
    8fa8:	9b 83       	std	Y+3, r25	; 0x03
    8faa:	8a 83       	std	Y+2, r24	; 0x02
    8fac:	e1 2c       	mov	r14, r1
    8fae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8fb0:	9e e1       	ldi	r25, 0x1E	; 30
    8fb2:	59 9e       	mul	r5, r25
    8fb4:	50 01       	movw	r10, r0
    8fb6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    8fb8:	9e 2c       	mov	r9, r14
    8fba:	88 24       	eor	r8, r8
    8fbc:	43 2c       	mov	r4, r3
    8fbe:	c1 2c       	mov	r12, r1
    8fc0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    8fc2:	ed e1       	ldi	r30, 0x1D	; 29
    8fc4:	e4 15       	cp	r30, r4
    8fc6:	08 f4       	brcc	.+2      	; 0x8fca <ProcessSprites+0xca>
    8fc8:	53 c0       	rjmp	.+166    	; 0x9070 <ProcessSprites+0x170>
    8fca:	fb e1       	ldi	r31, 0x1B	; 27
    8fcc:	f5 15       	cp	r31, r5
    8fce:	08 f4       	brcc	.+2      	; 0x8fd2 <ProcessSprites+0xd2>
    8fd0:	4f c0       	rjmp	.+158    	; 0x9070 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    8fd2:	c5 01       	movw	r24, r10
    8fd4:	84 0d       	add	r24, r4
    8fd6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    8fd8:	9c 01       	movw	r18, r24
    8fda:	20 5a       	subi	r18, 0xA0	; 160
    8fdc:	3e 4f       	sbci	r19, 0xFE	; 254
    8fde:	3e 83       	std	Y+6, r19	; 0x06
    8fe0:	2d 83       	std	Y+5, r18	; 0x05
    8fe2:	f9 01       	movw	r30, r18
    8fe4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    8fe6:	81 e0       	ldi	r24, 0x01	; 1
    8fe8:	95 31       	cpi	r25, 0x15	; 21
    8fea:	08 f4       	brcc	.+2      	; 0x8fee <ProcessSprites+0xee>
    8fec:	80 e0       	ldi	r24, 0x00	; 0
    8fee:	21 e0       	ldi	r18, 0x01	; 1
    8ff0:	30 91 50 0a 	lds	r19, 0x0A50
    8ff4:	93 17       	cp	r25, r19
    8ff6:	18 f0       	brcs	.+6      	; 0x8ffe <ProcessSprites+0xfe>
    8ff8:	20 e0       	ldi	r18, 0x00	; 0
    8ffa:	88 23       	and	r24, r24
    8ffc:	61 f1       	breq	.+88     	; 0x9056 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    8ffe:	60 91 4f 0a 	lds	r22, 0x0A4F
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    9002:	65 31       	cpi	r22, 0x15	; 21
    9004:	30 f5       	brcc	.+76     	; 0x9052 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    9006:	88 23       	and	r24, r24
    9008:	31 f0       	breq	.+12     	; 0x9016 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    900a:	8b ee       	ldi	r24, 0xEB	; 235
    900c:	89 0f       	add	r24, r25
    900e:	9c 83       	std	Y+4, r25	; 0x04
    9010:	0e 94 2a 37 	call	0x6e54	; 0x6e54 <CopyFlashTile>
    9014:	06 c0       	rjmp	.+12     	; 0x9022 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    9016:	22 23       	and	r18, r18
    9018:	29 f0       	breq	.+10     	; 0x9024 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    901a:	89 2f       	mov	r24, r25
    901c:	9c 83       	std	Y+4, r25	; 0x04
    901e:	0e 94 b9 37 	call	0x6f72	; 0x6f72 <CopyRamTile>
    9022:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    9024:	80 91 4f 0a 	lds	r24, 0x0A4F
    9028:	e8 2f       	mov	r30, r24
    902a:	f0 e0       	ldi	r31, 0x00	; 0
    902c:	9f 01       	movw	r18, r30
    902e:	22 0f       	add	r18, r18
    9030:	33 1f       	adc	r19, r19
    9032:	e2 0f       	add	r30, r18
    9034:	f3 1f       	adc	r31, r19
    9036:	e0 5f       	subi	r30, 0xF0	; 240
    9038:	f5 4f       	sbci	r31, 0xF5	; 245
    903a:	2d 81       	ldd	r18, Y+5	; 0x05
    903c:	3e 81       	ldd	r19, Y+6	; 0x06
    903e:	31 83       	std	Z+1, r19	; 0x01
    9040:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    9042:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    9044:	f9 01       	movw	r30, r18
    9046:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    9048:	91 e0       	ldi	r25, 0x01	; 1
    904a:	98 0f       	add	r25, r24
    904c:	90 93 4f 0a 	sts	0x0A4F, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    9050:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    9052:	95 31       	cpi	r25, 0x15	; 21
    9054:	68 f4       	brcc	.+26     	; 0x9070 <ProcessSprites+0x170>
    9056:	80 91 50 0a 	lds	r24, 0x0A50
    905a:	98 17       	cp	r25, r24
    905c:	48 f0       	brcs	.+18     	; 0x9070 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    905e:	93 01       	movw	r18, r6
    9060:	a6 01       	movw	r20, r12
    9062:	48 0d       	add	r20, r8
    9064:	59 1d       	adc	r21, r9
    9066:	6a 81       	ldd	r22, Y+2	; 0x02
    9068:	7b 81       	ldd	r23, Y+3	; 0x03
    906a:	89 2f       	mov	r24, r25
    906c:	0e 94 59 38 	call	0x70b2	; 0x70b2 <BlitSpritePart>
    9070:	ff ef       	ldi	r31, 0xFF	; 255
    9072:	cf 1a       	sub	r12, r31
    9074:	df 0a       	sbc	r13, r31
    9076:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    9078:	c2 14       	cp	r12, r2
    907a:	08 f4       	brcc	.+2      	; 0x907e <ProcessSprites+0x17e>
    907c:	a2 cf       	rjmp	.-188    	; 0x8fc2 <ProcessSprites+0xc2>
    907e:	2f ef       	ldi	r18, 0xFF	; 255
    9080:	e2 1a       	sub	r14, r18
    9082:	f2 0a       	sbc	r15, r18
    9084:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9086:	99 81       	ldd	r25, Y+1	; 0x01
    9088:	e9 16       	cp	r14, r25
    908a:	08 f4       	brcc	.+2      	; 0x908e <ProcessSprites+0x18e>
    908c:	91 cf       	rjmp	.-222    	; 0x8fb0 <ProcessSprites+0xb0>
    908e:	0c 5f       	subi	r16, 0xFC	; 252
    9090:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9092:	08 32       	cpi	r16, 0x28	; 40
    9094:	11 05       	cpc	r17, r1
    9096:	09 f0       	breq	.+2      	; 0x909a <ProcessSprites+0x19a>
    9098:	57 cf       	rjmp	.-338    	; 0x8f48 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    909a:	26 96       	adiw	r28, 0x06	; 6
    909c:	0f b6       	in	r0, 0x3f	; 63
    909e:	f8 94       	cli
    90a0:	de bf       	out	0x3e, r29	; 62
    90a2:	0f be       	out	0x3f, r0	; 63
    90a4:	cd bf       	out	0x3d, r28	; 61
    90a6:	df 91       	pop	r29
    90a8:	cf 91       	pop	r28
    90aa:	1f 91       	pop	r17
    90ac:	0f 91       	pop	r16
    90ae:	ff 90       	pop	r15
    90b0:	ef 90       	pop	r14
    90b2:	df 90       	pop	r13
    90b4:	cf 90       	pop	r12
    90b6:	bf 90       	pop	r11
    90b8:	af 90       	pop	r10
    90ba:	9f 90       	pop	r9
    90bc:	8f 90       	pop	r8
    90be:	7f 90       	pop	r7
    90c0:	6f 90       	pop	r6
    90c2:	5f 90       	pop	r5
    90c4:	4f 90       	pop	r4
    90c6:	3f 90       	pop	r3
    90c8:	2f 90       	pop	r2
	}

	/* restore BG tiles */

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
    90ca:	0c 94 46 38 	jmp	0x708c	; 0x708c <RestoreBackground>
	#endif

}
    90ce:	26 96       	adiw	r28, 0x06	; 6
    90d0:	0f b6       	in	r0, 0x3f	; 63
    90d2:	f8 94       	cli
    90d4:	de bf       	out	0x3e, r29	; 62
    90d6:	0f be       	out	0x3f, r0	; 63
    90d8:	cd bf       	out	0x3d, r28	; 61
    90da:	df 91       	pop	r29
    90dc:	cf 91       	pop	r28
    90de:	1f 91       	pop	r17
    90e0:	0f 91       	pop	r16
    90e2:	ff 90       	pop	r15
    90e4:	ef 90       	pop	r14
    90e6:	df 90       	pop	r13
    90e8:	cf 90       	pop	r12
    90ea:	bf 90       	pop	r11
    90ec:	af 90       	pop	r10
    90ee:	9f 90       	pop	r9
    90f0:	8f 90       	pop	r8
    90f2:	7f 90       	pop	r7
    90f4:	6f 90       	pop	r6
    90f6:	5f 90       	pop	r5
    90f8:	4f 90       	pop	r4
    90fa:	3f 90       	pop	r3
    90fc:	2f 90       	pop	r2
    90fe:	08 95       	ret

00009100 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    9100:	df 92       	push	r13
    9102:	ef 92       	push	r14
    9104:	ff 92       	push	r15
    9106:	0f 93       	push	r16
    9108:	1f 93       	push	r17
    910a:	cf 93       	push	r28
    910c:	df 93       	push	r29
    910e:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    9110:	fb 01       	movw	r30, r22
    9112:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    9114:	31 96       	adiw	r30, 0x01	; 1
    9116:	64 91       	lpm	r22, Z
    9118:	5f ef       	ldi	r21, 0xFF	; 255
    911a:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    911c:	24 2f       	mov	r18, r20
    911e:	21 70       	andi	r18, 0x01	; 1
    9120:	40 ff       	sbrs	r20, 0
    9122:	04 c0       	rjmp	.+8      	; 0x912c <MapSprite2+0x2c>
			x=(mapWidth-1);
    9124:	95 2f       	mov	r25, r21
			dx=-1;
    9126:	ff 24       	eor	r15, r15
    9128:	fa 94       	dec	r15
    912a:	03 c0       	rjmp	.+6      	; 0x9132 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    912c:	ff 24       	eor	r15, r15
    912e:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9130:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9132:	41 ff       	sbrs	r20, 1
    9134:	05 c0       	rjmp	.+10     	; 0x9140 <MapSprite2+0x40>
			y=(mapHeight-1);
    9136:	7f ef       	ldi	r23, 0xFF	; 255
    9138:	76 0f       	add	r23, r22
			dy=-1;
    913a:	ee 24       	eor	r14, r14
    913c:	ea 94       	dec	r14
    913e:	03 c0       	rjmp	.+6      	; 0x9146 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9140:	ee 24       	eor	r14, r14
    9142:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9144:	70 e0       	ldi	r23, 0x00	; 0
    9146:	21 11       	cpse	r18, r1
    9148:	01 c0       	rjmp	.+2      	; 0x914c <MapSprite2+0x4c>
    914a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    914c:	00 e0       	ldi	r16, 0x00	; 0
    914e:	06 17       	cp	r16, r22
    9150:	09 f1       	breq	.+66     	; 0x9194 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9152:	71 03       	mulsu	r23, r17
    9154:	e0 01       	movw	r28, r0
    9156:	11 24       	eor	r1, r1
    9158:	d8 2e       	mov	r13, r24
    915a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    915c:	8d 15       	cp	r24, r13
    915e:	b1 f0       	breq	.+44     	; 0x918c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9160:	9e 01       	movw	r18, r28
    9162:	29 0f       	add	r18, r25
    9164:	31 1d       	adc	r19, r1
    9166:	97 fd       	sbrc	r25, 7
    9168:	3a 95       	dec	r19
    916a:	2e 5f       	subi	r18, 0xFE	; 254
    916c:	3f 4f       	sbci	r19, 0xFF	; 255
    916e:	fd 01       	movw	r30, r26
    9170:	e2 0f       	add	r30, r18
    9172:	f3 1f       	adc	r31, r19
    9174:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9176:	34 e0       	ldi	r19, 0x04	; 4
    9178:	83 9f       	mul	r24, r19
    917a:	f0 01       	movw	r30, r0
    917c:	11 24       	eor	r1, r1
    917e:	e8 55       	subi	r30, 0x58	; 88
    9180:	fb 4f       	sbci	r31, 0xFB	; 251
    9182:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9184:	8f 5f       	subi	r24, 0xFF	; 255
    9186:	43 83       	std	Z+3, r20	; 0x03
    9188:	9f 0d       	add	r25, r15
    918a:	e8 cf       	rjmp	.-48     	; 0x915c <MapSprite2+0x5c>
    918c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    918e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9190:	95 2f       	mov	r25, r21
    9192:	dd cf       	rjmp	.-70     	; 0x914e <MapSprite2+0x4e>
	    }
	}
    9194:	df 91       	pop	r29
    9196:	cf 91       	pop	r28
    9198:	1f 91       	pop	r17
    919a:	0f 91       	pop	r16
    919c:	ff 90       	pop	r15
    919e:	ef 90       	pop	r14
    91a0:	df 90       	pop	r13
    91a2:	08 95       	ret

000091a4 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    91a4:	0f 93       	push	r16
    91a6:	cf 93       	push	r28
    91a8:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    91aa:	30 e0       	ldi	r19, 0x00	; 0
    91ac:	30 17       	cp	r19, r16
    91ae:	e1 f0       	breq	.+56     	; 0x91e8 <MoveSprite+0x44>
    91b0:	b4 2f       	mov	r27, r20
    91b2:	a0 e2       	ldi	r26, 0x20	; 32
    91b4:	a4 0f       	add	r26, r20
    91b6:	78 2f       	mov	r23, r24
    91b8:	72 0f       	add	r23, r18
    91ba:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    91bc:	87 17       	cp	r24, r23
    91be:	81 f0       	breq	.+32     	; 0x91e0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    91c0:	c4 e0       	ldi	r28, 0x04	; 4
    91c2:	8c 9f       	mul	r24, r28
    91c4:	f0 01       	movw	r30, r0
    91c6:	11 24       	eor	r1, r1
    91c8:	e8 55       	subi	r30, 0x58	; 88
    91ca:	fb 4f       	sbci	r31, 0xFB	; 251
    91cc:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    91ce:	41 3e       	cpi	r20, 0xE1	; 225
    91d0:	51 05       	cpc	r21, r1
    91d2:	14 f0       	brlt	.+4      	; 0x91d8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    91d4:	a1 83       	std	Z+1, r26	; 0x01
    91d6:	01 c0       	rjmp	.+2      	; 0x91da <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    91d8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    91da:	8f 5f       	subi	r24, 0xFF	; 255
    91dc:	98 5f       	subi	r25, 0xF8	; 248
    91de:	ee cf       	rjmp	.-36     	; 0x91bc <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    91e0:	3f 5f       	subi	r19, 0xFF	; 255
    91e2:	48 5f       	subi	r20, 0xF8	; 248
    91e4:	5f 4f       	sbci	r21, 0xFF	; 255
    91e6:	e2 cf       	rjmp	.-60     	; 0x91ac <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    91e8:	cf 91       	pop	r28
    91ea:	0f 91       	pop	r16
    91ec:	08 95       	ret

000091ee <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    91ee:	08 95       	ret

000091f0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    91f0:	e8 ea       	ldi	r30, 0xA8	; 168
    91f2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    91f4:	80 ef       	ldi	r24, 0xF0	; 240
    91f6:	80 83       	st	Z, r24
    91f8:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    91fa:	94 e0       	ldi	r25, 0x04	; 4
    91fc:	e0 3d       	cpi	r30, 0xD0	; 208
    91fe:	f9 07       	cpc	r31, r25
    9200:	d1 f7       	brne	.-12     	; 0x91f6 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9202:	10 92 4f 0a 	sts	0x0A4F, r1
		user_ram_tiles_c_tmp = 0U;
    9206:	10 92 51 0a 	sts	0x0A51, r1
    920a:	08 95       	ret

0000920c <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    920c:	4f 92       	push	r4
    920e:	5f 92       	push	r5
    9210:	6f 92       	push	r6
    9212:	7f 92       	push	r7
    9214:	8f 92       	push	r8
    9216:	9f 92       	push	r9
    9218:	af 92       	push	r10
    921a:	bf 92       	push	r11
    921c:	cf 92       	push	r12
    921e:	df 92       	push	r13
    9220:	ef 92       	push	r14
    9222:	ff 92       	push	r15
    9224:	0f 93       	push	r16
    9226:	1f 93       	push	r17
    9228:	cf 93       	push	r28
    922a:	df 93       	push	r29
    922c:	68 2e       	mov	r6, r24
    922e:	56 2e       	mov	r5, r22
    9230:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9232:	fa 01       	movw	r30, r20
    9234:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9236:	31 96       	adiw	r30, 0x01	; 1
    9238:	84 90       	lpm	r8, Z
    923a:	c7 2c       	mov	r12, r7
    923c:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    923e:	00 e0       	ldi	r16, 0x00	; 0
    9240:	10 e0       	ldi	r17, 0x00	; 0
    9242:	91 2c       	mov	r9, r1
    9244:	98 14       	cp	r9, r8
    9246:	f1 f0       	breq	.+60     	; 0x9284 <DrawMap+0x78>
    9248:	c0 e0       	ldi	r28, 0x00	; 0
    924a:	d0 e0       	ldi	r29, 0x00	; 0
    924c:	58 01       	movw	r10, r16
    924e:	f2 e0       	ldi	r31, 0x02	; 2
    9250:	af 0e       	add	r10, r31
    9252:	b1 1c       	adc	r11, r1
    9254:	49 2c       	mov	r4, r9
    9256:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9258:	c7 15       	cp	r28, r7
    925a:	80 f4       	brcc	.+32     	; 0x927c <DrawMap+0x70>
    925c:	95 01       	movw	r18, r10
    925e:	2c 0f       	add	r18, r28
    9260:	3d 1f       	adc	r19, r29
    9262:	f7 01       	movw	r30, r14
    9264:	e2 0f       	add	r30, r18
    9266:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9268:	24 91       	lpm	r18, Z
    926a:	42 2f       	mov	r20, r18
    926c:	50 e0       	ldi	r21, 0x00	; 0
    926e:	64 2d       	mov	r22, r4
    9270:	8c 2f       	mov	r24, r28
    9272:	86 0d       	add	r24, r6
    9274:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
    9278:	21 96       	adiw	r28, 0x01	; 1
    927a:	ee cf       	rjmp	.-36     	; 0x9258 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    927c:	93 94       	inc	r9
    927e:	0c 0d       	add	r16, r12
    9280:	1d 1d       	adc	r17, r13
    9282:	e0 cf       	rjmp	.-64     	; 0x9244 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9284:	df 91       	pop	r29
    9286:	cf 91       	pop	r28
    9288:	1f 91       	pop	r17
    928a:	0f 91       	pop	r16
    928c:	ff 90       	pop	r15
    928e:	ef 90       	pop	r14
    9290:	df 90       	pop	r13
    9292:	cf 90       	pop	r12
    9294:	bf 90       	pop	r11
    9296:	af 90       	pop	r10
    9298:	9f 90       	pop	r9
    929a:	8f 90       	pop	r8
    929c:	7f 90       	pop	r7
    929e:	6f 90       	pop	r6
    92a0:	5f 90       	pop	r5
    92a2:	4f 90       	pop	r4
    92a4:	08 95       	ret

000092a6 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    92a6:	df 92       	push	r13
    92a8:	ef 92       	push	r14
    92aa:	ff 92       	push	r15
    92ac:	0f 93       	push	r16
    92ae:	1f 93       	push	r17
    92b0:	cf 93       	push	r28
    92b2:	df 93       	push	r29
    92b4:	f6 2e       	mov	r15, r22
    92b6:	04 2f       	mov	r16, r20
    92b8:	d2 2e       	mov	r13, r18
    92ba:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    92bc:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    92be:	8a e0       	ldi	r24, 0x0A	; 10
    92c0:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    92c2:	01 11       	cpse	r16, r1
    92c4:	02 c0       	rjmp	.+4      	; 0x92ca <PrintByte+0x24>
    92c6:	11 11       	cpse	r17, r1
    92c8:	07 c0       	rjmp	.+14     	; 0x92d8 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    92ca:	80 2f       	mov	r24, r16
    92cc:	6e 2d       	mov	r22, r14
    92ce:	0e 94 74 71 	call	0xe2e8	; 0xe2e8 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    92d2:	40 e1       	ldi	r20, 0x10	; 16
    92d4:	49 0f       	add	r20, r25
    92d6:	05 c0       	rjmp	.+10     	; 0x92e2 <PrintByte+0x3c>
		}else{
			if(zeropad){
    92d8:	dd 20       	and	r13, r13
    92da:	11 f0       	breq	.+4      	; 0x92e0 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    92dc:	40 e1       	ldi	r20, 0x10	; 16
    92de:	01 c0       	rjmp	.+2      	; 0x92e2 <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    92e0:	40 e0       	ldi	r20, 0x00	; 0
    92e2:	6f 2d       	mov	r22, r15
    92e4:	8c 2f       	mov	r24, r28
    92e6:	0e 94 80 3a 	call	0x7500	; 0x7500 <SetFont>
			}
		}
		val=val/10;
    92ea:	80 2f       	mov	r24, r16
    92ec:	6e 2d       	mov	r22, r14
    92ee:	0e 94 74 71 	call	0xe2e8	; 0xe2e8 <__udivmodqi4>
    92f2:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    92f4:	1f 5f       	subi	r17, 0xFF	; 255
    92f6:	21 97       	sbiw	r28, 0x01	; 1
    92f8:	13 30       	cpi	r17, 0x03	; 3
    92fa:	19 f7       	brne	.-58     	; 0x92c2 <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    92fc:	df 91       	pop	r29
    92fe:	cf 91       	pop	r28
    9300:	1f 91       	pop	r17
    9302:	0f 91       	pop	r16
    9304:	ff 90       	pop	r15
    9306:	ef 90       	pop	r14
    9308:	df 90       	pop	r13
    930a:	08 95       	ret

0000930c <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    930c:	0f 93       	push	r16
    930e:	1f 93       	push	r17
    9310:	cf 93       	push	r28
    9312:	df 93       	push	r29
    9314:	06 2f       	mov	r16, r22
    9316:	c4 2f       	mov	r28, r20
    9318:	d5 2f       	mov	r29, r21
    931a:	18 2f       	mov	r17, r24
    931c:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    931e:	fe 01       	movw	r30, r28
    9320:	44 91       	lpm	r20, Z
		if(c!=0){
    9322:	44 23       	and	r20, r20
    9324:	49 f0       	breq	.+18     	; 0x9338 <Print+0x2c>
			c=((c&127)-32);			
    9326:	4f 77       	andi	r20, 0x7F	; 127
    9328:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    932a:	60 2f       	mov	r22, r16
    932c:	8c 2f       	mov	r24, r28
    932e:	81 0f       	add	r24, r17
    9330:	0e 94 80 3a 	call	0x7500	; 0x7500 <SetFont>
    9334:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9336:	f3 cf       	rjmp	.-26     	; 0x931e <Print+0x12>
	
}
    9338:	df 91       	pop	r29
    933a:	cf 91       	pop	r28
    933c:	1f 91       	pop	r17
    933e:	0f 91       	pop	r16
    9340:	08 95       	ret

00009342 <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9342:	40 52       	subi	r20, 0x20	; 32
    9344:	0c 94 80 3a 	jmp	0x7500	; 0x7500 <SetFont>

00009348 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9348:	0f 93       	push	r16
    934a:	1f 93       	push	r17
    934c:	cf 93       	push	r28
    934e:	df 93       	push	r29
    9350:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9352:	c0 e0       	ldi	r28, 0x00	; 0
    9354:	d0 e0       	ldi	r29, 0x00	; 0
    9356:	c0 17       	cp	r28, r16
    9358:	d1 07       	cpc	r29, r17
    935a:	44 f4       	brge	.+16     	; 0x936c <WaitVsync+0x24>
		while(!GetVsyncFlag());
    935c:	0e 94 9a 3a 	call	0x7534	; 0x7534 <GetVsyncFlag>
    9360:	88 23       	and	r24, r24
    9362:	e1 f3       	breq	.-8      	; 0x935c <WaitVsync+0x14>
		ClearVsyncFlag();		
    9364:	0e 94 9e 3a 	call	0x753c	; 0x753c <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9368:	21 96       	adiw	r28, 0x01	; 1
    936a:	f5 cf       	rjmp	.-22     	; 0x9356 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    936c:	df 91       	pop	r29
    936e:	cf 91       	pop	r28
    9370:	1f 91       	pop	r17
    9372:	0f 91       	pop	r16
    9374:	08 95       	ret

00009376 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9376:	80 93 71 0b 	sts	0x0B71, r24
	currFadeFrame=0;
    937a:	10 92 74 0b 	sts	0x0B74, r1
	fadeActive=true;
    937e:	81 e0       	ldi	r24, 0x01	; 1
    9380:	80 93 73 0b 	sts	0x0B73, r24
		
	if(blocking){
    9384:	66 23       	and	r22, r22
    9386:	21 f0       	breq	.+8      	; 0x9390 <doFade+0x1a>
		while(fadeActive==true);
    9388:	80 91 73 0b 	lds	r24, 0x0B73
    938c:	81 11       	cpse	r24, r1
    938e:	fc cf       	rjmp	.-8      	; 0x9388 <doFade+0x12>
    9390:	08 95       	ret

00009392 <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9392:	81 11       	cpse	r24, r1
    9394:	03 c0       	rjmp	.+6      	; 0x939c <FadeIn+0xa>
		DDRC=0xff;
    9396:	8f ef       	ldi	r24, 0xFF	; 255
    9398:	87 b9       	out	0x07, r24	; 7
		return;
    939a:	08 95       	ret
	}
	fadeStep=1;
    939c:	91 e0       	ldi	r25, 0x01	; 1
    939e:	90 93 75 0b 	sts	0x0B75, r25
	fadeDir=1;
    93a2:	90 93 72 0b 	sts	0x0B72, r25
	doFade(speed,blocking);
    93a6:	0c 94 bb 49 	jmp	0x9376	; 0x9376 <doFade>

000093aa <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    93aa:	80 91 73 0b 	lds	r24, 0x0B73
    93ae:	88 23       	and	r24, r24
    93b0:	01 f1       	breq	.+64     	; 0x93f2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    93b2:	80 91 74 0b 	lds	r24, 0x0B74
    93b6:	81 11       	cpse	r24, r1
    93b8:	19 c0       	rjmp	.+50     	; 0x93ec <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    93ba:	80 91 71 0b 	lds	r24, 0x0B71
    93be:	80 93 74 0b 	sts	0x0B74, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    93c2:	e0 91 75 0b 	lds	r30, 0x0B75
    93c6:	f0 e0       	ldi	r31, 0x00	; 0
    93c8:	e5 52       	subi	r30, 0x25	; 37
    93ca:	ff 4f       	sbci	r31, 0xFF	; 255
    93cc:	e4 91       	lpm	r30, Z
    93ce:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    93d0:	90 91 72 0b 	lds	r25, 0x0B72
    93d4:	80 91 75 0b 	lds	r24, 0x0B75
    93d8:	89 0f       	add	r24, r25
    93da:	80 93 75 0b 	sts	0x0B75, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    93de:	88 23       	and	r24, r24
    93e0:	11 f0       	breq	.+4      	; 0x93e6 <ProcessFading+0x3c>
    93e2:	8d 30       	cpi	r24, 0x0D	; 13
    93e4:	31 f4       	brne	.+12     	; 0x93f2 <ProcessFading+0x48>
				fadeActive=false;
    93e6:	10 92 73 0b 	sts	0x0B73, r1
    93ea:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    93ec:	81 50       	subi	r24, 0x01	; 1
    93ee:	80 93 74 0b 	sts	0x0B74, r24
    93f2:	08 95       	ret

000093f4 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    93f4:	0e 94 d5 49 	call	0x93aa	; 0x93aa <ProcessFading>
	#if (SPRITES_VSYNC_PROCESS != 0)
	ProcessSprites();
    93f8:	0c 94 80 47 	jmp	0x8f00	; 0x8f00 <ProcessSprites>

000093fc <LBPlaySound.part.5>:
void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    93fc:	41 e0       	ldi	r20, 0x01	; 1
    93fe:	6f ef       	ldi	r22, 0xFF	; 255
    9400:	0c 94 31 3e 	jmp	0x7c62	; 0x7c62 <TriggerFx>

00009404 <wifiSendP>:
#define WIFI_TIMEOUT 1
#define WIFI_NODATA 2

#define TIMEOUT 10*60

u8 wifiSendP(const char* str){
    9404:	0f 93       	push	r16
    9406:	1f 93       	push	r17
    9408:	cf 93       	push	r28
    940a:	df 93       	push	r29
    940c:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    940e:	20 97       	sbiw	r28, 0x00	; 0
    9410:	99 f0       	breq	.+38     	; 0x9438 <wifiSendP+0x34>
		c=pgm_read_byte(str);
    9412:	fe 01       	movw	r30, r28
    9414:	04 91       	lpm	r16, Z
		if(c==0)break;
    9416:	00 23       	and	r16, r16
    9418:	79 f0       	breq	.+30     	; 0x9438 <wifiSendP+0x34>
    941a:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    941c:	80 2f       	mov	r24, r16
    941e:	0e 94 97 3c 	call	0x792e	; 0x792e <UartSendChar>
    9422:	8f 3f       	cpi	r24, 0xFF	; 255
    9424:	39 f4       	brne	.+14     	; 0x9434 <wifiSendP+0x30>
			WaitVsync(1);
    9426:	81 e0       	ldi	r24, 0x01	; 1
    9428:	90 e0       	ldi	r25, 0x00	; 0
    942a:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
    942e:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    9430:	a9 f7       	brne	.-22     	; 0x941c <wifiSendP+0x18>
    9432:	02 c0       	rjmp	.+4      	; 0x9438 <wifiSendP+0x34>
		}
		counter = 0;
		str++;
    9434:	21 96       	adiw	r28, 0x01	; 1
    9436:	eb cf       	rjmp	.-42     	; 0x940e <wifiSendP+0xa>
	};

	return WIFI_OK;
}
    9438:	80 e0       	ldi	r24, 0x00	; 0
    943a:	df 91       	pop	r29
    943c:	cf 91       	pop	r28
    943e:	1f 91       	pop	r17
    9440:	0f 91       	pop	r16
    9442:	08 95       	ret

00009444 <wifiSend>:

u8 wifiSend(char* str){
    9444:	0f 93       	push	r16
    9446:	1f 93       	push	r17
    9448:	cf 93       	push	r28
    944a:	df 93       	push	r29
    944c:	ec 01       	movw	r28, r24

	char c;
	u8 counter = 0;
	while(str!=NULL){
    944e:	20 97       	sbiw	r28, 0x00	; 0
    9450:	79 f0       	breq	.+30     	; 0x9470 <wifiSend+0x2c>
		c=*str;
    9452:	09 91       	ld	r16, Y+
		if(c==0)break;
    9454:	00 23       	and	r16, r16
    9456:	61 f0       	breq	.+24     	; 0x9470 <wifiSend+0x2c>
    9458:	1c e3       	ldi	r17, 0x3C	; 60
		while(UartSendChar(c)==-1) {
    945a:	80 2f       	mov	r24, r16
    945c:	0e 94 97 3c 	call	0x792e	; 0x792e <UartSendChar>
    9460:	8f 3f       	cpi	r24, 0xFF	; 255
    9462:	a9 f7       	brne	.-22     	; 0x944e <wifiSend+0xa>
			WaitVsync(1);
    9464:	81 e0       	ldi	r24, 0x01	; 1
    9466:	90 e0       	ldi	r25, 0x00	; 0
    9468:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
    946c:	11 50       	subi	r17, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    946e:	a9 f7       	brne	.-22     	; 0x945a <wifiSend+0x16>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    9470:	80 e0       	ldi	r24, 0x00	; 0
    9472:	df 91       	pop	r29
    9474:	cf 91       	pop	r28
    9476:	1f 91       	pop	r17
    9478:	0f 91       	pop	r16
    947a:	08 95       	ret

0000947c <wifiSendBinary>:

u8 wifiSendBinary(char* str, u8 sz){
    947c:	ff 92       	push	r15
    947e:	0f 93       	push	r16
    9480:	1f 93       	push	r17
    9482:	cf 93       	push	r28
    9484:	df 93       	push	r29
    9486:	c6 2f       	mov	r28, r22
    9488:	8c 01       	movw	r16, r24

	char c;
	u8 counter = 0;
	while(sz--){
    948a:	cc 23       	and	r28, r28
    948c:	91 f0       	breq	.+36     	; 0x94b2 <wifiSendBinary+0x36>
		c=*str;
    948e:	f8 01       	movw	r30, r16
    9490:	f1 90       	ld	r15, Z+
    9492:	8f 01       	movw	r16, r30
		while(UartSendChar(c)==-1) {
    9494:	dc e3       	ldi	r29, 0x3C	; 60
    9496:	8f 2d       	mov	r24, r15
    9498:	0e 94 97 3c 	call	0x792e	; 0x792e <UartSendChar>
    949c:	8f 3f       	cpi	r24, 0xFF	; 255
    949e:	39 f4       	brne	.+14     	; 0x94ae <wifiSendBinary+0x32>
			WaitVsync(1);
    94a0:	81 e0       	ldi	r24, 0x01	; 1
    94a2:	90 e0       	ldi	r25, 0x00	; 0
    94a4:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
    94a8:	d1 50       	subi	r29, 0x01	; 1
			if (++counter == 60) return WIFI_OK;
    94aa:	a9 f7       	brne	.-22     	; 0x9496 <wifiSendBinary+0x1a>
    94ac:	02 c0       	rjmp	.+4      	; 0x94b2 <wifiSendBinary+0x36>

u8 wifiSendBinary(char* str, u8 sz){

	char c;
	u8 counter = 0;
	while(sz--){
    94ae:	c1 50       	subi	r28, 0x01	; 1
    94b0:	ec cf       	rjmp	.-40     	; 0x948a <wifiSendBinary+0xe>
		}
		counter = 0;
		str++;
	};
	return WIFI_OK;
}
    94b2:	80 e0       	ldi	r24, 0x00	; 0
    94b4:	df 91       	pop	r29
    94b6:	cf 91       	pop	r28
    94b8:	1f 91       	pop	r17
    94ba:	0f 91       	pop	r16
    94bc:	ff 90       	pop	r15
    94be:	08 95       	ret

000094c0 <wifiGetIfAvailable>:

u8 wifiGetIfAvailable(char* buffer, u8 expectedSize) {
    94c0:	ef 92       	push	r14
    94c2:	ff 92       	push	r15
    94c4:	1f 93       	push	r17
    94c6:	cf 93       	push	r28
    94c8:	df 93       	push	r29
    94ca:	00 d0       	rcall	.+0      	; 0x94cc <wifiGetIfAvailable+0xc>
    94cc:	cd b7       	in	r28, 0x3d	; 61
    94ce:	de b7       	in	r29, 0x3e	; 62
    94d0:	18 2f       	mov	r17, r24
	s16 r = -1;
	if (UartUnreadCount() > 0) {
    94d2:	69 83       	std	Y+1, r22	; 0x01
    94d4:	9a 83       	std	Y+2, r25	; 0x02
    94d6:	0e 94 75 3c 	call	0x78ea	; 0x78ea <UartUnreadCount>
    94da:	69 81       	ldd	r22, Y+1	; 0x01
    94dc:	9a 81       	ldd	r25, Y+2	; 0x02
    94de:	88 23       	and	r24, r24
    94e0:	89 f0       	breq	.+34     	; 0x9504 <wifiGetIfAvailable+0x44>
    94e2:	e1 2e       	mov	r14, r17
    94e4:	f9 2e       	mov	r15, r25
    94e6:	16 0f       	add	r17, r22
		while (expectedSize--) {
    94e8:	1e 15       	cp	r17, r14
    94ea:	51 f0       	breq	.+20     	; 0x9500 <wifiGetIfAvailable+0x40>
			while(r == -1) r = UartReadChar();
    94ec:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <UartReadChar>
    94f0:	8f 3f       	cpi	r24, 0xFF	; 255
    94f2:	2f ef       	ldi	r18, 0xFF	; 255
    94f4:	92 07       	cpc	r25, r18
    94f6:	d1 f3       	breq	.-12     	; 0x94ec <wifiGetIfAvailable+0x2c>
			*buffer = r&0xff;
    94f8:	f7 01       	movw	r30, r14
    94fa:	81 93       	st	Z+, r24
    94fc:	7f 01       	movw	r14, r30
    94fe:	f4 cf       	rjmp	.-24     	; 0x94e8 <wifiGetIfAvailable+0x28>
}

u8 wifiGetIfAvailable(char* buffer, u8 expectedSize) {
	s16 r = -1;
	if (UartUnreadCount() > 0) {
		while (expectedSize--) {
    9500:	80 e0       	ldi	r24, 0x00	; 0
    9502:	01 c0       	rjmp	.+2      	; 0x9506 <wifiGetIfAvailable+0x46>
			*buffer = r&0xff;
			buffer++;
			r = -1;
		}
	} else {
		return WIFI_NODATA;
    9504:	82 e0       	ldi	r24, 0x02	; 2
	}
	return WIFI_OK;
}
    9506:	0f 90       	pop	r0
    9508:	0f 90       	pop	r0
    950a:	df 91       	pop	r29
    950c:	cf 91       	pop	r28
    950e:	1f 91       	pop	r17
    9510:	ff 90       	pop	r15
    9512:	ef 90       	pop	r14
    9514:	08 95       	ret

00009516 <wifiGetAndDiscard>:

void wifiGetAndDiscard(u8 expectedSize) {
    9516:	cf 93       	push	r28
    9518:	c8 2f       	mov	r28, r24
	s16 r = -1;
	if (UartUnreadCount() > 0) {
    951a:	0e 94 75 3c 	call	0x78ea	; 0x78ea <UartUnreadCount>
    951e:	88 23       	and	r24, r24
    9520:	41 f0       	breq	.+16     	; 0x9532 <wifiGetAndDiscard+0x1c>
		while (expectedSize--) {
    9522:	cc 23       	and	r28, r28
    9524:	31 f0       	breq	.+12     	; 0x9532 <wifiGetAndDiscard+0x1c>
			while(r == -1) r = UartReadChar();
    9526:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <UartReadChar>
    952a:	01 96       	adiw	r24, 0x01	; 1
    952c:	e1 f3       	breq	.-8      	; 0x9526 <wifiGetAndDiscard+0x10>
    952e:	c1 50       	subi	r28, 0x01	; 1
    9530:	f8 cf       	rjmp	.-16     	; 0x9522 <wifiGetAndDiscard+0xc>
			r = -1;
		}
	}
}
    9532:	cf 91       	pop	r28
    9534:	08 95       	ret

00009536 <wifiGetPB>:

u8 wifiGetPB(const char* str, char* rxbuf){
    9536:	ef 92       	push	r14
    9538:	ff 92       	push	r15
    953a:	0f 93       	push	r16
    953c:	1f 93       	push	r17
    953e:	cf 93       	push	r28
    9540:	df 93       	push	r29
    9542:	f8 2e       	mov	r15, r24
    9544:	e9 2e       	mov	r14, r25
    9546:	8b 01       	movw	r16, r22
	u8 c;
	s16 r;
	const char* p=str;
	char* buf=rxbuf;
	ClearVsyncCounter();
    9548:	0e 94 a9 3a 	call	0x7552	; 0x7552 <ClearVsyncCounter>
}

u8 wifiGetPB(const char* str, char* rxbuf){
	u8 c;
	s16 r;
	const char* p=str;
    954c:	cf 2d       	mov	r28, r15
    954e:	de 2d       	mov	r29, r14
	char* buf=rxbuf;
	ClearVsyncCounter();

	while(1){

		r=UartReadChar();
    9550:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <UartReadChar>
		if(r!=-1){
    9554:	8f 3f       	cpi	r24, 0xFF	; 255
    9556:	ef ef       	ldi	r30, 0xFF	; 255
    9558:	9e 07       	cpc	r25, r30
    955a:	99 f0       	breq	.+38     	; 0x9582 <wifiGetPB+0x4c>

			c=r&(0xff);
    955c:	28 2f       	mov	r18, r24

			if(buf!=NULL){
    955e:	01 15       	cp	r16, r1
    9560:	11 05       	cpc	r17, r1
    9562:	19 f0       	breq	.+6      	; 0x956a <wifiGetPB+0x34>
				*buf=c;
    9564:	f8 01       	movw	r30, r16
    9566:	81 93       	st	Z+, r24
    9568:	8f 01       	movw	r16, r30
				buf++;
			}

			if(c==pgm_read_byte(p)){
    956a:	fe 01       	movw	r30, r28
    956c:	84 91       	lpm	r24, Z
    956e:	28 13       	cpse	r18, r24
    9570:	06 c0       	rjmp	.+12     	; 0x957e <wifiGetPB+0x48>
				p++;
    9572:	21 96       	adiw	r28, 0x01	; 1
				if(pgm_read_byte(p)==0){
    9574:	fe 01       	movw	r30, r28
    9576:	84 91       	lpm	r24, Z
    9578:	81 11       	cpse	r24, r1
    957a:	03 c0       	rjmp	.+6      	; 0x9582 <wifiGetPB+0x4c>
    957c:	09 c0       	rjmp	.+18     	; 0x9590 <wifiGetPB+0x5a>
					return WIFI_OK;
				}
			}else{
				//reset string compare
				p=str;
    957e:	cf 2d       	mov	r28, r15
    9580:	de 2d       	mov	r29, r14
			}
		}

		if(GetVsyncCounter()>TIMEOUT){
    9582:	0e 94 a4 3a 	call	0x7548	; 0x7548 <GetVsyncCounter>
    9586:	89 35       	cpi	r24, 0x59	; 89
    9588:	92 40       	sbci	r25, 0x02	; 2
    958a:	10 f3       	brcs	.-60     	; 0x9550 <wifiGetPB+0x1a>
			return WIFI_TIMEOUT;
    958c:	81 e0       	ldi	r24, 0x01	; 1
    958e:	01 c0       	rjmp	.+2      	; 0x9592 <wifiGetPB+0x5c>
			}

			if(c==pgm_read_byte(p)){
				p++;
				if(pgm_read_byte(p)==0){
					return WIFI_OK;
    9590:	80 e0       	ldi	r24, 0x00	; 0
		if(GetVsyncCounter()>TIMEOUT){
			return WIFI_TIMEOUT;
		}
	}

}
    9592:	df 91       	pop	r29
    9594:	cf 91       	pop	r28
    9596:	1f 91       	pop	r17
    9598:	0f 91       	pop	r16
    959a:	ff 90       	pop	r15
    959c:	ef 90       	pop	r14
    959e:	08 95       	ret

000095a0 <wifiGetPBT>:

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    95a0:	cf 92       	push	r12
    95a2:	df 92       	push	r13
    95a4:	ef 92       	push	r14
    95a6:	ff 92       	push	r15
    95a8:	0f 93       	push	r16
    95aa:	1f 93       	push	r17
    95ac:	cf 93       	push	r28
    95ae:	df 93       	push	r29
    95b0:	f8 2e       	mov	r15, r24
    95b2:	e9 2e       	mov	r14, r25
    95b4:	8b 01       	movw	r16, r22
    95b6:	6a 01       	movw	r12, r20
    u8 c;
    s16 r;
    const char* p=str;
    char* buf=rxbuf;
    ClearVsyncCounter();
    95b8:	0e 94 a9 3a 	call	0x7552	; 0x7552 <ClearVsyncCounter>
}

u8 wifiGetPBT(const char* str, char* rxbuf, u16 wifi_timeout){
    u8 c;
    s16 r;
    const char* p=str;
    95bc:	cf 2d       	mov	r28, r15
    95be:	de 2d       	mov	r29, r14
    char* buf=rxbuf;
    ClearVsyncCounter();

    while(1){

        r=UartReadChar();
    95c0:	0e 94 7b 3c 	call	0x78f6	; 0x78f6 <UartReadChar>
        if(r!=-1){
    95c4:	8f 3f       	cpi	r24, 0xFF	; 255
    95c6:	ef ef       	ldi	r30, 0xFF	; 255
    95c8:	9e 07       	cpc	r25, r30
    95ca:	99 f0       	breq	.+38     	; 0x95f2 <wifiGetPBT+0x52>

            c=r&(0xff);
    95cc:	28 2f       	mov	r18, r24

            if(buf!=NULL){
    95ce:	01 15       	cp	r16, r1
    95d0:	11 05       	cpc	r17, r1
    95d2:	19 f0       	breq	.+6      	; 0x95da <wifiGetPBT+0x3a>
                *buf=c;
    95d4:	f8 01       	movw	r30, r16
    95d6:	81 93       	st	Z+, r24
    95d8:	8f 01       	movw	r16, r30
                buf++;
            }

            if(c==pgm_read_byte(p)){
    95da:	fe 01       	movw	r30, r28
    95dc:	84 91       	lpm	r24, Z
    95de:	28 13       	cpse	r18, r24
    95e0:	06 c0       	rjmp	.+12     	; 0x95ee <wifiGetPBT+0x4e>
                p++;
    95e2:	21 96       	adiw	r28, 0x01	; 1
                if(pgm_read_byte(p)==0){
    95e4:	fe 01       	movw	r30, r28
    95e6:	84 91       	lpm	r24, Z
    95e8:	81 11       	cpse	r24, r1
    95ea:	03 c0       	rjmp	.+6      	; 0x95f2 <wifiGetPBT+0x52>
    95ec:	09 c0       	rjmp	.+18     	; 0x9600 <wifiGetPBT+0x60>
                    return WIFI_OK;
                }
            }else{
                //reset string compare
                p=str;
    95ee:	cf 2d       	mov	r28, r15
    95f0:	de 2d       	mov	r29, r14
            }
        }

        if(GetVsyncCounter()>wifi_timeout){
    95f2:	0e 94 a4 3a 	call	0x7548	; 0x7548 <GetVsyncCounter>
    95f6:	c8 16       	cp	r12, r24
    95f8:	d9 06       	cpc	r13, r25
    95fa:	10 f7       	brcc	.-60     	; 0x95c0 <wifiGetPBT+0x20>
            return WIFI_TIMEOUT;
    95fc:	81 e0       	ldi	r24, 0x01	; 1
    95fe:	01 c0       	rjmp	.+2      	; 0x9602 <wifiGetPBT+0x62>
            }

            if(c==pgm_read_byte(p)){
                p++;
                if(pgm_read_byte(p)==0){
                    return WIFI_OK;
    9600:	80 e0       	ldi	r24, 0x00	; 0
        if(GetVsyncCounter()>wifi_timeout){
            return WIFI_TIMEOUT;
        }
    }

}
    9602:	df 91       	pop	r29
    9604:	cf 91       	pop	r28
    9606:	1f 91       	pop	r17
    9608:	0f 91       	pop	r16
    960a:	ff 90       	pop	r15
    960c:	ef 90       	pop	r14
    960e:	df 90       	pop	r13
    9610:	cf 90       	pop	r12
    9612:	08 95       	ret

00009614 <wifiRequestP>:

	return WIFI_OK;
}


u8 wifiRequestP(const char* strToSend, const char* strToWait){
    9614:	cf 93       	push	r28
    9616:	df 93       	push	r29
    9618:	eb 01       	movw	r28, r22
	wifiSendP(strToSend);
    961a:	0e 94 02 4a 	call	0x9404	; 0x9404 <wifiSendP>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    961e:	60 e0       	ldi	r22, 0x00	; 0
    9620:	70 e0       	ldi	r23, 0x00	; 0
    9622:	ce 01       	movw	r24, r28
    9624:	0e 94 9b 4a 	call	0x9536	; 0x9536 <wifiGetPB>
    9628:	91 e0       	ldi	r25, 0x01	; 1
    962a:	81 30       	cpi	r24, 0x01	; 1
    962c:	09 f0       	breq	.+2      	; 0x9630 <wifiRequestP+0x1c>
    962e:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9630:	89 2f       	mov	r24, r25
    9632:	df 91       	pop	r29
    9634:	cf 91       	pop	r28
    9636:	08 95       	ret

00009638 <wifiRequest>:

u8 wifiRequest(char* strToSend, const char* strToWait){
    9638:	cf 93       	push	r28
    963a:	df 93       	push	r29
    963c:	eb 01       	movw	r28, r22
	wifiSend(strToSend);
    963e:	0e 94 22 4a 	call	0x9444	; 0x9444 <wifiSend>
	if(wifiGetPB(strToWait, NULL)==WIFI_TIMEOUT){
    9642:	60 e0       	ldi	r22, 0x00	; 0
    9644:	70 e0       	ldi	r23, 0x00	; 0
    9646:	ce 01       	movw	r24, r28
    9648:	0e 94 9b 4a 	call	0x9536	; 0x9536 <wifiGetPB>
    964c:	91 e0       	ldi	r25, 0x01	; 1
    964e:	81 30       	cpi	r24, 0x01	; 1
    9650:	09 f0       	breq	.+2      	; 0x9654 <wifiRequest+0x1c>
    9652:	90 e0       	ldi	r25, 0x00	; 0
		return WIFI_TIMEOUT;
	}

	return WIFI_OK;
}
    9654:	89 2f       	mov	r24, r25
    9656:	df 91       	pop	r29
    9658:	cf 91       	pop	r28
    965a:	08 95       	ret

0000965c <wifiRequestPT>:

u8 wifiRequestPT(const char* strToSend, const char* strToWait, u16 wifi_timeout){
    965c:	0f 93       	push	r16
    965e:	1f 93       	push	r17
    9660:	cf 93       	push	r28
    9662:	df 93       	push	r29
    9664:	00 d0       	rcall	.+0      	; 0x9666 <wifiRequestPT+0xa>
    9666:	cd b7       	in	r28, 0x3d	; 61
    9668:	de b7       	in	r29, 0x3e	; 62
    966a:	8b 01       	movw	r16, r22
    wifiSendP(strToSend);
    966c:	49 83       	std	Y+1, r20	; 0x01
    966e:	5a 83       	std	Y+2, r21	; 0x02
    9670:	0e 94 02 4a 	call	0x9404	; 0x9404 <wifiSendP>
    if(wifiGetPBT(strToWait, NULL, wifi_timeout)==WIFI_TIMEOUT){
    9674:	49 81       	ldd	r20, Y+1	; 0x01
    9676:	5a 81       	ldd	r21, Y+2	; 0x02
    9678:	60 e0       	ldi	r22, 0x00	; 0
    967a:	70 e0       	ldi	r23, 0x00	; 0
    967c:	c8 01       	movw	r24, r16
    967e:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <wifiGetPBT>
    9682:	91 e0       	ldi	r25, 0x01	; 1
    9684:	81 30       	cpi	r24, 0x01	; 1
    9686:	09 f0       	breq	.+2      	; 0x968a <wifiRequestPT+0x2e>
    9688:	90 e0       	ldi	r25, 0x00	; 0
        return WIFI_TIMEOUT;
    }

    return WIFI_OK;
}
    968a:	89 2f       	mov	r24, r25
    968c:	0f 90       	pop	r0
    968e:	0f 90       	pop	r0
    9690:	df 91       	pop	r29
    9692:	cf 91       	pop	r28
    9694:	1f 91       	pop	r17
    9696:	0f 91       	pop	r16
    9698:	08 95       	ret

0000969a <wifiHWResetLow>:
void wifiHWResetLow()
{
    //reset module
	
	// Set Direction of port D to output
	DDRD|=(1<<PD3);
    969a:	53 9a       	sbi	0x0a, 3	; 10
	
	// SET Pin PD3 low on port D and wait 3 seconds
    PORTD&=~(1<<PD3);
    969c:	5b 98       	cbi	0x0b, 3	; 11
    969e:	08 95       	ret

000096a0 <wifiHWResetHigh>:
void wifiHWResetHigh()
{
    //reset module
	
	// Set Direction of port D to output
	DDRD|=(1<<PD3);
    96a0:	53 9a       	sbi	0x0a, 3	; 10
	
	// SET Pin PD3 high on port D
	WaitVsync(180);
    96a2:	84 eb       	ldi	r24, 0xB4	; 180
    96a4:	90 e0       	ldi	r25, 0x00	; 0
    96a6:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
    PORTD|=(1<<PD3);
    96aa:	5b 9a       	sbi	0x0b, 3	; 11
    96ac:	08 95       	ret

000096ae <initWifi>:
    76800  22      1.3
    115200 15      3.0
*/

const u16 bauds[] PROGMEM = {185,123,92,61,46,30,22,15};
u8 initWifi(){
    96ae:	1f 93       	push	r17
    96b0:	cf 93       	push	r28
    96b2:	df 93       	push	r29
    s8 i = 0;
    u8 result;
	wifiHWResetLow();
    96b4:	0e 94 4d 4b 	call	0x969a	; 0x969a <wifiHWResetLow>
	wifiHWResetHigh();
    96b8:	0e 94 50 4b 	call	0x96a0	; 0x96a0 <wifiHWResetHigh>
    //UCSR0A=(1<<U2X0); // double speed mode
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    96bc:	86 e0       	ldi	r24, 0x06	; 6
    96be:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    96c2:	88 e1       	ldi	r24, 0x18	; 24
    96c4:	80 93 c1 00 	sts	0x00C1, r24
    96c8:	c3 e3       	ldi	r28, 0x33	; 51
    96ca:	d5 e0       	ldi	r29, 0x05	; 5
    do {
        UBRR0L=pgm_read_byte(((u8*) &(bauds[i])));
    96cc:	fe 01       	movw	r30, r28
    96ce:	84 91       	lpm	r24, Z
    96d0:	80 93 c4 00 	sts	0x00C4, r24
    96d4:	31 96       	adiw	r30, 0x01	; 1
        UBRR0H=pgm_read_byte(((u8*) &(bauds[i]))+1);
    96d6:	e4 91       	lpm	r30, Z
    96d8:	e0 93 c5 00 	sts	0x00C5, r30
        WaitVsync(1);
    96dc:	81 e0       	ldi	r24, 0x01	; 1
    96de:	90 e0       	ldi	r25, 0x00	; 0
    96e0:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
        result = wifiRequestPT(PSTR("AT\r\n"),PSTR("OK\r\n"), 30); 
    96e4:	4e e1       	ldi	r20, 0x1E	; 30
    96e6:	50 e0       	ldi	r21, 0x00	; 0
    96e8:	69 e5       	ldi	r22, 0x59	; 89
    96ea:	72 e0       	ldi	r23, 0x02	; 2
    96ec:	84 e5       	ldi	r24, 0x54	; 84
    96ee:	92 e0       	ldi	r25, 0x02	; 2
    96f0:	0e 94 2e 4b 	call	0x965c	; 0x965c <wifiRequestPT>
    96f4:	18 2f       	mov	r17, r24
        i++;
    } while ((result != WIFI_OK) && (i < 8));
    96f6:	88 23       	and	r24, r24
    96f8:	31 f0       	breq	.+12     	; 0x9706 <initWifi+0x58>
    96fa:	22 96       	adiw	r28, 0x02	; 2
    96fc:	f5 e0       	ldi	r31, 0x05	; 5
    96fe:	c3 34       	cpi	r28, 0x43	; 67
    9700:	df 07       	cpc	r29, r31
    9702:	21 f7       	brne	.-56     	; 0x96cc <initWifi+0x1e>
    9704:	19 c0       	rjmp	.+50     	; 0x9738 <initWifi+0x8a>
    if (result == WIFI_OK) {
        result = wifiRequestPT(PSTR("AT+UART_CUR=19200,8,1,0,0\r\n"),PSTR("OK\r\n"), 2*60); 
    9706:	48 e7       	ldi	r20, 0x78	; 120
    9708:	50 e0       	ldi	r21, 0x00	; 0
    970a:	6f e4       	ldi	r22, 0x4F	; 79
    970c:	72 e0       	ldi	r23, 0x02	; 2
    970e:	83 e3       	ldi	r24, 0x33	; 51
    9710:	92 e0       	ldi	r25, 0x02	; 2
    9712:	0e 94 2e 4b 	call	0x965c	; 0x965c <wifiRequestPT>
    9716:	18 2f       	mov	r17, r24
        if (result == WIFI_OK) {
    9718:	81 11       	cpse	r24, r1
    971a:	0e c0       	rjmp	.+28     	; 0x9738 <initWifi+0x8a>
            UBRR0L=pgm_read_byte(((u8*) &(bauds[2])));
    971c:	e7 e3       	ldi	r30, 0x37	; 55
    971e:	f5 e0       	ldi	r31, 0x05	; 5
    9720:	e4 91       	lpm	r30, Z
    9722:	e0 93 c4 00 	sts	0x00C4, r30
            UBRR0H=pgm_read_byte(((u8*) &(bauds[2]))+1); 
    9726:	e8 e3       	ldi	r30, 0x38	; 56
    9728:	f5 e0       	ldi	r31, 0x05	; 5
    972a:	e4 91       	lpm	r30, Z
    972c:	e0 93 c5 00 	sts	0x00C5, r30
            WaitVsync(1);
    9730:	81 e0       	ldi	r24, 0x01	; 1
    9732:	90 e0       	ldi	r25, 0x00	; 0
    9734:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
        }
    }
    return result;
}
    9738:	81 2f       	mov	r24, r17
    973a:	df 91       	pop	r29
    973c:	cf 91       	pop	r28
    973e:	1f 91       	pop	r17
    9740:	08 95       	ret

00009742 <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9742:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9744:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9746:	93 81       	ldd	r25, Z+3	; 0x03
    9748:	9f 5f       	subi	r25, 0xFF	; 255
    974a:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    974c:	22 81       	ldd	r18, Z+2	; 0x02
    974e:	80 81       	ld	r24, Z
    9750:	92 17       	cp	r25, r18
    9752:	38 f4       	brcc	.+14     	; 0x9762 <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9754:	e8 0f       	add	r30, r24
    9756:	f1 1d       	adc	r31, r1
    9758:	e8 0f       	add	r30, r24
    975a:	f1 1d       	adc	r31, r1
    975c:	86 81       	ldd	r24, Z+6	; 0x06
    975e:	97 81       	ldd	r25, Z+7	; 0x07
    9760:	08 95       	ret
	}
	anim->frame_count = 0;
    9762:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9764:	90 e0       	ldi	r25, 0x00	; 0
    9766:	01 96       	adiw	r24, 0x01	; 1
    9768:	61 81       	ldd	r22, Z+1	; 0x01
    976a:	70 e0       	ldi	r23, 0x00	; 0
    976c:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    9770:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9772:	81 11       	cpse	r24, r1
    9774:	02 c0       	rjmp	.+4      	; 0x977a <LBGetNextFrame+0x38>
    9776:	21 e0       	ldi	r18, 0x01	; 1
    9778:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    977a:	99 27       	eor	r25, r25
    977c:	03 96       	adiw	r24, 0x03	; 3
    977e:	88 0f       	add	r24, r24
    9780:	99 1f       	adc	r25, r25
    9782:	e8 0f       	add	r30, r24
    9784:	f9 1f       	adc	r31, r25
    9786:	80 81       	ld	r24, Z
    9788:	91 81       	ldd	r25, Z+1	; 0x01
}
    978a:	08 95       	ret

0000978c <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    978c:	fc 01       	movw	r30, r24
	anim->looped = 0;
    978e:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9790:	93 81       	ldd	r25, Z+3	; 0x03
    9792:	9f 5f       	subi	r25, 0xFF	; 255
    9794:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9796:	22 81       	ldd	r18, Z+2	; 0x02
    9798:	80 81       	ld	r24, Z
    979a:	92 17       	cp	r25, r18
    979c:	e0 f0       	brcs	.+56     	; 0x97d6 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    979e:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    97a0:	95 81       	ldd	r25, Z+5	; 0x05
    97a2:	99 23       	and	r25, r25
    97a4:	49 f0       	breq	.+18     	; 0x97b8 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    97a6:	81 50       	subi	r24, 0x01	; 1
    97a8:	10 f0       	brcs	.+4      	; 0x97ae <LBGetNextFrameReverse+0x22>
    97aa:	80 83       	st	Z, r24
    97ac:	13 c0       	rjmp	.+38     	; 0x97d4 <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    97ae:	10 82       	st	Z, r1
			anim->looped = 1;
    97b0:	81 e0       	ldi	r24, 0x01	; 1
    97b2:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    97b4:	15 82       	std	Z+5, r1	; 0x05
    97b6:	0e c0       	rjmp	.+28     	; 0x97d4 <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    97b8:	21 81       	ldd	r18, Z+1	; 0x01
    97ba:	90 e0       	ldi	r25, 0x00	; 0
    97bc:	01 96       	adiw	r24, 0x01	; 1
    97be:	62 2f       	mov	r22, r18
    97c0:	70 e0       	ldi	r23, 0x00	; 0
    97c2:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    97c6:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    97c8:	81 11       	cpse	r24, r1
    97ca:	04 c0       	rjmp	.+8      	; 0x97d4 <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    97cc:	81 e0       	ldi	r24, 0x01	; 1
    97ce:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    97d0:	21 50       	subi	r18, 0x01	; 1
    97d2:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    97d4:	80 81       	ld	r24, Z
    97d6:	e8 0f       	add	r30, r24
    97d8:	f1 1d       	adc	r31, r1
    97da:	e8 0f       	add	r30, r24
    97dc:	f1 1d       	adc	r31, r1
    97de:	86 81       	ldd	r24, Z+6	; 0x06
    97e0:	97 81       	ldd	r25, Z+7	; 0x07
}
    97e2:	08 95       	ret

000097e4 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    97e4:	0f 93       	push	r16
    97e6:	1f 93       	push	r17
    97e8:	cf 93       	push	r28
    97ea:	df 93       	push	r29
    97ec:	1f 92       	push	r1
    97ee:	cd b7       	in	r28, 0x3d	; 61
    97f0:	de b7       	in	r29, 0x3e	; 62
    97f2:	8c 01       	movw	r16, r24
	p->held = ReadJoypad(index);
    97f4:	86 2f       	mov	r24, r22
    97f6:	69 83       	std	Y+1, r22	; 0x01
    97f8:	0e 94 ae 3a 	call	0x755c	; 0x755c <ReadJoypad>
    97fc:	d8 01       	movw	r26, r16
    97fe:	15 96       	adiw	r26, 0x05	; 5
    9800:	9c 93       	st	X, r25
    9802:	8e 93       	st	-X, r24
    9804:	14 97       	sbiw	r26, 0x04	; 4
    9806:	69 81       	ldd	r22, Y+1	; 0x01
    9808:	e6 2f       	mov	r30, r22
    980a:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    980c:	00 97       	sbiw	r24, 0x00	; 0
    980e:	51 f0       	breq	.+20     	; 0x9824 <LBGetJoyPadState+0x40>
    9810:	df 01       	movw	r26, r30
    9812:	aa 0f       	add	r26, r26
    9814:	bb 1f       	adc	r27, r27
    9816:	a4 56       	subi	r26, 0x64	; 100
    9818:	b5 4f       	sbci	r27, 0xF5	; 245
    981a:	2d 91       	ld	r18, X+
    981c:	3c 91       	ld	r19, X
    981e:	82 17       	cp	r24, r18
    9820:	93 07       	cpc	r25, r19
    9822:	21 f0       	breq	.+8      	; 0x982c <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9824:	d8 01       	movw	r26, r16
    9826:	16 96       	adiw	r26, 0x06	; 6
    9828:	1c 92       	st	X, r1
    982a:	07 c0       	rjmp	.+14     	; 0x983a <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    982c:	d8 01       	movw	r26, r16
    982e:	16 96       	adiw	r26, 0x06	; 6
    9830:	2c 91       	ld	r18, X
    9832:	16 97       	sbiw	r26, 0x06	; 6
    9834:	2f 5f       	subi	r18, 0xFF	; 255
    9836:	16 96       	adiw	r26, 0x06	; 6
    9838:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    983a:	ee 0f       	add	r30, r30
    983c:	ff 1f       	adc	r31, r31
    983e:	e4 56       	subi	r30, 0x64	; 100
    9840:	f5 4f       	sbci	r31, 0xF5	; 245
    9842:	20 81       	ld	r18, Z
    9844:	31 81       	ldd	r19, Z+1	; 0x01
    9846:	a9 01       	movw	r20, r18
    9848:	40 95       	com	r20
    984a:	50 95       	com	r21
    984c:	48 23       	and	r20, r24
    984e:	59 23       	and	r21, r25
    9850:	d8 01       	movw	r26, r16
    9852:	11 96       	adiw	r26, 0x01	; 1
    9854:	5c 93       	st	X, r21
    9856:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9858:	ac 01       	movw	r20, r24
    985a:	40 95       	com	r20
    985c:	50 95       	com	r21
    985e:	24 23       	and	r18, r20
    9860:	35 23       	and	r19, r21
    9862:	13 96       	adiw	r26, 0x03	; 3
    9864:	3c 93       	st	X, r19
    9866:	2e 93       	st	-X, r18
    9868:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    986a:	91 83       	std	Z+1, r25	; 0x01
    986c:	80 83       	st	Z, r24
}
    986e:	0f 90       	pop	r0
    9870:	df 91       	pop	r29
    9872:	cf 91       	pop	r28
    9874:	1f 91       	pop	r17
    9876:	0f 91       	pop	r16
    9878:	08 95       	ret

0000987a <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    987a:	af 92       	push	r10
    987c:	bf 92       	push	r11
    987e:	cf 92       	push	r12
    9880:	df 92       	push	r13
    9882:	ef 92       	push	r14
    9884:	ff 92       	push	r15
    9886:	0f 93       	push	r16
    9888:	1f 93       	push	r17
    988a:	cf 93       	push	r28
    988c:	df 93       	push	r29
    988e:	1f 92       	push	r1
    9890:	cd b7       	in	r28, 0x3d	; 61
    9892:	de b7       	in	r29, 0x3e	; 62
    9894:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9896:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9898:	c6 2e       	mov	r12, r22
    989a:	d1 2c       	mov	r13, r1
    989c:	90 e0       	ldi	r25, 0x00	; 0
    989e:	5c 01       	movw	r10, r24
    98a0:	a4 1a       	sub	r10, r20
    98a2:	b5 0a       	sbc	r11, r21
    98a4:	80 2f       	mov	r24, r16
    98a6:	8e 19       	sub	r24, r14
	p_prev[index] = p->held;
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    98a8:	82 17       	cp	r24, r18
    98aa:	60 f4       	brcc	.+24     	; 0x98c4 <LBPrintStr+0x4a>
    98ac:	c5 01       	movw	r24, r10
    98ae:	80 0f       	add	r24, r16
    98b0:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    98b2:	f8 01       	movw	r30, r16
    98b4:	41 91       	ld	r20, Z+
    98b6:	8f 01       	movw	r16, r30
    98b8:	b6 01       	movw	r22, r12
    98ba:	29 83       	std	Y+1, r18	; 0x01
    98bc:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
    98c0:	29 81       	ldd	r18, Y+1	; 0x01
    98c2:	f0 cf       	rjmp	.-32     	; 0x98a4 <LBPrintStr+0x2a>
	}
}
    98c4:	0f 90       	pop	r0
    98c6:	df 91       	pop	r29
    98c8:	cf 91       	pop	r28
    98ca:	1f 91       	pop	r17
    98cc:	0f 91       	pop	r16
    98ce:	ff 90       	pop	r15
    98d0:	ef 90       	pop	r14
    98d2:	df 90       	pop	r13
    98d4:	cf 90       	pop	r12
    98d6:	bf 90       	pop	r11
    98d8:	af 90       	pop	r10
    98da:	08 95       	ret

000098dc <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
    98dc:	af 92       	push	r10
    98de:	bf 92       	push	r11
    98e0:	cf 92       	push	r12
    98e2:	df 92       	push	r13
    98e4:	ef 92       	push	r14
    98e6:	ff 92       	push	r15
    98e8:	0f 93       	push	r16
    98ea:	1f 93       	push	r17
    98ec:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    98ee:	26 0f       	add	r18, r22
    98f0:	37 1f       	adc	r19, r23
    98f2:	e2 16       	cp	r14, r18
    98f4:	f3 06       	cpc	r15, r19
    98f6:	80 f4       	brcc	.+32     	; 0x9918 <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    98f8:	ae 0c       	add	r10, r14
    98fa:	bf 1c       	adc	r11, r15
    98fc:	6a 15       	cp	r22, r10
    98fe:	7b 05       	cpc	r23, r11
    9900:	58 f4       	brcc	.+22     	; 0x9918 <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    9902:	48 0f       	add	r20, r24
    9904:	59 1f       	adc	r21, r25
    9906:	04 17       	cp	r16, r20
    9908:	15 07       	cpc	r17, r21
    990a:	30 f4       	brcc	.+12     	; 0x9918 <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    990c:	c0 0e       	add	r12, r16
    990e:	d1 1e       	adc	r13, r17
    9910:	81 e0       	ldi	r24, 0x01	; 1
    9912:	ec 15       	cp	r30, r12
    9914:	fd 05       	cpc	r31, r13
    9916:	08 f0       	brcs	.+2      	; 0x991a <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
	if (y1 + height1 <= y2) return 0;
    9918:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    991a:	1f 91       	pop	r17
    991c:	0f 91       	pop	r16
    991e:	ff 90       	pop	r15
    9920:	ef 90       	pop	r14
    9922:	df 90       	pop	r13
    9924:	cf 90       	pop	r12
    9926:	bf 90       	pop	r11
    9928:	af 90       	pop	r10
    992a:	08 95       	ret

0000992c <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    992c:	1f 93       	push	r17
    992e:	cf 93       	push	r28
    9930:	df 93       	push	r29
    9932:	1f 92       	push	r1
    9934:	cd b7       	in	r28, 0x3d	; 61
    9936:	de b7       	in	r29, 0x3e	; 62
    9938:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    993a:	80 e0       	ldi	r24, 0x00	; 0
    993c:	90 e0       	ldi	r25, 0x00	; 0
    993e:	69 83       	std	Y+1, r22	; 0x01
    9940:	0e 94 b0 3c 	call	0x7960	; 0x7960 <GetPrngNumber>
    9944:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    9946:	69 81       	ldd	r22, Y+1	; 0x01
    9948:	70 e0       	ldi	r23, 0x00	; 0
    994a:	61 1b       	sub	r22, r17
    994c:	71 09       	sbc	r23, r1
    994e:	6f 5f       	subi	r22, 0xFF	; 255
    9950:	7f 4f       	sbci	r23, 0xFF	; 255
    9952:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
}
    9956:	81 0f       	add	r24, r17
    9958:	0f 90       	pop	r0
    995a:	df 91       	pop	r29
    995c:	cf 91       	pop	r28
    995e:	1f 91       	pop	r17
    9960:	08 95       	ret

00009962 <LBWaitSeconds>:

void LBWaitSeconds(u16 seconds, u8 netMessageSize)
{
    9962:	0f 93       	push	r16
    9964:	1f 93       	push	r17
    9966:	cf 93       	push	r28
    9968:	df 93       	push	r29
    996a:	d6 2f       	mov	r29, r22
	seconds *= 60;
    996c:	2c e3       	ldi	r18, 0x3C	; 60
    996e:	28 9f       	mul	r18, r24
    9970:	80 01       	movw	r16, r0
    9972:	29 9f       	mul	r18, r25
    9974:	10 0d       	add	r17, r0
    9976:	11 24       	eor	r1, r1
	for(u8 i = 0; i < seconds; i++)
    9978:	c0 e0       	ldi	r28, 0x00	; 0
    997a:	2c 2f       	mov	r18, r28
    997c:	30 e0       	ldi	r19, 0x00	; 0
    997e:	20 17       	cp	r18, r16
    9980:	31 07       	cpc	r19, r17
    9982:	48 f4       	brcc	.+18     	; 0x9996 <LBWaitSeconds+0x34>
	{
		WaitVsync(1);
    9984:	81 e0       	ldi	r24, 0x01	; 1
    9986:	90 e0       	ldi	r25, 0x00	; 0
    9988:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
		wifiGetAndDiscard(netMessageSize);
    998c:	8d 2f       	mov	r24, r29
    998e:	0e 94 8b 4a 	call	0x9516	; 0x9516 <wifiGetAndDiscard>
}

void LBWaitSeconds(u16 seconds, u8 netMessageSize)
{
	seconds *= 60;
	for(u8 i = 0; i < seconds; i++)
    9992:	cf 5f       	subi	r28, 0xFF	; 255
    9994:	f2 cf       	rjmp	.-28     	; 0x997a <LBWaitSeconds+0x18>
		wifiGetAndDiscard(netMessageSize);
#if JAMMA
		handle_coin_insert();
#endif
	}
}
    9996:	df 91       	pop	r29
    9998:	cf 91       	pop	r28
    999a:	1f 91       	pop	r17
    999c:	0f 91       	pop	r16
    999e:	08 95       	ret

000099a0 <LBHideAllSprites>:

void LBHideAllSprites()
{
    99a0:	e8 ea       	ldi	r30, 0xA8	; 168
    99a2:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = OFF_SCREEN;
    99a4:	80 ef       	ldi	r24, 0xF0	; 240
    99a6:	80 83       	st	Z, r24
    99a8:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    99aa:	94 e0       	ldi	r25, 0x04	; 4
    99ac:	e0 3d       	cpi	r30, 0xD0	; 208
    99ae:	f9 07       	cpc	r31, r25
    99b0:	d1 f7       	brne	.-12     	; 0x99a6 <LBHideAllSprites+0x6>
	{
		sprites[i].x = OFF_SCREEN;
	}
}
    99b2:	08 95       	ret

000099b4 <LBPlaySound>:


void LBPlaySound(u8 game_selection, u8 p1_flags, u8 p2_flags, u8 patch)
{
    99b4:	82 2f       	mov	r24, r18
#if JAMMA
	if(no_demo_sound() && game_selection == CPUVCPU) {} else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
#else
	if (patch == PATCH_TANK_EXPLODE) TriggerFx(patch,0xff,true);
    99b6:	26 30       	cpi	r18, 0x06	; 6
    99b8:	11 f4       	brne	.+4      	; 0x99be <LBPlaySound+0xa>
    99ba:	0c 94 fe 49 	jmp	0x93fc	; 0x93fc <LBPlaySound.part.5>
    99be:	46 2b       	or	r20, r22
	else if (!((p1_flags & EXPLODING_FLAG) || (p2_flags & EXPLODING_FLAG))) TriggerFx(patch,0xff,true);
    99c0:	40 fd       	sbrc	r20, 0
    99c2:	04 c0       	rjmp	.+8      	; 0x99cc <LBPlaySound+0x18>
    99c4:	41 e0       	ldi	r20, 0x01	; 1
    99c6:	6f ef       	ldi	r22, 0xFF	; 255
    99c8:	0c 94 31 3e 	jmp	0x7c62	; 0x7c62 <TriggerFx>
    99cc:	08 95       	ret

000099ce <sendNetMessage>:
u8 activateNet() {
	return initWifi();
}

u8 sendNetMessage(NetMessage* msg) {
	return wifiSendBinary((char *) msg, sizeof(*msg));
    99ce:	6c e1       	ldi	r22, 0x1C	; 28
    99d0:	0c 94 3e 4a 	jmp	0x947c	; 0x947c <wifiSendBinary>

000099d4 <getNetMessage>:
}

u8 getNetMessage(NetMessage* msg) {
	return wifiGetIfAvailable((char*)msg, sizeof(*msg));
    99d4:	6c e1       	ldi	r22, 0x1C	; 28
    99d6:	0c 94 60 4a 	jmp	0x94c0	; 0x94c0 <wifiGetIfAvailable>

000099da <hostNetGame>:
}

u8 hostNetGame(char* ssid) {
    99da:	ef 92       	push	r14
    99dc:	ff 92       	push	r15
    99de:	0f 93       	push	r16
    99e0:	1f 93       	push	r17
    99e2:	cf 93       	push	r28
    99e4:	df 93       	push	r29
    99e6:	cd b7       	in	r28, 0x3d	; 61
    99e8:	de b7       	in	r29, 0x3e	; 62
    99ea:	c0 54       	subi	r28, 0x40	; 64
    99ec:	d1 09       	sbc	r29, r1
    99ee:	0f b6       	in	r0, 0x3f	; 63
    99f0:	f8 94       	cli
    99f2:	de bf       	out	0x3e, r29	; 62
    99f4:	0f be       	out	0x3f, r0	; 63
    99f6:	cd bf       	out	0x3d, r28	; 61
    99f8:	8c 01       	movw	r16, r24
	char buf[64];
	
	// Set SoftAP mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=2\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    99fa:	6e e2       	ldi	r22, 0x2E	; 46
    99fc:	72 e0       	ldi	r23, 0x02	; 2
    99fe:	8c e1       	ldi	r24, 0x1C	; 28
    9a00:	92 e0       	ldi	r25, 0x02	; 2
    9a02:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9a06:	81 11       	cpse	r24, r1
    9a08:	42 c0       	rjmp	.+132    	; 0x9a8e <hostNetGame+0xb4>
	// Set SopftAP IP address
	if (wifiRequestP(PSTR("AT+CIPAP_CUR=\"192.168.4.1\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a0a:	67 e1       	ldi	r22, 0x17	; 23
    9a0c:	72 e0       	ldi	r23, 0x02	; 2
    9a0e:	8a ef       	ldi	r24, 0xFA	; 250
    9a10:	91 e0       	ldi	r25, 0x01	; 1
    9a12:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9a16:	81 11       	cpse	r24, r1
    9a18:	3a c0       	rjmp	.+116    	; 0x9a8e <hostNetGame+0xb4>
	// Get SoftAP MAC address...
	wifiSendP(PSTR("AT+CIPAPMAC_CUR?\r\n"));
    9a1a:	87 ee       	ldi	r24, 0xE7	; 231
    9a1c:	91 e0       	ldi	r25, 0x01	; 1
    9a1e:	0e 94 02 4a 	call	0x9404	; 0x9404 <wifiSendP>
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
    9a22:	ce 01       	movw	r24, r28
    9a24:	01 96       	adiw	r24, 0x01	; 1
    9a26:	7c 01       	movw	r14, r24
    9a28:	bc 01       	movw	r22, r24
    9a2a:	82 ee       	ldi	r24, 0xE2	; 226
    9a2c:	91 e0       	ldi	r25, 0x01	; 1
    9a2e:	0e 94 9b 4a 	call	0x9536	; 0x9536 <wifiGetPB>
    9a32:	81 30       	cpi	r24, 0x01	; 1
    9a34:	91 f0       	breq	.+36     	; 0x9a5a <hostNetGame+0x80>
		ssid[0] = 'T';
    9a36:	84 e5       	ldi	r24, 0x54	; 84
    9a38:	f8 01       	movw	r30, r16
    9a3a:	80 83       	st	Z, r24
		ssid[1] = 'F';
    9a3c:	86 e4       	ldi	r24, 0x46	; 70
    9a3e:	81 83       	std	Z+1, r24	; 0x01
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9a40:	8c a5       	ldd	r24, Y+44	; 0x2c
    9a42:	82 83       	std	Z+2, r24	; 0x02
		   ssid[idx++] = buf[i+1];
    9a44:	8d a5       	ldd	r24, Y+45	; 0x2d
    9a46:	83 83       	std	Z+3, r24	; 0x03
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9a48:	8f a5       	ldd	r24, Y+47	; 0x2f
    9a4a:	84 83       	std	Z+4, r24	; 0x04
		   ssid[idx++] = buf[i+1];
    9a4c:	88 a9       	ldd	r24, Y+48	; 0x30
    9a4e:	85 83       	std	Z+5, r24	; 0x05
	if (wifiGetPB(PSTR("OK\r\n"), buf) != WIFI_TIMEOUT) {
		ssid[0] = 'T';
		ssid[1] = 'F';
		u8 idx = 2;
		for (u8 i = 43; i <= 49; i += 3) {
		   ssid[idx++] = buf[i];
    9a50:	8a a9       	ldd	r24, Y+50	; 0x32
    9a52:	86 83       	std	Z+6, r24	; 0x06
		   ssid[idx++] = buf[i+1];
    9a54:	8b a9       	ldd	r24, Y+51	; 0x33
    9a56:	87 83       	std	Z+7, r24	; 0x07
		}
		ssid[8] = 0;
    9a58:	10 86       	std	Z+8, r1	; 0x08
	}
	ssid = strupr(ssid);
    9a5a:	c8 01       	movw	r24, r16
    9a5c:	0e 94 bc 71 	call	0xe378	; 0xe378 <strupr>
	sprintf(buf, "AT+CWSAP_CUR=\"%s\",\"T4nkFuN3t\",5,3,1\r\n", ssid);
    9a60:	9f 93       	push	r25
    9a62:	8f 93       	push	r24
    9a64:	8d e0       	ldi	r24, 0x0D	; 13
    9a66:	91 e0       	ldi	r25, 0x01	; 1
    9a68:	9f 93       	push	r25
    9a6a:	8f 93       	push	r24
    9a6c:	ff 92       	push	r15
    9a6e:	ef 92       	push	r14
    9a70:	0e 94 c6 71 	call	0xe38c	; 0xe38c <sprintf>
	
	// Setup local access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a74:	6d ed       	ldi	r22, 0xDD	; 221
    9a76:	71 e0       	ldi	r23, 0x01	; 1
    9a78:	c7 01       	movw	r24, r14
    9a7a:	0e 94 1c 4b 	call	0x9638	; 0x9638 <wifiRequest>
    9a7e:	0f 90       	pop	r0
    9a80:	0f 90       	pop	r0
    9a82:	0f 90       	pop	r0
    9a84:	0f 90       	pop	r0
    9a86:	0f 90       	pop	r0
    9a88:	0f 90       	pop	r0
    9a8a:	88 23       	and	r24, r24
    9a8c:	11 f0       	breq	.+4      	; 0x9a92 <hostNetGame+0xb8>
    9a8e:	91 e0       	ldi	r25, 0x01	; 1
    9a90:	1a c0       	rjmp	.+52     	; 0x9ac6 <hostNetGame+0xec>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.2\",1001,2233,0\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9a92:	68 ed       	ldi	r22, 0xD8	; 216
    9a94:	71 e0       	ldi	r23, 0x01	; 1
    9a96:	8a ea       	ldi	r24, 0xAA	; 170
    9a98:	91 e0       	ldi	r25, 0x01	; 1
    9a9a:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9a9e:	81 11       	cpse	r24, r1
    9aa0:	f6 cf       	rjmp	.-20     	; 0x9a8e <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9aa2:	65 ea       	ldi	r22, 0xA5	; 165
    9aa4:	71 e0       	ldi	r23, 0x01	; 1
    9aa6:	86 e9       	ldi	r24, 0x96	; 150
    9aa8:	91 e0       	ldi	r25, 0x01	; 1
    9aaa:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9aae:	81 11       	cpse	r24, r1
    9ab0:	ee cf       	rjmp	.-36     	; 0x9a8e <hostNetGame+0xb4>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    9ab2:	6e e8       	ldi	r22, 0x8E	; 142
    9ab4:	71 e0       	ldi	r23, 0x01	; 1
    9ab6:	81 e8       	ldi	r24, 0x81	; 129
    9ab8:	91 e0       	ldi	r25, 0x01	; 1
    9aba:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9abe:	91 e0       	ldi	r25, 0x01	; 1
    9ac0:	81 11       	cpse	r24, r1
    9ac2:	01 c0       	rjmp	.+2      	; 0x9ac6 <hostNetGame+0xec>
    9ac4:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    9ac6:	89 2f       	mov	r24, r25
    9ac8:	c0 5c       	subi	r28, 0xC0	; 192
    9aca:	df 4f       	sbci	r29, 0xFF	; 255
    9acc:	0f b6       	in	r0, 0x3f	; 63
    9ace:	f8 94       	cli
    9ad0:	de bf       	out	0x3e, r29	; 62
    9ad2:	0f be       	out	0x3f, r0	; 63
    9ad4:	cd bf       	out	0x3d, r28	; 61
    9ad6:	df 91       	pop	r29
    9ad8:	cf 91       	pop	r28
    9ada:	1f 91       	pop	r17
    9adc:	0f 91       	pop	r16
    9ade:	ff 90       	pop	r15
    9ae0:	ef 90       	pop	r14
    9ae2:	08 95       	ret

00009ae4 <joinNetGame>:

u8 joinNetGame(char* ssid) {
    9ae4:	0f 93       	push	r16
    9ae6:	1f 93       	push	r17
    9ae8:	cf 93       	push	r28
    9aea:	df 93       	push	r29
    9aec:	cd b7       	in	r28, 0x3d	; 61
    9aee:	de b7       	in	r29, 0x3e	; 62
    9af0:	a6 97       	sbiw	r28, 0x26	; 38
    9af2:	0f b6       	in	r0, 0x3f	; 63
    9af4:	f8 94       	cli
    9af6:	de bf       	out	0x3e, r29	; 62
    9af8:	0f be       	out	0x3f, r0	; 63
    9afa:	cd bf       	out	0x3d, r28	; 61
	char buf[38];
	
	sprintf(buf, "AT+CWJAP_CUR=\"%s\",\"T4nkFuN3t\"\r\n", ssid);
    9afc:	9f 93       	push	r25
    9afe:	8f 93       	push	r24
    9b00:	83 e3       	ldi	r24, 0x33	; 51
    9b02:	91 e0       	ldi	r25, 0x01	; 1
    9b04:	9f 93       	push	r25
    9b06:	8f 93       	push	r24
    9b08:	8e 01       	movw	r16, r28
    9b0a:	0f 5f       	subi	r16, 0xFF	; 255
    9b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    9b0e:	1f 93       	push	r17
    9b10:	0f 93       	push	r16
    9b12:	0e 94 c6 71 	call	0xe38c	; 0xe38c <sprintf>
	
	// Set Station mode...
	if (wifiRequestP(PSTR("AT+CWMODE_CUR=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9b16:	6c e7       	ldi	r22, 0x7C	; 124
    9b18:	71 e0       	ldi	r23, 0x01	; 1
    9b1a:	8a e6       	ldi	r24, 0x6A	; 106
    9b1c:	91 e0       	ldi	r25, 0x01	; 1
    9b1e:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9b22:	0f 90       	pop	r0
    9b24:	0f 90       	pop	r0
    9b26:	0f 90       	pop	r0
    9b28:	0f 90       	pop	r0
    9b2a:	0f 90       	pop	r0
    9b2c:	0f 90       	pop	r0
    9b2e:	88 23       	and	r24, r24
    9b30:	11 f0       	breq	.+4      	; 0x9b36 <joinNetGame+0x52>
    9b32:	91 e0       	ldi	r25, 0x01	; 1
    9b34:	29 c0       	rjmp	.+82     	; 0x9b88 <joinNetGame+0xa4>
	// Connect to access point...
	if (wifiRequest(buf,PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9b36:	65 e6       	ldi	r22, 0x65	; 101
    9b38:	71 e0       	ldi	r23, 0x01	; 1
    9b3a:	c8 01       	movw	r24, r16
    9b3c:	0e 94 1c 4b 	call	0x9638	; 0x9638 <wifiRequest>
    9b40:	81 11       	cpse	r24, r1
    9b42:	f7 cf       	rjmp	.-18     	; 0x9b32 <joinNetGame+0x4e>
	// Set station IP address
	if (wifiRequestP(PSTR("AT+CIPSTA_CUR=\"192.168.4.2\"\r\n"), PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9b44:	60 e6       	ldi	r22, 0x60	; 96
    9b46:	71 e0       	ldi	r23, 0x01	; 1
    9b48:	82 e4       	ldi	r24, 0x42	; 66
    9b4a:	91 e0       	ldi	r25, 0x01	; 1
    9b4c:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9b50:	81 11       	cpse	r24, r1
    9b52:	ef cf       	rjmp	.-34     	; 0x9b32 <joinNetGame+0x4e>
	// Activate UDP Passthrough mode
	if (wifiRequestP(PSTR("AT+CIPSTART=\"UDP\",\"192.168.4.1\",2233,1001\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9b54:	6d e3       	ldi	r22, 0x3D	; 61
    9b56:	71 e0       	ldi	r23, 0x01	; 1
    9b58:	81 e1       	ldi	r24, 0x11	; 17
    9b5a:	91 e0       	ldi	r25, 0x01	; 1
    9b5c:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9b60:	81 11       	cpse	r24, r1
    9b62:	e7 cf       	rjmp	.-50     	; 0x9b32 <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPMODE=1\r\n"),PSTR("OK\r\n")) != WIFI_OK) return WIFI_TIMEOUT;
    9b64:	6c e0       	ldi	r22, 0x0C	; 12
    9b66:	71 e0       	ldi	r23, 0x01	; 1
    9b68:	8d ef       	ldi	r24, 0xFD	; 253
    9b6a:	90 e0       	ldi	r25, 0x00	; 0
    9b6c:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9b70:	81 11       	cpse	r24, r1
    9b72:	df cf       	rjmp	.-66     	; 0x9b32 <joinNetGame+0x4e>
	if (wifiRequestP(PSTR("AT+CIPSEND\r\n"),PSTR("OK\r\n\r\n>")) != WIFI_OK) return WIFI_TIMEOUT;
    9b74:	65 ef       	ldi	r22, 0xF5	; 245
    9b76:	70 e0       	ldi	r23, 0x00	; 0
    9b78:	88 ee       	ldi	r24, 0xE8	; 232
    9b7a:	90 e0       	ldi	r25, 0x00	; 0
    9b7c:	0e 94 0a 4b 	call	0x9614	; 0x9614 <wifiRequestP>
    9b80:	91 e0       	ldi	r25, 0x01	; 1
    9b82:	81 11       	cpse	r24, r1
    9b84:	01 c0       	rjmp	.+2      	; 0x9b88 <joinNetGame+0xa4>
    9b86:	90 e0       	ldi	r25, 0x00	; 0
	return WIFI_OK;
}
    9b88:	89 2f       	mov	r24, r25
    9b8a:	a6 96       	adiw	r28, 0x26	; 38
    9b8c:	0f b6       	in	r0, 0x3f	; 63
    9b8e:	f8 94       	cli
    9b90:	de bf       	out	0x3e, r29	; 62
    9b92:	0f be       	out	0x3f, r0	; 63
    9b94:	cd bf       	out	0x3d, r28	; 61
    9b96:	df 91       	pop	r29
    9b98:	cf 91       	pop	r28
    9b9a:	1f 91       	pop	r17
    9b9c:	0f 91       	pop	r16
    9b9e:	08 95       	ret

00009ba0 <init_scores>:
struct EepromBlockStruct scores;

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9ba0:	2b e8       	ldi	r18, 0x8B	; 139
    9ba2:	30 e0       	ldi	r19, 0x00	; 0
    9ba4:	fc 01       	movw	r30, r24
    9ba6:	21 93       	st	Z+, r18
    9ba8:	31 93       	st	Z+, r19
    9baa:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9bac:	4e e1       	ldi	r20, 0x1E	; 30
    9bae:	50 e0       	ldi	r21, 0x00	; 0
    9bb0:	6f ec       	ldi	r22, 0xCF	; 207
    9bb2:	72 e0       	ldi	r23, 0x02	; 2
    9bb4:	0c 94 a8 71 	jmp	0xe350	; 0xe350 <memcpy_P>

00009bb8 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9bb8:	2a e8       	ldi	r18, 0x8A	; 138
    9bba:	30 e0       	ldi	r19, 0x00	; 0
    9bbc:	fc 01       	movw	r30, r24
    9bbe:	21 93       	st	Z+, r18
    9bc0:	31 93       	st	Z+, r19
    9bc2:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9bc4:	4e e1       	ldi	r20, 0x1E	; 30
    9bc6:	50 e0       	ldi	r21, 0x00	; 0
    9bc8:	6d ee       	ldi	r22, 0xED	; 237
    9bca:	72 e0       	ldi	r23, 0x02	; 2
    9bcc:	0c 94 a8 71 	jmp	0xe350	; 0xe350 <memcpy_P>

00009bd0 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9bd0:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9bd2:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9bd4:	16 86       	std	Z+14, r1	; 0x0e
    9bd6:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    9bd8:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9bda:	73 e0       	ldi	r23, 0x03	; 3
    9bdc:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9bde:	65 e0       	ldi	r22, 0x05	; 5
    9be0:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9be2:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    9be4:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    9be6:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9be8:	45 e2       	ldi	r20, 0x25	; 37
    9bea:	5b e6       	ldi	r21, 0x6B	; 107
    9bec:	50 87       	std	Z+8, r21	; 0x08
    9bee:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9bf0:	22 e2       	ldi	r18, 0x22	; 34
    9bf2:	3b e6       	ldi	r19, 0x6B	; 107
    9bf4:	32 87       	std	Z+10, r19	; 0x0a
    9bf6:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9bf8:	8f e1       	ldi	r24, 0x1F	; 31
    9bfa:	9b e6       	ldi	r25, 0x6B	; 107
    9bfc:	94 87       	std	Z+12, r25	; 0x0c
    9bfe:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9c00:	14 8e       	std	Z+28, r1	; 0x1c
    9c02:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    9c04:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    9c06:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9c08:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    9c0a:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    9c0c:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    9c0e:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9c10:	56 8b       	std	Z+22, r21	; 0x16
    9c12:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9c14:	30 8f       	std	Z+24, r19	; 0x18
    9c16:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9c18:	92 8f       	std	Z+26, r25	; 0x1a
    9c1a:	81 8f       	std	Z+25, r24	; 0x19
    9c1c:	08 95       	ret

00009c1e <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    9c1e:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c20:	15 86       	std	Z+13, r1	; 0x0d
    9c22:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9c24:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    9c26:	83 e0       	ldi	r24, 0x03	; 3
    9c28:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    9c2a:	8e e1       	ldi	r24, 0x1E	; 30
    9c2c:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c2e:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c30:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c32:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    9c34:	8b ef       	ldi	r24, 0xFB	; 251
    9c36:	9a e6       	ldi	r25, 0x6A	; 106
    9c38:	97 83       	std	Z+7, r25	; 0x07
    9c3a:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    9c3c:	88 ef       	ldi	r24, 0xF8	; 248
    9c3e:	9a e6       	ldi	r25, 0x6A	; 106
    9c40:	91 87       	std	Z+9, r25	; 0x09
    9c42:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    9c44:	85 ef       	ldi	r24, 0xF5	; 245
    9c46:	9a e6       	ldi	r25, 0x6A	; 106
    9c48:	93 87       	std	Z+11, r25	; 0x0b
    9c4a:	82 87       	std	Z+10, r24	; 0x0a
    9c4c:	08 95       	ret

00009c4e <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    9c4e:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    9c50:	15 86       	std	Z+13, r1	; 0x0d
    9c52:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    9c54:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    9c56:	82 e0       	ldi	r24, 0x02	; 2
    9c58:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    9c5a:	8c e3       	ldi	r24, 0x3C	; 60
    9c5c:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    9c5e:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    9c60:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    9c62:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    9c64:	89 e8       	ldi	r24, 0x89	; 137
    9c66:	98 e6       	ldi	r25, 0x68	; 104
    9c68:	97 83       	std	Z+7, r25	; 0x07
    9c6a:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    9c6c:	8f eb       	ldi	r24, 0xBF	; 191
    9c6e:	99 e6       	ldi	r25, 0x69	; 105
    9c70:	91 87       	std	Z+9, r25	; 0x09
    9c72:	80 87       	std	Z+8, r24	; 0x08
    9c74:	08 95       	ret

00009c76 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9c76:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9c78:	80 ee       	ldi	r24, 0xE0	; 224
    9c7a:	9e e2       	ldi	r25, 0x2E	; 46
    9c7c:	92 83       	std	Z+2, r25	; 0x02
    9c7e:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9c80:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9c82:	13 82       	std	Z+3, r1	; 0x03
	s->active = 0;
    9c84:	13 86       	std	Z+11, r1	; 0x0b
	s->distance = 0;
    9c86:	15 86       	std	Z+13, r1	; 0x0d
    9c88:	14 86       	std	Z+12, r1	; 0x0c
	s->shot_type = shot_type;
    9c8a:	60 87       	std	Z+8, r22	; 0x08
	s->rebounds = SHOT_REBOUNDS;
    9c8c:	84 e0       	ldi	r24, 0x04	; 4
    9c8e:	82 87       	std	Z+10, r24	; 0x0a
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9c90:	66 23       	and	r22, r22
    9c92:	11 f0       	breq	.+4      	; 0x9c98 <init_shot_state+0x22>
    9c94:	85 e0       	ldi	r24, 0x05	; 5
    9c96:	01 c0       	rjmp	.+2      	; 0x9c9a <init_shot_state+0x24>
    9c98:	81 e0       	ldi	r24, 0x01	; 1
    9c9a:	81 87       	std	Z+9, r24	; 0x09
	s->shared.x = OFF_SCREEN*100;
    9c9c:	80 ec       	ldi	r24, 0xC0	; 192
    9c9e:	9d e5       	ldi	r25, 0x5D	; 93
    9ca0:	95 83       	std	Z+5, r25	; 0x05
    9ca2:	84 83       	std	Z+4, r24	; 0x04
	s->shared.y = 0;
    9ca4:	17 82       	std	Z+7, r1	; 0x07
    9ca6:	16 82       	std	Z+6, r1	; 0x06
    9ca8:	08 95       	ret

00009caa <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9caa:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9cac:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    9cae:	82 e0       	ldi	r24, 0x02	; 2
    9cb0:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9cb2:	85 e0       	ldi	r24, 0x05	; 5
    9cb4:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    9cb6:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.looped = 0;
    9cb8:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.reversing = 0;
    9cba:	13 8a       	std	Z+19, r1	; 0x13
	if (shot_type == BASIC_SHOT)
    9cbc:	61 11       	cpse	r22, r1
    9cbe:	03 c0       	rjmp	.+6      	; 0x9cc6 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    9cc0:	83 e9       	ldi	r24, 0x93	; 147
    9cc2:	91 e3       	ldi	r25, 0x31	; 49
    9cc4:	13 c0       	rjmp	.+38     	; 0x9cec <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    9cc6:	61 30       	cpi	r22, 0x01	; 1
    9cc8:	79 f4       	brne	.+30     	; 0x9ce8 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    9cca:	80 e9       	ldi	r24, 0x90	; 144
    9ccc:	91 e3       	ldi	r25, 0x31	; 49
    9cce:	95 8b       	std	Z+21, r25	; 0x15
    9cd0:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    9cd2:	8d e8       	ldi	r24, 0x8D	; 141
    9cd4:	91 e3       	ldi	r25, 0x31	; 49
    9cd6:	97 8b       	std	Z+23, r25	; 0x17
    9cd8:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    9cda:	8a e8       	ldi	r24, 0x8A	; 138
    9cdc:	91 e3       	ldi	r25, 0x31	; 49
    9cde:	91 a3       	std	Z+33, r25	; 0x21
    9ce0:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    9ce2:	87 e8       	ldi	r24, 0x87	; 135
    9ce4:	91 e3       	ldi	r25, 0x31	; 49
    9ce6:	08 c0       	rjmp	.+16     	; 0x9cf8 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    9ce8:	8b e7       	ldi	r24, 0x7B	; 123
    9cea:	91 e3       	ldi	r25, 0x31	; 49
    9cec:	95 8b       	std	Z+21, r25	; 0x15
    9cee:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_sub_shot;
    9cf0:	97 8b       	std	Z+23, r25	; 0x17
    9cf2:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_sub_shot;
    9cf4:	91 a3       	std	Z+33, r25	; 0x21
    9cf6:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_sub_shot;
    9cf8:	93 a3       	std	Z+35, r25	; 0x23
    9cfa:	82 a3       	std	Z+34, r24	; 0x22
	}
	s->up_anim.current_anim = 0;
    9cfc:	16 86       	std	Z+14, r1	; 0x0e
	s->right_anim.anim_count = 2;
    9cfe:	82 e0       	ldi	r24, 0x02	; 2
    9d00:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d02:	85 e0       	ldi	r24, 0x05	; 5
    9d04:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    9d06:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.looped = 0;
    9d08:	16 8e       	std	Z+30, r1	; 0x1e
	s->right_anim.reversing = 0;
    9d0a:	17 8e       	std	Z+31, r1	; 0x1f
    9d0c:	08 95       	ret

00009d0e <init_turret>:
}

void init_turret(Turret* t, u16 x, u16 y)
{
    9d0e:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    9d10:	85 e0       	ldi	r24, 0x05	; 5
    9d12:	80 87       	std	Z+8, r24	; 0x08
	t->shared.direction = D_LEFT;
    9d14:	83 e0       	ldi	r24, 0x03	; 3
    9d16:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    9d18:	13 82       	std	Z+3, r1	; 0x03
	t->shared.speed = BOSS_TURRET_SPEED;
    9d1a:	88 e2       	ldi	r24, 0x28	; 40
    9d1c:	93 e2       	ldi	r25, 0x23	; 35
    9d1e:	92 83       	std	Z+2, r25	; 0x02
    9d20:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    9d22:	75 83       	std	Z+5, r23	; 0x05
    9d24:	64 83       	std	Z+4, r22	; 0x04
	t->shared.y = y;
    9d26:	57 83       	std	Z+7, r21	; 0x07
    9d28:	46 83       	std	Z+6, r20	; 0x06
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    9d2a:	88 ea       	ldi	r24, 0xA8	; 168
    9d2c:	91 e6       	ldi	r25, 0x61	; 97
    9d2e:	93 87       	std	Z+11, r25	; 0x0b
    9d30:	82 87       	std	Z+10, r24	; 0x0a
		t->shot[i].shared.direction = D_DOWN;
    9d32:	82 e0       	ldi	r24, 0x02	; 2
    9d34:	81 87       	std	Z+9, r24	; 0x09
		t->shot[i].shared.recoiled = 0;
    9d36:	14 86       	std	Z+12, r1	; 0x0c
		t->shot[i].shared.x = OFF_SCREEN*100;
    9d38:	20 ec       	ldi	r18, 0xC0	; 192
    9d3a:	3d e5       	ldi	r19, 0x5D	; 93
    9d3c:	36 87       	std	Z+14, r19	; 0x0e
    9d3e:	25 87       	std	Z+13, r18	; 0x0d
		t->shot[i].shared.y = 0;
    9d40:	10 8a       	std	Z+16, r1	; 0x10
    9d42:	17 86       	std	Z+15, r1	; 0x0f
		t->shot[i].active = 0;
    9d44:	14 8a       	std	Z+20, r1	; 0x14
		t->shot[i].distance = 10000;
    9d46:	20 e1       	ldi	r18, 0x10	; 16
    9d48:	37 e2       	ldi	r19, 0x27	; 39
    9d4a:	36 8b       	std	Z+22, r19	; 0x16
    9d4c:	25 8b       	std	Z+21, r18	; 0x15
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    9d4e:	81 8b       	std	Z+17, r24	; 0x11
		t->shot[i].rebounds = SHOT_REBOUNDS;
    9d50:	84 e0       	ldi	r24, 0x04	; 4
    9d52:	83 8b       	std	Z+19, r24	; 0x13
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    9d54:	81 e0       	ldi	r24, 0x01	; 1
    9d56:	82 8b       	std	Z+18, r24	; 0x12
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    9d58:	62 e0       	ldi	r22, 0x02	; 2
    9d5a:	cf 01       	movw	r24, r30
    9d5c:	09 96       	adiw	r24, 0x09	; 9
    9d5e:	0c 94 55 4e 	jmp	0x9caa	; 0x9caa <set_shot_animations>

00009d62 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9d62:	0f 93       	push	r16
    9d64:	1f 93       	push	r17
    9d66:	cf 93       	push	r28
    9d68:	df 93       	push	r29
    9d6a:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    9d6c:	88 e7       	ldi	r24, 0x78	; 120
    9d6e:	8a 87       	std	Y+10, r24	; 0x0a
	p->netMessage.score = 0;
    9d70:	fe 01       	movw	r30, r28
    9d72:	e1 59       	subi	r30, 0x91	; 145
    9d74:	ff 4f       	sbci	r31, 0xFF	; 255
    9d76:	10 82       	st	Z, r1
	p->netMessage.level_score = 0;
    9d78:	31 96       	adiw	r30, 0x01	; 1
    9d7a:	10 82       	st	Z, r1
	p->netMessage.shared.direction = D_UP;
    9d7c:	32 96       	adiw	r30, 0x02	; 2
    9d7e:	10 82       	st	Z, r1
	p->netMessage.shared.speed = 0;
    9d80:	31 96       	adiw	r30, 0x01	; 1
    9d82:	11 82       	std	Z+1, r1	; 0x01
    9d84:	10 82       	st	Z, r1
	p->netMessage.shared.recoiled = 0;
    9d86:	32 96       	adiw	r30, 0x02	; 2
    9d88:	10 82       	st	Z, r1
	p->old_level_score = 0;
    9d8a:	1a 8a       	std	Y+18, r1	; 0x12
	p->max_speed = MAX_SPEED;
    9d8c:	88 e8       	ldi	r24, 0x88	; 136
    9d8e:	93 e1       	ldi	r25, 0x13	; 19
    9d90:	9c 87       	std	Y+12, r25	; 0x0c
    9d92:	8b 87       	std	Y+11, r24	; 0x0b
	p->has_over_speed = false;
    9d94:	1e 86       	std	Y+14, r1	; 0x0e
	p->has_rocket = false;
    9d96:	1d 86       	std	Y+13, r1	; 0x0d
	p->netMessage.flags = 0;
    9d98:	34 97       	sbiw	r30, 0x04	; 4
    9d9a:	10 82       	st	Z, r1

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9d9c:	ba 97       	sbiw	r30, 0x2a	; 42
    9d9e:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9da0:	31 96       	adiw	r30, 0x01	; 1
    9da2:	91 e0       	ldi	r25, 0x01	; 1
    9da4:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9da6:	31 96       	adiw	r30, 0x01	; 1
    9da8:	85 e0       	ldi	r24, 0x05	; 5
    9daa:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9dac:	31 96       	adiw	r30, 0x01	; 1
    9dae:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    9db0:	31 96       	adiw	r30, 0x01	; 1
    9db2:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    9db4:	31 96       	adiw	r30, 0x01	; 1
    9db6:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9db8:	31 96       	adiw	r30, 0x01	; 1
    9dba:	71 83       	std	Z+1, r23	; 0x01
    9dbc:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9dbe:	36 96       	adiw	r30, 0x06	; 6
    9dc0:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9dc2:	31 96       	adiw	r30, 0x01	; 1
    9dc4:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9dc6:	31 96       	adiw	r30, 0x01	; 1
    9dc8:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9dca:	31 96       	adiw	r30, 0x01	; 1
    9dcc:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    9dce:	31 96       	adiw	r30, 0x01	; 1
    9dd0:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    9dd2:	31 96       	adiw	r30, 0x01	; 1
    9dd4:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9dd6:	31 96       	adiw	r30, 0x01	; 1
    9dd8:	51 83       	std	Z+1, r21	; 0x01
    9dda:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9ddc:	36 96       	adiw	r30, 0x06	; 6
    9dde:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9de0:	31 96       	adiw	r30, 0x01	; 1
    9de2:	93 e0       	ldi	r25, 0x03	; 3
    9de4:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9de6:	31 96       	adiw	r30, 0x01	; 1
    9de8:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9dea:	31 96       	adiw	r30, 0x01	; 1
    9dec:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    9dee:	31 96       	adiw	r30, 0x01	; 1
    9df0:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    9df2:	31 96       	adiw	r30, 0x01	; 1
    9df4:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9df6:	31 96       	adiw	r30, 0x01	; 1
    9df8:	82 ea       	ldi	r24, 0xA2	; 162
    9dfa:	91 e3       	ldi	r25, 0x31	; 49
    9dfc:	91 83       	std	Z+1, r25	; 0x01
    9dfe:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9e00:	32 96       	adiw	r30, 0x02	; 2
    9e02:	8c e9       	ldi	r24, 0x9C	; 156
    9e04:	91 e3       	ldi	r25, 0x31	; 49
    9e06:	91 83       	std	Z+1, r25	; 0x01
    9e08:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9e0a:	32 96       	adiw	r30, 0x02	; 2
    9e0c:	86 e9       	ldi	r24, 0x96	; 150
    9e0e:	91 e3       	ldi	r25, 0x31	; 49
    9e10:	91 83       	std	Z+1, r25	; 0x01
    9e12:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9e14:	1c 82       	std	Y+4, r1	; 0x04
	p->old_active_shots = 0;
    9e16:	1d 82       	std	Y+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9e18:	8e 01       	movw	r16, r28
    9e1a:	0f 5d       	subi	r16, 0xDF	; 223
    9e1c:	1f 4f       	sbci	r17, 0xFF	; 255
    9e1e:	60 e0       	ldi	r22, 0x00	; 0
    9e20:	c8 01       	movw	r24, r16
    9e22:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9e26:	60 e0       	ldi	r22, 0x00	; 0
    9e28:	c8 01       	movw	r24, r16
    9e2a:	0e 94 55 4e 	call	0x9caa	; 0x9caa <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9e2e:	1f 86       	std	Y+15, r1	; 0x0f
	p->goal_direction = 0;
    9e30:	1c 8a       	std	Y+20, r1	; 0x14
    9e32:	1b 8a       	std	Y+19, r1	; 0x13
	p->goal = 0;
    9e34:	19 8e       	std	Y+25, r1	; 0x19
	p->goal_reached = 0;
    9e36:	1a 8e       	std	Y+26, r1	; 0x1a
	p->old_x = 0;
    9e38:	1e 8e       	std	Y+30, r1	; 0x1e
    9e3a:	1d 8e       	std	Y+29, r1	; 0x1d
	p->old_y = 0;
    9e3c:	18 a2       	std	Y+32, r1	; 0x20
    9e3e:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_x = 0;
    9e40:	1e 8a       	std	Y+22, r1	; 0x16
    9e42:	1d 8a       	std	Y+21, r1	; 0x15
	p->deadlock_count_y = 0;
    9e44:	18 8e       	std	Y+24, r1	; 0x18
    9e46:	1f 8a       	std	Y+23, r1	; 0x17
}
    9e48:	df 91       	pop	r29
    9e4a:	cf 91       	pop	r28
    9e4c:	1f 91       	pop	r17
    9e4e:	0f 91       	pop	r16
    9e50:	08 95       	ret

00009e52 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9e52:	fc 01       	movw	r30, r24
    9e54:	14 82       	std	Z+4, r1	; 0x04
	player->old_active_shots = 0;
    9e56:	15 82       	std	Z+5, r1	; 0x05
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9e58:	60 e0       	ldi	r22, 0x00	; 0
    9e5a:	81 96       	adiw	r24, 0x21	; 33
    9e5c:	0c 94 3b 4e 	jmp	0x9c76	; 0x9c76 <init_shot_state>

00009e60 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9e60:	e6 eb       	ldi	r30, 0xB6	; 182
    9e62:	fb e0       	ldi	r31, 0x0B	; 11
    9e64:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9e66:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    9e68:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    9e6a:	14 86       	std	Z+12, r1	; 0x0c
    9e6c:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    9e6e:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    9e70:	10 8a       	std	Z+16, r1	; 0x10
    9e72:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    9e74:	12 8a       	std	Z+18, r1	; 0x12
    9e76:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    9e78:	82 e0       	ldi	r24, 0x02	; 2
    9e7a:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    9e7c:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    9e7e:	84 e1       	ldi	r24, 0x14	; 20
    9e80:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    9e82:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    9e84:	12 86       	std	Z+10, r1	; 0x0a
    9e86:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    9e88:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    9e8a:	16 86       	std	Z+14, r1	; 0x0e
    9e8c:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9e8e:	44 eb       	ldi	r20, 0xB4	; 180
    9e90:	51 e3       	ldi	r21, 0x31	; 49
    9e92:	6a eb       	ldi	r22, 0xBA	; 186
    9e94:	71 e3       	ldi	r23, 0x31	; 49
    9e96:	88 ee       	ldi	r24, 0xE8	; 232
    9e98:	9b e0       	ldi	r25, 0x0B	; 11
    9e9a:	0e 94 b1 4e 	call	0x9d62	; 0x9d62 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9e9e:	48 ea       	ldi	r20, 0xA8	; 168
    9ea0:	51 e3       	ldi	r21, 0x31	; 49
    9ea2:	6e ea       	ldi	r22, 0xAE	; 174
    9ea4:	71 e3       	ldi	r23, 0x31	; 49
    9ea6:	8e e5       	ldi	r24, 0x5E	; 94
    9ea8:	9f e0       	ldi	r25, 0x0F	; 15
    9eaa:	0c 94 b1 4e 	jmp	0x9d62	; 0x9d62 <init_player>

00009eae <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9eae:	cf 93       	push	r28
    9eb0:	df 93       	push	r29
    9eb2:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9eb4:	1a 86       	std	Y+10, r1	; 0x0a
	player->netMessage.shared.x = player->spawn_x;
    9eb6:	fc 01       	movw	r30, r24
    9eb8:	ea 58       	subi	r30, 0x8A	; 138
    9eba:	ff 4f       	sbci	r31, 0xFF	; 255
    9ebc:	8e 81       	ldd	r24, Y+6	; 0x06
    9ebe:	9f 81       	ldd	r25, Y+7	; 0x07
    9ec0:	91 83       	std	Z+1, r25	; 0x01
    9ec2:	80 83       	st	Z, r24
	player->netMessage.shared.y = player->spawn_y;
    9ec4:	32 96       	adiw	r30, 0x02	; 2
    9ec6:	88 85       	ldd	r24, Y+8	; 0x08
    9ec8:	99 85       	ldd	r25, Y+9	; 0x09
    9eca:	91 83       	std	Z+1, r25	; 0x01
    9ecc:	80 83       	st	Z, r24
	player->netMessage.shared.direction = D_UP;
    9ece:	36 97       	sbiw	r30, 0x06	; 6
    9ed0:	10 82       	st	Z, r1
	player->netMessage.shared.speed = 0;
    9ed2:	31 96       	adiw	r30, 0x01	; 1
    9ed4:	11 82       	std	Z+1, r1	; 0x01
    9ed6:	10 82       	st	Z, r1
	player->netMessage.shared.recoiled = 0;
    9ed8:	32 96       	adiw	r30, 0x02	; 2
    9eda:	10 82       	st	Z, r1
	player->tank_tactic = LBRandom(0, 2);
    9edc:	62 e0       	ldi	r22, 0x02	; 2
    9ede:	80 e0       	ldi	r24, 0x00	; 0
    9ee0:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    9ee4:	88 8b       	std	Y+16, r24	; 0x10
	player->shot_tactic = LBRandom(0, 2);
    9ee6:	62 e0       	ldi	r22, 0x02	; 2
    9ee8:	80 e0       	ldi	r24, 0x00	; 0
    9eea:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    9eee:	89 8b       	std	Y+17, r24	; 0x11
	
}
    9ef0:	df 91       	pop	r29
    9ef2:	cf 91       	pop	r28
    9ef4:	08 95       	ret

00009ef6 <waitForVSync>:

void waitForVSync()
{
    //ProcessSprites();
    WaitVsync(1);
    9ef6:	81 e0       	ldi	r24, 0x01	; 1
    9ef8:	90 e0       	ldi	r25, 0x00	; 0
    9efa:	0c 94 a4 49 	jmp	0x9348	; 0x9348 <WaitVsync>

00009efe <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9efe:	cf 93       	push	r28
    9f00:	df 93       	push	r29
    9f02:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9f04:	bc 01       	movw	r22, r24
    9f06:	88 81       	ld	r24, Y
    9f08:	99 81       	ldd	r25, Y+1	; 0x01
    9f0a:	0e 94 42 3c 	call	0x7884	; 0x7884 <EepromReadBlock>
	if (status == 0x03)
    9f0e:	83 30       	cpi	r24, 0x03	; 3
    9f10:	29 f4       	brne	.+10     	; 0x9f1c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9f12:	ce 01       	movw	r24, r28
	}
}
    9f14:	df 91       	pop	r29
    9f16:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9f18:	0c 94 f8 3b 	jmp	0x77f0	; 0x77f0 <EepromWriteBlock>
	}
}
    9f1c:	df 91       	pop	r29
    9f1e:	cf 91       	pop	r28
    9f20:	08 95       	ret

00009f22 <fade_through>:

void fade_through()
{
	//FadeOut(FRAMES_PER_FADE, true);
	ClearVram();
    9f22:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9f26:	60 e0       	ldi	r22, 0x00	; 0
    9f28:	83 e0       	ldi	r24, 0x03	; 3
    9f2a:	0c 94 c9 49 	jmp	0x9392	; 0x9392 <FadeIn>

00009f2e <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9f2e:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9f30:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9f32:	40 e0       	ldi	r20, 0x00	; 0
    9f34:	66 ec       	ldi	r22, 0xC6	; 198
    9f36:	71 e3       	ldi	r23, 0x31	; 49
    9f38:	8c 2f       	mov	r24, r28
    9f3a:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
    9f3e:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9f40:	ca 30       	cpi	r28, 0x0A	; 10
    9f42:	b9 f7       	brne	.-18     	; 0x9f32 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9f44:	cf 91       	pop	r28
    9f46:	08 95       	ret

00009f48 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9f48:	8f 92       	push	r8
    9f4a:	9f 92       	push	r9
    9f4c:	bf 92       	push	r11
    9f4e:	cf 92       	push	r12
    9f50:	df 92       	push	r13
    9f52:	ef 92       	push	r14
    9f54:	ff 92       	push	r15
    9f56:	0f 93       	push	r16
    9f58:	1f 93       	push	r17
    9f5a:	cf 93       	push	r28
    9f5c:	df 93       	push	r29
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
    9f5e:	90 91 57 0c 	lds	r25, 0x0C57
    9f62:	80 91 cd 0f 	lds	r24, 0x0FCD
    9f66:	98 17       	cp	r25, r24
    9f68:	28 f4       	brcc	.+10     	; 0x9f74 <save_score+0x2c>
	{
		p_win = &player2;
		p_lose = &player1;
    9f6a:	e8 ee       	ldi	r30, 0xE8	; 232
    9f6c:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
    9f6e:	ae e5       	ldi	r26, 0x5E	; 94
    9f70:	bf e0       	ldi	r27, 0x0F	; 15
    9f72:	04 c0       	rjmp	.+8      	; 0x9f7c <save_score+0x34>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9f74:	ee e5       	ldi	r30, 0x5E	; 94
    9f76:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9f78:	a8 ee       	ldi	r26, 0xE8	; 232
    9f7a:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.netMessage.score < player2.netMessage.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9f7c:	1c 91       	ld	r17, X
	save_score[1] = p_lose->handle_id;
    9f7e:	70 81       	ld	r23, Z
	save_score[2] = p_win->netMessage.score;
    9f80:	a1 59       	subi	r26, 0x91	; 145
    9f82:	bf 4f       	sbci	r27, 0xFF	; 255
    9f84:	6c 91       	ld	r22, X
	save_score[3] = p_lose->netMessage.score;
    9f86:	e1 59       	subi	r30, 0x91	; 145
    9f88:	ff 4f       	sbci	r31, 0xFF	; 255
    9f8a:	50 81       	ld	r21, Z
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    9f8c:	41 e0       	ldi	r20, 0x01	; 1
    9f8e:	80 91 b9 0b 	lds	r24, 0x0BB9
    9f92:	88 30       	cpi	r24, 0x08	; 8
    9f94:	09 f0       	breq	.+2      	; 0x9f98 <save_score+0x50>
    9f96:	40 e0       	ldi	r20, 0x00	; 0
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;
    9f98:	d6 2e       	mov	r13, r22
    9f9a:	d5 1a       	sub	r13, r21
    9f9c:	28 e7       	ldi	r18, 0x78	; 120
    9f9e:	3b e0       	ldi	r19, 0x0B	; 11
    9fa0:	89 e7       	ldi	r24, 0x79	; 121
    9fa2:	9b e0       	ldi	r25, 0x0B	; 11
    9fa4:	ea e7       	ldi	r30, 0x7A	; 122
    9fa6:	fb e0       	ldi	r31, 0x0B	; 11
    9fa8:	cb e7       	ldi	r28, 0x7B	; 123
    9faa:	db e0       	ldi	r29, 0x0B	; 11
    9fac:	ac e7       	ldi	r26, 0x7C	; 124
    9fae:	8a 2e       	mov	r8, r26
    9fb0:	ab e0       	ldi	r26, 0x0B	; 11
    9fb2:	9a 2e       	mov	r9, r26
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    9fb4:	00 e0       	ldi	r16, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    9fb6:	00 23       	and	r16, r16
    9fb8:	a1 f0       	breq	.+40     	; 0x9fe2 <save_score+0x9a>
		{
			memcpy(tmp_score, &scores.data[i], 5);
    9fba:	d9 01       	movw	r26, r18
    9fbc:	0c 91       	ld	r16, X
    9fbe:	dc 01       	movw	r26, r24
    9fc0:	fc 90       	ld	r15, X
    9fc2:	e0 80       	ld	r14, Z
    9fc4:	c8 80       	ld	r12, Y
    9fc6:	d4 01       	movw	r26, r8
    9fc8:	bc 90       	ld	r11, X
			memcpy(&scores.data[i], save_score, 5);
    9fca:	d9 01       	movw	r26, r18
    9fcc:	1c 93       	st	X, r17
    9fce:	dc 01       	movw	r26, r24
    9fd0:	7c 93       	st	X, r23
    9fd2:	60 83       	st	Z, r22
    9fd4:	58 83       	st	Y, r21
    9fd6:	d4 01       	movw	r26, r8
    9fd8:	4c 93       	st	X, r20
			memcpy(save_score, tmp_score, 5);
    9fda:	4b 2d       	mov	r20, r11
    9fdc:	5c 2d       	mov	r21, r12
    9fde:	b7 01       	movw	r22, r14
    9fe0:	18 c0       	rjmp	.+48     	; 0xa012 <save_score+0xca>
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    9fe2:	f0 80       	ld	r15, Z
    9fe4:	e8 80       	ld	r14, Y
    9fe6:	cf 2c       	mov	r12, r15
    9fe8:	ce 18       	sub	r12, r14
			if (save_delta > cur_delta)
    9fea:	cd 14       	cp	r12, r13
    9fec:	a0 f4       	brcc	.+40     	; 0xa016 <save_score+0xce>
			{
				memcpy(tmp_score, &scores.data[i], 5);
    9fee:	d9 01       	movw	r26, r18
    9ff0:	0c 91       	ld	r16, X
    9ff2:	dc 01       	movw	r26, r24
    9ff4:	cc 90       	ld	r12, X
    9ff6:	d4 01       	movw	r26, r8
    9ff8:	bc 90       	ld	r11, X
				memcpy(&scores.data[i], save_score, 5);
    9ffa:	d9 01       	movw	r26, r18
    9ffc:	1c 93       	st	X, r17
    9ffe:	dc 01       	movw	r26, r24
    a000:	7c 93       	st	X, r23
    a002:	60 83       	st	Z, r22
    a004:	58 83       	st	Y, r21
    a006:	d4 01       	movw	r26, r8
    a008:	4c 93       	st	X, r20
				memcpy(save_score, tmp_score, 5);
    a00a:	4b 2d       	mov	r20, r11
    a00c:	5e 2d       	mov	r21, r14
    a00e:	6f 2d       	mov	r22, r15
    a010:	7c 2d       	mov	r23, r12
    a012:	10 2f       	mov	r17, r16
				saved = 1;
    a014:	01 e0       	ldi	r16, 0x01	; 1
    a016:	2b 5f       	subi	r18, 0xFB	; 251
    a018:	3f 4f       	sbci	r19, 0xFF	; 255
    a01a:	05 96       	adiw	r24, 0x05	; 5
    a01c:	35 96       	adiw	r30, 0x05	; 5
    a01e:	25 96       	adiw	r28, 0x05	; 5
    a020:	b5 e0       	ldi	r27, 0x05	; 5
    a022:	8b 0e       	add	r8, r27
    a024:	91 1c       	adc	r9, r1
	save_score[2] = p_win->netMessage.score;
	save_score[3] = p_lose->netMessage.score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->netMessage.score - p_lose->netMessage.score;

	for (u8 i = 0; i < 28; i += 5)
    a026:	ab e0       	ldi	r26, 0x0B	; 11
    a028:	e8 39       	cpi	r30, 0x98	; 152
    a02a:	fa 07       	cpc	r31, r26
    a02c:	21 f6       	brne	.-120    	; 0x9fb6 <save_score+0x6e>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a02e:	86 e7       	ldi	r24, 0x76	; 118
    a030:	9b e0       	ldi	r25, 0x0B	; 11
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a032:	df 91       	pop	r29
    a034:	cf 91       	pop	r28
    a036:	1f 91       	pop	r17
    a038:	0f 91       	pop	r16
    a03a:	ff 90       	pop	r15
    a03c:	ef 90       	pop	r14
    a03e:	df 90       	pop	r13
    a040:	cf 90       	pop	r12
    a042:	bf 90       	pop	r11
    a044:	9f 90       	pop	r9
    a046:	8f 90       	pop	r8
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a048:	0c 94 f8 3b 	jmp	0x77f0	; 0x77f0 <EepromWriteBlock>

0000a04c <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a04c:	db 01       	movw	r26, r22
	switch (shot->shared.direction)
    a04e:	2c 91       	ld	r18, X
    a050:	21 30       	cpi	r18, 0x01	; 1
    a052:	a9 f0       	breq	.+42     	; 0xa07e <position_shot+0x32>
    a054:	28 f0       	brcs	.+10     	; 0xa060 <position_shot+0x14>
    a056:	22 30       	cpi	r18, 0x02	; 2
    a058:	d1 f0       	breq	.+52     	; 0xa08e <position_shot+0x42>
    a05a:	23 30       	cpi	r18, 0x03	; 3
    a05c:	49 f1       	breq	.+82     	; 0xa0b0 <position_shot+0x64>
    a05e:	08 95       	ret
	{
		case D_UP:
			shot->shared.x = player->netMessage.shared.x + 400;
    a060:	fc 01       	movw	r30, r24
    a062:	ea 58       	subi	r30, 0x8A	; 138
    a064:	ff 4f       	sbci	r31, 0xFF	; 255
    a066:	20 81       	ld	r18, Z
    a068:	31 81       	ldd	r19, Z+1	; 0x01
    a06a:	20 57       	subi	r18, 0x70	; 112
    a06c:	3e 4f       	sbci	r19, 0xFE	; 254
    a06e:	15 96       	adiw	r26, 0x05	; 5
    a070:	3c 93       	st	X, r19
    a072:	2e 93       	st	-X, r18
    a074:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y;
    a076:	32 96       	adiw	r30, 0x02	; 2
    a078:	80 81       	ld	r24, Z
    a07a:	91 81       	ldd	r25, Z+1	; 0x01
    a07c:	27 c0       	rjmp	.+78     	; 0xa0cc <position_shot+0x80>
			break;
		case D_RIGHT:
			shot->shared.x = player->netMessage.shared.x + 800;
    a07e:	fc 01       	movw	r30, r24
    a080:	ea 58       	subi	r30, 0x8A	; 138
    a082:	ff 4f       	sbci	r31, 0xFF	; 255
    a084:	20 81       	ld	r18, Z
    a086:	31 81       	ldd	r19, Z+1	; 0x01
    a088:	20 5e       	subi	r18, 0xE0	; 224
    a08a:	3c 4f       	sbci	r19, 0xFC	; 252
    a08c:	16 c0       	rjmp	.+44     	; 0xa0ba <position_shot+0x6e>
			shot->shared.y = player->netMessage.shared.y + 400;
			break;
		case D_DOWN:
			shot->shared.x = player->netMessage.shared.x + 400;
    a08e:	fc 01       	movw	r30, r24
    a090:	ea 58       	subi	r30, 0x8A	; 138
    a092:	ff 4f       	sbci	r31, 0xFF	; 255
    a094:	20 81       	ld	r18, Z
    a096:	31 81       	ldd	r19, Z+1	; 0x01
    a098:	20 57       	subi	r18, 0x70	; 112
    a09a:	3e 4f       	sbci	r19, 0xFE	; 254
    a09c:	15 96       	adiw	r26, 0x05	; 5
    a09e:	3c 93       	st	X, r19
    a0a0:	2e 93       	st	-X, r18
    a0a2:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 800;
    a0a4:	32 96       	adiw	r30, 0x02	; 2
    a0a6:	80 81       	ld	r24, Z
    a0a8:	91 81       	ldd	r25, Z+1	; 0x01
    a0aa:	80 5e       	subi	r24, 0xE0	; 224
    a0ac:	9c 4f       	sbci	r25, 0xFC	; 252
    a0ae:	0e c0       	rjmp	.+28     	; 0xa0cc <position_shot+0x80>
			break;
		case D_LEFT:
			shot->shared.x = player->netMessage.shared.x;
    a0b0:	fc 01       	movw	r30, r24
    a0b2:	ea 58       	subi	r30, 0x8A	; 138
    a0b4:	ff 4f       	sbci	r31, 0xFF	; 255
    a0b6:	20 81       	ld	r18, Z
    a0b8:	31 81       	ldd	r19, Z+1	; 0x01
    a0ba:	15 96       	adiw	r26, 0x05	; 5
    a0bc:	3c 93       	st	X, r19
    a0be:	2e 93       	st	-X, r18
    a0c0:	14 97       	sbiw	r26, 0x04	; 4
			shot->shared.y = player->netMessage.shared.y + 400;
    a0c2:	32 96       	adiw	r30, 0x02	; 2
    a0c4:	80 81       	ld	r24, Z
    a0c6:	91 81       	ldd	r25, Z+1	; 0x01
    a0c8:	80 57       	subi	r24, 0x70	; 112
    a0ca:	9e 4f       	sbci	r25, 0xFE	; 254
    a0cc:	17 96       	adiw	r26, 0x07	; 7
    a0ce:	9c 93       	st	X, r25
    a0d0:	8e 93       	st	-X, r24
    a0d2:	16 97       	sbiw	r26, 0x06	; 6
    a0d4:	08 95       	ret

0000a0d6 <print_level_score>:
			break;
	}
}

void print_level_score(Player* winner, Player* loser)
{
    a0d6:	0f 93       	push	r16
    a0d8:	1f 93       	push	r17
    a0da:	cf 93       	push	r28
    a0dc:	df 93       	push	r29
    a0de:	8c 01       	movw	r16, r24
    a0e0:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a0e2:	ac 01       	movw	r20, r24
    a0e4:	4f 5f       	subi	r20, 0xFF	; 255
    a0e6:	5f 4f       	sbci	r21, 0xFF	; 255
    a0e8:	23 e0       	ldi	r18, 0x03	; 3
    a0ea:	6e e0       	ldi	r22, 0x0E	; 14
    a0ec:	84 e0       	ldi	r24, 0x04	; 4
    a0ee:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a0f2:	48 ee       	ldi	r20, 0xE8	; 232
    a0f4:	53 e0       	ldi	r21, 0x03	; 3
    a0f6:	6e e0       	ldi	r22, 0x0E	; 14
    a0f8:	70 e0       	ldi	r23, 0x00	; 0
    a0fa:	88 e0       	ldi	r24, 0x08	; 8
    a0fc:	90 e0       	ldi	r25, 0x00	; 0
    a0fe:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a102:	ae 01       	movw	r20, r28
    a104:	4f 5f       	subi	r20, 0xFF	; 255
    a106:	5f 4f       	sbci	r21, 0xFF	; 255
    a108:	23 e0       	ldi	r18, 0x03	; 3
    a10a:	6e e0       	ldi	r22, 0x0E	; 14
    a10c:	8d e0       	ldi	r24, 0x0D	; 13
    a10e:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a112:	45 ee       	ldi	r20, 0xE5	; 229
    a114:	53 e0       	ldi	r21, 0x03	; 3
    a116:	6e e0       	ldi	r22, 0x0E	; 14
    a118:	70 e0       	ldi	r23, 0x00	; 0
    a11a:	81 e1       	ldi	r24, 0x11	; 17
    a11c:	90 e0       	ldi	r25, 0x00	; 0
    a11e:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	PrintByte(22, 14, winner->netMessage.level_score ,true);
    a122:	f8 01       	movw	r30, r16
    a124:	e0 59       	subi	r30, 0x90	; 144
    a126:	ff 4f       	sbci	r31, 0xFF	; 255
    a128:	21 e0       	ldi	r18, 0x01	; 1
    a12a:	40 81       	ld	r20, Z
    a12c:	6e e0       	ldi	r22, 0x0E	; 14
    a12e:	70 e0       	ldi	r23, 0x00	; 0
    a130:	86 e1       	ldi	r24, 0x16	; 22
    a132:	90 e0       	ldi	r25, 0x00	; 0
    a134:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
	PrintChar(23, 14, '-');
    a138:	4d e2       	ldi	r20, 0x2D	; 45
    a13a:	6e e0       	ldi	r22, 0x0E	; 14
    a13c:	70 e0       	ldi	r23, 0x00	; 0
    a13e:	87 e1       	ldi	r24, 0x17	; 23
    a140:	90 e0       	ldi	r25, 0x00	; 0
    a142:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a146:	c0 59       	subi	r28, 0x90	; 144
    a148:	df 4f       	sbci	r29, 0xFF	; 255
    a14a:	21 e0       	ldi	r18, 0x01	; 1
    a14c:	48 81       	ld	r20, Y
    a14e:	6e e0       	ldi	r22, 0x0E	; 14
    a150:	70 e0       	ldi	r23, 0x00	; 0
    a152:	8a e1       	ldi	r24, 0x1A	; 26
    a154:	90 e0       	ldi	r25, 0x00	; 0
}
    a156:	df 91       	pop	r29
    a158:	cf 91       	pop	r28
    a15a:	1f 91       	pop	r17
    a15c:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->netMessage.level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->netMessage.level_score ,true);
    a15e:	0c 94 53 49 	jmp	0x92a6	; 0x92a6 <PrintByte>

0000a162 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a162:	0f 93       	push	r16
    a164:	1f 93       	push	r17
    a166:	cf 93       	push	r28
    a168:	df 93       	push	r29
    a16a:	8c 01       	movw	r16, r24
    a16c:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a16e:	49 ed       	ldi	r20, 0xD9	; 217
    a170:	53 e0       	ldi	r21, 0x03	; 3
    a172:	6c e0       	ldi	r22, 0x0C	; 12
    a174:	70 e0       	ldi	r23, 0x00	; 0
    a176:	89 e0       	ldi	r24, 0x09	; 9
    a178:	90 e0       	ldi	r25, 0x00	; 0
    a17a:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a17e:	a8 01       	movw	r20, r16
    a180:	4f 5f       	subi	r20, 0xFF	; 255
    a182:	5f 4f       	sbci	r21, 0xFF	; 255
    a184:	23 e0       	ldi	r18, 0x03	; 3
    a186:	6e e0       	ldi	r22, 0x0E	; 14
    a188:	84 e0       	ldi	r24, 0x04	; 4
    a18a:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a18e:	48 ee       	ldi	r20, 0xE8	; 232
    a190:	53 e0       	ldi	r21, 0x03	; 3
    a192:	6e e0       	ldi	r22, 0x0E	; 14
    a194:	70 e0       	ldi	r23, 0x00	; 0
    a196:	88 e0       	ldi	r24, 0x08	; 8
    a198:	90 e0       	ldi	r25, 0x00	; 0
    a19a:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a19e:	ae 01       	movw	r20, r28
    a1a0:	4f 5f       	subi	r20, 0xFF	; 255
    a1a2:	5f 4f       	sbci	r21, 0xFF	; 255
    a1a4:	23 e0       	ldi	r18, 0x03	; 3
    a1a6:	6e e0       	ldi	r22, 0x0E	; 14
    a1a8:	8d e0       	ldi	r24, 0x0D	; 13
    a1aa:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a1ae:	45 ee       	ldi	r20, 0xE5	; 229
    a1b0:	53 e0       	ldi	r21, 0x03	; 3
    a1b2:	6e e0       	ldi	r22, 0x0E	; 14
    a1b4:	70 e0       	ldi	r23, 0x00	; 0
    a1b6:	81 e1       	ldi	r24, 0x11	; 17
    a1b8:	90 e0       	ldi	r25, 0x00	; 0
    a1ba:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    PrintByte(22, 14, winner->netMessage.score ,true);
    a1be:	f8 01       	movw	r30, r16
    a1c0:	e1 59       	subi	r30, 0x91	; 145
    a1c2:	ff 4f       	sbci	r31, 0xFF	; 255
    a1c4:	21 e0       	ldi	r18, 0x01	; 1
    a1c6:	40 81       	ld	r20, Z
    a1c8:	6e e0       	ldi	r22, 0x0E	; 14
    a1ca:	70 e0       	ldi	r23, 0x00	; 0
    a1cc:	86 e1       	ldi	r24, 0x16	; 22
    a1ce:	90 e0       	ldi	r25, 0x00	; 0
    a1d0:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
    PrintChar(23, 14, '-');
    a1d4:	4d e2       	ldi	r20, 0x2D	; 45
    a1d6:	6e e0       	ldi	r22, 0x0E	; 14
    a1d8:	70 e0       	ldi	r23, 0x00	; 0
    a1da:	87 e1       	ldi	r24, 0x17	; 23
    a1dc:	90 e0       	ldi	r25, 0x00	; 0
    a1de:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
    PrintByte(26, 14, loser->netMessage.score ,true);
    a1e2:	c1 59       	subi	r28, 0x91	; 145
    a1e4:	df 4f       	sbci	r29, 0xFF	; 255
    a1e6:	21 e0       	ldi	r18, 0x01	; 1
    a1e8:	48 81       	ld	r20, Y
    a1ea:	6e e0       	ldi	r22, 0x0E	; 14
    a1ec:	70 e0       	ldi	r23, 0x00	; 0
    a1ee:	8a e1       	ldi	r24, 0x1A	; 26
    a1f0:	90 e0       	ldi	r25, 0x00	; 0
    a1f2:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a1f6:	80 91 b9 0b 	lds	r24, 0x0BB9
    a1fa:	88 30       	cpi	r24, 0x08	; 8
    a1fc:	59 f4       	brne	.+22     	; 0xa214 <print_final_score+0xb2>
	{
		PrintChar(28, 14, '*');
    a1fe:	4a e2       	ldi	r20, 0x2A	; 42
    a200:	6e e0       	ldi	r22, 0x0E	; 14
    a202:	70 e0       	ldi	r23, 0x00	; 0
    a204:	8c e1       	ldi	r24, 0x1C	; 28
    a206:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a208:	df 91       	pop	r29
    a20a:	cf 91       	pop	r28
    a20c:	1f 91       	pop	r17
    a20e:	0f 91       	pop	r16
    PrintByte(22, 14, winner->netMessage.score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->netMessage.score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a210:	0c 94 a1 49 	jmp	0x9342	; 0x9342 <PrintChar>
	}
}
    a214:	df 91       	pop	r29
    a216:	cf 91       	pop	r28
    a218:	1f 91       	pop	r17
    a21a:	0f 91       	pop	r16
    a21c:	08 95       	ret

0000a21e <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a21e:	fc 01       	movw	r30, r24
    a220:	20 81       	ld	r18, Z
    a222:	31 81       	ldd	r19, Z+1	; 0x01
    a224:	21 70       	andi	r18, 0x01	; 1
    a226:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a228:	81 e0       	ldi	r24, 0x01	; 1
    a22a:	23 2b       	or	r18, r19
    a22c:	09 f4       	brne	.+2      	; 0xa230 <shoot_pressed+0x12>
    a22e:	80 e0       	ldi	r24, 0x00	; 0
}
    a230:	08 95       	ret

0000a232 <get_delta>:

u16 get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a232:	fc 01       	movw	r30, r24
    a234:	21 8d       	ldd	r18, Z+25	; 0x19
    a236:	fb 01       	movw	r30, r22
    a238:	81 81       	ldd	r24, Z+1	; 0x01
    a23a:	92 81       	ldd	r25, Z+2	; 0x02
    a23c:	22 23       	and	r18, r18
    a23e:	29 f0       	breq	.+10     	; 0xa24a <get_delta+0x18>
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
    a240:	9c 01       	movw	r18, r24
    a242:	36 95       	lsr	r19
    a244:	27 95       	ror	r18
    a246:	82 0f       	add	r24, r18
    a248:	93 1f       	adc	r25, r19
    a24a:	6c e3       	ldi	r22, 0x3C	; 60
    a24c:	70 e0       	ldi	r23, 0x00	; 0
    a24e:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
}
    a252:	cb 01       	movw	r24, r22
    a254:	08 95       	ret

0000a256 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a256:	cf 93       	push	r28
    a258:	df 93       	push	r29
    a25a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a25c:	ac 01       	movw	r20, r24
    a25e:	4f 5f       	subi	r20, 0xFF	; 255
    a260:	5f 4f       	sbci	r21, 0xFF	; 255
    a262:	23 e0       	ldi	r18, 0x03	; 3
    a264:	60 e0       	ldi	r22, 0x00	; 0
    a266:	8a e0       	ldi	r24, 0x0A	; 10
    a268:	8c 0f       	add	r24, r28
    a26a:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a26e:	d0 e0       	ldi	r29, 0x00	; 0
    a270:	42 ed       	ldi	r20, 0xD2	; 210
    a272:	53 e0       	ldi	r21, 0x03	; 3
    a274:	60 e0       	ldi	r22, 0x00	; 0
    a276:	70 e0       	ldi	r23, 0x00	; 0
    a278:	ce 01       	movw	r24, r28
    a27a:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(x, 1, (char*) strTotal);
    a27e:	4b ec       	ldi	r20, 0xCB	; 203
    a280:	53 e0       	ldi	r21, 0x03	; 3
    a282:	61 e0       	ldi	r22, 0x01	; 1
    a284:	70 e0       	ldi	r23, 0x00	; 0
    a286:	ce 01       	movw	r24, r28
	
}
    a288:	df 91       	pop	r29
    a28a:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a28c:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>

0000a290 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a290:	0f 93       	push	r16
    a292:	1f 93       	push	r17
    a294:	cf 93       	push	r28
    a296:	df 93       	push	r29
    a298:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->netMessage.level_score, false);
    a29a:	c6 2f       	mov	r28, r22
    a29c:	d0 e0       	ldi	r29, 0x00	; 0
    a29e:	28 96       	adiw	r28, 0x08	; 8
    a2a0:	fc 01       	movw	r30, r24
    a2a2:	e0 59       	subi	r30, 0x90	; 144
    a2a4:	ff 4f       	sbci	r31, 0xFF	; 255
    a2a6:	20 e0       	ldi	r18, 0x00	; 0
    a2a8:	40 81       	ld	r20, Z
    a2aa:	60 e0       	ldi	r22, 0x00	; 0
    a2ac:	70 e0       	ldi	r23, 0x00	; 0
    a2ae:	ce 01       	movw	r24, r28
    a2b0:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
	PrintByte(x+8, 1, player->netMessage.score, false);
    a2b4:	f8 01       	movw	r30, r16
    a2b6:	e1 59       	subi	r30, 0x91	; 145
    a2b8:	ff 4f       	sbci	r31, 0xFF	; 255
    a2ba:	20 e0       	ldi	r18, 0x00	; 0
    a2bc:	40 81       	ld	r20, Z
    a2be:	61 e0       	ldi	r22, 0x01	; 1
    a2c0:	70 e0       	ldi	r23, 0x00	; 0
    a2c2:	ce 01       	movw	r24, r28
}
    a2c4:	df 91       	pop	r29
    a2c6:	cf 91       	pop	r28
    a2c8:	1f 91       	pop	r17
    a2ca:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->netMessage.level_score, false);
	PrintByte(x+8, 1, player->netMessage.score, false);
    a2cc:	0c 94 53 49 	jmp	0x92a6	; 0x92a6 <PrintByte>

0000a2d0 <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a2d0:	0f 93       	push	r16
    a2d2:	1f 93       	push	r17
    a2d4:	cf 93       	push	r28
    a2d6:	df 93       	push	r29
    a2d8:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->netMessage.shared.x / 100, player->netMessage.shared.y / 100, 2, 2);
    a2da:	fc 01       	movw	r30, r24
    a2dc:	e8 58       	subi	r30, 0x88	; 136
    a2de:	ff 4f       	sbci	r31, 0xFF	; 255
    a2e0:	80 81       	ld	r24, Z
    a2e2:	91 81       	ldd	r25, Z+1	; 0x01
    a2e4:	c4 e6       	ldi	r28, 0x64	; 100
    a2e6:	d0 e0       	ldi	r29, 0x00	; 0
    a2e8:	be 01       	movw	r22, r28
    a2ea:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a2ee:	46 2f       	mov	r20, r22
    a2f0:	32 97       	sbiw	r30, 0x02	; 2
    a2f2:	80 81       	ld	r24, Z
    a2f4:	91 81       	ldd	r25, Z+1	; 0x01
    a2f6:	be 01       	movw	r22, r28
    a2f8:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a2fc:	02 e0       	ldi	r16, 0x02	; 2
    a2fe:	22 e0       	ldi	r18, 0x02	; 2
    a300:	81 2f       	mov	r24, r17
    a302:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
}
    a306:	df 91       	pop	r29
    a308:	cf 91       	pop	r28
    a30a:	1f 91       	pop	r17
    a30c:	0f 91       	pop	r16
    a30e:	08 95       	ret

0000a310 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a310:	0f 93       	push	r16
    a312:	cf 93       	push	r28
    a314:	df 93       	push	r29
    a316:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a318:	84 81       	ldd	r24, Z+4	; 0x04
    a31a:	88 23       	and	r24, r24
    a31c:	99 f0       	breq	.+38     	; 0xa344 <render_shot+0x34>
    a31e:	36 2f       	mov	r19, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x / 100, player->shot[i].shared.y / 100, 1, 1);
    a320:	87 a1       	ldd	r24, Z+39	; 0x27
    a322:	90 a5       	ldd	r25, Z+40	; 0x28
    a324:	c4 e6       	ldi	r28, 0x64	; 100
    a326:	d0 e0       	ldi	r29, 0x00	; 0
    a328:	be 01       	movw	r22, r28
    a32a:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a32e:	46 2f       	mov	r20, r22
    a330:	85 a1       	ldd	r24, Z+37	; 0x25
    a332:	96 a1       	ldd	r25, Z+38	; 0x26
    a334:	be 01       	movw	r22, r28
    a336:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a33a:	01 e0       	ldi	r16, 0x01	; 1
    a33c:	21 e0       	ldi	r18, 0x01	; 1
    a33e:	83 2f       	mov	r24, r19
    a340:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
			sprite_index++;
		}
	}
}
    a344:	df 91       	pop	r29
    a346:	cf 91       	pop	r28
    a348:	0f 91       	pop	r16
    a34a:	08 95       	ret

0000a34c <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a34c:	ef 92       	push	r14
    a34e:	ff 92       	push	r15
    a350:	0f 93       	push	r16
    a352:	1f 93       	push	r17
    a354:	cf 93       	push	r28
    a356:	df 93       	push	r29
    a358:	ec 01       	movw	r28, r24
    a35a:	25 96       	adiw	r28, 0x05	; 5
    a35c:	8c 01       	movw	r16, r24
    a35e:	0f 5d       	subi	r16, 0xDF	; 223
    a360:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a362:	8e e1       	ldi	r24, 0x1E	; 30
    a364:	e8 2e       	mov	r14, r24
    a366:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a368:	88 85       	ldd	r24, Y+8	; 0x08
    a36a:	99 85       	ldd	r25, Y+9	; 0x09
    a36c:	89 2b       	or	r24, r25
    a36e:	c1 f0       	breq	.+48     	; 0xa3a0 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a370:	ce 01       	movw	r24, r28
    a372:	04 97       	sbiw	r24, 0x04	; 4
    a374:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a378:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a37a:	48 81       	ld	r20, Y
    a37c:	88 85       	ldd	r24, Y+8	; 0x08
    a37e:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a380:	b7 01       	movw	r22, r14
    a382:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    a386:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a388:	44 23       	and	r20, r20
    a38a:	39 f0       	breq	.+14     	; 0xa39a <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a38c:	40 e0       	ldi	r20, 0x00	; 0
    a38e:	50 e0       	ldi	r21, 0x00	; 0
    a390:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
				ta->anims[i].tile_index = 0;
    a394:	19 86       	std	Y+9, r1	; 0x09
    a396:	18 86       	std	Y+8, r1	; 0x08
    a398:	03 c0       	rjmp	.+6      	; 0xa3a0 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a39a:	a9 01       	movw	r20, r18
    a39c:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
    a3a0:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a3a2:	c0 17       	cp	r28, r16
    a3a4:	d1 07       	cpc	r29, r17
    a3a6:	01 f7       	brne	.-64     	; 0xa368 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a3a8:	df 91       	pop	r29
    a3aa:	cf 91       	pop	r28
    a3ac:	1f 91       	pop	r17
    a3ae:	0f 91       	pop	r16
    a3b0:	ff 90       	pop	r15
    a3b2:	ef 90       	pop	r14
    a3b4:	08 95       	ret

0000a3b6 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a3b6:	cf 93       	push	r28
    a3b8:	df 93       	push	r29
    a3ba:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a3bc:	0e 94 c6 4b 	call	0x978c	; 0x978c <LBGetNextFrameReverse>
    a3c0:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a3c2:	4c 81       	ldd	r20, Y+4	; 0x04
    a3c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    a3c6:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a3c8:	6e e1       	ldi	r22, 0x1E	; 30
    a3ca:	70 e0       	ldi	r23, 0x00	; 0
    a3cc:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    a3d0:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a3d2:	44 23       	and	r20, r20
    a3d4:	19 f0       	breq	.+6      	; 0xa3dc <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a3d6:	40 e1       	ldi	r20, 0x10	; 16
    a3d8:	5b e6       	ldi	r21, 0x6B	; 107
    a3da:	01 c0       	rjmp	.+2      	; 0xa3de <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a3dc:	a9 01       	movw	r20, r18
    a3de:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	}
	return ta->anim.looped;
}
    a3e2:	8c 81       	ldd	r24, Y+4	; 0x04
    a3e4:	df 91       	pop	r29
    a3e6:	cf 91       	pop	r28
    a3e8:	08 95       	ret

0000a3ea <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a3ea:	ff 92       	push	r15
    a3ec:	0f 93       	push	r16
    a3ee:	1f 93       	push	r17
    a3f0:	cf 93       	push	r28
    a3f2:	df 93       	push	r29
    a3f4:	ec 01       	movw	r28, r24
    a3f6:	f6 2e       	mov	r15, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
    a3f8:	8c 01       	movw	r16, r24
    a3fa:	0f 58       	subi	r16, 0x8F	; 143
    a3fc:	1f 4f       	sbci	r17, 0xFF	; 255
    a3fe:	f8 01       	movw	r30, r16
    a400:	80 81       	ld	r24, Z
    a402:	80 ff       	sbrs	r24, 0
    a404:	18 c0       	rjmp	.+48     	; 0xa436 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a406:	ce 01       	movw	r24, r28
    a408:	81 5a       	subi	r24, 0xA1	; 161
    a40a:	9f 4f       	sbci	r25, 0xFF	; 255
    a40c:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a410:	fe 01       	movw	r30, r28
    a412:	ed 59       	subi	r30, 0x9D	; 157
    a414:	ff 4f       	sbci	r31, 0xFF	; 255
    a416:	20 81       	ld	r18, Z
    a418:	22 23       	and	r18, r18
    a41a:	09 f4       	brne	.+2      	; 0xa41e <tank_map+0x34>
    a41c:	4e c0       	rjmp	.+156    	; 0xa4ba <tank_map+0xd0>
		{
			player->netMessage.flags = player->netMessage.flags ^ EXPLODING_FLAG;
    a41e:	f8 01       	movw	r30, r16
    a420:	80 81       	ld	r24, Z
    a422:	91 e0       	ldi	r25, 0x01	; 1
    a424:	98 27       	eor	r25, r24
    a426:	90 83       	st	Z, r25
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a428:	ce 01       	movw	r24, r28
    a42a:	0e 94 57 4f 	call	0x9eae	; 0x9eae <player_spawn>
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a42e:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->netMessage.flags = player->netMessage.flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a430:	80 ec       	ldi	r24, 0xC0	; 192
    a432:	91 e3       	ldi	r25, 0x31	; 49
    a434:	43 c0       	rjmp	.+134    	; 0xa4bc <tank_map+0xd2>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a436:	9a 85       	ldd	r25, Y+10	; 0x0a
    a438:	98 37       	cpi	r25, 0x78	; 120
    a43a:	11 f0       	breq	.+4      	; 0xa440 <tank_map+0x56>
		{
			player->grace_frame++;
    a43c:	9f 5f       	subi	r25, 0xFF	; 255
    a43e:	9a 87       	std	Y+10, r25	; 0x0a
		}
		switch (player->netMessage.shared.direction)
    a440:	fe 01       	movw	r30, r28
    a442:	ee 58       	subi	r30, 0x8E	; 142
    a444:	ff 4f       	sbci	r31, 0xFF	; 255
    a446:	90 81       	ld	r25, Z
    a448:	91 30       	cpi	r25, 0x01	; 1
    a44a:	61 f0       	breq	.+24     	; 0xa464 <tank_map+0x7a>
    a44c:	b0 f0       	brcs	.+44     	; 0xa47a <tank_map+0x90>
    a44e:	92 30       	cpi	r25, 0x02	; 2
    a450:	69 f0       	breq	.+26     	; 0xa46c <tank_map+0x82>
    a452:	93 30       	cpi	r25, 0x03	; 3
    a454:	91 f4       	brne	.+36     	; 0xa47a <tank_map+0x90>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    a456:	ce 01       	movw	r24, r28
    a458:	8d 5a       	subi	r24, 0xAD	; 173
    a45a:	9f 4f       	sbci	r25, 0xFF	; 255
    a45c:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a460:	41 e0       	ldi	r20, 0x01	; 1
    a462:	11 c0       	rjmp	.+34     	; 0xa486 <tank_map+0x9c>
			player->grace_frame++;
		}
		switch (player->netMessage.shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    a464:	ce 01       	movw	r24, r28
    a466:	8d 5a       	subi	r24, 0xAD	; 173
    a468:	9f 4f       	sbci	r25, 0xFF	; 255
    a46a:	0a c0       	rjmp	.+20     	; 0xa480 <tank_map+0x96>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    a46c:	ce 01       	movw	r24, r28
    a46e:	89 5b       	subi	r24, 0xB9	; 185
    a470:	9f 4f       	sbci	r25, 0xFF	; 255
    a472:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a476:	42 e0       	ldi	r20, 0x02	; 2
    a478:	06 c0       	rjmp	.+12     	; 0xa486 <tank_map+0x9c>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    a47a:	ce 01       	movw	r24, r28
    a47c:	89 5b       	subi	r24, 0xB9	; 185
    a47e:	9f 4f       	sbci	r25, 0xFF	; 255
    a480:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a484:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    a486:	2a 85       	ldd	r18, Y+10	; 0x0a
    a488:	28 37       	cpi	r18, 0x78	; 120
    a48a:	31 f0       	breq	.+12     	; 0xa498 <tank_map+0xae>
    a48c:	20 91 bd 0b 	lds	r18, 0x0BBD
    a490:	22 23       	and	r18, r18
    a492:	11 f0       	breq	.+4      	; 0xa498 <tank_map+0xae>
		{
			t_map = (char*) map_tank_blank;
    a494:	80 ec       	ldi	r24, 0xC0	; 192
    a496:	91 e3       	ldi	r25, 0x31	; 49
		}
		game.toggle_counter--;
    a498:	20 91 bc 0b 	lds	r18, 0x0BBC
    a49c:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    a49e:	19 f0       	breq	.+6      	; 0xa4a6 <tank_map+0xbc>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    a4a0:	20 93 bc 0b 	sts	0x0BBC, r18
    a4a4:	0b c0       	rjmp	.+22     	; 0xa4bc <tank_map+0xd2>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    a4a6:	24 e1       	ldi	r18, 0x14	; 20
    a4a8:	20 93 bc 0b 	sts	0x0BBC, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    a4ac:	30 91 bd 0b 	lds	r19, 0x0BBD
    a4b0:	21 e0       	ldi	r18, 0x01	; 1
    a4b2:	23 27       	eor	r18, r19
    a4b4:	20 93 bd 0b 	sts	0x0BBD, r18
    a4b8:	01 c0       	rjmp	.+2      	; 0xa4bc <tank_map+0xd2>
	u8 t_flags = 0;

	if (player->netMessage.flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a4ba:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a4bc:	bc 01       	movw	r22, r24
    a4be:	8f 2d       	mov	r24, r15
    a4c0:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a4c4:	84 e0       	ldi	r24, 0x04	; 4
    a4c6:	8f 0d       	add	r24, r15
    a4c8:	df 91       	pop	r29
    a4ca:	cf 91       	pop	r28
    a4cc:	1f 91       	pop	r17
    a4ce:	0f 91       	pop	r16
    a4d0:	ff 90       	pop	r15
    a4d2:	08 95       	ret

0000a4d4 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a4d4:	cf 93       	push	r28
    a4d6:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a4d8:	fc 01       	movw	r30, r24
    a4da:	24 a5       	ldd	r18, Z+44	; 0x2c
    a4dc:	22 23       	and	r18, r18
    a4de:	c9 f0       	breq	.+50     	; 0xa512 <shot_map+0x3e>
		{
			switch (shot->shared.direction)
    a4e0:	21 a1       	ldd	r18, Z+33	; 0x21
    a4e2:	21 30       	cpi	r18, 0x01	; 1
    a4e4:	51 f0       	breq	.+20     	; 0xa4fa <shot_map+0x26>
    a4e6:	98 f0       	brcs	.+38     	; 0xa50e <shot_map+0x3a>
    a4e8:	22 30       	cpi	r18, 0x02	; 2
    a4ea:	61 f0       	breq	.+24     	; 0xa504 <shot_map+0x30>
    a4ec:	23 30       	cpi	r18, 0x03	; 3
    a4ee:	79 f4       	brne	.+30     	; 0xa50e <shot_map+0x3a>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    a4f0:	cb 96       	adiw	r24, 0x3b	; 59
    a4f2:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a4f6:	41 e0       	ldi	r20, 0x01	; 1
    a4f8:	0f c0       	rjmp	.+30     	; 0xa518 <shot_map+0x44>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    a4fa:	cb 96       	adiw	r24, 0x3b	; 59
    a4fc:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a500:	40 e0       	ldi	r20, 0x00	; 0
    a502:	0a c0       	rjmp	.+20     	; 0xa518 <shot_map+0x44>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    a504:	8f 96       	adiw	r24, 0x2f	; 47
    a506:	0e 94 a1 4b 	call	0x9742	; 0x9742 <LBGetNextFrame>
    a50a:	42 e0       	ldi	r20, 0x02	; 2
    a50c:	05 c0       	rjmp	.+10     	; 0xa518 <shot_map+0x44>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    a50e:	8f 96       	adiw	r24, 0x2f	; 47
    a510:	f5 cf       	rjmp	.-22     	; 0xa4fc <shot_map+0x28>
    a512:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a514:	80 ec       	ldi	r24, 0xC0	; 192
    a516:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a518:	bc 01       	movw	r22, r24
    a51a:	8c 2f       	mov	r24, r28
    a51c:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a520:	81 e0       	ldi	r24, 0x01	; 1
    a522:	8c 0f       	add	r24, r28
    a524:	cf 91       	pop	r28
    a526:	08 95       	ret

0000a528 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a528:	fc 01       	movw	r30, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a52a:	80 81       	ld	r24, Z
    a52c:	81 11       	cpse	r24, r1
    a52e:	11 c0       	rjmp	.+34     	; 0xa552 <recoil_sprite+0x2a>
	{
		tile = (sprite->y / 800) + 1;
    a530:	86 81       	ldd	r24, Z+6	; 0x06
    a532:	97 81       	ldd	r25, Z+7	; 0x07
    a534:	20 e2       	ldi	r18, 0x20	; 32
    a536:	33 e0       	ldi	r19, 0x03	; 3
    a538:	b9 01       	movw	r22, r18
    a53a:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a53e:	81 e0       	ldi	r24, 0x01	; 1
    a540:	86 0f       	add	r24, r22
		sprite->y = tile * 800;
    a542:	82 9f       	mul	r24, r18
    a544:	a0 01       	movw	r20, r0
    a546:	83 9f       	mul	r24, r19
    a548:	50 0d       	add	r21, r0
    a54a:	11 24       	eor	r1, r1
    a54c:	57 83       	std	Z+7, r21	; 0x07
    a54e:	46 83       	std	Z+6, r20	; 0x06
    a550:	36 c0       	rjmp	.+108    	; 0xa5be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_RIGHT)
    a552:	81 30       	cpi	r24, 0x01	; 1
    a554:	89 f4       	brne	.+34     	; 0xa578 <recoil_sprite+0x50>
	{
		tile = sprite->x / 800;
    a556:	84 81       	ldd	r24, Z+4	; 0x04
    a558:	95 81       	ldd	r25, Z+5	; 0x05
    a55a:	20 e2       	ldi	r18, 0x20	; 32
    a55c:	33 e0       	ldi	r19, 0x03	; 3
    a55e:	b9 01       	movw	r22, r18
    a560:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
		sprite->x = tile * 800;
    a564:	62 9f       	mul	r22, r18
    a566:	c0 01       	movw	r24, r0
    a568:	63 9f       	mul	r22, r19
    a56a:	90 0d       	add	r25, r0
    a56c:	72 9f       	mul	r23, r18
    a56e:	90 0d       	add	r25, r0
    a570:	11 24       	eor	r1, r1
    a572:	95 83       	std	Z+5, r25	; 0x05
    a574:	84 83       	std	Z+4, r24	; 0x04
    a576:	23 c0       	rjmp	.+70     	; 0xa5be <recoil_sprite+0x96>
	}
	else if (sprite->direction == D_DOWN)
    a578:	82 30       	cpi	r24, 0x02	; 2
    a57a:	89 f4       	brne	.+34     	; 0xa59e <recoil_sprite+0x76>
	{
		tile = sprite->y / 800;
    a57c:	86 81       	ldd	r24, Z+6	; 0x06
    a57e:	97 81       	ldd	r25, Z+7	; 0x07
    a580:	20 e2       	ldi	r18, 0x20	; 32
    a582:	33 e0       	ldi	r19, 0x03	; 3
    a584:	b9 01       	movw	r22, r18
    a586:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
		sprite->y = tile * 800;
    a58a:	62 9f       	mul	r22, r18
    a58c:	c0 01       	movw	r24, r0
    a58e:	63 9f       	mul	r22, r19
    a590:	90 0d       	add	r25, r0
    a592:	72 9f       	mul	r23, r18
    a594:	90 0d       	add	r25, r0
    a596:	11 24       	eor	r1, r1
    a598:	97 83       	std	Z+7, r25	; 0x07
    a59a:	86 83       	std	Z+6, r24	; 0x06
    a59c:	10 c0       	rjmp	.+32     	; 0xa5be <recoil_sprite+0x96>
	}
	else
	{
		tile = (sprite->x / 800) + 1;
    a59e:	84 81       	ldd	r24, Z+4	; 0x04
    a5a0:	95 81       	ldd	r25, Z+5	; 0x05
    a5a2:	20 e2       	ldi	r18, 0x20	; 32
    a5a4:	33 e0       	ldi	r19, 0x03	; 3
    a5a6:	b9 01       	movw	r22, r18
    a5a8:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    a5ac:	81 e0       	ldi	r24, 0x01	; 1
    a5ae:	86 0f       	add	r24, r22
		sprite->x = tile * 800;
    a5b0:	82 9f       	mul	r24, r18
    a5b2:	a0 01       	movw	r20, r0
    a5b4:	83 9f       	mul	r24, r19
    a5b6:	50 0d       	add	r21, r0
    a5b8:	11 24       	eor	r1, r1
    a5ba:	55 83       	std	Z+5, r21	; 0x05
    a5bc:	44 83       	std	Z+4, r20	; 0x04
	}
	sprite->recoiled = 1;
    a5be:	81 e0       	ldi	r24, 0x01	; 1
    a5c0:	83 83       	std	Z+3, r24	; 0x03
    a5c2:	08 95       	ret

0000a5c4 <recoil_sprite_fine>:
}

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    a5c4:	cf 93       	push	r28
    a5c6:	df 93       	push	r29
    a5c8:	eb 01       	movw	r28, r22
	u16 speed = get_delta(p, sprite);
    a5ca:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
	
	if (sprite->direction == D_UP)
    a5ce:	28 81       	ld	r18, Y
    a5d0:	21 11       	cpse	r18, r1
    a5d2:	05 c0       	rjmp	.+10     	; 0xa5de <recoil_sprite_fine+0x1a>
	{
		sprite->y += speed;
    a5d4:	2e 81       	ldd	r18, Y+6	; 0x06
    a5d6:	3f 81       	ldd	r19, Y+7	; 0x07
    a5d8:	82 0f       	add	r24, r18
    a5da:	93 1f       	adc	r25, r19
    a5dc:	11 c0       	rjmp	.+34     	; 0xa600 <recoil_sprite_fine+0x3c>
	}
	else if (sprite->direction == D_RIGHT)
    a5de:	21 30       	cpi	r18, 0x01	; 1
    a5e0:	39 f4       	brne	.+14     	; 0xa5f0 <recoil_sprite_fine+0x2c>
	{
		sprite->x -= speed;
    a5e2:	2c 81       	ldd	r18, Y+4	; 0x04
    a5e4:	3d 81       	ldd	r19, Y+5	; 0x05
    a5e6:	a9 01       	movw	r20, r18
    a5e8:	48 1b       	sub	r20, r24
    a5ea:	59 0b       	sbc	r21, r25
    a5ec:	ca 01       	movw	r24, r20
    a5ee:	0f c0       	rjmp	.+30     	; 0xa60e <recoil_sprite_fine+0x4a>
	}
	else if (sprite->direction == D_DOWN)
    a5f0:	22 30       	cpi	r18, 0x02	; 2
    a5f2:	49 f4       	brne	.+18     	; 0xa606 <recoil_sprite_fine+0x42>
	{
		sprite->y -= speed;
    a5f4:	2e 81       	ldd	r18, Y+6	; 0x06
    a5f6:	3f 81       	ldd	r19, Y+7	; 0x07
    a5f8:	a9 01       	movw	r20, r18
    a5fa:	48 1b       	sub	r20, r24
    a5fc:	59 0b       	sbc	r21, r25
    a5fe:	ca 01       	movw	r24, r20
    a600:	9f 83       	std	Y+7, r25	; 0x07
    a602:	8e 83       	std	Y+6, r24	; 0x06
    a604:	06 c0       	rjmp	.+12     	; 0xa612 <recoil_sprite_fine+0x4e>
	}
	else
	{
		sprite->x += speed;
    a606:	2c 81       	ldd	r18, Y+4	; 0x04
    a608:	3d 81       	ldd	r19, Y+5	; 0x05
    a60a:	82 0f       	add	r24, r18
    a60c:	93 1f       	adc	r25, r19
    a60e:	9d 83       	std	Y+5, r25	; 0x05
    a610:	8c 83       	std	Y+4, r24	; 0x04
	}
	sprite->recoiled = 1;
    a612:	81 e0       	ldi	r24, 0x01	; 1
    a614:	8b 83       	std	Y+3, r24	; 0x03
}
    a616:	df 91       	pop	r29
    a618:	cf 91       	pop	r28
    a61a:	08 95       	ret

0000a61c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a61c:	81 59       	subi	r24, 0x91	; 145
    a61e:	93 4f       	sbci	r25, 0xF3	; 243
    a620:	fc 01       	movw	r30, r24
    a622:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a624:	81 30       	cpi	r24, 0x01	; 1
    a626:	31 f0       	breq	.+12     	; 0xa634 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    a628:	82 30       	cpi	r24, 0x02	; 2
    a62a:	31 f0       	breq	.+12     	; 0xa638 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    a62c:	87 33       	cpi	r24, 0x37	; 55
    a62e:	31 f0       	breq	.+12     	; 0xa63c <solid_square_tile+0x20>

	return 0;
    a630:	80 e0       	ldi	r24, 0x00	; 0
    a632:	08 95       	ret
    a634:	81 e0       	ldi	r24, 0x01	; 1
    a636:	08 95       	ret
    a638:	82 e0       	ldi	r24, 0x02	; 2
    a63a:	08 95       	ret
    a63c:	87 e3       	ldi	r24, 0x37	; 55
}
    a63e:	08 95       	ret

0000a640 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a640:	81 59       	subi	r24, 0x91	; 145
    a642:	93 4f       	sbci	r25, 0xF3	; 243
    a644:	fc 01       	movw	r30, r24
    a646:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a648:	83 30       	cpi	r24, 0x03	; 3
    a64a:	41 f0       	breq	.+16     	; 0xa65c <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a64c:	86 30       	cpi	r24, 0x06	; 6
    a64e:	41 f0       	breq	.+16     	; 0xa660 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a650:	84 30       	cpi	r24, 0x04	; 4
    a652:	41 f0       	breq	.+16     	; 0xa664 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a654:	85 30       	cpi	r24, 0x05	; 5
    a656:	41 f0       	breq	.+16     	; 0xa668 <solid_directional_tile+0x28>
	
	return 0;
    a658:	80 e0       	ldi	r24, 0x00	; 0
    a65a:	08 95       	ret
    a65c:	83 e0       	ldi	r24, 0x03	; 3
    a65e:	08 95       	ret
    a660:	86 e0       	ldi	r24, 0x06	; 6
    a662:	08 95       	ret
    a664:	84 e0       	ldi	r24, 0x04	; 4
    a666:	08 95       	ret
    a668:	85 e0       	ldi	r24, 0x05	; 5
}
    a66a:	08 95       	ret

0000a66c <solid_tile>:

u8 solid_tile(int tile_index)
{
    a66c:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    a66e:	fc 01       	movw	r30, r24
    a670:	e1 59       	subi	r30, 0x91	; 145
    a672:	f3 4f       	sbci	r31, 0xF3	; 243
    a674:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a676:	91 30       	cpi	r25, 0x01	; 1
    a678:	39 f0       	breq	.+14     	; 0xa688 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    a67a:	92 30       	cpi	r25, 0x02	; 2
    a67c:	39 f0       	breq	.+14     	; 0xa68c <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    a67e:	97 33       	cpi	r25, 0x37	; 55
    a680:	39 f0       	breq	.+14     	; 0xa690 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    a682:	c9 01       	movw	r24, r18
    a684:	0c 94 20 53 	jmp	0xa640	; 0xa640 <solid_directional_tile>
    a688:	81 e0       	ldi	r24, 0x01	; 1
    a68a:	08 95       	ret
    a68c:	82 e0       	ldi	r24, 0x02	; 2
    a68e:	08 95       	ret
    a690:	87 e3       	ldi	r24, 0x37	; 55
}
    a692:	08 95       	ret

0000a694 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u16 x, u16 y, u16 width, u16 height)
{
    a694:	af 92       	push	r10
    a696:	bf 92       	push	r11
    a698:	cf 92       	push	r12
    a69a:	df 92       	push	r13
    a69c:	ef 92       	push	r14
    a69e:	ff 92       	push	r15
    a6a0:	0f 93       	push	r16
    a6a2:	1f 93       	push	r17
    a6a4:	cf 93       	push	r28
    a6a6:	df 93       	push	r29
    a6a8:	eb 01       	movw	r28, r22
    a6aa:	7a 01       	movw	r14, r20
	u8 tile = level.level_map[tile_index];
    a6ac:	fc 01       	movw	r30, r24
    a6ae:	e1 59       	subi	r30, 0x91	; 145
    a6b0:	f3 4f       	sbci	r31, 0xF3	; 243
    a6b2:	d1 80       	ldd	r13, Z+1	; 0x01
	u16 tile_x = (tile_index % 30) * 800;
    a6b4:	6e e1       	ldi	r22, 0x1E	; 30
    a6b6:	70 e0       	ldi	r23, 0x00	; 0
    a6b8:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    a6bc:	40 e2       	ldi	r20, 0x20	; 32
    a6be:	53 e0       	ldi	r21, 0x03	; 3
    a6c0:	84 9f       	mul	r24, r20
    a6c2:	f0 01       	movw	r30, r0
    a6c4:	85 9f       	mul	r24, r21
    a6c6:	f0 0d       	add	r31, r0
    a6c8:	94 9f       	mul	r25, r20
    a6ca:	f0 0d       	add	r31, r0
    a6cc:	11 24       	eor	r1, r1
	u16 tile_y = (tile_index / 30 + 3) * 800;
    a6ce:	6d 5f       	subi	r22, 0xFD	; 253
    a6d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a6d2:	64 9f       	mul	r22, r20
    a6d4:	c0 01       	movw	r24, r0
    a6d6:	65 9f       	mul	r22, r21
    a6d8:	90 0d       	add	r25, r0
    a6da:	74 9f       	mul	r23, r20
    a6dc:	90 0d       	add	r25, r0
    a6de:	11 24       	eor	r1, r1
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x+width-1, y, x+width-1, y+height-1)) return tile;
		if (LBLineIntersect(tile_x, tile_y, tile_x+799, tile_y+799, x, y+height-1, x+width-1, y+height-1)) return tile;
	}
	
	return 0;*/
	if (tile == L_TR)
    a6e0:	64 e0       	ldi	r22, 0x04	; 4
    a6e2:	d6 12       	cpse	r13, r22
    a6e4:	3a c0       	rjmp	.+116    	; 0xa75a <collides_directional_tile+0xc6>
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a6e6:	2c 0f       	add	r18, r28
    a6e8:	3d 1f       	adc	r19, r29
    a6ea:	a9 01       	movw	r20, r18
    a6ec:	41 50       	subi	r20, 0x01	; 1
    a6ee:	51 09       	sbc	r21, r1
    a6f0:	bf 01       	movw	r22, r30
    a6f2:	60 5e       	subi	r22, 0xE0	; 224
    a6f4:	7c 4f       	sbci	r23, 0xFC	; 252
    a6f6:	46 17       	cp	r20, r22
    a6f8:	57 07       	cpc	r21, r23
    a6fa:	08 f0       	brcs	.+2      	; 0xa6fe <collides_directional_tile+0x6a>
    a6fc:	34 c1       	rjmp	.+616    	; 0xa966 <collides_directional_tile+0x2d2>
    a6fe:	4e 17       	cp	r20, r30
    a700:	5f 07       	cpc	r21, r31
    a702:	08 f4       	brcc	.+2      	; 0xa706 <collides_directional_tile+0x72>
    a704:	30 c1       	rjmp	.+608    	; 0xa966 <collides_directional_tile+0x2d2>
    a706:	e8 16       	cp	r14, r24
    a708:	f9 06       	cpc	r15, r25
    a70a:	30 f0       	brcs	.+12     	; 0xa718 <collides_directional_tile+0x84>
    a70c:	dc 01       	movw	r26, r24
    a70e:	a0 5e       	subi	r26, 0xE0	; 224
    a710:	bc 4f       	sbci	r27, 0xFC	; 252
    a712:	ea 16       	cp	r14, r26
    a714:	fb 06       	cpc	r15, r27
    a716:	b8 f0       	brcs	.+46     	; 0xa746 <collides_directional_tile+0xb2>
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a718:	ce 17       	cp	r28, r30
    a71a:	df 07       	cpc	r29, r31
    a71c:	08 f4       	brcc	.+2      	; 0xa720 <collides_directional_tile+0x8c>
    a71e:	0e c1       	rjmp	.+540    	; 0xa93c <collides_directional_tile+0x2a8>
    a720:	c6 17       	cp	r28, r22
    a722:	d7 07       	cpc	r29, r23
    a724:	08 f0       	brcs	.+2      	; 0xa728 <collides_directional_tile+0x94>
    a726:	0a c1       	rjmp	.+532    	; 0xa93c <collides_directional_tile+0x2a8>
    a728:	e8 16       	cp	r14, r24
    a72a:	f9 06       	cpc	r15, r25
    a72c:	08 f4       	brcc	.+2      	; 0xa730 <collides_directional_tile+0x9c>
    a72e:	fe c0       	rjmp	.+508    	; 0xa92c <collides_directional_tile+0x298>
    a730:	dc 01       	movw	r26, r24
    a732:	a0 5e       	subi	r26, 0xE0	; 224
    a734:	bc 4f       	sbci	r27, 0xFC	; 252
    a736:	ea 16       	cp	r14, r26
    a738:	fb 06       	cpc	r15, r27
    a73a:	08 f0       	brcs	.+2      	; 0xa73e <collides_directional_tile+0xaa>
    a73c:	f7 c0       	rjmp	.+494    	; 0xa92c <collides_directional_tile+0x298>
		{
			if (x+width >= tile_x+800) return 1;
    a73e:	26 17       	cp	r18, r22
    a740:	37 07       	cpc	r19, r23
    a742:	08 f0       	brcs	.+2      	; 0xa746 <collides_directional_tile+0xb2>
    a744:	0e c1       	rjmp	.+540    	; 0xa962 <collides_directional_tile+0x2ce>
    a746:	8e 1b       	sub	r24, r30
    a748:	9f 0b       	sbc	r25, r31
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y <= tile_y) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a74a:	48 0f       	add	r20, r24
    a74c:	59 1f       	adc	r21, r25
    a74e:	81 e0       	ldi	r24, 0x01	; 1
    a750:	4e 15       	cp	r20, r14
    a752:	5f 05       	cpc	r21, r15
    a754:	08 f0       	brcs	.+2      	; 0xa758 <collides_directional_tile+0xc4>
    a756:	5c c1       	rjmp	.+696    	; 0xaa10 <collides_directional_tile+0x37c>
    a758:	5a c1       	rjmp	.+692    	; 0xaa0e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_TL)
    a75a:	63 e0       	ldi	r22, 0x03	; 3
    a75c:	d6 12       	cpse	r13, r22
    a75e:	55 c0       	rjmp	.+170    	; 0xa80a <collides_directional_tile+0x176>
    a760:	bf 01       	movw	r22, r30
    a762:	60 5e       	subi	r22, 0xE0	; 224
    a764:	7c 4f       	sbci	r23, 0xFC	; 252
	{
		if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a766:	ce 17       	cp	r28, r30
    a768:	df 07       	cpc	r29, r31
    a76a:	88 f0       	brcs	.+34     	; 0xa78e <collides_directional_tile+0xfa>
    a76c:	c6 17       	cp	r28, r22
    a76e:	d7 07       	cpc	r29, r23
    a770:	70 f4       	brcc	.+28     	; 0xa78e <collides_directional_tile+0xfa>
    a772:	e8 16       	cp	r14, r24
    a774:	f9 06       	cpc	r15, r25
    a776:	58 f0       	brcs	.+22     	; 0xa78e <collides_directional_tile+0xfa>
    a778:	dc 01       	movw	r26, r24
    a77a:	a0 5e       	subi	r26, 0xE0	; 224
    a77c:	bc 4f       	sbci	r27, 0xFC	; 252
    a77e:	ea 16       	cp	r14, r26
    a780:	fb 06       	cpc	r15, r27
    a782:	28 f4       	brcc	.+10     	; 0xa78e <collides_directional_tile+0xfa>
    a784:	4c 1b       	sub	r20, r28
    a786:	5d 0b       	sbc	r21, r29
    a788:	e4 0f       	add	r30, r20
    a78a:	f5 1f       	adc	r31, r21
    a78c:	36 c0       	rjmp	.+108    	; 0xa7fa <collides_directional_tile+0x166>
    a78e:	21 50       	subi	r18, 0x01	; 1
    a790:	31 09       	sbc	r19, r1
		{
			if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
    a792:	2c 0f       	add	r18, r28
    a794:	3d 1f       	adc	r19, r29
    a796:	26 17       	cp	r18, r22
    a798:	37 07       	cpc	r19, r23
    a79a:	80 f4       	brcc	.+32     	; 0xa7bc <collides_directional_tile+0x128>
    a79c:	2e 17       	cp	r18, r30
    a79e:	3f 07       	cpc	r19, r31
    a7a0:	68 f0       	brcs	.+26     	; 0xa7bc <collides_directional_tile+0x128>
    a7a2:	e8 16       	cp	r14, r24
    a7a4:	f9 06       	cpc	r15, r25
    a7a6:	50 f0       	brcs	.+20     	; 0xa7bc <collides_directional_tile+0x128>
    a7a8:	9c 01       	movw	r18, r24
    a7aa:	20 5e       	subi	r18, 0xE0	; 224
    a7ac:	3c 4f       	sbci	r19, 0xFC	; 252
    a7ae:	e2 16       	cp	r14, r18
    a7b0:	f3 06       	cpc	r15, r19
    a7b2:	20 f4       	brcc	.+8      	; 0xa7bc <collides_directional_tile+0x128>
		{
			if (x <= tile_x) return 1;
    a7b4:	ec 17       	cp	r30, r28
    a7b6:	fd 07       	cpc	r31, r29
    a7b8:	e0 f0       	brcs	.+56     	; 0xa7f2 <collides_directional_tile+0x15e>
    a7ba:	d3 c0       	rjmp	.+422    	; 0xa962 <collides_directional_tile+0x2ce>
			else if (y < tile_y+(tile_x+800-x)) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a7bc:	ce 17       	cp	r28, r30
    a7be:	df 07       	cpc	r29, r31
    a7c0:	08 f4       	brcc	.+2      	; 0xa7c4 <collides_directional_tile+0x130>
    a7c2:	25 c1       	rjmp	.+586    	; 0xaa0e <collides_directional_tile+0x37a>
    a7c4:	c6 17       	cp	r28, r22
    a7c6:	d7 07       	cpc	r29, r23
    a7c8:	08 f0       	brcs	.+2      	; 0xa7cc <collides_directional_tile+0x138>
    a7ca:	21 c1       	rjmp	.+578    	; 0xaa0e <collides_directional_tile+0x37a>
    a7cc:	01 50       	subi	r16, 0x01	; 1
    a7ce:	11 09       	sbc	r17, r1
    a7d0:	0e 0d       	add	r16, r14
    a7d2:	1f 1d       	adc	r17, r15
    a7d4:	08 17       	cp	r16, r24
    a7d6:	19 07       	cpc	r17, r25
    a7d8:	08 f4       	brcc	.+2      	; 0xa7dc <collides_directional_tile+0x148>
    a7da:	19 c1       	rjmp	.+562    	; 0xaa0e <collides_directional_tile+0x37a>
    a7dc:	9c 01       	movw	r18, r24
    a7de:	20 5e       	subi	r18, 0xE0	; 224
    a7e0:	3c 4f       	sbci	r19, 0xFC	; 252
    a7e2:	02 17       	cp	r16, r18
    a7e4:	13 07       	cpc	r17, r19
    a7e6:	08 f0       	brcs	.+2      	; 0xa7ea <collides_directional_tile+0x156>
    a7e8:	12 c1       	rjmp	.+548    	; 0xaa0e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a7ea:	8e 15       	cp	r24, r14
    a7ec:	9f 05       	cpc	r25, r15
    a7ee:	08 f0       	brcs	.+2      	; 0xa7f2 <collides_directional_tile+0x15e>
    a7f0:	b8 c0       	rjmp	.+368    	; 0xa962 <collides_directional_tile+0x2ce>
    a7f2:	ec 1b       	sub	r30, r28
    a7f4:	fd 0b       	sbc	r31, r29
    a7f6:	e0 5e       	subi	r30, 0xE0	; 224
    a7f8:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y < tile_y+(tile_x+800-x)) return 1;
    a7fa:	e8 0f       	add	r30, r24
    a7fc:	f9 1f       	adc	r31, r25
    a7fe:	81 e0       	ldi	r24, 0x01	; 1
    a800:	ee 16       	cp	r14, r30
    a802:	ff 06       	cpc	r15, r31
    a804:	08 f4       	brcc	.+2      	; 0xa808 <collides_directional_tile+0x174>
    a806:	04 c1       	rjmp	.+520    	; 0xaa10 <collides_directional_tile+0x37c>
    a808:	02 c1       	rjmp	.+516    	; 0xaa0e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BL)
    a80a:	65 e0       	ldi	r22, 0x05	; 5
    a80c:	d6 12       	cpse	r13, r22
    a80e:	5f c0       	rjmp	.+190    	; 0xa8ce <collides_directional_tile+0x23a>
	{
		if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a810:	ce 17       	cp	r28, r30
    a812:	df 07       	cpc	r29, r31
    a814:	80 f1       	brcs	.+96     	; 0xa876 <collides_directional_tile+0x1e2>
    a816:	af 01       	movw	r20, r30
    a818:	40 5e       	subi	r20, 0xE0	; 224
    a81a:	5c 4f       	sbci	r21, 0xFC	; 252
    a81c:	c4 17       	cp	r28, r20
    a81e:	d5 07       	cpc	r29, r21
    a820:	50 f5       	brcc	.+84     	; 0xa876 <collides_directional_tile+0x1e2>
    a822:	a8 01       	movw	r20, r16
    a824:	41 50       	subi	r20, 0x01	; 1
    a826:	51 09       	sbc	r21, r1
    a828:	4e 0d       	add	r20, r14
    a82a:	5f 1d       	adc	r21, r15
    a82c:	48 17       	cp	r20, r24
    a82e:	59 07       	cpc	r21, r25
    a830:	80 f0       	brcs	.+32     	; 0xa852 <collides_directional_tile+0x1be>
    a832:	bc 01       	movw	r22, r24
    a834:	60 5e       	subi	r22, 0xE0	; 224
    a836:	7c 4f       	sbci	r23, 0xFC	; 252
    a838:	46 17       	cp	r20, r22
    a83a:	57 07       	cpc	r21, r23
    a83c:	50 f4       	brcc	.+20     	; 0xa852 <collides_directional_tile+0x1be>
    a83e:	8e 1b       	sub	r24, r30
    a840:	9f 0b       	sbc	r25, r31
		{
			if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a842:	c8 0f       	add	r28, r24
    a844:	d9 1f       	adc	r29, r25
    a846:	81 e0       	ldi	r24, 0x01	; 1
    a848:	4c 17       	cp	r20, r28
    a84a:	5d 07       	cpc	r21, r29
    a84c:	08 f0       	brcs	.+2      	; 0xa850 <collides_directional_tile+0x1bc>
    a84e:	e0 c0       	rjmp	.+448    	; 0xaa10 <collides_directional_tile+0x37c>
    a850:	de c0       	rjmp	.+444    	; 0xaa0e <collides_directional_tile+0x37a>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a852:	e8 16       	cp	r14, r24
    a854:	f9 06       	cpc	r15, r25
    a856:	78 f0       	brcs	.+30     	; 0xa876 <collides_directional_tile+0x1e2>
    a858:	ac 01       	movw	r20, r24
    a85a:	40 5e       	subi	r20, 0xE0	; 224
    a85c:	5c 4f       	sbci	r21, 0xFC	; 252
    a85e:	e4 16       	cp	r14, r20
    a860:	f5 06       	cpc	r15, r21
    a862:	48 f4       	brcc	.+18     	; 0xa876 <collides_directional_tile+0x1e2>
		{
			if (y+height >= tile_y+800) return 1;
    a864:	0e 0d       	add	r16, r14
    a866:	1f 1d       	adc	r17, r15
    a868:	04 17       	cp	r16, r20
    a86a:	15 07       	cpc	r17, r21
    a86c:	08 f0       	brcs	.+2      	; 0xa870 <collides_directional_tile+0x1dc>
    a86e:	79 c0       	rjmp	.+242    	; 0xa962 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a870:	01 50       	subi	r16, 0x01	; 1
    a872:	11 09       	sbc	r17, r1
    a874:	22 c0       	rjmp	.+68     	; 0xa8ba <collides_directional_tile+0x226>
    a876:	21 50       	subi	r18, 0x01	; 1
    a878:	31 09       	sbc	r19, r1
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a87a:	2c 0f       	add	r18, r28
    a87c:	3d 1f       	adc	r19, r29
    a87e:	2e 17       	cp	r18, r30
    a880:	3f 07       	cpc	r19, r31
    a882:	08 f4       	brcc	.+2      	; 0xa886 <collides_directional_tile+0x1f2>
    a884:	c4 c0       	rjmp	.+392    	; 0xaa0e <collides_directional_tile+0x37a>
    a886:	af 01       	movw	r20, r30
    a888:	40 5e       	subi	r20, 0xE0	; 224
    a88a:	5c 4f       	sbci	r21, 0xFC	; 252
    a88c:	24 17       	cp	r18, r20
    a88e:	35 07       	cpc	r19, r21
    a890:	08 f0       	brcs	.+2      	; 0xa894 <collides_directional_tile+0x200>
    a892:	bd c0       	rjmp	.+378    	; 0xaa0e <collides_directional_tile+0x37a>
    a894:	01 50       	subi	r16, 0x01	; 1
    a896:	11 09       	sbc	r17, r1
    a898:	0e 0d       	add	r16, r14
    a89a:	1f 1d       	adc	r17, r15
    a89c:	08 17       	cp	r16, r24
    a89e:	19 07       	cpc	r17, r25
    a8a0:	08 f4       	brcc	.+2      	; 0xa8a4 <collides_directional_tile+0x210>
    a8a2:	b5 c0       	rjmp	.+362    	; 0xaa0e <collides_directional_tile+0x37a>
    a8a4:	9c 01       	movw	r18, r24
    a8a6:	20 5e       	subi	r18, 0xE0	; 224
    a8a8:	3c 4f       	sbci	r19, 0xFC	; 252
    a8aa:	02 17       	cp	r16, r18
    a8ac:	13 07       	cpc	r17, r19
    a8ae:	08 f0       	brcs	.+2      	; 0xa8b2 <collides_directional_tile+0x21e>
    a8b0:	ae c0       	rjmp	.+348    	; 0xaa0e <collides_directional_tile+0x37a>
		{
			if (x < tile_x) return 1;
    a8b2:	ce 17       	cp	r28, r30
    a8b4:	df 07       	cpc	r29, r31
    a8b6:	08 f4       	brcc	.+2      	; 0xa8ba <collides_directional_tile+0x226>
    a8b8:	54 c0       	rjmp	.+168    	; 0xa962 <collides_directional_tile+0x2ce>
    a8ba:	8e 1b       	sub	r24, r30
    a8bc:	9f 0b       	sbc	r25, r31
			else if (y+height-1 >= tile_y+(x-tile_x)) return 1;
    a8be:	c8 0f       	add	r28, r24
    a8c0:	d9 1f       	adc	r29, r25
    a8c2:	81 e0       	ldi	r24, 0x01	; 1
    a8c4:	0c 17       	cp	r16, r28
    a8c6:	1d 07       	cpc	r17, r29
    a8c8:	08 f0       	brcs	.+2      	; 0xa8cc <collides_directional_tile+0x238>
    a8ca:	a2 c0       	rjmp	.+324    	; 0xaa10 <collides_directional_tile+0x37c>
    a8cc:	a0 c0       	rjmp	.+320    	; 0xaa0e <collides_directional_tile+0x37a>
		}
	}
	
	else if (tile == L_BR)
    a8ce:	66 e0       	ldi	r22, 0x06	; 6
    a8d0:	d6 12       	cpse	r13, r22
    a8d2:	9d c0       	rjmp	.+314    	; 0xaa0e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a8d4:	2c 0f       	add	r18, r28
    a8d6:	3d 1f       	adc	r19, r29
    a8d8:	d9 01       	movw	r26, r18
    a8da:	11 97       	sbiw	r26, 0x01	; 1
    a8dc:	ae 17       	cp	r26, r30
    a8de:	bf 07       	cpc	r27, r31
    a8e0:	08 f4       	brcc	.+2      	; 0xa8e4 <collides_directional_tile+0x250>
    a8e2:	91 c0       	rjmp	.+290    	; 0xaa06 <collides_directional_tile+0x372>
    a8e4:	bf 01       	movw	r22, r30
    a8e6:	60 5e       	subi	r22, 0xE0	; 224
    a8e8:	7c 4f       	sbci	r23, 0xFC	; 252
    a8ea:	a6 17       	cp	r26, r22
    a8ec:	b7 07       	cpc	r27, r23
    a8ee:	08 f0       	brcs	.+2      	; 0xa8f2 <collides_directional_tile+0x25e>
    a8f0:	8a c0       	rjmp	.+276    	; 0xaa06 <collides_directional_tile+0x372>
    a8f2:	b8 01       	movw	r22, r16
    a8f4:	61 50       	subi	r22, 0x01	; 1
    a8f6:	71 09       	sbc	r23, r1
    a8f8:	5b 01       	movw	r10, r22
    a8fa:	ae 0c       	add	r10, r14
    a8fc:	bf 1c       	adc	r11, r15
    a8fe:	a8 16       	cp	r10, r24
    a900:	b9 06       	cpc	r11, r25
    a902:	d0 f1       	brcs	.+116    	; 0xa978 <collides_directional_tile+0x2e4>
    a904:	6c 01       	movw	r12, r24
    a906:	60 ee       	ldi	r22, 0xE0	; 224
    a908:	c6 1a       	sub	r12, r22
    a90a:	6c ef       	ldi	r22, 0xFC	; 252
    a90c:	d6 0a       	sbc	r13, r22
    a90e:	ac 14       	cp	r10, r12
    a910:	bd 04       	cpc	r11, r13
    a912:	90 f5       	brcc	.+100    	; 0xa978 <collides_directional_tile+0x2e4>
    a914:	42 1b       	sub	r20, r18
    a916:	53 0b       	sbc	r21, r19
    a918:	e4 0f       	add	r30, r20
    a91a:	f5 1f       	adc	r31, r21
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a91c:	e8 0f       	add	r30, r24
    a91e:	f9 1f       	adc	r31, r25
    a920:	81 e0       	ldi	r24, 0x01	; 1
    a922:	ae 16       	cp	r10, r30
    a924:	bf 06       	cpc	r11, r31
    a926:	08 f0       	brcs	.+2      	; 0xa92a <collides_directional_tile+0x296>
    a928:	73 c0       	rjmp	.+230    	; 0xaa10 <collides_directional_tile+0x37c>
    a92a:	71 c0       	rjmp	.+226    	; 0xaa0e <collides_directional_tile+0x37a>
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
		{
			if (x+width >= tile_x+800) return 1;
			else if (y <= tile_y+(x+width-1-tile_x)) return 1;
		}
		else if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a92c:	46 17       	cp	r20, r22
    a92e:	57 07       	cpc	r21, r23
    a930:	08 f0       	brcs	.+2      	; 0xa934 <collides_directional_tile+0x2a0>
    a932:	6d c0       	rjmp	.+218    	; 0xaa0e <collides_directional_tile+0x37a>
    a934:	4e 17       	cp	r20, r30
    a936:	5f 07       	cpc	r21, r31
    a938:	08 f4       	brcc	.+2      	; 0xa93c <collides_directional_tile+0x2a8>
    a93a:	69 c0       	rjmp	.+210    	; 0xaa0e <collides_directional_tile+0x37a>
    a93c:	01 50       	subi	r16, 0x01	; 1
    a93e:	11 09       	sbc	r17, r1
    a940:	0e 0d       	add	r16, r14
    a942:	1f 1d       	adc	r17, r15
    a944:	08 17       	cp	r16, r24
    a946:	19 07       	cpc	r17, r25
    a948:	08 f4       	brcc	.+2      	; 0xa94c <collides_directional_tile+0x2b8>
    a94a:	61 c0       	rjmp	.+194    	; 0xaa0e <collides_directional_tile+0x37a>
    a94c:	9c 01       	movw	r18, r24
    a94e:	20 5e       	subi	r18, 0xE0	; 224
    a950:	3c 4f       	sbci	r19, 0xFC	; 252
    a952:	02 17       	cp	r16, r18
    a954:	13 07       	cpc	r17, r19
    a956:	08 f0       	brcs	.+2      	; 0xa95a <collides_directional_tile+0x2c6>
    a958:	5a c0       	rjmp	.+180    	; 0xaa0e <collides_directional_tile+0x37a>
		{
			if (y <= tile_y) return 1;
    a95a:	8e 15       	cp	r24, r14
    a95c:	9f 05       	cpc	r25, r15
    a95e:	08 f4       	brcc	.+2      	; 0xa962 <collides_directional_tile+0x2ce>
    a960:	f2 ce       	rjmp	.-540    	; 0xa746 <collides_directional_tile+0xb2>
	return 0;*/
	if (tile == L_TR)
	{
		if (x+width-1 < tile_x+800 && x+width-1 >= tile_x && y >= tile_y && y < tile_y+800)
		{
			if (y <= tile_y+(x+width-1-tile_x)) return 1;
    a962:	81 e0       	ldi	r24, 0x01	; 1
    a964:	55 c0       	rjmp	.+170    	; 0xaa10 <collides_directional_tile+0x37c>
		}
		else if (x >= tile_x && x < tile_x+800 && y >= tile_y && y < tile_y+800)
    a966:	ce 17       	cp	r28, r30
    a968:	df 07       	cpc	r29, r31
    a96a:	08 f4       	brcc	.+2      	; 0xa96e <collides_directional_tile+0x2da>
    a96c:	50 c0       	rjmp	.+160    	; 0xaa0e <collides_directional_tile+0x37a>
    a96e:	c6 17       	cp	r28, r22
    a970:	d7 07       	cpc	r29, r23
    a972:	08 f4       	brcc	.+2      	; 0xa976 <collides_directional_tile+0x2e2>
    a974:	d9 ce       	rjmp	.-590    	; 0xa728 <collides_directional_tile+0x94>
    a976:	4b c0       	rjmp	.+150    	; 0xaa0e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    a978:	ce 17       	cp	r28, r30
    a97a:	df 07       	cpc	r29, r31
    a97c:	40 f1       	brcs	.+80     	; 0xa9ce <collides_directional_tile+0x33a>
    a97e:	bf 01       	movw	r22, r30
    a980:	60 5e       	subi	r22, 0xE0	; 224
    a982:	7c 4f       	sbci	r23, 0xFC	; 252
    a984:	c6 17       	cp	r28, r22
    a986:	d7 07       	cpc	r29, r23
    a988:	e0 f4       	brcc	.+56     	; 0xa9c2 <collides_directional_tile+0x32e>
    a98a:	a8 01       	movw	r20, r16
    a98c:	41 50       	subi	r20, 0x01	; 1
    a98e:	51 09       	sbc	r21, r1
    a990:	4e 0d       	add	r20, r14
    a992:	5f 1d       	adc	r21, r15
    a994:	48 17       	cp	r20, r24
    a996:	59 07       	cpc	r21, r25
    a998:	a0 f0       	brcs	.+40     	; 0xa9c2 <collides_directional_tile+0x32e>
    a99a:	ec 01       	movw	r28, r24
    a99c:	c0 5e       	subi	r28, 0xE0	; 224
    a99e:	dc 4f       	sbci	r29, 0xFC	; 252
    a9a0:	4c 17       	cp	r20, r28
    a9a2:	5d 07       	cpc	r21, r29
    a9a4:	70 f4       	brcc	.+28     	; 0xa9c2 <collides_directional_tile+0x32e>
		{
			if (x+width >= tile_x+800) return 1;
    a9a6:	26 17       	cp	r18, r22
    a9a8:	37 07       	cpc	r19, r23
    a9aa:	d8 f6       	brcc	.-74     	; 0xa962 <collides_directional_tile+0x2ce>
    a9ac:	e2 1b       	sub	r30, r18
    a9ae:	f3 0b       	sbc	r31, r19
    a9b0:	e0 5e       	subi	r30, 0xE0	; 224
    a9b2:	fc 4f       	sbci	r31, 0xFC	; 252
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a9b4:	e8 0f       	add	r30, r24
    a9b6:	f9 1f       	adc	r31, r25
    a9b8:	81 e0       	ldi	r24, 0x01	; 1
    a9ba:	4e 17       	cp	r20, r30
    a9bc:	5f 07       	cpc	r21, r31
    a9be:	40 f5       	brcc	.+80     	; 0xaa10 <collides_directional_tile+0x37c>
    a9c0:	26 c0       	rjmp	.+76     	; 0xaa0e <collides_directional_tile+0x37a>
		}
		else if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y >= tile_y && y < tile_y+800)
    a9c2:	ae 17       	cp	r26, r30
    a9c4:	bf 07       	cpc	r27, r31
    a9c6:	18 f1       	brcs	.+70     	; 0xaa0e <collides_directional_tile+0x37a>
    a9c8:	a6 17       	cp	r26, r22
    a9ca:	b7 07       	cpc	r27, r23
    a9cc:	00 f5       	brcc	.+64     	; 0xaa0e <collides_directional_tile+0x37a>
    a9ce:	e8 16       	cp	r14, r24
    a9d0:	f9 06       	cpc	r15, r25
    a9d2:	e8 f0       	brcs	.+58     	; 0xaa0e <collides_directional_tile+0x37a>
    a9d4:	ac 01       	movw	r20, r24
    a9d6:	40 5e       	subi	r20, 0xE0	; 224
    a9d8:	5c 4f       	sbci	r21, 0xFC	; 252
    a9da:	e4 16       	cp	r14, r20
    a9dc:	f5 06       	cpc	r15, r21
    a9de:	b8 f4       	brcc	.+46     	; 0xaa0e <collides_directional_tile+0x37a>
		{
			if (y+height >= tile_y+800) return 1;
    a9e0:	0e 0d       	add	r16, r14
    a9e2:	1f 1d       	adc	r17, r15
    a9e4:	04 17       	cp	r16, r20
    a9e6:	15 07       	cpc	r17, r21
    a9e8:	08 f0       	brcs	.+2      	; 0xa9ec <collides_directional_tile+0x358>
    a9ea:	bb cf       	rjmp	.-138    	; 0xa962 <collides_directional_tile+0x2ce>
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
    a9ec:	01 50       	subi	r16, 0x01	; 1
    a9ee:	11 09       	sbc	r17, r1
    a9f0:	e2 1b       	sub	r30, r18
    a9f2:	f3 0b       	sbc	r31, r19
    a9f4:	e0 5e       	subi	r30, 0xE0	; 224
    a9f6:	fc 4f       	sbci	r31, 0xFC	; 252
    a9f8:	e8 0f       	add	r30, r24
    a9fa:	f9 1f       	adc	r31, r25
    a9fc:	81 e0       	ldi	r24, 0x01	; 1
    a9fe:	0e 17       	cp	r16, r30
    aa00:	1f 07       	cpc	r17, r31
    aa02:	30 f4       	brcc	.+12     	; 0xaa10 <collides_directional_tile+0x37c>
    aa04:	04 c0       	rjmp	.+8      	; 0xaa0e <collides_directional_tile+0x37a>
	{
		if (x+width-1 >= tile_x && x+width-1 < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
		{
			if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
		else if (x >= tile_x && x < tile_x+800 && y+height-1 >= tile_y && y+height-1 < tile_y+800)
    aa06:	ce 17       	cp	r28, r30
    aa08:	df 07       	cpc	r29, r31
    aa0a:	08 f0       	brcs	.+2      	; 0xaa0e <collides_directional_tile+0x37a>
    aa0c:	b8 cf       	rjmp	.-144    	; 0xa97e <collides_directional_tile+0x2ea>
		{
			if (y+height >= tile_y+800) return 1;
			else if (y+height-1 >= tile_y+(tile_x+800-(x+width))) return 1;
		}
	}
	return 0;
    aa0e:	80 e0       	ldi	r24, 0x00	; 0
}
    aa10:	df 91       	pop	r29
    aa12:	cf 91       	pop	r28
    aa14:	1f 91       	pop	r17
    aa16:	0f 91       	pop	r16
    aa18:	ff 90       	pop	r15
    aa1a:	ef 90       	pop	r14
    aa1c:	df 90       	pop	r13
    aa1e:	cf 90       	pop	r12
    aa20:	bf 90       	pop	r11
    aa22:	af 90       	pop	r10
    aa24:	08 95       	ret

0000aa26 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    aa26:	8f 92       	push	r8
    aa28:	9f 92       	push	r9
    aa2a:	af 92       	push	r10
    aa2c:	bf 92       	push	r11
    aa2e:	cf 92       	push	r12
    aa30:	df 92       	push	r13
    aa32:	ef 92       	push	r14
    aa34:	ff 92       	push	r15
    aa36:	0f 93       	push	r16
    aa38:	1f 93       	push	r17
    aa3a:	cf 93       	push	r28
    aa3c:	df 93       	push	r29
    aa3e:	4c 01       	movw	r8, r24
    aa40:	eb 01       	movw	r28, r22
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    aa42:	ee 80       	ldd	r14, Y+6	; 0x06
    aa44:	ff 80       	ldd	r15, Y+7	; 0x07
    aa46:	88 ec       	ldi	r24, 0xC8	; 200
    aa48:	e8 0e       	add	r14, r24
    aa4a:	f1 1c       	adc	r15, r1
    aa4c:	0c 81       	ldd	r16, Y+4	; 0x04
    aa4e:	1d 81       	ldd	r17, Y+5	; 0x05
    aa50:	08 53       	subi	r16, 0x38	; 56
    aa52:	1f 4f       	sbci	r17, 0xFF	; 255
    aa54:	f4 01       	movw	r30, r8
    aa56:	e8 58       	subi	r30, 0x88	; 136
    aa58:	ff 4f       	sbci	r31, 0xFF	; 255
    aa5a:	60 81       	ld	r22, Z
    aa5c:	71 81       	ldd	r23, Z+1	; 0x01
    aa5e:	6c 59       	subi	r22, 0x9C	; 156
    aa60:	7f 4f       	sbci	r23, 0xFF	; 255
    aa62:	32 97       	sbiw	r30, 0x02	; 2
    aa64:	80 81       	ld	r24, Z
    aa66:	91 81       	ldd	r25, Z+1	; 0x01
    aa68:	20 e9       	ldi	r18, 0x90	; 144
    aa6a:	a2 2e       	mov	r10, r18
    aa6c:	bb 24       	eor	r11, r11
    aa6e:	b3 94       	inc	r11
    aa70:	30 e9       	ldi	r19, 0x90	; 144
    aa72:	c3 2e       	mov	r12, r19
    aa74:	dd 24       	eor	r13, r13
    aa76:	d3 94       	inc	r13
    aa78:	28 e7       	ldi	r18, 0x78	; 120
    aa7a:	35 e0       	ldi	r19, 0x05	; 5
    aa7c:	48 e7       	ldi	r20, 0x78	; 120
    aa7e:	55 e0       	ldi	r21, 0x05	; 5
    aa80:	8c 59       	subi	r24, 0x9C	; 156
    aa82:	9f 4f       	sbci	r25, 0xFF	; 255
    aa84:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    aa88:	88 23       	and	r24, r24
    aa8a:	51 f0       	breq	.+20     	; 0xaaa0 <player_shot+0x7a>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->netMessage.shared.x+100,p->netMessage.shared.y+100,1400,1400,shot->shared.x+200,shot->shared.y+200,400,400) &&
    aa8c:	f4 01       	movw	r30, r8
    aa8e:	82 85       	ldd	r24, Z+10	; 0x0a
    aa90:	88 37       	cpi	r24, 0x78	; 120
    aa92:	31 f4       	brne	.+12     	; 0xaaa0 <player_shot+0x7a>
		   p->grace_frame == FRAMES_PER_GRACE &&
    aa94:	81 e0       	ldi	r24, 0x01	; 1
    aa96:	2c 85       	ldd	r18, Y+12	; 0x0c
    aa98:	3d 85       	ldd	r19, Y+13	; 0x0d
    aa9a:	21 32       	cpi	r18, 0x21	; 33
    aa9c:	33 40       	sbci	r19, 0x03	; 3
    aa9e:	08 f4       	brcc	.+2      	; 0xaaa2 <player_shot+0x7c>
    aaa0:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    aaa2:	df 91       	pop	r29
    aaa4:	cf 91       	pop	r28
    aaa6:	1f 91       	pop	r17
    aaa8:	0f 91       	pop	r16
    aaaa:	ff 90       	pop	r15
    aaac:	ef 90       	pop	r14
    aaae:	df 90       	pop	r13
    aab0:	cf 90       	pop	r12
    aab2:	bf 90       	pop	r11
    aab4:	af 90       	pop	r10
    aab6:	9f 90       	pop	r9
    aab8:	8f 90       	pop	r8
    aaba:	08 95       	ret

0000aabc <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    aabc:	af 92       	push	r10
    aabe:	bf 92       	push	r11
    aac0:	cf 92       	push	r12
    aac2:	df 92       	push	r13
    aac4:	ef 92       	push	r14
    aac6:	ff 92       	push	r15
    aac8:	0f 93       	push	r16
    aaca:	1f 93       	push	r17
    aacc:	cf 93       	push	r28
    aace:	df 93       	push	r29
    aad0:	ec 01       	movw	r28, r24
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
    aad2:	fb 01       	movw	r30, r22
    aad4:	e6 80       	ldd	r14, Z+6	; 0x06
    aad6:	f7 80       	ldd	r15, Z+7	; 0x07
    aad8:	f8 ec       	ldi	r31, 0xC8	; 200
    aada:	ef 0e       	add	r14, r31
    aadc:	f1 1c       	adc	r15, r1
    aade:	fb 01       	movw	r30, r22
    aae0:	04 81       	ldd	r16, Z+4	; 0x04
    aae2:	15 81       	ldd	r17, Z+5	; 0x05
    aae4:	08 53       	subi	r16, 0x38	; 56
    aae6:	1f 4f       	sbci	r17, 0xFF	; 255
    aae8:	6e 81       	ldd	r22, Y+6	; 0x06
    aaea:	7f 81       	ldd	r23, Y+7	; 0x07
    aaec:	80 e9       	ldi	r24, 0x90	; 144
    aaee:	a8 2e       	mov	r10, r24
    aaf0:	bb 24       	eor	r11, r11
    aaf2:	b3 94       	inc	r11
    aaf4:	90 e9       	ldi	r25, 0x90	; 144
    aaf6:	c9 2e       	mov	r12, r25
    aaf8:	dd 24       	eor	r13, r13
    aafa:	d3 94       	inc	r13
    aafc:	20 e2       	ldi	r18, 0x20	; 32
    aafe:	33 e0       	ldi	r19, 0x03	; 3
    ab00:	40 e2       	ldi	r20, 0x20	; 32
    ab02:	53 e0       	ldi	r21, 0x03	; 3
    ab04:	8c 81       	ldd	r24, Y+4	; 0x04
    ab06:	9d 81       	ldd	r25, Y+5	; 0x05
    ab08:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
    ab0c:	88 23       	and	r24, r24
    ab0e:	39 f0       	breq	.+14     	; 0xab1e <turret_shot+0x62>
    ab10:	91 e0       	ldi	r25, 0x01	; 1
    ab12:	88 85       	ldd	r24, Y+8	; 0x08
    ab14:	81 11       	cpse	r24, r1
    ab16:	01 c0       	rjmp	.+2      	; 0xab1a <turret_shot+0x5e>
    ab18:	90 e0       	ldi	r25, 0x00	; 0
    ab1a:	89 2f       	mov	r24, r25
    ab1c:	01 c0       	rjmp	.+2      	; 0xab20 <turret_shot+0x64>
    ab1e:	80 e0       	ldi	r24, 0x00	; 0
}
    ab20:	df 91       	pop	r29
    ab22:	cf 91       	pop	r28
    ab24:	1f 91       	pop	r17
    ab26:	0f 91       	pop	r16
    ab28:	ff 90       	pop	r15
    ab2a:	ef 90       	pop	r14
    ab2c:	df 90       	pop	r13
    ab2e:	cf 90       	pop	r12
    ab30:	bf 90       	pop	r11
    ab32:	af 90       	pop	r10
    ab34:	08 95       	ret

0000ab36 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    ab36:	fc 01       	movw	r30, r24
    ab38:	24 81       	ldd	r18, Z+4	; 0x04
    ab3a:	35 81       	ldd	r19, Z+5	; 0x05
    ab3c:	20 5e       	subi	r18, 0xE0	; 224
    ab3e:	3c 4f       	sbci	r19, 0xFC	; 252
    ab40:	21 3c       	cpi	r18, 0xC1	; 193
    ab42:	3d 45       	sbci	r19, 0x5D	; 93
    ab44:	80 f4       	brcc	.+32     	; 0xab66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    ab46:	fc 01       	movw	r30, r24
    ab48:	86 81       	ldd	r24, Z+6	; 0x06
    ab4a:	97 81       	ldd	r25, Z+7	; 0x07
	return LBCollides(t->shared.x,t->shared.y,800,800,shot->shared.x+200,shot->shared.y+200,400,400) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 800 > 24000 ||
    ab4c:	80 36       	cpi	r24, 0x60	; 96
    ab4e:	f9 e0       	ldi	r31, 0x09	; 9
    ab50:	9f 07       	cpc	r25, r31
    ab52:	48 f0       	brcs	.+18     	; 0xab66 <collision_detect_boundries+0x30>
	    sprite->y < 2400 || sprite->y + 800 > 22400)
    ab54:	9c 01       	movw	r18, r24
    ab56:	20 5e       	subi	r18, 0xE0	; 224
    ab58:	3c 4f       	sbci	r19, 0xFC	; 252
    ab5a:	81 e0       	ldi	r24, 0x01	; 1
    ab5c:	21 38       	cpi	r18, 0x81	; 129
    ab5e:	37 45       	sbci	r19, 0x57	; 87
    ab60:	18 f4       	brcc	.+6      	; 0xab68 <collision_detect_boundries+0x32>
    ab62:	80 e0       	ldi	r24, 0x00	; 0
    ab64:	08 95       	ret
	{
		return 1;
    ab66:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    ab68:	08 95       	ret

0000ab6a <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    ab6a:	1f 93       	push	r17
    ab6c:	cf 93       	push	r28
    ab6e:	df 93       	push	r29
    ab70:	9c 01       	movw	r18, r24
    ab72:	fb 01       	movw	r30, r22
    ab74:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    ab76:	6e e1       	ldi	r22, 0x1E	; 30
    ab78:	70 e0       	ldi	r23, 0x00	; 0
    ab7a:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    ab7e:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    ab80:	63 e0       	ldi	r22, 0x03	; 3
    ab82:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    ab84:	e9 01       	movw	r28, r18
    ab86:	c1 59       	subi	r28, 0x91	; 145
    ab88:	d3 4f       	sbci	r29, 0xF3	; 243
    ab8a:	49 81       	ldd	r20, Y+1	; 0x01
    ab8c:	44 23       	and	r20, r20
    ab8e:	71 f0       	breq	.+28     	; 0xabac <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    ab90:	e9 01       	movw	r28, r18
    ab92:	c0 59       	subi	r28, 0x90	; 144
    ab94:	d3 4f       	sbci	r29, 0xF3	; 243
    ab96:	49 81       	ldd	r20, Y+1	; 0x01
    ab98:	44 23       	and	r20, r20
    ab9a:	91 f0       	breq	.+36     	; 0xabc0 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    ab9c:	e9 01       	movw	r28, r18
    ab9e:	c3 57       	subi	r28, 0x73	; 115
    aba0:	d3 4f       	sbci	r29, 0xF3	; 243
    aba2:	49 81       	ldd	r20, Y+1	; 0x01
    aba4:	41 11       	cpse	r20, r1
    aba6:	04 c0       	rjmp	.+8      	; 0xabb0 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    aba8:	64 e0       	ldi	r22, 0x04	; 4
    abaa:	69 0f       	add	r22, r25
    abac:	af 01       	movw	r20, r30
    abae:	0a c0       	rjmp	.+20     	; 0xabc4 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    abb0:	e9 01       	movw	r28, r18
    abb2:	c2 57       	subi	r28, 0x72	; 114
    abb4:	d3 4f       	sbci	r29, 0xF3	; 243
    abb6:	29 81       	ldd	r18, Y+1	; 0x01
    abb8:	21 11       	cpse	r18, r1
    abba:	07 c0       	rjmp	.+14     	; 0xabca <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    abbc:	64 e0       	ldi	r22, 0x04	; 4
    abbe:	69 0f       	add	r22, r25
    abc0:	af 01       	movw	r20, r30
    abc2:	8f 5f       	subi	r24, 0xFF	; 255
    abc4:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
		level.level_map[tile_index+31] = item_type;
    abc8:	19 83       	std	Y+1, r17	; 0x01
	}
}
    abca:	df 91       	pop	r29
    abcc:	cf 91       	pop	r28
    abce:	1f 91       	pop	r17
    abd0:	08 95       	ret

0000abd2 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    abd2:	ef 92       	push	r14
    abd4:	ff 92       	push	r15
    abd6:	0f 93       	push	r16
    abd8:	1f 93       	push	r17
    abda:	cf 93       	push	r28
    abdc:	df 93       	push	r29
    abde:	1f 92       	push	r1
    abe0:	cd b7       	in	r28, 0x3d	; 61
    abe2:	de b7       	in	r29, 0x3e	; 62
    abe4:	7c 01       	movw	r14, r24
    abe6:	36 2f       	mov	r19, r22
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    abe8:	fc 01       	movw	r30, r24
    abea:	e8 58       	subi	r30, 0x88	; 136
    abec:	ff 4f       	sbci	r31, 0xFF	; 255
    abee:	80 81       	ld	r24, Z
    abf0:	91 81       	ldd	r25, Z+1	; 0x01
    abf2:	e0 e2       	ldi	r30, 0x20	; 32
    abf4:	f3 e0       	ldi	r31, 0x03	; 3
    abf6:	bf 01       	movw	r22, r30
    abf8:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    abfc:	2d ef       	ldi	r18, 0xFD	; 253
    abfe:	26 0f       	add	r18, r22
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->netMessage.shared.x / 800;
    ac00:	d7 01       	movw	r26, r14
    ac02:	aa 58       	subi	r26, 0x8A	; 138
    ac04:	bf 4f       	sbci	r27, 0xFF	; 255
    ac06:	8d 91       	ld	r24, X+
    ac08:	9c 91       	ld	r25, X
    ac0a:	bf 01       	movw	r22, r30
    ac0c:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
	u8 y = player->netMessage.shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    ac10:	8b 01       	movw	r16, r22
    ac12:	8e e1       	ldi	r24, 0x1E	; 30
    ac14:	28 9f       	mul	r18, r24
    ac16:	00 0d       	add	r16, r0
    ac18:	11 1d       	adc	r17, r1
    ac1a:	11 24       	eor	r1, r1

	if (player->has_over_speed)
    ac1c:	f7 01       	movw	r30, r14
    ac1e:	86 85       	ldd	r24, Z+14	; 0x0e
    ac20:	88 23       	and	r24, r24
    ac22:	a1 f0       	breq	.+40     	; 0xac4c <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ac24:	40 e0       	ldi	r20, 0x00	; 0
    ac26:	50 e0       	ldi	r21, 0x00	; 0
    ac28:	61 e0       	ldi	r22, 0x01	; 1
    ac2a:	8a e0       	ldi	r24, 0x0A	; 10
    ac2c:	83 0f       	add	r24, r19
    ac2e:	39 83       	std	Y+1, r19	; 0x01
    ac30:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ac34:	47 e0       	ldi	r20, 0x07	; 7
    ac36:	6e e2       	ldi	r22, 0x2E	; 46
    ac38:	7b e6       	ldi	r23, 0x6B	; 107
    ac3a:	c8 01       	movw	r24, r16
    ac3c:	0e 94 b5 55 	call	0xab6a	; 0xab6a <drop_item>
		player->max_speed = MAX_SPEED;
    ac40:	88 e8       	ldi	r24, 0x88	; 136
    ac42:	93 e1       	ldi	r25, 0x13	; 19
    ac44:	f7 01       	movw	r30, r14
    ac46:	94 87       	std	Z+12, r25	; 0x0c
    ac48:	83 87       	std	Z+11, r24	; 0x0b
    ac4a:	39 81       	ldd	r19, Y+1	; 0x01
	}
	if (player->has_rocket)
    ac4c:	f7 01       	movw	r30, r14
    ac4e:	85 85       	ldd	r24, Z+13	; 0x0d
    ac50:	88 23       	and	r24, r24
    ac52:	69 f0       	breq	.+26     	; 0xac6e <kill_player+0x9c>
	{
		SetTile(hud_x+11, 1, 0);
    ac54:	40 e0       	ldi	r20, 0x00	; 0
    ac56:	50 e0       	ldi	r21, 0x00	; 0
    ac58:	61 e0       	ldi	r22, 0x01	; 1
    ac5a:	8b e0       	ldi	r24, 0x0B	; 11
    ac5c:	83 0f       	add	r24, r19
    ac5e:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ac62:	49 e0       	ldi	r20, 0x09	; 9
    ac64:	68 e2       	ldi	r22, 0x28	; 40
    ac66:	7b e6       	ldi	r23, 0x6B	; 107
    ac68:	c8 01       	movw	r24, r16
    ac6a:	0e 94 b5 55 	call	0xab6a	; 0xab6a <drop_item>
	}
	player->has_over_speed = false;
    ac6e:	f7 01       	movw	r30, r14
    ac70:	16 86       	std	Z+14, r1	; 0x0e
	player->has_rocket = false;
    ac72:	15 86       	std	Z+13, r1	; 0x0d
	player->netMessage.flags = player->netMessage.flags | EXPLODING_FLAG;
    ac74:	ef 58       	subi	r30, 0x8F	; 143
    ac76:	ff 4f       	sbci	r31, 0xFF	; 255
    ac78:	80 81       	ld	r24, Z
    ac7a:	81 60       	ori	r24, 0x01	; 1
    ac7c:	80 83       	st	Z, r24
}
    ac7e:	0f 90       	pop	r0
    ac80:	df 91       	pop	r29
    ac82:	cf 91       	pop	r28
    ac84:	1f 91       	pop	r17
    ac86:	0f 91       	pop	r16
    ac88:	ff 90       	pop	r15
    ac8a:	ef 90       	pop	r14
    ac8c:	08 95       	ret

0000ac8e <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ac8e:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    ac90:	70 e0       	ldi	r23, 0x00	; 0
    ac92:	8e e1       	ldi	r24, 0x1E	; 30
    ac94:	48 9f       	mul	r20, r24
    ac96:	60 0d       	add	r22, r0
    ac98:	71 1d       	adc	r23, r1
    ac9a:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ac9c:	21 11       	cpse	r18, r1
    ac9e:	05 c0       	rjmp	.+10     	; 0xacaa <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    aca0:	71 83       	std	Z+1, r23	; 0x01
    aca2:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    aca4:	6f 5f       	subi	r22, 0xFF	; 255
    aca6:	7f 4f       	sbci	r23, 0xFF	; 255
    aca8:	0c c0       	rjmp	.+24     	; 0xacc2 <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    acaa:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    acac:	21 30       	cpi	r18, 0x01	; 1
    acae:	11 f4       	brne	.+4      	; 0xacb4 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    acb0:	01 96       	adiw	r24, 0x01	; 1
    acb2:	03 c0       	rjmp	.+6      	; 0xacba <get_interesting_tile_indexes_shot+0x2c>
    acb4:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    acb6:	22 30       	cpi	r18, 0x02	; 2
    acb8:	39 f4       	brne	.+14     	; 0xacc8 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    acba:	91 83       	std	Z+1, r25	; 0x01
    acbc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    acbe:	61 5e       	subi	r22, 0xE1	; 225
    acc0:	7f 4f       	sbci	r23, 0xFF	; 255
    acc2:	73 83       	std	Z+3, r23	; 0x03
    acc4:	62 83       	std	Z+2, r22	; 0x02
    acc6:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    acc8:	71 83       	std	Z+1, r23	; 0x01
    acca:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    accc:	93 83       	std	Z+3, r25	; 0x03
    acce:	82 83       	std	Z+2, r24	; 0x02
    acd0:	08 95       	ret

0000acd2 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    acd2:	ef 92       	push	r14
    acd4:	ff 92       	push	r15
    acd6:	0f 93       	push	r16
    acd8:	1f 93       	push	r17
    acda:	cf 93       	push	r28
    acdc:	df 93       	push	r29
    acde:	ec 01       	movw	r28, r24
    ace0:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    ace2:	8e e1       	ldi	r24, 0x1E	; 30
    ace4:	e8 2e       	mov	r14, r24
    ace6:	f1 2c       	mov	r15, r1
    ace8:	cb 01       	movw	r24, r22
    acea:	b7 01       	movw	r22, r14
    acec:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    acf0:	6d 5f       	subi	r22, 0xFD	; 253
    acf2:	40 e0       	ldi	r20, 0x00	; 0
    acf4:	50 e0       	ldi	r21, 0x00	; 0
    acf6:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    acfa:	88 81       	ld	r24, Y
    acfc:	fe 01       	movw	r30, r28
    acfe:	9e e0       	ldi	r25, 0x0E	; 14
    ad00:	89 9f       	mul	r24, r25
    ad02:	e0 0d       	add	r30, r0
    ad04:	f1 1d       	adc	r31, r1
    ad06:	11 24       	eor	r1, r1
    ad08:	85 85       	ldd	r24, Z+13	; 0x0d
    ad0a:	96 85       	ldd	r25, Z+14	; 0x0e
    ad0c:	00 97       	sbiw	r24, 0x00	; 0
    ad0e:	41 f0       	breq	.+16     	; 0xad20 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ad10:	b7 01       	movw	r22, r14
    ad12:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    ad16:	6d 5f       	subi	r22, 0xFD	; 253
    ad18:	40 e0       	ldi	r20, 0x00	; 0
    ad1a:	50 e0       	ldi	r21, 0x00	; 0
    ad1c:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    ad20:	88 81       	ld	r24, Y
    ad22:	fe 01       	movw	r30, r28
    ad24:	9e e0       	ldi	r25, 0x0E	; 14
    ad26:	89 9f       	mul	r24, r25
    ad28:	e0 0d       	add	r30, r0
    ad2a:	f1 1d       	adc	r31, r1
    ad2c:	11 24       	eor	r1, r1
    ad2e:	16 87       	std	Z+14, r17	; 0x0e
    ad30:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    ad32:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    ad34:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    ad36:	82 30       	cpi	r24, 0x02	; 2
    ad38:	11 f0       	breq	.+4      	; 0xad3e <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    ad3a:	88 83       	st	Y, r24
    ad3c:	01 c0       	rjmp	.+2      	; 0xad40 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    ad3e:	18 82       	st	Y, r1
	}
}
    ad40:	df 91       	pop	r29
    ad42:	cf 91       	pop	r28
    ad44:	1f 91       	pop	r17
    ad46:	0f 91       	pop	r16
    ad48:	ff 90       	pop	r15
    ad4a:	ef 90       	pop	r14
    ad4c:	08 95       	ret

0000ad4e <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    ad4e:	fb 01       	movw	r30, r22
	switch (tile_type)
    ad50:	84 30       	cpi	r24, 0x04	; 4
    ad52:	71 f0       	breq	.+28     	; 0xad70 <richochet+0x22>
    ad54:	18 f4       	brcc	.+6      	; 0xad5c <richochet+0xe>
    ad56:	83 30       	cpi	r24, 0x03	; 3
    ad58:	31 f0       	breq	.+12     	; 0xad66 <richochet+0x18>
    ad5a:	08 95       	ret
    ad5c:	85 30       	cpi	r24, 0x05	; 5
    ad5e:	99 f0       	breq	.+38     	; 0xad86 <richochet+0x38>
    ad60:	86 30       	cpi	r24, 0x06	; 6
    ad62:	59 f0       	breq	.+22     	; 0xad7a <richochet+0x2c>
    ad64:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ad66:	80 81       	ld	r24, Z
    ad68:	8d 7f       	andi	r24, 0xFD	; 253
    ad6a:	29 f4       	brne	.+10     	; 0xad76 <richochet+0x28>
				sprite->direction = D_RIGHT;
    ad6c:	81 e0       	ldi	r24, 0x01	; 1
    ad6e:	09 c0       	rjmp	.+18     	; 0xad82 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ad70:	80 81       	ld	r24, Z
    ad72:	8d 7f       	andi	r24, 0xFD	; 253
    ad74:	29 f0       	breq	.+10     	; 0xad80 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ad76:	82 e0       	ldi	r24, 0x02	; 2
    ad78:	04 c0       	rjmp	.+8      	; 0xad82 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ad7a:	80 81       	ld	r24, Z
    ad7c:	8d 7f       	andi	r24, 0xFD	; 253
    ad7e:	31 f4       	brne	.+12     	; 0xad8c <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ad80:	83 e0       	ldi	r24, 0x03	; 3
    ad82:	80 83       	st	Z, r24
    ad84:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ad86:	80 81       	ld	r24, Z
    ad88:	8d 7f       	andi	r24, 0xFD	; 253
    ad8a:	81 f3       	breq	.-32     	; 0xad6c <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ad8c:	10 82       	st	Z, r1
    ad8e:	08 95       	ret

0000ad90 <get_interesting_tile_indexes>:
        LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    ad90:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    ad92:	70 e0       	ldi	r23, 0x00	; 0
    ad94:	8e e1       	ldi	r24, 0x1E	; 30
    ad96:	48 9f       	mul	r20, r24
    ad98:	60 0d       	add	r22, r0
    ad9a:	71 1d       	adc	r23, r1
    ad9c:	11 24       	eor	r1, r1
	if (direction == D_UP)
    ad9e:	21 11       	cpse	r18, r1
    ada0:	09 c0       	rjmp	.+18     	; 0xadb4 <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    ada2:	71 83       	std	Z+1, r23	; 0x01
    ada4:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ada6:	cb 01       	movw	r24, r22
    ada8:	01 96       	adiw	r24, 0x01	; 1
    adaa:	93 83       	std	Z+3, r25	; 0x03
    adac:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    adae:	6e 5f       	subi	r22, 0xFE	; 254
    adb0:	7f 4f       	sbci	r23, 0xFF	; 255
    adb2:	12 c0       	rjmp	.+36     	; 0xadd8 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    adb4:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    adb6:	21 30       	cpi	r18, 0x01	; 1
    adb8:	29 f4       	brne	.+10     	; 0xadc4 <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    adba:	02 96       	adiw	r24, 0x02	; 2
    adbc:	91 83       	std	Z+1, r25	; 0x01
    adbe:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    adc0:	4e 96       	adiw	r24, 0x1e	; 30
    adc2:	06 c0       	rjmp	.+12     	; 0xadd0 <get_interesting_tile_indexes+0x40>
    adc4:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    adc6:	22 30       	cpi	r18, 0x02	; 2
    adc8:	51 f4       	brne	.+20     	; 0xadde <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    adca:	91 83       	std	Z+1, r25	; 0x01
    adcc:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    adce:	01 96       	adiw	r24, 0x01	; 1
    add0:	93 83       	std	Z+3, r25	; 0x03
    add2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    add4:	62 5c       	subi	r22, 0xC2	; 194
    add6:	7f 4f       	sbci	r23, 0xFF	; 255
    add8:	75 83       	std	Z+5, r23	; 0x05
    adda:	64 83       	std	Z+4, r22	; 0x04
    addc:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    adde:	71 83       	std	Z+1, r23	; 0x01
    ade0:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    ade2:	62 5e       	subi	r22, 0xE2	; 226
    ade4:	7f 4f       	sbci	r23, 0xFF	; 255
    ade6:	73 83       	std	Z+3, r23	; 0x03
    ade8:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    adea:	95 83       	std	Z+5, r25	; 0x05
    adec:	84 83       	std	Z+4, r24	; 0x04
    adee:	08 95       	ret

0000adf0 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    adf0:	0f 93       	push	r16
    adf2:	1f 93       	push	r17
    adf4:	cf 93       	push	r28
    adf6:	df 93       	push	r29
    adf8:	1f 92       	push	r1
    adfa:	cd b7       	in	r28, 0x3d	; 61
    adfc:	de b7       	in	r29, 0x3e	; 62
    adfe:	8b 01       	movw	r16, r22
	player->netMessage.level_score++;
    ae00:	fc 01       	movw	r30, r24
    ae02:	e0 59       	subi	r30, 0x90	; 144
    ae04:	ff 4f       	sbci	r31, 0xFF	; 255
    ae06:	30 81       	ld	r19, Z
    ae08:	3f 5f       	subi	r19, 0xFF	; 255
    ae0a:	30 83       	st	Z, r19
	player->netMessage.score++;
    ae0c:	31 97       	sbiw	r30, 0x01	; 1
    ae0e:	30 81       	ld	r19, Z
    ae10:	3f 5f       	subi	r19, 0xFF	; 255
    ae12:	30 83       	st	Z, r19
	render_score(player, hud_x);
    ae14:	64 2f       	mov	r22, r20
    ae16:	29 83       	std	Y+1, r18	; 0x01
    ae18:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
	kill_player(other_player, other_player_hud_x);
    ae1c:	29 81       	ldd	r18, Y+1	; 0x01
    ae1e:	62 2f       	mov	r22, r18
    ae20:	c8 01       	movw	r24, r16
    ae22:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
    ae26:	86 e0       	ldi	r24, 0x06	; 6
	LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
}
    ae28:	0f 90       	pop	r0
    ae2a:	df 91       	pop	r29
    ae2c:	cf 91       	pop	r28
    ae2e:	1f 91       	pop	r17
    ae30:	0f 91       	pop	r16
    ae32:	0c 94 fe 49 	jmp	0x93fc	; 0x93fc <LBPlaySound.part.5>

0000ae36 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    ae36:	9c 01       	movw	r18, r24
    ae38:	e6 2f       	mov	r30, r22
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
    ae3a:	dc 01       	movw	r26, r24
    ae3c:	ae 58       	subi	r26, 0x8E	; 142
    ae3e:	bf 4f       	sbci	r27, 0xFF	; 255
    ae40:	9c 91       	ld	r25, X
    ae42:	9d 7f       	andi	r25, 0xFD	; 253
    ae44:	d9 f4       	brne	.+54     	; 0xae7c <slide+0x46>
	LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
    ae46:	ca 01       	movw	r24, r20
    ae48:	6e e1       	ldi	r22, 0x1E	; 30
    ae4a:	70 e0       	ldi	r23, 0x00	; 0
    ae4c:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    ae50:	60 e2       	ldi	r22, 0x20	; 32
    ae52:	73 e0       	ldi	r23, 0x03	; 3
    ae54:	86 9f       	mul	r24, r22
    ae56:	a0 01       	movw	r20, r0
    ae58:	87 9f       	mul	r24, r23
    ae5a:	50 0d       	add	r21, r0
    ae5c:	96 9f       	mul	r25, r22
    ae5e:	50 0d       	add	r21, r0
    ae60:	11 24       	eor	r1, r1
	u16 tile_y = (tile / 30 + 3) * 800;
	if (player->netMessage.shared.direction == D_UP || player->netMessage.shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->netMessage.shared.x - tile_x) > 400))
    ae62:	e1 11       	cpse	r30, r1
    ae64:	04 c0       	rjmp	.+8      	; 0xae6e <slide+0x38>
    ae66:	f9 01       	movw	r30, r18
    ae68:	ea 58       	subi	r30, 0x8A	; 138
    ae6a:	ff 4f       	sbci	r31, 0xFF	; 255
    ae6c:	1c c0       	rjmp	.+56     	; 0xaea6 <slide+0x70>
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 + 100;
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
    ae6e:	e2 30       	cpi	r30, 0x02	; 2
    ae70:	09 f0       	breq	.+2      	; 0xae74 <slide+0x3e>
    ae72:	48 c0       	rjmp	.+144    	; 0xaf04 <slide+0xce>
    ae74:	f9 01       	movw	r30, r18
    ae76:	ea 58       	subi	r30, 0x8A	; 138
    ae78:	ff 4f       	sbci	r31, 0xFF	; 255
    ae7a:	2f c0       	rjmp	.+94     	; 0xaeda <slide+0xa4>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u16 tile_x = (tile % 30 * 800);
	u16 tile_y = (tile / 30 + 3) * 800;
    ae7c:	ca 01       	movw	r24, r20
    ae7e:	6e e1       	ldi	r22, 0x1E	; 30
    ae80:	70 e0       	ldi	r23, 0x00	; 0
    ae82:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    ae86:	6d 5f       	subi	r22, 0xFD	; 253
    ae88:	7f 4f       	sbci	r23, 0xFF	; 255
    ae8a:	80 e2       	ldi	r24, 0x20	; 32
    ae8c:	93 e0       	ldi	r25, 0x03	; 3
    ae8e:	68 9f       	mul	r22, r24
    ae90:	a0 01       	movw	r20, r0
    ae92:	69 9f       	mul	r22, r25
    ae94:	50 0d       	add	r21, r0
    ae96:	78 9f       	mul	r23, r24
    ae98:	50 0d       	add	r21, r0
    ae9a:	11 24       	eor	r1, r1
		else if (collision_tile == 2 && ((tile_x - player->netMessage.shared.x) > 1200))
			player->netMessage.shared.x = player->netMessage.shared.x / 100 * 100 - 100;
	}
	else
	{
		if (collision_tile == 0 && ((player->netMessage.shared.y - tile_y) > 400))
    ae9c:	e1 11       	cpse	r30, r1
    ae9e:	18 c0       	rjmp	.+48     	; 0xaed0 <slide+0x9a>
    aea0:	f9 01       	movw	r30, r18
    aea2:	e8 58       	subi	r30, 0x88	; 136
    aea4:	ff 4f       	sbci	r31, 0xFF	; 255
    aea6:	80 81       	ld	r24, Z
    aea8:	91 81       	ldd	r25, Z+1	; 0x01
    aeaa:	9c 01       	movw	r18, r24
    aeac:	24 1b       	sub	r18, r20
    aeae:	35 0b       	sbc	r19, r21
    aeb0:	21 39       	cpi	r18, 0x91	; 145
    aeb2:	31 40       	sbci	r19, 0x01	; 1
    aeb4:	38 f1       	brcs	.+78     	; 0xaf04 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 + 100;
    aeb6:	64 e6       	ldi	r22, 0x64	; 100
    aeb8:	70 e0       	ldi	r23, 0x00	; 0
    aeba:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    aebe:	6f 5f       	subi	r22, 0xFF	; 255
    aec0:	7f 4f       	sbci	r23, 0xFF	; 255
    aec2:	24 e6       	ldi	r18, 0x64	; 100
    aec4:	26 9f       	mul	r18, r22
    aec6:	c0 01       	movw	r24, r0
    aec8:	27 9f       	mul	r18, r23
    aeca:	90 0d       	add	r25, r0
    aecc:	11 24       	eor	r1, r1
    aece:	18 c0       	rjmp	.+48     	; 0xaf00 <slide+0xca>
		else if (collision_tile == 2 && ((tile_y - player->netMessage.shared.y) > 1200))
    aed0:	e2 30       	cpi	r30, 0x02	; 2
    aed2:	c1 f4       	brne	.+48     	; 0xaf04 <slide+0xce>
    aed4:	f9 01       	movw	r30, r18
    aed6:	e8 58       	subi	r30, 0x88	; 136
    aed8:	ff 4f       	sbci	r31, 0xFF	; 255
    aeda:	80 81       	ld	r24, Z
    aedc:	91 81       	ldd	r25, Z+1	; 0x01
    aede:	48 1b       	sub	r20, r24
    aee0:	59 0b       	sbc	r21, r25
    aee2:	41 3b       	cpi	r20, 0xB1	; 177
    aee4:	54 40       	sbci	r21, 0x04	; 4
    aee6:	70 f0       	brcs	.+28     	; 0xaf04 <slide+0xce>
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
    aee8:	64 e6       	ldi	r22, 0x64	; 100
    aeea:	70 e0       	ldi	r23, 0x00	; 0
    aeec:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    aef0:	24 e6       	ldi	r18, 0x64	; 100
    aef2:	26 9f       	mul	r18, r22
    aef4:	c0 01       	movw	r24, r0
    aef6:	27 9f       	mul	r18, r23
    aef8:	90 0d       	add	r25, r0
    aefa:	11 24       	eor	r1, r1
    aefc:	84 56       	subi	r24, 0x64	; 100
    aefe:	91 09       	sbc	r25, r1
    af00:	91 83       	std	Z+1, r25	; 0x01
    af02:	80 83       	st	Z, r24
    af04:	08 95       	ret

0000af06 <load_level_tiles>:
	}
	return explode;
}

void load_level_tiles(u8 blank)
{
    af06:	ef 92       	push	r14
    af08:	ff 92       	push	r15
    af0a:	1f 93       	push	r17
    af0c:	cf 93       	push	r28
    af0e:	df 93       	push	r29
    af10:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    af12:	c0 e0       	ldi	r28, 0x00	; 0
    af14:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    af16:	8e e1       	ldi	r24, 0x1E	; 30
    af18:	e8 2e       	mov	r14, r24
    af1a:	f1 2c       	mov	r15, r1
    af1c:	ce 01       	movw	r24, r28
    af1e:	b7 01       	movw	r22, r14
    af20:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
		y = 3 + i / 30;
    af24:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    af26:	11 23       	and	r17, r17
    af28:	19 f0       	breq	.+6      	; 0xaf30 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    af2a:	4b ec       	ldi	r20, 0xCB	; 203
    af2c:	5b e6       	ldi	r21, 0x6B	; 107
    af2e:	2d c0       	rjmp	.+90     	; 0xaf8a <load_level_tiles+0x84>
    af30:	fe 01       	movw	r30, r28
    af32:	e1 59       	subi	r30, 0x91	; 145
    af34:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    af36:	91 81       	ldd	r25, Z+1	; 0x01
    af38:	97 30       	cpi	r25, 0x07	; 7
    af3a:	99 f1       	breq	.+102    	; 0xafa2 <load_level_tiles+0x9c>
    af3c:	88 f4       	brcc	.+34     	; 0xaf60 <load_level_tiles+0x5a>
    af3e:	93 30       	cpi	r25, 0x03	; 3
    af40:	39 f1       	breq	.+78     	; 0xaf90 <load_level_tiles+0x8a>
    af42:	40 f4       	brcc	.+16     	; 0xaf54 <load_level_tiles+0x4e>
    af44:	91 30       	cpi	r25, 0x01	; 1
    af46:	f9 f0       	breq	.+62     	; 0xaf86 <load_level_tiles+0x80>
    af48:	92 30       	cpi	r25, 0x02	; 2
    af4a:	09 f0       	breq	.+2      	; 0xaf4e <load_level_tiles+0x48>
    af4c:	3f c0       	rjmp	.+126    	; 0xafcc <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    af4e:	41 e3       	ldi	r20, 0x31	; 49
    af50:	5b e6       	ldi	r21, 0x6B	; 107
    af52:	1b c0       	rjmp	.+54     	; 0xaf8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af54:	95 30       	cpi	r25, 0x05	; 5
    af56:	f9 f0       	breq	.+62     	; 0xaf96 <load_level_tiles+0x90>
    af58:	08 f5       	brcc	.+66     	; 0xaf9c <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    af5a:	46 e1       	ldi	r20, 0x16	; 22
    af5c:	5b e6       	ldi	r21, 0x6B	; 107
    af5e:	15 c0       	rjmp	.+42     	; 0xaf8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af60:	9c 32       	cpi	r25, 0x2C	; 44
    af62:	59 f1       	breq	.+86     	; 0xafba <load_level_tiles+0xb4>
    af64:	38 f4       	brcc	.+14     	; 0xaf74 <load_level_tiles+0x6e>
    af66:	98 30       	cpi	r25, 0x08	; 8
    af68:	f9 f0       	breq	.+62     	; 0xafa8 <load_level_tiles+0xa2>
    af6a:	99 30       	cpi	r25, 0x09	; 9
    af6c:	79 f5       	brne	.+94     	; 0xafcc <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    af6e:	48 e2       	ldi	r20, 0x28	; 40
    af70:	5b e6       	ldi	r21, 0x6B	; 107
    af72:	0b c0       	rjmp	.+22     	; 0xaf8a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    af74:	92 34       	cpi	r25, 0x42	; 66
    af76:	d9 f0       	breq	.+54     	; 0xafae <load_level_tiles+0xa8>
    af78:	9d 34       	cpi	r25, 0x4D	; 77
    af7a:	e1 f0       	breq	.+56     	; 0xafb4 <load_level_tiles+0xae>
    af7c:	97 33       	cpi	r25, 0x37	; 55
    af7e:	31 f5       	brne	.+76     	; 0xafcc <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    af80:	4a e0       	ldi	r20, 0x0A	; 10
    af82:	5b e6       	ldi	r21, 0x6B	; 107
    af84:	02 c0       	rjmp	.+4      	; 0xaf8a <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    af86:	44 e3       	ldi	r20, 0x34	; 52
    af88:	5b e6       	ldi	r21, 0x6B	; 107
    af8a:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
    af8e:	22 c0       	rjmp	.+68     	; 0xafd4 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    af90:	4c e1       	ldi	r20, 0x1C	; 28
    af92:	5b e6       	ldi	r21, 0x6B	; 107
    af94:	fa cf       	rjmp	.-12     	; 0xaf8a <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    af96:	43 e1       	ldi	r20, 0x13	; 19
    af98:	5b e6       	ldi	r21, 0x6B	; 107
    af9a:	f7 cf       	rjmp	.-18     	; 0xaf8a <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    af9c:	49 e1       	ldi	r20, 0x19	; 25
    af9e:	5b e6       	ldi	r21, 0x6B	; 107
    afa0:	f4 cf       	rjmp	.-24     	; 0xaf8a <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    afa2:	4e e2       	ldi	r20, 0x2E	; 46
    afa4:	5b e6       	ldi	r21, 0x6B	; 107
    afa6:	f1 cf       	rjmp	.-30     	; 0xaf8a <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    afa8:	4b e2       	ldi	r20, 0x2B	; 43
    afaa:	5b e6       	ldi	r21, 0x6B	; 107
    afac:	ee cf       	rjmp	.-36     	; 0xaf8a <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    afae:	4d e0       	ldi	r20, 0x0D	; 13
    afb0:	5b e6       	ldi	r21, 0x6B	; 107
    afb2:	eb cf       	rjmp	.-42     	; 0xaf8a <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    afb4:	40 e1       	ldi	r20, 0x10	; 16
    afb6:	5b e6       	ldi	r21, 0x6B	; 107
    afb8:	e8 cf       	rjmp	.-48     	; 0xaf8a <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    afba:	40 e1       	ldi	r20, 0x10	; 16
    afbc:	5b e6       	ldi	r21, 0x6B	; 107
    afbe:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
    afc2:	d0 93 00 10 	sts	0x1000, r29
    afc6:	c0 93 ff 0f 	sts	0x0FFF, r28
    afca:	04 c0       	rjmp	.+8      	; 0xafd4 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    afcc:	40 e0       	ldi	r20, 0x00	; 0
    afce:	50 e0       	ldi	r21, 0x00	; 0
    afd0:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    afd4:	21 96       	adiw	r28, 0x01	; 1
    afd6:	ce 3e       	cpi	r28, 0xEE	; 238
    afd8:	82 e0       	ldi	r24, 0x02	; 2
    afda:	d8 07       	cpc	r29, r24
    afdc:	09 f0       	breq	.+2      	; 0xafe0 <load_level_tiles+0xda>
    afde:	9e cf       	rjmp	.-196    	; 0xaf1c <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    afe0:	df 91       	pop	r29
    afe2:	cf 91       	pop	r28
    afe4:	1f 91       	pop	r17
    afe6:	ff 90       	pop	r15
    afe8:	ef 90       	pop	r14
    afea:	08 95       	ret

0000afec <prep_player>:

void prep_player(Player* p, u16 x, u16 y)
{
    afec:	cf 93       	push	r28
    afee:	df 93       	push	r29
    aff0:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    aff2:	7f 83       	std	Y+7, r23	; 0x07
    aff4:	6e 83       	std	Y+6, r22	; 0x06
	p->spawn_y = y;
    aff6:	59 87       	std	Y+9, r21	; 0x09
    aff8:	48 87       	std	Y+8, r20	; 0x08
	p->netMessage.level_score = 0;
    affa:	fc 01       	movw	r30, r24
    affc:	e0 59       	subi	r30, 0x90	; 144
    affe:	ff 4f       	sbci	r31, 0xFF	; 255
    b000:	10 82       	st	Z, r1
	p->old_level_score = 0;
    b002:	1a 8a       	std	Y+18, r1	; 0x12
	p->has_over_speed = false;
    b004:	1e 86       	std	Y+14, r1	; 0x0e
	p->has_rocket = false;
    b006:	1d 86       	std	Y+13, r1	; 0x0d
	p->max_speed = MAX_SPEED;
    b008:	88 e8       	ldi	r24, 0x88	; 136
    b00a:	93 e1       	ldi	r25, 0x13	; 19
    b00c:	9c 87       	std	Y+12, r25	; 0x0c
    b00e:	8b 87       	std	Y+11, r24	; 0x0b
	player_init_shot_state(p);
    b010:	ce 01       	movw	r24, r28
    b012:	0e 94 29 4f 	call	0x9e52	; 0x9e52 <player_init_shot_state>
	player_spawn(p);
    b016:	ce 01       	movw	r24, r28
}
    b018:	df 91       	pop	r29
    b01a:	cf 91       	pop	r28
	p->old_level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    b01c:	0c 94 57 4f 	jmp	0x9eae	; 0x9eae <player_spawn>

0000b020 <load_level>:
}

void load_level(int level_number)
{
    b020:	4f 92       	push	r4
    b022:	5f 92       	push	r5
    b024:	6f 92       	push	r6
    b026:	7f 92       	push	r7
    b028:	8f 92       	push	r8
    b02a:	9f 92       	push	r9
    b02c:	af 92       	push	r10
    b02e:	bf 92       	push	r11
    b030:	cf 92       	push	r12
    b032:	df 92       	push	r13
    b034:	ef 92       	push	r14
    b036:	ff 92       	push	r15
    b038:	0f 93       	push	r16
    b03a:	1f 93       	push	r17
    b03c:	cf 93       	push	r28
    b03e:	df 93       	push	r29
    b040:	ec 01       	movw	r28, r24
    u16 level_start = level_number*30*25;
    b042:	8e ee       	ldi	r24, 0xEE	; 238
    b044:	92 e0       	ldi	r25, 0x02	; 2
    b046:	c8 9f       	mul	r28, r24
    b048:	20 01       	movw	r4, r0
    b04a:	c9 9f       	mul	r28, r25
    b04c:	50 0c       	add	r5, r0
    b04e:	d8 9f       	mul	r29, r24
    b050:	50 0c       	add	r5, r0
    b052:	11 24       	eor	r1, r1
	u16 x;
	u16 y;

	game.scope_counter = 0;
    b054:	10 92 c2 0b 	sts	0x0BC2, r1
    b058:	10 92 c1 0b 	sts	0x0BC1, r1
	init_tile_animations(&tile_animations);
    b05c:	8a ec       	ldi	r24, 0xCA	; 202
    b05e:	9b e0       	ldi	r25, 0x0B	; 11
    b060:	0e 94 e8 4d 	call	0x9bd0	; 0x9bd0 <init_tile_animations>
	init_scope_animation(&scope_animation);
    b064:	83 ef       	ldi	r24, 0xF3	; 243
    b066:	9f e0       	ldi	r25, 0x0F	; 15
    b068:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <init_scope_animation>
	init_sub_animation(&sub_animation);
    b06c:	85 ee       	ldi	r24, 0xE5	; 229
    b06e:	9f e0       	ldi	r25, 0x0F	; 15
    b070:	0e 94 27 4e 	call	0x9c4e	; 0x9c4e <init_sub_animation>
	game.current_screen = LEVEL;
    b074:	83 e0       	ldi	r24, 0x03	; 3
    b076:	80 93 b6 0b 	sts	0x0BB6, r24
	clear_sprites();
    b07a:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	game.current_level = level_number;
    b07e:	c0 93 b7 0b 	sts	0x0BB7, r28
    b082:	00 e7       	ldi	r16, 0x70	; 112
    b084:	1c e0       	ldi	r17, 0x0C	; 12
	for (u16 i = 0; i < 30*25; i++)
    b086:	c0 e0       	ldi	r28, 0x00	; 0
    b088:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = (i % 30) * 800;
    b08a:	8e e1       	ldi	r24, 0x1E	; 30
    b08c:	a8 2e       	mov	r10, r24
    b08e:	b1 2c       	mov	r11, r1
    b090:	90 e2       	ldi	r25, 0x20	; 32
    b092:	c9 2e       	mov	r12, r25
    b094:	93 e0       	ldi	r25, 0x03	; 3
    b096:	d9 2e       	mov	r13, r25
    b098:	ce 01       	movw	r24, r28
    b09a:	b5 01       	movw	r22, r10
    b09c:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b0a0:	8c 9d       	mul	r24, r12
    b0a2:	30 01       	movw	r6, r0
    b0a4:	8d 9d       	mul	r24, r13
    b0a6:	70 0c       	add	r7, r0
    b0a8:	9c 9d       	mul	r25, r12
    b0aa:	70 0c       	add	r7, r0
    b0ac:	11 24       	eor	r1, r1
		y = (i / 30 + 3) * 800;
    b0ae:	6c 9d       	mul	r22, r12
    b0b0:	70 01       	movw	r14, r0
    b0b2:	6d 9d       	mul	r22, r13
    b0b4:	f0 0c       	add	r15, r0
    b0b6:	7c 9d       	mul	r23, r12
    b0b8:	f0 0c       	add	r15, r0
    b0ba:	11 24       	eor	r1, r1
    b0bc:	a0 ea       	ldi	r26, 0xA0	; 160
    b0be:	ea 1a       	sub	r14, r26
    b0c0:	a6 ef       	ldi	r26, 0xF6	; 246
    b0c2:	fa 0a       	sbc	r15, r26
    b0c4:	fe 01       	movw	r30, r28
    b0c6:	e4 0d       	add	r30, r4
    b0c8:	f5 1d       	adc	r31, r5
    b0ca:	e2 50       	subi	r30, 0x02	; 2
    b0cc:	f8 4f       	sbci	r31, 0xF8	; 248
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    b0ce:	e4 91       	lpm	r30, Z
    b0d0:	48 01       	movw	r8, r16
    b0d2:	d8 01       	movw	r26, r16
    b0d4:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    b0d6:	e8 35       	cpi	r30, 0x58	; 88
    b0d8:	31 f4       	brne	.+12     	; 0xb0e6 <load_level+0xc6>
		{
			prep_player(&player1, x, y);
    b0da:	a7 01       	movw	r20, r14
    b0dc:	b3 01       	movw	r22, r6
    b0de:	88 ee       	ldi	r24, 0xE8	; 232
    b0e0:	9b e0       	ldi	r25, 0x0B	; 11
    b0e2:	0e 94 f6 57 	call	0xafec	; 0xafec <prep_player>
    b0e6:	0f 5f       	subi	r16, 0xFF	; 255
    b0e8:	1f 4f       	sbci	r17, 0xFF	; 255
		}
		if (level.level_map[i] == L_P2_SPAWN)
    b0ea:	f4 01       	movw	r30, r8
    b0ec:	80 81       	ld	r24, Z
    b0ee:	83 36       	cpi	r24, 0x63	; 99
    b0f0:	31 f4       	brne	.+12     	; 0xb0fe <load_level+0xde>
		{
			prep_player(&player2, x, y);
    b0f2:	a7 01       	movw	r20, r14
    b0f4:	b3 01       	movw	r22, r6
    b0f6:	8e e5       	ldi	r24, 0x5E	; 94
    b0f8:	9f e0       	ldi	r25, 0x0F	; 15
    b0fa:	0e 94 f6 57 	call	0xafec	; 0xafec <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (u16 i = 0; i < 30*25; i++)
    b0fe:	21 96       	adiw	r28, 0x01	; 1
    b100:	ce 3e       	cpi	r28, 0xEE	; 238
    b102:	f2 e0       	ldi	r31, 0x02	; 2
    b104:	df 07       	cpc	r29, r31
    b106:	41 f6       	brne	.-112    	; 0xb098 <load_level+0x78>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    b108:	60 e0       	ldi	r22, 0x00	; 0
    b10a:	88 ee       	ldi	r24, 0xE8	; 232
    b10c:	9b e0       	ldi	r25, 0x0B	; 11
    b10e:	0e 94 2b 51 	call	0xa256	; 0xa256 <render_hud>
	render_hud(&player2, 15);
    b112:	6f e0       	ldi	r22, 0x0F	; 15
    b114:	8e e5       	ldi	r24, 0x5E	; 94
    b116:	9f e0       	ldi	r25, 0x0F	; 15
    b118:	0e 94 2b 51 	call	0xa256	; 0xa256 <render_hud>
	render_score(&player1, 0);
    b11c:	60 e0       	ldi	r22, 0x00	; 0
    b11e:	88 ee       	ldi	r24, 0xE8	; 232
    b120:	9b e0       	ldi	r25, 0x0B	; 11
    b122:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
	render_score(&player2, 15);
    b126:	6f e0       	ldi	r22, 0x0F	; 15
    b128:	8e e5       	ldi	r24, 0x5E	; 94
    b12a:	9f e0       	ldi	r25, 0x0F	; 15
    b12c:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
	Print(14, 0, (char*) strVertSep);
    b130:	42 e0       	ldi	r20, 0x02	; 2
    b132:	54 e0       	ldi	r21, 0x04	; 4
    b134:	60 e0       	ldi	r22, 0x00	; 0
    b136:	70 e0       	ldi	r23, 0x00	; 0
    b138:	8e e0       	ldi	r24, 0x0E	; 14
    b13a:	90 e0       	ldi	r25, 0x00	; 0
    b13c:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(14, 1, (char*) strVertSep);
    b140:	42 e0       	ldi	r20, 0x02	; 2
    b142:	54 e0       	ldi	r21, 0x04	; 4
    b144:	61 e0       	ldi	r22, 0x01	; 1
    b146:	70 e0       	ldi	r23, 0x00	; 0
    b148:	8e e0       	ldi	r24, 0x0E	; 14
    b14a:	90 e0       	ldi	r25, 0x00	; 0
    b14c:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(14, 2, (char*) strVertSep);
    b150:	42 e0       	ldi	r20, 0x02	; 2
    b152:	54 e0       	ldi	r21, 0x04	; 4
    b154:	62 e0       	ldi	r22, 0x02	; 2
    b156:	70 e0       	ldi	r23, 0x00	; 0
    b158:	8e e0       	ldi	r24, 0x0E	; 14
    b15a:	90 e0       	ldi	r25, 0x00	; 0
    b15c:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	load_level_tiles(false);
    b160:	80 e0       	ldi	r24, 0x00	; 0
}
    b162:	df 91       	pop	r29
    b164:	cf 91       	pop	r28
    b166:	1f 91       	pop	r17
    b168:	0f 91       	pop	r16
    b16a:	ff 90       	pop	r15
    b16c:	ef 90       	pop	r14
    b16e:	df 90       	pop	r13
    b170:	cf 90       	pop	r12
    b172:	bf 90       	pop	r11
    b174:	af 90       	pop	r10
    b176:	9f 90       	pop	r9
    b178:	8f 90       	pop	r8
    b17a:	7f 90       	pop	r7
    b17c:	6f 90       	pop	r6
    b17e:	5f 90       	pop	r5
    b180:	4f 90       	pop	r4
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    b182:	0c 94 83 57 	jmp	0xaf06	; 0xaf06 <load_level_tiles>

0000b186 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b186:	cf 93       	push	r28
    b188:	df 93       	push	r29
    b18a:	c8 2f       	mov	r28, r24
	//FadeOut(FRAMES_PER_FADE, true);
	ClearVram();
    b18c:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ClearVram>
	clear_sprites();
    b190:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    b194:	d0 e0       	ldi	r29, 0x00	; 0
    b196:	ae 01       	movw	r20, r28
    b198:	84 e0       	ldi	r24, 0x04	; 4
    b19a:	44 0f       	add	r20, r20
    b19c:	55 1f       	adc	r21, r21
    b19e:	8a 95       	dec	r24
    b1a0:	e1 f7       	brne	.-8      	; 0xb19a <level_transition+0x14>
    b1a2:	45 5f       	subi	r20, 0xF5	; 245
    b1a4:	5c 4f       	sbci	r21, 0xFC	; 252
    b1a6:	6c e0       	ldi	r22, 0x0C	; 12
    b1a8:	70 e0       	ldi	r23, 0x00	; 0
    b1aa:	88 e0       	ldi	r24, 0x08	; 8
    b1ac:	90 e0       	ldi	r25, 0x00	; 0
    b1ae:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	FadeIn(1, false);
    b1b2:	60 e0       	ldi	r22, 0x00	; 0
    b1b4:	81 e0       	ldi	r24, 0x01	; 1
    b1b6:	0e 94 c9 49 	call	0x9392	; 0x9392 <FadeIn>
	LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    b1ba:	6c e1       	ldi	r22, 0x1C	; 28
    b1bc:	84 e0       	ldi	r24, 0x04	; 4
    b1be:	90 e0       	ldi	r25, 0x00	; 0
    b1c0:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
	//FadeOut(1, true);
	ClearVram();
    b1c4:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b1c8:	60 e0       	ldi	r22, 0x00	; 0
    b1ca:	83 e0       	ldi	r24, 0x03	; 3
    b1cc:	0e 94 c9 49 	call	0x9392	; 0x9392 <FadeIn>
	load_level(index);
    b1d0:	ce 01       	movw	r24, r28
}
    b1d2:	df 91       	pop	r29
    b1d4:	cf 91       	pop	r28
	FadeIn(1, false);
	LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
	//FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b1d6:	0c 94 10 58 	jmp	0xb020	; 0xb020 <load_level>

0000b1da <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    b1da:	83 ef       	ldi	r24, 0xF3	; 243
    b1dc:	9f e0       	ldi	r25, 0x0F	; 15
    b1de:	0e 94 db 51 	call	0xa3b6	; 0xa3b6 <render_scope>
    b1e2:	88 23       	and	r24, r24
    b1e4:	61 f0       	breq	.+24     	; 0xb1fe <render_boss_fight_scope_load+0x24>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    b1e6:	82 e0       	ldi	r24, 0x02	; 2
    b1e8:	80 93 b9 0b 	sts	0x0BB9, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ALARM);
    b1ec:	27 e0       	ldi	r18, 0x07	; 7
    b1ee:	40 91 cf 0f 	lds	r20, 0x0FCF
    b1f2:	60 91 59 0c 	lds	r22, 0x0C59
    b1f6:	80 91 c9 0b 	lds	r24, 0x0BC9
    b1fa:	0c 94 da 4c 	jmp	0x99b4	; 0x99b4 <LBPlaySound>
    b1fe:	08 95       	ret

0000b200 <render_boss_fight_sub_load>:
}

void render_boss_fight_sub_load()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b200:	85 ee       	ldi	r24, 0xE5	; 229
    b202:	9f e0       	ldi	r25, 0x0F	; 15
    b204:	0e 94 c6 4b 	call	0x978c	; 0x978c <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    b208:	ac 01       	movw	r20, r24
    b20a:	64 e0       	ldi	r22, 0x04	; 4
    b20c:	81 e0       	ldi	r24, 0x01	; 1
    b20e:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	if (sub_animation.anim.reversing)
    b212:	80 91 ea 0f 	lds	r24, 0x0FEA
    b216:	88 23       	and	r24, r24
    b218:	99 f0       	breq	.+38     	; 0xb240 <render_boss_fight_sub_load+0x40>
	{
		game.boss_fight_status = BOSS_FIGHT;
    b21a:	84 e0       	ldi	r24, 0x04	; 4
    b21c:	80 93 b9 0b 	sts	0x0BB9, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 7200);
    b220:	40 e2       	ldi	r20, 0x20	; 32
    b222:	5c e1       	ldi	r21, 0x1C	; 28
    b224:	60 e8       	ldi	r22, 0x80	; 128
    b226:	75 e2       	ldi	r23, 0x25	; 37
    b228:	80 e3       	ldi	r24, 0x30	; 48
    b22a:	90 e1       	ldi	r25, 0x10	; 16
    b22c:	0e 94 87 4e 	call	0x9d0e	; 0x9d0e <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 7200);
    b230:	40 e2       	ldi	r20, 0x20	; 32
    b232:	5c e1       	ldi	r21, 0x1C	; 28
    b234:	60 e0       	ldi	r22, 0x00	; 0
    b236:	7b e4       	ldi	r23, 0x4B	; 75
    b238:	81 e0       	ldi	r24, 0x01	; 1
    b23a:	90 e1       	ldi	r25, 0x10	; 16
    b23c:	0c 94 87 4e 	jmp	0x9d0e	; 0x9d0e <init_turret>
    b240:	08 95       	ret

0000b242 <render_boss_fight_sub_sinking>:
}

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    b242:	85 ee       	ldi	r24, 0xE5	; 229
    b244:	9f e0       	ldi	r25, 0x0F	; 15
    b246:	0e 94 c6 4b 	call	0x978c	; 0x978c <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    b24a:	20 91 e5 0f 	lds	r18, 0x0FE5
    b24e:	21 11       	cpse	r18, r1
    b250:	05 c0       	rjmp	.+10     	; 0xb25c <render_boss_fight_sub_sinking+0x1a>
    b252:	ac 01       	movw	r20, r24
    b254:	64 e0       	ldi	r22, 0x04	; 4
    b256:	81 e0       	ldi	r24, 0x01	; 1
    b258:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	if (sub_animation.anim.looped)
    b25c:	80 91 e9 0f 	lds	r24, 0x0FE9
    b260:	88 23       	and	r24, r24
    b262:	19 f0       	breq	.+6      	; 0xb26a <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    b264:	88 e0       	ldi	r24, 0x08	; 8
    b266:	80 93 b9 0b 	sts	0x0BB9, r24
    b26a:	08 95       	ret

0000b26c <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    b26c:	0f 93       	push	r16
    b26e:	cf 93       	push	r28
    b270:	fc 01       	movw	r30, r24
    b272:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shared.x / 100, t->shared.y / 100, 1, 1);
    b274:	86 81       	ldd	r24, Z+6	; 0x06
    b276:	97 81       	ldd	r25, Z+7	; 0x07
    b278:	24 e6       	ldi	r18, 0x64	; 100
    b27a:	30 e0       	ldi	r19, 0x00	; 0
    b27c:	b9 01       	movw	r22, r18
    b27e:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b282:	46 2f       	mov	r20, r22
    b284:	84 81       	ldd	r24, Z+4	; 0x04
    b286:	95 81       	ldd	r25, Z+5	; 0x05
    b288:	b9 01       	movw	r22, r18
    b28a:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b28e:	01 e0       	ldi	r16, 0x01	; 1
    b290:	21 e0       	ldi	r18, 0x01	; 1
    b292:	8c 2f       	mov	r24, r28
    b294:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
}
    b298:	cf 91       	pop	r28
    b29a:	0f 91       	pop	r16
    b29c:	08 95       	ret

0000b29e <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    b29e:	0f 93       	push	r16
    b2a0:	cf 93       	push	r28
    b2a2:	fc 01       	movw	r30, r24
    b2a4:	c6 2f       	mov	r28, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
    b2a6:	87 85       	ldd	r24, Z+15	; 0x0f
    b2a8:	90 89       	ldd	r25, Z+16	; 0x10
    b2aa:	24 e6       	ldi	r18, 0x64	; 100
    b2ac:	30 e0       	ldi	r19, 0x00	; 0
    b2ae:	b9 01       	movw	r22, r18
    b2b0:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b2b4:	46 2f       	mov	r20, r22
    b2b6:	85 85       	ldd	r24, Z+13	; 0x0d
    b2b8:	96 85       	ldd	r25, Z+14	; 0x0e
    b2ba:	b9 01       	movw	r22, r18
    b2bc:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b2c0:	01 e0       	ldi	r16, 0x01	; 1
    b2c2:	21 e0       	ldi	r18, 0x01	; 1
    b2c4:	8c 2f       	mov	r24, r28
    b2c6:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
}
    b2ca:	cf 91       	pop	r28
    b2cc:	0f 91       	pop	r16
    b2ce:	08 95       	ret

0000b2d0 <update_turret>:

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
    b2d0:	cf 93       	push	r28
    b2d2:	df 93       	push	r29
    b2d4:	fc 01       	movw	r30, r24
	u8 x = t->shared.x / 800;
    b2d6:	24 81       	ldd	r18, Z+4	; 0x04
    b2d8:	35 81       	ldd	r19, Z+5	; 0x05
	u8 y = t->shared.y / 800 - 3;
    b2da:	86 81       	ldd	r24, Z+6	; 0x06
    b2dc:	97 81       	ldd	r25, Z+7	; 0x07
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    b2de:	a0 85       	ldd	r26, Z+8	; 0x08
    b2e0:	a1 11       	cpse	r26, r1
    b2e2:	1a c0       	rjmp	.+52     	; 0xb318 <update_turret+0x48>
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
	u8 y = t->shared.y / 800 - 3;
    b2e4:	e0 e2       	ldi	r30, 0x20	; 32
    b2e6:	f3 e0       	ldi	r31, 0x03	; 3
    b2e8:	bf 01       	movw	r22, r30
    b2ea:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b2ee:	4d ef       	ldi	r20, 0xFD	; 253
    b2f0:	46 0f       	add	r20, r22
	MoveSprite(sprite_index, t->shot[0].shared.x / 100, t->shot[0].shared.y / 100, 1, 1);
}

void update_turret(Turret *t, u16 left_limit, u16 right_limit)
{
	u8 x = t->shared.x / 800;
    b2f2:	c9 01       	movw	r24, r18
    b2f4:	bf 01       	movw	r22, r30
    b2f6:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
	u8 y = t->shared.y / 800 - 3;
	int tile_index = (y * 30) + x;
    b2fa:	eb 01       	movw	r28, r22
    b2fc:	8e e1       	ldi	r24, 0x1E	; 30
    b2fe:	48 9f       	mul	r20, r24
    b300:	c0 0d       	add	r28, r0
    b302:	d1 1d       	adc	r29, r1
    b304:	11 24       	eor	r1, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    b306:	be 01       	movw	r22, r28
    b308:	8a ec       	ldi	r24, 0xCA	; 202
    b30a:	9b e0       	ldi	r25, 0x0B	; 11
    b30c:	0e 94 69 56 	call	0xacd2	; 0xacd2 <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    b310:	c1 59       	subi	r28, 0x91	; 145
    b312:	d3 4f       	sbci	r29, 0xF3	; 243
    b314:	19 82       	std	Y+1, r1	; 0x01
    b316:	27 c0       	rjmp	.+78     	; 0xb366 <update_turret+0x96>
	}
	else if (t->shared.direction == D_LEFT)
    b318:	80 81       	ld	r24, Z
    b31a:	83 30       	cpi	r24, 0x03	; 3
    b31c:	71 f4       	brne	.+28     	; 0xb33a <update_turret+0x6a>
	{
		if (t->shared.x < left_limit)
    b31e:	26 17       	cp	r18, r22
    b320:	37 07       	cpc	r19, r23
    b322:	10 f4       	brcc	.+4      	; 0xb328 <update_turret+0x58>
		{
			t->shared.direction = D_RIGHT;
    b324:	81 e0       	ldi	r24, 0x01	; 1
    b326:	0f c0       	rjmp	.+30     	; 0xb346 <update_turret+0x76>
			t->shared.speed = BOSS_TURRET_SPEED;
		}
		else
		{
			t->shared.x -= t->shared.speed / FRAME_TIME_INVERTED;
    b328:	81 81       	ldd	r24, Z+1	; 0x01
    b32a:	92 81       	ldd	r25, Z+2	; 0x02
    b32c:	6c e3       	ldi	r22, 0x3C	; 60
    b32e:	70 e0       	ldi	r23, 0x00	; 0
    b330:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b334:	26 1b       	sub	r18, r22
    b336:	37 0b       	sbc	r19, r23
    b338:	14 c0       	rjmp	.+40     	; 0xb362 <update_turret+0x92>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    b33a:	81 30       	cpi	r24, 0x01	; 1
    b33c:	a1 f4       	brne	.+40     	; 0xb366 <update_turret+0x96>
	{
		if (t->shared.x > right_limit)
    b33e:	42 17       	cp	r20, r18
    b340:	53 07       	cpc	r21, r19
    b342:	38 f4       	brcc	.+14     	; 0xb352 <update_turret+0x82>
		{
			t->shared.direction = D_LEFT;
    b344:	83 e0       	ldi	r24, 0x03	; 3
    b346:	80 83       	st	Z, r24
			t->shared.speed = BOSS_TURRET_SPEED;
    b348:	88 e2       	ldi	r24, 0x28	; 40
    b34a:	93 e2       	ldi	r25, 0x23	; 35
    b34c:	92 83       	std	Z+2, r25	; 0x02
    b34e:	81 83       	std	Z+1, r24	; 0x01
    b350:	0a c0       	rjmp	.+20     	; 0xb366 <update_turret+0x96>
		}
		else
		{
			t->shared.x += t->shared.speed / FRAME_TIME_INVERTED;
    b352:	81 81       	ldd	r24, Z+1	; 0x01
    b354:	92 81       	ldd	r25, Z+2	; 0x02
    b356:	6c e3       	ldi	r22, 0x3C	; 60
    b358:	70 e0       	ldi	r23, 0x00	; 0
    b35a:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    b35e:	26 0f       	add	r18, r22
    b360:	37 1f       	adc	r19, r23
    b362:	35 83       	std	Z+5, r19	; 0x05
    b364:	24 83       	std	Z+4, r18	; 0x04
		}
	}
}
    b366:	df 91       	pop	r29
    b368:	cf 91       	pop	r28
    b36a:	08 95       	ret

0000b36c <load_splash>:
	}
}

void load_splash()
{
	wifiHWResetLow();
    b36c:	0e 94 4d 4b 	call	0x969a	; 0x969a <wifiHWResetLow>
	game.current_screen = SPLASH;
    b370:	e6 eb       	ldi	r30, 0xB6	; 182
    b372:	fb e0       	ldi	r31, 0x0B	; 11
    b374:	10 82       	st	Z, r1
	game.selection = PVCPU;
    b376:	13 8a       	std	Z+19, r1	; 0x13
	clear_sprites();
    b378:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else
	Print(7, 13, (char*) str1Player);
    b37c:	45 e2       	ldi	r20, 0x25	; 37
    b37e:	55 e0       	ldi	r21, 0x05	; 5
    b380:	6d e0       	ldi	r22, 0x0D	; 13
    b382:	70 e0       	ldi	r23, 0x00	; 0
    b384:	87 e0       	ldi	r24, 0x07	; 7
    b386:	90 e0       	ldi	r25, 0x00	; 0
    b388:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(7, 14, (char*) str2Player);
    b38c:	44 e1       	ldi	r20, 0x14	; 20
    b38e:	55 e0       	ldi	r21, 0x05	; 5
    b390:	6e e0       	ldi	r22, 0x0E	; 14
    b392:	70 e0       	ldi	r23, 0x00	; 0
    b394:	87 e0       	ldi	r24, 0x07	; 7
    b396:	90 e0       	ldi	r25, 0x00	; 0
    b398:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(7, 15, (char*) strHostNetGame);
    b39c:	46 e0       	ldi	r20, 0x06	; 6
    b39e:	55 e0       	ldi	r21, 0x05	; 5
    b3a0:	6f e0       	ldi	r22, 0x0F	; 15
    b3a2:	70 e0       	ldi	r23, 0x00	; 0
    b3a4:	87 e0       	ldi	r24, 0x07	; 7
    b3a6:	90 e0       	ldi	r25, 0x00	; 0
    b3a8:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(7, 16, (char*) strJoinNetGame);
    b3ac:	48 ef       	ldi	r20, 0xF8	; 248
    b3ae:	54 e0       	ldi	r21, 0x04	; 4
    b3b0:	60 e1       	ldi	r22, 0x10	; 16
    b3b2:	70 e0       	ldi	r23, 0x00	; 0
    b3b4:	87 e0       	ldi	r24, 0x07	; 7
    b3b6:	90 e0       	ldi	r25, 0x00	; 0
    b3b8:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(7, 17, (char*) strHighscores);
    b3bc:	4c e1       	ldi	r20, 0x1C	; 28
    b3be:	54 e0       	ldi	r21, 0x04	; 4
    b3c0:	61 e1       	ldi	r22, 0x11	; 17
    b3c2:	70 e0       	ldi	r23, 0x00	; 0
    b3c4:	87 e0       	ldi	r24, 0x07	; 7
    b3c6:	90 e0       	ldi	r25, 0x00	; 0
    b3c8:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(5, 26, (char*) strCopyright);
    b3cc:	46 e2       	ldi	r20, 0x26	; 38
    b3ce:	54 e0       	ldi	r21, 0x04	; 4
    b3d0:	6a e1       	ldi	r22, 0x1A	; 26
    b3d2:	70 e0       	ldi	r23, 0x00	; 0
    b3d4:	85 e0       	ldi	r24, 0x05	; 5
    b3d6:	90 e0       	ldi	r25, 0x00	; 0
    b3d8:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	MapSprite2(0, map_right_arrow, 0);
    b3dc:	40 e0       	ldi	r20, 0x00	; 0
    b3de:	64 e8       	ldi	r22, 0x84	; 132
    b3e0:	71 e3       	ldi	r23, 0x31	; 49
    b3e2:	80 e0       	ldi	r24, 0x00	; 0
    b3e4:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    b3e8:	47 e3       	ldi	r20, 0x37	; 55
    b3ea:	5b e6       	ldi	r21, 0x6B	; 107
    b3ec:	65 e0       	ldi	r22, 0x05	; 5
    b3ee:	84 e0       	ldi	r24, 0x04	; 4
    b3f0:	0c 94 06 49 	jmp	0x920c	; 0x920c <DrawMap>

0000b3f4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    b3f4:	fc 01       	movw	r30, r24
    b3f6:	20 81       	ld	r18, Z
    b3f8:	31 81       	ldd	r19, Z+1	; 0x01
    b3fa:	28 70       	andi	r18, 0x08	; 8
    b3fc:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &player2.netMessage.joyPadState) return player1.netMessage.joyPadState.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    b3fe:	81 e0       	ldi	r24, 0x01	; 1
    b400:	23 2b       	or	r18, r19
    b402:	09 f4       	brne	.+2      	; 0xb406 <select_pressed+0x12>
    b404:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    b406:	08 95       	ret

0000b408 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    b408:	ff 92       	push	r15
    b40a:	0f 93       	push	r16
    b40c:	1f 93       	push	r17
    b40e:	cf 93       	push	r28
    b410:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b412:	81 e0       	ldi	r24, 0x01	; 1
    b414:	80 93 b6 0b 	sts	0x0BB6, r24
	clear_sprites();
    b418:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    b41c:	44 e0       	ldi	r20, 0x04	; 4
    b41e:	5b e6       	ldi	r21, 0x6B	; 107
    b420:	61 e0       	ldi	r22, 0x01	; 1
    b422:	87 e0       	ldi	r24, 0x07	; 7
    b424:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    b428:	4e ef       	ldi	r20, 0xFE	; 254
    b42a:	5a e6       	ldi	r21, 0x6A	; 106
    b42c:	61 e0       	ldi	r22, 0x01	; 1
    b42e:	84 e1       	ldi	r24, 0x14	; 20
    b430:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	Print(10, 2, (char*) strHighscores);
    b434:	4c e1       	ldi	r20, 0x1C	; 28
    b436:	54 e0       	ldi	r21, 0x04	; 4
    b438:	62 e0       	ldi	r22, 0x02	; 2
    b43a:	70 e0       	ldi	r23, 0x00	; 0
    b43c:	8a e0       	ldi	r24, 0x0A	; 10
    b43e:	90 e0       	ldi	r25, 0x00	; 0
    b440:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b444:	0c e7       	ldi	r16, 0x7C	; 124
    b446:	1b e0       	ldi	r17, 0x0B	; 11
    b448:	c7 e0       	ldi	r28, 0x07	; 7
    b44a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b44c:	ff 24       	eor	r15, r15
    b44e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    b450:	20 e0       	ldi	r18, 0x00	; 0
    b452:	4f 2d       	mov	r20, r15
    b454:	be 01       	movw	r22, r28
    b456:	82 e0       	ldi	r24, 0x02	; 2
    b458:	90 e0       	ldi	r25, 0x00	; 0
    b45a:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
		PrintChar(3, y, '.');
    b45e:	4e e2       	ldi	r20, 0x2E	; 46
    b460:	be 01       	movw	r22, r28
    b462:	83 e0       	ldi	r24, 0x03	; 3
    b464:	90 e0       	ldi	r25, 0x00	; 0
    b466:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
    b46a:	f8 01       	movw	r30, r16
    b46c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b46e:	80 81       	ld	r24, Z
    b470:	93 e0       	ldi	r25, 0x03	; 3
    b472:	89 9f       	mul	r24, r25
    b474:	a0 01       	movw	r20, r0
    b476:	11 24       	eor	r1, r1
    b478:	48 56       	subi	r20, 0x68	; 104
    b47a:	54 4f       	sbci	r21, 0xF4	; 244
    b47c:	23 e0       	ldi	r18, 0x03	; 3
    b47e:	6c 2f       	mov	r22, r28
    b480:	85 e0       	ldi	r24, 0x05	; 5
    b482:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		Print(9, y, (char*) strOwns);
    b486:	48 ee       	ldi	r20, 0xE8	; 232
    b488:	53 e0       	ldi	r21, 0x03	; 3
    b48a:	be 01       	movw	r22, r28
    b48c:	89 e0       	ldi	r24, 0x09	; 9
    b48e:	90 e0       	ldi	r25, 0x00	; 0
    b490:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b494:	f8 01       	movw	r30, r16
    b496:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b498:	80 81       	ld	r24, Z
    b49a:	e3 e0       	ldi	r30, 0x03	; 3
    b49c:	8e 9f       	mul	r24, r30
    b49e:	a0 01       	movw	r20, r0
    b4a0:	11 24       	eor	r1, r1
    b4a2:	48 56       	subi	r20, 0x68	; 104
    b4a4:	54 4f       	sbci	r21, 0xF4	; 244
    b4a6:	23 e0       	ldi	r18, 0x03	; 3
    b4a8:	6c 2f       	mov	r22, r28
    b4aa:	8e e0       	ldi	r24, 0x0E	; 14
    b4ac:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		Print(18, y, (char*) strBy);
    b4b0:	45 ee       	ldi	r20, 0xE5	; 229
    b4b2:	53 e0       	ldi	r21, 0x03	; 3
    b4b4:	be 01       	movw	r22, r28
    b4b6:	82 e1       	ldi	r24, 0x12	; 18
    b4b8:	90 e0       	ldi	r25, 0x00	; 0
    b4ba:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    b4be:	21 e0       	ldi	r18, 0x01	; 1
    b4c0:	f8 01       	movw	r30, r16
    b4c2:	32 97       	sbiw	r30, 0x02	; 2
    b4c4:	40 81       	ld	r20, Z
    b4c6:	be 01       	movw	r22, r28
    b4c8:	87 e1       	ldi	r24, 0x17	; 23
    b4ca:	90 e0       	ldi	r25, 0x00	; 0
    b4cc:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
		PrintChar(24, y, '-');
    b4d0:	4d e2       	ldi	r20, 0x2D	; 45
    b4d2:	be 01       	movw	r22, r28
    b4d4:	88 e1       	ldi	r24, 0x18	; 24
    b4d6:	90 e0       	ldi	r25, 0x00	; 0
    b4d8:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b4dc:	21 e0       	ldi	r18, 0x01	; 1
    b4de:	f8 01       	movw	r30, r16
    b4e0:	31 97       	sbiw	r30, 0x01	; 1
    b4e2:	40 81       	ld	r20, Z
    b4e4:	be 01       	movw	r22, r28
    b4e6:	8b e1       	ldi	r24, 0x1B	; 27
    b4e8:	90 e0       	ldi	r25, 0x00	; 0
    b4ea:	0e 94 53 49 	call	0x92a6	; 0x92a6 <PrintByte>
		if (scores.data[i+4])
    b4ee:	f8 01       	movw	r30, r16
    b4f0:	80 81       	ld	r24, Z
    b4f2:	88 23       	and	r24, r24
    b4f4:	11 f0       	breq	.+4      	; 0xb4fa <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    b4f6:	4a e2       	ldi	r20, 0x2A	; 42
    b4f8:	01 c0       	rjmp	.+2      	; 0xb4fc <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    b4fa:	40 e2       	ldi	r20, 0x20	; 32
    b4fc:	be 01       	movw	r22, r28
    b4fe:	8d e1       	ldi	r24, 0x1D	; 29
    b500:	90 e0       	ldi	r25, 0x00	; 0
    b502:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
		y += 3;
		rank += 1;
    b506:	f3 94       	inc	r15
    b508:	23 96       	adiw	r28, 0x03	; 3
    b50a:	0b 5f       	subi	r16, 0xFB	; 251
    b50c:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    b50e:	f6 e0       	ldi	r31, 0x06	; 6
    b510:	ff 12       	cpse	r15, r31
    b512:	9e cf       	rjmp	.-196    	; 0xb450 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    b514:	45 e5       	ldi	r20, 0x55	; 85
    b516:	54 e0       	ldi	r21, 0x04	; 4
    b518:	66 e1       	ldi	r22, 0x16	; 22
    b51a:	70 e0       	ldi	r23, 0x00	; 0
    b51c:	83 e0       	ldi	r24, 0x03	; 3
    b51e:	90 e0       	ldi	r25, 0x00	; 0
    b520:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(10, 24, (char*) strCancelHandle);
    b524:	4a e4       	ldi	r20, 0x4A	; 74
    b526:	54 e0       	ldi	r21, 0x04	; 4
    b528:	68 e1       	ldi	r22, 0x18	; 24
    b52a:	70 e0       	ldi	r23, 0x00	; 0
    b52c:	8a e0       	ldi	r24, 0x0A	; 10
    b52e:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b530:	df 91       	pop	r29
    b532:	cf 91       	pop	r28
    b534:	1f 91       	pop	r17
    b536:	0f 91       	pop	r16
    b538:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    b53a:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>

0000b53e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b53e:	0e 94 a4 4f 	call	0x9f48	; 0x9f48 <save_score>
	fade_through();
    b542:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
	init_game_state();
    b546:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <init_game_state>
	load_tank_rank();
    b54a:	0c 94 04 5a 	jmp	0xb408	; 0xb408 <load_tank_rank>

0000b54e <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    b54e:	cf 93       	push	r28
    b550:	df 93       	push	r29
    b552:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    b554:	88 81       	ld	r24, Y
    b556:	99 81       	ldd	r25, Y+1	; 0x01
    b558:	91 ff       	sbrs	r25, 1
    b55a:	11 c0       	rjmp	.+34     	; 0xb57e <update_tank_rank+0x30>
	{
		game.tank_rank_counter = 0;
    b55c:	10 92 c4 0b 	sts	0x0BC4, r1
    b560:	10 92 c3 0b 	sts	0x0BC3, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b564:	24 e0       	ldi	r18, 0x04	; 4
    b566:	40 91 cf 0f 	lds	r20, 0x0FCF
    b56a:	60 91 59 0c 	lds	r22, 0x0C59
    b56e:	80 91 c9 0b 	lds	r24, 0x0BC9
    b572:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    b576:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_splash();
    b57a:	0e 94 b6 59 	call	0xb36c	; 0xb36c <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b57e:	8c 81       	ldd	r24, Y+4	; 0x04
    b580:	9d 81       	ldd	r25, Y+5	; 0x05
    b582:	92 ff       	sbrs	r25, 2
    b584:	22 c0       	rjmp	.+68     	; 0xb5ca <update_tank_rank+0x7c>
    b586:	8e 81       	ldd	r24, Y+6	; 0x06
    b588:	8f 3f       	cpi	r24, 0xFF	; 255
    b58a:	f9 f4       	brne	.+62     	; 0xb5ca <update_tank_rank+0x7c>
	{
		game.tank_rank_counter = 0;
    b58c:	10 92 c4 0b 	sts	0x0BC4, r1
    b590:	10 92 c3 0b 	sts	0x0BC3, r1
	    LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b594:	24 e0       	ldi	r18, 0x04	; 4
    b596:	40 91 cf 0f 	lds	r20, 0x0FCF
    b59a:	60 91 59 0c 	lds	r22, 0x0C59
    b59e:	80 91 c9 0b 	lds	r24, 0x0BC9
    b5a2:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
	    init_scores(&scores);
    b5a6:	86 e7       	ldi	r24, 0x76	; 118
    b5a8:	9b e0       	ldi	r25, 0x0B	; 11
    b5aa:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <init_scores>
	    init_handles(&handles);
    b5ae:	86 e9       	ldi	r24, 0x96	; 150
    b5b0:	9b e0       	ldi	r25, 0x0B	; 11
    b5b2:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b5b6:	86 e7       	ldi	r24, 0x76	; 118
    b5b8:	9b e0       	ldi	r25, 0x0B	; 11
    b5ba:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <EepromWriteBlock>
    b5be:	86 e9       	ldi	r24, 0x96	; 150
    b5c0:	9b e0       	ldi	r25, 0x0B	; 11
    b5c2:	0e 94 f8 3b 	call	0x77f0	; 0x77f0 <EepromWriteBlock>
	    LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b5c6:	0e 94 04 5a 	call	0xb408	; 0xb408 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    b5ca:	80 91 c3 0b 	lds	r24, 0x0BC3
    b5ce:	90 91 c4 0b 	lds	r25, 0x0BC4
    b5d2:	85 38       	cpi	r24, 0x85	; 133
    b5d4:	93 40       	sbci	r25, 0x03	; 3
    b5d6:	88 f0       	brcs	.+34     	; 0xb5fa <update_tank_rank+0xac>
	{
		game.tank_rank_counter = 0;
    b5d8:	10 92 c4 0b 	sts	0x0BC4, r1
    b5dc:	10 92 c3 0b 	sts	0x0BC3, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b5e0:	24 e0       	ldi	r18, 0x04	; 4
    b5e2:	40 91 cf 0f 	lds	r20, 0x0FCF
    b5e6:	60 91 59 0c 	lds	r22, 0x0C59
    b5ea:	80 91 c9 0b 	lds	r24, 0x0BC9
    b5ee:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    b5f2:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_splash();
    b5f6:	0e 94 b6 59 	call	0xb36c	; 0xb36c <load_splash>
	}
	game.tank_rank_counter++;
    b5fa:	80 91 c3 0b 	lds	r24, 0x0BC3
    b5fe:	90 91 c4 0b 	lds	r25, 0x0BC4
    b602:	01 96       	adiw	r24, 0x01	; 1
    b604:	90 93 c4 0b 	sts	0x0BC4, r25
    b608:	80 93 c3 0b 	sts	0x0BC3, r24
#endif
}
    b60c:	df 91       	pop	r29
    b60e:	cf 91       	pop	r28
    b610:	08 95       	ret

0000b612 <_handle_select_render_helper>:
	}
#endif
}

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b612:	af 92       	push	r10
    b614:	bf 92       	push	r11
    b616:	cf 92       	push	r12
    b618:	df 92       	push	r13
    b61a:	ef 92       	push	r14
    b61c:	ff 92       	push	r15
    b61e:	0f 93       	push	r16
    b620:	1f 93       	push	r17
    b622:	cf 93       	push	r28
    b624:	df 93       	push	r29
    b626:	00 d0       	rcall	.+0      	; 0xb628 <_handle_select_render_helper+0x16>
    b628:	1f 92       	push	r1
    b62a:	cd b7       	in	r28, 0x3d	; 61
    b62c:	de b7       	in	r29, 0x3e	; 62
    b62e:	7c 01       	movw	r14, r24
    b630:	b4 2e       	mov	r11, r20
    b632:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b634:	80 e2       	ldi	r24, 0x20	; 32
    b636:	89 83       	std	Y+1, r24	; 0x01
    b638:	8a 83       	std	Y+2, r24	; 0x02
    b63a:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b63c:	f7 01       	movw	r30, r14
    b63e:	85 81       	ldd	r24, Z+5	; 0x05
    b640:	81 11       	cpse	r24, r1
    b642:	1d c0       	rjmp	.+58     	; 0xb67e <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b644:	40 e0       	ldi	r20, 0x00	; 0
    b646:	64 e8       	ldi	r22, 0x84	; 132
    b648:	71 e3       	ldi	r23, 0x31	; 49
    b64a:	82 2f       	mov	r24, r18
    b64c:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b650:	40 e0       	ldi	r20, 0x00	; 0
    b652:	66 ec       	ldi	r22, 0xC6	; 198
    b654:	71 e3       	ldi	r23, 0x31	; 49
    b656:	81 e0       	ldi	r24, 0x01	; 1
    b658:	81 0f       	add	r24, r17
    b65a:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b65e:	f7 01       	movw	r30, r14
    b660:	40 81       	ld	r20, Z
    b662:	44 0f       	add	r20, r20
    b664:	44 0f       	add	r20, r20
    b666:	44 0f       	add	r20, r20
    b668:	40 5c       	subi	r20, 0xC0	; 192
    b66a:	01 e0       	ldi	r16, 0x01	; 1
    b66c:	21 e0       	ldi	r18, 0x01	; 1
    b66e:	6b 2d       	mov	r22, r11
    b670:	66 0f       	add	r22, r22
    b672:	66 0f       	add	r22, r22
    b674:	66 0f       	add	r22, r22
    b676:	81 2f       	mov	r24, r17
    b678:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
    b67c:	6e c0       	rjmp	.+220    	; 0xb75a <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == EDITING)
    b67e:	81 30       	cpi	r24, 0x01	; 1
    b680:	09 f0       	breq	.+2      	; 0xb684 <_handle_select_render_helper+0x72>
    b682:	43 c0       	rjmp	.+134    	; 0xb70a <_handle_select_render_helper+0xf8>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b684:	40 e0       	ldi	r20, 0x00	; 0
    b686:	61 e8       	ldi	r22, 0x81	; 129
    b688:	71 e3       	ldi	r23, 0x31	; 49
    b68a:	82 2f       	mov	r24, r18
    b68c:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b690:	aa 24       	eor	r10, r10
    b692:	a3 94       	inc	r10
    b694:	a1 0e       	add	r10, r17
    b696:	40 e0       	ldi	r20, 0x00	; 0
    b698:	6e e7       	ldi	r22, 0x7E	; 126
    b69a:	71 e3       	ldi	r23, 0x31	; 49
    b69c:	8a 2d       	mov	r24, r10
    b69e:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b6a2:	cb 2c       	mov	r12, r11
    b6a4:	d1 2c       	mov	r13, r1
    b6a6:	f5 e0       	ldi	r31, 0x05	; 5
    b6a8:	cf 0e       	add	r12, r31
    b6aa:	d1 1c       	adc	r13, r1
    b6ac:	f7 01       	movw	r30, r14
    b6ae:	40 81       	ld	r20, Z
    b6b0:	44 0f       	add	r20, r20
    b6b2:	44 0f       	add	r20, r20
    b6b4:	44 0f       	add	r20, r20
    b6b6:	48 5c       	subi	r20, 0xC8	; 200
    b6b8:	84 81       	ldd	r24, Z+4	; 0x04
    b6ba:	b6 01       	movw	r22, r12
    b6bc:	68 0f       	add	r22, r24
    b6be:	71 1d       	adc	r23, r1
    b6c0:	87 fd       	sbrc	r24, 7
    b6c2:	7a 95       	dec	r23
    b6c4:	66 0f       	add	r22, r22
    b6c6:	66 0f       	add	r22, r22
    b6c8:	66 0f       	add	r22, r22
    b6ca:	01 e0       	ldi	r16, 0x01	; 1
    b6cc:	21 e0       	ldi	r18, 0x01	; 1
    b6ce:	81 2f       	mov	r24, r17
    b6d0:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b6d4:	f7 01       	movw	r30, r14
    b6d6:	40 81       	ld	r20, Z
    b6d8:	44 0f       	add	r20, r20
    b6da:	44 0f       	add	r20, r20
    b6dc:	44 0f       	add	r20, r20
    b6de:	48 5b       	subi	r20, 0xB8	; 184
    b6e0:	84 81       	ldd	r24, Z+4	; 0x04
    b6e2:	c8 0e       	add	r12, r24
    b6e4:	d1 1c       	adc	r13, r1
    b6e6:	87 fd       	sbrc	r24, 7
    b6e8:	da 94       	dec	r13
    b6ea:	6c 2d       	mov	r22, r12
    b6ec:	66 0f       	add	r22, r22
    b6ee:	66 0f       	add	r22, r22
    b6f0:	66 0f       	add	r22, r22
    b6f2:	21 e0       	ldi	r18, 0x01	; 1
    b6f4:	8a 2d       	mov	r24, r10
    b6f6:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
		memcpy(tmp, ps->handle, 3);
    b6fa:	f7 01       	movw	r30, r14
    b6fc:	81 81       	ldd	r24, Z+1	; 0x01
    b6fe:	92 81       	ldd	r25, Z+2	; 0x02
    b700:	a3 81       	ldd	r26, Z+3	; 0x03
    b702:	89 83       	std	Y+1, r24	; 0x01
    b704:	9a 83       	std	Y+2, r25	; 0x02
    b706:	ab 83       	std	Y+3, r26	; 0x03
    b708:	28 c0       	rjmp	.+80     	; 0xb75a <_handle_select_render_helper+0x148>
	}
	else if (ps->select_state == CONFIRMED)
    b70a:	82 30       	cpi	r24, 0x02	; 2
    b70c:	31 f5       	brne	.+76     	; 0xb75a <_handle_select_render_helper+0x148>
	{
		PrintChar(x_offset+6, 5, '(');
    b70e:	c4 2e       	mov	r12, r20
    b710:	d1 2c       	mov	r13, r1
    b712:	48 e2       	ldi	r20, 0x28	; 40
    b714:	65 e0       	ldi	r22, 0x05	; 5
    b716:	70 e0       	ldi	r23, 0x00	; 0
    b718:	c6 01       	movw	r24, r12
    b71a:	06 96       	adiw	r24, 0x06	; 6
    b71c:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b720:	23 e0       	ldi	r18, 0x03	; 3
    b722:	a7 01       	movw	r20, r14
    b724:	4f 5f       	subi	r20, 0xFF	; 255
    b726:	5f 4f       	sbci	r21, 0xFF	; 255
    b728:	65 e0       	ldi	r22, 0x05	; 5
    b72a:	87 e0       	ldi	r24, 0x07	; 7
    b72c:	8b 0d       	add	r24, r11
    b72e:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b732:	49 e2       	ldi	r20, 0x29	; 41
    b734:	65 e0       	ldi	r22, 0x05	; 5
    b736:	70 e0       	ldi	r23, 0x00	; 0
    b738:	c6 01       	movw	r24, r12
    b73a:	0a 96       	adiw	r24, 0x0a	; 10
    b73c:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
		MapSprite2(idx, map_none, 0);
    b740:	40 e0       	ldi	r20, 0x00	; 0
    b742:	66 ec       	ldi	r22, 0xC6	; 198
    b744:	71 e3       	ldi	r23, 0x31	; 49
    b746:	81 2f       	mov	r24, r17
    b748:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b74c:	40 e0       	ldi	r20, 0x00	; 0
    b74e:	66 ec       	ldi	r22, 0xC6	; 198
    b750:	71 e3       	ldi	r23, 0x31	; 49
    b752:	81 e0       	ldi	r24, 0x01	; 1
    b754:	81 0f       	add	r24, r17
    b756:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b75a:	f7 01       	movw	r30, r14
    b75c:	60 81       	ld	r22, Z
    b75e:	68 5f       	subi	r22, 0xF8	; 248
    b760:	23 e0       	ldi	r18, 0x03	; 3
    b762:	ae 01       	movw	r20, r28
    b764:	4f 5f       	subi	r20, 0xFF	; 255
    b766:	5f 4f       	sbci	r21, 0xFF	; 255
    b768:	85 e0       	ldi	r24, 0x05	; 5
    b76a:	8b 0d       	add	r24, r11
    b76c:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
}
    b770:	0f 90       	pop	r0
    b772:	0f 90       	pop	r0
    b774:	0f 90       	pop	r0
    b776:	df 91       	pop	r29
    b778:	cf 91       	pop	r28
    b77a:	1f 91       	pop	r17
    b77c:	0f 91       	pop	r16
    b77e:	ff 90       	pop	r15
    b780:	ef 90       	pop	r14
    b782:	df 90       	pop	r13
    b784:	cf 90       	pop	r12
    b786:	bf 90       	pop	r11
    b788:	af 90       	pop	r10
    b78a:	08 95       	ret

0000b78c <load_handle_select>:

void load_handle_select()
{
    b78c:	8f 92       	push	r8
    b78e:	9f 92       	push	r9
    b790:	af 92       	push	r10
    b792:	bf 92       	push	r11
    b794:	cf 92       	push	r12
    b796:	df 92       	push	r13
    b798:	ef 92       	push	r14
    b79a:	ff 92       	push	r15
    b79c:	0f 93       	push	r16
    b79e:	1f 93       	push	r17
    b7a0:	cf 93       	push	r28
    b7a2:	df 93       	push	r29
	player1.netMessage.ps.select_state = SELECTING;
    b7a4:	10 92 6e 0c 	sts	0x0C6E, r1
	player2.netMessage.ps.select_state = SELECTING;
    b7a8:	10 92 e4 0f 	sts	0x0FE4, r1
	player1.netMessage.ps.handle_id = 0;
    b7ac:	10 92 69 0c 	sts	0x0C69, r1
	player2.netMessage.ps.handle_id = 0;
    b7b0:	10 92 df 0f 	sts	0x0FDF, r1
	player1.netMessage.ps.char_index = 0;
    b7b4:	10 92 6d 0c 	sts	0x0C6D, r1
	player2.netMessage.ps.char_index = 0;
    b7b8:	10 92 e3 0f 	sts	0x0FE3, r1
	game.current_screen = HANDLE_SELECT;
    b7bc:	82 e0       	ldi	r24, 0x02	; 2
    b7be:	80 93 b6 0b 	sts	0x0BB6, r24
	clear_sprites();
    b7c2:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    b7c6:	44 e0       	ldi	r20, 0x04	; 4
    b7c8:	5b e6       	ldi	r21, 0x6B	; 107
    b7ca:	64 e0       	ldi	r22, 0x04	; 4
    b7cc:	83 e0       	ldi	r24, 0x03	; 3
    b7ce:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    b7d2:	4e ef       	ldi	r20, 0xFE	; 254
    b7d4:	5a e6       	ldi	r21, 0x6A	; 106
    b7d6:	64 e0       	ldi	r22, 0x04	; 4
    b7d8:	84 e1       	ldi	r24, 0x14	; 20
    b7da:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    b7de:	40 e1       	ldi	r20, 0x10	; 16
    b7e0:	54 e0       	ldi	r21, 0x04	; 4
    b7e2:	61 e0       	ldi	r22, 0x01	; 1
    b7e4:	70 e0       	ldi	r23, 0x00	; 0
    b7e6:	89 e0       	ldi	r24, 0x09	; 9
    b7e8:	90 e0       	ldi	r25, 0x00	; 0
    b7ea:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(6, 5, (char*) strPlayer1);
    b7ee:	4f ef       	ldi	r20, 0xFF	; 255
    b7f0:	53 e0       	ldi	r21, 0x03	; 3
    b7f2:	65 e0       	ldi	r22, 0x05	; 5
    b7f4:	70 e0       	ldi	r23, 0x00	; 0
    b7f6:	86 e0       	ldi	r24, 0x06	; 6
    b7f8:	90 e0       	ldi	r25, 0x00	; 0
    b7fa:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(23, 5, (char*) strPlayer2);
    b7fe:	4c ef       	ldi	r20, 0xFC	; 252
    b800:	53 e0       	ldi	r21, 0x03	; 3
    b802:	65 e0       	ldi	r22, 0x05	; 5
    b804:	70 e0       	ldi	r23, 0x00	; 0
    b806:	87 e1       	ldi	r24, 0x17	; 23
    b808:	90 e0       	ldi	r25, 0x00	; 0
    b80a:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b80e:	88 e9       	ldi	r24, 0x98	; 152
    b810:	e8 2e       	mov	r14, r24
    b812:	8b e0       	ldi	r24, 0x0B	; 11
    b814:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b816:	c0 e0       	ldi	r28, 0x00	; 0
    b818:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b81a:	93 e0       	ldi	r25, 0x03	; 3
    b81c:	a9 2e       	mov	r10, r25
    b81e:	b1 2c       	mov	r11, r1
    b820:	67 01       	movw	r12, r14
    b822:	ce 01       	movw	r24, r28
    b824:	b5 01       	movw	r22, r10
    b826:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    b82a:	4c 01       	movw	r8, r24
    b82c:	8b 01       	movw	r16, r22
    b82e:	08 5f       	subi	r16, 0xF8	; 248
    b830:	1f 4f       	sbci	r17, 0xFF	; 255
    b832:	f7 01       	movw	r30, r14
    b834:	41 91       	ld	r20, Z+
    b836:	7f 01       	movw	r14, r30
    b838:	b8 01       	movw	r22, r16
    b83a:	03 96       	adiw	r24, 0x03	; 3
    b83c:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b840:	f6 01       	movw	r30, r12
    b842:	40 81       	ld	r20, Z
    b844:	b8 01       	movw	r22, r16
    b846:	c4 01       	movw	r24, r8
    b848:	44 96       	adiw	r24, 0x14	; 20
    b84a:	0e 94 a1 49 	call	0x9342	; 0x9342 <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    b84e:	21 96       	adiw	r28, 0x01	; 1
    b850:	cb 31       	cpi	r28, 0x1B	; 27
    b852:	d1 05       	cpc	r29, r1
    b854:	29 f7       	brne	.-54     	; 0xb820 <load_handle_select+0x94>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    b856:	4b e3       	ldi	r20, 0x3B	; 59
    b858:	54 e0       	ldi	r21, 0x04	; 4
    b85a:	65 e1       	ldi	r22, 0x15	; 21
    b85c:	70 e0       	ldi	r23, 0x00	; 0
    b85e:	85 e0       	ldi	r24, 0x05	; 5
    b860:	90 e0       	ldi	r25, 0x00	; 0
    b862:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(5, 22, (char*) strConfirmHandle);
    b866:	4e e6       	ldi	r20, 0x6E	; 110
    b868:	54 e0       	ldi	r21, 0x04	; 4
    b86a:	66 e1       	ldi	r22, 0x16	; 22
    b86c:	70 e0       	ldi	r23, 0x00	; 0
    b86e:	85 e0       	ldi	r24, 0x05	; 5
    b870:	90 e0       	ldi	r25, 0x00	; 0
    b872:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(5, 23, (char*) strCancelHandle);
    b876:	4a e4       	ldi	r20, 0x4A	; 74
    b878:	54 e0       	ldi	r21, 0x04	; 4
    b87a:	67 e1       	ldi	r22, 0x17	; 23
    b87c:	70 e0       	ldi	r23, 0x00	; 0
    b87e:	85 e0       	ldi	r24, 0x05	; 5
    b880:	90 e0       	ldi	r25, 0x00	; 0
    b882:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
	Print(5, 24, (char*) strChangeHandle);
    b886:	4d ee       	ldi	r20, 0xED	; 237
    b888:	53 e0       	ldi	r21, 0x03	; 3
    b88a:	68 e1       	ldi	r22, 0x18	; 24
    b88c:	70 e0       	ldi	r23, 0x00	; 0
    b88e:	85 e0       	ldi	r24, 0x05	; 5
    b890:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    b892:	df 91       	pop	r29
    b894:	cf 91       	pop	r28
    b896:	1f 91       	pop	r17
    b898:	0f 91       	pop	r16
    b89a:	ff 90       	pop	r15
    b89c:	ef 90       	pop	r14
    b89e:	df 90       	pop	r13
    b8a0:	cf 90       	pop	r12
    b8a2:	bf 90       	pop	r11
    b8a4:	af 90       	pop	r10
    b8a6:	9f 90       	pop	r9
    b8a8:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    b8aa:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>

0000b8ae <load_host_net_game>:
#if JAMMA
#else

void load_host_net_game()
{
	game.current_screen = HOST_NET_GAME;
    b8ae:	84 e0       	ldi	r24, 0x04	; 4
    b8b0:	80 93 b6 0b 	sts	0x0BB6, r24
	clear_sprites();
    b8b4:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	Print(2, 10, (char*) strLookingForWifi);
    b8b8:	4d ed       	ldi	r20, 0xDD	; 221
    b8ba:	54 e0       	ldi	r21, 0x04	; 4
    b8bc:	6a e0       	ldi	r22, 0x0A	; 10
    b8be:	70 e0       	ldi	r23, 0x00	; 0
    b8c0:	82 e0       	ldi	r24, 0x02	; 2
    b8c2:	90 e0       	ldi	r25, 0x00	; 0
    b8c4:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
#define NETBLOCKHIT 14
#define NETACK 15
#define NETNEXTLEVEL 16

u8 activateNet() {
	return initWifi();
    b8c8:	0e 94 57 4b 	call	0x96ae	; 0x96ae <initWifi>
	wifi_status = activateNet();
    b8cc:	80 93 e7 0b 	sts	0x0BE7, r24
	fade_through();
    b8d0:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
	if (wifi_status != WIFI_OK)
    b8d4:	80 91 e7 0b 	lds	r24, 0x0BE7
    b8d8:	88 23       	and	r24, r24
    b8da:	49 f0       	breq	.+18     	; 0xb8ee <load_host_net_game+0x40>
	{
		Print(7, 10, (char*) strNetworkError);
    b8dc:	40 e8       	ldi	r20, 0x80	; 128
    b8de:	54 e0       	ldi	r21, 0x04	; 4
    b8e0:	6a e0       	ldi	r22, 0x0A	; 10
    b8e2:	70 e0       	ldi	r23, 0x00	; 0
    b8e4:	87 e0       	ldi	r24, 0x07	; 7
    b8e6:	90 e0       	ldi	r25, 0x00	; 0
    b8e8:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b8ec:	29 c0       	rjmp	.+82     	; 0xb940 <load_host_net_game+0x92>
	}
	else if (hostNetGame((char*)gameId) == WIFI_OK)
    b8ee:	82 e0       	ldi	r24, 0x02	; 2
    b8f0:	91 e0       	ldi	r25, 0x01	; 1
    b8f2:	0e 94 ed 4c 	call	0x99da	; 0x99da <hostNetGame>
    b8f6:	81 11       	cpse	r24, r1
    b8f8:	f1 cf       	rjmp	.-30     	; 0xb8dc <load_host_net_game+0x2e>
	{
		Print(5, 1, (char*) strShareGameId);
    b8fa:	4a ec       	ldi	r20, 0xCA	; 202
    b8fc:	54 e0       	ldi	r21, 0x04	; 4
    b8fe:	61 e0       	ldi	r22, 0x01	; 1
    b900:	70 e0       	ldi	r23, 0x00	; 0
    b902:	85 e0       	ldi	r24, 0x05	; 5
    b904:	90 e0       	ldi	r25, 0x00	; 0
    b906:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		LBPrintStr(10, 10, gameId, 8);
    b90a:	28 e0       	ldi	r18, 0x08	; 8
    b90c:	42 e0       	ldi	r20, 0x02	; 2
    b90e:	51 e0       	ldi	r21, 0x01	; 1
    b910:	6a e0       	ldi	r22, 0x0A	; 10
    b912:	8a e0       	ldi	r24, 0x0A	; 10
    b914:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		Print(2, 18, (char*) strWaitingForNetOppenent);
    b918:	4f ea       	ldi	r20, 0xAF	; 175
    b91a:	54 e0       	ldi	r21, 0x04	; 4
    b91c:	62 e1       	ldi	r22, 0x12	; 18
    b91e:	70 e0       	ldi	r23, 0x00	; 0
    b920:	82 e0       	ldi	r24, 0x02	; 2
    b922:	90 e0       	ldi	r25, 0x00	; 0
    b924:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		DrawMap2(7, 10, map_green_tank);
    b928:	44 e0       	ldi	r20, 0x04	; 4
    b92a:	5b e6       	ldi	r21, 0x6B	; 107
    b92c:	6a e0       	ldi	r22, 0x0A	; 10
    b92e:	87 e0       	ldi	r24, 0x07	; 7
    b930:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    b934:	4e ef       	ldi	r20, 0xFE	; 254
    b936:	5a e6       	ldi	r21, 0x6A	; 106
    b938:	6a e0       	ldi	r22, 0x0A	; 10
    b93a:	83 e1       	ldi	r24, 0x13	; 19
    b93c:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
	}
	else
	{
		Print(7, 10, (char*) strNetworkError);
	}
	Print(9, 23, (char*) strCancelHandle);
    b940:	4a e4       	ldi	r20, 0x4A	; 74
    b942:	54 e0       	ldi	r21, 0x04	; 4
    b944:	67 e1       	ldi	r22, 0x17	; 23
    b946:	70 e0       	ldi	r23, 0x00	; 0
    b948:	89 e0       	ldi	r24, 0x09	; 9
    b94a:	90 e0       	ldi	r25, 0x00	; 0
    b94c:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>

0000b950 <update_host_net_game>:
}

void update_host_net_game(JoyPadState* p1)
{
	if (p1->pressed & BTN_X)
    b950:	fc 01       	movw	r30, r24
    b952:	80 81       	ld	r24, Z
    b954:	91 81       	ldd	r25, Z+1	; 0x01
    b956:	91 ff       	sbrs	r25, 1
    b958:	0d c0       	rjmp	.+26     	; 0xb974 <update_host_net_game+0x24>
	{
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b95a:	24 e0       	ldi	r18, 0x04	; 4
    b95c:	40 91 cf 0f 	lds	r20, 0x0FCF
    b960:	60 91 59 0c 	lds	r22, 0x0C59
    b964:	80 91 c9 0b 	lds	r24, 0x0BC9
    b968:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    b96c:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_splash();
    b970:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <load_splash>
	} 
	else if (player2.netMessage.code == NETJOINED)
    b974:	80 91 c9 0f 	lds	r24, 0x0FC9
    b978:	8a 30       	cpi	r24, 0x0A	; 10
    b97a:	a9 f4       	brne	.+42     	; 0xb9a6 <update_host_net_game+0x56>
	{
		game.demo_counter = 0;
    b97c:	10 92 c0 0b 	sts	0x0BC0, r1
    b980:	10 92 bf 0b 	sts	0x0BBF, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    b984:	24 e0       	ldi	r18, 0x04	; 4
    b986:	40 91 cf 0f 	lds	r20, 0x0FCF
    b98a:	60 91 59 0c 	lds	r22, 0x0C59
    b98e:	80 91 c9 0b 	lds	r24, 0x0BC9
    b992:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    b996:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_eeprom(&handles);
    b99a:	86 e9       	ldi	r24, 0x96	; 150
    b99c:	9b e0       	ldi	r25, 0x0B	; 11
    b99e:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <load_eeprom>
		load_handle_select();
    b9a2:	0c 94 c6 5b 	jmp	0xb78c	; 0xb78c <load_handle_select>
    b9a6:	08 95       	ret

0000b9a8 <load_join_net_game>:
	}
}

void load_join_net_game()
{
	game.current_screen = JOIN_NET_GAME;
    b9a8:	85 e0       	ldi	r24, 0x05	; 5
    b9aa:	80 93 b6 0b 	sts	0x0BB6, r24
	clear_sprites();
    b9ae:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
	Print(2, 10, (char*) strLookingForWifi);
    b9b2:	4d ed       	ldi	r20, 0xDD	; 221
    b9b4:	54 e0       	ldi	r21, 0x04	; 4
    b9b6:	6a e0       	ldi	r22, 0x0A	; 10
    b9b8:	70 e0       	ldi	r23, 0x00	; 0
    b9ba:	82 e0       	ldi	r24, 0x02	; 2
    b9bc:	90 e0       	ldi	r25, 0x00	; 0
    b9be:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b9c2:	0e 94 57 4b 	call	0x96ae	; 0x96ae <initWifi>
	wifi_status = activateNet();
    b9c6:	80 93 e7 0b 	sts	0x0BE7, r24
	fade_through();
    b9ca:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
	if (wifi_status != WIFI_OK)
    b9ce:	80 91 e7 0b 	lds	r24, 0x0BE7
    b9d2:	88 23       	and	r24, r24
    b9d4:	49 f0       	breq	.+18     	; 0xb9e8 <load_join_net_game+0x40>
	{
		Print(7, 10, (char*) strNetworkError);
    b9d6:	40 e8       	ldi	r20, 0x80	; 128
    b9d8:	54 e0       	ldi	r21, 0x04	; 4
    b9da:	6a e0       	ldi	r22, 0x0A	; 10
    b9dc:	70 e0       	ldi	r23, 0x00	; 0
    b9de:	87 e0       	ldi	r24, 0x07	; 7
    b9e0:	90 e0       	ldi	r25, 0x00	; 0
    b9e2:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
    b9e6:	26 c0       	rjmp	.+76     	; 0xba34 <load_join_net_game+0x8c>
	}
	else
	{
		Print(5, 1, (char*) strEnterGameId);
    b9e8:	4e e8       	ldi	r20, 0x8E	; 142
    b9ea:	54 e0       	ldi	r21, 0x04	; 4
    b9ec:	61 e0       	ldi	r22, 0x01	; 1
    b9ee:	70 e0       	ldi	r23, 0x00	; 0
    b9f0:	85 e0       	ldi	r24, 0x05	; 5
    b9f2:	90 e0       	ldi	r25, 0x00	; 0
    b9f4:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		LBPrintStr(10, 10, gameId, 8);
    b9f8:	28 e0       	ldi	r18, 0x08	; 8
    b9fa:	42 e0       	ldi	r20, 0x02	; 2
    b9fc:	51 e0       	ldi	r21, 0x01	; 1
    b9fe:	6a e0       	ldi	r22, 0x0A	; 10
    ba00:	8a e0       	ldi	r24, 0x0A	; 10
    ba02:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		DrawMap2(7, 10, map_green_tank);
    ba06:	44 e0       	ldi	r20, 0x04	; 4
    ba08:	5b e6       	ldi	r21, 0x6B	; 107
    ba0a:	6a e0       	ldi	r22, 0x0A	; 10
    ba0c:	87 e0       	ldi	r24, 0x07	; 7
    ba0e:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
		DrawMap2(19, 10, map_blue_tank);
    ba12:	4e ef       	ldi	r20, 0xFE	; 254
    ba14:	5a e6       	ldi	r21, 0x6A	; 106
    ba16:	6a e0       	ldi	r22, 0x0A	; 10
    ba18:	83 e1       	ldi	r24, 0x13	; 19
    ba1a:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
		Print(5, 22, (char*) strConfirmHandle);
    ba1e:	4e e6       	ldi	r20, 0x6E	; 110
    ba20:	54 e0       	ldi	r21, 0x04	; 4
    ba22:	66 e1       	ldi	r22, 0x16	; 22
    ba24:	70 e0       	ldi	r23, 0x00	; 0
    ba26:	85 e0       	ldi	r24, 0x05	; 5
    ba28:	90 e0       	ldi	r25, 0x00	; 0
    ba2a:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		gameIdIndex = 2;
    ba2e:	82 e0       	ldi	r24, 0x02	; 2
    ba30:	80 93 01 01 	sts	0x0101, r24
	}
	Print(9, 23, (char*) strCancelHandle);
    ba34:	4a e4       	ldi	r20, 0x4A	; 74
    ba36:	54 e0       	ldi	r21, 0x04	; 4
    ba38:	67 e1       	ldi	r22, 0x17	; 23
    ba3a:	70 e0       	ldi	r23, 0x00	; 0
    ba3c:	89 e0       	ldi	r24, 0x09	; 9
    ba3e:	90 e0       	ldi	r25, 0x00	; 0
    ba40:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>

0000ba44 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    ba44:	0f 93       	push	r16
    ba46:	cf 93       	push	r28
    ba48:	df 93       	push	r29
    ba4a:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    ba4c:	90 91 c9 0b 	lds	r25, 0x0BC9
    ba50:	92 30       	cpi	r25, 0x02	; 2
    ba52:	a9 f0       	breq	.+42     	; 0xba7e <update_splash+0x3a>
    ba54:	44 f4       	brge	.+16     	; 0xba66 <update_splash+0x22>
    ba56:	99 23       	and	r25, r25
    ba58:	71 f0       	breq	.+28     	; 0xba76 <update_splash+0x32>
    ba5a:	91 30       	cpi	r25, 0x01	; 1
    ba5c:	d9 f4       	brne	.+54     	; 0xba94 <update_splash+0x50>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    ba5e:	01 e0       	ldi	r16, 0x01	; 1
    ba60:	21 e0       	ldi	r18, 0x01	; 1
    ba62:	40 e7       	ldi	r20, 0x70	; 112
    ba64:	13 c0       	rjmp	.+38     	; 0xba8c <update_splash+0x48>
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    ba66:	93 30       	cpi	r25, 0x03	; 3
    ba68:	71 f0       	breq	.+28     	; 0xba86 <update_splash+0x42>
    ba6a:	94 30       	cpi	r25, 0x04	; 4
    ba6c:	99 f4       	brne	.+38     	; 0xba94 <update_splash+0x50>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    ba6e:	01 e0       	ldi	r16, 0x01	; 1
    ba70:	21 e0       	ldi	r18, 0x01	; 1
    ba72:	48 e8       	ldi	r20, 0x88	; 136
    ba74:	0b c0       	rjmp	.+22     	; 0xba8c <update_splash+0x48>
	game.demo_counter++;
#else
	switch (game.selection)
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    ba76:	01 e0       	ldi	r16, 0x01	; 1
    ba78:	21 e0       	ldi	r18, 0x01	; 1
    ba7a:	48 e6       	ldi	r20, 0x68	; 104
    ba7c:	07 c0       	rjmp	.+14     	; 0xba8c <update_splash+0x48>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
			break;
		case HOSTNETGAME:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    ba7e:	01 e0       	ldi	r16, 0x01	; 1
    ba80:	21 e0       	ldi	r18, 0x01	; 1
    ba82:	48 e7       	ldi	r20, 0x78	; 120
    ba84:	03 c0       	rjmp	.+6      	; 0xba8c <update_splash+0x48>
			break;
		case JOINNETGAME:
			MoveSprite(0, 6*8, 16*8, 1, 1);
    ba86:	01 e0       	ldi	r16, 0x01	; 1
    ba88:	21 e0       	ldi	r18, 0x01	; 1
    ba8a:	40 e8       	ldi	r20, 0x80	; 128
			break;
		case TR:
			MoveSprite(0, 6*8, 17*8, 1, 1);
    ba8c:	60 e3       	ldi	r22, 0x30	; 48
    ba8e:	80 e0       	ldi	r24, 0x00	; 0
    ba90:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    ba94:	4b e3       	ldi	r20, 0x3B	; 59
    ba96:	54 e0       	ldi	r21, 0x04	; 4
    ba98:	65 e1       	ldi	r22, 0x15	; 21
    ba9a:	70 e0       	ldi	r23, 0x00	; 0
    ba9c:	86 e0       	ldi	r24, 0x06	; 6
    ba9e:	90 e0       	ldi	r25, 0x00	; 0
    baa0:	0e 94 86 49 	call	0x930c	; 0x930c <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    baa4:	28 81       	ld	r18, Y
    baa6:	39 81       	ldd	r19, Y+1	; 0x01
    baa8:	21 15       	cp	r18, r1
    baaa:	31 05       	cpc	r19, r1
    baac:	21 f0       	breq	.+8      	; 0xbab6 <update_splash+0x72>
    baae:	10 92 c0 0b 	sts	0x0BC0, r1
    bab2:	10 92 bf 0b 	sts	0x0BBF, r1
	
	if (p1->pressed & BTN_UP)
    bab6:	24 ff       	sbrs	r18, 4
    bab8:	08 c0       	rjmp	.+16     	; 0xbaca <update_splash+0x86>
	{
		game.selection--;
    baba:	80 91 c9 0b 	lds	r24, 0x0BC9
    babe:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    bac0:	87 ff       	sbrs	r24, 7
    bac2:	0b c0       	rjmp	.+22     	; 0xbada <update_splash+0x96>
    bac4:	10 92 c9 0b 	sts	0x0BC9, r1
    bac8:	0a c0       	rjmp	.+20     	; 0xbade <update_splash+0x9a>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
	}
	else if (p1->pressed & BTN_DOWN)
    baca:	25 ff       	sbrs	r18, 5
    bacc:	12 c0       	rjmp	.+36     	; 0xbaf2 <update_splash+0xae>
	{
		game.selection++;
    bace:	80 91 c9 0b 	lds	r24, 0x0BC9
    bad2:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    bad4:	85 30       	cpi	r24, 0x05	; 5
    bad6:	0c f0       	brlt	.+2      	; 0xbada <update_splash+0x96>
    bad8:	84 e0       	ldi	r24, 0x04	; 4
    bada:	80 93 c9 0b 	sts	0x0BC9, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bade:	24 e0       	ldi	r18, 0x04	; 4
    bae0:	40 91 cf 0f 	lds	r20, 0x0FCF
    bae4:	60 91 59 0c 	lds	r22, 0x0C59
    bae8:	80 91 c9 0b 	lds	r24, 0x0BC9
    baec:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
    baf0:	b4 c0       	rjmp	.+360    	; 0xbc5a <update_splash+0x216>
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    baf2:	ce 01       	movw	r24, r28
    baf4:	0e 94 fa 59 	call	0xb3f4	; 0xb3f4 <select_pressed>
    baf8:	88 23       	and	r24, r24
    bafa:	09 f4       	brne	.+2      	; 0xbafe <update_splash+0xba>
    bafc:	5a c0       	rjmp	.+180    	; 0xbbb2 <update_splash+0x16e>
    bafe:	80 91 c9 0b 	lds	r24, 0x0BC9
    bb02:	82 30       	cpi	r24, 0x02	; 2
    bb04:	b0 f4       	brcc	.+44     	; 0xbb32 <update_splash+0xee>
	{
		game.demo_counter = 0;
    bb06:	10 92 c0 0b 	sts	0x0BC0, r1
    bb0a:	10 92 bf 0b 	sts	0x0BBF, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb0e:	24 e0       	ldi	r18, 0x04	; 4
    bb10:	40 91 cf 0f 	lds	r20, 0x0FCF
    bb14:	60 91 59 0c 	lds	r22, 0x0C59
    bb18:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    bb1c:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_eeprom(&handles);
    bb20:	86 e9       	ldi	r24, 0x96	; 150
    bb22:	9b e0       	ldi	r25, 0x0B	; 11
    bb24:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bb28:	df 91       	pop	r29
    bb2a:	cf 91       	pop	r28
    bb2c:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    bb2e:	0c 94 c6 5b 	jmp	0xb78c	; 0xb78c <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
    bb32:	82 30       	cpi	r24, 0x02	; 2
    bb34:	91 f4       	brne	.+36     	; 0xbb5a <update_splash+0x116>
	{
		game.demo_counter = 0;
    bb36:	10 92 c0 0b 	sts	0x0BC0, r1
    bb3a:	10 92 bf 0b 	sts	0x0BBF, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb3e:	24 e0       	ldi	r18, 0x04	; 4
    bb40:	40 91 cf 0f 	lds	r20, 0x0FCF
    bb44:	60 91 59 0c 	lds	r22, 0x0C59
    bb48:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    bb4c:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bb50:	df 91       	pop	r29
    bb52:	cf 91       	pop	r28
    bb54:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == HOSTNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_host_net_game();
    bb56:	0c 94 57 5c 	jmp	0xb8ae	; 0xb8ae <load_host_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
    bb5a:	83 30       	cpi	r24, 0x03	; 3
    bb5c:	91 f4       	brne	.+36     	; 0xbb82 <update_splash+0x13e>
	{
		game.demo_counter = 0;
    bb5e:	10 92 c0 0b 	sts	0x0BC0, r1
    bb62:	10 92 bf 0b 	sts	0x0BBF, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb66:	24 e0       	ldi	r18, 0x04	; 4
    bb68:	40 91 cf 0f 	lds	r20, 0x0FCF
    bb6c:	60 91 59 0c 	lds	r22, 0x0C59
    bb70:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    bb74:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bb78:	df 91       	pop	r29
    bb7a:	cf 91       	pop	r28
    bb7c:	0f 91       	pop	r16
	else if (select_pressed(p1) && (game.selection == JOINNETGAME))
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_join_net_game();
    bb7e:	0c 94 d4 5c 	jmp	0xb9a8	; 0xb9a8 <load_join_net_game>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    bb82:	84 30       	cpi	r24, 0x04	; 4
    bb84:	b1 f4       	brne	.+44     	; 0xbbb2 <update_splash+0x16e>
	{
		game.demo_counter = 0;
    bb86:	10 92 c0 0b 	sts	0x0BC0, r1
    bb8a:	10 92 bf 0b 	sts	0x0BBF, r1
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bb8e:	24 e0       	ldi	r18, 0x04	; 4
    bb90:	40 91 cf 0f 	lds	r20, 0x0FCF
    bb94:	60 91 59 0c 	lds	r22, 0x0C59
    bb98:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		fade_through();
    bb9c:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_eeprom(&scores);
    bba0:	86 e7       	ldi	r24, 0x76	; 118
    bba2:	9b e0       	ldi	r25, 0x0B	; 11
    bba4:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    bba8:	df 91       	pop	r29
    bbaa:	cf 91       	pop	r28
    bbac:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    bbae:	0c 94 04 5a 	jmp	0xb408	; 0xb408 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    bbb2:	80 91 bf 0b 	lds	r24, 0x0BBF
    bbb6:	90 91 c0 0b 	lds	r25, 0x0BC0
    bbba:	88 35       	cpi	r24, 0x58	; 88
    bbbc:	92 40       	sbci	r25, 0x02	; 2
    bbbe:	08 f4       	brcc	.+2      	; 0xbbc2 <update_splash+0x17e>
    bbc0:	4c c0       	rjmp	.+152    	; 0xbc5a <update_splash+0x216>
	{
		game.demo_counter = 0;
    bbc2:	10 92 c0 0b 	sts	0x0BC0, r1
    bbc6:	10 92 bf 0b 	sts	0x0BBF, r1
		if (game.demo_choice % 2 == 0)
    bbca:	80 91 be 0b 	lds	r24, 0x0BBE
    bbce:	80 fd       	sbrc	r24, 0
    bbd0:	2d c0       	rjmp	.+90     	; 0xbc2c <update_splash+0x1e8>
		{
			game.selection = CPUVCPU;
    bbd2:	86 e0       	ldi	r24, 0x06	; 6
    bbd4:	80 93 c9 0b 	sts	0x0BC9, r24
			player1.handle_id = 9;
    bbd8:	29 e0       	ldi	r18, 0x09	; 9
    bbda:	20 93 e8 0b 	sts	0x0BE8, r18
			memcpy(player1.handle, &handles.data[9*3], 3);
    bbde:	80 91 b3 0b 	lds	r24, 0x0BB3
    bbe2:	90 91 b4 0b 	lds	r25, 0x0BB4
    bbe6:	a0 91 b5 0b 	lds	r26, 0x0BB5
    bbea:	80 93 e9 0b 	sts	0x0BE9, r24
    bbee:	90 93 ea 0b 	sts	0x0BEA, r25
    bbf2:	a0 93 eb 0b 	sts	0x0BEB, r26
			player2.handle_id = 9;
    bbf6:	20 93 5e 0f 	sts	0x0F5E, r18
			memcpy(player2.handle, &handles.data[9*3], 3);
    bbfa:	80 93 5f 0f 	sts	0x0F5F, r24
    bbfe:	90 93 60 0f 	sts	0x0F60, r25
    bc02:	a0 93 61 0f 	sts	0x0F61, r26
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bc06:	24 e0       	ldi	r18, 0x04	; 4
    bc08:	40 91 cf 0f 	lds	r20, 0x0FCF
    bc0c:	60 91 59 0c 	lds	r22, 0x0C59
    bc10:	86 e0       	ldi	r24, 0x06	; 6
    bc12:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			clear_sprites();
    bc16:	0e 94 97 4f 	call	0x9f2e	; 0x9f2e <clear_sprites>
			fade_through();
    bc1a:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
			level_transition(LBRandom(0, 10));
    bc1e:	6a e0       	ldi	r22, 0x0A	; 10
    bc20:	80 e0       	ldi	r24, 0x00	; 0
    bc22:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    bc26:	0e 94 c3 58 	call	0xb186	; 0xb186 <level_transition>
    bc2a:	11 c0       	rjmp	.+34     	; 0xbc4e <update_splash+0x20a>
		}
		else
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bc2c:	24 e0       	ldi	r18, 0x04	; 4
    bc2e:	40 91 cf 0f 	lds	r20, 0x0FCF
    bc32:	60 91 59 0c 	lds	r22, 0x0C59
    bc36:	80 91 c9 0b 	lds	r24, 0x0BC9
    bc3a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			fade_through();
    bc3e:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
			load_eeprom(&scores);
    bc42:	86 e7       	ldi	r24, 0x76	; 118
    bc44:	9b e0       	ldi	r25, 0x0B	; 11
    bc46:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <load_eeprom>
			load_tank_rank();
    bc4a:	0e 94 04 5a 	call	0xb408	; 0xb408 <load_tank_rank>
		}
		game.demo_choice++;
    bc4e:	80 91 be 0b 	lds	r24, 0x0BBE
    bc52:	8f 5f       	subi	r24, 0xFF	; 255
    bc54:	80 93 be 0b 	sts	0x0BBE, r24
		return;
    bc58:	09 c0       	rjmp	.+18     	; 0xbc6c <update_splash+0x228>
		
	}
	game.demo_counter++;
    bc5a:	80 91 bf 0b 	lds	r24, 0x0BBF
    bc5e:	90 91 c0 0b 	lds	r25, 0x0BC0
    bc62:	01 96       	adiw	r24, 0x01	; 1
    bc64:	90 93 c0 0b 	sts	0x0BC0, r25
    bc68:	80 93 bf 0b 	sts	0x0BBF, r24
#endif
}
    bc6c:	df 91       	pop	r29
    bc6e:	cf 91       	pop	r28
    bc70:	0f 91       	pop	r16
    bc72:	08 95       	ret

0000bc74 <update_join_net_game>:
	}
	Print(9, 23, (char*) strCancelHandle);
}

void update_join_net_game(JoyPadState* p1)
{
    bc74:	ef 92       	push	r14
    bc76:	ff 92       	push	r15
    bc78:	0f 93       	push	r16
    bc7a:	cf 93       	push	r28
    bc7c:	df 93       	push	r29
    bc7e:	7c 01       	movw	r14, r24
	if (wifi_status != WIFI_OK)
    bc80:	80 91 e7 0b 	lds	r24, 0x0BE7
    bc84:	88 23       	and	r24, r24
    bc86:	31 f0       	breq	.+12     	; 0xbc94 <update_join_net_game+0x20>
	{
		if (p1->pressed & BTN_X)
    bc88:	f7 01       	movw	r30, r14
    bc8a:	80 81       	ld	r24, Z
    bc8c:	91 81       	ldd	r25, Z+1	; 0x01
    bc8e:	91 ff       	sbrs	r25, 1
    bc90:	cf c0       	rjmp	.+414    	; 0xbe30 <update_join_net_game+0x1bc>
    bc92:	2f c0       	rjmp	.+94     	; 0xbcf2 <update_join_net_game+0x7e>
			load_splash();
		}
	}
	else
	{
		MapSprite2(0, map_down_arrow, 0);
    bc94:	40 e0       	ldi	r20, 0x00	; 0
    bc96:	61 e8       	ldi	r22, 0x81	; 129
    bc98:	71 e3       	ldi	r23, 0x31	; 49
    bc9a:	80 e0       	ldi	r24, 0x00	; 0
    bc9c:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MapSprite2(1, map_up_arrow, 0);
    bca0:	40 e0       	ldi	r20, 0x00	; 0
    bca2:	6e e7       	ldi	r22, 0x7E	; 126
    bca4:	71 e3       	ldi	r23, 0x31	; 49
    bca6:	81 e0       	ldi	r24, 0x01	; 1
    bca8:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		MoveSprite(0, 8*10 + gameIdIndex*8, 9*8, 1, 1);
    bcac:	60 91 01 01 	lds	r22, 0x0101
    bcb0:	66 0f       	add	r22, r22
    bcb2:	66 0f       	add	r22, r22
    bcb4:	66 0f       	add	r22, r22
    bcb6:	60 5b       	subi	r22, 0xB0	; 176
    bcb8:	01 e0       	ldi	r16, 0x01	; 1
    bcba:	21 e0       	ldi	r18, 0x01	; 1
    bcbc:	48 e4       	ldi	r20, 0x48	; 72
    bcbe:	80 e0       	ldi	r24, 0x00	; 0
    bcc0:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
		MoveSprite(1, 8*10 + gameIdIndex*8, 11*8, 1, 1);
    bcc4:	60 91 01 01 	lds	r22, 0x0101
    bcc8:	66 0f       	add	r22, r22
    bcca:	66 0f       	add	r22, r22
    bccc:	66 0f       	add	r22, r22
    bcce:	60 5b       	subi	r22, 0xB0	; 176
    bcd0:	21 e0       	ldi	r18, 0x01	; 1
    bcd2:	48 e5       	ldi	r20, 0x58	; 88
    bcd4:	81 e0       	ldi	r24, 0x01	; 1
    bcd6:	0e 94 d2 48 	call	0x91a4	; 0x91a4 <MoveSprite>
		LBPrintStr(10, 10, (u8*) gameId, 8);
    bcda:	28 e0       	ldi	r18, 0x08	; 8
    bcdc:	42 e0       	ldi	r20, 0x02	; 2
    bcde:	51 e0       	ldi	r21, 0x01	; 1
    bce0:	6a e0       	ldi	r22, 0x0A	; 10
    bce2:	8a e0       	ldi	r24, 0x0A	; 10
    bce4:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
		if (p1->pressed & BTN_X)
    bce8:	f7 01       	movw	r30, r14
    bcea:	c0 81       	ld	r28, Z
    bcec:	d1 81       	ldd	r29, Z+1	; 0x01
    bcee:	d1 ff       	sbrs	r29, 1
    bcf0:	12 c0       	rjmp	.+36     	; 0xbd16 <update_join_net_game+0xa2>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bcf2:	24 e0       	ldi	r18, 0x04	; 4
    bcf4:	40 91 cf 0f 	lds	r20, 0x0FCF
    bcf8:	60 91 59 0c 	lds	r22, 0x0C59
    bcfc:	80 91 c9 0b 	lds	r24, 0x0BC9
    bd00:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			fade_through();
    bd04:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bd08:	df 91       	pop	r29
    bd0a:	cf 91       	pop	r28
    bd0c:	0f 91       	pop	r16
    bd0e:	ff 90       	pop	r15
    bd10:	ef 90       	pop	r14
		LBPrintStr(10, 10, (u8*) gameId, 8);
		if (p1->pressed & BTN_X)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			fade_through();
			load_splash();
    bd12:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <load_splash>
		}
		else if (select_pressed(p1))
    bd16:	c7 01       	movw	r24, r14
    bd18:	0e 94 fa 59 	call	0xb3f4	; 0xb3f4 <select_pressed>
    bd1c:	88 23       	and	r24, r24
    bd1e:	e1 f1       	breq	.+120    	; 0xbd98 <update_join_net_game+0x124>
		{
			Print(7, 18, (char*) strConnecting);
    bd20:	41 ea       	ldi	r20, 0xA1	; 161
    bd22:	54 e0       	ldi	r21, 0x04	; 4
    bd24:	62 e1       	ldi	r22, 0x12	; 18
    bd26:	70 e0       	ldi	r23, 0x00	; 0
    bd28:	87 e0       	ldi	r24, 0x07	; 7
    bd2a:	90 e0       	ldi	r25, 0x00	; 0
    bd2c:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
			if (joinNetGame((char*)gameId) == WIFI_OK)
    bd30:	82 e0       	ldi	r24, 0x02	; 2
    bd32:	91 e0       	ldi	r25, 0x01	; 1
    bd34:	0e 94 72 4d 	call	0x9ae4	; 0x9ae4 <joinNetGame>
    bd38:	81 11       	cpse	r24, r1
    bd3a:	21 c0       	rjmp	.+66     	; 0xbd7e <update_join_net_game+0x10a>
			{
				player2.netMessage.code = NETJOINED;
    bd3c:	8a e0       	ldi	r24, 0x0A	; 10
    bd3e:	80 93 c9 0f 	sts	0x0FC9, r24
				sendNetMessage(&player2.netMessage);
    bd42:	89 ec       	ldi	r24, 0xC9	; 201
    bd44:	9f e0       	ldi	r25, 0x0F	; 15
    bd46:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <sendNetMessage>
				game.demo_counter = 0;
    bd4a:	10 92 c0 0b 	sts	0x0BC0, r1
    bd4e:	10 92 bf 0b 	sts	0x0BBF, r1
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    bd52:	24 e0       	ldi	r18, 0x04	; 4
    bd54:	40 91 cf 0f 	lds	r20, 0x0FCF
    bd58:	60 91 59 0c 	lds	r22, 0x0C59
    bd5c:	80 91 c9 0b 	lds	r24, 0x0BC9
    bd60:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
				fade_through();
    bd64:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
				load_eeprom(&handles);
    bd68:	86 e9       	ldi	r24, 0x96	; 150
    bd6a:	9b e0       	ldi	r25, 0x0B	; 11
    bd6c:	0e 94 7f 4f 	call	0x9efe	; 0x9efe <load_eeprom>
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bd70:	df 91       	pop	r29
    bd72:	cf 91       	pop	r28
    bd74:	0f 91       	pop	r16
    bd76:	ff 90       	pop	r15
    bd78:	ef 90       	pop	r14
				sendNetMessage(&player2.netMessage);
				game.demo_counter = 0;
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
				fade_through();
				load_eeprom(&handles);
				load_handle_select();
    bd7a:	0c 94 c6 5b 	jmp	0xb78c	; 0xb78c <load_handle_select>
			}
			else
			{
				Print(7, 18, (char*) strNetworkError);
    bd7e:	40 e8       	ldi	r20, 0x80	; 128
    bd80:	54 e0       	ldi	r21, 0x04	; 4
    bd82:	62 e1       	ldi	r22, 0x12	; 18
    bd84:	70 e0       	ldi	r23, 0x00	; 0
    bd86:	87 e0       	ldi	r24, 0x07	; 7
    bd88:	90 e0       	ldi	r25, 0x00	; 0
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
}
    bd8a:	df 91       	pop	r29
    bd8c:	cf 91       	pop	r28
    bd8e:	0f 91       	pop	r16
    bd90:	ff 90       	pop	r15
    bd92:	ef 90       	pop	r14
				load_eeprom(&handles);
				load_handle_select();
			}
			else
			{
				Print(7, 18, (char*) strNetworkError);
    bd94:	0c 94 86 49 	jmp	0x930c	; 0x930c <Print>
			}
		}
		else if ((p1->pressed & BTN_UP))
    bd98:	c4 ff       	sbrs	r28, 4
    bd9a:	13 c0       	rjmp	.+38     	; 0xbdc2 <update_join_net_game+0x14e>
		{
			gameId[gameIdIndex]--;
    bd9c:	e0 91 01 01 	lds	r30, 0x0101
    bda0:	f0 e0       	ldi	r31, 0x00	; 0
    bda2:	ee 5f       	subi	r30, 0xFE	; 254
    bda4:	fe 4f       	sbci	r31, 0xFE	; 254
    bda6:	80 81       	ld	r24, Z
			if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bda8:	95 ec       	ldi	r25, 0xC5	; 197
    bdaa:	98 0f       	add	r25, r24
    bdac:	97 30       	cpi	r25, 0x07	; 7
    bdae:	10 f0       	brcs	.+4      	; 0xbdb4 <update_join_net_game+0x140>
				Print(7, 18, (char*) strNetworkError);
			}
		}
		else if ((p1->pressed & BTN_UP))
		{
			gameId[gameIdIndex]--;
    bdb0:	81 50       	subi	r24, 0x01	; 1
    bdb2:	01 c0       	rjmp	.+2      	; 0xbdb6 <update_join_net_game+0x142>
			if ((gameId[gameIdIndex] < 'A') && (gameId[gameIdIndex] > '9')) gameId[gameIdIndex] = '9';
    bdb4:	89 e3       	ldi	r24, 0x39	; 57
    bdb6:	80 83       	st	Z, r24
			if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
    bdb8:	80 81       	ld	r24, Z
    bdba:	80 33       	cpi	r24, 0x30	; 48
    bdbc:	58 f5       	brcc	.+86     	; 0xbe14 <update_join_net_game+0x1a0>
    bdbe:	8a e5       	ldi	r24, 0x5A	; 90
    bdc0:	14 c0       	rjmp	.+40     	; 0xbdea <update_join_net_game+0x176>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_DOWN))
    bdc2:	c5 ff       	sbrs	r28, 5
    bdc4:	14 c0       	rjmp	.+40     	; 0xbdee <update_join_net_game+0x17a>
		{
			gameId[gameIdIndex]++;
    bdc6:	e0 91 01 01 	lds	r30, 0x0101
    bdca:	f0 e0       	ldi	r31, 0x00	; 0
    bdcc:	ee 5f       	subi	r30, 0xFE	; 254
    bdce:	fe 4f       	sbci	r31, 0xFE	; 254
    bdd0:	80 81       	ld	r24, Z
			if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    bdd2:	97 ec       	ldi	r25, 0xC7	; 199
    bdd4:	98 0f       	add	r25, r24
    bdd6:	97 30       	cpi	r25, 0x07	; 7
    bdd8:	10 f0       	brcs	.+4      	; 0xbdde <update_join_net_game+0x16a>
			if (gameId[gameIdIndex] < '0') gameId[gameIdIndex] = 'Z';
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_DOWN))
		{
			gameId[gameIdIndex]++;
    bdda:	8f 5f       	subi	r24, 0xFF	; 255
    bddc:	01 c0       	rjmp	.+2      	; 0xbde0 <update_join_net_game+0x16c>
			if ((gameId[gameIdIndex] > '9') && (gameId[gameIdIndex] < 'A')) gameId[gameIdIndex] = 'A';
    bdde:	81 e4       	ldi	r24, 0x41	; 65
    bde0:	80 83       	st	Z, r24
			if (gameId[gameIdIndex] > 'Z') gameId[gameIdIndex] = '0';
    bde2:	80 81       	ld	r24, Z
    bde4:	8b 35       	cpi	r24, 0x5B	; 91
    bde6:	b0 f0       	brcs	.+44     	; 0xbe14 <update_join_net_game+0x1a0>
    bde8:	80 e3       	ldi	r24, 0x30	; 48
    bdea:	80 83       	st	Z, r24
    bdec:	13 c0       	rjmp	.+38     	; 0xbe14 <update_join_net_game+0x1a0>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_RIGHT))
    bdee:	c7 ff       	sbrs	r28, 7
    bdf0:	07 c0       	rjmp	.+14     	; 0xbe00 <update_join_net_game+0x18c>
		{
			gameIdIndex++;
    bdf2:	80 91 01 01 	lds	r24, 0x0101
    bdf6:	8f 5f       	subi	r24, 0xFF	; 255
			if (gameIdIndex > 7) gameIdIndex = 7;
    bdf8:	88 30       	cpi	r24, 0x08	; 8
    bdfa:	50 f0       	brcs	.+20     	; 0xbe10 <update_join_net_game+0x19c>
    bdfc:	87 e0       	ldi	r24, 0x07	; 7
    bdfe:	08 c0       	rjmp	.+16     	; 0xbe10 <update_join_net_game+0x19c>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
		else if ((p1->pressed & BTN_LEFT))
    be00:	c6 ff       	sbrs	r28, 6
    be02:	16 c0       	rjmp	.+44     	; 0xbe30 <update_join_net_game+0x1bc>
		{
			gameIdIndex--;
    be04:	80 91 01 01 	lds	r24, 0x0101
    be08:	81 50       	subi	r24, 0x01	; 1
			if (gameIdIndex < 2) gameIdIndex= 2;
    be0a:	82 30       	cpi	r24, 0x02	; 2
    be0c:	08 f4       	brcc	.+2      	; 0xbe10 <update_join_net_game+0x19c>
    be0e:	82 e0       	ldi	r24, 0x02	; 2
    be10:	80 93 01 01 	sts	0x0101, r24
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    be14:	24 e0       	ldi	r18, 0x04	; 4
    be16:	40 91 cf 0f 	lds	r20, 0x0FCF
    be1a:	60 91 59 0c 	lds	r22, 0x0C59
    be1e:	80 91 c9 0b 	lds	r24, 0x0BC9
		}
	}
}
    be22:	df 91       	pop	r29
    be24:	cf 91       	pop	r28
    be26:	0f 91       	pop	r16
    be28:	ff 90       	pop	r15
    be2a:	ef 90       	pop	r14
		}
		else if ((p1->pressed & BTN_LEFT))
		{
			gameIdIndex--;
			if (gameIdIndex < 2) gameIdIndex= 2;
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    be2c:	0c 94 da 4c 	jmp	0x99b4	; 0x99b4 <LBPlaySound>
		}
	}
}
    be30:	df 91       	pop	r29
    be32:	cf 91       	pop	r28
    be34:	0f 91       	pop	r16
    be36:	ff 90       	pop	r15
    be38:	ef 90       	pop	r14
    be3a:	08 95       	ret

0000be3c <button_map>:
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    be3c:	00 97       	sbiw	r24, 0x00	; 0
    be3e:	41 f0       	breq	.+16     	; 0xbe50 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    be40:	81 30       	cpi	r24, 0x01	; 1
    be42:	91 05       	cpc	r25, r1
    be44:	41 f0       	breq	.+16     	; 0xbe56 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    be46:	82 30       	cpi	r24, 0x02	; 2
    be48:	91 05       	cpc	r25, r1
    be4a:	41 f0       	breq	.+16     	; 0xbe5c <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    be4c:	03 97       	sbiw	r24, 0x03	; 3
    be4e:	49 f0       	breq	.+18     	; 0xbe62 <button_map+0x26>
}
#endif

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    be50:	80 e1       	ldi	r24, 0x10	; 16
    be52:	90 e0       	ldi	r25, 0x00	; 0
    be54:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    be56:	80 e2       	ldi	r24, 0x20	; 32
    be58:	90 e0       	ldi	r25, 0x00	; 0
    be5a:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    be5c:	80 e4       	ldi	r24, 0x40	; 64
    be5e:	90 e0       	ldi	r25, 0x00	; 0
    be60:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    be62:	80 e8       	ldi	r24, 0x80	; 128
    be64:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    be66:	08 95       	ret

0000be68 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    be68:	8f 92       	push	r8
    be6a:	9f 92       	push	r9
    be6c:	af 92       	push	r10
    be6e:	bf 92       	push	r11
    be70:	cf 92       	push	r12
    be72:	df 92       	push	r13
    be74:	ef 92       	push	r14
    be76:	ff 92       	push	r15
    be78:	0f 93       	push	r16
    be7a:	1f 93       	push	r17
    be7c:	cf 93       	push	r28
    be7e:	df 93       	push	r29
    be80:	f8 2e       	mov	r15, r24
    be82:	e6 2e       	mov	r14, r22
    be84:	d4 2e       	mov	r13, r20
    be86:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    be88:	8f 85       	ldd	r24, Y+15	; 0x0f
    be8a:	88 23       	and	r24, r24
    be8c:	09 f4       	brne	.+2      	; 0xbe90 <crash_and_turn+0x28>
    be8e:	aa c0       	rjmp	.+340    	; 0xbfe4 <crash_and_turn+0x17c>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    be90:	f8 01       	movw	r30, r16
    be92:	c4 80       	ldd	r12, Z+4	; 0x04
    be94:	c4 fe       	sbrs	r12, 4
    be96:	23 c0       	rjmp	.+70     	; 0xbede <crash_and_turn+0x76>
    be98:	fe e1       	ldi	r31, 0x1E	; 30
    be9a:	6f 02       	muls	r22, r31
    be9c:	40 01       	movw	r8, r0
    be9e:	11 24       	eor	r1, r1
    bea0:	af 2c       	mov	r10, r15
    bea2:	bb 24       	eor	r11, r11
    bea4:	a7 fc       	sbrc	r10, 7
    bea6:	b0 94       	com	r11
    bea8:	c4 01       	movw	r24, r8
    beaa:	8a 0d       	add	r24, r10
    beac:	9b 1d       	adc	r25, r11
    beae:	01 97       	sbiw	r24, 0x01	; 1
    beb0:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    beb4:	81 11       	cpse	r24, r1
    beb6:	13 c0       	rjmp	.+38     	; 0xbede <crash_and_turn+0x76>
    beb8:	c4 01       	movw	r24, r8
    beba:	8a 0d       	add	r24, r10
    bebc:	9b 1d       	adc	r25, r11
    bebe:	4d 96       	adiw	r24, 0x1d	; 29
    bec0:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bec4:	81 11       	cpse	r24, r1
    bec6:	0b c0       	rjmp	.+22     	; 0xbede <crash_and_turn+0x76>
    bec8:	c4 01       	movw	r24, r8
    beca:	8a 0d       	add	r24, r10
    becc:	9b 1d       	adc	r25, r11
    bece:	cb 96       	adiw	r24, 0x3b	; 59
    bed0:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bed4:	81 11       	cpse	r24, r1
    bed6:	03 c0       	rjmp	.+6      	; 0xbede <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    bed8:	80 e4       	ldi	r24, 0x40	; 64
    beda:	90 e0       	ldi	r25, 0x00	; 0
    bedc:	6f c0       	rjmp	.+222    	; 0xbfbc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    bede:	c6 fe       	sbrs	r12, 6
    bee0:	23 c0       	rjmp	.+70     	; 0xbf28 <crash_and_turn+0xc0>
    bee2:	8e 2d       	mov	r24, r14
    bee4:	99 27       	eor	r25, r25
    bee6:	87 fd       	sbrc	r24, 7
    bee8:	90 95       	com	r25
    beea:	02 96       	adiw	r24, 0x02	; 2
    beec:	2e e1       	ldi	r18, 0x1E	; 30
    beee:	28 9f       	mul	r18, r24
    bef0:	50 01       	movw	r10, r0
    bef2:	29 9f       	mul	r18, r25
    bef4:	b0 0c       	add	r11, r0
    bef6:	11 24       	eor	r1, r1
    bef8:	af 0c       	add	r10, r15
    befa:	b1 1c       	adc	r11, r1
    befc:	f7 fc       	sbrc	r15, 7
    befe:	ba 94       	dec	r11
    bf00:	c5 01       	movw	r24, r10
    bf02:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf06:	81 11       	cpse	r24, r1
    bf08:	0f c0       	rjmp	.+30     	; 0xbf28 <crash_and_turn+0xc0>
    bf0a:	c5 01       	movw	r24, r10
    bf0c:	01 96       	adiw	r24, 0x01	; 1
    bf0e:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf12:	81 11       	cpse	r24, r1
    bf14:	09 c0       	rjmp	.+18     	; 0xbf28 <crash_and_turn+0xc0>
    bf16:	c5 01       	movw	r24, r10
    bf18:	02 96       	adiw	r24, 0x02	; 2
    bf1a:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf1e:	81 11       	cpse	r24, r1
    bf20:	03 c0       	rjmp	.+6      	; 0xbf28 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    bf22:	80 e2       	ldi	r24, 0x20	; 32
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	4a c0       	rjmp	.+148    	; 0xbfbc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    bf28:	c5 fe       	sbrs	r12, 5
    bf2a:	24 c0       	rjmp	.+72     	; 0xbf74 <crash_and_turn+0x10c>
    bf2c:	fe 2d       	mov	r31, r14
    bf2e:	8e e1       	ldi	r24, 0x1E	; 30
    bf30:	f8 02       	muls	r31, r24
    bf32:	40 01       	movw	r8, r0
    bf34:	11 24       	eor	r1, r1
    bf36:	af 2c       	mov	r10, r15
    bf38:	bb 24       	eor	r11, r11
    bf3a:	a7 fc       	sbrc	r10, 7
    bf3c:	b0 94       	com	r11
    bf3e:	c4 01       	movw	r24, r8
    bf40:	8a 0d       	add	r24, r10
    bf42:	9b 1d       	adc	r25, r11
    bf44:	02 96       	adiw	r24, 0x02	; 2
    bf46:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf4a:	81 11       	cpse	r24, r1
    bf4c:	13 c0       	rjmp	.+38     	; 0xbf74 <crash_and_turn+0x10c>
    bf4e:	c4 01       	movw	r24, r8
    bf50:	8a 0d       	add	r24, r10
    bf52:	9b 1d       	adc	r25, r11
    bf54:	80 96       	adiw	r24, 0x20	; 32
    bf56:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf5a:	81 11       	cpse	r24, r1
    bf5c:	0b c0       	rjmp	.+22     	; 0xbf74 <crash_and_turn+0x10c>
    bf5e:	c4 01       	movw	r24, r8
    bf60:	8a 0d       	add	r24, r10
    bf62:	9b 1d       	adc	r25, r11
    bf64:	ce 96       	adiw	r24, 0x3e	; 62
    bf66:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf6a:	81 11       	cpse	r24, r1
    bf6c:	03 c0       	rjmp	.+6      	; 0xbf74 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    bf6e:	80 e8       	ldi	r24, 0x80	; 128
    bf70:	90 e0       	ldi	r25, 0x00	; 0
    bf72:	24 c0       	rjmp	.+72     	; 0xbfbc <crash_and_turn+0x154>
			recoil_sprite(&player->netMessage.shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    bf74:	c7 fe       	sbrs	r12, 7
    bf76:	2b c0       	rjmp	.+86     	; 0xbfce <crash_and_turn+0x166>
    bf78:	8e 2d       	mov	r24, r14
    bf7a:	99 27       	eor	r25, r25
    bf7c:	87 fd       	sbrc	r24, 7
    bf7e:	90 95       	com	r25
    bf80:	01 97       	sbiw	r24, 0x01	; 1
    bf82:	2e e1       	ldi	r18, 0x1E	; 30
    bf84:	28 9f       	mul	r18, r24
    bf86:	50 01       	movw	r10, r0
    bf88:	29 9f       	mul	r18, r25
    bf8a:	b0 0c       	add	r11, r0
    bf8c:	11 24       	eor	r1, r1
    bf8e:	af 0c       	add	r10, r15
    bf90:	b1 1c       	adc	r11, r1
    bf92:	f7 fc       	sbrc	r15, 7
    bf94:	ba 94       	dec	r11
    bf96:	c5 01       	movw	r24, r10
    bf98:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bf9c:	81 11       	cpse	r24, r1
    bf9e:	17 c0       	rjmp	.+46     	; 0xbfce <crash_and_turn+0x166>
    bfa0:	c5 01       	movw	r24, r10
    bfa2:	01 96       	adiw	r24, 0x01	; 1
    bfa4:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bfa8:	81 11       	cpse	r24, r1
    bfaa:	11 c0       	rjmp	.+34     	; 0xbfce <crash_and_turn+0x166>
    bfac:	c5 01       	movw	r24, r10
    bfae:	02 96       	adiw	r24, 0x02	; 2
    bfb0:	0e 94 36 53 	call	0xa66c	; 0xa66c <solid_tile>
    bfb4:	81 11       	cpse	r24, r1
    bfb6:	0b c0       	rjmp	.+22     	; 0xbfce <crash_and_turn+0x166>
		{
			p->held = BTN_UP;
    bfb8:	80 e1       	ldi	r24, 0x10	; 16
    bfba:	90 e0       	ldi	r25, 0x00	; 0
    bfbc:	f8 01       	movw	r30, r16
    bfbe:	95 83       	std	Z+5, r25	; 0x05
    bfc0:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->netMessage.shared);
    bfc2:	ce 01       	movw	r24, r28
    bfc4:	8e 58       	subi	r24, 0x8E	; 142
    bfc6:	9f 4f       	sbci	r25, 0xFF	; 255
    bfc8:	0e 94 94 52 	call	0xa528	; 0xa528 <recoil_sprite>
			recoiled = 0;
    bfcc:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    bfce:	f8 01       	movw	r30, r16
    bfd0:	24 81       	ldd	r18, Z+4	; 0x04
    bfd2:	35 81       	ldd	r19, Z+5	; 0x05
    bfd4:	8b 89       	ldd	r24, Y+19	; 0x13
    bfd6:	9c 89       	ldd	r25, Y+20	; 0x14
    bfd8:	82 23       	and	r24, r18
    bfda:	93 23       	and	r25, r19
    bfdc:	89 2b       	or	r24, r25
    bfde:	11 f0       	breq	.+4      	; 0xbfe4 <crash_and_turn+0x17c>
		{
			player->feeling_my_way = 0;
    bfe0:	1f 86       	std	Y+15, r1	; 0x0f
    bfe2:	1c c0       	rjmp	.+56     	; 0xc01c <crash_and_turn+0x1b4>
			recoiled = 0;
		}
	}
	if (recoiled)
    bfe4:	dd 20       	and	r13, r13
    bfe6:	d1 f0       	breq	.+52     	; 0xc01c <crash_and_turn+0x1b4>
	{
		if (p->held & BTN_LEFT)
    bfe8:	f8 01       	movw	r30, r16
    bfea:	84 81       	ldd	r24, Z+4	; 0x04
    bfec:	86 ff       	sbrs	r24, 6
    bfee:	03 c0       	rjmp	.+6      	; 0xbff6 <crash_and_turn+0x18e>
		{
			p->held = BTN_UP;
    bff0:	80 e1       	ldi	r24, 0x10	; 16
    bff2:	90 e0       	ldi	r25, 0x00	; 0
    bff4:	0f c0       	rjmp	.+30     	; 0xc014 <crash_and_turn+0x1ac>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    bff6:	84 ff       	sbrs	r24, 4
    bff8:	03 c0       	rjmp	.+6      	; 0xc000 <crash_and_turn+0x198>
		{
			p->held = BTN_RIGHT;
    bffa:	80 e8       	ldi	r24, 0x80	; 128
    bffc:	90 e0       	ldi	r25, 0x00	; 0
    bffe:	09 c0       	rjmp	.+18     	; 0xc012 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    c000:	87 ff       	sbrs	r24, 7
    c002:	03 c0       	rjmp	.+6      	; 0xc00a <crash_and_turn+0x1a2>
		{
			p->held = BTN_DOWN;
    c004:	80 e2       	ldi	r24, 0x20	; 32
    c006:	90 e0       	ldi	r25, 0x00	; 0
    c008:	04 c0       	rjmp	.+8      	; 0xc012 <crash_and_turn+0x1aa>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    c00a:	85 ff       	sbrs	r24, 5
    c00c:	07 c0       	rjmp	.+14     	; 0xc01c <crash_and_turn+0x1b4>
		{
			p->held = BTN_LEFT;
    c00e:	80 e4       	ldi	r24, 0x40	; 64
    c010:	90 e0       	ldi	r25, 0x00	; 0
    c012:	f8 01       	movw	r30, r16
    c014:	95 83       	std	Z+5, r25	; 0x05
    c016:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    c018:	81 e0       	ldi	r24, 0x01	; 1
    c01a:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c01c:	8b 89       	ldd	r24, Y+19	; 0x13
    c01e:	9c 89       	ldd	r25, Y+20	; 0x14
    c020:	80 31       	cpi	r24, 0x10	; 16
    c022:	91 05       	cpc	r25, r1
    c024:	19 f0       	breq	.+6      	; 0xc02c <crash_and_turn+0x1c4>
    c026:	80 32       	cpi	r24, 0x20	; 32
    c028:	91 05       	cpc	r25, r1
    c02a:	19 f4       	brne	.+6      	; 0xc032 <crash_and_turn+0x1ca>
    c02c:	29 8d       	ldd	r18, Y+25	; 0x19
    c02e:	e2 16       	cp	r14, r18
    c030:	59 f0       	breq	.+22     	; 0xc048 <crash_and_turn+0x1e0>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c032:	80 34       	cpi	r24, 0x40	; 64
    c034:	91 05       	cpc	r25, r1
    c036:	19 f0       	breq	.+6      	; 0xc03e <crash_and_turn+0x1d6>
    c038:	80 38       	cpi	r24, 0x80	; 128
    c03a:	91 05       	cpc	r25, r1
    c03c:	39 f4       	brne	.+14     	; 0xc04c <crash_and_turn+0x1e4>
    c03e:	81 e0       	ldi	r24, 0x01	; 1
    c040:	99 8d       	ldd	r25, Y+25	; 0x19
    c042:	f9 12       	cpse	r15, r25
    c044:	03 c0       	rjmp	.+6      	; 0xc04c <crash_and_turn+0x1e4>
    c046:	03 c0       	rjmp	.+6      	; 0xc04e <crash_and_turn+0x1e6>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c048:	81 e0       	ldi	r24, 0x01	; 1
    c04a:	01 c0       	rjmp	.+2      	; 0xc04e <crash_and_turn+0x1e6>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c04c:	80 e0       	ldi	r24, 0x00	; 0
}
    c04e:	df 91       	pop	r29
    c050:	cf 91       	pop	r28
    c052:	1f 91       	pop	r17
    c054:	0f 91       	pop	r16
    c056:	ff 90       	pop	r15
    c058:	ef 90       	pop	r14
    c05a:	df 90       	pop	r13
    c05c:	cf 90       	pop	r12
    c05e:	bf 90       	pop	r11
    c060:	af 90       	pop	r10
    c062:	9f 90       	pop	r9
    c064:	8f 90       	pop	r8
    c066:	08 95       	ret

0000c068 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    c068:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c06a:	26 2f       	mov	r18, r22
    c06c:	33 27       	eor	r19, r19
    c06e:	27 fd       	sbrc	r18, 7
    c070:	30 95       	com	r19
    c072:	37 ff       	sbrs	r19, 7
    c074:	03 c0       	rjmp	.+6      	; 0xc07c <get_cpu_goal_direction+0x14>
    c076:	31 95       	neg	r19
    c078:	21 95       	neg	r18
    c07a:	31 09       	sbc	r19, r1
    c07c:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c07e:	24 2f       	mov	r18, r20
    c080:	33 27       	eor	r19, r19
    c082:	27 fd       	sbrc	r18, 7
    c084:	30 95       	com	r19
    c086:	37 ff       	sbrs	r19, 7
    c088:	03 c0       	rjmp	.+6      	; 0xc090 <get_cpu_goal_direction+0x28>
    c08a:	31 95       	neg	r19
    c08c:	21 95       	neg	r18
    c08e:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    c090:	80 89       	ldd	r24, Z+16	; 0x10
    c092:	81 11       	cpse	r24, r1
    c094:	08 c0       	rjmp	.+16     	; 0xc0a6 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    c096:	29 17       	cp	r18, r25
    c098:	1c f4       	brge	.+6      	; 0xc0a0 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    c09a:	16 16       	cp	r1, r22
    c09c:	94 f0       	brlt	.+36     	; 0xc0c2 <get_cpu_goal_direction+0x5a>
    c09e:	0b c0       	rjmp	.+22     	; 0xc0b6 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    c0a0:	14 16       	cp	r1, r20
    c0a2:	94 f0       	brlt	.+36     	; 0xc0c8 <get_cpu_goal_direction+0x60>
    c0a4:	0b c0       	rjmp	.+22     	; 0xc0bc <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    c0a6:	29 17       	cp	r18, r25
    c0a8:	1c f4       	brge	.+6      	; 0xc0b0 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    c0aa:	16 16       	cp	r1, r22
    c0ac:	24 f0       	brlt	.+8      	; 0xc0b6 <get_cpu_goal_direction+0x4e>
    c0ae:	09 c0       	rjmp	.+18     	; 0xc0c2 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    c0b0:	14 16       	cp	r1, r20
    c0b2:	24 f0       	brlt	.+8      	; 0xc0bc <get_cpu_goal_direction+0x54>
    c0b4:	09 c0       	rjmp	.+18     	; 0xc0c8 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    c0b6:	80 e4       	ldi	r24, 0x40	; 64
    c0b8:	90 e0       	ldi	r25, 0x00	; 0
    c0ba:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    c0bc:	80 e1       	ldi	r24, 0x10	; 16
    c0be:	90 e0       	ldi	r25, 0x00	; 0
    c0c0:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    c0c2:	80 e8       	ldi	r24, 0x80	; 128
    c0c4:	90 e0       	ldi	r25, 0x00	; 0
    c0c6:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    c0c8:	80 e2       	ldi	r24, 0x20	; 32
    c0ca:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    c0cc:	08 95       	ret

0000c0ce <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c0ce:	2f 92       	push	r2
    c0d0:	3f 92       	push	r3
    c0d2:	4f 92       	push	r4
    c0d4:	5f 92       	push	r5
    c0d6:	6f 92       	push	r6
    c0d8:	7f 92       	push	r7
    c0da:	8f 92       	push	r8
    c0dc:	9f 92       	push	r9
    c0de:	af 92       	push	r10
    c0e0:	bf 92       	push	r11
    c0e2:	cf 92       	push	r12
    c0e4:	df 92       	push	r13
    c0e6:	ef 92       	push	r14
    c0e8:	ff 92       	push	r15
    c0ea:	0f 93       	push	r16
    c0ec:	1f 93       	push	r17
    c0ee:	cf 93       	push	r28
    c0f0:	df 93       	push	r29
    c0f2:	00 d0       	rcall	.+0      	; 0xc0f4 <get_cpu_joypad_state+0x26>
    c0f4:	00 d0       	rcall	.+0      	; 0xc0f6 <get_cpu_joypad_state+0x28>
    c0f6:	00 d0       	rcall	.+0      	; 0xc0f8 <get_cpu_joypad_state+0x2a>
    c0f8:	cd b7       	in	r28, 0x3d	; 61
    c0fa:	de b7       	in	r29, 0x3e	; 62
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c0fc:	3b 01       	movw	r6, r22
    c0fe:	26 e7       	ldi	r18, 0x76	; 118
    c100:	62 0e       	add	r6, r18
    c102:	71 1c       	adc	r7, r1
    c104:	d3 01       	movw	r26, r6
    c106:	0d 91       	ld	r16, X+
    c108:	1c 91       	ld	r17, X
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c10a:	fb 01       	movw	r30, r22
    c10c:	e8 58       	subi	r30, 0x88	; 136
    c10e:	ff 4f       	sbci	r31, 0xFF	; 255
    c110:	fc 83       	std	Y+4, r31	; 0x04
    c112:	eb 83       	std	Y+3, r30	; 0x03
    c114:	40 80       	ld	r4, Z
    c116:	51 80       	ldd	r5, Z+1	; 0x01
	player_x = player->netMessage.shared.x / 800;
    c118:	5c 01       	movw	r10, r24
    c11a:	f6 e7       	ldi	r31, 0x76	; 118
    c11c:	af 0e       	add	r10, r31
    c11e:	b1 1c       	adc	r11, r1
    c120:	d5 01       	movw	r26, r10
    c122:	2d 90       	ld	r2, X+
    c124:	3c 90       	ld	r3, X
	player_y =  player->netMessage.shared.y / 800 - 3;
    c126:	4c 01       	movw	r8, r24
    c128:	b8 e7       	ldi	r27, 0x78	; 120
    c12a:	8b 0e       	add	r8, r27
    c12c:	91 1c       	adc	r9, r1
    c12e:	f4 01       	movw	r30, r8
    c130:	01 90       	ld	r0, Z+
    c132:	f0 81       	ld	r31, Z
    c134:	e0 2d       	mov	r30, r0
    c136:	fa 83       	std	Y+2, r31	; 0x02
    c138:	e9 83       	std	Y+1, r30	; 0x01
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c13a:	dc 01       	movw	r26, r24
    c13c:	1a 96       	adiw	r26, 0x0a	; 10
    c13e:	2c 91       	ld	r18, X
    c140:	21 11       	cpse	r18, r1
    c142:	04 c0       	rjmp	.+8      	; 0xc14c <get_cpu_joypad_state+0x7e>
	{
		p->held = 0;
    c144:	fa 01       	movw	r30, r20
    c146:	15 82       	std	Z+5, r1	; 0x05
    c148:	14 82       	std	Z+4, r1	; 0x04
		return;
    c14a:	dc c1       	rjmp	.+952    	; 0xc504 <get_cpu_joypad_state+0x436>
    c14c:	6a 01       	movw	r12, r20
    c14e:	7b 01       	movw	r14, r22
    c150:	9e 83       	std	Y+6, r25	; 0x06
    c152:	8d 83       	std	Y+5, r24	; 0x05
	}
	
	// Shot
	if (shoot_pressed(p))
    c154:	ca 01       	movw	r24, r20
    c156:	0e 94 0f 51 	call	0xa21e	; 0xa21e <shoot_pressed>
    c15a:	88 23       	and	r24, r24
    c15c:	19 f0       	breq	.+6      	; 0xc164 <get_cpu_joypad_state+0x96>
	{
		p->pressed = 0;
    c15e:	d6 01       	movw	r26, r12
    c160:	1d 92       	st	X+, r1
    c162:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c164:	20 91 0b 01 	lds	r18, 0x010B
    c168:	30 91 0c 01 	lds	r19, 0x010C
    c16c:	c9 01       	movw	r24, r18
    c16e:	6a e0       	ldi	r22, 0x0A	; 10
    c170:	70 e0       	ldi	r23, 0x00	; 0
    c172:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c176:	89 2b       	or	r24, r25
    c178:	51 f4       	brne	.+20     	; 0xc18e <get_cpu_joypad_state+0xc0>
    c17a:	ed 81       	ldd	r30, Y+5	; 0x05
    c17c:	fe 81       	ldd	r31, Y+6	; 0x06
    c17e:	82 85       	ldd	r24, Z+10	; 0x0a
    c180:	83 33       	cpi	r24, 0x33	; 51
    c182:	28 f0       	brcs	.+10     	; 0xc18e <get_cpu_joypad_state+0xc0>
	{
		p->pressed = BTN_B;
    c184:	81 e0       	ldi	r24, 0x01	; 1
    c186:	90 e0       	ldi	r25, 0x00	; 0
    c188:	d6 01       	movw	r26, r12
    c18a:	8d 93       	st	X+, r24
    c18c:	9c 93       	st	X, r25
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c18e:	c9 01       	movw	r24, r18
    c190:	64 eb       	ldi	r22, 0xB4	; 180
    c192:	70 e0       	ldi	r23, 0x00	; 0
    c194:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c198:	89 2b       	or	r24, r25
    c19a:	49 f0       	breq	.+18     	; 0xc1ae <get_cpu_joypad_state+0xe0>
    c19c:	ed 81       	ldd	r30, Y+5	; 0x05
    c19e:	fe 81       	ldd	r31, Y+6	; 0x06
    c1a0:	82 85       	ldd	r24, Z+10	; 0x0a
    c1a2:	8a 30       	cpi	r24, 0x0A	; 10
    c1a4:	21 f0       	breq	.+8      	; 0xc1ae <get_cpu_joypad_state+0xe0>
    c1a6:	82 8d       	ldd	r24, Z+26	; 0x1a
    c1a8:	88 23       	and	r24, r24
    c1aa:	09 f4       	brne	.+2      	; 0xc1ae <get_cpu_joypad_state+0xe0>
    c1ac:	5a c0       	rjmp	.+180    	; 0xc262 <get_cpu_joypad_state+0x194>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c1ae:	20 e2       	ldi	r18, 0x20	; 32
    c1b0:	33 e0       	ldi	r19, 0x03	; 3
    c1b2:	c8 01       	movw	r24, r16
    c1b4:	b9 01       	movw	r22, r18
    c1b6:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c1ba:	16 2f       	mov	r17, r22
	goal_y = other_player->netMessage.shared.y / 800 - 3;
    c1bc:	c2 01       	movw	r24, r4
    c1be:	b9 01       	movw	r22, r18
    c1c0:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c1c4:	46 2f       	mov	r20, r22
	player_x = player->netMessage.shared.x / 800;
    c1c6:	c1 01       	movw	r24, r2
    c1c8:	b9 01       	movw	r22, r18
    c1ca:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
	player_y =  player->netMessage.shared.y / 800 - 3;
	distance_x = goal_x - player_x;
    c1ce:	e1 2f       	mov	r30, r17
    c1d0:	e6 1b       	sub	r30, r22
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
	goal_y = other_player->netMessage.shared.y / 800 - 3;
	player_x = player->netMessage.shared.x / 800;
	player_y =  player->netMessage.shared.y / 800 - 3;
    c1d2:	89 81       	ldd	r24, Y+1	; 0x01
    c1d4:	9a 81       	ldd	r25, Y+2	; 0x02
    c1d6:	b9 01       	movw	r22, r18
    c1d8:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c1dc:	0d ef       	ldi	r16, 0xFD	; 253
    c1de:	04 0f       	add	r16, r20
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c1e0:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c1e2:	ad 81       	ldd	r26, Y+5	; 0x05
    c1e4:	be 81       	ldd	r27, Y+6	; 0x06
    c1e6:	5a 96       	adiw	r26, 0x1a	; 26
    c1e8:	1c 92       	st	X, r1
    c1ea:	5a 97       	sbiw	r26, 0x1a	; 26
		player->feeling_my_way = 0;
    c1ec:	1f 96       	adiw	r26, 0x0f	; 15
    c1ee:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c1f0:	82 e0       	ldi	r24, 0x02	; 2
    c1f2:	8e 0f       	add	r24, r30
    c1f4:	85 30       	cpi	r24, 0x05	; 5
    c1f6:	c0 f4       	brcc	.+48     	; 0xc228 <get_cpu_joypad_state+0x15a>
    c1f8:	4e 3f       	cpi	r20, 0xFE	; 254
    c1fa:	b4 f0       	brlt	.+44     	; 0xc228 <get_cpu_joypad_state+0x15a>
    c1fc:	43 30       	cpi	r20, 0x03	; 3
    c1fe:	a4 f4       	brge	.+40     	; 0xc228 <get_cpu_joypad_state+0x15a>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c200:	64 e0       	ldi	r22, 0x04	; 4
    c202:	80 e0       	ldi	r24, 0x00	; 0
    c204:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    c208:	90 e0       	ldi	r25, 0x00	; 0
    c20a:	0e 94 1e 5f 	call	0xbe3c	; 0xbe3c <button_map>
    c20e:	ed 81       	ldd	r30, Y+5	; 0x05
    c210:	fe 81       	ldd	r31, Y+6	; 0x06
    c212:	94 8b       	std	Z+20, r25	; 0x14
    c214:	83 8b       	std	Z+19, r24	; 0x13
			player->goal = LBRandom(5, 18);
    c216:	62 e1       	ldi	r22, 0x12	; 18
    c218:	85 e0       	ldi	r24, 0x05	; 5
    c21a:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    c21e:	ad 81       	ldd	r26, Y+5	; 0x05
    c220:	be 81       	ldd	r27, Y+6	; 0x06
    c222:	59 96       	adiw	r26, 0x19	; 25
    c224:	8c 93       	st	X, r24
    c226:	14 c0       	rjmp	.+40     	; 0xc250 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    c228:	6e 2f       	mov	r22, r30
    c22a:	8d 81       	ldd	r24, Y+5	; 0x05
    c22c:	9e 81       	ldd	r25, Y+6	; 0x06
    c22e:	0e 94 34 60 	call	0xc068	; 0xc068 <get_cpu_goal_direction>
    c232:	ed 81       	ldd	r30, Y+5	; 0x05
    c234:	fe 81       	ldd	r31, Y+6	; 0x06
    c236:	94 8b       	std	Z+20, r25	; 0x14
    c238:	83 8b       	std	Z+19, r24	; 0x13
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c23a:	80 31       	cpi	r24, 0x10	; 16
    c23c:	91 05       	cpc	r25, r1
    c23e:	21 f0       	breq	.+8      	; 0xc248 <get_cpu_joypad_state+0x17a>
    c240:	80 97       	sbiw	r24, 0x20	; 32
    c242:	11 f0       	breq	.+4      	; 0xc248 <get_cpu_joypad_state+0x17a>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->netMessage.shared.x / 800;
    c244:	11 8f       	std	Z+25, r17	; 0x19
    c246:	04 c0       	rjmp	.+8      	; 0xc250 <get_cpu_joypad_state+0x182>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c248:	ad 81       	ldd	r26, Y+5	; 0x05
    c24a:	be 81       	ldd	r27, Y+6	; 0x06
    c24c:	59 96       	adiw	r26, 0x19	; 25
    c24e:	0c 93       	st	X, r16
		}
		p->held = player->goal_direction;
    c250:	ed 81       	ldd	r30, Y+5	; 0x05
    c252:	fe 81       	ldd	r31, Y+6	; 0x06
    c254:	83 89       	ldd	r24, Z+19	; 0x13
    c256:	94 89       	ldd	r25, Z+20	; 0x14
    c258:	d6 01       	movw	r26, r12
    c25a:	15 96       	adiw	r26, 0x05	; 5
    c25c:	9c 93       	st	X, r25
    c25e:	8e 93       	st	-X, r24
    c260:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->netMessage.shared.x != player->old_x)
    c262:	f5 01       	movw	r30, r10
    c264:	20 81       	ld	r18, Z
    c266:	31 81       	ldd	r19, Z+1	; 0x01
    c268:	ad 81       	ldd	r26, Y+5	; 0x05
    c26a:	be 81       	ldd	r27, Y+6	; 0x06
    c26c:	5d 96       	adiw	r26, 0x1d	; 29
    c26e:	8d 91       	ld	r24, X+
    c270:	9c 91       	ld	r25, X
    c272:	5e 97       	sbiw	r26, 0x1e	; 30
    c274:	28 17       	cp	r18, r24
    c276:	39 07       	cpc	r19, r25
    c278:	29 f0       	breq	.+10     	; 0xc284 <get_cpu_joypad_state+0x1b6>
		player->deadlock_count_x = 0;
    c27a:	56 96       	adiw	r26, 0x16	; 22
    c27c:	1c 92       	st	X, r1
    c27e:	1e 92       	st	-X, r1
    c280:	55 97       	sbiw	r26, 0x15	; 21
    c282:	07 c0       	rjmp	.+14     	; 0xc292 <get_cpu_joypad_state+0x1c4>
	else 
		player->deadlock_count_x++;
    c284:	ed 81       	ldd	r30, Y+5	; 0x05
    c286:	fe 81       	ldd	r31, Y+6	; 0x06
    c288:	85 89       	ldd	r24, Z+21	; 0x15
    c28a:	96 89       	ldd	r25, Z+22	; 0x16
    c28c:	01 96       	adiw	r24, 0x01	; 1
    c28e:	96 8b       	std	Z+22, r25	; 0x16
    c290:	85 8b       	std	Z+21, r24	; 0x15
	if (player->netMessage.shared.y != player->old_y)
    c292:	d4 01       	movw	r26, r8
    c294:	8d 91       	ld	r24, X+
    c296:	9c 91       	ld	r25, X
    c298:	ed 81       	ldd	r30, Y+5	; 0x05
    c29a:	fe 81       	ldd	r31, Y+6	; 0x06
    c29c:	47 8d       	ldd	r20, Z+31	; 0x1f
    c29e:	50 a1       	ldd	r21, Z+32	; 0x20
    c2a0:	84 17       	cp	r24, r20
    c2a2:	95 07       	cpc	r25, r21
    c2a4:	19 f0       	breq	.+6      	; 0xc2ac <get_cpu_joypad_state+0x1de>
		player->deadlock_count_y = 0;
    c2a6:	10 8e       	std	Z+24, r1	; 0x18
    c2a8:	17 8a       	std	Z+23, r1	; 0x17
    c2aa:	0c c0       	rjmp	.+24     	; 0xc2c4 <get_cpu_joypad_state+0x1f6>
	else
		player->deadlock_count_y++;
    c2ac:	ad 81       	ldd	r26, Y+5	; 0x05
    c2ae:	be 81       	ldd	r27, Y+6	; 0x06
    c2b0:	57 96       	adiw	r26, 0x17	; 23
    c2b2:	4d 91       	ld	r20, X+
    c2b4:	5c 91       	ld	r21, X
    c2b6:	58 97       	sbiw	r26, 0x18	; 24
    c2b8:	4f 5f       	subi	r20, 0xFF	; 255
    c2ba:	5f 4f       	sbci	r21, 0xFF	; 255
    c2bc:	58 96       	adiw	r26, 0x18	; 24
    c2be:	5c 93       	st	X, r21
    c2c0:	4e 93       	st	-X, r20
    c2c2:	57 97       	sbiw	r26, 0x17	; 23
	player->old_x = player->netMessage.shared.x;
    c2c4:	ed 81       	ldd	r30, Y+5	; 0x05
    c2c6:	fe 81       	ldd	r31, Y+6	; 0x06
    c2c8:	36 8f       	std	Z+30, r19	; 0x1e
    c2ca:	25 8f       	std	Z+29, r18	; 0x1d
	player->old_y = player->netMessage.shared.y;
    c2cc:	90 a3       	std	Z+32, r25	; 0x20
    c2ce:	87 8f       	std	Z+31, r24	; 0x1f
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c2d0:	45 89       	ldd	r20, Z+21	; 0x15
    c2d2:	56 89       	ldd	r21, Z+22	; 0x16
    c2d4:	40 34       	cpi	r20, 0x40	; 64
    c2d6:	51 40       	sbci	r21, 0x01	; 1
    c2d8:	88 f0       	brcs	.+34     	; 0xc2fc <get_cpu_joypad_state+0x22e>
	{
		p->held = button_map(LBRandom(2, 4));
    c2da:	64 e0       	ldi	r22, 0x04	; 4
    c2dc:	82 e0       	ldi	r24, 0x02	; 2
    c2de:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    c2e2:	90 e0       	ldi	r25, 0x00	; 0
    c2e4:	0e 94 1e 5f 	call	0xbe3c	; 0xbe3c <button_map>
    c2e8:	d6 01       	movw	r26, r12
    c2ea:	15 96       	adiw	r26, 0x05	; 5
    c2ec:	9c 93       	st	X, r25
    c2ee:	8e 93       	st	-X, r24
    c2f0:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    c2f2:	ed 81       	ldd	r30, Y+5	; 0x05
    c2f4:	fe 81       	ldd	r31, Y+6	; 0x06
    c2f6:	16 8a       	std	Z+22, r1	; 0x16
    c2f8:	15 8a       	std	Z+21, r1	; 0x15
    c2fa:	33 c0       	rjmp	.+102    	; 0xc362 <get_cpu_joypad_state+0x294>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c2fc:	ad 81       	ldd	r26, Y+5	; 0x05
    c2fe:	be 81       	ldd	r27, Y+6	; 0x06
    c300:	57 96       	adiw	r26, 0x17	; 23
    c302:	4d 91       	ld	r20, X+
    c304:	5c 91       	ld	r21, X
    c306:	58 97       	sbiw	r26, 0x18	; 24
    c308:	40 34       	cpi	r20, 0x40	; 64
    c30a:	51 40       	sbci	r21, 0x01	; 1
    c30c:	88 f0       	brcs	.+34     	; 0xc330 <get_cpu_joypad_state+0x262>
	{
		p->held = button_map(LBRandom(0, 2));
    c30e:	62 e0       	ldi	r22, 0x02	; 2
    c310:	80 e0       	ldi	r24, 0x00	; 0
    c312:	0e 94 96 4c 	call	0x992c	; 0x992c <LBRandom>
    c316:	90 e0       	ldi	r25, 0x00	; 0
    c318:	0e 94 1e 5f 	call	0xbe3c	; 0xbe3c <button_map>
    c31c:	f6 01       	movw	r30, r12
    c31e:	95 83       	std	Z+5, r25	; 0x05
    c320:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    c322:	ad 81       	ldd	r26, Y+5	; 0x05
    c324:	be 81       	ldd	r27, Y+6	; 0x06
    c326:	58 96       	adiw	r26, 0x18	; 24
    c328:	1c 92       	st	X, r1
    c32a:	1e 92       	st	-X, r1
    c32c:	57 97       	sbiw	r26, 0x17	; 23
    c32e:	19 c0       	rjmp	.+50     	; 0xc362 <get_cpu_joypad_state+0x294>
	}
	else player->goal_reached = crash_and_turn(player->netMessage.shared.x / 800, player->netMessage.shared.y / 800 - 3, player->netMessage.shared.recoiled, player, p);
    c330:	00 e2       	ldi	r16, 0x20	; 32
    c332:	13 e0       	ldi	r17, 0x03	; 3
    c334:	b8 01       	movw	r22, r16
    c336:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c33a:	ed ef       	ldi	r30, 0xFD	; 253
    c33c:	e6 0f       	add	r30, r22
    c33e:	c9 01       	movw	r24, r18
    c340:	b8 01       	movw	r22, r16
    c342:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    c346:	86 2f       	mov	r24, r22
    c348:	86 01       	movw	r16, r12
    c34a:	2d 81       	ldd	r18, Y+5	; 0x05
    c34c:	3e 81       	ldd	r19, Y+6	; 0x06
    c34e:	d9 01       	movw	r26, r18
    c350:	ab 58       	subi	r26, 0x8B	; 139
    c352:	bf 4f       	sbci	r27, 0xFF	; 255
    c354:	4c 91       	ld	r20, X
    c356:	6e 2f       	mov	r22, r30
    c358:	0e 94 34 5f 	call	0xbe68	; 0xbe68 <crash_and_turn>
    c35c:	ed 81       	ldd	r30, Y+5	; 0x05
    c35e:	fe 81       	ldd	r31, Y+6	; 0x06
    c360:	82 8f       	std	Z+26, r24	; 0x1a
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    c362:	ad 81       	ldd	r26, Y+5	; 0x05
    c364:	be 81       	ldd	r27, Y+6	; 0x06
    c366:	51 96       	adiw	r26, 0x11	; 17
    c368:	8c 91       	ld	r24, X
    c36a:	81 30       	cpi	r24, 0x01	; 1
    c36c:	09 f0       	breq	.+2      	; 0xc370 <get_cpu_joypad_state+0x2a2>
    c36e:	ca c0       	rjmp	.+404    	; 0xc504 <get_cpu_joypad_state+0x436>
    c370:	f7 01       	movw	r30, r14
    c372:	95 81       	ldd	r25, Z+5	; 0x05
    c374:	84 81       	ldd	r24, Z+4	; 0x04
    c376:	98 17       	cp	r25, r24
    c378:	08 f0       	brcs	.+2      	; 0xc37c <get_cpu_joypad_state+0x2ae>
    c37a:	c4 c0       	rjmp	.+392    	; 0xc504 <get_cpu_joypad_state+0x436>
	{
		if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c37c:	ab 81       	ldd	r26, Y+3	; 0x03
    c37e:	bc 81       	ldd	r27, Y+4	; 0x04
    c380:	2d 91       	ld	r18, X+
    c382:	3c 91       	ld	r19, X
    c384:	f4 01       	movw	r30, r8
    c386:	80 81       	ld	r24, Z
    c388:	91 81       	ldd	r25, Z+1	; 0x01
    c38a:	28 17       	cp	r18, r24
    c38c:	39 07       	cpc	r19, r25
    c38e:	08 f0       	brcs	.+2      	; 0xc392 <get_cpu_joypad_state+0x2c4>
    c390:	5a c0       	rjmp	.+180    	; 0xc446 <get_cpu_joypad_state+0x378>
    c392:	d3 01       	movw	r26, r6
    c394:	2d 91       	ld	r18, X+
    c396:	3c 91       	ld	r19, X
    c398:	f5 01       	movw	r30, r10
    c39a:	80 81       	ld	r24, Z
    c39c:	91 81       	ldd	r25, Z+1	; 0x01
    c39e:	28 17       	cp	r18, r24
    c3a0:	39 07       	cpc	r19, r25
    c3a2:	68 f5       	brcc	.+90     	; 0xc3fe <get_cpu_joypad_state+0x330>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_LEFT)
    c3a4:	f7 01       	movw	r30, r14
    c3a6:	ee 58       	subi	r30, 0x8E	; 142
    c3a8:	ff 4f       	sbci	r31, 0xFF	; 255
    c3aa:	80 81       	ld	r24, Z
    c3ac:	82 30       	cpi	r24, 0x02	; 2
    c3ae:	a9 f4       	brne	.+42     	; 0xc3da <get_cpu_joypad_state+0x30c>
    c3b0:	ad 81       	ldd	r26, Y+5	; 0x05
    c3b2:	be 81       	ldd	r27, Y+6	; 0x06
    c3b4:	ae 58       	subi	r26, 0x8E	; 142
    c3b6:	bf 4f       	sbci	r27, 0xFF	; 255
    c3b8:	8c 91       	ld	r24, X
    c3ba:	83 30       	cpi	r24, 0x03	; 3
    c3bc:	71 f4       	brne	.+28     	; 0xc3da <get_cpu_joypad_state+0x30c>
			{
				p->held = BTN_RIGHT;
    c3be:	80 e8       	ldi	r24, 0x80	; 128
    c3c0:	90 e0       	ldi	r25, 0x00	; 0
    c3c2:	d6 01       	movw	r26, r12
    c3c4:	15 96       	adiw	r26, 0x05	; 5
    c3c6:	9c 93       	st	X, r25
    c3c8:	8e 93       	st	-X, r24
    c3ca:	14 97       	sbiw	r26, 0x04	; 4
				player->goal_reached = 0;
    c3cc:	ad 81       	ldd	r26, Y+5	; 0x05
    c3ce:	be 81       	ldd	r27, Y+6	; 0x06
    c3d0:	5a 96       	adiw	r26, 0x1a	; 26
    c3d2:	1c 92       	st	X, r1
    c3d4:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c3d6:	1f 96       	adiw	r26, 0x0f	; 15
    c3d8:	1c 92       	st	X, r1
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_UP)
    c3da:	80 81       	ld	r24, Z
    c3dc:	81 30       	cpi	r24, 0x01	; 1
    c3de:	09 f0       	breq	.+2      	; 0xc3e2 <get_cpu_joypad_state+0x314>
    c3e0:	91 c0       	rjmp	.+290    	; 0xc504 <get_cpu_joypad_state+0x436>
    c3e2:	ed 81       	ldd	r30, Y+5	; 0x05
    c3e4:	fe 81       	ldd	r31, Y+6	; 0x06
    c3e6:	ee 58       	subi	r30, 0x8E	; 142
    c3e8:	ff 4f       	sbci	r31, 0xFF	; 255
    c3ea:	80 81       	ld	r24, Z
    c3ec:	81 11       	cpse	r24, r1
    c3ee:	8a c0       	rjmp	.+276    	; 0xc504 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c3f0:	ed 81       	ldd	r30, Y+5	; 0x05
    c3f2:	fe 81       	ldd	r31, Y+6	; 0x06
    c3f4:	12 8e       	std	Z+26, r1	; 0x1a
				player->feeling_my_way = 0;
    c3f6:	17 86       	std	Z+15, r1	; 0x0f
				p->held = BTN_DOWN;
    c3f8:	80 e2       	ldi	r24, 0x20	; 32
    c3fa:	90 e0       	ldi	r25, 0x00	; 0
    c3fc:	5c c0       	rjmp	.+184    	; 0xc4b6 <get_cpu_joypad_state+0x3e8>
			}
		}
		else if (other_player->netMessage.shared.y < player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c3fe:	82 17       	cp	r24, r18
    c400:	93 07       	cpc	r25, r19
    c402:	08 f0       	brcs	.+2      	; 0xc406 <get_cpu_joypad_state+0x338>
    c404:	7f c0       	rjmp	.+254    	; 0xc504 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_DOWN && player->netMessage.shared.direction == D_RIGHT)
    c406:	f7 01       	movw	r30, r14
    c408:	ee 58       	subi	r30, 0x8E	; 142
    c40a:	ff 4f       	sbci	r31, 0xFF	; 255
    c40c:	80 81       	ld	r24, Z
    c40e:	82 30       	cpi	r24, 0x02	; 2
    c410:	a9 f4       	brne	.+42     	; 0xc43c <get_cpu_joypad_state+0x36e>
    c412:	ad 81       	ldd	r26, Y+5	; 0x05
    c414:	be 81       	ldd	r27, Y+6	; 0x06
    c416:	ae 58       	subi	r26, 0x8E	; 142
    c418:	bf 4f       	sbci	r27, 0xFF	; 255
    c41a:	8c 91       	ld	r24, X
    c41c:	81 30       	cpi	r24, 0x01	; 1
    c41e:	71 f4       	brne	.+28     	; 0xc43c <get_cpu_joypad_state+0x36e>
			{
				player->goal_reached = 0;
    c420:	ad 81       	ldd	r26, Y+5	; 0x05
    c422:	be 81       	ldd	r27, Y+6	; 0x06
    c424:	5a 96       	adiw	r26, 0x1a	; 26
    c426:	1c 92       	st	X, r1
    c428:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c42a:	1f 96       	adiw	r26, 0x0f	; 15
    c42c:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c42e:	80 e4       	ldi	r24, 0x40	; 64
    c430:	90 e0       	ldi	r25, 0x00	; 0
    c432:	d6 01       	movw	r26, r12
    c434:	15 96       	adiw	r26, 0x05	; 5
    c436:	9c 93       	st	X, r25
    c438:	8e 93       	st	-X, r24
    c43a:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_UP)
    c43c:	80 81       	ld	r24, Z
    c43e:	83 30       	cpi	r24, 0x03	; 3
    c440:	09 f0       	breq	.+2      	; 0xc444 <get_cpu_joypad_state+0x376>
    c442:	60 c0       	rjmp	.+192    	; 0xc504 <get_cpu_joypad_state+0x436>
    c444:	ce cf       	rjmp	.-100    	; 0xc3e2 <get_cpu_joypad_state+0x314>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x < player->netMessage.shared.x)
    c446:	82 17       	cp	r24, r18
    c448:	93 07       	cpc	r25, r19
    c44a:	08 f0       	brcs	.+2      	; 0xc44e <get_cpu_joypad_state+0x380>
    c44c:	5b c0       	rjmp	.+182    	; 0xc504 <get_cpu_joypad_state+0x436>
    c44e:	f3 01       	movw	r30, r6
    c450:	20 81       	ld	r18, Z
    c452:	31 81       	ldd	r19, Z+1	; 0x01
    c454:	d5 01       	movw	r26, r10
    c456:	8d 91       	ld	r24, X+
    c458:	9c 91       	ld	r25, X
    c45a:	28 17       	cp	r18, r24
    c45c:	39 07       	cpc	r19, r25
    c45e:	88 f5       	brcc	.+98     	; 0xc4c2 <get_cpu_joypad_state+0x3f4>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_LEFT)
    c460:	f7 01       	movw	r30, r14
    c462:	ee 58       	subi	r30, 0x8E	; 142
    c464:	ff 4f       	sbci	r31, 0xFF	; 255
    c466:	80 81       	ld	r24, Z
    c468:	81 11       	cpse	r24, r1
    c46a:	15 c0       	rjmp	.+42     	; 0xc496 <get_cpu_joypad_state+0x3c8>
    c46c:	ad 81       	ldd	r26, Y+5	; 0x05
    c46e:	be 81       	ldd	r27, Y+6	; 0x06
    c470:	ae 58       	subi	r26, 0x8E	; 142
    c472:	bf 4f       	sbci	r27, 0xFF	; 255
    c474:	8c 91       	ld	r24, X
    c476:	83 30       	cpi	r24, 0x03	; 3
    c478:	71 f4       	brne	.+28     	; 0xc496 <get_cpu_joypad_state+0x3c8>
			{
				player->goal_reached = 0;
    c47a:	ad 81       	ldd	r26, Y+5	; 0x05
    c47c:	be 81       	ldd	r27, Y+6	; 0x06
    c47e:	5a 96       	adiw	r26, 0x1a	; 26
    c480:	1c 92       	st	X, r1
    c482:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c484:	1f 96       	adiw	r26, 0x0f	; 15
    c486:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    c488:	80 e8       	ldi	r24, 0x80	; 128
    c48a:	90 e0       	ldi	r25, 0x00	; 0
    c48c:	d6 01       	movw	r26, r12
    c48e:	15 96       	adiw	r26, 0x05	; 5
    c490:	9c 93       	st	X, r25
    c492:	8e 93       	st	-X, r24
    c494:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_RIGHT && player->netMessage.shared.direction == D_DOWN)
    c496:	80 81       	ld	r24, Z
    c498:	81 30       	cpi	r24, 0x01	; 1
    c49a:	a1 f5       	brne	.+104    	; 0xc504 <get_cpu_joypad_state+0x436>
    c49c:	ed 81       	ldd	r30, Y+5	; 0x05
    c49e:	fe 81       	ldd	r31, Y+6	; 0x06
    c4a0:	ee 58       	subi	r30, 0x8E	; 142
    c4a2:	ff 4f       	sbci	r31, 0xFF	; 255
    c4a4:	80 81       	ld	r24, Z
    c4a6:	82 30       	cpi	r24, 0x02	; 2
    c4a8:	69 f5       	brne	.+90     	; 0xc504 <get_cpu_joypad_state+0x436>
			{
				player->goal_reached = 0;
    c4aa:	ed 81       	ldd	r30, Y+5	; 0x05
    c4ac:	fe 81       	ldd	r31, Y+6	; 0x06
    c4ae:	12 8e       	std	Z+26, r1	; 0x1a
				player->feeling_my_way = 0;
    c4b0:	17 86       	std	Z+15, r1	; 0x0f
				p->held = BTN_UP;
    c4b2:	80 e1       	ldi	r24, 0x10	; 16
    c4b4:	90 e0       	ldi	r25, 0x00	; 0
    c4b6:	d6 01       	movw	r26, r12
    c4b8:	15 96       	adiw	r26, 0x05	; 5
    c4ba:	9c 93       	st	X, r25
    c4bc:	8e 93       	st	-X, r24
    c4be:	14 97       	sbiw	r26, 0x04	; 4
    c4c0:	21 c0       	rjmp	.+66     	; 0xc504 <get_cpu_joypad_state+0x436>
			}
		}
		else if (other_player->netMessage.shared.y > player->netMessage.shared.y && other_player->netMessage.shared.x > player->netMessage.shared.x)
    c4c2:	82 17       	cp	r24, r18
    c4c4:	93 07       	cpc	r25, r19
    c4c6:	f0 f4       	brcc	.+60     	; 0xc504 <get_cpu_joypad_state+0x436>
		{
			if (other_player->netMessage.shared.direction == D_UP && player->netMessage.shared.direction == D_RIGHT)
    c4c8:	f7 01       	movw	r30, r14
    c4ca:	ee 58       	subi	r30, 0x8E	; 142
    c4cc:	ff 4f       	sbci	r31, 0xFF	; 255
    c4ce:	80 81       	ld	r24, Z
    c4d0:	81 11       	cpse	r24, r1
    c4d2:	15 c0       	rjmp	.+42     	; 0xc4fe <get_cpu_joypad_state+0x430>
    c4d4:	ad 81       	ldd	r26, Y+5	; 0x05
    c4d6:	be 81       	ldd	r27, Y+6	; 0x06
    c4d8:	ae 58       	subi	r26, 0x8E	; 142
    c4da:	bf 4f       	sbci	r27, 0xFF	; 255
    c4dc:	8c 91       	ld	r24, X
    c4de:	81 30       	cpi	r24, 0x01	; 1
    c4e0:	71 f4       	brne	.+28     	; 0xc4fe <get_cpu_joypad_state+0x430>
			{
				player->goal_reached = 0;
    c4e2:	ad 81       	ldd	r26, Y+5	; 0x05
    c4e4:	be 81       	ldd	r27, Y+6	; 0x06
    c4e6:	5a 96       	adiw	r26, 0x1a	; 26
    c4e8:	1c 92       	st	X, r1
    c4ea:	5a 97       	sbiw	r26, 0x1a	; 26
				player->feeling_my_way = 0;
    c4ec:	1f 96       	adiw	r26, 0x0f	; 15
    c4ee:	1c 92       	st	X, r1
				p->held = BTN_LEFT;
    c4f0:	80 e4       	ldi	r24, 0x40	; 64
    c4f2:	90 e0       	ldi	r25, 0x00	; 0
    c4f4:	d6 01       	movw	r26, r12
    c4f6:	15 96       	adiw	r26, 0x05	; 5
    c4f8:	9c 93       	st	X, r25
    c4fa:	8e 93       	st	-X, r24
    c4fc:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->netMessage.shared.direction == D_LEFT && player->netMessage.shared.direction == D_DOWN){
    c4fe:	80 81       	ld	r24, Z
    c500:	83 30       	cpi	r24, 0x03	; 3
    c502:	61 f2       	breq	.-104    	; 0xc49c <get_cpu_joypad_state+0x3ce>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    c504:	26 96       	adiw	r28, 0x06	; 6
    c506:	0f b6       	in	r0, 0x3f	; 63
    c508:	f8 94       	cli
    c50a:	de bf       	out	0x3e, r29	; 62
    c50c:	0f be       	out	0x3f, r0	; 63
    c50e:	cd bf       	out	0x3d, r28	; 61
    c510:	df 91       	pop	r29
    c512:	cf 91       	pop	r28
    c514:	1f 91       	pop	r17
    c516:	0f 91       	pop	r16
    c518:	ff 90       	pop	r15
    c51a:	ef 90       	pop	r14
    c51c:	df 90       	pop	r13
    c51e:	cf 90       	pop	r12
    c520:	bf 90       	pop	r11
    c522:	af 90       	pop	r10
    c524:	9f 90       	pop	r9
    c526:	8f 90       	pop	r8
    c528:	7f 90       	pop	r7
    c52a:	6f 90       	pop	r6
    c52c:	5f 90       	pop	r5
    c52e:	4f 90       	pop	r4
    c530:	3f 90       	pop	r3
    c532:	2f 90       	pop	r2
    c534:	08 95       	ret

0000c536 <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u8 delay)
{
    c536:	bf 92       	push	r11
    c538:	cf 92       	push	r12
    c53a:	df 92       	push	r13
    c53c:	ef 92       	push	r14
    c53e:	ff 92       	push	r15
    c540:	0f 93       	push	r16
    c542:	1f 93       	push	r17
    c544:	cf 93       	push	r28
    c546:	df 93       	push	r29
    c548:	1f 92       	push	r1
    c54a:	cd b7       	in	r28, 0x3d	; 61
    c54c:	de b7       	in	r29, 0x3e	; 62
    c54e:	8c 01       	movw	r16, r24
    c550:	f6 2e       	mov	r15, r22
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    c552:	8f e0       	ldi	r24, 0x0F	; 15
    c554:	b8 2e       	mov	r11, r24
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
			LBWaitSeconds(delay, sizeof(player1.netMessage));
    c556:	c4 2e       	mov	r12, r20
    c558:	d1 2c       	mov	r13, r1
}
void stream_text_middle(const char* dialogue, u8 y, u8 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    c55a:	f8 01       	movw	r30, r16
    c55c:	84 91       	lpm	r24, Z
    c55e:	83 32       	cpi	r24, 0x23	; 35
    c560:	09 f1       	breq	.+66     	; 0xc5a4 <stream_text_middle+0x6e>
	{
		ln = strnlen_P(dialogue, 255);
    c562:	6f ef       	ldi	r22, 0xFF	; 255
    c564:	70 e0       	ldi	r23, 0x00	; 0
    c566:	c8 01       	movw	r24, r16
    c568:	0e 94 b1 71 	call	0xe362	; 0xe362 <strnlen_P>
		x = 15 - ln / 2;
    c56c:	86 95       	lsr	r24
    c56e:	eb 2c       	mov	r14, r11
    c570:	e8 1a       	sub	r14, r24
    c572:	e0 1a       	sub	r14, r16
    c574:	8e 2d       	mov	r24, r14
    c576:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    c578:	0f 5f       	subi	r16, 0xFF	; 255
    c57a:	1f 4f       	sbci	r17, 0xFF	; 255
    c57c:	f8 01       	movw	r30, r16
    c57e:	31 97       	sbiw	r30, 0x01	; 1
    c580:	e4 91       	lpm	r30, Z
    c582:	e9 83       	std	Y+1, r30	; 0x01
    c584:	ee 23       	and	r30, r30
    c586:	61 f0       	breq	.+24     	; 0xc5a0 <stream_text_middle+0x6a>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    c588:	21 e0       	ldi	r18, 0x01	; 1
    c58a:	ae 01       	movw	r20, r28
    c58c:	4f 5f       	subi	r20, 0xFF	; 255
    c58e:	5f 4f       	sbci	r21, 0xFF	; 255
    c590:	6f 2d       	mov	r22, r15
    c592:	0e 94 3d 4c 	call	0x987a	; 0x987a <LBPrintStr>
			LBWaitSeconds(delay, sizeof(player1.netMessage));
    c596:	6c e1       	ldi	r22, 0x1C	; 28
    c598:	c6 01       	movw	r24, r12
    c59a:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
    c59e:	ea cf       	rjmp	.-44     	; 0xc574 <stream_text_middle+0x3e>
		}
		y++;
    c5a0:	f3 94       	inc	r15
    c5a2:	db cf       	rjmp	.-74     	; 0xc55a <stream_text_middle+0x24>
	}
}
    c5a4:	0f 90       	pop	r0
    c5a6:	df 91       	pop	r29
    c5a8:	cf 91       	pop	r28
    c5aa:	1f 91       	pop	r17
    c5ac:	0f 91       	pop	r16
    c5ae:	ff 90       	pop	r15
    c5b0:	ef 90       	pop	r14
    c5b2:	df 90       	pop	r13
    c5b4:	cf 90       	pop	r12
    c5b6:	bf 90       	pop	r11
    c5b8:	08 95       	ret

0000c5ba <load_credits>:

void load_credits()
{
	fade_through();
    c5ba:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 0);
    c5be:	40 e0       	ldi	r20, 0x00	; 0
    c5c0:	65 e0       	ldi	r22, 0x05	; 5
    c5c2:	89 e8       	ldi	r24, 0x89	; 137
    c5c4:	92 e0       	ldi	r25, 0x02	; 2
    c5c6:	0e 94 9b 62 	call	0xc536	; 0xc536 <stream_text_middle>
	LBWaitSeconds(4, sizeof(player1.netMessage));
    c5ca:	6c e1       	ldi	r22, 0x1C	; 28
    c5cc:	84 e0       	ldi	r24, 0x04	; 4
    c5ce:	90 e0       	ldi	r25, 0x00	; 0
    c5d0:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
	fade_through();
    c5d4:	0c 94 91 4f 	jmp	0x9f22	; 0x9f22 <fade_through>

0000c5d8 <get_net_message>:
		}
	}
}

void get_net_message(u8 use_current_message)
{
    c5d8:	8f 92       	push	r8
    c5da:	9f 92       	push	r9
    c5dc:	af 92       	push	r10
    c5de:	bf 92       	push	r11
    c5e0:	cf 92       	push	r12
    c5e2:	df 92       	push	r13
    c5e4:	ef 92       	push	r14
    c5e6:	ff 92       	push	r15
    c5e8:	0f 93       	push	r16
    c5ea:	1f 93       	push	r17
    c5ec:	cf 93       	push	r28
    c5ee:	df 93       	push	r29
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
    c5f0:	90 91 ce 0f 	lds	r25, 0x0FCE
    c5f4:	90 93 70 0f 	sts	0x0F70, r25
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c5f8:	90 91 c9 0b 	lds	r25, 0x0BC9
    c5fc:	2e ef       	ldi	r18, 0xFE	; 254
    c5fe:	29 0f       	add	r18, r25
    c600:	22 30       	cpi	r18, 0x02	; 2
    c602:	08 f0       	brcs	.+2      	; 0xc606 <get_net_message+0x2e>
    c604:	9b c1       	rjmp	.+822    	; 0xc93c <get_net_message+0x364>
	if (game.selection == JOINNETGAME)
    c606:	93 30       	cpi	r25, 0x03	; 3
    c608:	c1 f4       	brne	.+48     	; 0xc63a <get_net_message+0x62>
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
    c60a:	90 91 58 0c 	lds	r25, 0x0C58
    c60e:	90 93 fa 0b 	sts	0x0BFA, r25
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
    c612:	5f e0       	ldi	r21, 0x0F	; 15
    c614:	c5 2e       	mov	r12, r21
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
		playerHudX = 0;
    c616:	d1 2c       	mov	r13, r1
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
		otherPlayer = &player2;
    c618:	6e e5       	ldi	r22, 0x5E	; 94
    c61a:	e6 2e       	mov	r14, r22
    c61c:	6f e0       	ldi	r22, 0x0F	; 15
    c61e:	f6 2e       	mov	r15, r22
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
		otherNetMessage = &player2.netMessage;
    c620:	79 ec       	ldi	r23, 0xC9	; 201
    c622:	a7 2e       	mov	r10, r23
    c624:	7f e0       	ldi	r23, 0x0F	; 15
    c626:	b7 2e       	mov	r11, r23
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
		netMessage = &player1.netMessage;
    c628:	c3 e5       	ldi	r28, 0x53	; 83
    c62a:	dc e0       	ldi	r29, 0x0C	; 12
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
		state = &player1.netMessage.joyPadState;
    c62c:	e2 e6       	ldi	r30, 0x62	; 98
    c62e:	8e 2e       	mov	r8, r30
    c630:	ec e0       	ldi	r30, 0x0C	; 12
    c632:	9e 2e       	mov	r9, r30
	u8 otherPlayerHudX = 0;
	player->old_level_score = netMessage->level_score;
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		player = &player1;
    c634:	08 ee       	ldi	r16, 0xE8	; 232
    c636:	1b e0       	ldi	r17, 0x0B	; 11
    c638:	13 c0       	rjmp	.+38     	; 0xc660 <get_net_message+0x88>
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
	u8 otherPlayerHudX = 0;
    c63a:	c1 2c       	mov	r12, r1
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
	u8 playerHudX = 15;
    c63c:	9f e0       	ldi	r25, 0x0F	; 15
    c63e:	d9 2e       	mov	r13, r25
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
	Player* otherPlayer = &player1;
    c640:	28 ee       	ldi	r18, 0xE8	; 232
    c642:	e2 2e       	mov	r14, r18
    c644:	2b e0       	ldi	r18, 0x0B	; 11
    c646:	f2 2e       	mov	r15, r18
void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
	NetMessage* otherNetMessage = &player1.netMessage;
    c648:	33 e5       	ldi	r19, 0x53	; 83
    c64a:	a3 2e       	mov	r10, r19
    c64c:	3c e0       	ldi	r19, 0x0C	; 12
    c64e:	b3 2e       	mov	r11, r19

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
	NetMessage* netMessage = &player2.netMessage;
    c650:	c9 ec       	ldi	r28, 0xC9	; 201
    c652:	df e0       	ldi	r29, 0x0F	; 15
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
	JoyPadState* state = &player2.netMessage.joyPadState;
    c654:	48 ed       	ldi	r20, 0xD8	; 216
    c656:	84 2e       	mov	r8, r20
    c658:	4f e0       	ldi	r20, 0x0F	; 15
    c65a:	94 2e       	mov	r9, r20
	}
}

void get_net_message(u8 use_current_message)
{
	Player* player = &player2;
    c65c:	0e e5       	ldi	r16, 0x5E	; 94
    c65e:	1f e0       	ldi	r17, 0x0F	; 15
		otherPlayer = &player2;
		playerHudX = 0;
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
    c660:	9b e0       	ldi	r25, 0x0B	; 11
    c662:	98 83       	st	Y, r25
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c664:	88 23       	and	r24, r24
    c666:	51 f0       	breq	.+20     	; 0xc67c <get_net_message+0xa4>
	{
		if (netMessage->send_ack)
    c668:	89 81       	ldd	r24, Y+1	; 0x01
    c66a:	88 23       	and	r24, r24
    c66c:	81 f0       	breq	.+32     	; 0xc68e <get_net_message+0xb6>
		{
			otherNetMessage->code = NETACK;
    c66e:	8f e0       	ldi	r24, 0x0F	; 15
    c670:	f5 01       	movw	r30, r10
    c672:	80 83       	st	Z, r24
			sendNetMessage(otherNetMessage);
    c674:	c5 01       	movw	r24, r10
    c676:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <sendNetMessage>
    c67a:	09 c0       	rjmp	.+18     	; 0xc68e <get_net_message+0xb6>
		otherPlayerHudX = 15;
		player->old_level_score = netMessage->level_score;
	}
	netMessage->code = NETNODATA;
	
	if (use_current_message || getNetMessage(netMessage) != WIFI_NODATA)
    c67c:	ce 01       	movw	r24, r28
    c67e:	0e 94 ea 4c 	call	0x99d4	; 0x99d4 <getNetMessage>
    c682:	82 30       	cpi	r24, 0x02	; 2
    c684:	89 f7       	brne	.-30     	; 0xc668 <get_net_message+0x90>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		}
	}
	else
	{
		state->pressed = 0;
    c686:	f4 01       	movw	r30, r8
    c688:	11 82       	std	Z+1, r1	; 0x01
    c68a:	10 82       	st	Z, r1
    c68c:	57 c1       	rjmp	.+686    	; 0xc93c <get_net_message+0x364>
		{
			otherNetMessage->code = NETACK;
			sendNetMessage(otherNetMessage);
		}
		// Act on message code
		if (netMessage->code == NETNEXTLEVEL) {
    c68e:	98 81       	ld	r25, Y
    c690:	90 31       	cpi	r25, 0x10	; 16
    c692:	71 f5       	brne	.+92     	; 0xc6f0 <get_net_message+0x118>
			LBHideAllSprites();
    c694:	0e 94 d0 4c 	call	0x99a0	; 0x99a0 <LBHideAllSprites>
			load_level_tiles(true);
    c698:	81 e0       	ldi	r24, 0x01	; 1
    c69a:	0e 94 83 57 	call	0xaf06	; 0xaf06 <load_level_tiles>
			if (player1.netMessage.level_score >= player2.netMessage.level_score)
    c69e:	90 91 58 0c 	lds	r25, 0x0C58
    c6a2:	80 91 ce 0f 	lds	r24, 0x0FCE
    c6a6:	98 17       	cp	r25, r24
    c6a8:	28 f0       	brcs	.+10     	; 0xc6b4 <get_net_message+0xdc>
			{
				print_level_score(&player1, &player2);
    c6aa:	6e e5       	ldi	r22, 0x5E	; 94
    c6ac:	7f e0       	ldi	r23, 0x0F	; 15
    c6ae:	88 ee       	ldi	r24, 0xE8	; 232
    c6b0:	9b e0       	ldi	r25, 0x0B	; 11
    c6b2:	04 c0       	rjmp	.+8      	; 0xc6bc <get_net_message+0xe4>
			}
			else
			{
				print_level_score(&player2, &player1);
    c6b4:	68 ee       	ldi	r22, 0xE8	; 232
    c6b6:	7b e0       	ldi	r23, 0x0B	; 11
    c6b8:	8e e5       	ldi	r24, 0x5E	; 94
    c6ba:	9f e0       	ldi	r25, 0x0F	; 15
    c6bc:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <print_level_score>
			}
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    c6c0:	6c e1       	ldi	r22, 0x1C	; 28
    c6c2:	84 e0       	ldi	r24, 0x04	; 4
    c6c4:	90 e0       	ldi	r25, 0x00	; 0
    c6c6:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    c6ca:	10 92 58 0c 	sts	0x0C58, r1
			player2.netMessage.level_score = 0;
    c6ce:	10 92 ce 0f 	sts	0x0FCE, r1
			level_transition(netMessage->object_pos_x);
    c6d2:	8a 81       	ldd	r24, Y+2	; 0x02
	}
	else
	{
		state->pressed = 0;
	}
}
    c6d4:	df 91       	pop	r29
    c6d6:	cf 91       	pop	r28
    c6d8:	1f 91       	pop	r17
    c6da:	0f 91       	pop	r16
    c6dc:	ff 90       	pop	r15
    c6de:	ef 90       	pop	r14
    c6e0:	df 90       	pop	r13
    c6e2:	cf 90       	pop	r12
    c6e4:	bf 90       	pop	r11
    c6e6:	af 90       	pop	r10
    c6e8:	9f 90       	pop	r9
    c6ea:	8f 90       	pop	r8
				print_level_score(&player2, &player1);
			}
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(netMessage->object_pos_x);
    c6ec:	0c 94 c3 58 	jmp	0xb186	; 0xb186 <level_transition>
		}
		else if (netMessage->code == NETITEMSPEED)
    c6f0:	93 30       	cpi	r25, 0x03	; 3
    c6f2:	b9 f4       	brne	.+46     	; 0xc722 <get_net_message+0x14a>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c6f4:	eb 81       	ldd	r30, Y+3	; 0x03
    c6f6:	8e e1       	ldi	r24, 0x1E	; 30
    c6f8:	e8 9f       	mul	r30, r24
    c6fa:	f0 01       	movw	r30, r0
    c6fc:	11 24       	eor	r1, r1
    c6fe:	8a 81       	ldd	r24, Y+2	; 0x02
    c700:	e1 59       	subi	r30, 0x91	; 145
    c702:	f3 4f       	sbci	r31, 0xF3	; 243
    c704:	e8 0f       	add	r30, r24
    c706:	f1 1d       	adc	r31, r1
    c708:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c70a:	84 e6       	ldi	r24, 0x64	; 100
    c70c:	99 e1       	ldi	r25, 0x19	; 25
    c70e:	f8 01       	movw	r30, r16
    c710:	94 87       	std	Z+12, r25	; 0x0c
    c712:	83 87       	std	Z+11, r24	; 0x0b
			player->has_over_speed = true;
    c714:	81 e0       	ldi	r24, 0x01	; 1
    c716:	86 87       	std	Z+14, r24	; 0x0e
			DrawMap2(playerHudX+10, 1, map_speed_itm);
    c718:	4e e2       	ldi	r20, 0x2E	; 46
    c71a:	5b e6       	ldi	r21, 0x6B	; 107
    c71c:	61 e0       	ldi	r22, 0x01	; 1
    c71e:	8a e0       	ldi	r24, 0x0A	; 10
    c720:	14 c0       	rjmp	.+40     	; 0xc74a <get_net_message+0x172>
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETITEMROCKET)
    c722:	94 30       	cpi	r25, 0x04	; 4
    c724:	e9 f4       	brne	.+58     	; 0xc760 <get_net_message+0x188>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c726:	eb 81       	ldd	r30, Y+3	; 0x03
    c728:	8e e1       	ldi	r24, 0x1E	; 30
    c72a:	e8 9f       	mul	r30, r24
    c72c:	f0 01       	movw	r30, r0
    c72e:	11 24       	eor	r1, r1
    c730:	8a 81       	ldd	r24, Y+2	; 0x02
    c732:	e1 59       	subi	r30, 0x91	; 145
    c734:	f3 4f       	sbci	r31, 0xF3	; 243
    c736:	e8 0f       	add	r30, r24
    c738:	f1 1d       	adc	r31, r1
    c73a:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c73c:	81 e0       	ldi	r24, 0x01	; 1
    c73e:	f8 01       	movw	r30, r16
    c740:	85 87       	std	Z+13, r24	; 0x0d
			DrawMap2(playerHudX+11, 1, map_rocket_itm);
    c742:	48 e2       	ldi	r20, 0x28	; 40
    c744:	5b e6       	ldi	r21, 0x6B	; 107
    c746:	61 e0       	ldi	r22, 0x01	; 1
    c748:	8b e0       	ldi	r24, 0x0B	; 11
    c74a:	8d 0d       	add	r24, r13
    c74c:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c750:	40 e0       	ldi	r20, 0x00	; 0
    c752:	50 e0       	ldi	r21, 0x00	; 0
    c754:	6b 81       	ldd	r22, Y+3	; 0x03
    c756:	8a 81       	ldd	r24, Y+2	; 0x02
    c758:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    c75c:	22 e0       	ldi	r18, 0x02	; 2
    c75e:	da c0       	rjmp	.+436    	; 0xc914 <get_net_message+0x33c>
		}
		else if (netMessage->code == NETTURRETHIT)
    c760:	9c 30       	cpi	r25, 0x0C	; 12
    c762:	c1 f4       	brne	.+48     	; 0xc794 <get_net_message+0x1bc>
		{
			if (netMessage->object_pos_x == 1)
    c764:	9a 81       	ldd	r25, Y+2	; 0x02
    c766:	8b 81       	ldd	r24, Y+3	; 0x03
    c768:	91 30       	cpi	r25, 0x01	; 1
    c76a:	19 f4       	brne	.+6      	; 0xc772 <get_net_message+0x19a>
			{
				turret1.lives = netMessage->object_pos_y;
    c76c:	80 93 38 10 	sts	0x1038, r24
    c770:	02 c0       	rjmp	.+4      	; 0xc776 <get_net_message+0x19e>
				
			}
			else
			{
				turret2.lives = netMessage->object_pos_y;
    c772:	80 93 09 10 	sts	0x1009, r24
			}
			init_shot_state(&game.boss_fight_player->shot[0], game.boss_fight_player->shot[0].shot_type);
    c776:	80 91 c5 0b 	lds	r24, 0x0BC5
    c77a:	90 91 c6 0b 	lds	r25, 0x0BC6
    c77e:	fc 01       	movw	r30, r24
    c780:	61 a5       	ldd	r22, Z+41	; 0x29
    c782:	81 96       	adiw	r24, 0x21	; 33
    c784:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    c788:	e0 91 c5 0b 	lds	r30, 0x0BC5
    c78c:	f0 91 c6 0b 	lds	r31, 0x0BC6
    c790:	14 82       	std	Z+4, r1	; 0x04
    c792:	59 c0       	rjmp	.+178    	; 0xc846 <get_net_message+0x26e>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETPAUSE)
    c794:	97 30       	cpi	r25, 0x07	; 7
    c796:	69 f4       	brne	.+26     	; 0xc7b2 <get_net_message+0x1da>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c798:	24 e0       	ldi	r18, 0x04	; 4
    c79a:	40 91 cf 0f 	lds	r20, 0x0FCF
    c79e:	60 91 59 0c 	lds	r22, 0x0C59
    c7a2:	80 91 c9 0b 	lds	r24, 0x0BC9
    c7a6:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			game.paused = 1;
    c7aa:	81 e0       	ldi	r24, 0x01	; 1
    c7ac:	80 93 b8 0b 	sts	0x0BB8, r24
    c7b0:	0d c0       	rjmp	.+26     	; 0xc7cc <get_net_message+0x1f4>
			load_level_tiles(false);
		}
		else if (netMessage->code == NETRESUME)
    c7b2:	9d 30       	cpi	r25, 0x0D	; 13
    c7b4:	d1 f4       	brne	.+52     	; 0xc7ea <get_net_message+0x212>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c7b6:	24 e0       	ldi	r18, 0x04	; 4
    c7b8:	40 91 cf 0f 	lds	r20, 0x0FCF
    c7bc:	60 91 59 0c 	lds	r22, 0x0C59
    c7c0:	80 91 c9 0b 	lds	r24, 0x0BC9
    c7c4:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			game.paused = 0;
    c7c8:	10 92 b8 0b 	sts	0x0BB8, r1
			load_level_tiles(false);
    c7cc:	80 e0       	ldi	r24, 0x00	; 0
	}
	else
	{
		state->pressed = 0;
	}
}
    c7ce:	df 91       	pop	r29
    c7d0:	cf 91       	pop	r28
    c7d2:	1f 91       	pop	r17
    c7d4:	0f 91       	pop	r16
    c7d6:	ff 90       	pop	r15
    c7d8:	ef 90       	pop	r14
    c7da:	df 90       	pop	r13
    c7dc:	cf 90       	pop	r12
    c7de:	bf 90       	pop	r11
    c7e0:	af 90       	pop	r10
    c7e2:	9f 90       	pop	r9
    c7e4:	8f 90       	pop	r8
		}
		else if (netMessage->code == NETRESUME)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			game.paused = 0;
			load_level_tiles(false);
    c7e6:	0c 94 83 57 	jmp	0xaf06	; 0xaf06 <load_level_tiles>
		}
		else if (netMessage->code == NETHIT)
    c7ea:	91 11       	cpse	r25, r1
    c7ec:	18 c0       	rjmp	.+48     	; 0xc81e <get_net_message+0x246>
		{
			init_shot_state(&otherPlayer->shot[0], otherPlayer->shot[0].shot_type);
    c7ee:	f7 01       	movw	r30, r14
    c7f0:	61 a5       	ldd	r22, Z+41	; 0x29
    c7f2:	c7 01       	movw	r24, r14
    c7f4:	81 96       	adiw	r24, 0x21	; 33
    c7f6:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			otherPlayer->active_shots = 0;
    c7fa:	f7 01       	movw	r30, r14
    c7fc:	14 82       	std	Z+4, r1	; 0x04
			otherPlayer->netMessage.level_score++;
    c7fe:	e0 59       	subi	r30, 0x90	; 144
    c800:	ff 4f       	sbci	r31, 0xFF	; 255
    c802:	80 81       	ld	r24, Z
    c804:	8f 5f       	subi	r24, 0xFF	; 255
    c806:	80 83       	st	Z, r24
			otherPlayer->netMessage.score++;
    c808:	31 97       	sbiw	r30, 0x01	; 1
    c80a:	80 81       	ld	r24, Z
    c80c:	8f 5f       	subi	r24, 0xFF	; 255
    c80e:	80 83       	st	Z, r24
			render_score(otherPlayer, otherPlayerHudX);
    c810:	6c 2d       	mov	r22, r12
    c812:	c7 01       	movw	r24, r14
    c814:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
			kill_player(player, playerHudX);
    c818:	6d 2d       	mov	r22, r13
    c81a:	c8 01       	movw	r24, r16
    c81c:	12 c0       	rjmp	.+36     	; 0xc842 <get_net_message+0x26a>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETHITBYTURRET)
    c81e:	91 30       	cpi	r25, 0x01	; 1
    c820:	09 f5       	brne	.+66     	; 0xc864 <get_net_message+0x28c>
		{
			game.boss_fight_player_lives--;
    c822:	80 91 bb 0b 	lds	r24, 0x0BBB
    c826:	81 50       	subi	r24, 0x01	; 1
    c828:	80 93 bb 0b 	sts	0x0BBB, r24
			if (game.boss_fight_player_lives <= 0)
    c82c:	81 11       	cpse	r24, r1
    c82e:	03 c0       	rjmp	.+6      	; 0xc836 <get_net_message+0x25e>
			{
				game.boss_fight_status = BOSS_FIGHT_LOST;
    c830:	80 e1       	ldi	r24, 0x10	; 16
    c832:	80 93 b9 0b 	sts	0x0BB9, r24
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c836:	60 91 ba 0b 	lds	r22, 0x0BBA
    c83a:	80 91 c5 0b 	lds	r24, 0x0BC5
    c83e:	90 91 c6 0b 	lds	r25, 0x0BC6
    c842:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
    c846:	86 e0       	ldi	r24, 0x06	; 6
	}
	else
	{
		state->pressed = 0;
	}
}
    c848:	df 91       	pop	r29
    c84a:	cf 91       	pop	r28
    c84c:	1f 91       	pop	r17
    c84e:	0f 91       	pop	r16
    c850:	ff 90       	pop	r15
    c852:	ef 90       	pop	r14
    c854:	df 90       	pop	r13
    c856:	cf 90       	pop	r12
    c858:	bf 90       	pop	r11
    c85a:	af 90       	pop	r10
    c85c:	9f 90       	pop	r9
    c85e:	8f 90       	pop	r8
    c860:	0c 94 fe 49 	jmp	0x93fc	; 0x93fc <LBPlaySound.part.5>
				game.boss_fight_status = BOSS_FIGHT_LOST;
			}
			kill_player(game.boss_fight_player, game.boss_fight_player_hud);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		}
		else if (netMessage->code == NETITEMBOMB)
    c864:	95 30       	cpi	r25, 0x05	; 5
    c866:	59 f5       	brne	.+86     	; 0xc8be <get_net_message+0x2e6>
		{
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c868:	6b 81       	ldd	r22, Y+3	; 0x03
    c86a:	8a 81       	ldd	r24, Y+2	; 0x02
    c86c:	9e e1       	ldi	r25, 0x1E	; 30
    c86e:	69 9f       	mul	r22, r25
    c870:	f0 01       	movw	r30, r0
    c872:	11 24       	eor	r1, r1
    c874:	e1 59       	subi	r30, 0x91	; 145
    c876:	f3 4f       	sbci	r31, 0xF3	; 243
    c878:	e8 0f       	add	r30, r24
    c87a:	f1 1d       	adc	r31, r1
    c87c:	11 82       	std	Z+1, r1	; 0x01
			SetTile(netMessage->object_pos_x, netMessage->object_pos_y, 0);
    c87e:	40 e0       	ldi	r20, 0x00	; 0
    c880:	50 e0       	ldi	r21, 0x00	; 0
    c882:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
			if (!(otherPlayer->netMessage.flags & EXPLODING_FLAG))
    c886:	f7 01       	movw	r30, r14
    c888:	ef 58       	subi	r30, 0x8F	; 143
    c88a:	ff 4f       	sbci	r31, 0xFF	; 255
    c88c:	80 81       	ld	r24, Z
    c88e:	80 fd       	sbrc	r24, 0
    c890:	07 c0       	rjmp	.+14     	; 0xc8a0 <get_net_message+0x2c8>
			{
				kill_player(otherPlayer, otherPlayerHudX);
    c892:	6c 2d       	mov	r22, r12
    c894:	c7 01       	movw	r24, r14
    c896:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
    c89a:	86 e0       	ldi	r24, 0x06	; 6
    c89c:	0e 94 fe 49 	call	0x93fc	; 0x93fc <LBPlaySound.part.5>
				LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			}
			player->netMessage.level_score++;
    c8a0:	f8 01       	movw	r30, r16
    c8a2:	e0 59       	subi	r30, 0x90	; 144
    c8a4:	ff 4f       	sbci	r31, 0xFF	; 255
    c8a6:	80 81       	ld	r24, Z
    c8a8:	8f 5f       	subi	r24, 0xFF	; 255
    c8aa:	80 83       	st	Z, r24
			player->netMessage.score++;
    c8ac:	31 97       	sbiw	r30, 0x01	; 1
    c8ae:	80 81       	ld	r24, Z
    c8b0:	8f 5f       	subi	r24, 0xFF	; 255
    c8b2:	80 83       	st	Z, r24
			render_score(player, playerHudX);
    c8b4:	6d 2d       	mov	r22, r13
    c8b6:	c8 01       	movw	r24, r16
    c8b8:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
    c8bc:	4f cf       	rjmp	.-354    	; 0xc75c <get_net_message+0x184>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (netMessage->code == NETBLOCKHIT)
    c8be:	9e 30       	cpi	r25, 0x0E	; 14
    c8c0:	31 f5       	brne	.+76     	; 0xc90e <get_net_message+0x336>
		{
			explode_tile(&tile_animations, netMessage->object_pos_y * 30 + netMessage->object_pos_x);
    c8c2:	8b 81       	ldd	r24, Y+3	; 0x03
    c8c4:	6a 81       	ldd	r22, Y+2	; 0x02
    c8c6:	70 e0       	ldi	r23, 0x00	; 0
    c8c8:	ee e1       	ldi	r30, 0x1E	; 30
    c8ca:	8e 9f       	mul	r24, r30
    c8cc:	60 0d       	add	r22, r0
    c8ce:	71 1d       	adc	r23, r1
    c8d0:	11 24       	eor	r1, r1
    c8d2:	8a ec       	ldi	r24, 0xCA	; 202
    c8d4:	9b e0       	ldi	r25, 0x0B	; 11
    c8d6:	0e 94 69 56 	call	0xacd2	; 0xacd2 <explode_tile>
			level.level_map[netMessage->object_pos_y * 30 + netMessage->object_pos_x] = L_EMPTY;
    c8da:	eb 81       	ldd	r30, Y+3	; 0x03
    c8dc:	8e e1       	ldi	r24, 0x1E	; 30
    c8de:	e8 9f       	mul	r30, r24
    c8e0:	f0 01       	movw	r30, r0
    c8e2:	11 24       	eor	r1, r1
    c8e4:	8a 81       	ldd	r24, Y+2	; 0x02
    c8e6:	e1 59       	subi	r30, 0x91	; 145
    c8e8:	f3 4f       	sbci	r31, 0xF3	; 243
    c8ea:	e8 0f       	add	r30, r24
    c8ec:	f1 1d       	adc	r31, r1
    c8ee:	11 82       	std	Z+1, r1	; 0x01
			player->shot[0].hit_count--;
    c8f0:	f8 01       	movw	r30, r16
    c8f2:	82 a5       	ldd	r24, Z+42	; 0x2a
    c8f4:	81 50       	subi	r24, 0x01	; 1
    c8f6:	82 a7       	std	Z+42, r24	; 0x2a
			if (player->shot[0].hit_count <= 0)
    c8f8:	81 11       	cpse	r24, r1
    c8fa:	07 c0       	rjmp	.+14     	; 0xc90a <get_net_message+0x332>
			{
				init_shot_state(&player->shot[0], player->shot[0].shot_type);
    c8fc:	61 a5       	ldd	r22, Z+41	; 0x29
    c8fe:	c8 01       	movw	r24, r16
    c900:	81 96       	adiw	r24, 0x21	; 33
    c902:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
				player->active_shots = 0;
    c906:	f8 01       	movw	r30, r16
    c908:	14 82       	std	Z+4, r1	; 0x04
			}
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
    c90a:	20 e0       	ldi	r18, 0x00	; 0
    c90c:	03 c0       	rjmp	.+6      	; 0xc914 <get_net_message+0x33c>
		}
		else if (netMessage->code == NETHANDLESELECT)
    c90e:	99 30       	cpi	r25, 0x09	; 9
    c910:	a9 f4       	brne	.+42     	; 0xc93c <get_net_message+0x364>
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c912:	24 e0       	ldi	r18, 0x04	; 4
    c914:	40 91 cf 0f 	lds	r20, 0x0FCF
    c918:	60 91 59 0c 	lds	r22, 0x0C59
    c91c:	80 91 c9 0b 	lds	r24, 0x0BC9
	}
	else
	{
		state->pressed = 0;
	}
}
    c920:	df 91       	pop	r29
    c922:	cf 91       	pop	r28
    c924:	1f 91       	pop	r17
    c926:	0f 91       	pop	r16
    c928:	ff 90       	pop	r15
    c92a:	ef 90       	pop	r14
    c92c:	df 90       	pop	r13
    c92e:	cf 90       	pop	r12
    c930:	bf 90       	pop	r11
    c932:	af 90       	pop	r10
    c934:	9f 90       	pop	r9
    c936:	8f 90       	pop	r8
			}
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
		}
		else if (netMessage->code == NETHANDLESELECT)
		{
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    c938:	0c 94 da 4c 	jmp	0x99b4	; 0x99b4 <LBPlaySound>
	}
	else
	{
		state->pressed = 0;
	}
}
    c93c:	df 91       	pop	r29
    c93e:	cf 91       	pop	r28
    c940:	1f 91       	pop	r17
    c942:	0f 91       	pop	r16
    c944:	ff 90       	pop	r15
    c946:	ef 90       	pop	r14
    c948:	df 90       	pop	r13
    c94a:	cf 90       	pop	r12
    c94c:	bf 90       	pop	r11
    c94e:	af 90       	pop	r10
    c950:	9f 90       	pop	r9
    c952:	8f 90       	pop	r8
    c954:	08 95       	ret

0000c956 <send_net_message>:
		send_net_message(code, 0, 0, acknowlege);
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
    c956:	ff 92       	push	r15
    c958:	0f 93       	push	r16
    c95a:	1f 93       	push	r17
    c95c:	cf 93       	push	r28
    c95e:	df 93       	push	r29
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
	u8 counter = 0;
	u8 result = 0;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
    c960:	90 91 c9 0b 	lds	r25, 0x0BC9
    c964:	3e ef       	ldi	r19, 0xFE	; 254
    c966:	39 0f       	add	r19, r25
    c968:	32 30       	cpi	r19, 0x02	; 2
    c96a:	c8 f5       	brcc	.+114    	; 0xc9de <send_net_message+0x88>
	if (game.selection == JOINNETGAME)
    c96c:	93 30       	cpi	r25, 0x03	; 3
    c96e:	29 f4       	brne	.+10     	; 0xc97a <send_net_message+0x24>
	{
		netMessage = &player2.netMessage;
		otherNetMessage = &player1.netMessage;
    c970:	03 e5       	ldi	r16, 0x53	; 83
    c972:	1c e0       	ldi	r17, 0x0C	; 12
	u8 result = 0;
	
	if (game.selection != HOSTNETGAME && game.selection != JOINNETGAME) return;
	if (game.selection == JOINNETGAME)
	{
		netMessage = &player2.netMessage;
    c974:	c9 ec       	ldi	r28, 0xC9	; 201
    c976:	df e0       	ldi	r29, 0x0F	; 15
    c978:	04 c0       	rjmp	.+8      	; 0xc982 <send_net_message+0x2c>
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
    c97a:	09 ec       	ldi	r16, 0xC9	; 201
    c97c:	1f e0       	ldi	r17, 0x0F	; 15
	}
}

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
    c97e:	c3 e5       	ldi	r28, 0x53	; 83
    c980:	dc e0       	ldi	r29, 0x0C	; 12
    c982:	f2 2e       	mov	r15, r18
	if (game.selection == JOINNETGAME)
	{
		netMessage = &player2.netMessage;
		otherNetMessage = &player1.netMessage;
	}
	netMessage->code = code;
    c984:	88 83       	st	Y, r24
	netMessage->send_ack = acknowledge;
    c986:	29 83       	std	Y+1, r18	; 0x01
	netMessage->object_pos_x = object_pos_x;
    c988:	6a 83       	std	Y+2, r22	; 0x02
	netMessage->object_pos_y = object_pos_y;
    c98a:	4b 83       	std	Y+3, r20	; 0x03
	sendNetMessage(netMessage);
    c98c:	ce 01       	movw	r24, r28
    c98e:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <sendNetMessage>
    if (acknowledge)
    c992:	ff 20       	and	r15, r15
    c994:	21 f1       	breq	.+72     	; 0xc9de <send_net_message+0x88>
	{
		result = getNetMessage(otherNetMessage);
    c996:	c8 01       	movw	r24, r16
    c998:	0e 94 ea 4c 	call	0x99d4	; 0x99d4 <getNetMessage>

void send_net_message(u8 code, u8 object_pos_x, u8 object_pos_y, u8 acknowledge)
{	
	NetMessage* netMessage = &player1.netMessage;
	NetMessage* otherNetMessage = &player2.netMessage;
	u8 counter = 0;
    c99c:	f1 2c       	mov	r15, r1
	netMessage->object_pos_y = object_pos_y;
	sendNetMessage(netMessage);
    if (acknowledge)
	{
		result = getNetMessage(otherNetMessage);
		while (result == WIFI_NODATA || otherNetMessage->code != NETACK)
    c99e:	82 30       	cpi	r24, 0x02	; 2
    c9a0:	d1 f4       	brne	.+52     	; 0xc9d6 <send_net_message+0x80>
		{
			if (otherNetMessage->send_ack && result != WIFI_NODATA)
    c9a2:	f8 01       	movw	r30, r16
    c9a4:	91 81       	ldd	r25, Z+1	; 0x01
    c9a6:	99 23       	and	r25, r25
    c9a8:	31 f0       	breq	.+12     	; 0xc9b6 <send_net_message+0x60>
    c9aa:	82 30       	cpi	r24, 0x02	; 2
    c9ac:	21 f0       	breq	.+8      	; 0xc9b6 <send_net_message+0x60>
			{
				get_net_message(1);
    c9ae:	81 e0       	ldi	r24, 0x01	; 1
    c9b0:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <get_net_message>
    c9b4:	0c c0       	rjmp	.+24     	; 0xc9ce <send_net_message+0x78>
			}
			else
			{
				WaitVsync(1);
    c9b6:	81 e0       	ldi	r24, 0x01	; 1
    c9b8:	90 e0       	ldi	r25, 0x00	; 0
    c9ba:	0e 94 a4 49 	call	0x9348	; 0x9348 <WaitVsync>
				counter++;
    c9be:	f3 94       	inc	r15
				if (counter > 60)
    c9c0:	fc e3       	ldi	r31, 0x3C	; 60
    c9c2:	ff 15       	cp	r31, r15
    c9c4:	20 f4       	brcc	.+8      	; 0xc9ce <send_net_message+0x78>
				{
					sendNetMessage(netMessage);
    c9c6:	ce 01       	movw	r24, r28
    c9c8:	0e 94 e7 4c 	call	0x99ce	; 0x99ce <sendNetMessage>
					counter = 0;
    c9cc:	f1 2c       	mov	r15, r1
				}
			}
			result = getNetMessage(otherNetMessage);
    c9ce:	c8 01       	movw	r24, r16
    c9d0:	0e 94 ea 4c 	call	0x99d4	; 0x99d4 <getNetMessage>
    c9d4:	e4 cf       	rjmp	.-56     	; 0xc99e <send_net_message+0x48>
	netMessage->object_pos_y = object_pos_y;
	sendNetMessage(netMessage);
    if (acknowledge)
	{
		result = getNetMessage(otherNetMessage);
		while (result == WIFI_NODATA || otherNetMessage->code != NETACK)
    c9d6:	f8 01       	movw	r30, r16
    c9d8:	90 81       	ld	r25, Z
    c9da:	9f 30       	cpi	r25, 0x0F	; 15
    c9dc:	11 f7       	brne	.-60     	; 0xc9a2 <send_net_message+0x4c>
				}
			}
			result = getNetMessage(otherNetMessage);
		}
	}
}
    c9de:	df 91       	pop	r29
    c9e0:	cf 91       	pop	r28
    c9e2:	1f 91       	pop	r17
    c9e4:	0f 91       	pop	r16
    c9e6:	ff 90       	pop	r15
    c9e8:	08 95       	ret

0000c9ea <send_smart_net_message>:
} 
#endif


void send_smart_net_message(Player* player, JoyPadState* p, u8 code, u8 acknowlege)
{
    c9ea:	54 2f       	mov	r21, r20
	if (game.selection == HOSTNETGAME && player == &player1)
    c9ec:	30 91 c9 0b 	lds	r19, 0x0BC9
    c9f0:	32 30       	cpi	r19, 0x02	; 2
    c9f2:	41 f4       	brne	.+16     	; 0xca04 <send_smart_net_message+0x1a>
    c9f4:	88 5e       	subi	r24, 0xE8	; 232
    c9f6:	9b 40       	sbci	r25, 0x0B	; 11
    c9f8:	51 f4       	brne	.+20     	; 0xca0e <send_smart_net_message+0x24>
	{
		send_net_message(code, 0, 0, acknowlege);
    c9fa:	40 e0       	ldi	r20, 0x00	; 0
    c9fc:	60 e0       	ldi	r22, 0x00	; 0
    c9fe:	85 2f       	mov	r24, r21
    ca00:	0c 94 ab 64 	jmp	0xc956	; 0xc956 <send_net_message>
	}
	else if (game.selection == JOINNETGAME && player == &player2)
    ca04:	33 30       	cpi	r19, 0x03	; 3
    ca06:	19 f4       	brne	.+6      	; 0xca0e <send_smart_net_message+0x24>
    ca08:	8e 55       	subi	r24, 0x5E	; 94
    ca0a:	9f 40       	sbci	r25, 0x0F	; 15
    ca0c:	b1 f3       	breq	.-20     	; 0xc9fa <send_smart_net_message+0x10>
    ca0e:	08 95       	ret

0000ca10 <is_net_player>:
		state->pressed = 0;
	}
}

u8 is_net_player(Player* player)
{
    ca10:	9c 01       	movw	r18, r24
	if (game.selection == HOSTNETGAME && player == &player2) return 1;
    ca12:	80 91 c9 0b 	lds	r24, 0x0BC9
    ca16:	82 30       	cpi	r24, 0x02	; 2
    ca18:	29 f4       	brne	.+10     	; 0xca24 <is_net_player+0x14>
    ca1a:	81 e0       	ldi	r24, 0x01	; 1
    ca1c:	2e 55       	subi	r18, 0x5E	; 94
    ca1e:	3f 40       	sbci	r19, 0x0F	; 15
    ca20:	39 f4       	brne	.+14     	; 0xca30 <is_net_player+0x20>
    ca22:	07 c0       	rjmp	.+14     	; 0xca32 <is_net_player+0x22>
	if (game.selection == JOINNETGAME && player == &player1) return 1;
    ca24:	83 30       	cpi	r24, 0x03	; 3
    ca26:	21 f4       	brne	.+8      	; 0xca30 <is_net_player+0x20>
    ca28:	81 e0       	ldi	r24, 0x01	; 1
    ca2a:	28 5e       	subi	r18, 0xE8	; 232
    ca2c:	3b 40       	sbci	r19, 0x0B	; 11
    ca2e:	09 f0       	breq	.+2      	; 0xca32 <is_net_player+0x22>
	return 0;
    ca30:	80 e0       	ldi	r24, 0x00	; 0
}
    ca32:	08 95       	ret

0000ca34 <resolve_scoring>:
		}
	}
}

void resolve_scoring()
{
    ca34:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    ca36:	c0 91 b7 0b 	lds	r28, 0x0BB7
    ca3a:	80 91 58 0c 	lds	r24, 0x0C58
    ca3e:	ca 30       	cpi	r28, 0x0A	; 10
    ca40:	08 f0       	brcs	.+2      	; 0xca44 <resolve_scoring+0x10>
    ca42:	43 c0       	rjmp	.+134    	; 0xcaca <resolve_scoring+0x96>
	{
		if (player1.netMessage.level_score >= MAX_LEVEL_SCORE && !is_net_player(&player1))
    ca44:	8a 30       	cpi	r24, 0x0A	; 10
    ca46:	b8 f0       	brcs	.+46     	; 0xca76 <resolve_scoring+0x42>
    ca48:	88 ee       	ldi	r24, 0xE8	; 232
    ca4a:	9b e0       	ldi	r25, 0x0B	; 11
    ca4c:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    ca50:	81 11       	cpse	r24, r1
    ca52:	11 c0       	rjmp	.+34     	; 0xca76 <resolve_scoring+0x42>
		{
			next_level = game.current_level + 1;
    ca54:	cf 5f       	subi	r28, 0xFF	; 255
			send_net_message(NETNEXTLEVEL, next_level, 0, 1);
    ca56:	21 e0       	ldi	r18, 0x01	; 1
    ca58:	40 e0       	ldi	r20, 0x00	; 0
    ca5a:	6c 2f       	mov	r22, r28
    ca5c:	80 e1       	ldi	r24, 0x10	; 16
    ca5e:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
			LBHideAllSprites();
    ca62:	0e 94 d0 4c 	call	0x99a0	; 0x99a0 <LBHideAllSprites>
			load_level_tiles(true);
    ca66:	81 e0       	ldi	r24, 0x01	; 1
    ca68:	0e 94 83 57 	call	0xaf06	; 0xaf06 <load_level_tiles>
			print_level_score(&player1, &player2);
    ca6c:	6e e5       	ldi	r22, 0x5E	; 94
    ca6e:	7f e0       	ldi	r23, 0x0F	; 15
    ca70:	88 ee       	ldi	r24, 0xE8	; 232
    ca72:	9b e0       	ldi	r25, 0x0B	; 11
    ca74:	1b c0       	rjmp	.+54     	; 0xcaac <resolve_scoring+0x78>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.netMessage.level_score >= MAX_LEVEL_SCORE && !is_net_player(&player2))
    ca76:	80 91 ce 0f 	lds	r24, 0x0FCE
    ca7a:	8a 30       	cpi	r24, 0x0A	; 10
    ca7c:	08 f4       	brcc	.+2      	; 0xca80 <resolve_scoring+0x4c>
    ca7e:	b5 c0       	rjmp	.+362    	; 0xcbea <resolve_scoring+0x1b6>
    ca80:	8e e5       	ldi	r24, 0x5E	; 94
    ca82:	9f e0       	ldi	r25, 0x0F	; 15
    ca84:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    ca88:	81 11       	cpse	r24, r1
    ca8a:	af c0       	rjmp	.+350    	; 0xcbea <resolve_scoring+0x1b6>
		{
			next_level = game.current_level + 1;
    ca8c:	cf 5f       	subi	r28, 0xFF	; 255
			send_net_message(NETNEXTLEVEL, next_level, 0, 1);
    ca8e:	21 e0       	ldi	r18, 0x01	; 1
    ca90:	40 e0       	ldi	r20, 0x00	; 0
    ca92:	6c 2f       	mov	r22, r28
    ca94:	80 e1       	ldi	r24, 0x10	; 16
    ca96:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
			LBHideAllSprites();
    ca9a:	0e 94 d0 4c 	call	0x99a0	; 0x99a0 <LBHideAllSprites>
			load_level_tiles(true);
    ca9e:	81 e0       	ldi	r24, 0x01	; 1
    caa0:	0e 94 83 57 	call	0xaf06	; 0xaf06 <load_level_tiles>
			print_level_score(&player2, &player1);
    caa4:	68 ee       	ldi	r22, 0xE8	; 232
    caa6:	7b e0       	ldi	r23, 0x0B	; 11
    caa8:	8e e5       	ldi	r24, 0x5E	; 94
    caaa:	9f e0       	ldi	r25, 0x0F	; 15
    caac:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    cab0:	6c e1       	ldi	r22, 0x1C	; 28
    cab2:	84 e0       	ldi	r24, 0x04	; 4
    cab4:	90 e0       	ldi	r25, 0x00	; 0
    cab6:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    caba:	10 92 58 0c 	sts	0x0C58, r1
			player2.netMessage.level_score = 0;
    cabe:	10 92 ce 0f 	sts	0x0FCE, r1
			level_transition(next_level);
    cac2:	8c 2f       	mov	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			exit_game();
		}
	}
}
    cac4:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			player1.netMessage.level_score = 0;
			player2.netMessage.level_score = 0;
			level_transition(next_level);
    cac6:	0c 94 c3 58 	jmp	0xb186	; 0xb186 <level_transition>
		}
	}
	else
	{
		if ((player1.netMessage.level_score >= MAX_LEVEL_SCORE) || (player2.netMessage.level_score >= MAX_LEVEL_SCORE))
    caca:	8a 30       	cpi	r24, 0x0A	; 10
    cacc:	28 f4       	brcc	.+10     	; 0xcad8 <resolve_scoring+0xa4>
    cace:	80 91 ce 0f 	lds	r24, 0x0FCE
    cad2:	8a 30       	cpi	r24, 0x0A	; 10
    cad4:	08 f4       	brcc	.+2      	; 0xcad8 <resolve_scoring+0xa4>
    cad6:	89 c0       	rjmp	.+274    	; 0xcbea <resolve_scoring+0x1b6>
		{
			// Tie Breaker
			if (player1.netMessage.score == player2.netMessage.score) return;
    cad8:	90 91 57 0c 	lds	r25, 0x0C57
    cadc:	80 91 cd 0f 	lds	r24, 0x0FCD
    cae0:	98 17       	cp	r25, r24
    cae2:	09 f4       	brne	.+2      	; 0xcae6 <resolve_scoring+0xb2>
    cae4:	82 c0       	rjmp	.+260    	; 0xcbea <resolve_scoring+0x1b6>
			
			if (game.boss_fight_status == 0)
    cae6:	20 91 b9 0b 	lds	r18, 0x0BB9
    caea:	21 11       	cpse	r18, r1
    caec:	46 c0       	rjmp	.+140    	; 0xcb7a <resolve_scoring+0x146>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    caee:	c1 e0       	ldi	r28, 0x01	; 1
    caf0:	c0 93 b9 0b 	sts	0x0BB9, r28
				if (player1.netMessage.score > player2.netMessage.score)
    caf4:	89 17       	cp	r24, r25
    caf6:	e8 f4       	brcc	.+58     	; 0xcb32 <resolve_scoring+0xfe>
				{
					game.boss_fight_player = &player1;
    caf8:	88 ee       	ldi	r24, 0xE8	; 232
    cafa:	9b e0       	ldi	r25, 0x0B	; 11
    cafc:	90 93 c6 0b 	sts	0x0BC6, r25
    cb00:	80 93 c5 0b 	sts	0x0BC5, r24
					game.boss_fight_joypad = &player1.netMessage.joyPadState;
    cb04:	82 e6       	ldi	r24, 0x62	; 98
    cb06:	9c e0       	ldi	r25, 0x0C	; 12
    cb08:	90 93 c8 0b 	sts	0x0BC8, r25
    cb0c:	80 93 c7 0b 	sts	0x0BC7, r24
					game.boss_fight_player_hud = 0;
    cb10:	10 92 ba 0b 	sts	0x0BBA, r1
					kill_player(&player2, 15);
    cb14:	6f e0       	ldi	r22, 0x0F	; 15
    cb16:	8e e5       	ldi	r24, 0x5E	; 94
    cb18:	9f e0       	ldi	r25, 0x0F	; 15
    cb1a:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
					player_spawn(&player2);
    cb1e:	8e e5       	ldi	r24, 0x5E	; 94
    cb20:	9f e0       	ldi	r25, 0x0F	; 15
    cb22:	0e 94 57 4f 	call	0x9eae	; 0x9eae <player_spawn>
					player2.netMessage.flags = player2.netMessage.flags ^ EXPLODING_FLAG;
    cb26:	80 91 cf 0f 	lds	r24, 0x0FCF
    cb2a:	c8 27       	eor	r28, r24
    cb2c:	c0 93 cf 0f 	sts	0x0FCF, r28
    cb30:	1d c0       	rjmp	.+58     	; 0xcb6c <resolve_scoring+0x138>
				}
				else
				{
					game.boss_fight_player = &player2;
    cb32:	8e e5       	ldi	r24, 0x5E	; 94
    cb34:	9f e0       	ldi	r25, 0x0F	; 15
    cb36:	90 93 c6 0b 	sts	0x0BC6, r25
    cb3a:	80 93 c5 0b 	sts	0x0BC5, r24
					game.boss_fight_joypad = &player2.netMessage.joyPadState;
    cb3e:	88 ed       	ldi	r24, 0xD8	; 216
    cb40:	9f e0       	ldi	r25, 0x0F	; 15
    cb42:	90 93 c8 0b 	sts	0x0BC8, r25
    cb46:	80 93 c7 0b 	sts	0x0BC7, r24
					game.boss_fight_player_hud = 15;
    cb4a:	8f e0       	ldi	r24, 0x0F	; 15
    cb4c:	80 93 ba 0b 	sts	0x0BBA, r24
					kill_player(&player1, 0);
    cb50:	60 e0       	ldi	r22, 0x00	; 0
    cb52:	88 ee       	ldi	r24, 0xE8	; 232
    cb54:	9b e0       	ldi	r25, 0x0B	; 11
    cb56:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
					player_spawn(&player1);
    cb5a:	88 ee       	ldi	r24, 0xE8	; 232
    cb5c:	9b e0       	ldi	r25, 0x0B	; 11
    cb5e:	0e 94 57 4f 	call	0x9eae	; 0x9eae <player_spawn>
					player1.netMessage.flags = player1.netMessage.flags ^ EXPLODING_FLAG;
    cb62:	80 91 59 0c 	lds	r24, 0x0C59
    cb66:	c8 27       	eor	r28, r24
    cb68:	c0 93 59 0c 	sts	0x0C59, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    cb6c:	85 ea       	ldi	r24, 0xA5	; 165
    cb6e:	90 e0       	ldi	r25, 0x00	; 0
    cb70:	90 93 00 10 	sts	0x1000, r25
    cb74:	80 93 ff 0f 	sts	0x0FFF, r24
				return;
    cb78:	38 c0       	rjmp	.+112    	; 0xcbea <resolve_scoring+0x1b6>
			}
			
			// Print level score
			LBHideAllSprites();
    cb7a:	0e 94 d0 4c 	call	0x99a0	; 0x99a0 <LBHideAllSprites>
			load_level_tiles(true);
    cb7e:	81 e0       	ldi	r24, 0x01	; 1
    cb80:	0e 94 83 57 	call	0xaf06	; 0xaf06 <load_level_tiles>
			if (player1.netMessage.level_score > player2.netMessage.level_score)
    cb84:	90 91 58 0c 	lds	r25, 0x0C58
    cb88:	80 91 ce 0f 	lds	r24, 0x0FCE
    cb8c:	89 17       	cp	r24, r25
    cb8e:	28 f4       	brcc	.+10     	; 0xcb9a <resolve_scoring+0x166>
				print_level_score(&player1, &player2);
    cb90:	6e e5       	ldi	r22, 0x5E	; 94
    cb92:	7f e0       	ldi	r23, 0x0F	; 15
    cb94:	88 ee       	ldi	r24, 0xE8	; 232
    cb96:	9b e0       	ldi	r25, 0x0B	; 11
    cb98:	04 c0       	rjmp	.+8      	; 0xcba2 <resolve_scoring+0x16e>
			else
				print_level_score(&player2, &player1);
    cb9a:	68 ee       	ldi	r22, 0xE8	; 232
    cb9c:	7b e0       	ldi	r23, 0x0B	; 11
    cb9e:	8e e5       	ldi	r24, 0x5E	; 94
    cba0:	9f e0       	ldi	r25, 0x0F	; 15
    cba2:	0e 94 6b 50 	call	0xa0d6	; 0xa0d6 <print_level_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    cba6:	6c e1       	ldi	r22, 0x1C	; 28
    cba8:	84 e0       	ldi	r24, 0x04	; 4
    cbaa:	90 e0       	ldi	r25, 0x00	; 0
    cbac:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
			player1.netMessage.level_score = 0;
    cbb0:	10 92 58 0c 	sts	0x0C58, r1
			player2.netMessage.level_score = 0;
    cbb4:	10 92 ce 0f 	sts	0x0FCE, r1
			
			// Print game score and exit
			if (player1.netMessage.score > player2.netMessage.score)
    cbb8:	90 91 57 0c 	lds	r25, 0x0C57
    cbbc:	80 91 cd 0f 	lds	r24, 0x0FCD
    cbc0:	89 17       	cp	r24, r25
    cbc2:	28 f4       	brcc	.+10     	; 0xcbce <resolve_scoring+0x19a>
				print_final_score(&player1, &player2);
    cbc4:	6e e5       	ldi	r22, 0x5E	; 94
    cbc6:	7f e0       	ldi	r23, 0x0F	; 15
    cbc8:	88 ee       	ldi	r24, 0xE8	; 232
    cbca:	9b e0       	ldi	r25, 0x0B	; 11
    cbcc:	04 c0       	rjmp	.+8      	; 0xcbd6 <resolve_scoring+0x1a2>
			else
				print_final_score(&player2, &player1);
    cbce:	68 ee       	ldi	r22, 0xE8	; 232
    cbd0:	7b e0       	ldi	r23, 0x0B	; 11
    cbd2:	8e e5       	ldi	r24, 0x5E	; 94
    cbd4:	9f e0       	ldi	r25, 0x0F	; 15
    cbd6:	0e 94 b1 50 	call	0xa162	; 0xa162 <print_final_score>
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
    cbda:	6c e1       	ldi	r22, 0x1C	; 28
    cbdc:	84 e0       	ldi	r24, 0x04	; 4
    cbde:	90 e0       	ldi	r25, 0x00	; 0
    cbe0:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
			exit_game();
		}
	}
}
    cbe4:	cf 91       	pop	r28
			if (player1.netMessage.score > player2.netMessage.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER, sizeof(player1.netMessage));
			exit_game();
    cbe6:	0c 94 9f 5a 	jmp	0xb53e	; 0xb53e <exit_game>
		}
	}
}
    cbea:	cf 91       	pop	r28
    cbec:	08 95       	ret

0000cbee <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    cbee:	2f 92       	push	r2
    cbf0:	3f 92       	push	r3
    cbf2:	4f 92       	push	r4
    cbf4:	5f 92       	push	r5
    cbf6:	6f 92       	push	r6
    cbf8:	7f 92       	push	r7
    cbfa:	8f 92       	push	r8
    cbfc:	9f 92       	push	r9
    cbfe:	af 92       	push	r10
    cc00:	bf 92       	push	r11
    cc02:	cf 92       	push	r12
    cc04:	df 92       	push	r13
    cc06:	ef 92       	push	r14
    cc08:	ff 92       	push	r15
    cc0a:	0f 93       	push	r16
    cc0c:	1f 93       	push	r17
    cc0e:	cf 93       	push	r28
    cc10:	df 93       	push	r29
    cc12:	cd b7       	in	r28, 0x3d	; 61
    cc14:	de b7       	in	r29, 0x3e	; 62
    cc16:	2a 97       	sbiw	r28, 0x0a	; 10
    cc18:	0f b6       	in	r0, 0x3f	; 63
    cc1a:	f8 94       	cli
    cc1c:	de bf       	out	0x3e, r29	; 62
    cc1e:	0f be       	out	0x3f, r0	; 63
    cc20:	cd bf       	out	0x3d, r28	; 61
    cc22:	3c 01       	movw	r6, r24
    cc24:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    cc26:	1a 82       	std	Y+2, r1	; 0x02
    cc28:	19 82       	std	Y+1, r1	; 0x01
    cc2a:	1c 82       	std	Y+4, r1	; 0x04
    cc2c:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 800;
	u8 y = shot->shared.y / 800 - 3;
    cc2e:	db 01       	movw	r26, r22
    cc30:	16 96       	adiw	r26, 0x06	; 6
    cc32:	8d 91       	ld	r24, X+
    cc34:	9c 91       	ld	r25, X
    cc36:	17 97       	sbiw	r26, 0x07	; 7
    cc38:	20 e2       	ldi	r18, 0x20	; 32
    cc3a:	33 e0       	ldi	r19, 0x03	; 3
    cc3c:	b9 01       	movw	r22, r18
    cc3e:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    cc42:	4d ef       	ldi	r20, 0xFD	; 253
    cc44:	46 0f       	add	r20, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 800;
    cc46:	f4 01       	movw	r30, r8
    cc48:	84 81       	ldd	r24, Z+4	; 0x04
    cc4a:	95 81       	ldd	r25, Z+5	; 0x05
    cc4c:	b9 01       	movw	r22, r18
    cc4e:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    cc52:	20 81       	ld	r18, Z
    cc54:	ce 01       	movw	r24, r28
    cc56:	01 96       	adiw	r24, 0x01	; 1
    cc58:	0e 94 47 56 	call	0xac8e	; 0xac8e <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    cc5c:	c4 01       	movw	r24, r8
    cc5e:	0e 94 9b 55 	call	0xab36	; 0xab36 <collision_detect_boundries>
    cc62:	88 23       	and	r24, r24
    cc64:	49 f0       	breq	.+18     	; 0xcc78 <collision_detect_shot+0x8a>
	{
		init_shot_state(shot, shot->shot_type);
    cc66:	d4 01       	movw	r26, r8
    cc68:	18 96       	adiw	r26, 0x08	; 8
    cc6a:	6c 91       	ld	r22, X
    cc6c:	c4 01       	movw	r24, r8
    cc6e:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
		player->active_shots = 0;
    cc72:	f3 01       	movw	r30, r6
    cc74:	14 82       	std	Z+4, r1	; 0x04
		return;
    cc76:	e3 c1       	rjmp	.+966    	; 0xd03e <collision_detect_shot+0x450>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.netMessage.flags & EXPLODING_FLAG) && !is_net_player(&player1))
    cc78:	b4 01       	movw	r22, r8
    cc7a:	88 ee       	ldi	r24, 0xE8	; 232
    cc7c:	9b e0       	ldi	r25, 0x0B	; 11
    cc7e:	0e 94 13 55 	call	0xaa26	; 0xaa26 <player_shot>
    cc82:	88 23       	and	r24, r24
    cc84:	19 f1       	breq	.+70     	; 0xcccc <collision_detect_shot+0xde>
    cc86:	80 91 59 0c 	lds	r24, 0x0C59
    cc8a:	80 fd       	sbrc	r24, 0
    cc8c:	1f c0       	rjmp	.+62     	; 0xcccc <collision_detect_shot+0xde>
    cc8e:	88 ee       	ldi	r24, 0xE8	; 232
    cc90:	9b e0       	ldi	r25, 0x0B	; 11
    cc92:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    cc96:	81 11       	cpse	r24, r1
    cc98:	19 c0       	rjmp	.+50     	; 0xcccc <collision_detect_shot+0xde>
	{
		p = &player1;
		hud_x = 0;
		player2.netMessage.level_score++;
    cc9a:	80 91 ce 0f 	lds	r24, 0x0FCE
    cc9e:	8f 5f       	subi	r24, 0xFF	; 255
    cca0:	80 93 ce 0f 	sts	0x0FCE, r24
		player2.netMessage.score++;
    cca4:	80 91 cd 0f 	lds	r24, 0x0FCD
    cca8:	8f 5f       	subi	r24, 0xFF	; 255
    ccaa:	80 93 cd 0f 	sts	0x0FCD, r24
		render_score(&player2, 15);
    ccae:	6f e0       	ldi	r22, 0x0F	; 15
    ccb0:	8e e5       	ldi	r24, 0x5E	; 94
    ccb2:	9f e0       	ldi	r25, 0x0F	; 15
    ccb4:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
		send_net_message(NETHIT, 0, 0, 0);
    ccb8:	20 e0       	ldi	r18, 0x00	; 0
    ccba:	40 e0       	ldi	r20, 0x00	; 0
    ccbc:	60 e0       	ldi	r22, 0x00	; 0
    ccbe:	80 e0       	ldi	r24, 0x00	; 0
    ccc0:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.netMessage.flags & EXPLODING_FLAG) && !is_net_player(&player1))
	{
		p = &player1;
    ccc4:	08 ee       	ldi	r16, 0xE8	; 232
    ccc6:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    ccc8:	f1 2c       	mov	r15, r1
		player2.netMessage.level_score++;
		player2.netMessage.score++;
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, 0);
    ccca:	86 c0       	rjmp	.+268    	; 0xcdd8 <collision_detect_shot+0x1ea>
	}
	else if (player_shot(&player2, shot) && !(player2.netMessage.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
    cccc:	b4 01       	movw	r22, r8
    ccce:	8e e5       	ldi	r24, 0x5E	; 94
    ccd0:	9f e0       	ldi	r25, 0x0F	; 15
    ccd2:	0e 94 13 55 	call	0xaa26	; 0xaa26 <player_shot>
    ccd6:	90 91 b9 0b 	lds	r25, 0x0BB9
    ccda:	88 23       	and	r24, r24
    ccdc:	31 f1       	breq	.+76     	; 0xcd2a <collision_detect_shot+0x13c>
    ccde:	80 91 cf 0f 	lds	r24, 0x0FCF
    cce2:	80 fd       	sbrc	r24, 0
    cce4:	22 c0       	rjmp	.+68     	; 0xcd2a <collision_detect_shot+0x13c>
    cce6:	91 11       	cpse	r25, r1
    cce8:	20 c0       	rjmp	.+64     	; 0xcd2a <collision_detect_shot+0x13c>
    ccea:	8e e5       	ldi	r24, 0x5E	; 94
    ccec:	9f e0       	ldi	r25, 0x0F	; 15
    ccee:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    ccf2:	81 11       	cpse	r24, r1
    ccf4:	74 c0       	rjmp	.+232    	; 0xcdde <collision_detect_shot+0x1f0>
	{
		p = &player2;
		hud_x = 15;
		player1.netMessage.level_score++;
    ccf6:	80 91 58 0c 	lds	r24, 0x0C58
    ccfa:	8f 5f       	subi	r24, 0xFF	; 255
    ccfc:	80 93 58 0c 	sts	0x0C58, r24
		player1.netMessage.score++;
    cd00:	80 91 57 0c 	lds	r24, 0x0C57
    cd04:	8f 5f       	subi	r24, 0xFF	; 255
    cd06:	80 93 57 0c 	sts	0x0C57, r24
		render_score(&player1, 0);
    cd0a:	60 e0       	ldi	r22, 0x00	; 0
    cd0c:	88 ee       	ldi	r24, 0xE8	; 232
    cd0e:	9b e0       	ldi	r25, 0x0B	; 11
    cd10:	0e 94 48 51 	call	0xa290	; 0xa290 <render_score>
		send_net_message(NETHIT, 0, 0, 0);
    cd14:	20 e0       	ldi	r18, 0x00	; 0
    cd16:	40 e0       	ldi	r20, 0x00	; 0
    cd18:	60 e0       	ldi	r22, 0x00	; 0
    cd1a:	80 e0       	ldi	r24, 0x00	; 0
    cd1c:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
		render_score(&player2, 15);
		send_net_message(NETHIT, 0, 0, 0);
	}
	else if (player_shot(&player2, shot) && !(player2.netMessage.flags & EXPLODING_FLAG) && !(game.boss_fight_status) && !is_net_player(&player2))
	{
		p = &player2;
    cd20:	0e e5       	ldi	r16, 0x5E	; 94
    cd22:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    cd24:	ef e0       	ldi	r30, 0x0F	; 15
    cd26:	fe 2e       	mov	r15, r30
		player1.netMessage.level_score++;
		player1.netMessage.score++;
		render_score(&player1, 0);
		send_net_message(NETHIT, 0, 0, 0);
    cd28:	57 c0       	rjmp	.+174    	; 0xcdd8 <collision_detect_shot+0x1ea>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cd2a:	94 30       	cpi	r25, 0x04	; 4
    cd2c:	09 f0       	breq	.+2      	; 0xcd30 <collision_detect_shot+0x142>
    cd2e:	57 c0       	rjmp	.+174    	; 0xcdde <collision_detect_shot+0x1f0>
	{
		if (turret_shot(&turret1, shot) && !is_net_player(game.boss_fight_player))
    cd30:	b4 01       	movw	r22, r8
    cd32:	80 e3       	ldi	r24, 0x30	; 48
    cd34:	90 e1       	ldi	r25, 0x10	; 16
    cd36:	0e 94 5e 55 	call	0xaabc	; 0xaabc <turret_shot>
    cd3a:	88 23       	and	r24, r24
    cd3c:	11 f1       	breq	.+68     	; 0xcd82 <collision_detect_shot+0x194>
    cd3e:	80 91 c5 0b 	lds	r24, 0x0BC5
    cd42:	90 91 c6 0b 	lds	r25, 0x0BC6
    cd46:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    cd4a:	81 11       	cpse	r24, r1
    cd4c:	1a c0       	rjmp	.+52     	; 0xcd82 <collision_detect_shot+0x194>
		{
			turret1.lives--;
    cd4e:	80 91 38 10 	lds	r24, 0x1038
    cd52:	81 50       	subi	r24, 0x01	; 1
    cd54:	80 93 38 10 	sts	0x1038, r24
			init_shot_state(shot, shot->shot_type);
    cd58:	d4 01       	movw	r26, r8
    cd5a:	18 96       	adiw	r26, 0x08	; 8
    cd5c:	6c 91       	ld	r22, X
    cd5e:	c4 01       	movw	r24, r8
    cd60:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    cd64:	e0 91 c5 0b 	lds	r30, 0x0BC5
    cd68:	f0 91 c6 0b 	lds	r31, 0x0BC6
    cd6c:	14 82       	std	Z+4, r1	; 0x04
    cd6e:	86 e0       	ldi	r24, 0x06	; 6
    cd70:	0e 94 fe 49 	call	0x93fc	; 0x93fc <LBPlaySound.part.5>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 1, turret1.lives, turret1.lives == 0);
    cd74:	40 91 38 10 	lds	r20, 0x1038
    cd78:	21 e0       	ldi	r18, 0x01	; 1
    cd7a:	41 11       	cpse	r20, r1
    cd7c:	20 e0       	ldi	r18, 0x00	; 0
    cd7e:	61 e0       	ldi	r22, 0x01	; 1
    cd80:	27 c0       	rjmp	.+78     	; 0xcdd0 <collision_detect_shot+0x1e2>
		}
		else if (turret_shot(&turret2, shot) && !is_net_player(game.boss_fight_player))
    cd82:	b4 01       	movw	r22, r8
    cd84:	81 e0       	ldi	r24, 0x01	; 1
    cd86:	90 e1       	ldi	r25, 0x10	; 16
    cd88:	0e 94 5e 55 	call	0xaabc	; 0xaabc <turret_shot>
    cd8c:	88 23       	and	r24, r24
    cd8e:	39 f1       	breq	.+78     	; 0xcdde <collision_detect_shot+0x1f0>
    cd90:	80 91 c5 0b 	lds	r24, 0x0BC5
    cd94:	90 91 c6 0b 	lds	r25, 0x0BC6
    cd98:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    cd9c:	81 11       	cpse	r24, r1
    cd9e:	1f c0       	rjmp	.+62     	; 0xcdde <collision_detect_shot+0x1f0>
		{
			turret2.lives--;
    cda0:	80 91 09 10 	lds	r24, 0x1009
    cda4:	81 50       	subi	r24, 0x01	; 1
    cda6:	80 93 09 10 	sts	0x1009, r24
			init_shot_state(shot, shot->shot_type);
    cdaa:	f4 01       	movw	r30, r8
    cdac:	60 85       	ldd	r22, Z+8	; 0x08
    cdae:	c4 01       	movw	r24, r8
    cdb0:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			game.boss_fight_player->active_shots = 0;
    cdb4:	e0 91 c5 0b 	lds	r30, 0x0BC5
    cdb8:	f0 91 c6 0b 	lds	r31, 0x0BC6
    cdbc:	14 82       	std	Z+4, r1	; 0x04
    cdbe:	86 e0       	ldi	r24, 0x06	; 6
    cdc0:	0e 94 fe 49 	call	0x93fc	; 0x93fc <LBPlaySound.part.5>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
    cdc4:	40 91 09 10 	lds	r20, 0x1009
    cdc8:	21 e0       	ldi	r18, 0x01	; 1
    cdca:	41 11       	cpse	r20, r1
    cdcc:	20 e0       	ldi	r18, 0x00	; 0
    cdce:	62 e0       	ldi	r22, 0x02	; 2
    cdd0:	8c e0       	ldi	r24, 0x0C	; 12
    cdd2:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
    cdd6:	03 c0       	rjmp	.+6      	; 0xcdde <collision_detect_shot+0x1f0>
		}
	}
	if (p)
    cdd8:	01 15       	cp	r16, r1
    cdda:	11 05       	cpc	r17, r1
    cddc:	81 f4       	brne	.+32     	; 0xcdfe <collision_detect_shot+0x210>
    cdde:	ce 01       	movw	r24, r28
    cde0:	01 96       	adiw	r24, 0x01	; 1
    cde2:	9a 87       	std	Y+10, r25	; 0x0a
    cde4:	89 87       	std	Y+9, r24	; 0x09
    cde6:	1e 82       	std	Y+6, r1	; 0x06
    cde8:	18 86       	std	Y+8, r1	; 0x08
    cdea:	1f 82       	std	Y+7, r1	; 0x07
    cdec:	1d 82       	std	Y+5, r1	; 0x05
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    cdee:	6e e1       	ldi	r22, 0x1E	; 30
    cdf0:	26 2e       	mov	r2, r22
    cdf2:	31 2c       	mov	r3, r1
    cdf4:	70 e2       	ldi	r23, 0x20	; 32
    cdf6:	47 2e       	mov	r4, r23
    cdf8:	73 e0       	ldi	r23, 0x03	; 3
    cdfa:	57 2e       	mov	r5, r23
    cdfc:	31 c0       	rjmp	.+98     	; 0xce60 <collision_detect_shot+0x272>
			send_net_message(NETTURRETHIT, 2, turret2.lives, turret2.lives == 0);
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    cdfe:	d4 01       	movw	r26, r8
    ce00:	18 96       	adiw	r26, 0x08	; 8
    ce02:	6c 91       	ld	r22, X
    ce04:	c4 01       	movw	r24, r8
    ce06:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
		player->active_shots = 0;
    ce0a:	f3 01       	movw	r30, r6
    ce0c:	14 82       	std	Z+4, r1	; 0x04
		kill_player(p, hud_x);
    ce0e:	6f 2d       	mov	r22, r15
    ce10:	c8 01       	movw	r24, r16
    ce12:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
    ce16:	86 e0       	ldi	r24, 0x06	; 6
    ce18:	0e 94 fe 49 	call	0x93fc	; 0x93fc <LBPlaySound.part.5>
    ce1c:	10 c1       	rjmp	.+544    	; 0xd03e <collision_detect_shot+0x450>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
    ce1e:	c7 01       	movw	r24, r14
    ce20:	0e 94 20 53 	call	0xa640	; 0xa640 <solid_directional_tile>
    ce24:	88 23       	and	r24, r24
    ce26:	49 f1       	breq	.+82     	; 0xce7a <collision_detect_shot+0x28c>
    ce28:	f4 01       	movw	r30, r8
    ce2a:	46 81       	ldd	r20, Z+6	; 0x06
    ce2c:	57 81       	ldd	r21, Z+7	; 0x07
    ce2e:	48 53       	subi	r20, 0x38	; 56
    ce30:	5f 4f       	sbci	r21, 0xFF	; 255
    ce32:	64 81       	ldd	r22, Z+4	; 0x04
    ce34:	75 81       	ldd	r23, Z+5	; 0x05
    ce36:	68 53       	subi	r22, 0x38	; 56
    ce38:	7f 4f       	sbci	r23, 0xFF	; 255
    ce3a:	00 e9       	ldi	r16, 0x90	; 144
    ce3c:	11 e0       	ldi	r17, 0x01	; 1
    ce3e:	20 e9       	ldi	r18, 0x90	; 144
    ce40:	31 e0       	ldi	r19, 0x01	; 1
    ce42:	c7 01       	movw	r24, r14
    ce44:	0e 94 4a 53 	call	0xa694	; 0xa694 <collides_directional_tile>
    ce48:	88 23       	and	r24, r24
    ce4a:	b9 f0       	breq	.+46     	; 0xce7a <collision_detect_shot+0x28c>
		{
			hit = hit | HIT_ANGLE;
    ce4c:	fd 81       	ldd	r31, Y+5	; 0x05
    ce4e:	f4 60       	ori	r31, 0x04	; 4
    ce50:	fd 83       	std	Y+5, r31	; 0x05
			angle_tile = tile;
    ce52:	d8 86       	std	Y+8, r13	; 0x08
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    ce54:	2e 81       	ldd	r18, Y+6	; 0x06
    ce56:	21 30       	cpi	r18, 0x01	; 1
    ce58:	09 f4       	brne	.+2      	; 0xce5c <collision_detect_shot+0x26e>
    ce5a:	7f c0       	rjmp	.+254    	; 0xcf5a <collision_detect_shot+0x36c>
    ce5c:	f1 e0       	ldi	r31, 0x01	; 1
    ce5e:	fe 83       	std	Y+6, r31	; 0x06
	{
		tile = level.level_map[tiles[i]];
    ce60:	a9 85       	ldd	r26, Y+9	; 0x09
    ce62:	ba 85       	ldd	r27, Y+10	; 0x0a
    ce64:	ed 90       	ld	r14, X+
    ce66:	fd 90       	ld	r15, X+
    ce68:	ba 87       	std	Y+10, r27	; 0x0a
    ce6a:	a9 87       	std	Y+9, r26	; 0x09
    ce6c:	f7 01       	movw	r30, r14
    ce6e:	e1 59       	subi	r30, 0x91	; 145
    ce70:	f3 4f       	sbci	r31, 0xF3	; 243
    ce72:	d1 80       	ldd	r13, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    ce74:	dd 20       	and	r13, r13
    ce76:	71 f3       	breq	.-36     	; 0xce54 <collision_detect_shot+0x266>
    ce78:	d2 cf       	rjmp	.-92     	; 0xce1e <collision_detect_shot+0x230>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+200, shot->shared.y+200,400,400))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    ce7a:	21 e0       	ldi	r18, 0x01	; 1
    ce7c:	d2 12       	cpse	r13, r18
    ce7e:	36 c0       	rjmp	.+108    	; 0xceec <collision_detect_shot+0x2fe>
    ce80:	c7 01       	movw	r24, r14
    ce82:	b1 01       	movw	r22, r2
    ce84:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    ce88:	64 9d       	mul	r22, r4
    ce8a:	70 01       	movw	r14, r0
    ce8c:	65 9d       	mul	r22, r5
    ce8e:	f0 0c       	add	r15, r0
    ce90:	74 9d       	mul	r23, r4
    ce92:	f0 0c       	add	r15, r0
    ce94:	11 24       	eor	r1, r1
    ce96:	a0 ea       	ldi	r26, 0xA0	; 160
    ce98:	ea 1a       	sub	r14, r26
    ce9a:	a6 ef       	ldi	r26, 0xF6	; 246
    ce9c:	fa 0a       	sbc	r15, r26
    ce9e:	84 9d       	mul	r24, r4
    cea0:	80 01       	movw	r16, r0
    cea2:	85 9d       	mul	r24, r5
    cea4:	10 0d       	add	r17, r0
    cea6:	94 9d       	mul	r25, r4
    cea8:	10 0d       	add	r17, r0
    ceaa:	11 24       	eor	r1, r1
    ceac:	f4 01       	movw	r30, r8
    ceae:	66 81       	ldd	r22, Z+6	; 0x06
    ceb0:	77 81       	ldd	r23, Z+7	; 0x07
    ceb2:	68 53       	subi	r22, 0x38	; 56
    ceb4:	7f 4f       	sbci	r23, 0xFF	; 255
    ceb6:	84 81       	ldd	r24, Z+4	; 0x04
    ceb8:	95 81       	ldd	r25, Z+5	; 0x05
    ceba:	40 e2       	ldi	r20, 0x20	; 32
    cebc:	a4 2e       	mov	r10, r20
    cebe:	43 e0       	ldi	r20, 0x03	; 3
    cec0:	b4 2e       	mov	r11, r20
    cec2:	50 e2       	ldi	r21, 0x20	; 32
    cec4:	c5 2e       	mov	r12, r21
    cec6:	53 e0       	ldi	r21, 0x03	; 3
    cec8:	d5 2e       	mov	r13, r21
    ceca:	20 e9       	ldi	r18, 0x90	; 144
    cecc:	31 e0       	ldi	r19, 0x01	; 1
    cece:	40 e9       	ldi	r20, 0x90	; 144
    ced0:	51 e0       	ldi	r21, 0x01	; 1
    ced2:	88 53       	subi	r24, 0x38	; 56
    ced4:	9f 4f       	sbci	r25, 0xFF	; 255
    ced6:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
    ceda:	88 23       	and	r24, r24
    cedc:	09 f4       	brne	.+2      	; 0xcee0 <collision_detect_shot+0x2f2>
    cede:	ba cf       	rjmp	.-140    	; 0xce54 <collision_detect_shot+0x266>
		{
			hit = hit | HIT_BRICK;
    cee0:	fd 81       	ldd	r31, Y+5	; 0x05
    cee2:	f2 60       	ori	r31, 0x02	; 2
    cee4:	fd 83       	std	Y+5, r31	; 0x05
			brick_index = i;
    cee6:	2e 81       	ldd	r18, Y+6	; 0x06
    cee8:	2f 83       	std	Y+7, r18	; 0x07
    ceea:	b4 cf       	rjmp	.-152    	; 0xce54 <collision_detect_shot+0x266>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+200,shot->shared.y+200,400,400,(tiles[i]%30)*800,(tiles[i]/30)*800+2400,800,800))
    ceec:	82 e0       	ldi	r24, 0x02	; 2
    ceee:	d8 12       	cpse	r13, r24
    cef0:	b1 cf       	rjmp	.-158    	; 0xce54 <collision_detect_shot+0x266>
    cef2:	c7 01       	movw	r24, r14
    cef4:	b1 01       	movw	r22, r2
    cef6:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    cefa:	64 9d       	mul	r22, r4
    cefc:	70 01       	movw	r14, r0
    cefe:	65 9d       	mul	r22, r5
    cf00:	f0 0c       	add	r15, r0
    cf02:	74 9d       	mul	r23, r4
    cf04:	f0 0c       	add	r15, r0
    cf06:	11 24       	eor	r1, r1
    cf08:	a0 ea       	ldi	r26, 0xA0	; 160
    cf0a:	ea 1a       	sub	r14, r26
    cf0c:	a6 ef       	ldi	r26, 0xF6	; 246
    cf0e:	fa 0a       	sbc	r15, r26
    cf10:	84 9d       	mul	r24, r4
    cf12:	80 01       	movw	r16, r0
    cf14:	85 9d       	mul	r24, r5
    cf16:	10 0d       	add	r17, r0
    cf18:	94 9d       	mul	r25, r4
    cf1a:	10 0d       	add	r17, r0
    cf1c:	11 24       	eor	r1, r1
    cf1e:	f4 01       	movw	r30, r8
    cf20:	66 81       	ldd	r22, Z+6	; 0x06
    cf22:	77 81       	ldd	r23, Z+7	; 0x07
    cf24:	68 53       	subi	r22, 0x38	; 56
    cf26:	7f 4f       	sbci	r23, 0xFF	; 255
    cf28:	84 81       	ldd	r24, Z+4	; 0x04
    cf2a:	95 81       	ldd	r25, Z+5	; 0x05
    cf2c:	20 e2       	ldi	r18, 0x20	; 32
    cf2e:	a2 2e       	mov	r10, r18
    cf30:	23 e0       	ldi	r18, 0x03	; 3
    cf32:	b2 2e       	mov	r11, r18
    cf34:	30 e2       	ldi	r19, 0x20	; 32
    cf36:	c3 2e       	mov	r12, r19
    cf38:	33 e0       	ldi	r19, 0x03	; 3
    cf3a:	d3 2e       	mov	r13, r19
    cf3c:	20 e9       	ldi	r18, 0x90	; 144
    cf3e:	31 e0       	ldi	r19, 0x01	; 1
    cf40:	40 e9       	ldi	r20, 0x90	; 144
    cf42:	51 e0       	ldi	r21, 0x01	; 1
    cf44:	88 53       	subi	r24, 0x38	; 56
    cf46:	9f 4f       	sbci	r25, 0xFF	; 255
    cf48:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
    cf4c:	88 23       	and	r24, r24
    cf4e:	09 f4       	brne	.+2      	; 0xcf52 <collision_detect_shot+0x364>
    cf50:	81 cf       	rjmp	.-254    	; 0xce54 <collision_detect_shot+0x266>
        {
		    hit = hit | HIT_METAL;
    cf52:	fd 81       	ldd	r31, Y+5	; 0x05
    cf54:	f1 60       	ori	r31, 0x01	; 1
    cf56:	fd 83       	std	Y+5, r31	; 0x05
    cf58:	7d cf       	rjmp	.-262    	; 0xce54 <collision_detect_shot+0x266>
        }
	}
	
	if (hit & HIT_ANGLE)
    cf5a:	8d 81       	ldd	r24, Y+5	; 0x05
    cf5c:	82 ff       	sbrs	r24, 2
    cf5e:	1a c0       	rjmp	.+52     	; 0xcf94 <collision_detect_shot+0x3a6>
	{
		recoil_sprite_fine(player, &shot->shared);
    cf60:	b4 01       	movw	r22, r8
    cf62:	c3 01       	movw	r24, r6
    cf64:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    cf68:	b4 01       	movw	r22, r8
    cf6a:	88 85       	ldd	r24, Y+8	; 0x08
    cf6c:	0e 94 a7 56 	call	0xad4e	; 0xad4e <richochet>
		shot->rebounds--;
    cf70:	d4 01       	movw	r26, r8
    cf72:	1a 96       	adiw	r26, 0x0a	; 10
    cf74:	8c 91       	ld	r24, X
    cf76:	1a 97       	sbiw	r26, 0x0a	; 10
    cf78:	81 50       	subi	r24, 0x01	; 1
    cf7a:	1a 96       	adiw	r26, 0x0a	; 10
    cf7c:	8c 93       	st	X, r24
    cf7e:	1a 97       	sbiw	r26, 0x0a	; 10
		if (shot->rebounds <= 0)
    cf80:	81 11       	cpse	r24, r1
    cf82:	54 c0       	rjmp	.+168    	; 0xd02c <collision_detect_shot+0x43e>
		{
			init_shot_state(shot, shot->shot_type);
    cf84:	18 96       	adiw	r26, 0x08	; 8
    cf86:	6c 91       	ld	r22, X
    cf88:	c4 01       	movw	r24, r8
    cf8a:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			player->active_shots = 0;
    cf8e:	f3 01       	movw	r30, r6
    cf90:	14 82       	std	Z+4, r1	; 0x04
    cf92:	4c c0       	rjmp	.+152    	; 0xd02c <collision_detect_shot+0x43e>
		}
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
	}
	else if ((hit & HIT_BRICK) && !is_net_player(player))
    cf94:	fd 81       	ldd	r31, Y+5	; 0x05
    cf96:	f1 ff       	sbrs	r31, 1
    cf98:	3e c0       	rjmp	.+124    	; 0xd016 <collision_detect_shot+0x428>
    cf9a:	c3 01       	movw	r24, r6
    cf9c:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    cfa0:	81 11       	cpse	r24, r1
    cfa2:	39 c0       	rjmp	.+114    	; 0xd016 <collision_detect_shot+0x428>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    cfa4:	2f 81       	ldd	r18, Y+7	; 0x07
    cfa6:	42 2e       	mov	r4, r18
    cfa8:	51 2c       	mov	r5, r1
    cfaa:	44 0c       	add	r4, r4
    cfac:	55 1c       	adc	r5, r5
    cfae:	01 e0       	ldi	r16, 0x01	; 1
    cfb0:	10 e0       	ldi	r17, 0x00	; 0
    cfb2:	0c 0f       	add	r16, r28
    cfb4:	1d 1f       	adc	r17, r29
    cfb6:	04 0d       	add	r16, r4
    cfb8:	15 1d       	adc	r17, r5
    cfba:	d8 01       	movw	r26, r16
    cfbc:	6d 91       	ld	r22, X+
    cfbe:	7c 91       	ld	r23, X
    cfc0:	8a ec       	ldi	r24, 0xCA	; 202
    cfc2:	9b e0       	ldi	r25, 0x0B	; 11
    cfc4:	0e 94 69 56 	call	0xacd2	; 0xacd2 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    cfc8:	d8 01       	movw	r26, r16
    cfca:	ed 91       	ld	r30, X+
    cfcc:	fc 91       	ld	r31, X
    cfce:	e1 59       	subi	r30, 0x91	; 145
    cfd0:	f3 4f       	sbci	r31, 0xF3	; 243
    cfd2:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    cfd4:	f4 01       	movw	r30, r8
    cfd6:	81 85       	ldd	r24, Z+9	; 0x09
    cfd8:	81 50       	subi	r24, 0x01	; 1
    cfda:	81 87       	std	Z+9, r24	; 0x09
		if (shot->hit_count <= 0)
    cfdc:	81 11       	cpse	r24, r1
    cfde:	07 c0       	rjmp	.+14     	; 0xcfee <collision_detect_shot+0x400>
		{
			init_shot_state(shot, shot->shot_type);
    cfe0:	60 85       	ldd	r22, Z+8	; 0x08
    cfe2:	c4 01       	movw	r24, r8
    cfe4:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
			player->active_shots = 0;
    cfe8:	d3 01       	movw	r26, r6
    cfea:	14 96       	adiw	r26, 0x04	; 4
    cfec:	1c 92       	st	X, r1
		}
		send_net_message(NETBLOCKHIT, tiles[brick_index] % 30, tiles[brick_index] / 30, 0);
    cfee:	e1 e0       	ldi	r30, 0x01	; 1
    cff0:	f0 e0       	ldi	r31, 0x00	; 0
    cff2:	ec 0f       	add	r30, r28
    cff4:	fd 1f       	adc	r31, r29
    cff6:	e4 0d       	add	r30, r4
    cff8:	f5 1d       	adc	r31, r5
    cffa:	80 81       	ld	r24, Z
    cffc:	91 81       	ldd	r25, Z+1	; 0x01
    cffe:	6e e1       	ldi	r22, 0x1E	; 30
    d000:	70 e0       	ldi	r23, 0x00	; 0
    d002:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    d006:	46 2f       	mov	r20, r22
    d008:	20 e0       	ldi	r18, 0x00	; 0
    d00a:	68 2f       	mov	r22, r24
    d00c:	8e e0       	ldi	r24, 0x0E	; 14
    d00e:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_BRICK_EXPLODE);
    d012:	20 e0       	ldi	r18, 0x00	; 0
    d014:	0c c0       	rjmp	.+24     	; 0xd02e <collision_detect_shot+0x440>
	}
	else if (hit & HIT_METAL)
    d016:	bd 81       	ldd	r27, Y+5	; 0x05
    d018:	b0 ff       	sbrs	r27, 0
    d01a:	11 c0       	rjmp	.+34     	; 0xd03e <collision_detect_shot+0x450>
	{
        init_shot_state(shot, shot->shot_type);
    d01c:	f4 01       	movw	r30, r8
    d01e:	60 85       	ldd	r22, Z+8	; 0x08
    d020:	c4 01       	movw	r24, r8
    d022:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
        player->active_shots = 0;
    d026:	d3 01       	movw	r26, r6
    d028:	14 96       	adiw	r26, 0x04	; 4
    d02a:	1c 92       	st	X, r1
        LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_METAL);
    d02c:	23 e0       	ldi	r18, 0x03	; 3
    d02e:	40 91 cf 0f 	lds	r20, 0x0FCF
    d032:	60 91 59 0c 	lds	r22, 0x0C59
    d036:	80 91 c9 0b 	lds	r24, 0x0BC9
    d03a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
	}
}
    d03e:	2a 96       	adiw	r28, 0x0a	; 10
    d040:	0f b6       	in	r0, 0x3f	; 63
    d042:	f8 94       	cli
    d044:	de bf       	out	0x3e, r29	; 62
    d046:	0f be       	out	0x3f, r0	; 63
    d048:	cd bf       	out	0x3d, r28	; 61
    d04a:	df 91       	pop	r29
    d04c:	cf 91       	pop	r28
    d04e:	1f 91       	pop	r17
    d050:	0f 91       	pop	r16
    d052:	ff 90       	pop	r15
    d054:	ef 90       	pop	r14
    d056:	df 90       	pop	r13
    d058:	cf 90       	pop	r12
    d05a:	bf 90       	pop	r11
    d05c:	af 90       	pop	r10
    d05e:	9f 90       	pop	r9
    d060:	8f 90       	pop	r8
    d062:	7f 90       	pop	r7
    d064:	6f 90       	pop	r6
    d066:	5f 90       	pop	r5
    d068:	4f 90       	pop	r4
    d06a:	3f 90       	pop	r3
    d06c:	2f 90       	pop	r2
    d06e:	08 95       	ret

0000d070 <update_player>:
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed + (s->speed / AI_SPEED_FACTOR_INVERTED)) / FRAME_TIME_INVERTED;
}

void update_player(JoyPadState* p, Player* player)
{
    d070:	df 92       	push	r13
    d072:	ef 92       	push	r14
    d074:	ff 92       	push	r15
    d076:	0f 93       	push	r16
    d078:	1f 93       	push	r17
    d07a:	cf 93       	push	r28
    d07c:	df 93       	push	r29
    d07e:	8c 01       	movw	r16, r24
    d080:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->netMessage.shared.recoiled = 0;
    d082:	fb 01       	movw	r30, r22
    d084:	eb 58       	subi	r30, 0x8B	; 139
    d086:	ff 4f       	sbci	r31, 0xFF	; 255
    d088:	10 82       	st	Z, r1
	player->old_active_shots = player->active_shots;
    d08a:	8c 81       	ldd	r24, Y+4	; 0x04
    d08c:	8d 83       	std	Y+5, r24	; 0x05
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
    d08e:	d8 01       	movw	r26, r16
    d090:	8c 91       	ld	r24, X
    d092:	83 ff       	sbrs	r24, 3
    d094:	25 c0       	rjmp	.+74     	; 0xd0e0 <update_player+0x70>
    d096:	80 91 b9 0b 	lds	r24, 0x0BB9
    d09a:	81 11       	cpse	r24, r1
    d09c:	21 c0       	rjmp	.+66     	; 0xd0e0 <update_player+0x70>
    d09e:	cb 01       	movw	r24, r22
    d0a0:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    d0a4:	81 11       	cpse	r24, r1
    d0a6:	1c c0       	rjmp	.+56     	; 0xd0e0 <update_player+0x70>
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    d0a8:	24 e0       	ldi	r18, 0x04	; 4
    d0aa:	40 91 cf 0f 	lds	r20, 0x0FCF
    d0ae:	60 91 59 0c 	lds	r22, 0x0C59
    d0b2:	80 91 c9 0b 	lds	r24, 0x0BC9
    d0b6:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		game.paused = game.paused ^ 1;
    d0ba:	90 91 b8 0b 	lds	r25, 0x0BB8
    d0be:	81 e0       	ldi	r24, 0x01	; 1
		if (game.paused)
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    d0c0:	21 e0       	ldi	r18, 0x01	; 1
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0) && !is_net_player(player))
	{
#if JAMMA
#else
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		game.paused = game.paused ^ 1;
    d0c2:	89 27       	eor	r24, r25
    d0c4:	80 93 b8 0b 	sts	0x0BB8, r24
		if (game.paused)
    d0c8:	88 23       	and	r24, r24
    d0ca:	11 f0       	breq	.+4      	; 0xd0d0 <update_player+0x60>
		{
			send_smart_net_message(player, p, NETPAUSE, 1);
    d0cc:	47 e0       	ldi	r20, 0x07	; 7
    d0ce:	01 c0       	rjmp	.+2      	; 0xd0d2 <update_player+0x62>
		}
		else
		{
			send_smart_net_message(player, p, NETRESUME, 1);
    d0d0:	4d e0       	ldi	r20, 0x0D	; 13
    d0d2:	b8 01       	movw	r22, r16
    d0d4:	ce 01       	movw	r24, r28
    d0d6:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
		}
		load_level_tiles(false);
    d0da:	80 e0       	ldi	r24, 0x00	; 0
    d0dc:	0e 94 83 57 	call	0xaf06	; 0xaf06 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->netMessage.flags & EXPLODING_FLAG)))
    d0e0:	80 91 b8 0b 	lds	r24, 0x0BB8
    d0e4:	81 11       	cpse	r24, r1
    d0e6:	9f c0       	rjmp	.+318    	; 0xd226 <update_player+0x1b6>
    d0e8:	fe 01       	movw	r30, r28
    d0ea:	ef 58       	subi	r30, 0x8F	; 143
    d0ec:	ff 4f       	sbci	r31, 0xFF	; 255
    d0ee:	80 81       	ld	r24, Z
    d0f0:	80 fd       	sbrc	r24, 0
    d0f2:	99 c0       	rjmp	.+306    	; 0xd226 <update_player+0x1b6>
	{
		player->netMessage.shared.speed = player->max_speed;
    d0f4:	32 96       	adiw	r30, 0x02	; 2
    d0f6:	8b 85       	ldd	r24, Y+11	; 0x0b
    d0f8:	9c 85       	ldd	r25, Y+12	; 0x0c
    d0fa:	91 83       	std	Z+1, r25	; 0x01
    d0fc:	80 83       	st	Z, r24
		if ((p->held & BTN_UP))
    d0fe:	d8 01       	movw	r26, r16
    d100:	14 96       	adiw	r26, 0x04	; 4
    d102:	8c 91       	ld	r24, X
    d104:	84 ff       	sbrs	r24, 4
    d106:	0c c0       	rjmp	.+24     	; 0xd120 <update_player+0xb0>
		{
			player->netMessage.shared.direction = D_UP;
    d108:	be 01       	movw	r22, r28
    d10a:	6e 58       	subi	r22, 0x8E	; 142
    d10c:	7f 4f       	sbci	r23, 0xFF	; 255
    d10e:	fb 01       	movw	r30, r22
    d110:	10 82       	st	Z, r1
			player->netMessage.shared.y -= get_delta(player, &player->netMessage.shared);
    d112:	ce 01       	movw	r24, r28
    d114:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d118:	fe 01       	movw	r30, r28
    d11a:	e8 58       	subi	r30, 0x88	; 136
    d11c:	ff 4f       	sbci	r31, 0xFF	; 255
    d11e:	32 c0       	rjmp	.+100    	; 0xd184 <update_player+0x114>
		}
		else if ((p->held & BTN_RIGHT))
    d120:	87 ff       	sbrs	r24, 7
    d122:	0d c0       	rjmp	.+26     	; 0xd13e <update_player+0xce>
		{
			player->netMessage.shared.direction = D_RIGHT;
    d124:	81 e0       	ldi	r24, 0x01	; 1
    d126:	be 01       	movw	r22, r28
    d128:	6e 58       	subi	r22, 0x8E	; 142
    d12a:	7f 4f       	sbci	r23, 0xFF	; 255
    d12c:	db 01       	movw	r26, r22
    d12e:	8c 93       	st	X, r24
			player->netMessage.shared.x += get_delta(player, &player->netMessage.shared);
    d130:	ce 01       	movw	r24, r28
    d132:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d136:	fe 01       	movw	r30, r28
    d138:	ea 58       	subi	r30, 0x8A	; 138
    d13a:	ff 4f       	sbci	r31, 0xFF	; 255
    d13c:	0e c0       	rjmp	.+28     	; 0xd15a <update_player+0xea>
		}
		else if ((p->held & BTN_DOWN))
    d13e:	85 ff       	sbrs	r24, 5
    d140:	13 c0       	rjmp	.+38     	; 0xd168 <update_player+0xf8>
		{
			player->netMessage.shared.direction = D_DOWN;
    d142:	82 e0       	ldi	r24, 0x02	; 2
    d144:	be 01       	movw	r22, r28
    d146:	6e 58       	subi	r22, 0x8E	; 142
    d148:	7f 4f       	sbci	r23, 0xFF	; 255
    d14a:	fb 01       	movw	r30, r22
    d14c:	80 83       	st	Z, r24
			player->netMessage.shared.y += get_delta(player, &player->netMessage.shared);
    d14e:	ce 01       	movw	r24, r28
    d150:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d154:	fe 01       	movw	r30, r28
    d156:	e8 58       	subi	r30, 0x88	; 136
    d158:	ff 4f       	sbci	r31, 0xFF	; 255
    d15a:	20 81       	ld	r18, Z
    d15c:	31 81       	ldd	r19, Z+1	; 0x01
    d15e:	82 0f       	add	r24, r18
    d160:	93 1f       	adc	r25, r19
    d162:	91 83       	std	Z+1, r25	; 0x01
    d164:	80 83       	st	Z, r24
    d166:	17 c0       	rjmp	.+46     	; 0xd196 <update_player+0x126>
		}
		else if ((p->held & BTN_LEFT))
    d168:	86 ff       	sbrs	r24, 6
    d16a:	13 c0       	rjmp	.+38     	; 0xd192 <update_player+0x122>
		{
			player->netMessage.shared.direction = D_LEFT;
    d16c:	83 e0       	ldi	r24, 0x03	; 3
    d16e:	be 01       	movw	r22, r28
    d170:	6e 58       	subi	r22, 0x8E	; 142
    d172:	7f 4f       	sbci	r23, 0xFF	; 255
    d174:	db 01       	movw	r26, r22
    d176:	8c 93       	st	X, r24
			player->netMessage.shared.x -= get_delta(player, &player->netMessage.shared);
    d178:	ce 01       	movw	r24, r28
    d17a:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d17e:	fe 01       	movw	r30, r28
    d180:	ea 58       	subi	r30, 0x8A	; 138
    d182:	ff 4f       	sbci	r31, 0xFF	; 255
    d184:	20 81       	ld	r18, Z
    d186:	31 81       	ldd	r19, Z+1	; 0x01
    d188:	28 1b       	sub	r18, r24
    d18a:	39 0b       	sbc	r19, r25
    d18c:	31 83       	std	Z+1, r19	; 0x01
    d18e:	20 83       	st	Z, r18
    d190:	02 c0       	rjmp	.+4      	; 0xd196 <update_player+0x126>
		}
		else
		{
			player->netMessage.shared.speed = 0;
    d192:	11 82       	std	Z+1, r1	; 0x01
    d194:	10 82       	st	Z, r1
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    d196:	c8 01       	movw	r24, r16
    d198:	0e 94 0f 51 	call	0xa21e	; 0xa21e <shoot_pressed>
    d19c:	88 23       	and	r24, r24
    d19e:	09 f4       	brne	.+2      	; 0xd1a2 <update_player+0x132>
    d1a0:	42 c0       	rjmp	.+132    	; 0xd226 <update_player+0x1b6>
    d1a2:	8c 81       	ldd	r24, Y+4	; 0x04
    d1a4:	81 11       	cpse	r24, r1
    d1a6:	3f c0       	rjmp	.+126    	; 0xd226 <update_player+0x1b6>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    d1a8:	8c a5       	ldd	r24, Y+44	; 0x2c
    d1aa:	81 11       	cpse	r24, r1
    d1ac:	3c c0       	rjmp	.+120    	; 0xd226 <update_player+0x1b6>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    d1ae:	7e 01       	movw	r14, r28
    d1b0:	b1 e2       	ldi	r27, 0x21	; 33
    d1b2:	eb 0e       	add	r14, r27
    d1b4:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					send_smart_net_message(player, p, NETSHOOT, 0);
    d1b6:	20 e0       	ldi	r18, 0x00	; 0
    d1b8:	42 e0       	ldi	r20, 0x02	; 2
    d1ba:	b8 01       	movw	r22, r16
    d1bc:	ce 01       	movw	r24, r28
    d1be:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
					if (player->has_rocket)
    d1c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    d1c4:	88 23       	and	r24, r24
    d1c6:	51 f0       	breq	.+20     	; 0xd1dc <update_player+0x16c>
					{
						init_shot_state(shot, ROCKET_SHOT);
    d1c8:	61 e0       	ldi	r22, 0x01	; 1
    d1ca:	c7 01       	movw	r24, r14
    d1cc:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    d1d0:	61 e0       	ldi	r22, 0x01	; 1
    d1d2:	c7 01       	movw	r24, r14
    d1d4:	0e 94 55 4e 	call	0x9caa	; 0x9caa <set_shot_animations>
						LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ROCKET);
    d1d8:	25 e0       	ldi	r18, 0x05	; 5
    d1da:	09 c0       	rjmp	.+18     	; 0xd1ee <update_player+0x17e>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    d1dc:	60 e0       	ldi	r22, 0x00	; 0
    d1de:	c7 01       	movw	r24, r14
    d1e0:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    d1e4:	60 e0       	ldi	r22, 0x00	; 0
    d1e6:	c7 01       	movw	r24, r14
    d1e8:	0e 94 55 4e 	call	0x9caa	; 0x9caa <set_shot_animations>
						LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_CANNONBALL);
    d1ec:	21 e0       	ldi	r18, 0x01	; 1
    d1ee:	40 91 cf 0f 	lds	r20, 0x0FCF
    d1f2:	60 91 59 0c 	lds	r22, 0x0C59
    d1f6:	80 91 c9 0b 	lds	r24, 0x0BC9
    d1fa:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
					}
					player->active_shots = 1;
    d1fe:	dd 24       	eor	r13, r13
    d200:	d3 94       	inc	r13
    d202:	dc 82       	std	Y+4, r13	; 0x04
					shot->shared.direction = player->netMessage.shared.direction;
    d204:	fe 01       	movw	r30, r28
    d206:	ee 58       	subi	r30, 0x8E	; 142
    d208:	ff 4f       	sbci	r31, 0xFF	; 255
    d20a:	80 81       	ld	r24, Z
    d20c:	89 a3       	std	Y+33, r24	; 0x21
					position_shot(player, shot);
    d20e:	b7 01       	movw	r22, r14
    d210:	ce 01       	movw	r24, r28
    d212:	0e 94 26 50 	call	0xa04c	; 0xa04c <position_shot>
					shot->active = 1;
    d216:	dc a6       	std	Y+44, r13	; 0x2c
					if (player->has_over_speed)
    d218:	8e 85       	ldd	r24, Y+14	; 0x0e
    d21a:	88 23       	and	r24, r24
    d21c:	21 f0       	breq	.+8      	; 0xd226 <update_player+0x1b6>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    d21e:	88 e6       	ldi	r24, 0x68	; 104
    d220:	92 e4       	ldi	r25, 0x42	; 66
    d222:	9b a3       	std	Y+35, r25	; 0x23
    d224:	8a a3       	std	Y+34, r24	; 0x22
				}
			}
		}
	}
	
	if (!game.paused)
    d226:	80 91 b8 0b 	lds	r24, 0x0BB8
    d22a:	81 11       	cpse	r24, r1
    d22c:	57 c0       	rjmp	.+174    	; 0xd2dc <update_player+0x26c>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    d22e:	8e 01       	movw	r16, r28
    d230:	0f 5d       	subi	r16, 0xDF	; 223
    d232:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    d234:	8c a5       	ldd	r24, Y+44	; 0x2c
    d236:	88 23       	and	r24, r24
    d238:	09 f4       	brne	.+2      	; 0xd23c <update_player+0x1cc>
    d23a:	6d c0       	rjmp	.+218    	; 0xd316 <update_player+0x2a6>
			{
				switch (shot->shared.direction)
    d23c:	89 a1       	ldd	r24, Y+33	; 0x21
    d23e:	81 30       	cpi	r24, 0x01	; 1
    d240:	d9 f0       	breq	.+54     	; 0xd278 <update_player+0x208>
    d242:	78 f0       	brcs	.+30     	; 0xd262 <update_player+0x1f2>
    d244:	82 30       	cpi	r24, 0x02	; 2
    d246:	19 f1       	breq	.+70     	; 0xd28e <update_player+0x21e>
    d248:	83 30       	cpi	r24, 0x03	; 3
    d24a:	59 f5       	brne	.+86     	; 0xd2a2 <update_player+0x232>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    d24c:	b8 01       	movw	r22, r16
    d24e:	ce 01       	movw	r24, r28
    d250:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d254:	2d a1       	ldd	r18, Y+37	; 0x25
    d256:	3e a1       	ldd	r19, Y+38	; 0x26
    d258:	28 1b       	sub	r18, r24
    d25a:	39 0b       	sbc	r19, r25
    d25c:	3e a3       	std	Y+38, r19	; 0x26
    d25e:	2d a3       	std	Y+37, r18	; 0x25
    d260:	20 c0       	rjmp	.+64     	; 0xd2a2 <update_player+0x232>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    d262:	b8 01       	movw	r22, r16
    d264:	ce 01       	movw	r24, r28
    d266:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d26a:	2f a1       	ldd	r18, Y+39	; 0x27
    d26c:	38 a5       	ldd	r19, Y+40	; 0x28
    d26e:	28 1b       	sub	r18, r24
    d270:	39 0b       	sbc	r19, r25
    d272:	38 a7       	std	Y+40, r19	; 0x28
    d274:	2f a3       	std	Y+39, r18	; 0x27
    d276:	15 c0       	rjmp	.+42     	; 0xd2a2 <update_player+0x232>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    d278:	b8 01       	movw	r22, r16
    d27a:	ce 01       	movw	r24, r28
    d27c:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d280:	2d a1       	ldd	r18, Y+37	; 0x25
    d282:	3e a1       	ldd	r19, Y+38	; 0x26
    d284:	82 0f       	add	r24, r18
    d286:	93 1f       	adc	r25, r19
    d288:	9e a3       	std	Y+38, r25	; 0x26
    d28a:	8d a3       	std	Y+37, r24	; 0x25
    d28c:	0a c0       	rjmp	.+20     	; 0xd2a2 <update_player+0x232>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    d28e:	b8 01       	movw	r22, r16
    d290:	ce 01       	movw	r24, r28
    d292:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d296:	2f a1       	ldd	r18, Y+39	; 0x27
    d298:	38 a5       	ldd	r19, Y+40	; 0x28
    d29a:	82 0f       	add	r24, r18
    d29c:	93 1f       	adc	r25, r19
    d29e:	98 a7       	std	Y+40, r25	; 0x28
    d2a0:	8f a3       	std	Y+39, r24	; 0x27
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    d2a2:	ed a4       	ldd	r14, Y+45	; 0x2d
    d2a4:	fe a4       	ldd	r15, Y+46	; 0x2e
    d2a6:	e1 e2       	ldi	r30, 0x21	; 33
    d2a8:	ee 16       	cp	r14, r30
    d2aa:	e3 e0       	ldi	r30, 0x03	; 3
    d2ac:	fe 06       	cpc	r15, r30
    d2ae:	28 f4       	brcc	.+10     	; 0xd2ba <update_player+0x24a>
    d2b0:	b8 01       	movw	r22, r16
    d2b2:	ce 01       	movw	r24, r28
    d2b4:	0e 94 19 51 	call	0xa232	; 0xa232 <get_delta>
    d2b8:	02 c0       	rjmp	.+4      	; 0xd2be <update_player+0x24e>
    d2ba:	80 e0       	ldi	r24, 0x00	; 0
    d2bc:	90 e0       	ldi	r25, 0x00	; 0
    d2be:	e8 0e       	add	r14, r24
    d2c0:	f9 1e       	adc	r15, r25
    d2c2:	fe a6       	std	Y+46, r15	; 0x2e
    d2c4:	ed a6       	std	Y+45, r14	; 0x2d
				collision_detect_shot(player, shot);
    d2c6:	b8 01       	movw	r22, r16
    d2c8:	ce 01       	movw	r24, r28
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			exit_game();
		}
	}
}
    d2ca:	df 91       	pop	r29
    d2cc:	cf 91       	pop	r28
    d2ce:	1f 91       	pop	r17
    d2d0:	0f 91       	pop	r16
    d2d2:	ff 90       	pop	r15
    d2d4:	ef 90       	pop	r14
    d2d6:	df 90       	pop	r13
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    d2d8:	0c 94 f7 65 	jmp	0xcbee	; 0xcbee <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    d2dc:	d8 01       	movw	r26, r16
    d2de:	8d 91       	ld	r24, X+
    d2e0:	9c 91       	ld	r25, X
    d2e2:	91 ff       	sbrs	r25, 1
    d2e4:	18 c0       	rjmp	.+48     	; 0xd316 <update_player+0x2a6>
		{
			send_smart_net_message(player, p, NETEXIT, 1);
    d2e6:	21 e0       	ldi	r18, 0x01	; 1
    d2e8:	48 e0       	ldi	r20, 0x08	; 8
    d2ea:	b8 01       	movw	r22, r16
    d2ec:	ce 01       	movw	r24, r28
    d2ee:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    d2f2:	24 e0       	ldi	r18, 0x04	; 4
    d2f4:	40 91 cf 0f 	lds	r20, 0x0FCF
    d2f8:	60 91 59 0c 	lds	r22, 0x0C59
    d2fc:	80 91 c9 0b 	lds	r24, 0x0BC9
    d300:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			exit_game();
		}
	}
}
    d304:	df 91       	pop	r29
    d306:	cf 91       	pop	r28
    d308:	1f 91       	pop	r17
    d30a:	0f 91       	pop	r16
    d30c:	ff 90       	pop	r15
    d30e:	ef 90       	pop	r14
    d310:	df 90       	pop	r13
	{
		if (p->pressed & BTN_X)
		{
			send_smart_net_message(player, p, NETEXIT, 1);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
			exit_game();
    d312:	0c 94 9f 5a 	jmp	0xb53e	; 0xb53e <exit_game>
		}
	}
}
    d316:	df 91       	pop	r29
    d318:	cf 91       	pop	r28
    d31a:	1f 91       	pop	r17
    d31c:	0f 91       	pop	r16
    d31e:	ff 90       	pop	r15
    d320:	ef 90       	pop	r14
    d322:	df 90       	pop	r13
    d324:	08 95       	ret

0000d326 <collision_detect_player>:
			player->netMessage.shared.y = player->netMessage.shared.y / 100 * 100 - 100;
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    d326:	2f 92       	push	r2
    d328:	3f 92       	push	r3
    d32a:	4f 92       	push	r4
    d32c:	5f 92       	push	r5
    d32e:	6f 92       	push	r6
    d330:	7f 92       	push	r7
    d332:	8f 92       	push	r8
    d334:	9f 92       	push	r9
    d336:	af 92       	push	r10
    d338:	bf 92       	push	r11
    d33a:	cf 92       	push	r12
    d33c:	df 92       	push	r13
    d33e:	ef 92       	push	r14
    d340:	ff 92       	push	r15
    d342:	0f 93       	push	r16
    d344:	1f 93       	push	r17
    d346:	cf 93       	push	r28
    d348:	df 93       	push	r29
    d34a:	cd b7       	in	r28, 0x3d	; 61
    d34c:	de b7       	in	r29, 0x3e	; 62
    d34e:	6c 97       	sbiw	r28, 0x1c	; 28
    d350:	0f b6       	in	r0, 0x3f	; 63
    d352:	f8 94       	cli
    d354:	de bf       	out	0x3e, r29	; 62
    d356:	0f be       	out	0x3f, r0	; 63
    d358:	cd bf       	out	0x3d, r28	; 61
    d35a:	4c 01       	movw	r8, r24
    d35c:	36 2f       	mov	r19, r22
	int tiles[3] = {0,0,0};
    d35e:	1a 82       	std	Y+2, r1	; 0x02
    d360:	19 82       	std	Y+1, r1	; 0x01
    d362:	1c 82       	std	Y+4, r1	; 0x04
    d364:	1b 82       	std	Y+3, r1	; 0x03
    d366:	1e 82       	std	Y+6, r1	; 0x06
    d368:	1d 82       	std	Y+5, r1	; 0x05
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d36a:	1c 01       	movw	r2, r24
    d36c:	82 e7       	ldi	r24, 0x72	; 114
    d36e:	28 0e       	add	r2, r24
    d370:	31 1c       	adc	r3, r1

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
	u8 y = player->netMessage.shared.y / 800 - 3;
    d372:	d4 01       	movw	r26, r8
    d374:	a8 58       	subi	r26, 0x88	; 136
    d376:	bf 4f       	sbci	r27, 0xFF	; 255
    d378:	bf 87       	std	Y+15, r27	; 0x0f
    d37a:	ae 87       	std	Y+14, r26	; 0x0e
    d37c:	8d 91       	ld	r24, X+
    d37e:	9c 91       	ld	r25, X
    d380:	e0 e2       	ldi	r30, 0x20	; 32
    d382:	f3 e0       	ldi	r31, 0x03	; 3
    d384:	bf 01       	movw	r22, r30
    d386:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    d38a:	4d ef       	ldi	r20, 0xFD	; 253
    d38c:	46 0f       	add	r20, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->netMessage.shared.x / 800;
    d38e:	84 01       	movw	r16, r8
    d390:	0a 58       	subi	r16, 0x8A	; 138
    d392:	1f 4f       	sbci	r17, 0xFF	; 255
    d394:	d8 01       	movw	r26, r16
    d396:	8d 91       	ld	r24, X+
    d398:	9c 91       	ld	r25, X
    d39a:	bf 01       	movw	r22, r30
    d39c:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
    d3a0:	f1 01       	movw	r30, r2
    d3a2:	20 81       	ld	r18, Z
    d3a4:	ce 01       	movw	r24, r28
    d3a6:	01 96       	adiw	r24, 0x01	; 1
    d3a8:	3c 8f       	std	Y+28, r19	; 0x1c
    d3aa:	0e 94 c8 56 	call	0xad90	; 0xad90 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d3ae:	c1 01       	movw	r24, r2
    d3b0:	0e 94 9b 55 	call	0xab36	; 0xab36 <collision_detect_boundries>
    d3b4:	3c 8d       	ldd	r19, Y+28	; 0x1c
    d3b6:	88 23       	and	r24, r24
    d3b8:	51 f0       	breq	.+20     	; 0xd3ce <collision_detect_player+0xa8>
	{
		recoil_sprite(&player->netMessage.shared);
    d3ba:	c1 01       	movw	r24, r2
    d3bc:	0e 94 94 52 	call	0xa528	; 0xa528 <recoil_sprite>
		player->netMessage.shared.speed = 0;
    d3c0:	f4 01       	movw	r30, r8
    d3c2:	ed 58       	subi	r30, 0x8D	; 141
    d3c4:	ff 4f       	sbci	r31, 0xFF	; 255
    d3c6:	11 82       	std	Z+1, r1	; 0x01
    d3c8:	10 82       	st	Z, r1
		return explode;
    d3ca:	1a 8a       	std	Y+18, r1	; 0x12
    d3cc:	7c c1       	rjmp	.+760    	; 0xd6c6 <collision_detect_player+0x3a0>
    d3ce:	ce 01       	movw	r24, r28
    d3d0:	01 96       	adiw	r24, 0x01	; 1
    d3d2:	98 87       	std	Y+8, r25	; 0x08
    d3d4:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->netMessage.shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->netMessage.shared))
    d3d6:	1d 86       	std	Y+13, r1	; 0x0d
    d3d8:	1c 86       	std	Y+12, r1	; 0x0c
    d3da:	1b 86       	std	Y+11, r1	; 0x0b
    d3dc:	1a 8a       	std	Y+18, r1	; 0x12
    d3de:	1b 8a       	std	Y+19, r1	; 0x13
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d3e0:	d4 01       	movw	r26, r8
    d3e2:	af 58       	subi	r26, 0x8F	; 143
    d3e4:	bf 4f       	sbci	r27, 0xFF	; 255
    d3e6:	bd 8b       	std	Y+21, r27	; 0x15
    d3e8:	ac 8b       	std	Y+20, r26	; 0x14
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d3ea:	bb e0       	ldi	r27, 0x0B	; 11
    d3ec:	b3 0f       	add	r27, r19
    d3ee:	ba 8f       	std	Y+26, r27	; 0x1a
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d3f0:	36 5f       	subi	r19, 0xF6	; 246
    d3f2:	3b 8f       	std	Y+27, r19	; 0x1b
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d3f4:	50 e2       	ldi	r21, 0x20	; 32
    d3f6:	45 2e       	mov	r4, r21
    d3f8:	53 e0       	ldi	r21, 0x03	; 3
    d3fa:	55 2e       	mov	r5, r21
    d3fc:	19 8b       	std	Y+17, r17	; 0x11
    d3fe:	08 8b       	std	Y+16, r16	; 0x10
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
			player->netMessage.shared.speed = 0;
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d400:	ee 85       	ldd	r30, Y+14	; 0x0e
    d402:	ff 85       	ldd	r31, Y+15	; 0x0f
    d404:	ff 8b       	std	Y+23, r31	; 0x17
    d406:	ee 8b       	std	Y+22, r30	; 0x16
		{
			collision_count++;
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d408:	c4 01       	movw	r24, r8
    d40a:	8d 58       	subi	r24, 0x8D	; 141
    d40c:	9f 4f       	sbci	r25, 0xFF	; 255
    d40e:	99 8f       	std	Y+25, r25	; 0x19
    d410:	88 8f       	std	Y+24, r24	; 0x18
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    d412:	af 81       	ldd	r26, Y+7	; 0x07
    d414:	b8 85       	ldd	r27, Y+8	; 0x08
    d416:	0d 90       	ld	r0, X+
    d418:	bc 91       	ld	r27, X
    d41a:	a0 2d       	mov	r26, r0
    d41c:	ba 87       	std	Y+10, r27	; 0x0a
    d41e:	a9 87       	std	Y+9, r26	; 0x09
    d420:	cd 01       	movw	r24, r26
    d422:	6e e1       	ldi	r22, 0x1E	; 30
    d424:	70 e0       	ldi	r23, 0x00	; 0
    d426:	0e 94 94 71 	call	0xe328	; 0xe328 <__divmodhi4>
    d42a:	68 2e       	mov	r6, r24
		tile_y = 3 + tiles[i] / 30;
    d42c:	43 e0       	ldi	r20, 0x03	; 3
    d42e:	74 2e       	mov	r7, r20
    d430:	76 0e       	add	r7, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->netMessage.shared.x, player->netMessage.shared.y, 1600, 1600))
    d432:	89 85       	ldd	r24, Y+9	; 0x09
    d434:	9a 85       	ldd	r25, Y+10	; 0x0a
    d436:	0e 94 20 53 	call	0xa640	; 0xa640 <solid_directional_tile>
    d43a:	88 23       	and	r24, r24
    d43c:	19 f1       	breq	.+70     	; 0xd484 <collision_detect_player+0x15e>
    d43e:	ee 89       	ldd	r30, Y+22	; 0x16
    d440:	ff 89       	ldd	r31, Y+23	; 0x17
    d442:	40 81       	ld	r20, Z
    d444:	51 81       	ldd	r21, Z+1	; 0x01
    d446:	a8 89       	ldd	r26, Y+16	; 0x10
    d448:	b9 89       	ldd	r27, Y+17	; 0x11
    d44a:	6d 91       	ld	r22, X+
    d44c:	7c 91       	ld	r23, X
    d44e:	00 e4       	ldi	r16, 0x40	; 64
    d450:	16 e0       	ldi	r17, 0x06	; 6
    d452:	20 e4       	ldi	r18, 0x40	; 64
    d454:	36 e0       	ldi	r19, 0x06	; 6
    d456:	89 85       	ldd	r24, Y+9	; 0x09
    d458:	9a 85       	ldd	r25, Y+10	; 0x0a
    d45a:	0e 94 4a 53 	call	0xa694	; 0xa694 <collides_directional_tile>
    d45e:	88 23       	and	r24, r24
    d460:	89 f0       	breq	.+34     	; 0xd484 <collision_detect_player+0x15e>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->netMessage.shared) : recoil_sprite_fine(player, &player->netMessage.shared);
    d462:	f4 01       	movw	r30, r8
    d464:	80 81       	ld	r24, Z
    d466:	89 30       	cpi	r24, 0x09	; 9
    d468:	21 f4       	brne	.+8      	; 0xd472 <collision_detect_player+0x14c>
    d46a:	c1 01       	movw	r24, r2
    d46c:	0e 94 94 52 	call	0xa528	; 0xa528 <recoil_sprite>
    d470:	04 c0       	rjmp	.+8      	; 0xd47a <collision_detect_player+0x154>
    d472:	b1 01       	movw	r22, r2
    d474:	c4 01       	movw	r24, r8
    d476:	0e 94 e2 52 	call	0xa5c4	; 0xa5c4 <recoil_sprite_fine>
			player->netMessage.shared.speed = 0;
    d47a:	a8 8d       	ldd	r26, Y+24	; 0x18
    d47c:	b9 8d       	ldd	r27, Y+25	; 0x19
    d47e:	1d 92       	st	X+, r1
    d480:	1c 92       	st	X, r1
    d482:	e9 c0       	rjmp	.+466    	; 0xd656 <collision_detect_player+0x330>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d484:	89 85       	ldd	r24, Y+9	; 0x09
    d486:	9a 85       	ldd	r25, Y+10	; 0x0a
    d488:	0e 94 0e 53 	call	0xa61c	; 0xa61c <solid_square_tile>
    d48c:	88 23       	and	r24, r24
    d48e:	61 f1       	breq	.+88     	; 0xd4e8 <collision_detect_player+0x1c2>
    d490:	74 9c       	mul	r7, r4
    d492:	70 01       	movw	r14, r0
    d494:	75 9c       	mul	r7, r5
    d496:	f0 0c       	add	r15, r0
    d498:	11 24       	eor	r1, r1
    d49a:	64 9c       	mul	r6, r4
    d49c:	80 01       	movw	r16, r0
    d49e:	65 9c       	mul	r6, r5
    d4a0:	10 0d       	add	r17, r0
    d4a2:	11 24       	eor	r1, r1
    d4a4:	ee 89       	ldd	r30, Y+22	; 0x16
    d4a6:	ff 89       	ldd	r31, Y+23	; 0x17
    d4a8:	60 81       	ld	r22, Z
    d4aa:	71 81       	ldd	r23, Z+1	; 0x01
    d4ac:	20 e2       	ldi	r18, 0x20	; 32
    d4ae:	a2 2e       	mov	r10, r18
    d4b0:	23 e0       	ldi	r18, 0x03	; 3
    d4b2:	b2 2e       	mov	r11, r18
    d4b4:	30 e2       	ldi	r19, 0x20	; 32
    d4b6:	c3 2e       	mov	r12, r19
    d4b8:	33 e0       	ldi	r19, 0x03	; 3
    d4ba:	d3 2e       	mov	r13, r19
    d4bc:	20 e4       	ldi	r18, 0x40	; 64
    d4be:	36 e0       	ldi	r19, 0x06	; 6
    d4c0:	40 e4       	ldi	r20, 0x40	; 64
    d4c2:	56 e0       	ldi	r21, 0x06	; 6
    d4c4:	a8 89       	ldd	r26, Y+16	; 0x10
    d4c6:	b9 89       	ldd	r27, Y+17	; 0x11
    d4c8:	8d 91       	ld	r24, X+
    d4ca:	9c 91       	ld	r25, X
    d4cc:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
    d4d0:	88 23       	and	r24, r24
    d4d2:	51 f0       	breq	.+20     	; 0xd4e8 <collision_detect_player+0x1c2>
		{
			collision_count++;
    d4d4:	bc 85       	ldd	r27, Y+12	; 0x0c
    d4d6:	bf 5f       	subi	r27, 0xFF	; 255
    d4d8:	bc 87       	std	Y+12, r27	; 0x0c
			collision_tile = i;
			player->netMessage.shared.speed = 0;
    d4da:	e8 8d       	ldd	r30, Y+24	; 0x18
    d4dc:	f9 8d       	ldd	r31, Y+25	; 0x19
    d4de:	11 82       	std	Z+1, r1	; 0x01
    d4e0:	10 82       	st	Z, r1
    d4e2:	fd 85       	ldd	r31, Y+13	; 0x0d
    d4e4:	fb 87       	std	Y+11, r31	; 0x0b
    d4e6:	b7 c0       	rjmp	.+366    	; 0xd656 <collision_detect_player+0x330>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d4e8:	e9 85       	ldd	r30, Y+9	; 0x09
    d4ea:	fa 85       	ldd	r31, Y+10	; 0x0a
    d4ec:	e1 59       	subi	r30, 0x91	; 145
    d4ee:	f3 4f       	sbci	r31, 0xF3	; 243
    d4f0:	81 81       	ldd	r24, Z+1	; 0x01
    d4f2:	8d 34       	cpi	r24, 0x4D	; 77
    d4f4:	69 f5       	brne	.+90     	; 0xd550 <collision_detect_player+0x22a>
    d4f6:	74 9c       	mul	r7, r4
    d4f8:	70 01       	movw	r14, r0
    d4fa:	75 9c       	mul	r7, r5
    d4fc:	f0 0c       	add	r15, r0
    d4fe:	11 24       	eor	r1, r1
    d500:	64 9c       	mul	r6, r4
    d502:	80 01       	movw	r16, r0
    d504:	65 9c       	mul	r6, r5
    d506:	10 0d       	add	r17, r0
    d508:	11 24       	eor	r1, r1
    d50a:	ae 85       	ldd	r26, Y+14	; 0x0e
    d50c:	bf 85       	ldd	r27, Y+15	; 0x0f
    d50e:	6d 91       	ld	r22, X+
    d510:	7c 91       	ld	r23, X
    d512:	80 e2       	ldi	r24, 0x20	; 32
    d514:	a8 2e       	mov	r10, r24
    d516:	83 e0       	ldi	r24, 0x03	; 3
    d518:	b8 2e       	mov	r11, r24
    d51a:	90 e2       	ldi	r25, 0x20	; 32
    d51c:	c9 2e       	mov	r12, r25
    d51e:	93 e0       	ldi	r25, 0x03	; 3
    d520:	d9 2e       	mov	r13, r25
    d522:	20 e4       	ldi	r18, 0x40	; 64
    d524:	36 e0       	ldi	r19, 0x06	; 6
    d526:	40 e4       	ldi	r20, 0x40	; 64
    d528:	56 e0       	ldi	r21, 0x06	; 6
    d52a:	e8 89       	ldd	r30, Y+16	; 0x10
    d52c:	f9 89       	ldd	r31, Y+17	; 0x11
    d52e:	80 81       	ld	r24, Z
    d530:	91 81       	ldd	r25, Z+1	; 0x01
    d532:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBCollides>
    d536:	88 23       	and	r24, r24
    d538:	09 f4       	brne	.+2      	; 0xd53c <collision_detect_player+0x216>
    d53a:	8d c0       	rjmp	.+282    	; 0xd656 <collision_detect_player+0x330>
		{
			player->max_speed = WATER_SPEED;
    d53c:	e4 ec       	ldi	r30, 0xC4	; 196
    d53e:	f9 e0       	ldi	r31, 0x09	; 9
    d540:	d4 01       	movw	r26, r8
    d542:	1c 96       	adiw	r26, 0x0c	; 12
    d544:	fc 93       	st	X, r31
    d546:	ee 93       	st	-X, r30
    d548:	1b 97       	sbiw	r26, 0x0b	; 11
    d54a:	f1 e0       	ldi	r31, 0x01	; 1
    d54c:	fb 8b       	std	Y+19, r31	; 0x13
    d54e:	9b c0       	rjmp	.+310    	; 0xd686 <collision_detect_player+0x360>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->netMessage.shared.x,player->netMessage.shared.y,1600,1600,tile_x*800,tile_y*800,800,800))
    d550:	8c 32       	cpi	r24, 0x2C	; 44
    d552:	89 f2       	breq	.-94     	; 0xd4f6 <collision_detect_player+0x1d0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d554:	87 30       	cpi	r24, 0x07	; 7
    d556:	19 f5       	brne	.+70     	; 0xd59e <collision_detect_player+0x278>
    d558:	ac 89       	ldd	r26, Y+20	; 0x14
    d55a:	bd 89       	ldd	r27, Y+21	; 0x15
    d55c:	8c 91       	ld	r24, X
    d55e:	80 fd       	sbrc	r24, 0
    d560:	7a c0       	rjmp	.+244    	; 0xd656 <collision_detect_player+0x330>
    d562:	c4 01       	movw	r24, r8
    d564:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    d568:	81 11       	cpse	r24, r1
    d56a:	75 c0       	rjmp	.+234    	; 0xd656 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMSPEED, tile_x, tile_y, 1);
    d56c:	21 e0       	ldi	r18, 0x01	; 1
    d56e:	47 2d       	mov	r20, r7
    d570:	66 2d       	mov	r22, r6
    d572:	83 e0       	ldi	r24, 0x03	; 3
    d574:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d578:	af 81       	ldd	r26, Y+7	; 0x07
    d57a:	b8 85       	ldd	r27, Y+8	; 0x08
    d57c:	ed 91       	ld	r30, X+
    d57e:	fc 91       	ld	r31, X
    d580:	e1 59       	subi	r30, 0x91	; 145
    d582:	f3 4f       	sbci	r31, 0xF3	; 243
    d584:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    d586:	84 e6       	ldi	r24, 0x64	; 100
    d588:	99 e1       	ldi	r25, 0x19	; 25
    d58a:	f4 01       	movw	r30, r8
    d58c:	94 87       	std	Z+12, r25	; 0x0c
    d58e:	83 87       	std	Z+11, r24	; 0x0b
			player->has_over_speed = true;
    d590:	91 e0       	ldi	r25, 0x01	; 1
    d592:	96 87       	std	Z+14, r25	; 0x0e
			DrawMap2(hud_x+10, 1, map_speed_itm);
    d594:	4e e2       	ldi	r20, 0x2E	; 46
    d596:	5b e6       	ldi	r21, 0x6B	; 107
    d598:	61 e0       	ldi	r22, 0x01	; 1
    d59a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    d59c:	20 c0       	rjmp	.+64     	; 0xd5de <collision_detect_player+0x2b8>
			SetTile(tile_x, tile_y, 0);
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d59e:	89 30       	cpi	r24, 0x09	; 9
    d5a0:	81 f5       	brne	.+96     	; 0xd602 <collision_detect_player+0x2dc>
    d5a2:	ac 89       	ldd	r26, Y+20	; 0x14
    d5a4:	bd 89       	ldd	r27, Y+21	; 0x15
    d5a6:	8c 91       	ld	r24, X
    d5a8:	80 fd       	sbrc	r24, 0
    d5aa:	55 c0       	rjmp	.+170    	; 0xd656 <collision_detect_player+0x330>
    d5ac:	c4 01       	movw	r24, r8
    d5ae:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    d5b2:	81 11       	cpse	r24, r1
    d5b4:	50 c0       	rjmp	.+160    	; 0xd656 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMROCKET, tile_x, tile_y, 1);
    d5b6:	21 e0       	ldi	r18, 0x01	; 1
    d5b8:	47 2d       	mov	r20, r7
    d5ba:	66 2d       	mov	r22, r6
    d5bc:	84 e0       	ldi	r24, 0x04	; 4
    d5be:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d5c2:	af 81       	ldd	r26, Y+7	; 0x07
    d5c4:	b8 85       	ldd	r27, Y+8	; 0x08
    d5c6:	ed 91       	ld	r30, X+
    d5c8:	fc 91       	ld	r31, X
    d5ca:	e1 59       	subi	r30, 0x91	; 145
    d5cc:	f3 4f       	sbci	r31, 0xF3	; 243
    d5ce:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    d5d0:	81 e0       	ldi	r24, 0x01	; 1
    d5d2:	f4 01       	movw	r30, r8
    d5d4:	85 87       	std	Z+13, r24	; 0x0d
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    d5d6:	48 e2       	ldi	r20, 0x28	; 40
    d5d8:	5b e6       	ldi	r21, 0x6B	; 107
    d5da:	61 e0       	ldi	r22, 0x01	; 1
    d5dc:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d5de:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
			SetTile(tile_x, tile_y, 0);
    d5e2:	40 e0       	ldi	r20, 0x00	; 0
    d5e4:	50 e0       	ldi	r21, 0x00	; 0
    d5e6:	67 2d       	mov	r22, r7
    d5e8:	86 2d       	mov	r24, r6
    d5ea:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    d5ee:	22 e0       	ldi	r18, 0x02	; 2
    d5f0:	40 91 cf 0f 	lds	r20, 0x0FCF
    d5f4:	60 91 59 0c 	lds	r22, 0x0C59
    d5f8:	80 91 c9 0b 	lds	r24, 0x0BC9
    d5fc:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
    d600:	2a c0       	rjmp	.+84     	; 0xd656 <collision_detect_player+0x330>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(player))
    d602:	88 30       	cpi	r24, 0x08	; 8
    d604:	41 f5       	brne	.+80     	; 0xd656 <collision_detect_player+0x330>
    d606:	ac 89       	ldd	r26, Y+20	; 0x14
    d608:	bd 89       	ldd	r27, Y+21	; 0x15
    d60a:	8c 91       	ld	r24, X
    d60c:	80 fd       	sbrc	r24, 0
    d60e:	23 c0       	rjmp	.+70     	; 0xd656 <collision_detect_player+0x330>
    d610:	c4 01       	movw	r24, r8
    d612:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    d616:	81 11       	cpse	r24, r1
    d618:	1e c0       	rjmp	.+60     	; 0xd656 <collision_detect_player+0x330>
		{
			send_net_message(NETITEMBOMB, tile_x, tile_y, 1);
    d61a:	21 e0       	ldi	r18, 0x01	; 1
    d61c:	47 2d       	mov	r20, r7
    d61e:	66 2d       	mov	r22, r6
    d620:	85 e0       	ldi	r24, 0x05	; 5
    d622:	0e 94 ab 64 	call	0xc956	; 0xc956 <send_net_message>
			level.level_map[tiles[i]] = L_EMPTY;
    d626:	af 81       	ldd	r26, Y+7	; 0x07
    d628:	b8 85       	ldd	r27, Y+8	; 0x08
    d62a:	ed 91       	ld	r30, X+
    d62c:	fc 91       	ld	r31, X
    d62e:	e1 59       	subi	r30, 0x91	; 145
    d630:	f3 4f       	sbci	r31, 0xF3	; 243
    d632:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    d634:	40 e0       	ldi	r20, 0x00	; 0
    d636:	50 e0       	ldi	r21, 0x00	; 0
    d638:	67 2d       	mov	r22, r7
    d63a:	86 2d       	mov	r24, r6
    d63c:	0e 94 84 3a 	call	0x7508	; 0x7508 <SetTile>
			LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_ITEM);
    d640:	22 e0       	ldi	r18, 0x02	; 2
    d642:	40 91 cf 0f 	lds	r20, 0x0FCF
    d646:	60 91 59 0c 	lds	r22, 0x0C59
    d64a:	80 91 c9 0b 	lds	r24, 0x0BC9
    d64e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
			explode = 1;
    d652:	b1 e0       	ldi	r27, 0x01	; 1
    d654:	ba 8b       	std	Y+18, r27	; 0x12
		}
		
		if (!hit_water)
    d656:	eb 89       	ldd	r30, Y+19	; 0x13
    d658:	e1 11       	cpse	r30, r1
    d65a:	13 c0       	rjmp	.+38     	; 0xd682 <collision_detect_player+0x35c>
		{
			player->max_speed = MAX_SPEED;
    d65c:	e8 e8       	ldi	r30, 0x88	; 136
    d65e:	f3 e1       	ldi	r31, 0x13	; 19
    d660:	d4 01       	movw	r26, r8
    d662:	1c 96       	adiw	r26, 0x0c	; 12
    d664:	fc 93       	st	X, r31
    d666:	ee 93       	st	-X, r30
    d668:	1b 97       	sbiw	r26, 0x0b	; 11
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    d66a:	1e 96       	adiw	r26, 0x0e	; 14
    d66c:	8c 91       	ld	r24, X
    d66e:	1e 97       	sbiw	r26, 0x0e	; 14
    d670:	88 23       	and	r24, r24
    d672:	49 f0       	breq	.+18     	; 0xd686 <collision_detect_player+0x360>
    d674:	84 e6       	ldi	r24, 0x64	; 100
    d676:	99 e1       	ldi	r25, 0x19	; 25
    d678:	1c 96       	adiw	r26, 0x0c	; 12
    d67a:	9c 93       	st	X, r25
    d67c:	8e 93       	st	-X, r24
    d67e:	1b 97       	sbiw	r26, 0x0b	; 11
    d680:	02 c0       	rjmp	.+4      	; 0xd686 <collision_detect_player+0x360>
    d682:	91 e0       	ldi	r25, 0x01	; 1
    d684:	9b 8b       	std	Y+19, r25	; 0x13
		player->netMessage.shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    d686:	ad 85       	ldd	r26, Y+13	; 0x0d
    d688:	af 5f       	subi	r26, 0xFF	; 255
    d68a:	ad 87       	std	Y+13, r26	; 0x0d
    d68c:	ef 81       	ldd	r30, Y+7	; 0x07
    d68e:	f8 85       	ldd	r31, Y+8	; 0x08
    d690:	32 96       	adiw	r30, 0x02	; 2
    d692:	f8 87       	std	Y+8, r31	; 0x08
    d694:	ef 83       	std	Y+7, r30	; 0x07
    d696:	a3 30       	cpi	r26, 0x03	; 3
    d698:	09 f0       	breq	.+2      	; 0xd69c <collision_detect_player+0x376>
    d69a:	bb ce       	rjmp	.-650    	; 0xd412 <collision_detect_player+0xec>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->netMessage.shared);
    d69c:	fc 85       	ldd	r31, Y+12	; 0x0c
    d69e:	ff 23       	and	r31, r31
    d6a0:	91 f0       	breq	.+36     	; 0xd6c6 <collision_detect_player+0x3a0>
    d6a2:	c1 01       	movw	r24, r2
    d6a4:	0e 94 94 52 	call	0xa528	; 0xa528 <recoil_sprite>
	if (collision_count == 1)
    d6a8:	8c 85       	ldd	r24, Y+12	; 0x0c
    d6aa:	81 30       	cpi	r24, 0x01	; 1
    d6ac:	61 f4       	brne	.+24     	; 0xd6c6 <collision_detect_player+0x3a0>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    d6ae:	fe 01       	movw	r30, r28
    d6b0:	9b 85       	ldd	r25, Y+11	; 0x0b
    d6b2:	e9 0f       	add	r30, r25
    d6b4:	f1 1d       	adc	r31, r1
    d6b6:	e9 0f       	add	r30, r25
    d6b8:	f1 1d       	adc	r31, r1
    d6ba:	41 81       	ldd	r20, Z+1	; 0x01
    d6bc:	52 81       	ldd	r21, Z+2	; 0x02
    d6be:	69 2f       	mov	r22, r25
    d6c0:	c4 01       	movw	r24, r8
    d6c2:	0e 94 1b 57 	call	0xae36	; 0xae36 <slide>
	}
	return explode;
}
    d6c6:	8a 89       	ldd	r24, Y+18	; 0x12
    d6c8:	6c 96       	adiw	r28, 0x1c	; 28
    d6ca:	0f b6       	in	r0, 0x3f	; 63
    d6cc:	f8 94       	cli
    d6ce:	de bf       	out	0x3e, r29	; 62
    d6d0:	0f be       	out	0x3f, r0	; 63
    d6d2:	cd bf       	out	0x3d, r28	; 61
    d6d4:	df 91       	pop	r29
    d6d6:	cf 91       	pop	r28
    d6d8:	1f 91       	pop	r17
    d6da:	0f 91       	pop	r16
    d6dc:	ff 90       	pop	r15
    d6de:	ef 90       	pop	r14
    d6e0:	df 90       	pop	r13
    d6e2:	cf 90       	pop	r12
    d6e4:	bf 90       	pop	r11
    d6e6:	af 90       	pop	r10
    d6e8:	9f 90       	pop	r9
    d6ea:	8f 90       	pop	r8
    d6ec:	7f 90       	pop	r7
    d6ee:	6f 90       	pop	r6
    d6f0:	5f 90       	pop	r5
    d6f2:	4f 90       	pop	r4
    d6f4:	3f 90       	pop	r3
    d6f6:	2f 90       	pop	r2
    d6f8:	08 95       	ret

0000d6fa <update_turret_shot>:
		}
	}
}

void update_turret_shot(Turret* t, Shot* s)
{	
    d6fa:	0f 93       	push	r16
    d6fc:	1f 93       	push	r17
    d6fe:	cf 93       	push	r28
    d700:	df 93       	push	r29
    d702:	fc 01       	movw	r30, r24
    d704:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    d706:	80 85       	ldd	r24, Z+8	; 0x08
    d708:	81 11       	cpse	r24, r1
    d70a:	02 c0       	rjmp	.+4      	; 0xd710 <update_turret_shot+0x16>
	{
		s->active = 0;
    d70c:	1b 86       	std	Y+11, r1	; 0x0b
		return;
    d70e:	5b c0       	rjmp	.+182    	; 0xd7c6 <update_turret_shot+0xcc>
	}
	if (!s->active)
    d710:	8b 85       	ldd	r24, Y+11	; 0x0b
    d712:	81 11       	cpse	r24, r1
    d714:	17 c0       	rjmp	.+46     	; 0xd744 <update_turret_shot+0x4a>
	{
		s->active = 1;
    d716:	81 e0       	ldi	r24, 0x01	; 1
    d718:	8b 87       	std	Y+11, r24	; 0x0b
		s->shared.x = t->shared.x+300;
    d71a:	84 81       	ldd	r24, Z+4	; 0x04
    d71c:	95 81       	ldd	r25, Z+5	; 0x05
    d71e:	84 5d       	subi	r24, 0xD4	; 212
    d720:	9e 4f       	sbci	r25, 0xFE	; 254
    d722:	9d 83       	std	Y+5, r25	; 0x05
    d724:	8c 83       	std	Y+4, r24	; 0x04
		s->shared.y = t->shared.y+300;
    d726:	86 81       	ldd	r24, Z+6	; 0x06
    d728:	97 81       	ldd	r25, Z+7	; 0x07
    d72a:	84 5d       	subi	r24, 0xD4	; 212
    d72c:	9e 4f       	sbci	r25, 0xFE	; 254
    d72e:	9f 83       	std	Y+7, r25	; 0x07
    d730:	8e 83       	std	Y+6, r24	; 0x06
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_CANNONBALL);
    d732:	21 e0       	ldi	r18, 0x01	; 1
    d734:	40 91 cf 0f 	lds	r20, 0x0FCF
    d738:	60 91 59 0c 	lds	r22, 0x0C59
    d73c:	80 91 c9 0b 	lds	r24, 0x0BC9
    d740:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
	}
	s->shared.y += BOSS_TURRET_SHOT_SPEED / FRAME_TIME_INVERTED;
    d744:	8e 81       	ldd	r24, Y+6	; 0x06
    d746:	9f 81       	ldd	r25, Y+7	; 0x07
    d748:	9c 01       	movw	r18, r24
    d74a:	20 56       	subi	r18, 0x60	; 96
    d74c:	3e 4f       	sbci	r19, 0xFE	; 254
    d74e:	3f 83       	std	Y+7, r19	; 0x07
    d750:	2e 83       	std	Y+6, r18	; 0x06
	
	/* Level boundries first */
	if (s->shared.y + 800 > 21600)
    d752:	80 54       	subi	r24, 0x40	; 64
    d754:	9b 4f       	sbci	r25, 0xFB	; 251
    d756:	81 36       	cpi	r24, 0x61	; 97
    d758:	94 45       	sbci	r25, 0x54	; 84
    d75a:	c0 f6       	brcc	.-80     	; 0xd70c <update_turret_shot+0x12>
		s->active = 0;
		return;
	}
	
	/* Player interaction */	
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->netMessage.flags & EXPLODING_FLAG) && !is_net_player(game.boss_fight_player))
    d75c:	00 91 c5 0b 	lds	r16, 0x0BC5
    d760:	10 91 c6 0b 	lds	r17, 0x0BC6
    d764:	be 01       	movw	r22, r28
    d766:	c8 01       	movw	r24, r16
    d768:	0e 94 13 55 	call	0xaa26	; 0xaa26 <player_shot>
    d76c:	88 23       	and	r24, r24
    d76e:	59 f1       	breq	.+86     	; 0xd7c6 <update_turret_shot+0xcc>
    d770:	f8 01       	movw	r30, r16
    d772:	ef 58       	subi	r30, 0x8F	; 143
    d774:	ff 4f       	sbci	r31, 0xFF	; 255
    d776:	80 81       	ld	r24, Z
    d778:	80 fd       	sbrc	r24, 0
    d77a:	25 c0       	rjmp	.+74     	; 0xd7c6 <update_turret_shot+0xcc>
    d77c:	c8 01       	movw	r24, r16
    d77e:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    d782:	81 11       	cpse	r24, r1
    d784:	20 c0       	rjmp	.+64     	; 0xd7c6 <update_turret_shot+0xcc>
	{
		game.boss_fight_player_lives--;
    d786:	80 91 bb 0b 	lds	r24, 0x0BBB
    d78a:	81 50       	subi	r24, 0x01	; 1
    d78c:	80 93 bb 0b 	sts	0x0BBB, r24
		if (game.boss_fight_player_lives <= 0)
    d790:	81 11       	cpse	r24, r1
    d792:	03 c0       	rjmp	.+6      	; 0xd79a <update_turret_shot+0xa0>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    d794:	80 e1       	ldi	r24, 0x10	; 16
    d796:	80 93 b9 0b 	sts	0x0BB9, r24
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    d79a:	60 91 ba 0b 	lds	r22, 0x0BBA
    d79e:	c8 01       	movw	r24, r16
    d7a0:	0e 94 e9 55 	call	0xabd2	; 0xabd2 <kill_player>
    d7a4:	86 e0       	ldi	r24, 0x06	; 6
    d7a6:	0e 94 fe 49 	call	0x93fc	; 0x93fc <LBPlaySound.part.5>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d7aa:	21 e0       	ldi	r18, 0x01	; 1
    d7ac:	80 91 bb 0b 	lds	r24, 0x0BBB
    d7b0:	81 11       	cpse	r24, r1
    d7b2:	20 e0       	ldi	r18, 0x00	; 0
    d7b4:	40 e0       	ldi	r20, 0x00	; 0
    d7b6:	60 e0       	ldi	r22, 0x00	; 0
    d7b8:	81 e0       	ldi	r24, 0x01	; 1
	}
}
    d7ba:	df 91       	pop	r29
    d7bc:	cf 91       	pop	r28
    d7be:	1f 91       	pop	r17
    d7c0:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_TANK_EXPLODE);
		send_net_message(NETHITBYTURRET, 0, 0, game.boss_fight_player_lives == 0);
    d7c2:	0c 94 ab 64 	jmp	0xc956	; 0xc956 <send_net_message>
	}
}
    d7c6:	df 91       	pop	r29
    d7c8:	cf 91       	pop	r28
    d7ca:	1f 91       	pop	r17
    d7cc:	0f 91       	pop	r16
    d7ce:	08 95       	ret

0000d7d0 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    d7d0:	df 92       	push	r13
    d7d2:	ef 92       	push	r14
    d7d4:	ff 92       	push	r15
    d7d6:	0f 93       	push	r16
    d7d8:	1f 93       	push	r17
    d7da:	cf 93       	push	r28
    d7dc:	df 93       	push	r29
    d7de:	8c 01       	movw	r16, r24
    d7e0:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    d7e2:	80 91 b8 0b 	lds	r24, 0x0BB8
    d7e6:	88 23       	and	r24, r24
    d7e8:	19 f1       	breq	.+70     	; 0xd830 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    d7ea:	0e 94 d0 4c 	call	0x99a0	; 0x99a0 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    d7ee:	4d e8       	ldi	r20, 0x8D	; 141
    d7f0:	5b e6       	ldi	r21, 0x6B	; 107
    d7f2:	6c e0       	ldi	r22, 0x0C	; 12
    d7f4:	88 e0       	ldi	r24, 0x08	; 8
    d7f6:	0e 94 06 49 	call	0x920c	; 0x920c <DrawMap>
		Print(12, 13, (char*) strPaused);
    d7fa:	4b eb       	ldi	r20, 0xBB	; 187
    d7fc:	53 e0       	ldi	r21, 0x03	; 3
    d7fe:	6d e0       	ldi	r22, 0x0D	; 13
    d800:	70 e0       	ldi	r23, 0x00	; 0
    d802:	8c e0       	ldi	r24, 0x0C	; 12
    d804:	90 e0       	ldi	r25, 0x00	; 0
    d806:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		Print(11, 14, (char*) strExit);
    d80a:	42 ec       	ldi	r20, 0xC2	; 194
    d80c:	53 e0       	ldi	r21, 0x03	; 3
    d80e:	6e e0       	ldi	r22, 0x0E	; 14
    d810:	70 e0       	ldi	r23, 0x00	; 0
    d812:	8b e0       	ldi	r24, 0x0B	; 11
    d814:	90 e0       	ldi	r25, 0x00	; 0
    d816:	0e 94 86 49 	call	0x930c	; 0x930c <Print>
		
		// Update
		update_player(p1, &player1);
    d81a:	68 ee       	ldi	r22, 0xE8	; 232
    d81c:	7b e0       	ldi	r23, 0x0B	; 11
    d81e:	c8 01       	movw	r24, r16
    d820:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
		update_player(p2, &player2);
    d824:	6e e5       	ldi	r22, 0x5E	; 94
    d826:	7f e0       	ldi	r23, 0x0F	; 15
    d828:	ce 01       	movw	r24, r28
    d82a:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
    d82e:	ca c1       	rjmp	.+916    	; 0xdbc4 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    d830:	90 91 b9 0b 	lds	r25, 0x0BB9
    d834:	91 30       	cpi	r25, 0x01	; 1
    d836:	19 f4       	brne	.+6      	; 0xd83e <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    d838:	0e 94 ed 58 	call	0xb1da	; 0xb1da <render_boss_fight_scope_load>
    d83c:	05 c0       	rjmp	.+10     	; 0xd848 <update_level+0x78>
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
		
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    d83e:	92 30       	cpi	r25, 0x02	; 2
    d840:	09 f0       	breq	.+2      	; 0xd844 <update_level+0x74>
    d842:	4e c0       	rjmp	.+156    	; 0xd8e0 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    d844:	0e 94 00 59 	call	0xb200	; 0xb200 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    d848:	60 e0       	ldi	r22, 0x00	; 0
    d84a:	80 91 c5 0b 	lds	r24, 0x0BC5
    d84e:	90 91 c6 0b 	lds	r25, 0x0BC6
    d852:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <tank_map>
    d856:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    d858:	40 e0       	ldi	r20, 0x00	; 0
    d85a:	60 ec       	ldi	r22, 0xC0	; 192
    d85c:	71 e3       	ldi	r23, 0x31	; 49
    d85e:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		p1_shot_index = p2_index + 4;
    d862:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    d864:	6c 2f       	mov	r22, r28
    d866:	80 91 c5 0b 	lds	r24, 0x0BC5
    d86a:	90 91 c6 0b 	lds	r25, 0x0BC6
    d86e:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
    d872:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    d874:	40 e0       	ldi	r20, 0x00	; 0
    d876:	66 ec       	ldi	r22, 0xC6	; 198
    d878:	71 e3       	ldi	r23, 0x31	; 49
    d87a:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    d87e:	6c 2f       	mov	r22, r28
    d880:	80 91 c5 0b 	lds	r24, 0x0BC5
    d884:	90 91 c6 0b 	lds	r25, 0x0BC6
    d888:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    d88c:	60 e0       	ldi	r22, 0x00	; 0
    d88e:	80 91 c5 0b 	lds	r24, 0x0BC5
    d892:	90 91 c6 0b 	lds	r25, 0x0BC6
    d896:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d89a:	6c 2f       	mov	r22, r28
    d89c:	80 91 c5 0b 	lds	r24, 0x0BC5
    d8a0:	90 91 c6 0b 	lds	r25, 0x0BC6
    d8a4:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_shot(&player2, p2_shot_index);
    d8a8:	6d 2f       	mov	r22, r29
    d8aa:	8e e5       	ldi	r24, 0x5E	; 94
    d8ac:	9f e0       	ldi	r25, 0x0F	; 15
    d8ae:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_tile_explosions(&tile_animations);
    d8b2:	8a ec       	ldi	r24, 0xCA	; 202
    d8b4:	9b e0       	ldi	r25, 0x0B	; 11
    d8b6:	0e 94 a6 51 	call	0xa34c	; 0xa34c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    d8ba:	60 91 c5 0b 	lds	r22, 0x0BC5
    d8be:	70 91 c6 0b 	lds	r23, 0x0BC6
    d8c2:	80 91 c7 0b 	lds	r24, 0x0BC7
    d8c6:	90 91 c8 0b 	lds	r25, 0x0BC8
    d8ca:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    d8ce:	60 91 ba 0b 	lds	r22, 0x0BBA
    d8d2:	80 91 c5 0b 	lds	r24, 0x0BC5
    d8d6:	90 91 c6 0b 	lds	r25, 0x0BC6
    d8da:	0e 94 93 69 	call	0xd326	; 0xd326 <collision_detect_player>
    d8de:	72 c1       	rjmp	.+740    	; 0xdbc4 <update_level+0x3f4>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    d8e0:	94 30       	cpi	r25, 0x04	; 4
    d8e2:	09 f0       	breq	.+2      	; 0xd8e6 <update_level+0x116>
    d8e4:	98 c0       	rjmp	.+304    	; 0xda16 <update_level+0x246>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    d8e6:	80 91 38 10 	lds	r24, 0x1038
    d8ea:	81 11       	cpse	r24, r1
    d8ec:	07 c0       	rjmp	.+14     	; 0xd8fc <update_level+0x12c>
    d8ee:	80 91 09 10 	lds	r24, 0x1009
    d8f2:	81 11       	cpse	r24, r1
    d8f4:	03 c0       	rjmp	.+6      	; 0xd8fc <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    d8f6:	80 e2       	ldi	r24, 0x20	; 32
    d8f8:	80 93 b9 0b 	sts	0x0BB9, r24
		}
		
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    d8fc:	60 e0       	ldi	r22, 0x00	; 0
    d8fe:	80 91 c5 0b 	lds	r24, 0x0BC5
    d902:	90 91 c6 0b 	lds	r25, 0x0BC6
    d906:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <tank_map>
    d90a:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    d90c:	68 2f       	mov	r22, r24
    d90e:	80 91 c5 0b 	lds	r24, 0x0BC5
    d912:	90 91 c6 0b 	lds	r25, 0x0BC6
    d916:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
    d91a:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    d91c:	01 e0       	ldi	r16, 0x01	; 1
    d91e:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    d920:	12 e0       	ldi	r17, 0x02	; 2
    d922:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    d924:	d3 e0       	ldi	r29, 0x03	; 3
    d926:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d928:	80 91 38 10 	lds	r24, 0x1038
    d92c:	88 23       	and	r24, r24
    d92e:	19 f0       	breq	.+6      	; 0xd936 <update_level+0x166>
	return (char*) map_sub_turret;
    d930:	68 e7       	ldi	r22, 0x78	; 120
    d932:	71 e3       	ldi	r23, 0x31	; 49
    d934:	02 c0       	rjmp	.+4      	; 0xd93a <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d936:	66 ec       	ldi	r22, 0xC6	; 198
    d938:	71 e3       	ldi	r23, 0x31	; 49
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    d93a:	40 e0       	ldi	r20, 0x00	; 0
    d93c:	8c 2f       	mov	r24, r28
    d93e:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d942:	80 91 38 10 	lds	r24, 0x1038
    d946:	88 23       	and	r24, r24
    d948:	19 f0       	breq	.+6      	; 0xd950 <update_level+0x180>
	return (char*) map_sub_shot;
    d94a:	6b e7       	ldi	r22, 0x7B	; 123
    d94c:	71 e3       	ldi	r23, 0x31	; 49
    d94e:	02 c0       	rjmp	.+4      	; 0xd954 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d950:	66 ec       	ldi	r22, 0xC6	; 198
    d952:	71 e3       	ldi	r23, 0x31	; 49
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    d954:	40 e0       	ldi	r20, 0x00	; 0
    d956:	80 2f       	mov	r24, r16
    d958:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d95c:	80 91 09 10 	lds	r24, 0x1009
    d960:	88 23       	and	r24, r24
    d962:	19 f0       	breq	.+6      	; 0xd96a <update_level+0x19a>
	return (char*) map_sub_turret;
    d964:	68 e7       	ldi	r22, 0x78	; 120
    d966:	71 e3       	ldi	r23, 0x31	; 49
    d968:	02 c0       	rjmp	.+4      	; 0xd96e <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d96a:	66 ec       	ldi	r22, 0xC6	; 198
    d96c:	71 e3       	ldi	r23, 0x31	; 49
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    d96e:	40 e0       	ldi	r20, 0x00	; 0
    d970:	81 2f       	mov	r24, r17
    d972:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d976:	80 91 09 10 	lds	r24, 0x1009
    d97a:	88 23       	and	r24, r24
    d97c:	19 f0       	breq	.+6      	; 0xd984 <update_level+0x1b4>
	return (char*) map_sub_shot;
    d97e:	6b e7       	ldi	r22, 0x7B	; 123
    d980:	71 e3       	ldi	r23, 0x31	; 49
    d982:	02 c0       	rjmp	.+4      	; 0xd988 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    d984:	66 ec       	ldi	r22, 0xC6	; 198
    d986:	71 e3       	ldi	r23, 0x31	; 49
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    d988:	40 e0       	ldi	r20, 0x00	; 0
    d98a:	8d 2f       	mov	r24, r29
    d98c:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    d990:	60 e0       	ldi	r22, 0x00	; 0
    d992:	80 91 c5 0b 	lds	r24, 0x0BC5
    d996:	90 91 c6 0b 	lds	r25, 0x0BC6
    d99a:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    d99e:	6f 2d       	mov	r22, r15
    d9a0:	80 91 c5 0b 	lds	r24, 0x0BC5
    d9a4:	90 91 c6 0b 	lds	r25, 0x0BC6
    d9a8:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_tile_explosions(&tile_animations);
    d9ac:	8a ec       	ldi	r24, 0xCA	; 202
    d9ae:	9b e0       	ldi	r25, 0x0B	; 11
    d9b0:	0e 94 a6 51 	call	0xa34c	; 0xa34c <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    d9b4:	6c 2f       	mov	r22, r28
    d9b6:	80 e3       	ldi	r24, 0x30	; 48
    d9b8:	90 e1       	ldi	r25, 0x10	; 16
    d9ba:	0e 94 36 59 	call	0xb26c	; 0xb26c <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    d9be:	60 2f       	mov	r22, r16
    d9c0:	80 e3       	ldi	r24, 0x30	; 48
    d9c2:	90 e1       	ldi	r25, 0x10	; 16
    d9c4:	0e 94 4f 59 	call	0xb29e	; 0xb29e <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    d9c8:	61 2f       	mov	r22, r17
    d9ca:	81 e0       	ldi	r24, 0x01	; 1
    d9cc:	90 e1       	ldi	r25, 0x10	; 16
    d9ce:	0e 94 36 59 	call	0xb26c	; 0xb26c <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    d9d2:	6d 2f       	mov	r22, r29
    d9d4:	81 e0       	ldi	r24, 0x01	; 1
    d9d6:	90 e1       	ldi	r25, 0x10	; 16
    d9d8:	0e 94 4f 59 	call	0xb29e	; 0xb29e <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    d9dc:	40 e8       	ldi	r20, 0x80	; 128
    d9de:	55 e2       	ldi	r21, 0x25	; 37
    d9e0:	60 ea       	ldi	r22, 0xA0	; 160
    d9e2:	7f e0       	ldi	r23, 0x0F	; 15
    d9e4:	80 e3       	ldi	r24, 0x30	; 48
    d9e6:	90 e1       	ldi	r25, 0x10	; 16
    d9e8:	0e 94 68 59 	call	0xb2d0	; 0xb2d0 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    d9ec:	40 e0       	ldi	r20, 0x00	; 0
    d9ee:	5b e4       	ldi	r21, 0x4B	; 75
    d9f0:	60 e2       	ldi	r22, 0x20	; 32
    d9f2:	75 e3       	ldi	r23, 0x35	; 53
    d9f4:	81 e0       	ldi	r24, 0x01	; 1
    d9f6:	90 e1       	ldi	r25, 0x10	; 16
    d9f8:	0e 94 68 59 	call	0xb2d0	; 0xb2d0 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    d9fc:	69 e3       	ldi	r22, 0x39	; 57
    d9fe:	70 e1       	ldi	r23, 0x10	; 16
    da00:	80 e3       	ldi	r24, 0x30	; 48
    da02:	90 e1       	ldi	r25, 0x10	; 16
    da04:	0e 94 7d 6b 	call	0xd6fa	; 0xd6fa <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    da08:	6a e0       	ldi	r22, 0x0A	; 10
    da0a:	70 e1       	ldi	r23, 0x10	; 16
    da0c:	81 e0       	ldi	r24, 0x01	; 1
    da0e:	90 e1       	ldi	r25, 0x10	; 16
    da10:	0e 94 7d 6b 	call	0xd6fa	; 0xd6fa <update_turret_shot>
    da14:	52 cf       	rjmp	.-348    	; 0xd8ba <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    da16:	90 32       	cpi	r25, 0x20	; 32
    da18:	09 f0       	breq	.+2      	; 0xda1c <update_level+0x24c>
    da1a:	55 c0       	rjmp	.+170    	; 0xdac6 <update_level+0x2f6>
	{
		// Render
		render_boss_fight_sub_sinking();
    da1c:	0e 94 21 59 	call	0xb242	; 0xb242 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    da20:	60 e0       	ldi	r22, 0x00	; 0
    da22:	80 91 c5 0b 	lds	r24, 0x0BC5
    da26:	90 91 c6 0b 	lds	r25, 0x0BC6
    da2a:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <tank_map>
    da2e:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    da30:	40 e0       	ldi	r20, 0x00	; 0
    da32:	60 ec       	ldi	r22, 0xC0	; 192
    da34:	71 e3       	ldi	r23, 0x31	; 49
    da36:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		p1_shot_index = p2_index + 4;
    da3a:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    da3c:	6c 2f       	mov	r22, r28
    da3e:	80 91 c5 0b 	lds	r24, 0x0BC5
    da42:	90 91 c6 0b 	lds	r25, 0x0BC6
    da46:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
    da4a:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    da4c:	40 e0       	ldi	r20, 0x00	; 0
    da4e:	66 ec       	ldi	r22, 0xC6	; 198
    da50:	71 e3       	ldi	r23, 0x31	; 49
    da52:	0e 94 80 48 	call	0x9100	; 0x9100 <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    da56:	6c 2f       	mov	r22, r28
    da58:	80 91 c5 0b 	lds	r24, 0x0BC5
    da5c:	90 91 c6 0b 	lds	r25, 0x0BC6
    da60:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    da64:	60 e0       	ldi	r22, 0x00	; 0
    da66:	80 91 c5 0b 	lds	r24, 0x0BC5
    da6a:	90 91 c6 0b 	lds	r25, 0x0BC6
    da6e:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    da72:	6c 2f       	mov	r22, r28
    da74:	80 91 c5 0b 	lds	r24, 0x0BC5
    da78:	90 91 c6 0b 	lds	r25, 0x0BC6
    da7c:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_shot(&player2, p2_shot_index);
    da80:	6d 2f       	mov	r22, r29
    da82:	8e e5       	ldi	r24, 0x5E	; 94
    da84:	9f e0       	ldi	r25, 0x0F	; 15
    da86:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_tile_explosions(&tile_animations);
    da8a:	8a ec       	ldi	r24, 0xCA	; 202
    da8c:	9b e0       	ldi	r25, 0x0B	; 11
    da8e:	0e 94 a6 51 	call	0xa34c	; 0xa34c <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    da92:	60 91 c5 0b 	lds	r22, 0x0BC5
    da96:	70 91 c6 0b 	lds	r23, 0x0BC6
    da9a:	80 91 c7 0b 	lds	r24, 0x0BC7
    da9e:	90 91 c8 0b 	lds	r25, 0x0BC8
    daa2:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    daa6:	60 91 ba 0b 	lds	r22, 0x0BBA
    daaa:	80 91 c5 0b 	lds	r24, 0x0BC5
    daae:	90 91 c6 0b 	lds	r25, 0x0BC6
    dab2:	0e 94 93 69 	call	0xd326	; 0xd326 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    dab6:	80 91 b9 0b 	lds	r24, 0x0BB9
    daba:	80 32       	cpi	r24, 0x20	; 32
    dabc:	09 f4       	brne	.+2      	; 0xdac0 <update_level+0x2f0>
    dabe:	82 c0       	rjmp	.+260    	; 0xdbc4 <update_level+0x3f4>
		{
			resolve_scoring();
    dac0:	0e 94 1a 65 	call	0xca34	; 0xca34 <resolve_scoring>
    dac4:	7f c0       	rjmp	.+254    	; 0xdbc4 <update_level+0x3f4>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    dac6:	90 31       	cpi	r25, 0x10	; 16
    dac8:	d9 f3       	breq	.-10     	; 0xdac0 <update_level+0x2f0>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    daca:	91 11       	cpse	r25, r1
    dacc:	7b c0       	rjmp	.+246    	; 0xdbc4 <update_level+0x3f4>
	{
		p2_index = tank_map(&player1, p1_index);
    dace:	60 e0       	ldi	r22, 0x00	; 0
    dad0:	88 ee       	ldi	r24, 0xE8	; 232
    dad2:	9b e0       	ldi	r25, 0x0B	; 11
    dad4:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <tank_map>
    dad8:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    dada:	68 2f       	mov	r22, r24
    dadc:	8e e5       	ldi	r24, 0x5E	; 94
    dade:	9f e0       	ldi	r25, 0x0F	; 15
    dae0:	0e 94 f5 51 	call	0xa3ea	; 0xa3ea <tank_map>
    dae4:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    dae6:	68 2f       	mov	r22, r24
    dae8:	88 ee       	ldi	r24, 0xE8	; 232
    daea:	9b e0       	ldi	r25, 0x0B	; 11
    daec:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
    daf0:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    daf2:	68 2f       	mov	r22, r24
    daf4:	8e e5       	ldi	r24, 0x5E	; 94
    daf6:	9f e0       	ldi	r25, 0x0F	; 15
    daf8:	0e 94 6a 52 	call	0xa4d4	; 0xa4d4 <shot_map>
		render_player(&player1, p1_index);
    dafc:	60 e0       	ldi	r22, 0x00	; 0
    dafe:	88 ee       	ldi	r24, 0xE8	; 232
    db00:	9b e0       	ldi	r25, 0x0B	; 11
    db02:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <render_player>
		render_player(&player2, p2_index);
    db06:	6d 2d       	mov	r22, r13
    db08:	8e e5       	ldi	r24, 0x5E	; 94
    db0a:	9f e0       	ldi	r25, 0x0F	; 15
    db0c:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <render_player>
		render_shot(&player1, p1_shot_index);
    db10:	6e 2d       	mov	r22, r14
    db12:	88 ee       	ldi	r24, 0xE8	; 232
    db14:	9b e0       	ldi	r25, 0x0B	; 11
    db16:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_shot(&player2, p2_shot_index);
    db1a:	6f 2d       	mov	r22, r15
    db1c:	8e e5       	ldi	r24, 0x5E	; 94
    db1e:	9f e0       	ldi	r25, 0x0F	; 15
    db20:	0e 94 88 51 	call	0xa310	; 0xa310 <render_shot>
		render_tile_explosions(&tile_animations);
    db24:	8a ec       	ldi	r24, 0xCA	; 202
    db26:	9b e0       	ldi	r25, 0x0B	; 11
    db28:	0e 94 a6 51 	call	0xa34c	; 0xa34c <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    db2c:	80 91 c1 0b 	lds	r24, 0x0BC1
    db30:	90 91 c2 0b 	lds	r25, 0x0BC2
    db34:	89 3e       	cpi	r24, 0xE9	; 233
    db36:	93 40       	sbci	r25, 0x03	; 3
    db38:	88 f0       	brcs	.+34     	; 0xdb5c <update_level+0x38c>
    db3a:	80 91 ff 0f 	lds	r24, 0x0FFF
    db3e:	90 91 00 10 	lds	r25, 0x1000
    db42:	18 16       	cp	r1, r24
    db44:	19 06       	cpc	r1, r25
    db46:	54 f4       	brge	.+20     	; 0xdb5c <update_level+0x38c>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    db48:	83 ef       	ldi	r24, 0xF3	; 243
    db4a:	9f e0       	ldi	r25, 0x0F	; 15
    db4c:	0e 94 db 51 	call	0xa3b6	; 0xa3b6 <render_scope>
    db50:	88 23       	and	r24, r24
    db52:	21 f0       	breq	.+8      	; 0xdb5c <update_level+0x38c>
    db54:	10 92 c2 0b 	sts	0x0BC2, r1
    db58:	10 92 c1 0b 	sts	0x0BC1, r1
		}
		game.scope_counter++;
    db5c:	20 91 c1 0b 	lds	r18, 0x0BC1
    db60:	30 91 c2 0b 	lds	r19, 0x0BC2
    db64:	2f 5f       	subi	r18, 0xFF	; 255
    db66:	3f 4f       	sbci	r19, 0xFF	; 255
    db68:	30 93 c2 0b 	sts	0x0BC2, r19
    db6c:	20 93 c1 0b 	sts	0x0BC1, r18
		
		// Update
		update_player(p1, &player1);
    db70:	68 ee       	ldi	r22, 0xE8	; 232
    db72:	7b e0       	ldi	r23, 0x0B	; 11
    db74:	c8 01       	movw	r24, r16
    db76:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
		update_player(p2, &player2);
    db7a:	6e e5       	ldi	r22, 0x5E	; 94
    db7c:	7f e0       	ldi	r23, 0x0F	; 15
    db7e:	ce 01       	movw	r24, r28
    db80:	0e 94 38 68 	call	0xd070	; 0xd070 <update_player>
		resolve_scoring();
    db84:	0e 94 1a 65 	call	0xca34	; 0xca34 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    db88:	60 e0       	ldi	r22, 0x00	; 0
    db8a:	88 ee       	ldi	r24, 0xE8	; 232
    db8c:	9b e0       	ldi	r25, 0x0B	; 11
    db8e:	0e 94 93 69 	call	0xd326	; 0xd326 <collision_detect_player>
    db92:	88 23       	and	r24, r24
    db94:	41 f0       	breq	.+16     	; 0xdba6 <update_level+0x3d6>
    db96:	2f e0       	ldi	r18, 0x0F	; 15
    db98:	40 e0       	ldi	r20, 0x00	; 0
    db9a:	6e e5       	ldi	r22, 0x5E	; 94
    db9c:	7f e0       	ldi	r23, 0x0F	; 15
    db9e:	88 ee       	ldi	r24, 0xE8	; 232
    dba0:	9b e0       	ldi	r25, 0x0B	; 11
    dba2:	0e 94 f8 56 	call	0xadf0	; 0xadf0 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    dba6:	6f e0       	ldi	r22, 0x0F	; 15
    dba8:	8e e5       	ldi	r24, 0x5E	; 94
    dbaa:	9f e0       	ldi	r25, 0x0F	; 15
    dbac:	0e 94 93 69 	call	0xd326	; 0xd326 <collision_detect_player>
    dbb0:	88 23       	and	r24, r24
    dbb2:	41 f0       	breq	.+16     	; 0xdbc4 <update_level+0x3f4>
    dbb4:	20 e0       	ldi	r18, 0x00	; 0
    dbb6:	4f e0       	ldi	r20, 0x0F	; 15
    dbb8:	68 ee       	ldi	r22, 0xE8	; 232
    dbba:	7b e0       	ldi	r23, 0x0B	; 11
    dbbc:	8e e5       	ldi	r24, 0x5E	; 94
    dbbe:	9f e0       	ldi	r25, 0x0F	; 15
    dbc0:	0e 94 f8 56 	call	0xadf0	; 0xadf0 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    dbc4:	80 91 c9 0b 	lds	r24, 0x0BC9
    dbc8:	86 30       	cpi	r24, 0x06	; 6
    dbca:	71 f5       	brne	.+92     	; 0xdc28 <update_level+0x458>
	{
		game.demo_counter++;
    dbcc:	80 91 bf 0b 	lds	r24, 0x0BBF
    dbd0:	90 91 c0 0b 	lds	r25, 0x0BC0
    dbd4:	01 96       	adiw	r24, 0x01	; 1
    dbd6:	90 93 c0 0b 	sts	0x0BC0, r25
    dbda:	80 93 bf 0b 	sts	0x0BBF, r24
		held = ReadJoypad(0);
    dbde:	80 e0       	ldi	r24, 0x00	; 0
    dbe0:	0e 94 ae 3a 	call	0x755c	; 0x755c <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    dbe4:	80 e0       	ldi	r24, 0x00	; 0
    dbe6:	0e 94 ae 3a 	call	0x755c	; 0x755c <ReadJoypad>
    dbea:	89 2b       	or	r24, r25
    dbec:	89 f0       	breq	.+34     	; 0xdc10 <update_level+0x440>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    dbee:	10 92 c0 0b 	sts	0x0BC0, r1
    dbf2:	10 92 bf 0b 	sts	0x0BBF, r1
			fade_through();
    dbf6:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
			init_game_state();
    dbfa:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <init_game_state>
			load_splash();
#endif
		}
	}
}
    dbfe:	df 91       	pop	r29
    dc00:	cf 91       	pop	r28
    dc02:	1f 91       	pop	r17
    dc04:	0f 91       	pop	r16
    dc06:	ff 90       	pop	r15
    dc08:	ef 90       	pop	r14
    dc0a:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    dc0c:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    dc10:	81 e0       	ldi	r24, 0x01	; 1
    dc12:	0e 94 ae 3a 	call	0x755c	; 0x755c <ReadJoypad>
    dc16:	89 2b       	or	r24, r25
    dc18:	51 f7       	brne	.-44     	; 0xdbee <update_level+0x41e>
    dc1a:	80 91 bf 0b 	lds	r24, 0x0BBF
    dc1e:	90 91 c0 0b 	lds	r25, 0x0BC0
    dc22:	88 30       	cpi	r24, 0x08	; 8
    dc24:	97 40       	sbci	r25, 0x07	; 7
    dc26:	18 f7       	brcc	.-58     	; 0xdbee <update_level+0x41e>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    dc28:	df 91       	pop	r29
    dc2a:	cf 91       	pop	r28
    dc2c:	1f 91       	pop	r17
    dc2e:	0f 91       	pop	r16
    dc30:	ff 90       	pop	r15
    dc32:	ef 90       	pop	r14
    dc34:	df 90       	pop	r13
    dc36:	08 95       	ret

0000dc38 <_handle_select_helper>:
#endif
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{	
    dc38:	4f 92       	push	r4
    dc3a:	5f 92       	push	r5
    dc3c:	7f 92       	push	r7
    dc3e:	8f 92       	push	r8
    dc40:	9f 92       	push	r9
    dc42:	af 92       	push	r10
    dc44:	bf 92       	push	r11
    dc46:	cf 92       	push	r12
    dc48:	df 92       	push	r13
    dc4a:	ef 92       	push	r14
    dc4c:	ff 92       	push	r15
    dc4e:	0f 93       	push	r16
    dc50:	1f 93       	push	r17
    dc52:	cf 93       	push	r28
    dc54:	df 93       	push	r29
    dc56:	1f 92       	push	r1
    dc58:	cd b7       	in	r28, 0x3d	; 61
    dc5a:	de b7       	in	r29, 0x3e	; 62
    dc5c:	2c 01       	movw	r4, r24
    dc5e:	7b 01       	movw	r14, r22
    dc60:	8a 01       	movw	r16, r20
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING) && !is_net_player(player))
    dc62:	db 01       	movw	r26, r22
    dc64:	cd 90       	ld	r12, X+
    dc66:	dc 90       	ld	r13, X
    dc68:	46 01       	movw	r8, r12
    dc6a:	b0 e1       	ldi	r27, 0x10	; 16
    dc6c:	8b 22       	and	r8, r27
    dc6e:	99 24       	eor	r9, r9
    dc70:	c4 fe       	sbrs	r12, 4
    dc72:	11 c0       	rjmp	.+34     	; 0xdc96 <_handle_select_helper+0x5e>
    dc74:	fc 01       	movw	r30, r24
    dc76:	85 81       	ldd	r24, Z+5	; 0x05
    dc78:	81 11       	cpse	r24, r1
    dc7a:	0d c0       	rjmp	.+26     	; 0xdc96 <_handle_select_helper+0x5e>
    dc7c:	ca 01       	movw	r24, r20
    dc7e:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    dc82:	81 11       	cpse	r24, r1
    dc84:	08 c0       	rjmp	.+16     	; 0xdc96 <_handle_select_helper+0x5e>
	{
		ps->handle_id--;
    dc86:	d2 01       	movw	r26, r4
    dc88:	8c 91       	ld	r24, X
    dc8a:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    dc8c:	87 ff       	sbrs	r24, 7
    dc8e:	1c c0       	rjmp	.+56     	; 0xdcc8 <_handle_select_helper+0x90>
    dc90:	f2 01       	movw	r30, r4
    dc92:	10 82       	st	Z, r1
    dc94:	bc c0       	rjmp	.+376    	; 0xde0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
    dc96:	56 01       	movw	r10, r12
    dc98:	f0 e2       	ldi	r31, 0x20	; 32
    dc9a:	af 22       	and	r10, r31
    dc9c:	bb 24       	eor	r11, r11
    dc9e:	c5 fe       	sbrs	r12, 5
    dca0:	15 c0       	rjmp	.+42     	; 0xdccc <_handle_select_helper+0x94>
    dca2:	d2 01       	movw	r26, r4
    dca4:	15 96       	adiw	r26, 0x05	; 5
    dca6:	8c 91       	ld	r24, X
    dca8:	81 11       	cpse	r24, r1
    dcaa:	10 c0       	rjmp	.+32     	; 0xdccc <_handle_select_helper+0x94>
    dcac:	c8 01       	movw	r24, r16
    dcae:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    dcb2:	81 11       	cpse	r24, r1
    dcb4:	0b c0       	rjmp	.+22     	; 0xdccc <_handle_select_helper+0x94>
	{
		ps->handle_id++;
    dcb6:	f2 01       	movw	r30, r4
    dcb8:	80 81       	ld	r24, Z
    dcba:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    dcbc:	89 30       	cpi	r24, 0x09	; 9
    dcbe:	14 f4       	brge	.+4      	; 0xdcc4 <_handle_select_helper+0x8c>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING) && !is_net_player(player))
	{
		ps->handle_id++;
    dcc0:	80 83       	st	Z, r24
    dcc2:	a5 c0       	rjmp	.+330    	; 0xde0e <_handle_select_helper+0x1d6>
		if (ps->handle_id > 8) ps->handle_id = 8;
    dcc4:	88 e0       	ldi	r24, 0x08	; 8
    dcc6:	d2 01       	movw	r26, r4
    dcc8:	8c 93       	st	X, r24
    dcca:	a1 c0       	rjmp	.+322    	; 0xde0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING) && !is_net_player(player))
    dccc:	c7 01       	movw	r24, r14
    dcce:	0e 94 fa 59 	call	0xb3f4	; 0xb3f4 <select_pressed>
    dcd2:	78 2e       	mov	r7, r24
    dcd4:	88 23       	and	r24, r24
    dcd6:	f1 f1       	breq	.+124    	; 0xdd54 <_handle_select_helper+0x11c>
    dcd8:	f2 01       	movw	r30, r4
    dcda:	85 81       	ldd	r24, Z+5	; 0x05
    dcdc:	81 11       	cpse	r24, r1
    dcde:	3a c0       	rjmp	.+116    	; 0xdd54 <_handle_select_helper+0x11c>
    dce0:	c8 01       	movw	r24, r16
    dce2:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    dce6:	81 11       	cpse	r24, r1
    dce8:	35 c0       	rjmp	.+106    	; 0xdd54 <_handle_select_helper+0x11c>
	{
		ps->select_state = EDITING;
    dcea:	81 e0       	ldi	r24, 0x01	; 1
    dcec:	d2 01       	movw	r26, r4
    dcee:	15 96       	adiw	r26, 0x05	; 5
    dcf0:	8c 93       	st	X, r24
    dcf2:	15 97       	sbiw	r26, 0x05	; 5
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
    dcf4:	ec 91       	ld	r30, X
    dcf6:	b3 e0       	ldi	r27, 0x03	; 3
    dcf8:	eb 02       	muls	r30, r27
    dcfa:	f0 01       	movw	r30, r0
    dcfc:	11 24       	eor	r1, r1
    dcfe:	e8 56       	subi	r30, 0x68	; 104
    dd00:	f4 4f       	sbci	r31, 0xF4	; 244
    dd02:	80 81       	ld	r24, Z
    dd04:	91 81       	ldd	r25, Z+1	; 0x01
    dd06:	a2 81       	ldd	r26, Z+2	; 0x02
    dd08:	f2 01       	movw	r30, r4
    dd0a:	81 83       	std	Z+1, r24	; 0x01
    dd0c:	92 83       	std	Z+2, r25	; 0x02
    dd0e:	a3 83       	std	Z+3, r26	; 0x03
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    dd10:	24 e0       	ldi	r18, 0x04	; 4
    dd12:	40 91 cf 0f 	lds	r20, 0x0FCF
    dd16:	60 91 59 0c 	lds	r22, 0x0C59
    dd1a:	80 91 c9 0b 	lds	r24, 0x0BC9
    dd1e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		p->pressed = 0;
    dd22:	d7 01       	movw	r26, r14
    dd24:	1d 92       	st	X+, r1
    dd26:	1c 92       	st	X, r1
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dd28:	21 e0       	ldi	r18, 0x01	; 1
    dd2a:	49 e0       	ldi	r20, 0x09	; 9
    dd2c:	b7 01       	movw	r22, r14
    dd2e:	c8 01       	movw	r24, r16
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    dd30:	0f 90       	pop	r0
    dd32:	df 91       	pop	r29
    dd34:	cf 91       	pop	r28
    dd36:	1f 91       	pop	r17
    dd38:	0f 91       	pop	r16
    dd3a:	ff 90       	pop	r15
    dd3c:	ef 90       	pop	r14
    dd3e:	df 90       	pop	r13
    dd40:	cf 90       	pop	r12
    dd42:	bf 90       	pop	r11
    dd44:	af 90       	pop	r10
    dd46:	9f 90       	pop	r9
    dd48:	8f 90       	pop	r8
    dd4a:	7f 90       	pop	r7
    dd4c:	5f 90       	pop	r5
    dd4e:	4f 90       	pop	r4
	{
		ps->select_state = EDITING;
		memcpy(ps->handle, &handles.data[ps->handle_id*3], 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dd50:	0c 94 f5 64 	jmp	0xc9ea	; 0xc9ea <send_smart_net_message>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
    dd54:	c7 fe       	sbrs	r12, 7
    dd56:	17 c0       	rjmp	.+46     	; 0xdd86 <_handle_select_helper+0x14e>
    dd58:	f2 01       	movw	r30, r4
    dd5a:	85 81       	ldd	r24, Z+5	; 0x05
    dd5c:	81 30       	cpi	r24, 0x01	; 1
    dd5e:	99 f4       	brne	.+38     	; 0xdd86 <_handle_select_helper+0x14e>
    dd60:	c8 01       	movw	r24, r16
    dd62:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    dd66:	81 11       	cpse	r24, r1
    dd68:	0e c0       	rjmp	.+28     	; 0xdd86 <_handle_select_helper+0x14e>
	{
		ps->char_index++;
    dd6a:	d2 01       	movw	r26, r4
    dd6c:	14 96       	adiw	r26, 0x04	; 4
    dd6e:	8c 91       	ld	r24, X
    dd70:	14 97       	sbiw	r26, 0x04	; 4
    dd72:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    dd74:	83 30       	cpi	r24, 0x03	; 3
    dd76:	1c f4       	brge	.+6      	; 0xdd7e <_handle_select_helper+0x146>
		p->pressed = 0;
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING) && !is_net_player(player))
	{
		ps->char_index++;
    dd78:	14 96       	adiw	r26, 0x04	; 4
    dd7a:	8c 93       	st	X, r24
    dd7c:	48 c0       	rjmp	.+144    	; 0xde0e <_handle_select_helper+0x1d6>
		if (ps->char_index > 2) ps->char_index = 2;
    dd7e:	82 e0       	ldi	r24, 0x02	; 2
    dd80:	f2 01       	movw	r30, r4
    dd82:	84 83       	std	Z+4, r24	; 0x04
    dd84:	44 c0       	rjmp	.+136    	; 0xde0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING) && !is_net_player(player))
    dd86:	c6 fe       	sbrs	r12, 6
    dd88:	12 c0       	rjmp	.+36     	; 0xddae <_handle_select_helper+0x176>
    dd8a:	d2 01       	movw	r26, r4
    dd8c:	15 96       	adiw	r26, 0x05	; 5
    dd8e:	2c 91       	ld	r18, X
    dd90:	21 30       	cpi	r18, 0x01	; 1
    dd92:	09 f0       	breq	.+2      	; 0xdd96 <_handle_select_helper+0x15e>
    dd94:	89 c0       	rjmp	.+274    	; 0xdea8 <_handle_select_helper+0x270>
    dd96:	c8 01       	movw	r24, r16
    dd98:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    dd9c:	81 11       	cpse	r24, r1
    dd9e:	42 c0       	rjmp	.+132    	; 0xde24 <_handle_select_helper+0x1ec>
	{
		ps->char_index--;
    dda0:	f2 01       	movw	r30, r4
    dda2:	84 81       	ldd	r24, Z+4	; 0x04
    dda4:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    dda6:	87 ff       	sbrs	r24, 7
    dda8:	ec cf       	rjmp	.-40     	; 0xdd82 <_handle_select_helper+0x14a>
    ddaa:	14 82       	std	Z+4, r1	; 0x04
    ddac:	30 c0       	rjmp	.+96     	; 0xde0e <_handle_select_helper+0x1d6>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    ddae:	89 28       	or	r8, r9
    ddb0:	b1 f0       	breq	.+44     	; 0xddde <_handle_select_helper+0x1a6>
    ddb2:	f2 01       	movw	r30, r4
    ddb4:	25 81       	ldd	r18, Z+5	; 0x05
    ddb6:	21 30       	cpi	r18, 0x01	; 1
    ddb8:	09 f0       	breq	.+2      	; 0xddbc <_handle_select_helper+0x184>
    ddba:	79 c0       	rjmp	.+242    	; 0xdeae <_handle_select_helper+0x276>
    ddbc:	c8 01       	movw	r24, r16
    ddbe:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    ddc2:	81 11       	cpse	r24, r1
    ddc4:	31 c0       	rjmp	.+98     	; 0xde28 <_handle_select_helper+0x1f0>
	{
		ps->handle[(u8) ps->char_index]--;
    ddc6:	d2 01       	movw	r26, r4
    ddc8:	14 96       	adiw	r26, 0x04	; 4
    ddca:	8c 91       	ld	r24, X
    ddcc:	f2 01       	movw	r30, r4
    ddce:	e8 0f       	add	r30, r24
    ddd0:	f1 1d       	adc	r31, r1
    ddd2:	81 81       	ldd	r24, Z+1	; 0x01
    ddd4:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
    ddd6:	81 34       	cpi	r24, 0x41	; 65
    ddd8:	c8 f4       	brcc	.+50     	; 0xde0c <_handle_select_helper+0x1d4>
    ddda:	8a e5       	ldi	r24, 0x5A	; 90
    dddc:	17 c0       	rjmp	.+46     	; 0xde0c <_handle_select_helper+0x1d4>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    ddde:	ab 28       	or	r10, r11
    dde0:	29 f1       	breq	.+74     	; 0xde2c <_handle_select_helper+0x1f4>
    dde2:	f2 01       	movw	r30, r4
    dde4:	25 81       	ldd	r18, Z+5	; 0x05
    dde6:	21 30       	cpi	r18, 0x01	; 1
    dde8:	09 f0       	breq	.+2      	; 0xddec <_handle_select_helper+0x1b4>
    ddea:	61 c0       	rjmp	.+194    	; 0xdeae <_handle_select_helper+0x276>
    ddec:	c8 01       	movw	r24, r16
    ddee:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    ddf2:	81 11       	cpse	r24, r1
    ddf4:	ff c0       	rjmp	.+510    	; 0xdff4 <_handle_select_helper+0x3bc>
	{
		ps->handle[(u8) ps->char_index]++;
    ddf6:	d2 01       	movw	r26, r4
    ddf8:	14 96       	adiw	r26, 0x04	; 4
    ddfa:	8c 91       	ld	r24, X
    ddfc:	f2 01       	movw	r30, r4
    ddfe:	e8 0f       	add	r30, r24
    de00:	f1 1d       	adc	r31, r1
    de02:	81 81       	ldd	r24, Z+1	; 0x01
    de04:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
    de06:	8b 35       	cpi	r24, 0x5B	; 91
    de08:	08 f0       	brcs	.+2      	; 0xde0c <_handle_select_helper+0x1d4>
    de0a:	81 e4       	ldi	r24, 0x41	; 65
    de0c:	81 83       	std	Z+1, r24	; 0x01
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    de0e:	24 e0       	ldi	r18, 0x04	; 4
    de10:	40 91 cf 0f 	lds	r20, 0x0FCF
    de14:	60 91 59 0c 	lds	r22, 0x0C59
    de18:	80 91 c9 0b 	lds	r24, 0x0BC9
    de1c:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
    de20:	20 e0       	ldi	r18, 0x00	; 0
    de22:	83 cf       	rjmp	.-250    	; 0xdd2a <_handle_select_helper+0xf2>
		ps->char_index--;
		if (ps->char_index < 0) ps->char_index = 0;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING) && !is_net_player(player))
    de24:	89 28       	or	r8, r9
    de26:	51 f6       	brne	.-108    	; 0xddbc <_handle_select_helper+0x184>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    de28:	ab 28       	or	r10, r11
    de2a:	01 f7       	brne	.-64     	; 0xddec <_handle_select_helper+0x1b4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    de2c:	77 20       	and	r7, r7
    de2e:	09 f4       	brne	.+2      	; 0xde32 <_handle_select_helper+0x1fa>
    de30:	79 c0       	rjmp	.+242    	; 0xdf24 <_handle_select_helper+0x2ec>
    de32:	f2 01       	movw	r30, r4
    de34:	25 81       	ldd	r18, Z+5	; 0x05
    de36:	21 30       	cpi	r18, 0x01	; 1
    de38:	e1 f5       	brne	.+120    	; 0xdeb2 <_handle_select_helper+0x27a>
    de3a:	c8 01       	movw	r24, r16
    de3c:	29 83       	std	Y+1, r18	; 0x01
    de3e:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    de42:	29 81       	ldd	r18, Y+1	; 0x01
    de44:	81 11       	cpse	r24, r1
    de46:	6c c0       	rjmp	.+216    	; 0xdf20 <_handle_select_helper+0x2e8>
	{
		ps->select_state = CONFIRMED;
    de48:	82 e0       	ldi	r24, 0x02	; 2
    de4a:	d2 01       	movw	r26, r4
    de4c:	15 96       	adiw	r26, 0x05	; 5
    de4e:	8c 93       	st	X, r24
    de50:	15 97       	sbiw	r26, 0x05	; 5
		player->handle_id = ps->handle_id;
    de52:	8c 91       	ld	r24, X
    de54:	f8 01       	movw	r30, r16
    de56:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    de58:	11 96       	adiw	r26, 0x01	; 1
    de5a:	8d 91       	ld	r24, X+
    de5c:	9d 91       	ld	r25, X+
    de5e:	ac 91       	ld	r26, X
    de60:	81 83       	std	Z+1, r24	; 0x01
    de62:	92 83       	std	Z+2, r25	; 0x02
    de64:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    de66:	d2 01       	movw	r26, r4
    de68:	ec 91       	ld	r30, X
    de6a:	b3 e0       	ldi	r27, 0x03	; 3
    de6c:	eb 02       	muls	r30, r27
    de6e:	f0 01       	movw	r30, r0
    de70:	11 24       	eor	r1, r1
    de72:	9f 01       	movw	r18, r30
    de74:	28 56       	subi	r18, 0x68	; 104
    de76:	34 4f       	sbci	r19, 0xF4	; 244
    de78:	f2 01       	movw	r30, r4
    de7a:	81 81       	ldd	r24, Z+1	; 0x01
    de7c:	92 81       	ldd	r25, Z+2	; 0x02
    de7e:	a3 81       	ldd	r26, Z+3	; 0x03
    de80:	f9 01       	movw	r30, r18
    de82:	80 83       	st	Z, r24
    de84:	91 83       	std	Z+1, r25	; 0x01
    de86:	a2 83       	std	Z+2, r26	; 0x02
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    de88:	24 e0       	ldi	r18, 0x04	; 4
    de8a:	40 91 cf 0f 	lds	r20, 0x0FCF
    de8e:	60 91 59 0c 	lds	r22, 0x0C59
    de92:	80 91 c9 0b 	lds	r24, 0x0BC9
    de96:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    de9a:	21 e0       	ldi	r18, 0x01	; 1
    de9c:	49 e0       	ldi	r20, 0x09	; 9
    de9e:	b7 01       	movw	r22, r14
    dea0:	c8 01       	movw	r24, r16
    dea2:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
    dea6:	28 c0       	rjmp	.+80     	; 0xdef8 <_handle_select_helper+0x2c0>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'Z';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING) && !is_net_player(player))
    dea8:	ab 28       	or	r10, r11
    deaa:	09 f4       	brne	.+2      	; 0xdeae <_handle_select_helper+0x276>
    deac:	bf cf       	rjmp	.-130    	; 0xde2c <_handle_select_helper+0x1f4>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    deae:	77 20       	and	r7, r7
    deb0:	c9 f1       	breq	.+114    	; 0xdf24 <_handle_select_helper+0x2ec>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		save_eeprom(&handles);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    deb2:	22 30       	cpi	r18, 0x02	; 2
    deb4:	b9 f5       	brne	.+110    	; 0xdf24 <_handle_select_helper+0x2ec>
    deb6:	c8 01       	movw	r24, r16
    deb8:	0e 94 08 65 	call	0xca10	; 0xca10 <is_net_player>
    debc:	88 23       	and	r24, r24
    debe:	91 f1       	breq	.+100    	; 0xdf24 <_handle_select_helper+0x2ec>
	{
		player->handle_id = ps->handle_id;
    dec0:	d2 01       	movw	r26, r4
    dec2:	8c 91       	ld	r24, X
    dec4:	f8 01       	movw	r30, r16
    dec6:	80 83       	st	Z, r24
		memcpy(player->handle, ps->handle, 3);
    dec8:	11 96       	adiw	r26, 0x01	; 1
    deca:	8d 91       	ld	r24, X+
    decc:	9d 91       	ld	r25, X+
    dece:	ac 91       	ld	r26, X
    ded0:	81 83       	std	Z+1, r24	; 0x01
    ded2:	92 83       	std	Z+2, r25	; 0x02
    ded4:	a3 83       	std	Z+3, r26	; 0x03
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
    ded6:	d2 01       	movw	r26, r4
    ded8:	ec 91       	ld	r30, X
    deda:	b3 e0       	ldi	r27, 0x03	; 3
    dedc:	eb 02       	muls	r30, r27
    dede:	f0 01       	movw	r30, r0
    dee0:	11 24       	eor	r1, r1
    dee2:	9f 01       	movw	r18, r30
    dee4:	28 56       	subi	r18, 0x68	; 104
    dee6:	34 4f       	sbci	r19, 0xF4	; 244
    dee8:	f2 01       	movw	r30, r4
    deea:	81 81       	ldd	r24, Z+1	; 0x01
    deec:	92 81       	ldd	r25, Z+2	; 0x02
    deee:	a3 81       	ldd	r26, Z+3	; 0x03
    def0:	f9 01       	movw	r30, r18
    def2:	80 83       	st	Z, r24
    def4:	91 83       	std	Z+1, r25	; 0x01
    def6:	a2 83       	std	Z+2, r26	; 0x02
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    def8:	86 e9       	ldi	r24, 0x96	; 150
    defa:	9b e0       	ldi	r25, 0x0B	; 11
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    defc:	0f 90       	pop	r0
    defe:	df 91       	pop	r29
    df00:	cf 91       	pop	r28
    df02:	1f 91       	pop	r17
    df04:	0f 91       	pop	r16
    df06:	ff 90       	pop	r15
    df08:	ef 90       	pop	r14
    df0a:	df 90       	pop	r13
    df0c:	cf 90       	pop	r12
    df0e:	bf 90       	pop	r11
    df10:	af 90       	pop	r10
    df12:	9f 90       	pop	r9
    df14:	8f 90       	pop	r8
    df16:	7f 90       	pop	r7
    df18:	5f 90       	pop	r5
    df1a:	4f 90       	pop	r4
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    df1c:	0c 94 f8 3b 	jmp	0x77f0	; 0x77f0 <EepromWriteBlock>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		save_eeprom(&handles);
	}
	else if (select_pressed(p) && (ps->select_state == CONFIRMED) && is_net_player(player))
    df20:	22 30       	cpi	r18, 0x02	; 2
    df22:	71 f2       	breq	.-100    	; 0xdec0 <_handle_select_helper+0x288>
		memcpy(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    df24:	d1 fe       	sbrs	r13, 1
    df26:	6c c0       	rjmp	.+216    	; 0xe000 <_handle_select_helper+0x3c8>
    df28:	d2 01       	movw	r26, r4
    df2a:	15 96       	adiw	r26, 0x05	; 5
    df2c:	8c 91       	ld	r24, X
    df2e:	81 30       	cpi	r24, 0x01	; 1
    df30:	91 f4       	brne	.+36     	; 0xdf56 <_handle_select_helper+0x31e>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    df32:	21 e0       	ldi	r18, 0x01	; 1
    df34:	49 e0       	ldi	r20, 0x09	; 9
    df36:	b7 01       	movw	r22, r14
    df38:	c8 01       	movw	r24, r16
    df3a:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    df3e:	24 e0       	ldi	r18, 0x04	; 4
    df40:	40 91 cf 0f 	lds	r20, 0x0FCF
    df44:	60 91 59 0c 	lds	r22, 0x0C59
    df48:	80 91 c9 0b 	lds	r24, 0x0BC9
    df4c:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		ps->select_state = SELECTING;
    df50:	f2 01       	movw	r30, r4
    df52:	15 82       	std	Z+5, r1	; 0x05
    df54:	55 c0       	rjmp	.+170    	; 0xe000 <_handle_select_helper+0x3c8>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    df56:	82 30       	cpi	r24, 0x02	; 2
    df58:	19 f5       	brne	.+70     	; 0xdfa0 <_handle_select_helper+0x368>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    df5a:	21 e0       	ldi	r18, 0x01	; 1
    df5c:	49 e0       	ldi	r20, 0x09	; 9
    df5e:	b7 01       	movw	r22, r14
    df60:	c8 01       	movw	r24, r16
    df62:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
		ps->select_state = EDITING;
    df66:	81 e0       	ldi	r24, 0x01	; 1
    df68:	d2 01       	movw	r26, r4
    df6a:	15 96       	adiw	r26, 0x05	; 5
    df6c:	8c 93       	st	X, r24
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    df6e:	24 e0       	ldi	r18, 0x04	; 4
    df70:	40 91 cf 0f 	lds	r20, 0x0FCF
    df74:	60 91 59 0c 	lds	r22, 0x0C59
    df78:	80 91 c9 0b 	lds	r24, 0x0BC9
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    df7c:	0f 90       	pop	r0
    df7e:	df 91       	pop	r29
    df80:	cf 91       	pop	r28
    df82:	1f 91       	pop	r17
    df84:	0f 91       	pop	r16
    df86:	ff 90       	pop	r15
    df88:	ef 90       	pop	r14
    df8a:	df 90       	pop	r13
    df8c:	cf 90       	pop	r12
    df8e:	bf 90       	pop	r11
    df90:	af 90       	pop	r10
    df92:	9f 90       	pop	r9
    df94:	8f 90       	pop	r8
    df96:	7f 90       	pop	r7
    df98:	5f 90       	pop	r5
    df9a:	4f 90       	pop	r4
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		ps->select_state = EDITING;
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    df9c:	0c 94 da 4c 	jmp	0x99b4	; 0x99b4 <LBPlaySound>
	}
	else if (p->pressed & BTN_X && (ps->select_state == SELECTING))
    dfa0:	81 11       	cpse	r24, r1
    dfa2:	2e c0       	rjmp	.+92     	; 0xe000 <_handle_select_helper+0x3c8>
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
    dfa4:	21 e0       	ldi	r18, 0x01	; 1
    dfa6:	49 e0       	ldi	r20, 0x09	; 9
    dfa8:	b7 01       	movw	r22, r14
    dfaa:	c8 01       	movw	r24, r16
    dfac:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
    dfb0:	24 e0       	ldi	r18, 0x04	; 4
    dfb2:	40 91 cf 0f 	lds	r20, 0x0FCF
    dfb6:	60 91 59 0c 	lds	r22, 0x0C59
    dfba:	80 91 c9 0b 	lds	r24, 0x0BC9
    dfbe:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <LBPlaySound>
		LBWaitSeconds(2, sizeof(player->netMessage));
    dfc2:	6c e1       	ldi	r22, 0x1C	; 28
    dfc4:	82 e0       	ldi	r24, 0x02	; 2
    dfc6:	90 e0       	ldi	r25, 0x00	; 0
    dfc8:	0e 94 b1 4c 	call	0x9962	; 0x9962 <LBWaitSeconds>
		fade_through();
    dfcc:	0e 94 91 4f 	call	0x9f22	; 0x9f22 <fade_through>
		load_splash();
	}
#endif
}
    dfd0:	0f 90       	pop	r0
    dfd2:	df 91       	pop	r29
    dfd4:	cf 91       	pop	r28
    dfd6:	1f 91       	pop	r17
    dfd8:	0f 91       	pop	r16
    dfda:	ff 90       	pop	r15
    dfdc:	ef 90       	pop	r14
    dfde:	df 90       	pop	r13
    dfe0:	cf 90       	pop	r12
    dfe2:	bf 90       	pop	r11
    dfe4:	af 90       	pop	r10
    dfe6:	9f 90       	pop	r9
    dfe8:	8f 90       	pop	r8
    dfea:	7f 90       	pop	r7
    dfec:	5f 90       	pop	r5
    dfee:	4f 90       	pop	r4
	{
		send_smart_net_message(player, p, NETHANDLESELECT, 1);
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
    dff0:	0c 94 b6 59 	jmp	0xb36c	; 0xb36c <load_splash>
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'A';
		LBPlaySound(game.selection, player1.netMessage.flags, player2.netMessage.flags, PATCH_NAVIGATE);
		send_smart_net_message(player, p, NETHANDLESELECT, 0);
	}
	else if (select_pressed(p) && (ps->select_state == EDITING) && !is_net_player(player))
    dff4:	77 20       	and	r7, r7
    dff6:	09 f4       	brne	.+2      	; 0xdffa <_handle_select_helper+0x3c2>
    dff8:	95 cf       	rjmp	.-214    	; 0xdf24 <_handle_select_helper+0x2ec>
    dffa:	f2 01       	movw	r30, r4
    dffc:	25 81       	ldd	r18, Z+5	; 0x05
    dffe:	1d cf       	rjmp	.-454    	; 0xde3a <_handle_select_helper+0x202>
		LBWaitSeconds(2, sizeof(player->netMessage));
		fade_through();
		load_splash();
	}
#endif
}
    e000:	0f 90       	pop	r0
    e002:	df 91       	pop	r29
    e004:	cf 91       	pop	r28
    e006:	1f 91       	pop	r17
    e008:	0f 91       	pop	r16
    e00a:	ff 90       	pop	r15
    e00c:	ef 90       	pop	r14
    e00e:	df 90       	pop	r13
    e010:	cf 90       	pop	r12
    e012:	bf 90       	pop	r11
    e014:	af 90       	pop	r10
    e016:	9f 90       	pop	r9
    e018:	8f 90       	pop	r8
    e01a:	7f 90       	pop	r7
    e01c:	5f 90       	pop	r5
    e01e:	4f 90       	pop	r4
    e020:	08 95       	ret

0000e022 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    e022:	0f 93       	push	r16
    e024:	1f 93       	push	r17
    e026:	cf 93       	push	r28
    e028:	df 93       	push	r29
    e02a:	ec 01       	movw	r28, r24
    e02c:	8b 01       	movw	r16, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&player1.netMessage.ps, p1, 2, 6);
    e02e:	26 e0       	ldi	r18, 0x06	; 6
    e030:	42 e0       	ldi	r20, 0x02	; 2
    e032:	bc 01       	movw	r22, r24
    e034:	89 e6       	ldi	r24, 0x69	; 105
    e036:	9c e0       	ldi	r25, 0x0C	; 12
    e038:	0e 94 09 5b 	call	0xb612	; 0xb612 <_handle_select_render_helper>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    e03c:	80 91 c9 0b 	lds	r24, 0x0BC9
    e040:	88 23       	and	r24, r24
    e042:	49 f0       	breq	.+18     	; 0xe056 <update_handle_select+0x34>
    e044:	86 30       	cpi	r24, 0x06	; 6
    e046:	39 f0       	breq	.+14     	; 0xe056 <update_handle_select+0x34>
	{
		_handle_select_render_helper(&player2.netMessage.ps, p2, 19, 8);
    e048:	28 e0       	ldi	r18, 0x08	; 8
    e04a:	43 e1       	ldi	r20, 0x13	; 19
    e04c:	b8 01       	movw	r22, r16
    e04e:	8f ed       	ldi	r24, 0xDF	; 223
    e050:	9f e0       	ldi	r25, 0x0F	; 15
    e052:	0e 94 09 5b 	call	0xb612	; 0xb612 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&player1.netMessage.ps, p1, &player1);
    e056:	48 ee       	ldi	r20, 0xE8	; 232
    e058:	5b e0       	ldi	r21, 0x0B	; 11
    e05a:	be 01       	movw	r22, r28
    e05c:	89 e6       	ldi	r24, 0x69	; 105
    e05e:	9c e0       	ldi	r25, 0x0C	; 12
    e060:	0e 94 1c 6e 	call	0xdc38	; 0xdc38 <_handle_select_helper>
	if (player1.netMessage.ps.select_state == CONFIRMED) start_game = 1;
    e064:	c1 e0       	ldi	r28, 0x01	; 1
    e066:	80 91 6e 0c 	lds	r24, 0x0C6E
    e06a:	82 30       	cpi	r24, 0x02	; 2
    e06c:	09 f0       	breq	.+2      	; 0xe070 <update_handle_select+0x4e>
    e06e:	c0 e0       	ldi	r28, 0x00	; 0
	if (game.selection != PVCPU && game.selection != CPUVCPU)
    e070:	80 91 c9 0b 	lds	r24, 0x0BC9
    e074:	88 23       	and	r24, r24
    e076:	49 f1       	breq	.+82     	; 0xe0ca <update_handle_select+0xa8>
    e078:	86 30       	cpi	r24, 0x06	; 6
    e07a:	51 f1       	breq	.+84     	; 0xe0d0 <update_handle_select+0xae>
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
    e07c:	4e e5       	ldi	r20, 0x5E	; 94
    e07e:	5f e0       	ldi	r21, 0x0F	; 15
    e080:	b8 01       	movw	r22, r16
    e082:	8f ed       	ldi	r24, 0xDF	; 223
    e084:	9f e0       	ldi	r25, 0x0F	; 15
    e086:	0e 94 1c 6e 	call	0xdc38	; 0xdc38 <_handle_select_helper>
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
    e08a:	80 91 e4 0f 	lds	r24, 0x0FE4
    e08e:	82 30       	cpi	r24, 0x02	; 2
    e090:	09 f5       	brne	.+66     	; 0xe0d4 <update_handle_select+0xb2>
	}
	if (start_game)
    e092:	cc 23       	and	r28, r28
    e094:	f9 f0       	breq	.+62     	; 0xe0d4 <update_handle_select+0xb2>
	{
		if (game.selection == PVCPU)
    e096:	80 91 c9 0b 	lds	r24, 0x0BC9
    e09a:	81 11       	cpse	r24, r1
    e09c:	0f c0       	rjmp	.+30     	; 0xe0bc <update_handle_select+0x9a>
		{
			player2.handle_id = 9;
    e09e:	89 e0       	ldi	r24, 0x09	; 9
    e0a0:	80 93 5e 0f 	sts	0x0F5E, r24
			memcpy(player2.handle, &handles.data[9*3], 3);
    e0a4:	80 91 b3 0b 	lds	r24, 0x0BB3
    e0a8:	90 91 b4 0b 	lds	r25, 0x0BB4
    e0ac:	a0 91 b5 0b 	lds	r26, 0x0BB5
    e0b0:	80 93 5f 0f 	sts	0x0F5F, r24
    e0b4:	90 93 60 0f 	sts	0x0F60, r25
    e0b8:	a0 93 61 0f 	sts	0x0F61, r26
		}
		level_transition(0);
    e0bc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    e0be:	df 91       	pop	r29
    e0c0:	cf 91       	pop	r28
    e0c2:	1f 91       	pop	r17
    e0c4:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    e0c6:	0c 94 c3 58 	jmp	0xb186	; 0xb186 <level_transition>
	if (game.selection != PVCPU && game.selection != CPUVCPU)
	{
		_handle_select_helper(&player2.netMessage.ps, p2, &player2);
		if (player2.netMessage.ps.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    e0ca:	c1 11       	cpse	r28, r1
    e0cc:	e8 cf       	rjmp	.-48     	; 0xe09e <update_handle_select+0x7c>
    e0ce:	02 c0       	rjmp	.+4      	; 0xe0d4 <update_handle_select+0xb2>
    e0d0:	c1 11       	cpse	r28, r1
    e0d2:	f4 cf       	rjmp	.-24     	; 0xe0bc <update_handle_select+0x9a>
			player2.handle_id = 9;
			memcpy(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
	}
}
    e0d4:	df 91       	pop	r29
    e0d6:	cf 91       	pop	r28
    e0d8:	1f 91       	pop	r17
    e0da:	0f 91       	pop	r16
    e0dc:	08 95       	ret

0000e0de <player_posture_changed>:
	player->old_held = player->netMessage.joyPadState.held;
}

u8 player_posture_changed(Player* player)
{
	if ((player->old_held & BTN_UP) != (player->netMessage.joyPadState.held & BTN_UP)) return 1;
    e0de:	fc 01       	movw	r30, r24
    e0e0:	e2 58       	subi	r30, 0x82	; 130
    e0e2:	ff 4f       	sbci	r31, 0xFF	; 255
    e0e4:	20 81       	ld	r18, Z
    e0e6:	31 81       	ldd	r19, Z+1	; 0x01
    e0e8:	fc 01       	movw	r30, r24
    e0ea:	83 8d       	ldd	r24, Z+27	; 0x1b
    e0ec:	94 8d       	ldd	r25, Z+28	; 0x1c
    e0ee:	28 27       	eor	r18, r24
    e0f0:	39 27       	eor	r19, r25
    e0f2:	20 7f       	andi	r18, 0xF0	; 240
    e0f4:	33 27       	eor	r19, r19
	if ((player->old_held & BTN_DOWN) != (player->netMessage.joyPadState.held & BTN_DOWN)) return 1;
	if ((player->old_held & BTN_LEFT) != (player->netMessage.joyPadState.held & BTN_LEFT)) return 1;
	if ((player->old_held & BTN_RIGHT) != (player->netMessage.joyPadState.held & BTN_RIGHT)) return 1;
    e0f6:	81 e0       	ldi	r24, 0x01	; 1
    e0f8:	23 2b       	or	r18, r19
    e0fa:	09 f4       	brne	.+2      	; 0xe0fe <player_posture_changed+0x20>
    e0fc:	80 e0       	ldi	r24, 0x00	; 0
	return 0;
}
    e0fe:	08 95       	ret

0000e100 <main>:

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    e100:	0e 94 f5 3a 	call	0x75ea	; 0x75ea <GetTrueRandomSeed>
    e104:	0e 94 b0 3c 	call	0x7960	; 0x7960 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    e108:	83 e4       	ldi	r24, 0x43	; 67
    e10a:	95 e0       	ldi	r25, 0x05	; 5
    e10c:	0e 94 8a 3d 	call	0x7b14	; 0x7b14 <InitMusicPlayer>
	SetMasterVolume(0xff);
    e110:	8f ef       	ldi	r24, 0xFF	; 255
    e112:	0e 94 d8 40 	call	0x81b0	; 0x81b0 <SetMasterVolume>
	SetTileTable(tiles_data);
    e116:	89 ec       	ldi	r24, 0xC9	; 201
    e118:	91 e3       	ldi	r25, 0x31	; 49
    e11a:	0e 94 95 3a 	call	0x752a	; 0x752a <SetTileTable>
	SetSpritesTileTable(sprites_data);
    e11e:	88 e3       	ldi	r24, 0x38	; 56
    e120:	98 e2       	ldi	r25, 0x28	; 40
    e122:	0e 94 71 3a 	call	0x74e2	; 0x74e2 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    e126:	8b e9       	ldi	r24, 0x9B	; 155
    e128:	0e 94 92 3a 	call	0x7524	; 0x7524 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    e12c:	60 e0       	ldi	r22, 0x00	; 0
    e12e:	83 e0       	ldi	r24, 0x03	; 3
    e130:	0e 94 c9 49 	call	0x9392	; 0x9392 <FadeIn>
	ClearVram();
    e134:	0e 94 76 3a 	call	0x74ec	; 0x74ec <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    e138:	86 e7       	ldi	r24, 0x76	; 118
    e13a:	9b e0       	ldi	r25, 0x0B	; 11
    e13c:	0e 94 d0 4d 	call	0x9ba0	; 0x9ba0 <init_scores>
	init_handles(&handles);
    e140:	86 e9       	ldi	r24, 0x96	; 150
    e142:	9b e0       	ldi	r25, 0x0B	; 11
    e144:	0e 94 dc 4d 	call	0x9bb8	; 0x9bb8 <init_handles>
	init_game_state();
    e148:	0e 94 30 4f 	call	0x9e60	; 0x9e60 <init_game_state>
	load_credits();
    e14c:	0e 94 dd 62 	call	0xc5ba	; 0xc5ba <load_credits>
	load_splash();
    e150:	0e 94 b6 59 	call	0xb36c	; 0xb36c <load_splash>
	
	while (1)
	{
		waitForVSync();
    e154:	0e 94 7b 4f 	call	0x9ef6	; 0x9ef6 <waitForVSync>
		get_net_message(0);
    e158:	80 e0       	ldi	r24, 0x00	; 0
    e15a:	0e 94 ec 62 	call	0xc5d8	; 0xc5d8 <get_net_message>
		switch (game.current_screen)
    e15e:	80 91 b6 0b 	lds	r24, 0x0BB6
    e162:	82 30       	cpi	r24, 0x02	; 2
    e164:	61 f1       	breq	.+88     	; 0xe1be <main+0xbe>
    e166:	78 f4       	brcc	.+30     	; 0xe186 <main+0x86>
    e168:	88 23       	and	r24, r24
    e16a:	e9 f0       	breq	.+58     	; 0xe1a6 <main+0xa6>
    e16c:	81 30       	cpi	r24, 0x01	; 1
    e16e:	09 f0       	breq	.+2      	; 0xe172 <main+0x72>
    e170:	b1 c0       	rjmp	.+354    	; 0xe2d4 <main+0x1d4>
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
				break;
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e172:	60 e0       	ldi	r22, 0x00	; 0
    e174:	82 e6       	ldi	r24, 0x62	; 98
    e176:	9c e0       	ldi	r25, 0x0C	; 12
    e178:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				update_tank_rank(&player1.netMessage.joyPadState);
    e17c:	82 e6       	ldi	r24, 0x62	; 98
    e17e:	9c e0       	ldi	r25, 0x0C	; 12
    e180:	0e 94 a7 5a 	call	0xb54e	; 0xb54e <update_tank_rank>
				break;
    e184:	a7 c0       	rjmp	.+334    	; 0xe2d4 <main+0x1d4>
	
	while (1)
	{
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
    e186:	84 30       	cpi	r24, 0x04	; 4
    e188:	a1 f1       	breq	.+104    	; 0xe1f2 <main+0xf2>
    e18a:	e8 f1       	brcs	.+122    	; 0xe206 <main+0x106>
    e18c:	85 30       	cpi	r24, 0x05	; 5
    e18e:	09 f0       	breq	.+2      	; 0xe192 <main+0x92>
    e190:	a1 c0       	rjmp	.+322    	; 0xe2d4 <main+0x1d4>
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_host_net_game(&player1.netMessage.joyPadState);
				break;
			case JOIN_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e192:	60 e0       	ldi	r22, 0x00	; 0
    e194:	82 e6       	ldi	r24, 0x62	; 98
    e196:	9c e0       	ldi	r25, 0x0C	; 12
    e198:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				update_join_net_game(&player1.netMessage.joyPadState);
    e19c:	82 e6       	ldi	r24, 0x62	; 98
    e19e:	9c e0       	ldi	r25, 0x0C	; 12
    e1a0:	0e 94 3a 5e 	call	0xbc74	; 0xbc74 <update_join_net_game>
				break;
    e1a4:	97 c0       	rjmp	.+302    	; 0xe2d4 <main+0x1d4>
		waitForVSync();
		get_net_message(0);
		switch (game.current_screen)
		{
			case SPLASH:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1a6:	60 e0       	ldi	r22, 0x00	; 0
    e1a8:	82 e6       	ldi	r24, 0x62	; 98
    e1aa:	9c e0       	ldi	r25, 0x0C	; 12
    e1ac:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				update_splash(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e1b0:	68 ed       	ldi	r22, 0xD8	; 216
    e1b2:	7f e0       	ldi	r23, 0x0F	; 15
    e1b4:	82 e6       	ldi	r24, 0x62	; 98
    e1b6:	9c e0       	ldi	r25, 0x0C	; 12
    e1b8:	0e 94 22 5d 	call	0xba44	; 0xba44 <update_splash>
				break;
    e1bc:	8b c0       	rjmp	.+278    	; 0xe2d4 <main+0x1d4>
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e1be:	80 91 c9 0b 	lds	r24, 0x0BC9
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1c2:	60 e0       	ldi	r22, 0x00	; 0
			case TANK_RANK:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_tank_rank(&player1.netMessage.joyPadState);
				break;
			case HANDLE_SELECT:
				if (game.selection == HOSTNETGAME)
    e1c4:	82 30       	cpi	r24, 0x02	; 2
    e1c6:	19 f4       	brne	.+6      	; 0xe1ce <main+0xce>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1c8:	82 e6       	ldi	r24, 0x62	; 98
    e1ca:	9c e0       	ldi	r25, 0x0C	; 12
    e1cc:	09 c0       	rjmp	.+18     	; 0xe1e0 <main+0xe0>
				}
				else if (game.selection == JOINNETGAME)
    e1ce:	83 30       	cpi	r24, 0x03	; 3
    e1d0:	29 f0       	breq	.+10     	; 0xe1dc <main+0xdc>
				{
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1d2:	82 e6       	ldi	r24, 0x62	; 98
    e1d4:	9c e0       	ldi	r25, 0x0C	; 12
    e1d6:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    e1da:	61 e0       	ldi	r22, 0x01	; 1
    e1dc:	88 ed       	ldi	r24, 0xD8	; 216
    e1de:	9f e0       	ldi	r25, 0x0F	; 15
    e1e0:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				}
				update_handle_select(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e1e4:	68 ed       	ldi	r22, 0xD8	; 216
    e1e6:	7f e0       	ldi	r23, 0x0F	; 15
    e1e8:	82 e6       	ldi	r24, 0x62	; 98
    e1ea:	9c e0       	ldi	r25, 0x0C	; 12
    e1ec:	0e 94 11 70 	call	0xe022	; 0xe022 <update_handle_select>
				break;
    e1f0:	71 c0       	rjmp	.+226    	; 0xe2d4 <main+0x1d4>
#if JAMMA
#else
			case HOST_NET_GAME:
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e1f2:	60 e0       	ldi	r22, 0x00	; 0
    e1f4:	82 e6       	ldi	r24, 0x62	; 98
    e1f6:	9c e0       	ldi	r25, 0x0C	; 12
    e1f8:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				update_host_net_game(&player1.netMessage.joyPadState);
    e1fc:	82 e6       	ldi	r24, 0x62	; 98
    e1fe:	9c e0       	ldi	r25, 0x0C	; 12
    e200:	0e 94 a8 5c 	call	0xb950	; 0xb950 <update_host_net_game>
				break;
    e204:	67 c0       	rjmp	.+206    	; 0xe2d4 <main+0x1d4>
				LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
				update_join_net_game(&player1.netMessage.joyPadState);
				break;
#endif
			case LEVEL:
				if (game.selection == PVCPU)
    e206:	80 91 c9 0b 	lds	r24, 0x0BC9
    e20a:	81 11       	cpse	r24, r1
    e20c:	06 c0       	rjmp	.+12     	; 0xe21a <main+0x11a>
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e20e:	60 e0       	ldi	r22, 0x00	; 0
    e210:	82 e6       	ldi	r24, 0x62	; 98
    e212:	9c e0       	ldi	r25, 0x0C	; 12
    e214:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
    e218:	0a c0       	rjmp	.+20     	; 0xe22e <main+0x12e>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == CPUVCPU)
    e21a:	86 30       	cpi	r24, 0x06	; 6
    e21c:	89 f4       	brne	.+34     	; 0xe240 <main+0x140>
				{
					get_cpu_joypad_state(&player1, &player2, &player1.netMessage.joyPadState);
    e21e:	42 e6       	ldi	r20, 0x62	; 98
    e220:	5c e0       	ldi	r21, 0x0C	; 12
    e222:	6e e5       	ldi	r22, 0x5E	; 94
    e224:	7f e0       	ldi	r23, 0x0F	; 15
    e226:	88 ee       	ldi	r24, 0xE8	; 232
    e228:	9b e0       	ldi	r25, 0x0B	; 11
    e22a:	0e 94 67 60 	call	0xc0ce	; 0xc0ce <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
    e22e:	48 ed       	ldi	r20, 0xD8	; 216
    e230:	5f e0       	ldi	r21, 0x0F	; 15
    e232:	68 ee       	ldi	r22, 0xE8	; 232
    e234:	7b e0       	ldi	r23, 0x0B	; 11
    e236:	8e e5       	ldi	r24, 0x5E	; 94
    e238:	9f e0       	ldi	r25, 0x0F	; 15
    e23a:	0e 94 67 60 	call	0xc0ce	; 0xc0ce <get_cpu_joypad_state>
    e23e:	44 c0       	rjmp	.+136    	; 0xe2c8 <main+0x1c8>
				}
				else if (game.selection == HOSTNETGAME)
    e240:	82 30       	cpi	r24, 0x02	; 2
    e242:	d1 f4       	brne	.+52     	; 0xe278 <main+0x178>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e244:	80 91 66 0c 	lds	r24, 0x0C66
    e248:	90 91 67 0c 	lds	r25, 0x0C67
    e24c:	90 93 04 0c 	sts	0x0C04, r25
    e250:	80 93 03 0c 	sts	0x0C03, r24
					get_cpu_joypad_state(&player2, &player1, &player2.netMessage.joyPadState);
				}
				else if (game.selection == HOSTNETGAME)
				{
					record_player_posture(&player1);
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e254:	60 e0       	ldi	r22, 0x00	; 0
    e256:	82 e6       	ldi	r24, 0x62	; 98
    e258:	9c e0       	ldi	r25, 0x0C	; 12
    e25a:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
					if (player_posture_changed(&player1)) send_smart_net_message(&player1, &player1.netMessage.joyPadState, NETPOSCHANGE, 0);
    e25e:	88 ee       	ldi	r24, 0xE8	; 232
    e260:	9b e0       	ldi	r25, 0x0B	; 11
    e262:	0e 94 6f 70 	call	0xe0de	; 0xe0de <player_posture_changed>
    e266:	88 23       	and	r24, r24
    e268:	79 f1       	breq	.+94     	; 0xe2c8 <main+0x1c8>
    e26a:	20 e0       	ldi	r18, 0x00	; 0
    e26c:	46 e0       	ldi	r20, 0x06	; 6
    e26e:	62 e6       	ldi	r22, 0x62	; 98
    e270:	7c e0       	ldi	r23, 0x0C	; 12
    e272:	88 ee       	ldi	r24, 0xE8	; 232
    e274:	9b e0       	ldi	r25, 0x0B	; 11
    e276:	1b c0       	rjmp	.+54     	; 0xe2ae <main+0x1ae>
					
				}
				else if (game.selection == JOINNETGAME)
    e278:	83 30       	cpi	r24, 0x03	; 3
    e27a:	e1 f4       	brne	.+56     	; 0xe2b4 <main+0x1b4>
	return 0;
}

void record_player_posture(Player* player)
{
	player->old_held = player->netMessage.joyPadState.held;
    e27c:	80 91 dc 0f 	lds	r24, 0x0FDC
    e280:	90 91 dd 0f 	lds	r25, 0x0FDD
    e284:	90 93 7a 0f 	sts	0x0F7A, r25
    e288:	80 93 79 0f 	sts	0x0F79, r24
					
				}
				else if (game.selection == JOINNETGAME)
				{
					record_player_posture(&player2);
					LBGetJoyPadState(&player2.netMessage.joyPadState, 0);
    e28c:	60 e0       	ldi	r22, 0x00	; 0
    e28e:	88 ed       	ldi	r24, 0xD8	; 216
    e290:	9f e0       	ldi	r25, 0x0F	; 15
    e292:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
					if (player_posture_changed(&player2)) send_smart_net_message(&player2, &player2.netMessage.joyPadState, NETPOSCHANGE, 0);
    e296:	8e e5       	ldi	r24, 0x5E	; 94
    e298:	9f e0       	ldi	r25, 0x0F	; 15
    e29a:	0e 94 6f 70 	call	0xe0de	; 0xe0de <player_posture_changed>
    e29e:	88 23       	and	r24, r24
    e2a0:	99 f0       	breq	.+38     	; 0xe2c8 <main+0x1c8>
    e2a2:	20 e0       	ldi	r18, 0x00	; 0
    e2a4:	46 e0       	ldi	r20, 0x06	; 6
    e2a6:	68 ed       	ldi	r22, 0xD8	; 216
    e2a8:	7f e0       	ldi	r23, 0x0F	; 15
    e2aa:	8e e5       	ldi	r24, 0x5E	; 94
    e2ac:	9f e0       	ldi	r25, 0x0F	; 15
    e2ae:	0e 94 f5 64 	call	0xc9ea	; 0xc9ea <send_smart_net_message>
    e2b2:	0a c0       	rjmp	.+20     	; 0xe2c8 <main+0x1c8>
				}
				else
				{
					LBGetJoyPadState(&player1.netMessage.joyPadState, 0);
    e2b4:	60 e0       	ldi	r22, 0x00	; 0
    e2b6:	82 e6       	ldi	r24, 0x62	; 98
    e2b8:	9c e0       	ldi	r25, 0x0C	; 12
    e2ba:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
					LBGetJoyPadState(&player2.netMessage.joyPadState, 1);
    e2be:	61 e0       	ldi	r22, 0x01	; 1
    e2c0:	88 ed       	ldi	r24, 0xD8	; 216
    e2c2:	9f e0       	ldi	r25, 0x0F	; 15
    e2c4:	0e 94 f2 4b 	call	0x97e4	; 0x97e4 <LBGetJoyPadState>
				}
				update_level(&player1.netMessage.joyPadState, &player2.netMessage.joyPadState);
    e2c8:	68 ed       	ldi	r22, 0xD8	; 216
    e2ca:	7f e0       	ldi	r23, 0x0F	; 15
    e2cc:	82 e6       	ldi	r24, 0x62	; 98
    e2ce:	9c e0       	ldi	r25, 0x0C	; 12
    e2d0:	0e 94 e8 6b 	call	0xd7d0	; 0xd7d0 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    e2d4:	80 91 0b 01 	lds	r24, 0x010B
    e2d8:	90 91 0c 01 	lds	r25, 0x010C
    e2dc:	01 96       	adiw	r24, 0x01	; 1
    e2de:	90 93 0c 01 	sts	0x010C, r25
    e2e2:	80 93 0b 01 	sts	0x010B, r24
	}
    e2e6:	36 cf       	rjmp	.-404    	; 0xe154 <main+0x54>

0000e2e8 <__udivmodqi4>:
    e2e8:	99 1b       	sub	r25, r25
    e2ea:	79 e0       	ldi	r23, 0x09	; 9
    e2ec:	04 c0       	rjmp	.+8      	; 0xe2f6 <__udivmodqi4_ep>

0000e2ee <__udivmodqi4_loop>:
    e2ee:	99 1f       	adc	r25, r25
    e2f0:	96 17       	cp	r25, r22
    e2f2:	08 f0       	brcs	.+2      	; 0xe2f6 <__udivmodqi4_ep>
    e2f4:	96 1b       	sub	r25, r22

0000e2f6 <__udivmodqi4_ep>:
    e2f6:	88 1f       	adc	r24, r24
    e2f8:	7a 95       	dec	r23
    e2fa:	c9 f7       	brne	.-14     	; 0xe2ee <__udivmodqi4_loop>
    e2fc:	80 95       	com	r24
    e2fe:	08 95       	ret

0000e300 <__udivmodhi4>:
    e300:	aa 1b       	sub	r26, r26
    e302:	bb 1b       	sub	r27, r27
    e304:	51 e1       	ldi	r21, 0x11	; 17
    e306:	07 c0       	rjmp	.+14     	; 0xe316 <__udivmodhi4_ep>

0000e308 <__udivmodhi4_loop>:
    e308:	aa 1f       	adc	r26, r26
    e30a:	bb 1f       	adc	r27, r27
    e30c:	a6 17       	cp	r26, r22
    e30e:	b7 07       	cpc	r27, r23
    e310:	10 f0       	brcs	.+4      	; 0xe316 <__udivmodhi4_ep>
    e312:	a6 1b       	sub	r26, r22
    e314:	b7 0b       	sbc	r27, r23

0000e316 <__udivmodhi4_ep>:
    e316:	88 1f       	adc	r24, r24
    e318:	99 1f       	adc	r25, r25
    e31a:	5a 95       	dec	r21
    e31c:	a9 f7       	brne	.-22     	; 0xe308 <__udivmodhi4_loop>
    e31e:	80 95       	com	r24
    e320:	90 95       	com	r25
    e322:	bc 01       	movw	r22, r24
    e324:	cd 01       	movw	r24, r26
    e326:	08 95       	ret

0000e328 <__divmodhi4>:
    e328:	97 fb       	bst	r25, 7
    e32a:	07 2e       	mov	r0, r23
    e32c:	16 f4       	brtc	.+4      	; 0xe332 <__divmodhi4+0xa>
    e32e:	00 94       	com	r0
    e330:	07 d0       	rcall	.+14     	; 0xe340 <__divmodhi4_neg1>
    e332:	77 fd       	sbrc	r23, 7
    e334:	09 d0       	rcall	.+18     	; 0xe348 <__divmodhi4_neg2>
    e336:	0e 94 80 71 	call	0xe300	; 0xe300 <__udivmodhi4>
    e33a:	07 fc       	sbrc	r0, 7
    e33c:	05 d0       	rcall	.+10     	; 0xe348 <__divmodhi4_neg2>
    e33e:	3e f4       	brtc	.+14     	; 0xe34e <__divmodhi4_exit>

0000e340 <__divmodhi4_neg1>:
    e340:	90 95       	com	r25
    e342:	81 95       	neg	r24
    e344:	9f 4f       	sbci	r25, 0xFF	; 255
    e346:	08 95       	ret

0000e348 <__divmodhi4_neg2>:
    e348:	70 95       	com	r23
    e34a:	61 95       	neg	r22
    e34c:	7f 4f       	sbci	r23, 0xFF	; 255

0000e34e <__divmodhi4_exit>:
    e34e:	08 95       	ret

0000e350 <memcpy_P>:
    e350:	fb 01       	movw	r30, r22
    e352:	dc 01       	movw	r26, r24
    e354:	02 c0       	rjmp	.+4      	; 0xe35a <memcpy_P+0xa>
    e356:	05 90       	lpm	r0, Z+
    e358:	0d 92       	st	X+, r0
    e35a:	41 50       	subi	r20, 0x01	; 1
    e35c:	50 40       	sbci	r21, 0x00	; 0
    e35e:	d8 f7       	brcc	.-10     	; 0xe356 <memcpy_P+0x6>
    e360:	08 95       	ret

0000e362 <strnlen_P>:
    e362:	fc 01       	movw	r30, r24
    e364:	05 90       	lpm	r0, Z+
    e366:	61 50       	subi	r22, 0x01	; 1
    e368:	70 40       	sbci	r23, 0x00	; 0
    e36a:	01 10       	cpse	r0, r1
    e36c:	d8 f7       	brcc	.-10     	; 0xe364 <strnlen_P+0x2>
    e36e:	80 95       	com	r24
    e370:	90 95       	com	r25
    e372:	8e 0f       	add	r24, r30
    e374:	9f 1f       	adc	r25, r31
    e376:	08 95       	ret

0000e378 <strupr>:
    e378:	dc 01       	movw	r26, r24
    e37a:	6c 91       	ld	r22, X
    e37c:	61 56       	subi	r22, 0x61	; 97
    e37e:	6a 31       	cpi	r22, 0x1A	; 26
    e380:	08 f0       	brcs	.+2      	; 0xe384 <strupr+0xc>
    e382:	60 5e       	subi	r22, 0xE0	; 224
    e384:	6f 5b       	subi	r22, 0xBF	; 191
    e386:	6d 93       	st	X+, r22
    e388:	c1 f7       	brne	.-16     	; 0xe37a <strupr+0x2>
    e38a:	08 95       	ret

0000e38c <sprintf>:
    e38c:	ae e0       	ldi	r26, 0x0E	; 14
    e38e:	b0 e0       	ldi	r27, 0x00	; 0
    e390:	ec ec       	ldi	r30, 0xCC	; 204
    e392:	f1 e7       	ldi	r31, 0x71	; 113
    e394:	0c 94 6a 74 	jmp	0xe8d4	; 0xe8d4 <__prologue_saves__+0x1c>
    e398:	0d 89       	ldd	r16, Y+21	; 0x15
    e39a:	1e 89       	ldd	r17, Y+22	; 0x16
    e39c:	86 e0       	ldi	r24, 0x06	; 6
    e39e:	8c 83       	std	Y+4, r24	; 0x04
    e3a0:	1a 83       	std	Y+2, r17	; 0x02
    e3a2:	09 83       	std	Y+1, r16	; 0x01
    e3a4:	8f ef       	ldi	r24, 0xFF	; 255
    e3a6:	9f e7       	ldi	r25, 0x7F	; 127
    e3a8:	9e 83       	std	Y+6, r25	; 0x06
    e3aa:	8d 83       	std	Y+5, r24	; 0x05
    e3ac:	ae 01       	movw	r20, r28
    e3ae:	47 5e       	subi	r20, 0xE7	; 231
    e3b0:	5f 4f       	sbci	r21, 0xFF	; 255
    e3b2:	6f 89       	ldd	r22, Y+23	; 0x17
    e3b4:	78 8d       	ldd	r23, Y+24	; 0x18
    e3b6:	ce 01       	movw	r24, r28
    e3b8:	01 96       	adiw	r24, 0x01	; 1
    e3ba:	0e 94 e9 71 	call	0xe3d2	; 0xe3d2 <vfprintf>
    e3be:	2f 81       	ldd	r18, Y+7	; 0x07
    e3c0:	38 85       	ldd	r19, Y+8	; 0x08
    e3c2:	f8 01       	movw	r30, r16
    e3c4:	e2 0f       	add	r30, r18
    e3c6:	f3 1f       	adc	r31, r19
    e3c8:	10 82       	st	Z, r1
    e3ca:	2e 96       	adiw	r28, 0x0e	; 14
    e3cc:	e4 e0       	ldi	r30, 0x04	; 4
    e3ce:	0c 94 86 74 	jmp	0xe90c	; 0xe90c <__epilogue_restores__+0x1c>

0000e3d2 <vfprintf>:
    e3d2:	ac e0       	ldi	r26, 0x0C	; 12
    e3d4:	b0 e0       	ldi	r27, 0x00	; 0
    e3d6:	ef ee       	ldi	r30, 0xEF	; 239
    e3d8:	f1 e7       	ldi	r31, 0x71	; 113
    e3da:	0c 94 5c 74 	jmp	0xe8b8	; 0xe8b8 <__prologue_saves__>
    e3de:	7c 01       	movw	r14, r24
    e3e0:	6b 01       	movw	r12, r22
    e3e2:	8a 01       	movw	r16, r20
    e3e4:	fc 01       	movw	r30, r24
    e3e6:	17 82       	std	Z+7, r1	; 0x07
    e3e8:	16 82       	std	Z+6, r1	; 0x06
    e3ea:	83 81       	ldd	r24, Z+3	; 0x03
    e3ec:	81 ff       	sbrs	r24, 1
    e3ee:	bd c1       	rjmp	.+890    	; 0xe76a <vfprintf+0x398>
    e3f0:	ce 01       	movw	r24, r28
    e3f2:	01 96       	adiw	r24, 0x01	; 1
    e3f4:	4c 01       	movw	r8, r24
    e3f6:	f7 01       	movw	r30, r14
    e3f8:	93 81       	ldd	r25, Z+3	; 0x03
    e3fa:	f6 01       	movw	r30, r12
    e3fc:	93 fd       	sbrc	r25, 3
    e3fe:	85 91       	lpm	r24, Z+
    e400:	93 ff       	sbrs	r25, 3
    e402:	81 91       	ld	r24, Z+
    e404:	6f 01       	movw	r12, r30
    e406:	88 23       	and	r24, r24
    e408:	09 f4       	brne	.+2      	; 0xe40c <vfprintf+0x3a>
    e40a:	ab c1       	rjmp	.+854    	; 0xe762 <vfprintf+0x390>
    e40c:	85 32       	cpi	r24, 0x25	; 37
    e40e:	39 f4       	brne	.+14     	; 0xe41e <vfprintf+0x4c>
    e410:	93 fd       	sbrc	r25, 3
    e412:	85 91       	lpm	r24, Z+
    e414:	93 ff       	sbrs	r25, 3
    e416:	81 91       	ld	r24, Z+
    e418:	6f 01       	movw	r12, r30
    e41a:	85 32       	cpi	r24, 0x25	; 37
    e41c:	29 f4       	brne	.+10     	; 0xe428 <vfprintf+0x56>
    e41e:	b7 01       	movw	r22, r14
    e420:	90 e0       	ldi	r25, 0x00	; 0
    e422:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e426:	e7 cf       	rjmp	.-50     	; 0xe3f6 <vfprintf+0x24>
    e428:	51 2c       	mov	r5, r1
    e42a:	31 2c       	mov	r3, r1
    e42c:	20 e0       	ldi	r18, 0x00	; 0
    e42e:	20 32       	cpi	r18, 0x20	; 32
    e430:	a0 f4       	brcc	.+40     	; 0xe45a <vfprintf+0x88>
    e432:	8b 32       	cpi	r24, 0x2B	; 43
    e434:	69 f0       	breq	.+26     	; 0xe450 <vfprintf+0x7e>
    e436:	30 f4       	brcc	.+12     	; 0xe444 <vfprintf+0x72>
    e438:	80 32       	cpi	r24, 0x20	; 32
    e43a:	59 f0       	breq	.+22     	; 0xe452 <vfprintf+0x80>
    e43c:	83 32       	cpi	r24, 0x23	; 35
    e43e:	69 f4       	brne	.+26     	; 0xe45a <vfprintf+0x88>
    e440:	20 61       	ori	r18, 0x10	; 16
    e442:	2c c0       	rjmp	.+88     	; 0xe49c <vfprintf+0xca>
    e444:	8d 32       	cpi	r24, 0x2D	; 45
    e446:	39 f0       	breq	.+14     	; 0xe456 <vfprintf+0x84>
    e448:	80 33       	cpi	r24, 0x30	; 48
    e44a:	39 f4       	brne	.+14     	; 0xe45a <vfprintf+0x88>
    e44c:	21 60       	ori	r18, 0x01	; 1
    e44e:	26 c0       	rjmp	.+76     	; 0xe49c <vfprintf+0xca>
    e450:	22 60       	ori	r18, 0x02	; 2
    e452:	24 60       	ori	r18, 0x04	; 4
    e454:	23 c0       	rjmp	.+70     	; 0xe49c <vfprintf+0xca>
    e456:	28 60       	ori	r18, 0x08	; 8
    e458:	21 c0       	rjmp	.+66     	; 0xe49c <vfprintf+0xca>
    e45a:	27 fd       	sbrc	r18, 7
    e45c:	27 c0       	rjmp	.+78     	; 0xe4ac <vfprintf+0xda>
    e45e:	30 ed       	ldi	r19, 0xD0	; 208
    e460:	38 0f       	add	r19, r24
    e462:	3a 30       	cpi	r19, 0x0A	; 10
    e464:	78 f4       	brcc	.+30     	; 0xe484 <vfprintf+0xb2>
    e466:	26 ff       	sbrs	r18, 6
    e468:	06 c0       	rjmp	.+12     	; 0xe476 <vfprintf+0xa4>
    e46a:	fa e0       	ldi	r31, 0x0A	; 10
    e46c:	5f 9e       	mul	r5, r31
    e46e:	30 0d       	add	r19, r0
    e470:	11 24       	eor	r1, r1
    e472:	53 2e       	mov	r5, r19
    e474:	13 c0       	rjmp	.+38     	; 0xe49c <vfprintf+0xca>
    e476:	8a e0       	ldi	r24, 0x0A	; 10
    e478:	38 9e       	mul	r3, r24
    e47a:	30 0d       	add	r19, r0
    e47c:	11 24       	eor	r1, r1
    e47e:	33 2e       	mov	r3, r19
    e480:	20 62       	ori	r18, 0x20	; 32
    e482:	0c c0       	rjmp	.+24     	; 0xe49c <vfprintf+0xca>
    e484:	8e 32       	cpi	r24, 0x2E	; 46
    e486:	21 f4       	brne	.+8      	; 0xe490 <vfprintf+0xbe>
    e488:	26 fd       	sbrc	r18, 6
    e48a:	6b c1       	rjmp	.+726    	; 0xe762 <vfprintf+0x390>
    e48c:	20 64       	ori	r18, 0x40	; 64
    e48e:	06 c0       	rjmp	.+12     	; 0xe49c <vfprintf+0xca>
    e490:	8c 36       	cpi	r24, 0x6C	; 108
    e492:	11 f4       	brne	.+4      	; 0xe498 <vfprintf+0xc6>
    e494:	20 68       	ori	r18, 0x80	; 128
    e496:	02 c0       	rjmp	.+4      	; 0xe49c <vfprintf+0xca>
    e498:	88 36       	cpi	r24, 0x68	; 104
    e49a:	41 f4       	brne	.+16     	; 0xe4ac <vfprintf+0xda>
    e49c:	f6 01       	movw	r30, r12
    e49e:	93 fd       	sbrc	r25, 3
    e4a0:	85 91       	lpm	r24, Z+
    e4a2:	93 ff       	sbrs	r25, 3
    e4a4:	81 91       	ld	r24, Z+
    e4a6:	6f 01       	movw	r12, r30
    e4a8:	81 11       	cpse	r24, r1
    e4aa:	c1 cf       	rjmp	.-126    	; 0xe42e <vfprintf+0x5c>
    e4ac:	98 2f       	mov	r25, r24
    e4ae:	9f 7d       	andi	r25, 0xDF	; 223
    e4b0:	95 54       	subi	r25, 0x45	; 69
    e4b2:	93 30       	cpi	r25, 0x03	; 3
    e4b4:	28 f4       	brcc	.+10     	; 0xe4c0 <vfprintf+0xee>
    e4b6:	0c 5f       	subi	r16, 0xFC	; 252
    e4b8:	1f 4f       	sbci	r17, 0xFF	; 255
    e4ba:	ff e3       	ldi	r31, 0x3F	; 63
    e4bc:	f9 83       	std	Y+1, r31	; 0x01
    e4be:	0d c0       	rjmp	.+26     	; 0xe4da <vfprintf+0x108>
    e4c0:	83 36       	cpi	r24, 0x63	; 99
    e4c2:	31 f0       	breq	.+12     	; 0xe4d0 <vfprintf+0xfe>
    e4c4:	83 37       	cpi	r24, 0x73	; 115
    e4c6:	71 f0       	breq	.+28     	; 0xe4e4 <vfprintf+0x112>
    e4c8:	83 35       	cpi	r24, 0x53	; 83
    e4ca:	09 f0       	breq	.+2      	; 0xe4ce <vfprintf+0xfc>
    e4cc:	5b c0       	rjmp	.+182    	; 0xe584 <vfprintf+0x1b2>
    e4ce:	22 c0       	rjmp	.+68     	; 0xe514 <vfprintf+0x142>
    e4d0:	f8 01       	movw	r30, r16
    e4d2:	80 81       	ld	r24, Z
    e4d4:	89 83       	std	Y+1, r24	; 0x01
    e4d6:	0e 5f       	subi	r16, 0xFE	; 254
    e4d8:	1f 4f       	sbci	r17, 0xFF	; 255
    e4da:	44 24       	eor	r4, r4
    e4dc:	43 94       	inc	r4
    e4de:	51 2c       	mov	r5, r1
    e4e0:	54 01       	movw	r10, r8
    e4e2:	15 c0       	rjmp	.+42     	; 0xe50e <vfprintf+0x13c>
    e4e4:	38 01       	movw	r6, r16
    e4e6:	f2 e0       	ldi	r31, 0x02	; 2
    e4e8:	6f 0e       	add	r6, r31
    e4ea:	71 1c       	adc	r7, r1
    e4ec:	f8 01       	movw	r30, r16
    e4ee:	a0 80       	ld	r10, Z
    e4f0:	b1 80       	ldd	r11, Z+1	; 0x01
    e4f2:	26 ff       	sbrs	r18, 6
    e4f4:	03 c0       	rjmp	.+6      	; 0xe4fc <vfprintf+0x12a>
    e4f6:	65 2d       	mov	r22, r5
    e4f8:	70 e0       	ldi	r23, 0x00	; 0
    e4fa:	02 c0       	rjmp	.+4      	; 0xe500 <vfprintf+0x12e>
    e4fc:	6f ef       	ldi	r22, 0xFF	; 255
    e4fe:	7f ef       	ldi	r23, 0xFF	; 255
    e500:	c5 01       	movw	r24, r10
    e502:	2c 87       	std	Y+12, r18	; 0x0c
    e504:	0e 94 bb 73 	call	0xe776	; 0xe776 <strnlen>
    e508:	2c 01       	movw	r4, r24
    e50a:	83 01       	movw	r16, r6
    e50c:	2c 85       	ldd	r18, Y+12	; 0x0c
    e50e:	2f 77       	andi	r18, 0x7F	; 127
    e510:	22 2e       	mov	r2, r18
    e512:	17 c0       	rjmp	.+46     	; 0xe542 <vfprintf+0x170>
    e514:	38 01       	movw	r6, r16
    e516:	f2 e0       	ldi	r31, 0x02	; 2
    e518:	6f 0e       	add	r6, r31
    e51a:	71 1c       	adc	r7, r1
    e51c:	f8 01       	movw	r30, r16
    e51e:	a0 80       	ld	r10, Z
    e520:	b1 80       	ldd	r11, Z+1	; 0x01
    e522:	26 ff       	sbrs	r18, 6
    e524:	03 c0       	rjmp	.+6      	; 0xe52c <vfprintf+0x15a>
    e526:	65 2d       	mov	r22, r5
    e528:	70 e0       	ldi	r23, 0x00	; 0
    e52a:	02 c0       	rjmp	.+4      	; 0xe530 <vfprintf+0x15e>
    e52c:	6f ef       	ldi	r22, 0xFF	; 255
    e52e:	7f ef       	ldi	r23, 0xFF	; 255
    e530:	c5 01       	movw	r24, r10
    e532:	2c 87       	std	Y+12, r18	; 0x0c
    e534:	0e 94 b1 71 	call	0xe362	; 0xe362 <strnlen_P>
    e538:	2c 01       	movw	r4, r24
    e53a:	2c 85       	ldd	r18, Y+12	; 0x0c
    e53c:	20 68       	ori	r18, 0x80	; 128
    e53e:	22 2e       	mov	r2, r18
    e540:	83 01       	movw	r16, r6
    e542:	23 fc       	sbrc	r2, 3
    e544:	1b c0       	rjmp	.+54     	; 0xe57c <vfprintf+0x1aa>
    e546:	83 2d       	mov	r24, r3
    e548:	90 e0       	ldi	r25, 0x00	; 0
    e54a:	48 16       	cp	r4, r24
    e54c:	59 06       	cpc	r5, r25
    e54e:	b0 f4       	brcc	.+44     	; 0xe57c <vfprintf+0x1aa>
    e550:	b7 01       	movw	r22, r14
    e552:	80 e2       	ldi	r24, 0x20	; 32
    e554:	90 e0       	ldi	r25, 0x00	; 0
    e556:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e55a:	3a 94       	dec	r3
    e55c:	f4 cf       	rjmp	.-24     	; 0xe546 <vfprintf+0x174>
    e55e:	f5 01       	movw	r30, r10
    e560:	27 fc       	sbrc	r2, 7
    e562:	85 91       	lpm	r24, Z+
    e564:	27 fe       	sbrs	r2, 7
    e566:	81 91       	ld	r24, Z+
    e568:	5f 01       	movw	r10, r30
    e56a:	b7 01       	movw	r22, r14
    e56c:	90 e0       	ldi	r25, 0x00	; 0
    e56e:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e572:	31 10       	cpse	r3, r1
    e574:	3a 94       	dec	r3
    e576:	f1 e0       	ldi	r31, 0x01	; 1
    e578:	4f 1a       	sub	r4, r31
    e57a:	51 08       	sbc	r5, r1
    e57c:	41 14       	cp	r4, r1
    e57e:	51 04       	cpc	r5, r1
    e580:	71 f7       	brne	.-36     	; 0xe55e <vfprintf+0x18c>
    e582:	e5 c0       	rjmp	.+458    	; 0xe74e <vfprintf+0x37c>
    e584:	84 36       	cpi	r24, 0x64	; 100
    e586:	11 f0       	breq	.+4      	; 0xe58c <vfprintf+0x1ba>
    e588:	89 36       	cpi	r24, 0x69	; 105
    e58a:	39 f5       	brne	.+78     	; 0xe5da <vfprintf+0x208>
    e58c:	f8 01       	movw	r30, r16
    e58e:	27 ff       	sbrs	r18, 7
    e590:	07 c0       	rjmp	.+14     	; 0xe5a0 <vfprintf+0x1ce>
    e592:	60 81       	ld	r22, Z
    e594:	71 81       	ldd	r23, Z+1	; 0x01
    e596:	82 81       	ldd	r24, Z+2	; 0x02
    e598:	93 81       	ldd	r25, Z+3	; 0x03
    e59a:	0c 5f       	subi	r16, 0xFC	; 252
    e59c:	1f 4f       	sbci	r17, 0xFF	; 255
    e59e:	08 c0       	rjmp	.+16     	; 0xe5b0 <vfprintf+0x1de>
    e5a0:	60 81       	ld	r22, Z
    e5a2:	71 81       	ldd	r23, Z+1	; 0x01
    e5a4:	88 27       	eor	r24, r24
    e5a6:	77 fd       	sbrc	r23, 7
    e5a8:	80 95       	com	r24
    e5aa:	98 2f       	mov	r25, r24
    e5ac:	0e 5f       	subi	r16, 0xFE	; 254
    e5ae:	1f 4f       	sbci	r17, 0xFF	; 255
    e5b0:	2f 76       	andi	r18, 0x6F	; 111
    e5b2:	72 2e       	mov	r7, r18
    e5b4:	97 ff       	sbrs	r25, 7
    e5b6:	09 c0       	rjmp	.+18     	; 0xe5ca <vfprintf+0x1f8>
    e5b8:	90 95       	com	r25
    e5ba:	80 95       	com	r24
    e5bc:	70 95       	com	r23
    e5be:	61 95       	neg	r22
    e5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    e5c2:	8f 4f       	sbci	r24, 0xFF	; 255
    e5c4:	9f 4f       	sbci	r25, 0xFF	; 255
    e5c6:	20 68       	ori	r18, 0x80	; 128
    e5c8:	72 2e       	mov	r7, r18
    e5ca:	2a e0       	ldi	r18, 0x0A	; 10
    e5cc:	30 e0       	ldi	r19, 0x00	; 0
    e5ce:	a4 01       	movw	r20, r8
    e5d0:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__ultoa_invert>
    e5d4:	a8 2e       	mov	r10, r24
    e5d6:	a8 18       	sub	r10, r8
    e5d8:	44 c0       	rjmp	.+136    	; 0xe662 <vfprintf+0x290>
    e5da:	85 37       	cpi	r24, 0x75	; 117
    e5dc:	29 f4       	brne	.+10     	; 0xe5e8 <vfprintf+0x216>
    e5de:	2f 7e       	andi	r18, 0xEF	; 239
    e5e0:	b2 2e       	mov	r11, r18
    e5e2:	2a e0       	ldi	r18, 0x0A	; 10
    e5e4:	30 e0       	ldi	r19, 0x00	; 0
    e5e6:	25 c0       	rjmp	.+74     	; 0xe632 <vfprintf+0x260>
    e5e8:	f2 2f       	mov	r31, r18
    e5ea:	f9 7f       	andi	r31, 0xF9	; 249
    e5ec:	bf 2e       	mov	r11, r31
    e5ee:	8f 36       	cpi	r24, 0x6F	; 111
    e5f0:	c1 f0       	breq	.+48     	; 0xe622 <vfprintf+0x250>
    e5f2:	18 f4       	brcc	.+6      	; 0xe5fa <vfprintf+0x228>
    e5f4:	88 35       	cpi	r24, 0x58	; 88
    e5f6:	79 f0       	breq	.+30     	; 0xe616 <vfprintf+0x244>
    e5f8:	b4 c0       	rjmp	.+360    	; 0xe762 <vfprintf+0x390>
    e5fa:	80 37       	cpi	r24, 0x70	; 112
    e5fc:	19 f0       	breq	.+6      	; 0xe604 <vfprintf+0x232>
    e5fe:	88 37       	cpi	r24, 0x78	; 120
    e600:	21 f0       	breq	.+8      	; 0xe60a <vfprintf+0x238>
    e602:	af c0       	rjmp	.+350    	; 0xe762 <vfprintf+0x390>
    e604:	2f 2f       	mov	r18, r31
    e606:	20 61       	ori	r18, 0x10	; 16
    e608:	b2 2e       	mov	r11, r18
    e60a:	b4 fe       	sbrs	r11, 4
    e60c:	0d c0       	rjmp	.+26     	; 0xe628 <vfprintf+0x256>
    e60e:	8b 2d       	mov	r24, r11
    e610:	84 60       	ori	r24, 0x04	; 4
    e612:	b8 2e       	mov	r11, r24
    e614:	09 c0       	rjmp	.+18     	; 0xe628 <vfprintf+0x256>
    e616:	24 ff       	sbrs	r18, 4
    e618:	0a c0       	rjmp	.+20     	; 0xe62e <vfprintf+0x25c>
    e61a:	9f 2f       	mov	r25, r31
    e61c:	96 60       	ori	r25, 0x06	; 6
    e61e:	b9 2e       	mov	r11, r25
    e620:	06 c0       	rjmp	.+12     	; 0xe62e <vfprintf+0x25c>
    e622:	28 e0       	ldi	r18, 0x08	; 8
    e624:	30 e0       	ldi	r19, 0x00	; 0
    e626:	05 c0       	rjmp	.+10     	; 0xe632 <vfprintf+0x260>
    e628:	20 e1       	ldi	r18, 0x10	; 16
    e62a:	30 e0       	ldi	r19, 0x00	; 0
    e62c:	02 c0       	rjmp	.+4      	; 0xe632 <vfprintf+0x260>
    e62e:	20 e1       	ldi	r18, 0x10	; 16
    e630:	32 e0       	ldi	r19, 0x02	; 2
    e632:	f8 01       	movw	r30, r16
    e634:	b7 fe       	sbrs	r11, 7
    e636:	07 c0       	rjmp	.+14     	; 0xe646 <vfprintf+0x274>
    e638:	60 81       	ld	r22, Z
    e63a:	71 81       	ldd	r23, Z+1	; 0x01
    e63c:	82 81       	ldd	r24, Z+2	; 0x02
    e63e:	93 81       	ldd	r25, Z+3	; 0x03
    e640:	0c 5f       	subi	r16, 0xFC	; 252
    e642:	1f 4f       	sbci	r17, 0xFF	; 255
    e644:	06 c0       	rjmp	.+12     	; 0xe652 <vfprintf+0x280>
    e646:	60 81       	ld	r22, Z
    e648:	71 81       	ldd	r23, Z+1	; 0x01
    e64a:	80 e0       	ldi	r24, 0x00	; 0
    e64c:	90 e0       	ldi	r25, 0x00	; 0
    e64e:	0e 5f       	subi	r16, 0xFE	; 254
    e650:	1f 4f       	sbci	r17, 0xFF	; 255
    e652:	a4 01       	movw	r20, r8
    e654:	0e 94 fe 73 	call	0xe7fc	; 0xe7fc <__ultoa_invert>
    e658:	a8 2e       	mov	r10, r24
    e65a:	a8 18       	sub	r10, r8
    e65c:	fb 2d       	mov	r31, r11
    e65e:	ff 77       	andi	r31, 0x7F	; 127
    e660:	7f 2e       	mov	r7, r31
    e662:	76 fe       	sbrs	r7, 6
    e664:	0b c0       	rjmp	.+22     	; 0xe67c <vfprintf+0x2aa>
    e666:	37 2d       	mov	r19, r7
    e668:	3e 7f       	andi	r19, 0xFE	; 254
    e66a:	a5 14       	cp	r10, r5
    e66c:	50 f4       	brcc	.+20     	; 0xe682 <vfprintf+0x2b0>
    e66e:	74 fe       	sbrs	r7, 4
    e670:	0a c0       	rjmp	.+20     	; 0xe686 <vfprintf+0x2b4>
    e672:	72 fc       	sbrc	r7, 2
    e674:	08 c0       	rjmp	.+16     	; 0xe686 <vfprintf+0x2b4>
    e676:	37 2d       	mov	r19, r7
    e678:	3e 7e       	andi	r19, 0xEE	; 238
    e67a:	05 c0       	rjmp	.+10     	; 0xe686 <vfprintf+0x2b4>
    e67c:	ba 2c       	mov	r11, r10
    e67e:	37 2d       	mov	r19, r7
    e680:	03 c0       	rjmp	.+6      	; 0xe688 <vfprintf+0x2b6>
    e682:	ba 2c       	mov	r11, r10
    e684:	01 c0       	rjmp	.+2      	; 0xe688 <vfprintf+0x2b6>
    e686:	b5 2c       	mov	r11, r5
    e688:	34 ff       	sbrs	r19, 4
    e68a:	0d c0       	rjmp	.+26     	; 0xe6a6 <vfprintf+0x2d4>
    e68c:	fe 01       	movw	r30, r28
    e68e:	ea 0d       	add	r30, r10
    e690:	f1 1d       	adc	r31, r1
    e692:	80 81       	ld	r24, Z
    e694:	80 33       	cpi	r24, 0x30	; 48
    e696:	11 f4       	brne	.+4      	; 0xe69c <vfprintf+0x2ca>
    e698:	39 7e       	andi	r19, 0xE9	; 233
    e69a:	09 c0       	rjmp	.+18     	; 0xe6ae <vfprintf+0x2dc>
    e69c:	32 ff       	sbrs	r19, 2
    e69e:	06 c0       	rjmp	.+12     	; 0xe6ac <vfprintf+0x2da>
    e6a0:	b3 94       	inc	r11
    e6a2:	b3 94       	inc	r11
    e6a4:	04 c0       	rjmp	.+8      	; 0xe6ae <vfprintf+0x2dc>
    e6a6:	83 2f       	mov	r24, r19
    e6a8:	86 78       	andi	r24, 0x86	; 134
    e6aa:	09 f0       	breq	.+2      	; 0xe6ae <vfprintf+0x2dc>
    e6ac:	b3 94       	inc	r11
    e6ae:	33 fd       	sbrc	r19, 3
    e6b0:	13 c0       	rjmp	.+38     	; 0xe6d8 <vfprintf+0x306>
    e6b2:	30 ff       	sbrs	r19, 0
    e6b4:	06 c0       	rjmp	.+12     	; 0xe6c2 <vfprintf+0x2f0>
    e6b6:	5a 2c       	mov	r5, r10
    e6b8:	b3 14       	cp	r11, r3
    e6ba:	18 f4       	brcc	.+6      	; 0xe6c2 <vfprintf+0x2f0>
    e6bc:	53 0c       	add	r5, r3
    e6be:	5b 18       	sub	r5, r11
    e6c0:	b3 2c       	mov	r11, r3
    e6c2:	b3 14       	cp	r11, r3
    e6c4:	68 f4       	brcc	.+26     	; 0xe6e0 <vfprintf+0x30e>
    e6c6:	b7 01       	movw	r22, r14
    e6c8:	80 e2       	ldi	r24, 0x20	; 32
    e6ca:	90 e0       	ldi	r25, 0x00	; 0
    e6cc:	3c 87       	std	Y+12, r19	; 0x0c
    e6ce:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e6d2:	b3 94       	inc	r11
    e6d4:	3c 85       	ldd	r19, Y+12	; 0x0c
    e6d6:	f5 cf       	rjmp	.-22     	; 0xe6c2 <vfprintf+0x2f0>
    e6d8:	b3 14       	cp	r11, r3
    e6da:	10 f4       	brcc	.+4      	; 0xe6e0 <vfprintf+0x30e>
    e6dc:	3b 18       	sub	r3, r11
    e6de:	01 c0       	rjmp	.+2      	; 0xe6e2 <vfprintf+0x310>
    e6e0:	31 2c       	mov	r3, r1
    e6e2:	34 ff       	sbrs	r19, 4
    e6e4:	12 c0       	rjmp	.+36     	; 0xe70a <vfprintf+0x338>
    e6e6:	b7 01       	movw	r22, r14
    e6e8:	80 e3       	ldi	r24, 0x30	; 48
    e6ea:	90 e0       	ldi	r25, 0x00	; 0
    e6ec:	3c 87       	std	Y+12, r19	; 0x0c
    e6ee:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e6f2:	3c 85       	ldd	r19, Y+12	; 0x0c
    e6f4:	32 ff       	sbrs	r19, 2
    e6f6:	17 c0       	rjmp	.+46     	; 0xe726 <vfprintf+0x354>
    e6f8:	31 fd       	sbrc	r19, 1
    e6fa:	03 c0       	rjmp	.+6      	; 0xe702 <vfprintf+0x330>
    e6fc:	88 e7       	ldi	r24, 0x78	; 120
    e6fe:	90 e0       	ldi	r25, 0x00	; 0
    e700:	02 c0       	rjmp	.+4      	; 0xe706 <vfprintf+0x334>
    e702:	88 e5       	ldi	r24, 0x58	; 88
    e704:	90 e0       	ldi	r25, 0x00	; 0
    e706:	b7 01       	movw	r22, r14
    e708:	0c c0       	rjmp	.+24     	; 0xe722 <vfprintf+0x350>
    e70a:	83 2f       	mov	r24, r19
    e70c:	86 78       	andi	r24, 0x86	; 134
    e70e:	59 f0       	breq	.+22     	; 0xe726 <vfprintf+0x354>
    e710:	31 ff       	sbrs	r19, 1
    e712:	02 c0       	rjmp	.+4      	; 0xe718 <vfprintf+0x346>
    e714:	8b e2       	ldi	r24, 0x2B	; 43
    e716:	01 c0       	rjmp	.+2      	; 0xe71a <vfprintf+0x348>
    e718:	80 e2       	ldi	r24, 0x20	; 32
    e71a:	37 fd       	sbrc	r19, 7
    e71c:	8d e2       	ldi	r24, 0x2D	; 45
    e71e:	b7 01       	movw	r22, r14
    e720:	90 e0       	ldi	r25, 0x00	; 0
    e722:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e726:	a5 14       	cp	r10, r5
    e728:	38 f4       	brcc	.+14     	; 0xe738 <vfprintf+0x366>
    e72a:	b7 01       	movw	r22, r14
    e72c:	80 e3       	ldi	r24, 0x30	; 48
    e72e:	90 e0       	ldi	r25, 0x00	; 0
    e730:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e734:	5a 94       	dec	r5
    e736:	f7 cf       	rjmp	.-18     	; 0xe726 <vfprintf+0x354>
    e738:	aa 94       	dec	r10
    e73a:	f4 01       	movw	r30, r8
    e73c:	ea 0d       	add	r30, r10
    e73e:	f1 1d       	adc	r31, r1
    e740:	80 81       	ld	r24, Z
    e742:	b7 01       	movw	r22, r14
    e744:	90 e0       	ldi	r25, 0x00	; 0
    e746:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e74a:	a1 10       	cpse	r10, r1
    e74c:	f5 cf       	rjmp	.-22     	; 0xe738 <vfprintf+0x366>
    e74e:	33 20       	and	r3, r3
    e750:	09 f4       	brne	.+2      	; 0xe754 <vfprintf+0x382>
    e752:	51 ce       	rjmp	.-862    	; 0xe3f6 <vfprintf+0x24>
    e754:	b7 01       	movw	r22, r14
    e756:	80 e2       	ldi	r24, 0x20	; 32
    e758:	90 e0       	ldi	r25, 0x00	; 0
    e75a:	0e 94 c6 73 	call	0xe78c	; 0xe78c <fputc>
    e75e:	3a 94       	dec	r3
    e760:	f6 cf       	rjmp	.-20     	; 0xe74e <vfprintf+0x37c>
    e762:	f7 01       	movw	r30, r14
    e764:	86 81       	ldd	r24, Z+6	; 0x06
    e766:	97 81       	ldd	r25, Z+7	; 0x07
    e768:	02 c0       	rjmp	.+4      	; 0xe76e <vfprintf+0x39c>
    e76a:	8f ef       	ldi	r24, 0xFF	; 255
    e76c:	9f ef       	ldi	r25, 0xFF	; 255
    e76e:	2c 96       	adiw	r28, 0x0c	; 12
    e770:	e2 e1       	ldi	r30, 0x12	; 18
    e772:	0c 94 78 74 	jmp	0xe8f0	; 0xe8f0 <__epilogue_restores__>

0000e776 <strnlen>:
    e776:	fc 01       	movw	r30, r24
    e778:	61 50       	subi	r22, 0x01	; 1
    e77a:	70 40       	sbci	r23, 0x00	; 0
    e77c:	01 90       	ld	r0, Z+
    e77e:	01 10       	cpse	r0, r1
    e780:	d8 f7       	brcc	.-10     	; 0xe778 <strnlen+0x2>
    e782:	80 95       	com	r24
    e784:	90 95       	com	r25
    e786:	8e 0f       	add	r24, r30
    e788:	9f 1f       	adc	r25, r31
    e78a:	08 95       	ret

0000e78c <fputc>:
    e78c:	0f 93       	push	r16
    e78e:	1f 93       	push	r17
    e790:	cf 93       	push	r28
    e792:	df 93       	push	r29
    e794:	fb 01       	movw	r30, r22
    e796:	23 81       	ldd	r18, Z+3	; 0x03
    e798:	21 fd       	sbrc	r18, 1
    e79a:	03 c0       	rjmp	.+6      	; 0xe7a2 <fputc+0x16>
    e79c:	8f ef       	ldi	r24, 0xFF	; 255
    e79e:	9f ef       	ldi	r25, 0xFF	; 255
    e7a0:	28 c0       	rjmp	.+80     	; 0xe7f2 <fputc+0x66>
    e7a2:	22 ff       	sbrs	r18, 2
    e7a4:	16 c0       	rjmp	.+44     	; 0xe7d2 <fputc+0x46>
    e7a6:	46 81       	ldd	r20, Z+6	; 0x06
    e7a8:	57 81       	ldd	r21, Z+7	; 0x07
    e7aa:	24 81       	ldd	r18, Z+4	; 0x04
    e7ac:	35 81       	ldd	r19, Z+5	; 0x05
    e7ae:	42 17       	cp	r20, r18
    e7b0:	53 07       	cpc	r21, r19
    e7b2:	44 f4       	brge	.+16     	; 0xe7c4 <fputc+0x38>
    e7b4:	a0 81       	ld	r26, Z
    e7b6:	b1 81       	ldd	r27, Z+1	; 0x01
    e7b8:	9d 01       	movw	r18, r26
    e7ba:	2f 5f       	subi	r18, 0xFF	; 255
    e7bc:	3f 4f       	sbci	r19, 0xFF	; 255
    e7be:	31 83       	std	Z+1, r19	; 0x01
    e7c0:	20 83       	st	Z, r18
    e7c2:	8c 93       	st	X, r24
    e7c4:	26 81       	ldd	r18, Z+6	; 0x06
    e7c6:	37 81       	ldd	r19, Z+7	; 0x07
    e7c8:	2f 5f       	subi	r18, 0xFF	; 255
    e7ca:	3f 4f       	sbci	r19, 0xFF	; 255
    e7cc:	37 83       	std	Z+7, r19	; 0x07
    e7ce:	26 83       	std	Z+6, r18	; 0x06
    e7d0:	10 c0       	rjmp	.+32     	; 0xe7f2 <fputc+0x66>
    e7d2:	eb 01       	movw	r28, r22
    e7d4:	09 2f       	mov	r16, r25
    e7d6:	18 2f       	mov	r17, r24
    e7d8:	00 84       	ldd	r0, Z+8	; 0x08
    e7da:	f1 85       	ldd	r31, Z+9	; 0x09
    e7dc:	e0 2d       	mov	r30, r0
    e7de:	09 95       	icall
    e7e0:	89 2b       	or	r24, r25
    e7e2:	e1 f6       	brne	.-72     	; 0xe79c <fputc+0x10>
    e7e4:	8e 81       	ldd	r24, Y+6	; 0x06
    e7e6:	9f 81       	ldd	r25, Y+7	; 0x07
    e7e8:	01 96       	adiw	r24, 0x01	; 1
    e7ea:	9f 83       	std	Y+7, r25	; 0x07
    e7ec:	8e 83       	std	Y+6, r24	; 0x06
    e7ee:	81 2f       	mov	r24, r17
    e7f0:	90 2f       	mov	r25, r16
    e7f2:	df 91       	pop	r29
    e7f4:	cf 91       	pop	r28
    e7f6:	1f 91       	pop	r17
    e7f8:	0f 91       	pop	r16
    e7fa:	08 95       	ret

0000e7fc <__ultoa_invert>:
    e7fc:	fa 01       	movw	r30, r20
    e7fe:	aa 27       	eor	r26, r26
    e800:	28 30       	cpi	r18, 0x08	; 8
    e802:	51 f1       	breq	.+84     	; 0xe858 <__ultoa_invert+0x5c>
    e804:	20 31       	cpi	r18, 0x10	; 16
    e806:	81 f1       	breq	.+96     	; 0xe868 <__ultoa_invert+0x6c>
    e808:	e8 94       	clt
    e80a:	6f 93       	push	r22
    e80c:	6e 7f       	andi	r22, 0xFE	; 254
    e80e:	6e 5f       	subi	r22, 0xFE	; 254
    e810:	7f 4f       	sbci	r23, 0xFF	; 255
    e812:	8f 4f       	sbci	r24, 0xFF	; 255
    e814:	9f 4f       	sbci	r25, 0xFF	; 255
    e816:	af 4f       	sbci	r26, 0xFF	; 255
    e818:	b1 e0       	ldi	r27, 0x01	; 1
    e81a:	3e d0       	rcall	.+124    	; 0xe898 <__ultoa_invert+0x9c>
    e81c:	b4 e0       	ldi	r27, 0x04	; 4
    e81e:	3c d0       	rcall	.+120    	; 0xe898 <__ultoa_invert+0x9c>
    e820:	67 0f       	add	r22, r23
    e822:	78 1f       	adc	r23, r24
    e824:	89 1f       	adc	r24, r25
    e826:	9a 1f       	adc	r25, r26
    e828:	a1 1d       	adc	r26, r1
    e82a:	68 0f       	add	r22, r24
    e82c:	79 1f       	adc	r23, r25
    e82e:	8a 1f       	adc	r24, r26
    e830:	91 1d       	adc	r25, r1
    e832:	a1 1d       	adc	r26, r1
    e834:	6a 0f       	add	r22, r26
    e836:	71 1d       	adc	r23, r1
    e838:	81 1d       	adc	r24, r1
    e83a:	91 1d       	adc	r25, r1
    e83c:	a1 1d       	adc	r26, r1
    e83e:	20 d0       	rcall	.+64     	; 0xe880 <__ultoa_invert+0x84>
    e840:	09 f4       	brne	.+2      	; 0xe844 <__ultoa_invert+0x48>
    e842:	68 94       	set
    e844:	3f 91       	pop	r19
    e846:	2a e0       	ldi	r18, 0x0A	; 10
    e848:	26 9f       	mul	r18, r22
    e84a:	11 24       	eor	r1, r1
    e84c:	30 19       	sub	r19, r0
    e84e:	30 5d       	subi	r19, 0xD0	; 208
    e850:	31 93       	st	Z+, r19
    e852:	de f6       	brtc	.-74     	; 0xe80a <__ultoa_invert+0xe>
    e854:	cf 01       	movw	r24, r30
    e856:	08 95       	ret
    e858:	46 2f       	mov	r20, r22
    e85a:	47 70       	andi	r20, 0x07	; 7
    e85c:	40 5d       	subi	r20, 0xD0	; 208
    e85e:	41 93       	st	Z+, r20
    e860:	b3 e0       	ldi	r27, 0x03	; 3
    e862:	0f d0       	rcall	.+30     	; 0xe882 <__ultoa_invert+0x86>
    e864:	c9 f7       	brne	.-14     	; 0xe858 <__ultoa_invert+0x5c>
    e866:	f6 cf       	rjmp	.-20     	; 0xe854 <__ultoa_invert+0x58>
    e868:	46 2f       	mov	r20, r22
    e86a:	4f 70       	andi	r20, 0x0F	; 15
    e86c:	40 5d       	subi	r20, 0xD0	; 208
    e86e:	4a 33       	cpi	r20, 0x3A	; 58
    e870:	18 f0       	brcs	.+6      	; 0xe878 <__ultoa_invert+0x7c>
    e872:	49 5d       	subi	r20, 0xD9	; 217
    e874:	31 fd       	sbrc	r19, 1
    e876:	40 52       	subi	r20, 0x20	; 32
    e878:	41 93       	st	Z+, r20
    e87a:	02 d0       	rcall	.+4      	; 0xe880 <__ultoa_invert+0x84>
    e87c:	a9 f7       	brne	.-22     	; 0xe868 <__ultoa_invert+0x6c>
    e87e:	ea cf       	rjmp	.-44     	; 0xe854 <__ultoa_invert+0x58>
    e880:	b4 e0       	ldi	r27, 0x04	; 4
    e882:	a6 95       	lsr	r26
    e884:	97 95       	ror	r25
    e886:	87 95       	ror	r24
    e888:	77 95       	ror	r23
    e88a:	67 95       	ror	r22
    e88c:	ba 95       	dec	r27
    e88e:	c9 f7       	brne	.-14     	; 0xe882 <__ultoa_invert+0x86>
    e890:	00 97       	sbiw	r24, 0x00	; 0
    e892:	61 05       	cpc	r22, r1
    e894:	71 05       	cpc	r23, r1
    e896:	08 95       	ret
    e898:	9b 01       	movw	r18, r22
    e89a:	ac 01       	movw	r20, r24
    e89c:	0a 2e       	mov	r0, r26
    e89e:	06 94       	lsr	r0
    e8a0:	57 95       	ror	r21
    e8a2:	47 95       	ror	r20
    e8a4:	37 95       	ror	r19
    e8a6:	27 95       	ror	r18
    e8a8:	ba 95       	dec	r27
    e8aa:	c9 f7       	brne	.-14     	; 0xe89e <__ultoa_invert+0xa2>
    e8ac:	62 0f       	add	r22, r18
    e8ae:	73 1f       	adc	r23, r19
    e8b0:	84 1f       	adc	r24, r20
    e8b2:	95 1f       	adc	r25, r21
    e8b4:	a0 1d       	adc	r26, r0
    e8b6:	08 95       	ret

0000e8b8 <__prologue_saves__>:
    e8b8:	2f 92       	push	r2
    e8ba:	3f 92       	push	r3
    e8bc:	4f 92       	push	r4
    e8be:	5f 92       	push	r5
    e8c0:	6f 92       	push	r6
    e8c2:	7f 92       	push	r7
    e8c4:	8f 92       	push	r8
    e8c6:	9f 92       	push	r9
    e8c8:	af 92       	push	r10
    e8ca:	bf 92       	push	r11
    e8cc:	cf 92       	push	r12
    e8ce:	df 92       	push	r13
    e8d0:	ef 92       	push	r14
    e8d2:	ff 92       	push	r15
    e8d4:	0f 93       	push	r16
    e8d6:	1f 93       	push	r17
    e8d8:	cf 93       	push	r28
    e8da:	df 93       	push	r29
    e8dc:	cd b7       	in	r28, 0x3d	; 61
    e8de:	de b7       	in	r29, 0x3e	; 62
    e8e0:	ca 1b       	sub	r28, r26
    e8e2:	db 0b       	sbc	r29, r27
    e8e4:	0f b6       	in	r0, 0x3f	; 63
    e8e6:	f8 94       	cli
    e8e8:	de bf       	out	0x3e, r29	; 62
    e8ea:	0f be       	out	0x3f, r0	; 63
    e8ec:	cd bf       	out	0x3d, r28	; 61
    e8ee:	09 94       	ijmp

0000e8f0 <__epilogue_restores__>:
    e8f0:	2a 88       	ldd	r2, Y+18	; 0x12
    e8f2:	39 88       	ldd	r3, Y+17	; 0x11
    e8f4:	48 88       	ldd	r4, Y+16	; 0x10
    e8f6:	5f 84       	ldd	r5, Y+15	; 0x0f
    e8f8:	6e 84       	ldd	r6, Y+14	; 0x0e
    e8fa:	7d 84       	ldd	r7, Y+13	; 0x0d
    e8fc:	8c 84       	ldd	r8, Y+12	; 0x0c
    e8fe:	9b 84       	ldd	r9, Y+11	; 0x0b
    e900:	aa 84       	ldd	r10, Y+10	; 0x0a
    e902:	b9 84       	ldd	r11, Y+9	; 0x09
    e904:	c8 84       	ldd	r12, Y+8	; 0x08
    e906:	df 80       	ldd	r13, Y+7	; 0x07
    e908:	ee 80       	ldd	r14, Y+6	; 0x06
    e90a:	fd 80       	ldd	r15, Y+5	; 0x05
    e90c:	0c 81       	ldd	r16, Y+4	; 0x04
    e90e:	1b 81       	ldd	r17, Y+3	; 0x03
    e910:	aa 81       	ldd	r26, Y+2	; 0x02
    e912:	b9 81       	ldd	r27, Y+1	; 0x01
    e914:	ce 0f       	add	r28, r30
    e916:	d1 1d       	adc	r29, r1
    e918:	0f b6       	in	r0, 0x3f	; 63
    e91a:	f8 94       	cli
    e91c:	de bf       	out	0x3e, r29	; 62
    e91e:	0f be       	out	0x3f, r0	; 63
    e920:	cd bf       	out	0x3d, r28	; 61
    e922:	ed 01       	movw	r28, r26
    e924:	08 95       	ret

0000e926 <_exit>:
    e926:	f8 94       	cli

0000e928 <__stop_program>:
    e928:	ff cf       	rjmp	.-2      	; 0xe928 <__stop_program>
