
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000c796  0000c896  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000c796  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ef1  00800106  00800106  0000c8a6  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000c89c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000ceb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d159  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005d0  00000000  00000000  0000d170  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088cb  00000000  00000000  0000d740  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  0001600b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001e9c  00000000  00000000  00017538  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001374  00000000  00000000  000193d4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a15  00000000  00000000  0001a748  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007edd  00000000  00000000  0001c15d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  00024040  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 07 36 	jmp	0x6c0e	; 0x6c0e <__ctors_end>
       4:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
       8:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
       c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      10:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      14:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      18:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      1c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      20:	0c 94 73 3a 	jmp	0x74e6	; 0x74e6 <__vector_8>
      24:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      28:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      2c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      30:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      34:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__vector_13>
      38:	0c 94 8a 38 	jmp	0x7114	; 0x7114 <__vector_14>
      3c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      40:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      44:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      48:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      4c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      50:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      54:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      58:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      5c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      60:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      64:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      68:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      6c:	0c 94 74 36 	jmp	0x6ce8	; 0x6ce8 <__bad_interrupt>
      70:	d8 55       	subi	r29, 0x58	; 88
      72:	dd 55       	subi	r29, 0x5D	; 93
      74:	e0 55       	subi	r30, 0x50	; 80
      76:	e3 55       	subi	r30, 0x53	; 83
      78:	e6 55       	subi	r30, 0x56	; 86
      7a:	e9 55       	subi	r30, 0x59	; 89
      7c:	ec 55       	subi	r30, 0x5C	; 92
      7e:	ef 55       	subi	r30, 0x5F	; 95
      80:	f2 55       	subi	r31, 0x52	; 82

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	d5 3b d8 3b 33 3c 37 3c 3f 3c e0 3b e5 3b ea 3b     .;.;3<7<?<.;.;.;
      e0:	47 3c ed 3b f0 3b f3 3b 30 3c                       G<.;.;.;0<

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <default_scores>:
      f6:	00 01 14 0d 01 02 14 0e 02 03 14 0f 03 04 14 10     ................
     106:	04 05 14 11 05 06 14 12 06 00 14 13 00 00           ..............

00000114 <default_handles>:
     114:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     124:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000132 <strMap>:
     132:	32 30 31 35 20 4c 61 77 72 65 6e 63 65 20 42 72     2015 Lawrence Br
     142:	6f 6f 6b 73 00 50 6c 61 79 65 72 20 76 73 20 43     ooks.Player vs C
     152:	50 55 00 50 6c 61 79 65 72 20 76 73 20 50 6c 61     PU.Player vs Pla
     162:	79 65 72 00 54 61 6e 6b 20 52 61 6e 6b 00 45 64     yer.Tank Rank.Ed
     172:	69 74 20 48 61 6e 64 6c 65 00 5f 5f 5f 5f 5f 5f     it Handle.______
     182:	5f 5f 5f 5f 5f 00 7c 00 50 31 00 50 32 00 53 65     _____.|.P1.P2.Se
     192:	6c 65 63 74 20 2d 20 41 00 43 6f 6e 66 69 72 6d     lect - A.Confirm
     1a2:	20 2d 20 41 00 43 61 6e 63 65 6c 20 2d 20 58 00      - A.Cancel - X.
     1b2:	52 65 73 65 74 20 44 65 66 61 75 6c 74 73 20 2d     Reset Defaults -
     1c2:	20 53 4c 20 28 35 73 29 00 45 64 69 74 20 2d 20      SL (5s).Edit - 
     1d2:	55 50 2f 44 4f 57 4e 00 4f 77 6e 73 00 42 79 00     UP/DOWN.Owns.By.
     1e2:	46 69 6e 61 6c 20 53 63 6f 72 65 00 53 75 63 68     Final Score.Such
     1f2:	20 46 61 69 6c 20 20 20 20 20 00 4c 4f 4c 20 20      Fail     .LOL  
     202:	20 20 20 20 20 20 20 20 20 00 42 72 6f 6b 65 6e              .Broken
     212:	20 62 75 74 74 6f 6e 3f 00 54 72 79 20 61 74 20      button?.Try at 
     222:	6c 65 61 73 74 20 20 00 54 6f 6f 20 65 61 73 79     least  .Too easy
     232:	20 20 20 20 20 20 00 2a 59 41 57 4e 2a 20 20 20           .*YAWN*   
     242:	20 20 20 20 20 00 4e 6f 6f 62 20 20 20 20 20 20          .Noob      
     252:	20 20 20 20 00 54 68 61 74 27 73 20 69 74 3f 20         .That's it? 
     262:	20 20 20 00 4e 65 65 64 20 68 65 6c 70 3f 20 20        .Need help?  
     272:	20 20 00 50 66 66 74 20 20 20 20 20 20 20 20 20       .Pfft         
     282:	20 00 20 20 20 20 20 20 20 20 20 20 20 20 20 20      .              
     292:	00 53 63 6f 72 65 3a 00 54 6f 74 61 6c 3a 00 42     .Score:.Total:.B
     2a2:	61 69 6c 20 2d 20 58 00 50 61 75 73 65 64 00 20     ail - X.Paused. 
     2b2:	20 20 42 6f 6f 74 20 43 61 6d 70 20 20 20 00 20       Boot Camp   . 
     2c2:	20 20 56 65 6c 6f 63 69 74 79 20 20 20 20 00 20       Velocity    . 
     2d2:	20 20 42 72 69 63 6b 79 61 72 64 20 20 20 00 20       Brickyard   . 
     2e2:	20 20 20 20 4d 61 7a 65 20 20 20 20 20 20 00 20         Maze      . 
     2f2:	20 20 52 69 63 68 6f 63 68 65 74 20 20 20 00 20       Richochet   . 
     302:	54 68 65 20 48 6f 6e 65 79 20 50 6f 74 20 00 20     The Honey Pot . 
     312:	20 46 6f 63 61 6c 20 50 6f 69 6e 74 20 20 00 49      Focal Point  .I
     322:	74 27 73 20 4e 6f 74 20 46 61 69 72 21 20 00 20     t's Not Fair! . 
     332:	20 4d 75 63 68 20 42 65 74 74 65 72 20 20 00 20      Much Better  . 
     342:	20 20 46 61 63 65 20 4f 66 66 20 20 20 20 00 20       Face Off    . 
     352:	20 20 20 20 54 65 73 74 20 20 20 20 20 20 00            Test      .

00000361 <my_patches>:
     361:	02 53 12 00 00 4f 07 50 07 02 6e 0b 00 00 e3 06     .S...O.P..n.....
     371:	e4 06 02 27 09 00 00 45 02 46 02 02 76 07 00 00     ...'...E.F..v...
     381:	af 01 b0 01 02 74 07 00 00 00 00 01 00 02 72 07     .....t........r.
     391:	00 00 00 00 01 00 02 52 05 00 00 1e 02 1f 02 02     .......R........
     3a1:	e0 03 00 00 70 01 71 01 02 27 09 00 00 45 02 46     ....p.q..'...E.F
     3b1:	02 02 dc 03 00 00 00 00 01 00 02 6e 0b 00 00 e3     ...........n....
     3c1:	06 e4 06 02 d8 03 00 00 00 00 01 00 02 d6 03 00     ................
     3d1:	00 00 00 00 00                                      .....

000003d6 <ad_silence>:
	...

000003d8 <ad_tracks>:
	...

000003da <ad_tank_explode>:
	...

000003dc <ad_splash>:
	...

000003de <ad_rocket>:
	...

000003e0 <ad_navigate>:
     3e0:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     3f0:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     400:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     410:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     420:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     430:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     440:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     450:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     460:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     470:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     480:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     490:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     4a0:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     4b0:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     4c0:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     4d0:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     4e0:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     4f0:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     500:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     510:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     520:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     530:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     540:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000552 <ad_metal>:
     552:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     562:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     572:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     582:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     592:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     5a2:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     5b2:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     5c2:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     5d2:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     5e2:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     5f2:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     602:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     612:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     622:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     632:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     642:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     652:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     662:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     672:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     682:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     692:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     6a2:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     6b2:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     6c2:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     6d2:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     6e2:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     6f2:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     702:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     712:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     722:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     732:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     742:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     752:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     762:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000772 <ad_level_start>:
	...

00000774 <ad_level_clear>:
	...

00000776 <ad_item>:
     776:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     786:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     796:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     7a6:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     7b6:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     7c6:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     7d6:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     7e6:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     7f6:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     806:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     816:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     826:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     836:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     846:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     856:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     866:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     876:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     886:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     896:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     8a6:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     8b6:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     8c6:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     8d6:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     8e6:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     8f6:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     906:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     916:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000927 <ad_cannonball>:
     927:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     937:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     947:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     957:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     967:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     977:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     987:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     997:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     9a7:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     9b7:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     9c7:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     9d7:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     9e7:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     9f7:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     a07:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     a17:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     a27:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     a37:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     a47:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     a57:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     a67:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     a77:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     a87:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     a97:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     aa7:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     ab7:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     ac7:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     ad7:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     ae7:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     af7:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     b07:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     b17:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     b27:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     b37:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     b47:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     b57:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     b67:	ff ff ff ff ff 00 00                                .......

00000b6e <ad_brick_explode>:
     b6e:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     b7e:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     b8e:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     b9e:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     bae:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     bbe:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     bce:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     bde:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     bee:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     bfe:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     c0e:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     c1e:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     c2e:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     c3e:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     c4e:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     c5e:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     c6e:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     c7e:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     c8e:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     c9e:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     cae:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     cbe:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     cce:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     cde:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     cee:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     cfe:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     d0e:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     d1e:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     d2e:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     d3e:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     d4e:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     d5e:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     d6e:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     d7e:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     d8e:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     d9e:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     dae:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     dbe:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     dce:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     dde:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     dee:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     dfe:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     e0e:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     e1e:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     e2e:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     e3e:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     e4e:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     e5e:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     e6e:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     e7e:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     e8e:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     e9e:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     eae:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     ebe:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     ece:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     ede:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     eee:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     efe:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     f0e:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     f1e:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     f2e:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     f3e:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
     f4e:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
     f5e:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
     f6e:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
     f7e:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
     f8e:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
     f9e:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
     fae:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
     fbe:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
     fce:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
     fde:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
     fee:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
     ffe:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    100e:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    101e:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    102e:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    103e:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    104e:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    105e:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    106e:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    107e:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    108e:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    109e:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    10ae:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    10be:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    10ce:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    10de:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    10ee:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    10fe:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    110e:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    111e:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    112e:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    113e:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    114e:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    115e:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    116e:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    117e:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    118e:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    119e:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    11ae:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    11be:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    11ce:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    11de:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    11ee:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    11fe:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    120e:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    121e:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    122e:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    123e:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    124e:	04 04 02 01 00                                      .....

00001253 <ad_banter>:
    1253:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1263:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    1273:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    1283:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    1293:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    12a3:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    12b3:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    12c3:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    12d3:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    12e3:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    12f3:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1303:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1313:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1323:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1333:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1343:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1353:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1363:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    1373:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    1383:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    1393:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    13a3:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    13b3:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    13c3:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    13d3:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    13e3:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    13f3:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1403:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1413:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1423:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1433:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1443:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1453:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1463:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    1473:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    1483:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    1493:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    14a3:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    14b3:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    14c3:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    14d3:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    14e3:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    14f3:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1503:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1513:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1523:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1533:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1543:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1553:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1563:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    1573:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    1583:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    1593:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    15a3:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    15b3:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    15c3:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    15d3:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    15e3:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    15f3:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1603:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1613:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1623:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1633:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1643:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1653:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1663:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    1673:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    1683:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    1693:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    16a3:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    16b3:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    16c3:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    16d3:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    16e3:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    16f3:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    1703:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    1713:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1723:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1733:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1743:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1753:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1763:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    1773:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    1783:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    1793:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    17a3:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    17b3:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    17c3:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    17d3:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    17e3:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    17f3:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    1803:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    1813:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1823:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1833:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1843:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1853:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1863:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    1873:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    1883:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    1893:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    18a3:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    18b3:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    18c3:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    18d3:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    18e3:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    18f3:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    1903:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    1913:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1923:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1933:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1943:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1953:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1963:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1973:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1983:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1993:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000019a4 <level_data>:
    19a4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    19b4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    19dc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19fc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a18:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a38:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    1a48:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    1a58:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    1a68:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1a84:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1a94:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
    1ab0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ac0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1ad0:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
    1aec:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1afc:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1b0c:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 02 02     ...X............
	...
    1b24:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
    1b34:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1b44:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    1b54:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b64:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b74:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1b84:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
    1ba0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1bb0:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1bc0:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    1bd0:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    1be8:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
    1bf8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c18:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c34:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c54:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c70:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c80:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1c90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ca0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1cb0:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ccc:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ce8:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d08:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d24:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d44:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d60:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
    1d78:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1d88:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1d98:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
    1da8:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
    1db8:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1dc8:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
    1dd8:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
    1de8:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
    1df8:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
    1e08:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
    1e18:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
    1e28:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1e38:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
    1e48:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
    1e58:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
    1e68:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
    1e78:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1e88:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    1ea4:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
    1eb4:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ec4:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    1ee8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f04:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f24:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f40:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f60:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f70:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f80:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1f90:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
    1fa0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1fb0:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
    1fc0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1fd0:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
    1fe0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    1ff0:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
    2000:	01 01 02 02 02 01 01 01 01 02 02 02 01 01 01 01     ................
    2010:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
    2020:	02 02 02 01 01 01 01 02 02 02 01 01 01 01 01 01     ................
    2030:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 02 02     ................
    2040:	02 01 01 01 01 02 02 02 01 01 01 01 00 00 00 00     ................
    2050:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
    2060:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
    2070:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
    2080:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
    2090:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    20a0:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    20b0:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
    20c0:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
    20d0:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    20e0:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
    20f0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    2100:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
    2110:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
    2120:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
    2130:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    2140:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
    2150:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
    2160:	02 01 00 00 00 00 01 01 01 01 02 02 02 01 01 01     ................
    2170:	01 02 02 02 01 01 01 01 00 00 00 00 01 02 02 01     ................
    2180:	01 01 01 01 01 01 01 01 02 02 02 01 01 01 01 02     ................
    2190:	02 02 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
    21a0:	01 01 01 01 01 01 02 02 02 01 01 01 01 02 02 02     ................
    21b0:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
    21c0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21d0:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
    21e0:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    21f0:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
    2200:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2210:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
    2220:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2230:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    2240:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
    2250:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2260:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2270:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2280:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
    22a8:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
    22b8:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
    22c8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    22e4:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
    22f4:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
    2304:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
    2314:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
    2324:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
    2334:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
    2344:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2354:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
    2364:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2374:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2398:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
    23a8:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
    23b8:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
    23c8:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
    23d8:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
    23e8:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
    23f8:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2408:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    2418:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2428:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
    2438:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2448:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
    2460:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
    2470:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    2480:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
    2490:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
    24a0:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
    24b0:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
    24c0:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
    24d0:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
    24e0:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
    24fc:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
    250c:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
    251c:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
    2538:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    2548:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2558:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2568:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2578:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    2594:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    25b0:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    25d0:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
	...
    25f0:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    260c:	00 00 00 02 02 00 00 00 00 06 02 01 01 02 05 00     ................
	...
    262c:	00 02 02 00 00 00 00 04 02 01 01 02 03 00 00 00     ................
	...
    2648:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    2668:	00 02 02 00 00 00 00 00 00 04 03 00 00 07 00 00     ................
    2678:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2688:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    2698:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    26b0:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    26c0:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    26d0:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    26e0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    26f0:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2700:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    271c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    272c:	00 00 00 00 07 00 00 06 05 00 00 00 00 00 00 02     ................
    273c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    274c:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    276c:	00 06 02 01 01 02 05 00 00 00 00 02 02 00 00 00     ................
	...
    2788:	00 00 00 04 02 01 01 02 03 00 00 00 00 02 02 00     ................
	...
    27a8:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    27c8:	00 04 03 00 00 00 00 00 00 02 02 05 00 00 00 00     ................
	...
    27ec:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    2808:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2828:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2838:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2848:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2858:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2868:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    2878:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2888:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    2898:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    28a8:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    28b8:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    28c8:	00 01 01 00 00 00 00 00 04 03 00 00 00 00 00 01     ................
    28d8:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    28e8:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    28f8:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    2910:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    2920:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2930:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    2940:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    2950:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    2960:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    2970:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    2980:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    2990:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    29a0:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    29b0:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    29c0:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    29d0:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    29e0:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    29f8:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    2a08:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a18:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2a28:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2a38:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a48:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2a58:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2a68:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2a78:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2a88:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2a98:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2aa8:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2ab8:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2ac8:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2ad8:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2af4:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2b18:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b28:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b38:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b48:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2b58:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2b68:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2b80:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2b90:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2ba0:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2bb0:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2bc0:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2bd0:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2be0:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2bf0:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2c00:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2c10:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2c20:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c44:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c60:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2c70:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2c80:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2c90:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2ca0:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2cb0:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2cc0:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2cd0:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2ce8:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2cf8:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d14:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d34:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2d44:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2d54:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2d64:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d74:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2d84:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2d94:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2da4:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2db4:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2dc4:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2dd4:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2de4:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2df4:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2e04:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e14:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e24:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e34:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2e44:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e60:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e7c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e9c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2eb8:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ec8:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2ed8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ef4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f0c:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    2f1c:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    2f2c:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    2f48:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2f64:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    2f74:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    2f84:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    2fa0:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    2fc0:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    2fdc:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    2ffc:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    3018:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    3040:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    305c:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    306c:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    307c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3098:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30b8:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30d4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    30f4:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3104:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3114:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3124:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    314c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    316c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3188:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31a8:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    31b8:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    31c8:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31e4:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3200:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3218:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    3228:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3238:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    3248:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3258:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    3274:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    3284:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3294:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    32b4:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    32d4:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    32f0:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3310:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    332c:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    334c:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    335c:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    336c:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3388:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33a4:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33c4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    33e0:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    33f0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3400:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3410:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3420:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    343c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3458:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3478:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3494:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34b4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34d0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34f0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    350c:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    3528:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    3548:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3568:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    3580:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    35a4:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35c0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35e0:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    35fc:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    361c:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3638:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3658:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3674:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3694:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36b0:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    36d0:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    36e0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    36f0:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3700:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    3720:	00 04 01 01 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    3740:	04 01 01 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    375c:	00 00 00 04 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    377c:	00 00 04 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    379c:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    37b8:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    37d8:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    37f4:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    3814:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3830:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    3850:	00 02 00 00 00 00 00 02 02 00 00 58 00 00 00 00     ...........X....
	...
    386c:	00 00 00 02 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
	...
    388c:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    38a8:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    38c8:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    38e4:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    3904:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    3920:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    3940:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    395c:	00 00 06 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    3978:	00 00 00 06 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    3998:	06 01 01 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    39b4:	00 06 01 01 01 02 00 00 00 00 00 02 02 02 02 02     ................
    39c4:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    39d4:	02 02 02 02 02 02 02 02 02 02                       ..........

000039de <sprites_data>:
    39de:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    39ee:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    39fe:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3a0e:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3a1e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3a2e:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3a3e:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3a4e:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3a5e:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3a6e:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    3a7e:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    3a8e:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    3a9e:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3aae:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    3abe:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    3ace:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    3ade:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3aee:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3afe:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3b0e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3b1e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3b2e:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3b3e:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3b4e:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3b5e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3b6e:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    3b7e:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3b8e:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3b9e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3bae:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    3bbe:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3bce:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3bde:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bee:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3bfe:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3c0e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c2e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3c3e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3c4e:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3c5e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3c6e:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3c7e:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3c8e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c9e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3cae:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cbe:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3cce:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3cde:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3cee:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3cfe:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d0e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d1e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d2e:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d3e:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d4e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d5e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d6e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d7e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d8e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d9e:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3dae:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3dbe:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3dce:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3dde:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3dee:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3dfe:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3e0e:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3e1e:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    3e2e:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    3e3e:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    3e4e:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    3e5e:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    3e6e:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    3e7e:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    3e8e:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    3e9e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3eae:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3ebe:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3ece:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3ede:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3eee:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3efe:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3f0e:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3f1e:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3f2e:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3f3e:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    3f4e:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    3f5e:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3f6e:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3f7e:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    3f8e:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    3f9e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3fae:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3fbe:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3fce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3fde:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3fee:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3ffe:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    400e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    401e:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    402e:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    403e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    404e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    405e:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    406e:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    407e:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    408e:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    409e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    40ae:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    40be:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    40ce:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    40de:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    40ee:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    40fe:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    410e:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    411e:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    412e:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    413e:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    414e:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    415e:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    416e:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    417e:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    418e:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    419e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    41ae:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    41be:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    41ce:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    41de:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    41ee:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    41fe:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    420e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    421e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    422e:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    423e:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    424e:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    425e:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    426e:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    427e:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    428e:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    429e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    42ae:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    42be:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    42ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    42de:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    42ee:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    42fe:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    430e:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    431e:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    432e:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    433e:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    434e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    435e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    436e:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    437e:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    438e:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    439e:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    43ae:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    43be:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    43ce:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43de:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    43ee:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    43fe:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    440e:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    441e:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    442e:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    443e:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    444e:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    445e:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    446e:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    447e:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    448e:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    449e:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    44ae:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    44be:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    44ce:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    44de:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    44ee:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    44fe:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    450e:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    451e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    452e:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    453e:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    454e:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    455e:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    456e:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    457e:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    458e:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    459e:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    45ae:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    45be:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    45ce:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    45de:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    45ee:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    45fe:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    460e:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    461e:	fe fe fe fe fe fe fe fe fe fe fe 7f fe fe fe fe     ................
    462e:	fe fe 7f 7f fe fe fe fe fe 7f 7f 7f fe fe fe fe     ................
    463e:	ff 7f 7f 7f fe fe fe fe fe ff 7f 7f fe fe fe fe     ................
    464e:	fe fe ff 7f fe fe fe fe fe fe fe ff fe fe fe fe     ................
    465e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    466e:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    467e:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    468e:	fe fe 7f 7f ff fe fe fe fe fe fe ff fe fe fe fe     ................
    469e:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    46ae:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    46be:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    46ce:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

000046de <map_up_arrow>:
    46de:	01 01 33                                            ..3

000046e1 <map_down_arrow>:
    46e1:	01 01 32                                            ..2

000046e4 <map_left_arrow>:
    46e4:	01 01 31                                            ..1

000046e7 <map_right_arrow>:
    46e7:	01 01 30                                            ..0

000046ea <map_rocket_right_1>:
    46ea:	01 01 27                                            ..'

000046ed <map_rocket_right_0>:
    46ed:	01 01 26                                            ..&

000046f0 <map_rocket_up_1>:
    46f0:	01 01 25                                            ..%

000046f3 <map_rocket_up_0>:
    46f3:	01 01 24                                            ..$

000046f6 <map_ball>:
    46f6:	01 01 23                                            ..#

000046f9 <map_explosion_2>:
    46f9:	02 02 0c 0d 0d 0c                                   ......

000046ff <map_explosion_1>:
    46ff:	02 02 0a 0b 19 1a                                   ......

00004705 <map_explosion_0>:
    4705:	02 02 08 09 17 18                                   ......

0000470b <map_tank2_right_1>:
    470b:	02 02 21 22 2e 2f                                   ..!"./

00004711 <map_tank2_right_0>:
    4711:	02 02 1f 20 2c 2d                                   ... ,-

00004717 <map_tank2_up_1>:
    4717:	02 02 1d 1e 2a 2b                                   ....*+

0000471d <map_tank2_up_0>:
    471d:	02 02 1b 1c 28 29                                   ....()

00004723 <map_tank1_right_1>:
    4723:	02 02 06 07 15 16                                   ......

00004729 <map_tank1_right_0>:
    4729:	02 02 04 05 13 14                                   ......

0000472f <map_tank1_up_1>:
    472f:	02 02 02 03 11 12                                   ......

00004735 <map_tank1_up_0>:
    4735:	02 02 00 01 0f 10                                   ......

0000473b <map_tank_blank>:
    473b:	02 02 0e 0e 0e 0e                                   ......

00004741 <map_none>:
    4741:	01 01 0e                                            ...

00004744 <tiles_data>:
	...
    4784:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    4794:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    47a4:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    47b4:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    47c4:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    47d4:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    47e4:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    47f4:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    4804:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    4814:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    4824:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    4834:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    4844:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    4854:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    4864:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    4874:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    4884:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    4894:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    48a4:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    48b4:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    48cc:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    48dc:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    48ec:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4904:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4914:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4924:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4934:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    494c:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    496c:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    4984:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    4994:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    49a4:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    49b4:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    49c4:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    49d4:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    49e4:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    49f4:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4a04:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4a14:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4a24:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4a34:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    4a44:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    4a54:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    4a64:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4a74:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4a84:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4a94:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4aa4:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4ab4:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4ac4:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4ad4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4ae4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4af4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b04:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4b14:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b24:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b34:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4b64:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4b74:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b84:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4b94:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4ba4:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4bb4:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4bc4:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4bd4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4be4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4bf4:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4c04:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4c14:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4c24:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4c34:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4c44:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4c54:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4c64:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4c74:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4c84:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4c94:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4ca4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4cb4:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4cc4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4cd4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4d04:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4d14:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4d24:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4d34:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4d44:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4d54:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4d64:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4d74:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4d84:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4dcc:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4ddc:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4dec:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4dfc:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 00 00     ................
    4e0c:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4e1c:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4e2c:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4e3c:	f0 f0 f0 e1 e1 e1 00 00 00 00 00 00 00 00 00 00     ................
	...
    4e7c:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4eac:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4ebc:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4ecc:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4edc:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4eec:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4efc:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4f0c:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4f1c:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4f2c:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4f3c:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4f4c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f5c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f6c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f7c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f8c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f9c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4fac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4fbc:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4fcc:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4fdc:	00 00 00 00 00 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4fec:	00 00 00 00 e1 e1 e1 e1 00 00 f5 90 f5 90 f5 90     ................
    4ffc:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    500c:	f0 f5 f0 f5 f5 f5 f5 f5 f0 f0 f0 e1 e1 e1 00 00     ................
    501c:	e1 e1 e1 e1 e1 e1 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    502c:	e1 e1 e1 e1 e1 00 00 00 f5 90 f5 90 f5 90 f5 00     ................
    503c:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    504c:	f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00 00 00     ................
	...
    5084:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5094:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50a4:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    50c8:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    50d8:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    50e8:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    50f8:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    5108:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    5118:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    5128:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    5138:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    5148:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5158:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5168:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5178:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5188:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5198:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    51a8:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    51b8:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 f5 90     ((..((((((......
    51c8:	f5 90 f5 90 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5204:	f5 90 f5 90 f5 90 f5 00 00 00 00 00 00 00 00 00     ................
	...
    524c:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    525c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    526c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    527c:	28 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     ((((((((.(((((((
    528c:	7f 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     .(((((((((((((((
    529c:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    52ac:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    52bc:	28 28 28 28 28 28 28 28 90 90 90 e1 e1 e1 f0 f5     ((((((((........
    52cc:	f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1 e1 e1 e1 e1     ................
    52dc:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 00 00     ................
    52ec:	f5 f5 f5 e1 e1 00 00 00 90 90 90 00 00 00 00 00     ................
    52fc:	f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1 e1 90 90 90     ................
    530c:	f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    531c:	e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1 e1 90 90 90     ................
    532c:	00 00 00 e1 e1 f5 f5 f5 00 00 00 00 00 90 90 90     ................
    533c:	00 00 00 00 00 f5 f5 f5 00 00 00 00 00 00 00 00     ................
	...
    538c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    539c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    53b4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    53cc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    53dc:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    540c:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    541c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    542c:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    5444:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    5454:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    5464:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5474:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    548c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    549c:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    54ac:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    54c4:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    54d4:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    54e4:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    54f4:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    550c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    551c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5550:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    5560:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5570:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    558c:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    559c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    55ac:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    55cc:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    55dc:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    55ec:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    560c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    561c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    562c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    566c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    567c:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    569c:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    56ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5710:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    5720:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    5730:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    574c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    575c:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    576c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    578c:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    579c:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    57ac:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    57cc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    57dc:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    57ec:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    580c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    581c:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    582c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    5850:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    5860:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    5870:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    588c:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    589c:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    58ac:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    58cc:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    58dc:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    58ec:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    590c:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    591c:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    592c:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    594c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    595c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    596c:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    598c:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    599c:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    59ac:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    59d4:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    59ec:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5a14:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5a2c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a3c:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5a4c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5a5c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5a6c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    5a94:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5aac:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5ac4:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    5ad4:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    5ae4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5af4:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b0c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b1c:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5b34:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b4c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b5c:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5b6c:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    5b8c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5b9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5bac:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5bcc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bdc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bec:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5c0c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c1c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5c2c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5c4c:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5c5c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c6c:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    5c8c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5c9c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5cac:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5ccc:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5cdc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5cec:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5d0c:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5d1c:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5d2c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5d4c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d5c:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5d6c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5d8c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5d9c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5dac:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5dd0:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5de0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    5df0:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5e0c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5e1c:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5e2c:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5e4c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5e5c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5e6c:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5e8c:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    5e9c:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5eac:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5ecc:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    5edc:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5eec:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5f0c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f1c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5f2c:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5f4c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f5c:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5f6c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5f8c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5f9c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fac:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    5fcc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5fdc:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5fec:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    600c:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    601c:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    602c:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    604c:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    605c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    606c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    608c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    609c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60ac:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    60cc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60dc:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60ec:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    610c:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    611c:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    612c:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    614c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    615c:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    616c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    618c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    619c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    61ac:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    61cc:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    61dc:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    61ec:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    620c:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    621c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    622c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    624c:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    625c:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    626c:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    628c:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    629c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    62ac:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    62d0:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    62e0:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    6334:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    634c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    635c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    636c:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6394:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    63a4:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    63b4:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    63cc:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    63dc:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    63ec:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6414:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6424:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6434:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6450:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6460:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6470:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    6494:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    64a4:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    64b4:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    64d0:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    64e0:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    64f0:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    6514:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6524:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    6534:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    654c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    655c:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    656c:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    658c:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    659c:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65ac:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    65d0:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    65e0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    65f0:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    6600:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    6610:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    6620:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    6630:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    664c:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    665c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    666c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6694:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    66a4:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    66b4:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    66d4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    66e4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    66f4:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6714:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6724:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6734:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6754:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6764:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6774:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6794:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    67a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    67b4:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    67d4:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    67e4:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    67f4:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6814:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6824:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    6834:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    684c:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    685c:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    686c:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    6894:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    68a4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    68b4:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    68d4:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    68e4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    68f4:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6914:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    6924:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    6934:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6954:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    6964:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6974:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6994:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    69a4:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    69b4:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    69d4:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    69e4:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    69f4:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6a0c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6a1c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6a2c:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    6a44:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a54:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a64:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a74:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a8c:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    6a9c:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    6aac:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    6ac8:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    6ad8:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6ae8:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    6af8:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    6b08:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6b18:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6b28:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00006b44 <map_blue_tank>:
    6b44:	02 02 26 27 2e 2f                                   ..&'./

00006b4a <map_green_tank>:
    6b4a:	02 02 13 14 1e 1f                                   ......

00006b50 <map_water>:
    6b50:	01 01 0d                                            ...

00006b53 <map_metal_bl>:
    6b53:	01 01 0c                                            ...

00006b56 <map_metal_tr>:
    6b56:	01 01 0b                                            ...

00006b59 <map_metal_br>:
    6b59:	01 01 0a                                            ...

00006b5c <map_metal_tl>:
    6b5c:	01 01 09                                            ...

00006b5f <map_tile_exp_2>:
    6b5f:	01 01 08                                            ...

00006b62 <map_tile_exp_1>:
    6b62:	01 01 07                                            ...

00006b65 <map_tile_exp_0>:
    6b65:	01 01 06                                            ...

00006b68 <map_rocket_itm>:
    6b68:	01 01 04                                            ...

00006b6b <map_explode_itm>:
    6b6b:	01 01 03                                            ...

00006b6e <map_speed_itm>:
    6b6e:	01 01 02                                            ...

00006b71 <map_metal>:
    6b71:	01 01 05                                            ...

00006b74 <map_brick>:
    6b74:	01 01 01                                            ...

00006b77 <map_splash>:
    6b77:	15 04 0e 0f 0f 0e 0f 0f 0e 10 10 0e 11 12 00 00     ................
    6b87:	00 0e 0f 0f 0e 00 0e 00 15 00 15 00 15 15 16 17     ................
    6b97:	15 18 19 1a 1b 1c 15 1d 00 15 00 15 00 15 00 15     ................
    6ba7:	0f 20 15 00 15 15 21 00 22 23 24 15 25 00 15 00     . ....!."#$.%...
    6bb7:	15 00 15 00 15 00 15 15 00 15 15 28 29 2a 2b 00     ...........()*+.
    6bc7:	15 00 00 15 2c 2d                                   ....,-

00006bcd <map_pause>:
    6bcd:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    6bdd:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    6bed:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    6bfd:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00006c0b <map_tile_none>:
    6c0b:	01 01 00                                            ...

00006c0e <__ctors_end>:
    6c0e:	11 24       	eor	r1, r1
    6c10:	1f be       	out	0x3f, r1	; 63
    6c12:	cf ef       	ldi	r28, 0xFF	; 255
    6c14:	d0 e1       	ldi	r29, 0x10	; 16
    6c16:	de bf       	out	0x3e, r29	; 62
    6c18:	cd bf       	out	0x3d, r28	; 61

00006c1a <__do_copy_data>:
    6c1a:	11 e0       	ldi	r17, 0x01	; 1
    6c1c:	a0 e0       	ldi	r26, 0x00	; 0
    6c1e:	b1 e0       	ldi	r27, 0x01	; 1
    6c20:	e6 e9       	ldi	r30, 0x96	; 150
    6c22:	f7 ec       	ldi	r31, 0xC7	; 199
    6c24:	02 c0       	rjmp	.+4      	; 0x6c2a <__do_copy_data+0x10>
    6c26:	05 90       	lpm	r0, Z+
    6c28:	0d 92       	st	X+, r0
    6c2a:	a6 30       	cpi	r26, 0x06	; 6
    6c2c:	b1 07       	cpc	r27, r17
    6c2e:	d9 f7       	brne	.-10     	; 0x6c26 <__do_copy_data+0xc>

00006c30 <__do_clear_bss>:
    6c30:	1f e0       	ldi	r17, 0x0F	; 15
    6c32:	a6 e0       	ldi	r26, 0x06	; 6
    6c34:	b1 e0       	ldi	r27, 0x01	; 1
    6c36:	01 c0       	rjmp	.+2      	; 0x6c3a <.do_clear_bss_start>

00006c38 <.do_clear_bss_loop>:
    6c38:	1d 92       	st	X+, r1

00006c3a <.do_clear_bss_start>:
    6c3a:	a7 3f       	cpi	r26, 0xF7	; 247
    6c3c:	b1 07       	cpc	r27, r17
    6c3e:	e1 f7       	brne	.-8      	; 0x6c38 <.do_clear_bss_loop>

00006c40 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    6c40:	0e 94 54 3a 	call	0x74a8	; 0x74a8 <wdt_randomize>
#endif

    MCUSR = 0;
    6c44:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6c46:	88 e1       	ldi	r24, 0x18	; 24
    6c48:	0f b6       	in	r0, 0x3f	; 63
    6c4a:	f8 94       	cli
    6c4c:	80 93 60 00 	sts	0x0060, r24
    6c50:	10 92 60 00 	sts	0x0060, r1
    6c54:	0f be       	out	0x3f, r0	; 63

00006c56 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    6c56:	0e 94 08 3b 	call	0x7610	; 0x7610 <isEepromFormatted>
    6c5a:	81 11       	cpse	r24, r1
    6c5c:	02 c0       	rjmp	.+4      	; 0x6c62 <Initialize+0xc>
    6c5e:	0e 94 e6 3a 	call	0x75cc	; 0x75cc <FormatEeprom>

	cli();
    6c62:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    6c64:	81 e0       	ldi	r24, 0x01	; 1
    6c66:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    6c6a:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    6c6e:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    6c72:	10 92 02 0b 	sts	0x0B02, r1
    6c76:	10 92 08 0b 	sts	0x0B08, r1
    6c7a:	10 92 0e 0b 	sts	0x0B0E, r1
    6c7e:	10 92 14 0b 	sts	0x0B14, r1
    6c82:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    6c86:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    6c8a:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    6c8e:	92 e1       	ldi	r25, 0x12	; 18
    6c90:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    6c94:	90 ee       	ldi	r25, 0xE0	; 224
    6c96:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    6c9a:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    6c9e:	94 e1       	ldi	r25, 0x14	; 20
    6ca0:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    6ca4:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    6ca8:	10 92 f4 0a 	sts	0x0AF4, r1
    6cac:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    6cb0:	10 92 f8 0a 	sts	0x0AF8, r1
    6cb4:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    6cb8:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    6cbc:	0e 94 60 47 	call	0x8ec0	; 0x8ec0 <InitializeVideoMode>
    6cc0:	82 e8       	ldi	r24, 0x82	; 130
    6cc2:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6cc4:	fc 01       	movw	r30, r24
    6cc6:	25 91       	lpm	r18, Z+
    6cc8:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6cca:	f9 01       	movw	r30, r18
    6ccc:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    6cce:	30 83       	st	Z, r19
    6cd0:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6cd2:	20 e0       	ldi	r18, 0x00	; 0
    6cd4:	80 3b       	cpi	r24, 0xB0	; 176
    6cd6:	92 07       	cpc	r25, r18
    6cd8:	a9 f7       	brne	.-22     	; 0x6cc4 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6cda:	78 94       	sei
	
	DisplayLogo();
    6cdc:	0e 94 5f 47 	call	0x8ebe	; 0x8ebe <DisplayLogo>
    6ce0:	0e 94 d5 60 	call	0xc1aa	; 0xc1aa <main>
    6ce4:	0c 94 c9 63 	jmp	0xc792	; 0xc792 <_exit>

00006ce8 <__bad_interrupt>:
    6ce8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00006cec <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    6cec:	0c e0       	ldi	r16, 0x0C	; 12
    6cee:	0a 95       	dec	r16
    6cf0:	f1 f7       	brne	.-4      	; 0x6cee <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    6cf2:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    6cf4:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    6cf6:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6cf8:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6cfa:	20 91 bd 0b 	lds	r18, 0x0BBD


		clr r16
    6cfe:	00 27       	eor	r16, r16

00006d00 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    6d00:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    6d02:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6d04:	ac 0f       	add	r26, r28
		adc XH,YH
    6d06:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6d08:	1c 91       	ld	r17, X
		std Z+2,r17
    6d0a:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    6d0c:	02 17       	cp	r16, r18
		brsh noov
    6d0e:	08 f4       	brcc	.+2      	; 0x6d12 <noov>
		mov r17,r16
    6d10:	10 2f       	mov	r17, r16

00006d12 <noov>:
	noov:
		st X,r17
    6d12:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6d14:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6d16:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6d18:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    6d1a:	90 f3       	brcs	.-28     	; 0x6d00 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    6d1c:	05 e2       	ldi	r16, 0x25	; 37

00006d1e <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    6d1e:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    6d20:	1a 95       	dec	r17
		brne .-4
    6d22:	f1 f7       	brne	.-4      	; 0x6d20 <wait_loop+0x2>

		dec r16
    6d24:	0a 95       	dec	r16
		brne wait_loop
    6d26:	d9 f7       	brne	.-10     	; 0x6d1e <wait_loop>

		lds r2,overlay_tile_table
    6d28:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    6d2c:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    6d30:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    6d34:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    6d38:	68 01       	movw	r12, r16
		movw r6,r16
    6d3a:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    6d3c:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    6d3e:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    6d40:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6d42:	4e 01       	movw	r8, r28
		clr r0
    6d44:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6d46:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    6d4a:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    6d4c:	09 f0       	breq	.+2      	; 0x6d50 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    6d4e:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    6d52:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    6d54:	09 f0       	breq	.+2      	; 0x6d58 <wait_loop+0x3a>
		mov r24,r19
    6d56:	83 2f       	mov	r24, r19

		breq .+2
    6d58:	09 f0       	breq	.+2      	; 0x6d5c <wait_loop+0x3e>
		movw r12,r2
    6d5a:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    6d5c:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    6d5e:	a0 2e       	mov	r10, r16
		clr r22
    6d60:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    6d62:	78 e0       	ldi	r23, 0x08	; 8

00006d64 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    6d64:	7d d2       	rcall	.+1274   	; 0x7260 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    6d66:	3c e0       	ldi	r19, 0x0C	; 12
    6d68:	3a 95       	dec	r19
    6d6a:	f1 f7       	brne	.-4      	; 0x6d68 <next_tile_line+0x4>
    6d6c:	00 00       	nop
    6d6e:	00 00       	nop

		;***draw line***
		call render_tile_line
    6d70:	0e 94 e9 36 	call	0x6dd2	; 0x6dd2 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    6d74:	3f e0       	ldi	r19, 0x0F	; 15
    6d76:	3a 95       	dec	r19
    6d78:	f1 f7       	brne	.-4      	; 0x6d76 <next_tile_line+0x12>
    6d7a:	00 00       	nop
    6d7c:	00 00       	nop

		dec r10
    6d7e:	aa 94       	dec	r10
		breq frame_end
    6d80:	a9 f0       	breq	.+42     	; 0x6dac <frame_end>
	
		inc r22
    6d82:	63 95       	inc	r22
		lpm ;3 nop
    6d84:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    6d86:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    6d88:	31 f0       	breq	.+12     	; 0x6d96 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    6d8a:	33 e0       	ldi	r19, 0x03	; 3
    6d8c:	3a 95       	dec	r19
    6d8e:	f1 f7       	brne	.-4      	; 0x6d8c <next_tile_line+0x28>
    6d90:	00 00       	nop
    6d92:	00 00       	nop
		
		rjmp next_tile_line	
    6d94:	e7 cf       	rjmp	.-50     	; 0x6d64 <next_tile_line>

00006d96 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    6d96:	66 27       	eor	r22, r22

		clr r0
    6d98:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    6d9a:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    6d9c:	c3 0f       	add	r28, r19
		adc YH,r0
    6d9e:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    6da0:	8a 95       	dec	r24
		brne .+2
    6da2:	09 f4       	brne	.+2      	; 0x6da6 <next_tile_row+0x10>
		movw YL,r8	;main vram
    6da4:	e4 01       	movw	r28, r8
		brne .+2
    6da6:	09 f4       	brne	.+2      	; 0x6daa <next_tile_row+0x14>
		movw r12,r6	;main tile table
    6da8:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    6daa:	dc cf       	rjmp	.-72     	; 0x6d64 <next_tile_line>

00006dac <frame_end>:

	frame_end:

		WAIT r19,18
    6dac:	36 e0       	ldi	r19, 0x06	; 6
    6dae:	3a 95       	dec	r19
    6db0:	f1 f7       	brne	.-4      	; 0x6dae <frame_end+0x2>

		rcall hsync_pulse ;145
    6db2:	56 d2       	rcall	.+1196   	; 0x7260 <hsync_pulse>
	
		clr r1
    6db4:	11 24       	eor	r1, r1
		call RestoreBackground
    6db6:	0e 94 00 46 	call	0x8c00	; 0x8c00 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6dba:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    6dbe:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    6dc0:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6dc2:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6dc4:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6dc8:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6dca:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    6dce:	11 24       	eor	r1, r1


		ret
    6dd0:	08 95       	ret

00006dd2 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6dd2:	de 01       	movw	r26, r28

		mul r22,r23
    6dd4:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6dd6:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6dd8:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6dda:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    6ddc:	00 0d       	add	r16, r0
		adc r17,r1
    6dde:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    6de0:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6de2:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    6de4:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6de6:	00 0d       	add	r16, r0
		adc r17,r1
    6de8:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6dea:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    6dec:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    6dee:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    6df0:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6df2:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6df4:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6df6:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    6df8:	08 f4       	brcc	.+2      	; 0x6dfc <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6dfa:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    6dfc:	04 0e       	add	r0, r20
	    adc r1,r21
    6dfe:	15 1e       	adc	r1, r21

		movw ZL,r0
    6e00:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6e02:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    6e04:	f0 f0       	brcs	.+60     	; 0x6e42 <ramloop>

00006e06 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6e06:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6e08:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6e0a:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    6e0c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    6e0e:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6e10:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6e12:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6e14:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6e16:	28 31       	cpi	r18, 0x18	; 24
		nop
    6e18:	00 00       	nop

	    lpm r16,Z+
    6e1a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6e1c:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    6e1e:	08 f4       	brcc	.+2      	; 0x6e22 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    6e20:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6e22:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6e24:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6e26:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6e28:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6e2a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    6e2c:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    6e2e:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    6e30:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6e32:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6e34:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6e36:	05 91       	lpm	r16, Z+

		breq end	
    6e38:	31 f1       	breq	.+76     	; 0x6e86 <end>
	    movw ZL,r0   	;copy next tile adress
    6e3a:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6e3c:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    6e3e:	18 f7       	brcc	.-58     	; 0x6e06 <romloop>
	
		rjmp .
    6e40:	00 c0       	rjmp	.+0      	; 0x6e42 <ramloop>

00006e42 <ramloop>:

	ramloop:

	    ld r16,Z+
    6e42:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6e44:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6e46:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6e48:	01 91       	ld	r16, Z+
		nop   
    6e4a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    6e4c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    6e4e:	23 9f       	mul	r18, r19


	    ld r16,Z+
    6e50:	01 91       	ld	r16, Z+
		nop
    6e52:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    6e54:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6e56:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    6e58:	00 c0       	rjmp	.+0      	; 0x6e5a <ramloop+0x18>

	    ld r16,Z+
    6e5a:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    6e5c:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    6e5e:	08 f0       	brcs	.+2      	; 0x6e62 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    6e60:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    6e62:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    6e64:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    6e66:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    6e68:	15 1e       	adc	r1, r21
		rjmp .
    6e6a:	00 c0       	rjmp	.+0      	; 0x6e6c <ramloop+0x2a>
    
		ld r16,Z+		
    6e6c:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    6e6e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    6e70:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    6e72:	00 c0       	rjmp	.+0      	; 0x6e74 <ramloop+0x32>

	    ld r16,Z+	
    6e74:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    6e76:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    6e78:	01 91       	ld	r16, Z+

	    dec r17
    6e7a:	1a 95       	dec	r17
	    breq end
    6e7c:	21 f0       	breq	.+8      	; 0x6e86 <end>
	
		movw ZL,r0
    6e7e:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    6e80:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    6e82:	08 f6       	brcc	.-126    	; 0x6e06 <romloop>
		rjmp ramloop
    6e84:	de cf       	rjmp	.-68     	; 0x6e42 <ramloop>

00006e86 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    6e86:	08 b9       	out	0x08, r16	; 8
		clr r16	
    6e88:	00 27       	eor	r16, r16
		lpm	
    6e8a:	c8 95       	lpm
		nop
    6e8c:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    6e8e:	08 b9       	out	0x08, r16	; 8

		ret
    6e90:	08 95       	ret

00006e92 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    6e92:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    6e94:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    6e98:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    6e9c:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    6e9e:	82 9f       	mul	r24, r18
	add ZL,r0
    6ea0:	e0 0d       	add	r30, r0
	adc ZH,r1
    6ea2:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    6ea4:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6ea6:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    6ea8:	62 9f       	mul	r22, r18
	add XL,r0
    6eaa:	a0 0d       	add	r26, r0
	adc XH,r1
    6eac:	b1 1d       	adc	r27, r1

	clr r0
    6eae:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    6eb0:	05 90       	lpm	r0, Z+
    6eb2:	0d 92       	st	X+, r0
    6eb4:	05 90       	lpm	r0, Z+
    6eb6:	0d 92       	st	X+, r0
    6eb8:	05 90       	lpm	r0, Z+
    6eba:	0d 92       	st	X+, r0
    6ebc:	05 90       	lpm	r0, Z+
    6ebe:	0d 92       	st	X+, r0
    6ec0:	05 90       	lpm	r0, Z+
    6ec2:	0d 92       	st	X+, r0
    6ec4:	05 90       	lpm	r0, Z+
    6ec6:	0d 92       	st	X+, r0
    6ec8:	05 90       	lpm	r0, Z+
    6eca:	0d 92       	st	X+, r0
    6ecc:	05 90       	lpm	r0, Z+
    6ece:	0d 92       	st	X+, r0
    6ed0:	05 90       	lpm	r0, Z+
    6ed2:	0d 92       	st	X+, r0
    6ed4:	05 90       	lpm	r0, Z+
    6ed6:	0d 92       	st	X+, r0
    6ed8:	05 90       	lpm	r0, Z+
    6eda:	0d 92       	st	X+, r0
    6edc:	05 90       	lpm	r0, Z+
    6ede:	0d 92       	st	X+, r0
    6ee0:	05 90       	lpm	r0, Z+
    6ee2:	0d 92       	st	X+, r0
    6ee4:	05 90       	lpm	r0, Z+
    6ee6:	0d 92       	st	X+, r0
    6ee8:	05 90       	lpm	r0, Z+
    6eea:	0d 92       	st	X+, r0
    6eec:	05 90       	lpm	r0, Z+
    6eee:	0d 92       	st	X+, r0
    6ef0:	05 90       	lpm	r0, Z+
    6ef2:	0d 92       	st	X+, r0
    6ef4:	05 90       	lpm	r0, Z+
    6ef6:	0d 92       	st	X+, r0
    6ef8:	05 90       	lpm	r0, Z+
    6efa:	0d 92       	st	X+, r0
    6efc:	05 90       	lpm	r0, Z+
    6efe:	0d 92       	st	X+, r0
    6f00:	05 90       	lpm	r0, Z+
    6f02:	0d 92       	st	X+, r0
    6f04:	05 90       	lpm	r0, Z+
    6f06:	0d 92       	st	X+, r0
    6f08:	05 90       	lpm	r0, Z+
    6f0a:	0d 92       	st	X+, r0
    6f0c:	05 90       	lpm	r0, Z+
    6f0e:	0d 92       	st	X+, r0
    6f10:	05 90       	lpm	r0, Z+
    6f12:	0d 92       	st	X+, r0
    6f14:	05 90       	lpm	r0, Z+
    6f16:	0d 92       	st	X+, r0
    6f18:	05 90       	lpm	r0, Z+
    6f1a:	0d 92       	st	X+, r0
    6f1c:	05 90       	lpm	r0, Z+
    6f1e:	0d 92       	st	X+, r0
    6f20:	05 90       	lpm	r0, Z+
    6f22:	0d 92       	st	X+, r0
    6f24:	05 90       	lpm	r0, Z+
    6f26:	0d 92       	st	X+, r0
    6f28:	05 90       	lpm	r0, Z+
    6f2a:	0d 92       	st	X+, r0
    6f2c:	05 90       	lpm	r0, Z+
    6f2e:	0d 92       	st	X+, r0
    6f30:	05 90       	lpm	r0, Z+
    6f32:	0d 92       	st	X+, r0
    6f34:	05 90       	lpm	r0, Z+
    6f36:	0d 92       	st	X+, r0
    6f38:	05 90       	lpm	r0, Z+
    6f3a:	0d 92       	st	X+, r0
    6f3c:	05 90       	lpm	r0, Z+
    6f3e:	0d 92       	st	X+, r0
    6f40:	05 90       	lpm	r0, Z+
    6f42:	0d 92       	st	X+, r0
    6f44:	05 90       	lpm	r0, Z+
    6f46:	0d 92       	st	X+, r0
    6f48:	05 90       	lpm	r0, Z+
    6f4a:	0d 92       	st	X+, r0
    6f4c:	05 90       	lpm	r0, Z+
    6f4e:	0d 92       	st	X+, r0
    6f50:	05 90       	lpm	r0, Z+
    6f52:	0d 92       	st	X+, r0
    6f54:	05 90       	lpm	r0, Z+
    6f56:	0d 92       	st	X+, r0
    6f58:	05 90       	lpm	r0, Z+
    6f5a:	0d 92       	st	X+, r0
    6f5c:	05 90       	lpm	r0, Z+
    6f5e:	0d 92       	st	X+, r0
    6f60:	05 90       	lpm	r0, Z+
    6f62:	0d 92       	st	X+, r0
    6f64:	05 90       	lpm	r0, Z+
    6f66:	0d 92       	st	X+, r0
    6f68:	05 90       	lpm	r0, Z+
    6f6a:	0d 92       	st	X+, r0
    6f6c:	05 90       	lpm	r0, Z+
    6f6e:	0d 92       	st	X+, r0
    6f70:	05 90       	lpm	r0, Z+
    6f72:	0d 92       	st	X+, r0
    6f74:	05 90       	lpm	r0, Z+
    6f76:	0d 92       	st	X+, r0
    6f78:	05 90       	lpm	r0, Z+
    6f7a:	0d 92       	st	X+, r0
    6f7c:	05 90       	lpm	r0, Z+
    6f7e:	0d 92       	st	X+, r0
    6f80:	05 90       	lpm	r0, Z+
    6f82:	0d 92       	st	X+, r0
    6f84:	05 90       	lpm	r0, Z+
    6f86:	0d 92       	st	X+, r0
    6f88:	05 90       	lpm	r0, Z+
    6f8a:	0d 92       	st	X+, r0
    6f8c:	05 90       	lpm	r0, Z+
    6f8e:	0d 92       	st	X+, r0
    6f90:	05 90       	lpm	r0, Z+
    6f92:	0d 92       	st	X+, r0
    6f94:	05 90       	lpm	r0, Z+
    6f96:	0d 92       	st	X+, r0
    6f98:	05 90       	lpm	r0, Z+
    6f9a:	0d 92       	st	X+, r0
    6f9c:	05 90       	lpm	r0, Z+
    6f9e:	0d 92       	st	X+, r0
    6fa0:	05 90       	lpm	r0, Z+
    6fa2:	0d 92       	st	X+, r0
    6fa4:	05 90       	lpm	r0, Z+
    6fa6:	0d 92       	st	X+, r0
    6fa8:	05 90       	lpm	r0, Z+
    6faa:	0d 92       	st	X+, r0
    6fac:	05 90       	lpm	r0, Z+
    6fae:	0d 92       	st	X+, r0


	clr r1
    6fb0:	11 24       	eor	r1, r1
	ret
    6fb2:	08 95       	ret

00006fb4 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6fb4:	0f 93       	push	r16
	push r17
    6fb6:	1f 93       	push	r17
	push YL
    6fb8:	cf 93       	push	r28
	push YH
    6fba:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    6fbc:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    6fbe:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    6fc0:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    6fc2:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6fc4:	e0 0d       	add	r30, r0
	adc ZH,r1
    6fc6:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6fc8:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6fca:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    6fcc:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    6fce:	8e 9f       	mul	r24, r30
	movw r26,r0
    6fd0:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6fd2:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6fd4:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6fd6:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    6fd8:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    6fda:	00 24       	eor	r0, r0
	add YL,r1
    6fdc:	c1 0d       	add	r28, r1
	adc YH,r0		
    6fde:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    6fe0:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6fe2:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6fe4:	ea 0f       	add	r30, r26
	adc ZH,r27
    6fe6:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6fe8:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    6fea:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    6fec:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    6fee:	69 9f       	mul	r22, r25
	add XL,r0
    6ff0:	a0 0d       	add	r26, r0
	adc XH,r1
    6ff2:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6ff4:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6ff6:	dd 27       	eor	r29, r29

	cpi r20,0	
    6ff8:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6ffa:	51 f4       	brne	.+20     	; 0x7010 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    6ffc:	a2 0f       	add	r26, r18
	adc XH,r1
    6ffe:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    7000:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    7002:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    7004:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    7006:	11 c0       	rjmp	.+34     	; 0x702a <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    7008:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    700a:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    700c:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    700e:	0d c0       	rjmp	.+26     	; 0x702a <x_check_end>

00007010 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    7010:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    7012:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    7014:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    7016:	04 c0       	rjmp	.+8      	; 0x7020 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    7018:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    701a:	e8 0f       	add	r30, r24
	adc ZH,r1	
    701c:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    701e:	05 c0       	rjmp	.+10     	; 0x702a <x_check_end>

00007020 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    7020:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    7022:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    7024:	e2 0f       	add	r30, r18
	adc ZH,r1
    7026:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    7028:	31 97       	sbiw	r30, 0x01	; 1

0000702a <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    702a:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    702c:	41 f4       	brne	.+16     	; 0x703e <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    702e:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    7030:	93 9f       	mul	r25, r19
	add XL,r0
    7032:	a0 0d       	add	r26, r0
	adc XH,r1
    7034:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    7036:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    7038:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    703a:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    703c:	0a c0       	rjmp	.+20     	; 0x7052 <y_check_end>

0000703e <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    703e:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7040:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7042:	63 2f       	mov	r22, r19
	dec r22
    7044:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    7046:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    7048:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    704a:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    704c:	56 9f       	mul	r21, r22
	add ZL,r0
    704e:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7050:	f1 1d       	adc	r31, r1

00007052 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7052:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7054:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    7056:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    7058:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    705a:	00 ff       	sbrs	r16, 0
	clr r23
    705c:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    705e:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7060:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7062:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7064:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    7066:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    7068:	59 1b       	sub	r21, r25

0000706a <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    706a:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    706c:	48 1b       	sub	r20, r24

0000706e <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    706e:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7070:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7072:	2c 93       	st	X, r18
	adiw XL,1
    7074:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    7076:	e6 0f       	add	r30, r22
	adc ZH,r23
    7078:	f7 1f       	adc	r31, r23
	dec r20
    707a:	4a 95       	dec	r20
	brne x_loop
    707c:	c1 f7       	brne	.-16     	; 0x706e <x_loop>

	add ZL,YL		;src+=srcXdiff
    707e:	ec 0f       	add	r30, r28
	adc ZH,YH
    7080:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7082:	a8 0f       	add	r26, r24
	adc XH,r1
    7084:	b1 1d       	adc	r27, r1
	dec r21
    7086:	5a 95       	dec	r21
	brne y_loop
    7088:	81 f7       	brne	.-32     	; 0x706a <y_loop>


	pop YH
    708a:	df 91       	pop	r29
	pop YL
    708c:	cf 91       	pop	r28
	pop r17
    708e:	1f 91       	pop	r17
	pop r16
    7090:	0f 91       	pop	r16
	ret
    7092:	08 95       	ret

00007094 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7094:	0f 92       	push	r0
	push r1
    7096:	1f 92       	push	r1
	push ZL;2
    7098:	ef 93       	push	r30
	push ZH;2
    709a:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    709c:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    709e:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    70a0:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    70a4:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    70a6:	f1 e0       	ldi	r31, 0x01	; 1

000070a8 <latency_loop>:
latency_loop:
	cp ZL,ZH
    70a8:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    70aa:	00 f0       	brcs	.+0      	; 0x70ac <latency_loop+0x4>
	inc ZH
    70ac:	f3 95       	inc	r31
	cpi ZH,10
    70ae:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    70b0:	d8 f3       	brcs	.-10     	; 0x70a8 <latency_loop>
	jmp .
    70b2:	0c 94 5b 38 	jmp	0x70b6	; 0x70b6 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    70b6:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    70ba:	ea 95       	dec	r30
	sts sync_pulse,ZL
    70bc:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    70c0:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    70c4:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    70c6:	57 c0       	rjmp	.+174    	; 0x7176 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    70c8:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    70ca:	98 f0       	brcs	.+38     	; 0x70f2 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    70cc:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    70ce:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    70d2:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    70d4:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    70d8:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    70da:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    70dc:	26 f4       	brtc	.+8      	; 0x70e6 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    70de:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    70e0:	0e 94 41 39 	call	0x7282	; 0x7282 <update_sound>
	rjmp sync_end
    70e4:	b6 c0       	rjmp	.+364    	; 0x7252 <sync_end>

000070e6 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    70e6:	e5 e1       	ldi	r30, 0x15	; 21
    70e8:	ea 95       	dec	r30
    70ea:	f1 f7       	brne	.-4      	; 0x70e8 <sync_pre_eq_no_sound_update+0x2>
    70ec:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    70ee:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    70f0:	b0 c0       	rjmp	.+352    	; 0x7252 <sync_end>

000070f2 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    70f2:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    70f4:	38 f1       	brcs	.+78     	; 0x7144 <sync_post_eq>

	rjmp .
    70f6:	00 c0       	rjmp	.+0      	; 0x70f8 <sync_eq+0x6>
	rjmp .
    70f8:	00 c0       	rjmp	.+0      	; 0x70fa <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    70fa:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    70fc:	e0 fb       	bst	r30, 0
	ldi ZL,4
    70fe:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7100:	16 f4       	brtc	.+4      	; 0x7106 <sync_eq_skip>
	
	call update_sound
    7102:	0e 94 41 39 	call	0x7282	; 0x7282 <update_sound>

00007106 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7106:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7108:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    710c:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    710e:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7112:	9f c0       	rjmp	.+318    	; 0x7252 <sync_end>

00007114 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    7114:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7116:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7118:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    711a:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    711e:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    7120:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    7122:	00 f0       	brcs	.+0      	; 0x7124 <__vector_14+0x10>

	cpi ZL,2
    7124:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    7126:	00 f0       	brcs	.+0      	; 0x7128 <__vector_14+0x14>

	cpi ZL,3
    7128:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    712a:	00 f0       	brcs	.+0      	; 0x712c <__vector_14+0x18>

	cpi ZL,4
    712c:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    712e:	00 f0       	brcs	.+0      	; 0x7130 <__vector_14+0x1c>

	cpi ZL,5
    7130:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    7132:	00 f0       	brcs	.+0      	; 0x7134 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    7134:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    7136:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    7138:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    713c:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    713e:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7140:	ef 91       	pop	r30
	reti
    7142:	18 95       	reti

00007144 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7144:	00 c0       	rjmp	.+0      	; 0x7146 <sync_post_eq+0x2>

	bst ZL,0
    7146:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7148:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    714a:	26 f4       	brtc	.+8      	; 0x7154 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    714c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    714e:	0e 94 41 39 	call	0x7282	; 0x7282 <update_sound>
	rjmp sync_pre_eq_cont
    7152:	05 c0       	rjmp	.+10     	; 0x715e <sync_pre_eq_cont>

00007154 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7154:	e5 e1       	ldi	r30, 0x15	; 21
    7156:	ea 95       	dec	r30
    7158:	f1 f7       	brne	.-4      	; 0x7156 <sync_post_eq_no_sound_update+0x2>
    715a:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    715c:	28 9a       	sbi	0x05, 0	; 5

0000715e <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    715e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    7162:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7164:	09 f0       	breq	.+2      	; 0x7168 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7166:	75 c0       	rjmp	.+234    	; 0x7252 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7168:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    716a:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    716e:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7170:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    7174:	6e c0       	rjmp	.+220    	; 0x7252 <sync_end>

00007176 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7176:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7178:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    717c:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    717e:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7182:	00 c0       	rjmp	.+0      	; 0x7184 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7184:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7186:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7188:	00 c0       	rjmp	.+0      	; 0x718a <sync_hsync+0x14>
	call update_sound
    718a:	0e 94 41 39 	call	0x7282	; 0x7282 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    718e:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7190:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    7194:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7196:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    719a:	ef 17       	cp	r30, r31
	brsh no_render
    719c:	d0 f4       	brcc	.+52     	; 0x71d2 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    719e:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    71a0:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    71a4:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    71a6:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    71aa:	f0 19       	sub	r31, r0
	cp ZL,ZH
    71ac:	ef 17       	cp	r30, r31
	brlo no_render
    71ae:	88 f0       	brcs	.+34     	; 0x71d2 <no_render>

	;push r1-r29
	ldi ZL,29
    71b0:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    71b2:	ff 27       	eor	r31, r31

000071b4 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    71b4:	00 80       	ld	r0, Z
	push r0
    71b6:	0f 92       	push	r0
	dec ZL
    71b8:	ea 95       	dec	r30
	brne push_loop	
    71ba:	e1 f7       	brne	.-8      	; 0x71b4 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    71bc:	06 e0       	ldi	r16, 0x06	; 6
    71be:	0a 95       	dec	r16
    71c0:	f1 f7       	brne	.-4      	; 0x71be <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    71c2:	0e 94 76 36 	call	0x6cec	; 0x6cec <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    71c6:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    71c8:	ff 27       	eor	r31, r31

000071ca <pop_loop>:
pop_loop:
	pop r0
    71ca:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    71cc:	01 92       	st	Z+, r0
	cpi ZL,30
    71ce:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    71d0:	e0 f3       	brcs	.-8      	; 0x71ca <pop_loop>

000071d2 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    71d2:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    71d6:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    71d8:	09 f0       	breq	.+2      	; 0x71dc <no_render+0xa>
	rjmp sync_end
    71da:	3b c0       	rjmp	.+118    	; 0x7252 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    71dc:	2f 93       	push	r18
	push r19
    71de:	3f 93       	push	r19
	push r20
    71e0:	4f 93       	push	r20
	push r21
    71e2:	5f 93       	push	r21
	push r22
    71e4:	6f 93       	push	r22
	push r23
    71e6:	7f 93       	push	r23
	push r24
    71e8:	8f 93       	push	r24
	push r25
    71ea:	9f 93       	push	r25
	push r26
    71ec:	af 93       	push	r26
	push r27
    71ee:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    71f0:	78 94       	sei
	clr r1
    71f2:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    71f4:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    71f6:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    71fa:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    71fc:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    7200:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    7204:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    7208:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    720c:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7210:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    7214:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    7218:	e1 15       	cp	r30, r1
	cpc ZH,r1
    721a:	f1 05       	cpc	r31, r1
	breq .+2 
    721c:	09 f0       	breq	.+2      	; 0x7220 <no_render+0x4e>
	icall
    721e:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7220:	0e 94 d6 3a 	call	0x75ac	; 0x75ac <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7224:	0e 94 6a 48 	call	0x90d4	; 0x90d4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7228:	0e 94 3b 39 	call	0x7276	; 0x7276 <process_music>
	clr r1
    722c:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    722e:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    7232:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    7236:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7238:	f1 05       	cpc	r31, r1
	breq .+2 
    723a:	09 f0       	breq	.+2      	; 0x723e <no_render+0x6c>
	icall
    723c:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    723e:	bf 91       	pop	r27
	pop r26
    7240:	af 91       	pop	r26
	pop r25
    7242:	9f 91       	pop	r25
	pop r24
    7244:	8f 91       	pop	r24
	pop r23
    7246:	7f 91       	pop	r23
	pop r22
    7248:	6f 91       	pop	r22
	pop r21
    724a:	5f 91       	pop	r21
	pop r20
    724c:	4f 91       	pop	r20
	pop r19
    724e:	3f 91       	pop	r19
	pop r18
    7250:	2f 91       	pop	r18

00007252 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7252:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7254:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7256:	ff 91       	pop	r31
	pop ZL
    7258:	ef 91       	pop	r30
	pop r1
    725a:	1f 90       	pop	r1
	pop r0
    725c:	0f 90       	pop	r0
	reti
    725e:	18 95       	reti

00007260 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7260:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7262:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7264:	00 c0       	rjmp	.+0      	; 0x7266 <hsync_pulse+0x6>
	call update_sound
    7266:	0e 94 41 39 	call	0x7282	; 0x7282 <update_sound>

	lds ZL,sync_pulse
    726a:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    726e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7270:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    7274:	08 95       	ret

00007276 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7276:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    727a:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    727c:	0e 94 8c 3d 	call	0x7b18	; 0x7b18 <ProcessMusic>
#endif

	ret
    7280:	08 95       	ret

00007282 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    7282:	0f 93       	push	r16
	push r17
    7284:	1f 93       	push	r17
	push r18
    7286:	2f 93       	push	r18
	push r28
    7288:	cf 93       	push	r28
	push r29
    728a:	df 93       	push	r29

	mov r18,ZL
    728c:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    728e:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    7292:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    7296:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7298:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    729c:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    72a0:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    72a4:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    72a6:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    72a8:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    72ac:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    72b0:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    72b4:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    72b6:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    72b8:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    72ba:	d0 2d       	mov	r29, r0
	nop
    72bc:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    72be:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    72c2:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    72c6:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    72c8:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    72cc:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    72d0:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    72d4:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    72d6:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    72d8:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    72dc:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    72e0:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    72e4:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    72e6:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    72e8:	20 ff       	sbrs	r18, 0
	rjmp .
    72ea:	00 c0       	rjmp	.+0      	; 0x72ec <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    72ec:	01 03       	mulsu	r16, r17
	clr r0
    72ee:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    72f0:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    72f2:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    72f4:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    72f6:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    72fa:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    72fe:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7300:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    7304:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    7308:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    730c:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    730e:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7310:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    7314:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    7318:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    731c:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    731e:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7320:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7322:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7324:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    7328:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    732c:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    7330:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7332:	92 f4       	brpl	.+36     	; 0x7358 <ch4_no_shift>

	lds ZH,tr4_params
    7334:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    7338:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    733a:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    733c:	00 2e       	mov	r0, r16
	lsr r0
    733e:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7340:	00 26       	eor	r0, r16
	bst r0,0
    7342:	00 fa       	bst	r0, 0
	lsr r17
    7344:	16 95       	lsr	r17
	ror r16
    7346:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7348:	16 f9       	bld	r17, 6
	sbrs ZH,0
    734a:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    734c:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    734e:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    7352:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    7356:	03 c0       	rjmp	.+6      	; 0x735e <ch4_end>

00007358 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7358:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    735a:	1a 95       	dec	r17
	brne .-4
    735c:	f1 f7       	brne	.-4      	; 0x735a <ch4_no_shift+0x2>

0000735e <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    735e:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    7362:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7364:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7366:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7368:	21 ff       	sbrs	r18, 1
	rjmp .
    736a:	00 c0       	rjmp	.+0      	; 0x736c <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    736c:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    736e:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7370:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    7374:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7376:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7378:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    737a:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    737c:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    7380:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    7384:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7386:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    738a:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    738e:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    7392:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7394:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    7398:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    739a:	f0 1f       	adc	r31, r16

	movw r16,ZL
    739c:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    739e:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    73a2:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    73a6:	00 19       	sub	r16, r0
	sbc r17,r1
    73a8:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    73aa:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    73ae:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    73b2:	e0 15       	cp	r30, r0
	cpc ZH,r1
    73b4:	f1 05       	cpc	r31, r1
	brlo .+2
    73b6:	08 f0       	brcs	.+2      	; 0x73ba <ch4_end+0x5c>
	movw ZL,r16
    73b8:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    73ba:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    73be:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    73c2:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    73c4:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    73c8:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    73ca:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    73cc:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    73ce:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    73d0:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    73d2:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    73d4:	d0 05       	cpc	r29, r0
	brlt .+2
    73d6:	0c f0       	brlt	.+2      	; 0x73da <ch4_end+0x7c>
	ldi r28,127
    73d8:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    73da:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    73dc:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    73de:	d0 05       	cpc	r29, r0
	brge .+2
    73e0:	0c f4       	brge	.+2      	; 0x73e4 <ch4_end+0x86>
	ldi r28,-128
    73e2:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    73e4:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    73e6:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    73ea:	df 91       	pop	r29
	pop r28
    73ec:	cf 91       	pop	r28
	pop r18
    73ee:	2f 91       	pop	r18
	pop r17
    73f0:	1f 91       	pop	r17
	pop r16
    73f2:	0f 91       	pop	r16
	
	ret
    73f4:	08 95       	ret

000073f6 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    73f6:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    73fa:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    73fe:	08 95       	ret

00007400 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7400:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7402:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7404:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7406:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7408:	68 e1       	ldi	r22, 0x18	; 24

0000740a <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    740a:	6d 93       	st	X+, r22
	sbiw r30,1
    740c:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    740e:	e9 f7       	brne	.-6      	; 0x740a <fill_vram_loop>

	clr r1
    7410:	11 24       	eor	r1, r1

	ret
    7412:	08 95       	ret

00007414 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7414:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    7418:	45 0f       	add	r20, r21
	rjmp SetTile	
    741a:	00 c0       	rjmp	.+0      	; 0x741c <SetTile>

0000741c <SetTile>:

	ret

#else

	clr r25
    741c:	99 27       	eor	r25, r25
	clr r23	
    741e:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7420:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7422:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7424:	08 0e       	add	r0, r24
	adc r1,r25
    7426:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7428:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    742a:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    742c:	a0 0d       	add	r26, r0
	adc XH,r1
    742e:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7430:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    7432:	4c 93       	st	X, r20

	clr r1
    7434:	11 24       	eor	r1, r1

	ret
    7436:	08 95       	ret

00007438 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7438:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    743c:	08 95       	ret

0000743e <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    743e:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    7442:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    7446:	08 95       	ret

00007448 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7448:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    744c:	81 70       	andi	r24, 0x01	; 1
	ret
    744e:	08 95       	ret

00007450 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7450:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    7454:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7456:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    745a:	08 95       	ret

0000745c <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    745c:	88 23       	and	r24, r24
	brne rj_p2
    745e:	29 f4       	brne	.+10     	; 0x746a <rj_p2>
		
	lds r24,joypad1_status_lo
    7460:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    7464:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    7468:	08 95       	ret

0000746a <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    746a:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    746e:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    7472:	08 95       	ret

00007474 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7474:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7476:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7478:	f1 f7       	brne	.-4      	; 0x7476 <WaitUs+0x2>
	nop
    747a:	00 00       	nop
	sbiw r24,1
    747c:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    747e:	d1 f7       	brne	.-12     	; 0x7474 <WaitUs>

	ret
    7480:	08 95       	ret

00007482 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7482:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7484:	fe cf       	rjmp	.-4      	; 0x7482 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7486:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7488:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    748a:	60 bd       	out	0x20, r22	; 32
   cli
    748c:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    748e:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7490:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7492:	78 94       	sei
   ret
    7494:	08 95       	ret

00007496 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7496:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7498:	fe cf       	rjmp	.-4      	; 0x7496 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    749a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    749c:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    749e:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    74a0:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    74a2:	80 b5       	in	r24, 0x20	; 32
   sei
    74a4:	78 94       	sei
   ret
    74a6:	08 95       	ret

000074a8 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    74a8:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    74aa:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    74ae:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    74b2:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    74b4:	80 93 81 00 	sts	0x0081, r24

		cli
    74b8:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    74ba:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    74bc:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    74c0:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    74c2:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    74c6:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    74c8:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    74cc:	90 93 60 00 	sts	0x0060, r25
	
		sei
    74d0:	78 94       	sei

000074d2 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    74d2:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    74d6:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    74d8:	e0 f3       	brcs	.-8      	; 0x74d2 <wait>

		ret
    74da:	08 95       	ret

000074dc <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    74dc:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    74e0:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    74e4:	08 95       	ret

000074e6 <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    74e6:	0f 93       	push	r16
		push r17
    74e8:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    74ea:	0f b7       	in	r16, 0x3f	; 63
		push r16
    74ec:	0f 93       	push	r16

		lds r16,sync_pulse
    74ee:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    74f2:	03 95       	inc	r16
		sts sync_pulse,r16
    74f4:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    74f8:	00 fd       	sbrc	r16, 0
		rjmp 1f
    74fa:	08 c0       	rjmp	.+16     	; 0x750c <__vector_8+0x26>
		lds r17,random_value
    74fc:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7500:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7504:	10 27       	eor	r17, r16
		sts random_value,r17
    7506:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    750a:	07 c0       	rjmp	.+14     	; 0x751a <__vector_8+0x34>
	1:
		lds r17,random_value+1
    750c:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7510:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7514:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7516:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    751a:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    751c:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7520:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7522:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7524:	1f 91       	pop	r17
		pop r16
    7526:	0f 91       	pop	r16
		reti
    7528:	18 95       	reti

0000752a <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    752a:	98 e0       	ldi	r25, 0x08	; 8
    752c:	88 e1       	ldi	r24, 0x18	; 24
    752e:	0f b6       	in	r0, 0x3f	; 63
    7530:	f8 94       	cli
    7532:	a8 95       	wdr
    7534:	80 93 60 00 	sts	0x0060, r24
    7538:	0f be       	out	0x3f, r0	; 63
    753a:	90 93 60 00 	sts	0x0060, r25
	while(1);
    753e:	ff cf       	rjmp	.-2      	; 0x753e <SoftReset+0x14>

00007540 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7540:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7542:	c8 95       	lpm
    7544:	c8 95       	lpm
		Wait200ns();
    7546:	c8 95       	lpm
    7548:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    754a:	12 98       	cbi	0x02, 2	; 2
    754c:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    754e:	80 e0       	ldi	r24, 0x00	; 0
    7550:	90 e0       	ldi	r25, 0x00	; 0
    7552:	20 e0       	ldi	r18, 0x00	; 0
    7554:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7556:	36 95       	lsr	r19
    7558:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    755a:	96 95       	lsr	r25
    755c:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    755e:	c8 95       	lpm
    7560:	c8 95       	lpm
			Wait200ns();
    7562:	c8 95       	lpm
    7564:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7566:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7568:	00 9b       	sbis	0x00, 0	; 0
    756a:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    756c:	01 9b       	sbis	0x00, 1	; 0
    756e:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7570:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7572:	c8 95       	lpm
    7574:	c8 95       	lpm
			Wait200ns();
    7576:	c8 95       	lpm
    7578:	c8 95       	lpm
    757a:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    757c:	61 f7       	brne	.-40     	; 0x7556 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    757e:	30 93 f2 0a 	sts	0x0AF2, r19
    7582:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    7586:	90 93 f6 0a 	sts	0x0AF6, r25
    758a:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    758e:	80 91 f1 0a 	lds	r24, 0x0AF1
    7592:	90 91 f2 0a 	lds	r25, 0x0AF2
    7596:	0f 97       	sbiw	r24, 0x0f	; 15
    7598:	31 f0       	breq	.+12     	; 0x75a6 <ReadButtons+0x66>
    759a:	80 91 f5 0a 	lds	r24, 0x0AF5
    759e:	90 91 f6 0a 	lds	r25, 0x0AF6
    75a2:	0f 97       	sbiw	r24, 0x0f	; 15
    75a4:	11 f4       	brne	.+4      	; 0x75aa <ReadButtons+0x6a>
		SoftReset();
    75a6:	0e 94 95 3a 	call	0x752a	; 0x752a <SoftReset>
    75aa:	08 95       	ret

000075ac <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    75ac:	10 92 3c 0b 	sts	0x0B3C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    75b0:	00 99       	sbic	0x00, 0	; 0
    75b2:	03 c0       	rjmp	.+6      	; 0x75ba <ReadControllers+0xe>
    75b4:	81 e0       	ldi	r24, 0x01	; 1
    75b6:	80 93 3c 0b 	sts	0x0B3C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    75ba:	01 99       	sbic	0x00, 1	; 0
    75bc:	05 c0       	rjmp	.+10     	; 0x75c8 <ReadControllers+0x1c>
    75be:	80 91 3c 0b 	lds	r24, 0x0B3C
    75c2:	82 60       	ori	r24, 0x02	; 2
    75c4:	80 93 3c 0b 	sts	0x0B3C, r24
			
	//read the standard buttons
	ReadButtons();
    75c8:	0c 94 a0 3a 	jmp	0x7540	; 0x7540 <ReadButtons>

000075cc <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    75cc:	cf 93       	push	r28
    75ce:	df 93       	push	r29
    75d0:	c0 e0       	ldi	r28, 0x00	; 0
    75d2:	d0 e0       	ldi	r29, 0x00	; 0
    75d4:	fe 01       	movw	r30, r28
    75d6:	e0 55       	subi	r30, 0x50	; 80
    75d8:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    75da:	64 91       	lpm	r22, Z
    75dc:	ce 01       	movw	r24, r28
    75de:	0e 94 41 3a 	call	0x7482	; 0x7482 <WriteEeprom>
    75e2:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    75e4:	c0 32       	cpi	r28, 0x20	; 32
    75e6:	d1 05       	cpc	r29, r1
    75e8:	a9 f7       	brne	.-22     	; 0x75d4 <FormatEeprom+0x8>
    75ea:	c0 e2       	ldi	r28, 0x20	; 32
    75ec:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    75ee:	6f ef       	ldi	r22, 0xFF	; 255
    75f0:	ce 01       	movw	r24, r28
    75f2:	0e 94 41 3a 	call	0x7482	; 0x7482 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    75f6:	6f ef       	ldi	r22, 0xFF	; 255
    75f8:	ce 01       	movw	r24, r28
    75fa:	01 96       	adiw	r24, 0x01	; 1
    75fc:	0e 94 41 3a 	call	0x7482	; 0x7482 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7600:	a0 96       	adiw	r28, 0x20	; 32
    7602:	c1 15       	cp	r28, r1
    7604:	88 e0       	ldi	r24, 0x08	; 8
    7606:	d8 07       	cpc	r29, r24
    7608:	91 f7       	brne	.-28     	; 0x75ee <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    760a:	df 91       	pop	r29
    760c:	cf 91       	pop	r28
    760e:	08 95       	ret

00007610 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7610:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7612:	80 e0       	ldi	r24, 0x00	; 0
    7614:	90 e0       	ldi	r25, 0x00	; 0
    7616:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    761a:	c8 2f       	mov	r28, r24
    761c:	81 e0       	ldi	r24, 0x01	; 1
    761e:	90 e0       	ldi	r25, 0x00	; 0
    7620:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    7624:	28 2f       	mov	r18, r24
    7626:	30 e0       	ldi	r19, 0x00	; 0
    7628:	32 2f       	mov	r19, r18
    762a:	22 27       	eor	r18, r18
    762c:	2c 0f       	add	r18, r28
    762e:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7630:	81 e0       	ldi	r24, 0x01	; 1
    7632:	2a 35       	cpi	r18, 0x5A	; 90
    7634:	35 45       	sbci	r19, 0x55	; 85
    7636:	09 f0       	breq	.+2      	; 0x763a <isEepromFormatted+0x2a>
    7638:	80 e0       	ldi	r24, 0x00	; 0
}
    763a:	cf 91       	pop	r28
    763c:	08 95       	ret

0000763e <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    763e:	cf 92       	push	r12
    7640:	df 92       	push	r13
    7642:	ef 92       	push	r14
    7644:	ff 92       	push	r15
    7646:	0f 93       	push	r16
    7648:	1f 93       	push	r17
    764a:	cf 93       	push	r28
    764c:	df 93       	push	r29
    764e:	1f 92       	push	r1
    7650:	cd b7       	in	r28, 0x3d	; 61
    7652:	de b7       	in	r29, 0x3e	; 62
    7654:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7656:	0e 94 08 3b 	call	0x7610	; 0x7610 <isEepromFormatted>
    765a:	88 23       	and	r24, r24
    765c:	09 f4       	brne	.+2      	; 0x7660 <EepromWriteBlock+0x22>
    765e:	4d c0       	rjmp	.+154    	; 0x76fa <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7660:	f6 01       	movw	r30, r12
    7662:	80 81       	ld	r24, Z
    7664:	91 81       	ldd	r25, Z+1	; 0x01
    7666:	8f 3f       	cpi	r24, 0xFF	; 255
    7668:	ff ef       	ldi	r31, 0xFF	; 255
    766a:	9f 07       	cpc	r25, r31
    766c:	09 f4       	brne	.+2      	; 0x7670 <EepromWriteBlock+0x32>
    766e:	47 c0       	rjmp	.+142    	; 0x76fe <EepromWriteBlock+0xc0>
    7670:	8a 35       	cpi	r24, 0x5A	; 90
    7672:	95 45       	sbci	r25, 0x55	; 85
    7674:	09 f4       	brne	.+2      	; 0x7678 <EepromWriteBlock+0x3a>
    7676:	43 c0       	rjmp	.+134    	; 0x76fe <EepromWriteBlock+0xc0>
    7678:	00 e2       	ldi	r16, 0x20	; 32
    767a:	10 e0       	ldi	r17, 0x00	; 0
    767c:	f1 2c       	mov	r15, r1
    767e:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7680:	c8 01       	movw	r24, r16
    7682:	49 83       	std	Y+1, r20	; 0x01
    7684:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    7688:	e8 2e       	mov	r14, r24
    768a:	c8 01       	movw	r24, r16
    768c:	01 96       	adiw	r24, 0x01	; 1
    768e:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    7692:	28 2f       	mov	r18, r24
    7694:	30 e0       	ldi	r19, 0x00	; 0
    7696:	32 2f       	mov	r19, r18
    7698:	22 27       	eor	r18, r18
    769a:	c9 01       	movw	r24, r18
    769c:	8e 0d       	add	r24, r14
    769e:	91 1d       	adc	r25, r1
		if(id==block->id){
    76a0:	f6 01       	movw	r30, r12
    76a2:	20 81       	ld	r18, Z
    76a4:	31 81       	ldd	r19, Z+1	; 0x01
    76a6:	49 81       	ldd	r20, Y+1	; 0x01
    76a8:	82 17       	cp	r24, r18
    76aa:	93 07       	cpc	r25, r19
    76ac:	19 f4       	brne	.+6      	; 0x76b4 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    76ae:	ff 20       	and	r15, r15
    76b0:	89 f0       	breq	.+34     	; 0x76d4 <EepromWriteBlock+0x96>
    76b2:	0c c0       	rjmp	.+24     	; 0x76cc <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    76b4:	01 96       	adiw	r24, 0x01	; 1
    76b6:	19 f4       	brne	.+6      	; 0x76be <EepromWriteBlock+0x80>
    76b8:	f1 10       	cpse	r15, r1
    76ba:	01 c0       	rjmp	.+2      	; 0x76be <EepromWriteBlock+0x80>
    76bc:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    76be:	4f 5f       	subi	r20, 0xFF	; 255
    76c0:	00 5e       	subi	r16, 0xE0	; 224
    76c2:	1f 4f       	sbci	r17, 0xFF	; 255
    76c4:	40 34       	cpi	r20, 0x40	; 64
    76c6:	e1 f6       	brne	.-72     	; 0x7680 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    76c8:	ff 20       	and	r15, r15
    76ca:	d9 f0       	breq	.+54     	; 0x7702 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    76cc:	20 e2       	ldi	r18, 0x20	; 32
    76ce:	f2 9e       	mul	r15, r18
    76d0:	80 01       	movw	r16, r0
    76d2:	11 24       	eor	r1, r1
    76d4:	76 01       	movw	r14, r12
    76d6:	80 e2       	ldi	r24, 0x20	; 32
    76d8:	e8 0e       	add	r14, r24
    76da:	f1 1c       	adc	r15, r1
    76dc:	0c 19       	sub	r16, r12
    76de:	1d 09       	sbc	r17, r13
    76e0:	c6 01       	movw	r24, r12
    76e2:	80 0f       	add	r24, r16
    76e4:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    76e6:	f6 01       	movw	r30, r12
    76e8:	61 91       	ld	r22, Z+
    76ea:	6f 01       	movw	r12, r30
    76ec:	0e 94 41 3a 	call	0x7482	; 0x7482 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    76f0:	ce 14       	cp	r12, r14
    76f2:	df 04       	cpc	r13, r15
    76f4:	a9 f7       	brne	.-22     	; 0x76e0 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    76f6:	80 e0       	ldi	r24, 0x00	; 0
    76f8:	05 c0       	rjmp	.+10     	; 0x7704 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    76fa:	84 e0       	ldi	r24, 0x04	; 4
    76fc:	03 c0       	rjmp	.+6      	; 0x7704 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    76fe:	81 e0       	ldi	r24, 0x01	; 1
    7700:	01 c0       	rjmp	.+2      	; 0x7704 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7702:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    7704:	0f 90       	pop	r0
    7706:	df 91       	pop	r29
    7708:	cf 91       	pop	r28
    770a:	1f 91       	pop	r17
    770c:	0f 91       	pop	r16
    770e:	ff 90       	pop	r15
    7710:	ef 90       	pop	r14
    7712:	df 90       	pop	r13
    7714:	cf 90       	pop	r12
    7716:	08 95       	ret

00007718 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    7718:	df 92       	push	r13
    771a:	ef 92       	push	r14
    771c:	ff 92       	push	r15
    771e:	0f 93       	push	r16
    7720:	1f 93       	push	r17
    7722:	cf 93       	push	r28
    7724:	df 93       	push	r29
    7726:	7c 01       	movw	r14, r24
    7728:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    772a:	0e 94 08 3b 	call	0x7610	; 0x7610 <isEepromFormatted>
    772e:	88 23       	and	r24, r24
    7730:	89 f1       	breq	.+98     	; 0x7794 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7732:	8f ef       	ldi	r24, 0xFF	; 255
    7734:	e8 16       	cp	r14, r24
    7736:	f8 06       	cpc	r15, r24
    7738:	79 f1       	breq	.+94     	; 0x7798 <EepromReadBlock+0x80>
    773a:	00 e0       	ldi	r16, 0x00	; 0
    773c:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    773e:	c8 01       	movw	r24, r16
    7740:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    7744:	d8 2e       	mov	r13, r24
    7746:	c8 01       	movw	r24, r16
    7748:	01 96       	adiw	r24, 0x01	; 1
    774a:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    774e:	28 2f       	mov	r18, r24
    7750:	30 e0       	ldi	r19, 0x00	; 0
    7752:	32 2f       	mov	r19, r18
    7754:	22 27       	eor	r18, r18
    7756:	2d 0d       	add	r18, r13
    7758:	31 1d       	adc	r19, r1
		if(id==blockId){
    775a:	2e 15       	cp	r18, r14
    775c:	3f 05       	cpc	r19, r15
    775e:	39 f4       	brne	.+14     	; 0x776e <EepromReadBlock+0x56>
    7760:	7e 01       	movw	r14, r28
    7762:	80 e2       	ldi	r24, 0x20	; 32
    7764:	e8 0e       	add	r14, r24
    7766:	f1 1c       	adc	r15, r1
    7768:	0c 1b       	sub	r16, r28
    776a:	1d 0b       	sbc	r17, r29
    776c:	08 c0       	rjmp	.+16     	; 0x777e <EepromReadBlock+0x66>
    776e:	00 5e       	subi	r16, 0xE0	; 224
    7770:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    7772:	01 15       	cp	r16, r1
    7774:	84 e0       	ldi	r24, 0x04	; 4
    7776:	18 07       	cpc	r17, r24
    7778:	11 f7       	brne	.-60     	; 0x773e <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    777a:	83 e0       	ldi	r24, 0x03	; 3
    777c:	0e c0       	rjmp	.+28     	; 0x779a <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    777e:	ce 01       	movw	r24, r28
    7780:	80 0f       	add	r24, r16
    7782:	91 1f       	adc	r25, r17
    7784:	0e 94 4b 3a 	call	0x7496	; 0x7496 <ReadEeprom>
    7788:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    778a:	ce 15       	cp	r28, r14
    778c:	df 05       	cpc	r29, r15
    778e:	b9 f7       	brne	.-18     	; 0x777e <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    7790:	80 e0       	ldi	r24, 0x00	; 0
    7792:	03 c0       	rjmp	.+6      	; 0x779a <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7794:	84 e0       	ldi	r24, 0x04	; 4
    7796:	01 c0       	rjmp	.+2      	; 0x779a <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7798:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    779a:	df 91       	pop	r29
    779c:	cf 91       	pop	r28
    779e:	1f 91       	pop	r17
    77a0:	0f 91       	pop	r16
    77a2:	ff 90       	pop	r15
    77a4:	ef 90       	pop	r14
    77a6:	df 90       	pop	r13
    77a8:	08 95       	ret

000077aa <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    77aa:	fc 01       	movw	r30, r24
    77ac:	45 87       	std	Z+13, r20	; 0x0d
    77ae:	08 95       	ret

000077b0 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    77b0:	e2 e0       	ldi	r30, 0x02	; 2
    77b2:	fb e0       	ldi	r31, 0x0B	; 11
    77b4:	81 e0       	ldi	r24, 0x01	; 1
    77b6:	91 e0       	ldi	r25, 0x01	; 1
    77b8:	95 8b       	std	Z+21, r25	; 0x15
    77ba:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    77bc:	43 8b       	std	Z+19, r20	; 0x13
    77be:	08 95       	ret

000077c0 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    77c0:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    77c2:	90 81       	ld	r25, Z
    77c4:	9f 75       	andi	r25, 0x5F	; 95
    77c6:	90 83       	st	Z, r25
    77c8:	08 95       	ret

000077ca <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    77ca:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    77cc:	90 81       	ld	r25, Z
    77ce:	90 64       	ori	r25, 0x40	; 64
    77d0:	90 83       	st	Z, r25
    77d2:	08 95       	ret

000077d4 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    77d4:	fc 01       	movw	r30, r24
    77d6:	44 87       	std	Z+12, r20	; 0x0c
    77d8:	08 95       	ret

000077da <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    77da:	fc 01       	movw	r30, r24
    77dc:	47 83       	std	Z+7, r20	; 0x07
    77de:	08 95       	ret

000077e0 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    77e0:	fc 01       	movw	r30, r24
    77e2:	40 87       	std	Z+8, r20	; 0x08
    77e4:	08 95       	ret

000077e6 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    77e6:	1f 93       	push	r17
    77e8:	cf 93       	push	r28
    77ea:	df 93       	push	r29
    77ec:	ec 01       	movw	r28, r24
    77ee:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    77f0:	29 81       	ldd	r18, Y+1	; 0x01
    77f2:	30 e0       	ldi	r19, 0x00	; 0
    77f4:	f9 01       	movw	r30, r18
    77f6:	ee 0f       	add	r30, r30
    77f8:	ff 1f       	adc	r31, r31
    77fa:	e8 5f       	subi	r30, 0xF8	; 248
    77fc:	ff 47       	sbci	r31, 0x7F	; 127
    77fe:	65 91       	lpm	r22, Z+
    7800:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7802:	f9 01       	movw	r30, r18
    7804:	e4 0f       	add	r30, r20
    7806:	f1 1d       	adc	r31, r1
    7808:	47 fd       	sbrc	r20, 7
    780a:	fa 95       	dec	r31
    780c:	ee 0f       	add	r30, r30
    780e:	ff 1f       	adc	r31, r31
    7810:	e8 5f       	subi	r30, 0xF8	; 248
    7812:	ff 47       	sbci	r31, 0x7F	; 127
    7814:	85 91       	lpm	r24, Z+
    7816:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    7818:	86 1b       	sub	r24, r22
    781a:	97 0b       	sbc	r25, r23
    781c:	60 91 44 0b 	lds	r22, 0x0B44
    7820:	70 e0       	ldi	r23, 0x00	; 0
    7822:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
	if(delta==0)delta++;
    7826:	61 15       	cp	r22, r1
    7828:	71 05       	cpc	r23, r1
    782a:	11 f4       	brne	.+4      	; 0x7830 <PatchCommand11+0x4a>
    782c:	61 e0       	ldi	r22, 0x01	; 1
    782e:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    7830:	86 e0       	ldi	r24, 0x06	; 6
    7832:	18 9f       	mul	r17, r24
    7834:	f0 01       	movw	r30, r0
    7836:	11 24       	eor	r1, r1
    7838:	ee 5f       	subi	r30, 0xFE	; 254
    783a:	f4 4f       	sbci	r31, 0xF4	; 244
    783c:	81 81       	ldd	r24, Z+1	; 0x01
    783e:	92 81       	ldd	r25, Z+2	; 0x02
    7840:	86 0f       	add	r24, r22
    7842:	97 1f       	adc	r25, r23
    7844:	92 83       	std	Z+2, r25	; 0x02
    7846:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    7848:	7b 83       	std	Y+3, r23	; 0x03
    784a:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    784c:	88 81       	ld	r24, Y
    784e:	88 60       	ori	r24, 0x08	; 8
    7850:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    7852:	89 81       	ldd	r24, Y+1	; 0x01
    7854:	48 0f       	add	r20, r24
    7856:	4c 83       	std	Y+4, r20	; 0x04
}
    7858:	df 91       	pop	r29
    785a:	cf 91       	pop	r28
    785c:	1f 91       	pop	r17
    785e:	08 95       	ret

00007860 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    7860:	40 93 44 0b 	sts	0x0B44, r20
    7864:	08 95       	ret

00007866 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    7866:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    7868:	64 2f       	mov	r22, r20
    786a:	0c 94 cd 3f 	jmp	0x7f9a	; 0x7f9a <SetMixerWave>

0000786e <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    786e:	fc 01       	movw	r30, r24
    7870:	86 2f       	mov	r24, r22
	track->note+=param;
    7872:	91 81       	ldd	r25, Z+1	; 0x01
    7874:	64 2f       	mov	r22, r20
    7876:	69 0f       	add	r22, r25
    7878:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    787a:	0c 94 b6 3f 	jmp	0x7f6c	; 0x7f6c <SetMixerNote>

0000787e <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    787e:	fc 01       	movw	r30, r24
    7880:	86 2f       	mov	r24, r22
	track->note-=param;
    7882:	91 81       	ldd	r25, Z+1	; 0x01
    7884:	69 2f       	mov	r22, r25
    7886:	64 1b       	sub	r22, r20
    7888:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    788a:	0c 94 b6 3f 	jmp	0x7f6c	; 0x7f6c <SetMixerNote>

0000788e <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    788e:	0f 93       	push	r16
    7890:	1f 93       	push	r17
    7892:	cf 93       	push	r28
    7894:	df 93       	push	r29
    7896:	1f 92       	push	r1
    7898:	cd b7       	in	r28, 0x3d	; 61
    789a:	de b7       	in	r29, 0x3e	; 62
    789c:	8c 01       	movw	r16, r24
    789e:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    78a0:	64 2f       	mov	r22, r20
    78a2:	49 83       	std	Y+1, r20	; 0x01
    78a4:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetMixerNote>
	track->note=param;
    78a8:	49 81       	ldd	r20, Y+1	; 0x01
    78aa:	f8 01       	movw	r30, r16
    78ac:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    78ae:	80 81       	ld	r24, Z
    78b0:	87 7f       	andi	r24, 0xF7	; 247
    78b2:	80 83       	st	Z, r24
}
    78b4:	0f 90       	pop	r0
    78b6:	df 91       	pop	r29
    78b8:	cf 91       	pop	r28
    78ba:	1f 91       	pop	r17
    78bc:	0f 91       	pop	r16
    78be:	08 95       	ret

000078c0 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    78c0:	90 93 b0 0b 	sts	0x0BB0, r25
    78c4:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    78c8:	8f e6       	ldi	r24, 0x6F	; 111
    78ca:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    78ce:	10 92 00 0b 	sts	0x0B00, r1
    78d2:	ed e4       	ldi	r30, 0x4D	; 77
    78d4:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    78d6:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    78d8:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    78da:	28 e1       	ldi	r18, 0x18	; 24
    78dc:	df 01       	movw	r26, r30
    78de:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    78e0:	8c 93       	st	X, r24
    78e2:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    78e4:	1c 92       	st	X, r1
    78e6:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    78e8:	9c 93       	st	X, r25
    78ea:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    78ec:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    78ee:	10 82       	st	Z, r1
    78f0:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    78f2:	2c 93       	st	X, r18
    78f4:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    78f6:	8c 93       	st	X, r24
    78f8:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    78fa:	3b e0       	ldi	r19, 0x0B	; 11
    78fc:	eb 3b       	cpi	r30, 0xBB	; 187
    78fe:	f3 07       	cpc	r31, r19
    7900:	69 f7       	brne	.-38     	; 0x78dc <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    7902:	08 95       	ret

00007904 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    7904:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    7906:	ed 91       	ld	r30, X+
    7908:	fc 91       	ld	r31, X
    790a:	11 97       	sbiw	r26, 0x01	; 1
    790c:	9f 01       	movw	r18, r30
    790e:	2f 5f       	subi	r18, 0xFF	; 255
    7910:	3f 4f       	sbci	r19, 0xFF	; 255
    7912:	11 96       	adiw	r26, 0x01	; 1
    7914:	3c 93       	st	X, r19
    7916:	2e 93       	st	-X, r18
    7918:	e4 91       	lpm	r30, Z
    791a:	e7 fd       	sbrc	r30, 7
    791c:	03 c0       	rjmp	.+6      	; 0x7924 <ReadVarLen+0x20>
    791e:	8e 2f       	mov	r24, r30
    7920:	90 e0       	ldi	r25, 0x00	; 0
    7922:	08 95       	ret
    {
       value &= 0x7F;
    7924:	ef 77       	andi	r30, 0x7F	; 127
    7926:	8e 2f       	mov	r24, r30
    7928:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    792a:	96 95       	lsr	r25
    792c:	98 2f       	mov	r25, r24
    792e:	88 27       	eor	r24, r24
    7930:	97 95       	ror	r25
    7932:	87 95       	ror	r24
    7934:	2f 5f       	subi	r18, 0xFF	; 255
    7936:	3f 4f       	sbci	r19, 0xFF	; 255
    7938:	f9 01       	movw	r30, r18
    793a:	31 97       	sbiw	r30, 0x01	; 1
    793c:	e4 91       	lpm	r30, Z
    793e:	4e 2f       	mov	r20, r30
    7940:	4f 77       	andi	r20, 0x7F	; 127
    7942:	84 0f       	add	r24, r20
    7944:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    7946:	e7 fd       	sbrc	r30, 7
    7948:	f0 cf       	rjmp	.-32     	; 0x792a <ReadVarLen+0x26>
    794a:	2d 93       	st	X+, r18
    794c:	3c 93       	st	X, r19
    }


    return value;
}
    794e:	08 95       	ret

00007950 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    7950:	cf 92       	push	r12
    7952:	df 92       	push	r13
    7954:	ff 92       	push	r15
    7956:	0f 93       	push	r16
    7958:	1f 93       	push	r17
    795a:	cf 93       	push	r28
    795c:	df 93       	push	r29
    795e:	1f 92       	push	r1
    7960:	cd b7       	in	r28, 0x3d	; 61
    7962:	de b7       	in	r29, 0x3e	; 62
    7964:	18 2f       	mov	r17, r24
    7966:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    7968:	c8 2e       	mov	r12, r24
    796a:	d1 2c       	mov	r13, r1
    796c:	36 e1       	ldi	r19, 0x16	; 22
    796e:	83 9f       	mul	r24, r19
    7970:	f0 01       	movw	r30, r0
    7972:	11 24       	eor	r1, r1
    7974:	e1 5c       	subi	r30, 0xC1	; 193
    7976:	f4 4f       	sbci	r31, 0xF4	; 244
    7978:	80 81       	ld	r24, Z
    797a:	f8 2e       	mov	r15, r24
    797c:	ff 1c       	adc	r15, r15
    797e:	ff 24       	eor	r15, r15
    7980:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    7982:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    7984:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    7986:	9f ef       	ldi	r25, 0xFF	; 255
    7988:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    798a:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    798c:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    798e:	87 7b       	andi	r24, 0xB7	; 183
    7990:	80 62       	ori	r24, 0x20	; 32
    7992:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    7994:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    7996:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    7998:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    799a:	13 30       	cpi	r17, 0x03	; 3
    799c:	69 f4       	brne	.+26     	; 0x79b8 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    799e:	f1 10       	cpse	r15, r1
    79a0:	01 c0       	rjmp	.+2      	; 0x79a4 <TriggerCommon+0x54>
    79a2:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    79a4:	81 e0       	ldi	r24, 0x01	; 1
    79a6:	91 e0       	ldi	r25, 0x01	; 1
    79a8:	90 93 17 0b 	sts	0x0B17, r25
    79ac:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    79b0:	81 e0       	ldi	r24, 0x01	; 1
    79b2:	80 93 15 0b 	sts	0x0B15, r24
    79b6:	3c c0       	rjmp	.+120    	; 0x7a30 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    79b8:	14 30       	cpi	r17, 0x04	; 4
    79ba:	09 f0       	breq	.+2      	; 0x79be <TriggerCommon+0x6e>
    79bc:	2f c0       	rjmp	.+94     	; 0x7a1c <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    79be:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    79c2:	80 91 af 0b 	lds	r24, 0x0BAF
    79c6:	90 91 b0 0b 	lds	r25, 0x0BB0
    79ca:	e9 e0       	ldi	r30, 0x09	; 9
    79cc:	6e 9f       	mul	r22, r30
    79ce:	80 0d       	add	r24, r0
    79d0:	91 1d       	adc	r25, r1
    79d2:	11 24       	eor	r1, r1
    79d4:	fc 01       	movw	r30, r24
    79d6:	31 96       	adiw	r30, 0x01	; 1
    79d8:	65 91       	lpm	r22, Z+
    79da:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    79dc:	70 93 1f 0b 	sts	0x0B1F, r23
    79e0:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    79e4:	ac 01       	movw	r20, r24
    79e6:	49 5f       	subi	r20, 0xF9	; 249
    79e8:	5f 4f       	sbci	r21, 0xFF	; 255
    79ea:	fa 01       	movw	r30, r20
    79ec:	a5 91       	lpm	r26, Z+
    79ee:	b4 91       	lpm	r27, Z
    79f0:	05 96       	adiw	r24, 0x05	; 5
    79f2:	fc 01       	movw	r30, r24
    79f4:	85 91       	lpm	r24, Z+
    79f6:	94 91       	lpm	r25, Z
    79f8:	a8 1b       	sub	r26, r24
    79fa:	b9 0b       	sbc	r27, r25
    79fc:	b0 93 21 0b 	sts	0x0B21, r27
    7a00:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    7a04:	fa 01       	movw	r30, r20
    7a06:	85 91       	lpm	r24, Z+
    7a08:	94 91       	lpm	r25, Z
    7a0a:	68 0f       	add	r22, r24
    7a0c:	79 1f       	adc	r23, r25
    7a0e:	70 93 23 0b 	sts	0x0B23, r23
    7a12:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    7a16:	62 2f       	mov	r22, r18
    7a18:	84 e0       	ldi	r24, 0x04	; 4
    7a1a:	08 c0       	rjmp	.+16     	; 0x7a2c <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    7a1c:	60 e0       	ldi	r22, 0x00	; 0
    7a1e:	81 2f       	mov	r24, r17
    7a20:	29 83       	std	Y+1, r18	; 0x01
    7a22:	0e 94 cd 3f 	call	0x7f9a	; 0x7f9a <SetMixerWave>
			SetMixerNote(channel,note);
    7a26:	29 81       	ldd	r18, Y+1	; 0x01
    7a28:	62 2f       	mov	r22, r18
    7a2a:	81 2f       	mov	r24, r17
    7a2c:	0e 94 b6 3f 	call	0x7f6c	; 0x7f6c <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    7a30:	86 e1       	ldi	r24, 0x16	; 22
    7a32:	8c 9d       	mul	r24, r12
    7a34:	f0 01       	movw	r30, r0
    7a36:	8d 9d       	mul	r24, r13
    7a38:	f0 0d       	add	r31, r0
    7a3a:	11 24       	eor	r1, r1
    7a3c:	e1 5c       	subi	r30, 0xC1	; 193
    7a3e:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    7a40:	ff 20       	and	r15, r15
    7a42:	11 f0       	breq	.+4      	; 0x7a48 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    7a44:	07 87       	std	Z+15, r16	; 0x0f
    7a46:	01 c0       	rjmp	.+2      	; 0x7a4a <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    7a48:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7a4a:	e0 91 af 0b 	lds	r30, 0x0BAF
    7a4e:	f0 91 b0 0b 	lds	r31, 0x0BB0
    7a52:	39 e0       	ldi	r19, 0x09	; 9
    7a54:	03 9f       	mul	r16, r19
    7a56:	e0 0d       	add	r30, r0
    7a58:	f1 1d       	adc	r31, r1
    7a5a:	11 24       	eor	r1, r1
    7a5c:	33 96       	adiw	r30, 0x03	; 3
    7a5e:	85 91       	lpm	r24, Z+
    7a60:	94 91       	lpm	r25, Z
	if(pos==NULL){
    7a62:	00 97       	sbiw	r24, 0x00	; 0
    7a64:	59 f4       	brne	.+22     	; 0x7a7c <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    7a66:	86 e1       	ldi	r24, 0x16	; 22
    7a68:	8c 9d       	mul	r24, r12
    7a6a:	f0 01       	movw	r30, r0
    7a6c:	8d 9d       	mul	r24, r13
    7a6e:	f0 0d       	add	r31, r0
    7a70:	11 24       	eor	r1, r1
    7a72:	e1 5c       	subi	r30, 0xC1	; 193
    7a74:	f4 4f       	sbci	r31, 0xF4	; 244
    7a76:	15 8a       	std	Z+21, r1	; 0x15
    7a78:	14 8a       	std	Z+20, r1	; 0x14
    7a7a:	0e c0       	rjmp	.+28     	; 0x7a98 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7a7c:	fc 01       	movw	r30, r24
    7a7e:	24 91       	lpm	r18, Z
    7a80:	36 e1       	ldi	r19, 0x16	; 22
    7a82:	3c 9d       	mul	r19, r12
    7a84:	f0 01       	movw	r30, r0
    7a86:	3d 9d       	mul	r19, r13
    7a88:	f0 0d       	add	r31, r0
    7a8a:	11 24       	eor	r1, r1
    7a8c:	e1 5c       	subi	r30, 0xC1	; 193
    7a8e:	f4 4f       	sbci	r31, 0xF4	; 244
    7a90:	21 8b       	std	Z+17, r18	; 0x11
    7a92:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7a94:	95 8b       	std	Z+21, r25	; 0x15
    7a96:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7a98:	0f 90       	pop	r0
    7a9a:	df 91       	pop	r29
    7a9c:	cf 91       	pop	r28
    7a9e:	1f 91       	pop	r17
    7aa0:	0f 91       	pop	r16
    7aa2:	ff 90       	pop	r15
    7aa4:	df 90       	pop	r13
    7aa6:	cf 90       	pop	r12
    7aa8:	08 95       	ret

00007aaa <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7aaa:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7aac:	a8 2f       	mov	r26, r24
    7aae:	b0 e0       	ldi	r27, 0x00	; 0
    7ab0:	96 e1       	ldi	r25, 0x16	; 22
    7ab2:	89 9f       	mul	r24, r25
    7ab4:	f0 01       	movw	r30, r0
    7ab6:	11 24       	eor	r1, r1
    7ab8:	e1 5c       	subi	r30, 0xC1	; 193
    7aba:	f4 4f       	sbci	r31, 0xF4	; 244
    7abc:	90 81       	ld	r25, Z
    7abe:	95 ff       	sbrs	r25, 5
    7ac0:	02 c0       	rjmp	.+4      	; 0x7ac6 <TriggerNote+0x1c>
    7ac2:	97 fd       	sbrc	r25, 7
    7ac4:	28 c0       	rjmp	.+80     	; 0x7b16 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    7ac6:	31 11       	cpse	r19, r1
    7ac8:	18 c0       	rjmp	.+48     	; 0x7afa <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7aca:	86 e1       	ldi	r24, 0x16	; 22
    7acc:	8a 9f       	mul	r24, r26
    7ace:	f0 01       	movw	r30, r0
    7ad0:	8b 9f       	mul	r24, r27
    7ad2:	f0 0d       	add	r31, r0
    7ad4:	11 24       	eor	r1, r1
    7ad6:	e1 5c       	subi	r30, 0xC1	; 193
    7ad8:	f4 4f       	sbci	r31, 0xF4	; 244
    7ada:	85 85       	ldd	r24, Z+13	; 0x0d
    7adc:	81 11       	cpse	r24, r1
    7ade:	02 c0       	rjmp	.+4      	; 0x7ae4 <TriggerNote+0x3a>
    7ae0:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    7ae2:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    7ae4:	86 e1       	ldi	r24, 0x16	; 22
    7ae6:	8a 9f       	mul	r24, r26
    7ae8:	f0 01       	movw	r30, r0
    7aea:	8b 9f       	mul	r24, r27
    7aec:	f0 0d       	add	r31, r0
    7aee:	11 24       	eor	r1, r1
    7af0:	e1 5c       	subi	r30, 0xC1	; 193
    7af2:	f4 4f       	sbci	r31, 0xF4	; 244
    7af4:	9f 7b       	andi	r25, 0xBF	; 191
    7af6:	90 83       	st	Z, r25
    7af8:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    7afa:	26 e1       	ldi	r18, 0x16	; 22
    7afc:	2a 9f       	mul	r18, r26
    7afe:	f0 01       	movw	r30, r0
    7b00:	2b 9f       	mul	r18, r27
    7b02:	f0 0d       	add	r31, r0
    7b04:	11 24       	eor	r1, r1
    7b06:	e1 5c       	subi	r30, 0xC1	; 193
    7b08:	f4 4f       	sbci	r31, 0xF4	; 244
    7b0a:	9f 77       	andi	r25, 0x7F	; 127
    7b0c:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    7b0e:	24 2f       	mov	r18, r20
    7b10:	43 2f       	mov	r20, r19
    7b12:	0c 94 a8 3c 	jmp	0x7950	; 0x7950 <TriggerCommon>
    7b16:	08 95       	ret

00007b18 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    7b18:	5f 92       	push	r5
    7b1a:	6f 92       	push	r6
    7b1c:	7f 92       	push	r7
    7b1e:	8f 92       	push	r8
    7b20:	9f 92       	push	r9
    7b22:	af 92       	push	r10
    7b24:	bf 92       	push	r11
    7b26:	cf 92       	push	r12
    7b28:	df 92       	push	r13
    7b2a:	ef 92       	push	r14
    7b2c:	ff 92       	push	r15
    7b2e:	0f 93       	push	r16
    7b30:	1f 93       	push	r17
    7b32:	cf 93       	push	r28
    7b34:	df 93       	push	r29
    7b36:	cf e3       	ldi	r28, 0x3F	; 63
    7b38:	db e0       	ldi	r29, 0x0B	; 11
    7b3a:	82 e0       	ldi	r24, 0x02	; 2
    7b3c:	e8 2e       	mov	r14, r24
    7b3e:	8b e0       	ldi	r24, 0x0B	; 11
    7b40:	f8 2e       	mov	r15, r24
    7b42:	d7 01       	movw	r26, r14
    7b44:	9e 01       	movw	r18, r28
    7b46:	40 e0       	ldi	r20, 0x00	; 0
    7b48:	50 e0       	ldi	r21, 0x00	; 0
    7b4a:	ca 01       	movw	r24, r20
    7b4c:	81 5c       	subi	r24, 0xC1	; 193
    7b4e:	94 4f       	sbci	r25, 0xF4	; 244
    7b50:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    7b52:	fc 01       	movw	r30, r24
    7b54:	85 85       	ldd	r24, Z+13	; 0x0d
    7b56:	88 23       	and	r24, r24
    7b58:	91 f0       	breq	.+36     	; 0x7b7e <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    7b5a:	64 85       	ldd	r22, Z+12	; 0x0c
    7b5c:	99 27       	eor	r25, r25
    7b5e:	87 fd       	sbrc	r24, 7
    7b60:	90 95       	com	r25
    7b62:	86 0f       	add	r24, r22
    7b64:	91 1d       	adc	r25, r1
    7b66:	8f 3f       	cpi	r24, 0xFF	; 255
    7b68:	91 05       	cpc	r25, r1
    7b6a:	19 f0       	breq	.+6      	; 0x7b72 <ProcessMusic+0x5a>
    7b6c:	14 f0       	brlt	.+4      	; 0x7b72 <ProcessMusic+0x5a>
    7b6e:	8f ef       	ldi	r24, 0xFF	; 255
    7b70:	90 e0       	ldi	r25, 0x00	; 0
    7b72:	97 ff       	sbrs	r25, 7
    7b74:	02 c0       	rjmp	.+4      	; 0x7b7a <ProcessMusic+0x62>
    7b76:	80 e0       	ldi	r24, 0x00	; 0
    7b78:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7b7a:	f6 01       	movw	r30, r12
    7b7c:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    7b7e:	f9 01       	movw	r30, r18
    7b80:	10 81       	ld	r17, Z
    7b82:	13 ff       	sbrs	r17, 3
    7b84:	29 c0       	rjmp	.+82     	; 0x7bd8 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7b86:	62 81       	ldd	r22, Z+2	; 0x02
    7b88:	73 81       	ldd	r23, Z+3	; 0x03
    7b8a:	11 96       	adiw	r26, 0x01	; 1
    7b8c:	8d 91       	ld	r24, X+
    7b8e:	9c 91       	ld	r25, X
    7b90:	12 97       	sbiw	r26, 0x02	; 2
    7b92:	86 0f       	add	r24, r22
    7b94:	97 1f       	adc	r25, r23
    7b96:	12 96       	adiw	r26, 0x02	; 2
    7b98:	9c 93       	st	X, r25
    7b9a:	8e 93       	st	-X, r24
    7b9c:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    7b9e:	f6 01       	movw	r30, r12
    7ba0:	04 81       	ldd	r16, Z+4	; 0x04
    7ba2:	e0 2f       	mov	r30, r16
    7ba4:	f0 e0       	ldi	r31, 0x00	; 0
    7ba6:	ee 0f       	add	r30, r30
    7ba8:	ff 1f       	adc	r31, r31
    7baa:	e8 5f       	subi	r30, 0xF8	; 248
    7bac:	ff 47       	sbci	r31, 0x7F	; 127
    7bae:	c5 90       	lpm	r12, Z+
    7bb0:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    7bb2:	16 16       	cp	r1, r22
    7bb4:	17 06       	cpc	r1, r23
    7bb6:	24 f4       	brge	.+8      	; 0x7bc0 <ProcessMusic+0xa8>
    7bb8:	8c 15       	cp	r24, r12
    7bba:	9d 05       	cpc	r25, r13
    7bbc:	30 f4       	brcc	.+12     	; 0x7bca <ProcessMusic+0xb2>
    7bbe:	0c c0       	rjmp	.+24     	; 0x7bd8 <ProcessMusic+0xc0>
    7bc0:	67 2b       	or	r22, r23
    7bc2:	51 f0       	breq	.+20     	; 0x7bd8 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7bc4:	c8 16       	cp	r12, r24
    7bc6:	d9 06       	cpc	r13, r25
    7bc8:	38 f0       	brcs	.+14     	; 0x7bd8 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7bca:	12 96       	adiw	r26, 0x02	; 2
    7bcc:	dc 92       	st	X, r13
    7bce:	ce 92       	st	-X, r12
    7bd0:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    7bd2:	17 7f       	andi	r17, 0xF7	; 247
    7bd4:	f9 01       	movw	r30, r18
    7bd6:	10 83       	st	Z, r17
    7bd8:	4a 5e       	subi	r20, 0xEA	; 234
    7bda:	5f 4f       	sbci	r21, 0xFF	; 255
    7bdc:	2a 5e       	subi	r18, 0xEA	; 234
    7bde:	3f 4f       	sbci	r19, 0xFF	; 255
    7be0:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7be2:	4e 36       	cpi	r20, 0x6E	; 110
    7be4:	51 05       	cpc	r21, r1
    7be6:	09 f0       	breq	.+2      	; 0x7bea <ProcessMusic+0xd2>
    7be8:	b0 cf       	rjmp	.-160    	; 0x7b4a <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    7bea:	80 91 00 0b 	lds	r24, 0x0B00
    7bee:	88 23       	and	r24, r24
    7bf0:	09 f4       	brne	.+2      	; 0x7bf4 <ProcessMusic+0xdc>
    7bf2:	cb c0       	rjmp	.+406    	; 0x7d8a <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    7bf4:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    7bf6:	80 91 ad 0b 	lds	r24, 0x0BAD
    7bfa:	90 91 ae 0b 	lds	r25, 0x0BAE
    7bfe:	20 91 b3 0b 	lds	r18, 0x0BB3
    7c02:	30 91 b4 0b 	lds	r19, 0x0BB4
    7c06:	82 17       	cp	r24, r18
    7c08:	93 07       	cpc	r25, r19
    7c0a:	09 f0       	breq	.+2      	; 0x7c0e <ProcessMusic+0xf6>
    7c0c:	b9 c0       	rjmp	.+370    	; 0x7d80 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    7c0e:	20 91 b6 0b 	lds	r18, 0x0BB6
    7c12:	30 91 b7 0b 	lds	r19, 0x0BB7
    7c16:	b9 01       	movw	r22, r18
    7c18:	6f 5f       	subi	r22, 0xFF	; 255
    7c1a:	7f 4f       	sbci	r23, 0xFF	; 255
    7c1c:	70 93 b7 0b 	sts	0x0BB7, r23
    7c20:	60 93 b6 0b 	sts	0x0BB6, r22
    7c24:	f9 01       	movw	r30, r18
    7c26:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    7c28:	4f 3f       	cpi	r20, 0xFF	; 255
    7c2a:	79 f5       	brne	.+94     	; 0x7c8a <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    7c2c:	a9 01       	movw	r20, r18
    7c2e:	4e 5f       	subi	r20, 0xFE	; 254
    7c30:	5f 4f       	sbci	r21, 0xFF	; 255
    7c32:	50 93 b7 0b 	sts	0x0BB7, r21
    7c36:	40 93 b6 0b 	sts	0x0BB6, r20
    7c3a:	fb 01       	movw	r30, r22
    7c3c:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    7c3e:	6f 32       	cpi	r22, 0x2F	; 47
    7c40:	19 f4       	brne	.+6      	; 0x7c48 <ProcessMusic+0x130>
						playSong=false;
    7c42:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    7c46:	9c c0       	rjmp	.+312    	; 0x7d80 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    7c48:	66 30       	cpi	r22, 0x06	; 6
    7c4a:	09 f0       	breq	.+2      	; 0x7c4e <ProcessMusic+0x136>
    7c4c:	8c c0       	rjmp	.+280    	; 0x7d66 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    7c4e:	fa 01       	movw	r30, r20
    7c50:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    7c52:	c9 01       	movw	r24, r18
    7c54:	04 96       	adiw	r24, 0x04	; 4
    7c56:	90 93 b7 0b 	sts	0x0BB7, r25
    7c5a:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    7c5e:	f9 01       	movw	r30, r18
    7c60:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    7c62:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7c64:	e3 35       	cpi	r30, 0x53	; 83
    7c66:	29 f4       	brne	.+10     	; 0x7c72 <ProcessMusic+0x15a>
							loopStart=songPos;
    7c68:	90 93 b9 0b 	sts	0x0BB9, r25
    7c6c:	80 93 b8 0b 	sts	0x0BB8, r24
    7c70:	7a c0       	rjmp	.+244    	; 0x7d66 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    7c72:	e5 34       	cpi	r30, 0x45	; 69
    7c74:	09 f0       	breq	.+2      	; 0x7c78 <ProcessMusic+0x160>
    7c76:	77 c0       	rjmp	.+238    	; 0x7d66 <ProcessMusic+0x24e>
							songPos=loopStart;
    7c78:	80 91 b8 0b 	lds	r24, 0x0BB8
    7c7c:	90 91 b9 0b 	lds	r25, 0x0BB9
    7c80:	90 93 b7 0b 	sts	0x0BB7, r25
    7c84:	80 93 b6 0b 	sts	0x0BB6, r24
    7c88:	6e c0       	rjmp	.+220    	; 0x7d66 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7c8a:	47 fd       	sbrc	r20, 7
    7c8c:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    7c90:	90 91 b1 0b 	lds	r25, 0x0BB1
    7c94:	89 2f       	mov	r24, r25
    7c96:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7c98:	47 ff       	sbrs	r20, 7
    7c9a:	08 c0       	rjmp	.+16     	; 0x7cac <ProcessMusic+0x194>
    7c9c:	2e 5f       	subi	r18, 0xFE	; 254
    7c9e:	3f 4f       	sbci	r19, 0xFF	; 255
    7ca0:	30 93 b7 0b 	sts	0x0BB7, r19
    7ca4:	20 93 b6 0b 	sts	0x0BB6, r18
    7ca8:	fb 01       	movw	r30, r22
    7caa:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7cac:	90 7f       	andi	r25, 0xF0	; 240
    7cae:	90 3b       	cpi	r25, 0xB0	; 176
    7cb0:	e1 f0       	breq	.+56     	; 0x7cea <ProcessMusic+0x1d2>
    7cb2:	90 3c       	cpi	r25, 0xC0	; 192
    7cb4:	09 f4       	brne	.+2      	; 0x7cb8 <ProcessMusic+0x1a0>
    7cb6:	51 c0       	rjmp	.+162    	; 0x7d5a <ProcessMusic+0x242>
    7cb8:	90 39       	cpi	r25, 0x90	; 144
    7cba:	09 f0       	breq	.+2      	; 0x7cbe <ProcessMusic+0x1a6>
    7cbc:	54 c0       	rjmp	.+168    	; 0x7d66 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    7cbe:	e0 91 b6 0b 	lds	r30, 0x0BB6
    7cc2:	f0 91 b7 0b 	lds	r31, 0x0BB7
    7cc6:	9f 01       	movw	r18, r30
    7cc8:	2f 5f       	subi	r18, 0xFF	; 255
    7cca:	3f 4f       	sbci	r19, 0xFF	; 255
    7ccc:	30 93 b7 0b 	sts	0x0BB7, r19
    7cd0:	20 93 b6 0b 	sts	0x0BB6, r18
    7cd4:	24 91       	lpm	r18, Z
    7cd6:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    7cd8:	18 9f       	mul	r17, r24
    7cda:	f0 01       	movw	r30, r0
    7cdc:	11 24       	eor	r1, r1
    7cde:	e1 5c       	subi	r30, 0xC1	; 193
    7ce0:	f4 4f       	sbci	r31, 0xF4	; 244
    7ce2:	66 85       	ldd	r22, Z+14	; 0x0e
    7ce4:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
    7ce8:	3e c0       	rjmp	.+124    	; 0x7d66 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    7cea:	e0 91 b6 0b 	lds	r30, 0x0BB6
    7cee:	f0 91 b7 0b 	lds	r31, 0x0BB7
    7cf2:	9f 01       	movw	r18, r30
    7cf4:	2f 5f       	subi	r18, 0xFF	; 255
    7cf6:	3f 4f       	sbci	r19, 0xFF	; 255
    7cf8:	30 93 b7 0b 	sts	0x0BB7, r19
    7cfc:	20 93 b6 0b 	sts	0x0BB6, r18
    7d00:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    7d02:	47 30       	cpi	r20, 0x07	; 7
    7d04:	49 f4       	brne	.+18     	; 0x7d18 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    7d06:	18 9f       	mul	r17, r24
    7d08:	d0 01       	movw	r26, r0
    7d0a:	11 24       	eor	r1, r1
    7d0c:	a1 5c       	subi	r26, 0xC1	; 193
    7d0e:	b4 4f       	sbci	r27, 0xF4	; 244
    7d10:	ee 0f       	add	r30, r30
    7d12:	1a 96       	adiw	r26, 0x0a	; 10
    7d14:	ec 93       	st	X, r30
    7d16:	27 c0       	rjmp	.+78     	; 0x7d66 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    7d18:	4b 30       	cpi	r20, 0x0B	; 11
    7d1a:	49 f4       	brne	.+18     	; 0x7d2e <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    7d1c:	18 9f       	mul	r17, r24
    7d1e:	d0 01       	movw	r26, r0
    7d20:	11 24       	eor	r1, r1
    7d22:	a1 5c       	subi	r26, 0xC1	; 193
    7d24:	b4 4f       	sbci	r27, 0xF4	; 244
    7d26:	ee 0f       	add	r30, r30
    7d28:	19 96       	adiw	r26, 0x09	; 9
    7d2a:	ec 93       	st	X, r30
    7d2c:	1c c0       	rjmp	.+56     	; 0x7d66 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    7d2e:	4c 35       	cpi	r20, 0x5C	; 92
    7d30:	49 f4       	brne	.+18     	; 0x7d44 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    7d32:	18 9f       	mul	r17, r24
    7d34:	d0 01       	movw	r26, r0
    7d36:	11 24       	eor	r1, r1
    7d38:	a1 5c       	subi	r26, 0xC1	; 193
    7d3a:	b4 4f       	sbci	r27, 0xF4	; 244
    7d3c:	ee 0f       	add	r30, r30
    7d3e:	17 96       	adiw	r26, 0x07	; 7
    7d40:	ec 93       	st	X, r30
    7d42:	11 c0       	rjmp	.+34     	; 0x7d66 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7d44:	44 36       	cpi	r20, 0x64	; 100
    7d46:	79 f4       	brne	.+30     	; 0x7d66 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    7d48:	18 9f       	mul	r17, r24
    7d4a:	d0 01       	movw	r26, r0
    7d4c:	11 24       	eor	r1, r1
    7d4e:	a1 5c       	subi	r26, 0xC1	; 193
    7d50:	b4 4f       	sbci	r27, 0xF4	; 244
    7d52:	ee 0f       	add	r30, r30
    7d54:	18 96       	adiw	r26, 0x08	; 8
    7d56:	ec 93       	st	X, r30
    7d58:	06 c0       	rjmp	.+12     	; 0x7d66 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7d5a:	18 9f       	mul	r17, r24
    7d5c:	f0 01       	movw	r30, r0
    7d5e:	11 24       	eor	r1, r1
    7d60:	e1 5c       	subi	r30, 0xC1	; 193
    7d62:	f4 4f       	sbci	r31, 0xF4	; 244
    7d64:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7d66:	86 eb       	ldi	r24, 0xB6	; 182
    7d68:	9b e0       	ldi	r25, 0x0B	; 11
    7d6a:	0e 94 82 3c 	call	0x7904	; 0x7904 <ReadVarLen>
    7d6e:	90 93 b4 0b 	sts	0x0BB4, r25
    7d72:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    7d76:	10 92 ae 0b 	sts	0x0BAE, r1
    7d7a:	10 92 ad 0b 	sts	0x0BAD, r1
    7d7e:	3b cf       	rjmp	.-394    	; 0x7bf6 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    7d80:	01 96       	adiw	r24, 0x01	; 1
    7d82:	90 93 ae 0b 	sts	0x0BAE, r25
    7d86:	80 93 ad 0b 	sts	0x0BAD, r24
    7d8a:	95 e4       	ldi	r25, 0x45	; 69
    7d8c:	a9 2e       	mov	r10, r25
    7d8e:	9b e0       	ldi	r25, 0x0B	; 11
    7d90:	b9 2e       	mov	r11, r25
    7d92:	01 e5       	ldi	r16, 0x51	; 81
    7d94:	1b e0       	ldi	r17, 0x0B	; 11
    7d96:	20 e5       	ldi	r18, 0x50	; 80
    7d98:	c2 2e       	mov	r12, r18
    7d9a:	2b e0       	ldi	r18, 0x0B	; 11
    7d9c:	d2 2e       	mov	r13, r18
    7d9e:	32 e5       	ldi	r19, 0x52	; 82
    7da0:	83 2e       	mov	r8, r19
    7da2:	3b e0       	ldi	r19, 0x0B	; 11
    7da4:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7da6:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7da8:	66 24       	eor	r6, r6
    7daa:	6a 94       	dec	r6
    7dac:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    7dae:	88 81       	ld	r24, Y
    7db0:	86 fd       	sbrc	r24, 6
    7db2:	43 c0       	rjmp	.+134    	; 0x7e3a <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    7db4:	8c 89       	ldd	r24, Y+20	; 0x14
    7db6:	9d 89       	ldd	r25, Y+21	; 0x15
    7db8:	89 2b       	or	r24, r25
    7dba:	09 f4       	brne	.+2      	; 0x7dbe <ProcessMusic+0x2a6>
    7dbc:	3a c0       	rjmp	.+116    	; 0x7e32 <ProcessMusic+0x31a>
    7dbe:	d8 01       	movw	r26, r16
    7dc0:	9c 91       	ld	r25, X
    7dc2:	f6 01       	movw	r30, r12
    7dc4:	80 81       	ld	r24, Z
    7dc6:	98 17       	cp	r25, r24
    7dc8:	08 f4       	brcc	.+2      	; 0x7dcc <ProcessMusic+0x2b4>
    7dca:	33 c0       	rjmp	.+102    	; 0x7e32 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7dcc:	d8 01       	movw	r26, r16
    7dce:	9c 91       	ld	r25, X
    7dd0:	f6 01       	movw	r30, r12
    7dd2:	80 81       	ld	r24, Z
    7dd4:	98 13       	cpse	r25, r24
    7dd6:	2d c0       	rjmp	.+90     	; 0x7e32 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    7dd8:	ec 89       	ldd	r30, Y+20	; 0x14
    7dda:	fd 89       	ldd	r31, Y+21	; 0x15
    7ddc:	af 01       	movw	r20, r30
    7dde:	4f 5f       	subi	r20, 0xFF	; 255
    7de0:	5f 4f       	sbci	r21, 0xFF	; 255
    7de2:	5d 8b       	std	Y+21, r21	; 0x15
    7de4:	4c 8b       	std	Y+20, r20	; 0x14
    7de6:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    7de8:	8f 3f       	cpi	r24, 0xFF	; 255
    7dea:	31 f4       	brne	.+12     	; 0x7df8 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    7dec:	88 81       	ld	r24, Y
    7dee:	8f 77       	andi	r24, 0x7F	; 127
    7df0:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    7df2:	1d 8a       	std	Y+21, r1	; 0x15
    7df4:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    7df6:	1d c0       	rjmp	.+58     	; 0x7e32 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    7df8:	32 96       	adiw	r30, 0x02	; 2
    7dfa:	fd 8b       	std	Y+21, r31	; 0x15
    7dfc:	ec 8b       	std	Y+20, r30	; 0x14
    7dfe:	fa 01       	movw	r30, r20
    7e00:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    7e02:	e8 2f       	mov	r30, r24
    7e04:	f0 e0       	ldi	r31, 0x00	; 0
    7e06:	ee 0f       	add	r30, r30
    7e08:	ff 1f       	adc	r31, r31
    7e0a:	e0 53       	subi	r30, 0x30	; 48
    7e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    7e0e:	25 91       	lpm	r18, Z+
    7e10:	34 91       	lpm	r19, Z
    7e12:	65 2d       	mov	r22, r5
    7e14:	ce 01       	movw	r24, r28
    7e16:	f9 01       	movw	r30, r18
    7e18:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    7e1a:	ec 89       	ldd	r30, Y+20	; 0x14
    7e1c:	fd 89       	ldd	r31, Y+21	; 0x15
    7e1e:	cf 01       	movw	r24, r30
    7e20:	01 96       	adiw	r24, 0x01	; 1
    7e22:	9d 8b       	std	Y+21, r25	; 0x15
    7e24:	8c 8b       	std	Y+20, r24	; 0x14
    7e26:	e4 91       	lpm	r30, Z
    7e28:	d6 01       	movw	r26, r12
    7e2a:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    7e2c:	f8 01       	movw	r30, r16
    7e2e:	10 82       	st	Z, r1
    7e30:	cd cf       	rjmp	.-102    	; 0x7dcc <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    7e32:	d8 01       	movw	r26, r16
    7e34:	8c 91       	ld	r24, X
    7e36:	8f 5f       	subi	r24, 0xFF	; 255
    7e38:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    7e3a:	98 81       	ld	r25, Y
    7e3c:	95 ff       	sbrs	r25, 5
    7e3e:	6c c0       	rjmp	.+216    	; 0x7f18 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    7e40:	f4 01       	movw	r30, r8
    7e42:	80 81       	ld	r24, Z
    7e44:	8f 3f       	cpi	r24, 0xFF	; 255
    7e46:	11 f0       	breq	.+4      	; 0x7e4c <ProcessMusic+0x334>
				track->patchPlayingTime++;
    7e48:	8f 5f       	subi	r24, 0xFF	; 255
    7e4a:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7e4c:	97 fd       	sbrc	r25, 7
    7e4e:	04 c0       	rjmp	.+8      	; 0x7e58 <ProcessMusic+0x340>
    7e50:	f8 01       	movw	r30, r16
    7e52:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7e54:	90 81       	ld	r25, Z
    7e56:	01 c0       	rjmp	.+2      	; 0x7e5a <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7e58:	9f ef       	ldi	r25, 0xFF	; 255
    7e5a:	f8 01       	movw	r30, r16
    7e5c:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    7e5e:	80 81       	ld	r24, Z
    7e60:	88 23       	and	r24, r24
    7e62:	09 f4       	brne	.+2      	; 0x7e66 <ProcessMusic+0x34e>
    7e64:	4e c0       	rjmp	.+156    	; 0x7f02 <ProcessMusic+0x3ea>
    7e66:	31 96       	adiw	r30, 0x01	; 1
    7e68:	50 81       	ld	r21, Z
    7e6a:	55 23       	and	r21, r21
    7e6c:	09 f4       	brne	.+2      	; 0x7e70 <ProcessMusic+0x358>
    7e6e:	49 c0       	rjmp	.+146    	; 0x7f02 <ProcessMusic+0x3ea>
    7e70:	99 23       	and	r25, r25
    7e72:	09 f4       	brne	.+2      	; 0x7e76 <ProcessMusic+0x35e>
    7e74:	46 c0       	rjmp	.+140    	; 0x7f02 <ProcessMusic+0x3ea>
    7e76:	40 91 b2 0b 	lds	r20, 0x0BB2
    7e7a:	44 23       	and	r20, r20
    7e7c:	09 f4       	brne	.+2      	; 0x7e80 <ProcessMusic+0x368>
    7e7e:	41 c0       	rjmp	.+130    	; 0x7f02 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    7e80:	89 9f       	mul	r24, r25
    7e82:	c0 01       	movw	r24, r0
    7e84:	11 24       	eor	r1, r1
    7e86:	93 95       	inc	r25
				uVol>>=8;
    7e88:	89 2f       	mov	r24, r25
    7e8a:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7e8c:	58 9f       	mul	r21, r24
    7e8e:	90 01       	movw	r18, r0
    7e90:	59 9f       	mul	r21, r25
    7e92:	30 0d       	add	r19, r0
    7e94:	11 24       	eor	r1, r1
    7e96:	c9 01       	movw	r24, r18
    7e98:	93 95       	inc	r25
				uVol>>=8;
    7e9a:	89 2f       	mov	r24, r25
    7e9c:	99 27       	eor	r25, r25
    7e9e:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    7ea0:	50 81       	ld	r21, Z
    7ea2:	58 9f       	mul	r21, r24
    7ea4:	90 01       	movw	r18, r0
    7ea6:	59 9f       	mul	r21, r25
    7ea8:	30 0d       	add	r19, r0
    7eaa:	11 24       	eor	r1, r1
    7eac:	33 95       	inc	r19
				uVol>>=8;
    7eae:	23 2f       	mov	r18, r19
    7eb0:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    7eb2:	42 9f       	mul	r20, r18
    7eb4:	c0 01       	movw	r24, r0
    7eb6:	43 9f       	mul	r20, r19
    7eb8:	90 0d       	add	r25, r0
    7eba:	11 24       	eor	r1, r1
    7ebc:	93 95       	inc	r25
				uVol>>=8;
    7ebe:	89 2f       	mov	r24, r25
    7ec0:	99 27       	eor	r25, r25
    7ec2:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7ec4:	20 81       	ld	r18, Z
    7ec6:	22 23       	and	r18, r18
    7ec8:	f1 f0       	breq	.+60     	; 0x7f06 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7eca:	d5 01       	movw	r26, r10
    7ecc:	ec 91       	ld	r30, X
    7ece:	f0 e0       	ldi	r31, 0x00	; 0
    7ed0:	e0 50       	subi	r30, 0x00	; 0
    7ed2:	fe 47       	sbci	r31, 0x7E	; 126
    7ed4:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    7ed6:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    7ed8:	2e 9f       	mul	r18, r30
    7eda:	f0 01       	movw	r30, r0
    7edc:	11 24       	eor	r1, r1
    7ede:	f3 95       	inc	r31
					tVol>>=8;
    7ee0:	ef 2f       	mov	r30, r31
    7ee2:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7ee4:	a3 01       	movw	r20, r6
    7ee6:	4e 1b       	sub	r20, r30
    7ee8:	5f 0b       	sbc	r21, r31
    7eea:	48 9f       	mul	r20, r24
    7eec:	90 01       	movw	r18, r0
    7eee:	49 9f       	mul	r20, r25
    7ef0:	30 0d       	add	r19, r0
    7ef2:	58 9f       	mul	r21, r24
    7ef4:	30 0d       	add	r19, r0
    7ef6:	11 24       	eor	r1, r1
    7ef8:	c9 01       	movw	r24, r18
    7efa:	93 95       	inc	r25
					uVol>>=8;
    7efc:	89 2f       	mov	r24, r25
    7efe:	99 27       	eor	r25, r25
    7f00:	02 c0       	rjmp	.+4      	; 0x7f06 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    7f02:	80 e0       	ldi	r24, 0x00	; 0
    7f04:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    7f06:	f5 01       	movw	r30, r10
    7f08:	30 81       	ld	r19, Z
    7f0a:	f8 01       	movw	r30, r16
    7f0c:	3a 97       	sbiw	r30, 0x0a	; 10
    7f0e:	20 81       	ld	r18, Z
    7f10:	23 0f       	add	r18, r19
    7f12:	d5 01       	movw	r26, r10
    7f14:	2c 93       	st	X, r18
    7f16:	02 c0       	rjmp	.+4      	; 0x7f1c <ProcessMusic+0x404>

		}else{
			uVol=0;
    7f18:	80 e0       	ldi	r24, 0x00	; 0
    7f1a:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    7f1c:	f7 01       	movw	r30, r14
    7f1e:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    7f20:	53 94       	inc	r5
    7f22:	66 96       	adiw	r28, 0x16	; 22
    7f24:	f6 e0       	ldi	r31, 0x06	; 6
    7f26:	ef 0e       	add	r14, r31
    7f28:	f1 1c       	adc	r15, r1
    7f2a:	86 e1       	ldi	r24, 0x16	; 22
    7f2c:	a8 0e       	add	r10, r24
    7f2e:	b1 1c       	adc	r11, r1
    7f30:	0a 5e       	subi	r16, 0xEA	; 234
    7f32:	1f 4f       	sbci	r17, 0xFF	; 255
    7f34:	96 e1       	ldi	r25, 0x16	; 22
    7f36:	c9 0e       	add	r12, r25
    7f38:	d1 1c       	adc	r13, r1
    7f3a:	a6 e1       	ldi	r26, 0x16	; 22
    7f3c:	8a 0e       	add	r8, r26
    7f3e:	91 1c       	adc	r9, r1
    7f40:	b5 e0       	ldi	r27, 0x05	; 5
    7f42:	5b 12       	cpse	r5, r27
    7f44:	34 cf       	rjmp	.-408    	; 0x7dae <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7f46:	df 91       	pop	r29
    7f48:	cf 91       	pop	r28
    7f4a:	1f 91       	pop	r17
    7f4c:	0f 91       	pop	r16
    7f4e:	ff 90       	pop	r15
    7f50:	ef 90       	pop	r14
    7f52:	df 90       	pop	r13
    7f54:	cf 90       	pop	r12
    7f56:	bf 90       	pop	r11
    7f58:	af 90       	pop	r10
    7f5a:	9f 90       	pop	r9
    7f5c:	8f 90       	pop	r8
    7f5e:	7f 90       	pop	r7
    7f60:	6f 90       	pop	r6
    7f62:	5f 90       	pop	r5
    7f64:	08 95       	ret

00007f66 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    7f66:	80 93 b2 0b 	sts	0x0BB2, r24
    7f6a:	08 95       	ret

00007f6c <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7f6c:	99 27       	eor	r25, r25
	clr r23
    7f6e:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7f70:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7f72:	09 f4       	brne	.+2      	; 0x7f76 <set_note_waves>
		ret
    7f74:	08 95       	ret

00007f76 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    7f76:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    7f78:	f0 e8       	ldi	r31, 0x80	; 128
	lsl r22
    7f7a:	66 0f       	add	r22, r22
	rol r23
    7f7c:	77 1f       	adc	r23, r23
	add ZL,r22
    7f7e:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7f80:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7f82:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    7f84:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    7f86:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7f88:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7f8a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7f8c:	28 9f       	mul	r18, r24
	add ZL,r0
    7f8e:	e0 0d       	add	r30, r0
	adc ZH,r1
    7f90:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7f92:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    7f94:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    7f96:	11 24       	eor	r1, r1
	

	ret
    7f98:	08 95       	ret

00007f9a <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7f9a:	99 27       	eor	r25, r25
	clr r23
    7f9c:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7f9e:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    7fa0:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    7fa2:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    7fa4:	28 9f       	mul	r18, r24
	add ZL,r0
    7fa6:	e0 0d       	add	r30, r0
	adc ZH,r1
    7fa8:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7faa:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7fac:	31 f4       	brne	.+12     	; 0x7fba <smw1>
	lds r22,tr4_params
    7fae:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    7fb2:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    7fb4:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    7fb8:	0b c0       	rjmp	.+22     	; 0x7fd0 <esmw>

00007fba <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7fba:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7fbc:	31 f4       	brne	.+12     	; 0x7fca <smw2>
	lds r22,tr4_params
    7fbe:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    7fc2:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    7fc4:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    7fc8:	03 c0       	rjmp	.+6      	; 0x7fd0 <esmw>

00007fca <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7fca:	72 e8       	ldi	r23, 0x82	; 130
	add r23,r22
    7fcc:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7fce:	75 83       	std	Z+5, r23	; 0x05

00007fd0 <esmw>:

esmw:
	clr r1	
    7fd0:	11 24       	eor	r1, r1
	ret
    7fd2:	08 95       	ret
	...

00008000 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8000:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8002:	80 93 01 0b 	sts	0x0B01, r24
	ret
    8006:	08 95       	ret

00008008 <steptable>:
    8008:	22 00       	.word	0x0022	; ????
    800a:	24 00       	.word	0x0024	; ????
    800c:	26 00       	.word	0x0026	; ????
    800e:	28 00       	.word	0x0028	; ????
    8010:	2b 00       	.word	0x002b	; ????
    8012:	2d 00       	.word	0x002d	; ????
    8014:	30 00       	.word	0x0030	; ????
    8016:	33 00       	.word	0x0033	; ????
    8018:	36 00       	.word	0x0036	; ????
    801a:	39 00       	.word	0x0039	; ????
    801c:	3d 00       	.word	0x003d	; ????
    801e:	40 00       	.word	0x0040	; ????
    8020:	44 00       	.word	0x0044	; ????
    8022:	48 00       	.word	0x0048	; ????
    8024:	4c 00       	.word	0x004c	; ????
    8026:	51 00       	.word	0x0051	; ????
    8028:	56 00       	.word	0x0056	; ????
    802a:	5b 00       	.word	0x005b	; ????
    802c:	60 00       	.word	0x0060	; ????
    802e:	66 00       	.word	0x0066	; ????
    8030:	6c 00       	.word	0x006c	; ????
    8032:	73 00       	.word	0x0073	; ????
    8034:	79 00       	.word	0x0079	; ????
    8036:	81 00       	.word	0x0081	; ????
    8038:	88 00       	.word	0x0088	; ????
    803a:	90 00       	.word	0x0090	; ????
    803c:	99 00       	.word	0x0099	; ????
    803e:	a2 00       	.word	0x00a2	; ????
    8040:	ac 00       	.word	0x00ac	; ????
    8042:	b6 00       	.word	0x00b6	; ????
    8044:	c1 00       	.word	0x00c1	; ????
    8046:	cc 00       	.word	0x00cc	; ????
    8048:	d8 00       	.word	0x00d8	; ????
    804a:	e5 00       	.word	0x00e5	; ????
    804c:	f3 00       	.word	0x00f3	; ????
    804e:	01 01       	movw	r0, r2
    8050:	10 01       	movw	r2, r0
    8052:	21 01       	movw	r4, r2
    8054:	32 01       	movw	r6, r4
    8056:	44 01       	movw	r8, r8
    8058:	57 01       	movw	r10, r14
    805a:	6c 01       	movw	r12, r24
    805c:	81 01       	movw	r16, r2
    805e:	98 01       	movw	r18, r16
    8060:	b0 01       	movw	r22, r0
    8062:	ca 01       	movw	r24, r20
    8064:	e5 01       	movw	r28, r10
    8066:	02 02       	muls	r16, r18
    8068:	21 02       	muls	r18, r17
    806a:	41 02       	muls	r20, r17
    806c:	64 02       	muls	r22, r20
    806e:	88 02       	muls	r24, r24
    8070:	ae 02       	muls	r26, r30
    8072:	d7 02       	muls	r29, r23
    8074:	03 03       	mulsu	r16, r19
    8076:	30 03       	mulsu	r19, r16
    8078:	61 03       	mulsu	r22, r17
    807a:	94 03       	fmuls	r17, r20
    807c:	cb 03       	fmulsu	r20, r19
    807e:	05 04       	cpc	r0, r5
    8080:	42 04       	cpc	r4, r2
    8082:	83 04       	cpc	r8, r3
    8084:	c7 04       	cpc	r12, r7
    8086:	10 05       	cpc	r17, r0
    8088:	5d 05       	cpc	r21, r13
    808a:	af 05       	cpc	r26, r15
    808c:	05 06       	cpc	r0, r21
    808e:	61 06       	cpc	r6, r17
    8090:	c2 06       	cpc	r12, r18
    8092:	29 07       	cpc	r18, r25
    8094:	96 07       	cpc	r25, r22
    8096:	09 08       	sbc	r0, r9
    8098:	83 08       	sbc	r8, r3
    809a:	05 09       	sbc	r16, r5
    809c:	8e 09       	sbc	r24, r14
    809e:	20 0a       	sbc	r2, r16
    80a0:	ba 0a       	sbc	r11, r26
    80a2:	5d 0b       	sbc	r21, r29
    80a4:	0a 0c       	add	r0, r10
    80a6:	c1 0c       	add	r12, r1
    80a8:	84 0d       	add	r24, r4
    80aa:	51 0e       	add	r5, r17
    80ac:	2b 0f       	add	r18, r27
    80ae:	12 10       	cpse	r1, r2
    80b0:	07 11       	cpse	r16, r7
    80b2:	0a 12       	cpse	r0, r26
    80b4:	1d 13       	cpse	r17, r29
    80b6:	40 14       	cp	r4, r0
    80b8:	74 15       	cp	r23, r4
    80ba:	ba 16       	cp	r11, r26
    80bc:	14 18       	sub	r1, r4
    80be:	83 19       	sub	r24, r3
    80c0:	07 1b       	sub	r16, r23
    80c2:	a3 1c       	adc	r10, r3
    80c4:	57 1e       	adc	r5, r23
    80c6:	24 20       	and	r2, r4
    80c8:	0e 22       	and	r0, r30
    80ca:	14 24       	eor	r1, r4
    80cc:	39 26       	eor	r3, r25
    80ce:	7f 28       	or	r7, r15
    80d0:	e8 2a       	or	r14, r24
    80d2:	75 2d       	mov	r23, r5
    80d4:	29 30       	cpi	r18, 0x09	; 9
    80d6:	06 33       	cpi	r16, 0x36	; 54
    80d8:	0f 36       	cpi	r16, 0x6F	; 111
    80da:	45 39       	cpi	r20, 0x95	; 149
    80dc:	ad 3c       	cpi	r26, 0xCD	; 205
    80de:	49 40       	sbci	r20, 0x09	; 9
    80e0:	1b 44       	sbci	r17, 0x4B	; 75
    80e2:	28 48       	sbci	r18, 0x88	; 136
    80e4:	73 4c       	sbci	r23, 0xC3	; 195
    80e6:	fe 50       	subi	r31, 0x0E	; 14
    80e8:	cf 55       	subi	r28, 0x5F	; 95
    80ea:	ea 5a       	subi	r30, 0xAA	; 170
    80ec:	51 60       	ori	r21, 0x01	; 1
    80ee:	0c 66       	ori	r16, 0x6C	; 108
    80f0:	1d 6c       	ori	r17, 0xCD	; 205
    80f2:	8b 72       	andi	r24, 0x2B	; 43
    80f4:	5a 79       	andi	r21, 0x9A	; 154
    80f6:	92 80       	ldd	r9, Z+2	; 0x02
    80f8:	37 88       	ldd	r3, Z+23	; 0x17
    80fa:	50 90 e5 98 	lds	r5, 0x98E5
    80fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8100:	9f ab       	std	Y+55, r25	; 0x37
    8102:	d3 b5       	in	r29, 0x23	; 35
    8104:	a3 c0       	rjmp	.+326    	; 0x824c <waves+0x4c>
	...

00008200 <waves>:
    8200:	00 03       	mulsu	r16, r16
    8202:	06 09       	sbc	r16, r6
    8204:	0c 10       	cpse	r0, r12
    8206:	13 16       	cp	r1, r19
    8208:	19 1c       	adc	r1, r9
    820a:	1f 22       	and	r1, r31
    820c:	25 28       	or	r2, r5
    820e:	2b 2e       	mov	r2, r27
    8210:	31 33       	cpi	r19, 0x31	; 49
    8212:	36 39       	cpi	r19, 0x96	; 150
    8214:	3c 3f       	cpi	r19, 0xFC	; 252
    8216:	41 44       	sbci	r20, 0x41	; 65
    8218:	47 49       	sbci	r20, 0x97	; 151
    821a:	4c 4e       	sbci	r20, 0xEC	; 236
    821c:	51 53       	subi	r21, 0x31	; 49
    821e:	55 58       	subi	r21, 0x85	; 133
    8220:	5a 5c       	subi	r21, 0xCA	; 202
    8222:	5e 60       	ori	r21, 0x0E	; 14
    8224:	62 64       	ori	r22, 0x42	; 66
    8226:	66 68       	ori	r22, 0x86	; 134
    8228:	6a 6b       	ori	r22, 0xBA	; 186
    822a:	6d 6f       	ori	r22, 0xFD	; 253
    822c:	70 71       	andi	r23, 0x10	; 16
    822e:	73 74       	andi	r23, 0x43	; 67
    8230:	75 76       	andi	r23, 0x65	; 101
    8232:	78 79       	andi	r23, 0x98	; 152
    8234:	7a 7a       	andi	r23, 0xAA	; 170
    8236:	7b 7c       	andi	r23, 0xCB	; 203
    8238:	7d 7d       	andi	r23, 0xDD	; 221
    823a:	7e 7e       	andi	r23, 0xEE	; 238
    823c:	7e 7f       	andi	r23, 0xFE	; 254
    823e:	7f 7f       	andi	r23, 0xFF	; 255
    8240:	7f 7f       	andi	r23, 0xFF	; 255
    8242:	7f 7f       	andi	r23, 0xFF	; 255
    8244:	7e 7e       	andi	r23, 0xEE	; 238
    8246:	7e 7d       	andi	r23, 0xDE	; 222
    8248:	7d 7c       	andi	r23, 0xCD	; 205
    824a:	7b 7a       	andi	r23, 0xAB	; 171
    824c:	7a 79       	andi	r23, 0x9A	; 154
    824e:	78 76       	andi	r23, 0x68	; 104
    8250:	75 74       	andi	r23, 0x45	; 69
    8252:	73 71       	andi	r23, 0x13	; 19
    8254:	70 6f       	ori	r23, 0xF0	; 240
    8256:	6d 6b       	ori	r22, 0xBD	; 189
    8258:	6a 68       	ori	r22, 0x8A	; 138
    825a:	66 64       	ori	r22, 0x46	; 70
    825c:	62 60       	ori	r22, 0x02	; 2
    825e:	5e 5c       	subi	r21, 0xCE	; 206
    8260:	5a 58       	subi	r21, 0x8A	; 138
    8262:	55 53       	subi	r21, 0x35	; 53
    8264:	51 4e       	sbci	r21, 0xE1	; 225
    8266:	4c 49       	sbci	r20, 0x9C	; 156
    8268:	47 44       	sbci	r20, 0x47	; 71
    826a:	41 3f       	cpi	r20, 0xF1	; 241
    826c:	3c 39       	cpi	r19, 0x9C	; 156
    826e:	36 33       	cpi	r19, 0x36	; 54
    8270:	31 2e       	mov	r3, r17
    8272:	2b 28       	or	r2, r11
    8274:	25 22       	and	r2, r21
    8276:	1f 1c       	adc	r1, r15
    8278:	19 16       	cp	r1, r25
    827a:	13 10       	cpse	r1, r3
    827c:	0c 09       	sbc	r16, r12
    827e:	06 03       	mulsu	r16, r22
    8280:	00 fd       	sbrc	r16, 0
    8282:	fa f7       	brpl	.-2      	; 0x8282 <waves+0x82>
    8284:	f4 f0       	brlt	.+60     	; 0x82c2 <waves+0xc2>
    8286:	ed ea       	ldi	r30, 0xAD	; 173
    8288:	e7 e4       	ldi	r30, 0x47	; 71
    828a:	e1 de       	rcall	.-574    	; 0x804e <steptable+0x46>
    828c:	db d8       	rcall	.-3658   	; 0x7444 <SetTileTable+0x6>
    828e:	d5 d2       	rcall	.+1450   	; 0x883a <waves+0x63a>
    8290:	cf cd       	rjmp	.-1122   	; 0x7e30 <ProcessMusic+0x318>
    8292:	ca c7       	rjmp	.+3988   	; 0x9228 <LBPrintStr+0x58>
    8294:	c4 c1       	rjmp	.+904    	; 0x861e <waves+0x41e>
    8296:	bf bc       	out	0x2f, r11	; 47
    8298:	b9 b7       	in	r27, 0x39	; 57
    829a:	b4 b2       	in	r11, 0x14	; 20
    829c:	af ad       	ldd	r26, Y+63	; 0x3f
    829e:	ab a8       	ldd	r10, Y+51	; 0x33
    82a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    82a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    82a4:	9e 9c       	mul	r9, r14
    82a6:	9a 98       	cbi	0x13, 2	; 19
    82a8:	96 95       	lsr	r25
    82aa:	93 91       	.word	0x9193	; ????
    82ac:	90 8f       	std	Z+24, r25	; 0x18
    82ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    82b0:	8b 8a       	std	Y+19, r8	; 0x13
    82b2:	88 87       	std	Y+8, r24	; 0x08
    82b4:	86 86       	std	Z+14, r8	; 0x0e
    82b6:	85 84       	ldd	r8, Z+13	; 0x0d
    82b8:	83 83       	std	Z+3, r24	; 0x03
    82ba:	82 82       	std	Z+2, r8	; 0x02
    82bc:	82 81       	ldd	r24, Z+2	; 0x02
    82be:	81 81       	ldd	r24, Z+1	; 0x01
    82c0:	81 81       	ldd	r24, Z+1	; 0x01
    82c2:	81 81       	ldd	r24, Z+1	; 0x01
    82c4:	82 82       	std	Z+2, r8	; 0x02
    82c6:	82 83       	std	Z+2, r24	; 0x02
    82c8:	83 84       	ldd	r8, Z+11	; 0x0b
    82ca:	85 86       	std	Z+13, r8	; 0x0d
    82cc:	86 87       	std	Z+14, r24	; 0x0e
    82ce:	88 8a       	std	Y+16, r8	; 0x10
    82d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    82d2:	8d 8f       	std	Y+29, r24	; 0x1d
    82d4:	90 91 93 95 	lds	r25, 0x9593
    82d8:	96 98       	cbi	0x12, 6	; 18
    82da:	9a 9c       	mul	r9, r10
    82dc:	9e a0       	ldd	r9, Y+38	; 0x26
    82de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    82e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    82e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    82e4:	af b2       	in	r10, 0x1f	; 31
    82e6:	b4 b7       	in	r27, 0x34	; 52
    82e8:	b9 bc       	out	0x29, r11	; 41
    82ea:	bf c1       	rjmp	.+894    	; 0x866a <waves+0x46a>
    82ec:	c4 c7       	rjmp	.+3976   	; 0x9276 <LBCollides+0x44>
    82ee:	ca cd       	rjmp	.-1132   	; 0x7e84 <ProcessMusic+0x36c>
    82f0:	cf d2       	rcall	.+1438   	; 0x8890 <waves+0x690>
    82f2:	d5 d8       	rcall	.-3670   	; 0x749e <ReadEeprom+0x8>
    82f4:	db de       	rcall	.-586    	; 0x80ac <steptable+0xa4>
    82f6:	e1 e4       	ldi	r30, 0x41	; 65
    82f8:	e7 ea       	ldi	r30, 0xA7	; 167
    82fa:	ed f0       	brhs	.+58     	; 0x8336 <waves+0x136>
    82fc:	f4 f7       	brge	.-4      	; 0x82fa <waves+0xfa>
    82fe:	fa fd       	.word	0xfdfa	; ????
    8300:	80 81       	ld	r24, Z
    8302:	82 83       	std	Z+2, r24	; 0x02
    8304:	84 85       	ldd	r24, Z+12	; 0x0c
    8306:	86 87       	std	Z+14, r24	; 0x0e
    8308:	88 89       	ldd	r24, Y+16	; 0x10
    830a:	8a 8b       	std	Y+18, r24	; 0x12
    830c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    830e:	8e 8f       	std	Y+30, r24	; 0x1e
    8310:	90 91 92 93 	lds	r25, 0x9392
    8314:	94 95       	.word	0x9594	; ????
    8316:	96 97       	sbiw	r26, 0x26	; 38
    8318:	98 99       	sbic	0x13, 0	; 19
    831a:	9a 9b       	sbis	0x13, 2	; 19
    831c:	9c 9d       	mul	r25, r12
    831e:	9e 9f       	mul	r25, r30
    8320:	a0 a1       	ldd	r26, Z+32	; 0x20
    8322:	a2 a3       	std	Z+34, r26	; 0x22
    8324:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8326:	a6 a7       	std	Z+46, r26	; 0x2e
    8328:	a8 a9       	ldd	r26, Y+48	; 0x30
    832a:	aa ab       	std	Y+50, r26	; 0x32
    832c:	ac ad       	ldd	r26, Y+60	; 0x3c
    832e:	ae af       	std	Y+62, r26	; 0x3e
    8330:	b0 b1       	in	r27, 0x00	; 0
    8332:	b2 b3       	in	r27, 0x12	; 18
    8334:	b4 b5       	in	r27, 0x24	; 36
    8336:	b6 b7       	in	r27, 0x36	; 54
    8338:	b8 b9       	out	0x08, r27	; 8
    833a:	ba bb       	out	0x1a, r27	; 26
    833c:	bc bd       	out	0x2c, r27	; 44
    833e:	be bf       	out	0x3e, r27	; 62
    8340:	c0 c1       	rjmp	.+896    	; 0x86c2 <waves+0x4c2>
    8342:	c2 c3       	rjmp	.+1924   	; 0x8ac8 <waves+0x8c8>
    8344:	c4 c5       	rjmp	.+2952   	; 0x8ece <InitializeVideoMode+0xe>
    8346:	c6 c7       	rjmp	.+3980   	; 0x92d4 <LBLineIntersect+0x4e>
    8348:	c8 c9       	rjmp	.-3184   	; 0x76da <EepromWriteBlock+0x9c>
    834a:	ca cb       	rjmp	.-2156   	; 0x7ae0 <TriggerNote+0x36>
    834c:	cc cd       	rjmp	.-1128   	; 0x7ee6 <ProcessMusic+0x3ce>
    834e:	ce cf       	rjmp	.-100    	; 0x82ec <waves+0xec>
    8350:	d0 d1       	rcall	.+928    	; 0x86f2 <waves+0x4f2>
    8352:	d2 d3       	rcall	.+1956   	; 0x8af8 <waves+0x8f8>
    8354:	d4 d5       	rcall	.+2984   	; 0x8efe <DrawMap2+0x2a>
    8356:	d6 d7       	rcall	.+4012   	; 0x9304 <LBLineIntersect+0x7e>
    8358:	d8 d9       	rcall	.-3152   	; 0x770a <EepromWriteBlock+0xcc>
    835a:	da db       	rcall	.-2124   	; 0x7b10 <TriggerNote+0x66>
    835c:	dc dd       	rcall	.-1096   	; 0x7f16 <ProcessMusic+0x3fe>
    835e:	de df       	rcall	.-68     	; 0x831c <waves+0x11c>
    8360:	e0 e1       	ldi	r30, 0x10	; 16
    8362:	e2 e3       	ldi	r30, 0x32	; 50
    8364:	e4 e5       	ldi	r30, 0x54	; 84
    8366:	e6 e7       	ldi	r30, 0x76	; 118
    8368:	e8 e9       	ldi	r30, 0x98	; 152
    836a:	ea eb       	ldi	r30, 0xBA	; 186
    836c:	ec ed       	ldi	r30, 0xDC	; 220
    836e:	ee ef       	ldi	r30, 0xFE	; 254
    8370:	f0 f1       	brcs	.+124    	; 0x83ee <waves+0x1ee>
    8372:	f2 f3       	brmi	.-4      	; 0x8370 <waves+0x170>
    8374:	f4 f5       	brge	.+124    	; 0x83f2 <waves+0x1f2>
    8376:	f6 f7       	brtc	.-4      	; 0x8374 <waves+0x174>
    8378:	f8 f9       	.word	0xf9f8	; ????
    837a:	fa fb       	.word	0xfbfa	; ????
    837c:	fc fd       	.word	0xfdfc	; ????
    837e:	fe ff       	.word	0xfffe	; ????
    8380:	00 01       	movw	r0, r0
    8382:	02 03       	mulsu	r16, r18
    8384:	04 05       	cpc	r16, r4
    8386:	06 07       	cpc	r16, r22
    8388:	08 09       	sbc	r16, r8
    838a:	0a 0b       	sbc	r16, r26
    838c:	0c 0d       	add	r16, r12
    838e:	0e 0f       	add	r16, r30
    8390:	10 11       	cpse	r17, r0
    8392:	12 13       	cpse	r17, r18
    8394:	14 15       	cp	r17, r4
    8396:	16 17       	cp	r17, r22
    8398:	18 19       	sub	r17, r8
    839a:	1a 1b       	sub	r17, r26
    839c:	1c 1d       	adc	r17, r12
    839e:	1e 1f       	adc	r17, r30
    83a0:	20 21       	and	r18, r0
    83a2:	22 23       	and	r18, r18
    83a4:	24 25       	eor	r18, r4
    83a6:	26 27       	eor	r18, r22
    83a8:	28 29       	or	r18, r8
    83aa:	2a 2b       	or	r18, r26
    83ac:	2c 2d       	mov	r18, r12
    83ae:	2e 2f       	mov	r18, r30
    83b0:	30 31       	cpi	r19, 0x10	; 16
    83b2:	32 33       	cpi	r19, 0x32	; 50
    83b4:	34 35       	cpi	r19, 0x54	; 84
    83b6:	36 37       	cpi	r19, 0x76	; 118
    83b8:	38 39       	cpi	r19, 0x98	; 152
    83ba:	3a 3b       	cpi	r19, 0xBA	; 186
    83bc:	3c 3d       	cpi	r19, 0xDC	; 220
    83be:	3e 3f       	cpi	r19, 0xFE	; 254
    83c0:	40 41       	sbci	r20, 0x10	; 16
    83c2:	42 43       	sbci	r20, 0x32	; 50
    83c4:	44 45       	sbci	r20, 0x54	; 84
    83c6:	46 47       	sbci	r20, 0x76	; 118
    83c8:	48 49       	sbci	r20, 0x98	; 152
    83ca:	4a 4b       	sbci	r20, 0xBA	; 186
    83cc:	4c 4d       	sbci	r20, 0xDC	; 220
    83ce:	4e 4f       	sbci	r20, 0xFE	; 254
    83d0:	50 51       	subi	r21, 0x10	; 16
    83d2:	52 53       	subi	r21, 0x32	; 50
    83d4:	54 55       	subi	r21, 0x54	; 84
    83d6:	56 57       	subi	r21, 0x76	; 118
    83d8:	58 59       	subi	r21, 0x98	; 152
    83da:	5a 5b       	subi	r21, 0xBA	; 186
    83dc:	5c 5d       	subi	r21, 0xDC	; 220
    83de:	5e 5f       	subi	r21, 0xFE	; 254
    83e0:	60 61       	ori	r22, 0x10	; 16
    83e2:	62 63       	ori	r22, 0x32	; 50
    83e4:	64 65       	ori	r22, 0x54	; 84
    83e6:	66 67       	ori	r22, 0x76	; 118
    83e8:	68 69       	ori	r22, 0x98	; 152
    83ea:	6a 6b       	ori	r22, 0xBA	; 186
    83ec:	6c 6d       	ori	r22, 0xDC	; 220
    83ee:	6e 6f       	ori	r22, 0xFE	; 254
    83f0:	70 71       	andi	r23, 0x10	; 16
    83f2:	72 73       	andi	r23, 0x32	; 50
    83f4:	74 75       	andi	r23, 0x54	; 84
    83f6:	76 77       	andi	r23, 0x76	; 118
    83f8:	78 79       	andi	r23, 0x98	; 152
    83fa:	7a 7b       	andi	r23, 0xBA	; 186
    83fc:	7c 7d       	andi	r23, 0xDC	; 220
    83fe:	7e 7f       	andi	r23, 0xFE	; 254
    8400:	00 02       	muls	r16, r16
    8402:	04 06       	cpc	r0, r20
    8404:	08 0a       	sbc	r0, r24
    8406:	0c 0e       	add	r0, r28
    8408:	10 12       	cpse	r1, r16
    840a:	14 16       	cp	r1, r20
    840c:	18 1a       	sub	r1, r24
    840e:	1c 1e       	adc	r1, r28
    8410:	20 22       	and	r2, r16
    8412:	24 26       	eor	r2, r20
    8414:	28 2a       	or	r2, r24
    8416:	2c 2e       	mov	r2, r28
    8418:	30 32       	cpi	r19, 0x20	; 32
    841a:	34 36       	cpi	r19, 0x64	; 100
    841c:	38 3a       	cpi	r19, 0xA8	; 168
    841e:	3c 3e       	cpi	r19, 0xEC	; 236
    8420:	40 42       	sbci	r20, 0x20	; 32
    8422:	44 46       	sbci	r20, 0x64	; 100
    8424:	48 4a       	sbci	r20, 0xA8	; 168
    8426:	4c 4e       	sbci	r20, 0xEC	; 236
    8428:	50 52       	subi	r21, 0x20	; 32
    842a:	54 56       	subi	r21, 0x64	; 100
    842c:	58 5a       	subi	r21, 0xA8	; 168
    842e:	5c 5e       	subi	r21, 0xEC	; 236
    8430:	60 62       	ori	r22, 0x20	; 32
    8432:	64 66       	ori	r22, 0x64	; 100
    8434:	68 6a       	ori	r22, 0xA8	; 168
    8436:	6c 6e       	ori	r22, 0xEC	; 236
    8438:	70 72       	andi	r23, 0x20	; 32
    843a:	74 76       	andi	r23, 0x64	; 100
    843c:	78 7a       	andi	r23, 0xA8	; 168
    843e:	7c 7e       	andi	r23, 0xEC	; 236
    8440:	7f 7d       	andi	r23, 0xDF	; 223
    8442:	7b 79       	andi	r23, 0x9B	; 155
    8444:	77 75       	andi	r23, 0x57	; 87
    8446:	73 71       	andi	r23, 0x13	; 19
    8448:	6f 6d       	ori	r22, 0xDF	; 223
    844a:	6b 69       	ori	r22, 0x9B	; 155
    844c:	67 65       	ori	r22, 0x57	; 87
    844e:	63 61       	ori	r22, 0x13	; 19
    8450:	5f 5d       	subi	r21, 0xDF	; 223
    8452:	5b 59       	subi	r21, 0x9B	; 155
    8454:	57 55       	subi	r21, 0x57	; 87
    8456:	53 51       	subi	r21, 0x13	; 19
    8458:	4f 4d       	sbci	r20, 0xDF	; 223
    845a:	4b 49       	sbci	r20, 0x9B	; 155
    845c:	47 45       	sbci	r20, 0x57	; 87
    845e:	43 41       	sbci	r20, 0x13	; 19
    8460:	3f 3d       	cpi	r19, 0xDF	; 223
    8462:	3b 39       	cpi	r19, 0x9B	; 155
    8464:	37 35       	cpi	r19, 0x57	; 87
    8466:	33 31       	cpi	r19, 0x13	; 19
    8468:	2f 2d       	mov	r18, r15
    846a:	2b 29       	or	r18, r11
    846c:	27 25       	eor	r18, r7
    846e:	23 21       	and	r18, r3
    8470:	1f 1d       	adc	r17, r15
    8472:	1b 19       	sub	r17, r11
    8474:	17 15       	cp	r17, r7
    8476:	13 11       	cpse	r17, r3
    8478:	0f 0d       	add	r16, r15
    847a:	0b 09       	sbc	r16, r11
    847c:	07 05       	cpc	r16, r7
    847e:	03 01       	movw	r0, r6
    8480:	ff fd       	.word	0xfdff	; ????
    8482:	fb f9       	.word	0xf9fb	; ????
    8484:	f7 f5       	brid	.+124    	; 0x8502 <waves+0x302>
    8486:	f3 f1       	brvs	.+124    	; 0x8504 <waves+0x304>
    8488:	ef ed       	ldi	r30, 0xDF	; 223
    848a:	eb e9       	ldi	r30, 0x9B	; 155
    848c:	e7 e5       	ldi	r30, 0x57	; 87
    848e:	e3 e1       	ldi	r30, 0x13	; 19
    8490:	df dd       	rcall	.-1090   	; 0x8050 <steptable+0x48>
    8492:	db d9       	rcall	.-3146   	; 0x784a <PatchCommand11+0x64>
    8494:	d7 d5       	rcall	.+2990   	; 0x9044 <doFade+0x6>
    8496:	d3 d1       	rcall	.+934    	; 0x883e <waves+0x63e>
    8498:	cf cd       	rjmp	.-1122   	; 0x8038 <steptable+0x30>
    849a:	cb c9       	rjmp	.-3178   	; 0x7832 <PatchCommand11+0x4c>
    849c:	c7 c5       	rjmp	.+2958   	; 0x902c <WaitVsync+0x1c>
    849e:	c3 c1       	rjmp	.+902    	; 0x8826 <waves+0x626>
    84a0:	bf bd       	out	0x2f, r27	; 47
    84a2:	bb b9       	out	0x0b, r27	; 11
    84a4:	b7 b5       	in	r27, 0x27	; 39
    84a6:	b3 b1       	in	r27, 0x03	; 3
    84a8:	af ad       	ldd	r26, Y+63	; 0x3f
    84aa:	ab a9       	ldd	r26, Y+51	; 0x33
    84ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    84ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    84b0:	9f 9d       	mul	r25, r15
    84b2:	9b 99       	sbic	0x13, 3	; 19
    84b4:	97 95       	ror	r25
    84b6:	93 91       	.word	0x9193	; ????
    84b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    84ba:	8b 89       	ldd	r24, Y+19	; 0x13
    84bc:	87 85       	ldd	r24, Z+15	; 0x0f
    84be:	83 81       	ldd	r24, Z+3	; 0x03
    84c0:	80 82       	st	Z, r8
    84c2:	84 86       	std	Z+12, r8	; 0x0c
    84c4:	88 8a       	std	Y+16, r8	; 0x10
    84c6:	8c 8e       	std	Y+28, r8	; 0x1c
    84c8:	90 92 94 96 	sts	0x9694, r9
    84cc:	98 9a       	sbi	0x13, 0	; 19
    84ce:	9c 9e       	mul	r9, r28
    84d0:	a0 a2       	std	Z+32, r10	; 0x20
    84d2:	a4 a6       	std	Z+44, r10	; 0x2c
    84d4:	a8 aa       	std	Y+48, r10	; 0x30
    84d6:	ac ae       	std	Y+60, r10	; 0x3c
    84d8:	b0 b2       	in	r11, 0x10	; 16
    84da:	b4 b6       	in	r11, 0x34	; 52
    84dc:	b8 ba       	out	0x18, r11	; 24
    84de:	bc be       	out	0x3c, r11	; 60
    84e0:	c0 c2       	rjmp	.+1408   	; 0x8a62 <waves+0x862>
    84e2:	c4 c6       	rjmp	.+3464   	; 0x926c <LBCollides+0x3a>
    84e4:	c8 ca       	rjmp	.-2672   	; 0x7a76 <TriggerCommon+0x126>
    84e6:	cc ce       	rjmp	.-616    	; 0x8280 <waves+0x80>
    84e8:	d0 d2       	rcall	.+1440   	; 0x8a8a <waves+0x88a>
    84ea:	d4 d6       	rcall	.+3496   	; 0x9294 <LBLineIntersect+0xe>
    84ec:	d8 da       	rcall	.-2640   	; 0x7a9e <TriggerCommon+0x14e>
    84ee:	dc de       	rcall	.-584    	; 0x82a8 <waves+0xa8>
    84f0:	e0 e2       	ldi	r30, 0x20	; 32
    84f2:	e4 e6       	ldi	r30, 0x64	; 100
    84f4:	e8 ea       	ldi	r30, 0xA8	; 168
    84f6:	ec ee       	ldi	r30, 0xEC	; 236
    84f8:	f0 f2       	brcs	.-68     	; 0x84b6 <waves+0x2b6>
    84fa:	f4 f6       	brge	.-68     	; 0x84b8 <waves+0x2b8>
    84fc:	f8 fa       	.word	0xfaf8	; ????
    84fe:	fc fe       	.word	0xfefc	; ????
    8500:	7f 7f       	andi	r23, 0xFF	; 255
    8502:	7f 7f       	andi	r23, 0xFF	; 255
    8504:	7f 7f       	andi	r23, 0xFF	; 255
    8506:	7f 7f       	andi	r23, 0xFF	; 255
    8508:	7f 7f       	andi	r23, 0xFF	; 255
    850a:	7f 7f       	andi	r23, 0xFF	; 255
    850c:	7f 7f       	andi	r23, 0xFF	; 255
    850e:	7f 7f       	andi	r23, 0xFF	; 255
    8510:	7f 7f       	andi	r23, 0xFF	; 255
    8512:	7f 7f       	andi	r23, 0xFF	; 255
    8514:	7f 7f       	andi	r23, 0xFF	; 255
    8516:	7f 7f       	andi	r23, 0xFF	; 255
    8518:	7f 7f       	andi	r23, 0xFF	; 255
    851a:	7f 7f       	andi	r23, 0xFF	; 255
    851c:	7f 7f       	andi	r23, 0xFF	; 255
    851e:	7f 7f       	andi	r23, 0xFF	; 255
    8520:	7f 7f       	andi	r23, 0xFF	; 255
    8522:	7f 7f       	andi	r23, 0xFF	; 255
    8524:	7f 7f       	andi	r23, 0xFF	; 255
    8526:	7f 7f       	andi	r23, 0xFF	; 255
    8528:	7f 7f       	andi	r23, 0xFF	; 255
    852a:	7f 7f       	andi	r23, 0xFF	; 255
    852c:	7f 7f       	andi	r23, 0xFF	; 255
    852e:	7f 7f       	andi	r23, 0xFF	; 255
    8530:	7f 7f       	andi	r23, 0xFF	; 255
    8532:	7f 7f       	andi	r23, 0xFF	; 255
    8534:	7f 7f       	andi	r23, 0xFF	; 255
    8536:	7f 7f       	andi	r23, 0xFF	; 255
    8538:	7f 7f       	andi	r23, 0xFF	; 255
    853a:	7f 7f       	andi	r23, 0xFF	; 255
    853c:	7f 7f       	andi	r23, 0xFF	; 255
    853e:	7f 7f       	andi	r23, 0xFF	; 255
    8540:	80 80       	ld	r8, Z
    8542:	80 80       	ld	r8, Z
    8544:	80 80       	ld	r8, Z
    8546:	80 80       	ld	r8, Z
    8548:	80 80       	ld	r8, Z
    854a:	80 80       	ld	r8, Z
    854c:	80 80       	ld	r8, Z
    854e:	80 80       	ld	r8, Z
    8550:	80 80       	ld	r8, Z
    8552:	80 80       	ld	r8, Z
    8554:	80 80       	ld	r8, Z
    8556:	80 80       	ld	r8, Z
    8558:	80 80       	ld	r8, Z
    855a:	80 80       	ld	r8, Z
    855c:	80 80       	ld	r8, Z
    855e:	80 80       	ld	r8, Z
    8560:	80 80       	ld	r8, Z
    8562:	80 80       	ld	r8, Z
    8564:	80 80       	ld	r8, Z
    8566:	80 80       	ld	r8, Z
    8568:	80 80       	ld	r8, Z
    856a:	80 80       	ld	r8, Z
    856c:	80 80       	ld	r8, Z
    856e:	80 80       	ld	r8, Z
    8570:	80 80       	ld	r8, Z
    8572:	80 80       	ld	r8, Z
    8574:	80 80       	ld	r8, Z
    8576:	80 80       	ld	r8, Z
    8578:	80 80       	ld	r8, Z
    857a:	80 80       	ld	r8, Z
    857c:	80 80       	ld	r8, Z
    857e:	80 80       	ld	r8, Z
    8580:	80 80       	ld	r8, Z
    8582:	80 80       	ld	r8, Z
    8584:	80 80       	ld	r8, Z
    8586:	80 80       	ld	r8, Z
    8588:	80 80       	ld	r8, Z
    858a:	80 80       	ld	r8, Z
    858c:	80 80       	ld	r8, Z
    858e:	80 80       	ld	r8, Z
    8590:	80 80       	ld	r8, Z
    8592:	80 80       	ld	r8, Z
    8594:	80 80       	ld	r8, Z
    8596:	80 80       	ld	r8, Z
    8598:	80 80       	ld	r8, Z
    859a:	80 80       	ld	r8, Z
    859c:	80 80       	ld	r8, Z
    859e:	80 80       	ld	r8, Z
    85a0:	80 80       	ld	r8, Z
    85a2:	80 80       	ld	r8, Z
    85a4:	80 80       	ld	r8, Z
    85a6:	80 80       	ld	r8, Z
    85a8:	80 80       	ld	r8, Z
    85aa:	80 80       	ld	r8, Z
    85ac:	80 80       	ld	r8, Z
    85ae:	80 80       	ld	r8, Z
    85b0:	80 80       	ld	r8, Z
    85b2:	80 80       	ld	r8, Z
    85b4:	80 80       	ld	r8, Z
    85b6:	80 80       	ld	r8, Z
    85b8:	80 80       	ld	r8, Z
    85ba:	80 80       	ld	r8, Z
    85bc:	80 80       	ld	r8, Z
    85be:	80 80       	ld	r8, Z
    85c0:	80 80       	ld	r8, Z
    85c2:	80 80       	ld	r8, Z
    85c4:	80 80       	ld	r8, Z
    85c6:	80 80       	ld	r8, Z
    85c8:	80 80       	ld	r8, Z
    85ca:	80 80       	ld	r8, Z
    85cc:	80 80       	ld	r8, Z
    85ce:	80 80       	ld	r8, Z
    85d0:	80 80       	ld	r8, Z
    85d2:	80 80       	ld	r8, Z
    85d4:	80 80       	ld	r8, Z
    85d6:	80 80       	ld	r8, Z
    85d8:	80 80       	ld	r8, Z
    85da:	80 80       	ld	r8, Z
    85dc:	80 80       	ld	r8, Z
    85de:	80 80       	ld	r8, Z
    85e0:	80 80       	ld	r8, Z
    85e2:	80 80       	ld	r8, Z
    85e4:	80 80       	ld	r8, Z
    85e6:	80 80       	ld	r8, Z
    85e8:	80 80       	ld	r8, Z
    85ea:	80 80       	ld	r8, Z
    85ec:	80 80       	ld	r8, Z
    85ee:	80 80       	ld	r8, Z
    85f0:	80 80       	ld	r8, Z
    85f2:	80 80       	ld	r8, Z
    85f4:	80 80       	ld	r8, Z
    85f6:	80 80       	ld	r8, Z
    85f8:	80 80       	ld	r8, Z
    85fa:	80 80       	ld	r8, Z
    85fc:	80 80       	ld	r8, Z
    85fe:	80 80       	ld	r8, Z
    8600:	7f 7f       	andi	r23, 0xFF	; 255
    8602:	7f 7f       	andi	r23, 0xFF	; 255
    8604:	7f 7f       	andi	r23, 0xFF	; 255
    8606:	7f 7f       	andi	r23, 0xFF	; 255
    8608:	7f 7f       	andi	r23, 0xFF	; 255
    860a:	7f 7f       	andi	r23, 0xFF	; 255
    860c:	7f 7f       	andi	r23, 0xFF	; 255
    860e:	7f 7f       	andi	r23, 0xFF	; 255
    8610:	7f 7f       	andi	r23, 0xFF	; 255
    8612:	7f 7f       	andi	r23, 0xFF	; 255
    8614:	7f 7f       	andi	r23, 0xFF	; 255
    8616:	7f 7f       	andi	r23, 0xFF	; 255
    8618:	7f 7f       	andi	r23, 0xFF	; 255
    861a:	7f 7f       	andi	r23, 0xFF	; 255
    861c:	7f 7f       	andi	r23, 0xFF	; 255
    861e:	7f 7f       	andi	r23, 0xFF	; 255
    8620:	7f 7f       	andi	r23, 0xFF	; 255
    8622:	7f 7f       	andi	r23, 0xFF	; 255
    8624:	7f 7f       	andi	r23, 0xFF	; 255
    8626:	7f 7f       	andi	r23, 0xFF	; 255
    8628:	7f 7f       	andi	r23, 0xFF	; 255
    862a:	7f 7f       	andi	r23, 0xFF	; 255
    862c:	7f 7f       	andi	r23, 0xFF	; 255
    862e:	7f 7f       	andi	r23, 0xFF	; 255
    8630:	7f 7f       	andi	r23, 0xFF	; 255
    8632:	7f 7f       	andi	r23, 0xFF	; 255
    8634:	7f 7f       	andi	r23, 0xFF	; 255
    8636:	7f 7f       	andi	r23, 0xFF	; 255
    8638:	7f 7f       	andi	r23, 0xFF	; 255
    863a:	7f 7f       	andi	r23, 0xFF	; 255
    863c:	7f 7f       	andi	r23, 0xFF	; 255
    863e:	7f 7f       	andi	r23, 0xFF	; 255
    8640:	7f 7f       	andi	r23, 0xFF	; 255
    8642:	7f 7f       	andi	r23, 0xFF	; 255
    8644:	7f 7f       	andi	r23, 0xFF	; 255
    8646:	7f 7f       	andi	r23, 0xFF	; 255
    8648:	7f 7f       	andi	r23, 0xFF	; 255
    864a:	7f 7f       	andi	r23, 0xFF	; 255
    864c:	7f 7f       	andi	r23, 0xFF	; 255
    864e:	7f 7f       	andi	r23, 0xFF	; 255
    8650:	7f 7f       	andi	r23, 0xFF	; 255
    8652:	7f 7f       	andi	r23, 0xFF	; 255
    8654:	7f 7f       	andi	r23, 0xFF	; 255
    8656:	7f 7f       	andi	r23, 0xFF	; 255
    8658:	7f 7f       	andi	r23, 0xFF	; 255
    865a:	7f 7f       	andi	r23, 0xFF	; 255
    865c:	7f 7f       	andi	r23, 0xFF	; 255
    865e:	7f 7f       	andi	r23, 0xFF	; 255
    8660:	7f 7f       	andi	r23, 0xFF	; 255
    8662:	7f 7f       	andi	r23, 0xFF	; 255
    8664:	7f 7f       	andi	r23, 0xFF	; 255
    8666:	7f 7f       	andi	r23, 0xFF	; 255
    8668:	7f 7f       	andi	r23, 0xFF	; 255
    866a:	7f 7f       	andi	r23, 0xFF	; 255
    866c:	7f 7f       	andi	r23, 0xFF	; 255
    866e:	7f 7f       	andi	r23, 0xFF	; 255
    8670:	7f 7f       	andi	r23, 0xFF	; 255
    8672:	7f 7f       	andi	r23, 0xFF	; 255
    8674:	7f 7f       	andi	r23, 0xFF	; 255
    8676:	7f 7f       	andi	r23, 0xFF	; 255
    8678:	7f 7f       	andi	r23, 0xFF	; 255
    867a:	7f 7f       	andi	r23, 0xFF	; 255
    867c:	7f 7f       	andi	r23, 0xFF	; 255
    867e:	7f 7f       	andi	r23, 0xFF	; 255
    8680:	80 80       	ld	r8, Z
    8682:	80 80       	ld	r8, Z
    8684:	80 80       	ld	r8, Z
    8686:	80 80       	ld	r8, Z
    8688:	80 80       	ld	r8, Z
    868a:	80 80       	ld	r8, Z
    868c:	80 80       	ld	r8, Z
    868e:	80 80       	ld	r8, Z
    8690:	80 80       	ld	r8, Z
    8692:	80 80       	ld	r8, Z
    8694:	80 80       	ld	r8, Z
    8696:	80 80       	ld	r8, Z
    8698:	80 80       	ld	r8, Z
    869a:	80 80       	ld	r8, Z
    869c:	80 80       	ld	r8, Z
    869e:	80 80       	ld	r8, Z
    86a0:	80 80       	ld	r8, Z
    86a2:	80 80       	ld	r8, Z
    86a4:	80 80       	ld	r8, Z
    86a6:	80 80       	ld	r8, Z
    86a8:	80 80       	ld	r8, Z
    86aa:	80 80       	ld	r8, Z
    86ac:	80 80       	ld	r8, Z
    86ae:	80 80       	ld	r8, Z
    86b0:	80 80       	ld	r8, Z
    86b2:	80 80       	ld	r8, Z
    86b4:	80 80       	ld	r8, Z
    86b6:	80 80       	ld	r8, Z
    86b8:	80 80       	ld	r8, Z
    86ba:	80 80       	ld	r8, Z
    86bc:	80 80       	ld	r8, Z
    86be:	80 80       	ld	r8, Z
    86c0:	80 80       	ld	r8, Z
    86c2:	80 80       	ld	r8, Z
    86c4:	80 80       	ld	r8, Z
    86c6:	80 80       	ld	r8, Z
    86c8:	80 80       	ld	r8, Z
    86ca:	80 80       	ld	r8, Z
    86cc:	80 80       	ld	r8, Z
    86ce:	80 80       	ld	r8, Z
    86d0:	80 80       	ld	r8, Z
    86d2:	80 80       	ld	r8, Z
    86d4:	80 80       	ld	r8, Z
    86d6:	80 80       	ld	r8, Z
    86d8:	80 80       	ld	r8, Z
    86da:	80 80       	ld	r8, Z
    86dc:	80 80       	ld	r8, Z
    86de:	80 80       	ld	r8, Z
    86e0:	80 80       	ld	r8, Z
    86e2:	80 80       	ld	r8, Z
    86e4:	80 80       	ld	r8, Z
    86e6:	80 80       	ld	r8, Z
    86e8:	80 80       	ld	r8, Z
    86ea:	80 80       	ld	r8, Z
    86ec:	80 80       	ld	r8, Z
    86ee:	80 80       	ld	r8, Z
    86f0:	80 80       	ld	r8, Z
    86f2:	80 80       	ld	r8, Z
    86f4:	80 80       	ld	r8, Z
    86f6:	80 80       	ld	r8, Z
    86f8:	80 80       	ld	r8, Z
    86fa:	80 80       	ld	r8, Z
    86fc:	80 80       	ld	r8, Z
    86fe:	80 80       	ld	r8, Z
    8700:	7f 7f       	andi	r23, 0xFF	; 255
    8702:	7f 7f       	andi	r23, 0xFF	; 255
    8704:	7f 7f       	andi	r23, 0xFF	; 255
    8706:	7f 7f       	andi	r23, 0xFF	; 255
    8708:	7f 7f       	andi	r23, 0xFF	; 255
    870a:	7f 7f       	andi	r23, 0xFF	; 255
    870c:	7f 7f       	andi	r23, 0xFF	; 255
    870e:	7f 7f       	andi	r23, 0xFF	; 255
    8710:	7f 7f       	andi	r23, 0xFF	; 255
    8712:	7f 7f       	andi	r23, 0xFF	; 255
    8714:	7f 7f       	andi	r23, 0xFF	; 255
    8716:	7f 7f       	andi	r23, 0xFF	; 255
    8718:	7f 7f       	andi	r23, 0xFF	; 255
    871a:	7f 7f       	andi	r23, 0xFF	; 255
    871c:	7f 7f       	andi	r23, 0xFF	; 255
    871e:	7f 7f       	andi	r23, 0xFF	; 255
    8720:	7f 7f       	andi	r23, 0xFF	; 255
    8722:	7f 7f       	andi	r23, 0xFF	; 255
    8724:	7f 7f       	andi	r23, 0xFF	; 255
    8726:	7f 7f       	andi	r23, 0xFF	; 255
    8728:	7f 7f       	andi	r23, 0xFF	; 255
    872a:	7f 7f       	andi	r23, 0xFF	; 255
    872c:	7f 7f       	andi	r23, 0xFF	; 255
    872e:	7f 7f       	andi	r23, 0xFF	; 255
    8730:	7f 7f       	andi	r23, 0xFF	; 255
    8732:	7f 7f       	andi	r23, 0xFF	; 255
    8734:	7f 7f       	andi	r23, 0xFF	; 255
    8736:	7f 7f       	andi	r23, 0xFF	; 255
    8738:	7f 7f       	andi	r23, 0xFF	; 255
    873a:	7f 7f       	andi	r23, 0xFF	; 255
    873c:	7f 7f       	andi	r23, 0xFF	; 255
    873e:	7f 7f       	andi	r23, 0xFF	; 255
    8740:	7f 7f       	andi	r23, 0xFF	; 255
    8742:	7f 7f       	andi	r23, 0xFF	; 255
    8744:	7f 7f       	andi	r23, 0xFF	; 255
    8746:	7f 7f       	andi	r23, 0xFF	; 255
    8748:	7f 7f       	andi	r23, 0xFF	; 255
    874a:	7f 7f       	andi	r23, 0xFF	; 255
    874c:	7f 7f       	andi	r23, 0xFF	; 255
    874e:	7f 7f       	andi	r23, 0xFF	; 255
    8750:	7f 7f       	andi	r23, 0xFF	; 255
    8752:	7f 7f       	andi	r23, 0xFF	; 255
    8754:	7f 7f       	andi	r23, 0xFF	; 255
    8756:	7f 7f       	andi	r23, 0xFF	; 255
    8758:	7f 7f       	andi	r23, 0xFF	; 255
    875a:	7f 7f       	andi	r23, 0xFF	; 255
    875c:	7f 7f       	andi	r23, 0xFF	; 255
    875e:	7f 7f       	andi	r23, 0xFF	; 255
    8760:	7f 7f       	andi	r23, 0xFF	; 255
    8762:	7f 7f       	andi	r23, 0xFF	; 255
    8764:	7f 7f       	andi	r23, 0xFF	; 255
    8766:	7f 7f       	andi	r23, 0xFF	; 255
    8768:	7f 7f       	andi	r23, 0xFF	; 255
    876a:	7f 7f       	andi	r23, 0xFF	; 255
    876c:	7f 7f       	andi	r23, 0xFF	; 255
    876e:	7f 7f       	andi	r23, 0xFF	; 255
    8770:	7f 7f       	andi	r23, 0xFF	; 255
    8772:	7f 7f       	andi	r23, 0xFF	; 255
    8774:	7f 7f       	andi	r23, 0xFF	; 255
    8776:	7f 7f       	andi	r23, 0xFF	; 255
    8778:	7f 7f       	andi	r23, 0xFF	; 255
    877a:	7f 7f       	andi	r23, 0xFF	; 255
    877c:	7f 7f       	andi	r23, 0xFF	; 255
    877e:	7f 7f       	andi	r23, 0xFF	; 255
    8780:	7f 7f       	andi	r23, 0xFF	; 255
    8782:	7f 7f       	andi	r23, 0xFF	; 255
    8784:	7f 7f       	andi	r23, 0xFF	; 255
    8786:	7f 7f       	andi	r23, 0xFF	; 255
    8788:	7f 7f       	andi	r23, 0xFF	; 255
    878a:	7f 7f       	andi	r23, 0xFF	; 255
    878c:	7f 7f       	andi	r23, 0xFF	; 255
    878e:	7f 7f       	andi	r23, 0xFF	; 255
    8790:	7f 7f       	andi	r23, 0xFF	; 255
    8792:	7f 7f       	andi	r23, 0xFF	; 255
    8794:	7f 7f       	andi	r23, 0xFF	; 255
    8796:	7f 7f       	andi	r23, 0xFF	; 255
    8798:	7f 7f       	andi	r23, 0xFF	; 255
    879a:	7f 7f       	andi	r23, 0xFF	; 255
    879c:	7f 7f       	andi	r23, 0xFF	; 255
    879e:	7f 7f       	andi	r23, 0xFF	; 255
    87a0:	7f 7f       	andi	r23, 0xFF	; 255
    87a2:	7f 7f       	andi	r23, 0xFF	; 255
    87a4:	7f 7f       	andi	r23, 0xFF	; 255
    87a6:	7f 7f       	andi	r23, 0xFF	; 255
    87a8:	7f 7f       	andi	r23, 0xFF	; 255
    87aa:	7f 7f       	andi	r23, 0xFF	; 255
    87ac:	7f 7f       	andi	r23, 0xFF	; 255
    87ae:	7f 7f       	andi	r23, 0xFF	; 255
    87b0:	7f 7f       	andi	r23, 0xFF	; 255
    87b2:	7f 7f       	andi	r23, 0xFF	; 255
    87b4:	7f 7f       	andi	r23, 0xFF	; 255
    87b6:	7f 7f       	andi	r23, 0xFF	; 255
    87b8:	7f 7f       	andi	r23, 0xFF	; 255
    87ba:	7f 7f       	andi	r23, 0xFF	; 255
    87bc:	7f 7f       	andi	r23, 0xFF	; 255
    87be:	7f 7f       	andi	r23, 0xFF	; 255
    87c0:	80 80       	ld	r8, Z
    87c2:	80 80       	ld	r8, Z
    87c4:	80 80       	ld	r8, Z
    87c6:	80 80       	ld	r8, Z
    87c8:	80 80       	ld	r8, Z
    87ca:	80 80       	ld	r8, Z
    87cc:	80 80       	ld	r8, Z
    87ce:	80 80       	ld	r8, Z
    87d0:	80 80       	ld	r8, Z
    87d2:	80 80       	ld	r8, Z
    87d4:	80 80       	ld	r8, Z
    87d6:	80 80       	ld	r8, Z
    87d8:	80 80       	ld	r8, Z
    87da:	80 80       	ld	r8, Z
    87dc:	80 80       	ld	r8, Z
    87de:	80 80       	ld	r8, Z
    87e0:	80 80       	ld	r8, Z
    87e2:	80 80       	ld	r8, Z
    87e4:	80 80       	ld	r8, Z
    87e6:	80 80       	ld	r8, Z
    87e8:	80 80       	ld	r8, Z
    87ea:	80 80       	ld	r8, Z
    87ec:	80 80       	ld	r8, Z
    87ee:	80 80       	ld	r8, Z
    87f0:	80 80       	ld	r8, Z
    87f2:	80 80       	ld	r8, Z
    87f4:	80 80       	ld	r8, Z
    87f6:	80 80       	ld	r8, Z
    87f8:	80 80       	ld	r8, Z
    87fa:	80 80       	ld	r8, Z
    87fc:	80 80       	ld	r8, Z
    87fe:	80 80       	ld	r8, Z
    8800:	03 09       	sbc	r16, r3
    8802:	13 1e       	adc	r1, r19
    8804:	28 31       	cpi	r18, 0x18	; 24
    8806:	3a 40       	sbci	r19, 0x0A	; 10
    8808:	46 4c       	sbci	r20, 0xC6	; 198
    880a:	50 54       	subi	r21, 0x40	; 64
    880c:	58 5b       	subi	r21, 0xB8	; 184
    880e:	5e 61       	ori	r21, 0x1E	; 30
    8810:	63 65       	ori	r22, 0x53	; 83
    8812:	67 69       	ori	r22, 0x97	; 151
    8814:	6b 6c       	ori	r22, 0xCB	; 203
    8816:	6e 6f       	ori	r22, 0xFE	; 254
    8818:	70 71       	andi	r23, 0x10	; 16
    881a:	72 73       	andi	r23, 0x32	; 50
    881c:	74 75       	andi	r23, 0x54	; 84
    881e:	76 77       	andi	r23, 0x76	; 118
    8820:	77 78       	andi	r23, 0x87	; 135
    8822:	79 79       	andi	r23, 0x99	; 153
    8824:	7a 7a       	andi	r23, 0xAA	; 170
    8826:	7b 7b       	andi	r23, 0xBB	; 187
    8828:	7c 7c       	andi	r23, 0xCC	; 204
    882a:	7c 7d       	andi	r23, 0xDC	; 220
    882c:	7d 7d       	andi	r23, 0xDD	; 221
    882e:	7e 7e       	andi	r23, 0xEE	; 238
    8830:	7e 7e       	andi	r23, 0xEE	; 238
    8832:	7f 7f       	andi	r23, 0xFF	; 255
    8834:	7f 7f       	andi	r23, 0xFF	; 255
    8836:	7f 7f       	andi	r23, 0xFF	; 255
    8838:	7f 7f       	andi	r23, 0xFF	; 255
    883a:	7f 7f       	andi	r23, 0xFF	; 255
    883c:	7f 7f       	andi	r23, 0xFF	; 255
    883e:	7f 7f       	andi	r23, 0xFF	; 255
    8840:	7f 7f       	andi	r23, 0xFF	; 255
    8842:	7f 7f       	andi	r23, 0xFF	; 255
    8844:	7f 7f       	andi	r23, 0xFF	; 255
    8846:	7f 7f       	andi	r23, 0xFF	; 255
    8848:	7f 7f       	andi	r23, 0xFF	; 255
    884a:	7f 7f       	andi	r23, 0xFF	; 255
    884c:	7f 7e       	andi	r23, 0xEF	; 239
    884e:	7e 7e       	andi	r23, 0xEE	; 238
    8850:	7e 7d       	andi	r23, 0xDE	; 222
    8852:	7d 7d       	andi	r23, 0xDD	; 221
    8854:	7c 7c       	andi	r23, 0xCC	; 204
    8856:	7c 7b       	andi	r23, 0xBC	; 188
    8858:	7b 7a       	andi	r23, 0xAB	; 171
    885a:	7a 79       	andi	r23, 0x9A	; 154
    885c:	79 78       	andi	r23, 0x89	; 137
    885e:	77 77       	andi	r23, 0x77	; 119
    8860:	76 75       	andi	r23, 0x56	; 86
    8862:	74 73       	andi	r23, 0x34	; 52
    8864:	72 71       	andi	r23, 0x12	; 18
    8866:	70 6f       	ori	r23, 0xF0	; 240
    8868:	6e 6c       	ori	r22, 0xCE	; 206
    886a:	6b 69       	ori	r22, 0x9B	; 155
    886c:	67 65       	ori	r22, 0x57	; 87
    886e:	63 61       	ori	r22, 0x13	; 19
    8870:	5e 5b       	subi	r21, 0xBE	; 190
    8872:	58 54       	subi	r21, 0x48	; 72
    8874:	50 4c       	sbci	r21, 0xC0	; 192
    8876:	46 40       	sbci	r20, 0x06	; 6
    8878:	3a 31       	cpi	r19, 0x1A	; 26
    887a:	28 1e       	adc	r2, r24
    887c:	13 09       	sbc	r17, r3
    887e:	03 00       	.word	0x0003	; ????
    8880:	c6 cc       	rjmp	.-1652   	; 0x820e <waves+0xe>
    8882:	d5 db       	rcall	.-2134   	; 0x802e <steptable+0x26>
    8884:	df e3       	ldi	r29, 0x3F	; 63
    8886:	e5 e7       	ldi	r30, 0x75	; 117
    8888:	e9 ea       	ldi	r30, 0xA9	; 169
    888a:	eb ec       	ldi	r30, 0xCB	; 203
    888c:	ed ee       	ldi	r30, 0xED	; 237
    888e:	ef ef       	ldi	r30, 0xFF	; 255
    8890:	f0 f0       	brcs	.+60     	; 0x88ce <waves+0x6ce>
    8892:	f0 f1       	brcs	.+124    	; 0x8910 <waves+0x710>
    8894:	f1 f1       	breq	.+124    	; 0x8912 <waves+0x712>
    8896:	f1 f2       	breq	.-68     	; 0x8854 <waves+0x654>
    8898:	f2 f2       	brmi	.-68     	; 0x8856 <waves+0x656>
    889a:	f2 f2       	brmi	.-68     	; 0x8858 <waves+0x658>
    889c:	f2 f2       	brmi	.-68     	; 0x885a <waves+0x65a>
    889e:	f2 f3       	brmi	.-4      	; 0x889c <waves+0x69c>
    88a0:	f3 f3       	brvs	.-4      	; 0x889e <waves+0x69e>
    88a2:	f3 f3       	brvs	.-4      	; 0x88a0 <waves+0x6a0>
    88a4:	f3 f3       	brvs	.-4      	; 0x88a2 <waves+0x6a2>
    88a6:	f3 f3       	brvs	.-4      	; 0x88a4 <waves+0x6a4>
    88a8:	f3 f3       	brvs	.-4      	; 0x88a6 <waves+0x6a6>
    88aa:	f3 f3       	brvs	.-4      	; 0x88a8 <waves+0x6a8>
    88ac:	f3 f3       	brvs	.-4      	; 0x88aa <waves+0x6aa>
    88ae:	f3 f3       	brvs	.-4      	; 0x88ac <waves+0x6ac>
    88b0:	f3 f3       	brvs	.-4      	; 0x88ae <waves+0x6ae>
    88b2:	f3 f3       	brvs	.-4      	; 0x88b0 <waves+0x6b0>
    88b4:	f3 f3       	brvs	.-4      	; 0x88b2 <waves+0x6b2>
    88b6:	f3 f3       	brvs	.-4      	; 0x88b4 <waves+0x6b4>
    88b8:	f3 f3       	brvs	.-4      	; 0x88b6 <waves+0x6b6>
    88ba:	f3 f3       	brvs	.-4      	; 0x88b8 <waves+0x6b8>
    88bc:	f3 f3       	brvs	.-4      	; 0x88ba <waves+0x6ba>
    88be:	f3 f3       	brvs	.-4      	; 0x88bc <waves+0x6bc>
    88c0:	f3 f3       	brvs	.-4      	; 0x88be <waves+0x6be>
    88c2:	f3 f3       	brvs	.-4      	; 0x88c0 <waves+0x6c0>
    88c4:	f3 f3       	brvs	.-4      	; 0x88c2 <waves+0x6c2>
    88c6:	f3 f3       	brvs	.-4      	; 0x88c4 <waves+0x6c4>
    88c8:	f3 f3       	brvs	.-4      	; 0x88c6 <waves+0x6c6>
    88ca:	f3 f3       	brvs	.-4      	; 0x88c8 <waves+0x6c8>
    88cc:	f3 f3       	brvs	.-4      	; 0x88ca <waves+0x6ca>
    88ce:	f3 f3       	brvs	.-4      	; 0x88cc <waves+0x6cc>
    88d0:	f3 f3       	brvs	.-4      	; 0x88ce <waves+0x6ce>
    88d2:	f3 f3       	brvs	.-4      	; 0x88d0 <waves+0x6d0>
    88d4:	f3 f3       	brvs	.-4      	; 0x88d2 <waves+0x6d2>
    88d6:	f3 f3       	brvs	.-4      	; 0x88d4 <waves+0x6d4>
    88d8:	f3 f3       	brvs	.-4      	; 0x88d6 <waves+0x6d6>
    88da:	f3 f3       	brvs	.-4      	; 0x88d8 <waves+0x6d8>
    88dc:	f3 f3       	brvs	.-4      	; 0x88da <waves+0x6da>
    88de:	f3 f3       	brvs	.-4      	; 0x88dc <waves+0x6dc>
    88e0:	f2 f2       	brmi	.-68     	; 0x889e <waves+0x69e>
    88e2:	f2 f2       	brmi	.-68     	; 0x88a0 <waves+0x6a0>
    88e4:	f2 f2       	brmi	.-68     	; 0x88a2 <waves+0x6a2>
    88e6:	f2 f2       	brmi	.-68     	; 0x88a4 <waves+0x6a4>
    88e8:	f1 f1       	breq	.+124    	; 0x8966 <waves+0x766>
    88ea:	f1 f1       	breq	.+124    	; 0x8968 <waves+0x768>
    88ec:	f0 f0       	brcs	.+60     	; 0x892a <waves+0x72a>
    88ee:	f0 ef       	ldi	r31, 0xF0	; 240
    88f0:	ef ee       	ldi	r30, 0xEF	; 239
    88f2:	ed ec       	ldi	r30, 0xCD	; 205
    88f4:	eb ea       	ldi	r30, 0xAB	; 171
    88f6:	e9 e7       	ldi	r30, 0x79	; 121
    88f8:	e5 e3       	ldi	r30, 0x35	; 53
    88fa:	df db       	rcall	.-2114   	; 0x80ba <steptable+0xb2>
    88fc:	d5 cc       	rjmp	.-1622   	; 0x82a8 <waves+0xa8>
    88fe:	c6 00       	.word	0x00c6	; ????
    8900:	00 28       	or	r0, r0
    8902:	3d 42       	sbci	r19, 0x2D	; 45
    8904:	30 2d       	mov	r19, r0
    8906:	2c 2b       	or	r18, r28
    8908:	2c 2d       	mov	r18, r12
    890a:	2e 2f       	mov	r18, r30
    890c:	30 32       	cpi	r19, 0x20	; 32
    890e:	33 35       	cpi	r19, 0x53	; 83
    8910:	37 39       	cpi	r19, 0x97	; 151
    8912:	3b 3d       	cpi	r19, 0xDB	; 219
    8914:	3f 41       	sbci	r19, 0x1F	; 31
    8916:	43 45       	sbci	r20, 0x53	; 83
    8918:	48 4a       	sbci	r20, 0xA8	; 168
    891a:	4c 4e       	sbci	r20, 0xEC	; 236
    891c:	50 53       	subi	r21, 0x30	; 48
    891e:	55 57       	subi	r21, 0x75	; 117
    8920:	59 5b       	subi	r21, 0xB9	; 185
    8922:	5d 5f       	subi	r21, 0xFD	; 253
    8924:	61 63       	ori	r22, 0x31	; 49
    8926:	65 67       	ori	r22, 0x75	; 117
    8928:	69 6b       	ori	r22, 0xB9	; 185
    892a:	6c 6e       	ori	r22, 0xEC	; 236
    892c:	70 71       	andi	r23, 0x10	; 16
    892e:	73 74       	andi	r23, 0x43	; 67
    8930:	75 77       	andi	r23, 0x75	; 117
    8932:	78 79       	andi	r23, 0x98	; 152
    8934:	7a 7b       	andi	r23, 0xBA	; 186
    8936:	7c 7d       	andi	r23, 0xDC	; 220
    8938:	7d 7e       	andi	r23, 0xED	; 237
    893a:	7e 7f       	andi	r23, 0xFE	; 254
    893c:	7f 7f       	andi	r23, 0xFF	; 255
    893e:	7f 7f       	andi	r23, 0xFF	; 255
    8940:	7f 7f       	andi	r23, 0xFF	; 255
    8942:	7f 7f       	andi	r23, 0xFF	; 255
    8944:	7f 7f       	andi	r23, 0xFF	; 255
    8946:	7e 7e       	andi	r23, 0xEE	; 238
    8948:	7d 7d       	andi	r23, 0xDD	; 221
    894a:	7c 7b       	andi	r23, 0xBC	; 188
    894c:	7a 79       	andi	r23, 0x9A	; 154
    894e:	78 77       	andi	r23, 0x78	; 120
    8950:	75 74       	andi	r23, 0x45	; 69
    8952:	73 71       	andi	r23, 0x13	; 19
    8954:	70 6e       	ori	r23, 0xE0	; 224
    8956:	6c 6b       	ori	r22, 0xBC	; 188
    8958:	69 67       	ori	r22, 0x79	; 121
    895a:	65 63       	ori	r22, 0x35	; 53
    895c:	61 5f       	subi	r22, 0xF1	; 241
    895e:	5d 5b       	subi	r21, 0xBD	; 189
    8960:	59 57       	subi	r21, 0x79	; 121
    8962:	55 53       	subi	r21, 0x35	; 53
    8964:	50 4e       	sbci	r21, 0xE0	; 224
    8966:	4c 4a       	sbci	r20, 0xAC	; 172
    8968:	48 45       	sbci	r20, 0x58	; 88
    896a:	43 41       	sbci	r20, 0x13	; 19
    896c:	3f 3d       	cpi	r19, 0xDF	; 223
    896e:	3b 39       	cpi	r19, 0x9B	; 155
    8970:	37 35       	cpi	r19, 0x57	; 87
    8972:	33 32       	cpi	r19, 0x23	; 35
    8974:	30 2f       	mov	r19, r16
    8976:	2e 2d       	mov	r18, r14
    8978:	2c 2b       	or	r18, r28
    897a:	2c 2d       	mov	r18, r12
    897c:	30 42       	sbci	r19, 0x20	; 32
    897e:	3d 28       	or	r3, r13
    8980:	00 e9       	ldi	r16, 0x90	; 144
    8982:	e5 fe       	sbrs	r14, 5
    8984:	d4 d7       	rcall	.+4008   	; 0x992e <print_level_score+0x22>
    8986:	d7 d7       	rcall	.+4014   	; 0x9936 <print_level_score+0x2a>
    8988:	d6 d4       	rcall	.+2476   	; 0x9336 <LBLineIntersect+0xb0>
    898a:	d2 d0       	rcall	.+420    	; 0x8b30 <waves+0x930>
    898c:	ce cc       	rjmp	.-1636   	; 0x832a <waves+0x12a>
    898e:	ca c8       	rjmp	.-3692   	; 0x7b24 <ProcessMusic+0xc>
    8990:	c6 c3       	rjmp	.+1932   	; 0x911e <LBGetNextFrame+0x42>
    8992:	c1 bf       	out	0x31, r28	; 49
    8994:	bd ba       	out	0x1d, r11	; 29
    8996:	b8 b6       	in	r11, 0x38	; 56
    8998:	b4 b1       	in	r27, 0x04	; 4
    899a:	af ad       	ldd	r26, Y+63	; 0x3f
    899c:	ab a9       	ldd	r26, Y+51	; 0x33
    899e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    89a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    89a2:	9f 9e       	mul	r9, r31
    89a4:	9c 9a       	sbi	0x13, 4	; 19
    89a6:	99 97       	sbiw	r26, 0x29	; 41
    89a8:	95 94       	asr	r9
    89aa:	93 91       	.word	0x9193	; ????
    89ac:	90 8f       	std	Z+24, r25	; 0x18
    89ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    89b0:	8b 8a       	std	Y+19, r8	; 0x13
    89b2:	89 88       	ldd	r8, Y+17	; 0x11
    89b4:	88 87       	std	Y+8, r24	; 0x08
    89b6:	86 85       	ldd	r24, Z+14	; 0x0e
    89b8:	85 84       	ldd	r8, Z+13	; 0x0d
    89ba:	84 84       	ldd	r8, Z+12	; 0x0c
    89bc:	83 83       	std	Z+3, r24	; 0x03
    89be:	83 83       	std	Z+3, r24	; 0x03
    89c0:	83 83       	std	Z+3, r24	; 0x03
    89c2:	83 83       	std	Z+3, r24	; 0x03
    89c4:	83 84       	ldd	r8, Z+11	; 0x0b
    89c6:	84 84       	ldd	r8, Z+12	; 0x0c
    89c8:	85 85       	ldd	r24, Z+13	; 0x0d
    89ca:	86 87       	std	Z+14, r24	; 0x0e
    89cc:	88 88       	ldd	r8, Y+16	; 0x10
    89ce:	89 8a       	std	Y+17, r8	; 0x11
    89d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    89d2:	8d 8f       	std	Y+29, r24	; 0x1d
    89d4:	90 91 93 94 	lds	r25, 0x9493
    89d8:	95 97       	sbiw	r26, 0x25	; 37
    89da:	99 9a       	sbi	0x13, 1	; 19
    89dc:	9c 9e       	mul	r9, r28
    89de:	9f a1       	ldd	r25, Y+39	; 0x27
    89e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    89e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    89e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    89e6:	af b1       	in	r26, 0x0f	; 15
    89e8:	b4 b6       	in	r11, 0x34	; 52
    89ea:	b8 ba       	out	0x18, r11	; 24
    89ec:	bd bf       	out	0x3d, r27	; 61
    89ee:	c1 c3       	rjmp	.+1922   	; 0x9172 <LBGetJoyPadState+0x50>
    89f0:	c6 c8       	rjmp	.-3700   	; 0x7b7e <ProcessMusic+0x66>
    89f2:	ca cc       	rjmp	.-1644   	; 0x8388 <waves+0x188>
    89f4:	ce d0       	rcall	.+412    	; 0x8b92 <waves+0x992>
    89f6:	d2 d4       	rcall	.+2468   	; 0x939c <LBLineIntersect+0x116>
    89f8:	d6 d7       	rcall	.+4012   	; 0x99a6 <print_final_score+0x16>
    89fa:	d7 d7       	rcall	.+4014   	; 0x99aa <print_final_score+0x1a>
    89fc:	d4 fe       	sbrs	r13, 4
    89fe:	e5 e9       	ldi	r30, 0x95	; 149
    8a00:	f9 f8       	.word	0xf8f9	; ????
    8a02:	f9 f5       	brne	.+126    	; 0x8a82 <waves+0x882>
    8a04:	eb e1       	ldi	r30, 0x1B	; 27
    8a06:	dd de       	rcall	.-582    	; 0x87c2 <waves+0x5c2>
    8a08:	e0 e2       	ldi	r30, 0x20	; 32
    8a0a:	e4 e5       	ldi	r30, 0x54	; 84
    8a0c:	e6 e5       	ldi	r30, 0x56	; 86
    8a0e:	e4 e2       	ldi	r30, 0x24	; 36
    8a10:	de d9       	rcall	.-3140   	; 0x7dce <ProcessMusic+0x2b6>
    8a12:	d2 ca       	rjmp	.-2652   	; 0x7fb8 <SetMixerWave+0x1e>
    8a14:	c1 b7       	in	r28, 0x31	; 49
    8a16:	ac a2       	std	Y+36, r10	; 0x24
    8a18:	99 91       	ld	r25, Y+
    8a1a:	8a 86       	std	Y+10, r8	; 0x0a
    8a1c:	83 81       	ldd	r24, Z+3	; 0x03
    8a1e:	80 80       	ld	r8, Z
    8a20:	81 82       	std	Z+1, r8	; 0x01
    8a22:	83 85       	ldd	r24, Z+11	; 0x0b
    8a24:	86 88       	ldd	r8, Z+22	; 0x16
    8a26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8a28:	8d 8f       	std	Y+29, r24	; 0x1d
    8a2a:	90 92 93 95 	sts	0x9593, r9
    8a2e:	96 97       	sbiw	r26, 0x26	; 38
    8a30:	98 99       	sbic	0x13, 0	; 19
    8a32:	9a 9b       	sbis	0x13, 2	; 19
    8a34:	9b 9c       	mul	r9, r11
    8a36:	9d 9d       	mul	r25, r13
    8a38:	9d 9e       	mul	r9, r29
    8a3a:	9e 9e       	mul	r9, r30
    8a3c:	9f 9f       	mul	r25, r31
    8a3e:	9f 9f       	mul	r25, r31
    8a40:	9f 9f       	mul	r25, r31
    8a42:	9f 9e       	mul	r9, r31
    8a44:	9e 9e       	mul	r9, r30
    8a46:	9d 9d       	mul	r25, r13
    8a48:	9d 9c       	mul	r9, r13
    8a4a:	9b 9b       	sbis	0x13, 3	; 19
    8a4c:	9a 99       	sbic	0x13, 2	; 19
    8a4e:	98 97       	sbiw	r26, 0x28	; 40
    8a50:	96 95       	lsr	r25
    8a52:	93 92       	.word	0x9293	; ????
    8a54:	90 8f       	std	Z+24, r25	; 0x18
    8a56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8a58:	8a 88       	ldd	r8, Y+18	; 0x12
    8a5a:	86 85       	ldd	r24, Z+14	; 0x0e
    8a5c:	83 82       	std	Z+3, r8	; 0x03
    8a5e:	81 80       	ldd	r8, Z+1	; 0x01
    8a60:	80 81       	ld	r24, Z
    8a62:	83 86       	std	Z+11, r8	; 0x0b
    8a64:	8a 91       	ld	r24, -Y
    8a66:	99 a2       	std	Y+33, r9	; 0x21
    8a68:	ac b7       	in	r26, 0x3c	; 60
    8a6a:	c1 ca       	rjmp	.-2686   	; 0x7fee <esmw+0x1e>
    8a6c:	d2 d9       	rcall	.-3164   	; 0x7e12 <ProcessMusic+0x2fa>
    8a6e:	de e2       	ldi	r29, 0x2E	; 46
    8a70:	e4 e5       	ldi	r30, 0x54	; 84
    8a72:	e6 e5       	ldi	r30, 0x56	; 86
    8a74:	e4 e2       	ldi	r30, 0x24	; 36
    8a76:	e0 de       	rcall	.-576    	; 0x8838 <waves+0x638>
    8a78:	dd e1       	ldi	r29, 0x1D	; 29
    8a7a:	eb f5       	brvc	.+122    	; 0x8af6 <waves+0x8f6>
    8a7c:	f9 f8       	.word	0xf8f9	; ????
    8a7e:	f9 00       	.word	0x00f9	; ????
    8a80:	07 08       	sbc	r0, r7
    8a82:	07 0b       	sbc	r16, r23
    8a84:	15 1f       	adc	r17, r21
    8a86:	23 22       	and	r2, r19
    8a88:	20 1e       	adc	r2, r16
    8a8a:	1c 1b       	sub	r17, r28
    8a8c:	1a 1b       	sub	r17, r26
    8a8e:	1c 1e       	adc	r1, r28
    8a90:	22 27       	eor	r18, r18
    8a92:	2e 36       	cpi	r18, 0x6E	; 110
    8a94:	3f 49       	sbci	r19, 0x9F	; 159
    8a96:	54 5e       	subi	r21, 0xE4	; 228
    8a98:	67 6f       	ori	r22, 0xF7	; 247
    8a9a:	76 7a       	andi	r23, 0xA6	; 166
    8a9c:	7e 7f       	andi	r23, 0xFE	; 254
    8a9e:	7f 7f       	andi	r23, 0xFF	; 255
    8aa0:	7f 7e       	andi	r23, 0xEF	; 239
    8aa2:	7d 7b       	andi	r23, 0xBD	; 189
    8aa4:	7a 78       	andi	r23, 0x8A	; 138
    8aa6:	76 74       	andi	r23, 0x46	; 70
    8aa8:	73 71       	andi	r23, 0x13	; 19
    8aaa:	70 6e       	ori	r23, 0xE0	; 224
    8aac:	6d 6b       	ori	r22, 0xBD	; 189
    8aae:	6a 69       	ori	r22, 0x9A	; 154
    8ab0:	68 67       	ori	r22, 0x78	; 120
    8ab2:	66 65       	ori	r22, 0x56	; 86
    8ab4:	65 64       	ori	r22, 0x45	; 69
    8ab6:	64 63       	ori	r22, 0x34	; 52
    8ab8:	63 62       	ori	r22, 0x23	; 35
    8aba:	62 62       	ori	r22, 0x22	; 34
    8abc:	61 61       	ori	r22, 0x11	; 17
    8abe:	61 61       	ori	r22, 0x11	; 17
    8ac0:	61 61       	ori	r22, 0x11	; 17
    8ac2:	61 62       	ori	r22, 0x21	; 33
    8ac4:	62 62       	ori	r22, 0x22	; 34
    8ac6:	63 63       	ori	r22, 0x33	; 51
    8ac8:	63 64       	ori	r22, 0x43	; 67
    8aca:	65 65       	ori	r22, 0x55	; 85
    8acc:	66 67       	ori	r22, 0x76	; 118
    8ace:	68 69       	ori	r22, 0x98	; 152
    8ad0:	6a 6b       	ori	r22, 0xBA	; 186
    8ad2:	6d 6e       	ori	r22, 0xED	; 237
    8ad4:	70 71       	andi	r23, 0x10	; 16
    8ad6:	73 74       	andi	r23, 0x43	; 67
    8ad8:	76 78       	andi	r23, 0x86	; 134
    8ada:	7a 7b       	andi	r23, 0xBA	; 186
    8adc:	7d 7e       	andi	r23, 0xED	; 237
    8ade:	7f 7f       	andi	r23, 0xFF	; 255
    8ae0:	7f 7f       	andi	r23, 0xFF	; 255
    8ae2:	7e 7a       	andi	r23, 0xAE	; 174
    8ae4:	76 6f       	ori	r23, 0xF6	; 246
    8ae6:	67 5e       	subi	r22, 0xE7	; 231
    8ae8:	54 49       	sbci	r21, 0x94	; 148
    8aea:	3f 36       	cpi	r19, 0x6F	; 111
    8aec:	2e 27       	eor	r18, r30
    8aee:	22 1e       	adc	r2, r18
    8af0:	1c 1b       	sub	r17, r28
    8af2:	1a 1b       	sub	r17, r26
    8af4:	1c 1e       	adc	r1, r28
    8af6:	20 22       	and	r2, r16
    8af8:	23 1f       	adc	r18, r19
    8afa:	15 0b       	sbc	r17, r21
    8afc:	07 08       	sbc	r0, r7
    8afe:	07 00       	.word	0x0007	; ????
    8b00:	1f 31       	cpi	r17, 0x1F	; 31
    8b02:	3d 44       	sbci	r19, 0x4D	; 77
    8b04:	4e 53       	subi	r20, 0x3E	; 62
    8b06:	54 56       	subi	r21, 0x64	; 100
    8b08:	5a 5f       	subi	r21, 0xFA	; 250
    8b0a:	64 69       	ori	r22, 0x94	; 148
    8b0c:	6e 74       	andi	r22, 0x4E	; 78
    8b0e:	76 79       	andi	r23, 0x96	; 150
    8b10:	7c 7f       	andi	r23, 0xFC	; 252
    8b12:	7f 7f       	andi	r23, 0xFF	; 255
    8b14:	7f 7f       	andi	r23, 0xFF	; 255
    8b16:	7f 7f       	andi	r23, 0xFF	; 255
    8b18:	7f 7f       	andi	r23, 0xFF	; 255
    8b1a:	7f 7f       	andi	r23, 0xFF	; 255
    8b1c:	7f 7f       	andi	r23, 0xFF	; 255
    8b1e:	7f 7f       	andi	r23, 0xFF	; 255
    8b20:	7f 7f       	andi	r23, 0xFF	; 255
    8b22:	7f 7f       	andi	r23, 0xFF	; 255
    8b24:	7f 7f       	andi	r23, 0xFF	; 255
    8b26:	7f 7f       	andi	r23, 0xFF	; 255
    8b28:	7f 7f       	andi	r23, 0xFF	; 255
    8b2a:	7f 7f       	andi	r23, 0xFF	; 255
    8b2c:	7f 7f       	andi	r23, 0xFF	; 255
    8b2e:	7f 7f       	andi	r23, 0xFF	; 255
    8b30:	7f 7f       	andi	r23, 0xFF	; 255
    8b32:	7f 7f       	andi	r23, 0xFF	; 255
    8b34:	7f 7f       	andi	r23, 0xFF	; 255
    8b36:	7f 7f       	andi	r23, 0xFF	; 255
    8b38:	7f 7f       	andi	r23, 0xFF	; 255
    8b3a:	7f 7f       	andi	r23, 0xFF	; 255
    8b3c:	7f 7f       	andi	r23, 0xFF	; 255
    8b3e:	7f 7f       	andi	r23, 0xFF	; 255
    8b40:	7f 7f       	andi	r23, 0xFF	; 255
    8b42:	7f 7f       	andi	r23, 0xFF	; 255
    8b44:	7f 7f       	andi	r23, 0xFF	; 255
    8b46:	7f 7f       	andi	r23, 0xFF	; 255
    8b48:	7f 7f       	andi	r23, 0xFF	; 255
    8b4a:	7f 7f       	andi	r23, 0xFF	; 255
    8b4c:	7f 7f       	andi	r23, 0xFF	; 255
    8b4e:	7f 7f       	andi	r23, 0xFF	; 255
    8b50:	7f 7f       	andi	r23, 0xFF	; 255
    8b52:	7f 7f       	andi	r23, 0xFF	; 255
    8b54:	7f 7f       	andi	r23, 0xFF	; 255
    8b56:	7f 7f       	andi	r23, 0xFF	; 255
    8b58:	7f 7f       	andi	r23, 0xFF	; 255
    8b5a:	7f 7f       	andi	r23, 0xFF	; 255
    8b5c:	7f 7f       	andi	r23, 0xFF	; 255
    8b5e:	7f 7f       	andi	r23, 0xFF	; 255
    8b60:	7f 7f       	andi	r23, 0xFF	; 255
    8b62:	7f 7f       	andi	r23, 0xFF	; 255
    8b64:	7f 7f       	andi	r23, 0xFF	; 255
    8b66:	7f 7f       	andi	r23, 0xFF	; 255
    8b68:	7f 7f       	andi	r23, 0xFF	; 255
    8b6a:	7f 7f       	andi	r23, 0xFF	; 255
    8b6c:	7f 7f       	andi	r23, 0xFF	; 255
    8b6e:	7f 7f       	andi	r23, 0xFF	; 255
    8b70:	7f 7f       	andi	r23, 0xFF	; 255
    8b72:	7f 7f       	andi	r23, 0xFF	; 255
    8b74:	7f 7f       	andi	r23, 0xFF	; 255
    8b76:	7f 7f       	andi	r23, 0xFF	; 255
    8b78:	7f 7f       	andi	r23, 0xFF	; 255
    8b7a:	7f 7c       	andi	r23, 0xCF	; 207
    8b7c:	78 71       	andi	r23, 0x18	; 24
    8b7e:	68 4c       	sbci	r22, 0xC8	; 200
    8b80:	2c 1c       	adc	r2, r12
    8b82:	12 0c       	add	r1, r2
    8b84:	0a 0b       	sbc	r16, r26
    8b86:	0a 05       	cpc	r16, r10
    8b88:	fd f3       	brhs	.-2      	; 0x8b88 <waves+0x988>
    8b8a:	e9 df       	rcall	.-46     	; 0x8b5e <waves+0x95e>
    8b8c:	d4 ca       	rjmp	.-2648   	; 0x8136 <steptable+0x12e>
    8b8e:	c0 b7       	in	r28, 0x30	; 48
    8b90:	ae a6       	std	Y+46, r10	; 0x2e
    8b92:	9e 97       	sbiw	r26, 0x2e	; 46
    8b94:	91 8b       	std	Z+17, r25	; 0x11
    8b96:	86 85       	ldd	r24, Z+14	; 0x0e
    8b98:	82 80       	ldd	r8, Z+2	; 0x02
    8b9a:	80 80       	ld	r8, Z
    8b9c:	80 80       	ld	r8, Z
    8b9e:	80 80       	ld	r8, Z
    8ba0:	80 80       	ld	r8, Z
    8ba2:	80 80       	ld	r8, Z
    8ba4:	80 80       	ld	r8, Z
    8ba6:	80 80       	ld	r8, Z
    8ba8:	80 80       	ld	r8, Z
    8baa:	80 80       	ld	r8, Z
    8bac:	80 80       	ld	r8, Z
    8bae:	80 80       	ld	r8, Z
    8bb0:	80 80       	ld	r8, Z
    8bb2:	80 80       	ld	r8, Z
    8bb4:	80 80       	ld	r8, Z
    8bb6:	80 80       	ld	r8, Z
    8bb8:	80 80       	ld	r8, Z
    8bba:	80 80       	ld	r8, Z
    8bbc:	80 80       	ld	r8, Z
    8bbe:	80 80       	ld	r8, Z
    8bc0:	80 80       	ld	r8, Z
    8bc2:	80 80       	ld	r8, Z
    8bc4:	80 80       	ld	r8, Z
    8bc6:	80 80       	ld	r8, Z
    8bc8:	80 80       	ld	r8, Z
    8bca:	80 80       	ld	r8, Z
    8bcc:	80 80       	ld	r8, Z
    8bce:	80 80       	ld	r8, Z
    8bd0:	80 80       	ld	r8, Z
    8bd2:	80 80       	ld	r8, Z
    8bd4:	80 80       	ld	r8, Z
    8bd6:	80 80       	ld	r8, Z
    8bd8:	80 80       	ld	r8, Z
    8bda:	80 80       	ld	r8, Z
    8bdc:	80 80       	ld	r8, Z
    8bde:	80 80       	ld	r8, Z
    8be0:	80 80       	ld	r8, Z
    8be2:	80 80       	ld	r8, Z
    8be4:	80 80       	ld	r8, Z
    8be6:	80 80       	ld	r8, Z
    8be8:	80 80       	ld	r8, Z
    8bea:	80 80       	ld	r8, Z
    8bec:	80 80       	ld	r8, Z
    8bee:	80 80       	ld	r8, Z
    8bf0:	80 80       	ld	r8, Z
    8bf2:	80 80       	ld	r8, Z
    8bf4:	80 87       	std	Z+8, r24	; 0x08
    8bf6:	91 9d       	mul	r25, r1
    8bf8:	ac c4       	rjmp	.+2392   	; 0x9552 <init_shot_state+0x22>
    8bfa:	cb d4       	rcall	.+2454   	; 0x9592 <set_shot_animations+0x28>
    8bfc:	dd f2       	brhs	.-74     	; 0x8bb4 <waves+0x9b4>
    8bfe:	fa fa       	.word	0xfafa	; ????

00008c00 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8c00:	90 91 bd 0b 	lds	r25, 0x0BBD
    8c04:	e0 e9       	ldi	r30, 0x90	; 144
    8c06:	fa e0       	ldi	r31, 0x0A	; 10
    8c08:	80 e0       	ldi	r24, 0x00	; 0
    8c0a:	89 17       	cp	r24, r25
    8c0c:	49 f0       	breq	.+18     	; 0x8c20 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    8c0e:	a0 81       	ld	r26, Z
    8c10:	b1 81       	ldd	r27, Z+1	; 0x01
    8c12:	a0 5e       	subi	r26, 0xE0	; 224
    8c14:	be 4f       	sbci	r27, 0xFE	; 254
    8c16:	22 81       	ldd	r18, Z+2	; 0x02
    8c18:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8c1a:	8f 5f       	subi	r24, 0xFF	; 255
    8c1c:	33 96       	adiw	r30, 0x03	; 3
    8c1e:	f5 cf       	rjmp	.-22     	; 0x8c0a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8c20:	08 95       	ret

00008c22 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8c22:	80 93 00 01 	sts	0x0100, r24
    8c26:	08 95       	ret

00008c28 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8c28:	2f 92       	push	r2
    8c2a:	3f 92       	push	r3
    8c2c:	4f 92       	push	r4
    8c2e:	5f 92       	push	r5
    8c30:	6f 92       	push	r6
    8c32:	7f 92       	push	r7
    8c34:	8f 92       	push	r8
    8c36:	9f 92       	push	r9
    8c38:	af 92       	push	r10
    8c3a:	bf 92       	push	r11
    8c3c:	cf 92       	push	r12
    8c3e:	df 92       	push	r13
    8c40:	ef 92       	push	r14
    8c42:	ff 92       	push	r15
    8c44:	0f 93       	push	r16
    8c46:	1f 93       	push	r17
    8c48:	cf 93       	push	r28
    8c4a:	df 93       	push	r29
    8c4c:	00 d0       	rcall	.+0      	; 0x8c4e <ProcessSprites+0x26>
    8c4e:	1f 92       	push	r1
    8c50:	cd b7       	in	r28, 0x3d	; 61
    8c52:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8c54:	10 92 bd 0b 	sts	0x0BBD, r1
		if(!spritesOn) return;
    8c58:	80 91 00 01 	lds	r24, 0x0100
    8c5c:	88 23       	and	r24, r24
    8c5e:	09 f4       	brne	.+2      	; 0x8c62 <ProcessSprites+0x3a>
    8c60:	a1 c0       	rjmp	.+322    	; 0x8da4 <ProcessSprites+0x17c>
    8c62:	e8 e6       	ldi	r30, 0x68	; 104
    8c64:	ce 2e       	mov	r12, r30
    8c66:	e4 e0       	ldi	r30, 0x04	; 4
    8c68:	de 2e       	mov	r13, r30
    8c6a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    8c6c:	f6 01       	movw	r30, r12
    8c6e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8c70:	80 3f       	cpi	r24, 0xF0	; 240
    8c72:	09 f4       	brne	.+2      	; 0x8c76 <ProcessSprites+0x4e>
    8c74:	79 c0       	rjmp	.+242    	; 0x8d68 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8c76:	91 81       	ldd	r25, Z+1	; 0x01
    8c78:	29 2f       	mov	r18, r25
    8c7a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    8c7c:	28 2e       	mov	r2, r24
    8c7e:	26 94       	lsr	r2
    8c80:	26 94       	lsr	r2
    8c82:	26 94       	lsr	r2
				dx=ssx&0x7;
    8c84:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8c86:	19 f0       	breq	.+6      	; 0x8c8e <ProcessSprites+0x66>
    8c88:	72 e0       	ldi	r23, 0x02	; 2
    8c8a:	47 2e       	mov	r4, r23
    8c8c:	02 c0       	rjmp	.+4      	; 0x8c92 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    8c8e:	44 24       	eor	r4, r4
    8c90:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8c92:	63 e0       	ldi	r22, 0x03	; 3
    8c94:	36 95       	lsr	r19
    8c96:	27 95       	ror	r18
    8c98:	6a 95       	dec	r22
    8c9a:	e1 f7       	brne	.-8      	; 0x8c94 <ProcessSprites+0x6c>
    8c9c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    8c9e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    8ca0:	19 f0       	breq	.+6      	; 0x8ca8 <ProcessSprites+0x80>
    8ca2:	52 e0       	ldi	r21, 0x02	; 2
    8ca4:	55 2e       	mov	r5, r21
    8ca6:	02 c0       	rjmp	.+4      	; 0x8cac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    8ca8:	55 24       	eor	r5, r5
    8caa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8cac:	29 2f       	mov	r18, r25
    8cae:	30 e0       	ldi	r19, 0x00	; 0
    8cb0:	32 2f       	mov	r19, r18
    8cb2:	22 27       	eor	r18, r18
    8cb4:	a9 01       	movw	r20, r18
    8cb6:	48 0f       	add	r20, r24
    8cb8:	51 1d       	adc	r21, r1
    8cba:	5b 83       	std	Y+3, r21	; 0x03
    8cbc:	4a 83       	std	Y+2, r20	; 0x02
    8cbe:	e1 2c       	mov	r14, r1
    8cc0:	f1 2c       	mov	r15, r1
    8cc2:	94 ee       	ldi	r25, 0xE4	; 228
    8cc4:	93 0d       	add	r25, r3
    8cc6:	99 83       	std	Y+1, r25	; 0x01
    8cc8:	03 2d       	mov	r16, r3
    8cca:	0e 0d       	add	r16, r14
    8ccc:	0c 31       	cpi	r16, 0x1C	; 28
    8cce:	10 f0       	brcs	.+4      	; 0x8cd4 <ProcessSprites+0xac>
    8cd0:	09 81       	ldd	r16, Y+1	; 0x01
    8cd2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8cd4:	5e e1       	ldi	r21, 0x1E	; 30
    8cd6:	05 9f       	mul	r16, r21
    8cd8:	80 01       	movw	r16, r0
    8cda:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8cdc:	be 2c       	mov	r11, r14
    8cde:	aa 24       	eor	r10, r10
    8ce0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    8ce2:	ed e1       	ldi	r30, 0x1D	; 29
    8ce4:	e7 15       	cp	r30, r7
    8ce6:	18 f4       	brcc	.+6      	; 0x8cee <ProcessSprites+0xc6>
    8ce8:	82 ee       	ldi	r24, 0xE2	; 226
    8cea:	87 0d       	add	r24, r7
    8cec:	01 c0       	rjmp	.+2      	; 0x8cf0 <ProcessSprites+0xc8>
    8cee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    8cf0:	a8 01       	movw	r20, r16
    8cf2:	48 0f       	add	r20, r24
    8cf4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    8cf6:	ca 01       	movw	r24, r20
    8cf8:	80 5e       	subi	r24, 0xE0	; 224
    8cfa:	9e 4f       	sbci	r25, 0xFE	; 254
    8cfc:	4c 01       	movw	r8, r24
    8cfe:	fc 01       	movw	r30, r24
    8d00:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8d02:	88 31       	cpi	r24, 0x18	; 24
    8d04:	e0 f0       	brcs	.+56     	; 0x8d3e <ProcessSprites+0x116>
    8d06:	60 91 bd 0b 	lds	r22, 0x0BBD
    8d0a:	68 31       	cpi	r22, 0x18	; 24
    8d0c:	f8 f4       	brcc	.+62     	; 0x8d4c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    8d0e:	26 2f       	mov	r18, r22
    8d10:	30 e0       	ldi	r19, 0x00	; 0
    8d12:	f9 01       	movw	r30, r18
    8d14:	ee 0f       	add	r30, r30
    8d16:	ff 1f       	adc	r31, r31
    8d18:	e2 0f       	add	r30, r18
    8d1a:	f3 1f       	adc	r31, r19
    8d1c:	e0 57       	subi	r30, 0x70	; 112
    8d1e:	f5 4f       	sbci	r31, 0xF5	; 245
    8d20:	51 83       	std	Z+1, r21	; 0x01
    8d22:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8d24:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8d26:	0e 94 49 37 	call	0x6e92	; 0x6e92 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    8d2a:	80 91 bd 0b 	lds	r24, 0x0BBD
    8d2e:	f4 01       	movw	r30, r8
    8d30:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8d32:	91 e0       	ldi	r25, 0x01	; 1
    8d34:	98 0f       	add	r25, r24
    8d36:	90 93 bd 0b 	sts	0x0BBD, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    8d3a:	88 31       	cpi	r24, 0x18	; 24
    8d3c:	38 f4       	brcc	.+14     	; 0x8d4c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    8d3e:	2a 81       	ldd	r18, Y+2	; 0x02
    8d40:	3b 81       	ldd	r19, Y+3	; 0x03
    8d42:	a5 01       	movw	r20, r10
    8d44:	68 2f       	mov	r22, r24
    8d46:	86 2d       	mov	r24, r6
    8d48:	0e 94 da 37 	call	0x6fb4	; 0x6fb4 <BlitSprite>
    8d4c:	ff ef       	ldi	r31, 0xFF	; 255
    8d4e:	af 1a       	sub	r10, r31
    8d50:	bf 0a       	sbc	r11, r31
    8d52:	73 94       	inc	r7
    8d54:	87 2d       	mov	r24, r7
    8d56:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8d58:	84 15       	cp	r24, r4
    8d5a:	18 f2       	brcs	.-122    	; 0x8ce2 <ProcessSprites+0xba>
    8d5c:	4f ef       	ldi	r20, 0xFF	; 255
    8d5e:	e4 1a       	sub	r14, r20
    8d60:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8d62:	e5 14       	cp	r14, r5
    8d64:	08 f4       	brcc	.+2      	; 0x8d68 <ProcessSprites+0x140>
    8d66:	b0 cf       	rjmp	.-160    	; 0x8cc8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8d68:	63 94       	inc	r6
    8d6a:	84 e0       	ldi	r24, 0x04	; 4
    8d6c:	c8 0e       	add	r12, r24
    8d6e:	d1 1c       	adc	r13, r1
    8d70:	9a e0       	ldi	r25, 0x0A	; 10
    8d72:	69 12       	cpse	r6, r25
    8d74:	7b cf       	rjmp	.-266    	; 0x8c6c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8d76:	0f 90       	pop	r0
    8d78:	0f 90       	pop	r0
    8d7a:	0f 90       	pop	r0
    8d7c:	df 91       	pop	r29
    8d7e:	cf 91       	pop	r28
    8d80:	1f 91       	pop	r17
    8d82:	0f 91       	pop	r16
    8d84:	ff 90       	pop	r15
    8d86:	ef 90       	pop	r14
    8d88:	df 90       	pop	r13
    8d8a:	cf 90       	pop	r12
    8d8c:	bf 90       	pop	r11
    8d8e:	af 90       	pop	r10
    8d90:	9f 90       	pop	r9
    8d92:	8f 90       	pop	r8
    8d94:	7f 90       	pop	r7
    8d96:	6f 90       	pop	r6
    8d98:	5f 90       	pop	r5
    8d9a:	4f 90       	pop	r4
    8d9c:	3f 90       	pop	r3
    8d9e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    8da0:	0c 94 00 46 	jmp	0x8c00	; 0x8c00 <RestoreBackground>

	}
    8da4:	0f 90       	pop	r0
    8da6:	0f 90       	pop	r0
    8da8:	0f 90       	pop	r0
    8daa:	df 91       	pop	r29
    8dac:	cf 91       	pop	r28
    8dae:	1f 91       	pop	r17
    8db0:	0f 91       	pop	r16
    8db2:	ff 90       	pop	r15
    8db4:	ef 90       	pop	r14
    8db6:	df 90       	pop	r13
    8db8:	cf 90       	pop	r12
    8dba:	bf 90       	pop	r11
    8dbc:	af 90       	pop	r10
    8dbe:	9f 90       	pop	r9
    8dc0:	8f 90       	pop	r8
    8dc2:	7f 90       	pop	r7
    8dc4:	6f 90       	pop	r6
    8dc6:	5f 90       	pop	r5
    8dc8:	4f 90       	pop	r4
    8dca:	3f 90       	pop	r3
    8dcc:	2f 90       	pop	r2
    8dce:	08 95       	ret

00008dd0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    8dd0:	df 92       	push	r13
    8dd2:	ef 92       	push	r14
    8dd4:	ff 92       	push	r15
    8dd6:	0f 93       	push	r16
    8dd8:	1f 93       	push	r17
    8dda:	cf 93       	push	r28
    8ddc:	df 93       	push	r29
    8dde:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    8de0:	fb 01       	movw	r30, r22
    8de2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    8de4:	31 96       	adiw	r30, 0x01	; 1
    8de6:	64 91       	lpm	r22, Z
    8de8:	5f ef       	ldi	r21, 0xFF	; 255
    8dea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    8dec:	24 2f       	mov	r18, r20
    8dee:	21 70       	andi	r18, 0x01	; 1
    8df0:	40 ff       	sbrs	r20, 0
    8df2:	04 c0       	rjmp	.+8      	; 0x8dfc <MapSprite2+0x2c>
			x=(mapWidth-1);
    8df4:	95 2f       	mov	r25, r21
			dx=-1;
    8df6:	ff 24       	eor	r15, r15
    8df8:	fa 94       	dec	r15
    8dfa:	03 c0       	rjmp	.+6      	; 0x8e02 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    8dfc:	ff 24       	eor	r15, r15
    8dfe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8e00:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8e02:	41 ff       	sbrs	r20, 1
    8e04:	05 c0       	rjmp	.+10     	; 0x8e10 <MapSprite2+0x40>
			y=(mapHeight-1);
    8e06:	7f ef       	ldi	r23, 0xFF	; 255
    8e08:	76 0f       	add	r23, r22
			dy=-1;
    8e0a:	ee 24       	eor	r14, r14
    8e0c:	ea 94       	dec	r14
    8e0e:	03 c0       	rjmp	.+6      	; 0x8e16 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8e10:	ee 24       	eor	r14, r14
    8e12:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8e14:	70 e0       	ldi	r23, 0x00	; 0
    8e16:	21 11       	cpse	r18, r1
    8e18:	01 c0       	rjmp	.+2      	; 0x8e1c <MapSprite2+0x4c>
    8e1a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8e1c:	00 e0       	ldi	r16, 0x00	; 0
    8e1e:	06 17       	cp	r16, r22
    8e20:	09 f1       	breq	.+66     	; 0x8e64 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8e22:	71 03       	mulsu	r23, r17
    8e24:	e0 01       	movw	r28, r0
    8e26:	11 24       	eor	r1, r1
    8e28:	d8 2e       	mov	r13, r24
    8e2a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    8e2c:	8d 15       	cp	r24, r13
    8e2e:	b1 f0       	breq	.+44     	; 0x8e5c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8e30:	9e 01       	movw	r18, r28
    8e32:	29 0f       	add	r18, r25
    8e34:	31 1d       	adc	r19, r1
    8e36:	97 fd       	sbrc	r25, 7
    8e38:	3a 95       	dec	r19
    8e3a:	2e 5f       	subi	r18, 0xFE	; 254
    8e3c:	3f 4f       	sbci	r19, 0xFF	; 255
    8e3e:	fd 01       	movw	r30, r26
    8e40:	e2 0f       	add	r30, r18
    8e42:	f3 1f       	adc	r31, r19
    8e44:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8e46:	34 e0       	ldi	r19, 0x04	; 4
    8e48:	83 9f       	mul	r24, r19
    8e4a:	f0 01       	movw	r30, r0
    8e4c:	11 24       	eor	r1, r1
    8e4e:	e8 59       	subi	r30, 0x98	; 152
    8e50:	fb 4f       	sbci	r31, 0xFB	; 251
    8e52:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8e54:	8f 5f       	subi	r24, 0xFF	; 255
    8e56:	43 83       	std	Z+3, r20	; 0x03
    8e58:	9f 0d       	add	r25, r15
    8e5a:	e8 cf       	rjmp	.-48     	; 0x8e2c <MapSprite2+0x5c>
    8e5c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    8e5e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8e60:	95 2f       	mov	r25, r21
    8e62:	dd cf       	rjmp	.-70     	; 0x8e1e <MapSprite2+0x4e>
	    }
	}
    8e64:	df 91       	pop	r29
    8e66:	cf 91       	pop	r28
    8e68:	1f 91       	pop	r17
    8e6a:	0f 91       	pop	r16
    8e6c:	ff 90       	pop	r15
    8e6e:	ef 90       	pop	r14
    8e70:	df 90       	pop	r13
    8e72:	08 95       	ret

00008e74 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8e74:	0f 93       	push	r16
    8e76:	cf 93       	push	r28
    8e78:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    8e7a:	30 e0       	ldi	r19, 0x00	; 0
    8e7c:	30 17       	cp	r19, r16
    8e7e:	e1 f0       	breq	.+56     	; 0x8eb8 <MoveSprite+0x44>
    8e80:	b4 2f       	mov	r27, r20
    8e82:	a0 e2       	ldi	r26, 0x20	; 32
    8e84:	a4 0f       	add	r26, r20
    8e86:	78 2f       	mov	r23, r24
    8e88:	72 0f       	add	r23, r18
    8e8a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    8e8c:	87 17       	cp	r24, r23
    8e8e:	81 f0       	breq	.+32     	; 0x8eb0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8e90:	c4 e0       	ldi	r28, 0x04	; 4
    8e92:	8c 9f       	mul	r24, r28
    8e94:	f0 01       	movw	r30, r0
    8e96:	11 24       	eor	r1, r1
    8e98:	e8 59       	subi	r30, 0x98	; 152
    8e9a:	fb 4f       	sbci	r31, 0xFB	; 251
    8e9c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    8e9e:	41 3e       	cpi	r20, 0xE1	; 225
    8ea0:	51 05       	cpc	r21, r1
    8ea2:	14 f0       	brlt	.+4      	; 0x8ea8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    8ea4:	a1 83       	std	Z+1, r26	; 0x01
    8ea6:	01 c0       	rjmp	.+2      	; 0x8eaa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    8ea8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    8eaa:	8f 5f       	subi	r24, 0xFF	; 255
    8eac:	98 5f       	subi	r25, 0xF8	; 248
    8eae:	ee cf       	rjmp	.-36     	; 0x8e8c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    8eb0:	3f 5f       	subi	r19, 0xFF	; 255
    8eb2:	48 5f       	subi	r20, 0xF8	; 248
    8eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    8eb6:	e2 cf       	rjmp	.-60     	; 0x8e7c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    8eb8:	cf 91       	pop	r28
    8eba:	0f 91       	pop	r16
    8ebc:	08 95       	ret

00008ebe <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    8ebe:	08 95       	ret

00008ec0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    8ec0:	e8 e6       	ldi	r30, 0x68	; 104
    8ec2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    8ec4:	80 ef       	ldi	r24, 0xF0	; 240
    8ec6:	80 83       	st	Z, r24
    8ec8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    8eca:	94 e0       	ldi	r25, 0x04	; 4
    8ecc:	e0 39       	cpi	r30, 0x90	; 144
    8ece:	f9 07       	cpc	r31, r25
    8ed0:	d1 f7       	brne	.-12     	; 0x8ec6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    8ed2:	08 95       	ret

00008ed4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    8ed4:	4f 92       	push	r4
    8ed6:	5f 92       	push	r5
    8ed8:	6f 92       	push	r6
    8eda:	7f 92       	push	r7
    8edc:	8f 92       	push	r8
    8ede:	9f 92       	push	r9
    8ee0:	af 92       	push	r10
    8ee2:	bf 92       	push	r11
    8ee4:	cf 92       	push	r12
    8ee6:	df 92       	push	r13
    8ee8:	ef 92       	push	r14
    8eea:	ff 92       	push	r15
    8eec:	0f 93       	push	r16
    8eee:	1f 93       	push	r17
    8ef0:	cf 93       	push	r28
    8ef2:	df 93       	push	r29
    8ef4:	68 2e       	mov	r6, r24
    8ef6:	56 2e       	mov	r5, r22
    8ef8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    8efa:	fa 01       	movw	r30, r20
    8efc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    8efe:	31 96       	adiw	r30, 0x01	; 1
    8f00:	84 90       	lpm	r8, Z
    8f02:	c7 2c       	mov	r12, r7
    8f04:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8f06:	00 e0       	ldi	r16, 0x00	; 0
    8f08:	10 e0       	ldi	r17, 0x00	; 0
    8f0a:	91 2c       	mov	r9, r1
    8f0c:	98 14       	cp	r9, r8
    8f0e:	f1 f0       	breq	.+60     	; 0x8f4c <DrawMap2+0x78>
    8f10:	c0 e0       	ldi	r28, 0x00	; 0
    8f12:	d0 e0       	ldi	r29, 0x00	; 0
    8f14:	58 01       	movw	r10, r16
    8f16:	f2 e0       	ldi	r31, 0x02	; 2
    8f18:	af 0e       	add	r10, r31
    8f1a:	b1 1c       	adc	r11, r1
    8f1c:	49 2c       	mov	r4, r9
    8f1e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8f20:	c7 15       	cp	r28, r7
    8f22:	80 f4       	brcc	.+32     	; 0x8f44 <DrawMap2+0x70>
    8f24:	95 01       	movw	r18, r10
    8f26:	2c 0f       	add	r18, r28
    8f28:	3d 1f       	adc	r19, r29
    8f2a:	f7 01       	movw	r30, r14
    8f2c:	e2 0f       	add	r30, r18
    8f2e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8f30:	24 91       	lpm	r18, Z
    8f32:	42 2f       	mov	r20, r18
    8f34:	50 e0       	ldi	r21, 0x00	; 0
    8f36:	64 2d       	mov	r22, r4
    8f38:	8c 2f       	mov	r24, r28
    8f3a:	86 0d       	add	r24, r6
    8f3c:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
    8f40:	21 96       	adiw	r28, 0x01	; 1
    8f42:	ee cf       	rjmp	.-36     	; 0x8f20 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8f44:	93 94       	inc	r9
    8f46:	0c 0d       	add	r16, r12
    8f48:	1d 1d       	adc	r17, r13
    8f4a:	e0 cf       	rjmp	.-64     	; 0x8f0c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    8f4c:	df 91       	pop	r29
    8f4e:	cf 91       	pop	r28
    8f50:	1f 91       	pop	r17
    8f52:	0f 91       	pop	r16
    8f54:	ff 90       	pop	r15
    8f56:	ef 90       	pop	r14
    8f58:	df 90       	pop	r13
    8f5a:	cf 90       	pop	r12
    8f5c:	bf 90       	pop	r11
    8f5e:	af 90       	pop	r10
    8f60:	9f 90       	pop	r9
    8f62:	8f 90       	pop	r8
    8f64:	7f 90       	pop	r7
    8f66:	6f 90       	pop	r6
    8f68:	5f 90       	pop	r5
    8f6a:	4f 90       	pop	r4
    8f6c:	08 95       	ret

00008f6e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    8f6e:	df 92       	push	r13
    8f70:	ef 92       	push	r14
    8f72:	ff 92       	push	r15
    8f74:	0f 93       	push	r16
    8f76:	1f 93       	push	r17
    8f78:	cf 93       	push	r28
    8f7a:	df 93       	push	r29
    8f7c:	f6 2e       	mov	r15, r22
    8f7e:	04 2f       	mov	r16, r20
    8f80:	d2 2e       	mov	r13, r18
    8f82:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8f84:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8f86:	8a e0       	ldi	r24, 0x0A	; 10
    8f88:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    8f8a:	01 11       	cpse	r16, r1
    8f8c:	02 c0       	rjmp	.+4      	; 0x8f92 <PrintByte+0x24>
    8f8e:	11 11       	cpse	r17, r1
    8f90:	07 c0       	rjmp	.+14     	; 0x8fa0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8f92:	80 2f       	mov	r24, r16
    8f94:	6e 2d       	mov	r22, r14
    8f96:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    8f9a:	40 e1       	ldi	r20, 0x10	; 16
    8f9c:	49 0f       	add	r20, r25
    8f9e:	05 c0       	rjmp	.+10     	; 0x8faa <PrintByte+0x3c>
		}else{
			if(zeropad){
    8fa0:	dd 20       	and	r13, r13
    8fa2:	11 f0       	breq	.+4      	; 0x8fa8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    8fa4:	40 e1       	ldi	r20, 0x10	; 16
    8fa6:	01 c0       	rjmp	.+2      	; 0x8faa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    8fa8:	40 e0       	ldi	r20, 0x00	; 0
    8faa:	6f 2d       	mov	r22, r15
    8fac:	8c 2f       	mov	r24, r28
    8fae:	0e 94 0a 3a 	call	0x7414	; 0x7414 <SetFont>
			}
		}
		val=val/10;
    8fb2:	80 2f       	mov	r24, r16
    8fb4:	6e 2d       	mov	r22, r14
    8fb6:	0e 94 6b 61 	call	0xc2d6	; 0xc2d6 <__udivmodqi4>
    8fba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    8fbc:	1f 5f       	subi	r17, 0xFF	; 255
    8fbe:	21 97       	sbiw	r28, 0x01	; 1
    8fc0:	13 30       	cpi	r17, 0x03	; 3
    8fc2:	19 f7       	brne	.-58     	; 0x8f8a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    8fc4:	df 91       	pop	r29
    8fc6:	cf 91       	pop	r28
    8fc8:	1f 91       	pop	r17
    8fca:	0f 91       	pop	r16
    8fcc:	ff 90       	pop	r15
    8fce:	ef 90       	pop	r14
    8fd0:	df 90       	pop	r13
    8fd2:	08 95       	ret

00008fd4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    8fd4:	0f 93       	push	r16
    8fd6:	1f 93       	push	r17
    8fd8:	cf 93       	push	r28
    8fda:	df 93       	push	r29
    8fdc:	06 2f       	mov	r16, r22
    8fde:	c4 2f       	mov	r28, r20
    8fe0:	d5 2f       	mov	r29, r21
    8fe2:	18 2f       	mov	r17, r24
    8fe4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    8fe6:	fe 01       	movw	r30, r28
    8fe8:	44 91       	lpm	r20, Z
		if(c!=0){
    8fea:	44 23       	and	r20, r20
    8fec:	49 f0       	breq	.+18     	; 0x9000 <Print+0x2c>
			c=((c&127)-32);			
    8fee:	4f 77       	andi	r20, 0x7F	; 127
    8ff0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    8ff2:	60 2f       	mov	r22, r16
    8ff4:	8c 2f       	mov	r24, r28
    8ff6:	81 0f       	add	r24, r17
    8ff8:	0e 94 0a 3a 	call	0x7414	; 0x7414 <SetFont>
    8ffc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    8ffe:	f3 cf       	rjmp	.-26     	; 0x8fe6 <Print+0x12>
	
}
    9000:	df 91       	pop	r29
    9002:	cf 91       	pop	r28
    9004:	1f 91       	pop	r17
    9006:	0f 91       	pop	r16
    9008:	08 95       	ret

0000900a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    900a:	40 52       	subi	r20, 0x20	; 32
    900c:	0c 94 0a 3a 	jmp	0x7414	; 0x7414 <SetFont>

00009010 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9010:	0f 93       	push	r16
    9012:	1f 93       	push	r17
    9014:	cf 93       	push	r28
    9016:	df 93       	push	r29
    9018:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    901a:	c0 e0       	ldi	r28, 0x00	; 0
    901c:	d0 e0       	ldi	r29, 0x00	; 0
    901e:	c0 17       	cp	r28, r16
    9020:	d1 07       	cpc	r29, r17
    9022:	44 f4       	brge	.+16     	; 0x9034 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9024:	0e 94 24 3a 	call	0x7448	; 0x7448 <GetVsyncFlag>
    9028:	88 23       	and	r24, r24
    902a:	e1 f3       	breq	.-8      	; 0x9024 <WaitVsync+0x14>
		ClearVsyncFlag();		
    902c:	0e 94 28 3a 	call	0x7450	; 0x7450 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9030:	21 96       	adiw	r28, 0x01	; 1
    9032:	f5 cf       	rjmp	.-22     	; 0x901e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9034:	df 91       	pop	r29
    9036:	cf 91       	pop	r28
    9038:	1f 91       	pop	r17
    903a:	0f 91       	pop	r16
    903c:	08 95       	ret

0000903e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    903e:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    9042:	10 92 bf 0b 	sts	0x0BBF, r1
	fadeActive=true;
    9046:	81 e0       	ldi	r24, 0x01	; 1
    9048:	80 93 be 0b 	sts	0x0BBE, r24
		
	if(blocking){
    904c:	66 23       	and	r22, r22
    904e:	21 f0       	breq	.+8      	; 0x9058 <doFade+0x1a>
		while(fadeActive==true);
    9050:	80 91 be 0b 	lds	r24, 0x0BBE
    9054:	81 11       	cpse	r24, r1
    9056:	fc cf       	rjmp	.-8      	; 0x9050 <doFade+0x12>
    9058:	08 95       	ret

0000905a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    905a:	81 11       	cpse	r24, r1
    905c:	03 c0       	rjmp	.+6      	; 0x9064 <FadeIn+0xa>
		DDRC=0xff;
    905e:	8f ef       	ldi	r24, 0xFF	; 255
    9060:	87 b9       	out	0x07, r24	; 7
		return;
    9062:	08 95       	ret
	}
	fadeStep=1;
    9064:	91 e0       	ldi	r25, 0x01	; 1
    9066:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=1;
    906a:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    906e:	0c 94 1f 48 	jmp	0x903e	; 0x903e <doFade>

00009072 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9072:	81 11       	cpse	r24, r1
    9074:	02 c0       	rjmp	.+4      	; 0x907a <FadeOut+0x8>
		DDRC=0;
    9076:	17 b8       	out	0x07, r1	; 7
		return;
    9078:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    907a:	9c e0       	ldi	r25, 0x0C	; 12
    907c:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=-1;
    9080:	9f ef       	ldi	r25, 0xFF	; 255
    9082:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    9086:	0c 94 1f 48 	jmp	0x903e	; 0x903e <doFade>

0000908a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    908a:	80 91 be 0b 	lds	r24, 0x0BBE
    908e:	88 23       	and	r24, r24
    9090:	01 f1       	breq	.+64     	; 0x90d2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9092:	80 91 bf 0b 	lds	r24, 0x0BBF
    9096:	81 11       	cpse	r24, r1
    9098:	19 c0       	rjmp	.+50     	; 0x90cc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    909a:	80 91 bb 0b 	lds	r24, 0x0BBB
    909e:	80 93 bf 0b 	sts	0x0BBF, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    90a2:	e0 91 c0 0b 	lds	r30, 0x0BC0
    90a6:	f0 e0       	ldi	r31, 0x00	; 0
    90a8:	e7 51       	subi	r30, 0x17	; 23
    90aa:	ff 4f       	sbci	r31, 0xFF	; 255
    90ac:	e4 91       	lpm	r30, Z
    90ae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    90b0:	90 91 bc 0b 	lds	r25, 0x0BBC
    90b4:	80 91 c0 0b 	lds	r24, 0x0BC0
    90b8:	89 0f       	add	r24, r25
    90ba:	80 93 c0 0b 	sts	0x0BC0, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    90be:	88 23       	and	r24, r24
    90c0:	11 f0       	breq	.+4      	; 0x90c6 <ProcessFading+0x3c>
    90c2:	8d 30       	cpi	r24, 0x0D	; 13
    90c4:	31 f4       	brne	.+12     	; 0x90d2 <ProcessFading+0x48>
				fadeActive=false;
    90c6:	10 92 be 0b 	sts	0x0BBE, r1
    90ca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    90cc:	81 50       	subi	r24, 0x01	; 1
    90ce:	80 93 bf 0b 	sts	0x0BBF, r24
    90d2:	08 95       	ret

000090d4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    90d4:	0e 94 45 48 	call	0x908a	; 0x908a <ProcessFading>
		ProcessSprites();
    90d8:	0c 94 14 46 	jmp	0x8c28	; 0x8c28 <ProcessSprites>

000090dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    90dc:	cf 93       	push	r28
    90de:	df 93       	push	r29
    90e0:	fc 01       	movw	r30, r24
    90e2:	eb 01       	movw	r28, r22
	*looped = 0;
    90e4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    90e6:	93 81       	ldd	r25, Z+3	; 0x03
    90e8:	9f 5f       	subi	r25, 0xFF	; 255
    90ea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    90ec:	22 81       	ldd	r18, Z+2	; 0x02
    90ee:	80 81       	ld	r24, Z
    90f0:	92 17       	cp	r25, r18
    90f2:	70 f0       	brcs	.+28     	; 0x9110 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    90f4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    90f6:	90 e0       	ldi	r25, 0x00	; 0
    90f8:	01 96       	adiw	r24, 0x01	; 1
    90fa:	21 81       	ldd	r18, Z+1	; 0x01
    90fc:	62 2f       	mov	r22, r18
    90fe:	70 e0       	ldi	r23, 0x00	; 0
    9100:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    9104:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    9106:	81 11       	cpse	r24, r1
    9108:	02 c0       	rjmp	.+4      	; 0x910e <LBGetNextFrame+0x32>
    910a:	81 e0       	ldi	r24, 0x01	; 1
    910c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    910e:	80 81       	ld	r24, Z
    9110:	e8 0f       	add	r30, r24
    9112:	f1 1d       	adc	r31, r1
    9114:	e8 0f       	add	r30, r24
    9116:	f1 1d       	adc	r31, r1
    9118:	84 81       	ldd	r24, Z+4	; 0x04
    911a:	95 81       	ldd	r25, Z+5	; 0x05
}
    911c:	df 91       	pop	r29
    911e:	cf 91       	pop	r28
    9120:	08 95       	ret

00009122 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9122:	0f 93       	push	r16
    9124:	1f 93       	push	r17
    9126:	cf 93       	push	r28
    9128:	df 93       	push	r29
    912a:	1f 92       	push	r1
    912c:	cd b7       	in	r28, 0x3d	; 61
    912e:	de b7       	in	r29, 0x3e	; 62
    9130:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9132:	86 2f       	mov	r24, r22
    9134:	69 83       	std	Y+1, r22	; 0x01
    9136:	0e 94 2e 3a 	call	0x745c	; 0x745c <ReadJoypad>
    913a:	d8 01       	movw	r26, r16
    913c:	15 96       	adiw	r26, 0x05	; 5
    913e:	9c 93       	st	X, r25
    9140:	8e 93       	st	-X, r24
    9142:	14 97       	sbiw	r26, 0x04	; 4
    9144:	69 81       	ldd	r22, Y+1	; 0x01
    9146:	e6 2f       	mov	r30, r22
    9148:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    914a:	00 97       	sbiw	r24, 0x00	; 0
    914c:	51 f0       	breq	.+20     	; 0x9162 <LBGetJoyPadState+0x40>
    914e:	df 01       	movw	r26, r30
    9150:	aa 0f       	add	r26, r26
    9152:	bb 1f       	adc	r27, r27
    9154:	a8 5c       	subi	r26, 0xC8	; 200
    9156:	b4 4f       	sbci	r27, 0xF4	; 244
    9158:	2d 91       	ld	r18, X+
    915a:	3c 91       	ld	r19, X
    915c:	82 17       	cp	r24, r18
    915e:	93 07       	cpc	r25, r19
    9160:	21 f0       	breq	.+8      	; 0x916a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9162:	d8 01       	movw	r26, r16
    9164:	16 96       	adiw	r26, 0x06	; 6
    9166:	1c 92       	st	X, r1
    9168:	07 c0       	rjmp	.+14     	; 0x9178 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    916a:	d8 01       	movw	r26, r16
    916c:	16 96       	adiw	r26, 0x06	; 6
    916e:	2c 91       	ld	r18, X
    9170:	16 97       	sbiw	r26, 0x06	; 6
    9172:	2f 5f       	subi	r18, 0xFF	; 255
    9174:	16 96       	adiw	r26, 0x06	; 6
    9176:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9178:	ee 0f       	add	r30, r30
    917a:	ff 1f       	adc	r31, r31
    917c:	e8 5c       	subi	r30, 0xC8	; 200
    917e:	f4 4f       	sbci	r31, 0xF4	; 244
    9180:	20 81       	ld	r18, Z
    9182:	31 81       	ldd	r19, Z+1	; 0x01
    9184:	a9 01       	movw	r20, r18
    9186:	40 95       	com	r20
    9188:	50 95       	com	r21
    918a:	48 23       	and	r20, r24
    918c:	59 23       	and	r21, r25
    918e:	d8 01       	movw	r26, r16
    9190:	11 96       	adiw	r26, 0x01	; 1
    9192:	5c 93       	st	X, r21
    9194:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9196:	ac 01       	movw	r20, r24
    9198:	40 95       	com	r20
    919a:	50 95       	com	r21
    919c:	24 23       	and	r18, r20
    919e:	35 23       	and	r19, r21
    91a0:	13 96       	adiw	r26, 0x03	; 3
    91a2:	3c 93       	st	X, r19
    91a4:	2e 93       	st	-X, r18
    91a6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    91a8:	91 83       	std	Z+1, r25	; 0x01
    91aa:	80 83       	st	Z, r24
}
    91ac:	0f 90       	pop	r0
    91ae:	df 91       	pop	r29
    91b0:	cf 91       	pop	r28
    91b2:	1f 91       	pop	r17
    91b4:	0f 91       	pop	r16
    91b6:	08 95       	ret

000091b8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    91b8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    91ba:	fb 01       	movw	r30, r22
    91bc:	2e 2f       	mov	r18, r30
    91be:	23 1b       	sub	r18, r19
    91c0:	24 17       	cp	r18, r20
    91c2:	28 f4       	brcc	.+10     	; 0x91ce <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    91c4:	21 91       	ld	r18, Z+
    91c6:	dc 01       	movw	r26, r24
    91c8:	2d 93       	st	X+, r18
    91ca:	cd 01       	movw	r24, r26
    91cc:	f7 cf       	rjmp	.-18     	; 0x91bc <LBCopyChars+0x4>
	}
}
    91ce:	08 95       	ret

000091d0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    91d0:	af 92       	push	r10
    91d2:	bf 92       	push	r11
    91d4:	cf 92       	push	r12
    91d6:	df 92       	push	r13
    91d8:	ef 92       	push	r14
    91da:	ff 92       	push	r15
    91dc:	0f 93       	push	r16
    91de:	1f 93       	push	r17
    91e0:	cf 93       	push	r28
    91e2:	df 93       	push	r29
    91e4:	1f 92       	push	r1
    91e6:	cd b7       	in	r28, 0x3d	; 61
    91e8:	de b7       	in	r29, 0x3e	; 62
    91ea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    91ec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    91ee:	c6 2e       	mov	r12, r22
    91f0:	d1 2c       	mov	r13, r1
    91f2:	90 e0       	ldi	r25, 0x00	; 0
    91f4:	5c 01       	movw	r10, r24
    91f6:	a4 1a       	sub	r10, r20
    91f8:	b5 0a       	sbc	r11, r21
    91fa:	80 2f       	mov	r24, r16
    91fc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    91fe:	82 17       	cp	r24, r18
    9200:	60 f4       	brcc	.+24     	; 0x921a <LBPrintStr+0x4a>
    9202:	c5 01       	movw	r24, r10
    9204:	80 0f       	add	r24, r16
    9206:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9208:	f8 01       	movw	r30, r16
    920a:	41 91       	ld	r20, Z+
    920c:	8f 01       	movw	r16, r30
    920e:	b6 01       	movw	r22, r12
    9210:	29 83       	std	Y+1, r18	; 0x01
    9212:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
    9216:	29 81       	ldd	r18, Y+1	; 0x01
    9218:	f0 cf       	rjmp	.-32     	; 0x91fa <LBPrintStr+0x2a>
	}
}
    921a:	0f 90       	pop	r0
    921c:	df 91       	pop	r29
    921e:	cf 91       	pop	r28
    9220:	1f 91       	pop	r17
    9222:	0f 91       	pop	r16
    9224:	ff 90       	pop	r15
    9226:	ef 90       	pop	r14
    9228:	df 90       	pop	r13
    922a:	cf 90       	pop	r12
    922c:	bf 90       	pop	r11
    922e:	af 90       	pop	r10
    9230:	08 95       	ret

00009232 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9232:	af 92       	push	r10
    9234:	cf 92       	push	r12
    9236:	ef 92       	push	r14
    9238:	ff 92       	push	r15
    923a:	0f 93       	push	r16
    923c:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    923e:	70 e0       	ldi	r23, 0x00	; 0
    9240:	f1 2c       	mov	r15, r1
    9242:	fb 01       	movw	r30, r22
    9244:	e2 0f       	add	r30, r18
    9246:	f1 1d       	adc	r31, r1
    9248:	ee 16       	cp	r14, r30
    924a:	ff 06       	cpc	r15, r31
    924c:	a4 f4       	brge	.+40     	; 0x9276 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    924e:	ea 0c       	add	r14, r10
    9250:	f1 1c       	adc	r15, r1
    9252:	6e 15       	cp	r22, r14
    9254:	7f 05       	cpc	r23, r15
    9256:	7c f4       	brge	.+30     	; 0x9276 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9258:	28 2f       	mov	r18, r24
    925a:	30 e0       	ldi	r19, 0x00	; 0
    925c:	10 e0       	ldi	r17, 0x00	; 0
    925e:	c9 01       	movw	r24, r18
    9260:	84 0f       	add	r24, r20
    9262:	91 1d       	adc	r25, r1
    9264:	08 17       	cp	r16, r24
    9266:	19 07       	cpc	r17, r25
    9268:	34 f4       	brge	.+12     	; 0x9276 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    926a:	0c 0d       	add	r16, r12
    926c:	11 1d       	adc	r17, r1
    926e:	81 e0       	ldi	r24, 0x01	; 1
    9270:	20 17       	cp	r18, r16
    9272:	31 07       	cpc	r19, r17
    9274:	0c f0       	brlt	.+2      	; 0x9278 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9276:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9278:	1f 91       	pop	r17
    927a:	0f 91       	pop	r16
    927c:	ff 90       	pop	r15
    927e:	ef 90       	pop	r14
    9280:	cf 90       	pop	r12
    9282:	af 90       	pop	r10
    9284:	08 95       	ret

00009286 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9286:	2f 92       	push	r2
    9288:	3f 92       	push	r3
    928a:	4f 92       	push	r4
    928c:	5f 92       	push	r5
    928e:	6f 92       	push	r6
    9290:	7f 92       	push	r7
    9292:	8f 92       	push	r8
    9294:	9f 92       	push	r9
    9296:	af 92       	push	r10
    9298:	bf 92       	push	r11
    929a:	cf 92       	push	r12
    929c:	df 92       	push	r13
    929e:	ef 92       	push	r14
    92a0:	ff 92       	push	r15
    92a2:	0f 93       	push	r16
    92a4:	1f 93       	push	r17
    92a6:	cf 93       	push	r28
    92a8:	df 93       	push	r29
    92aa:	00 d0       	rcall	.+0      	; 0x92ac <LBLineIntersect+0x26>
    92ac:	00 d0       	rcall	.+0      	; 0x92ae <LBLineIntersect+0x28>
    92ae:	cd b7       	in	r28, 0x3d	; 61
    92b0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    92b2:	f1 2c       	mov	r15, r1
    92b4:	8a 2c       	mov	r8, r10
    92b6:	91 2c       	mov	r9, r1
    92b8:	8e 18       	sub	r8, r14
    92ba:	9f 08       	sbc	r9, r15
    92bc:	a8 2e       	mov	r10, r24
    92be:	b1 2c       	mov	r11, r1
    92c0:	24 2e       	mov	r2, r20
    92c2:	31 2c       	mov	r3, r1
    92c4:	2a 18       	sub	r2, r10
    92c6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    92c8:	10 e0       	ldi	r17, 0x00	; 0
    92ca:	d1 2c       	mov	r13, r1
    92cc:	c0 1a       	sub	r12, r16
    92ce:	d1 0a       	sbc	r13, r17
    92d0:	46 2f       	mov	r20, r22
    92d2:	50 e0       	ldi	r21, 0x00	; 0
    92d4:	5c 83       	std	Y+4, r21	; 0x04
    92d6:	4b 83       	std	Y+3, r20	; 0x03
    92d8:	82 2f       	mov	r24, r18
    92da:	90 e0       	ldi	r25, 0x00	; 0
    92dc:	9a 83       	std	Y+2, r25	; 0x02
    92de:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    92e0:	82 9c       	mul	r8, r2
    92e2:	90 01       	movw	r18, r0
    92e4:	83 9c       	mul	r8, r3
    92e6:	30 0d       	add	r19, r0
    92e8:	92 9c       	mul	r9, r2
    92ea:	30 0d       	add	r19, r0
    92ec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    92ee:	ca 01       	movw	r24, r20
    92f0:	e9 81       	ldd	r30, Y+1	; 0x01
    92f2:	fa 81       	ldd	r31, Y+2	; 0x02
    92f4:	8e 1b       	sub	r24, r30
    92f6:	9f 0b       	sbc	r25, r31
    92f8:	c8 9e       	mul	r12, r24
    92fa:	b0 01       	movw	r22, r0
    92fc:	c9 9e       	mul	r12, r25
    92fe:	70 0d       	add	r23, r0
    9300:	d8 9e       	mul	r13, r24
    9302:	70 0d       	add	r23, r0
    9304:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9306:	62 0f       	add	r22, r18
    9308:	73 1f       	adc	r23, r19
    930a:	88 27       	eor	r24, r24
    930c:	77 fd       	sbrc	r23, 7
    930e:	80 95       	com	r24
    9310:	98 2f       	mov	r25, r24
    9312:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9316:	2b 01       	movw	r4, r22
    9318:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    931a:	20 e0       	ldi	r18, 0x00	; 0
    931c:	30 e0       	ldi	r19, 0x00	; 0
    931e:	a9 01       	movw	r20, r18
    9320:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    9324:	88 23       	and	r24, r24
    9326:	09 f4       	brne	.+2      	; 0x932a <LBLineIntersect+0xa4>
    9328:	6c c0       	rjmp	.+216    	; 0x9402 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    932a:	4b 81       	ldd	r20, Y+3	; 0x03
    932c:	5c 81       	ldd	r21, Y+4	; 0x04
    932e:	4e 19       	sub	r20, r14
    9330:	5f 09       	sbc	r21, r15
    9332:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9334:	0a 19       	sub	r16, r10
    9336:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9338:	c4 9e       	mul	r12, r20
    933a:	c0 01       	movw	r24, r0
    933c:	c5 9e       	mul	r12, r21
    933e:	90 0d       	add	r25, r0
    9340:	d4 9e       	mul	r13, r20
    9342:	90 0d       	add	r25, r0
    9344:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9346:	80 9e       	mul	r8, r16
    9348:	b0 01       	movw	r22, r0
    934a:	81 9e       	mul	r8, r17
    934c:	70 0d       	add	r23, r0
    934e:	90 9e       	mul	r9, r16
    9350:	70 0d       	add	r23, r0
    9352:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9354:	68 0f       	add	r22, r24
    9356:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9358:	88 27       	eor	r24, r24
    935a:	77 fd       	sbrc	r23, 7
    935c:	80 95       	com	r24
    935e:	98 2f       	mov	r25, r24
    9360:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9364:	a3 01       	movw	r20, r6
    9366:	92 01       	movw	r18, r4
    9368:	0e 94 0e 62 	call	0xc41c	; 0xc41c <__divsf3>
    936c:	4b 01       	movw	r8, r22
    936e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9370:	20 e0       	ldi	r18, 0x00	; 0
    9372:	30 e0       	ldi	r19, 0x00	; 0
    9374:	a9 01       	movw	r20, r18
    9376:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    937a:	87 fd       	sbrc	r24, 7
    937c:	42 c0       	rjmp	.+132    	; 0x9402 <LBLineIntersect+0x17c>
    937e:	20 e0       	ldi	r18, 0x00	; 0
    9380:	30 e0       	ldi	r19, 0x00	; 0
    9382:	40 e8       	ldi	r20, 0x80	; 128
    9384:	5f e3       	ldi	r21, 0x3F	; 63
    9386:	c5 01       	movw	r24, r10
    9388:	b4 01       	movw	r22, r8
    938a:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <__gesf2>
    938e:	18 16       	cp	r1, r24
    9390:	c4 f1       	brlt	.+112    	; 0x9402 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9392:	2e 9c       	mul	r2, r14
    9394:	b0 01       	movw	r22, r0
    9396:	2f 9c       	mul	r2, r15
    9398:	70 0d       	add	r23, r0
    939a:	3e 9c       	mul	r3, r14
    939c:	70 0d       	add	r23, r0
    939e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    93a0:	29 81       	ldd	r18, Y+1	; 0x01
    93a2:	3a 81       	ldd	r19, Y+2	; 0x02
    93a4:	8b 81       	ldd	r24, Y+3	; 0x03
    93a6:	9c 81       	ldd	r25, Y+4	; 0x04
    93a8:	28 1b       	sub	r18, r24
    93aa:	39 0b       	sbc	r19, r25
    93ac:	20 9f       	mul	r18, r16
    93ae:	c0 01       	movw	r24, r0
    93b0:	21 9f       	mul	r18, r17
    93b2:	90 0d       	add	r25, r0
    93b4:	30 9f       	mul	r19, r16
    93b6:	90 0d       	add	r25, r0
    93b8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    93ba:	68 0f       	add	r22, r24
    93bc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    93be:	88 27       	eor	r24, r24
    93c0:	77 fd       	sbrc	r23, 7
    93c2:	80 95       	com	r24
    93c4:	98 2f       	mov	r25, r24
    93c6:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    93ca:	a3 01       	movw	r20, r6
    93cc:	92 01       	movw	r18, r4
    93ce:	0e 94 0e 62 	call	0xc41c	; 0xc41c <__divsf3>
    93d2:	6b 01       	movw	r12, r22
    93d4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    93d6:	20 e0       	ldi	r18, 0x00	; 0
    93d8:	30 e0       	ldi	r19, 0x00	; 0
    93da:	a9 01       	movw	r20, r18
    93dc:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    93e0:	87 fd       	sbrc	r24, 7
    93e2:	0f c0       	rjmp	.+30     	; 0x9402 <LBLineIntersect+0x17c>
    93e4:	11 e0       	ldi	r17, 0x01	; 1
    93e6:	20 e0       	ldi	r18, 0x00	; 0
    93e8:	30 e0       	ldi	r19, 0x00	; 0
    93ea:	40 e8       	ldi	r20, 0x80	; 128
    93ec:	5f e3       	ldi	r21, 0x3F	; 63
    93ee:	c7 01       	movw	r24, r14
    93f0:	b6 01       	movw	r22, r12
    93f2:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <__gesf2>
    93f6:	18 16       	cp	r1, r24
    93f8:	0c f0       	brlt	.+2      	; 0x93fc <LBLineIntersect+0x176>
    93fa:	10 e0       	ldi	r17, 0x00	; 0
    93fc:	81 e0       	ldi	r24, 0x01	; 1
    93fe:	81 27       	eor	r24, r17
    9400:	01 c0       	rjmp	.+2      	; 0x9404 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9402:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9404:	0f 90       	pop	r0
    9406:	0f 90       	pop	r0
    9408:	0f 90       	pop	r0
    940a:	0f 90       	pop	r0
    940c:	df 91       	pop	r29
    940e:	cf 91       	pop	r28
    9410:	1f 91       	pop	r17
    9412:	0f 91       	pop	r16
    9414:	ff 90       	pop	r15
    9416:	ef 90       	pop	r14
    9418:	df 90       	pop	r13
    941a:	cf 90       	pop	r12
    941c:	bf 90       	pop	r11
    941e:	af 90       	pop	r10
    9420:	9f 90       	pop	r9
    9422:	8f 90       	pop	r8
    9424:	7f 90       	pop	r7
    9426:	6f 90       	pop	r6
    9428:	5f 90       	pop	r5
    942a:	4f 90       	pop	r4
    942c:	3f 90       	pop	r3
    942e:	2f 90       	pop	r2
    9430:	08 95       	ret

00009432 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9432:	0f 93       	push	r16
    9434:	1f 93       	push	r17
    9436:	cf 93       	push	r28
    9438:	df 93       	push	r29
    943a:	8c 01       	movw	r16, r24
    943c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    943e:	80 91 36 0b 	lds	r24, 0x0B36
    9442:	90 91 37 0b 	lds	r25, 0x0B37
    9446:	89 2b       	or	r24, r25
    9448:	31 f4       	brne	.+12     	; 0x9456 <LBRandom+0x24>
    944a:	0e 94 6e 3a 	call	0x74dc	; 0x74dc <GetRandomSeed>
    944e:	90 93 37 0b 	sts	0x0B37, r25
    9452:	80 93 36 0b 	sts	0x0B36, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    9456:	90 91 35 0b 	lds	r25, 0x0B35
    945a:	20 91 36 0b 	lds	r18, 0x0B36
    945e:	30 91 37 0b 	lds	r19, 0x0B37
    9462:	09 2e       	mov	r0, r25
    9464:	02 c0       	rjmp	.+4      	; 0x946a <LBRandom+0x38>
    9466:	36 95       	lsr	r19
    9468:	27 95       	ror	r18
    946a:	0a 94       	dec	r0
    946c:	e2 f7       	brpl	.-8      	; 0x9466 <LBRandom+0x34>
	unsigned int delta = to - from;
    946e:	be 01       	movw	r22, r28
    9470:	60 1b       	sub	r22, r16
    9472:	71 0b       	sbc	r23, r17

	shift_count++;
    9474:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9476:	90 31       	cpi	r25, 0x10	; 16
    9478:	18 f4       	brcc	.+6      	; 0x9480 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    947a:	90 93 35 0b 	sts	0x0B35, r25
    947e:	02 c0       	rjmp	.+4      	; 0x9484 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9480:	10 92 35 0b 	sts	0x0B35, r1

	return from + ((delta + shifted) % delta);
    9484:	cb 01       	movw	r24, r22
    9486:	82 0f       	add	r24, r18
    9488:	93 1f       	adc	r25, r19
    948a:	0e 94 77 61 	call	0xc2ee	; 0xc2ee <__udivmodhi4>
}
    948e:	80 0f       	add	r24, r16
    9490:	91 1f       	adc	r25, r17
    9492:	df 91       	pop	r29
    9494:	cf 91       	pop	r28
    9496:	1f 91       	pop	r17
    9498:	0f 91       	pop	r16
    949a:	08 95       	ret

0000949c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    949c:	cf 93       	push	r28
    949e:	df 93       	push	r29
    94a0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    94a2:	c0 e0       	ldi	r28, 0x00	; 0
    94a4:	cd 17       	cp	r28, r29
    94a6:	31 f0       	breq	.+12     	; 0x94b4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    94a8:	8f ef       	ldi	r24, 0xFF	; 255
    94aa:	9f ef       	ldi	r25, 0xFF	; 255
    94ac:	0e 94 3a 3a 	call	0x7474	; 0x7474 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    94b0:	cf 5f       	subi	r28, 0xFF	; 255
    94b2:	f8 cf       	rjmp	.-16     	; 0x94a4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    94b4:	df 91       	pop	r29
    94b6:	cf 91       	pop	r28
    94b8:	08 95       	ret

000094ba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    94ba:	28 e8       	ldi	r18, 0x88	; 136
    94bc:	30 e0       	ldi	r19, 0x00	; 0
    94be:	fc 01       	movw	r30, r24
    94c0:	21 93       	st	Z+, r18
    94c2:	31 93       	st	Z+, r19
    94c4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    94c6:	4e e1       	ldi	r20, 0x1E	; 30
    94c8:	50 e0       	ldi	r21, 0x00	; 0
    94ca:	66 ef       	ldi	r22, 0xF6	; 246
    94cc:	70 e0       	ldi	r23, 0x00	; 0
    94ce:	0c 94 c0 63 	jmp	0xc780	; 0xc780 <memcpy_P>

000094d2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    94d2:	27 e8       	ldi	r18, 0x87	; 135
    94d4:	30 e0       	ldi	r19, 0x00	; 0
    94d6:	fc 01       	movw	r30, r24
    94d8:	21 93       	st	Z+, r18
    94da:	31 93       	st	Z+, r19
    94dc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    94de:	4e e1       	ldi	r20, 0x1E	; 30
    94e0:	50 e0       	ldi	r21, 0x00	; 0
    94e2:	64 e1       	ldi	r22, 0x14	; 20
    94e4:	71 e0       	ldi	r23, 0x01	; 1
    94e6:	0c 94 c0 63 	jmp	0xc780	; 0xc780 <memcpy_P>

000094ea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    94ea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    94ec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    94ee:	14 86       	std	Z+12, r1	; 0x0c
    94f0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    94f2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    94f4:	73 e0       	ldi	r23, 0x03	; 3
    94f6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    94f8:	65 e0       	ldi	r22, 0x05	; 5
    94fa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    94fc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    94fe:	45 e6       	ldi	r20, 0x65	; 101
    9500:	5b e6       	ldi	r21, 0x6B	; 107
    9502:	56 83       	std	Z+6, r21	; 0x06
    9504:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9506:	22 e6       	ldi	r18, 0x62	; 98
    9508:	3b e6       	ldi	r19, 0x6B	; 107
    950a:	30 87       	std	Z+8, r19	; 0x08
    950c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    950e:	8f e5       	ldi	r24, 0x5F	; 95
    9510:	9b e6       	ldi	r25, 0x6B	; 107
    9512:	92 87       	std	Z+10, r25	; 0x0a
    9514:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9516:	10 8e       	std	Z+24, r1	; 0x18
    9518:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    951a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    951c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    951e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    9520:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9522:	52 8b       	std	Z+18, r21	; 0x12
    9524:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9526:	34 8b       	std	Z+20, r19	; 0x14
    9528:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    952a:	96 8b       	std	Z+22, r25	; 0x16
    952c:	85 8b       	std	Z+21, r24	; 0x15
    952e:	08 95       	ret

00009530 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9530:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9532:	88 e7       	ldi	r24, 0x78	; 120
    9534:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9536:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9538:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    953a:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    953c:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    953e:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9540:	84 e0       	ldi	r24, 0x04	; 4
    9542:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9544:	66 23       	and	r22, r22
    9546:	11 f0       	breq	.+4      	; 0x954c <init_shot_state+0x1c>
    9548:	85 e0       	ldi	r24, 0x05	; 5
    954a:	01 c0       	rjmp	.+2      	; 0x954e <init_shot_state+0x1e>
    954c:	81 e0       	ldi	r24, 0x01	; 1
    954e:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9550:	80 e0       	ldi	r24, 0x00	; 0
    9552:	90 e0       	ldi	r25, 0x00	; 0
    9554:	a0 e7       	ldi	r26, 0x70	; 112
    9556:	b3 e4       	ldi	r27, 0x43	; 67
    9558:	83 83       	std	Z+3, r24	; 0x03
    955a:	94 83       	std	Z+4, r25	; 0x04
    955c:	a5 83       	std	Z+5, r26	; 0x05
    955e:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9560:	17 82       	std	Z+7, r1	; 0x07
    9562:	10 86       	std	Z+8, r1	; 0x08
    9564:	11 86       	std	Z+9, r1	; 0x09
    9566:	12 86       	std	Z+10, r1	; 0x0a
    9568:	08 95       	ret

0000956a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    956a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    956c:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    956e:	82 e0       	ldi	r24, 0x02	; 2
    9570:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9572:	85 e0       	ldi	r24, 0x05	; 5
    9574:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9576:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9578:	66 23       	and	r22, r22
    957a:	19 f0       	breq	.+6      	; 0x9582 <set_shot_animations+0x18>
    957c:	83 ef       	ldi	r24, 0xF3	; 243
    957e:	96 e4       	ldi	r25, 0x46	; 70
    9580:	02 c0       	rjmp	.+4      	; 0x9586 <set_shot_animations+0x1c>
    9582:	86 ef       	ldi	r24, 0xF6	; 246
    9584:	96 e4       	ldi	r25, 0x46	; 70
    9586:	95 8b       	std	Z+21, r25	; 0x15
    9588:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    958a:	66 23       	and	r22, r22
    958c:	19 f0       	breq	.+6      	; 0x9594 <set_shot_animations+0x2a>
    958e:	80 ef       	ldi	r24, 0xF0	; 240
    9590:	96 e4       	ldi	r25, 0x46	; 70
    9592:	02 c0       	rjmp	.+4      	; 0x9598 <set_shot_animations+0x2e>
    9594:	86 ef       	ldi	r24, 0xF6	; 246
    9596:	96 e4       	ldi	r25, 0x46	; 70
    9598:	97 8b       	std	Z+23, r25	; 0x17
    959a:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    959c:	82 e0       	ldi	r24, 0x02	; 2
    959e:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    95a0:	85 e0       	ldi	r24, 0x05	; 5
    95a2:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    95a4:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    95a6:	66 23       	and	r22, r22
    95a8:	19 f0       	breq	.+6      	; 0x95b0 <set_shot_animations+0x46>
    95aa:	8d ee       	ldi	r24, 0xED	; 237
    95ac:	96 e4       	ldi	r25, 0x46	; 70
    95ae:	02 c0       	rjmp	.+4      	; 0x95b4 <set_shot_animations+0x4a>
    95b0:	86 ef       	ldi	r24, 0xF6	; 246
    95b2:	96 e4       	ldi	r25, 0x46	; 70
    95b4:	97 8f       	std	Z+31, r25	; 0x1f
    95b6:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    95b8:	66 23       	and	r22, r22
    95ba:	19 f0       	breq	.+6      	; 0x95c2 <set_shot_animations+0x58>
    95bc:	8a ee       	ldi	r24, 0xEA	; 234
    95be:	96 e4       	ldi	r25, 0x46	; 70
    95c0:	02 c0       	rjmp	.+4      	; 0x95c6 <set_shot_animations+0x5c>
    95c2:	86 ef       	ldi	r24, 0xF6	; 246
    95c4:	96 e4       	ldi	r25, 0x46	; 70
    95c6:	91 a3       	std	Z+33, r25	; 0x21
    95c8:	80 a3       	std	Z+32, r24	; 0x20
    95ca:	08 95       	ret

000095cc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    95cc:	0f 93       	push	r16
    95ce:	1f 93       	push	r17
    95d0:	cf 93       	push	r28
    95d2:	df 93       	push	r29
    95d4:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    95d6:	8a e5       	ldi	r24, 0x5A	; 90
    95d8:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    95da:	88 e7       	ldi	r24, 0x78	; 120
    95dc:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    95de:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    95e0:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    95e2:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    95e4:	18 82       	st	Y, r1
	p->shared.speed = 0;
    95e6:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    95e8:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    95ea:	82 e3       	ldi	r24, 0x32	; 50
    95ec:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    95ee:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    95f0:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    95f2:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    95f4:	fe 01       	movw	r30, r28
    95f6:	e0 5b       	subi	r30, 0xB0	; 176
    95f8:	ff 4f       	sbci	r31, 0xFF	; 255
    95fa:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    95fc:	31 96       	adiw	r30, 0x01	; 1
    95fe:	91 e0       	ldi	r25, 0x01	; 1
    9600:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9602:	31 96       	adiw	r30, 0x01	; 1
    9604:	85 e0       	ldi	r24, 0x05	; 5
    9606:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9608:	31 96       	adiw	r30, 0x01	; 1
    960a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    960c:	31 96       	adiw	r30, 0x01	; 1
    960e:	71 83       	std	Z+1, r23	; 0x01
    9610:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9612:	36 96       	adiw	r30, 0x06	; 6
    9614:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9616:	31 96       	adiw	r30, 0x01	; 1
    9618:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    961a:	31 96       	adiw	r30, 0x01	; 1
    961c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    961e:	31 96       	adiw	r30, 0x01	; 1
    9620:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9622:	31 96       	adiw	r30, 0x01	; 1
    9624:	51 83       	std	Z+1, r21	; 0x01
    9626:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9628:	36 96       	adiw	r30, 0x06	; 6
    962a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    962c:	31 96       	adiw	r30, 0x01	; 1
    962e:	93 e0       	ldi	r25, 0x03	; 3
    9630:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9632:	31 96       	adiw	r30, 0x01	; 1
    9634:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9636:	31 96       	adiw	r30, 0x01	; 1
    9638:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    963a:	31 96       	adiw	r30, 0x01	; 1
    963c:	85 e0       	ldi	r24, 0x05	; 5
    963e:	97 e4       	ldi	r25, 0x47	; 71
    9640:	91 83       	std	Z+1, r25	; 0x01
    9642:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9644:	32 96       	adiw	r30, 0x02	; 2
    9646:	8f ef       	ldi	r24, 0xFF	; 255
    9648:	96 e4       	ldi	r25, 0x46	; 70
    964a:	91 83       	std	Z+1, r25	; 0x01
    964c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    964e:	32 96       	adiw	r30, 0x02	; 2
    9650:	89 ef       	ldi	r24, 0xF9	; 249
    9652:	96 e4       	ldi	r25, 0x46	; 70
    9654:	91 83       	std	Z+1, r25	; 0x01
    9656:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9658:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    965a:	8e 01       	movw	r16, r28
    965c:	04 5d       	subi	r16, 0xD4	; 212
    965e:	1f 4f       	sbci	r17, 0xFF	; 255
    9660:	60 e0       	ldi	r22, 0x00	; 0
    9662:	c8 01       	movw	r24, r16
    9664:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9668:	60 e0       	ldi	r22, 0x00	; 0
    966a:	c8 01       	movw	r24, r16
    966c:	0e 94 b5 4a 	call	0x956a	; 0x956a <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9670:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    9672:	1d 8e       	std	Y+29, r1	; 0x1d
    9674:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    9676:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    9678:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    967a:	1c a2       	std	Y+36, r1	; 0x24
    967c:	1d a2       	std	Y+37, r1	; 0x25
    967e:	1e a2       	std	Y+38, r1	; 0x26
    9680:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    9682:	18 a6       	std	Y+40, r1	; 0x28
    9684:	19 a6       	std	Y+41, r1	; 0x29
    9686:	1a a6       	std	Y+42, r1	; 0x2a
    9688:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    968a:	1f 8e       	std	Y+31, r1	; 0x1f
    968c:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    968e:	19 a2       	std	Y+33, r1	; 0x21
    9690:	18 a2       	std	Y+32, r1	; 0x20
}
    9692:	df 91       	pop	r29
    9694:	cf 91       	pop	r28
    9696:	1f 91       	pop	r17
    9698:	0f 91       	pop	r16
    969a:	08 95       	ret

0000969c <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    969c:	fc 01       	movw	r30, r24
    969e:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    96a0:	60 e0       	ldi	r22, 0x00	; 0
    96a2:	8c 96       	adiw	r24, 0x2c	; 44
    96a4:	0c 94 98 4a 	jmp	0x9530	; 0x9530 <init_shot_state>

000096a8 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    96a8:	e8 e0       	ldi	r30, 0x08	; 8
    96aa:	fc e0       	ldi	r31, 0x0C	; 12
    96ac:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    96ae:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    96b0:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    96b2:	49 e2       	ldi	r20, 0x29	; 41
    96b4:	57 e4       	ldi	r21, 0x47	; 71
    96b6:	65 e3       	ldi	r22, 0x35	; 53
    96b8:	77 e4       	ldi	r23, 0x47	; 71
    96ba:	85 e2       	ldi	r24, 0x25	; 37
    96bc:	9c e0       	ldi	r25, 0x0C	; 12
    96be:	0e 94 e6 4a 	call	0x95cc	; 0x95cc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    96c2:	41 e1       	ldi	r20, 0x11	; 17
    96c4:	57 e4       	ldi	r21, 0x47	; 71
    96c6:	6d e1       	ldi	r22, 0x1D	; 29
    96c8:	77 e4       	ldi	r23, 0x47	; 71
    96ca:	89 e8       	ldi	r24, 0x89	; 137
    96cc:	9f e0       	ldi	r25, 0x0F	; 15
    96ce:	0c 94 e6 4a 	jmp	0x95cc	; 0x95cc <init_player>

000096d2 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    96d2:	cf 93       	push	r28
    96d4:	df 93       	push	r29
    96d6:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    96d8:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    96da:	6a 89       	ldd	r22, Y+18	; 0x12
    96dc:	70 e0       	ldi	r23, 0x00	; 0
    96de:	80 e0       	ldi	r24, 0x00	; 0
    96e0:	90 e0       	ldi	r25, 0x00	; 0
    96e2:	0e 94 a7 62 	call	0xc54e	; 0xc54e <__floatunsisf>
    96e6:	6b 83       	std	Y+3, r22	; 0x03
    96e8:	7c 83       	std	Y+4, r23	; 0x04
    96ea:	8d 83       	std	Y+5, r24	; 0x05
    96ec:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    96ee:	6b 89       	ldd	r22, Y+19	; 0x13
    96f0:	70 e0       	ldi	r23, 0x00	; 0
    96f2:	80 e0       	ldi	r24, 0x00	; 0
    96f4:	90 e0       	ldi	r25, 0x00	; 0
    96f6:	0e 94 a7 62 	call	0xc54e	; 0xc54e <__floatunsisf>
    96fa:	6f 83       	std	Y+7, r22	; 0x07
    96fc:	78 87       	std	Y+8, r23	; 0x08
    96fe:	89 87       	std	Y+9, r24	; 0x09
    9700:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9702:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9704:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9706:	1a 82       	std	Y+2, r1	; 0x02
	
}
    9708:	df 91       	pop	r29
    970a:	cf 91       	pop	r28
    970c:	08 95       	ret

0000970e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    970e:	cf 93       	push	r28
    9710:	df 93       	push	r29
    9712:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9714:	bc 01       	movw	r22, r24
    9716:	88 81       	ld	r24, Y
    9718:	99 81       	ldd	r25, Y+1	; 0x01
    971a:	0e 94 8c 3b 	call	0x7718	; 0x7718 <EepromReadBlock>
	if (status == 0x03)
    971e:	83 30       	cpi	r24, 0x03	; 3
    9720:	29 f4       	brne	.+10     	; 0x972c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9722:	ce 01       	movw	r24, r28
	}
}
    9724:	df 91       	pop	r29
    9726:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9728:	0c 94 1f 3b 	jmp	0x763e	; 0x763e <EepromWriteBlock>
	}
}
    972c:	df 91       	pop	r29
    972e:	cf 91       	pop	r28
    9730:	08 95       	ret

00009732 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9732:	61 e0       	ldi	r22, 0x01	; 1
    9734:	83 e0       	ldi	r24, 0x03	; 3
    9736:	0e 94 39 48 	call	0x9072	; 0x9072 <FadeOut>
	ClearVram();
    973a:	0e 94 00 3a 	call	0x7400	; 0x7400 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    973e:	60 e0       	ldi	r22, 0x00	; 0
    9740:	83 e0       	ldi	r24, 0x03	; 3
    9742:	0c 94 2d 48 	jmp	0x905a	; 0x905a <FadeIn>

00009746 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9746:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9748:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    974a:	40 e0       	ldi	r20, 0x00	; 0
    974c:	61 e4       	ldi	r22, 0x41	; 65
    974e:	77 e4       	ldi	r23, 0x47	; 71
    9750:	8c 2f       	mov	r24, r28
    9752:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
    9756:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9758:	ca 30       	cpi	r28, 0x0A	; 10
    975a:	b9 f7       	brne	.-18     	; 0x974a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    975c:	cf 91       	pop	r28
    975e:	08 95       	ret

00009760 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9760:	cf 92       	push	r12
    9762:	df 92       	push	r13
    9764:	ff 92       	push	r15
    9766:	0f 93       	push	r16
    9768:	1f 93       	push	r17
    976a:	cf 93       	push	r28
    976c:	df 93       	push	r29
    976e:	cd b7       	in	r28, 0x3d	; 61
    9770:	de b7       	in	r29, 0x3e	; 62
    9772:	28 97       	sbiw	r28, 0x08	; 8
    9774:	0f b6       	in	r0, 0x3f	; 63
    9776:	f8 94       	cli
    9778:	de bf       	out	0x3e, r29	; 62
    977a:	0f be       	out	0x3f, r0	; 63
    977c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    977e:	90 91 34 0c 	lds	r25, 0x0C34
    9782:	80 91 98 0f 	lds	r24, 0x0F98
    9786:	98 17       	cp	r25, r24
    9788:	28 f4       	brcc	.+10     	; 0x9794 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    978a:	e5 e2       	ldi	r30, 0x25	; 37
    978c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    978e:	a9 e8       	ldi	r26, 0x89	; 137
    9790:	bf e0       	ldi	r27, 0x0F	; 15
    9792:	04 c0       	rjmp	.+8      	; 0x979c <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9794:	e9 e8       	ldi	r30, 0x89	; 137
    9796:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9798:	a5 e2       	ldi	r26, 0x25	; 37
    979a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    979c:	1b 96       	adiw	r26, 0x0b	; 11
    979e:	8c 91       	ld	r24, X
    97a0:	1b 97       	sbiw	r26, 0x0b	; 11
    97a2:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    97a4:	83 85       	ldd	r24, Z+11	; 0x0b
    97a6:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    97a8:	1f 96       	adiw	r26, 0x0f	; 15
    97aa:	8c 91       	ld	r24, X
    97ac:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    97ae:	97 85       	ldd	r25, Z+15	; 0x0f
    97b0:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    97b2:	f8 2e       	mov	r15, r24
    97b4:	f9 1a       	sub	r15, r25
    97b6:	00 e0       	ldi	r16, 0x00	; 0
    97b8:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    97ba:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    97bc:	81 11       	cpse	r24, r1
    97be:	08 c0       	rjmp	.+16     	; 0x97d0 <save_score+0x70>
    97c0:	f8 01       	movw	r30, r16
    97c2:	ef 53       	subi	r30, 0x3F	; 63
    97c4:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    97c6:	94 81       	ldd	r25, Z+4	; 0x04
    97c8:	25 81       	ldd	r18, Z+5	; 0x05
    97ca:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    97cc:	9f 15       	cp	r25, r15
    97ce:	d0 f4       	brcc	.+52     	; 0x9804 <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    97d0:	44 e0       	ldi	r20, 0x04	; 4
    97d2:	c8 01       	movw	r24, r16
    97d4:	8d 53       	subi	r24, 0x3D	; 61
    97d6:	94 4f       	sbci	r25, 0xF4	; 244
    97d8:	6c 01       	movw	r12, r24
    97da:	bc 01       	movw	r22, r24
    97dc:	ce 01       	movw	r24, r28
    97de:	05 96       	adiw	r24, 0x05	; 5
    97e0:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    97e4:	44 e0       	ldi	r20, 0x04	; 4
    97e6:	be 01       	movw	r22, r28
    97e8:	6f 5f       	subi	r22, 0xFF	; 255
    97ea:	7f 4f       	sbci	r23, 0xFF	; 255
    97ec:	c6 01       	movw	r24, r12
    97ee:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    97f2:	44 e0       	ldi	r20, 0x04	; 4
    97f4:	be 01       	movw	r22, r28
    97f6:	6b 5f       	subi	r22, 0xFB	; 251
    97f8:	7f 4f       	sbci	r23, 0xFF	; 255
    97fa:	ce 01       	movw	r24, r28
    97fc:	01 96       	adiw	r24, 0x01	; 1
    97fe:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
				saved = 1;
    9802:	81 e0       	ldi	r24, 0x01	; 1
    9804:	0c 5f       	subi	r16, 0xFC	; 252
    9806:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    9808:	0c 31       	cpi	r16, 0x1C	; 28
    980a:	11 05       	cpc	r17, r1
    980c:	b9 f6       	brne	.-82     	; 0x97bc <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    980e:	81 ec       	ldi	r24, 0xC1	; 193
    9810:	9b e0       	ldi	r25, 0x0B	; 11
    9812:	0e 94 1f 3b 	call	0x763e	; 0x763e <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    9816:	28 96       	adiw	r28, 0x08	; 8
    9818:	0f b6       	in	r0, 0x3f	; 63
    981a:	f8 94       	cli
    981c:	de bf       	out	0x3e, r29	; 62
    981e:	0f be       	out	0x3f, r0	; 63
    9820:	cd bf       	out	0x3d, r28	; 61
    9822:	df 91       	pop	r29
    9824:	cf 91       	pop	r28
    9826:	1f 91       	pop	r17
    9828:	0f 91       	pop	r16
    982a:	ff 90       	pop	r15
    982c:	df 90       	pop	r13
    982e:	cf 90       	pop	r12
    9830:	08 95       	ret

00009832 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    9832:	0f 93       	push	r16
    9834:	1f 93       	push	r17
    9836:	cf 93       	push	r28
    9838:	df 93       	push	r29
    983a:	8c 01       	movw	r16, r24
    983c:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    983e:	88 81       	ld	r24, Y
    9840:	81 30       	cpi	r24, 0x01	; 1
    9842:	69 f1       	breq	.+90     	; 0x989e <position_shot+0x6c>
    9844:	98 f0       	brcs	.+38     	; 0x986c <position_shot+0x3a>
    9846:	82 30       	cpi	r24, 0x02	; 2
    9848:	f1 f1       	breq	.+124    	; 0x98c6 <position_shot+0x94>
    984a:	83 30       	cpi	r24, 0x03	; 3
    984c:	09 f0       	breq	.+2      	; 0x9850 <position_shot+0x1e>
    984e:	59 c0       	rjmp	.+178    	; 0x9902 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    9850:	f8 01       	movw	r30, r16
    9852:	83 81       	ldd	r24, Z+3	; 0x03
    9854:	94 81       	ldd	r25, Z+4	; 0x04
    9856:	a5 81       	ldd	r26, Z+5	; 0x05
    9858:	b6 81       	ldd	r27, Z+6	; 0x06
    985a:	8b 83       	std	Y+3, r24	; 0x03
    985c:	9c 83       	std	Y+4, r25	; 0x04
    985e:	ad 83       	std	Y+5, r26	; 0x05
    9860:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    9862:	20 e0       	ldi	r18, 0x00	; 0
    9864:	30 e0       	ldi	r19, 0x00	; 0
    9866:	40 e8       	ldi	r20, 0x80	; 128
    9868:	50 e4       	ldi	r21, 0x40	; 64
    986a:	41 c0       	rjmp	.+130    	; 0x98ee <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    986c:	20 e0       	ldi	r18, 0x00	; 0
    986e:	30 e0       	ldi	r19, 0x00	; 0
    9870:	40 e8       	ldi	r20, 0x80	; 128
    9872:	50 e4       	ldi	r21, 0x40	; 64
    9874:	f8 01       	movw	r30, r16
    9876:	63 81       	ldd	r22, Z+3	; 0x03
    9878:	74 81       	ldd	r23, Z+4	; 0x04
    987a:	85 81       	ldd	r24, Z+5	; 0x05
    987c:	96 81       	ldd	r25, Z+6	; 0x06
    987e:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    9882:	6b 83       	std	Y+3, r22	; 0x03
    9884:	7c 83       	std	Y+4, r23	; 0x04
    9886:	8d 83       	std	Y+5, r24	; 0x05
    9888:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    988a:	f8 01       	movw	r30, r16
    988c:	87 81       	ldd	r24, Z+7	; 0x07
    988e:	90 85       	ldd	r25, Z+8	; 0x08
    9890:	a1 85       	ldd	r26, Z+9	; 0x09
    9892:	b2 85       	ldd	r27, Z+10	; 0x0a
    9894:	8f 83       	std	Y+7, r24	; 0x07
    9896:	98 87       	std	Y+8, r25	; 0x08
    9898:	a9 87       	std	Y+9, r26	; 0x09
    989a:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    989c:	32 c0       	rjmp	.+100    	; 0x9902 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    989e:	20 e0       	ldi	r18, 0x00	; 0
    98a0:	30 e0       	ldi	r19, 0x00	; 0
    98a2:	40 e0       	ldi	r20, 0x00	; 0
    98a4:	51 e4       	ldi	r21, 0x41	; 65
    98a6:	f8 01       	movw	r30, r16
    98a8:	63 81       	ldd	r22, Z+3	; 0x03
    98aa:	74 81       	ldd	r23, Z+4	; 0x04
    98ac:	85 81       	ldd	r24, Z+5	; 0x05
    98ae:	96 81       	ldd	r25, Z+6	; 0x06
    98b0:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    98b4:	6b 83       	std	Y+3, r22	; 0x03
    98b6:	7c 83       	std	Y+4, r23	; 0x04
    98b8:	8d 83       	std	Y+5, r24	; 0x05
    98ba:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    98bc:	20 e0       	ldi	r18, 0x00	; 0
    98be:	30 e0       	ldi	r19, 0x00	; 0
    98c0:	40 e8       	ldi	r20, 0x80	; 128
    98c2:	50 e4       	ldi	r21, 0x40	; 64
    98c4:	13 c0       	rjmp	.+38     	; 0x98ec <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    98c6:	20 e0       	ldi	r18, 0x00	; 0
    98c8:	30 e0       	ldi	r19, 0x00	; 0
    98ca:	40 e8       	ldi	r20, 0x80	; 128
    98cc:	50 e4       	ldi	r21, 0x40	; 64
    98ce:	f8 01       	movw	r30, r16
    98d0:	63 81       	ldd	r22, Z+3	; 0x03
    98d2:	74 81       	ldd	r23, Z+4	; 0x04
    98d4:	85 81       	ldd	r24, Z+5	; 0x05
    98d6:	96 81       	ldd	r25, Z+6	; 0x06
    98d8:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    98dc:	6b 83       	std	Y+3, r22	; 0x03
    98de:	7c 83       	std	Y+4, r23	; 0x04
    98e0:	8d 83       	std	Y+5, r24	; 0x05
    98e2:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    98e4:	20 e0       	ldi	r18, 0x00	; 0
    98e6:	30 e0       	ldi	r19, 0x00	; 0
    98e8:	40 e0       	ldi	r20, 0x00	; 0
    98ea:	51 e4       	ldi	r21, 0x41	; 65
    98ec:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    98ee:	67 81       	ldd	r22, Z+7	; 0x07
    98f0:	70 85       	ldd	r23, Z+8	; 0x08
    98f2:	81 85       	ldd	r24, Z+9	; 0x09
    98f4:	92 85       	ldd	r25, Z+10	; 0x0a
    98f6:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    98fa:	6f 83       	std	Y+7, r22	; 0x07
    98fc:	78 87       	std	Y+8, r23	; 0x08
    98fe:	89 87       	std	Y+9, r24	; 0x09
    9900:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    9902:	df 91       	pop	r29
    9904:	cf 91       	pop	r28
    9906:	1f 91       	pop	r17
    9908:	0f 91       	pop	r16
    990a:	08 95       	ret

0000990c <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    990c:	0f 93       	push	r16
    990e:	1f 93       	push	r17
    9910:	cf 93       	push	r28
    9912:	df 93       	push	r29
    9914:	8c 01       	movw	r16, r24
    9916:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    9918:	ac 01       	movw	r20, r24
    991a:	44 5f       	subi	r20, 0xF4	; 244
    991c:	5f 4f       	sbci	r21, 0xFF	; 255
    991e:	23 e0       	ldi	r18, 0x03	; 3
    9920:	6e e0       	ldi	r22, 0x0E	; 14
    9922:	84 e0       	ldi	r24, 0x04	; 4
    9924:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
	Print(8, 14, &strMap[strOwns]);
    9928:	4a ed       	ldi	r20, 0xDA	; 218
    992a:	51 e0       	ldi	r21, 0x01	; 1
    992c:	6e e0       	ldi	r22, 0x0E	; 14
    992e:	70 e0       	ldi	r23, 0x00	; 0
    9930:	88 e0       	ldi	r24, 0x08	; 8
    9932:	90 e0       	ldi	r25, 0x00	; 0
    9934:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    9938:	ae 01       	movw	r20, r28
    993a:	44 5f       	subi	r20, 0xF4	; 244
    993c:	5f 4f       	sbci	r21, 0xFF	; 255
    993e:	23 e0       	ldi	r18, 0x03	; 3
    9940:	6e e0       	ldi	r22, 0x0E	; 14
    9942:	8d e0       	ldi	r24, 0x0D	; 13
    9944:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
	Print(17, 14, &strMap[strBy]);
    9948:	4f ed       	ldi	r20, 0xDF	; 223
    994a:	51 e0       	ldi	r21, 0x01	; 1
    994c:	6e e0       	ldi	r22, 0x0E	; 14
    994e:	70 e0       	ldi	r23, 0x00	; 0
    9950:	81 e1       	ldi	r24, 0x11	; 17
    9952:	90 e0       	ldi	r25, 0x00	; 0
    9954:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    9958:	21 e0       	ldi	r18, 0x01	; 1
    995a:	f8 01       	movw	r30, r16
    995c:	40 89       	ldd	r20, Z+16	; 0x10
    995e:	6e e0       	ldi	r22, 0x0E	; 14
    9960:	70 e0       	ldi	r23, 0x00	; 0
    9962:	86 e1       	ldi	r24, 0x16	; 22
    9964:	90 e0       	ldi	r25, 0x00	; 0
    9966:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
	PrintChar(23, 14, '-');
    996a:	4d e2       	ldi	r20, 0x2D	; 45
    996c:	6e e0       	ldi	r22, 0x0E	; 14
    996e:	70 e0       	ldi	r23, 0x00	; 0
    9970:	87 e1       	ldi	r24, 0x17	; 23
    9972:	90 e0       	ldi	r25, 0x00	; 0
    9974:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    9978:	21 e0       	ldi	r18, 0x01	; 1
    997a:	48 89       	ldd	r20, Y+16	; 0x10
    997c:	6e e0       	ldi	r22, 0x0E	; 14
    997e:	70 e0       	ldi	r23, 0x00	; 0
    9980:	8a e1       	ldi	r24, 0x1A	; 26
    9982:	90 e0       	ldi	r25, 0x00	; 0
}
    9984:	df 91       	pop	r29
    9986:	cf 91       	pop	r28
    9988:	1f 91       	pop	r17
    998a:	0f 91       	pop	r16
	Print(8, 14, &strMap[strOwns]);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, &strMap[strBy]);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    998c:	0c 94 b7 47 	jmp	0x8f6e	; 0x8f6e <PrintByte>

00009990 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    9990:	0f 93       	push	r16
    9992:	1f 93       	push	r17
    9994:	cf 93       	push	r28
    9996:	df 93       	push	r29
    9998:	8c 01       	movw	r16, r24
    999a:	eb 01       	movw	r28, r22
    Print(9, 13, &strMap[strFinalScore]);
    999c:	42 ee       	ldi	r20, 0xE2	; 226
    999e:	51 e0       	ldi	r21, 0x01	; 1
    99a0:	6d e0       	ldi	r22, 0x0D	; 13
    99a2:	70 e0       	ldi	r23, 0x00	; 0
    99a4:	89 e0       	ldi	r24, 0x09	; 9
    99a6:	90 e0       	ldi	r25, 0x00	; 0
    99a8:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    99ac:	a8 01       	movw	r20, r16
    99ae:	44 5f       	subi	r20, 0xF4	; 244
    99b0:	5f 4f       	sbci	r21, 0xFF	; 255
    99b2:	23 e0       	ldi	r18, 0x03	; 3
    99b4:	6e e0       	ldi	r22, 0x0E	; 14
    99b6:	84 e0       	ldi	r24, 0x04	; 4
    99b8:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
    Print(8, 14, &strMap[strOwns]);
    99bc:	4a ed       	ldi	r20, 0xDA	; 218
    99be:	51 e0       	ldi	r21, 0x01	; 1
    99c0:	6e e0       	ldi	r22, 0x0E	; 14
    99c2:	70 e0       	ldi	r23, 0x00	; 0
    99c4:	88 e0       	ldi	r24, 0x08	; 8
    99c6:	90 e0       	ldi	r25, 0x00	; 0
    99c8:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    99cc:	ae 01       	movw	r20, r28
    99ce:	44 5f       	subi	r20, 0xF4	; 244
    99d0:	5f 4f       	sbci	r21, 0xFF	; 255
    99d2:	23 e0       	ldi	r18, 0x03	; 3
    99d4:	6e e0       	ldi	r22, 0x0E	; 14
    99d6:	8d e0       	ldi	r24, 0x0D	; 13
    99d8:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
    Print(17, 14, &strMap[strBy]);
    99dc:	4f ed       	ldi	r20, 0xDF	; 223
    99de:	51 e0       	ldi	r21, 0x01	; 1
    99e0:	6e e0       	ldi	r22, 0x0E	; 14
    99e2:	70 e0       	ldi	r23, 0x00	; 0
    99e4:	81 e1       	ldi	r24, 0x11	; 17
    99e6:	90 e0       	ldi	r25, 0x00	; 0
    99e8:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    PrintByte(22, 14, winner->score ,true);
    99ec:	21 e0       	ldi	r18, 0x01	; 1
    99ee:	f8 01       	movw	r30, r16
    99f0:	47 85       	ldd	r20, Z+15	; 0x0f
    99f2:	6e e0       	ldi	r22, 0x0E	; 14
    99f4:	70 e0       	ldi	r23, 0x00	; 0
    99f6:	86 e1       	ldi	r24, 0x16	; 22
    99f8:	90 e0       	ldi	r25, 0x00	; 0
    99fa:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
    PrintChar(23, 14, '-');
    99fe:	4d e2       	ldi	r20, 0x2D	; 45
    9a00:	6e e0       	ldi	r22, 0x0E	; 14
    9a02:	70 e0       	ldi	r23, 0x00	; 0
    9a04:	87 e1       	ldi	r24, 0x17	; 23
    9a06:	90 e0       	ldi	r25, 0x00	; 0
    9a08:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    9a0c:	21 e0       	ldi	r18, 0x01	; 1
    9a0e:	4f 85       	ldd	r20, Y+15	; 0x0f
    9a10:	6e e0       	ldi	r22, 0x0E	; 14
    9a12:	70 e0       	ldi	r23, 0x00	; 0
    9a14:	8a e1       	ldi	r24, 0x1A	; 26
    9a16:	90 e0       	ldi	r25, 0x00	; 0
}
    9a18:	df 91       	pop	r29
    9a1a:	cf 91       	pop	r28
    9a1c:	1f 91       	pop	r17
    9a1e:	0f 91       	pop	r16
    Print(8, 14, &strMap[strOwns]);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, &strMap[strBy]);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    9a20:	0c 94 b7 47 	jmp	0x8f6e	; 0x8f6e <PrintByte>

00009a24 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    9a24:	cf 93       	push	r28
    9a26:	df 93       	push	r29
    9a28:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    9a2a:	ac 01       	movw	r20, r24
    9a2c:	44 5f       	subi	r20, 0xF4	; 244
    9a2e:	5f 4f       	sbci	r21, 0xFF	; 255
    9a30:	23 e0       	ldi	r18, 0x03	; 3
    9a32:	60 e0       	ldi	r22, 0x00	; 0
    9a34:	8a e0       	ldi	r24, 0x0A	; 10
    9a36:	8c 0f       	add	r24, r28
    9a38:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
	Print(x, 0, &strMap[strScore]);
    9a3c:	d0 e0       	ldi	r29, 0x00	; 0
    9a3e:	43 e9       	ldi	r20, 0x93	; 147
    9a40:	52 e0       	ldi	r21, 0x02	; 2
    9a42:	60 e0       	ldi	r22, 0x00	; 0
    9a44:	70 e0       	ldi	r23, 0x00	; 0
    9a46:	ce 01       	movw	r24, r28
    9a48:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(x, 1, &strMap[strTotal]);
    9a4c:	4a e9       	ldi	r20, 0x9A	; 154
    9a4e:	52 e0       	ldi	r21, 0x02	; 2
    9a50:	61 e0       	ldi	r22, 0x01	; 1
    9a52:	70 e0       	ldi	r23, 0x00	; 0
    9a54:	ce 01       	movw	r24, r28
	
}
    9a56:	df 91       	pop	r29
    9a58:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, &strMap[strScore]);
	Print(x, 1, &strMap[strTotal]);
    9a5a:	0c 94 ea 47 	jmp	0x8fd4	; 0x8fd4 <Print>

00009a5e <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    9a5e:	0f 93       	push	r16
    9a60:	1f 93       	push	r17
    9a62:	cf 93       	push	r28
    9a64:	df 93       	push	r29
    9a66:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    9a68:	c6 2f       	mov	r28, r22
    9a6a:	d0 e0       	ldi	r29, 0x00	; 0
    9a6c:	28 96       	adiw	r28, 0x08	; 8
    9a6e:	20 e0       	ldi	r18, 0x00	; 0
    9a70:	fc 01       	movw	r30, r24
    9a72:	40 89       	ldd	r20, Z+16	; 0x10
    9a74:	60 e0       	ldi	r22, 0x00	; 0
    9a76:	70 e0       	ldi	r23, 0x00	; 0
    9a78:	ce 01       	movw	r24, r28
    9a7a:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    9a7e:	20 e0       	ldi	r18, 0x00	; 0
    9a80:	f8 01       	movw	r30, r16
    9a82:	47 85       	ldd	r20, Z+15	; 0x0f
    9a84:	61 e0       	ldi	r22, 0x01	; 1
    9a86:	70 e0       	ldi	r23, 0x00	; 0
    9a88:	ce 01       	movw	r24, r28
}
    9a8a:	df 91       	pop	r29
    9a8c:	cf 91       	pop	r28
    9a8e:	1f 91       	pop	r17
    9a90:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    9a92:	0c 94 b7 47 	jmp	0x8f6e	; 0x8f6e <PrintByte>

00009a96 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    9a96:	cf 93       	push	r28
    9a98:	df 93       	push	r29
    9a9a:	ec 01       	movw	r28, r24
    9a9c:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    9a9e:	9d 89       	ldd	r25, Y+21	; 0x15
    9aa0:	9a 35       	cpi	r25, 0x5A	; 90
    9aa2:	99 f0       	breq	.+38     	; 0x9aca <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    9aa4:	91 11       	cpse	r25, r1
    9aa6:	0c c0       	rjmp	.+24     	; 0x9ac0 <render_banter+0x2a>
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
    9aa8:	4e 89       	ldd	r20, Y+22	; 0x16
    9aaa:	9f e0       	ldi	r25, 0x0F	; 15
    9aac:	49 9f       	mul	r20, r25
    9aae:	a0 01       	movw	r20, r0
    9ab0:	11 24       	eor	r1, r1
    9ab2:	42 51       	subi	r20, 0x12	; 18
    9ab4:	5e 4f       	sbci	r21, 0xFE	; 254
    9ab6:	62 e0       	ldi	r22, 0x02	; 2
    9ab8:	70 e0       	ldi	r23, 0x00	; 0
    9aba:	90 e0       	ldi	r25, 0x00	; 0
    9abc:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    9ac0:	8d 89       	ldd	r24, Y+21	; 0x15
    9ac2:	8f 5f       	subi	r24, 0xFF	; 255
    9ac4:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
		}
		clear_banter = 1;
    9ac6:	41 e0       	ldi	r20, 0x01	; 1
    9ac8:	0a c0       	rjmp	.+20     	; 0x9ade <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    9aca:	44 23       	and	r20, r20
    9acc:	41 f0       	breq	.+16     	; 0x9ade <render_banter+0x48>
	{
		Print(banter_x, 2, &strMap[strBanterClear]);
    9ace:	44 e8       	ldi	r20, 0x84	; 132
    9ad0:	52 e0       	ldi	r21, 0x02	; 2
    9ad2:	62 e0       	ldi	r22, 0x02	; 2
    9ad4:	70 e0       	ldi	r23, 0x00	; 0
    9ad6:	90 e0       	ldi	r25, 0x00	; 0
    9ad8:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    9adc:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    9ade:	84 2f       	mov	r24, r20
    9ae0:	df 91       	pop	r29
    9ae2:	cf 91       	pop	r28
    9ae4:	08 95       	ret

00009ae6 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    9ae6:	ef 92       	push	r14
    9ae8:	ff 92       	push	r15
    9aea:	0f 93       	push	r16
    9aec:	1f 93       	push	r17
    9aee:	cf 93       	push	r28
    9af0:	df 93       	push	r29
    9af2:	1f 92       	push	r1
    9af4:	cd b7       	in	r28, 0x3d	; 61
    9af6:	de b7       	in	r29, 0x3e	; 62
    9af8:	7c 01       	movw	r14, r24
    9afa:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    9afc:	fc 01       	movw	r30, r24
    9afe:	67 81       	ldd	r22, Z+7	; 0x07
    9b00:	70 85       	ldd	r23, Z+8	; 0x08
    9b02:	81 85       	ldd	r24, Z+9	; 0x09
    9b04:	92 85       	ldd	r25, Z+10	; 0x0a
    9b06:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9b0a:	46 2f       	mov	r20, r22
    9b0c:	f7 01       	movw	r30, r14
    9b0e:	63 81       	ldd	r22, Z+3	; 0x03
    9b10:	74 81       	ldd	r23, Z+4	; 0x04
    9b12:	85 81       	ldd	r24, Z+5	; 0x05
    9b14:	96 81       	ldd	r25, Z+6	; 0x06
    9b16:	49 83       	std	Y+1, r20	; 0x01
    9b18:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9b1c:	02 e0       	ldi	r16, 0x02	; 2
    9b1e:	22 e0       	ldi	r18, 0x02	; 2
    9b20:	49 81       	ldd	r20, Y+1	; 0x01
    9b22:	81 2f       	mov	r24, r17
    9b24:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
}
    9b28:	0f 90       	pop	r0
    9b2a:	df 91       	pop	r29
    9b2c:	cf 91       	pop	r28
    9b2e:	1f 91       	pop	r17
    9b30:	0f 91       	pop	r16
    9b32:	ff 90       	pop	r15
    9b34:	ef 90       	pop	r14
    9b36:	08 95       	ret

00009b38 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    9b38:	ef 92       	push	r14
    9b3a:	ff 92       	push	r15
    9b3c:	0f 93       	push	r16
    9b3e:	1f 93       	push	r17
    9b40:	cf 93       	push	r28
    9b42:	df 93       	push	r29
    9b44:	1f 92       	push	r1
    9b46:	cd b7       	in	r28, 0x3d	; 61
    9b48:	de b7       	in	r29, 0x3e	; 62
    9b4a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    9b4c:	81 89       	ldd	r24, Z+17	; 0x11
    9b4e:	88 23       	and	r24, r24
    9b50:	b9 f0       	breq	.+46     	; 0x9b80 <render_shot+0x48>
    9b52:	16 2f       	mov	r17, r22
    9b54:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9b56:	63 a9       	ldd	r22, Z+51	; 0x33
    9b58:	74 a9       	ldd	r23, Z+52	; 0x34
    9b5a:	85 a9       	ldd	r24, Z+53	; 0x35
    9b5c:	96 a9       	ldd	r25, Z+54	; 0x36
    9b5e:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9b62:	46 2f       	mov	r20, r22
    9b64:	f7 01       	movw	r30, r14
    9b66:	67 a5       	ldd	r22, Z+47	; 0x2f
    9b68:	70 a9       	ldd	r23, Z+48	; 0x30
    9b6a:	81 a9       	ldd	r24, Z+49	; 0x31
    9b6c:	92 a9       	ldd	r25, Z+50	; 0x32
    9b6e:	49 83       	std	Y+1, r20	; 0x01
    9b70:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9b74:	01 e0       	ldi	r16, 0x01	; 1
    9b76:	21 e0       	ldi	r18, 0x01	; 1
    9b78:	49 81       	ldd	r20, Y+1	; 0x01
    9b7a:	81 2f       	mov	r24, r17
    9b7c:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
			sprite_index++;
		}
	}
}
    9b80:	0f 90       	pop	r0
    9b82:	df 91       	pop	r29
    9b84:	cf 91       	pop	r28
    9b86:	1f 91       	pop	r17
    9b88:	0f 91       	pop	r16
    9b8a:	ff 90       	pop	r15
    9b8c:	ef 90       	pop	r14
    9b8e:	08 95       	ret

00009b90 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    9b90:	cf 92       	push	r12
    9b92:	df 92       	push	r13
    9b94:	ef 92       	push	r14
    9b96:	ff 92       	push	r15
    9b98:	0f 93       	push	r16
    9b9a:	1f 93       	push	r17
    9b9c:	cf 93       	push	r28
    9b9e:	df 93       	push	r29
    9ba0:	1f 92       	push	r1
    9ba2:	cd b7       	in	r28, 0x3d	; 61
    9ba4:	de b7       	in	r29, 0x3e	; 62
    9ba6:	8c 01       	movw	r16, r24
    9ba8:	0f 5f       	subi	r16, 0xFF	; 255
    9baa:	1f 4f       	sbci	r17, 0xFF	; 255
    9bac:	7c 01       	movw	r14, r24
    9bae:	29 e1       	ldi	r18, 0x19	; 25
    9bb0:	e2 0e       	add	r14, r18
    9bb2:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    9bb4:	8e e1       	ldi	r24, 0x1E	; 30
    9bb6:	c8 2e       	mov	r12, r24
    9bb8:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    9bba:	f8 01       	movw	r30, r16
    9bbc:	82 85       	ldd	r24, Z+10	; 0x0a
    9bbe:	93 85       	ldd	r25, Z+11	; 0x0b
    9bc0:	89 2b       	or	r24, r25
    9bc2:	e1 f0       	breq	.+56     	; 0x9bfc <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    9bc4:	be 01       	movw	r22, r28
    9bc6:	6f 5f       	subi	r22, 0xFF	; 255
    9bc8:	7f 4f       	sbci	r23, 0xFF	; 255
    9bca:	c8 01       	movw	r24, r16
    9bcc:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9bd0:	9c 01       	movw	r18, r24
			if (looped)
    9bd2:	49 81       	ldd	r20, Y+1	; 0x01
    9bd4:	f8 01       	movw	r30, r16
    9bd6:	82 85       	ldd	r24, Z+10	; 0x0a
    9bd8:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9bda:	b6 01       	movw	r22, r12
    9bdc:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    9be0:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    9be2:	44 23       	and	r20, r20
    9be4:	41 f0       	breq	.+16     	; 0x9bf6 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    9be6:	40 e0       	ldi	r20, 0x00	; 0
    9be8:	50 e0       	ldi	r21, 0x00	; 0
    9bea:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
				ta->anims[i].tile_index = 0;
    9bee:	f8 01       	movw	r30, r16
    9bf0:	13 86       	std	Z+11, r1	; 0x0b
    9bf2:	12 86       	std	Z+10, r1	; 0x0a
    9bf4:	03 c0       	rjmp	.+6      	; 0x9bfc <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9bf6:	a9 01       	movw	r20, r18
    9bf8:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
    9bfc:	04 5f       	subi	r16, 0xF4	; 244
    9bfe:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9c00:	0e 15       	cp	r16, r14
    9c02:	1f 05       	cpc	r17, r15
    9c04:	d1 f6       	brne	.-76     	; 0x9bba <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    9c06:	0f 90       	pop	r0
    9c08:	df 91       	pop	r29
    9c0a:	cf 91       	pop	r28
    9c0c:	1f 91       	pop	r17
    9c0e:	0f 91       	pop	r16
    9c10:	ff 90       	pop	r15
    9c12:	ef 90       	pop	r14
    9c14:	df 90       	pop	r13
    9c16:	cf 90       	pop	r12
    9c18:	08 95       	ret

00009c1a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    9c1a:	ff 92       	push	r15
    9c1c:	0f 93       	push	r16
    9c1e:	1f 93       	push	r17
    9c20:	cf 93       	push	r28
    9c22:	df 93       	push	r29
    9c24:	1f 92       	push	r1
    9c26:	cd b7       	in	r28, 0x3d	; 61
    9c28:	de b7       	in	r29, 0x3e	; 62
    9c2a:	8c 01       	movw	r16, r24
    9c2c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    9c2e:	fc 01       	movw	r30, r24
    9c30:	84 89       	ldd	r24, Z+20	; 0x14
    9c32:	80 ff       	sbrs	r24, 0
    9c34:	18 c0       	rjmp	.+48     	; 0x9c66 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9c36:	be 01       	movw	r22, r28
    9c38:	6f 5f       	subi	r22, 0xFF	; 255
    9c3a:	7f 4f       	sbci	r23, 0xFF	; 255
    9c3c:	c8 01       	movw	r24, r16
    9c3e:	8c 59       	subi	r24, 0x9C	; 156
    9c40:	9f 4f       	sbci	r25, 0xFF	; 255
    9c42:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9c46:	29 81       	ldd	r18, Y+1	; 0x01
    9c48:	22 23       	and	r18, r18
    9c4a:	09 f4       	brne	.+2      	; 0x9c4e <tank_map+0x34>
    9c4c:	5a c0       	rjmp	.+180    	; 0x9d02 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    9c4e:	f8 01       	movw	r30, r16
    9c50:	84 89       	ldd	r24, Z+20	; 0x14
    9c52:	91 e0       	ldi	r25, 0x01	; 1
    9c54:	98 27       	eor	r25, r24
    9c56:	94 8b       	std	Z+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    9c58:	c8 01       	movw	r24, r16
    9c5a:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9c5e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9c60:	8b e3       	ldi	r24, 0x3B	; 59
    9c62:	97 e4       	ldi	r25, 0x47	; 71
    9c64:	4f c0       	rjmp	.+158    	; 0x9d04 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9c66:	f8 01       	movw	r30, r16
    9c68:	97 89       	ldd	r25, Z+23	; 0x17
    9c6a:	98 37       	cpi	r25, 0x78	; 120
    9c6c:	11 f0       	breq	.+4      	; 0x9c72 <tank_map+0x58>
		{
			player->grace_frame++;
    9c6e:	9f 5f       	subi	r25, 0xFF	; 255
    9c70:	97 8b       	std	Z+23, r25	; 0x17
		}
		switch (player->shared.direction)
    9c72:	f8 01       	movw	r30, r16
    9c74:	90 81       	ld	r25, Z
    9c76:	91 30       	cpi	r25, 0x01	; 1
    9c78:	79 f0       	breq	.+30     	; 0x9c98 <tank_map+0x7e>
    9c7a:	f8 f0       	brcs	.+62     	; 0x9cba <tank_map+0xa0>
    9c7c:	92 30       	cpi	r25, 0x02	; 2
    9c7e:	99 f0       	breq	.+38     	; 0x9ca6 <tank_map+0x8c>
    9c80:	93 30       	cpi	r25, 0x03	; 3
    9c82:	d9 f4       	brne	.+54     	; 0x9cba <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9c84:	be 01       	movw	r22, r28
    9c86:	6f 5f       	subi	r22, 0xFF	; 255
    9c88:	7f 4f       	sbci	r23, 0xFF	; 255
    9c8a:	c8 01       	movw	r24, r16
    9c8c:	86 5a       	subi	r24, 0xA6	; 166
    9c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    9c90:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9c94:	41 e0       	ldi	r20, 0x01	; 1
    9c96:	1a c0       	rjmp	.+52     	; 0x9ccc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    9c98:	be 01       	movw	r22, r28
    9c9a:	6f 5f       	subi	r22, 0xFF	; 255
    9c9c:	7f 4f       	sbci	r23, 0xFF	; 255
    9c9e:	c8 01       	movw	r24, r16
    9ca0:	86 5a       	subi	r24, 0xA6	; 166
    9ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    9ca4:	10 c0       	rjmp	.+32     	; 0x9cc6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    9ca6:	be 01       	movw	r22, r28
    9ca8:	6f 5f       	subi	r22, 0xFF	; 255
    9caa:	7f 4f       	sbci	r23, 0xFF	; 255
    9cac:	c8 01       	movw	r24, r16
    9cae:	80 5b       	subi	r24, 0xB0	; 176
    9cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    9cb2:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9cb6:	42 e0       	ldi	r20, 0x02	; 2
    9cb8:	09 c0       	rjmp	.+18     	; 0x9ccc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    9cba:	be 01       	movw	r22, r28
    9cbc:	6f 5f       	subi	r22, 0xFF	; 255
    9cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    9cc0:	c8 01       	movw	r24, r16
    9cc2:	80 5b       	subi	r24, 0xB0	; 176
    9cc4:	9f 4f       	sbci	r25, 0xFF	; 255
    9cc6:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9cca:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    9ccc:	f8 01       	movw	r30, r16
    9cce:	27 89       	ldd	r18, Z+23	; 0x17
    9cd0:	28 37       	cpi	r18, 0x78	; 120
    9cd2:	31 f0       	breq	.+12     	; 0x9ce0 <tank_map+0xc6>
    9cd4:	20 91 34 0b 	lds	r18, 0x0B34
    9cd8:	22 23       	and	r18, r18
    9cda:	11 f0       	breq	.+4      	; 0x9ce0 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    9cdc:	8b e3       	ldi	r24, 0x3B	; 59
    9cde:	97 e4       	ldi	r25, 0x47	; 71
		}
		toggle_counter--;
    9ce0:	20 91 03 01 	lds	r18, 0x0103
    9ce4:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    9ce6:	19 f0       	breq	.+6      	; 0x9cee <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    9ce8:	20 93 03 01 	sts	0x0103, r18
    9cec:	0b c0       	rjmp	.+22     	; 0x9d04 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    9cee:	24 e1       	ldi	r18, 0x14	; 20
    9cf0:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9cf4:	30 91 34 0b 	lds	r19, 0x0B34
    9cf8:	21 e0       	ldi	r18, 0x01	; 1
    9cfa:	23 27       	eor	r18, r19
    9cfc:	20 93 34 0b 	sts	0x0B34, r18
    9d00:	01 c0       	rjmp	.+2      	; 0x9d04 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9d02:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9d04:	bc 01       	movw	r22, r24
    9d06:	8f 2d       	mov	r24, r15
    9d08:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    9d0c:	84 e0       	ldi	r24, 0x04	; 4
    9d0e:	8f 0d       	add	r24, r15
    9d10:	0f 90       	pop	r0
    9d12:	df 91       	pop	r29
    9d14:	cf 91       	pop	r28
    9d16:	1f 91       	pop	r17
    9d18:	0f 91       	pop	r16
    9d1a:	ff 90       	pop	r15
    9d1c:	08 95       	ret

00009d1e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    9d1e:	1f 93       	push	r17
    9d20:	cf 93       	push	r28
    9d22:	df 93       	push	r29
    9d24:	1f 92       	push	r1
    9d26:	cd b7       	in	r28, 0x3d	; 61
    9d28:	de b7       	in	r29, 0x3e	; 62
    9d2a:	16 2f       	mov	r17, r22
	char looped = 0;
    9d2c:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9d2e:	fc 01       	movw	r30, r24
    9d30:	22 ad       	ldd	r18, Z+58	; 0x3a
    9d32:	22 23       	and	r18, r18
    9d34:	39 f1       	breq	.+78     	; 0x9d84 <shot_map+0x66>
		{
			switch (shot->shared.direction)
    9d36:	24 a5       	ldd	r18, Z+44	; 0x2c
    9d38:	21 30       	cpi	r18, 0x01	; 1
    9d3a:	71 f0       	breq	.+28     	; 0x9d58 <shot_map+0x3a>
    9d3c:	f0 f0       	brcs	.+60     	; 0x9d7a <shot_map+0x5c>
    9d3e:	22 30       	cpi	r18, 0x02	; 2
    9d40:	a1 f0       	breq	.+40     	; 0x9d6a <shot_map+0x4c>
    9d42:	23 30       	cpi	r18, 0x03	; 3
    9d44:	d1 f4       	brne	.+52     	; 0x9d7a <shot_map+0x5c>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9d46:	be 01       	movw	r22, r28
    9d48:	6f 5f       	subi	r22, 0xFF	; 255
    9d4a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d4c:	8a 5b       	subi	r24, 0xBA	; 186
    9d4e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d50:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9d54:	41 e0       	ldi	r20, 0x01	; 1
    9d56:	19 c0       	rjmp	.+50     	; 0x9d8a <shot_map+0x6c>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9d58:	be 01       	movw	r22, r28
    9d5a:	6f 5f       	subi	r22, 0xFF	; 255
    9d5c:	7f 4f       	sbci	r23, 0xFF	; 255
    9d5e:	8a 5b       	subi	r24, 0xBA	; 186
    9d60:	9f 4f       	sbci	r25, 0xFF	; 255
    9d62:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9d66:	40 e0       	ldi	r20, 0x00	; 0
    9d68:	10 c0       	rjmp	.+32     	; 0x9d8a <shot_map+0x6c>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9d6a:	be 01       	movw	r22, r28
    9d6c:	6f 5f       	subi	r22, 0xFF	; 255
    9d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d70:	cc 96       	adiw	r24, 0x3c	; 60
    9d72:	0e 94 6e 48 	call	0x90dc	; 0x90dc <LBGetNextFrame>
    9d76:	42 e0       	ldi	r20, 0x02	; 2
    9d78:	08 c0       	rjmp	.+16     	; 0x9d8a <shot_map+0x6c>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    9d7a:	be 01       	movw	r22, r28
    9d7c:	6f 5f       	subi	r22, 0xFF	; 255
    9d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    9d80:	cc 96       	adiw	r24, 0x3c	; 60
    9d82:	ef cf       	rjmp	.-34     	; 0x9d62 <shot_map+0x44>
    9d84:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    9d86:	8b e3       	ldi	r24, 0x3B	; 59
    9d88:	97 e4       	ldi	r25, 0x47	; 71
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    9d8a:	bc 01       	movw	r22, r24
    9d8c:	81 2f       	mov	r24, r17
    9d8e:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    9d92:	81 e0       	ldi	r24, 0x01	; 1
    9d94:	81 0f       	add	r24, r17
    9d96:	0f 90       	pop	r0
    9d98:	df 91       	pop	r29
    9d9a:	cf 91       	pop	r28
    9d9c:	1f 91       	pop	r17
    9d9e:	08 95       	ret

00009da0 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    9da0:	cf 93       	push	r28
    9da2:	df 93       	push	r29
    9da4:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    9da6:	88 81       	ld	r24, Y
    9da8:	81 11       	cpse	r24, r1
    9daa:	0b c0       	rjmp	.+22     	; 0x9dc2 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    9dac:	6f 81       	ldd	r22, Y+7	; 0x07
    9dae:	78 85       	ldd	r23, Y+8	; 0x08
    9db0:	89 85       	ldd	r24, Y+9	; 0x09
    9db2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9db4:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9db8:	66 95       	lsr	r22
    9dba:	66 95       	lsr	r22
    9dbc:	66 95       	lsr	r22
    9dbe:	6f 5f       	subi	r22, 0xFF	; 255
    9dc0:	1d c0       	rjmp	.+58     	; 0x9dfc <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    9dc2:	81 30       	cpi	r24, 0x01	; 1
    9dc4:	69 f4       	brne	.+26     	; 0x9de0 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    9dc6:	20 e0       	ldi	r18, 0x00	; 0
    9dc8:	30 e0       	ldi	r19, 0x00	; 0
    9dca:	40 e0       	ldi	r20, 0x00	; 0
    9dcc:	5e e3       	ldi	r21, 0x3E	; 62
    9dce:	6b 81       	ldd	r22, Y+3	; 0x03
    9dd0:	7c 81       	ldd	r23, Y+4	; 0x04
    9dd2:	8d 81       	ldd	r24, Y+5	; 0x05
    9dd4:	9e 81       	ldd	r25, Y+6	; 0x06
    9dd6:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9dda:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9dde:	27 c0       	rjmp	.+78     	; 0x9e2e <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    9de0:	82 30       	cpi	r24, 0x02	; 2
    9de2:	d9 f4       	brne	.+54     	; 0x9e1a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    9de4:	20 e0       	ldi	r18, 0x00	; 0
    9de6:	30 e0       	ldi	r19, 0x00	; 0
    9de8:	40 e0       	ldi	r20, 0x00	; 0
    9dea:	5e e3       	ldi	r21, 0x3E	; 62
    9dec:	6f 81       	ldd	r22, Y+7	; 0x07
    9dee:	78 85       	ldd	r23, Y+8	; 0x08
    9df0:	89 85       	ldd	r24, Y+9	; 0x09
    9df2:	9a 85       	ldd	r25, Y+10	; 0x0a
    9df4:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9df8:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
		sprite->y = tile * 8;
    9dfc:	88 e0       	ldi	r24, 0x08	; 8
    9dfe:	68 9f       	mul	r22, r24
    9e00:	b0 01       	movw	r22, r0
    9e02:	11 24       	eor	r1, r1
    9e04:	88 27       	eor	r24, r24
    9e06:	77 fd       	sbrc	r23, 7
    9e08:	80 95       	com	r24
    9e0a:	98 2f       	mov	r25, r24
    9e0c:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9e10:	6f 83       	std	Y+7, r22	; 0x07
    9e12:	78 87       	std	Y+8, r23	; 0x08
    9e14:	89 87       	std	Y+9, r24	; 0x09
    9e16:	9a 87       	std	Y+10, r25	; 0x0a
    9e18:	18 c0       	rjmp	.+48     	; 0x9e4a <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    9e1a:	6b 81       	ldd	r22, Y+3	; 0x03
    9e1c:	7c 81       	ldd	r23, Y+4	; 0x04
    9e1e:	8d 81       	ldd	r24, Y+5	; 0x05
    9e20:	9e 81       	ldd	r25, Y+6	; 0x06
    9e22:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    9e26:	66 95       	lsr	r22
    9e28:	66 95       	lsr	r22
    9e2a:	66 95       	lsr	r22
    9e2c:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    9e2e:	88 e0       	ldi	r24, 0x08	; 8
    9e30:	68 9f       	mul	r22, r24
    9e32:	b0 01       	movw	r22, r0
    9e34:	11 24       	eor	r1, r1
    9e36:	88 27       	eor	r24, r24
    9e38:	77 fd       	sbrc	r23, 7
    9e3a:	80 95       	com	r24
    9e3c:	98 2f       	mov	r25, r24
    9e3e:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9e42:	6b 83       	std	Y+3, r22	; 0x03
    9e44:	7c 83       	std	Y+4, r23	; 0x04
    9e46:	8d 83       	std	Y+5, r24	; 0x05
    9e48:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9e4a:	81 e0       	ldi	r24, 0x01	; 1
    9e4c:	8a 83       	std	Y+2, r24	; 0x02
}
    9e4e:	df 91       	pop	r29
    9e50:	cf 91       	pop	r28
    9e52:	08 95       	ret

00009e54 <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    9e54:	cf 93       	push	r28
    9e56:	df 93       	push	r29
    9e58:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    9e5a:	88 81       	ld	r24, Y
    9e5c:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9e5e:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    9e60:	81 11       	cpse	r24, r1
    9e62:	13 c0       	rjmp	.+38     	; 0x9e8a <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    9e64:	80 e0       	ldi	r24, 0x00	; 0
    9e66:	90 e0       	ldi	r25, 0x00	; 0
    9e68:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9e6c:	25 e6       	ldi	r18, 0x65	; 101
    9e6e:	38 e8       	ldi	r19, 0x88	; 136
    9e70:	48 e8       	ldi	r20, 0x88	; 136
    9e72:	5c e3       	ldi	r21, 0x3C	; 60
    9e74:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9e78:	9b 01       	movw	r18, r22
    9e7a:	ac 01       	movw	r20, r24
    9e7c:	6f 81       	ldd	r22, Y+7	; 0x07
    9e7e:	78 85       	ldd	r23, Y+8	; 0x08
    9e80:	89 85       	ldd	r24, Y+9	; 0x09
    9e82:	9a 85       	ldd	r25, Y+10	; 0x0a
    9e84:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    9e88:	29 c0       	rjmp	.+82     	; 0x9edc <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    9e8a:	81 30       	cpi	r24, 0x01	; 1
    9e8c:	99 f4       	brne	.+38     	; 0x9eb4 <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9e8e:	80 e0       	ldi	r24, 0x00	; 0
    9e90:	90 e0       	ldi	r25, 0x00	; 0
    9e92:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9e96:	25 e6       	ldi	r18, 0x65	; 101
    9e98:	38 e8       	ldi	r19, 0x88	; 136
    9e9a:	48 e8       	ldi	r20, 0x88	; 136
    9e9c:	5c e3       	ldi	r21, 0x3C	; 60
    9e9e:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9ea2:	9b 01       	movw	r18, r22
    9ea4:	ac 01       	movw	r20, r24
    9ea6:	6b 81       	ldd	r22, Y+3	; 0x03
    9ea8:	7c 81       	ldd	r23, Y+4	; 0x04
    9eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    9eac:	9e 81       	ldd	r25, Y+6	; 0x06
    9eae:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    9eb2:	2b c0       	rjmp	.+86     	; 0x9f0a <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    9eb4:	82 30       	cpi	r24, 0x02	; 2
    9eb6:	b9 f4       	brne	.+46     	; 0x9ee6 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9eb8:	80 e0       	ldi	r24, 0x00	; 0
    9eba:	90 e0       	ldi	r25, 0x00	; 0
    9ebc:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9ec0:	25 e6       	ldi	r18, 0x65	; 101
    9ec2:	38 e8       	ldi	r19, 0x88	; 136
    9ec4:	48 e8       	ldi	r20, 0x88	; 136
    9ec6:	5c e3       	ldi	r21, 0x3C	; 60
    9ec8:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9ecc:	9b 01       	movw	r18, r22
    9ece:	ac 01       	movw	r20, r24
    9ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    9ed2:	78 85       	ldd	r23, Y+8	; 0x08
    9ed4:	89 85       	ldd	r24, Y+9	; 0x09
    9ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    9ed8:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    9edc:	6f 83       	std	Y+7, r22	; 0x07
    9ede:	78 87       	std	Y+8, r23	; 0x08
    9ee0:	89 87       	std	Y+9, r24	; 0x09
    9ee2:	9a 87       	std	Y+10, r25	; 0x0a
    9ee4:	16 c0       	rjmp	.+44     	; 0x9f12 <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    9ee6:	80 e0       	ldi	r24, 0x00	; 0
    9ee8:	90 e0       	ldi	r25, 0x00	; 0
    9eea:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    9eee:	25 e6       	ldi	r18, 0x65	; 101
    9ef0:	38 e8       	ldi	r19, 0x88	; 136
    9ef2:	48 e8       	ldi	r20, 0x88	; 136
    9ef4:	5c e3       	ldi	r21, 0x3C	; 60
    9ef6:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    9efa:	9b 01       	movw	r18, r22
    9efc:	ac 01       	movw	r20, r24
    9efe:	6b 81       	ldd	r22, Y+3	; 0x03
    9f00:	7c 81       	ldd	r23, Y+4	; 0x04
    9f02:	8d 81       	ldd	r24, Y+5	; 0x05
    9f04:	9e 81       	ldd	r25, Y+6	; 0x06
    9f06:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    9f0a:	6b 83       	std	Y+3, r22	; 0x03
    9f0c:	7c 83       	std	Y+4, r23	; 0x04
    9f0e:	8d 83       	std	Y+5, r24	; 0x05
    9f10:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    9f12:	81 e0       	ldi	r24, 0x01	; 1
    9f14:	8a 83       	std	Y+2, r24	; 0x02
}
    9f16:	df 91       	pop	r29
    9f18:	cf 91       	pop	r28
    9f1a:	08 95       	ret

00009f1c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9f1c:	86 56       	subi	r24, 0x66	; 102
    9f1e:	93 4f       	sbci	r25, 0xF3	; 243
    9f20:	fc 01       	movw	r30, r24
    9f22:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9f24:	81 30       	cpi	r24, 0x01	; 1
    9f26:	21 f0       	breq	.+8      	; 0x9f30 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    9f28:	82 30       	cpi	r24, 0x02	; 2
    9f2a:	21 f0       	breq	.+8      	; 0x9f34 <solid_square_tile+0x18>

	return 0;
    9f2c:	80 e0       	ldi	r24, 0x00	; 0
    9f2e:	08 95       	ret
    9f30:	81 e0       	ldi	r24, 0x01	; 1
    9f32:	08 95       	ret
    9f34:	82 e0       	ldi	r24, 0x02	; 2
}
    9f36:	08 95       	ret

00009f38 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9f38:	86 56       	subi	r24, 0x66	; 102
    9f3a:	93 4f       	sbci	r25, 0xF3	; 243
    9f3c:	fc 01       	movw	r30, r24
    9f3e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    9f40:	81 30       	cpi	r24, 0x01	; 1
    9f42:	61 f0       	breq	.+24     	; 0x9f5c <solid_tile+0x24>
	if (tile == L_METAL) return tile;
    9f44:	82 30       	cpi	r24, 0x02	; 2
    9f46:	61 f0       	breq	.+24     	; 0x9f60 <solid_tile+0x28>
	if (tile == L_TL) return tile;
    9f48:	83 30       	cpi	r24, 0x03	; 3
    9f4a:	61 f0       	breq	.+24     	; 0x9f64 <solid_tile+0x2c>
	if (tile == L_BR) return tile;
    9f4c:	86 30       	cpi	r24, 0x06	; 6
    9f4e:	61 f0       	breq	.+24     	; 0x9f68 <solid_tile+0x30>
	if (tile == L_TR) return tile;
    9f50:	84 30       	cpi	r24, 0x04	; 4
    9f52:	61 f0       	breq	.+24     	; 0x9f6c <solid_tile+0x34>
	if (tile == L_BL) return tile;
    9f54:	85 30       	cpi	r24, 0x05	; 5
    9f56:	61 f0       	breq	.+24     	; 0x9f70 <solid_tile+0x38>

	return 0;
    9f58:	80 e0       	ldi	r24, 0x00	; 0
    9f5a:	08 95       	ret
    9f5c:	81 e0       	ldi	r24, 0x01	; 1
    9f5e:	08 95       	ret
    9f60:	82 e0       	ldi	r24, 0x02	; 2
    9f62:	08 95       	ret
    9f64:	83 e0       	ldi	r24, 0x03	; 3
    9f66:	08 95       	ret
    9f68:	86 e0       	ldi	r24, 0x06	; 6
    9f6a:	08 95       	ret
    9f6c:	84 e0       	ldi	r24, 0x04	; 4
    9f6e:	08 95       	ret
    9f70:	85 e0       	ldi	r24, 0x05	; 5
}
    9f72:	08 95       	ret

00009f74 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    9f74:	86 56       	subi	r24, 0x66	; 102
    9f76:	93 4f       	sbci	r25, 0xF3	; 243
    9f78:	fc 01       	movw	r30, r24
    9f7a:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    9f7c:	83 30       	cpi	r24, 0x03	; 3
    9f7e:	41 f0       	breq	.+16     	; 0x9f90 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    9f80:	86 30       	cpi	r24, 0x06	; 6
    9f82:	41 f0       	breq	.+16     	; 0x9f94 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    9f84:	84 30       	cpi	r24, 0x04	; 4
    9f86:	41 f0       	breq	.+16     	; 0x9f98 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    9f88:	85 30       	cpi	r24, 0x05	; 5
    9f8a:	41 f0       	breq	.+16     	; 0x9f9c <solid_directional_tile+0x28>
	
	return 0;
    9f8c:	80 e0       	ldi	r24, 0x00	; 0
    9f8e:	08 95       	ret
    9f90:	83 e0       	ldi	r24, 0x03	; 3
    9f92:	08 95       	ret
    9f94:	86 e0       	ldi	r24, 0x06	; 6
    9f96:	08 95       	ret
    9f98:	84 e0       	ldi	r24, 0x04	; 4
    9f9a:	08 95       	ret
    9f9c:	85 e0       	ldi	r24, 0x05	; 5
}
    9f9e:	08 95       	ret

00009fa0 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    9fa0:	7f 92       	push	r7
    9fa2:	8f 92       	push	r8
    9fa4:	9f 92       	push	r9
    9fa6:	af 92       	push	r10
    9fa8:	bf 92       	push	r11
    9faa:	cf 92       	push	r12
    9fac:	df 92       	push	r13
    9fae:	ef 92       	push	r14
    9fb0:	ff 92       	push	r15
    9fb2:	0f 93       	push	r16
    9fb4:	1f 93       	push	r17
    9fb6:	cf 93       	push	r28
    9fb8:	df 93       	push	r29
    9fba:	b6 2e       	mov	r11, r22
    9fbc:	94 2e       	mov	r9, r20
    9fbe:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    9fc0:	fc 01       	movw	r30, r24
    9fc2:	e6 56       	subi	r30, 0x66	; 102
    9fc4:	f3 4f       	sbci	r31, 0xF3	; 243
    9fc6:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    9fc8:	6e e1       	ldi	r22, 0x1E	; 30
    9fca:	70 e0       	ldi	r23, 0x00	; 0
    9fcc:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    9fd0:	f8 2e       	mov	r15, r24
    9fd2:	ff 0c       	add	r15, r15
    9fd4:	ff 0c       	add	r15, r15
    9fd6:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    9fd8:	6d 5f       	subi	r22, 0xFD	; 253
    9fda:	7f 4f       	sbci	r23, 0xFF	; 255
    9fdc:	16 2f       	mov	r17, r22
    9fde:	11 0f       	add	r17, r17
    9fe0:	11 0f       	add	r17, r17
    9fe2:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    9fe4:	83 e0       	ldi	r24, 0x03	; 3
    9fe6:	d8 16       	cp	r13, r24
    9fe8:	19 f0       	breq	.+6      	; 0x9ff0 <collides_directional_tile+0x50>
    9fea:	86 e0       	ldi	r24, 0x06	; 6
    9fec:	d8 12       	cpse	r13, r24
    9fee:	31 c0       	rjmp	.+98     	; 0xa052 <collides_directional_tile+0xb2>
    9ff0:	cf ef       	ldi	r28, 0xFF	; 255
    9ff2:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    9ff4:	c9 0d       	add	r28, r9
    9ff6:	27 e0       	ldi	r18, 0x07	; 7
    9ff8:	72 2e       	mov	r7, r18
    9ffa:	7f 0c       	add	r7, r15
    9ffc:	37 e0       	ldi	r19, 0x07	; 7
    9ffe:	83 2e       	mov	r8, r19
    a000:	81 0e       	add	r8, r17
    a002:	ac 2e       	mov	r10, r28
    a004:	cb 2c       	mov	r12, r11
    a006:	e9 2c       	mov	r14, r9
    a008:	0b 2d       	mov	r16, r11
    a00a:	21 2f       	mov	r18, r17
    a00c:	47 2d       	mov	r20, r7
    a00e:	68 2d       	mov	r22, r8
    a010:	8f 2d       	mov	r24, r15
    a012:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a016:	81 11       	cpse	r24, r1
    a018:	58 c0       	rjmp	.+176    	; 0xa0ca <collides_directional_tile+0x12a>
    a01a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    a01c:	db 0d       	add	r29, r11
    a01e:	a9 2c       	mov	r10, r9
    a020:	cd 2e       	mov	r12, r29
    a022:	21 2f       	mov	r18, r17
    a024:	47 2d       	mov	r20, r7
    a026:	68 2d       	mov	r22, r8
    a028:	8f 2d       	mov	r24, r15
    a02a:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a02e:	81 11       	cpse	r24, r1
    a030:	4c c0       	rjmp	.+152    	; 0xa0ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    a032:	ac 2e       	mov	r10, r28
    a034:	0d 2f       	mov	r16, r29
    a036:	21 2f       	mov	r18, r17
    a038:	47 2d       	mov	r20, r7
    a03a:	68 2d       	mov	r22, r8
    a03c:	8f 2d       	mov	r24, r15
    a03e:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a042:	81 11       	cpse	r24, r1
    a044:	42 c0       	rjmp	.+132    	; 0xa0ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    a046:	ec 2e       	mov	r14, r28
    a048:	0b 2d       	mov	r16, r11
    a04a:	21 2f       	mov	r18, r17
    a04c:	47 2d       	mov	r20, r7
    a04e:	68 2d       	mov	r22, r8
    a050:	34 c0       	rjmp	.+104    	; 0xa0ba <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    a052:	8c ef       	ldi	r24, 0xFC	; 252
    a054:	8d 0d       	add	r24, r13
    a056:	82 30       	cpi	r24, 0x02	; 2
    a058:	b0 f5       	brcc	.+108    	; 0xa0c6 <collides_directional_tile+0x126>
    a05a:	cf ef       	ldi	r28, 0xFF	; 255
    a05c:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    a05e:	c4 0f       	add	r28, r20
    a060:	87 e0       	ldi	r24, 0x07	; 7
    a062:	78 2e       	mov	r7, r24
    a064:	71 0e       	add	r7, r17
    a066:	97 e0       	ldi	r25, 0x07	; 7
    a068:	89 2e       	mov	r8, r25
    a06a:	8f 0c       	add	r8, r15
    a06c:	ac 2e       	mov	r10, r28
    a06e:	cb 2c       	mov	r12, r11
    a070:	e4 2e       	mov	r14, r20
    a072:	0b 2d       	mov	r16, r11
    a074:	27 2d       	mov	r18, r7
    a076:	48 2d       	mov	r20, r8
    a078:	61 2f       	mov	r22, r17
    a07a:	8f 2d       	mov	r24, r15
    a07c:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a080:	81 11       	cpse	r24, r1
    a082:	23 c0       	rjmp	.+70     	; 0xa0ca <collides_directional_tile+0x12a>
    a084:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    a086:	db 0d       	add	r29, r11
    a088:	a9 2c       	mov	r10, r9
    a08a:	cd 2e       	mov	r12, r29
    a08c:	27 2d       	mov	r18, r7
    a08e:	48 2d       	mov	r20, r8
    a090:	61 2f       	mov	r22, r17
    a092:	8f 2d       	mov	r24, r15
    a094:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a098:	81 11       	cpse	r24, r1
    a09a:	17 c0       	rjmp	.+46     	; 0xa0ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    a09c:	ac 2e       	mov	r10, r28
    a09e:	0d 2f       	mov	r16, r29
    a0a0:	27 2d       	mov	r18, r7
    a0a2:	48 2d       	mov	r20, r8
    a0a4:	61 2f       	mov	r22, r17
    a0a6:	8f 2d       	mov	r24, r15
    a0a8:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a0ac:	81 11       	cpse	r24, r1
    a0ae:	0d c0       	rjmp	.+26     	; 0xa0ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    a0b0:	ec 2e       	mov	r14, r28
    a0b2:	0b 2d       	mov	r16, r11
    a0b4:	27 2d       	mov	r18, r7
    a0b6:	48 2d       	mov	r20, r8
    a0b8:	61 2f       	mov	r22, r17
    a0ba:	8f 2d       	mov	r24, r15
    a0bc:	0e 94 43 49 	call	0x9286	; 0x9286 <LBLineIntersect>
    a0c0:	81 11       	cpse	r24, r1
    a0c2:	03 c0       	rjmp	.+6      	; 0xa0ca <collides_directional_tile+0x12a>
    a0c4:	03 c0       	rjmp	.+6      	; 0xa0cc <collides_directional_tile+0x12c>
	}
	
	return 0;
    a0c6:	80 e0       	ldi	r24, 0x00	; 0
    a0c8:	01 c0       	rjmp	.+2      	; 0xa0cc <collides_directional_tile+0x12c>
    a0ca:	8d 2d       	mov	r24, r13
}
    a0cc:	df 91       	pop	r29
    a0ce:	cf 91       	pop	r28
    a0d0:	1f 91       	pop	r17
    a0d2:	0f 91       	pop	r16
    a0d4:	ff 90       	pop	r15
    a0d6:	ef 90       	pop	r14
    a0d8:	df 90       	pop	r13
    a0da:	cf 90       	pop	r12
    a0dc:	bf 90       	pop	r11
    a0de:	af 90       	pop	r10
    a0e0:	9f 90       	pop	r9
    a0e2:	8f 90       	pop	r8
    a0e4:	7f 90       	pop	r7
    a0e6:	08 95       	ret

0000a0e8 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a0e8:	8f 92       	push	r8
    a0ea:	9f 92       	push	r9
    a0ec:	af 92       	push	r10
    a0ee:	cf 92       	push	r12
    a0f0:	ef 92       	push	r14
    a0f2:	0f 93       	push	r16
    a0f4:	1f 93       	push	r17
    a0f6:	cf 93       	push	r28
    a0f8:	df 93       	push	r29
    a0fa:	4c 01       	movw	r8, r24
    a0fc:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a0fe:	20 e0       	ldi	r18, 0x00	; 0
    a100:	30 e0       	ldi	r19, 0x00	; 0
    a102:	40 e0       	ldi	r20, 0x00	; 0
    a104:	50 e4       	ldi	r21, 0x40	; 64
    a106:	6f 81       	ldd	r22, Y+7	; 0x07
    a108:	78 85       	ldd	r23, Y+8	; 0x08
    a10a:	89 85       	ldd	r24, Y+9	; 0x09
    a10c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a10e:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a112:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a116:	e6 2e       	mov	r14, r22
    a118:	20 e0       	ldi	r18, 0x00	; 0
    a11a:	30 e0       	ldi	r19, 0x00	; 0
    a11c:	40 e0       	ldi	r20, 0x00	; 0
    a11e:	50 e4       	ldi	r21, 0x40	; 64
    a120:	6b 81       	ldd	r22, Y+3	; 0x03
    a122:	7c 81       	ldd	r23, Y+4	; 0x04
    a124:	8d 81       	ldd	r24, Y+5	; 0x05
    a126:	9e 81       	ldd	r25, Y+6	; 0x06
    a128:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a12c:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a130:	06 2f       	mov	r16, r22
    a132:	20 e0       	ldi	r18, 0x00	; 0
    a134:	30 e0       	ldi	r19, 0x00	; 0
    a136:	40 e8       	ldi	r20, 0x80	; 128
    a138:	5f e3       	ldi	r21, 0x3F	; 63
    a13a:	f4 01       	movw	r30, r8
    a13c:	67 81       	ldd	r22, Z+7	; 0x07
    a13e:	70 85       	ldd	r23, Z+8	; 0x08
    a140:	81 85       	ldd	r24, Z+9	; 0x09
    a142:	92 85       	ldd	r25, Z+10	; 0x0a
    a144:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a148:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a14c:	16 2f       	mov	r17, r22
    a14e:	20 e0       	ldi	r18, 0x00	; 0
    a150:	30 e0       	ldi	r19, 0x00	; 0
    a152:	40 e8       	ldi	r20, 0x80	; 128
    a154:	5f e3       	ldi	r21, 0x3F	; 63
    a156:	f4 01       	movw	r30, r8
    a158:	63 81       	ldd	r22, Z+3	; 0x03
    a15a:	74 81       	ldd	r23, Z+4	; 0x04
    a15c:	85 81       	ldd	r24, Z+5	; 0x05
    a15e:	96 81       	ldd	r25, Z+6	; 0x06
    a160:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a164:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a168:	86 2f       	mov	r24, r22
    a16a:	94 e0       	ldi	r25, 0x04	; 4
    a16c:	a9 2e       	mov	r10, r25
    a16e:	24 e0       	ldi	r18, 0x04	; 4
    a170:	c2 2e       	mov	r12, r18
    a172:	2e e0       	ldi	r18, 0x0E	; 14
    a174:	4e e0       	ldi	r20, 0x0E	; 14
    a176:	61 2f       	mov	r22, r17
    a178:	0e 94 19 49 	call	0x9232	; 0x9232 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a17c:	88 23       	and	r24, r24
    a17e:	41 f0       	breq	.+16     	; 0xa190 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a180:	f4 01       	movw	r30, r8
    a182:	87 89       	ldd	r24, Z+23	; 0x17
    a184:	88 37       	cpi	r24, 0x78	; 120
    a186:	21 f4       	brne	.+8      	; 0xa190 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a188:	81 e0       	ldi	r24, 0x01	; 1
    a18a:	9f 85       	ldd	r25, Y+15	; 0x0f
    a18c:	99 30       	cpi	r25, 0x09	; 9
    a18e:	08 f4       	brcc	.+2      	; 0xa192 <player_shot+0xaa>
    a190:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a192:	df 91       	pop	r29
    a194:	cf 91       	pop	r28
    a196:	1f 91       	pop	r17
    a198:	0f 91       	pop	r16
    a19a:	ef 90       	pop	r14
    a19c:	cf 90       	pop	r12
    a19e:	af 90       	pop	r10
    a1a0:	9f 90       	pop	r9
    a1a2:	8f 90       	pop	r8
    a1a4:	08 95       	ret

0000a1a6 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    a1a6:	cf 92       	push	r12
    a1a8:	df 92       	push	r13
    a1aa:	ef 92       	push	r14
    a1ac:	ff 92       	push	r15
    a1ae:	cf 93       	push	r28
    a1b0:	df 93       	push	r29
    a1b2:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a1b4:	cb 80       	ldd	r12, Y+3	; 0x03
    a1b6:	dc 80       	ldd	r13, Y+4	; 0x04
    a1b8:	ed 80       	ldd	r14, Y+5	; 0x05
    a1ba:	fe 80       	ldd	r15, Y+6	; 0x06
    a1bc:	20 e0       	ldi	r18, 0x00	; 0
    a1be:	30 e0       	ldi	r19, 0x00	; 0
    a1c0:	a9 01       	movw	r20, r18
    a1c2:	c7 01       	movw	r24, r14
    a1c4:	b6 01       	movw	r22, r12
    a1c6:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    a1ca:	87 fd       	sbrc	r24, 7
    a1cc:	31 c0       	rjmp	.+98     	; 0xa230 <collision_detect_boundries+0x8a>
    a1ce:	20 e0       	ldi	r18, 0x00	; 0
    a1d0:	30 e0       	ldi	r19, 0x00	; 0
    a1d2:	40 e0       	ldi	r20, 0x00	; 0
    a1d4:	51 e4       	ldi	r21, 0x41	; 65
    a1d6:	c7 01       	movw	r24, r14
    a1d8:	b6 01       	movw	r22, r12
    a1da:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a1de:	20 e0       	ldi	r18, 0x00	; 0
    a1e0:	30 e0       	ldi	r19, 0x00	; 0
    a1e2:	40 e7       	ldi	r20, 0x70	; 112
    a1e4:	53 e4       	ldi	r21, 0x43	; 67
    a1e6:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <__gesf2>
    a1ea:	18 16       	cp	r1, r24
    a1ec:	0c f1       	brlt	.+66     	; 0xa230 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a1ee:	cf 80       	ldd	r12, Y+7	; 0x07
    a1f0:	d8 84       	ldd	r13, Y+8	; 0x08
    a1f2:	e9 84       	ldd	r14, Y+9	; 0x09
    a1f4:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a1f6:	20 e0       	ldi	r18, 0x00	; 0
    a1f8:	30 e0       	ldi	r19, 0x00	; 0
    a1fa:	40 ec       	ldi	r20, 0xC0	; 192
    a1fc:	51 e4       	ldi	r21, 0x41	; 65
    a1fe:	c7 01       	movw	r24, r14
    a200:	b6 01       	movw	r22, r12
    a202:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    a206:	87 fd       	sbrc	r24, 7
    a208:	13 c0       	rjmp	.+38     	; 0xa230 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a20a:	20 e0       	ldi	r18, 0x00	; 0
    a20c:	30 e0       	ldi	r19, 0x00	; 0
    a20e:	40 e0       	ldi	r20, 0x00	; 0
    a210:	51 e4       	ldi	r21, 0x41	; 65
    a212:	c7 01       	movw	r24, r14
    a214:	b6 01       	movw	r22, r12
    a216:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a21a:	c1 e0       	ldi	r28, 0x01	; 1
    a21c:	20 e0       	ldi	r18, 0x00	; 0
    a21e:	30 e0       	ldi	r19, 0x00	; 0
    a220:	40 e6       	ldi	r20, 0x60	; 96
    a222:	53 e4       	ldi	r21, 0x43	; 67
    a224:	0e 94 59 63 	call	0xc6b2	; 0xc6b2 <__gesf2>
    a228:	18 16       	cp	r1, r24
    a22a:	1c f0       	brlt	.+6      	; 0xa232 <collision_detect_boundries+0x8c>
    a22c:	c0 e0       	ldi	r28, 0x00	; 0
    a22e:	01 c0       	rjmp	.+2      	; 0xa232 <collision_detect_boundries+0x8c>
	{
		return 1;
    a230:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    a232:	8c 2f       	mov	r24, r28
    a234:	df 91       	pop	r29
    a236:	cf 91       	pop	r28
    a238:	ff 90       	pop	r15
    a23a:	ef 90       	pop	r14
    a23c:	df 90       	pop	r13
    a23e:	cf 90       	pop	r12
    a240:	08 95       	ret

0000a242 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    a242:	ef 92       	push	r14
    a244:	ff 92       	push	r15
    a246:	0f 93       	push	r16
    a248:	1f 93       	push	r17
    a24a:	cf 93       	push	r28
    a24c:	9b 01       	movw	r18, r22
    a24e:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    a250:	8c 01       	movw	r16, r24
    a252:	06 56       	subi	r16, 0x66	; 102
    a254:	13 4f       	sbci	r17, 0xF3	; 243
    a256:	f8 01       	movw	r30, r16
    a258:	41 81       	ldd	r20, Z+1	; 0x01
    a25a:	41 11       	cpse	r20, r1
    a25c:	0a c0       	rjmp	.+20     	; 0xa272 <drop_item+0x30>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    a25e:	6e e1       	ldi	r22, 0x1E	; 30
    a260:	70 e0       	ldi	r23, 0x00	; 0
    a262:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a266:	6d 5f       	subi	r22, 0xFD	; 253
    a268:	a9 01       	movw	r20, r18
    a26a:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
		level.level_map[tile_index] = item_type;
    a26e:	f8 01       	movw	r30, r16
    a270:	21 c0       	rjmp	.+66     	; 0xa2b4 <drop_item+0x72>
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    a272:	ac 01       	movw	r20, r24
    a274:	45 56       	subi	r20, 0x65	; 101
    a276:	53 4f       	sbci	r21, 0xF3	; 243
    a278:	7a 01       	movw	r14, r20
    a27a:	fa 01       	movw	r30, r20
    a27c:	41 81       	ldd	r20, Z+1	; 0x01
    a27e:	41 11       	cpse	r20, r1
    a280:	08 c0       	rjmp	.+16     	; 0xa292 <drop_item+0x50>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    a282:	6e e1       	ldi	r22, 0x1E	; 30
    a284:	70 e0       	ldi	r23, 0x00	; 0
    a286:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a28a:	6d 5f       	subi	r22, 0xFD	; 253
    a28c:	a9 01       	movw	r20, r18
    a28e:	8f 5f       	subi	r24, 0xFF	; 255
    a290:	0e c0       	rjmp	.+28     	; 0xa2ae <drop_item+0x6c>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    a292:	ac 01       	movw	r20, r24
    a294:	48 54       	subi	r20, 0x48	; 72
    a296:	53 4f       	sbci	r21, 0xF3	; 243
    a298:	7a 01       	movw	r14, r20
    a29a:	fa 01       	movw	r30, r20
    a29c:	41 81       	ldd	r20, Z+1	; 0x01
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    a29e:	6e e1       	ldi	r22, 0x1E	; 30
    a2a0:	70 e0       	ldi	r23, 0x00	; 0
    a2a2:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a2a6:	6c 5f       	subi	r22, 0xFC	; 252
	else if (level.level_map[tile_index+1] == L_EMPTY)
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    a2a8:	41 11       	cpse	r20, r1
    a2aa:	06 c0       	rjmp	.+12     	; 0xa2b8 <drop_item+0x76>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    a2ac:	a9 01       	movw	r20, r18
    a2ae:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
		level.level_map[tile_index+30] = item_type;
    a2b2:	f7 01       	movw	r30, r14
    a2b4:	c1 83       	std	Z+1, r28	; 0x01
    a2b6:	06 c0       	rjmp	.+12     	; 0xa2c4 <drop_item+0x82>
	}
	else
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    a2b8:	a9 01       	movw	r20, r18
    a2ba:	8f 5f       	subi	r24, 0xFF	; 255
    a2bc:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    a2c0:	f8 01       	movw	r30, r16
    a2c2:	c0 a3       	std	Z+32, r28	; 0x20
	}
}
    a2c4:	cf 91       	pop	r28
    a2c6:	1f 91       	pop	r17
    a2c8:	0f 91       	pop	r16
    a2ca:	ff 90       	pop	r15
    a2cc:	ef 90       	pop	r14
    a2ce:	08 95       	ret

0000a2d0 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    a2d0:	ff 92       	push	r15
    a2d2:	0f 93       	push	r16
    a2d4:	1f 93       	push	r17
    a2d6:	cf 93       	push	r28
    a2d8:	df 93       	push	r29
    a2da:	ec 01       	movw	r28, r24
    a2dc:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a2de:	20 e0       	ldi	r18, 0x00	; 0
    a2e0:	30 e0       	ldi	r19, 0x00	; 0
    a2e2:	40 e0       	ldi	r20, 0x00	; 0
    a2e4:	5e e3       	ldi	r21, 0x3E	; 62
    a2e6:	6f 81       	ldd	r22, Y+7	; 0x07
    a2e8:	78 85       	ldd	r23, Y+8	; 0x08
    a2ea:	89 85       	ldd	r24, Y+9	; 0x09
    a2ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    a2ee:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a2f2:	20 e0       	ldi	r18, 0x00	; 0
    a2f4:	30 e0       	ldi	r19, 0x00	; 0
    a2f6:	40 e4       	ldi	r20, 0x40	; 64
    a2f8:	50 e4       	ldi	r21, 0x40	; 64
    a2fa:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    a2fe:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    a302:	8e e1       	ldi	r24, 0x1E	; 30
    a304:	68 9f       	mul	r22, r24
    a306:	80 01       	movw	r16, r0
    a308:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    a30a:	20 e0       	ldi	r18, 0x00	; 0
    a30c:	30 e0       	ldi	r19, 0x00	; 0
    a30e:	40 e0       	ldi	r20, 0x00	; 0
    a310:	5e e3       	ldi	r21, 0x3E	; 62
    a312:	6b 81       	ldd	r22, Y+3	; 0x03
    a314:	7c 81       	ldd	r23, Y+4	; 0x04
    a316:	8d 81       	ldd	r24, Y+5	; 0x05
    a318:	9e 81       	ldd	r25, Y+6	; 0x06
    a31a:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a31e:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    a322:	06 0f       	add	r16, r22
    a324:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    a326:	8a 8d       	ldd	r24, Y+26	; 0x1a
    a328:	88 23       	and	r24, r24
    a32a:	79 f0       	breq	.+30     	; 0xa34a <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    a32c:	40 e0       	ldi	r20, 0x00	; 0
    a32e:	50 e0       	ldi	r21, 0x00	; 0
    a330:	61 e0       	ldi	r22, 0x01	; 1
    a332:	8a e0       	ldi	r24, 0x0A	; 10
    a334:	8f 0d       	add	r24, r15
    a336:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    a33a:	47 e0       	ldi	r20, 0x07	; 7
    a33c:	6e e6       	ldi	r22, 0x6E	; 110
    a33e:	7b e6       	ldi	r23, 0x6B	; 107
    a340:	c8 01       	movw	r24, r16
    a342:	0e 94 21 51 	call	0xa242	; 0xa242 <drop_item>
		player->max_speed = MAX_SPEED;
    a346:	82 e3       	ldi	r24, 0x32	; 50
    a348:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    a34a:	89 8d       	ldd	r24, Y+25	; 0x19
    a34c:	88 23       	and	r24, r24
    a34e:	69 f0       	breq	.+26     	; 0xa36a <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    a350:	40 e0       	ldi	r20, 0x00	; 0
    a352:	50 e0       	ldi	r21, 0x00	; 0
    a354:	61 e0       	ldi	r22, 0x01	; 1
    a356:	8b e0       	ldi	r24, 0x0B	; 11
    a358:	8f 0d       	add	r24, r15
    a35a:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    a35e:	49 e0       	ldi	r20, 0x09	; 9
    a360:	68 e6       	ldi	r22, 0x68	; 104
    a362:	7b e6       	ldi	r23, 0x6B	; 107
    a364:	c8 01       	movw	r24, r16
    a366:	0e 94 21 51 	call	0xa242	; 0xa242 <drop_item>
	}
	player->has_over_speed = false;
    a36a:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    a36c:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    a36e:	8c 89       	ldd	r24, Y+20	; 0x14
    a370:	81 60       	ori	r24, 0x01	; 1
    a372:	8c 8b       	std	Y+20, r24	; 0x14
}
    a374:	df 91       	pop	r29
    a376:	cf 91       	pop	r28
    a378:	1f 91       	pop	r17
    a37a:	0f 91       	pop	r16
    a37c:	ff 90       	pop	r15
    a37e:	08 95       	ret

0000a380 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    a380:	fc 01       	movw	r30, r24
    a382:	8e e1       	ldi	r24, 0x1E	; 30
    a384:	48 9f       	mul	r20, r24
    a386:	a0 01       	movw	r20, r0
    a388:	11 24       	eor	r1, r1
    a38a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a38c:	64 0f       	add	r22, r20
    a38e:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a390:	21 11       	cpse	r18, r1
    a392:	05 c0       	rjmp	.+10     	; 0xa39e <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    a394:	71 83       	std	Z+1, r23	; 0x01
    a396:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a398:	6f 5f       	subi	r22, 0xFF	; 255
    a39a:	7f 4f       	sbci	r23, 0xFF	; 255
    a39c:	12 c0       	rjmp	.+36     	; 0xa3c2 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    a39e:	21 30       	cpi	r18, 0x01	; 1
    a3a0:	19 f4       	brne	.+6      	; 0xa3a8 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    a3a2:	cb 01       	movw	r24, r22
    a3a4:	01 96       	adiw	r24, 0x01	; 1
    a3a6:	04 c0       	rjmp	.+8      	; 0xa3b0 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    a3a8:	22 30       	cpi	r18, 0x02	; 2
    a3aa:	39 f4       	brne	.+14     	; 0xa3ba <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    a3ac:	cb 01       	movw	r24, r22
    a3ae:	4e 96       	adiw	r24, 0x1e	; 30
    a3b0:	91 83       	std	Z+1, r25	; 0x01
    a3b2:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a3b4:	61 5e       	subi	r22, 0xE1	; 225
    a3b6:	7f 4f       	sbci	r23, 0xFF	; 255
    a3b8:	04 c0       	rjmp	.+8      	; 0xa3c2 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a3ba:	71 83       	std	Z+1, r23	; 0x01
    a3bc:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a3be:	62 5e       	subi	r22, 0xE2	; 226
    a3c0:	7f 4f       	sbci	r23, 0xFF	; 255
    a3c2:	73 83       	std	Z+3, r23	; 0x03
    a3c4:	62 83       	std	Z+2, r22	; 0x02
    a3c6:	08 95       	ret

0000a3c8 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    a3c8:	ef 92       	push	r14
    a3ca:	ff 92       	push	r15
    a3cc:	0f 93       	push	r16
    a3ce:	1f 93       	push	r17
    a3d0:	cf 93       	push	r28
    a3d2:	df 93       	push	r29
    a3d4:	ec 01       	movw	r28, r24
    a3d6:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    a3d8:	8e e1       	ldi	r24, 0x1E	; 30
    a3da:	e8 2e       	mov	r14, r24
    a3dc:	f1 2c       	mov	r15, r1
    a3de:	cb 01       	movw	r24, r22
    a3e0:	b7 01       	movw	r22, r14
    a3e2:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a3e6:	6d 5f       	subi	r22, 0xFD	; 253
    a3e8:	40 e0       	ldi	r20, 0x00	; 0
    a3ea:	50 e0       	ldi	r21, 0x00	; 0
    a3ec:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    a3f0:	88 81       	ld	r24, Y
    a3f2:	fe 01       	movw	r30, r28
    a3f4:	9c e0       	ldi	r25, 0x0C	; 12
    a3f6:	89 9f       	mul	r24, r25
    a3f8:	e0 0d       	add	r30, r0
    a3fa:	f1 1d       	adc	r31, r1
    a3fc:	11 24       	eor	r1, r1
    a3fe:	83 85       	ldd	r24, Z+11	; 0x0b
    a400:	94 85       	ldd	r25, Z+12	; 0x0c
    a402:	00 97       	sbiw	r24, 0x00	; 0
    a404:	41 f0       	breq	.+16     	; 0xa416 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    a406:	b7 01       	movw	r22, r14
    a408:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a40c:	6d 5f       	subi	r22, 0xFD	; 253
    a40e:	40 e0       	ldi	r20, 0x00	; 0
    a410:	50 e0       	ldi	r21, 0x00	; 0
    a412:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    a416:	88 81       	ld	r24, Y
    a418:	fe 01       	movw	r30, r28
    a41a:	9c e0       	ldi	r25, 0x0C	; 12
    a41c:	89 9f       	mul	r24, r25
    a41e:	e0 0d       	add	r30, r0
    a420:	f1 1d       	adc	r31, r1
    a422:	11 24       	eor	r1, r1
    a424:	14 87       	std	Z+12, r17	; 0x0c
    a426:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    a428:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    a42a:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    a42c:	82 30       	cpi	r24, 0x02	; 2
    a42e:	11 f0       	breq	.+4      	; 0xa434 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    a430:	88 83       	st	Y, r24
    a432:	01 c0       	rjmp	.+2      	; 0xa436 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    a434:	18 82       	st	Y, r1
	}
}
    a436:	df 91       	pop	r29
    a438:	cf 91       	pop	r28
    a43a:	1f 91       	pop	r17
    a43c:	0f 91       	pop	r16
    a43e:	ff 90       	pop	r15
    a440:	ef 90       	pop	r14
    a442:	08 95       	ret

0000a444 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    a444:	fb 01       	movw	r30, r22
	switch (tile_type)
    a446:	84 30       	cpi	r24, 0x04	; 4
    a448:	71 f0       	breq	.+28     	; 0xa466 <richochet+0x22>
    a44a:	18 f4       	brcc	.+6      	; 0xa452 <richochet+0xe>
    a44c:	83 30       	cpi	r24, 0x03	; 3
    a44e:	31 f0       	breq	.+12     	; 0xa45c <richochet+0x18>
    a450:	08 95       	ret
    a452:	85 30       	cpi	r24, 0x05	; 5
    a454:	99 f0       	breq	.+38     	; 0xa47c <richochet+0x38>
    a456:	86 30       	cpi	r24, 0x06	; 6
    a458:	59 f0       	breq	.+22     	; 0xa470 <richochet+0x2c>
    a45a:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    a45c:	80 81       	ld	r24, Z
    a45e:	8d 7f       	andi	r24, 0xFD	; 253
    a460:	29 f4       	brne	.+10     	; 0xa46c <richochet+0x28>
				sprite->direction = D_RIGHT;
    a462:	81 e0       	ldi	r24, 0x01	; 1
    a464:	09 c0       	rjmp	.+18     	; 0xa478 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    a466:	80 81       	ld	r24, Z
    a468:	8d 7f       	andi	r24, 0xFD	; 253
    a46a:	29 f0       	breq	.+10     	; 0xa476 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    a46c:	82 e0       	ldi	r24, 0x02	; 2
    a46e:	04 c0       	rjmp	.+8      	; 0xa478 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    a470:	80 81       	ld	r24, Z
    a472:	8d 7f       	andi	r24, 0xFD	; 253
    a474:	31 f4       	brne	.+12     	; 0xa482 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    a476:	83 e0       	ldi	r24, 0x03	; 3
    a478:	80 83       	st	Z, r24
    a47a:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    a47c:	80 81       	ld	r24, Z
    a47e:	8d 7f       	andi	r24, 0xFD	; 253
    a480:	81 f3       	breq	.-32     	; 0xa462 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    a482:	10 82       	st	Z, r1
    a484:	08 95       	ret

0000a486 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    a486:	2f 92       	push	r2
    a488:	3f 92       	push	r3
    a48a:	4f 92       	push	r4
    a48c:	5f 92       	push	r5
    a48e:	6f 92       	push	r6
    a490:	7f 92       	push	r7
    a492:	8f 92       	push	r8
    a494:	9f 92       	push	r9
    a496:	af 92       	push	r10
    a498:	bf 92       	push	r11
    a49a:	cf 92       	push	r12
    a49c:	df 92       	push	r13
    a49e:	ef 92       	push	r14
    a4a0:	ff 92       	push	r15
    a4a2:	0f 93       	push	r16
    a4a4:	1f 93       	push	r17
    a4a6:	cf 93       	push	r28
    a4a8:	df 93       	push	r29
    a4aa:	00 d0       	rcall	.+0      	; 0xa4ac <collision_detect_shot+0x26>
    a4ac:	00 d0       	rcall	.+0      	; 0xa4ae <collision_detect_shot+0x28>
    a4ae:	1f 92       	push	r1
    a4b0:	cd b7       	in	r28, 0x3d	; 61
    a4b2:	de b7       	in	r29, 0x3e	; 62
    a4b4:	3c 01       	movw	r6, r24
    a4b6:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    a4b8:	1a 82       	std	Y+2, r1	; 0x02
    a4ba:	19 82       	std	Y+1, r1	; 0x01
    a4bc:	1c 82       	std	Y+4, r1	; 0x04
    a4be:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    a4c0:	20 e0       	ldi	r18, 0x00	; 0
    a4c2:	30 e0       	ldi	r19, 0x00	; 0
    a4c4:	40 e0       	ldi	r20, 0x00	; 0
    a4c6:	5e e3       	ldi	r21, 0x3E	; 62
    a4c8:	db 01       	movw	r26, r22
    a4ca:	17 96       	adiw	r26, 0x07	; 7
    a4cc:	6d 91       	ld	r22, X+
    a4ce:	7d 91       	ld	r23, X+
    a4d0:	8d 91       	ld	r24, X+
    a4d2:	9c 91       	ld	r25, X
    a4d4:	1a 97       	sbiw	r26, 0x0a	; 10
    a4d6:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a4da:	20 e0       	ldi	r18, 0x00	; 0
    a4dc:	30 e0       	ldi	r19, 0x00	; 0
    a4de:	40 e4       	ldi	r20, 0x40	; 64
    a4e0:	50 e4       	ldi	r21, 0x40	; 64
    a4e2:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    a4e6:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a4ea:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    a4ec:	20 e0       	ldi	r18, 0x00	; 0
    a4ee:	30 e0       	ldi	r19, 0x00	; 0
    a4f0:	40 e0       	ldi	r20, 0x00	; 0
    a4f2:	5e e3       	ldi	r21, 0x3E	; 62
    a4f4:	f4 01       	movw	r30, r8
    a4f6:	63 81       	ldd	r22, Z+3	; 0x03
    a4f8:	74 81       	ldd	r23, Z+4	; 0x04
    a4fa:	85 81       	ldd	r24, Z+5	; 0x05
    a4fc:	96 81       	ldd	r25, Z+6	; 0x06
    a4fe:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a502:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    a506:	d4 01       	movw	r26, r8
    a508:	2c 91       	ld	r18, X
    a50a:	41 2f       	mov	r20, r17
    a50c:	ce 01       	movw	r24, r28
    a50e:	01 96       	adiw	r24, 0x01	; 1
    a510:	0e 94 c0 51 	call	0xa380	; 0xa380 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    a514:	c4 01       	movw	r24, r8
    a516:	0e 94 d3 50 	call	0xa1a6	; 0xa1a6 <collision_detect_boundries>
    a51a:	88 23       	and	r24, r24
    a51c:	69 f0       	breq	.+26     	; 0xa538 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    a51e:	f4 01       	movw	r30, r8
    a520:	63 85       	ldd	r22, Z+11	; 0x0b
    a522:	c4 01       	movw	r24, r8
    a524:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
		player->active_shots--;
    a528:	d3 01       	movw	r26, r6
    a52a:	51 96       	adiw	r26, 0x11	; 17
    a52c:	8c 91       	ld	r24, X
    a52e:	51 97       	sbiw	r26, 0x11	; 17
    a530:	81 50       	subi	r24, 0x01	; 1
    a532:	51 96       	adiw	r26, 0x11	; 17
    a534:	8c 93       	st	X, r24
		return;
    a536:	63 c1       	rjmp	.+710    	; 0xa7fe <collision_detect_shot+0x378>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    a538:	b4 01       	movw	r22, r8
    a53a:	85 e2       	ldi	r24, 0x25	; 37
    a53c:	9c e0       	ldi	r25, 0x0C	; 12
    a53e:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <player_shot>
    a542:	88 23       	and	r24, r24
    a544:	b9 f0       	breq	.+46     	; 0xa574 <collision_detect_shot+0xee>
    a546:	80 91 39 0c 	lds	r24, 0x0C39
    a54a:	80 fd       	sbrc	r24, 0
    a54c:	13 c0       	rjmp	.+38     	; 0xa574 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    a54e:	80 91 99 0f 	lds	r24, 0x0F99
    a552:	8f 5f       	subi	r24, 0xFF	; 255
    a554:	80 93 99 0f 	sts	0x0F99, r24
		player2.score++;
    a558:	80 91 98 0f 	lds	r24, 0x0F98
    a55c:	8f 5f       	subi	r24, 0xFF	; 255
    a55e:	80 93 98 0f 	sts	0x0F98, r24
		render_score(&player2, 15);
    a562:	6f e0       	ldi	r22, 0x0F	; 15
    a564:	89 e8       	ldi	r24, 0x89	; 137
    a566:	9f e0       	ldi	r25, 0x0F	; 15
    a568:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    a56c:	05 e2       	ldi	r16, 0x25	; 37
    a56e:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    a570:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    a572:	29 c0       	rjmp	.+82     	; 0xa5c6 <collision_detect_shot+0x140>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    a574:	b4 01       	movw	r22, r8
    a576:	89 e8       	ldi	r24, 0x89	; 137
    a578:	9f e0       	ldi	r25, 0x0F	; 15
    a57a:	0e 94 74 50 	call	0xa0e8	; 0xa0e8 <player_shot>
    a57e:	81 11       	cpse	r24, r1
    a580:	0b c0       	rjmp	.+22     	; 0xa598 <collision_detect_shot+0x112>
    a582:	fe 01       	movw	r30, r28
    a584:	31 96       	adiw	r30, 0x01	; 1
    a586:	2f 01       	movw	r4, r30
    a588:	1d 82       	std	Y+5, r1	; 0x05
    a58a:	f1 2c       	mov	r15, r1
    a58c:	d1 2c       	mov	r13, r1
    a58e:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a590:	6e e1       	ldi	r22, 0x1E	; 30
    a592:	26 2e       	mov	r2, r22
    a594:	31 2c       	mov	r3, r1
    a596:	5e c0       	rjmp	.+188    	; 0xa654 <collision_detect_shot+0x1ce>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    a598:	80 91 9d 0f 	lds	r24, 0x0F9D
    a59c:	80 fd       	sbrc	r24, 0
    a59e:	f1 cf       	rjmp	.-30     	; 0xa582 <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    a5a0:	80 91 35 0c 	lds	r24, 0x0C35
    a5a4:	8f 5f       	subi	r24, 0xFF	; 255
    a5a6:	80 93 35 0c 	sts	0x0C35, r24
		player1.score++;
    a5aa:	80 91 34 0c 	lds	r24, 0x0C34
    a5ae:	8f 5f       	subi	r24, 0xFF	; 255
    a5b0:	80 93 34 0c 	sts	0x0C34, r24
		render_score(&player1, 0);
    a5b4:	60 e0       	ldi	r22, 0x00	; 0
    a5b6:	85 e2       	ldi	r24, 0x25	; 37
    a5b8:	9c e0       	ldi	r25, 0x0C	; 12
    a5ba:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    a5be:	09 e8       	ldi	r16, 0x89	; 137
    a5c0:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    a5c2:	5f e0       	ldi	r21, 0x0F	; 15
    a5c4:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    a5c6:	01 15       	cp	r16, r1
    a5c8:	11 05       	cpc	r17, r1
    a5ca:	d9 f2       	breq	.-74     	; 0xa582 <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    a5cc:	d4 01       	movw	r26, r8
    a5ce:	1b 96       	adiw	r26, 0x0b	; 11
    a5d0:	6c 91       	ld	r22, X
    a5d2:	c4 01       	movw	r24, r8
    a5d4:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
		player->active_shots--;
    a5d8:	f3 01       	movw	r30, r6
    a5da:	81 89       	ldd	r24, Z+17	; 0x11
    a5dc:	81 50       	subi	r24, 0x01	; 1
    a5de:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    a5e0:	6f 2d       	mov	r22, r15
    a5e2:	c8 01       	movw	r24, r16
    a5e4:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <kill_player>
		SFX_TANK_EXPLODE;
    a5e8:	2f ef       	ldi	r18, 0xFF	; 255
    a5ea:	40 e1       	ldi	r20, 0x10	; 16
    a5ec:	6a e0       	ldi	r22, 0x0A	; 10
    a5ee:	04 c1       	rjmp	.+520    	; 0xa7f8 <collision_detect_shot+0x372>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    a5f0:	c5 01       	movw	r24, r10
    a5f2:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <solid_directional_tile>
    a5f6:	88 23       	and	r24, r24
    a5f8:	c1 f1       	breq	.+112    	; 0xa66a <collision_detect_shot+0x1e4>
    a5fa:	20 e0       	ldi	r18, 0x00	; 0
    a5fc:	30 e0       	ldi	r19, 0x00	; 0
    a5fe:	40 e0       	ldi	r20, 0x00	; 0
    a600:	50 e4       	ldi	r21, 0x40	; 64
    a602:	f4 01       	movw	r30, r8
    a604:	67 81       	ldd	r22, Z+7	; 0x07
    a606:	70 85       	ldd	r23, Z+8	; 0x08
    a608:	81 85       	ldd	r24, Z+9	; 0x09
    a60a:	92 85       	ldd	r25, Z+10	; 0x0a
    a60c:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a610:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a614:	c6 2e       	mov	r12, r22
    a616:	20 e0       	ldi	r18, 0x00	; 0
    a618:	30 e0       	ldi	r19, 0x00	; 0
    a61a:	40 e0       	ldi	r20, 0x00	; 0
    a61c:	50 e4       	ldi	r21, 0x40	; 64
    a61e:	d4 01       	movw	r26, r8
    a620:	13 96       	adiw	r26, 0x03	; 3
    a622:	6d 91       	ld	r22, X+
    a624:	7d 91       	ld	r23, X+
    a626:	8d 91       	ld	r24, X+
    a628:	9c 91       	ld	r25, X
    a62a:	16 97       	sbiw	r26, 0x06	; 6
    a62c:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a630:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a634:	04 e0       	ldi	r16, 0x04	; 4
    a636:	24 e0       	ldi	r18, 0x04	; 4
    a638:	4c 2d       	mov	r20, r12
    a63a:	c5 01       	movw	r24, r10
    a63c:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <collides_directional_tile>
    a640:	88 23       	and	r24, r24
    a642:	99 f0       	breq	.+38     	; 0xa66a <collision_detect_shot+0x1e4>
		{
			hit = hit | HIT_ANGLE;
    a644:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    a646:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    a648:	bd 81       	ldd	r27, Y+5	; 0x05
    a64a:	b1 30       	cpi	r27, 0x01	; 1
    a64c:	09 f4       	brne	.+2      	; 0xa650 <collision_detect_shot+0x1ca>
    a64e:	88 c0       	rjmp	.+272    	; 0xa760 <collision_detect_shot+0x2da>
    a650:	f1 e0       	ldi	r31, 0x01	; 1
    a652:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    a654:	d2 01       	movw	r26, r4
    a656:	ad 90       	ld	r10, X+
    a658:	bd 90       	ld	r11, X+
    a65a:	2d 01       	movw	r4, r26
    a65c:	f5 01       	movw	r30, r10
    a65e:	e6 56       	subi	r30, 0x66	; 102
    a660:	f3 4f       	sbci	r31, 0xF3	; 243
    a662:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    a664:	ee 20       	and	r14, r14
    a666:	81 f3       	breq	.-32     	; 0xa648 <collision_detect_shot+0x1c2>
    a668:	c3 cf       	rjmp	.-122    	; 0xa5f0 <collision_detect_shot+0x16a>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a66a:	b1 e0       	ldi	r27, 0x01	; 1
    a66c:	eb 12       	cpse	r14, r27
    a66e:	3b c0       	rjmp	.+118    	; 0xa6e6 <collision_detect_shot+0x260>
    a670:	c5 01       	movw	r24, r10
    a672:	b1 01       	movw	r22, r2
    a674:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a678:	6d 5f       	subi	r22, 0xFD	; 253
    a67a:	7f 4f       	sbci	r23, 0xFF	; 255
    a67c:	e6 2e       	mov	r14, r22
    a67e:	ee 0c       	add	r14, r14
    a680:	ee 0c       	add	r14, r14
    a682:	ee 0c       	add	r14, r14
    a684:	08 2f       	mov	r16, r24
    a686:	00 0f       	add	r16, r16
    a688:	00 0f       	add	r16, r16
    a68a:	00 0f       	add	r16, r16
    a68c:	20 e0       	ldi	r18, 0x00	; 0
    a68e:	30 e0       	ldi	r19, 0x00	; 0
    a690:	40 e0       	ldi	r20, 0x00	; 0
    a692:	50 e4       	ldi	r21, 0x40	; 64
    a694:	f4 01       	movw	r30, r8
    a696:	67 81       	ldd	r22, Z+7	; 0x07
    a698:	70 85       	ldd	r23, Z+8	; 0x08
    a69a:	81 85       	ldd	r24, Z+9	; 0x09
    a69c:	92 85       	ldd	r25, Z+10	; 0x0a
    a69e:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a6a2:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a6a6:	b6 2e       	mov	r11, r22
    a6a8:	20 e0       	ldi	r18, 0x00	; 0
    a6aa:	30 e0       	ldi	r19, 0x00	; 0
    a6ac:	40 e0       	ldi	r20, 0x00	; 0
    a6ae:	50 e4       	ldi	r21, 0x40	; 64
    a6b0:	d4 01       	movw	r26, r8
    a6b2:	13 96       	adiw	r26, 0x03	; 3
    a6b4:	6d 91       	ld	r22, X+
    a6b6:	7d 91       	ld	r23, X+
    a6b8:	8d 91       	ld	r24, X+
    a6ba:	9c 91       	ld	r25, X
    a6bc:	16 97       	sbiw	r26, 0x06	; 6
    a6be:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a6c2:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a6c6:	86 2f       	mov	r24, r22
    a6c8:	38 e0       	ldi	r19, 0x08	; 8
    a6ca:	a3 2e       	mov	r10, r19
    a6cc:	48 e0       	ldi	r20, 0x08	; 8
    a6ce:	c4 2e       	mov	r12, r20
    a6d0:	24 e0       	ldi	r18, 0x04	; 4
    a6d2:	44 e0       	ldi	r20, 0x04	; 4
    a6d4:	6b 2d       	mov	r22, r11
    a6d6:	0e 94 19 49 	call	0x9232	; 0x9232 <LBCollides>
    a6da:	88 23       	and	r24, r24
    a6dc:	09 f4       	brne	.+2      	; 0xa6e0 <collision_detect_shot+0x25a>
    a6de:	b4 cf       	rjmp	.-152    	; 0xa648 <collision_detect_shot+0x1c2>
		{
			hit = hit | HIT_BRICK;
    a6e0:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    a6e2:	dd 80       	ldd	r13, Y+5	; 0x05
    a6e4:	b1 cf       	rjmp	.-158    	; 0xa648 <collision_detect_shot+0x1c2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    a6e6:	b2 e0       	ldi	r27, 0x02	; 2
    a6e8:	eb 12       	cpse	r14, r27
    a6ea:	ae cf       	rjmp	.-164    	; 0xa648 <collision_detect_shot+0x1c2>
    a6ec:	c5 01       	movw	r24, r10
    a6ee:	b1 01       	movw	r22, r2
    a6f0:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a6f4:	6d 5f       	subi	r22, 0xFD	; 253
    a6f6:	7f 4f       	sbci	r23, 0xFF	; 255
    a6f8:	e6 2e       	mov	r14, r22
    a6fa:	ee 0c       	add	r14, r14
    a6fc:	ee 0c       	add	r14, r14
    a6fe:	ee 0c       	add	r14, r14
    a700:	08 2f       	mov	r16, r24
    a702:	00 0f       	add	r16, r16
    a704:	00 0f       	add	r16, r16
    a706:	00 0f       	add	r16, r16
    a708:	20 e0       	ldi	r18, 0x00	; 0
    a70a:	30 e0       	ldi	r19, 0x00	; 0
    a70c:	40 e0       	ldi	r20, 0x00	; 0
    a70e:	50 e4       	ldi	r21, 0x40	; 64
    a710:	f4 01       	movw	r30, r8
    a712:	67 81       	ldd	r22, Z+7	; 0x07
    a714:	70 85       	ldd	r23, Z+8	; 0x08
    a716:	81 85       	ldd	r24, Z+9	; 0x09
    a718:	92 85       	ldd	r25, Z+10	; 0x0a
    a71a:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a71e:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a722:	b6 2e       	mov	r11, r22
    a724:	20 e0       	ldi	r18, 0x00	; 0
    a726:	30 e0       	ldi	r19, 0x00	; 0
    a728:	40 e0       	ldi	r20, 0x00	; 0
    a72a:	50 e4       	ldi	r21, 0x40	; 64
    a72c:	d4 01       	movw	r26, r8
    a72e:	13 96       	adiw	r26, 0x03	; 3
    a730:	6d 91       	ld	r22, X+
    a732:	7d 91       	ld	r23, X+
    a734:	8d 91       	ld	r24, X+
    a736:	9c 91       	ld	r25, X
    a738:	16 97       	sbiw	r26, 0x06	; 6
    a73a:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    a73e:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a742:	86 2f       	mov	r24, r22
    a744:	98 e0       	ldi	r25, 0x08	; 8
    a746:	a9 2e       	mov	r10, r25
    a748:	28 e0       	ldi	r18, 0x08	; 8
    a74a:	c2 2e       	mov	r12, r18
    a74c:	24 e0       	ldi	r18, 0x04	; 4
    a74e:	44 e0       	ldi	r20, 0x04	; 4
    a750:	6b 2d       	mov	r22, r11
    a752:	0e 94 19 49 	call	0x9232	; 0x9232 <LBCollides>
    a756:	88 23       	and	r24, r24
    a758:	09 f4       	brne	.+2      	; 0xa75c <collision_detect_shot+0x2d6>
    a75a:	76 cf       	rjmp	.-276    	; 0xa648 <collision_detect_shot+0x1c2>
        {
		    hit = hit | HIT_METAL;
    a75c:	11 60       	ori	r17, 0x01	; 1
    a75e:	74 cf       	rjmp	.-280    	; 0xa648 <collision_detect_shot+0x1c2>
        }
	}
	
	if (hit & HIT_ANGLE)
    a760:	12 ff       	sbrs	r17, 2
    a762:	0e c0       	rjmp	.+28     	; 0xa780 <collision_detect_shot+0x2fa>
	{
		recoil_sprite_fine(&shot->shared);
    a764:	c4 01       	movw	r24, r8
    a766:	0e 94 2a 4f 	call	0x9e54	; 0x9e54 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    a76a:	b4 01       	movw	r22, r8
    a76c:	8f 2d       	mov	r24, r15
    a76e:	0e 94 22 52 	call	0xa444	; 0xa444 <richochet>
		shot->rebounds--;
    a772:	f4 01       	movw	r30, r8
    a774:	85 85       	ldd	r24, Z+13	; 0x0d
    a776:	81 50       	subi	r24, 0x01	; 1
    a778:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    a77a:	81 11       	cpse	r24, r1
    a77c:	3a c0       	rjmp	.+116    	; 0xa7f2 <collision_detect_shot+0x36c>
    a77e:	2e c0       	rjmp	.+92     	; 0xa7dc <collision_detect_shot+0x356>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    a780:	11 ff       	sbrs	r17, 1
    a782:	29 c0       	rjmp	.+82     	; 0xa7d6 <collision_detect_shot+0x350>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    a784:	fe 01       	movw	r30, r28
    a786:	31 96       	adiw	r30, 0x01	; 1
    a788:	7f 01       	movw	r14, r30
    a78a:	ed 0c       	add	r14, r13
    a78c:	f1 1c       	adc	r15, r1
    a78e:	ed 0c       	add	r14, r13
    a790:	f1 1c       	adc	r15, r1
    a792:	d7 01       	movw	r26, r14
    a794:	6d 91       	ld	r22, X+
    a796:	7c 91       	ld	r23, X
    a798:	8c e0       	ldi	r24, 0x0C	; 12
    a79a:	9c e0       	ldi	r25, 0x0C	; 12
    a79c:	0e 94 e4 51 	call	0xa3c8	; 0xa3c8 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    a7a0:	d7 01       	movw	r26, r14
    a7a2:	ed 91       	ld	r30, X+
    a7a4:	fc 91       	ld	r31, X
    a7a6:	e6 56       	subi	r30, 0x66	; 102
    a7a8:	f3 4f       	sbci	r31, 0xF3	; 243
    a7aa:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    a7ac:	f4 01       	movw	r30, r8
    a7ae:	84 85       	ldd	r24, Z+12	; 0x0c
    a7b0:	81 50       	subi	r24, 0x01	; 1
    a7b2:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    a7b4:	81 11       	cpse	r24, r1
    a7b6:	0b c0       	rjmp	.+22     	; 0xa7ce <collision_detect_shot+0x348>
		{
			init_shot_state(shot, shot->shot_type);
    a7b8:	63 85       	ldd	r22, Z+11	; 0x0b
    a7ba:	c4 01       	movw	r24, r8
    a7bc:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
			player->active_shots--;
    a7c0:	d3 01       	movw	r26, r6
    a7c2:	51 96       	adiw	r26, 0x11	; 17
    a7c4:	8c 91       	ld	r24, X
    a7c6:	51 97       	sbiw	r26, 0x11	; 17
    a7c8:	81 50       	subi	r24, 0x01	; 1
    a7ca:	51 96       	adiw	r26, 0x11	; 17
    a7cc:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    a7ce:	2f ed       	ldi	r18, 0xDF	; 223
    a7d0:	47 e1       	ldi	r20, 0x17	; 23
    a7d2:	61 e0       	ldi	r22, 0x01	; 1
    a7d4:	11 c0       	rjmp	.+34     	; 0xa7f8 <collision_detect_shot+0x372>
	}
	else if (hit & HIT_METAL)
    a7d6:	10 ff       	sbrs	r17, 0
    a7d8:	12 c0       	rjmp	.+36     	; 0xa7fe <collision_detect_shot+0x378>
	{
        init_shot_state(shot, shot->shot_type);
    a7da:	f4 01       	movw	r30, r8
    a7dc:	63 85       	ldd	r22, Z+11	; 0x0b
    a7de:	c4 01       	movw	r24, r8
    a7e0:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
        player->active_shots--;
    a7e4:	d3 01       	movw	r26, r6
    a7e6:	51 96       	adiw	r26, 0x11	; 17
    a7e8:	8c 91       	ld	r24, X
    a7ea:	51 97       	sbiw	r26, 0x11	; 17
    a7ec:	81 50       	subi	r24, 0x01	; 1
    a7ee:	51 96       	adiw	r26, 0x11	; 17
    a7f0:	8c 93       	st	X, r24
        SFX_METAL;
    a7f2:	2f ef       	ldi	r18, 0xFF	; 255
    a7f4:	47 e1       	ldi	r20, 0x17	; 23
    a7f6:	66 e0       	ldi	r22, 0x06	; 6
    a7f8:	84 e0       	ldi	r24, 0x04	; 4
    a7fa:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
	}
}
    a7fe:	0f 90       	pop	r0
    a800:	0f 90       	pop	r0
    a802:	0f 90       	pop	r0
    a804:	0f 90       	pop	r0
    a806:	0f 90       	pop	r0
    a808:	df 91       	pop	r29
    a80a:	cf 91       	pop	r28
    a80c:	1f 91       	pop	r17
    a80e:	0f 91       	pop	r16
    a810:	ff 90       	pop	r15
    a812:	ef 90       	pop	r14
    a814:	df 90       	pop	r13
    a816:	cf 90       	pop	r12
    a818:	bf 90       	pop	r11
    a81a:	af 90       	pop	r10
    a81c:	9f 90       	pop	r9
    a81e:	8f 90       	pop	r8
    a820:	7f 90       	pop	r7
    a822:	6f 90       	pop	r6
    a824:	5f 90       	pop	r5
    a826:	4f 90       	pop	r4
    a828:	3f 90       	pop	r3
    a82a:	2f 90       	pop	r2
    a82c:	08 95       	ret

0000a82e <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    a82e:	fc 01       	movw	r30, r24
    a830:	8e e1       	ldi	r24, 0x1E	; 30
    a832:	48 9f       	mul	r20, r24
    a834:	a0 01       	movw	r20, r0
    a836:	11 24       	eor	r1, r1
    a838:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    a83a:	64 0f       	add	r22, r20
    a83c:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    a83e:	21 11       	cpse	r18, r1
    a840:	09 c0       	rjmp	.+18     	; 0xa854 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    a842:	71 83       	std	Z+1, r23	; 0x01
    a844:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    a846:	cb 01       	movw	r24, r22
    a848:	01 96       	adiw	r24, 0x01	; 1
    a84a:	93 83       	std	Z+3, r25	; 0x03
    a84c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a84e:	6e 5f       	subi	r22, 0xFE	; 254
    a850:	7f 4f       	sbci	r23, 0xFF	; 255
    a852:	1c c0       	rjmp	.+56     	; 0xa88c <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    a854:	21 30       	cpi	r18, 0x01	; 1
    a856:	31 f4       	brne	.+12     	; 0xa864 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    a858:	cb 01       	movw	r24, r22
    a85a:	02 96       	adiw	r24, 0x02	; 2
    a85c:	91 83       	std	Z+1, r25	; 0x01
    a85e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    a860:	4e 96       	adiw	r24, 0x1e	; 30
    a862:	07 c0       	rjmp	.+14     	; 0xa872 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    a864:	22 30       	cpi	r18, 0x02	; 2
    a866:	51 f4       	brne	.+20     	; 0xa87c <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    a868:	cb 01       	movw	r24, r22
    a86a:	cc 96       	adiw	r24, 0x3c	; 60
    a86c:	91 83       	std	Z+1, r25	; 0x01
    a86e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    a870:	01 96       	adiw	r24, 0x01	; 1
    a872:	93 83       	std	Z+3, r25	; 0x03
    a874:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    a876:	62 5c       	subi	r22, 0xC2	; 194
    a878:	7f 4f       	sbci	r23, 0xFF	; 255
    a87a:	08 c0       	rjmp	.+16     	; 0xa88c <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    a87c:	71 83       	std	Z+1, r23	; 0x01
    a87e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    a880:	cb 01       	movw	r24, r22
    a882:	4e 96       	adiw	r24, 0x1e	; 30
    a884:	93 83       	std	Z+3, r25	; 0x03
    a886:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    a888:	64 5c       	subi	r22, 0xC4	; 196
    a88a:	7f 4f       	sbci	r23, 0xFF	; 255
    a88c:	75 83       	std	Z+5, r23	; 0x05
    a88e:	64 83       	std	Z+4, r22	; 0x04
    a890:	08 95       	ret

0000a892 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    a892:	2f 92       	push	r2
    a894:	3f 92       	push	r3
    a896:	4f 92       	push	r4
    a898:	5f 92       	push	r5
    a89a:	6f 92       	push	r6
    a89c:	7f 92       	push	r7
    a89e:	8f 92       	push	r8
    a8a0:	9f 92       	push	r9
    a8a2:	af 92       	push	r10
    a8a4:	bf 92       	push	r11
    a8a6:	cf 92       	push	r12
    a8a8:	df 92       	push	r13
    a8aa:	ef 92       	push	r14
    a8ac:	ff 92       	push	r15
    a8ae:	0f 93       	push	r16
    a8b0:	1f 93       	push	r17
    a8b2:	cf 93       	push	r28
    a8b4:	df 93       	push	r29
    a8b6:	cd b7       	in	r28, 0x3d	; 61
    a8b8:	de b7       	in	r29, 0x3e	; 62
    a8ba:	2d 97       	sbiw	r28, 0x0d	; 13
    a8bc:	0f b6       	in	r0, 0x3f	; 63
    a8be:	f8 94       	cli
    a8c0:	de bf       	out	0x3e, r29	; 62
    a8c2:	0f be       	out	0x3f, r0	; 63
    a8c4:	cd bf       	out	0x3d, r28	; 61
    a8c6:	4c 01       	movw	r8, r24
    a8c8:	7a 87       	std	Y+10, r23	; 0x0a
    a8ca:	69 87       	std	Y+9, r22	; 0x09
    a8cc:	14 2f       	mov	r17, r20
    a8ce:	f2 2e       	mov	r15, r18
	int tiles[3] = {0,0,0};
    a8d0:	1a 82       	std	Y+2, r1	; 0x02
    a8d2:	19 82       	std	Y+1, r1	; 0x01
    a8d4:	1c 82       	std	Y+4, r1	; 0x04
    a8d6:	1b 82       	std	Y+3, r1	; 0x03
    a8d8:	1e 82       	std	Y+6, r1	; 0x06
    a8da:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    a8dc:	20 e0       	ldi	r18, 0x00	; 0
    a8de:	30 e0       	ldi	r19, 0x00	; 0
    a8e0:	40 e0       	ldi	r20, 0x00	; 0
    a8e2:	5e e3       	ldi	r21, 0x3E	; 62
    a8e4:	dc 01       	movw	r26, r24
    a8e6:	17 96       	adiw	r26, 0x07	; 7
    a8e8:	6d 91       	ld	r22, X+
    a8ea:	7d 91       	ld	r23, X+
    a8ec:	8d 91       	ld	r24, X+
    a8ee:	9c 91       	ld	r25, X
    a8f0:	1a 97       	sbiw	r26, 0x0a	; 10
    a8f2:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a8f6:	20 e0       	ldi	r18, 0x00	; 0
    a8f8:	30 e0       	ldi	r19, 0x00	; 0
    a8fa:	40 e4       	ldi	r20, 0x40	; 64
    a8fc:	50 e4       	ldi	r21, 0x40	; 64
    a8fe:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    a902:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a906:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    a908:	20 e0       	ldi	r18, 0x00	; 0
    a90a:	30 e0       	ldi	r19, 0x00	; 0
    a90c:	40 e0       	ldi	r20, 0x00	; 0
    a90e:	5e e3       	ldi	r21, 0x3E	; 62
    a910:	f4 01       	movw	r30, r8
    a912:	63 81       	ldd	r22, Z+3	; 0x03
    a914:	74 81       	ldd	r23, Z+4	; 0x04
    a916:	85 81       	ldd	r24, Z+5	; 0x05
    a918:	96 81       	ldd	r25, Z+6	; 0x06
    a91a:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    a91e:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    a922:	d4 01       	movw	r26, r8
    a924:	2c 91       	ld	r18, X
    a926:	40 2f       	mov	r20, r16
    a928:	ce 01       	movw	r24, r28
    a92a:	01 96       	adiw	r24, 0x01	; 1
    a92c:	0e 94 17 54 	call	0xa82e	; 0xa82e <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    a930:	c4 01       	movw	r24, r8
    a932:	0e 94 d3 50 	call	0xa1a6	; 0xa1a6 <collision_detect_boundries>
    a936:	88 23       	and	r24, r24
    a938:	31 f0       	breq	.+12     	; 0xa946 <collision_detect_player+0xb4>
	{
		recoil_sprite(&player->shared);
    a93a:	c4 01       	movw	r24, r8
    a93c:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <recoil_sprite>
		player->shared.speed = 0;
    a940:	f4 01       	movw	r30, r8
    a942:	11 82       	std	Z+1, r1	; 0x01
    a944:	f5 c0       	rjmp	.+490    	; 0xab30 <collision_detect_player+0x29e>
    a946:	ce 01       	movw	r24, r28
    a948:	01 96       	adiw	r24, 0x01	; 1
    a94a:	3c 01       	movw	r6, r24
    a94c:	de 01       	movw	r26, r28
    a94e:	17 96       	adiw	r26, 0x07	; 7
    a950:	b8 87       	std	Y+8, r27	; 0x08
    a952:	af 83       	std	Y+7, r26	; 0x07
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    a954:	3e e1       	ldi	r19, 0x1E	; 30
    a956:	23 2e       	mov	r2, r19
    a958:	31 2c       	mov	r3, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    a95a:	bb 24       	eor	r11, r11
    a95c:	b3 94       	inc	r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    a95e:	bb e0       	ldi	r27, 0x0B	; 11
    a960:	b1 0f       	add	r27, r17
    a962:	bb 87       	std	Y+11, r27	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    a964:	ea e0       	ldi	r30, 0x0A	; 10
    a966:	e1 0f       	add	r30, r17
    a968:	ec 87       	std	Y+12, r30	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    a96a:	d3 01       	movw	r26, r6
    a96c:	4d 90       	ld	r4, X+
    a96e:	5c 90       	ld	r5, X
    a970:	c2 01       	movw	r24, r4
    a972:	0e 94 ba 4f 	call	0x9f74	; 0x9f74 <solid_directional_tile>
    a976:	88 23       	and	r24, r24
    a978:	49 f1       	breq	.+82     	; 0xa9cc <collision_detect_player+0x13a>
    a97a:	f4 01       	movw	r30, r8
    a97c:	67 81       	ldd	r22, Z+7	; 0x07
    a97e:	70 85       	ldd	r23, Z+8	; 0x08
    a980:	81 85       	ldd	r24, Z+9	; 0x09
    a982:	92 85       	ldd	r25, Z+10	; 0x0a
    a984:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a988:	46 2f       	mov	r20, r22
    a98a:	d4 01       	movw	r26, r8
    a98c:	13 96       	adiw	r26, 0x03	; 3
    a98e:	6d 91       	ld	r22, X+
    a990:	7d 91       	ld	r23, X+
    a992:	8d 91       	ld	r24, X+
    a994:	9c 91       	ld	r25, X
    a996:	16 97       	sbiw	r26, 0x06	; 6
    a998:	4d 87       	std	Y+13, r20	; 0x0d
    a99a:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    a99e:	00 e1       	ldi	r16, 0x10	; 16
    a9a0:	20 e1       	ldi	r18, 0x10	; 16
    a9a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    a9a4:	c2 01       	movw	r24, r4
    a9a6:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <collides_directional_tile>
    a9aa:	88 23       	and	r24, r24
    a9ac:	79 f0       	breq	.+30     	; 0xa9cc <collision_detect_player+0x13a>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    a9ae:	f4 01       	movw	r30, r8
    a9b0:	83 85       	ldd	r24, Z+11	; 0x0b
    a9b2:	89 30       	cpi	r24, 0x09	; 9
    a9b4:	21 f4       	brne	.+8      	; 0xa9be <collision_detect_player+0x12c>
    a9b6:	c4 01       	movw	r24, r8
    a9b8:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <recoil_sprite>
    a9bc:	03 c0       	rjmp	.+6      	; 0xa9c4 <collision_detect_player+0x132>
    a9be:	c4 01       	movw	r24, r8
    a9c0:	0e 94 2a 4f 	call	0x9e54	; 0x9e54 <recoil_sprite_fine>
			player->shared.speed = 0;
    a9c4:	d4 01       	movw	r26, r8
    a9c6:	11 96       	adiw	r26, 0x01	; 1
    a9c8:	1c 92       	st	X, r1
    a9ca:	a9 c0       	rjmp	.+338    	; 0xab1e <collision_detect_player+0x28c>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    a9cc:	c2 01       	movw	r24, r4
    a9ce:	0e 94 8e 4f 	call	0x9f1c	; 0x9f1c <solid_square_tile>
    a9d2:	88 23       	and	r24, r24
    a9d4:	89 f1       	breq	.+98     	; 0xaa38 <collision_detect_player+0x1a6>
    a9d6:	c2 01       	movw	r24, r4
    a9d8:	b1 01       	movw	r22, r2
    a9da:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    a9de:	6d 5f       	subi	r22, 0xFD	; 253
    a9e0:	7f 4f       	sbci	r23, 0xFF	; 255
    a9e2:	e6 2e       	mov	r14, r22
    a9e4:	ee 0c       	add	r14, r14
    a9e6:	ee 0c       	add	r14, r14
    a9e8:	ee 0c       	add	r14, r14
    a9ea:	08 2f       	mov	r16, r24
    a9ec:	00 0f       	add	r16, r16
    a9ee:	00 0f       	add	r16, r16
    a9f0:	00 0f       	add	r16, r16
    a9f2:	f4 01       	movw	r30, r8
    a9f4:	67 81       	ldd	r22, Z+7	; 0x07
    a9f6:	70 85       	ldd	r23, Z+8	; 0x08
    a9f8:	81 85       	ldd	r24, Z+9	; 0x09
    a9fa:	92 85       	ldd	r25, Z+10	; 0x0a
    a9fc:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    aa00:	d6 2e       	mov	r13, r22
    aa02:	d4 01       	movw	r26, r8
    aa04:	13 96       	adiw	r26, 0x03	; 3
    aa06:	6d 91       	ld	r22, X+
    aa08:	7d 91       	ld	r23, X+
    aa0a:	8d 91       	ld	r24, X+
    aa0c:	9c 91       	ld	r25, X
    aa0e:	16 97       	sbiw	r26, 0x06	; 6
    aa10:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    aa14:	86 2f       	mov	r24, r22
    aa16:	98 e0       	ldi	r25, 0x08	; 8
    aa18:	a9 2e       	mov	r10, r25
    aa1a:	28 e0       	ldi	r18, 0x08	; 8
    aa1c:	c2 2e       	mov	r12, r18
    aa1e:	20 e1       	ldi	r18, 0x10	; 16
    aa20:	40 e1       	ldi	r20, 0x10	; 16
    aa22:	6d 2d       	mov	r22, r13
    aa24:	0e 94 19 49 	call	0x9232	; 0x9232 <LBCollides>
    aa28:	88 23       	and	r24, r24
    aa2a:	31 f0       	breq	.+12     	; 0xaa38 <collision_detect_player+0x1a6>
		{
			recoil_sprite(&player->shared);
    aa2c:	c4 01       	movw	r24, r8
    aa2e:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <recoil_sprite>
			player->shared.speed = 0;
    aa32:	f4 01       	movw	r30, r8
    aa34:	11 82       	std	Z+1, r1	; 0x01
    aa36:	73 c0       	rjmp	.+230    	; 0xab1e <collision_detect_player+0x28c>
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    aa38:	f2 01       	movw	r30, r4
    aa3a:	e6 56       	subi	r30, 0x66	; 102
    aa3c:	f3 4f       	sbci	r31, 0xF3	; 243
    aa3e:	81 81       	ldd	r24, Z+1	; 0x01
    aa40:	87 30       	cpi	r24, 0x07	; 7
    aa42:	b9 f4       	brne	.+46     	; 0xaa72 <collision_detect_player+0x1e0>
    aa44:	d4 01       	movw	r26, r8
    aa46:	54 96       	adiw	r26, 0x14	; 20
    aa48:	8c 91       	ld	r24, X
    aa4a:	54 97       	sbiw	r26, 0x14	; 20
    aa4c:	80 fd       	sbrc	r24, 0
    aa4e:	67 c0       	rjmp	.+206    	; 0xab1e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    aa50:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    aa52:	e1 e4       	ldi	r30, 0x41	; 65
    aa54:	58 96       	adiw	r26, 0x18	; 24
    aa56:	ec 93       	st	X, r30
    aa58:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    aa5a:	5a 96       	adiw	r26, 0x1a	; 26
    aa5c:	bc 92       	st	X, r11
			DrawMap2(hud_x+10, 1, map_speed_itm);
    aa5e:	4e e6       	ldi	r20, 0x6E	; 110
    aa60:	5b e6       	ldi	r21, 0x6B	; 107
    aa62:	61 e0       	ldi	r22, 0x01	; 1
    aa64:	8c 85       	ldd	r24, Y+12	; 0x0c
    aa66:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    aa6a:	d3 01       	movw	r26, r6
    aa6c:	8d 91       	ld	r24, X+
    aa6e:	9c 91       	ld	r25, X
    aa70:	14 c0       	rjmp	.+40     	; 0xaa9a <collision_detect_player+0x208>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    aa72:	89 30       	cpi	r24, 0x09	; 9
    aa74:	09 f5       	brne	.+66     	; 0xaab8 <collision_detect_player+0x226>
    aa76:	d4 01       	movw	r26, r8
    aa78:	54 96       	adiw	r26, 0x14	; 20
    aa7a:	8c 91       	ld	r24, X
    aa7c:	54 97       	sbiw	r26, 0x14	; 20
    aa7e:	80 fd       	sbrc	r24, 0
    aa80:	4e c0       	rjmp	.+156    	; 0xab1e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    aa82:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    aa84:	59 96       	adiw	r26, 0x19	; 25
    aa86:	bc 92       	st	X, r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    aa88:	48 e6       	ldi	r20, 0x68	; 104
    aa8a:	5b e6       	ldi	r21, 0x6B	; 107
    aa8c:	61 e0       	ldi	r22, 0x01	; 1
    aa8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    aa90:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    aa94:	f3 01       	movw	r30, r6
    aa96:	80 81       	ld	r24, Z
    aa98:	91 81       	ldd	r25, Z+1	; 0x01
    aa9a:	b1 01       	movw	r22, r2
    aa9c:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    aaa0:	6d 5f       	subi	r22, 0xFD	; 253
    aaa2:	40 e0       	ldi	r20, 0x00	; 0
    aaa4:	50 e0       	ldi	r21, 0x00	; 0
    aaa6:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
			SFX_ITEM;
    aaaa:	2f ef       	ldi	r18, 0xFF	; 255
    aaac:	47 e1       	ldi	r20, 0x17	; 23
    aaae:	63 e0       	ldi	r22, 0x03	; 3
    aab0:	84 e0       	ldi	r24, 0x04	; 4
    aab2:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
    aab6:	33 c0       	rjmp	.+102    	; 0xab1e <collision_detect_player+0x28c>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    aab8:	88 30       	cpi	r24, 0x08	; 8
    aaba:	89 f5       	brne	.+98     	; 0xab1e <collision_detect_player+0x28c>
    aabc:	d4 01       	movw	r26, r8
    aabe:	54 96       	adiw	r26, 0x14	; 20
    aac0:	8c 91       	ld	r24, X
    aac2:	80 fd       	sbrc	r24, 0
    aac4:	2c c0       	rjmp	.+88     	; 0xab1e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    aac6:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    aac8:	c2 01       	movw	r24, r4
    aaca:	b1 01       	movw	r22, r2
    aacc:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    aad0:	6d 5f       	subi	r22, 0xFD	; 253
    aad2:	40 e0       	ldi	r20, 0x00	; 0
    aad4:	50 e0       	ldi	r21, 0x00	; 0
    aad6:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
			SFX_ITEM;
    aada:	2f ef       	ldi	r18, 0xFF	; 255
    aadc:	47 e1       	ldi	r20, 0x17	; 23
    aade:	63 e0       	ldi	r22, 0x03	; 3
    aae0:	84 e0       	ldi	r24, 0x04	; 4
    aae2:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    aae6:	e9 85       	ldd	r30, Y+9	; 0x09
    aae8:	fa 85       	ldd	r31, Y+10	; 0x0a
    aaea:	84 89       	ldd	r24, Z+20	; 0x14
    aaec:	80 fd       	sbrc	r24, 0
    aaee:	17 c0       	rjmp	.+46     	; 0xab1e <collision_detect_player+0x28c>
			{
				player->level_score++;
    aaf0:	d4 01       	movw	r26, r8
    aaf2:	50 96       	adiw	r26, 0x10	; 16
    aaf4:	8c 91       	ld	r24, X
    aaf6:	50 97       	sbiw	r26, 0x10	; 16
    aaf8:	8f 5f       	subi	r24, 0xFF	; 255
    aafa:	50 96       	adiw	r26, 0x10	; 16
    aafc:	8c 93       	st	X, r24
    aafe:	50 97       	sbiw	r26, 0x10	; 16
				player->score++;
    ab00:	1f 96       	adiw	r26, 0x0f	; 15
    ab02:	8c 91       	ld	r24, X
    ab04:	1f 97       	sbiw	r26, 0x0f	; 15
    ab06:	8f 5f       	subi	r24, 0xFF	; 255
    ab08:	1f 96       	adiw	r26, 0x0f	; 15
    ab0a:	8c 93       	st	X, r24
				render_score(player, hud_x);
    ab0c:	61 2f       	mov	r22, r17
    ab0e:	c4 01       	movw	r24, r8
    ab10:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <render_score>
				kill_player(other_player, other_player_hud_x);
    ab14:	6f 2d       	mov	r22, r15
    ab16:	89 85       	ldd	r24, Y+9	; 0x09
    ab18:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab1a:	0e 94 68 51 	call	0xa2d0	; 0xa2d0 <kill_player>
    ab1e:	b2 e0       	ldi	r27, 0x02	; 2
    ab20:	6b 0e       	add	r6, r27
    ab22:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    ab24:	ef 81       	ldd	r30, Y+7	; 0x07
    ab26:	f8 85       	ldd	r31, Y+8	; 0x08
    ab28:	6e 16       	cp	r6, r30
    ab2a:	7f 06       	cpc	r7, r31
    ab2c:	09 f0       	breq	.+2      	; 0xab30 <collision_detect_player+0x29e>
    ab2e:	1d cf       	rjmp	.-454    	; 0xa96a <collision_detect_player+0xd8>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    ab30:	2d 96       	adiw	r28, 0x0d	; 13
    ab32:	0f b6       	in	r0, 0x3f	; 63
    ab34:	f8 94       	cli
    ab36:	de bf       	out	0x3e, r29	; 62
    ab38:	0f be       	out	0x3f, r0	; 63
    ab3a:	cd bf       	out	0x3d, r28	; 61
    ab3c:	df 91       	pop	r29
    ab3e:	cf 91       	pop	r28
    ab40:	1f 91       	pop	r17
    ab42:	0f 91       	pop	r16
    ab44:	ff 90       	pop	r15
    ab46:	ef 90       	pop	r14
    ab48:	df 90       	pop	r13
    ab4a:	cf 90       	pop	r12
    ab4c:	bf 90       	pop	r11
    ab4e:	af 90       	pop	r10
    ab50:	9f 90       	pop	r9
    ab52:	8f 90       	pop	r8
    ab54:	7f 90       	pop	r7
    ab56:	6f 90       	pop	r6
    ab58:	5f 90       	pop	r5
    ab5a:	4f 90       	pop	r4
    ab5c:	3f 90       	pop	r3
    ab5e:	2f 90       	pop	r2
    ab60:	08 95       	ret

0000ab62 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    ab62:	bf 92       	push	r11
    ab64:	cf 92       	push	r12
    ab66:	df 92       	push	r13
    ab68:	ef 92       	push	r14
    ab6a:	ff 92       	push	r15
    ab6c:	0f 93       	push	r16
    ab6e:	1f 93       	push	r17
    ab70:	cf 93       	push	r28
    ab72:	df 93       	push	r29
    ab74:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    ab76:	c0 e0       	ldi	r28, 0x00	; 0
    ab78:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    ab7a:	0e e1       	ldi	r16, 0x1E	; 30
    ab7c:	10 e0       	ldi	r17, 0x00	; 0
    ab7e:	ce 01       	movw	r24, r28
    ab80:	b8 01       	movw	r22, r16
    ab82:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
		y = 3 + i / 30;
    ab86:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    ab88:	bb 20       	and	r11, r11
    ab8a:	19 f0       	breq	.+6      	; 0xab92 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    ab8c:	4b e0       	ldi	r20, 0x0B	; 11
    ab8e:	5c e6       	ldi	r21, 0x6C	; 108
    ab90:	11 c0       	rjmp	.+34     	; 0xabb4 <load_level_tiles+0x52>
    ab92:	fe 01       	movw	r30, r28
    ab94:	e6 56       	subi	r30, 0x66	; 102
    ab96:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    ab98:	e1 81       	ldd	r30, Z+1	; 0x01
    ab9a:	ce 2e       	mov	r12, r30
    ab9c:	d1 2c       	mov	r13, r1
    ab9e:	f6 01       	movw	r30, r12
    aba0:	31 97       	sbiw	r30, 0x01	; 1
    aba2:	e9 30       	cpi	r30, 0x09	; 9
    aba4:	f1 05       	cpc	r31, r1
    aba6:	08 f5       	brcc	.+66     	; 0xabea <load_level_tiles+0x88>
    aba8:	e8 5c       	subi	r30, 0xC8	; 200
    abaa:	ff 4f       	sbci	r31, 0xFF	; 255
    abac:	0c 94 9f 61 	jmp	0xc33e	; 0xc33e <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    abb0:	44 e7       	ldi	r20, 0x74	; 116
    abb2:	5b e6       	ldi	r21, 0x6B	; 107
    abb4:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
    abb8:	1c c0       	rjmp	.+56     	; 0xabf2 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    abba:	41 e7       	ldi	r20, 0x71	; 113
    abbc:	5b e6       	ldi	r21, 0x6B	; 107
    abbe:	fa cf       	rjmp	.-12     	; 0xabb4 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    abc0:	4c e5       	ldi	r20, 0x5C	; 92
    abc2:	5b e6       	ldi	r21, 0x6B	; 107
    abc4:	f7 cf       	rjmp	.-18     	; 0xabb4 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    abc6:	46 e5       	ldi	r20, 0x56	; 86
    abc8:	5b e6       	ldi	r21, 0x6B	; 107
    abca:	f4 cf       	rjmp	.-24     	; 0xabb4 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    abcc:	43 e5       	ldi	r20, 0x53	; 83
    abce:	5b e6       	ldi	r21, 0x6B	; 107
    abd0:	f1 cf       	rjmp	.-30     	; 0xabb4 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    abd2:	49 e5       	ldi	r20, 0x59	; 89
    abd4:	5b e6       	ldi	r21, 0x6B	; 107
    abd6:	ee cf       	rjmp	.-36     	; 0xabb4 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    abd8:	4e e6       	ldi	r20, 0x6E	; 110
    abda:	5b e6       	ldi	r21, 0x6B	; 107
    abdc:	eb cf       	rjmp	.-42     	; 0xabb4 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    abde:	4b e6       	ldi	r20, 0x6B	; 107
    abe0:	5b e6       	ldi	r21, 0x6B	; 107
    abe2:	e8 cf       	rjmp	.-48     	; 0xabb4 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    abe4:	48 e6       	ldi	r20, 0x68	; 104
    abe6:	5b e6       	ldi	r21, 0x6B	; 107
    abe8:	e5 cf       	rjmp	.-54     	; 0xabb4 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    abea:	40 e0       	ldi	r20, 0x00	; 0
    abec:	50 e0       	ldi	r21, 0x00	; 0
    abee:	0e 94 0e 3a 	call	0x741c	; 0x741c <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    abf2:	21 96       	adiw	r28, 0x01	; 1
    abf4:	ce 3e       	cpi	r28, 0xEE	; 238
    abf6:	82 e0       	ldi	r24, 0x02	; 2
    abf8:	d8 07       	cpc	r29, r24
    abfa:	09 f6       	brne	.-126    	; 0xab7e <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    abfc:	df 91       	pop	r29
    abfe:	cf 91       	pop	r28
    ac00:	1f 91       	pop	r17
    ac02:	0f 91       	pop	r16
    ac04:	ff 90       	pop	r15
    ac06:	ef 90       	pop	r14
    ac08:	df 90       	pop	r13
    ac0a:	cf 90       	pop	r12
    ac0c:	bf 90       	pop	r11
    ac0e:	08 95       	ret

0000ac10 <load_level>:

void load_level(int level_number)
{
    ac10:	9f 92       	push	r9
    ac12:	af 92       	push	r10
    ac14:	bf 92       	push	r11
    ac16:	cf 92       	push	r12
    ac18:	df 92       	push	r13
    ac1a:	ef 92       	push	r14
    ac1c:	ff 92       	push	r15
    ac1e:	0f 93       	push	r16
    ac20:	1f 93       	push	r17
    ac22:	cf 93       	push	r28
    ac24:	df 93       	push	r29
    ac26:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    ac28:	8e ee       	ldi	r24, 0xEE	; 238
    ac2a:	92 e0       	ldi	r25, 0x02	; 2
    ac2c:	c8 9f       	mul	r28, r24
    ac2e:	70 01       	movw	r14, r0
    ac30:	c9 9f       	mul	r28, r25
    ac32:	f0 0c       	add	r15, r0
    ac34:	d8 9f       	mul	r29, r24
    ac36:	f0 0c       	add	r15, r0
    ac38:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    ac3a:	83 e0       	ldi	r24, 0x03	; 3
    ac3c:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    ac40:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
	game.current_level = level_number;
    ac44:	c0 93 09 0c 	sts	0x0C09, r28
    ac48:	8b e9       	ldi	r24, 0x9B	; 155
    ac4a:	c8 2e       	mov	r12, r24
    ac4c:	8c e0       	ldi	r24, 0x0C	; 12
    ac4e:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    ac50:	c0 e0       	ldi	r28, 0x00	; 0
    ac52:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    ac54:	0e e1       	ldi	r16, 0x1E	; 30
    ac56:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    ac58:	92 e3       	ldi	r25, 0x32	; 50
    ac5a:	99 2e       	mov	r9, r25
    ac5c:	fe 01       	movw	r30, r28
    ac5e:	ee 0d       	add	r30, r14
    ac60:	ff 1d       	adc	r31, r15
    ac62:	ec 55       	subi	r30, 0x5C	; 92
    ac64:	f6 4e       	sbci	r31, 0xE6	; 230
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    ac66:	e4 91       	lpm	r30, Z
    ac68:	56 01       	movw	r10, r12
    ac6a:	d6 01       	movw	r26, r12
    ac6c:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    ac6e:	e8 35       	cpi	r30, 0x58	; 88
    ac70:	01 f5       	brne	.+64     	; 0xacb2 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    ac72:	ce 01       	movw	r24, r28
    ac74:	b8 01       	movw	r22, r16
    ac76:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    ac7a:	88 0f       	add	r24, r24
    ac7c:	88 0f       	add	r24, r24
    ac7e:	88 0f       	add	r24, r24
    ac80:	80 93 37 0c 	sts	0x0C37, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    ac84:	6d 5f       	subi	r22, 0xFD	; 253
    ac86:	7f 4f       	sbci	r23, 0xFF	; 255
    ac88:	66 0f       	add	r22, r22
    ac8a:	66 0f       	add	r22, r22
    ac8c:	66 0f       	add	r22, r22
    ac8e:	60 93 38 0c 	sts	0x0C38, r22
			player1.level_score = 0;
    ac92:	10 92 35 0c 	sts	0x0C35, r1
			player1.has_over_speed = false;
    ac96:	10 92 3f 0c 	sts	0x0C3F, r1
			player1.has_rocket = false;
    ac9a:	10 92 3e 0c 	sts	0x0C3E, r1
			player1.max_speed = MAX_SPEED;
    ac9e:	90 92 3d 0c 	sts	0x0C3D, r9
			player_init_shot_state(&player1);
    aca2:	85 e2       	ldi	r24, 0x25	; 37
    aca4:	9c e0       	ldi	r25, 0x0C	; 12
    aca6:	0e 94 4e 4b 	call	0x969c	; 0x969c <player_init_shot_state>
			player_spawn(&player1);
    acaa:	85 e2       	ldi	r24, 0x25	; 37
    acac:	9c e0       	ldi	r25, 0x0C	; 12
    acae:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <player_spawn>
    acb2:	bf ef       	ldi	r27, 0xFF	; 255
    acb4:	cb 1a       	sub	r12, r27
    acb6:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    acb8:	f5 01       	movw	r30, r10
    acba:	80 81       	ld	r24, Z
    acbc:	83 36       	cpi	r24, 0x63	; 99
    acbe:	01 f5       	brne	.+64     	; 0xad00 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    acc0:	ce 01       	movw	r24, r28
    acc2:	b8 01       	movw	r22, r16
    acc4:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    acc8:	88 0f       	add	r24, r24
    acca:	88 0f       	add	r24, r24
    accc:	88 0f       	add	r24, r24
    acce:	80 93 9b 0f 	sts	0x0F9B, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    acd2:	6d 5f       	subi	r22, 0xFD	; 253
    acd4:	7f 4f       	sbci	r23, 0xFF	; 255
    acd6:	66 0f       	add	r22, r22
    acd8:	66 0f       	add	r22, r22
    acda:	66 0f       	add	r22, r22
    acdc:	60 93 9c 0f 	sts	0x0F9C, r22
			player2.level_score = 0;
    ace0:	10 92 99 0f 	sts	0x0F99, r1
			player2.has_over_speed = false;
    ace4:	10 92 a3 0f 	sts	0x0FA3, r1
			player2.has_rocket = false;
    ace8:	10 92 a2 0f 	sts	0x0FA2, r1
			player2.max_speed = MAX_SPEED;
    acec:	90 92 a1 0f 	sts	0x0FA1, r9
			player_init_shot_state(&player2);
    acf0:	89 e8       	ldi	r24, 0x89	; 137
    acf2:	9f e0       	ldi	r25, 0x0F	; 15
    acf4:	0e 94 4e 4b 	call	0x969c	; 0x969c <player_init_shot_state>
			player_spawn(&player2);
    acf8:	89 e8       	ldi	r24, 0x89	; 137
    acfa:	9f e0       	ldi	r25, 0x0F	; 15
    acfc:	0e 94 69 4b 	call	0x96d2	; 0x96d2 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    ad00:	21 96       	adiw	r28, 0x01	; 1
    ad02:	ce 3e       	cpi	r28, 0xEE	; 238
    ad04:	f2 e0       	ldi	r31, 0x02	; 2
    ad06:	df 07       	cpc	r29, r31
    ad08:	09 f0       	breq	.+2      	; 0xad0c <load_level+0xfc>
    ad0a:	a8 cf       	rjmp	.-176    	; 0xac5c <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    ad0c:	60 e0       	ldi	r22, 0x00	; 0
    ad0e:	85 e2       	ldi	r24, 0x25	; 37
    ad10:	9c e0       	ldi	r25, 0x0C	; 12
    ad12:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <render_hud>
	render_hud(&player2, 15);
    ad16:	6f e0       	ldi	r22, 0x0F	; 15
    ad18:	89 e8       	ldi	r24, 0x89	; 137
    ad1a:	9f e0       	ldi	r25, 0x0F	; 15
    ad1c:	0e 94 12 4d 	call	0x9a24	; 0x9a24 <render_hud>
	render_score(&player1, 0);
    ad20:	60 e0       	ldi	r22, 0x00	; 0
    ad22:	85 e2       	ldi	r24, 0x25	; 37
    ad24:	9c e0       	ldi	r25, 0x0C	; 12
    ad26:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <render_score>
	render_score(&player2, 15);
    ad2a:	6f e0       	ldi	r22, 0x0F	; 15
    ad2c:	89 e8       	ldi	r24, 0x89	; 137
    ad2e:	9f e0       	ldi	r25, 0x0F	; 15
    ad30:	0e 94 2f 4d 	call	0x9a5e	; 0x9a5e <render_score>
	Print(14, 0, &strMap[strVertSep]);
    ad34:	48 e8       	ldi	r20, 0x88	; 136
    ad36:	51 e0       	ldi	r21, 0x01	; 1
    ad38:	60 e0       	ldi	r22, 0x00	; 0
    ad3a:	70 e0       	ldi	r23, 0x00	; 0
    ad3c:	8e e0       	ldi	r24, 0x0E	; 14
    ad3e:	90 e0       	ldi	r25, 0x00	; 0
    ad40:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(14, 1, &strMap[strVertSep]);
    ad44:	48 e8       	ldi	r20, 0x88	; 136
    ad46:	51 e0       	ldi	r21, 0x01	; 1
    ad48:	61 e0       	ldi	r22, 0x01	; 1
    ad4a:	70 e0       	ldi	r23, 0x00	; 0
    ad4c:	8e e0       	ldi	r24, 0x0E	; 14
    ad4e:	90 e0       	ldi	r25, 0x00	; 0
    ad50:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(14, 2, &strMap[strVertSep]);
    ad54:	48 e8       	ldi	r20, 0x88	; 136
    ad56:	51 e0       	ldi	r21, 0x01	; 1
    ad58:	62 e0       	ldi	r22, 0x02	; 2
    ad5a:	70 e0       	ldi	r23, 0x00	; 0
    ad5c:	8e e0       	ldi	r24, 0x0E	; 14
    ad5e:	90 e0       	ldi	r25, 0x00	; 0
    ad60:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	load_level_tiles(false);
    ad64:	80 e0       	ldi	r24, 0x00	; 0
    ad66:	0e 94 b1 55 	call	0xab62	; 0xab62 <load_level_tiles>
	SFX_LEVEL_START;
    ad6a:	2f ef       	ldi	r18, 0xFF	; 255
    ad6c:	47 e1       	ldi	r20, 0x17	; 23
    ad6e:	65 e0       	ldi	r22, 0x05	; 5
    ad70:	84 e0       	ldi	r24, 0x04	; 4
}
    ad72:	df 91       	pop	r29
    ad74:	cf 91       	pop	r28
    ad76:	1f 91       	pop	r17
    ad78:	0f 91       	pop	r16
    ad7a:	ff 90       	pop	r15
    ad7c:	ef 90       	pop	r14
    ad7e:	df 90       	pop	r13
    ad80:	cf 90       	pop	r12
    ad82:	bf 90       	pop	r11
    ad84:	af 90       	pop	r10
    ad86:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, &strMap[strVertSep]);
	Print(14, 1, &strMap[strVertSep]);
	Print(14, 2, &strMap[strVertSep]);
	load_level_tiles(false);
	SFX_LEVEL_START;
    ad88:	0c 94 55 3d 	jmp	0x7aaa	; 0x7aaa <TriggerNote>

0000ad8c <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    ad8c:	cf 93       	push	r28
    ad8e:	df 93       	push	r29
    ad90:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    ad92:	61 e0       	ldi	r22, 0x01	; 1
    ad94:	83 e0       	ldi	r24, 0x03	; 3
    ad96:	0e 94 39 48 	call	0x9072	; 0x9072 <FadeOut>
	ClearVram();
    ad9a:	0e 94 00 3a 	call	0x7400	; 0x7400 <ClearVram>
	clear_sprites();
    ad9e:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
	Print(8, 12, &strMap[strLevels+index*16]);
    ada2:	d0 e0       	ldi	r29, 0x00	; 0
    ada4:	ae 01       	movw	r20, r28
    ada6:	84 e0       	ldi	r24, 0x04	; 4
    ada8:	44 0f       	add	r20, r20
    adaa:	55 1f       	adc	r21, r21
    adac:	8a 95       	dec	r24
    adae:	e1 f7       	brne	.-8      	; 0xada8 <level_transition+0x1c>
    adb0:	4f 54       	subi	r20, 0x4F	; 79
    adb2:	5d 4f       	sbci	r21, 0xFD	; 253
    adb4:	6c e0       	ldi	r22, 0x0C	; 12
    adb6:	70 e0       	ldi	r23, 0x00	; 0
    adb8:	88 e0       	ldi	r24, 0x08	; 8
    adba:	90 e0       	ldi	r25, 0x00	; 0
    adbc:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	FadeIn(1, true);
    adc0:	61 e0       	ldi	r22, 0x01	; 1
    adc2:	81 e0       	ldi	r24, 0x01	; 1
    adc4:	0e 94 2d 48 	call	0x905a	; 0x905a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    adc8:	82 e0       	ldi	r24, 0x02	; 2
    adca:	0e 94 4e 4a 	call	0x949c	; 0x949c <LBWaitSeconds>
	FadeOut(1, true);
    adce:	61 e0       	ldi	r22, 0x01	; 1
    add0:	81 e0       	ldi	r24, 0x01	; 1
    add2:	0e 94 39 48 	call	0x9072	; 0x9072 <FadeOut>
	ClearVram();
    add6:	0e 94 00 3a 	call	0x7400	; 0x7400 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    adda:	60 e0       	ldi	r22, 0x00	; 0
    addc:	83 e0       	ldi	r24, 0x03	; 3
    adde:	0e 94 2d 48 	call	0x905a	; 0x905a <FadeIn>
	load_level(index);
    ade2:	ce 01       	movw	r24, r28
}
    ade4:	df 91       	pop	r29
    ade6:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    ade8:	0c 94 08 56 	jmp	0xac10	; 0xac10 <load_level>

0000adec <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    adec:	10 92 08 0c 	sts	0x0C08, r1
	clear_sprites();
    adf0:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
	Print(7, 13, &strMap[str1Player]);
    adf4:	47 e4       	ldi	r20, 0x47	; 71
    adf6:	51 e0       	ldi	r21, 0x01	; 1
    adf8:	6d e0       	ldi	r22, 0x0D	; 13
    adfa:	70 e0       	ldi	r23, 0x00	; 0
    adfc:	87 e0       	ldi	r24, 0x07	; 7
    adfe:	90 e0       	ldi	r25, 0x00	; 0
    ae00:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(7, 14, &strMap[str2Player]);
    ae04:	45 e5       	ldi	r20, 0x55	; 85
    ae06:	51 e0       	ldi	r21, 0x01	; 1
    ae08:	6e e0       	ldi	r22, 0x0E	; 14
    ae0a:	70 e0       	ldi	r23, 0x00	; 0
    ae0c:	87 e0       	ldi	r24, 0x07	; 7
    ae0e:	90 e0       	ldi	r25, 0x00	; 0
    ae10:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(7, 15, &strMap[strHighscores]);
    ae14:	46 e6       	ldi	r20, 0x66	; 102
    ae16:	51 e0       	ldi	r21, 0x01	; 1
    ae18:	6f e0       	ldi	r22, 0x0F	; 15
    ae1a:	70 e0       	ldi	r23, 0x00	; 0
    ae1c:	87 e0       	ldi	r24, 0x07	; 7
    ae1e:	90 e0       	ldi	r25, 0x00	; 0
    ae20:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(5, 26, &strMap[strCopyright]);
    ae24:	42 e3       	ldi	r20, 0x32	; 50
    ae26:	51 e0       	ldi	r21, 0x01	; 1
    ae28:	6a e1       	ldi	r22, 0x1A	; 26
    ae2a:	70 e0       	ldi	r23, 0x00	; 0
    ae2c:	85 e0       	ldi	r24, 0x05	; 5
    ae2e:	90 e0       	ldi	r25, 0x00	; 0
    ae30:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    ae34:	47 e7       	ldi	r20, 0x77	; 119
    ae36:	5b e6       	ldi	r21, 0x6B	; 107
    ae38:	65 e0       	ldi	r22, 0x05	; 5
    ae3a:	84 e0       	ldi	r24, 0x04	; 4
    ae3c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
	MapSprite2(0, map_right_arrow, 0);
    ae40:	40 e0       	ldi	r20, 0x00	; 0
    ae42:	67 ee       	ldi	r22, 0xE7	; 231
    ae44:	76 e4       	ldi	r23, 0x46	; 70
    ae46:	80 e0       	ldi	r24, 0x00	; 0
    ae48:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
	SFX_SPLASH;
    ae4c:	2f ef       	ldi	r18, 0xFF	; 255
    ae4e:	47 e1       	ldi	r20, 0x17	; 23
    ae50:	69 e0       	ldi	r22, 0x09	; 9
    ae52:	84 e0       	ldi	r24, 0x04	; 4
    ae54:	0c 94 55 3d 	jmp	0x7aaa	; 0x7aaa <TriggerNote>

0000ae58 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    ae58:	ef 92       	push	r14
    ae5a:	ff 92       	push	r15
    ae5c:	0f 93       	push	r16
    ae5e:	1f 93       	push	r17
    ae60:	cf 93       	push	r28
    ae62:	df 93       	push	r29
    ae64:	1f 92       	push	r1
    ae66:	cd b7       	in	r28, 0x3d	; 61
    ae68:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    ae6a:	81 e0       	ldi	r24, 0x01	; 1
    ae6c:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    ae70:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    ae74:	4a e4       	ldi	r20, 0x4A	; 74
    ae76:	5b e6       	ldi	r21, 0x6B	; 107
    ae78:	61 e0       	ldi	r22, 0x01	; 1
    ae7a:	87 e0       	ldi	r24, 0x07	; 7
    ae7c:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
	DrawMap2(20, 1, map_blue_tank);
    ae80:	44 e4       	ldi	r20, 0x44	; 68
    ae82:	5b e6       	ldi	r21, 0x6B	; 107
    ae84:	61 e0       	ldi	r22, 0x01	; 1
    ae86:	84 e1       	ldi	r24, 0x14	; 20
    ae88:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
	Print(10, 2, &strMap[strHighscores]);
    ae8c:	46 e6       	ldi	r20, 0x66	; 102
    ae8e:	51 e0       	ldi	r21, 0x01	; 1
    ae90:	62 e0       	ldi	r22, 0x02	; 2
    ae92:	70 e0       	ldi	r23, 0x00	; 0
    ae94:	8a e0       	ldi	r24, 0x0A	; 10
    ae96:	90 e0       	ldi	r25, 0x00	; 0
    ae98:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    ae9c:	06 ec       	ldi	r16, 0xC6	; 198
    ae9e:	1b e0       	ldi	r17, 0x0B	; 11
    aea0:	87 e0       	ldi	r24, 0x07	; 7
    aea2:	e8 2e       	mov	r14, r24
    aea4:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    aea6:	31 e0       	ldi	r19, 0x01	; 1
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    aea8:	20 e0       	ldi	r18, 0x00	; 0
    aeaa:	43 2f       	mov	r20, r19
    aeac:	b7 01       	movw	r22, r14
    aeae:	82 e0       	ldi	r24, 0x02	; 2
    aeb0:	90 e0       	ldi	r25, 0x00	; 0
    aeb2:	39 83       	std	Y+1, r19	; 0x01
    aeb4:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
		PrintChar(3, y, '.');
    aeb8:	4e e2       	ldi	r20, 0x2E	; 46
    aeba:	b7 01       	movw	r22, r14
    aebc:	83 e0       	ldi	r24, 0x03	; 3
    aebe:	90 e0       	ldi	r25, 0x00	; 0
    aec0:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
    aec4:	f8 01       	movw	r30, r16
    aec6:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    aec8:	80 81       	ld	r24, Z
    aeca:	93 e0       	ldi	r25, 0x03	; 3
    aecc:	89 9f       	mul	r24, r25
    aece:	a0 01       	movw	r20, r0
    aed0:	11 24       	eor	r1, r1
    aed2:	46 51       	subi	r20, 0x16	; 22
    aed4:	54 4f       	sbci	r21, 0xF4	; 244
    aed6:	23 e0       	ldi	r18, 0x03	; 3
    aed8:	6e 2d       	mov	r22, r14
    aeda:	85 e0       	ldi	r24, 0x05	; 5
    aedc:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
		Print(9, y, &strMap[strOwns]);
    aee0:	4a ed       	ldi	r20, 0xDA	; 218
    aee2:	51 e0       	ldi	r21, 0x01	; 1
    aee4:	b7 01       	movw	r22, r14
    aee6:	89 e0       	ldi	r24, 0x09	; 9
    aee8:	90 e0       	ldi	r25, 0x00	; 0
    aeea:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    aeee:	f8 01       	movw	r30, r16
    aef0:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    aef2:	80 81       	ld	r24, Z
    aef4:	e3 e0       	ldi	r30, 0x03	; 3
    aef6:	8e 9f       	mul	r24, r30
    aef8:	a0 01       	movw	r20, r0
    aefa:	11 24       	eor	r1, r1
    aefc:	46 51       	subi	r20, 0x16	; 22
    aefe:	54 4f       	sbci	r21, 0xF4	; 244
    af00:	23 e0       	ldi	r18, 0x03	; 3
    af02:	6e 2d       	mov	r22, r14
    af04:	8e e0       	ldi	r24, 0x0E	; 14
    af06:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
		Print(18, y, &strMap[strBy]);
    af0a:	4f ed       	ldi	r20, 0xDF	; 223
    af0c:	51 e0       	ldi	r21, 0x01	; 1
    af0e:	b7 01       	movw	r22, r14
    af10:	82 e1       	ldi	r24, 0x12	; 18
    af12:	90 e0       	ldi	r25, 0x00	; 0
    af14:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    af18:	f8 01       	movw	r30, r16
    af1a:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    af1c:	21 e0       	ldi	r18, 0x01	; 1
    af1e:	40 81       	ld	r20, Z
    af20:	b7 01       	movw	r22, r14
    af22:	87 e1       	ldi	r24, 0x17	; 23
    af24:	90 e0       	ldi	r25, 0x00	; 0
    af26:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
		PrintChar(24, y, '-');
    af2a:	4d e2       	ldi	r20, 0x2D	; 45
    af2c:	b7 01       	movw	r22, r14
    af2e:	88 e1       	ldi	r24, 0x18	; 24
    af30:	90 e0       	ldi	r25, 0x00	; 0
    af32:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    af36:	21 e0       	ldi	r18, 0x01	; 1
    af38:	f8 01       	movw	r30, r16
    af3a:	40 81       	ld	r20, Z
    af3c:	b7 01       	movw	r22, r14
    af3e:	8b e1       	ldi	r24, 0x1B	; 27
    af40:	90 e0       	ldi	r25, 0x00	; 0
    af42:	0e 94 b7 47 	call	0x8f6e	; 0x8f6e <PrintByte>
		y += 3;
		rank += 1;
    af46:	39 81       	ldd	r19, Y+1	; 0x01
    af48:	3f 5f       	subi	r19, 0xFF	; 255
    af4a:	f3 e0       	ldi	r31, 0x03	; 3
    af4c:	ef 0e       	add	r14, r31
    af4e:	f1 1c       	adc	r15, r1
    af50:	0c 5f       	subi	r16, 0xFC	; 252
    af52:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
    af54:	36 30       	cpi	r19, 0x06	; 6
    af56:	09 f0       	breq	.+2      	; 0xaf5a <load_tank_rank+0x102>
    af58:	a7 cf       	rjmp	.-178    	; 0xaea8 <load_tank_rank+0x50>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
    af5a:	42 eb       	ldi	r20, 0xB2	; 178
    af5c:	51 e0       	ldi	r21, 0x01	; 1
    af5e:	66 e1       	ldi	r22, 0x16	; 22
    af60:	70 e0       	ldi	r23, 0x00	; 0
    af62:	83 e0       	ldi	r24, 0x03	; 3
    af64:	90 e0       	ldi	r25, 0x00	; 0
    af66:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(10, 24, &strMap[strCancelHandle]);
    af6a:	47 ea       	ldi	r20, 0xA7	; 167
    af6c:	51 e0       	ldi	r21, 0x01	; 1
    af6e:	68 e1       	ldi	r22, 0x18	; 24
    af70:	70 e0       	ldi	r23, 0x00	; 0
    af72:	8a e0       	ldi	r24, 0x0A	; 10
    af74:	90 e0       	ldi	r25, 0x00	; 0
}
    af76:	0f 90       	pop	r0
    af78:	df 91       	pop	r29
    af7a:	cf 91       	pop	r28
    af7c:	1f 91       	pop	r17
    af7e:	0f 91       	pop	r16
    af80:	ff 90       	pop	r15
    af82:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
    af84:	0c 94 ea 47 	jmp	0x8fd4	; 0x8fd4 <Print>

0000af88 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    af88:	0e 94 b0 4b 	call	0x9760	; 0x9760 <save_score>
	fade_through();
    af8c:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
	SetSpriteVisibility(true);
    af90:	81 e0       	ldi	r24, 0x01	; 1
    af92:	0e 94 11 46 	call	0x8c22	; 0x8c22 <SetSpriteVisibility>
	init_game_state();
    af96:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <init_game_state>
	load_tank_rank();
    af9a:	0c 94 2c 57 	jmp	0xae58	; 0xae58 <load_tank_rank>

0000af9e <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    af9e:	6f 92       	push	r6
    afa0:	7f 92       	push	r7
    afa2:	8f 92       	push	r8
    afa4:	9f 92       	push	r9
    afa6:	af 92       	push	r10
    afa8:	bf 92       	push	r11
    afaa:	df 92       	push	r13
    afac:	ef 92       	push	r14
    afae:	ff 92       	push	r15
    afb0:	0f 93       	push	r16
    afb2:	1f 93       	push	r17
    afb4:	cf 93       	push	r28
    afb6:	df 93       	push	r29
    afb8:	1f 92       	push	r1
    afba:	cd b7       	in	r28, 0x3d	; 61
    afbc:	de b7       	in	r29, 0x3e	; 62
    afbe:	7c 01       	movw	r14, r24
    afc0:	3b 01       	movw	r6, r22
    afc2:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	player->shared.recoiled = 0;
    afc4:	fb 01       	movw	r30, r22
    afc6:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    afc8:	fc 01       	movw	r30, r24
    afca:	80 81       	ld	r24, Z
    afcc:	83 ff       	sbrs	r24, 3
    afce:	0f c0       	rjmp	.+30     	; 0xafee <update_level_helper+0x50>
	{
		SFX_NAVIGATE;
    afd0:	2f ef       	ldi	r18, 0xFF	; 255
    afd2:	47 e1       	ldi	r20, 0x17	; 23
    afd4:	67 e0       	ldi	r22, 0x07	; 7
    afd6:	84 e0       	ldi	r24, 0x04	; 4
    afd8:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		game.paused = game.paused ^ 1;
    afdc:	90 91 0a 0c 	lds	r25, 0x0C0A
    afe0:	81 e0       	ldi	r24, 0x01	; 1
    afe2:	89 27       	eor	r24, r25
    afe4:	80 93 0a 0c 	sts	0x0C0A, r24
		load_level_tiles(false);
    afe8:	80 e0       	ldi	r24, 0x00	; 0
    afea:	0e 94 b1 55 	call	0xab62	; 0xab62 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    afee:	20 91 0a 0c 	lds	r18, 0x0C0A
    aff2:	f7 01       	movw	r30, r14
    aff4:	80 81       	ld	r24, Z
    aff6:	91 81       	ldd	r25, Z+1	; 0x01
    aff8:	21 11       	cpse	r18, r1
    affa:	72 c1       	rjmp	.+740    	; 0xb2e0 <update_level_helper+0x342>
    affc:	f3 01       	movw	r30, r6
    affe:	24 89       	ldd	r18, Z+20	; 0x14
    b000:	20 fd       	sbrc	r18, 0
    b002:	6e c1       	rjmp	.+732    	; 0xb2e0 <update_level_helper+0x342>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    b004:	93 ff       	sbrs	r25, 3
    b006:	12 c0       	rjmp	.+36     	; 0xb02c <update_level_helper+0x8e>
    b008:	85 89       	ldd	r24, Z+21	; 0x15
    b00a:	8a 35       	cpi	r24, 0x5A	; 90
    b00c:	79 f4       	brne	.+30     	; 0xb02c <update_level_helper+0x8e>
		{
			player->banter_frame = 0;
    b00e:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    b010:	69 e0       	ldi	r22, 0x09	; 9
    b012:	70 e0       	ldi	r23, 0x00	; 0
    b014:	80 e0       	ldi	r24, 0x00	; 0
    b016:	90 e0       	ldi	r25, 0x00	; 0
    b018:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
    b01c:	f3 01       	movw	r30, r6
    b01e:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    b020:	2f e5       	ldi	r18, 0x5F	; 95
    b022:	4e e1       	ldi	r20, 0x1E	; 30
    b024:	60 e0       	ldi	r22, 0x00	; 0
    b026:	84 e0       	ldi	r24, 0x04	; 4
    b028:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    b02c:	f3 01       	movw	r30, r6
    b02e:	60 8d       	ldd	r22, Z+24	; 0x18
    b030:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    b032:	f7 01       	movw	r30, r14
    b034:	84 81       	ldd	r24, Z+4	; 0x04
    b036:	84 ff       	sbrs	r24, 4
    b038:	17 c0       	rjmp	.+46     	; 0xb068 <update_level_helper+0xca>
		{
			player->shared.direction = D_UP;
    b03a:	f3 01       	movw	r30, r6
    b03c:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    b03e:	70 e0       	ldi	r23, 0x00	; 0
    b040:	80 e0       	ldi	r24, 0x00	; 0
    b042:	90 e0       	ldi	r25, 0x00	; 0
    b044:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b048:	25 e6       	ldi	r18, 0x65	; 101
    b04a:	38 e8       	ldi	r19, 0x88	; 136
    b04c:	48 e8       	ldi	r20, 0x88	; 136
    b04e:	5c e3       	ldi	r21, 0x3C	; 60
    b050:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b054:	9b 01       	movw	r18, r22
    b056:	ac 01       	movw	r20, r24
    b058:	f3 01       	movw	r30, r6
    b05a:	67 81       	ldd	r22, Z+7	; 0x07
    b05c:	70 85       	ldd	r23, Z+8	; 0x08
    b05e:	81 85       	ldd	r24, Z+9	; 0x09
    b060:	92 85       	ldd	r25, Z+10	; 0x0a
    b062:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    b066:	33 c0       	rjmp	.+102    	; 0xb0ce <update_level_helper+0x130>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    b068:	87 ff       	sbrs	r24, 7
    b06a:	18 c0       	rjmp	.+48     	; 0xb09c <update_level_helper+0xfe>
		{
			player->shared.direction = D_RIGHT;
    b06c:	81 e0       	ldi	r24, 0x01	; 1
    b06e:	f3 01       	movw	r30, r6
    b070:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    b072:	70 e0       	ldi	r23, 0x00	; 0
    b074:	80 e0       	ldi	r24, 0x00	; 0
    b076:	90 e0       	ldi	r25, 0x00	; 0
    b078:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b07c:	25 e6       	ldi	r18, 0x65	; 101
    b07e:	38 e8       	ldi	r19, 0x88	; 136
    b080:	48 e8       	ldi	r20, 0x88	; 136
    b082:	5c e3       	ldi	r21, 0x3C	; 60
    b084:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b088:	9b 01       	movw	r18, r22
    b08a:	ac 01       	movw	r20, r24
    b08c:	f3 01       	movw	r30, r6
    b08e:	63 81       	ldd	r22, Z+3	; 0x03
    b090:	74 81       	ldd	r23, Z+4	; 0x04
    b092:	85 81       	ldd	r24, Z+5	; 0x05
    b094:	96 81       	ldd	r25, Z+6	; 0x06
    b096:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    b09a:	38 c0       	rjmp	.+112    	; 0xb10c <update_level_helper+0x16e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    b09c:	85 ff       	sbrs	r24, 5
    b09e:	1d c0       	rjmp	.+58     	; 0xb0da <update_level_helper+0x13c>
		{
			player->shared.direction = D_DOWN;
    b0a0:	82 e0       	ldi	r24, 0x02	; 2
    b0a2:	f3 01       	movw	r30, r6
    b0a4:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    b0a6:	70 e0       	ldi	r23, 0x00	; 0
    b0a8:	80 e0       	ldi	r24, 0x00	; 0
    b0aa:	90 e0       	ldi	r25, 0x00	; 0
    b0ac:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b0b0:	25 e6       	ldi	r18, 0x65	; 101
    b0b2:	38 e8       	ldi	r19, 0x88	; 136
    b0b4:	48 e8       	ldi	r20, 0x88	; 136
    b0b6:	5c e3       	ldi	r21, 0x3C	; 60
    b0b8:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b0bc:	9b 01       	movw	r18, r22
    b0be:	ac 01       	movw	r20, r24
    b0c0:	f3 01       	movw	r30, r6
    b0c2:	67 81       	ldd	r22, Z+7	; 0x07
    b0c4:	70 85       	ldd	r23, Z+8	; 0x08
    b0c6:	81 85       	ldd	r24, Z+9	; 0x09
    b0c8:	92 85       	ldd	r25, Z+10	; 0x0a
    b0ca:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    b0ce:	f3 01       	movw	r30, r6
    b0d0:	67 83       	std	Z+7, r22	; 0x07
    b0d2:	70 87       	std	Z+8, r23	; 0x08
    b0d4:	81 87       	std	Z+9, r24	; 0x09
    b0d6:	92 87       	std	Z+10, r25	; 0x0a
    b0d8:	21 c0       	rjmp	.+66     	; 0xb11c <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    b0da:	86 ff       	sbrs	r24, 6
    b0dc:	1d c0       	rjmp	.+58     	; 0xb118 <update_level_helper+0x17a>
		{
			player->shared.direction = D_LEFT;
    b0de:	83 e0       	ldi	r24, 0x03	; 3
    b0e0:	f3 01       	movw	r30, r6
    b0e2:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    b0e4:	70 e0       	ldi	r23, 0x00	; 0
    b0e6:	80 e0       	ldi	r24, 0x00	; 0
    b0e8:	90 e0       	ldi	r25, 0x00	; 0
    b0ea:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b0ee:	25 e6       	ldi	r18, 0x65	; 101
    b0f0:	38 e8       	ldi	r19, 0x88	; 136
    b0f2:	48 e8       	ldi	r20, 0x88	; 136
    b0f4:	5c e3       	ldi	r21, 0x3C	; 60
    b0f6:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b0fa:	9b 01       	movw	r18, r22
    b0fc:	ac 01       	movw	r20, r24
    b0fe:	f3 01       	movw	r30, r6
    b100:	63 81       	ldd	r22, Z+3	; 0x03
    b102:	74 81       	ldd	r23, Z+4	; 0x04
    b104:	85 81       	ldd	r24, Z+5	; 0x05
    b106:	96 81       	ldd	r25, Z+6	; 0x06
    b108:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    b10c:	f3 01       	movw	r30, r6
    b10e:	63 83       	std	Z+3, r22	; 0x03
    b110:	74 83       	std	Z+4, r23	; 0x04
    b112:	85 83       	std	Z+5, r24	; 0x05
    b114:	96 83       	std	Z+6, r25	; 0x06
    b116:	02 c0       	rjmp	.+4      	; 0xb11c <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    b118:	f3 01       	movw	r30, r6
    b11a:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    b11c:	f7 01       	movw	r30, r14
    b11e:	80 81       	ld	r24, Z
    b120:	91 81       	ldd	r25, Z+1	; 0x01
    b122:	93 01       	movw	r18, r6
    b124:	24 5d       	subi	r18, 0xD4	; 212
    b126:	3f 4f       	sbci	r19, 0xFF	; 255
    b128:	79 01       	movw	r14, r18
    b12a:	90 ff       	sbrs	r25, 0
    b12c:	36 c0       	rjmp	.+108    	; 0xb19a <update_level_helper+0x1fc>
    b12e:	f3 01       	movw	r30, r6
    b130:	81 89       	ldd	r24, Z+17	; 0x11
    b132:	81 11       	cpse	r24, r1
    b134:	32 c0       	rjmp	.+100    	; 0xb19a <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    b136:	82 ad       	ldd	r24, Z+58	; 0x3a
    b138:	81 11       	cpse	r24, r1
    b13a:	2f c0       	rjmp	.+94     	; 0xb19a <update_level_helper+0x1fc>
				{
					if (player->has_rocket)
    b13c:	81 8d       	ldd	r24, Z+25	; 0x19
    b13e:	88 23       	and	r24, r24
    b140:	61 f0       	breq	.+24     	; 0xb15a <update_level_helper+0x1bc>
					{
						init_shot_state(shot, ROCKET_SHOT);
    b142:	61 e0       	ldi	r22, 0x01	; 1
    b144:	c9 01       	movw	r24, r18
    b146:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    b14a:	61 e0       	ldi	r22, 0x01	; 1
    b14c:	c7 01       	movw	r24, r14
    b14e:	0e 94 b5 4a 	call	0x956a	; 0x956a <set_shot_animations>
						SFX_ROCKET;
    b152:	2f ef       	ldi	r18, 0xFF	; 255
    b154:	47 e1       	ldi	r20, 0x17	; 23
    b156:	68 e0       	ldi	r22, 0x08	; 8
    b158:	0b c0       	rjmp	.+22     	; 0xb170 <update_level_helper+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    b15a:	60 e0       	ldi	r22, 0x00	; 0
    b15c:	c9 01       	movw	r24, r18
    b15e:	0e 94 98 4a 	call	0x9530	; 0x9530 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    b162:	60 e0       	ldi	r22, 0x00	; 0
    b164:	c7 01       	movw	r24, r14
    b166:	0e 94 b5 4a 	call	0x956a	; 0x956a <set_shot_animations>
						SFX_CANNONBALL;
    b16a:	2f ef       	ldi	r18, 0xFF	; 255
    b16c:	47 e1       	ldi	r20, 0x17	; 23
    b16e:	62 e0       	ldi	r22, 0x02	; 2
    b170:	84 e0       	ldi	r24, 0x04	; 4
    b172:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
					}
					player->active_shots++;
    b176:	f3 01       	movw	r30, r6
    b178:	81 89       	ldd	r24, Z+17	; 0x11
    b17a:	8f 5f       	subi	r24, 0xFF	; 255
    b17c:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    b17e:	80 81       	ld	r24, Z
    b180:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    b182:	b7 01       	movw	r22, r14
    b184:	c3 01       	movw	r24, r6
    b186:	0e 94 19 4c 	call	0x9832	; 0x9832 <position_shot>
					shot->active = 1;
    b18a:	81 e0       	ldi	r24, 0x01	; 1
    b18c:	f3 01       	movw	r30, r6
    b18e:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    b190:	82 8d       	ldd	r24, Z+26	; 0x1a
    b192:	88 23       	and	r24, r24
    b194:	11 f0       	breq	.+4      	; 0xb19a <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    b196:	8a ea       	ldi	r24, 0xAA	; 170
    b198:	85 a7       	std	Z+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    b19a:	f3 01       	movw	r30, r6
    b19c:	82 ad       	ldd	r24, Z+58	; 0x3a
    b19e:	88 23       	and	r24, r24
    b1a0:	09 f4       	brne	.+2      	; 0xb1a4 <update_level_helper+0x206>
    b1a2:	a8 c0       	rjmp	.+336    	; 0xb2f4 <update_level_helper+0x356>
			{
				switch (shot->shared.direction)
    b1a4:	84 a5       	ldd	r24, Z+44	; 0x2c
    b1a6:	81 30       	cpi	r24, 0x01	; 1
    b1a8:	a9 f1       	breq	.+106    	; 0xb214 <update_level_helper+0x276>
    b1aa:	e8 f0       	brcs	.+58     	; 0xb1e6 <update_level_helper+0x248>
    b1ac:	82 30       	cpi	r24, 0x02	; 2
    b1ae:	09 f4       	brne	.+2      	; 0xb1b2 <update_level_helper+0x214>
    b1b0:	48 c0       	rjmp	.+144    	; 0xb242 <update_level_helper+0x2a4>
    b1b2:	83 30       	cpi	r24, 0x03	; 3
    b1b4:	09 f0       	breq	.+2      	; 0xb1b8 <update_level_helper+0x21a>
    b1b6:	66 c0       	rjmp	.+204    	; 0xb284 <update_level_helper+0x2e6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b1b8:	f3 01       	movw	r30, r6
    b1ba:	65 a5       	ldd	r22, Z+45	; 0x2d
    b1bc:	70 e0       	ldi	r23, 0x00	; 0
    b1be:	80 e0       	ldi	r24, 0x00	; 0
    b1c0:	90 e0       	ldi	r25, 0x00	; 0
    b1c2:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b1c6:	25 e6       	ldi	r18, 0x65	; 101
    b1c8:	38 e8       	ldi	r19, 0x88	; 136
    b1ca:	48 e8       	ldi	r20, 0x88	; 136
    b1cc:	5c e3       	ldi	r21, 0x3C	; 60
    b1ce:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b1d2:	9b 01       	movw	r18, r22
    b1d4:	ac 01       	movw	r20, r24
    b1d6:	f3 01       	movw	r30, r6
    b1d8:	67 a5       	ldd	r22, Z+47	; 0x2f
    b1da:	70 a9       	ldd	r23, Z+48	; 0x30
    b1dc:	81 a9       	ldd	r24, Z+49	; 0x31
    b1de:	92 a9       	ldd	r25, Z+50	; 0x32
    b1e0:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    b1e4:	4a c0       	rjmp	.+148    	; 0xb27a <update_level_helper+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    b1e6:	f3 01       	movw	r30, r6
    b1e8:	65 a5       	ldd	r22, Z+45	; 0x2d
    b1ea:	70 e0       	ldi	r23, 0x00	; 0
    b1ec:	80 e0       	ldi	r24, 0x00	; 0
    b1ee:	90 e0       	ldi	r25, 0x00	; 0
    b1f0:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b1f4:	25 e6       	ldi	r18, 0x65	; 101
    b1f6:	38 e8       	ldi	r19, 0x88	; 136
    b1f8:	48 e8       	ldi	r20, 0x88	; 136
    b1fa:	5c e3       	ldi	r21, 0x3C	; 60
    b1fc:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b200:	9b 01       	movw	r18, r22
    b202:	ac 01       	movw	r20, r24
    b204:	f3 01       	movw	r30, r6
    b206:	63 a9       	ldd	r22, Z+51	; 0x33
    b208:	74 a9       	ldd	r23, Z+52	; 0x34
    b20a:	85 a9       	ldd	r24, Z+53	; 0x35
    b20c:	96 a9       	ldd	r25, Z+54	; 0x36
    b20e:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    b212:	2d c0       	rjmp	.+90     	; 0xb26e <update_level_helper+0x2d0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    b214:	f3 01       	movw	r30, r6
    b216:	65 a5       	ldd	r22, Z+45	; 0x2d
    b218:	70 e0       	ldi	r23, 0x00	; 0
    b21a:	80 e0       	ldi	r24, 0x00	; 0
    b21c:	90 e0       	ldi	r25, 0x00	; 0
    b21e:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b222:	25 e6       	ldi	r18, 0x65	; 101
    b224:	38 e8       	ldi	r19, 0x88	; 136
    b226:	48 e8       	ldi	r20, 0x88	; 136
    b228:	5c e3       	ldi	r21, 0x3C	; 60
    b22a:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b22e:	9b 01       	movw	r18, r22
    b230:	ac 01       	movw	r20, r24
    b232:	f3 01       	movw	r30, r6
    b234:	67 a5       	ldd	r22, Z+47	; 0x2f
    b236:	70 a9       	ldd	r23, Z+48	; 0x30
    b238:	81 a9       	ldd	r24, Z+49	; 0x31
    b23a:	92 a9       	ldd	r25, Z+50	; 0x32
    b23c:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    b240:	1c c0       	rjmp	.+56     	; 0xb27a <update_level_helper+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    b242:	f3 01       	movw	r30, r6
    b244:	65 a5       	ldd	r22, Z+45	; 0x2d
    b246:	70 e0       	ldi	r23, 0x00	; 0
    b248:	80 e0       	ldi	r24, 0x00	; 0
    b24a:	90 e0       	ldi	r25, 0x00	; 0
    b24c:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b250:	25 e6       	ldi	r18, 0x65	; 101
    b252:	38 e8       	ldi	r19, 0x88	; 136
    b254:	48 e8       	ldi	r20, 0x88	; 136
    b256:	5c e3       	ldi	r21, 0x3C	; 60
    b258:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b25c:	9b 01       	movw	r18, r22
    b25e:	ac 01       	movw	r20, r24
    b260:	f3 01       	movw	r30, r6
    b262:	63 a9       	ldd	r22, Z+51	; 0x33
    b264:	74 a9       	ldd	r23, Z+52	; 0x34
    b266:	85 a9       	ldd	r24, Z+53	; 0x35
    b268:	96 a9       	ldd	r25, Z+54	; 0x36
    b26a:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    b26e:	f3 01       	movw	r30, r6
    b270:	63 ab       	std	Z+51, r22	; 0x33
    b272:	74 ab       	std	Z+52, r23	; 0x34
    b274:	85 ab       	std	Z+53, r24	; 0x35
    b276:	96 ab       	std	Z+54, r25	; 0x36
    b278:	05 c0       	rjmp	.+10     	; 0xb284 <update_level_helper+0x2e6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b27a:	f3 01       	movw	r30, r6
    b27c:	67 a7       	std	Z+47, r22	; 0x2f
    b27e:	70 ab       	std	Z+48, r23	; 0x30
    b280:	81 ab       	std	Z+49, r24	; 0x31
    b282:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    b284:	f3 01       	movw	r30, r6
    b286:	d3 ac       	ldd	r13, Z+59	; 0x3b
    b288:	6d 2d       	mov	r22, r13
    b28a:	70 e0       	ldi	r23, 0x00	; 0
    b28c:	80 e0       	ldi	r24, 0x00	; 0
    b28e:	90 e0       	ldi	r25, 0x00	; 0
    b290:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b294:	4b 01       	movw	r8, r22
    b296:	5c 01       	movw	r10, r24
    b298:	f8 e0       	ldi	r31, 0x08	; 8
    b29a:	fd 15       	cp	r31, r13
    b29c:	88 f0       	brcs	.+34     	; 0xb2c0 <update_level_helper+0x322>
    b29e:	f3 01       	movw	r30, r6
    b2a0:	85 a5       	ldd	r24, Z+45	; 0x2d
    b2a2:	68 2f       	mov	r22, r24
    b2a4:	70 e0       	ldi	r23, 0x00	; 0
    b2a6:	80 e0       	ldi	r24, 0x00	; 0
    b2a8:	90 e0       	ldi	r25, 0x00	; 0
    b2aa:	0e 94 a9 62 	call	0xc552	; 0xc552 <__floatsisf>
    b2ae:	25 e6       	ldi	r18, 0x65	; 101
    b2b0:	38 e8       	ldi	r19, 0x88	; 136
    b2b2:	48 e8       	ldi	r20, 0x88	; 136
    b2b4:	5c e3       	ldi	r21, 0x3C	; 60
    b2b6:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    b2ba:	9b 01       	movw	r18, r22
    b2bc:	ac 01       	movw	r20, r24
    b2be:	03 c0       	rjmp	.+6      	; 0xb2c6 <update_level_helper+0x328>
    b2c0:	20 e0       	ldi	r18, 0x00	; 0
    b2c2:	30 e0       	ldi	r19, 0x00	; 0
    b2c4:	a9 01       	movw	r20, r18
    b2c6:	c5 01       	movw	r24, r10
    b2c8:	b4 01       	movw	r22, r8
    b2ca:	0e 94 a6 61 	call	0xc34c	; 0xc34c <__addsf3>
    b2ce:	0e 94 7b 62 	call	0xc4f6	; 0xc4f6 <__fixunssfsi>
    b2d2:	f3 01       	movw	r30, r6
    b2d4:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    b2d6:	b7 01       	movw	r22, r14
    b2d8:	c3 01       	movw	r24, r6
    b2da:	0e 94 43 52 	call	0xa486	; 0xa486 <collision_detect_shot>
    b2de:	0a c0       	rjmp	.+20     	; 0xb2f4 <update_level_helper+0x356>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    b2e0:	91 ff       	sbrs	r25, 1
    b2e2:	08 c0       	rjmp	.+16     	; 0xb2f4 <update_level_helper+0x356>
		{
			SFX_NAVIGATE;
    b2e4:	2f ef       	ldi	r18, 0xFF	; 255
    b2e6:	47 e1       	ldi	r20, 0x17	; 23
    b2e8:	67 e0       	ldi	r22, 0x07	; 7
    b2ea:	84 e0       	ldi	r24, 0x04	; 4
    b2ec:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
			exit_game();
    b2f0:	0e 94 c4 57 	call	0xaf88	; 0xaf88 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    b2f4:	f3 01       	movw	r30, r6
    b2f6:	80 89       	ldd	r24, Z+16	; 0x10
    b2f8:	8a 30       	cpi	r24, 0x0A	; 10
    b2fa:	08 f4       	brcc	.+2      	; 0xb2fe <update_level_helper+0x360>
    b2fc:	5c c0       	rjmp	.+184    	; 0xb3b6 <update_level_helper+0x418>
    b2fe:	f8 01       	movw	r30, r16
    b300:	84 89       	ldd	r24, Z+20	; 0x14
    b302:	80 fd       	sbrc	r24, 0
    b304:	58 c0       	rjmp	.+176    	; 0xb3b6 <update_level_helper+0x418>
	{
	    next_level = game.current_level + 1;
    b306:	30 91 09 0c 	lds	r19, 0x0C09
    b30a:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    b30c:	3a 30       	cpi	r19, 0x0A	; 10
    b30e:	30 f0       	brcs	.+12     	; 0xb31c <update_level_helper+0x37e>
    b310:	97 85       	ldd	r25, Z+15	; 0x0f
    b312:	f3 01       	movw	r30, r6
    b314:	87 85       	ldd	r24, Z+15	; 0x0f
    b316:	98 17       	cp	r25, r24
    b318:	09 f4       	brne	.+2      	; 0xb31c <update_level_helper+0x37e>
    b31a:	4d c0       	rjmp	.+154    	; 0xb3b6 <update_level_helper+0x418>

		load_level_tiles(true);
    b31c:	81 e0       	ldi	r24, 0x01	; 1
    b31e:	39 83       	std	Y+1, r19	; 0x01
    b320:	0e 94 b1 55 	call	0xab62	; 0xab62 <load_level_tiles>
		SetSpriteVisibility(false);
    b324:	80 e0       	ldi	r24, 0x00	; 0
    b326:	0e 94 11 46 	call	0x8c22	; 0x8c22 <SetSpriteVisibility>
		print_level_score(player, other_player);
    b32a:	b8 01       	movw	r22, r16
    b32c:	c3 01       	movw	r24, r6
    b32e:	0e 94 86 4c 	call	0x990c	; 0x990c <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    b332:	82 e0       	ldi	r24, 0x02	; 2
    b334:	0e 94 4e 4a 	call	0x949c	; 0x949c <LBWaitSeconds>
		player->level_score = 0;
    b338:	f3 01       	movw	r30, r6
    b33a:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    b33c:	f8 01       	movw	r30, r16
    b33e:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    b340:	2f ef       	ldi	r18, 0xFF	; 255
    b342:	47 e1       	ldi	r20, 0x17	; 23
    b344:	64 e0       	ldi	r22, 0x04	; 4
    b346:	84 e0       	ldi	r24, 0x04	; 4
    b348:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    b34c:	39 81       	ldd	r19, Y+1	; 0x01
    b34e:	3a 30       	cpi	r19, 0x0A	; 10
    b350:	08 f1       	brcs	.+66     	; 0xb394 <update_level_helper+0x3f6>
		{
		    if (other_player->score > player->score)
    b352:	f8 01       	movw	r30, r16
    b354:	97 85       	ldd	r25, Z+15	; 0x0f
    b356:	f3 01       	movw	r30, r6
    b358:	87 85       	ldd	r24, Z+15	; 0x0f
    b35a:	89 17       	cp	r24, r25
    b35c:	20 f4       	brcc	.+8      	; 0xb366 <update_level_helper+0x3c8>
    b35e:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    b360:	38 01       	movw	r6, r16
		        other_player = tmp;
    b362:	0e 2f       	mov	r16, r30
    b364:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    b366:	b8 01       	movw	r22, r16
    b368:	c3 01       	movw	r24, r6
    b36a:	0e 94 c8 4c 	call	0x9990	; 0x9990 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    b36e:	82 e0       	ldi	r24, 0x02	; 2
    b370:	0e 94 4e 4a 	call	0x949c	; 0x949c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    b374:	0f 90       	pop	r0
    b376:	df 91       	pop	r29
    b378:	cf 91       	pop	r28
    b37a:	1f 91       	pop	r17
    b37c:	0f 91       	pop	r16
    b37e:	ff 90       	pop	r15
    b380:	ef 90       	pop	r14
    b382:	df 90       	pop	r13
    b384:	bf 90       	pop	r11
    b386:	af 90       	pop	r10
    b388:	9f 90       	pop	r9
    b38a:	8f 90       	pop	r8
    b38c:	7f 90       	pop	r7
    b38e:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    b390:	0c 94 c4 57 	jmp	0xaf88	; 0xaf88 <exit_game>
		}
		else
		{
			level_transition(next_level);
    b394:	83 2f       	mov	r24, r19
		}
	}
}
    b396:	0f 90       	pop	r0
    b398:	df 91       	pop	r29
    b39a:	cf 91       	pop	r28
    b39c:	1f 91       	pop	r17
    b39e:	0f 91       	pop	r16
    b3a0:	ff 90       	pop	r15
    b3a2:	ef 90       	pop	r14
    b3a4:	df 90       	pop	r13
    b3a6:	bf 90       	pop	r11
    b3a8:	af 90       	pop	r10
    b3aa:	9f 90       	pop	r9
    b3ac:	8f 90       	pop	r8
    b3ae:	7f 90       	pop	r7
    b3b0:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    b3b2:	0c 94 c6 56 	jmp	0xad8c	; 0xad8c <level_transition>
		}
	}
}
    b3b6:	0f 90       	pop	r0
    b3b8:	df 91       	pop	r29
    b3ba:	cf 91       	pop	r28
    b3bc:	1f 91       	pop	r17
    b3be:	0f 91       	pop	r16
    b3c0:	ff 90       	pop	r15
    b3c2:	ef 90       	pop	r14
    b3c4:	df 90       	pop	r13
    b3c6:	bf 90       	pop	r11
    b3c8:	af 90       	pop	r10
    b3ca:	9f 90       	pop	r9
    b3cc:	8f 90       	pop	r8
    b3ce:	7f 90       	pop	r7
    b3d0:	6f 90       	pop	r6
    b3d2:	08 95       	ret

0000b3d4 <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    b3d4:	cf 92       	push	r12
    b3d6:	df 92       	push	r13
    b3d8:	ef 92       	push	r14
    b3da:	ff 92       	push	r15
    b3dc:	1f 93       	push	r17
    b3de:	cf 93       	push	r28
    b3e0:	df 93       	push	r29
    b3e2:	6c 01       	movw	r12, r24
    b3e4:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    b3e6:	80 91 0a 0c 	lds	r24, 0x0C0A
    b3ea:	88 23       	and	r24, r24
    b3ec:	d1 f0       	breq	.+52     	; 0xb422 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    b3ee:	80 e0       	ldi	r24, 0x00	; 0
    b3f0:	0e 94 11 46 	call	0x8c22	; 0x8c22 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    b3f4:	4d ec       	ldi	r20, 0xCD	; 205
    b3f6:	5b e6       	ldi	r21, 0x6B	; 107
    b3f8:	6c e0       	ldi	r22, 0x0C	; 12
    b3fa:	88 e0       	ldi	r24, 0x08	; 8
    b3fc:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
		Print(12, 13, &strMap[strPaused]);
    b400:	4a ea       	ldi	r20, 0xAA	; 170
    b402:	52 e0       	ldi	r21, 0x02	; 2
    b404:	6d e0       	ldi	r22, 0x0D	; 13
    b406:	70 e0       	ldi	r23, 0x00	; 0
    b408:	8c e0       	ldi	r24, 0x0C	; 12
    b40a:	90 e0       	ldi	r25, 0x00	; 0
    b40c:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
		Print(11, 14, &strMap[strExit]);
    b410:	41 ea       	ldi	r20, 0xA1	; 161
    b412:	52 e0       	ldi	r21, 0x02	; 2
    b414:	6e e0       	ldi	r22, 0x0E	; 14
    b416:	70 e0       	ldi	r23, 0x00	; 0
    b418:	8b e0       	ldi	r24, 0x0B	; 11
    b41a:	90 e0       	ldi	r25, 0x00	; 0
    b41c:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    b420:	44 c0       	rjmp	.+136    	; 0xb4aa <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    b422:	81 e0       	ldi	r24, 0x01	; 1
    b424:	0e 94 11 46 	call	0x8c22	; 0x8c22 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    b428:	60 e0       	ldi	r22, 0x00	; 0
    b42a:	85 e2       	ldi	r24, 0x25	; 37
    b42c:	9c e0       	ldi	r25, 0x0C	; 12
    b42e:	0e 94 0d 4e 	call	0x9c1a	; 0x9c1a <tank_map>
    b432:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    b434:	68 2f       	mov	r22, r24
    b436:	89 e8       	ldi	r24, 0x89	; 137
    b438:	9f e0       	ldi	r25, 0x0F	; 15
    b43a:	0e 94 0d 4e 	call	0x9c1a	; 0x9c1a <tank_map>
    b43e:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    b440:	68 2f       	mov	r22, r24
    b442:	85 e2       	ldi	r24, 0x25	; 37
    b444:	9c e0       	ldi	r25, 0x0C	; 12
    b446:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <shot_map>
    b44a:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    b44c:	68 2f       	mov	r22, r24
    b44e:	89 e8       	ldi	r24, 0x89	; 137
    b450:	9f e0       	ldi	r25, 0x0F	; 15
    b452:	0e 94 8f 4e 	call	0x9d1e	; 0x9d1e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    b456:	40 91 02 01 	lds	r20, 0x0102
    b45a:	6f e0       	ldi	r22, 0x0F	; 15
    b45c:	85 e2       	ldi	r24, 0x25	; 37
    b45e:	9c e0       	ldi	r25, 0x0C	; 12
    b460:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <render_banter>
    b464:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    b468:	40 91 01 01 	lds	r20, 0x0101
    b46c:	60 e0       	ldi	r22, 0x00	; 0
    b46e:	89 e8       	ldi	r24, 0x89	; 137
    b470:	9f e0       	ldi	r25, 0x0F	; 15
    b472:	0e 94 4b 4d 	call	0x9a96	; 0x9a96 <render_banter>
    b476:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    b47a:	60 e0       	ldi	r22, 0x00	; 0
    b47c:	85 e2       	ldi	r24, 0x25	; 37
    b47e:	9c e0       	ldi	r25, 0x0C	; 12
    b480:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <render_player>
		render_player(&player2, p2_index);
    b484:	61 2f       	mov	r22, r17
    b486:	89 e8       	ldi	r24, 0x89	; 137
    b488:	9f e0       	ldi	r25, 0x0F	; 15
    b48a:	0e 94 73 4d 	call	0x9ae6	; 0x9ae6 <render_player>
		render_shot(&player1, p1_shot_index);
    b48e:	6d 2f       	mov	r22, r29
    b490:	85 e2       	ldi	r24, 0x25	; 37
    b492:	9c e0       	ldi	r25, 0x0C	; 12
    b494:	0e 94 9c 4d 	call	0x9b38	; 0x9b38 <render_shot>
		render_shot(&player2, p2_shot_index);
    b498:	6c 2f       	mov	r22, r28
    b49a:	89 e8       	ldi	r24, 0x89	; 137
    b49c:	9f e0       	ldi	r25, 0x0F	; 15
    b49e:	0e 94 9c 4d 	call	0x9b38	; 0x9b38 <render_shot>
		render_tile_explosions(&tile_animations);
    b4a2:	8c e0       	ldi	r24, 0x0C	; 12
    b4a4:	9c e0       	ldi	r25, 0x0C	; 12
    b4a6:	0e 94 c8 4d 	call	0x9b90	; 0x9b90 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    b4aa:	2f e0       	ldi	r18, 0x0F	; 15
    b4ac:	49 e8       	ldi	r20, 0x89	; 137
    b4ae:	5f e0       	ldi	r21, 0x0F	; 15
    b4b0:	65 e2       	ldi	r22, 0x25	; 37
    b4b2:	7c e0       	ldi	r23, 0x0C	; 12
    b4b4:	c6 01       	movw	r24, r12
    b4b6:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    b4ba:	20 e0       	ldi	r18, 0x00	; 0
    b4bc:	45 e2       	ldi	r20, 0x25	; 37
    b4be:	5c e0       	ldi	r21, 0x0C	; 12
    b4c0:	69 e8       	ldi	r22, 0x89	; 137
    b4c2:	7f e0       	ldi	r23, 0x0F	; 15
    b4c4:	c7 01       	movw	r24, r14
    b4c6:	0e 94 cf 57 	call	0xaf9e	; 0xaf9e <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    b4ca:	2f e0       	ldi	r18, 0x0F	; 15
    b4cc:	40 e0       	ldi	r20, 0x00	; 0
    b4ce:	69 e8       	ldi	r22, 0x89	; 137
    b4d0:	7f e0       	ldi	r23, 0x0F	; 15
    b4d2:	85 e2       	ldi	r24, 0x25	; 37
    b4d4:	9c e0       	ldi	r25, 0x0C	; 12
    b4d6:	0e 94 49 54 	call	0xa892	; 0xa892 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    b4da:	20 e0       	ldi	r18, 0x00	; 0
    b4dc:	4f e0       	ldi	r20, 0x0F	; 15
    b4de:	65 e2       	ldi	r22, 0x25	; 37
    b4e0:	7c e0       	ldi	r23, 0x0C	; 12
    b4e2:	89 e8       	ldi	r24, 0x89	; 137
    b4e4:	9f e0       	ldi	r25, 0x0F	; 15
    b4e6:	0e 94 49 54 	call	0xa892	; 0xa892 <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    b4ea:	80 91 0b 0c 	lds	r24, 0x0C0B
    b4ee:	83 30       	cpi	r24, 0x03	; 3
    b4f0:	69 f4       	brne	.+26     	; 0xb50c <update_level+0x138>
	{
		demo_counter++;
    b4f2:	80 91 32 0b 	lds	r24, 0x0B32
    b4f6:	90 91 33 0b 	lds	r25, 0x0B33
    b4fa:	01 96       	adiw	r24, 0x01	; 1
    b4fc:	90 93 33 0b 	sts	0x0B33, r25
    b500:	80 93 32 0b 	sts	0x0B32, r24
		held = ReadJoypad(0);
    b504:	80 e0       	ldi	r24, 0x00	; 0
    b506:	0e 94 2e 3a 	call	0x745c	; 0x745c <ReadJoypad>
    b50a:	02 c0       	rjmp	.+4      	; 0xb510 <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    b50c:	80 e0       	ldi	r24, 0x00	; 0
    b50e:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    b510:	20 91 0b 0c 	lds	r18, 0x0C0B
    b514:	23 30       	cpi	r18, 0x03	; 3
    b516:	e1 f4       	brne	.+56     	; 0xb550 <update_level+0x17c>
    b518:	8f 70       	andi	r24, 0x0F	; 15
    b51a:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    b51c:	89 2b       	or	r24, r25
    b51e:	39 f4       	brne	.+14     	; 0xb52e <update_level+0x15a>
		 (held & BTN_B)) ||
    b520:	80 91 32 0b 	lds	r24, 0x0B32
    b524:	90 91 33 0b 	lds	r25, 0x0B33
    b528:	88 30       	cpi	r24, 0x08	; 8
    b52a:	97 40       	sbci	r25, 0x07	; 7
    b52c:	88 f0       	brcs	.+34     	; 0xb550 <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    b52e:	10 92 33 0b 	sts	0x0B33, r1
    b532:	10 92 32 0b 	sts	0x0B32, r1
		fade_through();
    b536:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		init_game_state();
    b53a:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <init_game_state>
		load_splash();
	}
}
    b53e:	df 91       	pop	r29
    b540:	cf 91       	pop	r28
    b542:	1f 91       	pop	r17
    b544:	ff 90       	pop	r15
    b546:	ef 90       	pop	r14
    b548:	df 90       	pop	r13
    b54a:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    b54c:	0c 94 f6 56 	jmp	0xadec	; 0xadec <load_splash>
	}
}
    b550:	df 91       	pop	r29
    b552:	cf 91       	pop	r28
    b554:	1f 91       	pop	r17
    b556:	ff 90       	pop	r15
    b558:	ef 90       	pop	r14
    b55a:	df 90       	pop	r13
    b55c:	cf 90       	pop	r12
    b55e:	08 95       	ret

0000b560 <update_tank_rank>:
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    b560:	cf 93       	push	r28
    b562:	df 93       	push	r29
    b564:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    b566:	88 81       	ld	r24, Y
    b568:	99 81       	ldd	r25, Y+1	; 0x01
    b56a:	91 ff       	sbrs	r25, 1
    b56c:	0a c0       	rjmp	.+20     	; 0xb582 <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    b56e:	2f ef       	ldi	r18, 0xFF	; 255
    b570:	47 e1       	ldi	r20, 0x17	; 23
    b572:	67 e0       	ldi	r22, 0x07	; 7
    b574:	84 e0       	ldi	r24, 0x04	; 4
    b576:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		fade_through();
    b57a:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		load_splash();
    b57e:	0e 94 f6 56 	call	0xadec	; 0xadec <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    b582:	8c 81       	ldd	r24, Y+4	; 0x04
    b584:	9d 81       	ldd	r25, Y+5	; 0x05
    b586:	92 ff       	sbrs	r25, 2
    b588:	1d c0       	rjmp	.+58     	; 0xb5c4 <update_tank_rank+0x64>
    b58a:	8e 81       	ldd	r24, Y+6	; 0x06
    b58c:	8f 3f       	cpi	r24, 0xFF	; 255
    b58e:	d1 f4       	brne	.+52     	; 0xb5c4 <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    b590:	2f ef       	ldi	r18, 0xFF	; 255
    b592:	47 e1       	ldi	r20, 0x17	; 23
    b594:	67 e0       	ldi	r22, 0x07	; 7
    b596:	84 e0       	ldi	r24, 0x04	; 4
    b598:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
	    init_scores(&scores);
    b59c:	81 ec       	ldi	r24, 0xC1	; 193
    b59e:	9b e0       	ldi	r25, 0x0B	; 11
    b5a0:	0e 94 5d 4a 	call	0x94ba	; 0x94ba <init_scores>
	    init_handles(&handles);
    b5a4:	88 ee       	ldi	r24, 0xE8	; 232
    b5a6:	9b e0       	ldi	r25, 0x0B	; 11
    b5a8:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b5ac:	81 ec       	ldi	r24, 0xC1	; 193
    b5ae:	9b e0       	ldi	r25, 0x0B	; 11
    b5b0:	0e 94 1f 3b 	call	0x763e	; 0x763e <EepromWriteBlock>
    b5b4:	88 ee       	ldi	r24, 0xE8	; 232
    b5b6:	9b e0       	ldi	r25, 0x0B	; 11
    b5b8:	0e 94 1f 3b 	call	0x763e	; 0x763e <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    b5bc:	df 91       	pop	r29
    b5be:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    b5c0:	0c 94 2c 57 	jmp	0xae58	; 0xae58 <load_tank_rank>
	}
}
    b5c4:	df 91       	pop	r29
    b5c6:	cf 91       	pop	r28
    b5c8:	08 95       	ret

0000b5ca <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    b5ca:	0f 93       	push	r16
    b5cc:	1f 93       	push	r17
    b5ce:	cf 93       	push	r28
    b5d0:	df 93       	push	r29
    b5d2:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    b5d4:	fb 01       	movw	r30, r22
    b5d6:	20 81       	ld	r18, Z
    b5d8:	31 81       	ldd	r19, Z+1	; 0x01
    b5da:	f9 01       	movw	r30, r18
    b5dc:	e0 71       	andi	r30, 0x10	; 16
    b5de:	ff 27       	eor	r31, r31
    b5e0:	24 ff       	sbrs	r18, 4
    b5e2:	09 c0       	rjmp	.+18     	; 0xb5f6 <_handle_select_helper+0x2c>
    b5e4:	8d 81       	ldd	r24, Y+5	; 0x05
    b5e6:	81 11       	cpse	r24, r1
    b5e8:	06 c0       	rjmp	.+12     	; 0xb5f6 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    b5ea:	88 81       	ld	r24, Y
    b5ec:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    b5ee:	87 ff       	sbrs	r24, 7
    b5f0:	0f c0       	rjmp	.+30     	; 0xb610 <_handle_select_helper+0x46>
    b5f2:	18 82       	st	Y, r1
    b5f4:	25 c0       	rjmp	.+74     	; 0xb640 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    b5f6:	b9 01       	movw	r22, r18
    b5f8:	60 72       	andi	r22, 0x20	; 32
    b5fa:	77 27       	eor	r23, r23
    b5fc:	25 ff       	sbrs	r18, 5
    b5fe:	0a c0       	rjmp	.+20     	; 0xb614 <_handle_select_helper+0x4a>
    b600:	8d 81       	ldd	r24, Y+5	; 0x05
    b602:	81 11       	cpse	r24, r1
    b604:	07 c0       	rjmp	.+14     	; 0xb614 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    b606:	88 81       	ld	r24, Y
    b608:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    b60a:	89 30       	cpi	r24, 0x09	; 9
    b60c:	0c f0       	brlt	.+2      	; 0xb610 <_handle_select_helper+0x46>
    b60e:	88 e0       	ldi	r24, 0x08	; 8
    b610:	88 83       	st	Y, r24
    b612:	16 c0       	rjmp	.+44     	; 0xb640 <_handle_select_helper+0x76>
    b614:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    b616:	a9 01       	movw	r20, r18
    b618:	44 27       	eor	r20, r20
    b61a:	51 70       	andi	r21, 0x01	; 1
    b61c:	30 ff       	sbrs	r19, 0
    b61e:	1a c0       	rjmp	.+52     	; 0xb654 <_handle_select_helper+0x8a>
    b620:	ad 81       	ldd	r26, Y+5	; 0x05
    b622:	a1 11       	cpse	r26, r1
    b624:	17 c0       	rjmp	.+46     	; 0xb654 <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    b626:	81 e0       	ldi	r24, 0x01	; 1
    b628:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    b62a:	69 91       	ld	r22, Y+
    b62c:	f3 e0       	ldi	r31, 0x03	; 3
    b62e:	6f 02       	muls	r22, r31
    b630:	b0 01       	movw	r22, r0
    b632:	11 24       	eor	r1, r1
    b634:	66 51       	subi	r22, 0x16	; 22
    b636:	74 4f       	sbci	r23, 0xF4	; 244
    b638:	43 e0       	ldi	r20, 0x03	; 3
    b63a:	ce 01       	movw	r24, r28
    b63c:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		SFX_NAVIGATE;
    b640:	2f ef       	ldi	r18, 0xFF	; 255
    b642:	47 e1       	ldi	r20, 0x17	; 23
    b644:	67 e0       	ldi	r22, 0x07	; 7
    b646:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    b648:	df 91       	pop	r29
    b64a:	cf 91       	pop	r28
    b64c:	1f 91       	pop	r17
    b64e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    b650:	0c 94 55 3d 	jmp	0x7aaa	; 0x7aaa <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    b654:	27 ff       	sbrs	r18, 7
    b656:	09 c0       	rjmp	.+18     	; 0xb66a <_handle_select_helper+0xa0>
    b658:	ad 81       	ldd	r26, Y+5	; 0x05
    b65a:	a1 30       	cpi	r26, 0x01	; 1
    b65c:	31 f4       	brne	.+12     	; 0xb66a <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    b65e:	8c 81       	ldd	r24, Y+4	; 0x04
    b660:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    b662:	83 30       	cpi	r24, 0x03	; 3
    b664:	5c f0       	brlt	.+22     	; 0xb67c <_handle_select_helper+0xb2>
    b666:	82 e0       	ldi	r24, 0x02	; 2
    b668:	09 c0       	rjmp	.+18     	; 0xb67c <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    b66a:	26 ff       	sbrs	r18, 6
    b66c:	0b c0       	rjmp	.+22     	; 0xb684 <_handle_select_helper+0xba>
    b66e:	ed 81       	ldd	r30, Y+5	; 0x05
    b670:	e1 30       	cpi	r30, 0x01	; 1
    b672:	41 f5       	brne	.+80     	; 0xb6c4 <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    b674:	8c 81       	ldd	r24, Y+4	; 0x04
    b676:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    b678:	87 fd       	sbrc	r24, 7
    b67a:	02 c0       	rjmp	.+4      	; 0xb680 <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    b67c:	8c 83       	std	Y+4, r24	; 0x04
    b67e:	e0 cf       	rjmp	.-64     	; 0xb640 <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    b680:	1c 82       	std	Y+4, r1	; 0x04
    b682:	de cf       	rjmp	.-68     	; 0xb640 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    b684:	ef 2b       	or	r30, r31
    b686:	69 f0       	breq	.+26     	; 0xb6a2 <_handle_select_helper+0xd8>
    b688:	8d 81       	ldd	r24, Y+5	; 0x05
    b68a:	81 30       	cpi	r24, 0x01	; 1
    b68c:	09 f0       	breq	.+2      	; 0xb690 <_handle_select_helper+0xc6>
    b68e:	43 c0       	rjmp	.+134    	; 0xb716 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    b690:	8c 81       	ldd	r24, Y+4	; 0x04
    b692:	c8 0f       	add	r28, r24
    b694:	d1 1d       	adc	r29, r1
    b696:	99 81       	ldd	r25, Y+1	; 0x01
    b698:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    b69a:	91 34       	cpi	r25, 0x41	; 65
    b69c:	70 f4       	brcc	.+28     	; 0xb6ba <_handle_select_helper+0xf0>
    b69e:	81 e4       	ldi	r24, 0x41	; 65
    b6a0:	0f c0       	rjmp	.+30     	; 0xb6c0 <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b6a2:	67 2b       	or	r22, r23
    b6a4:	89 f0       	breq	.+34     	; 0xb6c8 <_handle_select_helper+0xfe>
    b6a6:	8d 81       	ldd	r24, Y+5	; 0x05
    b6a8:	81 30       	cpi	r24, 0x01	; 1
    b6aa:	a9 f5       	brne	.+106    	; 0xb716 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    b6ac:	8c 81       	ldd	r24, Y+4	; 0x04
    b6ae:	c8 0f       	add	r28, r24
    b6b0:	d1 1d       	adc	r29, r1
    b6b2:	99 81       	ldd	r25, Y+1	; 0x01
    b6b4:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b6b6:	9b 35       	cpi	r25, 0x5B	; 91
    b6b8:	10 f4       	brcc	.+4      	; 0xb6be <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    b6ba:	99 83       	std	Y+1, r25	; 0x01
    b6bc:	c1 cf       	rjmp	.-126    	; 0xb640 <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    b6be:	8a e5       	ldi	r24, 0x5A	; 90
    b6c0:	89 83       	std	Y+1, r24	; 0x01
    b6c2:	be cf       	rjmp	.-132    	; 0xb640 <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    b6c4:	67 2b       	or	r22, r23
    b6c6:	39 f5       	brne	.+78     	; 0xb716 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    b6c8:	45 2b       	or	r20, r21
    b6ca:	29 f1       	breq	.+74     	; 0xb716 <_handle_select_helper+0x14c>
    b6cc:	4d 81       	ldd	r20, Y+5	; 0x05
    b6ce:	41 30       	cpi	r20, 0x01	; 1
    b6d0:	11 f5       	brne	.+68     	; 0xb716 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    b6d2:	fe 01       	movw	r30, r28
    b6d4:	21 91       	ld	r18, Z+
    b6d6:	8f 01       	movw	r16, r30
    b6d8:	fc 01       	movw	r30, r24
    b6da:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    b6dc:	43 e0       	ldi	r20, 0x03	; 3
    b6de:	b8 01       	movw	r22, r16
    b6e0:	0c 96       	adiw	r24, 0x0c	; 12
    b6e2:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    b6e6:	88 81       	ld	r24, Y
    b6e8:	f3 e0       	ldi	r31, 0x03	; 3
    b6ea:	8f 02       	muls	r24, r31
    b6ec:	c0 01       	movw	r24, r0
    b6ee:	11 24       	eor	r1, r1
    b6f0:	43 e0       	ldi	r20, 0x03	; 3
    b6f2:	b8 01       	movw	r22, r16
    b6f4:	86 51       	subi	r24, 0x16	; 22
    b6f6:	94 4f       	sbci	r25, 0xF4	; 244
    b6f8:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		SFX_NAVIGATE;
    b6fc:	2f ef       	ldi	r18, 0xFF	; 255
    b6fe:	47 e1       	ldi	r20, 0x17	; 23
    b700:	67 e0       	ldi	r22, 0x07	; 7
    b702:	84 e0       	ldi	r24, 0x04	; 4
    b704:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    b708:	88 ee       	ldi	r24, 0xE8	; 232
    b70a:	9b e0       	ldi	r25, 0x0B	; 11
    b70c:	0e 94 1f 3b 	call	0x763e	; 0x763e <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    b710:	82 e0       	ldi	r24, 0x02	; 2
    b712:	8d 83       	std	Y+5, r24	; 0x05
    b714:	1a c0       	rjmp	.+52     	; 0xb74a <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    b716:	31 ff       	sbrs	r19, 1
    b718:	18 c0       	rjmp	.+48     	; 0xb74a <_handle_select_helper+0x180>
    b71a:	8d 81       	ldd	r24, Y+5	; 0x05
    b71c:	81 30       	cpi	r24, 0x01	; 1
    b71e:	11 f4       	brne	.+4      	; 0xb724 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    b720:	1d 82       	std	Y+5, r1	; 0x05
    b722:	8e cf       	rjmp	.-228    	; 0xb640 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    b724:	82 30       	cpi	r24, 0x02	; 2
    b726:	19 f4       	brne	.+6      	; 0xb72e <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    b728:	81 e0       	ldi	r24, 0x01	; 1
    b72a:	8d 83       	std	Y+5, r24	; 0x05
    b72c:	89 cf       	rjmp	.-238    	; 0xb640 <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    b72e:	2f ef       	ldi	r18, 0xFF	; 255
    b730:	47 e1       	ldi	r20, 0x17	; 23
    b732:	67 e0       	ldi	r22, 0x07	; 7
    b734:	84 e0       	ldi	r24, 0x04	; 4
    b736:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		fade_through();
    b73a:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		load_splash();
	}
}
    b73e:	df 91       	pop	r29
    b740:	cf 91       	pop	r28
    b742:	1f 91       	pop	r17
    b744:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    b746:	0c 94 f6 56 	jmp	0xadec	; 0xadec <load_splash>
	}
}
    b74a:	df 91       	pop	r29
    b74c:	cf 91       	pop	r28
    b74e:	1f 91       	pop	r17
    b750:	0f 91       	pop	r16
    b752:	08 95       	ret

0000b754 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    b754:	af 92       	push	r10
    b756:	bf 92       	push	r11
    b758:	cf 92       	push	r12
    b75a:	df 92       	push	r13
    b75c:	ef 92       	push	r14
    b75e:	ff 92       	push	r15
    b760:	0f 93       	push	r16
    b762:	1f 93       	push	r17
    b764:	cf 93       	push	r28
    b766:	df 93       	push	r29
    b768:	00 d0       	rcall	.+0      	; 0xb76a <_handle_select_render_helper+0x16>
    b76a:	1f 92       	push	r1
    b76c:	cd b7       	in	r28, 0x3d	; 61
    b76e:	de b7       	in	r29, 0x3e	; 62
    b770:	7c 01       	movw	r14, r24
    b772:	b4 2e       	mov	r11, r20
    b774:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    b776:	80 e2       	ldi	r24, 0x20	; 32
    b778:	89 83       	std	Y+1, r24	; 0x01
    b77a:	8a 83       	std	Y+2, r24	; 0x02
    b77c:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    b77e:	f7 01       	movw	r30, r14
    b780:	85 81       	ldd	r24, Z+5	; 0x05
    b782:	81 11       	cpse	r24, r1
    b784:	1d c0       	rjmp	.+58     	; 0xb7c0 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    b786:	40 e0       	ldi	r20, 0x00	; 0
    b788:	67 ee       	ldi	r22, 0xE7	; 231
    b78a:	76 e4       	ldi	r23, 0x46	; 70
    b78c:	82 2f       	mov	r24, r18
    b78e:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b792:	40 e0       	ldi	r20, 0x00	; 0
    b794:	61 e4       	ldi	r22, 0x41	; 65
    b796:	77 e4       	ldi	r23, 0x47	; 71
    b798:	81 e0       	ldi	r24, 0x01	; 1
    b79a:	81 0f       	add	r24, r17
    b79c:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    b7a0:	f7 01       	movw	r30, r14
    b7a2:	40 81       	ld	r20, Z
    b7a4:	44 0f       	add	r20, r20
    b7a6:	44 0f       	add	r20, r20
    b7a8:	44 0f       	add	r20, r20
    b7aa:	40 5c       	subi	r20, 0xC0	; 192
    b7ac:	01 e0       	ldi	r16, 0x01	; 1
    b7ae:	21 e0       	ldi	r18, 0x01	; 1
    b7b0:	6b 2d       	mov	r22, r11
    b7b2:	66 0f       	add	r22, r22
    b7b4:	66 0f       	add	r22, r22
    b7b6:	66 0f       	add	r22, r22
    b7b8:	81 2f       	mov	r24, r17
    b7ba:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
    b7be:	6f c0       	rjmp	.+222    	; 0xb89e <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    b7c0:	81 30       	cpi	r24, 0x01	; 1
    b7c2:	09 f0       	breq	.+2      	; 0xb7c6 <_handle_select_render_helper+0x72>
    b7c4:	44 c0       	rjmp	.+136    	; 0xb84e <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    b7c6:	40 e0       	ldi	r20, 0x00	; 0
    b7c8:	61 ee       	ldi	r22, 0xE1	; 225
    b7ca:	76 e4       	ldi	r23, 0x46	; 70
    b7cc:	82 2f       	mov	r24, r18
    b7ce:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    b7d2:	aa 24       	eor	r10, r10
    b7d4:	a3 94       	inc	r10
    b7d6:	a1 0e       	add	r10, r17
    b7d8:	40 e0       	ldi	r20, 0x00	; 0
    b7da:	6e ed       	ldi	r22, 0xDE	; 222
    b7dc:	76 e4       	ldi	r23, 0x46	; 70
    b7de:	8a 2d       	mov	r24, r10
    b7e0:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    b7e4:	cb 2c       	mov	r12, r11
    b7e6:	d1 2c       	mov	r13, r1
    b7e8:	f5 e0       	ldi	r31, 0x05	; 5
    b7ea:	cf 0e       	add	r12, r31
    b7ec:	d1 1c       	adc	r13, r1
    b7ee:	f7 01       	movw	r30, r14
    b7f0:	40 81       	ld	r20, Z
    b7f2:	44 0f       	add	r20, r20
    b7f4:	44 0f       	add	r20, r20
    b7f6:	44 0f       	add	r20, r20
    b7f8:	48 5c       	subi	r20, 0xC8	; 200
    b7fa:	84 81       	ldd	r24, Z+4	; 0x04
    b7fc:	b6 01       	movw	r22, r12
    b7fe:	68 0f       	add	r22, r24
    b800:	71 1d       	adc	r23, r1
    b802:	87 fd       	sbrc	r24, 7
    b804:	7a 95       	dec	r23
    b806:	66 0f       	add	r22, r22
    b808:	66 0f       	add	r22, r22
    b80a:	66 0f       	add	r22, r22
    b80c:	01 e0       	ldi	r16, 0x01	; 1
    b80e:	21 e0       	ldi	r18, 0x01	; 1
    b810:	81 2f       	mov	r24, r17
    b812:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    b816:	f7 01       	movw	r30, r14
    b818:	40 81       	ld	r20, Z
    b81a:	44 0f       	add	r20, r20
    b81c:	44 0f       	add	r20, r20
    b81e:	44 0f       	add	r20, r20
    b820:	48 5b       	subi	r20, 0xB8	; 184
    b822:	84 81       	ldd	r24, Z+4	; 0x04
    b824:	c8 0e       	add	r12, r24
    b826:	d1 1c       	adc	r13, r1
    b828:	87 fd       	sbrc	r24, 7
    b82a:	da 94       	dec	r13
    b82c:	6c 2d       	mov	r22, r12
    b82e:	66 0f       	add	r22, r22
    b830:	66 0f       	add	r22, r22
    b832:	66 0f       	add	r22, r22
    b834:	21 e0       	ldi	r18, 0x01	; 1
    b836:	8a 2d       	mov	r24, r10
    b838:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    b83c:	43 e0       	ldi	r20, 0x03	; 3
    b83e:	b7 01       	movw	r22, r14
    b840:	6f 5f       	subi	r22, 0xFF	; 255
    b842:	7f 4f       	sbci	r23, 0xFF	; 255
    b844:	ce 01       	movw	r24, r28
    b846:	01 96       	adiw	r24, 0x01	; 1
    b848:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
    b84c:	28 c0       	rjmp	.+80     	; 0xb89e <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    b84e:	82 30       	cpi	r24, 0x02	; 2
    b850:	31 f5       	brne	.+76     	; 0xb89e <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    b852:	c4 2e       	mov	r12, r20
    b854:	d1 2c       	mov	r13, r1
    b856:	48 e2       	ldi	r20, 0x28	; 40
    b858:	65 e0       	ldi	r22, 0x05	; 5
    b85a:	70 e0       	ldi	r23, 0x00	; 0
    b85c:	c6 01       	movw	r24, r12
    b85e:	06 96       	adiw	r24, 0x06	; 6
    b860:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    b864:	23 e0       	ldi	r18, 0x03	; 3
    b866:	a7 01       	movw	r20, r14
    b868:	4f 5f       	subi	r20, 0xFF	; 255
    b86a:	5f 4f       	sbci	r21, 0xFF	; 255
    b86c:	65 e0       	ldi	r22, 0x05	; 5
    b86e:	87 e0       	ldi	r24, 0x07	; 7
    b870:	8b 0d       	add	r24, r11
    b872:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    b876:	49 e2       	ldi	r20, 0x29	; 41
    b878:	65 e0       	ldi	r22, 0x05	; 5
    b87a:	70 e0       	ldi	r23, 0x00	; 0
    b87c:	c6 01       	movw	r24, r12
    b87e:	0a 96       	adiw	r24, 0x0a	; 10
    b880:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
		MapSprite2(idx, map_none, 0);
    b884:	40 e0       	ldi	r20, 0x00	; 0
    b886:	61 e4       	ldi	r22, 0x41	; 65
    b888:	77 e4       	ldi	r23, 0x47	; 71
    b88a:	81 2f       	mov	r24, r17
    b88c:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    b890:	40 e0       	ldi	r20, 0x00	; 0
    b892:	61 e4       	ldi	r22, 0x41	; 65
    b894:	77 e4       	ldi	r23, 0x47	; 71
    b896:	81 e0       	ldi	r24, 0x01	; 1
    b898:	81 0f       	add	r24, r17
    b89a:	0e 94 e8 46 	call	0x8dd0	; 0x8dd0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    b89e:	f7 01       	movw	r30, r14
    b8a0:	60 81       	ld	r22, Z
    b8a2:	68 5f       	subi	r22, 0xF8	; 248
    b8a4:	23 e0       	ldi	r18, 0x03	; 3
    b8a6:	ae 01       	movw	r20, r28
    b8a8:	4f 5f       	subi	r20, 0xFF	; 255
    b8aa:	5f 4f       	sbci	r21, 0xFF	; 255
    b8ac:	85 e0       	ldi	r24, 0x05	; 5
    b8ae:	8b 0d       	add	r24, r11
    b8b0:	0e 94 e8 48 	call	0x91d0	; 0x91d0 <LBPrintStr>
}
    b8b4:	0f 90       	pop	r0
    b8b6:	0f 90       	pop	r0
    b8b8:	0f 90       	pop	r0
    b8ba:	df 91       	pop	r29
    b8bc:	cf 91       	pop	r28
    b8be:	1f 91       	pop	r17
    b8c0:	0f 91       	pop	r16
    b8c2:	ff 90       	pop	r15
    b8c4:	ef 90       	pop	r14
    b8c6:	df 90       	pop	r13
    b8c8:	cf 90       	pop	r12
    b8ca:	bf 90       	pop	r11
    b8cc:	af 90       	pop	r10
    b8ce:	08 95       	ret

0000b8d0 <load_handle_select>:

void load_handle_select()
{
    b8d0:	8f 92       	push	r8
    b8d2:	9f 92       	push	r9
    b8d4:	af 92       	push	r10
    b8d6:	bf 92       	push	r11
    b8d8:	cf 92       	push	r12
    b8da:	df 92       	push	r13
    b8dc:	ef 92       	push	r14
    b8de:	ff 92       	push	r15
    b8e0:	0f 93       	push	r16
    b8e2:	1f 93       	push	r17
    b8e4:	cf 93       	push	r28
    b8e6:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    b8e8:	82 e0       	ldi	r24, 0x02	; 2
    b8ea:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    b8ee:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    b8f2:	4a e4       	ldi	r20, 0x4A	; 74
    b8f4:	5b e6       	ldi	r21, 0x6B	; 107
    b8f6:	64 e0       	ldi	r22, 0x04	; 4
    b8f8:	83 e0       	ldi	r24, 0x03	; 3
    b8fa:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
	DrawMap2(20, 4, map_blue_tank);
    b8fe:	44 e4       	ldi	r20, 0x44	; 68
    b900:	5b e6       	ldi	r21, 0x6B	; 107
    b902:	64 e0       	ldi	r22, 0x04	; 4
    b904:	84 e1       	ldi	r24, 0x14	; 20
    b906:	0e 94 6a 47 	call	0x8ed4	; 0x8ed4 <DrawMap2>
	Print(9, 1, &strMap[strHandlesTitle]);
    b90a:	40 e7       	ldi	r20, 0x70	; 112
    b90c:	51 e0       	ldi	r21, 0x01	; 1
    b90e:	61 e0       	ldi	r22, 0x01	; 1
    b910:	70 e0       	ldi	r23, 0x00	; 0
    b912:	89 e0       	ldi	r24, 0x09	; 9
    b914:	90 e0       	ldi	r25, 0x00	; 0
    b916:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(6, 5, &strMap[strPlayer1]);
    b91a:	4a e8       	ldi	r20, 0x8A	; 138
    b91c:	51 e0       	ldi	r21, 0x01	; 1
    b91e:	65 e0       	ldi	r22, 0x05	; 5
    b920:	70 e0       	ldi	r23, 0x00	; 0
    b922:	86 e0       	ldi	r24, 0x06	; 6
    b924:	90 e0       	ldi	r25, 0x00	; 0
    b926:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(23, 5, &strMap[strPlayer2]);
    b92a:	4d e8       	ldi	r20, 0x8D	; 141
    b92c:	51 e0       	ldi	r21, 0x01	; 1
    b92e:	65 e0       	ldi	r22, 0x05	; 5
    b930:	70 e0       	ldi	r23, 0x00	; 0
    b932:	87 e1       	ldi	r24, 0x17	; 23
    b934:	90 e0       	ldi	r25, 0x00	; 0
    b936:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
    b93a:	8a ee       	ldi	r24, 0xEA	; 234
    b93c:	e8 2e       	mov	r14, r24
    b93e:	8b e0       	ldi	r24, 0x0B	; 11
    b940:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    b942:	c0 e0       	ldi	r28, 0x00	; 0
    b944:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    b946:	93 e0       	ldi	r25, 0x03	; 3
    b948:	a9 2e       	mov	r10, r25
    b94a:	b1 2c       	mov	r11, r1
    b94c:	67 01       	movw	r12, r14
    b94e:	ce 01       	movw	r24, r28
    b950:	b5 01       	movw	r22, r10
    b952:	0e 94 8b 61 	call	0xc316	; 0xc316 <__divmodhi4>
    b956:	4c 01       	movw	r8, r24
    b958:	8b 01       	movw	r16, r22
    b95a:	08 5f       	subi	r16, 0xF8	; 248
    b95c:	1f 4f       	sbci	r17, 0xFF	; 255
    b95e:	f7 01       	movw	r30, r14
    b960:	41 91       	ld	r20, Z+
    b962:	7f 01       	movw	r14, r30
    b964:	b8 01       	movw	r22, r16
    b966:	03 96       	adiw	r24, 0x03	; 3
    b968:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    b96c:	f6 01       	movw	r30, r12
    b96e:	40 81       	ld	r20, Z
    b970:	b8 01       	movw	r22, r16
    b972:	c4 01       	movw	r24, r8
    b974:	44 96       	adiw	r24, 0x14	; 20
    b976:	0e 94 05 48 	call	0x900a	; 0x900a <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, &strMap[strHandlesTitle]);
	Print(6, 5, &strMap[strPlayer1]);
	Print(23, 5, &strMap[strPlayer2]);
	for (int i = 0; i < 27; i += 1)
    b97a:	21 96       	adiw	r28, 0x01	; 1
    b97c:	cb 31       	cpi	r28, 0x1B	; 27
    b97e:	d1 05       	cpc	r29, r1
    b980:	29 f7       	brne	.-54     	; 0xb94c <load_handle_select+0x7c>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
    b982:	40 e9       	ldi	r20, 0x90	; 144
    b984:	51 e0       	ldi	r21, 0x01	; 1
    b986:	65 e1       	ldi	r22, 0x15	; 21
    b988:	70 e0       	ldi	r23, 0x00	; 0
    b98a:	88 e0       	ldi	r24, 0x08	; 8
    b98c:	90 e0       	ldi	r25, 0x00	; 0
    b98e:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(8, 22, &strMap[strConfirmHandle]);
    b992:	4b e9       	ldi	r20, 0x9B	; 155
    b994:	51 e0       	ldi	r21, 0x01	; 1
    b996:	66 e1       	ldi	r22, 0x16	; 22
    b998:	70 e0       	ldi	r23, 0x00	; 0
    b99a:	88 e0       	ldi	r24, 0x08	; 8
    b99c:	90 e0       	ldi	r25, 0x00	; 0
    b99e:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(8, 23, &strMap[strCancelHandle]);
    b9a2:	47 ea       	ldi	r20, 0xA7	; 167
    b9a4:	51 e0       	ldi	r21, 0x01	; 1
    b9a6:	67 e1       	ldi	r22, 0x17	; 23
    b9a8:	70 e0       	ldi	r23, 0x00	; 0
    b9aa:	88 e0       	ldi	r24, 0x08	; 8
    b9ac:	90 e0       	ldi	r25, 0x00	; 0
    b9ae:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>
	Print(8, 24, &strMap[strChangeHandle]);
    b9b2:	4b ec       	ldi	r20, 0xCB	; 203
    b9b4:	51 e0       	ldi	r21, 0x01	; 1
    b9b6:	68 e1       	ldi	r22, 0x18	; 24
    b9b8:	70 e0       	ldi	r23, 0x00	; 0
    b9ba:	88 e0       	ldi	r24, 0x08	; 8
    b9bc:	90 e0       	ldi	r25, 0x00	; 0
}
    b9be:	df 91       	pop	r29
    b9c0:	cf 91       	pop	r28
    b9c2:	1f 91       	pop	r17
    b9c4:	0f 91       	pop	r16
    b9c6:	ff 90       	pop	r15
    b9c8:	ef 90       	pop	r14
    b9ca:	df 90       	pop	r13
    b9cc:	cf 90       	pop	r12
    b9ce:	bf 90       	pop	r11
    b9d0:	af 90       	pop	r10
    b9d2:	9f 90       	pop	r9
    b9d4:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
	Print(8, 22, &strMap[strConfirmHandle]);
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
    b9d6:	0c 94 ea 47 	jmp	0x8fd4	; 0x8fd4 <Print>

0000b9da <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    b9da:	0f 93       	push	r16
    b9dc:	cf 93       	push	r28
    b9de:	df 93       	push	r29
    b9e0:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    b9e2:	90 91 0b 0c 	lds	r25, 0x0C0B
    b9e6:	91 30       	cpi	r25, 0x01	; 1
    b9e8:	41 f0       	breq	.+16     	; 0xb9fa <update_splash+0x20>
    b9ea:	92 30       	cpi	r25, 0x02	; 2
    b9ec:	51 f0       	breq	.+20     	; 0xba02 <update_splash+0x28>
    b9ee:	91 11       	cpse	r25, r1
    b9f0:	0f c0       	rjmp	.+30     	; 0xba10 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    b9f2:	01 e0       	ldi	r16, 0x01	; 1
    b9f4:	21 e0       	ldi	r18, 0x01	; 1
    b9f6:	48 e6       	ldi	r20, 0x68	; 104
    b9f8:	07 c0       	rjmp	.+14     	; 0xba08 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    b9fa:	01 e0       	ldi	r16, 0x01	; 1
    b9fc:	21 e0       	ldi	r18, 0x01	; 1
    b9fe:	40 e7       	ldi	r20, 0x70	; 112
    ba00:	03 c0       	rjmp	.+6      	; 0xba08 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    ba02:	01 e0       	ldi	r16, 0x01	; 1
    ba04:	21 e0       	ldi	r18, 0x01	; 1
    ba06:	48 e7       	ldi	r20, 0x78	; 120
    ba08:	60 e3       	ldi	r22, 0x30	; 48
    ba0a:	80 e0       	ldi	r24, 0x00	; 0
    ba0c:	0e 94 3a 47 	call	0x8e74	; 0x8e74 <MoveSprite>
			break;
	}
	Print(9, 21, &strMap[strSelectHandle]);
    ba10:	40 e9       	ldi	r20, 0x90	; 144
    ba12:	51 e0       	ldi	r21, 0x01	; 1
    ba14:	65 e1       	ldi	r22, 0x15	; 21
    ba16:	70 e0       	ldi	r23, 0x00	; 0
    ba18:	89 e0       	ldi	r24, 0x09	; 9
    ba1a:	90 e0       	ldi	r25, 0x00	; 0
    ba1c:	0e 94 ea 47 	call	0x8fd4	; 0x8fd4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    ba20:	88 81       	ld	r24, Y
    ba22:	99 81       	ldd	r25, Y+1	; 0x01
    ba24:	00 97       	sbiw	r24, 0x00	; 0
    ba26:	21 f0       	breq	.+8      	; 0xba30 <update_splash+0x56>
    ba28:	10 92 31 0b 	sts	0x0B31, r1
    ba2c:	10 92 30 0b 	sts	0x0B30, r1
	
	if (p1->pressed & BTN_UP)
    ba30:	84 ff       	sbrs	r24, 4
    ba32:	0e c0       	rjmp	.+28     	; 0xba50 <update_splash+0x76>
	{
		game.selection--;
    ba34:	80 91 0b 0c 	lds	r24, 0x0C0B
    ba38:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    ba3a:	87 ff       	sbrs	r24, 7
    ba3c:	11 c0       	rjmp	.+34     	; 0xba60 <update_splash+0x86>
    ba3e:	10 92 0b 0c 	sts	0x0C0B, r1
		SFX_NAVIGATE;
    ba42:	2f ef       	ldi	r18, 0xFF	; 255
    ba44:	47 e1       	ldi	r20, 0x17	; 23
    ba46:	67 e0       	ldi	r22, 0x07	; 7
    ba48:	84 e0       	ldi	r24, 0x04	; 4
    ba4a:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
    ba4e:	6f c0       	rjmp	.+222    	; 0xbb2e <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    ba50:	85 ff       	sbrs	r24, 5
    ba52:	09 c0       	rjmp	.+18     	; 0xba66 <update_splash+0x8c>
	{
		game.selection++;
    ba54:	80 91 0b 0c 	lds	r24, 0x0C0B
    ba58:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    ba5a:	83 30       	cpi	r24, 0x03	; 3
    ba5c:	0c f0       	brlt	.+2      	; 0xba60 <update_splash+0x86>
    ba5e:	82 e0       	ldi	r24, 0x02	; 2
    ba60:	80 93 0b 0c 	sts	0x0C0B, r24
    ba64:	ee cf       	rjmp	.-36     	; 0xba42 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    ba66:	90 ff       	sbrs	r25, 0
    ba68:	2c c0       	rjmp	.+88     	; 0xbac2 <update_splash+0xe8>
    ba6a:	80 91 0b 0c 	lds	r24, 0x0C0B
    ba6e:	82 30       	cpi	r24, 0x02	; 2
    ba70:	a8 f4       	brcc	.+42     	; 0xba9c <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    ba72:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    ba76:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    ba7a:	2f ef       	ldi	r18, 0xFF	; 255
    ba7c:	47 e1       	ldi	r20, 0x17	; 23
    ba7e:	67 e0       	ldi	r22, 0x07	; 7
    ba80:	84 e0       	ldi	r24, 0x04	; 4
    ba82:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		fade_through();
    ba86:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		load_eeprom(&handles);
    ba8a:	88 ee       	ldi	r24, 0xE8	; 232
    ba8c:	9b e0       	ldi	r25, 0x0B	; 11
    ba8e:	0e 94 87 4b 	call	0x970e	; 0x970e <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    ba92:	df 91       	pop	r29
    ba94:	cf 91       	pop	r28
    ba96:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    ba98:	0c 94 68 5c 	jmp	0xb8d0	; 0xb8d0 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    ba9c:	82 30       	cpi	r24, 0x02	; 2
    ba9e:	89 f4       	brne	.+34     	; 0xbac2 <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    baa0:	2f ef       	ldi	r18, 0xFF	; 255
    baa2:	47 e1       	ldi	r20, 0x17	; 23
    baa4:	67 e0       	ldi	r22, 0x07	; 7
    baa6:	84 e0       	ldi	r24, 0x04	; 4
    baa8:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		fade_through();
    baac:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		load_eeprom(&scores);
    bab0:	81 ec       	ldi	r24, 0xC1	; 193
    bab2:	9b e0       	ldi	r25, 0x0B	; 11
    bab4:	0e 94 87 4b 	call	0x970e	; 0x970e <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    bab8:	df 91       	pop	r29
    baba:	cf 91       	pop	r28
    babc:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    babe:	0c 94 2c 57 	jmp	0xae58	; 0xae58 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    bac2:	80 91 30 0b 	lds	r24, 0x0B30
    bac6:	90 91 31 0b 	lds	r25, 0x0B31
    baca:	88 35       	cpi	r24, 0x58	; 88
    bacc:	92 40       	sbci	r25, 0x02	; 2
    bace:	78 f1       	brcs	.+94     	; 0xbb2e <update_splash+0x154>
	{
		demo_counter = 0;
    bad0:	10 92 31 0b 	sts	0x0B31, r1
    bad4:	10 92 30 0b 	sts	0x0B30, r1
		game.selection = CPUVCPU;
    bad8:	83 e0       	ldi	r24, 0x03	; 3
    bada:	80 93 0b 0c 	sts	0x0C0B, r24
		player1.handle_id = 9;
    bade:	c9 e0       	ldi	r28, 0x09	; 9
    bae0:	c0 93 30 0c 	sts	0x0C30, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    bae4:	43 e0       	ldi	r20, 0x03	; 3
    bae6:	65 e0       	ldi	r22, 0x05	; 5
    bae8:	7c e0       	ldi	r23, 0x0C	; 12
    baea:	81 e3       	ldi	r24, 0x31	; 49
    baec:	9c e0       	ldi	r25, 0x0C	; 12
    baee:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		player2.handle_id = 9;
    baf2:	c0 93 94 0f 	sts	0x0F94, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    baf6:	43 e0       	ldi	r20, 0x03	; 3
    baf8:	65 e0       	ldi	r22, 0x05	; 5
    bafa:	7c e0       	ldi	r23, 0x0C	; 12
    bafc:	85 e9       	ldi	r24, 0x95	; 149
    bafe:	9f e0       	ldi	r25, 0x0F	; 15
    bb00:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		SFX_NAVIGATE;
    bb04:	2f ef       	ldi	r18, 0xFF	; 255
    bb06:	47 e1       	ldi	r20, 0x17	; 23
    bb08:	67 e0       	ldi	r22, 0x07	; 7
    bb0a:	84 e0       	ldi	r24, 0x04	; 4
    bb0c:	0e 94 55 3d 	call	0x7aaa	; 0x7aaa <TriggerNote>
		clear_sprites();
    bb10:	0e 94 a3 4b 	call	0x9746	; 0x9746 <clear_sprites>
		fade_through();
    bb14:	0e 94 99 4b 	call	0x9732	; 0x9732 <fade_through>
		level_transition(LBRandom(0, 10));
    bb18:	6a e0       	ldi	r22, 0x0A	; 10
    bb1a:	70 e0       	ldi	r23, 0x00	; 0
    bb1c:	80 e0       	ldi	r24, 0x00	; 0
    bb1e:	90 e0       	ldi	r25, 0x00	; 0
    bb20:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    bb24:	df 91       	pop	r29
    bb26:	cf 91       	pop	r28
    bb28:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 10));
    bb2a:	0c 94 c6 56 	jmp	0xad8c	; 0xad8c <level_transition>
		return;
		
	}
	demo_counter++;
    bb2e:	80 91 30 0b 	lds	r24, 0x0B30
    bb32:	90 91 31 0b 	lds	r25, 0x0B31
    bb36:	01 96       	adiw	r24, 0x01	; 1
    bb38:	90 93 31 0b 	sts	0x0B31, r25
    bb3c:	80 93 30 0b 	sts	0x0B30, r24
}
    bb40:	df 91       	pop	r29
    bb42:	cf 91       	pop	r28
    bb44:	0f 91       	pop	r16
    bb46:	08 95       	ret

0000bb48 <update_handle_select>:
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    bb48:	0f 93       	push	r16
    bb4a:	1f 93       	push	r17
    bb4c:	cf 93       	push	r28
    bb4e:	df 93       	push	r29
    bb50:	8c 01       	movw	r16, r24
    bb52:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    bb54:	26 e0       	ldi	r18, 0x06	; 6
    bb56:	42 e0       	ldi	r20, 0x02	; 2
    bb58:	bc 01       	movw	r22, r24
    bb5a:	8a e2       	ldi	r24, 0x2A	; 42
    bb5c:	9b e0       	ldi	r25, 0x0B	; 11
    bb5e:	0e 94 aa 5b 	call	0xb754	; 0xb754 <_handle_select_render_helper>
	if (game.selection == PVP)
    bb62:	80 91 0b 0c 	lds	r24, 0x0C0B
    bb66:	81 30       	cpi	r24, 0x01	; 1
    bb68:	39 f4       	brne	.+14     	; 0xbb78 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    bb6a:	28 e0       	ldi	r18, 0x08	; 8
    bb6c:	43 e1       	ldi	r20, 0x13	; 19
    bb6e:	be 01       	movw	r22, r28
    bb70:	84 e2       	ldi	r24, 0x24	; 36
    bb72:	9b e0       	ldi	r25, 0x0B	; 11
    bb74:	0e 94 aa 5b 	call	0xb754	; 0xb754 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    bb78:	45 e2       	ldi	r20, 0x25	; 37
    bb7a:	5c e0       	ldi	r21, 0x0C	; 12
    bb7c:	b8 01       	movw	r22, r16
    bb7e:	8a e2       	ldi	r24, 0x2A	; 42
    bb80:	9b e0       	ldi	r25, 0x0B	; 11
    bb82:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    bb86:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    bb8a:	80 91 0b 0c 	lds	r24, 0x0C0B
    bb8e:	81 30       	cpi	r24, 0x01	; 1
    bb90:	19 f0       	breq	.+6      	; 0xbb98 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    bb92:	12 30       	cpi	r17, 0x02	; 2
    bb94:	69 f0       	breq	.+26     	; 0xbbb0 <update_handle_select+0x68>
    bb96:	21 c0       	rjmp	.+66     	; 0xbbda <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    bb98:	49 e8       	ldi	r20, 0x89	; 137
    bb9a:	5f e0       	ldi	r21, 0x0F	; 15
    bb9c:	be 01       	movw	r22, r28
    bb9e:	84 e2       	ldi	r24, 0x24	; 36
    bba0:	9b e0       	ldi	r25, 0x0B	; 11
    bba2:	0e 94 e5 5a 	call	0xb5ca	; 0xb5ca <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    bba6:	80 91 29 0b 	lds	r24, 0x0B29
    bbaa:	82 30       	cpi	r24, 0x02	; 2
    bbac:	b1 f4       	brne	.+44     	; 0xbbda <update_handle_select+0x92>
    bbae:	f1 cf       	rjmp	.-30     	; 0xbb92 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    bbb0:	80 91 0b 0c 	lds	r24, 0x0C0B
    bbb4:	81 11       	cpse	r24, r1
    bbb6:	0a c0       	rjmp	.+20     	; 0xbbcc <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    bbb8:	89 e0       	ldi	r24, 0x09	; 9
    bbba:	80 93 94 0f 	sts	0x0F94, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    bbbe:	43 e0       	ldi	r20, 0x03	; 3
    bbc0:	65 e0       	ldi	r22, 0x05	; 5
    bbc2:	7c e0       	ldi	r23, 0x0C	; 12
    bbc4:	85 e9       	ldi	r24, 0x95	; 149
    bbc6:	9f e0       	ldi	r25, 0x0F	; 15
    bbc8:	0e 94 dc 48 	call	0x91b8	; 0x91b8 <LBCopyChars>
		}
		level_transition(0);
    bbcc:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    bbce:	df 91       	pop	r29
    bbd0:	cf 91       	pop	r28
    bbd2:	1f 91       	pop	r17
    bbd4:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    bbd6:	0c 94 c6 56 	jmp	0xad8c	; 0xad8c <level_transition>
	}
}
    bbda:	df 91       	pop	r29
    bbdc:	cf 91       	pop	r28
    bbde:	1f 91       	pop	r17
    bbe0:	0f 91       	pop	r16
    bbe2:	08 95       	ret

0000bbe4 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    bbe4:	00 97       	sbiw	r24, 0x00	; 0
    bbe6:	41 f0       	breq	.+16     	; 0xbbf8 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    bbe8:	81 30       	cpi	r24, 0x01	; 1
    bbea:	91 05       	cpc	r25, r1
    bbec:	41 f0       	breq	.+16     	; 0xbbfe <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    bbee:	82 30       	cpi	r24, 0x02	; 2
    bbf0:	91 05       	cpc	r25, r1
    bbf2:	41 f0       	breq	.+16     	; 0xbc04 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    bbf4:	03 97       	sbiw	r24, 0x03	; 3
    bbf6:	49 f0       	breq	.+18     	; 0xbc0a <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    bbf8:	80 e1       	ldi	r24, 0x10	; 16
    bbfa:	90 e0       	ldi	r25, 0x00	; 0
    bbfc:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    bbfe:	80 e2       	ldi	r24, 0x20	; 32
    bc00:	90 e0       	ldi	r25, 0x00	; 0
    bc02:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    bc04:	80 e4       	ldi	r24, 0x40	; 64
    bc06:	90 e0       	ldi	r25, 0x00	; 0
    bc08:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    bc0a:	80 e8       	ldi	r24, 0x80	; 128
    bc0c:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    bc0e:	08 95       	ret

0000bc10 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    bc10:	8f 92       	push	r8
    bc12:	9f 92       	push	r9
    bc14:	af 92       	push	r10
    bc16:	bf 92       	push	r11
    bc18:	cf 92       	push	r12
    bc1a:	df 92       	push	r13
    bc1c:	ef 92       	push	r14
    bc1e:	ff 92       	push	r15
    bc20:	0f 93       	push	r16
    bc22:	1f 93       	push	r17
    bc24:	cf 93       	push	r28
    bc26:	df 93       	push	r29
    bc28:	e8 2e       	mov	r14, r24
    bc2a:	d6 2e       	mov	r13, r22
    bc2c:	f4 2e       	mov	r15, r20
    bc2e:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    bc30:	8b 8d       	ldd	r24, Y+27	; 0x1b
    bc32:	88 23       	and	r24, r24
    bc34:	09 f4       	brne	.+2      	; 0xbc38 <crash_and_turn+0x28>
    bc36:	a8 c0       	rjmp	.+336    	; 0xbd88 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    bc38:	f8 01       	movw	r30, r16
    bc3a:	c4 80       	ldd	r12, Z+4	; 0x04
    bc3c:	c4 fe       	sbrs	r12, 4
    bc3e:	23 c0       	rjmp	.+70     	; 0xbc86 <crash_and_turn+0x76>
    bc40:	fe e1       	ldi	r31, 0x1E	; 30
    bc42:	6f 02       	muls	r22, r31
    bc44:	40 01       	movw	r8, r0
    bc46:	11 24       	eor	r1, r1
    bc48:	ae 2c       	mov	r10, r14
    bc4a:	bb 24       	eor	r11, r11
    bc4c:	a7 fc       	sbrc	r10, 7
    bc4e:	b0 94       	com	r11
    bc50:	c4 01       	movw	r24, r8
    bc52:	8a 0d       	add	r24, r10
    bc54:	9b 1d       	adc	r25, r11
    bc56:	01 97       	sbiw	r24, 0x01	; 1
    bc58:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bc5c:	81 11       	cpse	r24, r1
    bc5e:	13 c0       	rjmp	.+38     	; 0xbc86 <crash_and_turn+0x76>
    bc60:	c4 01       	movw	r24, r8
    bc62:	8a 0d       	add	r24, r10
    bc64:	9b 1d       	adc	r25, r11
    bc66:	4d 96       	adiw	r24, 0x1d	; 29
    bc68:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bc6c:	81 11       	cpse	r24, r1
    bc6e:	0b c0       	rjmp	.+22     	; 0xbc86 <crash_and_turn+0x76>
    bc70:	c4 01       	movw	r24, r8
    bc72:	8a 0d       	add	r24, r10
    bc74:	9b 1d       	adc	r25, r11
    bc76:	cb 96       	adiw	r24, 0x3b	; 59
    bc78:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bc7c:	81 11       	cpse	r24, r1
    bc7e:	03 c0       	rjmp	.+6      	; 0xbc86 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    bc80:	80 e4       	ldi	r24, 0x40	; 64
    bc82:	90 e0       	ldi	r25, 0x00	; 0
    bc84:	6f c0       	rjmp	.+222    	; 0xbd64 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    bc86:	c6 fe       	sbrs	r12, 6
    bc88:	23 c0       	rjmp	.+70     	; 0xbcd0 <crash_and_turn+0xc0>
    bc8a:	8d 2d       	mov	r24, r13
    bc8c:	99 27       	eor	r25, r25
    bc8e:	87 fd       	sbrc	r24, 7
    bc90:	90 95       	com	r25
    bc92:	02 96       	adiw	r24, 0x02	; 2
    bc94:	2e e1       	ldi	r18, 0x1E	; 30
    bc96:	28 9f       	mul	r18, r24
    bc98:	50 01       	movw	r10, r0
    bc9a:	29 9f       	mul	r18, r25
    bc9c:	b0 0c       	add	r11, r0
    bc9e:	11 24       	eor	r1, r1
    bca0:	ae 0c       	add	r10, r14
    bca2:	b1 1c       	adc	r11, r1
    bca4:	e7 fc       	sbrc	r14, 7
    bca6:	ba 94       	dec	r11
    bca8:	c5 01       	movw	r24, r10
    bcaa:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bcae:	81 11       	cpse	r24, r1
    bcb0:	0f c0       	rjmp	.+30     	; 0xbcd0 <crash_and_turn+0xc0>
    bcb2:	c5 01       	movw	r24, r10
    bcb4:	01 96       	adiw	r24, 0x01	; 1
    bcb6:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bcba:	81 11       	cpse	r24, r1
    bcbc:	09 c0       	rjmp	.+18     	; 0xbcd0 <crash_and_turn+0xc0>
    bcbe:	c5 01       	movw	r24, r10
    bcc0:	02 96       	adiw	r24, 0x02	; 2
    bcc2:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bcc6:	81 11       	cpse	r24, r1
    bcc8:	03 c0       	rjmp	.+6      	; 0xbcd0 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    bcca:	80 e2       	ldi	r24, 0x20	; 32
    bccc:	90 e0       	ldi	r25, 0x00	; 0
    bcce:	4a c0       	rjmp	.+148    	; 0xbd64 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    bcd0:	c5 fe       	sbrs	r12, 5
    bcd2:	24 c0       	rjmp	.+72     	; 0xbd1c <crash_and_turn+0x10c>
    bcd4:	fd 2d       	mov	r31, r13
    bcd6:	8e e1       	ldi	r24, 0x1E	; 30
    bcd8:	f8 02       	muls	r31, r24
    bcda:	40 01       	movw	r8, r0
    bcdc:	11 24       	eor	r1, r1
    bcde:	ae 2c       	mov	r10, r14
    bce0:	bb 24       	eor	r11, r11
    bce2:	a7 fc       	sbrc	r10, 7
    bce4:	b0 94       	com	r11
    bce6:	c4 01       	movw	r24, r8
    bce8:	8a 0d       	add	r24, r10
    bcea:	9b 1d       	adc	r25, r11
    bcec:	02 96       	adiw	r24, 0x02	; 2
    bcee:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bcf2:	81 11       	cpse	r24, r1
    bcf4:	13 c0       	rjmp	.+38     	; 0xbd1c <crash_and_turn+0x10c>
    bcf6:	c4 01       	movw	r24, r8
    bcf8:	8a 0d       	add	r24, r10
    bcfa:	9b 1d       	adc	r25, r11
    bcfc:	80 96       	adiw	r24, 0x20	; 32
    bcfe:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bd02:	81 11       	cpse	r24, r1
    bd04:	0b c0       	rjmp	.+22     	; 0xbd1c <crash_and_turn+0x10c>
    bd06:	c4 01       	movw	r24, r8
    bd08:	8a 0d       	add	r24, r10
    bd0a:	9b 1d       	adc	r25, r11
    bd0c:	ce 96       	adiw	r24, 0x3e	; 62
    bd0e:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bd12:	81 11       	cpse	r24, r1
    bd14:	03 c0       	rjmp	.+6      	; 0xbd1c <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    bd16:	80 e8       	ldi	r24, 0x80	; 128
    bd18:	90 e0       	ldi	r25, 0x00	; 0
    bd1a:	24 c0       	rjmp	.+72     	; 0xbd64 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    bd1c:	c7 fe       	sbrs	r12, 7
    bd1e:	29 c0       	rjmp	.+82     	; 0xbd72 <crash_and_turn+0x162>
    bd20:	8d 2d       	mov	r24, r13
    bd22:	99 27       	eor	r25, r25
    bd24:	87 fd       	sbrc	r24, 7
    bd26:	90 95       	com	r25
    bd28:	01 97       	sbiw	r24, 0x01	; 1
    bd2a:	2e e1       	ldi	r18, 0x1E	; 30
    bd2c:	28 9f       	mul	r18, r24
    bd2e:	50 01       	movw	r10, r0
    bd30:	29 9f       	mul	r18, r25
    bd32:	b0 0c       	add	r11, r0
    bd34:	11 24       	eor	r1, r1
    bd36:	ae 0c       	add	r10, r14
    bd38:	b1 1c       	adc	r11, r1
    bd3a:	e7 fc       	sbrc	r14, 7
    bd3c:	ba 94       	dec	r11
    bd3e:	c5 01       	movw	r24, r10
    bd40:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bd44:	81 11       	cpse	r24, r1
    bd46:	15 c0       	rjmp	.+42     	; 0xbd72 <crash_and_turn+0x162>
    bd48:	c5 01       	movw	r24, r10
    bd4a:	01 96       	adiw	r24, 0x01	; 1
    bd4c:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bd50:	81 11       	cpse	r24, r1
    bd52:	0f c0       	rjmp	.+30     	; 0xbd72 <crash_and_turn+0x162>
    bd54:	c5 01       	movw	r24, r10
    bd56:	02 96       	adiw	r24, 0x02	; 2
    bd58:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <solid_tile>
    bd5c:	81 11       	cpse	r24, r1
    bd5e:	09 c0       	rjmp	.+18     	; 0xbd72 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    bd60:	80 e1       	ldi	r24, 0x10	; 16
    bd62:	90 e0       	ldi	r25, 0x00	; 0
    bd64:	f8 01       	movw	r30, r16
    bd66:	95 83       	std	Z+5, r25	; 0x05
    bd68:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    bd6a:	ce 01       	movw	r24, r28
    bd6c:	0e 94 d0 4e 	call	0x9da0	; 0x9da0 <recoil_sprite>
			recoiled = 0;
    bd70:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    bd72:	f8 01       	movw	r30, r16
    bd74:	24 81       	ldd	r18, Z+4	; 0x04
    bd76:	35 81       	ldd	r19, Z+5	; 0x05
    bd78:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bd7a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bd7c:	82 23       	and	r24, r18
    bd7e:	93 23       	and	r25, r19
    bd80:	89 2b       	or	r24, r25
    bd82:	11 f0       	breq	.+4      	; 0xbd88 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    bd84:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    bd86:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    bd88:	f8 01       	movw	r30, r16
    bd8a:	84 81       	ldd	r24, Z+4	; 0x04
    bd8c:	86 ff       	sbrs	r24, 6
    bd8e:	05 c0       	rjmp	.+10     	; 0xbd9a <crash_and_turn+0x18a>
    bd90:	ff 20       	and	r15, r15
    bd92:	19 f0       	breq	.+6      	; 0xbd9a <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    bd94:	80 e1       	ldi	r24, 0x10	; 16
    bd96:	90 e0       	ldi	r25, 0x00	; 0
    bd98:	15 c0       	rjmp	.+42     	; 0xbdc4 <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    bd9a:	84 ff       	sbrs	r24, 4
    bd9c:	05 c0       	rjmp	.+10     	; 0xbda8 <crash_and_turn+0x198>
    bd9e:	ff 20       	and	r15, r15
    bda0:	19 f0       	breq	.+6      	; 0xbda8 <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    bda2:	80 e8       	ldi	r24, 0x80	; 128
    bda4:	90 e0       	ldi	r25, 0x00	; 0
    bda6:	0d c0       	rjmp	.+26     	; 0xbdc2 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    bda8:	87 ff       	sbrs	r24, 7
    bdaa:	05 c0       	rjmp	.+10     	; 0xbdb6 <crash_and_turn+0x1a6>
    bdac:	ff 20       	and	r15, r15
    bdae:	19 f0       	breq	.+6      	; 0xbdb6 <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    bdb0:	80 e2       	ldi	r24, 0x20	; 32
    bdb2:	90 e0       	ldi	r25, 0x00	; 0
    bdb4:	06 c0       	rjmp	.+12     	; 0xbdc2 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    bdb6:	85 ff       	sbrs	r24, 5
    bdb8:	09 c0       	rjmp	.+18     	; 0xbdcc <crash_and_turn+0x1bc>
    bdba:	ff 20       	and	r15, r15
    bdbc:	39 f0       	breq	.+14     	; 0xbdcc <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    bdbe:	80 e4       	ldi	r24, 0x40	; 64
    bdc0:	90 e0       	ldi	r25, 0x00	; 0
    bdc2:	f8 01       	movw	r30, r16
    bdc4:	95 83       	std	Z+5, r25	; 0x05
    bdc6:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    bdc8:	81 e0       	ldi	r24, 0x01	; 1
    bdca:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bdcc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    bdce:	9d 8d       	ldd	r25, Y+29	; 0x1d
    bdd0:	80 31       	cpi	r24, 0x10	; 16
    bdd2:	91 05       	cpc	r25, r1
    bdd4:	19 f0       	breq	.+6      	; 0xbddc <crash_and_turn+0x1cc>
    bdd6:	80 32       	cpi	r24, 0x20	; 32
    bdd8:	91 05       	cpc	r25, r1
    bdda:	19 f4       	brne	.+6      	; 0xbde2 <crash_and_turn+0x1d2>
    bddc:	2a a1       	ldd	r18, Y+34	; 0x22
    bdde:	d2 16       	cp	r13, r18
    bde0:	59 f0       	breq	.+22     	; 0xbdf8 <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    bde2:	80 34       	cpi	r24, 0x40	; 64
    bde4:	91 05       	cpc	r25, r1
    bde6:	19 f0       	breq	.+6      	; 0xbdee <crash_and_turn+0x1de>
    bde8:	80 38       	cpi	r24, 0x80	; 128
    bdea:	91 05       	cpc	r25, r1
    bdec:	39 f4       	brne	.+14     	; 0xbdfc <crash_and_turn+0x1ec>
    bdee:	81 e0       	ldi	r24, 0x01	; 1
    bdf0:	9a a1       	ldd	r25, Y+34	; 0x22
    bdf2:	e9 12       	cpse	r14, r25
    bdf4:	03 c0       	rjmp	.+6      	; 0xbdfc <crash_and_turn+0x1ec>
    bdf6:	03 c0       	rjmp	.+6      	; 0xbdfe <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    bdf8:	81 e0       	ldi	r24, 0x01	; 1
    bdfa:	01 c0       	rjmp	.+2      	; 0xbdfe <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    bdfc:	80 e0       	ldi	r24, 0x00	; 0
}
    bdfe:	df 91       	pop	r29
    be00:	cf 91       	pop	r28
    be02:	1f 91       	pop	r17
    be04:	0f 91       	pop	r16
    be06:	ff 90       	pop	r15
    be08:	ef 90       	pop	r14
    be0a:	df 90       	pop	r13
    be0c:	cf 90       	pop	r12
    be0e:	bf 90       	pop	r11
    be10:	af 90       	pop	r10
    be12:	9f 90       	pop	r9
    be14:	8f 90       	pop	r8
    be16:	08 95       	ret

0000be18 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    be18:	48 2f       	mov	r20, r24
    be1a:	55 27       	eor	r21, r21
    be1c:	47 fd       	sbrc	r20, 7
    be1e:	50 95       	com	r21
    be20:	57 ff       	sbrs	r21, 7
    be22:	03 c0       	rjmp	.+6      	; 0xbe2a <get_cpu_goal_direction+0x12>
    be24:	51 95       	neg	r21
    be26:	41 95       	neg	r20
    be28:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    be2a:	26 2f       	mov	r18, r22
    be2c:	33 27       	eor	r19, r19
    be2e:	27 fd       	sbrc	r18, 7
    be30:	30 95       	com	r19
    be32:	37 ff       	sbrs	r19, 7
    be34:	03 c0       	rjmp	.+6      	; 0xbe3c <get_cpu_goal_direction+0x24>
    be36:	31 95       	neg	r19
    be38:	21 95       	neg	r18
    be3a:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    be3c:	24 17       	cp	r18, r20
    be3e:	2c f4       	brge	.+10     	; 0xbe4a <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    be40:	18 16       	cp	r1, r24
    be42:	44 f4       	brge	.+16     	; 0xbe54 <get_cpu_goal_direction+0x3c>
    be44:	80 e8       	ldi	r24, 0x80	; 128
    be46:	90 e0       	ldi	r25, 0x00	; 0
    be48:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    be4a:	16 16       	cp	r1, r22
    be4c:	34 f4       	brge	.+12     	; 0xbe5a <get_cpu_goal_direction+0x42>
    be4e:	80 e2       	ldi	r24, 0x20	; 32
    be50:	90 e0       	ldi	r25, 0x00	; 0
    be52:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    be54:	80 e4       	ldi	r24, 0x40	; 64
    be56:	90 e0       	ldi	r25, 0x00	; 0
    be58:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    be5a:	80 e1       	ldi	r24, 0x10	; 16
    be5c:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    be5e:	08 95       	ret

0000be60 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    be60:	2f 92       	push	r2
    be62:	3f 92       	push	r3
    be64:	4f 92       	push	r4
    be66:	5f 92       	push	r5
    be68:	6f 92       	push	r6
    be6a:	7f 92       	push	r7
    be6c:	8f 92       	push	r8
    be6e:	9f 92       	push	r9
    be70:	af 92       	push	r10
    be72:	bf 92       	push	r11
    be74:	cf 92       	push	r12
    be76:	df 92       	push	r13
    be78:	ef 92       	push	r14
    be7a:	ff 92       	push	r15
    be7c:	0f 93       	push	r16
    be7e:	1f 93       	push	r17
    be80:	cf 93       	push	r28
    be82:	df 93       	push	r29
    be84:	00 d0       	rcall	.+0      	; 0xbe86 <get_cpu_joypad_state+0x26>
    be86:	00 d0       	rcall	.+0      	; 0xbe88 <get_cpu_joypad_state+0x28>
    be88:	00 d0       	rcall	.+0      	; 0xbe8a <get_cpu_joypad_state+0x2a>
    be8a:	cd b7       	in	r28, 0x3d	; 61
    be8c:	de b7       	in	r29, 0x3e	; 62
    be8e:	1c 01       	movw	r2, r24
    be90:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    be92:	db 01       	movw	r26, r22
    be94:	13 96       	adiw	r26, 0x03	; 3
    be96:	8d 91       	ld	r24, X+
    be98:	9d 91       	ld	r25, X+
    be9a:	0d 90       	ld	r0, X+
    be9c:	bc 91       	ld	r27, X
    be9e:	a0 2d       	mov	r26, r0
    bea0:	89 83       	std	Y+1, r24	; 0x01
    bea2:	9a 83       	std	Y+2, r25	; 0x02
    bea4:	ab 83       	std	Y+3, r26	; 0x03
    bea6:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    bea8:	fb 01       	movw	r30, r22
    beaa:	47 80       	ldd	r4, Z+7	; 0x07
    beac:	50 84       	ldd	r5, Z+8	; 0x08
    beae:	61 84       	ldd	r6, Z+9	; 0x09
    beb0:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    beb2:	d1 01       	movw	r26, r2
    beb4:	13 96       	adiw	r26, 0x03	; 3
    beb6:	8d 90       	ld	r8, X+
    beb8:	9d 90       	ld	r9, X+
    beba:	ad 90       	ld	r10, X+
    bebc:	bc 90       	ld	r11, X
    bebe:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    bec0:	17 96       	adiw	r26, 0x07	; 7
    bec2:	cd 90       	ld	r12, X+
    bec4:	dd 90       	ld	r13, X+
    bec6:	ed 90       	ld	r14, X+
    bec8:	fc 90       	ld	r15, X
    beca:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    becc:	57 96       	adiw	r26, 0x17	; 23
    bece:	8c 91       	ld	r24, X
    bed0:	81 11       	cpse	r24, r1
    bed2:	04 c0       	rjmp	.+8      	; 0xbedc <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    bed4:	fa 01       	movw	r30, r20
    bed6:	15 82       	std	Z+5, r1	; 0x05
    bed8:	14 82       	std	Z+4, r1	; 0x04
		return;
    beda:	4e c1       	rjmp	.+668    	; 0xc178 <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    bedc:	da 01       	movw	r26, r20
    bede:	8d 91       	ld	r24, X+
    bee0:	9c 91       	ld	r25, X
    bee2:	11 97       	sbiw	r26, 0x01	; 1
    bee4:	90 ff       	sbrs	r25, 0
    bee6:	02 c0       	rjmp	.+4      	; 0xbeec <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    bee8:	1d 92       	st	X+, r1
    beea:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    beec:	20 91 04 01 	lds	r18, 0x0104
    bef0:	30 91 05 01 	lds	r19, 0x0105
    bef4:	c9 01       	movw	r24, r18
    bef6:	6a e0       	ldi	r22, 0x0A	; 10
    bef8:	70 e0       	ldi	r23, 0x00	; 0
    befa:	0e 94 77 61 	call	0xc2ee	; 0xc2ee <__udivmodhi4>
    befe:	89 2b       	or	r24, r25
    bf00:	49 f4       	brne	.+18     	; 0xbf14 <get_cpu_joypad_state+0xb4>
    bf02:	f1 01       	movw	r30, r2
    bf04:	87 89       	ldd	r24, Z+23	; 0x17
    bf06:	83 33       	cpi	r24, 0x33	; 51
    bf08:	28 f0       	brcs	.+10     	; 0xbf14 <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    bf0a:	80 e0       	ldi	r24, 0x00	; 0
    bf0c:	91 e0       	ldi	r25, 0x01	; 1
    bf0e:	d8 01       	movw	r26, r16
    bf10:	8d 93       	st	X+, r24
    bf12:	9c 93       	st	X, r25
    bf14:	3e 82       	std	Y+6, r3	; 0x06
    bf16:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    bf18:	c9 01       	movw	r24, r18
    bf1a:	64 eb       	ldi	r22, 0xB4	; 180
    bf1c:	70 e0       	ldi	r23, 0x00	; 0
    bf1e:	0e 94 77 61 	call	0xc2ee	; 0xc2ee <__udivmodhi4>
    bf22:	89 2b       	or	r24, r25
    bf24:	41 f0       	breq	.+16     	; 0xbf36 <get_cpu_joypad_state+0xd6>
    bf26:	f1 01       	movw	r30, r2
    bf28:	87 89       	ldd	r24, Z+23	; 0x17
    bf2a:	8a 30       	cpi	r24, 0x0A	; 10
    bf2c:	21 f0       	breq	.+8      	; 0xbf36 <get_cpu_joypad_state+0xd6>
    bf2e:	83 a1       	ldd	r24, Z+35	; 0x23
    bf30:	88 23       	and	r24, r24
    bf32:	09 f4       	brne	.+2      	; 0xbf36 <get_cpu_joypad_state+0xd6>
    bf34:	7e c0       	rjmp	.+252    	; 0xc032 <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    bf36:	20 e0       	ldi	r18, 0x00	; 0
    bf38:	30 e0       	ldi	r19, 0x00	; 0
    bf3a:	40 e0       	ldi	r20, 0x00	; 0
    bf3c:	5e e3       	ldi	r21, 0x3E	; 62
    bf3e:	69 81       	ldd	r22, Y+1	; 0x01
    bf40:	7a 81       	ldd	r23, Y+2	; 0x02
    bf42:	8b 81       	ldd	r24, Y+3	; 0x03
    bf44:	9c 81       	ldd	r25, Y+4	; 0x04
    bf46:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    bf4a:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
    bf4e:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    bf50:	20 e0       	ldi	r18, 0x00	; 0
    bf52:	30 e0       	ldi	r19, 0x00	; 0
    bf54:	40 e0       	ldi	r20, 0x00	; 0
    bf56:	5e e3       	ldi	r21, 0x3E	; 62
    bf58:	c3 01       	movw	r24, r6
    bf5a:	b2 01       	movw	r22, r4
    bf5c:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    bf60:	20 e0       	ldi	r18, 0x00	; 0
    bf62:	30 e0       	ldi	r19, 0x00	; 0
    bf64:	40 e4       	ldi	r20, 0x40	; 64
    bf66:	50 e4       	ldi	r21, 0x40	; 64
    bf68:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    bf6c:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
    bf70:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    bf72:	20 e0       	ldi	r18, 0x00	; 0
    bf74:	30 e0       	ldi	r19, 0x00	; 0
    bf76:	40 e0       	ldi	r20, 0x00	; 0
    bf78:	5e e3       	ldi	r21, 0x3E	; 62
    bf7a:	c5 01       	movw	r24, r10
    bf7c:	b4 01       	movw	r22, r8
    bf7e:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    bf82:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    bf86:	b3 2c       	mov	r11, r3
    bf88:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    bf8a:	20 e0       	ldi	r18, 0x00	; 0
    bf8c:	30 e0       	ldi	r19, 0x00	; 0
    bf8e:	40 e0       	ldi	r20, 0x00	; 0
    bf90:	5e e3       	ldi	r21, 0x3E	; 62
    bf92:	c7 01       	movw	r24, r14
    bf94:	b6 01       	movw	r22, r12
    bf96:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    bf9a:	20 e0       	ldi	r18, 0x00	; 0
    bf9c:	30 e0       	ldi	r19, 0x00	; 0
    bf9e:	40 e4       	ldi	r20, 0x40	; 64
    bfa0:	50 e4       	ldi	r21, 0x40	; 64
    bfa2:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    bfa6:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    bfaa:	f7 2d       	mov	r31, r7
    bfac:	f6 1b       	sub	r31, r22
    bfae:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    bfb0:	ad 81       	ldd	r26, Y+5	; 0x05
    bfb2:	be 81       	ldd	r27, Y+6	; 0x06
    bfb4:	93 96       	adiw	r26, 0x23	; 35
    bfb6:	1c 92       	st	X, r1
    bfb8:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    bfba:	5b 96       	adiw	r26, 0x1b	; 27
    bfbc:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    bfbe:	82 e0       	ldi	r24, 0x02	; 2
    bfc0:	8b 0d       	add	r24, r11
    bfc2:	85 30       	cpi	r24, 0x05	; 5
    bfc4:	d8 f4       	brcc	.+54     	; 0xbffc <get_cpu_joypad_state+0x19c>
    bfc6:	fe 3f       	cpi	r31, 0xFE	; 254
    bfc8:	cc f0       	brlt	.+50     	; 0xbffc <get_cpu_joypad_state+0x19c>
    bfca:	f3 30       	cpi	r31, 0x03	; 3
    bfcc:	bc f4       	brge	.+46     	; 0xbffc <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    bfce:	64 e0       	ldi	r22, 0x04	; 4
    bfd0:	70 e0       	ldi	r23, 0x00	; 0
    bfd2:	80 e0       	ldi	r24, 0x00	; 0
    bfd4:	90 e0       	ldi	r25, 0x00	; 0
    bfd6:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
    bfda:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <button_map>
    bfde:	ed 81       	ldd	r30, Y+5	; 0x05
    bfe0:	fe 81       	ldd	r31, Y+6	; 0x06
    bfe2:	95 8f       	std	Z+29, r25	; 0x1d
    bfe4:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    bfe6:	62 e1       	ldi	r22, 0x12	; 18
    bfe8:	70 e0       	ldi	r23, 0x00	; 0
    bfea:	85 e0       	ldi	r24, 0x05	; 5
    bfec:	90 e0       	ldi	r25, 0x00	; 0
    bfee:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
    bff2:	ad 81       	ldd	r26, Y+5	; 0x05
    bff4:	be 81       	ldd	r27, Y+6	; 0x06
    bff6:	92 96       	adiw	r26, 0x22	; 34
    bff8:	8c 93       	st	X, r24
    bffa:	12 c0       	rjmp	.+36     	; 0xc020 <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    bffc:	8b 2d       	mov	r24, r11
    bffe:	0e 94 0c 5f 	call	0xbe18	; 0xbe18 <get_cpu_goal_direction>
    c002:	ed 81       	ldd	r30, Y+5	; 0x05
    c004:	fe 81       	ldd	r31, Y+6	; 0x06
    c006:	95 8f       	std	Z+29, r25	; 0x1d
    c008:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c00a:	80 31       	cpi	r24, 0x10	; 16
    c00c:	91 05       	cpc	r25, r1
    c00e:	21 f0       	breq	.+8      	; 0xc018 <get_cpu_joypad_state+0x1b8>
    c010:	80 97       	sbiw	r24, 0x20	; 32
    c012:	11 f0       	breq	.+4      	; 0xc018 <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    c014:	32 a2       	std	Z+34, r3	; 0x22
    c016:	04 c0       	rjmp	.+8      	; 0xc020 <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c018:	ad 81       	ldd	r26, Y+5	; 0x05
    c01a:	be 81       	ldd	r27, Y+6	; 0x06
    c01c:	92 96       	adiw	r26, 0x22	; 34
    c01e:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    c020:	ed 81       	ldd	r30, Y+5	; 0x05
    c022:	fe 81       	ldd	r31, Y+6	; 0x06
    c024:	84 8d       	ldd	r24, Z+28	; 0x1c
    c026:	95 8d       	ldd	r25, Z+29	; 0x1d
    c028:	d8 01       	movw	r26, r16
    c02a:	15 96       	adiw	r26, 0x05	; 5
    c02c:	9c 93       	st	X, r25
    c02e:	8e 93       	st	-X, r24
    c030:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    c032:	ed 81       	ldd	r30, Y+5	; 0x05
    c034:	fe 81       	ldd	r31, Y+6	; 0x06
    c036:	c3 80       	ldd	r12, Z+3	; 0x03
    c038:	d4 80       	ldd	r13, Z+4	; 0x04
    c03a:	e5 80       	ldd	r14, Z+5	; 0x05
    c03c:	f6 80       	ldd	r15, Z+6	; 0x06
    c03e:	24 a1       	ldd	r18, Z+36	; 0x24
    c040:	35 a1       	ldd	r19, Z+37	; 0x25
    c042:	46 a1       	ldd	r20, Z+38	; 0x26
    c044:	57 a1       	ldd	r21, Z+39	; 0x27
    c046:	c7 01       	movw	r24, r14
    c048:	b6 01       	movw	r22, r12
    c04a:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    c04e:	88 23       	and	r24, r24
    c050:	39 f0       	breq	.+14     	; 0xc060 <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    c052:	ad 81       	ldd	r26, Y+5	; 0x05
    c054:	be 81       	ldd	r27, Y+6	; 0x06
    c056:	5f 96       	adiw	r26, 0x1f	; 31
    c058:	1c 92       	st	X, r1
    c05a:	1e 92       	st	-X, r1
    c05c:	5e 97       	sbiw	r26, 0x1e	; 30
    c05e:	07 c0       	rjmp	.+14     	; 0xc06e <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    c060:	ed 81       	ldd	r30, Y+5	; 0x05
    c062:	fe 81       	ldd	r31, Y+6	; 0x06
    c064:	86 8d       	ldd	r24, Z+30	; 0x1e
    c066:	97 8d       	ldd	r25, Z+31	; 0x1f
    c068:	01 96       	adiw	r24, 0x01	; 1
    c06a:	97 8f       	std	Z+31, r25	; 0x1f
    c06c:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    c06e:	ad 81       	ldd	r26, Y+5	; 0x05
    c070:	be 81       	ldd	r27, Y+6	; 0x06
    c072:	17 96       	adiw	r26, 0x07	; 7
    c074:	8d 90       	ld	r8, X+
    c076:	9d 90       	ld	r9, X+
    c078:	ad 90       	ld	r10, X+
    c07a:	bc 90       	ld	r11, X
    c07c:	1a 97       	sbiw	r26, 0x0a	; 10
    c07e:	98 96       	adiw	r26, 0x28	; 40
    c080:	2d 91       	ld	r18, X+
    c082:	3d 91       	ld	r19, X+
    c084:	4d 91       	ld	r20, X+
    c086:	5c 91       	ld	r21, X
    c088:	9b 97       	sbiw	r26, 0x2b	; 43
    c08a:	c5 01       	movw	r24, r10
    c08c:	b4 01       	movw	r22, r8
    c08e:	0e 94 0a 62 	call	0xc414	; 0xc414 <__cmpsf2>
    c092:	88 23       	and	r24, r24
    c094:	29 f0       	breq	.+10     	; 0xc0a0 <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    c096:	ed 81       	ldd	r30, Y+5	; 0x05
    c098:	fe 81       	ldd	r31, Y+6	; 0x06
    c09a:	11 a2       	std	Z+33, r1	; 0x21
    c09c:	10 a2       	std	Z+32, r1	; 0x20
    c09e:	0b c0       	rjmp	.+22     	; 0xc0b6 <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    c0a0:	ad 81       	ldd	r26, Y+5	; 0x05
    c0a2:	be 81       	ldd	r27, Y+6	; 0x06
    c0a4:	90 96       	adiw	r26, 0x20	; 32
    c0a6:	8d 91       	ld	r24, X+
    c0a8:	9c 91       	ld	r25, X
    c0aa:	91 97       	sbiw	r26, 0x21	; 33
    c0ac:	01 96       	adiw	r24, 0x01	; 1
    c0ae:	91 96       	adiw	r26, 0x21	; 33
    c0b0:	9c 93       	st	X, r25
    c0b2:	8e 93       	st	-X, r24
    c0b4:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    c0b6:	ed 81       	ldd	r30, Y+5	; 0x05
    c0b8:	fe 81       	ldd	r31, Y+6	; 0x06
    c0ba:	c4 a2       	std	Z+36, r12	; 0x24
    c0bc:	d5 a2       	std	Z+37, r13	; 0x25
    c0be:	e6 a2       	std	Z+38, r14	; 0x26
    c0c0:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    c0c2:	80 a6       	std	Z+40, r8	; 0x28
    c0c4:	91 a6       	std	Z+41, r9	; 0x29
    c0c6:	a2 a6       	std	Z+42, r10	; 0x2a
    c0c8:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c0ca:	86 8d       	ldd	r24, Z+30	; 0x1e
    c0cc:	97 8d       	ldd	r25, Z+31	; 0x1f
    c0ce:	80 34       	cpi	r24, 0x40	; 64
    c0d0:	91 40       	sbci	r25, 0x01	; 1
    c0d2:	90 f0       	brcs	.+36     	; 0xc0f8 <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    c0d4:	64 e0       	ldi	r22, 0x04	; 4
    c0d6:	70 e0       	ldi	r23, 0x00	; 0
    c0d8:	82 e0       	ldi	r24, 0x02	; 2
    c0da:	90 e0       	ldi	r25, 0x00	; 0
    c0dc:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
    c0e0:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <button_map>
    c0e4:	f8 01       	movw	r30, r16
    c0e6:	95 83       	std	Z+5, r25	; 0x05
    c0e8:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    c0ea:	ad 81       	ldd	r26, Y+5	; 0x05
    c0ec:	be 81       	ldd	r27, Y+6	; 0x06
    c0ee:	5f 96       	adiw	r26, 0x1f	; 31
    c0f0:	1c 92       	st	X, r1
    c0f2:	1e 92       	st	-X, r1
    c0f4:	5e 97       	sbiw	r26, 0x1e	; 30
    c0f6:	40 c0       	rjmp	.+128    	; 0xc178 <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c0f8:	ed 81       	ldd	r30, Y+5	; 0x05
    c0fa:	fe 81       	ldd	r31, Y+6	; 0x06
    c0fc:	80 a1       	ldd	r24, Z+32	; 0x20
    c0fe:	91 a1       	ldd	r25, Z+33	; 0x21
    c100:	80 34       	cpi	r24, 0x40	; 64
    c102:	91 40       	sbci	r25, 0x01	; 1
    c104:	90 f0       	brcs	.+36     	; 0xc12a <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    c106:	62 e0       	ldi	r22, 0x02	; 2
    c108:	70 e0       	ldi	r23, 0x00	; 0
    c10a:	80 e0       	ldi	r24, 0x00	; 0
    c10c:	90 e0       	ldi	r25, 0x00	; 0
    c10e:	0e 94 19 4a 	call	0x9432	; 0x9432 <LBRandom>
    c112:	0e 94 f2 5d 	call	0xbbe4	; 0xbbe4 <button_map>
    c116:	d8 01       	movw	r26, r16
    c118:	15 96       	adiw	r26, 0x05	; 5
    c11a:	9c 93       	st	X, r25
    c11c:	8e 93       	st	-X, r24
    c11e:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    c120:	ed 81       	ldd	r30, Y+5	; 0x05
    c122:	fe 81       	ldd	r31, Y+6	; 0x06
    c124:	11 a2       	std	Z+33, r1	; 0x21
    c126:	10 a2       	std	Z+32, r1	; 0x20
    c128:	27 c0       	rjmp	.+78     	; 0xc178 <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    c12a:	20 e0       	ldi	r18, 0x00	; 0
    c12c:	30 e0       	ldi	r19, 0x00	; 0
    c12e:	40 e0       	ldi	r20, 0x00	; 0
    c130:	5e e3       	ldi	r21, 0x3E	; 62
    c132:	c5 01       	movw	r24, r10
    c134:	b4 01       	movw	r22, r8
    c136:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    c13a:	20 e0       	ldi	r18, 0x00	; 0
    c13c:	30 e0       	ldi	r19, 0x00	; 0
    c13e:	40 e4       	ldi	r20, 0x40	; 64
    c140:	50 e4       	ldi	r21, 0x40	; 64
    c142:	0e 94 a5 61 	call	0xc34a	; 0xc34a <__subsf3>
    c146:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
    c14a:	b6 2e       	mov	r11, r22
    c14c:	20 e0       	ldi	r18, 0x00	; 0
    c14e:	30 e0       	ldi	r19, 0x00	; 0
    c150:	40 e0       	ldi	r20, 0x00	; 0
    c152:	5e e3       	ldi	r21, 0x3E	; 62
    c154:	c7 01       	movw	r24, r14
    c156:	b6 01       	movw	r22, r12
    c158:	0e 94 5d 63 	call	0xc6ba	; 0xc6ba <__mulsf3>
    c15c:	0e 94 76 62 	call	0xc4ec	; 0xc4ec <__fixsfsi>
    c160:	86 2f       	mov	r24, r22
    c162:	2d 81       	ldd	r18, Y+5	; 0x05
    c164:	3e 81       	ldd	r19, Y+6	; 0x06
    c166:	d9 01       	movw	r26, r18
    c168:	12 96       	adiw	r26, 0x02	; 2
    c16a:	4c 91       	ld	r20, X
    c16c:	6b 2d       	mov	r22, r11
    c16e:	0e 94 08 5e 	call	0xbc10	; 0xbc10 <crash_and_turn>
    c172:	ed 81       	ldd	r30, Y+5	; 0x05
    c174:	fe 81       	ldd	r31, Y+6	; 0x06
    c176:	83 a3       	std	Z+35, r24	; 0x23
}
    c178:	26 96       	adiw	r28, 0x06	; 6
    c17a:	0f b6       	in	r0, 0x3f	; 63
    c17c:	f8 94       	cli
    c17e:	de bf       	out	0x3e, r29	; 62
    c180:	0f be       	out	0x3f, r0	; 63
    c182:	cd bf       	out	0x3d, r28	; 61
    c184:	df 91       	pop	r29
    c186:	cf 91       	pop	r28
    c188:	1f 91       	pop	r17
    c18a:	0f 91       	pop	r16
    c18c:	ff 90       	pop	r15
    c18e:	ef 90       	pop	r14
    c190:	df 90       	pop	r13
    c192:	cf 90       	pop	r12
    c194:	bf 90       	pop	r11
    c196:	af 90       	pop	r10
    c198:	9f 90       	pop	r9
    c19a:	8f 90       	pop	r8
    c19c:	7f 90       	pop	r7
    c19e:	6f 90       	pop	r6
    c1a0:	5f 90       	pop	r5
    c1a2:	4f 90       	pop	r4
    c1a4:	3f 90       	pop	r3
    c1a6:	2f 90       	pop	r2
    c1a8:	08 95       	ret

0000c1aa <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    c1aa:	81 e6       	ldi	r24, 0x61	; 97
    c1ac:	93 e0       	ldi	r25, 0x03	; 3
    c1ae:	0e 94 60 3c 	call	0x78c0	; 0x78c0 <InitMusicPlayer>
	SetMasterVolume(0xff);
    c1b2:	8f ef       	ldi	r24, 0xFF	; 255
    c1b4:	0e 94 b3 3f 	call	0x7f66	; 0x7f66 <SetMasterVolume>
	SetTileTable(tiles_data);
    c1b8:	84 e4       	ldi	r24, 0x44	; 68
    c1ba:	97 e4       	ldi	r25, 0x47	; 71
    c1bc:	0e 94 1f 3a 	call	0x743e	; 0x743e <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c1c0:	8e ed       	ldi	r24, 0xDE	; 222
    c1c2:	99 e3       	ldi	r25, 0x39	; 57
    c1c4:	0e 94 fb 39 	call	0x73f6	; 0x73f6 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    c1c8:	80 e3       	ldi	r24, 0x30	; 48
    c1ca:	0e 94 1c 3a 	call	0x7438	; 0x7438 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    c1ce:	60 e0       	ldi	r22, 0x00	; 0
    c1d0:	83 e0       	ldi	r24, 0x03	; 3
    c1d2:	0e 94 2d 48 	call	0x905a	; 0x905a <FadeIn>
	ClearVram();
    c1d6:	0e 94 00 3a 	call	0x7400	; 0x7400 <ClearVram>
	init_scores(&scores);
    c1da:	81 ec       	ldi	r24, 0xC1	; 193
    c1dc:	9b e0       	ldi	r25, 0x0B	; 11
    c1de:	0e 94 5d 4a 	call	0x94ba	; 0x94ba <init_scores>
	init_handles(&handles);
    c1e2:	88 ee       	ldi	r24, 0xE8	; 232
    c1e4:	9b e0       	ldi	r25, 0x0B	; 11
    c1e6:	0e 94 69 4a 	call	0x94d2	; 0x94d2 <init_handles>
	init_game_state();
    c1ea:	0e 94 54 4b 	call	0x96a8	; 0x96a8 <init_game_state>
	init_tile_animations(&tile_animations);
    c1ee:	8c e0       	ldi	r24, 0x0C	; 12
    c1f0:	9c e0       	ldi	r25, 0x0C	; 12
    c1f2:	0e 94 75 4a 	call	0x94ea	; 0x94ea <init_tile_animations>
	load_splash();
    c1f6:	0e 94 f6 56 	call	0xadec	; 0xadec <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    c1fa:	81 e0       	ldi	r24, 0x01	; 1
    c1fc:	90 e0       	ldi	r25, 0x00	; 0
    c1fe:	0e 94 08 48 	call	0x9010	; 0x9010 <WaitVsync>
		switch (game.current_screen)
    c202:	80 91 08 0c 	lds	r24, 0x0C08
    c206:	81 30       	cpi	r24, 0x01	; 1
    c208:	91 f0       	breq	.+36     	; 0xc22e <main+0x84>
    c20a:	28 f0       	brcs	.+10     	; 0xc216 <main+0x6c>
    c20c:	82 30       	cpi	r24, 0x02	; 2
    c20e:	d9 f0       	breq	.+54     	; 0xc246 <main+0x9c>
    c210:	83 30       	cpi	r24, 0x03	; 3
    c212:	51 f1       	breq	.+84     	; 0xc268 <main+0xbe>
    c214:	56 c0       	rjmp	.+172    	; 0xc2c2 <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    c216:	60 e0       	ldi	r22, 0x00	; 0
    c218:	83 e9       	ldi	r24, 0x93	; 147
    c21a:	9c e0       	ldi	r25, 0x0C	; 12
    c21c:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    c220:	61 ee       	ldi	r22, 0xE1	; 225
    c222:	7b e0       	ldi	r23, 0x0B	; 11
    c224:	83 e9       	ldi	r24, 0x93	; 147
    c226:	9c e0       	ldi	r25, 0x0C	; 12
    c228:	0e 94 ed 5c 	call	0xb9da	; 0xb9da <update_splash>
				break;
    c22c:	4a c0       	rjmp	.+148    	; 0xc2c2 <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    c22e:	60 e0       	ldi	r22, 0x00	; 0
    c230:	83 e9       	ldi	r24, 0x93	; 147
    c232:	9c e0       	ldi	r25, 0x0C	; 12
    c234:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    c238:	61 ee       	ldi	r22, 0xE1	; 225
    c23a:	7b e0       	ldi	r23, 0x0B	; 11
    c23c:	83 e9       	ldi	r24, 0x93	; 147
    c23e:	9c e0       	ldi	r25, 0x0C	; 12
    c240:	0e 94 b0 5a 	call	0xb560	; 0xb560 <update_tank_rank>
				break;
    c244:	3e c0       	rjmp	.+124    	; 0xc2c2 <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    c246:	60 e0       	ldi	r22, 0x00	; 0
    c248:	83 e9       	ldi	r24, 0x93	; 147
    c24a:	9c e0       	ldi	r25, 0x0C	; 12
    c24c:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    c250:	61 e0       	ldi	r22, 0x01	; 1
    c252:	81 ee       	ldi	r24, 0xE1	; 225
    c254:	9b e0       	ldi	r25, 0x0B	; 11
    c256:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    c25a:	61 ee       	ldi	r22, 0xE1	; 225
    c25c:	7b e0       	ldi	r23, 0x0B	; 11
    c25e:	83 e9       	ldi	r24, 0x93	; 147
    c260:	9c e0       	ldi	r25, 0x0C	; 12
    c262:	0e 94 a4 5d 	call	0xbb48	; 0xbb48 <update_handle_select>
				break;
    c266:	2d c0       	rjmp	.+90     	; 0xc2c2 <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    c268:	80 91 0b 0c 	lds	r24, 0x0C0B
    c26c:	81 11       	cpse	r24, r1
    c26e:	06 c0       	rjmp	.+12     	; 0xc27c <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    c270:	60 e0       	ldi	r22, 0x00	; 0
    c272:	83 e9       	ldi	r24, 0x93	; 147
    c274:	9c e0       	ldi	r25, 0x0C	; 12
    c276:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
    c27a:	0a c0       	rjmp	.+20     	; 0xc290 <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    c27c:	83 30       	cpi	r24, 0x03	; 3
    c27e:	89 f4       	brne	.+34     	; 0xc2a2 <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    c280:	43 e9       	ldi	r20, 0x93	; 147
    c282:	5c e0       	ldi	r21, 0x0C	; 12
    c284:	69 e8       	ldi	r22, 0x89	; 137
    c286:	7f e0       	ldi	r23, 0x0F	; 15
    c288:	85 e2       	ldi	r24, 0x25	; 37
    c28a:	9c e0       	ldi	r25, 0x0C	; 12
    c28c:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    c290:	41 ee       	ldi	r20, 0xE1	; 225
    c292:	5b e0       	ldi	r21, 0x0B	; 11
    c294:	65 e2       	ldi	r22, 0x25	; 37
    c296:	7c e0       	ldi	r23, 0x0C	; 12
    c298:	89 e8       	ldi	r24, 0x89	; 137
    c29a:	9f e0       	ldi	r25, 0x0F	; 15
    c29c:	0e 94 30 5f 	call	0xbe60	; 0xbe60 <get_cpu_joypad_state>
    c2a0:	0a c0       	rjmp	.+20     	; 0xc2b6 <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    c2a2:	60 e0       	ldi	r22, 0x00	; 0
    c2a4:	83 e9       	ldi	r24, 0x93	; 147
    c2a6:	9c e0       	ldi	r25, 0x0C	; 12
    c2a8:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    c2ac:	61 e0       	ldi	r22, 0x01	; 1
    c2ae:	81 ee       	ldi	r24, 0xE1	; 225
    c2b0:	9b e0       	ldi	r25, 0x0B	; 11
    c2b2:	0e 94 91 48 	call	0x9122	; 0x9122 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    c2b6:	61 ee       	ldi	r22, 0xE1	; 225
    c2b8:	7b e0       	ldi	r23, 0x0B	; 11
    c2ba:	83 e9       	ldi	r24, 0x93	; 147
    c2bc:	9c e0       	ldi	r25, 0x0C	; 12
    c2be:	0e 94 ea 59 	call	0xb3d4	; 0xb3d4 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    c2c2:	80 91 04 01 	lds	r24, 0x0104
    c2c6:	90 91 05 01 	lds	r25, 0x0105
    c2ca:	01 96       	adiw	r24, 0x01	; 1
    c2cc:	90 93 05 01 	sts	0x0105, r25
    c2d0:	80 93 04 01 	sts	0x0104, r24
	}
    c2d4:	92 cf       	rjmp	.-220    	; 0xc1fa <main+0x50>

0000c2d6 <__udivmodqi4>:
    c2d6:	99 1b       	sub	r25, r25
    c2d8:	79 e0       	ldi	r23, 0x09	; 9
    c2da:	04 c0       	rjmp	.+8      	; 0xc2e4 <__udivmodqi4_ep>

0000c2dc <__udivmodqi4_loop>:
    c2dc:	99 1f       	adc	r25, r25
    c2de:	96 17       	cp	r25, r22
    c2e0:	08 f0       	brcs	.+2      	; 0xc2e4 <__udivmodqi4_ep>
    c2e2:	96 1b       	sub	r25, r22

0000c2e4 <__udivmodqi4_ep>:
    c2e4:	88 1f       	adc	r24, r24
    c2e6:	7a 95       	dec	r23
    c2e8:	c9 f7       	brne	.-14     	; 0xc2dc <__udivmodqi4_loop>
    c2ea:	80 95       	com	r24
    c2ec:	08 95       	ret

0000c2ee <__udivmodhi4>:
    c2ee:	aa 1b       	sub	r26, r26
    c2f0:	bb 1b       	sub	r27, r27
    c2f2:	51 e1       	ldi	r21, 0x11	; 17
    c2f4:	07 c0       	rjmp	.+14     	; 0xc304 <__udivmodhi4_ep>

0000c2f6 <__udivmodhi4_loop>:
    c2f6:	aa 1f       	adc	r26, r26
    c2f8:	bb 1f       	adc	r27, r27
    c2fa:	a6 17       	cp	r26, r22
    c2fc:	b7 07       	cpc	r27, r23
    c2fe:	10 f0       	brcs	.+4      	; 0xc304 <__udivmodhi4_ep>
    c300:	a6 1b       	sub	r26, r22
    c302:	b7 0b       	sbc	r27, r23

0000c304 <__udivmodhi4_ep>:
    c304:	88 1f       	adc	r24, r24
    c306:	99 1f       	adc	r25, r25
    c308:	5a 95       	dec	r21
    c30a:	a9 f7       	brne	.-22     	; 0xc2f6 <__udivmodhi4_loop>
    c30c:	80 95       	com	r24
    c30e:	90 95       	com	r25
    c310:	bc 01       	movw	r22, r24
    c312:	cd 01       	movw	r24, r26
    c314:	08 95       	ret

0000c316 <__divmodhi4>:
    c316:	97 fb       	bst	r25, 7
    c318:	07 2e       	mov	r0, r23
    c31a:	16 f4       	brtc	.+4      	; 0xc320 <__divmodhi4+0xa>
    c31c:	00 94       	com	r0
    c31e:	07 d0       	rcall	.+14     	; 0xc32e <__divmodhi4_neg1>
    c320:	77 fd       	sbrc	r23, 7
    c322:	09 d0       	rcall	.+18     	; 0xc336 <__divmodhi4_neg2>
    c324:	0e 94 77 61 	call	0xc2ee	; 0xc2ee <__udivmodhi4>
    c328:	07 fc       	sbrc	r0, 7
    c32a:	05 d0       	rcall	.+10     	; 0xc336 <__divmodhi4_neg2>
    c32c:	3e f4       	brtc	.+14     	; 0xc33c <__divmodhi4_exit>

0000c32e <__divmodhi4_neg1>:
    c32e:	90 95       	com	r25
    c330:	81 95       	neg	r24
    c332:	9f 4f       	sbci	r25, 0xFF	; 255
    c334:	08 95       	ret

0000c336 <__divmodhi4_neg2>:
    c336:	70 95       	com	r23
    c338:	61 95       	neg	r22
    c33a:	7f 4f       	sbci	r23, 0xFF	; 255

0000c33c <__divmodhi4_exit>:
    c33c:	08 95       	ret

0000c33e <__tablejump2__>:
    c33e:	ee 0f       	add	r30, r30
    c340:	ff 1f       	adc	r31, r31
    c342:	05 90       	lpm	r0, Z+
    c344:	f4 91       	lpm	r31, Z
    c346:	e0 2d       	mov	r30, r0
    c348:	09 94       	ijmp

0000c34a <__subsf3>:
    c34a:	50 58       	subi	r21, 0x80	; 128

0000c34c <__addsf3>:
    c34c:	bb 27       	eor	r27, r27
    c34e:	aa 27       	eor	r26, r26
    c350:	0e d0       	rcall	.+28     	; 0xc36e <__addsf3x>
    c352:	75 c1       	rjmp	.+746    	; 0xc63e <__fp_round>
    c354:	66 d1       	rcall	.+716    	; 0xc622 <__fp_pscA>
    c356:	30 f0       	brcs	.+12     	; 0xc364 <__addsf3+0x18>
    c358:	6b d1       	rcall	.+726    	; 0xc630 <__fp_pscB>
    c35a:	20 f0       	brcs	.+8      	; 0xc364 <__addsf3+0x18>
    c35c:	31 f4       	brne	.+12     	; 0xc36a <__addsf3+0x1e>
    c35e:	9f 3f       	cpi	r25, 0xFF	; 255
    c360:	11 f4       	brne	.+4      	; 0xc366 <__addsf3+0x1a>
    c362:	1e f4       	brtc	.+6      	; 0xc36a <__addsf3+0x1e>
    c364:	5b c1       	rjmp	.+694    	; 0xc61c <__fp_nan>
    c366:	0e f4       	brtc	.+2      	; 0xc36a <__addsf3+0x1e>
    c368:	e0 95       	com	r30
    c36a:	e7 fb       	bst	r30, 7
    c36c:	51 c1       	rjmp	.+674    	; 0xc610 <__fp_inf>

0000c36e <__addsf3x>:
    c36e:	e9 2f       	mov	r30, r25
    c370:	77 d1       	rcall	.+750    	; 0xc660 <__fp_split3>
    c372:	80 f3       	brcs	.-32     	; 0xc354 <__addsf3+0x8>
    c374:	ba 17       	cp	r27, r26
    c376:	62 07       	cpc	r22, r18
    c378:	73 07       	cpc	r23, r19
    c37a:	84 07       	cpc	r24, r20
    c37c:	95 07       	cpc	r25, r21
    c37e:	18 f0       	brcs	.+6      	; 0xc386 <__addsf3x+0x18>
    c380:	71 f4       	brne	.+28     	; 0xc39e <__addsf3x+0x30>
    c382:	9e f5       	brtc	.+102    	; 0xc3ea <__addsf3x+0x7c>
    c384:	8f c1       	rjmp	.+798    	; 0xc6a4 <__fp_zero>
    c386:	0e f4       	brtc	.+2      	; 0xc38a <__addsf3x+0x1c>
    c388:	e0 95       	com	r30
    c38a:	0b 2e       	mov	r0, r27
    c38c:	ba 2f       	mov	r27, r26
    c38e:	a0 2d       	mov	r26, r0
    c390:	0b 01       	movw	r0, r22
    c392:	b9 01       	movw	r22, r18
    c394:	90 01       	movw	r18, r0
    c396:	0c 01       	movw	r0, r24
    c398:	ca 01       	movw	r24, r20
    c39a:	a0 01       	movw	r20, r0
    c39c:	11 24       	eor	r1, r1
    c39e:	ff 27       	eor	r31, r31
    c3a0:	59 1b       	sub	r21, r25
    c3a2:	99 f0       	breq	.+38     	; 0xc3ca <__addsf3x+0x5c>
    c3a4:	59 3f       	cpi	r21, 0xF9	; 249
    c3a6:	50 f4       	brcc	.+20     	; 0xc3bc <__addsf3x+0x4e>
    c3a8:	50 3e       	cpi	r21, 0xE0	; 224
    c3aa:	68 f1       	brcs	.+90     	; 0xc406 <__addsf3x+0x98>
    c3ac:	1a 16       	cp	r1, r26
    c3ae:	f0 40       	sbci	r31, 0x00	; 0
    c3b0:	a2 2f       	mov	r26, r18
    c3b2:	23 2f       	mov	r18, r19
    c3b4:	34 2f       	mov	r19, r20
    c3b6:	44 27       	eor	r20, r20
    c3b8:	58 5f       	subi	r21, 0xF8	; 248
    c3ba:	f3 cf       	rjmp	.-26     	; 0xc3a2 <__addsf3x+0x34>
    c3bc:	46 95       	lsr	r20
    c3be:	37 95       	ror	r19
    c3c0:	27 95       	ror	r18
    c3c2:	a7 95       	ror	r26
    c3c4:	f0 40       	sbci	r31, 0x00	; 0
    c3c6:	53 95       	inc	r21
    c3c8:	c9 f7       	brne	.-14     	; 0xc3bc <__addsf3x+0x4e>
    c3ca:	7e f4       	brtc	.+30     	; 0xc3ea <__addsf3x+0x7c>
    c3cc:	1f 16       	cp	r1, r31
    c3ce:	ba 0b       	sbc	r27, r26
    c3d0:	62 0b       	sbc	r22, r18
    c3d2:	73 0b       	sbc	r23, r19
    c3d4:	84 0b       	sbc	r24, r20
    c3d6:	ba f0       	brmi	.+46     	; 0xc406 <__addsf3x+0x98>
    c3d8:	91 50       	subi	r25, 0x01	; 1
    c3da:	a1 f0       	breq	.+40     	; 0xc404 <__addsf3x+0x96>
    c3dc:	ff 0f       	add	r31, r31
    c3de:	bb 1f       	adc	r27, r27
    c3e0:	66 1f       	adc	r22, r22
    c3e2:	77 1f       	adc	r23, r23
    c3e4:	88 1f       	adc	r24, r24
    c3e6:	c2 f7       	brpl	.-16     	; 0xc3d8 <__addsf3x+0x6a>
    c3e8:	0e c0       	rjmp	.+28     	; 0xc406 <__addsf3x+0x98>
    c3ea:	ba 0f       	add	r27, r26
    c3ec:	62 1f       	adc	r22, r18
    c3ee:	73 1f       	adc	r23, r19
    c3f0:	84 1f       	adc	r24, r20
    c3f2:	48 f4       	brcc	.+18     	; 0xc406 <__addsf3x+0x98>
    c3f4:	87 95       	ror	r24
    c3f6:	77 95       	ror	r23
    c3f8:	67 95       	ror	r22
    c3fa:	b7 95       	ror	r27
    c3fc:	f7 95       	ror	r31
    c3fe:	9e 3f       	cpi	r25, 0xFE	; 254
    c400:	08 f0       	brcs	.+2      	; 0xc404 <__addsf3x+0x96>
    c402:	b3 cf       	rjmp	.-154    	; 0xc36a <__addsf3+0x1e>
    c404:	93 95       	inc	r25
    c406:	88 0f       	add	r24, r24
    c408:	08 f0       	brcs	.+2      	; 0xc40c <__addsf3x+0x9e>
    c40a:	99 27       	eor	r25, r25
    c40c:	ee 0f       	add	r30, r30
    c40e:	97 95       	ror	r25
    c410:	87 95       	ror	r24
    c412:	08 95       	ret

0000c414 <__cmpsf2>:
    c414:	d9 d0       	rcall	.+434    	; 0xc5c8 <__fp_cmp>
    c416:	08 f4       	brcc	.+2      	; 0xc41a <__cmpsf2+0x6>
    c418:	81 e0       	ldi	r24, 0x01	; 1
    c41a:	08 95       	ret

0000c41c <__divsf3>:
    c41c:	0c d0       	rcall	.+24     	; 0xc436 <__divsf3x>
    c41e:	0f c1       	rjmp	.+542    	; 0xc63e <__fp_round>
    c420:	07 d1       	rcall	.+526    	; 0xc630 <__fp_pscB>
    c422:	40 f0       	brcs	.+16     	; 0xc434 <__divsf3+0x18>
    c424:	fe d0       	rcall	.+508    	; 0xc622 <__fp_pscA>
    c426:	30 f0       	brcs	.+12     	; 0xc434 <__divsf3+0x18>
    c428:	21 f4       	brne	.+8      	; 0xc432 <__divsf3+0x16>
    c42a:	5f 3f       	cpi	r21, 0xFF	; 255
    c42c:	19 f0       	breq	.+6      	; 0xc434 <__divsf3+0x18>
    c42e:	f0 c0       	rjmp	.+480    	; 0xc610 <__fp_inf>
    c430:	51 11       	cpse	r21, r1
    c432:	39 c1       	rjmp	.+626    	; 0xc6a6 <__fp_szero>
    c434:	f3 c0       	rjmp	.+486    	; 0xc61c <__fp_nan>

0000c436 <__divsf3x>:
    c436:	14 d1       	rcall	.+552    	; 0xc660 <__fp_split3>
    c438:	98 f3       	brcs	.-26     	; 0xc420 <__divsf3+0x4>

0000c43a <__divsf3_pse>:
    c43a:	99 23       	and	r25, r25
    c43c:	c9 f3       	breq	.-14     	; 0xc430 <__divsf3+0x14>
    c43e:	55 23       	and	r21, r21
    c440:	b1 f3       	breq	.-20     	; 0xc42e <__divsf3+0x12>
    c442:	95 1b       	sub	r25, r21
    c444:	55 0b       	sbc	r21, r21
    c446:	bb 27       	eor	r27, r27
    c448:	aa 27       	eor	r26, r26
    c44a:	62 17       	cp	r22, r18
    c44c:	73 07       	cpc	r23, r19
    c44e:	84 07       	cpc	r24, r20
    c450:	38 f0       	brcs	.+14     	; 0xc460 <__divsf3_pse+0x26>
    c452:	9f 5f       	subi	r25, 0xFF	; 255
    c454:	5f 4f       	sbci	r21, 0xFF	; 255
    c456:	22 0f       	add	r18, r18
    c458:	33 1f       	adc	r19, r19
    c45a:	44 1f       	adc	r20, r20
    c45c:	aa 1f       	adc	r26, r26
    c45e:	a9 f3       	breq	.-22     	; 0xc44a <__divsf3_pse+0x10>
    c460:	33 d0       	rcall	.+102    	; 0xc4c8 <__divsf3_pse+0x8e>
    c462:	0e 2e       	mov	r0, r30
    c464:	3a f0       	brmi	.+14     	; 0xc474 <__divsf3_pse+0x3a>
    c466:	e0 e8       	ldi	r30, 0x80	; 128
    c468:	30 d0       	rcall	.+96     	; 0xc4ca <__divsf3_pse+0x90>
    c46a:	91 50       	subi	r25, 0x01	; 1
    c46c:	50 40       	sbci	r21, 0x00	; 0
    c46e:	e6 95       	lsr	r30
    c470:	00 1c       	adc	r0, r0
    c472:	ca f7       	brpl	.-14     	; 0xc466 <__divsf3_pse+0x2c>
    c474:	29 d0       	rcall	.+82     	; 0xc4c8 <__divsf3_pse+0x8e>
    c476:	fe 2f       	mov	r31, r30
    c478:	27 d0       	rcall	.+78     	; 0xc4c8 <__divsf3_pse+0x8e>
    c47a:	66 0f       	add	r22, r22
    c47c:	77 1f       	adc	r23, r23
    c47e:	88 1f       	adc	r24, r24
    c480:	bb 1f       	adc	r27, r27
    c482:	26 17       	cp	r18, r22
    c484:	37 07       	cpc	r19, r23
    c486:	48 07       	cpc	r20, r24
    c488:	ab 07       	cpc	r26, r27
    c48a:	b0 e8       	ldi	r27, 0x80	; 128
    c48c:	09 f0       	breq	.+2      	; 0xc490 <__divsf3_pse+0x56>
    c48e:	bb 0b       	sbc	r27, r27
    c490:	80 2d       	mov	r24, r0
    c492:	bf 01       	movw	r22, r30
    c494:	ff 27       	eor	r31, r31
    c496:	93 58       	subi	r25, 0x83	; 131
    c498:	5f 4f       	sbci	r21, 0xFF	; 255
    c49a:	2a f0       	brmi	.+10     	; 0xc4a6 <__divsf3_pse+0x6c>
    c49c:	9e 3f       	cpi	r25, 0xFE	; 254
    c49e:	51 05       	cpc	r21, r1
    c4a0:	68 f0       	brcs	.+26     	; 0xc4bc <__divsf3_pse+0x82>
    c4a2:	b6 c0       	rjmp	.+364    	; 0xc610 <__fp_inf>
    c4a4:	00 c1       	rjmp	.+512    	; 0xc6a6 <__fp_szero>
    c4a6:	5f 3f       	cpi	r21, 0xFF	; 255
    c4a8:	ec f3       	brlt	.-6      	; 0xc4a4 <__divsf3_pse+0x6a>
    c4aa:	98 3e       	cpi	r25, 0xE8	; 232
    c4ac:	dc f3       	brlt	.-10     	; 0xc4a4 <__divsf3_pse+0x6a>
    c4ae:	86 95       	lsr	r24
    c4b0:	77 95       	ror	r23
    c4b2:	67 95       	ror	r22
    c4b4:	b7 95       	ror	r27
    c4b6:	f7 95       	ror	r31
    c4b8:	9f 5f       	subi	r25, 0xFF	; 255
    c4ba:	c9 f7       	brne	.-14     	; 0xc4ae <__divsf3_pse+0x74>
    c4bc:	88 0f       	add	r24, r24
    c4be:	91 1d       	adc	r25, r1
    c4c0:	96 95       	lsr	r25
    c4c2:	87 95       	ror	r24
    c4c4:	97 f9       	bld	r25, 7
    c4c6:	08 95       	ret
    c4c8:	e1 e0       	ldi	r30, 0x01	; 1
    c4ca:	66 0f       	add	r22, r22
    c4cc:	77 1f       	adc	r23, r23
    c4ce:	88 1f       	adc	r24, r24
    c4d0:	bb 1f       	adc	r27, r27
    c4d2:	62 17       	cp	r22, r18
    c4d4:	73 07       	cpc	r23, r19
    c4d6:	84 07       	cpc	r24, r20
    c4d8:	ba 07       	cpc	r27, r26
    c4da:	20 f0       	brcs	.+8      	; 0xc4e4 <__divsf3_pse+0xaa>
    c4dc:	62 1b       	sub	r22, r18
    c4de:	73 0b       	sbc	r23, r19
    c4e0:	84 0b       	sbc	r24, r20
    c4e2:	ba 0b       	sbc	r27, r26
    c4e4:	ee 1f       	adc	r30, r30
    c4e6:	88 f7       	brcc	.-30     	; 0xc4ca <__divsf3_pse+0x90>
    c4e8:	e0 95       	com	r30
    c4ea:	08 95       	ret

0000c4ec <__fixsfsi>:
    c4ec:	04 d0       	rcall	.+8      	; 0xc4f6 <__fixunssfsi>
    c4ee:	68 94       	set
    c4f0:	b1 11       	cpse	r27, r1
    c4f2:	d9 c0       	rjmp	.+434    	; 0xc6a6 <__fp_szero>
    c4f4:	08 95       	ret

0000c4f6 <__fixunssfsi>:
    c4f6:	bc d0       	rcall	.+376    	; 0xc670 <__fp_splitA>
    c4f8:	88 f0       	brcs	.+34     	; 0xc51c <__fixunssfsi+0x26>
    c4fa:	9f 57       	subi	r25, 0x7F	; 127
    c4fc:	90 f0       	brcs	.+36     	; 0xc522 <__fixunssfsi+0x2c>
    c4fe:	b9 2f       	mov	r27, r25
    c500:	99 27       	eor	r25, r25
    c502:	b7 51       	subi	r27, 0x17	; 23
    c504:	a0 f0       	brcs	.+40     	; 0xc52e <__fixunssfsi+0x38>
    c506:	d1 f0       	breq	.+52     	; 0xc53c <__fixunssfsi+0x46>
    c508:	66 0f       	add	r22, r22
    c50a:	77 1f       	adc	r23, r23
    c50c:	88 1f       	adc	r24, r24
    c50e:	99 1f       	adc	r25, r25
    c510:	1a f0       	brmi	.+6      	; 0xc518 <__fixunssfsi+0x22>
    c512:	ba 95       	dec	r27
    c514:	c9 f7       	brne	.-14     	; 0xc508 <__fixunssfsi+0x12>
    c516:	12 c0       	rjmp	.+36     	; 0xc53c <__fixunssfsi+0x46>
    c518:	b1 30       	cpi	r27, 0x01	; 1
    c51a:	81 f0       	breq	.+32     	; 0xc53c <__fixunssfsi+0x46>
    c51c:	c3 d0       	rcall	.+390    	; 0xc6a4 <__fp_zero>
    c51e:	b1 e0       	ldi	r27, 0x01	; 1
    c520:	08 95       	ret
    c522:	c0 c0       	rjmp	.+384    	; 0xc6a4 <__fp_zero>
    c524:	67 2f       	mov	r22, r23
    c526:	78 2f       	mov	r23, r24
    c528:	88 27       	eor	r24, r24
    c52a:	b8 5f       	subi	r27, 0xF8	; 248
    c52c:	39 f0       	breq	.+14     	; 0xc53c <__fixunssfsi+0x46>
    c52e:	b9 3f       	cpi	r27, 0xF9	; 249
    c530:	cc f3       	brlt	.-14     	; 0xc524 <__fixunssfsi+0x2e>
    c532:	86 95       	lsr	r24
    c534:	77 95       	ror	r23
    c536:	67 95       	ror	r22
    c538:	b3 95       	inc	r27
    c53a:	d9 f7       	brne	.-10     	; 0xc532 <__fixunssfsi+0x3c>
    c53c:	3e f4       	brtc	.+14     	; 0xc54c <__fixunssfsi+0x56>
    c53e:	90 95       	com	r25
    c540:	80 95       	com	r24
    c542:	70 95       	com	r23
    c544:	61 95       	neg	r22
    c546:	7f 4f       	sbci	r23, 0xFF	; 255
    c548:	8f 4f       	sbci	r24, 0xFF	; 255
    c54a:	9f 4f       	sbci	r25, 0xFF	; 255
    c54c:	08 95       	ret

0000c54e <__floatunsisf>:
    c54e:	e8 94       	clt
    c550:	09 c0       	rjmp	.+18     	; 0xc564 <__floatsisf+0x12>

0000c552 <__floatsisf>:
    c552:	97 fb       	bst	r25, 7
    c554:	3e f4       	brtc	.+14     	; 0xc564 <__floatsisf+0x12>
    c556:	90 95       	com	r25
    c558:	80 95       	com	r24
    c55a:	70 95       	com	r23
    c55c:	61 95       	neg	r22
    c55e:	7f 4f       	sbci	r23, 0xFF	; 255
    c560:	8f 4f       	sbci	r24, 0xFF	; 255
    c562:	9f 4f       	sbci	r25, 0xFF	; 255
    c564:	99 23       	and	r25, r25
    c566:	a9 f0       	breq	.+42     	; 0xc592 <__floatsisf+0x40>
    c568:	f9 2f       	mov	r31, r25
    c56a:	96 e9       	ldi	r25, 0x96	; 150
    c56c:	bb 27       	eor	r27, r27
    c56e:	93 95       	inc	r25
    c570:	f6 95       	lsr	r31
    c572:	87 95       	ror	r24
    c574:	77 95       	ror	r23
    c576:	67 95       	ror	r22
    c578:	b7 95       	ror	r27
    c57a:	f1 11       	cpse	r31, r1
    c57c:	f8 cf       	rjmp	.-16     	; 0xc56e <__floatsisf+0x1c>
    c57e:	fa f4       	brpl	.+62     	; 0xc5be <__floatsisf+0x6c>
    c580:	bb 0f       	add	r27, r27
    c582:	11 f4       	brne	.+4      	; 0xc588 <__floatsisf+0x36>
    c584:	60 ff       	sbrs	r22, 0
    c586:	1b c0       	rjmp	.+54     	; 0xc5be <__floatsisf+0x6c>
    c588:	6f 5f       	subi	r22, 0xFF	; 255
    c58a:	7f 4f       	sbci	r23, 0xFF	; 255
    c58c:	8f 4f       	sbci	r24, 0xFF	; 255
    c58e:	9f 4f       	sbci	r25, 0xFF	; 255
    c590:	16 c0       	rjmp	.+44     	; 0xc5be <__floatsisf+0x6c>
    c592:	88 23       	and	r24, r24
    c594:	11 f0       	breq	.+4      	; 0xc59a <__floatsisf+0x48>
    c596:	96 e9       	ldi	r25, 0x96	; 150
    c598:	11 c0       	rjmp	.+34     	; 0xc5bc <__floatsisf+0x6a>
    c59a:	77 23       	and	r23, r23
    c59c:	21 f0       	breq	.+8      	; 0xc5a6 <__floatsisf+0x54>
    c59e:	9e e8       	ldi	r25, 0x8E	; 142
    c5a0:	87 2f       	mov	r24, r23
    c5a2:	76 2f       	mov	r23, r22
    c5a4:	05 c0       	rjmp	.+10     	; 0xc5b0 <__floatsisf+0x5e>
    c5a6:	66 23       	and	r22, r22
    c5a8:	71 f0       	breq	.+28     	; 0xc5c6 <__floatsisf+0x74>
    c5aa:	96 e8       	ldi	r25, 0x86	; 134
    c5ac:	86 2f       	mov	r24, r22
    c5ae:	70 e0       	ldi	r23, 0x00	; 0
    c5b0:	60 e0       	ldi	r22, 0x00	; 0
    c5b2:	2a f0       	brmi	.+10     	; 0xc5be <__floatsisf+0x6c>
    c5b4:	9a 95       	dec	r25
    c5b6:	66 0f       	add	r22, r22
    c5b8:	77 1f       	adc	r23, r23
    c5ba:	88 1f       	adc	r24, r24
    c5bc:	da f7       	brpl	.-10     	; 0xc5b4 <__floatsisf+0x62>
    c5be:	88 0f       	add	r24, r24
    c5c0:	96 95       	lsr	r25
    c5c2:	87 95       	ror	r24
    c5c4:	97 f9       	bld	r25, 7
    c5c6:	08 95       	ret

0000c5c8 <__fp_cmp>:
    c5c8:	99 0f       	add	r25, r25
    c5ca:	00 08       	sbc	r0, r0
    c5cc:	55 0f       	add	r21, r21
    c5ce:	aa 0b       	sbc	r26, r26
    c5d0:	e0 e8       	ldi	r30, 0x80	; 128
    c5d2:	fe ef       	ldi	r31, 0xFE	; 254
    c5d4:	16 16       	cp	r1, r22
    c5d6:	17 06       	cpc	r1, r23
    c5d8:	e8 07       	cpc	r30, r24
    c5da:	f9 07       	cpc	r31, r25
    c5dc:	c0 f0       	brcs	.+48     	; 0xc60e <__fp_cmp+0x46>
    c5de:	12 16       	cp	r1, r18
    c5e0:	13 06       	cpc	r1, r19
    c5e2:	e4 07       	cpc	r30, r20
    c5e4:	f5 07       	cpc	r31, r21
    c5e6:	98 f0       	brcs	.+38     	; 0xc60e <__fp_cmp+0x46>
    c5e8:	62 1b       	sub	r22, r18
    c5ea:	73 0b       	sbc	r23, r19
    c5ec:	84 0b       	sbc	r24, r20
    c5ee:	95 0b       	sbc	r25, r21
    c5f0:	39 f4       	brne	.+14     	; 0xc600 <__fp_cmp+0x38>
    c5f2:	0a 26       	eor	r0, r26
    c5f4:	61 f0       	breq	.+24     	; 0xc60e <__fp_cmp+0x46>
    c5f6:	23 2b       	or	r18, r19
    c5f8:	24 2b       	or	r18, r20
    c5fa:	25 2b       	or	r18, r21
    c5fc:	21 f4       	brne	.+8      	; 0xc606 <__fp_cmp+0x3e>
    c5fe:	08 95       	ret
    c600:	0a 26       	eor	r0, r26
    c602:	09 f4       	brne	.+2      	; 0xc606 <__fp_cmp+0x3e>
    c604:	a1 40       	sbci	r26, 0x01	; 1
    c606:	a6 95       	lsr	r26
    c608:	8f ef       	ldi	r24, 0xFF	; 255
    c60a:	81 1d       	adc	r24, r1
    c60c:	81 1d       	adc	r24, r1
    c60e:	08 95       	ret

0000c610 <__fp_inf>:
    c610:	97 f9       	bld	r25, 7
    c612:	9f 67       	ori	r25, 0x7F	; 127
    c614:	80 e8       	ldi	r24, 0x80	; 128
    c616:	70 e0       	ldi	r23, 0x00	; 0
    c618:	60 e0       	ldi	r22, 0x00	; 0
    c61a:	08 95       	ret

0000c61c <__fp_nan>:
    c61c:	9f ef       	ldi	r25, 0xFF	; 255
    c61e:	80 ec       	ldi	r24, 0xC0	; 192
    c620:	08 95       	ret

0000c622 <__fp_pscA>:
    c622:	00 24       	eor	r0, r0
    c624:	0a 94       	dec	r0
    c626:	16 16       	cp	r1, r22
    c628:	17 06       	cpc	r1, r23
    c62a:	18 06       	cpc	r1, r24
    c62c:	09 06       	cpc	r0, r25
    c62e:	08 95       	ret

0000c630 <__fp_pscB>:
    c630:	00 24       	eor	r0, r0
    c632:	0a 94       	dec	r0
    c634:	12 16       	cp	r1, r18
    c636:	13 06       	cpc	r1, r19
    c638:	14 06       	cpc	r1, r20
    c63a:	05 06       	cpc	r0, r21
    c63c:	08 95       	ret

0000c63e <__fp_round>:
    c63e:	09 2e       	mov	r0, r25
    c640:	03 94       	inc	r0
    c642:	00 0c       	add	r0, r0
    c644:	11 f4       	brne	.+4      	; 0xc64a <__fp_round+0xc>
    c646:	88 23       	and	r24, r24
    c648:	52 f0       	brmi	.+20     	; 0xc65e <__fp_round+0x20>
    c64a:	bb 0f       	add	r27, r27
    c64c:	40 f4       	brcc	.+16     	; 0xc65e <__fp_round+0x20>
    c64e:	bf 2b       	or	r27, r31
    c650:	11 f4       	brne	.+4      	; 0xc656 <__fp_round+0x18>
    c652:	60 ff       	sbrs	r22, 0
    c654:	04 c0       	rjmp	.+8      	; 0xc65e <__fp_round+0x20>
    c656:	6f 5f       	subi	r22, 0xFF	; 255
    c658:	7f 4f       	sbci	r23, 0xFF	; 255
    c65a:	8f 4f       	sbci	r24, 0xFF	; 255
    c65c:	9f 4f       	sbci	r25, 0xFF	; 255
    c65e:	08 95       	ret

0000c660 <__fp_split3>:
    c660:	57 fd       	sbrc	r21, 7
    c662:	90 58       	subi	r25, 0x80	; 128
    c664:	44 0f       	add	r20, r20
    c666:	55 1f       	adc	r21, r21
    c668:	59 f0       	breq	.+22     	; 0xc680 <__fp_splitA+0x10>
    c66a:	5f 3f       	cpi	r21, 0xFF	; 255
    c66c:	71 f0       	breq	.+28     	; 0xc68a <__fp_splitA+0x1a>
    c66e:	47 95       	ror	r20

0000c670 <__fp_splitA>:
    c670:	88 0f       	add	r24, r24
    c672:	97 fb       	bst	r25, 7
    c674:	99 1f       	adc	r25, r25
    c676:	61 f0       	breq	.+24     	; 0xc690 <__fp_splitA+0x20>
    c678:	9f 3f       	cpi	r25, 0xFF	; 255
    c67a:	79 f0       	breq	.+30     	; 0xc69a <__fp_splitA+0x2a>
    c67c:	87 95       	ror	r24
    c67e:	08 95       	ret
    c680:	12 16       	cp	r1, r18
    c682:	13 06       	cpc	r1, r19
    c684:	14 06       	cpc	r1, r20
    c686:	55 1f       	adc	r21, r21
    c688:	f2 cf       	rjmp	.-28     	; 0xc66e <__fp_split3+0xe>
    c68a:	46 95       	lsr	r20
    c68c:	f1 df       	rcall	.-30     	; 0xc670 <__fp_splitA>
    c68e:	08 c0       	rjmp	.+16     	; 0xc6a0 <__fp_splitA+0x30>
    c690:	16 16       	cp	r1, r22
    c692:	17 06       	cpc	r1, r23
    c694:	18 06       	cpc	r1, r24
    c696:	99 1f       	adc	r25, r25
    c698:	f1 cf       	rjmp	.-30     	; 0xc67c <__fp_splitA+0xc>
    c69a:	86 95       	lsr	r24
    c69c:	71 05       	cpc	r23, r1
    c69e:	61 05       	cpc	r22, r1
    c6a0:	08 94       	sec
    c6a2:	08 95       	ret

0000c6a4 <__fp_zero>:
    c6a4:	e8 94       	clt

0000c6a6 <__fp_szero>:
    c6a6:	bb 27       	eor	r27, r27
    c6a8:	66 27       	eor	r22, r22
    c6aa:	77 27       	eor	r23, r23
    c6ac:	cb 01       	movw	r24, r22
    c6ae:	97 f9       	bld	r25, 7
    c6b0:	08 95       	ret

0000c6b2 <__gesf2>:
    c6b2:	8a df       	rcall	.-236    	; 0xc5c8 <__fp_cmp>
    c6b4:	08 f4       	brcc	.+2      	; 0xc6b8 <__gesf2+0x6>
    c6b6:	8f ef       	ldi	r24, 0xFF	; 255
    c6b8:	08 95       	ret

0000c6ba <__mulsf3>:
    c6ba:	0b d0       	rcall	.+22     	; 0xc6d2 <__mulsf3x>
    c6bc:	c0 cf       	rjmp	.-128    	; 0xc63e <__fp_round>
    c6be:	b1 df       	rcall	.-158    	; 0xc622 <__fp_pscA>
    c6c0:	28 f0       	brcs	.+10     	; 0xc6cc <__mulsf3+0x12>
    c6c2:	b6 df       	rcall	.-148    	; 0xc630 <__fp_pscB>
    c6c4:	18 f0       	brcs	.+6      	; 0xc6cc <__mulsf3+0x12>
    c6c6:	95 23       	and	r25, r21
    c6c8:	09 f0       	breq	.+2      	; 0xc6cc <__mulsf3+0x12>
    c6ca:	a2 cf       	rjmp	.-188    	; 0xc610 <__fp_inf>
    c6cc:	a7 cf       	rjmp	.-178    	; 0xc61c <__fp_nan>
    c6ce:	11 24       	eor	r1, r1
    c6d0:	ea cf       	rjmp	.-44     	; 0xc6a6 <__fp_szero>

0000c6d2 <__mulsf3x>:
    c6d2:	c6 df       	rcall	.-116    	; 0xc660 <__fp_split3>
    c6d4:	a0 f3       	brcs	.-24     	; 0xc6be <__mulsf3+0x4>

0000c6d6 <__mulsf3_pse>:
    c6d6:	95 9f       	mul	r25, r21
    c6d8:	d1 f3       	breq	.-12     	; 0xc6ce <__mulsf3+0x14>
    c6da:	95 0f       	add	r25, r21
    c6dc:	50 e0       	ldi	r21, 0x00	; 0
    c6de:	55 1f       	adc	r21, r21
    c6e0:	62 9f       	mul	r22, r18
    c6e2:	f0 01       	movw	r30, r0
    c6e4:	72 9f       	mul	r23, r18
    c6e6:	bb 27       	eor	r27, r27
    c6e8:	f0 0d       	add	r31, r0
    c6ea:	b1 1d       	adc	r27, r1
    c6ec:	63 9f       	mul	r22, r19
    c6ee:	aa 27       	eor	r26, r26
    c6f0:	f0 0d       	add	r31, r0
    c6f2:	b1 1d       	adc	r27, r1
    c6f4:	aa 1f       	adc	r26, r26
    c6f6:	64 9f       	mul	r22, r20
    c6f8:	66 27       	eor	r22, r22
    c6fa:	b0 0d       	add	r27, r0
    c6fc:	a1 1d       	adc	r26, r1
    c6fe:	66 1f       	adc	r22, r22
    c700:	82 9f       	mul	r24, r18
    c702:	22 27       	eor	r18, r18
    c704:	b0 0d       	add	r27, r0
    c706:	a1 1d       	adc	r26, r1
    c708:	62 1f       	adc	r22, r18
    c70a:	73 9f       	mul	r23, r19
    c70c:	b0 0d       	add	r27, r0
    c70e:	a1 1d       	adc	r26, r1
    c710:	62 1f       	adc	r22, r18
    c712:	83 9f       	mul	r24, r19
    c714:	a0 0d       	add	r26, r0
    c716:	61 1d       	adc	r22, r1
    c718:	22 1f       	adc	r18, r18
    c71a:	74 9f       	mul	r23, r20
    c71c:	33 27       	eor	r19, r19
    c71e:	a0 0d       	add	r26, r0
    c720:	61 1d       	adc	r22, r1
    c722:	23 1f       	adc	r18, r19
    c724:	84 9f       	mul	r24, r20
    c726:	60 0d       	add	r22, r0
    c728:	21 1d       	adc	r18, r1
    c72a:	82 2f       	mov	r24, r18
    c72c:	76 2f       	mov	r23, r22
    c72e:	6a 2f       	mov	r22, r26
    c730:	11 24       	eor	r1, r1
    c732:	9f 57       	subi	r25, 0x7F	; 127
    c734:	50 40       	sbci	r21, 0x00	; 0
    c736:	8a f0       	brmi	.+34     	; 0xc75a <__mulsf3_pse+0x84>
    c738:	e1 f0       	breq	.+56     	; 0xc772 <__mulsf3_pse+0x9c>
    c73a:	88 23       	and	r24, r24
    c73c:	4a f0       	brmi	.+18     	; 0xc750 <__mulsf3_pse+0x7a>
    c73e:	ee 0f       	add	r30, r30
    c740:	ff 1f       	adc	r31, r31
    c742:	bb 1f       	adc	r27, r27
    c744:	66 1f       	adc	r22, r22
    c746:	77 1f       	adc	r23, r23
    c748:	88 1f       	adc	r24, r24
    c74a:	91 50       	subi	r25, 0x01	; 1
    c74c:	50 40       	sbci	r21, 0x00	; 0
    c74e:	a9 f7       	brne	.-22     	; 0xc73a <__mulsf3_pse+0x64>
    c750:	9e 3f       	cpi	r25, 0xFE	; 254
    c752:	51 05       	cpc	r21, r1
    c754:	70 f0       	brcs	.+28     	; 0xc772 <__mulsf3_pse+0x9c>
    c756:	5c cf       	rjmp	.-328    	; 0xc610 <__fp_inf>
    c758:	a6 cf       	rjmp	.-180    	; 0xc6a6 <__fp_szero>
    c75a:	5f 3f       	cpi	r21, 0xFF	; 255
    c75c:	ec f3       	brlt	.-6      	; 0xc758 <__mulsf3_pse+0x82>
    c75e:	98 3e       	cpi	r25, 0xE8	; 232
    c760:	dc f3       	brlt	.-10     	; 0xc758 <__mulsf3_pse+0x82>
    c762:	86 95       	lsr	r24
    c764:	77 95       	ror	r23
    c766:	67 95       	ror	r22
    c768:	b7 95       	ror	r27
    c76a:	f7 95       	ror	r31
    c76c:	e7 95       	ror	r30
    c76e:	9f 5f       	subi	r25, 0xFF	; 255
    c770:	c1 f7       	brne	.-16     	; 0xc762 <__mulsf3_pse+0x8c>
    c772:	fe 2b       	or	r31, r30
    c774:	88 0f       	add	r24, r24
    c776:	91 1d       	adc	r25, r1
    c778:	96 95       	lsr	r25
    c77a:	87 95       	ror	r24
    c77c:	97 f9       	bld	r25, 7
    c77e:	08 95       	ret

0000c780 <memcpy_P>:
    c780:	fb 01       	movw	r30, r22
    c782:	dc 01       	movw	r26, r24
    c784:	02 c0       	rjmp	.+4      	; 0xc78a <memcpy_P+0xa>
    c786:	05 90       	lpm	r0, Z+
    c788:	0d 92       	st	X+, r0
    c78a:	41 50       	subi	r20, 0x01	; 1
    c78c:	50 40       	sbci	r21, 0x00	; 0
    c78e:	d8 f7       	brcc	.-10     	; 0xc786 <memcpy_P+0x6>
    c790:	08 95       	ret

0000c792 <_exit>:
    c792:	f8 94       	cli

0000c794 <__stop_program>:
    c794:	ff cf       	rjmp	.-2      	; 0xc794 <__stop_program>
