
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000e0a2  0000e1a2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e0a2  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f42  00800104  00800104  0000e1c4  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e1a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000e724  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e97a  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000730  00000000  00000000  0000e990  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00009f35  00000000  00000000  0000f0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000169d  00000000  00000000  00018ff5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002419  00000000  00000000  0001a692  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  0000170c  00000000  00000000  0001caac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001f98  00000000  00000000  0001e1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000091a6  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000818  00000000  00000000  000292f8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 3b 	jmp	0x76d6	; 0x76d6 <__ctors_end>
       4:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
       8:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
       c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      10:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      14:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      18:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      1c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      20:	0c 94 5d 40 	jmp	0x80ba	; 0x80ba <__vector_8>
      24:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      28:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      2c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      30:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      34:	0c 94 26 3e 	jmp	0x7c4c	; 0x7c4c <__vector_13>
      38:	0c 94 65 3e 	jmp	0x7cca	; 0x7cca <__vector_14>
      3c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      40:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      44:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      48:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      4c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      50:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      54:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      58:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      5c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      60:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      64:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      68:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>
      6c:	0c 94 d6 3b 	jmp	0x77ac	; 0x77ac <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	10 42 13 42 6f 42 73 42 7a 42 1b 42 20 42 25 42     .B.BoBsBzB.B B%B
      ce:	82 42 28 42 2b 42 2e 42 69 42 6c 42 92 42           .B(B+B.BiBlB.B

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <ATERROR>:
      e8:	0d 0a 45 52 52 4f 52 0d 0a 00                       ..ERROR...

000000f2 <ATOK>:
      f2:	0d 0a 4f 4b 0d 0a 00                                ..OK...

000000f9 <ATGETMAC>:
      f9:	41 54 2b 43 49 50 53 54 41 4d 41 43 5f 44 45 46     AT+CIPSTAMAC_DEF
     109:	3f 0d 0a 00                                         ?...

0000010d <ATRESTART>:
     10d:	41 54 2b 52 53 54 0d 0a 00                          AT+RST...

00000116 <strCredits>:
     116:	54 41 4e 4b 20 46 55 20 56 32 2e 30 20 46 4f 52     TANK FU V2.0 FOR
     126:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     136:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     146:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     156:	4f 4b 53 00 23 00                                   OKS.#.

0000015c <default_scores>:
     15c:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     16c:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000017a <default_handles>:
     17a:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     18a:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000198 <strLevels>:
     198:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     1a8:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     1b8:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     1c8:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     1d8:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     1e8:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     1f8:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     208:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     218:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     228:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     238:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

00000248 <strPaused>:
     248:	50 41 55 53 45 44 00                                PAUSED.

0000024f <strExit>:
     24f:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

00000258 <strTotal>:
     258:	54 4f 54 41 4c 3a 00                                TOTAL:.

0000025f <strScore>:
     25f:	53 43 4f 52 45 3a 00                                SCORE:.

00000266 <strFinalScore>:
     266:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

00000272 <strBy>:
     272:	42 59 00                                            BY.

00000275 <strOwns>:
     275:	4f 57 4e 53 00                                      OWNS.

0000027a <strChangeHandle>:
     27a:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000289 <strPlayer2>:
     289:	50 32 00                                            P2.

0000028c <strPlayer1>:
     28c:	50 31 00                                            P1.

0000028f <strVertSep>:
     28f:	3b 00                                               ;.

00000291 <strUnderline>:
     291:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000029d <strHandlesTitle>:
     29d:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

000002a9 <strHighscores>:
     2a9:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

000002b3 <strCopyright>:
     2b3:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     2c3:	4f 4f 4b 53 00                                      OOKS.

000002c8 <strSelectHandle>:
     2c8:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

000002d7 <strCancelHandle>:
     2d7:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

000002e2 <strReset>:
     2e2:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     2f2:	20 53 4c 20 28 35 53 29 00                           SL (5S).

000002fb <strConfirmHandle>:
     2fb:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     30b:	54 00                                               T.

0000030d <str2Player>:
     30d:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

0000031e <str1Player>:
     31e:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

0000032c <my_patches>:
     32c:	02 20 0c 00 00 e3 06 e4 06 02 d9 09 00 00 45 02     . ............E.
     33c:	46 02 02 28 08 00 00 af 01 b0 01 02 08 06 00 00     F..(............
     34c:	1e 02 1f 02 02 96 04 00 00 70 01 71 01 02 d9 09     .........p.q....
     35c:	00 00 45 02 46 02 02 20 0c 00 00 e3 06 e4 06 00     ..E.F.. ........
     36c:	00 00 74 03 00 00 00 00                             ..t.....

00000374 <ad_alarm>:
     374:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     384:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     394:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     3a4:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     3b4:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     3c4:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     3d4:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     3e4:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     3f4:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     404:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     414:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     424:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     434:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     444:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     454:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     464:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     474:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     484:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     494:	00 ff                                               ..

00000496 <ad_navigate>:
     496:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     4a6:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     4b6:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     4c6:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     4d6:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     4e6:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     4f6:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     506:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     516:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     526:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     536:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     546:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     556:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     566:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     576:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     586:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     596:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     5a6:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     5b6:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     5c6:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     5d6:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     5e6:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     5f6:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000608 <ad_metal>:
     608:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     618:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     628:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     638:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     648:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     658:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     668:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     678:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     688:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     698:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     6a8:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     6b8:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     6c8:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     6d8:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     6e8:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     6f8:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     708:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     718:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     728:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     738:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     748:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     758:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     768:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     778:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     788:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     798:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     7a8:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     7b8:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     7c8:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     7d8:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     7e8:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     7f8:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     808:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     818:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

00000828 <ad_item>:
     828:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     838:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     848:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     858:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     868:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     878:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     888:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     898:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     8a8:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     8b8:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     8c8:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     8d8:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     8e8:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     8f8:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     908:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     918:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     928:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     938:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     948:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     958:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     968:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     978:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     988:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     998:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     9a8:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     9b8:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     9c8:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

000009d9 <ad_cannonball>:
     9d9:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     9e9:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     9f9:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     a09:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     a19:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     a29:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     a39:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     a49:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     a59:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     a69:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     a79:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     a89:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     a99:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     aa9:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     ab9:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     ac9:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     ad9:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     ae9:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     af9:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     b09:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     b19:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     b29:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     b39:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     b49:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     b59:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     b69:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     b79:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     b89:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     b99:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     ba9:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     bb9:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     bc9:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     bd9:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     be9:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     bf9:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     c09:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c19:	ff ff ff ff ff 00 00                                .......

00000c20 <ad_brick_explode>:
     c20:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     c30:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     c40:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     c50:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     c60:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     c70:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     c80:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     c90:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     ca0:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     cb0:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     cc0:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     cd0:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     ce0:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     cf0:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     d00:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     d10:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     d20:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     d30:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     d40:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     d50:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     d60:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     d70:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     d80:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     d90:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     da0:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     db0:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     dc0:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     dd0:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     de0:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     df0:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     e00:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     e10:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     e20:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     e30:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     e40:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     e50:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     e60:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     e70:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     e80:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     e90:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     ea0:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     eb0:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     ec0:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     ed0:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     ee0:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     ef0:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     f00:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     f10:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     f20:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     f30:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     f40:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     f50:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     f60:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     f70:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
     f80:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
     f90:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
     fa0:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
     fb0:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
     fc0:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
     fd0:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
     fe0:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
     ff0:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    1000:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    1010:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    1020:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    1030:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    1040:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    1050:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    1060:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    1070:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1080:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1090:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    10a0:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    10b0:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    10c0:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    10d0:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    10e0:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    10f0:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    1100:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    1110:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    1120:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    1130:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    1140:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    1150:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    1160:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    1170:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1180:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1190:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    11a0:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    11b0:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    11c0:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    11d0:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    11e0:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    11f0:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1200:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1210:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    1220:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    1230:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    1240:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    1250:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    1260:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    1270:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1280:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1290:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    12a0:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    12b0:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    12c0:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    12d0:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    12e0:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    12f0:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1300:	04 04 02 01 00                                      .....

00001305 <level_data>:
    1305:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1315:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    133d:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1355:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1365:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1375:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1391:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    13a1:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    13b1:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    13cd:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    13ed:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    13fd:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    140d:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    141d:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    142d:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    143d:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    144d:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    145d:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    146d:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    147d:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    148d:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    149d:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    14ad:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    14bd:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    14d5:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    14e5:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1501:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1519:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1535:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1545:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1555:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1571:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1581:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1591:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    15b1:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    15d1:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15e1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    15f1:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1601:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1611:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    162d:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1649:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1659:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1669:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1679:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1689:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1699:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    16a9:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    16b9:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    16c9:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    16d9:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    16e9:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    16f9:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1709:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1719:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1729:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1739:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1749:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1759:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1769:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1779:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1789:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1799:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    17a9:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    17b9:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    17c9:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    17d9:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    17e9:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    17f9:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1809:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1819:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1829:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1839:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    1849:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1859:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1869:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    1879:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    1889:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18a1:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    18bd:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    18cd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18dd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18ed:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    18fd:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1919:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1939:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1955:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1975:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1991:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    19b1:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    19c9:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    19e5:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    19f5:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1a05:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    1a15:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    1a25:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    1a35:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    1a45:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    1a55:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    1a65:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    1a75:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    1a85:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    1a95:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    1aa5:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    1ab5:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    1ac5:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1ad5:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1ae5:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1af5:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    1b11:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1b35:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b55:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b71:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b91:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bad:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bbd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bcd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bdd:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1bed:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    1bfd:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    1c0d:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    1c1d:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    1c2d:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    1c3d:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    1c4d:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    1c5d:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    1c6d:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    1c7d:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    1c8d:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    1c9d:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    1cad:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    1cbd:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    1ccd:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    1cdd:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1cf9:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1d11:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    1d21:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    1d31:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    1d41:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    1d59:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    1d69:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    1d79:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1d89:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    1d99:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    1da9:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    1dc1:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    1dd1:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    1de1:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    1df9:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    1e09:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    1e19:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    1e29:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    1e39:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    1e49:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    1e59:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    1e71:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    1e81:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e99:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    1ea9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1eb9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ec9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ed9:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ef5:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    1f11:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1f31:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    1f41:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1f51:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1f6d:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    1f8d:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    1fa9:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    1fc9:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    1fd9:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1fe9:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    1ff9:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2011:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    2021:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    2031:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    2041:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    2051:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2061:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    207d:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    208d:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    209d:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    20ad:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    20cd:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    20e9:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    2109:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    2121:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2131:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    214d:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    2169:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    2189:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2199:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21a9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21b9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    21c9:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    21d9:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    21f1:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    2201:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    2211:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    2221:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    2231:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    2241:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2251:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    2261:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2271:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2299:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    22a9:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    22b9:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    22c9:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    22e1:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    22f1:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    2301:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    2311:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    2321:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    2331:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    2341:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    2359:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    2369:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2379:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2389:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2399:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    23a9:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    23b9:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    23c9:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    23d9:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    23e9:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    23f9:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2409:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2419:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2429:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2439:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2455:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2479:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2489:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2499:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24a9:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    24b9:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    24c9:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    24e1:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    24f1:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2501:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2511:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2521:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2531:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2541:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2551:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2561:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2571:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2581:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    25a5:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    25c1:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    25d1:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    25e1:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    25f1:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2601:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2611:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2621:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2631:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2649:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2659:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2675:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2695:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    26a5:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    26b5:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    26c5:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    26d5:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    26e5:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    26f5:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2705:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2715:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2725:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2735:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2745:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2755:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2765:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2775:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2785:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2795:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    27a5:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27c1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27dd:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    27fd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2819:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2829:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    2839:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2855:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    286d:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    287d:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    288d:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    289d:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    28ad:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    28bd:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    28cd:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    28dd:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    28ed:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    28fd:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    290d:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    291d:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    2935:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    2945:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    2955:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    2965:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2975:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    2985:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29a1:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29bd:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    29cd:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    29dd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    29f9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a19:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a35:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2a55:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a65:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a75:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2a85:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    2aad:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2acd:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ae9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b09:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2b19:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2b29:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2b45:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    2b61:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2b79:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    2b89:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    2b99:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    2ba9:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    2bb9:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    2bc9:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    2bd9:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    2be9:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    2bf9:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    2c09:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    2c19:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    2c29:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    2c39:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    2c51:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    2c71:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2c8d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2cad:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    2cbd:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    2ccd:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2ce9:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d05:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d25:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d41:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d51:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d61:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d71:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2d81:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2d91:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2da9:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2db9:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2dc9:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    2dd9:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    2de9:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2df9:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    2e09:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2e21:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2e31:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2e41:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    2e51:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2e61:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2e71:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e8d:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    2e9d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    2ead:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    2ebd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    2ecd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    2edd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    2eed:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    2efd:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    2f0d:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    2f1d:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    2f41:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    2f51:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    2f61:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    2f71:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    2f89:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    2f99:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    2fa9:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    2fb9:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    2fc9:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    2fd9:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    2fe9:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    3001:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3011:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3021:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3031:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3041:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3051:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3061:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    3071:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3081:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3091:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30a1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    30b1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30c1:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    30d1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    30e1:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    30f1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3101:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    3111:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3121:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3131:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3141:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3151:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3161:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3171:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3181:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3191:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    31a1:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    31b1:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    31c1:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    31d1:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    31f1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3211:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    322d:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    324d:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    3265:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    3289:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32a5:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32c5:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32e1:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    32f1:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3301:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    331d:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    332d:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    333d:	02 02                                               ..

0000333f <sprites_data>:
    333f:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    334f:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    335f:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    336f:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    337f:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    338f:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    339f:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    33af:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    33bf:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    33cf:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    33df:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    33ef:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    33ff:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    340f:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    341f:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    342f:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    343f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    344f:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    345f:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    346f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    347f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    348f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    349f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    34af:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    34bf:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    34cf:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    34df:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    34ef:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    34ff:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    350f:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    351f:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    352f:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    353f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    354f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    355f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    356f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    357f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    358f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    359f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    35af:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35bf:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    35cf:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    35df:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    35ef:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    35ff:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    360f:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    361f:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    362f:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    363f:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    364f:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    365f:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    366f:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    367f:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    368f:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    369f:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    36af:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    36bf:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    36cf:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    36df:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    36ef:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    36ff:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    370f:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    371f:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    372f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    373f:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    374f:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    375f:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    376f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    377f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    378f:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    379f:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    37af:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    37bf:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    37cf:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    37df:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    37ef:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    37ff:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    380f:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    381f:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    382f:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    383f:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    384f:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    385f:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    386f:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    387f:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    388f:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    389f:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    38af:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    38bf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38cf:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    38df:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    38ef:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    38ff:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    390f:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    391f:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    392f:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    393f:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    394f:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    395f:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    396f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    397f:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    398f:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    399f:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    39af:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39bf:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    39cf:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    39df:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    39ef:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    39ff:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a0f:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    3a1f:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    3a2f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3a3f:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3a4f:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3a5f:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3a6f:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3a7f:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3a8f:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3a9f:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3aaf:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3abf:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3acf:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3adf:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3aef:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3aff:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3b0f:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3b1f:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3b2f:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3b3f:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    3b4f:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    3b5f:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    3b6f:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    3b7f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b8f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b9f:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    3baf:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    3bbf:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    3bcf:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    3bdf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bef:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bff:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    3c0f:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    3c1f:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    3c2f:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    3c3f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c4f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c5f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c6f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00003c7f <map_sub_turret>:
    3c7f:	01 01 23                                            ..#

00003c82 <map_sub_shot>:
    3c82:	01 01 1b                                            ...

00003c85 <map_up_arrow>:
    3c85:	01 01 22                                            .."

00003c88 <map_down_arrow>:
    3c88:	01 01 21                                            ..!

00003c8b <map_right_arrow>:
    3c8b:	01 01 20                                            .. 

00003c8e <map_rocket_right_1>:
    3c8e:	01 01 1a                                            ...

00003c91 <map_rocket_right_0>:
    3c91:	01 01 19                                            ...

00003c94 <map_rocket_up_1>:
    3c94:	01 01 18                                            ...

00003c97 <map_rocket_up_0>:
    3c97:	01 01 17                                            ...

00003c9a <map_ball>:
    3c9a:	01 01 16                                            ...

00003c9d <map_explosion_2>:
    3c9d:	02 02 08 09 09 08                                   ......

00003ca3 <map_explosion_1>:
    3ca3:	02 02 06 07 10 11                                   ......

00003ca9 <map_explosion_0>:
    3ca9:	02 02 04 05 0e 0f                                   ......

00003caf <map_tank2_right_0>:
    3caf:	02 02 14 15 1e 1f                                   ......

00003cb5 <map_tank2_up_0>:
    3cb5:	02 02 12 13 1c 1d                                   ......

00003cbb <map_tank1_right_0>:
    3cbb:	02 02 02 03 0c 0d                                   ......

00003cc1 <map_tank1_up_0>:
    3cc1:	02 02 00 01 0a 0b                                   ......

00003cc7 <map_tank_blank>:
    3cc7:	02 02 24 24 24 24                                   ..$$$$

00003ccd <map_none>:
    3ccd:	01 01 24                                            ..$

00003cd0 <tiles_data>:
	...
    3d10:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3d20:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3d30:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3d40:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3d50:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    3d60:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    3d70:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3d80:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3d90:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    3da0:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    3db0:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    3dc0:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    3dd0:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    3de0:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    3df0:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    3e00:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    3e10:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3e20:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3e30:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    3e40:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3e58:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3e68:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3e78:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    3e90:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    3ea0:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    3eb0:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    3ec0:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3ed8:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    3ef8:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    3f10:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    3f20:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    3f30:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    3f40:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    3f50:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    3f60:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    3f70:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    3f80:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    3f90:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    3fa0:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    3fb0:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    3fc0:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    3fd0:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    3fe0:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    3ff0:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    4000:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    4010:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4020:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4030:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4040:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4050:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4060:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4070:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4080:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4090:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    40a0:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    40b0:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    40c0:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    40d0:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    40e0:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    40f0:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    4100:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4110:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    4120:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4130:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4140:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4150:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4160:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4170:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4180:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4190:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    41a0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    41b0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    41c0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    41d0:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    41e0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    41f0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4200:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4230:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4240:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4250:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4260:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4270:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4280:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4290:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    42a0:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    42b0:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    42c0:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    42d0:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    42e0:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    42f0:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4300:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4310:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4320:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4330:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4340:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4350:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4360:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4370:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4380:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4390:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43a0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    43d0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43e0:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    43f0:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4400:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4410:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4420:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4430:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4440:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4450:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4490:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    44a0:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    44b0:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    44c0:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    44d0:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    44e0:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    44f0:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4500:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    4540:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4578:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4588:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4598:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    45a8:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    45b8:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    45c8:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    45d8:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    45e8:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    45f8:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4608:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4618:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4628:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4638:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4648:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4658:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4668:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4678:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4688:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4698:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    46a8:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    46b8:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    46c8:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    46d8:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    46e8:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    46f8:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4708:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4718:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4750:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4760:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4770:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4794:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    47a4:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    47b4:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    47c4:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    47d4:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    47e4:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    47f4:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4804:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4814:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4824:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4834:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4844:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    4854:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4864:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4874:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    4884:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    4894:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    48a4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48b4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48c4:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    48d4:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    48e4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    48f4:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4904:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    4914:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    4924:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    4934:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    4944:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    4954:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    4964:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    4974:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    4984:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    4994:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    49a4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    49b4:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    49c4:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    49d4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    49e4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    49f4:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    4a04:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    4a14:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4a24:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    4a34:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    4a44:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4a54:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4a64:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4a74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4a84:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4a94:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    4aa4:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4ab4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ac4:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4ad4:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    4ae4:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4af4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b04:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4b14:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4b24:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b34:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b44:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    4b54:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    4b64:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4b74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4b84:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4b94:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ba4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4bb4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4bc4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    4bd4:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4be4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4bf4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    4c04:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4c14:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4c24:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c34:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    4c44:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    4c54:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    4c64:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    4c74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4c84:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4c94:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4ca4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    4cb4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4cc4:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    4cd4:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4ce4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    4cf4:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    4d04:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    4d14:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d24:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    4d34:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    4d44:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    4d54:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    4d64:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    4d74:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    4d84:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    4d94:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    4da4:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    4db4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    4dc4:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    4dd4:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4de4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4df4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e04:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    4e14:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e24:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e34:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    4e44:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    4e54:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e64:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4e74:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    4e84:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    4e94:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ea4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4eb4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4ec4:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    4ed4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ee4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    4ef4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    4f04:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    4f14:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    4f24:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    4f34:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4f44:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f54:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f64:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    4f74:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4f84:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4f94:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    4fa4:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    4fb4:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    4fc4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4fd4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    4fe4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    4ff4:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    5004:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    5014:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5024:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5034:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5044:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5054:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5064:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5074:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5084:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5094:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    50a4:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    50b4:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    50c4:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    50d4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    50e4:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    50f4:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5104:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    5114:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    5124:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5134:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5144:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5154:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5164:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5174:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5184:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5194:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    51a4:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    51b4:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    51c4:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    51d4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51e4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    51f4:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5204:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5214:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5224:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5234:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5244:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5254:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5264:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5274:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5284:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5294:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52a4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52b4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52c4:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    52d4:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    52e4:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    52f4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5304:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5314:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5324:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5334:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5344:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5354:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5364:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5374:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5384:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5394:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    53a4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    53b4:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    53c4:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    53d4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53e4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    53f4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5404:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    5414:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    5424:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5434:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5444:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5454:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5464:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5474:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5484:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5494:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    54a4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    54b4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    54c4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    54d4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    54e4:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    54f4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5504:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5514:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    5524:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5534:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5544:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5554:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5564:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5574:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5584:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5594:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    55a4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    55b4:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    55c4:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    55d4:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    55e4:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    55f4:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    5604:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    5614:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    5624:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5634:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5644:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5654:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5664:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5674:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5684:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5694:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    56a4:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    56b4:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    56c4:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    56d4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    56e4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    56f4:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    5704:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5714:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5724:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5734:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5744:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5754:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5764:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5774:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5784:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5794:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57a4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    57b4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57c4:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    57d4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    57e4:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    57f4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5804:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5814:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5824:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5834:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5844:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5854:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5864:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5874:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    5884:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5894:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    58a4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    58b4:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    58c4:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    58d4:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    58e4:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    58f4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5904:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5914:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    5924:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5934:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5944:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    5954:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5964:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5974:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5984:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5994:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    59a4:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    59b4:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    59c4:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    59d4:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    59e4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    59f4:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5a04:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    5a14:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a24:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5a34:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5a44:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5a54:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5a64:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    5a74:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    5a84:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5a94:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    5aa4:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ab4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5ac4:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5ad4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5ae4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5af4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5b04:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    5b14:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5b24:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b34:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b44:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5b54:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5b64:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b74:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b84:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5b94:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5ba4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bb4:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bc4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5bd4:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5be4:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bf4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c04:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    5c14:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    5c24:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5c34:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c44:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c54:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c64:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c74:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    5c84:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    5c94:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    5ca4:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cb4:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5cc4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    5cd4:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    5ce4:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cf4:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d04:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    5d14:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    5d24:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    5d34:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d44:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5d54:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    5d64:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    5d74:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5d84:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    5d94:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    5da4:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5db4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5dc4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5dd4:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5de4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5df4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5e04:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    5e14:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5e24:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5e34:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5e44:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    5e54:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5e64:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5e74:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5e84:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5e94:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5ea4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5eb4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5ec4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5ed4:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5ee4:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    5ef4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f04:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5f14:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    5f24:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f34:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f44:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5f54:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    5f64:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f74:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5f84:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    5f94:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    5fa4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fb4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fc4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fd4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5fe4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    5ff4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6004:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    6014:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6024:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6034:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6044:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6054:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6064:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6074:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6084:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6094:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    60a4:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    60b4:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    60c4:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    60d4:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60e4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    60f4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6104:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6114:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6124:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6134:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6144:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6154:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6164:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6174:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6184:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6194:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61a4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    61b4:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    61c4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    61d4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61e4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    61f4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6204:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6214:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    6224:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6234:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6244:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6254:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6264:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6274:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6284:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6294:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62a4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62b4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    62c4:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    62d4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62e4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    62f4:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6304:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6314:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6324:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6334:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6344:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6354:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6364:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6374:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6384:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    63d8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    63e8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6400:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6418:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6428:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6458:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6468:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6478:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6490:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    64a0:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    64b0:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    64c0:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    64d8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    64e8:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    64f8:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    6510:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    6520:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6530:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6540:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6558:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6568:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    659c:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    65ac:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    65bc:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    65d8:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    65e8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    65f8:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6618:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6628:	df df df df df df df df 00 00 df df df df 00 00     ................
    6638:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    6658:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6668:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6678:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    66b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    66c8:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    66e8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6738:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    675c:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    676c:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    677c:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6798:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    67a8:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    67b8:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    67d8:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    67e8:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    67f8:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6818:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6828:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6838:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    6858:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    6868:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    6878:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    689c:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    68ac:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    68bc:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    68d8:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    68e8:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    68f8:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6918:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    6928:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    6938:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6958:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    6968:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    6978:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    6998:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    69a8:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    69b8:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    69d8:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    69e8:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    69f8:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    6a20:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a38:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6a50:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a60:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a70:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a80:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6a90:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    6aa0:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6ab0:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6ac0:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6ae0:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6af8:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6b10:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    6b20:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    6b30:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6b40:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6b58:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6b68:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6b80:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6b98:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6ba8:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    6bb8:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    6bd8:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6be8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6bf8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6c18:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6c28:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6c38:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    6c58:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6c68:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6c78:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6c98:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    6ca8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6cb8:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    6cd8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6ce8:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6cf8:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6d18:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6d28:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    6d38:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6d58:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    6d68:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    6d78:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    6d98:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6da8:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6db8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6dd8:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6de8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6df8:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6e1c:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6e2c:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    6e3c:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    6e58:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6e68:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    6e78:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    6e98:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6ea8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    6eb8:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    6ed8:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    6ee8:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    6ef8:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    6f18:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    6f28:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6f38:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    6f58:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6f68:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6f78:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    6f98:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6fa8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6fb8:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    6fd8:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    6fe8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6ff8:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    7018:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7028:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7038:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7058:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7068:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7078:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7098:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    70a8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    70b8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    70d8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70e8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    70f8:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    7118:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7128:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7138:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7158:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7168:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7178:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7198:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    71a8:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    71b8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    71d8:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    71e8:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    71f8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7218:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    7228:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7238:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7258:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7268:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7278:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7298:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    72a8:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    72b8:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    72d8:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72e8:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    72f8:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    731c:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    732c:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7380:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00007390 <map_sub_emerging>:
    7390:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73a0:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    73b0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73c0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73d0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    73e0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    73f0:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    7400:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    7410:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    7420:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    7430:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    7440:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    7450:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7460:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7470:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7480:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7490:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74a0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74b0:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74c0:	0d 0d 0d 0d 0d 0d                                   ......

000074c6 <map_sub>:
    74c6:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74d6:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    74e6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    74f6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7506:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7516:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7526:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7536:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7546:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7556:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7566:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7576:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7586:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7596:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    75a6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75b6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75c6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75d6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75e6:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    75f6:	0d 0d 0d 0d 0d 0d                                   ......

000075fc <map_scope_2>:
    75fc:	01 01 12                                            ...

000075ff <map_scope_1>:
    75ff:	01 01 11                                            ...

00007602 <map_scope_0>:
    7602:	01 01 10                                            ...

00007605 <map_blue_tank>:
    7605:	02 02 2b 2c 31 32                                   ..+,12

0000760b <map_green_tank>:
    760b:	02 02 18 19 23 24                                   ....#$

00007611 <map_fence>:
    7611:	01 01 0f                                            ...

00007614 <map_turf>:
    7614:	01 01 0e                                            ...

00007617 <map_water>:
    7617:	01 01 0d                                            ...

0000761a <map_metal_bl>:
    761a:	01 01 0c                                            ...

0000761d <map_metal_tr>:
    761d:	01 01 0b                                            ...

00007620 <map_metal_br>:
    7620:	01 01 0a                                            ...

00007623 <map_metal_tl>:
    7623:	01 01 09                                            ...

00007626 <map_tile_exp_2>:
    7626:	01 01 08                                            ...

00007629 <map_tile_exp_1>:
    7629:	01 01 07                                            ...

0000762c <map_tile_exp_0>:
    762c:	01 01 06                                            ...

0000762f <map_rocket_itm>:
    762f:	01 01 04                                            ...

00007632 <map_explode_itm>:
    7632:	01 01 03                                            ...

00007635 <map_speed_itm>:
    7635:	01 01 02                                            ...

00007638 <map_metal>:
    7638:	01 01 05                                            ...

0000763b <map_brick>:
    763b:	01 01 01                                            ...

0000763e <map_splash>:
    763e:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    764e:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    765e:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    766e:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    767e:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    768e:	1a 00 00 1a 2f 30                                   ..../0

00007694 <map_pause>:
    7694:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    76a4:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    76b4:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    76c4:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

000076d2 <map_tile_none>:
    76d2:	01 01 00 00                                         ....

000076d6 <__ctors_end>:
    76d6:	11 24       	eor	r1, r1
    76d8:	1f be       	out	0x3f, r1	; 63
    76da:	cf ef       	ldi	r28, 0xFF	; 255
    76dc:	d0 e1       	ldi	r29, 0x10	; 16
    76de:	de bf       	out	0x3e, r29	; 62
    76e0:	cd bf       	out	0x3d, r28	; 61

000076e2 <__do_copy_data>:
    76e2:	11 e0       	ldi	r17, 0x01	; 1
    76e4:	a0 e0       	ldi	r26, 0x00	; 0
    76e6:	b1 e0       	ldi	r27, 0x01	; 1
    76e8:	e2 ea       	ldi	r30, 0xA2	; 162
    76ea:	f0 ee       	ldi	r31, 0xE0	; 224
    76ec:	02 c0       	rjmp	.+4      	; 0x76f2 <__do_copy_data+0x10>
    76ee:	05 90       	lpm	r0, Z+
    76f0:	0d 92       	st	X+, r0
    76f2:	a4 30       	cpi	r26, 0x04	; 4
    76f4:	b1 07       	cpc	r27, r17
    76f6:	d9 f7       	brne	.-10     	; 0x76ee <__do_copy_data+0xc>

000076f8 <__do_clear_bss>:
    76f8:	10 e1       	ldi	r17, 0x10	; 16
    76fa:	a4 e0       	ldi	r26, 0x04	; 4
    76fc:	b1 e0       	ldi	r27, 0x01	; 1
    76fe:	01 c0       	rjmp	.+2      	; 0x7702 <.do_clear_bss_start>

00007700 <.do_clear_bss_loop>:
    7700:	1d 92       	st	X+, r1

00007702 <.do_clear_bss_start>:
    7702:	a6 34       	cpi	r26, 0x46	; 70
    7704:	b1 07       	cpc	r27, r17
    7706:	e1 f7       	brne	.-8      	; 0x7700 <.do_clear_bss_loop>

00007708 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7708:	0e 94 30 40 	call	0x8060	; 0x8060 <wdt_randomize>
#endif

    MCUSR = 0;
    770c:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    770e:	88 e1       	ldi	r24, 0x18	; 24
    7710:	0f b6       	in	r0, 0x3f	; 63
    7712:	f8 94       	cli
    7714:	80 93 60 00 	sts	0x0060, r24
    7718:	10 92 60 00 	sts	0x0060, r1
    771c:	0f be       	out	0x3f, r0	; 63

0000771e <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    771e:	0e 94 f2 40 	call	0x81e4	; 0x81e4 <isEepromFormatted>
    7722:	81 11       	cpse	r24, r1
    7724:	02 c0       	rjmp	.+4      	; 0x772a <Initialize+0xc>
    7726:	0e 94 d0 40 	call	0x81a0	; 0x81a0 <FormatEeprom>

	cli();
    772a:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    772c:	c1 e0       	ldi	r28, 0x01	; 1
    772e:	c0 93 58 0a 	sts	0x0A58, r28
		tr4_barrel_hi=1;		
    7732:	c0 93 59 0a 	sts	0x0A59, r28
		tr4_params=0b00000001; //15 bits no divider (1)
    7736:	c0 93 57 0a 	sts	0x0A57, r28
	#endif

	#if UART == 1
		InitUartRxBuffer();
    773a:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <InitUartRxBuffer>
		InitUartTxBuffer();
    773e:	0e 94 dd 41 	call	0x83ba	; 0x83ba <InitUartTxBuffer>
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7742:	10 92 44 0a 	sts	0x0A44, r1
    7746:	10 92 4a 0a 	sts	0x0A4A, r1
    774a:	10 92 50 0a 	sts	0x0A50, r1
    774e:	10 92 56 0a 	sts	0x0A56, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7752:	10 92 20 0a 	sts	0x0A20, r1
	sync_flags=0;
    7756:	10 92 22 0a 	sts	0x0A22, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    775a:	82 e1       	ldi	r24, 0x12	; 18
    775c:	80 93 21 0a 	sts	0x0A21, r24

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7760:	80 ee       	ldi	r24, 0xE0	; 224
    7762:	80 93 28 0a 	sts	0x0A28, r24
	first_render_line=FIRST_RENDER_LINE;
    7766:	84 e1       	ldi	r24, 0x14	; 20
    7768:	80 93 27 0a 	sts	0x0A27, r24

	joypad1_status_hi=0;
    776c:	10 92 2c 0a 	sts	0x0A2C, r1
    7770:	10 92 2b 0a 	sts	0x0A2B, r1
	joypad2_status_hi=0;
    7774:	10 92 30 0a 	sts	0x0A30, r1
    7778:	10 92 2f 0a 	sts	0x0A2F, r1
	sound_enabled=1;
    777c:	c0 93 43 0a 	sts	0x0A43, r28

	InitializeVideoMode();
    7780:	0e 94 5e 4d 	call	0x9abc	; 0x9abc <InitializeVideoMode>
    7784:	80 e7       	ldi	r24, 0x70	; 112
    7786:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7788:	fc 01       	movw	r30, r24
    778a:	25 91       	lpm	r18, Z+
    778c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    778e:	f9 01       	movw	r30, r18
    7790:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7792:	30 83       	st	Z, r19
    7794:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7796:	20 e0       	ldi	r18, 0x00	; 0
    7798:	8e 39       	cpi	r24, 0x9E	; 158
    779a:	92 07       	cpc	r25, r18
    779c:	a9 f7       	brne	.-22     	; 0x7788 <Initialize+0x6a>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    779e:	78 94       	sei
	
	DisplayLogo();
    77a0:	0e 94 5d 4d 	call	0x9aba	; 0x9aba <DisplayLogo>
    77a4:	0e 94 47 6d 	call	0xda8e	; 0xda8e <main>
    77a8:	0c 94 4f 70 	jmp	0xe09e	; 0xe09e <_exit>

000077ac <__bad_interrupt>:
    77ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000077b0 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    77b0:	0b e9       	ldi	r16, 0x9B	; 155
    77b2:	0a 95       	dec	r16
    77b4:	f1 f7       	brne	.-4      	; 0x77b2 <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    77b6:	10 e0       	ldi	r17, 0x00	; 0
    77b8:	1a 95       	dec	r17
    77ba:	f1 f7       	brne	.-4      	; 0x77b8 <sub_video_mode3+0x8>
    77bc:	1e e1       	ldi	r17, 0x1E	; 30
    77be:	1a 95       	dec	r17
    77c0:	f1 f7       	brne	.-4      	; 0x77be <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    77c2:	20 90 1e 0a 	lds	r2, 0x0A1E
		lds r3,overlay_tile_table+1
    77c6:	30 90 1f 0a 	lds	r3, 0x0A1F
		lds r16,tile_table_lo 
    77ca:	00 91 1a 0a 	lds	r16, 0x0A1A
		lds r17,tile_table_hi
    77ce:	10 91 1b 0a 	lds	r17, 0x0A1B
		movw r12,r16
    77d2:	68 01       	movw	r12, r16
		movw r6,r16
    77d4:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    77d6:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    77d8:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    77da:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    77dc:	4e 01       	movw	r8, r28
		clr r0
    77de:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    77e0:	30 91 1d 0a 	lds	r19, 0x0A1D
		cpi r19,0
    77e4:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    77e6:	09 f0       	breq	.+2      	; 0x77ea <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    77e8:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    77ea:	09 f0       	breq	.+2      	; 0x77ee <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    77ec:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    77ee:	09 f0       	breq	.+2      	; 0x77f2 <sub_video_mode3+0x42>
		mov r24,r19
    77f0:	83 2f       	mov	r24, r19

		breq .+2
    77f2:	09 f0       	breq	.+2      	; 0x77f6 <sub_video_mode3+0x46>
		movw r12,r2
    77f4:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    77f6:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    77f8:	a0 2e       	mov	r10, r16
		clr r22
    77fa:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    77fc:	78 e0       	ldi	r23, 0x08	; 8

000077fe <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    77fe:	07 d3       	rcall	.+1550   	; 0x7e0e <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    7800:	3c e0       	ldi	r19, 0x0C	; 12
    7802:	3a 95       	dec	r19
    7804:	f1 f7       	brne	.-4      	; 0x7802 <next_tile_line+0x4>
    7806:	00 00       	nop

		;***draw line***
		call render_tile_line
    7808:	0e 94 30 3c 	call	0x7860	; 0x7860 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    780c:	3f e0       	ldi	r19, 0x0F	; 15
    780e:	3a 95       	dec	r19
    7810:	f1 f7       	brne	.-4      	; 0x780e <next_tile_line+0x10>
    7812:	00 c0       	rjmp	.+0      	; 0x7814 <next_tile_line+0x16>

		dec r10
    7814:	aa 94       	dec	r10
		breq frame_end
    7816:	a1 f0       	breq	.+40     	; 0x7840 <frame_end>
	
		inc r22
    7818:	63 95       	inc	r22
		lpm ;3 nop
    781a:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    781c:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    781e:	29 f0       	breq	.+10     	; 0x782a <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7820:	33 e0       	ldi	r19, 0x03	; 3
    7822:	3a 95       	dec	r19
    7824:	f1 f7       	brne	.-4      	; 0x7822 <next_tile_line+0x24>
    7826:	00 c0       	rjmp	.+0      	; 0x7828 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    7828:	ea cf       	rjmp	.-44     	; 0x77fe <next_tile_line>

0000782a <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    782a:	66 27       	eor	r22, r22

		clr r0
    782c:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    782e:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7830:	c3 0f       	add	r28, r19
		adc YH,r0
    7832:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7834:	8a 95       	dec	r24
		brne .+2
    7836:	09 f4       	brne	.+2      	; 0x783a <next_tile_row+0x10>
		movw YL,r8	;main vram
    7838:	e4 01       	movw	r28, r8
		brne .+2
    783a:	09 f4       	brne	.+2      	; 0x783e <next_tile_row+0x14>
		movw r12,r6	;main tile table
    783c:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    783e:	df cf       	rjmp	.-66     	; 0x77fe <next_tile_line>

00007840 <frame_end>:

	frame_end:

		WAIT r19,18
    7840:	36 e0       	ldi	r19, 0x06	; 6
    7842:	3a 95       	dec	r19
    7844:	f1 f7       	brne	.-4      	; 0x7842 <frame_end+0x2>

		rcall hsync_pulse ;145
    7846:	e3 d2       	rcall	.+1478   	; 0x7e0e <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    7848:	e0 91 22 0a 	lds	r30, 0x0A22
		ldi r20,SYNC_FLAG_FIELD
    784c:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    784e:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7850:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7852:	e0 93 22 0a 	sts	0x0A22, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    7856:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    7858:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    785c:	11 24       	eor	r1, r1


		ret
    785e:	08 95       	ret

00007860 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    7860:	de 01       	movw	r26, r28

		mul r22,r23
    7862:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    7864:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7866:	00 54       	subi	r16, 0x40	; 64
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    7868:	15 40       	sbci	r17, 0x05	; 5

		add r16,r0
    786a:	00 0d       	add	r16, r0
		adc r17,r1
    786c:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    786e:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    7870:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    7872:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    7874:	00 0d       	add	r16, r0
		adc r17,r1
    7876:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    7878:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    787a:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    787c:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    787e:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    7880:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    7882:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    7884:	25 31       	cpi	r18, 0x15	; 21
		brcc .+2
    7886:	08 f4       	brcc	.+2      	; 0x788a <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    7888:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    788a:	04 0e       	add	r0, r20
	    adc r1,r21
    788c:	15 1e       	adc	r1, r21

		movw ZL,r0
    788e:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    7890:	25 31       	cpi	r18, 0x15	; 21
		brcs ramloop
    7892:	f0 f0       	brcs	.+60     	; 0x78d0 <ramloop>

00007894 <romloop>:
	

	romloop:
	    lpm r16,Z+
    7894:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7896:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    7898:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    789a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    789c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    789e:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    78a0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    78a2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    78a4:	25 31       	cpi	r18, 0x15	; 21
		nop
    78a6:	00 00       	nop

	    lpm r16,Z+
    78a8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    78aa:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    78ac:	08 f4       	brcc	.+2      	; 0x78b0 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    78ae:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    78b0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    78b2:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    78b4:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    78b6:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    78b8:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    78ba:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    78bc:	25 31       	cpi	r18, 0x15	; 21
		dec r17			;decrement tiles to draw on line
    78be:	1a 95       	dec	r17
   
	    lpm r16,Z+
    78c0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    78c2:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    78c4:	05 91       	lpm	r16, Z+

		breq end	
    78c6:	31 f1       	breq	.+76     	; 0x7914 <end>
	    movw ZL,r0   	;copy next tile adress
    78c8:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    78ca:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    78cc:	18 f7       	brcc	.-58     	; 0x7894 <romloop>
	
		rjmp .
    78ce:	00 c0       	rjmp	.+0      	; 0x78d0 <ramloop>

000078d0 <ramloop>:

	ramloop:

	    ld r16,Z+
    78d0:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    78d2:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    78d4:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    78d6:	01 91       	ld	r16, Z+
		nop   
    78d8:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    78da:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    78dc:	23 9f       	mul	r18, r19


	    ld r16,Z+
    78de:	01 91       	ld	r16, Z+
		nop
    78e0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    78e2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    78e4:	25 31       	cpi	r18, 0x15	; 21
   		rjmp .
    78e6:	00 c0       	rjmp	.+0      	; 0x78e8 <ramloop+0x18>

	    ld r16,Z+
    78e8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    78ea:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    78ec:	08 f0       	brcs	.+2      	; 0x78f0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    78ee:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    78f0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    78f2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    78f4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    78f6:	15 1e       	adc	r1, r21
		rjmp .
    78f8:	00 c0       	rjmp	.+0      	; 0x78fa <ramloop+0x2a>
    
		ld r16,Z+		
    78fa:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    78fc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    78fe:	25 31       	cpi	r18, 0x15	; 21
		rjmp .  
    7900:	00 c0       	rjmp	.+0      	; 0x7902 <ramloop+0x32>

	    ld r16,Z+	
    7902:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    7904:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    7906:	01 91       	ld	r16, Z+

	    dec r17
    7908:	1a 95       	dec	r17
	    breq end
    790a:	21 f0       	breq	.+8      	; 0x7914 <end>
	
		movw ZL,r0
    790c:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    790e:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7910:	08 f6       	brcc	.-126    	; 0x7894 <romloop>
		rjmp ramloop
    7912:	de cf       	rjmp	.-68     	; 0x78d0 <ramloop>

00007914 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    7914:	08 b9       	out	0x08, r16	; 8
		clr r16	
    7916:	00 27       	eor	r16, r16
		lpm	
    7918:	c8 95       	lpm
		nop
    791a:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    791c:	08 b9       	out	0x08, r16	; 8

		ret
    791e:	08 95       	ret

00007920 <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7920:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7922:	e0 91 1a 0a 	lds	r30, 0x0A1A
	lds ZH,tile_table_hi
    7926:	f0 91 1b 0a 	lds	r31, 0x0A1B
	mul r24,r18
    792a:	82 9f       	mul	r24, r18
	add ZL,r0
    792c:	e0 0d       	add	r30, r0
	adc ZH,r1
    792e:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7930:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7932:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7934:	62 9f       	mul	r22, r18
	add XL,r0
    7936:	a0 0d       	add	r26, r0
	adc XH,r1
    7938:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    793a:	15 90       	lpm	r1, Z+
    793c:	1d 92       	st	X+, r1
    793e:	15 90       	lpm	r1, Z+
    7940:	1d 92       	st	X+, r1
    7942:	15 90       	lpm	r1, Z+
    7944:	1d 92       	st	X+, r1
    7946:	15 90       	lpm	r1, Z+
    7948:	1d 92       	st	X+, r1
    794a:	15 90       	lpm	r1, Z+
    794c:	1d 92       	st	X+, r1
    794e:	15 90       	lpm	r1, Z+
    7950:	1d 92       	st	X+, r1
    7952:	15 90       	lpm	r1, Z+
    7954:	1d 92       	st	X+, r1
    7956:	15 90       	lpm	r1, Z+
    7958:	1d 92       	st	X+, r1
    795a:	15 90       	lpm	r1, Z+
    795c:	1d 92       	st	X+, r1
    795e:	15 90       	lpm	r1, Z+
    7960:	1d 92       	st	X+, r1
    7962:	15 90       	lpm	r1, Z+
    7964:	1d 92       	st	X+, r1
    7966:	15 90       	lpm	r1, Z+
    7968:	1d 92       	st	X+, r1
    796a:	15 90       	lpm	r1, Z+
    796c:	1d 92       	st	X+, r1
    796e:	15 90       	lpm	r1, Z+
    7970:	1d 92       	st	X+, r1
    7972:	15 90       	lpm	r1, Z+
    7974:	1d 92       	st	X+, r1
    7976:	15 90       	lpm	r1, Z+
    7978:	1d 92       	st	X+, r1
    797a:	15 90       	lpm	r1, Z+
    797c:	1d 92       	st	X+, r1
    797e:	15 90       	lpm	r1, Z+
    7980:	1d 92       	st	X+, r1
    7982:	15 90       	lpm	r1, Z+
    7984:	1d 92       	st	X+, r1
    7986:	15 90       	lpm	r1, Z+
    7988:	1d 92       	st	X+, r1
    798a:	15 90       	lpm	r1, Z+
    798c:	1d 92       	st	X+, r1
    798e:	15 90       	lpm	r1, Z+
    7990:	1d 92       	st	X+, r1
    7992:	15 90       	lpm	r1, Z+
    7994:	1d 92       	st	X+, r1
    7996:	15 90       	lpm	r1, Z+
    7998:	1d 92       	st	X+, r1
    799a:	15 90       	lpm	r1, Z+
    799c:	1d 92       	st	X+, r1
    799e:	15 90       	lpm	r1, Z+
    79a0:	1d 92       	st	X+, r1
    79a2:	15 90       	lpm	r1, Z+
    79a4:	1d 92       	st	X+, r1
    79a6:	15 90       	lpm	r1, Z+
    79a8:	1d 92       	st	X+, r1
    79aa:	15 90       	lpm	r1, Z+
    79ac:	1d 92       	st	X+, r1
    79ae:	15 90       	lpm	r1, Z+
    79b0:	1d 92       	st	X+, r1
    79b2:	15 90       	lpm	r1, Z+
    79b4:	1d 92       	st	X+, r1
    79b6:	15 90       	lpm	r1, Z+
    79b8:	1d 92       	st	X+, r1
    79ba:	15 90       	lpm	r1, Z+
    79bc:	1d 92       	st	X+, r1
    79be:	15 90       	lpm	r1, Z+
    79c0:	1d 92       	st	X+, r1
    79c2:	15 90       	lpm	r1, Z+
    79c4:	1d 92       	st	X+, r1
    79c6:	15 90       	lpm	r1, Z+
    79c8:	1d 92       	st	X+, r1
    79ca:	15 90       	lpm	r1, Z+
    79cc:	1d 92       	st	X+, r1
    79ce:	15 90       	lpm	r1, Z+
    79d0:	1d 92       	st	X+, r1
    79d2:	15 90       	lpm	r1, Z+
    79d4:	1d 92       	st	X+, r1
    79d6:	15 90       	lpm	r1, Z+
    79d8:	1d 92       	st	X+, r1
    79da:	15 90       	lpm	r1, Z+
    79dc:	1d 92       	st	X+, r1
    79de:	15 90       	lpm	r1, Z+
    79e0:	1d 92       	st	X+, r1
    79e2:	15 90       	lpm	r1, Z+
    79e4:	1d 92       	st	X+, r1
    79e6:	15 90       	lpm	r1, Z+
    79e8:	1d 92       	st	X+, r1
    79ea:	15 90       	lpm	r1, Z+
    79ec:	1d 92       	st	X+, r1
    79ee:	15 90       	lpm	r1, Z+
    79f0:	1d 92       	st	X+, r1
    79f2:	15 90       	lpm	r1, Z+
    79f4:	1d 92       	st	X+, r1
    79f6:	15 90       	lpm	r1, Z+
    79f8:	1d 92       	st	X+, r1
    79fa:	15 90       	lpm	r1, Z+
    79fc:	1d 92       	st	X+, r1
    79fe:	15 90       	lpm	r1, Z+
    7a00:	1d 92       	st	X+, r1
    7a02:	15 90       	lpm	r1, Z+
    7a04:	1d 92       	st	X+, r1
    7a06:	15 90       	lpm	r1, Z+
    7a08:	1d 92       	st	X+, r1
    7a0a:	15 90       	lpm	r1, Z+
    7a0c:	1d 92       	st	X+, r1
    7a0e:	15 90       	lpm	r1, Z+
    7a10:	1d 92       	st	X+, r1
    7a12:	15 90       	lpm	r1, Z+
    7a14:	1d 92       	st	X+, r1
    7a16:	15 90       	lpm	r1, Z+
    7a18:	1d 92       	st	X+, r1
    7a1a:	15 90       	lpm	r1, Z+
    7a1c:	1d 92       	st	X+, r1
    7a1e:	15 90       	lpm	r1, Z+
    7a20:	1d 92       	st	X+, r1
    7a22:	15 90       	lpm	r1, Z+
    7a24:	1d 92       	st	X+, r1
    7a26:	15 90       	lpm	r1, Z+
    7a28:	1d 92       	st	X+, r1
    7a2a:	15 90       	lpm	r1, Z+
    7a2c:	1d 92       	st	X+, r1
    7a2e:	15 90       	lpm	r1, Z+
    7a30:	1d 92       	st	X+, r1
    7a32:	15 90       	lpm	r1, Z+
    7a34:	1d 92       	st	X+, r1
    7a36:	15 90       	lpm	r1, Z+
    7a38:	1d 92       	st	X+, r1
	clr r1
    7a3a:	11 24       	eor	r1, r1
	ret
    7a3c:	08 95       	ret

00007a3e <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7a3e:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    7a40:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    7a42:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    7a44:	82 9f       	mul	r24, r18
	add ZL,r0
    7a46:	e0 0d       	add	r30, r0
	adc ZH,r1
    7a48:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7a4a:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    7a4c:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    7a4e:	62 9f       	mul	r22, r18
	add XL,r0
    7a50:	a0 0d       	add	r26, r0
	adc XH,r1
    7a52:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    7a54:	11 90       	ld	r1, Z+
    7a56:	1d 92       	st	X+, r1
    7a58:	11 90       	ld	r1, Z+
    7a5a:	1d 92       	st	X+, r1
    7a5c:	11 90       	ld	r1, Z+
    7a5e:	1d 92       	st	X+, r1
    7a60:	11 90       	ld	r1, Z+
    7a62:	1d 92       	st	X+, r1
    7a64:	11 90       	ld	r1, Z+
    7a66:	1d 92       	st	X+, r1
    7a68:	11 90       	ld	r1, Z+
    7a6a:	1d 92       	st	X+, r1
    7a6c:	11 90       	ld	r1, Z+
    7a6e:	1d 92       	st	X+, r1
    7a70:	11 90       	ld	r1, Z+
    7a72:	1d 92       	st	X+, r1
    7a74:	11 90       	ld	r1, Z+
    7a76:	1d 92       	st	X+, r1
    7a78:	11 90       	ld	r1, Z+
    7a7a:	1d 92       	st	X+, r1
    7a7c:	11 90       	ld	r1, Z+
    7a7e:	1d 92       	st	X+, r1
    7a80:	11 90       	ld	r1, Z+
    7a82:	1d 92       	st	X+, r1
    7a84:	11 90       	ld	r1, Z+
    7a86:	1d 92       	st	X+, r1
    7a88:	11 90       	ld	r1, Z+
    7a8a:	1d 92       	st	X+, r1
    7a8c:	11 90       	ld	r1, Z+
    7a8e:	1d 92       	st	X+, r1
    7a90:	11 90       	ld	r1, Z+
    7a92:	1d 92       	st	X+, r1
    7a94:	11 90       	ld	r1, Z+
    7a96:	1d 92       	st	X+, r1
    7a98:	11 90       	ld	r1, Z+
    7a9a:	1d 92       	st	X+, r1
    7a9c:	11 90       	ld	r1, Z+
    7a9e:	1d 92       	st	X+, r1
    7aa0:	11 90       	ld	r1, Z+
    7aa2:	1d 92       	st	X+, r1
    7aa4:	11 90       	ld	r1, Z+
    7aa6:	1d 92       	st	X+, r1
    7aa8:	11 90       	ld	r1, Z+
    7aaa:	1d 92       	st	X+, r1
    7aac:	11 90       	ld	r1, Z+
    7aae:	1d 92       	st	X+, r1
    7ab0:	11 90       	ld	r1, Z+
    7ab2:	1d 92       	st	X+, r1
    7ab4:	11 90       	ld	r1, Z+
    7ab6:	1d 92       	st	X+, r1
    7ab8:	11 90       	ld	r1, Z+
    7aba:	1d 92       	st	X+, r1
    7abc:	11 90       	ld	r1, Z+
    7abe:	1d 92       	st	X+, r1
    7ac0:	11 90       	ld	r1, Z+
    7ac2:	1d 92       	st	X+, r1
    7ac4:	11 90       	ld	r1, Z+
    7ac6:	1d 92       	st	X+, r1
    7ac8:	11 90       	ld	r1, Z+
    7aca:	1d 92       	st	X+, r1
    7acc:	11 90       	ld	r1, Z+
    7ace:	1d 92       	st	X+, r1
    7ad0:	11 90       	ld	r1, Z+
    7ad2:	1d 92       	st	X+, r1
    7ad4:	11 90       	ld	r1, Z+
    7ad6:	1d 92       	st	X+, r1
    7ad8:	11 90       	ld	r1, Z+
    7ada:	1d 92       	st	X+, r1
    7adc:	11 90       	ld	r1, Z+
    7ade:	1d 92       	st	X+, r1
    7ae0:	11 90       	ld	r1, Z+
    7ae2:	1d 92       	st	X+, r1
    7ae4:	11 90       	ld	r1, Z+
    7ae6:	1d 92       	st	X+, r1
    7ae8:	11 90       	ld	r1, Z+
    7aea:	1d 92       	st	X+, r1
    7aec:	11 90       	ld	r1, Z+
    7aee:	1d 92       	st	X+, r1
    7af0:	11 90       	ld	r1, Z+
    7af2:	1d 92       	st	X+, r1
    7af4:	11 90       	ld	r1, Z+
    7af6:	1d 92       	st	X+, r1
    7af8:	11 90       	ld	r1, Z+
    7afa:	1d 92       	st	X+, r1
    7afc:	11 90       	ld	r1, Z+
    7afe:	1d 92       	st	X+, r1
    7b00:	11 90       	ld	r1, Z+
    7b02:	1d 92       	st	X+, r1
    7b04:	11 90       	ld	r1, Z+
    7b06:	1d 92       	st	X+, r1
    7b08:	11 90       	ld	r1, Z+
    7b0a:	1d 92       	st	X+, r1
    7b0c:	11 90       	ld	r1, Z+
    7b0e:	1d 92       	st	X+, r1
    7b10:	11 90       	ld	r1, Z+
    7b12:	1d 92       	st	X+, r1
    7b14:	11 90       	ld	r1, Z+
    7b16:	1d 92       	st	X+, r1
    7b18:	11 90       	ld	r1, Z+
    7b1a:	1d 92       	st	X+, r1
    7b1c:	11 90       	ld	r1, Z+
    7b1e:	1d 92       	st	X+, r1
    7b20:	11 90       	ld	r1, Z+
    7b22:	1d 92       	st	X+, r1
    7b24:	11 90       	ld	r1, Z+
    7b26:	1d 92       	st	X+, r1
    7b28:	11 90       	ld	r1, Z+
    7b2a:	1d 92       	st	X+, r1
    7b2c:	11 90       	ld	r1, Z+
    7b2e:	1d 92       	st	X+, r1
    7b30:	11 90       	ld	r1, Z+
    7b32:	1d 92       	st	X+, r1
    7b34:	11 90       	ld	r1, Z+
    7b36:	1d 92       	st	X+, r1
    7b38:	11 90       	ld	r1, Z+
    7b3a:	1d 92       	st	X+, r1
    7b3c:	11 90       	ld	r1, Z+
    7b3e:	1d 92       	st	X+, r1
    7b40:	11 90       	ld	r1, Z+
    7b42:	1d 92       	st	X+, r1
    7b44:	11 90       	ld	r1, Z+
    7b46:	1d 92       	st	X+, r1
    7b48:	11 90       	ld	r1, Z+
    7b4a:	1d 92       	st	X+, r1
    7b4c:	11 90       	ld	r1, Z+
    7b4e:	1d 92       	st	X+, r1
    7b50:	11 90       	ld	r1, Z+
    7b52:	1d 92       	st	X+, r1
	clr r1
    7b54:	11 24       	eor	r1, r1
	ret
    7b56:	08 95       	ret

00007b58 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    7b58:	e0 91 10 0a 	lds	r30, 0x0A10
	mov   r24,     ZL
    7b5c:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    7b5e:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    7b60:	e8 0f       	add	r30, r24
	clr   ZH
    7b62:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    7b64:	e0 53       	subi	r30, 0x30	; 48
	sbci  ZH,      hi8(-(ram_tiles_restore))
    7b66:	f6 4f       	sbci	r31, 0xF6	; 246

	lds   r0,      free_tile_index
    7b68:	00 90 0f 0a 	lds	r0, 0x0A0F
	sub   r24,     r0
    7b6c:	80 19       	sub	r24, r0
	brcc  rbg_exit
    7b6e:	30 f4       	brcc	.+12     	; 0x7b7c <rbg_exit>

00007b70 <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    7b70:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    7b72:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    7b74:	01 90       	ld	r0, Z+
	st    X,       r0
    7b76:	0c 92       	st	X, r0
	inc   r24
    7b78:	83 95       	inc	r24
	brne  rbg_loop
    7b7a:	d1 f7       	brne	.-12     	; 0x7b70 <rbg_loop>

00007b7c <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    7b7c:	08 95       	ret

00007b7e <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    7b7e:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    7b80:	79 9f       	mul	r23, r25
	mov   XL,      r1
    7b82:	a1 2d       	mov	r26, r1
	clr   XH
    7b84:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    7b86:	ae 5e       	subi	r26, 0xEE	; 238
	sbci  XH,      hi8(-(sprites_tile_banks))
    7b88:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    7b8a:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    7b8c:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    7b8e:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    7b90:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    7b92:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7b94:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    7b96:	89 9f       	mul	r24, r25
	movw  XL,      r0
    7b98:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    7b9a:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    7b9c:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    7b9e:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    7ba0:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    7ba2:	09 c0       	rjmp	.+18     	; 0x7bb6 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    7ba4:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    7ba6:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    7ba8:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7baa:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    7bac:	0a c0       	rjmp	.+20     	; 0x7bc2 <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    7bae:	17 96       	adiw	r26, 0x07	; 7

00007bb0 <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    7bb0:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    7bb2:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    7bb4:	08 c0       	rjmp	.+16     	; 0x7bc6 <x_check_end>

00007bb6 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    7bb6:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    7bb8:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    7bba:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    7bbc:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    7bbe:	f8 cf       	rjmp	.-16     	; 0x7bb0 <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    7bc0:	11 97       	sbiw	r26, 0x01	; 1

00007bc2 <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    7bc2:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    7bc4:	b9 1f       	adc	r27, r25

00007bc6 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    7bc6:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    7bc8:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    7bca:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    7bcc:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    7bce:	09 c0       	rjmp	.+18     	; 0x7be2 <y_2nd_tile>

	mul   r22,     r19
    7bd0:	63 9f       	mul	r22, r19
	add   XL,      r0
    7bd2:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    7bd4:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7bd6:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7bd8:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7bda:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    7bdc:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    7bde:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    7be0:	08 c0       	rjmp	.+16     	; 0x7bf2 <y_check_end>

00007be2 <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    7be2:	13 2e       	mov	r1, r19
	dec   r1
    7be4:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    7be6:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    7be8:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    7bea:	61 9d       	mul	r22, r1
	add   ZL,      r0
    7bec:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    7bee:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    7bf0:	13 2e       	mov	r1, r19

00007bf2 <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    7bf2:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    7bf4:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    7bf6:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    7bf8:	05 c0       	rjmp	.+10     	; 0x7c04 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    7bfa:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    7bfc:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    7bfe:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    7c00:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    7c02:	04 c0       	rjmp	.+8      	; 0x7c0c <x_diff_end>

00007c04 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    7c04:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    7c06:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    7c08:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    7c0a:	6f ef       	ldi	r22, 0xFF	; 255

00007c0c <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    7c0c:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    7c0e:	04 2e       	mov	r0, r20
	lsr   r20
    7c10:	46 95       	lsr	r20
	brcc  x_loop1
    7c12:	30 f4       	brcc	.+12     	; 0x7c20 <x_loop1>
	breq  x_loopx
    7c14:	61 f0       	breq	.+24     	; 0x7c2e <x_loopx>

00007c16 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7c16:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7c18:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7c1a:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7c1c:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7c1e:	b7 1f       	adc	r27, r23

00007c20 <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7c20:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7c22:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7c24:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    7c26:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    7c28:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    7c2a:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    7c2c:	a1 f7       	brne	.-24     	; 0x7c16 <x_loop0>

00007c2e <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    7c2e:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    7c30:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    7c32:	2c 93       	st	X, r18

	dec   r1
    7c34:	1a 94       	dec	r1
	breq  loop_e
    7c36:	49 f0       	breq	.+18     	; 0x7c4a <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    7c38:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    7c3a:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    7c3c:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    7c3e:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    7c40:	40 2d       	mov	r20, r0
	lsr   r20
    7c42:	46 95       	lsr	r20
	brcc  x_loop1
    7c44:	68 f7       	brcc	.-38     	; 0x7c20 <x_loop1>
	brne  x_loop0
    7c46:	39 f7       	brne	.-50     	; 0x7c16 <x_loop0>
	rjmp  x_loopx
    7c48:	f2 cf       	rjmp	.-28     	; 0x7c2e <x_loopx>

00007c4a <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    7c4a:	08 95       	ret

00007c4c <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    7c4c:	0f 92       	push	r0
	push  r1
    7c4e:	1f 92       	push	r1
	push  ZL
    7c50:	ef 93       	push	r30
	push  ZH
    7c52:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    7c54:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    7c56:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    7c5a:	ff 93       	push	r31

	sbrc  ZL,      2
    7c5c:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    7c5e:	04 c0       	rjmp	.+8      	; 0x7c68 <__vector_13+0x1c>
	sbrc  ZL,      1
    7c60:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    7c62:	02 c0       	rjmp	.+4      	; 0x7c68 <__vector_13+0x1c>
	nop
    7c64:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    7c66:	00 c0       	rjmp	.+0      	; 0x7c68 <__vector_13+0x1c>
	sbrs  ZL,      0
    7c68:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7c6a:	00 c0       	rjmp	.+0      	; 0x7c6c <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    7c6c:	e0 91 21 0a 	lds	r30, 0x0A21
	dec ZL
    7c70:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7c72:	e0 93 21 0a 	sts	0x0A21, r30

	;process sync phases
	lds ZH,sync_phase
    7c76:	f0 91 20 0a 	lds	r31, 0x0A20
	sbrc ZH,0
    7c7a:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    7c7c:	51 c0       	rjmp	.+162    	; 0x7d20 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7c7e:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    7c80:	98 f0       	brcs	.+38     	; 0x7ca8 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7c82:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7c84:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7c88:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7c8a:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    7c8e:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    7c90:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    7c92:	26 f4       	brtc	.+8      	; 0x7c9c <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    7c94:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7c96:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <update_sound>
	rjmp sync_end
    7c9a:	b2 c0       	rjmp	.+356    	; 0x7e00 <sync_end>

00007c9c <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    7c9c:	e5 e1       	ldi	r30, 0x15	; 21
    7c9e:	ea 95       	dec	r30
    7ca0:	f1 f7       	brne	.-4      	; 0x7c9e <sync_pre_eq_no_sound_update+0x2>
    7ca2:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7ca4:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    7ca6:	ac c0       	rjmp	.+344    	; 0x7e00 <sync_end>

00007ca8 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    7ca8:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    7caa:	08 f1       	brcs	.+66     	; 0x7cee <sync_post_eq>

	rjmp .
    7cac:	00 c0       	rjmp	.+0      	; 0x7cae <sync_eq+0x6>
	rjmp .
    7cae:	00 c0       	rjmp	.+0      	; 0x7cb0 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7cb0:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    7cb2:	e0 fb       	bst	r30, 0
	ldi ZL,4
    7cb4:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    7cb6:	16 f4       	brtc	.+4      	; 0x7cbc <sync_eq_skip>
	
	call update_sound
    7cb8:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <update_sound>

00007cbc <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    7cbc:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    7cbe:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    7cc2:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    7cc4:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    7cc8:	9b c0       	rjmp	.+310    	; 0x7e00 <sync_end>

00007cca <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    7cca:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    7ccc:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    7cd0:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    7cd2:	04 c0       	rjmp	.+8      	; 0x7cdc <__vector_14+0x12>
	sbrc  ZL,      1
    7cd4:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    7cd6:	02 c0       	rjmp	.+4      	; 0x7cdc <__vector_14+0x12>
	nop
    7cd8:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    7cda:	00 c0       	rjmp	.+0      	; 0x7cdc <__vector_14+0x12>
	sbrs  ZL,      0
    7cdc:	e0 ff       	sbrs	r30, 0
	rjmp  .
    7cde:	00 c0       	rjmp	.+0      	; 0x7ce0 <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    7ce0:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    7ce2:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    7ce4:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    7ce6:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    7cea:	ef 91       	pop	r30
	reti
    7cec:	18 95       	reti

00007cee <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7cee:	00 c0       	rjmp	.+0      	; 0x7cf0 <sync_post_eq+0x2>

	bst ZL,0
    7cf0:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7cf2:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    7cf4:	26 f4       	brtc	.+8      	; 0x7cfe <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7cf6:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7cf8:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <update_sound>
	rjmp sync_pre_eq_cont
    7cfc:	05 c0       	rjmp	.+10     	; 0x7d08 <sync_pre_eq_cont>

00007cfe <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7cfe:	e5 e1       	ldi	r30, 0x15	; 21
    7d00:	ea 95       	dec	r30
    7d02:	f1 f7       	brne	.-4      	; 0x7d00 <sync_post_eq_no_sound_update+0x2>
    7d04:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7d06:	28 9a       	sbi	0x05, 0	; 5

00007d08 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7d08:	e0 91 21 0a 	lds	r30, 0x0A21
	cpi ZL,0
    7d0c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7d0e:	09 f0       	breq	.+2      	; 0x7d12 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    7d10:	77 c0       	rjmp	.+238    	; 0x7e00 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    7d12:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    7d14:	e0 93 21 0a 	sts	0x0A21, r30
	ldi ZL,1
    7d18:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7d1a:	e0 93 20 0a 	sts	0x0A20, r30
	
	rjmp sync_end
    7d1e:	70 c0       	rjmp	.+224    	; 0x7e00 <sync_end>

00007d20 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    7d20:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    7d22:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7d26:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7d28:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7d2c:	00 c0       	rjmp	.+0      	; 0x7d2e <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7d2e:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    7d30:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7d32:	00 c0       	rjmp	.+0      	; 0x7d34 <sync_hsync+0x14>
	call update_sound
    7d34:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7d38:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7d3a:	00 90 27 0a 	lds	r0, 0x0A27
	sub ZH,r0				
    7d3e:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    7d40:	e0 91 21 0a 	lds	r30, 0x0A21
	cp ZL,ZH
    7d44:	ef 17       	cp	r30, r31
	brsh no_render
    7d46:	d8 f4       	brcc	.+54     	; 0x7d7e <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7d48:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7d4a:	00 90 27 0a 	lds	r0, 0x0A27
	sub ZH,r0				
    7d4e:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    7d50:	00 90 28 0a 	lds	r0, 0x0A28
	sub ZH,r0			
    7d54:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7d56:	ef 17       	cp	r30, r31
	brlo no_render
    7d58:	90 f0       	brcs	.+36     	; 0x7d7e <no_render>

	;push r1-r29
	ldi ZL,29
    7d5a:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7d5c:	ff 27       	eor	r31, r31

00007d5e <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7d5e:	00 80       	ld	r0, Z
	push r0
    7d60:	0f 92       	push	r0
	dec ZL
    7d62:	ea 95       	dec	r30
	brne push_loop	
    7d64:	e1 f7       	brne	.-8      	; 0x7d5e <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7d66:	05 e0       	ldi	r16, 0x05	; 5
    7d68:	0a 95       	dec	r16
    7d6a:	f1 f7       	brne	.-4      	; 0x7d68 <push_loop+0xa>
    7d6c:	00 c0       	rjmp	.+0      	; 0x7d6e <push_loop+0x10>

	call VMODE_FUNC		;TCNT1=0x234
    7d6e:	0e 94 d8 3b 	call	0x77b0	; 0x77b0 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    7d72:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    7d74:	ff 27       	eor	r31, r31

00007d76 <pop_loop>:
pop_loop:
	pop r0
    7d76:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7d78:	01 92       	st	Z+, r0
	cpi ZL,30
    7d7a:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7d7c:	e0 f3       	brcs	.-8      	; 0x7d76 <pop_loop>

00007d7e <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7d7e:	e0 91 21 0a 	lds	r30, 0x0A21
	cpi ZL,0
    7d82:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    7d84:	09 f0       	breq	.+2      	; 0x7d88 <no_render+0xa>
	rjmp sync_end
    7d86:	3c c0       	rjmp	.+120    	; 0x7e00 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    7d88:	2f 93       	push	r18
	push r19
    7d8a:	3f 93       	push	r19
	push r20
    7d8c:	4f 93       	push	r20
	push r21
    7d8e:	5f 93       	push	r21
	push r22
    7d90:	6f 93       	push	r22
	push r23
    7d92:	7f 93       	push	r23
	push r24
    7d94:	8f 93       	push	r24
	push r25
    7d96:	9f 93       	push	r25
	push r26
    7d98:	af 93       	push	r26
	push r27
    7d9a:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    7d9c:	78 94       	sei
	clr r1
    7d9e:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    7da0:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    7da2:	e0 93 20 0a 	sts	0x0A20, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    7da6:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    7da8:	e0 93 21 0a 	sts	0x0A21, r30



	;increment the vsync counter
	lds r24,vsync_counter
    7dac:	80 91 31 0a 	lds	r24, 0x0A31
	lds r25,vsync_counter+1
    7db0:	90 91 32 0a 	lds	r25, 0x0A32
	adiw r24,1
    7db4:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    7db6:	80 93 31 0a 	sts	0x0A31, r24
	sts vsync_counter+1,r25
    7dba:	90 93 32 0a 	sts	0x0A32, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    7dbe:	e0 91 23 0a 	lds	r30, 0x0A23
	lds ZH,pre_vsync_user_callback+1
    7dc2:	f0 91 24 0a 	lds	r31, 0x0A24
	cp  ZL,r1
    7dc6:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7dc8:	f1 05       	cpc	r31, r1
	breq .+2 
    7dca:	09 f0       	breq	.+2      	; 0x7dce <no_render+0x50>
	icall
    7dcc:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    7dce:	0e 94 c0 40 	call	0x8180	; 0x8180 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    7dd2:	0e 94 6c 4e 	call	0x9cd8	; 0x9cd8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    7dd6:	0e 94 12 3f 	call	0x7e24	; 0x7e24 <process_music>
	clr r1
    7dda:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    7ddc:	e0 91 25 0a 	lds	r30, 0x0A25
	lds ZH,post_vsync_user_callback+1
    7de0:	f0 91 26 0a 	lds	r31, 0x0A26
	cp  ZL,r1
    7de4:	e1 15       	cp	r30, r1
	cpc ZH,r1
    7de6:	f1 05       	cpc	r31, r1
	breq .+2 
    7de8:	09 f0       	breq	.+2      	; 0x7dec <no_render+0x6e>
	icall
    7dea:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7dec:	bf 91       	pop	r27
	pop r26
    7dee:	af 91       	pop	r26
	pop r25
    7df0:	9f 91       	pop	r25
	pop r24
    7df2:	8f 91       	pop	r24
	pop r23
    7df4:	7f 91       	pop	r23
	pop r22
    7df6:	6f 91       	pop	r22
	pop r21
    7df8:	5f 91       	pop	r21
	pop r20
    7dfa:	4f 91       	pop	r20
	pop r19
    7dfc:	3f 91       	pop	r19
	pop r18
    7dfe:	2f 91       	pop	r18

00007e00 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7e00:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7e02:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7e04:	ff 91       	pop	r31
	pop ZL
    7e06:	ef 91       	pop	r30
	pop r1
    7e08:	1f 90       	pop	r1
	pop r0
    7e0a:	0f 90       	pop	r0
	reti
    7e0c:	18 95       	reti

00007e0e <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7e0e:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7e10:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7e12:	00 c0       	rjmp	.+0      	; 0x7e14 <hsync_pulse+0x6>
	call update_sound
    7e14:	0e 94 18 3f 	call	0x7e30	; 0x7e30 <update_sound>

	lds ZL,sync_pulse
    7e18:	e0 91 21 0a 	lds	r30, 0x0A21
	dec ZL
    7e1c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7e1e:	e0 93 21 0a 	sts	0x0A21, r30

	ret
    7e22:	08 95       	ret

00007e24 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7e24:	e0 91 43 0a 	lds	r30, 0x0A43
	sbrc ZL,0
    7e28:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7e2a:	0e 94 a3 43 	call	0x8746	; 0x8746 <ProcessMusic>
#endif

	ret
    7e2e:	08 95       	ret

00007e30 <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    7e30:	0f 93       	push	r16
	push r17
    7e32:	1f 93       	push	r17
	push r18
    7e34:	2f 93       	push	r18
	push r28
    7e36:	cf 93       	push	r28
	push r29
    7e38:	df 93       	push	r29

	mov r18,ZL
    7e3a:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7e3c:	00 91 45 0a 	lds	r16, 0x0A45
	lds r17,tr1_pos_frac
    7e40:	10 91 47 0a 	lds	r17, 0x0A47
	add	r17,r16	;add step to fractional part of sample pos
    7e44:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7e46:	00 91 46 0a 	lds	r16, 0x0A46
	lds ZL,tr1_pos_lo
    7e4a:	e0 91 48 0a 	lds	r30, 0x0A48
	lds ZH,tr1_pos_hi 
    7e4e:	f0 91 49 0a 	lds	r31, 0x0A49
	adc ZL,r16	;add step to low byte of sample pos
    7e52:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7e54:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7e56:	e0 93 48 0a 	sts	0x0A48, r30
	sts tr1_pos_frac,r17
    7e5a:	10 93 47 0a 	sts	0x0A47, r17
	lds r17,tr1_vol
    7e5e:	10 91 44 0a 	lds	r17, 0x0A44
	mulsu r16,r17;(sample*mixing vol)
    7e62:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7e64:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7e66:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7e68:	d0 2d       	mov	r29, r0
	nop
    7e6a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7e6c:	00 91 4b 0a 	lds	r16, 0x0A4B
	lds r17,tr2_pos_frac
    7e70:	10 91 4d 0a 	lds	r17, 0x0A4D
	add	r17,r16	;add step to fractional part of sample pos
    7e74:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7e76:	00 91 4c 0a 	lds	r16, 0x0A4C
	lds ZL,tr2_pos_lo
    7e7a:	e0 91 4e 0a 	lds	r30, 0x0A4E
	lds ZH,tr2_pos_hi 
    7e7e:	f0 91 4f 0a 	lds	r31, 0x0A4F
	adc ZL,r16	;add step to low byte of sample pos
    7e82:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7e84:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7e86:	e0 93 4e 0a 	sts	0x0A4E, r30
	sts tr2_pos_frac,r17
    7e8a:	10 93 4d 0a 	sts	0x0A4D, r17
	lds r17,tr2_vol
    7e8e:	10 91 4a 0a 	lds	r17, 0x0A4A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7e92:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7e94:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7e96:	20 ff       	sbrs	r18, 0
	rjmp .
    7e98:	00 c0       	rjmp	.+0      	; 0x7e9a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7e9a:	01 03       	mulsu	r16, r17
	clr r0
    7e9c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7e9e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ea0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7ea2:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7ea4:	00 91 51 0a 	lds	r16, 0x0A51
	lds r17,tr3_pos_frac
    7ea8:	10 91 53 0a 	lds	r17, 0x0A53
	add	r17,r16				;add step to fractional part of sample pos
    7eac:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7eae:	00 91 52 0a 	lds	r16, 0x0A52
	lds ZL,tr3_pos_lo
    7eb2:	e0 91 54 0a 	lds	r30, 0x0A54
	lds ZH,tr3_pos_hi 
    7eb6:	f0 91 55 0a 	lds	r31, 0x0A55
	adc ZL,r16				;add step to low byte of sample pos
    7eba:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7ebc:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7ebe:	e0 93 54 0a 	sts	0x0A54, r30
	sts tr3_pos_frac,r17
    7ec2:	10 93 53 0a 	sts	0x0A53, r17
	lds r17,tr3_vol
    7ec6:	10 91 50 0a 	lds	r17, 0x0A50
	mulsu r16,r17			;(sample*mixing vol)
    7eca:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7ecc:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7ece:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7ed0:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7ed2:	00 91 58 0a 	lds	r16, 0x0A58
	lds r17,tr4_barrel_hi
    7ed6:	10 91 59 0a 	lds	r17, 0x0A59
	lds ZL,tr4_divider
    7eda:	e0 91 5a 0a 	lds	r30, 0x0A5A
	dec ZL	
    7ede:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7ee0:	92 f4       	brpl	.+36     	; 0x7f06 <ch4_no_shift>

	lds ZH,tr4_params
    7ee2:	f0 91 57 0a 	lds	r31, 0x0A57
	mov ZL,ZH
    7ee6:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7ee8:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7eea:	00 2e       	mov	r0, r16
	lsr r0
    7eec:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7eee:	00 26       	eor	r0, r16
	bst r0,0
    7ef0:	00 fa       	bst	r0, 0
	lsr r17
    7ef2:	16 95       	lsr	r17
	ror r16
    7ef4:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7ef6:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7ef8:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7efa:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7efc:	00 93 58 0a 	sts	0x0A58, r16
	sts tr4_barrel_hi,r17
    7f00:	10 93 59 0a 	sts	0x0A59, r17

	rjmp ch4_end
    7f04:	03 c0       	rjmp	.+6      	; 0x7f0c <ch4_end>

00007f06 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7f06:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7f08:	1a 95       	dec	r17
	brne .-4
    7f0a:	f1 f7       	brne	.-4      	; 0x7f08 <ch4_no_shift+0x2>

00007f0c <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7f0c:	e0 93 5a 0a 	sts	0x0A5A, r30
	ldi r17,0x80 ;-128
    7f10:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7f12:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7f14:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7f16:	21 ff       	sbrs	r18, 1
	rjmp .
    7f18:	00 c0       	rjmp	.+0      	; 0x7f1a <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7f1a:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7f1c:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7f1e:	00 91 56 0a 	lds	r16, 0x0A56

	mulsu r17,r16;(sample*mixing vol)
    7f22:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7f24:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7f26:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7f28:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7f2a:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7f2c:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7f2e:	d0 05       	cpc	r29, r0
	brlt .+2
    7f30:	0c f0       	brlt	.+2      	; 0x7f34 <ch4_end+0x28>
	ldi r28,127
    7f32:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7f34:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7f36:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7f38:	d0 05       	cpc	r29, r0
	brge .+2
    7f3a:	0c f4       	brge	.+2      	; 0x7f3e <ch4_end+0x32>
	ldi r28,-128
    7f3c:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7f3e:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7f40:	c0 93 b3 00 	sts	0x00B3, r28
	

#if UART == 1
	;read UART data (23 cycles)
	
	ldi ZL,lo8(uart_rx_buf)
    7f44:	e0 eb       	ldi	r30, 0xB0	; 176
	ldi ZH,hi8(uart_rx_buf)
    7f46:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_rx_head
    7f48:	00 91 ad 0a 	lds	r16, 0x0AAD

	clr r0
    7f4c:	00 24       	eor	r0, r0
	add ZL,r16
    7f4e:	e0 0f       	add	r30, r16
	adc ZH,r0
    7f50:	f0 1d       	adc	r31, r0

	lds r17,_SFR_MEM_ADDR(UCSR0A)	
    7f52:	10 91 c0 00 	lds	r17, 0x00C0

	sbrs r17,RXC0	;data in?
    7f56:	17 ff       	sbrs	r17, 7
	rjmp 1f
    7f58:	08 c0       	rjmp	.+16     	; 0x7f6a <ch4_end+0x5e>

	lds r18,_SFR_MEM_ADDR(UDR0)
    7f5a:	20 91 c6 00 	lds	r18, 0x00C6
	st Z,r18
    7f5e:	20 83       	st	Z, r18
	inc r16
    7f60:	03 95       	inc	r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
    7f62:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_rx_head,r16
    7f64:	00 93 ad 0a 	sts	0x0AAD, r16
	rjmp uart_tx
    7f68:	03 c0       	rjmp	.+6      	; 0x7f70 <uart_tx>
1:
	WAIT r28,9
    7f6a:	c3 e0       	ldi	r28, 0x03	; 3
    7f6c:	ca 95       	dec	r28
    7f6e:	f1 f7       	brne	.-4      	; 0x7f6c <ch4_end+0x60>

00007f70 <uart_tx>:

uart_tx:
	;send UART data (24 cycles)
	
	ldi ZL,lo8(uart_tx_buf)
    7f70:	ec e6       	ldi	r30, 0x6C	; 108
	ldi ZH,hi8(uart_tx_buf)
    7f72:	fa e0       	ldi	r31, 0x0A	; 10
	lds r16,uart_tx_tail
    7f74:	00 91 f0 0a 	lds	r16, 0x0AF0
	lds r29,uart_tx_head
    7f78:	d0 91 ae 0a 	lds	r29, 0x0AAE
	
	add ZL,r16
    7f7c:	e0 0f       	add	r30, r16
	adc ZH,r0	;r0=0
    7f7e:	f0 1d       	adc	r31, r0

	lds r28,_SFR_MEM_ADDR(UCSR0A)
    7f80:	c0 91 c0 00 	lds	r28, 0x00C0
	andi r28,(1<<UDRE0)	 	//UCSR0A & (1<<UDRE0)
    7f84:	c0 72       	andi	r28, 0x20	; 32

	;if(ring_head == ring_tail || (UCSR0A & (1<<UDRE0)==0 ), nothing to send
	sub r29,r16
    7f86:	d0 1b       	sub	r29, r16
	mul r28,r29
    7f88:	cd 9f       	mul	r28, r29
	breq 1f		
    7f8a:	41 f0       	breq	.+16     	; 0x7f9c <uart_tx+0x2c>

	ld r18,Z
    7f8c:	20 81       	ld	r18, Z
	sts _SFR_MEM_ADDR(UDR0),r18	;TCNT1=0x134
    7f8e:	20 93 c6 00 	sts	0x00C6, r18
	inc r16
    7f92:	03 95       	inc	r16
	andi r16,(UART_TX_BUFFER_SIZE-1) ;wrap
    7f94:	0f 73       	andi	r16, 0x3F	; 63
	sts uart_tx_tail,r16
    7f96:	00 93 f0 0a 	sts	0x0AF0, r16
	rjmp update_sound_end
    7f9a:	03 c0       	rjmp	.+6      	; 0x7fa2 <update_sound_end>
1:
	WAIT r28,9
    7f9c:	c3 e0       	ldi	r28, 0x03	; 3
    7f9e:	ca 95       	dec	r28
    7fa0:	f1 f7       	brne	.-4      	; 0x7f9e <uart_tx+0x2e>

00007fa2 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    7fa2:	df 91       	pop	r29
	pop r28
    7fa4:	cf 91       	pop	r28
	pop r18
    7fa6:	2f 91       	pop	r18
	pop r17
    7fa8:	1f 91       	pop	r17
	pop r16
    7faa:	0f 91       	pop	r16
	
	ret
    7fac:	08 95       	ret

00007fae <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7fae:	80 93 12 0a 	sts	0x0A12, r24
	sts sprites_tile_banks+1,r25
    7fb2:	90 93 13 0a 	sts	0x0A13, r25
	ret
    7fb6:	08 95       	ret

00007fb8 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7fb8:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7fba:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7fbc:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7fbe:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7fc0:	65 e1       	ldi	r22, 0x15	; 21

00007fc2 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7fc2:	6d 93       	st	X+, r22
	sbiw r30,1
    7fc4:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7fc6:	e9 f7       	brne	.-6      	; 0x7fc2 <fill_vram_loop>

	clr r1
    7fc8:	11 24       	eor	r1, r1

	ret
    7fca:	08 95       	ret

00007fcc <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7fcc:	50 91 1c 0a 	lds	r21, 0x0A1C
	add r20,21
    7fd0:	45 0f       	add	r20, r21
	rjmp SetTile	
    7fd2:	00 c0       	rjmp	.+0      	; 0x7fd4 <SetTile>

00007fd4 <SetTile>:

	ret

#else

	clr r25
    7fd4:	99 27       	eor	r25, r25
	clr r23	
    7fd6:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7fd8:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7fda:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7fdc:	08 0e       	add	r0, r24
	adc r1,r25
    7fde:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7fe0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7fe2:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7fe4:	a0 0d       	add	r26, r0
	adc XH,r1
    7fe6:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7fe8:	4b 5e       	subi	r20, 0xEB	; 235
	st X,r20
    7fea:	4c 93       	st	X, r20

	clr r1
    7fec:	11 24       	eor	r1, r1

	ret
    7fee:	08 95       	ret

00007ff0 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7ff0:	80 93 1c 0a 	sts	0x0A1C, r24
	ret
    7ff4:	08 95       	ret

00007ff6 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7ff6:	80 93 1a 0a 	sts	0x0A1A, r24
	sts tile_table_hi,r25	
    7ffa:	90 93 1b 0a 	sts	0x0A1B, r25
	ret
    7ffe:	08 95       	ret

00008000 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    8000:	80 91 22 0a 	lds	r24, 0x0A22
	andi r24,SYNC_FLAG_VSYNC
    8004:	81 70       	andi	r24, 0x01	; 1
	ret
    8006:	08 95       	ret

00008008 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    8008:	20 91 22 0a 	lds	r18, 0x0A22
	andi r18,~SYNC_FLAG_VSYNC
    800c:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    800e:	20 93 22 0a 	sts	0x0A22, r18
	ret
    8012:	08 95       	ret

00008014 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    8014:	88 23       	and	r24, r24
	brne rj_p2
    8016:	29 f4       	brne	.+10     	; 0x8022 <rj_p2>
		
	lds r24,joypad1_status_lo
    8018:	80 91 29 0a 	lds	r24, 0x0A29
	lds r25,joypad1_status_lo+1
    801c:	90 91 2a 0a 	lds	r25, 0x0A2A
	ret
    8020:	08 95       	ret

00008022 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    8022:	80 91 2d 0a 	lds	r24, 0x0A2D
	lds r25,joypad2_status_lo+1	
    8026:	90 91 2e 0a 	lds	r25, 0x0A2E

	ret
    802a:	08 95       	ret

0000802c <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    802c:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    802e:	7a 95       	dec	r23
	brne .-4 ;~1 us
    8030:	f1 f7       	brne	.-4      	; 0x802e <WaitUs+0x2>
	nop
    8032:	00 00       	nop
	sbiw r24,1
    8034:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    8036:	d1 f7       	brne	.-12     	; 0x802c <WaitUs>

	ret
    8038:	08 95       	ret

0000803a <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    803a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    803c:	fe cf       	rjmp	.-4      	; 0x803a <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    803e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8040:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8042:	60 bd       	out	0x20, r22	; 32
   cli
    8044:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8046:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8048:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    804a:	78 94       	sei
   ret
    804c:	08 95       	ret

0000804e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    804e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8050:	fe cf       	rjmp	.-4      	; 0x804e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8052:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8054:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8056:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8058:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    805a:	80 b5       	in	r24, 0x20	; 32
   sei
    805c:	78 94       	sei
   ret
    805e:	08 95       	ret

00008060 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8060:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8062:	80 93 21 0a 	sts	0x0A21, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8066:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    806a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    806e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8072:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8076:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    807a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    807e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8082:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8086:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8088:	80 93 81 00 	sts	0x0081, r24

		cli
    808c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    808e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8090:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8094:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8096:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    809a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    809c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    80a0:	90 93 60 00 	sts	0x0060, r25
	
		sei
    80a4:	78 94       	sei

000080a6 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    80a6:	80 91 21 0a 	lds	r24, 0x0A21
		cpi r24,8
    80aa:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    80ac:	e0 f3       	brcs	.-8      	; 0x80a6 <wait>

		ret
    80ae:	08 95       	ret

000080b0 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    80b0:	80 91 33 0a 	lds	r24, 0x0A33
		lds r25,random_value+1
    80b4:	90 91 34 0a 	lds	r25, 0x0A34
		ret
    80b8:	08 95       	ret

000080ba <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    80ba:	0f 93       	push	r16
		push r17
    80bc:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    80be:	0f b7       	in	r16, 0x3f	; 63
		push r16
    80c0:	0f 93       	push	r16

		lds r16,sync_pulse
    80c2:	00 91 21 0a 	lds	r16, 0x0A21
		inc r16
    80c6:	03 95       	inc	r16
		sts sync_pulse,r16
    80c8:	00 93 21 0a 	sts	0x0A21, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    80cc:	00 fd       	sbrc	r16, 0
		rjmp 1f
    80ce:	08 c0       	rjmp	.+16     	; 0x80e0 <__vector_8+0x26>
		lds r17,random_value
    80d0:	10 91 33 0a 	lds	r17, 0x0A33
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    80d4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    80d8:	10 27       	eor	r17, r16
		sts random_value,r17
    80da:	10 93 33 0a 	sts	0x0A33, r17
		rjmp 2f
    80de:	07 c0       	rjmp	.+14     	; 0x80ee <__vector_8+0x34>
	1:
		lds r17,random_value+1
    80e0:	10 91 34 0a 	lds	r17, 0x0A34
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    80e4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    80e8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    80ea:	10 93 34 0a 	sts	0x0A34, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    80ee:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    80f0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    80f4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    80f6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    80f8:	1f 91       	pop	r17
		pop r16
    80fa:	0f 91       	pop	r16
		reti
    80fc:	18 95       	reti

000080fe <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    80fe:	98 e0       	ldi	r25, 0x08	; 8
    8100:	88 e1       	ldi	r24, 0x18	; 24
    8102:	0f b6       	in	r0, 0x3f	; 63
    8104:	f8 94       	cli
    8106:	a8 95       	wdr
    8108:	80 93 60 00 	sts	0x0060, r24
    810c:	0f be       	out	0x3f, r0	; 63
    810e:	90 93 60 00 	sts	0x0060, r25
	while(1);
    8112:	ff cf       	rjmp	.-2      	; 0x8112 <SoftReset+0x14>

00008114 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    8114:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    8116:	c8 95       	lpm
    8118:	c8 95       	lpm
		Wait200ns();
    811a:	c8 95       	lpm
    811c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    811e:	12 98       	cbi	0x02, 2	; 2
    8120:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    8122:	80 e0       	ldi	r24, 0x00	; 0
    8124:	90 e0       	ldi	r25, 0x00	; 0
    8126:	20 e0       	ldi	r18, 0x00	; 0
    8128:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    812a:	36 95       	lsr	r19
    812c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    812e:	96 95       	lsr	r25
    8130:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8132:	c8 95       	lpm
    8134:	c8 95       	lpm
			Wait200ns();
    8136:	c8 95       	lpm
    8138:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    813a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    813c:	00 9b       	sbis	0x00, 0	; 0
    813e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8140:	01 9b       	sbis	0x00, 1	; 0
    8142:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8144:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8146:	c8 95       	lpm
    8148:	c8 95       	lpm
			Wait200ns();
    814a:	c8 95       	lpm
    814c:	c8 95       	lpm
    814e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8150:	61 f7       	brne	.-40     	; 0x812a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8152:	30 93 2a 0a 	sts	0x0A2A, r19
    8156:	20 93 29 0a 	sts	0x0A29, r18
		joypad2_status_lo=p2ButtonsLo;
    815a:	90 93 2e 0a 	sts	0x0A2E, r25
    815e:	80 93 2d 0a 	sts	0x0A2D, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8162:	80 91 29 0a 	lds	r24, 0x0A29
    8166:	90 91 2a 0a 	lds	r25, 0x0A2A
    816a:	0f 97       	sbiw	r24, 0x0f	; 15
    816c:	31 f0       	breq	.+12     	; 0x817a <ReadButtons+0x66>
    816e:	80 91 2d 0a 	lds	r24, 0x0A2D
    8172:	90 91 2e 0a 	lds	r25, 0x0A2E
    8176:	0f 97       	sbiw	r24, 0x0f	; 15
    8178:	11 f4       	brne	.+4      	; 0x817e <ReadButtons+0x6a>
		SoftReset();
    817a:	0e 94 7f 40 	call	0x80fe	; 0x80fe <SoftReset>
    817e:	08 95       	ret

00008180 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8180:	10 92 ac 0a 	sts	0x0AAC, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8184:	00 99       	sbic	0x00, 0	; 0
    8186:	03 c0       	rjmp	.+6      	; 0x818e <ReadControllers+0xe>
    8188:	81 e0       	ldi	r24, 0x01	; 1
    818a:	80 93 ac 0a 	sts	0x0AAC, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    818e:	01 99       	sbic	0x00, 1	; 0
    8190:	05 c0       	rjmp	.+10     	; 0x819c <ReadControllers+0x1c>
    8192:	80 91 ac 0a 	lds	r24, 0x0AAC
    8196:	82 60       	ori	r24, 0x02	; 2
    8198:	80 93 ac 0a 	sts	0x0AAC, r24
			
	//read the standard buttons
	ReadButtons();
    819c:	0c 94 8a 40 	jmp	0x8114	; 0x8114 <ReadButtons>

000081a0 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    81a0:	cf 93       	push	r28
    81a2:	df 93       	push	r29
    81a4:	c0 e0       	ldi	r28, 0x00	; 0
    81a6:	d0 e0       	ldi	r29, 0x00	; 0
    81a8:	fe 01       	movw	r30, r28
    81aa:	e2 56       	subi	r30, 0x62	; 98
    81ac:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    81ae:	64 91       	lpm	r22, Z
    81b0:	ce 01       	movw	r24, r28
    81b2:	0e 94 1d 40 	call	0x803a	; 0x803a <WriteEeprom>
    81b6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    81b8:	c0 32       	cpi	r28, 0x20	; 32
    81ba:	d1 05       	cpc	r29, r1
    81bc:	a9 f7       	brne	.-22     	; 0x81a8 <FormatEeprom+0x8>
    81be:	c0 e2       	ldi	r28, 0x20	; 32
    81c0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    81c2:	6f ef       	ldi	r22, 0xFF	; 255
    81c4:	ce 01       	movw	r24, r28
    81c6:	0e 94 1d 40 	call	0x803a	; 0x803a <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    81ca:	6f ef       	ldi	r22, 0xFF	; 255
    81cc:	ce 01       	movw	r24, r28
    81ce:	01 96       	adiw	r24, 0x01	; 1
    81d0:	0e 94 1d 40 	call	0x803a	; 0x803a <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    81d4:	a0 96       	adiw	r28, 0x20	; 32
    81d6:	c1 15       	cp	r28, r1
    81d8:	88 e0       	ldi	r24, 0x08	; 8
    81da:	d8 07       	cpc	r29, r24
    81dc:	91 f7       	brne	.-28     	; 0x81c2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    81de:	df 91       	pop	r29
    81e0:	cf 91       	pop	r28
    81e2:	08 95       	ret

000081e4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    81e4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    81e6:	80 e0       	ldi	r24, 0x00	; 0
    81e8:	90 e0       	ldi	r25, 0x00	; 0
    81ea:	0e 94 27 40 	call	0x804e	; 0x804e <ReadEeprom>
    81ee:	c8 2f       	mov	r28, r24
    81f0:	81 e0       	ldi	r24, 0x01	; 1
    81f2:	90 e0       	ldi	r25, 0x00	; 0
    81f4:	0e 94 27 40 	call	0x804e	; 0x804e <ReadEeprom>
    81f8:	28 2f       	mov	r18, r24
    81fa:	30 e0       	ldi	r19, 0x00	; 0
    81fc:	32 2f       	mov	r19, r18
    81fe:	22 27       	eor	r18, r18
    8200:	2c 0f       	add	r18, r28
    8202:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    8204:	81 e0       	ldi	r24, 0x01	; 1
    8206:	2a 35       	cpi	r18, 0x5A	; 90
    8208:	35 45       	sbci	r19, 0x55	; 85
    820a:	09 f0       	breq	.+2      	; 0x820e <isEepromFormatted+0x2a>
    820c:	80 e0       	ldi	r24, 0x00	; 0
}
    820e:	cf 91       	pop	r28
    8210:	08 95       	ret

00008212 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    8212:	8f 92       	push	r8
    8214:	9f 92       	push	r9
    8216:	af 92       	push	r10
    8218:	bf 92       	push	r11
    821a:	cf 92       	push	r12
    821c:	df 92       	push	r13
    821e:	ef 92       	push	r14
    8220:	ff 92       	push	r15
    8222:	0f 93       	push	r16
    8224:	1f 93       	push	r17
    8226:	cf 93       	push	r28
    8228:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    822a:	fb 01       	movw	r30, r22
    822c:	11 82       	std	Z+1, r1	; 0x01
    822e:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8230:	8f 3f       	cpi	r24, 0xFF	; 255
    8232:	ff ef       	ldi	r31, 0xFF	; 255
    8234:	9f 07       	cpc	r25, r31
    8236:	89 f1       	breq	.+98     	; 0x829a <EepromBlockExists+0x88>
    8238:	6a 01       	movw	r12, r20
    823a:	8b 01       	movw	r16, r22
    823c:	7c 01       	movw	r14, r24
    823e:	a1 2c       	mov	r10, r1
    8240:	b1 2c       	mov	r11, r1
    8242:	c0 e0       	ldi	r28, 0x00	; 0
    8244:	d3 e0       	ldi	r29, 0x03	; 3
    8246:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8248:	c5 01       	movw	r24, r10
    824a:	0e 94 27 40 	call	0x804e	; 0x804e <ReadEeprom>
    824e:	88 2e       	mov	r8, r24
    8250:	c5 01       	movw	r24, r10
    8252:	01 96       	adiw	r24, 0x01	; 1
    8254:	0e 94 27 40 	call	0x804e	; 0x804e <ReadEeprom>
    8258:	28 2f       	mov	r18, r24
    825a:	30 e0       	ldi	r19, 0x00	; 0
    825c:	32 2f       	mov	r19, r18
    825e:	22 27       	eor	r18, r18
    8260:	28 0d       	add	r18, r8
    8262:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8264:	2e 15       	cp	r18, r14
    8266:	3f 05       	cpc	r19, r15
    8268:	29 f4       	brne	.+10     	; 0x8274 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    826a:	f8 01       	movw	r30, r16
    826c:	b1 82       	std	Z+1, r11	; 0x01
    826e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8270:	d0 e0       	ldi	r29, 0x00	; 0
    8272:	0b c0       	rjmp	.+22     	; 0x828a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8274:	2f 3f       	cpi	r18, 0xFF	; 255
    8276:	3f 4f       	sbci	r19, 0xFF	; 255
    8278:	41 f4       	brne	.+16     	; 0x828a <EepromBlockExists+0x78>
    827a:	91 10       	cpse	r9, r1
    827c:	06 c0       	rjmp	.+12     	; 0x828a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    827e:	c1 14       	cp	r12, r1
    8280:	d1 04       	cpc	r13, r1
    8282:	11 f0       	breq	.+4      	; 0x8288 <EepromBlockExists+0x76>
    8284:	f6 01       	movw	r30, r12
    8286:	c0 83       	st	Z, r28
    8288:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    828a:	cf 5f       	subi	r28, 0xFF	; 255
    828c:	f0 e2       	ldi	r31, 0x20	; 32
    828e:	af 0e       	add	r10, r31
    8290:	b1 1c       	adc	r11, r1
    8292:	c0 34       	cpi	r28, 0x40	; 64
    8294:	c9 f6       	brne	.-78     	; 0x8248 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8296:	8d 2f       	mov	r24, r29
    8298:	01 c0       	rjmp	.+2      	; 0x829c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    829a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    829c:	df 91       	pop	r29
    829e:	cf 91       	pop	r28
    82a0:	1f 91       	pop	r17
    82a2:	0f 91       	pop	r16
    82a4:	ff 90       	pop	r15
    82a6:	ef 90       	pop	r14
    82a8:	df 90       	pop	r13
    82aa:	cf 90       	pop	r12
    82ac:	bf 90       	pop	r11
    82ae:	af 90       	pop	r10
    82b0:	9f 90       	pop	r9
    82b2:	8f 90       	pop	r8
    82b4:	08 95       	ret

000082b6 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    82b6:	ef 92       	push	r14
    82b8:	ff 92       	push	r15
    82ba:	0f 93       	push	r16
    82bc:	1f 93       	push	r17
    82be:	cf 93       	push	r28
    82c0:	df 93       	push	r29
    82c2:	00 d0       	rcall	.+0      	; 0x82c4 <EepromWriteBlock+0xe>
    82c4:	1f 92       	push	r1
    82c6:	cd b7       	in	r28, 0x3d	; 61
    82c8:	de b7       	in	r29, 0x3e	; 62
    82ca:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    82cc:	1a 82       	std	Y+2, r1	; 0x02
    82ce:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    82d0:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    82d2:	ae 01       	movw	r20, r28
    82d4:	4d 5f       	subi	r20, 0xFD	; 253
    82d6:	5f 4f       	sbci	r21, 0xFF	; 255
    82d8:	be 01       	movw	r22, r28
    82da:	6f 5f       	subi	r22, 0xFF	; 255
    82dc:	7f 4f       	sbci	r23, 0xFF	; 255
    82de:	fc 01       	movw	r30, r24
    82e0:	80 81       	ld	r24, Z
    82e2:	91 81       	ldd	r25, Z+1	; 0x01
    82e4:	0e 94 09 41 	call	0x8212	; 0x8212 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    82e8:	88 23       	and	r24, r24
    82ea:	11 f0       	breq	.+4      	; 0x82f0 <EepromWriteBlock+0x3a>
    82ec:	83 30       	cpi	r24, 0x03	; 3
    82ee:	19 f5       	brne	.+70     	; 0x8336 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    82f0:	89 81       	ldd	r24, Y+1	; 0x01
    82f2:	9a 81       	ldd	r25, Y+2	; 0x02
    82f4:	89 2b       	or	r24, r25
    82f6:	49 f4       	brne	.+18     	; 0x830a <EepromWriteBlock+0x54>
    82f8:	8b 81       	ldd	r24, Y+3	; 0x03
    82fa:	88 23       	and	r24, r24
    82fc:	d9 f0       	breq	.+54     	; 0x8334 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    82fe:	f0 e2       	ldi	r31, 0x20	; 32
    8300:	8f 9f       	mul	r24, r31
    8302:	c0 01       	movw	r24, r0
    8304:	11 24       	eor	r1, r1
    8306:	9a 83       	std	Y+2, r25	; 0x02
    8308:	89 83       	std	Y+1, r24	; 0x01
    830a:	78 01       	movw	r14, r16
    830c:	20 e2       	ldi	r18, 0x20	; 32
    830e:	e2 0e       	add	r14, r18
    8310:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8312:	f8 01       	movw	r30, r16
    8314:	61 91       	ld	r22, Z+
    8316:	8f 01       	movw	r16, r30
    8318:	89 81       	ldd	r24, Y+1	; 0x01
    831a:	9a 81       	ldd	r25, Y+2	; 0x02
    831c:	9c 01       	movw	r18, r24
    831e:	2f 5f       	subi	r18, 0xFF	; 255
    8320:	3f 4f       	sbci	r19, 0xFF	; 255
    8322:	3a 83       	std	Y+2, r19	; 0x02
    8324:	29 83       	std	Y+1, r18	; 0x01
    8326:	0e 94 1d 40 	call	0x803a	; 0x803a <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    832a:	0e 15       	cp	r16, r14
    832c:	1f 05       	cpc	r17, r15
    832e:	89 f7       	brne	.-30     	; 0x8312 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8330:	80 e0       	ldi	r24, 0x00	; 0
    8332:	01 c0       	rjmp	.+2      	; 0x8336 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8334:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8336:	0f 90       	pop	r0
    8338:	0f 90       	pop	r0
    833a:	0f 90       	pop	r0
    833c:	df 91       	pop	r29
    833e:	cf 91       	pop	r28
    8340:	1f 91       	pop	r17
    8342:	0f 91       	pop	r16
    8344:	ff 90       	pop	r15
    8346:	ef 90       	pop	r14
    8348:	08 95       	ret

0000834a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    834a:	cf 92       	push	r12
    834c:	df 92       	push	r13
    834e:	ff 92       	push	r15
    8350:	0f 93       	push	r16
    8352:	1f 93       	push	r17
    8354:	cf 93       	push	r28
    8356:	df 93       	push	r29
    8358:	00 d0       	rcall	.+0      	; 0x835a <EepromReadBlock+0x10>
    835a:	cd b7       	in	r28, 0x3d	; 61
    835c:	de b7       	in	r29, 0x3e	; 62
    835e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8360:	40 e0       	ldi	r20, 0x00	; 0
    8362:	50 e0       	ldi	r21, 0x00	; 0
    8364:	be 01       	movw	r22, r28
    8366:	6f 5f       	subi	r22, 0xFF	; 255
    8368:	7f 4f       	sbci	r23, 0xFF	; 255
    836a:	0e 94 09 41 	call	0x8212	; 0x8212 <EepromBlockExists>
    836e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8370:	81 11       	cpse	r24, r1
    8372:	13 c0       	rjmp	.+38     	; 0x839a <EepromReadBlock+0x50>
    8374:	68 01       	movw	r12, r16
    8376:	80 e2       	ldi	r24, 0x20	; 32
    8378:	c8 0e       	add	r12, r24
    837a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    837c:	89 81       	ldd	r24, Y+1	; 0x01
    837e:	9a 81       	ldd	r25, Y+2	; 0x02
    8380:	9c 01       	movw	r18, r24
    8382:	2f 5f       	subi	r18, 0xFF	; 255
    8384:	3f 4f       	sbci	r19, 0xFF	; 255
    8386:	3a 83       	std	Y+2, r19	; 0x02
    8388:	29 83       	std	Y+1, r18	; 0x01
    838a:	0e 94 27 40 	call	0x804e	; 0x804e <ReadEeprom>
    838e:	f8 01       	movw	r30, r16
    8390:	81 93       	st	Z+, r24
    8392:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8394:	ec 15       	cp	r30, r12
    8396:	fd 05       	cpc	r31, r13
    8398:	89 f7       	brne	.-30     	; 0x837c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    839a:	8f 2d       	mov	r24, r15
    839c:	0f 90       	pop	r0
    839e:	0f 90       	pop	r0
    83a0:	df 91       	pop	r29
    83a2:	cf 91       	pop	r28
    83a4:	1f 91       	pop	r17
    83a6:	0f 91       	pop	r16
    83a8:	ff 90       	pop	r15
    83aa:	df 90       	pop	r13
    83ac:	cf 90       	pop	r12
    83ae:	08 95       	ret

000083b0 <InitUartRxBuffer>:
			return -1;	//no data in buffer
		}
	}

	void InitUartRxBuffer(){
		uart_rx_tail=0;
    83b0:	10 92 af 0a 	sts	0x0AAF, r1
		uart_rx_head=0;
    83b4:	10 92 ad 0a 	sts	0x0AAD, r1
    83b8:	08 95       	ret

000083ba <InitUartTxBuffer>:
			return -1; //buffer full
		}
	}

	void InitUartTxBuffer(){
		uart_tx_tail=0;
    83ba:	10 92 f0 0a 	sts	0x0AF0, r1
		uart_tx_head=0;
    83be:	10 92 ae 0a 	sts	0x0AAE, r1
    83c2:	08 95       	ret

000083c4 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    83c4:	00 97       	sbiw	r24, 0x00	; 0
    83c6:	21 f0       	breq	.+8      	; 0x83d0 <GetPrngNumber+0xc>
    83c8:	90 93 41 0a 	sts	0x0A41, r25
    83cc:	80 93 40 0a 	sts	0x0A40, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    83d0:	20 91 40 0a 	lds	r18, 0x0A40
    83d4:	30 91 41 0a 	lds	r19, 0x0A41
    83d8:	a9 01       	movw	r20, r18
    83da:	56 95       	lsr	r21
    83dc:	47 95       	ror	r20
    83de:	56 95       	lsr	r21
    83e0:	47 95       	ror	r20
    83e2:	c9 01       	movw	r24, r18
    83e4:	63 e0       	ldi	r22, 0x03	; 3
    83e6:	96 95       	lsr	r25
    83e8:	87 95       	ror	r24
    83ea:	6a 95       	dec	r22
    83ec:	e1 f7       	brne	.-8      	; 0x83e6 <GetPrngNumber+0x22>
    83ee:	84 27       	eor	r24, r20
    83f0:	95 27       	eor	r25, r21
    83f2:	82 27       	eor	r24, r18
    83f4:	93 27       	eor	r25, r19
    83f6:	a9 01       	movw	r20, r18
    83f8:	75 e0       	ldi	r23, 0x05	; 5
    83fa:	56 95       	lsr	r21
    83fc:	47 95       	ror	r20
    83fe:	7a 95       	dec	r23
    8400:	e1 f7       	brne	.-8      	; 0x83fa <GetPrngNumber+0x36>
    8402:	84 27       	eor	r24, r20
    8404:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8406:	99 27       	eor	r25, r25
    8408:	86 95       	lsr	r24
    840a:	97 95       	ror	r25
    840c:	88 27       	eor	r24, r24
    840e:	36 95       	lsr	r19
    8410:	27 95       	ror	r18
    8412:	82 2b       	or	r24, r18
    8414:	93 2b       	or	r25, r19
    8416:	90 93 41 0a 	sts	0x0A41, r25
    841a:	80 93 40 0a 	sts	0x0A40, r24
	return prng_state;   
}
    841e:	08 95       	ret

00008420 <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8420:	fc 01       	movw	r30, r24
    8422:	67 87       	std	Z+15, r22	; 0x0f
    8424:	08 95       	ret

00008426 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8426:	e4 e4       	ldi	r30, 0x44	; 68
    8428:	fa e0       	ldi	r31, 0x0A	; 10
    842a:	81 e0       	ldi	r24, 0x01	; 1
    842c:	91 e0       	ldi	r25, 0x01	; 1
    842e:	95 8b       	std	Z+21, r25	; 0x15
    8430:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8432:	63 8b       	std	Z+19, r22	; 0x13
    8434:	08 95       	ret

00008436 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8436:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8438:	90 81       	ld	r25, Z
    843a:	9f 75       	andi	r25, 0x5F	; 95
    843c:	90 83       	st	Z, r25
    843e:	08 95       	ret

00008440 <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8440:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8442:	90 81       	ld	r25, Z
    8444:	90 64       	ori	r25, 0x40	; 64
    8446:	90 83       	st	Z, r25
    8448:	08 95       	ret

0000844a <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    844a:	fc 01       	movw	r30, r24
    844c:	66 87       	std	Z+14, r22	; 0x0e
    844e:	08 95       	ret

00008450 <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8450:	fc 01       	movw	r30, r24
    8452:	62 87       	std	Z+10, r22	; 0x0a
    8454:	08 95       	ret

00008456 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8456:	fc 01       	movw	r30, r24
    8458:	63 87       	std	Z+11, r22	; 0x0b
    845a:	08 95       	ret

0000845c <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    845c:	cf 93       	push	r28
    845e:	df 93       	push	r29
    8460:	ec 01       	movw	r28, r24
    8462:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8464:	29 81       	ldd	r18, Y+1	; 0x01
    8466:	30 e0       	ldi	r19, 0x00	; 0
    8468:	f9 01       	movw	r30, r18
    846a:	ee 0f       	add	r30, r30
    846c:	ff 1f       	adc	r31, r31
    846e:	e8 5f       	subi	r30, 0xF8	; 248
    8470:	f3 47       	sbci	r31, 0x73	; 115
    8472:	65 91       	lpm	r22, Z+
    8474:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8476:	f9 01       	movw	r30, r18
    8478:	e4 0f       	add	r30, r20
    847a:	f1 1d       	adc	r31, r1
    847c:	47 fd       	sbrc	r20, 7
    847e:	fa 95       	dec	r31
    8480:	ee 0f       	add	r30, r30
    8482:	ff 1f       	adc	r31, r31
    8484:	e8 5f       	subi	r30, 0xF8	; 248
    8486:	f3 47       	sbci	r31, 0x73	; 115
    8488:	85 91       	lpm	r24, Z+
    848a:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    848c:	86 1b       	sub	r24, r22
    848e:	97 0b       	sbc	r25, r23
    8490:	68 85       	ldd	r22, Y+8	; 0x08
    8492:	70 e0       	ldi	r23, 0x00	; 0
    8494:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
	if(delta==0)delta++;
    8498:	61 15       	cp	r22, r1
    849a:	71 05       	cpc	r23, r1
    849c:	11 f4       	brne	.+4      	; 0x84a2 <PatchCommand11+0x46>
    849e:	61 e0       	ldi	r22, 0x01	; 1
    84a0:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    84a2:	ea 81       	ldd	r30, Y+2	; 0x02
    84a4:	86 e0       	ldi	r24, 0x06	; 6
    84a6:	e8 9f       	mul	r30, r24
    84a8:	f0 01       	movw	r30, r0
    84aa:	11 24       	eor	r1, r1
    84ac:	ec 5b       	subi	r30, 0xBC	; 188
    84ae:	f5 4f       	sbci	r31, 0xF5	; 245
    84b0:	81 81       	ldd	r24, Z+1	; 0x01
    84b2:	92 81       	ldd	r25, Z+2	; 0x02
    84b4:	86 0f       	add	r24, r22
    84b6:	97 1f       	adc	r25, r23
    84b8:	92 83       	std	Z+2, r25	; 0x02
    84ba:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    84bc:	7e 83       	std	Y+6, r23	; 0x06
    84be:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    84c0:	88 81       	ld	r24, Y
    84c2:	88 60       	ori	r24, 0x08	; 8
    84c4:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    84c6:	89 81       	ldd	r24, Y+1	; 0x01
    84c8:	48 0f       	add	r20, r24
    84ca:	4f 83       	std	Y+7, r20	; 0x07
}
    84cc:	df 91       	pop	r29
    84ce:	cf 91       	pop	r28
    84d0:	08 95       	ret

000084d2 <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    84d2:	fc 01       	movw	r30, r24
    84d4:	60 87       	std	Z+8, r22	; 0x08
    84d6:	08 95       	ret

000084d8 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    84d8:	fc 01       	movw	r30, r24
    84da:	64 83       	std	Z+4, r22	; 0x04
    84dc:	08 95       	ret

000084de <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    84de:	fc 01       	movw	r30, r24
    84e0:	82 81       	ldd	r24, Z+2	; 0x02
    84e2:	0c 94 dc 45 	jmp	0x8bb8	; 0x8bb8 <SetMixerWave>

000084e6 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    84e6:	fc 01       	movw	r30, r24
	track->note+=param;
    84e8:	91 81       	ldd	r25, Z+1	; 0x01
    84ea:	69 0f       	add	r22, r25
    84ec:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    84ee:	82 81       	ldd	r24, Z+2	; 0x02
    84f0:	0c 94 c5 45 	jmp	0x8b8a	; 0x8b8a <SetMixerNote>

000084f4 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    84f4:	fc 01       	movw	r30, r24
	track->note-=param;
    84f6:	91 81       	ldd	r25, Z+1	; 0x01
    84f8:	96 1b       	sub	r25, r22
    84fa:	69 2f       	mov	r22, r25
    84fc:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    84fe:	82 81       	ldd	r24, Z+2	; 0x02
    8500:	0c 94 c5 45 	jmp	0x8b8a	; 0x8b8a <SetMixerNote>

00008504 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8504:	1f 93       	push	r17
    8506:	cf 93       	push	r28
    8508:	df 93       	push	r29
    850a:	ec 01       	movw	r28, r24
    850c:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    850e:	8a 81       	ldd	r24, Y+2	; 0x02
    8510:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <SetMixerNote>
	track->note=param;
    8514:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8516:	88 81       	ld	r24, Y
    8518:	87 7f       	andi	r24, 0xF7	; 247
    851a:	88 83       	st	Y, r24
}
    851c:	df 91       	pop	r29
    851e:	cf 91       	pop	r28
    8520:	1f 91       	pop	r17
    8522:	08 95       	ret

00008524 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8524:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8526:	14 96       	adiw	r26, 0x04	; 4
    8528:	8c 91       	ld	r24, X
    852a:	14 97       	sbiw	r26, 0x04	; 4
    852c:	88 23       	and	r24, r24
    852e:	19 f1       	breq	.+70     	; 0x8576 <PatchCommand14+0x52>
    8530:	55 96       	adiw	r26, 0x15	; 21
    8532:	2d 91       	ld	r18, X+
    8534:	3c 91       	ld	r19, X
    8536:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8538:	66 23       	and	r22, r22
    853a:	79 f0       	breq	.+30     	; 0x855a <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    853c:	77 27       	eor	r23, r23
    853e:	67 fd       	sbrc	r22, 7
    8540:	70 95       	com	r23
    8542:	6f 5f       	subi	r22, 0xFF	; 255
    8544:	7f 4f       	sbci	r23, 0xFF	; 255
    8546:	ab 01       	movw	r20, r22
    8548:	44 0f       	add	r20, r20
    854a:	55 1f       	adc	r21, r21
    854c:	64 0f       	add	r22, r20
    854e:	75 1f       	adc	r23, r21
    8550:	26 1b       	sub	r18, r22
    8552:	37 0b       	sbc	r19, r23
    8554:	09 c0       	rjmp	.+18     	; 0x8568 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8556:	ef 3f       	cpi	r30, 0xFF	; 255
    8558:	39 f0       	breq	.+14     	; 0x8568 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    855a:	23 50       	subi	r18, 0x03	; 3
    855c:	31 09       	sbc	r19, r1
    855e:	f9 01       	movw	r30, r18
    8560:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8562:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8564:	ed 30       	cpi	r30, 0x0D	; 13
    8566:	b9 f7       	brne	.-18     	; 0x8556 <PatchCommand14+0x32>
    8568:	56 96       	adiw	r26, 0x16	; 22
    856a:	3c 93       	st	X, r19
    856c:	2e 93       	st	-X, r18
    856e:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8570:	81 50       	subi	r24, 0x01	; 1
    8572:	14 96       	adiw	r26, 0x04	; 4
    8574:	8c 93       	st	X, r24
    8576:	08 95       	ret

00008578 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8578:	90 93 52 0b 	sts	0x0B52, r25
    857c:	80 93 51 0b 	sts	0x0B51, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8580:	8f e6       	ldi	r24, 0x6F	; 111
    8582:	80 93 54 0b 	sts	0x0B54, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8586:	10 92 42 0a 	sts	0x0A42, r1
    858a:	e3 e0       	ldi	r30, 0x03	; 3
    858c:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    858e:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8590:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8592:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8594:	28 e1       	ldi	r18, 0x18	; 24
    8596:	df 01       	movw	r26, r30
    8598:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    859a:	8c 93       	st	X, r24
    859c:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    859e:	9c 93       	st	X, r25
    85a0:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    85a2:	1c 92       	st	X, r1
    85a4:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    85a6:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    85a8:	10 82       	st	Z, r1
    85aa:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    85ac:	2c 93       	st	X, r18
    85ae:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    85b0:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    85b2:	8f 5f       	subi	r24, 0xFF	; 255
    85b4:	77 96       	adiw	r30, 0x17	; 23
    85b6:	84 30       	cpi	r24, 0x04	; 4
    85b8:	71 f7       	brne	.-36     	; 0x8596 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    85ba:	08 95       	ret

000085bc <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    85bc:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    85be:	ed 91       	ld	r30, X+
    85c0:	fc 91       	ld	r31, X
    85c2:	11 97       	sbiw	r26, 0x01	; 1
    85c4:	9f 01       	movw	r18, r30
    85c6:	2f 5f       	subi	r18, 0xFF	; 255
    85c8:	3f 4f       	sbci	r19, 0xFF	; 255
    85ca:	11 96       	adiw	r26, 0x01	; 1
    85cc:	3c 93       	st	X, r19
    85ce:	2e 93       	st	-X, r18
    85d0:	e4 91       	lpm	r30, Z
    85d2:	e7 fd       	sbrc	r30, 7
    85d4:	03 c0       	rjmp	.+6      	; 0x85dc <ReadVarLen+0x20>
    85d6:	8e 2f       	mov	r24, r30
    85d8:	90 e0       	ldi	r25, 0x00	; 0
    85da:	08 95       	ret
    {
       value &= 0x7F;
    85dc:	ef 77       	andi	r30, 0x7F	; 127
    85de:	8e 2f       	mov	r24, r30
    85e0:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    85e2:	96 95       	lsr	r25
    85e4:	98 2f       	mov	r25, r24
    85e6:	88 27       	eor	r24, r24
    85e8:	97 95       	ror	r25
    85ea:	87 95       	ror	r24
    85ec:	2f 5f       	subi	r18, 0xFF	; 255
    85ee:	3f 4f       	sbci	r19, 0xFF	; 255
    85f0:	f9 01       	movw	r30, r18
    85f2:	31 97       	sbiw	r30, 0x01	; 1
    85f4:	e4 91       	lpm	r30, Z
    85f6:	4e 2f       	mov	r20, r30
    85f8:	4f 77       	andi	r20, 0x7F	; 127
    85fa:	84 0f       	add	r24, r20
    85fc:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    85fe:	e7 fd       	sbrc	r30, 7
    8600:	f0 cf       	rjmp	.-32     	; 0x85e2 <ReadVarLen+0x26>
    8602:	2d 93       	st	X+, r18
    8604:	3c 93       	st	X, r19
    }


    return value;
}
    8606:	08 95       	ret

00008608 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8608:	ef 92       	push	r14
    860a:	ff 92       	push	r15
    860c:	0f 93       	push	r16
    860e:	1f 93       	push	r17
    8610:	cf 93       	push	r28
    8612:	df 93       	push	r29
    8614:	1f 92       	push	r1
    8616:	cd b7       	in	r28, 0x3d	; 61
    8618:	de b7       	in	r29, 0x3e	; 62
    861a:	7c 01       	movw	r14, r24
    861c:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    861e:	fc 01       	movw	r30, r24
    8620:	80 81       	ld	r24, Z
    8622:	08 2f       	mov	r16, r24
    8624:	00 1f       	adc	r16, r16
    8626:	00 27       	eor	r16, r16
    8628:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    862a:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    862c:	9f ef       	ldi	r25, 0xFF	; 255
    862e:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8630:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8632:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8634:	87 7b       	andi	r24, 0xB7	; 183
    8636:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8638:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    863a:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    863c:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    863e:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8640:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8642:	82 81       	ldd	r24, Z+2	; 0x02
    8644:	83 30       	cpi	r24, 0x03	; 3
    8646:	69 f4       	brne	.+26     	; 0x8662 <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8648:	01 11       	cpse	r16, r1
    864a:	01 c0       	rjmp	.+2      	; 0x864e <TriggerCommon+0x46>
    864c:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    864e:	81 e0       	ldi	r24, 0x01	; 1
    8650:	91 e0       	ldi	r25, 0x01	; 1
    8652:	90 93 59 0a 	sts	0x0A59, r25
    8656:	80 93 58 0a 	sts	0x0A58, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    865a:	81 e0       	ldi	r24, 0x01	; 1
    865c:	80 93 57 0a 	sts	0x0A57, r24
    8660:	0a c0       	rjmp	.+20     	; 0x8676 <TriggerCommon+0x6e>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8662:	60 e0       	ldi	r22, 0x00	; 0
    8664:	29 83       	std	Y+1, r18	; 0x01
    8666:	0e 94 dc 45 	call	0x8bb8	; 0x8bb8 <SetMixerWave>
			SetMixerNote(track->channel,note);
    866a:	29 81       	ldd	r18, Y+1	; 0x01
    866c:	62 2f       	mov	r22, r18
    866e:	f7 01       	movw	r30, r14
    8670:	82 81       	ldd	r24, Z+2	; 0x02
    8672:	0e 94 c5 45 	call	0x8b8a	; 0x8b8a <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8676:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8678:	00 23       	and	r16, r16
    867a:	11 f0       	breq	.+4      	; 0x8680 <TriggerCommon+0x78>
		track->fxPatchNo=patch;
    867c:	11 8b       	std	Z+17, r17	; 0x11
    867e:	01 c0       	rjmp	.+2      	; 0x8682 <TriggerCommon+0x7a>
	}else{
		track->patchNo=patch;	
    8680:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8682:	e0 91 51 0b 	lds	r30, 0x0B51
    8686:	f0 91 52 0b 	lds	r31, 0x0B52
    868a:	89 e0       	ldi	r24, 0x09	; 9
    868c:	18 9f       	mul	r17, r24
    868e:	e0 0d       	add	r30, r0
    8690:	f1 1d       	adc	r31, r1
    8692:	11 24       	eor	r1, r1
    8694:	33 96       	adiw	r30, 0x03	; 3
    8696:	85 91       	lpm	r24, Z+
    8698:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    869a:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    869c:	00 97       	sbiw	r24, 0x00	; 0
    869e:	19 f4       	brne	.+6      	; 0x86a6 <TriggerCommon+0x9e>
		track->patchCommandStreamPos=NULL;
    86a0:	16 8a       	std	Z+22, r1	; 0x16
    86a2:	15 8a       	std	Z+21, r1	; 0x15
    86a4:	08 c0       	rjmp	.+16     	; 0x86b6 <TriggerCommon+0xae>
	}else{
		track->patchCurrDeltaTime=0;
    86a6:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    86a8:	fc 01       	movw	r30, r24
    86aa:	24 91       	lpm	r18, Z
    86ac:	f7 01       	movw	r30, r14
    86ae:	22 8b       	std	Z+18, r18	; 0x12
    86b0:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    86b2:	96 8b       	std	Z+22, r25	; 0x16
    86b4:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    86b6:	0f 90       	pop	r0
    86b8:	df 91       	pop	r29
    86ba:	cf 91       	pop	r28
    86bc:	1f 91       	pop	r17
    86be:	0f 91       	pop	r16
    86c0:	ff 90       	pop	r15
    86c2:	ef 90       	pop	r14
    86c4:	08 95       	ret

000086c6 <TriggerNote>:
	TriggerCommon(track,patch,volume,80);
	track->flags|=TRACK_FLAGS_PLAYING;
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    86c6:	cf 93       	push	r28
    86c8:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    86ca:	a8 2f       	mov	r26, r24
    86cc:	b0 e0       	ldi	r27, 0x00	; 0
    86ce:	97 e1       	ldi	r25, 0x17	; 23
    86d0:	89 9f       	mul	r24, r25
    86d2:	f0 01       	movw	r30, r0
    86d4:	11 24       	eor	r1, r1
    86d6:	ed 50       	subi	r30, 0x0D	; 13
    86d8:	f5 4f       	sbci	r31, 0xF5	; 245
    86da:	80 81       	ld	r24, Z
    86dc:	85 ff       	sbrs	r24, 5
    86de:	02 c0       	rjmp	.+4      	; 0x86e4 <TriggerNote+0x1e>
    86e0:	87 fd       	sbrc	r24, 7
    86e2:	2e c0       	rjmp	.+92     	; 0x8740 <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    86e4:	21 11       	cpse	r18, r1
    86e6:	18 c0       	rjmp	.+48     	; 0x8718 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    86e8:	97 e1       	ldi	r25, 0x17	; 23
    86ea:	9a 9f       	mul	r25, r26
    86ec:	f0 01       	movw	r30, r0
    86ee:	9b 9f       	mul	r25, r27
    86f0:	f0 0d       	add	r31, r0
    86f2:	11 24       	eor	r1, r1
    86f4:	ed 50       	subi	r30, 0x0D	; 13
    86f6:	f5 4f       	sbci	r31, 0xF5	; 245
    86f8:	97 85       	ldd	r25, Z+15	; 0x0f
    86fa:	91 11       	cpse	r25, r1
    86fc:	02 c0       	rjmp	.+4      	; 0x8702 <TriggerNote+0x3c>
    86fe:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8700:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8702:	97 e1       	ldi	r25, 0x17	; 23
    8704:	9a 9f       	mul	r25, r26
    8706:	f0 01       	movw	r30, r0
    8708:	9b 9f       	mul	r25, r27
    870a:	f0 0d       	add	r31, r0
    870c:	11 24       	eor	r1, r1
    870e:	ed 50       	subi	r30, 0x0D	; 13
    8710:	f5 4f       	sbci	r31, 0xF5	; 245
    8712:	8f 7b       	andi	r24, 0xBF	; 191
    8714:	80 83       	st	Z, r24
    8716:	14 c0       	rjmp	.+40     	; 0x8740 <TriggerNote+0x7a>
    8718:	82 2f       	mov	r24, r18
    871a:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    871c:	97 e1       	ldi	r25, 0x17	; 23
    871e:	9a 9f       	mul	r25, r26
    8720:	e0 01       	movw	r28, r0
    8722:	9b 9f       	mul	r25, r27
    8724:	d0 0d       	add	r29, r0
    8726:	11 24       	eor	r1, r1
    8728:	cd 50       	subi	r28, 0x0D	; 13
    872a:	d5 4f       	sbci	r29, 0xF5	; 245
    872c:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    872e:	1e 8a       	std	Y+22, r1	; 0x16
    8730:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8732:	48 2f       	mov	r20, r24
    8734:	ce 01       	movw	r24, r28
    8736:	0e 94 04 43 	call	0x8608	; 0x8608 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    873a:	88 81       	ld	r24, Y
    873c:	80 62       	ori	r24, 0x20	; 32
    873e:	88 83       	st	Y, r24
		}

	}
}
    8740:	df 91       	pop	r29
    8742:	cf 91       	pop	r28
    8744:	08 95       	ret

00008746 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8746:	6f 92       	push	r6
    8748:	7f 92       	push	r7
    874a:	8f 92       	push	r8
    874c:	9f 92       	push	r9
    874e:	af 92       	push	r10
    8750:	bf 92       	push	r11
    8752:	cf 92       	push	r12
    8754:	df 92       	push	r13
    8756:	ef 92       	push	r14
    8758:	ff 92       	push	r15
    875a:	0f 93       	push	r16
    875c:	1f 93       	push	r17
    875e:	cf 93       	push	r28
    8760:	df 93       	push	r29
    8762:	c3 ef       	ldi	r28, 0xF3	; 243
    8764:	da e0       	ldi	r29, 0x0A	; 10
    8766:	04 e4       	ldi	r16, 0x44	; 68
    8768:	1a e0       	ldi	r17, 0x0A	; 10
    876a:	d8 01       	movw	r26, r16
    876c:	9e 01       	movw	r18, r28
    876e:	40 e0       	ldi	r20, 0x00	; 0
    8770:	50 e0       	ldi	r21, 0x00	; 0
    8772:	ca 01       	movw	r24, r20
    8774:	8d 50       	subi	r24, 0x0D	; 13
    8776:	95 4f       	sbci	r25, 0xF5	; 245
    8778:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    877a:	fc 01       	movw	r30, r24
    877c:	87 85       	ldd	r24, Z+15	; 0x0f
    877e:	88 23       	and	r24, r24
    8780:	91 f0       	breq	.+36     	; 0x87a6 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    8782:	66 85       	ldd	r22, Z+14	; 0x0e
    8784:	99 27       	eor	r25, r25
    8786:	87 fd       	sbrc	r24, 7
    8788:	90 95       	com	r25
    878a:	86 0f       	add	r24, r22
    878c:	91 1d       	adc	r25, r1
    878e:	8f 3f       	cpi	r24, 0xFF	; 255
    8790:	91 05       	cpc	r25, r1
    8792:	19 f0       	breq	.+6      	; 0x879a <ProcessMusic+0x54>
    8794:	14 f0       	brlt	.+4      	; 0x879a <ProcessMusic+0x54>
    8796:	8f ef       	ldi	r24, 0xFF	; 255
    8798:	90 e0       	ldi	r25, 0x00	; 0
    879a:	97 ff       	sbrs	r25, 7
    879c:	02 c0       	rjmp	.+4      	; 0x87a2 <ProcessMusic+0x5c>
    879e:	80 e0       	ldi	r24, 0x00	; 0
    87a0:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    87a2:	f6 01       	movw	r30, r12
    87a4:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    87a6:	f9 01       	movw	r30, r18
    87a8:	f0 80       	ld	r15, Z
    87aa:	f3 fe       	sbrs	r15, 3
    87ac:	2a c0       	rjmp	.+84     	; 0x8802 <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    87ae:	65 81       	ldd	r22, Z+5	; 0x05
    87b0:	76 81       	ldd	r23, Z+6	; 0x06
    87b2:	11 96       	adiw	r26, 0x01	; 1
    87b4:	8d 91       	ld	r24, X+
    87b6:	9c 91       	ld	r25, X
    87b8:	12 97       	sbiw	r26, 0x02	; 2
    87ba:	86 0f       	add	r24, r22
    87bc:	97 1f       	adc	r25, r23
    87be:	12 96       	adiw	r26, 0x02	; 2
    87c0:	9c 93       	st	X, r25
    87c2:	8e 93       	st	-X, r24
    87c4:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    87c6:	f6 01       	movw	r30, r12
    87c8:	e7 80       	ldd	r14, Z+7	; 0x07
    87ca:	ee 2d       	mov	r30, r14
    87cc:	f0 e0       	ldi	r31, 0x00	; 0
    87ce:	ee 0f       	add	r30, r30
    87d0:	ff 1f       	adc	r31, r31
    87d2:	e8 5f       	subi	r30, 0xF8	; 248
    87d4:	f3 47       	sbci	r31, 0x73	; 115
    87d6:	c5 90       	lpm	r12, Z+
    87d8:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    87da:	16 16       	cp	r1, r22
    87dc:	17 06       	cpc	r1, r23
    87de:	24 f4       	brge	.+8      	; 0x87e8 <ProcessMusic+0xa2>
    87e0:	8c 15       	cp	r24, r12
    87e2:	9d 05       	cpc	r25, r13
    87e4:	30 f4       	brcc	.+12     	; 0x87f2 <ProcessMusic+0xac>
    87e6:	0d c0       	rjmp	.+26     	; 0x8802 <ProcessMusic+0xbc>
    87e8:	67 2b       	or	r22, r23
    87ea:	59 f0       	breq	.+22     	; 0x8802 <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    87ec:	c8 16       	cp	r12, r24
    87ee:	d9 06       	cpc	r13, r25
    87f0:	40 f0       	brcs	.+16     	; 0x8802 <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    87f2:	12 96       	adiw	r26, 0x02	; 2
    87f4:	dc 92       	st	X, r13
    87f6:	ce 92       	st	-X, r12
    87f8:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    87fa:	8f 2d       	mov	r24, r15
    87fc:	87 7f       	andi	r24, 0xF7	; 247
    87fe:	f9 01       	movw	r30, r18
    8800:	80 83       	st	Z, r24
    8802:	49 5e       	subi	r20, 0xE9	; 233
    8804:	5f 4f       	sbci	r21, 0xFF	; 255
    8806:	29 5e       	subi	r18, 0xE9	; 233
    8808:	3f 4f       	sbci	r19, 0xFF	; 255
    880a:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    880c:	4c 35       	cpi	r20, 0x5C	; 92
    880e:	51 05       	cpc	r21, r1
    8810:	09 f0       	breq	.+2      	; 0x8814 <ProcessMusic+0xce>
    8812:	af cf       	rjmp	.-162    	; 0x8772 <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    8814:	80 91 42 0a 	lds	r24, 0x0A42
    8818:	88 23       	and	r24, r24
    881a:	09 f4       	brne	.+2      	; 0x881e <ProcessMusic+0xd8>
    881c:	cc c0       	rjmp	.+408    	; 0x89b6 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    881e:	57 e1       	ldi	r21, 0x17	; 23
    8820:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    8822:	80 91 4f 0b 	lds	r24, 0x0B4F
    8826:	90 91 50 0b 	lds	r25, 0x0B50
    882a:	20 91 55 0b 	lds	r18, 0x0B55
    882e:	30 91 56 0b 	lds	r19, 0x0B56
    8832:	82 17       	cp	r24, r18
    8834:	93 07       	cpc	r25, r19
    8836:	09 f0       	breq	.+2      	; 0x883a <ProcessMusic+0xf4>
    8838:	b9 c0       	rjmp	.+370    	; 0x89ac <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    883a:	20 91 58 0b 	lds	r18, 0x0B58
    883e:	30 91 59 0b 	lds	r19, 0x0B59
    8842:	b9 01       	movw	r22, r18
    8844:	6f 5f       	subi	r22, 0xFF	; 255
    8846:	7f 4f       	sbci	r23, 0xFF	; 255
    8848:	70 93 59 0b 	sts	0x0B59, r23
    884c:	60 93 58 0b 	sts	0x0B58, r22
    8850:	f9 01       	movw	r30, r18
    8852:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    8854:	4f 3f       	cpi	r20, 0xFF	; 255
    8856:	79 f5       	brne	.+94     	; 0x88b6 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    8858:	a9 01       	movw	r20, r18
    885a:	4e 5f       	subi	r20, 0xFE	; 254
    885c:	5f 4f       	sbci	r21, 0xFF	; 255
    885e:	50 93 59 0b 	sts	0x0B59, r21
    8862:	40 93 58 0b 	sts	0x0B58, r20
    8866:	fb 01       	movw	r30, r22
    8868:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    886a:	6f 32       	cpi	r22, 0x2F	; 47
    886c:	19 f4       	brne	.+6      	; 0x8874 <ProcessMusic+0x12e>
						playSong=false;
    886e:	10 92 42 0a 	sts	0x0A42, r1
						break;	
    8872:	9c c0       	rjmp	.+312    	; 0x89ac <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    8874:	66 30       	cpi	r22, 0x06	; 6
    8876:	09 f0       	breq	.+2      	; 0x887a <ProcessMusic+0x134>
    8878:	8c c0       	rjmp	.+280    	; 0x8992 <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    887a:	fa 01       	movw	r30, r20
    887c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    887e:	c9 01       	movw	r24, r18
    8880:	04 96       	adiw	r24, 0x04	; 4
    8882:	90 93 59 0b 	sts	0x0B59, r25
    8886:	80 93 58 0b 	sts	0x0B58, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    888a:	f9 01       	movw	r30, r18
    888c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    888e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8890:	e3 35       	cpi	r30, 0x53	; 83
    8892:	29 f4       	brne	.+10     	; 0x889e <ProcessMusic+0x158>
							loopStart=songPos;
    8894:	90 93 5b 0b 	sts	0x0B5B, r25
    8898:	80 93 5a 0b 	sts	0x0B5A, r24
    889c:	7a c0       	rjmp	.+244    	; 0x8992 <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    889e:	e5 34       	cpi	r30, 0x45	; 69
    88a0:	09 f0       	breq	.+2      	; 0x88a4 <ProcessMusic+0x15e>
    88a2:	77 c0       	rjmp	.+238    	; 0x8992 <ProcessMusic+0x24c>
							songPos=loopStart;
    88a4:	80 91 5a 0b 	lds	r24, 0x0B5A
    88a8:	90 91 5b 0b 	lds	r25, 0x0B5B
    88ac:	90 93 59 0b 	sts	0x0B59, r25
    88b0:	80 93 58 0b 	sts	0x0B58, r24
    88b4:	6e c0       	rjmp	.+220    	; 0x8992 <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    88b6:	47 fd       	sbrc	r20, 7
    88b8:	40 93 53 0b 	sts	0x0B53, r20
					channel=lastStatus&0x0f;
    88bc:	90 91 53 0b 	lds	r25, 0x0B53
    88c0:	89 2f       	mov	r24, r25
    88c2:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    88c4:	47 ff       	sbrs	r20, 7
    88c6:	08 c0       	rjmp	.+16     	; 0x88d8 <ProcessMusic+0x192>
    88c8:	2e 5f       	subi	r18, 0xFE	; 254
    88ca:	3f 4f       	sbci	r19, 0xFF	; 255
    88cc:	30 93 59 0b 	sts	0x0B59, r19
    88d0:	20 93 58 0b 	sts	0x0B58, r18
    88d4:	fb 01       	movw	r30, r22
    88d6:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    88d8:	90 7f       	andi	r25, 0xF0	; 240
    88da:	90 3b       	cpi	r25, 0xB0	; 176
    88dc:	e1 f0       	breq	.+56     	; 0x8916 <ProcessMusic+0x1d0>
    88de:	90 3c       	cpi	r25, 0xC0	; 192
    88e0:	09 f4       	brne	.+2      	; 0x88e4 <ProcessMusic+0x19e>
    88e2:	51 c0       	rjmp	.+162    	; 0x8986 <ProcessMusic+0x240>
    88e4:	90 39       	cpi	r25, 0x90	; 144
    88e6:	09 f0       	breq	.+2      	; 0x88ea <ProcessMusic+0x1a4>
    88e8:	54 c0       	rjmp	.+168    	; 0x8992 <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    88ea:	e0 91 58 0b 	lds	r30, 0x0B58
    88ee:	f0 91 59 0b 	lds	r31, 0x0B59
    88f2:	9f 01       	movw	r18, r30
    88f4:	2f 5f       	subi	r18, 0xFF	; 255
    88f6:	3f 4f       	sbci	r19, 0xFF	; 255
    88f8:	30 93 59 0b 	sts	0x0B59, r19
    88fc:	20 93 58 0b 	sts	0x0B58, r18
    8900:	24 91       	lpm	r18, Z
    8902:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    8904:	f8 9e       	mul	r15, r24
    8906:	f0 01       	movw	r30, r0
    8908:	11 24       	eor	r1, r1
    890a:	ed 50       	subi	r30, 0x0D	; 13
    890c:	f5 4f       	sbci	r31, 0xF5	; 245
    890e:	60 89       	ldd	r22, Z+16	; 0x10
    8910:	0e 94 63 43 	call	0x86c6	; 0x86c6 <TriggerNote>
    8914:	3e c0       	rjmp	.+124    	; 0x8992 <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    8916:	e0 91 58 0b 	lds	r30, 0x0B58
    891a:	f0 91 59 0b 	lds	r31, 0x0B59
    891e:	9f 01       	movw	r18, r30
    8920:	2f 5f       	subi	r18, 0xFF	; 255
    8922:	3f 4f       	sbci	r19, 0xFF	; 255
    8924:	30 93 59 0b 	sts	0x0B59, r19
    8928:	20 93 58 0b 	sts	0x0B58, r18
    892c:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    892e:	47 30       	cpi	r20, 0x07	; 7
    8930:	49 f4       	brne	.+18     	; 0x8944 <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    8932:	f8 9e       	mul	r15, r24
    8934:	d0 01       	movw	r26, r0
    8936:	11 24       	eor	r1, r1
    8938:	ad 50       	subi	r26, 0x0D	; 13
    893a:	b5 4f       	sbci	r27, 0xF5	; 245
    893c:	ee 0f       	add	r30, r30
    893e:	1c 96       	adiw	r26, 0x0c	; 12
    8940:	ec 93       	st	X, r30
    8942:	27 c0       	rjmp	.+78     	; 0x8992 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    8944:	4b 30       	cpi	r20, 0x0B	; 11
    8946:	49 f4       	brne	.+18     	; 0x895a <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    8948:	f8 9e       	mul	r15, r24
    894a:	d0 01       	movw	r26, r0
    894c:	11 24       	eor	r1, r1
    894e:	ad 50       	subi	r26, 0x0D	; 13
    8950:	b5 4f       	sbci	r27, 0xF5	; 245
    8952:	ee 0f       	add	r30, r30
    8954:	13 96       	adiw	r26, 0x03	; 3
    8956:	ec 93       	st	X, r30
    8958:	1c c0       	rjmp	.+56     	; 0x8992 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    895a:	4c 35       	cpi	r20, 0x5C	; 92
    895c:	49 f4       	brne	.+18     	; 0x8970 <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    895e:	f8 9e       	mul	r15, r24
    8960:	d0 01       	movw	r26, r0
    8962:	11 24       	eor	r1, r1
    8964:	ad 50       	subi	r26, 0x0D	; 13
    8966:	b5 4f       	sbci	r27, 0xF5	; 245
    8968:	ee 0f       	add	r30, r30
    896a:	1a 96       	adiw	r26, 0x0a	; 10
    896c:	ec 93       	st	X, r30
    896e:	11 c0       	rjmp	.+34     	; 0x8992 <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8970:	44 36       	cpi	r20, 0x64	; 100
    8972:	79 f4       	brne	.+30     	; 0x8992 <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    8974:	f8 9e       	mul	r15, r24
    8976:	d0 01       	movw	r26, r0
    8978:	11 24       	eor	r1, r1
    897a:	ad 50       	subi	r26, 0x0D	; 13
    897c:	b5 4f       	sbci	r27, 0xF5	; 245
    897e:	ee 0f       	add	r30, r30
    8980:	1b 96       	adiw	r26, 0x0b	; 11
    8982:	ec 93       	st	X, r30
    8984:	06 c0       	rjmp	.+12     	; 0x8992 <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    8986:	f8 9e       	mul	r15, r24
    8988:	f0 01       	movw	r30, r0
    898a:	11 24       	eor	r1, r1
    898c:	ed 50       	subi	r30, 0x0D	; 13
    898e:	f5 4f       	sbci	r31, 0xF5	; 245
    8990:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    8992:	88 e5       	ldi	r24, 0x58	; 88
    8994:	9b e0       	ldi	r25, 0x0B	; 11
    8996:	0e 94 de 42 	call	0x85bc	; 0x85bc <ReadVarLen>
    899a:	90 93 56 0b 	sts	0x0B56, r25
    899e:	80 93 55 0b 	sts	0x0B55, r24
				currDeltaTime=0;
    89a2:	10 92 50 0b 	sts	0x0B50, r1
    89a6:	10 92 4f 0b 	sts	0x0B4F, r1
    89aa:	3b cf       	rjmp	.-394    	; 0x8822 <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    89ac:	01 96       	adiw	r24, 0x01	; 1
    89ae:	90 93 50 0b 	sts	0x0B50, r25
    89b2:	80 93 4f 0b 	sts	0x0B4F, r24
    89b6:	9c ef       	ldi	r25, 0xFC	; 252
    89b8:	a9 2e       	mov	r10, r25
    89ba:	9a e0       	ldi	r25, 0x0A	; 10
    89bc:	b9 2e       	mov	r11, r25
    89be:	26 e0       	ldi	r18, 0x06	; 6
    89c0:	c2 2e       	mov	r12, r18
    89c2:	2b e0       	ldi	r18, 0x0B	; 11
    89c4:	d2 2e       	mov	r13, r18
    89c6:	37 e0       	ldi	r19, 0x07	; 7
    89c8:	e3 2e       	mov	r14, r19
    89ca:	3b e0       	ldi	r19, 0x0B	; 11
    89cc:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    89ce:	66 24       	eor	r6, r6
    89d0:	6a 94       	dec	r6
    89d2:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    89d4:	88 81       	ld	r24, Y
    89d6:	85 ff       	sbrs	r24, 5
    89d8:	42 c0       	rjmp	.+132    	; 0x8a5e <ProcessMusic+0x318>
    89da:	2d 89       	ldd	r18, Y+21	; 0x15
    89dc:	3e 89       	ldd	r19, Y+22	; 0x16
    89de:	23 2b       	or	r18, r19
    89e0:	09 f4       	brne	.+2      	; 0x89e4 <ProcessMusic+0x29e>
    89e2:	3d c0       	rjmp	.+122    	; 0x8a5e <ProcessMusic+0x318>
    89e4:	86 fd       	sbrc	r24, 6
    89e6:	3b c0       	rjmp	.+118    	; 0x8a5e <ProcessMusic+0x318>
    89e8:	47 01       	movw	r8, r14
    89ea:	f2 e0       	ldi	r31, 0x02	; 2
    89ec:	8f 1a       	sub	r8, r31
    89ee:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    89f0:	d6 01       	movw	r26, r12
    89f2:	9c 91       	ld	r25, X
    89f4:	f4 01       	movw	r30, r8
    89f6:	80 81       	ld	r24, Z
    89f8:	98 13       	cpse	r25, r24
    89fa:	2e c0       	rjmp	.+92     	; 0x8a58 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    89fc:	ed 89       	ldd	r30, Y+21	; 0x15
    89fe:	fe 89       	ldd	r31, Y+22	; 0x16
    8a00:	bf 01       	movw	r22, r30
    8a02:	6f 5f       	subi	r22, 0xFF	; 255
    8a04:	7f 4f       	sbci	r23, 0xFF	; 255
    8a06:	7e 8b       	std	Y+22, r23	; 0x16
    8a08:	6d 8b       	std	Y+21, r22	; 0x15
    8a0a:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    8a0c:	8f 3f       	cpi	r24, 0xFF	; 255
    8a0e:	31 f4       	brne	.+12     	; 0x8a1c <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8a10:	88 81       	ld	r24, Y
    8a12:	8f 77       	andi	r24, 0x7F	; 127
    8a14:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    8a16:	1e 8a       	std	Y+22, r1	; 0x16
    8a18:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    8a1a:	1e c0       	rjmp	.+60     	; 0x8a58 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    8a1c:	9f 01       	movw	r18, r30
    8a1e:	2e 5f       	subi	r18, 0xFE	; 254
    8a20:	3f 4f       	sbci	r19, 0xFF	; 255
    8a22:	3e 8b       	std	Y+22, r19	; 0x16
    8a24:	2d 8b       	std	Y+21, r18	; 0x15
    8a26:	fb 01       	movw	r30, r22
    8a28:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    8a2a:	e8 2f       	mov	r30, r24
    8a2c:	f0 e0       	ldi	r31, 0x00	; 0
    8a2e:	ee 0f       	add	r30, r30
    8a30:	ff 1f       	adc	r31, r31
    8a32:	e2 54       	subi	r30, 0x42	; 66
    8a34:	ff 4f       	sbci	r31, 0xFF	; 255
    8a36:	25 91       	lpm	r18, Z+
    8a38:	34 91       	lpm	r19, Z
    8a3a:	ce 01       	movw	r24, r28
    8a3c:	f9 01       	movw	r30, r18
    8a3e:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    8a40:	ed 89       	ldd	r30, Y+21	; 0x15
    8a42:	fe 89       	ldd	r31, Y+22	; 0x16
    8a44:	cf 01       	movw	r24, r30
    8a46:	01 96       	adiw	r24, 0x01	; 1
    8a48:	9e 8b       	std	Y+22, r25	; 0x16
    8a4a:	8d 8b       	std	Y+21, r24	; 0x15
    8a4c:	e4 91       	lpm	r30, Z
    8a4e:	d4 01       	movw	r26, r8
    8a50:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    8a52:	f6 01       	movw	r30, r12
    8a54:	10 82       	st	Z, r1
    8a56:	cc cf       	rjmp	.-104    	; 0x89f0 <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    8a58:	9f 5f       	subi	r25, 0xFF	; 255
    8a5a:	d6 01       	movw	r26, r12
    8a5c:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    8a5e:	98 81       	ld	r25, Y
    8a60:	95 ff       	sbrs	r25, 5
    8a62:	6c c0       	rjmp	.+216    	; 0x8b3c <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    8a64:	f7 01       	movw	r30, r14
    8a66:	80 81       	ld	r24, Z
    8a68:	8f 3f       	cpi	r24, 0xFF	; 255
    8a6a:	11 f0       	breq	.+4      	; 0x8a70 <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    8a6c:	8f 5f       	subi	r24, 0xFF	; 255
    8a6e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8a70:	97 fd       	sbrc	r25, 7
    8a72:	04 c0       	rjmp	.+8      	; 0x8a7c <ProcessMusic+0x336>
    8a74:	f7 01       	movw	r30, r14
    8a76:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8a78:	90 81       	ld	r25, Z
    8a7a:	01 c0       	rjmp	.+2      	; 0x8a7e <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    8a7c:	9f ef       	ldi	r25, 0xFF	; 255
    8a7e:	f7 01       	movw	r30, r14
    8a80:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8a82:	80 81       	ld	r24, Z
    8a84:	88 23       	and	r24, r24
    8a86:	09 f4       	brne	.+2      	; 0x8a8a <ProcessMusic+0x344>
    8a88:	4e c0       	rjmp	.+156    	; 0x8b26 <ProcessMusic+0x3e0>
    8a8a:	31 96       	adiw	r30, 0x01	; 1
    8a8c:	50 81       	ld	r21, Z
    8a8e:	55 23       	and	r21, r21
    8a90:	09 f4       	brne	.+2      	; 0x8a94 <ProcessMusic+0x34e>
    8a92:	49 c0       	rjmp	.+146    	; 0x8b26 <ProcessMusic+0x3e0>
    8a94:	99 23       	and	r25, r25
    8a96:	09 f4       	brne	.+2      	; 0x8a9a <ProcessMusic+0x354>
    8a98:	46 c0       	rjmp	.+140    	; 0x8b26 <ProcessMusic+0x3e0>
    8a9a:	40 91 54 0b 	lds	r20, 0x0B54
    8a9e:	44 23       	and	r20, r20
    8aa0:	09 f4       	brne	.+2      	; 0x8aa4 <ProcessMusic+0x35e>
    8aa2:	41 c0       	rjmp	.+130    	; 0x8b26 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    8aa4:	89 9f       	mul	r24, r25
    8aa6:	c0 01       	movw	r24, r0
    8aa8:	11 24       	eor	r1, r1
    8aaa:	93 95       	inc	r25
				uVol>>=8;
    8aac:	89 2f       	mov	r24, r25
    8aae:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    8ab0:	58 9f       	mul	r21, r24
    8ab2:	90 01       	movw	r18, r0
    8ab4:	59 9f       	mul	r21, r25
    8ab6:	30 0d       	add	r19, r0
    8ab8:	11 24       	eor	r1, r1
    8aba:	c9 01       	movw	r24, r18
    8abc:	93 95       	inc	r25
				uVol>>=8;
    8abe:	89 2f       	mov	r24, r25
    8ac0:	99 27       	eor	r25, r25
    8ac2:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    8ac4:	50 81       	ld	r21, Z
    8ac6:	58 9f       	mul	r21, r24
    8ac8:	90 01       	movw	r18, r0
    8aca:	59 9f       	mul	r21, r25
    8acc:	30 0d       	add	r19, r0
    8ace:	11 24       	eor	r1, r1
    8ad0:	33 95       	inc	r19
					uVol>>=8;
    8ad2:	23 2f       	mov	r18, r19
    8ad4:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    8ad6:	42 9f       	mul	r20, r18
    8ad8:	c0 01       	movw	r24, r0
    8ada:	43 9f       	mul	r20, r19
    8adc:	90 0d       	add	r25, r0
    8ade:	11 24       	eor	r1, r1
    8ae0:	93 95       	inc	r25
				uVol>>=8;
    8ae2:	89 2f       	mov	r24, r25
    8ae4:	99 27       	eor	r25, r25
    8ae6:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    8ae8:	20 81       	ld	r18, Z
    8aea:	22 23       	and	r18, r18
    8aec:	f1 f0       	breq	.+60     	; 0x8b2a <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    8aee:	d5 01       	movw	r26, r10
    8af0:	ec 91       	ld	r30, X
    8af2:	f0 e0       	ldi	r31, 0x00	; 0
    8af4:	e0 50       	subi	r30, 0x00	; 0
    8af6:	f2 47       	sbci	r31, 0x72	; 114
    8af8:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    8afa:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    8afc:	2e 9f       	mul	r18, r30
    8afe:	f0 01       	movw	r30, r0
    8b00:	11 24       	eor	r1, r1
    8b02:	f3 95       	inc	r31
					tVol>>=8;
    8b04:	ef 2f       	mov	r30, r31
    8b06:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    8b08:	a3 01       	movw	r20, r6
    8b0a:	4e 1b       	sub	r20, r30
    8b0c:	5f 0b       	sbc	r21, r31
    8b0e:	48 9f       	mul	r20, r24
    8b10:	90 01       	movw	r18, r0
    8b12:	49 9f       	mul	r20, r25
    8b14:	30 0d       	add	r19, r0
    8b16:	58 9f       	mul	r21, r24
    8b18:	30 0d       	add	r19, r0
    8b1a:	11 24       	eor	r1, r1
    8b1c:	c9 01       	movw	r24, r18
    8b1e:	93 95       	inc	r25
					uVol>>=8;
    8b20:	89 2f       	mov	r24, r25
    8b22:	99 27       	eor	r25, r25
    8b24:	02 c0       	rjmp	.+4      	; 0x8b2a <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    8b26:	80 e0       	ldi	r24, 0x00	; 0
    8b28:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    8b2a:	f5 01       	movw	r30, r10
    8b2c:	30 81       	ld	r19, Z
    8b2e:	f7 01       	movw	r30, r14
    8b30:	39 97       	sbiw	r30, 0x09	; 9
    8b32:	20 81       	ld	r18, Z
    8b34:	23 0f       	add	r18, r19
    8b36:	d5 01       	movw	r26, r10
    8b38:	2c 93       	st	X, r18
    8b3a:	02 c0       	rjmp	.+4      	; 0x8b40 <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    8b3c:	80 e0       	ldi	r24, 0x00	; 0
    8b3e:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    8b40:	f8 01       	movw	r30, r16
    8b42:	80 83       	st	Z, r24
    8b44:	67 96       	adiw	r28, 0x17	; 23
    8b46:	0a 5f       	subi	r16, 0xFA	; 250
    8b48:	1f 4f       	sbci	r17, 0xFF	; 255
    8b4a:	f7 e1       	ldi	r31, 0x17	; 23
    8b4c:	af 0e       	add	r10, r31
    8b4e:	b1 1c       	adc	r11, r1
    8b50:	87 e1       	ldi	r24, 0x17	; 23
    8b52:	c8 0e       	add	r12, r24
    8b54:	d1 1c       	adc	r13, r1
    8b56:	97 e1       	ldi	r25, 0x17	; 23
    8b58:	e9 0e       	add	r14, r25
    8b5a:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    8b5c:	ab e0       	ldi	r26, 0x0B	; 11
    8b5e:	cf 34       	cpi	r28, 0x4F	; 79
    8b60:	da 07       	cpc	r29, r26
    8b62:	09 f0       	breq	.+2      	; 0x8b66 <ProcessMusic+0x420>
    8b64:	37 cf       	rjmp	.-402    	; 0x89d4 <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    8b66:	df 91       	pop	r29
    8b68:	cf 91       	pop	r28
    8b6a:	1f 91       	pop	r17
    8b6c:	0f 91       	pop	r16
    8b6e:	ff 90       	pop	r15
    8b70:	ef 90       	pop	r14
    8b72:	df 90       	pop	r13
    8b74:	cf 90       	pop	r12
    8b76:	bf 90       	pop	r11
    8b78:	af 90       	pop	r10
    8b7a:	9f 90       	pop	r9
    8b7c:	8f 90       	pop	r8
    8b7e:	7f 90       	pop	r7
    8b80:	6f 90       	pop	r6
    8b82:	08 95       	ret

00008b84 <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    8b84:	80 93 54 0b 	sts	0x0B54, r24
    8b88:	08 95       	ret

00008b8a <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8b8a:	99 27       	eor	r25, r25
	clr r23
    8b8c:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8b8e:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8b90:	09 f4       	brne	.+2      	; 0x8b94 <set_note_waves>
		ret
    8b92:	08 95       	ret

00008b94 <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    8b94:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    8b96:	fc e8       	ldi	r31, 0x8C	; 140
	lsl r22
    8b98:	66 0f       	add	r22, r22
	rol r23
    8b9a:	77 1f       	adc	r23, r23
	add ZL,r22
    8b9c:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8b9e:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8ba0:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8ba2:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    8ba4:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8ba6:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8ba8:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8baa:	28 9f       	mul	r18, r24
	add ZL,r0
    8bac:	e0 0d       	add	r30, r0
	adc ZH,r1
    8bae:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8bb0:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8bb2:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    8bb4:	11 24       	eor	r1, r1
	

	ret
    8bb6:	08 95       	ret

00008bb8 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    8bb8:	99 27       	eor	r25, r25
	clr r23
    8bba:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8bbc:	e4 e4       	ldi	r30, 0x44	; 68
	ldi ZH,hi8(mixerStruct)
    8bbe:	fa e0       	ldi	r31, 0x0A	; 10
	ldi r18,CHANNEL_STRUCT_SIZE
    8bc0:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8bc2:	28 9f       	mul	r18, r24
	add ZL,r0
    8bc4:	e0 0d       	add	r30, r0
	adc ZH,r1
    8bc6:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    8bc8:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8bca:	31 f4       	brne	.+12     	; 0x8bd8 <smw1>
	lds r22,tr4_params
    8bcc:	60 91 57 0a 	lds	r22, 0x0A57
	andi r22,0xfe;
    8bd0:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8bd2:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw	
    8bd6:	0b c0       	rjmp	.+22     	; 0x8bee <esmw>

00008bd8 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    8bd8:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8bda:	31 f4       	brne	.+12     	; 0x8be8 <smw2>
	lds r22,tr4_params
    8bdc:	60 91 57 0a 	lds	r22, 0x0A57
	ori r22,0xfe;
    8be0:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8be2:	60 93 57 0a 	sts	0x0A57, r22
	rjmp esmw
    8be6:	03 c0       	rjmp	.+6      	; 0x8bee <esmw>

00008be8 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    8be8:	7e e8       	ldi	r23, 0x8E	; 142
	add r23,r22
    8bea:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8bec:	75 83       	std	Z+5, r23	; 0x05

00008bee <esmw>:

esmw:
	clr r1	
    8bee:	11 24       	eor	r1, r1
	ret
    8bf0:	08 95       	ret
	...

00008c00 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8c00:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8c02:	80 93 43 0a 	sts	0x0A43, r24
	ret
    8c06:	08 95       	ret

00008c08 <steptable>:
    8c08:	22 00       	.word	0x0022	; ????
    8c0a:	24 00       	.word	0x0024	; ????
    8c0c:	26 00       	.word	0x0026	; ????
    8c0e:	28 00       	.word	0x0028	; ????
    8c10:	2b 00       	.word	0x002b	; ????
    8c12:	2d 00       	.word	0x002d	; ????
    8c14:	30 00       	.word	0x0030	; ????
    8c16:	33 00       	.word	0x0033	; ????
    8c18:	36 00       	.word	0x0036	; ????
    8c1a:	39 00       	.word	0x0039	; ????
    8c1c:	3d 00       	.word	0x003d	; ????
    8c1e:	40 00       	.word	0x0040	; ????
    8c20:	44 00       	.word	0x0044	; ????
    8c22:	48 00       	.word	0x0048	; ????
    8c24:	4c 00       	.word	0x004c	; ????
    8c26:	51 00       	.word	0x0051	; ????
    8c28:	56 00       	.word	0x0056	; ????
    8c2a:	5b 00       	.word	0x005b	; ????
    8c2c:	60 00       	.word	0x0060	; ????
    8c2e:	66 00       	.word	0x0066	; ????
    8c30:	6c 00       	.word	0x006c	; ????
    8c32:	73 00       	.word	0x0073	; ????
    8c34:	79 00       	.word	0x0079	; ????
    8c36:	81 00       	.word	0x0081	; ????
    8c38:	88 00       	.word	0x0088	; ????
    8c3a:	90 00       	.word	0x0090	; ????
    8c3c:	99 00       	.word	0x0099	; ????
    8c3e:	a2 00       	.word	0x00a2	; ????
    8c40:	ac 00       	.word	0x00ac	; ????
    8c42:	b6 00       	.word	0x00b6	; ????
    8c44:	c1 00       	.word	0x00c1	; ????
    8c46:	cc 00       	.word	0x00cc	; ????
    8c48:	d8 00       	.word	0x00d8	; ????
    8c4a:	e5 00       	.word	0x00e5	; ????
    8c4c:	f3 00       	.word	0x00f3	; ????
    8c4e:	01 01       	movw	r0, r2
    8c50:	10 01       	movw	r2, r0
    8c52:	21 01       	movw	r4, r2
    8c54:	32 01       	movw	r6, r4
    8c56:	44 01       	movw	r8, r8
    8c58:	57 01       	movw	r10, r14
    8c5a:	6c 01       	movw	r12, r24
    8c5c:	81 01       	movw	r16, r2
    8c5e:	98 01       	movw	r18, r16
    8c60:	b0 01       	movw	r22, r0
    8c62:	ca 01       	movw	r24, r20
    8c64:	e5 01       	movw	r28, r10
    8c66:	02 02       	muls	r16, r18
    8c68:	21 02       	muls	r18, r17
    8c6a:	41 02       	muls	r20, r17
    8c6c:	64 02       	muls	r22, r20
    8c6e:	88 02       	muls	r24, r24
    8c70:	ae 02       	muls	r26, r30
    8c72:	d7 02       	muls	r29, r23
    8c74:	03 03       	mulsu	r16, r19
    8c76:	30 03       	mulsu	r19, r16
    8c78:	61 03       	mulsu	r22, r17
    8c7a:	94 03       	fmuls	r17, r20
    8c7c:	cb 03       	fmulsu	r20, r19
    8c7e:	05 04       	cpc	r0, r5
    8c80:	42 04       	cpc	r4, r2
    8c82:	83 04       	cpc	r8, r3
    8c84:	c7 04       	cpc	r12, r7
    8c86:	10 05       	cpc	r17, r0
    8c88:	5d 05       	cpc	r21, r13
    8c8a:	af 05       	cpc	r26, r15
    8c8c:	05 06       	cpc	r0, r21
    8c8e:	61 06       	cpc	r6, r17
    8c90:	c2 06       	cpc	r12, r18
    8c92:	29 07       	cpc	r18, r25
    8c94:	96 07       	cpc	r25, r22
    8c96:	09 08       	sbc	r0, r9
    8c98:	83 08       	sbc	r8, r3
    8c9a:	05 09       	sbc	r16, r5
    8c9c:	8e 09       	sbc	r24, r14
    8c9e:	20 0a       	sbc	r2, r16
    8ca0:	ba 0a       	sbc	r11, r26
    8ca2:	5d 0b       	sbc	r21, r29
    8ca4:	0a 0c       	add	r0, r10
    8ca6:	c1 0c       	add	r12, r1
    8ca8:	84 0d       	add	r24, r4
    8caa:	51 0e       	add	r5, r17
    8cac:	2b 0f       	add	r18, r27
    8cae:	12 10       	cpse	r1, r2
    8cb0:	07 11       	cpse	r16, r7
    8cb2:	0a 12       	cpse	r0, r26
    8cb4:	1d 13       	cpse	r17, r29
    8cb6:	40 14       	cp	r4, r0
    8cb8:	74 15       	cp	r23, r4
    8cba:	ba 16       	cp	r11, r26
    8cbc:	14 18       	sub	r1, r4
    8cbe:	83 19       	sub	r24, r3
    8cc0:	07 1b       	sub	r16, r23
    8cc2:	a3 1c       	adc	r10, r3
    8cc4:	57 1e       	adc	r5, r23
    8cc6:	24 20       	and	r2, r4
    8cc8:	0e 22       	and	r0, r30
    8cca:	14 24       	eor	r1, r4
    8ccc:	39 26       	eor	r3, r25
    8cce:	7f 28       	or	r7, r15
    8cd0:	e8 2a       	or	r14, r24
    8cd2:	75 2d       	mov	r23, r5
    8cd4:	29 30       	cpi	r18, 0x09	; 9
    8cd6:	06 33       	cpi	r16, 0x36	; 54
    8cd8:	0f 36       	cpi	r16, 0x6F	; 111
    8cda:	45 39       	cpi	r20, 0x95	; 149
    8cdc:	ad 3c       	cpi	r26, 0xCD	; 205
    8cde:	49 40       	sbci	r20, 0x09	; 9
    8ce0:	1b 44       	sbci	r17, 0x4B	; 75
    8ce2:	28 48       	sbci	r18, 0x88	; 136
    8ce4:	73 4c       	sbci	r23, 0xC3	; 195
    8ce6:	fe 50       	subi	r31, 0x0E	; 14
    8ce8:	cf 55       	subi	r28, 0x5F	; 95
    8cea:	ea 5a       	subi	r30, 0xAA	; 170
    8cec:	51 60       	ori	r21, 0x01	; 1
    8cee:	0c 66       	ori	r16, 0x6C	; 108
    8cf0:	1d 6c       	ori	r17, 0xCD	; 205
    8cf2:	8b 72       	andi	r24, 0x2B	; 43
    8cf4:	5a 79       	andi	r21, 0x9A	; 154
    8cf6:	92 80       	ldd	r9, Z+2	; 0x02
    8cf8:	37 88       	ldd	r3, Z+23	; 0x17
    8cfa:	50 90 e5 98 	lds	r5, 0x98E5
    8cfe:	fd a1       	ldd	r31, Y+37	; 0x25
    8d00:	9f ab       	std	Y+55, r25	; 0x37
    8d02:	d3 b5       	in	r29, 0x23	; 35
    8d04:	a3 c0       	rjmp	.+326    	; 0x8e4c <waves+0x4c>
	...

00008e00 <waves>:
    8e00:	00 03       	mulsu	r16, r16
    8e02:	06 09       	sbc	r16, r6
    8e04:	0c 10       	cpse	r0, r12
    8e06:	13 16       	cp	r1, r19
    8e08:	19 1c       	adc	r1, r9
    8e0a:	1f 22       	and	r1, r31
    8e0c:	25 28       	or	r2, r5
    8e0e:	2b 2e       	mov	r2, r27
    8e10:	31 33       	cpi	r19, 0x31	; 49
    8e12:	36 39       	cpi	r19, 0x96	; 150
    8e14:	3c 3f       	cpi	r19, 0xFC	; 252
    8e16:	41 44       	sbci	r20, 0x41	; 65
    8e18:	47 49       	sbci	r20, 0x97	; 151
    8e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8e1c:	51 53       	subi	r21, 0x31	; 49
    8e1e:	55 58       	subi	r21, 0x85	; 133
    8e20:	5a 5c       	subi	r21, 0xCA	; 202
    8e22:	5e 60       	ori	r21, 0x0E	; 14
    8e24:	62 64       	ori	r22, 0x42	; 66
    8e26:	66 68       	ori	r22, 0x86	; 134
    8e28:	6a 6b       	ori	r22, 0xBA	; 186
    8e2a:	6d 6f       	ori	r22, 0xFD	; 253
    8e2c:	70 71       	andi	r23, 0x10	; 16
    8e2e:	73 74       	andi	r23, 0x43	; 67
    8e30:	75 76       	andi	r23, 0x65	; 101
    8e32:	78 79       	andi	r23, 0x98	; 152
    8e34:	7a 7a       	andi	r23, 0xAA	; 170
    8e36:	7b 7c       	andi	r23, 0xCB	; 203
    8e38:	7d 7d       	andi	r23, 0xDD	; 221
    8e3a:	7e 7e       	andi	r23, 0xEE	; 238
    8e3c:	7e 7f       	andi	r23, 0xFE	; 254
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	7f 7f       	andi	r23, 0xFF	; 255
    8e42:	7f 7f       	andi	r23, 0xFF	; 255
    8e44:	7e 7e       	andi	r23, 0xEE	; 238
    8e46:	7e 7d       	andi	r23, 0xDE	; 222
    8e48:	7d 7c       	andi	r23, 0xCD	; 205
    8e4a:	7b 7a       	andi	r23, 0xAB	; 171
    8e4c:	7a 79       	andi	r23, 0x9A	; 154
    8e4e:	78 76       	andi	r23, 0x68	; 104
    8e50:	75 74       	andi	r23, 0x45	; 69
    8e52:	73 71       	andi	r23, 0x13	; 19
    8e54:	70 6f       	ori	r23, 0xF0	; 240
    8e56:	6d 6b       	ori	r22, 0xBD	; 189
    8e58:	6a 68       	ori	r22, 0x8A	; 138
    8e5a:	66 64       	ori	r22, 0x46	; 70
    8e5c:	62 60       	ori	r22, 0x02	; 2
    8e5e:	5e 5c       	subi	r21, 0xCE	; 206
    8e60:	5a 58       	subi	r21, 0x8A	; 138
    8e62:	55 53       	subi	r21, 0x35	; 53
    8e64:	51 4e       	sbci	r21, 0xE1	; 225
    8e66:	4c 49       	sbci	r20, 0x9C	; 156
    8e68:	47 44       	sbci	r20, 0x47	; 71
    8e6a:	41 3f       	cpi	r20, 0xF1	; 241
    8e6c:	3c 39       	cpi	r19, 0x9C	; 156
    8e6e:	36 33       	cpi	r19, 0x36	; 54
    8e70:	31 2e       	mov	r3, r17
    8e72:	2b 28       	or	r2, r11
    8e74:	25 22       	and	r2, r21
    8e76:	1f 1c       	adc	r1, r15
    8e78:	19 16       	cp	r1, r25
    8e7a:	13 10       	cpse	r1, r3
    8e7c:	0c 09       	sbc	r16, r12
    8e7e:	06 03       	mulsu	r16, r22
    8e80:	00 fd       	sbrc	r16, 0
    8e82:	fa f7       	brpl	.-2      	; 0x8e82 <waves+0x82>
    8e84:	f4 f0       	brlt	.+60     	; 0x8ec2 <waves+0xc2>
    8e86:	ed ea       	ldi	r30, 0xAD	; 173
    8e88:	e7 e4       	ldi	r30, 0x47	; 71
    8e8a:	e1 de       	rcall	.-574    	; 0x8c4e <steptable+0x46>
    8e8c:	db d8       	rcall	.-3658   	; 0x8044 <WriteEeprom+0xa>
    8e8e:	d5 d2       	rcall	.+1450   	; 0x943a <waves+0x63a>
    8e90:	cf cd       	rjmp	.-1122   	; 0x8a30 <ProcessMusic+0x2ea>
    8e92:	ca c7       	rjmp	.+3988   	; 0x9e28 <LBCopyChars+0x14>
    8e94:	c4 c1       	rjmp	.+904    	; 0x921e <waves+0x41e>
    8e96:	bf bc       	out	0x2f, r11	; 47
    8e98:	b9 b7       	in	r27, 0x39	; 57
    8e9a:	b4 b2       	in	r11, 0x14	; 20
    8e9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8e9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8ea0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8ea2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8ea4:	9e 9c       	mul	r9, r14
    8ea6:	9a 98       	cbi	0x13, 2	; 19
    8ea8:	96 95       	lsr	r25
    8eaa:	93 91       	.word	0x9193	; ????
    8eac:	90 8f       	std	Z+24, r25	; 0x18
    8eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8eb0:	8b 8a       	std	Y+19, r8	; 0x13
    8eb2:	88 87       	std	Y+8, r24	; 0x08
    8eb4:	86 86       	std	Z+14, r8	; 0x0e
    8eb6:	85 84       	ldd	r8, Z+13	; 0x0d
    8eb8:	83 83       	std	Z+3, r24	; 0x03
    8eba:	82 82       	std	Z+2, r8	; 0x02
    8ebc:	82 81       	ldd	r24, Z+2	; 0x02
    8ebe:	81 81       	ldd	r24, Z+1	; 0x01
    8ec0:	81 81       	ldd	r24, Z+1	; 0x01
    8ec2:	81 81       	ldd	r24, Z+1	; 0x01
    8ec4:	82 82       	std	Z+2, r8	; 0x02
    8ec6:	82 83       	std	Z+2, r24	; 0x02
    8ec8:	83 84       	ldd	r8, Z+11	; 0x0b
    8eca:	85 86       	std	Z+13, r8	; 0x0d
    8ecc:	86 87       	std	Z+14, r24	; 0x0e
    8ece:	88 8a       	std	Y+16, r8	; 0x10
    8ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    8ed4:	90 91 93 95 	lds	r25, 0x9593
    8ed8:	96 98       	cbi	0x12, 6	; 18
    8eda:	9a 9c       	mul	r9, r10
    8edc:	9e a0       	ldd	r9, Y+38	; 0x26
    8ede:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8ee0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8ee2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ee4:	af b2       	in	r10, 0x1f	; 31
    8ee6:	b4 b7       	in	r27, 0x34	; 52
    8ee8:	b9 bc       	out	0x29, r11	; 41
    8eea:	bf c1       	rjmp	.+894    	; 0x926a <waves+0x46a>
    8eec:	c4 c7       	rjmp	.+3976   	; 0x9e76 <LBPrintStr+0x4a>
    8eee:	ca cd       	rjmp	.-1132   	; 0x8a84 <ProcessMusic+0x33e>
    8ef0:	cf d2       	rcall	.+1438   	; 0x9490 <waves+0x690>
    8ef2:	d5 d8       	rcall	.-3670   	; 0x809e <wdt_randomize+0x3e>
    8ef4:	db de       	rcall	.-586    	; 0x8cac <steptable+0xa4>
    8ef6:	e1 e4       	ldi	r30, 0x41	; 65
    8ef8:	e7 ea       	ldi	r30, 0xA7	; 167
    8efa:	ed f0       	brhs	.+58     	; 0x8f36 <waves+0x136>
    8efc:	f4 f7       	brge	.-4      	; 0x8efa <waves+0xfa>
    8efe:	fa fd       	.word	0xfdfa	; ????
    8f00:	80 81       	ld	r24, Z
    8f02:	82 83       	std	Z+2, r24	; 0x02
    8f04:	84 85       	ldd	r24, Z+12	; 0x0c
    8f06:	86 87       	std	Z+14, r24	; 0x0e
    8f08:	88 89       	ldd	r24, Y+16	; 0x10
    8f0a:	8a 8b       	std	Y+18, r24	; 0x12
    8f0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8f0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8f10:	90 91 92 93 	lds	r25, 0x9392
    8f14:	94 95       	.word	0x9594	; ????
    8f16:	96 97       	sbiw	r26, 0x26	; 38
    8f18:	98 99       	sbic	0x13, 0	; 19
    8f1a:	9a 9b       	sbis	0x13, 2	; 19
    8f1c:	9c 9d       	mul	r25, r12
    8f1e:	9e 9f       	mul	r25, r30
    8f20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8f22:	a2 a3       	std	Z+34, r26	; 0x22
    8f24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8f26:	a6 a7       	std	Z+46, r26	; 0x2e
    8f28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8f2a:	aa ab       	std	Y+50, r26	; 0x32
    8f2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8f2e:	ae af       	std	Y+62, r26	; 0x3e
    8f30:	b0 b1       	in	r27, 0x00	; 0
    8f32:	b2 b3       	in	r27, 0x12	; 18
    8f34:	b4 b5       	in	r27, 0x24	; 36
    8f36:	b6 b7       	in	r27, 0x36	; 54
    8f38:	b8 b9       	out	0x08, r27	; 8
    8f3a:	ba bb       	out	0x1a, r27	; 26
    8f3c:	bc bd       	out	0x2c, r27	; 44
    8f3e:	be bf       	out	0x3e, r27	; 62
    8f40:	c0 c1       	rjmp	.+896    	; 0x92c2 <waves+0x4c2>
    8f42:	c2 c3       	rjmp	.+1924   	; 0x96c8 <waves+0x8c8>
    8f44:	c4 c5       	rjmp	.+2952   	; 0x9ace <InitializeVideoMode+0x12>
    8f46:	c6 c7       	rjmp	.+3980   	; 0x9ed4 <LBCollides+0x46>
    8f48:	c8 c9       	rjmp	.-3184   	; 0x82da <EepromWriteBlock+0x24>
    8f4a:	ca cb       	rjmp	.-2156   	; 0x86e0 <TriggerNote+0x1a>
    8f4c:	cc cd       	rjmp	.-1128   	; 0x8ae6 <ProcessMusic+0x3a0>
    8f4e:	ce cf       	rjmp	.-100    	; 0x8eec <waves+0xec>
    8f50:	d0 d1       	rcall	.+928    	; 0x92f2 <waves+0x4f2>
    8f52:	d2 d3       	rcall	.+1956   	; 0x96f8 <waves+0x8f8>
    8f54:	d4 d5       	rcall	.+2984   	; 0x9afe <DrawMap+0x26>
    8f56:	d6 d7       	rcall	.+4012   	; 0x9f04 <LBLineIntersect+0x22>
    8f58:	d8 d9       	rcall	.-3152   	; 0x830a <EepromWriteBlock+0x54>
    8f5a:	da db       	rcall	.-2124   	; 0x8710 <TriggerNote+0x4a>
    8f5c:	dc dd       	rcall	.-1096   	; 0x8b16 <ProcessMusic+0x3d0>
    8f5e:	de df       	rcall	.-68     	; 0x8f1c <waves+0x11c>
    8f60:	e0 e1       	ldi	r30, 0x10	; 16
    8f62:	e2 e3       	ldi	r30, 0x32	; 50
    8f64:	e4 e5       	ldi	r30, 0x54	; 84
    8f66:	e6 e7       	ldi	r30, 0x76	; 118
    8f68:	e8 e9       	ldi	r30, 0x98	; 152
    8f6a:	ea eb       	ldi	r30, 0xBA	; 186
    8f6c:	ec ed       	ldi	r30, 0xDC	; 220
    8f6e:	ee ef       	ldi	r30, 0xFE	; 254
    8f70:	f0 f1       	brcs	.+124    	; 0x8fee <waves+0x1ee>
    8f72:	f2 f3       	brmi	.-4      	; 0x8f70 <waves+0x170>
    8f74:	f4 f5       	brge	.+124    	; 0x8ff2 <waves+0x1f2>
    8f76:	f6 f7       	brtc	.-4      	; 0x8f74 <waves+0x174>
    8f78:	f8 f9       	.word	0xf9f8	; ????
    8f7a:	fa fb       	.word	0xfbfa	; ????
    8f7c:	fc fd       	.word	0xfdfc	; ????
    8f7e:	fe ff       	.word	0xfffe	; ????
    8f80:	00 01       	movw	r0, r0
    8f82:	02 03       	mulsu	r16, r18
    8f84:	04 05       	cpc	r16, r4
    8f86:	06 07       	cpc	r16, r22
    8f88:	08 09       	sbc	r16, r8
    8f8a:	0a 0b       	sbc	r16, r26
    8f8c:	0c 0d       	add	r16, r12
    8f8e:	0e 0f       	add	r16, r30
    8f90:	10 11       	cpse	r17, r0
    8f92:	12 13       	cpse	r17, r18
    8f94:	14 15       	cp	r17, r4
    8f96:	16 17       	cp	r17, r22
    8f98:	18 19       	sub	r17, r8
    8f9a:	1a 1b       	sub	r17, r26
    8f9c:	1c 1d       	adc	r17, r12
    8f9e:	1e 1f       	adc	r17, r30
    8fa0:	20 21       	and	r18, r0
    8fa2:	22 23       	and	r18, r18
    8fa4:	24 25       	eor	r18, r4
    8fa6:	26 27       	eor	r18, r22
    8fa8:	28 29       	or	r18, r8
    8faa:	2a 2b       	or	r18, r26
    8fac:	2c 2d       	mov	r18, r12
    8fae:	2e 2f       	mov	r18, r30
    8fb0:	30 31       	cpi	r19, 0x10	; 16
    8fb2:	32 33       	cpi	r19, 0x32	; 50
    8fb4:	34 35       	cpi	r19, 0x54	; 84
    8fb6:	36 37       	cpi	r19, 0x76	; 118
    8fb8:	38 39       	cpi	r19, 0x98	; 152
    8fba:	3a 3b       	cpi	r19, 0xBA	; 186
    8fbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8fbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8fc0:	40 41       	sbci	r20, 0x10	; 16
    8fc2:	42 43       	sbci	r20, 0x32	; 50
    8fc4:	44 45       	sbci	r20, 0x54	; 84
    8fc6:	46 47       	sbci	r20, 0x76	; 118
    8fc8:	48 49       	sbci	r20, 0x98	; 152
    8fca:	4a 4b       	sbci	r20, 0xBA	; 186
    8fcc:	4c 4d       	sbci	r20, 0xDC	; 220
    8fce:	4e 4f       	sbci	r20, 0xFE	; 254
    8fd0:	50 51       	subi	r21, 0x10	; 16
    8fd2:	52 53       	subi	r21, 0x32	; 50
    8fd4:	54 55       	subi	r21, 0x54	; 84
    8fd6:	56 57       	subi	r21, 0x76	; 118
    8fd8:	58 59       	subi	r21, 0x98	; 152
    8fda:	5a 5b       	subi	r21, 0xBA	; 186
    8fdc:	5c 5d       	subi	r21, 0xDC	; 220
    8fde:	5e 5f       	subi	r21, 0xFE	; 254
    8fe0:	60 61       	ori	r22, 0x10	; 16
    8fe2:	62 63       	ori	r22, 0x32	; 50
    8fe4:	64 65       	ori	r22, 0x54	; 84
    8fe6:	66 67       	ori	r22, 0x76	; 118
    8fe8:	68 69       	ori	r22, 0x98	; 152
    8fea:	6a 6b       	ori	r22, 0xBA	; 186
    8fec:	6c 6d       	ori	r22, 0xDC	; 220
    8fee:	6e 6f       	ori	r22, 0xFE	; 254
    8ff0:	70 71       	andi	r23, 0x10	; 16
    8ff2:	72 73       	andi	r23, 0x32	; 50
    8ff4:	74 75       	andi	r23, 0x54	; 84
    8ff6:	76 77       	andi	r23, 0x76	; 118
    8ff8:	78 79       	andi	r23, 0x98	; 152
    8ffa:	7a 7b       	andi	r23, 0xBA	; 186
    8ffc:	7c 7d       	andi	r23, 0xDC	; 220
    8ffe:	7e 7f       	andi	r23, 0xFE	; 254
    9000:	00 02       	muls	r16, r16
    9002:	04 06       	cpc	r0, r20
    9004:	08 0a       	sbc	r0, r24
    9006:	0c 0e       	add	r0, r28
    9008:	10 12       	cpse	r1, r16
    900a:	14 16       	cp	r1, r20
    900c:	18 1a       	sub	r1, r24
    900e:	1c 1e       	adc	r1, r28
    9010:	20 22       	and	r2, r16
    9012:	24 26       	eor	r2, r20
    9014:	28 2a       	or	r2, r24
    9016:	2c 2e       	mov	r2, r28
    9018:	30 32       	cpi	r19, 0x20	; 32
    901a:	34 36       	cpi	r19, 0x64	; 100
    901c:	38 3a       	cpi	r19, 0xA8	; 168
    901e:	3c 3e       	cpi	r19, 0xEC	; 236
    9020:	40 42       	sbci	r20, 0x20	; 32
    9022:	44 46       	sbci	r20, 0x64	; 100
    9024:	48 4a       	sbci	r20, 0xA8	; 168
    9026:	4c 4e       	sbci	r20, 0xEC	; 236
    9028:	50 52       	subi	r21, 0x20	; 32
    902a:	54 56       	subi	r21, 0x64	; 100
    902c:	58 5a       	subi	r21, 0xA8	; 168
    902e:	5c 5e       	subi	r21, 0xEC	; 236
    9030:	60 62       	ori	r22, 0x20	; 32
    9032:	64 66       	ori	r22, 0x64	; 100
    9034:	68 6a       	ori	r22, 0xA8	; 168
    9036:	6c 6e       	ori	r22, 0xEC	; 236
    9038:	70 72       	andi	r23, 0x20	; 32
    903a:	74 76       	andi	r23, 0x64	; 100
    903c:	78 7a       	andi	r23, 0xA8	; 168
    903e:	7c 7e       	andi	r23, 0xEC	; 236
    9040:	7f 7d       	andi	r23, 0xDF	; 223
    9042:	7b 79       	andi	r23, 0x9B	; 155
    9044:	77 75       	andi	r23, 0x57	; 87
    9046:	73 71       	andi	r23, 0x13	; 19
    9048:	6f 6d       	ori	r22, 0xDF	; 223
    904a:	6b 69       	ori	r22, 0x9B	; 155
    904c:	67 65       	ori	r22, 0x57	; 87
    904e:	63 61       	ori	r22, 0x13	; 19
    9050:	5f 5d       	subi	r21, 0xDF	; 223
    9052:	5b 59       	subi	r21, 0x9B	; 155
    9054:	57 55       	subi	r21, 0x57	; 87
    9056:	53 51       	subi	r21, 0x13	; 19
    9058:	4f 4d       	sbci	r20, 0xDF	; 223
    905a:	4b 49       	sbci	r20, 0x9B	; 155
    905c:	47 45       	sbci	r20, 0x57	; 87
    905e:	43 41       	sbci	r20, 0x13	; 19
    9060:	3f 3d       	cpi	r19, 0xDF	; 223
    9062:	3b 39       	cpi	r19, 0x9B	; 155
    9064:	37 35       	cpi	r19, 0x57	; 87
    9066:	33 31       	cpi	r19, 0x13	; 19
    9068:	2f 2d       	mov	r18, r15
    906a:	2b 29       	or	r18, r11
    906c:	27 25       	eor	r18, r7
    906e:	23 21       	and	r18, r3
    9070:	1f 1d       	adc	r17, r15
    9072:	1b 19       	sub	r17, r11
    9074:	17 15       	cp	r17, r7
    9076:	13 11       	cpse	r17, r3
    9078:	0f 0d       	add	r16, r15
    907a:	0b 09       	sbc	r16, r11
    907c:	07 05       	cpc	r16, r7
    907e:	03 01       	movw	r0, r6
    9080:	ff fd       	.word	0xfdff	; ????
    9082:	fb f9       	.word	0xf9fb	; ????
    9084:	f7 f5       	brid	.+124    	; 0x9102 <waves+0x302>
    9086:	f3 f1       	brvs	.+124    	; 0x9104 <waves+0x304>
    9088:	ef ed       	ldi	r30, 0xDF	; 223
    908a:	eb e9       	ldi	r30, 0x9B	; 155
    908c:	e7 e5       	ldi	r30, 0x57	; 87
    908e:	e3 e1       	ldi	r30, 0x13	; 19
    9090:	df dd       	rcall	.-1090   	; 0x8c50 <steptable+0x48>
    9092:	db d9       	rcall	.-3146   	; 0x844a <PatchCommand07>
    9094:	d7 d5       	rcall	.+2990   	; 0x9c44 <doFade+0x2>
    9096:	d3 d1       	rcall	.+934    	; 0x943e <waves+0x63e>
    9098:	cf cd       	rjmp	.-1122   	; 0x8c38 <steptable+0x30>
    909a:	cb c9       	rjmp	.-3178   	; 0x8432 <PatchCommand01+0xc>
    909c:	c7 c5       	rjmp	.+2958   	; 0x9c2c <WaitVsync+0x18>
    909e:	c3 c1       	rjmp	.+902    	; 0x9426 <waves+0x626>
    90a0:	bf bd       	out	0x2f, r27	; 47
    90a2:	bb b9       	out	0x0b, r27	; 11
    90a4:	b7 b5       	in	r27, 0x27	; 39
    90a6:	b3 b1       	in	r27, 0x03	; 3
    90a8:	af ad       	ldd	r26, Y+63	; 0x3f
    90aa:	ab a9       	ldd	r26, Y+51	; 0x33
    90ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    90ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    90b0:	9f 9d       	mul	r25, r15
    90b2:	9b 99       	sbic	0x13, 3	; 19
    90b4:	97 95       	ror	r25
    90b6:	93 91       	.word	0x9193	; ????
    90b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    90ba:	8b 89       	ldd	r24, Y+19	; 0x13
    90bc:	87 85       	ldd	r24, Z+15	; 0x0f
    90be:	83 81       	ldd	r24, Z+3	; 0x03
    90c0:	80 82       	st	Z, r8
    90c2:	84 86       	std	Z+12, r8	; 0x0c
    90c4:	88 8a       	std	Y+16, r8	; 0x10
    90c6:	8c 8e       	std	Y+28, r8	; 0x1c
    90c8:	90 92 94 96 	sts	0x9694, r9
    90cc:	98 9a       	sbi	0x13, 0	; 19
    90ce:	9c 9e       	mul	r9, r28
    90d0:	a0 a2       	std	Z+32, r10	; 0x20
    90d2:	a4 a6       	std	Z+44, r10	; 0x2c
    90d4:	a8 aa       	std	Y+48, r10	; 0x30
    90d6:	ac ae       	std	Y+60, r10	; 0x3c
    90d8:	b0 b2       	in	r11, 0x10	; 16
    90da:	b4 b6       	in	r11, 0x34	; 52
    90dc:	b8 ba       	out	0x18, r11	; 24
    90de:	bc be       	out	0x3c, r11	; 60
    90e0:	c0 c2       	rjmp	.+1408   	; 0x9662 <waves+0x862>
    90e2:	c4 c6       	rjmp	.+3464   	; 0x9e6c <LBPrintStr+0x40>
    90e4:	c8 ca       	rjmp	.-2672   	; 0x8676 <TriggerCommon+0x6e>
    90e6:	cc ce       	rjmp	.-616    	; 0x8e80 <waves+0x80>
    90e8:	d0 d2       	rcall	.+1440   	; 0x968a <waves+0x88a>
    90ea:	d4 d6       	rcall	.+3496   	; 0x9e94 <LBCollides+0x6>
    90ec:	d8 da       	rcall	.-2640   	; 0x869e <TriggerCommon+0x96>
    90ee:	dc de       	rcall	.-584    	; 0x8ea8 <waves+0xa8>
    90f0:	e0 e2       	ldi	r30, 0x20	; 32
    90f2:	e4 e6       	ldi	r30, 0x64	; 100
    90f4:	e8 ea       	ldi	r30, 0xA8	; 168
    90f6:	ec ee       	ldi	r30, 0xEC	; 236
    90f8:	f0 f2       	brcs	.-68     	; 0x90b6 <waves+0x2b6>
    90fa:	f4 f6       	brge	.-68     	; 0x90b8 <waves+0x2b8>
    90fc:	f8 fa       	.word	0xfaf8	; ????
    90fe:	fc fe       	.word	0xfefc	; ????
    9100:	7f 7f       	andi	r23, 0xFF	; 255
    9102:	7f 7f       	andi	r23, 0xFF	; 255
    9104:	7f 7f       	andi	r23, 0xFF	; 255
    9106:	7f 7f       	andi	r23, 0xFF	; 255
    9108:	7f 7f       	andi	r23, 0xFF	; 255
    910a:	7f 7f       	andi	r23, 0xFF	; 255
    910c:	7f 7f       	andi	r23, 0xFF	; 255
    910e:	7f 7f       	andi	r23, 0xFF	; 255
    9110:	7f 7f       	andi	r23, 0xFF	; 255
    9112:	7f 7f       	andi	r23, 0xFF	; 255
    9114:	7f 7f       	andi	r23, 0xFF	; 255
    9116:	7f 7f       	andi	r23, 0xFF	; 255
    9118:	7f 7f       	andi	r23, 0xFF	; 255
    911a:	7f 7f       	andi	r23, 0xFF	; 255
    911c:	7f 7f       	andi	r23, 0xFF	; 255
    911e:	7f 7f       	andi	r23, 0xFF	; 255
    9120:	7f 7f       	andi	r23, 0xFF	; 255
    9122:	7f 7f       	andi	r23, 0xFF	; 255
    9124:	7f 7f       	andi	r23, 0xFF	; 255
    9126:	7f 7f       	andi	r23, 0xFF	; 255
    9128:	7f 7f       	andi	r23, 0xFF	; 255
    912a:	7f 7f       	andi	r23, 0xFF	; 255
    912c:	7f 7f       	andi	r23, 0xFF	; 255
    912e:	7f 7f       	andi	r23, 0xFF	; 255
    9130:	7f 7f       	andi	r23, 0xFF	; 255
    9132:	7f 7f       	andi	r23, 0xFF	; 255
    9134:	7f 7f       	andi	r23, 0xFF	; 255
    9136:	7f 7f       	andi	r23, 0xFF	; 255
    9138:	7f 7f       	andi	r23, 0xFF	; 255
    913a:	7f 7f       	andi	r23, 0xFF	; 255
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	80 80       	ld	r8, Z
    9142:	80 80       	ld	r8, Z
    9144:	80 80       	ld	r8, Z
    9146:	80 80       	ld	r8, Z
    9148:	80 80       	ld	r8, Z
    914a:	80 80       	ld	r8, Z
    914c:	80 80       	ld	r8, Z
    914e:	80 80       	ld	r8, Z
    9150:	80 80       	ld	r8, Z
    9152:	80 80       	ld	r8, Z
    9154:	80 80       	ld	r8, Z
    9156:	80 80       	ld	r8, Z
    9158:	80 80       	ld	r8, Z
    915a:	80 80       	ld	r8, Z
    915c:	80 80       	ld	r8, Z
    915e:	80 80       	ld	r8, Z
    9160:	80 80       	ld	r8, Z
    9162:	80 80       	ld	r8, Z
    9164:	80 80       	ld	r8, Z
    9166:	80 80       	ld	r8, Z
    9168:	80 80       	ld	r8, Z
    916a:	80 80       	ld	r8, Z
    916c:	80 80       	ld	r8, Z
    916e:	80 80       	ld	r8, Z
    9170:	80 80       	ld	r8, Z
    9172:	80 80       	ld	r8, Z
    9174:	80 80       	ld	r8, Z
    9176:	80 80       	ld	r8, Z
    9178:	80 80       	ld	r8, Z
    917a:	80 80       	ld	r8, Z
    917c:	80 80       	ld	r8, Z
    917e:	80 80       	ld	r8, Z
    9180:	80 80       	ld	r8, Z
    9182:	80 80       	ld	r8, Z
    9184:	80 80       	ld	r8, Z
    9186:	80 80       	ld	r8, Z
    9188:	80 80       	ld	r8, Z
    918a:	80 80       	ld	r8, Z
    918c:	80 80       	ld	r8, Z
    918e:	80 80       	ld	r8, Z
    9190:	80 80       	ld	r8, Z
    9192:	80 80       	ld	r8, Z
    9194:	80 80       	ld	r8, Z
    9196:	80 80       	ld	r8, Z
    9198:	80 80       	ld	r8, Z
    919a:	80 80       	ld	r8, Z
    919c:	80 80       	ld	r8, Z
    919e:	80 80       	ld	r8, Z
    91a0:	80 80       	ld	r8, Z
    91a2:	80 80       	ld	r8, Z
    91a4:	80 80       	ld	r8, Z
    91a6:	80 80       	ld	r8, Z
    91a8:	80 80       	ld	r8, Z
    91aa:	80 80       	ld	r8, Z
    91ac:	80 80       	ld	r8, Z
    91ae:	80 80       	ld	r8, Z
    91b0:	80 80       	ld	r8, Z
    91b2:	80 80       	ld	r8, Z
    91b4:	80 80       	ld	r8, Z
    91b6:	80 80       	ld	r8, Z
    91b8:	80 80       	ld	r8, Z
    91ba:	80 80       	ld	r8, Z
    91bc:	80 80       	ld	r8, Z
    91be:	80 80       	ld	r8, Z
    91c0:	80 80       	ld	r8, Z
    91c2:	80 80       	ld	r8, Z
    91c4:	80 80       	ld	r8, Z
    91c6:	80 80       	ld	r8, Z
    91c8:	80 80       	ld	r8, Z
    91ca:	80 80       	ld	r8, Z
    91cc:	80 80       	ld	r8, Z
    91ce:	80 80       	ld	r8, Z
    91d0:	80 80       	ld	r8, Z
    91d2:	80 80       	ld	r8, Z
    91d4:	80 80       	ld	r8, Z
    91d6:	80 80       	ld	r8, Z
    91d8:	80 80       	ld	r8, Z
    91da:	80 80       	ld	r8, Z
    91dc:	80 80       	ld	r8, Z
    91de:	80 80       	ld	r8, Z
    91e0:	80 80       	ld	r8, Z
    91e2:	80 80       	ld	r8, Z
    91e4:	80 80       	ld	r8, Z
    91e6:	80 80       	ld	r8, Z
    91e8:	80 80       	ld	r8, Z
    91ea:	80 80       	ld	r8, Z
    91ec:	80 80       	ld	r8, Z
    91ee:	80 80       	ld	r8, Z
    91f0:	80 80       	ld	r8, Z
    91f2:	80 80       	ld	r8, Z
    91f4:	80 80       	ld	r8, Z
    91f6:	80 80       	ld	r8, Z
    91f8:	80 80       	ld	r8, Z
    91fa:	80 80       	ld	r8, Z
    91fc:	80 80       	ld	r8, Z
    91fe:	80 80       	ld	r8, Z
    9200:	7f 7f       	andi	r23, 0xFF	; 255
    9202:	7f 7f       	andi	r23, 0xFF	; 255
    9204:	7f 7f       	andi	r23, 0xFF	; 255
    9206:	7f 7f       	andi	r23, 0xFF	; 255
    9208:	7f 7f       	andi	r23, 0xFF	; 255
    920a:	7f 7f       	andi	r23, 0xFF	; 255
    920c:	7f 7f       	andi	r23, 0xFF	; 255
    920e:	7f 7f       	andi	r23, 0xFF	; 255
    9210:	7f 7f       	andi	r23, 0xFF	; 255
    9212:	7f 7f       	andi	r23, 0xFF	; 255
    9214:	7f 7f       	andi	r23, 0xFF	; 255
    9216:	7f 7f       	andi	r23, 0xFF	; 255
    9218:	7f 7f       	andi	r23, 0xFF	; 255
    921a:	7f 7f       	andi	r23, 0xFF	; 255
    921c:	7f 7f       	andi	r23, 0xFF	; 255
    921e:	7f 7f       	andi	r23, 0xFF	; 255
    9220:	7f 7f       	andi	r23, 0xFF	; 255
    9222:	7f 7f       	andi	r23, 0xFF	; 255
    9224:	7f 7f       	andi	r23, 0xFF	; 255
    9226:	7f 7f       	andi	r23, 0xFF	; 255
    9228:	7f 7f       	andi	r23, 0xFF	; 255
    922a:	7f 7f       	andi	r23, 0xFF	; 255
    922c:	7f 7f       	andi	r23, 0xFF	; 255
    922e:	7f 7f       	andi	r23, 0xFF	; 255
    9230:	7f 7f       	andi	r23, 0xFF	; 255
    9232:	7f 7f       	andi	r23, 0xFF	; 255
    9234:	7f 7f       	andi	r23, 0xFF	; 255
    9236:	7f 7f       	andi	r23, 0xFF	; 255
    9238:	7f 7f       	andi	r23, 0xFF	; 255
    923a:	7f 7f       	andi	r23, 0xFF	; 255
    923c:	7f 7f       	andi	r23, 0xFF	; 255
    923e:	7f 7f       	andi	r23, 0xFF	; 255
    9240:	7f 7f       	andi	r23, 0xFF	; 255
    9242:	7f 7f       	andi	r23, 0xFF	; 255
    9244:	7f 7f       	andi	r23, 0xFF	; 255
    9246:	7f 7f       	andi	r23, 0xFF	; 255
    9248:	7f 7f       	andi	r23, 0xFF	; 255
    924a:	7f 7f       	andi	r23, 0xFF	; 255
    924c:	7f 7f       	andi	r23, 0xFF	; 255
    924e:	7f 7f       	andi	r23, 0xFF	; 255
    9250:	7f 7f       	andi	r23, 0xFF	; 255
    9252:	7f 7f       	andi	r23, 0xFF	; 255
    9254:	7f 7f       	andi	r23, 0xFF	; 255
    9256:	7f 7f       	andi	r23, 0xFF	; 255
    9258:	7f 7f       	andi	r23, 0xFF	; 255
    925a:	7f 7f       	andi	r23, 0xFF	; 255
    925c:	7f 7f       	andi	r23, 0xFF	; 255
    925e:	7f 7f       	andi	r23, 0xFF	; 255
    9260:	7f 7f       	andi	r23, 0xFF	; 255
    9262:	7f 7f       	andi	r23, 0xFF	; 255
    9264:	7f 7f       	andi	r23, 0xFF	; 255
    9266:	7f 7f       	andi	r23, 0xFF	; 255
    9268:	7f 7f       	andi	r23, 0xFF	; 255
    926a:	7f 7f       	andi	r23, 0xFF	; 255
    926c:	7f 7f       	andi	r23, 0xFF	; 255
    926e:	7f 7f       	andi	r23, 0xFF	; 255
    9270:	7f 7f       	andi	r23, 0xFF	; 255
    9272:	7f 7f       	andi	r23, 0xFF	; 255
    9274:	7f 7f       	andi	r23, 0xFF	; 255
    9276:	7f 7f       	andi	r23, 0xFF	; 255
    9278:	7f 7f       	andi	r23, 0xFF	; 255
    927a:	7f 7f       	andi	r23, 0xFF	; 255
    927c:	7f 7f       	andi	r23, 0xFF	; 255
    927e:	7f 7f       	andi	r23, 0xFF	; 255
    9280:	80 80       	ld	r8, Z
    9282:	80 80       	ld	r8, Z
    9284:	80 80       	ld	r8, Z
    9286:	80 80       	ld	r8, Z
    9288:	80 80       	ld	r8, Z
    928a:	80 80       	ld	r8, Z
    928c:	80 80       	ld	r8, Z
    928e:	80 80       	ld	r8, Z
    9290:	80 80       	ld	r8, Z
    9292:	80 80       	ld	r8, Z
    9294:	80 80       	ld	r8, Z
    9296:	80 80       	ld	r8, Z
    9298:	80 80       	ld	r8, Z
    929a:	80 80       	ld	r8, Z
    929c:	80 80       	ld	r8, Z
    929e:	80 80       	ld	r8, Z
    92a0:	80 80       	ld	r8, Z
    92a2:	80 80       	ld	r8, Z
    92a4:	80 80       	ld	r8, Z
    92a6:	80 80       	ld	r8, Z
    92a8:	80 80       	ld	r8, Z
    92aa:	80 80       	ld	r8, Z
    92ac:	80 80       	ld	r8, Z
    92ae:	80 80       	ld	r8, Z
    92b0:	80 80       	ld	r8, Z
    92b2:	80 80       	ld	r8, Z
    92b4:	80 80       	ld	r8, Z
    92b6:	80 80       	ld	r8, Z
    92b8:	80 80       	ld	r8, Z
    92ba:	80 80       	ld	r8, Z
    92bc:	80 80       	ld	r8, Z
    92be:	80 80       	ld	r8, Z
    92c0:	80 80       	ld	r8, Z
    92c2:	80 80       	ld	r8, Z
    92c4:	80 80       	ld	r8, Z
    92c6:	80 80       	ld	r8, Z
    92c8:	80 80       	ld	r8, Z
    92ca:	80 80       	ld	r8, Z
    92cc:	80 80       	ld	r8, Z
    92ce:	80 80       	ld	r8, Z
    92d0:	80 80       	ld	r8, Z
    92d2:	80 80       	ld	r8, Z
    92d4:	80 80       	ld	r8, Z
    92d6:	80 80       	ld	r8, Z
    92d8:	80 80       	ld	r8, Z
    92da:	80 80       	ld	r8, Z
    92dc:	80 80       	ld	r8, Z
    92de:	80 80       	ld	r8, Z
    92e0:	80 80       	ld	r8, Z
    92e2:	80 80       	ld	r8, Z
    92e4:	80 80       	ld	r8, Z
    92e6:	80 80       	ld	r8, Z
    92e8:	80 80       	ld	r8, Z
    92ea:	80 80       	ld	r8, Z
    92ec:	80 80       	ld	r8, Z
    92ee:	80 80       	ld	r8, Z
    92f0:	80 80       	ld	r8, Z
    92f2:	80 80       	ld	r8, Z
    92f4:	80 80       	ld	r8, Z
    92f6:	80 80       	ld	r8, Z
    92f8:	80 80       	ld	r8, Z
    92fa:	80 80       	ld	r8, Z
    92fc:	80 80       	ld	r8, Z
    92fe:	80 80       	ld	r8, Z
    9300:	7f 7f       	andi	r23, 0xFF	; 255
    9302:	7f 7f       	andi	r23, 0xFF	; 255
    9304:	7f 7f       	andi	r23, 0xFF	; 255
    9306:	7f 7f       	andi	r23, 0xFF	; 255
    9308:	7f 7f       	andi	r23, 0xFF	; 255
    930a:	7f 7f       	andi	r23, 0xFF	; 255
    930c:	7f 7f       	andi	r23, 0xFF	; 255
    930e:	7f 7f       	andi	r23, 0xFF	; 255
    9310:	7f 7f       	andi	r23, 0xFF	; 255
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7f       	andi	r23, 0xFF	; 255
    934e:	7f 7f       	andi	r23, 0xFF	; 255
    9350:	7f 7f       	andi	r23, 0xFF	; 255
    9352:	7f 7f       	andi	r23, 0xFF	; 255
    9354:	7f 7f       	andi	r23, 0xFF	; 255
    9356:	7f 7f       	andi	r23, 0xFF	; 255
    9358:	7f 7f       	andi	r23, 0xFF	; 255
    935a:	7f 7f       	andi	r23, 0xFF	; 255
    935c:	7f 7f       	andi	r23, 0xFF	; 255
    935e:	7f 7f       	andi	r23, 0xFF	; 255
    9360:	7f 7f       	andi	r23, 0xFF	; 255
    9362:	7f 7f       	andi	r23, 0xFF	; 255
    9364:	7f 7f       	andi	r23, 0xFF	; 255
    9366:	7f 7f       	andi	r23, 0xFF	; 255
    9368:	7f 7f       	andi	r23, 0xFF	; 255
    936a:	7f 7f       	andi	r23, 0xFF	; 255
    936c:	7f 7f       	andi	r23, 0xFF	; 255
    936e:	7f 7f       	andi	r23, 0xFF	; 255
    9370:	7f 7f       	andi	r23, 0xFF	; 255
    9372:	7f 7f       	andi	r23, 0xFF	; 255
    9374:	7f 7f       	andi	r23, 0xFF	; 255
    9376:	7f 7f       	andi	r23, 0xFF	; 255
    9378:	7f 7f       	andi	r23, 0xFF	; 255
    937a:	7f 7f       	andi	r23, 0xFF	; 255
    937c:	7f 7f       	andi	r23, 0xFF	; 255
    937e:	7f 7f       	andi	r23, 0xFF	; 255
    9380:	7f 7f       	andi	r23, 0xFF	; 255
    9382:	7f 7f       	andi	r23, 0xFF	; 255
    9384:	7f 7f       	andi	r23, 0xFF	; 255
    9386:	7f 7f       	andi	r23, 0xFF	; 255
    9388:	7f 7f       	andi	r23, 0xFF	; 255
    938a:	7f 7f       	andi	r23, 0xFF	; 255
    938c:	7f 7f       	andi	r23, 0xFF	; 255
    938e:	7f 7f       	andi	r23, 0xFF	; 255
    9390:	7f 7f       	andi	r23, 0xFF	; 255
    9392:	7f 7f       	andi	r23, 0xFF	; 255
    9394:	7f 7f       	andi	r23, 0xFF	; 255
    9396:	7f 7f       	andi	r23, 0xFF	; 255
    9398:	7f 7f       	andi	r23, 0xFF	; 255
    939a:	7f 7f       	andi	r23, 0xFF	; 255
    939c:	7f 7f       	andi	r23, 0xFF	; 255
    939e:	7f 7f       	andi	r23, 0xFF	; 255
    93a0:	7f 7f       	andi	r23, 0xFF	; 255
    93a2:	7f 7f       	andi	r23, 0xFF	; 255
    93a4:	7f 7f       	andi	r23, 0xFF	; 255
    93a6:	7f 7f       	andi	r23, 0xFF	; 255
    93a8:	7f 7f       	andi	r23, 0xFF	; 255
    93aa:	7f 7f       	andi	r23, 0xFF	; 255
    93ac:	7f 7f       	andi	r23, 0xFF	; 255
    93ae:	7f 7f       	andi	r23, 0xFF	; 255
    93b0:	7f 7f       	andi	r23, 0xFF	; 255
    93b2:	7f 7f       	andi	r23, 0xFF	; 255
    93b4:	7f 7f       	andi	r23, 0xFF	; 255
    93b6:	7f 7f       	andi	r23, 0xFF	; 255
    93b8:	7f 7f       	andi	r23, 0xFF	; 255
    93ba:	7f 7f       	andi	r23, 0xFF	; 255
    93bc:	7f 7f       	andi	r23, 0xFF	; 255
    93be:	7f 7f       	andi	r23, 0xFF	; 255
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 80       	ld	r8, Z
    93f6:	80 80       	ld	r8, Z
    93f8:	80 80       	ld	r8, Z
    93fa:	80 80       	ld	r8, Z
    93fc:	80 80       	ld	r8, Z
    93fe:	80 80       	ld	r8, Z
    9400:	03 09       	sbc	r16, r3
    9402:	13 1e       	adc	r1, r19
    9404:	28 31       	cpi	r18, 0x18	; 24
    9406:	3a 40       	sbci	r19, 0x0A	; 10
    9408:	46 4c       	sbci	r20, 0xC6	; 198
    940a:	50 54       	subi	r21, 0x40	; 64
    940c:	58 5b       	subi	r21, 0xB8	; 184
    940e:	5e 61       	ori	r21, 0x1E	; 30
    9410:	63 65       	ori	r22, 0x53	; 83
    9412:	67 69       	ori	r22, 0x97	; 151
    9414:	6b 6c       	ori	r22, 0xCB	; 203
    9416:	6e 6f       	ori	r22, 0xFE	; 254
    9418:	70 71       	andi	r23, 0x10	; 16
    941a:	72 73       	andi	r23, 0x32	; 50
    941c:	74 75       	andi	r23, 0x54	; 84
    941e:	76 77       	andi	r23, 0x76	; 118
    9420:	77 78       	andi	r23, 0x87	; 135
    9422:	79 79       	andi	r23, 0x99	; 153
    9424:	7a 7a       	andi	r23, 0xAA	; 170
    9426:	7b 7b       	andi	r23, 0xBB	; 187
    9428:	7c 7c       	andi	r23, 0xCC	; 204
    942a:	7c 7d       	andi	r23, 0xDC	; 220
    942c:	7d 7d       	andi	r23, 0xDD	; 221
    942e:	7e 7e       	andi	r23, 0xEE	; 238
    9430:	7e 7e       	andi	r23, 0xEE	; 238
    9432:	7f 7f       	andi	r23, 0xFF	; 255
    9434:	7f 7f       	andi	r23, 0xFF	; 255
    9436:	7f 7f       	andi	r23, 0xFF	; 255
    9438:	7f 7f       	andi	r23, 0xFF	; 255
    943a:	7f 7f       	andi	r23, 0xFF	; 255
    943c:	7f 7f       	andi	r23, 0xFF	; 255
    943e:	7f 7f       	andi	r23, 0xFF	; 255
    9440:	7f 7f       	andi	r23, 0xFF	; 255
    9442:	7f 7f       	andi	r23, 0xFF	; 255
    9444:	7f 7f       	andi	r23, 0xFF	; 255
    9446:	7f 7f       	andi	r23, 0xFF	; 255
    9448:	7f 7f       	andi	r23, 0xFF	; 255
    944a:	7f 7f       	andi	r23, 0xFF	; 255
    944c:	7f 7e       	andi	r23, 0xEF	; 239
    944e:	7e 7e       	andi	r23, 0xEE	; 238
    9450:	7e 7d       	andi	r23, 0xDE	; 222
    9452:	7d 7d       	andi	r23, 0xDD	; 221
    9454:	7c 7c       	andi	r23, 0xCC	; 204
    9456:	7c 7b       	andi	r23, 0xBC	; 188
    9458:	7b 7a       	andi	r23, 0xAB	; 171
    945a:	7a 79       	andi	r23, 0x9A	; 154
    945c:	79 78       	andi	r23, 0x89	; 137
    945e:	77 77       	andi	r23, 0x77	; 119
    9460:	76 75       	andi	r23, 0x56	; 86
    9462:	74 73       	andi	r23, 0x34	; 52
    9464:	72 71       	andi	r23, 0x12	; 18
    9466:	70 6f       	ori	r23, 0xF0	; 240
    9468:	6e 6c       	ori	r22, 0xCE	; 206
    946a:	6b 69       	ori	r22, 0x9B	; 155
    946c:	67 65       	ori	r22, 0x57	; 87
    946e:	63 61       	ori	r22, 0x13	; 19
    9470:	5e 5b       	subi	r21, 0xBE	; 190
    9472:	58 54       	subi	r21, 0x48	; 72
    9474:	50 4c       	sbci	r21, 0xC0	; 192
    9476:	46 40       	sbci	r20, 0x06	; 6
    9478:	3a 31       	cpi	r19, 0x1A	; 26
    947a:	28 1e       	adc	r2, r24
    947c:	13 09       	sbc	r17, r3
    947e:	03 00       	.word	0x0003	; ????
    9480:	c6 cc       	rjmp	.-1652   	; 0x8e0e <waves+0xe>
    9482:	d5 db       	rcall	.-2134   	; 0x8c2e <steptable+0x26>
    9484:	df e3       	ldi	r29, 0x3F	; 63
    9486:	e5 e7       	ldi	r30, 0x75	; 117
    9488:	e9 ea       	ldi	r30, 0xA9	; 169
    948a:	eb ec       	ldi	r30, 0xCB	; 203
    948c:	ed ee       	ldi	r30, 0xED	; 237
    948e:	ef ef       	ldi	r30, 0xFF	; 255
    9490:	f0 f0       	brcs	.+60     	; 0x94ce <waves+0x6ce>
    9492:	f0 f1       	brcs	.+124    	; 0x9510 <waves+0x710>
    9494:	f1 f1       	breq	.+124    	; 0x9512 <waves+0x712>
    9496:	f1 f2       	breq	.-68     	; 0x9454 <waves+0x654>
    9498:	f2 f2       	brmi	.-68     	; 0x9456 <waves+0x656>
    949a:	f2 f2       	brmi	.-68     	; 0x9458 <waves+0x658>
    949c:	f2 f2       	brmi	.-68     	; 0x945a <waves+0x65a>
    949e:	f2 f3       	brmi	.-4      	; 0x949c <waves+0x69c>
    94a0:	f3 f3       	brvs	.-4      	; 0x949e <waves+0x69e>
    94a2:	f3 f3       	brvs	.-4      	; 0x94a0 <waves+0x6a0>
    94a4:	f3 f3       	brvs	.-4      	; 0x94a2 <waves+0x6a2>
    94a6:	f3 f3       	brvs	.-4      	; 0x94a4 <waves+0x6a4>
    94a8:	f3 f3       	brvs	.-4      	; 0x94a6 <waves+0x6a6>
    94aa:	f3 f3       	brvs	.-4      	; 0x94a8 <waves+0x6a8>
    94ac:	f3 f3       	brvs	.-4      	; 0x94aa <waves+0x6aa>
    94ae:	f3 f3       	brvs	.-4      	; 0x94ac <waves+0x6ac>
    94b0:	f3 f3       	brvs	.-4      	; 0x94ae <waves+0x6ae>
    94b2:	f3 f3       	brvs	.-4      	; 0x94b0 <waves+0x6b0>
    94b4:	f3 f3       	brvs	.-4      	; 0x94b2 <waves+0x6b2>
    94b6:	f3 f3       	brvs	.-4      	; 0x94b4 <waves+0x6b4>
    94b8:	f3 f3       	brvs	.-4      	; 0x94b6 <waves+0x6b6>
    94ba:	f3 f3       	brvs	.-4      	; 0x94b8 <waves+0x6b8>
    94bc:	f3 f3       	brvs	.-4      	; 0x94ba <waves+0x6ba>
    94be:	f3 f3       	brvs	.-4      	; 0x94bc <waves+0x6bc>
    94c0:	f3 f3       	brvs	.-4      	; 0x94be <waves+0x6be>
    94c2:	f3 f3       	brvs	.-4      	; 0x94c0 <waves+0x6c0>
    94c4:	f3 f3       	brvs	.-4      	; 0x94c2 <waves+0x6c2>
    94c6:	f3 f3       	brvs	.-4      	; 0x94c4 <waves+0x6c4>
    94c8:	f3 f3       	brvs	.-4      	; 0x94c6 <waves+0x6c6>
    94ca:	f3 f3       	brvs	.-4      	; 0x94c8 <waves+0x6c8>
    94cc:	f3 f3       	brvs	.-4      	; 0x94ca <waves+0x6ca>
    94ce:	f3 f3       	brvs	.-4      	; 0x94cc <waves+0x6cc>
    94d0:	f3 f3       	brvs	.-4      	; 0x94ce <waves+0x6ce>
    94d2:	f3 f3       	brvs	.-4      	; 0x94d0 <waves+0x6d0>
    94d4:	f3 f3       	brvs	.-4      	; 0x94d2 <waves+0x6d2>
    94d6:	f3 f3       	brvs	.-4      	; 0x94d4 <waves+0x6d4>
    94d8:	f3 f3       	brvs	.-4      	; 0x94d6 <waves+0x6d6>
    94da:	f3 f3       	brvs	.-4      	; 0x94d8 <waves+0x6d8>
    94dc:	f3 f3       	brvs	.-4      	; 0x94da <waves+0x6da>
    94de:	f3 f3       	brvs	.-4      	; 0x94dc <waves+0x6dc>
    94e0:	f2 f2       	brmi	.-68     	; 0x949e <waves+0x69e>
    94e2:	f2 f2       	brmi	.-68     	; 0x94a0 <waves+0x6a0>
    94e4:	f2 f2       	brmi	.-68     	; 0x94a2 <waves+0x6a2>
    94e6:	f2 f2       	brmi	.-68     	; 0x94a4 <waves+0x6a4>
    94e8:	f1 f1       	breq	.+124    	; 0x9566 <waves+0x766>
    94ea:	f1 f1       	breq	.+124    	; 0x9568 <waves+0x768>
    94ec:	f0 f0       	brcs	.+60     	; 0x952a <waves+0x72a>
    94ee:	f0 ef       	ldi	r31, 0xF0	; 240
    94f0:	ef ee       	ldi	r30, 0xEF	; 239
    94f2:	ed ec       	ldi	r30, 0xCD	; 205
    94f4:	eb ea       	ldi	r30, 0xAB	; 171
    94f6:	e9 e7       	ldi	r30, 0x79	; 121
    94f8:	e5 e3       	ldi	r30, 0x35	; 53
    94fa:	df db       	rcall	.-2114   	; 0x8cba <steptable+0xb2>
    94fc:	d5 cc       	rjmp	.-1622   	; 0x8ea8 <waves+0xa8>
    94fe:	c6 00       	.word	0x00c6	; ????
    9500:	00 28       	or	r0, r0
    9502:	3d 42       	sbci	r19, 0x2D	; 45
    9504:	30 2d       	mov	r19, r0
    9506:	2c 2b       	or	r18, r28
    9508:	2c 2d       	mov	r18, r12
    950a:	2e 2f       	mov	r18, r30
    950c:	30 32       	cpi	r19, 0x20	; 32
    950e:	33 35       	cpi	r19, 0x53	; 83
    9510:	37 39       	cpi	r19, 0x97	; 151
    9512:	3b 3d       	cpi	r19, 0xDB	; 219
    9514:	3f 41       	sbci	r19, 0x1F	; 31
    9516:	43 45       	sbci	r20, 0x53	; 83
    9518:	48 4a       	sbci	r20, 0xA8	; 168
    951a:	4c 4e       	sbci	r20, 0xEC	; 236
    951c:	50 53       	subi	r21, 0x30	; 48
    951e:	55 57       	subi	r21, 0x75	; 117
    9520:	59 5b       	subi	r21, 0xB9	; 185
    9522:	5d 5f       	subi	r21, 0xFD	; 253
    9524:	61 63       	ori	r22, 0x31	; 49
    9526:	65 67       	ori	r22, 0x75	; 117
    9528:	69 6b       	ori	r22, 0xB9	; 185
    952a:	6c 6e       	ori	r22, 0xEC	; 236
    952c:	70 71       	andi	r23, 0x10	; 16
    952e:	73 74       	andi	r23, 0x43	; 67
    9530:	75 77       	andi	r23, 0x75	; 117
    9532:	78 79       	andi	r23, 0x98	; 152
    9534:	7a 7b       	andi	r23, 0xBA	; 186
    9536:	7c 7d       	andi	r23, 0xDC	; 220
    9538:	7d 7e       	andi	r23, 0xED	; 237
    953a:	7e 7f       	andi	r23, 0xFE	; 254
    953c:	7f 7f       	andi	r23, 0xFF	; 255
    953e:	7f 7f       	andi	r23, 0xFF	; 255
    9540:	7f 7f       	andi	r23, 0xFF	; 255
    9542:	7f 7f       	andi	r23, 0xFF	; 255
    9544:	7f 7f       	andi	r23, 0xFF	; 255
    9546:	7e 7e       	andi	r23, 0xEE	; 238
    9548:	7d 7d       	andi	r23, 0xDD	; 221
    954a:	7c 7b       	andi	r23, 0xBC	; 188
    954c:	7a 79       	andi	r23, 0x9A	; 154
    954e:	78 77       	andi	r23, 0x78	; 120
    9550:	75 74       	andi	r23, 0x45	; 69
    9552:	73 71       	andi	r23, 0x13	; 19
    9554:	70 6e       	ori	r23, 0xE0	; 224
    9556:	6c 6b       	ori	r22, 0xBC	; 188
    9558:	69 67       	ori	r22, 0x79	; 121
    955a:	65 63       	ori	r22, 0x35	; 53
    955c:	61 5f       	subi	r22, 0xF1	; 241
    955e:	5d 5b       	subi	r21, 0xBD	; 189
    9560:	59 57       	subi	r21, 0x79	; 121
    9562:	55 53       	subi	r21, 0x35	; 53
    9564:	50 4e       	sbci	r21, 0xE0	; 224
    9566:	4c 4a       	sbci	r20, 0xAC	; 172
    9568:	48 45       	sbci	r20, 0x58	; 88
    956a:	43 41       	sbci	r20, 0x13	; 19
    956c:	3f 3d       	cpi	r19, 0xDF	; 223
    956e:	3b 39       	cpi	r19, 0x9B	; 155
    9570:	37 35       	cpi	r19, 0x57	; 87
    9572:	33 32       	cpi	r19, 0x23	; 35
    9574:	30 2f       	mov	r19, r16
    9576:	2e 2d       	mov	r18, r14
    9578:	2c 2b       	or	r18, r28
    957a:	2c 2d       	mov	r18, r12
    957c:	30 42       	sbci	r19, 0x20	; 32
    957e:	3d 28       	or	r3, r13
    9580:	00 e9       	ldi	r16, 0x90	; 144
    9582:	e5 fe       	sbrs	r14, 5
    9584:	d4 d7       	rcall	.+4008   	; 0xa52e <save_score+0x6e>
    9586:	d7 d7       	rcall	.+4014   	; 0xa536 <save_score+0x76>
    9588:	d6 d4       	rcall	.+2476   	; 0x9f36 <LBLineIntersect+0x54>
    958a:	d2 d0       	rcall	.+420    	; 0x9730 <waves+0x930>
    958c:	ce cc       	rjmp	.-1636   	; 0x8f2a <waves+0x12a>
    958e:	ca c8       	rjmp	.-3692   	; 0x8724 <TriggerNote+0x5e>
    9590:	c6 c3       	rjmp	.+1932   	; 0x9d1e <LBGetNextFrame+0x42>
    9592:	c1 bf       	out	0x31, r28	; 49
    9594:	bd ba       	out	0x1d, r11	; 29
    9596:	b8 b6       	in	r11, 0x38	; 56
    9598:	b4 b1       	in	r27, 0x04	; 4
    959a:	af ad       	ldd	r26, Y+63	; 0x3f
    959c:	ab a9       	ldd	r26, Y+51	; 0x33
    959e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    95a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    95a2:	9f 9e       	mul	r9, r31
    95a4:	9c 9a       	sbi	0x13, 4	; 19
    95a6:	99 97       	sbiw	r26, 0x29	; 41
    95a8:	95 94       	asr	r9
    95aa:	93 91       	.word	0x9193	; ????
    95ac:	90 8f       	std	Z+24, r25	; 0x18
    95ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    95b0:	8b 8a       	std	Y+19, r8	; 0x13
    95b2:	89 88       	ldd	r8, Y+17	; 0x11
    95b4:	88 87       	std	Y+8, r24	; 0x08
    95b6:	86 85       	ldd	r24, Z+14	; 0x0e
    95b8:	85 84       	ldd	r8, Z+13	; 0x0d
    95ba:	84 84       	ldd	r8, Z+12	; 0x0c
    95bc:	83 83       	std	Z+3, r24	; 0x03
    95be:	83 83       	std	Z+3, r24	; 0x03
    95c0:	83 83       	std	Z+3, r24	; 0x03
    95c2:	83 83       	std	Z+3, r24	; 0x03
    95c4:	83 84       	ldd	r8, Z+11	; 0x0b
    95c6:	84 84       	ldd	r8, Z+12	; 0x0c
    95c8:	85 85       	ldd	r24, Z+13	; 0x0d
    95ca:	86 87       	std	Z+14, r24	; 0x0e
    95cc:	88 88       	ldd	r8, Y+16	; 0x10
    95ce:	89 8a       	std	Y+17, r8	; 0x11
    95d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    95d2:	8d 8f       	std	Y+29, r24	; 0x1d
    95d4:	90 91 93 94 	lds	r25, 0x9493
    95d8:	95 97       	sbiw	r26, 0x25	; 37
    95da:	99 9a       	sbi	0x13, 1	; 19
    95dc:	9c 9e       	mul	r9, r28
    95de:	9f a1       	ldd	r25, Y+39	; 0x27
    95e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    95e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    95e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    95e6:	af b1       	in	r26, 0x0f	; 15
    95e8:	b4 b6       	in	r11, 0x34	; 52
    95ea:	b8 ba       	out	0x18, r11	; 24
    95ec:	bd bf       	out	0x3d, r27	; 61
    95ee:	c1 c3       	rjmp	.+1922   	; 0x9d72 <LBGetNextFrameReverse+0x4c>
    95f0:	c6 c8       	rjmp	.-3700   	; 0x877e <ProcessMusic+0x38>
    95f2:	ca cc       	rjmp	.-1644   	; 0x8f88 <waves+0x188>
    95f4:	ce d0       	rcall	.+412    	; 0x9792 <waves+0x992>
    95f6:	d2 d4       	rcall	.+2468   	; 0x9f9c <LBLineIntersect+0xba>
    95f8:	d6 d7       	rcall	.+4012   	; 0xa5a6 <position_shot+0x6>
    95fa:	d7 d7       	rcall	.+4014   	; 0xa5aa <position_shot+0xa>
    95fc:	d4 fe       	sbrs	r13, 4
    95fe:	e5 e9       	ldi	r30, 0x95	; 149
    9600:	f9 f8       	.word	0xf8f9	; ????
    9602:	f9 f5       	brne	.+126    	; 0x9682 <waves+0x882>
    9604:	eb e1       	ldi	r30, 0x1B	; 27
    9606:	dd de       	rcall	.-582    	; 0x93c2 <waves+0x5c2>
    9608:	e0 e2       	ldi	r30, 0x20	; 32
    960a:	e4 e5       	ldi	r30, 0x54	; 84
    960c:	e6 e5       	ldi	r30, 0x56	; 86
    960e:	e4 e2       	ldi	r30, 0x24	; 36
    9610:	de d9       	rcall	.-3140   	; 0x89ce <ProcessMusic+0x288>
    9612:	d2 ca       	rjmp	.-2652   	; 0x8bb8 <SetMixerWave>
    9614:	c1 b7       	in	r28, 0x31	; 49
    9616:	ac a2       	std	Y+36, r10	; 0x24
    9618:	99 91       	ld	r25, Y+
    961a:	8a 86       	std	Y+10, r8	; 0x0a
    961c:	83 81       	ldd	r24, Z+3	; 0x03
    961e:	80 80       	ld	r8, Z
    9620:	81 82       	std	Z+1, r8	; 0x01
    9622:	83 85       	ldd	r24, Z+11	; 0x0b
    9624:	86 88       	ldd	r8, Z+22	; 0x16
    9626:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9628:	8d 8f       	std	Y+29, r24	; 0x1d
    962a:	90 92 93 95 	sts	0x9593, r9
    962e:	96 97       	sbiw	r26, 0x26	; 38
    9630:	98 99       	sbic	0x13, 0	; 19
    9632:	9a 9b       	sbis	0x13, 2	; 19
    9634:	9b 9c       	mul	r9, r11
    9636:	9d 9d       	mul	r25, r13
    9638:	9d 9e       	mul	r9, r29
    963a:	9e 9e       	mul	r9, r30
    963c:	9f 9f       	mul	r25, r31
    963e:	9f 9f       	mul	r25, r31
    9640:	9f 9f       	mul	r25, r31
    9642:	9f 9e       	mul	r9, r31
    9644:	9e 9e       	mul	r9, r30
    9646:	9d 9d       	mul	r25, r13
    9648:	9d 9c       	mul	r9, r13
    964a:	9b 9b       	sbis	0x13, 3	; 19
    964c:	9a 99       	sbic	0x13, 2	; 19
    964e:	98 97       	sbiw	r26, 0x28	; 40
    9650:	96 95       	lsr	r25
    9652:	93 92       	.word	0x9293	; ????
    9654:	90 8f       	std	Z+24, r25	; 0x18
    9656:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9658:	8a 88       	ldd	r8, Y+18	; 0x12
    965a:	86 85       	ldd	r24, Z+14	; 0x0e
    965c:	83 82       	std	Z+3, r8	; 0x03
    965e:	81 80       	ldd	r8, Z+1	; 0x01
    9660:	80 81       	ld	r24, Z
    9662:	83 86       	std	Z+11, r8	; 0x0b
    9664:	8a 91       	ld	r24, -Y
    9666:	99 a2       	std	Y+33, r9	; 0x21
    9668:	ac b7       	in	r26, 0x3c	; 60
    966a:	c1 ca       	rjmp	.-2686   	; 0x8bee <esmw>
    966c:	d2 d9       	rcall	.-3164   	; 0x8a12 <ProcessMusic+0x2cc>
    966e:	de e2       	ldi	r29, 0x2E	; 46
    9670:	e4 e5       	ldi	r30, 0x54	; 84
    9672:	e6 e5       	ldi	r30, 0x56	; 86
    9674:	e4 e2       	ldi	r30, 0x24	; 36
    9676:	e0 de       	rcall	.-576    	; 0x9438 <waves+0x638>
    9678:	dd e1       	ldi	r29, 0x1D	; 29
    967a:	eb f5       	brvc	.+122    	; 0x96f6 <waves+0x8f6>
    967c:	f9 f8       	.word	0xf8f9	; ????
    967e:	f9 00       	.word	0x00f9	; ????
    9680:	07 08       	sbc	r0, r7
    9682:	07 0b       	sbc	r16, r23
    9684:	15 1f       	adc	r17, r21
    9686:	23 22       	and	r2, r19
    9688:	20 1e       	adc	r2, r16
    968a:	1c 1b       	sub	r17, r28
    968c:	1a 1b       	sub	r17, r26
    968e:	1c 1e       	adc	r1, r28
    9690:	22 27       	eor	r18, r18
    9692:	2e 36       	cpi	r18, 0x6E	; 110
    9694:	3f 49       	sbci	r19, 0x9F	; 159
    9696:	54 5e       	subi	r21, 0xE4	; 228
    9698:	67 6f       	ori	r22, 0xF7	; 247
    969a:	76 7a       	andi	r23, 0xA6	; 166
    969c:	7e 7f       	andi	r23, 0xFE	; 254
    969e:	7f 7f       	andi	r23, 0xFF	; 255
    96a0:	7f 7e       	andi	r23, 0xEF	; 239
    96a2:	7d 7b       	andi	r23, 0xBD	; 189
    96a4:	7a 78       	andi	r23, 0x8A	; 138
    96a6:	76 74       	andi	r23, 0x46	; 70
    96a8:	73 71       	andi	r23, 0x13	; 19
    96aa:	70 6e       	ori	r23, 0xE0	; 224
    96ac:	6d 6b       	ori	r22, 0xBD	; 189
    96ae:	6a 69       	ori	r22, 0x9A	; 154
    96b0:	68 67       	ori	r22, 0x78	; 120
    96b2:	66 65       	ori	r22, 0x56	; 86
    96b4:	65 64       	ori	r22, 0x45	; 69
    96b6:	64 63       	ori	r22, 0x34	; 52
    96b8:	63 62       	ori	r22, 0x23	; 35
    96ba:	62 62       	ori	r22, 0x22	; 34
    96bc:	61 61       	ori	r22, 0x11	; 17
    96be:	61 61       	ori	r22, 0x11	; 17
    96c0:	61 61       	ori	r22, 0x11	; 17
    96c2:	61 62       	ori	r22, 0x21	; 33
    96c4:	62 62       	ori	r22, 0x22	; 34
    96c6:	63 63       	ori	r22, 0x33	; 51
    96c8:	63 64       	ori	r22, 0x43	; 67
    96ca:	65 65       	ori	r22, 0x55	; 85
    96cc:	66 67       	ori	r22, 0x76	; 118
    96ce:	68 69       	ori	r22, 0x98	; 152
    96d0:	6a 6b       	ori	r22, 0xBA	; 186
    96d2:	6d 6e       	ori	r22, 0xED	; 237
    96d4:	70 71       	andi	r23, 0x10	; 16
    96d6:	73 74       	andi	r23, 0x43	; 67
    96d8:	76 78       	andi	r23, 0x86	; 134
    96da:	7a 7b       	andi	r23, 0xBA	; 186
    96dc:	7d 7e       	andi	r23, 0xED	; 237
    96de:	7f 7f       	andi	r23, 0xFF	; 255
    96e0:	7f 7f       	andi	r23, 0xFF	; 255
    96e2:	7e 7a       	andi	r23, 0xAE	; 174
    96e4:	76 6f       	ori	r23, 0xF6	; 246
    96e6:	67 5e       	subi	r22, 0xE7	; 231
    96e8:	54 49       	sbci	r21, 0x94	; 148
    96ea:	3f 36       	cpi	r19, 0x6F	; 111
    96ec:	2e 27       	eor	r18, r30
    96ee:	22 1e       	adc	r2, r18
    96f0:	1c 1b       	sub	r17, r28
    96f2:	1a 1b       	sub	r17, r26
    96f4:	1c 1e       	adc	r1, r28
    96f6:	20 22       	and	r2, r16
    96f8:	23 1f       	adc	r18, r19
    96fa:	15 0b       	sbc	r17, r21
    96fc:	07 08       	sbc	r0, r7
    96fe:	07 00       	.word	0x0007	; ????
    9700:	1f 31       	cpi	r17, 0x1F	; 31
    9702:	3d 44       	sbci	r19, 0x4D	; 77
    9704:	4e 53       	subi	r20, 0x3E	; 62
    9706:	54 56       	subi	r21, 0x64	; 100
    9708:	5a 5f       	subi	r21, 0xFA	; 250
    970a:	64 69       	ori	r22, 0x94	; 148
    970c:	6e 74       	andi	r22, 0x4E	; 78
    970e:	76 79       	andi	r23, 0x96	; 150
    9710:	7c 7f       	andi	r23, 0xFC	; 252
    9712:	7f 7f       	andi	r23, 0xFF	; 255
    9714:	7f 7f       	andi	r23, 0xFF	; 255
    9716:	7f 7f       	andi	r23, 0xFF	; 255
    9718:	7f 7f       	andi	r23, 0xFF	; 255
    971a:	7f 7f       	andi	r23, 0xFF	; 255
    971c:	7f 7f       	andi	r23, 0xFF	; 255
    971e:	7f 7f       	andi	r23, 0xFF	; 255
    9720:	7f 7f       	andi	r23, 0xFF	; 255
    9722:	7f 7f       	andi	r23, 0xFF	; 255
    9724:	7f 7f       	andi	r23, 0xFF	; 255
    9726:	7f 7f       	andi	r23, 0xFF	; 255
    9728:	7f 7f       	andi	r23, 0xFF	; 255
    972a:	7f 7f       	andi	r23, 0xFF	; 255
    972c:	7f 7f       	andi	r23, 0xFF	; 255
    972e:	7f 7f       	andi	r23, 0xFF	; 255
    9730:	7f 7f       	andi	r23, 0xFF	; 255
    9732:	7f 7f       	andi	r23, 0xFF	; 255
    9734:	7f 7f       	andi	r23, 0xFF	; 255
    9736:	7f 7f       	andi	r23, 0xFF	; 255
    9738:	7f 7f       	andi	r23, 0xFF	; 255
    973a:	7f 7f       	andi	r23, 0xFF	; 255
    973c:	7f 7f       	andi	r23, 0xFF	; 255
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7f 7f       	andi	r23, 0xFF	; 255
    9746:	7f 7f       	andi	r23, 0xFF	; 255
    9748:	7f 7f       	andi	r23, 0xFF	; 255
    974a:	7f 7f       	andi	r23, 0xFF	; 255
    974c:	7f 7f       	andi	r23, 0xFF	; 255
    974e:	7f 7f       	andi	r23, 0xFF	; 255
    9750:	7f 7f       	andi	r23, 0xFF	; 255
    9752:	7f 7f       	andi	r23, 0xFF	; 255
    9754:	7f 7f       	andi	r23, 0xFF	; 255
    9756:	7f 7f       	andi	r23, 0xFF	; 255
    9758:	7f 7f       	andi	r23, 0xFF	; 255
    975a:	7f 7f       	andi	r23, 0xFF	; 255
    975c:	7f 7f       	andi	r23, 0xFF	; 255
    975e:	7f 7f       	andi	r23, 0xFF	; 255
    9760:	7f 7f       	andi	r23, 0xFF	; 255
    9762:	7f 7f       	andi	r23, 0xFF	; 255
    9764:	7f 7f       	andi	r23, 0xFF	; 255
    9766:	7f 7f       	andi	r23, 0xFF	; 255
    9768:	7f 7f       	andi	r23, 0xFF	; 255
    976a:	7f 7f       	andi	r23, 0xFF	; 255
    976c:	7f 7f       	andi	r23, 0xFF	; 255
    976e:	7f 7f       	andi	r23, 0xFF	; 255
    9770:	7f 7f       	andi	r23, 0xFF	; 255
    9772:	7f 7f       	andi	r23, 0xFF	; 255
    9774:	7f 7f       	andi	r23, 0xFF	; 255
    9776:	7f 7f       	andi	r23, 0xFF	; 255
    9778:	7f 7f       	andi	r23, 0xFF	; 255
    977a:	7f 7c       	andi	r23, 0xCF	; 207
    977c:	78 71       	andi	r23, 0x18	; 24
    977e:	68 4c       	sbci	r22, 0xC8	; 200
    9780:	2c 1c       	adc	r2, r12
    9782:	12 0c       	add	r1, r2
    9784:	0a 0b       	sbc	r16, r26
    9786:	0a 05       	cpc	r16, r10
    9788:	fd f3       	brhs	.-2      	; 0x9788 <waves+0x988>
    978a:	e9 df       	rcall	.-46     	; 0x975e <waves+0x95e>
    978c:	d4 ca       	rjmp	.-2648   	; 0x8d36 <steptable+0x12e>
    978e:	c0 b7       	in	r28, 0x30	; 48
    9790:	ae a6       	std	Y+46, r10	; 0x2e
    9792:	9e 97       	sbiw	r26, 0x2e	; 46
    9794:	91 8b       	std	Z+17, r25	; 0x11
    9796:	86 85       	ldd	r24, Z+14	; 0x0e
    9798:	82 80       	ldd	r8, Z+2	; 0x02
    979a:	80 80       	ld	r8, Z
    979c:	80 80       	ld	r8, Z
    979e:	80 80       	ld	r8, Z
    97a0:	80 80       	ld	r8, Z
    97a2:	80 80       	ld	r8, Z
    97a4:	80 80       	ld	r8, Z
    97a6:	80 80       	ld	r8, Z
    97a8:	80 80       	ld	r8, Z
    97aa:	80 80       	ld	r8, Z
    97ac:	80 80       	ld	r8, Z
    97ae:	80 80       	ld	r8, Z
    97b0:	80 80       	ld	r8, Z
    97b2:	80 80       	ld	r8, Z
    97b4:	80 80       	ld	r8, Z
    97b6:	80 80       	ld	r8, Z
    97b8:	80 80       	ld	r8, Z
    97ba:	80 80       	ld	r8, Z
    97bc:	80 80       	ld	r8, Z
    97be:	80 80       	ld	r8, Z
    97c0:	80 80       	ld	r8, Z
    97c2:	80 80       	ld	r8, Z
    97c4:	80 80       	ld	r8, Z
    97c6:	80 80       	ld	r8, Z
    97c8:	80 80       	ld	r8, Z
    97ca:	80 80       	ld	r8, Z
    97cc:	80 80       	ld	r8, Z
    97ce:	80 80       	ld	r8, Z
    97d0:	80 80       	ld	r8, Z
    97d2:	80 80       	ld	r8, Z
    97d4:	80 80       	ld	r8, Z
    97d6:	80 80       	ld	r8, Z
    97d8:	80 80       	ld	r8, Z
    97da:	80 80       	ld	r8, Z
    97dc:	80 80       	ld	r8, Z
    97de:	80 80       	ld	r8, Z
    97e0:	80 80       	ld	r8, Z
    97e2:	80 80       	ld	r8, Z
    97e4:	80 80       	ld	r8, Z
    97e6:	80 80       	ld	r8, Z
    97e8:	80 80       	ld	r8, Z
    97ea:	80 80       	ld	r8, Z
    97ec:	80 80       	ld	r8, Z
    97ee:	80 80       	ld	r8, Z
    97f0:	80 80       	ld	r8, Z
    97f2:	80 80       	ld	r8, Z
    97f4:	80 87       	std	Z+8, r24	; 0x08
    97f6:	91 9d       	mul	r25, r1
    97f8:	ac c4       	rjmp	.+2392   	; 0xa152 <init_tile_animations+0x2c>
    97fa:	cb d4       	rcall	.+2454   	; 0xa192 <init_scope_animation+0x1e>
    97fc:	dd f2       	brhs	.-74     	; 0x97b4 <waves+0x9b4>
    97fe:	fa fa       	.word	0xfafa	; ????

00009800 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    9800:	2f 92       	push	r2
    9802:	3f 92       	push	r3
    9804:	4f 92       	push	r4
    9806:	5f 92       	push	r5
    9808:	6f 92       	push	r6
    980a:	7f 92       	push	r7
    980c:	8f 92       	push	r8
    980e:	9f 92       	push	r9
    9810:	af 92       	push	r10
    9812:	bf 92       	push	r11
    9814:	cf 92       	push	r12
    9816:	df 92       	push	r13
    9818:	ef 92       	push	r14
    981a:	ff 92       	push	r15
    981c:	0f 93       	push	r16
    981e:	1f 93       	push	r17
    9820:	cf 93       	push	r28
    9822:	df 93       	push	r29
    9824:	00 d0       	rcall	.+0      	; 0x9826 <ProcessSprites+0x26>
    9826:	00 d0       	rcall	.+0      	; 0x9828 <ProcessSprites+0x28>
    9828:	00 d0       	rcall	.+0      	; 0x982a <ProcessSprites+0x2a>
    982a:	cd b7       	in	r28, 0x3d	; 61
    982c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    982e:	80 91 00 01 	lds	r24, 0x0100
    9832:	88 23       	and	r24, r24
    9834:	09 f4       	brne	.+2      	; 0x9838 <ProcessSprites+0x38>
    9836:	b1 c0       	rjmp	.+354    	; 0x999a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    9838:	80 91 11 0a 	lds	r24, 0x0A11
    983c:	80 93 10 0a 	sts	0x0A10, r24
	free_tile_index = user_ram_tiles_c;
    9840:	80 93 0f 0a 	sts	0x0A0F, r24
    9844:	00 e0       	ldi	r16, 0x00	; 0
    9846:	10 e0       	ldi	r17, 0x00	; 0
    9848:	f8 01       	movw	r30, r16
    984a:	e8 59       	subi	r30, 0x98	; 152
    984c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    984e:	81 81       	ldd	r24, Z+1	; 0x01
    9850:	90 81       	ld	r25, Z
    9852:	32 81       	ldd	r19, Z+2	; 0x02
    9854:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    9856:	28 e0       	ldi	r18, 0x08	; 8
    9858:	29 0f       	add	r18, r25
    985a:	26 95       	lsr	r18
    985c:	26 95       	lsr	r18
    985e:	26 95       	lsr	r18
    9860:	33 24       	eor	r3, r3
    9862:	3a 94       	dec	r3
    9864:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    9866:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    9868:	19 f0       	breq	.+6      	; 0x9870 <ProcessSprites+0x70>
    986a:	e2 e0       	ldi	r30, 0x02	; 2
    986c:	2e 2e       	mov	r2, r30
    986e:	02 c0       	rjmp	.+4      	; 0x9874 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    9870:	22 24       	eor	r2, r2
    9872:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    9874:	28 e0       	ldi	r18, 0x08	; 8
    9876:	28 0f       	add	r18, r24
    9878:	52 2e       	mov	r5, r18
    987a:	56 94       	lsr	r5
    987c:	56 94       	lsr	r5
    987e:	56 94       	lsr	r5
    9880:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    9882:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    9884:	19 f0       	breq	.+6      	; 0x988c <ProcessSprites+0x8c>
    9886:	22 e0       	ldi	r18, 0x02	; 2
    9888:	29 83       	std	Y+1, r18	; 0x01
    988a:	02 c0       	rjmp	.+4      	; 0x9890 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    988c:	e1 e0       	ldi	r30, 0x01	; 1
    988e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    9890:	68 2e       	mov	r6, r24
    9892:	71 2c       	mov	r7, r1
    9894:	76 2c       	mov	r7, r6
    9896:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    9898:	69 0e       	add	r6, r25
    989a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    989c:	50 e0       	ldi	r21, 0x00	; 0
    989e:	54 2f       	mov	r21, r20
    98a0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    98a2:	ca 01       	movw	r24, r20
    98a4:	83 0f       	add	r24, r19
    98a6:	91 1d       	adc	r25, r1
    98a8:	9b 83       	std	Y+3, r25	; 0x03
    98aa:	8a 83       	std	Y+2, r24	; 0x02
    98ac:	e1 2c       	mov	r14, r1
    98ae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    98b0:	9e e1       	ldi	r25, 0x1E	; 30
    98b2:	59 9e       	mul	r5, r25
    98b4:	50 01       	movw	r10, r0
    98b6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    98b8:	9e 2c       	mov	r9, r14
    98ba:	88 24       	eor	r8, r8
    98bc:	43 2c       	mov	r4, r3
    98be:	c1 2c       	mov	r12, r1
    98c0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    98c2:	ed e1       	ldi	r30, 0x1D	; 29
    98c4:	e4 15       	cp	r30, r4
    98c6:	08 f4       	brcc	.+2      	; 0x98ca <ProcessSprites+0xca>
    98c8:	53 c0       	rjmp	.+166    	; 0x9970 <ProcessSprites+0x170>
    98ca:	fb e1       	ldi	r31, 0x1B	; 27
    98cc:	f5 15       	cp	r31, r5
    98ce:	08 f4       	brcc	.+2      	; 0x98d2 <ProcessSprites+0xd2>
    98d0:	4f c0       	rjmp	.+158    	; 0x9970 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    98d2:	c5 01       	movw	r24, r10
    98d4:	84 0d       	add	r24, r4
    98d6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    98d8:	9c 01       	movw	r18, r24
    98da:	20 5e       	subi	r18, 0xE0	; 224
    98dc:	3e 4f       	sbci	r19, 0xFE	; 254
    98de:	3e 83       	std	Y+6, r19	; 0x06
    98e0:	2d 83       	std	Y+5, r18	; 0x05
    98e2:	f9 01       	movw	r30, r18
    98e4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    98e6:	81 e0       	ldi	r24, 0x01	; 1
    98e8:	95 31       	cpi	r25, 0x15	; 21
    98ea:	08 f4       	brcc	.+2      	; 0x98ee <ProcessSprites+0xee>
    98ec:	80 e0       	ldi	r24, 0x00	; 0
    98ee:	21 e0       	ldi	r18, 0x01	; 1
    98f0:	30 91 10 0a 	lds	r19, 0x0A10
    98f4:	93 17       	cp	r25, r19
    98f6:	18 f0       	brcs	.+6      	; 0x98fe <ProcessSprites+0xfe>
    98f8:	20 e0       	ldi	r18, 0x00	; 0
    98fa:	88 23       	and	r24, r24
    98fc:	61 f1       	breq	.+88     	; 0x9956 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    98fe:	60 91 0f 0a 	lds	r22, 0x0A0F
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    9902:	65 31       	cpi	r22, 0x15	; 21
    9904:	30 f5       	brcc	.+76     	; 0x9952 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    9906:	88 23       	and	r24, r24
    9908:	31 f0       	breq	.+12     	; 0x9916 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    990a:	8b ee       	ldi	r24, 0xEB	; 235
    990c:	89 0f       	add	r24, r25
    990e:	9c 83       	std	Y+4, r25	; 0x04
    9910:	0e 94 90 3c 	call	0x7920	; 0x7920 <CopyFlashTile>
    9914:	06 c0       	rjmp	.+12     	; 0x9922 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    9916:	22 23       	and	r18, r18
    9918:	29 f0       	breq	.+10     	; 0x9924 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    991a:	89 2f       	mov	r24, r25
    991c:	9c 83       	std	Y+4, r25	; 0x04
    991e:	0e 94 1f 3d 	call	0x7a3e	; 0x7a3e <CopyRamTile>
    9922:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    9924:	80 91 0f 0a 	lds	r24, 0x0A0F
    9928:	e8 2f       	mov	r30, r24
    992a:	f0 e0       	ldi	r31, 0x00	; 0
    992c:	9f 01       	movw	r18, r30
    992e:	22 0f       	add	r18, r18
    9930:	33 1f       	adc	r19, r19
    9932:	e2 0f       	add	r30, r18
    9934:	f3 1f       	adc	r31, r19
    9936:	e0 53       	subi	r30, 0x30	; 48
    9938:	f6 4f       	sbci	r31, 0xF6	; 246
    993a:	2d 81       	ldd	r18, Y+5	; 0x05
    993c:	3e 81       	ldd	r19, Y+6	; 0x06
    993e:	31 83       	std	Z+1, r19	; 0x01
    9940:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    9942:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    9944:	f9 01       	movw	r30, r18
    9946:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    9948:	91 e0       	ldi	r25, 0x01	; 1
    994a:	98 0f       	add	r25, r24
    994c:	90 93 0f 0a 	sts	0x0A0F, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    9950:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    9952:	95 31       	cpi	r25, 0x15	; 21
    9954:	68 f4       	brcc	.+26     	; 0x9970 <ProcessSprites+0x170>
    9956:	80 91 10 0a 	lds	r24, 0x0A10
    995a:	98 17       	cp	r25, r24
    995c:	48 f0       	brcs	.+18     	; 0x9970 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    995e:	93 01       	movw	r18, r6
    9960:	a6 01       	movw	r20, r12
    9962:	48 0d       	add	r20, r8
    9964:	59 1d       	adc	r21, r9
    9966:	6a 81       	ldd	r22, Y+2	; 0x02
    9968:	7b 81       	ldd	r23, Y+3	; 0x03
    996a:	89 2f       	mov	r24, r25
    996c:	0e 94 bf 3d 	call	0x7b7e	; 0x7b7e <BlitSpritePart>
    9970:	ff ef       	ldi	r31, 0xFF	; 255
    9972:	cf 1a       	sub	r12, r31
    9974:	df 0a       	sbc	r13, r31
    9976:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    9978:	c2 14       	cp	r12, r2
    997a:	08 f4       	brcc	.+2      	; 0x997e <ProcessSprites+0x17e>
    997c:	a2 cf       	rjmp	.-188    	; 0x98c2 <ProcessSprites+0xc2>
    997e:	2f ef       	ldi	r18, 0xFF	; 255
    9980:	e2 1a       	sub	r14, r18
    9982:	f2 0a       	sbc	r15, r18
    9984:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    9986:	99 81       	ldd	r25, Y+1	; 0x01
    9988:	e9 16       	cp	r14, r25
    998a:	08 f4       	brcc	.+2      	; 0x998e <ProcessSprites+0x18e>
    998c:	91 cf       	rjmp	.-222    	; 0x98b0 <ProcessSprites+0xb0>
    998e:	0c 5f       	subi	r16, 0xFC	; 252
    9990:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    9992:	08 32       	cpi	r16, 0x28	; 40
    9994:	11 05       	cpc	r17, r1
    9996:	09 f0       	breq	.+2      	; 0x999a <ProcessSprites+0x19a>
    9998:	57 cf       	rjmp	.-338    	; 0x9848 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    999a:	26 96       	adiw	r28, 0x06	; 6
    999c:	0f b6       	in	r0, 0x3f	; 63
    999e:	f8 94       	cli
    99a0:	de bf       	out	0x3e, r29	; 62
    99a2:	0f be       	out	0x3f, r0	; 63
    99a4:	cd bf       	out	0x3d, r28	; 61
    99a6:	df 91       	pop	r29
    99a8:	cf 91       	pop	r28
    99aa:	1f 91       	pop	r17
    99ac:	0f 91       	pop	r16
    99ae:	ff 90       	pop	r15
    99b0:	ef 90       	pop	r14
    99b2:	df 90       	pop	r13
    99b4:	cf 90       	pop	r12
    99b6:	bf 90       	pop	r11
    99b8:	af 90       	pop	r10
    99ba:	9f 90       	pop	r9
    99bc:	8f 90       	pop	r8
    99be:	7f 90       	pop	r7
    99c0:	6f 90       	pop	r6
    99c2:	5f 90       	pop	r5
    99c4:	4f 90       	pop	r4
    99c6:	3f 90       	pop	r3
    99c8:	2f 90       	pop	r2
    99ca:	08 95       	ret

000099cc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    99cc:	df 92       	push	r13
    99ce:	ef 92       	push	r14
    99d0:	ff 92       	push	r15
    99d2:	0f 93       	push	r16
    99d4:	1f 93       	push	r17
    99d6:	cf 93       	push	r28
    99d8:	df 93       	push	r29
    99da:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    99dc:	fb 01       	movw	r30, r22
    99de:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    99e0:	31 96       	adiw	r30, 0x01	; 1
    99e2:	64 91       	lpm	r22, Z
    99e4:	5f ef       	ldi	r21, 0xFF	; 255
    99e6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    99e8:	24 2f       	mov	r18, r20
    99ea:	21 70       	andi	r18, 0x01	; 1
    99ec:	40 ff       	sbrs	r20, 0
    99ee:	04 c0       	rjmp	.+8      	; 0x99f8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    99f0:	95 2f       	mov	r25, r21
			dx=-1;
    99f2:	ff 24       	eor	r15, r15
    99f4:	fa 94       	dec	r15
    99f6:	03 c0       	rjmp	.+6      	; 0x99fe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    99f8:	ff 24       	eor	r15, r15
    99fa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    99fc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    99fe:	41 ff       	sbrs	r20, 1
    9a00:	05 c0       	rjmp	.+10     	; 0x9a0c <MapSprite2+0x40>
			y=(mapHeight-1);
    9a02:	7f ef       	ldi	r23, 0xFF	; 255
    9a04:	76 0f       	add	r23, r22
			dy=-1;
    9a06:	ee 24       	eor	r14, r14
    9a08:	ea 94       	dec	r14
    9a0a:	03 c0       	rjmp	.+6      	; 0x9a12 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9a0c:	ee 24       	eor	r14, r14
    9a0e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9a10:	70 e0       	ldi	r23, 0x00	; 0
    9a12:	21 11       	cpse	r18, r1
    9a14:	01 c0       	rjmp	.+2      	; 0x9a18 <MapSprite2+0x4c>
    9a16:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9a18:	00 e0       	ldi	r16, 0x00	; 0
    9a1a:	06 17       	cp	r16, r22
    9a1c:	09 f1       	breq	.+66     	; 0x9a60 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9a1e:	71 03       	mulsu	r23, r17
    9a20:	e0 01       	movw	r28, r0
    9a22:	11 24       	eor	r1, r1
    9a24:	d8 2e       	mov	r13, r24
    9a26:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    9a28:	8d 15       	cp	r24, r13
    9a2a:	b1 f0       	breq	.+44     	; 0x9a58 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9a2c:	9e 01       	movw	r18, r28
    9a2e:	29 0f       	add	r18, r25
    9a30:	31 1d       	adc	r19, r1
    9a32:	97 fd       	sbrc	r25, 7
    9a34:	3a 95       	dec	r19
    9a36:	2e 5f       	subi	r18, 0xFE	; 254
    9a38:	3f 4f       	sbci	r19, 0xFF	; 255
    9a3a:	fd 01       	movw	r30, r26
    9a3c:	e2 0f       	add	r30, r18
    9a3e:	f3 1f       	adc	r31, r19
    9a40:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9a42:	34 e0       	ldi	r19, 0x04	; 4
    9a44:	83 9f       	mul	r24, r19
    9a46:	f0 01       	movw	r30, r0
    9a48:	11 24       	eor	r1, r1
    9a4a:	e8 59       	subi	r30, 0x98	; 152
    9a4c:	fb 4f       	sbci	r31, 0xFB	; 251
    9a4e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9a50:	8f 5f       	subi	r24, 0xFF	; 255
    9a52:	43 83       	std	Z+3, r20	; 0x03
    9a54:	9f 0d       	add	r25, r15
    9a56:	e8 cf       	rjmp	.-48     	; 0x9a28 <MapSprite2+0x5c>
    9a58:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    9a5a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9a5c:	95 2f       	mov	r25, r21
    9a5e:	dd cf       	rjmp	.-70     	; 0x9a1a <MapSprite2+0x4e>
	    }
	}
    9a60:	df 91       	pop	r29
    9a62:	cf 91       	pop	r28
    9a64:	1f 91       	pop	r17
    9a66:	0f 91       	pop	r16
    9a68:	ff 90       	pop	r15
    9a6a:	ef 90       	pop	r14
    9a6c:	df 90       	pop	r13
    9a6e:	08 95       	ret

00009a70 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9a70:	0f 93       	push	r16
    9a72:	cf 93       	push	r28
    9a74:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    9a76:	30 e0       	ldi	r19, 0x00	; 0
    9a78:	30 17       	cp	r19, r16
    9a7a:	e1 f0       	breq	.+56     	; 0x9ab4 <MoveSprite+0x44>
    9a7c:	b4 2f       	mov	r27, r20
    9a7e:	a0 e2       	ldi	r26, 0x20	; 32
    9a80:	a4 0f       	add	r26, r20
    9a82:	78 2f       	mov	r23, r24
    9a84:	72 0f       	add	r23, r18
    9a86:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    9a88:	87 17       	cp	r24, r23
    9a8a:	81 f0       	breq	.+32     	; 0x9aac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9a8c:	c4 e0       	ldi	r28, 0x04	; 4
    9a8e:	8c 9f       	mul	r24, r28
    9a90:	f0 01       	movw	r30, r0
    9a92:	11 24       	eor	r1, r1
    9a94:	e8 59       	subi	r30, 0x98	; 152
    9a96:	fb 4f       	sbci	r31, 0xFB	; 251
    9a98:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    9a9a:	41 3e       	cpi	r20, 0xE1	; 225
    9a9c:	51 05       	cpc	r21, r1
    9a9e:	14 f0       	brlt	.+4      	; 0x9aa4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    9aa0:	a1 83       	std	Z+1, r26	; 0x01
    9aa2:	01 c0       	rjmp	.+2      	; 0x9aa6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    9aa4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    9aa6:	8f 5f       	subi	r24, 0xFF	; 255
    9aa8:	98 5f       	subi	r25, 0xF8	; 248
    9aaa:	ee cf       	rjmp	.-36     	; 0x9a88 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    9aac:	3f 5f       	subi	r19, 0xFF	; 255
    9aae:	48 5f       	subi	r20, 0xF8	; 248
    9ab0:	5f 4f       	sbci	r21, 0xFF	; 255
    9ab2:	e2 cf       	rjmp	.-60     	; 0x9a78 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    9ab4:	cf 91       	pop	r28
    9ab6:	0f 91       	pop	r16
    9ab8:	08 95       	ret

00009aba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    9aba:	08 95       	ret

00009abc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    9abc:	e8 e6       	ldi	r30, 0x68	; 104
    9abe:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    9ac0:	80 ef       	ldi	r24, 0xF0	; 240
    9ac2:	80 83       	st	Z, r24
    9ac4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    9ac6:	94 e0       	ldi	r25, 0x04	; 4
    9ac8:	e0 39       	cpi	r30, 0x90	; 144
    9aca:	f9 07       	cpc	r31, r25
    9acc:	d1 f7       	brne	.-12     	; 0x9ac2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    9ace:	10 92 0f 0a 	sts	0x0A0F, r1
		user_ram_tiles_c_tmp = 0U;
    9ad2:	10 92 11 0a 	sts	0x0A11, r1
    9ad6:	08 95       	ret

00009ad8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    9ad8:	4f 92       	push	r4
    9ada:	5f 92       	push	r5
    9adc:	6f 92       	push	r6
    9ade:	7f 92       	push	r7
    9ae0:	8f 92       	push	r8
    9ae2:	9f 92       	push	r9
    9ae4:	af 92       	push	r10
    9ae6:	bf 92       	push	r11
    9ae8:	cf 92       	push	r12
    9aea:	df 92       	push	r13
    9aec:	ef 92       	push	r14
    9aee:	ff 92       	push	r15
    9af0:	0f 93       	push	r16
    9af2:	1f 93       	push	r17
    9af4:	cf 93       	push	r28
    9af6:	df 93       	push	r29
    9af8:	68 2e       	mov	r6, r24
    9afa:	56 2e       	mov	r5, r22
    9afc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    9afe:	fa 01       	movw	r30, r20
    9b00:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    9b02:	31 96       	adiw	r30, 0x01	; 1
    9b04:	84 90       	lpm	r8, Z
    9b06:	c7 2c       	mov	r12, r7
    9b08:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9b0a:	00 e0       	ldi	r16, 0x00	; 0
    9b0c:	10 e0       	ldi	r17, 0x00	; 0
    9b0e:	91 2c       	mov	r9, r1
    9b10:	98 14       	cp	r9, r8
    9b12:	f1 f0       	breq	.+60     	; 0x9b50 <DrawMap+0x78>
    9b14:	c0 e0       	ldi	r28, 0x00	; 0
    9b16:	d0 e0       	ldi	r29, 0x00	; 0
    9b18:	58 01       	movw	r10, r16
    9b1a:	f2 e0       	ldi	r31, 0x02	; 2
    9b1c:	af 0e       	add	r10, r31
    9b1e:	b1 1c       	adc	r11, r1
    9b20:	49 2c       	mov	r4, r9
    9b22:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    9b24:	c7 15       	cp	r28, r7
    9b26:	80 f4       	brcc	.+32     	; 0x9b48 <DrawMap+0x70>
    9b28:	95 01       	movw	r18, r10
    9b2a:	2c 0f       	add	r18, r28
    9b2c:	3d 1f       	adc	r19, r29
    9b2e:	f7 01       	movw	r30, r14
    9b30:	e2 0f       	add	r30, r18
    9b32:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9b34:	24 91       	lpm	r18, Z
    9b36:	42 2f       	mov	r20, r18
    9b38:	50 e0       	ldi	r21, 0x00	; 0
    9b3a:	64 2d       	mov	r22, r4
    9b3c:	8c 2f       	mov	r24, r28
    9b3e:	86 0d       	add	r24, r6
    9b40:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
    9b44:	21 96       	adiw	r28, 0x01	; 1
    9b46:	ee cf       	rjmp	.-36     	; 0x9b24 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    9b48:	93 94       	inc	r9
    9b4a:	0c 0d       	add	r16, r12
    9b4c:	1d 1d       	adc	r17, r13
    9b4e:	e0 cf       	rjmp	.-64     	; 0x9b10 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    9b50:	df 91       	pop	r29
    9b52:	cf 91       	pop	r28
    9b54:	1f 91       	pop	r17
    9b56:	0f 91       	pop	r16
    9b58:	ff 90       	pop	r15
    9b5a:	ef 90       	pop	r14
    9b5c:	df 90       	pop	r13
    9b5e:	cf 90       	pop	r12
    9b60:	bf 90       	pop	r11
    9b62:	af 90       	pop	r10
    9b64:	9f 90       	pop	r9
    9b66:	8f 90       	pop	r8
    9b68:	7f 90       	pop	r7
    9b6a:	6f 90       	pop	r6
    9b6c:	5f 90       	pop	r5
    9b6e:	4f 90       	pop	r4
    9b70:	08 95       	ret

00009b72 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    9b72:	df 92       	push	r13
    9b74:	ef 92       	push	r14
    9b76:	ff 92       	push	r15
    9b78:	0f 93       	push	r16
    9b7a:	1f 93       	push	r17
    9b7c:	cf 93       	push	r28
    9b7e:	df 93       	push	r29
    9b80:	f6 2e       	mov	r15, r22
    9b82:	04 2f       	mov	r16, r20
    9b84:	d2 2e       	mov	r13, r18
    9b86:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9b88:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    9b8a:	8a e0       	ldi	r24, 0x0A	; 10
    9b8c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    9b8e:	01 11       	cpse	r16, r1
    9b90:	02 c0       	rjmp	.+4      	; 0x9b96 <PrintByte+0x24>
    9b92:	11 11       	cpse	r17, r1
    9b94:	07 c0       	rjmp	.+14     	; 0x9ba4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9b96:	80 2f       	mov	r24, r16
    9b98:	6e 2d       	mov	r22, r14
    9b9a:	0e 94 ec 6d 	call	0xdbd8	; 0xdbd8 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    9b9e:	40 e1       	ldi	r20, 0x10	; 16
    9ba0:	49 0f       	add	r20, r25
    9ba2:	05 c0       	rjmp	.+10     	; 0x9bae <PrintByte+0x3c>
		}else{
			if(zeropad){
    9ba4:	dd 20       	and	r13, r13
    9ba6:	11 f0       	breq	.+4      	; 0x9bac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    9ba8:	40 e1       	ldi	r20, 0x10	; 16
    9baa:	01 c0       	rjmp	.+2      	; 0x9bae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    9bac:	40 e0       	ldi	r20, 0x00	; 0
    9bae:	6f 2d       	mov	r22, r15
    9bb0:	8c 2f       	mov	r24, r28
    9bb2:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <SetFont>
			}
		}
		val=val/10;
    9bb6:	80 2f       	mov	r24, r16
    9bb8:	6e 2d       	mov	r22, r14
    9bba:	0e 94 ec 6d 	call	0xdbd8	; 0xdbd8 <__udivmodqi4>
    9bbe:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    9bc0:	1f 5f       	subi	r17, 0xFF	; 255
    9bc2:	21 97       	sbiw	r28, 0x01	; 1
    9bc4:	13 30       	cpi	r17, 0x03	; 3
    9bc6:	19 f7       	brne	.-58     	; 0x9b8e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    9bc8:	df 91       	pop	r29
    9bca:	cf 91       	pop	r28
    9bcc:	1f 91       	pop	r17
    9bce:	0f 91       	pop	r16
    9bd0:	ff 90       	pop	r15
    9bd2:	ef 90       	pop	r14
    9bd4:	df 90       	pop	r13
    9bd6:	08 95       	ret

00009bd8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    9bd8:	0f 93       	push	r16
    9bda:	1f 93       	push	r17
    9bdc:	cf 93       	push	r28
    9bde:	df 93       	push	r29
    9be0:	06 2f       	mov	r16, r22
    9be2:	c4 2f       	mov	r28, r20
    9be4:	d5 2f       	mov	r29, r21
    9be6:	18 2f       	mov	r17, r24
    9be8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    9bea:	fe 01       	movw	r30, r28
    9bec:	44 91       	lpm	r20, Z
		if(c!=0){
    9bee:	44 23       	and	r20, r20
    9bf0:	49 f0       	breq	.+18     	; 0x9c04 <Print+0x2c>
			c=((c&127)-32);			
    9bf2:	4f 77       	andi	r20, 0x7F	; 127
    9bf4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    9bf6:	60 2f       	mov	r22, r16
    9bf8:	8c 2f       	mov	r24, r28
    9bfa:	81 0f       	add	r24, r17
    9bfc:	0e 94 e6 3f 	call	0x7fcc	; 0x7fcc <SetFont>
    9c00:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    9c02:	f3 cf       	rjmp	.-26     	; 0x9bea <Print+0x12>
	
}
    9c04:	df 91       	pop	r29
    9c06:	cf 91       	pop	r28
    9c08:	1f 91       	pop	r17
    9c0a:	0f 91       	pop	r16
    9c0c:	08 95       	ret

00009c0e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    9c0e:	40 52       	subi	r20, 0x20	; 32
    9c10:	0c 94 e6 3f 	jmp	0x7fcc	; 0x7fcc <SetFont>

00009c14 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9c14:	0f 93       	push	r16
    9c16:	1f 93       	push	r17
    9c18:	cf 93       	push	r28
    9c1a:	df 93       	push	r29
    9c1c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9c1e:	c0 e0       	ldi	r28, 0x00	; 0
    9c20:	d0 e0       	ldi	r29, 0x00	; 0
    9c22:	c0 17       	cp	r28, r16
    9c24:	d1 07       	cpc	r29, r17
    9c26:	44 f4       	brge	.+16     	; 0x9c38 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9c28:	0e 94 00 40 	call	0x8000	; 0x8000 <GetVsyncFlag>
    9c2c:	88 23       	and	r24, r24
    9c2e:	e1 f3       	breq	.-8      	; 0x9c28 <WaitVsync+0x14>
		ClearVsyncFlag();		
    9c30:	0e 94 04 40 	call	0x8008	; 0x8008 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9c34:	21 96       	adiw	r28, 0x01	; 1
    9c36:	f5 cf       	rjmp	.-22     	; 0x9c22 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9c38:	df 91       	pop	r29
    9c3a:	cf 91       	pop	r28
    9c3c:	1f 91       	pop	r17
    9c3e:	0f 91       	pop	r16
    9c40:	08 95       	ret

00009c42 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    9c42:	80 93 5d 0b 	sts	0x0B5D, r24
	currFadeFrame=0;
    9c46:	10 92 60 0b 	sts	0x0B60, r1
	fadeActive=true;
    9c4a:	81 e0       	ldi	r24, 0x01	; 1
    9c4c:	80 93 5f 0b 	sts	0x0B5F, r24
		
	if(blocking){
    9c50:	66 23       	and	r22, r22
    9c52:	21 f0       	breq	.+8      	; 0x9c5c <doFade+0x1a>
		while(fadeActive==true);
    9c54:	80 91 5f 0b 	lds	r24, 0x0B5F
    9c58:	81 11       	cpse	r24, r1
    9c5a:	fc cf       	rjmp	.-8      	; 0x9c54 <doFade+0x12>
    9c5c:	08 95       	ret

00009c5e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    9c5e:	81 11       	cpse	r24, r1
    9c60:	03 c0       	rjmp	.+6      	; 0x9c68 <FadeIn+0xa>
		DDRC=0xff;
    9c62:	8f ef       	ldi	r24, 0xFF	; 255
    9c64:	87 b9       	out	0x07, r24	; 7
		return;
    9c66:	08 95       	ret
	}
	fadeStep=1;
    9c68:	91 e0       	ldi	r25, 0x01	; 1
    9c6a:	90 93 61 0b 	sts	0x0B61, r25
	fadeDir=1;
    9c6e:	90 93 5e 0b 	sts	0x0B5E, r25
	doFade(speed,blocking);
    9c72:	0c 94 21 4e 	jmp	0x9c42	; 0x9c42 <doFade>

00009c76 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9c76:	81 11       	cpse	r24, r1
    9c78:	02 c0       	rjmp	.+4      	; 0x9c7e <FadeOut+0x8>
		DDRC=0;
    9c7a:	17 b8       	out	0x07, r1	; 7
		return;
    9c7c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    9c7e:	9c e0       	ldi	r25, 0x0C	; 12
    9c80:	90 93 61 0b 	sts	0x0B61, r25
	fadeDir=-1;
    9c84:	9f ef       	ldi	r25, 0xFF	; 255
    9c86:	90 93 5e 0b 	sts	0x0B5E, r25
	doFade(speed,blocking);
    9c8a:	0c 94 21 4e 	jmp	0x9c42	; 0x9c42 <doFade>

00009c8e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    9c8e:	80 91 5f 0b 	lds	r24, 0x0B5F
    9c92:	88 23       	and	r24, r24
    9c94:	01 f1       	breq	.+64     	; 0x9cd6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9c96:	80 91 60 0b 	lds	r24, 0x0B60
    9c9a:	81 11       	cpse	r24, r1
    9c9c:	19 c0       	rjmp	.+50     	; 0x9cd0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    9c9e:	80 91 5d 0b 	lds	r24, 0x0B5D
    9ca2:	80 93 60 0b 	sts	0x0B60, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    9ca6:	e0 91 61 0b 	lds	r30, 0x0B61
    9caa:	f0 e0       	ldi	r31, 0x00	; 0
    9cac:	e5 52       	subi	r30, 0x25	; 37
    9cae:	ff 4f       	sbci	r31, 0xFF	; 255
    9cb0:	e4 91       	lpm	r30, Z
    9cb2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    9cb4:	90 91 5e 0b 	lds	r25, 0x0B5E
    9cb8:	80 91 61 0b 	lds	r24, 0x0B61
    9cbc:	89 0f       	add	r24, r25
    9cbe:	80 93 61 0b 	sts	0x0B61, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    9cc2:	88 23       	and	r24, r24
    9cc4:	11 f0       	breq	.+4      	; 0x9cca <ProcessFading+0x3c>
    9cc6:	8d 30       	cpi	r24, 0x0D	; 13
    9cc8:	31 f4       	brne	.+12     	; 0x9cd6 <ProcessFading+0x48>
				fadeActive=false;
    9cca:	10 92 5f 0b 	sts	0x0B5F, r1
    9cce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    9cd0:	81 50       	subi	r24, 0x01	; 1
    9cd2:	80 93 60 0b 	sts	0x0B60, r24
    9cd6:	08 95       	ret

00009cd8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    9cd8:	0c 94 47 4e 	jmp	0x9c8e	; 0x9c8e <ProcessFading>

00009cdc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    9cdc:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9cde:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9ce0:	93 81       	ldd	r25, Z+3	; 0x03
    9ce2:	9f 5f       	subi	r25, 0xFF	; 255
    9ce4:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9ce6:	22 81       	ldd	r18, Z+2	; 0x02
    9ce8:	80 81       	ld	r24, Z
    9cea:	92 17       	cp	r25, r18
    9cec:	38 f4       	brcc	.+14     	; 0x9cfc <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    9cee:	e8 0f       	add	r30, r24
    9cf0:	f1 1d       	adc	r31, r1
    9cf2:	e8 0f       	add	r30, r24
    9cf4:	f1 1d       	adc	r31, r1
    9cf6:	86 81       	ldd	r24, Z+6	; 0x06
    9cf8:	97 81       	ldd	r25, Z+7	; 0x07
    9cfa:	08 95       	ret
	}
	anim->frame_count = 0;
    9cfc:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9cfe:	90 e0       	ldi	r25, 0x00	; 0
    9d00:	01 96       	adiw	r24, 0x01	; 1
    9d02:	61 81       	ldd	r22, Z+1	; 0x01
    9d04:	70 e0       	ldi	r23, 0x00	; 0
    9d06:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    9d0a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    9d0c:	81 11       	cpse	r24, r1
    9d0e:	02 c0       	rjmp	.+4      	; 0x9d14 <LBGetNextFrame+0x38>
    9d10:	21 e0       	ldi	r18, 0x01	; 1
    9d12:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    9d14:	99 27       	eor	r25, r25
    9d16:	03 96       	adiw	r24, 0x03	; 3
    9d18:	88 0f       	add	r24, r24
    9d1a:	99 1f       	adc	r25, r25
    9d1c:	e8 0f       	add	r30, r24
    9d1e:	f9 1f       	adc	r31, r25
    9d20:	80 81       	ld	r24, Z
    9d22:	91 81       	ldd	r25, Z+1	; 0x01
}
    9d24:	08 95       	ret

00009d26 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    9d26:	fc 01       	movw	r30, r24
	anim->looped = 0;
    9d28:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    9d2a:	93 81       	ldd	r25, Z+3	; 0x03
    9d2c:	9f 5f       	subi	r25, 0xFF	; 255
    9d2e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    9d30:	22 81       	ldd	r18, Z+2	; 0x02
    9d32:	80 81       	ld	r24, Z
    9d34:	92 17       	cp	r25, r18
    9d36:	e0 f0       	brcs	.+56     	; 0x9d70 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    9d38:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    9d3a:	95 81       	ldd	r25, Z+5	; 0x05
    9d3c:	99 23       	and	r25, r25
    9d3e:	49 f0       	breq	.+18     	; 0x9d52 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    9d40:	81 50       	subi	r24, 0x01	; 1
    9d42:	10 f0       	brcs	.+4      	; 0x9d48 <LBGetNextFrameReverse+0x22>
    9d44:	80 83       	st	Z, r24
    9d46:	13 c0       	rjmp	.+38     	; 0x9d6e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    9d48:	10 82       	st	Z, r1
			anim->looped = 1;
    9d4a:	81 e0       	ldi	r24, 0x01	; 1
    9d4c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    9d4e:	15 82       	std	Z+5, r1	; 0x05
    9d50:	0e c0       	rjmp	.+28     	; 0x9d6e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    9d52:	21 81       	ldd	r18, Z+1	; 0x01
    9d54:	90 e0       	ldi	r25, 0x00	; 0
    9d56:	01 96       	adiw	r24, 0x01	; 1
    9d58:	62 2f       	mov	r22, r18
    9d5a:	70 e0       	ldi	r23, 0x00	; 0
    9d5c:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    9d60:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    9d62:	81 11       	cpse	r24, r1
    9d64:	04 c0       	rjmp	.+8      	; 0x9d6e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    9d66:	81 e0       	ldi	r24, 0x01	; 1
    9d68:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    9d6a:	21 50       	subi	r18, 0x01	; 1
    9d6c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    9d6e:	80 81       	ld	r24, Z
    9d70:	e8 0f       	add	r30, r24
    9d72:	f1 1d       	adc	r31, r1
    9d74:	e8 0f       	add	r30, r24
    9d76:	f1 1d       	adc	r31, r1
    9d78:	86 81       	ldd	r24, Z+6	; 0x06
    9d7a:	97 81       	ldd	r25, Z+7	; 0x07
}
    9d7c:	08 95       	ret

00009d7e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9d7e:	0f 93       	push	r16
    9d80:	1f 93       	push	r17
    9d82:	cf 93       	push	r28
    9d84:	df 93       	push	r29
    9d86:	1f 92       	push	r1
    9d88:	cd b7       	in	r28, 0x3d	; 61
    9d8a:	de b7       	in	r29, 0x3e	; 62
    9d8c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9d8e:	86 2f       	mov	r24, r22
    9d90:	69 83       	std	Y+1, r22	; 0x01
    9d92:	0e 94 0a 40 	call	0x8014	; 0x8014 <ReadJoypad>
    9d96:	d8 01       	movw	r26, r16
    9d98:	15 96       	adiw	r26, 0x05	; 5
    9d9a:	9c 93       	st	X, r25
    9d9c:	8e 93       	st	-X, r24
    9d9e:	14 97       	sbiw	r26, 0x04	; 4
    9da0:	69 81       	ldd	r22, Y+1	; 0x01
    9da2:	e6 2f       	mov	r30, r22
    9da4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    9da6:	00 97       	sbiw	r24, 0x00	; 0
    9da8:	51 f0       	breq	.+20     	; 0x9dbe <LBGetJoyPadState+0x40>
    9daa:	df 01       	movw	r26, r30
    9dac:	aa 0f       	add	r26, r26
    9dae:	bb 1f       	adc	r27, r27
    9db0:	a8 59       	subi	r26, 0x98	; 152
    9db2:	b5 4f       	sbci	r27, 0xF5	; 245
    9db4:	2d 91       	ld	r18, X+
    9db6:	3c 91       	ld	r19, X
    9db8:	82 17       	cp	r24, r18
    9dba:	93 07       	cpc	r25, r19
    9dbc:	21 f0       	breq	.+8      	; 0x9dc6 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9dbe:	d8 01       	movw	r26, r16
    9dc0:	16 96       	adiw	r26, 0x06	; 6
    9dc2:	1c 92       	st	X, r1
    9dc4:	07 c0       	rjmp	.+14     	; 0x9dd4 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    9dc6:	d8 01       	movw	r26, r16
    9dc8:	16 96       	adiw	r26, 0x06	; 6
    9dca:	2c 91       	ld	r18, X
    9dcc:	16 97       	sbiw	r26, 0x06	; 6
    9dce:	2f 5f       	subi	r18, 0xFF	; 255
    9dd0:	16 96       	adiw	r26, 0x06	; 6
    9dd2:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9dd4:	ee 0f       	add	r30, r30
    9dd6:	ff 1f       	adc	r31, r31
    9dd8:	e8 59       	subi	r30, 0x98	; 152
    9dda:	f5 4f       	sbci	r31, 0xF5	; 245
    9ddc:	20 81       	ld	r18, Z
    9dde:	31 81       	ldd	r19, Z+1	; 0x01
    9de0:	a9 01       	movw	r20, r18
    9de2:	40 95       	com	r20
    9de4:	50 95       	com	r21
    9de6:	48 23       	and	r20, r24
    9de8:	59 23       	and	r21, r25
    9dea:	d8 01       	movw	r26, r16
    9dec:	11 96       	adiw	r26, 0x01	; 1
    9dee:	5c 93       	st	X, r21
    9df0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9df2:	ac 01       	movw	r20, r24
    9df4:	40 95       	com	r20
    9df6:	50 95       	com	r21
    9df8:	24 23       	and	r18, r20
    9dfa:	35 23       	and	r19, r21
    9dfc:	13 96       	adiw	r26, 0x03	; 3
    9dfe:	3c 93       	st	X, r19
    9e00:	2e 93       	st	-X, r18
    9e02:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    9e04:	91 83       	std	Z+1, r25	; 0x01
    9e06:	80 83       	st	Z, r24
}
    9e08:	0f 90       	pop	r0
    9e0a:	df 91       	pop	r29
    9e0c:	cf 91       	pop	r28
    9e0e:	1f 91       	pop	r17
    9e10:	0f 91       	pop	r16
    9e12:	08 95       	ret

00009e14 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    9e14:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    9e16:	fb 01       	movw	r30, r22
    9e18:	2e 2f       	mov	r18, r30
    9e1a:	23 1b       	sub	r18, r19
    9e1c:	24 17       	cp	r18, r20
    9e1e:	28 f4       	brcc	.+10     	; 0x9e2a <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    9e20:	21 91       	ld	r18, Z+
    9e22:	dc 01       	movw	r26, r24
    9e24:	2d 93       	st	X+, r18
    9e26:	cd 01       	movw	r24, r26
    9e28:	f7 cf       	rjmp	.-18     	; 0x9e18 <LBCopyChars+0x4>
	}
}
    9e2a:	08 95       	ret

00009e2c <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    9e2c:	af 92       	push	r10
    9e2e:	bf 92       	push	r11
    9e30:	cf 92       	push	r12
    9e32:	df 92       	push	r13
    9e34:	ef 92       	push	r14
    9e36:	ff 92       	push	r15
    9e38:	0f 93       	push	r16
    9e3a:	1f 93       	push	r17
    9e3c:	cf 93       	push	r28
    9e3e:	df 93       	push	r29
    9e40:	1f 92       	push	r1
    9e42:	cd b7       	in	r28, 0x3d	; 61
    9e44:	de b7       	in	r29, 0x3e	; 62
    9e46:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    9e48:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    9e4a:	c6 2e       	mov	r12, r22
    9e4c:	d1 2c       	mov	r13, r1
    9e4e:	90 e0       	ldi	r25, 0x00	; 0
    9e50:	5c 01       	movw	r10, r24
    9e52:	a4 1a       	sub	r10, r20
    9e54:	b5 0a       	sbc	r11, r21
    9e56:	80 2f       	mov	r24, r16
    9e58:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    9e5a:	82 17       	cp	r24, r18
    9e5c:	60 f4       	brcc	.+24     	; 0x9e76 <LBPrintStr+0x4a>
    9e5e:	c5 01       	movw	r24, r10
    9e60:	80 0f       	add	r24, r16
    9e62:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9e64:	f8 01       	movw	r30, r16
    9e66:	41 91       	ld	r20, Z+
    9e68:	8f 01       	movw	r16, r30
    9e6a:	b6 01       	movw	r22, r12
    9e6c:	29 83       	std	Y+1, r18	; 0x01
    9e6e:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
    9e72:	29 81       	ldd	r18, Y+1	; 0x01
    9e74:	f0 cf       	rjmp	.-32     	; 0x9e56 <LBPrintStr+0x2a>
	}
}
    9e76:	0f 90       	pop	r0
    9e78:	df 91       	pop	r29
    9e7a:	cf 91       	pop	r28
    9e7c:	1f 91       	pop	r17
    9e7e:	0f 91       	pop	r16
    9e80:	ff 90       	pop	r15
    9e82:	ef 90       	pop	r14
    9e84:	df 90       	pop	r13
    9e86:	cf 90       	pop	r12
    9e88:	bf 90       	pop	r11
    9e8a:	af 90       	pop	r10
    9e8c:	08 95       	ret

00009e8e <LBCollides>:
	}
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9e8e:	af 92       	push	r10
    9e90:	cf 92       	push	r12
    9e92:	ef 92       	push	r14
    9e94:	ff 92       	push	r15
    9e96:	0f 93       	push	r16
    9e98:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9e9a:	70 e0       	ldi	r23, 0x00	; 0
    9e9c:	f1 2c       	mov	r15, r1
    9e9e:	fb 01       	movw	r30, r22
    9ea0:	e2 0f       	add	r30, r18
    9ea2:	f1 1d       	adc	r31, r1
    9ea4:	ee 16       	cp	r14, r30
    9ea6:	ff 06       	cpc	r15, r31
    9ea8:	a4 f4       	brge	.+40     	; 0x9ed2 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9eaa:	ea 0c       	add	r14, r10
    9eac:	f1 1c       	adc	r15, r1
    9eae:	6e 15       	cp	r22, r14
    9eb0:	7f 05       	cpc	r23, r15
    9eb2:	7c f4       	brge	.+30     	; 0x9ed2 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9eb4:	28 2f       	mov	r18, r24
    9eb6:	30 e0       	ldi	r19, 0x00	; 0
    9eb8:	10 e0       	ldi	r17, 0x00	; 0
    9eba:	c9 01       	movw	r24, r18
    9ebc:	84 0f       	add	r24, r20
    9ebe:	91 1d       	adc	r25, r1
    9ec0:	08 17       	cp	r16, r24
    9ec2:	19 07       	cpc	r17, r25
    9ec4:	34 f4       	brge	.+12     	; 0x9ed2 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9ec6:	0c 0d       	add	r16, r12
    9ec8:	11 1d       	adc	r17, r1
    9eca:	81 e0       	ldi	r24, 0x01	; 1
    9ecc:	20 17       	cp	r18, r16
    9ece:	31 07       	cpc	r19, r17
    9ed0:	0c f0       	brlt	.+2      	; 0x9ed4 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9ed2:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9ed4:	1f 91       	pop	r17
    9ed6:	0f 91       	pop	r16
    9ed8:	ff 90       	pop	r15
    9eda:	ef 90       	pop	r14
    9edc:	cf 90       	pop	r12
    9ede:	af 90       	pop	r10
    9ee0:	08 95       	ret

00009ee2 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9ee2:	2f 92       	push	r2
    9ee4:	3f 92       	push	r3
    9ee6:	4f 92       	push	r4
    9ee8:	5f 92       	push	r5
    9eea:	6f 92       	push	r6
    9eec:	7f 92       	push	r7
    9eee:	8f 92       	push	r8
    9ef0:	9f 92       	push	r9
    9ef2:	af 92       	push	r10
    9ef4:	bf 92       	push	r11
    9ef6:	cf 92       	push	r12
    9ef8:	df 92       	push	r13
    9efa:	ef 92       	push	r14
    9efc:	ff 92       	push	r15
    9efe:	0f 93       	push	r16
    9f00:	1f 93       	push	r17
    9f02:	cf 93       	push	r28
    9f04:	df 93       	push	r29
    9f06:	00 d0       	rcall	.+0      	; 0x9f08 <LBLineIntersect+0x26>
    9f08:	00 d0       	rcall	.+0      	; 0x9f0a <LBLineIntersect+0x28>
    9f0a:	cd b7       	in	r28, 0x3d	; 61
    9f0c:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9f0e:	f1 2c       	mov	r15, r1
    9f10:	8a 2c       	mov	r8, r10
    9f12:	91 2c       	mov	r9, r1
    9f14:	8e 18       	sub	r8, r14
    9f16:	9f 08       	sbc	r9, r15
    9f18:	a8 2e       	mov	r10, r24
    9f1a:	b1 2c       	mov	r11, r1
    9f1c:	24 2e       	mov	r2, r20
    9f1e:	31 2c       	mov	r3, r1
    9f20:	2a 18       	sub	r2, r10
    9f22:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9f24:	10 e0       	ldi	r17, 0x00	; 0
    9f26:	d1 2c       	mov	r13, r1
    9f28:	c0 1a       	sub	r12, r16
    9f2a:	d1 0a       	sbc	r13, r17
    9f2c:	46 2f       	mov	r20, r22
    9f2e:	50 e0       	ldi	r21, 0x00	; 0
    9f30:	5c 83       	std	Y+4, r21	; 0x04
    9f32:	4b 83       	std	Y+3, r20	; 0x03
    9f34:	82 2f       	mov	r24, r18
    9f36:	90 e0       	ldi	r25, 0x00	; 0
    9f38:	9a 83       	std	Y+2, r25	; 0x02
    9f3a:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9f3c:	82 9c       	mul	r8, r2
    9f3e:	90 01       	movw	r18, r0
    9f40:	83 9c       	mul	r8, r3
    9f42:	30 0d       	add	r19, r0
    9f44:	92 9c       	mul	r9, r2
    9f46:	30 0d       	add	r19, r0
    9f48:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9f4a:	ca 01       	movw	r24, r20
    9f4c:	e9 81       	ldd	r30, Y+1	; 0x01
    9f4e:	fa 81       	ldd	r31, Y+2	; 0x02
    9f50:	8e 1b       	sub	r24, r30
    9f52:	9f 0b       	sbc	r25, r31
    9f54:	c8 9e       	mul	r12, r24
    9f56:	b0 01       	movw	r22, r0
    9f58:	c9 9e       	mul	r12, r25
    9f5a:	70 0d       	add	r23, r0
    9f5c:	d8 9e       	mul	r13, r24
    9f5e:	70 0d       	add	r23, r0
    9f60:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9f62:	62 0f       	add	r22, r18
    9f64:	73 1f       	adc	r23, r19
    9f66:	88 27       	eor	r24, r24
    9f68:	77 fd       	sbrc	r23, 7
    9f6a:	80 95       	com	r24
    9f6c:	98 2f       	mov	r25, r24
    9f6e:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    9f72:	2b 01       	movw	r4, r22
    9f74:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9f76:	20 e0       	ldi	r18, 0x00	; 0
    9f78:	30 e0       	ldi	r19, 0x00	; 0
    9f7a:	a9 01       	movw	r20, r18
    9f7c:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    9f80:	88 23       	and	r24, r24
    9f82:	09 f4       	brne	.+2      	; 0x9f86 <LBLineIntersect+0xa4>
    9f84:	6c c0       	rjmp	.+216    	; 0xa05e <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9f86:	4b 81       	ldd	r20, Y+3	; 0x03
    9f88:	5c 81       	ldd	r21, Y+4	; 0x04
    9f8a:	4e 19       	sub	r20, r14
    9f8c:	5f 09       	sbc	r21, r15
    9f8e:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9f90:	0a 19       	sub	r16, r10
    9f92:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9f94:	c4 9e       	mul	r12, r20
    9f96:	c0 01       	movw	r24, r0
    9f98:	c5 9e       	mul	r12, r21
    9f9a:	90 0d       	add	r25, r0
    9f9c:	d4 9e       	mul	r13, r20
    9f9e:	90 0d       	add	r25, r0
    9fa0:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9fa2:	80 9e       	mul	r8, r16
    9fa4:	b0 01       	movw	r22, r0
    9fa6:	81 9e       	mul	r8, r17
    9fa8:	70 0d       	add	r23, r0
    9faa:	90 9e       	mul	r9, r16
    9fac:	70 0d       	add	r23, r0
    9fae:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9fb0:	68 0f       	add	r22, r24
    9fb2:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9fb4:	88 27       	eor	r24, r24
    9fb6:	77 fd       	sbrc	r23, 7
    9fb8:	80 95       	com	r24
    9fba:	98 2f       	mov	r25, r24
    9fbc:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9fc0:	a3 01       	movw	r20, r6
    9fc2:	92 01       	movw	r18, r4
    9fc4:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <__divsf3>
    9fc8:	4b 01       	movw	r8, r22
    9fca:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9fcc:	20 e0       	ldi	r18, 0x00	; 0
    9fce:	30 e0       	ldi	r19, 0x00	; 0
    9fd0:	a9 01       	movw	r20, r18
    9fd2:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    9fd6:	87 fd       	sbrc	r24, 7
    9fd8:	42 c0       	rjmp	.+132    	; 0xa05e <LBLineIntersect+0x17c>
    9fda:	20 e0       	ldi	r18, 0x00	; 0
    9fdc:	30 e0       	ldi	r19, 0x00	; 0
    9fde:	40 e8       	ldi	r20, 0x80	; 128
    9fe0:	5f e3       	ldi	r21, 0x3F	; 63
    9fe2:	c5 01       	movw	r24, r10
    9fe4:	b4 01       	movw	r22, r8
    9fe6:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    9fea:	18 16       	cp	r1, r24
    9fec:	c4 f1       	brlt	.+112    	; 0xa05e <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9fee:	2e 9c       	mul	r2, r14
    9ff0:	b0 01       	movw	r22, r0
    9ff2:	2f 9c       	mul	r2, r15
    9ff4:	70 0d       	add	r23, r0
    9ff6:	3e 9c       	mul	r3, r14
    9ff8:	70 0d       	add	r23, r0
    9ffa:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9ffc:	29 81       	ldd	r18, Y+1	; 0x01
    9ffe:	3a 81       	ldd	r19, Y+2	; 0x02
    a000:	8b 81       	ldd	r24, Y+3	; 0x03
    a002:	9c 81       	ldd	r25, Y+4	; 0x04
    a004:	28 1b       	sub	r18, r24
    a006:	39 0b       	sbc	r19, r25
    a008:	20 9f       	mul	r18, r16
    a00a:	c0 01       	movw	r24, r0
    a00c:	21 9f       	mul	r18, r17
    a00e:	90 0d       	add	r25, r0
    a010:	30 9f       	mul	r19, r16
    a012:	90 0d       	add	r25, r0
    a014:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a016:	68 0f       	add	r22, r24
    a018:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a01a:	88 27       	eor	r24, r24
    a01c:	77 fd       	sbrc	r23, 7
    a01e:	80 95       	com	r24
    a020:	98 2f       	mov	r25, r24
    a022:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a026:	a3 01       	movw	r20, r6
    a028:	92 01       	movw	r18, r4
    a02a:	0e 94 89 6e 	call	0xdd12	; 0xdd12 <__divsf3>
    a02e:	6b 01       	movw	r12, r22
    a030:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a032:	20 e0       	ldi	r18, 0x00	; 0
    a034:	30 e0       	ldi	r19, 0x00	; 0
    a036:	a9 01       	movw	r20, r18
    a038:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    a03c:	87 fd       	sbrc	r24, 7
    a03e:	0f c0       	rjmp	.+30     	; 0xa05e <LBLineIntersect+0x17c>
    a040:	11 e0       	ldi	r17, 0x01	; 1
    a042:	20 e0       	ldi	r18, 0x00	; 0
    a044:	30 e0       	ldi	r19, 0x00	; 0
    a046:	40 e8       	ldi	r20, 0x80	; 128
    a048:	5f e3       	ldi	r21, 0x3F	; 63
    a04a:	c7 01       	movw	r24, r14
    a04c:	b6 01       	movw	r22, r12
    a04e:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    a052:	18 16       	cp	r1, r24
    a054:	0c f0       	brlt	.+2      	; 0xa058 <LBLineIntersect+0x176>
    a056:	10 e0       	ldi	r17, 0x00	; 0
    a058:	81 e0       	ldi	r24, 0x01	; 1
    a05a:	81 27       	eor	r24, r17
    a05c:	01 c0       	rjmp	.+2      	; 0xa060 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a05e:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a060:	0f 90       	pop	r0
    a062:	0f 90       	pop	r0
    a064:	0f 90       	pop	r0
    a066:	0f 90       	pop	r0
    a068:	df 91       	pop	r29
    a06a:	cf 91       	pop	r28
    a06c:	1f 91       	pop	r17
    a06e:	0f 91       	pop	r16
    a070:	ff 90       	pop	r15
    a072:	ef 90       	pop	r14
    a074:	df 90       	pop	r13
    a076:	cf 90       	pop	r12
    a078:	bf 90       	pop	r11
    a07a:	af 90       	pop	r10
    a07c:	9f 90       	pop	r9
    a07e:	8f 90       	pop	r8
    a080:	7f 90       	pop	r7
    a082:	6f 90       	pop	r6
    a084:	5f 90       	pop	r5
    a086:	4f 90       	pop	r4
    a088:	3f 90       	pop	r3
    a08a:	2f 90       	pop	r2
    a08c:	08 95       	ret

0000a08e <LBRandom>:

u8 LBRandom(u8 from, u8 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a08e:	1f 93       	push	r17
    a090:	cf 93       	push	r28
    a092:	df 93       	push	r29
    a094:	1f 92       	push	r1
    a096:	cd b7       	in	r28, 0x3d	; 61
    a098:	de b7       	in	r29, 0x3e	; 62
    a09a:	18 2f       	mov	r17, r24
    u8 tmp = GetPrngNumber(0) % 256;
    a09c:	80 e0       	ldi	r24, 0x00	; 0
    a09e:	90 e0       	ldi	r25, 0x00	; 0
    a0a0:	69 83       	std	Y+1, r22	; 0x01
    a0a2:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <GetPrngNumber>
    a0a6:	99 27       	eor	r25, r25
    return ((tmp) % (to - from + 1)) + from;
    a0a8:	69 81       	ldd	r22, Y+1	; 0x01
    a0aa:	70 e0       	ldi	r23, 0x00	; 0
    a0ac:	61 1b       	sub	r22, r17
    a0ae:	71 09       	sbc	r23, r1
    a0b0:	6f 5f       	subi	r22, 0xFF	; 255
    a0b2:	7f 4f       	sbci	r23, 0xFF	; 255
    a0b4:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
}
    a0b8:	81 0f       	add	r24, r17
    a0ba:	0f 90       	pop	r0
    a0bc:	df 91       	pop	r29
    a0be:	cf 91       	pop	r28
    a0c0:	1f 91       	pop	r17
    a0c2:	08 95       	ret

0000a0c4 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    a0c4:	cf 93       	push	r28
    a0c6:	df 93       	push	r29
    a0c8:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a0ca:	c0 e0       	ldi	r28, 0x00	; 0
    a0cc:	cd 17       	cp	r28, r29
    a0ce:	31 f0       	breq	.+12     	; 0xa0dc <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    a0d0:	8f ef       	ldi	r24, 0xFF	; 255
    a0d2:	9f ef       	ldi	r25, 0xFF	; 255
    a0d4:	0e 94 16 40 	call	0x802c	; 0x802c <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a0d8:	cf 5f       	subi	r28, 0xFF	; 255
    a0da:	f8 cf       	rjmp	.-16     	; 0xa0cc <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    a0dc:	df 91       	pop	r29
    a0de:	cf 91       	pop	r28
    a0e0:	08 95       	ret

0000a0e2 <LBHideAllSprites>:

void LBHideAllSprites()
{
    a0e2:	e8 e6       	ldi	r30, 0x68	; 104
    a0e4:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    a0e6:	80 ef       	ldi	r24, 0xF0	; 240
    a0e8:	80 83       	st	Z, r24
    a0ea:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    a0ec:	94 e0       	ldi	r25, 0x04	; 4
    a0ee:	e0 39       	cpi	r30, 0x90	; 144
    a0f0:	f9 07       	cpc	r31, r25
    a0f2:	d1 f7       	brne	.-12     	; 0xa0e8 <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    a0f4:	08 95       	ret

0000a0f6 <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    a0f6:	2b e8       	ldi	r18, 0x8B	; 139
    a0f8:	30 e0       	ldi	r19, 0x00	; 0
    a0fa:	fc 01       	movw	r30, r24
    a0fc:	21 93       	st	Z+, r18
    a0fe:	31 93       	st	Z+, r19
    a100:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    a102:	4e e1       	ldi	r20, 0x1E	; 30
    a104:	50 e0       	ldi	r21, 0x00	; 0
    a106:	6c e5       	ldi	r22, 0x5C	; 92
    a108:	71 e0       	ldi	r23, 0x01	; 1
    a10a:	0c 94 3b 70 	jmp	0xe076	; 0xe076 <memcpy_P>

0000a10e <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    a10e:	2a e8       	ldi	r18, 0x8A	; 138
    a110:	30 e0       	ldi	r19, 0x00	; 0
    a112:	fc 01       	movw	r30, r24
    a114:	21 93       	st	Z+, r18
    a116:	31 93       	st	Z+, r19
    a118:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    a11a:	4e e1       	ldi	r20, 0x1E	; 30
    a11c:	50 e0       	ldi	r21, 0x00	; 0
    a11e:	6a e7       	ldi	r22, 0x7A	; 122
    a120:	71 e0       	ldi	r23, 0x01	; 1
    a122:	0c 94 3b 70 	jmp	0xe076	; 0xe076 <memcpy_P>

0000a126 <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    a126:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    a128:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a12a:	16 86       	std	Z+14, r1	; 0x0e
    a12c:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    a12e:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    a130:	73 e0       	ldi	r23, 0x03	; 3
    a132:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a134:	65 e0       	ldi	r22, 0x05	; 5
    a136:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    a138:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    a13a:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    a13c:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a13e:	4c e2       	ldi	r20, 0x2C	; 44
    a140:	56 e7       	ldi	r21, 0x76	; 118
    a142:	50 87       	std	Z+8, r21	; 0x08
    a144:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a146:	29 e2       	ldi	r18, 0x29	; 41
    a148:	36 e7       	ldi	r19, 0x76	; 118
    a14a:	32 87       	std	Z+10, r19	; 0x0a
    a14c:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a14e:	86 e2       	ldi	r24, 0x26	; 38
    a150:	96 e7       	ldi	r25, 0x76	; 118
    a152:	94 87       	std	Z+12, r25	; 0x0c
    a154:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a156:	14 8e       	std	Z+28, r1	; 0x1c
    a158:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    a15a:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    a15c:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a15e:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    a160:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    a162:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    a164:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a166:	56 8b       	std	Z+22, r21	; 0x16
    a168:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a16a:	30 8f       	std	Z+24, r19	; 0x18
    a16c:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a16e:	92 8f       	std	Z+26, r25	; 0x1a
    a170:	81 8f       	std	Z+25, r24	; 0x19
    a172:	08 95       	ret

0000a174 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    a174:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a176:	15 86       	std	Z+13, r1	; 0x0d
    a178:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a17a:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    a17c:	83 e0       	ldi	r24, 0x03	; 3
    a17e:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    a180:	8e e1       	ldi	r24, 0x1E	; 30
    a182:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a184:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a186:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a188:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    a18a:	82 e0       	ldi	r24, 0x02	; 2
    a18c:	96 e7       	ldi	r25, 0x76	; 118
    a18e:	97 83       	std	Z+7, r25	; 0x07
    a190:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    a192:	8f ef       	ldi	r24, 0xFF	; 255
    a194:	95 e7       	ldi	r25, 0x75	; 117
    a196:	91 87       	std	Z+9, r25	; 0x09
    a198:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    a19a:	8c ef       	ldi	r24, 0xFC	; 252
    a19c:	95 e7       	ldi	r25, 0x75	; 117
    a19e:	93 87       	std	Z+11, r25	; 0x0b
    a1a0:	82 87       	std	Z+10, r24	; 0x0a
    a1a2:	08 95       	ret

0000a1a4 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    a1a4:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a1a6:	15 86       	std	Z+13, r1	; 0x0d
    a1a8:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a1aa:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    a1ac:	82 e0       	ldi	r24, 0x02	; 2
    a1ae:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    a1b0:	8c e3       	ldi	r24, 0x3C	; 60
    a1b2:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a1b4:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a1b6:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a1b8:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    a1ba:	80 e9       	ldi	r24, 0x90	; 144
    a1bc:	93 e7       	ldi	r25, 0x73	; 115
    a1be:	97 83       	std	Z+7, r25	; 0x07
    a1c0:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    a1c2:	86 ec       	ldi	r24, 0xC6	; 198
    a1c4:	94 e7       	ldi	r25, 0x74	; 116
    a1c6:	91 87       	std	Z+9, r25	; 0x09
    a1c8:	80 87       	std	Z+8, r24	; 0x08
    a1ca:	08 95       	ret

0000a1cc <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    a1cc:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    a1ce:	88 e7       	ldi	r24, 0x78	; 120
    a1d0:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    a1d2:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    a1d4:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    a1d6:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    a1d8:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    a1da:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    a1dc:	84 e0       	ldi	r24, 0x04	; 4
    a1de:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    a1e0:	66 23       	and	r22, r22
    a1e2:	11 f0       	breq	.+4      	; 0xa1e8 <init_shot_state+0x1c>
    a1e4:	85 e0       	ldi	r24, 0x05	; 5
    a1e6:	01 c0       	rjmp	.+2      	; 0xa1ea <init_shot_state+0x1e>
    a1e8:	81 e0       	ldi	r24, 0x01	; 1
    a1ea:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    a1ec:	80 e0       	ldi	r24, 0x00	; 0
    a1ee:	90 e0       	ldi	r25, 0x00	; 0
    a1f0:	a0 e7       	ldi	r26, 0x70	; 112
    a1f2:	b3 e4       	ldi	r27, 0x43	; 67
    a1f4:	83 83       	std	Z+3, r24	; 0x03
    a1f6:	94 83       	std	Z+4, r25	; 0x04
    a1f8:	a5 83       	std	Z+5, r26	; 0x05
    a1fa:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    a1fc:	17 82       	std	Z+7, r1	; 0x07
    a1fe:	10 86       	std	Z+8, r1	; 0x08
    a200:	11 86       	std	Z+9, r1	; 0x09
    a202:	12 86       	std	Z+10, r1	; 0x0a
    a204:	08 95       	ret

0000a206 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    a206:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    a208:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    a20a:	82 e0       	ldi	r24, 0x02	; 2
    a20c:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a20e:	85 e0       	ldi	r24, 0x05	; 5
    a210:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    a212:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.looped = 0;
    a214:	14 8a       	std	Z+20, r1	; 0x14
	s->up_anim.reversing = 0;
    a216:	15 8a       	std	Z+21, r1	; 0x15
	if (shot_type == BASIC_SHOT)
    a218:	61 11       	cpse	r22, r1
    a21a:	03 c0       	rjmp	.+6      	; 0xa222 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    a21c:	8a e9       	ldi	r24, 0x9A	; 154
    a21e:	9c e3       	ldi	r25, 0x3C	; 60
    a220:	13 c0       	rjmp	.+38     	; 0xa248 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    a222:	61 30       	cpi	r22, 0x01	; 1
    a224:	79 f4       	brne	.+30     	; 0xa244 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    a226:	87 e9       	ldi	r24, 0x97	; 151
    a228:	9c e3       	ldi	r25, 0x3C	; 60
    a22a:	97 8b       	std	Z+23, r25	; 0x17
    a22c:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    a22e:	84 e9       	ldi	r24, 0x94	; 148
    a230:	9c e3       	ldi	r25, 0x3C	; 60
    a232:	91 8f       	std	Z+25, r25	; 0x19
    a234:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    a236:	81 e9       	ldi	r24, 0x91	; 145
    a238:	9c e3       	ldi	r25, 0x3C	; 60
    a23a:	93 a3       	std	Z+35, r25	; 0x23
    a23c:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    a23e:	8e e8       	ldi	r24, 0x8E	; 142
    a240:	9c e3       	ldi	r25, 0x3C	; 60
    a242:	08 c0       	rjmp	.+16     	; 0xa254 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    a244:	82 e8       	ldi	r24, 0x82	; 130
    a246:	9c e3       	ldi	r25, 0x3C	; 60
    a248:	97 8b       	std	Z+23, r25	; 0x17
    a24a:	86 8b       	std	Z+22, r24	; 0x16
		s->up_anim.anims[1] = (char*) map_sub_shot;
    a24c:	91 8f       	std	Z+25, r25	; 0x19
    a24e:	80 8f       	std	Z+24, r24	; 0x18
		s->right_anim.anims[0] = (char*) map_sub_shot;
    a250:	93 a3       	std	Z+35, r25	; 0x23
    a252:	82 a3       	std	Z+34, r24	; 0x22
		s->right_anim.anims[1] = (char*) map_sub_shot;
    a254:	95 a3       	std	Z+37, r25	; 0x25
    a256:	84 a3       	std	Z+36, r24	; 0x24
	}
	s->up_anim.current_anim = 0;
    a258:	10 8a       	std	Z+16, r1	; 0x10
	s->right_anim.anim_count = 2;
    a25a:	82 e0       	ldi	r24, 0x02	; 2
    a25c:	85 8f       	std	Z+29, r24	; 0x1d
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a25e:	85 e0       	ldi	r24, 0x05	; 5
    a260:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.frame_count = 0;
    a262:	17 8e       	std	Z+31, r1	; 0x1f
	s->right_anim.looped = 0;
    a264:	10 a2       	std	Z+32, r1	; 0x20
	s->right_anim.reversing = 0;
    a266:	11 a2       	std	Z+33, r1	; 0x21
    a268:	08 95       	ret

0000a26a <init_turret>:
}

void init_turret(Turret* t, float x, float y)
{
    a26a:	0f 93       	push	r16
    a26c:	1f 93       	push	r17
    a26e:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    a270:	85 e0       	ldi	r24, 0x05	; 5
    a272:	83 87       	std	Z+11, r24	; 0x0b
	t->shared.direction = D_LEFT;
    a274:	83 e0       	ldi	r24, 0x03	; 3
    a276:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    a278:	12 82       	std	Z+2, r1	; 0x02
	t->shared.speed = BOSS_TURRET_SPEED;
    a27a:	8a e5       	ldi	r24, 0x5A	; 90
    a27c:	81 83       	std	Z+1, r24	; 0x01
	t->shared.x = x;
    a27e:	43 83       	std	Z+3, r20	; 0x03
    a280:	54 83       	std	Z+4, r21	; 0x04
    a282:	65 83       	std	Z+5, r22	; 0x05
    a284:	76 83       	std	Z+6, r23	; 0x06
	t->shared.y = y;
    a286:	07 83       	std	Z+7, r16	; 0x07
    a288:	10 87       	std	Z+8, r17	; 0x08
    a28a:	21 87       	std	Z+9, r18	; 0x09
    a28c:	32 87       	std	Z+10, r19	; 0x0a
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    a28e:	8a ef       	ldi	r24, 0xFA	; 250
    a290:	85 87       	std	Z+13, r24	; 0x0d
		t->shot[i].shared.direction = D_DOWN;
    a292:	82 e0       	ldi	r24, 0x02	; 2
    a294:	84 87       	std	Z+12, r24	; 0x0c
		t->shot[i].shared.recoiled = 0;
    a296:	16 86       	std	Z+14, r1	; 0x0e
		t->shot[i].shared.x = OFF_SCREEN;
    a298:	40 e0       	ldi	r20, 0x00	; 0
    a29a:	50 e0       	ldi	r21, 0x00	; 0
    a29c:	60 e7       	ldi	r22, 0x70	; 112
    a29e:	73 e4       	ldi	r23, 0x43	; 67
    a2a0:	47 87       	std	Z+15, r20	; 0x0f
    a2a2:	50 8b       	std	Z+16, r21	; 0x10
    a2a4:	61 8b       	std	Z+17, r22	; 0x11
    a2a6:	72 8b       	std	Z+18, r23	; 0x12
		t->shot[i].shared.y = 0;
    a2a8:	13 8a       	std	Z+19, r1	; 0x13
    a2aa:	14 8a       	std	Z+20, r1	; 0x14
    a2ac:	15 8a       	std	Z+21, r1	; 0x15
    a2ae:	16 8a       	std	Z+22, r1	; 0x16
		t->shot[i].active = 0;
    a2b0:	12 8e       	std	Z+26, r1	; 0x1a
		t->shot[i].distance = 100;
    a2b2:	94 e6       	ldi	r25, 0x64	; 100
    a2b4:	93 8f       	std	Z+27, r25	; 0x1b
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    a2b6:	87 8b       	std	Z+23, r24	; 0x17
		t->shot[i].rebounds = SHOT_REBOUNDS;
    a2b8:	84 e0       	ldi	r24, 0x04	; 4
    a2ba:	81 8f       	std	Z+25, r24	; 0x19
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    a2bc:	81 e0       	ldi	r24, 0x01	; 1
    a2be:	80 8f       	std	Z+24, r24	; 0x18
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a2c0:	62 e0       	ldi	r22, 0x02	; 2
    a2c2:	cf 01       	movw	r24, r30
    a2c4:	0c 96       	adiw	r24, 0x0c	; 12
	}
}
    a2c6:	1f 91       	pop	r17
    a2c8:	0f 91       	pop	r16
		t->shot[i].active = 0;
		t->shot[i].distance = 100;
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
		t->shot[i].rebounds = SHOT_REBOUNDS;
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    a2ca:	0c 94 03 51 	jmp	0xa206	; 0xa206 <set_shot_animations>

0000a2ce <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    a2ce:	0f 93       	push	r16
    a2d0:	1f 93       	push	r17
    a2d2:	cf 93       	push	r28
    a2d4:	df 93       	push	r29
    a2d6:	ec 01       	movw	r28, r24
	p->grace_frame = FRAMES_PER_GRACE;
    a2d8:	88 e7       	ldi	r24, 0x78	; 120
    a2da:	8e 8b       	std	Y+22, r24	; 0x16
	p->score = 0;
    a2dc:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    a2de:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    a2e0:	18 82       	st	Y, r1
	p->shared.speed = 0;
    a2e2:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    a2e4:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    a2e6:	82 e3       	ldi	r24, 0x32	; 50
    a2e8:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    a2ea:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    a2ec:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    a2ee:	1d 8a       	std	Y+21, r1	; 0x15

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    a2f0:	fe 01       	movw	r30, r28
    a2f2:	eb 5a       	subi	r30, 0xAB	; 171
    a2f4:	ff 4f       	sbci	r31, 0xFF	; 255
    a2f6:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    a2f8:	31 96       	adiw	r30, 0x01	; 1
    a2fa:	91 e0       	ldi	r25, 0x01	; 1
    a2fc:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    a2fe:	31 96       	adiw	r30, 0x01	; 1
    a300:	85 e0       	ldi	r24, 0x05	; 5
    a302:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    a304:	31 96       	adiw	r30, 0x01	; 1
    a306:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    a308:	31 96       	adiw	r30, 0x01	; 1
    a30a:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    a30c:	31 96       	adiw	r30, 0x01	; 1
    a30e:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    a310:	31 96       	adiw	r30, 0x01	; 1
    a312:	71 83       	std	Z+1, r23	; 0x01
    a314:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    a316:	36 96       	adiw	r30, 0x06	; 6
    a318:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    a31a:	31 96       	adiw	r30, 0x01	; 1
    a31c:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    a31e:	31 96       	adiw	r30, 0x01	; 1
    a320:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    a322:	31 96       	adiw	r30, 0x01	; 1
    a324:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    a326:	31 96       	adiw	r30, 0x01	; 1
    a328:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    a32a:	31 96       	adiw	r30, 0x01	; 1
    a32c:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    a32e:	31 96       	adiw	r30, 0x01	; 1
    a330:	51 83       	std	Z+1, r21	; 0x01
    a332:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    a334:	36 96       	adiw	r30, 0x06	; 6
    a336:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    a338:	31 96       	adiw	r30, 0x01	; 1
    a33a:	93 e0       	ldi	r25, 0x03	; 3
    a33c:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    a33e:	31 96       	adiw	r30, 0x01	; 1
    a340:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    a342:	31 96       	adiw	r30, 0x01	; 1
    a344:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    a346:	31 96       	adiw	r30, 0x01	; 1
    a348:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    a34a:	31 96       	adiw	r30, 0x01	; 1
    a34c:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    a34e:	31 96       	adiw	r30, 0x01	; 1
    a350:	89 ea       	ldi	r24, 0xA9	; 169
    a352:	9c e3       	ldi	r25, 0x3C	; 60
    a354:	91 83       	std	Z+1, r25	; 0x01
    a356:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    a358:	32 96       	adiw	r30, 0x02	; 2
    a35a:	83 ea       	ldi	r24, 0xA3	; 163
    a35c:	9c e3       	ldi	r25, 0x3C	; 60
    a35e:	91 83       	std	Z+1, r25	; 0x01
    a360:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    a362:	32 96       	adiw	r30, 0x02	; 2
    a364:	8d e9       	ldi	r24, 0x9D	; 157
    a366:	9c e3       	ldi	r25, 0x3C	; 60
    a368:	91 83       	std	Z+1, r25	; 0x01
    a36a:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    a36c:	19 8a       	std	Y+17, r1	; 0x11
	p->old_active_shots = 0;
    a36e:	1a 8a       	std	Y+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    a370:	8e 01       	movw	r16, r28
    a372:	03 5d       	subi	r16, 0xD3	; 211
    a374:	1f 4f       	sbci	r17, 0xFF	; 255
    a376:	60 e0       	ldi	r22, 0x00	; 0
    a378:	c8 01       	movw	r24, r16
    a37a:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    a37e:	60 e0       	ldi	r22, 0x00	; 0
    a380:	c8 01       	movw	r24, r16
    a382:	0e 94 03 51 	call	0xa206	; 0xa206 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    a386:	1a 8e       	std	Y+26, r1	; 0x1a
	p->goal_direction = 0;
    a388:	1e 8e       	std	Y+30, r1	; 0x1e
    a38a:	1d 8e       	std	Y+29, r1	; 0x1d
	p->goal = 0;
    a38c:	1b a2       	std	Y+35, r1	; 0x23
	p->goal_reached = 0;
    a38e:	1c a2       	std	Y+36, r1	; 0x24
	p->old_x = 0;
    a390:	1d a2       	std	Y+37, r1	; 0x25
    a392:	1e a2       	std	Y+38, r1	; 0x26
    a394:	1f a2       	std	Y+39, r1	; 0x27
    a396:	18 a6       	std	Y+40, r1	; 0x28
	p->old_y = 0;
    a398:	19 a6       	std	Y+41, r1	; 0x29
    a39a:	1a a6       	std	Y+42, r1	; 0x2a
    a39c:	1b a6       	std	Y+43, r1	; 0x2b
    a39e:	1c a6       	std	Y+44, r1	; 0x2c
	p->deadlock_count_x = 0;
    a3a0:	18 a2       	std	Y+32, r1	; 0x20
    a3a2:	1f 8e       	std	Y+31, r1	; 0x1f
	p->deadlock_count_y = 0;
    a3a4:	1a a2       	std	Y+34, r1	; 0x22
    a3a6:	19 a2       	std	Y+33, r1	; 0x21
}
    a3a8:	df 91       	pop	r29
    a3aa:	cf 91       	pop	r28
    a3ac:	1f 91       	pop	r17
    a3ae:	0f 91       	pop	r16
    a3b0:	08 95       	ret

0000a3b2 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    a3b2:	fc 01       	movw	r30, r24
    a3b4:	11 8a       	std	Z+17, r1	; 0x11
	player->old_active_shots = 0;
    a3b6:	12 8a       	std	Z+18, r1	; 0x12
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    a3b8:	60 e0       	ldi	r22, 0x00	; 0
    a3ba:	8d 96       	adiw	r24, 0x2d	; 45
    a3bc:	0c 94 e6 50 	jmp	0xa1cc	; 0xa1cc <init_shot_state>

0000a3c0 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    a3c0:	e9 ea       	ldi	r30, 0xA9	; 169
    a3c2:	fb e0       	ldi	r31, 0x0B	; 11
    a3c4:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    a3c6:	13 8a       	std	Z+19, r1	; 0x13
	game.paused = 0;
    a3c8:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    a3ca:	14 86       	std	Z+12, r1	; 0x0c
    a3cc:	13 86       	std	Z+11, r1	; 0x0b
	game.boss_fight_status = 0;
    a3ce:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    a3d0:	10 8a       	std	Z+16, r1	; 0x10
    a3d2:	17 86       	std	Z+15, r1	; 0x0f
	game.boss_fight_joypad = 0;
    a3d4:	12 8a       	std	Z+18, r1	; 0x12
    a3d6:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    a3d8:	82 e0       	ldi	r24, 0x02	; 2
    a3da:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    a3dc:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    a3de:	84 e1       	ldi	r24, 0x14	; 20
    a3e0:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    a3e2:	17 82       	std	Z+7, r1	; 0x07
	game.demo_counter = 0;
    a3e4:	12 86       	std	Z+10, r1	; 0x0a
    a3e6:	11 86       	std	Z+9, r1	; 0x09
	game.demo_choice = 0;
    a3e8:	10 86       	std	Z+8, r1	; 0x08
	game.tank_rank_counter = 0;
    a3ea:	16 86       	std	Z+14, r1	; 0x0e
    a3ec:	15 86       	std	Z+13, r1	; 0x0d
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    a3ee:	4b eb       	ldi	r20, 0xBB	; 187
    a3f0:	5c e3       	ldi	r21, 0x3C	; 60
    a3f2:	61 ec       	ldi	r22, 0xC1	; 193
    a3f4:	7c e3       	ldi	r23, 0x3C	; 60
    a3f6:	8a ed       	ldi	r24, 0xDA	; 218
    a3f8:	9b e0       	ldi	r25, 0x0B	; 11
    a3fa:	0e 94 67 51 	call	0xa2ce	; 0xa2ce <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    a3fe:	4f ea       	ldi	r20, 0xAF	; 175
    a400:	5c e3       	ldi	r21, 0x3C	; 60
    a402:	65 eb       	ldi	r22, 0xB5	; 181
    a404:	7c e3       	ldi	r23, 0x3C	; 60
    a406:	89 e4       	ldi	r24, 0x49	; 73
    a408:	9f e0       	ldi	r25, 0x0F	; 15
    a40a:	0c 94 67 51 	jmp	0xa2ce	; 0xa2ce <init_player>

0000a40e <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    a40e:	cf 93       	push	r28
    a410:	df 93       	push	r29
    a412:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    a414:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    a416:	6b 89       	ldd	r22, Y+19	; 0x13
    a418:	70 e0       	ldi	r23, 0x00	; 0
    a41a:	80 e0       	ldi	r24, 0x00	; 0
    a41c:	90 e0       	ldi	r25, 0x00	; 0
    a41e:	0e 94 22 6f 	call	0xde44	; 0xde44 <__floatunsisf>
    a422:	6b 83       	std	Y+3, r22	; 0x03
    a424:	7c 83       	std	Y+4, r23	; 0x04
    a426:	8d 83       	std	Y+5, r24	; 0x05
    a428:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    a42a:	6c 89       	ldd	r22, Y+20	; 0x14
    a42c:	70 e0       	ldi	r23, 0x00	; 0
    a42e:	80 e0       	ldi	r24, 0x00	; 0
    a430:	90 e0       	ldi	r25, 0x00	; 0
    a432:	0e 94 22 6f 	call	0xde44	; 0xde44 <__floatunsisf>
    a436:	6f 83       	std	Y+7, r22	; 0x07
    a438:	78 87       	std	Y+8, r23	; 0x08
    a43a:	89 87       	std	Y+9, r24	; 0x09
    a43c:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    a43e:	18 82       	st	Y, r1
	player->shared.speed = 0;
    a440:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    a442:	1a 82       	std	Y+2, r1	; 0x02
	player->tank_tactic = LBRandom(0, 2);
    a444:	62 e0       	ldi	r22, 0x02	; 2
    a446:	80 e0       	ldi	r24, 0x00	; 0
    a448:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    a44c:	8b 8f       	std	Y+27, r24	; 0x1b
	player->shot_tactic = LBRandom(0, 2);
    a44e:	62 e0       	ldi	r22, 0x02	; 2
    a450:	80 e0       	ldi	r24, 0x00	; 0
    a452:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    a456:	8c 8f       	std	Y+28, r24	; 0x1c
	
}
    a458:	df 91       	pop	r29
    a45a:	cf 91       	pop	r28
    a45c:	08 95       	ret

0000a45e <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    a45e:	0e 94 00 4c 	call	0x9800	; 0x9800 <ProcessSprites>
    WaitVsync(1);
    a462:	81 e0       	ldi	r24, 0x01	; 1
    a464:	90 e0       	ldi	r25, 0x00	; 0
    a466:	0e 94 0a 4e 	call	0x9c14	; 0x9c14 <WaitVsync>
    RestoreBackground();
    a46a:	0c 94 ac 3d 	jmp	0x7b58	; 0x7b58 <RestoreBackground>

0000a46e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    a46e:	cf 93       	push	r28
    a470:	df 93       	push	r29
    a472:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    a474:	bc 01       	movw	r22, r24
    a476:	88 81       	ld	r24, Y
    a478:	99 81       	ldd	r25, Y+1	; 0x01
    a47a:	0e 94 a5 41 	call	0x834a	; 0x834a <EepromReadBlock>
	if (status == 0x03)
    a47e:	83 30       	cpi	r24, 0x03	; 3
    a480:	29 f4       	brne	.+10     	; 0xa48c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    a482:	ce 01       	movw	r24, r28
	}
}
    a484:	df 91       	pop	r29
    a486:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    a488:	0c 94 5b 41 	jmp	0x82b6	; 0x82b6 <EepromWriteBlock>
	}
}
    a48c:	df 91       	pop	r29
    a48e:	cf 91       	pop	r28
    a490:	08 95       	ret

0000a492 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    a492:	61 e0       	ldi	r22, 0x01	; 1
    a494:	83 e0       	ldi	r24, 0x03	; 3
    a496:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <FadeOut>
	ClearVram();
    a49a:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    a49e:	60 e0       	ldi	r22, 0x00	; 0
    a4a0:	83 e0       	ldi	r24, 0x03	; 3
    a4a2:	0c 94 2f 4e 	jmp	0x9c5e	; 0x9c5e <FadeIn>

0000a4a6 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    a4a6:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    a4a8:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    a4aa:	40 e0       	ldi	r20, 0x00	; 0
    a4ac:	6d ec       	ldi	r22, 0xCD	; 205
    a4ae:	7c e3       	ldi	r23, 0x3C	; 60
    a4b0:	8c 2f       	mov	r24, r28
    a4b2:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
    a4b6:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    a4b8:	ca 30       	cpi	r28, 0x0A	; 10
    a4ba:	b9 f7       	brne	.-18     	; 0xa4aa <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    a4bc:	cf 91       	pop	r28
    a4be:	08 95       	ret

0000a4c0 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    a4c0:	cf 92       	push	r12
    a4c2:	df 92       	push	r13
    a4c4:	ff 92       	push	r15
    a4c6:	0f 93       	push	r16
    a4c8:	1f 93       	push	r17
    a4ca:	cf 93       	push	r28
    a4cc:	df 93       	push	r29
    a4ce:	cd b7       	in	r28, 0x3d	; 61
    a4d0:	de b7       	in	r29, 0x3e	; 62
    a4d2:	2a 97       	sbiw	r28, 0x0a	; 10
    a4d4:	0f b6       	in	r0, 0x3f	; 63
    a4d6:	f8 94       	cli
    a4d8:	de bf       	out	0x3e, r29	; 62
    a4da:	0f be       	out	0x3f, r0	; 63
    a4dc:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    a4de:	90 91 e9 0b 	lds	r25, 0x0BE9
    a4e2:	80 91 58 0f 	lds	r24, 0x0F58
    a4e6:	98 17       	cp	r25, r24
    a4e8:	28 f4       	brcc	.+10     	; 0xa4f4 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    a4ea:	ea ed       	ldi	r30, 0xDA	; 218
    a4ec:	fb e0       	ldi	r31, 0x0B	; 11
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    a4ee:	a9 e4       	ldi	r26, 0x49	; 73
    a4f0:	bf e0       	ldi	r27, 0x0F	; 15
    a4f2:	04 c0       	rjmp	.+8      	; 0xa4fc <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    a4f4:	e9 e4       	ldi	r30, 0x49	; 73
    a4f6:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    a4f8:	aa ed       	ldi	r26, 0xDA	; 218
    a4fa:	bb e0       	ldi	r27, 0x0B	; 11
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    a4fc:	1b 96       	adiw	r26, 0x0b	; 11
    a4fe:	8c 91       	ld	r24, X
    a500:	1b 97       	sbiw	r26, 0x0b	; 11
    a502:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    a504:	83 85       	ldd	r24, Z+11	; 0x0b
    a506:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    a508:	1f 96       	adiw	r26, 0x0f	; 15
    a50a:	8c 91       	ld	r24, X
    a50c:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    a50e:	97 85       	ldd	r25, Z+15	; 0x0f
    a510:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    a512:	21 e0       	ldi	r18, 0x01	; 1
    a514:	30 91 ac 0b 	lds	r19, 0x0BAC
    a518:	38 30       	cpi	r19, 0x08	; 8
    a51a:	09 f0       	breq	.+2      	; 0xa51e <save_score+0x5e>
    a51c:	20 e0       	ldi	r18, 0x00	; 0
    a51e:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    a520:	f8 2e       	mov	r15, r24
    a522:	f9 1a       	sub	r15, r25
    a524:	00 e0       	ldi	r16, 0x00	; 0
    a526:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    a528:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    a52a:	81 11       	cpse	r24, r1
    a52c:	08 c0       	rjmp	.+16     	; 0xa53e <save_score+0x7e>
    a52e:	f8 01       	movw	r30, r16
    a530:	ee 59       	subi	r30, 0x9E	; 158
    a532:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    a534:	94 81       	ldd	r25, Z+4	; 0x04
    a536:	25 81       	ldd	r18, Z+5	; 0x05
    a538:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    a53a:	9f 15       	cp	r25, r15
    a53c:	d0 f4       	brcc	.+52     	; 0xa572 <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    a53e:	45 e0       	ldi	r20, 0x05	; 5
    a540:	c8 01       	movw	r24, r16
    a542:	8c 59       	subi	r24, 0x9C	; 156
    a544:	94 4f       	sbci	r25, 0xF4	; 244
    a546:	6c 01       	movw	r12, r24
    a548:	bc 01       	movw	r22, r24
    a54a:	ce 01       	movw	r24, r28
    a54c:	06 96       	adiw	r24, 0x06	; 6
    a54e:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    a552:	45 e0       	ldi	r20, 0x05	; 5
    a554:	be 01       	movw	r22, r28
    a556:	6f 5f       	subi	r22, 0xFF	; 255
    a558:	7f 4f       	sbci	r23, 0xFF	; 255
    a55a:	c6 01       	movw	r24, r12
    a55c:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    a560:	45 e0       	ldi	r20, 0x05	; 5
    a562:	be 01       	movw	r22, r28
    a564:	6a 5f       	subi	r22, 0xFA	; 250
    a566:	7f 4f       	sbci	r23, 0xFF	; 255
    a568:	ce 01       	movw	r24, r28
    a56a:	01 96       	adiw	r24, 0x01	; 1
    a56c:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
				saved = 1;
    a570:	81 e0       	ldi	r24, 0x01	; 1
    a572:	0b 5f       	subi	r16, 0xFB	; 251
    a574:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    a576:	0e 31       	cpi	r16, 0x1E	; 30
    a578:	11 05       	cpc	r17, r1
    a57a:	b9 f6       	brne	.-82     	; 0xa52a <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a57c:	82 e6       	ldi	r24, 0x62	; 98
    a57e:	9b e0       	ldi	r25, 0x0B	; 11
    a580:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a584:	2a 96       	adiw	r28, 0x0a	; 10
    a586:	0f b6       	in	r0, 0x3f	; 63
    a588:	f8 94       	cli
    a58a:	de bf       	out	0x3e, r29	; 62
    a58c:	0f be       	out	0x3f, r0	; 63
    a58e:	cd bf       	out	0x3d, r28	; 61
    a590:	df 91       	pop	r29
    a592:	cf 91       	pop	r28
    a594:	1f 91       	pop	r17
    a596:	0f 91       	pop	r16
    a598:	ff 90       	pop	r15
    a59a:	df 90       	pop	r13
    a59c:	cf 90       	pop	r12
    a59e:	08 95       	ret

0000a5a0 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a5a0:	0f 93       	push	r16
    a5a2:	1f 93       	push	r17
    a5a4:	cf 93       	push	r28
    a5a6:	df 93       	push	r29
    a5a8:	8c 01       	movw	r16, r24
    a5aa:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a5ac:	88 81       	ld	r24, Y
    a5ae:	81 30       	cpi	r24, 0x01	; 1
    a5b0:	69 f1       	breq	.+90     	; 0xa60c <position_shot+0x6c>
    a5b2:	98 f0       	brcs	.+38     	; 0xa5da <position_shot+0x3a>
    a5b4:	82 30       	cpi	r24, 0x02	; 2
    a5b6:	f1 f1       	breq	.+124    	; 0xa634 <position_shot+0x94>
    a5b8:	83 30       	cpi	r24, 0x03	; 3
    a5ba:	09 f0       	breq	.+2      	; 0xa5be <position_shot+0x1e>
    a5bc:	59 c0       	rjmp	.+178    	; 0xa670 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a5be:	f8 01       	movw	r30, r16
    a5c0:	83 81       	ldd	r24, Z+3	; 0x03
    a5c2:	94 81       	ldd	r25, Z+4	; 0x04
    a5c4:	a5 81       	ldd	r26, Z+5	; 0x05
    a5c6:	b6 81       	ldd	r27, Z+6	; 0x06
    a5c8:	8b 83       	std	Y+3, r24	; 0x03
    a5ca:	9c 83       	std	Y+4, r25	; 0x04
    a5cc:	ad 83       	std	Y+5, r26	; 0x05
    a5ce:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a5d0:	20 e0       	ldi	r18, 0x00	; 0
    a5d2:	30 e0       	ldi	r19, 0x00	; 0
    a5d4:	40 e8       	ldi	r20, 0x80	; 128
    a5d6:	50 e4       	ldi	r21, 0x40	; 64
    a5d8:	41 c0       	rjmp	.+130    	; 0xa65c <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a5da:	20 e0       	ldi	r18, 0x00	; 0
    a5dc:	30 e0       	ldi	r19, 0x00	; 0
    a5de:	40 e8       	ldi	r20, 0x80	; 128
    a5e0:	50 e4       	ldi	r21, 0x40	; 64
    a5e2:	f8 01       	movw	r30, r16
    a5e4:	63 81       	ldd	r22, Z+3	; 0x03
    a5e6:	74 81       	ldd	r23, Z+4	; 0x04
    a5e8:	85 81       	ldd	r24, Z+5	; 0x05
    a5ea:	96 81       	ldd	r25, Z+6	; 0x06
    a5ec:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    a5f0:	6b 83       	std	Y+3, r22	; 0x03
    a5f2:	7c 83       	std	Y+4, r23	; 0x04
    a5f4:	8d 83       	std	Y+5, r24	; 0x05
    a5f6:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a5f8:	f8 01       	movw	r30, r16
    a5fa:	87 81       	ldd	r24, Z+7	; 0x07
    a5fc:	90 85       	ldd	r25, Z+8	; 0x08
    a5fe:	a1 85       	ldd	r26, Z+9	; 0x09
    a600:	b2 85       	ldd	r27, Z+10	; 0x0a
    a602:	8f 83       	std	Y+7, r24	; 0x07
    a604:	98 87       	std	Y+8, r25	; 0x08
    a606:	a9 87       	std	Y+9, r26	; 0x09
    a608:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a60a:	32 c0       	rjmp	.+100    	; 0xa670 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a60c:	20 e0       	ldi	r18, 0x00	; 0
    a60e:	30 e0       	ldi	r19, 0x00	; 0
    a610:	40 e0       	ldi	r20, 0x00	; 0
    a612:	51 e4       	ldi	r21, 0x41	; 65
    a614:	f8 01       	movw	r30, r16
    a616:	63 81       	ldd	r22, Z+3	; 0x03
    a618:	74 81       	ldd	r23, Z+4	; 0x04
    a61a:	85 81       	ldd	r24, Z+5	; 0x05
    a61c:	96 81       	ldd	r25, Z+6	; 0x06
    a61e:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    a622:	6b 83       	std	Y+3, r22	; 0x03
    a624:	7c 83       	std	Y+4, r23	; 0x04
    a626:	8d 83       	std	Y+5, r24	; 0x05
    a628:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a62a:	20 e0       	ldi	r18, 0x00	; 0
    a62c:	30 e0       	ldi	r19, 0x00	; 0
    a62e:	40 e8       	ldi	r20, 0x80	; 128
    a630:	50 e4       	ldi	r21, 0x40	; 64
    a632:	13 c0       	rjmp	.+38     	; 0xa65a <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a634:	20 e0       	ldi	r18, 0x00	; 0
    a636:	30 e0       	ldi	r19, 0x00	; 0
    a638:	40 e8       	ldi	r20, 0x80	; 128
    a63a:	50 e4       	ldi	r21, 0x40	; 64
    a63c:	f8 01       	movw	r30, r16
    a63e:	63 81       	ldd	r22, Z+3	; 0x03
    a640:	74 81       	ldd	r23, Z+4	; 0x04
    a642:	85 81       	ldd	r24, Z+5	; 0x05
    a644:	96 81       	ldd	r25, Z+6	; 0x06
    a646:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    a64a:	6b 83       	std	Y+3, r22	; 0x03
    a64c:	7c 83       	std	Y+4, r23	; 0x04
    a64e:	8d 83       	std	Y+5, r24	; 0x05
    a650:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a652:	20 e0       	ldi	r18, 0x00	; 0
    a654:	30 e0       	ldi	r19, 0x00	; 0
    a656:	40 e0       	ldi	r20, 0x00	; 0
    a658:	51 e4       	ldi	r21, 0x41	; 65
    a65a:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a65c:	67 81       	ldd	r22, Z+7	; 0x07
    a65e:	70 85       	ldd	r23, Z+8	; 0x08
    a660:	81 85       	ldd	r24, Z+9	; 0x09
    a662:	92 85       	ldd	r25, Z+10	; 0x0a
    a664:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    a668:	6f 83       	std	Y+7, r22	; 0x07
    a66a:	78 87       	std	Y+8, r23	; 0x08
    a66c:	89 87       	std	Y+9, r24	; 0x09
    a66e:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a670:	df 91       	pop	r29
    a672:	cf 91       	pop	r28
    a674:	1f 91       	pop	r17
    a676:	0f 91       	pop	r16
    a678:	08 95       	ret

0000a67a <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a67a:	0f 93       	push	r16
    a67c:	1f 93       	push	r17
    a67e:	cf 93       	push	r28
    a680:	df 93       	push	r29
    a682:	8c 01       	movw	r16, r24
    a684:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a686:	ac 01       	movw	r20, r24
    a688:	44 5f       	subi	r20, 0xF4	; 244
    a68a:	5f 4f       	sbci	r21, 0xFF	; 255
    a68c:	23 e0       	ldi	r18, 0x03	; 3
    a68e:	6e e0       	ldi	r22, 0x0E	; 14
    a690:	84 e0       	ldi	r24, 0x04	; 4
    a692:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    a696:	45 e7       	ldi	r20, 0x75	; 117
    a698:	52 e0       	ldi	r21, 0x02	; 2
    a69a:	6e e0       	ldi	r22, 0x0E	; 14
    a69c:	70 e0       	ldi	r23, 0x00	; 0
    a69e:	88 e0       	ldi	r24, 0x08	; 8
    a6a0:	90 e0       	ldi	r25, 0x00	; 0
    a6a2:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a6a6:	ae 01       	movw	r20, r28
    a6a8:	44 5f       	subi	r20, 0xF4	; 244
    a6aa:	5f 4f       	sbci	r21, 0xFF	; 255
    a6ac:	23 e0       	ldi	r18, 0x03	; 3
    a6ae:	6e e0       	ldi	r22, 0x0E	; 14
    a6b0:	8d e0       	ldi	r24, 0x0D	; 13
    a6b2:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
	Print(17, 14, (char*) strBy);
    a6b6:	42 e7       	ldi	r20, 0x72	; 114
    a6b8:	52 e0       	ldi	r21, 0x02	; 2
    a6ba:	6e e0       	ldi	r22, 0x0E	; 14
    a6bc:	70 e0       	ldi	r23, 0x00	; 0
    a6be:	81 e1       	ldi	r24, 0x11	; 17
    a6c0:	90 e0       	ldi	r25, 0x00	; 0
    a6c2:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a6c6:	21 e0       	ldi	r18, 0x01	; 1
    a6c8:	f8 01       	movw	r30, r16
    a6ca:	40 89       	ldd	r20, Z+16	; 0x10
    a6cc:	6e e0       	ldi	r22, 0x0E	; 14
    a6ce:	70 e0       	ldi	r23, 0x00	; 0
    a6d0:	86 e1       	ldi	r24, 0x16	; 22
    a6d2:	90 e0       	ldi	r25, 0x00	; 0
    a6d4:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
	PrintChar(23, 14, '-');
    a6d8:	4d e2       	ldi	r20, 0x2D	; 45
    a6da:	6e e0       	ldi	r22, 0x0E	; 14
    a6dc:	70 e0       	ldi	r23, 0x00	; 0
    a6de:	87 e1       	ldi	r24, 0x17	; 23
    a6e0:	90 e0       	ldi	r25, 0x00	; 0
    a6e2:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a6e6:	21 e0       	ldi	r18, 0x01	; 1
    a6e8:	48 89       	ldd	r20, Y+16	; 0x10
    a6ea:	6e e0       	ldi	r22, 0x0E	; 14
    a6ec:	70 e0       	ldi	r23, 0x00	; 0
    a6ee:	8a e1       	ldi	r24, 0x1A	; 26
    a6f0:	90 e0       	ldi	r25, 0x00	; 0
}
    a6f2:	df 91       	pop	r29
    a6f4:	cf 91       	pop	r28
    a6f6:	1f 91       	pop	r17
    a6f8:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a6fa:	0c 94 b9 4d 	jmp	0x9b72	; 0x9b72 <PrintByte>

0000a6fe <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a6fe:	0f 93       	push	r16
    a700:	1f 93       	push	r17
    a702:	cf 93       	push	r28
    a704:	df 93       	push	r29
    a706:	8c 01       	movw	r16, r24
    a708:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    a70a:	46 e6       	ldi	r20, 0x66	; 102
    a70c:	52 e0       	ldi	r21, 0x02	; 2
    a70e:	6c e0       	ldi	r22, 0x0C	; 12
    a710:	70 e0       	ldi	r23, 0x00	; 0
    a712:	89 e0       	ldi	r24, 0x09	; 9
    a714:	90 e0       	ldi	r25, 0x00	; 0
    a716:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a71a:	a8 01       	movw	r20, r16
    a71c:	44 5f       	subi	r20, 0xF4	; 244
    a71e:	5f 4f       	sbci	r21, 0xFF	; 255
    a720:	23 e0       	ldi	r18, 0x03	; 3
    a722:	6e e0       	ldi	r22, 0x0E	; 14
    a724:	84 e0       	ldi	r24, 0x04	; 4
    a726:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    a72a:	45 e7       	ldi	r20, 0x75	; 117
    a72c:	52 e0       	ldi	r21, 0x02	; 2
    a72e:	6e e0       	ldi	r22, 0x0E	; 14
    a730:	70 e0       	ldi	r23, 0x00	; 0
    a732:	88 e0       	ldi	r24, 0x08	; 8
    a734:	90 e0       	ldi	r25, 0x00	; 0
    a736:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a73a:	ae 01       	movw	r20, r28
    a73c:	44 5f       	subi	r20, 0xF4	; 244
    a73e:	5f 4f       	sbci	r21, 0xFF	; 255
    a740:	23 e0       	ldi	r18, 0x03	; 3
    a742:	6e e0       	ldi	r22, 0x0E	; 14
    a744:	8d e0       	ldi	r24, 0x0D	; 13
    a746:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
    Print(17, 14, (char*) strBy);
    a74a:	42 e7       	ldi	r20, 0x72	; 114
    a74c:	52 e0       	ldi	r21, 0x02	; 2
    a74e:	6e e0       	ldi	r22, 0x0E	; 14
    a750:	70 e0       	ldi	r23, 0x00	; 0
    a752:	81 e1       	ldi	r24, 0x11	; 17
    a754:	90 e0       	ldi	r25, 0x00	; 0
    a756:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    PrintByte(22, 14, winner->score ,true);
    a75a:	21 e0       	ldi	r18, 0x01	; 1
    a75c:	f8 01       	movw	r30, r16
    a75e:	47 85       	ldd	r20, Z+15	; 0x0f
    a760:	6e e0       	ldi	r22, 0x0E	; 14
    a762:	70 e0       	ldi	r23, 0x00	; 0
    a764:	86 e1       	ldi	r24, 0x16	; 22
    a766:	90 e0       	ldi	r25, 0x00	; 0
    a768:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
    PrintChar(23, 14, '-');
    a76c:	4d e2       	ldi	r20, 0x2D	; 45
    a76e:	6e e0       	ldi	r22, 0x0E	; 14
    a770:	70 e0       	ldi	r23, 0x00	; 0
    a772:	87 e1       	ldi	r24, 0x17	; 23
    a774:	90 e0       	ldi	r25, 0x00	; 0
    a776:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a77a:	21 e0       	ldi	r18, 0x01	; 1
    a77c:	4f 85       	ldd	r20, Y+15	; 0x0f
    a77e:	6e e0       	ldi	r22, 0x0E	; 14
    a780:	70 e0       	ldi	r23, 0x00	; 0
    a782:	8a e1       	ldi	r24, 0x1A	; 26
    a784:	90 e0       	ldi	r25, 0x00	; 0
    a786:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    a78a:	80 91 ac 0b 	lds	r24, 0x0BAC
    a78e:	88 30       	cpi	r24, 0x08	; 8
    a790:	59 f4       	brne	.+22     	; 0xa7a8 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    a792:	4a e2       	ldi	r20, 0x2A	; 42
    a794:	6e e0       	ldi	r22, 0x0E	; 14
    a796:	70 e0       	ldi	r23, 0x00	; 0
    a798:	8c e1       	ldi	r24, 0x1C	; 28
    a79a:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    a79c:	df 91       	pop	r29
    a79e:	cf 91       	pop	r28
    a7a0:	1f 91       	pop	r17
    a7a2:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    a7a4:	0c 94 07 4e 	jmp	0x9c0e	; 0x9c0e <PrintChar>
	}
}
    a7a8:	df 91       	pop	r29
    a7aa:	cf 91       	pop	r28
    a7ac:	1f 91       	pop	r17
    a7ae:	0f 91       	pop	r16
    a7b0:	08 95       	ret

0000a7b2 <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    a7b2:	fc 01       	movw	r30, r24
    a7b4:	20 81       	ld	r18, Z
    a7b6:	31 81       	ldd	r19, Z+1	; 0x01
    a7b8:	21 70       	andi	r18, 0x01	; 1
    a7ba:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    a7bc:	81 e0       	ldi	r24, 0x01	; 1
    a7be:	23 2b       	or	r18, r19
    a7c0:	09 f4       	brne	.+2      	; 0xa7c4 <shoot_pressed+0x12>
    a7c2:	80 e0       	ldi	r24, 0x00	; 0
}
    a7c4:	08 95       	ret

0000a7c6 <get_delta>:

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a7c6:	fc 01       	movw	r30, r24
    a7c8:	83 a1       	ldd	r24, Z+35	; 0x23
    a7ca:	fb 01       	movw	r30, r22
    a7cc:	61 81       	ldd	r22, Z+1	; 0x01
		return FRAME_TIME * s->speed;
    a7ce:	70 e0       	ldi	r23, 0x00	; 0
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
}

float get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    a7d0:	81 11       	cpse	r24, r1
    a7d2:	09 c0       	rjmp	.+18     	; 0xa7e6 <get_delta+0x20>
		return FRAME_TIME * s->speed;
    a7d4:	80 e0       	ldi	r24, 0x00	; 0
    a7d6:	90 e0       	ldi	r25, 0x00	; 0
    a7d8:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    a7dc:	25 e6       	ldi	r18, 0x65	; 101
    a7de:	38 e8       	ldi	r19, 0x88	; 136
    a7e0:	48 e8       	ldi	r20, 0x88	; 136
    a7e2:	5c e3       	ldi	r21, 0x3C	; 60
    a7e4:	0e c0       	rjmp	.+28     	; 0xa802 <get_delta+0x3c>
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
    a7e6:	80 e0       	ldi	r24, 0x00	; 0
    a7e8:	90 e0       	ldi	r25, 0x00	; 0
    a7ea:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    a7ee:	25 e6       	ldi	r18, 0x65	; 101
    a7f0:	38 e8       	ldi	r19, 0x88	; 136
    a7f2:	48 e8       	ldi	r20, 0x88	; 136
    a7f4:	5c e3       	ldi	r21, 0x3C	; 60
    a7f6:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    a7fa:	23 e3       	ldi	r18, 0x33	; 51
    a7fc:	33 e3       	ldi	r19, 0x33	; 51
    a7fe:	43 eb       	ldi	r20, 0xB3	; 179
    a800:	5f e3       	ldi	r21, 0x3F	; 63
    a802:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
}
    a806:	08 95       	ret

0000a808 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a808:	cf 93       	push	r28
    a80a:	df 93       	push	r29
    a80c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a80e:	ac 01       	movw	r20, r24
    a810:	44 5f       	subi	r20, 0xF4	; 244
    a812:	5f 4f       	sbci	r21, 0xFF	; 255
    a814:	23 e0       	ldi	r18, 0x03	; 3
    a816:	60 e0       	ldi	r22, 0x00	; 0
    a818:	8a e0       	ldi	r24, 0x0A	; 10
    a81a:	8c 0f       	add	r24, r28
    a81c:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
	Print(x, 0, (char*) strScore);
    a820:	d0 e0       	ldi	r29, 0x00	; 0
    a822:	4f e5       	ldi	r20, 0x5F	; 95
    a824:	52 e0       	ldi	r21, 0x02	; 2
    a826:	60 e0       	ldi	r22, 0x00	; 0
    a828:	70 e0       	ldi	r23, 0x00	; 0
    a82a:	ce 01       	movw	r24, r28
    a82c:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(x, 1, (char*) strTotal);
    a830:	48 e5       	ldi	r20, 0x58	; 88
    a832:	52 e0       	ldi	r21, 0x02	; 2
    a834:	61 e0       	ldi	r22, 0x01	; 1
    a836:	70 e0       	ldi	r23, 0x00	; 0
    a838:	ce 01       	movw	r24, r28
	
}
    a83a:	df 91       	pop	r29
    a83c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    a83e:	0c 94 ec 4d 	jmp	0x9bd8	; 0x9bd8 <Print>

0000a842 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a842:	0f 93       	push	r16
    a844:	1f 93       	push	r17
    a846:	cf 93       	push	r28
    a848:	df 93       	push	r29
    a84a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a84c:	c6 2f       	mov	r28, r22
    a84e:	d0 e0       	ldi	r29, 0x00	; 0
    a850:	28 96       	adiw	r28, 0x08	; 8
    a852:	20 e0       	ldi	r18, 0x00	; 0
    a854:	fc 01       	movw	r30, r24
    a856:	40 89       	ldd	r20, Z+16	; 0x10
    a858:	60 e0       	ldi	r22, 0x00	; 0
    a85a:	70 e0       	ldi	r23, 0x00	; 0
    a85c:	ce 01       	movw	r24, r28
    a85e:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a862:	20 e0       	ldi	r18, 0x00	; 0
    a864:	f8 01       	movw	r30, r16
    a866:	47 85       	ldd	r20, Z+15	; 0x0f
    a868:	61 e0       	ldi	r22, 0x01	; 1
    a86a:	70 e0       	ldi	r23, 0x00	; 0
    a86c:	ce 01       	movw	r24, r28
}
    a86e:	df 91       	pop	r29
    a870:	cf 91       	pop	r28
    a872:	1f 91       	pop	r17
    a874:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a876:	0c 94 b9 4d 	jmp	0x9b72	; 0x9b72 <PrintByte>

0000a87a <render_player>:
}

void render_player(Player* player, u8 sprite_index)
{
    a87a:	ef 92       	push	r14
    a87c:	ff 92       	push	r15
    a87e:	0f 93       	push	r16
    a880:	1f 93       	push	r17
    a882:	cf 93       	push	r28
    a884:	df 93       	push	r29
    a886:	1f 92       	push	r1
    a888:	cd b7       	in	r28, 0x3d	; 61
    a88a:	de b7       	in	r29, 0x3e	; 62
    a88c:	7c 01       	movw	r14, r24
    a88e:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a890:	fc 01       	movw	r30, r24
    a892:	67 81       	ldd	r22, Z+7	; 0x07
    a894:	70 85       	ldd	r23, Z+8	; 0x08
    a896:	81 85       	ldd	r24, Z+9	; 0x09
    a898:	92 85       	ldd	r25, Z+10	; 0x0a
    a89a:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    a89e:	46 2f       	mov	r20, r22
    a8a0:	f7 01       	movw	r30, r14
    a8a2:	63 81       	ldd	r22, Z+3	; 0x03
    a8a4:	74 81       	ldd	r23, Z+4	; 0x04
    a8a6:	85 81       	ldd	r24, Z+5	; 0x05
    a8a8:	96 81       	ldd	r25, Z+6	; 0x06
    a8aa:	49 83       	std	Y+1, r20	; 0x01
    a8ac:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    a8b0:	02 e0       	ldi	r16, 0x02	; 2
    a8b2:	22 e0       	ldi	r18, 0x02	; 2
    a8b4:	49 81       	ldd	r20, Y+1	; 0x01
    a8b6:	81 2f       	mov	r24, r17
    a8b8:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
}
    a8bc:	0f 90       	pop	r0
    a8be:	df 91       	pop	r29
    a8c0:	cf 91       	pop	r28
    a8c2:	1f 91       	pop	r17
    a8c4:	0f 91       	pop	r16
    a8c6:	ff 90       	pop	r15
    a8c8:	ef 90       	pop	r14
    a8ca:	08 95       	ret

0000a8cc <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a8cc:	ef 92       	push	r14
    a8ce:	ff 92       	push	r15
    a8d0:	0f 93       	push	r16
    a8d2:	1f 93       	push	r17
    a8d4:	cf 93       	push	r28
    a8d6:	df 93       	push	r29
    a8d8:	1f 92       	push	r1
    a8da:	cd b7       	in	r28, 0x3d	; 61
    a8dc:	de b7       	in	r29, 0x3e	; 62
    a8de:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a8e0:	81 89       	ldd	r24, Z+17	; 0x11
    a8e2:	88 23       	and	r24, r24
    a8e4:	b9 f0       	breq	.+46     	; 0xa914 <render_shot+0x48>
    a8e6:	16 2f       	mov	r17, r22
    a8e8:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a8ea:	64 a9       	ldd	r22, Z+52	; 0x34
    a8ec:	75 a9       	ldd	r23, Z+53	; 0x35
    a8ee:	86 a9       	ldd	r24, Z+54	; 0x36
    a8f0:	97 a9       	ldd	r25, Z+55	; 0x37
    a8f2:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    a8f6:	46 2f       	mov	r20, r22
    a8f8:	f7 01       	movw	r30, r14
    a8fa:	60 a9       	ldd	r22, Z+48	; 0x30
    a8fc:	71 a9       	ldd	r23, Z+49	; 0x31
    a8fe:	82 a9       	ldd	r24, Z+50	; 0x32
    a900:	93 a9       	ldd	r25, Z+51	; 0x33
    a902:	49 83       	std	Y+1, r20	; 0x01
    a904:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    a908:	01 e0       	ldi	r16, 0x01	; 1
    a90a:	21 e0       	ldi	r18, 0x01	; 1
    a90c:	49 81       	ldd	r20, Y+1	; 0x01
    a90e:	81 2f       	mov	r24, r17
    a910:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
			sprite_index++;
		}
	}
}
    a914:	0f 90       	pop	r0
    a916:	df 91       	pop	r29
    a918:	cf 91       	pop	r28
    a91a:	1f 91       	pop	r17
    a91c:	0f 91       	pop	r16
    a91e:	ff 90       	pop	r15
    a920:	ef 90       	pop	r14
    a922:	08 95       	ret

0000a924 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a924:	ef 92       	push	r14
    a926:	ff 92       	push	r15
    a928:	0f 93       	push	r16
    a92a:	1f 93       	push	r17
    a92c:	cf 93       	push	r28
    a92e:	df 93       	push	r29
    a930:	ec 01       	movw	r28, r24
    a932:	25 96       	adiw	r28, 0x05	; 5
    a934:	8c 01       	movw	r16, r24
    a936:	0f 5d       	subi	r16, 0xDF	; 223
    a938:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a93a:	8e e1       	ldi	r24, 0x1E	; 30
    a93c:	e8 2e       	mov	r14, r24
    a93e:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a940:	88 85       	ldd	r24, Y+8	; 0x08
    a942:	99 85       	ldd	r25, Y+9	; 0x09
    a944:	89 2b       	or	r24, r25
    a946:	c1 f0       	breq	.+48     	; 0xa978 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    a948:	ce 01       	movw	r24, r28
    a94a:	04 97       	sbiw	r24, 0x04	; 4
    a94c:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    a950:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    a952:	48 81       	ld	r20, Y
    a954:	88 85       	ldd	r24, Y+8	; 0x08
    a956:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a958:	b7 01       	movw	r22, r14
    a95a:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    a95e:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    a960:	44 23       	and	r20, r20
    a962:	39 f0       	breq	.+14     	; 0xa972 <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a964:	40 e0       	ldi	r20, 0x00	; 0
    a966:	50 e0       	ldi	r21, 0x00	; 0
    a968:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
				ta->anims[i].tile_index = 0;
    a96c:	19 86       	std	Y+9, r1	; 0x09
    a96e:	18 86       	std	Y+8, r1	; 0x08
    a970:	03 c0       	rjmp	.+6      	; 0xa978 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a972:	a9 01       	movw	r20, r18
    a974:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
    a978:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a97a:	c0 17       	cp	r28, r16
    a97c:	d1 07       	cpc	r29, r17
    a97e:	01 f7       	brne	.-64     	; 0xa940 <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    a980:	df 91       	pop	r29
    a982:	cf 91       	pop	r28
    a984:	1f 91       	pop	r17
    a986:	0f 91       	pop	r16
    a988:	ff 90       	pop	r15
    a98a:	ef 90       	pop	r14
    a98c:	08 95       	ret

0000a98e <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    a98e:	cf 93       	push	r28
    a990:	df 93       	push	r29
    a992:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    a994:	0e 94 93 4e 	call	0x9d26	; 0x9d26 <LBGetNextFrameReverse>
    a998:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    a99a:	4c 81       	ldd	r20, Y+4	; 0x04
    a99c:	8c 85       	ldd	r24, Y+12	; 0x0c
    a99e:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a9a0:	6e e1       	ldi	r22, 0x1E	; 30
    a9a2:	70 e0       	ldi	r23, 0x00	; 0
    a9a4:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    a9a8:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    a9aa:	44 23       	and	r20, r20
    a9ac:	19 f0       	breq	.+6      	; 0xa9b4 <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    a9ae:	47 e1       	ldi	r20, 0x17	; 23
    a9b0:	56 e7       	ldi	r21, 0x76	; 118
    a9b2:	01 c0       	rjmp	.+2      	; 0xa9b6 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    a9b4:	a9 01       	movw	r20, r18
    a9b6:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	}
	return ta->anim.looped;
}
    a9ba:	8c 81       	ldd	r24, Y+4	; 0x04
    a9bc:	df 91       	pop	r29
    a9be:	cf 91       	pop	r28
    a9c0:	08 95       	ret

0000a9c2 <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a9c2:	1f 93       	push	r17
    a9c4:	cf 93       	push	r28
    a9c6:	df 93       	push	r29
    a9c8:	ec 01       	movw	r28, r24
    a9ca:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    a9cc:	8d 89       	ldd	r24, Y+21	; 0x15
    a9ce:	80 ff       	sbrs	r24, 0
    a9d0:	17 c0       	rjmp	.+46     	; 0xaa00 <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    a9d2:	ce 01       	movw	r24, r28
    a9d4:	83 59       	subi	r24, 0x93	; 147
    a9d6:	9f 4f       	sbci	r25, 0xFF	; 255
    a9d8:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    a9dc:	fe 01       	movw	r30, r28
    a9de:	ef 58       	subi	r30, 0x8F	; 143
    a9e0:	ff 4f       	sbci	r31, 0xFF	; 255
    a9e2:	20 81       	ld	r18, Z
    a9e4:	22 23       	and	r18, r18
    a9e6:	09 f4       	brne	.+2      	; 0xa9ea <tank_map+0x28>
    a9e8:	4a c0       	rjmp	.+148    	; 0xaa7e <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a9ea:	8d 89       	ldd	r24, Y+21	; 0x15
    a9ec:	91 e0       	ldi	r25, 0x01	; 1
    a9ee:	98 27       	eor	r25, r24
    a9f0:	9d 8b       	std	Y+21, r25	; 0x15
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a9f2:	ce 01       	movw	r24, r28
    a9f4:	0e 94 07 52 	call	0xa40e	; 0xa40e <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    a9f8:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a9fa:	87 ec       	ldi	r24, 0xC7	; 199
    a9fc:	9c e3       	ldi	r25, 0x3C	; 60
    a9fe:	40 c0       	rjmp	.+128    	; 0xaa80 <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    aa00:	9e 89       	ldd	r25, Y+22	; 0x16
    aa02:	98 37       	cpi	r25, 0x78	; 120
    aa04:	11 f0       	breq	.+4      	; 0xaa0a <tank_map+0x48>
		{
			player->grace_frame++;
    aa06:	9f 5f       	subi	r25, 0xFF	; 255
    aa08:	9e 8b       	std	Y+22, r25	; 0x16
		}
		switch (player->shared.direction)
    aa0a:	98 81       	ld	r25, Y
    aa0c:	91 30       	cpi	r25, 0x01	; 1
    aa0e:	61 f0       	breq	.+24     	; 0xaa28 <tank_map+0x66>
    aa10:	b0 f0       	brcs	.+44     	; 0xaa3e <tank_map+0x7c>
    aa12:	92 30       	cpi	r25, 0x02	; 2
    aa14:	69 f0       	breq	.+26     	; 0xaa30 <tank_map+0x6e>
    aa16:	93 30       	cpi	r25, 0x03	; 3
    aa18:	91 f4       	brne	.+36     	; 0xaa3e <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    aa1a:	ce 01       	movw	r24, r28
    aa1c:	8f 59       	subi	r24, 0x9F	; 159
    aa1e:	9f 4f       	sbci	r25, 0xFF	; 255
    aa20:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aa24:	41 e0       	ldi	r20, 0x01	; 1
    aa26:	11 c0       	rjmp	.+34     	; 0xaa4a <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    aa28:	ce 01       	movw	r24, r28
    aa2a:	8f 59       	subi	r24, 0x9F	; 159
    aa2c:	9f 4f       	sbci	r25, 0xFF	; 255
    aa2e:	0a c0       	rjmp	.+20     	; 0xaa44 <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    aa30:	ce 01       	movw	r24, r28
    aa32:	8b 5a       	subi	r24, 0xAB	; 171
    aa34:	9f 4f       	sbci	r25, 0xFF	; 255
    aa36:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aa3a:	42 e0       	ldi	r20, 0x02	; 2
    aa3c:	06 c0       	rjmp	.+12     	; 0xaa4a <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    aa3e:	ce 01       	movw	r24, r28
    aa40:	8b 5a       	subi	r24, 0xAB	; 171
    aa42:	9f 4f       	sbci	r25, 0xFF	; 255
    aa44:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aa48:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    aa4a:	2e 89       	ldd	r18, Y+22	; 0x16
    aa4c:	28 37       	cpi	r18, 0x78	; 120
    aa4e:	31 f0       	breq	.+12     	; 0xaa5c <tank_map+0x9a>
    aa50:	20 91 b0 0b 	lds	r18, 0x0BB0
    aa54:	22 23       	and	r18, r18
    aa56:	11 f0       	breq	.+4      	; 0xaa5c <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    aa58:	87 ec       	ldi	r24, 0xC7	; 199
    aa5a:	9c e3       	ldi	r25, 0x3C	; 60
		}
		game.toggle_counter--;
    aa5c:	20 91 af 0b 	lds	r18, 0x0BAF
    aa60:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    aa62:	19 f0       	breq	.+6      	; 0xaa6a <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    aa64:	20 93 af 0b 	sts	0x0BAF, r18
    aa68:	0b c0       	rjmp	.+22     	; 0xaa80 <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    aa6a:	24 e1       	ldi	r18, 0x14	; 20
    aa6c:	20 93 af 0b 	sts	0x0BAF, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    aa70:	30 91 b0 0b 	lds	r19, 0x0BB0
    aa74:	21 e0       	ldi	r18, 0x01	; 1
    aa76:	23 27       	eor	r18, r19
    aa78:	20 93 b0 0b 	sts	0x0BB0, r18
    aa7c:	01 c0       	rjmp	.+2      	; 0xaa80 <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    aa7e:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    aa80:	bc 01       	movw	r22, r24
    aa82:	81 2f       	mov	r24, r17
    aa84:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    aa88:	84 e0       	ldi	r24, 0x04	; 4
    aa8a:	81 0f       	add	r24, r17
    aa8c:	df 91       	pop	r29
    aa8e:	cf 91       	pop	r28
    aa90:	1f 91       	pop	r17
    aa92:	08 95       	ret

0000aa94 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    aa94:	cf 93       	push	r28
    aa96:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    aa98:	fc 01       	movw	r30, r24
    aa9a:	23 ad       	ldd	r18, Z+59	; 0x3b
    aa9c:	22 23       	and	r18, r18
    aa9e:	d9 f0       	breq	.+54     	; 0xaad6 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    aaa0:	25 a5       	ldd	r18, Z+45	; 0x2d
    aaa2:	21 30       	cpi	r18, 0x01	; 1
    aaa4:	59 f0       	breq	.+22     	; 0xaabc <shot_map+0x28>
    aaa6:	a8 f0       	brcs	.+42     	; 0xaad2 <shot_map+0x3e>
    aaa8:	22 30       	cpi	r18, 0x02	; 2
    aaaa:	71 f0       	breq	.+28     	; 0xaac8 <shot_map+0x34>
    aaac:	23 30       	cpi	r18, 0x03	; 3
    aaae:	89 f4       	brne	.+34     	; 0xaad2 <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    aab0:	87 5b       	subi	r24, 0xB7	; 183
    aab2:	9f 4f       	sbci	r25, 0xFF	; 255
    aab4:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aab8:	41 e0       	ldi	r20, 0x01	; 1
    aaba:	10 c0       	rjmp	.+32     	; 0xaadc <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    aabc:	87 5b       	subi	r24, 0xB7	; 183
    aabe:	9f 4f       	sbci	r25, 0xFF	; 255
    aac0:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aac4:	40 e0       	ldi	r20, 0x00	; 0
    aac6:	0a c0       	rjmp	.+20     	; 0xaadc <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    aac8:	cd 96       	adiw	r24, 0x3d	; 61
    aaca:	0e 94 6e 4e 	call	0x9cdc	; 0x9cdc <LBGetNextFrame>
    aace:	42 e0       	ldi	r20, 0x02	; 2
    aad0:	05 c0       	rjmp	.+10     	; 0xaadc <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    aad2:	cd 96       	adiw	r24, 0x3d	; 61
    aad4:	f5 cf       	rjmp	.-22     	; 0xaac0 <shot_map+0x2c>
    aad6:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    aad8:	87 ec       	ldi	r24, 0xC7	; 199
    aada:	9c e3       	ldi	r25, 0x3C	; 60
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    aadc:	bc 01       	movw	r22, r24
    aade:	8c 2f       	mov	r24, r28
    aae0:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    aae4:	81 e0       	ldi	r24, 0x01	; 1
    aae6:	8c 0f       	add	r24, r28
    aae8:	cf 91       	pop	r28
    aaea:	08 95       	ret

0000aaec <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    aaec:	cf 93       	push	r28
    aaee:	df 93       	push	r29
    aaf0:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    aaf2:	88 81       	ld	r24, Y
    aaf4:	81 11       	cpse	r24, r1
    aaf6:	0b c0       	rjmp	.+22     	; 0xab0e <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    aaf8:	6f 81       	ldd	r22, Y+7	; 0x07
    aafa:	78 85       	ldd	r23, Y+8	; 0x08
    aafc:	89 85       	ldd	r24, Y+9	; 0x09
    aafe:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab00:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ab04:	66 95       	lsr	r22
    ab06:	66 95       	lsr	r22
    ab08:	66 95       	lsr	r22
    ab0a:	6f 5f       	subi	r22, 0xFF	; 255
    ab0c:	1d c0       	rjmp	.+58     	; 0xab48 <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    ab0e:	81 30       	cpi	r24, 0x01	; 1
    ab10:	69 f4       	brne	.+26     	; 0xab2c <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    ab12:	20 e0       	ldi	r18, 0x00	; 0
    ab14:	30 e0       	ldi	r19, 0x00	; 0
    ab16:	40 e0       	ldi	r20, 0x00	; 0
    ab18:	5e e3       	ldi	r21, 0x3E	; 62
    ab1a:	6b 81       	ldd	r22, Y+3	; 0x03
    ab1c:	7c 81       	ldd	r23, Y+4	; 0x04
    ab1e:	8d 81       	ldd	r24, Y+5	; 0x05
    ab20:	9e 81       	ldd	r25, Y+6	; 0x06
    ab22:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    ab26:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ab2a:	27 c0       	rjmp	.+78     	; 0xab7a <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    ab2c:	82 30       	cpi	r24, 0x02	; 2
    ab2e:	d9 f4       	brne	.+54     	; 0xab66 <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    ab30:	20 e0       	ldi	r18, 0x00	; 0
    ab32:	30 e0       	ldi	r19, 0x00	; 0
    ab34:	40 e0       	ldi	r20, 0x00	; 0
    ab36:	5e e3       	ldi	r21, 0x3E	; 62
    ab38:	6f 81       	ldd	r22, Y+7	; 0x07
    ab3a:	78 85       	ldd	r23, Y+8	; 0x08
    ab3c:	89 85       	ldd	r24, Y+9	; 0x09
    ab3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    ab40:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    ab44:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
		sprite->y = tile * 8;
    ab48:	88 e0       	ldi	r24, 0x08	; 8
    ab4a:	68 9f       	mul	r22, r24
    ab4c:	b0 01       	movw	r22, r0
    ab4e:	11 24       	eor	r1, r1
    ab50:	88 27       	eor	r24, r24
    ab52:	77 fd       	sbrc	r23, 7
    ab54:	80 95       	com	r24
    ab56:	98 2f       	mov	r25, r24
    ab58:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    ab5c:	6f 83       	std	Y+7, r22	; 0x07
    ab5e:	78 87       	std	Y+8, r23	; 0x08
    ab60:	89 87       	std	Y+9, r24	; 0x09
    ab62:	9a 87       	std	Y+10, r25	; 0x0a
    ab64:	18 c0       	rjmp	.+48     	; 0xab96 <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    ab66:	6b 81       	ldd	r22, Y+3	; 0x03
    ab68:	7c 81       	ldd	r23, Y+4	; 0x04
    ab6a:	8d 81       	ldd	r24, Y+5	; 0x05
    ab6c:	9e 81       	ldd	r25, Y+6	; 0x06
    ab6e:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ab72:	66 95       	lsr	r22
    ab74:	66 95       	lsr	r22
    ab76:	66 95       	lsr	r22
    ab78:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    ab7a:	88 e0       	ldi	r24, 0x08	; 8
    ab7c:	68 9f       	mul	r22, r24
    ab7e:	b0 01       	movw	r22, r0
    ab80:	11 24       	eor	r1, r1
    ab82:	88 27       	eor	r24, r24
    ab84:	77 fd       	sbrc	r23, 7
    ab86:	80 95       	com	r24
    ab88:	98 2f       	mov	r25, r24
    ab8a:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    ab8e:	6b 83       	std	Y+3, r22	; 0x03
    ab90:	7c 83       	std	Y+4, r23	; 0x04
    ab92:	8d 83       	std	Y+5, r24	; 0x05
    ab94:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    ab96:	81 e0       	ldi	r24, 0x01	; 1
    ab98:	8a 83       	std	Y+2, r24	; 0x02
}
    ab9a:	df 91       	pop	r29
    ab9c:	cf 91       	pop	r28
    ab9e:	08 95       	ret

0000aba0 <recoil_sprite_fine>:

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    aba0:	cf 93       	push	r28
    aba2:	df 93       	push	r29
    aba4:	eb 01       	movw	r28, r22
	float speed = get_delta(p, sprite);
    aba6:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    abaa:	9b 01       	movw	r18, r22
    abac:	ac 01       	movw	r20, r24
	
	if (sprite->direction == D_UP)
    abae:	88 81       	ld	r24, Y
    abb0:	81 11       	cpse	r24, r1
    abb2:	07 c0       	rjmp	.+14     	; 0xabc2 <recoil_sprite_fine+0x22>
	{
		sprite->y += speed;
    abb4:	6f 81       	ldd	r22, Y+7	; 0x07
    abb6:	78 85       	ldd	r23, Y+8	; 0x08
    abb8:	89 85       	ldd	r24, Y+9	; 0x09
    abba:	9a 85       	ldd	r25, Y+10	; 0x0a
    abbc:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    abc0:	11 c0       	rjmp	.+34     	; 0xabe4 <recoil_sprite_fine+0x44>
	}
	else if (sprite->direction == D_RIGHT)
    abc2:	81 30       	cpi	r24, 0x01	; 1
    abc4:	39 f4       	brne	.+14     	; 0xabd4 <recoil_sprite_fine+0x34>
	{
		sprite->x -= speed;
    abc6:	6b 81       	ldd	r22, Y+3	; 0x03
    abc8:	7c 81       	ldd	r23, Y+4	; 0x04
    abca:	8d 81       	ldd	r24, Y+5	; 0x05
    abcc:	9e 81       	ldd	r25, Y+6	; 0x06
    abce:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    abd2:	13 c0       	rjmp	.+38     	; 0xabfa <recoil_sprite_fine+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    abd4:	82 30       	cpi	r24, 0x02	; 2
    abd6:	59 f4       	brne	.+22     	; 0xabee <recoil_sprite_fine+0x4e>
	{
		sprite->y -= speed;
    abd8:	6f 81       	ldd	r22, Y+7	; 0x07
    abda:	78 85       	ldd	r23, Y+8	; 0x08
    abdc:	89 85       	ldd	r24, Y+9	; 0x09
    abde:	9a 85       	ldd	r25, Y+10	; 0x0a
    abe0:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    abe4:	6f 83       	std	Y+7, r22	; 0x07
    abe6:	78 87       	std	Y+8, r23	; 0x08
    abe8:	89 87       	std	Y+9, r24	; 0x09
    abea:	9a 87       	std	Y+10, r25	; 0x0a
    abec:	0a c0       	rjmp	.+20     	; 0xac02 <recoil_sprite_fine+0x62>
	}
	else
	{
		sprite->x += speed;
    abee:	6b 81       	ldd	r22, Y+3	; 0x03
    abf0:	7c 81       	ldd	r23, Y+4	; 0x04
    abf2:	8d 81       	ldd	r24, Y+5	; 0x05
    abf4:	9e 81       	ldd	r25, Y+6	; 0x06
    abf6:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    abfa:	6b 83       	std	Y+3, r22	; 0x03
    abfc:	7c 83       	std	Y+4, r23	; 0x04
    abfe:	8d 83       	std	Y+5, r24	; 0x05
    ac00:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    ac02:	81 e0       	ldi	r24, 0x01	; 1
    ac04:	8a 83       	std	Y+2, r24	; 0x02
}
    ac06:	df 91       	pop	r29
    ac08:	cf 91       	pop	r28
    ac0a:	08 95       	ret

0000ac0c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    ac0c:	86 5a       	subi	r24, 0xA6	; 166
    ac0e:	93 4f       	sbci	r25, 0xF3	; 243
    ac10:	fc 01       	movw	r30, r24
    ac12:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    ac14:	81 30       	cpi	r24, 0x01	; 1
    ac16:	31 f0       	breq	.+12     	; 0xac24 <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    ac18:	82 30       	cpi	r24, 0x02	; 2
    ac1a:	31 f0       	breq	.+12     	; 0xac28 <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    ac1c:	87 33       	cpi	r24, 0x37	; 55
    ac1e:	31 f0       	breq	.+12     	; 0xac2c <solid_square_tile+0x20>

	return 0;
    ac20:	80 e0       	ldi	r24, 0x00	; 0
    ac22:	08 95       	ret
    ac24:	81 e0       	ldi	r24, 0x01	; 1
    ac26:	08 95       	ret
    ac28:	82 e0       	ldi	r24, 0x02	; 2
    ac2a:	08 95       	ret
    ac2c:	87 e3       	ldi	r24, 0x37	; 55
}
    ac2e:	08 95       	ret

0000ac30 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    ac30:	86 5a       	subi	r24, 0xA6	; 166
    ac32:	93 4f       	sbci	r25, 0xF3	; 243
    ac34:	fc 01       	movw	r30, r24
    ac36:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    ac38:	83 30       	cpi	r24, 0x03	; 3
    ac3a:	41 f0       	breq	.+16     	; 0xac4c <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    ac3c:	86 30       	cpi	r24, 0x06	; 6
    ac3e:	41 f0       	breq	.+16     	; 0xac50 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    ac40:	84 30       	cpi	r24, 0x04	; 4
    ac42:	41 f0       	breq	.+16     	; 0xac54 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    ac44:	85 30       	cpi	r24, 0x05	; 5
    ac46:	41 f0       	breq	.+16     	; 0xac58 <solid_directional_tile+0x28>
	
	return 0;
    ac48:	80 e0       	ldi	r24, 0x00	; 0
    ac4a:	08 95       	ret
    ac4c:	83 e0       	ldi	r24, 0x03	; 3
    ac4e:	08 95       	ret
    ac50:	86 e0       	ldi	r24, 0x06	; 6
    ac52:	08 95       	ret
    ac54:	84 e0       	ldi	r24, 0x04	; 4
    ac56:	08 95       	ret
    ac58:	85 e0       	ldi	r24, 0x05	; 5
}
    ac5a:	08 95       	ret

0000ac5c <solid_tile>:

u8 solid_tile(int tile_index)
{
    ac5c:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    ac5e:	fc 01       	movw	r30, r24
    ac60:	e6 5a       	subi	r30, 0xA6	; 166
    ac62:	f3 4f       	sbci	r31, 0xF3	; 243
    ac64:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    ac66:	91 30       	cpi	r25, 0x01	; 1
    ac68:	39 f0       	breq	.+14     	; 0xac78 <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    ac6a:	92 30       	cpi	r25, 0x02	; 2
    ac6c:	39 f0       	breq	.+14     	; 0xac7c <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    ac6e:	97 33       	cpi	r25, 0x37	; 55
    ac70:	39 f0       	breq	.+14     	; 0xac80 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    ac72:	c9 01       	movw	r24, r18
    ac74:	0c 94 18 56 	jmp	0xac30	; 0xac30 <solid_directional_tile>
    ac78:	81 e0       	ldi	r24, 0x01	; 1
    ac7a:	08 95       	ret
    ac7c:	82 e0       	ldi	r24, 0x02	; 2
    ac7e:	08 95       	ret
    ac80:	87 e3       	ldi	r24, 0x37	; 55
}
    ac82:	08 95       	ret

0000ac84 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    ac84:	7f 92       	push	r7
    ac86:	8f 92       	push	r8
    ac88:	9f 92       	push	r9
    ac8a:	af 92       	push	r10
    ac8c:	bf 92       	push	r11
    ac8e:	cf 92       	push	r12
    ac90:	df 92       	push	r13
    ac92:	ef 92       	push	r14
    ac94:	ff 92       	push	r15
    ac96:	0f 93       	push	r16
    ac98:	1f 93       	push	r17
    ac9a:	cf 93       	push	r28
    ac9c:	df 93       	push	r29
    ac9e:	b6 2e       	mov	r11, r22
    aca0:	94 2e       	mov	r9, r20
    aca2:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    aca4:	fc 01       	movw	r30, r24
    aca6:	e6 5a       	subi	r30, 0xA6	; 166
    aca8:	f3 4f       	sbci	r31, 0xF3	; 243
    acaa:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    acac:	6e e1       	ldi	r22, 0x1E	; 30
    acae:	70 e0       	ldi	r23, 0x00	; 0
    acb0:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    acb4:	f8 2e       	mov	r15, r24
    acb6:	ff 0c       	add	r15, r15
    acb8:	ff 0c       	add	r15, r15
    acba:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    acbc:	6d 5f       	subi	r22, 0xFD	; 253
    acbe:	7f 4f       	sbci	r23, 0xFF	; 255
    acc0:	16 2f       	mov	r17, r22
    acc2:	11 0f       	add	r17, r17
    acc4:	11 0f       	add	r17, r17
    acc6:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    acc8:	83 e0       	ldi	r24, 0x03	; 3
    acca:	d8 16       	cp	r13, r24
    accc:	19 f0       	breq	.+6      	; 0xacd4 <collides_directional_tile+0x50>
    acce:	86 e0       	ldi	r24, 0x06	; 6
    acd0:	d8 12       	cpse	r13, r24
    acd2:	31 c0       	rjmp	.+98     	; 0xad36 <collides_directional_tile+0xb2>
    acd4:	cf ef       	ldi	r28, 0xFF	; 255
    acd6:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    acd8:	c9 0d       	add	r28, r9
    acda:	27 e0       	ldi	r18, 0x07	; 7
    acdc:	72 2e       	mov	r7, r18
    acde:	7f 0c       	add	r7, r15
    ace0:	37 e0       	ldi	r19, 0x07	; 7
    ace2:	83 2e       	mov	r8, r19
    ace4:	81 0e       	add	r8, r17
    ace6:	ac 2e       	mov	r10, r28
    ace8:	cb 2c       	mov	r12, r11
    acea:	e9 2c       	mov	r14, r9
    acec:	0b 2d       	mov	r16, r11
    acee:	21 2f       	mov	r18, r17
    acf0:	47 2d       	mov	r20, r7
    acf2:	68 2d       	mov	r22, r8
    acf4:	8f 2d       	mov	r24, r15
    acf6:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    acfa:	81 11       	cpse	r24, r1
    acfc:	58 c0       	rjmp	.+176    	; 0xadae <collides_directional_tile+0x12a>
    acfe:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    ad00:	db 0d       	add	r29, r11
    ad02:	a9 2c       	mov	r10, r9
    ad04:	cd 2e       	mov	r12, r29
    ad06:	21 2f       	mov	r18, r17
    ad08:	47 2d       	mov	r20, r7
    ad0a:	68 2d       	mov	r22, r8
    ad0c:	8f 2d       	mov	r24, r15
    ad0e:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ad12:	81 11       	cpse	r24, r1
    ad14:	4c c0       	rjmp	.+152    	; 0xadae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    ad16:	ac 2e       	mov	r10, r28
    ad18:	0d 2f       	mov	r16, r29
    ad1a:	21 2f       	mov	r18, r17
    ad1c:	47 2d       	mov	r20, r7
    ad1e:	68 2d       	mov	r22, r8
    ad20:	8f 2d       	mov	r24, r15
    ad22:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ad26:	81 11       	cpse	r24, r1
    ad28:	42 c0       	rjmp	.+132    	; 0xadae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    ad2a:	ec 2e       	mov	r14, r28
    ad2c:	0b 2d       	mov	r16, r11
    ad2e:	21 2f       	mov	r18, r17
    ad30:	47 2d       	mov	r20, r7
    ad32:	68 2d       	mov	r22, r8
    ad34:	34 c0       	rjmp	.+104    	; 0xad9e <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    ad36:	8c ef       	ldi	r24, 0xFC	; 252
    ad38:	8d 0d       	add	r24, r13
    ad3a:	82 30       	cpi	r24, 0x02	; 2
    ad3c:	b0 f5       	brcc	.+108    	; 0xadaa <collides_directional_tile+0x126>
    ad3e:	cf ef       	ldi	r28, 0xFF	; 255
    ad40:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    ad42:	c4 0f       	add	r28, r20
    ad44:	87 e0       	ldi	r24, 0x07	; 7
    ad46:	78 2e       	mov	r7, r24
    ad48:	71 0e       	add	r7, r17
    ad4a:	97 e0       	ldi	r25, 0x07	; 7
    ad4c:	89 2e       	mov	r8, r25
    ad4e:	8f 0c       	add	r8, r15
    ad50:	ac 2e       	mov	r10, r28
    ad52:	cb 2c       	mov	r12, r11
    ad54:	e4 2e       	mov	r14, r20
    ad56:	0b 2d       	mov	r16, r11
    ad58:	27 2d       	mov	r18, r7
    ad5a:	48 2d       	mov	r20, r8
    ad5c:	61 2f       	mov	r22, r17
    ad5e:	8f 2d       	mov	r24, r15
    ad60:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ad64:	81 11       	cpse	r24, r1
    ad66:	23 c0       	rjmp	.+70     	; 0xadae <collides_directional_tile+0x12a>
    ad68:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    ad6a:	db 0d       	add	r29, r11
    ad6c:	a9 2c       	mov	r10, r9
    ad6e:	cd 2e       	mov	r12, r29
    ad70:	27 2d       	mov	r18, r7
    ad72:	48 2d       	mov	r20, r8
    ad74:	61 2f       	mov	r22, r17
    ad76:	8f 2d       	mov	r24, r15
    ad78:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ad7c:	81 11       	cpse	r24, r1
    ad7e:	17 c0       	rjmp	.+46     	; 0xadae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    ad80:	ac 2e       	mov	r10, r28
    ad82:	0d 2f       	mov	r16, r29
    ad84:	27 2d       	mov	r18, r7
    ad86:	48 2d       	mov	r20, r8
    ad88:	61 2f       	mov	r22, r17
    ad8a:	8f 2d       	mov	r24, r15
    ad8c:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ad90:	81 11       	cpse	r24, r1
    ad92:	0d c0       	rjmp	.+26     	; 0xadae <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    ad94:	ec 2e       	mov	r14, r28
    ad96:	0b 2d       	mov	r16, r11
    ad98:	27 2d       	mov	r18, r7
    ad9a:	48 2d       	mov	r20, r8
    ad9c:	61 2f       	mov	r22, r17
    ad9e:	8f 2d       	mov	r24, r15
    ada0:	0e 94 71 4f 	call	0x9ee2	; 0x9ee2 <LBLineIntersect>
    ada4:	81 11       	cpse	r24, r1
    ada6:	03 c0       	rjmp	.+6      	; 0xadae <collides_directional_tile+0x12a>
    ada8:	03 c0       	rjmp	.+6      	; 0xadb0 <collides_directional_tile+0x12c>
	}
	
	return 0;
    adaa:	80 e0       	ldi	r24, 0x00	; 0
    adac:	01 c0       	rjmp	.+2      	; 0xadb0 <collides_directional_tile+0x12c>
    adae:	8d 2d       	mov	r24, r13
}
    adb0:	df 91       	pop	r29
    adb2:	cf 91       	pop	r28
    adb4:	1f 91       	pop	r17
    adb6:	0f 91       	pop	r16
    adb8:	ff 90       	pop	r15
    adba:	ef 90       	pop	r14
    adbc:	df 90       	pop	r13
    adbe:	cf 90       	pop	r12
    adc0:	bf 90       	pop	r11
    adc2:	af 90       	pop	r10
    adc4:	9f 90       	pop	r9
    adc6:	8f 90       	pop	r8
    adc8:	7f 90       	pop	r7
    adca:	08 95       	ret

0000adcc <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    adcc:	8f 92       	push	r8
    adce:	9f 92       	push	r9
    add0:	af 92       	push	r10
    add2:	cf 92       	push	r12
    add4:	ef 92       	push	r14
    add6:	0f 93       	push	r16
    add8:	1f 93       	push	r17
    adda:	cf 93       	push	r28
    addc:	df 93       	push	r29
    adde:	4c 01       	movw	r8, r24
    ade0:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    ade2:	20 e0       	ldi	r18, 0x00	; 0
    ade4:	30 e0       	ldi	r19, 0x00	; 0
    ade6:	40 e0       	ldi	r20, 0x00	; 0
    ade8:	50 e4       	ldi	r21, 0x40	; 64
    adea:	6f 81       	ldd	r22, Y+7	; 0x07
    adec:	78 85       	ldd	r23, Y+8	; 0x08
    adee:	89 85       	ldd	r24, Y+9	; 0x09
    adf0:	9a 85       	ldd	r25, Y+10	; 0x0a
    adf2:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    adf6:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    adfa:	e6 2e       	mov	r14, r22
    adfc:	20 e0       	ldi	r18, 0x00	; 0
    adfe:	30 e0       	ldi	r19, 0x00	; 0
    ae00:	40 e0       	ldi	r20, 0x00	; 0
    ae02:	50 e4       	ldi	r21, 0x40	; 64
    ae04:	6b 81       	ldd	r22, Y+3	; 0x03
    ae06:	7c 81       	ldd	r23, Y+4	; 0x04
    ae08:	8d 81       	ldd	r24, Y+5	; 0x05
    ae0a:	9e 81       	ldd	r25, Y+6	; 0x06
    ae0c:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    ae10:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ae14:	06 2f       	mov	r16, r22
    ae16:	20 e0       	ldi	r18, 0x00	; 0
    ae18:	30 e0       	ldi	r19, 0x00	; 0
    ae1a:	40 e8       	ldi	r20, 0x80	; 128
    ae1c:	5f e3       	ldi	r21, 0x3F	; 63
    ae1e:	f4 01       	movw	r30, r8
    ae20:	67 81       	ldd	r22, Z+7	; 0x07
    ae22:	70 85       	ldd	r23, Z+8	; 0x08
    ae24:	81 85       	ldd	r24, Z+9	; 0x09
    ae26:	92 85       	ldd	r25, Z+10	; 0x0a
    ae28:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    ae2c:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ae30:	16 2f       	mov	r17, r22
    ae32:	20 e0       	ldi	r18, 0x00	; 0
    ae34:	30 e0       	ldi	r19, 0x00	; 0
    ae36:	40 e8       	ldi	r20, 0x80	; 128
    ae38:	5f e3       	ldi	r21, 0x3F	; 63
    ae3a:	f4 01       	movw	r30, r8
    ae3c:	63 81       	ldd	r22, Z+3	; 0x03
    ae3e:	74 81       	ldd	r23, Z+4	; 0x04
    ae40:	85 81       	ldd	r24, Z+5	; 0x05
    ae42:	96 81       	ldd	r25, Z+6	; 0x06
    ae44:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    ae48:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    ae4c:	86 2f       	mov	r24, r22
    ae4e:	94 e0       	ldi	r25, 0x04	; 4
    ae50:	a9 2e       	mov	r10, r25
    ae52:	24 e0       	ldi	r18, 0x04	; 4
    ae54:	c2 2e       	mov	r12, r18
    ae56:	2e e0       	ldi	r18, 0x0E	; 14
    ae58:	4e e0       	ldi	r20, 0x0E	; 14
    ae5a:	61 2f       	mov	r22, r17
    ae5c:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    ae60:	88 23       	and	r24, r24
    ae62:	41 f0       	breq	.+16     	; 0xae74 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    ae64:	f4 01       	movw	r30, r8
    ae66:	86 89       	ldd	r24, Z+22	; 0x16
    ae68:	88 37       	cpi	r24, 0x78	; 120
    ae6a:	21 f4       	brne	.+8      	; 0xae74 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    ae6c:	81 e0       	ldi	r24, 0x01	; 1
    ae6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    ae70:	99 30       	cpi	r25, 0x09	; 9
    ae72:	08 f4       	brcc	.+2      	; 0xae76 <player_shot+0xaa>
    ae74:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    ae76:	df 91       	pop	r29
    ae78:	cf 91       	pop	r28
    ae7a:	1f 91       	pop	r17
    ae7c:	0f 91       	pop	r16
    ae7e:	ef 90       	pop	r14
    ae80:	cf 90       	pop	r12
    ae82:	af 90       	pop	r10
    ae84:	9f 90       	pop	r9
    ae86:	8f 90       	pop	r8
    ae88:	08 95       	ret

0000ae8a <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    ae8a:	af 92       	push	r10
    ae8c:	cf 92       	push	r12
    ae8e:	ef 92       	push	r14
    ae90:	0f 93       	push	r16
    ae92:	1f 93       	push	r17
    ae94:	cf 93       	push	r28
    ae96:	df 93       	push	r29
    ae98:	ec 01       	movw	r28, r24
    ae9a:	8b 01       	movw	r16, r22
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
    ae9c:	20 e0       	ldi	r18, 0x00	; 0
    ae9e:	30 e0       	ldi	r19, 0x00	; 0
    aea0:	40 e0       	ldi	r20, 0x00	; 0
    aea2:	50 e4       	ldi	r21, 0x40	; 64
    aea4:	fb 01       	movw	r30, r22
    aea6:	67 81       	ldd	r22, Z+7	; 0x07
    aea8:	70 85       	ldd	r23, Z+8	; 0x08
    aeaa:	81 85       	ldd	r24, Z+9	; 0x09
    aeac:	92 85       	ldd	r25, Z+10	; 0x0a
    aeae:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    aeb2:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    aeb6:	e6 2e       	mov	r14, r22
    aeb8:	20 e0       	ldi	r18, 0x00	; 0
    aeba:	30 e0       	ldi	r19, 0x00	; 0
    aebc:	40 e0       	ldi	r20, 0x00	; 0
    aebe:	50 e4       	ldi	r21, 0x40	; 64
    aec0:	f8 01       	movw	r30, r16
    aec2:	63 81       	ldd	r22, Z+3	; 0x03
    aec4:	74 81       	ldd	r23, Z+4	; 0x04
    aec6:	85 81       	ldd	r24, Z+5	; 0x05
    aec8:	96 81       	ldd	r25, Z+6	; 0x06
    aeca:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    aece:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    aed2:	06 2f       	mov	r16, r22
    aed4:	6f 81       	ldd	r22, Y+7	; 0x07
    aed6:	78 85       	ldd	r23, Y+8	; 0x08
    aed8:	89 85       	ldd	r24, Y+9	; 0x09
    aeda:	9a 85       	ldd	r25, Y+10	; 0x0a
    aedc:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    aee0:	16 2f       	mov	r17, r22
    aee2:	6b 81       	ldd	r22, Y+3	; 0x03
    aee4:	7c 81       	ldd	r23, Y+4	; 0x04
    aee6:	8d 81       	ldd	r24, Y+5	; 0x05
    aee8:	9e 81       	ldd	r25, Y+6	; 0x06
    aeea:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    aeee:	86 2f       	mov	r24, r22
    aef0:	94 e0       	ldi	r25, 0x04	; 4
    aef2:	a9 2e       	mov	r10, r25
    aef4:	24 e0       	ldi	r18, 0x04	; 4
    aef6:	c2 2e       	mov	r12, r18
    aef8:	28 e0       	ldi	r18, 0x08	; 8
    aefa:	48 e0       	ldi	r20, 0x08	; 8
    aefc:	61 2f       	mov	r22, r17
    aefe:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
    af02:	88 23       	and	r24, r24
    af04:	39 f0       	breq	.+14     	; 0xaf14 <turret_shot+0x8a>
    af06:	91 e0       	ldi	r25, 0x01	; 1
    af08:	8b 85       	ldd	r24, Y+11	; 0x0b
    af0a:	81 11       	cpse	r24, r1
    af0c:	01 c0       	rjmp	.+2      	; 0xaf10 <turret_shot+0x86>
    af0e:	90 e0       	ldi	r25, 0x00	; 0
    af10:	89 2f       	mov	r24, r25
    af12:	01 c0       	rjmp	.+2      	; 0xaf16 <turret_shot+0x8c>
    af14:	80 e0       	ldi	r24, 0x00	; 0
}
    af16:	df 91       	pop	r29
    af18:	cf 91       	pop	r28
    af1a:	1f 91       	pop	r17
    af1c:	0f 91       	pop	r16
    af1e:	ef 90       	pop	r14
    af20:	cf 90       	pop	r12
    af22:	af 90       	pop	r10
    af24:	08 95       	ret

0000af26 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    af26:	cf 92       	push	r12
    af28:	df 92       	push	r13
    af2a:	ef 92       	push	r14
    af2c:	ff 92       	push	r15
    af2e:	cf 93       	push	r28
    af30:	df 93       	push	r29
    af32:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    af34:	cb 80       	ldd	r12, Y+3	; 0x03
    af36:	dc 80       	ldd	r13, Y+4	; 0x04
    af38:	ed 80       	ldd	r14, Y+5	; 0x05
    af3a:	fe 80       	ldd	r15, Y+6	; 0x06
    af3c:	20 e0       	ldi	r18, 0x00	; 0
    af3e:	30 e0       	ldi	r19, 0x00	; 0
    af40:	a9 01       	movw	r20, r18
    af42:	c7 01       	movw	r24, r14
    af44:	b6 01       	movw	r22, r12
    af46:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    af4a:	87 fd       	sbrc	r24, 7
    af4c:	31 c0       	rjmp	.+98     	; 0xafb0 <collision_detect_boundries+0x8a>
    af4e:	20 e0       	ldi	r18, 0x00	; 0
    af50:	30 e0       	ldi	r19, 0x00	; 0
    af52:	40 e0       	ldi	r20, 0x00	; 0
    af54:	51 e4       	ldi	r21, 0x41	; 65
    af56:	c7 01       	movw	r24, r14
    af58:	b6 01       	movw	r22, r12
    af5a:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    af5e:	20 e0       	ldi	r18, 0x00	; 0
    af60:	30 e0       	ldi	r19, 0x00	; 0
    af62:	40 e7       	ldi	r20, 0x70	; 112
    af64:	53 e4       	ldi	r21, 0x43	; 67
    af66:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    af6a:	18 16       	cp	r1, r24
    af6c:	0c f1       	brlt	.+66     	; 0xafb0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    af6e:	cf 80       	ldd	r12, Y+7	; 0x07
    af70:	d8 84       	ldd	r13, Y+8	; 0x08
    af72:	e9 84       	ldd	r14, Y+9	; 0x09
    af74:	fa 84       	ldd	r15, Y+10	; 0x0a
	return LBCollides(t->shared.x,t->shared.y,8,8,shot->shared.x+2,shot->shared.y+2,4,4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    af76:	20 e0       	ldi	r18, 0x00	; 0
    af78:	30 e0       	ldi	r19, 0x00	; 0
    af7a:	40 ec       	ldi	r20, 0xC0	; 192
    af7c:	51 e4       	ldi	r21, 0x41	; 65
    af7e:	c7 01       	movw	r24, r14
    af80:	b6 01       	movw	r22, r12
    af82:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    af86:	87 fd       	sbrc	r24, 7
    af88:	13 c0       	rjmp	.+38     	; 0xafb0 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    af8a:	20 e0       	ldi	r18, 0x00	; 0
    af8c:	30 e0       	ldi	r19, 0x00	; 0
    af8e:	40 e0       	ldi	r20, 0x00	; 0
    af90:	51 e4       	ldi	r21, 0x41	; 65
    af92:	c7 01       	movw	r24, r14
    af94:	b6 01       	movw	r22, r12
    af96:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    af9a:	c1 e0       	ldi	r28, 0x01	; 1
    af9c:	20 e0       	ldi	r18, 0x00	; 0
    af9e:	30 e0       	ldi	r19, 0x00	; 0
    afa0:	40 e6       	ldi	r20, 0x60	; 96
    afa2:	53 e4       	ldi	r21, 0x43	; 67
    afa4:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    afa8:	18 16       	cp	r1, r24
    afaa:	1c f0       	brlt	.+6      	; 0xafb2 <collision_detect_boundries+0x8c>
    afac:	c0 e0       	ldi	r28, 0x00	; 0
    afae:	01 c0       	rjmp	.+2      	; 0xafb2 <collision_detect_boundries+0x8c>
	{
		return 1;
    afb0:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    afb2:	8c 2f       	mov	r24, r28
    afb4:	df 91       	pop	r29
    afb6:	cf 91       	pop	r28
    afb8:	ff 90       	pop	r15
    afba:	ef 90       	pop	r14
    afbc:	df 90       	pop	r13
    afbe:	cf 90       	pop	r12
    afc0:	08 95       	ret

0000afc2 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    afc2:	1f 93       	push	r17
    afc4:	cf 93       	push	r28
    afc6:	df 93       	push	r29
    afc8:	9c 01       	movw	r18, r24
    afca:	fb 01       	movw	r30, r22
    afcc:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    afce:	6e e1       	ldi	r22, 0x1E	; 30
    afd0:	70 e0       	ldi	r23, 0x00	; 0
    afd2:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    afd6:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    afd8:	63 e0       	ldi	r22, 0x03	; 3
    afda:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    afdc:	e9 01       	movw	r28, r18
    afde:	c6 5a       	subi	r28, 0xA6	; 166
    afe0:	d3 4f       	sbci	r29, 0xF3	; 243
    afe2:	49 81       	ldd	r20, Y+1	; 0x01
    afe4:	44 23       	and	r20, r20
    afe6:	71 f0       	breq	.+28     	; 0xb004 <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    afe8:	e9 01       	movw	r28, r18
    afea:	c5 5a       	subi	r28, 0xA5	; 165
    afec:	d3 4f       	sbci	r29, 0xF3	; 243
    afee:	49 81       	ldd	r20, Y+1	; 0x01
    aff0:	44 23       	and	r20, r20
    aff2:	91 f0       	breq	.+36     	; 0xb018 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aff4:	e9 01       	movw	r28, r18
    aff6:	c8 58       	subi	r28, 0x88	; 136
    aff8:	d3 4f       	sbci	r29, 0xF3	; 243
    affa:	49 81       	ldd	r20, Y+1	; 0x01
    affc:	41 11       	cpse	r20, r1
    affe:	04 c0       	rjmp	.+8      	; 0xb008 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b000:	64 e0       	ldi	r22, 0x04	; 4
    b002:	69 0f       	add	r22, r25
    b004:	af 01       	movw	r20, r30
    b006:	0a c0       	rjmp	.+20     	; 0xb01c <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b008:	e9 01       	movw	r28, r18
    b00a:	c7 58       	subi	r28, 0x87	; 135
    b00c:	d3 4f       	sbci	r29, 0xF3	; 243
    b00e:	29 81       	ldd	r18, Y+1	; 0x01
    b010:	21 11       	cpse	r18, r1
    b012:	07 c0       	rjmp	.+14     	; 0xb022 <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b014:	64 e0       	ldi	r22, 0x04	; 4
    b016:	69 0f       	add	r22, r25
    b018:	af 01       	movw	r20, r30
    b01a:	8f 5f       	subi	r24, 0xFF	; 255
    b01c:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b020:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b022:	df 91       	pop	r29
    b024:	cf 91       	pop	r28
    b026:	1f 91       	pop	r17
    b028:	08 95       	ret

0000b02a <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b02a:	ff 92       	push	r15
    b02c:	0f 93       	push	r16
    b02e:	1f 93       	push	r17
    b030:	cf 93       	push	r28
    b032:	df 93       	push	r29
    b034:	ec 01       	movw	r28, r24
    b036:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b038:	20 e0       	ldi	r18, 0x00	; 0
    b03a:	30 e0       	ldi	r19, 0x00	; 0
    b03c:	40 e0       	ldi	r20, 0x00	; 0
    b03e:	5e e3       	ldi	r21, 0x3E	; 62
    b040:	6f 81       	ldd	r22, Y+7	; 0x07
    b042:	78 85       	ldd	r23, Y+8	; 0x08
    b044:	89 85       	ldd	r24, Y+9	; 0x09
    b046:	9a 85       	ldd	r25, Y+10	; 0x0a
    b048:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b04c:	20 e0       	ldi	r18, 0x00	; 0
    b04e:	30 e0       	ldi	r19, 0x00	; 0
    b050:	40 e4       	ldi	r20, 0x40	; 64
    b052:	50 e4       	ldi	r21, 0x40	; 64
    b054:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b058:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	int tile_index = (y * 30) + x;
    b05c:	8e e1       	ldi	r24, 0x1E	; 30
    b05e:	68 9f       	mul	r22, r24
    b060:	80 01       	movw	r16, r0
    b062:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    b064:	20 e0       	ldi	r18, 0x00	; 0
    b066:	30 e0       	ldi	r19, 0x00	; 0
    b068:	40 e0       	ldi	r20, 0x00	; 0
    b06a:	5e e3       	ldi	r21, 0x3E	; 62
    b06c:	6b 81       	ldd	r22, Y+3	; 0x03
    b06e:	7c 81       	ldd	r23, Y+4	; 0x04
    b070:	8d 81       	ldd	r24, Y+5	; 0x05
    b072:	9e 81       	ldd	r25, Y+6	; 0x06
    b074:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b078:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    b07c:	06 0f       	add	r16, r22
    b07e:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    b080:	89 8d       	ldd	r24, Y+25	; 0x19
    b082:	88 23       	and	r24, r24
    b084:	79 f0       	breq	.+30     	; 0xb0a4 <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    b086:	40 e0       	ldi	r20, 0x00	; 0
    b088:	50 e0       	ldi	r21, 0x00	; 0
    b08a:	61 e0       	ldi	r22, 0x01	; 1
    b08c:	8a e0       	ldi	r24, 0x0A	; 10
    b08e:	8f 0d       	add	r24, r15
    b090:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    b094:	47 e0       	ldi	r20, 0x07	; 7
    b096:	65 e3       	ldi	r22, 0x35	; 53
    b098:	76 e7       	ldi	r23, 0x76	; 118
    b09a:	c8 01       	movw	r24, r16
    b09c:	0e 94 e1 57 	call	0xafc2	; 0xafc2 <drop_item>
		player->max_speed = MAX_SPEED;
    b0a0:	82 e3       	ldi	r24, 0x32	; 50
    b0a2:	8f 8b       	std	Y+23, r24	; 0x17
	}
	if (player->has_rocket)
    b0a4:	88 8d       	ldd	r24, Y+24	; 0x18
    b0a6:	88 23       	and	r24, r24
    b0a8:	69 f0       	breq	.+26     	; 0xb0c4 <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    b0aa:	40 e0       	ldi	r20, 0x00	; 0
    b0ac:	50 e0       	ldi	r21, 0x00	; 0
    b0ae:	61 e0       	ldi	r22, 0x01	; 1
    b0b0:	8b e0       	ldi	r24, 0x0B	; 11
    b0b2:	8f 0d       	add	r24, r15
    b0b4:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    b0b8:	49 e0       	ldi	r20, 0x09	; 9
    b0ba:	6f e2       	ldi	r22, 0x2F	; 47
    b0bc:	76 e7       	ldi	r23, 0x76	; 118
    b0be:	c8 01       	movw	r24, r16
    b0c0:	0e 94 e1 57 	call	0xafc2	; 0xafc2 <drop_item>
	}
	player->has_over_speed = false;
    b0c4:	19 8e       	std	Y+25, r1	; 0x19
	player->has_rocket = false;
    b0c6:	18 8e       	std	Y+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    b0c8:	8d 89       	ldd	r24, Y+21	; 0x15
    b0ca:	81 60       	ori	r24, 0x01	; 1
    b0cc:	8d 8b       	std	Y+21, r24	; 0x15
}
    b0ce:	df 91       	pop	r29
    b0d0:	cf 91       	pop	r28
    b0d2:	1f 91       	pop	r17
    b0d4:	0f 91       	pop	r16
    b0d6:	ff 90       	pop	r15
    b0d8:	08 95       	ret

0000b0da <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    b0da:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    b0dc:	70 e0       	ldi	r23, 0x00	; 0
    b0de:	8e e1       	ldi	r24, 0x1E	; 30
    b0e0:	48 9f       	mul	r20, r24
    b0e2:	60 0d       	add	r22, r0
    b0e4:	71 1d       	adc	r23, r1
    b0e6:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b0e8:	21 11       	cpse	r18, r1
    b0ea:	05 c0       	rjmp	.+10     	; 0xb0f6 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    b0ec:	71 83       	std	Z+1, r23	; 0x01
    b0ee:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b0f0:	6f 5f       	subi	r22, 0xFF	; 255
    b0f2:	7f 4f       	sbci	r23, 0xFF	; 255
    b0f4:	0c c0       	rjmp	.+24     	; 0xb10e <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    b0f6:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    b0f8:	21 30       	cpi	r18, 0x01	; 1
    b0fa:	11 f4       	brne	.+4      	; 0xb100 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    b0fc:	01 96       	adiw	r24, 0x01	; 1
    b0fe:	03 c0       	rjmp	.+6      	; 0xb106 <get_interesting_tile_indexes_shot+0x2c>
    b100:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    b102:	22 30       	cpi	r18, 0x02	; 2
    b104:	39 f4       	brne	.+14     	; 0xb114 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    b106:	91 83       	std	Z+1, r25	; 0x01
    b108:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b10a:	61 5e       	subi	r22, 0xE1	; 225
    b10c:	7f 4f       	sbci	r23, 0xFF	; 255
    b10e:	73 83       	std	Z+3, r23	; 0x03
    b110:	62 83       	std	Z+2, r22	; 0x02
    b112:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b114:	71 83       	std	Z+1, r23	; 0x01
    b116:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b118:	93 83       	std	Z+3, r25	; 0x03
    b11a:	82 83       	std	Z+2, r24	; 0x02
    b11c:	08 95       	ret

0000b11e <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    b11e:	ef 92       	push	r14
    b120:	ff 92       	push	r15
    b122:	0f 93       	push	r16
    b124:	1f 93       	push	r17
    b126:	cf 93       	push	r28
    b128:	df 93       	push	r29
    b12a:	ec 01       	movw	r28, r24
    b12c:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    b12e:	8e e1       	ldi	r24, 0x1E	; 30
    b130:	e8 2e       	mov	r14, r24
    b132:	f1 2c       	mov	r15, r1
    b134:	cb 01       	movw	r24, r22
    b136:	b7 01       	movw	r22, r14
    b138:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b13c:	6d 5f       	subi	r22, 0xFD	; 253
    b13e:	40 e0       	ldi	r20, 0x00	; 0
    b140:	50 e0       	ldi	r21, 0x00	; 0
    b142:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    b146:	88 81       	ld	r24, Y
    b148:	fe 01       	movw	r30, r28
    b14a:	9e e0       	ldi	r25, 0x0E	; 14
    b14c:	89 9f       	mul	r24, r25
    b14e:	e0 0d       	add	r30, r0
    b150:	f1 1d       	adc	r31, r1
    b152:	11 24       	eor	r1, r1
    b154:	85 85       	ldd	r24, Z+13	; 0x0d
    b156:	96 85       	ldd	r25, Z+14	; 0x0e
    b158:	00 97       	sbiw	r24, 0x00	; 0
    b15a:	41 f0       	breq	.+16     	; 0xb16c <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    b15c:	b7 01       	movw	r22, r14
    b15e:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b162:	6d 5f       	subi	r22, 0xFD	; 253
    b164:	40 e0       	ldi	r20, 0x00	; 0
    b166:	50 e0       	ldi	r21, 0x00	; 0
    b168:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    b16c:	88 81       	ld	r24, Y
    b16e:	fe 01       	movw	r30, r28
    b170:	9e e0       	ldi	r25, 0x0E	; 14
    b172:	89 9f       	mul	r24, r25
    b174:	e0 0d       	add	r30, r0
    b176:	f1 1d       	adc	r31, r1
    b178:	11 24       	eor	r1, r1
    b17a:	16 87       	std	Z+14, r17	; 0x0e
    b17c:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    b17e:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    b180:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    b182:	82 30       	cpi	r24, 0x02	; 2
    b184:	11 f0       	breq	.+4      	; 0xb18a <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    b186:	88 83       	st	Y, r24
    b188:	01 c0       	rjmp	.+2      	; 0xb18c <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    b18a:	18 82       	st	Y, r1
	}
}
    b18c:	df 91       	pop	r29
    b18e:	cf 91       	pop	r28
    b190:	1f 91       	pop	r17
    b192:	0f 91       	pop	r16
    b194:	ff 90       	pop	r15
    b196:	ef 90       	pop	r14
    b198:	08 95       	ret

0000b19a <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    b19a:	fb 01       	movw	r30, r22
	switch (tile_type)
    b19c:	84 30       	cpi	r24, 0x04	; 4
    b19e:	71 f0       	breq	.+28     	; 0xb1bc <richochet+0x22>
    b1a0:	18 f4       	brcc	.+6      	; 0xb1a8 <richochet+0xe>
    b1a2:	83 30       	cpi	r24, 0x03	; 3
    b1a4:	31 f0       	breq	.+12     	; 0xb1b2 <richochet+0x18>
    b1a6:	08 95       	ret
    b1a8:	85 30       	cpi	r24, 0x05	; 5
    b1aa:	99 f0       	breq	.+38     	; 0xb1d2 <richochet+0x38>
    b1ac:	86 30       	cpi	r24, 0x06	; 6
    b1ae:	59 f0       	breq	.+22     	; 0xb1c6 <richochet+0x2c>
    b1b0:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b1b2:	80 81       	ld	r24, Z
    b1b4:	8d 7f       	andi	r24, 0xFD	; 253
    b1b6:	29 f4       	brne	.+10     	; 0xb1c2 <richochet+0x28>
				sprite->direction = D_RIGHT;
    b1b8:	81 e0       	ldi	r24, 0x01	; 1
    b1ba:	09 c0       	rjmp	.+18     	; 0xb1ce <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b1bc:	80 81       	ld	r24, Z
    b1be:	8d 7f       	andi	r24, 0xFD	; 253
    b1c0:	29 f0       	breq	.+10     	; 0xb1cc <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    b1c2:	82 e0       	ldi	r24, 0x02	; 2
    b1c4:	04 c0       	rjmp	.+8      	; 0xb1ce <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b1c6:	80 81       	ld	r24, Z
    b1c8:	8d 7f       	andi	r24, 0xFD	; 253
    b1ca:	31 f4       	brne	.+12     	; 0xb1d8 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    b1cc:	83 e0       	ldi	r24, 0x03	; 3
    b1ce:	80 83       	st	Z, r24
    b1d0:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b1d2:	80 81       	ld	r24, Z
    b1d4:	8d 7f       	andi	r24, 0xFD	; 253
    b1d6:	81 f3       	breq	.-32     	; 0xb1b8 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    b1d8:	10 82       	st	Z, r1
    b1da:	08 95       	ret

0000b1dc <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    b1dc:	2f 92       	push	r2
    b1de:	3f 92       	push	r3
    b1e0:	4f 92       	push	r4
    b1e2:	5f 92       	push	r5
    b1e4:	6f 92       	push	r6
    b1e6:	7f 92       	push	r7
    b1e8:	8f 92       	push	r8
    b1ea:	9f 92       	push	r9
    b1ec:	af 92       	push	r10
    b1ee:	bf 92       	push	r11
    b1f0:	cf 92       	push	r12
    b1f2:	df 92       	push	r13
    b1f4:	ef 92       	push	r14
    b1f6:	ff 92       	push	r15
    b1f8:	0f 93       	push	r16
    b1fa:	1f 93       	push	r17
    b1fc:	cf 93       	push	r28
    b1fe:	df 93       	push	r29
    b200:	00 d0       	rcall	.+0      	; 0xb202 <collision_detect_shot+0x26>
    b202:	00 d0       	rcall	.+0      	; 0xb204 <collision_detect_shot+0x28>
    b204:	1f 92       	push	r1
    b206:	cd b7       	in	r28, 0x3d	; 61
    b208:	de b7       	in	r29, 0x3e	; 62
    b20a:	3c 01       	movw	r6, r24
    b20c:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    b20e:	1a 82       	std	Y+2, r1	; 0x02
    b210:	19 82       	std	Y+1, r1	; 0x01
    b212:	1c 82       	std	Y+4, r1	; 0x04
    b214:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    b216:	20 e0       	ldi	r18, 0x00	; 0
    b218:	30 e0       	ldi	r19, 0x00	; 0
    b21a:	40 e0       	ldi	r20, 0x00	; 0
    b21c:	5e e3       	ldi	r21, 0x3E	; 62
    b21e:	db 01       	movw	r26, r22
    b220:	17 96       	adiw	r26, 0x07	; 7
    b222:	6d 91       	ld	r22, X+
    b224:	7d 91       	ld	r23, X+
    b226:	8d 91       	ld	r24, X+
    b228:	9c 91       	ld	r25, X
    b22a:	1a 97       	sbiw	r26, 0x0a	; 10
    b22c:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b230:	20 e0       	ldi	r18, 0x00	; 0
    b232:	30 e0       	ldi	r19, 0x00	; 0
    b234:	40 e4       	ldi	r20, 0x40	; 64
    b236:	50 e4       	ldi	r21, 0x40	; 64
    b238:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b23c:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b240:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    b242:	20 e0       	ldi	r18, 0x00	; 0
    b244:	30 e0       	ldi	r19, 0x00	; 0
    b246:	40 e0       	ldi	r20, 0x00	; 0
    b248:	5e e3       	ldi	r21, 0x3E	; 62
    b24a:	f4 01       	movw	r30, r8
    b24c:	63 81       	ldd	r22, Z+3	; 0x03
    b24e:	74 81       	ldd	r23, Z+4	; 0x04
    b250:	85 81       	ldd	r24, Z+5	; 0x05
    b252:	96 81       	ldd	r25, Z+6	; 0x06
    b254:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b258:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    b25c:	d4 01       	movw	r26, r8
    b25e:	2c 91       	ld	r18, X
    b260:	41 2f       	mov	r20, r17
    b262:	ce 01       	movw	r24, r28
    b264:	01 96       	adiw	r24, 0x01	; 1
    b266:	0e 94 6d 58 	call	0xb0da	; 0xb0da <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    b26a:	c4 01       	movw	r24, r8
    b26c:	0e 94 93 57 	call	0xaf26	; 0xaf26 <collision_detect_boundries>
    b270:	81 11       	cpse	r24, r1
    b272:	6f c1       	rjmp	.+734    	; 0xb552 <collision_detect_shot+0x376>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    b274:	b4 01       	movw	r22, r8
    b276:	8a ed       	ldi	r24, 0xDA	; 218
    b278:	9b e0       	ldi	r25, 0x0B	; 11
    b27a:	0e 94 e6 56 	call	0xadcc	; 0xadcc <player_shot>
    b27e:	88 23       	and	r24, r24
    b280:	b9 f0       	breq	.+46     	; 0xb2b0 <collision_detect_shot+0xd4>
    b282:	80 91 ef 0b 	lds	r24, 0x0BEF
    b286:	80 fd       	sbrc	r24, 0
    b288:	13 c0       	rjmp	.+38     	; 0xb2b0 <collision_detect_shot+0xd4>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    b28a:	80 91 59 0f 	lds	r24, 0x0F59
    b28e:	8f 5f       	subi	r24, 0xFF	; 255
    b290:	80 93 59 0f 	sts	0x0F59, r24
		player2.score++;
    b294:	80 91 58 0f 	lds	r24, 0x0F58
    b298:	8f 5f       	subi	r24, 0xFF	; 255
    b29a:	80 93 58 0f 	sts	0x0F58, r24
		render_score(&player2, 15);
    b29e:	6f e0       	ldi	r22, 0x0F	; 15
    b2a0:	89 e4       	ldi	r24, 0x49	; 73
    b2a2:	9f e0       	ldi	r25, 0x0F	; 15
    b2a4:	0e 94 21 54 	call	0xa842	; 0xa842 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    b2a8:	0a ed       	ldi	r16, 0xDA	; 218
    b2aa:	1b e0       	ldi	r17, 0x0B	; 11
		hud_x = 0;
    b2ac:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    b2ae:	4e c0       	rjmp	.+156    	; 0xb34c <collision_detect_shot+0x170>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    b2b0:	b4 01       	movw	r22, r8
    b2b2:	89 e4       	ldi	r24, 0x49	; 73
    b2b4:	9f e0       	ldi	r25, 0x0F	; 15
    b2b6:	0e 94 e6 56 	call	0xadcc	; 0xadcc <player_shot>
    b2ba:	90 91 ac 0b 	lds	r25, 0x0BAC
    b2be:	88 23       	and	r24, r24
    b2c0:	d1 f0       	breq	.+52     	; 0xb2f6 <collision_detect_shot+0x11a>
    b2c2:	80 91 5e 0f 	lds	r24, 0x0F5E
    b2c6:	80 fd       	sbrc	r24, 0
    b2c8:	16 c0       	rjmp	.+44     	; 0xb2f6 <collision_detect_shot+0x11a>
    b2ca:	91 11       	cpse	r25, r1
    b2cc:	14 c0       	rjmp	.+40     	; 0xb2f6 <collision_detect_shot+0x11a>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    b2ce:	80 91 ea 0b 	lds	r24, 0x0BEA
    b2d2:	8f 5f       	subi	r24, 0xFF	; 255
    b2d4:	80 93 ea 0b 	sts	0x0BEA, r24
		player1.score++;
    b2d8:	80 91 e9 0b 	lds	r24, 0x0BE9
    b2dc:	8f 5f       	subi	r24, 0xFF	; 255
    b2de:	80 93 e9 0b 	sts	0x0BE9, r24
		render_score(&player1, 0);
    b2e2:	60 e0       	ldi	r22, 0x00	; 0
    b2e4:	8a ed       	ldi	r24, 0xDA	; 218
    b2e6:	9b e0       	ldi	r25, 0x0B	; 11
    b2e8:	0e 94 21 54 	call	0xa842	; 0xa842 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    b2ec:	09 e4       	ldi	r16, 0x49	; 73
    b2ee:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    b2f0:	6f e0       	ldi	r22, 0x0F	; 15
    b2f2:	f6 2e       	mov	r15, r22
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    b2f4:	2b c0       	rjmp	.+86     	; 0xb34c <collision_detect_shot+0x170>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    b2f6:	94 30       	cpi	r25, 0x04	; 4
    b2f8:	61 f5       	brne	.+88     	; 0xb352 <collision_detect_shot+0x176>
	{
		if (turret_shot(&turret1, shot))
    b2fa:	b4 01       	movw	r22, r8
    b2fc:	82 e1       	ldi	r24, 0x12	; 18
    b2fe:	90 e1       	ldi	r25, 0x10	; 16
    b300:	0e 94 45 57 	call	0xae8a	; 0xae8a <turret_shot>
    b304:	88 23       	and	r24, r24
    b306:	41 f0       	breq	.+16     	; 0xb318 <collision_detect_shot+0x13c>
		{
			turret1.lives--;
    b308:	80 91 1d 10 	lds	r24, 0x101D
    b30c:	81 50       	subi	r24, 0x01	; 1
    b30e:	80 93 1d 10 	sts	0x101D, r24
			init_shot_state(shot, shot->shot_type);
    b312:	f4 01       	movw	r30, r8
    b314:	63 85       	ldd	r22, Z+11	; 0x0b
    b316:	0f c0       	rjmp	.+30     	; 0xb336 <collision_detect_shot+0x15a>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    b318:	b4 01       	movw	r22, r8
    b31a:	8e ed       	ldi	r24, 0xDE	; 222
    b31c:	9f e0       	ldi	r25, 0x0F	; 15
    b31e:	0e 94 45 57 	call	0xae8a	; 0xae8a <turret_shot>
    b322:	88 23       	and	r24, r24
    b324:	b1 f0       	breq	.+44     	; 0xb352 <collision_detect_shot+0x176>
		{
			turret2.lives--;
    b326:	80 91 e9 0f 	lds	r24, 0x0FE9
    b32a:	81 50       	subi	r24, 0x01	; 1
    b32c:	80 93 e9 0f 	sts	0x0FE9, r24
			init_shot_state(shot, shot->shot_type);
    b330:	d4 01       	movw	r26, r8
    b332:	1b 96       	adiw	r26, 0x0b	; 11
    b334:	6c 91       	ld	r22, X
    b336:	c4 01       	movw	r24, r8
    b338:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
			game.boss_fight_player->active_shots--;
    b33c:	e0 91 b8 0b 	lds	r30, 0x0BB8
    b340:	f0 91 b9 0b 	lds	r31, 0x0BB9
    b344:	81 89       	ldd	r24, Z+17	; 0x11
    b346:	81 50       	subi	r24, 0x01	; 1
    b348:	81 8b       	std	Z+17, r24	; 0x11
    b34a:	03 c0       	rjmp	.+6      	; 0xb352 <collision_detect_shot+0x176>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
    b34c:	01 15       	cp	r16, r1
    b34e:	11 05       	cpc	r17, r1
    b350:	59 f4       	brne	.+22     	; 0xb368 <collision_detect_shot+0x18c>
    b352:	fe 01       	movw	r30, r28
    b354:	31 96       	adiw	r30, 0x01	; 1
    b356:	2f 01       	movw	r4, r30
    b358:	1d 82       	std	Y+5, r1	; 0x05
    b35a:	f1 2c       	mov	r15, r1
    b35c:	d1 2c       	mov	r13, r1
    b35e:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b360:	5e e1       	ldi	r21, 0x1E	; 30
    b362:	25 2e       	mov	r2, r21
    b364:	31 2c       	mov	r3, r1
    b366:	41 c0       	rjmp	.+130    	; 0xb3ea <collision_detect_shot+0x20e>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    b368:	d4 01       	movw	r26, r8
    b36a:	1b 96       	adiw	r26, 0x0b	; 11
    b36c:	6c 91       	ld	r22, X
    b36e:	c4 01       	movw	r24, r8
    b370:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
		player->active_shots--;
    b374:	f3 01       	movw	r30, r6
    b376:	81 89       	ldd	r24, Z+17	; 0x11
    b378:	81 50       	subi	r24, 0x01	; 1
    b37a:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    b37c:	6f 2d       	mov	r22, r15
    b37e:	c8 01       	movw	r24, r16
    b380:	0e 94 15 58 	call	0xb02a	; 0xb02a <kill_player>
		SFX_TANK_EXPLODE;
		return;
    b384:	f2 c0       	rjmp	.+484    	; 0xb56a <collision_detect_shot+0x38e>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    b386:	c5 01       	movw	r24, r10
    b388:	0e 94 18 56 	call	0xac30	; 0xac30 <solid_directional_tile>
    b38c:	88 23       	and	r24, r24
    b38e:	c1 f1       	breq	.+112    	; 0xb400 <collision_detect_shot+0x224>
    b390:	20 e0       	ldi	r18, 0x00	; 0
    b392:	30 e0       	ldi	r19, 0x00	; 0
    b394:	40 e0       	ldi	r20, 0x00	; 0
    b396:	50 e4       	ldi	r21, 0x40	; 64
    b398:	f4 01       	movw	r30, r8
    b39a:	67 81       	ldd	r22, Z+7	; 0x07
    b39c:	70 85       	ldd	r23, Z+8	; 0x08
    b39e:	81 85       	ldd	r24, Z+9	; 0x09
    b3a0:	92 85       	ldd	r25, Z+10	; 0x0a
    b3a2:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b3a6:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b3aa:	c6 2e       	mov	r12, r22
    b3ac:	20 e0       	ldi	r18, 0x00	; 0
    b3ae:	30 e0       	ldi	r19, 0x00	; 0
    b3b0:	40 e0       	ldi	r20, 0x00	; 0
    b3b2:	50 e4       	ldi	r21, 0x40	; 64
    b3b4:	d4 01       	movw	r26, r8
    b3b6:	13 96       	adiw	r26, 0x03	; 3
    b3b8:	6d 91       	ld	r22, X+
    b3ba:	7d 91       	ld	r23, X+
    b3bc:	8d 91       	ld	r24, X+
    b3be:	9c 91       	ld	r25, X
    b3c0:	16 97       	sbiw	r26, 0x06	; 6
    b3c2:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b3c6:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b3ca:	04 e0       	ldi	r16, 0x04	; 4
    b3cc:	24 e0       	ldi	r18, 0x04	; 4
    b3ce:	4c 2d       	mov	r20, r12
    b3d0:	c5 01       	movw	r24, r10
    b3d2:	0e 94 42 56 	call	0xac84	; 0xac84 <collides_directional_tile>
    b3d6:	88 23       	and	r24, r24
    b3d8:	99 f0       	breq	.+38     	; 0xb400 <collision_detect_shot+0x224>
		{
			hit = hit | HIT_ANGLE;
    b3da:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    b3dc:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    b3de:	bd 81       	ldd	r27, Y+5	; 0x05
    b3e0:	b1 30       	cpi	r27, 0x01	; 1
    b3e2:	09 f4       	brne	.+2      	; 0xb3e6 <collision_detect_shot+0x20a>
    b3e4:	88 c0       	rjmp	.+272    	; 0xb4f6 <collision_detect_shot+0x31a>
    b3e6:	f1 e0       	ldi	r31, 0x01	; 1
    b3e8:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    b3ea:	d2 01       	movw	r26, r4
    b3ec:	ad 90       	ld	r10, X+
    b3ee:	bd 90       	ld	r11, X+
    b3f0:	2d 01       	movw	r4, r26
    b3f2:	f5 01       	movw	r30, r10
    b3f4:	e6 5a       	subi	r30, 0xA6	; 166
    b3f6:	f3 4f       	sbci	r31, 0xF3	; 243
    b3f8:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    b3fa:	ee 20       	and	r14, r14
    b3fc:	81 f3       	breq	.-32     	; 0xb3de <collision_detect_shot+0x202>
    b3fe:	c3 cf       	rjmp	.-122    	; 0xb386 <collision_detect_shot+0x1aa>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b400:	b1 e0       	ldi	r27, 0x01	; 1
    b402:	eb 12       	cpse	r14, r27
    b404:	3b c0       	rjmp	.+118    	; 0xb47c <collision_detect_shot+0x2a0>
    b406:	c5 01       	movw	r24, r10
    b408:	b1 01       	movw	r22, r2
    b40a:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b40e:	6d 5f       	subi	r22, 0xFD	; 253
    b410:	7f 4f       	sbci	r23, 0xFF	; 255
    b412:	e6 2e       	mov	r14, r22
    b414:	ee 0c       	add	r14, r14
    b416:	ee 0c       	add	r14, r14
    b418:	ee 0c       	add	r14, r14
    b41a:	08 2f       	mov	r16, r24
    b41c:	00 0f       	add	r16, r16
    b41e:	00 0f       	add	r16, r16
    b420:	00 0f       	add	r16, r16
    b422:	20 e0       	ldi	r18, 0x00	; 0
    b424:	30 e0       	ldi	r19, 0x00	; 0
    b426:	40 e0       	ldi	r20, 0x00	; 0
    b428:	50 e4       	ldi	r21, 0x40	; 64
    b42a:	f4 01       	movw	r30, r8
    b42c:	67 81       	ldd	r22, Z+7	; 0x07
    b42e:	70 85       	ldd	r23, Z+8	; 0x08
    b430:	81 85       	ldd	r24, Z+9	; 0x09
    b432:	92 85       	ldd	r25, Z+10	; 0x0a
    b434:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b438:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b43c:	b6 2e       	mov	r11, r22
    b43e:	20 e0       	ldi	r18, 0x00	; 0
    b440:	30 e0       	ldi	r19, 0x00	; 0
    b442:	40 e0       	ldi	r20, 0x00	; 0
    b444:	50 e4       	ldi	r21, 0x40	; 64
    b446:	d4 01       	movw	r26, r8
    b448:	13 96       	adiw	r26, 0x03	; 3
    b44a:	6d 91       	ld	r22, X+
    b44c:	7d 91       	ld	r23, X+
    b44e:	8d 91       	ld	r24, X+
    b450:	9c 91       	ld	r25, X
    b452:	16 97       	sbiw	r26, 0x06	; 6
    b454:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b458:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b45c:	86 2f       	mov	r24, r22
    b45e:	38 e0       	ldi	r19, 0x08	; 8
    b460:	a3 2e       	mov	r10, r19
    b462:	48 e0       	ldi	r20, 0x08	; 8
    b464:	c4 2e       	mov	r12, r20
    b466:	24 e0       	ldi	r18, 0x04	; 4
    b468:	44 e0       	ldi	r20, 0x04	; 4
    b46a:	6b 2d       	mov	r22, r11
    b46c:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
    b470:	88 23       	and	r24, r24
    b472:	09 f4       	brne	.+2      	; 0xb476 <collision_detect_shot+0x29a>
    b474:	b4 cf       	rjmp	.-152    	; 0xb3de <collision_detect_shot+0x202>
		{
			hit = hit | HIT_BRICK;
    b476:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    b478:	dd 80       	ldd	r13, Y+5	; 0x05
    b47a:	b1 cf       	rjmp	.-158    	; 0xb3de <collision_detect_shot+0x202>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    b47c:	b2 e0       	ldi	r27, 0x02	; 2
    b47e:	eb 12       	cpse	r14, r27
    b480:	ae cf       	rjmp	.-164    	; 0xb3de <collision_detect_shot+0x202>
    b482:	c5 01       	movw	r24, r10
    b484:	b1 01       	movw	r22, r2
    b486:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b48a:	6d 5f       	subi	r22, 0xFD	; 253
    b48c:	7f 4f       	sbci	r23, 0xFF	; 255
    b48e:	e6 2e       	mov	r14, r22
    b490:	ee 0c       	add	r14, r14
    b492:	ee 0c       	add	r14, r14
    b494:	ee 0c       	add	r14, r14
    b496:	08 2f       	mov	r16, r24
    b498:	00 0f       	add	r16, r16
    b49a:	00 0f       	add	r16, r16
    b49c:	00 0f       	add	r16, r16
    b49e:	20 e0       	ldi	r18, 0x00	; 0
    b4a0:	30 e0       	ldi	r19, 0x00	; 0
    b4a2:	40 e0       	ldi	r20, 0x00	; 0
    b4a4:	50 e4       	ldi	r21, 0x40	; 64
    b4a6:	f4 01       	movw	r30, r8
    b4a8:	67 81       	ldd	r22, Z+7	; 0x07
    b4aa:	70 85       	ldd	r23, Z+8	; 0x08
    b4ac:	81 85       	ldd	r24, Z+9	; 0x09
    b4ae:	92 85       	ldd	r25, Z+10	; 0x0a
    b4b0:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b4b4:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b4b8:	b6 2e       	mov	r11, r22
    b4ba:	20 e0       	ldi	r18, 0x00	; 0
    b4bc:	30 e0       	ldi	r19, 0x00	; 0
    b4be:	40 e0       	ldi	r20, 0x00	; 0
    b4c0:	50 e4       	ldi	r21, 0x40	; 64
    b4c2:	d4 01       	movw	r26, r8
    b4c4:	13 96       	adiw	r26, 0x03	; 3
    b4c6:	6d 91       	ld	r22, X+
    b4c8:	7d 91       	ld	r23, X+
    b4ca:	8d 91       	ld	r24, X+
    b4cc:	9c 91       	ld	r25, X
    b4ce:	16 97       	sbiw	r26, 0x06	; 6
    b4d0:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b4d4:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b4d8:	86 2f       	mov	r24, r22
    b4da:	98 e0       	ldi	r25, 0x08	; 8
    b4dc:	a9 2e       	mov	r10, r25
    b4de:	28 e0       	ldi	r18, 0x08	; 8
    b4e0:	c2 2e       	mov	r12, r18
    b4e2:	24 e0       	ldi	r18, 0x04	; 4
    b4e4:	44 e0       	ldi	r20, 0x04	; 4
    b4e6:	6b 2d       	mov	r22, r11
    b4e8:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
    b4ec:	88 23       	and	r24, r24
    b4ee:	09 f4       	brne	.+2      	; 0xb4f2 <collision_detect_shot+0x316>
    b4f0:	76 cf       	rjmp	.-276    	; 0xb3de <collision_detect_shot+0x202>
        {
		    hit = hit | HIT_METAL;
    b4f2:	11 60       	ori	r17, 0x01	; 1
    b4f4:	74 cf       	rjmp	.-280    	; 0xb3de <collision_detect_shot+0x202>
        }
	}
	
	if (hit & HIT_ANGLE)
    b4f6:	12 ff       	sbrs	r17, 2
    b4f8:	0d c0       	rjmp	.+26     	; 0xb514 <collision_detect_shot+0x338>
	{
		recoil_sprite_fine(player, &shot->shared);
    b4fa:	b4 01       	movw	r22, r8
    b4fc:	c3 01       	movw	r24, r6
    b4fe:	0e 94 d0 55 	call	0xaba0	; 0xaba0 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    b502:	b4 01       	movw	r22, r8
    b504:	8f 2d       	mov	r24, r15
    b506:	0e 94 cd 58 	call	0xb19a	; 0xb19a <richochet>
		shot->rebounds--;
    b50a:	f4 01       	movw	r30, r8
    b50c:	85 85       	ldd	r24, Z+13	; 0x0d
    b50e:	81 50       	subi	r24, 0x01	; 1
    b510:	85 87       	std	Z+13, r24	; 0x0d
    b512:	1a c0       	rjmp	.+52     	; 0xb548 <collision_detect_shot+0x36c>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    b514:	11 ff       	sbrs	r17, 1
    b516:	1b c0       	rjmp	.+54     	; 0xb54e <collision_detect_shot+0x372>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    b518:	fe 01       	movw	r30, r28
    b51a:	31 96       	adiw	r30, 0x01	; 1
    b51c:	7f 01       	movw	r14, r30
    b51e:	ed 0c       	add	r14, r13
    b520:	f1 1c       	adc	r15, r1
    b522:	ed 0c       	add	r14, r13
    b524:	f1 1c       	adc	r15, r1
    b526:	d7 01       	movw	r26, r14
    b528:	6d 91       	ld	r22, X+
    b52a:	7c 91       	ld	r23, X
    b52c:	8d eb       	ldi	r24, 0xBD	; 189
    b52e:	9b e0       	ldi	r25, 0x0B	; 11
    b530:	0e 94 8f 58 	call	0xb11e	; 0xb11e <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    b534:	d7 01       	movw	r26, r14
    b536:	ed 91       	ld	r30, X+
    b538:	fc 91       	ld	r31, X
    b53a:	e6 5a       	subi	r30, 0xA6	; 166
    b53c:	f3 4f       	sbci	r31, 0xF3	; 243
    b53e:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    b540:	f4 01       	movw	r30, r8
    b542:	84 85       	ldd	r24, Z+12	; 0x0c
    b544:	81 50       	subi	r24, 0x01	; 1
    b546:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    b548:	81 11       	cpse	r24, r1
    b54a:	0f c0       	rjmp	.+30     	; 0xb56a <collision_detect_shot+0x38e>
    b54c:	03 c0       	rjmp	.+6      	; 0xb554 <collision_detect_shot+0x378>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_BRICK_EXPLODE;
	}
	else if (hit & HIT_METAL)
    b54e:	10 ff       	sbrs	r17, 0
    b550:	0c c0       	rjmp	.+24     	; 0xb56a <collision_detect_shot+0x38e>
	{
        init_shot_state(shot, shot->shot_type);
    b552:	f4 01       	movw	r30, r8
    b554:	63 85       	ldd	r22, Z+11	; 0x0b
    b556:	c4 01       	movw	r24, r8
    b558:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
        player->active_shots--;
    b55c:	d3 01       	movw	r26, r6
    b55e:	51 96       	adiw	r26, 0x11	; 17
    b560:	8c 91       	ld	r24, X
    b562:	51 97       	sbiw	r26, 0x11	; 17
    b564:	81 50       	subi	r24, 0x01	; 1
    b566:	51 96       	adiw	r26, 0x11	; 17
    b568:	8c 93       	st	X, r24
        SFX_METAL;
	}
}
    b56a:	0f 90       	pop	r0
    b56c:	0f 90       	pop	r0
    b56e:	0f 90       	pop	r0
    b570:	0f 90       	pop	r0
    b572:	0f 90       	pop	r0
    b574:	df 91       	pop	r29
    b576:	cf 91       	pop	r28
    b578:	1f 91       	pop	r17
    b57a:	0f 91       	pop	r16
    b57c:	ff 90       	pop	r15
    b57e:	ef 90       	pop	r14
    b580:	df 90       	pop	r13
    b582:	cf 90       	pop	r12
    b584:	bf 90       	pop	r11
    b586:	af 90       	pop	r10
    b588:	9f 90       	pop	r9
    b58a:	8f 90       	pop	r8
    b58c:	7f 90       	pop	r7
    b58e:	6f 90       	pop	r6
    b590:	5f 90       	pop	r5
    b592:	4f 90       	pop	r4
    b594:	3f 90       	pop	r3
    b596:	2f 90       	pop	r2
    b598:	08 95       	ret

0000b59a <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    b59a:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    b59c:	70 e0       	ldi	r23, 0x00	; 0
    b59e:	8e e1       	ldi	r24, 0x1E	; 30
    b5a0:	48 9f       	mul	r20, r24
    b5a2:	60 0d       	add	r22, r0
    b5a4:	71 1d       	adc	r23, r1
    b5a6:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b5a8:	21 11       	cpse	r18, r1
    b5aa:	09 c0       	rjmp	.+18     	; 0xb5be <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    b5ac:	71 83       	std	Z+1, r23	; 0x01
    b5ae:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b5b0:	cb 01       	movw	r24, r22
    b5b2:	01 96       	adiw	r24, 0x01	; 1
    b5b4:	93 83       	std	Z+3, r25	; 0x03
    b5b6:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b5b8:	6e 5f       	subi	r22, 0xFE	; 254
    b5ba:	7f 4f       	sbci	r23, 0xFF	; 255
    b5bc:	12 c0       	rjmp	.+36     	; 0xb5e2 <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    b5be:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    b5c0:	21 30       	cpi	r18, 0x01	; 1
    b5c2:	29 f4       	brne	.+10     	; 0xb5ce <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    b5c4:	02 96       	adiw	r24, 0x02	; 2
    b5c6:	91 83       	std	Z+1, r25	; 0x01
    b5c8:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    b5ca:	4e 96       	adiw	r24, 0x1e	; 30
    b5cc:	06 c0       	rjmp	.+12     	; 0xb5da <get_interesting_tile_indexes+0x40>
    b5ce:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    b5d0:	22 30       	cpi	r18, 0x02	; 2
    b5d2:	51 f4       	brne	.+20     	; 0xb5e8 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    b5d4:	91 83       	std	Z+1, r25	; 0x01
    b5d6:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b5d8:	01 96       	adiw	r24, 0x01	; 1
    b5da:	93 83       	std	Z+3, r25	; 0x03
    b5dc:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b5de:	62 5c       	subi	r22, 0xC2	; 194
    b5e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b5e2:	75 83       	std	Z+5, r23	; 0x05
    b5e4:	64 83       	std	Z+4, r22	; 0x04
    b5e6:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b5e8:	71 83       	std	Z+1, r23	; 0x01
    b5ea:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b5ec:	62 5e       	subi	r22, 0xE2	; 226
    b5ee:	7f 4f       	sbci	r23, 0xFF	; 255
    b5f0:	73 83       	std	Z+3, r23	; 0x03
    b5f2:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    b5f4:	95 83       	std	Z+5, r25	; 0x05
    b5f6:	84 83       	std	Z+4, r24	; 0x04
    b5f8:	08 95       	ret

0000b5fa <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    b5fa:	1f 93       	push	r17
    b5fc:	cf 93       	push	r28
    b5fe:	df 93       	push	r29
    b600:	fc 01       	movw	r30, r24
    b602:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    b604:	55 96       	adiw	r26, 0x15	; 21
    b606:	8c 91       	ld	r24, X
    b608:	55 97       	sbiw	r26, 0x15	; 21
    b60a:	80 fd       	sbrc	r24, 0
    b60c:	13 c0       	rjmp	.+38     	; 0xb634 <explode_player+0x3a>
    b60e:	12 2f       	mov	r17, r18
    b610:	64 2f       	mov	r22, r20
    b612:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    b614:	80 89       	ldd	r24, Z+16	; 0x10
    b616:	8f 5f       	subi	r24, 0xFF	; 255
    b618:	80 8b       	std	Z+16, r24	; 0x10
		player->score++;
    b61a:	87 85       	ldd	r24, Z+15	; 0x0f
    b61c:	8f 5f       	subi	r24, 0xFF	; 255
    b61e:	87 87       	std	Z+15, r24	; 0x0f
		render_score(player, hud_x);
    b620:	cf 01       	movw	r24, r30
    b622:	0e 94 21 54 	call	0xa842	; 0xa842 <render_score>
		kill_player(other_player, other_player_hud_x);
    b626:	61 2f       	mov	r22, r17
    b628:	ce 01       	movw	r24, r28
	}
}
    b62a:	df 91       	pop	r29
    b62c:	cf 91       	pop	r28
    b62e:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    b630:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <kill_player>
	}
}
    b634:	df 91       	pop	r29
    b636:	cf 91       	pop	r28
    b638:	1f 91       	pop	r17
    b63a:	08 95       	ret

0000b63c <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    b63c:	cf 92       	push	r12
    b63e:	df 92       	push	r13
    b640:	ef 92       	push	r14
    b642:	ff 92       	push	r15
    b644:	cf 93       	push	r28
    b646:	df 93       	push	r29
    b648:	ec 01       	movw	r28, r24
    b64a:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    b64c:	98 81       	ld	r25, Y
    b64e:	9d 7f       	andi	r25, 0xFD	; 253
    b650:	09 f0       	breq	.+2      	; 0xb654 <slide+0x18>
    b652:	54 c0       	rjmp	.+168    	; 0xb6fc <slide+0xc0>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
    b654:	ca 01       	movw	r24, r20
    b656:	6e e1       	ldi	r22, 0x1E	; 30
    b658:	70 e0       	ldi	r23, 0x00	; 0
    b65a:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b65e:	88 0f       	add	r24, r24
    b660:	88 0f       	add	r24, r24
    b662:	88 0f       	add	r24, r24
	u8 tile_y = (tile / 30 + 3) * 8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > 4))
    b664:	21 11       	cpse	r18, r1
    b666:	22 c0       	rjmp	.+68     	; 0xb6ac <slide+0x70>
    b668:	cb 80       	ldd	r12, Y+3	; 0x03
    b66a:	dc 80       	ldd	r13, Y+4	; 0x04
    b66c:	ed 80       	ldd	r14, Y+5	; 0x05
    b66e:	fe 80       	ldd	r15, Y+6	; 0x06
    b670:	68 2f       	mov	r22, r24
    b672:	70 e0       	ldi	r23, 0x00	; 0
    b674:	80 e0       	ldi	r24, 0x00	; 0
    b676:	90 e0       	ldi	r25, 0x00	; 0
    b678:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    b67c:	9b 01       	movw	r18, r22
    b67e:	ac 01       	movw	r20, r24
    b680:	c7 01       	movw	r24, r14
    b682:	b6 01       	movw	r22, r12
    b684:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b688:	20 e0       	ldi	r18, 0x00	; 0
    b68a:	30 e0       	ldi	r19, 0x00	; 0
    b68c:	40 e8       	ldi	r20, 0x80	; 128
    b68e:	50 e4       	ldi	r21, 0x40	; 64
    b690:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    b694:	18 16       	cp	r1, r24
    b696:	0c f0       	brlt	.+2      	; 0xb69a <slide+0x5e>
    b698:	85 c0       	rjmp	.+266    	; 0xb7a4 <slide+0x168>
			player->shared.x++; 
    b69a:	20 e0       	ldi	r18, 0x00	; 0
    b69c:	30 e0       	ldi	r19, 0x00	; 0
    b69e:	40 e8       	ldi	r20, 0x80	; 128
    b6a0:	5f e3       	ldi	r21, 0x3F	; 63
    b6a2:	c7 01       	movw	r24, r14
    b6a4:	b6 01       	movw	r22, r12
    b6a6:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b6aa:	23 c0       	rjmp	.+70     	; 0xb6f2 <slide+0xb6>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
    b6ac:	22 30       	cpi	r18, 0x02	; 2
    b6ae:	09 f0       	breq	.+2      	; 0xb6b2 <slide+0x76>
    b6b0:	79 c0       	rjmp	.+242    	; 0xb7a4 <slide+0x168>
    b6b2:	cb 80       	ldd	r12, Y+3	; 0x03
    b6b4:	dc 80       	ldd	r13, Y+4	; 0x04
    b6b6:	ed 80       	ldd	r14, Y+5	; 0x05
    b6b8:	fe 80       	ldd	r15, Y+6	; 0x06
    b6ba:	68 2f       	mov	r22, r24
    b6bc:	70 e0       	ldi	r23, 0x00	; 0
    b6be:	80 e0       	ldi	r24, 0x00	; 0
    b6c0:	90 e0       	ldi	r25, 0x00	; 0
    b6c2:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    b6c6:	9b 01       	movw	r18, r22
    b6c8:	ac 01       	movw	r20, r24
    b6ca:	c7 01       	movw	r24, r14
    b6cc:	b6 01       	movw	r22, r12
    b6ce:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b6d2:	20 e0       	ldi	r18, 0x00	; 0
    b6d4:	30 e0       	ldi	r19, 0x00	; 0
    b6d6:	40 e4       	ldi	r20, 0x40	; 64
    b6d8:	51 ec       	ldi	r21, 0xC1	; 193
    b6da:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    b6de:	87 ff       	sbrs	r24, 7
    b6e0:	61 c0       	rjmp	.+194    	; 0xb7a4 <slide+0x168>
			player->shared.x--;
    b6e2:	20 e0       	ldi	r18, 0x00	; 0
    b6e4:	30 e0       	ldi	r19, 0x00	; 0
    b6e6:	40 e8       	ldi	r20, 0x80	; 128
    b6e8:	5f e3       	ldi	r21, 0x3F	; 63
    b6ea:	c7 01       	movw	r24, r14
    b6ec:	b6 01       	movw	r22, r12
    b6ee:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b6f2:	6b 83       	std	Y+3, r22	; 0x03
    b6f4:	7c 83       	std	Y+4, r23	; 0x04
    b6f6:	8d 83       	std	Y+5, r24	; 0x05
    b6f8:	9e 83       	std	Y+6, r25	; 0x06
    b6fa:	54 c0       	rjmp	.+168    	; 0xb7a4 <slide+0x168>
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * 8);
	u8 tile_y = (tile / 30 + 3) * 8;
    b6fc:	ca 01       	movw	r24, r20
    b6fe:	6e e1       	ldi	r22, 0x1E	; 30
    b700:	70 e0       	ldi	r23, 0x00	; 0
    b702:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b706:	ab 01       	movw	r20, r22
    b708:	4d 5f       	subi	r20, 0xFD	; 253
    b70a:	5f 4f       	sbci	r21, 0xFF	; 255
    b70c:	44 0f       	add	r20, r20
    b70e:	44 0f       	add	r20, r20
    b710:	44 0f       	add	r20, r20
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -12))
			player->shared.x--;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > 4))
    b712:	21 11       	cpse	r18, r1
    b714:	21 c0       	rjmp	.+66     	; 0xb758 <slide+0x11c>
    b716:	cf 80       	ldd	r12, Y+7	; 0x07
    b718:	d8 84       	ldd	r13, Y+8	; 0x08
    b71a:	e9 84       	ldd	r14, Y+9	; 0x09
    b71c:	fa 84       	ldd	r15, Y+10	; 0x0a
    b71e:	64 2f       	mov	r22, r20
    b720:	70 e0       	ldi	r23, 0x00	; 0
    b722:	80 e0       	ldi	r24, 0x00	; 0
    b724:	90 e0       	ldi	r25, 0x00	; 0
    b726:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    b72a:	9b 01       	movw	r18, r22
    b72c:	ac 01       	movw	r20, r24
    b72e:	c7 01       	movw	r24, r14
    b730:	b6 01       	movw	r22, r12
    b732:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b736:	20 e0       	ldi	r18, 0x00	; 0
    b738:	30 e0       	ldi	r19, 0x00	; 0
    b73a:	40 e8       	ldi	r20, 0x80	; 128
    b73c:	50 e4       	ldi	r21, 0x40	; 64
    b73e:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    b742:	18 16       	cp	r1, r24
    b744:	7c f5       	brge	.+94     	; 0xb7a4 <slide+0x168>
			player->shared.y++;
    b746:	20 e0       	ldi	r18, 0x00	; 0
    b748:	30 e0       	ldi	r19, 0x00	; 0
    b74a:	40 e8       	ldi	r20, 0x80	; 128
    b74c:	5f e3       	ldi	r21, 0x3F	; 63
    b74e:	c7 01       	movw	r24, r14
    b750:	b6 01       	movw	r22, r12
    b752:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    b756:	22 c0       	rjmp	.+68     	; 0xb79c <slide+0x160>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -12))
    b758:	22 30       	cpi	r18, 0x02	; 2
    b75a:	21 f5       	brne	.+72     	; 0xb7a4 <slide+0x168>
    b75c:	cf 80       	ldd	r12, Y+7	; 0x07
    b75e:	d8 84       	ldd	r13, Y+8	; 0x08
    b760:	e9 84       	ldd	r14, Y+9	; 0x09
    b762:	fa 84       	ldd	r15, Y+10	; 0x0a
    b764:	64 2f       	mov	r22, r20
    b766:	70 e0       	ldi	r23, 0x00	; 0
    b768:	80 e0       	ldi	r24, 0x00	; 0
    b76a:	90 e0       	ldi	r25, 0x00	; 0
    b76c:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    b770:	9b 01       	movw	r18, r22
    b772:	ac 01       	movw	r20, r24
    b774:	c7 01       	movw	r24, r14
    b776:	b6 01       	movw	r22, r12
    b778:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b77c:	20 e0       	ldi	r18, 0x00	; 0
    b77e:	30 e0       	ldi	r19, 0x00	; 0
    b780:	40 e4       	ldi	r20, 0x40	; 64
    b782:	51 ec       	ldi	r21, 0xC1	; 193
    b784:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    b788:	87 ff       	sbrs	r24, 7
    b78a:	0c c0       	rjmp	.+24     	; 0xb7a4 <slide+0x168>
			player->shared.y--;
    b78c:	20 e0       	ldi	r18, 0x00	; 0
    b78e:	30 e0       	ldi	r19, 0x00	; 0
    b790:	40 e8       	ldi	r20, 0x80	; 128
    b792:	5f e3       	ldi	r21, 0x3F	; 63
    b794:	c7 01       	movw	r24, r14
    b796:	b6 01       	movw	r22, r12
    b798:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b79c:	6f 83       	std	Y+7, r22	; 0x07
    b79e:	78 87       	std	Y+8, r23	; 0x08
    b7a0:	89 87       	std	Y+9, r24	; 0x09
    b7a2:	9a 87       	std	Y+10, r25	; 0x0a
	}
}
    b7a4:	df 91       	pop	r29
    b7a6:	cf 91       	pop	r28
    b7a8:	ff 90       	pop	r15
    b7aa:	ef 90       	pop	r14
    b7ac:	df 90       	pop	r13
    b7ae:	cf 90       	pop	r12
    b7b0:	08 95       	ret

0000b7b2 <collision_detect_player>:

char collision_detect_player(Player* player, u8 hud_x)
{
    b7b2:	2f 92       	push	r2
    b7b4:	3f 92       	push	r3
    b7b6:	4f 92       	push	r4
    b7b8:	5f 92       	push	r5
    b7ba:	6f 92       	push	r6
    b7bc:	7f 92       	push	r7
    b7be:	8f 92       	push	r8
    b7c0:	9f 92       	push	r9
    b7c2:	af 92       	push	r10
    b7c4:	bf 92       	push	r11
    b7c6:	cf 92       	push	r12
    b7c8:	df 92       	push	r13
    b7ca:	ef 92       	push	r14
    b7cc:	ff 92       	push	r15
    b7ce:	0f 93       	push	r16
    b7d0:	1f 93       	push	r17
    b7d2:	cf 93       	push	r28
    b7d4:	df 93       	push	r29
    b7d6:	cd b7       	in	r28, 0x3d	; 61
    b7d8:	de b7       	in	r29, 0x3e	; 62
    b7da:	2b 97       	sbiw	r28, 0x0b	; 11
    b7dc:	0f b6       	in	r0, 0x3f	; 63
    b7de:	f8 94       	cli
    b7e0:	de bf       	out	0x3e, r29	; 62
    b7e2:	0f be       	out	0x3f, r0	; 63
    b7e4:	cd bf       	out	0x3d, r28	; 61
    b7e6:	4c 01       	movw	r8, r24
    b7e8:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    b7ea:	1a 82       	std	Y+2, r1	; 0x02
    b7ec:	19 82       	std	Y+1, r1	; 0x01
    b7ee:	1c 82       	std	Y+4, r1	; 0x04
    b7f0:	1b 82       	std	Y+3, r1	; 0x03
    b7f2:	1e 82       	std	Y+6, r1	; 0x06
    b7f4:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b7f6:	20 e0       	ldi	r18, 0x00	; 0
    b7f8:	30 e0       	ldi	r19, 0x00	; 0
    b7fa:	40 e0       	ldi	r20, 0x00	; 0
    b7fc:	5e e3       	ldi	r21, 0x3E	; 62
    b7fe:	dc 01       	movw	r26, r24
    b800:	17 96       	adiw	r26, 0x07	; 7
    b802:	6d 91       	ld	r22, X+
    b804:	7d 91       	ld	r23, X+
    b806:	8d 91       	ld	r24, X+
    b808:	9c 91       	ld	r25, X
    b80a:	1a 97       	sbiw	r26, 0x0a	; 10
    b80c:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b810:	20 e0       	ldi	r18, 0x00	; 0
    b812:	30 e0       	ldi	r19, 0x00	; 0
    b814:	40 e4       	ldi	r20, 0x40	; 64
    b816:	50 e4       	ldi	r21, 0x40	; 64
    b818:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    b81c:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b820:	06 2f       	mov	r16, r22
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    b822:	20 e0       	ldi	r18, 0x00	; 0
    b824:	30 e0       	ldi	r19, 0x00	; 0
    b826:	40 e0       	ldi	r20, 0x00	; 0
    b828:	5e e3       	ldi	r21, 0x3E	; 62
    b82a:	f4 01       	movw	r30, r8
    b82c:	63 81       	ldd	r22, Z+3	; 0x03
    b82e:	74 81       	ldd	r23, Z+4	; 0x04
    b830:	85 81       	ldd	r24, Z+5	; 0x05
    b832:	96 81       	ldd	r25, Z+6	; 0x06
    b834:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    b838:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    b83c:	d4 01       	movw	r26, r8
    b83e:	2c 91       	ld	r18, X
    b840:	40 2f       	mov	r20, r16
    b842:	ce 01       	movw	r24, r28
    b844:	01 96       	adiw	r24, 0x01	; 1
    b846:	0e 94 cd 5a 	call	0xb59a	; 0xb59a <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b84a:	c4 01       	movw	r24, r8
    b84c:	0e 94 93 57 	call	0xaf26	; 0xaf26 <collision_detect_boundries>
    b850:	88 23       	and	r24, r24
    b852:	39 f0       	breq	.+14     	; 0xb862 <collision_detect_player+0xb0>
	{
		recoil_sprite(&player->shared);
    b854:	c4 01       	movw	r24, r8
    b856:	0e 94 76 55 	call	0xaaec	; 0xaaec <recoil_sprite>
		player->shared.speed = 0;
    b85a:	f4 01       	movw	r30, r8
    b85c:	11 82       	std	Z+1, r1	; 0x01
		return explode;
    b85e:	41 2c       	mov	r4, r1
    b860:	10 c1       	rjmp	.+544    	; 0xba82 <collision_detect_player+0x2d0>
    b862:	ce 01       	movw	r24, r28
    b864:	01 96       	adiw	r24, 0x01	; 1
    b866:	98 87       	std	Y+8, r25	; 0x08
    b868:	8f 83       	std	Y+7, r24	; 0x07
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b86a:	51 2c       	mov	r5, r1
    b86c:	b1 2c       	mov	r11, r1
    b86e:	d1 2c       	mov	r13, r1
    b870:	41 2c       	mov	r4, r1
    b872:	31 2c       	mov	r3, r1
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b874:	9b e0       	ldi	r25, 0x0B	; 11
    b876:	91 0f       	add	r25, r17
    b878:	99 87       	std	Y+9, r25	; 0x09
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b87a:	16 5f       	subi	r17, 0xF6	; 246
    b87c:	1a 87       	std	Y+10, r17	; 0x0a
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    b87e:	af 81       	ldd	r26, Y+7	; 0x07
    b880:	b8 85       	ldd	r27, Y+8	; 0x08
    b882:	6d 90       	ld	r6, X+
    b884:	7d 90       	ld	r7, X+
    b886:	b8 87       	std	Y+8, r27	; 0x08
    b888:	af 83       	std	Y+7, r26	; 0x07
    b88a:	c3 01       	movw	r24, r6
    b88c:	6e e1       	ldi	r22, 0x1E	; 30
    b88e:	70 e0       	ldi	r23, 0x00	; 0
    b890:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    b894:	f8 2e       	mov	r15, r24
		tile_y = 3 + tiles[i] / 30;
    b896:	13 e0       	ldi	r17, 0x03	; 3
    b898:	16 0f       	add	r17, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    b89a:	c3 01       	movw	r24, r6
    b89c:	0e 94 18 56 	call	0xac30	; 0xac30 <solid_directional_tile>
    b8a0:	88 23       	and	r24, r24
    b8a2:	51 f1       	breq	.+84     	; 0xb8f8 <collision_detect_player+0x146>
    b8a4:	f4 01       	movw	r30, r8
    b8a6:	67 81       	ldd	r22, Z+7	; 0x07
    b8a8:	70 85       	ldd	r23, Z+8	; 0x08
    b8aa:	81 85       	ldd	r24, Z+9	; 0x09
    b8ac:	92 85       	ldd	r25, Z+10	; 0x0a
    b8ae:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b8b2:	46 2f       	mov	r20, r22
    b8b4:	d4 01       	movw	r26, r8
    b8b6:	13 96       	adiw	r26, 0x03	; 3
    b8b8:	6d 91       	ld	r22, X+
    b8ba:	7d 91       	ld	r23, X+
    b8bc:	8d 91       	ld	r24, X+
    b8be:	9c 91       	ld	r25, X
    b8c0:	16 97       	sbiw	r26, 0x06	; 6
    b8c2:	4b 87       	std	Y+11, r20	; 0x0b
    b8c4:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b8c8:	00 e1       	ldi	r16, 0x10	; 16
    b8ca:	20 e1       	ldi	r18, 0x10	; 16
    b8cc:	4b 85       	ldd	r20, Y+11	; 0x0b
    b8ce:	c3 01       	movw	r24, r6
    b8d0:	0e 94 42 56 	call	0xac84	; 0xac84 <collides_directional_tile>
    b8d4:	88 23       	and	r24, r24
    b8d6:	81 f0       	breq	.+32     	; 0xb8f8 <collision_detect_player+0x146>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    b8d8:	f4 01       	movw	r30, r8
    b8da:	83 85       	ldd	r24, Z+11	; 0x0b
    b8dc:	89 30       	cpi	r24, 0x09	; 9
    b8de:	21 f4       	brne	.+8      	; 0xb8e8 <collision_detect_player+0x136>
    b8e0:	c4 01       	movw	r24, r8
    b8e2:	0e 94 76 55 	call	0xaaec	; 0xaaec <recoil_sprite>
    b8e6:	04 c0       	rjmp	.+8      	; 0xb8f0 <collision_detect_player+0x13e>
    b8e8:	b4 01       	movw	r22, r8
    b8ea:	c4 01       	movw	r24, r8
    b8ec:	0e 94 d0 55 	call	0xaba0	; 0xaba0 <recoil_sprite_fine>
			player->shared.speed = 0;
    b8f0:	d4 01       	movw	r26, r8
    b8f2:	11 96       	adiw	r26, 0x01	; 1
    b8f4:	1c 92       	st	X, r1
    b8f6:	a0 c0       	rjmp	.+320    	; 0xba38 <collision_detect_player+0x286>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    b8f8:	c3 01       	movw	r24, r6
    b8fa:	0e 94 06 56 	call	0xac0c	; 0xac0c <solid_square_tile>
    b8fe:	88 23       	and	r24, r24
    b900:	51 f1       	breq	.+84     	; 0xb956 <collision_detect_player+0x1a4>
    b902:	f4 01       	movw	r30, r8
    b904:	67 81       	ldd	r22, Z+7	; 0x07
    b906:	70 85       	ldd	r23, Z+8	; 0x08
    b908:	81 85       	ldd	r24, Z+9	; 0x09
    b90a:	92 85       	ldd	r25, Z+10	; 0x0a
    b90c:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b910:	26 2e       	mov	r2, r22
    b912:	d4 01       	movw	r26, r8
    b914:	13 96       	adiw	r26, 0x03	; 3
    b916:	6d 91       	ld	r22, X+
    b918:	7d 91       	ld	r23, X+
    b91a:	8d 91       	ld	r24, X+
    b91c:	9c 91       	ld	r25, X
    b91e:	16 97       	sbiw	r26, 0x06	; 6
    b920:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b924:	86 2f       	mov	r24, r22
    b926:	38 e0       	ldi	r19, 0x08	; 8
    b928:	a3 2e       	mov	r10, r19
    b92a:	48 e0       	ldi	r20, 0x08	; 8
    b92c:	c4 2e       	mov	r12, r20
    b92e:	e1 2e       	mov	r14, r17
    b930:	ee 0c       	add	r14, r14
    b932:	ee 0c       	add	r14, r14
    b934:	ee 0c       	add	r14, r14
    b936:	0f 2d       	mov	r16, r15
    b938:	00 0f       	add	r16, r16
    b93a:	00 0f       	add	r16, r16
    b93c:	00 0f       	add	r16, r16
    b93e:	20 e1       	ldi	r18, 0x10	; 16
    b940:	40 e1       	ldi	r20, 0x10	; 16
    b942:	62 2d       	mov	r22, r2
    b944:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
    b948:	88 23       	and	r24, r24
    b94a:	29 f0       	breq	.+10     	; 0xb956 <collision_detect_player+0x1a4>
		{
			collision_count++;
    b94c:	b3 94       	inc	r11
			collision_tile = i;
			player->shared.speed = 0;
    b94e:	f4 01       	movw	r30, r8
    b950:	11 82       	std	Z+1, r1	; 0x01
    b952:	d5 2c       	mov	r13, r5
    b954:	71 c0       	rjmp	.+226    	; 0xba38 <collision_detect_player+0x286>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    b956:	f3 01       	movw	r30, r6
    b958:	e6 5a       	subi	r30, 0xA6	; 166
    b95a:	f3 4f       	sbci	r31, 0xF3	; 243
    b95c:	81 81       	ldd	r24, Z+1	; 0x01
    b95e:	8d 34       	cpi	r24, 0x4D	; 77
    b960:	59 f5       	brne	.+86     	; 0xb9b8 <collision_detect_player+0x206>
    b962:	e1 2e       	mov	r14, r17
    b964:	ee 0c       	add	r14, r14
    b966:	ee 0c       	add	r14, r14
    b968:	ee 0c       	add	r14, r14
    b96a:	0f 2d       	mov	r16, r15
    b96c:	00 0f       	add	r16, r16
    b96e:	00 0f       	add	r16, r16
    b970:	00 0f       	add	r16, r16
    b972:	d4 01       	movw	r26, r8
    b974:	17 96       	adiw	r26, 0x07	; 7
    b976:	6d 91       	ld	r22, X+
    b978:	7d 91       	ld	r23, X+
    b97a:	8d 91       	ld	r24, X+
    b97c:	9c 91       	ld	r25, X
    b97e:	1a 97       	sbiw	r26, 0x0a	; 10
    b980:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b984:	76 2e       	mov	r7, r22
    b986:	f4 01       	movw	r30, r8
    b988:	63 81       	ldd	r22, Z+3	; 0x03
    b98a:	74 81       	ldd	r23, Z+4	; 0x04
    b98c:	85 81       	ldd	r24, Z+5	; 0x05
    b98e:	96 81       	ldd	r25, Z+6	; 0x06
    b990:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    b994:	86 2f       	mov	r24, r22
    b996:	98 e0       	ldi	r25, 0x08	; 8
    b998:	a9 2e       	mov	r10, r25
    b99a:	28 e0       	ldi	r18, 0x08	; 8
    b99c:	c2 2e       	mov	r12, r18
    b99e:	20 e1       	ldi	r18, 0x10	; 16
    b9a0:	40 e1       	ldi	r20, 0x10	; 16
    b9a2:	67 2d       	mov	r22, r7
    b9a4:	0e 94 47 4f 	call	0x9e8e	; 0x9e8e <LBCollides>
    b9a8:	88 23       	and	r24, r24
    b9aa:	09 f4       	brne	.+2      	; 0xb9ae <collision_detect_player+0x1fc>
    b9ac:	45 c0       	rjmp	.+138    	; 0xba38 <collision_detect_player+0x286>
		{
			player->max_speed = WATER_SPEED;
    b9ae:	e9 e1       	ldi	r30, 0x19	; 25
    b9b0:	d4 01       	movw	r26, r8
    b9b2:	57 96       	adiw	r26, 0x17	; 23
    b9b4:	ec 93       	st	X, r30
    b9b6:	4b c0       	rjmp	.+150    	; 0xba4e <collision_detect_player+0x29c>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,16,16,tile_x*8,tile_y*8,8,8))
    b9b8:	8c 32       	cpi	r24, 0x2C	; 44
    b9ba:	99 f2       	breq	.-90     	; 0xb962 <collision_detect_player+0x1b0>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    b9bc:	87 30       	cpi	r24, 0x07	; 7
    b9be:	99 f4       	brne	.+38     	; 0xb9e6 <collision_detect_player+0x234>
    b9c0:	d4 01       	movw	r26, r8
    b9c2:	55 96       	adiw	r26, 0x15	; 21
    b9c4:	8c 91       	ld	r24, X
    b9c6:	55 97       	sbiw	r26, 0x15	; 21
    b9c8:	80 fd       	sbrc	r24, 0
    b9ca:	36 c0       	rjmp	.+108    	; 0xba38 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b9cc:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    b9ce:	e1 e4       	ldi	r30, 0x41	; 65
    b9d0:	57 96       	adiw	r26, 0x17	; 23
    b9d2:	ec 93       	st	X, r30
    b9d4:	57 97       	sbiw	r26, 0x17	; 23
			player->has_over_speed = true;
    b9d6:	f1 e0       	ldi	r31, 0x01	; 1
    b9d8:	59 96       	adiw	r26, 0x19	; 25
    b9da:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b9dc:	45 e3       	ldi	r20, 0x35	; 53
    b9de:	56 e7       	ldi	r21, 0x76	; 118
    b9e0:	61 e0       	ldi	r22, 0x01	; 1
    b9e2:	8a 85       	ldd	r24, Y+10	; 0x0a
    b9e4:	10 c0       	rjmp	.+32     	; 0xba06 <collision_detect_player+0x254>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    b9e6:	89 30       	cpi	r24, 0x09	; 9
    b9e8:	b9 f4       	brne	.+46     	; 0xba18 <collision_detect_player+0x266>
    b9ea:	d4 01       	movw	r26, r8
    b9ec:	55 96       	adiw	r26, 0x15	; 21
    b9ee:	8c 91       	ld	r24, X
    b9f0:	55 97       	sbiw	r26, 0x15	; 21
    b9f2:	80 fd       	sbrc	r24, 0
    b9f4:	21 c0       	rjmp	.+66     	; 0xba38 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b9f6:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    b9f8:	e1 e0       	ldi	r30, 0x01	; 1
    b9fa:	58 96       	adiw	r26, 0x18	; 24
    b9fc:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b9fe:	4f e2       	ldi	r20, 0x2F	; 47
    ba00:	56 e7       	ldi	r21, 0x76	; 118
    ba02:	61 e0       	ldi	r22, 0x01	; 1
    ba04:	89 85       	ldd	r24, Y+9	; 0x09
    ba06:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    ba0a:	40 e0       	ldi	r20, 0x00	; 0
    ba0c:	50 e0       	ldi	r21, 0x00	; 0
    ba0e:	61 2f       	mov	r22, r17
    ba10:	8f 2d       	mov	r24, r15
    ba12:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
    ba16:	10 c0       	rjmp	.+32     	; 0xba38 <collision_detect_player+0x286>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    ba18:	88 30       	cpi	r24, 0x08	; 8
    ba1a:	71 f4       	brne	.+28     	; 0xba38 <collision_detect_player+0x286>
    ba1c:	d4 01       	movw	r26, r8
    ba1e:	55 96       	adiw	r26, 0x15	; 21
    ba20:	8c 91       	ld	r24, X
    ba22:	80 fd       	sbrc	r24, 0
    ba24:	09 c0       	rjmp	.+18     	; 0xba38 <collision_detect_player+0x286>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    ba26:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    ba28:	40 e0       	ldi	r20, 0x00	; 0
    ba2a:	50 e0       	ldi	r21, 0x00	; 0
    ba2c:	61 2f       	mov	r22, r17
    ba2e:	8f 2d       	mov	r24, r15
    ba30:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
			SFX_ITEM;
			explode = 1;
    ba34:	44 24       	eor	r4, r4
    ba36:	43 94       	inc	r4
		}
		
		if (!hit_water)
    ba38:	31 10       	cpse	r3, r1
    ba3a:	09 c0       	rjmp	.+18     	; 0xba4e <collision_detect_player+0x29c>
		{
			player->max_speed = MAX_SPEED;
    ba3c:	82 e3       	ldi	r24, 0x32	; 50
    ba3e:	f4 01       	movw	r30, r8
    ba40:	87 8b       	std	Z+23, r24	; 0x17
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
    ba42:	81 8d       	ldd	r24, Z+25	; 0x19
    ba44:	88 23       	and	r24, r24
    ba46:	29 f0       	breq	.+10     	; 0xba52 <collision_detect_player+0x2a0>
    ba48:	91 e4       	ldi	r25, 0x41	; 65
    ba4a:	97 8b       	std	Z+23, r25	; 0x17
    ba4c:	02 c0       	rjmp	.+4      	; 0xba52 <collision_detect_player+0x2a0>
    ba4e:	33 24       	eor	r3, r3
    ba50:	33 94       	inc	r3
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    ba52:	53 94       	inc	r5
    ba54:	a3 e0       	ldi	r26, 0x03	; 3
    ba56:	5a 12       	cpse	r5, r26
    ba58:	12 cf       	rjmp	.-476    	; 0xb87e <collision_detect_player+0xcc>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    ba5a:	bb 20       	and	r11, r11
    ba5c:	91 f0       	breq	.+36     	; 0xba82 <collision_detect_player+0x2d0>
    ba5e:	c4 01       	movw	r24, r8
    ba60:	0e 94 76 55 	call	0xaaec	; 0xaaec <recoil_sprite>
	if (collision_count == 1)
    ba64:	b1 e0       	ldi	r27, 0x01	; 1
    ba66:	bb 12       	cpse	r11, r27
    ba68:	0c c0       	rjmp	.+24     	; 0xba82 <collision_detect_player+0x2d0>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    ba6a:	fe 01       	movw	r30, r28
    ba6c:	31 96       	adiw	r30, 0x01	; 1
    ba6e:	ed 0d       	add	r30, r13
    ba70:	f1 1d       	adc	r31, r1
    ba72:	ed 0d       	add	r30, r13
    ba74:	f1 1d       	adc	r31, r1
    ba76:	40 81       	ld	r20, Z
    ba78:	51 81       	ldd	r21, Z+1	; 0x01
    ba7a:	6d 2d       	mov	r22, r13
    ba7c:	c4 01       	movw	r24, r8
    ba7e:	0e 94 1e 5b 	call	0xb63c	; 0xb63c <slide>
	}
	return explode;
}
    ba82:	84 2d       	mov	r24, r4
    ba84:	2b 96       	adiw	r28, 0x0b	; 11
    ba86:	0f b6       	in	r0, 0x3f	; 63
    ba88:	f8 94       	cli
    ba8a:	de bf       	out	0x3e, r29	; 62
    ba8c:	0f be       	out	0x3f, r0	; 63
    ba8e:	cd bf       	out	0x3d, r28	; 61
    ba90:	df 91       	pop	r29
    ba92:	cf 91       	pop	r28
    ba94:	1f 91       	pop	r17
    ba96:	0f 91       	pop	r16
    ba98:	ff 90       	pop	r15
    ba9a:	ef 90       	pop	r14
    ba9c:	df 90       	pop	r13
    ba9e:	cf 90       	pop	r12
    baa0:	bf 90       	pop	r11
    baa2:	af 90       	pop	r10
    baa4:	9f 90       	pop	r9
    baa6:	8f 90       	pop	r8
    baa8:	7f 90       	pop	r7
    baaa:	6f 90       	pop	r6
    baac:	5f 90       	pop	r5
    baae:	4f 90       	pop	r4
    bab0:	3f 90       	pop	r3
    bab2:	2f 90       	pop	r2
    bab4:	08 95       	ret

0000bab6 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    bab6:	ef 92       	push	r14
    bab8:	ff 92       	push	r15
    baba:	1f 93       	push	r17
    babc:	cf 93       	push	r28
    babe:	df 93       	push	r29
    bac0:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bac2:	c0 e0       	ldi	r28, 0x00	; 0
    bac4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    bac6:	8e e1       	ldi	r24, 0x1E	; 30
    bac8:	e8 2e       	mov	r14, r24
    baca:	f1 2c       	mov	r15, r1
    bacc:	ce 01       	movw	r24, r28
    bace:	b7 01       	movw	r22, r14
    bad0:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
		y = 3 + i / 30;
    bad4:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    bad6:	11 23       	and	r17, r17
    bad8:	19 f0       	breq	.+6      	; 0xbae0 <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    bada:	42 ed       	ldi	r20, 0xD2	; 210
    badc:	56 e7       	ldi	r21, 0x76	; 118
    bade:	2d c0       	rjmp	.+90     	; 0xbb3a <load_level_tiles+0x84>
    bae0:	fe 01       	movw	r30, r28
    bae2:	e6 5a       	subi	r30, 0xA6	; 166
    bae4:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    bae6:	91 81       	ldd	r25, Z+1	; 0x01
    bae8:	97 30       	cpi	r25, 0x07	; 7
    baea:	99 f1       	breq	.+102    	; 0xbb52 <load_level_tiles+0x9c>
    baec:	88 f4       	brcc	.+34     	; 0xbb10 <load_level_tiles+0x5a>
    baee:	93 30       	cpi	r25, 0x03	; 3
    baf0:	39 f1       	breq	.+78     	; 0xbb40 <load_level_tiles+0x8a>
    baf2:	40 f4       	brcc	.+16     	; 0xbb04 <load_level_tiles+0x4e>
    baf4:	91 30       	cpi	r25, 0x01	; 1
    baf6:	f9 f0       	breq	.+62     	; 0xbb36 <load_level_tiles+0x80>
    baf8:	92 30       	cpi	r25, 0x02	; 2
    bafa:	09 f0       	breq	.+2      	; 0xbafe <load_level_tiles+0x48>
    bafc:	3f c0       	rjmp	.+126    	; 0xbb7c <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    bafe:	48 e3       	ldi	r20, 0x38	; 56
    bb00:	56 e7       	ldi	r21, 0x76	; 118
    bb02:	1b c0       	rjmp	.+54     	; 0xbb3a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb04:	95 30       	cpi	r25, 0x05	; 5
    bb06:	f9 f0       	breq	.+62     	; 0xbb46 <load_level_tiles+0x90>
    bb08:	08 f5       	brcc	.+66     	; 0xbb4c <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    bb0a:	4d e1       	ldi	r20, 0x1D	; 29
    bb0c:	56 e7       	ldi	r21, 0x76	; 118
    bb0e:	15 c0       	rjmp	.+42     	; 0xbb3a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb10:	9c 32       	cpi	r25, 0x2C	; 44
    bb12:	59 f1       	breq	.+86     	; 0xbb6a <load_level_tiles+0xb4>
    bb14:	38 f4       	brcc	.+14     	; 0xbb24 <load_level_tiles+0x6e>
    bb16:	98 30       	cpi	r25, 0x08	; 8
    bb18:	f9 f0       	breq	.+62     	; 0xbb58 <load_level_tiles+0xa2>
    bb1a:	99 30       	cpi	r25, 0x09	; 9
    bb1c:	79 f5       	brne	.+94     	; 0xbb7c <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    bb1e:	4f e2       	ldi	r20, 0x2F	; 47
    bb20:	56 e7       	ldi	r21, 0x76	; 118
    bb22:	0b c0       	rjmp	.+22     	; 0xbb3a <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    bb24:	92 34       	cpi	r25, 0x42	; 66
    bb26:	d9 f0       	breq	.+54     	; 0xbb5e <load_level_tiles+0xa8>
    bb28:	9d 34       	cpi	r25, 0x4D	; 77
    bb2a:	e1 f0       	breq	.+56     	; 0xbb64 <load_level_tiles+0xae>
    bb2c:	97 33       	cpi	r25, 0x37	; 55
    bb2e:	31 f5       	brne	.+76     	; 0xbb7c <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    bb30:	41 e1       	ldi	r20, 0x11	; 17
    bb32:	56 e7       	ldi	r21, 0x76	; 118
    bb34:	02 c0       	rjmp	.+4      	; 0xbb3a <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    bb36:	4b e3       	ldi	r20, 0x3B	; 59
    bb38:	56 e7       	ldi	r21, 0x76	; 118
    bb3a:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
    bb3e:	22 c0       	rjmp	.+68     	; 0xbb84 <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    bb40:	43 e2       	ldi	r20, 0x23	; 35
    bb42:	56 e7       	ldi	r21, 0x76	; 118
    bb44:	fa cf       	rjmp	.-12     	; 0xbb3a <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    bb46:	4a e1       	ldi	r20, 0x1A	; 26
    bb48:	56 e7       	ldi	r21, 0x76	; 118
    bb4a:	f7 cf       	rjmp	.-18     	; 0xbb3a <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    bb4c:	40 e2       	ldi	r20, 0x20	; 32
    bb4e:	56 e7       	ldi	r21, 0x76	; 118
    bb50:	f4 cf       	rjmp	.-24     	; 0xbb3a <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    bb52:	45 e3       	ldi	r20, 0x35	; 53
    bb54:	56 e7       	ldi	r21, 0x76	; 118
    bb56:	f1 cf       	rjmp	.-30     	; 0xbb3a <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    bb58:	42 e3       	ldi	r20, 0x32	; 50
    bb5a:	56 e7       	ldi	r21, 0x76	; 118
    bb5c:	ee cf       	rjmp	.-36     	; 0xbb3a <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    bb5e:	44 e1       	ldi	r20, 0x14	; 20
    bb60:	56 e7       	ldi	r21, 0x76	; 118
    bb62:	eb cf       	rjmp	.-42     	; 0xbb3a <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    bb64:	47 e1       	ldi	r20, 0x17	; 23
    bb66:	56 e7       	ldi	r21, 0x76	; 118
    bb68:	e8 cf       	rjmp	.-48     	; 0xbb3a <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    bb6a:	47 e1       	ldi	r20, 0x17	; 23
    bb6c:	56 e7       	ldi	r21, 0x76	; 118
    bb6e:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
    bb72:	d0 93 dd 0f 	sts	0x0FDD, r29
    bb76:	c0 93 dc 0f 	sts	0x0FDC, r28
    bb7a:	04 c0       	rjmp	.+8      	; 0xbb84 <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    bb7c:	40 e0       	ldi	r20, 0x00	; 0
    bb7e:	50 e0       	ldi	r21, 0x00	; 0
    bb80:	0e 94 ea 3f 	call	0x7fd4	; 0x7fd4 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    bb84:	21 96       	adiw	r28, 0x01	; 1
    bb86:	ce 3e       	cpi	r28, 0xEE	; 238
    bb88:	82 e0       	ldi	r24, 0x02	; 2
    bb8a:	d8 07       	cpc	r29, r24
    bb8c:	09 f0       	breq	.+2      	; 0xbb90 <load_level_tiles+0xda>
    bb8e:	9e cf       	rjmp	.-196    	; 0xbacc <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    bb90:	df 91       	pop	r29
    bb92:	cf 91       	pop	r28
    bb94:	1f 91       	pop	r17
    bb96:	ff 90       	pop	r15
    bb98:	ef 90       	pop	r14
    bb9a:	08 95       	ret

0000bb9c <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    bb9c:	cf 93       	push	r28
    bb9e:	df 93       	push	r29
    bba0:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    bba2:	6b 8b       	std	Y+19, r22	; 0x13
	p->spawn_y = y;
    bba4:	4c 8b       	std	Y+20, r20	; 0x14
	p->level_score = 0;
    bba6:	18 8a       	std	Y+16, r1	; 0x10
	p->has_over_speed = false;
    bba8:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    bbaa:	18 8e       	std	Y+24, r1	; 0x18
	p->max_speed = MAX_SPEED;
    bbac:	82 e3       	ldi	r24, 0x32	; 50
    bbae:	8f 8b       	std	Y+23, r24	; 0x17
	player_init_shot_state(p);
    bbb0:	ce 01       	movw	r24, r28
    bbb2:	0e 94 d9 51 	call	0xa3b2	; 0xa3b2 <player_init_shot_state>
	player_spawn(p);
    bbb6:	ce 01       	movw	r24, r28
}
    bbb8:	df 91       	pop	r29
    bbba:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    bbbc:	0c 94 07 52 	jmp	0xa40e	; 0xa40e <player_spawn>

0000bbc0 <load_level>:
}

void load_level(int level_number)
{
    bbc0:	8f 92       	push	r8
    bbc2:	9f 92       	push	r9
    bbc4:	af 92       	push	r10
    bbc6:	bf 92       	push	r11
    bbc8:	cf 92       	push	r12
    bbca:	df 92       	push	r13
    bbcc:	ef 92       	push	r14
    bbce:	ff 92       	push	r15
    bbd0:	0f 93       	push	r16
    bbd2:	1f 93       	push	r17
    bbd4:	cf 93       	push	r28
    bbd6:	df 93       	push	r29
    bbd8:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    bbda:	8e ee       	ldi	r24, 0xEE	; 238
    bbdc:	92 e0       	ldi	r25, 0x02	; 2
    bbde:	c8 9f       	mul	r28, r24
    bbe0:	70 01       	movw	r14, r0
    bbe2:	c9 9f       	mul	r28, r25
    bbe4:	f0 0c       	add	r15, r0
    bbe6:	d8 9f       	mul	r29, r24
    bbe8:	f0 0c       	add	r15, r0
    bbea:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    bbec:	10 92 b5 0b 	sts	0x0BB5, r1
    bbf0:	10 92 b4 0b 	sts	0x0BB4, r1
	init_tile_animations(&tile_animations);
    bbf4:	8d eb       	ldi	r24, 0xBD	; 189
    bbf6:	9b e0       	ldi	r25, 0x0B	; 11
    bbf8:	0e 94 93 50 	call	0xa126	; 0xa126 <init_tile_animations>
	init_scope_animation(&scope_animation);
    bbfc:	80 ed       	ldi	r24, 0xD0	; 208
    bbfe:	9f e0       	ldi	r25, 0x0F	; 15
    bc00:	0e 94 ba 50 	call	0xa174	; 0xa174 <init_scope_animation>
	init_sub_animation(&sub_animation);
    bc04:	82 ec       	ldi	r24, 0xC2	; 194
    bc06:	9f e0       	ldi	r25, 0x0F	; 15
    bc08:	0e 94 d2 50 	call	0xa1a4	; 0xa1a4 <init_sub_animation>
	game.current_screen = LEVEL;
    bc0c:	83 e0       	ldi	r24, 0x03	; 3
    bc0e:	80 93 a9 0b 	sts	0x0BA9, r24
	clear_sprites();
    bc12:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
	game.current_level = level_number;
    bc16:	c0 93 aa 0b 	sts	0x0BAA, r28
    bc1a:	8b e5       	ldi	r24, 0x5B	; 91
    bc1c:	a8 2e       	mov	r10, r24
    bc1e:	8c e0       	ldi	r24, 0x0C	; 12
    bc20:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    bc22:	00 e0       	ldi	r16, 0x00	; 0
    bc24:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    bc26:	9e e1       	ldi	r25, 0x1E	; 30
    bc28:	c9 2e       	mov	r12, r25
    bc2a:	d1 2c       	mov	r13, r1
    bc2c:	c8 01       	movw	r24, r16
    bc2e:	b6 01       	movw	r22, r12
    bc30:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    bc34:	d8 2f       	mov	r29, r24
    bc36:	dd 0f       	add	r29, r29
    bc38:	dd 0f       	add	r29, r29
    bc3a:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    bc3c:	ab 01       	movw	r20, r22
    bc3e:	4d 5f       	subi	r20, 0xFD	; 253
    bc40:	5f 4f       	sbci	r21, 0xFF	; 255
    bc42:	c4 2f       	mov	r28, r20
    bc44:	cc 0f       	add	r28, r28
    bc46:	cc 0f       	add	r28, r28
    bc48:	cc 0f       	add	r28, r28
    bc4a:	f8 01       	movw	r30, r16
    bc4c:	ee 0d       	add	r30, r14
    bc4e:	ff 1d       	adc	r31, r15
    bc50:	eb 5f       	subi	r30, 0xFB	; 251
    bc52:	fc 4e       	sbci	r31, 0xEC	; 236
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    bc54:	e4 91       	lpm	r30, Z
    bc56:	45 01       	movw	r8, r10
    bc58:	d5 01       	movw	r26, r10
    bc5a:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    bc5c:	e8 35       	cpi	r30, 0x58	; 88
    bc5e:	31 f4       	brne	.+12     	; 0xbc6c <load_level+0xac>
		{
			prep_player(&player1, x, y);
    bc60:	4c 2f       	mov	r20, r28
    bc62:	6d 2f       	mov	r22, r29
    bc64:	8a ed       	ldi	r24, 0xDA	; 218
    bc66:	9b e0       	ldi	r25, 0x0B	; 11
    bc68:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <prep_player>
    bc6c:	bf ef       	ldi	r27, 0xFF	; 255
    bc6e:	ab 1a       	sub	r10, r27
    bc70:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    bc72:	f4 01       	movw	r30, r8
    bc74:	80 81       	ld	r24, Z
    bc76:	83 36       	cpi	r24, 0x63	; 99
    bc78:	31 f4       	brne	.+12     	; 0xbc86 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    bc7a:	4c 2f       	mov	r20, r28
    bc7c:	6d 2f       	mov	r22, r29
    bc7e:	89 e4       	ldi	r24, 0x49	; 73
    bc80:	9f e0       	ldi	r25, 0x0F	; 15
    bc82:	0e 94 ce 5d 	call	0xbb9c	; 0xbb9c <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    bc86:	0f 5f       	subi	r16, 0xFF	; 255
    bc88:	1f 4f       	sbci	r17, 0xFF	; 255
    bc8a:	0e 3e       	cpi	r16, 0xEE	; 238
    bc8c:	f2 e0       	ldi	r31, 0x02	; 2
    bc8e:	1f 07       	cpc	r17, r31
    bc90:	69 f6       	brne	.-102    	; 0xbc2c <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    bc92:	60 e0       	ldi	r22, 0x00	; 0
    bc94:	8a ed       	ldi	r24, 0xDA	; 218
    bc96:	9b e0       	ldi	r25, 0x0B	; 11
    bc98:	0e 94 04 54 	call	0xa808	; 0xa808 <render_hud>
	render_hud(&player2, 15);
    bc9c:	6f e0       	ldi	r22, 0x0F	; 15
    bc9e:	89 e4       	ldi	r24, 0x49	; 73
    bca0:	9f e0       	ldi	r25, 0x0F	; 15
    bca2:	0e 94 04 54 	call	0xa808	; 0xa808 <render_hud>
	render_score(&player1, 0);
    bca6:	60 e0       	ldi	r22, 0x00	; 0
    bca8:	8a ed       	ldi	r24, 0xDA	; 218
    bcaa:	9b e0       	ldi	r25, 0x0B	; 11
    bcac:	0e 94 21 54 	call	0xa842	; 0xa842 <render_score>
	render_score(&player2, 15);
    bcb0:	6f e0       	ldi	r22, 0x0F	; 15
    bcb2:	89 e4       	ldi	r24, 0x49	; 73
    bcb4:	9f e0       	ldi	r25, 0x0F	; 15
    bcb6:	0e 94 21 54 	call	0xa842	; 0xa842 <render_score>
	Print(14, 0, (char*) strVertSep);
    bcba:	4f e8       	ldi	r20, 0x8F	; 143
    bcbc:	52 e0       	ldi	r21, 0x02	; 2
    bcbe:	60 e0       	ldi	r22, 0x00	; 0
    bcc0:	70 e0       	ldi	r23, 0x00	; 0
    bcc2:	8e e0       	ldi	r24, 0x0E	; 14
    bcc4:	90 e0       	ldi	r25, 0x00	; 0
    bcc6:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(14, 1, (char*) strVertSep);
    bcca:	4f e8       	ldi	r20, 0x8F	; 143
    bccc:	52 e0       	ldi	r21, 0x02	; 2
    bcce:	61 e0       	ldi	r22, 0x01	; 1
    bcd0:	70 e0       	ldi	r23, 0x00	; 0
    bcd2:	8e e0       	ldi	r24, 0x0E	; 14
    bcd4:	90 e0       	ldi	r25, 0x00	; 0
    bcd6:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(14, 2, (char*) strVertSep);
    bcda:	4f e8       	ldi	r20, 0x8F	; 143
    bcdc:	52 e0       	ldi	r21, 0x02	; 2
    bcde:	62 e0       	ldi	r22, 0x02	; 2
    bce0:	70 e0       	ldi	r23, 0x00	; 0
    bce2:	8e e0       	ldi	r24, 0x0E	; 14
    bce4:	90 e0       	ldi	r25, 0x00	; 0
    bce6:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	load_level_tiles(false);
    bcea:	80 e0       	ldi	r24, 0x00	; 0
}
    bcec:	df 91       	pop	r29
    bcee:	cf 91       	pop	r28
    bcf0:	1f 91       	pop	r17
    bcf2:	0f 91       	pop	r16
    bcf4:	ff 90       	pop	r15
    bcf6:	ef 90       	pop	r14
    bcf8:	df 90       	pop	r13
    bcfa:	cf 90       	pop	r12
    bcfc:	bf 90       	pop	r11
    bcfe:	af 90       	pop	r10
    bd00:	9f 90       	pop	r9
    bd02:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    bd04:	0c 94 5b 5d 	jmp	0xbab6	; 0xbab6 <load_level_tiles>

0000bd08 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    bd08:	cf 93       	push	r28
    bd0a:	df 93       	push	r29
    bd0c:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    bd0e:	61 e0       	ldi	r22, 0x01	; 1
    bd10:	83 e0       	ldi	r24, 0x03	; 3
    bd12:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <FadeOut>
	ClearVram();
    bd16:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <ClearVram>
	clear_sprites();
    bd1a:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    bd1e:	d0 e0       	ldi	r29, 0x00	; 0
    bd20:	ae 01       	movw	r20, r28
    bd22:	84 e0       	ldi	r24, 0x04	; 4
    bd24:	44 0f       	add	r20, r20
    bd26:	55 1f       	adc	r21, r21
    bd28:	8a 95       	dec	r24
    bd2a:	e1 f7       	brne	.-8      	; 0xbd24 <level_transition+0x1c>
    bd2c:	48 56       	subi	r20, 0x68	; 104
    bd2e:	5e 4f       	sbci	r21, 0xFE	; 254
    bd30:	6c e0       	ldi	r22, 0x0C	; 12
    bd32:	70 e0       	ldi	r23, 0x00	; 0
    bd34:	88 e0       	ldi	r24, 0x08	; 8
    bd36:	90 e0       	ldi	r25, 0x00	; 0
    bd38:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	FadeIn(1, true);
    bd3c:	61 e0       	ldi	r22, 0x01	; 1
    bd3e:	81 e0       	ldi	r24, 0x01	; 1
    bd40:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    bd44:	84 e0       	ldi	r24, 0x04	; 4
    bd46:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBWaitSeconds>
	FadeOut(1, true);
    bd4a:	61 e0       	ldi	r22, 0x01	; 1
    bd4c:	81 e0       	ldi	r24, 0x01	; 1
    bd4e:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <FadeOut>
	ClearVram();
    bd52:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    bd56:	60 e0       	ldi	r22, 0x00	; 0
    bd58:	83 e0       	ldi	r24, 0x03	; 3
    bd5a:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <FadeIn>
	load_level(index);
    bd5e:	ce 01       	movw	r24, r28
}
    bd60:	df 91       	pop	r29
    bd62:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    bd64:	0c 94 e0 5d 	jmp	0xbbc0	; 0xbbc0 <load_level>

0000bd68 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    bd68:	80 ed       	ldi	r24, 0xD0	; 208
    bd6a:	9f e0       	ldi	r25, 0x0F	; 15
    bd6c:	0e 94 c7 54 	call	0xa98e	; 0xa98e <render_scope>
    bd70:	88 23       	and	r24, r24
    bd72:	19 f0       	breq	.+6      	; 0xbd7a <render_boss_fight_scope_load+0x12>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    bd74:	82 e0       	ldi	r24, 0x02	; 2
    bd76:	80 93 ac 0b 	sts	0x0BAC, r24
    bd7a:	08 95       	ret

0000bd7c <render_boss_fight_sub_load>:
		SFX_ALARM;
	}
}

void render_boss_fight_sub_load()
{
    bd7c:	0f 93       	push	r16
    bd7e:	1f 93       	push	r17
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    bd80:	82 ec       	ldi	r24, 0xC2	; 194
    bd82:	9f e0       	ldi	r25, 0x0F	; 15
    bd84:	0e 94 93 4e 	call	0x9d26	; 0x9d26 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    bd88:	ac 01       	movw	r20, r24
    bd8a:	64 e0       	ldi	r22, 0x04	; 4
    bd8c:	81 e0       	ldi	r24, 0x01	; 1
    bd8e:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	if (sub_animation.anim.reversing)
    bd92:	80 91 c7 0f 	lds	r24, 0x0FC7
    bd96:	88 23       	and	r24, r24
    bd98:	d9 f0       	breq	.+54     	; 0xbdd0 <render_boss_fight_sub_load+0x54>
	{
		game.boss_fight_status = BOSS_FIGHT;
    bd9a:	84 e0       	ldi	r24, 0x04	; 4
    bd9c:	80 93 ac 0b 	sts	0x0BAC, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72);
    bda0:	00 e0       	ldi	r16, 0x00	; 0
    bda2:	10 e0       	ldi	r17, 0x00	; 0
    bda4:	20 e9       	ldi	r18, 0x90	; 144
    bda6:	32 e4       	ldi	r19, 0x42	; 66
    bda8:	40 e0       	ldi	r20, 0x00	; 0
    bdaa:	50 e0       	ldi	r21, 0x00	; 0
    bdac:	60 ec       	ldi	r22, 0xC0	; 192
    bdae:	72 e4       	ldi	r23, 0x42	; 66
    bdb0:	82 e1       	ldi	r24, 0x12	; 18
    bdb2:	90 e1       	ldi	r25, 0x10	; 16
    bdb4:	0e 94 35 51 	call	0xa26a	; 0xa26a <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72);
    bdb8:	00 e0       	ldi	r16, 0x00	; 0
    bdba:	10 e0       	ldi	r17, 0x00	; 0
    bdbc:	20 e9       	ldi	r18, 0x90	; 144
    bdbe:	32 e4       	ldi	r19, 0x42	; 66
    bdc0:	40 e0       	ldi	r20, 0x00	; 0
    bdc2:	50 e0       	ldi	r21, 0x00	; 0
    bdc4:	60 e4       	ldi	r22, 0x40	; 64
    bdc6:	73 e4       	ldi	r23, 0x43	; 67
    bdc8:	8e ed       	ldi	r24, 0xDE	; 222
    bdca:	9f e0       	ldi	r25, 0x0F	; 15
    bdcc:	0e 94 35 51 	call	0xa26a	; 0xa26a <init_turret>
	}
}
    bdd0:	1f 91       	pop	r17
    bdd2:	0f 91       	pop	r16
    bdd4:	08 95       	ret

0000bdd6 <render_boss_fight_sub_sinking>:

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    bdd6:	82 ec       	ldi	r24, 0xC2	; 194
    bdd8:	9f e0       	ldi	r25, 0x0F	; 15
    bdda:	0e 94 93 4e 	call	0x9d26	; 0x9d26 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    bdde:	20 91 c2 0f 	lds	r18, 0x0FC2
    bde2:	21 11       	cpse	r18, r1
    bde4:	05 c0       	rjmp	.+10     	; 0xbdf0 <render_boss_fight_sub_sinking+0x1a>
    bde6:	ac 01       	movw	r20, r24
    bde8:	64 e0       	ldi	r22, 0x04	; 4
    bdea:	81 e0       	ldi	r24, 0x01	; 1
    bdec:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	if (sub_animation.anim.looped)
    bdf0:	80 91 c6 0f 	lds	r24, 0x0FC6
    bdf4:	88 23       	and	r24, r24
    bdf6:	19 f0       	breq	.+6      	; 0xbdfe <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    bdf8:	88 e0       	ldi	r24, 0x08	; 8
    bdfa:	80 93 ac 0b 	sts	0x0BAC, r24
    bdfe:	08 95       	ret

0000be00 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    be00:	ef 92       	push	r14
    be02:	ff 92       	push	r15
    be04:	0f 93       	push	r16
    be06:	1f 93       	push	r17
    be08:	cf 93       	push	r28
    be0a:	df 93       	push	r29
    be0c:	1f 92       	push	r1
    be0e:	cd b7       	in	r28, 0x3d	; 61
    be10:	de b7       	in	r29, 0x3e	; 62
    be12:	7c 01       	movw	r14, r24
    be14:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shared.x, t->shared.y, 1, 1);
    be16:	fc 01       	movw	r30, r24
    be18:	67 81       	ldd	r22, Z+7	; 0x07
    be1a:	70 85       	ldd	r23, Z+8	; 0x08
    be1c:	81 85       	ldd	r24, Z+9	; 0x09
    be1e:	92 85       	ldd	r25, Z+10	; 0x0a
    be20:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    be24:	46 2f       	mov	r20, r22
    be26:	f7 01       	movw	r30, r14
    be28:	63 81       	ldd	r22, Z+3	; 0x03
    be2a:	74 81       	ldd	r23, Z+4	; 0x04
    be2c:	85 81       	ldd	r24, Z+5	; 0x05
    be2e:	96 81       	ldd	r25, Z+6	; 0x06
    be30:	49 83       	std	Y+1, r20	; 0x01
    be32:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    be36:	01 e0       	ldi	r16, 0x01	; 1
    be38:	21 e0       	ldi	r18, 0x01	; 1
    be3a:	49 81       	ldd	r20, Y+1	; 0x01
    be3c:	81 2f       	mov	r24, r17
    be3e:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
}
    be42:	0f 90       	pop	r0
    be44:	df 91       	pop	r29
    be46:	cf 91       	pop	r28
    be48:	1f 91       	pop	r17
    be4a:	0f 91       	pop	r16
    be4c:	ff 90       	pop	r15
    be4e:	ef 90       	pop	r14
    be50:	08 95       	ret

0000be52 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    be52:	ef 92       	push	r14
    be54:	ff 92       	push	r15
    be56:	0f 93       	push	r16
    be58:	1f 93       	push	r17
    be5a:	cf 93       	push	r28
    be5c:	df 93       	push	r29
    be5e:	1f 92       	push	r1
    be60:	cd b7       	in	r28, 0x3d	; 61
    be62:	de b7       	in	r29, 0x3e	; 62
    be64:	7c 01       	movw	r14, r24
    be66:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
    be68:	fc 01       	movw	r30, r24
    be6a:	63 89       	ldd	r22, Z+19	; 0x13
    be6c:	74 89       	ldd	r23, Z+20	; 0x14
    be6e:	85 89       	ldd	r24, Z+21	; 0x15
    be70:	96 89       	ldd	r25, Z+22	; 0x16
    be72:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    be76:	46 2f       	mov	r20, r22
    be78:	f7 01       	movw	r30, r14
    be7a:	67 85       	ldd	r22, Z+15	; 0x0f
    be7c:	70 89       	ldd	r23, Z+16	; 0x10
    be7e:	81 89       	ldd	r24, Z+17	; 0x11
    be80:	92 89       	ldd	r25, Z+18	; 0x12
    be82:	49 83       	std	Y+1, r20	; 0x01
    be84:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    be88:	01 e0       	ldi	r16, 0x01	; 1
    be8a:	21 e0       	ldi	r18, 0x01	; 1
    be8c:	49 81       	ldd	r20, Y+1	; 0x01
    be8e:	81 2f       	mov	r24, r17
    be90:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
}
    be94:	0f 90       	pop	r0
    be96:	df 91       	pop	r29
    be98:	cf 91       	pop	r28
    be9a:	1f 91       	pop	r17
    be9c:	0f 91       	pop	r16
    be9e:	ff 90       	pop	r15
    bea0:	ef 90       	pop	r14
    bea2:	08 95       	ret

0000bea4 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    bea4:	cf 92       	push	r12
    bea6:	df 92       	push	r13
    bea8:	ef 92       	push	r14
    beaa:	ff 92       	push	r15
    beac:	cf 93       	push	r28
    beae:	df 93       	push	r29
    beb0:	ec 01       	movw	r28, r24
    beb2:	36 2f       	mov	r19, r22
	u8 x = t->shared.x / 8;
    beb4:	cb 80       	ldd	r12, Y+3	; 0x03
    beb6:	dc 80       	ldd	r13, Y+4	; 0x04
    beb8:	ed 80       	ldd	r14, Y+5	; 0x05
    beba:	fe 80       	ldd	r15, Y+6	; 0x06
	u8 y = t->shared.y / 8 - 3;
    bebc:	6f 81       	ldd	r22, Y+7	; 0x07
    bebe:	78 85       	ldd	r23, Y+8	; 0x08
    bec0:	89 85       	ldd	r24, Y+9	; 0x09
    bec2:	9a 85       	ldd	r25, Y+10	; 0x0a
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    bec4:	2b 85       	ldd	r18, Y+11	; 0x0b
    bec6:	21 11       	cpse	r18, r1
    bec8:	27 c0       	rjmp	.+78     	; 0xbf18 <update_turret+0x74>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
	u8 y = t->shared.y / 8 - 3;
    beca:	20 e0       	ldi	r18, 0x00	; 0
    becc:	30 e0       	ldi	r19, 0x00	; 0
    bece:	40 e0       	ldi	r20, 0x00	; 0
    bed0:	5e e3       	ldi	r21, 0x3E	; 62
    bed2:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    bed6:	20 e0       	ldi	r18, 0x00	; 0
    bed8:	30 e0       	ldi	r19, 0x00	; 0
    beda:	40 e4       	ldi	r20, 0x40	; 64
    bedc:	50 e4       	ldi	r21, 0x40	; 64
    bede:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    bee2:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	int tile_index = (y * 30) + x;
    bee6:	8e e1       	ldi	r24, 0x1E	; 30
    bee8:	68 9f       	mul	r22, r24
    beea:	e0 01       	movw	r28, r0
    beec:	11 24       	eor	r1, r1
	MoveSprite(sprite_index, t->shot[0].shared.x, t->shot[0].shared.y, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / 8;
    beee:	20 e0       	ldi	r18, 0x00	; 0
    bef0:	30 e0       	ldi	r19, 0x00	; 0
    bef2:	40 e0       	ldi	r20, 0x00	; 0
    bef4:	5e e3       	ldi	r21, 0x3E	; 62
    bef6:	c7 01       	movw	r24, r14
    bef8:	b6 01       	movw	r22, r12
    befa:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    befe:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
	u8 y = t->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    bf02:	c6 0f       	add	r28, r22
    bf04:	d1 1d       	adc	r29, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    bf06:	be 01       	movw	r22, r28
    bf08:	8d eb       	ldi	r24, 0xBD	; 189
    bf0a:	9b e0       	ldi	r25, 0x0B	; 11
    bf0c:	0e 94 8f 58 	call	0xb11e	; 0xb11e <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    bf10:	c6 5a       	subi	r28, 0xA6	; 166
    bf12:	d3 4f       	sbci	r29, 0xF3	; 243
    bf14:	19 82       	std	Y+1, r1	; 0x01
    bf16:	54 c0       	rjmp	.+168    	; 0xbfc0 <update_turret+0x11c>
	}
	else if (t->shared.direction == D_LEFT)
    bf18:	98 81       	ld	r25, Y
    bf1a:	93 30       	cpi	r25, 0x03	; 3
    bf1c:	19 f5       	brne	.+70     	; 0xbf64 <update_turret+0xc0>
	{
		if (t->shared.x < left_limit)
    bf1e:	63 2f       	mov	r22, r19
    bf20:	70 e0       	ldi	r23, 0x00	; 0
    bf22:	80 e0       	ldi	r24, 0x00	; 0
    bf24:	90 e0       	ldi	r25, 0x00	; 0
    bf26:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    bf2a:	9b 01       	movw	r18, r22
    bf2c:	ac 01       	movw	r20, r24
    bf2e:	c7 01       	movw	r24, r14
    bf30:	b6 01       	movw	r22, r12
    bf32:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    bf36:	87 ff       	sbrs	r24, 7
    bf38:	02 c0       	rjmp	.+4      	; 0xbf3e <update_turret+0x9a>
		{
			t->shared.direction = D_RIGHT;
    bf3a:	81 e0       	ldi	r24, 0x01	; 1
    bf3c:	24 c0       	rjmp	.+72     	; 0xbf86 <update_turret+0xe2>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
		}
		else
		{
			t->shared.x -= FRAME_TIME*t->shared.speed;
    bf3e:	69 81       	ldd	r22, Y+1	; 0x01
    bf40:	70 e0       	ldi	r23, 0x00	; 0
    bf42:	80 e0       	ldi	r24, 0x00	; 0
    bf44:	90 e0       	ldi	r25, 0x00	; 0
    bf46:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    bf4a:	25 e6       	ldi	r18, 0x65	; 101
    bf4c:	38 e8       	ldi	r19, 0x88	; 136
    bf4e:	48 e8       	ldi	r20, 0x88	; 136
    bf50:	5c e3       	ldi	r21, 0x3C	; 60
    bf52:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    bf56:	9b 01       	movw	r18, r22
    bf58:	ac 01       	movw	r20, r24
    bf5a:	c7 01       	movw	r24, r14
    bf5c:	b6 01       	movw	r22, r12
    bf5e:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    bf62:	2a c0       	rjmp	.+84     	; 0xbfb8 <update_turret+0x114>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    bf64:	91 30       	cpi	r25, 0x01	; 1
    bf66:	61 f5       	brne	.+88     	; 0xbfc0 <update_turret+0x11c>
	{
		if (t->shared.x > right_limit)
    bf68:	64 2f       	mov	r22, r20
    bf6a:	70 e0       	ldi	r23, 0x00	; 0
    bf6c:	80 e0       	ldi	r24, 0x00	; 0
    bf6e:	90 e0       	ldi	r25, 0x00	; 0
    bf70:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    bf74:	9b 01       	movw	r18, r22
    bf76:	ac 01       	movw	r20, r24
    bf78:	c7 01       	movw	r24, r14
    bf7a:	b6 01       	movw	r22, r12
    bf7c:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    bf80:	18 16       	cp	r1, r24
    bf82:	44 f4       	brge	.+16     	; 0xbf94 <update_turret+0xf0>
		{
			t->shared.direction = D_LEFT;
    bf84:	83 e0       	ldi	r24, 0x03	; 3
    bf86:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+50);
    bf88:	6c e8       	ldi	r22, 0x8C	; 140
    bf8a:	8a e5       	ldi	r24, 0x5A	; 90
    bf8c:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    bf90:	89 83       	std	Y+1, r24	; 0x01
    bf92:	16 c0       	rjmp	.+44     	; 0xbfc0 <update_turret+0x11c>
		}
		else
		{
			t->shared.x += FRAME_TIME*t->shared.speed;
    bf94:	69 81       	ldd	r22, Y+1	; 0x01
    bf96:	70 e0       	ldi	r23, 0x00	; 0
    bf98:	80 e0       	ldi	r24, 0x00	; 0
    bf9a:	90 e0       	ldi	r25, 0x00	; 0
    bf9c:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    bfa0:	25 e6       	ldi	r18, 0x65	; 101
    bfa2:	38 e8       	ldi	r19, 0x88	; 136
    bfa4:	48 e8       	ldi	r20, 0x88	; 136
    bfa6:	5c e3       	ldi	r21, 0x3C	; 60
    bfa8:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    bfac:	9b 01       	movw	r18, r22
    bfae:	ac 01       	movw	r20, r24
    bfb0:	c7 01       	movw	r24, r14
    bfb2:	b6 01       	movw	r22, r12
    bfb4:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    bfb8:	6b 83       	std	Y+3, r22	; 0x03
    bfba:	7c 83       	std	Y+4, r23	; 0x04
    bfbc:	8d 83       	std	Y+5, r24	; 0x05
    bfbe:	9e 83       	std	Y+6, r25	; 0x06
		}
	}
}
    bfc0:	df 91       	pop	r29
    bfc2:	cf 91       	pop	r28
    bfc4:	ff 90       	pop	r15
    bfc6:	ef 90       	pop	r14
    bfc8:	df 90       	pop	r13
    bfca:	cf 90       	pop	r12
    bfcc:	08 95       	ret

0000bfce <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    bfce:	0f 93       	push	r16
    bfd0:	1f 93       	push	r17
    bfd2:	cf 93       	push	r28
    bfd4:	df 93       	push	r29
    bfd6:	8c 01       	movw	r16, r24
    bfd8:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    bfda:	fc 01       	movw	r30, r24
    bfdc:	83 85       	ldd	r24, Z+11	; 0x0b
    bfde:	81 11       	cpse	r24, r1
    bfe0:	02 c0       	rjmp	.+4      	; 0xbfe6 <update_turret_shot+0x18>
	{
		s->active = 0;
    bfe2:	1e 86       	std	Y+14, r1	; 0x0e
		return;
    bfe4:	62 c0       	rjmp	.+196    	; 0xc0aa <update_turret_shot+0xdc>
	}
	if (!s->active)
    bfe6:	8e 85       	ldd	r24, Y+14	; 0x0e
    bfe8:	81 11       	cpse	r24, r1
    bfea:	20 c0       	rjmp	.+64     	; 0xc02c <update_turret_shot+0x5e>
	{
		s->active = 1;
    bfec:	81 e0       	ldi	r24, 0x01	; 1
    bfee:	8e 87       	std	Y+14, r24	; 0x0e
		s->shared.x = t->shared.x+3;
    bff0:	20 e0       	ldi	r18, 0x00	; 0
    bff2:	30 e0       	ldi	r19, 0x00	; 0
    bff4:	40 e4       	ldi	r20, 0x40	; 64
    bff6:	50 e4       	ldi	r21, 0x40	; 64
    bff8:	f8 01       	movw	r30, r16
    bffa:	63 81       	ldd	r22, Z+3	; 0x03
    bffc:	74 81       	ldd	r23, Z+4	; 0x04
    bffe:	85 81       	ldd	r24, Z+5	; 0x05
    c000:	96 81       	ldd	r25, Z+6	; 0x06
    c002:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c006:	6b 83       	std	Y+3, r22	; 0x03
    c008:	7c 83       	std	Y+4, r23	; 0x04
    c00a:	8d 83       	std	Y+5, r24	; 0x05
    c00c:	9e 83       	std	Y+6, r25	; 0x06
		s->shared.y = t->shared.y+3;
    c00e:	20 e0       	ldi	r18, 0x00	; 0
    c010:	30 e0       	ldi	r19, 0x00	; 0
    c012:	40 e4       	ldi	r20, 0x40	; 64
    c014:	50 e4       	ldi	r21, 0x40	; 64
    c016:	f8 01       	movw	r30, r16
    c018:	67 81       	ldd	r22, Z+7	; 0x07
    c01a:	70 85       	ldd	r23, Z+8	; 0x08
    c01c:	81 85       	ldd	r24, Z+9	; 0x09
    c01e:	92 85       	ldd	r25, Z+10	; 0x0a
    c020:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c024:	6f 83       	std	Y+7, r22	; 0x07
    c026:	78 87       	std	Y+8, r23	; 0x08
    c028:	89 87       	std	Y+9, r24	; 0x09
    c02a:	9a 87       	std	Y+10, r25	; 0x0a
		SFX_CANNONBALL;
	}
	s->shared.y += FRAME_TIME*BOSS_TURRET_SHOT_SPEED;
    c02c:	23 e3       	ldi	r18, 0x33	; 51
    c02e:	35 e5       	ldi	r19, 0x55	; 85
    c030:	45 e8       	ldi	r20, 0x85	; 133
    c032:	50 e4       	ldi	r21, 0x40	; 64
    c034:	6f 81       	ldd	r22, Y+7	; 0x07
    c036:	78 85       	ldd	r23, Y+8	; 0x08
    c038:	89 85       	ldd	r24, Y+9	; 0x09
    c03a:	9a 85       	ldd	r25, Y+10	; 0x0a
    c03c:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c040:	6f 83       	std	Y+7, r22	; 0x07
    c042:	78 87       	std	Y+8, r23	; 0x08
    c044:	89 87       	std	Y+9, r24	; 0x09
    c046:	9a 87       	std	Y+10, r25	; 0x0a
	
	/* Level boundries first */
	if (s->shared.y + 8 > 216)
    c048:	20 e0       	ldi	r18, 0x00	; 0
    c04a:	30 e0       	ldi	r19, 0x00	; 0
    c04c:	40 e0       	ldi	r20, 0x00	; 0
    c04e:	51 e4       	ldi	r21, 0x41	; 65
    c050:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c054:	20 e0       	ldi	r18, 0x00	; 0
    c056:	30 e0       	ldi	r19, 0x00	; 0
    c058:	48 e5       	ldi	r20, 0x58	; 88
    c05a:	53 e4       	ldi	r21, 0x43	; 67
    c05c:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    c060:	18 16       	cp	r1, r24
    c062:	0c f4       	brge	.+2      	; 0xc066 <update_turret_shot+0x98>
    c064:	be cf       	rjmp	.-132    	; 0xbfe2 <update_turret_shot+0x14>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    c066:	00 91 b8 0b 	lds	r16, 0x0BB8
    c06a:	10 91 b9 0b 	lds	r17, 0x0BB9
    c06e:	be 01       	movw	r22, r28
    c070:	c8 01       	movw	r24, r16
    c072:	0e 94 e6 56 	call	0xadcc	; 0xadcc <player_shot>
    c076:	88 23       	and	r24, r24
    c078:	c1 f0       	breq	.+48     	; 0xc0aa <update_turret_shot+0xdc>
    c07a:	f8 01       	movw	r30, r16
    c07c:	85 89       	ldd	r24, Z+21	; 0x15
    c07e:	80 fd       	sbrc	r24, 0
    c080:	14 c0       	rjmp	.+40     	; 0xc0aa <update_turret_shot+0xdc>
	{
		game.boss_fight_player_lives--;
    c082:	90 91 ae 0b 	lds	r25, 0x0BAE
    c086:	91 50       	subi	r25, 0x01	; 1
    c088:	90 93 ae 0b 	sts	0x0BAE, r25
		if (game.boss_fight_player_lives <= 0)
    c08c:	91 11       	cpse	r25, r1
    c08e:	03 c0       	rjmp	.+6      	; 0xc096 <update_turret_shot+0xc8>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    c090:	80 e1       	ldi	r24, 0x10	; 16
    c092:	80 93 ac 0b 	sts	0x0BAC, r24
		}
		s->active = 0;
    c096:	1e 86       	std	Y+14, r1	; 0x0e
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c098:	60 91 ad 0b 	lds	r22, 0x0BAD
    c09c:	c8 01       	movw	r24, r16
		SFX_TANK_EXPLODE;
	}
}
    c09e:	df 91       	pop	r29
    c0a0:	cf 91       	pop	r28
    c0a2:	1f 91       	pop	r17
    c0a4:	0f 91       	pop	r16
		if (game.boss_fight_player_lives <= 0)
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c0a6:	0c 94 15 58 	jmp	0xb02a	; 0xb02a <kill_player>
		SFX_TANK_EXPLODE;
	}
}
    c0aa:	df 91       	pop	r29
    c0ac:	cf 91       	pop	r28
    c0ae:	1f 91       	pop	r17
    c0b0:	0f 91       	pop	r16
    c0b2:	08 95       	ret

0000c0b4 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    c0b4:	10 92 a9 0b 	sts	0x0BA9, r1
	clear_sprites();
    c0b8:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else	
	Print(7, 13, (char*) str1Player);
    c0bc:	4e e1       	ldi	r20, 0x1E	; 30
    c0be:	53 e0       	ldi	r21, 0x03	; 3
    c0c0:	6d e0       	ldi	r22, 0x0D	; 13
    c0c2:	70 e0       	ldi	r23, 0x00	; 0
    c0c4:	87 e0       	ldi	r24, 0x07	; 7
    c0c6:	90 e0       	ldi	r25, 0x00	; 0
    c0c8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(7, 14, (char*) str2Player);
    c0cc:	4d e0       	ldi	r20, 0x0D	; 13
    c0ce:	53 e0       	ldi	r21, 0x03	; 3
    c0d0:	6e e0       	ldi	r22, 0x0E	; 14
    c0d2:	70 e0       	ldi	r23, 0x00	; 0
    c0d4:	87 e0       	ldi	r24, 0x07	; 7
    c0d6:	90 e0       	ldi	r25, 0x00	; 0
    c0d8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(7, 15, (char*) strHighscores);
    c0dc:	49 ea       	ldi	r20, 0xA9	; 169
    c0de:	52 e0       	ldi	r21, 0x02	; 2
    c0e0:	6f e0       	ldi	r22, 0x0F	; 15
    c0e2:	70 e0       	ldi	r23, 0x00	; 0
    c0e4:	87 e0       	ldi	r24, 0x07	; 7
    c0e6:	90 e0       	ldi	r25, 0x00	; 0
    c0e8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(7, 13, (char*) str1Player);
    c0ec:	4e e1       	ldi	r20, 0x1E	; 30
    c0ee:	53 e0       	ldi	r21, 0x03	; 3
    c0f0:	6d e0       	ldi	r22, 0x0D	; 13
    c0f2:	70 e0       	ldi	r23, 0x00	; 0
    c0f4:	87 e0       	ldi	r24, 0x07	; 7
    c0f6:	90 e0       	ldi	r25, 0x00	; 0
    c0f8:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(5, 26, (char*) strCopyright);
    c0fc:	43 eb       	ldi	r20, 0xB3	; 179
    c0fe:	52 e0       	ldi	r21, 0x02	; 2
    c100:	6a e1       	ldi	r22, 0x1A	; 26
    c102:	70 e0       	ldi	r23, 0x00	; 0
    c104:	85 e0       	ldi	r24, 0x05	; 5
    c106:	90 e0       	ldi	r25, 0x00	; 0
    c108:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    c10c:	40 e0       	ldi	r20, 0x00	; 0
    c10e:	6b e8       	ldi	r22, 0x8B	; 139
    c110:	7c e3       	ldi	r23, 0x3C	; 60
    c112:	80 e0       	ldi	r24, 0x00	; 0
    c114:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    c118:	4e e3       	ldi	r20, 0x3E	; 62
    c11a:	56 e7       	ldi	r21, 0x76	; 118
    c11c:	65 e0       	ldi	r22, 0x05	; 5
    c11e:	84 e0       	ldi	r24, 0x04	; 4
    c120:	0c 94 6c 4d 	jmp	0x9ad8	; 0x9ad8 <DrawMap>

0000c124 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    c124:	fc 01       	movw	r30, r24
    c126:	20 81       	ld	r18, Z
    c128:	31 81       	ldd	r19, Z+1	; 0x01
    c12a:	28 70       	andi	r18, 0x08	; 8
    c12c:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c12e:	81 e0       	ldi	r24, 0x01	; 1
    c130:	23 2b       	or	r18, r19
    c132:	09 f4       	brne	.+2      	; 0xc136 <select_pressed+0x12>
    c134:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    c136:	08 95       	ret

0000c138 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    c138:	ff 92       	push	r15
    c13a:	0f 93       	push	r16
    c13c:	1f 93       	push	r17
    c13e:	cf 93       	push	r28
    c140:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    c142:	81 e0       	ldi	r24, 0x01	; 1
    c144:	80 93 a9 0b 	sts	0x0BA9, r24
	clear_sprites();
    c148:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    c14c:	4b e0       	ldi	r20, 0x0B	; 11
    c14e:	56 e7       	ldi	r21, 0x76	; 118
    c150:	61 e0       	ldi	r22, 0x01	; 1
    c152:	87 e0       	ldi	r24, 0x07	; 7
    c154:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    c158:	45 e0       	ldi	r20, 0x05	; 5
    c15a:	56 e7       	ldi	r21, 0x76	; 118
    c15c:	61 e0       	ldi	r22, 0x01	; 1
    c15e:	84 e1       	ldi	r24, 0x14	; 20
    c160:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    c164:	49 ea       	ldi	r20, 0xA9	; 169
    c166:	52 e0       	ldi	r21, 0x02	; 2
    c168:	62 e0       	ldi	r22, 0x02	; 2
    c16a:	70 e0       	ldi	r23, 0x00	; 0
    c16c:	8a e0       	ldi	r24, 0x0A	; 10
    c16e:	90 e0       	ldi	r25, 0x00	; 0
    c170:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    c174:	08 e6       	ldi	r16, 0x68	; 104
    c176:	1b e0       	ldi	r17, 0x0B	; 11
    c178:	c7 e0       	ldi	r28, 0x07	; 7
    c17a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    c17c:	ff 24       	eor	r15, r15
    c17e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    c180:	20 e0       	ldi	r18, 0x00	; 0
    c182:	4f 2d       	mov	r20, r15
    c184:	be 01       	movw	r22, r28
    c186:	82 e0       	ldi	r24, 0x02	; 2
    c188:	90 e0       	ldi	r25, 0x00	; 0
    c18a:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
		PrintChar(3, y, '.');
    c18e:	4e e2       	ldi	r20, 0x2E	; 46
    c190:	be 01       	movw	r22, r28
    c192:	83 e0       	ldi	r24, 0x03	; 3
    c194:	90 e0       	ldi	r25, 0x00	; 0
    c196:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
    c19a:	f8 01       	movw	r30, r16
    c19c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    c19e:	80 81       	ld	r24, Z
    c1a0:	93 e0       	ldi	r25, 0x03	; 3
    c1a2:	89 9f       	mul	r24, r25
    c1a4:	a0 01       	movw	r20, r0
    c1a6:	11 24       	eor	r1, r1
    c1a8:	45 57       	subi	r20, 0x75	; 117
    c1aa:	54 4f       	sbci	r21, 0xF4	; 244
    c1ac:	23 e0       	ldi	r18, 0x03	; 3
    c1ae:	6c 2f       	mov	r22, r28
    c1b0:	85 e0       	ldi	r24, 0x05	; 5
    c1b2:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
		Print(9, y, (char*) strOwns);
    c1b6:	45 e7       	ldi	r20, 0x75	; 117
    c1b8:	52 e0       	ldi	r21, 0x02	; 2
    c1ba:	be 01       	movw	r22, r28
    c1bc:	89 e0       	ldi	r24, 0x09	; 9
    c1be:	90 e0       	ldi	r25, 0x00	; 0
    c1c0:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    c1c4:	f8 01       	movw	r30, r16
    c1c6:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    c1c8:	80 81       	ld	r24, Z
    c1ca:	e3 e0       	ldi	r30, 0x03	; 3
    c1cc:	8e 9f       	mul	r24, r30
    c1ce:	a0 01       	movw	r20, r0
    c1d0:	11 24       	eor	r1, r1
    c1d2:	45 57       	subi	r20, 0x75	; 117
    c1d4:	54 4f       	sbci	r21, 0xF4	; 244
    c1d6:	23 e0       	ldi	r18, 0x03	; 3
    c1d8:	6c 2f       	mov	r22, r28
    c1da:	8e e0       	ldi	r24, 0x0E	; 14
    c1dc:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
		Print(18, y, (char*) strBy);
    c1e0:	42 e7       	ldi	r20, 0x72	; 114
    c1e2:	52 e0       	ldi	r21, 0x02	; 2
    c1e4:	be 01       	movw	r22, r28
    c1e6:	82 e1       	ldi	r24, 0x12	; 18
    c1e8:	90 e0       	ldi	r25, 0x00	; 0
    c1ea:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    c1ee:	21 e0       	ldi	r18, 0x01	; 1
    c1f0:	f8 01       	movw	r30, r16
    c1f2:	32 97       	sbiw	r30, 0x02	; 2
    c1f4:	40 81       	ld	r20, Z
    c1f6:	be 01       	movw	r22, r28
    c1f8:	87 e1       	ldi	r24, 0x17	; 23
    c1fa:	90 e0       	ldi	r25, 0x00	; 0
    c1fc:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
		PrintChar(24, y, '-');
    c200:	4d e2       	ldi	r20, 0x2D	; 45
    c202:	be 01       	movw	r22, r28
    c204:	88 e1       	ldi	r24, 0x18	; 24
    c206:	90 e0       	ldi	r25, 0x00	; 0
    c208:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    c20c:	21 e0       	ldi	r18, 0x01	; 1
    c20e:	f8 01       	movw	r30, r16
    c210:	31 97       	sbiw	r30, 0x01	; 1
    c212:	40 81       	ld	r20, Z
    c214:	be 01       	movw	r22, r28
    c216:	8b e1       	ldi	r24, 0x1B	; 27
    c218:	90 e0       	ldi	r25, 0x00	; 0
    c21a:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <PrintByte>
		if (scores.data[i+4])
    c21e:	f8 01       	movw	r30, r16
    c220:	80 81       	ld	r24, Z
    c222:	88 23       	and	r24, r24
    c224:	11 f0       	breq	.+4      	; 0xc22a <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    c226:	4a e2       	ldi	r20, 0x2A	; 42
    c228:	01 c0       	rjmp	.+2      	; 0xc22c <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    c22a:	40 e2       	ldi	r20, 0x20	; 32
    c22c:	be 01       	movw	r22, r28
    c22e:	8d e1       	ldi	r24, 0x1D	; 29
    c230:	90 e0       	ldi	r25, 0x00	; 0
    c232:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
		y += 3;
		rank += 1;
    c236:	f3 94       	inc	r15
    c238:	23 96       	adiw	r28, 0x03	; 3
    c23a:	0b 5f       	subi	r16, 0xFB	; 251
    c23c:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    c23e:	f6 e0       	ldi	r31, 0x06	; 6
    c240:	ff 12       	cpse	r15, r31
    c242:	9e cf       	rjmp	.-196    	; 0xc180 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    c244:	42 ee       	ldi	r20, 0xE2	; 226
    c246:	52 e0       	ldi	r21, 0x02	; 2
    c248:	66 e1       	ldi	r22, 0x16	; 22
    c24a:	70 e0       	ldi	r23, 0x00	; 0
    c24c:	83 e0       	ldi	r24, 0x03	; 3
    c24e:	90 e0       	ldi	r25, 0x00	; 0
    c250:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    c254:	47 ed       	ldi	r20, 0xD7	; 215
    c256:	52 e0       	ldi	r21, 0x02	; 2
    c258:	68 e1       	ldi	r22, 0x18	; 24
    c25a:	70 e0       	ldi	r23, 0x00	; 0
    c25c:	8a e0       	ldi	r24, 0x0A	; 10
    c25e:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    c260:	df 91       	pop	r29
    c262:	cf 91       	pop	r28
    c264:	1f 91       	pop	r17
    c266:	0f 91       	pop	r16
    c268:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    c26a:	0c 94 ec 4d 	jmp	0x9bd8	; 0x9bd8 <Print>

0000c26e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    c26e:	0e 94 60 52 	call	0xa4c0	; 0xa4c0 <save_score>
	fade_through();
    c272:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
	init_game_state();
    c276:	0e 94 e0 51 	call	0xa3c0	; 0xa3c0 <init_game_state>
	load_tank_rank();
    c27a:	0c 94 9c 60 	jmp	0xc138	; 0xc138 <load_tank_rank>

0000c27e <update_player>:
		return FRAME_TIME * s->speed;
	return FRAME_TIME * s->speed * AI_SPEED_FACTOR;
}

void update_player(JoyPadState* p, Player* player)
{
    c27e:	cf 92       	push	r12
    c280:	df 92       	push	r13
    c282:	ef 92       	push	r14
    c284:	ff 92       	push	r15
    c286:	0f 93       	push	r16
    c288:	1f 93       	push	r17
    c28a:	cf 93       	push	r28
    c28c:	df 93       	push	r29
    c28e:	00 d0       	rcall	.+0      	; 0xc290 <update_player+0x12>
    c290:	00 d0       	rcall	.+0      	; 0xc292 <update_player+0x14>
    c292:	cd b7       	in	r28, 0x3d	; 61
    c294:	de b7       	in	r29, 0x3e	; 62
    c296:	7c 01       	movw	r14, r24
    c298:	6b 01       	movw	r12, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    c29a:	fb 01       	movw	r30, r22
    c29c:	12 82       	std	Z+2, r1	; 0x02
	player->old_active_shots = player->active_shots;
    c29e:	81 89       	ldd	r24, Z+17	; 0x11
    c2a0:	82 8b       	std	Z+18, r24	; 0x12
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    c2a2:	f7 01       	movw	r30, r14
    c2a4:	80 81       	ld	r24, Z
    c2a6:	83 ff       	sbrs	r24, 3
    c2a8:	0d c0       	rjmp	.+26     	; 0xc2c4 <update_player+0x46>
    c2aa:	80 91 ac 0b 	lds	r24, 0x0BAC
    c2ae:	81 11       	cpse	r24, r1
    c2b0:	09 c0       	rjmp	.+18     	; 0xc2c4 <update_player+0x46>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
		game.paused = game.paused ^ 1;
    c2b2:	90 91 ab 0b 	lds	r25, 0x0BAB
    c2b6:	81 e0       	ldi	r24, 0x01	; 1
    c2b8:	89 27       	eor	r24, r25
    c2ba:	80 93 ab 0b 	sts	0x0BAB, r24
		load_level_tiles(false);
    c2be:	80 e0       	ldi	r24, 0x00	; 0
    c2c0:	0e 94 5b 5d 	call	0xbab6	; 0xbab6 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    c2c4:	80 91 ab 0b 	lds	r24, 0x0BAB
    c2c8:	81 11       	cpse	r24, r1
    c2ca:	91 c0       	rjmp	.+290    	; 0xc3ee <update_player+0x170>
    c2cc:	f6 01       	movw	r30, r12
    c2ce:	85 89       	ldd	r24, Z+21	; 0x15
    c2d0:	80 fd       	sbrc	r24, 0
    c2d2:	8d c0       	rjmp	.+282    	; 0xc3ee <update_player+0x170>
	{
		player->shared.speed = player->max_speed;
    c2d4:	87 89       	ldd	r24, Z+23	; 0x17
    c2d6:	81 83       	std	Z+1, r24	; 0x01
		if ((p->held & BTN_UP))
    c2d8:	f7 01       	movw	r30, r14
    c2da:	84 81       	ldd	r24, Z+4	; 0x04
    c2dc:	84 ff       	sbrs	r24, 4
    c2de:	10 c0       	rjmp	.+32     	; 0xc300 <update_player+0x82>
		{
			player->shared.direction = D_UP;
    c2e0:	f6 01       	movw	r30, r12
    c2e2:	10 82       	st	Z, r1
			player->shared.y -= get_delta(player, &player->shared);
    c2e4:	b6 01       	movw	r22, r12
    c2e6:	c6 01       	movw	r24, r12
    c2e8:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c2ec:	9b 01       	movw	r18, r22
    c2ee:	ac 01       	movw	r20, r24
    c2f0:	f6 01       	movw	r30, r12
    c2f2:	67 81       	ldd	r22, Z+7	; 0x07
    c2f4:	70 85       	ldd	r23, Z+8	; 0x08
    c2f6:	81 85       	ldd	r24, Z+9	; 0x09
    c2f8:	92 85       	ldd	r25, Z+10	; 0x0a
    c2fa:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    c2fe:	25 c0       	rjmp	.+74     	; 0xc34a <update_player+0xcc>
		}
		else if ((p->held & BTN_RIGHT))
    c300:	87 ff       	sbrs	r24, 7
    c302:	11 c0       	rjmp	.+34     	; 0xc326 <update_player+0xa8>
		{
			player->shared.direction = D_RIGHT;
    c304:	81 e0       	ldi	r24, 0x01	; 1
    c306:	f6 01       	movw	r30, r12
    c308:	80 83       	st	Z, r24
			player->shared.x += get_delta(player, &player->shared);
    c30a:	b6 01       	movw	r22, r12
    c30c:	c6 01       	movw	r24, r12
    c30e:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c312:	9b 01       	movw	r18, r22
    c314:	ac 01       	movw	r20, r24
    c316:	f6 01       	movw	r30, r12
    c318:	63 81       	ldd	r22, Z+3	; 0x03
    c31a:	74 81       	ldd	r23, Z+4	; 0x04
    c31c:	85 81       	ldd	r24, Z+5	; 0x05
    c31e:	96 81       	ldd	r25, Z+6	; 0x06
    c320:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c324:	2a c0       	rjmp	.+84     	; 0xc37a <update_player+0xfc>
		}
		else if ((p->held & BTN_DOWN))
    c326:	85 ff       	sbrs	r24, 5
    c328:	16 c0       	rjmp	.+44     	; 0xc356 <update_player+0xd8>
		{
			player->shared.direction = D_DOWN;
    c32a:	82 e0       	ldi	r24, 0x02	; 2
    c32c:	f6 01       	movw	r30, r12
    c32e:	80 83       	st	Z, r24
			player->shared.y += get_delta(player, &player->shared);
    c330:	b6 01       	movw	r22, r12
    c332:	c6 01       	movw	r24, r12
    c334:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c338:	9b 01       	movw	r18, r22
    c33a:	ac 01       	movw	r20, r24
    c33c:	f6 01       	movw	r30, r12
    c33e:	67 81       	ldd	r22, Z+7	; 0x07
    c340:	70 85       	ldd	r23, Z+8	; 0x08
    c342:	81 85       	ldd	r24, Z+9	; 0x09
    c344:	92 85       	ldd	r25, Z+10	; 0x0a
    c346:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c34a:	f6 01       	movw	r30, r12
    c34c:	67 83       	std	Z+7, r22	; 0x07
    c34e:	70 87       	std	Z+8, r23	; 0x08
    c350:	81 87       	std	Z+9, r24	; 0x09
    c352:	92 87       	std	Z+10, r25	; 0x0a
    c354:	1a c0       	rjmp	.+52     	; 0xc38a <update_player+0x10c>
		}
		else if ((p->held & BTN_LEFT))
    c356:	86 ff       	sbrs	r24, 6
    c358:	16 c0       	rjmp	.+44     	; 0xc386 <update_player+0x108>
		{
			player->shared.direction = D_LEFT;
    c35a:	83 e0       	ldi	r24, 0x03	; 3
    c35c:	f6 01       	movw	r30, r12
    c35e:	80 83       	st	Z, r24
			player->shared.x -= get_delta(player, &player->shared);
    c360:	b6 01       	movw	r22, r12
    c362:	c6 01       	movw	r24, r12
    c364:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c368:	9b 01       	movw	r18, r22
    c36a:	ac 01       	movw	r20, r24
    c36c:	f6 01       	movw	r30, r12
    c36e:	63 81       	ldd	r22, Z+3	; 0x03
    c370:	74 81       	ldd	r23, Z+4	; 0x04
    c372:	85 81       	ldd	r24, Z+5	; 0x05
    c374:	96 81       	ldd	r25, Z+6	; 0x06
    c376:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    c37a:	f6 01       	movw	r30, r12
    c37c:	63 83       	std	Z+3, r22	; 0x03
    c37e:	74 83       	std	Z+4, r23	; 0x04
    c380:	85 83       	std	Z+5, r24	; 0x05
    c382:	96 83       	std	Z+6, r25	; 0x06
    c384:	02 c0       	rjmp	.+4      	; 0xc38a <update_player+0x10c>
		}
		else
		{
			player->shared.speed = 0;
    c386:	f6 01       	movw	r30, r12
    c388:	11 82       	std	Z+1, r1	; 0x01
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    c38a:	c7 01       	movw	r24, r14
    c38c:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <shoot_pressed>
    c390:	88 23       	and	r24, r24
    c392:	69 f1       	breq	.+90     	; 0xc3ee <update_player+0x170>
    c394:	f6 01       	movw	r30, r12
    c396:	81 89       	ldd	r24, Z+17	; 0x11
    c398:	81 11       	cpse	r24, r1
    c39a:	29 c0       	rjmp	.+82     	; 0xc3ee <update_player+0x170>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    c39c:	83 ad       	ldd	r24, Z+59	; 0x3b
    c39e:	81 11       	cpse	r24, r1
    c3a0:	26 c0       	rjmp	.+76     	; 0xc3ee <update_player+0x170>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    c3a2:	86 01       	movw	r16, r12
    c3a4:	03 5d       	subi	r16, 0xD3	; 211
    c3a6:	1f 4f       	sbci	r17, 0xFF	; 255
				if (!shot->active)
				{
					if (player->has_rocket)
    c3a8:	80 8d       	ldd	r24, Z+24	; 0x18
    c3aa:	88 23       	and	r24, r24
    c3ac:	31 f0       	breq	.+12     	; 0xc3ba <update_player+0x13c>
					{
						init_shot_state(shot, ROCKET_SHOT);
    c3ae:	61 e0       	ldi	r22, 0x01	; 1
    c3b0:	c8 01       	movw	r24, r16
    c3b2:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    c3b6:	61 e0       	ldi	r22, 0x01	; 1
    c3b8:	05 c0       	rjmp	.+10     	; 0xc3c4 <update_player+0x146>
						SFX_ROCKET;
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    c3ba:	60 e0       	ldi	r22, 0x00	; 0
    c3bc:	c8 01       	movw	r24, r16
    c3be:	0e 94 e6 50 	call	0xa1cc	; 0xa1cc <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    c3c2:	60 e0       	ldi	r22, 0x00	; 0
    c3c4:	c8 01       	movw	r24, r16
    c3c6:	0e 94 03 51 	call	0xa206	; 0xa206 <set_shot_animations>
						SFX_CANNONBALL;
					}
					player->active_shots++;
    c3ca:	f6 01       	movw	r30, r12
    c3cc:	81 89       	ldd	r24, Z+17	; 0x11
    c3ce:	8f 5f       	subi	r24, 0xFF	; 255
    c3d0:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    c3d2:	80 81       	ld	r24, Z
    c3d4:	85 a7       	std	Z+45, r24	; 0x2d
					position_shot(player, shot);
    c3d6:	b8 01       	movw	r22, r16
    c3d8:	c6 01       	movw	r24, r12
    c3da:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <position_shot>
					shot->active = 1;
    c3de:	81 e0       	ldi	r24, 0x01	; 1
    c3e0:	f6 01       	movw	r30, r12
    c3e2:	83 af       	std	Z+59, r24	; 0x3b
					if (player->has_over_speed)
    c3e4:	81 8d       	ldd	r24, Z+25	; 0x19
    c3e6:	88 23       	and	r24, r24
    c3e8:	11 f0       	breq	.+4      	; 0xc3ee <update_player+0x170>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    c3ea:	8a ea       	ldi	r24, 0xAA	; 170
    c3ec:	86 a7       	std	Z+46, r24	; 0x2e
				}
			}
		}
	}
	
	if (!game.paused)
    c3ee:	80 91 ab 0b 	lds	r24, 0x0BAB
    c3f2:	81 11       	cpse	r24, r1
    c3f4:	86 c0       	rjmp	.+268    	; 0xc502 <update_player+0x284>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    c3f6:	86 01       	movw	r16, r12
    c3f8:	03 5d       	subi	r16, 0xD3	; 211
    c3fa:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    c3fc:	f6 01       	movw	r30, r12
    c3fe:	83 ad       	ldd	r24, Z+59	; 0x3b
    c400:	88 23       	and	r24, r24
    c402:	09 f4       	brne	.+2      	; 0xc406 <update_player+0x188>
    c404:	91 c0       	rjmp	.+290    	; 0xc528 <update_player+0x2aa>
			{
				switch (shot->shared.direction)
    c406:	85 a5       	ldd	r24, Z+45	; 0x2d
    c408:	81 30       	cpi	r24, 0x01	; 1
    c40a:	11 f1       	breq	.+68     	; 0xc450 <update_player+0x1d2>
    c40c:	98 f0       	brcs	.+38     	; 0xc434 <update_player+0x1b6>
    c40e:	82 30       	cpi	r24, 0x02	; 2
    c410:	69 f1       	breq	.+90     	; 0xc46c <update_player+0x1ee>
    c412:	83 30       	cpi	r24, 0x03	; 3
    c414:	09 f0       	breq	.+2      	; 0xc418 <update_player+0x19a>
    c416:	42 c0       	rjmp	.+132    	; 0xc49c <update_player+0x21e>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c418:	b8 01       	movw	r22, r16
    c41a:	c6 01       	movw	r24, r12
    c41c:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c420:	9b 01       	movw	r18, r22
    c422:	ac 01       	movw	r20, r24
    c424:	f6 01       	movw	r30, r12
    c426:	60 a9       	ldd	r22, Z+48	; 0x30
    c428:	71 a9       	ldd	r23, Z+49	; 0x31
    c42a:	82 a9       	ldd	r24, Z+50	; 0x32
    c42c:	93 a9       	ldd	r25, Z+51	; 0x33
    c42e:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    c432:	2f c0       	rjmp	.+94     	; 0xc492 <update_player+0x214>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    c434:	b8 01       	movw	r22, r16
    c436:	c6 01       	movw	r24, r12
    c438:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c43c:	9b 01       	movw	r18, r22
    c43e:	ac 01       	movw	r20, r24
    c440:	f6 01       	movw	r30, r12
    c442:	64 a9       	ldd	r22, Z+52	; 0x34
    c444:	75 a9       	ldd	r23, Z+53	; 0x35
    c446:	86 a9       	ldd	r24, Z+54	; 0x36
    c448:	97 a9       	ldd	r25, Z+55	; 0x37
    c44a:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    c44e:	1b c0       	rjmp	.+54     	; 0xc486 <update_player+0x208>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    c450:	b8 01       	movw	r22, r16
    c452:	c6 01       	movw	r24, r12
    c454:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c458:	9b 01       	movw	r18, r22
    c45a:	ac 01       	movw	r20, r24
    c45c:	f6 01       	movw	r30, r12
    c45e:	60 a9       	ldd	r22, Z+48	; 0x30
    c460:	71 a9       	ldd	r23, Z+49	; 0x31
    c462:	82 a9       	ldd	r24, Z+50	; 0x32
    c464:	93 a9       	ldd	r25, Z+51	; 0x33
    c466:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c46a:	13 c0       	rjmp	.+38     	; 0xc492 <update_player+0x214>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    c46c:	b8 01       	movw	r22, r16
    c46e:	c6 01       	movw	r24, r12
    c470:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c474:	9b 01       	movw	r18, r22
    c476:	ac 01       	movw	r20, r24
    c478:	f6 01       	movw	r30, r12
    c47a:	64 a9       	ldd	r22, Z+52	; 0x34
    c47c:	75 a9       	ldd	r23, Z+53	; 0x35
    c47e:	86 a9       	ldd	r24, Z+54	; 0x36
    c480:	97 a9       	ldd	r25, Z+55	; 0x37
    c482:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c486:	f6 01       	movw	r30, r12
    c488:	64 ab       	std	Z+52, r22	; 0x34
    c48a:	75 ab       	std	Z+53, r23	; 0x35
    c48c:	86 ab       	std	Z+54, r24	; 0x36
    c48e:	97 ab       	std	Z+55, r25	; 0x37
    c490:	05 c0       	rjmp	.+10     	; 0xc49c <update_player+0x21e>
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c492:	f6 01       	movw	r30, r12
    c494:	60 ab       	std	Z+48, r22	; 0x30
    c496:	71 ab       	std	Z+49, r23	; 0x31
    c498:	82 ab       	std	Z+50, r24	; 0x32
    c49a:	93 ab       	std	Z+51, r25	; 0x33
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    c49c:	f6 01       	movw	r30, r12
    c49e:	f4 ac       	ldd	r15, Z+60	; 0x3c
    c4a0:	f8 e0       	ldi	r31, 0x08	; 8
    c4a2:	ff 15       	cp	r31, r15
    c4a4:	38 f0       	brcs	.+14     	; 0xc4b4 <update_player+0x236>
    c4a6:	b8 01       	movw	r22, r16
    c4a8:	c6 01       	movw	r24, r12
    c4aa:	0e 94 e3 53 	call	0xa7c6	; 0xa7c6 <get_delta>
    c4ae:	9b 01       	movw	r18, r22
    c4b0:	ac 01       	movw	r20, r24
    c4b2:	03 c0       	rjmp	.+6      	; 0xc4ba <update_player+0x23c>
    c4b4:	20 e0       	ldi	r18, 0x00	; 0
    c4b6:	30 e0       	ldi	r19, 0x00	; 0
    c4b8:	a9 01       	movw	r20, r18
    c4ba:	6f 2d       	mov	r22, r15
    c4bc:	70 e0       	ldi	r23, 0x00	; 0
    c4be:	80 e0       	ldi	r24, 0x00	; 0
    c4c0:	90 e0       	ldi	r25, 0x00	; 0
    c4c2:	29 83       	std	Y+1, r18	; 0x01
    c4c4:	3a 83       	std	Y+2, r19	; 0x02
    c4c6:	4b 83       	std	Y+3, r20	; 0x03
    c4c8:	5c 83       	std	Y+4, r21	; 0x04
    c4ca:	0e 94 24 6f 	call	0xde48	; 0xde48 <__floatsisf>
    c4ce:	29 81       	ldd	r18, Y+1	; 0x01
    c4d0:	3a 81       	ldd	r19, Y+2	; 0x02
    c4d2:	4b 81       	ldd	r20, Y+3	; 0x03
    c4d4:	5c 81       	ldd	r21, Y+4	; 0x04
    c4d6:	0e 94 21 6e 	call	0xdc42	; 0xdc42 <__addsf3>
    c4da:	0e 94 f6 6e 	call	0xddec	; 0xddec <__fixunssfsi>
    c4de:	f6 01       	movw	r30, r12
    c4e0:	64 af       	std	Z+60, r22	; 0x3c
				collision_detect_shot(player, shot);
    c4e2:	b8 01       	movw	r22, r16
    c4e4:	c6 01       	movw	r24, r12
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c4e6:	0f 90       	pop	r0
    c4e8:	0f 90       	pop	r0
    c4ea:	0f 90       	pop	r0
    c4ec:	0f 90       	pop	r0
    c4ee:	df 91       	pop	r29
    c4f0:	cf 91       	pop	r28
    c4f2:	1f 91       	pop	r17
    c4f4:	0f 91       	pop	r16
    c4f6:	ff 90       	pop	r15
    c4f8:	ef 90       	pop	r14
    c4fa:	df 90       	pop	r13
    c4fc:	cf 90       	pop	r12
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    c4fe:	0c 94 ee 58 	jmp	0xb1dc	; 0xb1dc <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    c502:	f7 01       	movw	r30, r14
    c504:	80 81       	ld	r24, Z
    c506:	91 81       	ldd	r25, Z+1	; 0x01
    c508:	91 ff       	sbrs	r25, 1
    c50a:	0e c0       	rjmp	.+28     	; 0xc528 <update_player+0x2aa>
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    c50c:	0f 90       	pop	r0
    c50e:	0f 90       	pop	r0
    c510:	0f 90       	pop	r0
    c512:	0f 90       	pop	r0
    c514:	df 91       	pop	r29
    c516:	cf 91       	pop	r28
    c518:	1f 91       	pop	r17
    c51a:	0f 91       	pop	r16
    c51c:	ff 90       	pop	r15
    c51e:	ef 90       	pop	r14
    c520:	df 90       	pop	r13
    c522:	cf 90       	pop	r12
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    c524:	0c 94 37 61 	jmp	0xc26e	; 0xc26e <exit_game>
		}
	}
}
    c528:	0f 90       	pop	r0
    c52a:	0f 90       	pop	r0
    c52c:	0f 90       	pop	r0
    c52e:	0f 90       	pop	r0
    c530:	df 91       	pop	r29
    c532:	cf 91       	pop	r28
    c534:	1f 91       	pop	r17
    c536:	0f 91       	pop	r16
    c538:	ff 90       	pop	r15
    c53a:	ef 90       	pop	r14
    c53c:	df 90       	pop	r13
    c53e:	cf 90       	pop	r12
    c540:	08 95       	ret

0000c542 <resolve_scoring>:

void resolve_scoring()
{
    c542:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    c544:	c0 91 aa 0b 	lds	r28, 0x0BAA
    c548:	80 91 ea 0b 	lds	r24, 0x0BEA
    c54c:	ca 30       	cpi	r28, 0x0A	; 10
    c54e:	80 f5       	brcc	.+96     	; 0xc5b0 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    c550:	8a 30       	cpi	r24, 0x0A	; 10
    c552:	70 f0       	brcs	.+28     	; 0xc570 <resolve_scoring+0x2e>
    c554:	80 91 5e 0f 	lds	r24, 0x0F5E
    c558:	80 fd       	sbrc	r24, 0
    c55a:	0a c0       	rjmp	.+20     	; 0xc570 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    c55c:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBHideAllSprites>
			load_level_tiles(true);
    c560:	81 e0       	ldi	r24, 0x01	; 1
    c562:	0e 94 5b 5d 	call	0xbab6	; 0xbab6 <load_level_tiles>
			print_level_score(&player1, &player2);
    c566:	69 e4       	ldi	r22, 0x49	; 73
    c568:	7f e0       	ldi	r23, 0x0F	; 15
    c56a:	8a ed       	ldi	r24, 0xDA	; 218
    c56c:	9b e0       	ldi	r25, 0x0B	; 11
    c56e:	12 c0       	rjmp	.+36     	; 0xc594 <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    c570:	80 91 59 0f 	lds	r24, 0x0F59
    c574:	8a 30       	cpi	r24, 0x0A	; 10
    c576:	08 f4       	brcc	.+2      	; 0xc57a <resolve_scoring+0x38>
    c578:	a7 c0       	rjmp	.+334    	; 0xc6c8 <resolve_scoring+0x186>
    c57a:	80 91 ef 0b 	lds	r24, 0x0BEF
    c57e:	80 fd       	sbrc	r24, 0
    c580:	a3 c0       	rjmp	.+326    	; 0xc6c8 <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    c582:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBHideAllSprites>
			load_level_tiles(true);
    c586:	81 e0       	ldi	r24, 0x01	; 1
    c588:	0e 94 5b 5d 	call	0xbab6	; 0xbab6 <load_level_tiles>
			print_level_score(&player2, &player1);
    c58c:	6a ed       	ldi	r22, 0xDA	; 218
    c58e:	7b e0       	ldi	r23, 0x0B	; 11
    c590:	89 e4       	ldi	r24, 0x49	; 73
    c592:	9f e0       	ldi	r25, 0x0F	; 15
    c594:	0e 94 3d 53 	call	0xa67a	; 0xa67a <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    c598:	84 e0       	ldi	r24, 0x04	; 4
    c59a:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBWaitSeconds>
			player1.level_score = 0;
    c59e:	10 92 ea 0b 	sts	0x0BEA, r1
			player2.level_score = 0;
    c5a2:	10 92 59 0f 	sts	0x0F59, r1
			level_transition(next_level);
    c5a6:	81 e0       	ldi	r24, 0x01	; 1
    c5a8:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    c5aa:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    c5ac:	0c 94 84 5e 	jmp	0xbd08	; 0xbd08 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    c5b0:	8a 30       	cpi	r24, 0x0A	; 10
    c5b2:	28 f4       	brcc	.+10     	; 0xc5be <resolve_scoring+0x7c>
    c5b4:	80 91 59 0f 	lds	r24, 0x0F59
    c5b8:	8a 30       	cpi	r24, 0x0A	; 10
    c5ba:	08 f4       	brcc	.+2      	; 0xc5be <resolve_scoring+0x7c>
    c5bc:	85 c0       	rjmp	.+266    	; 0xc6c8 <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    c5be:	90 91 e9 0b 	lds	r25, 0x0BE9
    c5c2:	80 91 58 0f 	lds	r24, 0x0F58
    c5c6:	98 17       	cp	r25, r24
    c5c8:	09 f4       	brne	.+2      	; 0xc5cc <resolve_scoring+0x8a>
    c5ca:	7e c0       	rjmp	.+252    	; 0xc6c8 <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    c5cc:	20 91 ac 0b 	lds	r18, 0x0BAC
    c5d0:	21 11       	cpse	r18, r1
    c5d2:	46 c0       	rjmp	.+140    	; 0xc660 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    c5d4:	c1 e0       	ldi	r28, 0x01	; 1
    c5d6:	c0 93 ac 0b 	sts	0x0BAC, r28
				if (player1.score > player2.score)
    c5da:	89 17       	cp	r24, r25
    c5dc:	e8 f4       	brcc	.+58     	; 0xc618 <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    c5de:	8a ed       	ldi	r24, 0xDA	; 218
    c5e0:	9b e0       	ldi	r25, 0x0B	; 11
    c5e2:	90 93 b9 0b 	sts	0x0BB9, r25
    c5e6:	80 93 b8 0b 	sts	0x0BB8, r24
					game.boss_fight_joypad = &p1;
    c5ea:	83 e5       	ldi	r24, 0x53	; 83
    c5ec:	9c e0       	ldi	r25, 0x0C	; 12
    c5ee:	90 93 bb 0b 	sts	0x0BBB, r25
    c5f2:	80 93 ba 0b 	sts	0x0BBA, r24
					game.boss_fight_player_hud = 0;
    c5f6:	10 92 ad 0b 	sts	0x0BAD, r1
					kill_player(&player2, 15);
    c5fa:	6f e0       	ldi	r22, 0x0F	; 15
    c5fc:	89 e4       	ldi	r24, 0x49	; 73
    c5fe:	9f e0       	ldi	r25, 0x0F	; 15
    c600:	0e 94 15 58 	call	0xb02a	; 0xb02a <kill_player>
					player_spawn(&player2);
    c604:	89 e4       	ldi	r24, 0x49	; 73
    c606:	9f e0       	ldi	r25, 0x0F	; 15
    c608:	0e 94 07 52 	call	0xa40e	; 0xa40e <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    c60c:	80 91 5e 0f 	lds	r24, 0x0F5E
    c610:	c8 27       	eor	r28, r24
    c612:	c0 93 5e 0f 	sts	0x0F5E, r28
    c616:	1d c0       	rjmp	.+58     	; 0xc652 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    c618:	89 e4       	ldi	r24, 0x49	; 73
    c61a:	9f e0       	ldi	r25, 0x0F	; 15
    c61c:	90 93 b9 0b 	sts	0x0BB9, r25
    c620:	80 93 b8 0b 	sts	0x0BB8, r24
					game.boss_fight_joypad = &p2;
    c624:	82 e8       	ldi	r24, 0x82	; 130
    c626:	9b e0       	ldi	r25, 0x0B	; 11
    c628:	90 93 bb 0b 	sts	0x0BBB, r25
    c62c:	80 93 ba 0b 	sts	0x0BBA, r24
					game.boss_fight_player_hud = 15;
    c630:	8f e0       	ldi	r24, 0x0F	; 15
    c632:	80 93 ad 0b 	sts	0x0BAD, r24
					kill_player(&player1, 0);
    c636:	60 e0       	ldi	r22, 0x00	; 0
    c638:	8a ed       	ldi	r24, 0xDA	; 218
    c63a:	9b e0       	ldi	r25, 0x0B	; 11
    c63c:	0e 94 15 58 	call	0xb02a	; 0xb02a <kill_player>
					player_spawn(&player1);
    c640:	8a ed       	ldi	r24, 0xDA	; 218
    c642:	9b e0       	ldi	r25, 0x0B	; 11
    c644:	0e 94 07 52 	call	0xa40e	; 0xa40e <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    c648:	80 91 ef 0b 	lds	r24, 0x0BEF
    c64c:	c8 27       	eor	r28, r24
    c64e:	c0 93 ef 0b 	sts	0x0BEF, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    c652:	85 ea       	ldi	r24, 0xA5	; 165
    c654:	90 e0       	ldi	r25, 0x00	; 0
    c656:	90 93 dd 0f 	sts	0x0FDD, r25
    c65a:	80 93 dc 0f 	sts	0x0FDC, r24
				return;
    c65e:	34 c0       	rjmp	.+104    	; 0xc6c8 <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    c660:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBHideAllSprites>
			load_level_tiles(true);
    c664:	81 e0       	ldi	r24, 0x01	; 1
    c666:	0e 94 5b 5d 	call	0xbab6	; 0xbab6 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    c66a:	90 91 ea 0b 	lds	r25, 0x0BEA
    c66e:	80 91 59 0f 	lds	r24, 0x0F59
    c672:	89 17       	cp	r24, r25
    c674:	28 f4       	brcc	.+10     	; 0xc680 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    c676:	69 e4       	ldi	r22, 0x49	; 73
    c678:	7f e0       	ldi	r23, 0x0F	; 15
    c67a:	8a ed       	ldi	r24, 0xDA	; 218
    c67c:	9b e0       	ldi	r25, 0x0B	; 11
    c67e:	04 c0       	rjmp	.+8      	; 0xc688 <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    c680:	6a ed       	ldi	r22, 0xDA	; 218
    c682:	7b e0       	ldi	r23, 0x0B	; 11
    c684:	89 e4       	ldi	r24, 0x49	; 73
    c686:	9f e0       	ldi	r25, 0x0F	; 15
    c688:	0e 94 3d 53 	call	0xa67a	; 0xa67a <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    c68c:	84 e0       	ldi	r24, 0x04	; 4
    c68e:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBWaitSeconds>
			player1.level_score = 0;
    c692:	10 92 ea 0b 	sts	0x0BEA, r1
			player2.level_score = 0;
    c696:	10 92 59 0f 	sts	0x0F59, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    c69a:	90 91 e9 0b 	lds	r25, 0x0BE9
    c69e:	80 91 58 0f 	lds	r24, 0x0F58
    c6a2:	89 17       	cp	r24, r25
    c6a4:	28 f4       	brcc	.+10     	; 0xc6b0 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    c6a6:	69 e4       	ldi	r22, 0x49	; 73
    c6a8:	7f e0       	ldi	r23, 0x0F	; 15
    c6aa:	8a ed       	ldi	r24, 0xDA	; 218
    c6ac:	9b e0       	ldi	r25, 0x0B	; 11
    c6ae:	04 c0       	rjmp	.+8      	; 0xc6b8 <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    c6b0:	6a ed       	ldi	r22, 0xDA	; 218
    c6b2:	7b e0       	ldi	r23, 0x0B	; 11
    c6b4:	89 e4       	ldi	r24, 0x49	; 73
    c6b6:	9f e0       	ldi	r25, 0x0F	; 15
    c6b8:	0e 94 7f 53 	call	0xa6fe	; 0xa6fe <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    c6bc:	84 e0       	ldi	r24, 0x04	; 4
    c6be:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBWaitSeconds>
			exit_game();
		}
	}
}
    c6c2:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    c6c4:	0c 94 37 61 	jmp	0xc26e	; 0xc26e <exit_game>
		}
	}
}
    c6c8:	cf 91       	pop	r28
    c6ca:	08 95       	ret

0000c6cc <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    c6cc:	df 92       	push	r13
    c6ce:	ef 92       	push	r14
    c6d0:	ff 92       	push	r15
    c6d2:	0f 93       	push	r16
    c6d4:	1f 93       	push	r17
    c6d6:	cf 93       	push	r28
    c6d8:	df 93       	push	r29
    c6da:	8c 01       	movw	r16, r24
    c6dc:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    c6de:	80 91 ab 0b 	lds	r24, 0x0BAB
    c6e2:	88 23       	and	r24, r24
    c6e4:	19 f1       	breq	.+70     	; 0xc72c <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    c6e6:	0e 94 71 50 	call	0xa0e2	; 0xa0e2 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    c6ea:	44 e9       	ldi	r20, 0x94	; 148
    c6ec:	56 e7       	ldi	r21, 0x76	; 118
    c6ee:	6c e0       	ldi	r22, 0x0C	; 12
    c6f0:	88 e0       	ldi	r24, 0x08	; 8
    c6f2:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    c6f6:	48 e4       	ldi	r20, 0x48	; 72
    c6f8:	52 e0       	ldi	r21, 0x02	; 2
    c6fa:	6d e0       	ldi	r22, 0x0D	; 13
    c6fc:	70 e0       	ldi	r23, 0x00	; 0
    c6fe:	8c e0       	ldi	r24, 0x0C	; 12
    c700:	90 e0       	ldi	r25, 0x00	; 0
    c702:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
		Print(11, 14, (char*) strExit);
    c706:	4f e4       	ldi	r20, 0x4F	; 79
    c708:	52 e0       	ldi	r21, 0x02	; 2
    c70a:	6e e0       	ldi	r22, 0x0E	; 14
    c70c:	70 e0       	ldi	r23, 0x00	; 0
    c70e:	8b e0       	ldi	r24, 0x0B	; 11
    c710:	90 e0       	ldi	r25, 0x00	; 0
    c712:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
		
		// Update
		update_player(p1, &player1);
    c716:	6a ed       	ldi	r22, 0xDA	; 218
    c718:	7b e0       	ldi	r23, 0x0B	; 11
    c71a:	c8 01       	movw	r24, r16
    c71c:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
		update_player(p2, &player2);
    c720:	69 e4       	ldi	r22, 0x49	; 73
    c722:	7f e0       	ldi	r23, 0x0F	; 15
    c724:	ce 01       	movw	r24, r28
    c726:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
    c72a:	c6 c1       	rjmp	.+908    	; 0xcab8 <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    c72c:	90 91 ac 0b 	lds	r25, 0x0BAC
    c730:	91 30       	cpi	r25, 0x01	; 1
    c732:	19 f4       	brne	.+6      	; 0xc73a <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    c734:	0e 94 b4 5e 	call	0xbd68	; 0xbd68 <render_boss_fight_scope_load>
    c738:	05 c0       	rjmp	.+10     	; 0xc744 <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    c73a:	92 30       	cpi	r25, 0x02	; 2
    c73c:	09 f0       	breq	.+2      	; 0xc740 <update_level+0x74>
    c73e:	4e c0       	rjmp	.+156    	; 0xc7dc <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    c740:	0e 94 be 5e 	call	0xbd7c	; 0xbd7c <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    c744:	60 e0       	ldi	r22, 0x00	; 0
    c746:	80 91 b8 0b 	lds	r24, 0x0BB8
    c74a:	90 91 b9 0b 	lds	r25, 0x0BB9
    c74e:	0e 94 e1 54 	call	0xa9c2	; 0xa9c2 <tank_map>
    c752:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    c754:	40 e0       	ldi	r20, 0x00	; 0
    c756:	67 ec       	ldi	r22, 0xC7	; 199
    c758:	7c e3       	ldi	r23, 0x3C	; 60
    c75a:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		p1_shot_index = p2_index + 4;
    c75e:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    c760:	6c 2f       	mov	r22, r28
    c762:	80 91 b8 0b 	lds	r24, 0x0BB8
    c766:	90 91 b9 0b 	lds	r25, 0x0BB9
    c76a:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
    c76e:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    c770:	40 e0       	ldi	r20, 0x00	; 0
    c772:	6d ec       	ldi	r22, 0xCD	; 205
    c774:	7c e3       	ldi	r23, 0x3C	; 60
    c776:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    c77a:	6c 2f       	mov	r22, r28
    c77c:	80 91 b8 0b 	lds	r24, 0x0BB8
    c780:	90 91 b9 0b 	lds	r25, 0x0BB9
    c784:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    c788:	60 e0       	ldi	r22, 0x00	; 0
    c78a:	80 91 b8 0b 	lds	r24, 0x0BB8
    c78e:	90 91 b9 0b 	lds	r25, 0x0BB9
    c792:	0e 94 3d 54 	call	0xa87a	; 0xa87a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    c796:	6c 2f       	mov	r22, r28
    c798:	80 91 b8 0b 	lds	r24, 0x0BB8
    c79c:	90 91 b9 0b 	lds	r25, 0x0BB9
    c7a0:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_shot(&player2, p2_shot_index);
    c7a4:	6d 2f       	mov	r22, r29
    c7a6:	89 e4       	ldi	r24, 0x49	; 73
    c7a8:	9f e0       	ldi	r25, 0x0F	; 15
    c7aa:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_tile_explosions(&tile_animations);
    c7ae:	8d eb       	ldi	r24, 0xBD	; 189
    c7b0:	9b e0       	ldi	r25, 0x0B	; 11
    c7b2:	0e 94 92 54 	call	0xa924	; 0xa924 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    c7b6:	60 91 b8 0b 	lds	r22, 0x0BB8
    c7ba:	70 91 b9 0b 	lds	r23, 0x0BB9
    c7be:	80 91 ba 0b 	lds	r24, 0x0BBA
    c7c2:	90 91 bb 0b 	lds	r25, 0x0BBB
    c7c6:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    c7ca:	60 91 ad 0b 	lds	r22, 0x0BAD
    c7ce:	80 91 b8 0b 	lds	r24, 0x0BB8
    c7d2:	90 91 b9 0b 	lds	r25, 0x0BB9
    c7d6:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <collision_detect_player>
    c7da:	6e c1       	rjmp	.+732    	; 0xcab8 <update_level+0x3ec>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    c7dc:	94 30       	cpi	r25, 0x04	; 4
    c7de:	09 f0       	breq	.+2      	; 0xc7e2 <update_level+0x116>
    c7e0:	94 c0       	rjmp	.+296    	; 0xc90a <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    c7e2:	80 91 1d 10 	lds	r24, 0x101D
    c7e6:	81 11       	cpse	r24, r1
    c7e8:	07 c0       	rjmp	.+14     	; 0xc7f8 <update_level+0x12c>
    c7ea:	80 91 e9 0f 	lds	r24, 0x0FE9
    c7ee:	81 11       	cpse	r24, r1
    c7f0:	03 c0       	rjmp	.+6      	; 0xc7f8 <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    c7f2:	80 e2       	ldi	r24, 0x20	; 32
    c7f4:	80 93 ac 0b 	sts	0x0BAC, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    c7f8:	60 e0       	ldi	r22, 0x00	; 0
    c7fa:	80 91 b8 0b 	lds	r24, 0x0BB8
    c7fe:	90 91 b9 0b 	lds	r25, 0x0BB9
    c802:	0e 94 e1 54 	call	0xa9c2	; 0xa9c2 <tank_map>
    c806:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    c808:	68 2f       	mov	r22, r24
    c80a:	80 91 b8 0b 	lds	r24, 0x0BB8
    c80e:	90 91 b9 0b 	lds	r25, 0x0BB9
    c812:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
    c816:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    c818:	01 e0       	ldi	r16, 0x01	; 1
    c81a:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    c81c:	12 e0       	ldi	r17, 0x02	; 2
    c81e:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    c820:	d3 e0       	ldi	r29, 0x03	; 3
    c822:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c824:	80 91 1d 10 	lds	r24, 0x101D
    c828:	88 23       	and	r24, r24
    c82a:	19 f0       	breq	.+6      	; 0xc832 <update_level+0x166>
	return (char*) map_sub_turret;
    c82c:	6f e7       	ldi	r22, 0x7F	; 127
    c82e:	7c e3       	ldi	r23, 0x3C	; 60
    c830:	02 c0       	rjmp	.+4      	; 0xc836 <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c832:	6d ec       	ldi	r22, 0xCD	; 205
    c834:	7c e3       	ldi	r23, 0x3C	; 60
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    c836:	40 e0       	ldi	r20, 0x00	; 0
    c838:	8c 2f       	mov	r24, r28
    c83a:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c83e:	80 91 1d 10 	lds	r24, 0x101D
    c842:	88 23       	and	r24, r24
    c844:	19 f0       	breq	.+6      	; 0xc84c <update_level+0x180>
	return (char*) map_sub_shot;
    c846:	62 e8       	ldi	r22, 0x82	; 130
    c848:	7c e3       	ldi	r23, 0x3C	; 60
    c84a:	02 c0       	rjmp	.+4      	; 0xc850 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c84c:	6d ec       	ldi	r22, 0xCD	; 205
    c84e:	7c e3       	ldi	r23, 0x3C	; 60
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    c850:	40 e0       	ldi	r20, 0x00	; 0
    c852:	80 2f       	mov	r24, r16
    c854:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c858:	80 91 e9 0f 	lds	r24, 0x0FE9
    c85c:	88 23       	and	r24, r24
    c85e:	19 f0       	breq	.+6      	; 0xc866 <update_level+0x19a>
	return (char*) map_sub_turret;
    c860:	6f e7       	ldi	r22, 0x7F	; 127
    c862:	7c e3       	ldi	r23, 0x3C	; 60
    c864:	02 c0       	rjmp	.+4      	; 0xc86a <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c866:	6d ec       	ldi	r22, 0xCD	; 205
    c868:	7c e3       	ldi	r23, 0x3C	; 60
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    c86a:	40 e0       	ldi	r20, 0x00	; 0
    c86c:	81 2f       	mov	r24, r17
    c86e:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c872:	80 91 e9 0f 	lds	r24, 0x0FE9
    c876:	88 23       	and	r24, r24
    c878:	19 f0       	breq	.+6      	; 0xc880 <update_level+0x1b4>
	return (char*) map_sub_shot;
    c87a:	62 e8       	ldi	r22, 0x82	; 130
    c87c:	7c e3       	ldi	r23, 0x3C	; 60
    c87e:	02 c0       	rjmp	.+4      	; 0xc884 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    c880:	6d ec       	ldi	r22, 0xCD	; 205
    c882:	7c e3       	ldi	r23, 0x3C	; 60
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    c884:	40 e0       	ldi	r20, 0x00	; 0
    c886:	8d 2f       	mov	r24, r29
    c888:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    c88c:	60 e0       	ldi	r22, 0x00	; 0
    c88e:	80 91 b8 0b 	lds	r24, 0x0BB8
    c892:	90 91 b9 0b 	lds	r25, 0x0BB9
    c896:	0e 94 3d 54 	call	0xa87a	; 0xa87a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    c89a:	6f 2d       	mov	r22, r15
    c89c:	80 91 b8 0b 	lds	r24, 0x0BB8
    c8a0:	90 91 b9 0b 	lds	r25, 0x0BB9
    c8a4:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_tile_explosions(&tile_animations);
    c8a8:	8d eb       	ldi	r24, 0xBD	; 189
    c8aa:	9b e0       	ldi	r25, 0x0B	; 11
    c8ac:	0e 94 92 54 	call	0xa924	; 0xa924 <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    c8b0:	6c 2f       	mov	r22, r28
    c8b2:	82 e1       	ldi	r24, 0x12	; 18
    c8b4:	90 e1       	ldi	r25, 0x10	; 16
    c8b6:	0e 94 00 5f 	call	0xbe00	; 0xbe00 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    c8ba:	60 2f       	mov	r22, r16
    c8bc:	82 e1       	ldi	r24, 0x12	; 18
    c8be:	90 e1       	ldi	r25, 0x10	; 16
    c8c0:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    c8c4:	61 2f       	mov	r22, r17
    c8c6:	8e ed       	ldi	r24, 0xDE	; 222
    c8c8:	9f e0       	ldi	r25, 0x0F	; 15
    c8ca:	0e 94 00 5f 	call	0xbe00	; 0xbe00 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    c8ce:	6d 2f       	mov	r22, r29
    c8d0:	8e ed       	ldi	r24, 0xDE	; 222
    c8d2:	9f e0       	ldi	r25, 0x0F	; 15
    c8d4:	0e 94 29 5f 	call	0xbe52	; 0xbe52 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    c8d8:	40 e6       	ldi	r20, 0x60	; 96
    c8da:	68 e2       	ldi	r22, 0x28	; 40
    c8dc:	82 e1       	ldi	r24, 0x12	; 18
    c8de:	90 e1       	ldi	r25, 0x10	; 16
    c8e0:	0e 94 52 5f 	call	0xbea4	; 0xbea4 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    c8e4:	40 ec       	ldi	r20, 0xC0	; 192
    c8e6:	68 e8       	ldi	r22, 0x88	; 136
    c8e8:	8e ed       	ldi	r24, 0xDE	; 222
    c8ea:	9f e0       	ldi	r25, 0x0F	; 15
    c8ec:	0e 94 52 5f 	call	0xbea4	; 0xbea4 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    c8f0:	6e e1       	ldi	r22, 0x1E	; 30
    c8f2:	70 e1       	ldi	r23, 0x10	; 16
    c8f4:	82 e1       	ldi	r24, 0x12	; 18
    c8f6:	90 e1       	ldi	r25, 0x10	; 16
    c8f8:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    c8fc:	6a ee       	ldi	r22, 0xEA	; 234
    c8fe:	7f e0       	ldi	r23, 0x0F	; 15
    c900:	8e ed       	ldi	r24, 0xDE	; 222
    c902:	9f e0       	ldi	r25, 0x0F	; 15
    c904:	0e 94 e7 5f 	call	0xbfce	; 0xbfce <update_turret_shot>
    c908:	56 cf       	rjmp	.-340    	; 0xc7b6 <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    c90a:	90 32       	cpi	r25, 0x20	; 32
    c90c:	09 f0       	breq	.+2      	; 0xc910 <update_level+0x244>
    c90e:	55 c0       	rjmp	.+170    	; 0xc9ba <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    c910:	0e 94 eb 5e 	call	0xbdd6	; 0xbdd6 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    c914:	60 e0       	ldi	r22, 0x00	; 0
    c916:	80 91 b8 0b 	lds	r24, 0x0BB8
    c91a:	90 91 b9 0b 	lds	r25, 0x0BB9
    c91e:	0e 94 e1 54 	call	0xa9c2	; 0xa9c2 <tank_map>
    c922:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    c924:	40 e0       	ldi	r20, 0x00	; 0
    c926:	67 ec       	ldi	r22, 0xC7	; 199
    c928:	7c e3       	ldi	r23, 0x3C	; 60
    c92a:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		p1_shot_index = p2_index + 4;
    c92e:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    c930:	6c 2f       	mov	r22, r28
    c932:	80 91 b8 0b 	lds	r24, 0x0BB8
    c936:	90 91 b9 0b 	lds	r25, 0x0BB9
    c93a:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
    c93e:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    c940:	40 e0       	ldi	r20, 0x00	; 0
    c942:	6d ec       	ldi	r22, 0xCD	; 205
    c944:	7c e3       	ldi	r23, 0x3C	; 60
    c946:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    c94a:	6c 2f       	mov	r22, r28
    c94c:	80 91 b8 0b 	lds	r24, 0x0BB8
    c950:	90 91 b9 0b 	lds	r25, 0x0BB9
    c954:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
		render_player(game.boss_fight_player, p1_index);
    c958:	60 e0       	ldi	r22, 0x00	; 0
    c95a:	80 91 b8 0b 	lds	r24, 0x0BB8
    c95e:	90 91 b9 0b 	lds	r25, 0x0BB9
    c962:	0e 94 3d 54 	call	0xa87a	; 0xa87a <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    c966:	6c 2f       	mov	r22, r28
    c968:	80 91 b8 0b 	lds	r24, 0x0BB8
    c96c:	90 91 b9 0b 	lds	r25, 0x0BB9
    c970:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_shot(&player2, p2_shot_index);
    c974:	6d 2f       	mov	r22, r29
    c976:	89 e4       	ldi	r24, 0x49	; 73
    c978:	9f e0       	ldi	r25, 0x0F	; 15
    c97a:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_tile_explosions(&tile_animations);
    c97e:	8d eb       	ldi	r24, 0xBD	; 189
    c980:	9b e0       	ldi	r25, 0x0B	; 11
    c982:	0e 94 92 54 	call	0xa924	; 0xa924 <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    c986:	60 91 b8 0b 	lds	r22, 0x0BB8
    c98a:	70 91 b9 0b 	lds	r23, 0x0BB9
    c98e:	80 91 ba 0b 	lds	r24, 0x0BBA
    c992:	90 91 bb 0b 	lds	r25, 0x0BBB
    c996:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    c99a:	60 91 ad 0b 	lds	r22, 0x0BAD
    c99e:	80 91 b8 0b 	lds	r24, 0x0BB8
    c9a2:	90 91 b9 0b 	lds	r25, 0x0BB9
    c9a6:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    c9aa:	80 91 ac 0b 	lds	r24, 0x0BAC
    c9ae:	80 32       	cpi	r24, 0x20	; 32
    c9b0:	09 f4       	brne	.+2      	; 0xc9b4 <update_level+0x2e8>
    c9b2:	82 c0       	rjmp	.+260    	; 0xcab8 <update_level+0x3ec>
		{
			resolve_scoring();
    c9b4:	0e 94 a1 62 	call	0xc542	; 0xc542 <resolve_scoring>
    c9b8:	7f c0       	rjmp	.+254    	; 0xcab8 <update_level+0x3ec>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    c9ba:	90 31       	cpi	r25, 0x10	; 16
    c9bc:	d9 f3       	breq	.-10     	; 0xc9b4 <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    c9be:	91 11       	cpse	r25, r1
    c9c0:	7b c0       	rjmp	.+246    	; 0xcab8 <update_level+0x3ec>
	{
		p2_index = tank_map(&player1, p1_index);
    c9c2:	60 e0       	ldi	r22, 0x00	; 0
    c9c4:	8a ed       	ldi	r24, 0xDA	; 218
    c9c6:	9b e0       	ldi	r25, 0x0B	; 11
    c9c8:	0e 94 e1 54 	call	0xa9c2	; 0xa9c2 <tank_map>
    c9cc:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    c9ce:	68 2f       	mov	r22, r24
    c9d0:	89 e4       	ldi	r24, 0x49	; 73
    c9d2:	9f e0       	ldi	r25, 0x0F	; 15
    c9d4:	0e 94 e1 54 	call	0xa9c2	; 0xa9c2 <tank_map>
    c9d8:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    c9da:	68 2f       	mov	r22, r24
    c9dc:	8a ed       	ldi	r24, 0xDA	; 218
    c9de:	9b e0       	ldi	r25, 0x0B	; 11
    c9e0:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
    c9e4:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    c9e6:	68 2f       	mov	r22, r24
    c9e8:	89 e4       	ldi	r24, 0x49	; 73
    c9ea:	9f e0       	ldi	r25, 0x0F	; 15
    c9ec:	0e 94 4a 55 	call	0xaa94	; 0xaa94 <shot_map>
		render_player(&player1, p1_index);
    c9f0:	60 e0       	ldi	r22, 0x00	; 0
    c9f2:	8a ed       	ldi	r24, 0xDA	; 218
    c9f4:	9b e0       	ldi	r25, 0x0B	; 11
    c9f6:	0e 94 3d 54 	call	0xa87a	; 0xa87a <render_player>
		render_player(&player2, p2_index);
    c9fa:	6d 2d       	mov	r22, r13
    c9fc:	89 e4       	ldi	r24, 0x49	; 73
    c9fe:	9f e0       	ldi	r25, 0x0F	; 15
    ca00:	0e 94 3d 54 	call	0xa87a	; 0xa87a <render_player>
		render_shot(&player1, p1_shot_index);
    ca04:	6e 2d       	mov	r22, r14
    ca06:	8a ed       	ldi	r24, 0xDA	; 218
    ca08:	9b e0       	ldi	r25, 0x0B	; 11
    ca0a:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_shot(&player2, p2_shot_index);
    ca0e:	6f 2d       	mov	r22, r15
    ca10:	89 e4       	ldi	r24, 0x49	; 73
    ca12:	9f e0       	ldi	r25, 0x0F	; 15
    ca14:	0e 94 66 54 	call	0xa8cc	; 0xa8cc <render_shot>
		render_tile_explosions(&tile_animations);
    ca18:	8d eb       	ldi	r24, 0xBD	; 189
    ca1a:	9b e0       	ldi	r25, 0x0B	; 11
    ca1c:	0e 94 92 54 	call	0xa924	; 0xa924 <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    ca20:	80 91 b4 0b 	lds	r24, 0x0BB4
    ca24:	90 91 b5 0b 	lds	r25, 0x0BB5
    ca28:	89 3e       	cpi	r24, 0xE9	; 233
    ca2a:	93 40       	sbci	r25, 0x03	; 3
    ca2c:	88 f0       	brcs	.+34     	; 0xca50 <update_level+0x384>
    ca2e:	80 91 dc 0f 	lds	r24, 0x0FDC
    ca32:	90 91 dd 0f 	lds	r25, 0x0FDD
    ca36:	18 16       	cp	r1, r24
    ca38:	19 06       	cpc	r1, r25
    ca3a:	54 f4       	brge	.+20     	; 0xca50 <update_level+0x384>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    ca3c:	80 ed       	ldi	r24, 0xD0	; 208
    ca3e:	9f e0       	ldi	r25, 0x0F	; 15
    ca40:	0e 94 c7 54 	call	0xa98e	; 0xa98e <render_scope>
    ca44:	88 23       	and	r24, r24
    ca46:	21 f0       	breq	.+8      	; 0xca50 <update_level+0x384>
    ca48:	10 92 b5 0b 	sts	0x0BB5, r1
    ca4c:	10 92 b4 0b 	sts	0x0BB4, r1
		}
		game.scope_counter++;
    ca50:	20 91 b4 0b 	lds	r18, 0x0BB4
    ca54:	30 91 b5 0b 	lds	r19, 0x0BB5
    ca58:	2f 5f       	subi	r18, 0xFF	; 255
    ca5a:	3f 4f       	sbci	r19, 0xFF	; 255
    ca5c:	30 93 b5 0b 	sts	0x0BB5, r19
    ca60:	20 93 b4 0b 	sts	0x0BB4, r18
		
		// Update
		update_player(p1, &player1);
    ca64:	6a ed       	ldi	r22, 0xDA	; 218
    ca66:	7b e0       	ldi	r23, 0x0B	; 11
    ca68:	c8 01       	movw	r24, r16
    ca6a:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
		update_player(p2, &player2);
    ca6e:	69 e4       	ldi	r22, 0x49	; 73
    ca70:	7f e0       	ldi	r23, 0x0F	; 15
    ca72:	ce 01       	movw	r24, r28
    ca74:	0e 94 3f 61 	call	0xc27e	; 0xc27e <update_player>
		resolve_scoring();
    ca78:	0e 94 a1 62 	call	0xc542	; 0xc542 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    ca7c:	60 e0       	ldi	r22, 0x00	; 0
    ca7e:	8a ed       	ldi	r24, 0xDA	; 218
    ca80:	9b e0       	ldi	r25, 0x0B	; 11
    ca82:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <collision_detect_player>
    ca86:	88 23       	and	r24, r24
    ca88:	41 f0       	breq	.+16     	; 0xca9a <update_level+0x3ce>
    ca8a:	2f e0       	ldi	r18, 0x0F	; 15
    ca8c:	40 e0       	ldi	r20, 0x00	; 0
    ca8e:	69 e4       	ldi	r22, 0x49	; 73
    ca90:	7f e0       	ldi	r23, 0x0F	; 15
    ca92:	8a ed       	ldi	r24, 0xDA	; 218
    ca94:	9b e0       	ldi	r25, 0x0B	; 11
    ca96:	0e 94 fd 5a 	call	0xb5fa	; 0xb5fa <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    ca9a:	6f e0       	ldi	r22, 0x0F	; 15
    ca9c:	89 e4       	ldi	r24, 0x49	; 73
    ca9e:	9f e0       	ldi	r25, 0x0F	; 15
    caa0:	0e 94 d9 5b 	call	0xb7b2	; 0xb7b2 <collision_detect_player>
    caa4:	88 23       	and	r24, r24
    caa6:	41 f0       	breq	.+16     	; 0xcab8 <update_level+0x3ec>
    caa8:	20 e0       	ldi	r18, 0x00	; 0
    caaa:	4f e0       	ldi	r20, 0x0F	; 15
    caac:	6a ed       	ldi	r22, 0xDA	; 218
    caae:	7b e0       	ldi	r23, 0x0B	; 11
    cab0:	89 e4       	ldi	r24, 0x49	; 73
    cab2:	9f e0       	ldi	r25, 0x0F	; 15
    cab4:	0e 94 fd 5a 	call	0xb5fa	; 0xb5fa <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    cab8:	80 91 bc 0b 	lds	r24, 0x0BBC
    cabc:	83 30       	cpi	r24, 0x03	; 3
    cabe:	71 f5       	brne	.+92     	; 0xcb1c <update_level+0x450>
	{
		game.demo_counter++;
    cac0:	80 91 b2 0b 	lds	r24, 0x0BB2
    cac4:	90 91 b3 0b 	lds	r25, 0x0BB3
    cac8:	01 96       	adiw	r24, 0x01	; 1
    caca:	90 93 b3 0b 	sts	0x0BB3, r25
    cace:	80 93 b2 0b 	sts	0x0BB2, r24
		held = ReadJoypad(0);
    cad2:	80 e0       	ldi	r24, 0x00	; 0
    cad4:	0e 94 0a 40 	call	0x8014	; 0x8014 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cad8:	80 e0       	ldi	r24, 0x00	; 0
    cada:	0e 94 0a 40 	call	0x8014	; 0x8014 <ReadJoypad>
    cade:	89 2b       	or	r24, r25
    cae0:	89 f0       	breq	.+34     	; 0xcb04 <update_level+0x438>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    cae2:	10 92 b3 0b 	sts	0x0BB3, r1
    cae6:	10 92 b2 0b 	sts	0x0BB2, r1
			fade_through();
    caea:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
			init_game_state();
    caee:	0e 94 e0 51 	call	0xa3c0	; 0xa3c0 <init_game_state>
			load_splash();
#endif
		}
	}
}
    caf2:	df 91       	pop	r29
    caf4:	cf 91       	pop	r28
    caf6:	1f 91       	pop	r17
    caf8:	0f 91       	pop	r16
    cafa:	ff 90       	pop	r15
    cafc:	ef 90       	pop	r14
    cafe:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    cb00:	0c 94 5a 60 	jmp	0xc0b4	; 0xc0b4 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    cb04:	81 e0       	ldi	r24, 0x01	; 1
    cb06:	0e 94 0a 40 	call	0x8014	; 0x8014 <ReadJoypad>
    cb0a:	89 2b       	or	r24, r25
    cb0c:	51 f7       	brne	.-44     	; 0xcae2 <update_level+0x416>
    cb0e:	80 91 b2 0b 	lds	r24, 0x0BB2
    cb12:	90 91 b3 0b 	lds	r25, 0x0BB3
    cb16:	88 30       	cpi	r24, 0x08	; 8
    cb18:	97 40       	sbci	r25, 0x07	; 7
    cb1a:	18 f7       	brcc	.-58     	; 0xcae2 <update_level+0x416>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    cb1c:	df 91       	pop	r29
    cb1e:	cf 91       	pop	r28
    cb20:	1f 91       	pop	r17
    cb22:	0f 91       	pop	r16
    cb24:	ff 90       	pop	r15
    cb26:	ef 90       	pop	r14
    cb28:	df 90       	pop	r13
    cb2a:	08 95       	ret

0000cb2c <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    cb2c:	cf 93       	push	r28
    cb2e:	df 93       	push	r29
    cb30:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    cb32:	88 81       	ld	r24, Y
    cb34:	99 81       	ldd	r25, Y+1	; 0x01
    cb36:	91 ff       	sbrs	r25, 1
    cb38:	08 c0       	rjmp	.+16     	; 0xcb4a <update_tank_rank+0x1e>
	{
		game.tank_rank_counter = 0;
    cb3a:	10 92 b7 0b 	sts	0x0BB7, r1
    cb3e:	10 92 b6 0b 	sts	0x0BB6, r1
		SFX_NAVIGATE;
		fade_through();
    cb42:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
		load_splash();
    cb46:	0e 94 5a 60 	call	0xc0b4	; 0xc0b4 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    cb4a:	8c 81       	ldd	r24, Y+4	; 0x04
    cb4c:	9d 81       	ldd	r25, Y+5	; 0x05
    cb4e:	92 ff       	sbrs	r25, 2
    cb50:	19 c0       	rjmp	.+50     	; 0xcb84 <update_tank_rank+0x58>
    cb52:	8e 81       	ldd	r24, Y+6	; 0x06
    cb54:	8f 3f       	cpi	r24, 0xFF	; 255
    cb56:	b1 f4       	brne	.+44     	; 0xcb84 <update_tank_rank+0x58>
	{
		game.tank_rank_counter = 0;
    cb58:	10 92 b7 0b 	sts	0x0BB7, r1
    cb5c:	10 92 b6 0b 	sts	0x0BB6, r1
	    SFX_NAVIGATE;
	    init_scores(&scores);
    cb60:	82 e6       	ldi	r24, 0x62	; 98
    cb62:	9b e0       	ldi	r25, 0x0B	; 11
    cb64:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <init_scores>
	    init_handles(&handles);
    cb68:	89 e8       	ldi	r24, 0x89	; 137
    cb6a:	9b e0       	ldi	r25, 0x0B	; 11
    cb6c:	0e 94 87 50 	call	0xa10e	; 0xa10e <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    cb70:	82 e6       	ldi	r24, 0x62	; 98
    cb72:	9b e0       	ldi	r25, 0x0B	; 11
    cb74:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <EepromWriteBlock>
    cb78:	89 e8       	ldi	r24, 0x89	; 137
    cb7a:	9b e0       	ldi	r25, 0x0B	; 11
    cb7c:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    cb80:	0e 94 9c 60 	call	0xc138	; 0xc138 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    cb84:	80 91 b6 0b 	lds	r24, 0x0BB6
    cb88:	90 91 b7 0b 	lds	r25, 0x0BB7
    cb8c:	85 38       	cpi	r24, 0x85	; 133
    cb8e:	93 40       	sbci	r25, 0x03	; 3
    cb90:	40 f0       	brcs	.+16     	; 0xcba2 <update_tank_rank+0x76>
	{
		game.tank_rank_counter = 0;
    cb92:	10 92 b7 0b 	sts	0x0BB7, r1
    cb96:	10 92 b6 0b 	sts	0x0BB6, r1
		SFX_NAVIGATE;
		fade_through();
    cb9a:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
		load_splash();
    cb9e:	0e 94 5a 60 	call	0xc0b4	; 0xc0b4 <load_splash>
	}
	game.tank_rank_counter++;
    cba2:	80 91 b6 0b 	lds	r24, 0x0BB6
    cba6:	90 91 b7 0b 	lds	r25, 0x0BB7
    cbaa:	01 96       	adiw	r24, 0x01	; 1
    cbac:	90 93 b7 0b 	sts	0x0BB7, r25
    cbb0:	80 93 b6 0b 	sts	0x0BB6, r24
#endif
}
    cbb4:	df 91       	pop	r29
    cbb6:	cf 91       	pop	r28
    cbb8:	08 95       	ret

0000cbba <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    cbba:	af 92       	push	r10
    cbbc:	bf 92       	push	r11
    cbbe:	cf 92       	push	r12
    cbc0:	df 92       	push	r13
    cbc2:	ef 92       	push	r14
    cbc4:	ff 92       	push	r15
    cbc6:	0f 93       	push	r16
    cbc8:	1f 93       	push	r17
    cbca:	cf 93       	push	r28
    cbcc:	df 93       	push	r29
    cbce:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    cbd0:	fb 01       	movw	r30, r22
    cbd2:	00 81       	ld	r16, Z
    cbd4:	11 81       	ldd	r17, Z+1	; 0x01
    cbd6:	68 01       	movw	r12, r16
    cbd8:	f0 e1       	ldi	r31, 0x10	; 16
    cbda:	cf 22       	and	r12, r31
    cbdc:	dd 24       	eor	r13, r13
    cbde:	04 ff       	sbrs	r16, 4
    cbe0:	09 c0       	rjmp	.+18     	; 0xcbf4 <_handle_select_helper+0x3a>
    cbe2:	8d 81       	ldd	r24, Y+5	; 0x05
    cbe4:	81 11       	cpse	r24, r1
    cbe6:	06 c0       	rjmp	.+12     	; 0xcbf4 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    cbe8:	88 81       	ld	r24, Y
    cbea:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    cbec:	87 ff       	sbrs	r24, 7
    cbee:	10 c0       	rjmp	.+32     	; 0xcc10 <_handle_select_helper+0x56>
    cbf0:	18 82       	st	Y, r1
    cbf2:	a3 c0       	rjmp	.+326    	; 0xcd3a <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    cbf4:	58 01       	movw	r10, r16
    cbf6:	20 e2       	ldi	r18, 0x20	; 32
    cbf8:	a2 22       	and	r10, r18
    cbfa:	bb 24       	eor	r11, r11
    cbfc:	05 ff       	sbrs	r16, 5
    cbfe:	0a c0       	rjmp	.+20     	; 0xcc14 <_handle_select_helper+0x5a>
    cc00:	8d 81       	ldd	r24, Y+5	; 0x05
    cc02:	81 11       	cpse	r24, r1
    cc04:	07 c0       	rjmp	.+14     	; 0xcc14 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    cc06:	88 81       	ld	r24, Y
    cc08:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    cc0a:	89 30       	cpi	r24, 0x09	; 9
    cc0c:	0c f0       	brlt	.+2      	; 0xcc10 <_handle_select_helper+0x56>
    cc0e:	88 e0       	ldi	r24, 0x08	; 8
    cc10:	88 83       	st	Y, r24
    cc12:	93 c0       	rjmp	.+294    	; 0xcd3a <_handle_select_helper+0x180>
    cc14:	7a 01       	movw	r14, r20
    cc16:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    cc18:	0e 94 92 60 	call	0xc124	; 0xc124 <select_pressed>
    cc1c:	88 23       	and	r24, r24
    cc1e:	d1 f0       	breq	.+52     	; 0xcc54 <_handle_select_helper+0x9a>
    cc20:	9d 81       	ldd	r25, Y+5	; 0x05
    cc22:	91 11       	cpse	r25, r1
    cc24:	17 c0       	rjmp	.+46     	; 0xcc54 <_handle_select_helper+0x9a>
	{
		ps->select_state = EDITING;
    cc26:	81 e0       	ldi	r24, 0x01	; 1
    cc28:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    cc2a:	69 91       	ld	r22, Y+
    cc2c:	83 e0       	ldi	r24, 0x03	; 3
    cc2e:	68 02       	muls	r22, r24
    cc30:	b0 01       	movw	r22, r0
    cc32:	11 24       	eor	r1, r1
    cc34:	65 57       	subi	r22, 0x75	; 117
    cc36:	74 4f       	sbci	r23, 0xF4	; 244
    cc38:	43 e0       	ldi	r20, 0x03	; 3
    cc3a:	ce 01       	movw	r24, r28
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
#endif
}
    cc3c:	df 91       	pop	r29
    cc3e:	cf 91       	pop	r28
    cc40:	1f 91       	pop	r17
    cc42:	0f 91       	pop	r16
    cc44:	ff 90       	pop	r15
    cc46:	ef 90       	pop	r14
    cc48:	df 90       	pop	r13
    cc4a:	cf 90       	pop	r12
    cc4c:	bf 90       	pop	r11
    cc4e:	af 90       	pop	r10
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    cc50:	0c 94 0a 4f 	jmp	0x9e14	; 0x9e14 <LBCopyChars>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    cc54:	07 ff       	sbrs	r16, 7
    cc56:	0a c0       	rjmp	.+20     	; 0xcc6c <_handle_select_helper+0xb2>
    cc58:	9d 81       	ldd	r25, Y+5	; 0x05
    cc5a:	91 30       	cpi	r25, 0x01	; 1
    cc5c:	39 f4       	brne	.+14     	; 0xcc6c <_handle_select_helper+0xb2>
	{
		ps->char_index++;
    cc5e:	8c 81       	ldd	r24, Y+4	; 0x04
    cc60:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    cc62:	83 30       	cpi	r24, 0x03	; 3
    cc64:	0c f0       	brlt	.+2      	; 0xcc68 <_handle_select_helper+0xae>
    cc66:	82 e0       	ldi	r24, 0x02	; 2
    cc68:	8c 83       	std	Y+4, r24	; 0x04
    cc6a:	67 c0       	rjmp	.+206    	; 0xcd3a <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    cc6c:	06 ff       	sbrs	r16, 6
    cc6e:	09 c0       	rjmp	.+18     	; 0xcc82 <_handle_select_helper+0xc8>
    cc70:	9d 81       	ldd	r25, Y+5	; 0x05
    cc72:	91 30       	cpi	r25, 0x01	; 1
    cc74:	29 f5       	brne	.+74     	; 0xccc0 <_handle_select_helper+0x106>
	{
		ps->char_index--;
    cc76:	8c 81       	ldd	r24, Y+4	; 0x04
    cc78:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    cc7a:	87 ff       	sbrs	r24, 7
    cc7c:	f5 cf       	rjmp	.-22     	; 0xcc68 <_handle_select_helper+0xae>
    cc7e:	1c 82       	std	Y+4, r1	; 0x04
    cc80:	5c c0       	rjmp	.+184    	; 0xcd3a <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    cc82:	cd 28       	or	r12, r13
    cc84:	61 f0       	breq	.+24     	; 0xcc9e <_handle_select_helper+0xe4>
    cc86:	8d 81       	ldd	r24, Y+5	; 0x05
    cc88:	81 30       	cpi	r24, 0x01	; 1
    cc8a:	e9 f5       	brne	.+122    	; 0xcd06 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    cc8c:	8c 81       	ldd	r24, Y+4	; 0x04
    cc8e:	c8 0f       	add	r28, r24
    cc90:	d1 1d       	adc	r29, r1
    cc92:	99 81       	ldd	r25, Y+1	; 0x01
    cc94:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    cc96:	91 34       	cpi	r25, 0x41	; 65
    cc98:	70 f4       	brcc	.+28     	; 0xccb6 <_handle_select_helper+0xfc>
    cc9a:	81 e4       	ldi	r24, 0x41	; 65
    cc9c:	0f c0       	rjmp	.+30     	; 0xccbc <_handle_select_helper+0x102>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    cc9e:	ab 28       	or	r10, r11
    cca0:	89 f0       	breq	.+34     	; 0xccc4 <_handle_select_helper+0x10a>
    cca2:	8d 81       	ldd	r24, Y+5	; 0x05
    cca4:	81 30       	cpi	r24, 0x01	; 1
    cca6:	79 f5       	brne	.+94     	; 0xcd06 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    cca8:	8c 81       	ldd	r24, Y+4	; 0x04
    ccaa:	c8 0f       	add	r28, r24
    ccac:	d1 1d       	adc	r29, r1
    ccae:	99 81       	ldd	r25, Y+1	; 0x01
    ccb0:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    ccb2:	9b 35       	cpi	r25, 0x5B	; 91
    ccb4:	10 f4       	brcc	.+4      	; 0xccba <_handle_select_helper+0x100>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    ccb6:	99 83       	std	Y+1, r25	; 0x01
    ccb8:	40 c0       	rjmp	.+128    	; 0xcd3a <_handle_select_helper+0x180>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    ccba:	8a e5       	ldi	r24, 0x5A	; 90
    ccbc:	89 83       	std	Y+1, r24	; 0x01
    ccbe:	3d c0       	rjmp	.+122    	; 0xcd3a <_handle_select_helper+0x180>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    ccc0:	ab 28       	or	r10, r11
    ccc2:	09 f5       	brne	.+66     	; 0xcd06 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    ccc4:	88 23       	and	r24, r24
    ccc6:	f9 f0       	breq	.+62     	; 0xcd06 <_handle_select_helper+0x14c>
    ccc8:	8d 81       	ldd	r24, Y+5	; 0x05
    ccca:	81 30       	cpi	r24, 0x01	; 1
    cccc:	e1 f4       	brne	.+56     	; 0xcd06 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    ccce:	fe 01       	movw	r30, r28
    ccd0:	81 91       	ld	r24, Z+
    ccd2:	8f 01       	movw	r16, r30
    ccd4:	f7 01       	movw	r30, r14
    ccd6:	83 87       	std	Z+11, r24	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    ccd8:	43 e0       	ldi	r20, 0x03	; 3
    ccda:	b8 01       	movw	r22, r16
    ccdc:	c7 01       	movw	r24, r14
    ccde:	0c 96       	adiw	r24, 0x0c	; 12
    cce0:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    cce4:	88 81       	ld	r24, Y
    cce6:	f3 e0       	ldi	r31, 0x03	; 3
    cce8:	8f 02       	muls	r24, r31
    ccea:	c0 01       	movw	r24, r0
    ccec:	11 24       	eor	r1, r1
    ccee:	43 e0       	ldi	r20, 0x03	; 3
    ccf0:	b8 01       	movw	r22, r16
    ccf2:	85 57       	subi	r24, 0x75	; 117
    ccf4:	94 4f       	sbci	r25, 0xF4	; 244
    ccf6:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ccfa:	89 e8       	ldi	r24, 0x89	; 137
    ccfc:	9b e0       	ldi	r25, 0x0B	; 11
    ccfe:	0e 94 5b 41 	call	0x82b6	; 0x82b6 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    cd02:	82 e0       	ldi	r24, 0x02	; 2
    cd04:	0a c0       	rjmp	.+20     	; 0xcd1a <_handle_select_helper+0x160>
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    cd06:	11 ff       	sbrs	r17, 1
    cd08:	18 c0       	rjmp	.+48     	; 0xcd3a <_handle_select_helper+0x180>
    cd0a:	8d 81       	ldd	r24, Y+5	; 0x05
    cd0c:	81 30       	cpi	r24, 0x01	; 1
    cd0e:	11 f4       	brne	.+4      	; 0xcd14 <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    cd10:	1d 82       	std	Y+5, r1	; 0x05
    cd12:	13 c0       	rjmp	.+38     	; 0xcd3a <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    cd14:	82 30       	cpi	r24, 0x02	; 2
    cd16:	19 f4       	brne	.+6      	; 0xcd1e <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    cd18:	81 e0       	ldi	r24, 0x01	; 1
    cd1a:	8d 83       	std	Y+5, r24	; 0x05
    cd1c:	0e c0       	rjmp	.+28     	; 0xcd3a <_handle_select_helper+0x180>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
    cd1e:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
		load_splash();
	}
#endif
}
    cd22:	df 91       	pop	r29
    cd24:	cf 91       	pop	r28
    cd26:	1f 91       	pop	r17
    cd28:	0f 91       	pop	r16
    cd2a:	ff 90       	pop	r15
    cd2c:	ef 90       	pop	r14
    cd2e:	df 90       	pop	r13
    cd30:	cf 90       	pop	r12
    cd32:	bf 90       	pop	r11
    cd34:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    cd36:	0c 94 5a 60 	jmp	0xc0b4	; 0xc0b4 <load_splash>
	}
#endif
}
    cd3a:	df 91       	pop	r29
    cd3c:	cf 91       	pop	r28
    cd3e:	1f 91       	pop	r17
    cd40:	0f 91       	pop	r16
    cd42:	ff 90       	pop	r15
    cd44:	ef 90       	pop	r14
    cd46:	df 90       	pop	r13
    cd48:	cf 90       	pop	r12
    cd4a:	bf 90       	pop	r11
    cd4c:	af 90       	pop	r10
    cd4e:	08 95       	ret

0000cd50 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    cd50:	af 92       	push	r10
    cd52:	bf 92       	push	r11
    cd54:	cf 92       	push	r12
    cd56:	df 92       	push	r13
    cd58:	ef 92       	push	r14
    cd5a:	ff 92       	push	r15
    cd5c:	0f 93       	push	r16
    cd5e:	1f 93       	push	r17
    cd60:	cf 93       	push	r28
    cd62:	df 93       	push	r29
    cd64:	00 d0       	rcall	.+0      	; 0xcd66 <_handle_select_render_helper+0x16>
    cd66:	1f 92       	push	r1
    cd68:	cd b7       	in	r28, 0x3d	; 61
    cd6a:	de b7       	in	r29, 0x3e	; 62
    cd6c:	7c 01       	movw	r14, r24
    cd6e:	b4 2e       	mov	r11, r20
    cd70:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    cd72:	80 e2       	ldi	r24, 0x20	; 32
    cd74:	89 83       	std	Y+1, r24	; 0x01
    cd76:	8a 83       	std	Y+2, r24	; 0x02
    cd78:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    cd7a:	f7 01       	movw	r30, r14
    cd7c:	85 81       	ldd	r24, Z+5	; 0x05
    cd7e:	81 11       	cpse	r24, r1
    cd80:	1d c0       	rjmp	.+58     	; 0xcdbc <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    cd82:	40 e0       	ldi	r20, 0x00	; 0
    cd84:	6b e8       	ldi	r22, 0x8B	; 139
    cd86:	7c e3       	ldi	r23, 0x3C	; 60
    cd88:	82 2f       	mov	r24, r18
    cd8a:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    cd8e:	40 e0       	ldi	r20, 0x00	; 0
    cd90:	6d ec       	ldi	r22, 0xCD	; 205
    cd92:	7c e3       	ldi	r23, 0x3C	; 60
    cd94:	81 e0       	ldi	r24, 0x01	; 1
    cd96:	81 0f       	add	r24, r17
    cd98:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    cd9c:	f7 01       	movw	r30, r14
    cd9e:	40 81       	ld	r20, Z
    cda0:	44 0f       	add	r20, r20
    cda2:	44 0f       	add	r20, r20
    cda4:	44 0f       	add	r20, r20
    cda6:	40 5c       	subi	r20, 0xC0	; 192
    cda8:	01 e0       	ldi	r16, 0x01	; 1
    cdaa:	21 e0       	ldi	r18, 0x01	; 1
    cdac:	6b 2d       	mov	r22, r11
    cdae:	66 0f       	add	r22, r22
    cdb0:	66 0f       	add	r22, r22
    cdb2:	66 0f       	add	r22, r22
    cdb4:	81 2f       	mov	r24, r17
    cdb6:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
    cdba:	6f c0       	rjmp	.+222    	; 0xce9a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    cdbc:	81 30       	cpi	r24, 0x01	; 1
    cdbe:	09 f0       	breq	.+2      	; 0xcdc2 <_handle_select_render_helper+0x72>
    cdc0:	44 c0       	rjmp	.+136    	; 0xce4a <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    cdc2:	40 e0       	ldi	r20, 0x00	; 0
    cdc4:	68 e8       	ldi	r22, 0x88	; 136
    cdc6:	7c e3       	ldi	r23, 0x3C	; 60
    cdc8:	82 2f       	mov	r24, r18
    cdca:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    cdce:	aa 24       	eor	r10, r10
    cdd0:	a3 94       	inc	r10
    cdd2:	a1 0e       	add	r10, r17
    cdd4:	40 e0       	ldi	r20, 0x00	; 0
    cdd6:	65 e8       	ldi	r22, 0x85	; 133
    cdd8:	7c e3       	ldi	r23, 0x3C	; 60
    cdda:	8a 2d       	mov	r24, r10
    cddc:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    cde0:	cb 2c       	mov	r12, r11
    cde2:	d1 2c       	mov	r13, r1
    cde4:	f5 e0       	ldi	r31, 0x05	; 5
    cde6:	cf 0e       	add	r12, r31
    cde8:	d1 1c       	adc	r13, r1
    cdea:	f7 01       	movw	r30, r14
    cdec:	40 81       	ld	r20, Z
    cdee:	44 0f       	add	r20, r20
    cdf0:	44 0f       	add	r20, r20
    cdf2:	44 0f       	add	r20, r20
    cdf4:	48 5c       	subi	r20, 0xC8	; 200
    cdf6:	84 81       	ldd	r24, Z+4	; 0x04
    cdf8:	b6 01       	movw	r22, r12
    cdfa:	68 0f       	add	r22, r24
    cdfc:	71 1d       	adc	r23, r1
    cdfe:	87 fd       	sbrc	r24, 7
    ce00:	7a 95       	dec	r23
    ce02:	66 0f       	add	r22, r22
    ce04:	66 0f       	add	r22, r22
    ce06:	66 0f       	add	r22, r22
    ce08:	01 e0       	ldi	r16, 0x01	; 1
    ce0a:	21 e0       	ldi	r18, 0x01	; 1
    ce0c:	81 2f       	mov	r24, r17
    ce0e:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    ce12:	f7 01       	movw	r30, r14
    ce14:	40 81       	ld	r20, Z
    ce16:	44 0f       	add	r20, r20
    ce18:	44 0f       	add	r20, r20
    ce1a:	44 0f       	add	r20, r20
    ce1c:	48 5b       	subi	r20, 0xB8	; 184
    ce1e:	84 81       	ldd	r24, Z+4	; 0x04
    ce20:	c8 0e       	add	r12, r24
    ce22:	d1 1c       	adc	r13, r1
    ce24:	87 fd       	sbrc	r24, 7
    ce26:	da 94       	dec	r13
    ce28:	6c 2d       	mov	r22, r12
    ce2a:	66 0f       	add	r22, r22
    ce2c:	66 0f       	add	r22, r22
    ce2e:	66 0f       	add	r22, r22
    ce30:	21 e0       	ldi	r18, 0x01	; 1
    ce32:	8a 2d       	mov	r24, r10
    ce34:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    ce38:	43 e0       	ldi	r20, 0x03	; 3
    ce3a:	b7 01       	movw	r22, r14
    ce3c:	6f 5f       	subi	r22, 0xFF	; 255
    ce3e:	7f 4f       	sbci	r23, 0xFF	; 255
    ce40:	ce 01       	movw	r24, r28
    ce42:	01 96       	adiw	r24, 0x01	; 1
    ce44:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
    ce48:	28 c0       	rjmp	.+80     	; 0xce9a <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    ce4a:	82 30       	cpi	r24, 0x02	; 2
    ce4c:	31 f5       	brne	.+76     	; 0xce9a <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    ce4e:	c4 2e       	mov	r12, r20
    ce50:	d1 2c       	mov	r13, r1
    ce52:	48 e2       	ldi	r20, 0x28	; 40
    ce54:	65 e0       	ldi	r22, 0x05	; 5
    ce56:	70 e0       	ldi	r23, 0x00	; 0
    ce58:	c6 01       	movw	r24, r12
    ce5a:	06 96       	adiw	r24, 0x06	; 6
    ce5c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    ce60:	23 e0       	ldi	r18, 0x03	; 3
    ce62:	a7 01       	movw	r20, r14
    ce64:	4f 5f       	subi	r20, 0xFF	; 255
    ce66:	5f 4f       	sbci	r21, 0xFF	; 255
    ce68:	65 e0       	ldi	r22, 0x05	; 5
    ce6a:	87 e0       	ldi	r24, 0x07	; 7
    ce6c:	8b 0d       	add	r24, r11
    ce6e:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    ce72:	49 e2       	ldi	r20, 0x29	; 41
    ce74:	65 e0       	ldi	r22, 0x05	; 5
    ce76:	70 e0       	ldi	r23, 0x00	; 0
    ce78:	c6 01       	movw	r24, r12
    ce7a:	0a 96       	adiw	r24, 0x0a	; 10
    ce7c:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
		MapSprite2(idx, map_none, 0);
    ce80:	40 e0       	ldi	r20, 0x00	; 0
    ce82:	6d ec       	ldi	r22, 0xCD	; 205
    ce84:	7c e3       	ldi	r23, 0x3C	; 60
    ce86:	81 2f       	mov	r24, r17
    ce88:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    ce8c:	40 e0       	ldi	r20, 0x00	; 0
    ce8e:	6d ec       	ldi	r22, 0xCD	; 205
    ce90:	7c e3       	ldi	r23, 0x3C	; 60
    ce92:	81 e0       	ldi	r24, 0x01	; 1
    ce94:	81 0f       	add	r24, r17
    ce96:	0e 94 e6 4c 	call	0x99cc	; 0x99cc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    ce9a:	f7 01       	movw	r30, r14
    ce9c:	60 81       	ld	r22, Z
    ce9e:	68 5f       	subi	r22, 0xF8	; 248
    cea0:	23 e0       	ldi	r18, 0x03	; 3
    cea2:	ae 01       	movw	r20, r28
    cea4:	4f 5f       	subi	r20, 0xFF	; 255
    cea6:	5f 4f       	sbci	r21, 0xFF	; 255
    cea8:	85 e0       	ldi	r24, 0x05	; 5
    ceaa:	8b 0d       	add	r24, r11
    ceac:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
}
    ceb0:	0f 90       	pop	r0
    ceb2:	0f 90       	pop	r0
    ceb4:	0f 90       	pop	r0
    ceb6:	df 91       	pop	r29
    ceb8:	cf 91       	pop	r28
    ceba:	1f 91       	pop	r17
    cebc:	0f 91       	pop	r16
    cebe:	ff 90       	pop	r15
    cec0:	ef 90       	pop	r14
    cec2:	df 90       	pop	r13
    cec4:	cf 90       	pop	r12
    cec6:	bf 90       	pop	r11
    cec8:	af 90       	pop	r10
    ceca:	08 95       	ret

0000cecc <load_handle_select>:

void load_handle_select()
{
    cecc:	8f 92       	push	r8
    cece:	9f 92       	push	r9
    ced0:	af 92       	push	r10
    ced2:	bf 92       	push	r11
    ced4:	cf 92       	push	r12
    ced6:	df 92       	push	r13
    ced8:	ef 92       	push	r14
    ceda:	ff 92       	push	r15
    cedc:	0f 93       	push	r16
    cede:	1f 93       	push	r17
    cee0:	cf 93       	push	r28
    cee2:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    cee4:	82 e0       	ldi	r24, 0x02	; 2
    cee6:	80 93 a9 0b 	sts	0x0BA9, r24
	clear_sprites();
    ceea:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    ceee:	4b e0       	ldi	r20, 0x0B	; 11
    cef0:	56 e7       	ldi	r21, 0x76	; 118
    cef2:	64 e0       	ldi	r22, 0x04	; 4
    cef4:	83 e0       	ldi	r24, 0x03	; 3
    cef6:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    cefa:	45 e0       	ldi	r20, 0x05	; 5
    cefc:	56 e7       	ldi	r21, 0x76	; 118
    cefe:	64 e0       	ldi	r22, 0x04	; 4
    cf00:	84 e1       	ldi	r24, 0x14	; 20
    cf02:	0e 94 6c 4d 	call	0x9ad8	; 0x9ad8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    cf06:	4d e9       	ldi	r20, 0x9D	; 157
    cf08:	52 e0       	ldi	r21, 0x02	; 2
    cf0a:	61 e0       	ldi	r22, 0x01	; 1
    cf0c:	70 e0       	ldi	r23, 0x00	; 0
    cf0e:	89 e0       	ldi	r24, 0x09	; 9
    cf10:	90 e0       	ldi	r25, 0x00	; 0
    cf12:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(6, 5, (char*) strPlayer1);
    cf16:	4c e8       	ldi	r20, 0x8C	; 140
    cf18:	52 e0       	ldi	r21, 0x02	; 2
    cf1a:	65 e0       	ldi	r22, 0x05	; 5
    cf1c:	70 e0       	ldi	r23, 0x00	; 0
    cf1e:	86 e0       	ldi	r24, 0x06	; 6
    cf20:	90 e0       	ldi	r25, 0x00	; 0
    cf22:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(23, 5, (char*) strPlayer2);
    cf26:	49 e8       	ldi	r20, 0x89	; 137
    cf28:	52 e0       	ldi	r21, 0x02	; 2
    cf2a:	65 e0       	ldi	r22, 0x05	; 5
    cf2c:	70 e0       	ldi	r23, 0x00	; 0
    cf2e:	87 e1       	ldi	r24, 0x17	; 23
    cf30:	90 e0       	ldi	r25, 0x00	; 0
    cf32:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
    cf36:	8b e8       	ldi	r24, 0x8B	; 139
    cf38:	e8 2e       	mov	r14, r24
    cf3a:	8b e0       	ldi	r24, 0x0B	; 11
    cf3c:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    cf3e:	c0 e0       	ldi	r28, 0x00	; 0
    cf40:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    cf42:	93 e0       	ldi	r25, 0x03	; 3
    cf44:	a9 2e       	mov	r10, r25
    cf46:	b1 2c       	mov	r11, r1
    cf48:	67 01       	movw	r12, r14
    cf4a:	ce 01       	movw	r24, r28
    cf4c:	b5 01       	movw	r22, r10
    cf4e:	0e 94 0c 6e 	call	0xdc18	; 0xdc18 <__divmodhi4>
    cf52:	4c 01       	movw	r8, r24
    cf54:	8b 01       	movw	r16, r22
    cf56:	08 5f       	subi	r16, 0xF8	; 248
    cf58:	1f 4f       	sbci	r17, 0xFF	; 255
    cf5a:	f7 01       	movw	r30, r14
    cf5c:	41 91       	ld	r20, Z+
    cf5e:	7f 01       	movw	r14, r30
    cf60:	b8 01       	movw	r22, r16
    cf62:	03 96       	adiw	r24, 0x03	; 3
    cf64:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    cf68:	f6 01       	movw	r30, r12
    cf6a:	40 81       	ld	r20, Z
    cf6c:	b8 01       	movw	r22, r16
    cf6e:	c4 01       	movw	r24, r8
    cf70:	44 96       	adiw	r24, 0x14	; 20
    cf72:	0e 94 07 4e 	call	0x9c0e	; 0x9c0e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    cf76:	21 96       	adiw	r28, 0x01	; 1
    cf78:	cb 31       	cpi	r28, 0x1B	; 27
    cf7a:	d1 05       	cpc	r29, r1
    cf7c:	29 f7       	brne	.-54     	; 0xcf48 <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    cf7e:	48 ec       	ldi	r20, 0xC8	; 200
    cf80:	52 e0       	ldi	r21, 0x02	; 2
    cf82:	65 e1       	ldi	r22, 0x15	; 21
    cf84:	70 e0       	ldi	r23, 0x00	; 0
    cf86:	85 e0       	ldi	r24, 0x05	; 5
    cf88:	90 e0       	ldi	r25, 0x00	; 0
    cf8a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    cf8e:	4b ef       	ldi	r20, 0xFB	; 251
    cf90:	52 e0       	ldi	r21, 0x02	; 2
    cf92:	66 e1       	ldi	r22, 0x16	; 22
    cf94:	70 e0       	ldi	r23, 0x00	; 0
    cf96:	85 e0       	ldi	r24, 0x05	; 5
    cf98:	90 e0       	ldi	r25, 0x00	; 0
    cf9a:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    cf9e:	47 ed       	ldi	r20, 0xD7	; 215
    cfa0:	52 e0       	ldi	r21, 0x02	; 2
    cfa2:	67 e1       	ldi	r22, 0x17	; 23
    cfa4:	70 e0       	ldi	r23, 0x00	; 0
    cfa6:	85 e0       	ldi	r24, 0x05	; 5
    cfa8:	90 e0       	ldi	r25, 0x00	; 0
    cfaa:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    cfae:	4a e7       	ldi	r20, 0x7A	; 122
    cfb0:	52 e0       	ldi	r21, 0x02	; 2
    cfb2:	68 e1       	ldi	r22, 0x18	; 24
    cfb4:	70 e0       	ldi	r23, 0x00	; 0
    cfb6:	85 e0       	ldi	r24, 0x05	; 5
    cfb8:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    cfba:	df 91       	pop	r29
    cfbc:	cf 91       	pop	r28
    cfbe:	1f 91       	pop	r17
    cfc0:	0f 91       	pop	r16
    cfc2:	ff 90       	pop	r15
    cfc4:	ef 90       	pop	r14
    cfc6:	df 90       	pop	r13
    cfc8:	cf 90       	pop	r12
    cfca:	bf 90       	pop	r11
    cfcc:	af 90       	pop	r10
    cfce:	9f 90       	pop	r9
    cfd0:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    cfd2:	0c 94 ec 4d 	jmp	0x9bd8	; 0x9bd8 <Print>

0000cfd6 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    cfd6:	0f 93       	push	r16
    cfd8:	cf 93       	push	r28
    cfda:	df 93       	push	r29
    cfdc:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    cfde:	90 91 bc 0b 	lds	r25, 0x0BBC
    cfe2:	91 30       	cpi	r25, 0x01	; 1
    cfe4:	41 f0       	breq	.+16     	; 0xcff6 <update_splash+0x20>
    cfe6:	92 30       	cpi	r25, 0x02	; 2
    cfe8:	51 f0       	breq	.+20     	; 0xcffe <update_splash+0x28>
    cfea:	91 11       	cpse	r25, r1
    cfec:	0f c0       	rjmp	.+30     	; 0xd00c <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    cfee:	01 e0       	ldi	r16, 0x01	; 1
    cff0:	21 e0       	ldi	r18, 0x01	; 1
    cff2:	48 e6       	ldi	r20, 0x68	; 104
    cff4:	07 c0       	rjmp	.+14     	; 0xd004 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    cff6:	01 e0       	ldi	r16, 0x01	; 1
    cff8:	21 e0       	ldi	r18, 0x01	; 1
    cffa:	40 e7       	ldi	r20, 0x70	; 112
    cffc:	03 c0       	rjmp	.+6      	; 0xd004 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    cffe:	01 e0       	ldi	r16, 0x01	; 1
    d000:	21 e0       	ldi	r18, 0x01	; 1
    d002:	48 e7       	ldi	r20, 0x78	; 120
    d004:	60 e3       	ldi	r22, 0x30	; 48
    d006:	80 e0       	ldi	r24, 0x00	; 0
    d008:	0e 94 38 4d 	call	0x9a70	; 0x9a70 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    d00c:	48 ec       	ldi	r20, 0xC8	; 200
    d00e:	52 e0       	ldi	r21, 0x02	; 2
    d010:	65 e1       	ldi	r22, 0x15	; 21
    d012:	70 e0       	ldi	r23, 0x00	; 0
    d014:	86 e0       	ldi	r24, 0x06	; 6
    d016:	90 e0       	ldi	r25, 0x00	; 0
    d018:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    d01c:	28 81       	ld	r18, Y
    d01e:	39 81       	ldd	r19, Y+1	; 0x01
    d020:	21 15       	cp	r18, r1
    d022:	31 05       	cpc	r19, r1
    d024:	21 f0       	breq	.+8      	; 0xd02e <update_splash+0x58>
    d026:	10 92 b3 0b 	sts	0x0BB3, r1
    d02a:	10 92 b2 0b 	sts	0x0BB2, r1
	
	if (p1->pressed & BTN_UP)
    d02e:	24 ff       	sbrs	r18, 4
    d030:	08 c0       	rjmp	.+16     	; 0xd042 <update_splash+0x6c>
	{
		game.selection--;
    d032:	80 91 bc 0b 	lds	r24, 0x0BBC
    d036:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    d038:	87 ff       	sbrs	r24, 7
    d03a:	78 c0       	rjmp	.+240    	; 0xd12c <update_splash+0x156>
    d03c:	10 92 bc 0b 	sts	0x0BBC, r1
    d040:	77 c0       	rjmp	.+238    	; 0xd130 <update_splash+0x15a>
		SFX_NAVIGATE;
	}
	else if (p1->pressed & BTN_DOWN)
    d042:	25 ff       	sbrs	r18, 5
    d044:	08 c0       	rjmp	.+16     	; 0xd056 <update_splash+0x80>
	{
		game.selection++;
    d046:	80 91 bc 0b 	lds	r24, 0x0BBC
    d04a:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    d04c:	83 30       	cpi	r24, 0x03	; 3
    d04e:	0c f4       	brge	.+2      	; 0xd052 <update_splash+0x7c>
    d050:	6d c0       	rjmp	.+218    	; 0xd12c <update_splash+0x156>
    d052:	82 e0       	ldi	r24, 0x02	; 2
    d054:	6b c0       	rjmp	.+214    	; 0xd12c <update_splash+0x156>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d056:	ce 01       	movw	r24, r28
    d058:	0e 94 92 60 	call	0xc124	; 0xc124 <select_pressed>
    d05c:	88 23       	and	r24, r24
    d05e:	41 f1       	breq	.+80     	; 0xd0b0 <update_splash+0xda>
    d060:	80 91 bc 0b 	lds	r24, 0x0BBC
    d064:	82 30       	cpi	r24, 0x02	; 2
    d066:	98 f4       	brcc	.+38     	; 0xd08e <update_splash+0xb8>
	{
		game.demo_counter = 0;
    d068:	10 92 b3 0b 	sts	0x0BB3, r1
    d06c:	10 92 b2 0b 	sts	0x0BB2, r1
		p1s.select_state = SELECTING;
    d070:	10 92 67 0a 	sts	0x0A67, r1
		p2s.select_state = SELECTING;
    d074:	10 92 61 0a 	sts	0x0A61, r1
		SFX_NAVIGATE;
		fade_through();
    d078:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
		load_eeprom(&handles);
    d07c:	89 e8       	ldi	r24, 0x89	; 137
    d07e:	9b e0       	ldi	r25, 0x0B	; 11
    d080:	0e 94 37 52 	call	0xa46e	; 0xa46e <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d084:	df 91       	pop	r29
    d086:	cf 91       	pop	r28
    d088:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d08a:	0c 94 66 67 	jmp	0xcecc	; 0xcecc <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    d08e:	82 30       	cpi	r24, 0x02	; 2
    d090:	79 f4       	brne	.+30     	; 0xd0b0 <update_splash+0xda>
	{
		game.demo_counter = 0;
    d092:	10 92 b3 0b 	sts	0x0BB3, r1
    d096:	10 92 b2 0b 	sts	0x0BB2, r1
		SFX_NAVIGATE;
		fade_through();
    d09a:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
		load_eeprom(&scores);
    d09e:	82 e6       	ldi	r24, 0x62	; 98
    d0a0:	9b e0       	ldi	r25, 0x0B	; 11
    d0a2:	0e 94 37 52 	call	0xa46e	; 0xa46e <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d0a6:	df 91       	pop	r29
    d0a8:	cf 91       	pop	r28
    d0aa:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d0ac:	0c 94 9c 60 	jmp	0xc138	; 0xc138 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    d0b0:	80 91 b2 0b 	lds	r24, 0x0BB2
    d0b4:	90 91 b3 0b 	lds	r25, 0x0BB3
    d0b8:	88 35       	cpi	r24, 0x58	; 88
    d0ba:	92 40       	sbci	r25, 0x02	; 2
    d0bc:	c8 f1       	brcs	.+114    	; 0xd130 <update_splash+0x15a>
	{
		game.demo_counter = 0;
    d0be:	10 92 b3 0b 	sts	0x0BB3, r1
    d0c2:	10 92 b2 0b 	sts	0x0BB2, r1
		if (game.demo_choice % 2 == 0)
    d0c6:	80 91 b1 0b 	lds	r24, 0x0BB1
    d0ca:	80 fd       	sbrc	r24, 0
    d0cc:	21 c0       	rjmp	.+66     	; 0xd110 <update_splash+0x13a>
		{
			game.selection = CPUVCPU;
    d0ce:	83 e0       	ldi	r24, 0x03	; 3
    d0d0:	80 93 bc 0b 	sts	0x0BBC, r24
			player1.handle_id = 9;
    d0d4:	c9 e0       	ldi	r28, 0x09	; 9
    d0d6:	c0 93 e5 0b 	sts	0x0BE5, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d0da:	43 e0       	ldi	r20, 0x03	; 3
    d0dc:	66 ea       	ldi	r22, 0xA6	; 166
    d0de:	7b e0       	ldi	r23, 0x0B	; 11
    d0e0:	86 ee       	ldi	r24, 0xE6	; 230
    d0e2:	9b e0       	ldi	r25, 0x0B	; 11
    d0e4:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
			player2.handle_id = 9;
    d0e8:	c0 93 54 0f 	sts	0x0F54, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d0ec:	43 e0       	ldi	r20, 0x03	; 3
    d0ee:	66 ea       	ldi	r22, 0xA6	; 166
    d0f0:	7b e0       	ldi	r23, 0x0B	; 11
    d0f2:	85 e5       	ldi	r24, 0x55	; 85
    d0f4:	9f e0       	ldi	r25, 0x0F	; 15
    d0f6:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
			SFX_NAVIGATE;
			clear_sprites();
    d0fa:	0e 94 53 52 	call	0xa4a6	; 0xa4a6 <clear_sprites>
			fade_through();
    d0fe:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
			level_transition(LBRandom(0, 10));
    d102:	6a e0       	ldi	r22, 0x0A	; 10
    d104:	80 e0       	ldi	r24, 0x00	; 0
    d106:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    d10a:	0e 94 84 5e 	call	0xbd08	; 0xbd08 <level_transition>
    d10e:	08 c0       	rjmp	.+16     	; 0xd120 <update_splash+0x14a>
		}
		else
		{
			SFX_NAVIGATE;
			fade_through();
    d110:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
			load_eeprom(&scores);
    d114:	82 e6       	ldi	r24, 0x62	; 98
    d116:	9b e0       	ldi	r25, 0x0B	; 11
    d118:	0e 94 37 52 	call	0xa46e	; 0xa46e <load_eeprom>
			load_tank_rank();
    d11c:	0e 94 9c 60 	call	0xc138	; 0xc138 <load_tank_rank>
		}
		game.demo_choice++;
    d120:	80 91 b1 0b 	lds	r24, 0x0BB1
    d124:	8f 5f       	subi	r24, 0xFF	; 255
    d126:	80 93 b1 0b 	sts	0x0BB1, r24
		return;
    d12a:	0b c0       	rjmp	.+22     	; 0xd142 <update_splash+0x16c>
	// Update
	if (p1->pressed) game.demo_counter = 0;
	
	if (p1->pressed & BTN_UP)
	{
		game.selection--;
    d12c:	80 93 bc 0b 	sts	0x0BBC, r24
		}
		game.demo_choice++;
		return;
		
	}
	game.demo_counter++;
    d130:	80 91 b2 0b 	lds	r24, 0x0BB2
    d134:	90 91 b3 0b 	lds	r25, 0x0BB3
    d138:	01 96       	adiw	r24, 0x01	; 1
    d13a:	90 93 b3 0b 	sts	0x0BB3, r25
    d13e:	80 93 b2 0b 	sts	0x0BB2, r24
#endif
}
    d142:	df 91       	pop	r29
    d144:	cf 91       	pop	r28
    d146:	0f 91       	pop	r16
    d148:	08 95       	ret

0000d14a <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d14a:	0f 93       	push	r16
    d14c:	1f 93       	push	r17
    d14e:	cf 93       	push	r28
    d150:	df 93       	push	r29
    d152:	8c 01       	movw	r16, r24
    d154:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d156:	26 e0       	ldi	r18, 0x06	; 6
    d158:	42 e0       	ldi	r20, 0x02	; 2
    d15a:	bc 01       	movw	r22, r24
    d15c:	82 e6       	ldi	r24, 0x62	; 98
    d15e:	9a e0       	ldi	r25, 0x0A	; 10
    d160:	0e 94 a8 66 	call	0xcd50	; 0xcd50 <_handle_select_render_helper>
	if (game.selection == PVP)
    d164:	80 91 bc 0b 	lds	r24, 0x0BBC
    d168:	81 30       	cpi	r24, 0x01	; 1
    d16a:	39 f4       	brne	.+14     	; 0xd17a <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d16c:	28 e0       	ldi	r18, 0x08	; 8
    d16e:	43 e1       	ldi	r20, 0x13	; 19
    d170:	be 01       	movw	r22, r28
    d172:	8c e5       	ldi	r24, 0x5C	; 92
    d174:	9a e0       	ldi	r25, 0x0A	; 10
    d176:	0e 94 a8 66 	call	0xcd50	; 0xcd50 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d17a:	4a ed       	ldi	r20, 0xDA	; 218
    d17c:	5b e0       	ldi	r21, 0x0B	; 11
    d17e:	b8 01       	movw	r22, r16
    d180:	82 e6       	ldi	r24, 0x62	; 98
    d182:	9a e0       	ldi	r25, 0x0A	; 10
    d184:	0e 94 dd 65 	call	0xcbba	; 0xcbba <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d188:	10 91 67 0a 	lds	r17, 0x0A67
	if (game.selection == PVP)
    d18c:	80 91 bc 0b 	lds	r24, 0x0BBC
    d190:	81 30       	cpi	r24, 0x01	; 1
    d192:	19 f0       	breq	.+6      	; 0xd19a <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d194:	12 30       	cpi	r17, 0x02	; 2
    d196:	69 f0       	breq	.+26     	; 0xd1b2 <update_handle_select+0x68>
    d198:	21 c0       	rjmp	.+66     	; 0xd1dc <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d19a:	49 e4       	ldi	r20, 0x49	; 73
    d19c:	5f e0       	ldi	r21, 0x0F	; 15
    d19e:	be 01       	movw	r22, r28
    d1a0:	8c e5       	ldi	r24, 0x5C	; 92
    d1a2:	9a e0       	ldi	r25, 0x0A	; 10
    d1a4:	0e 94 dd 65 	call	0xcbba	; 0xcbba <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d1a8:	80 91 61 0a 	lds	r24, 0x0A61
    d1ac:	82 30       	cpi	r24, 0x02	; 2
    d1ae:	b1 f4       	brne	.+44     	; 0xd1dc <update_handle_select+0x92>
    d1b0:	f1 cf       	rjmp	.-30     	; 0xd194 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d1b2:	80 91 bc 0b 	lds	r24, 0x0BBC
    d1b6:	81 11       	cpse	r24, r1
    d1b8:	0a c0       	rjmp	.+20     	; 0xd1ce <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d1ba:	89 e0       	ldi	r24, 0x09	; 9
    d1bc:	80 93 54 0f 	sts	0x0F54, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d1c0:	43 e0       	ldi	r20, 0x03	; 3
    d1c2:	66 ea       	ldi	r22, 0xA6	; 166
    d1c4:	7b e0       	ldi	r23, 0x0B	; 11
    d1c6:	85 e5       	ldi	r24, 0x55	; 85
    d1c8:	9f e0       	ldi	r25, 0x0F	; 15
    d1ca:	0e 94 0a 4f 	call	0x9e14	; 0x9e14 <LBCopyChars>
		}
		level_transition(0);
    d1ce:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    d1d0:	df 91       	pop	r29
    d1d2:	cf 91       	pop	r28
    d1d4:	1f 91       	pop	r17
    d1d6:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    d1d8:	0c 94 84 5e 	jmp	0xbd08	; 0xbd08 <level_transition>
	}
}
    d1dc:	df 91       	pop	r29
    d1de:	cf 91       	pop	r28
    d1e0:	1f 91       	pop	r17
    d1e2:	0f 91       	pop	r16
    d1e4:	08 95       	ret

0000d1e6 <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d1e6:	00 97       	sbiw	r24, 0x00	; 0
    d1e8:	41 f0       	breq	.+16     	; 0xd1fa <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d1ea:	81 30       	cpi	r24, 0x01	; 1
    d1ec:	91 05       	cpc	r25, r1
    d1ee:	41 f0       	breq	.+16     	; 0xd200 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d1f0:	82 30       	cpi	r24, 0x02	; 2
    d1f2:	91 05       	cpc	r25, r1
    d1f4:	41 f0       	breq	.+16     	; 0xd206 <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d1f6:	03 97       	sbiw	r24, 0x03	; 3
    d1f8:	49 f0       	breq	.+18     	; 0xd20c <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d1fa:	80 e1       	ldi	r24, 0x10	; 16
    d1fc:	90 e0       	ldi	r25, 0x00	; 0
    d1fe:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d200:	80 e2       	ldi	r24, 0x20	; 32
    d202:	90 e0       	ldi	r25, 0x00	; 0
    d204:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d206:	80 e4       	ldi	r24, 0x40	; 64
    d208:	90 e0       	ldi	r25, 0x00	; 0
    d20a:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d20c:	80 e8       	ldi	r24, 0x80	; 128
    d20e:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d210:	08 95       	ret

0000d212 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d212:	8f 92       	push	r8
    d214:	9f 92       	push	r9
    d216:	af 92       	push	r10
    d218:	bf 92       	push	r11
    d21a:	cf 92       	push	r12
    d21c:	df 92       	push	r13
    d21e:	ef 92       	push	r14
    d220:	ff 92       	push	r15
    d222:	0f 93       	push	r16
    d224:	1f 93       	push	r17
    d226:	cf 93       	push	r28
    d228:	df 93       	push	r29
    d22a:	f8 2e       	mov	r15, r24
    d22c:	e6 2e       	mov	r14, r22
    d22e:	d4 2e       	mov	r13, r20
    d230:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d232:	8a 8d       	ldd	r24, Y+26	; 0x1a
    d234:	88 23       	and	r24, r24
    d236:	09 f4       	brne	.+2      	; 0xd23a <crash_and_turn+0x28>
    d238:	a8 c0       	rjmp	.+336    	; 0xd38a <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d23a:	f8 01       	movw	r30, r16
    d23c:	c4 80       	ldd	r12, Z+4	; 0x04
    d23e:	c4 fe       	sbrs	r12, 4
    d240:	23 c0       	rjmp	.+70     	; 0xd288 <crash_and_turn+0x76>
    d242:	fe e1       	ldi	r31, 0x1E	; 30
    d244:	6f 02       	muls	r22, r31
    d246:	40 01       	movw	r8, r0
    d248:	11 24       	eor	r1, r1
    d24a:	af 2c       	mov	r10, r15
    d24c:	bb 24       	eor	r11, r11
    d24e:	a7 fc       	sbrc	r10, 7
    d250:	b0 94       	com	r11
    d252:	c4 01       	movw	r24, r8
    d254:	8a 0d       	add	r24, r10
    d256:	9b 1d       	adc	r25, r11
    d258:	01 97       	sbiw	r24, 0x01	; 1
    d25a:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d25e:	81 11       	cpse	r24, r1
    d260:	13 c0       	rjmp	.+38     	; 0xd288 <crash_and_turn+0x76>
    d262:	c4 01       	movw	r24, r8
    d264:	8a 0d       	add	r24, r10
    d266:	9b 1d       	adc	r25, r11
    d268:	4d 96       	adiw	r24, 0x1d	; 29
    d26a:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d26e:	81 11       	cpse	r24, r1
    d270:	0b c0       	rjmp	.+22     	; 0xd288 <crash_and_turn+0x76>
    d272:	c4 01       	movw	r24, r8
    d274:	8a 0d       	add	r24, r10
    d276:	9b 1d       	adc	r25, r11
    d278:	cb 96       	adiw	r24, 0x3b	; 59
    d27a:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d27e:	81 11       	cpse	r24, r1
    d280:	03 c0       	rjmp	.+6      	; 0xd288 <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    d282:	80 e4       	ldi	r24, 0x40	; 64
    d284:	90 e0       	ldi	r25, 0x00	; 0
    d286:	6f c0       	rjmp	.+222    	; 0xd366 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    d288:	c6 fe       	sbrs	r12, 6
    d28a:	23 c0       	rjmp	.+70     	; 0xd2d2 <crash_and_turn+0xc0>
    d28c:	8e 2d       	mov	r24, r14
    d28e:	99 27       	eor	r25, r25
    d290:	87 fd       	sbrc	r24, 7
    d292:	90 95       	com	r25
    d294:	02 96       	adiw	r24, 0x02	; 2
    d296:	2e e1       	ldi	r18, 0x1E	; 30
    d298:	28 9f       	mul	r18, r24
    d29a:	50 01       	movw	r10, r0
    d29c:	29 9f       	mul	r18, r25
    d29e:	b0 0c       	add	r11, r0
    d2a0:	11 24       	eor	r1, r1
    d2a2:	af 0c       	add	r10, r15
    d2a4:	b1 1c       	adc	r11, r1
    d2a6:	f7 fc       	sbrc	r15, 7
    d2a8:	ba 94       	dec	r11
    d2aa:	c5 01       	movw	r24, r10
    d2ac:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d2b0:	81 11       	cpse	r24, r1
    d2b2:	0f c0       	rjmp	.+30     	; 0xd2d2 <crash_and_turn+0xc0>
    d2b4:	c5 01       	movw	r24, r10
    d2b6:	01 96       	adiw	r24, 0x01	; 1
    d2b8:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d2bc:	81 11       	cpse	r24, r1
    d2be:	09 c0       	rjmp	.+18     	; 0xd2d2 <crash_and_turn+0xc0>
    d2c0:	c5 01       	movw	r24, r10
    d2c2:	02 96       	adiw	r24, 0x02	; 2
    d2c4:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d2c8:	81 11       	cpse	r24, r1
    d2ca:	03 c0       	rjmp	.+6      	; 0xd2d2 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    d2cc:	80 e2       	ldi	r24, 0x20	; 32
    d2ce:	90 e0       	ldi	r25, 0x00	; 0
    d2d0:	4a c0       	rjmp	.+148    	; 0xd366 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    d2d2:	c5 fe       	sbrs	r12, 5
    d2d4:	24 c0       	rjmp	.+72     	; 0xd31e <crash_and_turn+0x10c>
    d2d6:	fe 2d       	mov	r31, r14
    d2d8:	8e e1       	ldi	r24, 0x1E	; 30
    d2da:	f8 02       	muls	r31, r24
    d2dc:	40 01       	movw	r8, r0
    d2de:	11 24       	eor	r1, r1
    d2e0:	af 2c       	mov	r10, r15
    d2e2:	bb 24       	eor	r11, r11
    d2e4:	a7 fc       	sbrc	r10, 7
    d2e6:	b0 94       	com	r11
    d2e8:	c4 01       	movw	r24, r8
    d2ea:	8a 0d       	add	r24, r10
    d2ec:	9b 1d       	adc	r25, r11
    d2ee:	02 96       	adiw	r24, 0x02	; 2
    d2f0:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d2f4:	81 11       	cpse	r24, r1
    d2f6:	13 c0       	rjmp	.+38     	; 0xd31e <crash_and_turn+0x10c>
    d2f8:	c4 01       	movw	r24, r8
    d2fa:	8a 0d       	add	r24, r10
    d2fc:	9b 1d       	adc	r25, r11
    d2fe:	80 96       	adiw	r24, 0x20	; 32
    d300:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d304:	81 11       	cpse	r24, r1
    d306:	0b c0       	rjmp	.+22     	; 0xd31e <crash_and_turn+0x10c>
    d308:	c4 01       	movw	r24, r8
    d30a:	8a 0d       	add	r24, r10
    d30c:	9b 1d       	adc	r25, r11
    d30e:	ce 96       	adiw	r24, 0x3e	; 62
    d310:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d314:	81 11       	cpse	r24, r1
    d316:	03 c0       	rjmp	.+6      	; 0xd31e <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    d318:	80 e8       	ldi	r24, 0x80	; 128
    d31a:	90 e0       	ldi	r25, 0x00	; 0
    d31c:	24 c0       	rjmp	.+72     	; 0xd366 <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    d31e:	c7 fe       	sbrs	r12, 7
    d320:	29 c0       	rjmp	.+82     	; 0xd374 <crash_and_turn+0x162>
    d322:	8e 2d       	mov	r24, r14
    d324:	99 27       	eor	r25, r25
    d326:	87 fd       	sbrc	r24, 7
    d328:	90 95       	com	r25
    d32a:	01 97       	sbiw	r24, 0x01	; 1
    d32c:	2e e1       	ldi	r18, 0x1E	; 30
    d32e:	28 9f       	mul	r18, r24
    d330:	50 01       	movw	r10, r0
    d332:	29 9f       	mul	r18, r25
    d334:	b0 0c       	add	r11, r0
    d336:	11 24       	eor	r1, r1
    d338:	af 0c       	add	r10, r15
    d33a:	b1 1c       	adc	r11, r1
    d33c:	f7 fc       	sbrc	r15, 7
    d33e:	ba 94       	dec	r11
    d340:	c5 01       	movw	r24, r10
    d342:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d346:	81 11       	cpse	r24, r1
    d348:	15 c0       	rjmp	.+42     	; 0xd374 <crash_and_turn+0x162>
    d34a:	c5 01       	movw	r24, r10
    d34c:	01 96       	adiw	r24, 0x01	; 1
    d34e:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d352:	81 11       	cpse	r24, r1
    d354:	0f c0       	rjmp	.+30     	; 0xd374 <crash_and_turn+0x162>
    d356:	c5 01       	movw	r24, r10
    d358:	02 96       	adiw	r24, 0x02	; 2
    d35a:	0e 94 2e 56 	call	0xac5c	; 0xac5c <solid_tile>
    d35e:	81 11       	cpse	r24, r1
    d360:	09 c0       	rjmp	.+18     	; 0xd374 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    d362:	80 e1       	ldi	r24, 0x10	; 16
    d364:	90 e0       	ldi	r25, 0x00	; 0
    d366:	f8 01       	movw	r30, r16
    d368:	95 83       	std	Z+5, r25	; 0x05
    d36a:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    d36c:	ce 01       	movw	r24, r28
    d36e:	0e 94 76 55 	call	0xaaec	; 0xaaec <recoil_sprite>
			recoiled = 0;
    d372:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    d374:	f8 01       	movw	r30, r16
    d376:	24 81       	ldd	r18, Z+4	; 0x04
    d378:	35 81       	ldd	r19, Z+5	; 0x05
    d37a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d37c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d37e:	82 23       	and	r24, r18
    d380:	93 23       	and	r25, r19
    d382:	89 2b       	or	r24, r25
    d384:	11 f0       	breq	.+4      	; 0xd38a <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    d386:	1a 8e       	std	Y+26, r1	; 0x1a
    d388:	1c c0       	rjmp	.+56     	; 0xd3c2 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    d38a:	dd 20       	and	r13, r13
    d38c:	d1 f0       	breq	.+52     	; 0xd3c2 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    d38e:	f8 01       	movw	r30, r16
    d390:	84 81       	ldd	r24, Z+4	; 0x04
    d392:	86 ff       	sbrs	r24, 6
    d394:	03 c0       	rjmp	.+6      	; 0xd39c <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    d396:	80 e1       	ldi	r24, 0x10	; 16
    d398:	90 e0       	ldi	r25, 0x00	; 0
    d39a:	0f c0       	rjmp	.+30     	; 0xd3ba <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    d39c:	84 ff       	sbrs	r24, 4
    d39e:	03 c0       	rjmp	.+6      	; 0xd3a6 <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    d3a0:	80 e8       	ldi	r24, 0x80	; 128
    d3a2:	90 e0       	ldi	r25, 0x00	; 0
    d3a4:	09 c0       	rjmp	.+18     	; 0xd3b8 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    d3a6:	87 ff       	sbrs	r24, 7
    d3a8:	03 c0       	rjmp	.+6      	; 0xd3b0 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    d3aa:	80 e2       	ldi	r24, 0x20	; 32
    d3ac:	90 e0       	ldi	r25, 0x00	; 0
    d3ae:	04 c0       	rjmp	.+8      	; 0xd3b8 <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    d3b0:	85 ff       	sbrs	r24, 5
    d3b2:	07 c0       	rjmp	.+14     	; 0xd3c2 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    d3b4:	80 e4       	ldi	r24, 0x40	; 64
    d3b6:	90 e0       	ldi	r25, 0x00	; 0
    d3b8:	f8 01       	movw	r30, r16
    d3ba:	95 83       	std	Z+5, r25	; 0x05
    d3bc:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    d3be:	81 e0       	ldi	r24, 0x01	; 1
    d3c0:	8a 8f       	std	Y+26, r24	; 0x1a
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d3c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    d3c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    d3c6:	80 31       	cpi	r24, 0x10	; 16
    d3c8:	91 05       	cpc	r25, r1
    d3ca:	19 f0       	breq	.+6      	; 0xd3d2 <crash_and_turn+0x1c0>
    d3cc:	80 32       	cpi	r24, 0x20	; 32
    d3ce:	91 05       	cpc	r25, r1
    d3d0:	19 f4       	brne	.+6      	; 0xd3d8 <crash_and_turn+0x1c6>
    d3d2:	2b a1       	ldd	r18, Y+35	; 0x23
    d3d4:	e2 16       	cp	r14, r18
    d3d6:	59 f0       	breq	.+22     	; 0xd3ee <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    d3d8:	80 34       	cpi	r24, 0x40	; 64
    d3da:	91 05       	cpc	r25, r1
    d3dc:	19 f0       	breq	.+6      	; 0xd3e4 <crash_and_turn+0x1d2>
    d3de:	80 38       	cpi	r24, 0x80	; 128
    d3e0:	91 05       	cpc	r25, r1
    d3e2:	39 f4       	brne	.+14     	; 0xd3f2 <crash_and_turn+0x1e0>
    d3e4:	81 e0       	ldi	r24, 0x01	; 1
    d3e6:	9b a1       	ldd	r25, Y+35	; 0x23
    d3e8:	f9 12       	cpse	r15, r25
    d3ea:	03 c0       	rjmp	.+6      	; 0xd3f2 <crash_and_turn+0x1e0>
    d3ec:	03 c0       	rjmp	.+6      	; 0xd3f4 <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d3ee:	81 e0       	ldi	r24, 0x01	; 1
    d3f0:	01 c0       	rjmp	.+2      	; 0xd3f4 <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    d3f2:	80 e0       	ldi	r24, 0x00	; 0
}
    d3f4:	df 91       	pop	r29
    d3f6:	cf 91       	pop	r28
    d3f8:	1f 91       	pop	r17
    d3fa:	0f 91       	pop	r16
    d3fc:	ff 90       	pop	r15
    d3fe:	ef 90       	pop	r14
    d400:	df 90       	pop	r13
    d402:	cf 90       	pop	r12
    d404:	bf 90       	pop	r11
    d406:	af 90       	pop	r10
    d408:	9f 90       	pop	r9
    d40a:	8f 90       	pop	r8
    d40c:	08 95       	ret

0000d40e <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    d40e:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    d410:	26 2f       	mov	r18, r22
    d412:	33 27       	eor	r19, r19
    d414:	27 fd       	sbrc	r18, 7
    d416:	30 95       	com	r19
    d418:	37 ff       	sbrs	r19, 7
    d41a:	03 c0       	rjmp	.+6      	; 0xd422 <get_cpu_goal_direction+0x14>
    d41c:	31 95       	neg	r19
    d41e:	21 95       	neg	r18
    d420:	31 09       	sbc	r19, r1
    d422:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    d424:	24 2f       	mov	r18, r20
    d426:	33 27       	eor	r19, r19
    d428:	27 fd       	sbrc	r18, 7
    d42a:	30 95       	com	r19
    d42c:	37 ff       	sbrs	r19, 7
    d42e:	03 c0       	rjmp	.+6      	; 0xd436 <get_cpu_goal_direction+0x28>
    d430:	31 95       	neg	r19
    d432:	21 95       	neg	r18
    d434:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    d436:	83 8d       	ldd	r24, Z+27	; 0x1b
    d438:	81 11       	cpse	r24, r1
    d43a:	08 c0       	rjmp	.+16     	; 0xd44c <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    d43c:	29 17       	cp	r18, r25
    d43e:	1c f4       	brge	.+6      	; 0xd446 <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    d440:	16 16       	cp	r1, r22
    d442:	94 f0       	brlt	.+36     	; 0xd468 <get_cpu_goal_direction+0x5a>
    d444:	0b c0       	rjmp	.+22     	; 0xd45c <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    d446:	14 16       	cp	r1, r20
    d448:	94 f0       	brlt	.+36     	; 0xd46e <get_cpu_goal_direction+0x60>
    d44a:	0b c0       	rjmp	.+22     	; 0xd462 <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    d44c:	29 17       	cp	r18, r25
    d44e:	1c f4       	brge	.+6      	; 0xd456 <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    d450:	16 16       	cp	r1, r22
    d452:	24 f0       	brlt	.+8      	; 0xd45c <get_cpu_goal_direction+0x4e>
    d454:	09 c0       	rjmp	.+18     	; 0xd468 <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    d456:	14 16       	cp	r1, r20
    d458:	24 f0       	brlt	.+8      	; 0xd462 <get_cpu_goal_direction+0x54>
    d45a:	09 c0       	rjmp	.+18     	; 0xd46e <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    d45c:	80 e4       	ldi	r24, 0x40	; 64
    d45e:	90 e0       	ldi	r25, 0x00	; 0
    d460:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    d462:	80 e1       	ldi	r24, 0x10	; 16
    d464:	90 e0       	ldi	r25, 0x00	; 0
    d466:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    d468:	80 e8       	ldi	r24, 0x80	; 128
    d46a:	90 e0       	ldi	r25, 0x00	; 0
    d46c:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    d46e:	80 e2       	ldi	r24, 0x20	; 32
    d470:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    d472:	08 95       	ret

0000d474 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    d474:	2f 92       	push	r2
    d476:	3f 92       	push	r3
    d478:	4f 92       	push	r4
    d47a:	5f 92       	push	r5
    d47c:	7f 92       	push	r7
    d47e:	8f 92       	push	r8
    d480:	9f 92       	push	r9
    d482:	af 92       	push	r10
    d484:	bf 92       	push	r11
    d486:	cf 92       	push	r12
    d488:	df 92       	push	r13
    d48a:	ef 92       	push	r14
    d48c:	ff 92       	push	r15
    d48e:	0f 93       	push	r16
    d490:	1f 93       	push	r17
    d492:	cf 93       	push	r28
    d494:	df 93       	push	r29
    d496:	cd b7       	in	r28, 0x3d	; 61
    d498:	de b7       	in	r29, 0x3e	; 62
    d49a:	2a 97       	sbiw	r28, 0x0a	; 10
    d49c:	0f b6       	in	r0, 0x3f	; 63
    d49e:	f8 94       	cli
    d4a0:	de bf       	out	0x3e, r29	; 62
    d4a2:	0f be       	out	0x3f, r0	; 63
    d4a4:	cd bf       	out	0x3d, r28	; 61
    d4a6:	9c 01       	movw	r18, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d4a8:	db 01       	movw	r26, r22
    d4aa:	13 96       	adiw	r26, 0x03	; 3
    d4ac:	8d 91       	ld	r24, X+
    d4ae:	9d 91       	ld	r25, X+
    d4b0:	0d 90       	ld	r0, X+
    d4b2:	bc 91       	ld	r27, X
    d4b4:	a0 2d       	mov	r26, r0
    d4b6:	89 83       	std	Y+1, r24	; 0x01
    d4b8:	9a 83       	std	Y+2, r25	; 0x02
    d4ba:	ab 83       	std	Y+3, r26	; 0x03
    d4bc:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    d4be:	fb 01       	movw	r30, r22
    d4c0:	87 80       	ldd	r8, Z+7	; 0x07
    d4c2:	90 84       	ldd	r9, Z+8	; 0x08
    d4c4:	a1 84       	ldd	r10, Z+9	; 0x09
    d4c6:	b2 84       	ldd	r11, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    d4c8:	d9 01       	movw	r26, r18
    d4ca:	13 96       	adiw	r26, 0x03	; 3
    d4cc:	cd 90       	ld	r12, X+
    d4ce:	dd 90       	ld	r13, X+
    d4d0:	ed 90       	ld	r14, X+
    d4d2:	fc 90       	ld	r15, X
    d4d4:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    d4d6:	17 96       	adiw	r26, 0x07	; 7
    d4d8:	8d 91       	ld	r24, X+
    d4da:	9d 91       	ld	r25, X+
    d4dc:	0d 90       	ld	r0, X+
    d4de:	bc 91       	ld	r27, X
    d4e0:	a0 2d       	mov	r26, r0
    d4e2:	8d 83       	std	Y+5, r24	; 0x05
    d4e4:	9e 83       	std	Y+6, r25	; 0x06
    d4e6:	af 83       	std	Y+7, r26	; 0x07
    d4e8:	b8 87       	std	Y+8, r27	; 0x08
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    d4ea:	f9 01       	movw	r30, r18
    d4ec:	86 89       	ldd	r24, Z+22	; 0x16
    d4ee:	81 11       	cpse	r24, r1
    d4f0:	06 c0       	rjmp	.+12     	; 0xd4fe <get_cpu_joypad_state+0x8a>
	{
		p->held = 0;
    d4f2:	da 01       	movw	r26, r20
    d4f4:	15 96       	adiw	r26, 0x05	; 5
    d4f6:	1c 92       	st	X, r1
    d4f8:	1e 92       	st	-X, r1
    d4fa:	14 97       	sbiw	r26, 0x04	; 4
		return;
    d4fc:	57 c2       	rjmp	.+1198   	; 0xd9ac <get_cpu_joypad_state+0x538>
    d4fe:	2a 01       	movw	r4, r20
    d500:	1b 01       	movw	r2, r22
    d502:	3a 87       	std	Y+10, r19	; 0x0a
    d504:	29 87       	std	Y+9, r18	; 0x09
	}
	
	// Shot
	if (shoot_pressed(p))
    d506:	ca 01       	movw	r24, r20
    d508:	0e 94 d9 53 	call	0xa7b2	; 0xa7b2 <shoot_pressed>
    d50c:	88 23       	and	r24, r24
    d50e:	19 f0       	breq	.+6      	; 0xd516 <get_cpu_joypad_state+0xa2>
	{
		p->pressed = 0;
    d510:	f2 01       	movw	r30, r4
    d512:	11 82       	std	Z+1, r1	; 0x01
    d514:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    d516:	20 91 01 01 	lds	r18, 0x0101
    d51a:	30 91 02 01 	lds	r19, 0x0102
    d51e:	c9 01       	movw	r24, r18
    d520:	6a e0       	ldi	r22, 0x0A	; 10
    d522:	70 e0       	ldi	r23, 0x00	; 0
    d524:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <__udivmodhi4>
    d528:	89 2b       	or	r24, r25
    d52a:	59 f4       	brne	.+22     	; 0xd542 <get_cpu_joypad_state+0xce>
    d52c:	a9 85       	ldd	r26, Y+9	; 0x09
    d52e:	ba 85       	ldd	r27, Y+10	; 0x0a
    d530:	56 96       	adiw	r26, 0x16	; 22
    d532:	8c 91       	ld	r24, X
    d534:	83 33       	cpi	r24, 0x33	; 51
    d536:	28 f0       	brcs	.+10     	; 0xd542 <get_cpu_joypad_state+0xce>
	{
		p->pressed = BTN_B;
    d538:	81 e0       	ldi	r24, 0x01	; 1
    d53a:	90 e0       	ldi	r25, 0x00	; 0
    d53c:	f2 01       	movw	r30, r4
    d53e:	91 83       	std	Z+1, r25	; 0x01
    d540:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    d542:	c9 01       	movw	r24, r18
    d544:	64 eb       	ldi	r22, 0xB4	; 180
    d546:	70 e0       	ldi	r23, 0x00	; 0
    d548:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <__udivmodhi4>
    d54c:	89 2b       	or	r24, r25
    d54e:	61 f0       	breq	.+24     	; 0xd568 <get_cpu_joypad_state+0xf4>
    d550:	a9 85       	ldd	r26, Y+9	; 0x09
    d552:	ba 85       	ldd	r27, Y+10	; 0x0a
    d554:	56 96       	adiw	r26, 0x16	; 22
    d556:	8c 91       	ld	r24, X
    d558:	56 97       	sbiw	r26, 0x16	; 22
    d55a:	8a 30       	cpi	r24, 0x0A	; 10
    d55c:	29 f0       	breq	.+10     	; 0xd568 <get_cpu_joypad_state+0xf4>
    d55e:	94 96       	adiw	r26, 0x24	; 36
    d560:	8c 91       	ld	r24, X
    d562:	88 23       	and	r24, r24
    d564:	09 f4       	brne	.+2      	; 0xd568 <get_cpu_joypad_state+0xf4>
    d566:	7e c0       	rjmp	.+252    	; 0xd664 <get_cpu_joypad_state+0x1f0>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    d568:	20 e0       	ldi	r18, 0x00	; 0
    d56a:	30 e0       	ldi	r19, 0x00	; 0
    d56c:	40 e0       	ldi	r20, 0x00	; 0
    d56e:	5e e3       	ldi	r21, 0x3E	; 62
    d570:	69 81       	ldd	r22, Y+1	; 0x01
    d572:	7a 81       	ldd	r23, Y+2	; 0x02
    d574:	8b 81       	ldd	r24, Y+3	; 0x03
    d576:	9c 81       	ldd	r25, Y+4	; 0x04
    d578:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d57c:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
    d580:	76 2e       	mov	r7, r22
	goal_y = other_player->shared.y / 8 - 3;
    d582:	20 e0       	ldi	r18, 0x00	; 0
    d584:	30 e0       	ldi	r19, 0x00	; 0
    d586:	40 e0       	ldi	r20, 0x00	; 0
    d588:	5e e3       	ldi	r21, 0x3E	; 62
    d58a:	c5 01       	movw	r24, r10
    d58c:	b4 01       	movw	r22, r8
    d58e:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d592:	20 e0       	ldi	r18, 0x00	; 0
    d594:	30 e0       	ldi	r19, 0x00	; 0
    d596:	40 e4       	ldi	r20, 0x40	; 64
    d598:	50 e4       	ldi	r21, 0x40	; 64
    d59a:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    d59e:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
    d5a2:	b6 2e       	mov	r11, r22
	player_x = player->shared.x / 8;
    d5a4:	20 e0       	ldi	r18, 0x00	; 0
    d5a6:	30 e0       	ldi	r19, 0x00	; 0
    d5a8:	40 e0       	ldi	r20, 0x00	; 0
    d5aa:	5e e3       	ldi	r21, 0x3E	; 62
    d5ac:	c7 01       	movw	r24, r14
    d5ae:	b6 01       	movw	r22, r12
    d5b0:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d5b4:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    d5b8:	f7 2c       	mov	r15, r7
    d5ba:	f6 1a       	sub	r15, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    d5bc:	20 e0       	ldi	r18, 0x00	; 0
    d5be:	30 e0       	ldi	r19, 0x00	; 0
    d5c0:	40 e0       	ldi	r20, 0x00	; 0
    d5c2:	5e e3       	ldi	r21, 0x3E	; 62
    d5c4:	6d 81       	ldd	r22, Y+5	; 0x05
    d5c6:	7e 81       	ldd	r23, Y+6	; 0x06
    d5c8:	8f 81       	ldd	r24, Y+7	; 0x07
    d5ca:	98 85       	ldd	r25, Y+8	; 0x08
    d5cc:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d5d0:	20 e0       	ldi	r18, 0x00	; 0
    d5d2:	30 e0       	ldi	r19, 0x00	; 0
    d5d4:	40 e4       	ldi	r20, 0x40	; 64
    d5d6:	50 e4       	ldi	r21, 0x40	; 64
    d5d8:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    d5dc:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    d5e0:	4b 2d       	mov	r20, r11
    d5e2:	46 1b       	sub	r20, r22
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    d5e4:	e9 85       	ldd	r30, Y+9	; 0x09
    d5e6:	fa 85       	ldd	r31, Y+10	; 0x0a
    d5e8:	14 a2       	std	Z+36, r1	; 0x24
		player->feeling_my_way = 0;
    d5ea:	12 8e       	std	Z+26, r1	; 0x1a
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    d5ec:	82 e0       	ldi	r24, 0x02	; 2
    d5ee:	8f 0d       	add	r24, r15
    d5f0:	85 30       	cpi	r24, 0x05	; 5
    d5f2:	c8 f4       	brcc	.+50     	; 0xd626 <get_cpu_joypad_state+0x1b2>
    d5f4:	4e 3f       	cpi	r20, 0xFE	; 254
    d5f6:	bc f0       	brlt	.+46     	; 0xd626 <get_cpu_joypad_state+0x1b2>
    d5f8:	43 30       	cpi	r20, 0x03	; 3
    d5fa:	ac f4       	brge	.+42     	; 0xd626 <get_cpu_joypad_state+0x1b2>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    d5fc:	64 e0       	ldi	r22, 0x04	; 4
    d5fe:	80 e0       	ldi	r24, 0x00	; 0
    d600:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    d604:	90 e0       	ldi	r25, 0x00	; 0
    d606:	0e 94 f3 68 	call	0xd1e6	; 0xd1e6 <button_map>
    d60a:	a9 85       	ldd	r26, Y+9	; 0x09
    d60c:	ba 85       	ldd	r27, Y+10	; 0x0a
    d60e:	5e 96       	adiw	r26, 0x1e	; 30
    d610:	9c 93       	st	X, r25
    d612:	8e 93       	st	-X, r24
    d614:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = LBRandom(5, 18);
    d616:	62 e1       	ldi	r22, 0x12	; 18
    d618:	85 e0       	ldi	r24, 0x05	; 5
    d61a:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    d61e:	e9 85       	ldd	r30, Y+9	; 0x09
    d620:	fa 85       	ldd	r31, Y+10	; 0x0a
    d622:	83 a3       	std	Z+35, r24	; 0x23
    d624:	16 c0       	rjmp	.+44     	; 0xd652 <get_cpu_joypad_state+0x1de>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    d626:	6f 2d       	mov	r22, r15
    d628:	89 85       	ldd	r24, Y+9	; 0x09
    d62a:	9a 85       	ldd	r25, Y+10	; 0x0a
    d62c:	0e 94 07 6a 	call	0xd40e	; 0xd40e <get_cpu_goal_direction>
    d630:	a9 85       	ldd	r26, Y+9	; 0x09
    d632:	ba 85       	ldd	r27, Y+10	; 0x0a
    d634:	5e 96       	adiw	r26, 0x1e	; 30
    d636:	9c 93       	st	X, r25
    d638:	8e 93       	st	-X, r24
    d63a:	5d 97       	sbiw	r26, 0x1d	; 29
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d63c:	80 31       	cpi	r24, 0x10	; 16
    d63e:	91 05       	cpc	r25, r1
    d640:	29 f0       	breq	.+10     	; 0xd64c <get_cpu_joypad_state+0x1d8>
    d642:	80 97       	sbiw	r24, 0x20	; 32
    d644:	19 f0       	breq	.+6      	; 0xd64c <get_cpu_joypad_state+0x1d8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
    d646:	93 96       	adiw	r26, 0x23	; 35
    d648:	7c 92       	st	X, r7
    d64a:	03 c0       	rjmp	.+6      	; 0xd652 <get_cpu_joypad_state+0x1de>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    d64c:	e9 85       	ldd	r30, Y+9	; 0x09
    d64e:	fa 85       	ldd	r31, Y+10	; 0x0a
    d650:	b3 a2       	std	Z+35, r11	; 0x23
		}
		p->held = player->goal_direction;
    d652:	a9 85       	ldd	r26, Y+9	; 0x09
    d654:	ba 85       	ldd	r27, Y+10	; 0x0a
    d656:	5d 96       	adiw	r26, 0x1d	; 29
    d658:	8d 91       	ld	r24, X+
    d65a:	9c 91       	ld	r25, X
    d65c:	5e 97       	sbiw	r26, 0x1e	; 30
    d65e:	f2 01       	movw	r30, r4
    d660:	95 83       	std	Z+5, r25	; 0x05
    d662:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    d664:	a9 85       	ldd	r26, Y+9	; 0x09
    d666:	ba 85       	ldd	r27, Y+10	; 0x0a
    d668:	13 96       	adiw	r26, 0x03	; 3
    d66a:	cd 90       	ld	r12, X+
    d66c:	dd 90       	ld	r13, X+
    d66e:	ed 90       	ld	r14, X+
    d670:	fc 90       	ld	r15, X
    d672:	16 97       	sbiw	r26, 0x06	; 6
    d674:	95 96       	adiw	r26, 0x25	; 37
    d676:	2d 91       	ld	r18, X+
    d678:	3d 91       	ld	r19, X+
    d67a:	4d 91       	ld	r20, X+
    d67c:	5c 91       	ld	r21, X
    d67e:	98 97       	sbiw	r26, 0x28	; 40
    d680:	c7 01       	movw	r24, r14
    d682:	b6 01       	movw	r22, r12
    d684:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    d688:	88 23       	and	r24, r24
    d68a:	29 f0       	breq	.+10     	; 0xd696 <get_cpu_joypad_state+0x222>
		player->deadlock_count_x = 0;
    d68c:	e9 85       	ldd	r30, Y+9	; 0x09
    d68e:	fa 85       	ldd	r31, Y+10	; 0x0a
    d690:	10 a2       	std	Z+32, r1	; 0x20
    d692:	17 8e       	std	Z+31, r1	; 0x1f
    d694:	0b c0       	rjmp	.+22     	; 0xd6ac <get_cpu_joypad_state+0x238>
	else 
		player->deadlock_count_x++;
    d696:	a9 85       	ldd	r26, Y+9	; 0x09
    d698:	ba 85       	ldd	r27, Y+10	; 0x0a
    d69a:	5f 96       	adiw	r26, 0x1f	; 31
    d69c:	8d 91       	ld	r24, X+
    d69e:	9c 91       	ld	r25, X
    d6a0:	90 97       	sbiw	r26, 0x20	; 32
    d6a2:	01 96       	adiw	r24, 0x01	; 1
    d6a4:	90 96       	adiw	r26, 0x20	; 32
    d6a6:	9c 93       	st	X, r25
    d6a8:	8e 93       	st	-X, r24
    d6aa:	5f 97       	sbiw	r26, 0x1f	; 31
	if (player->shared.y != player->old_y)
    d6ac:	e9 85       	ldd	r30, Y+9	; 0x09
    d6ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    d6b0:	87 80       	ldd	r8, Z+7	; 0x07
    d6b2:	90 84       	ldd	r9, Z+8	; 0x08
    d6b4:	a1 84       	ldd	r10, Z+9	; 0x09
    d6b6:	b2 84       	ldd	r11, Z+10	; 0x0a
    d6b8:	21 a5       	ldd	r18, Z+41	; 0x29
    d6ba:	32 a5       	ldd	r19, Z+42	; 0x2a
    d6bc:	43 a5       	ldd	r20, Z+43	; 0x2b
    d6be:	54 a5       	ldd	r21, Z+44	; 0x2c
    d6c0:	c5 01       	movw	r24, r10
    d6c2:	b4 01       	movw	r22, r8
    d6c4:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    d6c8:	88 23       	and	r24, r24
    d6ca:	39 f0       	breq	.+14     	; 0xd6da <get_cpu_joypad_state+0x266>
		player->deadlock_count_y = 0;
    d6cc:	a9 85       	ldd	r26, Y+9	; 0x09
    d6ce:	ba 85       	ldd	r27, Y+10	; 0x0a
    d6d0:	92 96       	adiw	r26, 0x22	; 34
    d6d2:	1c 92       	st	X, r1
    d6d4:	1e 92       	st	-X, r1
    d6d6:	91 97       	sbiw	r26, 0x21	; 33
    d6d8:	07 c0       	rjmp	.+14     	; 0xd6e8 <get_cpu_joypad_state+0x274>
	else
		player->deadlock_count_y++;
    d6da:	e9 85       	ldd	r30, Y+9	; 0x09
    d6dc:	fa 85       	ldd	r31, Y+10	; 0x0a
    d6de:	81 a1       	ldd	r24, Z+33	; 0x21
    d6e0:	92 a1       	ldd	r25, Z+34	; 0x22
    d6e2:	01 96       	adiw	r24, 0x01	; 1
    d6e4:	92 a3       	std	Z+34, r25	; 0x22
    d6e6:	81 a3       	std	Z+33, r24	; 0x21
	player->old_x = player->shared.x;
    d6e8:	a9 85       	ldd	r26, Y+9	; 0x09
    d6ea:	ba 85       	ldd	r27, Y+10	; 0x0a
    d6ec:	95 96       	adiw	r26, 0x25	; 37
    d6ee:	cd 92       	st	X+, r12
    d6f0:	dd 92       	st	X+, r13
    d6f2:	ed 92       	st	X+, r14
    d6f4:	fc 92       	st	X, r15
    d6f6:	98 97       	sbiw	r26, 0x28	; 40
	player->old_y = player->shared.y;
    d6f8:	fd 01       	movw	r30, r26
    d6fa:	81 a6       	std	Z+41, r8	; 0x29
    d6fc:	92 a6       	std	Z+42, r9	; 0x2a
    d6fe:	a3 a6       	std	Z+43, r10	; 0x2b
    d700:	b4 a6       	std	Z+44, r11	; 0x2c
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    d702:	87 8d       	ldd	r24, Z+31	; 0x1f
    d704:	90 a1       	ldd	r25, Z+32	; 0x20
    d706:	80 34       	cpi	r24, 0x40	; 64
    d708:	91 40       	sbci	r25, 0x01	; 1
    d70a:	88 f0       	brcs	.+34     	; 0xd72e <get_cpu_joypad_state+0x2ba>
	{
		p->held = button_map(LBRandom(2, 4));
    d70c:	64 e0       	ldi	r22, 0x04	; 4
    d70e:	82 e0       	ldi	r24, 0x02	; 2
    d710:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    d714:	90 e0       	ldi	r25, 0x00	; 0
    d716:	0e 94 f3 68 	call	0xd1e6	; 0xd1e6 <button_map>
    d71a:	d2 01       	movw	r26, r4
    d71c:	15 96       	adiw	r26, 0x05	; 5
    d71e:	9c 93       	st	X, r25
    d720:	8e 93       	st	-X, r24
    d722:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_x = 0;
    d724:	e9 85       	ldd	r30, Y+9	; 0x09
    d726:	fa 85       	ldd	r31, Y+10	; 0x0a
    d728:	10 a2       	std	Z+32, r1	; 0x20
    d72a:	17 8e       	std	Z+31, r1	; 0x1f
    d72c:	42 c0       	rjmp	.+132    	; 0xd7b2 <get_cpu_joypad_state+0x33e>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    d72e:	a9 85       	ldd	r26, Y+9	; 0x09
    d730:	ba 85       	ldd	r27, Y+10	; 0x0a
    d732:	91 96       	adiw	r26, 0x21	; 33
    d734:	8d 91       	ld	r24, X+
    d736:	9c 91       	ld	r25, X
    d738:	92 97       	sbiw	r26, 0x22	; 34
    d73a:	80 34       	cpi	r24, 0x40	; 64
    d73c:	91 40       	sbci	r25, 0x01	; 1
    d73e:	88 f0       	brcs	.+34     	; 0xd762 <get_cpu_joypad_state+0x2ee>
	{
		p->held = button_map(LBRandom(0, 2));
    d740:	62 e0       	ldi	r22, 0x02	; 2
    d742:	80 e0       	ldi	r24, 0x00	; 0
    d744:	0e 94 47 50 	call	0xa08e	; 0xa08e <LBRandom>
    d748:	90 e0       	ldi	r25, 0x00	; 0
    d74a:	0e 94 f3 68 	call	0xd1e6	; 0xd1e6 <button_map>
    d74e:	f2 01       	movw	r30, r4
    d750:	95 83       	std	Z+5, r25	; 0x05
    d752:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    d754:	a9 85       	ldd	r26, Y+9	; 0x09
    d756:	ba 85       	ldd	r27, Y+10	; 0x0a
    d758:	92 96       	adiw	r26, 0x22	; 34
    d75a:	1c 92       	st	X, r1
    d75c:	1e 92       	st	-X, r1
    d75e:	91 97       	sbiw	r26, 0x21	; 33
    d760:	28 c0       	rjmp	.+80     	; 0xd7b2 <get_cpu_joypad_state+0x33e>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    d762:	20 e0       	ldi	r18, 0x00	; 0
    d764:	30 e0       	ldi	r19, 0x00	; 0
    d766:	40 e0       	ldi	r20, 0x00	; 0
    d768:	5e e3       	ldi	r21, 0x3E	; 62
    d76a:	c5 01       	movw	r24, r10
    d76c:	b4 01       	movw	r22, r8
    d76e:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d772:	20 e0       	ldi	r18, 0x00	; 0
    d774:	30 e0       	ldi	r19, 0x00	; 0
    d776:	40 e4       	ldi	r20, 0x40	; 64
    d778:	50 e4       	ldi	r21, 0x40	; 64
    d77a:	0e 94 20 6e 	call	0xdc40	; 0xdc40 <__subsf3>
    d77e:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
    d782:	b6 2e       	mov	r11, r22
    d784:	20 e0       	ldi	r18, 0x00	; 0
    d786:	30 e0       	ldi	r19, 0x00	; 0
    d788:	40 e0       	ldi	r20, 0x00	; 0
    d78a:	5e e3       	ldi	r21, 0x3E	; 62
    d78c:	c7 01       	movw	r24, r14
    d78e:	b6 01       	movw	r22, r12
    d790:	0e 94 d8 6f 	call	0xdfb0	; 0xdfb0 <__mulsf3>
    d794:	0e 94 f1 6e 	call	0xdde2	; 0xdde2 <__fixsfsi>
    d798:	86 2f       	mov	r24, r22
    d79a:	82 01       	movw	r16, r4
    d79c:	29 85       	ldd	r18, Y+9	; 0x09
    d79e:	3a 85       	ldd	r19, Y+10	; 0x0a
    d7a0:	f9 01       	movw	r30, r18
    d7a2:	42 81       	ldd	r20, Z+2	; 0x02
    d7a4:	6b 2d       	mov	r22, r11
    d7a6:	0e 94 09 69 	call	0xd212	; 0xd212 <crash_and_turn>
    d7aa:	a9 85       	ldd	r26, Y+9	; 0x09
    d7ac:	ba 85       	ldd	r27, Y+10	; 0x0a
    d7ae:	94 96       	adiw	r26, 0x24	; 36
    d7b0:	8c 93       	st	X, r24
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    d7b2:	e9 85       	ldd	r30, Y+9	; 0x09
    d7b4:	fa 85       	ldd	r31, Y+10	; 0x0a
    d7b6:	84 8d       	ldd	r24, Z+28	; 0x1c
    d7b8:	81 30       	cpi	r24, 0x01	; 1
    d7ba:	09 f0       	breq	.+2      	; 0xd7be <get_cpu_joypad_state+0x34a>
    d7bc:	f7 c0       	rjmp	.+494    	; 0xd9ac <get_cpu_joypad_state+0x538>
    d7be:	d1 01       	movw	r26, r2
    d7c0:	52 96       	adiw	r26, 0x12	; 18
    d7c2:	9c 91       	ld	r25, X
    d7c4:	52 97       	sbiw	r26, 0x12	; 18
    d7c6:	51 96       	adiw	r26, 0x11	; 17
    d7c8:	8c 91       	ld	r24, X
    d7ca:	51 97       	sbiw	r26, 0x11	; 17
    d7cc:	98 17       	cp	r25, r24
    d7ce:	08 f0       	brcs	.+2      	; 0xd7d2 <get_cpu_joypad_state+0x35e>
    d7d0:	ed c0       	rjmp	.+474    	; 0xd9ac <get_cpu_joypad_state+0x538>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    d7d2:	17 96       	adiw	r26, 0x07	; 7
    d7d4:	cd 90       	ld	r12, X+
    d7d6:	dd 90       	ld	r13, X+
    d7d8:	ed 90       	ld	r14, X+
    d7da:	fc 90       	ld	r15, X
    d7dc:	1a 97       	sbiw	r26, 0x0a	; 10
    d7de:	87 80       	ldd	r8, Z+7	; 0x07
    d7e0:	90 84       	ldd	r9, Z+8	; 0x08
    d7e2:	a1 84       	ldd	r10, Z+9	; 0x09
    d7e4:	b2 84       	ldd	r11, Z+10	; 0x0a
    d7e6:	a5 01       	movw	r20, r10
    d7e8:	94 01       	movw	r18, r8
    d7ea:	c7 01       	movw	r24, r14
    d7ec:	b6 01       	movw	r22, r12
    d7ee:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    d7f2:	87 ff       	sbrs	r24, 7
    d7f4:	64 c0       	rjmp	.+200    	; 0xd8be <get_cpu_joypad_state+0x44a>
    d7f6:	e9 85       	ldd	r30, Y+9	; 0x09
    d7f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    d7fa:	23 81       	ldd	r18, Z+3	; 0x03
    d7fc:	34 81       	ldd	r19, Z+4	; 0x04
    d7fe:	45 81       	ldd	r20, Z+5	; 0x05
    d800:	56 81       	ldd	r21, Z+6	; 0x06
    d802:	d1 01       	movw	r26, r2
    d804:	13 96       	adiw	r26, 0x03	; 3
    d806:	6d 91       	ld	r22, X+
    d808:	7d 91       	ld	r23, X+
    d80a:	8d 91       	ld	r24, X+
    d80c:	9c 91       	ld	r25, X
    d80e:	16 97       	sbiw	r26, 0x06	; 6
    d810:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    d814:	87 ff       	sbrs	r24, 7
    d816:	27 c0       	rjmp	.+78     	; 0xd866 <get_cpu_joypad_state+0x3f2>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    d818:	f1 01       	movw	r30, r2
    d81a:	80 81       	ld	r24, Z
    d81c:	82 30       	cpi	r24, 0x02	; 2
    d81e:	79 f4       	brne	.+30     	; 0xd83e <get_cpu_joypad_state+0x3ca>
    d820:	a9 85       	ldd	r26, Y+9	; 0x09
    d822:	ba 85       	ldd	r27, Y+10	; 0x0a
    d824:	8c 91       	ld	r24, X
    d826:	83 30       	cpi	r24, 0x03	; 3
    d828:	51 f4       	brne	.+20     	; 0xd83e <get_cpu_joypad_state+0x3ca>
			{
				p->held = BTN_RIGHT;
    d82a:	80 e8       	ldi	r24, 0x80	; 128
    d82c:	90 e0       	ldi	r25, 0x00	; 0
    d82e:	f2 01       	movw	r30, r4
    d830:	95 83       	std	Z+5, r25	; 0x05
    d832:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    d834:	94 96       	adiw	r26, 0x24	; 36
    d836:	1c 92       	st	X, r1
    d838:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    d83a:	5a 96       	adiw	r26, 0x1a	; 26
    d83c:	1c 92       	st	X, r1
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    d83e:	d1 01       	movw	r26, r2
    d840:	8c 91       	ld	r24, X
    d842:	81 30       	cpi	r24, 0x01	; 1
    d844:	09 f0       	breq	.+2      	; 0xd848 <get_cpu_joypad_state+0x3d4>
    d846:	b2 c0       	rjmp	.+356    	; 0xd9ac <get_cpu_joypad_state+0x538>
    d848:	e9 85       	ldd	r30, Y+9	; 0x09
    d84a:	fa 85       	ldd	r31, Y+10	; 0x0a
    d84c:	80 81       	ld	r24, Z
    d84e:	81 11       	cpse	r24, r1
    d850:	ad c0       	rjmp	.+346    	; 0xd9ac <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    d852:	a9 85       	ldd	r26, Y+9	; 0x09
    d854:	ba 85       	ldd	r27, Y+10	; 0x0a
    d856:	94 96       	adiw	r26, 0x24	; 36
    d858:	1c 92       	st	X, r1
    d85a:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    d85c:	5a 96       	adiw	r26, 0x1a	; 26
    d85e:	1c 92       	st	X, r1
				p->held = BTN_DOWN;
    d860:	80 e2       	ldi	r24, 0x20	; 32
    d862:	90 e0       	ldi	r25, 0x00	; 0
    d864:	6c c0       	rjmp	.+216    	; 0xd93e <get_cpu_joypad_state+0x4ca>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    d866:	a9 85       	ldd	r26, Y+9	; 0x09
    d868:	ba 85       	ldd	r27, Y+10	; 0x0a
    d86a:	13 96       	adiw	r26, 0x03	; 3
    d86c:	2d 91       	ld	r18, X+
    d86e:	3d 91       	ld	r19, X+
    d870:	4d 91       	ld	r20, X+
    d872:	5c 91       	ld	r21, X
    d874:	16 97       	sbiw	r26, 0x06	; 6
    d876:	f1 01       	movw	r30, r2
    d878:	63 81       	ldd	r22, Z+3	; 0x03
    d87a:	74 81       	ldd	r23, Z+4	; 0x04
    d87c:	85 81       	ldd	r24, Z+5	; 0x05
    d87e:	96 81       	ldd	r25, Z+6	; 0x06
    d880:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    d884:	18 16       	cp	r1, r24
    d886:	dc f4       	brge	.+54     	; 0xd8be <get_cpu_joypad_state+0x44a>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    d888:	d1 01       	movw	r26, r2
    d88a:	8c 91       	ld	r24, X
    d88c:	82 30       	cpi	r24, 0x02	; 2
    d88e:	71 f4       	brne	.+28     	; 0xd8ac <get_cpu_joypad_state+0x438>
    d890:	e9 85       	ldd	r30, Y+9	; 0x09
    d892:	fa 85       	ldd	r31, Y+10	; 0x0a
    d894:	80 81       	ld	r24, Z
    d896:	81 30       	cpi	r24, 0x01	; 1
    d898:	49 f4       	brne	.+18     	; 0xd8ac <get_cpu_joypad_state+0x438>
			{
				player->goal_reached = 0;
    d89a:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    d89c:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    d89e:	80 e4       	ldi	r24, 0x40	; 64
    d8a0:	90 e0       	ldi	r25, 0x00	; 0
    d8a2:	d2 01       	movw	r26, r4
    d8a4:	15 96       	adiw	r26, 0x05	; 5
    d8a6:	9c 93       	st	X, r25
    d8a8:	8e 93       	st	-X, r24
    d8aa:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    d8ac:	f1 01       	movw	r30, r2
    d8ae:	80 81       	ld	r24, Z
    d8b0:	83 30       	cpi	r24, 0x03	; 3
    d8b2:	09 f0       	breq	.+2      	; 0xd8b6 <get_cpu_joypad_state+0x442>
    d8b4:	7b c0       	rjmp	.+246    	; 0xd9ac <get_cpu_joypad_state+0x538>
    d8b6:	a9 85       	ldd	r26, Y+9	; 0x09
    d8b8:	ba 85       	ldd	r27, Y+10	; 0x0a
    d8ba:	8c 91       	ld	r24, X
    d8bc:	c8 cf       	rjmp	.-112    	; 0xd84e <get_cpu_joypad_state+0x3da>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    d8be:	a5 01       	movw	r20, r10
    d8c0:	94 01       	movw	r18, r8
    d8c2:	c7 01       	movw	r24, r14
    d8c4:	b6 01       	movw	r22, r12
    d8c6:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    d8ca:	18 16       	cp	r1, r24
    d8cc:	e4 f5       	brge	.+120    	; 0xd946 <get_cpu_joypad_state+0x4d2>
    d8ce:	e9 85       	ldd	r30, Y+9	; 0x09
    d8d0:	fa 85       	ldd	r31, Y+10	; 0x0a
    d8d2:	23 81       	ldd	r18, Z+3	; 0x03
    d8d4:	34 81       	ldd	r19, Z+4	; 0x04
    d8d6:	45 81       	ldd	r20, Z+5	; 0x05
    d8d8:	56 81       	ldd	r21, Z+6	; 0x06
    d8da:	d1 01       	movw	r26, r2
    d8dc:	13 96       	adiw	r26, 0x03	; 3
    d8de:	6d 91       	ld	r22, X+
    d8e0:	7d 91       	ld	r23, X+
    d8e2:	8d 91       	ld	r24, X+
    d8e4:	9c 91       	ld	r25, X
    d8e6:	16 97       	sbiw	r26, 0x06	; 6
    d8e8:	0e 94 85 6e 	call	0xdd0a	; 0xdd0a <__cmpsf2>
    d8ec:	87 ff       	sbrs	r24, 7
    d8ee:	33 c0       	rjmp	.+102    	; 0xd956 <get_cpu_joypad_state+0x4e2>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    d8f0:	f1 01       	movw	r30, r2
    d8f2:	80 81       	ld	r24, Z
    d8f4:	81 11       	cpse	r24, r1
    d8f6:	0f c0       	rjmp	.+30     	; 0xd916 <get_cpu_joypad_state+0x4a2>
    d8f8:	a9 85       	ldd	r26, Y+9	; 0x09
    d8fa:	ba 85       	ldd	r27, Y+10	; 0x0a
    d8fc:	8c 91       	ld	r24, X
    d8fe:	83 30       	cpi	r24, 0x03	; 3
    d900:	51 f4       	brne	.+20     	; 0xd916 <get_cpu_joypad_state+0x4a2>
			{
				player->goal_reached = 0;
    d902:	94 96       	adiw	r26, 0x24	; 36
    d904:	1c 92       	st	X, r1
    d906:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    d908:	5a 96       	adiw	r26, 0x1a	; 26
    d90a:	1c 92       	st	X, r1
				p->held = BTN_RIGHT;
    d90c:	80 e8       	ldi	r24, 0x80	; 128
    d90e:	90 e0       	ldi	r25, 0x00	; 0
    d910:	f2 01       	movw	r30, r4
    d912:	95 83       	std	Z+5, r25	; 0x05
    d914:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    d916:	d1 01       	movw	r26, r2
    d918:	8c 91       	ld	r24, X
    d91a:	81 30       	cpi	r24, 0x01	; 1
    d91c:	09 f0       	breq	.+2      	; 0xd920 <get_cpu_joypad_state+0x4ac>
    d91e:	46 c0       	rjmp	.+140    	; 0xd9ac <get_cpu_joypad_state+0x538>
    d920:	e9 85       	ldd	r30, Y+9	; 0x09
    d922:	fa 85       	ldd	r31, Y+10	; 0x0a
    d924:	80 81       	ld	r24, Z
    d926:	82 30       	cpi	r24, 0x02	; 2
    d928:	09 f0       	breq	.+2      	; 0xd92c <get_cpu_joypad_state+0x4b8>
    d92a:	40 c0       	rjmp	.+128    	; 0xd9ac <get_cpu_joypad_state+0x538>
			{
				player->goal_reached = 0;
    d92c:	a9 85       	ldd	r26, Y+9	; 0x09
    d92e:	ba 85       	ldd	r27, Y+10	; 0x0a
    d930:	94 96       	adiw	r26, 0x24	; 36
    d932:	1c 92       	st	X, r1
    d934:	94 97       	sbiw	r26, 0x24	; 36
				player->feeling_my_way = 0;
    d936:	5a 96       	adiw	r26, 0x1a	; 26
    d938:	1c 92       	st	X, r1
				p->held = BTN_UP;
    d93a:	80 e1       	ldi	r24, 0x10	; 16
    d93c:	90 e0       	ldi	r25, 0x00	; 0
    d93e:	f2 01       	movw	r30, r4
    d940:	95 83       	std	Z+5, r25	; 0x05
    d942:	84 83       	std	Z+4, r24	; 0x04
    d944:	33 c0       	rjmp	.+102    	; 0xd9ac <get_cpu_joypad_state+0x538>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    d946:	a5 01       	movw	r20, r10
    d948:	94 01       	movw	r18, r8
    d94a:	c7 01       	movw	r24, r14
    d94c:	b6 01       	movw	r22, r12
    d94e:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    d952:	18 16       	cp	r1, r24
    d954:	5c f5       	brge	.+86     	; 0xd9ac <get_cpu_joypad_state+0x538>
    d956:	a9 85       	ldd	r26, Y+9	; 0x09
    d958:	ba 85       	ldd	r27, Y+10	; 0x0a
    d95a:	13 96       	adiw	r26, 0x03	; 3
    d95c:	2d 91       	ld	r18, X+
    d95e:	3d 91       	ld	r19, X+
    d960:	4d 91       	ld	r20, X+
    d962:	5c 91       	ld	r21, X
    d964:	16 97       	sbiw	r26, 0x06	; 6
    d966:	f1 01       	movw	r30, r2
    d968:	63 81       	ldd	r22, Z+3	; 0x03
    d96a:	74 81       	ldd	r23, Z+4	; 0x04
    d96c:	85 81       	ldd	r24, Z+5	; 0x05
    d96e:	96 81       	ldd	r25, Z+6	; 0x06
    d970:	0e 94 d4 6f 	call	0xdfa8	; 0xdfa8 <__gesf2>
    d974:	18 16       	cp	r1, r24
    d976:	d4 f4       	brge	.+52     	; 0xd9ac <get_cpu_joypad_state+0x538>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    d978:	d1 01       	movw	r26, r2
    d97a:	8c 91       	ld	r24, X
    d97c:	81 11       	cpse	r24, r1
    d97e:	0e c0       	rjmp	.+28     	; 0xd99c <get_cpu_joypad_state+0x528>
    d980:	e9 85       	ldd	r30, Y+9	; 0x09
    d982:	fa 85       	ldd	r31, Y+10	; 0x0a
    d984:	80 81       	ld	r24, Z
    d986:	81 30       	cpi	r24, 0x01	; 1
    d988:	49 f4       	brne	.+18     	; 0xd99c <get_cpu_joypad_state+0x528>
			{
				player->goal_reached = 0;
    d98a:	14 a2       	std	Z+36, r1	; 0x24
				player->feeling_my_way = 0;
    d98c:	12 8e       	std	Z+26, r1	; 0x1a
				p->held = BTN_LEFT;
    d98e:	80 e4       	ldi	r24, 0x40	; 64
    d990:	90 e0       	ldi	r25, 0x00	; 0
    d992:	d2 01       	movw	r26, r4
    d994:	15 96       	adiw	r26, 0x05	; 5
    d996:	9c 93       	st	X, r25
    d998:	8e 93       	st	-X, r24
    d99a:	14 97       	sbiw	r26, 0x04	; 4
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    d99c:	f1 01       	movw	r30, r2
    d99e:	80 81       	ld	r24, Z
    d9a0:	83 30       	cpi	r24, 0x03	; 3
    d9a2:	21 f4       	brne	.+8      	; 0xd9ac <get_cpu_joypad_state+0x538>
    d9a4:	a9 85       	ldd	r26, Y+9	; 0x09
    d9a6:	ba 85       	ldd	r27, Y+10	; 0x0a
    d9a8:	8c 91       	ld	r24, X
    d9aa:	bd cf       	rjmp	.-134    	; 0xd926 <get_cpu_joypad_state+0x4b2>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    d9ac:	2a 96       	adiw	r28, 0x0a	; 10
    d9ae:	0f b6       	in	r0, 0x3f	; 63
    d9b0:	f8 94       	cli
    d9b2:	de bf       	out	0x3e, r29	; 62
    d9b4:	0f be       	out	0x3f, r0	; 63
    d9b6:	cd bf       	out	0x3d, r28	; 61
    d9b8:	df 91       	pop	r29
    d9ba:	cf 91       	pop	r28
    d9bc:	1f 91       	pop	r17
    d9be:	0f 91       	pop	r16
    d9c0:	ff 90       	pop	r15
    d9c2:	ef 90       	pop	r14
    d9c4:	df 90       	pop	r13
    d9c6:	cf 90       	pop	r12
    d9c8:	bf 90       	pop	r11
    d9ca:	af 90       	pop	r10
    d9cc:	9f 90       	pop	r9
    d9ce:	8f 90       	pop	r8
    d9d0:	7f 90       	pop	r7
    d9d2:	5f 90       	pop	r5
    d9d4:	4f 90       	pop	r4
    d9d6:	3f 90       	pop	r3
    d9d8:	2f 90       	pop	r2
    d9da:	08 95       	ret

0000d9dc <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    d9dc:	bf 92       	push	r11
    d9de:	cf 92       	push	r12
    d9e0:	df 92       	push	r13
    d9e2:	ef 92       	push	r14
    d9e4:	ff 92       	push	r15
    d9e6:	0f 93       	push	r16
    d9e8:	1f 93       	push	r17
    d9ea:	cf 93       	push	r28
    d9ec:	df 93       	push	r29
    d9ee:	1f 92       	push	r1
    d9f0:	cd b7       	in	r28, 0x3d	; 61
    d9f2:	de b7       	in	r29, 0x3e	; 62
    d9f4:	8c 01       	movw	r16, r24
    d9f6:	f6 2e       	mov	r15, r22
    d9f8:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    d9fa:	8f e0       	ldi	r24, 0x0F	; 15
    d9fc:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    d9fe:	f8 01       	movw	r30, r16
    da00:	84 91       	lpm	r24, Z
    da02:	83 32       	cpi	r24, 0x23	; 35
    da04:	59 f1       	breq	.+86     	; 0xda5c <stream_text_middle+0x80>
	{
		ln = strnlen_P(dialogue, 255);
    da06:	6f ef       	ldi	r22, 0xFF	; 255
    da08:	70 e0       	ldi	r23, 0x00	; 0
    da0a:	c8 01       	movw	r24, r16
    da0c:	0e 94 44 70 	call	0xe088	; 0xe088 <strnlen_P>
		x = 15 - ln / 2;
    da10:	86 95       	lsr	r24
    da12:	eb 2c       	mov	r14, r11
    da14:	e8 1a       	sub	r14, r24
    da16:	e0 1a       	sub	r14, r16
    da18:	8e 2d       	mov	r24, r14
    da1a:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    da1c:	0f 5f       	subi	r16, 0xFF	; 255
    da1e:	1f 4f       	sbci	r17, 0xFF	; 255
    da20:	f8 01       	movw	r30, r16
    da22:	31 97       	sbiw	r30, 0x01	; 1
    da24:	e4 91       	lpm	r30, Z
    da26:	e9 83       	std	Y+1, r30	; 0x01
    da28:	ee 23       	and	r30, r30
    da2a:	b1 f0       	breq	.+44     	; 0xda58 <stream_text_middle+0x7c>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    da2c:	21 e0       	ldi	r18, 0x01	; 1
    da2e:	ae 01       	movw	r20, r28
    da30:	4f 5f       	subi	r20, 0xFF	; 255
    da32:	5f 4f       	sbci	r21, 0xFF	; 255
    da34:	6f 2d       	mov	r22, r15
    da36:	0e 94 16 4f 	call	0x9e2c	; 0x9e2c <LBPrintStr>
			LBGetJoyPadState(&p1, 0);
    da3a:	60 e0       	ldi	r22, 0x00	; 0
    da3c:	83 e5       	ldi	r24, 0x53	; 83
    da3e:	9c e0       	ldi	r25, 0x0C	; 12
    da40:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
			if (!(p1.held & BTN_A)) LBWaitUs(delay);
    da44:	80 91 57 0c 	lds	r24, 0x0C57
    da48:	90 91 58 0c 	lds	r25, 0x0C58
    da4c:	90 fd       	sbrc	r25, 0
    da4e:	e4 cf       	rjmp	.-56     	; 0xda18 <stream_text_middle+0x3c>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    da50:	c6 01       	movw	r24, r12
    da52:	0e 94 16 40 	call	0x802c	; 0x802c <WaitUs>
    da56:	e0 cf       	rjmp	.-64     	; 0xda18 <stream_text_middle+0x3c>
		}
		y++;
    da58:	f3 94       	inc	r15
    da5a:	d1 cf       	rjmp	.-94     	; 0xd9fe <stream_text_middle+0x22>
	}
}
    da5c:	0f 90       	pop	r0
    da5e:	df 91       	pop	r29
    da60:	cf 91       	pop	r28
    da62:	1f 91       	pop	r17
    da64:	0f 91       	pop	r16
    da66:	ff 90       	pop	r15
    da68:	ef 90       	pop	r14
    da6a:	df 90       	pop	r13
    da6c:	cf 90       	pop	r12
    da6e:	bf 90       	pop	r11
    da70:	08 95       	ret

0000da72 <load_credits>:

void load_credits()
{
	fade_through();
    da72:	0e 94 49 52 	call	0xa492	; 0xa492 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    da76:	44 e6       	ldi	r20, 0x64	; 100
    da78:	50 e0       	ldi	r21, 0x00	; 0
    da7a:	65 e0       	ldi	r22, 0x05	; 5
    da7c:	86 e1       	ldi	r24, 0x16	; 22
    da7e:	91 e0       	ldi	r25, 0x01	; 1
    da80:	0e 94 ee 6c 	call	0xd9dc	; 0xd9dc <stream_text_middle>
	LBWaitSeconds(4);
    da84:	84 e0       	ldi	r24, 0x04	; 4
    da86:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <LBWaitSeconds>
	fade_through();
    da8a:	0c 94 49 52 	jmp	0xa492	; 0xa492 <fade_through>

0000da8e <main>:
#endif

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    da8e:	0e 94 58 40 	call	0x80b0	; 0x80b0 <GetTrueRandomSeed>
    da92:	0e 94 e2 41 	call	0x83c4	; 0x83c4 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    da96:	8c e2       	ldi	r24, 0x2C	; 44
    da98:	93 e0       	ldi	r25, 0x03	; 3
    da9a:	0e 94 bc 42 	call	0x8578	; 0x8578 <InitMusicPlayer>
	SetMasterVolume(0xff);
    da9e:	8f ef       	ldi	r24, 0xFF	; 255
    daa0:	0e 94 c2 45 	call	0x8b84	; 0x8b84 <SetMasterVolume>
	SetTileTable(tiles_data);
    daa4:	80 ed       	ldi	r24, 0xD0	; 208
    daa6:	9c e3       	ldi	r25, 0x3C	; 60
    daa8:	0e 94 fb 3f 	call	0x7ff6	; 0x7ff6 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    daac:	8f e3       	ldi	r24, 0x3F	; 63
    daae:	93 e3       	ldi	r25, 0x33	; 51
    dab0:	0e 94 d7 3f 	call	0x7fae	; 0x7fae <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    dab4:	8b e9       	ldi	r24, 0x9B	; 155
    dab6:	0e 94 f8 3f 	call	0x7ff0	; 0x7ff0 <SetFontTilesIndex>
    UBRR0H=0;
    daba:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L=30; // 115200
    dabe:	8e e1       	ldi	r24, 0x1E	; 30
    dac0:	80 93 c4 00 	sts	0x00C4, r24
    UCSR0A=(0<<U2X0); //double speed mode(reliable disabled? must double UBRR0L values IF enabled)
    dac4:	10 92 c0 00 	sts	0x00C0, r1
    UCSR0C=(1<<UCSZ01)+(1<<UCSZ00)+(0<<USBS0); //8-bit frame, no parity, 1 stop bit
    dac8:	86 e0       	ldi	r24, 0x06	; 6
    daca:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B=(1<<RXEN0)+(1<<TXEN0); //Enable UART TX & RX
    dace:	88 e1       	ldi	r24, 0x18	; 24
    dad0:	80 93 c1 00 	sts	0x00C1, r24
    InitUartRxBuffer();
    dad4:	0e 94 d8 41 	call	0x83b0	; 0x83b0 <InitUartRxBuffer>
    InitUartTxBuffer();
    dad8:	0e 94 dd 41 	call	0x83ba	; 0x83ba <InitUartTxBuffer>
	FadeIn(FRAMES_PER_FADE, false);
    dadc:	60 e0       	ldi	r22, 0x00	; 0
    dade:	83 e0       	ldi	r24, 0x03	; 3
    dae0:	0e 94 2f 4e 	call	0x9c5e	; 0x9c5e <FadeIn>
	ClearVram();
    dae4:	0e 94 dc 3f 	call	0x7fb8	; 0x7fb8 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    dae8:	82 e6       	ldi	r24, 0x62	; 98
    daea:	9b e0       	ldi	r25, 0x0B	; 11
    daec:	0e 94 7b 50 	call	0xa0f6	; 0xa0f6 <init_scores>
	init_handles(&handles);
    daf0:	89 e8       	ldi	r24, 0x89	; 137
    daf2:	9b e0       	ldi	r25, 0x0B	; 11
    daf4:	0e 94 87 50 	call	0xa10e	; 0xa10e <init_handles>
	init_game_state();
    daf8:	0e 94 e0 51 	call	0xa3c0	; 0xa3c0 <init_game_state>
	load_credits();
    dafc:	0e 94 39 6d 	call	0xda72	; 0xda72 <load_credits>
	load_splash();
    db00:	0e 94 5a 60 	call	0xc0b4	; 0xc0b4 <load_splash>
	
	while (1)
	{
		waitForVSync();
    db04:	0e 94 2f 52 	call	0xa45e	; 0xa45e <waitForVSync>
		switch (game.current_screen)
    db08:	80 91 a9 0b 	lds	r24, 0x0BA9
    db0c:	81 30       	cpi	r24, 0x01	; 1
    db0e:	91 f0       	breq	.+36     	; 0xdb34 <main+0xa6>
    db10:	28 f0       	brcs	.+10     	; 0xdb1c <main+0x8e>
    db12:	82 30       	cpi	r24, 0x02	; 2
    db14:	c9 f0       	breq	.+50     	; 0xdb48 <main+0xba>
    db16:	83 30       	cpi	r24, 0x03	; 3
    db18:	41 f1       	breq	.+80     	; 0xdb6a <main+0xdc>
    db1a:	54 c0       	rjmp	.+168    	; 0xdbc4 <main+0x136>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    db1c:	60 e0       	ldi	r22, 0x00	; 0
    db1e:	83 e5       	ldi	r24, 0x53	; 83
    db20:	9c e0       	ldi	r25, 0x0C	; 12
    db22:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    db26:	62 e8       	ldi	r22, 0x82	; 130
    db28:	7b e0       	ldi	r23, 0x0B	; 11
    db2a:	83 e5       	ldi	r24, 0x53	; 83
    db2c:	9c e0       	ldi	r25, 0x0C	; 12
    db2e:	0e 94 eb 67 	call	0xcfd6	; 0xcfd6 <update_splash>
				break;
    db32:	48 c0       	rjmp	.+144    	; 0xdbc4 <main+0x136>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    db34:	60 e0       	ldi	r22, 0x00	; 0
    db36:	83 e5       	ldi	r24, 0x53	; 83
    db38:	9c e0       	ldi	r25, 0x0C	; 12
    db3a:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
				update_tank_rank(&p1);
    db3e:	83 e5       	ldi	r24, 0x53	; 83
    db40:	9c e0       	ldi	r25, 0x0C	; 12
    db42:	0e 94 96 65 	call	0xcb2c	; 0xcb2c <update_tank_rank>
				break;
    db46:	3e c0       	rjmp	.+124    	; 0xdbc4 <main+0x136>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    db48:	60 e0       	ldi	r22, 0x00	; 0
    db4a:	83 e5       	ldi	r24, 0x53	; 83
    db4c:	9c e0       	ldi	r25, 0x0C	; 12
    db4e:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    db52:	61 e0       	ldi	r22, 0x01	; 1
    db54:	82 e8       	ldi	r24, 0x82	; 130
    db56:	9b e0       	ldi	r25, 0x0B	; 11
    db58:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    db5c:	62 e8       	ldi	r22, 0x82	; 130
    db5e:	7b e0       	ldi	r23, 0x0B	; 11
    db60:	83 e5       	ldi	r24, 0x53	; 83
    db62:	9c e0       	ldi	r25, 0x0C	; 12
    db64:	0e 94 a5 68 	call	0xd14a	; 0xd14a <update_handle_select>
				break;
    db68:	2d c0       	rjmp	.+90     	; 0xdbc4 <main+0x136>
			case LEVEL:
				if (game.selection == PVCPU)
    db6a:	80 91 bc 0b 	lds	r24, 0x0BBC
    db6e:	81 11       	cpse	r24, r1
    db70:	06 c0       	rjmp	.+12     	; 0xdb7e <main+0xf0>
				{
					LBGetJoyPadState(&p1, 0);
    db72:	60 e0       	ldi	r22, 0x00	; 0
    db74:	83 e5       	ldi	r24, 0x53	; 83
    db76:	9c e0       	ldi	r25, 0x0C	; 12
    db78:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
    db7c:	0a c0       	rjmp	.+20     	; 0xdb92 <main+0x104>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    db7e:	83 30       	cpi	r24, 0x03	; 3
    db80:	89 f4       	brne	.+34     	; 0xdba4 <main+0x116>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    db82:	43 e5       	ldi	r20, 0x53	; 83
    db84:	5c e0       	ldi	r21, 0x0C	; 12
    db86:	69 e4       	ldi	r22, 0x49	; 73
    db88:	7f e0       	ldi	r23, 0x0F	; 15
    db8a:	8a ed       	ldi	r24, 0xDA	; 218
    db8c:	9b e0       	ldi	r25, 0x0B	; 11
    db8e:	0e 94 3a 6a 	call	0xd474	; 0xd474 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    db92:	42 e8       	ldi	r20, 0x82	; 130
    db94:	5b e0       	ldi	r21, 0x0B	; 11
    db96:	6a ed       	ldi	r22, 0xDA	; 218
    db98:	7b e0       	ldi	r23, 0x0B	; 11
    db9a:	89 e4       	ldi	r24, 0x49	; 73
    db9c:	9f e0       	ldi	r25, 0x0F	; 15
    db9e:	0e 94 3a 6a 	call	0xd474	; 0xd474 <get_cpu_joypad_state>
    dba2:	0a c0       	rjmp	.+20     	; 0xdbb8 <main+0x12a>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    dba4:	60 e0       	ldi	r22, 0x00	; 0
    dba6:	83 e5       	ldi	r24, 0x53	; 83
    dba8:	9c e0       	ldi	r25, 0x0C	; 12
    dbaa:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    dbae:	61 e0       	ldi	r22, 0x01	; 1
    dbb0:	82 e8       	ldi	r24, 0x82	; 130
    dbb2:	9b e0       	ldi	r25, 0x0B	; 11
    dbb4:	0e 94 bf 4e 	call	0x9d7e	; 0x9d7e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    dbb8:	62 e8       	ldi	r22, 0x82	; 130
    dbba:	7b e0       	ldi	r23, 0x0B	; 11
    dbbc:	83 e5       	ldi	r24, 0x53	; 83
    dbbe:	9c e0       	ldi	r25, 0x0C	; 12
    dbc0:	0e 94 66 63 	call	0xc6cc	; 0xc6cc <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    dbc4:	80 91 01 01 	lds	r24, 0x0101
    dbc8:	90 91 02 01 	lds	r25, 0x0102
    dbcc:	01 96       	adiw	r24, 0x01	; 1
    dbce:	90 93 02 01 	sts	0x0102, r25
    dbd2:	80 93 01 01 	sts	0x0101, r24
	}
    dbd6:	96 cf       	rjmp	.-212    	; 0xdb04 <main+0x76>

0000dbd8 <__udivmodqi4>:
    dbd8:	99 1b       	sub	r25, r25
    dbda:	79 e0       	ldi	r23, 0x09	; 9
    dbdc:	04 c0       	rjmp	.+8      	; 0xdbe6 <__udivmodqi4_ep>

0000dbde <__udivmodqi4_loop>:
    dbde:	99 1f       	adc	r25, r25
    dbe0:	96 17       	cp	r25, r22
    dbe2:	08 f0       	brcs	.+2      	; 0xdbe6 <__udivmodqi4_ep>
    dbe4:	96 1b       	sub	r25, r22

0000dbe6 <__udivmodqi4_ep>:
    dbe6:	88 1f       	adc	r24, r24
    dbe8:	7a 95       	dec	r23
    dbea:	c9 f7       	brne	.-14     	; 0xdbde <__udivmodqi4_loop>
    dbec:	80 95       	com	r24
    dbee:	08 95       	ret

0000dbf0 <__udivmodhi4>:
    dbf0:	aa 1b       	sub	r26, r26
    dbf2:	bb 1b       	sub	r27, r27
    dbf4:	51 e1       	ldi	r21, 0x11	; 17
    dbf6:	07 c0       	rjmp	.+14     	; 0xdc06 <__udivmodhi4_ep>

0000dbf8 <__udivmodhi4_loop>:
    dbf8:	aa 1f       	adc	r26, r26
    dbfa:	bb 1f       	adc	r27, r27
    dbfc:	a6 17       	cp	r26, r22
    dbfe:	b7 07       	cpc	r27, r23
    dc00:	10 f0       	brcs	.+4      	; 0xdc06 <__udivmodhi4_ep>
    dc02:	a6 1b       	sub	r26, r22
    dc04:	b7 0b       	sbc	r27, r23

0000dc06 <__udivmodhi4_ep>:
    dc06:	88 1f       	adc	r24, r24
    dc08:	99 1f       	adc	r25, r25
    dc0a:	5a 95       	dec	r21
    dc0c:	a9 f7       	brne	.-22     	; 0xdbf8 <__udivmodhi4_loop>
    dc0e:	80 95       	com	r24
    dc10:	90 95       	com	r25
    dc12:	bc 01       	movw	r22, r24
    dc14:	cd 01       	movw	r24, r26
    dc16:	08 95       	ret

0000dc18 <__divmodhi4>:
    dc18:	97 fb       	bst	r25, 7
    dc1a:	07 2e       	mov	r0, r23
    dc1c:	16 f4       	brtc	.+4      	; 0xdc22 <__divmodhi4+0xa>
    dc1e:	00 94       	com	r0
    dc20:	07 d0       	rcall	.+14     	; 0xdc30 <__divmodhi4_neg1>
    dc22:	77 fd       	sbrc	r23, 7
    dc24:	09 d0       	rcall	.+18     	; 0xdc38 <__divmodhi4_neg2>
    dc26:	0e 94 f8 6d 	call	0xdbf0	; 0xdbf0 <__udivmodhi4>
    dc2a:	07 fc       	sbrc	r0, 7
    dc2c:	05 d0       	rcall	.+10     	; 0xdc38 <__divmodhi4_neg2>
    dc2e:	3e f4       	brtc	.+14     	; 0xdc3e <__divmodhi4_exit>

0000dc30 <__divmodhi4_neg1>:
    dc30:	90 95       	com	r25
    dc32:	81 95       	neg	r24
    dc34:	9f 4f       	sbci	r25, 0xFF	; 255
    dc36:	08 95       	ret

0000dc38 <__divmodhi4_neg2>:
    dc38:	70 95       	com	r23
    dc3a:	61 95       	neg	r22
    dc3c:	7f 4f       	sbci	r23, 0xFF	; 255

0000dc3e <__divmodhi4_exit>:
    dc3e:	08 95       	ret

0000dc40 <__subsf3>:
    dc40:	50 58       	subi	r21, 0x80	; 128

0000dc42 <__addsf3>:
    dc42:	bb 27       	eor	r27, r27
    dc44:	aa 27       	eor	r26, r26
    dc46:	0e d0       	rcall	.+28     	; 0xdc64 <__addsf3x>
    dc48:	75 c1       	rjmp	.+746    	; 0xdf34 <__fp_round>
    dc4a:	66 d1       	rcall	.+716    	; 0xdf18 <__fp_pscA>
    dc4c:	30 f0       	brcs	.+12     	; 0xdc5a <__addsf3+0x18>
    dc4e:	6b d1       	rcall	.+726    	; 0xdf26 <__fp_pscB>
    dc50:	20 f0       	brcs	.+8      	; 0xdc5a <__addsf3+0x18>
    dc52:	31 f4       	brne	.+12     	; 0xdc60 <__addsf3+0x1e>
    dc54:	9f 3f       	cpi	r25, 0xFF	; 255
    dc56:	11 f4       	brne	.+4      	; 0xdc5c <__addsf3+0x1a>
    dc58:	1e f4       	brtc	.+6      	; 0xdc60 <__addsf3+0x1e>
    dc5a:	5b c1       	rjmp	.+694    	; 0xdf12 <__fp_nan>
    dc5c:	0e f4       	brtc	.+2      	; 0xdc60 <__addsf3+0x1e>
    dc5e:	e0 95       	com	r30
    dc60:	e7 fb       	bst	r30, 7
    dc62:	51 c1       	rjmp	.+674    	; 0xdf06 <__fp_inf>

0000dc64 <__addsf3x>:
    dc64:	e9 2f       	mov	r30, r25
    dc66:	77 d1       	rcall	.+750    	; 0xdf56 <__fp_split3>
    dc68:	80 f3       	brcs	.-32     	; 0xdc4a <__addsf3+0x8>
    dc6a:	ba 17       	cp	r27, r26
    dc6c:	62 07       	cpc	r22, r18
    dc6e:	73 07       	cpc	r23, r19
    dc70:	84 07       	cpc	r24, r20
    dc72:	95 07       	cpc	r25, r21
    dc74:	18 f0       	brcs	.+6      	; 0xdc7c <__addsf3x+0x18>
    dc76:	71 f4       	brne	.+28     	; 0xdc94 <__addsf3x+0x30>
    dc78:	9e f5       	brtc	.+102    	; 0xdce0 <__addsf3x+0x7c>
    dc7a:	8f c1       	rjmp	.+798    	; 0xdf9a <__fp_zero>
    dc7c:	0e f4       	brtc	.+2      	; 0xdc80 <__addsf3x+0x1c>
    dc7e:	e0 95       	com	r30
    dc80:	0b 2e       	mov	r0, r27
    dc82:	ba 2f       	mov	r27, r26
    dc84:	a0 2d       	mov	r26, r0
    dc86:	0b 01       	movw	r0, r22
    dc88:	b9 01       	movw	r22, r18
    dc8a:	90 01       	movw	r18, r0
    dc8c:	0c 01       	movw	r0, r24
    dc8e:	ca 01       	movw	r24, r20
    dc90:	a0 01       	movw	r20, r0
    dc92:	11 24       	eor	r1, r1
    dc94:	ff 27       	eor	r31, r31
    dc96:	59 1b       	sub	r21, r25
    dc98:	99 f0       	breq	.+38     	; 0xdcc0 <__addsf3x+0x5c>
    dc9a:	59 3f       	cpi	r21, 0xF9	; 249
    dc9c:	50 f4       	brcc	.+20     	; 0xdcb2 <__addsf3x+0x4e>
    dc9e:	50 3e       	cpi	r21, 0xE0	; 224
    dca0:	68 f1       	brcs	.+90     	; 0xdcfc <__addsf3x+0x98>
    dca2:	1a 16       	cp	r1, r26
    dca4:	f0 40       	sbci	r31, 0x00	; 0
    dca6:	a2 2f       	mov	r26, r18
    dca8:	23 2f       	mov	r18, r19
    dcaa:	34 2f       	mov	r19, r20
    dcac:	44 27       	eor	r20, r20
    dcae:	58 5f       	subi	r21, 0xF8	; 248
    dcb0:	f3 cf       	rjmp	.-26     	; 0xdc98 <__addsf3x+0x34>
    dcb2:	46 95       	lsr	r20
    dcb4:	37 95       	ror	r19
    dcb6:	27 95       	ror	r18
    dcb8:	a7 95       	ror	r26
    dcba:	f0 40       	sbci	r31, 0x00	; 0
    dcbc:	53 95       	inc	r21
    dcbe:	c9 f7       	brne	.-14     	; 0xdcb2 <__addsf3x+0x4e>
    dcc0:	7e f4       	brtc	.+30     	; 0xdce0 <__addsf3x+0x7c>
    dcc2:	1f 16       	cp	r1, r31
    dcc4:	ba 0b       	sbc	r27, r26
    dcc6:	62 0b       	sbc	r22, r18
    dcc8:	73 0b       	sbc	r23, r19
    dcca:	84 0b       	sbc	r24, r20
    dccc:	ba f0       	brmi	.+46     	; 0xdcfc <__addsf3x+0x98>
    dcce:	91 50       	subi	r25, 0x01	; 1
    dcd0:	a1 f0       	breq	.+40     	; 0xdcfa <__addsf3x+0x96>
    dcd2:	ff 0f       	add	r31, r31
    dcd4:	bb 1f       	adc	r27, r27
    dcd6:	66 1f       	adc	r22, r22
    dcd8:	77 1f       	adc	r23, r23
    dcda:	88 1f       	adc	r24, r24
    dcdc:	c2 f7       	brpl	.-16     	; 0xdcce <__addsf3x+0x6a>
    dcde:	0e c0       	rjmp	.+28     	; 0xdcfc <__addsf3x+0x98>
    dce0:	ba 0f       	add	r27, r26
    dce2:	62 1f       	adc	r22, r18
    dce4:	73 1f       	adc	r23, r19
    dce6:	84 1f       	adc	r24, r20
    dce8:	48 f4       	brcc	.+18     	; 0xdcfc <__addsf3x+0x98>
    dcea:	87 95       	ror	r24
    dcec:	77 95       	ror	r23
    dcee:	67 95       	ror	r22
    dcf0:	b7 95       	ror	r27
    dcf2:	f7 95       	ror	r31
    dcf4:	9e 3f       	cpi	r25, 0xFE	; 254
    dcf6:	08 f0       	brcs	.+2      	; 0xdcfa <__addsf3x+0x96>
    dcf8:	b3 cf       	rjmp	.-154    	; 0xdc60 <__addsf3+0x1e>
    dcfa:	93 95       	inc	r25
    dcfc:	88 0f       	add	r24, r24
    dcfe:	08 f0       	brcs	.+2      	; 0xdd02 <__addsf3x+0x9e>
    dd00:	99 27       	eor	r25, r25
    dd02:	ee 0f       	add	r30, r30
    dd04:	97 95       	ror	r25
    dd06:	87 95       	ror	r24
    dd08:	08 95       	ret

0000dd0a <__cmpsf2>:
    dd0a:	d9 d0       	rcall	.+434    	; 0xdebe <__fp_cmp>
    dd0c:	08 f4       	brcc	.+2      	; 0xdd10 <__cmpsf2+0x6>
    dd0e:	81 e0       	ldi	r24, 0x01	; 1
    dd10:	08 95       	ret

0000dd12 <__divsf3>:
    dd12:	0c d0       	rcall	.+24     	; 0xdd2c <__divsf3x>
    dd14:	0f c1       	rjmp	.+542    	; 0xdf34 <__fp_round>
    dd16:	07 d1       	rcall	.+526    	; 0xdf26 <__fp_pscB>
    dd18:	40 f0       	brcs	.+16     	; 0xdd2a <__divsf3+0x18>
    dd1a:	fe d0       	rcall	.+508    	; 0xdf18 <__fp_pscA>
    dd1c:	30 f0       	brcs	.+12     	; 0xdd2a <__divsf3+0x18>
    dd1e:	21 f4       	brne	.+8      	; 0xdd28 <__divsf3+0x16>
    dd20:	5f 3f       	cpi	r21, 0xFF	; 255
    dd22:	19 f0       	breq	.+6      	; 0xdd2a <__divsf3+0x18>
    dd24:	f0 c0       	rjmp	.+480    	; 0xdf06 <__fp_inf>
    dd26:	51 11       	cpse	r21, r1
    dd28:	39 c1       	rjmp	.+626    	; 0xdf9c <__fp_szero>
    dd2a:	f3 c0       	rjmp	.+486    	; 0xdf12 <__fp_nan>

0000dd2c <__divsf3x>:
    dd2c:	14 d1       	rcall	.+552    	; 0xdf56 <__fp_split3>
    dd2e:	98 f3       	brcs	.-26     	; 0xdd16 <__divsf3+0x4>

0000dd30 <__divsf3_pse>:
    dd30:	99 23       	and	r25, r25
    dd32:	c9 f3       	breq	.-14     	; 0xdd26 <__divsf3+0x14>
    dd34:	55 23       	and	r21, r21
    dd36:	b1 f3       	breq	.-20     	; 0xdd24 <__divsf3+0x12>
    dd38:	95 1b       	sub	r25, r21
    dd3a:	55 0b       	sbc	r21, r21
    dd3c:	bb 27       	eor	r27, r27
    dd3e:	aa 27       	eor	r26, r26
    dd40:	62 17       	cp	r22, r18
    dd42:	73 07       	cpc	r23, r19
    dd44:	84 07       	cpc	r24, r20
    dd46:	38 f0       	brcs	.+14     	; 0xdd56 <__divsf3_pse+0x26>
    dd48:	9f 5f       	subi	r25, 0xFF	; 255
    dd4a:	5f 4f       	sbci	r21, 0xFF	; 255
    dd4c:	22 0f       	add	r18, r18
    dd4e:	33 1f       	adc	r19, r19
    dd50:	44 1f       	adc	r20, r20
    dd52:	aa 1f       	adc	r26, r26
    dd54:	a9 f3       	breq	.-22     	; 0xdd40 <__divsf3_pse+0x10>
    dd56:	33 d0       	rcall	.+102    	; 0xddbe <__divsf3_pse+0x8e>
    dd58:	0e 2e       	mov	r0, r30
    dd5a:	3a f0       	brmi	.+14     	; 0xdd6a <__divsf3_pse+0x3a>
    dd5c:	e0 e8       	ldi	r30, 0x80	; 128
    dd5e:	30 d0       	rcall	.+96     	; 0xddc0 <__divsf3_pse+0x90>
    dd60:	91 50       	subi	r25, 0x01	; 1
    dd62:	50 40       	sbci	r21, 0x00	; 0
    dd64:	e6 95       	lsr	r30
    dd66:	00 1c       	adc	r0, r0
    dd68:	ca f7       	brpl	.-14     	; 0xdd5c <__divsf3_pse+0x2c>
    dd6a:	29 d0       	rcall	.+82     	; 0xddbe <__divsf3_pse+0x8e>
    dd6c:	fe 2f       	mov	r31, r30
    dd6e:	27 d0       	rcall	.+78     	; 0xddbe <__divsf3_pse+0x8e>
    dd70:	66 0f       	add	r22, r22
    dd72:	77 1f       	adc	r23, r23
    dd74:	88 1f       	adc	r24, r24
    dd76:	bb 1f       	adc	r27, r27
    dd78:	26 17       	cp	r18, r22
    dd7a:	37 07       	cpc	r19, r23
    dd7c:	48 07       	cpc	r20, r24
    dd7e:	ab 07       	cpc	r26, r27
    dd80:	b0 e8       	ldi	r27, 0x80	; 128
    dd82:	09 f0       	breq	.+2      	; 0xdd86 <__divsf3_pse+0x56>
    dd84:	bb 0b       	sbc	r27, r27
    dd86:	80 2d       	mov	r24, r0
    dd88:	bf 01       	movw	r22, r30
    dd8a:	ff 27       	eor	r31, r31
    dd8c:	93 58       	subi	r25, 0x83	; 131
    dd8e:	5f 4f       	sbci	r21, 0xFF	; 255
    dd90:	2a f0       	brmi	.+10     	; 0xdd9c <__divsf3_pse+0x6c>
    dd92:	9e 3f       	cpi	r25, 0xFE	; 254
    dd94:	51 05       	cpc	r21, r1
    dd96:	68 f0       	brcs	.+26     	; 0xddb2 <__divsf3_pse+0x82>
    dd98:	b6 c0       	rjmp	.+364    	; 0xdf06 <__fp_inf>
    dd9a:	00 c1       	rjmp	.+512    	; 0xdf9c <__fp_szero>
    dd9c:	5f 3f       	cpi	r21, 0xFF	; 255
    dd9e:	ec f3       	brlt	.-6      	; 0xdd9a <__divsf3_pse+0x6a>
    dda0:	98 3e       	cpi	r25, 0xE8	; 232
    dda2:	dc f3       	brlt	.-10     	; 0xdd9a <__divsf3_pse+0x6a>
    dda4:	86 95       	lsr	r24
    dda6:	77 95       	ror	r23
    dda8:	67 95       	ror	r22
    ddaa:	b7 95       	ror	r27
    ddac:	f7 95       	ror	r31
    ddae:	9f 5f       	subi	r25, 0xFF	; 255
    ddb0:	c9 f7       	brne	.-14     	; 0xdda4 <__divsf3_pse+0x74>
    ddb2:	88 0f       	add	r24, r24
    ddb4:	91 1d       	adc	r25, r1
    ddb6:	96 95       	lsr	r25
    ddb8:	87 95       	ror	r24
    ddba:	97 f9       	bld	r25, 7
    ddbc:	08 95       	ret
    ddbe:	e1 e0       	ldi	r30, 0x01	; 1
    ddc0:	66 0f       	add	r22, r22
    ddc2:	77 1f       	adc	r23, r23
    ddc4:	88 1f       	adc	r24, r24
    ddc6:	bb 1f       	adc	r27, r27
    ddc8:	62 17       	cp	r22, r18
    ddca:	73 07       	cpc	r23, r19
    ddcc:	84 07       	cpc	r24, r20
    ddce:	ba 07       	cpc	r27, r26
    ddd0:	20 f0       	brcs	.+8      	; 0xddda <__divsf3_pse+0xaa>
    ddd2:	62 1b       	sub	r22, r18
    ddd4:	73 0b       	sbc	r23, r19
    ddd6:	84 0b       	sbc	r24, r20
    ddd8:	ba 0b       	sbc	r27, r26
    ddda:	ee 1f       	adc	r30, r30
    dddc:	88 f7       	brcc	.-30     	; 0xddc0 <__divsf3_pse+0x90>
    ddde:	e0 95       	com	r30
    dde0:	08 95       	ret

0000dde2 <__fixsfsi>:
    dde2:	04 d0       	rcall	.+8      	; 0xddec <__fixunssfsi>
    dde4:	68 94       	set
    dde6:	b1 11       	cpse	r27, r1
    dde8:	d9 c0       	rjmp	.+434    	; 0xdf9c <__fp_szero>
    ddea:	08 95       	ret

0000ddec <__fixunssfsi>:
    ddec:	bc d0       	rcall	.+376    	; 0xdf66 <__fp_splitA>
    ddee:	88 f0       	brcs	.+34     	; 0xde12 <__fixunssfsi+0x26>
    ddf0:	9f 57       	subi	r25, 0x7F	; 127
    ddf2:	90 f0       	brcs	.+36     	; 0xde18 <__fixunssfsi+0x2c>
    ddf4:	b9 2f       	mov	r27, r25
    ddf6:	99 27       	eor	r25, r25
    ddf8:	b7 51       	subi	r27, 0x17	; 23
    ddfa:	a0 f0       	brcs	.+40     	; 0xde24 <__fixunssfsi+0x38>
    ddfc:	d1 f0       	breq	.+52     	; 0xde32 <__fixunssfsi+0x46>
    ddfe:	66 0f       	add	r22, r22
    de00:	77 1f       	adc	r23, r23
    de02:	88 1f       	adc	r24, r24
    de04:	99 1f       	adc	r25, r25
    de06:	1a f0       	brmi	.+6      	; 0xde0e <__fixunssfsi+0x22>
    de08:	ba 95       	dec	r27
    de0a:	c9 f7       	brne	.-14     	; 0xddfe <__fixunssfsi+0x12>
    de0c:	12 c0       	rjmp	.+36     	; 0xde32 <__fixunssfsi+0x46>
    de0e:	b1 30       	cpi	r27, 0x01	; 1
    de10:	81 f0       	breq	.+32     	; 0xde32 <__fixunssfsi+0x46>
    de12:	c3 d0       	rcall	.+390    	; 0xdf9a <__fp_zero>
    de14:	b1 e0       	ldi	r27, 0x01	; 1
    de16:	08 95       	ret
    de18:	c0 c0       	rjmp	.+384    	; 0xdf9a <__fp_zero>
    de1a:	67 2f       	mov	r22, r23
    de1c:	78 2f       	mov	r23, r24
    de1e:	88 27       	eor	r24, r24
    de20:	b8 5f       	subi	r27, 0xF8	; 248
    de22:	39 f0       	breq	.+14     	; 0xde32 <__fixunssfsi+0x46>
    de24:	b9 3f       	cpi	r27, 0xF9	; 249
    de26:	cc f3       	brlt	.-14     	; 0xde1a <__fixunssfsi+0x2e>
    de28:	86 95       	lsr	r24
    de2a:	77 95       	ror	r23
    de2c:	67 95       	ror	r22
    de2e:	b3 95       	inc	r27
    de30:	d9 f7       	brne	.-10     	; 0xde28 <__fixunssfsi+0x3c>
    de32:	3e f4       	brtc	.+14     	; 0xde42 <__fixunssfsi+0x56>
    de34:	90 95       	com	r25
    de36:	80 95       	com	r24
    de38:	70 95       	com	r23
    de3a:	61 95       	neg	r22
    de3c:	7f 4f       	sbci	r23, 0xFF	; 255
    de3e:	8f 4f       	sbci	r24, 0xFF	; 255
    de40:	9f 4f       	sbci	r25, 0xFF	; 255
    de42:	08 95       	ret

0000de44 <__floatunsisf>:
    de44:	e8 94       	clt
    de46:	09 c0       	rjmp	.+18     	; 0xde5a <__floatsisf+0x12>

0000de48 <__floatsisf>:
    de48:	97 fb       	bst	r25, 7
    de4a:	3e f4       	brtc	.+14     	; 0xde5a <__floatsisf+0x12>
    de4c:	90 95       	com	r25
    de4e:	80 95       	com	r24
    de50:	70 95       	com	r23
    de52:	61 95       	neg	r22
    de54:	7f 4f       	sbci	r23, 0xFF	; 255
    de56:	8f 4f       	sbci	r24, 0xFF	; 255
    de58:	9f 4f       	sbci	r25, 0xFF	; 255
    de5a:	99 23       	and	r25, r25
    de5c:	a9 f0       	breq	.+42     	; 0xde88 <__floatsisf+0x40>
    de5e:	f9 2f       	mov	r31, r25
    de60:	96 e9       	ldi	r25, 0x96	; 150
    de62:	bb 27       	eor	r27, r27
    de64:	93 95       	inc	r25
    de66:	f6 95       	lsr	r31
    de68:	87 95       	ror	r24
    de6a:	77 95       	ror	r23
    de6c:	67 95       	ror	r22
    de6e:	b7 95       	ror	r27
    de70:	f1 11       	cpse	r31, r1
    de72:	f8 cf       	rjmp	.-16     	; 0xde64 <__floatsisf+0x1c>
    de74:	fa f4       	brpl	.+62     	; 0xdeb4 <__floatsisf+0x6c>
    de76:	bb 0f       	add	r27, r27
    de78:	11 f4       	brne	.+4      	; 0xde7e <__floatsisf+0x36>
    de7a:	60 ff       	sbrs	r22, 0
    de7c:	1b c0       	rjmp	.+54     	; 0xdeb4 <__floatsisf+0x6c>
    de7e:	6f 5f       	subi	r22, 0xFF	; 255
    de80:	7f 4f       	sbci	r23, 0xFF	; 255
    de82:	8f 4f       	sbci	r24, 0xFF	; 255
    de84:	9f 4f       	sbci	r25, 0xFF	; 255
    de86:	16 c0       	rjmp	.+44     	; 0xdeb4 <__floatsisf+0x6c>
    de88:	88 23       	and	r24, r24
    de8a:	11 f0       	breq	.+4      	; 0xde90 <__floatsisf+0x48>
    de8c:	96 e9       	ldi	r25, 0x96	; 150
    de8e:	11 c0       	rjmp	.+34     	; 0xdeb2 <__floatsisf+0x6a>
    de90:	77 23       	and	r23, r23
    de92:	21 f0       	breq	.+8      	; 0xde9c <__floatsisf+0x54>
    de94:	9e e8       	ldi	r25, 0x8E	; 142
    de96:	87 2f       	mov	r24, r23
    de98:	76 2f       	mov	r23, r22
    de9a:	05 c0       	rjmp	.+10     	; 0xdea6 <__floatsisf+0x5e>
    de9c:	66 23       	and	r22, r22
    de9e:	71 f0       	breq	.+28     	; 0xdebc <__floatsisf+0x74>
    dea0:	96 e8       	ldi	r25, 0x86	; 134
    dea2:	86 2f       	mov	r24, r22
    dea4:	70 e0       	ldi	r23, 0x00	; 0
    dea6:	60 e0       	ldi	r22, 0x00	; 0
    dea8:	2a f0       	brmi	.+10     	; 0xdeb4 <__floatsisf+0x6c>
    deaa:	9a 95       	dec	r25
    deac:	66 0f       	add	r22, r22
    deae:	77 1f       	adc	r23, r23
    deb0:	88 1f       	adc	r24, r24
    deb2:	da f7       	brpl	.-10     	; 0xdeaa <__floatsisf+0x62>
    deb4:	88 0f       	add	r24, r24
    deb6:	96 95       	lsr	r25
    deb8:	87 95       	ror	r24
    deba:	97 f9       	bld	r25, 7
    debc:	08 95       	ret

0000debe <__fp_cmp>:
    debe:	99 0f       	add	r25, r25
    dec0:	00 08       	sbc	r0, r0
    dec2:	55 0f       	add	r21, r21
    dec4:	aa 0b       	sbc	r26, r26
    dec6:	e0 e8       	ldi	r30, 0x80	; 128
    dec8:	fe ef       	ldi	r31, 0xFE	; 254
    deca:	16 16       	cp	r1, r22
    decc:	17 06       	cpc	r1, r23
    dece:	e8 07       	cpc	r30, r24
    ded0:	f9 07       	cpc	r31, r25
    ded2:	c0 f0       	brcs	.+48     	; 0xdf04 <__fp_cmp+0x46>
    ded4:	12 16       	cp	r1, r18
    ded6:	13 06       	cpc	r1, r19
    ded8:	e4 07       	cpc	r30, r20
    deda:	f5 07       	cpc	r31, r21
    dedc:	98 f0       	brcs	.+38     	; 0xdf04 <__fp_cmp+0x46>
    dede:	62 1b       	sub	r22, r18
    dee0:	73 0b       	sbc	r23, r19
    dee2:	84 0b       	sbc	r24, r20
    dee4:	95 0b       	sbc	r25, r21
    dee6:	39 f4       	brne	.+14     	; 0xdef6 <__fp_cmp+0x38>
    dee8:	0a 26       	eor	r0, r26
    deea:	61 f0       	breq	.+24     	; 0xdf04 <__fp_cmp+0x46>
    deec:	23 2b       	or	r18, r19
    deee:	24 2b       	or	r18, r20
    def0:	25 2b       	or	r18, r21
    def2:	21 f4       	brne	.+8      	; 0xdefc <__fp_cmp+0x3e>
    def4:	08 95       	ret
    def6:	0a 26       	eor	r0, r26
    def8:	09 f4       	brne	.+2      	; 0xdefc <__fp_cmp+0x3e>
    defa:	a1 40       	sbci	r26, 0x01	; 1
    defc:	a6 95       	lsr	r26
    defe:	8f ef       	ldi	r24, 0xFF	; 255
    df00:	81 1d       	adc	r24, r1
    df02:	81 1d       	adc	r24, r1
    df04:	08 95       	ret

0000df06 <__fp_inf>:
    df06:	97 f9       	bld	r25, 7
    df08:	9f 67       	ori	r25, 0x7F	; 127
    df0a:	80 e8       	ldi	r24, 0x80	; 128
    df0c:	70 e0       	ldi	r23, 0x00	; 0
    df0e:	60 e0       	ldi	r22, 0x00	; 0
    df10:	08 95       	ret

0000df12 <__fp_nan>:
    df12:	9f ef       	ldi	r25, 0xFF	; 255
    df14:	80 ec       	ldi	r24, 0xC0	; 192
    df16:	08 95       	ret

0000df18 <__fp_pscA>:
    df18:	00 24       	eor	r0, r0
    df1a:	0a 94       	dec	r0
    df1c:	16 16       	cp	r1, r22
    df1e:	17 06       	cpc	r1, r23
    df20:	18 06       	cpc	r1, r24
    df22:	09 06       	cpc	r0, r25
    df24:	08 95       	ret

0000df26 <__fp_pscB>:
    df26:	00 24       	eor	r0, r0
    df28:	0a 94       	dec	r0
    df2a:	12 16       	cp	r1, r18
    df2c:	13 06       	cpc	r1, r19
    df2e:	14 06       	cpc	r1, r20
    df30:	05 06       	cpc	r0, r21
    df32:	08 95       	ret

0000df34 <__fp_round>:
    df34:	09 2e       	mov	r0, r25
    df36:	03 94       	inc	r0
    df38:	00 0c       	add	r0, r0
    df3a:	11 f4       	brne	.+4      	; 0xdf40 <__fp_round+0xc>
    df3c:	88 23       	and	r24, r24
    df3e:	52 f0       	brmi	.+20     	; 0xdf54 <__fp_round+0x20>
    df40:	bb 0f       	add	r27, r27
    df42:	40 f4       	brcc	.+16     	; 0xdf54 <__fp_round+0x20>
    df44:	bf 2b       	or	r27, r31
    df46:	11 f4       	brne	.+4      	; 0xdf4c <__fp_round+0x18>
    df48:	60 ff       	sbrs	r22, 0
    df4a:	04 c0       	rjmp	.+8      	; 0xdf54 <__fp_round+0x20>
    df4c:	6f 5f       	subi	r22, 0xFF	; 255
    df4e:	7f 4f       	sbci	r23, 0xFF	; 255
    df50:	8f 4f       	sbci	r24, 0xFF	; 255
    df52:	9f 4f       	sbci	r25, 0xFF	; 255
    df54:	08 95       	ret

0000df56 <__fp_split3>:
    df56:	57 fd       	sbrc	r21, 7
    df58:	90 58       	subi	r25, 0x80	; 128
    df5a:	44 0f       	add	r20, r20
    df5c:	55 1f       	adc	r21, r21
    df5e:	59 f0       	breq	.+22     	; 0xdf76 <__fp_splitA+0x10>
    df60:	5f 3f       	cpi	r21, 0xFF	; 255
    df62:	71 f0       	breq	.+28     	; 0xdf80 <__fp_splitA+0x1a>
    df64:	47 95       	ror	r20

0000df66 <__fp_splitA>:
    df66:	88 0f       	add	r24, r24
    df68:	97 fb       	bst	r25, 7
    df6a:	99 1f       	adc	r25, r25
    df6c:	61 f0       	breq	.+24     	; 0xdf86 <__fp_splitA+0x20>
    df6e:	9f 3f       	cpi	r25, 0xFF	; 255
    df70:	79 f0       	breq	.+30     	; 0xdf90 <__fp_splitA+0x2a>
    df72:	87 95       	ror	r24
    df74:	08 95       	ret
    df76:	12 16       	cp	r1, r18
    df78:	13 06       	cpc	r1, r19
    df7a:	14 06       	cpc	r1, r20
    df7c:	55 1f       	adc	r21, r21
    df7e:	f2 cf       	rjmp	.-28     	; 0xdf64 <__fp_split3+0xe>
    df80:	46 95       	lsr	r20
    df82:	f1 df       	rcall	.-30     	; 0xdf66 <__fp_splitA>
    df84:	08 c0       	rjmp	.+16     	; 0xdf96 <__fp_splitA+0x30>
    df86:	16 16       	cp	r1, r22
    df88:	17 06       	cpc	r1, r23
    df8a:	18 06       	cpc	r1, r24
    df8c:	99 1f       	adc	r25, r25
    df8e:	f1 cf       	rjmp	.-30     	; 0xdf72 <__fp_splitA+0xc>
    df90:	86 95       	lsr	r24
    df92:	71 05       	cpc	r23, r1
    df94:	61 05       	cpc	r22, r1
    df96:	08 94       	sec
    df98:	08 95       	ret

0000df9a <__fp_zero>:
    df9a:	e8 94       	clt

0000df9c <__fp_szero>:
    df9c:	bb 27       	eor	r27, r27
    df9e:	66 27       	eor	r22, r22
    dfa0:	77 27       	eor	r23, r23
    dfa2:	cb 01       	movw	r24, r22
    dfa4:	97 f9       	bld	r25, 7
    dfa6:	08 95       	ret

0000dfa8 <__gesf2>:
    dfa8:	8a df       	rcall	.-236    	; 0xdebe <__fp_cmp>
    dfaa:	08 f4       	brcc	.+2      	; 0xdfae <__gesf2+0x6>
    dfac:	8f ef       	ldi	r24, 0xFF	; 255
    dfae:	08 95       	ret

0000dfb0 <__mulsf3>:
    dfb0:	0b d0       	rcall	.+22     	; 0xdfc8 <__mulsf3x>
    dfb2:	c0 cf       	rjmp	.-128    	; 0xdf34 <__fp_round>
    dfb4:	b1 df       	rcall	.-158    	; 0xdf18 <__fp_pscA>
    dfb6:	28 f0       	brcs	.+10     	; 0xdfc2 <__mulsf3+0x12>
    dfb8:	b6 df       	rcall	.-148    	; 0xdf26 <__fp_pscB>
    dfba:	18 f0       	brcs	.+6      	; 0xdfc2 <__mulsf3+0x12>
    dfbc:	95 23       	and	r25, r21
    dfbe:	09 f0       	breq	.+2      	; 0xdfc2 <__mulsf3+0x12>
    dfc0:	a2 cf       	rjmp	.-188    	; 0xdf06 <__fp_inf>
    dfc2:	a7 cf       	rjmp	.-178    	; 0xdf12 <__fp_nan>
    dfc4:	11 24       	eor	r1, r1
    dfc6:	ea cf       	rjmp	.-44     	; 0xdf9c <__fp_szero>

0000dfc8 <__mulsf3x>:
    dfc8:	c6 df       	rcall	.-116    	; 0xdf56 <__fp_split3>
    dfca:	a0 f3       	brcs	.-24     	; 0xdfb4 <__mulsf3+0x4>

0000dfcc <__mulsf3_pse>:
    dfcc:	95 9f       	mul	r25, r21
    dfce:	d1 f3       	breq	.-12     	; 0xdfc4 <__mulsf3+0x14>
    dfd0:	95 0f       	add	r25, r21
    dfd2:	50 e0       	ldi	r21, 0x00	; 0
    dfd4:	55 1f       	adc	r21, r21
    dfd6:	62 9f       	mul	r22, r18
    dfd8:	f0 01       	movw	r30, r0
    dfda:	72 9f       	mul	r23, r18
    dfdc:	bb 27       	eor	r27, r27
    dfde:	f0 0d       	add	r31, r0
    dfe0:	b1 1d       	adc	r27, r1
    dfe2:	63 9f       	mul	r22, r19
    dfe4:	aa 27       	eor	r26, r26
    dfe6:	f0 0d       	add	r31, r0
    dfe8:	b1 1d       	adc	r27, r1
    dfea:	aa 1f       	adc	r26, r26
    dfec:	64 9f       	mul	r22, r20
    dfee:	66 27       	eor	r22, r22
    dff0:	b0 0d       	add	r27, r0
    dff2:	a1 1d       	adc	r26, r1
    dff4:	66 1f       	adc	r22, r22
    dff6:	82 9f       	mul	r24, r18
    dff8:	22 27       	eor	r18, r18
    dffa:	b0 0d       	add	r27, r0
    dffc:	a1 1d       	adc	r26, r1
    dffe:	62 1f       	adc	r22, r18
    e000:	73 9f       	mul	r23, r19
    e002:	b0 0d       	add	r27, r0
    e004:	a1 1d       	adc	r26, r1
    e006:	62 1f       	adc	r22, r18
    e008:	83 9f       	mul	r24, r19
    e00a:	a0 0d       	add	r26, r0
    e00c:	61 1d       	adc	r22, r1
    e00e:	22 1f       	adc	r18, r18
    e010:	74 9f       	mul	r23, r20
    e012:	33 27       	eor	r19, r19
    e014:	a0 0d       	add	r26, r0
    e016:	61 1d       	adc	r22, r1
    e018:	23 1f       	adc	r18, r19
    e01a:	84 9f       	mul	r24, r20
    e01c:	60 0d       	add	r22, r0
    e01e:	21 1d       	adc	r18, r1
    e020:	82 2f       	mov	r24, r18
    e022:	76 2f       	mov	r23, r22
    e024:	6a 2f       	mov	r22, r26
    e026:	11 24       	eor	r1, r1
    e028:	9f 57       	subi	r25, 0x7F	; 127
    e02a:	50 40       	sbci	r21, 0x00	; 0
    e02c:	8a f0       	brmi	.+34     	; 0xe050 <__mulsf3_pse+0x84>
    e02e:	e1 f0       	breq	.+56     	; 0xe068 <__mulsf3_pse+0x9c>
    e030:	88 23       	and	r24, r24
    e032:	4a f0       	brmi	.+18     	; 0xe046 <__mulsf3_pse+0x7a>
    e034:	ee 0f       	add	r30, r30
    e036:	ff 1f       	adc	r31, r31
    e038:	bb 1f       	adc	r27, r27
    e03a:	66 1f       	adc	r22, r22
    e03c:	77 1f       	adc	r23, r23
    e03e:	88 1f       	adc	r24, r24
    e040:	91 50       	subi	r25, 0x01	; 1
    e042:	50 40       	sbci	r21, 0x00	; 0
    e044:	a9 f7       	brne	.-22     	; 0xe030 <__mulsf3_pse+0x64>
    e046:	9e 3f       	cpi	r25, 0xFE	; 254
    e048:	51 05       	cpc	r21, r1
    e04a:	70 f0       	brcs	.+28     	; 0xe068 <__mulsf3_pse+0x9c>
    e04c:	5c cf       	rjmp	.-328    	; 0xdf06 <__fp_inf>
    e04e:	a6 cf       	rjmp	.-180    	; 0xdf9c <__fp_szero>
    e050:	5f 3f       	cpi	r21, 0xFF	; 255
    e052:	ec f3       	brlt	.-6      	; 0xe04e <__mulsf3_pse+0x82>
    e054:	98 3e       	cpi	r25, 0xE8	; 232
    e056:	dc f3       	brlt	.-10     	; 0xe04e <__mulsf3_pse+0x82>
    e058:	86 95       	lsr	r24
    e05a:	77 95       	ror	r23
    e05c:	67 95       	ror	r22
    e05e:	b7 95       	ror	r27
    e060:	f7 95       	ror	r31
    e062:	e7 95       	ror	r30
    e064:	9f 5f       	subi	r25, 0xFF	; 255
    e066:	c1 f7       	brne	.-16     	; 0xe058 <__mulsf3_pse+0x8c>
    e068:	fe 2b       	or	r31, r30
    e06a:	88 0f       	add	r24, r24
    e06c:	91 1d       	adc	r25, r1
    e06e:	96 95       	lsr	r25
    e070:	87 95       	ror	r24
    e072:	97 f9       	bld	r25, 7
    e074:	08 95       	ret

0000e076 <memcpy_P>:
    e076:	fb 01       	movw	r30, r22
    e078:	dc 01       	movw	r26, r24
    e07a:	02 c0       	rjmp	.+4      	; 0xe080 <memcpy_P+0xa>
    e07c:	05 90       	lpm	r0, Z+
    e07e:	0d 92       	st	X+, r0
    e080:	41 50       	subi	r20, 0x01	; 1
    e082:	50 40       	sbci	r21, 0x00	; 0
    e084:	d8 f7       	brcc	.-10     	; 0xe07c <memcpy_P+0x6>
    e086:	08 95       	ret

0000e088 <strnlen_P>:
    e088:	fc 01       	movw	r30, r24
    e08a:	05 90       	lpm	r0, Z+
    e08c:	61 50       	subi	r22, 0x01	; 1
    e08e:	70 40       	sbci	r23, 0x00	; 0
    e090:	01 10       	cpse	r0, r1
    e092:	d8 f7       	brcc	.-10     	; 0xe08a <strnlen_P+0x2>
    e094:	80 95       	com	r24
    e096:	90 95       	com	r25
    e098:	8e 0f       	add	r24, r30
    e09a:	9f 1f       	adc	r25, r31
    e09c:	08 95       	ret

0000e09e <_exit>:
    e09e:	f8 94       	cli

0000e0a0 <__stop_program>:
    e0a0:	ff cf       	rjmp	.-2      	; 0xe0a0 <__stop_program>
