
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  0000e006  0000e106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000e006  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000f8b  00800104  00800104  0000e124  2**5
                  ALLOC
  3 .stab         0000057c  00000000  00000000  0000e10c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000256  00000000  00000000  0000e688  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000e8de  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000006e8  00000000  00000000  0000e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000a3c3  00000000  00000000  0000efd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015bb  00000000  00000000  0001939b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00002395  00000000  00000000  0001a956  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001578  00000000  00000000  0001ccec  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001ecb  00000000  00000000  0001e264  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00008d61  00000000  00000000  0002012f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000007b8  00000000  00000000  00028e90  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 53 3f 	jmp	0x7ea6	; 0x7ea6 <__ctors_end>
       4:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
       8:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
       c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      10:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      14:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      18:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      1c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      20:	0c 94 3d 44 	jmp	0x887a	; 0x887a <__vector_8>
      24:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      28:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      2c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      30:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      34:	0c 94 0c 42 	jmp	0x8418	; 0x8418 <__vector_13>
      38:	0c 94 4b 42 	jmp	0x8496	; 0x8496 <__vector_14>
      3c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      40:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      44:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      48:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      4c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      50:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      54:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      58:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      5c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      60:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      64:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      68:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>
      6c:	0c 94 bc 3f 	jmp	0x7f78	; 0x7f78 <__bad_interrupt>

00000070 <__trampolines_end>:
      70:	81 00       	.word	0x0081	; ????
      72:	45 00       	.word	0x0045	; ????
      74:	27 ff       	sbrs	r18, 7
      76:	24 ff       	sbrs	r18, 4
      78:	2a 90       	ld	r2, -Y
      7a:	2b 1c       	adc	r2, r11
      7c:	21 0c       	add	r2, r1
      7e:	22 fb       	bst	r18, 2
      80:	85 00       	.word	0x0085	; ????
      82:	84 00       	.word	0x0084	; ????
      84:	89 03       	fmulsu	r16, r17
      86:	88 8d       	ldd	r24, Y+24	; 0x18
      88:	81 09       	sbc	r24, r1
      8a:	6f 02       	muls	r22, r31
      8c:	44 42       	sbci	r20, 0x24	; 36
      8e:	47 00       	.word	0x0047	; ????
      90:	45 01       	movw	r8, r10
      92:	b0 83       	st	Z, r27
      94:	b3 00       	.word	0x00b3	; ????
      96:	b1 01       	movw	r22, r2
      98:	25 11       	cpse	r18, r5
      9a:	8a 1d       	adc	r24, r10
      9c:	8b 03       	fmulsu	r16, r19

0000009e <eeprom_format_table>:
      9e:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000be <patchCommands>:
      be:	e6 45 e9 45 45 46 49 46 50 46 f1 45 f6 45 fb 45     .E.EEFIFPF.E.E.E
      ce:	58 46 fe 45 01 46 04 46 3f 46 42 46 68 46           XF.E.F.F?FBFhF

000000dc <fader>:
      dc:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000e8 <strCredits>:
      e8:	54 41 4e 4b 20 46 55 20 56 32 2e 30 20 46 4f 52     TANK FU V2.0 FOR
      f8:	20 55 5a 45 42 4f 58 00 00 00 00 00 50 52 4f 47      UZEBOX.....PROG
     108:	52 41 4d 4d 49 4e 47 20 41 4e 44 20 44 45 53 49     RAMMING AND DESI
     118:	47 4e 00 00 4c 41 57 52 45 4e 43 45 20 42 52 4f     GN..LAWRENCE BRO
     128:	4f 4b 53 00 23 00                                   OKS.#.

0000012e <default_scores>:
     12e:	00 01 14 0d 00 01 02 14 0e 00 02 03 14 0f 00 03     ................
     13e:	04 14 10 00 04 05 14 11 00 05 06 14 12 00           ..............

0000014c <default_handles>:
     14c:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     15c:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

0000016a <strLevels>:
     16a:	20 20 20 42 4f 4f 54 20 43 41 4d 50 20 20 20 00        BOOT CAMP   .
     17a:	20 54 48 45 20 42 52 49 43 4b 59 41 52 44 20 00      THE BRICKYARD .
     18a:	20 20 20 56 45 4c 4f 43 49 54 59 20 20 20 20 00        VELOCITY    .
     19a:	20 20 20 54 48 45 20 4d 41 5a 45 20 20 20 20 00        THE MAZE    .
     1aa:	20 20 20 52 49 43 48 4f 43 48 45 54 20 20 20 00        RICHOCHET   .
     1ba:	20 54 48 45 20 48 4f 4e 45 59 20 50 4f 54 20 00      THE HONEY POT .
     1ca:	20 20 46 4f 43 41 4c 20 50 4f 49 4e 54 20 20 00       FOCAL POINT  .
     1da:	49 54 27 53 20 4e 4f 54 20 46 41 49 52 21 20 00     IT'S NOT FAIR! .
     1ea:	20 20 4d 55 43 48 20 42 45 54 54 45 52 20 20 00       MUCH BETTER  .
     1fa:	20 20 20 54 48 45 20 43 41 4e 41 4c 20 20 20 00        THE CANAL   .
     20a:	20 20 54 48 45 20 48 41 52 42 4f 55 52 20 20 00       THE HARBOUR  .

0000021a <strPaused>:
     21a:	50 41 55 53 45 44 00                                PAUSED.

00000221 <strExit>:
     221:	42 41 49 4c 20 2d 20 58 00                          BAIL - X.

0000022a <strTotal>:
     22a:	54 4f 54 41 4c 3a 00                                TOTAL:.

00000231 <strScore>:
     231:	53 43 4f 52 45 3a 00                                SCORE:.

00000238 <strBanterClear>:
     238:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

00000247 <banter_map>:
     247:	53 55 43 48 20 46 41 49 4c 20 20 20 20 20 00 4c     SUCH FAIL     .L
     257:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 52     OL           .BR
     267:	4f 4b 45 4e 20 42 55 54 54 4f 4e 3f 00 54 52 59     OKEN BUTTON?.TRY
     277:	20 41 54 20 4c 45 41 53 54 20 20 00 54 4f 4f 20      AT LEAST  .TOO 
     287:	45 41 53 59 20 20 20 20 20 20 00 59 41 57 4e 20     EASY      .YAWN 
     297:	20 20 20 20 20 20 20 20 20 00 4e 4f 4f 42 20 20              .NOOB  
     2a7:	20 20 20 20 20 20 20 20 00 54 48 41 54 27 53 20             .THAT'S 
     2b7:	49 54 3f 20 20 20 20 00 4e 45 45 44 20 48 45 4c     IT?    .NEED HEL
     2c7:	50 3f 20 20 20 20 00 50 46 46 54 20 20 20 20 20     P?    .PFFT     
     2d7:	20 20 20 20 20 00                                        .

000002dd <strFinalScore>:
     2dd:	46 49 4e 41 4c 20 53 43 4f 52 45 00                 FINAL SCORE.

000002e9 <strBy>:
     2e9:	42 59 00                                            BY.

000002ec <strOwns>:
     2ec:	4f 57 4e 53 00                                      OWNS.

000002f1 <strChangeHandle>:
     2f1:	45 44 49 54 20 2d 20 55 50 2f 44 4f 57 4e 00        EDIT - UP/DOWN.

00000300 <strPlayer2>:
     300:	50 32 00                                            P2.

00000303 <strPlayer1>:
     303:	50 31 00                                            P1.

00000306 <strVertSep>:
     306:	3b 00                                               ;.

00000308 <strUnderline>:
     308:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

00000314 <strHandlesTitle>:
     314:	45 44 49 54 20 48 41 4e 44 4c 45 00                 EDIT HANDLE.

00000320 <strHighscores>:
     320:	54 41 4e 4b 20 52 41 4e 4b 00                       TANK RANK.

0000032a <strCopyright>:
     32a:	32 30 31 35 20 4c 41 57 52 45 4e 43 45 20 42 52     2015 LAWRENCE BR
     33a:	4f 4f 4b 53 00                                      OOKS.

0000033f <strSelectHandle>:
     33f:	53 45 4c 45 43 54 20 2d 20 53 54 41 52 54 00        SELECT - START.

0000034e <strCancelHandle>:
     34e:	43 41 4e 43 45 4c 20 2d 20 58 00                    CANCEL - X.

00000359 <strReset>:
     359:	52 45 53 45 54 20 44 45 46 41 55 4c 54 53 20 2d     RESET DEFAULTS -
     369:	20 53 4c 20 28 35 53 29 00                           SL (5S).

00000372 <strConfirmHandle>:
     372:	43 4f 4e 46 49 52 4d 20 2d 20 41 2f 53 54 41 52     CONFIRM - A/STAR
     382:	54 00                                               T.

00000384 <str2Player>:
     384:	50 4c 41 59 45 52 20 56 53 20 50 4c 41 59 45 52     PLAYER VS PLAYER
	...

00000395 <str1Player>:
     395:	50 4c 41 59 45 52 20 56 53 20 43 50 55 00           PLAYER VS CPU.

000003a3 <my_patches>:
     3a3:	02 85 13 00 00 4f 07 50 07 02 a0 0c 00 00 e3 06     .....O.P........
     3b3:	e4 06 02 59 0a 00 00 45 02 46 02 02 a8 08 00 00     ...Y...E.F......
     3c3:	af 01 b0 01 02 88 06 00 00 1e 02 1f 02 02 16 05     ................
     3d3:	00 00 70 01 71 01 02 59 0a 00 00 45 02 46 02 02     ..p.q..Y...E.F..
     3e3:	a0 0c 00 00 e3 06 e4 06 00 00 00 f4 03 00 00 00     ................
	...

000003f4 <ad_alarm>:
     3f4:	00 02 02 00 04 32 01 03 01 01 03 01 01 03 01 01     .....2..........
     404:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     414:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     424:	01 03 01 01 03 01 01 04 01 01 04 01 01 04 01 01     ................
     434:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     444:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     454:	01 04 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     464:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     474:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     484:	01 03 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     494:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     4a4:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 04 01     ................
     4b4:	01 03 01 01 03 01 01 03 01 01 03 01 01 03 01 01     ................
     4c4:	03 01 01 03 01 01 03 01 01 03 01 01 03 01 01 03     ................
     4d4:	01 01 03 01 01 03 01 01 03 01 01 03 01 01 03 01     ................
     4e4:	01 04 01 01 04 01 01 04 01 01 04 01 01 04 01 01     ................
     4f4:	04 01 01 04 01 01 04 01 01 04 01 01 04 01 01 04     ................
     504:	01 01 04 01 01 04 01 01 04 01 01 04 01 01 05 00     ................
     514:	00 ff                                               ..

00000516 <ad_navigate>:
     516:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
     526:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
     536:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
     546:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
     556:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
     566:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
     576:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
     586:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
     596:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
     5a6:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
     5b6:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
     5c6:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
     5d6:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
     5e6:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
     5f6:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
     606:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
     616:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
     626:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
     636:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
     646:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
     656:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
     666:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
     676:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00000688 <ad_metal>:
     688:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
     698:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
     6a8:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
     6b8:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
     6c8:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
     6d8:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
     6e8:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
     6f8:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
     708:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
     718:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
     728:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
     738:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
     748:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
     758:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
     768:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
     778:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
     788:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
     798:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
     7a8:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
     7b8:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
     7c8:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
     7d8:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
     7e8:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
     7f8:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
     808:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
     818:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
     828:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
     838:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
     848:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
     858:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
     868:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
     878:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
     888:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
     898:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000008a8 <ad_item>:
     8a8:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
     8b8:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
     8c8:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
     8d8:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
     8e8:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
     8f8:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
     908:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
     918:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
     928:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
     938:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
     948:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
     958:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
     968:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
     978:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
     988:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
     998:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
     9a8:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
     9b8:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
     9c8:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
     9d8:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
     9e8:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
     9f8:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
     a08:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
     a18:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
     a28:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
     a38:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
     a48:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00000a59 <ad_cannonball>:
     a59:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
     a69:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
     a79:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
     a89:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
     a99:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
     aa9:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
     ab9:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
     ac9:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
     ad9:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
     ae9:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
     af9:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
     b09:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
     b19:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
     b29:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
     b39:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
     b49:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
     b59:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
     b69:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
     b79:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
     b89:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
     b99:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
     ba9:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
     bb9:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
     bc9:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
     bd9:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
     be9:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
     bf9:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
     c09:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
     c19:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     c29:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
     c39:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
     c49:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
     c59:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
     c69:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
     c79:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
     c89:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
     c99:	ff ff ff ff ff 00 00                                .......

00000ca0 <ad_brick_explode>:
     ca0:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
     cb0:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
     cc0:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
     cd0:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
     ce0:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
     cf0:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
     d00:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
     d10:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
     d20:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
     d30:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
     d40:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
     d50:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
     d60:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
     d70:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
     d80:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
     d90:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
     da0:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
     db0:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
     dc0:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
     dd0:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
     de0:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
     df0:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
     e00:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
     e10:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
     e20:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
     e30:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
     e40:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
     e50:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
     e60:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
     e70:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
     e80:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
     e90:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
     ea0:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
     eb0:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
     ec0:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
     ed0:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
     ee0:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
     ef0:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
     f00:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
     f10:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
     f20:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
     f30:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
     f40:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
     f50:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
     f60:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
     f70:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
     f80:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
     f90:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
     fa0:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
     fb0:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
     fc0:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
     fd0:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
     fe0:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
     ff0:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    1000:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    1010:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    1020:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    1030:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    1040:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    1050:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    1060:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    1070:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    1080:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    1090:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    10a0:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    10b0:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    10c0:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    10d0:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    10e0:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    10f0:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    1100:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    1110:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    1120:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    1130:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    1140:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    1150:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    1160:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    1170:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    1180:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    1190:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    11a0:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    11b0:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    11c0:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    11d0:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    11e0:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    11f0:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    1200:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    1210:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    1220:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    1230:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    1240:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    1250:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    1260:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    1270:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    1280:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    1290:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    12a0:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    12b0:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    12c0:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    12d0:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    12e0:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    12f0:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    1300:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    1310:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    1320:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    1330:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    1340:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    1350:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    1360:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    1370:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    1380:	04 04 02 01 00                                      .....

00001385 <ad_banter>:
    1385:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    1395:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    13a5:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    13b5:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    13c5:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    13d5:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    13e5:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    13f5:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    1405:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    1415:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    1425:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    1435:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    1445:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    1455:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    1465:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    1475:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    1485:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    1495:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    14a5:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    14b5:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    14c5:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    14d5:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    14e5:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    14f5:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    1505:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    1515:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    1525:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    1535:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    1545:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    1555:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    1565:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    1575:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    1585:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    1595:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    15a5:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    15b5:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    15c5:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    15d5:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    15e5:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    15f5:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    1605:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    1615:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    1625:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    1635:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    1645:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    1655:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    1665:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    1675:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    1685:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    1695:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    16a5:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    16b5:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    16c5:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    16d5:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    16e5:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    16f5:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    1705:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    1715:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    1725:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    1735:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    1745:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    1755:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    1765:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    1775:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    1785:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    1795:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    17a5:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    17b5:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    17c5:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    17d5:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    17e5:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    17f5:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    1805:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    1815:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    1825:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    1835:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    1845:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    1855:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    1865:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    1875:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    1885:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    1895:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    18a5:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    18b5:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    18c5:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    18d5:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    18e5:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    18f5:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    1905:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    1915:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    1925:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    1935:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    1945:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    1955:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    1965:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    1975:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    1985:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    1995:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    19a5:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    19b5:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    19c5:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    19d5:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    19e5:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    19f5:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    1a05:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    1a15:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    1a25:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    1a35:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    1a45:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    1a55:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    1a65:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    1a75:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    1a85:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    1a95:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    1aa5:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    1ab5:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    1ac5:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

00001ad6 <level_data>:
    1ad6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1ae6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b0e:	00 00 00 02 02 00 00 00 06 05 00 00 00 00 00 00     ................
	...
    1b26:	00 00 42 42 42 42 42 42 00 02 02 00 00 06 02 02     ..BBBBBB........
    1b36:	05 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b46:	42 4d 4d 4d 4d 42 00 02 02 00 06 02 02 02 02 05     BMMMMB..........
	...
    1b62:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 04 02 02 02     ..BMMMMB........
    1b72:	02 03 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1b82:	42 4d 4d 4d 4d 42 00 02 02 00 00 04 02 02 03 00     BMMMMB..........
	...
    1b9e:	00 00 42 4d 4d 4d 4d 42 00 02 02 00 00 00 04 03     ..BMMMMB........
	...
    1bbe:	42 42 42 42 42 42 00 02 02 00 00 00 00 00 00 00     BBBBBB..........
    1bce:	00 00 00 00 00 00 02 02 00 00 00 00 00 00 00 00     ................
    1bde:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    1bee:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
    1bfe:	00 00 00 02 02 00 00 00 00 00 00 00 01 01 01 01     ................
    1c0e:	01 00 02 02 00 01 01 01 01 01 00 00 00 00 00 00     ................
    1c1e:	00 02 02 00 00 00 00 00 00 00 01 01 01 01 01 00     ................
    1c2e:	02 02 00 01 01 01 01 01 00 00 00 00 00 00 00 02     ................
    1c3e:	02 00 00 58 00 00 00 00 01 01 01 01 01 00 02 02     ...X............
    1c4e:	00 01 01 01 01 01 00 00 00 63 00 00 00 02 02 00     .........c......
    1c5e:	00 00 00 00 00 00 01 01 01 01 01 00 02 02 00 01     ................
    1c6e:	01 01 01 01 00 00 00 00 00 00 00 02 02 00 00 00     ................
    1c7e:	00 00 00 00 01 01 01 01 01 00 02 02 00 01 01 01     ................
    1c8e:	01 01 00 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    1ca6:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1cb6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 02 02     ................
	...
    1cd2:	00 02 02 00 42 42 42 42 42 42 00 00 00 00 00 00     ....BBBBBB......
	...
    1cea:	00 00 06 05 00 00 00 02 02 00 42 4d 4d 4d 4d 42     ..........BMMMMB
	...
    1d06:	00 00 00 06 02 02 05 00 00 02 02 00 42 4d 4d 4d     ............BMMM
    1d16:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1d26:	06 02 02 02 02 05 00 02 02 00 42 4d 2c 4d 4d 42     ..........BM,MMB
	...
    1d42:	00 00 04 02 02 02 02 03 00 02 02 00 42 4d 4d 4d     ............BMMM
    1d52:	4d 42 00 00 00 00 00 00 00 00 00 00 00 00 00 00     MB..............
    1d62:	00 04 02 02 03 00 00 02 02 00 42 42 42 42 42 42     ..........BBBBBB
	...
    1d82:	04 03 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1da2:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1db2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dc2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1dd2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1de2:	02 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dfe:	00 02 02 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e1a:	00 00 00 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    1e2a:	01 01 01 01 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1e3a:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    1e4a:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    1e5a:	02 01 01 01 01 01 01 01 01 00 00 01 01 42 42 42     .............BBB
    1e6a:	42 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     B...............
    1e7a:	00 00 00 00 01 01 01 00 00 01 01 42 4d 4d 42 01     ...........BMMB.
    1e8a:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1e9a:	00 00 01 01 01 00 00 01 01 42 2c 4d 42 01 01 00     .........B,MB...
    1eaa:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1eba:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1eca:	01 01 00 00 00 00 01 02 02 01 00 00 00 00 01 01     ................
    1eda:	01 00 00 01 01 42 42 42 42 01 01 00 00 01 01 01     .....BBBB.......
    1eea:	00 00 00 00 01 02 02 01 00 00 00 00 00 00 01 00     ................
    1efa:	00 01 01 01 01 01 01 01 01 00 00 01 00 00 00 00     ................
    1f0a:	00 00 01 02 02 01 00 58 00 00 09 00 01 00 00 01     .......X........
    1f1a:	01 01 01 01 01 01 01 00 00 01 00 09 00 00 00 00     ................
    1f2a:	01 02 02 01 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1f3a:	00 00 00 00 00 00 00 01 00 00 00 63 00 00 01 02     ...........c....
    1f4a:	02 01 00 00 00 00 01 01 01 00 00 01 01 01 01 01     ................
    1f5a:	01 01 01 00 00 01 01 01 00 00 00 00 01 02 02 01     ................
    1f6a:	00 00 00 00 01 01 01 00 00 01 01 01 01 01 01 01     ................
    1f7a:	01 00 00 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
    1f8a:	00 00 01 01 01 00 00 01 01 42 42 42 42 01 01 00     .........BBBB...
    1f9a:	00 01 01 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    1faa:	01 01 01 00 00 01 01 42 4d 4d 42 01 01 00 00 01     .......BMMB.....
    1fba:	01 01 00 00 00 00 01 02 02 01 01 01 01 01 01 01     ................
    1fca:	01 00 00 01 01 42 4d 4d 42 01 01 00 00 01 01 01     .....BMMB.......
    1fda:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 00     ................
    1fea:	00 01 01 42 4d 4d 42 01 01 00 00 01 01 01 01 01     ...BMMB.........
    1ffa:	01 01 01 02 02 01 01 01 01 01 01 01 01 00 00 01     ................
    200a:	01 42 42 42 42 01 01 00 00 01 01 01 01 01 01 01     .BBBB...........
    201a:	01 02 02 01 01 01 01 01 01 01 01 00 00 01 01 01     ................
    202a:	01 01 01 01 01 00 00 01 01 01 01 01 01 01 01 02     ................
    203a:	02 01 01 01 01 01 01 01 01 00 00 01 01 01 01 01     ................
    204a:	01 01 01 00 00 01 01 01 01 01 01 01 01 02 02 01     ................
    205a:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2072:	01 01 01 02 02 01 01 01 00 00 00 00 00 00 00 00     ................
	...
    208e:	00 00 01 01 01 02 02 02 02 02 02 02 02 02 02 02     ................
    209e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20ae:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20be:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    20ce:	02 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20ea:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    210a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2126:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2146:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2162:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2182:	00 02 02 01 01 01 01 01 01 00 00 00 00 00 00 00     ................
	...
    219a:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    21b6:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    21c6:	01 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    21d6:	00 01 00 07 00 00 01 02 02 01 00 58 00 00 01 00     ...........X....
    21e6:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 01     ................
    21f6:	00 00 00 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
    2206:	00 02 00 00 00 00 00 00 02 00 00 00 00 01 00 00     ................
    2216:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 00 02     ................
    2226:	02 02 02 02 02 02 02 00 00 00 00 01 00 00 00 00     ................
    2236:	01 02 02 01 00 00 00 00 01 00 00 00 00 02 00 00     ................
    2246:	00 00 00 00 02 00 00 00 00 01 00 00 00 00 01 02     ................
    2256:	02 01 00 00 00 00 01 00 00 00 00 02 00 00 00 00     ................
    2266:	00 00 02 00 00 00 00 01 00 00 00 00 01 02 02 01     ................
    2276:	00 00 00 00 01 00 00 00 00 02 00 00 00 00 00 00     ................
    2286:	02 00 00 00 00 01 00 63 00 00 01 02 02 01 00 00     .......c........
    2296:	07 00 01 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22a6:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
    22b6:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    22c6:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
    22e2:	00 00 00 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    2306:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2326:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2342:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2362:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    237e:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    238e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    239e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23ae:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    23be:	02 00 00 00 42 4d 4d 4d 42 00 00 00 00 00 00 00     ....BMMMB.......
    23ce:	00 00 00 00 00 42 4d 4d 4d 42 00 00 00 02 02 00     .....BMMMB......
    23de:	08 00 42 4d 4d 4d 42 00 00 00 00 00 00 00 00 00     ..BMMMB.........
    23ee:	00 00 00 42 4d 4d 4d 42 00 08 00 02 02 00 00 00     ...BMMMB........
    23fe:	42 4d 4d 4d 42 00 01 01 01 00 00 00 00 01 01 01     BMMMB...........
    240e:	00 42 4d 4d 4d 42 00 00 00 02 02 02 02 02 02 42     .BMMMB.........B
    241e:	42 42 02 00 01 01 01 00 02 02 00 01 01 01 00 02     BB..............
    242e:	42 42 42 02 02 02 02 02 02 00 00 00 00 00 00 00     BBB.............
    243e:	02 00 01 01 01 00 02 02 00 01 01 01 00 02 00 00     ................
    244e:	00 00 00 00 00 02 02 00 01 01 01 01 01 00 02 00     ................
    245e:	00 00 00 00 02 02 00 00 00 00 00 02 00 01 01 01     ................
    246e:	01 01 00 02 02 00 01 01 01 01 01 00 02 00 00 00     ................
    247e:	02 02 02 02 02 02 00 00 00 02 00 01 01 01 01 01     ................
    248e:	00 02 02 00 01 01 01 01 01 00 02 00 00 00 00 00     ................
    249e:	00 00 00 00 00 00 00 02 00 01 01 01 01 01 00 02     ................
    24ae:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    24ca:	00 02 02 02 02 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    24e2:	00 00 00 02 02 02 02 02 00 00 00 00 02 00 00 00     ................
    24f2:	00 00 58 00 02 00 00 00 00 02 00 00 00 00 00 00     ..X.............
    2502:	00 02 00 00 00 00 00 00 00 00 02 00 00 00 02 00     ................
    2512:	00 00 02 00 00 00 00 02 63 00 00 02 00 00 00 02     ........c.......
	...
    252a:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
    253a:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
    254a:	00 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    255a:	00 00 00 02 02 02 02 02 02 4d 4d 4d 42 00 00 00     .........MMMB...
    256a:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    257a:	00 42 4d 4d 4d 02 02 4d 4d 4d 42 00 00 00 02 00     .BMMM..MMMB.....
	...
    2592:	00 00 00 02 00 00 00 42 4d 4d 4d 02 02 4d 2c 4d     .......BMMM..M,M
    25a2:	42 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     B...............
    25b2:	00 02 00 00 00 42 4d 4d 4d 02 02 4d 4d 4d 02 00     .....BMMM..MMM..
	...
    25ca:	02 02 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 02     ............MMM.
    25da:	02 4d 4d 4d 02 00 00 01 01 01 00 00 00 00 02 02     .MMM............
    25ea:	00 00 00 00 01 01 01 00 00 02 4d 4d 4d 02 02 42     ..........MMM..B
    25fa:	42 42 02 00 00 01 01 01 00 00 00 00 02 02 00 00     BB..............
    260a:	00 00 01 01 01 00 00 02 42 42 42 02 02 00 00 00     ........BBB.....
    261a:	02 00 00 01 01 01 00 00 00 00 00 00 00 00 00 00     ................
    262a:	01 01 01 00 00 02 00 00 00 02 02 00 08 00 02 00     ................
	...
    2642:	09 00 00 00 00 00 00 00 00 00 00 02 00 08 00 02     ................
    2652:	02 00 00 00 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    266a:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
    267a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    268a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    269a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    26aa:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
    26c6:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
    26e2:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    2702:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
    2712:	00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2722:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    273e:	00 00 00 02 02 00 00 00 00 06 02 4d 4d 02 05 00     ...........MM...
	...
    275e:	00 02 02 00 00 00 00 04 02 4d 4d 02 03 00 00 00     .........MM.....
	...
    277a:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    279a:	00 02 02 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    27aa:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    27ba:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    27ca:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    27e2:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    27f2:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    2802:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    2812:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    2822:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    2832:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    284e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    285e:	00 00 00 00 00 00 00 06 05 00 00 00 00 00 00 02     ................
    286e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    287e:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    289e:	00 06 02 4d 4d 02 05 00 00 00 00 02 02 00 00 00     ...MM...........
	...
    28ba:	00 00 00 04 02 4d 4d 02 03 00 00 00 00 02 02 00     .....MM.........
	...
    28da:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    28f2:	00 00 07 00 00 00 00 00 00 04 03 00 00 00 00 00     ................
    2902:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    291e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    293a:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    295a:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    296a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    297a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    298a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    299a:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    29aa:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    29c2:	00 00 04 02 02 02 02 03 00 00 00 00 00 00 00 00     ................
    29d2:	00 00 00 02 02 00 00 01 01 01 01 00 00 00 00 00     ................
    29e2:	00 04 02 02 03 00 00 00 00 00 00 01 01 01 01 00     ................
    29f2:	00 02 02 00 00 01 01 01 01 00 00 00 00 00 00 00     ................
    2a02:	04 03 00 00 00 00 00 00 00 01 01 01 01 00 00 02     ................
    2a12:	02 00 00 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2a22:	00 00 00 00 00 00 00 01 01 01 01 00 00 02 02 00     ................
    2a32:	00 01 01 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2a42:	00 00 00 00 00 01 01 01 01 00 00 02 02 00 00 00     ................
	...
    2a6a:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    2a7a:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2a8a:	02 00 00 00 00 00 00 00 00 00 00 02 42 42 42 42     ............BBBB
    2a9a:	42 42 02 00 00 00 00 00 00 00 00 00 00 02 02 00     BB..............
	...
    2ab2:	00 02 4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00     ..MMMMMM........
    2ac2:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    2ad2:	4d 4d 4d 4d 4d 4d 02 00 00 00 00 00 00 00 63 00     MMMMMM........c.
    2ae2:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 4d 4d     ..............MM
    2af2:	2c 4d 4d 4d 02 00 00 00 00 00 00 00 00 00 00 02     ,MMM............
    2b02:	02 00 00 00 00 00 00 00 00 00 00 02 4d 4d 4d 4d     ............MMMM
    2b12:	4d 4d 02 00 00 00 00 00 00 00 00 00 00 02 02 00     MM..............
	...
    2b2a:	00 02 42 42 42 42 42 42 02 00 00 00 00 00 00 00     ..BBBBBB........
    2b3a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b4a:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    2b5a:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    2b6a:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    2b7a:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    2b8a:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    2b9a:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    2baa:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    2bba:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    2bca:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    2bda:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    2bea:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    2bfa:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    2c0a:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    2c26:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2c4a:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c6a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c7a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2c8a:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    2c9a:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2cb2:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    2cc2:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    2cd2:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2ce2:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    2cf2:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2d02:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    2d12:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    2d22:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    2d32:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2d42:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    2d52:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2d76:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2d92:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    2da2:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    2db2:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    2dc2:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    2dd2:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    2de2:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    2df2:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    2e02:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    2e1a:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2e2a:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e46:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2e66:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    2e76:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    2e86:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    2e96:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    2ea6:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    2eb6:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    2ec6:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    2ed6:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    2ee6:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    2ef6:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    2f06:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    2f16:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    2f26:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    2f36:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f46:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f56:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f66:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2f76:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2f92:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fae:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fce:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2fea:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    2ffa:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    300a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3026:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    303e:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    304e:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    305e:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
    306e:	00 00 00 00 00 42 42 42 42 00 00 00 01 01 01 01     .....BBBB.......
    307e:	01 01 01 01 01 02 02 00 00 00 00 00 00 00 00 00     ................
    308e:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 00 00 00     ...BMMB.........
    309e:	00 01 01 02 02 00 00 00 58 00 00 00 00 00 00 00     ........X.......
    30ae:	00 42 4d 4d 42 00 00 00 01 01 01 00 63 00 00 01     .BMMB.......c...
    30be:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 42     ...............B
    30ce:	4d 4d 42 00 00 00 01 01 01 00 00 00 00 01 01 02     MMB.............
    30de:	02 00 00 00 00 00 00 00 00 00 00 00 00 42 2c 4d     .............B,M
    30ee:	42 00 00 00 01 01 01 00 00 00 00 01 01 02 02 00     B...............
	...
    3106:	00 00 00 42 4d 4d 42 00 00 00 01 01 01 01 01 01     ...BMMB.........
    3116:	01 01 01 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3126:	00 42 42 42 42 00 00 00 01 01 01 01 01 01 01 01     .BBBB...........
    3136:	01 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3146:	00 00 00 00 00 00 01 01 01 01 01 01 01 01 01 02     ................
    3156:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3172:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    318e:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    319e:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    31ae:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31ca:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    31ea:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3206:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3226:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3236:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3246:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3256:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    327e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    329e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32ba:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    32da:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    32ea:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    32fa:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3316:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    3332:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    334a:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    335a:	01 01 01 01 00 00 00 42 42 42 42 00 00 00 00 00     .......BBBB.....
    336a:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    337a:	01 01 00 00 00 42 4d 4d 42 00 00 00 00 00 00 00     .....BMMB.......
    338a:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
    339a:	00 00 00 42 4d 4d 42 00 00 00 00 00 00 00 63 00     ...BMMB.......c.
    33aa:	00 00 00 02 02 01 01 00 00 00 00 01 01 01 00 00     ................
    33ba:	00 42 4d 2c 42 00 00 00 00 00 00 00 00 00 00 00     .BM,B...........
    33ca:	00 02 02 01 01 00 00 00 00 01 01 01 00 00 00 42     ...............B
    33da:	4d 4d 42 00 00 00 00 00 00 00 00 00 00 00 00 02     MMB.............
    33ea:	02 01 01 01 01 01 01 01 01 01 00 00 00 42 4d 4d     .............BMM
    33fa:	42 00 00 00 00 00 00 00 00 00 00 00 00 02 02 01     B...............
    340a:	01 01 01 01 01 01 01 01 00 00 00 42 42 42 42 00     ...........BBBB.
	...
    3422:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    3442:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    345e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    347e:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    348e:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    349e:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34ba:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34d6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    34f6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3512:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3522:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3532:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3542:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3552:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    3562:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    357a:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    358a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    359a:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    35aa:	00 02 02 00 58 00 00 00 00 00 00 00 01 01 00 00     ....X...........
    35ba:	00 00 00 00 01 01 00 00 00 00 00 00 00 00 00 02     ................
    35ca:	02 00 00 00 00 00 00 00 00 00 01 01 00 07 00 00     ................
    35da:	09 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    35f2:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    3602:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    3612:	01 01 01 01 01 01 01 01 00 00 00 00 00 00 00 00     ................
    3622:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3632:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3642:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    365e:	00 02 02 37 37 37 37 37 37 37 37 37 37 37 37 37     ...7777777777777
    366e:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 02     777777777777777.
    367e:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    368e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    369e:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 2c 4d 4d 4d 4d     MMMMMMMMMMM,MMMM
    36ae:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    36be:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    36ce:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37     MMMMMMMMM..77777
    36de:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    36ee:	37 37 37 37 37 37 37 02 02 00 00 00 00 00 00 00     7777777.........
	...
    3712:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
    3722:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
    3732:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
    3742:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    375a:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    376a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    377a:	00 09 00 00 07 00 01 01 00 00 00 00 00 00 00 00     ................
    378a:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 00 00     ................
    379a:	00 00 00 00 01 01 00 00 00 00 00 00 63 00 00 02     ............c...
    37aa:	02 00 00 00 00 00 00 00 00 00 01 01 00 00 00 00     ................
    37ba:	00 00 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    37d2:	01 01 00 00 00 00 00 00 01 01 00 00 00 00 00 00     ................
    37e2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 01 01     ................
    37f2:	00 00 00 00 00 00 01 01 00 00 00 00 00 00 00 00     ................
    3802:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3812:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3822:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3832:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 4d     ...............M
    3842:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3852:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3862:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3872:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3882:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3892:	4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d     MMMMMMM..MMMMMMM
    38a2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38b2:	4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMM..MMMMMMMMM
    38c2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38d2:	4d 4d 4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMM..MMMMMMMMMMM
    38e2:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    38f2:	4d 02 02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     M..MMMMMMMMMMMMM
    3902:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02     MMMMMMMMMMMMMMM.
    3912:	02 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     .MMMMMMMMMMMMMMM
    3922:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d     MMMMMMMMMMMMM..M
    3932:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3942:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d     MMMMMMMMMMM..MMM
    3952:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3962:	4d 4d 4d 4d 4d 4d 4d 4d 4d 02 02 4d 4d 4d 4d 4d     MMMMMMMMM..MMMMM
    3972:	4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d 4d     MMMMMMMMMMMMMMMM
    3982:	4d 4d 4d 4d 4d 4d 4d 02 02 37 37 37 37 37 37 37     MMMMMMM..7777777
    3992:	37 37 37 37 37 37 37 37 37 37 37 37 37 37 37 37     7777777777777777
    39a2:	37 37 37 37 37 02 02 00 00 00 00 00 00 00 00 00     77777...........
	...
    39c2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39e2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    39fe:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a1e:	00 02 02 00 00 00 58 00 00 00 00 00 00 00 00 00     ......X.........
	...
    3a36:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    3a5a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a76:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3a96:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3ab2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
    3ac2:	00 00 00 07 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3ad2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    3aee:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3afe:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    3b0e:	02 02                                               ..

00003b10 <sprites_data>:
    3b10:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    3b20:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    3b30:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    3b40:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    3b50:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    3b60:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    3b70:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    3b80:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    3b90:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3ba0:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    3bb0:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    3bc0:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    3bd0:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3be0:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    3bf0:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    3c00:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    3c10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c20:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    3c30:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    3c40:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3c50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c60:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3c70:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3c80:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3c90:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3ca0:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    3cb0:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cc0:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3cd0:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3ce0:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    3cf0:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    3d00:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    3d10:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d20:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d30:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d40:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d50:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d60:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3d70:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3d80:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3d90:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    3da0:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    3db0:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    3dc0:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    3dd0:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    3de0:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    3df0:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    3e00:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    3e10:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    3e20:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    3e30:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    3e40:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    3e50:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    3e60:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    3e70:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    3e80:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    3e90:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3ea0:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    3eb0:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    3ec0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3ed0:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3ee0:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    3ef0:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    3f00:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3f10:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    3f20:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    3f30:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3f40:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f50:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    3f60:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    3f70:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    3f80:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    3f90:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    3fa0:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    3fb0:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    3fc0:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3fd0:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    3fe0:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    3ff0:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    4000:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4010:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    4020:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    4030:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    4040:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    4050:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4060:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    4070:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    4080:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    4090:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40a0:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    40b0:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    40c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    40d0:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    40e0:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    40f0:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    4100:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    4110:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    4120:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    4130:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    4140:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4150:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    4160:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    4170:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    4180:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4190:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    41a0:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    41b0:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    41c0:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41d0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    41e0:	fe fe fe 9f 9f fe fe fe fe fe 9f 9f 9f 9f fe fe     ................
    41f0:	fe fe 9f 9f 9f 9f fe fe fe fe fe 9f 9f fe fe fe     ................
    4200:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4210:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    4220:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    4230:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    4240:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    4250:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    4260:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    4270:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    4280:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    4290:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    42a0:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    42b0:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    42c0:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    42d0:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    42e0:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    42f0:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4300:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    4310:	fe fe fe fe fe fe fe fe fe fe fe fe ff fe fe fe     ................
    4320:	fe fe fe fe 7f ff fe fe fe fe fe fe 7f 7f ff fe     ................
    4330:	fe fe fe fe 7f 7f 7f ff fe fe fe fe 7f 7f 7f fe     ................
    4340:	fe fe fe fe 7f 7f fe fe fe fe fe fe 7f fe fe fe     ................
    4350:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4360:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4370:	7f 7f 7f 7f 7f 7f ff fe fe 7f 7f 7f 7f ff fe fe     ................
    4380:	fe fe 7f 7f ff fe fe fe fe fe fe fe fe fe fe fe     ................
    4390:	fe fe fe ff fe fe fe fe fe fe ff 7f 7f fe fe fe     ................
    43a0:	fe ff 7f 7f 7f 7f fe fe ff 7f 7f 7f 7f 7f 7f fe     ................
    43b0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43c0:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    43d0:	4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a 4a     JJJJJJJJJJJJJJJJ
    43e0:	4a 4a 4a a6 a6 4a 4a 4a 4a 4a 4a a6 a6 4a 4a 4a     JJJ..JJJJJJ..JJJ
    43f0:	fe 4a 4a a6 a6 4a 4a fe fe fe 4a a6 a6 4a fe fe     .JJ..JJ...J..J..
    4400:	fe fe fe a6 a6 fe fe fe fe fe fe a6 a6 fe fe fe     ................
    4410:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4420:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4430:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    4440:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................

00004450 <map_sub_turret>:
    4450:	01 01 23                                            ..#

00004453 <map_sub_shot>:
    4453:	01 01 1b                                            ...

00004456 <map_up_arrow>:
    4456:	01 01 22                                            .."

00004459 <map_down_arrow>:
    4459:	01 01 21                                            ..!

0000445c <map_right_arrow>:
    445c:	01 01 20                                            .. 

0000445f <map_rocket_right_1>:
    445f:	01 01 1a                                            ...

00004462 <map_rocket_right_0>:
    4462:	01 01 19                                            ...

00004465 <map_rocket_up_1>:
    4465:	01 01 18                                            ...

00004468 <map_rocket_up_0>:
    4468:	01 01 17                                            ...

0000446b <map_ball>:
    446b:	01 01 16                                            ...

0000446e <map_explosion_2>:
    446e:	02 02 08 09 09 08                                   ......

00004474 <map_explosion_1>:
    4474:	02 02 06 07 10 11                                   ......

0000447a <map_explosion_0>:
    447a:	02 02 04 05 0e 0f                                   ......

00004480 <map_tank2_right_0>:
    4480:	02 02 14 15 1e 1f                                   ......

00004486 <map_tank2_up_0>:
    4486:	02 02 12 13 1c 1d                                   ......

0000448c <map_tank1_right_0>:
    448c:	02 02 02 03 0c 0d                                   ......

00004492 <map_tank1_up_0>:
    4492:	02 02 00 01 0a 0b                                   ......

00004498 <map_tank_blank>:
    4498:	02 02 24 24 24 24                                   ..$$$$

0000449e <map_none>:
    449e:	01 01 24                                            ..$

000044a1 <tiles_data>:
	...
    44e1:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    44f1:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    4501:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    4511:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    4521:	00 d2 d2 d2 d2 d2 d2 00 d2 ff ff ff ff ff ff d2     ................
    4531:	d2 d2 ff ff ff ff f6 d2 d2 d2 d2 ff ff f6 d2 d2     ................
    4541:	d2 d2 d2 ff f6 d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    4551:	d2 d2 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     ................
    4561:	00 d2 d2 d2 d2 d2 d2 00 d2 ff d2 d2 d2 d2 ff d2     ................
    4571:	d2 d2 ff d2 d2 ff d2 d2 d2 d2 d2 3f 3f d2 d2 d2     ...........??...
    4581:	d2 d2 d2 3f 3f d2 d2 d2 d2 d2 ff d2 d2 ff d2 d2     ...??...........
    4591:	d2 ff d2 d2 d2 d2 ff d2 00 d2 d2 d2 d2 d2 d2 00     ................
    45a1:	00 d2 d2 d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 ff d2     ................
    45b1:	d2 d2 d2 d2 ff ff d2 d2 d2 d2 d2 ff ff ff d2 d2     ................
    45c1:	d2 ff f6 ff ff d2 d2 d2 d2 d2 ff f6 d2 d2 d2 d2     ................
    45d1:	d2 3f d2 ff d2 d2 d2 d2 00 d2 d2 d2 d2 d2 d2 00     .?..............
    45e1:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    45f1:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    4601:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    4611:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4629:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4639:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4649:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    4661:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    4671:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    4681:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    4691:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    46a9:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    46c9:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    46e1:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    46f1:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    4701:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    4711:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    4721:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    4731:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    4741:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    4751:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    4761:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    4771:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    4781:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    4791:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    47a1:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    47b1:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    47c1:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    47d1:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    47e1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    47f1:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    4801:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    4811:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    4821:	18 64 18 18 64 18 18 64 18 62 64 18 18 64 62 18     .d..d..d.bd..db.
    4831:	18 64 18 62 64 18 64 18 64 18 62 18 18 62 18 62     .d.bd.d.d.b..b.b
    4841:	18 64 18 64 62 18 64 18 64 18 64 18 18 62 18 18     .d.db.d.d.d..b..
    4851:	18 64 18 62 64 18 64 18 18 18 18 64 18 18 18 64     .d.bd.d....d...d
    4861:	65 65 65 65 65 65 65 65 65 65 65 65 65 65 65 65     eeeeeeeeeeeeeeee
    4871:	16 65 65 65 65 65 65 16 16 16 65 65 65 65 16 16     .eeeeee...eeee..
    4881:	16 16 16 16 16 16 16 16 16 14 14 14 14 14 14 16     ................
    4891:	14 65 65 65 65 65 65 14 65 65 65 65 65 65 65 65     .eeeeee.eeeeeeee
    48a1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48b1:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    48c1:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 ff ff ff ff f5 f0     ................
    48d1:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    48e1:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    48f1:	f4 f5 f5 4a 4a 4a f5 f4 f0 f0 4a 4a bf bf 4a f0     ...JJJ....JJ..J.
    4901:	f3 f0 4a 4a bf bf 4a f0 f0 f5 ff 4a 4a 4a f5 f0     ..JJ..J....JJJ..
    4911:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4921:	f0 f3 f0 4a 4a 4a f3 f0 f5 f0 4a 4a bf bf 4a f5     ...JJJ....JJ..J.
    4931:	f4 f5 4a 4a bf bf 4a f4 f0 f0 f3 4a 4a 4a f0 f0     ..JJ..J....JJJ..
    4941:	f3 f0 f2 4a 4a f0 f3 f0 f0 f5 ff 4a 4a ff f5 f0     ...JJ......JJ...
    4951:	f5 ff ff ff ff ff ff f5 f0 f0 ff ff ff ff f3 f0     ................
    4961:	7f 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28     .........(((((((
    4971:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4981:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4991:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    49a1:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    49b1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49c1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    49d1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4a01:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4a11:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4a21:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 28     ...............(
    4a31:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a41:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a51:	00 00 00 00 00 00 7f 28 00 00 00 00 00 00 7f 28     .......(.......(
    4a61:	7f 7f 7f 7f 7f 7f 00 00 28 28 28 28 28 28 00 00     ........((((((..
    4a71:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a81:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4a91:	28 28 28 28 28 28 00 00 28 28 28 28 28 28 00 00     ((((((..((((((..
    4aa1:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    4ab1:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    4ac1:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    4ad1:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    4ae1:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    4af1:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    4b01:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    4b11:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    4b21:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b31:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b41:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b51:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4b61:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4b71:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
	...
    4ba1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bb1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4bc1:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4bd1:	7f 28 28 28 28 28 28 28 7f 28 28 28 28 28 28 28     .(((((((.(((((((
    4be1:	7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28 28     .......(((((((((
    4bf1:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c01:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c11:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4c21:	28 28 28 28 28 28 00 00 00 00 00 00 00 00 00 00     ((((((..........
	...
    4c61:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4c71:	00 00 f5 90 f5 90 f5 90 00 00 00 00 e1 e1 e1 e1     ................
    4c81:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4c91:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 00 e1 e1     ................
    4ca1:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4cb1:	f5 90 f5 90 f5 90 f5 00 e1 e1 e1 e1 e1 00 00 00     ................
    4cc1:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4cd1:	f0 f0 f0 e1 e1 e1 00 00 f0 f5 f0 f5 f5 f5 f5 f5     ................
	...
    4d11:	00 f5 00 00 00 00 00 00 f5 f5 00 00 00 00 00 00     ................
	...
    4d49:	7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28 28 28 28 28     ........((((((((
    4d59:	28 28 28 28 28 28 28 28 12 12 12 20 20 20 29 2b     ((((((((...   )+
    4d69:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    4d79:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    4d89:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    4d99:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    4da9:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    4db9:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    4dc9:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    4dd9:	00 00 00 00 00 2b 2b 2b 7f 28 28 28 28 28 28 28     .....+++.(((((((
    4de9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4df9:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e09:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e19:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e29:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e39:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e49:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4e59:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 e1 e1     ((((((((........
    4e69:	00 00 00 00 00 00 e1 e1 00 00 00 00 00 e1 e1 e1     ................
    4e79:	00 00 00 00 e1 e1 e1 e1 00 00 00 00 e1 e1 e1 e1     ................
    4e89:	00 00 f5 90 f5 90 f5 90 00 00 f5 90 f5 90 f5 90     ................
    4e99:	00 00 f5 90 f5 90 f5 90 f0 f5 f0 f5 f5 f5 f5 f5     ................
    4ea9:	f0 f0 f0 e1 e1 e1 00 00 e1 e1 e1 e1 e1 e1 00 00     ................
    4eb9:	e1 e1 e1 e1 e1 00 00 00 e1 e1 e1 e1 e1 00 00 00     ................
    4ec9:	f5 90 f5 90 f5 90 f5 00 f5 90 f5 90 f5 90 f5 00     ................
    4ed9:	f5 90 f5 90 f5 90 f5 00 f5 f5 00 00 00 00 00 00     ................
    4ee9:	00 f5 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4f21:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f31:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    4f41:	28 28 28 28 28 28 28 28 00 00 00 00 00 00 00 00     ((((((((........
	...
    4f65:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    4f75:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    4f85:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    4f95:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    4fa5:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    4fb5:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    4fc5:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    4fd5:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 00 00 00 00     ................
    4fe5:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    4ff5:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5005:	00 00 7f 28 00 00 00 00 00 00 7f 28 00 00 00 00     ...(.......(....
    5015:	00 00 7f 28 00 00 00 00 00 00 7f 28 28 28 28 28     ...(.......(((((
    5025:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5035:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5045:	28 28 00 00 28 28 28 28 28 28 00 00 28 28 28 28     ((..((((((..((((
    5055:	28 28 00 00 28 28 28 28 28 28 00 00 00 00 00 00     ((..((((((......
    5065:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 28 28 28 28     ............((((
    5075:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5085:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    5095:	28 28 28 28 28 28 28 28 28 28 28 28 7f 28 28 28     ((((((((((((.(((
    50a5:	28 28 28 28 7f 28 28 28 28 28 28 28 28 28 28 28     ((((.(((((((((((
    50b5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50c5:	28 28 28 28 28 28 28 28 28 28 28 28 28 28 28 28     ((((((((((((((((
    50d5:	28 28 28 28 28 28 28 28 28 28 28 28 90 90 90 e1     ((((((((((((....
    50e5:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    50f5:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    5105:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    5115:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    5125:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    5135:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    5145:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    5155:	00 90 90 90 00 00 00 00 00 f5 f5 f5 f0 f3 f0 f0     ................
    5165:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5175:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5185:	f3 f0 f2 f3 f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    5195:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 f0 f3 f0 f0     ................
    51a5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    51c5:	f0 f0 f3 f0 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 e8     ................
    51d5:	e8 e8 f4 f5 f0 f0 f3 e8 e8 e8 f3 f0 f0 f3 f0 f0     ................
    51e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    51f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    5205:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 e8 f4 f4 f5     ................
    5215:	f5 f4 f4 f5 f0 e8 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5225:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5235:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5245:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5255:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5265:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    5275:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5285:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5295:	a3 a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    52a5:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 a3     ................
    52b5:	a3 a3 a3 a3 f0 f0 f3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    52d5:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    52e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    52f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5305:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5315:	a3 a3 a3 a4 a4 a4 a4 a4 a4 9a a4 a4 f0 f3 f0 f0     ................
    5325:	f3 f0 f3 a3 f5 f0 f0 f5 f5 f0 f0 a3 a3 a3 a3 a3     ................
    5335:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5345:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5355:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    5365:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5375:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5385:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5395:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a3 f3 f0 f0     ................
    53a5:	f3 f0 f3 f0 a3 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    53c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    53d5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    53e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    53f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5405:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a4 a4 a3 a3     ................
    5415:	a3 a3 a3 a3 a4 a4 a4 9a a4 a4 a4 a4 f0 f3 f0 f0     ................
    5425:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 a3 a3 a3 a3     ................
    5435:	a3 f5 f5 f4 a3 a3 a3 a3 a3 f3 f0 f0 a3 a3 a3 a3     ................
    5445:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5455:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5465:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5475:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 a3 a3 a3 a3     ................
    5485:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5495:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 f0 f3 f0 f0     ................
    54a5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 e8     ................
    54c5:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 f0 f5 f4 f4 e8     ................
    54d5:	e8 e8 e8 f5 f0 f0 f3 e8 e8 e8 e8 f0 f0 f3 f0 f0     ................
    54e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    54f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    5505:	f0 f0 f3 f0 f0 e8 f5 f0 f3 f5 f5 f0 f5 f4 e8 f5     ................
    5515:	f5 f4 f4 f5 f0 f0 f3 e8 f3 f0 f3 f0 f0 f3 f0 f0     ................
    5525:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5535:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 ff f3 f0 f2 f3     ................
    5545:	ff ff ff a3 f0 ff ff ff ff ff ff a3 ff f4 f4 a3     ................
    5555:	a3 a3 a3 a3 f0 f0 a3 a3 a3 a3 a3 a3 f0 f3 f0 f0     ................
    5565:	f3 ff ff f0 f5 f0 f0 f5 ff ff ff f5 f4 f5 ff ff     ................
    5575:	ff ff f5 f4 ff ff ff ff ff f3 f0 f0 a3 a3 a3 a3     ................
    5585:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a     ................
    5595:	a3 a3 a3 a3 a3 a3 9a 9a 9a a3 a3 a3 f0 f3 f0 e8     ................
    55a5:	e8 e8 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55c5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55d5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 f0 f3 e8 f0     ................
    55e5:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    55f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5605:	a3 a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4     ................
    5615:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a f0 f3 f0 f0     ................
    5625:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5635:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5645:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a a4     ................
    5655:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 f0 f3 f0 f0     ................
    5665:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5675:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5685:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5695:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 a3 a3     ................
    56a5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    56c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    56d5:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56e5:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a a4     ................
    56f5:	a4 9a 9a a4 a3 a3 a4 a4 a4 a4 a4 a4 a3 a3 9a 9a     ................
    5705:	9a 9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5715:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5725:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5735:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5745:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5755:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5765:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 a4 9a 9a a4     ................
    5775:	a4 9a 9a a4 a4 a4 a4 a4 a4 9a a4 a4 9a 9a 9a 9a     ................
    5785:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5795:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    57a5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    57b5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a3 9a 9a 9a 9a     ................
    57c5:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a3 a3 a4 a4 a4 a4     ................
    57d5:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 9a 9a a4     ................
    57e5:	a3 a3 a3 a3 a4 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    57f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5805:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5815:	4a a3 a3 a3 a3 a3 a3 4a 4a 4a a3 a3 a3 a3 a3 a4     J......JJJ......
    5825:	a4 9a 9a a4 a3 a3 a3 a3 a4 a4 a4 a4 a3 a3 a3 a0     ................
    5835:	a0 a0 a0 a0 a3 a3 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5845:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a0 a0 a0     ................
    5855:	4a 4a 4a a0 a3 a0 a0 4a 4a 4a 4a 4a a4 9a 9a a4     JJJ....JJJJJ....
    5865:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a0 a0 a0 a4     ................
    5875:	a4 9a 9a a4 a0 a0 a0 a4 a4 a4 a4 a4 a0 a0 a0 a0     ................
    5885:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 a4 a0 a0 a0 a0     ................
    5895:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 a0 ad a4 9a 9a a4     ................
    58a5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    58b5:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    58c5:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    58d5:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a 9a     ................
    58e5:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 a4 9a 9a 9a     ................
    58f5:	a4 9a 9a a4 a4 a4 a4 9a a4 a4 a4 a4 9a 9a 9a 9a     ................
    5905:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5915:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5925:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a a4     ................
    5935:	a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5945:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5955:	a4 a4 9a 9a ad ad ad ad ad ad ad ad a4 9a 9a a4     ................
    5965:	a4 9a a3 a3 a4 a4 a4 a4 a4 a4 9a a3 a4 9a 9a a4     ................
    5975:	a4 9a 9a a3 a4 a4 a4 a4 a4 a4 9a a3 9a 9a 9a 9a     ................
    5985:	9a 9a 9a a3 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    5995:	9a 9a 9a a4 ad ad ad ad ad ad ad ad a3 a3 a3 a3     ................
    59a5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59b5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59c5:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    59d5:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    59e5:	f3 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    59f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a05:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5a15:	a4 a4 a4 a4 ad ad ad ad ad ad ad ad f0 f3 f0 e8     ................
    5a25:	e8 e8 e8 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a35:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a45:	a3 a3 a3 a3 a4 a4 a4 a4 a4 a4 a4 a3 a4 a4 a4 a4     ................
    5a55:	a4 a4 a4 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5a65:	e8 f0 f3 f0 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a75:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5a95:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 ff ff f0     ................
    5aa5:	f3 f0 f3 f0 f5 ff ff ff f5 f0 f0 f5 f4 f5 ff ff     ................
    5ab5:	ff ff f5 f4 f0 f0 f3 f0 f0 ff ff ff a3 a3 a3 a3     ................
    5ac5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5ad5:	a3 a3 a3 a3 ad ad ad ad ad ad ad ad f0 f3 f0 f0     ................
    5ae5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    5af5:	f4 f5 f5 f4 ff f0 f3 f0 f0 f3 f0 f0 a3 ff ff ff     ................
    5b05:	f0 f0 f3 f0 a3 ff ff ff ff ff ff f0 a3 a3 a3 a3     ................
    5b15:	a3 f4 f4 ff ad ad ad ad ad 9a 9a f0 f0 f3 a3 a3     ................
    5b25:	a3 a3 a3 a3 ff f0 f0 a3 a3 a3 a3 a3 f4 ff ff ff     ................
    5b35:	ff ff ff a3 f0 ff ff ff ff ff ff 9a f3 f0 f2 f3     ................
    5b45:	f0 f0 f3 ff f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    5b55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 9a 9a     ................
    5b65:	9a a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a3     ................
    5b75:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a     ................
    5b85:	9a 9a 9a 9a f0 f5 ff ff ff ff f5 9a f5 f4 f4 f5     ................
    5b95:	f5 ff ff 9a f0 f0 f3 f0 f3 ff ff 9a a3 a3 a3 a3     ................
    5ba5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5bb5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5bc5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5bd5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4     ................
    5be5:	a4 a4 a4 9a a3 a4 a4 a4 a4 a4 a4 9a a3 a4 a4 a4     ................
    5bf5:	a4 a4 a4 a4 a3 a3 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c05:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c15:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4     ................
    5c25:	a4 a4 a4 a4 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5c35:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c45:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c55:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5c65:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5c75:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5c85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5c95:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5ca5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    5cb5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5cc5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    5cd5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 a4 a4 a4 a4     ................
    5ce5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4     ................
    5cf5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a4 a4     ................
    5d05:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a3 a3 a4 a4     ................
    5d15:	a4 a4 a4 a4 a3 a3 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d25:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d35:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d45:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d55:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5d75:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5d85:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5d95:	a4 9a a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5da5:	a4 a3 a3 a3 a4 a4 a4 a4 a4 a3 a3 a3 a4 a4 a4 a4     ................
    5db5:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a4 a4 a4 a4     ................
    5dc5:	a4 a4 9a 9a a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4     ................
    5dd5:	a4 a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a3 a3 a3 4a     ...............J
    5de5:	4a 4a a3 a3 a3 a3 a3 a3 4a a3 a3 a3 a3 a3 a3 a3     JJ......J.......
    5df5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5e05:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5e15:	a3 a3 a3 a3 a4 9a 9a 9a 9a 9a 9a 9a a3 a0 a0 4a     ...............J
    5e25:	4a 4a 4a 4a a3 a0 a0 a0 4a 4a 4a a0 a3 a0 a0 a0     JJJJ....JJJ.....
    5e35:	a0 a0 a0 a0 a3 a0 a0 a0 a0 a0 a0 a0 a3 a3 9a a0     ................
    5e45:	a0 a0 a0 a0 a3 a3 a3 9a 9a 9a 9a 9a a3 a3 a3 9a     ................
    5e55:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a0 a0 a0 a0     ................
    5e65:	a0 a0 a0 9a a0 a0 a0 a0 a0 a0 9a a4 a0 a0 a0 a0     ................
    5e75:	a0 a0 9a 9a a0 a0 9a 9a 9a 9a 9a 9a a0 a0 9a 9a     ................
    5e85:	9a 9a 9a 9a 9a 9a 9a 9a a4 9a 9a a4 9a 9a 9a a4     ................
    5e95:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5ea5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5eb5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 9a     ................
    5ec5:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 9a     ................
    5ed5:	a4 a4 a4 a4 a4 9a 9a 9a a4 9a 9a a4 a4 a4 a4 a4     ................
    5ee5:	a4 a4 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5ef5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5f05:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 a4 a4 a4 a4     ................
    5f15:	a4 a4 a4 a4 a4 9a 9a a4 a4 9a 9a a4 9a 9a 9a 9a     ................
    5f25:	9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f35:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5f45:	a4 a4 a3 a3 a4 9a 9a a4 a4 9a a3 a3 a4 a4 a4 a4     ................
    5f55:	a4 a4 9a a3 a4 9a 9a a4 a4 9a 9a a3 a4 a4 a4 a4     ................
    5f65:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5f75:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5f85:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    5f95:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a4 a4 a4 a4     ................
    5fa5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4     ................
    5fb5:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    5fc5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    5fd5:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    5fe5:	a4 a4 a4 9a a4 a4 a4 a4 a4 a4 a4 9a a4 a4 a4 a4     ................
    5ff5:	a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6005:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a     ................
    6015:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6025:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6035:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    6045:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a 9a     ................
    6055:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6065:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6075:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6085:	9a 9a 9a 9a 9a f5 ff ff ff ff f5 f0 9a ff ff ff     ................
    6095:	ff f4 f4 f5 9a ff ff f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    60a5:	a3 9a 9a f0 9a 9a 9a 9a 9a 9a 9a ff 9a 9a 9a 9a     ................
    60b5:	9a ff ff f4 9a 9a ff ff ff f3 f0 f0 9a 9a f2 f3     ................
    60c5:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    60d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    60e5:	e8 e8 f3 f0 f5 f0 f0 e8 e8 e8 f0 f5 f4 f5 f5 e8     ................
    60f5:	e8 e8 e8 e8 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6105:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6115:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 e8 f0 f0     ................
    6125:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6135:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6145:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6155:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6165:	f3 f0 f3 9a f5 f0 f0 f5 f5 f0 f0 9a f4 f5 f5 f4     ................
    6175:	f4 f5 f5 9a f0 f0 f3 f0 f0 f3 f0 9a f3 f0 f2 f3     ................
    6185:	f3 f0 f2 9a f0 f5 f5 f0 f0 f5 f5 f0 f5 f4 f4 f5     ................
    6195:	f5 f4 f4 f5 f0 f0 f3 f0 f0 f0 f3 f0 9a a3 a3 a3     ................
    61a5:	a3 a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3     ................
    61b5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    61c5:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    61d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a4 a4     ................
    61e5:	a4 a4 a4 a4 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    61f5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6205:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6215:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6225:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6235:	a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3 9a 9a 9a 9a     ................
    6245:	a3 a3 a3 a3 f0 f5 9a 9a 9a 9a 9a 9a f5 f4 9a 9a     ................
    6255:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6265:	a4 9a a4 a4 9a 9a 9a 9a 9a 9a 9a a4 a3 a3 a3 a3     ................
    6275:	a3 a3 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6285:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6295:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    62a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62b5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    62c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    62d5:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 9a 9a a4 a4 a4 a4     ................
    62e5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    62f5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6305:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6315:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    6325:	9a 9a 9a 9a a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6335:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6345:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6355:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6365:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    6375:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6385:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6395:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a a4 a4 a4 a4     ................
    63a5:	a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 a4 9a 9a 9a 9a     ................
    63b5:	9a 9a 9a 9a a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    63c5:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    63d5:	9a 9a 9a 9a 9a 9a f3 f0 f3 f0 f3 f0 a4 a4 a4 9a     ................
    63e5:	a4 a4 a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a 9a a3     ................
    63f5:	a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3 a3     ................
    6405:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6415:	9a 9a 9a 9a f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6425:	a4 a4 a4 a4 9a 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3     ................
    6435:	a3 a3 a3 a3 a3 a3 a3 a3 9a 9a 9a 9a a3 a3 a3 a3     ................
    6445:	9a 9a 9a 9a 9a 9a 9a 9a 9a 9a f5 f0 9a 9a 9a 9a     ................
    6455:	9a 9a f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a4 a4 a4 a4     ................
    6465:	a4 a4 9a a3 9a 9a 9a 9a 9a 9a 9a a3 a3 a3 a3 a3     ................
    6475:	a3 a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    6485:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6495:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 a3 a3 a3 a3     ................
    64a5:	a3 a3 a3 9a a3 a3 a3 a3 a3 a3 a3 9a a3 a3 a3 a3     ................
    64b5:	a3 a3 a3 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a 9a     ................
    64c5:	9a 9a 9a 9a f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    64d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a f3 f0 f0     ................
    64e5:	f3 f0 f3 f0 9a f0 f0 f5 f5 f0 f0 f5 9a f5 f5 f4     ................
    64f5:	f4 f5 f5 f4 9a f0 f3 f0 f0 f3 f0 f0 9a f0 f2 f3     ................
    6505:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6515:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6525:	e8 e8 e8 f0 f5 f0 f0 e8 e8 e8 e8 f5 f4 f5 f5 e8     ................
    6535:	e8 e8 e8 f4 f0 f0 f3 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6545:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6555:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 e8     ................
    6565:	f3 f0 f3 f0 f5 f0 e8 f5 f5 f0 f0 f5 f4 e8 f5 f4     ................
    6575:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6585:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6595:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    65a5:	f3 f0 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65b5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    65c5:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    65d5:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a 9a 9a     ................
    65e5:	9a 9a 9a 9a f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    65f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6605:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6615:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 9a 9a f0 f0     ................
    6625:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6635:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6645:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6655:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 f0 f3 f0 f0     ................
    6665:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6675:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    6685:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6695:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66a5:	f3 f0 f3 f0 f5 f0 f0 f5 f0 f3 f0 f0 f4 f5 f5 f4     ................
    66b5:	f5 f0 f0 f5 f0 f0 f3 f0 f0 f3 f0 f0 e8 e8 e8 e8     ................
    66c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    66d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    66e5:	f3 f0 f3 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 e8     ................
    66f5:	e8 e8 e8 e8 f0 f0 f3 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6705:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6715:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6725:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6735:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6745:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6755:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6765:	f3 f0 f3 e8 f5 f0 f0 f5 f5 f0 f0 e8 e8 e8 e8 e8     ................
    6775:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6785:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6795:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67a5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    67d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f0     ................
    67e5:	f3 f0 f3 f0 e8 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    67f5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6805:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6815:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6825:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 e8 e8 e8 e8     ................
    6835:	e8 f5 f5 f4 e8 e8 e8 e8 e8 f3 f0 f0 e8 e8 e8 e8     ................
    6845:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6855:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    6865:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    6875:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6885:	f0 f0 f3 e8 f0 f5 f5 f0 f3 f5 f5 e8 f5 f4 f4 e8     ................
    6895:	e8 e8 e8 e8 f0 f0 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    68a5:	f3 f0 f3 f0 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    68d5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f0 f3 f0 f0     ................
    68e5:	f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5 f4 f5 f5 f4     ................
    68f5:	f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0 e8 f0 f2 f3     ................
    6905:	f0 f0 f3 f0 e8 f5 f5 f0 f3 f5 f5 f0 e8 e8 e8 e8     ................
    6915:	e8 f4 f4 f5 e8 e8 e8 e8 e8 e8 f3 f0 f0 f3 e8 e8     ................
    6925:	e8 e8 e8 e8 f5 f0 f0 e8 e8 e8 e8 e8 f4 f5 f5 f4     ................
    6935:	f4 f5 f5 e8 f0 f0 f3 f0 f0 f3 f0 e8 f3 f0 f2 f3     ................
    6945:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6955:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6965:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6975:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 f3     ................
    6985:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6995:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69a5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69b5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69c5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    69d5:	e8 e8 e8 e8 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    69e5:	e8 e8 f3 f0 e8 e8 e8 e8 e8 f0 f0 f5 e8 f5 f5 f4     ................
    69f5:	f4 f5 f5 f4 e8 f0 f3 f0 f0 f3 f0 f0 f3 f0 f2 f3     ................
    6a05:	f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0 f5 f4 f4 f5     ................
    6a15:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a25:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a35:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f3 f0 f2 e8     ................
    6a45:	e8 e8 e8 e8 f0 f5 f5 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6a65:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a75:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6a85:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6a95:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6aa5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ab5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6ac5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f5 f4 f4 f5     ................
    6ad5:	f5 f4 f4 e8 f0 f0 f3 f0 f3 f0 f3 e8 e8 e8 e8 e8     ................
    6ae5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6af5:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b05:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 f4 f4 f5     ................
    6b15:	f5 f4 f4 f5 e8 f0 f3 f0 f3 f0 f3 f0 e8 e8 e8 e8     ................
    6b25:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b35:	e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8 e8     ................
    6b45:	e8 f0 f3 f0 e8 e8 e8 e8 e8 f5 f5 f0 f5 f4 f4 f5     ................
    6b55:	f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0 00 00 00 00     ................
	...
    6ba9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6bb9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6bd1:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6be9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6bf9:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6c29:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    6c39:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    6c49:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    6c61:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    6c71:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    6c81:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    6c91:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6ca9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    6cb9:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    6cc9:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    6ce1:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    6cf1:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    6d01:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    6d11:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    6d29:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6d39:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6d6d:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    6d7d:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6d8d:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    6da9:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    6db9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6dc9:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    6de9:	00 df df 00 00 df df 00 00 00 df df df df 00 00     ................
    6df9:	df df df df df df df df 00 00 df df df df 00 00     ................
    6e09:	00 df df 00 00 df df 00 00 00 00 00 00 00 00 00     ................
	...
    6e29:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e39:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    6e49:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6e89:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    6e99:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    6eb9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6f09:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    6f2d:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    6f3d:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    6f4d:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    6f69:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6f79:	00 6f 6f 00 6f 6f 6f 00 00 6f 6f 6f 00 6f 6f 00     .oo.ooo..ooo.oo.
    6f89:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    6fa9:	00 00 00 6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00     ...oo.....ooo...
    6fb9:	00 00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00     ...oo......oo...
    6fc9:	00 00 00 6f 6f 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ...oo....oooooo.
	...
    6fe9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    6ff9:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7009:	00 00 6f 6f 00 00 00 00 00 6f 6f 6f 6f 6f 6f 00     ..oo.....oooooo.
	...
    7029:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 6f 6f 00 00     .oooooo.....oo..
    7039:	00 00 00 6f 6f 00 00 00 00 00 00 00 6f 6f 00 00     ...oo.......oo..
    7049:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    706d:	6f 6f 00 00 00 00 00 6f 6f 6f 00 00 00 00 6f 6f     oo.....ooo....oo
    707d:	6f 6f 00 00 00 6f 6f 00 6f 6f 00 00 00 6f 6f 6f     oo...oo.oo...ooo
    708d:	6f 6f 6f 00 00 00 00 00 6f 6f 00 00 00 00 00 00     ooo.....oo......
	...
    70a9:	00 6f 6f 6f 6f 6f 6f 00 00 6f 6f 00 00 00 00 00     .oooooo..oo.....
    70b9:	00 6f 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 6f 00     .ooooo.......oo.
    70c9:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    70e9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 00 00 00     ..oooo...oo.....
    70f9:	00 6f 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     .ooooo...oo..oo.
    7109:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    7129:	00 6f 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     .oooooo......oo.
    7139:	00 00 00 00 6f 6f 00 00 00 00 00 6f 6f 00 00 00     ....oo.....oo...
    7149:	00 00 6f 6f 00 00 00 00 00 00 6f 6f 00 00 00 00     ..oo......oo....
	...
    7169:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7179:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    7189:	00 6f 6f 00 00 6f 6f 00 00 00 6f 6f 6f 6f 00 00     .oo..oo...oooo..
	...
    71a9:	00 00 6f 6f 6f 6f 00 00 00 6f 6f 00 00 6f 6f 00     ..oooo...oo..oo.
    71b9:	00 00 6f 6f 6f 6f 6f 00 00 00 00 00 00 6f 6f 00     ..ooooo......oo.
    71c9:	00 00 00 00 6f 6f 00 00 00 00 6f 6f 6f 00 00 00     ....oo....ooo...
	...
    71f1:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7209:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7221:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7231:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7241:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7251:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7261:	00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00     ................
    7271:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7281:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7291:	00 00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72b1:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72c9:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    72e1:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    72f1:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    7301:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7311:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7329:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7339:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7351:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    7369:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7379:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    7389:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    73a9:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    73b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    73c9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    73e9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    73f9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7409:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    7429:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7439:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7449:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7469:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    7479:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7489:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    74a9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74b9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    74c9:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    74e9:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    74f9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7509:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    7529:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    7539:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    7549:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    7569:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7579:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7589:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    75a9:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    75b9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    75c9:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    75ed:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    75fd:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    760d:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    7629:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    7639:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    7649:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7669:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7679:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7689:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    76a9:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    76b9:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    76c9:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    76e9:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    76f9:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    7709:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    7729:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7739:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7749:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7769:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    7779:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7789:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    77a9:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    77b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    77c9:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    77e9:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    77f9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    7809:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    7829:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    7839:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    7849:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    7869:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7879:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7889:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    78a9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78b9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78c9:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    78e9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    78f9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7909:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    7929:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    7939:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    7949:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    7969:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    7979:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    7989:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    79a9:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    79b9:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    79c9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    79e9:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    79f9:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    7a09:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    7a29:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    7a39:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a49:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    7a69:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    7a79:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    7a89:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    7aa9:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ab9:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    7ac9:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    7aed:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    7afd:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    7b51:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................

00007b61 <map_sub_emerging>:
    7b61:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b71:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7b81:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7b91:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ba1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7bb1:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 87 88 89     ................
    7bc1:	8a 8b 8c 8c 8c 8c 8d 8a 8e 87 87 0d 0d 0d 0d 0d     ................
    7bd1:	0d 0d 0d 8f 87 90 90 90 90 8c 8c 8c 8c 8c 8c 8c     ................
    7be1:	8c 8c 8c 8c 8c 8c 8c 90 90 90 90 87 91 0d 0d 92     ................
    7bf1:	93 94 94 94 94 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c 8c     ................
    7c01:	8c 8c 8c 94 94 94 94 93 95 0d 0d 0d 0d 0d 0d 0d     ................
    7c11:	33 93 93 96 97 98 8c 8c 8c 8c 99 97 9a 93 93 0d     3...............
    7c21:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c31:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7c41:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c51:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c61:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c71:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c81:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7c91:	0d 0d 0d 0d 0d 0d                                   ......

00007c97 <map_sub>:
    7c97:	1c 0b 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ca7:	0d 0d 0d 0d 0d 0d 33 0d 0d 0d 0d 0d 0d 0d 0d 0d     ......3.........
    7cb7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7cc7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7cd7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7ce7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 34 35 0d 0d 36 37 38     .........45..678
    7cf7:	39 3a 3b 3b 3b 3b 3c 3d 3e 3f 36 0d 0d 40 41 0d     9:;;;;<=>?6..@A.
    7d07:	0d 0d 0d 42 43 44 45 46 47 48 49 4a 4b 4a 4c 4d     ...BCDEFGHIJKJLM
    7d17:	4e 4f 50 51 52 53 54 55 55 56 57 58 59 0d 0d 5a     NOPQRSTUUVWXY..Z
    7d27:	5b 5c 5d 5e 5f 60 61 62 63 62 64 65 66 67 62 68     [\]^_`abcbdefgbh
    7d37:	69 6a 6b 6c 6c 6d 6e 6f 70 0d 0d 0d 0d 71 72 0d     ijkllmnop....qr.
    7d47:	73 74 75 76 77 78 79 7a 7b 79 7c 7d 7e 7f 80 81     stuvwxyz{y|}~...
    7d57:	0d 82 83 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d67:	0d 84 85 85 85 85 86 0d 0d 0d 33 0d 0d 0d 0d 0d     ..........3.....
    7d77:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d87:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7d97:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7da7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7db7:	0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d 0d     ................
    7dc7:	0d 0d 0d 0d 0d 0d                                   ......

00007dcd <map_scope_2>:
    7dcd:	01 01 12                                            ...

00007dd0 <map_scope_1>:
    7dd0:	01 01 11                                            ...

00007dd3 <map_scope_0>:
    7dd3:	01 01 10                                            ...

00007dd6 <map_blue_tank>:
    7dd6:	02 02 2b 2c 31 32                                   ..+,12

00007ddc <map_green_tank>:
    7ddc:	02 02 18 19 23 24                                   ....#$

00007de2 <map_fence>:
    7de2:	01 01 0f                                            ...

00007de5 <map_turf>:
    7de5:	01 01 0e                                            ...

00007de8 <map_water>:
    7de8:	01 01 0d                                            ...

00007deb <map_metal_bl>:
    7deb:	01 01 0c                                            ...

00007dee <map_metal_tr>:
    7dee:	01 01 0b                                            ...

00007df1 <map_metal_br>:
    7df1:	01 01 0a                                            ...

00007df4 <map_metal_tl>:
    7df4:	01 01 09                                            ...

00007df7 <map_tile_exp_2>:
    7df7:	01 01 08                                            ...

00007dfa <map_tile_exp_1>:
    7dfa:	01 01 07                                            ...

00007dfd <map_tile_exp_0>:
    7dfd:	01 01 06                                            ...

00007e00 <map_rocket_itm>:
    7e00:	01 01 04                                            ...

00007e03 <map_explode_itm>:
    7e03:	01 01 03                                            ...

00007e06 <map_speed_itm>:
    7e06:	01 01 02                                            ...

00007e09 <map_metal>:
    7e09:	01 01 05                                            ...

00007e0c <map_brick>:
    7e0c:	01 01 01                                            ...

00007e0f <map_splash>:
    7e0f:	15 04 13 14 14 13 14 14 13 15 15 13 16 17 00 00     ................
    7e1f:	00 13 14 14 13 00 13 00 1a 00 1a 00 1a 1a 1b 1c     ................
    7e2f:	1a 1d 1e 1f 20 21 1a 22 00 1a 00 1a 00 1a 00 1a     .... !."........
    7e3f:	14 25 1a 00 1a 1a 26 00 27 28 29 1a 2a 00 1a 00     .%....&.'().*...
    7e4f:	1a 00 1a 00 1a 00 1a 1a 00 1a 1a 2d 2e 00 00 00     ...........-....
    7e5f:	1a 00 00 1a 2f 30                                   ..../0

00007e65 <map_pause>:
    7e65:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    7e75:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    7e85:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    7e95:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00007ea3 <map_tile_none>:
    7ea3:	01 01 00                                            ...

00007ea6 <__ctors_end>:
    7ea6:	11 24       	eor	r1, r1
    7ea8:	1f be       	out	0x3f, r1	; 63
    7eaa:	cf ef       	ldi	r28, 0xFF	; 255
    7eac:	d0 e1       	ldi	r29, 0x10	; 16
    7eae:	de bf       	out	0x3e, r29	; 62
    7eb0:	cd bf       	out	0x3d, r28	; 61

00007eb2 <__do_copy_data>:
    7eb2:	11 e0       	ldi	r17, 0x01	; 1
    7eb4:	a0 e0       	ldi	r26, 0x00	; 0
    7eb6:	b1 e0       	ldi	r27, 0x01	; 1
    7eb8:	e6 e0       	ldi	r30, 0x06	; 6
    7eba:	f0 ee       	ldi	r31, 0xE0	; 224
    7ebc:	02 c0       	rjmp	.+4      	; 0x7ec2 <__do_copy_data+0x10>
    7ebe:	05 90       	lpm	r0, Z+
    7ec0:	0d 92       	st	X+, r0
    7ec2:	a4 30       	cpi	r26, 0x04	; 4
    7ec4:	b1 07       	cpc	r27, r17
    7ec6:	d9 f7       	brne	.-10     	; 0x7ebe <__do_copy_data+0xc>

00007ec8 <__do_clear_bss>:
    7ec8:	10 e1       	ldi	r17, 0x10	; 16
    7eca:	a4 e0       	ldi	r26, 0x04	; 4
    7ecc:	b1 e0       	ldi	r27, 0x01	; 1
    7ece:	01 c0       	rjmp	.+2      	; 0x7ed2 <.do_clear_bss_start>

00007ed0 <.do_clear_bss_loop>:
    7ed0:	1d 92       	st	X+, r1

00007ed2 <.do_clear_bss_start>:
    7ed2:	af 38       	cpi	r26, 0x8F	; 143
    7ed4:	b1 07       	cpc	r27, r17
    7ed6:	e1 f7       	brne	.-8      	; 0x7ed0 <.do_clear_bss_loop>

00007ed8 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7ed8:	0e 94 10 44 	call	0x8820	; 0x8820 <wdt_randomize>
#endif

    MCUSR = 0;
    7edc:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    7ede:	88 e1       	ldi	r24, 0x18	; 24
    7ee0:	0f b6       	in	r0, 0x3f	; 63
    7ee2:	f8 94       	cli
    7ee4:	80 93 60 00 	sts	0x0060, r24
    7ee8:	10 92 60 00 	sts	0x0060, r1
    7eec:	0f be       	out	0x3f, r0	; 63

00007eee <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    7eee:	0e 94 d2 44 	call	0x89a4	; 0x89a4 <isEepromFormatted>
    7ef2:	81 11       	cpse	r24, r1
    7ef4:	02 c0       	rjmp	.+4      	; 0x7efa <Initialize+0xc>
    7ef6:	0e 94 b0 44 	call	0x8960	; 0x8960 <FormatEeprom>

	cli();
    7efa:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7efc:	81 e0       	ldi	r24, 0x01	; 1
    7efe:	80 93 18 0b 	sts	0x0B18, r24
		tr4_barrel_hi=1;		
    7f02:	80 93 19 0b 	sts	0x0B19, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7f06:	80 93 17 0b 	sts	0x0B17, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7f0a:	10 92 04 0b 	sts	0x0B04, r1
    7f0e:	10 92 0a 0b 	sts	0x0B0A, r1
    7f12:	10 92 10 0b 	sts	0x0B10, r1
    7f16:	10 92 16 0b 	sts	0x0B16, r1
    7f1a:	10 92 1c 0b 	sts	0x0B1C, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    7f1e:	10 92 ea 0a 	sts	0x0AEA, r1
	sync_flags=0;
    7f22:	10 92 ec 0a 	sts	0x0AEC, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7f26:	92 e1       	ldi	r25, 0x12	; 18
    7f28:	90 93 eb 0a 	sts	0x0AEB, r25

	//set rendering parameters
	render_lines_count=FRAME_LINES;
    7f2c:	90 ee       	ldi	r25, 0xE0	; 224
    7f2e:	90 93 f2 0a 	sts	0x0AF2, r25
	first_render_line=FIRST_RENDER_LINE;
    7f32:	94 e1       	ldi	r25, 0x14	; 20
    7f34:	90 93 f1 0a 	sts	0x0AF1, r25

	joypad1_status_hi=0;
    7f38:	10 92 f6 0a 	sts	0x0AF6, r1
    7f3c:	10 92 f5 0a 	sts	0x0AF5, r1
	joypad2_status_hi=0;
    7f40:	10 92 fa 0a 	sts	0x0AFA, r1
    7f44:	10 92 f9 0a 	sts	0x0AF9, r1
	sound_enabled=1;
    7f48:	80 93 03 0b 	sts	0x0B03, r24

	InitializeVideoMode();
    7f4c:	0e 94 de 51 	call	0xa3bc	; 0xa3bc <InitializeVideoMode>
    7f50:	80 e7       	ldi	r24, 0x70	; 112
    7f52:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7f54:	fc 01       	movw	r30, r24
    7f56:	25 91       	lpm	r18, Z+
    7f58:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    7f5a:	f9 01       	movw	r30, r18
    7f5c:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7f5e:	30 83       	st	Z, r19
    7f60:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7f62:	20 e0       	ldi	r18, 0x00	; 0
    7f64:	8e 39       	cpi	r24, 0x9E	; 158
    7f66:	92 07       	cpc	r25, r18
    7f68:	a9 f7       	brne	.-22     	; 0x7f54 <Initialize+0x66>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    7f6a:	78 94       	sei
	
	DisplayLogo();
    7f6c:	0e 94 dd 51 	call	0xa3ba	; 0xa3ba <DisplayLogo>
    7f70:	0e 94 27 6f 	call	0xde4e	; 0xde4e <main>
    7f74:	0c 94 01 70 	jmp	0xe002	; 0xe002 <_exit>

00007f78 <__bad_interrupt>:
    7f78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00007f7c <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,465 //30-3+340+98
    7f7c:	0b e9       	ldi	r16, 0x9B	; 155
    7f7e:	0a 95       	dec	r16
    7f80:	f1 f7       	brne	.-4      	; 0x7f7e <sub_video_mode3+0x2>
		dec r19
		brne 1b

#else

		WAIT  r17,     19 + MAX_RAMTILES * 14 - 1
    7f82:	10 e0       	ldi	r17, 0x00	; 0
    7f84:	1a 95       	dec	r17
    7f86:	f1 f7       	brne	.-4      	; 0x7f84 <sub_video_mode3+0x8>
    7f88:	1e e1       	ldi	r17, 0x1E	; 30
    7f8a:	1a 95       	dec	r17
    7f8c:	f1 f7       	brne	.-4      	; 0x7f8a <sub_video_mode3+0xe>

#endif


		lds r2,overlay_tile_table
    7f8e:	20 90 e7 0a 	lds	r2, 0x0AE7
		lds r3,overlay_tile_table+1
    7f92:	30 90 e8 0a 	lds	r3, 0x0AE8
		lds r16,tile_table_lo 
    7f96:	00 91 e3 0a 	lds	r16, 0x0AE3
		lds r17,tile_table_hi
    7f9a:	10 91 e4 0a 	lds	r17, 0x0AE4
		movw r12,r16
    7f9e:	68 01       	movw	r12, r16
		movw r6,r16
    7fa0:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    7fa2:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    7fa4:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7fa6:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    7fa8:	4e 01       	movw	r8, r28
		clr r0
    7faa:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    7fac:	30 91 e6 0a 	lds	r19, 0x0AE6
		cpi r19,0
    7fb0:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    7fb2:	09 f0       	breq	.+2      	; 0x7fb6 <sub_video_mode3+0x3a>
		ldi YL,lo8(overlay_vram)
    7fb4:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    7fb6:	09 f0       	breq	.+2      	; 0x7fba <sub_video_mode3+0x3e>
		ldi YH,hi8(overlay_vram)
    7fb8:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    7fba:	09 f0       	breq	.+2      	; 0x7fbe <sub_video_mode3+0x42>
		mov r24,r19
    7fbc:	83 2f       	mov	r24, r19

		breq .+2
    7fbe:	09 f0       	breq	.+2      	; 0x7fc2 <sub_video_mode3+0x46>
		movw r12,r2
    7fc0:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    7fc2:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    7fc4:	a0 2e       	mov	r10, r16
		clr r22
    7fc6:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    7fc8:	78 e0       	ldi	r23, 0x08	; 8

00007fca <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    7fca:	06 d3       	rcall	.+1548   	; 0x85d8 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    7fcc:	3c e0       	ldi	r19, 0x0C	; 12
    7fce:	3a 95       	dec	r19
    7fd0:	f1 f7       	brne	.-4      	; 0x7fce <next_tile_line+0x4>
    7fd2:	00 c0       	rjmp	.+0      	; 0x7fd4 <next_tile_line+0xa>

		;***draw line***
		call render_tile_line
    7fd4:	0e 94 16 40 	call	0x802c	; 0x802c <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    7fd8:	3f e0       	ldi	r19, 0x0F	; 15
    7fda:	3a 95       	dec	r19
    7fdc:	f1 f7       	brne	.-4      	; 0x7fda <next_tile_line+0x10>
    7fde:	00 c0       	rjmp	.+0      	; 0x7fe0 <next_tile_line+0x16>

		dec r10
    7fe0:	aa 94       	dec	r10
		breq frame_end
    7fe2:	a1 f0       	breq	.+40     	; 0x800c <frame_end>
	
		inc r22
    7fe4:	63 95       	inc	r22
		lpm ;3 nop
    7fe6:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    7fe8:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    7fea:	29 f0       	breq	.+10     	; 0x7ff6 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    7fec:	33 e0       	ldi	r19, 0x03	; 3
    7fee:	3a 95       	dec	r19
    7ff0:	f1 f7       	brne	.-4      	; 0x7fee <next_tile_line+0x24>
    7ff2:	00 c0       	rjmp	.+0      	; 0x7ff4 <next_tile_line+0x2a>
		
		rjmp next_tile_line	
    7ff4:	ea cf       	rjmp	.-44     	; 0x7fca <next_tile_line>

00007ff6 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    7ff6:	66 27       	eor	r22, r22

		clr r0
    7ff8:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    7ffa:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7ffc:	c3 0f       	add	r28, r19
		adc YH,r0
    7ffe:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    8000:	8a 95       	dec	r24
		brne .+2
    8002:	09 f4       	brne	.+2      	; 0x8006 <next_tile_row+0x10>
		movw YL,r8	;main vram
    8004:	e4 01       	movw	r28, r8
		brne .+2
    8006:	09 f4       	brne	.+2      	; 0x800a <next_tile_row+0x14>
		movw r12,r6	;main tile table
    8008:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    800a:	df cf       	rjmp	.-66     	; 0x7fca <next_tile_line>

0000800c <frame_end>:

	frame_end:

		WAIT r19,18
    800c:	36 e0       	ldi	r19, 0x06	; 6
    800e:	3a 95       	dec	r19
    8010:	f1 f7       	brne	.-4      	; 0x800e <frame_end+0x2>

		rcall hsync_pulse ;145
    8012:	e2 d2       	rcall	.+1476   	; 0x85d8 <hsync_pulse>
		clr r1
		call RestoreBackground
#endif

		;set vsync flag & flip field
		lds ZL,sync_flags
    8014:	e0 91 ec 0a 	lds	r30, 0x0AEC
		ldi r20,SYNC_FLAG_FIELD
    8018:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    801a:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    801c:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    801e:	e0 93 ec 0a 	sts	0x0AEC, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    8022:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    8024:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    8028:	11 24       	eor	r1, r1


		ret
    802a:	08 95       	ret

0000802c <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    802c:	de 01       	movw	r26, r28

		mul r22,r23
    802e:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    8030:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8032:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    8034:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    8036:	00 0d       	add	r16, r0
		adc r17,r1
    8038:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    803a:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    803c:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    803e:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    8040:	00 0d       	add	r16, r0
		adc r17,r1
    8042:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    8044:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    8046:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    8048:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    804a:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    804c:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    804e:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    8050:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    8052:	08 f4       	brcc	.+2      	; 0x8056 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    8054:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    8056:	04 0e       	add	r0, r20
	    adc r1,r21
    8058:	15 1e       	adc	r1, r21

		movw ZL,r0
    805a:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    805c:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    805e:	f0 f0       	brcs	.+60     	; 0x809c <ramloop>

00008060 <romloop>:
	

	romloop:
	    lpm r16,Z+
    8060:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    8062:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    8064:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    8066:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    8068:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    806a:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    806c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    806e:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    8070:	28 31       	cpi	r18, 0x18	; 24
		nop
    8072:	00 00       	nop

	    lpm r16,Z+
    8074:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    8076:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    8078:	08 f4       	brcc	.+2      	; 0x807c <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    807a:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    807c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    807e:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    8080:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    8082:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    8084:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    8086:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    8088:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    808a:	1a 95       	dec	r17
   
	    lpm r16,Z+
    808c:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    808e:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    8090:	05 91       	lpm	r16, Z+

		breq end	
    8092:	31 f1       	breq	.+76     	; 0x80e0 <end>
	    movw ZL,r0   	;copy next tile adress
    8094:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    8096:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    8098:	18 f7       	brcc	.-58     	; 0x8060 <romloop>
	
		rjmp .
    809a:	00 c0       	rjmp	.+0      	; 0x809c <ramloop>

0000809c <ramloop>:

	ramloop:

	    ld r16,Z+
    809c:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    809e:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    80a0:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    80a2:	01 91       	ld	r16, Z+
		nop   
    80a4:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    80a6:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    80a8:	23 9f       	mul	r18, r19


	    ld r16,Z+
    80aa:	01 91       	ld	r16, Z+
		nop
    80ac:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    80ae:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    80b0:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    80b2:	00 c0       	rjmp	.+0      	; 0x80b4 <ramloop+0x18>

	    ld r16,Z+
    80b4:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    80b6:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    80b8:	08 f0       	brcs	.+2      	; 0x80bc <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    80ba:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    80bc:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    80be:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    80c0:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    80c2:	15 1e       	adc	r1, r21
		rjmp .
    80c4:	00 c0       	rjmp	.+0      	; 0x80c6 <ramloop+0x2a>
    
		ld r16,Z+		
    80c6:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    80c8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    80ca:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    80cc:	00 c0       	rjmp	.+0      	; 0x80ce <ramloop+0x32>

	    ld r16,Z+	
    80ce:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    80d0:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    80d2:	01 91       	ld	r16, Z+

	    dec r17
    80d4:	1a 95       	dec	r17
	    breq end
    80d6:	21 f0       	breq	.+8      	; 0x80e0 <end>
	
		movw ZL,r0
    80d8:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    80da:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    80dc:	08 f6       	brcc	.-126    	; 0x8060 <romloop>
		rjmp ramloop
    80de:	de cf       	rjmp	.-68     	; 0x809c <ramloop>

000080e0 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    80e0:	08 b9       	out	0x08, r16	; 8
		clr r16	
    80e2:	00 27       	eor	r16, r16
		lpm	
    80e4:	c8 95       	lpm
		nop
    80e6:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    80e8:	08 b9       	out	0x08, r16	; 8

		ret
    80ea:	08 95       	ret

000080ec <CopyFlashTile>:
; C-callable
; r24=Source ROM tile index
; r22=Dest RAM tile index
;************************************
CopyFlashTile:
	ldi r18,TILE_HEIGHT*TILE_WIDTH
    80ec:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    80ee:	e0 91 e3 0a 	lds	r30, 0x0AE3
	lds ZH,tile_table_hi
    80f2:	f0 91 e4 0a 	lds	r31, 0x0AE4
	mul r24,r18
    80f6:	82 9f       	mul	r24, r18
	add ZL,r0
    80f8:	e0 0d       	add	r30, r0
	adc ZH,r1
    80fa:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    80fc:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    80fe:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    8100:	62 9f       	mul	r22, r18
	add XL,r0
    8102:	a0 0d       	add	r26, r0
	adc XH,r1
    8104:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r1,Z+
	st X+,r1
.endr
    8106:	15 90       	lpm	r1, Z+
    8108:	1d 92       	st	X+, r1
    810a:	15 90       	lpm	r1, Z+
    810c:	1d 92       	st	X+, r1
    810e:	15 90       	lpm	r1, Z+
    8110:	1d 92       	st	X+, r1
    8112:	15 90       	lpm	r1, Z+
    8114:	1d 92       	st	X+, r1
    8116:	15 90       	lpm	r1, Z+
    8118:	1d 92       	st	X+, r1
    811a:	15 90       	lpm	r1, Z+
    811c:	1d 92       	st	X+, r1
    811e:	15 90       	lpm	r1, Z+
    8120:	1d 92       	st	X+, r1
    8122:	15 90       	lpm	r1, Z+
    8124:	1d 92       	st	X+, r1
    8126:	15 90       	lpm	r1, Z+
    8128:	1d 92       	st	X+, r1
    812a:	15 90       	lpm	r1, Z+
    812c:	1d 92       	st	X+, r1
    812e:	15 90       	lpm	r1, Z+
    8130:	1d 92       	st	X+, r1
    8132:	15 90       	lpm	r1, Z+
    8134:	1d 92       	st	X+, r1
    8136:	15 90       	lpm	r1, Z+
    8138:	1d 92       	st	X+, r1
    813a:	15 90       	lpm	r1, Z+
    813c:	1d 92       	st	X+, r1
    813e:	15 90       	lpm	r1, Z+
    8140:	1d 92       	st	X+, r1
    8142:	15 90       	lpm	r1, Z+
    8144:	1d 92       	st	X+, r1
    8146:	15 90       	lpm	r1, Z+
    8148:	1d 92       	st	X+, r1
    814a:	15 90       	lpm	r1, Z+
    814c:	1d 92       	st	X+, r1
    814e:	15 90       	lpm	r1, Z+
    8150:	1d 92       	st	X+, r1
    8152:	15 90       	lpm	r1, Z+
    8154:	1d 92       	st	X+, r1
    8156:	15 90       	lpm	r1, Z+
    8158:	1d 92       	st	X+, r1
    815a:	15 90       	lpm	r1, Z+
    815c:	1d 92       	st	X+, r1
    815e:	15 90       	lpm	r1, Z+
    8160:	1d 92       	st	X+, r1
    8162:	15 90       	lpm	r1, Z+
    8164:	1d 92       	st	X+, r1
    8166:	15 90       	lpm	r1, Z+
    8168:	1d 92       	st	X+, r1
    816a:	15 90       	lpm	r1, Z+
    816c:	1d 92       	st	X+, r1
    816e:	15 90       	lpm	r1, Z+
    8170:	1d 92       	st	X+, r1
    8172:	15 90       	lpm	r1, Z+
    8174:	1d 92       	st	X+, r1
    8176:	15 90       	lpm	r1, Z+
    8178:	1d 92       	st	X+, r1
    817a:	15 90       	lpm	r1, Z+
    817c:	1d 92       	st	X+, r1
    817e:	15 90       	lpm	r1, Z+
    8180:	1d 92       	st	X+, r1
    8182:	15 90       	lpm	r1, Z+
    8184:	1d 92       	st	X+, r1
    8186:	15 90       	lpm	r1, Z+
    8188:	1d 92       	st	X+, r1
    818a:	15 90       	lpm	r1, Z+
    818c:	1d 92       	st	X+, r1
    818e:	15 90       	lpm	r1, Z+
    8190:	1d 92       	st	X+, r1
    8192:	15 90       	lpm	r1, Z+
    8194:	1d 92       	st	X+, r1
    8196:	15 90       	lpm	r1, Z+
    8198:	1d 92       	st	X+, r1
    819a:	15 90       	lpm	r1, Z+
    819c:	1d 92       	st	X+, r1
    819e:	15 90       	lpm	r1, Z+
    81a0:	1d 92       	st	X+, r1
    81a2:	15 90       	lpm	r1, Z+
    81a4:	1d 92       	st	X+, r1
    81a6:	15 90       	lpm	r1, Z+
    81a8:	1d 92       	st	X+, r1
    81aa:	15 90       	lpm	r1, Z+
    81ac:	1d 92       	st	X+, r1
    81ae:	15 90       	lpm	r1, Z+
    81b0:	1d 92       	st	X+, r1
    81b2:	15 90       	lpm	r1, Z+
    81b4:	1d 92       	st	X+, r1
    81b6:	15 90       	lpm	r1, Z+
    81b8:	1d 92       	st	X+, r1
    81ba:	15 90       	lpm	r1, Z+
    81bc:	1d 92       	st	X+, r1
    81be:	15 90       	lpm	r1, Z+
    81c0:	1d 92       	st	X+, r1
    81c2:	15 90       	lpm	r1, Z+
    81c4:	1d 92       	st	X+, r1
    81c6:	15 90       	lpm	r1, Z+
    81c8:	1d 92       	st	X+, r1
    81ca:	15 90       	lpm	r1, Z+
    81cc:	1d 92       	st	X+, r1
    81ce:	15 90       	lpm	r1, Z+
    81d0:	1d 92       	st	X+, r1
    81d2:	15 90       	lpm	r1, Z+
    81d4:	1d 92       	st	X+, r1
    81d6:	15 90       	lpm	r1, Z+
    81d8:	1d 92       	st	X+, r1
    81da:	15 90       	lpm	r1, Z+
    81dc:	1d 92       	st	X+, r1
    81de:	15 90       	lpm	r1, Z+
    81e0:	1d 92       	st	X+, r1
    81e2:	15 90       	lpm	r1, Z+
    81e4:	1d 92       	st	X+, r1
    81e6:	15 90       	lpm	r1, Z+
    81e8:	1d 92       	st	X+, r1
    81ea:	15 90       	lpm	r1, Z+
    81ec:	1d 92       	st	X+, r1
    81ee:	15 90       	lpm	r1, Z+
    81f0:	1d 92       	st	X+, r1
    81f2:	15 90       	lpm	r1, Z+
    81f4:	1d 92       	st	X+, r1
    81f6:	15 90       	lpm	r1, Z+
    81f8:	1d 92       	st	X+, r1
    81fa:	15 90       	lpm	r1, Z+
    81fc:	1d 92       	st	X+, r1
    81fe:	15 90       	lpm	r1, Z+
    8200:	1d 92       	st	X+, r1
    8202:	15 90       	lpm	r1, Z+
    8204:	1d 92       	st	X+, r1
	clr r1
    8206:	11 24       	eor	r1, r1
	ret
    8208:	08 95       	ret

0000820a <CopyRamTile>:
; r24=Source RAM tile index
; r22=Dest RAM tile index
;************************************
CopyRamTile:

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    820a:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	ldi ZL,lo8(ram_tiles)
    820c:	e0 e9       	ldi	r30, 0x90	; 144
	ldi ZH,hi8(ram_tiles)
    820e:	f4 e0       	ldi	r31, 0x04	; 4
	mul r24,r18
    8210:	82 9f       	mul	r24, r18
	add ZL,r0
    8212:	e0 0d       	add	r30, r0
	adc ZH,r1
    8214:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    8216:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    8218:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    821a:	62 9f       	mul	r22, r18
	add XL,r0
    821c:	a0 0d       	add	r26, r0
	adc XH,r1
    821e:	b1 1d       	adc	r27, r1

	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	ld r1,Z+
	st X+,r1
.endr
    8220:	11 90       	ld	r1, Z+
    8222:	1d 92       	st	X+, r1
    8224:	11 90       	ld	r1, Z+
    8226:	1d 92       	st	X+, r1
    8228:	11 90       	ld	r1, Z+
    822a:	1d 92       	st	X+, r1
    822c:	11 90       	ld	r1, Z+
    822e:	1d 92       	st	X+, r1
    8230:	11 90       	ld	r1, Z+
    8232:	1d 92       	st	X+, r1
    8234:	11 90       	ld	r1, Z+
    8236:	1d 92       	st	X+, r1
    8238:	11 90       	ld	r1, Z+
    823a:	1d 92       	st	X+, r1
    823c:	11 90       	ld	r1, Z+
    823e:	1d 92       	st	X+, r1
    8240:	11 90       	ld	r1, Z+
    8242:	1d 92       	st	X+, r1
    8244:	11 90       	ld	r1, Z+
    8246:	1d 92       	st	X+, r1
    8248:	11 90       	ld	r1, Z+
    824a:	1d 92       	st	X+, r1
    824c:	11 90       	ld	r1, Z+
    824e:	1d 92       	st	X+, r1
    8250:	11 90       	ld	r1, Z+
    8252:	1d 92       	st	X+, r1
    8254:	11 90       	ld	r1, Z+
    8256:	1d 92       	st	X+, r1
    8258:	11 90       	ld	r1, Z+
    825a:	1d 92       	st	X+, r1
    825c:	11 90       	ld	r1, Z+
    825e:	1d 92       	st	X+, r1
    8260:	11 90       	ld	r1, Z+
    8262:	1d 92       	st	X+, r1
    8264:	11 90       	ld	r1, Z+
    8266:	1d 92       	st	X+, r1
    8268:	11 90       	ld	r1, Z+
    826a:	1d 92       	st	X+, r1
    826c:	11 90       	ld	r1, Z+
    826e:	1d 92       	st	X+, r1
    8270:	11 90       	ld	r1, Z+
    8272:	1d 92       	st	X+, r1
    8274:	11 90       	ld	r1, Z+
    8276:	1d 92       	st	X+, r1
    8278:	11 90       	ld	r1, Z+
    827a:	1d 92       	st	X+, r1
    827c:	11 90       	ld	r1, Z+
    827e:	1d 92       	st	X+, r1
    8280:	11 90       	ld	r1, Z+
    8282:	1d 92       	st	X+, r1
    8284:	11 90       	ld	r1, Z+
    8286:	1d 92       	st	X+, r1
    8288:	11 90       	ld	r1, Z+
    828a:	1d 92       	st	X+, r1
    828c:	11 90       	ld	r1, Z+
    828e:	1d 92       	st	X+, r1
    8290:	11 90       	ld	r1, Z+
    8292:	1d 92       	st	X+, r1
    8294:	11 90       	ld	r1, Z+
    8296:	1d 92       	st	X+, r1
    8298:	11 90       	ld	r1, Z+
    829a:	1d 92       	st	X+, r1
    829c:	11 90       	ld	r1, Z+
    829e:	1d 92       	st	X+, r1
    82a0:	11 90       	ld	r1, Z+
    82a2:	1d 92       	st	X+, r1
    82a4:	11 90       	ld	r1, Z+
    82a6:	1d 92       	st	X+, r1
    82a8:	11 90       	ld	r1, Z+
    82aa:	1d 92       	st	X+, r1
    82ac:	11 90       	ld	r1, Z+
    82ae:	1d 92       	st	X+, r1
    82b0:	11 90       	ld	r1, Z+
    82b2:	1d 92       	st	X+, r1
    82b4:	11 90       	ld	r1, Z+
    82b6:	1d 92       	st	X+, r1
    82b8:	11 90       	ld	r1, Z+
    82ba:	1d 92       	st	X+, r1
    82bc:	11 90       	ld	r1, Z+
    82be:	1d 92       	st	X+, r1
    82c0:	11 90       	ld	r1, Z+
    82c2:	1d 92       	st	X+, r1
    82c4:	11 90       	ld	r1, Z+
    82c6:	1d 92       	st	X+, r1
    82c8:	11 90       	ld	r1, Z+
    82ca:	1d 92       	st	X+, r1
    82cc:	11 90       	ld	r1, Z+
    82ce:	1d 92       	st	X+, r1
    82d0:	11 90       	ld	r1, Z+
    82d2:	1d 92       	st	X+, r1
    82d4:	11 90       	ld	r1, Z+
    82d6:	1d 92       	st	X+, r1
    82d8:	11 90       	ld	r1, Z+
    82da:	1d 92       	st	X+, r1
    82dc:	11 90       	ld	r1, Z+
    82de:	1d 92       	st	X+, r1
    82e0:	11 90       	ld	r1, Z+
    82e2:	1d 92       	st	X+, r1
    82e4:	11 90       	ld	r1, Z+
    82e6:	1d 92       	st	X+, r1
    82e8:	11 90       	ld	r1, Z+
    82ea:	1d 92       	st	X+, r1
    82ec:	11 90       	ld	r1, Z+
    82ee:	1d 92       	st	X+, r1
    82f0:	11 90       	ld	r1, Z+
    82f2:	1d 92       	st	X+, r1
    82f4:	11 90       	ld	r1, Z+
    82f6:	1d 92       	st	X+, r1
    82f8:	11 90       	ld	r1, Z+
    82fa:	1d 92       	st	X+, r1
    82fc:	11 90       	ld	r1, Z+
    82fe:	1d 92       	st	X+, r1
    8300:	11 90       	ld	r1, Z+
    8302:	1d 92       	st	X+, r1
    8304:	11 90       	ld	r1, Z+
    8306:	1d 92       	st	X+, r1
    8308:	11 90       	ld	r1, Z+
    830a:	1d 92       	st	X+, r1
    830c:	11 90       	ld	r1, Z+
    830e:	1d 92       	st	X+, r1
    8310:	11 90       	ld	r1, Z+
    8312:	1d 92       	st	X+, r1
    8314:	11 90       	ld	r1, Z+
    8316:	1d 92       	st	X+, r1
    8318:	11 90       	ld	r1, Z+
    831a:	1d 92       	st	X+, r1
    831c:	11 90       	ld	r1, Z+
    831e:	1d 92       	st	X+, r1
	clr r1
    8320:	11 24       	eor	r1, r1
	ret
    8322:	08 95       	ret

00008324 <RestoreBackground>:
#if (RTLIST_ENABLE != 0)

	; Restore list: Begin at user_ram_tiles_c (above the user RAM tiles),
	; end before free_tile_index (the first unused RAM tile).

	lds   ZL,      user_ram_tiles_c
    8324:	e0 91 d9 0a 	lds	r30, 0x0AD9
	mov   r24,     ZL
    8328:	8e 2f       	mov	r24, r30
	add   ZL,      ZL
    832a:	ee 0f       	add	r30, r30
	add   ZL,      r24     ; Multiply by 3
    832c:	e8 0f       	add	r30, r24
	clr   ZH
    832e:	ff 27       	eor	r31, r31
	subi  ZL,      lo8(-(ram_tiles_restore))
    8330:	e0 57       	subi	r30, 0x70	; 112
	sbci  ZH,      hi8(-(ram_tiles_restore))
    8332:	f5 4f       	sbci	r31, 0xF5	; 245

	lds   r0,      free_tile_index
    8334:	00 90 d8 0a 	lds	r0, 0x0AD8
	sub   r24,     r0
    8338:	80 19       	sub	r24, r0
	brcc  rbg_exit
    833a:	30 f4       	brcc	.+12     	; 0x8348 <rbg_exit>

0000833c <rbg_loop>:

	; Restore loop

rbg_loop:
	ld    XL,      Z+      ; VRAM address low
    833c:	a1 91       	ld	r26, Z+
	ld    XH,      Z+      ; VRAM address high
    833e:	b1 91       	ld	r27, Z+
	ld    r0,      Z+      ; Tile index to restore
    8340:	01 90       	ld	r0, Z+
	st    X,       r0
    8342:	0c 92       	st	X, r0
	inc   r24
    8344:	83 95       	inc	r24
	brne  rbg_loop
    8346:	d1 f7       	brne	.-12     	; 0x833c <rbg_loop>

00008348 <rbg_exit>:
	lds   r0,      user_ram_tiles_c_tmp
	sts   user_ram_tiles_c, r0
	sts   free_tile_index, r0
#endif

	ret
    8348:	08 95       	ret

0000834a <BlitSpritePart>:
;************************************
BlitSpritePart:

	; Get tile bank addr

	ldi   r25,     4 * 2
    834a:	98 e0       	ldi	r25, 0x08	; 8
	mul   r23,     r25
    834c:	79 9f       	mul	r23, r25
	mov   XL,      r1
    834e:	a1 2d       	mov	r26, r1
	clr   XH
    8350:	bb 27       	eor	r27, r27
	subi  XL,      lo8(-(sprites_tile_banks))
    8352:	a5 52       	subi	r26, 0x25	; 37
	sbci  XH,      hi8(-(sprites_tile_banks))
    8354:	b5 4f       	sbci	r27, 0xF5	; 245
	ld    ZL,      X+
    8356:	ed 91       	ld	r30, X+
	ld    ZH,      X+
    8358:	fd 91       	ld	r31, X+

	ldi   r25,     TILE_WIDTH * TILE_HEIGHT
    835a:	90 e4       	ldi	r25, 0x40	; 64
	mul   r22,     r25
    835c:	69 9f       	mul	r22, r25
	add   ZL,      r0      ; Tile data src
    835e:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    8360:	f1 1d       	adc	r31, r1

	; dest = ram_tiles + (bt * TILE_HEIGHT * TILE_WIDTH)

	mul   r24,     r25
    8362:	89 9f       	mul	r24, r25
	movw  XL,      r0
    8364:	d0 01       	movw	r26, r0
	subi  XL,      lo8(-(ram_tiles))
    8366:	a0 57       	subi	r26, 0x70	; 112
	sbci  XH,      hi8(-(ram_tiles))
    8368:	bb 4f       	sbci	r27, 0xFB	; 251
			dest += (dx - 1U);
		}
	}
	*/

	ldi   r25,     0       ; srcXdiff high byte & used for zero
    836a:	90 e0       	ldi	r25, 0x00	; 0
	sbrc  r20,     0
    836c:	40 fd       	sbrc	r20, 0
	rjmp  x_2nd_tile
    836e:	09 c0       	rjmp	.+18     	; 0x8382 <x_2nd_tile>

	mov   r24,     r18     ; srcXdiff = dx
    8370:	82 2f       	mov	r24, r18
	ldi   r20,     TILE_WIDTH
    8372:	48 e0       	ldi	r20, 0x08	; 8
	sub   r20,     r18     ; xspan = TILE_WIDTH - dx
    8374:	42 1b       	sub	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    8376:	70 ff       	sbrs	r23, 0
	rjmp  x_1st_tile_nxf
    8378:	0a c0       	rjmp	.+20     	; 0x838e <x_1st_tile_nxf>

	adiw  XL,      TILE_WIDTH - 1 ; dest += (TILE_WIDTH - 1)
    837a:	17 96       	adiw	r26, 0x07	; 7

0000837c <x_2nd_tile_nxf>:

x_2nd_tile_nxf:

	add   ZL,      r24
    837c:	e8 0f       	add	r30, r24
	adc   ZH,      r25     ; src += srcXdiff
    837e:	f9 1f       	adc	r31, r25
	rjmp  x_check_end
    8380:	08 c0       	rjmp	.+16     	; 0x8392 <x_check_end>

00008382 <x_2nd_tile>:

x_2nd_tile:

	ldi   r24,     TILE_WIDTH
    8382:	88 e0       	ldi	r24, 0x08	; 8
	sub   r24,     r18     ; srcXdiff = TILE_WIDTH - dx
    8384:	82 1b       	sub	r24, r18
	mov   r20,     r18     ; xspan = dx;
    8386:	42 2f       	mov	r20, r18
	sbrs  r23,     SPRITE_FLIP_X_BIT
    8388:	70 ff       	sbrs	r23, 0
	rjmp  x_2nd_tile_nxf
    838a:	f8 cf       	rjmp	.-16     	; 0x837c <x_2nd_tile_nxf>

	sbiw  XL,      1       ; dest -= 1
    838c:	11 97       	sbiw	r26, 0x01	; 1

0000838e <x_1st_tile_nxf>:

x_1st_tile_nxf:

	add   XL,      r18
    838e:	a2 0f       	add	r26, r18
	adc   XH,      r25     ; dest += dx
    8390:	b9 1f       	adc	r27, r25

00008392 <x_check_end>:
			src += (TILE_WIDTH * (TILE_HEIGHT - dy));
		}
	}
	*/

	ldi   r22,     TILE_WIDTH
    8392:	68 e0       	ldi	r22, 0x08	; 8
	ldi   r18,     TILE_HEIGHT
    8394:	28 e0       	ldi	r18, 0x08	; 8
	sub   r18,     r19     ; temp = (TILE_HEIGHT - dy)
    8396:	23 1b       	sub	r18, r19

	sbrc  r21,     0
    8398:	50 fd       	sbrc	r21, 0
	rjmp  y_2nd_tile
    839a:	09 c0       	rjmp	.+18     	; 0x83ae <y_2nd_tile>

	mul   r22,     r19
    839c:	63 9f       	mul	r22, r19
	add   XL,      r0
    839e:	a0 0d       	add	r26, r0
	adc   XH,      r1      ; dest += (dy * TILE_WIDTH)
    83a0:	b1 1d       	adc	r27, r1

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83a2:	71 fd       	sbrc	r23, 1
	subi  ZL,      lo8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    83a4:	e8 5c       	subi	r30, 0xC8	; 200
	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83a6:	71 fd       	sbrc	r23, 1
	sbci  ZH,      hi8(-(TILE_WIDTH * (TILE_HEIGHT - 1)))
    83a8:	ff 4f       	sbci	r31, 0xFF	; 255

	mov   r1,      r18     ; yspan = temp
    83aa:	12 2e       	mov	r1, r18

	rjmp  y_check_end
    83ac:	08 c0       	rjmp	.+16     	; 0x83be <y_check_end>

000083ae <y_2nd_tile>:

y_2nd_tile:

	mov   r1,      r19     ; temp = dy - 1
    83ae:	13 2e       	mov	r1, r19
	dec   r1
    83b0:	1a 94       	dec	r1
	sbrs  r23,     SPRITE_FLIP_Y_BIT
    83b2:	71 ff       	sbrs	r23, 1
	mov   r1,      r18     ; temp = TILE_HEIGHT - dy
    83b4:	12 2e       	mov	r1, r18
	mul   r22,     r1      ; src += (temp * TILE_WIDTH)
    83b6:	61 9d       	mul	r22, r1
	add   ZL,      r0
    83b8:	e0 0d       	add	r30, r0
	adc   ZH,      r1
    83ba:	f1 1d       	adc	r31, r1

	mov   r1,      r19     ; yspan = dy
    83bc:	13 2e       	mov	r1, r19

000083be <y_check_end>:
	if ((flags & SPRITE_FLIP_Y) != 0U){
		srcXdiff -= (TILE_WIDTH * 2);
	}
	*/

	sbrc  r23,     SPRITE_FLIP_Y_BIT
    83be:	71 fd       	sbrc	r23, 1
	sbiw  r24,     (TILE_WIDTH * 2)
    83c0:	40 97       	sbiw	r24, 0x10	; 16
		step = -1;
	}
	; destXdiff is calculated negated for an optimization in the loop
	*/

	sbrc  r23,     SPRITE_FLIP_X_BIT
    83c2:	70 fd       	sbrc	r23, 0
	rjmp  x_diff_xf
    83c4:	05 c0       	rjmp	.+10     	; 0x83d0 <x_diff_xf>

	ldi   r21,     -(TILE_WIDTH + 1) ; destXdiff = -(TILE_WIDTH + 1)
    83c6:	57 ef       	ldi	r21, 0xF7	; 247
	add   r21,     r20     ; destXdiff += xspan
    83c8:	54 0f       	add	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0x00
    83ca:	70 e0       	ldi	r23, 0x00	; 0
#endif
	ldi   r22,     0x01    ; step = 1
    83cc:	61 e0       	ldi	r22, 0x01	; 1
	rjmp  x_diff_end
    83ce:	04 c0       	rjmp	.+8      	; 0x83d8 <x_diff_end>

000083d0 <x_diff_xf>:

x_diff_xf:

	ldi   r21,     -(TILE_WIDTH - 1) ; destXdiff = -(TILE_WIDTH - 1)
    83d0:	59 ef       	ldi	r21, 0xF9	; 249
	sub   r21,     r20     ; destXdiff -= xspan
    83d2:	54 1b       	sub	r21, r20
#if (RT_ALIGNED == 0)
	ldi   r23,     0xFF
    83d4:	7f ef       	ldi	r23, 0xFF	; 255
#endif
	ldi   r22,     0xFF    ; step = -1
    83d6:	6f ef       	ldi	r22, 0xFF	; 255

000083d8 <x_diff_end>:
	; dest += step; is omitted for the last X iteration, compensated with
	; destXdiff.
	; destXdiff is negated to allow for using sub instead of add, so subi
	; can be used to subtract high byte.

	ldi   r19,     TRANSLUCENT_COLOR
    83d8:	3e ef       	ldi	r19, 0xFE	; 254

	mov   r0,      r20     ; xspan
    83da:	04 2e       	mov	r0, r20
	lsr   r20
    83dc:	46 95       	lsr	r20
	brcc  x_loop1
    83de:	30 f4       	brcc	.+12     	; 0x83ec <x_loop1>
	breq  x_loopx
    83e0:	61 f0       	breq	.+24     	; 0x83fa <x_loopx>

000083e2 <x_loop0>:

x_loop0:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83e2:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83e4:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83e6:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    83e8:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    83ea:	b7 1f       	adc	r27, r23

000083ec <x_loop1>:
#endif
x_loop1:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83ec:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83ee:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83f0:	2c 93       	st	X, r18
	add   XL,      r22     ; dest += step;
    83f2:	a6 0f       	add	r26, r22
#if (RT_ALIGNED == 0)
	adc   XH,      r23
    83f4:	b7 1f       	adc	r27, r23
#endif
	subi  r20,     1
    83f6:	41 50       	subi	r20, 0x01	; 1
	brne  x_loop0
    83f8:	a1 f7       	brne	.-24     	; 0x83e2 <x_loop0>

000083fa <x_loopx>:
x_loopx:
	lpm   r18,     Z+      ; px = pgm_read_byte(src); src ++;
    83fa:	25 91       	lpm	r18, Z+
	cpse  r18,     r19     ; if (px != TRANSLUCENT_COLOR)
    83fc:	23 13       	cpse	r18, r19
	st    X,       r18     ; *dest = px
    83fe:	2c 93       	st	X, r18

	dec   r1
    8400:	1a 94       	dec	r1
	breq  loop_e
    8402:	49 f0       	breq	.+18     	; 0x8416 <loop_e>

	add   ZL,      r24     ; src += srcXdiff
    8404:	e8 0f       	add	r30, r24
	adc   ZH,      r25
    8406:	f9 1f       	adc	r31, r25
	sub   XL,      r21     ; dest += destXdiff (negated)
    8408:	a5 1b       	sub	r26, r21
#if (RT_ALIGNED == 0)
	sbci  XH,      0xFF
    840a:	bf 4f       	sbci	r27, 0xFF	; 255
#endif

	mov   r20,     r0      ; xspan
    840c:	40 2d       	mov	r20, r0
	lsr   r20
    840e:	46 95       	lsr	r20
	brcc  x_loop1
    8410:	68 f7       	brcc	.-38     	; 0x83ec <x_loop1>
	brne  x_loop0
    8412:	39 f7       	brne	.-50     	; 0x83e2 <x_loop0>
	rjmp  x_loopx
    8414:	f2 cf       	rjmp	.-28     	; 0x83fa <x_loopx>

00008416 <loop_e>:

loop_e:

	ret                    ; r1 is zero at this point
    8416:	08 95       	ret

00008418 <__vector_13>:
TIMER1_COMPA_vect:

	; (3 cy IT entry latency)
	; (3 cy JMP)

	push  r0
    8418:	0f 92       	push	r0
	push  r1
    841a:	1f 92       	push	r1
	push  ZL
    841c:	ef 93       	push	r30
	push  ZH
    841e:	ff 93       	push	r31
	in    ZH,      _SFR_IO_ADDR(SREG)
    8420:	ff b7       	in	r31, 0x3f	; 63
	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x10 - 0x15 (5 cy jitter)
    8422:	e0 91 84 00 	lds	r30, 0x0084
	push  ZH
    8426:	ff 93       	push	r31

	sbrc  ZL,      2
    8428:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x15 ( 5) or 0x14 ( 6)
    842a:	04 c0       	rjmp	.+8      	; 0x8434 <__vector_13+0x1c>
	sbrc  ZL,      1
    842c:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x13 ( 7) or 0x12 ( 8)
    842e:	02 c0       	rjmp	.+4      	; 0x8434 <__vector_13+0x1c>
	nop
    8430:	00 00       	nop
	rjmp  .                ; 0x11 ( 9) or 0x10 (10)
    8432:	00 c0       	rjmp	.+0      	; 0x8434 <__vector_13+0x1c>
	sbrs  ZL,      0
    8434:	e0 ff       	sbrs	r30, 0
	rjmp  .
    8436:	00 c0       	rjmp	.+0      	; 0x8438 <__vector_13+0x20>

	; An lds of TCNT1L here would result 0x1E

	;decrement sync pulse counter
	lds ZL,sync_pulse
    8438:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    843c:	ea 95       	dec	r30
	sts sync_pulse,ZL
    843e:	e0 93 eb 0a 	sts	0x0AEB, r30

	;process sync phases
	lds ZH,sync_phase
    8442:	f0 91 ea 0a 	lds	r31, 0x0AEA
	sbrc ZH,0
    8446:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    8448:	51 c0       	rjmp	.+162    	; 0x84ec <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    844a:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    844c:	98 f0       	brcs	.+38     	; 0x8474 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    844e:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    8450:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    8454:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    8456:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    845a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    845c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    845e:	26 f4       	brtc	.+8      	; 0x8468 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    8460:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    8462:	0e 94 fd 42 	call	0x85fa	; 0x85fa <update_sound>
	rjmp sync_end
    8466:	b1 c0       	rjmp	.+354    	; 0x85ca <sync_end>

00008468 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    8468:	e5 e1       	ldi	r30, 0x15	; 21
    846a:	ea 95       	dec	r30
    846c:	f1 f7       	brne	.-4      	; 0x846a <sync_pre_eq_no_sound_update+0x2>
    846e:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    8470:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    8472:	ab c0       	rjmp	.+342    	; 0x85ca <sync_end>

00008474 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    8474:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    8476:	08 f1       	brcs	.+66     	; 0x84ba <sync_post_eq>

	rjmp .
    8478:	00 c0       	rjmp	.+0      	; 0x847a <sync_eq+0x6>
	rjmp .
    847a:	00 c0       	rjmp	.+0      	; 0x847c <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    847c:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    847e:	e0 fb       	bst	r30, 0
	ldi ZL,4
    8480:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    8482:	16 f4       	brtc	.+4      	; 0x8488 <sync_eq_skip>
	
	call update_sound
    8484:	0e 94 fd 42 	call	0x85fa	; 0x85fa <update_sound>

00008488 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    8488:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    848a:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    848e:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    8490:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    8494:	9a c0       	rjmp	.+308    	; 0x85ca <sync_end>

00008496 <__vector_14>:
; Interrupt that set the sync signal back to .3v
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
;**********************************************************
TIMER1_COMPB_vect:
	push  ZL
    8496:	ef 93       	push	r30

	lds   ZL,      _SFR_MEM_ADDR(TCNT1L) ; 0x28 - 0x2D (5 cy jitter)
    8498:	e0 91 84 00 	lds	r30, 0x0084

	sbrc  ZL,      2
    849c:	e2 fd       	sbrc	r30, 2
	rjmp  .+8              ; 0x2D ( 5) or 0x2C ( 6)
    849e:	04 c0       	rjmp	.+8      	; 0x84a8 <__vector_14+0x12>
	sbrc  ZL,      1
    84a0:	e1 fd       	sbrc	r30, 1
	rjmp  .+4              ; 0x2B ( 7) or 0x2A ( 8)
    84a2:	02 c0       	rjmp	.+4      	; 0x84a8 <__vector_14+0x12>
	nop
    84a4:	00 00       	nop
	rjmp  .                ; 0x29 ( 9) or 0x28 (10)
    84a6:	00 c0       	rjmp	.+0      	; 0x84a8 <__vector_14+0x12>
	sbrs  ZL,      0
    84a8:	e0 ff       	sbrs	r30, 0
	rjmp  .
    84aa:	00 c0       	rjmp	.+0      	; 0x84ac <__vector_14+0x16>

	ldi   ZL,      (1 << OCIE1A) ; Disable OCIE1B
    84ac:	e2 e0       	ldi	r30, 0x02	; 2
	nop
    84ae:	00 00       	nop
	sbi   _SFR_IO_ADDR(SYNC_PORT), SYNC_PIN ; 68
    84b0:	28 9a       	sbi	0x05, 0	; 5
	sts   _SFR_MEM_ADDR(TIMSK1), ZL ; Stop generate interrupt on match
    84b2:	e0 93 6f 00 	sts	0x006F, r30

	pop   ZL
    84b6:	ef 91       	pop	r30
	reti
    84b8:	18 95       	reti

000084ba <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    84ba:	00 c0       	rjmp	.+0      	; 0x84bc <sync_post_eq+0x2>

	bst ZL,0
    84bc:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84be:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    84c0:	26 f4       	brtc	.+8      	; 0x84ca <sync_post_eq_no_sound_update>
	ldi ZL,1	
    84c2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    84c4:	0e 94 fd 42 	call	0x85fa	; 0x85fa <update_sound>
	rjmp sync_pre_eq_cont
    84c8:	05 c0       	rjmp	.+10     	; 0x84d4 <sync_pre_eq_cont>

000084ca <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    84ca:	e5 e1       	ldi	r30, 0x15	; 21
    84cc:	ea 95       	dec	r30
    84ce:	f1 f7       	brne	.-4      	; 0x84cc <sync_post_eq_no_sound_update+0x2>
    84d0:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    84d2:	28 9a       	sbi	0x05, 0	; 5

000084d4 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    84d4:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    84d8:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    84da:	09 f0       	breq	.+2      	; 0x84de <sync_pre_eq_cont+0xa>
	rjmp sync_end
    84dc:	76 c0       	rjmp	.+236    	; 0x85ca <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    84de:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    84e0:	e0 93 eb 0a 	sts	0x0AEB, r30
	ldi ZL,1
    84e4:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    84e6:	e0 93 ea 0a 	sts	0x0AEA, r30
	
	rjmp sync_end
    84ea:	6f c0       	rjmp	.+222    	; 0x85ca <sync_end>

000084ec <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    84ec:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    84ee:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    84f2:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    84f4:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    84f8:	00 c0       	rjmp	.+0      	; 0x84fa <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    84fa:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    84fc:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    84fe:	00 c0       	rjmp	.+0      	; 0x8500 <sync_hsync+0x14>
	call update_sound
    8500:	0e 94 fd 42 	call	0x85fa	; 0x85fa <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    8504:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8506:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    850a:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    850c:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cp ZL,ZH
    8510:	ef 17       	cp	r30, r31
	brsh no_render
    8512:	d0 f4       	brcc	.+52     	; 0x8548 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    8514:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    8516:	00 90 f1 0a 	lds	r0, 0x0AF1
	sub ZH,r0				
    851a:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    851c:	00 90 f2 0a 	lds	r0, 0x0AF2
	sub ZH,r0			
    8520:	f0 19       	sub	r31, r0
	cp ZL,ZH
    8522:	ef 17       	cp	r30, r31
	brlo no_render
    8524:	88 f0       	brcs	.+34     	; 0x8548 <no_render>

	;push r1-r29
	ldi ZL,29
    8526:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    8528:	ff 27       	eor	r31, r31

0000852a <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    852a:	00 80       	ld	r0, Z
	push r0
    852c:	0f 92       	push	r0
	dec ZL
    852e:	ea 95       	dec	r30
	brne push_loop	
    8530:	e1 f7       	brne	.-8      	; 0x852a <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    8532:	06 e0       	ldi	r16, 0x06	; 6
    8534:	0a 95       	dec	r16
    8536:	f1 f7       	brne	.-4      	; 0x8534 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    8538:	0e 94 be 3f 	call	0x7f7c	; 0x7f7c <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    853c:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    853e:	ff 27       	eor	r31, r31

00008540 <pop_loop>:
pop_loop:
	pop r0
    8540:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    8542:	01 92       	st	Z+, r0
	cpi ZL,30
    8544:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    8546:	e0 f3       	brcs	.-8      	; 0x8540 <pop_loop>

00008548 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    8548:	e0 91 eb 0a 	lds	r30, 0x0AEB
	cpi ZL,0
    854c:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    854e:	09 f0       	breq	.+2      	; 0x8552 <no_render+0xa>
	rjmp sync_end
    8550:	3c c0       	rjmp	.+120    	; 0x85ca <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    8552:	2f 93       	push	r18
	push r19
    8554:	3f 93       	push	r19
	push r20
    8556:	4f 93       	push	r20
	push r21
    8558:	5f 93       	push	r21
	push r22
    855a:	6f 93       	push	r22
	push r23
    855c:	7f 93       	push	r23
	push r24
    855e:	8f 93       	push	r24
	push r25
    8560:	9f 93       	push	r25
	push r26
    8562:	af 93       	push	r26
	push r27
    8564:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    8566:	78 94       	sei
	clr r1
    8568:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    856a:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    856c:	e0 93 ea 0a 	sts	0x0AEA, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    8570:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    8572:	e0 93 eb 0a 	sts	0x0AEB, r30



	;increment the vsync counter
	lds r24,vsync_counter
    8576:	80 91 fb 0a 	lds	r24, 0x0AFB
	lds r25,vsync_counter+1
    857a:	90 91 fc 0a 	lds	r25, 0x0AFC
	adiw r24,1
    857e:	01 96       	adiw	r24, 0x01	; 1
	sts vsync_counter,r24
    8580:	80 93 fb 0a 	sts	0x0AFB, r24
	sts vsync_counter+1,r25
    8584:	90 93 fc 0a 	sts	0x0AFC, r25


	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    8588:	e0 91 ed 0a 	lds	r30, 0x0AED
	lds ZH,pre_vsync_user_callback+1
    858c:	f0 91 ee 0a 	lds	r31, 0x0AEE
	cp  ZL,r1
    8590:	e1 15       	cp	r30, r1
	cpc ZH,r1
    8592:	f1 05       	cpc	r31, r1
	breq .+2 
    8594:	09 f0       	breq	.+2      	; 0x8598 <no_render+0x50>
	icall
    8596:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    8598:	0e 94 a0 44 	call	0x8940	; 0x8940 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    859c:	0e 94 ec 52 	call	0xa5d8	; 0xa5d8 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    85a0:	0e 94 f7 42 	call	0x85ee	; 0x85ee <process_music>
	clr r1
    85a4:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    85a6:	e0 91 ef 0a 	lds	r30, 0x0AEF
	lds ZH,post_vsync_user_callback+1
    85aa:	f0 91 f0 0a 	lds	r31, 0x0AF0
	cp  ZL,r1
    85ae:	e1 15       	cp	r30, r1
	cpc ZH,r1
    85b0:	f1 05       	cpc	r31, r1
	breq .+2 
    85b2:	09 f0       	breq	.+2      	; 0x85b6 <no_render+0x6e>
	icall
    85b4:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    85b6:	bf 91       	pop	r27
	pop r26
    85b8:	af 91       	pop	r26
	pop r25
    85ba:	9f 91       	pop	r25
	pop r24
    85bc:	8f 91       	pop	r24
	pop r23
    85be:	7f 91       	pop	r23
	pop r22
    85c0:	6f 91       	pop	r22
	pop r21
    85c2:	5f 91       	pop	r21
	pop r20
    85c4:	4f 91       	pop	r20
	pop r19
    85c6:	3f 91       	pop	r19
	pop r18
    85c8:	2f 91       	pop	r18

000085ca <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    85ca:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    85cc:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    85ce:	ff 91       	pop	r31
	pop ZL
    85d0:	ef 91       	pop	r30
	pop r1
    85d2:	1f 90       	pop	r1
	pop r0
    85d4:	0f 90       	pop	r0
	reti
    85d6:	18 95       	reti

000085d8 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    85d8:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    85da:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    85dc:	00 c0       	rjmp	.+0      	; 0x85de <hsync_pulse+0x6>
	call update_sound
    85de:	0e 94 fd 42 	call	0x85fa	; 0x85fa <update_sound>

	lds ZL,sync_pulse
    85e2:	e0 91 eb 0a 	lds	r30, 0x0AEB
	dec ZL
    85e6:	ea 95       	dec	r30
	sts sync_pulse,ZL
    85e8:	e0 93 eb 0a 	sts	0x0AEB, r30

	ret
    85ec:	08 95       	ret

000085ee <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    85ee:	e0 91 03 0b 	lds	r30, 0x0B03
	sbrc ZL,0
    85f2:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    85f4:	0e 94 f0 47 	call	0x8fe0	; 0x8fe0 <ProcessMusic>
#endif

	ret
    85f8:	08 95       	ret

000085fa <update_sound>:

; Destroys: Z,r0,r1
; cycles: 212+
;****************************
update_sound:
	push r16
    85fa:	0f 93       	push	r16
	push r17
    85fc:	1f 93       	push	r17
	push r18
    85fe:	2f 93       	push	r18
	push r28
    8600:	cf 93       	push	r28
	push r29
    8602:	df 93       	push	r29

	mov r18,ZL
    8604:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    8606:	00 91 05 0b 	lds	r16, 0x0B05
	lds r17,tr1_pos_frac
    860a:	10 91 07 0b 	lds	r17, 0x0B07
	add	r17,r16	;add step to fractional part of sample pos
    860e:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    8610:	00 91 06 0b 	lds	r16, 0x0B06
	lds ZL,tr1_pos_lo
    8614:	e0 91 08 0b 	lds	r30, 0x0B08
	lds ZH,tr1_pos_hi 
    8618:	f0 91 09 0b 	lds	r31, 0x0B09
	adc ZL,r16	;add step to low byte of sample pos
    861c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    861e:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    8620:	e0 93 08 0b 	sts	0x0B08, r30
	sts tr1_pos_frac,r17
    8624:	10 93 07 0b 	sts	0x0B07, r17
	lds r17,tr1_vol
    8628:	10 91 04 0b 	lds	r17, 0x0B04
	mulsu r16,r17;(sample*mixing vol)
    862c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    862e:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    8630:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    8632:	d0 2d       	mov	r29, r0
	nop
    8634:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    8636:	00 91 0b 0b 	lds	r16, 0x0B0B
	lds r17,tr2_pos_frac
    863a:	10 91 0d 0b 	lds	r17, 0x0B0D
	add	r17,r16	;add step to fractional part of sample pos
    863e:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    8640:	00 91 0c 0b 	lds	r16, 0x0B0C
	lds ZL,tr2_pos_lo
    8644:	e0 91 0e 0b 	lds	r30, 0x0B0E
	lds ZH,tr2_pos_hi 
    8648:	f0 91 0f 0b 	lds	r31, 0x0B0F
	adc ZL,r16	;add step to low byte of sample pos
    864c:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    864e:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    8650:	e0 93 0e 0b 	sts	0x0B0E, r30
	sts tr2_pos_frac,r17
    8654:	10 93 0d 0b 	sts	0x0B0D, r17
	lds r17,tr2_vol
    8658:	10 91 0a 0b 	lds	r17, 0x0B0A

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    865c:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    865e:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    8660:	20 ff       	sbrs	r18, 0
	rjmp .
    8662:	00 c0       	rjmp	.+0      	; 0x8664 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    8664:	01 03       	mulsu	r16, r17
	clr r0
    8666:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    8668:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    866a:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    866c:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    866e:	00 91 11 0b 	lds	r16, 0x0B11
	lds r17,tr3_pos_frac
    8672:	10 91 13 0b 	lds	r17, 0x0B13
	add	r17,r16				;add step to fractional part of sample pos
    8676:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    8678:	00 91 12 0b 	lds	r16, 0x0B12
	lds ZL,tr3_pos_lo
    867c:	e0 91 14 0b 	lds	r30, 0x0B14
	lds ZH,tr3_pos_hi 
    8680:	f0 91 15 0b 	lds	r31, 0x0B15
	adc ZL,r16				;add step to low byte of sample pos
    8684:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    8686:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    8688:	e0 93 14 0b 	sts	0x0B14, r30
	sts tr3_pos_frac,r17
    868c:	10 93 13 0b 	sts	0x0B13, r17
	lds r17,tr3_vol
    8690:	10 91 10 0b 	lds	r17, 0x0B10
	mulsu r16,r17			;(sample*mixing vol)
    8694:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    8696:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    8698:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    869a:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    869c:	00 91 18 0b 	lds	r16, 0x0B18
	lds r17,tr4_barrel_hi
    86a0:	10 91 19 0b 	lds	r17, 0x0B19
	lds ZL,tr4_divider
    86a4:	e0 91 1a 0b 	lds	r30, 0x0B1A
	dec ZL	
    86a8:	ea 95       	dec	r30
	brpl ch4_no_shift	
    86aa:	92 f4       	brpl	.+36     	; 0x86d0 <ch4_no_shift>

	lds ZH,tr4_params
    86ac:	f0 91 17 0b 	lds	r31, 0x0B17
	mov ZL,ZH
    86b0:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    86b2:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    86b4:	00 2e       	mov	r0, r16
	lsr r0
    86b6:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    86b8:	00 26       	eor	r0, r16
	bst r0,0
    86ba:	00 fa       	bst	r0, 0
	lsr r17
    86bc:	16 95       	lsr	r17
	ror r16
    86be:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    86c0:	16 f9       	bld	r17, 6
	sbrs ZH,0
    86c2:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    86c4:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    86c6:	00 93 18 0b 	sts	0x0B18, r16
	sts tr4_barrel_hi,r17
    86ca:	10 93 19 0b 	sts	0x0B19, r17

	rjmp ch4_end
    86ce:	03 c0       	rjmp	.+6      	; 0x86d6 <ch4_end>

000086d0 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    86d0:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    86d2:	1a 95       	dec	r17
	brne .-4
    86d4:	f1 f7       	brne	.-4      	; 0x86d2 <ch4_no_shift+0x2>

000086d6 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    86d6:	e0 93 1a 0b 	sts	0x0B1A, r30
	ldi r17,0x80 ;-128
    86da:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    86dc:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    86de:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    86e0:	21 ff       	sbrs	r18, 1
	rjmp .
    86e2:	00 c0       	rjmp	.+0      	; 0x86e4 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    86e4:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    86e6:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    86e8:	00 91 16 0b 	lds	r16, 0x0B16

	mulsu r17,r16;(sample*mixing vol)
    86ec:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    86ee:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    86f0:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    86f2:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    86f4:	00 91 1f 0b 	lds	r16, 0x0B1F
	lds r17,tr5_step_lo 
    86f8:	10 91 1d 0b 	lds	r17, 0x0B1D
	add r16,r17
    86fc:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    86fe:	00 93 1f 0b 	sts	0x0B1F, r16

	;add lo
	lds ZL,tr5_pos_lo
    8702:	e0 91 20 0b 	lds	r30, 0x0B20
	lds r17,tr5_step_hi 
    8706:	10 91 1e 0b 	lds	r17, 0x0B1E
	adc ZL,r17
    870a:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    870c:	f0 91 21 0b 	lds	r31, 0x0B21
	ldi r16,0
    8710:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    8712:	f0 1f       	adc	r31, r16

	movw r16,ZL
    8714:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    8716:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_len_hi	
    871a:	10 90 23 0b 	lds	r1, 0x0B23
	sub r16,r0
    871e:	00 19       	sub	r16, r0
	sbc r17,r1
    8720:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    8722:	00 90 24 0b 	lds	r0, 0x0B24
	lds r1,tr5_loop_end_hi
    8726:	10 90 25 0b 	lds	r1, 0x0B25

	cp ZL,r0
    872a:	e0 15       	cp	r30, r0
	cpc ZH,r1
    872c:	f1 05       	cpc	r31, r1
	brlo .+2
    872e:	08 f0       	brcs	.+2      	; 0x8732 <ch4_end+0x5c>
	movw ZL,r16
    8730:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    8732:	e0 93 20 0b 	sts	0x0B20, r30
	sts tr5_pos_hi,ZH
    8736:	f0 93 21 0b 	sts	0x0B21, r31

	lpm	r16,Z	;load sample
    873a:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    873c:	10 91 1c 0b 	lds	r17, 0x0B1C

	mulsu r16,r17;(sample*mixing vol)
    8740:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    8742:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    8744:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    8746:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    8748:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    874a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    874c:	d0 05       	cpc	r29, r0
	brlt .+2
    874e:	0c f0       	brlt	.+2      	; 0x8752 <ch4_end+0x7c>
	ldi r28,127
    8750:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    8752:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    8754:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    8756:	d0 05       	cpc	r29, r0
	brge .+2
    8758:	0c f4       	brge	.+2      	; 0x875c <ch4_end+0x86>
	ldi r28,-128
    875a:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    875c:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    875e:	c0 93 b3 00 	sts	0x00B3, r28

00008762 <update_sound_end>:
#endif


update_sound_end:

	pop r29
    8762:	df 91       	pop	r29
	pop r28
    8764:	cf 91       	pop	r28
	pop r18
    8766:	2f 91       	pop	r18
	pop r17
    8768:	1f 91       	pop	r17
	pop r16
    876a:	0f 91       	pop	r16
	
	ret
    876c:	08 95       	ret

0000876e <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    876e:	80 93 db 0a 	sts	0x0ADB, r24
	sts sprites_tile_banks+1,r25
    8772:	90 93 dc 0a 	sts	0x0ADC, r25
	ret
    8776:	08 95       	ret

00008778 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    8778:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    877a:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    877c:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    877e:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    8780:	68 e1       	ldi	r22, 0x18	; 24

00008782 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    8782:	6d 93       	st	X+, r22
	sbiw r30,1
    8784:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    8786:	e9 f7       	brne	.-6      	; 0x8782 <fill_vram_loop>

	clr r1
    8788:	11 24       	eor	r1, r1

	ret
    878a:	08 95       	ret

0000878c <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    878c:	50 91 e5 0a 	lds	r21, 0x0AE5
	add r20,21
    8790:	45 0f       	add	r20, r21
	rjmp SetTile	
    8792:	00 c0       	rjmp	.+0      	; 0x8794 <SetTile>

00008794 <SetTile>:

	ret

#else

	clr r25
    8794:	99 27       	eor	r25, r25
	clr r23	
    8796:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    8798:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    879a:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    879c:	08 0e       	add	r0, r24
	adc r1,r25
    879e:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    87a0:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    87a2:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    87a4:	a0 0d       	add	r26, r0
	adc XH,r1
    87a6:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    87a8:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    87aa:	4c 93       	st	X, r20

	clr r1
    87ac:	11 24       	eor	r1, r1

	ret
    87ae:	08 95       	ret

000087b0 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    87b0:	80 93 e5 0a 	sts	0x0AE5, r24
	ret
    87b4:	08 95       	ret

000087b6 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    87b6:	80 93 e3 0a 	sts	0x0AE3, r24
	sts tile_table_hi,r25	
    87ba:	90 93 e4 0a 	sts	0x0AE4, r25
	ret
    87be:	08 95       	ret

000087c0 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    87c0:	80 91 ec 0a 	lds	r24, 0x0AEC
	andi r24,SYNC_FLAG_VSYNC
    87c4:	81 70       	andi	r24, 0x01	; 1
	ret
    87c6:	08 95       	ret

000087c8 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    87c8:	20 91 ec 0a 	lds	r18, 0x0AEC
	andi r18,~SYNC_FLAG_VSYNC
    87cc:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    87ce:	20 93 ec 0a 	sts	0x0AEC, r18
	ret
    87d2:	08 95       	ret

000087d4 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    87d4:	88 23       	and	r24, r24
	brne rj_p2
    87d6:	29 f4       	brne	.+10     	; 0x87e2 <rj_p2>
		
	lds r24,joypad1_status_lo
    87d8:	80 91 f3 0a 	lds	r24, 0x0AF3
	lds r25,joypad1_status_lo+1
    87dc:	90 91 f4 0a 	lds	r25, 0x0AF4
	ret
    87e0:	08 95       	ret

000087e2 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    87e2:	80 91 f7 0a 	lds	r24, 0x0AF7
	lds r25,joypad2_status_lo+1	
    87e6:	90 91 f8 0a 	lds	r25, 0x0AF8

	ret
    87ea:	08 95       	ret

000087ec <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    87ec:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    87ee:	7a 95       	dec	r23
	brne .-4 ;~1 us
    87f0:	f1 f7       	brne	.-4      	; 0x87ee <WaitUs+0x2>
	nop
    87f2:	00 00       	nop
	sbiw r24,1
    87f4:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    87f6:	d1 f7       	brne	.-12     	; 0x87ec <WaitUs>

	ret
    87f8:	08 95       	ret

000087fa <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    87fa:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    87fc:	fe cf       	rjmp	.-4      	; 0x87fa <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    87fe:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8800:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    8802:	60 bd       	out	0x20, r22	; 32
   cli
    8804:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    8806:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    8808:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    880a:	78 94       	sei
   ret
    880c:	08 95       	ret

0000880e <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    880e:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    8810:	fe cf       	rjmp	.-4      	; 0x880e <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    8812:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    8814:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    8816:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    8818:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    881a:	80 b5       	in	r24, 0x20	; 32
   sei
    881c:	78 94       	sei
   ret
    881e:	08 95       	ret

00008820 <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    8820:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    8822:	80 93 eb 0a 	sts	0x0AEB, r24


		sts _SFR_MEM_ADDR(TIMSK1),r24
    8826:	80 93 6f 00 	sts	0x006F, r24
		sts _SFR_MEM_ADDR(OCR1AL),r24
    882a:	80 93 88 00 	sts	0x0088, r24
		sts _SFR_MEM_ADDR(OCR1AH),r24
    882e:	80 93 89 00 	sts	0x0089, r24
		sts _SFR_MEM_ADDR(OCR1BL),r24
    8832:	80 93 8a 00 	sts	0x008A, r24
		sts _SFR_MEM_ADDR(OCR1BH),r24
    8836:	80 93 8b 00 	sts	0x008B, r24
		sts _SFR_MEM_ADDR(TCNT1H),r24
    883a:	80 93 85 00 	sts	0x0085, r24
		sts _SFR_MEM_ADDR(TCNT1L),r24
    883e:	80 93 84 00 	sts	0x0084, r24
		
		sts _SFR_MEM_ADDR(TCCR1A),r24	
    8842:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    8846:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    8848:	80 93 81 00 	sts	0x0081, r24

		cli
    884c:	f8 94       	cli

		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    884e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    8850:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    8854:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    8856:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    885a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    885c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    8860:	90 93 60 00 	sts	0x0060, r25
	
		sei
    8864:	78 94       	sei

00008866 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    8866:	80 91 eb 0a 	lds	r24, 0x0AEB
		cpi r24,8
    886a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    886c:	e0 f3       	brcs	.-8      	; 0x8866 <wait>

		ret
    886e:	08 95       	ret

00008870 <GetTrueRandomSeed>:
	;********************************

	.global GetTrueRandomSeed
	.section .text.GetTrueRandomSeed
	GetTrueRandomSeed:
		lds r24,random_value
    8870:	80 91 fd 0a 	lds	r24, 0x0AFD
		lds r25,random_value+1
    8874:	90 91 fe 0a 	lds	r25, 0x0AFE
		ret
    8878:	08 95       	ret

0000887a <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    887a:	0f 93       	push	r16
		push r17
    887c:	1f 93       	push	r17

		in r16,_SFR_IO_ADDR(SREG)
    887e:	0f b7       	in	r16, 0x3f	; 63
		push r16
    8880:	0f 93       	push	r16

		lds r16,sync_pulse
    8882:	00 91 eb 0a 	lds	r16, 0x0AEB
		inc r16
    8886:	03 95       	inc	r16
		sts sync_pulse,r16
    8888:	00 93 eb 0a 	sts	0x0AEB, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    888c:	00 fd       	sbrc	r16, 0
		rjmp 1f
    888e:	08 c0       	rjmp	.+16     	; 0x88a0 <__vector_8+0x26>
		lds r17,random_value
    8890:	10 91 fd 0a 	lds	r17, 0x0AFD
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    8894:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    8898:	10 27       	eor	r17, r16
		sts random_value,r17
    889a:	10 93 fd 0a 	sts	0x0AFD, r17
		rjmp 2f
    889e:	07 c0       	rjmp	.+14     	; 0x88ae <__vector_8+0x34>
	1:
		lds r17,random_value+1
    88a0:	10 91 fe 0a 	lds	r17, 0x0AFE
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    88a4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    88a8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    88aa:	10 93 fe 0a 	sts	0x0AFE, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    88ae:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    88b0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    88b4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    88b6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    88b8:	1f 91       	pop	r17
		pop r16
    88ba:	0f 91       	pop	r16
		reti
    88bc:	18 95       	reti

000088be <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    88be:	98 e0       	ldi	r25, 0x08	; 8
    88c0:	88 e1       	ldi	r24, 0x18	; 24
    88c2:	0f b6       	in	r0, 0x3f	; 63
    88c4:	f8 94       	cli
    88c6:	a8 95       	wdr
    88c8:	80 93 60 00 	sts	0x0060, r24
    88cc:	0f be       	out	0x3f, r0	; 63
    88ce:	90 93 60 00 	sts	0x0060, r25
	while(1);
    88d2:	ff cf       	rjmp	.-2      	; 0x88d2 <SoftReset+0x14>

000088d4 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    88d4:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    88d6:	c8 95       	lpm
    88d8:	c8 95       	lpm
		Wait200ns();
    88da:	c8 95       	lpm
    88dc:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    88de:	12 98       	cbi	0x02, 2	; 2
    88e0:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    88e2:	80 e0       	ldi	r24, 0x00	; 0
    88e4:	90 e0       	ldi	r25, 0x00	; 0
    88e6:	20 e0       	ldi	r18, 0x00	; 0
    88e8:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    88ea:	36 95       	lsr	r19
    88ec:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    88ee:	96 95       	lsr	r25
    88f0:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    88f2:	c8 95       	lpm
    88f4:	c8 95       	lpm
			Wait200ns();
    88f6:	c8 95       	lpm
    88f8:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    88fa:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    88fc:	00 9b       	sbis	0x00, 0	; 0
    88fe:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    8900:	01 9b       	sbis	0x00, 1	; 0
    8902:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    8904:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    8906:	c8 95       	lpm
    8908:	c8 95       	lpm
			Wait200ns();
    890a:	c8 95       	lpm
    890c:	c8 95       	lpm
    890e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    8910:	61 f7       	brne	.-40     	; 0x88ea <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    8912:	30 93 f4 0a 	sts	0x0AF4, r19
    8916:	20 93 f3 0a 	sts	0x0AF3, r18
		joypad2_status_lo=p2ButtonsLo;
    891a:	90 93 f8 0a 	sts	0x0AF8, r25
    891e:	80 93 f7 0a 	sts	0x0AF7, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    8922:	80 91 f3 0a 	lds	r24, 0x0AF3
    8926:	90 91 f4 0a 	lds	r25, 0x0AF4
    892a:	0f 97       	sbiw	r24, 0x0f	; 15
    892c:	31 f0       	breq	.+12     	; 0x893a <ReadButtons+0x66>
    892e:	80 91 f7 0a 	lds	r24, 0x0AF7
    8932:	90 91 f8 0a 	lds	r25, 0x0AF8
    8936:	0f 97       	sbiw	r24, 0x0f	; 15
    8938:	11 f4       	brne	.+4      	; 0x893e <ReadButtons+0x6a>
		SoftReset();
    893a:	0e 94 5f 44 	call	0x88be	; 0x88be <SoftReset>
    893e:	08 95       	ret

00008940 <ReadControllers>:
 * program when CONTROLLERS_VSYNC_READ==0.
*/
void ReadControllers(){

	//Detect if devices are connected.
	joypadsConnectionStatus=0;
    8940:	10 92 36 0b 	sts	0x0B36, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    8944:	00 99       	sbic	0x00, 0	; 0
    8946:	03 c0       	rjmp	.+6      	; 0x894e <ReadControllers+0xe>
    8948:	81 e0       	ldi	r24, 0x01	; 1
    894a:	80 93 36 0b 	sts	0x0B36, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    894e:	01 99       	sbic	0x00, 1	; 0
    8950:	05 c0       	rjmp	.+10     	; 0x895c <ReadControllers+0x1c>
    8952:	80 91 36 0b 	lds	r24, 0x0B36
    8956:	82 60       	ori	r24, 0x02	; 2
    8958:	80 93 36 0b 	sts	0x0B36, r24
			
	//read the standard buttons
	ReadButtons();
    895c:	0c 94 6a 44 	jmp	0x88d4	; 0x88d4 <ReadButtons>

00008960 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    8960:	cf 93       	push	r28
    8962:	df 93       	push	r29
    8964:	c0 e0       	ldi	r28, 0x00	; 0
    8966:	d0 e0       	ldi	r29, 0x00	; 0
    8968:	fe 01       	movw	r30, r28
    896a:	e2 56       	subi	r30, 0x62	; 98
    896c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    896e:	64 91       	lpm	r22, Z
    8970:	ce 01       	movw	r24, r28
    8972:	0e 94 fd 43 	call	0x87fa	; 0x87fa <WriteEeprom>
    8976:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    8978:	c0 32       	cpi	r28, 0x20	; 32
    897a:	d1 05       	cpc	r29, r1
    897c:	a9 f7       	brne	.-22     	; 0x8968 <FormatEeprom+0x8>
    897e:	c0 e2       	ldi	r28, 0x20	; 32
    8980:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    8982:	6f ef       	ldi	r22, 0xFF	; 255
    8984:	ce 01       	movw	r24, r28
    8986:	0e 94 fd 43 	call	0x87fa	; 0x87fa <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    898a:	6f ef       	ldi	r22, 0xFF	; 255
    898c:	ce 01       	movw	r24, r28
    898e:	01 96       	adiw	r24, 0x01	; 1
    8990:	0e 94 fd 43 	call	0x87fa	; 0x87fa <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (EEPROM_MAX_BLOCKS*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    8994:	a0 96       	adiw	r28, 0x20	; 32
    8996:	c1 15       	cp	r28, r1
    8998:	88 e0       	ldi	r24, 0x08	; 8
    899a:	d8 07       	cpc	r29, r24
    899c:	91 f7       	brne	.-28     	; 0x8982 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    899e:	df 91       	pop	r29
    89a0:	cf 91       	pop	r28
    89a2:	08 95       	ret

000089a4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    89a4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    89a6:	80 e0       	ldi	r24, 0x00	; 0
    89a8:	90 e0       	ldi	r25, 0x00	; 0
    89aa:	0e 94 07 44 	call	0x880e	; 0x880e <ReadEeprom>
    89ae:	c8 2f       	mov	r28, r24
    89b0:	81 e0       	ldi	r24, 0x01	; 1
    89b2:	90 e0       	ldi	r25, 0x00	; 0
    89b4:	0e 94 07 44 	call	0x880e	; 0x880e <ReadEeprom>
    89b8:	28 2f       	mov	r18, r24
    89ba:	30 e0       	ldi	r19, 0x00	; 0
    89bc:	32 2f       	mov	r19, r18
    89be:	22 27       	eor	r18, r18
    89c0:	2c 0f       	add	r18, r28
    89c2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    89c4:	81 e0       	ldi	r24, 0x01	; 1
    89c6:	2a 35       	cpi	r18, 0x5A	; 90
    89c8:	35 45       	sbci	r19, 0x55	; 85
    89ca:	09 f0       	breq	.+2      	; 0x89ce <isEepromFormatted+0x2a>
    89cc:	80 e0       	ldi	r24, 0x00	; 0
}
    89ce:	cf 91       	pop	r28
    89d0:	08 95       	ret

000089d2 <EepromBlockExists>:
 * @return
 *  0x00 = Success, Block exists.
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK.
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND.
 */
char EepromBlockExists(unsigned int blockId, u16* eepromAddr, u8* nextFreeBlockId){
    89d2:	8f 92       	push	r8
    89d4:	9f 92       	push	r9
    89d6:	af 92       	push	r10
    89d8:	bf 92       	push	r11
    89da:	cf 92       	push	r12
    89dc:	df 92       	push	r13
    89de:	ef 92       	push	r14
    89e0:	ff 92       	push	r15
    89e2:	0f 93       	push	r16
    89e4:	1f 93       	push	r17
    89e6:	cf 93       	push	r28
    89e8:	df 93       	push	r29
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;
    89ea:	fb 01       	movw	r30, r22
    89ec:	11 82       	std	Z+1, r1	; 0x01
    89ee:	10 82       	st	Z, r1

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    89f0:	8f 3f       	cpi	r24, 0xFF	; 255
    89f2:	ff ef       	ldi	r31, 0xFF	; 255
    89f4:	9f 07       	cpc	r25, r31
    89f6:	89 f1       	breq	.+98     	; 0x8a5a <EepromBlockExists+0x88>
    89f8:	6a 01       	movw	r12, r20
    89fa:	8b 01       	movw	r16, r22
    89fc:	7c 01       	movw	r14, r24
    89fe:	a1 2c       	mov	r10, r1
    8a00:	b1 2c       	mov	r11, r1
    8a02:	c0 e0       	ldi	r28, 0x00	; 0
    8a04:	d3 e0       	ldi	r29, 0x03	; 3
    8a06:	91 2c       	mov	r9, r1
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    8a08:	c5 01       	movw	r24, r10
    8a0a:	0e 94 07 44 	call	0x880e	; 0x880e <ReadEeprom>
    8a0e:	88 2e       	mov	r8, r24
    8a10:	c5 01       	movw	r24, r10
    8a12:	01 96       	adiw	r24, 0x01	; 1
    8a14:	0e 94 07 44 	call	0x880e	; 0x880e <ReadEeprom>
    8a18:	28 2f       	mov	r18, r24
    8a1a:	30 e0       	ldi	r19, 0x00	; 0
    8a1c:	32 2f       	mov	r19, r18
    8a1e:	22 27       	eor	r18, r18
    8a20:	28 0d       	add	r18, r8
    8a22:	31 1d       	adc	r19, r1
		
		if(id==blockId){
    8a24:	2e 15       	cp	r18, r14
    8a26:	3f 05       	cpc	r19, r15
    8a28:	29 f4       	brne	.+10     	; 0x8a34 <EepromBlockExists+0x62>
			*eepromAddr=(i*EEPROM_BLOCK_SIZE);
    8a2a:	f8 01       	movw	r30, r16
    8a2c:	b1 82       	std	Z+1, r11	; 0x01
    8a2e:	a0 82       	st	Z, r10
			result=EEPROM_OK;
    8a30:	d0 e0       	ldi	r29, 0x00	; 0
    8a32:	0b c0       	rjmp	.+22     	; 0x8a4a <EepromBlockExists+0x78>
		}
		
		if(id==0xffff && nextFreeBlock==0){
    8a34:	2f 3f       	cpi	r18, 0xFF	; 255
    8a36:	3f 4f       	sbci	r19, 0xFF	; 255
    8a38:	41 f4       	brne	.+16     	; 0x8a4a <EepromBlockExists+0x78>
    8a3a:	91 10       	cpse	r9, r1
    8a3c:	06 c0       	rjmp	.+12     	; 0x8a4a <EepromBlockExists+0x78>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
    8a3e:	c1 14       	cp	r12, r1
    8a40:	d1 04       	cpc	r13, r1
    8a42:	11 f0       	breq	.+4      	; 0x8a48 <EepromBlockExists+0x76>
    8a44:	f6 01       	movw	r30, r12
    8a46:	c0 83       	st	Z, r28
    8a48:	9c 2e       	mov	r9, r28
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
		
	//scan all blocks and get the memory adress of that block and the next free block
	for(u8 i=0;i<EEPROM_MAX_BLOCKS;i++){
    8a4a:	cf 5f       	subi	r28, 0xFF	; 255
    8a4c:	f0 e2       	ldi	r31, 0x20	; 32
    8a4e:	af 0e       	add	r10, r31
    8a50:	b1 1c       	adc	r11, r1
    8a52:	c0 34       	cpi	r28, 0x40	; 64
    8a54:	c9 f6       	brne	.-78     	; 0x8a08 <EepromBlockExists+0x36>
			nextFreeBlock=i;
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
    8a56:	8d 2f       	mov	r24, r29
    8a58:	01 c0       	rjmp	.+2      	; 0x8a5c <EepromBlockExists+0x8a>
	u8 nextFreeBlock=0;
	u8 result=EEPROM_ERROR_BLOCK_NOT_FOUND;
	u16 id;
	*eepromAddr=0;

	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    8a5a:	81 e0       	ldi	r24, 0x01	; 1
			if(nextFreeBlockId!=NULL) *nextFreeBlockId=nextFreeBlock;					
		}
	}

	return result;
}
    8a5c:	df 91       	pop	r29
    8a5e:	cf 91       	pop	r28
    8a60:	1f 91       	pop	r17
    8a62:	0f 91       	pop	r16
    8a64:	ff 90       	pop	r15
    8a66:	ef 90       	pop	r14
    8a68:	df 90       	pop	r13
    8a6a:	cf 90       	pop	r12
    8a6c:	bf 90       	pop	r11
    8a6e:	af 90       	pop	r10
    8a70:	9f 90       	pop	r9
    8a72:	8f 90       	pop	r8
    8a74:	08 95       	ret

00008a76 <EepromWriteBlock>:
 * Returns:
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    8a76:	ef 92       	push	r14
    8a78:	ff 92       	push	r15
    8a7a:	0f 93       	push	r16
    8a7c:	1f 93       	push	r17
    8a7e:	cf 93       	push	r28
    8a80:	df 93       	push	r29
    8a82:	00 d0       	rcall	.+0      	; 0x8a84 <EepromWriteBlock+0xe>
    8a84:	1f 92       	push	r1
    8a86:	cd b7       	in	r28, 0x3d	; 61
    8a88:	de b7       	in	r29, 0x3e	; 62
    8a8a:	8c 01       	movw	r16, r24
	u16 eepromAddr=0;
    8a8c:	1a 82       	std	Y+2, r1	; 0x02
    8a8e:	19 82       	std	Y+1, r1	; 0x01
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;
    8a90:	1b 82       	std	Y+3, r1	; 0x03

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
    8a92:	ae 01       	movw	r20, r28
    8a94:	4d 5f       	subi	r20, 0xFD	; 253
    8a96:	5f 4f       	sbci	r21, 0xFF	; 255
    8a98:	be 01       	movw	r22, r28
    8a9a:	6f 5f       	subi	r22, 0xFF	; 255
    8a9c:	7f 4f       	sbci	r23, 0xFF	; 255
    8a9e:	fc 01       	movw	r30, r24
    8aa0:	80 81       	ld	r24, Z
    8aa2:	91 81       	ldd	r25, Z+1	; 0x01
    8aa4:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <EepromBlockExists>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;
    8aa8:	88 23       	and	r24, r24
    8aaa:	11 f0       	breq	.+4      	; 0x8ab0 <EepromWriteBlock+0x3a>
    8aac:	83 30       	cpi	r24, 0x03	; 3
    8aae:	19 f5       	brne	.+70     	; 0x8af6 <EepromWriteBlock+0x80>

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8ab0:	89 81       	ldd	r24, Y+1	; 0x01
    8ab2:	9a 81       	ldd	r25, Y+2	; 0x02
    8ab4:	89 2b       	or	r24, r25
    8ab6:	49 f4       	brne	.+18     	; 0x8aca <EepromWriteBlock+0x54>
    8ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    8aba:	88 23       	and	r24, r24
    8abc:	d9 f0       	breq	.+54     	; 0x8af4 <EepromWriteBlock+0x7e>
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    8abe:	f0 e2       	ldi	r31, 0x20	; 32
    8ac0:	8f 9f       	mul	r24, r31
    8ac2:	c0 01       	movw	r24, r0
    8ac4:	11 24       	eor	r1, r1
    8ac6:	9a 83       	std	Y+2, r25	; 0x02
    8ac8:	89 83       	std	Y+1, r24	; 0x01
    8aca:	78 01       	movw	r14, r16
    8acc:	20 e2       	ldi	r18, 0x20	; 32
    8ace:	e2 0e       	add	r14, r18
    8ad0:	f1 1c       	adc	r15, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		WriteEeprom(eepromAddr++,*srcPtr);
    8ad2:	f8 01       	movw	r30, r16
    8ad4:	61 91       	ld	r22, Z+
    8ad6:	8f 01       	movw	r16, r30
    8ad8:	89 81       	ldd	r24, Y+1	; 0x01
    8ada:	9a 81       	ldd	r25, Y+2	; 0x02
    8adc:	9c 01       	movw	r18, r24
    8ade:	2f 5f       	subi	r18, 0xFF	; 255
    8ae0:	3f 4f       	sbci	r19, 0xFF	; 255
    8ae2:	3a 83       	std	Y+2, r19	; 0x02
    8ae4:	29 83       	std	Y+1, r18	; 0x01
    8ae6:	0e 94 fd 43 	call	0x87fa	; 0x87fa <WriteEeprom>
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(eepromAddr==0 && nextFreeBlock!=0) eepromAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8aea:	0e 15       	cp	r16, r14
    8aec:	1f 05       	cpc	r17, r15
    8aee:	89 f7       	brne	.-30     	; 0x8ad2 <EepromWriteBlock+0x5c>
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
    8af0:	80 e0       	ldi	r24, 0x00	; 0
    8af2:	01 c0       	rjmp	.+2      	; 0x8af6 <EepromWriteBlock+0x80>
	u8 *srcPtr=(unsigned char *)block,res,nextFreeBlock=0;

	res=EepromBlockExists(block->id,&eepromAddr,&nextFreeBlock);
	if(res!=0 && res!=EEPROM_ERROR_BLOCK_NOT_FOUND) return res;

	if(eepromAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    8af4:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(eepromAddr++,*srcPtr);
		srcPtr++;	
	}
	
	return 0;
}
    8af6:	0f 90       	pop	r0
    8af8:	0f 90       	pop	r0
    8afa:	0f 90       	pop	r0
    8afc:	df 91       	pop	r29
    8afe:	cf 91       	pop	r28
    8b00:	1f 91       	pop	r17
    8b02:	0f 91       	pop	r16
    8b04:	ff 90       	pop	r15
    8b06:	ef 90       	pop	r14
    8b08:	08 95       	ret

00008b0a <EepromReadBlock>:
 * Returns: 
 *  0x00 = Success
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){	
    8b0a:	cf 92       	push	r12
    8b0c:	df 92       	push	r13
    8b0e:	ff 92       	push	r15
    8b10:	0f 93       	push	r16
    8b12:	1f 93       	push	r17
    8b14:	cf 93       	push	r28
    8b16:	df 93       	push	r29
    8b18:	00 d0       	rcall	.+0      	; 0x8b1a <EepromReadBlock+0x10>
    8b1a:	cd b7       	in	r28, 0x3d	; 61
    8b1c:	de b7       	in	r29, 0x3e	; 62
    8b1e:	8b 01       	movw	r16, r22
	u16 eepromAddr;
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
    8b20:	40 e0       	ldi	r20, 0x00	; 0
    8b22:	50 e0       	ldi	r21, 0x00	; 0
    8b24:	be 01       	movw	r22, r28
    8b26:	6f 5f       	subi	r22, 0xFF	; 255
    8b28:	7f 4f       	sbci	r23, 0xFF	; 255
    8b2a:	0e 94 e9 44 	call	0x89d2	; 0x89d2 <EepromBlockExists>
    8b2e:	f8 2e       	mov	r15, r24
	if(res!=0) return res;
    8b30:	81 11       	cpse	r24, r1
    8b32:	13 c0       	rjmp	.+38     	; 0x8b5a <EepromReadBlock+0x50>
    8b34:	68 01       	movw	r12, r16
    8b36:	80 e2       	ldi	r24, 0x20	; 32
    8b38:	c8 0e       	add	r12, r24
    8b3a:	d1 1c       	adc	r13, r1

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
		*blockPtr=ReadEeprom(eepromAddr++);
    8b3c:	89 81       	ldd	r24, Y+1	; 0x01
    8b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    8b40:	9c 01       	movw	r18, r24
    8b42:	2f 5f       	subi	r18, 0xFF	; 255
    8b44:	3f 4f       	sbci	r19, 0xFF	; 255
    8b46:	3a 83       	std	Y+2, r19	; 0x02
    8b48:	29 83       	std	Y+1, r18	; 0x01
    8b4a:	0e 94 07 44 	call	0x880e	; 0x880e <ReadEeprom>
    8b4e:	f8 01       	movw	r30, r16
    8b50:	81 93       	st	Z+, r24
    8b52:	8f 01       	movw	r16, r30
	u8 *blockPtr=(unsigned char *)block;

	u8 res=EepromBlockExists(blockId,&eepromAddr,NULL);
	if(res!=0) return res;

	for(u8 i=0;i<EEPROM_BLOCK_SIZE;i++){
    8b54:	ec 15       	cp	r30, r12
    8b56:	fd 05       	cpc	r31, r13
    8b58:	89 f7       	brne	.-30     	; 0x8b3c <EepromReadBlock+0x32>
		*blockPtr=ReadEeprom(eepromAddr++);
		blockPtr++;	
	}
	
	return EEPROM_OK;
}
    8b5a:	8f 2d       	mov	r24, r15
    8b5c:	0f 90       	pop	r0
    8b5e:	0f 90       	pop	r0
    8b60:	df 91       	pop	r29
    8b62:	cf 91       	pop	r28
    8b64:	1f 91       	pop	r17
    8b66:	0f 91       	pop	r16
    8b68:	ff 90       	pop	r15
    8b6a:	df 90       	pop	r13
    8b6c:	cf 90       	pop	r12
    8b6e:	08 95       	ret

00008b70 <GetPrngNumber>:
 * Input: Zero=return the next random value. Non-zero=Sets the seed value.
 */
u16 GetPrngNumber(u16 seed){
	static u16 prng_state;
  	
	if(seed!=0) prng_state=seed;
    8b70:	00 97       	sbiw	r24, 0x00	; 0
    8b72:	21 f0       	breq	.+8      	; 0x8b7c <GetPrngNumber+0xc>
    8b74:	90 93 01 0b 	sts	0x0B01, r25
    8b78:	80 93 00 0b 	sts	0x0B00, r24
	
	u16 bit  = ((prng_state >> 0) ^ (prng_state >> 2) ^ (prng_state >> 3) ^ (prng_state >> 5) ) & 1;
    8b7c:	20 91 00 0b 	lds	r18, 0x0B00
    8b80:	30 91 01 0b 	lds	r19, 0x0B01
    8b84:	a9 01       	movw	r20, r18
    8b86:	56 95       	lsr	r21
    8b88:	47 95       	ror	r20
    8b8a:	56 95       	lsr	r21
    8b8c:	47 95       	ror	r20
    8b8e:	c9 01       	movw	r24, r18
    8b90:	63 e0       	ldi	r22, 0x03	; 3
    8b92:	96 95       	lsr	r25
    8b94:	87 95       	ror	r24
    8b96:	6a 95       	dec	r22
    8b98:	e1 f7       	brne	.-8      	; 0x8b92 <GetPrngNumber+0x22>
    8b9a:	84 27       	eor	r24, r20
    8b9c:	95 27       	eor	r25, r21
    8b9e:	82 27       	eor	r24, r18
    8ba0:	93 27       	eor	r25, r19
    8ba2:	a9 01       	movw	r20, r18
    8ba4:	75 e0       	ldi	r23, 0x05	; 5
    8ba6:	56 95       	lsr	r21
    8ba8:	47 95       	ror	r20
    8baa:	7a 95       	dec	r23
    8bac:	e1 f7       	brne	.-8      	; 0x8ba6 <GetPrngNumber+0x36>
    8bae:	84 27       	eor	r24, r20
    8bb0:	95 27       	eor	r25, r21
	prng_state =  (prng_state >> 1) | (bit << 15);
    8bb2:	99 27       	eor	r25, r25
    8bb4:	86 95       	lsr	r24
    8bb6:	97 95       	ror	r25
    8bb8:	88 27       	eor	r24, r24
    8bba:	36 95       	lsr	r19
    8bbc:	27 95       	ror	r18
    8bbe:	82 2b       	or	r24, r18
    8bc0:	93 2b       	or	r25, r19
    8bc2:	90 93 01 0b 	sts	0x0B01, r25
    8bc6:	80 93 00 0b 	sts	0x0B00, r24
	return prng_state;   
}
    8bca:	08 95       	ret

00008bcc <PatchCommand00>:
/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 * Param:
 */
void PatchCommand00(Track* track, char param){
	track->envelopeStep=param;
    8bcc:	fc 01       	movw	r30, r24
    8bce:	67 87       	std	Z+15, r22	; 0x0f
    8bd0:	08 95       	ret

00008bd2 <PatchCommand01>:
 * Param:
 */
void PatchCommand01(Track* track, char param){
	(void)track; //to remove unused warning
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    8bd2:	e4 e0       	ldi	r30, 0x04	; 4
    8bd4:	fb e0       	ldi	r31, 0x0B	; 11
    8bd6:	81 e0       	ldi	r24, 0x01	; 1
    8bd8:	91 e0       	ldi	r25, 0x01	; 1
    8bda:	95 8b       	std	Z+21, r25	; 0x15
    8bdc:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    8bde:	63 8b       	std	Z+19, r22	; 0x13
    8be0:	08 95       	ret

00008be2 <PatchCommand05>:
}
/*
 * Command 05: End of note/fx
 * Param:
 */
void PatchCommand05(Track* track, char param){
    8be2:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    8be4:	90 81       	ld	r25, Z
    8be6:	9f 75       	andi	r25, 0x5F	; 95
    8be8:	90 83       	st	Z, r25
    8bea:	08 95       	ret

00008bec <PatchCommand06>:

/*
 * Command 06: Note hold
 * Param:
 */
void PatchCommand06(Track* track, char param){
    8bec:	fc 01       	movw	r30, r24
	(void)param; //to remove unused warning
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    8bee:	90 81       	ld	r25, Z
    8bf0:	90 64       	ori	r25, 0x40	; 64
    8bf2:	90 83       	st	Z, r25
    8bf4:	08 95       	ret

00008bf6 <PatchCommand07>:
 * Command 07: Set envelope volume
 * Param:
 */

void PatchCommand07(Track* track, char param){
	track->envelopeVol=param;
    8bf6:	fc 01       	movw	r30, r24
    8bf8:	66 87       	std	Z+14, r22	; 0x0e
    8bfa:	08 95       	ret

00008bfc <PatchCommand09>:
 * Command 09: Set tremolo level
 * Param:
*/

void PatchCommand09(Track* track, char param){
	track->tremoloLevel=param;
    8bfc:	fc 01       	movw	r30, r24
    8bfe:	62 87       	std	Z+10, r22	; 0x0a
    8c00:	08 95       	ret

00008c02 <PatchCommand10>:
/*
 * Command 10: Set tremolo rate
 * Param:
*/
void PatchCommand10(Track* track, char param){
	track->tremoloRate=param;
    8c02:	fc 01       	movw	r30, r24
    8c04:	63 87       	std	Z+11, r22	; 0x0b
    8c06:	08 95       	ret

00008c08 <PatchCommand11>:
/*
 * Command 11: Pitch slide (linear) 
 * Param: (+/-) half steps to slide to
*/

void PatchCommand11(Track* track, char param){
    8c08:	cf 93       	push	r28
    8c0a:	df 93       	push	r29
    8c0c:	ec 01       	movw	r28, r24
    8c0e:	46 2f       	mov	r20, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    8c10:	29 81       	ldd	r18, Y+1	; 0x01
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	f9 01       	movw	r30, r18
    8c16:	ee 0f       	add	r30, r30
    8c18:	ff 1f       	adc	r31, r31
    8c1a:	e8 5f       	subi	r30, 0xF8	; 248
    8c1c:	fa 46       	sbci	r31, 0x6A	; 106
    8c1e:	65 91       	lpm	r22, Z+
    8c20:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    8c22:	f9 01       	movw	r30, r18
    8c24:	e4 0f       	add	r30, r20
    8c26:	f1 1d       	adc	r31, r1
    8c28:	47 fd       	sbrc	r20, 7
    8c2a:	fa 95       	dec	r31
    8c2c:	ee 0f       	add	r30, r30
    8c2e:	ff 1f       	adc	r31, r31
    8c30:	e8 5f       	subi	r30, 0xF8	; 248
    8c32:	fa 46       	sbci	r31, 0x6A	; 106
    8c34:	85 91       	lpm	r24, Z+
    8c36:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/track->slideSpeed);
    8c38:	86 1b       	sub	r24, r22
    8c3a:	97 0b       	sbc	r25, r23
    8c3c:	68 85       	ldd	r22, Y+8	; 0x08
    8c3e:	70 e0       	ldi	r23, 0x00	; 0
    8c40:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
	if(delta==0)delta++;
    8c44:	61 15       	cp	r22, r1
    8c46:	71 05       	cpc	r23, r1
    8c48:	11 f4       	brne	.+4      	; 0x8c4e <PatchCommand11+0x46>
    8c4a:	61 e0       	ldi	r22, 0x01	; 1
    8c4c:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[track->channel].step+=delta;
    8c4e:	ea 81       	ldd	r30, Y+2	; 0x02
    8c50:	86 e0       	ldi	r24, 0x06	; 6
    8c52:	e8 9f       	mul	r30, r24
    8c54:	f0 01       	movw	r30, r0
    8c56:	11 24       	eor	r1, r1
    8c58:	ec 5f       	subi	r30, 0xFC	; 252
    8c5a:	f4 4f       	sbci	r31, 0xF4	; 244
    8c5c:	81 81       	ldd	r24, Z+1	; 0x01
    8c5e:	92 81       	ldd	r25, Z+2	; 0x02
    8c60:	86 0f       	add	r24, r22
    8c62:	97 1f       	adc	r25, r23
    8c64:	92 83       	std	Z+2, r25	; 0x02
    8c66:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    8c68:	7e 83       	std	Y+6, r23	; 0x06
    8c6a:	6d 83       	std	Y+5, r22	; 0x05
	track->flags|=TRACK_FLAGS_SLIDING;
    8c6c:	88 81       	ld	r24, Y
    8c6e:	88 60       	ori	r24, 0x08	; 8
    8c70:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8c72:	89 81       	ldd	r24, Y+1	; 0x01
    8c74:	48 0f       	add	r20, r24
    8c76:	4f 83       	std	Y+7, r20	; 0x07
}
    8c78:	df 91       	pop	r29
    8c7a:	cf 91       	pop	r28
    8c7c:	08 95       	ret

00008c7e <PatchCommand12>:
/*
 * Command 12: Pitch slide speed 
 * Param: slide speed (fixed 4:4)
 */
void PatchCommand12(Track* track, char param){
	track->slideSpeed=param;
    8c7e:	fc 01       	movw	r30, r24
    8c80:	60 87       	std	Z+8, r22	; 0x08
    8c82:	08 95       	ret

00008c84 <PatchCommand13>:
 *  Command 13: Loop start
 * Description: Defines the start of a loop. Works in conjunction with command 14 (PC_LOOP_END).
 *		 Param: loop count
 */
void PatchCommand13(Track* track, char param){
	track->loopCount=(u8)param;
    8c84:	fc 01       	movw	r30, r24
    8c86:	64 83       	std	Z+4, r22	; 0x04
    8c88:	08 95       	ret

00008c8a <PatchCommand02>:
/*
 * Command 02: Set wave
 * Param:
 */
void PatchCommand02(Track* track, char param){
	SetMixerWave(track->channel,param);
    8c8a:	fc 01       	movw	r30, r24
    8c8c:	82 81       	ldd	r24, Z+2	; 0x02
    8c8e:	0c 94 29 4a 	jmp	0x9452	; 0x9452 <SetMixerWave>

00008c92 <PatchCommand03>:
}
/*
 * Command 03: Note up * param
 * Param:
 */
void PatchCommand03(Track* track, char param){
    8c92:	fc 01       	movw	r30, r24
	track->note+=param;
    8c94:	91 81       	ldd	r25, Z+1	; 0x01
    8c96:	69 0f       	add	r22, r25
    8c98:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(track->channel,track->note);
    8c9a:	82 81       	ldd	r24, Z+2	; 0x02
    8c9c:	0c 94 12 4a 	jmp	0x9424	; 0x9424 <SetMixerNote>

00008ca0 <PatchCommand04>:
}
/*
 * Command 04: Note down * param
 * Param:
 */
void PatchCommand04(Track* track, char param){
    8ca0:	fc 01       	movw	r30, r24
	track->note-=param;
    8ca2:	91 81       	ldd	r25, Z+1	; 0x01
    8ca4:	96 1b       	sub	r25, r22
    8ca6:	69 2f       	mov	r22, r25
    8ca8:	91 83       	std	Z+1, r25	; 0x01
	SetMixerNote(track->channel,track->note);
    8caa:	82 81       	ldd	r24, Z+2	; 0x02
    8cac:	0c 94 12 4a 	jmp	0x9424	; 0x9424 <SetMixerNote>

00008cb0 <PatchCommand08>:
/*
 * Command 08: Set Note/Pitch
 * Param:
 */

void PatchCommand08(Track* track, char param){
    8cb0:	1f 93       	push	r17
    8cb2:	cf 93       	push	r28
    8cb4:	df 93       	push	r29
    8cb6:	ec 01       	movw	r28, r24
    8cb8:	16 2f       	mov	r17, r22
	SetMixerNote(track->channel,param);
    8cba:	8a 81       	ldd	r24, Y+2	; 0x02
    8cbc:	0e 94 12 4a 	call	0x9424	; 0x9424 <SetMixerNote>
	track->note=param;
    8cc0:	19 83       	std	Y+1, r17	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8cc2:	88 81       	ld	r24, Y
    8cc4:	87 7f       	andi	r24, 0xF7	; 247
    8cc6:	88 83       	st	Y, r24
}
    8cc8:	df 91       	pop	r29
    8cca:	cf 91       	pop	r28
    8ccc:	1f 91       	pop	r17
    8cce:	08 95       	ret

00008cd0 <PatchCommand14>:
 *					1,PC_NOTE_DOWN,3,
 *					0,PC_LOOP_END,2,
 *					0,PATCH_END  
 *				};
 */
void PatchCommand14(Track* track, char param){
    8cd0:	dc 01       	movw	r26, r24
	if(track->loopCount>0){
    8cd2:	14 96       	adiw	r26, 0x04	; 4
    8cd4:	8c 91       	ld	r24, X
    8cd6:	14 97       	sbiw	r26, 0x04	; 4
    8cd8:	88 23       	and	r24, r24
    8cda:	19 f1       	breq	.+70     	; 0x8d22 <PatchCommand14+0x52>
    8cdc:	55 96       	adiw	r26, 0x15	; 21
    8cde:	2d 91       	ld	r18, X+
    8ce0:	3c 91       	ld	r19, X
    8ce2:	56 97       	sbiw	r26, 0x16	; 22
		//track->patchCommandStreamPos=track->loopStart;
		if(param!=0){
    8ce4:	66 23       	and	r22, r22
    8ce6:	79 f0       	breq	.+30     	; 0x8d06 <PatchCommand14+0x36>
			track->patchCommandStreamPos-=((param+1)*3);
    8ce8:	77 27       	eor	r23, r23
    8cea:	67 fd       	sbrc	r22, 7
    8cec:	70 95       	com	r23
    8cee:	6f 5f       	subi	r22, 0xFF	; 255
    8cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    8cf2:	ab 01       	movw	r20, r22
    8cf4:	44 0f       	add	r20, r20
    8cf6:	55 1f       	adc	r21, r21
    8cf8:	64 0f       	add	r22, r20
    8cfa:	75 1f       	adc	r23, r21
    8cfc:	26 1b       	sub	r18, r22
    8cfe:	37 0b       	sbc	r19, r23
    8d00:	09 c0       	rjmp	.+18     	; 0x8d14 <PatchCommand14+0x44>
			while(1){
				track->patchCommandStreamPos-=3;
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8d02:	ef 3f       	cpi	r30, 0xFF	; 255
    8d04:	39 f0       	breq	.+14     	; 0x8d14 <PatchCommand14+0x44>
		if(param!=0){
			track->patchCommandStreamPos-=((param+1)*3);
		}else{
			u8 command;
			while(1){
				track->patchCommandStreamPos-=3;
    8d06:	23 50       	subi	r18, 0x03	; 3
    8d08:	31 09       	sbc	r19, r1
    8d0a:	f9 01       	movw	r30, r18
    8d0c:	32 97       	sbiw	r30, 0x02	; 2
				command=pgm_read_byte(track->patchCommandStreamPos-3+1);
    8d0e:	e4 91       	lpm	r30, Z
				
				//if we found the loop point or somehow reached the previous patch, exit
				if(command==PC_LOOP_START || command==PATCH_END) break;				
    8d10:	ed 30       	cpi	r30, 0x0D	; 13
    8d12:	b9 f7       	brne	.-18     	; 0x8d02 <PatchCommand14+0x32>
    8d14:	56 96       	adiw	r26, 0x16	; 22
    8d16:	3c 93       	st	X, r19
    8d18:	2e 93       	st	-X, r18
    8d1a:	55 97       	sbiw	r26, 0x15	; 21
			}
		}
		track->loopCount--;
    8d1c:	81 50       	subi	r24, 0x01	; 1
    8d1e:	14 96       	adiw	r26, 0x04	; 4
    8d20:	8c 93       	st	X, r24
    8d22:	08 95       	ret

00008d24 <InitMusicPlayer>:

const Patch *patchPointers;

void InitMusicPlayer(const Patch *patchPointersParam){

	patchPointers=patchPointersParam;
    8d24:	90 93 af 0b 	sts	0x0BAF, r25
    8d28:	80 93 ae 0b 	sts	0x0BAE, r24

	masterVolume=DEFAULT_MASTER_VOL;
    8d2c:	8f e6       	ldi	r24, 0x6F	; 111
    8d2e:	80 93 b1 0b 	sts	0x0BB1, r24
#if MIDI_IN == ENABLED
	InitUartRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8d32:	10 92 02 0b 	sts	0x0B02, r1
    8d36:	e9 e4       	ldi	r30, 0x49	; 73
    8d38:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8d3a:	80 e0       	ldi	r24, 0x00	; 0
		tracks[t].channel=t;
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8d3c:	90 e1       	ldi	r25, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8d3e:	3f ef       	ldi	r19, 0xFF	; 255
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    8d40:	28 e1       	ldi	r18, 0x18	; 24
    8d42:	df 01       	movw	r26, r30
    8d44:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].channel=t;
    8d46:	8c 93       	st	X, r24
    8d48:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    8d4a:	9c 93       	st	X, r25
    8d4c:	1d 96       	adiw	r26, 0x0d	; 13
		tracks[t].noteVol=0;
    8d4e:	1c 92       	st	X, r1
    8d50:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    8d52:	3c 93       	st	X, r19
		tracks[t].patchNo=DEFAULT_PATCH;
    8d54:	10 82       	st	Z, r1
    8d56:	11 97       	sbiw	r26, 0x01	; 1
		tracks[t].tremoloRate=24; //~6hz
    8d58:	2c 93       	st	X, r18
    8d5a:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    8d5c:	9c 93       	st	X, r25
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    8d5e:	8f 5f       	subi	r24, 0xFF	; 255
    8d60:	77 96       	adiw	r30, 0x17	; 23
    8d62:	85 30       	cpi	r24, 0x05	; 5
    8d64:	71 f7       	brne	.-36     	; 0x8d42 <InitMusicPlayer+0x1e>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    8d66:	08 95       	ret

00008d68 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    8d68:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    8d6a:	ed 91       	ld	r30, X+
    8d6c:	fc 91       	ld	r31, X
    8d6e:	11 97       	sbiw	r26, 0x01	; 1
    8d70:	9f 01       	movw	r18, r30
    8d72:	2f 5f       	subi	r18, 0xFF	; 255
    8d74:	3f 4f       	sbci	r19, 0xFF	; 255
    8d76:	11 96       	adiw	r26, 0x01	; 1
    8d78:	3c 93       	st	X, r19
    8d7a:	2e 93       	st	-X, r18
    8d7c:	e4 91       	lpm	r30, Z
    8d7e:	e7 fd       	sbrc	r30, 7
    8d80:	03 c0       	rjmp	.+6      	; 0x8d88 <ReadVarLen+0x20>
    8d82:	8e 2f       	mov	r24, r30
    8d84:	90 e0       	ldi	r25, 0x00	; 0
    8d86:	08 95       	ret
    {
       value &= 0x7F;
    8d88:	ef 77       	andi	r30, 0x7F	; 127
    8d8a:	8e 2f       	mov	r24, r30
    8d8c:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    8d8e:	96 95       	lsr	r25
    8d90:	98 2f       	mov	r25, r24
    8d92:	88 27       	eor	r24, r24
    8d94:	97 95       	ror	r25
    8d96:	87 95       	ror	r24
    8d98:	2f 5f       	subi	r18, 0xFF	; 255
    8d9a:	3f 4f       	sbci	r19, 0xFF	; 255
    8d9c:	f9 01       	movw	r30, r18
    8d9e:	31 97       	sbiw	r30, 0x01	; 1
    8da0:	e4 91       	lpm	r30, Z
    8da2:	4e 2f       	mov	r20, r30
    8da4:	4f 77       	andi	r20, 0x7F	; 127
    8da6:	84 0f       	add	r24, r20
    8da8:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    8daa:	e7 fd       	sbrc	r30, 7
    8dac:	f0 cf       	rjmp	.-32     	; 0x8d8e <ReadVarLen+0x26>
    8dae:	2d 93       	st	X+, r18
    8db0:	3c 93       	st	X, r19
    }


    return value;
}
    8db2:	08 95       	ret

00008db4 <TriggerCommon>:




void TriggerCommon(Track* track,u8 patch,u8 volume,u8 note){
    8db4:	ef 92       	push	r14
    8db6:	ff 92       	push	r15
    8db8:	0f 93       	push	r16
    8dba:	1f 93       	push	r17
    8dbc:	cf 93       	push	r28
    8dbe:	df 93       	push	r29
    8dc0:	1f 92       	push	r1
    8dc2:	cd b7       	in	r28, 0x3d	; 61
    8dc4:	de b7       	in	r29, 0x3e	; 62
    8dc6:	7c 01       	movw	r14, r24
    8dc8:	16 2f       	mov	r17, r22
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    8dca:	fc 01       	movw	r30, r24
    8dcc:	80 81       	ld	r24, Z
    8dce:	08 2f       	mov	r16, r24
    8dd0:	00 1f       	adc	r16, r16
    8dd2:	00 27       	eor	r16, r16
    8dd4:	00 1f       	adc	r16, r16

	track->envelopeStep=0; 
    8dd6:	17 86       	std	Z+15, r1	; 0x0f
	track->envelopeVol=0xff; 
    8dd8:	9f ef       	ldi	r25, 0xFF	; 255
    8dda:	96 87       	std	Z+14, r25	; 0x0e
	track->noteVol=volume;
    8ddc:	45 87       	std	Z+13, r20	; 0x0d
	track->patchPlayingTime=0;
    8dde:	14 8a       	std	Z+20, r1	; 0x14
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8de0:	87 7b       	andi	r24, 0xB7	; 183
    8de2:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8de4:	12 86       	std	Z+10, r1	; 0x0a
	track->tremoloPos=0;
    8de6:	11 86       	std	Z+9, r1	; 0x09
	track->note=note;
    8de8:	21 83       	std	Z+1, r18	; 0x01
	track->loopCount=0;
    8dea:	14 82       	std	Z+4, r1	; 0x04

#if MUSIC_ENGINE == MIDI
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    8dec:	93 83       	std	Z+3, r25	; 0x03
#endif

	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(track->channel==3){
    8dee:	82 81       	ldd	r24, Z+2	; 0x02
    8df0:	83 30       	cpi	r24, 0x03	; 3
    8df2:	69 f4       	brne	.+26     	; 0x8e0e <TriggerCommon+0x5a>
			//noise channel		
			if(!isFx) patch=note;			
    8df4:	01 11       	cpse	r16, r1
    8df6:	01 c0       	rjmp	.+2      	; 0x8dfa <TriggerCommon+0x46>
    8df8:	12 2f       	mov	r17, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8dfa:	81 e0       	ldi	r24, 0x01	; 1
    8dfc:	91 e0       	ldi	r25, 0x01	; 1
    8dfe:	90 93 19 0b 	sts	0x0B19, r25
    8e02:	80 93 18 0b 	sts	0x0B18, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8e06:	81 e0       	ldi	r24, 0x01	; 1
    8e08:	80 93 17 0b 	sts	0x0B17, r24
    8e0c:	39 c0       	rjmp	.+114    	; 0x8e80 <TriggerCommon+0xcc>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(track->channel==4){
    8e0e:	84 30       	cpi	r24, 0x04	; 4
    8e10:	69 f5       	brne	.+90     	; 0x8e6c <TriggerCommon+0xb8>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8e12:	10 92 1f 0b 	sts	0x0B1F, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8e16:	80 91 ae 0b 	lds	r24, 0x0BAE
    8e1a:	90 91 af 0b 	lds	r25, 0x0BAF
    8e1e:	f9 e0       	ldi	r31, 0x09	; 9
    8e20:	6f 9f       	mul	r22, r31
    8e22:	80 0d       	add	r24, r0
    8e24:	91 1d       	adc	r25, r1
    8e26:	11 24       	eor	r1, r1
    8e28:	fc 01       	movw	r30, r24
    8e2a:	31 96       	adiw	r30, 0x01	; 1
    8e2c:	a5 91       	lpm	r26, Z+
    8e2e:	b4 91       	lpm	r27, Z
				mixer.channels.type.pcm.position=pos;				
    8e30:	b0 93 21 0b 	sts	0x0B21, r27
    8e34:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    8e38:	ac 01       	movw	r20, r24
    8e3a:	49 5f       	subi	r20, 0xF9	; 249
    8e3c:	5f 4f       	sbci	r21, 0xFF	; 255
    8e3e:	fa 01       	movw	r30, r20
    8e40:	65 91       	lpm	r22, Z+
    8e42:	74 91       	lpm	r23, Z
    8e44:	05 96       	adiw	r24, 0x05	; 5
    8e46:	fc 01       	movw	r30, r24
    8e48:	85 91       	lpm	r24, Z+
    8e4a:	94 91       	lpm	r25, Z
    8e4c:	68 1b       	sub	r22, r24
    8e4e:	79 0b       	sbc	r23, r25
    8e50:	70 93 23 0b 	sts	0x0B23, r23
    8e54:	60 93 22 0b 	sts	0x0B22, r22
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    8e58:	fa 01       	movw	r30, r20
    8e5a:	85 91       	lpm	r24, Z+
    8e5c:	94 91       	lpm	r25, Z
    8e5e:	a8 0f       	add	r26, r24
    8e60:	b9 1f       	adc	r27, r25
    8e62:	b0 93 25 0b 	sts	0x0B25, r27
    8e66:	a0 93 24 0b 	sts	0x0B24, r26
    8e6a:	05 c0       	rjmp	.+10     	; 0x8e76 <TriggerCommon+0xc2>
				SetMixerNote(track->channel,note);
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(track->channel,0);//default wave
    8e6c:	60 e0       	ldi	r22, 0x00	; 0
    8e6e:	29 83       	std	Y+1, r18	; 0x01
    8e70:	0e 94 29 4a 	call	0x9452	; 0x9452 <SetMixerWave>
			SetMixerNote(track->channel,note);
    8e74:	29 81       	ldd	r18, Y+1	; 0x01
    8e76:	62 2f       	mov	r22, r18
    8e78:	f7 01       	movw	r30, r14
    8e7a:	82 81       	ldd	r24, Z+2	; 0x02
    8e7c:	0e 94 12 4a 	call	0x9424	; 0x9424 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    8e80:	f7 01       	movw	r30, r14

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8e82:	00 23       	and	r16, r16
    8e84:	11 f0       	breq	.+4      	; 0x8e8a <TriggerCommon+0xd6>
		track->fxPatchNo=patch;
    8e86:	11 8b       	std	Z+17, r17	; 0x11
    8e88:	01 c0       	rjmp	.+2      	; 0x8e8c <TriggerCommon+0xd8>
	}else{
		track->patchNo=patch;	
    8e8a:	10 8b       	std	Z+16, r17	; 0x10
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    8e8c:	e0 91 ae 0b 	lds	r30, 0x0BAE
    8e90:	f0 91 af 0b 	lds	r31, 0x0BAF
    8e94:	39 e0       	ldi	r19, 0x09	; 9
    8e96:	13 9f       	mul	r17, r19
    8e98:	e0 0d       	add	r30, r0
    8e9a:	f1 1d       	adc	r31, r1
    8e9c:	11 24       	eor	r1, r1
    8e9e:	33 96       	adiw	r30, 0x03	; 3
    8ea0:	85 91       	lpm	r24, Z+
    8ea2:	94 91       	lpm	r25, Z
	if(pos==NULL){
		track->patchCommandStreamPos=NULL;
    8ea4:	f7 01       	movw	r30, r14
	}else{
		track->patchNo=patch;	
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
	if(pos==NULL){
    8ea6:	00 97       	sbiw	r24, 0x00	; 0
    8ea8:	19 f4       	brne	.+6      	; 0x8eb0 <TriggerCommon+0xfc>
		track->patchCommandStreamPos=NULL;
    8eaa:	16 8a       	std	Z+22, r1	; 0x16
    8eac:	15 8a       	std	Z+21, r1	; 0x15
    8eae:	08 c0       	rjmp	.+16     	; 0x8ec0 <TriggerCommon+0x10c>
	}else{
		track->patchCurrDeltaTime=0;
    8eb0:	13 8a       	std	Z+19, r1	; 0x13
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8eb2:	fc 01       	movw	r30, r24
    8eb4:	24 91       	lpm	r18, Z
    8eb6:	f7 01       	movw	r30, r14
    8eb8:	22 8b       	std	Z+18, r18	; 0x12
    8eba:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8ebc:	96 8b       	std	Z+22, r25	; 0x16
    8ebe:	85 8b       	std	Z+21, r24	; 0x15
	}

}
    8ec0:	0f 90       	pop	r0
    8ec2:	df 91       	pop	r29
    8ec4:	cf 91       	pop	r28
    8ec6:	1f 91       	pop	r17
    8ec8:	0f 91       	pop	r16
    8eca:	ff 90       	pop	r15
    8ecc:	ef 90       	pop	r14
    8ece:	08 95       	ret

00008ed0 <TriggerFx>:

/* Trigger a sound effect.
 * Method allocates the channel based on priority.
 * Retrig: if this fx if already playing on a track, reuse same track.
 */
void TriggerFx(unsigned char patch,unsigned char volume,bool retrig){
    8ed0:	cf 93       	push	r28
    8ed2:	df 93       	push	r29
	unsigned char channel;
	
	unsigned char type=(unsigned char)pgm_read_byte(&(patchPointers[patch].type));
    8ed4:	e0 91 ae 0b 	lds	r30, 0x0BAE
    8ed8:	f0 91 af 0b 	lds	r31, 0x0BAF
    8edc:	99 e0       	ldi	r25, 0x09	; 9
    8ede:	89 9f       	mul	r24, r25
    8ee0:	e0 0d       	add	r30, r0
    8ee2:	f1 1d       	adc	r31, r1
    8ee4:	11 24       	eor	r1, r1
    8ee6:	e4 91       	lpm	r30, Z

	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
    8ee8:	e1 30       	cpi	r30, 0x01	; 1
    8eea:	e9 f0       	breq	.+58     	; 0x8f26 <TriggerFx+0x56>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
    8eec:	e2 30       	cpi	r30, 0x02	; 2
    8eee:	e9 f0       	breq	.+58     	; 0x8f2a <TriggerFx+0x5a>
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
    8ef0:	20 91 50 0b 	lds	r18, 0x0B50
    8ef4:	27 ff       	sbrs	r18, 7
    8ef6:	1d c0       	rjmp	.+58     	; 0x8f32 <TriggerFx+0x62>
    8ef8:	20 91 61 0b 	lds	r18, 0x0B61
    8efc:	28 13       	cpse	r18, r24
    8efe:	02 c0       	rjmp	.+4      	; 0x8f04 <TriggerFx+0x34>
    8f00:	41 11       	cpse	r20, r1
    8f02:	17 c0       	rjmp	.+46     	; 0x8f32 <TriggerFx+0x62>
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
    8f04:	20 91 67 0b 	lds	r18, 0x0B67
    8f08:	27 ff       	sbrs	r18, 7
    8f0a:	11 c0       	rjmp	.+34     	; 0x8f2e <TriggerFx+0x5e>
    8f0c:	20 91 78 0b 	lds	r18, 0x0B78
    8f10:	28 13       	cpse	r18, r24
    8f12:	02 c0       	rjmp	.+4      	; 0x8f18 <TriggerFx+0x48>
    8f14:	41 11       	cpse	r20, r1
    8f16:	0b c0       	rjmp	.+22     	; 0x8f2e <TriggerFx+0x5e>
		channel=2;
	}else{
		//both channels have fx playing, use the oldest one
		if(tracks[1].patchPlayingTime>tracks[2].patchPlayingTime){
    8f18:	20 91 64 0b 	lds	r18, 0x0B64
    8f1c:	90 91 7b 0b 	lds	r25, 0x0B7B
    8f20:	92 17       	cp	r25, r18
    8f22:	28 f4       	brcc	.+10     	; 0x8f2e <TriggerFx+0x5e>
    8f24:	06 c0       	rjmp	.+12     	; 0x8f32 <TriggerFx+0x62>
	//find the channel to play the fx
	//try to steal voice 2 then 1
	//never steal voice 0, reserve it for lead melodies
	if(type==1 || (type==2 && MIXER_CHAN4_TYPE == 1)){
		//noise or PCM channel fx		
		channel=3;
    8f26:	c3 e0       	ldi	r28, 0x03	; 3
    8f28:	05 c0       	rjmp	.+10     	; 0x8f34 <TriggerFx+0x64>
	}else if(type==2){
		channel=4;
    8f2a:	c4 e0       	ldi	r28, 0x04	; 4
    8f2c:	03 c0       	rjmp	.+6      	; 0x8f34 <TriggerFx+0x64>
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
	}else if( (tracks[2].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[2].fxPatchNo==patch && (tracks[2].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing				
		channel=2;
    8f2e:	c2 e0       	ldi	r28, 0x02	; 2
    8f30:	01 c0       	rjmp	.+2      	; 0x8f34 <TriggerFx+0x64>
		//noise or PCM channel fx		
		channel=3;
	}else if(type==2){
		channel=4;
	}else if( (tracks[1].flags&TRACK_FLAGS_PRIORITY)==0 || (tracks[1].fxPatchNo==patch && (tracks[1].flags&TRACK_FLAGS_PRIORITY)!=0 && retrig==true)){ //fx already playing
		channel=1;
    8f32:	c1 e0       	ldi	r28, 0x01	; 1
			channel=2;
		}
	}				

	Track* track=&tracks[channel];
	track->flags=TRACK_FLAGS_PRIORITY; //priority=1;
    8f34:	97 e1       	ldi	r25, 0x17	; 23
    8f36:	c9 9f       	mul	r28, r25
    8f38:	e0 01       	movw	r28, r0
    8f3a:	11 24       	eor	r1, r1
    8f3c:	c7 5c       	subi	r28, 0xC7	; 199
    8f3e:	d4 4f       	sbci	r29, 0xF4	; 244
    8f40:	90 e8       	ldi	r25, 0x80	; 128
    8f42:	98 83       	st	Y, r25
	track->patchCommandStreamPos = NULL;
    8f44:	1e 8a       	std	Y+22, r1	; 0x16
    8f46:	1d 8a       	std	Y+21, r1	; 0x15
	TriggerCommon(track,patch,volume,80);
    8f48:	20 e5       	ldi	r18, 0x50	; 80
    8f4a:	46 2f       	mov	r20, r22
    8f4c:	68 2f       	mov	r22, r24
    8f4e:	ce 01       	movw	r24, r28
    8f50:	0e 94 da 46 	call	0x8db4	; 0x8db4 <TriggerCommon>
	track->flags|=TRACK_FLAGS_PLAYING;
    8f54:	88 81       	ld	r24, Y
    8f56:	80 62       	ori	r24, 0x20	; 32
    8f58:	88 83       	st	Y, r24
}
    8f5a:	df 91       	pop	r29
    8f5c:	cf 91       	pop	r28
    8f5e:	08 95       	ret

00008f60 <TriggerNote>:


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    8f60:	cf 93       	push	r28
    8f62:	df 93       	push	r29
	Track* track=&tracks[channel];

	//allow only other music notes 
	if((track->flags&TRACK_FLAGS_PLAYING)==0 || (track->flags&TRACK_FLAGS_PRIORITY)==0){
    8f64:	a8 2f       	mov	r26, r24
    8f66:	b0 e0       	ldi	r27, 0x00	; 0
    8f68:	97 e1       	ldi	r25, 0x17	; 23
    8f6a:	89 9f       	mul	r24, r25
    8f6c:	f0 01       	movw	r30, r0
    8f6e:	11 24       	eor	r1, r1
    8f70:	e7 5c       	subi	r30, 0xC7	; 199
    8f72:	f4 4f       	sbci	r31, 0xF4	; 244
    8f74:	80 81       	ld	r24, Z
    8f76:	85 ff       	sbrs	r24, 5
    8f78:	02 c0       	rjmp	.+4      	; 0x8f7e <TriggerNote+0x1e>
    8f7a:	87 fd       	sbrc	r24, 7
    8f7c:	2e c0       	rjmp	.+92     	; 0x8fda <TriggerNote+0x7a>
			
		if(volume==0){ //note-off received
    8f7e:	21 11       	cpse	r18, r1
    8f80:	18 c0       	rjmp	.+48     	; 0x8fb2 <TriggerNote+0x52>

			
			//cut note if there's no envelope & no note hold
			if(track->envelopeStep==0 && !(track->flags&TRACK_FLAGS_HOLD_ENV)){
    8f82:	97 e1       	ldi	r25, 0x17	; 23
    8f84:	9a 9f       	mul	r25, r26
    8f86:	f0 01       	movw	r30, r0
    8f88:	9b 9f       	mul	r25, r27
    8f8a:	f0 0d       	add	r31, r0
    8f8c:	11 24       	eor	r1, r1
    8f8e:	e7 5c       	subi	r30, 0xC7	; 199
    8f90:	f4 4f       	sbci	r31, 0xF4	; 244
    8f92:	97 85       	ldd	r25, Z+15	; 0x0f
    8f94:	91 11       	cpse	r25, r1
    8f96:	02 c0       	rjmp	.+4      	; 0x8f9c <TriggerNote+0x3c>
    8f98:	86 ff       	sbrs	r24, 6
				track->noteVol=0;
    8f9a:	15 86       	std	Z+13, r1	; 0x0d
			}

			track->flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    8f9c:	97 e1       	ldi	r25, 0x17	; 23
    8f9e:	9a 9f       	mul	r25, r26
    8fa0:	f0 01       	movw	r30, r0
    8fa2:	9b 9f       	mul	r25, r27
    8fa4:	f0 0d       	add	r31, r0
    8fa6:	11 24       	eor	r1, r1
    8fa8:	e7 5c       	subi	r30, 0xC7	; 199
    8faa:	f4 4f       	sbci	r31, 0xF4	; 244
    8fac:	8f 7b       	andi	r24, 0xBF	; 191
    8fae:	80 83       	st	Z, r24
    8fb0:	14 c0       	rjmp	.+40     	; 0x8fda <TriggerNote+0x7a>
    8fb2:	82 2f       	mov	r24, r18
    8fb4:	24 2f       	mov	r18, r20
		}else{
		
			track->flags=0;//&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    8fb6:	97 e1       	ldi	r25, 0x17	; 23
    8fb8:	9a 9f       	mul	r25, r26
    8fba:	e0 01       	movw	r28, r0
    8fbc:	9b 9f       	mul	r25, r27
    8fbe:	d0 0d       	add	r29, r0
    8fc0:	11 24       	eor	r1, r1
    8fc2:	c7 5c       	subi	r28, 0xC7	; 199
    8fc4:	d4 4f       	sbci	r29, 0xF4	; 244
    8fc6:	18 82       	st	Y, r1
			track->patchCommandStreamPos = NULL;
    8fc8:	1e 8a       	std	Y+22, r1	; 0x16
    8fca:	1d 8a       	std	Y+21, r1	; 0x15
			TriggerCommon(track,patch,volume,note);
    8fcc:	48 2f       	mov	r20, r24
    8fce:	ce 01       	movw	r24, r28
    8fd0:	0e 94 da 46 	call	0x8db4	; 0x8db4 <TriggerCommon>
			track->flags|=TRACK_FLAGS_PLAYING;
    8fd4:	88 81       	ld	r24, Y
    8fd6:	80 62       	ori	r24, 0x20	; 32
    8fd8:	88 83       	st	Y, r24
		}

	}
}
    8fda:	df 91       	pop	r29
    8fdc:	cf 91       	pop	r28
    8fde:	08 95       	ret

00008fe0 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    8fe0:	6f 92       	push	r6
    8fe2:	7f 92       	push	r7
    8fe4:	8f 92       	push	r8
    8fe6:	9f 92       	push	r9
    8fe8:	af 92       	push	r10
    8fea:	bf 92       	push	r11
    8fec:	cf 92       	push	r12
    8fee:	df 92       	push	r13
    8ff0:	ef 92       	push	r14
    8ff2:	ff 92       	push	r15
    8ff4:	0f 93       	push	r16
    8ff6:	1f 93       	push	r17
    8ff8:	cf 93       	push	r28
    8ffa:	df 93       	push	r29
    8ffc:	c9 e3       	ldi	r28, 0x39	; 57
    8ffe:	db e0       	ldi	r29, 0x0B	; 11
    9000:	04 e0       	ldi	r16, 0x04	; 4
    9002:	1b e0       	ldi	r17, 0x0B	; 11
    9004:	d8 01       	movw	r26, r16
    9006:	9e 01       	movw	r18, r28
    9008:	40 e0       	ldi	r20, 0x00	; 0
    900a:	50 e0       	ldi	r21, 0x00	; 0
    900c:	ca 01       	movw	r24, r20
    900e:	87 5c       	subi	r24, 0xC7	; 199
    9010:	94 4f       	sbci	r25, 0xF4	; 244
    9012:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    9014:	fc 01       	movw	r30, r24
    9016:	87 85       	ldd	r24, Z+15	; 0x0f
    9018:	88 23       	and	r24, r24
    901a:	91 f0       	breq	.+36     	; 0x9040 <ProcessMusic+0x60>
			vol=track->envelopeVol+track->envelopeStep;		
    901c:	66 85       	ldd	r22, Z+14	; 0x0e
    901e:	99 27       	eor	r25, r25
    9020:	87 fd       	sbrc	r24, 7
    9022:	90 95       	com	r25
    9024:	86 0f       	add	r24, r22
    9026:	91 1d       	adc	r25, r1
    9028:	8f 3f       	cpi	r24, 0xFF	; 255
    902a:	91 05       	cpc	r25, r1
    902c:	19 f0       	breq	.+6      	; 0x9034 <ProcessMusic+0x54>
    902e:	14 f0       	brlt	.+4      	; 0x9034 <ProcessMusic+0x54>
    9030:	8f ef       	ldi	r24, 0xFF	; 255
    9032:	90 e0       	ldi	r25, 0x00	; 0
    9034:	97 ff       	sbrs	r25, 7
    9036:	02 c0       	rjmp	.+4      	; 0x903c <ProcessMusic+0x5c>
    9038:	80 e0       	ldi	r24, 0x00	; 0
    903a:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    903c:	f6 01       	movw	r30, r12
    903e:	86 87       	std	Z+14, r24	; 0x0e
		}

		//if volumes reaches zero and no more patch command, explicitly end playing on track
		//if(vol==0 && track->patchCommandStreamPos==NULL) track->flags&=~(TRACK_FLAGS_PLAYING);

		if(track->flags & TRACK_FLAGS_SLIDING){
    9040:	f9 01       	movw	r30, r18
    9042:	f0 80       	ld	r15, Z
    9044:	f3 fe       	sbrs	r15, 3
    9046:	2a c0       	rjmp	.+84     	; 0x909c <ProcessMusic+0xbc>

			mixer.channels.all[trackNo].step+=track->slideStep;
    9048:	65 81       	ldd	r22, Z+5	; 0x05
    904a:	76 81       	ldd	r23, Z+6	; 0x06
    904c:	11 96       	adiw	r26, 0x01	; 1
    904e:	8d 91       	ld	r24, X+
    9050:	9c 91       	ld	r25, X
    9052:	12 97       	sbiw	r26, 0x02	; 2
    9054:	86 0f       	add	r24, r22
    9056:	97 1f       	adc	r25, r23
    9058:	12 96       	adiw	r26, 0x02	; 2
    905a:	9c 93       	st	X, r25
    905c:	8e 93       	st	-X, r24
    905e:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    9060:	f6 01       	movw	r30, r12
    9062:	e7 80       	ldd	r14, Z+7	; 0x07
    9064:	ee 2d       	mov	r30, r14
    9066:	f0 e0       	ldi	r31, 0x00	; 0
    9068:	ee 0f       	add	r30, r30
    906a:	ff 1f       	adc	r31, r31
    906c:	e8 5f       	subi	r30, 0xF8	; 248
    906e:	fa 46       	sbci	r31, 0x6A	; 106
    9070:	c5 90       	lpm	r12, Z+
    9072:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    9074:	16 16       	cp	r1, r22
    9076:	17 06       	cpc	r1, r23
    9078:	24 f4       	brge	.+8      	; 0x9082 <ProcessMusic+0xa2>
    907a:	8c 15       	cp	r24, r12
    907c:	9d 05       	cpc	r25, r13
    907e:	30 f4       	brcc	.+12     	; 0x908c <ProcessMusic+0xac>
    9080:	0d c0       	rjmp	.+26     	; 0x909c <ProcessMusic+0xbc>
    9082:	67 2b       	or	r22, r23
    9084:	59 f0       	breq	.+22     	; 0x909c <ProcessMusic+0xbc>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    9086:	c8 16       	cp	r12, r24
    9088:	d9 06       	cpc	r13, r25
    908a:	40 f0       	brcs	.+16     	; 0x909c <ProcessMusic+0xbc>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    908c:	12 96       	adiw	r26, 0x02	; 2
    908e:	dc 92       	st	X, r13
    9090:	ce 92       	st	-X, r12
    9092:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    9094:	8f 2d       	mov	r24, r15
    9096:	87 7f       	andi	r24, 0xF7	; 247
    9098:	f9 01       	movw	r30, r18
    909a:	80 83       	st	Z, r24
    909c:	49 5e       	subi	r20, 0xE9	; 233
    909e:	5f 4f       	sbci	r21, 0xFF	; 255
    90a0:	29 5e       	subi	r18, 0xE9	; 233
    90a2:	3f 4f       	sbci	r19, 0xFF	; 255
    90a4:	16 96       	adiw	r26, 0x06	; 6
	u8 channel;
	Track* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    90a6:	43 37       	cpi	r20, 0x73	; 115
    90a8:	51 05       	cpc	r21, r1
    90aa:	09 f0       	breq	.+2      	; 0x90ae <ProcessMusic+0xce>
    90ac:	af cf       	rjmp	.-162    	; 0x900c <ProcessMusic+0x2c>
	}



	//Process song MIDI notes
	if(playSong){
    90ae:	80 91 02 0b 	lds	r24, 0x0B02
    90b2:	88 23       	and	r24, r24
    90b4:	09 f4       	brne	.+2      	; 0x90b8 <ProcessMusic+0xd8>
    90b6:	cc c0       	rjmp	.+408    	; 0x9250 <ProcessMusic+0x270>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    90b8:	57 e1       	ldi	r21, 0x17	; 23
    90ba:	f5 2e       	mov	r15, r21
	if(playSong){
	
		#if MUSIC_ENGINE == MIDI
			
			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    90bc:	80 91 ac 0b 	lds	r24, 0x0BAC
    90c0:	90 91 ad 0b 	lds	r25, 0x0BAD
    90c4:	20 91 b2 0b 	lds	r18, 0x0BB2
    90c8:	30 91 b3 0b 	lds	r19, 0x0BB3
    90cc:	82 17       	cp	r24, r18
    90ce:	93 07       	cpc	r25, r19
    90d0:	09 f0       	breq	.+2      	; 0x90d4 <ProcessMusic+0xf4>
    90d2:	b9 c0       	rjmp	.+370    	; 0x9246 <ProcessMusic+0x266>

				c1=pgm_read_byte(songPos++);
    90d4:	20 91 b5 0b 	lds	r18, 0x0BB5
    90d8:	30 91 b6 0b 	lds	r19, 0x0BB6
    90dc:	b9 01       	movw	r22, r18
    90de:	6f 5f       	subi	r22, 0xFF	; 255
    90e0:	7f 4f       	sbci	r23, 0xFF	; 255
    90e2:	70 93 b6 0b 	sts	0x0BB6, r23
    90e6:	60 93 b5 0b 	sts	0x0BB5, r22
    90ea:	f9 01       	movw	r30, r18
    90ec:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    90ee:	4f 3f       	cpi	r20, 0xFF	; 255
    90f0:	79 f5       	brne	.+94     	; 0x9150 <ProcessMusic+0x170>
					//META data type event
					c1=pgm_read_byte(songPos++);
    90f2:	a9 01       	movw	r20, r18
    90f4:	4e 5f       	subi	r20, 0xFE	; 254
    90f6:	5f 4f       	sbci	r21, 0xFF	; 255
    90f8:	50 93 b6 0b 	sts	0x0BB6, r21
    90fc:	40 93 b5 0b 	sts	0x0BB5, r20
    9100:	fb 01       	movw	r30, r22
    9102:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    9104:	6f 32       	cpi	r22, 0x2F	; 47
    9106:	19 f4       	brne	.+6      	; 0x910e <ProcessMusic+0x12e>
						playSong=false;
    9108:	10 92 02 0b 	sts	0x0B02, r1
						break;	
    910c:	9c c0       	rjmp	.+312    	; 0x9246 <ProcessMusic+0x266>
					}else if(c1==0x6){ //marker
    910e:	66 30       	cpi	r22, 0x06	; 6
    9110:	09 f0       	breq	.+2      	; 0x9114 <ProcessMusic+0x134>
    9112:	8c c0       	rjmp	.+280    	; 0x922c <ProcessMusic+0x24c>
						c1=pgm_read_byte(songPos++); //read len
    9114:	fa 01       	movw	r30, r20
    9116:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    9118:	c9 01       	movw	r24, r18
    911a:	04 96       	adiw	r24, 0x04	; 4
    911c:	90 93 b6 0b 	sts	0x0BB6, r25
    9120:	80 93 b5 0b 	sts	0x0BB5, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    9124:	f9 01       	movw	r30, r18
    9126:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    9128:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    912a:	e3 35       	cpi	r30, 0x53	; 83
    912c:	29 f4       	brne	.+10     	; 0x9138 <ProcessMusic+0x158>
							loopStart=songPos;
    912e:	90 93 b8 0b 	sts	0x0BB8, r25
    9132:	80 93 b7 0b 	sts	0x0BB7, r24
    9136:	7a c0       	rjmp	.+244    	; 0x922c <ProcessMusic+0x24c>
						}else if(c2=='E'){//loop end
    9138:	e5 34       	cpi	r30, 0x45	; 69
    913a:	09 f0       	breq	.+2      	; 0x913e <ProcessMusic+0x15e>
    913c:	77 c0       	rjmp	.+238    	; 0x922c <ProcessMusic+0x24c>
							songPos=loopStart;
    913e:	80 91 b7 0b 	lds	r24, 0x0BB7
    9142:	90 91 b8 0b 	lds	r25, 0x0BB8
    9146:	90 93 b6 0b 	sts	0x0BB6, r25
    914a:	80 93 b5 0b 	sts	0x0BB5, r24
    914e:	6e c0       	rjmp	.+220    	; 0x922c <ProcessMusic+0x24c>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    9150:	47 fd       	sbrc	r20, 7
    9152:	40 93 b0 0b 	sts	0x0BB0, r20
					channel=lastStatus&0x0f;
    9156:	90 91 b0 0b 	lds	r25, 0x0BB0
    915a:	89 2f       	mov	r24, r25
    915c:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    915e:	47 ff       	sbrs	r20, 7
    9160:	08 c0       	rjmp	.+16     	; 0x9172 <ProcessMusic+0x192>
    9162:	2e 5f       	subi	r18, 0xFE	; 254
    9164:	3f 4f       	sbci	r19, 0xFF	; 255
    9166:	30 93 b6 0b 	sts	0x0BB6, r19
    916a:	20 93 b5 0b 	sts	0x0BB5, r18
    916e:	fb 01       	movw	r30, r22
    9170:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    9172:	90 7f       	andi	r25, 0xF0	; 240
    9174:	90 3b       	cpi	r25, 0xB0	; 176
    9176:	e1 f0       	breq	.+56     	; 0x91b0 <ProcessMusic+0x1d0>
    9178:	90 3c       	cpi	r25, 0xC0	; 192
    917a:	09 f4       	brne	.+2      	; 0x917e <ProcessMusic+0x19e>
    917c:	51 c0       	rjmp	.+162    	; 0x9220 <ProcessMusic+0x240>
    917e:	90 39       	cpi	r25, 0x90	; 144
    9180:	09 f0       	breq	.+2      	; 0x9184 <ProcessMusic+0x1a4>
    9182:	54 c0       	rjmp	.+168    	; 0x922c <ProcessMusic+0x24c>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    9184:	e0 91 b5 0b 	lds	r30, 0x0BB5
    9188:	f0 91 b6 0b 	lds	r31, 0x0BB6
    918c:	9f 01       	movw	r18, r30
    918e:	2f 5f       	subi	r18, 0xFF	; 255
    9190:	3f 4f       	sbci	r19, 0xFF	; 255
    9192:	30 93 b6 0b 	sts	0x0BB6, r19
    9196:	20 93 b5 0b 	sts	0x0BB5, r18
    919a:	24 91       	lpm	r18, Z
    919c:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    919e:	f8 9e       	mul	r15, r24
    91a0:	f0 01       	movw	r30, r0
    91a2:	11 24       	eor	r1, r1
    91a4:	e7 5c       	subi	r30, 0xC7	; 199
    91a6:	f4 4f       	sbci	r31, 0xF4	; 244
    91a8:	60 89       	ldd	r22, Z+16	; 0x10
    91aa:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
    91ae:	3e c0       	rjmp	.+124    	; 0x922c <ProcessMusic+0x24c>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    91b0:	e0 91 b5 0b 	lds	r30, 0x0BB5
    91b4:	f0 91 b6 0b 	lds	r31, 0x0BB6
    91b8:	9f 01       	movw	r18, r30
    91ba:	2f 5f       	subi	r18, 0xFF	; 255
    91bc:	3f 4f       	sbci	r19, 0xFF	; 255
    91be:	30 93 b6 0b 	sts	0x0BB6, r19
    91c2:	20 93 b5 0b 	sts	0x0BB5, r18
    91c6:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    91c8:	47 30       	cpi	r20, 0x07	; 7
    91ca:	49 f4       	brne	.+18     	; 0x91de <ProcessMusic+0x1fe>
								tracks[channel].trackVol=c2<<1;
    91cc:	f8 9e       	mul	r15, r24
    91ce:	d0 01       	movw	r26, r0
    91d0:	11 24       	eor	r1, r1
    91d2:	a7 5c       	subi	r26, 0xC7	; 199
    91d4:	b4 4f       	sbci	r27, 0xF4	; 244
    91d6:	ee 0f       	add	r30, r30
    91d8:	1c 96       	adiw	r26, 0x0c	; 12
    91da:	ec 93       	st	X, r30
    91dc:	27 c0       	rjmp	.+78     	; 0x922c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_EXPRESSION){
    91de:	4b 30       	cpi	r20, 0x0B	; 11
    91e0:	49 f4       	brne	.+18     	; 0x91f4 <ProcessMusic+0x214>
								tracks[channel].expressionVol=c2<<1;
    91e2:	f8 9e       	mul	r15, r24
    91e4:	d0 01       	movw	r26, r0
    91e6:	11 24       	eor	r1, r1
    91e8:	a7 5c       	subi	r26, 0xC7	; 199
    91ea:	b4 4f       	sbci	r27, 0xF4	; 244
    91ec:	ee 0f       	add	r30, r30
    91ee:	13 96       	adiw	r26, 0x03	; 3
    91f0:	ec 93       	st	X, r30
    91f2:	1c c0       	rjmp	.+56     	; 0x922c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO){
    91f4:	4c 35       	cpi	r20, 0x5C	; 92
    91f6:	49 f4       	brne	.+18     	; 0x920a <ProcessMusic+0x22a>
								tracks[channel].tremoloLevel=c2<<1;
    91f8:	f8 9e       	mul	r15, r24
    91fa:	d0 01       	movw	r26, r0
    91fc:	11 24       	eor	r1, r1
    91fe:	a7 5c       	subi	r26, 0xC7	; 199
    9200:	b4 4f       	sbci	r27, 0xF4	; 244
    9202:	ee 0f       	add	r30, r30
    9204:	1a 96       	adiw	r26, 0x0a	; 10
    9206:	ec 93       	st	X, r30
    9208:	11 c0       	rjmp	.+34     	; 0x922c <ProcessMusic+0x24c>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    920a:	44 36       	cpi	r20, 0x64	; 100
    920c:	79 f4       	brne	.+30     	; 0x922c <ProcessMusic+0x24c>
								tracks[channel].tremoloRate=c2<<1;
    920e:	f8 9e       	mul	r15, r24
    9210:	d0 01       	movw	r26, r0
    9212:	11 24       	eor	r1, r1
    9214:	a7 5c       	subi	r26, 0xC7	; 199
    9216:	b4 4f       	sbci	r27, 0xF4	; 244
    9218:	ee 0f       	add	r30, r30
    921a:	1b 96       	adiw	r26, 0x0b	; 11
    921c:	ec 93       	st	X, r30
    921e:	06 c0       	rjmp	.+12     	; 0x922c <ProcessMusic+0x24c>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    9220:	f8 9e       	mul	r15, r24
    9222:	f0 01       	movw	r30, r0
    9224:	11 24       	eor	r1, r1
    9226:	e7 5c       	subi	r30, 0xC7	; 199
    9228:	f4 4f       	sbci	r31, 0xF4	; 244
    922a:	40 8b       	std	Z+16, r20	; 0x10


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    922c:	85 eb       	ldi	r24, 0xB5	; 181
    922e:	9b e0       	ldi	r25, 0x0B	; 11
    9230:	0e 94 b4 46 	call	0x8d68	; 0x8d68 <ReadVarLen>
    9234:	90 93 b3 0b 	sts	0x0BB3, r25
    9238:	80 93 b2 0b 	sts	0x0BB2, r24
				currDeltaTime=0;
    923c:	10 92 ad 0b 	sts	0x0BAD, r1
    9240:	10 92 ac 0b 	sts	0x0BAC, r1
    9244:	3b cf       	rjmp	.-394    	; 0x90bc <ProcessMusic+0xdc>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    9246:	01 96       	adiw	r24, 0x01	; 1
    9248:	90 93 ad 0b 	sts	0x0BAD, r25
    924c:	80 93 ac 0b 	sts	0x0BAC, r24
    9250:	92 e4       	ldi	r25, 0x42	; 66
    9252:	a9 2e       	mov	r10, r25
    9254:	9b e0       	ldi	r25, 0x0B	; 11
    9256:	b9 2e       	mov	r11, r25
    9258:	2c e4       	ldi	r18, 0x4C	; 76
    925a:	c2 2e       	mov	r12, r18
    925c:	2b e0       	ldi	r18, 0x0B	; 11
    925e:	d2 2e       	mov	r13, r18
    9260:	3d e4       	ldi	r19, 0x4D	; 77
    9262:	e3 2e       	mov	r14, r19
    9264:	3b e0       	ldi	r19, 0x0B	; 11
    9266:	f3 2e       	mov	r15, r19
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    9268:	66 24       	eor	r6, r6
    926a:	6a 94       	dec	r6
    926c:	71 2c       	mov	r7, r1
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_PLAYING) && (track->patchCommandStreamPos!=NULL) && ((track->flags & TRACK_FLAGS_HOLD_ENV)==0)){
    926e:	88 81       	ld	r24, Y
    9270:	85 ff       	sbrs	r24, 5
    9272:	42 c0       	rjmp	.+132    	; 0x92f8 <ProcessMusic+0x318>
    9274:	2d 89       	ldd	r18, Y+21	; 0x15
    9276:	3e 89       	ldd	r19, Y+22	; 0x16
    9278:	23 2b       	or	r18, r19
    927a:	09 f4       	brne	.+2      	; 0x927e <ProcessMusic+0x29e>
    927c:	3d c0       	rjmp	.+122    	; 0x92f8 <ProcessMusic+0x318>
    927e:	86 fd       	sbrc	r24, 6
    9280:	3b c0       	rjmp	.+118    	; 0x92f8 <ProcessMusic+0x318>
    9282:	47 01       	movw	r8, r14
    9284:	f2 e0       	ldi	r31, 0x02	; 2
    9286:	8f 1a       	sub	r8, r31
    9288:	91 08       	sbc	r9, r1

			//process all simultaneous events
			while(track->patchCurrDeltaTime==track->patchNextDeltaTime){
    928a:	d6 01       	movw	r26, r12
    928c:	9c 91       	ld	r25, X
    928e:	f4 01       	movw	r30, r8
    9290:	80 81       	ld	r24, Z
    9292:	98 13       	cpse	r25, r24
    9294:	2e c0       	rjmp	.+92     	; 0x92f2 <ProcessMusic+0x312>

				c1=pgm_read_byte(track->patchCommandStreamPos++);
    9296:	ed 89       	ldd	r30, Y+21	; 0x15
    9298:	fe 89       	ldd	r31, Y+22	; 0x16
    929a:	bf 01       	movw	r22, r30
    929c:	6f 5f       	subi	r22, 0xFF	; 255
    929e:	7f 4f       	sbci	r23, 0xFF	; 255
    92a0:	7e 8b       	std	Y+22, r23	; 0x16
    92a2:	6d 8b       	std	Y+21, r22	; 0x15
    92a4:	84 91       	lpm	r24, Z
				if(c1==PATCH_END){
    92a6:	8f 3f       	cpi	r24, 0xFF	; 255
    92a8:	31 f4       	brne	.+12     	; 0x92b6 <ProcessMusic+0x2d6>
					//end of stream!
					track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    92aa:	88 81       	ld	r24, Y
    92ac:	8f 77       	andi	r24, 0x7F	; 127
    92ae:	88 83       	st	Y, r24
					track->patchCommandStreamPos=NULL;
    92b0:	1e 8a       	std	Y+22, r1	; 0x16
    92b2:	1d 8a       	std	Y+21, r1	; 0x15
					break;
    92b4:	1e c0       	rjmp	.+60     	; 0x92f2 <ProcessMusic+0x312>

				}else{
					c2=pgm_read_byte(track->patchCommandStreamPos++);
    92b6:	9f 01       	movw	r18, r30
    92b8:	2e 5f       	subi	r18, 0xFE	; 254
    92ba:	3f 4f       	sbci	r19, 0xFF	; 255
    92bc:	3e 8b       	std	Y+22, r19	; 0x16
    92be:	2d 8b       	std	Y+21, r18	; 0x15
    92c0:	fb 01       	movw	r30, r22
    92c2:	64 91       	lpm	r22, Z
					//invoke patch command function
					((PatchCommand)pgm_read_word(&patchCommands[c1]))(track,c2);
    92c4:	e8 2f       	mov	r30, r24
    92c6:	f0 e0       	ldi	r31, 0x00	; 0
    92c8:	ee 0f       	add	r30, r30
    92ca:	ff 1f       	adc	r31, r31
    92cc:	e2 54       	subi	r30, 0x42	; 66
    92ce:	ff 4f       	sbci	r31, 0xFF	; 255
    92d0:	25 91       	lpm	r18, Z+
    92d2:	34 91       	lpm	r19, Z
    92d4:	ce 01       	movw	r24, r28
    92d6:	f9 01       	movw	r30, r18
    92d8:	09 95       	icall
				}

				//read next delta time
				track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);
    92da:	ed 89       	ldd	r30, Y+21	; 0x15
    92dc:	fe 89       	ldd	r31, Y+22	; 0x16
    92de:	cf 01       	movw	r24, r30
    92e0:	01 96       	adiw	r24, 0x01	; 1
    92e2:	9e 8b       	std	Y+22, r25	; 0x16
    92e4:	8d 8b       	std	Y+21, r24	; 0x15
    92e6:	e4 91       	lpm	r30, Z
    92e8:	d4 01       	movw	r26, r8
    92ea:	ec 93       	st	X, r30
				track->patchCurrDeltaTime=0;
    92ec:	f6 01       	movw	r30, r12
    92ee:	10 82       	st	Z, r1
    92f0:	cc cf       	rjmp	.-104    	; 0x928a <ProcessMusic+0x2aa>
			}

			track->patchCurrDeltaTime++;
    92f2:	9f 5f       	subi	r25, 0xFF	; 255
    92f4:	d6 01       	movw	r26, r12
    92f6:	9c 93       	st	X, r25
		}

		if(track->flags & TRACK_FLAGS_PLAYING){
    92f8:	98 81       	ld	r25, Y
    92fa:	95 ff       	sbrs	r25, 5
    92fc:	6c c0       	rjmp	.+216    	; 0x93d6 <ProcessMusic+0x3f6>

			if(track->patchPlayingTime<0xff){
    92fe:	f7 01       	movw	r30, r14
    9300:	80 81       	ld	r24, Z
    9302:	8f 3f       	cpi	r24, 0xFF	; 255
    9304:	11 f0       	breq	.+4      	; 0x930a <ProcessMusic+0x32a>
				track->patchPlayingTime++;
    9306:	8f 5f       	subi	r24, 0xFF	; 255
    9308:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    930a:	97 fd       	sbrc	r25, 7
    930c:	04 c0       	rjmp	.+8      	; 0x9316 <ProcessMusic+0x336>
    930e:	f7 01       	movw	r30, r14
    9310:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    9312:	90 81       	ld	r25, Z
    9314:	01 c0       	rjmp	.+2      	; 0x9318 <ProcessMusic+0x338>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    9316:	9f ef       	ldi	r25, 0xFF	; 255
    9318:	f7 01       	movw	r30, r14
    931a:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    931c:	80 81       	ld	r24, Z
    931e:	88 23       	and	r24, r24
    9320:	09 f4       	brne	.+2      	; 0x9324 <ProcessMusic+0x344>
    9322:	4e c0       	rjmp	.+156    	; 0x93c0 <ProcessMusic+0x3e0>
    9324:	31 96       	adiw	r30, 0x01	; 1
    9326:	50 81       	ld	r21, Z
    9328:	55 23       	and	r21, r21
    932a:	09 f4       	brne	.+2      	; 0x932e <ProcessMusic+0x34e>
    932c:	49 c0       	rjmp	.+146    	; 0x93c0 <ProcessMusic+0x3e0>
    932e:	99 23       	and	r25, r25
    9330:	09 f4       	brne	.+2      	; 0x9334 <ProcessMusic+0x354>
    9332:	46 c0       	rjmp	.+140    	; 0x93c0 <ProcessMusic+0x3e0>
    9334:	40 91 b1 0b 	lds	r20, 0x0BB1
    9338:	44 23       	and	r20, r20
    933a:	09 f4       	brne	.+2      	; 0x933e <ProcessMusic+0x35e>
    933c:	41 c0       	rjmp	.+130    	; 0x93c0 <ProcessMusic+0x3e0>

				uVol=(track->noteVol*trackVol)+0x100;
    933e:	89 9f       	mul	r24, r25
    9340:	c0 01       	movw	r24, r0
    9342:	11 24       	eor	r1, r1
    9344:	93 95       	inc	r25
				uVol>>=8;
    9346:	89 2f       	mov	r24, r25
    9348:	99 27       	eor	r25, r25
				
				uVol=(uVol*track->envelopeVol)+0x100;
    934a:	58 9f       	mul	r21, r24
    934c:	90 01       	movw	r18, r0
    934e:	59 9f       	mul	r21, r25
    9350:	30 0d       	add	r19, r0
    9352:	11 24       	eor	r1, r1
    9354:	c9 01       	movw	r24, r18
    9356:	93 95       	inc	r25
				uVol>>=8;
    9358:	89 2f       	mov	r24, r25
    935a:	99 27       	eor	r25, r25
    935c:	3b 97       	sbiw	r30, 0x0b	; 11
				
				#if MUSIC_ENGINE == MIDI
					uVol=(uVol*track->expressionVol)+0x100;
    935e:	50 81       	ld	r21, Z
    9360:	58 9f       	mul	r21, r24
    9362:	90 01       	movw	r18, r0
    9364:	59 9f       	mul	r21, r25
    9366:	30 0d       	add	r19, r0
    9368:	11 24       	eor	r1, r1
    936a:	33 95       	inc	r19
					uVol>>=8;
    936c:	23 2f       	mov	r18, r19
    936e:	33 27       	eor	r19, r19
				#endif
				
				uVol=(uVol*masterVolume)+0x100;
    9370:	42 9f       	mul	r20, r18
    9372:	c0 01       	movw	r24, r0
    9374:	43 9f       	mul	r20, r19
    9376:	90 0d       	add	r25, r0
    9378:	11 24       	eor	r1, r1
    937a:	93 95       	inc	r25
				uVol>>=8;
    937c:	89 2f       	mov	r24, r25
    937e:	99 27       	eor	r25, r25
    9380:	37 96       	adiw	r30, 0x07	; 7

				if(track->tremoloLevel>0){					
    9382:	20 81       	ld	r18, Z
    9384:	22 23       	and	r18, r18
    9386:	f1 f0       	breq	.+60     	; 0x93c4 <ProcessMusic+0x3e4>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    9388:	d5 01       	movw	r26, r10
    938a:	ec 91       	ld	r30, X
    938c:	f0 e0       	ldi	r31, 0x00	; 0
    938e:	e0 50       	subi	r30, 0x00	; 0
    9390:	f9 46       	sbci	r31, 0x69	; 105
    9392:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    9394:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    9396:	2e 9f       	mul	r18, r30
    9398:	f0 01       	movw	r30, r0
    939a:	11 24       	eor	r1, r1
    939c:	f3 95       	inc	r31
					tVol>>=8;
    939e:	ef 2f       	mov	r30, r31
    93a0:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    93a2:	a3 01       	movw	r20, r6
    93a4:	4e 1b       	sub	r20, r30
    93a6:	5f 0b       	sbc	r21, r31
    93a8:	48 9f       	mul	r20, r24
    93aa:	90 01       	movw	r18, r0
    93ac:	49 9f       	mul	r20, r25
    93ae:	30 0d       	add	r19, r0
    93b0:	58 9f       	mul	r21, r24
    93b2:	30 0d       	add	r19, r0
    93b4:	11 24       	eor	r1, r1
    93b6:	c9 01       	movw	r24, r18
    93b8:	93 95       	inc	r25
					uVol>>=8;
    93ba:	89 2f       	mov	r24, r25
    93bc:	99 27       	eor	r25, r25
    93be:	02 c0       	rjmp	.+4      	; 0x93c4 <ProcessMusic+0x3e4>
				}

			
			}else{
				uVol=0;
    93c0:	80 e0       	ldi	r24, 0x00	; 0
    93c2:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    93c4:	f5 01       	movw	r30, r10
    93c6:	30 81       	ld	r19, Z
    93c8:	f7 01       	movw	r30, r14
    93ca:	39 97       	sbiw	r30, 0x09	; 9
    93cc:	20 81       	ld	r18, Z
    93ce:	23 0f       	add	r18, r19
    93d0:	d5 01       	movw	r26, r10
    93d2:	2c 93       	st	X, r18
    93d4:	02 c0       	rjmp	.+4      	; 0x93da <ProcessMusic+0x3fa>

		}else{
			uVol=0;
    93d6:	80 e0       	ldi	r24, 0x00	; 0
    93d8:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    93da:	f8 01       	movw	r30, r16
    93dc:	80 83       	st	Z, r24
    93de:	67 96       	adiw	r28, 0x17	; 23
    93e0:	0a 5f       	subi	r16, 0xFA	; 250
    93e2:	1f 4f       	sbci	r17, 0xFF	; 255
    93e4:	f7 e1       	ldi	r31, 0x17	; 23
    93e6:	af 0e       	add	r10, r31
    93e8:	b1 1c       	adc	r11, r1
    93ea:	87 e1       	ldi	r24, 0x17	; 23
    93ec:	c8 0e       	add	r12, r24
    93ee:	d1 1c       	adc	r13, r1
    93f0:	97 e1       	ldi	r25, 0x17	; 23
    93f2:	e9 0e       	add	r14, r25
    93f4:	f1 1c       	adc	r15, r1


	//
	// Process patches command streams & final volume
	//
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    93f6:	ab e0       	ldi	r26, 0x0B	; 11
    93f8:	cc 3a       	cpi	r28, 0xAC	; 172
    93fa:	da 07       	cpc	r29, r26
    93fc:	09 f0       	breq	.+2      	; 0x9400 <ProcessMusic+0x420>
    93fe:	37 cf       	rjmp	.-402    	; 0x926e <ProcessMusic+0x28e>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    9400:	df 91       	pop	r29
    9402:	cf 91       	pop	r28
    9404:	1f 91       	pop	r17
    9406:	0f 91       	pop	r16
    9408:	ff 90       	pop	r15
    940a:	ef 90       	pop	r14
    940c:	df 90       	pop	r13
    940e:	cf 90       	pop	r12
    9410:	bf 90       	pop	r11
    9412:	af 90       	pop	r10
    9414:	9f 90       	pop	r9
    9416:	8f 90       	pop	r8
    9418:	7f 90       	pop	r7
    941a:	6f 90       	pop	r6
    941c:	08 95       	ret

0000941e <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    941e:	80 93 b1 0b 	sts	0x0BB1, r24
    9422:	08 95       	ret

00009424 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    9424:	99 27       	eor	r25, r25
	clr r23
    9426:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    9428:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    942a:	09 f4       	brne	.+2      	; 0x942e <set_note_waves>
		ret
    942c:	08 95       	ret

0000942e <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    942e:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    9430:	f5 e9       	ldi	r31, 0x95	; 149
	lsl r22
    9432:	66 0f       	add	r22, r22
	rol r23
    9434:	77 1f       	adc	r23, r23
	add ZL,r22
    9436:	e6 0f       	add	r30, r22
	adc ZH,r23	
    9438:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    943a:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    943c:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    943e:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    9440:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    9442:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    9444:	28 9f       	mul	r18, r24
	add ZL,r0
    9446:	e0 0d       	add	r30, r0
	adc ZH,r1
    9448:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    944a:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    944c:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    944e:	11 24       	eor	r1, r1
	

	ret
    9450:	08 95       	ret

00009452 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    9452:	99 27       	eor	r25, r25
	clr r23
    9454:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    9456:	e4 e0       	ldi	r30, 0x04	; 4
	ldi ZH,hi8(mixerStruct)
    9458:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    945a:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    945c:	28 9f       	mul	r18, r24
	add ZL,r0
    945e:	e0 0d       	add	r30, r0
	adc ZH,r1
    9460:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    9462:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    9464:	31 f4       	brne	.+12     	; 0x9472 <smw1>
	lds r22,tr4_params
    9466:	60 91 17 0b 	lds	r22, 0x0B17
	andi r22,0xfe;
    946a:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    946c:	60 93 17 0b 	sts	0x0B17, r22
	rjmp esmw	
    9470:	0b c0       	rjmp	.+22     	; 0x9488 <esmw>

00009472 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    9472:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    9474:	31 f4       	brne	.+12     	; 0x9482 <smw2>
	lds r22,tr4_params
    9476:	60 91 17 0b 	lds	r22, 0x0B17
	ori r22,0xfe;
    947a:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    947c:	60 93 17 0b 	sts	0x0B17, r22
	rjmp esmw
    9480:	03 c0       	rjmp	.+6      	; 0x9488 <esmw>

00009482 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    9482:	77 e9       	ldi	r23, 0x97	; 151
	add r23,r22
    9484:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    9486:	75 83       	std	Z+5, r23	; 0x05

00009488 <esmw>:

esmw:
	clr r1	
    9488:	11 24       	eor	r1, r1
	ret
    948a:	08 95       	ret
	...

00009500 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    9500:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    9502:	80 93 03 0b 	sts	0x0B03, r24
	ret
    9506:	08 95       	ret

00009508 <steptable>:
    9508:	22 00       	.word	0x0022	; ????
    950a:	24 00       	.word	0x0024	; ????
    950c:	26 00       	.word	0x0026	; ????
    950e:	28 00       	.word	0x0028	; ????
    9510:	2b 00       	.word	0x002b	; ????
    9512:	2d 00       	.word	0x002d	; ????
    9514:	30 00       	.word	0x0030	; ????
    9516:	33 00       	.word	0x0033	; ????
    9518:	36 00       	.word	0x0036	; ????
    951a:	39 00       	.word	0x0039	; ????
    951c:	3d 00       	.word	0x003d	; ????
    951e:	40 00       	.word	0x0040	; ????
    9520:	44 00       	.word	0x0044	; ????
    9522:	48 00       	.word	0x0048	; ????
    9524:	4c 00       	.word	0x004c	; ????
    9526:	51 00       	.word	0x0051	; ????
    9528:	56 00       	.word	0x0056	; ????
    952a:	5b 00       	.word	0x005b	; ????
    952c:	60 00       	.word	0x0060	; ????
    952e:	66 00       	.word	0x0066	; ????
    9530:	6c 00       	.word	0x006c	; ????
    9532:	73 00       	.word	0x0073	; ????
    9534:	79 00       	.word	0x0079	; ????
    9536:	81 00       	.word	0x0081	; ????
    9538:	88 00       	.word	0x0088	; ????
    953a:	90 00       	.word	0x0090	; ????
    953c:	99 00       	.word	0x0099	; ????
    953e:	a2 00       	.word	0x00a2	; ????
    9540:	ac 00       	.word	0x00ac	; ????
    9542:	b6 00       	.word	0x00b6	; ????
    9544:	c1 00       	.word	0x00c1	; ????
    9546:	cc 00       	.word	0x00cc	; ????
    9548:	d8 00       	.word	0x00d8	; ????
    954a:	e5 00       	.word	0x00e5	; ????
    954c:	f3 00       	.word	0x00f3	; ????
    954e:	01 01       	movw	r0, r2
    9550:	10 01       	movw	r2, r0
    9552:	21 01       	movw	r4, r2
    9554:	32 01       	movw	r6, r4
    9556:	44 01       	movw	r8, r8
    9558:	57 01       	movw	r10, r14
    955a:	6c 01       	movw	r12, r24
    955c:	81 01       	movw	r16, r2
    955e:	98 01       	movw	r18, r16
    9560:	b0 01       	movw	r22, r0
    9562:	ca 01       	movw	r24, r20
    9564:	e5 01       	movw	r28, r10
    9566:	02 02       	muls	r16, r18
    9568:	21 02       	muls	r18, r17
    956a:	41 02       	muls	r20, r17
    956c:	64 02       	muls	r22, r20
    956e:	88 02       	muls	r24, r24
    9570:	ae 02       	muls	r26, r30
    9572:	d7 02       	muls	r29, r23
    9574:	03 03       	mulsu	r16, r19
    9576:	30 03       	mulsu	r19, r16
    9578:	61 03       	mulsu	r22, r17
    957a:	94 03       	fmuls	r17, r20
    957c:	cb 03       	fmulsu	r20, r19
    957e:	05 04       	cpc	r0, r5
    9580:	42 04       	cpc	r4, r2
    9582:	83 04       	cpc	r8, r3
    9584:	c7 04       	cpc	r12, r7
    9586:	10 05       	cpc	r17, r0
    9588:	5d 05       	cpc	r21, r13
    958a:	af 05       	cpc	r26, r15
    958c:	05 06       	cpc	r0, r21
    958e:	61 06       	cpc	r6, r17
    9590:	c2 06       	cpc	r12, r18
    9592:	29 07       	cpc	r18, r25
    9594:	96 07       	cpc	r25, r22
    9596:	09 08       	sbc	r0, r9
    9598:	83 08       	sbc	r8, r3
    959a:	05 09       	sbc	r16, r5
    959c:	8e 09       	sbc	r24, r14
    959e:	20 0a       	sbc	r2, r16
    95a0:	ba 0a       	sbc	r11, r26
    95a2:	5d 0b       	sbc	r21, r29
    95a4:	0a 0c       	add	r0, r10
    95a6:	c1 0c       	add	r12, r1
    95a8:	84 0d       	add	r24, r4
    95aa:	51 0e       	add	r5, r17
    95ac:	2b 0f       	add	r18, r27
    95ae:	12 10       	cpse	r1, r2
    95b0:	07 11       	cpse	r16, r7
    95b2:	0a 12       	cpse	r0, r26
    95b4:	1d 13       	cpse	r17, r29
    95b6:	40 14       	cp	r4, r0
    95b8:	74 15       	cp	r23, r4
    95ba:	ba 16       	cp	r11, r26
    95bc:	14 18       	sub	r1, r4
    95be:	83 19       	sub	r24, r3
    95c0:	07 1b       	sub	r16, r23
    95c2:	a3 1c       	adc	r10, r3
    95c4:	57 1e       	adc	r5, r23
    95c6:	24 20       	and	r2, r4
    95c8:	0e 22       	and	r0, r30
    95ca:	14 24       	eor	r1, r4
    95cc:	39 26       	eor	r3, r25
    95ce:	7f 28       	or	r7, r15
    95d0:	e8 2a       	or	r14, r24
    95d2:	75 2d       	mov	r23, r5
    95d4:	29 30       	cpi	r18, 0x09	; 9
    95d6:	06 33       	cpi	r16, 0x36	; 54
    95d8:	0f 36       	cpi	r16, 0x6F	; 111
    95da:	45 39       	cpi	r20, 0x95	; 149
    95dc:	ad 3c       	cpi	r26, 0xCD	; 205
    95de:	49 40       	sbci	r20, 0x09	; 9
    95e0:	1b 44       	sbci	r17, 0x4B	; 75
    95e2:	28 48       	sbci	r18, 0x88	; 136
    95e4:	73 4c       	sbci	r23, 0xC3	; 195
    95e6:	fe 50       	subi	r31, 0x0E	; 14
    95e8:	cf 55       	subi	r28, 0x5F	; 95
    95ea:	ea 5a       	subi	r30, 0xAA	; 170
    95ec:	51 60       	ori	r21, 0x01	; 1
    95ee:	0c 66       	ori	r16, 0x6C	; 108
    95f0:	1d 6c       	ori	r17, 0xCD	; 205
    95f2:	8b 72       	andi	r24, 0x2B	; 43
    95f4:	5a 79       	andi	r21, 0x9A	; 154
    95f6:	92 80       	ldd	r9, Z+2	; 0x02
    95f8:	37 88       	ldd	r3, Z+23	; 0x17
    95fa:	50 90 e5 98 	lds	r5, 0x98E5
    95fe:	fd a1       	ldd	r31, Y+37	; 0x25
    9600:	9f ab       	std	Y+55, r25	; 0x37
    9602:	d3 b5       	in	r29, 0x23	; 35
    9604:	a3 c0       	rjmp	.+326    	; 0x974c <waves+0x4c>
	...

00009700 <waves>:
    9700:	00 03       	mulsu	r16, r16
    9702:	06 09       	sbc	r16, r6
    9704:	0c 10       	cpse	r0, r12
    9706:	13 16       	cp	r1, r19
    9708:	19 1c       	adc	r1, r9
    970a:	1f 22       	and	r1, r31
    970c:	25 28       	or	r2, r5
    970e:	2b 2e       	mov	r2, r27
    9710:	31 33       	cpi	r19, 0x31	; 49
    9712:	36 39       	cpi	r19, 0x96	; 150
    9714:	3c 3f       	cpi	r19, 0xFC	; 252
    9716:	41 44       	sbci	r20, 0x41	; 65
    9718:	47 49       	sbci	r20, 0x97	; 151
    971a:	4c 4e       	sbci	r20, 0xEC	; 236
    971c:	51 53       	subi	r21, 0x31	; 49
    971e:	55 58       	subi	r21, 0x85	; 133
    9720:	5a 5c       	subi	r21, 0xCA	; 202
    9722:	5e 60       	ori	r21, 0x0E	; 14
    9724:	62 64       	ori	r22, 0x42	; 66
    9726:	66 68       	ori	r22, 0x86	; 134
    9728:	6a 6b       	ori	r22, 0xBA	; 186
    972a:	6d 6f       	ori	r22, 0xFD	; 253
    972c:	70 71       	andi	r23, 0x10	; 16
    972e:	73 74       	andi	r23, 0x43	; 67
    9730:	75 76       	andi	r23, 0x65	; 101
    9732:	78 79       	andi	r23, 0x98	; 152
    9734:	7a 7a       	andi	r23, 0xAA	; 170
    9736:	7b 7c       	andi	r23, 0xCB	; 203
    9738:	7d 7d       	andi	r23, 0xDD	; 221
    973a:	7e 7e       	andi	r23, 0xEE	; 238
    973c:	7e 7f       	andi	r23, 0xFE	; 254
    973e:	7f 7f       	andi	r23, 0xFF	; 255
    9740:	7f 7f       	andi	r23, 0xFF	; 255
    9742:	7f 7f       	andi	r23, 0xFF	; 255
    9744:	7e 7e       	andi	r23, 0xEE	; 238
    9746:	7e 7d       	andi	r23, 0xDE	; 222
    9748:	7d 7c       	andi	r23, 0xCD	; 205
    974a:	7b 7a       	andi	r23, 0xAB	; 171
    974c:	7a 79       	andi	r23, 0x9A	; 154
    974e:	78 76       	andi	r23, 0x68	; 104
    9750:	75 74       	andi	r23, 0x45	; 69
    9752:	73 71       	andi	r23, 0x13	; 19
    9754:	70 6f       	ori	r23, 0xF0	; 240
    9756:	6d 6b       	ori	r22, 0xBD	; 189
    9758:	6a 68       	ori	r22, 0x8A	; 138
    975a:	66 64       	ori	r22, 0x46	; 70
    975c:	62 60       	ori	r22, 0x02	; 2
    975e:	5e 5c       	subi	r21, 0xCE	; 206
    9760:	5a 58       	subi	r21, 0x8A	; 138
    9762:	55 53       	subi	r21, 0x35	; 53
    9764:	51 4e       	sbci	r21, 0xE1	; 225
    9766:	4c 49       	sbci	r20, 0x9C	; 156
    9768:	47 44       	sbci	r20, 0x47	; 71
    976a:	41 3f       	cpi	r20, 0xF1	; 241
    976c:	3c 39       	cpi	r19, 0x9C	; 156
    976e:	36 33       	cpi	r19, 0x36	; 54
    9770:	31 2e       	mov	r3, r17
    9772:	2b 28       	or	r2, r11
    9774:	25 22       	and	r2, r21
    9776:	1f 1c       	adc	r1, r15
    9778:	19 16       	cp	r1, r25
    977a:	13 10       	cpse	r1, r3
    977c:	0c 09       	sbc	r16, r12
    977e:	06 03       	mulsu	r16, r22
    9780:	00 fd       	sbrc	r16, 0
    9782:	fa f7       	brpl	.-2      	; 0x9782 <waves+0x82>
    9784:	f4 f0       	brlt	.+60     	; 0x97c2 <waves+0xc2>
    9786:	ed ea       	ldi	r30, 0xAD	; 173
    9788:	e7 e4       	ldi	r30, 0x47	; 71
    978a:	e1 de       	rcall	.-574    	; 0x954e <steptable+0x46>
    978c:	db d8       	rcall	.-3658   	; 0x8944 <ReadControllers+0x4>
    978e:	d5 d2       	rcall	.+1450   	; 0x9d3a <waves+0x63a>
    9790:	cf cd       	rjmp	.-1122   	; 0x9330 <ProcessMusic+0x350>
    9792:	ca c7       	rjmp	.+3988   	; 0xa728 <LBCopyChars+0x14>
    9794:	c4 c1       	rjmp	.+904    	; 0x9b1e <waves+0x41e>
    9796:	bf bc       	out	0x2f, r11	; 47
    9798:	b9 b7       	in	r27, 0x39	; 57
    979a:	b4 b2       	in	r11, 0x14	; 20
    979c:	af ad       	ldd	r26, Y+63	; 0x3f
    979e:	ab a8       	ldd	r10, Y+51	; 0x33
    97a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    97a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    97a4:	9e 9c       	mul	r9, r14
    97a6:	9a 98       	cbi	0x13, 2	; 19
    97a8:	96 95       	lsr	r25
    97aa:	93 91       	.word	0x9193	; ????
    97ac:	90 8f       	std	Z+24, r25	; 0x18
    97ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    97b0:	8b 8a       	std	Y+19, r8	; 0x13
    97b2:	88 87       	std	Y+8, r24	; 0x08
    97b4:	86 86       	std	Z+14, r8	; 0x0e
    97b6:	85 84       	ldd	r8, Z+13	; 0x0d
    97b8:	83 83       	std	Z+3, r24	; 0x03
    97ba:	82 82       	std	Z+2, r8	; 0x02
    97bc:	82 81       	ldd	r24, Z+2	; 0x02
    97be:	81 81       	ldd	r24, Z+1	; 0x01
    97c0:	81 81       	ldd	r24, Z+1	; 0x01
    97c2:	81 81       	ldd	r24, Z+1	; 0x01
    97c4:	82 82       	std	Z+2, r8	; 0x02
    97c6:	82 83       	std	Z+2, r24	; 0x02
    97c8:	83 84       	ldd	r8, Z+11	; 0x0b
    97ca:	85 86       	std	Z+13, r8	; 0x0d
    97cc:	86 87       	std	Z+14, r24	; 0x0e
    97ce:	88 8a       	std	Y+16, r8	; 0x10
    97d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    97d2:	8d 8f       	std	Y+29, r24	; 0x1d
    97d4:	90 91 93 95 	lds	r25, 0x9593
    97d8:	96 98       	cbi	0x12, 6	; 18
    97da:	9a 9c       	mul	r9, r10
    97dc:	9e a0       	ldd	r9, Y+38	; 0x26
    97de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    97e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    97e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    97e4:	af b2       	in	r10, 0x1f	; 31
    97e6:	b4 b7       	in	r27, 0x34	; 52
    97e8:	b9 bc       	out	0x29, r11	; 41
    97ea:	bf c1       	rjmp	.+894    	; 0x9b6a <waves+0x46a>
    97ec:	c4 c7       	rjmp	.+3976   	; 0xa776 <LBPrintStr+0x4a>
    97ee:	ca cd       	rjmp	.-1132   	; 0x9384 <ProcessMusic+0x3a4>
    97f0:	cf d2       	rcall	.+1438   	; 0x9d90 <waves+0x690>
    97f2:	d5 d8       	rcall	.-3670   	; 0x899e <FormatEeprom+0x3e>
    97f4:	db de       	rcall	.-586    	; 0x95ac <steptable+0xa4>
    97f6:	e1 e4       	ldi	r30, 0x41	; 65
    97f8:	e7 ea       	ldi	r30, 0xA7	; 167
    97fa:	ed f0       	brhs	.+58     	; 0x9836 <waves+0x136>
    97fc:	f4 f7       	brge	.-4      	; 0x97fa <waves+0xfa>
    97fe:	fa fd       	.word	0xfdfa	; ????
    9800:	80 81       	ld	r24, Z
    9802:	82 83       	std	Z+2, r24	; 0x02
    9804:	84 85       	ldd	r24, Z+12	; 0x0c
    9806:	86 87       	std	Z+14, r24	; 0x0e
    9808:	88 89       	ldd	r24, Y+16	; 0x10
    980a:	8a 8b       	std	Y+18, r24	; 0x12
    980c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    980e:	8e 8f       	std	Y+30, r24	; 0x1e
    9810:	90 91 92 93 	lds	r25, 0x9392
    9814:	94 95       	.word	0x9594	; ????
    9816:	96 97       	sbiw	r26, 0x26	; 38
    9818:	98 99       	sbic	0x13, 0	; 19
    981a:	9a 9b       	sbis	0x13, 2	; 19
    981c:	9c 9d       	mul	r25, r12
    981e:	9e 9f       	mul	r25, r30
    9820:	a0 a1       	ldd	r26, Z+32	; 0x20
    9822:	a2 a3       	std	Z+34, r26	; 0x22
    9824:	a4 a5       	ldd	r26, Z+44	; 0x2c
    9826:	a6 a7       	std	Z+46, r26	; 0x2e
    9828:	a8 a9       	ldd	r26, Y+48	; 0x30
    982a:	aa ab       	std	Y+50, r26	; 0x32
    982c:	ac ad       	ldd	r26, Y+60	; 0x3c
    982e:	ae af       	std	Y+62, r26	; 0x3e
    9830:	b0 b1       	in	r27, 0x00	; 0
    9832:	b2 b3       	in	r27, 0x12	; 18
    9834:	b4 b5       	in	r27, 0x24	; 36
    9836:	b6 b7       	in	r27, 0x36	; 54
    9838:	b8 b9       	out	0x08, r27	; 8
    983a:	ba bb       	out	0x1a, r27	; 26
    983c:	bc bd       	out	0x2c, r27	; 44
    983e:	be bf       	out	0x3e, r27	; 62
    9840:	c0 c1       	rjmp	.+896    	; 0x9bc2 <waves+0x4c2>
    9842:	c2 c3       	rjmp	.+1924   	; 0x9fc8 <waves+0x8c8>
    9844:	c4 c5       	rjmp	.+2952   	; 0xa3ce <InitializeVideoMode+0x12>
    9846:	c6 c7       	rjmp	.+3980   	; 0xa7d4 <LBCollides+0x46>
    9848:	c8 c9       	rjmp	.-3184   	; 0x8bda <PatchCommand01+0x8>
    984a:	ca cb       	rjmp	.-2156   	; 0x8fe0 <ProcessMusic>
    984c:	cc cd       	rjmp	.-1128   	; 0x93e6 <ProcessMusic+0x406>
    984e:	ce cf       	rjmp	.-100    	; 0x97ec <waves+0xec>
    9850:	d0 d1       	rcall	.+928    	; 0x9bf2 <waves+0x4f2>
    9852:	d2 d3       	rcall	.+1956   	; 0x9ff8 <waves+0x8f8>
    9854:	d4 d5       	rcall	.+2984   	; 0xa3fe <DrawMap+0x26>
    9856:	d6 d7       	rcall	.+4012   	; 0xa804 <LBLineIntersect+0x26>
    9858:	d8 d9       	rcall	.-3152   	; 0x8c0a <PatchCommand11+0x2>
    985a:	da db       	rcall	.-2124   	; 0x9010 <ProcessMusic+0x30>
    985c:	dc dd       	rcall	.-1096   	; 0x9416 <ProcessMusic+0x436>
    985e:	de df       	rcall	.-68     	; 0x981c <waves+0x11c>
    9860:	e0 e1       	ldi	r30, 0x10	; 16
    9862:	e2 e3       	ldi	r30, 0x32	; 50
    9864:	e4 e5       	ldi	r30, 0x54	; 84
    9866:	e6 e7       	ldi	r30, 0x76	; 118
    9868:	e8 e9       	ldi	r30, 0x98	; 152
    986a:	ea eb       	ldi	r30, 0xBA	; 186
    986c:	ec ed       	ldi	r30, 0xDC	; 220
    986e:	ee ef       	ldi	r30, 0xFE	; 254
    9870:	f0 f1       	brcs	.+124    	; 0x98ee <waves+0x1ee>
    9872:	f2 f3       	brmi	.-4      	; 0x9870 <waves+0x170>
    9874:	f4 f5       	brge	.+124    	; 0x98f2 <waves+0x1f2>
    9876:	f6 f7       	brtc	.-4      	; 0x9874 <waves+0x174>
    9878:	f8 f9       	.word	0xf9f8	; ????
    987a:	fa fb       	.word	0xfbfa	; ????
    987c:	fc fd       	.word	0xfdfc	; ????
    987e:	fe ff       	.word	0xfffe	; ????
    9880:	00 01       	movw	r0, r0
    9882:	02 03       	mulsu	r16, r18
    9884:	04 05       	cpc	r16, r4
    9886:	06 07       	cpc	r16, r22
    9888:	08 09       	sbc	r16, r8
    988a:	0a 0b       	sbc	r16, r26
    988c:	0c 0d       	add	r16, r12
    988e:	0e 0f       	add	r16, r30
    9890:	10 11       	cpse	r17, r0
    9892:	12 13       	cpse	r17, r18
    9894:	14 15       	cp	r17, r4
    9896:	16 17       	cp	r17, r22
    9898:	18 19       	sub	r17, r8
    989a:	1a 1b       	sub	r17, r26
    989c:	1c 1d       	adc	r17, r12
    989e:	1e 1f       	adc	r17, r30
    98a0:	20 21       	and	r18, r0
    98a2:	22 23       	and	r18, r18
    98a4:	24 25       	eor	r18, r4
    98a6:	26 27       	eor	r18, r22
    98a8:	28 29       	or	r18, r8
    98aa:	2a 2b       	or	r18, r26
    98ac:	2c 2d       	mov	r18, r12
    98ae:	2e 2f       	mov	r18, r30
    98b0:	30 31       	cpi	r19, 0x10	; 16
    98b2:	32 33       	cpi	r19, 0x32	; 50
    98b4:	34 35       	cpi	r19, 0x54	; 84
    98b6:	36 37       	cpi	r19, 0x76	; 118
    98b8:	38 39       	cpi	r19, 0x98	; 152
    98ba:	3a 3b       	cpi	r19, 0xBA	; 186
    98bc:	3c 3d       	cpi	r19, 0xDC	; 220
    98be:	3e 3f       	cpi	r19, 0xFE	; 254
    98c0:	40 41       	sbci	r20, 0x10	; 16
    98c2:	42 43       	sbci	r20, 0x32	; 50
    98c4:	44 45       	sbci	r20, 0x54	; 84
    98c6:	46 47       	sbci	r20, 0x76	; 118
    98c8:	48 49       	sbci	r20, 0x98	; 152
    98ca:	4a 4b       	sbci	r20, 0xBA	; 186
    98cc:	4c 4d       	sbci	r20, 0xDC	; 220
    98ce:	4e 4f       	sbci	r20, 0xFE	; 254
    98d0:	50 51       	subi	r21, 0x10	; 16
    98d2:	52 53       	subi	r21, 0x32	; 50
    98d4:	54 55       	subi	r21, 0x54	; 84
    98d6:	56 57       	subi	r21, 0x76	; 118
    98d8:	58 59       	subi	r21, 0x98	; 152
    98da:	5a 5b       	subi	r21, 0xBA	; 186
    98dc:	5c 5d       	subi	r21, 0xDC	; 220
    98de:	5e 5f       	subi	r21, 0xFE	; 254
    98e0:	60 61       	ori	r22, 0x10	; 16
    98e2:	62 63       	ori	r22, 0x32	; 50
    98e4:	64 65       	ori	r22, 0x54	; 84
    98e6:	66 67       	ori	r22, 0x76	; 118
    98e8:	68 69       	ori	r22, 0x98	; 152
    98ea:	6a 6b       	ori	r22, 0xBA	; 186
    98ec:	6c 6d       	ori	r22, 0xDC	; 220
    98ee:	6e 6f       	ori	r22, 0xFE	; 254
    98f0:	70 71       	andi	r23, 0x10	; 16
    98f2:	72 73       	andi	r23, 0x32	; 50
    98f4:	74 75       	andi	r23, 0x54	; 84
    98f6:	76 77       	andi	r23, 0x76	; 118
    98f8:	78 79       	andi	r23, 0x98	; 152
    98fa:	7a 7b       	andi	r23, 0xBA	; 186
    98fc:	7c 7d       	andi	r23, 0xDC	; 220
    98fe:	7e 7f       	andi	r23, 0xFE	; 254
    9900:	00 02       	muls	r16, r16
    9902:	04 06       	cpc	r0, r20
    9904:	08 0a       	sbc	r0, r24
    9906:	0c 0e       	add	r0, r28
    9908:	10 12       	cpse	r1, r16
    990a:	14 16       	cp	r1, r20
    990c:	18 1a       	sub	r1, r24
    990e:	1c 1e       	adc	r1, r28
    9910:	20 22       	and	r2, r16
    9912:	24 26       	eor	r2, r20
    9914:	28 2a       	or	r2, r24
    9916:	2c 2e       	mov	r2, r28
    9918:	30 32       	cpi	r19, 0x20	; 32
    991a:	34 36       	cpi	r19, 0x64	; 100
    991c:	38 3a       	cpi	r19, 0xA8	; 168
    991e:	3c 3e       	cpi	r19, 0xEC	; 236
    9920:	40 42       	sbci	r20, 0x20	; 32
    9922:	44 46       	sbci	r20, 0x64	; 100
    9924:	48 4a       	sbci	r20, 0xA8	; 168
    9926:	4c 4e       	sbci	r20, 0xEC	; 236
    9928:	50 52       	subi	r21, 0x20	; 32
    992a:	54 56       	subi	r21, 0x64	; 100
    992c:	58 5a       	subi	r21, 0xA8	; 168
    992e:	5c 5e       	subi	r21, 0xEC	; 236
    9930:	60 62       	ori	r22, 0x20	; 32
    9932:	64 66       	ori	r22, 0x64	; 100
    9934:	68 6a       	ori	r22, 0xA8	; 168
    9936:	6c 6e       	ori	r22, 0xEC	; 236
    9938:	70 72       	andi	r23, 0x20	; 32
    993a:	74 76       	andi	r23, 0x64	; 100
    993c:	78 7a       	andi	r23, 0xA8	; 168
    993e:	7c 7e       	andi	r23, 0xEC	; 236
    9940:	7f 7d       	andi	r23, 0xDF	; 223
    9942:	7b 79       	andi	r23, 0x9B	; 155
    9944:	77 75       	andi	r23, 0x57	; 87
    9946:	73 71       	andi	r23, 0x13	; 19
    9948:	6f 6d       	ori	r22, 0xDF	; 223
    994a:	6b 69       	ori	r22, 0x9B	; 155
    994c:	67 65       	ori	r22, 0x57	; 87
    994e:	63 61       	ori	r22, 0x13	; 19
    9950:	5f 5d       	subi	r21, 0xDF	; 223
    9952:	5b 59       	subi	r21, 0x9B	; 155
    9954:	57 55       	subi	r21, 0x57	; 87
    9956:	53 51       	subi	r21, 0x13	; 19
    9958:	4f 4d       	sbci	r20, 0xDF	; 223
    995a:	4b 49       	sbci	r20, 0x9B	; 155
    995c:	47 45       	sbci	r20, 0x57	; 87
    995e:	43 41       	sbci	r20, 0x13	; 19
    9960:	3f 3d       	cpi	r19, 0xDF	; 223
    9962:	3b 39       	cpi	r19, 0x9B	; 155
    9964:	37 35       	cpi	r19, 0x57	; 87
    9966:	33 31       	cpi	r19, 0x13	; 19
    9968:	2f 2d       	mov	r18, r15
    996a:	2b 29       	or	r18, r11
    996c:	27 25       	eor	r18, r7
    996e:	23 21       	and	r18, r3
    9970:	1f 1d       	adc	r17, r15
    9972:	1b 19       	sub	r17, r11
    9974:	17 15       	cp	r17, r7
    9976:	13 11       	cpse	r17, r3
    9978:	0f 0d       	add	r16, r15
    997a:	0b 09       	sbc	r16, r11
    997c:	07 05       	cpc	r16, r7
    997e:	03 01       	movw	r0, r6
    9980:	ff fd       	.word	0xfdff	; ????
    9982:	fb f9       	.word	0xf9fb	; ????
    9984:	f7 f5       	brid	.+124    	; 0x9a02 <waves+0x302>
    9986:	f3 f1       	brvs	.+124    	; 0x9a04 <waves+0x304>
    9988:	ef ed       	ldi	r30, 0xDF	; 223
    998a:	eb e9       	ldi	r30, 0x9B	; 155
    998c:	e7 e5       	ldi	r30, 0x57	; 87
    998e:	e3 e1       	ldi	r30, 0x13	; 19
    9990:	df dd       	rcall	.-1090   	; 0x9550 <steptable+0x48>
    9992:	db d9       	rcall	.-3146   	; 0x8d4a <InitMusicPlayer+0x26>
    9994:	d7 d5       	rcall	.+2990   	; 0xa544 <doFade+0x2>
    9996:	d3 d1       	rcall	.+934    	; 0x9d3e <waves+0x63e>
    9998:	cf cd       	rjmp	.-1122   	; 0x9538 <steptable+0x30>
    999a:	cb c9       	rjmp	.-3178   	; 0x8d32 <InitMusicPlayer+0xe>
    999c:	c7 c5       	rjmp	.+2958   	; 0xa52c <WaitVsync+0x18>
    999e:	c3 c1       	rjmp	.+902    	; 0x9d26 <waves+0x626>
    99a0:	bf bd       	out	0x2f, r27	; 47
    99a2:	bb b9       	out	0x0b, r27	; 11
    99a4:	b7 b5       	in	r27, 0x27	; 39
    99a6:	b3 b1       	in	r27, 0x03	; 3
    99a8:	af ad       	ldd	r26, Y+63	; 0x3f
    99aa:	ab a9       	ldd	r26, Y+51	; 0x33
    99ac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    99ae:	a3 a1       	ldd	r26, Z+35	; 0x23
    99b0:	9f 9d       	mul	r25, r15
    99b2:	9b 99       	sbic	0x13, 3	; 19
    99b4:	97 95       	ror	r25
    99b6:	93 91       	.word	0x9193	; ????
    99b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    99ba:	8b 89       	ldd	r24, Y+19	; 0x13
    99bc:	87 85       	ldd	r24, Z+15	; 0x0f
    99be:	83 81       	ldd	r24, Z+3	; 0x03
    99c0:	80 82       	st	Z, r8
    99c2:	84 86       	std	Z+12, r8	; 0x0c
    99c4:	88 8a       	std	Y+16, r8	; 0x10
    99c6:	8c 8e       	std	Y+28, r8	; 0x1c
    99c8:	90 92 94 96 	sts	0x9694, r9
    99cc:	98 9a       	sbi	0x13, 0	; 19
    99ce:	9c 9e       	mul	r9, r28
    99d0:	a0 a2       	std	Z+32, r10	; 0x20
    99d2:	a4 a6       	std	Z+44, r10	; 0x2c
    99d4:	a8 aa       	std	Y+48, r10	; 0x30
    99d6:	ac ae       	std	Y+60, r10	; 0x3c
    99d8:	b0 b2       	in	r11, 0x10	; 16
    99da:	b4 b6       	in	r11, 0x34	; 52
    99dc:	b8 ba       	out	0x18, r11	; 24
    99de:	bc be       	out	0x3c, r11	; 60
    99e0:	c0 c2       	rjmp	.+1408   	; 0x9f62 <waves+0x862>
    99e2:	c4 c6       	rjmp	.+3464   	; 0xa76c <LBPrintStr+0x40>
    99e4:	c8 ca       	rjmp	.-2672   	; 0x8f76 <TriggerNote+0x16>
    99e6:	cc ce       	rjmp	.-616    	; 0x9780 <waves+0x80>
    99e8:	d0 d2       	rcall	.+1440   	; 0x9f8a <waves+0x88a>
    99ea:	d4 d6       	rcall	.+3496   	; 0xa794 <LBCollides+0x6>
    99ec:	d8 da       	rcall	.-2640   	; 0x8f9e <TriggerNote+0x3e>
    99ee:	dc de       	rcall	.-584    	; 0x97a8 <waves+0xa8>
    99f0:	e0 e2       	ldi	r30, 0x20	; 32
    99f2:	e4 e6       	ldi	r30, 0x64	; 100
    99f4:	e8 ea       	ldi	r30, 0xA8	; 168
    99f6:	ec ee       	ldi	r30, 0xEC	; 236
    99f8:	f0 f2       	brcs	.-68     	; 0x99b6 <waves+0x2b6>
    99fa:	f4 f6       	brge	.-68     	; 0x99b8 <waves+0x2b8>
    99fc:	f8 fa       	.word	0xfaf8	; ????
    99fe:	fc fe       	.word	0xfefc	; ????
    9a00:	7f 7f       	andi	r23, 0xFF	; 255
    9a02:	7f 7f       	andi	r23, 0xFF	; 255
    9a04:	7f 7f       	andi	r23, 0xFF	; 255
    9a06:	7f 7f       	andi	r23, 0xFF	; 255
    9a08:	7f 7f       	andi	r23, 0xFF	; 255
    9a0a:	7f 7f       	andi	r23, 0xFF	; 255
    9a0c:	7f 7f       	andi	r23, 0xFF	; 255
    9a0e:	7f 7f       	andi	r23, 0xFF	; 255
    9a10:	7f 7f       	andi	r23, 0xFF	; 255
    9a12:	7f 7f       	andi	r23, 0xFF	; 255
    9a14:	7f 7f       	andi	r23, 0xFF	; 255
    9a16:	7f 7f       	andi	r23, 0xFF	; 255
    9a18:	7f 7f       	andi	r23, 0xFF	; 255
    9a1a:	7f 7f       	andi	r23, 0xFF	; 255
    9a1c:	7f 7f       	andi	r23, 0xFF	; 255
    9a1e:	7f 7f       	andi	r23, 0xFF	; 255
    9a20:	7f 7f       	andi	r23, 0xFF	; 255
    9a22:	7f 7f       	andi	r23, 0xFF	; 255
    9a24:	7f 7f       	andi	r23, 0xFF	; 255
    9a26:	7f 7f       	andi	r23, 0xFF	; 255
    9a28:	7f 7f       	andi	r23, 0xFF	; 255
    9a2a:	7f 7f       	andi	r23, 0xFF	; 255
    9a2c:	7f 7f       	andi	r23, 0xFF	; 255
    9a2e:	7f 7f       	andi	r23, 0xFF	; 255
    9a30:	7f 7f       	andi	r23, 0xFF	; 255
    9a32:	7f 7f       	andi	r23, 0xFF	; 255
    9a34:	7f 7f       	andi	r23, 0xFF	; 255
    9a36:	7f 7f       	andi	r23, 0xFF	; 255
    9a38:	7f 7f       	andi	r23, 0xFF	; 255
    9a3a:	7f 7f       	andi	r23, 0xFF	; 255
    9a3c:	7f 7f       	andi	r23, 0xFF	; 255
    9a3e:	7f 7f       	andi	r23, 0xFF	; 255
    9a40:	80 80       	ld	r8, Z
    9a42:	80 80       	ld	r8, Z
    9a44:	80 80       	ld	r8, Z
    9a46:	80 80       	ld	r8, Z
    9a48:	80 80       	ld	r8, Z
    9a4a:	80 80       	ld	r8, Z
    9a4c:	80 80       	ld	r8, Z
    9a4e:	80 80       	ld	r8, Z
    9a50:	80 80       	ld	r8, Z
    9a52:	80 80       	ld	r8, Z
    9a54:	80 80       	ld	r8, Z
    9a56:	80 80       	ld	r8, Z
    9a58:	80 80       	ld	r8, Z
    9a5a:	80 80       	ld	r8, Z
    9a5c:	80 80       	ld	r8, Z
    9a5e:	80 80       	ld	r8, Z
    9a60:	80 80       	ld	r8, Z
    9a62:	80 80       	ld	r8, Z
    9a64:	80 80       	ld	r8, Z
    9a66:	80 80       	ld	r8, Z
    9a68:	80 80       	ld	r8, Z
    9a6a:	80 80       	ld	r8, Z
    9a6c:	80 80       	ld	r8, Z
    9a6e:	80 80       	ld	r8, Z
    9a70:	80 80       	ld	r8, Z
    9a72:	80 80       	ld	r8, Z
    9a74:	80 80       	ld	r8, Z
    9a76:	80 80       	ld	r8, Z
    9a78:	80 80       	ld	r8, Z
    9a7a:	80 80       	ld	r8, Z
    9a7c:	80 80       	ld	r8, Z
    9a7e:	80 80       	ld	r8, Z
    9a80:	80 80       	ld	r8, Z
    9a82:	80 80       	ld	r8, Z
    9a84:	80 80       	ld	r8, Z
    9a86:	80 80       	ld	r8, Z
    9a88:	80 80       	ld	r8, Z
    9a8a:	80 80       	ld	r8, Z
    9a8c:	80 80       	ld	r8, Z
    9a8e:	80 80       	ld	r8, Z
    9a90:	80 80       	ld	r8, Z
    9a92:	80 80       	ld	r8, Z
    9a94:	80 80       	ld	r8, Z
    9a96:	80 80       	ld	r8, Z
    9a98:	80 80       	ld	r8, Z
    9a9a:	80 80       	ld	r8, Z
    9a9c:	80 80       	ld	r8, Z
    9a9e:	80 80       	ld	r8, Z
    9aa0:	80 80       	ld	r8, Z
    9aa2:	80 80       	ld	r8, Z
    9aa4:	80 80       	ld	r8, Z
    9aa6:	80 80       	ld	r8, Z
    9aa8:	80 80       	ld	r8, Z
    9aaa:	80 80       	ld	r8, Z
    9aac:	80 80       	ld	r8, Z
    9aae:	80 80       	ld	r8, Z
    9ab0:	80 80       	ld	r8, Z
    9ab2:	80 80       	ld	r8, Z
    9ab4:	80 80       	ld	r8, Z
    9ab6:	80 80       	ld	r8, Z
    9ab8:	80 80       	ld	r8, Z
    9aba:	80 80       	ld	r8, Z
    9abc:	80 80       	ld	r8, Z
    9abe:	80 80       	ld	r8, Z
    9ac0:	80 80       	ld	r8, Z
    9ac2:	80 80       	ld	r8, Z
    9ac4:	80 80       	ld	r8, Z
    9ac6:	80 80       	ld	r8, Z
    9ac8:	80 80       	ld	r8, Z
    9aca:	80 80       	ld	r8, Z
    9acc:	80 80       	ld	r8, Z
    9ace:	80 80       	ld	r8, Z
    9ad0:	80 80       	ld	r8, Z
    9ad2:	80 80       	ld	r8, Z
    9ad4:	80 80       	ld	r8, Z
    9ad6:	80 80       	ld	r8, Z
    9ad8:	80 80       	ld	r8, Z
    9ada:	80 80       	ld	r8, Z
    9adc:	80 80       	ld	r8, Z
    9ade:	80 80       	ld	r8, Z
    9ae0:	80 80       	ld	r8, Z
    9ae2:	80 80       	ld	r8, Z
    9ae4:	80 80       	ld	r8, Z
    9ae6:	80 80       	ld	r8, Z
    9ae8:	80 80       	ld	r8, Z
    9aea:	80 80       	ld	r8, Z
    9aec:	80 80       	ld	r8, Z
    9aee:	80 80       	ld	r8, Z
    9af0:	80 80       	ld	r8, Z
    9af2:	80 80       	ld	r8, Z
    9af4:	80 80       	ld	r8, Z
    9af6:	80 80       	ld	r8, Z
    9af8:	80 80       	ld	r8, Z
    9afa:	80 80       	ld	r8, Z
    9afc:	80 80       	ld	r8, Z
    9afe:	80 80       	ld	r8, Z
    9b00:	7f 7f       	andi	r23, 0xFF	; 255
    9b02:	7f 7f       	andi	r23, 0xFF	; 255
    9b04:	7f 7f       	andi	r23, 0xFF	; 255
    9b06:	7f 7f       	andi	r23, 0xFF	; 255
    9b08:	7f 7f       	andi	r23, 0xFF	; 255
    9b0a:	7f 7f       	andi	r23, 0xFF	; 255
    9b0c:	7f 7f       	andi	r23, 0xFF	; 255
    9b0e:	7f 7f       	andi	r23, 0xFF	; 255
    9b10:	7f 7f       	andi	r23, 0xFF	; 255
    9b12:	7f 7f       	andi	r23, 0xFF	; 255
    9b14:	7f 7f       	andi	r23, 0xFF	; 255
    9b16:	7f 7f       	andi	r23, 0xFF	; 255
    9b18:	7f 7f       	andi	r23, 0xFF	; 255
    9b1a:	7f 7f       	andi	r23, 0xFF	; 255
    9b1c:	7f 7f       	andi	r23, 0xFF	; 255
    9b1e:	7f 7f       	andi	r23, 0xFF	; 255
    9b20:	7f 7f       	andi	r23, 0xFF	; 255
    9b22:	7f 7f       	andi	r23, 0xFF	; 255
    9b24:	7f 7f       	andi	r23, 0xFF	; 255
    9b26:	7f 7f       	andi	r23, 0xFF	; 255
    9b28:	7f 7f       	andi	r23, 0xFF	; 255
    9b2a:	7f 7f       	andi	r23, 0xFF	; 255
    9b2c:	7f 7f       	andi	r23, 0xFF	; 255
    9b2e:	7f 7f       	andi	r23, 0xFF	; 255
    9b30:	7f 7f       	andi	r23, 0xFF	; 255
    9b32:	7f 7f       	andi	r23, 0xFF	; 255
    9b34:	7f 7f       	andi	r23, 0xFF	; 255
    9b36:	7f 7f       	andi	r23, 0xFF	; 255
    9b38:	7f 7f       	andi	r23, 0xFF	; 255
    9b3a:	7f 7f       	andi	r23, 0xFF	; 255
    9b3c:	7f 7f       	andi	r23, 0xFF	; 255
    9b3e:	7f 7f       	andi	r23, 0xFF	; 255
    9b40:	7f 7f       	andi	r23, 0xFF	; 255
    9b42:	7f 7f       	andi	r23, 0xFF	; 255
    9b44:	7f 7f       	andi	r23, 0xFF	; 255
    9b46:	7f 7f       	andi	r23, 0xFF	; 255
    9b48:	7f 7f       	andi	r23, 0xFF	; 255
    9b4a:	7f 7f       	andi	r23, 0xFF	; 255
    9b4c:	7f 7f       	andi	r23, 0xFF	; 255
    9b4e:	7f 7f       	andi	r23, 0xFF	; 255
    9b50:	7f 7f       	andi	r23, 0xFF	; 255
    9b52:	7f 7f       	andi	r23, 0xFF	; 255
    9b54:	7f 7f       	andi	r23, 0xFF	; 255
    9b56:	7f 7f       	andi	r23, 0xFF	; 255
    9b58:	7f 7f       	andi	r23, 0xFF	; 255
    9b5a:	7f 7f       	andi	r23, 0xFF	; 255
    9b5c:	7f 7f       	andi	r23, 0xFF	; 255
    9b5e:	7f 7f       	andi	r23, 0xFF	; 255
    9b60:	7f 7f       	andi	r23, 0xFF	; 255
    9b62:	7f 7f       	andi	r23, 0xFF	; 255
    9b64:	7f 7f       	andi	r23, 0xFF	; 255
    9b66:	7f 7f       	andi	r23, 0xFF	; 255
    9b68:	7f 7f       	andi	r23, 0xFF	; 255
    9b6a:	7f 7f       	andi	r23, 0xFF	; 255
    9b6c:	7f 7f       	andi	r23, 0xFF	; 255
    9b6e:	7f 7f       	andi	r23, 0xFF	; 255
    9b70:	7f 7f       	andi	r23, 0xFF	; 255
    9b72:	7f 7f       	andi	r23, 0xFF	; 255
    9b74:	7f 7f       	andi	r23, 0xFF	; 255
    9b76:	7f 7f       	andi	r23, 0xFF	; 255
    9b78:	7f 7f       	andi	r23, 0xFF	; 255
    9b7a:	7f 7f       	andi	r23, 0xFF	; 255
    9b7c:	7f 7f       	andi	r23, 0xFF	; 255
    9b7e:	7f 7f       	andi	r23, 0xFF	; 255
    9b80:	80 80       	ld	r8, Z
    9b82:	80 80       	ld	r8, Z
    9b84:	80 80       	ld	r8, Z
    9b86:	80 80       	ld	r8, Z
    9b88:	80 80       	ld	r8, Z
    9b8a:	80 80       	ld	r8, Z
    9b8c:	80 80       	ld	r8, Z
    9b8e:	80 80       	ld	r8, Z
    9b90:	80 80       	ld	r8, Z
    9b92:	80 80       	ld	r8, Z
    9b94:	80 80       	ld	r8, Z
    9b96:	80 80       	ld	r8, Z
    9b98:	80 80       	ld	r8, Z
    9b9a:	80 80       	ld	r8, Z
    9b9c:	80 80       	ld	r8, Z
    9b9e:	80 80       	ld	r8, Z
    9ba0:	80 80       	ld	r8, Z
    9ba2:	80 80       	ld	r8, Z
    9ba4:	80 80       	ld	r8, Z
    9ba6:	80 80       	ld	r8, Z
    9ba8:	80 80       	ld	r8, Z
    9baa:	80 80       	ld	r8, Z
    9bac:	80 80       	ld	r8, Z
    9bae:	80 80       	ld	r8, Z
    9bb0:	80 80       	ld	r8, Z
    9bb2:	80 80       	ld	r8, Z
    9bb4:	80 80       	ld	r8, Z
    9bb6:	80 80       	ld	r8, Z
    9bb8:	80 80       	ld	r8, Z
    9bba:	80 80       	ld	r8, Z
    9bbc:	80 80       	ld	r8, Z
    9bbe:	80 80       	ld	r8, Z
    9bc0:	80 80       	ld	r8, Z
    9bc2:	80 80       	ld	r8, Z
    9bc4:	80 80       	ld	r8, Z
    9bc6:	80 80       	ld	r8, Z
    9bc8:	80 80       	ld	r8, Z
    9bca:	80 80       	ld	r8, Z
    9bcc:	80 80       	ld	r8, Z
    9bce:	80 80       	ld	r8, Z
    9bd0:	80 80       	ld	r8, Z
    9bd2:	80 80       	ld	r8, Z
    9bd4:	80 80       	ld	r8, Z
    9bd6:	80 80       	ld	r8, Z
    9bd8:	80 80       	ld	r8, Z
    9bda:	80 80       	ld	r8, Z
    9bdc:	80 80       	ld	r8, Z
    9bde:	80 80       	ld	r8, Z
    9be0:	80 80       	ld	r8, Z
    9be2:	80 80       	ld	r8, Z
    9be4:	80 80       	ld	r8, Z
    9be6:	80 80       	ld	r8, Z
    9be8:	80 80       	ld	r8, Z
    9bea:	80 80       	ld	r8, Z
    9bec:	80 80       	ld	r8, Z
    9bee:	80 80       	ld	r8, Z
    9bf0:	80 80       	ld	r8, Z
    9bf2:	80 80       	ld	r8, Z
    9bf4:	80 80       	ld	r8, Z
    9bf6:	80 80       	ld	r8, Z
    9bf8:	80 80       	ld	r8, Z
    9bfa:	80 80       	ld	r8, Z
    9bfc:	80 80       	ld	r8, Z
    9bfe:	80 80       	ld	r8, Z
    9c00:	7f 7f       	andi	r23, 0xFF	; 255
    9c02:	7f 7f       	andi	r23, 0xFF	; 255
    9c04:	7f 7f       	andi	r23, 0xFF	; 255
    9c06:	7f 7f       	andi	r23, 0xFF	; 255
    9c08:	7f 7f       	andi	r23, 0xFF	; 255
    9c0a:	7f 7f       	andi	r23, 0xFF	; 255
    9c0c:	7f 7f       	andi	r23, 0xFF	; 255
    9c0e:	7f 7f       	andi	r23, 0xFF	; 255
    9c10:	7f 7f       	andi	r23, 0xFF	; 255
    9c12:	7f 7f       	andi	r23, 0xFF	; 255
    9c14:	7f 7f       	andi	r23, 0xFF	; 255
    9c16:	7f 7f       	andi	r23, 0xFF	; 255
    9c18:	7f 7f       	andi	r23, 0xFF	; 255
    9c1a:	7f 7f       	andi	r23, 0xFF	; 255
    9c1c:	7f 7f       	andi	r23, 0xFF	; 255
    9c1e:	7f 7f       	andi	r23, 0xFF	; 255
    9c20:	7f 7f       	andi	r23, 0xFF	; 255
    9c22:	7f 7f       	andi	r23, 0xFF	; 255
    9c24:	7f 7f       	andi	r23, 0xFF	; 255
    9c26:	7f 7f       	andi	r23, 0xFF	; 255
    9c28:	7f 7f       	andi	r23, 0xFF	; 255
    9c2a:	7f 7f       	andi	r23, 0xFF	; 255
    9c2c:	7f 7f       	andi	r23, 0xFF	; 255
    9c2e:	7f 7f       	andi	r23, 0xFF	; 255
    9c30:	7f 7f       	andi	r23, 0xFF	; 255
    9c32:	7f 7f       	andi	r23, 0xFF	; 255
    9c34:	7f 7f       	andi	r23, 0xFF	; 255
    9c36:	7f 7f       	andi	r23, 0xFF	; 255
    9c38:	7f 7f       	andi	r23, 0xFF	; 255
    9c3a:	7f 7f       	andi	r23, 0xFF	; 255
    9c3c:	7f 7f       	andi	r23, 0xFF	; 255
    9c3e:	7f 7f       	andi	r23, 0xFF	; 255
    9c40:	7f 7f       	andi	r23, 0xFF	; 255
    9c42:	7f 7f       	andi	r23, 0xFF	; 255
    9c44:	7f 7f       	andi	r23, 0xFF	; 255
    9c46:	7f 7f       	andi	r23, 0xFF	; 255
    9c48:	7f 7f       	andi	r23, 0xFF	; 255
    9c4a:	7f 7f       	andi	r23, 0xFF	; 255
    9c4c:	7f 7f       	andi	r23, 0xFF	; 255
    9c4e:	7f 7f       	andi	r23, 0xFF	; 255
    9c50:	7f 7f       	andi	r23, 0xFF	; 255
    9c52:	7f 7f       	andi	r23, 0xFF	; 255
    9c54:	7f 7f       	andi	r23, 0xFF	; 255
    9c56:	7f 7f       	andi	r23, 0xFF	; 255
    9c58:	7f 7f       	andi	r23, 0xFF	; 255
    9c5a:	7f 7f       	andi	r23, 0xFF	; 255
    9c5c:	7f 7f       	andi	r23, 0xFF	; 255
    9c5e:	7f 7f       	andi	r23, 0xFF	; 255
    9c60:	7f 7f       	andi	r23, 0xFF	; 255
    9c62:	7f 7f       	andi	r23, 0xFF	; 255
    9c64:	7f 7f       	andi	r23, 0xFF	; 255
    9c66:	7f 7f       	andi	r23, 0xFF	; 255
    9c68:	7f 7f       	andi	r23, 0xFF	; 255
    9c6a:	7f 7f       	andi	r23, 0xFF	; 255
    9c6c:	7f 7f       	andi	r23, 0xFF	; 255
    9c6e:	7f 7f       	andi	r23, 0xFF	; 255
    9c70:	7f 7f       	andi	r23, 0xFF	; 255
    9c72:	7f 7f       	andi	r23, 0xFF	; 255
    9c74:	7f 7f       	andi	r23, 0xFF	; 255
    9c76:	7f 7f       	andi	r23, 0xFF	; 255
    9c78:	7f 7f       	andi	r23, 0xFF	; 255
    9c7a:	7f 7f       	andi	r23, 0xFF	; 255
    9c7c:	7f 7f       	andi	r23, 0xFF	; 255
    9c7e:	7f 7f       	andi	r23, 0xFF	; 255
    9c80:	7f 7f       	andi	r23, 0xFF	; 255
    9c82:	7f 7f       	andi	r23, 0xFF	; 255
    9c84:	7f 7f       	andi	r23, 0xFF	; 255
    9c86:	7f 7f       	andi	r23, 0xFF	; 255
    9c88:	7f 7f       	andi	r23, 0xFF	; 255
    9c8a:	7f 7f       	andi	r23, 0xFF	; 255
    9c8c:	7f 7f       	andi	r23, 0xFF	; 255
    9c8e:	7f 7f       	andi	r23, 0xFF	; 255
    9c90:	7f 7f       	andi	r23, 0xFF	; 255
    9c92:	7f 7f       	andi	r23, 0xFF	; 255
    9c94:	7f 7f       	andi	r23, 0xFF	; 255
    9c96:	7f 7f       	andi	r23, 0xFF	; 255
    9c98:	7f 7f       	andi	r23, 0xFF	; 255
    9c9a:	7f 7f       	andi	r23, 0xFF	; 255
    9c9c:	7f 7f       	andi	r23, 0xFF	; 255
    9c9e:	7f 7f       	andi	r23, 0xFF	; 255
    9ca0:	7f 7f       	andi	r23, 0xFF	; 255
    9ca2:	7f 7f       	andi	r23, 0xFF	; 255
    9ca4:	7f 7f       	andi	r23, 0xFF	; 255
    9ca6:	7f 7f       	andi	r23, 0xFF	; 255
    9ca8:	7f 7f       	andi	r23, 0xFF	; 255
    9caa:	7f 7f       	andi	r23, 0xFF	; 255
    9cac:	7f 7f       	andi	r23, 0xFF	; 255
    9cae:	7f 7f       	andi	r23, 0xFF	; 255
    9cb0:	7f 7f       	andi	r23, 0xFF	; 255
    9cb2:	7f 7f       	andi	r23, 0xFF	; 255
    9cb4:	7f 7f       	andi	r23, 0xFF	; 255
    9cb6:	7f 7f       	andi	r23, 0xFF	; 255
    9cb8:	7f 7f       	andi	r23, 0xFF	; 255
    9cba:	7f 7f       	andi	r23, 0xFF	; 255
    9cbc:	7f 7f       	andi	r23, 0xFF	; 255
    9cbe:	7f 7f       	andi	r23, 0xFF	; 255
    9cc0:	80 80       	ld	r8, Z
    9cc2:	80 80       	ld	r8, Z
    9cc4:	80 80       	ld	r8, Z
    9cc6:	80 80       	ld	r8, Z
    9cc8:	80 80       	ld	r8, Z
    9cca:	80 80       	ld	r8, Z
    9ccc:	80 80       	ld	r8, Z
    9cce:	80 80       	ld	r8, Z
    9cd0:	80 80       	ld	r8, Z
    9cd2:	80 80       	ld	r8, Z
    9cd4:	80 80       	ld	r8, Z
    9cd6:	80 80       	ld	r8, Z
    9cd8:	80 80       	ld	r8, Z
    9cda:	80 80       	ld	r8, Z
    9cdc:	80 80       	ld	r8, Z
    9cde:	80 80       	ld	r8, Z
    9ce0:	80 80       	ld	r8, Z
    9ce2:	80 80       	ld	r8, Z
    9ce4:	80 80       	ld	r8, Z
    9ce6:	80 80       	ld	r8, Z
    9ce8:	80 80       	ld	r8, Z
    9cea:	80 80       	ld	r8, Z
    9cec:	80 80       	ld	r8, Z
    9cee:	80 80       	ld	r8, Z
    9cf0:	80 80       	ld	r8, Z
    9cf2:	80 80       	ld	r8, Z
    9cf4:	80 80       	ld	r8, Z
    9cf6:	80 80       	ld	r8, Z
    9cf8:	80 80       	ld	r8, Z
    9cfa:	80 80       	ld	r8, Z
    9cfc:	80 80       	ld	r8, Z
    9cfe:	80 80       	ld	r8, Z
    9d00:	03 09       	sbc	r16, r3
    9d02:	13 1e       	adc	r1, r19
    9d04:	28 31       	cpi	r18, 0x18	; 24
    9d06:	3a 40       	sbci	r19, 0x0A	; 10
    9d08:	46 4c       	sbci	r20, 0xC6	; 198
    9d0a:	50 54       	subi	r21, 0x40	; 64
    9d0c:	58 5b       	subi	r21, 0xB8	; 184
    9d0e:	5e 61       	ori	r21, 0x1E	; 30
    9d10:	63 65       	ori	r22, 0x53	; 83
    9d12:	67 69       	ori	r22, 0x97	; 151
    9d14:	6b 6c       	ori	r22, 0xCB	; 203
    9d16:	6e 6f       	ori	r22, 0xFE	; 254
    9d18:	70 71       	andi	r23, 0x10	; 16
    9d1a:	72 73       	andi	r23, 0x32	; 50
    9d1c:	74 75       	andi	r23, 0x54	; 84
    9d1e:	76 77       	andi	r23, 0x76	; 118
    9d20:	77 78       	andi	r23, 0x87	; 135
    9d22:	79 79       	andi	r23, 0x99	; 153
    9d24:	7a 7a       	andi	r23, 0xAA	; 170
    9d26:	7b 7b       	andi	r23, 0xBB	; 187
    9d28:	7c 7c       	andi	r23, 0xCC	; 204
    9d2a:	7c 7d       	andi	r23, 0xDC	; 220
    9d2c:	7d 7d       	andi	r23, 0xDD	; 221
    9d2e:	7e 7e       	andi	r23, 0xEE	; 238
    9d30:	7e 7e       	andi	r23, 0xEE	; 238
    9d32:	7f 7f       	andi	r23, 0xFF	; 255
    9d34:	7f 7f       	andi	r23, 0xFF	; 255
    9d36:	7f 7f       	andi	r23, 0xFF	; 255
    9d38:	7f 7f       	andi	r23, 0xFF	; 255
    9d3a:	7f 7f       	andi	r23, 0xFF	; 255
    9d3c:	7f 7f       	andi	r23, 0xFF	; 255
    9d3e:	7f 7f       	andi	r23, 0xFF	; 255
    9d40:	7f 7f       	andi	r23, 0xFF	; 255
    9d42:	7f 7f       	andi	r23, 0xFF	; 255
    9d44:	7f 7f       	andi	r23, 0xFF	; 255
    9d46:	7f 7f       	andi	r23, 0xFF	; 255
    9d48:	7f 7f       	andi	r23, 0xFF	; 255
    9d4a:	7f 7f       	andi	r23, 0xFF	; 255
    9d4c:	7f 7e       	andi	r23, 0xEF	; 239
    9d4e:	7e 7e       	andi	r23, 0xEE	; 238
    9d50:	7e 7d       	andi	r23, 0xDE	; 222
    9d52:	7d 7d       	andi	r23, 0xDD	; 221
    9d54:	7c 7c       	andi	r23, 0xCC	; 204
    9d56:	7c 7b       	andi	r23, 0xBC	; 188
    9d58:	7b 7a       	andi	r23, 0xAB	; 171
    9d5a:	7a 79       	andi	r23, 0x9A	; 154
    9d5c:	79 78       	andi	r23, 0x89	; 137
    9d5e:	77 77       	andi	r23, 0x77	; 119
    9d60:	76 75       	andi	r23, 0x56	; 86
    9d62:	74 73       	andi	r23, 0x34	; 52
    9d64:	72 71       	andi	r23, 0x12	; 18
    9d66:	70 6f       	ori	r23, 0xF0	; 240
    9d68:	6e 6c       	ori	r22, 0xCE	; 206
    9d6a:	6b 69       	ori	r22, 0x9B	; 155
    9d6c:	67 65       	ori	r22, 0x57	; 87
    9d6e:	63 61       	ori	r22, 0x13	; 19
    9d70:	5e 5b       	subi	r21, 0xBE	; 190
    9d72:	58 54       	subi	r21, 0x48	; 72
    9d74:	50 4c       	sbci	r21, 0xC0	; 192
    9d76:	46 40       	sbci	r20, 0x06	; 6
    9d78:	3a 31       	cpi	r19, 0x1A	; 26
    9d7a:	28 1e       	adc	r2, r24
    9d7c:	13 09       	sbc	r17, r3
    9d7e:	03 00       	.word	0x0003	; ????
    9d80:	c6 cc       	rjmp	.-1652   	; 0x970e <waves+0xe>
    9d82:	d5 db       	rcall	.-2134   	; 0x952e <steptable+0x26>
    9d84:	df e3       	ldi	r29, 0x3F	; 63
    9d86:	e5 e7       	ldi	r30, 0x75	; 117
    9d88:	e9 ea       	ldi	r30, 0xA9	; 169
    9d8a:	eb ec       	ldi	r30, 0xCB	; 203
    9d8c:	ed ee       	ldi	r30, 0xED	; 237
    9d8e:	ef ef       	ldi	r30, 0xFF	; 255
    9d90:	f0 f0       	brcs	.+60     	; 0x9dce <waves+0x6ce>
    9d92:	f0 f1       	brcs	.+124    	; 0x9e10 <waves+0x710>
    9d94:	f1 f1       	breq	.+124    	; 0x9e12 <waves+0x712>
    9d96:	f1 f2       	breq	.-68     	; 0x9d54 <waves+0x654>
    9d98:	f2 f2       	brmi	.-68     	; 0x9d56 <waves+0x656>
    9d9a:	f2 f2       	brmi	.-68     	; 0x9d58 <waves+0x658>
    9d9c:	f2 f2       	brmi	.-68     	; 0x9d5a <waves+0x65a>
    9d9e:	f2 f3       	brmi	.-4      	; 0x9d9c <waves+0x69c>
    9da0:	f3 f3       	brvs	.-4      	; 0x9d9e <waves+0x69e>
    9da2:	f3 f3       	brvs	.-4      	; 0x9da0 <waves+0x6a0>
    9da4:	f3 f3       	brvs	.-4      	; 0x9da2 <waves+0x6a2>
    9da6:	f3 f3       	brvs	.-4      	; 0x9da4 <waves+0x6a4>
    9da8:	f3 f3       	brvs	.-4      	; 0x9da6 <waves+0x6a6>
    9daa:	f3 f3       	brvs	.-4      	; 0x9da8 <waves+0x6a8>
    9dac:	f3 f3       	brvs	.-4      	; 0x9daa <waves+0x6aa>
    9dae:	f3 f3       	brvs	.-4      	; 0x9dac <waves+0x6ac>
    9db0:	f3 f3       	brvs	.-4      	; 0x9dae <waves+0x6ae>
    9db2:	f3 f3       	brvs	.-4      	; 0x9db0 <waves+0x6b0>
    9db4:	f3 f3       	brvs	.-4      	; 0x9db2 <waves+0x6b2>
    9db6:	f3 f3       	brvs	.-4      	; 0x9db4 <waves+0x6b4>
    9db8:	f3 f3       	brvs	.-4      	; 0x9db6 <waves+0x6b6>
    9dba:	f3 f3       	brvs	.-4      	; 0x9db8 <waves+0x6b8>
    9dbc:	f3 f3       	brvs	.-4      	; 0x9dba <waves+0x6ba>
    9dbe:	f3 f3       	brvs	.-4      	; 0x9dbc <waves+0x6bc>
    9dc0:	f3 f3       	brvs	.-4      	; 0x9dbe <waves+0x6be>
    9dc2:	f3 f3       	brvs	.-4      	; 0x9dc0 <waves+0x6c0>
    9dc4:	f3 f3       	brvs	.-4      	; 0x9dc2 <waves+0x6c2>
    9dc6:	f3 f3       	brvs	.-4      	; 0x9dc4 <waves+0x6c4>
    9dc8:	f3 f3       	brvs	.-4      	; 0x9dc6 <waves+0x6c6>
    9dca:	f3 f3       	brvs	.-4      	; 0x9dc8 <waves+0x6c8>
    9dcc:	f3 f3       	brvs	.-4      	; 0x9dca <waves+0x6ca>
    9dce:	f3 f3       	brvs	.-4      	; 0x9dcc <waves+0x6cc>
    9dd0:	f3 f3       	brvs	.-4      	; 0x9dce <waves+0x6ce>
    9dd2:	f3 f3       	brvs	.-4      	; 0x9dd0 <waves+0x6d0>
    9dd4:	f3 f3       	brvs	.-4      	; 0x9dd2 <waves+0x6d2>
    9dd6:	f3 f3       	brvs	.-4      	; 0x9dd4 <waves+0x6d4>
    9dd8:	f3 f3       	brvs	.-4      	; 0x9dd6 <waves+0x6d6>
    9dda:	f3 f3       	brvs	.-4      	; 0x9dd8 <waves+0x6d8>
    9ddc:	f3 f3       	brvs	.-4      	; 0x9dda <waves+0x6da>
    9dde:	f3 f3       	brvs	.-4      	; 0x9ddc <waves+0x6dc>
    9de0:	f2 f2       	brmi	.-68     	; 0x9d9e <waves+0x69e>
    9de2:	f2 f2       	brmi	.-68     	; 0x9da0 <waves+0x6a0>
    9de4:	f2 f2       	brmi	.-68     	; 0x9da2 <waves+0x6a2>
    9de6:	f2 f2       	brmi	.-68     	; 0x9da4 <waves+0x6a4>
    9de8:	f1 f1       	breq	.+124    	; 0x9e66 <waves+0x766>
    9dea:	f1 f1       	breq	.+124    	; 0x9e68 <waves+0x768>
    9dec:	f0 f0       	brcs	.+60     	; 0x9e2a <waves+0x72a>
    9dee:	f0 ef       	ldi	r31, 0xF0	; 240
    9df0:	ef ee       	ldi	r30, 0xEF	; 239
    9df2:	ed ec       	ldi	r30, 0xCD	; 205
    9df4:	eb ea       	ldi	r30, 0xAB	; 171
    9df6:	e9 e7       	ldi	r30, 0x79	; 121
    9df8:	e5 e3       	ldi	r30, 0x35	; 53
    9dfa:	df db       	rcall	.-2114   	; 0x95ba <steptable+0xb2>
    9dfc:	d5 cc       	rjmp	.-1622   	; 0x97a8 <waves+0xa8>
    9dfe:	c6 00       	.word	0x00c6	; ????
    9e00:	00 28       	or	r0, r0
    9e02:	3d 42       	sbci	r19, 0x2D	; 45
    9e04:	30 2d       	mov	r19, r0
    9e06:	2c 2b       	or	r18, r28
    9e08:	2c 2d       	mov	r18, r12
    9e0a:	2e 2f       	mov	r18, r30
    9e0c:	30 32       	cpi	r19, 0x20	; 32
    9e0e:	33 35       	cpi	r19, 0x53	; 83
    9e10:	37 39       	cpi	r19, 0x97	; 151
    9e12:	3b 3d       	cpi	r19, 0xDB	; 219
    9e14:	3f 41       	sbci	r19, 0x1F	; 31
    9e16:	43 45       	sbci	r20, 0x53	; 83
    9e18:	48 4a       	sbci	r20, 0xA8	; 168
    9e1a:	4c 4e       	sbci	r20, 0xEC	; 236
    9e1c:	50 53       	subi	r21, 0x30	; 48
    9e1e:	55 57       	subi	r21, 0x75	; 117
    9e20:	59 5b       	subi	r21, 0xB9	; 185
    9e22:	5d 5f       	subi	r21, 0xFD	; 253
    9e24:	61 63       	ori	r22, 0x31	; 49
    9e26:	65 67       	ori	r22, 0x75	; 117
    9e28:	69 6b       	ori	r22, 0xB9	; 185
    9e2a:	6c 6e       	ori	r22, 0xEC	; 236
    9e2c:	70 71       	andi	r23, 0x10	; 16
    9e2e:	73 74       	andi	r23, 0x43	; 67
    9e30:	75 77       	andi	r23, 0x75	; 117
    9e32:	78 79       	andi	r23, 0x98	; 152
    9e34:	7a 7b       	andi	r23, 0xBA	; 186
    9e36:	7c 7d       	andi	r23, 0xDC	; 220
    9e38:	7d 7e       	andi	r23, 0xED	; 237
    9e3a:	7e 7f       	andi	r23, 0xFE	; 254
    9e3c:	7f 7f       	andi	r23, 0xFF	; 255
    9e3e:	7f 7f       	andi	r23, 0xFF	; 255
    9e40:	7f 7f       	andi	r23, 0xFF	; 255
    9e42:	7f 7f       	andi	r23, 0xFF	; 255
    9e44:	7f 7f       	andi	r23, 0xFF	; 255
    9e46:	7e 7e       	andi	r23, 0xEE	; 238
    9e48:	7d 7d       	andi	r23, 0xDD	; 221
    9e4a:	7c 7b       	andi	r23, 0xBC	; 188
    9e4c:	7a 79       	andi	r23, 0x9A	; 154
    9e4e:	78 77       	andi	r23, 0x78	; 120
    9e50:	75 74       	andi	r23, 0x45	; 69
    9e52:	73 71       	andi	r23, 0x13	; 19
    9e54:	70 6e       	ori	r23, 0xE0	; 224
    9e56:	6c 6b       	ori	r22, 0xBC	; 188
    9e58:	69 67       	ori	r22, 0x79	; 121
    9e5a:	65 63       	ori	r22, 0x35	; 53
    9e5c:	61 5f       	subi	r22, 0xF1	; 241
    9e5e:	5d 5b       	subi	r21, 0xBD	; 189
    9e60:	59 57       	subi	r21, 0x79	; 121
    9e62:	55 53       	subi	r21, 0x35	; 53
    9e64:	50 4e       	sbci	r21, 0xE0	; 224
    9e66:	4c 4a       	sbci	r20, 0xAC	; 172
    9e68:	48 45       	sbci	r20, 0x58	; 88
    9e6a:	43 41       	sbci	r20, 0x13	; 19
    9e6c:	3f 3d       	cpi	r19, 0xDF	; 223
    9e6e:	3b 39       	cpi	r19, 0x9B	; 155
    9e70:	37 35       	cpi	r19, 0x57	; 87
    9e72:	33 32       	cpi	r19, 0x23	; 35
    9e74:	30 2f       	mov	r19, r16
    9e76:	2e 2d       	mov	r18, r14
    9e78:	2c 2b       	or	r18, r28
    9e7a:	2c 2d       	mov	r18, r12
    9e7c:	30 42       	sbci	r19, 0x20	; 32
    9e7e:	3d 28       	or	r3, r13
    9e80:	00 e9       	ldi	r16, 0x90	; 144
    9e82:	e5 fe       	sbrs	r14, 5
    9e84:	d4 d7       	rcall	.+4008   	; 0xae2e <print_level_score+0x18>
    9e86:	d7 d7       	rcall	.+4014   	; 0xae36 <print_level_score+0x20>
    9e88:	d6 d4       	rcall	.+2476   	; 0xa836 <LBLineIntersect+0x58>
    9e8a:	d2 d0       	rcall	.+420    	; 0xa030 <waves+0x930>
    9e8c:	ce cc       	rjmp	.-1636   	; 0x982a <waves+0x12a>
    9e8e:	ca c8       	rjmp	.-3692   	; 0x9024 <ProcessMusic+0x44>
    9e90:	c6 c3       	rjmp	.+1932   	; 0xa61e <LBGetNextFrame+0x42>
    9e92:	c1 bf       	out	0x31, r28	; 49
    9e94:	bd ba       	out	0x1d, r11	; 29
    9e96:	b8 b6       	in	r11, 0x38	; 56
    9e98:	b4 b1       	in	r27, 0x04	; 4
    9e9a:	af ad       	ldd	r26, Y+63	; 0x3f
    9e9c:	ab a9       	ldd	r26, Y+51	; 0x33
    9e9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    9ea0:	a3 a1       	ldd	r26, Z+35	; 0x23
    9ea2:	9f 9e       	mul	r9, r31
    9ea4:	9c 9a       	sbi	0x13, 4	; 19
    9ea6:	99 97       	sbiw	r26, 0x29	; 41
    9ea8:	95 94       	asr	r9
    9eaa:	93 91       	.word	0x9193	; ????
    9eac:	90 8f       	std	Z+24, r25	; 0x18
    9eae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9eb0:	8b 8a       	std	Y+19, r8	; 0x13
    9eb2:	89 88       	ldd	r8, Y+17	; 0x11
    9eb4:	88 87       	std	Y+8, r24	; 0x08
    9eb6:	86 85       	ldd	r24, Z+14	; 0x0e
    9eb8:	85 84       	ldd	r8, Z+13	; 0x0d
    9eba:	84 84       	ldd	r8, Z+12	; 0x0c
    9ebc:	83 83       	std	Z+3, r24	; 0x03
    9ebe:	83 83       	std	Z+3, r24	; 0x03
    9ec0:	83 83       	std	Z+3, r24	; 0x03
    9ec2:	83 83       	std	Z+3, r24	; 0x03
    9ec4:	83 84       	ldd	r8, Z+11	; 0x0b
    9ec6:	84 84       	ldd	r8, Z+12	; 0x0c
    9ec8:	85 85       	ldd	r24, Z+13	; 0x0d
    9eca:	86 87       	std	Z+14, r24	; 0x0e
    9ecc:	88 88       	ldd	r8, Y+16	; 0x10
    9ece:	89 8a       	std	Y+17, r8	; 0x11
    9ed0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    9ed2:	8d 8f       	std	Y+29, r24	; 0x1d
    9ed4:	90 91 93 94 	lds	r25, 0x9493
    9ed8:	95 97       	sbiw	r26, 0x25	; 37
    9eda:	99 9a       	sbi	0x13, 1	; 19
    9edc:	9c 9e       	mul	r9, r28
    9ede:	9f a1       	ldd	r25, Y+39	; 0x27
    9ee0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    9ee2:	a7 a9       	ldd	r26, Z+55	; 0x37
    9ee4:	ab ad       	ldd	r26, Y+59	; 0x3b
    9ee6:	af b1       	in	r26, 0x0f	; 15
    9ee8:	b4 b6       	in	r11, 0x34	; 52
    9eea:	b8 ba       	out	0x18, r11	; 24
    9eec:	bd bf       	out	0x3d, r27	; 61
    9eee:	c1 c3       	rjmp	.+1922   	; 0xa672 <LBGetNextFrameReverse+0x4c>
    9ef0:	c6 c8       	rjmp	.-3700   	; 0x907e <ProcessMusic+0x9e>
    9ef2:	ca cc       	rjmp	.-1644   	; 0x9888 <waves+0x188>
    9ef4:	ce d0       	rcall	.+412    	; 0xa092 <waves+0x992>
    9ef6:	d2 d4       	rcall	.+2468   	; 0xa89c <LBLineIntersect+0xbe>
    9ef8:	d6 d7       	rcall	.+4012   	; 0xaea6 <print_final_score+0xc>
    9efa:	d7 d7       	rcall	.+4014   	; 0xaeaa <print_final_score+0x10>
    9efc:	d4 fe       	sbrs	r13, 4
    9efe:	e5 e9       	ldi	r30, 0x95	; 149
    9f00:	f9 f8       	.word	0xf8f9	; ????
    9f02:	f9 f5       	brne	.+126    	; 0x9f82 <waves+0x882>
    9f04:	eb e1       	ldi	r30, 0x1B	; 27
    9f06:	dd de       	rcall	.-582    	; 0x9cc2 <waves+0x5c2>
    9f08:	e0 e2       	ldi	r30, 0x20	; 32
    9f0a:	e4 e5       	ldi	r30, 0x54	; 84
    9f0c:	e6 e5       	ldi	r30, 0x56	; 86
    9f0e:	e4 e2       	ldi	r30, 0x24	; 36
    9f10:	de d9       	rcall	.-3140   	; 0x92ce <ProcessMusic+0x2ee>
    9f12:	d2 ca       	rjmp	.-2652   	; 0x94b8 <esmw+0x30>
    9f14:	c1 b7       	in	r28, 0x31	; 49
    9f16:	ac a2       	std	Y+36, r10	; 0x24
    9f18:	99 91       	ld	r25, Y+
    9f1a:	8a 86       	std	Y+10, r8	; 0x0a
    9f1c:	83 81       	ldd	r24, Z+3	; 0x03
    9f1e:	80 80       	ld	r8, Z
    9f20:	81 82       	std	Z+1, r8	; 0x01
    9f22:	83 85       	ldd	r24, Z+11	; 0x0b
    9f24:	86 88       	ldd	r8, Z+22	; 0x16
    9f26:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9f28:	8d 8f       	std	Y+29, r24	; 0x1d
    9f2a:	90 92 93 95 	sts	0x9593, r9
    9f2e:	96 97       	sbiw	r26, 0x26	; 38
    9f30:	98 99       	sbic	0x13, 0	; 19
    9f32:	9a 9b       	sbis	0x13, 2	; 19
    9f34:	9b 9c       	mul	r9, r11
    9f36:	9d 9d       	mul	r25, r13
    9f38:	9d 9e       	mul	r9, r29
    9f3a:	9e 9e       	mul	r9, r30
    9f3c:	9f 9f       	mul	r25, r31
    9f3e:	9f 9f       	mul	r25, r31
    9f40:	9f 9f       	mul	r25, r31
    9f42:	9f 9e       	mul	r9, r31
    9f44:	9e 9e       	mul	r9, r30
    9f46:	9d 9d       	mul	r25, r13
    9f48:	9d 9c       	mul	r9, r13
    9f4a:	9b 9b       	sbis	0x13, 3	; 19
    9f4c:	9a 99       	sbic	0x13, 2	; 19
    9f4e:	98 97       	sbiw	r26, 0x28	; 40
    9f50:	96 95       	lsr	r25
    9f52:	93 92       	.word	0x9293	; ????
    9f54:	90 8f       	std	Z+24, r25	; 0x18
    9f56:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9f58:	8a 88       	ldd	r8, Y+18	; 0x12
    9f5a:	86 85       	ldd	r24, Z+14	; 0x0e
    9f5c:	83 82       	std	Z+3, r8	; 0x03
    9f5e:	81 80       	ldd	r8, Z+1	; 0x01
    9f60:	80 81       	ld	r24, Z
    9f62:	83 86       	std	Z+11, r8	; 0x0b
    9f64:	8a 91       	ld	r24, -Y
    9f66:	99 a2       	std	Y+33, r9	; 0x21
    9f68:	ac b7       	in	r26, 0x3c	; 60
    9f6a:	c1 ca       	rjmp	.-2686   	; 0x94ee <esmw+0x66>
    9f6c:	d2 d9       	rcall	.-3164   	; 0x9312 <ProcessMusic+0x332>
    9f6e:	de e2       	ldi	r29, 0x2E	; 46
    9f70:	e4 e5       	ldi	r30, 0x54	; 84
    9f72:	e6 e5       	ldi	r30, 0x56	; 86
    9f74:	e4 e2       	ldi	r30, 0x24	; 36
    9f76:	e0 de       	rcall	.-576    	; 0x9d38 <waves+0x638>
    9f78:	dd e1       	ldi	r29, 0x1D	; 29
    9f7a:	eb f5       	brvc	.+122    	; 0x9ff6 <waves+0x8f6>
    9f7c:	f9 f8       	.word	0xf8f9	; ????
    9f7e:	f9 00       	.word	0x00f9	; ????
    9f80:	07 08       	sbc	r0, r7
    9f82:	07 0b       	sbc	r16, r23
    9f84:	15 1f       	adc	r17, r21
    9f86:	23 22       	and	r2, r19
    9f88:	20 1e       	adc	r2, r16
    9f8a:	1c 1b       	sub	r17, r28
    9f8c:	1a 1b       	sub	r17, r26
    9f8e:	1c 1e       	adc	r1, r28
    9f90:	22 27       	eor	r18, r18
    9f92:	2e 36       	cpi	r18, 0x6E	; 110
    9f94:	3f 49       	sbci	r19, 0x9F	; 159
    9f96:	54 5e       	subi	r21, 0xE4	; 228
    9f98:	67 6f       	ori	r22, 0xF7	; 247
    9f9a:	76 7a       	andi	r23, 0xA6	; 166
    9f9c:	7e 7f       	andi	r23, 0xFE	; 254
    9f9e:	7f 7f       	andi	r23, 0xFF	; 255
    9fa0:	7f 7e       	andi	r23, 0xEF	; 239
    9fa2:	7d 7b       	andi	r23, 0xBD	; 189
    9fa4:	7a 78       	andi	r23, 0x8A	; 138
    9fa6:	76 74       	andi	r23, 0x46	; 70
    9fa8:	73 71       	andi	r23, 0x13	; 19
    9faa:	70 6e       	ori	r23, 0xE0	; 224
    9fac:	6d 6b       	ori	r22, 0xBD	; 189
    9fae:	6a 69       	ori	r22, 0x9A	; 154
    9fb0:	68 67       	ori	r22, 0x78	; 120
    9fb2:	66 65       	ori	r22, 0x56	; 86
    9fb4:	65 64       	ori	r22, 0x45	; 69
    9fb6:	64 63       	ori	r22, 0x34	; 52
    9fb8:	63 62       	ori	r22, 0x23	; 35
    9fba:	62 62       	ori	r22, 0x22	; 34
    9fbc:	61 61       	ori	r22, 0x11	; 17
    9fbe:	61 61       	ori	r22, 0x11	; 17
    9fc0:	61 61       	ori	r22, 0x11	; 17
    9fc2:	61 62       	ori	r22, 0x21	; 33
    9fc4:	62 62       	ori	r22, 0x22	; 34
    9fc6:	63 63       	ori	r22, 0x33	; 51
    9fc8:	63 64       	ori	r22, 0x43	; 67
    9fca:	65 65       	ori	r22, 0x55	; 85
    9fcc:	66 67       	ori	r22, 0x76	; 118
    9fce:	68 69       	ori	r22, 0x98	; 152
    9fd0:	6a 6b       	ori	r22, 0xBA	; 186
    9fd2:	6d 6e       	ori	r22, 0xED	; 237
    9fd4:	70 71       	andi	r23, 0x10	; 16
    9fd6:	73 74       	andi	r23, 0x43	; 67
    9fd8:	76 78       	andi	r23, 0x86	; 134
    9fda:	7a 7b       	andi	r23, 0xBA	; 186
    9fdc:	7d 7e       	andi	r23, 0xED	; 237
    9fde:	7f 7f       	andi	r23, 0xFF	; 255
    9fe0:	7f 7f       	andi	r23, 0xFF	; 255
    9fe2:	7e 7a       	andi	r23, 0xAE	; 174
    9fe4:	76 6f       	ori	r23, 0xF6	; 246
    9fe6:	67 5e       	subi	r22, 0xE7	; 231
    9fe8:	54 49       	sbci	r21, 0x94	; 148
    9fea:	3f 36       	cpi	r19, 0x6F	; 111
    9fec:	2e 27       	eor	r18, r30
    9fee:	22 1e       	adc	r2, r18
    9ff0:	1c 1b       	sub	r17, r28
    9ff2:	1a 1b       	sub	r17, r26
    9ff4:	1c 1e       	adc	r1, r28
    9ff6:	20 22       	and	r2, r16
    9ff8:	23 1f       	adc	r18, r19
    9ffa:	15 0b       	sbc	r17, r21
    9ffc:	07 08       	sbc	r0, r7
    9ffe:	07 00       	.word	0x0007	; ????
    a000:	1f 31       	cpi	r17, 0x1F	; 31
    a002:	3d 44       	sbci	r19, 0x4D	; 77
    a004:	4e 53       	subi	r20, 0x3E	; 62
    a006:	54 56       	subi	r21, 0x64	; 100
    a008:	5a 5f       	subi	r21, 0xFA	; 250
    a00a:	64 69       	ori	r22, 0x94	; 148
    a00c:	6e 74       	andi	r22, 0x4E	; 78
    a00e:	76 79       	andi	r23, 0x96	; 150
    a010:	7c 7f       	andi	r23, 0xFC	; 252
    a012:	7f 7f       	andi	r23, 0xFF	; 255
    a014:	7f 7f       	andi	r23, 0xFF	; 255
    a016:	7f 7f       	andi	r23, 0xFF	; 255
    a018:	7f 7f       	andi	r23, 0xFF	; 255
    a01a:	7f 7f       	andi	r23, 0xFF	; 255
    a01c:	7f 7f       	andi	r23, 0xFF	; 255
    a01e:	7f 7f       	andi	r23, 0xFF	; 255
    a020:	7f 7f       	andi	r23, 0xFF	; 255
    a022:	7f 7f       	andi	r23, 0xFF	; 255
    a024:	7f 7f       	andi	r23, 0xFF	; 255
    a026:	7f 7f       	andi	r23, 0xFF	; 255
    a028:	7f 7f       	andi	r23, 0xFF	; 255
    a02a:	7f 7f       	andi	r23, 0xFF	; 255
    a02c:	7f 7f       	andi	r23, 0xFF	; 255
    a02e:	7f 7f       	andi	r23, 0xFF	; 255
    a030:	7f 7f       	andi	r23, 0xFF	; 255
    a032:	7f 7f       	andi	r23, 0xFF	; 255
    a034:	7f 7f       	andi	r23, 0xFF	; 255
    a036:	7f 7f       	andi	r23, 0xFF	; 255
    a038:	7f 7f       	andi	r23, 0xFF	; 255
    a03a:	7f 7f       	andi	r23, 0xFF	; 255
    a03c:	7f 7f       	andi	r23, 0xFF	; 255
    a03e:	7f 7f       	andi	r23, 0xFF	; 255
    a040:	7f 7f       	andi	r23, 0xFF	; 255
    a042:	7f 7f       	andi	r23, 0xFF	; 255
    a044:	7f 7f       	andi	r23, 0xFF	; 255
    a046:	7f 7f       	andi	r23, 0xFF	; 255
    a048:	7f 7f       	andi	r23, 0xFF	; 255
    a04a:	7f 7f       	andi	r23, 0xFF	; 255
    a04c:	7f 7f       	andi	r23, 0xFF	; 255
    a04e:	7f 7f       	andi	r23, 0xFF	; 255
    a050:	7f 7f       	andi	r23, 0xFF	; 255
    a052:	7f 7f       	andi	r23, 0xFF	; 255
    a054:	7f 7f       	andi	r23, 0xFF	; 255
    a056:	7f 7f       	andi	r23, 0xFF	; 255
    a058:	7f 7f       	andi	r23, 0xFF	; 255
    a05a:	7f 7f       	andi	r23, 0xFF	; 255
    a05c:	7f 7f       	andi	r23, 0xFF	; 255
    a05e:	7f 7f       	andi	r23, 0xFF	; 255
    a060:	7f 7f       	andi	r23, 0xFF	; 255
    a062:	7f 7f       	andi	r23, 0xFF	; 255
    a064:	7f 7f       	andi	r23, 0xFF	; 255
    a066:	7f 7f       	andi	r23, 0xFF	; 255
    a068:	7f 7f       	andi	r23, 0xFF	; 255
    a06a:	7f 7f       	andi	r23, 0xFF	; 255
    a06c:	7f 7f       	andi	r23, 0xFF	; 255
    a06e:	7f 7f       	andi	r23, 0xFF	; 255
    a070:	7f 7f       	andi	r23, 0xFF	; 255
    a072:	7f 7f       	andi	r23, 0xFF	; 255
    a074:	7f 7f       	andi	r23, 0xFF	; 255
    a076:	7f 7f       	andi	r23, 0xFF	; 255
    a078:	7f 7f       	andi	r23, 0xFF	; 255
    a07a:	7f 7c       	andi	r23, 0xCF	; 207
    a07c:	78 71       	andi	r23, 0x18	; 24
    a07e:	68 4c       	sbci	r22, 0xC8	; 200
    a080:	2c 1c       	adc	r2, r12
    a082:	12 0c       	add	r1, r2
    a084:	0a 0b       	sbc	r16, r26
    a086:	0a 05       	cpc	r16, r10
    a088:	fd f3       	brhs	.-2      	; 0xa088 <waves+0x988>
    a08a:	e9 df       	rcall	.-46     	; 0xa05e <waves+0x95e>
    a08c:	d4 ca       	rjmp	.-2648   	; 0x9636 <steptable+0x12e>
    a08e:	c0 b7       	in	r28, 0x30	; 48
    a090:	ae a6       	std	Y+46, r10	; 0x2e
    a092:	9e 97       	sbiw	r26, 0x2e	; 46
    a094:	91 8b       	std	Z+17, r25	; 0x11
    a096:	86 85       	ldd	r24, Z+14	; 0x0e
    a098:	82 80       	ldd	r8, Z+2	; 0x02
    a09a:	80 80       	ld	r8, Z
    a09c:	80 80       	ld	r8, Z
    a09e:	80 80       	ld	r8, Z
    a0a0:	80 80       	ld	r8, Z
    a0a2:	80 80       	ld	r8, Z
    a0a4:	80 80       	ld	r8, Z
    a0a6:	80 80       	ld	r8, Z
    a0a8:	80 80       	ld	r8, Z
    a0aa:	80 80       	ld	r8, Z
    a0ac:	80 80       	ld	r8, Z
    a0ae:	80 80       	ld	r8, Z
    a0b0:	80 80       	ld	r8, Z
    a0b2:	80 80       	ld	r8, Z
    a0b4:	80 80       	ld	r8, Z
    a0b6:	80 80       	ld	r8, Z
    a0b8:	80 80       	ld	r8, Z
    a0ba:	80 80       	ld	r8, Z
    a0bc:	80 80       	ld	r8, Z
    a0be:	80 80       	ld	r8, Z
    a0c0:	80 80       	ld	r8, Z
    a0c2:	80 80       	ld	r8, Z
    a0c4:	80 80       	ld	r8, Z
    a0c6:	80 80       	ld	r8, Z
    a0c8:	80 80       	ld	r8, Z
    a0ca:	80 80       	ld	r8, Z
    a0cc:	80 80       	ld	r8, Z
    a0ce:	80 80       	ld	r8, Z
    a0d0:	80 80       	ld	r8, Z
    a0d2:	80 80       	ld	r8, Z
    a0d4:	80 80       	ld	r8, Z
    a0d6:	80 80       	ld	r8, Z
    a0d8:	80 80       	ld	r8, Z
    a0da:	80 80       	ld	r8, Z
    a0dc:	80 80       	ld	r8, Z
    a0de:	80 80       	ld	r8, Z
    a0e0:	80 80       	ld	r8, Z
    a0e2:	80 80       	ld	r8, Z
    a0e4:	80 80       	ld	r8, Z
    a0e6:	80 80       	ld	r8, Z
    a0e8:	80 80       	ld	r8, Z
    a0ea:	80 80       	ld	r8, Z
    a0ec:	80 80       	ld	r8, Z
    a0ee:	80 80       	ld	r8, Z
    a0f0:	80 80       	ld	r8, Z
    a0f2:	80 80       	ld	r8, Z
    a0f4:	80 87       	std	Z+8, r24	; 0x08
    a0f6:	91 9d       	mul	r25, r1
    a0f8:	ac c4       	rjmp	.+2392   	; 0xaa52 <set_shot_animations+0x3e>
    a0fa:	cb d4       	rcall	.+2454   	; 0xaa92 <init_turret+0x1a>
    a0fc:	dd f2       	brhs	.-74     	; 0xa0b4 <waves+0x9b4>
    a0fe:	fa fa       	.word	0xfafa	; ????

0000a100 <ProcessSprites>:
}



#if (SPRITES_AUTO_PROCESS != 0)
void ProcessSprites(){
    a100:	2f 92       	push	r2
    a102:	3f 92       	push	r3
    a104:	4f 92       	push	r4
    a106:	5f 92       	push	r5
    a108:	6f 92       	push	r6
    a10a:	7f 92       	push	r7
    a10c:	8f 92       	push	r8
    a10e:	9f 92       	push	r9
    a110:	af 92       	push	r10
    a112:	bf 92       	push	r11
    a114:	cf 92       	push	r12
    a116:	df 92       	push	r13
    a118:	ef 92       	push	r14
    a11a:	ff 92       	push	r15
    a11c:	0f 93       	push	r16
    a11e:	1f 93       	push	r17
    a120:	cf 93       	push	r28
    a122:	df 93       	push	r29
    a124:	00 d0       	rcall	.+0      	; 0xa126 <ProcessSprites+0x26>
    a126:	00 d0       	rcall	.+0      	; 0xa128 <ProcessSprites+0x28>
    a128:	00 d0       	rcall	.+0      	; 0xa12a <ProcessSprites+0x2a>
    a12a:	cd b7       	in	r28, 0x3d	; 61
    a12c:	de b7       	in	r29, 0x3e	; 62

	u8 i;

	if (!sprites_on){ return; }
    a12e:	80 91 00 01 	lds	r24, 0x0100
    a132:	88 23       	and	r24, r24
    a134:	09 f4       	brne	.+2      	; 0xa138 <ProcessSprites+0x38>
    a136:	b1 c0       	rjmp	.+354    	; 0xa29a <ProcessSprites+0x19a>

	user_ram_tiles_c = user_ram_tiles_c_tmp;
    a138:	80 91 da 0a 	lds	r24, 0x0ADA
    a13c:	80 93 d9 0a 	sts	0x0AD9, r24
	free_tile_index = user_ram_tiles_c;
    a140:	80 93 d8 0a 	sts	0x0AD8, r24
    a144:	00 e0       	ldi	r16, 0x00	; 0
    a146:	10 e0       	ldi	r17, 0x00	; 0
    a148:	f8 01       	movw	r30, r16
    a14a:	e8 59       	subi	r30, 0x98	; 152
    a14c:	fb 4f       	sbci	r31, 0xFB	; 251

	for (i = 0U; i < MAX_SPRITES; i++){

		BlitSprite(sprites[i].flags,
    a14e:	81 81       	ldd	r24, Z+1	; 0x01
    a150:	90 81       	ld	r25, Z
    a152:	32 81       	ldd	r19, Z+2	; 0x02
    a154:	43 81       	ldd	r20, Z+3	; 0x03
	** or Y would clip on the left). In a scrolling config. only
	** TILE_WIDTH = 8 is really supported due to the "weird" VRAM
	** layout, VRAM_TILES_H is also fixed 32 this case. */

	#if (SCROLLING == 0)
	bx = (((ssx + TILE_WIDTH) & 0xFFU) / TILE_WIDTH) - 1U;
    a156:	28 e0       	ldi	r18, 0x08	; 8
    a158:	29 0f       	add	r18, r25
    a15a:	26 95       	lsr	r18
    a15c:	26 95       	lsr	r18
    a15e:	26 95       	lsr	r18
    a160:	33 24       	eor	r3, r3
    a162:	3a 94       	dec	r3
    a164:	32 0e       	add	r3, r18
	#else
	bx = ssx / TILE_WIDTH;
	#endif
	dx = ssx % TILE_WIDTH;
    a166:	97 70       	andi	r25, 0x07	; 7
	if (dx != 0U){ tx++; }
    a168:	19 f0       	breq	.+6      	; 0xa170 <ProcessSprites+0x70>
    a16a:	e2 e0       	ldi	r30, 0x02	; 2
    a16c:	2e 2e       	mov	r2, r30
    a16e:	02 c0       	rjmp	.+4      	; 0xa174 <ProcessSprites+0x74>
	#else
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
    a170:	22 24       	eor	r2, r2
    a172:	23 94       	inc	r2
	#endif
	dx = ssx % TILE_WIDTH;
	if (dx != 0U){ tx++; }

	#if (SCROLLING == 0)
	by = (((ssy + TILE_HEIGHT) & 0xFFU) / TILE_HEIGHT) - 1U;
    a174:	28 e0       	ldi	r18, 0x08	; 8
    a176:	28 0f       	add	r18, r24
    a178:	52 2e       	mov	r5, r18
    a17a:	56 94       	lsr	r5
    a17c:	56 94       	lsr	r5
    a17e:	56 94       	lsr	r5
    a180:	5a 94       	dec	r5
	#else
	by = ssy / TILE_HEIGHT;
	#endif
	dy = ssy % TILE_HEIGHT;
    a182:	87 70       	andi	r24, 0x07	; 7
	if (dy != 0U){ ty++; }
    a184:	19 f0       	breq	.+6      	; 0xa18c <ProcessSprites+0x8c>
    a186:	22 e0       	ldi	r18, 0x02	; 2
    a188:	29 83       	std	Y+1, r18	; 0x01
    a18a:	02 c0       	rjmp	.+4      	; 0xa190 <ProcessSprites+0x90>
	ssx = xpos;
	ssy = ypos;
	#endif

	tx = 1U;
	ty = 1U;
    a18c:	e1 e0       	ldi	r30, 0x01	; 1
    a18e:	e9 83       	std	Y+1, r30	; 0x01
				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
					               ((u16)(dy)    << 8) + dx);
    a190:	68 2e       	mov	r6, r24
    a192:	71 2c       	mov	r7, r1
    a194:	76 2c       	mov	r7, r6
    a196:	66 24       	eor	r6, r6

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a198:	69 0e       	add	r6, r25
    a19a:	71 1c       	adc	r7, r1
					               ((u16)(flags) << 8) + sprindex,
    a19c:	50 e0       	ldi	r21, 0x00	; 0
    a19e:	54 2f       	mov	r21, r20
    a1a0:	44 27       	eor	r20, r20

				}

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a1a2:	ca 01       	movw	r24, r20
    a1a4:	83 0f       	add	r24, r19
    a1a6:	91 1d       	adc	r25, r1
    a1a8:	9b 83       	std	Y+3, r25	; 0x03
    a1aa:	8a 83       	std	Y+2, r24	; 0x02
    a1ac:	e1 2c       	mov	r14, r1
    a1ae:	f1 2c       	mov	r15, r1
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1b0:	9e e1       	ldi	r25, 0x1E	; 30
    a1b2:	59 9e       	mul	r5, r25
    a1b4:	50 01       	movw	r10, r0
    a1b6:	11 24       	eor	r1, r1

				if ( (bt < RAM_TILES_COUNT) &&
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
					               ((u16)(flags) << 8) + sprindex,
					               ((u16)(y)     << 8) + x,
    a1b8:	9e 2c       	mov	r9, r14
    a1ba:	88 24       	eor	r8, r8
    a1bc:	43 2c       	mov	r4, r3
    a1be:	c1 2c       	mov	r12, r1
    a1c0:	d1 2c       	mov	r13, r1
		for (x = 0U; x < tx; x++){

			wx = bx + x;

			#if (SCROLLING == 0)
			if ( (wx < VRAM_TILES_H) &&
    a1c2:	ed e1       	ldi	r30, 0x1D	; 29
    a1c4:	e4 15       	cp	r30, r4
    a1c6:	08 f4       	brcc	.+2      	; 0xa1ca <ProcessSprites+0xca>
    a1c8:	53 c0       	rjmp	.+166    	; 0xa270 <ProcessSprites+0x170>
    a1ca:	fb e1       	ldi	r31, 0x1B	; 27
    a1cc:	f5 15       	cp	r31, r5
    a1ce:	08 f4       	brcc	.+2      	; 0xa1d2 <ProcessSprites+0xd2>
    a1d0:	4f c0       	rjmp	.+158    	; 0xa270 <ProcessSprites+0x170>
			wx = wx % VRAM_TILES_H;
			{
			#endif

				#if (SCROLLING == 0)
				ramPtr = (wy * VRAM_TILES_H) +
    a1d2:	c5 01       	movw	r24, r10
    a1d4:	84 0d       	add	r24, r4
    a1d6:	91 1d       	adc	r25, r1
				#else
				ramPtr = ((u16)(wy >> 3) * 256U) +
				         (wx * 8U) + (wy & 0x07U);
				#endif

				bt = vram[ramPtr];
    a1d8:	9c 01       	movw	r18, r24
    a1da:	20 5e       	subi	r18, 0xE0	; 224
    a1dc:	3e 4f       	sbci	r19, 0xFE	; 254
    a1de:	3e 83       	std	Y+6, r19	; 0x06
    a1e0:	2d 83       	std	Y+5, r18	; 0x05
    a1e2:	f9 01       	movw	r30, r18
    a1e4:	90 81       	ld	r25, Z

				if ( ( (bt >= RAM_TILES_COUNT) |
    a1e6:	81 e0       	ldi	r24, 0x01	; 1
    a1e8:	98 31       	cpi	r25, 0x18	; 24
    a1ea:	08 f4       	brcc	.+2      	; 0xa1ee <ProcessSprites+0xee>
    a1ec:	80 e0       	ldi	r24, 0x00	; 0
    a1ee:	21 e0       	ldi	r18, 0x01	; 1
    a1f0:	30 91 d9 0a 	lds	r19, 0x0AD9
    a1f4:	93 17       	cp	r25, r19
    a1f6:	18 f0       	brcs	.+6      	; 0xa1fe <ProcessSprites+0xfe>
    a1f8:	20 e0       	ldi	r18, 0x00	; 0
    a1fa:	88 23       	and	r24, r24
    a1fc:	61 f1       	breq	.+88     	; 0xa256 <ProcessSprites+0x156>
				       (bt < user_ram_tiles_c)) &&
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */
    a1fe:	60 91 d8 0a 	lds	r22, 0x0AD8
				#endif

				bt = vram[ramPtr];

				if ( ( (bt >= RAM_TILES_COUNT) |
				       (bt < user_ram_tiles_c)) &&
    a202:	68 31       	cpi	r22, 0x18	; 24
    a204:	30 f5       	brcc	.+76     	; 0xa252 <ProcessSprites+0x152>
				     (free_tile_index < RAM_TILES_COUNT) ){ /* if no ram free ignore tile */

					if (bt >= RAM_TILES_COUNT){
    a206:	88 23       	and	r24, r24
    a208:	31 f0       	breq	.+12     	; 0xa216 <ProcessSprites+0x116>
						/* tile is mapped to flash. Copy it to next free RAM tile. */
						CopyFlashTile(bt - RAM_TILES_COUNT, free_tile_index);
    a20a:	88 ee       	ldi	r24, 0xE8	; 232
    a20c:	89 0f       	add	r24, r25
    a20e:	9c 83       	std	Y+4, r25	; 0x04
    a210:	0e 94 76 40 	call	0x80ec	; 0x80ec <CopyFlashTile>
    a214:	06 c0       	rjmp	.+12     	; 0xa222 <ProcessSprites+0x122>
					}else if (bt < user_ram_tiles_c){
    a216:	22 23       	and	r18, r18
    a218:	29 f0       	breq	.+10     	; 0xa224 <ProcessSprites+0x124>
						/* tile is a user ram tile. Copy it to next free RAM tile. */
						CopyRamTile(bt, free_tile_index);
    a21a:	89 2f       	mov	r24, r25
    a21c:	9c 83       	std	Y+4, r25	; 0x04
    a21e:	0e 94 05 41 	call	0x820a	; 0x820a <CopyRamTile>
    a222:	9c 81       	ldd	r25, Y+4	; 0x04
					}
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
    a224:	80 91 d8 0a 	lds	r24, 0x0AD8
    a228:	e8 2f       	mov	r30, r24
    a22a:	f0 e0       	ldi	r31, 0x00	; 0
    a22c:	9f 01       	movw	r18, r30
    a22e:	22 0f       	add	r18, r18
    a230:	33 1f       	adc	r19, r19
    a232:	e2 0f       	add	r30, r18
    a234:	f3 1f       	adc	r31, r19
    a236:	e0 57       	subi	r30, 0x70	; 112
    a238:	f5 4f       	sbci	r31, 0xF5	; 245
    a23a:	2d 81       	ldd	r18, Y+5	; 0x05
    a23c:	3e 81       	ldd	r19, Y+6	; 0x06
    a23e:	31 83       	std	Z+1, r19	; 0x01
    a240:	20 83       	st	Z, r18
					ram_tiles_restore[free_tile_index].tileIndex = bt;
    a242:	92 83       	std	Z+2, r25	; 0x02
					#endif
					vram[ramPtr] = free_tile_index;
    a244:	f9 01       	movw	r30, r18
    a246:	80 83       	st	Z, r24
					bt = free_tile_index;
					free_tile_index++;
    a248:	91 e0       	ldi	r25, 0x01	; 1
    a24a:	98 0f       	add	r25, r24
    a24c:	90 93 d8 0a 	sts	0x0AD8, r25
					#if (RTLIST_ENABLE != 0)
					ram_tiles_restore[free_tile_index].addr = (&vram[ramPtr]);
					ram_tiles_restore[free_tile_index].tileIndex = bt;
					#endif
					vram[ramPtr] = free_tile_index;
					bt = free_tile_index;
    a250:	98 2f       	mov	r25, r24
					free_tile_index++;

				}

				if ( (bt < RAM_TILES_COUNT) &&
    a252:	98 31       	cpi	r25, 0x18	; 24
    a254:	68 f4       	brcc	.+26     	; 0xa270 <ProcessSprites+0x170>
    a256:	80 91 d9 0a 	lds	r24, 0x0AD9
    a25a:	98 17       	cp	r25, r24
    a25c:	48 f0       	brcs	.+18     	; 0xa270 <ProcessSprites+0x170>
				     (bt >= user_ram_tiles_c) ){
					BlitSpritePart(bt,
    a25e:	93 01       	movw	r18, r6
    a260:	a6 01       	movw	r20, r12
    a262:	48 0d       	add	r20, r8
    a264:	59 1d       	adc	r21, r9
    a266:	6a 81       	ldd	r22, Y+2	; 0x02
    a268:	7b 81       	ldd	r23, Y+3	; 0x03
    a26a:	89 2f       	mov	r24, r25
    a26c:	0e 94 a5 41 	call	0x834a	; 0x834a <BlitSpritePart>
    a270:	ff ef       	ldi	r31, 0xFF	; 255
    a272:	cf 1a       	sub	r12, r31
    a274:	df 0a       	sbc	r13, r31
    a276:	43 94       	inc	r4
				wy -= Screen.scrollHeight;
			}
		}
		#endif

		for (x = 0U; x < tx; x++){
    a278:	c2 14       	cp	r12, r2
    a27a:	08 f4       	brcc	.+2      	; 0xa27e <ProcessSprites+0x17e>
    a27c:	a2 cf       	rjmp	.-188    	; 0xa1c2 <ProcessSprites+0xc2>
    a27e:	2f ef       	ldi	r18, 0xFF	; 255
    a280:	e2 1a       	sub	r14, r18
    a282:	f2 0a       	sbc	r15, r18
    a284:	53 94       	inc	r5
	dy = ssy % TILE_HEIGHT;
	if (dy != 0U){ ty++; }

	/* Output sprite tiles */

	for (y = 0U; y < ty; y++){
    a286:	99 81       	ldd	r25, Y+1	; 0x01
    a288:	e9 16       	cp	r14, r25
    a28a:	08 f4       	brcc	.+2      	; 0xa28e <ProcessSprites+0x18e>
    a28c:	91 cf       	rjmp	.-222    	; 0xa1b0 <ProcessSprites+0xb0>
    a28e:	0c 5f       	subi	r16, 0xFC	; 252
    a290:	1f 4f       	sbci	r17, 0xFF	; 255
	if (!sprites_on){ return; }

	user_ram_tiles_c = user_ram_tiles_c_tmp;
	free_tile_index = user_ram_tiles_c;

	for (i = 0U; i < MAX_SPRITES; i++){
    a292:	08 32       	cpi	r16, 0x28	; 40
    a294:	11 05       	cpc	r17, r1
    a296:	09 f0       	breq	.+2      	; 0xa29a <ProcessSprites+0x19a>
    a298:	57 cf       	rjmp	.-338    	; 0xa148 <ProcessSprites+0x48>

	#if (SPRITES_VSYNC_PROCESS != 0)
	RestoreBackground();
	#endif

}
    a29a:	26 96       	adiw	r28, 0x06	; 6
    a29c:	0f b6       	in	r0, 0x3f	; 63
    a29e:	f8 94       	cli
    a2a0:	de bf       	out	0x3e, r29	; 62
    a2a2:	0f be       	out	0x3f, r0	; 63
    a2a4:	cd bf       	out	0x3d, r28	; 61
    a2a6:	df 91       	pop	r29
    a2a8:	cf 91       	pop	r28
    a2aa:	1f 91       	pop	r17
    a2ac:	0f 91       	pop	r16
    a2ae:	ff 90       	pop	r15
    a2b0:	ef 90       	pop	r14
    a2b2:	df 90       	pop	r13
    a2b4:	cf 90       	pop	r12
    a2b6:	bf 90       	pop	r11
    a2b8:	af 90       	pop	r10
    a2ba:	9f 90       	pop	r9
    a2bc:	8f 90       	pop	r8
    a2be:	7f 90       	pop	r7
    a2c0:	6f 90       	pop	r6
    a2c2:	5f 90       	pop	r5
    a2c4:	4f 90       	pop	r4
    a2c6:	3f 90       	pop	r3
    a2c8:	2f 90       	pop	r2
    a2ca:	08 95       	ret

0000a2cc <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    a2cc:	df 92       	push	r13
    a2ce:	ef 92       	push	r14
    a2d0:	ff 92       	push	r15
    a2d2:	0f 93       	push	r16
    a2d4:	1f 93       	push	r17
    a2d6:	cf 93       	push	r28
    a2d8:	df 93       	push	r29
    a2da:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    a2dc:	fb 01       	movw	r30, r22
    a2de:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    a2e0:	31 96       	adiw	r30, 0x01	; 1
    a2e2:	64 91       	lpm	r22, Z
    a2e4:	5f ef       	ldi	r21, 0xFF	; 255
    a2e6:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    a2e8:	24 2f       	mov	r18, r20
    a2ea:	21 70       	andi	r18, 0x01	; 1
    a2ec:	40 ff       	sbrs	r20, 0
    a2ee:	04 c0       	rjmp	.+8      	; 0xa2f8 <MapSprite2+0x2c>
			x=(mapWidth-1);
    a2f0:	95 2f       	mov	r25, r21
			dx=-1;
    a2f2:	ff 24       	eor	r15, r15
    a2f4:	fa 94       	dec	r15
    a2f6:	03 c0       	rjmp	.+6      	; 0xa2fe <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    a2f8:	ff 24       	eor	r15, r15
    a2fa:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    a2fc:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    a2fe:	41 ff       	sbrs	r20, 1
    a300:	05 c0       	rjmp	.+10     	; 0xa30c <MapSprite2+0x40>
			y=(mapHeight-1);
    a302:	7f ef       	ldi	r23, 0xFF	; 255
    a304:	76 0f       	add	r23, r22
			dy=-1;
    a306:	ee 24       	eor	r14, r14
    a308:	ea 94       	dec	r14
    a30a:	03 c0       	rjmp	.+6      	; 0xa312 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    a30c:	ee 24       	eor	r14, r14
    a30e:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    a310:	70 e0       	ldi	r23, 0x00	; 0
    a312:	21 11       	cpse	r18, r1
    a314:	01 c0       	rjmp	.+2      	; 0xa318 <MapSprite2+0x4c>
    a316:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a318:	00 e0       	ldi	r16, 0x00	; 0
    a31a:	06 17       	cp	r16, r22
    a31c:	09 f1       	breq	.+66     	; 0xa360 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a31e:	71 03       	mulsu	r23, r17
    a320:	e0 01       	movw	r28, r0
    a322:	11 24       	eor	r1, r1
    a324:	d8 2e       	mov	r13, r24
    a326:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    a328:	8d 15       	cp	r24, r13
    a32a:	b1 f0       	breq	.+44     	; 0xa358 <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    a32c:	9e 01       	movw	r18, r28
    a32e:	29 0f       	add	r18, r25
    a330:	31 1d       	adc	r19, r1
    a332:	97 fd       	sbrc	r25, 7
    a334:	3a 95       	dec	r19
    a336:	2e 5f       	subi	r18, 0xFE	; 254
    a338:	3f 4f       	sbci	r19, 0xFF	; 255
    a33a:	fd 01       	movw	r30, r26
    a33c:	e2 0f       	add	r30, r18
    a33e:	f3 1f       	adc	r31, r19
    a340:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    a342:	34 e0       	ldi	r19, 0x04	; 4
    a344:	83 9f       	mul	r24, r19
    a346:	f0 01       	movw	r30, r0
    a348:	11 24       	eor	r1, r1
    a34a:	e8 59       	subi	r30, 0x98	; 152
    a34c:	fb 4f       	sbci	r31, 0xFB	; 251
    a34e:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    a350:	8f 5f       	subi	r24, 0xFF	; 255
    a352:	43 83       	std	Z+3, r20	; 0x03
    a354:	9f 0d       	add	r25, r15
    a356:	e8 cf       	rjmp	.-48     	; 0xa328 <MapSprite2+0x5c>
    a358:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    a35a:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    a35c:	95 2f       	mov	r25, r21
    a35e:	dd cf       	rjmp	.-70     	; 0xa31a <MapSprite2+0x4e>
	    }
	}
    a360:	df 91       	pop	r29
    a362:	cf 91       	pop	r28
    a364:	1f 91       	pop	r17
    a366:	0f 91       	pop	r16
    a368:	ff 90       	pop	r15
    a36a:	ef 90       	pop	r14
    a36c:	df 90       	pop	r13
    a36e:	08 95       	ret

0000a370 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    a370:	0f 93       	push	r16
    a372:	cf 93       	push	r28
    a374:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    a376:	30 e0       	ldi	r19, 0x00	; 0
    a378:	30 17       	cp	r19, r16
    a37a:	e1 f0       	breq	.+56     	; 0xa3b4 <MoveSprite+0x44>
    a37c:	b4 2f       	mov	r27, r20
    a37e:	a0 e2       	ldi	r26, 0x20	; 32
    a380:	a4 0f       	add	r26, r20
    a382:	78 2f       	mov	r23, r24
    a384:	72 0f       	add	r23, r18
    a386:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    a388:	87 17       	cp	r24, r23
    a38a:	81 f0       	breq	.+32     	; 0xa3ac <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    a38c:	c4 e0       	ldi	r28, 0x04	; 4
    a38e:	8c 9f       	mul	r24, r28
    a390:	f0 01       	movw	r30, r0
    a392:	11 24       	eor	r1, r1
    a394:	e8 59       	subi	r30, 0x98	; 152
    a396:	fb 4f       	sbci	r31, 0xFB	; 251
    a398:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    a39a:	41 3e       	cpi	r20, 0xE1	; 225
    a39c:	51 05       	cpc	r21, r1
    a39e:	14 f0       	brlt	.+4      	; 0xa3a4 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    a3a0:	a1 83       	std	Z+1, r26	; 0x01
    a3a2:	01 c0       	rjmp	.+2      	; 0xa3a6 <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    a3a4:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    a3a6:	8f 5f       	subi	r24, 0xFF	; 255
    a3a8:	98 5f       	subi	r25, 0xF8	; 248
    a3aa:	ee cf       	rjmp	.-36     	; 0xa388 <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    a3ac:	3f 5f       	subi	r19, 0xFF	; 255
    a3ae:	48 5f       	subi	r20, 0xF8	; 248
    a3b0:	5f 4f       	sbci	r21, 0xFF	; 255
    a3b2:	e2 cf       	rjmp	.-60     	; 0xa378 <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    a3b4:	cf 91       	pop	r28
    a3b6:	0f 91       	pop	r16
    a3b8:	08 95       	ret

0000a3ba <DisplayLogo>:
#endif



	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    a3ba:	08 95       	ret

0000a3bc <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    a3bc:	e8 e6       	ldi	r30, 0x68	; 104
    a3be:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    a3c0:	80 ef       	ldi	r24, 0xF0	; 240
    a3c2:	80 83       	st	Z, r24
    a3c4:	34 96       	adiw	r30, 0x04	; 4
	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		#if (SPRITES_AUTO_PROCESS != 0)
		for(int i=0;i<MAX_SPRITES;i++){
    a3c6:	94 e0       	ldi	r25, 0x04	; 4
    a3c8:	e0 39       	cpi	r30, 0x90	; 144
    a3ca:	f9 07       	cpc	r31, r25
    a3cc:	d1 f7       	brne	.-12     	; 0xa3c2 <InitializeVideoMode+0x6>
		//	}
			Screen.scrollHeight=VRAM_TILES_V;
			Screen.overlayHeight=0;
		#endif

		free_tile_index      = 0U;
    a3ce:	10 92 d8 0a 	sts	0x0AD8, r1
		user_ram_tiles_c_tmp = 0U;
    a3d2:	10 92 da 0a 	sts	0x0ADA, r1
    a3d6:	08 95       	ret

0000a3d8 <DrawMap>:



//Draws a map of tile at the specified position
#if VRAM_ADDR_SIZE == 1
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
    a3d8:	4f 92       	push	r4
    a3da:	5f 92       	push	r5
    a3dc:	6f 92       	push	r6
    a3de:	7f 92       	push	r7
    a3e0:	8f 92       	push	r8
    a3e2:	9f 92       	push	r9
    a3e4:	af 92       	push	r10
    a3e6:	bf 92       	push	r11
    a3e8:	cf 92       	push	r12
    a3ea:	df 92       	push	r13
    a3ec:	ef 92       	push	r14
    a3ee:	ff 92       	push	r15
    a3f0:	0f 93       	push	r16
    a3f2:	1f 93       	push	r17
    a3f4:	cf 93       	push	r28
    a3f6:	df 93       	push	r29
    a3f8:	68 2e       	mov	r6, r24
    a3fa:	56 2e       	mov	r5, r22
    a3fc:	7a 01       	movw	r14, r20
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
    a3fe:	fa 01       	movw	r30, r20
    a400:	74 90       	lpm	r7, Z
		u8 mapHeight=pgm_read_byte(&(map[1]));
    a402:	31 96       	adiw	r30, 0x01	; 1
    a404:	84 90       	lpm	r8, Z
    a406:	c7 2c       	mov	r12, r7
    a408:	d1 2c       	mov	r13, r1
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a40a:	00 e0       	ldi	r16, 0x00	; 0
    a40c:	10 e0       	ldi	r17, 0x00	; 0
    a40e:	91 2c       	mov	r9, r1
    a410:	98 14       	cp	r9, r8
    a412:	f1 f0       	breq	.+60     	; 0xa450 <DrawMap+0x78>
    a414:	c0 e0       	ldi	r28, 0x00	; 0
    a416:	d0 e0       	ldi	r29, 0x00	; 0
    a418:	58 01       	movw	r10, r16
    a41a:	f2 e0       	ldi	r31, 0x02	; 2
    a41c:	af 0e       	add	r10, r31
    a41e:	b1 1c       	adc	r11, r1
    a420:	49 2c       	mov	r4, r9
    a422:	45 0c       	add	r4, r5
			for(u8 dx=0;dx<mapWidth;dx++){			
    a424:	c7 15       	cp	r28, r7
    a426:	80 f4       	brcc	.+32     	; 0xa448 <DrawMap+0x70>
    a428:	95 01       	movw	r18, r10
    a42a:	2c 0f       	add	r18, r28
    a42c:	3d 1f       	adc	r19, r29
    a42e:	f7 01       	movw	r30, r14
    a430:	e2 0f       	add	r30, r18
    a432:	f3 1f       	adc	r31, r19
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    a434:	24 91       	lpm	r18, Z
    a436:	42 2f       	mov	r20, r18
    a438:	50 e0       	ldi	r21, 0x00	; 0
    a43a:	64 2d       	mov	r22, r4
    a43c:	8c 2f       	mov	r24, r28
    a43e:	86 0d       	add	r24, r6
    a440:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
    a444:	21 96       	adiw	r28, 0x01	; 1
    a446:	ee cf       	rjmp	.-36     	; 0xa424 <DrawMap+0x4c>
	void DrawMap(unsigned char x,unsigned char y,const VRAM_PTR_TYPE *map) {
		//unsigned char i;
		u8 mapWidth=pgm_read_byte(&(map[0]));
		u8 mapHeight=pgm_read_byte(&(map[1]));
		
		for(u8 dy=0;dy<mapHeight;dy++){
    a448:	93 94       	inc	r9
    a44a:	0c 0d       	add	r16, r12
    a44c:	1d 1d       	adc	r17, r13
    a44e:	e0 cf       	rjmp	.-64     	; 0xa410 <DrawMap+0x38>
			for(u8 dx=0;dx<mapWidth;dx++){			
				SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
			}
		}

	}
    a450:	df 91       	pop	r29
    a452:	cf 91       	pop	r28
    a454:	1f 91       	pop	r17
    a456:	0f 91       	pop	r16
    a458:	ff 90       	pop	r15
    a45a:	ef 90       	pop	r14
    a45c:	df 90       	pop	r13
    a45e:	cf 90       	pop	r12
    a460:	bf 90       	pop	r11
    a462:	af 90       	pop	r10
    a464:	9f 90       	pop	r9
    a466:	8f 90       	pop	r8
    a468:	7f 90       	pop	r7
    a46a:	6f 90       	pop	r6
    a46c:	5f 90       	pop	r5
    a46e:	4f 90       	pop	r4
    a470:	08 95       	ret

0000a472 <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    a472:	df 92       	push	r13
    a474:	ef 92       	push	r14
    a476:	ff 92       	push	r15
    a478:	0f 93       	push	r16
    a47a:	1f 93       	push	r17
    a47c:	cf 93       	push	r28
    a47e:	df 93       	push	r29
    a480:	f6 2e       	mov	r15, r22
    a482:	04 2f       	mov	r16, r20
    a484:	d2 2e       	mov	r13, r18
    a486:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    a488:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    a48a:	8a e0       	ldi	r24, 0x0A	; 10
    a48c:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    a48e:	01 11       	cpse	r16, r1
    a490:	02 c0       	rjmp	.+4      	; 0xa496 <PrintByte+0x24>
    a492:	11 11       	cpse	r17, r1
    a494:	07 c0       	rjmp	.+14     	; 0xa4a4 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    a496:	80 2f       	mov	r24, r16
    a498:	6e 2d       	mov	r22, r14
    a49a:	0e 94 b9 6f 	call	0xdf72	; 0xdf72 <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    a49e:	40 e1       	ldi	r20, 0x10	; 16
    a4a0:	49 0f       	add	r20, r25
    a4a2:	05 c0       	rjmp	.+10     	; 0xa4ae <PrintByte+0x3c>
		}else{
			if(zeropad){
    a4a4:	dd 20       	and	r13, r13
    a4a6:	11 f0       	breq	.+4      	; 0xa4ac <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    a4a8:	40 e1       	ldi	r20, 0x10	; 16
    a4aa:	01 c0       	rjmp	.+2      	; 0xa4ae <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    a4ac:	40 e0       	ldi	r20, 0x00	; 0
    a4ae:	6f 2d       	mov	r22, r15
    a4b0:	8c 2f       	mov	r24, r28
    a4b2:	0e 94 c6 43 	call	0x878c	; 0x878c <SetFont>
			}
		}
		val=val/10;
    a4b6:	80 2f       	mov	r24, r16
    a4b8:	6e 2d       	mov	r22, r14
    a4ba:	0e 94 b9 6f 	call	0xdf72	; 0xdf72 <__udivmodqi4>
    a4be:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    a4c0:	1f 5f       	subi	r17, 0xFF	; 255
    a4c2:	21 97       	sbiw	r28, 0x01	; 1
    a4c4:	13 30       	cpi	r17, 0x03	; 3
    a4c6:	19 f7       	brne	.-58     	; 0xa48e <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    a4c8:	df 91       	pop	r29
    a4ca:	cf 91       	pop	r28
    a4cc:	1f 91       	pop	r17
    a4ce:	0f 91       	pop	r16
    a4d0:	ff 90       	pop	r15
    a4d2:	ef 90       	pop	r14
    a4d4:	df 90       	pop	r13
    a4d6:	08 95       	ret

0000a4d8 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    a4d8:	0f 93       	push	r16
    a4da:	1f 93       	push	r17
    a4dc:	cf 93       	push	r28
    a4de:	df 93       	push	r29
    a4e0:	06 2f       	mov	r16, r22
    a4e2:	c4 2f       	mov	r28, r20
    a4e4:	d5 2f       	mov	r29, r21
    a4e6:	18 2f       	mov	r17, r24
    a4e8:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    a4ea:	fe 01       	movw	r30, r28
    a4ec:	44 91       	lpm	r20, Z
		if(c!=0){
    a4ee:	44 23       	and	r20, r20
    a4f0:	49 f0       	breq	.+18     	; 0xa504 <Print+0x2c>
			c=((c&127)-32);			
    a4f2:	4f 77       	andi	r20, 0x7F	; 127
    a4f4:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    a4f6:	60 2f       	mov	r22, r16
    a4f8:	8c 2f       	mov	r24, r28
    a4fa:	81 0f       	add	r24, r17
    a4fc:	0e 94 c6 43 	call	0x878c	; 0x878c <SetFont>
    a500:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    a502:	f3 cf       	rjmp	.-26     	; 0xa4ea <Print+0x12>
	
}
    a504:	df 91       	pop	r29
    a506:	cf 91       	pop	r28
    a508:	1f 91       	pop	r17
    a50a:	0f 91       	pop	r16
    a50c:	08 95       	ret

0000a50e <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    a50e:	40 52       	subi	r20, 0x20	; 32
    a510:	0c 94 c6 43 	jmp	0x878c	; 0x878c <SetFont>

0000a514 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    a514:	0f 93       	push	r16
    a516:	1f 93       	push	r17
    a518:	cf 93       	push	r28
    a51a:	df 93       	push	r29
    a51c:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a51e:	c0 e0       	ldi	r28, 0x00	; 0
    a520:	d0 e0       	ldi	r29, 0x00	; 0
    a522:	c0 17       	cp	r28, r16
    a524:	d1 07       	cpc	r29, r17
    a526:	44 f4       	brge	.+16     	; 0xa538 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    a528:	0e 94 e0 43 	call	0x87c0	; 0x87c0 <GetVsyncFlag>
    a52c:	88 23       	and	r24, r24
    a52e:	e1 f3       	breq	.-8      	; 0xa528 <WaitVsync+0x14>
		ClearVsyncFlag();		
    a530:	0e 94 e4 43 	call	0x87c8	; 0x87c8 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    a534:	21 96       	adiw	r28, 0x01	; 1
    a536:	f5 cf       	rjmp	.-22     	; 0xa522 <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    a538:	df 91       	pop	r29
    a53a:	cf 91       	pop	r28
    a53c:	1f 91       	pop	r17
    a53e:	0f 91       	pop	r16
    a540:	08 95       	ret

0000a542 <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    a542:	80 93 ba 0b 	sts	0x0BBA, r24
	currFadeFrame=0;
    a546:	10 92 bd 0b 	sts	0x0BBD, r1
	fadeActive=true;
    a54a:	81 e0       	ldi	r24, 0x01	; 1
    a54c:	80 93 bc 0b 	sts	0x0BBC, r24
		
	if(blocking){
    a550:	66 23       	and	r22, r22
    a552:	21 f0       	breq	.+8      	; 0xa55c <doFade+0x1a>
		while(fadeActive==true);
    a554:	80 91 bc 0b 	lds	r24, 0x0BBC
    a558:	81 11       	cpse	r24, r1
    a55a:	fc cf       	rjmp	.-8      	; 0xa554 <doFade+0x12>
    a55c:	08 95       	ret

0000a55e <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    a55e:	81 11       	cpse	r24, r1
    a560:	03 c0       	rjmp	.+6      	; 0xa568 <FadeIn+0xa>
		DDRC=0xff;
    a562:	8f ef       	ldi	r24, 0xFF	; 255
    a564:	87 b9       	out	0x07, r24	; 7
		return;
    a566:	08 95       	ret
	}
	fadeStep=1;
    a568:	91 e0       	ldi	r25, 0x01	; 1
    a56a:	90 93 be 0b 	sts	0x0BBE, r25
	fadeDir=1;
    a56e:	90 93 bb 0b 	sts	0x0BBB, r25
	doFade(speed,blocking);
    a572:	0c 94 a1 52 	jmp	0xa542	; 0xa542 <doFade>

0000a576 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    a576:	81 11       	cpse	r24, r1
    a578:	02 c0       	rjmp	.+4      	; 0xa57e <FadeOut+0x8>
		DDRC=0;
    a57a:	17 b8       	out	0x07, r1	; 7
		return;
    a57c:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    a57e:	9c e0       	ldi	r25, 0x0C	; 12
    a580:	90 93 be 0b 	sts	0x0BBE, r25
	fadeDir=-1;
    a584:	9f ef       	ldi	r25, 0xFF	; 255
    a586:	90 93 bb 0b 	sts	0x0BBB, r25
	doFade(speed,blocking);
    a58a:	0c 94 a1 52 	jmp	0xa542	; 0xa542 <doFade>

0000a58e <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    a58e:	80 91 bc 0b 	lds	r24, 0x0BBC
    a592:	88 23       	and	r24, r24
    a594:	01 f1       	breq	.+64     	; 0xa5d6 <ProcessFading+0x48>
		if(currFadeFrame==0){
    a596:	80 91 bd 0b 	lds	r24, 0x0BBD
    a59a:	81 11       	cpse	r24, r1
    a59c:	19 c0       	rjmp	.+50     	; 0xa5d0 <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    a59e:	80 91 ba 0b 	lds	r24, 0x0BBA
    a5a2:	80 93 bd 0b 	sts	0x0BBD, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    a5a6:	e0 91 be 0b 	lds	r30, 0x0BBE
    a5aa:	f0 e0       	ldi	r31, 0x00	; 0
    a5ac:	e5 52       	subi	r30, 0x25	; 37
    a5ae:	ff 4f       	sbci	r31, 0xFF	; 255
    a5b0:	e4 91       	lpm	r30, Z
    a5b2:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    a5b4:	90 91 bb 0b 	lds	r25, 0x0BBB
    a5b8:	80 91 be 0b 	lds	r24, 0x0BBE
    a5bc:	89 0f       	add	r24, r25
    a5be:	80 93 be 0b 	sts	0x0BBE, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    a5c2:	88 23       	and	r24, r24
    a5c4:	11 f0       	breq	.+4      	; 0xa5ca <ProcessFading+0x3c>
    a5c6:	8d 30       	cpi	r24, 0x0D	; 13
    a5c8:	31 f4       	brne	.+12     	; 0xa5d6 <ProcessFading+0x48>
				fadeActive=false;
    a5ca:	10 92 bc 0b 	sts	0x0BBC, r1
    a5ce:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    a5d0:	81 50       	subi	r24, 0x01	; 1
    a5d2:	80 93 bd 0b 	sts	0x0BBD, r24
    a5d6:	08 95       	ret

0000a5d8 <VideoModeVsync>:
/*
** Callback invoked during hsync
*/
void VideoModeVsync(){

	ProcessFading();
    a5d8:	0c 94 c7 52 	jmp	0xa58e	; 0xa58e <ProcessFading>

0000a5dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim)
{
    a5dc:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a5de:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a5e0:	93 81       	ldd	r25, Z+3	; 0x03
    a5e2:	9f 5f       	subi	r25, 0xFF	; 255
    a5e4:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a5e6:	22 81       	ldd	r18, Z+2	; 0x02
    a5e8:	80 81       	ld	r24, Z
    a5ea:	92 17       	cp	r25, r18
    a5ec:	38 f4       	brcc	.+14     	; 0xa5fc <LBGetNextFrame+0x20>
	{
		return anim->anims[anim->current_anim];
    a5ee:	e8 0f       	add	r30, r24
    a5f0:	f1 1d       	adc	r31, r1
    a5f2:	e8 0f       	add	r30, r24
    a5f4:	f1 1d       	adc	r31, r1
    a5f6:	86 81       	ldd	r24, Z+6	; 0x06
    a5f8:	97 81       	ldd	r25, Z+7	; 0x07
    a5fa:	08 95       	ret
	}
	anim->frame_count = 0;
    a5fc:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a5fe:	90 e0       	ldi	r25, 0x00	; 0
    a600:	01 96       	adiw	r24, 0x01	; 1
    a602:	61 81       	ldd	r22, Z+1	; 0x01
    a604:	70 e0       	ldi	r23, 0x00	; 0
    a606:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    a60a:	80 83       	st	Z, r24
	if (anim->current_anim == 0) anim->looped = 1;
    a60c:	81 11       	cpse	r24, r1
    a60e:	02 c0       	rjmp	.+4      	; 0xa614 <LBGetNextFrame+0x38>
    a610:	21 e0       	ldi	r18, 0x01	; 1
    a612:	24 83       	std	Z+4, r18	; 0x04
	return anim->anims[anim->current_anim];
    a614:	99 27       	eor	r25, r25
    a616:	03 96       	adiw	r24, 0x03	; 3
    a618:	88 0f       	add	r24, r24
    a61a:	99 1f       	adc	r25, r25
    a61c:	e8 0f       	add	r30, r24
    a61e:	f9 1f       	adc	r31, r25
    a620:	80 81       	ld	r24, Z
    a622:	91 81       	ldd	r25, Z+1	; 0x01
}
    a624:	08 95       	ret

0000a626 <LBGetNextFrameReverse>:

char* LBGetNextFrameReverse(Animation* anim)
{
    a626:	fc 01       	movw	r30, r24
	anim->looped = 0;
    a628:	14 82       	std	Z+4, r1	; 0x04
	anim->frame_count += 1;
    a62a:	93 81       	ldd	r25, Z+3	; 0x03
    a62c:	9f 5f       	subi	r25, 0xFF	; 255
    a62e:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    a630:	22 81       	ldd	r18, Z+2	; 0x02
    a632:	80 81       	ld	r24, Z
    a634:	92 17       	cp	r25, r18
    a636:	e0 f0       	brcs	.+56     	; 0xa670 <LBGetNextFrameReverse+0x4a>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    a638:	13 82       	std	Z+3, r1	; 0x03
	if (anim->reversing)
    a63a:	95 81       	ldd	r25, Z+5	; 0x05
    a63c:	99 23       	and	r25, r25
    a63e:	49 f0       	breq	.+18     	; 0xa652 <LBGetNextFrameReverse+0x2c>
	{
		anim->current_anim = anim->current_anim - 1;
    a640:	81 50       	subi	r24, 0x01	; 1
    a642:	10 f0       	brcs	.+4      	; 0xa648 <LBGetNextFrameReverse+0x22>
    a644:	80 83       	st	Z, r24
    a646:	13 c0       	rjmp	.+38     	; 0xa66e <LBGetNextFrameReverse+0x48>
		if (anim->current_anim == 0xff)
		{
			anim->current_anim = 0;
    a648:	10 82       	st	Z, r1
			anim->looped = 1;
    a64a:	81 e0       	ldi	r24, 0x01	; 1
    a64c:	84 83       	std	Z+4, r24	; 0x04
			anim->reversing = 0;
    a64e:	15 82       	std	Z+5, r1	; 0x05
    a650:	0e c0       	rjmp	.+28     	; 0xa66e <LBGetNextFrameReverse+0x48>
		}
	}
	else
	{
		anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    a652:	21 81       	ldd	r18, Z+1	; 0x01
    a654:	90 e0       	ldi	r25, 0x00	; 0
    a656:	01 96       	adiw	r24, 0x01	; 1
    a658:	62 2f       	mov	r22, r18
    a65a:	70 e0       	ldi	r23, 0x00	; 0
    a65c:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    a660:	80 83       	st	Z, r24
		if (anim->current_anim == 0) 
    a662:	81 11       	cpse	r24, r1
    a664:	04 c0       	rjmp	.+8      	; 0xa66e <LBGetNextFrameReverse+0x48>
		{
			anim->reversing = 1;
    a666:	81 e0       	ldi	r24, 0x01	; 1
    a668:	85 83       	std	Z+5, r24	; 0x05
			anim->current_anim = anim->anim_count - 1;
    a66a:	21 50       	subi	r18, 0x01	; 1
    a66c:	20 83       	st	Z, r18
		}
	}
	return anim->anims[anim->current_anim];
    a66e:	80 81       	ld	r24, Z
    a670:	e8 0f       	add	r30, r24
    a672:	f1 1d       	adc	r31, r1
    a674:	e8 0f       	add	r30, r24
    a676:	f1 1d       	adc	r31, r1
    a678:	86 81       	ldd	r24, Z+6	; 0x06
    a67a:	97 81       	ldd	r25, Z+7	; 0x07
}
    a67c:	08 95       	ret

0000a67e <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    a67e:	0f 93       	push	r16
    a680:	1f 93       	push	r17
    a682:	cf 93       	push	r28
    a684:	df 93       	push	r29
    a686:	1f 92       	push	r1
    a688:	cd b7       	in	r28, 0x3d	; 61
    a68a:	de b7       	in	r29, 0x3e	; 62
    a68c:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    a68e:	86 2f       	mov	r24, r22
    a690:	69 83       	std	Y+1, r22	; 0x01
    a692:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <ReadJoypad>
    a696:	d8 01       	movw	r26, r16
    a698:	15 96       	adiw	r26, 0x05	; 5
    a69a:	9c 93       	st	X, r25
    a69c:	8e 93       	st	-X, r24
    a69e:	14 97       	sbiw	r26, 0x04	; 4
    a6a0:	69 81       	ldd	r22, Y+1	; 0x01
    a6a2:	e6 2f       	mov	r30, r22
    a6a4:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    a6a6:	00 97       	sbiw	r24, 0x00	; 0
    a6a8:	51 f0       	breq	.+20     	; 0xa6be <LBGetJoyPadState+0x40>
    a6aa:	df 01       	movw	r26, r30
    a6ac:	aa 0f       	add	r26, r26
    a6ae:	bb 1f       	adc	r27, r27
    a6b0:	ae 5c       	subi	r26, 0xCE	; 206
    a6b2:	b4 4f       	sbci	r27, 0xF4	; 244
    a6b4:	2d 91       	ld	r18, X+
    a6b6:	3c 91       	ld	r19, X
    a6b8:	82 17       	cp	r24, r18
    a6ba:	93 07       	cpc	r25, r19
    a6bc:	21 f0       	breq	.+8      	; 0xa6c6 <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    a6be:	d8 01       	movw	r26, r16
    a6c0:	16 96       	adiw	r26, 0x06	; 6
    a6c2:	1c 92       	st	X, r1
    a6c4:	07 c0       	rjmp	.+14     	; 0xa6d4 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    a6c6:	d8 01       	movw	r26, r16
    a6c8:	16 96       	adiw	r26, 0x06	; 6
    a6ca:	2c 91       	ld	r18, X
    a6cc:	16 97       	sbiw	r26, 0x06	; 6
    a6ce:	2f 5f       	subi	r18, 0xFF	; 255
    a6d0:	16 96       	adiw	r26, 0x06	; 6
    a6d2:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    a6d4:	ee 0f       	add	r30, r30
    a6d6:	ff 1f       	adc	r31, r31
    a6d8:	ee 5c       	subi	r30, 0xCE	; 206
    a6da:	f4 4f       	sbci	r31, 0xF4	; 244
    a6dc:	20 81       	ld	r18, Z
    a6de:	31 81       	ldd	r19, Z+1	; 0x01
    a6e0:	a9 01       	movw	r20, r18
    a6e2:	40 95       	com	r20
    a6e4:	50 95       	com	r21
    a6e6:	48 23       	and	r20, r24
    a6e8:	59 23       	and	r21, r25
    a6ea:	d8 01       	movw	r26, r16
    a6ec:	11 96       	adiw	r26, 0x01	; 1
    a6ee:	5c 93       	st	X, r21
    a6f0:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    a6f2:	ac 01       	movw	r20, r24
    a6f4:	40 95       	com	r20
    a6f6:	50 95       	com	r21
    a6f8:	24 23       	and	r18, r20
    a6fa:	35 23       	and	r19, r21
    a6fc:	13 96       	adiw	r26, 0x03	; 3
    a6fe:	3c 93       	st	X, r19
    a700:	2e 93       	st	-X, r18
    a702:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    a704:	91 83       	std	Z+1, r25	; 0x01
    a706:	80 83       	st	Z, r24
}
    a708:	0f 90       	pop	r0
    a70a:	df 91       	pop	r29
    a70c:	cf 91       	pop	r28
    a70e:	1f 91       	pop	r17
    a710:	0f 91       	pop	r16
    a712:	08 95       	ret

0000a714 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    a714:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    a716:	fb 01       	movw	r30, r22
    a718:	2e 2f       	mov	r18, r30
    a71a:	23 1b       	sub	r18, r19
    a71c:	24 17       	cp	r18, r20
    a71e:	28 f4       	brcc	.+10     	; 0xa72a <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    a720:	21 91       	ld	r18, Z+
    a722:	dc 01       	movw	r26, r24
    a724:	2d 93       	st	X+, r18
    a726:	cd 01       	movw	r24, r26
    a728:	f7 cf       	rjmp	.-18     	; 0xa718 <LBCopyChars+0x4>
	}
}
    a72a:	08 95       	ret

0000a72c <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    a72c:	af 92       	push	r10
    a72e:	bf 92       	push	r11
    a730:	cf 92       	push	r12
    a732:	df 92       	push	r13
    a734:	ef 92       	push	r14
    a736:	ff 92       	push	r15
    a738:	0f 93       	push	r16
    a73a:	1f 93       	push	r17
    a73c:	cf 93       	push	r28
    a73e:	df 93       	push	r29
    a740:	1f 92       	push	r1
    a742:	cd b7       	in	r28, 0x3d	; 61
    a744:	de b7       	in	r29, 0x3e	; 62
    a746:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    a748:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    a74a:	c6 2e       	mov	r12, r22
    a74c:	d1 2c       	mov	r13, r1
    a74e:	90 e0       	ldi	r25, 0x00	; 0
    a750:	5c 01       	movw	r10, r24
    a752:	a4 1a       	sub	r10, r20
    a754:	b5 0a       	sbc	r11, r21
    a756:	80 2f       	mov	r24, r16
    a758:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    a75a:	82 17       	cp	r24, r18
    a75c:	60 f4       	brcc	.+24     	; 0xa776 <LBPrintStr+0x4a>
    a75e:	c5 01       	movw	r24, r10
    a760:	80 0f       	add	r24, r16
    a762:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    a764:	f8 01       	movw	r30, r16
    a766:	41 91       	ld	r20, Z+
    a768:	8f 01       	movw	r16, r30
    a76a:	b6 01       	movw	r22, r12
    a76c:	29 83       	std	Y+1, r18	; 0x01
    a76e:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
    a772:	29 81       	ldd	r18, Y+1	; 0x01
    a774:	f0 cf       	rjmp	.-32     	; 0xa756 <LBPrintStr+0x2a>
	}
}
    a776:	0f 90       	pop	r0
    a778:	df 91       	pop	r29
    a77a:	cf 91       	pop	r28
    a77c:	1f 91       	pop	r17
    a77e:	0f 91       	pop	r16
    a780:	ff 90       	pop	r15
    a782:	ef 90       	pop	r14
    a784:	df 90       	pop	r13
    a786:	cf 90       	pop	r12
    a788:	bf 90       	pop	r11
    a78a:	af 90       	pop	r10
    a78c:	08 95       	ret

0000a78e <LBCollides>:
	}
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
    a78e:	af 92       	push	r10
    a790:	bf 92       	push	r11
    a792:	cf 92       	push	r12
    a794:	df 92       	push	r13
    a796:	ef 92       	push	r14
    a798:	ff 92       	push	r15
    a79a:	0f 93       	push	r16
    a79c:	1f 93       	push	r17
    a79e:	fc 01       	movw	r30, r24
	if (y1 + height1 <= y2) return 0;
    a7a0:	26 0f       	add	r18, r22
    a7a2:	37 1f       	adc	r19, r23
    a7a4:	e2 16       	cp	r14, r18
    a7a6:	f3 06       	cpc	r15, r19
    a7a8:	80 f4       	brcc	.+32     	; 0xa7ca <LBCollides+0x3c>
	if (y1 >= y2 + height2) return 0;
    a7aa:	ae 0c       	add	r10, r14
    a7ac:	bf 1c       	adc	r11, r15
    a7ae:	6a 15       	cp	r22, r10
    a7b0:	7b 05       	cpc	r23, r11
    a7b2:	58 f4       	brcc	.+22     	; 0xa7ca <LBCollides+0x3c>
	if (x1 + width1 <= x2) return 0;
    a7b4:	48 0f       	add	r20, r24
    a7b6:	59 1f       	adc	r21, r25
    a7b8:	04 17       	cp	r16, r20
    a7ba:	15 07       	cpc	r17, r21
    a7bc:	30 f4       	brcc	.+12     	; 0xa7ca <LBCollides+0x3c>
	if (x1 >= x2 + width2) return 0;
    a7be:	c0 0e       	add	r12, r16
    a7c0:	d1 1e       	adc	r13, r17
    a7c2:	81 e0       	ldi	r24, 0x01	; 1
    a7c4:	ec 15       	cp	r30, r12
    a7c6:	fd 05       	cpc	r31, r13
    a7c8:	08 f0       	brcs	.+2      	; 0xa7cc <LBCollides+0x3e>
}

u8 LBCollides(u16 x1, u16 y1, u16 width1, u16 height1,
						 u16 x2, u16 y2, u16 width2, u16 height2)
{
	if (y1 + height1 <= y2) return 0;
    a7ca:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    a7cc:	1f 91       	pop	r17
    a7ce:	0f 91       	pop	r16
    a7d0:	ff 90       	pop	r15
    a7d2:	ef 90       	pop	r14
    a7d4:	df 90       	pop	r13
    a7d6:	cf 90       	pop	r12
    a7d8:	bf 90       	pop	r11
    a7da:	af 90       	pop	r10
    a7dc:	08 95       	ret

0000a7de <LBLineIntersect>:

u8 LBLineIntersect(u16 line1x1, u16 line1y1, u16 line1x2, u16 line1y2,
							  u16 line2x1, u16 line2y1, u16 line2x2, u16 line2y2)
{
    a7de:	af 92       	push	r10
    a7e0:	bf 92       	push	r11
    a7e2:	cf 92       	push	r12
    a7e4:	df 92       	push	r13
    a7e6:	ef 92       	push	r14
    a7e8:	ff 92       	push	r15
    a7ea:	0f 93       	push	r16
    a7ec:	1f 93       	push	r17
    a7ee:	cf 93       	push	r28
    a7f0:	df 93       	push	r29
	s16 ua, ub;
	s16 denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a7f2:	ae 18       	sub	r10, r14
    a7f4:	bf 08       	sbc	r11, r15
    a7f6:	ea 01       	movw	r28, r20
    a7f8:	c8 1b       	sub	r28, r24
    a7fa:	d9 0b       	sbc	r29, r25
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a7fc:	c0 1a       	sub	r12, r16
    a7fe:	d1 0a       	sbc	r13, r17
    a800:	26 1b       	sub	r18, r22
    a802:	37 0b       	sbc	r19, r23
							  u16 line2x1, u16 line2y1, u16 line2x2, u16 line2y2)
{
	s16 ua, ub;
	s16 denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a804:	ac 9e       	mul	r10, r28
    a806:	f0 01       	movw	r30, r0
    a808:	ad 9e       	mul	r10, r29
    a80a:	f0 0d       	add	r31, r0
    a80c:	bc 9e       	mul	r11, r28
    a80e:	f0 0d       	add	r31, r0
    a810:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    a812:	c2 9e       	mul	r12, r18
    a814:	a0 01       	movw	r20, r0
    a816:	c3 9e       	mul	r12, r19
    a818:	50 0d       	add	r21, r0
    a81a:	d2 9e       	mul	r13, r18
    a81c:	50 0d       	add	r21, r0
    a81e:	11 24       	eor	r1, r1
							  u16 line2x1, u16 line2y1, u16 line2x2, u16 line2y2)
{
	s16 ua, ub;
	s16 denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    a820:	e4 1b       	sub	r30, r20
    a822:	f5 0b       	sbc	r31, r21
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a824:	a9 f1       	breq	.+106    	; 0xa890 <LBLineIntersect+0xb2>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a826:	ab 01       	movw	r20, r22
    a828:	4e 19       	sub	r20, r14
    a82a:	5f 09       	sbc	r21, r15
    a82c:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a82e:	ac 01       	movw	r20, r24
    a830:	40 1b       	sub	r20, r16
    a832:	51 0b       	sbc	r21, r17
    a834:	8a 01       	movw	r16, r20

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a836:	ec 9c       	mul	r14, r12
    a838:	c0 01       	movw	r24, r0
    a83a:	ed 9c       	mul	r14, r13
    a83c:	90 0d       	add	r25, r0
    a83e:	fc 9c       	mul	r15, r12
    a840:	90 0d       	add	r25, r0
    a842:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a844:	a0 9e       	mul	r10, r16
    a846:	a0 01       	movw	r20, r0
    a848:	a1 9e       	mul	r10, r17
    a84a:	50 0d       	add	r21, r0
    a84c:	b0 9e       	mul	r11, r16
    a84e:	50 0d       	add	r21, r0
    a850:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    a852:	84 1b       	sub	r24, r20
    a854:	95 0b       	sbc	r25, r21
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    a856:	bf 01       	movw	r22, r30
    a858:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a85c:	62 30       	cpi	r22, 0x02	; 2
    a85e:	71 05       	cpc	r23, r1
    a860:	b8 f4       	brcc	.+46     	; 0xa890 <LBLineIntersect+0xb2>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a862:	ec 9e       	mul	r14, r28
    a864:	c0 01       	movw	r24, r0
    a866:	ed 9e       	mul	r14, r29
    a868:	90 0d       	add	r25, r0
    a86a:	fc 9e       	mul	r15, r28
    a86c:	90 0d       	add	r25, r0
    a86e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a870:	02 9f       	mul	r16, r18
    a872:	a0 01       	movw	r20, r0
    a874:	03 9f       	mul	r16, r19
    a876:	50 0d       	add	r21, r0
    a878:	12 9f       	mul	r17, r18
    a87a:	50 0d       	add	r21, r0
    a87c:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    a87e:	84 1b       	sub	r24, r20
    a880:	95 0b       	sbc	r25, r21
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    a882:	bf 01       	movw	r22, r30
    a884:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    a888:	81 e0       	ldi	r24, 0x01	; 1
    a88a:	62 30       	cpi	r22, 0x02	; 2
    a88c:	71 05       	cpc	r23, r1
    a88e:	08 f0       	brcs	.+2      	; 0xa892 <LBLineIntersect+0xb4>
	s16 ua, ub;
	s16 denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    a890:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    a892:	df 91       	pop	r29
    a894:	cf 91       	pop	r28
    a896:	1f 91       	pop	r17
    a898:	0f 91       	pop	r16
    a89a:	ff 90       	pop	r15
    a89c:	ef 90       	pop	r14
    a89e:	df 90       	pop	r13
    a8a0:	cf 90       	pop	r12
    a8a2:	bf 90       	pop	r11
    a8a4:	af 90       	pop	r10
    a8a6:	08 95       	ret

0000a8a8 <LBRandom>:

u16 LBRandom(u16 from, u16 to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    a8a8:	0f 93       	push	r16
    a8aa:	1f 93       	push	r17
    a8ac:	cf 93       	push	r28
    a8ae:	df 93       	push	r29
    a8b0:	8c 01       	movw	r16, r24
    a8b2:	eb 01       	movw	r28, r22
    u16 tmp = GetPrngNumber(0);
    a8b4:	80 e0       	ldi	r24, 0x00	; 0
    a8b6:	90 e0       	ldi	r25, 0x00	; 0
    a8b8:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <GetPrngNumber>
    return ((tmp) % (to - from + 1)) + from;
    a8bc:	be 01       	movw	r22, r28
    a8be:	60 1b       	sub	r22, r16
    a8c0:	71 0b       	sbc	r23, r17
    a8c2:	6f 5f       	subi	r22, 0xFF	; 255
    a8c4:	7f 4f       	sbci	r23, 0xFF	; 255
    a8c6:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
}
    a8ca:	80 0f       	add	r24, r16
    a8cc:	91 1f       	adc	r25, r17
    a8ce:	df 91       	pop	r29
    a8d0:	cf 91       	pop	r28
    a8d2:	1f 91       	pop	r17
    a8d4:	0f 91       	pop	r16
    a8d6:	08 95       	ret

0000a8d8 <LBWaitSeconds>:
	WaitUs(micro_seconds);
#endif
}

void LBWaitSeconds(u8 seconds)
{
    a8d8:	cf 93       	push	r28
    a8da:	df 93       	push	r29
    a8dc:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    a8de:	c0 e0       	ldi	r28, 0x00	; 0
    a8e0:	cd 17       	cp	r28, r29
    a8e2:	31 f0       	breq	.+12     	; 0xa8f0 <LBWaitSeconds+0x18>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    a8e4:	8f ef       	ldi	r24, 0xFF	; 255
    a8e6:	9f ef       	ldi	r25, 0xFF	; 255
    a8e8:	0e 94 f6 43 	call	0x87ec	; 0x87ec <WaitUs>
#endif
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    a8ec:	cf 5f       	subi	r28, 0xFF	; 255
    a8ee:	f8 cf       	rjmp	.-16     	; 0xa8e0 <LBWaitSeconds+0x8>
	{
		LBWaitUs(65535);
	}
}
    a8f0:	df 91       	pop	r29
    a8f2:	cf 91       	pop	r28
    a8f4:	08 95       	ret

0000a8f6 <LBHideAllSprites>:

void LBHideAllSprites()
{
    a8f6:	e8 e6       	ldi	r30, 0x68	; 104
    a8f8:	f4 e0       	ldi	r31, 0x04	; 4
	for(int i = 0; i < MAX_SPRITES; i++)
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
    a8fa:	80 ef       	ldi	r24, 0xF0	; 240
    a8fc:	80 83       	st	Z, r24
    a8fe:	34 96       	adiw	r30, 0x04	; 4
	}
}

void LBHideAllSprites()
{
	for(int i = 0; i < MAX_SPRITES; i++)
    a900:	94 e0       	ldi	r25, 0x04	; 4
    a902:	e0 39       	cpi	r30, 0x90	; 144
    a904:	f9 07       	cpc	r31, r25
    a906:	d1 f7       	brne	.-12     	; 0xa8fc <LBHideAllSprites+0x6>
	{
		sprites[i].x = (SCREEN_TILES_H*TILE_WIDTH);
	}
}
    a908:	08 95       	ret

0000a90a <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    a90a:	2b e8       	ldi	r18, 0x8B	; 139
    a90c:	30 e0       	ldi	r19, 0x00	; 0
    a90e:	fc 01       	movw	r30, r24
    a910:	21 93       	st	Z+, r18
    a912:	31 93       	st	Z+, r19
    a914:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    a916:	4e e1       	ldi	r20, 0x1E	; 30
    a918:	50 e0       	ldi	r21, 0x00	; 0
    a91a:	6e e2       	ldi	r22, 0x2E	; 46
    a91c:	71 e0       	ldi	r23, 0x01	; 1
    a91e:	0c 94 ed 6f 	jmp	0xdfda	; 0xdfda <memcpy_P>

0000a922 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    a922:	2a e8       	ldi	r18, 0x8A	; 138
    a924:	30 e0       	ldi	r19, 0x00	; 0
    a926:	fc 01       	movw	r30, r24
    a928:	21 93       	st	Z+, r18
    a92a:	31 93       	st	Z+, r19
    a92c:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    a92e:	4e e1       	ldi	r20, 0x1E	; 30
    a930:	50 e0       	ldi	r21, 0x00	; 0
    a932:	6c e4       	ldi	r22, 0x4C	; 76
    a934:	71 e0       	ldi	r23, 0x01	; 1
    a936:	0c 94 ed 6f 	jmp	0xdfda	; 0xdfda <memcpy_P>

0000a93a <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    a93a:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    a93c:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a93e:	16 86       	std	Z+14, r1	; 0x0e
    a940:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.current_anim = 0;
    a942:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    a944:	73 e0       	ldi	r23, 0x03	; 3
    a946:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a948:	65 e0       	ldi	r22, 0x05	; 5
    a94a:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    a94c:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.looped = 0;
    a94e:	15 82       	std	Z+5, r1	; 0x05
		ta->anims[i].anim.reversing = 0;
    a950:	16 82       	std	Z+6, r1	; 0x06
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a952:	4d ef       	ldi	r20, 0xFD	; 253
    a954:	5d e7       	ldi	r21, 0x7D	; 125
    a956:	50 87       	std	Z+8, r21	; 0x08
    a958:	47 83       	std	Z+7, r20	; 0x07
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a95a:	2a ef       	ldi	r18, 0xFA	; 250
    a95c:	3d e7       	ldi	r19, 0x7D	; 125
    a95e:	32 87       	std	Z+10, r19	; 0x0a
    a960:	21 87       	std	Z+9, r18	; 0x09
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a962:	87 ef       	ldi	r24, 0xF7	; 247
    a964:	9d e7       	ldi	r25, 0x7D	; 125
    a966:	94 87       	std	Z+12, r25	; 0x0c
    a968:	83 87       	std	Z+11, r24	; 0x0b
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    a96a:	14 8e       	std	Z+28, r1	; 0x1c
    a96c:	13 8e       	std	Z+27, r1	; 0x1b
		ta->anims[i].anim.current_anim = 0;
    a96e:	17 86       	std	Z+15, r1	; 0x0f
		ta->anims[i].anim.anim_count = 3;
    a970:	70 8b       	std	Z+16, r23	; 0x10
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    a972:	61 8b       	std	Z+17, r22	; 0x11
		ta->anims[i].anim.frame_count = 0;
    a974:	12 8a       	std	Z+18, r1	; 0x12
		ta->anims[i].anim.looped = 0;
    a976:	13 8a       	std	Z+19, r1	; 0x13
		ta->anims[i].anim.reversing = 0;
    a978:	14 8a       	std	Z+20, r1	; 0x14
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    a97a:	56 8b       	std	Z+22, r21	; 0x16
    a97c:	45 8b       	std	Z+21, r20	; 0x15
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    a97e:	30 8f       	std	Z+24, r19	; 0x18
    a980:	27 8b       	std	Z+23, r18	; 0x17
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    a982:	92 8f       	std	Z+26, r25	; 0x1a
    a984:	81 8f       	std	Z+25, r24	; 0x19
    a986:	08 95       	ret

0000a988 <init_scope_animation>:
	}
}

void init_scope_animation(TileAnimation* ta)
{
    a988:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a98a:	15 86       	std	Z+13, r1	; 0x0d
    a98c:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a98e:	10 82       	st	Z, r1
	ta->anim.anim_count = 3;
    a990:	83 e0       	ldi	r24, 0x03	; 3
    a992:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SCOPE;
    a994:	8e e1       	ldi	r24, 0x1E	; 30
    a996:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a998:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a99a:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a99c:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_scope_0;
    a99e:	83 ed       	ldi	r24, 0xD3	; 211
    a9a0:	9d e7       	ldi	r25, 0x7D	; 125
    a9a2:	97 83       	std	Z+7, r25	; 0x07
    a9a4:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_scope_1;
    a9a6:	80 ed       	ldi	r24, 0xD0	; 208
    a9a8:	9d e7       	ldi	r25, 0x7D	; 125
    a9aa:	91 87       	std	Z+9, r25	; 0x09
    a9ac:	80 87       	std	Z+8, r24	; 0x08
	ta->anim.anims[2] = (char*)map_scope_2;
    a9ae:	8d ec       	ldi	r24, 0xCD	; 205
    a9b0:	9d e7       	ldi	r25, 0x7D	; 125
    a9b2:	93 87       	std	Z+11, r25	; 0x0b
    a9b4:	82 87       	std	Z+10, r24	; 0x0a
    a9b6:	08 95       	ret

0000a9b8 <init_sub_animation>:
}

void init_sub_animation(TileAnimation* ta)
{
    a9b8:	fc 01       	movw	r30, r24
	ta->tile_index = 0;
    a9ba:	15 86       	std	Z+13, r1	; 0x0d
    a9bc:	14 86       	std	Z+12, r1	; 0x0c
	ta->anim.current_anim = 0;
    a9be:	10 82       	st	Z, r1
	ta->anim.anim_count = 2;
    a9c0:	82 e0       	ldi	r24, 0x02	; 2
    a9c2:	81 83       	std	Z+1, r24	; 0x01
	ta->anim.frames_per_anim = FRAMES_PER_SUB;
    a9c4:	8c e3       	ldi	r24, 0x3C	; 60
    a9c6:	82 83       	std	Z+2, r24	; 0x02
	ta->anim.frame_count = 0;
    a9c8:	13 82       	std	Z+3, r1	; 0x03
	ta->anim.looped = 0;
    a9ca:	14 82       	std	Z+4, r1	; 0x04
	ta->anim.reversing = 0;
    a9cc:	15 82       	std	Z+5, r1	; 0x05
	ta->anim.anims[0] = (char*)map_sub_emerging;
    a9ce:	81 e6       	ldi	r24, 0x61	; 97
    a9d0:	9b e7       	ldi	r25, 0x7B	; 123
    a9d2:	97 83       	std	Z+7, r25	; 0x07
    a9d4:	86 83       	std	Z+6, r24	; 0x06
	ta->anim.anims[1] = (char*)map_sub;
    a9d6:	87 e9       	ldi	r24, 0x97	; 151
    a9d8:	9c e7       	ldi	r25, 0x7C	; 124
    a9da:	91 87       	std	Z+9, r25	; 0x09
    a9dc:	80 87       	std	Z+8, r24	; 0x08
    a9de:	08 95       	ret

0000a9e0 <init_shot_state>:
}

void init_shot_state(Shot* s, u8 shot_type)
{
    a9e0:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    a9e2:	80 e0       	ldi	r24, 0x00	; 0
    a9e4:	94 e0       	ldi	r25, 0x04	; 4
    a9e6:	93 83       	std	Z+3, r25	; 0x03
    a9e8:	82 83       	std	Z+2, r24	; 0x02
	s->shared.direction = D_UP;
    a9ea:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    a9ec:	11 82       	std	Z+1, r1	; 0x01
	s->active = 0;
    a9ee:	13 86       	std	Z+11, r1	; 0x0b
	s->distance = 0;
    a9f0:	15 86       	std	Z+13, r1	; 0x0d
    a9f2:	14 86       	std	Z+12, r1	; 0x0c
	s->shot_type = shot_type;
    a9f4:	60 87       	std	Z+8, r22	; 0x08
	s->rebounds = SHOT_REBOUNDS;
    a9f6:	84 e0       	ldi	r24, 0x04	; 4
    a9f8:	82 87       	std	Z+10, r24	; 0x0a
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    a9fa:	66 23       	and	r22, r22
    a9fc:	11 f0       	breq	.+4      	; 0xaa02 <init_shot_state+0x22>
    a9fe:	85 e0       	ldi	r24, 0x05	; 5
    aa00:	01 c0       	rjmp	.+2      	; 0xaa04 <init_shot_state+0x24>
    aa02:	81 e0       	ldi	r24, 0x01	; 1
    aa04:	81 87       	std	Z+9, r24	; 0x09
	s->shared.x = OFF_SCREEN << FP_FACTOR;
    aa06:	80 e8       	ldi	r24, 0x80	; 128
    aa08:	97 e0       	ldi	r25, 0x07	; 7
    aa0a:	95 83       	std	Z+5, r25	; 0x05
    aa0c:	84 83       	std	Z+4, r24	; 0x04
	s->shared.y = 0;
    aa0e:	17 82       	std	Z+7, r1	; 0x07
    aa10:	16 82       	std	Z+6, r1	; 0x06
    aa12:	08 95       	ret

0000aa14 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    aa14:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    aa16:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    aa18:	82 e0       	ldi	r24, 0x02	; 2
    aa1a:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    aa1c:	85 e0       	ldi	r24, 0x05	; 5
    aa1e:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    aa20:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.looped = 0;
    aa22:	12 8a       	std	Z+18, r1	; 0x12
	s->up_anim.reversing = 0;
    aa24:	13 8a       	std	Z+19, r1	; 0x13
	if (shot_type == BASIC_SHOT)
    aa26:	61 11       	cpse	r22, r1
    aa28:	03 c0       	rjmp	.+6      	; 0xaa30 <set_shot_animations+0x1c>
	{
		s->up_anim.anims[0] = (char*) map_ball;
    aa2a:	8b e6       	ldi	r24, 0x6B	; 107
    aa2c:	94 e4       	ldi	r25, 0x44	; 68
    aa2e:	13 c0       	rjmp	.+38     	; 0xaa56 <set_shot_animations+0x42>
		s->up_anim.anims[1] = (char*) map_ball;
		s->right_anim.anims[0] = (char*) map_ball;
		s->right_anim.anims[1] = (char*) map_ball;
	}
	else if (shot_type == ROCKET_SHOT)
    aa30:	61 30       	cpi	r22, 0x01	; 1
    aa32:	79 f4       	brne	.+30     	; 0xaa52 <set_shot_animations+0x3e>
	{
		s->up_anim.anims[0] = (char*) map_rocket_up_0;
    aa34:	88 e6       	ldi	r24, 0x68	; 104
    aa36:	94 e4       	ldi	r25, 0x44	; 68
    aa38:	95 8b       	std	Z+21, r25	; 0x15
    aa3a:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_rocket_up_1;
    aa3c:	85 e6       	ldi	r24, 0x65	; 101
    aa3e:	94 e4       	ldi	r25, 0x44	; 68
    aa40:	97 8b       	std	Z+23, r25	; 0x17
    aa42:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_rocket_right_0;
    aa44:	82 e6       	ldi	r24, 0x62	; 98
    aa46:	94 e4       	ldi	r25, 0x44	; 68
    aa48:	91 a3       	std	Z+33, r25	; 0x21
    aa4a:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_rocket_right_1;
    aa4c:	8f e5       	ldi	r24, 0x5F	; 95
    aa4e:	94 e4       	ldi	r25, 0x44	; 68
    aa50:	08 c0       	rjmp	.+16     	; 0xaa62 <set_shot_animations+0x4e>
	}
	else
	{
		s->up_anim.anims[0] = (char*) map_sub_shot;
    aa52:	83 e5       	ldi	r24, 0x53	; 83
    aa54:	94 e4       	ldi	r25, 0x44	; 68
    aa56:	95 8b       	std	Z+21, r25	; 0x15
    aa58:	84 8b       	std	Z+20, r24	; 0x14
		s->up_anim.anims[1] = (char*) map_sub_shot;
    aa5a:	97 8b       	std	Z+23, r25	; 0x17
    aa5c:	86 8b       	std	Z+22, r24	; 0x16
		s->right_anim.anims[0] = (char*) map_sub_shot;
    aa5e:	91 a3       	std	Z+33, r25	; 0x21
    aa60:	80 a3       	std	Z+32, r24	; 0x20
		s->right_anim.anims[1] = (char*) map_sub_shot;
    aa62:	93 a3       	std	Z+35, r25	; 0x23
    aa64:	82 a3       	std	Z+34, r24	; 0x22
	}
	s->up_anim.current_anim = 0;
    aa66:	16 86       	std	Z+14, r1	; 0x0e
	s->right_anim.anim_count = 2;
    aa68:	82 e0       	ldi	r24, 0x02	; 2
    aa6a:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    aa6c:	85 e0       	ldi	r24, 0x05	; 5
    aa6e:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    aa70:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.looped = 0;
    aa72:	16 8e       	std	Z+30, r1	; 0x1e
	s->right_anim.reversing = 0;
    aa74:	17 8e       	std	Z+31, r1	; 0x1f
    aa76:	08 95       	ret

0000aa78 <init_turret>:
}

void init_turret(Turret* t, u16 x, u16 y)
{
    aa78:	fc 01       	movw	r30, r24
	t->lives = BOSS_TURRET_LIVES;
    aa7a:	85 e0       	ldi	r24, 0x05	; 5
    aa7c:	80 87       	std	Z+8, r24	; 0x08
	t->shared.direction = D_LEFT;
    aa7e:	83 e0       	ldi	r24, 0x03	; 3
    aa80:	80 83       	st	Z, r24
	t->shared.recoiled = 0;
    aa82:	11 82       	std	Z+1, r1	; 0x01
	t->shared.speed = BOSS_TURRET_SPEED;
    aa84:	20 e0       	ldi	r18, 0x00	; 0
    aa86:	34 e0       	ldi	r19, 0x04	; 4
    aa88:	33 83       	std	Z+3, r19	; 0x03
    aa8a:	22 83       	std	Z+2, r18	; 0x02
	t->shared.x = x;
    aa8c:	75 83       	std	Z+5, r23	; 0x05
    aa8e:	64 83       	std	Z+4, r22	; 0x04
	t->shared.y = y;
    aa90:	57 83       	std	Z+7, r21	; 0x07
    aa92:	46 83       	std	Z+6, r20	; 0x06
	
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		t->shot[i].shared.speed = BOSS_TURRET_SHOT_SPEED;
    aa94:	80 e0       	ldi	r24, 0x00	; 0
    aa96:	98 e0       	ldi	r25, 0x08	; 8
    aa98:	94 87       	std	Z+12, r25	; 0x0c
    aa9a:	83 87       	std	Z+11, r24	; 0x0b
		t->shot[i].shared.direction = D_DOWN;
    aa9c:	82 e0       	ldi	r24, 0x02	; 2
    aa9e:	81 87       	std	Z+9, r24	; 0x09
		t->shot[i].shared.recoiled = 0;
    aaa0:	12 86       	std	Z+10, r1	; 0x0a
		t->shot[i].shared.x = OFF_SCREEN << FP_FACTOR;
    aaa2:	40 e8       	ldi	r20, 0x80	; 128
    aaa4:	57 e0       	ldi	r21, 0x07	; 7
    aaa6:	56 87       	std	Z+14, r21	; 0x0e
    aaa8:	45 87       	std	Z+13, r20	; 0x0d
		t->shot[i].shared.y = 0;
    aaaa:	10 8a       	std	Z+16, r1	; 0x10
    aaac:	17 86       	std	Z+15, r1	; 0x0f
		t->shot[i].active = 0;
    aaae:	14 8a       	std	Z+20, r1	; 0x14
		t->shot[i].distance = FP_128;
    aab0:	36 8b       	std	Z+22, r19	; 0x16
    aab2:	25 8b       	std	Z+21, r18	; 0x15
		t->shot[i].shot_type = BOSS_TURRET_SHOT;
    aab4:	81 8b       	std	Z+17, r24	; 0x11
		t->shot[i].rebounds = SHOT_REBOUNDS;
    aab6:	84 e0       	ldi	r24, 0x04	; 4
    aab8:	83 8b       	std	Z+19, r24	; 0x13
		t->shot[i].hit_count = BOSS_TURRET_SHOT_HIT_COUNT;
    aaba:	81 e0       	ldi	r24, 0x01	; 1
    aabc:	82 8b       	std	Z+18, r24	; 0x12
		set_shot_animations(&t->shot[i], BOSS_TURRET_SHOT);
    aabe:	62 e0       	ldi	r22, 0x02	; 2
    aac0:	cf 01       	movw	r24, r30
    aac2:	09 96       	adiw	r24, 0x09	; 9
    aac4:	0c 94 0a 55 	jmp	0xaa14	; 0xaa14 <set_shot_animations>

0000aac8 <init_player>:
	}
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    aac8:	0f 93       	push	r16
    aaca:	1f 93       	push	r17
    aacc:	cf 93       	push	r28
    aace:	df 93       	push	r29
    aad0:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    aad2:	8a e5       	ldi	r24, 0x5A	; 90
    aad4:	8b 8b       	std	Y+19, r24	; 0x13
	p->grace_frame = FRAMES_PER_GRACE;
    aad6:	88 e7       	ldi	r24, 0x78	; 120
    aad8:	8d 8b       	std	Y+21, r24	; 0x15
	p->banter_index = 0;
    aada:	1c 8a       	std	Y+20, r1	; 0x14
	p->score = 0;
    aadc:	1c 86       	std	Y+12, r1	; 0x0c
	p->level_score = 0;
    aade:	1d 86       	std	Y+13, r1	; 0x0d
	p->shared.direction = D_UP;
    aae0:	18 82       	st	Y, r1
	p->shared.speed = 0;
    aae2:	1b 82       	std	Y+3, r1	; 0x03
    aae4:	1a 82       	std	Y+2, r1	; 0x02
	p->shared.recoiled = 0;
    aae6:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    aae8:	80 e0       	ldi	r24, 0x00	; 0
    aaea:	92 e0       	ldi	r25, 0x02	; 2
    aaec:	9e 8f       	std	Y+30, r25	; 0x1e
    aaee:	8d 8f       	std	Y+29, r24	; 0x1d
	p->has_over_speed = false;
    aaf0:	1f 8a       	std	Y+23, r1	; 0x17
	p->has_rocket = false;
    aaf2:	1e 8a       	std	Y+22, r1	; 0x16
	p->flags = 0;
    aaf4:	1a 8a       	std	Y+18, r1	; 0x12

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    aaf6:	fe 01       	movw	r30, r28
    aaf8:	e1 5b       	subi	r30, 0xB1	; 177
    aafa:	ff 4f       	sbci	r31, 0xFF	; 255
    aafc:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    aafe:	31 96       	adiw	r30, 0x01	; 1
    ab00:	91 e0       	ldi	r25, 0x01	; 1
    ab02:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    ab04:	31 96       	adiw	r30, 0x01	; 1
    ab06:	85 e0       	ldi	r24, 0x05	; 5
    ab08:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    ab0a:	31 96       	adiw	r30, 0x01	; 1
    ab0c:	10 82       	st	Z, r1
	p->up_anim.looped = 0;
    ab0e:	31 96       	adiw	r30, 0x01	; 1
    ab10:	10 82       	st	Z, r1
	p->up_anim.reversing = 0;
    ab12:	31 96       	adiw	r30, 0x01	; 1
    ab14:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    ab16:	31 96       	adiw	r30, 0x01	; 1
    ab18:	71 83       	std	Z+1, r23	; 0x01
    ab1a:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    ab1c:	36 96       	adiw	r30, 0x06	; 6
    ab1e:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    ab20:	31 96       	adiw	r30, 0x01	; 1
    ab22:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    ab24:	31 96       	adiw	r30, 0x01	; 1
    ab26:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    ab28:	31 96       	adiw	r30, 0x01	; 1
    ab2a:	10 82       	st	Z, r1
	p->right_anim.looped = 0;
    ab2c:	31 96       	adiw	r30, 0x01	; 1
    ab2e:	10 82       	st	Z, r1
	p->right_anim.reversing = 0;
    ab30:	31 96       	adiw	r30, 0x01	; 1
    ab32:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    ab34:	31 96       	adiw	r30, 0x01	; 1
    ab36:	51 83       	std	Z+1, r21	; 0x01
    ab38:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    ab3a:	36 96       	adiw	r30, 0x06	; 6
    ab3c:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    ab3e:	31 96       	adiw	r30, 0x01	; 1
    ab40:	93 e0       	ldi	r25, 0x03	; 3
    ab42:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    ab44:	31 96       	adiw	r30, 0x01	; 1
    ab46:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    ab48:	31 96       	adiw	r30, 0x01	; 1
    ab4a:	10 82       	st	Z, r1
	p->exp_anim.looped = 0;
    ab4c:	31 96       	adiw	r30, 0x01	; 1
    ab4e:	10 82       	st	Z, r1
	p->exp_anim.reversing = 0;
    ab50:	31 96       	adiw	r30, 0x01	; 1
    ab52:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    ab54:	31 96       	adiw	r30, 0x01	; 1
    ab56:	8a e7       	ldi	r24, 0x7A	; 122
    ab58:	94 e4       	ldi	r25, 0x44	; 68
    ab5a:	91 83       	std	Z+1, r25	; 0x01
    ab5c:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    ab5e:	32 96       	adiw	r30, 0x02	; 2
    ab60:	84 e7       	ldi	r24, 0x74	; 116
    ab62:	94 e4       	ldi	r25, 0x44	; 68
    ab64:	91 83       	std	Z+1, r25	; 0x01
    ab66:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    ab68:	32 96       	adiw	r30, 0x02	; 2
    ab6a:	8e e6       	ldi	r24, 0x6E	; 110
    ab6c:	94 e4       	ldi	r25, 0x44	; 68
    ab6e:	91 83       	std	Z+1, r25	; 0x01
    ab70:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    ab72:	1e 86       	std	Y+14, r1	; 0x0e
	p->old_active_shots = 0;
    ab74:	1f 86       	std	Y+15, r1	; 0x0f
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    ab76:	8e 01       	movw	r16, r28
    ab78:	07 5d       	subi	r16, 0xD7	; 215
    ab7a:	1f 4f       	sbci	r17, 0xFF	; 255
    ab7c:	60 e0       	ldi	r22, 0x00	; 0
    ab7e:	c8 01       	movw	r24, r16
    ab80:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    ab84:	60 e0       	ldi	r22, 0x00	; 0
    ab86:	c8 01       	movw	r24, r16
    ab88:	0e 94 0a 55 	call	0xaa14	; 0xaa14 <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    ab8c:	18 8e       	std	Y+24, r1	; 0x18
	p->goal_direction = 0;
    ab8e:	18 a2       	std	Y+32, r1	; 0x20
    ab90:	1f 8e       	std	Y+31, r1	; 0x1f
	p->goal = 0;
    ab92:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_reached = 0;
    ab94:	1c 8e       	std	Y+28, r1	; 0x1c
	p->old_x = 0;
    ab96:	1e a2       	std	Y+38, r1	; 0x26
    ab98:	1d a2       	std	Y+37, r1	; 0x25
	p->old_y = 0;
    ab9a:	18 a6       	std	Y+40, r1	; 0x28
    ab9c:	1f a2       	std	Y+39, r1	; 0x27
	p->deadlock_count_x = 0;
    ab9e:	1a a2       	std	Y+34, r1	; 0x22
    aba0:	19 a2       	std	Y+33, r1	; 0x21
	p->deadlock_count_y = 0;
    aba2:	1c a2       	std	Y+36, r1	; 0x24
    aba4:	1b a2       	std	Y+35, r1	; 0x23
}
    aba6:	df 91       	pop	r29
    aba8:	cf 91       	pop	r28
    abaa:	1f 91       	pop	r17
    abac:	0f 91       	pop	r16
    abae:	08 95       	ret

0000abb0 <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    abb0:	fc 01       	movw	r30, r24
    abb2:	16 86       	std	Z+14, r1	; 0x0e
	player->old_active_shots = 0;
    abb4:	17 86       	std	Z+15, r1	; 0x0f
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    abb6:	60 e0       	ldi	r22, 0x00	; 0
    abb8:	89 96       	adiw	r24, 0x29	; 41
    abba:	0c 94 f0 54 	jmp	0xa9e0	; 0xa9e0 <init_shot_state>

0000abbe <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    abbe:	e6 e0       	ldi	r30, 0x06	; 6
    abc0:	fc e0       	ldi	r31, 0x0C	; 12
    abc2:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    abc4:	15 8a       	std	Z+21, r1	; 0x15
	game.paused = 0;
    abc6:	12 82       	std	Z+2, r1	; 0x02
	game.scope_counter = 0;
    abc8:	16 86       	std	Z+14, r1	; 0x0e
    abca:	15 86       	std	Z+13, r1	; 0x0d
	game.boss_fight_status = 0;
    abcc:	13 82       	std	Z+3, r1	; 0x03
	game.boss_fight_player = 0;
    abce:	12 8a       	std	Z+18, r1	; 0x12
    abd0:	11 8a       	std	Z+17, r1	; 0x11
	game.boss_fight_joypad = 0;
    abd2:	14 8a       	std	Z+20, r1	; 0x14
    abd4:	13 8a       	std	Z+19, r1	; 0x13
	game.boss_fight_player_lives = BOSS_FIGHT_PLAYER_LIVES;
    abd6:	82 e0       	ldi	r24, 0x02	; 2
    abd8:	85 83       	std	Z+5, r24	; 0x05
	game.boss_fight_player_hud = 0;
    abda:	14 82       	std	Z+4, r1	; 0x04
	game.toggle_counter = FRAMES_PER_BLANK;
    abdc:	84 e1       	ldi	r24, 0x14	; 20
    abde:	86 83       	std	Z+6, r24	; 0x06
	game.toggle_blank = 0;
    abe0:	17 82       	std	Z+7, r1	; 0x07
	game.clear_banter_1 = 1;
    abe2:	81 e0       	ldi	r24, 0x01	; 1
    abe4:	80 87       	std	Z+8, r24	; 0x08
	game.clear_banter_2 = 1;
    abe6:	81 87       	std	Z+9, r24	; 0x09
	game.demo_counter = 0;
    abe8:	14 86       	std	Z+12, r1	; 0x0c
    abea:	13 86       	std	Z+11, r1	; 0x0b
	game.demo_choice = 0;
    abec:	12 86       	std	Z+10, r1	; 0x0a
	game.tank_rank_counter = 0;
    abee:	10 8a       	std	Z+16, r1	; 0x10
    abf0:	17 86       	std	Z+15, r1	; 0x0f
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    abf2:	4c e8       	ldi	r20, 0x8C	; 140
    abf4:	54 e4       	ldi	r21, 0x44	; 68
    abf6:	62 e9       	ldi	r22, 0x92	; 146
    abf8:	74 e4       	ldi	r23, 0x44	; 68
    abfa:	89 e3       	ldi	r24, 0x39	; 57
    abfc:	9c e0       	ldi	r25, 0x0C	; 12
    abfe:	0e 94 64 55 	call	0xaac8	; 0xaac8 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    ac02:	40 e8       	ldi	r20, 0x80	; 128
    ac04:	54 e4       	ldi	r21, 0x44	; 68
    ac06:	66 e8       	ldi	r22, 0x86	; 134
    ac08:	74 e4       	ldi	r23, 0x44	; 68
    ac0a:	82 ea       	ldi	r24, 0xA2	; 162
    ac0c:	9f e0       	ldi	r25, 0x0F	; 15
    ac0e:	0c 94 64 55 	jmp	0xaac8	; 0xaac8 <init_player>

0000ac12 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    ac12:	cf 93       	push	r28
    ac14:	df 93       	push	r29
    ac16:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    ac18:	1d 8a       	std	Y+21, r1	; 0x15
	player->shared.x = player->spawn_x << FP_FACTOR;
    ac1a:	88 89       	ldd	r24, Y+16	; 0x10
    ac1c:	28 e0       	ldi	r18, 0x08	; 8
    ac1e:	82 9f       	mul	r24, r18
    ac20:	c0 01       	movw	r24, r0
    ac22:	11 24       	eor	r1, r1
    ac24:	9d 83       	std	Y+5, r25	; 0x05
    ac26:	8c 83       	std	Y+4, r24	; 0x04
	player->shared.y = player->spawn_y << FP_FACTOR;
    ac28:	89 89       	ldd	r24, Y+17	; 0x11
    ac2a:	28 e0       	ldi	r18, 0x08	; 8
    ac2c:	82 9f       	mul	r24, r18
    ac2e:	c0 01       	movw	r24, r0
    ac30:	11 24       	eor	r1, r1
    ac32:	9f 83       	std	Y+7, r25	; 0x07
    ac34:	8e 83       	std	Y+6, r24	; 0x06
	player->shared.direction = D_UP;
    ac36:	18 82       	st	Y, r1
	player->shared.speed = 0;
    ac38:	1b 82       	std	Y+3, r1	; 0x03
    ac3a:	1a 82       	std	Y+2, r1	; 0x02
	player->shared.recoiled = 0;
    ac3c:	19 82       	std	Y+1, r1	; 0x01
	player->tank_tactic = LBRandom(0, 2);
    ac3e:	62 e0       	ldi	r22, 0x02	; 2
    ac40:	70 e0       	ldi	r23, 0x00	; 0
    ac42:	80 e0       	ldi	r24, 0x00	; 0
    ac44:	90 e0       	ldi	r25, 0x00	; 0
    ac46:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    ac4a:	89 8f       	std	Y+25, r24	; 0x19
	player->shot_tactic = LBRandom(0, 2);
    ac4c:	62 e0       	ldi	r22, 0x02	; 2
    ac4e:	70 e0       	ldi	r23, 0x00	; 0
    ac50:	80 e0       	ldi	r24, 0x00	; 0
    ac52:	90 e0       	ldi	r25, 0x00	; 0
    ac54:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    ac58:	8a 8f       	std	Y+26, r24	; 0x1a
	
}
    ac5a:	df 91       	pop	r29
    ac5c:	cf 91       	pop	r28
    ac5e:	08 95       	ret

0000ac60 <waitForVSync>:

void waitForVSync()
{
    ProcessSprites();
    ac60:	0e 94 80 50 	call	0xa100	; 0xa100 <ProcessSprites>
    WaitVsync(1);
    ac64:	81 e0       	ldi	r24, 0x01	; 1
    ac66:	90 e0       	ldi	r25, 0x00	; 0
    ac68:	0e 94 8a 52 	call	0xa514	; 0xa514 <WaitVsync>
    RestoreBackground();
    ac6c:	0c 94 92 41 	jmp	0x8324	; 0x8324 <RestoreBackground>

0000ac70 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    ac70:	cf 93       	push	r28
    ac72:	df 93       	push	r29
    ac74:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    ac76:	bc 01       	movw	r22, r24
    ac78:	88 81       	ld	r24, Y
    ac7a:	99 81       	ldd	r25, Y+1	; 0x01
    ac7c:	0e 94 85 45 	call	0x8b0a	; 0x8b0a <EepromReadBlock>
	if (status == 0x03)
    ac80:	83 30       	cpi	r24, 0x03	; 3
    ac82:	29 f4       	brne	.+10     	; 0xac8e <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    ac84:	ce 01       	movw	r24, r28
	}
}
    ac86:	df 91       	pop	r29
    ac88:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    ac8a:	0c 94 3b 45 	jmp	0x8a76	; 0x8a76 <EepromWriteBlock>
	}
}
    ac8e:	df 91       	pop	r29
    ac90:	cf 91       	pop	r28
    ac92:	08 95       	ret

0000ac94 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    ac94:	61 e0       	ldi	r22, 0x01	; 1
    ac96:	83 e0       	ldi	r24, 0x03	; 3
    ac98:	0e 94 bb 52 	call	0xa576	; 0xa576 <FadeOut>
	ClearVram();
    ac9c:	0e 94 bc 43 	call	0x8778	; 0x8778 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    aca0:	60 e0       	ldi	r22, 0x00	; 0
    aca2:	83 e0       	ldi	r24, 0x03	; 3
    aca4:	0c 94 af 52 	jmp	0xa55e	; 0xa55e <FadeIn>

0000aca8 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    aca8:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    acaa:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    acac:	40 e0       	ldi	r20, 0x00	; 0
    acae:	6e e9       	ldi	r22, 0x9E	; 158
    acb0:	74 e4       	ldi	r23, 0x44	; 68
    acb2:	8c 2f       	mov	r24, r28
    acb4:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
    acb8:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    acba:	ca 30       	cpi	r28, 0x0A	; 10
    acbc:	b9 f7       	brne	.-18     	; 0xacac <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    acbe:	cf 91       	pop	r28
    acc0:	08 95       	ret

0000acc2 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    acc2:	cf 92       	push	r12
    acc4:	df 92       	push	r13
    acc6:	ff 92       	push	r15
    acc8:	0f 93       	push	r16
    acca:	1f 93       	push	r17
    accc:	cf 93       	push	r28
    acce:	df 93       	push	r29
    acd0:	cd b7       	in	r28, 0x3d	; 61
    acd2:	de b7       	in	r29, 0x3e	; 62
    acd4:	2a 97       	sbiw	r28, 0x0a	; 10
    acd6:	0f b6       	in	r0, 0x3f	; 63
    acd8:	f8 94       	cli
    acda:	de bf       	out	0x3e, r29	; 62
    acdc:	0f be       	out	0x3f, r0	; 63
    acde:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    ace0:	90 91 45 0c 	lds	r25, 0x0C45
    ace4:	80 91 ae 0f 	lds	r24, 0x0FAE
    ace8:	98 17       	cp	r25, r24
    acea:	28 f4       	brcc	.+10     	; 0xacf6 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    acec:	e9 e3       	ldi	r30, 0x39	; 57
    acee:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    acf0:	a2 ea       	ldi	r26, 0xA2	; 162
    acf2:	bf e0       	ldi	r27, 0x0F	; 15
    acf4:	04 c0       	rjmp	.+8      	; 0xacfe <save_score+0x3c>
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    acf6:	e2 ea       	ldi	r30, 0xA2	; 162
    acf8:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    acfa:	a9 e3       	ldi	r26, 0x39	; 57
    acfc:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    acfe:	18 96       	adiw	r26, 0x08	; 8
    ad00:	8c 91       	ld	r24, X
    ad02:	18 97       	sbiw	r26, 0x08	; 8
    ad04:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    ad06:	80 85       	ldd	r24, Z+8	; 0x08
    ad08:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    ad0a:	1c 96       	adiw	r26, 0x0c	; 12
    ad0c:	8c 91       	ld	r24, X
    ad0e:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    ad10:	94 85       	ldd	r25, Z+12	; 0x0c
    ad12:	9c 83       	std	Y+4, r25	; 0x04
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
    ad14:	21 e0       	ldi	r18, 0x01	; 1
    ad16:	30 91 09 0c 	lds	r19, 0x0C09
    ad1a:	38 30       	cpi	r19, 0x08	; 8
    ad1c:	09 f0       	breq	.+2      	; 0xad20 <save_score+0x5e>
    ad1e:	20 e0       	ldi	r18, 0x00	; 0
    ad20:	2d 83       	std	Y+5, r18	; 0x05
	save_delta = p_win->score - p_lose->score;
    ad22:	f8 2e       	mov	r15, r24
    ad24:	f9 1a       	sub	r15, r25
    ad26:	00 e0       	ldi	r16, 0x00	; 0
    ad28:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[5];
	u8 save_score[5];
	u8 save_delta = 0;
	u8 saved = 0;
    ad2a:	80 e0       	ldi	r24, 0x00	; 0
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
	{
		if (saved)
    ad2c:	81 11       	cpse	r24, r1
    ad2e:	08 c0       	rjmp	.+16     	; 0xad40 <save_score+0x7e>
    ad30:	f8 01       	movw	r30, r16
    ad32:	e1 54       	subi	r30, 0x41	; 65
    ad34:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 5);
			LBCopyChars(save_score, tmp_score, 5);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    ad36:	94 81       	ldd	r25, Z+4	; 0x04
    ad38:	25 81       	ldd	r18, Z+5	; 0x05
    ad3a:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    ad3c:	9f 15       	cp	r25, r15
    ad3e:	d0 f4       	brcc	.+52     	; 0xad74 <save_score+0xb2>
			{
				LBCopyChars(tmp_score, &scores.data[i], 5);
    ad40:	45 e0       	ldi	r20, 0x05	; 5
    ad42:	c8 01       	movw	r24, r16
    ad44:	8f 53       	subi	r24, 0x3F	; 63
    ad46:	94 4f       	sbci	r25, 0xF4	; 244
    ad48:	6c 01       	movw	r12, r24
    ad4a:	bc 01       	movw	r22, r24
    ad4c:	ce 01       	movw	r24, r28
    ad4e:	06 96       	adiw	r24, 0x06	; 6
    ad50:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 5);
    ad54:	45 e0       	ldi	r20, 0x05	; 5
    ad56:	be 01       	movw	r22, r28
    ad58:	6f 5f       	subi	r22, 0xFF	; 255
    ad5a:	7f 4f       	sbci	r23, 0xFF	; 255
    ad5c:	c6 01       	movw	r24, r12
    ad5e:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 5);
    ad62:	45 e0       	ldi	r20, 0x05	; 5
    ad64:	be 01       	movw	r22, r28
    ad66:	6a 5f       	subi	r22, 0xFA	; 250
    ad68:	7f 4f       	sbci	r23, 0xFF	; 255
    ad6a:	ce 01       	movw	r24, r28
    ad6c:	01 96       	adiw	r24, 0x01	; 1
    ad6e:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
				saved = 1;
    ad72:	81 e0       	ldi	r24, 0x01	; 1
    ad74:	0b 5f       	subi	r16, 0xFB	; 251
    ad76:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_score[4] = (game.boss_fight_status == BOSS_FIGHT_WON) ? 1 : 0;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 5)
    ad78:	0e 31       	cpi	r16, 0x1E	; 30
    ad7a:	11 05       	cpc	r17, r1
    ad7c:	b9 f6       	brne	.-82     	; 0xad2c <save_score+0x6a>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    ad7e:	8f eb       	ldi	r24, 0xBF	; 191
    ad80:	9b e0       	ldi	r25, 0x0B	; 11
    ad82:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    ad86:	2a 96       	adiw	r28, 0x0a	; 10
    ad88:	0f b6       	in	r0, 0x3f	; 63
    ad8a:	f8 94       	cli
    ad8c:	de bf       	out	0x3e, r29	; 62
    ad8e:	0f be       	out	0x3f, r0	; 63
    ad90:	cd bf       	out	0x3d, r28	; 61
    ad92:	df 91       	pop	r29
    ad94:	cf 91       	pop	r28
    ad96:	1f 91       	pop	r17
    ad98:	0f 91       	pop	r16
    ad9a:	ff 90       	pop	r15
    ad9c:	df 90       	pop	r13
    ad9e:	cf 90       	pop	r12
    ada0:	08 95       	ret

0000ada2 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    ada2:	dc 01       	movw	r26, r24
    ada4:	fb 01       	movw	r30, r22
	switch (shot->shared.direction)
    ada6:	80 81       	ld	r24, Z
    ada8:	81 30       	cpi	r24, 0x01	; 1
    adaa:	91 f0       	breq	.+36     	; 0xadd0 <position_shot+0x2e>
    adac:	28 f0       	brcs	.+10     	; 0xadb8 <position_shot+0x16>
    adae:	82 30       	cpi	r24, 0x02	; 2
    adb0:	b1 f0       	breq	.+44     	; 0xadde <position_shot+0x3c>
    adb2:	83 30       	cpi	r24, 0x03	; 3
    adb4:	11 f1       	breq	.+68     	; 0xadfa <position_shot+0x58>
    adb6:	08 95       	ret
	{
		case D_UP:
			shot->shared.x = player->shared.x + FP_4;
    adb8:	14 96       	adiw	r26, 0x04	; 4
    adba:	8d 91       	ld	r24, X+
    adbc:	9c 91       	ld	r25, X
    adbe:	15 97       	sbiw	r26, 0x05	; 5
    adc0:	80 96       	adiw	r24, 0x20	; 32
    adc2:	95 83       	std	Z+5, r25	; 0x05
    adc4:	84 83       	std	Z+4, r24	; 0x04
			shot->shared.y = player->shared.y;
    adc6:	16 96       	adiw	r26, 0x06	; 6
    adc8:	8d 91       	ld	r24, X+
    adca:	9c 91       	ld	r25, X
    adcc:	17 97       	sbiw	r26, 0x07	; 7
    adce:	20 c0       	rjmp	.+64     	; 0xae10 <position_shot+0x6e>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + FP_8;
    add0:	14 96       	adiw	r26, 0x04	; 4
    add2:	8d 91       	ld	r24, X+
    add4:	9c 91       	ld	r25, X
    add6:	15 97       	sbiw	r26, 0x05	; 5
    add8:	80 5c       	subi	r24, 0xC0	; 192
    adda:	9f 4f       	sbci	r25, 0xFF	; 255
    addc:	12 c0       	rjmp	.+36     	; 0xae02 <position_shot+0x60>
			shot->shared.y = player->shared.y + FP_4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + FP_4;
    adde:	14 96       	adiw	r26, 0x04	; 4
    ade0:	8d 91       	ld	r24, X+
    ade2:	9c 91       	ld	r25, X
    ade4:	15 97       	sbiw	r26, 0x05	; 5
    ade6:	80 96       	adiw	r24, 0x20	; 32
    ade8:	95 83       	std	Z+5, r25	; 0x05
    adea:	84 83       	std	Z+4, r24	; 0x04
			shot->shared.y = player->shared.y + FP_8;
    adec:	16 96       	adiw	r26, 0x06	; 6
    adee:	8d 91       	ld	r24, X+
    adf0:	9c 91       	ld	r25, X
    adf2:	17 97       	sbiw	r26, 0x07	; 7
    adf4:	80 5c       	subi	r24, 0xC0	; 192
    adf6:	9f 4f       	sbci	r25, 0xFF	; 255
    adf8:	0b c0       	rjmp	.+22     	; 0xae10 <position_shot+0x6e>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    adfa:	14 96       	adiw	r26, 0x04	; 4
    adfc:	8d 91       	ld	r24, X+
    adfe:	9c 91       	ld	r25, X
    ae00:	15 97       	sbiw	r26, 0x05	; 5
    ae02:	95 83       	std	Z+5, r25	; 0x05
    ae04:	84 83       	std	Z+4, r24	; 0x04
			shot->shared.y = player->shared.y + FP_4;
    ae06:	16 96       	adiw	r26, 0x06	; 6
    ae08:	8d 91       	ld	r24, X+
    ae0a:	9c 91       	ld	r25, X
    ae0c:	17 97       	sbiw	r26, 0x07	; 7
    ae0e:	80 96       	adiw	r24, 0x20	; 32
    ae10:	97 83       	std	Z+7, r25	; 0x07
    ae12:	86 83       	std	Z+6, r24	; 0x06
    ae14:	08 95       	ret

0000ae16 <print_level_score>:
			break;
	}
}

void print_level_score(Player* winner, Player* loser)
{
    ae16:	0f 93       	push	r16
    ae18:	1f 93       	push	r17
    ae1a:	cf 93       	push	r28
    ae1c:	df 93       	push	r29
    ae1e:	8c 01       	movw	r16, r24
    ae20:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    ae22:	ac 01       	movw	r20, r24
    ae24:	47 5f       	subi	r20, 0xF7	; 247
    ae26:	5f 4f       	sbci	r21, 0xFF	; 255
    ae28:	23 e0       	ldi	r18, 0x03	; 3
    ae2a:	6e e0       	ldi	r22, 0x0E	; 14
    ae2c:	84 e0       	ldi	r24, 0x04	; 4
    ae2e:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
	Print(8, 14, (char*) strOwns);
    ae32:	4c ee       	ldi	r20, 0xEC	; 236
    ae34:	52 e0       	ldi	r21, 0x02	; 2
    ae36:	6e e0       	ldi	r22, 0x0E	; 14
    ae38:	70 e0       	ldi	r23, 0x00	; 0
    ae3a:	88 e0       	ldi	r24, 0x08	; 8
    ae3c:	90 e0       	ldi	r25, 0x00	; 0
    ae3e:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    ae42:	ae 01       	movw	r20, r28
    ae44:	47 5f       	subi	r20, 0xF7	; 247
    ae46:	5f 4f       	sbci	r21, 0xFF	; 255
    ae48:	23 e0       	ldi	r18, 0x03	; 3
    ae4a:	6e e0       	ldi	r22, 0x0E	; 14
    ae4c:	8d e0       	ldi	r24, 0x0D	; 13
    ae4e:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
	Print(17, 14, (char*) strBy);
    ae52:	49 ee       	ldi	r20, 0xE9	; 233
    ae54:	52 e0       	ldi	r21, 0x02	; 2
    ae56:	6e e0       	ldi	r22, 0x0E	; 14
    ae58:	70 e0       	ldi	r23, 0x00	; 0
    ae5a:	81 e1       	ldi	r24, 0x11	; 17
    ae5c:	90 e0       	ldi	r25, 0x00	; 0
    ae5e:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    ae62:	21 e0       	ldi	r18, 0x01	; 1
    ae64:	f8 01       	movw	r30, r16
    ae66:	45 85       	ldd	r20, Z+13	; 0x0d
    ae68:	6e e0       	ldi	r22, 0x0E	; 14
    ae6a:	70 e0       	ldi	r23, 0x00	; 0
    ae6c:	86 e1       	ldi	r24, 0x16	; 22
    ae6e:	90 e0       	ldi	r25, 0x00	; 0
    ae70:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
	PrintChar(23, 14, '-');
    ae74:	4d e2       	ldi	r20, 0x2D	; 45
    ae76:	6e e0       	ldi	r22, 0x0E	; 14
    ae78:	70 e0       	ldi	r23, 0x00	; 0
    ae7a:	87 e1       	ldi	r24, 0x17	; 23
    ae7c:	90 e0       	ldi	r25, 0x00	; 0
    ae7e:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    ae82:	21 e0       	ldi	r18, 0x01	; 1
    ae84:	4d 85       	ldd	r20, Y+13	; 0x0d
    ae86:	6e e0       	ldi	r22, 0x0E	; 14
    ae88:	70 e0       	ldi	r23, 0x00	; 0
    ae8a:	8a e1       	ldi	r24, 0x1A	; 26
    ae8c:	90 e0       	ldi	r25, 0x00	; 0
}
    ae8e:	df 91       	pop	r29
    ae90:	cf 91       	pop	r28
    ae92:	1f 91       	pop	r17
    ae94:	0f 91       	pop	r16
	Print(8, 14, (char*) strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, (char*) strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    ae96:	0c 94 39 52 	jmp	0xa472	; 0xa472 <PrintByte>

0000ae9a <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    ae9a:	0f 93       	push	r16
    ae9c:	1f 93       	push	r17
    ae9e:	cf 93       	push	r28
    aea0:	df 93       	push	r29
    aea2:	8c 01       	movw	r16, r24
    aea4:	eb 01       	movw	r28, r22
    Print(9, 12, (char*) strFinalScore);
    aea6:	4d ed       	ldi	r20, 0xDD	; 221
    aea8:	52 e0       	ldi	r21, 0x02	; 2
    aeaa:	6c e0       	ldi	r22, 0x0C	; 12
    aeac:	70 e0       	ldi	r23, 0x00	; 0
    aeae:	89 e0       	ldi	r24, 0x09	; 9
    aeb0:	90 e0       	ldi	r25, 0x00	; 0
    aeb2:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    aeb6:	a8 01       	movw	r20, r16
    aeb8:	47 5f       	subi	r20, 0xF7	; 247
    aeba:	5f 4f       	sbci	r21, 0xFF	; 255
    aebc:	23 e0       	ldi	r18, 0x03	; 3
    aebe:	6e e0       	ldi	r22, 0x0E	; 14
    aec0:	84 e0       	ldi	r24, 0x04	; 4
    aec2:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
    Print(8, 14, (char*) strOwns);
    aec6:	4c ee       	ldi	r20, 0xEC	; 236
    aec8:	52 e0       	ldi	r21, 0x02	; 2
    aeca:	6e e0       	ldi	r22, 0x0E	; 14
    aecc:	70 e0       	ldi	r23, 0x00	; 0
    aece:	88 e0       	ldi	r24, 0x08	; 8
    aed0:	90 e0       	ldi	r25, 0x00	; 0
    aed2:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    aed6:	ae 01       	movw	r20, r28
    aed8:	47 5f       	subi	r20, 0xF7	; 247
    aeda:	5f 4f       	sbci	r21, 0xFF	; 255
    aedc:	23 e0       	ldi	r18, 0x03	; 3
    aede:	6e e0       	ldi	r22, 0x0E	; 14
    aee0:	8d e0       	ldi	r24, 0x0D	; 13
    aee2:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
    Print(17, 14, (char*) strBy);
    aee6:	49 ee       	ldi	r20, 0xE9	; 233
    aee8:	52 e0       	ldi	r21, 0x02	; 2
    aeea:	6e e0       	ldi	r22, 0x0E	; 14
    aeec:	70 e0       	ldi	r23, 0x00	; 0
    aeee:	81 e1       	ldi	r24, 0x11	; 17
    aef0:	90 e0       	ldi	r25, 0x00	; 0
    aef2:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    PrintByte(22, 14, winner->score ,true);
    aef6:	21 e0       	ldi	r18, 0x01	; 1
    aef8:	f8 01       	movw	r30, r16
    aefa:	44 85       	ldd	r20, Z+12	; 0x0c
    aefc:	6e e0       	ldi	r22, 0x0E	; 14
    aefe:	70 e0       	ldi	r23, 0x00	; 0
    af00:	86 e1       	ldi	r24, 0x16	; 22
    af02:	90 e0       	ldi	r25, 0x00	; 0
    af04:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
    PrintChar(23, 14, '-');
    af08:	4d e2       	ldi	r20, 0x2D	; 45
    af0a:	6e e0       	ldi	r22, 0x0E	; 14
    af0c:	70 e0       	ldi	r23, 0x00	; 0
    af0e:	87 e1       	ldi	r24, 0x17	; 23
    af10:	90 e0       	ldi	r25, 0x00	; 0
    af12:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    af16:	21 e0       	ldi	r18, 0x01	; 1
    af18:	4c 85       	ldd	r20, Y+12	; 0x0c
    af1a:	6e e0       	ldi	r22, 0x0E	; 14
    af1c:	70 e0       	ldi	r23, 0x00	; 0
    af1e:	8a e1       	ldi	r24, 0x1A	; 26
    af20:	90 e0       	ldi	r25, 0x00	; 0
    af22:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
	if (game.boss_fight_status == BOSS_FIGHT_WON)
    af26:	80 91 09 0c 	lds	r24, 0x0C09
    af2a:	88 30       	cpi	r24, 0x08	; 8
    af2c:	59 f4       	brne	.+22     	; 0xaf44 <print_final_score+0xaa>
	{
		PrintChar(28, 14, '*');
    af2e:	4a e2       	ldi	r20, 0x2A	; 42
    af30:	6e e0       	ldi	r22, 0x0E	; 14
    af32:	70 e0       	ldi	r23, 0x00	; 0
    af34:	8c e1       	ldi	r24, 0x1C	; 28
    af36:	90 e0       	ldi	r25, 0x00	; 0
	}
}
    af38:	df 91       	pop	r29
    af3a:	cf 91       	pop	r28
    af3c:	1f 91       	pop	r17
    af3e:	0f 91       	pop	r16
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
	if (game.boss_fight_status == BOSS_FIGHT_WON)
	{
		PrintChar(28, 14, '*');
    af40:	0c 94 87 52 	jmp	0xa50e	; 0xa50e <PrintChar>
	}
}
    af44:	df 91       	pop	r29
    af46:	cf 91       	pop	r28
    af48:	1f 91       	pop	r17
    af4a:	0f 91       	pop	r16
    af4c:	08 95       	ret

0000af4e <shoot_pressed>:

char shoot_pressed(JoyPadState* p)
{
    af4e:	fc 01       	movw	r30, r24
    af50:	20 81       	ld	r18, Z
    af52:	31 81       	ldd	r19, Z+1	; 0x01
    af54:	21 70       	andi	r18, 0x01	; 1
    af56:	31 70       	andi	r19, 0x01	; 1
	return (p->pressed & BTN_A) || (p->pressed & BTN_B);
    af58:	81 e0       	ldi	r24, 0x01	; 1
    af5a:	23 2b       	or	r18, r19
    af5c:	09 f4       	brne	.+2      	; 0xaf60 <shoot_pressed+0x12>
    af5e:	80 e0       	ldi	r24, 0x00	; 0
}
    af60:	08 95       	ret

0000af62 <get_delta>:

u16 get_delta(Player* p, SpriteShared* s)
{
	if (p->goal == 0)
    af62:	fc 01       	movw	r30, r24
    af64:	23 8d       	ldd	r18, Z+27	; 0x1b
    af66:	fb 01       	movw	r30, r22
    af68:	82 81       	ldd	r24, Z+2	; 0x02
    af6a:	93 81       	ldd	r25, Z+3	; 0x03
    af6c:	22 23       	and	r18, r18
    af6e:	29 f0       	breq	.+10     	; 0xaf7a <get_delta+0x18>
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed  + (s->speed / 2)) / FRAME_TIME_INVERTED;
    af70:	9c 01       	movw	r18, r24
    af72:	36 95       	lsr	r19
    af74:	27 95       	ror	r18
    af76:	82 0f       	add	r24, r18
    af78:	93 1f       	adc	r25, r19
    af7a:	26 e0       	ldi	r18, 0x06	; 6
    af7c:	96 95       	lsr	r25
    af7e:	87 95       	ror	r24
    af80:	2a 95       	dec	r18
    af82:	e1 f7       	brne	.-8      	; 0xaf7c <get_delta+0x1a>
}
    af84:	08 95       	ret

0000af86 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    af86:	cf 93       	push	r28
    af88:	df 93       	push	r29
    af8a:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    af8c:	ac 01       	movw	r20, r24
    af8e:	47 5f       	subi	r20, 0xF7	; 247
    af90:	5f 4f       	sbci	r21, 0xFF	; 255
    af92:	23 e0       	ldi	r18, 0x03	; 3
    af94:	60 e0       	ldi	r22, 0x00	; 0
    af96:	8a e0       	ldi	r24, 0x0A	; 10
    af98:	8c 0f       	add	r24, r28
    af9a:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
	Print(x, 0, (char*) strScore);
    af9e:	d0 e0       	ldi	r29, 0x00	; 0
    afa0:	41 e3       	ldi	r20, 0x31	; 49
    afa2:	52 e0       	ldi	r21, 0x02	; 2
    afa4:	60 e0       	ldi	r22, 0x00	; 0
    afa6:	70 e0       	ldi	r23, 0x00	; 0
    afa8:	ce 01       	movw	r24, r28
    afaa:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(x, 1, (char*) strTotal);
    afae:	4a e2       	ldi	r20, 0x2A	; 42
    afb0:	52 e0       	ldi	r21, 0x02	; 2
    afb2:	61 e0       	ldi	r22, 0x01	; 1
    afb4:	70 e0       	ldi	r23, 0x00	; 0
    afb6:	ce 01       	movw	r24, r28
	
}
    afb8:	df 91       	pop	r29
    afba:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, (char*) strScore);
	Print(x, 1, (char*) strTotal);
    afbc:	0c 94 6c 52 	jmp	0xa4d8	; 0xa4d8 <Print>

0000afc0 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    afc0:	0f 93       	push	r16
    afc2:	1f 93       	push	r17
    afc4:	cf 93       	push	r28
    afc6:	df 93       	push	r29
    afc8:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    afca:	c6 2f       	mov	r28, r22
    afcc:	d0 e0       	ldi	r29, 0x00	; 0
    afce:	28 96       	adiw	r28, 0x08	; 8
    afd0:	20 e0       	ldi	r18, 0x00	; 0
    afd2:	fc 01       	movw	r30, r24
    afd4:	45 85       	ldd	r20, Z+13	; 0x0d
    afd6:	60 e0       	ldi	r22, 0x00	; 0
    afd8:	70 e0       	ldi	r23, 0x00	; 0
    afda:	ce 01       	movw	r24, r28
    afdc:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    afe0:	20 e0       	ldi	r18, 0x00	; 0
    afe2:	f8 01       	movw	r30, r16
    afe4:	44 85       	ldd	r20, Z+12	; 0x0c
    afe6:	61 e0       	ldi	r22, 0x01	; 1
    afe8:	70 e0       	ldi	r23, 0x00	; 0
    afea:	ce 01       	movw	r24, r28
}
    afec:	df 91       	pop	r29
    afee:	cf 91       	pop	r28
    aff0:	1f 91       	pop	r17
    aff2:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    aff4:	0c 94 39 52 	jmp	0xa472	; 0xa472 <PrintByte>

0000aff8 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    aff8:	cf 93       	push	r28
    affa:	df 93       	push	r29
    affc:	ec 01       	movw	r28, r24
    affe:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    b000:	9b 89       	ldd	r25, Y+19	; 0x13
    b002:	9a 35       	cpi	r25, 0x5A	; 90
    b004:	99 f0       	breq	.+38     	; 0xb02c <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    b006:	91 11       	cpse	r25, r1
    b008:	0c c0       	rjmp	.+24     	; 0xb022 <render_banter+0x2a>
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
    b00a:	4c 89       	ldd	r20, Y+20	; 0x14
    b00c:	9f e0       	ldi	r25, 0x0F	; 15
    b00e:	49 9f       	mul	r20, r25
    b010:	a0 01       	movw	r20, r0
    b012:	11 24       	eor	r1, r1
    b014:	49 5b       	subi	r20, 0xB9	; 185
    b016:	5d 4f       	sbci	r21, 0xFD	; 253
    b018:	62 e0       	ldi	r22, 0x02	; 2
    b01a:	70 e0       	ldi	r23, 0x00	; 0
    b01c:	90 e0       	ldi	r25, 0x00	; 0
    b01e:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    b022:	8b 89       	ldd	r24, Y+19	; 0x13
    b024:	8f 5f       	subi	r24, 0xFF	; 255
    b026:	8b 8b       	std	Y+19, r24	; 0x13
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, (char*) banter_map+player->banter_index*15);
		}
		clear_banter = 1;
    b028:	41 e0       	ldi	r20, 0x01	; 1
    b02a:	0a c0       	rjmp	.+20     	; 0xb040 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    b02c:	44 23       	and	r20, r20
    b02e:	41 f0       	breq	.+16     	; 0xb040 <render_banter+0x48>
	{
		Print(banter_x, 2, (char*) strBanterClear);
    b030:	48 e3       	ldi	r20, 0x38	; 56
    b032:	52 e0       	ldi	r21, 0x02	; 2
    b034:	62 e0       	ldi	r22, 0x02	; 2
    b036:	70 e0       	ldi	r23, 0x00	; 0
    b038:	90 e0       	ldi	r25, 0x00	; 0
    b03a:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    b03e:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    b040:	84 2f       	mov	r24, r20
    b042:	df 91       	pop	r29
    b044:	cf 91       	pop	r28
    b046:	08 95       	ret

0000b048 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    b048:	0f 93       	push	r16
    b04a:	fc 01       	movw	r30, r24
    b04c:	86 2f       	mov	r24, r22
	MoveSprite(sprite_index, player->shared.x >> FP_FACTOR, player->shared.y >> FP_FACTOR, 2, 2);
    b04e:	46 81       	ldd	r20, Z+6	; 0x06
    b050:	57 81       	ldd	r21, Z+7	; 0x07
    b052:	93 e0       	ldi	r25, 0x03	; 3
    b054:	56 95       	lsr	r21
    b056:	47 95       	ror	r20
    b058:	9a 95       	dec	r25
    b05a:	e1 f7       	brne	.-8      	; 0xb054 <render_player+0xc>
    b05c:	04 80       	ldd	r0, Z+4	; 0x04
    b05e:	f5 81       	ldd	r31, Z+5	; 0x05
    b060:	e0 2d       	mov	r30, r0
    b062:	bf 01       	movw	r22, r30
    b064:	23 e0       	ldi	r18, 0x03	; 3
    b066:	76 95       	lsr	r23
    b068:	67 95       	ror	r22
    b06a:	2a 95       	dec	r18
    b06c:	e1 f7       	brne	.-8      	; 0xb066 <render_player+0x1e>
    b06e:	02 e0       	ldi	r16, 0x02	; 2
    b070:	22 e0       	ldi	r18, 0x02	; 2
    b072:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
}
    b076:	0f 91       	pop	r16
    b078:	08 95       	ret

0000b07a <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    b07a:	0f 93       	push	r16
    b07c:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    b07e:	86 85       	ldd	r24, Z+14	; 0x0e
    b080:	88 23       	and	r24, r24
    b082:	99 f0       	breq	.+38     	; 0xb0aa <render_shot+0x30>
    b084:	86 2f       	mov	r24, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x >> FP_FACTOR, player->shot[i].shared.y >> FP_FACTOR, 1, 1);
    b086:	47 a5       	ldd	r20, Z+47	; 0x2f
    b088:	50 a9       	ldd	r21, Z+48	; 0x30
    b08a:	93 e0       	ldi	r25, 0x03	; 3
    b08c:	56 95       	lsr	r21
    b08e:	47 95       	ror	r20
    b090:	9a 95       	dec	r25
    b092:	e1 f7       	brne	.-8      	; 0xb08c <render_shot+0x12>
    b094:	65 a5       	ldd	r22, Z+45	; 0x2d
    b096:	76 a5       	ldd	r23, Z+46	; 0x2e
    b098:	23 e0       	ldi	r18, 0x03	; 3
    b09a:	76 95       	lsr	r23
    b09c:	67 95       	ror	r22
    b09e:	2a 95       	dec	r18
    b0a0:	e1 f7       	brne	.-8      	; 0xb09a <render_shot+0x20>
    b0a2:	01 e0       	ldi	r16, 0x01	; 1
    b0a4:	21 e0       	ldi	r18, 0x01	; 1
    b0a6:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
			sprite_index++;
		}
	}
}
    b0aa:	0f 91       	pop	r16
    b0ac:	08 95       	ret

0000b0ae <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    b0ae:	ef 92       	push	r14
    b0b0:	ff 92       	push	r15
    b0b2:	0f 93       	push	r16
    b0b4:	1f 93       	push	r17
    b0b6:	cf 93       	push	r28
    b0b8:	df 93       	push	r29
    b0ba:	ec 01       	movw	r28, r24
    b0bc:	25 96       	adiw	r28, 0x05	; 5
    b0be:	8c 01       	movw	r16, r24
    b0c0:	0f 5d       	subi	r16, 0xDF	; 223
    b0c2:	1f 4f       	sbci	r17, 0xFF	; 255
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    b0c4:	8e e1       	ldi	r24, 0x1E	; 30
    b0c6:	e8 2e       	mov	r14, r24
    b0c8:	f1 2c       	mov	r15, r1
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    b0ca:	88 85       	ldd	r24, Y+8	; 0x08
    b0cc:	99 85       	ldd	r25, Y+9	; 0x09
    b0ce:	89 2b       	or	r24, r25
    b0d0:	c1 f0       	breq	.+48     	; 0xb102 <render_tile_explosions+0x54>
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
    b0d2:	ce 01       	movw	r24, r28
    b0d4:	04 97       	sbiw	r24, 0x04	; 4
    b0d6:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b0da:	9c 01       	movw	r18, r24
			if (ta->anims[i].anim.looped)
    b0dc:	48 81       	ld	r20, Y
    b0de:	88 85       	ldd	r24, Y+8	; 0x08
    b0e0:	99 85       	ldd	r25, Y+9	; 0x09
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b0e2:	b7 01       	movw	r22, r14
    b0e4:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b0e8:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim);
			if (ta->anims[i].anim.looped)
    b0ea:	44 23       	and	r20, r20
    b0ec:	39 f0       	breq	.+14     	; 0xb0fc <render_tile_explosions+0x4e>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    b0ee:	40 e0       	ldi	r20, 0x00	; 0
    b0f0:	50 e0       	ldi	r21, 0x00	; 0
    b0f2:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
				ta->anims[i].tile_index = 0;
    b0f6:	19 86       	std	Y+9, r1	; 0x09
    b0f8:	18 86       	std	Y+8, r1	; 0x08
    b0fa:	03 c0       	rjmp	.+6      	; 0xb102 <render_tile_explosions+0x54>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    b0fc:	a9 01       	movw	r20, r18
    b0fe:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
    b102:	2e 96       	adiw	r28, 0x0e	; 14

void render_tile_explosions(TileAnimations* ta)
{	
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    b104:	c0 17       	cp	r28, r16
    b106:	d1 07       	cpc	r29, r17
    b108:	01 f7       	brne	.-64     	; 0xb0ca <render_tile_explosions+0x1c>
						(const char*) map
				);
			}
		}
	}
}
    b10a:	df 91       	pop	r29
    b10c:	cf 91       	pop	r28
    b10e:	1f 91       	pop	r17
    b110:	0f 91       	pop	r16
    b112:	ff 90       	pop	r15
    b114:	ef 90       	pop	r14
    b116:	08 95       	ret

0000b118 <render_scope>:

u8 render_scope(TileAnimation* ta)
{
    b118:	cf 93       	push	r28
    b11a:	df 93       	push	r29
    b11c:	ec 01       	movw	r28, r24
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
    b11e:	0e 94 13 53 	call	0xa626	; 0xa626 <LBGetNextFrameReverse>
    b122:	9c 01       	movw	r18, r24
	if (ta->anim.looped)
    b124:	4c 81       	ldd	r20, Y+4	; 0x04
    b126:	8c 85       	ldd	r24, Y+12	; 0x0c
    b128:	9d 85       	ldd	r25, Y+13	; 0x0d
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b12a:	6e e1       	ldi	r22, 0x1E	; 30
    b12c:	70 e0       	ldi	r23, 0x00	; 0
    b12e:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b132:	6d 5f       	subi	r22, 0xFD	; 253
u8 render_scope(TileAnimation* ta)
{
	char *map;
	
	map = LBGetNextFrameReverse(&ta->anim);
	if (ta->anim.looped)
    b134:	44 23       	and	r20, r20
    b136:	19 f0       	breq	.+6      	; 0xb13e <render_scope+0x26>
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, map_water);
    b138:	48 ee       	ldi	r20, 0xE8	; 232
    b13a:	5d e7       	ldi	r21, 0x7D	; 125
    b13c:	01 c0       	rjmp	.+2      	; 0xb140 <render_scope+0x28>
	}
	else
	{
		DrawMap2(ta->tile_index % 30, 3 + ta->tile_index / 30, (const char*) map);
    b13e:	a9 01       	movw	r20, r18
    b140:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	}
	return ta->anim.looped;
}
    b144:	8c 81       	ldd	r24, Y+4	; 0x04
    b146:	df 91       	pop	r29
    b148:	cf 91       	pop	r28
    b14a:	08 95       	ret

0000b14c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    b14c:	1f 93       	push	r17
    b14e:	cf 93       	push	r28
    b150:	df 93       	push	r29
    b152:	ec 01       	movw	r28, r24
    b154:	16 2f       	mov	r17, r22
	char* t_map = 0;
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
    b156:	8a 89       	ldd	r24, Y+18	; 0x12
    b158:	80 ff       	sbrs	r24, 0
    b15a:	17 c0       	rjmp	.+46     	; 0xb18a <tank_map+0x3e>
	{
		t_map = LBGetNextFrame(&player->exp_anim);
    b15c:	ce 01       	movw	r24, r28
    b15e:	89 59       	subi	r24, 0x99	; 153
    b160:	9f 4f       	sbci	r25, 0xFF	; 255
    b162:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
		t_flags = 0;
		if (player->exp_anim.looped)
    b166:	fe 01       	movw	r30, r28
    b168:	e5 59       	subi	r30, 0x95	; 149
    b16a:	ff 4f       	sbci	r31, 0xFF	; 255
    b16c:	20 81       	ld	r18, Z
    b16e:	22 23       	and	r18, r18
    b170:	09 f4       	brne	.+2      	; 0xb174 <tank_map+0x28>
    b172:	4a c0       	rjmp	.+148    	; 0xb208 <tank_map+0xbc>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    b174:	8a 89       	ldd	r24, Y+18	; 0x12
    b176:	91 e0       	ldi	r25, 0x01	; 1
    b178:	98 27       	eor	r25, r24
    b17a:	9a 8b       	std	Y+18, r25	; 0x12
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    b17c:	ce 01       	movw	r24, r28
    b17e:	0e 94 09 56 	call	0xac12	; 0xac12 <player_spawn>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b182:	40 e0       	ldi	r20, 0x00	; 0
		if (player->exp_anim.looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    b184:	88 e9       	ldi	r24, 0x98	; 152
    b186:	94 e4       	ldi	r25, 0x44	; 68
    b188:	40 c0       	rjmp	.+128    	; 0xb20a <tank_map+0xbe>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    b18a:	9d 89       	ldd	r25, Y+21	; 0x15
    b18c:	98 37       	cpi	r25, 0x78	; 120
    b18e:	11 f0       	breq	.+4      	; 0xb194 <tank_map+0x48>
		{
			player->grace_frame++;
    b190:	9f 5f       	subi	r25, 0xFF	; 255
    b192:	9d 8b       	std	Y+21, r25	; 0x15
		}
		switch (player->shared.direction)
    b194:	98 81       	ld	r25, Y
    b196:	91 30       	cpi	r25, 0x01	; 1
    b198:	61 f0       	breq	.+24     	; 0xb1b2 <tank_map+0x66>
    b19a:	b0 f0       	brcs	.+44     	; 0xb1c8 <tank_map+0x7c>
    b19c:	92 30       	cpi	r25, 0x02	; 2
    b19e:	69 f0       	breq	.+26     	; 0xb1ba <tank_map+0x6e>
    b1a0:	93 30       	cpi	r25, 0x03	; 3
    b1a2:	91 f4       	brne	.+36     	; 0xb1c8 <tank_map+0x7c>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
    b1a4:	ce 01       	movw	r24, r28
    b1a6:	85 5a       	subi	r24, 0xA5	; 165
    b1a8:	9f 4f       	sbci	r25, 0xFF	; 255
    b1aa:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b1ae:	41 e0       	ldi	r20, 0x01	; 1
    b1b0:	11 c0       	rjmp	.+34     	; 0xb1d4 <tank_map+0x88>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim); t_flags = 0; break;
    b1b2:	ce 01       	movw	r24, r28
    b1b4:	85 5a       	subi	r24, 0xA5	; 165
    b1b6:	9f 4f       	sbci	r25, 0xFF	; 255
    b1b8:	0a c0       	rjmp	.+20     	; 0xb1ce <tank_map+0x82>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim); t_flags = SPRITE_FLIP_Y; break;
    b1ba:	ce 01       	movw	r24, r28
    b1bc:	81 5b       	subi	r24, 0xB1	; 177
    b1be:	9f 4f       	sbci	r25, 0xFF	; 255
    b1c0:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b1c4:	42 e0       	ldi	r20, 0x02	; 2
    b1c6:	06 c0       	rjmp	.+12     	; 0xb1d4 <tank_map+0x88>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim); t_flags = 0; break;
    b1c8:	ce 01       	movw	r24, r28
    b1ca:	81 5b       	subi	r24, 0xB1	; 177
    b1cc:	9f 4f       	sbci	r25, 0xFF	; 255
    b1ce:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b1d2:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
    b1d4:	2d 89       	ldd	r18, Y+21	; 0x15
    b1d6:	28 37       	cpi	r18, 0x78	; 120
    b1d8:	31 f0       	breq	.+12     	; 0xb1e6 <tank_map+0x9a>
    b1da:	20 91 0d 0c 	lds	r18, 0x0C0D
    b1de:	22 23       	and	r18, r18
    b1e0:	11 f0       	breq	.+4      	; 0xb1e6 <tank_map+0x9a>
		{
			t_map = (char*) map_tank_blank;
    b1e2:	88 e9       	ldi	r24, 0x98	; 152
    b1e4:	94 e4       	ldi	r25, 0x44	; 68
		}
		game.toggle_counter--;
    b1e6:	20 91 0c 0c 	lds	r18, 0x0C0C
    b1ea:	21 50       	subi	r18, 0x01	; 1
		if (game.toggle_counter == 0)
    b1ec:	19 f0       	breq	.+6      	; 0xb1f4 <tank_map+0xa8>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (game.toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		game.toggle_counter--;
    b1ee:	20 93 0c 0c 	sts	0x0C0C, r18
    b1f2:	0b c0       	rjmp	.+22     	; 0xb20a <tank_map+0xbe>
		if (game.toggle_counter == 0)
		{
			game.toggle_counter = FRAMES_PER_BLANK;
    b1f4:	24 e1       	ldi	r18, 0x14	; 20
    b1f6:	20 93 0c 0c 	sts	0x0C0C, r18
			game.toggle_blank = game.toggle_blank ^ 1;
    b1fa:	30 91 0d 0c 	lds	r19, 0x0C0D
    b1fe:	21 e0       	ldi	r18, 0x01	; 1
    b200:	23 27       	eor	r18, r19
    b202:	20 93 0d 0c 	sts	0x0C0D, r18
    b206:	01 c0       	rjmp	.+2      	; 0xb20a <tank_map+0xbe>
	u8 t_flags = 0;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim);
		t_flags = 0;
    b208:	40 e0       	ldi	r20, 0x00	; 0
		{
			game.toggle_counter = FRAMES_PER_BLANK;
			game.toggle_blank = game.toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    b20a:	bc 01       	movw	r22, r24
    b20c:	81 2f       	mov	r24, r17
    b20e:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    b212:	84 e0       	ldi	r24, 0x04	; 4
    b214:	81 0f       	add	r24, r17
    b216:	df 91       	pop	r29
    b218:	cf 91       	pop	r28
    b21a:	1f 91       	pop	r17
    b21c:	08 95       	ret

0000b21e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    b21e:	cf 93       	push	r28
    b220:	c6 2f       	mov	r28, r22
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    b222:	fc 01       	movw	r30, r24
    b224:	24 a9       	ldd	r18, Z+52	; 0x34
    b226:	22 23       	and	r18, r18
    b228:	d9 f0       	breq	.+54     	; 0xb260 <shot_map+0x42>
		{
			switch (shot->shared.direction)
    b22a:	21 a5       	ldd	r18, Z+41	; 0x29
    b22c:	21 30       	cpi	r18, 0x01	; 1
    b22e:	59 f0       	breq	.+22     	; 0xb246 <shot_map+0x28>
    b230:	a8 f0       	brcs	.+42     	; 0xb25c <shot_map+0x3e>
    b232:	22 30       	cpi	r18, 0x02	; 2
    b234:	71 f0       	breq	.+28     	; 0xb252 <shot_map+0x34>
    b236:	23 30       	cpi	r18, 0x03	; 3
    b238:	89 f4       	brne	.+34     	; 0xb25c <shot_map+0x3e>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
    b23a:	8d 5b       	subi	r24, 0xBD	; 189
    b23c:	9f 4f       	sbci	r25, 0xFF	; 255
    b23e:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b242:	41 e0       	ldi	r20, 0x01	; 1
    b244:	10 c0       	rjmp	.+32     	; 0xb266 <shot_map+0x48>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = 0; break;
    b246:	8d 5b       	subi	r24, 0xBD	; 189
    b248:	9f 4f       	sbci	r25, 0xFF	; 255
    b24a:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b24e:	40 e0       	ldi	r20, 0x00	; 0
    b250:	0a c0       	rjmp	.+20     	; 0xb266 <shot_map+0x48>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = SPRITE_FLIP_Y; break;
    b252:	c7 96       	adiw	r24, 0x37	; 55
    b254:	0e 94 ee 52 	call	0xa5dc	; 0xa5dc <LBGetNextFrame>
    b258:	42 e0       	ldi	r20, 0x02	; 2
    b25a:	05 c0       	rjmp	.+10     	; 0xb266 <shot_map+0x48>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim); s_flags = 0; break;
    b25c:	c7 96       	adiw	r24, 0x37	; 55
    b25e:	f5 cf       	rjmp	.-22     	; 0xb24a <shot_map+0x2c>
    b260:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    b262:	88 e9       	ldi	r24, 0x98	; 152
    b264:	94 e4       	ldi	r25, 0x44	; 68
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    b266:	bc 01       	movw	r22, r24
    b268:	8c 2f       	mov	r24, r28
    b26a:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    b26e:	81 e0       	ldi	r24, 0x01	; 1
    b270:	8c 0f       	add	r24, r28
    b272:	cf 91       	pop	r28
    b274:	08 95       	ret

0000b276 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    b276:	fc 01       	movw	r30, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    b278:	80 81       	ld	r24, Z
    b27a:	81 11       	cpse	r24, r1
    b27c:	0d c0       	rjmp	.+26     	; 0xb298 <recoil_sprite+0x22>
	{
		tile = sprite->y / FP_8 + 1;
    b27e:	86 81       	ldd	r24, Z+6	; 0x06
    b280:	97 81       	ldd	r25, Z+7	; 0x07
    b282:	36 e0       	ldi	r19, 0x06	; 6
    b284:	96 95       	lsr	r25
    b286:	87 95       	ror	r24
    b288:	3a 95       	dec	r19
    b28a:	e1 f7       	brne	.-8      	; 0xb284 <recoil_sprite+0xe>
    b28c:	8f 5f       	subi	r24, 0xFF	; 255
		sprite->y = tile * FP_8;
    b28e:	20 e4       	ldi	r18, 0x40	; 64
    b290:	82 9f       	mul	r24, r18
    b292:	c0 01       	movw	r24, r0
    b294:	11 24       	eor	r1, r1
    b296:	0d c0       	rjmp	.+26     	; 0xb2b2 <recoil_sprite+0x3c>
	}
	else if (sprite->direction == D_RIGHT)
    b298:	81 30       	cpi	r24, 0x01	; 1
    b29a:	29 f4       	brne	.+10     	; 0xb2a6 <recoil_sprite+0x30>
	{
		tile = sprite->x / FP_8;
    b29c:	84 81       	ldd	r24, Z+4	; 0x04
    b29e:	95 81       	ldd	r25, Z+5	; 0x05
		sprite->x = tile * FP_8;
    b2a0:	80 7c       	andi	r24, 0xC0	; 192
    b2a2:	9f 73       	andi	r25, 0x3F	; 63
    b2a4:	15 c0       	rjmp	.+42     	; 0xb2d0 <recoil_sprite+0x5a>
	}
	else if (sprite->direction == D_DOWN)
    b2a6:	82 30       	cpi	r24, 0x02	; 2
    b2a8:	39 f4       	brne	.+14     	; 0xb2b8 <recoil_sprite+0x42>
	{
		tile = sprite->y / FP_8;
    b2aa:	86 81       	ldd	r24, Z+6	; 0x06
    b2ac:	97 81       	ldd	r25, Z+7	; 0x07
		sprite->y = tile * FP_8;
    b2ae:	80 7c       	andi	r24, 0xC0	; 192
    b2b0:	9f 73       	andi	r25, 0x3F	; 63
    b2b2:	97 83       	std	Z+7, r25	; 0x07
    b2b4:	86 83       	std	Z+6, r24	; 0x06
    b2b6:	0e c0       	rjmp	.+28     	; 0xb2d4 <recoil_sprite+0x5e>
	}
	else
	{
		tile = sprite->x / FP_8 + 1;
    b2b8:	84 81       	ldd	r24, Z+4	; 0x04
    b2ba:	95 81       	ldd	r25, Z+5	; 0x05
    b2bc:	26 e0       	ldi	r18, 0x06	; 6
    b2be:	96 95       	lsr	r25
    b2c0:	87 95       	ror	r24
    b2c2:	2a 95       	dec	r18
    b2c4:	e1 f7       	brne	.-8      	; 0xb2be <recoil_sprite+0x48>
    b2c6:	8f 5f       	subi	r24, 0xFF	; 255
		sprite->x = tile * FP_8;
    b2c8:	20 e4       	ldi	r18, 0x40	; 64
    b2ca:	82 9f       	mul	r24, r18
    b2cc:	c0 01       	movw	r24, r0
    b2ce:	11 24       	eor	r1, r1
    b2d0:	95 83       	std	Z+5, r25	; 0x05
    b2d2:	84 83       	std	Z+4, r24	; 0x04
	}
	sprite->recoiled = 1;
    b2d4:	81 e0       	ldi	r24, 0x01	; 1
    b2d6:	81 83       	std	Z+1, r24	; 0x01
    b2d8:	08 95       	ret

0000b2da <recoil_sprite_fine>:
}

void recoil_sprite_fine(Player* p, SpriteShared* sprite)
{	
    b2da:	cf 93       	push	r28
    b2dc:	df 93       	push	r29
    b2de:	eb 01       	movw	r28, r22
	u16 speed = get_delta(p, sprite);
    b2e0:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
	
	if (sprite->direction == D_UP)
    b2e4:	28 81       	ld	r18, Y
    b2e6:	21 11       	cpse	r18, r1
    b2e8:	05 c0       	rjmp	.+10     	; 0xb2f4 <recoil_sprite_fine+0x1a>
	{
		sprite->y += speed;
    b2ea:	2e 81       	ldd	r18, Y+6	; 0x06
    b2ec:	3f 81       	ldd	r19, Y+7	; 0x07
    b2ee:	82 0f       	add	r24, r18
    b2f0:	93 1f       	adc	r25, r19
    b2f2:	11 c0       	rjmp	.+34     	; 0xb316 <recoil_sprite_fine+0x3c>
	}
	else if (sprite->direction == D_RIGHT)
    b2f4:	21 30       	cpi	r18, 0x01	; 1
    b2f6:	39 f4       	brne	.+14     	; 0xb306 <recoil_sprite_fine+0x2c>
	{
		sprite->x -= speed;
    b2f8:	2c 81       	ldd	r18, Y+4	; 0x04
    b2fa:	3d 81       	ldd	r19, Y+5	; 0x05
    b2fc:	a9 01       	movw	r20, r18
    b2fe:	48 1b       	sub	r20, r24
    b300:	59 0b       	sbc	r21, r25
    b302:	ca 01       	movw	r24, r20
    b304:	0f c0       	rjmp	.+30     	; 0xb324 <recoil_sprite_fine+0x4a>
	}
	else if (sprite->direction == D_DOWN)
    b306:	22 30       	cpi	r18, 0x02	; 2
    b308:	49 f4       	brne	.+18     	; 0xb31c <recoil_sprite_fine+0x42>
	{
		sprite->y -= speed;
    b30a:	2e 81       	ldd	r18, Y+6	; 0x06
    b30c:	3f 81       	ldd	r19, Y+7	; 0x07
    b30e:	a9 01       	movw	r20, r18
    b310:	48 1b       	sub	r20, r24
    b312:	59 0b       	sbc	r21, r25
    b314:	ca 01       	movw	r24, r20
    b316:	9f 83       	std	Y+7, r25	; 0x07
    b318:	8e 83       	std	Y+6, r24	; 0x06
    b31a:	06 c0       	rjmp	.+12     	; 0xb328 <recoil_sprite_fine+0x4e>
	}
	else
	{
		sprite->x += speed;
    b31c:	2c 81       	ldd	r18, Y+4	; 0x04
    b31e:	3d 81       	ldd	r19, Y+5	; 0x05
    b320:	82 0f       	add	r24, r18
    b322:	93 1f       	adc	r25, r19
    b324:	9d 83       	std	Y+5, r25	; 0x05
    b326:	8c 83       	std	Y+4, r24	; 0x04
	}
	sprite->recoiled = 1;
    b328:	81 e0       	ldi	r24, 0x01	; 1
    b32a:	89 83       	std	Y+1, r24	; 0x01
}
    b32c:	df 91       	pop	r29
    b32e:	cf 91       	pop	r28
    b330:	08 95       	ret

0000b332 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b332:	8d 54       	subi	r24, 0x4D	; 77
    b334:	93 4f       	sbci	r25, 0xF3	; 243
    b336:	fc 01       	movw	r30, r24
    b338:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b33a:	81 30       	cpi	r24, 0x01	; 1
    b33c:	31 f0       	breq	.+12     	; 0xb34a <solid_square_tile+0x18>
	if (tile == L_METAL) return tile;
    b33e:	82 30       	cpi	r24, 0x02	; 2
    b340:	31 f0       	breq	.+12     	; 0xb34e <solid_square_tile+0x1c>
	if (tile == L_FENCE) return tile;
    b342:	87 33       	cpi	r24, 0x37	; 55
    b344:	31 f0       	breq	.+12     	; 0xb352 <solid_square_tile+0x20>

	return 0;
    b346:	80 e0       	ldi	r24, 0x00	; 0
    b348:	08 95       	ret
    b34a:	81 e0       	ldi	r24, 0x01	; 1
    b34c:	08 95       	ret
    b34e:	82 e0       	ldi	r24, 0x02	; 2
    b350:	08 95       	ret
    b352:	87 e3       	ldi	r24, 0x37	; 55
}
    b354:	08 95       	ret

0000b356 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    b356:	8d 54       	subi	r24, 0x4D	; 77
    b358:	93 4f       	sbci	r25, 0xF3	; 243
    b35a:	fc 01       	movw	r30, r24
    b35c:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    b35e:	83 30       	cpi	r24, 0x03	; 3
    b360:	41 f0       	breq	.+16     	; 0xb372 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    b362:	86 30       	cpi	r24, 0x06	; 6
    b364:	41 f0       	breq	.+16     	; 0xb376 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    b366:	84 30       	cpi	r24, 0x04	; 4
    b368:	41 f0       	breq	.+16     	; 0xb37a <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    b36a:	85 30       	cpi	r24, 0x05	; 5
    b36c:	41 f0       	breq	.+16     	; 0xb37e <solid_directional_tile+0x28>
	
	return 0;
    b36e:	80 e0       	ldi	r24, 0x00	; 0
    b370:	08 95       	ret
    b372:	83 e0       	ldi	r24, 0x03	; 3
    b374:	08 95       	ret
    b376:	86 e0       	ldi	r24, 0x06	; 6
    b378:	08 95       	ret
    b37a:	84 e0       	ldi	r24, 0x04	; 4
    b37c:	08 95       	ret
    b37e:	85 e0       	ldi	r24, 0x05	; 5
}
    b380:	08 95       	ret

0000b382 <solid_tile>:

u8 solid_tile(int tile_index)
{
    b382:	9c 01       	movw	r18, r24
	u8 tile = level.level_map[tile_index];
    b384:	fc 01       	movw	r30, r24
    b386:	ed 54       	subi	r30, 0x4D	; 77
    b388:	f3 4f       	sbci	r31, 0xF3	; 243
    b38a:	91 81       	ldd	r25, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    b38c:	91 30       	cpi	r25, 0x01	; 1
    b38e:	39 f0       	breq	.+14     	; 0xb39e <solid_tile+0x1c>
	if (tile == L_METAL) return tile;
    b390:	92 30       	cpi	r25, 0x02	; 2
    b392:	39 f0       	breq	.+14     	; 0xb3a2 <solid_tile+0x20>
	if (tile == L_FENCE) return tile;
    b394:	97 33       	cpi	r25, 0x37	; 55
    b396:	39 f0       	breq	.+14     	; 0xb3a6 <solid_tile+0x24>
	return solid_directional_tile(tile_index);
    b398:	c9 01       	movw	r24, r18
    b39a:	0c 94 ab 59 	jmp	0xb356	; 0xb356 <solid_directional_tile>
    b39e:	81 e0       	ldi	r24, 0x01	; 1
    b3a0:	08 95       	ret
    b3a2:	82 e0       	ldi	r24, 0x02	; 2
    b3a4:	08 95       	ret
    b3a6:	87 e3       	ldi	r24, 0x37	; 55
}
    b3a8:	08 95       	ret

0000b3aa <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u16 x, u16 y, u16 width, u16 height)
{
    b3aa:	2f 92       	push	r2
    b3ac:	3f 92       	push	r3
    b3ae:	4f 92       	push	r4
    b3b0:	5f 92       	push	r5
    b3b2:	6f 92       	push	r6
    b3b4:	7f 92       	push	r7
    b3b6:	8f 92       	push	r8
    b3b8:	9f 92       	push	r9
    b3ba:	af 92       	push	r10
    b3bc:	bf 92       	push	r11
    b3be:	cf 92       	push	r12
    b3c0:	df 92       	push	r13
    b3c2:	ef 92       	push	r14
    b3c4:	ff 92       	push	r15
    b3c6:	0f 93       	push	r16
    b3c8:	1f 93       	push	r17
    b3ca:	cf 93       	push	r28
    b3cc:	df 93       	push	r29
    b3ce:	cd b7       	in	r28, 0x3d	; 61
    b3d0:	de b7       	in	r29, 0x3e	; 62
    b3d2:	29 97       	sbiw	r28, 0x09	; 9
    b3d4:	0f b6       	in	r0, 0x3f	; 63
    b3d6:	f8 94       	cli
    b3d8:	de bf       	out	0x3e, r29	; 62
    b3da:	0f be       	out	0x3f, r0	; 63
    b3dc:	cd bf       	out	0x3d, r28	; 61
    b3de:	1b 01       	movw	r2, r22
    b3e0:	4a 01       	movw	r8, r20
    b3e2:	39 01       	movw	r6, r18
	u8 tile = level.level_map[tile_index];
    b3e4:	fc 01       	movw	r30, r24
    b3e6:	ed 54       	subi	r30, 0x4D	; 77
    b3e8:	f3 4f       	sbci	r31, 0xF3	; 243
    b3ea:	21 81       	ldd	r18, Z+1	; 0x01
    b3ec:	29 83       	std	Y+1, r18	; 0x01
	u16 tile_x = (tile_index % 30) * FP_8;
    b3ee:	6e e1       	ldi	r22, 0x1E	; 30
    b3f0:	70 e0       	ldi	r23, 0x00	; 0
    b3f2:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b3f6:	dc 01       	movw	r26, r24
    b3f8:	86 e0       	ldi	r24, 0x06	; 6
    b3fa:	aa 0f       	add	r26, r26
    b3fc:	bb 1f       	adc	r27, r27
    b3fe:	8a 95       	dec	r24
    b400:	e1 f7       	brne	.-8      	; 0xb3fa <collides_directional_tile+0x50>
    b402:	b9 87       	std	Y+9, r27	; 0x09
    b404:	a8 87       	std	Y+8, r26	; 0x08
	u16 tile_y = (tile_index / 30 + 3) * FP_8;
    b406:	6d 5f       	subi	r22, 0xFD	; 253
    b408:	7f 4f       	sbci	r23, 0xFF	; 255
    b40a:	2b 01       	movw	r4, r22
    b40c:	96 e0       	ldi	r25, 0x06	; 6
    b40e:	44 0c       	add	r4, r4
    b410:	55 1c       	adc	r5, r5
    b412:	9a 95       	dec	r25
    b414:	e1 f7       	brne	.-8      	; 0xb40e <collides_directional_tile+0x64>

    if ((tile == L_TL) || (tile == L_BR))
    b416:	23 30       	cpi	r18, 0x03	; 3
    b418:	19 f0       	breq	.+6      	; 0xb420 <collides_directional_tile+0x76>
    b41a:	26 30       	cpi	r18, 0x06	; 6
    b41c:	09 f0       	breq	.+2      	; 0xb420 <collides_directional_tile+0x76>
    b41e:	47 c0       	rjmp	.+142    	; 0xb4ae <collides_directional_tile+0x104>
    b420:	08 50       	subi	r16, 0x08	; 8
    b422:	11 09       	sbc	r17, r1
    {
        if (LBLineIntersect(tile_x, tile_y+FP_8-FP_1, tile_x+FP_8-FP_1, tile_y, x, y, x, y+height-FP_1)) return tile;
    b424:	f8 01       	movw	r30, r16
    b426:	e8 0d       	add	r30, r8
    b428:	f9 1d       	adc	r31, r9
    b42a:	fb 83       	std	Y+3, r31	; 0x03
    b42c:	ea 83       	std	Y+2, r30	; 0x02
    b42e:	28 85       	ldd	r18, Y+8	; 0x08
    b430:	39 85       	ldd	r19, Y+9	; 0x09
    b432:	28 5c       	subi	r18, 0xC8	; 200
    b434:	3f 4f       	sbci	r19, 0xFF	; 255
    b436:	3d 83       	std	Y+5, r19	; 0x05
    b438:	2c 83       	std	Y+4, r18	; 0x04
    b43a:	c2 01       	movw	r24, r4
    b43c:	c8 96       	adiw	r24, 0x38	; 56
    b43e:	9f 83       	std	Y+7, r25	; 0x07
    b440:	8e 83       	std	Y+6, r24	; 0x06
    b442:	5f 01       	movw	r10, r30
    b444:	61 01       	movw	r12, r2
    b446:	74 01       	movw	r14, r8
    b448:	81 01       	movw	r16, r2
    b44a:	92 01       	movw	r18, r4
    b44c:	4c 81       	ldd	r20, Y+4	; 0x04
    b44e:	5d 81       	ldd	r21, Y+5	; 0x05
    b450:	bc 01       	movw	r22, r24
    b452:	88 85       	ldd	r24, Y+8	; 0x08
    b454:	99 85       	ldd	r25, Y+9	; 0x09
    b456:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b45a:	81 11       	cpse	r24, r1
    b45c:	7c c0       	rjmp	.+248    	; 0xb556 <collides_directional_tile+0x1ac>
    b45e:	98 e0       	ldi	r25, 0x08	; 8
    b460:	69 1a       	sub	r6, r25
    b462:	71 08       	sbc	r7, r1
        if (LBLineIntersect(tile_x, tile_y+FP_8-FP_1, tile_x+FP_8-FP_1, tile_y, x, y, x+width-FP_1, y)) return tile;
    b464:	62 0c       	add	r6, r2
    b466:	73 1c       	adc	r7, r3
    b468:	54 01       	movw	r10, r8
    b46a:	63 01       	movw	r12, r6
    b46c:	92 01       	movw	r18, r4
    b46e:	4c 81       	ldd	r20, Y+4	; 0x04
    b470:	5d 81       	ldd	r21, Y+5	; 0x05
    b472:	6e 81       	ldd	r22, Y+6	; 0x06
    b474:	7f 81       	ldd	r23, Y+7	; 0x07
    b476:	88 85       	ldd	r24, Y+8	; 0x08
    b478:	99 85       	ldd	r25, Y+9	; 0x09
    b47a:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b47e:	81 11       	cpse	r24, r1
    b480:	6a c0       	rjmp	.+212    	; 0xb556 <collides_directional_tile+0x1ac>
        if (LBLineIntersect(tile_x, tile_y+FP_8-FP_1, tile_x+FP_8-FP_1, tile_y, x+width-FP_1, y, x+width-FP_1, y+height-FP_1)) return tile;
    b482:	aa 80       	ldd	r10, Y+2	; 0x02
    b484:	bb 80       	ldd	r11, Y+3	; 0x03
    b486:	83 01       	movw	r16, r6
    b488:	92 01       	movw	r18, r4
    b48a:	4c 81       	ldd	r20, Y+4	; 0x04
    b48c:	5d 81       	ldd	r21, Y+5	; 0x05
    b48e:	6e 81       	ldd	r22, Y+6	; 0x06
    b490:	7f 81       	ldd	r23, Y+7	; 0x07
    b492:	88 85       	ldd	r24, Y+8	; 0x08
    b494:	99 85       	ldd	r25, Y+9	; 0x09
    b496:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b49a:	81 11       	cpse	r24, r1
    b49c:	5c c0       	rjmp	.+184    	; 0xb556 <collides_directional_tile+0x1ac>
        if (LBLineIntersect(tile_x, tile_y+FP_8-FP_1, tile_x+FP_8-FP_1, tile_y, x, y+height-FP_1, x+width-FP_1, y+height-FP_1)) return tile;
    b49e:	75 01       	movw	r14, r10
    b4a0:	81 01       	movw	r16, r2
    b4a2:	92 01       	movw	r18, r4
    b4a4:	4c 81       	ldd	r20, Y+4	; 0x04
    b4a6:	5d 81       	ldd	r21, Y+5	; 0x05
    b4a8:	6e 81       	ldd	r22, Y+6	; 0x06
    b4aa:	7f 81       	ldd	r23, Y+7	; 0x07
    b4ac:	4b c0       	rjmp	.+150    	; 0xb544 <collides_directional_tile+0x19a>
    }
    else if ((tile == L_TR) || (tile == L_BL))
    b4ae:	89 81       	ldd	r24, Y+1	; 0x01
    b4b0:	84 50       	subi	r24, 0x04	; 4
    b4b2:	82 30       	cpi	r24, 0x02	; 2
    b4b4:	08 f0       	brcs	.+2      	; 0xb4b8 <collides_directional_tile+0x10e>
    b4b6:	4d c0       	rjmp	.+154    	; 0xb552 <collides_directional_tile+0x1a8>
    b4b8:	08 50       	subi	r16, 0x08	; 8
    b4ba:	11 09       	sbc	r17, r1
    {
        if (LBLineIntersect(tile_x, tile_y, tile_x+FP_8-FP_1, tile_y+FP_8-FP_1, x, y, x, y+height-FP_1)) return tile;
    b4bc:	d8 01       	movw	r26, r16
    b4be:	a8 0d       	add	r26, r8
    b4c0:	b9 1d       	adc	r27, r9
    b4c2:	bb 83       	std	Y+3, r27	; 0x03
    b4c4:	aa 83       	std	Y+2, r26	; 0x02
    b4c6:	f2 01       	movw	r30, r4
    b4c8:	f8 96       	adiw	r30, 0x38	; 56
    b4ca:	fd 83       	std	Y+5, r31	; 0x05
    b4cc:	ec 83       	std	Y+4, r30	; 0x04
    b4ce:	28 85       	ldd	r18, Y+8	; 0x08
    b4d0:	39 85       	ldd	r19, Y+9	; 0x09
    b4d2:	28 5c       	subi	r18, 0xC8	; 200
    b4d4:	3f 4f       	sbci	r19, 0xFF	; 255
    b4d6:	3f 83       	std	Y+7, r19	; 0x07
    b4d8:	2e 83       	std	Y+6, r18	; 0x06
    b4da:	5d 01       	movw	r10, r26
    b4dc:	61 01       	movw	r12, r2
    b4de:	74 01       	movw	r14, r8
    b4e0:	81 01       	movw	r16, r2
    b4e2:	9f 01       	movw	r18, r30
    b4e4:	4e 81       	ldd	r20, Y+6	; 0x06
    b4e6:	5f 81       	ldd	r21, Y+7	; 0x07
    b4e8:	b2 01       	movw	r22, r4
    b4ea:	88 85       	ldd	r24, Y+8	; 0x08
    b4ec:	99 85       	ldd	r25, Y+9	; 0x09
    b4ee:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b4f2:	81 11       	cpse	r24, r1
    b4f4:	30 c0       	rjmp	.+96     	; 0xb556 <collides_directional_tile+0x1ac>
    b4f6:	38 e0       	ldi	r19, 0x08	; 8
    b4f8:	63 1a       	sub	r6, r19
    b4fa:	71 08       	sbc	r7, r1
        if (LBLineIntersect(tile_x, tile_y, tile_x+FP_8-FP_1, tile_y+FP_8-FP_1, x, y, x+width-FP_1, y)) return tile;
    b4fc:	62 0c       	add	r6, r2
    b4fe:	73 1c       	adc	r7, r3
    b500:	54 01       	movw	r10, r8
    b502:	63 01       	movw	r12, r6
    b504:	2c 81       	ldd	r18, Y+4	; 0x04
    b506:	3d 81       	ldd	r19, Y+5	; 0x05
    b508:	4e 81       	ldd	r20, Y+6	; 0x06
    b50a:	5f 81       	ldd	r21, Y+7	; 0x07
    b50c:	b2 01       	movw	r22, r4
    b50e:	88 85       	ldd	r24, Y+8	; 0x08
    b510:	99 85       	ldd	r25, Y+9	; 0x09
    b512:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b516:	81 11       	cpse	r24, r1
    b518:	1e c0       	rjmp	.+60     	; 0xb556 <collides_directional_tile+0x1ac>
        if (LBLineIntersect(tile_x, tile_y, tile_x+FP_8-FP_1, tile_y+FP_8-FP_1, x+width-FP_1, y, x+width-FP_1, y+height-FP_1)) return tile;
    b51a:	aa 80       	ldd	r10, Y+2	; 0x02
    b51c:	bb 80       	ldd	r11, Y+3	; 0x03
    b51e:	83 01       	movw	r16, r6
    b520:	2c 81       	ldd	r18, Y+4	; 0x04
    b522:	3d 81       	ldd	r19, Y+5	; 0x05
    b524:	4e 81       	ldd	r20, Y+6	; 0x06
    b526:	5f 81       	ldd	r21, Y+7	; 0x07
    b528:	b2 01       	movw	r22, r4
    b52a:	88 85       	ldd	r24, Y+8	; 0x08
    b52c:	99 85       	ldd	r25, Y+9	; 0x09
    b52e:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b532:	81 11       	cpse	r24, r1
    b534:	10 c0       	rjmp	.+32     	; 0xb556 <collides_directional_tile+0x1ac>
        if (LBLineIntersect(tile_x, tile_y, tile_x+FP_8-FP_1, tile_y+FP_8-FP_1, x, y+height-FP_1, x+width-FP_1, y+height-FP_1)) return tile;
    b536:	75 01       	movw	r14, r10
    b538:	81 01       	movw	r16, r2
    b53a:	2c 81       	ldd	r18, Y+4	; 0x04
    b53c:	3d 81       	ldd	r19, Y+5	; 0x05
    b53e:	4e 81       	ldd	r20, Y+6	; 0x06
    b540:	5f 81       	ldd	r21, Y+7	; 0x07
    b542:	b2 01       	movw	r22, r4
    b544:	88 85       	ldd	r24, Y+8	; 0x08
    b546:	99 85       	ldd	r25, Y+9	; 0x09
    b548:	0e 94 ef 53 	call	0xa7de	; 0xa7de <LBLineIntersect>
    b54c:	81 11       	cpse	r24, r1
    b54e:	03 c0       	rjmp	.+6      	; 0xb556 <collides_directional_tile+0x1ac>
    b550:	03 c0       	rjmp	.+6      	; 0xb558 <collides_directional_tile+0x1ae>
    }
	
	return 0;
    b552:	80 e0       	ldi	r24, 0x00	; 0
    b554:	01 c0       	rjmp	.+2      	; 0xb558 <collides_directional_tile+0x1ae>
    b556:	89 81       	ldd	r24, Y+1	; 0x01
}
    b558:	29 96       	adiw	r28, 0x09	; 9
    b55a:	0f b6       	in	r0, 0x3f	; 63
    b55c:	f8 94       	cli
    b55e:	de bf       	out	0x3e, r29	; 62
    b560:	0f be       	out	0x3f, r0	; 63
    b562:	cd bf       	out	0x3d, r28	; 61
    b564:	df 91       	pop	r29
    b566:	cf 91       	pop	r28
    b568:	1f 91       	pop	r17
    b56a:	0f 91       	pop	r16
    b56c:	ff 90       	pop	r15
    b56e:	ef 90       	pop	r14
    b570:	df 90       	pop	r13
    b572:	cf 90       	pop	r12
    b574:	bf 90       	pop	r11
    b576:	af 90       	pop	r10
    b578:	9f 90       	pop	r9
    b57a:	8f 90       	pop	r8
    b57c:	7f 90       	pop	r7
    b57e:	6f 90       	pop	r6
    b580:	5f 90       	pop	r5
    b582:	4f 90       	pop	r4
    b584:	3f 90       	pop	r3
    b586:	2f 90       	pop	r2
    b588:	08 95       	ret

0000b58a <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    b58a:	8f 92       	push	r8
    b58c:	9f 92       	push	r9
    b58e:	af 92       	push	r10
    b590:	bf 92       	push	r11
    b592:	cf 92       	push	r12
    b594:	df 92       	push	r13
    b596:	ef 92       	push	r14
    b598:	ff 92       	push	r15
    b59a:	0f 93       	push	r16
    b59c:	1f 93       	push	r17
    b59e:	cf 93       	push	r28
    b5a0:	df 93       	push	r29
    b5a2:	4c 01       	movw	r8, r24
    b5a4:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+FP_1,p->shared.y+FP_1,FP_16-FP_2,FP_16-FP_2,shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4) &&
    b5a6:	ee 80       	ldd	r14, Y+6	; 0x06
    b5a8:	ff 80       	ldd	r15, Y+7	; 0x07
    b5aa:	80 e1       	ldi	r24, 0x10	; 16
    b5ac:	e8 0e       	add	r14, r24
    b5ae:	f1 1c       	adc	r15, r1
    b5b0:	0c 81       	ldd	r16, Y+4	; 0x04
    b5b2:	1d 81       	ldd	r17, Y+5	; 0x05
    b5b4:	00 5f       	subi	r16, 0xF0	; 240
    b5b6:	1f 4f       	sbci	r17, 0xFF	; 255
    b5b8:	f4 01       	movw	r30, r8
    b5ba:	66 81       	ldd	r22, Z+6	; 0x06
    b5bc:	77 81       	ldd	r23, Z+7	; 0x07
    b5be:	68 5f       	subi	r22, 0xF8	; 248
    b5c0:	7f 4f       	sbci	r23, 0xFF	; 255
    b5c2:	84 81       	ldd	r24, Z+4	; 0x04
    b5c4:	95 81       	ldd	r25, Z+5	; 0x05
    b5c6:	20 e2       	ldi	r18, 0x20	; 32
    b5c8:	a2 2e       	mov	r10, r18
    b5ca:	b1 2c       	mov	r11, r1
    b5cc:	30 e2       	ldi	r19, 0x20	; 32
    b5ce:	c3 2e       	mov	r12, r19
    b5d0:	d1 2c       	mov	r13, r1
    b5d2:	20 e7       	ldi	r18, 0x70	; 112
    b5d4:	30 e0       	ldi	r19, 0x00	; 0
    b5d6:	40 e7       	ldi	r20, 0x70	; 112
    b5d8:	50 e0       	ldi	r21, 0x00	; 0
    b5da:	08 96       	adiw	r24, 0x08	; 8
    b5dc:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b5e0:	88 23       	and	r24, r24
    b5e2:	51 f0       	breq	.+20     	; 0xb5f8 <player_shot+0x6e>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+FP_1,p->shared.y+FP_1,FP_16-FP_2,FP_16-FP_2,shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4) &&
    b5e4:	f4 01       	movw	r30, r8
    b5e6:	85 89       	ldd	r24, Z+21	; 0x15
    b5e8:	88 37       	cpi	r24, 0x78	; 120
    b5ea:	31 f4       	brne	.+12     	; 0xb5f8 <player_shot+0x6e>
		   p->grace_frame == FRAMES_PER_GRACE &&
    b5ec:	81 e0       	ldi	r24, 0x01	; 1
    b5ee:	2c 85       	ldd	r18, Y+12	; 0x0c
    b5f0:	3d 85       	ldd	r19, Y+13	; 0x0d
    b5f2:	21 34       	cpi	r18, 0x41	; 65
    b5f4:	31 05       	cpc	r19, r1
    b5f6:	08 f4       	brcc	.+2      	; 0xb5fa <player_shot+0x70>
    b5f8:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    b5fa:	df 91       	pop	r29
    b5fc:	cf 91       	pop	r28
    b5fe:	1f 91       	pop	r17
    b600:	0f 91       	pop	r16
    b602:	ff 90       	pop	r15
    b604:	ef 90       	pop	r14
    b606:	df 90       	pop	r13
    b608:	cf 90       	pop	r12
    b60a:	bf 90       	pop	r11
    b60c:	af 90       	pop	r10
    b60e:	9f 90       	pop	r9
    b610:	8f 90       	pop	r8
    b612:	08 95       	ret

0000b614 <turret_shot>:

u8 turret_shot(Turret* t, Shot* shot)
{
    b614:	af 92       	push	r10
    b616:	bf 92       	push	r11
    b618:	cf 92       	push	r12
    b61a:	df 92       	push	r13
    b61c:	ef 92       	push	r14
    b61e:	ff 92       	push	r15
    b620:	0f 93       	push	r16
    b622:	1f 93       	push	r17
    b624:	cf 93       	push	r28
    b626:	df 93       	push	r29
    b628:	ec 01       	movw	r28, r24
	return LBCollides(t->shared.x,t->shared.y,FP_8,FP_8,shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4) && t->lives > 0;
    b62a:	fb 01       	movw	r30, r22
    b62c:	e6 80       	ldd	r14, Z+6	; 0x06
    b62e:	f7 80       	ldd	r15, Z+7	; 0x07
    b630:	f0 e1       	ldi	r31, 0x10	; 16
    b632:	ef 0e       	add	r14, r31
    b634:	f1 1c       	adc	r15, r1
    b636:	fb 01       	movw	r30, r22
    b638:	04 81       	ldd	r16, Z+4	; 0x04
    b63a:	15 81       	ldd	r17, Z+5	; 0x05
    b63c:	00 5f       	subi	r16, 0xF0	; 240
    b63e:	1f 4f       	sbci	r17, 0xFF	; 255
    b640:	6e 81       	ldd	r22, Y+6	; 0x06
    b642:	7f 81       	ldd	r23, Y+7	; 0x07
    b644:	80 e2       	ldi	r24, 0x20	; 32
    b646:	a8 2e       	mov	r10, r24
    b648:	b1 2c       	mov	r11, r1
    b64a:	90 e2       	ldi	r25, 0x20	; 32
    b64c:	c9 2e       	mov	r12, r25
    b64e:	d1 2c       	mov	r13, r1
    b650:	20 e4       	ldi	r18, 0x40	; 64
    b652:	30 e0       	ldi	r19, 0x00	; 0
    b654:	40 e4       	ldi	r20, 0x40	; 64
    b656:	50 e0       	ldi	r21, 0x00	; 0
    b658:	8c 81       	ldd	r24, Y+4	; 0x04
    b65a:	9d 81       	ldd	r25, Y+5	; 0x05
    b65c:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
    b660:	88 23       	and	r24, r24
    b662:	39 f0       	breq	.+14     	; 0xb672 <turret_shot+0x5e>
    b664:	91 e0       	ldi	r25, 0x01	; 1
    b666:	88 85       	ldd	r24, Y+8	; 0x08
    b668:	81 11       	cpse	r24, r1
    b66a:	01 c0       	rjmp	.+2      	; 0xb66e <turret_shot+0x5a>
    b66c:	90 e0       	ldi	r25, 0x00	; 0
    b66e:	89 2f       	mov	r24, r25
    b670:	01 c0       	rjmp	.+2      	; 0xb674 <turret_shot+0x60>
    b672:	80 e0       	ldi	r24, 0x00	; 0
}
    b674:	df 91       	pop	r29
    b676:	cf 91       	pop	r28
    b678:	1f 91       	pop	r17
    b67a:	0f 91       	pop	r16
    b67c:	ff 90       	pop	r15
    b67e:	ef 90       	pop	r14
    b680:	df 90       	pop	r13
    b682:	cf 90       	pop	r12
    b684:	bf 90       	pop	r11
    b686:	af 90       	pop	r10
    b688:	08 95       	ret

0000b68a <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + FP_8 > (240 << FP_FACTOR) ||
    b68a:	fc 01       	movw	r30, r24
    b68c:	24 81       	ldd	r18, Z+4	; 0x04
    b68e:	35 81       	ldd	r19, Z+5	; 0x05
    b690:	20 5c       	subi	r18, 0xC0	; 192
    b692:	3f 4f       	sbci	r19, 0xFF	; 255
    b694:	21 38       	cpi	r18, 0x81	; 129
    b696:	37 40       	sbci	r19, 0x07	; 7
    b698:	78 f4       	brcc	.+30     	; 0xb6b8 <collision_detect_boundries+0x2e>
	    sprite->y < (24 << FP_FACTOR) || sprite->y + FP_8 > (224 << FP_FACTOR))
    b69a:	fc 01       	movw	r30, r24
    b69c:	86 81       	ldd	r24, Z+6	; 0x06
    b69e:	97 81       	ldd	r25, Z+7	; 0x07
	return LBCollides(t->shared.x,t->shared.y,FP_8,FP_8,shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4) && t->lives > 0;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + FP_8 > (240 << FP_FACTOR) ||
    b6a0:	80 3c       	cpi	r24, 0xC0	; 192
    b6a2:	91 05       	cpc	r25, r1
    b6a4:	48 f0       	brcs	.+18     	; 0xb6b8 <collision_detect_boundries+0x2e>
	    sprite->y < (24 << FP_FACTOR) || sprite->y + FP_8 > (224 << FP_FACTOR))
    b6a6:	9c 01       	movw	r18, r24
    b6a8:	20 5c       	subi	r18, 0xC0	; 192
    b6aa:	3f 4f       	sbci	r19, 0xFF	; 255
    b6ac:	81 e0       	ldi	r24, 0x01	; 1
    b6ae:	21 30       	cpi	r18, 0x01	; 1
    b6b0:	37 40       	sbci	r19, 0x07	; 7
    b6b2:	18 f4       	brcc	.+6      	; 0xb6ba <collision_detect_boundries+0x30>
    b6b4:	80 e0       	ldi	r24, 0x00	; 0
    b6b6:	08 95       	ret
	{
		return 1;
    b6b8:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    b6ba:	08 95       	ret

0000b6bc <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    b6bc:	1f 93       	push	r17
    b6be:	cf 93       	push	r28
    b6c0:	df 93       	push	r29
    b6c2:	9c 01       	movw	r18, r24
    b6c4:	fb 01       	movw	r30, r22
    b6c6:	14 2f       	mov	r17, r20
	u8 x = tile_index % 30;
    b6c8:	6e e1       	ldi	r22, 0x1E	; 30
    b6ca:	70 e0       	ldi	r23, 0x00	; 0
    b6cc:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b6d0:	96 2f       	mov	r25, r22
	u8 y = 3 + tile_index / 30;
    b6d2:	63 e0       	ldi	r22, 0x03	; 3
    b6d4:	69 0f       	add	r22, r25
	
	if (level.level_map[tile_index] == L_EMPTY)
    b6d6:	e9 01       	movw	r28, r18
    b6d8:	cd 54       	subi	r28, 0x4D	; 77
    b6da:	d3 4f       	sbci	r29, 0xF3	; 243
    b6dc:	49 81       	ldd	r20, Y+1	; 0x01
    b6de:	44 23       	and	r20, r20
    b6e0:	71 f0       	breq	.+28     	; 0xb6fe <drop_item+0x42>
	{
		DrawMap2(x, y, map);
		level.level_map[tile_index] = item_type;
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    b6e2:	e9 01       	movw	r28, r18
    b6e4:	cc 54       	subi	r28, 0x4C	; 76
    b6e6:	d3 4f       	sbci	r29, 0xF3	; 243
    b6e8:	49 81       	ldd	r20, Y+1	; 0x01
    b6ea:	44 23       	and	r20, r20
    b6ec:	91 f0       	breq	.+36     	; 0xb712 <drop_item+0x56>
	{
		DrawMap2(x+1, y, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    b6ee:	e9 01       	movw	r28, r18
    b6f0:	cf 52       	subi	r28, 0x2F	; 47
    b6f2:	d3 4f       	sbci	r29, 0xF3	; 243
    b6f4:	49 81       	ldd	r20, Y+1	; 0x01
    b6f6:	41 11       	cpse	r20, r1
    b6f8:	04 c0       	rjmp	.+8      	; 0xb702 <drop_item+0x46>
	{
		DrawMap2(x, y+1, map);
    b6fa:	64 e0       	ldi	r22, 0x04	; 4
    b6fc:	69 0f       	add	r22, r25
    b6fe:	af 01       	movw	r20, r30
    b700:	0a c0       	rjmp	.+20     	; 0xb716 <drop_item+0x5a>
		level.level_map[tile_index+30] = item_type;
	}
	else if (level.level_map[tile_index+31] == L_EMPTY)
    b702:	e9 01       	movw	r28, r18
    b704:	ce 52       	subi	r28, 0x2E	; 46
    b706:	d3 4f       	sbci	r29, 0xF3	; 243
    b708:	29 81       	ldd	r18, Y+1	; 0x01
    b70a:	21 11       	cpse	r18, r1
    b70c:	07 c0       	rjmp	.+14     	; 0xb71c <drop_item+0x60>
	{
		DrawMap2(x+1, y+1, map);
    b70e:	64 e0       	ldi	r22, 0x04	; 4
    b710:	69 0f       	add	r22, r25
    b712:	af 01       	movw	r20, r30
    b714:	8f 5f       	subi	r24, 0xFF	; 255
    b716:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
		level.level_map[tile_index+31] = item_type;
    b71a:	19 83       	std	Y+1, r17	; 0x01
	}
}
    b71c:	df 91       	pop	r29
    b71e:	cf 91       	pop	r28
    b720:	1f 91       	pop	r17
    b722:	08 95       	ret

0000b724 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    b724:	ff 92       	push	r15
    b726:	0f 93       	push	r16
    b728:	1f 93       	push	r17
    b72a:	cf 93       	push	r28
    b72c:	df 93       	push	r29
    b72e:	ec 01       	movw	r28, r24
    b730:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / FP_8;
	u8 y = player->shared.y / FP_8 - 3;
    b732:	2e 81       	ldd	r18, Y+6	; 0x06
    b734:	3f 81       	ldd	r19, Y+7	; 0x07
    b736:	86 e0       	ldi	r24, 0x06	; 6
    b738:	36 95       	lsr	r19
    b73a:	27 95       	ror	r18
    b73c:	8a 95       	dec	r24
    b73e:	e1 f7       	brne	.-8      	; 0xb738 <kill_player+0x14>
    b740:	23 50       	subi	r18, 0x03	; 3
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / FP_8;
    b742:	0c 81       	ldd	r16, Y+4	; 0x04
    b744:	1d 81       	ldd	r17, Y+5	; 0x05
    b746:	96 e0       	ldi	r25, 0x06	; 6
    b748:	16 95       	lsr	r17
    b74a:	07 95       	ror	r16
    b74c:	9a 95       	dec	r25
    b74e:	e1 f7       	brne	.-8      	; 0xb748 <kill_player+0x24>
    b750:	11 27       	eor	r17, r17
	u8 y = player->shared.y / FP_8 - 3;
	int tile_index = (y * 30) + x;
    b752:	8e e1       	ldi	r24, 0x1E	; 30
    b754:	28 9f       	mul	r18, r24
    b756:	00 0d       	add	r16, r0
    b758:	11 1d       	adc	r17, r1
    b75a:	11 24       	eor	r1, r1

	if (player->has_over_speed)
    b75c:	8f 89       	ldd	r24, Y+23	; 0x17
    b75e:	88 23       	and	r24, r24
    b760:	89 f0       	breq	.+34     	; 0xb784 <kill_player+0x60>
	{
		SetTile(hud_x+10, 1, 0);
    b762:	40 e0       	ldi	r20, 0x00	; 0
    b764:	50 e0       	ldi	r21, 0x00	; 0
    b766:	61 e0       	ldi	r22, 0x01	; 1
    b768:	8a e0       	ldi	r24, 0x0A	; 10
    b76a:	8f 0d       	add	r24, r15
    b76c:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    b770:	47 e0       	ldi	r20, 0x07	; 7
    b772:	66 e0       	ldi	r22, 0x06	; 6
    b774:	7e e7       	ldi	r23, 0x7E	; 126
    b776:	c8 01       	movw	r24, r16
    b778:	0e 94 5e 5b 	call	0xb6bc	; 0xb6bc <drop_item>
		player->max_speed = MAX_SPEED;
    b77c:	80 e0       	ldi	r24, 0x00	; 0
    b77e:	92 e0       	ldi	r25, 0x02	; 2
    b780:	9e 8f       	std	Y+30, r25	; 0x1e
    b782:	8d 8f       	std	Y+29, r24	; 0x1d
	}
	if (player->has_rocket)
    b784:	8e 89       	ldd	r24, Y+22	; 0x16
    b786:	88 23       	and	r24, r24
    b788:	69 f0       	breq	.+26     	; 0xb7a4 <kill_player+0x80>
	{
		SetTile(hud_x+11, 1, 0);
    b78a:	40 e0       	ldi	r20, 0x00	; 0
    b78c:	50 e0       	ldi	r21, 0x00	; 0
    b78e:	61 e0       	ldi	r22, 0x01	; 1
    b790:	8b e0       	ldi	r24, 0x0B	; 11
    b792:	8f 0d       	add	r24, r15
    b794:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    b798:	49 e0       	ldi	r20, 0x09	; 9
    b79a:	60 e0       	ldi	r22, 0x00	; 0
    b79c:	7e e7       	ldi	r23, 0x7E	; 126
    b79e:	c8 01       	movw	r24, r16
    b7a0:	0e 94 5e 5b 	call	0xb6bc	; 0xb6bc <drop_item>
	}
	player->has_over_speed = false;
    b7a4:	1f 8a       	std	Y+23, r1	; 0x17
	player->has_rocket = false;
    b7a6:	1e 8a       	std	Y+22, r1	; 0x16
	player->flags = player->flags | EXPLODING_FLAG;
    b7a8:	8a 89       	ldd	r24, Y+18	; 0x12
    b7aa:	81 60       	ori	r24, 0x01	; 1
    b7ac:	8a 8b       	std	Y+18, r24	; 0x12
}
    b7ae:	df 91       	pop	r29
    b7b0:	cf 91       	pop	r28
    b7b2:	1f 91       	pop	r17
    b7b4:	0f 91       	pop	r16
    b7b6:	ff 90       	pop	r15
    b7b8:	08 95       	ret

0000b7ba <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    b7ba:	fc 01       	movw	r30, r24
	int tile_root = (y * 30) + x;
    b7bc:	70 e0       	ldi	r23, 0x00	; 0
    b7be:	8e e1       	ldi	r24, 0x1E	; 30
    b7c0:	48 9f       	mul	r20, r24
    b7c2:	60 0d       	add	r22, r0
    b7c4:	71 1d       	adc	r23, r1
    b7c6:	11 24       	eor	r1, r1
	if (direction == D_UP)
    b7c8:	21 11       	cpse	r18, r1
    b7ca:	05 c0       	rjmp	.+10     	; 0xb7d6 <get_interesting_tile_indexes_shot+0x1c>
	{
		tiles[0] = tile_root;
    b7cc:	71 83       	std	Z+1, r23	; 0x01
    b7ce:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b7d0:	6f 5f       	subi	r22, 0xFF	; 255
    b7d2:	7f 4f       	sbci	r23, 0xFF	; 255
    b7d4:	0c c0       	rjmp	.+24     	; 0xb7ee <get_interesting_tile_indexes_shot+0x34>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 1;
    b7d6:	cb 01       	movw	r24, r22
	if (direction == D_UP)
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
	}
	else if (direction == D_RIGHT)
    b7d8:	21 30       	cpi	r18, 0x01	; 1
    b7da:	11 f4       	brne	.+4      	; 0xb7e0 <get_interesting_tile_indexes_shot+0x26>
	{
		tiles[0] = tile_root + 1;
    b7dc:	01 96       	adiw	r24, 0x01	; 1
    b7de:	03 c0       	rjmp	.+6      	; 0xb7e6 <get_interesting_tile_indexes_shot+0x2c>
    b7e0:	4e 96       	adiw	r24, 0x1e	; 30
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    b7e2:	22 30       	cpi	r18, 0x02	; 2
    b7e4:	39 f4       	brne	.+14     	; 0xb7f4 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = tile_root + 30;
    b7e6:	91 83       	std	Z+1, r25	; 0x01
    b7e8:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b7ea:	61 5e       	subi	r22, 0xE1	; 225
    b7ec:	7f 4f       	sbci	r23, 0xFF	; 255
    b7ee:	73 83       	std	Z+3, r23	; 0x03
    b7f0:	62 83       	std	Z+2, r22	; 0x02
    b7f2:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    b7f4:	71 83       	std	Z+1, r23	; 0x01
    b7f6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b7f8:	93 83       	std	Z+3, r25	; 0x03
    b7fa:	82 83       	std	Z+2, r24	; 0x02
    b7fc:	08 95       	ret

0000b7fe <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    b7fe:	ef 92       	push	r14
    b800:	ff 92       	push	r15
    b802:	0f 93       	push	r16
    b804:	1f 93       	push	r17
    b806:	cf 93       	push	r28
    b808:	df 93       	push	r29
    b80a:	ec 01       	movw	r28, r24
    b80c:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    b80e:	8e e1       	ldi	r24, 0x1E	; 30
    b810:	e8 2e       	mov	r14, r24
    b812:	f1 2c       	mov	r15, r1
    b814:	cb 01       	movw	r24, r22
    b816:	b7 01       	movw	r22, r14
    b818:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b81c:	6d 5f       	subi	r22, 0xFD	; 253
    b81e:	40 e0       	ldi	r20, 0x00	; 0
    b820:	50 e0       	ldi	r21, 0x00	; 0
    b822:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    b826:	88 81       	ld	r24, Y
    b828:	fe 01       	movw	r30, r28
    b82a:	9e e0       	ldi	r25, 0x0E	; 14
    b82c:	89 9f       	mul	r24, r25
    b82e:	e0 0d       	add	r30, r0
    b830:	f1 1d       	adc	r31, r1
    b832:	11 24       	eor	r1, r1
    b834:	85 85       	ldd	r24, Z+13	; 0x0d
    b836:	96 85       	ldd	r25, Z+14	; 0x0e
    b838:	00 97       	sbiw	r24, 0x00	; 0
    b83a:	41 f0       	breq	.+16     	; 0xb84c <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    b83c:	b7 01       	movw	r22, r14
    b83e:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    b842:	6d 5f       	subi	r22, 0xFD	; 253
    b844:	40 e0       	ldi	r20, 0x00	; 0
    b846:	50 e0       	ldi	r21, 0x00	; 0
    b848:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    b84c:	88 81       	ld	r24, Y
    b84e:	fe 01       	movw	r30, r28
    b850:	9e e0       	ldi	r25, 0x0E	; 14
    b852:	89 9f       	mul	r24, r25
    b854:	e0 0d       	add	r30, r0
    b856:	f1 1d       	adc	r31, r1
    b858:	11 24       	eor	r1, r1
    b85a:	16 87       	std	Z+14, r17	; 0x0e
    b85c:	05 87       	std	Z+13, r16	; 0x0d
	ta->anims[ta->next_available].anim.current_anim = 0;
    b85e:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    b860:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    b862:	82 30       	cpi	r24, 0x02	; 2
    b864:	11 f0       	breq	.+4      	; 0xb86a <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    b866:	88 83       	st	Y, r24
    b868:	01 c0       	rjmp	.+2      	; 0xb86c <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    b86a:	18 82       	st	Y, r1
	}
}
    b86c:	df 91       	pop	r29
    b86e:	cf 91       	pop	r28
    b870:	1f 91       	pop	r17
    b872:	0f 91       	pop	r16
    b874:	ff 90       	pop	r15
    b876:	ef 90       	pop	r14
    b878:	08 95       	ret

0000b87a <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    b87a:	fb 01       	movw	r30, r22
	switch (tile_type)
    b87c:	84 30       	cpi	r24, 0x04	; 4
    b87e:	71 f0       	breq	.+28     	; 0xb89c <richochet+0x22>
    b880:	18 f4       	brcc	.+6      	; 0xb888 <richochet+0xe>
    b882:	83 30       	cpi	r24, 0x03	; 3
    b884:	31 f0       	breq	.+12     	; 0xb892 <richochet+0x18>
    b886:	08 95       	ret
    b888:	85 30       	cpi	r24, 0x05	; 5
    b88a:	99 f0       	breq	.+38     	; 0xb8b2 <richochet+0x38>
    b88c:	86 30       	cpi	r24, 0x06	; 6
    b88e:	59 f0       	breq	.+22     	; 0xb8a6 <richochet+0x2c>
    b890:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b892:	80 81       	ld	r24, Z
    b894:	8d 7f       	andi	r24, 0xFD	; 253
    b896:	29 f4       	brne	.+10     	; 0xb8a2 <richochet+0x28>
				sprite->direction = D_RIGHT;
    b898:	81 e0       	ldi	r24, 0x01	; 1
    b89a:	09 c0       	rjmp	.+18     	; 0xb8ae <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    b89c:	80 81       	ld	r24, Z
    b89e:	8d 7f       	andi	r24, 0xFD	; 253
    b8a0:	29 f0       	breq	.+10     	; 0xb8ac <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    b8a2:	82 e0       	ldi	r24, 0x02	; 2
    b8a4:	04 c0       	rjmp	.+8      	; 0xb8ae <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b8a6:	80 81       	ld	r24, Z
    b8a8:	8d 7f       	andi	r24, 0xFD	; 253
    b8aa:	31 f4       	brne	.+12     	; 0xb8b8 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    b8ac:	83 e0       	ldi	r24, 0x03	; 3
    b8ae:	80 83       	st	Z, r24
    b8b0:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    b8b2:	80 81       	ld	r24, Z
    b8b4:	8d 7f       	andi	r24, 0xFD	; 253
    b8b6:	81 f3       	breq	.-32     	; 0xb898 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    b8b8:	10 82       	st	Z, r1
    b8ba:	08 95       	ret

0000b8bc <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    b8bc:	2f 92       	push	r2
    b8be:	3f 92       	push	r3
    b8c0:	4f 92       	push	r4
    b8c2:	5f 92       	push	r5
    b8c4:	6f 92       	push	r6
    b8c6:	7f 92       	push	r7
    b8c8:	8f 92       	push	r8
    b8ca:	9f 92       	push	r9
    b8cc:	af 92       	push	r10
    b8ce:	bf 92       	push	r11
    b8d0:	cf 92       	push	r12
    b8d2:	df 92       	push	r13
    b8d4:	ef 92       	push	r14
    b8d6:	ff 92       	push	r15
    b8d8:	0f 93       	push	r16
    b8da:	1f 93       	push	r17
    b8dc:	cf 93       	push	r28
    b8de:	df 93       	push	r29
    b8e0:	cd b7       	in	r28, 0x3d	; 61
    b8e2:	de b7       	in	r29, 0x3e	; 62
    b8e4:	28 97       	sbiw	r28, 0x08	; 8
    b8e6:	0f b6       	in	r0, 0x3f	; 63
    b8e8:	f8 94       	cli
    b8ea:	de bf       	out	0x3e, r29	; 62
    b8ec:	0f be       	out	0x3f, r0	; 63
    b8ee:	cd bf       	out	0x3d, r28	; 61
    b8f0:	3c 01       	movw	r6, r24
    b8f2:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    b8f4:	1a 82       	std	Y+2, r1	; 0x02
    b8f6:	19 82       	std	Y+1, r1	; 0x01
    b8f8:	1c 82       	std	Y+4, r1	; 0x04
    b8fa:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / FP_8;
	u8 y = shot->shared.y / FP_8 - 3;
    b8fc:	db 01       	movw	r26, r22
    b8fe:	16 96       	adiw	r26, 0x06	; 6
    b900:	4d 91       	ld	r20, X+
    b902:	5c 91       	ld	r21, X
    b904:	17 97       	sbiw	r26, 0x07	; 7
    b906:	16 e0       	ldi	r17, 0x06	; 6
    b908:	56 95       	lsr	r21
    b90a:	47 95       	ror	r20
    b90c:	1a 95       	dec	r17
    b90e:	e1 f7       	brne	.-8      	; 0xb908 <collision_detect_shot+0x4c>
    b910:	43 50       	subi	r20, 0x03	; 3
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / FP_8;
    b912:	14 96       	adiw	r26, 0x04	; 4
    b914:	6d 91       	ld	r22, X+
    b916:	7c 91       	ld	r23, X
    b918:	15 97       	sbiw	r26, 0x05	; 5
    b91a:	06 e0       	ldi	r16, 0x06	; 6
    b91c:	76 95       	lsr	r23
    b91e:	67 95       	ror	r22
    b920:	0a 95       	dec	r16
    b922:	e1 f7       	brne	.-8      	; 0xb91c <collision_detect_shot+0x60>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    b924:	2c 91       	ld	r18, X
    b926:	ce 01       	movw	r24, r28
    b928:	01 96       	adiw	r24, 0x01	; 1
    b92a:	0e 94 dd 5b 	call	0xb7ba	; 0xb7ba <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    b92e:	c4 01       	movw	r24, r8
    b930:	0e 94 45 5b 	call	0xb68a	; 0xb68a <collision_detect_boundries>
    b934:	88 23       	and	r24, r24
    b936:	69 f0       	breq	.+26     	; 0xb952 <collision_detect_shot+0x96>
	{
		init_shot_state(shot, shot->shot_type);
    b938:	f4 01       	movw	r30, r8
    b93a:	60 85       	ldd	r22, Z+8	; 0x08
    b93c:	c4 01       	movw	r24, r8
    b93e:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
		player->active_shots--;
    b942:	d3 01       	movw	r26, r6
    b944:	1e 96       	adiw	r26, 0x0e	; 14
    b946:	8c 91       	ld	r24, X
    b948:	1e 97       	sbiw	r26, 0x0e	; 14
    b94a:	81 50       	subi	r24, 0x01	; 1
    b94c:	1e 96       	adiw	r26, 0x0e	; 14
    b94e:	8c 93       	st	X, r24
		return;
    b950:	91 c1       	rjmp	.+802    	; 0xbc74 <collision_detect_shot+0x3b8>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    b952:	b4 01       	movw	r22, r8
    b954:	89 e3       	ldi	r24, 0x39	; 57
    b956:	9c e0       	ldi	r25, 0x0C	; 12
    b958:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <player_shot>
    b95c:	88 23       	and	r24, r24
    b95e:	b9 f0       	breq	.+46     	; 0xb98e <collision_detect_shot+0xd2>
    b960:	80 91 4b 0c 	lds	r24, 0x0C4B
    b964:	80 fd       	sbrc	r24, 0
    b966:	13 c0       	rjmp	.+38     	; 0xb98e <collision_detect_shot+0xd2>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    b968:	80 91 af 0f 	lds	r24, 0x0FAF
    b96c:	8f 5f       	subi	r24, 0xFF	; 255
    b96e:	80 93 af 0f 	sts	0x0FAF, r24
		player2.score++;
    b972:	80 91 ae 0f 	lds	r24, 0x0FAE
    b976:	8f 5f       	subi	r24, 0xFF	; 255
    b978:	80 93 ae 0f 	sts	0x0FAE, r24
		render_score(&player2, 15);
    b97c:	6f e0       	ldi	r22, 0x0F	; 15
    b97e:	82 ea       	ldi	r24, 0xA2	; 162
    b980:	9f e0       	ldi	r25, 0x0F	; 15
    b982:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    b986:	09 e3       	ldi	r16, 0x39	; 57
    b988:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    b98a:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    b98c:	54 c0       	rjmp	.+168    	; 0xba36 <collision_detect_shot+0x17a>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
    b98e:	b4 01       	movw	r22, r8
    b990:	82 ea       	ldi	r24, 0xA2	; 162
    b992:	9f e0       	ldi	r25, 0x0F	; 15
    b994:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <player_shot>
    b998:	90 91 09 0c 	lds	r25, 0x0C09
    b99c:	88 23       	and	r24, r24
    b99e:	d1 f0       	breq	.+52     	; 0xb9d4 <collision_detect_shot+0x118>
    b9a0:	80 91 b4 0f 	lds	r24, 0x0FB4
    b9a4:	80 fd       	sbrc	r24, 0
    b9a6:	16 c0       	rjmp	.+44     	; 0xb9d4 <collision_detect_shot+0x118>
    b9a8:	91 11       	cpse	r25, r1
    b9aa:	14 c0       	rjmp	.+40     	; 0xb9d4 <collision_detect_shot+0x118>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    b9ac:	80 91 46 0c 	lds	r24, 0x0C46
    b9b0:	8f 5f       	subi	r24, 0xFF	; 255
    b9b2:	80 93 46 0c 	sts	0x0C46, r24
		player1.score++;
    b9b6:	80 91 45 0c 	lds	r24, 0x0C45
    b9ba:	8f 5f       	subi	r24, 0xFF	; 255
    b9bc:	80 93 45 0c 	sts	0x0C45, r24
		render_score(&player1, 0);
    b9c0:	60 e0       	ldi	r22, 0x00	; 0
    b9c2:	89 e3       	ldi	r24, 0x39	; 57
    b9c4:	9c e0       	ldi	r25, 0x0C	; 12
    b9c6:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG) && !(game.boss_fight_status))
	{
		p = &player2;
    b9ca:	02 ea       	ldi	r16, 0xA2	; 162
    b9cc:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    b9ce:	bf e0       	ldi	r27, 0x0F	; 15
    b9d0:	fb 2e       	mov	r15, r27
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
    b9d2:	31 c0       	rjmp	.+98     	; 0xba36 <collision_detect_shot+0x17a>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    b9d4:	94 30       	cpi	r25, 0x04	; 4
    b9d6:	91 f5       	brne	.+100    	; 0xba3c <collision_detect_shot+0x180>
	{
		if (turret_shot(&turret1, shot))
    b9d8:	b4 01       	movw	r22, r8
    b9da:	80 e6       	ldi	r24, 0x60	; 96
    b9dc:	90 e1       	ldi	r25, 0x10	; 16
    b9de:	0e 94 0a 5b 	call	0xb614	; 0xb614 <turret_shot>
    b9e2:	88 23       	and	r24, r24
    b9e4:	41 f0       	breq	.+16     	; 0xb9f6 <collision_detect_shot+0x13a>
		{
			turret1.lives--;
    b9e6:	80 91 68 10 	lds	r24, 0x1068
    b9ea:	81 50       	subi	r24, 0x01	; 1
    b9ec:	80 93 68 10 	sts	0x1068, r24
			init_shot_state(shot, shot->shot_type);
    b9f0:	f4 01       	movw	r30, r8
    b9f2:	60 85       	ldd	r22, Z+8	; 0x08
    b9f4:	0f c0       	rjmp	.+30     	; 0xba14 <collision_detect_shot+0x158>
			game.boss_fight_player->active_shots--;
			SFX_TANK_EXPLODE;
		}
		else if (turret_shot(&turret2, shot))
    b9f6:	b4 01       	movw	r22, r8
    b9f8:	81 e3       	ldi	r24, 0x31	; 49
    b9fa:	90 e1       	ldi	r25, 0x10	; 16
    b9fc:	0e 94 0a 5b 	call	0xb614	; 0xb614 <turret_shot>
    ba00:	88 23       	and	r24, r24
    ba02:	e1 f0       	breq	.+56     	; 0xba3c <collision_detect_shot+0x180>
		{
			turret2.lives--;
    ba04:	80 91 39 10 	lds	r24, 0x1039
    ba08:	81 50       	subi	r24, 0x01	; 1
    ba0a:	80 93 39 10 	sts	0x1039, r24
			init_shot_state(shot, shot->shot_type);
    ba0e:	d4 01       	movw	r26, r8
    ba10:	18 96       	adiw	r26, 0x08	; 8
    ba12:	6c 91       	ld	r22, X
    ba14:	c4 01       	movw	r24, r8
    ba16:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
			game.boss_fight_player->active_shots--;
    ba1a:	e0 91 17 0c 	lds	r30, 0x0C17
    ba1e:	f0 91 18 0c 	lds	r31, 0x0C18
    ba22:	86 85       	ldd	r24, Z+14	; 0x0e
    ba24:	81 50       	subi	r24, 0x01	; 1
    ba26:	86 87       	std	Z+14, r24	; 0x0e
			SFX_TANK_EXPLODE;
    ba28:	2f ef       	ldi	r18, 0xFF	; 255
    ba2a:	40 e1       	ldi	r20, 0x10	; 16
    ba2c:	67 e0       	ldi	r22, 0x07	; 7
    ba2e:	84 e0       	ldi	r24, 0x04	; 4
    ba30:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
    ba34:	03 c0       	rjmp	.+6      	; 0xba3c <collision_detect_shot+0x180>
		}
	}
	if (p)
    ba36:	01 15       	cp	r16, r1
    ba38:	11 05       	cpc	r17, r1
    ba3a:	61 f4       	brne	.+24     	; 0xba54 <collision_detect_shot+0x198>
    ba3c:	fe 01       	movw	r30, r28
    ba3e:	31 96       	adiw	r30, 0x01	; 1
    ba40:	f8 87       	std	Y+8, r31	; 0x08
    ba42:	ef 83       	std	Y+7, r30	; 0x07
    ba44:	1d 82       	std	Y+5, r1	; 0x05
    ba46:	1e 82       	std	Y+6, r1	; 0x06
    ba48:	21 2c       	mov	r2, r1
    ba4a:	31 2c       	mov	r3, r1
		else if (tile == L_BRICK && LBCollides(shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4,(tiles[i]%30)*FP_8,(tiles[i]/30+3)*FP_8,FP_8,FP_8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4,(tiles[i]%30)*FP_8,(tiles[i]/30+3)*FP_8,FP_8,FP_8))
    ba4c:	ae e1       	ldi	r26, 0x1E	; 30
    ba4e:	4a 2e       	mov	r4, r26
    ba50:	51 2c       	mov	r5, r1
    ba52:	33 c0       	rjmp	.+102    	; 0xbaba <collision_detect_shot+0x1fe>
			SFX_TANK_EXPLODE;
		}
	}
	if (p)
	{
		init_shot_state(shot, shot->shot_type);
    ba54:	d4 01       	movw	r26, r8
    ba56:	18 96       	adiw	r26, 0x08	; 8
    ba58:	6c 91       	ld	r22, X
    ba5a:	c4 01       	movw	r24, r8
    ba5c:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
		player->active_shots--;
    ba60:	f3 01       	movw	r30, r6
    ba62:	86 85       	ldd	r24, Z+14	; 0x0e
    ba64:	81 50       	subi	r24, 0x01	; 1
    ba66:	86 87       	std	Z+14, r24	; 0x0e
		kill_player(p, hud_x);
    ba68:	6f 2d       	mov	r22, r15
    ba6a:	c8 01       	movw	r24, r16
    ba6c:	0e 94 92 5b 	call	0xb724	; 0xb724 <kill_player>
		SFX_TANK_EXPLODE;
    ba70:	2f ef       	ldi	r18, 0xFF	; 255
    ba72:	40 e1       	ldi	r20, 0x10	; 16
    ba74:	67 e0       	ldi	r22, 0x07	; 7
    ba76:	eb c0       	rjmp	.+470    	; 0xbc4e <collision_detect_shot+0x392>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+FP_2, shot->shared.y+FP_2,FP_4,FP_4))
    ba78:	c7 01       	movw	r24, r14
    ba7a:	0e 94 ab 59 	call	0xb356	; 0xb356 <solid_directional_tile>
    ba7e:	88 23       	and	r24, r24
    ba80:	49 f1       	breq	.+82     	; 0xbad4 <collision_detect_shot+0x218>
    ba82:	f4 01       	movw	r30, r8
    ba84:	46 81       	ldd	r20, Z+6	; 0x06
    ba86:	57 81       	ldd	r21, Z+7	; 0x07
    ba88:	40 5f       	subi	r20, 0xF0	; 240
    ba8a:	5f 4f       	sbci	r21, 0xFF	; 255
    ba8c:	64 81       	ldd	r22, Z+4	; 0x04
    ba8e:	75 81       	ldd	r23, Z+5	; 0x05
    ba90:	60 5f       	subi	r22, 0xF0	; 240
    ba92:	7f 4f       	sbci	r23, 0xFF	; 255
    ba94:	00 e2       	ldi	r16, 0x20	; 32
    ba96:	10 e0       	ldi	r17, 0x00	; 0
    ba98:	20 e2       	ldi	r18, 0x20	; 32
    ba9a:	30 e0       	ldi	r19, 0x00	; 0
    ba9c:	c7 01       	movw	r24, r14
    ba9e:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <collides_directional_tile>
    baa2:	88 23       	and	r24, r24
    baa4:	b9 f0       	breq	.+46     	; 0xbad4 <collision_detect_shot+0x218>
		{
			hit = hit | HIT_ANGLE;
    baa6:	f3 2d       	mov	r31, r3
    baa8:	f4 60       	ori	r31, 0x04	; 4
    baaa:	3f 2e       	mov	r3, r31
			angle_tile = tile;
    baac:	de 82       	std	Y+6, r13	; 0x06
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    baae:	2d 81       	ldd	r18, Y+5	; 0x05
    bab0:	21 30       	cpi	r18, 0x01	; 1
    bab2:	09 f4       	brne	.+2      	; 0xbab6 <collision_detect_shot+0x1fa>
    bab4:	71 c0       	rjmp	.+226    	; 0xbb98 <collision_detect_shot+0x2dc>
    bab6:	f1 e0       	ldi	r31, 0x01	; 1
    bab8:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    baba:	af 81       	ldd	r26, Y+7	; 0x07
    babc:	b8 85       	ldd	r27, Y+8	; 0x08
    babe:	ed 90       	ld	r14, X+
    bac0:	fd 90       	ld	r15, X+
    bac2:	b8 87       	std	Y+8, r27	; 0x08
    bac4:	af 83       	std	Y+7, r26	; 0x07
    bac6:	f7 01       	movw	r30, r14
    bac8:	ed 54       	subi	r30, 0x4D	; 77
    baca:	f3 4f       	sbci	r31, 0xF3	; 243
    bacc:	d1 80       	ldd	r13, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    bace:	dd 20       	and	r13, r13
    bad0:	71 f3       	breq	.-36     	; 0xbaae <collision_detect_shot+0x1f2>
    bad2:	d2 cf       	rjmp	.-92     	; 0xba78 <collision_detect_shot+0x1bc>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+FP_2, shot->shared.y+FP_2,FP_4,FP_4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4,(tiles[i]%30)*FP_8,(tiles[i]/30+3)*FP_8,FP_8,FP_8))
    bad4:	21 e0       	ldi	r18, 0x01	; 1
    bad6:	d2 12       	cpse	r13, r18
    bad8:	2e c0       	rjmp	.+92     	; 0xbb36 <collision_detect_shot+0x27a>
    bada:	c7 01       	movw	r24, r14
    badc:	b2 01       	movw	r22, r4
    bade:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    bae2:	7b 01       	movw	r14, r22
    bae4:	a3 e0       	ldi	r26, 0x03	; 3
    bae6:	ea 0e       	add	r14, r26
    bae8:	f1 1c       	adc	r15, r1
    baea:	66 e0       	ldi	r22, 0x06	; 6
    baec:	ee 0c       	add	r14, r14
    baee:	ff 1c       	adc	r15, r15
    baf0:	6a 95       	dec	r22
    baf2:	e1 f7       	brne	.-8      	; 0xbaec <collision_detect_shot+0x230>
    baf4:	8c 01       	movw	r16, r24
    baf6:	76 e0       	ldi	r23, 0x06	; 6
    baf8:	00 0f       	add	r16, r16
    bafa:	11 1f       	adc	r17, r17
    bafc:	7a 95       	dec	r23
    bafe:	e1 f7       	brne	.-8      	; 0xbaf8 <collision_detect_shot+0x23c>
    bb00:	f4 01       	movw	r30, r8
    bb02:	66 81       	ldd	r22, Z+6	; 0x06
    bb04:	77 81       	ldd	r23, Z+7	; 0x07
    bb06:	60 5f       	subi	r22, 0xF0	; 240
    bb08:	7f 4f       	sbci	r23, 0xFF	; 255
    bb0a:	84 81       	ldd	r24, Z+4	; 0x04
    bb0c:	95 81       	ldd	r25, Z+5	; 0x05
    bb0e:	e0 e4       	ldi	r30, 0x40	; 64
    bb10:	ae 2e       	mov	r10, r30
    bb12:	b1 2c       	mov	r11, r1
    bb14:	f0 e4       	ldi	r31, 0x40	; 64
    bb16:	cf 2e       	mov	r12, r31
    bb18:	d1 2c       	mov	r13, r1
    bb1a:	20 e2       	ldi	r18, 0x20	; 32
    bb1c:	30 e0       	ldi	r19, 0x00	; 0
    bb1e:	40 e2       	ldi	r20, 0x20	; 32
    bb20:	50 e0       	ldi	r21, 0x00	; 0
    bb22:	40 96       	adiw	r24, 0x10	; 16
    bb24:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
    bb28:	88 23       	and	r24, r24
    bb2a:	09 f2       	breq	.-126    	; 0xbaae <collision_detect_shot+0x1f2>
		{
			hit = hit | HIT_BRICK;
    bb2c:	f3 2d       	mov	r31, r3
    bb2e:	f2 60       	ori	r31, 0x02	; 2
    bb30:	3f 2e       	mov	r3, r31
			brick_index = i;
    bb32:	2d 80       	ldd	r2, Y+5	; 0x05
    bb34:	bc cf       	rjmp	.-136    	; 0xbaae <collision_detect_shot+0x1f2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+FP_2,shot->shared.y+FP_2,FP_4,FP_4,(tiles[i]%30)*FP_8,(tiles[i]/30+3)*FP_8,FP_8,FP_8))
    bb36:	22 e0       	ldi	r18, 0x02	; 2
    bb38:	d2 12       	cpse	r13, r18
    bb3a:	b9 cf       	rjmp	.-142    	; 0xbaae <collision_detect_shot+0x1f2>
    bb3c:	c7 01       	movw	r24, r14
    bb3e:	b2 01       	movw	r22, r4
    bb40:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    bb44:	7b 01       	movw	r14, r22
    bb46:	a3 e0       	ldi	r26, 0x03	; 3
    bb48:	ea 0e       	add	r14, r26
    bb4a:	f1 1c       	adc	r15, r1
    bb4c:	26 e0       	ldi	r18, 0x06	; 6
    bb4e:	ee 0c       	add	r14, r14
    bb50:	ff 1c       	adc	r15, r15
    bb52:	2a 95       	dec	r18
    bb54:	e1 f7       	brne	.-8      	; 0xbb4e <collision_detect_shot+0x292>
    bb56:	8c 01       	movw	r16, r24
    bb58:	36 e0       	ldi	r19, 0x06	; 6
    bb5a:	00 0f       	add	r16, r16
    bb5c:	11 1f       	adc	r17, r17
    bb5e:	3a 95       	dec	r19
    bb60:	e1 f7       	brne	.-8      	; 0xbb5a <collision_detect_shot+0x29e>
    bb62:	f4 01       	movw	r30, r8
    bb64:	66 81       	ldd	r22, Z+6	; 0x06
    bb66:	77 81       	ldd	r23, Z+7	; 0x07
    bb68:	60 5f       	subi	r22, 0xF0	; 240
    bb6a:	7f 4f       	sbci	r23, 0xFF	; 255
    bb6c:	84 81       	ldd	r24, Z+4	; 0x04
    bb6e:	95 81       	ldd	r25, Z+5	; 0x05
    bb70:	40 e4       	ldi	r20, 0x40	; 64
    bb72:	a4 2e       	mov	r10, r20
    bb74:	b1 2c       	mov	r11, r1
    bb76:	50 e4       	ldi	r21, 0x40	; 64
    bb78:	c5 2e       	mov	r12, r21
    bb7a:	d1 2c       	mov	r13, r1
    bb7c:	20 e2       	ldi	r18, 0x20	; 32
    bb7e:	30 e0       	ldi	r19, 0x00	; 0
    bb80:	40 e2       	ldi	r20, 0x20	; 32
    bb82:	50 e0       	ldi	r21, 0x00	; 0
    bb84:	40 96       	adiw	r24, 0x10	; 16
    bb86:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
    bb8a:	88 23       	and	r24, r24
    bb8c:	09 f4       	brne	.+2      	; 0xbb90 <collision_detect_shot+0x2d4>
    bb8e:	8f cf       	rjmp	.-226    	; 0xbaae <collision_detect_shot+0x1f2>
        {
		    hit = hit | HIT_METAL;
    bb90:	f3 2d       	mov	r31, r3
    bb92:	f1 60       	ori	r31, 0x01	; 1
    bb94:	3f 2e       	mov	r3, r31
    bb96:	8b cf       	rjmp	.-234    	; 0xbaae <collision_detect_shot+0x1f2>
        }
	}
	
	if (hit & HIT_ANGLE)
    bb98:	32 fe       	sbrs	r3, 2
    bb9a:	27 c0       	rjmp	.+78     	; 0xbbea <collision_detect_shot+0x32e>
	{
		recoil_sprite_fine(player, &shot->shared);
    bb9c:	b4 01       	movw	r22, r8
    bb9e:	c3 01       	movw	r24, r6
    bba0:	0e 94 6d 59 	call	0xb2da	; 0xb2da <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    bba4:	b4 01       	movw	r22, r8
    bba6:	8e 81       	ldd	r24, Y+6	; 0x06
    bba8:	0e 94 3d 5c 	call	0xb87a	; 0xb87a <richochet>
		shot->rebounds--;
    bbac:	d4 01       	movw	r26, r8
    bbae:	1a 96       	adiw	r26, 0x0a	; 10
    bbb0:	8c 91       	ld	r24, X
    bbb2:	1a 97       	sbiw	r26, 0x0a	; 10
    bbb4:	81 50       	subi	r24, 0x01	; 1
    bbb6:	1a 96       	adiw	r26, 0x0a	; 10
    bbb8:	8c 93       	st	X, r24
    bbba:	1a 97       	sbiw	r26, 0x0a	; 10
		if (shot->rebounds <= 0)
    bbbc:	81 11       	cpse	r24, r1
    bbbe:	09 c0       	rjmp	.+18     	; 0xbbd2 <collision_detect_shot+0x316>
		{
			init_shot_state(shot, shot->shot_type);
    bbc0:	18 96       	adiw	r26, 0x08	; 8
    bbc2:	6c 91       	ld	r22, X
    bbc4:	c4 01       	movw	r24, r8
    bbc6:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
			player->active_shots--;
    bbca:	f3 01       	movw	r30, r6
    bbcc:	86 85       	ldd	r24, Z+14	; 0x0e
    bbce:	81 50       	subi	r24, 0x01	; 1
    bbd0:	86 87       	std	Z+14, r24	; 0x0e
		}
		SFX_METAL;
    bbd2:	80 91 4b 0c 	lds	r24, 0x0C4B
    bbd6:	80 fd       	sbrc	r24, 0
    bbd8:	4d c0       	rjmp	.+154    	; 0xbc74 <collision_detect_shot+0x3b8>
    bbda:	80 91 b4 0f 	lds	r24, 0x0FB4
    bbde:	80 fd       	sbrc	r24, 0
    bbe0:	49 c0       	rjmp	.+146    	; 0xbc74 <collision_detect_shot+0x3b8>
    bbe2:	2f ef       	ldi	r18, 0xFF	; 255
    bbe4:	47 e1       	ldi	r20, 0x17	; 23
    bbe6:	64 e0       	ldi	r22, 0x04	; 4
    bbe8:	32 c0       	rjmp	.+100    	; 0xbc4e <collision_detect_shot+0x392>
	}
	else if (hit & HIT_BRICK)
    bbea:	31 fe       	sbrs	r3, 1
    bbec:	34 c0       	rjmp	.+104    	; 0xbc56 <collision_detect_shot+0x39a>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    bbee:	ce 01       	movw	r24, r28
    bbf0:	01 96       	adiw	r24, 0x01	; 1
    bbf2:	2c 01       	movw	r4, r24
    bbf4:	42 0c       	add	r4, r2
    bbf6:	51 1c       	adc	r5, r1
    bbf8:	42 0c       	add	r4, r2
    bbfa:	51 1c       	adc	r5, r1
    bbfc:	d2 01       	movw	r26, r4
    bbfe:	6d 91       	ld	r22, X+
    bc00:	7c 91       	ld	r23, X
    bc02:	8c e1       	ldi	r24, 0x1C	; 28
    bc04:	9c e0       	ldi	r25, 0x0C	; 12
    bc06:	0e 94 ff 5b 	call	0xb7fe	; 0xb7fe <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    bc0a:	d2 01       	movw	r26, r4
    bc0c:	ed 91       	ld	r30, X+
    bc0e:	fc 91       	ld	r31, X
    bc10:	ed 54       	subi	r30, 0x4D	; 77
    bc12:	f3 4f       	sbci	r31, 0xF3	; 243
    bc14:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    bc16:	f4 01       	movw	r30, r8
    bc18:	81 85       	ldd	r24, Z+9	; 0x09
    bc1a:	81 50       	subi	r24, 0x01	; 1
    bc1c:	81 87       	std	Z+9, r24	; 0x09
		if (shot->hit_count <= 0)
    bc1e:	81 11       	cpse	r24, r1
    bc20:	0b c0       	rjmp	.+22     	; 0xbc38 <collision_detect_shot+0x37c>
		{
			init_shot_state(shot, shot->shot_type);
    bc22:	60 85       	ldd	r22, Z+8	; 0x08
    bc24:	c4 01       	movw	r24, r8
    bc26:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
			player->active_shots--;
    bc2a:	d3 01       	movw	r26, r6
    bc2c:	1e 96       	adiw	r26, 0x0e	; 14
    bc2e:	8c 91       	ld	r24, X
    bc30:	1e 97       	sbiw	r26, 0x0e	; 14
    bc32:	81 50       	subi	r24, 0x01	; 1
    bc34:	1e 96       	adiw	r26, 0x0e	; 14
    bc36:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    bc38:	80 91 4b 0c 	lds	r24, 0x0C4B
    bc3c:	80 fd       	sbrc	r24, 0
    bc3e:	1a c0       	rjmp	.+52     	; 0xbc74 <collision_detect_shot+0x3b8>
    bc40:	80 91 b4 0f 	lds	r24, 0x0FB4
    bc44:	80 fd       	sbrc	r24, 0
    bc46:	16 c0       	rjmp	.+44     	; 0xbc74 <collision_detect_shot+0x3b8>
    bc48:	2f ed       	ldi	r18, 0xDF	; 223
    bc4a:	47 e1       	ldi	r20, 0x17	; 23
    bc4c:	61 e0       	ldi	r22, 0x01	; 1
    bc4e:	84 e0       	ldi	r24, 0x04	; 4
    bc50:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
    bc54:	0f c0       	rjmp	.+30     	; 0xbc74 <collision_detect_shot+0x3b8>
	}
	else if (hit & HIT_METAL)
    bc56:	30 fe       	sbrs	r3, 0
    bc58:	0d c0       	rjmp	.+26     	; 0xbc74 <collision_detect_shot+0x3b8>
	{
        init_shot_state(shot, shot->shot_type);
    bc5a:	f4 01       	movw	r30, r8
    bc5c:	60 85       	ldd	r22, Z+8	; 0x08
    bc5e:	c4 01       	movw	r24, r8
    bc60:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
        player->active_shots--;
    bc64:	d3 01       	movw	r26, r6
    bc66:	1e 96       	adiw	r26, 0x0e	; 14
    bc68:	8c 91       	ld	r24, X
    bc6a:	1e 97       	sbiw	r26, 0x0e	; 14
    bc6c:	81 50       	subi	r24, 0x01	; 1
    bc6e:	1e 96       	adiw	r26, 0x0e	; 14
    bc70:	8c 93       	st	X, r24
    bc72:	af cf       	rjmp	.-162    	; 0xbbd2 <collision_detect_shot+0x316>
        SFX_METAL;
	}
}
    bc74:	28 96       	adiw	r28, 0x08	; 8
    bc76:	0f b6       	in	r0, 0x3f	; 63
    bc78:	f8 94       	cli
    bc7a:	de bf       	out	0x3e, r29	; 62
    bc7c:	0f be       	out	0x3f, r0	; 63
    bc7e:	cd bf       	out	0x3d, r28	; 61
    bc80:	df 91       	pop	r29
    bc82:	cf 91       	pop	r28
    bc84:	1f 91       	pop	r17
    bc86:	0f 91       	pop	r16
    bc88:	ff 90       	pop	r15
    bc8a:	ef 90       	pop	r14
    bc8c:	df 90       	pop	r13
    bc8e:	cf 90       	pop	r12
    bc90:	bf 90       	pop	r11
    bc92:	af 90       	pop	r10
    bc94:	9f 90       	pop	r9
    bc96:	8f 90       	pop	r8
    bc98:	7f 90       	pop	r7
    bc9a:	6f 90       	pop	r6
    bc9c:	5f 90       	pop	r5
    bc9e:	4f 90       	pop	r4
    bca0:	3f 90       	pop	r3
    bca2:	2f 90       	pop	r2
    bca4:	08 95       	ret

0000bca6 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    bca6:	fc 01       	movw	r30, r24
	u16 tile_root = (y * 30) + x;
    bca8:	70 e0       	ldi	r23, 0x00	; 0
    bcaa:	8e e1       	ldi	r24, 0x1E	; 30
    bcac:	48 9f       	mul	r20, r24
    bcae:	60 0d       	add	r22, r0
    bcb0:	71 1d       	adc	r23, r1
    bcb2:	11 24       	eor	r1, r1
	if (direction == D_UP)
    bcb4:	21 11       	cpse	r18, r1
    bcb6:	09 c0       	rjmp	.+18     	; 0xbcca <get_interesting_tile_indexes+0x24>
	{
		tiles[0] = tile_root;
    bcb8:	71 83       	std	Z+1, r23	; 0x01
    bcba:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    bcbc:	cb 01       	movw	r24, r22
    bcbe:	01 96       	adiw	r24, 0x01	; 1
    bcc0:	93 83       	std	Z+3, r25	; 0x03
    bcc2:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    bcc4:	6e 5f       	subi	r22, 0xFE	; 254
    bcc6:	7f 4f       	sbci	r23, 0xFF	; 255
    bcc8:	12 c0       	rjmp	.+36     	; 0xbcee <get_interesting_tile_indexes+0x48>
	}
	else if (direction == D_RIGHT)
	{
		tiles[0] = tile_root + 2;
    bcca:	cb 01       	movw	r24, r22
	{
		tiles[0] = tile_root;
		tiles[1] = tiles[0]+1;
		tiles[2] = tiles[0]+2;
	}
	else if (direction == D_RIGHT)
    bccc:	21 30       	cpi	r18, 0x01	; 1
    bcce:	29 f4       	brne	.+10     	; 0xbcda <get_interesting_tile_indexes+0x34>
	{
		tiles[0] = tile_root + 2;
    bcd0:	02 96       	adiw	r24, 0x02	; 2
    bcd2:	91 83       	std	Z+1, r25	; 0x01
    bcd4:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    bcd6:	4e 96       	adiw	r24, 0x1e	; 30
    bcd8:	06 c0       	rjmp	.+12     	; 0xbce6 <get_interesting_tile_indexes+0x40>
    bcda:	cc 96       	adiw	r24, 0x3c	; 60
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    bcdc:	22 30       	cpi	r18, 0x02	; 2
    bcde:	51 f4       	brne	.+20     	; 0xbcf4 <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = tile_root + 60;
    bce0:	91 83       	std	Z+1, r25	; 0x01
    bce2:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    bce4:	01 96       	adiw	r24, 0x01	; 1
    bce6:	93 83       	std	Z+3, r25	; 0x03
    bce8:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    bcea:	62 5c       	subi	r22, 0xC2	; 194
    bcec:	7f 4f       	sbci	r23, 0xFF	; 255
    bcee:	75 83       	std	Z+5, r23	; 0x05
    bcf0:	64 83       	std	Z+4, r22	; 0x04
    bcf2:	08 95       	ret
	}
	else
	{
		tiles[0] = tile_root;
    bcf4:	71 83       	std	Z+1, r23	; 0x01
    bcf6:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    bcf8:	62 5e       	subi	r22, 0xE2	; 226
    bcfa:	7f 4f       	sbci	r23, 0xFF	; 255
    bcfc:	73 83       	std	Z+3, r23	; 0x03
    bcfe:	62 83       	std	Z+2, r22	; 0x02
		tiles[2] = tiles[0]+60;
    bd00:	95 83       	std	Z+5, r25	; 0x05
    bd02:	84 83       	std	Z+4, r24	; 0x04
    bd04:	08 95       	ret

0000bd06 <explode_player>:
	}
}

void explode_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    bd06:	1f 93       	push	r17
    bd08:	cf 93       	push	r28
    bd0a:	df 93       	push	r29
    bd0c:	fc 01       	movw	r30, r24
    bd0e:	db 01       	movw	r26, r22
	if (!(other_player->flags & EXPLODING_FLAG))
    bd10:	52 96       	adiw	r26, 0x12	; 18
    bd12:	8c 91       	ld	r24, X
    bd14:	52 97       	sbiw	r26, 0x12	; 18
    bd16:	80 fd       	sbrc	r24, 0
    bd18:	13 c0       	rjmp	.+38     	; 0xbd40 <explode_player+0x3a>
    bd1a:	12 2f       	mov	r17, r18
    bd1c:	64 2f       	mov	r22, r20
    bd1e:	ed 01       	movw	r28, r26
	{
		player->level_score++;
    bd20:	85 85       	ldd	r24, Z+13	; 0x0d
    bd22:	8f 5f       	subi	r24, 0xFF	; 255
    bd24:	85 87       	std	Z+13, r24	; 0x0d
		player->score++;
    bd26:	84 85       	ldd	r24, Z+12	; 0x0c
    bd28:	8f 5f       	subi	r24, 0xFF	; 255
    bd2a:	84 87       	std	Z+12, r24	; 0x0c
		render_score(player, hud_x);
    bd2c:	cf 01       	movw	r24, r30
    bd2e:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <render_score>
		kill_player(other_player, other_player_hud_x);
    bd32:	61 2f       	mov	r22, r17
    bd34:	ce 01       	movw	r24, r28
	}
}
    bd36:	df 91       	pop	r29
    bd38:	cf 91       	pop	r28
    bd3a:	1f 91       	pop	r17
	if (!(other_player->flags & EXPLODING_FLAG))
	{
		player->level_score++;
		player->score++;
		render_score(player, hud_x);
		kill_player(other_player, other_player_hud_x);
    bd3c:	0c 94 92 5b 	jmp	0xb724	; 0xb724 <kill_player>
	}
}
    bd40:	df 91       	pop	r29
    bd42:	cf 91       	pop	r28
    bd44:	1f 91       	pop	r17
    bd46:	08 95       	ret

0000bd48 <slide>:

void slide(Player* player, u8 collision_tile, int tile)
{
    bd48:	fc 01       	movw	r30, r24
    bd4a:	26 2f       	mov	r18, r22
	u8 tile_x = (tile % 30 * FP_8);
	u8 tile_y = (tile / 30 + 3) * FP_8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
    bd4c:	90 81       	ld	r25, Z
    bd4e:	9d 7f       	andi	r25, 0xFD	; 253
    bd50:	31 f5       	brne	.+76     	; 0xbd9e <slide+0x56>
	}
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * FP_8);
    bd52:	ca 01       	movw	r24, r20
    bd54:	6e e1       	ldi	r22, 0x1E	; 30
    bd56:	70 e0       	ldi	r23, 0x00	; 0
    bd58:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    bd5c:	82 95       	swap	r24
    bd5e:	88 0f       	add	r24, r24
    bd60:	88 0f       	add	r24, r24
    bd62:	80 7c       	andi	r24, 0xC0	; 192
	u8 tile_y = (tile / 30 + 3) * FP_8;
	if (player->shared.direction == D_UP || player->shared.direction == D_DOWN)
	{
		if (collision_tile == 0 && ((player->shared.x - tile_x) > FP_4))
    bd64:	21 11       	cpse	r18, r1
    bd66:	0b c0       	rjmp	.+22     	; 0xbd7e <slide+0x36>
    bd68:	24 81       	ldd	r18, Z+4	; 0x04
    bd6a:	35 81       	ldd	r19, Z+5	; 0x05
    bd6c:	a9 01       	movw	r20, r18
    bd6e:	48 1b       	sub	r20, r24
    bd70:	51 09       	sbc	r21, r1
    bd72:	41 32       	cpi	r20, 0x21	; 33
    bd74:	51 05       	cpc	r21, r1
    bd76:	d0 f1       	brcs	.+116    	; 0xbdec <slide+0xa4>
			player->shared.x += FP_1; 
    bd78:	28 5f       	subi	r18, 0xF8	; 248
    bd7a:	3f 4f       	sbci	r19, 0xFF	; 255
    bd7c:	0d c0       	rjmp	.+26     	; 0xbd98 <slide+0x50>
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -FP_16))
    bd7e:	22 30       	cpi	r18, 0x02	; 2
    bd80:	a9 f5       	brne	.+106    	; 0xbdec <slide+0xa4>
    bd82:	24 81       	ldd	r18, Z+4	; 0x04
    bd84:	35 81       	ldd	r19, Z+5	; 0x05
    bd86:	a9 01       	movw	r20, r18
    bd88:	48 1b       	sub	r20, r24
    bd8a:	51 09       	sbc	r21, r1
    bd8c:	ca 01       	movw	r24, r20
    bd8e:	80 38       	cpi	r24, 0x80	; 128
    bd90:	9f 4f       	sbci	r25, 0xFF	; 255
    bd92:	60 f5       	brcc	.+88     	; 0xbdec <slide+0xa4>
			player->shared.x -= FP_1;
    bd94:	28 50       	subi	r18, 0x08	; 8
    bd96:	31 09       	sbc	r19, r1
    bd98:	35 83       	std	Z+5, r19	; 0x05
    bd9a:	24 83       	std	Z+4, r18	; 0x04
    bd9c:	08 95       	ret
}

void slide(Player* player, u8 collision_tile, int tile)
{
	u8 tile_x = (tile % 30 * FP_8);
	u8 tile_y = (tile / 30 + 3) * FP_8;
    bd9e:	ca 01       	movw	r24, r20
    bda0:	6e e1       	ldi	r22, 0x1E	; 30
    bda2:	70 e0       	ldi	r23, 0x00	; 0
    bda4:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    bda8:	cb 01       	movw	r24, r22
    bdaa:	03 96       	adiw	r24, 0x03	; 3
    bdac:	82 95       	swap	r24
    bdae:	88 0f       	add	r24, r24
    bdb0:	88 0f       	add	r24, r24
    bdb2:	80 7c       	andi	r24, 0xC0	; 192
		else if (collision_tile == 2 && ((player->shared.x - tile_x) < -FP_16))
			player->shared.x -= FP_1;
	}
	else
	{
		if (collision_tile == 0 && ((player->shared.y - tile_y) > FP_4))
    bdb4:	21 11       	cpse	r18, r1
    bdb6:	0b c0       	rjmp	.+22     	; 0xbdce <slide+0x86>
    bdb8:	26 81       	ldd	r18, Z+6	; 0x06
    bdba:	37 81       	ldd	r19, Z+7	; 0x07
    bdbc:	a9 01       	movw	r20, r18
    bdbe:	48 1b       	sub	r20, r24
    bdc0:	51 09       	sbc	r21, r1
    bdc2:	41 32       	cpi	r20, 0x21	; 33
    bdc4:	51 05       	cpc	r21, r1
    bdc6:	90 f0       	brcs	.+36     	; 0xbdec <slide+0xa4>
			player->shared.y += FP_1;
    bdc8:	28 5f       	subi	r18, 0xF8	; 248
    bdca:	3f 4f       	sbci	r19, 0xFF	; 255
    bdcc:	0d c0       	rjmp	.+26     	; 0xbde8 <slide+0xa0>
		else if (collision_tile == 2 && ((player->shared.y - tile_y) < -FP_16))
    bdce:	22 30       	cpi	r18, 0x02	; 2
    bdd0:	69 f4       	brne	.+26     	; 0xbdec <slide+0xa4>
    bdd2:	26 81       	ldd	r18, Z+6	; 0x06
    bdd4:	37 81       	ldd	r19, Z+7	; 0x07
    bdd6:	a9 01       	movw	r20, r18
    bdd8:	48 1b       	sub	r20, r24
    bdda:	51 09       	sbc	r21, r1
    bddc:	ca 01       	movw	r24, r20
    bdde:	80 38       	cpi	r24, 0x80	; 128
    bde0:	9f 4f       	sbci	r25, 0xFF	; 255
    bde2:	20 f4       	brcc	.+8      	; 0xbdec <slide+0xa4>
			player->shared.y -= FP_1;
    bde4:	28 50       	subi	r18, 0x08	; 8
    bde6:	31 09       	sbc	r19, r1
    bde8:	37 83       	std	Z+7, r19	; 0x07
    bdea:	26 83       	std	Z+6, r18	; 0x06
    bdec:	08 95       	ret

0000bdee <collision_detect_player>:
	}
}

char collision_detect_player(Player* player, u8 hud_x)
{
    bdee:	2f 92       	push	r2
    bdf0:	3f 92       	push	r3
    bdf2:	4f 92       	push	r4
    bdf4:	5f 92       	push	r5
    bdf6:	6f 92       	push	r6
    bdf8:	7f 92       	push	r7
    bdfa:	8f 92       	push	r8
    bdfc:	9f 92       	push	r9
    bdfe:	af 92       	push	r10
    be00:	bf 92       	push	r11
    be02:	cf 92       	push	r12
    be04:	df 92       	push	r13
    be06:	ef 92       	push	r14
    be08:	ff 92       	push	r15
    be0a:	0f 93       	push	r16
    be0c:	1f 93       	push	r17
    be0e:	cf 93       	push	r28
    be10:	df 93       	push	r29
    be12:	cd b7       	in	r28, 0x3d	; 61
    be14:	de b7       	in	r29, 0x3e	; 62
    be16:	2e 97       	sbiw	r28, 0x0e	; 14
    be18:	0f b6       	in	r0, 0x3f	; 63
    be1a:	f8 94       	cli
    be1c:	de bf       	out	0x3e, r29	; 62
    be1e:	0f be       	out	0x3f, r0	; 63
    be20:	cd bf       	out	0x3d, r28	; 61
    be22:	4c 01       	movw	r8, r24
    be24:	16 2f       	mov	r17, r22
	int tiles[3] = {0,0,0};
    be26:	1a 82       	std	Y+2, r1	; 0x02
    be28:	19 82       	std	Y+1, r1	; 0x01
    be2a:	1c 82       	std	Y+4, r1	; 0x04
    be2c:	1b 82       	std	Y+3, r1	; 0x03
    be2e:	1e 82       	std	Y+6, r1	; 0x06
    be30:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / FP_8;
	u8 y = player->shared.y / FP_8 - 3;
    be32:	dc 01       	movw	r26, r24
    be34:	16 96       	adiw	r26, 0x06	; 6
    be36:	4d 91       	ld	r20, X+
    be38:	5c 91       	ld	r21, X
    be3a:	17 97       	sbiw	r26, 0x07	; 7
    be3c:	06 e0       	ldi	r16, 0x06	; 6
    be3e:	56 95       	lsr	r21
    be40:	47 95       	ror	r20
    be42:	0a 95       	dec	r16
    be44:	e1 f7       	brne	.-8      	; 0xbe3e <collision_detect_player+0x50>
    be46:	43 50       	subi	r20, 0x03	; 3
}

char collision_detect_player(Player* player, u8 hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / FP_8;
    be48:	14 96       	adiw	r26, 0x04	; 4
    be4a:	8d 91       	ld	r24, X+
    be4c:	9c 91       	ld	r25, X
    be4e:	15 97       	sbiw	r26, 0x05	; 5
    be50:	bc 01       	movw	r22, r24
    be52:	86 e0       	ldi	r24, 0x06	; 6
    be54:	76 95       	lsr	r23
    be56:	67 95       	ror	r22
    be58:	8a 95       	dec	r24
    be5a:	e1 f7       	brne	.-8      	; 0xbe54 <collision_detect_player+0x66>
	u8 collision_tile = 0;
	char collision_count = 0;
	u8 tile_x;
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    be5c:	2c 91       	ld	r18, X
    be5e:	ce 01       	movw	r24, r28
    be60:	01 96       	adiw	r24, 0x01	; 1
    be62:	0e 94 53 5e 	call	0xbca6	; 0xbca6 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    be66:	c4 01       	movw	r24, r8
    be68:	0e 94 45 5b 	call	0xb68a	; 0xb68a <collision_detect_boundries>
    be6c:	88 23       	and	r24, r24
    be6e:	41 f0       	breq	.+16     	; 0xbe80 <collision_detect_player+0x92>
	{
		recoil_sprite(&player->shared);
    be70:	c4 01       	movw	r24, r8
    be72:	0e 94 3b 59 	call	0xb276	; 0xb276 <recoil_sprite>
		player->shared.speed = 0;
    be76:	f4 01       	movw	r30, r8
    be78:	13 82       	std	Z+3, r1	; 0x03
    be7a:	12 82       	std	Z+2, r1	; 0x02
		return explode;
    be7c:	1f 82       	std	Y+7, r1	; 0x07
    be7e:	46 c1       	rjmp	.+652    	; 0xc10c <collision_detect_player+0x31e>
    be80:	ce 01       	movw	r24, r28
    be82:	01 96       	adiw	r24, 0x01	; 1
    be84:	9c 87       	std	Y+12, r25	; 0x0c
    be86:	8b 87       	std	Y+11, r24	; 0x0b
	u8 tile_y;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    be88:	19 86       	std	Y+9, r1	; 0x09
    be8a:	41 2c       	mov	r4, r1
    be8c:	18 86       	std	Y+8, r1	; 0x08
    be8e:	1f 82       	std	Y+7, r1	; 0x07
    be90:	1a 86       	std	Y+10, r1	; 0x0a
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    be92:	9b e0       	ldi	r25, 0x0B	; 11
    be94:	91 0f       	add	r25, r17
    be96:	9d 87       	std	Y+13, r25	; 0x0d
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    be98:	16 5f       	subi	r17, 0xF6	; 246
    be9a:	1e 87       	std	Y+14, r17	; 0x0e
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		tile_x = tiles[i] % 30;
    be9c:	ab 85       	ldd	r26, Y+11	; 0x0b
    be9e:	bc 85       	ldd	r27, Y+12	; 0x0c
    bea0:	2d 90       	ld	r2, X+
    bea2:	3d 90       	ld	r3, X+
    bea4:	bc 87       	std	Y+12, r27	; 0x0c
    bea6:	ab 87       	std	Y+11, r26	; 0x0b
    bea8:	c1 01       	movw	r24, r2
    beaa:	6e e1       	ldi	r22, 0x1E	; 30
    beac:	70 e0       	ldi	r23, 0x00	; 0
    beae:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    beb2:	3c 01       	movw	r6, r24
		tile_y = 3 + tiles[i] / 30;
    beb4:	a3 e0       	ldi	r26, 0x03	; 3
    beb6:	5a 2e       	mov	r5, r26
    beb8:	56 0e       	add	r5, r22
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, FP_16, FP_16))
    beba:	c1 01       	movw	r24, r2
    bebc:	0e 94 ab 59 	call	0xb356	; 0xb356 <solid_directional_tile>
    bec0:	88 23       	and	r24, r24
    bec2:	f9 f0       	breq	.+62     	; 0xbf02 <collision_detect_player+0x114>
    bec4:	f4 01       	movw	r30, r8
    bec6:	46 81       	ldd	r20, Z+6	; 0x06
    bec8:	57 81       	ldd	r21, Z+7	; 0x07
    beca:	64 81       	ldd	r22, Z+4	; 0x04
    becc:	75 81       	ldd	r23, Z+5	; 0x05
    bece:	00 e8       	ldi	r16, 0x80	; 128
    bed0:	10 e0       	ldi	r17, 0x00	; 0
    bed2:	20 e8       	ldi	r18, 0x80	; 128
    bed4:	30 e0       	ldi	r19, 0x00	; 0
    bed6:	c1 01       	movw	r24, r2
    bed8:	0e 94 d5 59 	call	0xb3aa	; 0xb3aa <collides_directional_tile>
    bedc:	88 23       	and	r24, r24
    bede:	89 f0       	breq	.+34     	; 0xbf02 <collision_detect_player+0x114>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(player, &player->shared);
    bee0:	d4 01       	movw	r26, r8
    bee2:	18 96       	adiw	r26, 0x08	; 8
    bee4:	8c 91       	ld	r24, X
    bee6:	89 30       	cpi	r24, 0x09	; 9
    bee8:	21 f4       	brne	.+8      	; 0xbef2 <collision_detect_player+0x104>
    beea:	c4 01       	movw	r24, r8
    beec:	0e 94 3b 59 	call	0xb276	; 0xb276 <recoil_sprite>
    bef0:	04 c0       	rjmp	.+8      	; 0xbefa <collision_detect_player+0x10c>
    bef2:	b4 01       	movw	r22, r8
    bef4:	c4 01       	movw	r24, r8
    bef6:	0e 94 6d 59 	call	0xb2da	; 0xb2da <recoil_sprite_fine>
			player->shared.speed = 0;
    befa:	f4 01       	movw	r30, r8
    befc:	13 82       	std	Z+3, r1	; 0x03
    befe:	12 82       	std	Z+2, r1	; 0x02
    bf00:	de c0       	rjmp	.+444    	; 0xc0be <collision_detect_player+0x2d0>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,FP_16,FP_16,tile_x*FP_8,tile_y*FP_8,FP_8,FP_8))
    bf02:	c1 01       	movw	r24, r2
    bf04:	0e 94 99 59 	call	0xb332	; 0xb332 <solid_square_tile>
    bf08:	88 23       	and	r24, r24
    bf0a:	49 f1       	breq	.+82     	; 0xbf5e <collision_detect_player+0x170>
    bf0c:	f0 e4       	ldi	r31, 0x40	; 64
    bf0e:	5f 9e       	mul	r5, r31
    bf10:	70 01       	movw	r14, r0
    bf12:	11 24       	eor	r1, r1
    bf14:	83 01       	movw	r16, r6
    bf16:	11 27       	eor	r17, r17
    bf18:	66 e0       	ldi	r22, 0x06	; 6
    bf1a:	00 0f       	add	r16, r16
    bf1c:	11 1f       	adc	r17, r17
    bf1e:	6a 95       	dec	r22
    bf20:	e1 f7       	brne	.-8      	; 0xbf1a <collision_detect_player+0x12c>
    bf22:	d4 01       	movw	r26, r8
    bf24:	16 96       	adiw	r26, 0x06	; 6
    bf26:	6d 91       	ld	r22, X+
    bf28:	7c 91       	ld	r23, X
    bf2a:	17 97       	sbiw	r26, 0x07	; 7
    bf2c:	e0 e4       	ldi	r30, 0x40	; 64
    bf2e:	ae 2e       	mov	r10, r30
    bf30:	b1 2c       	mov	r11, r1
    bf32:	f0 e4       	ldi	r31, 0x40	; 64
    bf34:	cf 2e       	mov	r12, r31
    bf36:	d1 2c       	mov	r13, r1
    bf38:	20 e8       	ldi	r18, 0x80	; 128
    bf3a:	30 e0       	ldi	r19, 0x00	; 0
    bf3c:	40 e8       	ldi	r20, 0x80	; 128
    bf3e:	50 e0       	ldi	r21, 0x00	; 0
    bf40:	14 96       	adiw	r26, 0x04	; 4
    bf42:	8d 91       	ld	r24, X+
    bf44:	9c 91       	ld	r25, X
    bf46:	15 97       	sbiw	r26, 0x05	; 5
    bf48:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
    bf4c:	88 23       	and	r24, r24
    bf4e:	39 f0       	breq	.+14     	; 0xbf5e <collision_detect_player+0x170>
		{
			collision_count++;
    bf50:	43 94       	inc	r4
			collision_tile = i;
			player->shared.speed = 0;
    bf52:	f4 01       	movw	r30, r8
    bf54:	13 82       	std	Z+3, r1	; 0x03
    bf56:	12 82       	std	Z+2, r1	; 0x02
    bf58:	f9 85       	ldd	r31, Y+9	; 0x09
    bf5a:	f8 87       	std	Y+8, r31	; 0x08
    bf5c:	b0 c0       	rjmp	.+352    	; 0xc0be <collision_detect_player+0x2d0>
		}
		else if (level.level_map[tiles[i]] == L_WATER && LBCollides(player->shared.x,player->shared.y,FP_16,FP_16,tile_x*FP_8,tile_y*FP_8,FP_8,FP_8))
    bf5e:	f1 01       	movw	r30, r2
    bf60:	ed 54       	subi	r30, 0x4D	; 77
    bf62:	f3 4f       	sbci	r31, 0xF3	; 243
    bf64:	81 81       	ldd	r24, Z+1	; 0x01
    bf66:	8d 34       	cpi	r24, 0x4D	; 77
    bf68:	59 f5       	brne	.+86     	; 0xbfc0 <collision_detect_player+0x1d2>
    bf6a:	80 e4       	ldi	r24, 0x40	; 64
    bf6c:	58 9e       	mul	r5, r24
    bf6e:	70 01       	movw	r14, r0
    bf70:	11 24       	eor	r1, r1
    bf72:	83 01       	movw	r16, r6
    bf74:	11 27       	eor	r17, r17
    bf76:	36 e0       	ldi	r19, 0x06	; 6
    bf78:	00 0f       	add	r16, r16
    bf7a:	11 1f       	adc	r17, r17
    bf7c:	3a 95       	dec	r19
    bf7e:	e1 f7       	brne	.-8      	; 0xbf78 <collision_detect_player+0x18a>
    bf80:	d4 01       	movw	r26, r8
    bf82:	16 96       	adiw	r26, 0x06	; 6
    bf84:	6d 91       	ld	r22, X+
    bf86:	7c 91       	ld	r23, X
    bf88:	17 97       	sbiw	r26, 0x07	; 7
    bf8a:	40 e4       	ldi	r20, 0x40	; 64
    bf8c:	a4 2e       	mov	r10, r20
    bf8e:	b1 2c       	mov	r11, r1
    bf90:	50 e4       	ldi	r21, 0x40	; 64
    bf92:	c5 2e       	mov	r12, r21
    bf94:	d1 2c       	mov	r13, r1
    bf96:	20 e8       	ldi	r18, 0x80	; 128
    bf98:	30 e0       	ldi	r19, 0x00	; 0
    bf9a:	40 e8       	ldi	r20, 0x80	; 128
    bf9c:	50 e0       	ldi	r21, 0x00	; 0
    bf9e:	14 96       	adiw	r26, 0x04	; 4
    bfa0:	8d 91       	ld	r24, X+
    bfa2:	9c 91       	ld	r25, X
    bfa4:	15 97       	sbiw	r26, 0x05	; 5
    bfa6:	0e 94 c7 53 	call	0xa78e	; 0xa78e <LBCollides>
    bfaa:	88 23       	and	r24, r24
    bfac:	09 f4       	brne	.+2      	; 0xbfb0 <collision_detect_player+0x1c2>
    bfae:	87 c0       	rjmp	.+270    	; 0xc0be <collision_detect_player+0x2d0>
		{
			player->max_speed = WATER_SPEED;
    bfb0:	80 e0       	ldi	r24, 0x00	; 0
    bfb2:	91 e0       	ldi	r25, 0x01	; 1
    bfb4:	f4 01       	movw	r30, r8
    bfb6:	96 8f       	std	Z+30, r25	; 0x1e
    bfb8:	85 8f       	std	Z+29, r24	; 0x1d
    bfba:	91 e0       	ldi	r25, 0x01	; 1
    bfbc:	9a 87       	std	Y+10, r25	; 0x0a
    bfbe:	8c c0       	rjmp	.+280    	; 0xc0d8 <collision_detect_player+0x2ea>
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SCOPE && LBCollides(player->shared.x,player->shared.y,FP_16,FP_16,tile_x*FP_8,tile_y*FP_8,FP_8,FP_8))
    bfc0:	8c 32       	cpi	r24, 0x2C	; 44
    bfc2:	d9 f4       	brne	.+54     	; 0xbffa <collision_detect_player+0x20c>
    bfc4:	a0 e4       	ldi	r26, 0x40	; 64
    bfc6:	5a 9e       	mul	r5, r26
    bfc8:	70 01       	movw	r14, r0
    bfca:	11 24       	eor	r1, r1
    bfcc:	83 01       	movw	r16, r6
    bfce:	11 27       	eor	r17, r17
    bfd0:	86 e0       	ldi	r24, 0x06	; 6
    bfd2:	00 0f       	add	r16, r16
    bfd4:	11 1f       	adc	r17, r17
    bfd6:	8a 95       	dec	r24
    bfd8:	e1 f7       	brne	.-8      	; 0xbfd2 <collision_detect_player+0x1e4>
    bfda:	f4 01       	movw	r30, r8
    bfdc:	66 81       	ldd	r22, Z+6	; 0x06
    bfde:	77 81       	ldd	r23, Z+7	; 0x07
    bfe0:	90 e4       	ldi	r25, 0x40	; 64
    bfe2:	a9 2e       	mov	r10, r25
    bfe4:	b1 2c       	mov	r11, r1
    bfe6:	20 e4       	ldi	r18, 0x40	; 64
    bfe8:	c2 2e       	mov	r12, r18
    bfea:	d1 2c       	mov	r13, r1
    bfec:	20 e8       	ldi	r18, 0x80	; 128
    bfee:	30 e0       	ldi	r19, 0x00	; 0
    bff0:	40 e8       	ldi	r20, 0x80	; 128
    bff2:	50 e0       	ldi	r21, 0x00	; 0
    bff4:	84 81       	ldd	r24, Z+4	; 0x04
    bff6:	95 81       	ldd	r25, Z+5	; 0x05
    bff8:	d6 cf       	rjmp	.-84     	; 0xbfa6 <collision_detect_player+0x1b8>
		{
			player->max_speed = WATER_SPEED;
			hit_water = 1;
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    bffa:	87 30       	cpi	r24, 0x07	; 7
    bffc:	a9 f4       	brne	.+42     	; 0xc028 <collision_detect_player+0x23a>
    bffe:	d4 01       	movw	r26, r8
    c000:	52 96       	adiw	r26, 0x12	; 18
    c002:	8c 91       	ld	r24, X
    c004:	52 97       	sbiw	r26, 0x12	; 18
    c006:	80 fd       	sbrc	r24, 0
    c008:	5a c0       	rjmp	.+180    	; 0xc0be <collision_detect_player+0x2d0>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c00a:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    c00c:	e0 e0       	ldi	r30, 0x00	; 0
    c00e:	f2 e0       	ldi	r31, 0x02	; 2
    c010:	5e 96       	adiw	r26, 0x1e	; 30
    c012:	fc 93       	st	X, r31
    c014:	ee 93       	st	-X, r30
    c016:	5d 97       	sbiw	r26, 0x1d	; 29
			player->has_over_speed = true;
    c018:	f1 e0       	ldi	r31, 0x01	; 1
    c01a:	57 96       	adiw	r26, 0x17	; 23
    c01c:	fc 93       	st	X, r31
			DrawMap2(hud_x+10, 1, map_speed_itm);
    c01e:	46 e0       	ldi	r20, 0x06	; 6
    c020:	5e e7       	ldi	r21, 0x7E	; 126
    c022:	61 e0       	ldi	r22, 0x01	; 1
    c024:	8e 85       	ldd	r24, Y+14	; 0x0e
    c026:	10 c0       	rjmp	.+32     	; 0xc048 <collision_detect_player+0x25a>
			SetTile(tile_x, tile_y, 0);
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    c028:	89 30       	cpi	r24, 0x09	; 9
    c02a:	29 f5       	brne	.+74     	; 0xc076 <collision_detect_player+0x288>
    c02c:	d4 01       	movw	r26, r8
    c02e:	52 96       	adiw	r26, 0x12	; 18
    c030:	8c 91       	ld	r24, X
    c032:	52 97       	sbiw	r26, 0x12	; 18
    c034:	80 fd       	sbrc	r24, 0
    c036:	43 c0       	rjmp	.+134    	; 0xc0be <collision_detect_player+0x2d0>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c038:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    c03a:	e1 e0       	ldi	r30, 0x01	; 1
    c03c:	56 96       	adiw	r26, 0x16	; 22
    c03e:	ec 93       	st	X, r30
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    c040:	40 e0       	ldi	r20, 0x00	; 0
    c042:	5e e7       	ldi	r21, 0x7E	; 126
    c044:	61 e0       	ldi	r22, 0x01	; 1
    c046:	8d 85       	ldd	r24, Y+13	; 0x0d
    c048:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
			SetTile(tile_x, tile_y, 0);
    c04c:	40 e0       	ldi	r20, 0x00	; 0
    c04e:	50 e0       	ldi	r21, 0x00	; 0
    c050:	65 2d       	mov	r22, r5
    c052:	86 2d       	mov	r24, r6
    c054:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
			SFX_ITEM;
    c058:	80 91 4b 0c 	lds	r24, 0x0C4B
    c05c:	80 fd       	sbrc	r24, 0
    c05e:	2f c0       	rjmp	.+94     	; 0xc0be <collision_detect_player+0x2d0>
    c060:	80 91 b4 0f 	lds	r24, 0x0FB4
    c064:	80 fd       	sbrc	r24, 0
    c066:	2b c0       	rjmp	.+86     	; 0xc0be <collision_detect_player+0x2d0>
    c068:	2f ef       	ldi	r18, 0xFF	; 255
    c06a:	47 e1       	ldi	r20, 0x17	; 23
    c06c:	63 e0       	ldi	r22, 0x03	; 3
    c06e:	84 e0       	ldi	r24, 0x04	; 4
    c070:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
    c074:	24 c0       	rjmp	.+72     	; 0xc0be <collision_detect_player+0x2d0>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    c076:	88 30       	cpi	r24, 0x08	; 8
    c078:	11 f5       	brne	.+68     	; 0xc0be <collision_detect_player+0x2d0>
    c07a:	d4 01       	movw	r26, r8
    c07c:	52 96       	adiw	r26, 0x12	; 18
    c07e:	8c 91       	ld	r24, X
    c080:	80 fd       	sbrc	r24, 0
    c082:	1d c0       	rjmp	.+58     	; 0xc0be <collision_detect_player+0x2d0>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    c084:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tile_x, tile_y, 0);
    c086:	40 e0       	ldi	r20, 0x00	; 0
    c088:	50 e0       	ldi	r21, 0x00	; 0
    c08a:	65 2d       	mov	r22, r5
    c08c:	86 2d       	mov	r24, r6
    c08e:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
			SFX_ITEM;
    c092:	80 91 4b 0c 	lds	r24, 0x0C4B
    c096:	80 fd       	sbrc	r24, 0
    c098:	0d c0       	rjmp	.+26     	; 0xc0b4 <collision_detect_player+0x2c6>
    c09a:	80 91 b4 0f 	lds	r24, 0x0FB4
    c09e:	80 fd       	sbrc	r24, 0
    c0a0:	0c c0       	rjmp	.+24     	; 0xc0ba <collision_detect_player+0x2cc>
    c0a2:	2f ef       	ldi	r18, 0xFF	; 255
    c0a4:	47 e1       	ldi	r20, 0x17	; 23
    c0a6:	63 e0       	ldi	r22, 0x03	; 3
    c0a8:	84 e0       	ldi	r24, 0x04	; 4
    c0aa:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
			explode = 1;
    c0ae:	b1 e0       	ldi	r27, 0x01	; 1
    c0b0:	bf 83       	std	Y+7, r27	; 0x07
    c0b2:	05 c0       	rjmp	.+10     	; 0xc0be <collision_detect_player+0x2d0>
    c0b4:	e1 e0       	ldi	r30, 0x01	; 1
    c0b6:	ef 83       	std	Y+7, r30	; 0x07
    c0b8:	02 c0       	rjmp	.+4      	; 0xc0be <collision_detect_player+0x2d0>
    c0ba:	f1 e0       	ldi	r31, 0x01	; 1
    c0bc:	ff 83       	std	Y+7, r31	; 0x07
		}
		
		if (!hit_water)
    c0be:	8a 85       	ldd	r24, Y+10	; 0x0a
    c0c0:	81 11       	cpse	r24, r1
    c0c2:	08 c0       	rjmp	.+16     	; 0xc0d4 <collision_detect_player+0x2e6>
		{
			player->max_speed = MAX_SPEED;
    c0c4:	e0 e0       	ldi	r30, 0x00	; 0
    c0c6:	f2 e0       	ldi	r31, 0x02	; 2
    c0c8:	d4 01       	movw	r26, r8
    c0ca:	5e 96       	adiw	r26, 0x1e	; 30
    c0cc:	fc 93       	st	X, r31
    c0ce:	ee 93       	st	-X, r30
    c0d0:	5d 97       	sbiw	r26, 0x1d	; 29
    c0d2:	02 c0       	rjmp	.+4      	; 0xc0d8 <collision_detect_player+0x2ea>
    c0d4:	f1 e0       	ldi	r31, 0x01	; 1
    c0d6:	fa 87       	std	Y+10, r31	; 0x0a
		player->shared.speed = 0;
		return explode;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    c0d8:	89 85       	ldd	r24, Y+9	; 0x09
    c0da:	8f 5f       	subi	r24, 0xFF	; 255
    c0dc:	89 87       	std	Y+9, r24	; 0x09
    c0de:	83 30       	cpi	r24, 0x03	; 3
    c0e0:	09 f0       	breq	.+2      	; 0xc0e4 <collision_detect_player+0x2f6>
    c0e2:	dc ce       	rjmp	.-584    	; 0xbe9c <collision_detect_player+0xae>
			if (player->has_over_speed) player->max_speed = OVER_SPEED;
		}
	}
	
	// Slide
	if (collision_count) recoil_sprite(&player->shared);
    c0e4:	44 20       	and	r4, r4
    c0e6:	91 f0       	breq	.+36     	; 0xc10c <collision_detect_player+0x31e>
    c0e8:	c4 01       	movw	r24, r8
    c0ea:	0e 94 3b 59 	call	0xb276	; 0xb276 <recoil_sprite>
	if (collision_count == 1)
    c0ee:	91 e0       	ldi	r25, 0x01	; 1
    c0f0:	49 12       	cpse	r4, r25
    c0f2:	0c c0       	rjmp	.+24     	; 0xc10c <collision_detect_player+0x31e>
	{
		slide(player, collision_tile, tiles[collision_tile]);
    c0f4:	fe 01       	movw	r30, r28
    c0f6:	a8 85       	ldd	r26, Y+8	; 0x08
    c0f8:	ea 0f       	add	r30, r26
    c0fa:	f1 1d       	adc	r31, r1
    c0fc:	ea 0f       	add	r30, r26
    c0fe:	f1 1d       	adc	r31, r1
    c100:	41 81       	ldd	r20, Z+1	; 0x01
    c102:	52 81       	ldd	r21, Z+2	; 0x02
    c104:	6a 2f       	mov	r22, r26
    c106:	c4 01       	movw	r24, r8
    c108:	0e 94 a4 5e 	call	0xbd48	; 0xbd48 <slide>
	}
	return explode;
}
    c10c:	8f 81       	ldd	r24, Y+7	; 0x07
    c10e:	2e 96       	adiw	r28, 0x0e	; 14
    c110:	0f b6       	in	r0, 0x3f	; 63
    c112:	f8 94       	cli
    c114:	de bf       	out	0x3e, r29	; 62
    c116:	0f be       	out	0x3f, r0	; 63
    c118:	cd bf       	out	0x3d, r28	; 61
    c11a:	df 91       	pop	r29
    c11c:	cf 91       	pop	r28
    c11e:	1f 91       	pop	r17
    c120:	0f 91       	pop	r16
    c122:	ff 90       	pop	r15
    c124:	ef 90       	pop	r14
    c126:	df 90       	pop	r13
    c128:	cf 90       	pop	r12
    c12a:	bf 90       	pop	r11
    c12c:	af 90       	pop	r10
    c12e:	9f 90       	pop	r9
    c130:	8f 90       	pop	r8
    c132:	7f 90       	pop	r7
    c134:	6f 90       	pop	r6
    c136:	5f 90       	pop	r5
    c138:	4f 90       	pop	r4
    c13a:	3f 90       	pop	r3
    c13c:	2f 90       	pop	r2
    c13e:	08 95       	ret

0000c140 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    c140:	ef 92       	push	r14
    c142:	ff 92       	push	r15
    c144:	1f 93       	push	r17
    c146:	cf 93       	push	r28
    c148:	df 93       	push	r29
    c14a:	18 2f       	mov	r17, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c14c:	c0 e0       	ldi	r28, 0x00	; 0
    c14e:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    c150:	8e e1       	ldi	r24, 0x1E	; 30
    c152:	e8 2e       	mov	r14, r24
    c154:	f1 2c       	mov	r15, r1
    c156:	ce 01       	movw	r24, r28
    c158:	b7 01       	movw	r22, r14
    c15a:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
		y = 3 + i / 30;
    c15e:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    c160:	11 23       	and	r17, r17
    c162:	19 f0       	breq	.+6      	; 0xc16a <load_level_tiles+0x2a>
		{
			DrawMap2(x, y, map_tile_none);
    c164:	43 ea       	ldi	r20, 0xA3	; 163
    c166:	5e e7       	ldi	r21, 0x7E	; 126
    c168:	2d c0       	rjmp	.+90     	; 0xc1c4 <load_level_tiles+0x84>
    c16a:	fe 01       	movw	r30, r28
    c16c:	ed 54       	subi	r30, 0x4D	; 77
    c16e:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    c170:	91 81       	ldd	r25, Z+1	; 0x01
    c172:	97 30       	cpi	r25, 0x07	; 7
    c174:	99 f1       	breq	.+102    	; 0xc1dc <load_level_tiles+0x9c>
    c176:	88 f4       	brcc	.+34     	; 0xc19a <load_level_tiles+0x5a>
    c178:	93 30       	cpi	r25, 0x03	; 3
    c17a:	39 f1       	breq	.+78     	; 0xc1ca <load_level_tiles+0x8a>
    c17c:	40 f4       	brcc	.+16     	; 0xc18e <load_level_tiles+0x4e>
    c17e:	91 30       	cpi	r25, 0x01	; 1
    c180:	f9 f0       	breq	.+62     	; 0xc1c0 <load_level_tiles+0x80>
    c182:	92 30       	cpi	r25, 0x02	; 2
    c184:	09 f0       	breq	.+2      	; 0xc188 <load_level_tiles+0x48>
    c186:	3f c0       	rjmp	.+126    	; 0xc206 <load_level_tiles+0xc6>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
    c188:	49 e0       	ldi	r20, 0x09	; 9
    c18a:	5e e7       	ldi	r21, 0x7E	; 126
    c18c:	1b c0       	rjmp	.+54     	; 0xc1c4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c18e:	95 30       	cpi	r25, 0x05	; 5
    c190:	f9 f0       	breq	.+62     	; 0xc1d0 <load_level_tiles+0x90>
    c192:	08 f5       	brcc	.+66     	; 0xc1d6 <load_level_tiles+0x96>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    c194:	4e ee       	ldi	r20, 0xEE	; 238
    c196:	5d e7       	ldi	r21, 0x7D	; 125
    c198:	15 c0       	rjmp	.+42     	; 0xc1c4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c19a:	9c 32       	cpi	r25, 0x2C	; 44
    c19c:	59 f1       	breq	.+86     	; 0xc1f4 <load_level_tiles+0xb4>
    c19e:	38 f4       	brcc	.+14     	; 0xc1ae <load_level_tiles+0x6e>
    c1a0:	98 30       	cpi	r25, 0x08	; 8
    c1a2:	f9 f0       	breq	.+62     	; 0xc1e2 <load_level_tiles+0xa2>
    c1a4:	99 30       	cpi	r25, 0x09	; 9
    c1a6:	79 f5       	brne	.+94     	; 0xc206 <load_level_tiles+0xc6>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
				case L_BR: DrawMap2(x, y, map_metal_br); break;
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    c1a8:	40 e0       	ldi	r20, 0x00	; 0
    c1aa:	5e e7       	ldi	r21, 0x7E	; 126
    c1ac:	0b c0       	rjmp	.+22     	; 0xc1c4 <load_level_tiles+0x84>
		{
			DrawMap2(x, y, map_tile_none);
		}
		else
		{
			switch (level.level_map[i])
    c1ae:	92 34       	cpi	r25, 0x42	; 66
    c1b0:	d9 f0       	breq	.+54     	; 0xc1e8 <load_level_tiles+0xa8>
    c1b2:	9d 34       	cpi	r25, 0x4D	; 77
    c1b4:	e1 f0       	breq	.+56     	; 0xc1ee <load_level_tiles+0xae>
    c1b6:	97 33       	cpi	r25, 0x37	; 55
    c1b8:	31 f5       	brne	.+76     	; 0xc206 <load_level_tiles+0xc6>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
				case L_WATER: DrawMap2(x, y, map_water); break;
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
				case L_FENCE: DrawMap2(x, y, map_fence); break;
    c1ba:	42 ee       	ldi	r20, 0xE2	; 226
    c1bc:	5d e7       	ldi	r21, 0x7D	; 125
    c1be:	02 c0       	rjmp	.+4      	; 0xc1c4 <load_level_tiles+0x84>
		}
		else
		{
			switch (level.level_map[i])
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    c1c0:	4c e0       	ldi	r20, 0x0C	; 12
    c1c2:	5e e7       	ldi	r21, 0x7E	; 126
    c1c4:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
    c1c8:	22 c0       	rjmp	.+68     	; 0xc20e <load_level_tiles+0xce>
				case L_METAL: DrawMap2(x, y, map_metal); break;
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    c1ca:	44 ef       	ldi	r20, 0xF4	; 244
    c1cc:	5d e7       	ldi	r21, 0x7D	; 125
    c1ce:	fa cf       	rjmp	.-12     	; 0xc1c4 <load_level_tiles+0x84>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    c1d0:	4b ee       	ldi	r20, 0xEB	; 235
    c1d2:	5d e7       	ldi	r21, 0x7D	; 125
    c1d4:	f7 cf       	rjmp	.-18     	; 0xc1c4 <load_level_tiles+0x84>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    c1d6:	41 ef       	ldi	r20, 0xF1	; 241
    c1d8:	5d e7       	ldi	r21, 0x7D	; 125
    c1da:	f4 cf       	rjmp	.-24     	; 0xc1c4 <load_level_tiles+0x84>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    c1dc:	46 e0       	ldi	r20, 0x06	; 6
    c1de:	5e e7       	ldi	r21, 0x7E	; 126
    c1e0:	f1 cf       	rjmp	.-30     	; 0xc1c4 <load_level_tiles+0x84>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    c1e2:	43 e0       	ldi	r20, 0x03	; 3
    c1e4:	5e e7       	ldi	r21, 0x7E	; 126
    c1e6:	ee cf       	rjmp	.-36     	; 0xc1c4 <load_level_tiles+0x84>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				case L_TURF: DrawMap2(x, y, map_turf); break;
    c1e8:	45 ee       	ldi	r20, 0xE5	; 229
    c1ea:	5d e7       	ldi	r21, 0x7D	; 125
    c1ec:	eb cf       	rjmp	.-42     	; 0xc1c4 <load_level_tiles+0x84>
				case L_WATER: DrawMap2(x, y, map_water); break;
    c1ee:	48 ee       	ldi	r20, 0xE8	; 232
    c1f0:	5d e7       	ldi	r21, 0x7D	; 125
    c1f2:	e8 cf       	rjmp	.-48     	; 0xc1c4 <load_level_tiles+0x84>
				case L_SCOPE: DrawMap2(x, y, map_water); scope_animation.tile_index = i; break;
    c1f4:	48 ee       	ldi	r20, 0xE8	; 232
    c1f6:	5d e7       	ldi	r21, 0x7D	; 125
    c1f8:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
    c1fc:	d0 93 30 10 	sts	0x1030, r29
    c200:	c0 93 2f 10 	sts	0x102F, r28
    c204:	04 c0       	rjmp	.+8      	; 0xc20e <load_level_tiles+0xce>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
    c206:	40 e0       	ldi	r20, 0x00	; 0
    c208:	50 e0       	ldi	r21, 0x00	; 0
    c20a:	0e 94 ca 43 	call	0x8794	; 0x8794 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    c20e:	21 96       	adiw	r28, 0x01	; 1
    c210:	ce 3e       	cpi	r28, 0xEE	; 238
    c212:	82 e0       	ldi	r24, 0x02	; 2
    c214:	d8 07       	cpc	r29, r24
    c216:	09 f0       	breq	.+2      	; 0xc21a <load_level_tiles+0xda>
    c218:	9e cf       	rjmp	.-196    	; 0xc156 <load_level_tiles+0x16>
				case L_FENCE: DrawMap2(x, y, map_fence); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    c21a:	df 91       	pop	r29
    c21c:	cf 91       	pop	r28
    c21e:	1f 91       	pop	r17
    c220:	ff 90       	pop	r15
    c222:	ef 90       	pop	r14
    c224:	08 95       	ret

0000c226 <prep_player>:

void prep_player(Player* p, u8 x, u8 y)
{
    c226:	cf 93       	push	r28
    c228:	df 93       	push	r29
    c22a:	ec 01       	movw	r28, r24
	p->spawn_x = x;
    c22c:	68 8b       	std	Y+16, r22	; 0x10
	p->spawn_y = y;
    c22e:	49 8b       	std	Y+17, r20	; 0x11
	p->level_score = 0;
    c230:	1d 86       	std	Y+13, r1	; 0x0d
	p->has_over_speed = false;
    c232:	1f 8a       	std	Y+23, r1	; 0x17
	p->has_rocket = false;
    c234:	1e 8a       	std	Y+22, r1	; 0x16
	p->max_speed = MAX_SPEED;
    c236:	80 e0       	ldi	r24, 0x00	; 0
    c238:	92 e0       	ldi	r25, 0x02	; 2
    c23a:	9e 8f       	std	Y+30, r25	; 0x1e
    c23c:	8d 8f       	std	Y+29, r24	; 0x1d
	player_init_shot_state(p);
    c23e:	ce 01       	movw	r24, r28
    c240:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <player_init_shot_state>
	player_spawn(p);
    c244:	ce 01       	movw	r24, r28
}
    c246:	df 91       	pop	r29
    c248:	cf 91       	pop	r28
	p->level_score = 0;
	p->has_over_speed = false;
	p->has_rocket = false;
	p->max_speed = MAX_SPEED;
	player_init_shot_state(p);
	player_spawn(p);
    c24a:	0c 94 09 56 	jmp	0xac12	; 0xac12 <player_spawn>

0000c24e <load_level>:
}

void load_level(int level_number)
{
    c24e:	8f 92       	push	r8
    c250:	9f 92       	push	r9
    c252:	af 92       	push	r10
    c254:	bf 92       	push	r11
    c256:	cf 92       	push	r12
    c258:	df 92       	push	r13
    c25a:	ef 92       	push	r14
    c25c:	ff 92       	push	r15
    c25e:	0f 93       	push	r16
    c260:	1f 93       	push	r17
    c262:	cf 93       	push	r28
    c264:	df 93       	push	r29
    c266:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    c268:	8e ee       	ldi	r24, 0xEE	; 238
    c26a:	92 e0       	ldi	r25, 0x02	; 2
    c26c:	c8 9f       	mul	r28, r24
    c26e:	70 01       	movw	r14, r0
    c270:	c9 9f       	mul	r28, r25
    c272:	f0 0c       	add	r15, r0
    c274:	d8 9f       	mul	r29, r24
    c276:	f0 0c       	add	r15, r0
    c278:	11 24       	eor	r1, r1
	u8 x;
	u8 y;

	game.scope_counter = 0;
    c27a:	10 92 14 0c 	sts	0x0C14, r1
    c27e:	10 92 13 0c 	sts	0x0C13, r1
	init_tile_animations(&tile_animations);
    c282:	8c e1       	ldi	r24, 0x1C	; 28
    c284:	9c e0       	ldi	r25, 0x0C	; 12
    c286:	0e 94 9d 54 	call	0xa93a	; 0xa93a <init_tile_animations>
	init_scope_animation(&scope_animation);
    c28a:	83 e2       	ldi	r24, 0x23	; 35
    c28c:	90 e1       	ldi	r25, 0x10	; 16
    c28e:	0e 94 c4 54 	call	0xa988	; 0xa988 <init_scope_animation>
	init_sub_animation(&sub_animation);
    c292:	85 e1       	ldi	r24, 0x15	; 21
    c294:	90 e1       	ldi	r25, 0x10	; 16
    c296:	0e 94 dc 54 	call	0xa9b8	; 0xa9b8 <init_sub_animation>
	game.current_screen = LEVEL;
    c29a:	83 e0       	ldi	r24, 0x03	; 3
    c29c:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    c2a0:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
	game.current_level = level_number;
    c2a4:	c0 93 07 0c 	sts	0x0C07, r28
    c2a8:	84 eb       	ldi	r24, 0xB4	; 180
    c2aa:	a8 2e       	mov	r10, r24
    c2ac:	8c e0       	ldi	r24, 0x0C	; 12
    c2ae:	b8 2e       	mov	r11, r24
	for (int i = 0; i < 30*25; i++)
    c2b0:	00 e0       	ldi	r16, 0x00	; 0
    c2b2:	10 e0       	ldi	r17, 0x00	; 0
	{
		x = (i % 30) * 8;
    c2b4:	9e e1       	ldi	r25, 0x1E	; 30
    c2b6:	c9 2e       	mov	r12, r25
    c2b8:	d1 2c       	mov	r13, r1
    c2ba:	c8 01       	movw	r24, r16
    c2bc:	b6 01       	movw	r22, r12
    c2be:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    c2c2:	d8 2f       	mov	r29, r24
    c2c4:	dd 0f       	add	r29, r29
    c2c6:	dd 0f       	add	r29, r29
    c2c8:	dd 0f       	add	r29, r29
		y = (i / 30 + 3) * 8;
    c2ca:	ab 01       	movw	r20, r22
    c2cc:	4d 5f       	subi	r20, 0xFD	; 253
    c2ce:	5f 4f       	sbci	r21, 0xFF	; 255
    c2d0:	c4 2f       	mov	r28, r20
    c2d2:	cc 0f       	add	r28, r28
    c2d4:	cc 0f       	add	r28, r28
    c2d6:	cc 0f       	add	r28, r28
    c2d8:	f8 01       	movw	r30, r16
    c2da:	ee 0d       	add	r30, r14
    c2dc:	ff 1d       	adc	r31, r15
    c2de:	ea 52       	subi	r30, 0x2A	; 42
    c2e0:	f5 4e       	sbci	r31, 0xE5	; 229
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    c2e2:	e4 91       	lpm	r30, Z
    c2e4:	45 01       	movw	r8, r10
    c2e6:	d5 01       	movw	r26, r10
    c2e8:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    c2ea:	e8 35       	cpi	r30, 0x58	; 88
    c2ec:	31 f4       	brne	.+12     	; 0xc2fa <load_level+0xac>
		{
			prep_player(&player1, x, y);
    c2ee:	4c 2f       	mov	r20, r28
    c2f0:	6d 2f       	mov	r22, r29
    c2f2:	89 e3       	ldi	r24, 0x39	; 57
    c2f4:	9c e0       	ldi	r25, 0x0C	; 12
    c2f6:	0e 94 13 61 	call	0xc226	; 0xc226 <prep_player>
    c2fa:	bf ef       	ldi	r27, 0xFF	; 255
    c2fc:	ab 1a       	sub	r10, r27
    c2fe:	bb 0a       	sbc	r11, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    c300:	f4 01       	movw	r30, r8
    c302:	80 81       	ld	r24, Z
    c304:	83 36       	cpi	r24, 0x63	; 99
    c306:	31 f4       	brne	.+12     	; 0xc314 <load_level+0xc6>
		{
			prep_player(&player2, x, y);
    c308:	4c 2f       	mov	r20, r28
    c30a:	6d 2f       	mov	r22, r29
    c30c:	82 ea       	ldi	r24, 0xA2	; 162
    c30e:	9f e0       	ldi	r25, 0x0F	; 15
    c310:	0e 94 13 61 	call	0xc226	; 0xc226 <prep_player>
	init_scope_animation(&scope_animation);
	init_sub_animation(&sub_animation);
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    c314:	0f 5f       	subi	r16, 0xFF	; 255
    c316:	1f 4f       	sbci	r17, 0xFF	; 255
    c318:	0e 3e       	cpi	r16, 0xEE	; 238
    c31a:	f2 e0       	ldi	r31, 0x02	; 2
    c31c:	1f 07       	cpc	r17, r31
    c31e:	69 f6       	brne	.-102    	; 0xc2ba <load_level+0x6c>
		if (level.level_map[i] == L_P2_SPAWN)
		{
			prep_player(&player2, x, y);
		}
	}
	render_hud(&player1, 0);
    c320:	60 e0       	ldi	r22, 0x00	; 0
    c322:	89 e3       	ldi	r24, 0x39	; 57
    c324:	9c e0       	ldi	r25, 0x0C	; 12
    c326:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <render_hud>
	render_hud(&player2, 15);
    c32a:	6f e0       	ldi	r22, 0x0F	; 15
    c32c:	82 ea       	ldi	r24, 0xA2	; 162
    c32e:	9f e0       	ldi	r25, 0x0F	; 15
    c330:	0e 94 c3 57 	call	0xaf86	; 0xaf86 <render_hud>
	render_score(&player1, 0);
    c334:	60 e0       	ldi	r22, 0x00	; 0
    c336:	89 e3       	ldi	r24, 0x39	; 57
    c338:	9c e0       	ldi	r25, 0x0C	; 12
    c33a:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <render_score>
	render_score(&player2, 15);
    c33e:	6f e0       	ldi	r22, 0x0F	; 15
    c340:	82 ea       	ldi	r24, 0xA2	; 162
    c342:	9f e0       	ldi	r25, 0x0F	; 15
    c344:	0e 94 e0 57 	call	0xafc0	; 0xafc0 <render_score>
	Print(14, 0, (char*) strVertSep);
    c348:	46 e0       	ldi	r20, 0x06	; 6
    c34a:	53 e0       	ldi	r21, 0x03	; 3
    c34c:	60 e0       	ldi	r22, 0x00	; 0
    c34e:	70 e0       	ldi	r23, 0x00	; 0
    c350:	8e e0       	ldi	r24, 0x0E	; 14
    c352:	90 e0       	ldi	r25, 0x00	; 0
    c354:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(14, 1, (char*) strVertSep);
    c358:	46 e0       	ldi	r20, 0x06	; 6
    c35a:	53 e0       	ldi	r21, 0x03	; 3
    c35c:	61 e0       	ldi	r22, 0x01	; 1
    c35e:	70 e0       	ldi	r23, 0x00	; 0
    c360:	8e e0       	ldi	r24, 0x0E	; 14
    c362:	90 e0       	ldi	r25, 0x00	; 0
    c364:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(14, 2, (char*) strVertSep);
    c368:	46 e0       	ldi	r20, 0x06	; 6
    c36a:	53 e0       	ldi	r21, 0x03	; 3
    c36c:	62 e0       	ldi	r22, 0x02	; 2
    c36e:	70 e0       	ldi	r23, 0x00	; 0
    c370:	8e e0       	ldi	r24, 0x0E	; 14
    c372:	90 e0       	ldi	r25, 0x00	; 0
    c374:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	load_level_tiles(false);
    c378:	80 e0       	ldi	r24, 0x00	; 0
}
    c37a:	df 91       	pop	r29
    c37c:	cf 91       	pop	r28
    c37e:	1f 91       	pop	r17
    c380:	0f 91       	pop	r16
    c382:	ff 90       	pop	r15
    c384:	ef 90       	pop	r14
    c386:	df 90       	pop	r13
    c388:	cf 90       	pop	r12
    c38a:	bf 90       	pop	r11
    c38c:	af 90       	pop	r10
    c38e:	9f 90       	pop	r9
    c390:	8f 90       	pop	r8
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, (char*) strVertSep);
	Print(14, 1, (char*) strVertSep);
	Print(14, 2, (char*) strVertSep);
	load_level_tiles(false);
    c392:	0c 94 a0 60 	jmp	0xc140	; 0xc140 <load_level_tiles>

0000c396 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    c396:	cf 93       	push	r28
    c398:	df 93       	push	r29
    c39a:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    c39c:	61 e0       	ldi	r22, 0x01	; 1
    c39e:	83 e0       	ldi	r24, 0x03	; 3
    c3a0:	0e 94 bb 52 	call	0xa576	; 0xa576 <FadeOut>
	ClearVram();
    c3a4:	0e 94 bc 43 	call	0x8778	; 0x8778 <ClearVram>
	clear_sprites();
    c3a8:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
	Print(8, 12, (char*) strLevels+index*16);
    c3ac:	d0 e0       	ldi	r29, 0x00	; 0
    c3ae:	ae 01       	movw	r20, r28
    c3b0:	84 e0       	ldi	r24, 0x04	; 4
    c3b2:	44 0f       	add	r20, r20
    c3b4:	55 1f       	adc	r21, r21
    c3b6:	8a 95       	dec	r24
    c3b8:	e1 f7       	brne	.-8      	; 0xc3b2 <level_transition+0x1c>
    c3ba:	46 59       	subi	r20, 0x96	; 150
    c3bc:	5e 4f       	sbci	r21, 0xFE	; 254
    c3be:	6c e0       	ldi	r22, 0x0C	; 12
    c3c0:	70 e0       	ldi	r23, 0x00	; 0
    c3c2:	88 e0       	ldi	r24, 0x08	; 8
    c3c4:	90 e0       	ldi	r25, 0x00	; 0
    c3c6:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	FadeIn(1, true);
    c3ca:	61 e0       	ldi	r22, 0x01	; 1
    c3cc:	81 e0       	ldi	r24, 0x01	; 1
    c3ce:	0e 94 af 52 	call	0xa55e	; 0xa55e <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    c3d2:	84 e0       	ldi	r24, 0x04	; 4
    c3d4:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <LBWaitSeconds>
	FadeOut(1, true);
    c3d8:	61 e0       	ldi	r22, 0x01	; 1
    c3da:	81 e0       	ldi	r24, 0x01	; 1
    c3dc:	0e 94 bb 52 	call	0xa576	; 0xa576 <FadeOut>
	ClearVram();
    c3e0:	0e 94 bc 43 	call	0x8778	; 0x8778 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    c3e4:	60 e0       	ldi	r22, 0x00	; 0
    c3e6:	83 e0       	ldi	r24, 0x03	; 3
    c3e8:	0e 94 af 52 	call	0xa55e	; 0xa55e <FadeIn>
	load_level(index);
    c3ec:	ce 01       	movw	r24, r28
}
    c3ee:	df 91       	pop	r29
    c3f0:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    c3f2:	0c 94 27 61 	jmp	0xc24e	; 0xc24e <load_level>

0000c3f6 <render_boss_fight_scope_load>:
	load_level_tiles(false);
}

void render_boss_fight_scope_load()
{
	if (render_scope(&scope_animation))
    c3f6:	83 e2       	ldi	r24, 0x23	; 35
    c3f8:	90 e1       	ldi	r25, 0x10	; 16
    c3fa:	0e 94 8c 58 	call	0xb118	; 0xb118 <render_scope>
    c3fe:	88 23       	and	r24, r24
    c400:	41 f0       	breq	.+16     	; 0xc412 <render_boss_fight_scope_load+0x1c>
	{
		game.boss_fight_status = BOSS_FIGHT_SUB_LOADING;
    c402:	82 e0       	ldi	r24, 0x02	; 2
    c404:	80 93 09 0c 	sts	0x0C09, r24
		SFX_ALARM;
    c408:	41 e0       	ldi	r20, 0x01	; 1
    c40a:	6f ef       	ldi	r22, 0xFF	; 255
    c40c:	88 e0       	ldi	r24, 0x08	; 8
    c40e:	0c 94 68 47 	jmp	0x8ed0	; 0x8ed0 <TriggerFx>
    c412:	08 95       	ret

0000c414 <render_boss_fight_sub_load>:
}

void render_boss_fight_sub_load()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c414:	85 e1       	ldi	r24, 0x15	; 21
    c416:	90 e1       	ldi	r25, 0x10	; 16
    c418:	0e 94 13 53 	call	0xa626	; 0xa626 <LBGetNextFrameReverse>
	DrawMap2(1, 4, (const char*) map);
    c41c:	ac 01       	movw	r20, r24
    c41e:	64 e0       	ldi	r22, 0x04	; 4
    c420:	81 e0       	ldi	r24, 0x01	; 1
    c422:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	if (sub_animation.anim.reversing)
    c426:	80 91 1a 10 	lds	r24, 0x101A
    c42a:	88 23       	and	r24, r24
    c42c:	99 f0       	breq	.+38     	; 0xc454 <render_boss_fight_sub_load+0x40>
	{
		game.boss_fight_status = BOSS_FIGHT;
    c42e:	84 e0       	ldi	r24, 0x04	; 4
    c430:	80 93 09 0c 	sts	0x0C09, r24
		init_turret(&turret1, BOSS_TURRET_1_RIGHT_LIMIT, 72 << FP_FACTOR);
    c434:	40 e4       	ldi	r20, 0x40	; 64
    c436:	52 e0       	ldi	r21, 0x02	; 2
    c438:	60 e6       	ldi	r22, 0x60	; 96
    c43a:	70 e0       	ldi	r23, 0x00	; 0
    c43c:	80 e6       	ldi	r24, 0x60	; 96
    c43e:	90 e1       	ldi	r25, 0x10	; 16
    c440:	0e 94 3c 55 	call	0xaa78	; 0xaa78 <init_turret>
		init_turret(&turret2, BOSS_TURRET_2_RIGHT_LIMIT, 72 << FP_FACTOR);
    c444:	40 e4       	ldi	r20, 0x40	; 64
    c446:	52 e0       	ldi	r21, 0x02	; 2
    c448:	60 ec       	ldi	r22, 0xC0	; 192
    c44a:	70 e0       	ldi	r23, 0x00	; 0
    c44c:	81 e3       	ldi	r24, 0x31	; 49
    c44e:	90 e1       	ldi	r25, 0x10	; 16
    c450:	0c 94 3c 55 	jmp	0xaa78	; 0xaa78 <init_turret>
    c454:	08 95       	ret

0000c456 <render_boss_fight_sub_sinking>:
}

void render_boss_fight_sub_sinking()
{
	char *map;
	map = LBGetNextFrameReverse(&(sub_animation.anim));
    c456:	85 e1       	ldi	r24, 0x15	; 21
    c458:	90 e1       	ldi	r25, 0x10	; 16
    c45a:	0e 94 13 53 	call	0xa626	; 0xa626 <LBGetNextFrameReverse>
	if (sub_animation.anim.current_anim == 0) DrawMap2(1, 4, (const char*) map);
    c45e:	20 91 15 10 	lds	r18, 0x1015
    c462:	21 11       	cpse	r18, r1
    c464:	05 c0       	rjmp	.+10     	; 0xc470 <render_boss_fight_sub_sinking+0x1a>
    c466:	ac 01       	movw	r20, r24
    c468:	64 e0       	ldi	r22, 0x04	; 4
    c46a:	81 e0       	ldi	r24, 0x01	; 1
    c46c:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	if (sub_animation.anim.looped)
    c470:	80 91 19 10 	lds	r24, 0x1019
    c474:	88 23       	and	r24, r24
    c476:	19 f0       	breq	.+6      	; 0xc47e <render_boss_fight_sub_sinking+0x28>
	{
		game.boss_fight_status = BOSS_FIGHT_WON;
    c478:	88 e0       	ldi	r24, 0x08	; 8
    c47a:	80 93 09 0c 	sts	0x0C09, r24
    c47e:	08 95       	ret

0000c480 <render_boss_turret>:
	}
}

void render_boss_turret(Turret* t, char sprite_index)
{
    c480:	0f 93       	push	r16
    c482:	fc 01       	movw	r30, r24
    c484:	86 2f       	mov	r24, r22
	MoveSprite(sprite_index, t->shared.x >> FP_FACTOR, t->shared.y >> FP_FACTOR, 1, 1);
    c486:	46 81       	ldd	r20, Z+6	; 0x06
    c488:	57 81       	ldd	r21, Z+7	; 0x07
    c48a:	93 e0       	ldi	r25, 0x03	; 3
    c48c:	56 95       	lsr	r21
    c48e:	47 95       	ror	r20
    c490:	9a 95       	dec	r25
    c492:	e1 f7       	brne	.-8      	; 0xc48c <render_boss_turret+0xc>
    c494:	04 80       	ldd	r0, Z+4	; 0x04
    c496:	f5 81       	ldd	r31, Z+5	; 0x05
    c498:	e0 2d       	mov	r30, r0
    c49a:	bf 01       	movw	r22, r30
    c49c:	23 e0       	ldi	r18, 0x03	; 3
    c49e:	76 95       	lsr	r23
    c4a0:	67 95       	ror	r22
    c4a2:	2a 95       	dec	r18
    c4a4:	e1 f7       	brne	.-8      	; 0xc49e <render_boss_turret+0x1e>
    c4a6:	01 e0       	ldi	r16, 0x01	; 1
    c4a8:	21 e0       	ldi	r18, 0x01	; 1
    c4aa:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
}
    c4ae:	0f 91       	pop	r16
    c4b0:	08 95       	ret

0000c4b2 <render_boss_turret_shot>:

void render_boss_turret_shot(Turret* t, char sprite_index)
{
    c4b2:	0f 93       	push	r16
    c4b4:	fc 01       	movw	r30, r24
    c4b6:	86 2f       	mov	r24, r22
	MoveSprite(sprite_index, t->shot[0].shared.x >> FP_FACTOR, t->shot[0].shared.y >> FP_FACTOR, 1, 1);
    c4b8:	47 85       	ldd	r20, Z+15	; 0x0f
    c4ba:	50 89       	ldd	r21, Z+16	; 0x10
    c4bc:	93 e0       	ldi	r25, 0x03	; 3
    c4be:	56 95       	lsr	r21
    c4c0:	47 95       	ror	r20
    c4c2:	9a 95       	dec	r25
    c4c4:	e1 f7       	brne	.-8      	; 0xc4be <render_boss_turret_shot+0xc>
    c4c6:	05 84       	ldd	r0, Z+13	; 0x0d
    c4c8:	f6 85       	ldd	r31, Z+14	; 0x0e
    c4ca:	e0 2d       	mov	r30, r0
    c4cc:	bf 01       	movw	r22, r30
    c4ce:	23 e0       	ldi	r18, 0x03	; 3
    c4d0:	76 95       	lsr	r23
    c4d2:	67 95       	ror	r22
    c4d4:	2a 95       	dec	r18
    c4d6:	e1 f7       	brne	.-8      	; 0xc4d0 <render_boss_turret_shot+0x1e>
    c4d8:	01 e0       	ldi	r16, 0x01	; 1
    c4da:	21 e0       	ldi	r18, 0x01	; 1
    c4dc:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
}
    c4e0:	0f 91       	pop	r16
    c4e2:	08 95       	ret

0000c4e4 <update_turret>:

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
    c4e4:	cf 93       	push	r28
    c4e6:	df 93       	push	r29
    c4e8:	ec 01       	movw	r28, r24
	u8 x = t->shared.x / FP_8;
    c4ea:	2c 81       	ldd	r18, Y+4	; 0x04
    c4ec:	3d 81       	ldd	r19, Y+5	; 0x05
	u8 y = t->shared.y / FP_8 - 3;
    c4ee:	8e 81       	ldd	r24, Y+6	; 0x06
    c4f0:	9f 81       	ldd	r25, Y+7	; 0x07
	int tile_index = (y * 30) + x;
	
	if (t->lives <= 0)
    c4f2:	58 85       	ldd	r21, Y+8	; 0x08
    c4f4:	51 11       	cpse	r21, r1
    c4f6:	1b c0       	rjmp	.+54     	; 0xc52e <update_turret+0x4a>
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / FP_8;
	u8 y = t->shared.y / FP_8 - 3;
    c4f8:	66 e0       	ldi	r22, 0x06	; 6
    c4fa:	96 95       	lsr	r25
    c4fc:	87 95       	ror	r24
    c4fe:	6a 95       	dec	r22
    c500:	e1 f7       	brne	.-8      	; 0xc4fa <update_turret+0x16>
    c502:	83 50       	subi	r24, 0x03	; 3
	MoveSprite(sprite_index, t->shot[0].shared.x >> FP_FACTOR, t->shot[0].shared.y >> FP_FACTOR, 1, 1);
}

void update_turret(Turret *t, u8 left_limit, u8 right_limit)
{
	u8 x = t->shared.x / FP_8;
    c504:	e9 01       	movw	r28, r18
    c506:	76 e0       	ldi	r23, 0x06	; 6
    c508:	d6 95       	lsr	r29
    c50a:	c7 95       	ror	r28
    c50c:	7a 95       	dec	r23
    c50e:	e1 f7       	brne	.-8      	; 0xc508 <update_turret+0x24>
    c510:	dd 27       	eor	r29, r29
	u8 y = t->shared.y / FP_8 - 3;
	int tile_index = (y * 30) + x;
    c512:	9e e1       	ldi	r25, 0x1E	; 30
    c514:	89 9f       	mul	r24, r25
    c516:	c0 0d       	add	r28, r0
    c518:	d1 1d       	adc	r29, r1
    c51a:	11 24       	eor	r1, r1
	
	if (t->lives <= 0)
	{
		explode_tile(&tile_animations, tile_index);
    c51c:	be 01       	movw	r22, r28
    c51e:	8c e1       	ldi	r24, 0x1C	; 28
    c520:	9c e0       	ldi	r25, 0x0C	; 12
    c522:	0e 94 ff 5b 	call	0xb7fe	; 0xb7fe <explode_tile>
		level.level_map[tile_index] = L_EMPTY;
    c526:	cd 54       	subi	r28, 0x4D	; 77
    c528:	d3 4f       	sbci	r29, 0xF3	; 243
    c52a:	19 82       	std	Y+1, r1	; 0x01
    c52c:	2f c0       	rjmp	.+94     	; 0xc58c <update_turret+0xa8>
	}
	else if (t->shared.direction == D_LEFT)
    c52e:	88 81       	ld	r24, Y
    c530:	83 30       	cpi	r24, 0x03	; 3
    c532:	81 f4       	brne	.+32     	; 0xc554 <update_turret+0x70>
	{
		if (t->shared.x < left_limit)
    c534:	70 e0       	ldi	r23, 0x00	; 0
    c536:	26 17       	cp	r18, r22
    c538:	37 07       	cpc	r19, r23
    c53a:	10 f4       	brcc	.+4      	; 0xc540 <update_turret+0x5c>
		{
			t->shared.direction = D_RIGHT;
    c53c:	81 e0       	ldi	r24, 0x01	; 1
    c53e:	11 c0       	rjmp	.+34     	; 0xc562 <update_turret+0x7e>
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+FP_64);
		}
		else
		{
			t->shared.x -= t->shared.speed / FRAME_TIME_INVERTED;
    c540:	8a 81       	ldd	r24, Y+2	; 0x02
    c542:	9b 81       	ldd	r25, Y+3	; 0x03
    c544:	56 e0       	ldi	r21, 0x06	; 6
    c546:	96 95       	lsr	r25
    c548:	87 95       	ror	r24
    c54a:	5a 95       	dec	r21
    c54c:	e1 f7       	brne	.-8      	; 0xc546 <update_turret+0x62>
    c54e:	28 1b       	sub	r18, r24
    c550:	39 0b       	sbc	r19, r25
    c552:	1a c0       	rjmp	.+52     	; 0xc588 <update_turret+0xa4>
		}
	}
	else if (t->shared.direction == D_RIGHT)
    c554:	81 30       	cpi	r24, 0x01	; 1
    c556:	d1 f4       	brne	.+52     	; 0xc58c <update_turret+0xa8>
	{
		if (t->shared.x > right_limit)
    c558:	50 e0       	ldi	r21, 0x00	; 0
    c55a:	42 17       	cp	r20, r18
    c55c:	53 07       	cpc	r21, r19
    c55e:	58 f4       	brcc	.+22     	; 0xc576 <update_turret+0x92>
		{
			t->shared.direction = D_LEFT;
    c560:	83 e0       	ldi	r24, 0x03	; 3
    c562:	88 83       	st	Y, r24
			t->shared.speed = LBRandom(BOSS_TURRET_SPEED, BOSS_TURRET_SPEED+FP_64);
    c564:	60 e0       	ldi	r22, 0x00	; 0
    c566:	76 e0       	ldi	r23, 0x06	; 6
    c568:	80 e0       	ldi	r24, 0x00	; 0
    c56a:	94 e0       	ldi	r25, 0x04	; 4
    c56c:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    c570:	9b 83       	std	Y+3, r25	; 0x03
    c572:	8a 83       	std	Y+2, r24	; 0x02
    c574:	0b c0       	rjmp	.+22     	; 0xc58c <update_turret+0xa8>
		}
		else
		{
			t->shared.x += t->shared.speed / FRAME_TIME_INVERTED;
    c576:	8a 81       	ldd	r24, Y+2	; 0x02
    c578:	9b 81       	ldd	r25, Y+3	; 0x03
    c57a:	46 e0       	ldi	r20, 0x06	; 6
    c57c:	96 95       	lsr	r25
    c57e:	87 95       	ror	r24
    c580:	4a 95       	dec	r20
    c582:	e1 f7       	brne	.-8      	; 0xc57c <update_turret+0x98>
    c584:	28 0f       	add	r18, r24
    c586:	39 1f       	adc	r19, r25
    c588:	3d 83       	std	Y+5, r19	; 0x05
    c58a:	2c 83       	std	Y+4, r18	; 0x04
		}
	}
}
    c58c:	df 91       	pop	r29
    c58e:	cf 91       	pop	r28
    c590:	08 95       	ret

0000c592 <update_turret_shot>:

void update_turret_shot(Turret* t, Shot* s)
{	
    c592:	0f 93       	push	r16
    c594:	1f 93       	push	r17
    c596:	cf 93       	push	r28
    c598:	df 93       	push	r29
    c59a:	fc 01       	movw	r30, r24
    c59c:	eb 01       	movw	r28, r22
	if (t->lives <= 0)
    c59e:	80 85       	ldd	r24, Z+8	; 0x08
    c5a0:	81 11       	cpse	r24, r1
    c5a2:	02 c0       	rjmp	.+4      	; 0xc5a8 <update_turret_shot+0x16>
	{
		s->active = 0;
    c5a4:	1b 86       	std	Y+11, r1	; 0x0b
		return;
    c5a6:	51 c0       	rjmp	.+162    	; 0xc64a <update_turret_shot+0xb8>
	}
	if (!s->active)
    c5a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    c5aa:	81 11       	cpse	r24, r1
    c5ac:	1a c0       	rjmp	.+52     	; 0xc5e2 <update_turret_shot+0x50>
	{
		s->active = 1;
    c5ae:	81 e0       	ldi	r24, 0x01	; 1
    c5b0:	8b 87       	std	Y+11, r24	; 0x0b
		s->shared.x = t->shared.x+3;
    c5b2:	84 81       	ldd	r24, Z+4	; 0x04
    c5b4:	95 81       	ldd	r25, Z+5	; 0x05
    c5b6:	03 96       	adiw	r24, 0x03	; 3
    c5b8:	9d 83       	std	Y+5, r25	; 0x05
    c5ba:	8c 83       	std	Y+4, r24	; 0x04
		s->shared.y = t->shared.y+3;
    c5bc:	86 81       	ldd	r24, Z+6	; 0x06
    c5be:	97 81       	ldd	r25, Z+7	; 0x07
    c5c0:	03 96       	adiw	r24, 0x03	; 3
    c5c2:	9f 83       	std	Y+7, r25	; 0x07
    c5c4:	8e 83       	std	Y+6, r24	; 0x06
		SFX_CANNONBALL;
    c5c6:	80 91 4b 0c 	lds	r24, 0x0C4B
    c5ca:	80 fd       	sbrc	r24, 0
    c5cc:	0a c0       	rjmp	.+20     	; 0xc5e2 <update_turret_shot+0x50>
    c5ce:	80 91 b4 0f 	lds	r24, 0x0FB4
    c5d2:	80 fd       	sbrc	r24, 0
    c5d4:	06 c0       	rjmp	.+12     	; 0xc5e2 <update_turret_shot+0x50>
    c5d6:	2f ef       	ldi	r18, 0xFF	; 255
    c5d8:	47 e1       	ldi	r20, 0x17	; 23
    c5da:	62 e0       	ldi	r22, 0x02	; 2
    c5dc:	84 e0       	ldi	r24, 0x04	; 4
    c5de:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
	}
	s->shared.y += BOSS_TURRET_SHOT_SPEED / FRAME_TIME_INVERTED;
    c5e2:	8e 81       	ldd	r24, Y+6	; 0x06
    c5e4:	9f 81       	ldd	r25, Y+7	; 0x07
    c5e6:	9c 01       	movw	r18, r24
    c5e8:	20 5e       	subi	r18, 0xE0	; 224
    c5ea:	3f 4f       	sbci	r19, 0xFF	; 255
    c5ec:	3f 83       	std	Y+7, r19	; 0x07
    c5ee:	2e 83       	std	Y+6, r18	; 0x06
	
	/* Level boundries first */
	if (s->shared.y + FP_8 > (216 << FP_FACTOR))
    c5f0:	80 5a       	subi	r24, 0xA0	; 160
    c5f2:	9f 4f       	sbci	r25, 0xFF	; 255
    c5f4:	81 3c       	cpi	r24, 0xC1	; 193
    c5f6:	96 40       	sbci	r25, 0x06	; 6
    c5f8:	a8 f6       	brcc	.-86     	; 0xc5a4 <update_turret_shot+0x12>
		s->active = 0;
		return;
	}
	
	/* Player interaction */
	if (player_shot(game.boss_fight_player, s) && !(game.boss_fight_player->flags & EXPLODING_FLAG))
    c5fa:	00 91 17 0c 	lds	r16, 0x0C17
    c5fe:	10 91 18 0c 	lds	r17, 0x0C18
    c602:	be 01       	movw	r22, r28
    c604:	c8 01       	movw	r24, r16
    c606:	0e 94 c5 5a 	call	0xb58a	; 0xb58a <player_shot>
    c60a:	88 23       	and	r24, r24
    c60c:	f1 f0       	breq	.+60     	; 0xc64a <update_turret_shot+0xb8>
    c60e:	f8 01       	movw	r30, r16
    c610:	82 89       	ldd	r24, Z+18	; 0x12
    c612:	80 fd       	sbrc	r24, 0
    c614:	1a c0       	rjmp	.+52     	; 0xc64a <update_turret_shot+0xb8>
	{
		game.boss_fight_player_lives--;
    c616:	90 91 0b 0c 	lds	r25, 0x0C0B
    c61a:	91 50       	subi	r25, 0x01	; 1
    c61c:	90 93 0b 0c 	sts	0x0C0B, r25
		if (game.boss_fight_player_lives <= 0)
    c620:	91 11       	cpse	r25, r1
    c622:	03 c0       	rjmp	.+6      	; 0xc62a <update_turret_shot+0x98>
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
    c624:	80 e1       	ldi	r24, 0x10	; 16
    c626:	80 93 09 0c 	sts	0x0C09, r24
		}
		s->active = 0;
    c62a:	1b 86       	std	Y+11, r1	; 0x0b
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
    c62c:	60 91 0a 0c 	lds	r22, 0x0C0A
    c630:	c8 01       	movw	r24, r16
    c632:	0e 94 92 5b 	call	0xb724	; 0xb724 <kill_player>
		SFX_TANK_EXPLODE;
    c636:	2f ef       	ldi	r18, 0xFF	; 255
    c638:	40 e1       	ldi	r20, 0x10	; 16
    c63a:	67 e0       	ldi	r22, 0x07	; 7
    c63c:	84 e0       	ldi	r24, 0x04	; 4
	}
}
    c63e:	df 91       	pop	r29
    c640:	cf 91       	pop	r28
    c642:	1f 91       	pop	r17
    c644:	0f 91       	pop	r16
		{
			game.boss_fight_status = BOSS_FIGHT_LOST;
		}
		s->active = 0;
		kill_player(game.boss_fight_player, game.boss_fight_player_hud);
		SFX_TANK_EXPLODE;
    c646:	0c 94 b0 47 	jmp	0x8f60	; 0x8f60 <TriggerNote>
	}
}
    c64a:	df 91       	pop	r29
    c64c:	cf 91       	pop	r28
    c64e:	1f 91       	pop	r17
    c650:	0f 91       	pop	r16
    c652:	08 95       	ret

0000c654 <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    c654:	10 92 06 0c 	sts	0x0C06, r1
	clear_sprites();
    c658:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
	}
	Print(5, 22, (char*) strCopyright);
	Print(18, 25, (char*) strCreditCount);
    LBPrintByte(27, 25, credits_available(), false);
#else	
	Print(7, 13, (char*) str1Player);
    c65c:	45 e9       	ldi	r20, 0x95	; 149
    c65e:	53 e0       	ldi	r21, 0x03	; 3
    c660:	6d e0       	ldi	r22, 0x0D	; 13
    c662:	70 e0       	ldi	r23, 0x00	; 0
    c664:	87 e0       	ldi	r24, 0x07	; 7
    c666:	90 e0       	ldi	r25, 0x00	; 0
    c668:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(7, 14, (char*) str2Player);
    c66c:	44 e8       	ldi	r20, 0x84	; 132
    c66e:	53 e0       	ldi	r21, 0x03	; 3
    c670:	6e e0       	ldi	r22, 0x0E	; 14
    c672:	70 e0       	ldi	r23, 0x00	; 0
    c674:	87 e0       	ldi	r24, 0x07	; 7
    c676:	90 e0       	ldi	r25, 0x00	; 0
    c678:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(7, 15, (char*) strHighscores);
    c67c:	40 e2       	ldi	r20, 0x20	; 32
    c67e:	53 e0       	ldi	r21, 0x03	; 3
    c680:	6f e0       	ldi	r22, 0x0F	; 15
    c682:	70 e0       	ldi	r23, 0x00	; 0
    c684:	87 e0       	ldi	r24, 0x07	; 7
    c686:	90 e0       	ldi	r25, 0x00	; 0
    c688:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(7, 13, (char*) str1Player);
    c68c:	45 e9       	ldi	r20, 0x95	; 149
    c68e:	53 e0       	ldi	r21, 0x03	; 3
    c690:	6d e0       	ldi	r22, 0x0D	; 13
    c692:	70 e0       	ldi	r23, 0x00	; 0
    c694:	87 e0       	ldi	r24, 0x07	; 7
    c696:	90 e0       	ldi	r25, 0x00	; 0
    c698:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(5, 26, (char*) strCopyright);
    c69c:	4a e2       	ldi	r20, 0x2A	; 42
    c69e:	53 e0       	ldi	r21, 0x03	; 3
    c6a0:	6a e1       	ldi	r22, 0x1A	; 26
    c6a2:	70 e0       	ldi	r23, 0x00	; 0
    c6a4:	85 e0       	ldi	r24, 0x05	; 5
    c6a6:	90 e0       	ldi	r25, 0x00	; 0
    c6a8:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	MapSprite2(0, map_right_arrow, 0);
    c6ac:	40 e0       	ldi	r20, 0x00	; 0
    c6ae:	6c e5       	ldi	r22, 0x5C	; 92
    c6b0:	74 e4       	ldi	r23, 0x44	; 68
    c6b2:	80 e0       	ldi	r24, 0x00	; 0
    c6b4:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
#endif
	DrawMap2(4, 5, (const char*) map_splash);
    c6b8:	4f e0       	ldi	r20, 0x0F	; 15
    c6ba:	5e e7       	ldi	r21, 0x7E	; 126
    c6bc:	65 e0       	ldi	r22, 0x05	; 5
    c6be:	84 e0       	ldi	r24, 0x04	; 4
    c6c0:	0c 94 ec 51 	jmp	0xa3d8	; 0xa3d8 <DrawMap>

0000c6c4 <select_pressed>:
}

char select_pressed(JoyPadState* p)
{
    c6c4:	fc 01       	movw	r30, r24
    c6c6:	20 81       	ld	r18, Z
    c6c8:	31 81       	ldd	r19, Z+1	; 0x01
    c6ca:	28 70       	andi	r18, 0x08	; 8
    c6cc:	31 70       	andi	r19, 0x01	; 1
#if JAMMA
	if (p == &p2) return p1.pressed & BTN_SELECT;
	return p->pressed & BTN_START;
#else
	return (p->pressed & BTN_A) || (p->pressed & BTN_START);
    c6ce:	81 e0       	ldi	r24, 0x01	; 1
    c6d0:	23 2b       	or	r18, r19
    c6d2:	09 f4       	brne	.+2      	; 0xc6d6 <select_pressed+0x12>
    c6d4:	80 e0       	ldi	r24, 0x00	; 0
#endif
}
    c6d6:	08 95       	ret

0000c6d8 <load_tank_rank>:
	game.demo_counter++;
#endif
}

void load_tank_rank()
{
    c6d8:	ff 92       	push	r15
    c6da:	0f 93       	push	r16
    c6dc:	1f 93       	push	r17
    c6de:	cf 93       	push	r28
    c6e0:	df 93       	push	r29
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    c6e2:	81 e0       	ldi	r24, 0x01	; 1
    c6e4:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    c6e8:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
	DrawMap2(7, 1, map_green_tank);
    c6ec:	4c ed       	ldi	r20, 0xDC	; 220
    c6ee:	5d e7       	ldi	r21, 0x7D	; 125
    c6f0:	61 e0       	ldi	r22, 0x01	; 1
    c6f2:	87 e0       	ldi	r24, 0x07	; 7
    c6f4:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	DrawMap2(20, 1, map_blue_tank);
    c6f8:	46 ed       	ldi	r20, 0xD6	; 214
    c6fa:	5d e7       	ldi	r21, 0x7D	; 125
    c6fc:	61 e0       	ldi	r22, 0x01	; 1
    c6fe:	84 e1       	ldi	r24, 0x14	; 20
    c700:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	Print(10, 2, (char*) strHighscores);
    c704:	40 e2       	ldi	r20, 0x20	; 32
    c706:	53 e0       	ldi	r21, 0x03	; 3
    c708:	62 e0       	ldi	r22, 0x02	; 2
    c70a:	70 e0       	ldi	r23, 0x00	; 0
    c70c:	8a e0       	ldi	r24, 0x0A	; 10
    c70e:	90 e0       	ldi	r25, 0x00	; 0
    c710:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    c714:	05 ec       	ldi	r16, 0xC5	; 197
    c716:	1b e0       	ldi	r17, 0x0B	; 11
    c718:	c7 e0       	ldi	r28, 0x07	; 7
    c71a:	d0 e0       	ldi	r29, 0x00	; 0
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    c71c:	ff 24       	eor	r15, r15
    c71e:	f3 94       	inc	r15
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
	{
		PrintByte(2, y, rank, false);
    c720:	20 e0       	ldi	r18, 0x00	; 0
    c722:	4f 2d       	mov	r20, r15
    c724:	be 01       	movw	r22, r28
    c726:	82 e0       	ldi	r24, 0x02	; 2
    c728:	90 e0       	ldi	r25, 0x00	; 0
    c72a:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
		PrintChar(3, y, '.');
    c72e:	4e e2       	ldi	r20, 0x2E	; 46
    c730:	be 01       	movw	r22, r28
    c732:	83 e0       	ldi	r24, 0x03	; 3
    c734:	90 e0       	ldi	r25, 0x00	; 0
    c736:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
    c73a:	f8 01       	movw	r30, r16
    c73c:	34 97       	sbiw	r30, 0x04	; 4
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    c73e:	80 81       	ld	r24, Z
    c740:	93 e0       	ldi	r25, 0x03	; 3
    c742:	89 9f       	mul	r24, r25
    c744:	a0 01       	movw	r20, r0
    c746:	11 24       	eor	r1, r1
    c748:	48 51       	subi	r20, 0x18	; 24
    c74a:	54 4f       	sbci	r21, 0xF4	; 244
    c74c:	23 e0       	ldi	r18, 0x03	; 3
    c74e:	6c 2f       	mov	r22, r28
    c750:	85 e0       	ldi	r24, 0x05	; 5
    c752:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
		Print(9, y, (char*) strOwns);
    c756:	4c ee       	ldi	r20, 0xEC	; 236
    c758:	52 e0       	ldi	r21, 0x02	; 2
    c75a:	be 01       	movw	r22, r28
    c75c:	89 e0       	ldi	r24, 0x09	; 9
    c75e:	90 e0       	ldi	r25, 0x00	; 0
    c760:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    c764:	f8 01       	movw	r30, r16
    c766:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    c768:	80 81       	ld	r24, Z
    c76a:	e3 e0       	ldi	r30, 0x03	; 3
    c76c:	8e 9f       	mul	r24, r30
    c76e:	a0 01       	movw	r20, r0
    c770:	11 24       	eor	r1, r1
    c772:	48 51       	subi	r20, 0x18	; 24
    c774:	54 4f       	sbci	r21, 0xF4	; 244
    c776:	23 e0       	ldi	r18, 0x03	; 3
    c778:	6c 2f       	mov	r22, r28
    c77a:	8e e0       	ldi	r24, 0x0E	; 14
    c77c:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
		Print(18, y, (char*) strBy);
    c780:	49 ee       	ldi	r20, 0xE9	; 233
    c782:	52 e0       	ldi	r21, 0x02	; 2
    c784:	be 01       	movw	r22, r28
    c786:	82 e1       	ldi	r24, 0x12	; 18
    c788:	90 e0       	ldi	r25, 0x00	; 0
    c78a:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
		PrintByte(23, y, scores.data[i+2] ,true);
    c78e:	21 e0       	ldi	r18, 0x01	; 1
    c790:	f8 01       	movw	r30, r16
    c792:	32 97       	sbiw	r30, 0x02	; 2
    c794:	40 81       	ld	r20, Z
    c796:	be 01       	movw	r22, r28
    c798:	87 e1       	ldi	r24, 0x17	; 23
    c79a:	90 e0       	ldi	r25, 0x00	; 0
    c79c:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
		PrintChar(24, y, '-');
    c7a0:	4d e2       	ldi	r20, 0x2D	; 45
    c7a2:	be 01       	movw	r22, r28
    c7a4:	88 e1       	ldi	r24, 0x18	; 24
    c7a6:	90 e0       	ldi	r25, 0x00	; 0
    c7a8:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    c7ac:	21 e0       	ldi	r18, 0x01	; 1
    c7ae:	f8 01       	movw	r30, r16
    c7b0:	31 97       	sbiw	r30, 0x01	; 1
    c7b2:	40 81       	ld	r20, Z
    c7b4:	be 01       	movw	r22, r28
    c7b6:	8b e1       	ldi	r24, 0x1B	; 27
    c7b8:	90 e0       	ldi	r25, 0x00	; 0
    c7ba:	0e 94 39 52 	call	0xa472	; 0xa472 <PrintByte>
		if (scores.data[i+4])
    c7be:	f8 01       	movw	r30, r16
    c7c0:	80 81       	ld	r24, Z
    c7c2:	88 23       	and	r24, r24
    c7c4:	11 f0       	breq	.+4      	; 0xc7ca <load_tank_rank+0xf2>
			PrintChar(29, y, '*');
    c7c6:	4a e2       	ldi	r20, 0x2A	; 42
    c7c8:	01 c0       	rjmp	.+2      	; 0xc7cc <load_tank_rank+0xf4>
		else
			PrintChar(29, y, ' ');
    c7ca:	40 e2       	ldi	r20, 0x20	; 32
    c7cc:	be 01       	movw	r22, r28
    c7ce:	8d e1       	ldi	r24, 0x1D	; 29
    c7d0:	90 e0       	ldi	r25, 0x00	; 0
    c7d2:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
		y += 3;
		rank += 1;
    c7d6:	f3 94       	inc	r15
    c7d8:	23 96       	adiw	r28, 0x03	; 3
    c7da:	0b 5f       	subi	r16, 0xFB	; 251
    c7dc:	1f 4f       	sbci	r17, 0xFF	; 255
	game.current_screen = TANK_RANK;
	clear_sprites();
	DrawMap2(7, 1, map_green_tank);
	DrawMap2(20, 1, map_blue_tank);
	Print(10, 2, (char*) strHighscores);
	for (u8 i = 0; i < 25; i += 5)
    c7de:	f6 e0       	ldi	r31, 0x06	; 6
    c7e0:	ff 12       	cpse	r15, r31
    c7e2:	9e cf       	rjmp	.-196    	; 0xc720 <load_tank_rank+0x48>
		y += 3;
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
    c7e4:	49 e5       	ldi	r20, 0x59	; 89
    c7e6:	53 e0       	ldi	r21, 0x03	; 3
    c7e8:	66 e1       	ldi	r22, 0x16	; 22
    c7ea:	70 e0       	ldi	r23, 0x00	; 0
    c7ec:	83 e0       	ldi	r24, 0x03	; 3
    c7ee:	90 e0       	ldi	r25, 0x00	; 0
    c7f0:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(10, 24, (char*) strCancelHandle);
    c7f4:	4e e4       	ldi	r20, 0x4E	; 78
    c7f6:	53 e0       	ldi	r21, 0x03	; 3
    c7f8:	68 e1       	ldi	r22, 0x18	; 24
    c7fa:	70 e0       	ldi	r23, 0x00	; 0
    c7fc:	8a e0       	ldi	r24, 0x0A	; 10
    c7fe:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    c800:	df 91       	pop	r29
    c802:	cf 91       	pop	r28
    c804:	1f 91       	pop	r17
    c806:	0f 91       	pop	r16
    c808:	ff 90       	pop	r15
		rank += 1;
	}
#if JAMMA
#else
	Print(3, 22, (char*) strReset);
	Print(10, 24, (char*) strCancelHandle);
    c80a:	0c 94 6c 52 	jmp	0xa4d8	; 0xa4d8 <Print>

0000c80e <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    c80e:	0e 94 61 56 	call	0xacc2	; 0xacc2 <save_score>
	fade_through();
    c812:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
	init_game_state();
    c816:	0e 94 df 55 	call	0xabbe	; 0xabbe <init_game_state>
	load_tank_rank();
    c81a:	0c 94 6c 63 	jmp	0xc6d8	; 0xc6d8 <load_tank_rank>

0000c81e <update_player>:
		return s->speed / FRAME_TIME_INVERTED;
	return (s->speed  + (s->speed / 2)) / FRAME_TIME_INVERTED;
}

void update_player(JoyPadState* p, Player* player)
{
    c81e:	ef 92       	push	r14
    c820:	ff 92       	push	r15
    c822:	0f 93       	push	r16
    c824:	1f 93       	push	r17
    c826:	cf 93       	push	r28
    c828:	df 93       	push	r29
    c82a:	8c 01       	movw	r16, r24
    c82c:	eb 01       	movw	r28, r22
	Shot* shot;
	
	player->shared.recoiled = 0;
    c82e:	19 82       	std	Y+1, r1	; 0x01
	player->old_active_shots = player->active_shots;
    c830:	8e 85       	ldd	r24, Y+14	; 0x0e
    c832:	8f 87       	std	Y+15, r24	; 0x0f
	if ((p->pressed & BTN_START) && (game.boss_fight_status == 0))
    c834:	f8 01       	movw	r30, r16
    c836:	80 81       	ld	r24, Z
    c838:	83 ff       	sbrs	r24, 3
    c83a:	13 c0       	rjmp	.+38     	; 0xc862 <update_player+0x44>
    c83c:	80 91 09 0c 	lds	r24, 0x0C09
    c840:	81 11       	cpse	r24, r1
    c842:	0f c0       	rjmp	.+30     	; 0xc862 <update_player+0x44>
	{
#if JAMMA
#else
		SFX_NAVIGATE;
    c844:	2f ef       	ldi	r18, 0xFF	; 255
    c846:	47 e1       	ldi	r20, 0x17	; 23
    c848:	65 e0       	ldi	r22, 0x05	; 5
    c84a:	84 e0       	ldi	r24, 0x04	; 4
    c84c:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		game.paused = game.paused ^ 1;
    c850:	90 91 08 0c 	lds	r25, 0x0C08
    c854:	81 e0       	ldi	r24, 0x01	; 1
    c856:	89 27       	eor	r24, r25
    c858:	80 93 08 0c 	sts	0x0C08, r24
		load_level_tiles(false);
    c85c:	80 e0       	ldi	r24, 0x00	; 0
    c85e:	0e 94 a0 60 	call	0xc140	; 0xc140 <load_level_tiles>
#endif
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    c862:	80 91 08 0c 	lds	r24, 0x0C08
    c866:	81 11       	cpse	r24, r1
    c868:	b3 c0       	rjmp	.+358    	; 0xc9d0 <update_player+0x1b2>
    c86a:	8a 89       	ldd	r24, Y+18	; 0x12
    c86c:	80 fd       	sbrc	r24, 0
    c86e:	b0 c0       	rjmp	.+352    	; 0xc9d0 <update_player+0x1b2>
	{
#if JAMMA
#else
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    c870:	f8 01       	movw	r30, r16
    c872:	80 81       	ld	r24, Z
    c874:	91 81       	ldd	r25, Z+1	; 0x01
    c876:	93 ff       	sbrs	r25, 3
    c878:	19 c0       	rjmp	.+50     	; 0xc8ac <update_player+0x8e>
    c87a:	8b 89       	ldd	r24, Y+19	; 0x13
    c87c:	8a 35       	cpi	r24, 0x5A	; 90
    c87e:	b1 f4       	brne	.+44     	; 0xc8ac <update_player+0x8e>
		{
			player->banter_frame = 0;
    c880:	1b 8a       	std	Y+19, r1	; 0x13
			player->banter_index = (u8) LBRandom(0, 9);
    c882:	69 e0       	ldi	r22, 0x09	; 9
    c884:	70 e0       	ldi	r23, 0x00	; 0
    c886:	80 e0       	ldi	r24, 0x00	; 0
    c888:	90 e0       	ldi	r25, 0x00	; 0
    c88a:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    c88e:	8c 8b       	std	Y+20, r24	; 0x14
			SFX_BANTER;
    c890:	80 91 4b 0c 	lds	r24, 0x0C4B
    c894:	80 fd       	sbrc	r24, 0
    c896:	0a c0       	rjmp	.+20     	; 0xc8ac <update_player+0x8e>
    c898:	80 91 b4 0f 	lds	r24, 0x0FB4
    c89c:	80 fd       	sbrc	r24, 0
    c89e:	06 c0       	rjmp	.+12     	; 0xc8ac <update_player+0x8e>
    c8a0:	2f e5       	ldi	r18, 0x5F	; 95
    c8a2:	4e e1       	ldi	r20, 0x1E	; 30
    c8a4:	60 e0       	ldi	r22, 0x00	; 0
    c8a6:	84 e0       	ldi	r24, 0x04	; 4
    c8a8:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		}
#endif
		player->shared.speed = player->max_speed;
    c8ac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    c8ae:	9e 8d       	ldd	r25, Y+30	; 0x1e
    c8b0:	9b 83       	std	Y+3, r25	; 0x03
    c8b2:	8a 83       	std	Y+2, r24	; 0x02
		if ((p->held & BTN_UP))
    c8b4:	f8 01       	movw	r30, r16
    c8b6:	84 81       	ldd	r24, Z+4	; 0x04
    c8b8:	84 ff       	sbrs	r24, 4
    c8ba:	0c c0       	rjmp	.+24     	; 0xc8d4 <update_player+0xb6>
		{
			player->shared.direction = D_UP;
    c8bc:	18 82       	st	Y, r1
			player->shared.y -= get_delta(player, &player->shared);
    c8be:	be 01       	movw	r22, r28
    c8c0:	ce 01       	movw	r24, r28
    c8c2:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    c8c6:	2e 81       	ldd	r18, Y+6	; 0x06
    c8c8:	3f 81       	ldd	r19, Y+7	; 0x07
    c8ca:	28 1b       	sub	r18, r24
    c8cc:	39 0b       	sbc	r19, r25
    c8ce:	3f 83       	std	Y+7, r19	; 0x07
    c8d0:	2e 83       	std	Y+6, r18	; 0x06
    c8d2:	2f c0       	rjmp	.+94     	; 0xc932 <update_player+0x114>
		}
		else if ((p->held & BTN_RIGHT))
    c8d4:	87 ff       	sbrs	r24, 7
    c8d6:	0d c0       	rjmp	.+26     	; 0xc8f2 <update_player+0xd4>
		{
			player->shared.direction = D_RIGHT;
    c8d8:	81 e0       	ldi	r24, 0x01	; 1
    c8da:	88 83       	st	Y, r24
			player->shared.x += get_delta(player, &player->shared);
    c8dc:	be 01       	movw	r22, r28
    c8de:	ce 01       	movw	r24, r28
    c8e0:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    c8e4:	2c 81       	ldd	r18, Y+4	; 0x04
    c8e6:	3d 81       	ldd	r19, Y+5	; 0x05
    c8e8:	82 0f       	add	r24, r18
    c8ea:	93 1f       	adc	r25, r19
    c8ec:	9d 83       	std	Y+5, r25	; 0x05
    c8ee:	8c 83       	std	Y+4, r24	; 0x04
    c8f0:	20 c0       	rjmp	.+64     	; 0xc932 <update_player+0x114>
		}
		else if ((p->held & BTN_DOWN))
    c8f2:	85 ff       	sbrs	r24, 5
    c8f4:	0d c0       	rjmp	.+26     	; 0xc910 <update_player+0xf2>
		{
			player->shared.direction = D_DOWN;
    c8f6:	82 e0       	ldi	r24, 0x02	; 2
    c8f8:	88 83       	st	Y, r24
			player->shared.y += get_delta(player, &player->shared);
    c8fa:	be 01       	movw	r22, r28
    c8fc:	ce 01       	movw	r24, r28
    c8fe:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    c902:	2e 81       	ldd	r18, Y+6	; 0x06
    c904:	3f 81       	ldd	r19, Y+7	; 0x07
    c906:	82 0f       	add	r24, r18
    c908:	93 1f       	adc	r25, r19
    c90a:	9f 83       	std	Y+7, r25	; 0x07
    c90c:	8e 83       	std	Y+6, r24	; 0x06
    c90e:	11 c0       	rjmp	.+34     	; 0xc932 <update_player+0x114>
		}
		else if ((p->held & BTN_LEFT))
    c910:	86 ff       	sbrs	r24, 6
    c912:	0d c0       	rjmp	.+26     	; 0xc92e <update_player+0x110>
		{
			player->shared.direction = D_LEFT;
    c914:	83 e0       	ldi	r24, 0x03	; 3
    c916:	88 83       	st	Y, r24
			player->shared.x -= get_delta(player, &player->shared);
    c918:	be 01       	movw	r22, r28
    c91a:	ce 01       	movw	r24, r28
    c91c:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    c920:	2c 81       	ldd	r18, Y+4	; 0x04
    c922:	3d 81       	ldd	r19, Y+5	; 0x05
    c924:	28 1b       	sub	r18, r24
    c926:	39 0b       	sbc	r19, r25
    c928:	3d 83       	std	Y+5, r19	; 0x05
    c92a:	2c 83       	std	Y+4, r18	; 0x04
    c92c:	02 c0       	rjmp	.+4      	; 0xc932 <update_player+0x114>
		}
		else
		{
			player->shared.speed = 0;
    c92e:	1b 82       	std	Y+3, r1	; 0x03
    c930:	1a 82       	std	Y+2, r1	; 0x02
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
    c932:	c8 01       	movw	r24, r16
    c934:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <shoot_pressed>
    c938:	88 23       	and	r24, r24
    c93a:	09 f4       	brne	.+2      	; 0xc93e <update_player+0x120>
    c93c:	49 c0       	rjmp	.+146    	; 0xc9d0 <update_player+0x1b2>
    c93e:	8e 85       	ldd	r24, Y+14	; 0x0e
    c940:	81 11       	cpse	r24, r1
    c942:	46 c0       	rjmp	.+140    	; 0xc9d0 <update_player+0x1b2>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    c944:	8c a9       	ldd	r24, Y+52	; 0x34
    c946:	81 11       	cpse	r24, r1
    c948:	43 c0       	rjmp	.+134    	; 0xc9d0 <update_player+0x1b2>
		}
		if (shoot_pressed(p) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    c94a:	7e 01       	movw	r14, r28
    c94c:	f9 e2       	ldi	r31, 0x29	; 41
    c94e:	ef 0e       	add	r14, r31
    c950:	f1 1c       	adc	r15, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    c952:	8e 89       	ldd	r24, Y+22	; 0x16
    c954:	88 23       	and	r24, r24
    c956:	a1 f0       	breq	.+40     	; 0xc980 <update_player+0x162>
					{
						init_shot_state(shot, ROCKET_SHOT);
    c958:	61 e0       	ldi	r22, 0x01	; 1
    c95a:	c7 01       	movw	r24, r14
    c95c:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    c960:	61 e0       	ldi	r22, 0x01	; 1
    c962:	c7 01       	movw	r24, r14
    c964:	0e 94 0a 55 	call	0xaa14	; 0xaa14 <set_shot_animations>
						SFX_ROCKET;
    c968:	80 91 4b 0c 	lds	r24, 0x0C4B
    c96c:	80 fd       	sbrc	r24, 0
    c96e:	1e c0       	rjmp	.+60     	; 0xc9ac <update_player+0x18e>
    c970:	80 91 b4 0f 	lds	r24, 0x0FB4
    c974:	80 fd       	sbrc	r24, 0
    c976:	1a c0       	rjmp	.+52     	; 0xc9ac <update_player+0x18e>
    c978:	2f ef       	ldi	r18, 0xFF	; 255
    c97a:	47 e1       	ldi	r20, 0x17	; 23
    c97c:	66 e0       	ldi	r22, 0x06	; 6
    c97e:	13 c0       	rjmp	.+38     	; 0xc9a6 <update_player+0x188>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    c980:	60 e0       	ldi	r22, 0x00	; 0
    c982:	c7 01       	movw	r24, r14
    c984:	0e 94 f0 54 	call	0xa9e0	; 0xa9e0 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    c988:	60 e0       	ldi	r22, 0x00	; 0
    c98a:	c7 01       	movw	r24, r14
    c98c:	0e 94 0a 55 	call	0xaa14	; 0xaa14 <set_shot_animations>
						SFX_CANNONBALL;
    c990:	80 91 4b 0c 	lds	r24, 0x0C4B
    c994:	80 fd       	sbrc	r24, 0
    c996:	0a c0       	rjmp	.+20     	; 0xc9ac <update_player+0x18e>
    c998:	80 91 b4 0f 	lds	r24, 0x0FB4
    c99c:	80 fd       	sbrc	r24, 0
    c99e:	06 c0       	rjmp	.+12     	; 0xc9ac <update_player+0x18e>
    c9a0:	2f ef       	ldi	r18, 0xFF	; 255
    c9a2:	47 e1       	ldi	r20, 0x17	; 23
    c9a4:	62 e0       	ldi	r22, 0x02	; 2
    c9a6:	84 e0       	ldi	r24, 0x04	; 4
    c9a8:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
					}
					player->active_shots++;
    c9ac:	8e 85       	ldd	r24, Y+14	; 0x0e
    c9ae:	8f 5f       	subi	r24, 0xFF	; 255
    c9b0:	8e 87       	std	Y+14, r24	; 0x0e
					shot->shared.direction = player->shared.direction;
    c9b2:	88 81       	ld	r24, Y
    c9b4:	89 a7       	std	Y+41, r24	; 0x29
					position_shot(player, shot);
    c9b6:	b7 01       	movw	r22, r14
    c9b8:	ce 01       	movw	r24, r28
    c9ba:	0e 94 d1 56 	call	0xada2	; 0xada2 <position_shot>
					shot->active = 1;
    c9be:	81 e0       	ldi	r24, 0x01	; 1
    c9c0:	8c ab       	std	Y+52, r24	; 0x34
					if (player->has_over_speed)
    c9c2:	8f 89       	ldd	r24, Y+23	; 0x17
    c9c4:	88 23       	and	r24, r24
    c9c6:	21 f0       	breq	.+8      	; 0xc9d0 <update_player+0x1b2>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    c9c8:	80 e0       	ldi	r24, 0x00	; 0
    c9ca:	94 e0       	ldi	r25, 0x04	; 4
    c9cc:	9c a7       	std	Y+44, r25	; 0x2c
    c9ce:	8b a7       	std	Y+43, r24	; 0x2b
				}
			}
		}
	}
	
	if (!game.paused)
    c9d0:	80 91 08 0c 	lds	r24, 0x0C08
    c9d4:	81 11       	cpse	r24, r1
    c9d6:	55 c0       	rjmp	.+170    	; 0xca82 <update_player+0x264>
	{
		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
    c9d8:	8e 01       	movw	r16, r28
    c9da:	07 5d       	subi	r16, 0xD7	; 215
    c9dc:	1f 4f       	sbci	r17, 0xFF	; 255
			if (shot->active)
    c9de:	8c a9       	ldd	r24, Y+52	; 0x34
    c9e0:	88 23       	and	r24, r24
    c9e2:	09 f4       	brne	.+2      	; 0xc9e6 <update_player+0x1c8>
    c9e4:	61 c0       	rjmp	.+194    	; 0xcaa8 <update_player+0x28a>
			{
				switch (shot->shared.direction)
    c9e6:	89 a5       	ldd	r24, Y+41	; 0x29
    c9e8:	81 30       	cpi	r24, 0x01	; 1
    c9ea:	d9 f0       	breq	.+54     	; 0xca22 <update_player+0x204>
    c9ec:	78 f0       	brcs	.+30     	; 0xca0c <update_player+0x1ee>
    c9ee:	82 30       	cpi	r24, 0x02	; 2
    c9f0:	19 f1       	breq	.+70     	; 0xca38 <update_player+0x21a>
    c9f2:	83 30       	cpi	r24, 0x03	; 3
    c9f4:	59 f5       	brne	.+86     	; 0xca4c <update_player+0x22e>
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
    c9f6:	b8 01       	movw	r22, r16
    c9f8:	ce 01       	movw	r24, r28
    c9fa:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    c9fe:	2d a5       	ldd	r18, Y+45	; 0x2d
    ca00:	3e a5       	ldd	r19, Y+46	; 0x2e
    ca02:	28 1b       	sub	r18, r24
    ca04:	39 0b       	sbc	r19, r25
    ca06:	3e a7       	std	Y+46, r19	; 0x2e
    ca08:	2d a7       	std	Y+45, r18	; 0x2d
    ca0a:	20 c0       	rjmp	.+64     	; 0xca4c <update_player+0x22e>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= get_delta(player, &shot->shared); break;
    ca0c:	b8 01       	movw	r22, r16
    ca0e:	ce 01       	movw	r24, r28
    ca10:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    ca14:	2f a5       	ldd	r18, Y+47	; 0x2f
    ca16:	38 a9       	ldd	r19, Y+48	; 0x30
    ca18:	28 1b       	sub	r18, r24
    ca1a:	39 0b       	sbc	r19, r25
    ca1c:	38 ab       	std	Y+48, r19	; 0x30
    ca1e:	2f a7       	std	Y+47, r18	; 0x2f
    ca20:	15 c0       	rjmp	.+42     	; 0xca4c <update_player+0x22e>
					case D_RIGHT: shot->shared.x += get_delta(player, &shot->shared); break;
    ca22:	b8 01       	movw	r22, r16
    ca24:	ce 01       	movw	r24, r28
    ca26:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    ca2a:	2d a5       	ldd	r18, Y+45	; 0x2d
    ca2c:	3e a5       	ldd	r19, Y+46	; 0x2e
    ca2e:	82 0f       	add	r24, r18
    ca30:	93 1f       	adc	r25, r19
    ca32:	9e a7       	std	Y+46, r25	; 0x2e
    ca34:	8d a7       	std	Y+45, r24	; 0x2d
    ca36:	0a c0       	rjmp	.+20     	; 0xca4c <update_player+0x22e>
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
    ca38:	b8 01       	movw	r22, r16
    ca3a:	ce 01       	movw	r24, r28
    ca3c:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    ca40:	2f a5       	ldd	r18, Y+47	; 0x2f
    ca42:	38 a9       	ldd	r19, Y+48	; 0x30
    ca44:	82 0f       	add	r24, r18
    ca46:	93 1f       	adc	r25, r19
    ca48:	98 ab       	std	Y+48, r25	; 0x30
    ca4a:	8f a7       	std	Y+47, r24	; 0x2f
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
    ca4c:	ed a8       	ldd	r14, Y+53	; 0x35
    ca4e:	fe a8       	ldd	r15, Y+54	; 0x36
    ca50:	81 e4       	ldi	r24, 0x41	; 65
    ca52:	e8 16       	cp	r14, r24
    ca54:	f1 04       	cpc	r15, r1
    ca56:	28 f4       	brcc	.+10     	; 0xca62 <update_player+0x244>
    ca58:	b8 01       	movw	r22, r16
    ca5a:	ce 01       	movw	r24, r28
    ca5c:	0e 94 b1 57 	call	0xaf62	; 0xaf62 <get_delta>
    ca60:	02 c0       	rjmp	.+4      	; 0xca66 <update_player+0x248>
    ca62:	80 e0       	ldi	r24, 0x00	; 0
    ca64:	90 e0       	ldi	r25, 0x00	; 0
    ca66:	e8 0e       	add	r14, r24
    ca68:	f9 1e       	adc	r15, r25
    ca6a:	fe aa       	std	Y+54, r15	; 0x36
    ca6c:	ed aa       	std	Y+53, r14	; 0x35
				collision_detect_shot(player, shot);
    ca6e:	b8 01       	movw	r22, r16
    ca70:	ce 01       	movw	r24, r28
		{
			SFX_NAVIGATE;
			exit_game();
		}
	}
}
    ca72:	df 91       	pop	r29
    ca74:	cf 91       	pop	r28
    ca76:	1f 91       	pop	r17
    ca78:	0f 91       	pop	r16
    ca7a:	ff 90       	pop	r15
    ca7c:	ef 90       	pop	r14
					case D_DOWN: shot->shared.y += get_delta(player, &shot->shared); break;
					case D_LEFT: shot->shared.x -= get_delta(player, &shot->shared); break;
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? get_delta(player, &shot->shared) : 0;
				collision_detect_shot(player, shot);
    ca7e:	0c 94 5e 5c 	jmp	0xb8bc	; 0xb8bc <collision_detect_shot>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    ca82:	f8 01       	movw	r30, r16
    ca84:	80 81       	ld	r24, Z
    ca86:	91 81       	ldd	r25, Z+1	; 0x01
    ca88:	91 ff       	sbrs	r25, 1
    ca8a:	0e c0       	rjmp	.+28     	; 0xcaa8 <update_player+0x28a>
		{
			SFX_NAVIGATE;
    ca8c:	2f ef       	ldi	r18, 0xFF	; 255
    ca8e:	47 e1       	ldi	r20, 0x17	; 23
    ca90:	65 e0       	ldi	r22, 0x05	; 5
    ca92:	84 e0       	ldi	r24, 0x04	; 4
    ca94:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
			exit_game();
		}
	}
}
    ca98:	df 91       	pop	r29
    ca9a:	cf 91       	pop	r28
    ca9c:	1f 91       	pop	r17
    ca9e:	0f 91       	pop	r16
    caa0:	ff 90       	pop	r15
    caa2:	ef 90       	pop	r14
	else
	{
		if (p->pressed & BTN_X)
		{
			SFX_NAVIGATE;
			exit_game();
    caa4:	0c 94 07 64 	jmp	0xc80e	; 0xc80e <exit_game>
		}
	}
}
    caa8:	df 91       	pop	r29
    caaa:	cf 91       	pop	r28
    caac:	1f 91       	pop	r17
    caae:	0f 91       	pop	r16
    cab0:	ff 90       	pop	r15
    cab2:	ef 90       	pop	r14
    cab4:	08 95       	ret

0000cab6 <resolve_scoring>:

void resolve_scoring()
{
    cab6:	cf 93       	push	r28
	u8 next_level;
	
	if (game.current_level < LEVEL_COUNT - 1)
    cab8:	c0 91 07 0c 	lds	r28, 0x0C07
    cabc:	80 91 46 0c 	lds	r24, 0x0C46
    cac0:	ca 30       	cpi	r28, 0x0A	; 10
    cac2:	80 f5       	brcc	.+96     	; 0xcb24 <resolve_scoring+0x6e>
	{
		if (player1.level_score >= MAX_LEVEL_SCORE && !(player2.flags & EXPLODING_FLAG))
    cac4:	8a 30       	cpi	r24, 0x0A	; 10
    cac6:	70 f0       	brcs	.+28     	; 0xcae4 <resolve_scoring+0x2e>
    cac8:	80 91 b4 0f 	lds	r24, 0x0FB4
    cacc:	80 fd       	sbrc	r24, 0
    cace:	0a c0       	rjmp	.+20     	; 0xcae4 <resolve_scoring+0x2e>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    cad0:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <LBHideAllSprites>
			load_level_tiles(true);
    cad4:	81 e0       	ldi	r24, 0x01	; 1
    cad6:	0e 94 a0 60 	call	0xc140	; 0xc140 <load_level_tiles>
			print_level_score(&player1, &player2);
    cada:	62 ea       	ldi	r22, 0xA2	; 162
    cadc:	7f e0       	ldi	r23, 0x0F	; 15
    cade:	89 e3       	ldi	r24, 0x39	; 57
    cae0:	9c e0       	ldi	r25, 0x0C	; 12
    cae2:	12 c0       	rjmp	.+36     	; 0xcb08 <resolve_scoring+0x52>
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
		}
		else if (player2.level_score >= MAX_LEVEL_SCORE && !(player1.flags & EXPLODING_FLAG))
    cae4:	80 91 af 0f 	lds	r24, 0x0FAF
    cae8:	8a 30       	cpi	r24, 0x0A	; 10
    caea:	08 f4       	brcc	.+2      	; 0xcaee <resolve_scoring+0x38>
    caec:	a7 c0       	rjmp	.+334    	; 0xcc3c <resolve_scoring+0x186>
    caee:	80 91 4b 0c 	lds	r24, 0x0C4B
    caf2:	80 fd       	sbrc	r24, 0
    caf4:	a3 c0       	rjmp	.+326    	; 0xcc3c <resolve_scoring+0x186>
		{
			next_level = game.current_level + 1;
			LBHideAllSprites();
    caf6:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <LBHideAllSprites>
			load_level_tiles(true);
    cafa:	81 e0       	ldi	r24, 0x01	; 1
    cafc:	0e 94 a0 60 	call	0xc140	; 0xc140 <load_level_tiles>
			print_level_score(&player2, &player1);
    cb00:	69 e3       	ldi	r22, 0x39	; 57
    cb02:	7c e0       	ldi	r23, 0x0C	; 12
    cb04:	82 ea       	ldi	r24, 0xA2	; 162
    cb06:	9f e0       	ldi	r25, 0x0F	; 15
    cb08:	0e 94 0b 57 	call	0xae16	; 0xae16 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    cb0c:	84 e0       	ldi	r24, 0x04	; 4
    cb0e:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <LBWaitSeconds>
			player1.level_score = 0;
    cb12:	10 92 46 0c 	sts	0x0C46, r1
			player2.level_score = 0;
    cb16:	10 92 af 0f 	sts	0x0FAF, r1
			level_transition(next_level);
    cb1a:	81 e0       	ldi	r24, 0x01	; 1
    cb1c:	8c 0f       	add	r24, r28
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
	}
}
    cb1e:	cf 91       	pop	r28
			load_level_tiles(true);
			print_level_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			player1.level_score = 0;
			player2.level_score = 0;
			level_transition(next_level);
    cb20:	0c 94 cb 61 	jmp	0xc396	; 0xc396 <level_transition>
		}
	}
	else
	{
		if ((player1.level_score >= MAX_LEVEL_SCORE) || (player2.level_score >= MAX_LEVEL_SCORE))
    cb24:	8a 30       	cpi	r24, 0x0A	; 10
    cb26:	28 f4       	brcc	.+10     	; 0xcb32 <resolve_scoring+0x7c>
    cb28:	80 91 af 0f 	lds	r24, 0x0FAF
    cb2c:	8a 30       	cpi	r24, 0x0A	; 10
    cb2e:	08 f4       	brcc	.+2      	; 0xcb32 <resolve_scoring+0x7c>
    cb30:	85 c0       	rjmp	.+266    	; 0xcc3c <resolve_scoring+0x186>
		{
			// Tie Breaker
			if (player1.score == player2.score) return;
    cb32:	90 91 45 0c 	lds	r25, 0x0C45
    cb36:	80 91 ae 0f 	lds	r24, 0x0FAE
    cb3a:	98 17       	cp	r25, r24
    cb3c:	09 f4       	brne	.+2      	; 0xcb40 <resolve_scoring+0x8a>
    cb3e:	7e c0       	rjmp	.+252    	; 0xcc3c <resolve_scoring+0x186>
			
			if (game.boss_fight_status == 0)
    cb40:	20 91 09 0c 	lds	r18, 0x0C09
    cb44:	21 11       	cpse	r18, r1
    cb46:	46 c0       	rjmp	.+140    	; 0xcbd4 <resolve_scoring+0x11e>
			{
				// Initiate boss fight
				game.boss_fight_status = BOSS_FIGHT_SCOPE_LOADING;
    cb48:	c1 e0       	ldi	r28, 0x01	; 1
    cb4a:	c0 93 09 0c 	sts	0x0C09, r28
				if (player1.score > player2.score)
    cb4e:	89 17       	cp	r24, r25
    cb50:	e8 f4       	brcc	.+58     	; 0xcb8c <resolve_scoring+0xd6>
				{
					game.boss_fight_player = &player1;
    cb52:	89 e3       	ldi	r24, 0x39	; 57
    cb54:	9c e0       	ldi	r25, 0x0C	; 12
    cb56:	90 93 18 0c 	sts	0x0C18, r25
    cb5a:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_joypad = &p1;
    cb5e:	8c ea       	ldi	r24, 0xAC	; 172
    cb60:	9c e0       	ldi	r25, 0x0C	; 12
    cb62:	90 93 1a 0c 	sts	0x0C1A, r25
    cb66:	80 93 19 0c 	sts	0x0C19, r24
					game.boss_fight_player_hud = 0;
    cb6a:	10 92 0a 0c 	sts	0x0C0A, r1
					kill_player(&player2, 15);
    cb6e:	6f e0       	ldi	r22, 0x0F	; 15
    cb70:	82 ea       	ldi	r24, 0xA2	; 162
    cb72:	9f e0       	ldi	r25, 0x0F	; 15
    cb74:	0e 94 92 5b 	call	0xb724	; 0xb724 <kill_player>
					player_spawn(&player2);
    cb78:	82 ea       	ldi	r24, 0xA2	; 162
    cb7a:	9f e0       	ldi	r25, 0x0F	; 15
    cb7c:	0e 94 09 56 	call	0xac12	; 0xac12 <player_spawn>
					player2.flags = player2.flags ^ EXPLODING_FLAG;
    cb80:	80 91 b4 0f 	lds	r24, 0x0FB4
    cb84:	c8 27       	eor	r28, r24
    cb86:	c0 93 b4 0f 	sts	0x0FB4, r28
    cb8a:	1d c0       	rjmp	.+58     	; 0xcbc6 <resolve_scoring+0x110>
				}
				else
				{
					game.boss_fight_player = &player2;
    cb8c:	82 ea       	ldi	r24, 0xA2	; 162
    cb8e:	9f e0       	ldi	r25, 0x0F	; 15
    cb90:	90 93 18 0c 	sts	0x0C18, r25
    cb94:	80 93 17 0c 	sts	0x0C17, r24
					game.boss_fight_joypad = &p2;
    cb98:	8f ed       	ldi	r24, 0xDF	; 223
    cb9a:	9b e0       	ldi	r25, 0x0B	; 11
    cb9c:	90 93 1a 0c 	sts	0x0C1A, r25
    cba0:	80 93 19 0c 	sts	0x0C19, r24
					game.boss_fight_player_hud = 15;
    cba4:	8f e0       	ldi	r24, 0x0F	; 15
    cba6:	80 93 0a 0c 	sts	0x0C0A, r24
					kill_player(&player1, 0);
    cbaa:	60 e0       	ldi	r22, 0x00	; 0
    cbac:	89 e3       	ldi	r24, 0x39	; 57
    cbae:	9c e0       	ldi	r25, 0x0C	; 12
    cbb0:	0e 94 92 5b 	call	0xb724	; 0xb724 <kill_player>
					player_spawn(&player1);
    cbb4:	89 e3       	ldi	r24, 0x39	; 57
    cbb6:	9c e0       	ldi	r25, 0x0C	; 12
    cbb8:	0e 94 09 56 	call	0xac12	; 0xac12 <player_spawn>
					player1.flags = player1.flags ^ EXPLODING_FLAG;
    cbbc:	80 91 4b 0c 	lds	r24, 0x0C4B
    cbc0:	c8 27       	eor	r28, r24
    cbc2:	c0 93 4b 0c 	sts	0x0C4B, r28
				}
				scope_animation.tile_index = 15 + 5*30;
    cbc6:	85 ea       	ldi	r24, 0xA5	; 165
    cbc8:	90 e0       	ldi	r25, 0x00	; 0
    cbca:	90 93 30 10 	sts	0x1030, r25
    cbce:	80 93 2f 10 	sts	0x102F, r24
				return;
    cbd2:	34 c0       	rjmp	.+104    	; 0xcc3c <resolve_scoring+0x186>
			}
			
			// Print level score
			LBHideAllSprites();
    cbd4:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <LBHideAllSprites>
			load_level_tiles(true);
    cbd8:	81 e0       	ldi	r24, 0x01	; 1
    cbda:	0e 94 a0 60 	call	0xc140	; 0xc140 <load_level_tiles>
			if (player1.level_score > player2.level_score)
    cbde:	90 91 46 0c 	lds	r25, 0x0C46
    cbe2:	80 91 af 0f 	lds	r24, 0x0FAF
    cbe6:	89 17       	cp	r24, r25
    cbe8:	28 f4       	brcc	.+10     	; 0xcbf4 <resolve_scoring+0x13e>
				print_level_score(&player1, &player2);
    cbea:	62 ea       	ldi	r22, 0xA2	; 162
    cbec:	7f e0       	ldi	r23, 0x0F	; 15
    cbee:	89 e3       	ldi	r24, 0x39	; 57
    cbf0:	9c e0       	ldi	r25, 0x0C	; 12
    cbf2:	04 c0       	rjmp	.+8      	; 0xcbfc <resolve_scoring+0x146>
			else
				print_level_score(&player2, &player1);
    cbf4:	69 e3       	ldi	r22, 0x39	; 57
    cbf6:	7c e0       	ldi	r23, 0x0C	; 12
    cbf8:	82 ea       	ldi	r24, 0xA2	; 162
    cbfa:	9f e0       	ldi	r25, 0x0F	; 15
    cbfc:	0e 94 0b 57 	call	0xae16	; 0xae16 <print_level_score>
			LBWaitSeconds(TEXT_LINGER);
    cc00:	84 e0       	ldi	r24, 0x04	; 4
    cc02:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <LBWaitSeconds>
			player1.level_score = 0;
    cc06:	10 92 46 0c 	sts	0x0C46, r1
			player2.level_score = 0;
    cc0a:	10 92 af 0f 	sts	0x0FAF, r1
			
			// Print game score and exit
			if (player1.score > player2.score)
    cc0e:	90 91 45 0c 	lds	r25, 0x0C45
    cc12:	80 91 ae 0f 	lds	r24, 0x0FAE
    cc16:	89 17       	cp	r24, r25
    cc18:	28 f4       	brcc	.+10     	; 0xcc24 <resolve_scoring+0x16e>
				print_final_score(&player1, &player2);
    cc1a:	62 ea       	ldi	r22, 0xA2	; 162
    cc1c:	7f e0       	ldi	r23, 0x0F	; 15
    cc1e:	89 e3       	ldi	r24, 0x39	; 57
    cc20:	9c e0       	ldi	r25, 0x0C	; 12
    cc22:	04 c0       	rjmp	.+8      	; 0xcc2c <resolve_scoring+0x176>
			else
				print_final_score(&player2, &player1);
    cc24:	69 e3       	ldi	r22, 0x39	; 57
    cc26:	7c e0       	ldi	r23, 0x0C	; 12
    cc28:	82 ea       	ldi	r24, 0xA2	; 162
    cc2a:	9f e0       	ldi	r25, 0x0F	; 15
    cc2c:	0e 94 4d 57 	call	0xae9a	; 0xae9a <print_final_score>
			LBWaitSeconds(TEXT_LINGER);
    cc30:	84 e0       	ldi	r24, 0x04	; 4
    cc32:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <LBWaitSeconds>
			exit_game();
		}
	}
}
    cc36:	cf 91       	pop	r28
			if (player1.score > player2.score)
				print_final_score(&player1, &player2);
			else
				print_final_score(&player2, &player1);
			LBWaitSeconds(TEXT_LINGER);
			exit_game();
    cc38:	0c 94 07 64 	jmp	0xc80e	; 0xc80e <exit_game>
		}
	}
}
    cc3c:	cf 91       	pop	r28
    cc3e:	08 95       	ret

0000cc40 <update_level>:
	if (t->lives <= 0) return (char*) map_none;
	return (char*) map_sub_shot;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    cc40:	df 92       	push	r13
    cc42:	ef 92       	push	r14
    cc44:	ff 92       	push	r15
    cc46:	0f 93       	push	r16
    cc48:	1f 93       	push	r17
    cc4a:	cf 93       	push	r28
    cc4c:	df 93       	push	r29
    cc4e:	8c 01       	movw	r16, r24
    cc50:	eb 01       	movw	r28, r22
	char t2_index = 0;
	char t1_shot_index = 0;
	char t2_shot_index = 0;
	u16 held = 0;

	if (game.paused)
    cc52:	80 91 08 0c 	lds	r24, 0x0C08
    cc56:	88 23       	and	r24, r24
    cc58:	19 f1       	breq	.+70     	; 0xcca0 <update_level+0x60>
	{
		// Render
		LBHideAllSprites();
    cc5a:	0e 94 7b 54 	call	0xa8f6	; 0xa8f6 <LBHideAllSprites>
		DrawMap2(8, 12, (const char*) map_pause);
    cc5e:	45 e6       	ldi	r20, 0x65	; 101
    cc60:	5e e7       	ldi	r21, 0x7E	; 126
    cc62:	6c e0       	ldi	r22, 0x0C	; 12
    cc64:	88 e0       	ldi	r24, 0x08	; 8
    cc66:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
		Print(12, 13, (char*) strPaused);
    cc6a:	4a e1       	ldi	r20, 0x1A	; 26
    cc6c:	52 e0       	ldi	r21, 0x02	; 2
    cc6e:	6d e0       	ldi	r22, 0x0D	; 13
    cc70:	70 e0       	ldi	r23, 0x00	; 0
    cc72:	8c e0       	ldi	r24, 0x0C	; 12
    cc74:	90 e0       	ldi	r25, 0x00	; 0
    cc76:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
		Print(11, 14, (char*) strExit);
    cc7a:	41 e2       	ldi	r20, 0x21	; 33
    cc7c:	52 e0       	ldi	r21, 0x02	; 2
    cc7e:	6e e0       	ldi	r22, 0x0E	; 14
    cc80:	70 e0       	ldi	r23, 0x00	; 0
    cc82:	8b e0       	ldi	r24, 0x0B	; 11
    cc84:	90 e0       	ldi	r25, 0x00	; 0
    cc86:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
		
		// Update
		update_player(p1, &player1);
    cc8a:	69 e3       	ldi	r22, 0x39	; 57
    cc8c:	7c e0       	ldi	r23, 0x0C	; 12
    cc8e:	c8 01       	movw	r24, r16
    cc90:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
		update_player(p2, &player2);
    cc94:	62 ea       	ldi	r22, 0xA2	; 162
    cc96:	7f e0       	ldi	r23, 0x0F	; 15
    cc98:	ce 01       	movw	r24, r28
    cc9a:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
    cc9e:	d8 c1       	rjmp	.+944    	; 0xd050 <update_level+0x410>
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SCOPE_LOADING)
    cca0:	90 91 09 0c 	lds	r25, 0x0C09
    cca4:	91 30       	cpi	r25, 0x01	; 1
    cca6:	19 f4       	brne	.+6      	; 0xccae <update_level+0x6e>
	{
		// Render
		render_boss_fight_scope_load();
    cca8:	0e 94 fb 61 	call	0xc3f6	; 0xc3f6 <render_boss_fight_scope_load>
    ccac:	05 c0       	rjmp	.+10     	; 0xccb8 <update_level+0x78>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_LOADING)
    ccae:	92 30       	cpi	r25, 0x02	; 2
    ccb0:	09 f0       	breq	.+2      	; 0xccb4 <update_level+0x74>
    ccb2:	4e c0       	rjmp	.+156    	; 0xcd50 <update_level+0x110>
	{
		// Render
		render_boss_fight_sub_load();
    ccb4:	0e 94 0a 62 	call	0xc414	; 0xc414 <render_boss_fight_sub_load>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    ccb8:	60 e0       	ldi	r22, 0x00	; 0
    ccba:	80 91 17 0c 	lds	r24, 0x0C17
    ccbe:	90 91 18 0c 	lds	r25, 0x0C18
    ccc2:	0e 94 a6 58 	call	0xb14c	; 0xb14c <tank_map>
    ccc6:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    ccc8:	40 e0       	ldi	r20, 0x00	; 0
    ccca:	68 e9       	ldi	r22, 0x98	; 152
    cccc:	74 e4       	ldi	r23, 0x44	; 68
    ccce:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		p1_shot_index = p2_index + 4;
    ccd2:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    ccd4:	6c 2f       	mov	r22, r28
    ccd6:	80 91 17 0c 	lds	r24, 0x0C17
    ccda:	90 91 18 0c 	lds	r25, 0x0C18
    ccde:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
    cce2:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    cce4:	40 e0       	ldi	r20, 0x00	; 0
    cce6:	6e e9       	ldi	r22, 0x9E	; 158
    cce8:	74 e4       	ldi	r23, 0x44	; 68
    ccea:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    ccee:	6c 2f       	mov	r22, r28
    ccf0:	80 91 17 0c 	lds	r24, 0x0C17
    ccf4:	90 91 18 0c 	lds	r25, 0x0C18
    ccf8:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
		render_player(game.boss_fight_player, p1_index);
    ccfc:	60 e0       	ldi	r22, 0x00	; 0
    ccfe:	80 91 17 0c 	lds	r24, 0x0C17
    cd02:	90 91 18 0c 	lds	r25, 0x0C18
    cd06:	0e 94 24 58 	call	0xb048	; 0xb048 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    cd0a:	6c 2f       	mov	r22, r28
    cd0c:	80 91 17 0c 	lds	r24, 0x0C17
    cd10:	90 91 18 0c 	lds	r25, 0x0C18
    cd14:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_shot(&player2, p2_shot_index);
    cd18:	6d 2f       	mov	r22, r29
    cd1a:	82 ea       	ldi	r24, 0xA2	; 162
    cd1c:	9f e0       	ldi	r25, 0x0F	; 15
    cd1e:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_tile_explosions(&tile_animations);
    cd22:	8c e1       	ldi	r24, 0x1C	; 28
    cd24:	9c e0       	ldi	r25, 0x0C	; 12
    cd26:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    cd2a:	60 91 17 0c 	lds	r22, 0x0C17
    cd2e:	70 91 18 0c 	lds	r23, 0x0C18
    cd32:	80 91 19 0c 	lds	r24, 0x0C19
    cd36:	90 91 1a 0c 	lds	r25, 0x0C1A
    cd3a:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    cd3e:	60 91 0a 0c 	lds	r22, 0x0C0A
    cd42:	80 91 17 0c 	lds	r24, 0x0C17
    cd46:	90 91 18 0c 	lds	r25, 0x0C18
    cd4a:	0e 94 f7 5e 	call	0xbdee	; 0xbdee <collision_detect_player>
    cd4e:	80 c1       	rjmp	.+768    	; 0xd050 <update_level+0x410>
	}
	else if (game.boss_fight_status == BOSS_FIGHT)
    cd50:	94 30       	cpi	r25, 0x04	; 4
    cd52:	09 f0       	breq	.+2      	; 0xcd56 <update_level+0x116>
    cd54:	94 c0       	rjmp	.+296    	; 0xce7e <update_level+0x23e>
	{
		if ((turret1.lives <= 0) && (turret2.lives <= 0))
    cd56:	80 91 68 10 	lds	r24, 0x1068
    cd5a:	81 11       	cpse	r24, r1
    cd5c:	07 c0       	rjmp	.+14     	; 0xcd6c <update_level+0x12c>
    cd5e:	80 91 39 10 	lds	r24, 0x1039
    cd62:	81 11       	cpse	r24, r1
    cd64:	03 c0       	rjmp	.+6      	; 0xcd6c <update_level+0x12c>
		{
			game.boss_fight_status = BOSS_FIGHT_SUB_SINKING;
    cd66:	80 e2       	ldi	r24, 0x20	; 32
    cd68:	80 93 09 0c 	sts	0x0C09, r24
		}
		
		// Render
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
    cd6c:	60 e0       	ldi	r22, 0x00	; 0
    cd6e:	80 91 17 0c 	lds	r24, 0x0C17
    cd72:	90 91 18 0c 	lds	r25, 0x0C18
    cd76:	0e 94 a6 58 	call	0xb14c	; 0xb14c <tank_map>
    cd7a:	f8 2e       	mov	r15, r24
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
    cd7c:	68 2f       	mov	r22, r24
    cd7e:	80 91 17 0c 	lds	r24, 0x0C17
    cd82:	90 91 18 0c 	lds	r25, 0x0C18
    cd86:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
    cd8a:	c8 2f       	mov	r28, r24
		t1_shot_index = t1_index+1;
    cd8c:	01 e0       	ldi	r16, 0x01	; 1
    cd8e:	08 0f       	add	r16, r24
		t2_index = t1_index+2;
    cd90:	12 e0       	ldi	r17, 0x02	; 2
    cd92:	18 0f       	add	r17, r24
		t2_shot_index = t1_index+3;
    cd94:	d3 e0       	ldi	r29, 0x03	; 3
    cd96:	d8 0f       	add	r29, r24
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cd98:	80 91 68 10 	lds	r24, 0x1068
    cd9c:	88 23       	and	r24, r24
    cd9e:	19 f0       	breq	.+6      	; 0xcda6 <update_level+0x166>
	return (char*) map_sub_turret;
    cda0:	60 e5       	ldi	r22, 0x50	; 80
    cda2:	74 e4       	ldi	r23, 0x44	; 68
    cda4:	02 c0       	rjmp	.+4      	; 0xcdaa <update_level+0x16a>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cda6:	6e e9       	ldi	r22, 0x9E	; 158
    cda8:	74 e4       	ldi	r23, 0x44	; 68
		p1_shot_index = tank_map(game.boss_fight_player, p1_index);
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
    cdaa:	40 e0       	ldi	r20, 0x00	; 0
    cdac:	8c 2f       	mov	r24, r28
    cdae:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cdb2:	80 91 68 10 	lds	r24, 0x1068
    cdb6:	88 23       	and	r24, r24
    cdb8:	19 f0       	breq	.+6      	; 0xcdc0 <update_level+0x180>
	return (char*) map_sub_shot;
    cdba:	63 e5       	ldi	r22, 0x53	; 83
    cdbc:	74 e4       	ldi	r23, 0x44	; 68
    cdbe:	02 c0       	rjmp	.+4      	; 0xcdc4 <update_level+0x184>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cdc0:	6e e9       	ldi	r22, 0x9E	; 158
    cdc2:	74 e4       	ldi	r23, 0x44	; 68
		t1_index = shot_map(game.boss_fight_player, p1_shot_index);
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
    cdc4:	40 e0       	ldi	r20, 0x00	; 0
    cdc6:	80 2f       	mov	r24, r16
    cdc8:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cdcc:	80 91 39 10 	lds	r24, 0x1039
    cdd0:	88 23       	and	r24, r24
    cdd2:	19 f0       	breq	.+6      	; 0xcdda <update_level+0x19a>
	return (char*) map_sub_turret;
    cdd4:	60 e5       	ldi	r22, 0x50	; 80
    cdd6:	74 e4       	ldi	r23, 0x44	; 68
    cdd8:	02 c0       	rjmp	.+4      	; 0xcdde <update_level+0x19e>
	}
}

char* turret_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cdda:	6e e9       	ldi	r22, 0x9E	; 158
    cddc:	74 e4       	ldi	r23, 0x44	; 68
		t1_shot_index = t1_index+1;
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
    cdde:	40 e0       	ldi	r20, 0x00	; 0
    cde0:	81 2f       	mov	r24, r17
    cde2:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cde6:	80 91 39 10 	lds	r24, 0x1039
    cdea:	88 23       	and	r24, r24
    cdec:	19 f0       	breq	.+6      	; 0xcdf4 <update_level+0x1b4>
	return (char*) map_sub_shot;
    cdee:	63 e5       	ldi	r22, 0x53	; 83
    cdf0:	74 e4       	ldi	r23, 0x44	; 68
    cdf2:	02 c0       	rjmp	.+4      	; 0xcdf8 <update_level+0x1b8>
	return (char*) map_sub_turret;
}

char* turret_shot_map(Turret* t)
{
	if (t->lives <= 0) return (char*) map_none;
    cdf4:	6e e9       	ldi	r22, 0x9E	; 158
    cdf6:	74 e4       	ldi	r23, 0x44	; 68
		t2_index = t1_index+2;
		t2_shot_index = t1_index+3;
		MapSprite2(t1_index, turret_map(&turret1), 0);
		MapSprite2(t1_shot_index, turret_shot_map(&turret1), 0);
		MapSprite2(t2_index, turret_map(&turret2), 0);
		MapSprite2(t2_shot_index, turret_shot_map(&turret2), 0);
    cdf8:	40 e0       	ldi	r20, 0x00	; 0
    cdfa:	8d 2f       	mov	r24, r29
    cdfc:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		
		render_player(game.boss_fight_player, p1_index);
    ce00:	60 e0       	ldi	r22, 0x00	; 0
    ce02:	80 91 17 0c 	lds	r24, 0x0C17
    ce06:	90 91 18 0c 	lds	r25, 0x0C18
    ce0a:	0e 94 24 58 	call	0xb048	; 0xb048 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    ce0e:	6f 2d       	mov	r22, r15
    ce10:	80 91 17 0c 	lds	r24, 0x0C17
    ce14:	90 91 18 0c 	lds	r25, 0x0C18
    ce18:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_tile_explosions(&tile_animations);
    ce1c:	8c e1       	ldi	r24, 0x1C	; 28
    ce1e:	9c e0       	ldi	r25, 0x0C	; 12
    ce20:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <render_tile_explosions>
		render_boss_turret(&turret1, t1_index);
    ce24:	6c 2f       	mov	r22, r28
    ce26:	80 e6       	ldi	r24, 0x60	; 96
    ce28:	90 e1       	ldi	r25, 0x10	; 16
    ce2a:	0e 94 40 62 	call	0xc480	; 0xc480 <render_boss_turret>
		render_boss_turret_shot(&turret1, t1_shot_index);
    ce2e:	60 2f       	mov	r22, r16
    ce30:	80 e6       	ldi	r24, 0x60	; 96
    ce32:	90 e1       	ldi	r25, 0x10	; 16
    ce34:	0e 94 59 62 	call	0xc4b2	; 0xc4b2 <render_boss_turret_shot>
		render_boss_turret(&turret2, t2_index);
    ce38:	61 2f       	mov	r22, r17
    ce3a:	81 e3       	ldi	r24, 0x31	; 49
    ce3c:	90 e1       	ldi	r25, 0x10	; 16
    ce3e:	0e 94 40 62 	call	0xc480	; 0xc480 <render_boss_turret>
		render_boss_turret_shot(&turret2, t2_shot_index);
    ce42:	6d 2f       	mov	r22, r29
    ce44:	81 e3       	ldi	r24, 0x31	; 49
    ce46:	90 e1       	ldi	r25, 0x10	; 16
    ce48:	0e 94 59 62 	call	0xc4b2	; 0xc4b2 <render_boss_turret_shot>
		
		// Update
		update_turret(&turret1, BOSS_TURRET_1_LEFT_LIMIT, BOSS_TURRET_1_RIGHT_LIMIT);
    ce4c:	40 e6       	ldi	r20, 0x60	; 96
    ce4e:	68 e2       	ldi	r22, 0x28	; 40
    ce50:	80 e6       	ldi	r24, 0x60	; 96
    ce52:	90 e1       	ldi	r25, 0x10	; 16
    ce54:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <update_turret>
		update_turret(&turret2, BOSS_TURRET_2_LEFT_LIMIT, BOSS_TURRET_2_RIGHT_LIMIT);
    ce58:	40 ec       	ldi	r20, 0xC0	; 192
    ce5a:	68 e8       	ldi	r22, 0x88	; 136
    ce5c:	81 e3       	ldi	r24, 0x31	; 49
    ce5e:	90 e1       	ldi	r25, 0x10	; 16
    ce60:	0e 94 72 62 	call	0xc4e4	; 0xc4e4 <update_turret>
		update_turret_shot(&turret1, &turret1.shot[0]);
    ce64:	69 e6       	ldi	r22, 0x69	; 105
    ce66:	70 e1       	ldi	r23, 0x10	; 16
    ce68:	80 e6       	ldi	r24, 0x60	; 96
    ce6a:	90 e1       	ldi	r25, 0x10	; 16
    ce6c:	0e 94 c9 62 	call	0xc592	; 0xc592 <update_turret_shot>
		update_turret_shot(&turret2, &turret2.shot[0]);
    ce70:	6a e3       	ldi	r22, 0x3A	; 58
    ce72:	70 e1       	ldi	r23, 0x10	; 16
    ce74:	81 e3       	ldi	r24, 0x31	; 49
    ce76:	90 e1       	ldi	r25, 0x10	; 16
    ce78:	0e 94 c9 62 	call	0xc592	; 0xc592 <update_turret_shot>
    ce7c:	56 cf       	rjmp	.-340    	; 0xcd2a <update_level+0xea>
		update_player(game.boss_fight_joypad, game.boss_fight_player);
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
	}
	else if (game.boss_fight_status == BOSS_FIGHT_SUB_SINKING)
    ce7e:	90 32       	cpi	r25, 0x20	; 32
    ce80:	09 f0       	breq	.+2      	; 0xce84 <update_level+0x244>
    ce82:	55 c0       	rjmp	.+170    	; 0xcf2e <update_level+0x2ee>
	{
		// Render
		render_boss_fight_sub_sinking();
    ce84:	0e 94 2b 62 	call	0xc456	; 0xc456 <render_boss_fight_sub_sinking>
		p2_index = tank_map(game.boss_fight_player, p1_index);
    ce88:	60 e0       	ldi	r22, 0x00	; 0
    ce8a:	80 91 17 0c 	lds	r24, 0x0C17
    ce8e:	90 91 18 0c 	lds	r25, 0x0C18
    ce92:	0e 94 a6 58 	call	0xb14c	; 0xb14c <tank_map>
    ce96:	c8 2f       	mov	r28, r24
		MapSprite2(p2_index, map_tank_blank, 0);
    ce98:	40 e0       	ldi	r20, 0x00	; 0
    ce9a:	68 e9       	ldi	r22, 0x98	; 152
    ce9c:	74 e4       	ldi	r23, 0x44	; 68
    ce9e:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		p1_shot_index = p2_index + 4;
    cea2:	cc 5f       	subi	r28, 0xFC	; 252
		p2_shot_index = shot_map(game.boss_fight_player, p1_shot_index);
    cea4:	6c 2f       	mov	r22, r28
    cea6:	80 91 17 0c 	lds	r24, 0x0C17
    ceaa:	90 91 18 0c 	lds	r25, 0x0C18
    ceae:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
    ceb2:	d8 2f       	mov	r29, r24
		MapSprite2(p2_shot_index, map_none, 0);
    ceb4:	40 e0       	ldi	r20, 0x00	; 0
    ceb6:	6e e9       	ldi	r22, 0x9E	; 158
    ceb8:	74 e4       	ldi	r23, 0x44	; 68
    ceba:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		shot_map(game.boss_fight_player, p1_shot_index);
    cebe:	6c 2f       	mov	r22, r28
    cec0:	80 91 17 0c 	lds	r24, 0x0C17
    cec4:	90 91 18 0c 	lds	r25, 0x0C18
    cec8:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
		render_player(game.boss_fight_player, p1_index);
    cecc:	60 e0       	ldi	r22, 0x00	; 0
    cece:	80 91 17 0c 	lds	r24, 0x0C17
    ced2:	90 91 18 0c 	lds	r25, 0x0C18
    ced6:	0e 94 24 58 	call	0xb048	; 0xb048 <render_player>
		render_shot(game.boss_fight_player, p1_shot_index);
    ceda:	6c 2f       	mov	r22, r28
    cedc:	80 91 17 0c 	lds	r24, 0x0C17
    cee0:	90 91 18 0c 	lds	r25, 0x0C18
    cee4:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_shot(&player2, p2_shot_index);
    cee8:	6d 2f       	mov	r22, r29
    ceea:	82 ea       	ldi	r24, 0xA2	; 162
    ceec:	9f e0       	ldi	r25, 0x0F	; 15
    ceee:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_tile_explosions(&tile_animations);
    cef2:	8c e1       	ldi	r24, 0x1C	; 28
    cef4:	9c e0       	ldi	r25, 0x0C	; 12
    cef6:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <render_tile_explosions>
		
		// Update
		update_player(game.boss_fight_joypad, game.boss_fight_player);
    cefa:	60 91 17 0c 	lds	r22, 0x0C17
    cefe:	70 91 18 0c 	lds	r23, 0x0C18
    cf02:	80 91 19 0c 	lds	r24, 0x0C19
    cf06:	90 91 1a 0c 	lds	r25, 0x0C1A
    cf0a:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
		collision_detect_player(game.boss_fight_player, game.boss_fight_player_hud);
    cf0e:	60 91 0a 0c 	lds	r22, 0x0C0A
    cf12:	80 91 17 0c 	lds	r24, 0x0C17
    cf16:	90 91 18 0c 	lds	r25, 0x0C18
    cf1a:	0e 94 f7 5e 	call	0xbdee	; 0xbdee <collision_detect_player>
		if (game.boss_fight_status != BOSS_FIGHT_SUB_SINKING)
    cf1e:	80 91 09 0c 	lds	r24, 0x0C09
    cf22:	80 32       	cpi	r24, 0x20	; 32
    cf24:	09 f4       	brne	.+2      	; 0xcf28 <update_level+0x2e8>
    cf26:	94 c0       	rjmp	.+296    	; 0xd050 <update_level+0x410>
		{
			resolve_scoring();
    cf28:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <resolve_scoring>
    cf2c:	91 c0       	rjmp	.+290    	; 0xd050 <update_level+0x410>
		}
	}
	else if (game.boss_fight_status == BOSS_FIGHT_LOST)
    cf2e:	90 31       	cpi	r25, 0x10	; 16
    cf30:	d9 f3       	breq	.-10     	; 0xcf28 <update_level+0x2e8>
	{
		resolve_scoring();
	}
	else if (game.boss_fight_status == 0)
    cf32:	91 11       	cpse	r25, r1
    cf34:	8d c0       	rjmp	.+282    	; 0xd050 <update_level+0x410>
	{
		p2_index = tank_map(&player1, p1_index);
    cf36:	60 e0       	ldi	r22, 0x00	; 0
    cf38:	89 e3       	ldi	r24, 0x39	; 57
    cf3a:	9c e0       	ldi	r25, 0x0C	; 12
    cf3c:	0e 94 a6 58 	call	0xb14c	; 0xb14c <tank_map>
    cf40:	d8 2e       	mov	r13, r24
		p1_shot_index = tank_map(&player2, p2_index);
    cf42:	68 2f       	mov	r22, r24
    cf44:	82 ea       	ldi	r24, 0xA2	; 162
    cf46:	9f e0       	ldi	r25, 0x0F	; 15
    cf48:	0e 94 a6 58 	call	0xb14c	; 0xb14c <tank_map>
    cf4c:	e8 2e       	mov	r14, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    cf4e:	68 2f       	mov	r22, r24
    cf50:	89 e3       	ldi	r24, 0x39	; 57
    cf52:	9c e0       	ldi	r25, 0x0C	; 12
    cf54:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
    cf58:	f8 2e       	mov	r15, r24
		shot_map(&player2, p2_shot_index);
    cf5a:	68 2f       	mov	r22, r24
    cf5c:	82 ea       	ldi	r24, 0xA2	; 162
    cf5e:	9f e0       	ldi	r25, 0x0F	; 15
    cf60:	0e 94 0f 59 	call	0xb21e	; 0xb21e <shot_map>
		game.clear_banter_1 = render_banter(&player1, 15, game.clear_banter_1);
    cf64:	40 91 0e 0c 	lds	r20, 0x0C0E
    cf68:	6f e0       	ldi	r22, 0x0F	; 15
    cf6a:	89 e3       	ldi	r24, 0x39	; 57
    cf6c:	9c e0       	ldi	r25, 0x0C	; 12
    cf6e:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <render_banter>
    cf72:	80 93 0e 0c 	sts	0x0C0E, r24
		game.clear_banter_2 = render_banter(&player2, 0, game.clear_banter_2);
    cf76:	40 91 0f 0c 	lds	r20, 0x0C0F
    cf7a:	60 e0       	ldi	r22, 0x00	; 0
    cf7c:	82 ea       	ldi	r24, 0xA2	; 162
    cf7e:	9f e0       	ldi	r25, 0x0F	; 15
    cf80:	0e 94 fc 57 	call	0xaff8	; 0xaff8 <render_banter>
    cf84:	80 93 0f 0c 	sts	0x0C0F, r24
		render_player(&player1, p1_index);
    cf88:	60 e0       	ldi	r22, 0x00	; 0
    cf8a:	89 e3       	ldi	r24, 0x39	; 57
    cf8c:	9c e0       	ldi	r25, 0x0C	; 12
    cf8e:	0e 94 24 58 	call	0xb048	; 0xb048 <render_player>
		render_player(&player2, p2_index);
    cf92:	6d 2d       	mov	r22, r13
    cf94:	82 ea       	ldi	r24, 0xA2	; 162
    cf96:	9f e0       	ldi	r25, 0x0F	; 15
    cf98:	0e 94 24 58 	call	0xb048	; 0xb048 <render_player>
		render_shot(&player1, p1_shot_index);
    cf9c:	6e 2d       	mov	r22, r14
    cf9e:	89 e3       	ldi	r24, 0x39	; 57
    cfa0:	9c e0       	ldi	r25, 0x0C	; 12
    cfa2:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_shot(&player2, p2_shot_index);
    cfa6:	6f 2d       	mov	r22, r15
    cfa8:	82 ea       	ldi	r24, 0xA2	; 162
    cfaa:	9f e0       	ldi	r25, 0x0F	; 15
    cfac:	0e 94 3d 58 	call	0xb07a	; 0xb07a <render_shot>
		render_tile_explosions(&tile_animations);
    cfb0:	8c e1       	ldi	r24, 0x1C	; 28
    cfb2:	9c e0       	ldi	r25, 0x0C	; 12
    cfb4:	0e 94 57 58 	call	0xb0ae	; 0xb0ae <render_tile_explosions>
		if (game.scope_counter > SCOPE_REVEAL && scope_animation.tile_index > 0)
    cfb8:	80 91 13 0c 	lds	r24, 0x0C13
    cfbc:	90 91 14 0c 	lds	r25, 0x0C14
    cfc0:	89 3e       	cpi	r24, 0xE9	; 233
    cfc2:	93 40       	sbci	r25, 0x03	; 3
    cfc4:	88 f0       	brcs	.+34     	; 0xcfe8 <update_level+0x3a8>
    cfc6:	80 91 2f 10 	lds	r24, 0x102F
    cfca:	90 91 30 10 	lds	r25, 0x1030
    cfce:	18 16       	cp	r1, r24
    cfd0:	19 06       	cpc	r1, r25
    cfd2:	54 f4       	brge	.+20     	; 0xcfe8 <update_level+0x3a8>
		{
			if (render_scope(&scope_animation)) game.scope_counter = 0;
    cfd4:	83 e2       	ldi	r24, 0x23	; 35
    cfd6:	90 e1       	ldi	r25, 0x10	; 16
    cfd8:	0e 94 8c 58 	call	0xb118	; 0xb118 <render_scope>
    cfdc:	88 23       	and	r24, r24
    cfde:	21 f0       	breq	.+8      	; 0xcfe8 <update_level+0x3a8>
    cfe0:	10 92 14 0c 	sts	0x0C14, r1
    cfe4:	10 92 13 0c 	sts	0x0C13, r1
		}
		game.scope_counter++;
    cfe8:	20 91 13 0c 	lds	r18, 0x0C13
    cfec:	30 91 14 0c 	lds	r19, 0x0C14
    cff0:	2f 5f       	subi	r18, 0xFF	; 255
    cff2:	3f 4f       	sbci	r19, 0xFF	; 255
    cff4:	30 93 14 0c 	sts	0x0C14, r19
    cff8:	20 93 13 0c 	sts	0x0C13, r18
		
		// Update
		update_player(p1, &player1);
    cffc:	69 e3       	ldi	r22, 0x39	; 57
    cffe:	7c e0       	ldi	r23, 0x0C	; 12
    d000:	c8 01       	movw	r24, r16
    d002:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
		update_player(p2, &player2);
    d006:	62 ea       	ldi	r22, 0xA2	; 162
    d008:	7f e0       	ldi	r23, 0x0F	; 15
    d00a:	ce 01       	movw	r24, r28
    d00c:	0e 94 0f 64 	call	0xc81e	; 0xc81e <update_player>
		resolve_scoring();
    d010:	0e 94 5b 65 	call	0xcab6	; 0xcab6 <resolve_scoring>
		if (collision_detect_player(&player1, 0)) explode_player(&player1, &player2, 0, 15);
    d014:	60 e0       	ldi	r22, 0x00	; 0
    d016:	89 e3       	ldi	r24, 0x39	; 57
    d018:	9c e0       	ldi	r25, 0x0C	; 12
    d01a:	0e 94 f7 5e 	call	0xbdee	; 0xbdee <collision_detect_player>
    d01e:	88 23       	and	r24, r24
    d020:	41 f0       	breq	.+16     	; 0xd032 <update_level+0x3f2>
    d022:	2f e0       	ldi	r18, 0x0F	; 15
    d024:	40 e0       	ldi	r20, 0x00	; 0
    d026:	62 ea       	ldi	r22, 0xA2	; 162
    d028:	7f e0       	ldi	r23, 0x0F	; 15
    d02a:	89 e3       	ldi	r24, 0x39	; 57
    d02c:	9c e0       	ldi	r25, 0x0C	; 12
    d02e:	0e 94 83 5e 	call	0xbd06	; 0xbd06 <explode_player>
		if (collision_detect_player(&player2, 15)) explode_player(&player2, &player1, 15, 0);
    d032:	6f e0       	ldi	r22, 0x0F	; 15
    d034:	82 ea       	ldi	r24, 0xA2	; 162
    d036:	9f e0       	ldi	r25, 0x0F	; 15
    d038:	0e 94 f7 5e 	call	0xbdee	; 0xbdee <collision_detect_player>
    d03c:	88 23       	and	r24, r24
    d03e:	41 f0       	breq	.+16     	; 0xd050 <update_level+0x410>
    d040:	20 e0       	ldi	r18, 0x00	; 0
    d042:	4f e0       	ldi	r20, 0x0F	; 15
    d044:	69 e3       	ldi	r22, 0x39	; 57
    d046:	7c e0       	ldi	r23, 0x0C	; 12
    d048:	82 ea       	ldi	r24, 0xA2	; 162
    d04a:	9f e0       	ldi	r25, 0x0F	; 15
    d04c:	0e 94 83 5e 	call	0xbd06	; 0xbd06 <explode_player>
	}
	
	if (game.selection == CPUVCPU) 
    d050:	80 91 1b 0c 	lds	r24, 0x0C1B
    d054:	83 30       	cpi	r24, 0x03	; 3
    d056:	71 f5       	brne	.+92     	; 0xd0b4 <update_level+0x474>
	{
		game.demo_counter++;
    d058:	80 91 11 0c 	lds	r24, 0x0C11
    d05c:	90 91 12 0c 	lds	r25, 0x0C12
    d060:	01 96       	adiw	r24, 0x01	; 1
    d062:	90 93 12 0c 	sts	0x0C12, r25
    d066:	80 93 11 0c 	sts	0x0C11, r24
		held = ReadJoypad(0);
    d06a:	80 e0       	ldi	r24, 0x00	; 0
    d06c:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <ReadJoypad>
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d070:	80 e0       	ldi	r24, 0x00	; 0
    d072:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <ReadJoypad>
    d076:	89 2b       	or	r24, r25
    d078:	89 f0       	breq	.+34     	; 0xd09c <update_level+0x45c>
				load_splash();
			} else {
				exit_game();
			}
#else
			game.demo_counter = 0;
    d07a:	10 92 12 0c 	sts	0x0C12, r1
    d07e:	10 92 11 0c 	sts	0x0C11, r1
			fade_through();
    d082:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
			init_game_state();
    d086:	0e 94 df 55 	call	0xabbe	; 0xabbe <init_game_state>
			load_splash();
#endif
		}
	}
}
    d08a:	df 91       	pop	r29
    d08c:	cf 91       	pop	r28
    d08e:	1f 91       	pop	r17
    d090:	0f 91       	pop	r16
    d092:	ff 90       	pop	r15
    d094:	ef 90       	pop	r14
    d096:	df 90       	pop	r13
			}
#else
			game.demo_counter = 0;
			fade_through();
			init_game_state();
			load_splash();
    d098:	0c 94 2a 63 	jmp	0xc654	; 0xc654 <load_splash>
	
	if (game.selection == CPUVCPU) 
	{
		game.demo_counter++;
		held = ReadJoypad(0);
		if (ReadJoypad(0) || ReadJoypad(1) || (game.demo_counter >= DEMO_LENGTH))
    d09c:	81 e0       	ldi	r24, 0x01	; 1
    d09e:	0e 94 ea 43 	call	0x87d4	; 0x87d4 <ReadJoypad>
    d0a2:	89 2b       	or	r24, r25
    d0a4:	51 f7       	brne	.-44     	; 0xd07a <update_level+0x43a>
    d0a6:	80 91 11 0c 	lds	r24, 0x0C11
    d0aa:	90 91 12 0c 	lds	r25, 0x0C12
    d0ae:	88 30       	cpi	r24, 0x08	; 8
    d0b0:	97 40       	sbci	r25, 0x07	; 7
    d0b2:	18 f7       	brcc	.-58     	; 0xd07a <update_level+0x43a>
			init_game_state();
			load_splash();
#endif
		}
	}
}
    d0b4:	df 91       	pop	r29
    d0b6:	cf 91       	pop	r28
    d0b8:	1f 91       	pop	r17
    d0ba:	0f 91       	pop	r16
    d0bc:	ff 90       	pop	r15
    d0be:	ef 90       	pop	r14
    d0c0:	df 90       	pop	r13
    d0c2:	08 95       	ret

0000d0c4 <update_tank_rank>:
	Print(10, 24, (char*) strCancelHandle);
#endif
}

void update_tank_rank(JoyPadState* p1)
{
    d0c4:	cf 93       	push	r28
    d0c6:	df 93       	push	r29
    d0c8:	ec 01       	movw	r28, r24
		load_splash();
	}
	game.tank_rank_counter++;
#else
	// Update
	if (p1->pressed & BTN_X)
    d0ca:	88 81       	ld	r24, Y
    d0cc:	99 81       	ldd	r25, Y+1	; 0x01
    d0ce:	91 ff       	sbrs	r25, 1
    d0d0:	0e c0       	rjmp	.+28     	; 0xd0ee <update_tank_rank+0x2a>
	{
		game.tank_rank_counter = 0;
    d0d2:	10 92 16 0c 	sts	0x0C16, r1
    d0d6:	10 92 15 0c 	sts	0x0C15, r1
		SFX_NAVIGATE;
    d0da:	2f ef       	ldi	r18, 0xFF	; 255
    d0dc:	47 e1       	ldi	r20, 0x17	; 23
    d0de:	65 e0       	ldi	r22, 0x05	; 5
    d0e0:	84 e0       	ldi	r24, 0x04	; 4
    d0e2:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		fade_through();
    d0e6:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
		load_splash();
    d0ea:	0e 94 2a 63 	call	0xc654	; 0xc654 <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    d0ee:	8c 81       	ldd	r24, Y+4	; 0x04
    d0f0:	9d 81       	ldd	r25, Y+5	; 0x05
    d0f2:	92 ff       	sbrs	r25, 2
    d0f4:	1f c0       	rjmp	.+62     	; 0xd134 <update_tank_rank+0x70>
    d0f6:	8e 81       	ldd	r24, Y+6	; 0x06
    d0f8:	8f 3f       	cpi	r24, 0xFF	; 255
    d0fa:	e1 f4       	brne	.+56     	; 0xd134 <update_tank_rank+0x70>
	{
		game.tank_rank_counter = 0;
    d0fc:	10 92 16 0c 	sts	0x0C16, r1
    d100:	10 92 15 0c 	sts	0x0C15, r1
	    SFX_NAVIGATE;
    d104:	2f ef       	ldi	r18, 0xFF	; 255
    d106:	47 e1       	ldi	r20, 0x17	; 23
    d108:	65 e0       	ldi	r22, 0x05	; 5
    d10a:	84 e0       	ldi	r24, 0x04	; 4
    d10c:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
	    init_scores(&scores);
    d110:	8f eb       	ldi	r24, 0xBF	; 191
    d112:	9b e0       	ldi	r25, 0x0B	; 11
    d114:	0e 94 85 54 	call	0xa90a	; 0xa90a <init_scores>
	    init_handles(&handles);
    d118:	86 ee       	ldi	r24, 0xE6	; 230
    d11a:	9b e0       	ldi	r25, 0x0B	; 11
    d11c:	0e 94 91 54 	call	0xa922	; 0xa922 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d120:	8f eb       	ldi	r24, 0xBF	; 191
    d122:	9b e0       	ldi	r25, 0x0B	; 11
    d124:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <EepromWriteBlock>
    d128:	86 ee       	ldi	r24, 0xE6	; 230
    d12a:	9b e0       	ldi	r25, 0x0B	; 11
    d12c:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <EepromWriteBlock>
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    d130:	0e 94 6c 63 	call	0xc6d8	; 0xc6d8 <load_tank_rank>
	}
	
	if (game.tank_rank_counter > TANK_RANK_LENGTH)
    d134:	80 91 15 0c 	lds	r24, 0x0C15
    d138:	90 91 16 0c 	lds	r25, 0x0C16
    d13c:	85 38       	cpi	r24, 0x85	; 133
    d13e:	93 40       	sbci	r25, 0x03	; 3
    d140:	70 f0       	brcs	.+28     	; 0xd15e <update_tank_rank+0x9a>
	{
		game.tank_rank_counter = 0;
    d142:	10 92 16 0c 	sts	0x0C16, r1
    d146:	10 92 15 0c 	sts	0x0C15, r1
		SFX_NAVIGATE;
    d14a:	2f ef       	ldi	r18, 0xFF	; 255
    d14c:	47 e1       	ldi	r20, 0x17	; 23
    d14e:	65 e0       	ldi	r22, 0x05	; 5
    d150:	84 e0       	ldi	r24, 0x04	; 4
    d152:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		fade_through();
    d156:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
		load_splash();
    d15a:	0e 94 2a 63 	call	0xc654	; 0xc654 <load_splash>
	}
	game.tank_rank_counter++;
    d15e:	80 91 15 0c 	lds	r24, 0x0C15
    d162:	90 91 16 0c 	lds	r25, 0x0C16
    d166:	01 96       	adiw	r24, 0x01	; 1
    d168:	90 93 16 0c 	sts	0x0C16, r25
    d16c:	80 93 15 0c 	sts	0x0C15, r24
#endif
}
    d170:	df 91       	pop	r29
    d172:	cf 91       	pop	r28
    d174:	08 95       	ret

0000d176 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    d176:	af 92       	push	r10
    d178:	bf 92       	push	r11
    d17a:	cf 92       	push	r12
    d17c:	df 92       	push	r13
    d17e:	ef 92       	push	r14
    d180:	ff 92       	push	r15
    d182:	0f 93       	push	r16
    d184:	1f 93       	push	r17
    d186:	cf 93       	push	r28
    d188:	df 93       	push	r29
    d18a:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    d18c:	fb 01       	movw	r30, r22
    d18e:	00 81       	ld	r16, Z
    d190:	11 81       	ldd	r17, Z+1	; 0x01
    d192:	68 01       	movw	r12, r16
    d194:	f0 e1       	ldi	r31, 0x10	; 16
    d196:	cf 22       	and	r12, r31
    d198:	dd 24       	eor	r13, r13
    d19a:	04 ff       	sbrs	r16, 4
    d19c:	09 c0       	rjmp	.+18     	; 0xd1b0 <_handle_select_helper+0x3a>
    d19e:	8d 81       	ldd	r24, Y+5	; 0x05
    d1a0:	81 11       	cpse	r24, r1
    d1a2:	06 c0       	rjmp	.+12     	; 0xd1b0 <_handle_select_helper+0x3a>
	{
		ps->handle_id--;
    d1a4:	88 81       	ld	r24, Y
    d1a6:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    d1a8:	87 ff       	sbrs	r24, 7
    d1aa:	10 c0       	rjmp	.+32     	; 0xd1cc <_handle_select_helper+0x56>
    d1ac:	18 82       	st	Y, r1
    d1ae:	26 c0       	rjmp	.+76     	; 0xd1fc <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    d1b0:	58 01       	movw	r10, r16
    d1b2:	20 e2       	ldi	r18, 0x20	; 32
    d1b4:	a2 22       	and	r10, r18
    d1b6:	bb 24       	eor	r11, r11
    d1b8:	05 ff       	sbrs	r16, 5
    d1ba:	0a c0       	rjmp	.+20     	; 0xd1d0 <_handle_select_helper+0x5a>
    d1bc:	8d 81       	ldd	r24, Y+5	; 0x05
    d1be:	81 11       	cpse	r24, r1
    d1c0:	07 c0       	rjmp	.+14     	; 0xd1d0 <_handle_select_helper+0x5a>
	{
		ps->handle_id++;
    d1c2:	88 81       	ld	r24, Y
    d1c4:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    d1c6:	89 30       	cpi	r24, 0x09	; 9
    d1c8:	0c f0       	brlt	.+2      	; 0xd1cc <_handle_select_helper+0x56>
    d1ca:	88 e0       	ldi	r24, 0x08	; 8
    d1cc:	88 83       	st	Y, r24
    d1ce:	16 c0       	rjmp	.+44     	; 0xd1fc <_handle_select_helper+0x86>
    d1d0:	7a 01       	movw	r14, r20
    d1d2:	cb 01       	movw	r24, r22
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
    d1d4:	0e 94 62 63 	call	0xc6c4	; 0xc6c4 <select_pressed>
    d1d8:	88 23       	and	r24, r24
    d1da:	01 f1       	breq	.+64     	; 0xd21c <_handle_select_helper+0xa6>
    d1dc:	9d 81       	ldd	r25, Y+5	; 0x05
    d1de:	91 11       	cpse	r25, r1
    d1e0:	1d c0       	rjmp	.+58     	; 0xd21c <_handle_select_helper+0xa6>
	{
		ps->select_state = EDITING;
    d1e2:	81 e0       	ldi	r24, 0x01	; 1
    d1e4:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    d1e6:	69 91       	ld	r22, Y+
    d1e8:	83 e0       	ldi	r24, 0x03	; 3
    d1ea:	68 02       	muls	r22, r24
    d1ec:	b0 01       	movw	r22, r0
    d1ee:	11 24       	eor	r1, r1
    d1f0:	68 51       	subi	r22, 0x18	; 24
    d1f2:	74 4f       	sbci	r23, 0xF4	; 244
    d1f4:	43 e0       	ldi	r20, 0x03	; 3
    d1f6:	ce 01       	movw	r24, r28
    d1f8:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
		SFX_NAVIGATE;
    d1fc:	2f ef       	ldi	r18, 0xFF	; 255
    d1fe:	47 e1       	ldi	r20, 0x17	; 23
    d200:	65 e0       	ldi	r22, 0x05	; 5
    d202:	84 e0       	ldi	r24, 0x04	; 4
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
#endif
}
    d204:	df 91       	pop	r29
    d206:	cf 91       	pop	r28
    d208:	1f 91       	pop	r17
    d20a:	0f 91       	pop	r16
    d20c:	ff 90       	pop	r15
    d20e:	ef 90       	pop	r14
    d210:	df 90       	pop	r13
    d212:	cf 90       	pop	r12
    d214:	bf 90       	pop	r11
    d216:	af 90       	pop	r10
	}
	else if (select_pressed(p) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    d218:	0c 94 b0 47 	jmp	0x8f60	; 0x8f60 <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    d21c:	07 ff       	sbrs	r16, 7
    d21e:	09 c0       	rjmp	.+18     	; 0xd232 <_handle_select_helper+0xbc>
    d220:	9d 81       	ldd	r25, Y+5	; 0x05
    d222:	91 30       	cpi	r25, 0x01	; 1
    d224:	31 f4       	brne	.+12     	; 0xd232 <_handle_select_helper+0xbc>
	{
		ps->char_index++;
    d226:	8c 81       	ldd	r24, Y+4	; 0x04
    d228:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    d22a:	83 30       	cpi	r24, 0x03	; 3
    d22c:	5c f0       	brlt	.+22     	; 0xd244 <_handle_select_helper+0xce>
    d22e:	82 e0       	ldi	r24, 0x02	; 2
    d230:	09 c0       	rjmp	.+18     	; 0xd244 <_handle_select_helper+0xce>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    d232:	06 ff       	sbrs	r16, 6
    d234:	0b c0       	rjmp	.+22     	; 0xd24c <_handle_select_helper+0xd6>
    d236:	9d 81       	ldd	r25, Y+5	; 0x05
    d238:	91 30       	cpi	r25, 0x01	; 1
    d23a:	41 f5       	brne	.+80     	; 0xd28c <_handle_select_helper+0x116>
	{
		ps->char_index--;
    d23c:	8c 81       	ldd	r24, Y+4	; 0x04
    d23e:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    d240:	87 fd       	sbrc	r24, 7
    d242:	02 c0       	rjmp	.+4      	; 0xd248 <_handle_select_helper+0xd2>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    d244:	8c 83       	std	Y+4, r24	; 0x04
    d246:	da cf       	rjmp	.-76     	; 0xd1fc <_handle_select_helper+0x86>
		if (ps->char_index < 0) ps->char_index = 0;
    d248:	1c 82       	std	Y+4, r1	; 0x04
    d24a:	d8 cf       	rjmp	.-80     	; 0xd1fc <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    d24c:	cd 28       	or	r12, r13
    d24e:	69 f0       	breq	.+26     	; 0xd26a <_handle_select_helper+0xf4>
    d250:	8d 81       	ldd	r24, Y+5	; 0x05
    d252:	81 30       	cpi	r24, 0x01	; 1
    d254:	09 f0       	breq	.+2      	; 0xd258 <_handle_select_helper+0xe2>
    d256:	44 c0       	rjmp	.+136    	; 0xd2e0 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]--;
    d258:	8c 81       	ldd	r24, Y+4	; 0x04
    d25a:	c8 0f       	add	r28, r24
    d25c:	d1 1d       	adc	r29, r1
    d25e:	99 81       	ldd	r25, Y+1	; 0x01
    d260:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    d262:	91 34       	cpi	r25, 0x41	; 65
    d264:	70 f4       	brcc	.+28     	; 0xd282 <_handle_select_helper+0x10c>
    d266:	81 e4       	ldi	r24, 0x41	; 65
    d268:	0f c0       	rjmp	.+30     	; 0xd288 <_handle_select_helper+0x112>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d26a:	ab 28       	or	r10, r11
    d26c:	89 f0       	breq	.+34     	; 0xd290 <_handle_select_helper+0x11a>
    d26e:	8d 81       	ldd	r24, Y+5	; 0x05
    d270:	81 30       	cpi	r24, 0x01	; 1
    d272:	b1 f5       	brne	.+108    	; 0xd2e0 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
    d274:	8c 81       	ldd	r24, Y+4	; 0x04
    d276:	c8 0f       	add	r28, r24
    d278:	d1 1d       	adc	r29, r1
    d27a:	99 81       	ldd	r25, Y+1	; 0x01
    d27c:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d27e:	9b 35       	cpi	r25, 0x5B	; 91
    d280:	10 f4       	brcc	.+4      	; 0xd286 <_handle_select_helper+0x110>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    d282:	99 83       	std	Y+1, r25	; 0x01
    d284:	bb cf       	rjmp	.-138    	; 0xd1fc <_handle_select_helper+0x86>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    d286:	8a e5       	ldi	r24, 0x5A	; 90
    d288:	89 83       	std	Y+1, r24	; 0x01
    d28a:	b8 cf       	rjmp	.-144    	; 0xd1fc <_handle_select_helper+0x86>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    d28c:	ab 28       	or	r10, r11
    d28e:	41 f5       	brne	.+80     	; 0xd2e0 <_handle_select_helper+0x16a>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if (select_pressed(p) && (ps->select_state == EDITING))
    d290:	88 23       	and	r24, r24
    d292:	31 f1       	breq	.+76     	; 0xd2e0 <_handle_select_helper+0x16a>
    d294:	8d 81       	ldd	r24, Y+5	; 0x05
    d296:	81 30       	cpi	r24, 0x01	; 1
    d298:	19 f5       	brne	.+70     	; 0xd2e0 <_handle_select_helper+0x16a>
	{
		player->handle_id = ps->handle_id;
    d29a:	fe 01       	movw	r30, r28
    d29c:	81 91       	ld	r24, Z+
    d29e:	8f 01       	movw	r16, r30
    d2a0:	f7 01       	movw	r30, r14
    d2a2:	80 87       	std	Z+8, r24	; 0x08
		LBCopyChars(player->handle, ps->handle, 3);
    d2a4:	43 e0       	ldi	r20, 0x03	; 3
    d2a6:	b8 01       	movw	r22, r16
    d2a8:	c7 01       	movw	r24, r14
    d2aa:	09 96       	adiw	r24, 0x09	; 9
    d2ac:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    d2b0:	88 81       	ld	r24, Y
    d2b2:	f3 e0       	ldi	r31, 0x03	; 3
    d2b4:	8f 02       	muls	r24, r31
    d2b6:	c0 01       	movw	r24, r0
    d2b8:	11 24       	eor	r1, r1
    d2ba:	43 e0       	ldi	r20, 0x03	; 3
    d2bc:	b8 01       	movw	r22, r16
    d2be:	88 51       	subi	r24, 0x18	; 24
    d2c0:	94 4f       	sbci	r25, 0xF4	; 244
    d2c2:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
		SFX_NAVIGATE;
    d2c6:	2f ef       	ldi	r18, 0xFF	; 255
    d2c8:	47 e1       	ldi	r20, 0x17	; 23
    d2ca:	65 e0       	ldi	r22, 0x05	; 5
    d2cc:	84 e0       	ldi	r24, 0x04	; 4
    d2ce:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    d2d2:	86 ee       	ldi	r24, 0xE6	; 230
    d2d4:	9b e0       	ldi	r25, 0x0B	; 11
    d2d6:	0e 94 3b 45 	call	0x8a76	; 0x8a76 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    d2da:	82 e0       	ldi	r24, 0x02	; 2
    d2dc:	8d 83       	std	Y+5, r24	; 0x05
    d2de:	20 c0       	rjmp	.+64     	; 0xd320 <_handle_select_helper+0x1aa>
	}
#if JAMMA
#else
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    d2e0:	11 ff       	sbrs	r17, 1
    d2e2:	1e c0       	rjmp	.+60     	; 0xd320 <_handle_select_helper+0x1aa>
    d2e4:	8d 81       	ldd	r24, Y+5	; 0x05
    d2e6:	81 30       	cpi	r24, 0x01	; 1
    d2e8:	11 f4       	brne	.+4      	; 0xd2ee <_handle_select_helper+0x178>
	{
		ps->select_state = SELECTING;
    d2ea:	1d 82       	std	Y+5, r1	; 0x05
    d2ec:	87 cf       	rjmp	.-242    	; 0xd1fc <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    d2ee:	82 30       	cpi	r24, 0x02	; 2
    d2f0:	19 f4       	brne	.+6      	; 0xd2f8 <_handle_select_helper+0x182>
	{
		ps->select_state = EDITING;
    d2f2:	81 e0       	ldi	r24, 0x01	; 1
    d2f4:	8d 83       	std	Y+5, r24	; 0x05
    d2f6:	82 cf       	rjmp	.-252    	; 0xd1fc <_handle_select_helper+0x86>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    d2f8:	2f ef       	ldi	r18, 0xFF	; 255
    d2fa:	47 e1       	ldi	r20, 0x17	; 23
    d2fc:	65 e0       	ldi	r22, 0x05	; 5
    d2fe:	84 e0       	ldi	r24, 0x04	; 4
    d300:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		fade_through();
    d304:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
		load_splash();
	}
#endif
}
    d308:	df 91       	pop	r29
    d30a:	cf 91       	pop	r28
    d30c:	1f 91       	pop	r17
    d30e:	0f 91       	pop	r16
    d310:	ff 90       	pop	r15
    d312:	ef 90       	pop	r14
    d314:	df 90       	pop	r13
    d316:	cf 90       	pop	r12
    d318:	bf 90       	pop	r11
    d31a:	af 90       	pop	r10
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    d31c:	0c 94 2a 63 	jmp	0xc654	; 0xc654 <load_splash>
	}
#endif
}
    d320:	df 91       	pop	r29
    d322:	cf 91       	pop	r28
    d324:	1f 91       	pop	r17
    d326:	0f 91       	pop	r16
    d328:	ff 90       	pop	r15
    d32a:	ef 90       	pop	r14
    d32c:	df 90       	pop	r13
    d32e:	cf 90       	pop	r12
    d330:	bf 90       	pop	r11
    d332:	af 90       	pop	r10
    d334:	08 95       	ret

0000d336 <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    d336:	af 92       	push	r10
    d338:	bf 92       	push	r11
    d33a:	cf 92       	push	r12
    d33c:	df 92       	push	r13
    d33e:	ef 92       	push	r14
    d340:	ff 92       	push	r15
    d342:	0f 93       	push	r16
    d344:	1f 93       	push	r17
    d346:	cf 93       	push	r28
    d348:	df 93       	push	r29
    d34a:	00 d0       	rcall	.+0      	; 0xd34c <_handle_select_render_helper+0x16>
    d34c:	1f 92       	push	r1
    d34e:	cd b7       	in	r28, 0x3d	; 61
    d350:	de b7       	in	r29, 0x3e	; 62
    d352:	7c 01       	movw	r14, r24
    d354:	b4 2e       	mov	r11, r20
    d356:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    d358:	80 e2       	ldi	r24, 0x20	; 32
    d35a:	89 83       	std	Y+1, r24	; 0x01
    d35c:	8a 83       	std	Y+2, r24	; 0x02
    d35e:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    d360:	f7 01       	movw	r30, r14
    d362:	85 81       	ldd	r24, Z+5	; 0x05
    d364:	81 11       	cpse	r24, r1
    d366:	1d c0       	rjmp	.+58     	; 0xd3a2 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_right_arrow, 0);
    d368:	40 e0       	ldi	r20, 0x00	; 0
    d36a:	6c e5       	ldi	r22, 0x5C	; 92
    d36c:	74 e4       	ldi	r23, 0x44	; 68
    d36e:	82 2f       	mov	r24, r18
    d370:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d374:	40 e0       	ldi	r20, 0x00	; 0
    d376:	6e e9       	ldi	r22, 0x9E	; 158
    d378:	74 e4       	ldi	r23, 0x44	; 68
    d37a:	81 e0       	ldi	r24, 0x01	; 1
    d37c:	81 0f       	add	r24, r17
    d37e:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    d382:	f7 01       	movw	r30, r14
    d384:	40 81       	ld	r20, Z
    d386:	44 0f       	add	r20, r20
    d388:	44 0f       	add	r20, r20
    d38a:	44 0f       	add	r20, r20
    d38c:	40 5c       	subi	r20, 0xC0	; 192
    d38e:	01 e0       	ldi	r16, 0x01	; 1
    d390:	21 e0       	ldi	r18, 0x01	; 1
    d392:	6b 2d       	mov	r22, r11
    d394:	66 0f       	add	r22, r22
    d396:	66 0f       	add	r22, r22
    d398:	66 0f       	add	r22, r22
    d39a:	81 2f       	mov	r24, r17
    d39c:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
    d3a0:	6f c0       	rjmp	.+222    	; 0xd480 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    d3a2:	81 30       	cpi	r24, 0x01	; 1
    d3a4:	09 f0       	breq	.+2      	; 0xd3a8 <_handle_select_render_helper+0x72>
    d3a6:	44 c0       	rjmp	.+136    	; 0xd430 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_down_arrow, 0);
    d3a8:	40 e0       	ldi	r20, 0x00	; 0
    d3aa:	69 e5       	ldi	r22, 0x59	; 89
    d3ac:	74 e4       	ldi	r23, 0x44	; 68
    d3ae:	82 2f       	mov	r24, r18
    d3b0:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		MapSprite2(idx+1, map_up_arrow, 0);
    d3b4:	aa 24       	eor	r10, r10
    d3b6:	a3 94       	inc	r10
    d3b8:	a1 0e       	add	r10, r17
    d3ba:	40 e0       	ldi	r20, 0x00	; 0
    d3bc:	66 e5       	ldi	r22, 0x56	; 86
    d3be:	74 e4       	ldi	r23, 0x44	; 68
    d3c0:	8a 2d       	mov	r24, r10
    d3c2:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    d3c6:	cb 2c       	mov	r12, r11
    d3c8:	d1 2c       	mov	r13, r1
    d3ca:	f5 e0       	ldi	r31, 0x05	; 5
    d3cc:	cf 0e       	add	r12, r31
    d3ce:	d1 1c       	adc	r13, r1
    d3d0:	f7 01       	movw	r30, r14
    d3d2:	40 81       	ld	r20, Z
    d3d4:	44 0f       	add	r20, r20
    d3d6:	44 0f       	add	r20, r20
    d3d8:	44 0f       	add	r20, r20
    d3da:	48 5c       	subi	r20, 0xC8	; 200
    d3dc:	84 81       	ldd	r24, Z+4	; 0x04
    d3de:	b6 01       	movw	r22, r12
    d3e0:	68 0f       	add	r22, r24
    d3e2:	71 1d       	adc	r23, r1
    d3e4:	87 fd       	sbrc	r24, 7
    d3e6:	7a 95       	dec	r23
    d3e8:	66 0f       	add	r22, r22
    d3ea:	66 0f       	add	r22, r22
    d3ec:	66 0f       	add	r22, r22
    d3ee:	01 e0       	ldi	r16, 0x01	; 1
    d3f0:	21 e0       	ldi	r18, 0x01	; 1
    d3f2:	81 2f       	mov	r24, r17
    d3f4:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    d3f8:	f7 01       	movw	r30, r14
    d3fa:	40 81       	ld	r20, Z
    d3fc:	44 0f       	add	r20, r20
    d3fe:	44 0f       	add	r20, r20
    d400:	44 0f       	add	r20, r20
    d402:	48 5b       	subi	r20, 0xB8	; 184
    d404:	84 81       	ldd	r24, Z+4	; 0x04
    d406:	c8 0e       	add	r12, r24
    d408:	d1 1c       	adc	r13, r1
    d40a:	87 fd       	sbrc	r24, 7
    d40c:	da 94       	dec	r13
    d40e:	6c 2d       	mov	r22, r12
    d410:	66 0f       	add	r22, r22
    d412:	66 0f       	add	r22, r22
    d414:	66 0f       	add	r22, r22
    d416:	21 e0       	ldi	r18, 0x01	; 1
    d418:	8a 2d       	mov	r24, r10
    d41a:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    d41e:	43 e0       	ldi	r20, 0x03	; 3
    d420:	b7 01       	movw	r22, r14
    d422:	6f 5f       	subi	r22, 0xFF	; 255
    d424:	7f 4f       	sbci	r23, 0xFF	; 255
    d426:	ce 01       	movw	r24, r28
    d428:	01 96       	adiw	r24, 0x01	; 1
    d42a:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
    d42e:	28 c0       	rjmp	.+80     	; 0xd480 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    d430:	82 30       	cpi	r24, 0x02	; 2
    d432:	31 f5       	brne	.+76     	; 0xd480 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    d434:	c4 2e       	mov	r12, r20
    d436:	d1 2c       	mov	r13, r1
    d438:	48 e2       	ldi	r20, 0x28	; 40
    d43a:	65 e0       	ldi	r22, 0x05	; 5
    d43c:	70 e0       	ldi	r23, 0x00	; 0
    d43e:	c6 01       	movw	r24, r12
    d440:	06 96       	adiw	r24, 0x06	; 6
    d442:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    d446:	23 e0       	ldi	r18, 0x03	; 3
    d448:	a7 01       	movw	r20, r14
    d44a:	4f 5f       	subi	r20, 0xFF	; 255
    d44c:	5f 4f       	sbci	r21, 0xFF	; 255
    d44e:	65 e0       	ldi	r22, 0x05	; 5
    d450:	87 e0       	ldi	r24, 0x07	; 7
    d452:	8b 0d       	add	r24, r11
    d454:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    d458:	49 e2       	ldi	r20, 0x29	; 41
    d45a:	65 e0       	ldi	r22, 0x05	; 5
    d45c:	70 e0       	ldi	r23, 0x00	; 0
    d45e:	c6 01       	movw	r24, r12
    d460:	0a 96       	adiw	r24, 0x0a	; 10
    d462:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
		MapSprite2(idx, map_none, 0);
    d466:	40 e0       	ldi	r20, 0x00	; 0
    d468:	6e e9       	ldi	r22, 0x9E	; 158
    d46a:	74 e4       	ldi	r23, 0x44	; 68
    d46c:	81 2f       	mov	r24, r17
    d46e:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    d472:	40 e0       	ldi	r20, 0x00	; 0
    d474:	6e e9       	ldi	r22, 0x9E	; 158
    d476:	74 e4       	ldi	r23, 0x44	; 68
    d478:	81 e0       	ldi	r24, 0x01	; 1
    d47a:	81 0f       	add	r24, r17
    d47c:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    d480:	f7 01       	movw	r30, r14
    d482:	60 81       	ld	r22, Z
    d484:	68 5f       	subi	r22, 0xF8	; 248
    d486:	23 e0       	ldi	r18, 0x03	; 3
    d488:	ae 01       	movw	r20, r28
    d48a:	4f 5f       	subi	r20, 0xFF	; 255
    d48c:	5f 4f       	sbci	r21, 0xFF	; 255
    d48e:	85 e0       	ldi	r24, 0x05	; 5
    d490:	8b 0d       	add	r24, r11
    d492:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
}
    d496:	0f 90       	pop	r0
    d498:	0f 90       	pop	r0
    d49a:	0f 90       	pop	r0
    d49c:	df 91       	pop	r29
    d49e:	cf 91       	pop	r28
    d4a0:	1f 91       	pop	r17
    d4a2:	0f 91       	pop	r16
    d4a4:	ff 90       	pop	r15
    d4a6:	ef 90       	pop	r14
    d4a8:	df 90       	pop	r13
    d4aa:	cf 90       	pop	r12
    d4ac:	bf 90       	pop	r11
    d4ae:	af 90       	pop	r10
    d4b0:	08 95       	ret

0000d4b2 <load_handle_select>:

void load_handle_select()
{
    d4b2:	8f 92       	push	r8
    d4b4:	9f 92       	push	r9
    d4b6:	af 92       	push	r10
    d4b8:	bf 92       	push	r11
    d4ba:	cf 92       	push	r12
    d4bc:	df 92       	push	r13
    d4be:	ef 92       	push	r14
    d4c0:	ff 92       	push	r15
    d4c2:	0f 93       	push	r16
    d4c4:	1f 93       	push	r17
    d4c6:	cf 93       	push	r28
    d4c8:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    d4ca:	82 e0       	ldi	r24, 0x02	; 2
    d4cc:	80 93 06 0c 	sts	0x0C06, r24
	clear_sprites();
    d4d0:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
	DrawMap2(3, 4, map_green_tank);
    d4d4:	4c ed       	ldi	r20, 0xDC	; 220
    d4d6:	5d e7       	ldi	r21, 0x7D	; 125
    d4d8:	64 e0       	ldi	r22, 0x04	; 4
    d4da:	83 e0       	ldi	r24, 0x03	; 3
    d4dc:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	DrawMap2(20, 4, map_blue_tank);
    d4e0:	46 ed       	ldi	r20, 0xD6	; 214
    d4e2:	5d e7       	ldi	r21, 0x7D	; 125
    d4e4:	64 e0       	ldi	r22, 0x04	; 4
    d4e6:	84 e1       	ldi	r24, 0x14	; 20
    d4e8:	0e 94 ec 51 	call	0xa3d8	; 0xa3d8 <DrawMap>
	Print(9, 1, (char*) strHandlesTitle);
    d4ec:	44 e1       	ldi	r20, 0x14	; 20
    d4ee:	53 e0       	ldi	r21, 0x03	; 3
    d4f0:	61 e0       	ldi	r22, 0x01	; 1
    d4f2:	70 e0       	ldi	r23, 0x00	; 0
    d4f4:	89 e0       	ldi	r24, 0x09	; 9
    d4f6:	90 e0       	ldi	r25, 0x00	; 0
    d4f8:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(6, 5, (char*) strPlayer1);
    d4fc:	43 e0       	ldi	r20, 0x03	; 3
    d4fe:	53 e0       	ldi	r21, 0x03	; 3
    d500:	65 e0       	ldi	r22, 0x05	; 5
    d502:	70 e0       	ldi	r23, 0x00	; 0
    d504:	86 e0       	ldi	r24, 0x06	; 6
    d506:	90 e0       	ldi	r25, 0x00	; 0
    d508:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(23, 5, (char*) strPlayer2);
    d50c:	40 e0       	ldi	r20, 0x00	; 0
    d50e:	53 e0       	ldi	r21, 0x03	; 3
    d510:	65 e0       	ldi	r22, 0x05	; 5
    d512:	70 e0       	ldi	r23, 0x00	; 0
    d514:	87 e1       	ldi	r24, 0x17	; 23
    d516:	90 e0       	ldi	r25, 0x00	; 0
    d518:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
    d51c:	88 ee       	ldi	r24, 0xE8	; 232
    d51e:	e8 2e       	mov	r14, r24
    d520:	8b e0       	ldi	r24, 0x0B	; 11
    d522:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    d524:	c0 e0       	ldi	r28, 0x00	; 0
    d526:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    d528:	93 e0       	ldi	r25, 0x03	; 3
    d52a:	a9 2e       	mov	r10, r25
    d52c:	b1 2c       	mov	r11, r1
    d52e:	67 01       	movw	r12, r14
    d530:	ce 01       	movw	r24, r28
    d532:	b5 01       	movw	r22, r10
    d534:	0e 94 d9 6f 	call	0xdfb2	; 0xdfb2 <__divmodhi4>
    d538:	4c 01       	movw	r8, r24
    d53a:	8b 01       	movw	r16, r22
    d53c:	08 5f       	subi	r16, 0xF8	; 248
    d53e:	1f 4f       	sbci	r17, 0xFF	; 255
    d540:	f7 01       	movw	r30, r14
    d542:	41 91       	ld	r20, Z+
    d544:	7f 01       	movw	r14, r30
    d546:	b8 01       	movw	r22, r16
    d548:	03 96       	adiw	r24, 0x03	; 3
    d54a:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    d54e:	f6 01       	movw	r30, r12
    d550:	40 81       	ld	r20, Z
    d552:	b8 01       	movw	r22, r16
    d554:	c4 01       	movw	r24, r8
    d556:	44 96       	adiw	r24, 0x14	; 20
    d558:	0e 94 87 52 	call	0xa50e	; 0xa50e <PrintChar>
	DrawMap2(3, 4, map_green_tank);
	DrawMap2(20, 4, map_blue_tank);
	Print(9, 1, (char*) strHandlesTitle);
	Print(6, 5, (char*) strPlayer1);
	Print(23, 5, (char*) strPlayer2);
	for (int i = 0; i < 27; i += 1)
    d55c:	21 96       	adiw	r28, 0x01	; 1
    d55e:	cb 31       	cpi	r28, 0x1B	; 27
    d560:	d1 05       	cpc	r29, r1
    d562:	29 f7       	brne	.-54     	; 0xd52e <load_handle_select+0x7c>
	}
#if JAMMA
	Print(6, 22, (char*) strSelectHandle);
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
    d564:	4f e3       	ldi	r20, 0x3F	; 63
    d566:	53 e0       	ldi	r21, 0x03	; 3
    d568:	65 e1       	ldi	r22, 0x15	; 21
    d56a:	70 e0       	ldi	r23, 0x00	; 0
    d56c:	85 e0       	ldi	r24, 0x05	; 5
    d56e:	90 e0       	ldi	r25, 0x00	; 0
    d570:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(5, 22, (char*) strConfirmHandle);
    d574:	42 e7       	ldi	r20, 0x72	; 114
    d576:	53 e0       	ldi	r21, 0x03	; 3
    d578:	66 e1       	ldi	r22, 0x16	; 22
    d57a:	70 e0       	ldi	r23, 0x00	; 0
    d57c:	85 e0       	ldi	r24, 0x05	; 5
    d57e:	90 e0       	ldi	r25, 0x00	; 0
    d580:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(5, 23, (char*) strCancelHandle);
    d584:	4e e4       	ldi	r20, 0x4E	; 78
    d586:	53 e0       	ldi	r21, 0x03	; 3
    d588:	67 e1       	ldi	r22, 0x17	; 23
    d58a:	70 e0       	ldi	r23, 0x00	; 0
    d58c:	85 e0       	ldi	r24, 0x05	; 5
    d58e:	90 e0       	ldi	r25, 0x00	; 0
    d590:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>
	Print(5, 24, (char*) strChangeHandle);
    d594:	41 ef       	ldi	r20, 0xF1	; 241
    d596:	52 e0       	ldi	r21, 0x02	; 2
    d598:	68 e1       	ldi	r22, 0x18	; 24
    d59a:	70 e0       	ldi	r23, 0x00	; 0
    d59c:	85 e0       	ldi	r24, 0x05	; 5
    d59e:	90 e0       	ldi	r25, 0x00	; 0
#endif
}
    d5a0:	df 91       	pop	r29
    d5a2:	cf 91       	pop	r28
    d5a4:	1f 91       	pop	r17
    d5a6:	0f 91       	pop	r16
    d5a8:	ff 90       	pop	r15
    d5aa:	ef 90       	pop	r14
    d5ac:	df 90       	pop	r13
    d5ae:	cf 90       	pop	r12
    d5b0:	bf 90       	pop	r11
    d5b2:	af 90       	pop	r10
    d5b4:	9f 90       	pop	r9
    d5b6:	8f 90       	pop	r8
	Print(6, 24, (char*) strChangeHandle);
#else
	Print(5, 21, (char*) strSelectHandle);
	Print(5, 22, (char*) strConfirmHandle);
	Print(5, 23, (char*) strCancelHandle);
	Print(5, 24, (char*) strChangeHandle);
    d5b8:	0c 94 6c 52 	jmp	0xa4d8	; 0xa4d8 <Print>

0000d5bc <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{		// Render
    d5bc:	0f 93       	push	r16
    d5be:	cf 93       	push	r28
    d5c0:	df 93       	push	r29
    d5c2:	ec 01       	movw	r28, r24
		return;
		
	}
	game.demo_counter++;
#else
	switch (game.selection)
    d5c4:	90 91 1b 0c 	lds	r25, 0x0C1B
    d5c8:	91 30       	cpi	r25, 0x01	; 1
    d5ca:	41 f0       	breq	.+16     	; 0xd5dc <update_splash+0x20>
    d5cc:	92 30       	cpi	r25, 0x02	; 2
    d5ce:	51 f0       	breq	.+20     	; 0xd5e4 <update_splash+0x28>
    d5d0:	91 11       	cpse	r25, r1
    d5d2:	0f c0       	rjmp	.+30     	; 0xd5f2 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    d5d4:	01 e0       	ldi	r16, 0x01	; 1
    d5d6:	21 e0       	ldi	r18, 0x01	; 1
    d5d8:	48 e6       	ldi	r20, 0x68	; 104
    d5da:	07 c0       	rjmp	.+14     	; 0xd5ea <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    d5dc:	01 e0       	ldi	r16, 0x01	; 1
    d5de:	21 e0       	ldi	r18, 0x01	; 1
    d5e0:	40 e7       	ldi	r20, 0x70	; 112
    d5e2:	03 c0       	rjmp	.+6      	; 0xd5ea <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    d5e4:	01 e0       	ldi	r16, 0x01	; 1
    d5e6:	21 e0       	ldi	r18, 0x01	; 1
    d5e8:	48 e7       	ldi	r20, 0x78	; 120
    d5ea:	60 e3       	ldi	r22, 0x30	; 48
    d5ec:	80 e0       	ldi	r24, 0x00	; 0
    d5ee:	0e 94 b8 51 	call	0xa370	; 0xa370 <MoveSprite>
			break;
	}
	Print(6, 21, (char*) strSelectHandle);
    d5f2:	4f e3       	ldi	r20, 0x3F	; 63
    d5f4:	53 e0       	ldi	r21, 0x03	; 3
    d5f6:	65 e1       	ldi	r22, 0x15	; 21
    d5f8:	70 e0       	ldi	r23, 0x00	; 0
    d5fa:	86 e0       	ldi	r24, 0x06	; 6
    d5fc:	90 e0       	ldi	r25, 0x00	; 0
    d5fe:	0e 94 6c 52 	call	0xa4d8	; 0xa4d8 <Print>

	// Update
	if (p1->pressed) game.demo_counter = 0;
    d602:	28 81       	ld	r18, Y
    d604:	39 81       	ldd	r19, Y+1	; 0x01
    d606:	21 15       	cp	r18, r1
    d608:	31 05       	cpc	r19, r1
    d60a:	21 f0       	breq	.+8      	; 0xd614 <update_splash+0x58>
    d60c:	10 92 12 0c 	sts	0x0C12, r1
    d610:	10 92 11 0c 	sts	0x0C11, r1
	
	if (p1->pressed & BTN_UP)
    d614:	24 ff       	sbrs	r18, 4
    d616:	0e c0       	rjmp	.+28     	; 0xd634 <update_splash+0x78>
	{
		game.selection--;
    d618:	80 91 1b 0c 	lds	r24, 0x0C1B
    d61c:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    d61e:	87 ff       	sbrs	r24, 7
    d620:	11 c0       	rjmp	.+34     	; 0xd644 <update_splash+0x88>
    d622:	10 92 1b 0c 	sts	0x0C1B, r1
		SFX_NAVIGATE;
    d626:	2f ef       	ldi	r18, 0xFF	; 255
    d628:	47 e1       	ldi	r20, 0x17	; 23
    d62a:	65 e0       	ldi	r22, 0x05	; 5
    d62c:	84 e0       	ldi	r24, 0x04	; 4
    d62e:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
    d632:	91 c0       	rjmp	.+290    	; 0xd756 <update_splash+0x19a>
	}
	else if (p1->pressed & BTN_DOWN)
    d634:	25 ff       	sbrs	r18, 5
    d636:	09 c0       	rjmp	.+18     	; 0xd64a <update_splash+0x8e>
	{
		game.selection++;
    d638:	80 91 1b 0c 	lds	r24, 0x0C1B
    d63c:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    d63e:	83 30       	cpi	r24, 0x03	; 3
    d640:	0c f0       	brlt	.+2      	; 0xd644 <update_splash+0x88>
    d642:	82 e0       	ldi	r24, 0x02	; 2
    d644:	80 93 1b 0c 	sts	0x0C1B, r24
    d648:	ee cf       	rjmp	.-36     	; 0xd626 <update_splash+0x6a>
		SFX_NAVIGATE;
	}
	else if (select_pressed(p1) && ((game.selection == PVCPU) || (game.selection == PVP)))
    d64a:	ce 01       	movw	r24, r28
    d64c:	0e 94 62 63 	call	0xc6c4	; 0xc6c4 <select_pressed>
    d650:	88 23       	and	r24, r24
    d652:	a1 f1       	breq	.+104    	; 0xd6bc <update_splash+0x100>
    d654:	80 91 1b 0c 	lds	r24, 0x0C1B
    d658:	82 30       	cpi	r24, 0x02	; 2
    d65a:	c8 f4       	brcc	.+50     	; 0xd68e <update_splash+0xd2>
	{
		game.demo_counter = 0;
    d65c:	10 92 12 0c 	sts	0x0C12, r1
    d660:	10 92 11 0c 	sts	0x0C11, r1
		p1s.select_state = SELECTING;
    d664:	10 92 31 0b 	sts	0x0B31, r1
		p2s.select_state = SELECTING;
    d668:	10 92 2b 0b 	sts	0x0B2B, r1
		SFX_NAVIGATE;
    d66c:	2f ef       	ldi	r18, 0xFF	; 255
    d66e:	47 e1       	ldi	r20, 0x17	; 23
    d670:	65 e0       	ldi	r22, 0x05	; 5
    d672:	84 e0       	ldi	r24, 0x04	; 4
    d674:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		fade_through();
    d678:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
		load_eeprom(&handles);
    d67c:	86 ee       	ldi	r24, 0xE6	; 230
    d67e:	9b e0       	ldi	r25, 0x0B	; 11
    d680:	0e 94 38 56 	call	0xac70	; 0xac70 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d684:	df 91       	pop	r29
    d686:	cf 91       	pop	r28
    d688:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    d68a:	0c 94 59 6a 	jmp	0xd4b2	; 0xd4b2 <load_handle_select>
		return;
	}
	else if (select_pressed(p1) && (game.selection == TR))
    d68e:	82 30       	cpi	r24, 0x02	; 2
    d690:	a9 f4       	brne	.+42     	; 0xd6bc <update_splash+0x100>
	{
		game.demo_counter = 0;
    d692:	10 92 12 0c 	sts	0x0C12, r1
    d696:	10 92 11 0c 	sts	0x0C11, r1
		SFX_NAVIGATE;
    d69a:	2f ef       	ldi	r18, 0xFF	; 255
    d69c:	47 e1       	ldi	r20, 0x17	; 23
    d69e:	65 e0       	ldi	r22, 0x05	; 5
    d6a0:	84 e0       	ldi	r24, 0x04	; 4
    d6a2:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
		fade_through();
    d6a6:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
		load_eeprom(&scores);
    d6aa:	8f eb       	ldi	r24, 0xBF	; 191
    d6ac:	9b e0       	ldi	r25, 0x0B	; 11
    d6ae:	0e 94 38 56 	call	0xac70	; 0xac70 <load_eeprom>
		return;
		
	}
	game.demo_counter++;
#endif
}
    d6b2:	df 91       	pop	r29
    d6b4:	cf 91       	pop	r28
    d6b6:	0f 91       	pop	r16
	{
		game.demo_counter = 0;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    d6b8:	0c 94 6c 63 	jmp	0xc6d8	; 0xc6d8 <load_tank_rank>
		return;
	}
	else if (game.demo_counter >= DEMO_WAIT)
    d6bc:	80 91 11 0c 	lds	r24, 0x0C11
    d6c0:	90 91 12 0c 	lds	r25, 0x0C12
    d6c4:	88 35       	cpi	r24, 0x58	; 88
    d6c6:	92 40       	sbci	r25, 0x02	; 2
    d6c8:	08 f4       	brcc	.+2      	; 0xd6cc <update_splash+0x110>
    d6ca:	45 c0       	rjmp	.+138    	; 0xd756 <update_splash+0x19a>
	{
		game.demo_counter = 0;
    d6cc:	10 92 12 0c 	sts	0x0C12, r1
    d6d0:	10 92 11 0c 	sts	0x0C11, r1
		if (game.demo_choice % 2 == 0)
    d6d4:	80 91 10 0c 	lds	r24, 0x0C10
    d6d8:	80 fd       	sbrc	r24, 0
    d6da:	29 c0       	rjmp	.+82     	; 0xd72e <update_splash+0x172>
		{
			game.selection = CPUVCPU;
    d6dc:	83 e0       	ldi	r24, 0x03	; 3
    d6de:	80 93 1b 0c 	sts	0x0C1B, r24
			player1.handle_id = 9;
    d6e2:	c9 e0       	ldi	r28, 0x09	; 9
    d6e4:	c0 93 41 0c 	sts	0x0C41, r28
			LBCopyChars(player1.handle, &handles.data[9*3], 3);
    d6e8:	43 e0       	ldi	r20, 0x03	; 3
    d6ea:	63 e0       	ldi	r22, 0x03	; 3
    d6ec:	7c e0       	ldi	r23, 0x0C	; 12
    d6ee:	82 e4       	ldi	r24, 0x42	; 66
    d6f0:	9c e0       	ldi	r25, 0x0C	; 12
    d6f2:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
			player2.handle_id = 9;
    d6f6:	c0 93 aa 0f 	sts	0x0FAA, r28
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d6fa:	43 e0       	ldi	r20, 0x03	; 3
    d6fc:	63 e0       	ldi	r22, 0x03	; 3
    d6fe:	7c e0       	ldi	r23, 0x0C	; 12
    d700:	8b ea       	ldi	r24, 0xAB	; 171
    d702:	9f e0       	ldi	r25, 0x0F	; 15
    d704:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
			SFX_NAVIGATE;
    d708:	2f ef       	ldi	r18, 0xFF	; 255
    d70a:	47 e1       	ldi	r20, 0x17	; 23
    d70c:	65 e0       	ldi	r22, 0x05	; 5
    d70e:	84 e0       	ldi	r24, 0x04	; 4
    d710:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
			clear_sprites();
    d714:	0e 94 54 56 	call	0xaca8	; 0xaca8 <clear_sprites>
			fade_through();
    d718:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
			level_transition(LBRandom(0, 10));
    d71c:	6a e0       	ldi	r22, 0x0A	; 10
    d71e:	70 e0       	ldi	r23, 0x00	; 0
    d720:	80 e0       	ldi	r24, 0x00	; 0
    d722:	90 e0       	ldi	r25, 0x00	; 0
    d724:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    d728:	0e 94 cb 61 	call	0xc396	; 0xc396 <level_transition>
    d72c:	0e c0       	rjmp	.+28     	; 0xd74a <update_splash+0x18e>
		}
		else
		{
			SFX_NAVIGATE;
    d72e:	2f ef       	ldi	r18, 0xFF	; 255
    d730:	47 e1       	ldi	r20, 0x17	; 23
    d732:	65 e0       	ldi	r22, 0x05	; 5
    d734:	84 e0       	ldi	r24, 0x04	; 4
    d736:	0e 94 b0 47 	call	0x8f60	; 0x8f60 <TriggerNote>
			fade_through();
    d73a:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
			load_eeprom(&scores);
    d73e:	8f eb       	ldi	r24, 0xBF	; 191
    d740:	9b e0       	ldi	r25, 0x0B	; 11
    d742:	0e 94 38 56 	call	0xac70	; 0xac70 <load_eeprom>
			load_tank_rank();
    d746:	0e 94 6c 63 	call	0xc6d8	; 0xc6d8 <load_tank_rank>
		}
		game.demo_choice++;
    d74a:	80 91 10 0c 	lds	r24, 0x0C10
    d74e:	8f 5f       	subi	r24, 0xFF	; 255
    d750:	80 93 10 0c 	sts	0x0C10, r24
		return;
    d754:	09 c0       	rjmp	.+18     	; 0xd768 <update_splash+0x1ac>
		
	}
	game.demo_counter++;
    d756:	80 91 11 0c 	lds	r24, 0x0C11
    d75a:	90 91 12 0c 	lds	r25, 0x0C12
    d75e:	01 96       	adiw	r24, 0x01	; 1
    d760:	90 93 12 0c 	sts	0x0C12, r25
    d764:	80 93 11 0c 	sts	0x0C11, r24
#endif
}
    d768:	df 91       	pop	r29
    d76a:	cf 91       	pop	r28
    d76c:	0f 91       	pop	r16
    d76e:	08 95       	ret

0000d770 <update_handle_select>:
	Print(5, 24, (char*) strChangeHandle);
#endif
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    d770:	0f 93       	push	r16
    d772:	1f 93       	push	r17
    d774:	cf 93       	push	r28
    d776:	df 93       	push	r29
    d778:	8c 01       	movw	r16, r24
    d77a:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 6);
    d77c:	26 e0       	ldi	r18, 0x06	; 6
    d77e:	42 e0       	ldi	r20, 0x02	; 2
    d780:	bc 01       	movw	r22, r24
    d782:	8c e2       	ldi	r24, 0x2C	; 44
    d784:	9b e0       	ldi	r25, 0x0B	; 11
    d786:	0e 94 9b 69 	call	0xd336	; 0xd336 <_handle_select_render_helper>
	if (game.selection == PVP)
    d78a:	80 91 1b 0c 	lds	r24, 0x0C1B
    d78e:	81 30       	cpi	r24, 0x01	; 1
    d790:	39 f4       	brne	.+14     	; 0xd7a0 <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 8);
    d792:	28 e0       	ldi	r18, 0x08	; 8
    d794:	43 e1       	ldi	r20, 0x13	; 19
    d796:	be 01       	movw	r22, r28
    d798:	86 e2       	ldi	r24, 0x26	; 38
    d79a:	9b e0       	ldi	r25, 0x0B	; 11
    d79c:	0e 94 9b 69 	call	0xd336	; 0xd336 <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    d7a0:	49 e3       	ldi	r20, 0x39	; 57
    d7a2:	5c e0       	ldi	r21, 0x0C	; 12
    d7a4:	b8 01       	movw	r22, r16
    d7a6:	8c e2       	ldi	r24, 0x2C	; 44
    d7a8:	9b e0       	ldi	r25, 0x0B	; 11
    d7aa:	0e 94 bb 68 	call	0xd176	; 0xd176 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    d7ae:	10 91 31 0b 	lds	r17, 0x0B31
	if (game.selection == PVP)
    d7b2:	80 91 1b 0c 	lds	r24, 0x0C1B
    d7b6:	81 30       	cpi	r24, 0x01	; 1
    d7b8:	19 f0       	breq	.+6      	; 0xd7c0 <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    d7ba:	12 30       	cpi	r17, 0x02	; 2
    d7bc:	69 f0       	breq	.+26     	; 0xd7d8 <update_handle_select+0x68>
    d7be:	21 c0       	rjmp	.+66     	; 0xd802 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    d7c0:	42 ea       	ldi	r20, 0xA2	; 162
    d7c2:	5f e0       	ldi	r21, 0x0F	; 15
    d7c4:	be 01       	movw	r22, r28
    d7c6:	86 e2       	ldi	r24, 0x26	; 38
    d7c8:	9b e0       	ldi	r25, 0x0B	; 11
    d7ca:	0e 94 bb 68 	call	0xd176	; 0xd176 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    d7ce:	80 91 2b 0b 	lds	r24, 0x0B2B
    d7d2:	82 30       	cpi	r24, 0x02	; 2
    d7d4:	b1 f4       	brne	.+44     	; 0xd802 <update_handle_select+0x92>
    d7d6:	f1 cf       	rjmp	.-30     	; 0xd7ba <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    d7d8:	80 91 1b 0c 	lds	r24, 0x0C1B
    d7dc:	81 11       	cpse	r24, r1
    d7de:	0a c0       	rjmp	.+20     	; 0xd7f4 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    d7e0:	89 e0       	ldi	r24, 0x09	; 9
    d7e2:	80 93 aa 0f 	sts	0x0FAA, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    d7e6:	43 e0       	ldi	r20, 0x03	; 3
    d7e8:	63 e0       	ldi	r22, 0x03	; 3
    d7ea:	7c e0       	ldi	r23, 0x0C	; 12
    d7ec:	8b ea       	ldi	r24, 0xAB	; 171
    d7ee:	9f e0       	ldi	r25, 0x0F	; 15
    d7f0:	0e 94 8a 53 	call	0xa714	; 0xa714 <LBCopyChars>
		}
		level_transition(10);
    d7f4:	8a e0       	ldi	r24, 0x0A	; 10
	}
}
    d7f6:	df 91       	pop	r29
    d7f8:	cf 91       	pop	r28
    d7fa:	1f 91       	pop	r17
    d7fc:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(10);
    d7fe:	0c 94 cb 61 	jmp	0xc396	; 0xc396 <level_transition>
	}
}
    d802:	df 91       	pop	r29
    d804:	cf 91       	pop	r28
    d806:	1f 91       	pop	r17
    d808:	0f 91       	pop	r16
    d80a:	08 95       	ret

0000d80c <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d80c:	00 97       	sbiw	r24, 0x00	; 0
    d80e:	41 f0       	breq	.+16     	; 0xd820 <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    d810:	81 30       	cpi	r24, 0x01	; 1
    d812:	91 05       	cpc	r25, r1
    d814:	41 f0       	breq	.+16     	; 0xd826 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    d816:	82 30       	cpi	r24, 0x02	; 2
    d818:	91 05       	cpc	r25, r1
    d81a:	41 f0       	breq	.+16     	; 0xd82c <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    d81c:	03 97       	sbiw	r24, 0x03	; 3
    d81e:	49 f0       	breq	.+18     	; 0xd832 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    d820:	80 e1       	ldi	r24, 0x10	; 16
    d822:	90 e0       	ldi	r25, 0x00	; 0
    d824:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    d826:	80 e2       	ldi	r24, 0x20	; 32
    d828:	90 e0       	ldi	r25, 0x00	; 0
    d82a:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    d82c:	80 e4       	ldi	r24, 0x40	; 64
    d82e:	90 e0       	ldi	r25, 0x00	; 0
    d830:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    d832:	80 e8       	ldi	r24, 0x80	; 128
    d834:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    d836:	08 95       	ret

0000d838 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    d838:	8f 92       	push	r8
    d83a:	9f 92       	push	r9
    d83c:	af 92       	push	r10
    d83e:	bf 92       	push	r11
    d840:	cf 92       	push	r12
    d842:	df 92       	push	r13
    d844:	ef 92       	push	r14
    d846:	ff 92       	push	r15
    d848:	0f 93       	push	r16
    d84a:	1f 93       	push	r17
    d84c:	cf 93       	push	r28
    d84e:	df 93       	push	r29
    d850:	f8 2e       	mov	r15, r24
    d852:	e6 2e       	mov	r14, r22
    d854:	d4 2e       	mov	r13, r20
    d856:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    d858:	88 8d       	ldd	r24, Y+24	; 0x18
    d85a:	88 23       	and	r24, r24
    d85c:	09 f4       	brne	.+2      	; 0xd860 <crash_and_turn+0x28>
    d85e:	a8 c0       	rjmp	.+336    	; 0xd9b0 <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    d860:	f8 01       	movw	r30, r16
    d862:	c4 80       	ldd	r12, Z+4	; 0x04
    d864:	c4 fe       	sbrs	r12, 4
    d866:	23 c0       	rjmp	.+70     	; 0xd8ae <crash_and_turn+0x76>
    d868:	fe e1       	ldi	r31, 0x1E	; 30
    d86a:	6f 02       	muls	r22, r31
    d86c:	40 01       	movw	r8, r0
    d86e:	11 24       	eor	r1, r1
    d870:	af 2c       	mov	r10, r15
    d872:	bb 24       	eor	r11, r11
    d874:	a7 fc       	sbrc	r10, 7
    d876:	b0 94       	com	r11
    d878:	c4 01       	movw	r24, r8
    d87a:	8a 0d       	add	r24, r10
    d87c:	9b 1d       	adc	r25, r11
    d87e:	01 97       	sbiw	r24, 0x01	; 1
    d880:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d884:	81 11       	cpse	r24, r1
    d886:	13 c0       	rjmp	.+38     	; 0xd8ae <crash_and_turn+0x76>
    d888:	c4 01       	movw	r24, r8
    d88a:	8a 0d       	add	r24, r10
    d88c:	9b 1d       	adc	r25, r11
    d88e:	4d 96       	adiw	r24, 0x1d	; 29
    d890:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d894:	81 11       	cpse	r24, r1
    d896:	0b c0       	rjmp	.+22     	; 0xd8ae <crash_and_turn+0x76>
    d898:	c4 01       	movw	r24, r8
    d89a:	8a 0d       	add	r24, r10
    d89c:	9b 1d       	adc	r25, r11
    d89e:	cb 96       	adiw	r24, 0x3b	; 59
    d8a0:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d8a4:	81 11       	cpse	r24, r1
    d8a6:	03 c0       	rjmp	.+6      	; 0xd8ae <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    d8a8:	80 e4       	ldi	r24, 0x40	; 64
    d8aa:	90 e0       	ldi	r25, 0x00	; 0
    d8ac:	6f c0       	rjmp	.+222    	; 0xd98c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    d8ae:	c6 fe       	sbrs	r12, 6
    d8b0:	23 c0       	rjmp	.+70     	; 0xd8f8 <crash_and_turn+0xc0>
    d8b2:	8e 2d       	mov	r24, r14
    d8b4:	99 27       	eor	r25, r25
    d8b6:	87 fd       	sbrc	r24, 7
    d8b8:	90 95       	com	r25
    d8ba:	02 96       	adiw	r24, 0x02	; 2
    d8bc:	2e e1       	ldi	r18, 0x1E	; 30
    d8be:	28 9f       	mul	r18, r24
    d8c0:	50 01       	movw	r10, r0
    d8c2:	29 9f       	mul	r18, r25
    d8c4:	b0 0c       	add	r11, r0
    d8c6:	11 24       	eor	r1, r1
    d8c8:	af 0c       	add	r10, r15
    d8ca:	b1 1c       	adc	r11, r1
    d8cc:	f7 fc       	sbrc	r15, 7
    d8ce:	ba 94       	dec	r11
    d8d0:	c5 01       	movw	r24, r10
    d8d2:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d8d6:	81 11       	cpse	r24, r1
    d8d8:	0f c0       	rjmp	.+30     	; 0xd8f8 <crash_and_turn+0xc0>
    d8da:	c5 01       	movw	r24, r10
    d8dc:	01 96       	adiw	r24, 0x01	; 1
    d8de:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d8e2:	81 11       	cpse	r24, r1
    d8e4:	09 c0       	rjmp	.+18     	; 0xd8f8 <crash_and_turn+0xc0>
    d8e6:	c5 01       	movw	r24, r10
    d8e8:	02 96       	adiw	r24, 0x02	; 2
    d8ea:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d8ee:	81 11       	cpse	r24, r1
    d8f0:	03 c0       	rjmp	.+6      	; 0xd8f8 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    d8f2:	80 e2       	ldi	r24, 0x20	; 32
    d8f4:	90 e0       	ldi	r25, 0x00	; 0
    d8f6:	4a c0       	rjmp	.+148    	; 0xd98c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    d8f8:	c5 fe       	sbrs	r12, 5
    d8fa:	24 c0       	rjmp	.+72     	; 0xd944 <crash_and_turn+0x10c>
    d8fc:	fe 2d       	mov	r31, r14
    d8fe:	8e e1       	ldi	r24, 0x1E	; 30
    d900:	f8 02       	muls	r31, r24
    d902:	40 01       	movw	r8, r0
    d904:	11 24       	eor	r1, r1
    d906:	af 2c       	mov	r10, r15
    d908:	bb 24       	eor	r11, r11
    d90a:	a7 fc       	sbrc	r10, 7
    d90c:	b0 94       	com	r11
    d90e:	c4 01       	movw	r24, r8
    d910:	8a 0d       	add	r24, r10
    d912:	9b 1d       	adc	r25, r11
    d914:	02 96       	adiw	r24, 0x02	; 2
    d916:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d91a:	81 11       	cpse	r24, r1
    d91c:	13 c0       	rjmp	.+38     	; 0xd944 <crash_and_turn+0x10c>
    d91e:	c4 01       	movw	r24, r8
    d920:	8a 0d       	add	r24, r10
    d922:	9b 1d       	adc	r25, r11
    d924:	80 96       	adiw	r24, 0x20	; 32
    d926:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d92a:	81 11       	cpse	r24, r1
    d92c:	0b c0       	rjmp	.+22     	; 0xd944 <crash_and_turn+0x10c>
    d92e:	c4 01       	movw	r24, r8
    d930:	8a 0d       	add	r24, r10
    d932:	9b 1d       	adc	r25, r11
    d934:	ce 96       	adiw	r24, 0x3e	; 62
    d936:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d93a:	81 11       	cpse	r24, r1
    d93c:	03 c0       	rjmp	.+6      	; 0xd944 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    d93e:	80 e8       	ldi	r24, 0x80	; 128
    d940:	90 e0       	ldi	r25, 0x00	; 0
    d942:	24 c0       	rjmp	.+72     	; 0xd98c <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    d944:	c7 fe       	sbrs	r12, 7
    d946:	29 c0       	rjmp	.+82     	; 0xd99a <crash_and_turn+0x162>
    d948:	8e 2d       	mov	r24, r14
    d94a:	99 27       	eor	r25, r25
    d94c:	87 fd       	sbrc	r24, 7
    d94e:	90 95       	com	r25
    d950:	01 97       	sbiw	r24, 0x01	; 1
    d952:	2e e1       	ldi	r18, 0x1E	; 30
    d954:	28 9f       	mul	r18, r24
    d956:	50 01       	movw	r10, r0
    d958:	29 9f       	mul	r18, r25
    d95a:	b0 0c       	add	r11, r0
    d95c:	11 24       	eor	r1, r1
    d95e:	af 0c       	add	r10, r15
    d960:	b1 1c       	adc	r11, r1
    d962:	f7 fc       	sbrc	r15, 7
    d964:	ba 94       	dec	r11
    d966:	c5 01       	movw	r24, r10
    d968:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d96c:	81 11       	cpse	r24, r1
    d96e:	15 c0       	rjmp	.+42     	; 0xd99a <crash_and_turn+0x162>
    d970:	c5 01       	movw	r24, r10
    d972:	01 96       	adiw	r24, 0x01	; 1
    d974:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d978:	81 11       	cpse	r24, r1
    d97a:	0f c0       	rjmp	.+30     	; 0xd99a <crash_and_turn+0x162>
    d97c:	c5 01       	movw	r24, r10
    d97e:	02 96       	adiw	r24, 0x02	; 2
    d980:	0e 94 c1 59 	call	0xb382	; 0xb382 <solid_tile>
    d984:	81 11       	cpse	r24, r1
    d986:	09 c0       	rjmp	.+18     	; 0xd99a <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    d988:	80 e1       	ldi	r24, 0x10	; 16
    d98a:	90 e0       	ldi	r25, 0x00	; 0
    d98c:	f8 01       	movw	r30, r16
    d98e:	95 83       	std	Z+5, r25	; 0x05
    d990:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    d992:	ce 01       	movw	r24, r28
    d994:	0e 94 3b 59 	call	0xb276	; 0xb276 <recoil_sprite>
			recoiled = 0;
    d998:	d1 2c       	mov	r13, r1
		}
		if (player->goal_direction & p->held)
    d99a:	f8 01       	movw	r30, r16
    d99c:	24 81       	ldd	r18, Z+4	; 0x04
    d99e:	35 81       	ldd	r19, Z+5	; 0x05
    d9a0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d9a2:	98 a1       	ldd	r25, Y+32	; 0x20
    d9a4:	82 23       	and	r24, r18
    d9a6:	93 23       	and	r25, r19
    d9a8:	89 2b       	or	r24, r25
    d9aa:	11 f0       	breq	.+4      	; 0xd9b0 <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    d9ac:	18 8e       	std	Y+24, r1	; 0x18
    d9ae:	1c c0       	rjmp	.+56     	; 0xd9e8 <crash_and_turn+0x1b0>
			recoiled = 0;
		}
	}
	if (recoiled)
    d9b0:	dd 20       	and	r13, r13
    d9b2:	d1 f0       	breq	.+52     	; 0xd9e8 <crash_and_turn+0x1b0>
	{
		if (p->held & BTN_LEFT)
    d9b4:	f8 01       	movw	r30, r16
    d9b6:	84 81       	ldd	r24, Z+4	; 0x04
    d9b8:	86 ff       	sbrs	r24, 6
    d9ba:	03 c0       	rjmp	.+6      	; 0xd9c2 <crash_and_turn+0x18a>
		{
			p->held = BTN_UP;
    d9bc:	80 e1       	ldi	r24, 0x10	; 16
    d9be:	90 e0       	ldi	r25, 0x00	; 0
    d9c0:	0f c0       	rjmp	.+30     	; 0xd9e0 <crash_and_turn+0x1a8>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_UP)
    d9c2:	84 ff       	sbrs	r24, 4
    d9c4:	03 c0       	rjmp	.+6      	; 0xd9cc <crash_and_turn+0x194>
		{
			p->held = BTN_RIGHT;
    d9c6:	80 e8       	ldi	r24, 0x80	; 128
    d9c8:	90 e0       	ldi	r25, 0x00	; 0
    d9ca:	09 c0       	rjmp	.+18     	; 0xd9de <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_RIGHT)
    d9cc:	87 ff       	sbrs	r24, 7
    d9ce:	03 c0       	rjmp	.+6      	; 0xd9d6 <crash_and_turn+0x19e>
		{
			p->held = BTN_DOWN;
    d9d0:	80 e2       	ldi	r24, 0x20	; 32
    d9d2:	90 e0       	ldi	r25, 0x00	; 0
    d9d4:	04 c0       	rjmp	.+8      	; 0xd9de <crash_and_turn+0x1a6>
			player->feeling_my_way = 1;
		}
		else if (p->held & BTN_DOWN)
    d9d6:	85 ff       	sbrs	r24, 5
    d9d8:	07 c0       	rjmp	.+14     	; 0xd9e8 <crash_and_turn+0x1b0>
		{
			p->held = BTN_LEFT;
    d9da:	80 e4       	ldi	r24, 0x40	; 64
    d9dc:	90 e0       	ldi	r25, 0x00	; 0
    d9de:	f8 01       	movw	r30, r16
    d9e0:	95 83       	std	Z+5, r25	; 0x05
    d9e2:	84 83       	std	Z+4, r24	; 0x04
			player->feeling_my_way = 1;
    d9e4:	81 e0       	ldi	r24, 0x01	; 1
    d9e6:	88 8f       	std	Y+24, r24	; 0x18
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    d9e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    d9ea:	98 a1       	ldd	r25, Y+32	; 0x20
    d9ec:	80 31       	cpi	r24, 0x10	; 16
    d9ee:	91 05       	cpc	r25, r1
    d9f0:	19 f0       	breq	.+6      	; 0xd9f8 <crash_and_turn+0x1c0>
    d9f2:	80 32       	cpi	r24, 0x20	; 32
    d9f4:	91 05       	cpc	r25, r1
    d9f6:	19 f4       	brne	.+6      	; 0xd9fe <crash_and_turn+0x1c6>
    d9f8:	2b 8d       	ldd	r18, Y+27	; 0x1b
    d9fa:	e2 16       	cp	r14, r18
    d9fc:	59 f0       	breq	.+22     	; 0xda14 <crash_and_turn+0x1dc>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    d9fe:	80 34       	cpi	r24, 0x40	; 64
    da00:	91 05       	cpc	r25, r1
    da02:	19 f0       	breq	.+6      	; 0xda0a <crash_and_turn+0x1d2>
    da04:	80 38       	cpi	r24, 0x80	; 128
    da06:	91 05       	cpc	r25, r1
    da08:	39 f4       	brne	.+14     	; 0xda18 <crash_and_turn+0x1e0>
    da0a:	81 e0       	ldi	r24, 0x01	; 1
    da0c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    da0e:	f9 12       	cpse	r15, r25
    da10:	03 c0       	rjmp	.+6      	; 0xda18 <crash_and_turn+0x1e0>
    da12:	03 c0       	rjmp	.+6      	; 0xda1a <crash_and_turn+0x1e2>
			p->held = BTN_LEFT;
			player->feeling_my_way = 1;
		}
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    da14:	81 e0       	ldi	r24, 0x01	; 1
    da16:	01 c0       	rjmp	.+2      	; 0xda1a <crash_and_turn+0x1e2>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    da18:	80 e0       	ldi	r24, 0x00	; 0
}
    da1a:	df 91       	pop	r29
    da1c:	cf 91       	pop	r28
    da1e:	1f 91       	pop	r17
    da20:	0f 91       	pop	r16
    da22:	ff 90       	pop	r15
    da24:	ef 90       	pop	r14
    da26:	df 90       	pop	r13
    da28:	cf 90       	pop	r12
    da2a:	bf 90       	pop	r11
    da2c:	af 90       	pop	r10
    da2e:	9f 90       	pop	r9
    da30:	8f 90       	pop	r8
    da32:	08 95       	ret

0000da34 <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(Player* player, char distance_x, char distance_y)
{
    da34:	fc 01       	movw	r30, r24
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    da36:	26 2f       	mov	r18, r22
    da38:	33 27       	eor	r19, r19
    da3a:	27 fd       	sbrc	r18, 7
    da3c:	30 95       	com	r19
    da3e:	37 ff       	sbrs	r19, 7
    da40:	03 c0       	rjmp	.+6      	; 0xda48 <get_cpu_goal_direction+0x14>
    da42:	31 95       	neg	r19
    da44:	21 95       	neg	r18
    da46:	31 09       	sbc	r19, r1
    da48:	92 2f       	mov	r25, r18
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    da4a:	24 2f       	mov	r18, r20
    da4c:	33 27       	eor	r19, r19
    da4e:	27 fd       	sbrc	r18, 7
    da50:	30 95       	com	r19
    da52:	37 ff       	sbrs	r19, 7
    da54:	03 c0       	rjmp	.+6      	; 0xda5c <get_cpu_goal_direction+0x28>
    da56:	31 95       	neg	r19
    da58:	21 95       	neg	r18
    da5a:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
    da5c:	81 8d       	ldd	r24, Z+25	; 0x19
    da5e:	81 11       	cpse	r24, r1
    da60:	08 c0       	rjmp	.+16     	; 0xda72 <get_cpu_goal_direction+0x3e>
	{
		if (abs_distance_x > abs_distance_y)
    da62:	29 17       	cp	r18, r25
    da64:	1c f4       	brge	.+6      	; 0xda6c <get_cpu_goal_direction+0x38>
		{
			direction = BTN_LEFT;
			if (distance_x > 0) direction = BTN_RIGHT;
    da66:	16 16       	cp	r1, r22
    da68:	94 f0       	brlt	.+36     	; 0xda8e <get_cpu_goal_direction+0x5a>
    da6a:	0b c0       	rjmp	.+22     	; 0xda82 <get_cpu_goal_direction+0x4e>
		}
		else
		{
			direction = BTN_UP;
			if (distance_y > 0) direction = BTN_DOWN;
    da6c:	14 16       	cp	r1, r20
    da6e:	94 f0       	brlt	.+36     	; 0xda94 <get_cpu_goal_direction+0x60>
    da70:	0b c0       	rjmp	.+22     	; 0xda88 <get_cpu_goal_direction+0x54>
		}
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
    da72:	29 17       	cp	r18, r25
    da74:	1c f4       	brge	.+6      	; 0xda7c <get_cpu_goal_direction+0x48>
		{
			direction = BTN_RIGHT;
			if (distance_x > 0) direction = BTN_LEFT;
    da76:	16 16       	cp	r1, r22
    da78:	24 f0       	brlt	.+8      	; 0xda82 <get_cpu_goal_direction+0x4e>
    da7a:	09 c0       	rjmp	.+18     	; 0xda8e <get_cpu_goal_direction+0x5a>
		}
		else
		{
			direction = BTN_DOWN;
			if (distance_y > 0) direction = BTN_UP;
    da7c:	14 16       	cp	r1, r20
    da7e:	24 f0       	brlt	.+8      	; 0xda88 <get_cpu_goal_direction+0x54>
    da80:	09 c0       	rjmp	.+18     	; 0xda94 <get_cpu_goal_direction+0x60>
	
	if (player->tank_tactic == TACTIC_TANK_ATTACK)
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_LEFT;
    da82:	80 e4       	ldi	r24, 0x40	; 64
    da84:	90 e0       	ldi	r25, 0x00	; 0
    da86:	08 95       	ret
			if (distance_x > 0) direction = BTN_RIGHT;
		}
		else
		{
			direction = BTN_UP;
    da88:	80 e1       	ldi	r24, 0x10	; 16
    da8a:	90 e0       	ldi	r25, 0x00	; 0
    da8c:	08 95       	ret
	}
	else
	{
		if (abs_distance_x > abs_distance_y)
		{
			direction = BTN_RIGHT;
    da8e:	80 e8       	ldi	r24, 0x80	; 128
    da90:	90 e0       	ldi	r25, 0x00	; 0
    da92:	08 95       	ret
			if (distance_x > 0) direction = BTN_LEFT;
		}
		else
		{
			direction = BTN_DOWN;
    da94:	80 e2       	ldi	r24, 0x20	; 32
    da96:	90 e0       	ldi	r25, 0x00	; 0
			if (distance_y > 0) direction = BTN_UP;
		}
	}
	
	return direction;
}
    da98:	08 95       	ret

0000da9a <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    da9a:	6f 92       	push	r6
    da9c:	7f 92       	push	r7
    da9e:	8f 92       	push	r8
    daa0:	9f 92       	push	r9
    daa2:	af 92       	push	r10
    daa4:	bf 92       	push	r11
    daa6:	cf 92       	push	r12
    daa8:	df 92       	push	r13
    daaa:	ef 92       	push	r14
    daac:	ff 92       	push	r15
    daae:	0f 93       	push	r16
    dab0:	1f 93       	push	r17
    dab2:	cf 93       	push	r28
    dab4:	df 93       	push	r29
    dab6:	ec 01       	movw	r28, r24
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / FP_8;
    dab8:	fb 01       	movw	r30, r22
    daba:	a4 80       	ldd	r10, Z+4	; 0x04
    dabc:	b5 80       	ldd	r11, Z+5	; 0x05
	goal_y = other_player->shared.y / FP_8 - 3;
    dabe:	06 81       	ldd	r16, Z+6	; 0x06
    dac0:	17 81       	ldd	r17, Z+7	; 0x07
	player_x = player->shared.x / FP_8;
    dac2:	8c 80       	ldd	r8, Y+4	; 0x04
    dac4:	9d 80       	ldd	r9, Y+5	; 0x05
	player_y =  player->shared.y / FP_8 - 3;
    dac6:	6e 80       	ldd	r6, Y+6	; 0x06
    dac8:	7f 80       	ldd	r7, Y+7	; 0x07
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    daca:	8d 89       	ldd	r24, Y+21	; 0x15
    dacc:	81 11       	cpse	r24, r1
    dace:	04 c0       	rjmp	.+8      	; 0xdad8 <get_cpu_joypad_state+0x3e>
	{
		p->held = 0;
    dad0:	fa 01       	movw	r30, r20
    dad2:	15 82       	std	Z+5, r1	; 0x05
    dad4:	14 82       	std	Z+4, r1	; 0x04
		return;
    dad6:	53 c1       	rjmp	.+678    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dad8:	6a 01       	movw	r12, r20
    dada:	7b 01       	movw	r14, r22
	}
	
	// Shot
	if (shoot_pressed(p))
    dadc:	ca 01       	movw	r24, r20
    dade:	0e 94 a7 57 	call	0xaf4e	; 0xaf4e <shoot_pressed>
    dae2:	88 23       	and	r24, r24
    dae4:	19 f0       	breq	.+6      	; 0xdaec <get_cpu_joypad_state+0x52>
	{
		p->pressed = 0;
    dae6:	f6 01       	movw	r30, r12
    dae8:	11 82       	std	Z+1, r1	; 0x01
    daea:	10 82       	st	Z, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    daec:	20 91 01 01 	lds	r18, 0x0101
    daf0:	30 91 02 01 	lds	r19, 0x0102
    daf4:	c9 01       	movw	r24, r18
    daf6:	6a e0       	ldi	r22, 0x0A	; 10
    daf8:	70 e0       	ldi	r23, 0x00	; 0
    dafa:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
    dafe:	89 2b       	or	r24, r25
    db00:	41 f4       	brne	.+16     	; 0xdb12 <get_cpu_joypad_state+0x78>
    db02:	8d 89       	ldd	r24, Y+21	; 0x15
    db04:	83 33       	cpi	r24, 0x33	; 51
    db06:	28 f0       	brcs	.+10     	; 0xdb12 <get_cpu_joypad_state+0x78>
	{
		p->pressed = BTN_B;
    db08:	81 e0       	ldi	r24, 0x01	; 1
    db0a:	90 e0       	ldi	r25, 0x00	; 0
    db0c:	f6 01       	movw	r30, r12
    db0e:	91 83       	std	Z+1, r25	; 0x01
    db10:	80 83       	st	Z, r24
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    db12:	c9 01       	movw	r24, r18
    db14:	64 eb       	ldi	r22, 0xB4	; 180
    db16:	70 e0       	ldi	r23, 0x00	; 0
    db18:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
    db1c:	89 2b       	or	r24, r25
    db1e:	39 f0       	breq	.+14     	; 0xdb2e <get_cpu_joypad_state+0x94>
    db20:	8d 89       	ldd	r24, Y+21	; 0x15
    db22:	8a 30       	cpi	r24, 0x0A	; 10
    db24:	21 f0       	breq	.+8      	; 0xdb2e <get_cpu_joypad_state+0x94>
    db26:	8c 8d       	ldd	r24, Y+28	; 0x1c
    db28:	88 23       	and	r24, r24
    db2a:	09 f4       	brne	.+2      	; 0xdb2e <get_cpu_joypad_state+0x94>
    db2c:	48 c0       	rjmp	.+144    	; 0xdbbe <get_cpu_joypad_state+0x124>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / FP_8;
    db2e:	46 e0       	ldi	r20, 0x06	; 6
    db30:	b6 94       	lsr	r11
    db32:	a7 94       	ror	r10
    db34:	4a 95       	dec	r20
    db36:	e1 f7       	brne	.-8      	; 0xdb30 <get_cpu_joypad_state+0x96>
	goal_y = other_player->shared.y / FP_8 - 3;
    db38:	56 e0       	ldi	r21, 0x06	; 6
    db3a:	16 95       	lsr	r17
    db3c:	07 95       	ror	r16
    db3e:	5a 95       	dec	r21
    db40:	e1 f7       	brne	.-8      	; 0xdb3a <get_cpu_joypad_state+0xa0>
	player_x = player->shared.x / FP_8;
    db42:	66 e0       	ldi	r22, 0x06	; 6
    db44:	96 94       	lsr	r9
    db46:	87 94       	ror	r8
    db48:	6a 95       	dec	r22
    db4a:	e1 f7       	brne	.-8      	; 0xdb44 <get_cpu_joypad_state+0xaa>
	player_y =  player->shared.y / FP_8 - 3;
	distance_x = goal_x - player_x;
    db4c:	6a 2d       	mov	r22, r10
    db4e:	68 19       	sub	r22, r8
	char player_y;
	
	goal_x = other_player->shared.x / FP_8;
	goal_y = other_player->shared.y / FP_8 - 3;
	player_x = player->shared.x / FP_8;
	player_y =  player->shared.y / FP_8 - 3;
    db50:	76 e0       	ldi	r23, 0x06	; 6
    db52:	76 94       	lsr	r7
    db54:	67 94       	ror	r6
    db56:	7a 95       	dec	r23
    db58:	e1 f7       	brne	.-8      	; 0xdb52 <get_cpu_joypad_state+0xb8>
    db5a:	1d ef       	ldi	r17, 0xFD	; 253
    db5c:	10 0f       	add	r17, r16
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    db5e:	40 2f       	mov	r20, r16
    db60:	46 19       	sub	r20, r6
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    db62:	1c 8e       	std	Y+28, r1	; 0x1c
		player->feeling_my_way = 0;
    db64:	18 8e       	std	Y+24, r1	; 0x18
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    db66:	82 e0       	ldi	r24, 0x02	; 2
    db68:	86 0f       	add	r24, r22
    db6a:	85 30       	cpi	r24, 0x05	; 5
    db6c:	b0 f4       	brcc	.+44     	; 0xdb9a <get_cpu_joypad_state+0x100>
    db6e:	4e 3f       	cpi	r20, 0xFE	; 254
    db70:	a4 f0       	brlt	.+40     	; 0xdb9a <get_cpu_joypad_state+0x100>
    db72:	43 30       	cpi	r20, 0x03	; 3
    db74:	94 f4       	brge	.+36     	; 0xdb9a <get_cpu_joypad_state+0x100>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    db76:	64 e0       	ldi	r22, 0x04	; 4
    db78:	70 e0       	ldi	r23, 0x00	; 0
    db7a:	80 e0       	ldi	r24, 0x00	; 0
    db7c:	90 e0       	ldi	r25, 0x00	; 0
    db7e:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    db82:	0e 94 06 6c 	call	0xd80c	; 0xd80c <button_map>
    db86:	98 a3       	std	Y+32, r25	; 0x20
    db88:	8f 8f       	std	Y+31, r24	; 0x1f
			player->goal = LBRandom(5, 18);
    db8a:	62 e1       	ldi	r22, 0x12	; 18
    db8c:	70 e0       	ldi	r23, 0x00	; 0
    db8e:	85 e0       	ldi	r24, 0x05	; 5
    db90:	90 e0       	ldi	r25, 0x00	; 0
    db92:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    db96:	8b 8f       	std	Y+27, r24	; 0x1b
    db98:	0d c0       	rjmp	.+26     	; 0xdbb4 <get_cpu_joypad_state+0x11a>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
    db9a:	ce 01       	movw	r24, r28
    db9c:	0e 94 1a 6d 	call	0xda34	; 0xda34 <get_cpu_goal_direction>
    dba0:	98 a3       	std	Y+32, r25	; 0x20
    dba2:	8f 8f       	std	Y+31, r24	; 0x1f
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dba4:	80 31       	cpi	r24, 0x10	; 16
    dba6:	91 05       	cpc	r25, r1
    dba8:	21 f0       	breq	.+8      	; 0xdbb2 <get_cpu_joypad_state+0x118>
    dbaa:	80 97       	sbiw	r24, 0x20	; 32
    dbac:	11 f0       	breq	.+4      	; 0xdbb2 <get_cpu_joypad_state+0x118>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / FP_8;
    dbae:	ab 8e       	std	Y+27, r10	; 0x1b
    dbb0:	01 c0       	rjmp	.+2      	; 0xdbb4 <get_cpu_joypad_state+0x11a>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(player, distance_x, distance_y);
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    dbb2:	1b 8f       	std	Y+27, r17	; 0x1b
		}
		p->held = player->goal_direction;
    dbb4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    dbb6:	98 a1       	ldd	r25, Y+32	; 0x20
    dbb8:	f6 01       	movw	r30, r12
    dbba:	95 83       	std	Z+5, r25	; 0x05
    dbbc:	84 83       	std	Z+4, r24	; 0x04
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    dbbe:	8c 81       	ldd	r24, Y+4	; 0x04
    dbc0:	9d 81       	ldd	r25, Y+5	; 0x05
    dbc2:	2d a1       	ldd	r18, Y+37	; 0x25
    dbc4:	3e a1       	ldd	r19, Y+38	; 0x26
    dbc6:	82 17       	cp	r24, r18
    dbc8:	93 07       	cpc	r25, r19
    dbca:	19 f0       	breq	.+6      	; 0xdbd2 <get_cpu_joypad_state+0x138>
		player->deadlock_count_x = 0;
    dbcc:	1a a2       	std	Y+34, r1	; 0x22
    dbce:	19 a2       	std	Y+33, r1	; 0x21
    dbd0:	06 c0       	rjmp	.+12     	; 0xdbde <get_cpu_joypad_state+0x144>
	else 
		player->deadlock_count_x++;
    dbd2:	29 a1       	ldd	r18, Y+33	; 0x21
    dbd4:	3a a1       	ldd	r19, Y+34	; 0x22
    dbd6:	2f 5f       	subi	r18, 0xFF	; 255
    dbd8:	3f 4f       	sbci	r19, 0xFF	; 255
    dbda:	3a a3       	std	Y+34, r19	; 0x22
    dbdc:	29 a3       	std	Y+33, r18	; 0x21
	if (player->shared.y != player->old_y)
    dbde:	6e 81       	ldd	r22, Y+6	; 0x06
    dbe0:	7f 81       	ldd	r23, Y+7	; 0x07
    dbe2:	2f a1       	ldd	r18, Y+39	; 0x27
    dbe4:	38 a5       	ldd	r19, Y+40	; 0x28
    dbe6:	62 17       	cp	r22, r18
    dbe8:	73 07       	cpc	r23, r19
    dbea:	19 f0       	breq	.+6      	; 0xdbf2 <get_cpu_joypad_state+0x158>
		player->deadlock_count_y = 0;
    dbec:	1c a2       	std	Y+36, r1	; 0x24
    dbee:	1b a2       	std	Y+35, r1	; 0x23
    dbf0:	06 c0       	rjmp	.+12     	; 0xdbfe <get_cpu_joypad_state+0x164>
	else
		player->deadlock_count_y++;
    dbf2:	2b a1       	ldd	r18, Y+35	; 0x23
    dbf4:	3c a1       	ldd	r19, Y+36	; 0x24
    dbf6:	2f 5f       	subi	r18, 0xFF	; 255
    dbf8:	3f 4f       	sbci	r19, 0xFF	; 255
    dbfa:	3c a3       	std	Y+36, r19	; 0x24
    dbfc:	2b a3       	std	Y+35, r18	; 0x23
	player->old_x = player->shared.x;
    dbfe:	9e a3       	std	Y+38, r25	; 0x26
    dc00:	8d a3       	std	Y+37, r24	; 0x25
	player->old_y = player->shared.y;
    dc02:	78 a7       	std	Y+40, r23	; 0x28
    dc04:	6f a3       	std	Y+39, r22	; 0x27
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    dc06:	29 a1       	ldd	r18, Y+33	; 0x21
    dc08:	3a a1       	ldd	r19, Y+34	; 0x22
    dc0a:	20 34       	cpi	r18, 0x40	; 64
    dc0c:	31 40       	sbci	r19, 0x01	; 1
    dc0e:	70 f0       	brcs	.+28     	; 0xdc2c <get_cpu_joypad_state+0x192>
	{
		p->held = button_map(LBRandom(2, 4));
    dc10:	64 e0       	ldi	r22, 0x04	; 4
    dc12:	70 e0       	ldi	r23, 0x00	; 0
    dc14:	82 e0       	ldi	r24, 0x02	; 2
    dc16:	90 e0       	ldi	r25, 0x00	; 0
    dc18:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    dc1c:	0e 94 06 6c 	call	0xd80c	; 0xd80c <button_map>
    dc20:	f6 01       	movw	r30, r12
    dc22:	95 83       	std	Z+5, r25	; 0x05
    dc24:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    dc26:	1a a2       	std	Y+34, r1	; 0x22
    dc28:	19 a2       	std	Y+33, r1	; 0x21
    dc2a:	24 c0       	rjmp	.+72     	; 0xdc74 <get_cpu_joypad_state+0x1da>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    dc2c:	2b a1       	ldd	r18, Y+35	; 0x23
    dc2e:	3c a1       	ldd	r19, Y+36	; 0x24
    dc30:	20 34       	cpi	r18, 0x40	; 64
    dc32:	31 40       	sbci	r19, 0x01	; 1
    dc34:	70 f0       	brcs	.+28     	; 0xdc52 <get_cpu_joypad_state+0x1b8>
	{
		p->held = button_map(LBRandom(0, 2));
    dc36:	62 e0       	ldi	r22, 0x02	; 2
    dc38:	70 e0       	ldi	r23, 0x00	; 0
    dc3a:	80 e0       	ldi	r24, 0x00	; 0
    dc3c:	90 e0       	ldi	r25, 0x00	; 0
    dc3e:	0e 94 54 54 	call	0xa8a8	; 0xa8a8 <LBRandom>
    dc42:	0e 94 06 6c 	call	0xd80c	; 0xd80c <button_map>
    dc46:	f6 01       	movw	r30, r12
    dc48:	95 83       	std	Z+5, r25	; 0x05
    dc4a:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_y = 0;
    dc4c:	1c a2       	std	Y+36, r1	; 0x24
    dc4e:	1b a2       	std	Y+35, r1	; 0x23
    dc50:	11 c0       	rjmp	.+34     	; 0xdc74 <get_cpu_joypad_state+0x1da>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / FP_8, player->shared.y / FP_8 - 3, player->shared.recoiled, player, p);
    dc52:	26 e0       	ldi	r18, 0x06	; 6
    dc54:	76 95       	lsr	r23
    dc56:	67 95       	ror	r22
    dc58:	2a 95       	dec	r18
    dc5a:	e1 f7       	brne	.-8      	; 0xdc54 <get_cpu_joypad_state+0x1ba>
    dc5c:	63 50       	subi	r22, 0x03	; 3
    dc5e:	36 e0       	ldi	r19, 0x06	; 6
    dc60:	96 95       	lsr	r25
    dc62:	87 95       	ror	r24
    dc64:	3a 95       	dec	r19
    dc66:	e1 f7       	brne	.-8      	; 0xdc60 <get_cpu_joypad_state+0x1c6>
    dc68:	86 01       	movw	r16, r12
    dc6a:	9e 01       	movw	r18, r28
    dc6c:	49 81       	ldd	r20, Y+1	; 0x01
    dc6e:	0e 94 1c 6c 	call	0xd838	; 0xd838 <crash_and_turn>
    dc72:	8c 8f       	std	Y+28, r24	; 0x1c
	
	// Re-act to player shot
	if (player->shot_tactic == TACTIC_SHOT_EVADE && other_player->old_active_shots < other_player->active_shots)
    dc74:	8a 8d       	ldd	r24, Y+26	; 0x1a
    dc76:	81 30       	cpi	r24, 0x01	; 1
    dc78:	09 f0       	breq	.+2      	; 0xdc7c <get_cpu_joypad_state+0x1e2>
    dc7a:	81 c0       	rjmp	.+258    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dc7c:	f7 01       	movw	r30, r14
    dc7e:	97 85       	ldd	r25, Z+15	; 0x0f
    dc80:	86 85       	ldd	r24, Z+14	; 0x0e
    dc82:	98 17       	cp	r25, r24
    dc84:	08 f0       	brcs	.+2      	; 0xdc88 <get_cpu_joypad_state+0x1ee>
    dc86:	7b c0       	rjmp	.+246    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
	{
		if (other_player->shared.y < player->shared.y && other_player->shared.x < player->shared.x)
    dc88:	26 81       	ldd	r18, Z+6	; 0x06
    dc8a:	37 81       	ldd	r19, Z+7	; 0x07
    dc8c:	8e 81       	ldd	r24, Y+6	; 0x06
    dc8e:	9f 81       	ldd	r25, Y+7	; 0x07
    dc90:	28 17       	cp	r18, r24
    dc92:	39 07       	cpc	r19, r25
    dc94:	c0 f5       	brcc	.+112    	; 0xdd06 <get_cpu_joypad_state+0x26c>
    dc96:	24 81       	ldd	r18, Z+4	; 0x04
    dc98:	35 81       	ldd	r19, Z+5	; 0x05
    dc9a:	8c 81       	ldd	r24, Y+4	; 0x04
    dc9c:	9d 81       	ldd	r25, Y+5	; 0x05
    dc9e:	28 17       	cp	r18, r24
    dca0:	39 07       	cpc	r19, r25
    dca2:	d0 f4       	brcc	.+52     	; 0xdcd8 <get_cpu_joypad_state+0x23e>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_LEFT)
    dca4:	80 81       	ld	r24, Z
    dca6:	82 30       	cpi	r24, 0x02	; 2
    dca8:	51 f4       	brne	.+20     	; 0xdcbe <get_cpu_joypad_state+0x224>
    dcaa:	88 81       	ld	r24, Y
    dcac:	83 30       	cpi	r24, 0x03	; 3
    dcae:	39 f4       	brne	.+14     	; 0xdcbe <get_cpu_joypad_state+0x224>
			{
				p->held = BTN_RIGHT;
    dcb0:	80 e8       	ldi	r24, 0x80	; 128
    dcb2:	90 e0       	ldi	r25, 0x00	; 0
    dcb4:	f6 01       	movw	r30, r12
    dcb6:	95 83       	std	Z+5, r25	; 0x05
    dcb8:	84 83       	std	Z+4, r24	; 0x04
				player->goal_reached = 0;
    dcba:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dcbc:	18 8e       	std	Y+24, r1	; 0x18
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_UP)
    dcbe:	f7 01       	movw	r30, r14
    dcc0:	80 81       	ld	r24, Z
    dcc2:	81 30       	cpi	r24, 0x01	; 1
    dcc4:	09 f0       	breq	.+2      	; 0xdcc8 <get_cpu_joypad_state+0x22e>
    dcc6:	5b c0       	rjmp	.+182    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dcc8:	88 81       	ld	r24, Y
    dcca:	81 11       	cpse	r24, r1
    dccc:	58 c0       	rjmp	.+176    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
			{
				player->goal_reached = 0;
    dcce:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dcd0:	18 8e       	std	Y+24, r1	; 0x18
				p->held = BTN_DOWN;
    dcd2:	80 e2       	ldi	r24, 0x20	; 32
    dcd4:	90 e0       	ldi	r25, 0x00	; 0
    dcd6:	3a c0       	rjmp	.+116    	; 0xdd4c <get_cpu_joypad_state+0x2b2>
			}
		}
		else if (other_player->shared.y < player->shared.y && other_player->shared.x > player->shared.x)
    dcd8:	82 17       	cp	r24, r18
    dcda:	93 07       	cpc	r25, r19
    dcdc:	08 f0       	brcs	.+2      	; 0xdce0 <get_cpu_joypad_state+0x246>
    dcde:	4f c0       	rjmp	.+158    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
		{
			if (other_player->shared.direction == D_DOWN && player->shared.direction == D_RIGHT)
    dce0:	f7 01       	movw	r30, r14
    dce2:	80 81       	ld	r24, Z
    dce4:	82 30       	cpi	r24, 0x02	; 2
    dce6:	51 f4       	brne	.+20     	; 0xdcfc <get_cpu_joypad_state+0x262>
    dce8:	88 81       	ld	r24, Y
    dcea:	81 30       	cpi	r24, 0x01	; 1
    dcec:	39 f4       	brne	.+14     	; 0xdcfc <get_cpu_joypad_state+0x262>
			{
				player->goal_reached = 0;
    dcee:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dcf0:	18 8e       	std	Y+24, r1	; 0x18
				p->held = BTN_LEFT;
    dcf2:	80 e4       	ldi	r24, 0x40	; 64
    dcf4:	90 e0       	ldi	r25, 0x00	; 0
    dcf6:	f6 01       	movw	r30, r12
    dcf8:	95 83       	std	Z+5, r25	; 0x05
    dcfa:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_UP)
    dcfc:	f7 01       	movw	r30, r14
    dcfe:	80 81       	ld	r24, Z
    dd00:	83 30       	cpi	r24, 0x03	; 3
    dd02:	e9 f5       	brne	.+122    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dd04:	e1 cf       	rjmp	.-62     	; 0xdcc8 <get_cpu_joypad_state+0x22e>
				player->goal_reached = 0;
				player->feeling_my_way = 0;
				p->held = BTN_DOWN;
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x < player->shared.x)
    dd06:	82 17       	cp	r24, r18
    dd08:	93 07       	cpc	r25, r19
    dd0a:	c8 f5       	brcc	.+114    	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dd0c:	f7 01       	movw	r30, r14
    dd0e:	24 81       	ldd	r18, Z+4	; 0x04
    dd10:	35 81       	ldd	r19, Z+5	; 0x05
    dd12:	8c 81       	ldd	r24, Y+4	; 0x04
    dd14:	9d 81       	ldd	r25, Y+5	; 0x05
    dd16:	28 17       	cp	r18, r24
    dd18:	39 07       	cpc	r19, r25
    dd1a:	e0 f4       	brcc	.+56     	; 0xdd54 <get_cpu_joypad_state+0x2ba>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_LEFT)
    dd1c:	80 81       	ld	r24, Z
    dd1e:	81 11       	cpse	r24, r1
    dd20:	0a c0       	rjmp	.+20     	; 0xdd36 <get_cpu_joypad_state+0x29c>
    dd22:	88 81       	ld	r24, Y
    dd24:	83 30       	cpi	r24, 0x03	; 3
    dd26:	39 f4       	brne	.+14     	; 0xdd36 <get_cpu_joypad_state+0x29c>
			{
				player->goal_reached = 0;
    dd28:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dd2a:	18 8e       	std	Y+24, r1	; 0x18
				p->held = BTN_RIGHT;
    dd2c:	80 e8       	ldi	r24, 0x80	; 128
    dd2e:	90 e0       	ldi	r25, 0x00	; 0
    dd30:	f6 01       	movw	r30, r12
    dd32:	95 83       	std	Z+5, r25	; 0x05
    dd34:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_RIGHT && player->shared.direction == D_DOWN)
    dd36:	f7 01       	movw	r30, r14
    dd38:	80 81       	ld	r24, Z
    dd3a:	81 30       	cpi	r24, 0x01	; 1
    dd3c:	01 f5       	brne	.+64     	; 0xdd7e <get_cpu_joypad_state+0x2e4>
    dd3e:	88 81       	ld	r24, Y
    dd40:	82 30       	cpi	r24, 0x02	; 2
    dd42:	e9 f4       	brne	.+58     	; 0xdd7e <get_cpu_joypad_state+0x2e4>
			{
				player->goal_reached = 0;
    dd44:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dd46:	18 8e       	std	Y+24, r1	; 0x18
				p->held = BTN_UP;
    dd48:	80 e1       	ldi	r24, 0x10	; 16
    dd4a:	90 e0       	ldi	r25, 0x00	; 0
    dd4c:	f6 01       	movw	r30, r12
    dd4e:	95 83       	std	Z+5, r25	; 0x05
    dd50:	84 83       	std	Z+4, r24	; 0x04
    dd52:	15 c0       	rjmp	.+42     	; 0xdd7e <get_cpu_joypad_state+0x2e4>
			}
		}
		else if (other_player->shared.y > player->shared.y && other_player->shared.x > player->shared.x)
    dd54:	82 17       	cp	r24, r18
    dd56:	93 07       	cpc	r25, r19
    dd58:	90 f4       	brcc	.+36     	; 0xdd7e <get_cpu_joypad_state+0x2e4>
		{
			if (other_player->shared.direction == D_UP && player->shared.direction == D_RIGHT)
    dd5a:	f7 01       	movw	r30, r14
    dd5c:	80 81       	ld	r24, Z
    dd5e:	81 11       	cpse	r24, r1
    dd60:	0a c0       	rjmp	.+20     	; 0xdd76 <get_cpu_joypad_state+0x2dc>
    dd62:	88 81       	ld	r24, Y
    dd64:	81 30       	cpi	r24, 0x01	; 1
    dd66:	39 f4       	brne	.+14     	; 0xdd76 <get_cpu_joypad_state+0x2dc>
			{
				player->goal_reached = 0;
    dd68:	1c 8e       	std	Y+28, r1	; 0x1c
				player->feeling_my_way = 0;
    dd6a:	18 8e       	std	Y+24, r1	; 0x18
				p->held = BTN_LEFT;
    dd6c:	80 e4       	ldi	r24, 0x40	; 64
    dd6e:	90 e0       	ldi	r25, 0x00	; 0
    dd70:	f6 01       	movw	r30, r12
    dd72:	95 83       	std	Z+5, r25	; 0x05
    dd74:	84 83       	std	Z+4, r24	; 0x04
			}
			if (other_player->shared.direction == D_LEFT && player->shared.direction == D_DOWN){
    dd76:	f7 01       	movw	r30, r14
    dd78:	80 81       	ld	r24, Z
    dd7a:	83 30       	cpi	r24, 0x03	; 3
    dd7c:	01 f3       	breq	.-64     	; 0xdd3e <get_cpu_joypad_state+0x2a4>
				player->feeling_my_way = 0;
				p->held = BTN_UP;
			}
		}
	}
}
    dd7e:	df 91       	pop	r29
    dd80:	cf 91       	pop	r28
    dd82:	1f 91       	pop	r17
    dd84:	0f 91       	pop	r16
    dd86:	ff 90       	pop	r15
    dd88:	ef 90       	pop	r14
    dd8a:	df 90       	pop	r13
    dd8c:	cf 90       	pop	r12
    dd8e:	bf 90       	pop	r11
    dd90:	af 90       	pop	r10
    dd92:	9f 90       	pop	r9
    dd94:	8f 90       	pop	r8
    dd96:	7f 90       	pop	r7
    dd98:	6f 90       	pop	r6
    dd9a:	08 95       	ret

0000dd9c <stream_text_middle>:
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
    dd9c:	bf 92       	push	r11
    dd9e:	cf 92       	push	r12
    dda0:	df 92       	push	r13
    dda2:	ef 92       	push	r14
    dda4:	ff 92       	push	r15
    dda6:	0f 93       	push	r16
    dda8:	1f 93       	push	r17
    ddaa:	cf 93       	push	r28
    ddac:	df 93       	push	r29
    ddae:	1f 92       	push	r1
    ddb0:	cd b7       	in	r28, 0x3d	; 61
    ddb2:	de b7       	in	r29, 0x3e	; 62
    ddb4:	8c 01       	movw	r16, r24
    ddb6:	f6 2e       	mov	r15, r22
    ddb8:	6a 01       	movw	r12, r20
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
	{
		ln = strnlen_P(dialogue, 255);
		x = 15 - ln / 2;
    ddba:	8f e0       	ldi	r24, 0x0F	; 15
    ddbc:	b8 2e       	mov	r11, r24
}
void stream_text_middle(const char* dialogue, u8 y, u16 delay)
{
	u8 x, ln, c;
	
	while (pgm_read_byte(dialogue) != '#')
    ddbe:	f8 01       	movw	r30, r16
    ddc0:	84 91       	lpm	r24, Z
    ddc2:	83 32       	cpi	r24, 0x23	; 35
    ddc4:	59 f1       	breq	.+86     	; 0xde1c <stream_text_middle+0x80>
	{
		ln = strnlen_P(dialogue, 255);
    ddc6:	6f ef       	ldi	r22, 0xFF	; 255
    ddc8:	70 e0       	ldi	r23, 0x00	; 0
    ddca:	c8 01       	movw	r24, r16
    ddcc:	0e 94 f6 6f 	call	0xdfec	; 0xdfec <strnlen_P>
		x = 15 - ln / 2;
    ddd0:	86 95       	lsr	r24
    ddd2:	eb 2c       	mov	r14, r11
    ddd4:	e8 1a       	sub	r14, r24
    ddd6:	e0 1a       	sub	r14, r16
    ddd8:	8e 2d       	mov	r24, r14
    ddda:	80 0f       	add	r24, r16
		while ((c = pgm_read_byte(dialogue++)))
    dddc:	0f 5f       	subi	r16, 0xFF	; 255
    ddde:	1f 4f       	sbci	r17, 0xFF	; 255
    dde0:	f8 01       	movw	r30, r16
    dde2:	31 97       	sbiw	r30, 0x01	; 1
    dde4:	e4 91       	lpm	r30, Z
    dde6:	e9 83       	std	Y+1, r30	; 0x01
    dde8:	ee 23       	and	r30, r30
    ddea:	b1 f0       	breq	.+44     	; 0xde18 <stream_text_middle+0x7c>
		{
#if JAMMA
			handle_coin_insert();
#endif
			LBPrintStr(x++, y, &c, 1);
    ddec:	21 e0       	ldi	r18, 0x01	; 1
    ddee:	ae 01       	movw	r20, r28
    ddf0:	4f 5f       	subi	r20, 0xFF	; 255
    ddf2:	5f 4f       	sbci	r21, 0xFF	; 255
    ddf4:	6f 2d       	mov	r22, r15
    ddf6:	0e 94 96 53 	call	0xa72c	; 0xa72c <LBPrintStr>
			LBGetJoyPadState(&p1, 0);
    ddfa:	60 e0       	ldi	r22, 0x00	; 0
    ddfc:	8c ea       	ldi	r24, 0xAC	; 172
    ddfe:	9c e0       	ldi	r25, 0x0C	; 12
    de00:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
			if (!(p1.held & BTN_A)) LBWaitUs(delay);
    de04:	80 91 b0 0c 	lds	r24, 0x0CB0
    de08:	90 91 b1 0c 	lds	r25, 0x0CB1
    de0c:	90 fd       	sbrc	r25, 0
    de0e:	e4 cf       	rjmp	.-56     	; 0xddd8 <stream_text_middle+0x3c>
	for (;micro_seconds > 0; micro_seconds--) {
		WaitVsync(1);
		handle_coin_insert();
	}
#else
	WaitUs(micro_seconds);
    de10:	c6 01       	movw	r24, r12
    de12:	0e 94 f6 43 	call	0x87ec	; 0x87ec <WaitUs>
    de16:	e0 cf       	rjmp	.-64     	; 0xddd8 <stream_text_middle+0x3c>
		}
		y++;
    de18:	f3 94       	inc	r15
    de1a:	d1 cf       	rjmp	.-94     	; 0xddbe <stream_text_middle+0x22>
	}
}
    de1c:	0f 90       	pop	r0
    de1e:	df 91       	pop	r29
    de20:	cf 91       	pop	r28
    de22:	1f 91       	pop	r17
    de24:	0f 91       	pop	r16
    de26:	ff 90       	pop	r15
    de28:	ef 90       	pop	r14
    de2a:	df 90       	pop	r13
    de2c:	cf 90       	pop	r12
    de2e:	bf 90       	pop	r11
    de30:	08 95       	ret

0000de32 <load_credits>:

void load_credits()
{
	fade_through();
    de32:	0e 94 4a 56 	call	0xac94	; 0xac94 <fade_through>
	stream_text_middle((const char*) strCredits, 5, 100);
    de36:	44 e6       	ldi	r20, 0x64	; 100
    de38:	50 e0       	ldi	r21, 0x00	; 0
    de3a:	65 e0       	ldi	r22, 0x05	; 5
    de3c:	88 ee       	ldi	r24, 0xE8	; 232
    de3e:	90 e0       	ldi	r25, 0x00	; 0
    de40:	0e 94 ce 6e 	call	0xdd9c	; 0xdd9c <stream_text_middle>
	LBWaitSeconds(4);
    de44:	84 e0       	ldi	r24, 0x04	; 4
    de46:	0e 94 6c 54 	call	0xa8d8	; 0xa8d8 <LBWaitSeconds>
	fade_through();
    de4a:	0c 94 4a 56 	jmp	0xac94	; 0xac94 <fade_through>

0000de4e <main>:
#endif

int main()
{
	// Initialize
    GetPrngNumber(GetTrueRandomSeed());
    de4e:	0e 94 38 44 	call	0x8870	; 0x8870 <GetTrueRandomSeed>
    de52:	0e 94 b8 45 	call	0x8b70	; 0x8b70 <GetPrngNumber>
	InitMusicPlayer(my_patches);
    de56:	83 ea       	ldi	r24, 0xA3	; 163
    de58:	93 e0       	ldi	r25, 0x03	; 3
    de5a:	0e 94 92 46 	call	0x8d24	; 0x8d24 <InitMusicPlayer>
	SetMasterVolume(0xff);
    de5e:	8f ef       	ldi	r24, 0xFF	; 255
    de60:	0e 94 0f 4a 	call	0x941e	; 0x941e <SetMasterVolume>
	SetTileTable(tiles_data);
    de64:	81 ea       	ldi	r24, 0xA1	; 161
    de66:	94 e4       	ldi	r25, 0x44	; 68
    de68:	0e 94 db 43 	call	0x87b6	; 0x87b6 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    de6c:	80 e1       	ldi	r24, 0x10	; 16
    de6e:	9b e3       	ldi	r25, 0x3B	; 59
    de70:	0e 94 b7 43 	call	0x876e	; 0x876e <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    de74:	8b e9       	ldi	r24, 0x9B	; 155
    de76:	0e 94 d8 43 	call	0x87b0	; 0x87b0 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    de7a:	60 e0       	ldi	r22, 0x00	; 0
    de7c:	83 e0       	ldi	r24, 0x03	; 3
    de7e:	0e 94 af 52 	call	0xa55e	; 0xa55e <FadeIn>
	ClearVram();
    de82:	0e 94 bc 43 	call	0x8778	; 0x8778 <ClearVram>
#if JAMMA
	read_dip_switches();
#endif
	init_scores(&scores);
    de86:	8f eb       	ldi	r24, 0xBF	; 191
    de88:	9b e0       	ldi	r25, 0x0B	; 11
    de8a:	0e 94 85 54 	call	0xa90a	; 0xa90a <init_scores>
	init_handles(&handles);
    de8e:	86 ee       	ldi	r24, 0xE6	; 230
    de90:	9b e0       	ldi	r25, 0x0B	; 11
    de92:	0e 94 91 54 	call	0xa922	; 0xa922 <init_handles>
	init_game_state();
    de96:	0e 94 df 55 	call	0xabbe	; 0xabbe <init_game_state>
	load_credits();
    de9a:	0e 94 19 6f 	call	0xde32	; 0xde32 <load_credits>
	load_splash();
    de9e:	0e 94 2a 63 	call	0xc654	; 0xc654 <load_splash>
	
	while (1)
	{
		waitForVSync();
    dea2:	0e 94 30 56 	call	0xac60	; 0xac60 <waitForVSync>
		switch (game.current_screen)
    dea6:	80 91 06 0c 	lds	r24, 0x0C06
    deaa:	81 30       	cpi	r24, 0x01	; 1
    deac:	91 f0       	breq	.+36     	; 0xded2 <main+0x84>
    deae:	28 f0       	brcs	.+10     	; 0xdeba <main+0x6c>
    deb0:	82 30       	cpi	r24, 0x02	; 2
    deb2:	c9 f0       	breq	.+50     	; 0xdee6 <main+0x98>
    deb4:	83 30       	cpi	r24, 0x03	; 3
    deb6:	41 f1       	breq	.+80     	; 0xdf08 <main+0xba>
    deb8:	52 c0       	rjmp	.+164    	; 0xdf5e <main+0x110>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    deba:	60 e0       	ldi	r22, 0x00	; 0
    debc:	8c ea       	ldi	r24, 0xAC	; 172
    debe:	9c e0       	ldi	r25, 0x0C	; 12
    dec0:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
				update_splash(&p1, &p2);
    dec4:	6f ed       	ldi	r22, 0xDF	; 223
    dec6:	7b e0       	ldi	r23, 0x0B	; 11
    dec8:	8c ea       	ldi	r24, 0xAC	; 172
    deca:	9c e0       	ldi	r25, 0x0C	; 12
    decc:	0e 94 de 6a 	call	0xd5bc	; 0xd5bc <update_splash>
				break;
    ded0:	46 c0       	rjmp	.+140    	; 0xdf5e <main+0x110>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    ded2:	60 e0       	ldi	r22, 0x00	; 0
    ded4:	8c ea       	ldi	r24, 0xAC	; 172
    ded6:	9c e0       	ldi	r25, 0x0C	; 12
    ded8:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
				update_tank_rank(&p1);
    dedc:	8c ea       	ldi	r24, 0xAC	; 172
    dede:	9c e0       	ldi	r25, 0x0C	; 12
    dee0:	0e 94 62 68 	call	0xd0c4	; 0xd0c4 <update_tank_rank>
				break;
    dee4:	3c c0       	rjmp	.+120    	; 0xdf5e <main+0x110>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    dee6:	60 e0       	ldi	r22, 0x00	; 0
    dee8:	8c ea       	ldi	r24, 0xAC	; 172
    deea:	9c e0       	ldi	r25, 0x0C	; 12
    deec:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    def0:	61 e0       	ldi	r22, 0x01	; 1
    def2:	8f ed       	ldi	r24, 0xDF	; 223
    def4:	9b e0       	ldi	r25, 0x0B	; 11
    def6:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    defa:	6f ed       	ldi	r22, 0xDF	; 223
    defc:	7b e0       	ldi	r23, 0x0B	; 11
    defe:	8c ea       	ldi	r24, 0xAC	; 172
    df00:	9c e0       	ldi	r25, 0x0C	; 12
    df02:	0e 94 b8 6b 	call	0xd770	; 0xd770 <update_handle_select>
				break;
    df06:	2b c0       	rjmp	.+86     	; 0xdf5e <main+0x110>
			case LEVEL:
				if (game.selection == PVCPU)
    df08:	80 91 1b 0c 	lds	r24, 0x0C1B
    df0c:	81 11       	cpse	r24, r1
    df0e:	04 c0       	rjmp	.+8      	; 0xdf18 <main+0xca>
				{
					LBGetJoyPadState(&p1, 0);
    df10:	60 e0       	ldi	r22, 0x00	; 0
    df12:	8c ea       	ldi	r24, 0xAC	; 172
    df14:	9c e0       	ldi	r25, 0x0C	; 12
    df16:	1b c0       	rjmp	.+54     	; 0xdf4e <main+0x100>
					//get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    df18:	83 30       	cpi	r24, 0x03	; 3
    df1a:	89 f4       	brne	.+34     	; 0xdf3e <main+0xf0>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    df1c:	4c ea       	ldi	r20, 0xAC	; 172
    df1e:	5c e0       	ldi	r21, 0x0C	; 12
    df20:	62 ea       	ldi	r22, 0xA2	; 162
    df22:	7f e0       	ldi	r23, 0x0F	; 15
    df24:	89 e3       	ldi	r24, 0x39	; 57
    df26:	9c e0       	ldi	r25, 0x0C	; 12
    df28:	0e 94 4d 6d 	call	0xda9a	; 0xda9a <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    df2c:	4f ed       	ldi	r20, 0xDF	; 223
    df2e:	5b e0       	ldi	r21, 0x0B	; 11
    df30:	69 e3       	ldi	r22, 0x39	; 57
    df32:	7c e0       	ldi	r23, 0x0C	; 12
    df34:	82 ea       	ldi	r24, 0xA2	; 162
    df36:	9f e0       	ldi	r25, 0x0F	; 15
    df38:	0e 94 4d 6d 	call	0xda9a	; 0xda9a <get_cpu_joypad_state>
    df3c:	0a c0       	rjmp	.+20     	; 0xdf52 <main+0x104>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    df3e:	60 e0       	ldi	r22, 0x00	; 0
    df40:	8c ea       	ldi	r24, 0xAC	; 172
    df42:	9c e0       	ldi	r25, 0x0C	; 12
    df44:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    df48:	61 e0       	ldi	r22, 0x01	; 1
    df4a:	8f ed       	ldi	r24, 0xDF	; 223
    df4c:	9b e0       	ldi	r25, 0x0B	; 11
    df4e:	0e 94 3f 53 	call	0xa67e	; 0xa67e <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    df52:	6f ed       	ldi	r22, 0xDF	; 223
    df54:	7b e0       	ldi	r23, 0x0B	; 11
    df56:	8c ea       	ldi	r24, 0xAC	; 172
    df58:	9c e0       	ldi	r25, 0x0C	; 12
    df5a:	0e 94 20 66 	call	0xcc40	; 0xcc40 <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    df5e:	80 91 01 01 	lds	r24, 0x0101
    df62:	90 91 02 01 	lds	r25, 0x0102
    df66:	01 96       	adiw	r24, 0x01	; 1
    df68:	90 93 02 01 	sts	0x0102, r25
    df6c:	80 93 01 01 	sts	0x0101, r24
	}
    df70:	98 cf       	rjmp	.-208    	; 0xdea2 <main+0x54>

0000df72 <__udivmodqi4>:
    df72:	99 1b       	sub	r25, r25
    df74:	79 e0       	ldi	r23, 0x09	; 9
    df76:	04 c0       	rjmp	.+8      	; 0xdf80 <__udivmodqi4_ep>

0000df78 <__udivmodqi4_loop>:
    df78:	99 1f       	adc	r25, r25
    df7a:	96 17       	cp	r25, r22
    df7c:	08 f0       	brcs	.+2      	; 0xdf80 <__udivmodqi4_ep>
    df7e:	96 1b       	sub	r25, r22

0000df80 <__udivmodqi4_ep>:
    df80:	88 1f       	adc	r24, r24
    df82:	7a 95       	dec	r23
    df84:	c9 f7       	brne	.-14     	; 0xdf78 <__udivmodqi4_loop>
    df86:	80 95       	com	r24
    df88:	08 95       	ret

0000df8a <__udivmodhi4>:
    df8a:	aa 1b       	sub	r26, r26
    df8c:	bb 1b       	sub	r27, r27
    df8e:	51 e1       	ldi	r21, 0x11	; 17
    df90:	07 c0       	rjmp	.+14     	; 0xdfa0 <__udivmodhi4_ep>

0000df92 <__udivmodhi4_loop>:
    df92:	aa 1f       	adc	r26, r26
    df94:	bb 1f       	adc	r27, r27
    df96:	a6 17       	cp	r26, r22
    df98:	b7 07       	cpc	r27, r23
    df9a:	10 f0       	brcs	.+4      	; 0xdfa0 <__udivmodhi4_ep>
    df9c:	a6 1b       	sub	r26, r22
    df9e:	b7 0b       	sbc	r27, r23

0000dfa0 <__udivmodhi4_ep>:
    dfa0:	88 1f       	adc	r24, r24
    dfa2:	99 1f       	adc	r25, r25
    dfa4:	5a 95       	dec	r21
    dfa6:	a9 f7       	brne	.-22     	; 0xdf92 <__udivmodhi4_loop>
    dfa8:	80 95       	com	r24
    dfaa:	90 95       	com	r25
    dfac:	bc 01       	movw	r22, r24
    dfae:	cd 01       	movw	r24, r26
    dfb0:	08 95       	ret

0000dfb2 <__divmodhi4>:
    dfb2:	97 fb       	bst	r25, 7
    dfb4:	07 2e       	mov	r0, r23
    dfb6:	16 f4       	brtc	.+4      	; 0xdfbc <__divmodhi4+0xa>
    dfb8:	00 94       	com	r0
    dfba:	07 d0       	rcall	.+14     	; 0xdfca <__divmodhi4_neg1>
    dfbc:	77 fd       	sbrc	r23, 7
    dfbe:	09 d0       	rcall	.+18     	; 0xdfd2 <__divmodhi4_neg2>
    dfc0:	0e 94 c5 6f 	call	0xdf8a	; 0xdf8a <__udivmodhi4>
    dfc4:	07 fc       	sbrc	r0, 7
    dfc6:	05 d0       	rcall	.+10     	; 0xdfd2 <__divmodhi4_neg2>
    dfc8:	3e f4       	brtc	.+14     	; 0xdfd8 <__divmodhi4_exit>

0000dfca <__divmodhi4_neg1>:
    dfca:	90 95       	com	r25
    dfcc:	81 95       	neg	r24
    dfce:	9f 4f       	sbci	r25, 0xFF	; 255
    dfd0:	08 95       	ret

0000dfd2 <__divmodhi4_neg2>:
    dfd2:	70 95       	com	r23
    dfd4:	61 95       	neg	r22
    dfd6:	7f 4f       	sbci	r23, 0xFF	; 255

0000dfd8 <__divmodhi4_exit>:
    dfd8:	08 95       	ret

0000dfda <memcpy_P>:
    dfda:	fb 01       	movw	r30, r22
    dfdc:	dc 01       	movw	r26, r24
    dfde:	02 c0       	rjmp	.+4      	; 0xdfe4 <memcpy_P+0xa>
    dfe0:	05 90       	lpm	r0, Z+
    dfe2:	0d 92       	st	X+, r0
    dfe4:	41 50       	subi	r20, 0x01	; 1
    dfe6:	50 40       	sbci	r21, 0x00	; 0
    dfe8:	d8 f7       	brcc	.-10     	; 0xdfe0 <memcpy_P+0x6>
    dfea:	08 95       	ret

0000dfec <strnlen_P>:
    dfec:	fc 01       	movw	r30, r24
    dfee:	05 90       	lpm	r0, Z+
    dff0:	61 50       	subi	r22, 0x01	; 1
    dff2:	70 40       	sbci	r23, 0x00	; 0
    dff4:	01 10       	cpse	r0, r1
    dff6:	d8 f7       	brcc	.-10     	; 0xdfee <strnlen_P+0x2>
    dff8:	80 95       	com	r24
    dffa:	90 95       	com	r25
    dffc:	8e 0f       	add	r24, r30
    dffe:	9f 1f       	adc	r25, r31
    e000:	08 95       	ret

0000e002 <_exit>:
    e002:	f8 94       	cli

0000e004 <__stop_program>:
    e004:	ff cf       	rjmp	.-2      	; 0xe004 <__stop_program>
