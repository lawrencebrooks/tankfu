
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000006  00800100  0000cf6c  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000cf6c  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ef1  00800106  00800106  0000d086  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000d074  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000d68c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000d931  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000005d0  00000000  00000000  0000d948  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000088d5  00000000  00000000  0000df18  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000152d  00000000  00000000  000167ed  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001eb3  00000000  00000000  00017d1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00001370  00000000  00000000  00019bd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00001a15  00000000  00000000  0001af40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00007ed0  00000000  00000000  0001c955  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000688  00000000  00000000  00024828  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 e9 39 	jmp	0x73d2	; 0x73d2 <__ctors_end>
       4:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
       8:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
       c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      10:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      14:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      18:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      1c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      20:	0c 94 55 3e 	jmp	0x7caa	; 0x7caa <__vector_8>
      24:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      28:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      2c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      30:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      34:	0c 94 2c 3c 	jmp	0x7858	; 0x7858 <__vector_13>
      38:	0c 94 6c 3c 	jmp	0x78d8	; 0x78d8 <__vector_14>
      3c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      40:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      44:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      48:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      4c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      50:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      54:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      58:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      5c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      60:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      64:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      68:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      6c:	0c 94 56 3a 	jmp	0x74ac	; 0x74ac <__bad_interrupt>
      70:	d8 59       	subi	r29, 0x98	; 152
      72:	dd 59       	subi	r29, 0x9D	; 157
      74:	e0 59       	subi	r30, 0x90	; 144
      76:	e3 59       	subi	r30, 0x93	; 147
      78:	e6 59       	subi	r30, 0x96	; 150
      7a:	e9 59       	subi	r30, 0x99	; 153
      7c:	ec 59       	subi	r30, 0x9C	; 156
      7e:	ef 59       	subi	r30, 0x9F	; 159
      80:	f2 59       	subi	r31, 0x92	; 146

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	b7 3f ba 3f 15 40 19 40 21 40 c2 3f c7 3f cc 3f     .?.?.@.@!@.?.?.?
      e0:	29 40 cf 3f d2 3f d5 3f 12 40                       )@.?.?.?.@

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <default_scores>:
      f6:	00 01 14 0d 01 02 14 0e 02 03 14 0f 03 04 14 10     ................
     106:	04 05 14 11 05 06 14 12 06 00 14 13 00 00           ..............

00000114 <default_handles>:
     114:	55 5a 45 4c 4a 42 41 41 41 42 42 42 43 43 43 44     UZELJBAAABBBCCCD
     124:	44 44 45 45 45 46 46 46 47 47 47 43 50 55           DDEEEFFFGGGCPU

00000132 <strMap>:
     132:	28 63 29 20 32 30 31 35 20 4c 61 77 72 65 6e 63     (c) 2015 Lawrenc
     142:	65 20 42 72 6f 6f 6b 73 00 50 6c 61 79 65 72 20     e Brooks.Player 
     152:	76 73 20 43 50 55 00 50 6c 61 79 65 72 20 76 73     vs CPU.Player vs
     162:	20 50 6c 61 79 65 72 00 54 61 6e 6b 20 52 61 6e      Player.Tank Ran
     172:	6b 00 45 64 69 74 20 48 61 6e 64 6c 65 00 5f 5f     k.Edit Handle.__
     182:	5f 5f 5f 5f 5f 5f 5f 5f 5f 00 7c 00 50 31 00 50     _________.|.P1.P
     192:	32 00 53 65 6c 65 63 74 20 2d 20 41 00 43 6f 6e     2.Select - A.Con
     1a2:	66 69 72 6d 20 2d 20 41 00 43 61 6e 63 65 6c 20     firm - A.Cancel 
     1b2:	2d 20 58 00 52 65 73 65 74 20 44 65 66 61 75 6c     - X.Reset Defaul
     1c2:	74 73 20 2d 20 53 4c 20 28 35 73 29 00 45 64 69     ts - SL (5s).Edi
     1d2:	74 20 2d 20 55 50 2f 44 4f 57 4e 00 4f 77 6e 73     t - UP/DOWN.Owns
     1e2:	00 42 79 00 46 69 6e 61 6c 20 53 63 6f 72 65 00     .By.Final Score.
     1f2:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     202:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     212:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     222:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     232:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     242:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     252:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     262:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     272:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     282:	20 20 20 20 20 00 20 20 20 20 20 20 20 20 20 20          .          
     292:	20 20 20 20 00 53 63 6f 72 65 3a 00 54 6f 74 61         .Score:.Tota
     2a2:	6c 3a 00 42 61 69 6c 20 2d 20 58 00 50 61 75 73     l:.Bail - X.Paus
     2b2:	65 64 00 20 20 20 42 6f 6f 74 20 43 61 6d 70 20     ed.   Boot Camp 
     2c2:	20 20 00 20 20 20 56 65 6c 6f 63 69 74 79 20 20       .   Velocity  
     2d2:	20 20 00 20 20 20 20 44 69 67 67 65 72 20 20 20       .    Digger   
     2e2:	20 20 00 41 63 74 20 31 20 54 68 65 79 20 4d 65       .Act 1 They Me
     2f2:	65 74 00 20 20 20 52 69 63 68 6f 63 68 65 74 20     et.   Richochet 
     302:	20 20 00 20 54 68 65 20 48 6f 6e 65 79 20 50 6f       . The Honey Po
     312:	74 20 00 20 20 46 6f 63 61 6c 20 50 6f 69 6e 74     t .  Focal Point
     322:	20 20 00 49 74 27 73 20 4e 6f 74 20 46 61 69 72       .It's Not Fair
     332:	21 20 00 20 20 4d 75 63 68 20 42 65 74 74 65 72     ! .  Much Better
     342:	20 20 00 20 20 20 46 61 63 65 20 4f 66 66 20 20       .   Face Off  
     352:	20 20 00 20 20 20 20 20 54 65 73 74 20 20 20 20       .     Test    
     362:	20 20 00                                              .

00000365 <my_patches>:
     365:	02 81 6c 00 00 4f 07 50 07 02 9c 65 00 00 e3 06     ..l..O.P...e....
     375:	e4 06 02 55 63 00 00 45 02 46 02 02 a4 61 00 00     ...Uc..E.F...a..
     385:	af 01 b0 01 02 a2 61 00 00 00 00 01 00 02 a0 61     ......a........a
     395:	00 00 00 00 01 00 02 80 5f 00 00 1e 02 1f 02 02     ........_.......
     3a5:	0e 5e 00 00 70 01 71 01 02 55 63 00 00 45 02 46     .^..p.q..Uc..E.F
     3b5:	02 02 0a 5e 00 00 00 00 01 00 02 9c 65 00 00 e3     ...^........e...
     3c5:	06 e4 06 02 06 5e 00 00 00 00 01 00 02 04 5e 00     .....^........^.
     3d5:	00 00 00 00 00                                      .....

000003da <level_data>:
     3da:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     3ea:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
     412:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     432:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     44e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     46e:	00 02 02 00 00 00 00 00 00 00 00 00 01 01 01 01     ................
     47e:	01 01 01 01 01 01 00 00 00 00 00 00 00 00 00 02     ................
     48e:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     49e:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     4ba:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     4ca:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     4e6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4f6:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     506:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     522:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     532:	02 02 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     542:	02 00 00 58 00 00 00 00 00 00 00 00 00 00 02 02     ...X............
	...
     55a:	00 63 00 00 00 02 02 00 00 00 00 00 00 00 00 00     .c..............
     56a:	00 00 00 00 02 02 00 00 00 00 00 00 00 00 00 00     ................
     57a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
     58a:	00 00 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
     59a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5aa:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5ba:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
	...
     5d6:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     5e6:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     5f6:	02 00 00 00 00 00 00 00 00 00 01 01 01 01 01 01     ................
     606:	01 01 01 01 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
     61e:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 00 00     ................
     62e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     64e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     66a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     68a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     6a6:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6d6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     6e6:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     702:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     71e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     73e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     75a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     77a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     796:	00 00 00 02 02 01 00 00 00 00 01 00 00 00 00 00     ................
	...
     7ae:	00 00 00 01 00 00 00 00 01 02 02 01 00 00 00 00     ................
     7be:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     7ce:	00 01 00 00 00 00 01 02 02 01 00 07 00 00 01 00     ................
     7de:	00 00 02 00 00 00 00 00 00 00 00 02 00 00 00 01     ................
     7ee:	00 00 07 00 01 02 02 01 00 00 00 00 01 00 00 00     ................
     7fe:	02 00 00 00 00 00 00 00 00 02 00 00 00 01 00 00     ................
     80e:	00 00 01 02 02 01 00 00 00 00 01 00 00 00 02 00     ................
     81e:	00 00 00 00 00 00 00 02 00 00 00 01 00 00 00 00     ................
     82e:	01 02 02 01 00 00 00 00 01 00 00 00 02 02 02 02     ................
     83e:	02 02 02 02 02 02 00 00 00 01 00 00 00 00 01 02     ................
     84e:	02 01 00 00 00 00 01 00 00 00 02 00 00 00 00 00     ................
     85e:	00 00 00 02 00 00 00 01 00 00 00 00 01 02 02 01     ................
     86e:	00 00 00 00 01 00 00 00 02 00 00 00 00 00 00 00     ................
     87e:	00 02 00 00 00 01 00 00 00 00 01 02 02 01 00 58     ...............X
     88e:	00 00 01 00 00 00 02 00 00 00 00 00 00 00 00 02     ................
     89e:	00 00 00 01 00 63 00 00 01 02 02 01 00 00 00 00     .....c..........
     8ae:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8be:	00 01 00 00 00 00 01 02 02 01 00 00 00 00 01 00     ................
	...
     8da:	00 00 00 01 00 00 00 00 01 02 02 01 01 01 01 01     ................
     8ea:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     8fa:	00 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
     91e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     93a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     95a:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     976:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     996:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9a6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9b6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     9c6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 01     ................
     9d6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     9e6:	01 01 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     9f6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a06:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     a16:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     a26:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     a36:	01 01 02 02 02 01 01 01 01 02 02 02 01 01 01 01     ................
     a46:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     a56:	02 02 02 01 01 01 01 02 02 02 01 01 01 01 01 01     ................
     a66:	01 01 01 02 02 01 00 00 00 00 01 01 01 01 02 02     ................
     a76:	02 01 01 01 01 02 02 02 01 01 01 01 00 00 00 00     ................
     a86:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     a96:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     aa6:	02 01 00 00 00 00 01 01 01 01 01 01 01 01 01 01     ................
     ab6:	01 01 01 01 01 01 01 01 00 00 00 00 01 02 02 01     ................
     ac6:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     ad6:	01 01 01 01 01 01 00 00 00 00 01 02 02 01 00 00     ................
     ae6:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 01     ................
     af6:	01 01 00 00 00 00 00 00 01 02 02 01 00 58 00 00     .............X..
     b06:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     b16:	00 09 00 00 00 00 01 02 02 01 00 00 00 00 00 00     ................
     b26:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b36:	00 63 00 00 01 02 02 01 00 00 00 00 01 01 01 01     .c..............
     b46:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 00     ................
     b56:	00 00 01 02 02 01 00 00 00 00 01 01 01 01 01 01     ................
     b66:	01 01 01 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
     b76:	01 02 02 01 00 00 00 00 01 01 01 01 01 01 01 01     ................
     b86:	01 01 01 01 01 01 01 01 01 01 00 00 00 00 01 02     ................
     b96:	02 01 00 00 00 00 01 01 01 01 02 02 02 01 01 01     ................
     ba6:	01 02 02 02 01 01 01 01 00 00 00 00 01 02 02 01     ................
     bb6:	01 01 01 01 01 01 01 01 02 02 02 01 01 01 01 02     ................
     bc6:	02 02 01 01 01 01 01 01 01 01 01 02 02 01 01 01     ................
     bd6:	01 01 01 01 01 01 02 02 02 01 01 01 01 02 02 02     ................
     be6:	01 01 01 01 01 01 01 01 01 02 02 01 01 01 01 01     ................
     bf6:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c06:	01 01 01 01 01 01 01 02 02 01 01 01 01 01 01 01     ................
     c16:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c26:	01 01 01 01 01 02 02 01 01 01 01 01 01 01 01 01     ................
     c36:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c46:	01 01 01 02 02 01 01 01 01 01 01 01 01 01 01 01     ................
     c56:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c66:	01 02 02 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
     c76:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 02     ................
     c86:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     c96:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     ca6:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     cb6:	02 02 02 02 02 02 02 02 02 02 02 02 02 00 00 00     ................
	...
     cde:	00 02 02 00 08 00 00 01 00 01 00 01 00 01 00 01     ................
     cee:	00 00 01 00 01 00 01 00 01 00 01 00 00 08 00 02     ................
     cfe:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     d1a:	00 02 02 02 02 02 02 00 01 00 02 00 00 00 00 00     ................
     d2a:	02 02 00 00 00 00 00 02 00 01 00 02 02 02 02 02     ................
     d3a:	02 00 00 00 00 00 00 00 02 00 00 00 00 00 02 02     ................
     d4a:	00 00 00 00 00 02 00 00 00 00 00 00 00 02 02 00     ................
     d5a:	00 00 00 00 01 00 02 00 00 00 00 00 02 02 00 00     ................
     d6a:	00 00 00 02 00 01 00 00 00 00 00 02 02 00 01 00     ................
     d7a:	01 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     d8a:	00 02 00 00 00 01 00 01 00 02 02 00 00 00 00 00     ................
     d9a:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     daa:	00 01 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
     dce:	00 02 02 02 02 02 02 00 01 00 01 00 00 00 00 00     ................
     dde:	00 00 00 00 00 00 00 01 00 01 00 02 02 02 02 02     ................
     dee:	00 00 00 00 02 00 00 00 00 00 00 00 02 00 00 00     ................
     dfe:	00 02 00 00 00 00 00 00 00 02 00 00 00 00 00 00     ................
     e0e:	00 00 02 00 01 00 02 00 00 00 02 00 00 00 00 02     ................
     e1e:	00 00 00 02 00 01 00 02 00 00 00 00 00 00 00 00     ................
     e2e:	02 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     e3e:	00 02 00 00 00 02 00 00 00 00 02 02 02 02 02 00     ................
     e4e:	01 00 02 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
     e5e:	00 01 00 02 02 02 02 02 02 00 00 00 00 00 00 00     ................
     e6e:	02 00 00 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
     e7e:	00 00 00 00 00 02 02 00 01 00 01 00 01 00 02 00     ................
	...
     e96:	00 00 00 02 00 01 00 01 00 01 00 02 02 00 00 00     ................
     ea6:	00 00 00 00 02 00 00 00 02 02 02 02 02 02 00 00     ................
     eb6:	00 02 00 00 00 00 00 00 00 02 02 00 01 00 02 00     ................
     ec6:	01 00 00 00 00 00 00 00 02 02 00 00 00 00 00 00     ................
     ed6:	00 01 00 02 00 01 00 02 02 00 00 00 02 00 00 00     ................
     ee6:	58 00 00 00 00 00 02 02 00 00 00 00 63 00 00 00     X...........c...
     ef6:	00 02 00 00 00 02 02 00 01 00 02 00 01 00 00 00     ................
     f06:	00 00 00 00 02 02 00 00 00 00 00 00 00 01 00 02     ................
     f16:	00 01 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f32:	00 02 00 00 00 02 02 00 08 00 02 00 00 00 01 00     ................
     f42:	01 00 01 00 01 00 01 00 01 00 01 00 01 00 00 02     ................
     f52:	00 08 00 02 02 00 00 00 02 00 00 00 00 00 00 00     ................
	...
     f6e:	00 02 00 00 00 02 02 02 02 02 02 02 02 02 02 02     ................
     f7e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f8e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     f9e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     fae:	02 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
	...
     fca:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     fe6:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
    1006:	00 00 04 02 02 00 00 00 00 00 00 06 05 00 00 00     ................
	...
    1026:	00 02 02 00 00 00 00 00 06 02 02 05 00 00 00 00     ................
	...
    1042:	00 00 00 02 02 00 00 00 00 06 02 01 01 02 05 00     ................
	...
    1062:	00 02 02 00 00 00 00 04 02 01 01 02 03 00 00 00     ................
	...
    107e:	00 00 00 02 02 00 00 00 00 00 04 02 02 03 00 00     ................
	...
    109e:	00 02 02 00 00 00 00 00 00 04 03 00 00 07 00 00     ................
    10ae:	06 05 00 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    10be:	02 00 00 00 00 00 00 00 00 00 00 00 00 06 02 02     ................
    10ce:	05 00 00 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    10e6:	00 00 06 02 01 01 02 05 00 00 00 00 00 00 00 00     ................
    10f6:	00 00 00 02 02 00 00 58 00 00 00 00 00 00 00 00     .......X........
    1106:	04 02 01 01 02 03 00 00 00 00 00 00 00 63 00 00     .............c..
    1116:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 04     ................
    1126:	02 02 03 00 00 00 00 00 00 00 00 00 00 00 00 02     ................
    1136:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 04 03     ................
	...
    1152:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1162:	00 00 00 00 07 00 00 06 05 00 00 00 00 00 00 02     ................
    1172:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1182:	00 00 00 00 06 02 02 05 00 00 00 00 00 02 02 00     ................
	...
    11a2:	00 06 02 01 01 02 05 00 00 00 00 02 02 00 00 00     ................
	...
    11be:	00 00 00 04 02 01 01 02 03 00 00 00 00 02 02 00     ................
	...
    11de:	00 00 04 02 02 03 00 00 00 00 00 02 02 00 00 00     ................
	...
    11fe:	00 04 03 00 00 00 00 00 00 02 02 05 00 00 00 00     ................
	...
    1222:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
    123e:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
    125e:	06 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    126e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    127e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    128e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    129e:	02 00 00 00 00 00 00 00 00 00 00 04 02 02 02 02     ................
    12ae:	02 02 03 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    12be:	00 00 00 00 00 01 01 00 00 00 04 02 02 02 02 03     ................
    12ce:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    12de:	00 00 00 01 01 00 00 00 00 04 02 02 03 00 00 00     ................
    12ee:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    12fe:	00 01 01 00 00 00 00 00 04 03 00 00 00 00 00 01     ................
    130e:	01 00 00 00 00 00 00 02 02 00 00 00 00 00 00 01     ................
    131e:	01 00 00 00 00 00 00 00 00 00 00 00 00 01 01 00     ................
    132e:	00 00 00 00 00 02 02 00 00 00 00 00 00 01 01 00     ................
	...
    1346:	00 00 00 01 01 00 00 00 00 00 00 02 02 00 00 00     ................
    1356:	00 00 00 01 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1366:	00 01 01 00 00 00 00 00 00 02 02 00 00 00 00 00     ................
    1376:	00 00 00 00 00 02 00 00 00 00 00 00 02 00 00 00     ................
    1386:	00 00 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
    1396:	00 00 00 02 00 00 00 00 00 00 02 00 00 00 00 00     ................
    13a6:	00 00 00 00 00 02 02 00 00 00 00 00 00 00 00 00     ................
    13b6:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    13c6:	00 00 00 02 02 00 58 00 00 00 00 00 00 00 00 02     ......X.........
    13d6:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 63 00     ..............c.
    13e6:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 00     ................
    13f6:	00 00 00 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    1406:	02 00 00 00 00 00 00 00 00 00 00 02 00 00 00 00     ................
    1416:	00 00 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
	...
    142e:	00 02 00 00 00 00 00 00 02 00 00 00 00 00 00 00     ................
    143e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 02     ................
    144e:	00 00 00 00 00 00 02 00 00 00 00 00 00 00 00 00     ................
    145e:	00 02 02 00 00 00 00 00 00 00 00 00 00 02 00 07     ................
    146e:	00 00 09 00 02 00 00 00 00 00 00 00 00 00 00 02     ................
    147e:	02 00 00 00 00 00 00 00 00 00 00 02 05 00 00 00     ................
    148e:	00 06 02 00 00 00 00 00 00 00 00 00 00 02 02 00     ................
    149e:	00 00 00 01 01 01 01 01 00 02 02 05 00 00 06 02     ................
    14ae:	02 00 01 01 01 01 01 00 00 00 00 02 02 00 00 00     ................
    14be:	00 01 01 01 01 01 00 02 02 02 02 02 02 02 02 00     ................
    14ce:	01 01 01 01 01 00 00 00 00 02 02 00 00 00 00 01     ................
    14de:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    14ee:	00 01 01 00 00 00 00 02 02 00 00 00 00 01 01 00     ................
    14fe:	08 00 00 00 00 00 00 00 00 00 00 00 00 08 00 01     ................
    150e:	01 00 00 00 00 02 02 00 00 00 00 01 01 00 00 00     ................
	...
    152a:	00 01 01 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    154e:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    155e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    156e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    157e:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    158e:	03 00 00 00 00 00 00 00 00 04 02 02 02 02 02 02     ................
    159e:	03 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    15b6:	04 02 02 02 02 03 00 00 00 00 00 00 00 00 00 00     ................
    15c6:	04 02 02 00 00 00 01 01 01 01 01 00 00 00 00 04     ................
    15d6:	02 02 03 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    15e6:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 04 03     ................
    15f6:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    1606:	00 00 01 00 09 00 01 00 00 00 00 00 00 00 00 00     ................
    1616:	00 00 00 01 00 07 00 01 00 00 00 02 02 00 00 00     ................
    1626:	01 00 00 00 01 00 00 00 00 00 00 00 00 00 00 00     ................
    1636:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    1646:	01 01 01 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    1656:	01 01 01 01 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    167a:	00 02 02 05 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1696:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
    16a6:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 06     ................
    16b6:	02 02 02 02 02 05 00 58 00 00 00 00 00 00 01 00     .......X........
    16c6:	00 00 00 00 01 00 00 00 00 63 00 00 06 02 02 02     .........c......
    16d6:	02 02 02 03 00 00 00 00 00 00 00 00 01 00 00 08     ................
    16e6:	00 00 01 00 00 00 00 00 00 00 04 02 02 02 02 02     ................
    16f6:	03 00 00 00 00 00 00 00 00 00 01 00 00 00 00 00     ................
    1706:	01 00 00 00 00 00 00 00 00 04 02 02 02 03 00 00     ................
	...
    171e:	01 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    172e:	04 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    174a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    176a:	00 02 02 00 00 00 01 01 01 01 01 00 00 00 00 00     ................
    177a:	00 00 00 00 00 00 00 01 01 01 01 01 00 00 00 02     ................
    178a:	02 00 00 00 01 00 00 00 01 00 00 00 00 00 00 00     ................
    179a:	00 00 00 00 00 01 00 00 00 01 00 00 00 02 02 00     ................
    17aa:	00 00 01 00 07 00 01 00 00 00 00 00 00 00 00 00     ................
    17ba:	00 00 00 01 00 09 00 01 00 00 00 02 02 00 00 00     ................
    17ca:	01 00 00 00 01 00 00 00 00 00 06 05 00 00 00 00     ................
    17da:	00 01 00 00 00 01 00 00 00 02 02 00 00 00 01 01     ................
    17ea:	01 01 01 00 00 00 00 06 02 02 05 00 00 00 00 01     ................
    17fa:	01 01 01 01 00 00 00 02 02 05 00 00 00 00 00 00     ................
    180a:	00 00 00 00 06 02 02 02 02 05 00 00 00 00 00 00     ................
    181a:	00 00 00 00 06 02 02 02 05 00 00 00 00 00 00 00     ................
    182a:	00 06 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
    183a:	00 06 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    184a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    185a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    186a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    187a:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1896:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18b2:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18d2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    18ee:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    18fe:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    190e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    192a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1942:	01 01 01 01 01 01 01 01 01 02 02 00 00 07 00 00     ................
    1952:	09 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    1962:	01 01 01 01 01 01 01 02 02 00 00 00 00 00 00 00     ................
	...
    197e:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    199a:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
    19aa:	58 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     X...............
    19ba:	01 01 01 00 63 00 00 01 01 02 02 00 00 00 00 00     ....c...........
	...
    19d6:	00 00 01 01 01 00 00 00 00 01 01 02 02 00 00 00     ................
	...
    19f6:	01 01 01 00 00 00 00 01 01 02 02 00 00 00 00 00     ................
	...
    1a12:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a32:	01 01 01 01 01 01 01 01 01 02 02 00 00 00 00 00     ................
	...
    1a4e:	00 00 01 01 01 01 01 01 01 01 01 02 02 00 00 00     ................
	...
    1a76:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1a92:	00 00 00 02 02 00 00 00 00 00 00 00 02 02 02 02     ................
    1aa2:	02 02 02 02 02 02 02 02 02 02 00 00 00 00 00 00     ................
    1ab2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ace:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1aee:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b0a:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1b2a:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b3a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b4a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1b5a:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    1b82:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ba2:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bbe:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1bde:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1bee:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1bfe:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1c1a:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1c36:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1c4e:	00 00 00 07 00 00 09 00 00 02 02 01 01 01 01 01     ................
    1c5e:	01 01 01 01 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c6e:	00 00 00 00 00 00 00 02 02 01 01 00 00 00 00 01     ................
    1c7e:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1c8e:	00 00 00 00 00 02 02 01 01 00 58 00 00 01 01 01     ..........X.....
	...
    1caa:	00 00 63 00 00 00 00 02 02 01 01 00 00 00 00 01     ..c.............
    1cba:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    1cca:	00 00 00 00 00 02 02 01 01 00 00 00 00 01 01 01     ................
	...
    1cea:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1d0a:	00 02 02 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
	...
    1d26:	00 00 00 02 02 01 01 01 01 01 01 01 01 01 00 00     ................
	...
    1d46:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d62:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1d82:	00 02 02 00 00 00 00 00 00 00 02 02 02 02 02 02     ................
    1d92:	02 02 02 02 02 02 02 02 00 00 00 00 00 00 00 02     ................
    1da2:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dbe:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dda:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1dfa:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e16:	00 00 00 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e26:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e36:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e46:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    1e56:	02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e72:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1e8e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eae:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eca:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1eea:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f06:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f26:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f42:	00 00 00 02 02 00 07 00 00 09 00 00 00 00 00 00     ................
	...
    1f5e:	07 00 00 09 00 02 02 00 00 00 00 00 00 00 00 00     ................
	...
    1f7e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1f9e:	00 02 02 00 00 58 00 00 00 00 00 00 00 00 00 00     .....X..........
	...
    1fb6:	00 00 00 63 00 00 00 02 02 00 00 00 00 00 00 00     ...c............
	...
    1fda:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    1ff6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2016:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2032:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2052:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    206e:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    208e:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20aa:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20ca:	00 02 02 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    20e6:	00 00 00 02 02 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    2106:	00 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2116:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2126:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    2136:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 00     ................
	...
    2156:	00 04 01 01 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    2176:	04 01 01 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    2192:	00 00 00 04 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    21b2:	00 00 04 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    21d2:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    21ee:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    220e:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    222a:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    224a:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2266:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    2286:	00 02 00 00 00 00 00 02 02 00 00 58 00 00 00 00     ...........X....
	...
    22a2:	00 00 00 02 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
	...
    22c2:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    22de:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    22fe:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    231a:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    233a:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2356:	00 00 00 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    2376:	00 02 00 00 00 00 00 02 02 00 00 00 00 00 00 00     ................
	...
    2392:	00 00 06 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    23ae:	00 00 00 06 01 02 00 00 00 00 00 02 02 00 00 00     ................
	...
    23ce:	06 01 01 02 00 00 00 00 00 02 02 00 00 00 00 00     ................
	...
    23ea:	00 06 01 01 01 02 00 00 00 00 00 02 02 02 02 02     ................
    23fa:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
    240a:	02 02 02 02 02 02 02 02 02 02                       ..........

00002414 <sprites_data>:
    2414:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    2424:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    2434:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    2444:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    2454:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    2464:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    2474:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    2484:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    2494:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    24a4:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    24b4:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    24c4:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    24d4:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    24e4:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    24f4:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    2504:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    2514:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2524:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    2534:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    2544:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    2554:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2564:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    2574:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2584:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2594:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    25a4:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    25b4:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    25c4:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    25d4:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    25e4:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    25f4:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    2604:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    2614:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2624:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    2634:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    2644:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2654:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2664:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2674:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2684:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2694:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    26a4:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    26b4:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    26c4:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    26d4:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    26e4:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    26f4:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    2704:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    2714:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2724:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2734:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2744:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2754:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2764:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    2774:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2784:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2794:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27a4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27b4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27c4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    27d4:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    27e4:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    27f4:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    2804:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    2814:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    2824:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    2834:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    2844:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    2854:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    2864:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    2874:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    2884:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    2894:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    28a4:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    28b4:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    28c4:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    28d4:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    28e4:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    28f4:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    2904:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    2914:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    2924:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    2934:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    2944:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    2954:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    2964:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    2974:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    2984:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    2994:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    29a4:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    29b4:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    29c4:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    29d4:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    29e4:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    29f4:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    2a04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a14:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2a24:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    2a34:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    2a44:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2a54:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    2a64:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    2a74:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2a84:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2a94:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    2aa4:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    2ab4:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    2ac4:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    2ad4:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2ae4:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    2af4:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    2b04:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2b14:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2b24:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    2b34:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    2b44:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2b54:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    2b64:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    2b74:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    2b84:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    2b94:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    2ba4:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    2bb4:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    2bc4:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    2bd4:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2be4:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    2bf4:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2c04:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2c14:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2c24:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2c34:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2c44:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2c54:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    2c64:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    2c74:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    2c84:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    2c94:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    2ca4:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2cb4:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    2cc4:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    2cd4:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2ce4:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    2cf4:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    2d04:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d14:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d24:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2d34:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    2d44:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    2d54:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    2d64:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    2d74:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    2d84:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2d94:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2da4:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    2db4:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    2dc4:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2dd4:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    2de4:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    2df4:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    2e04:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    2e14:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    2e24:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    2e34:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    2e44:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    2e54:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    2e64:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    2e74:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    2e84:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    2e94:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    2ea4:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    2eb4:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    2ec4:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    2ed4:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    2ee4:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    2ef4:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    2f04:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    2f14:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2f24:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2f34:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    2f44:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    2f54:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2f64:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2f74:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2f84:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    2f94:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    2fa4:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    2fb4:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    2fc4:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    2fd4:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    2fe4:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    2ff4:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3004:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3014:	ff ff ff fe fe fe fe fe ff 37 37 ff ff fe fe fe     .........77.....
    3024:	ff 37 37 37 37 ff ff fe ff 37 37 37 37 37 37 ff     .7777....777777.
    3034:	ff 37 37 37 37 37 37 37 ff 37 37 37 37 37 37 fe     .7777777.777777.
    3044:	ff 37 37 37 37 fe fe fe ff 37 37 fe fe fe fe fe     .7777....77.....
    3054:	fe fe fe fe fe ff ff ff fe fe fe ff ff 37 37 ff     .............77.
    3064:	fe ff ff 37 37 37 37 ff ff 37 37 37 37 37 37 ff     ...7777..777777.
    3074:	37 37 37 37 37 37 37 ff fe 37 37 37 37 37 37 ff     7777777..777777.
    3084:	fe fe fe 37 37 37 37 ff fe fe fe fe fe 37 37 ff     ...7777......77.
    3094:	ff ff ff ff ff ff ff ff ff 37 37 37 37 37 37 37     .........7777777
    30a4:	ff 37 37 37 37 37 37 37 fe ff 37 37 37 37 37 fe     .7777777..77777.
    30b4:	fe ff 37 37 37 37 37 fe fe fe ff 37 37 37 fe fe     ..77777....777..
    30c4:	fe fe ff 37 37 37 fe fe fe fe fe ff 37 fe fe fe     ...777......7...
    30d4:	fe fe fe ff 37 fe fe fe fe fe ff 37 37 37 fe fe     ....7......777..
    30e4:	fe fe ff 37 37 37 fe fe fe ff 37 37 37 37 37 fe     ...777....77777.
    30f4:	fe ff 37 37 37 37 37 fe ff 37 37 37 37 37 37 37     ..77777..7777777
    3104:	ff 37 37 37 37 37 37 37 ff ff ff ff ff ff ff ff     .7777777........

00003114 <map_up_arrow>:
    3114:	01 01 33                                            ..3

00003117 <map_down_arrow>:
    3117:	01 01 32                                            ..2

0000311a <map_left_arrow>:
    311a:	01 01 31                                            ..1

0000311d <map_right_arrow>:
    311d:	01 01 30                                            ..0

00003120 <map_rocket_right_1>:
    3120:	01 01 27                                            ..'

00003123 <map_rocket_right_0>:
    3123:	01 01 26                                            ..&

00003126 <map_rocket_up_1>:
    3126:	01 01 25                                            ..%

00003129 <map_rocket_up_0>:
    3129:	01 01 24                                            ..$

0000312c <map_ball>:
    312c:	01 01 23                                            ..#

0000312f <map_explosion_2>:
    312f:	02 02 0c 0d 0d 0c                                   ......

00003135 <map_explosion_1>:
    3135:	02 02 0a 0b 19 1a                                   ......

0000313b <map_explosion_0>:
    313b:	02 02 08 09 17 18                                   ......

00003141 <map_tank2_right_1>:
    3141:	02 02 21 22 2e 2f                                   ..!"./

00003147 <map_tank2_right_0>:
    3147:	02 02 1f 20 2c 2d                                   ... ,-

0000314d <map_tank2_up_1>:
    314d:	02 02 1d 1e 2a 2b                                   ....*+

00003153 <map_tank2_up_0>:
    3153:	02 02 1b 1c 28 29                                   ....()

00003159 <map_tank1_right_1>:
    3159:	02 02 06 07 15 16                                   ......

0000315f <map_tank1_right_0>:
    315f:	02 02 04 05 13 14                                   ......

00003165 <map_tank1_up_1>:
    3165:	02 02 02 03 11 12                                   ......

0000316b <map_tank1_up_0>:
    316b:	02 02 00 01 0f 10                                   ......

00003171 <map_tank_blank>:
    3171:	02 02 0e 0e 0e 0e                                   ......

00003177 <map_none>:
    3177:	01 01 0e                                            ...

0000317a <tiles_data>:
	...
    31ba:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    31ca:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    31da:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    31ea:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    31fa:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    320a:	ec ed ff ff ff ff f6 ec ec ed ee ff ff f6 ed ec     ................
    321a:	ec ed ee ff f6 ee ed ec ec ed ff f6 ee ee ed ec     ................
    322a:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    323a:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    324a:	ec ed ff f6 ee ff ed ec ec ed f6 3f ff ee ed ec     ...........?....
    325a:	ec ed ee ff 3f f6 ed ec ec ed ff ee f6 ff ed ec     ....?...........
    326a:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    327a:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    328a:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    329a:	ec ff f6 ff ff ee ed ec ec ed ff f6 ee ee ed ec     ................
    32aa:	ec 3f ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     .?..............
    32ba:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    32ca:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    32da:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    32ea:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    3302:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    3312:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    3322:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    333a:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    334a:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    335a:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    336a:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    3382:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    33a2:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    33ba:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    33ca:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    33da:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    33ea:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    33fa:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    340a:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    341a:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    342a:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    343a:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    344a:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    345a:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    346a:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    347a:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    348a:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    349a:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    34aa:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    34ba:	f0 f3 f0 f0 f3 f0 f3 f0 f5 f0 f0 f5 f5 f0 f0 f5     ................
    34ca:	f4 f5 f5 f4 f4 f5 f5 f4 f0 f0 f3 f0 f0 f3 f0 f0     ................
    34da:	f3 f0 f2 f3 f0 f0 f3 f0 f0 f5 f5 f0 f3 f5 f5 f0     ................
    34ea:	f5 f4 f4 f5 f5 f4 f4 f5 f0 f0 f3 f0 f3 f0 f3 f0     ................
    34fa:	7f 7f 7f 7f 7f 7f 7f 7f 7f 1f 1f 1f 1e 1e 1d 1d     ................
    350a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    351a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    352a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    353a:	7f 7f 7f 7f 7f 7f 7f 7f 1c 1c 1b 1b 1a 1a 19 19     ................
    354a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    355a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    356a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    357a:	7f 7f 7f 7f 7f 7f 7f 7f 19 19 18 18 18 18 18 58     ...............X
    358a:	19 19 18 18 18 18 18 58 19 19 18 18 18 18 18 18     .......X........
    359a:	19 19 18 18 18 18 18 18 19 19 18 18 18 18 18 18     ................
    35aa:	19 19 18 18 18 18 18 18 19 19 58 58 58 58 58 58     ..........XXXXXX
    35ba:	7f 7f 7f 7f 7f 7f 7f 7f 18 18 18 18 18 18 18 18     ................
    35ca:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    35da:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    35ea:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
	...
    361a:	7f 7f 7f 7f 7f 7f 7f 7f 1c 1c 1b 1b 1a 1a 19 19     ................
    362a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
	...
    365a:	7f 7f 7f 7f 7f 7f 7f 7f 18 18 18 18 18 18 18 18     ................
    366a:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    367a:	00 00 00 00 00 00 7f 7f 00 00 00 00 00 00 7f 19     ................
    368a:	00 00 00 00 00 00 7f 19 00 00 00 00 00 00 7f 19     ................
    369a:	00 00 00 00 00 00 7f 19 00 00 00 00 00 00 7f 19     ................
    36aa:	00 00 00 00 00 00 7f 19 00 00 00 00 00 00 7f 19     ................
    36ba:	7f 7f 7f 7f 7f 7f 00 00 18 18 18 18 18 18 00 00     ................
    36ca:	19 18 18 18 18 18 00 00 19 18 18 18 18 18 00 00     ................
    36da:	18 18 18 18 18 18 00 00 18 18 18 18 18 18 00 00     ................
    36ea:	18 18 18 18 18 18 00 00 18 18 18 18 18 18 00 00     ................
    36fa:	7f 7f 7f 7f 7f 7f 7f 7f 7f 18 18 18 18 18 18 18     ................
    370a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    371a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    372a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    373a:	00 00 00 00 00 00 2b 2b 00 00 00 00 00 00 00 2b     ......++.......+
    374a:	00 00 00 00 00 00 00 2b 2b 2b 2b 00 00 00 00 2b     .......++++....+
    375a:	12 12 12 00 00 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    376a:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    377a:	2b 2b 00 00 00 00 00 00 2b 00 00 00 00 00 00 00     ++......+.......
    378a:	2b 00 00 00 00 00 00 00 2b 00 00 00 00 2b 2b 2b     +.......+....+++
    379a:	2b 20 20 00 00 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    37aa:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    37ba:	7f 1c 1b 1b 1a 1a 19 19 7f 1c 1b 1b 1a 1a 19 19     ................
    37ca:	7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58     .......X.......X
    37da:	7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58     .......X.......X
    37ea:	7f 1c 1b 1b 1a 1a 19 19 7f 1c 1b 1b 1a 1a 19 19     ................
    37fa:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    380a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    381a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    382a:	7f 1f 1f 1f 1e 1e 1d 1d 7f 1f 1f 1f 1e 1e 1d 1d     ................
    383a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    384a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    385a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    386a:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    387a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    388a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
	...
    38ba:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    38ca:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    38da:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    38ea:	7f 18 18 18 18 18 18 18 7f 18 18 18 18 18 18 18     ................
    38fa:	7f 7f 7f 7f 7f 7f 7f 19 1c 1c 1b 1b 1a 1a 19 19     ................
    390a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    391a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    392a:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
	...
    3962:	7f 7f 7f 7f 7f 7f 7f 7f 1c 1c 1b 1b 1a 1a 19 19     ................
    3972:	1c 1c 1b 1b 1a 1a 19 19 12 12 12 20 20 20 29 2b     ...........   )+
    3982:	2b 2b 2b 20 20 20 29 29 12 12 12 20 20 20 20 20     +++   ))...     
    3992:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 00 00     +++     ...   ..
    39a2:	2b 2b 2b 20 20 00 00 00 12 12 12 00 00 00 00 00     +++  ...........
    39b2:	2b 2b 2b 00 00 00 00 00 2b 29 20 20 20 12 12 12     +++.....+)   ...
    39c2:	29 29 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12     ))   +++     ...
    39d2:	20 20 20 20 20 2b 2b 2b 00 00 20 20 20 12 12 12          +++..   ...
    39e2:	00 00 00 20 20 2b 2b 2b 00 00 00 00 00 12 12 12     ...  +++........
    39f2:	00 00 00 00 00 2b 2b 2b 7f 1c 1b 1b 1a 1a 19 19     .....+++........
    3a02:	7f 1c 1b 1b 1a 1a 19 19 7f 1c 1b 1b 1a 1a 19 19     ................
    3a12:	7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58     .......X.......X
    3a22:	7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58     .......X.......X
    3a32:	7f 1c 1b 1b 1a 1a 19 58 7f 18 18 18 18 18 18 18     .......X........
    3a42:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    3a52:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    3a62:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    3a72:	18 18 18 18 18 18 18 18 1c 1c 1b 1b 1a 1a 19 19     ................
    3a82:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    3a92:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    3aa2:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    3ab2:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    3ac2:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
    3ad2:	1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19     ................
	...
    3afe:	00 00 f5 f5 00 00 00 00 00 00 00 f5 00 00 00 00     ................
    3b0e:	00 00 00 f5 f5 f5 f5 00 00 00 00 f5 90 90 90 00     ................
    3b1e:	00 e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1     ................
    3b2e:	e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0 f5 f5 00 00     ................
    3b3e:	00 00 00 00 f5 00 00 00 00 00 00 00 f5 00 00 00     ................
    3b4e:	00 00 00 00 f5 00 00 00 00 f5 f5 f5 f5 e1 e1 00     ................
    3b5e:	00 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1     ................
    3b6e:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 7f 1c 1b 1b     ................
    3b7e:	1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b     ...X.......X....
    3b8e:	1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b     ...X.......X....
    3b9e:	1a 1a 19 58 7f 1c 1b 1b 1a 1a 19 58 7f 1c 1b 1b     ...X.......X....
    3bae:	1a 1a 19 58 7f 1c 1b 1b 1a 1a 58 58 00 00 00 00     ...X......XX....
    3bbe:	00 00 7f 19 00 00 00 00 00 00 7f 19 00 00 00 00     ................
    3bce:	00 00 7f 19 00 00 00 00 00 00 7f 19 00 00 00 00     ................
    3bde:	00 00 7f 19 00 00 00 00 00 00 7f 19 00 00 00 00     ................
    3bee:	00 00 7f 19 00 00 00 00 00 00 7f 19 18 18 18 18     ................
    3bfe:	18 18 00 00 19 18 18 18 18 18 00 00 19 18 18 18     ................
    3c0e:	18 18 00 00 19 18 18 18 18 18 00 00 19 18 18 18     ................
    3c1e:	18 18 00 00 19 18 18 18 18 18 00 00 19 18 18 18     ................
    3c2e:	18 18 00 00 19 18 18 18 18 18 00 00 00 00 00 00     ................
    3c3e:	00 00 00 00 7f 7f 7f 7f 7f 7f 7f 7f 1c 1c 1b 1b     ................
    3c4e:	1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b     ................
    3c5e:	1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19 1c 1c 1b 1b     ................
    3c6e:	1a 1a 19 19 1c 1c 1b 1b 1a 1a 19 19 7f 18 18 18     ................
    3c7e:	18 18 18 18 7f 18 18 18 18 18 18 18 18 18 18 18     ................
    3c8e:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    3c9e:	18 18 18 18 18 18 18 18 18 18 18 18 18 18 18 18     ................
    3cae:	18 18 18 18 18 18 18 18 18 18 18 18 90 90 90 e1     ................
    3cbe:	e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0 90 90 90 e1     ................
    3cce:	e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1     ................
    3cde:	e1 e1 00 00 f5 f5 f5 e1 e1 00 00 00 90 90 90 00     ................
    3cee:	00 00 00 00 f5 f5 f5 00 00 00 00 00 f5 f0 e1 e1     ................
    3cfe:	e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1     ................
    3d0e:	e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 00 00 e1 e1     ................
    3d1e:	e1 90 90 90 00 00 00 e1 e1 f5 f5 f5 00 00 00 00     ................
    3d2e:	00 90 90 90 00 00 00 00 00 f5 f5 f5 00 00 00 00     ................
	...
    3d7a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d8a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3d9a:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3daa:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3dba:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    3dca:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    3dda:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    3dea:	00 ff 00 ff 00 ff 00 ff ff 00 ff 00 ff 00 ff 00     ................
    3dfa:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    3e0a:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    3e1a:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    3e2a:	ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00 ff 00     ................
    3e3a:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    3e4a:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    3e5a:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    3e6a:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
    3e7a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    3e8a:	00 00 ff ff ff ff 00 00 00 ff 00 ff ff 00 ff 00     ................
    3e9a:	00 ff 00 ff ff 00 ff 00 00 00 ff 00 00 ff 00 00     ................
    3eaa:	00 00 ff 00 00 ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    3ec2:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    3ed2:	ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00 00 00     ................
    3ee2:	00 00 ff ff ff ff 00 00 00 00 ff 00 00 ff 00 00     ................
    3ef2:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    3ffa:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    400a:	ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 00 ff     ................
    401a:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    402a:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    403a:	00 00 ff ff ff ff 00 00 00 ff 00 00 00 00 ff 00     ................
    404a:	ff 00 00 00 00 00 00 ff ff 00 ff 00 00 ff 00 ff     ................
    405a:	ff 00 00 00 00 00 00 ff 00 ff ff ff ff ff ff 00     ................
    406a:	00 00 ff 00 00 ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    40c2:	00 ff ff ff ff ff ff 00 00 ff 00 00 00 00 ff 00     ................
    40d2:	00 ff 00 00 00 00 ff 00 00 ff 00 00 00 00 ff 00     ................
    40e2:	00 ff 00 00 00 00 ff 00 00 ff ff ff ff ff ff 00     ................
	...
    40fe:	ff 00 00 00 00 ff 00 ff ff 00 ff 00 00 ff ff 00     ................
    410e:	ff ff 00 00 ff ff ff ff ff ff ff 00 00 00 ff ff     ................
    411e:	ff ff 00 00 00 ff ff ff ff ff ff 00 00 ff 00 00     ................
    412e:	ff 00 ff 00 00 00 00 ff 00 00 00 ff 00 00 00 ff     ................
    413e:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    414e:	ff 00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff     ................
    415e:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4192:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    41a2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    41b2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    41c2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    41d2:	ff ff ff ff ff 00 00 00 ff ff ff ff ff 00 00 00     ................
    41e2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    41f2:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    423a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    424a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff ff     ................
    425a:	00 00 00 ff ff ff ff ff 00 00 00 ff ff 00 00 00     ................
    426a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    427a:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    428a:	00 00 00 ff ff 00 00 00 ff ff ff ff ff ff ff ff     ................
    429a:	ff ff ff ff ff ff ff ff 00 00 00 ff ff 00 00 00     ................
    42aa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42ba:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42ca:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42da:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    42ea:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4312:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
	...
    4352:	00 00 00 ff ff ff ff ff 00 00 00 ff ff ff ff ff     ................
    4362:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4372:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4392:	ff ff ff ff ff 00 00 00 ff ff ff ff ff 00 00 00     ................
    43a2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43b2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43c2:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    43d2:	00 00 00 ff ff ff ff ff 00 00 00 ff ff ff ff ff     ................
	...
    43fa:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    440a:	00 00 00 ff ff 00 00 00 ff ff ff ff ff 00 00 00     ................
    441a:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    457a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    458a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    459a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45aa:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    45ba:	00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
	...
    45fa:	00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    460a:	ff ff ff ff ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    461a:	ff ff ff ff ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    462a:	00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    463a:	00 00 ff 00 00 00 00 00 00 ff ff ff ff 00 00 00     ................
    464a:	ff 00 ff 00 00 00 00 00 00 ff ff ff 00 00 00 00     ................
    465a:	00 00 ff 00 ff 00 00 00 ff ff ff ff 00 00 00 00     ................
    466a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    467a:	ff ff 00 00 00 00 00 00 ff ff 00 00 ff 00 00 00     ................
    468a:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    469a:	00 ff 00 00 00 00 00 00 ff 00 00 ff ff 00 00 00     ................
    46aa:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    46ba:	00 ff 00 00 00 00 00 00 ff 00 ff 00 00 00 00 00     ................
    46ca:	ff 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    46da:	ff 00 ff 00 ff 00 00 00 ff 00 00 ff 00 00 00 00     ................
    46ea:	00 ff ff 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    46fa:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    470a:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    473a:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    474a:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    475a:	00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    476a:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    477a:	00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    478a:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    479a:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    47aa:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    47ba:	00 00 ff 00 00 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    47ca:	00 ff ff ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    47da:	00 ff ff ff 00 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    47ea:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4802:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4812:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    4822:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4862:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4872:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4892:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    48e2:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    490e:	ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
    491e:	00 00 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00     ................
	...
    493a:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     .ooo....o...o...
    494a:	6f 00 00 6f 6f 00 00 00 6f 00 6f 00 6f 00 00 00     o..oo...o.o.o...
    495a:	6f 6f 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     oo..o...o...o...
    496a:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
    497a:	00 00 6f 00 00 00 00 00 00 6f 6f 00 00 00 00 00     ..o......oo.....
    498a:	6f 00 6f 00 00 00 00 00 00 00 6f 00 00 00 00 00     o.o.......o.....
    499a:	00 00 6f 00 00 00 00 00 00 00 6f 00 00 00 00 00     ..o.......o.....
    49aa:	6f 6f 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00     ooooo...........
    49ba:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     .ooo....o...o...
    49ca:	00 00 00 00 6f 00 00 00 00 00 00 00 6f 00 00 00     ....o.......o...
    49da:	00 00 6f 6f 00 00 00 00 6f 6f 00 00 00 00 00 00     ..oo....oo......
    49ea:	6f 6f 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00     ooooo...........
    49fa:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     .ooo....o...o...
    4a0a:	00 00 00 00 6f 00 00 00 00 00 6f 6f 00 00 00 00     ....o.....oo....
    4a1a:	00 00 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     ....o...o...o...
    4a2a:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
    4a3a:	00 00 6f 6f 00 00 00 00 00 6f 00 6f 00 00 00 00     ..oo.....o.o....
    4a4a:	6f 00 00 6f 00 00 00 00 6f 00 00 6f 00 00 00 00     o..o....o..o....
    4a5a:	6f 00 00 6f 00 00 00 00 6f 6f 6f 6f 6f 00 00 00     o..o....ooooo...
    4a6a:	00 00 00 6f 00 00 00 00 00 00 00 00 00 00 00 00     ...o............
    4a7a:	6f 6f 6f 6f 6f 00 00 00 6f 00 00 00 00 00 00 00     ooooo...o.......
    4a8a:	6f 6f 6f 6f 00 00 00 00 00 00 00 00 6f 00 00 00     oooo........o...
    4a9a:	00 00 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     ....o...o...o...
    4aaa:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
    4aba:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 00 00 00 00     .ooo....o.......
    4aca:	6f 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     oooo....o...o...
    4ada:	6f 00 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     o...o...o...o...
    4aea:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
    4afa:	6f 6f 6f 6f 6f 00 00 00 6f 00 00 00 6f 00 00 00     ooooo...o...o...
    4b0a:	00 00 00 00 6f 00 00 00 00 00 00 6f 00 00 00 00     ....o......o....
    4b1a:	00 00 00 6f 00 00 00 00 00 00 6f 00 00 00 00 00     ...o......o.....
    4b2a:	00 00 6f 00 00 00 00 00 00 00 00 00 00 00 00 00     ..o.............
    4b3a:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     .ooo....o...o...
    4b4a:	6f 00 00 00 6f 00 00 00 00 6f 6f 6f 00 00 00 00     o...o....ooo....
    4b5a:	6f 00 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     o...o...o...o...
    4b6a:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
    4b7a:	00 6f 6f 6f 00 00 00 00 6f 00 00 00 6f 00 00 00     .ooo....o...o...
    4b8a:	6f 00 00 00 6f 00 00 00 6f 00 00 00 6f 00 00 00     o...o...o...o...
    4b9a:	00 6f 6f 6f 6f 00 00 00 00 00 00 00 6f 00 00 00     .oooo.......o...
    4baa:	00 6f 6f 6f 00 00 00 00 00 00 00 00 00 00 00 00     .ooo............
	...
    4bca:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4be2:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c0a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c22:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4c32:	00 ff 00 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    4c42:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    4c52:	ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    4c62:	00 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
	...
    4c8a:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4c9a:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4cba:	00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4cca:	00 00 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    4cda:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4cea:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4cfa:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4d0a:	ff 00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00     ................
    4d1a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d2a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d3a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4d4a:	00 00 00 00 ff 00 00 00 00 ff ff 00 ff 00 00 00     ................
    4d5a:	ff 00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    4d6a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4d7a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4d8a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4d9a:	ff ff ff ff ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4daa:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4dba:	ff ff ff ff 00 00 00 00 00 ff 00 00 ff 00 00 00     ................
    4dca:	00 ff 00 00 ff 00 00 00 00 ff ff ff 00 00 00 00     ................
    4dda:	00 ff 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00     ................
    4dea:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4dfa:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4e0a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    4e1a:	ff 00 00 00 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4e2a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e3a:	ff ff ff ff 00 00 00 00 00 ff 00 00 ff 00 00 00     ................
    4e4a:	00 ff 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00     ................
    4e5a:	00 ff 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00     ................
    4e6a:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4e7a:	ff ff ff ff ff 00 00 00 ff 00 00 00 00 00 00 00     ................
    4e8a:	ff 00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00     ................
    4e9a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    4eaa:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4eba:	ff ff ff ff ff 00 00 00 ff 00 00 00 00 00 00 00     ................
    4eca:	ff 00 00 00 00 00 00 00 ff ff ff ff ff 00 00 00     ................
    4eda:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    4eea:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4efa:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4f0a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    4f1a:	ff 00 00 ff ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4f2a:	00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4f3a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4f4a:	ff 00 00 00 ff 00 00 00 ff ff ff ff ff 00 00 00     ................
    4f5a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    4f6a:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    4f7a:	00 ff ff ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4f8a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4f9a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    4faa:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4fba:	00 00 ff ff ff 00 00 00 00 00 00 ff 00 00 00 00     ................
    4fca:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    4fda:	00 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00 00     ................
    4fea:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    4ffa:	ff 00 00 00 ff 00 00 00 ff 00 00 ff 00 00 00 00     ................
    500a:	ff 00 ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
    501a:	ff 00 ff 00 00 00 00 00 ff 00 00 ff 00 00 00 00     ................
    502a:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    503a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    504a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    505a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    506a:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    507a:	ff 00 00 00 ff 00 00 00 ff ff 00 ff ff 00 00 00     ................
    508a:	ff ff 00 ff ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    509a:	ff 00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    50aa:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    50ba:	ff 00 00 00 ff 00 00 00 ff ff 00 00 ff 00 00 00     ................
    50ca:	ff ff 00 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    50da:	ff 00 00 ff ff 00 00 00 ff 00 00 ff ff 00 00 00     ................
    50ea:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    50fa:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    510a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    511a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    512a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    513a:	ff ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    514a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    515a:	ff ff ff ff 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    516a:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    517a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    518a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    519a:	ff 00 ff 00 ff 00 00 00 ff 00 00 ff 00 00 00 00     ................
    51aa:	00 ff ff 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    51ba:	ff ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    51ca:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    51da:	ff ff ff ff 00 00 00 00 ff 00 00 ff 00 00 00 00     ................
    51ea:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    51fa:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    520a:	ff 00 00 00 00 00 00 00 00 ff ff ff 00 00 00 00     ................
    521a:	00 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    522a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    523a:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    524a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    525a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    526a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    527a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    528a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    529a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    52aa:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52ba:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    52ca:	00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    52da:	00 ff 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    52ea:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    52fa:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    530a:	ff 00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    531a:	ff 00 ff 00 ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    532a:	00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    533a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    534a:	00 ff 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    535a:	00 ff 00 ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    536a:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    537a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    538a:	00 ff 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    539a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    53aa:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    53ba:	ff ff ff ff ff 00 00 00 00 00 00 00 ff 00 00 00     ................
    53ca:	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    53da:	00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    53ea:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    53fa:	00 ff ff ff 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    540a:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    541a:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    542a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    543a:	ff 00 00 00 ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    544a:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    545a:	ff ff ff ff ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    546a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    547a:	00 ff ff ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    548a:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    549a:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    54aa:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    54ba:	00 00 ff 00 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    54ca:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    552a:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    553a:	00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    554a:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    558a:	00 ff ff ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    559a:	00 ff ff ff ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    55aa:	00 ff ff ff 00 ff 00 00 00 00 00 00 00 00 00 00     ................
    55ba:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    55ca:	ff 00 ff ff 00 00 00 00 ff ff 00 00 ff 00 00 00     ................
    55da:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    55ea:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    560a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    561a:	ff 00 00 00 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    562a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    563a:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
    564a:	00 ff ff 00 ff 00 00 00 ff 00 00 ff ff 00 00 00     ................
    565a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    566a:	00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    568a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    569a:	ff ff ff ff ff 00 00 00 ff 00 00 00 00 00 00 00     ................
    56aa:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    56ba:	00 00 ff ff 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    56ca:	00 ff 00 00 00 00 00 00 ff ff ff ff ff 00 00 00     ................
    56da:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    56ea:	00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    570a:	00 ff ff ff 00 ff 00 00 ff 00 00 00 ff 00 00 00     ................
    571a:	ff 00 00 00 ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    572a:	00 00 00 00 ff 00 00 00 00 ff ff ff 00 00 00 00     ................
    573a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    574a:	ff 00 ff ff 00 00 00 00 ff ff 00 00 ff 00 00 00     ................
    575a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    576a:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    577a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    578a:	00 ff ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    579a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    57aa:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    57ba:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    57ca:	00 00 ff ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    57da:	00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    57ea:	00 00 00 ff 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    57fa:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    580a:	00 ff 00 00 ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    581a:	00 ff ff 00 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    582a:	00 ff 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
    583a:	00 ff ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    584a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    585a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    586a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    588a:	ff ff ff ff 00 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    589a:	ff 00 ff 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    58aa:	ff 00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    58ca:	ff ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    58da:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    58ea:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    590a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    591a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    592a:	00 ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    594a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    595a:	ff 00 00 00 ff 00 00 00 ff ff ff ff 00 00 00 00     ................
    596a:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
	...
    598a:	00 ff ff ff 00 00 00 00 ff 00 00 00 ff 00 00 00     ................
    599a:	ff 00 00 00 ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    59aa:	00 00 00 00 ff 00 00 00 00 00 00 00 ff 00 00 00     ................
	...
    59ca:	ff 00 ff ff 00 00 00 00 ff ff 00 00 ff 00 00 00     ................
    59da:	ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     ................
    59ea:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a0a:	00 ff ff ff ff 00 00 00 ff 00 00 00 00 00 00 00     ................
    5a1a:	00 ff ff ff 00 00 00 00 00 00 00 00 ff 00 00 00     ................
    5a2a:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5a3a:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    5a4a:	ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00 00     ................
    5a5a:	00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    5a6a:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5a8a:	ff 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00 00     ................
    5a9a:	ff 00 00 ff 00 00 00 00 ff 00 00 ff 00 00 00 00     ................
    5aaa:	00 ff ff 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5aca:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    5ada:	00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    5aea:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b0a:	ff 00 00 00 ff 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    5b1a:	ff 00 ff 00 ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    5b2a:	00 ff 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b4a:	ff 00 00 00 ff 00 00 00 00 ff 00 ff 00 00 00 00     ................
    5b5a:	00 00 ff 00 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    5b6a:	ff 00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b8a:	ff 00 00 00 ff 00 00 00 ff 00 00 00 ff 00 00 00     ................
    5b9a:	00 ff 00 ff 00 00 00 00 00 ff 00 ff 00 00 00 00     ................
    5baa:	00 00 ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    5bca:	ff ff ff ff ff 00 00 00 00 00 00 ff 00 00 00 00     ................
    5bda:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    5bea:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    5bfa:	00 00 00 ff ff 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c0a:	00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
    5c1a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c2a:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    5c3a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c4a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c5a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c6a:	00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5c7a:	ff ff 00 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5c8a:	00 00 ff 00 00 00 00 00 00 00 00 ff 00 00 00 00     ................
    5c9a:	00 00 ff 00 00 00 00 00 00 00 ff 00 00 00 00 00     ................
    5caa:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cba:	00 ff 00 00 00 00 00 00 ff 00 ff 00 ff 00 00 00     ................
    5cca:	00 00 00 ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...

00005d3a <map_blue_tank>:
    5d3a:	02 02 26 27 2d 2e                                   ..&'-.

00005d40 <map_green_tank>:
    5d40:	02 02 17 18 20 21                                   .... !

00005d46 <map_water>:
    5d46:	01 01 0d                                            ...

00005d49 <map_metal_bl>:
    5d49:	01 01 0c                                            ...

00005d4c <map_metal_tr>:
    5d4c:	01 01 0b                                            ...

00005d4f <map_metal_br>:
    5d4f:	01 01 0a                                            ...

00005d52 <map_metal_tl>:
    5d52:	01 01 09                                            ...

00005d55 <map_tile_exp_2>:
    5d55:	01 01 08                                            ...

00005d58 <map_tile_exp_1>:
    5d58:	01 01 07                                            ...

00005d5b <map_tile_exp_0>:
    5d5b:	01 01 06                                            ...

00005d5e <map_rocket_itm>:
    5d5e:	01 01 04                                            ...

00005d61 <map_explode_itm>:
    5d61:	01 01 03                                            ...

00005d64 <map_speed_itm>:
    5d64:	01 01 02                                            ...

00005d67 <map_metal>:
    5d67:	01 01 05                                            ...

00005d6a <map_brick>:
    5d6a:	01 01 01                                            ...

00005d6d <map_pause>:
    5d6d:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    5d7d:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    5d8d:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    5d9d:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00005dab <map_splash>:
    5dab:	15 04 0e 0f 10 0e 0f 11 0e 12 13 0e 14 15 00 00     ................
    5dbb:	00 0e 0f 11 0e 00 16 00 19 00 1a 00 1b 1a 1c 1d     ................
    5dcb:	1a 1e 00 00 00 00 1a 1f 00 1a 00 1b 00 22 00 1a     ............."..
    5ddb:	0f 23 1a 00 1b 1a 24 00 00 00 00 1a 25 00 1a 00     .#....$.....%...
    5deb:	1b 00 28 00 1a 00 1b 1a 00 1b 1a 29 2a 00 00 00     ..(........)*...
    5dfb:	1a 00 00 1a 2b 2c                                   ....+,

00005e01 <map_tile_none>:
    5e01:	01 01 00                                            ...

00005e04 <ad_silence>:
	...

00005e06 <ad_tracks>:
	...

00005e08 <ad_tank_explode>:
	...

00005e0a <ad_splash>:
	...

00005e0c <ad_rocket>:
	...

00005e0e <ad_navigate>:
    5e0e:	00 fc fe fe f3 ed f0 03 17 24 18 0f 09 01 f7 f2     .........$......
    5e1e:	f4 f9 00 fb f4 f0 f5 fc 02 01 fb f8 fb 02 09 0a     ................
    5e2e:	07 00 ff ff 01 00 00 02 03 03 00 ff 00 03 02 ff     ................
    5e3e:	fe ff ff fe fc fb fc 01 03 03 01 00 ff fe fe ff     ................
    5e4e:	00 01 00 00 00 00 01 02 02 02 00 fe fd fc fc fb     ................
    5e5e:	fa fd 00 00 fe fd fe 00 03 05 05 04 00 fe fc fd     ................
    5e6e:	fe 02 08 09 03 fa f7 f8 fd ff 00 01 01 fd fc fe     ................
    5e7e:	00 02 03 01 fd fb fc ff 01 05 04 02 01 01 00 00     ................
    5e8e:	ff ff 01 01 00 fe fe ff ff ff 01 01 ff fe fd fc     ................
    5e9e:	fc fe 00 01 02 02 00 ff ff fe fe ff 00 00 00 01     ................
    5eae:	ff fd fc fe 00 01 02 01 ff fe fe fd 00 02 05 04     ................
    5ebe:	02 00 fe fe fc fe ff 02 03 02 fe fb fa fb fd fe     ................
    5ece:	00 01 01 ff ff ff ff fd fd 00 01 0a 0a 07 00 f8     ................
    5ede:	f3 ef f6 fe 0b 10 11 0b 00 f6 ee ef f4 ff 08 0d     ................
    5eee:	0e 0a 03 f9 f4 f0 f4 fc 04 0c 0d 0d 06 fe f4 ef     ................
    5efe:	f1 f7 02 0a 0e 0d 06 fd f4 f0 f2 fa 03 0b 0d 0a     ................
    5f0e:	04 fd f8 f5 f6 fb 03 09 0a 08 02 fc f7 f5 f6 fa     ................
    5f1e:	00 05 07 07 05 02 fe fb f8 f9 fd 03 08 0a 07 00     ................
    5f2e:	f9 f4 f5 f9 01 09 0c 0a 03 fc f7 f5 f8 fb 00 05     ................
    5f3e:	09 08 04 00 fc fa f8 fa fd 05 0a 0b 06 ff f9 f6     ................
    5f4e:	f5 f7 fd 04 0a 0a 05 ff f9 f7 f7 fa fe 04 08 08     ................
    5f5e:	05 00 fc fa fa fc ff 02 05 06 04 00 fb f8 f8 fb     ................
    5f6e:	ff 03 06 07 04 ff fb f8 fa fd 01 03 04 03 01 00     ................
	...

00005f80 <ad_metal>:
    5f80:	00 00 ff 00 ff 00 fe 03 fc ed ed ed ed 11 0f 11     ................
    5f90:	11 11 11 11 10 10 0a 11 11 0d 01 08 fa 0b fb fc     ................
    5fa0:	f6 01 f9 00 f2 f5 fa 02 01 ff ff fb fe f9 03 f7     ................
    5fb0:	ff ff 07 fb f6 fb fa 04 ff 01 f7 07 f8 01 f2 fd     ................
    5fc0:	f8 0a fd fa f7 f4 05 ff 03 f4 06 fa 0a f5 03 fa     ................
    5fd0:	0c 03 08 fd 01 04 02 06 fd 02 fe 07 f9 fe f7 01     ................
    5fe0:	03 04 ff f9 f4 03 02 fa fa 00 02 05 fd 02 02 08     ................
    5ff0:	08 06 03 01 01 fd 01 f7 01 fc 03 f9 fe f3 ff fd     ................
    6000:	02 fe ff 00 ff 06 fa 04 fc 07 fc 02 f4 02 ff 08     ................
    6010:	05 04 03 04 05 fa 03 f3 ff f8 00 f7 fe fa 03 00     ................
    6020:	fe ff fe 07 01 05 fc 00 fe 0b ff 01 fd 02 04 ff     ................
    6030:	fe fc fe fb 01 f8 fe fd 06 01 02 f9 02 03 04 00     ................
    6040:	fd fe ff fe fc fe fc 03 04 02 ff 00 00 04 01 00     ................
    6050:	fe 00 ff 02 ff fd fe fe ff fa fd fa ff fc 00 fe     ................
    6060:	02 ff 03 01 01 03 03 04 03 02 fd 00 fe 00 fd ff     ................
    6070:	fd ff fd fc fb fd 00 ff 00 fd 00 00 03 01 02 00     ................
    6080:	00 00 fe fd fd 00 01 03 00 00 00 01 01 00 00 ff     ................
    6090:	01 ff ff fc 00 ff 00 fe fd fd fe ff fd 00 fe 03     ................
    60a0:	00 02 ff 01 02 02 01 fe ff fe 01 fe 00 fc 00 fe     ................
    60b0:	00 fe ff ff ff 02 fe 00 fd 02 ff 02 ff 01 01 02     ................
    60c0:	00 fe 00 fe 02 fe 00 fd 00 fd 00 fd ff ff 00 00     ................
    60d0:	fe ff fd 01 ff 01 fe 00 ff 00 ff fe 00 00 02 00     ................
    60e0:	01 fe 01 00 01 ff fe ff fe fe fd fe fd 01 ff 01     ................
    60f0:	ff 01 01 02 00 00 01 fe 00 fd ff fe 01 00 00 ff     ................
    6100:	ff 00 ff 00 fe 00 fe 00 fe fe fe 00 00 00 00 fe     ................
    6110:	01 ff 01 ff 00 ff 01 ff ff ff 00 01 00 00 ff 00     ................
    6120:	fe 00 fe ff fe ff ff ff ff ff 01 ff 00 ff 00 ff     ................
    6130:	00 ff ff ff 00 00 00 00 ff 01 00 01 ff 00 ff ff     ................
    6140:	ff fe fd fe fe fe ff ff 00 00 01 01 01 01 01 01     ................
    6150:	00 00 ff 00 ff ff fe ff ff ff 00 ff 00 00 00 ff     ................
    6160:	ff fe fe fe fe fe fe ff ff 00 00 01 00 01 01 01     ................
    6170:	00 00 00 00 00 ff ff ff ff fe ff fe ff ff ff ff     ................
    6180:	ff ff ff ff ff ff 00 00 00 00 ff 00 00 00 00 00     ................
    6190:	00 01 01 00 00 ff 00 00 ff ff fe ff ff ff 00 00     ................

000061a0 <ad_level_start>:
	...

000061a2 <ad_level_clear>:
	...

000061a4 <ad_item>:
    61a4:	ff ff ff ff 00 00 00 00 ff fe ff 00 01 01 00 ff     ................
    61b4:	fe fe ff 01 01 00 ff fe fe ff 00 01 01 ff fe fe     ................
    61c4:	ff 00 02 01 00 fe fd fe 00 02 02 00 fe fd fd 00     ................
    61d4:	02 02 01 fe fc fd 00 02 03 01 fe fc fd 00 03 03     ................
    61e4:	01 fe fb fc 00 03 04 01 fd fb fc 00 03 04 01 fd     ................
    61f4:	fb fc 01 04 04 00 fc fa fd 01 05 04 00 fb fa fd     ................
    6204:	02 06 04 ff fa f9 fe 04 07 04 fe f9 f9 ff 05 07     ................
    6214:	03 fc f8 fa 00 06 07 01 fa f8 fc 03 07 05 fe f8     ................
    6224:	f8 fe 06 08 03 fb f7 fa 02 08 07 00 f8 f7 fd 05     ................
    6234:	09 05 fc f6 f8 01 08 08 01 f8 f6 fc 06 0a 05 fb     ................
    6244:	f5 f8 02 09 08 00 f7 f6 fd 07 0a 04 fa f5 f9 03     ................
    6254:	0a 08 fe f5 f6 ff 09 0b 03 f8 f3 fa 06 0c 07 fb     ................
    6264:	f3 f6 02 0b 0a 00 f5 f3 fd 09 0d 04 f7 f2 f9 06     ................
    6274:	0d 08 fb f2 f5 02 0c 0b 00 f4 f3 fe 0a 0c 03 f7     ................
    6284:	f2 fa 07 0c 06 fa f3 f8 04 0c 08 fd f4 f6 01 0a     ................
    6294:	09 ff f7 f6 fe 07 08 02 f9 f7 fd 05 08 03 fb f8     ................
    62a4:	fc 03 06 03 fd fa fd 01 03 02 fe fc fe 01 02 00     ................
    62b4:	fe fe 00 02 01 fe fc fe 02 04 02 fd fa fc 03 06     ................
    62c4:	03 fc f8 fb 03 08 05 fd f7 fa 02 07 06 fe f8 f9     ................
    62d4:	00 06 05 ff fa fa ff 04 05 01 fc fb fe 03 04 01     ................
    62e4:	fd fc fe 01 02 01 ff fe fe 00 01 01 00 fe fd ff     ................
    62f4:	01 01 00 ff fe ff 00 00 00 00 ff ff ff ff 00 01     ................
    6304:	00 ff fe fe 00 01 01 ff fe fe 00 02 01 ff fd ff     ................
    6314:	01 02 00 fe fd ff 01 02 00 fe fd ff 01 02 00 fe     ................
    6324:	fe 00 01 01 ff fe ff 00 01 00 fe fe ff 01 01 ff     ................
    6334:	fe fe ff 01 01 00 fe fe ff 00 01 01 ff fd fe ff     ................
    6344:	01 02 00 fe fd ff 01 01 00 ff fe ff 00 00 00 00     ................
	...

00006355 <ad_cannonball>:
    6355:	ff ff fe fe fe fe fe ff ff ff ff 00 00 00 00 00     ................
    6365:	00 ff ff ff 00 00 00 00 00 00 00 01 01 01 01 01     ................
    6375:	01 00 00 00 ff ff ff ff ff 00 00 ff ff ff ff ff     ................
    6385:	ff ff ff ff ff ff 00 00 01 02 03 03 03 03 03 01     ................
    6395:	00 fe fd fc fa fa f9 f9 f9 fa fa fb fd fe ff 01     ................
    63a5:	02 03 03 03 03 02 01 00 ff fe fe fe fe fe fe ff     ................
    63b5:	ff 00 00 01 02 03 04 04 04 04 03 02 02 01 00 00     ................
    63c5:	ff ff ff ff ff fe fe fe fe fe fe fe ff ff 00 01     ................
    63d5:	02 03 03 04 03 03 02 01 00 fe fd fb f9 f8 f7 f6     ................
    63e5:	f6 f7 f8 fa fc fe 00 02 04 05 06 07 07 07 06 05     ................
    63f5:	03 01 ff fc fa f9 f8 f8 f9 fb fc fe 00 02 03 04     ................
    6405:	05 05 06 05 05 04 02 01 ff fe fe fd fd fd fe ff     ................
    6415:	ff 00 00 00 00 00 ff ff ff fe fe fe fd fd fd fe     ................
    6425:	ff 00 02 04 06 07 07 07 06 05 03 00 fd fb f8 f7     ................
    6435:	f5 f4 f4 f4 f5 f7 f9 fb fe 01 04 07 09 0a 0b 0a     ................
    6445:	08 06 04 01 ff fc fa f9 f8 f7 f7 f8 f9 fb fd ff     ................
    6455:	02 04 06 07 07 07 06 04 02 01 00 ff fe fd fd fd     ................
    6465:	fd fe fe ff 00 00 01 01 01 01 00 00 ff fe fe fe     ................
    6475:	fe fe ff 00 01 02 03 04 05 06 07 07 06 05 03 00     ................
    6485:	fd fa f8 f5 f4 f3 f2 f3 f4 f6 f8 fa fd 00 03 06     ................
    6495:	08 0a 0b 0b 0a 09 07 04 02 ff fc fa f9 f8 f7 f7     ................
    64a5:	f8 f9 fb fd 00 02 03 05 06 06 06 05 04 03 02 01     ................
    64b5:	00 ff fe fd fd fd fd fe ff 00 00 01 01 01 01 00     ................
    64c5:	00 ff ff fe fe ff ff ff 00 00 00 00 00 01 01 02     ................
    64d5:	02 03 03 03 02 01 00 fe fc fb fa f9 f9 f9 f9 fa     ................
    64e5:	fb fc fd fe ff 01 02 03 04 04 05 04 04 03 02 01     ................
    64f5:	00 fe fd fd fc fc fc fd fd fe ff 00 01 01 02 02     ................
    6505:	03 03 03 02 02 02 01 00 00 ff fe fe fd fe fe fe     ................
    6515:	ff 00 00 01 01 01 01 01 01 01 01 01 00 00 00 00     ................
    6525:	ff ff fe fe fe ff ff ff ff ff ff fe fe fe fe fe     ................
    6535:	ff 00 01 01 02 01 01 00 ff fe fe fd fd fd fd fd     ................
    6545:	fd fd fd fd fe fe ff 00 01 02 03 03 03 03 02 01     ................
    6555:	00 ff ff ff ff ff ff fe fe fe fe fe fe ff ff 00     ................
    6565:	01 02 02 02 02 01 01 00 00 00 00 00 00 00 00 00     ................
    6575:	00 ff ff ff ff ff ff 00 00 00 00 ff ff ff ff fe     ................
    6585:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    6595:	ff ff ff ff ff 00 00                                .......

0000659c <ad_brick_explode>:
    659c:	00 ff 00 ff 00 00 00 00 00 00 00 ff 00 ff ff ff     ................
    65ac:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    65bc:	ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff ff     ................
    65cc:	ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    65dc:	ff 00 ff 00 05 04 03 06 02 fc fe fb fa fb f7 f6     ................
    65ec:	f8 f8 fb ff 00 05 07 06 06 08 09 08 03 ff fe fd     ................
    65fc:	fe fc f8 fb fb fc 01 00 fd fd ff 01 03 04 02 ff     ................
    660c:	00 00 ff 01 02 fe fe 03 03 ff ff ff fe fe 00 00     ................
    661c:	fe ff fe fc 01 04 ff fc fd 01 00 fd ff fd ff 03     ................
    662c:	ff fe 01 ff fe 02 03 ff fd 00 ff ff 01 ff fe fc     ................
    663c:	fc fc fb 01 05 06 09 0b 08 04 01 ff fd fa f8 f8     ................
    664c:	f7 f8 f8 fa fe 01 ff ff 03 04 04 05 06 06 04 03     ................
    665c:	01 00 ff fe fd fd ff fe fc fd fd fc fc fd ff 02     ................
    666c:	08 06 04 03 fe fd fb fa fb f8 f8 fa f8 fc 01 03     ................
    667c:	05 06 08 08 07 05 03 04 04 01 fa f9 fc fb fa fc     ................
    668c:	fa fd fe fc 00 01 01 05 06 01 05 03 00 02 00 00     ................
    669c:	02 fd fd fe f7 fa ff fe ff ff fd 02 01 ff ff 01     ................
    66ac:	03 00 00 04 01 00 02 fe fd fd fc fa fc 05 03 fe     ................
    66bc:	01 00 fd 00 01 ff ff ff 01 01 01 ff fb fa fd fc     ................
    66cc:	fb fc ff 00 06 0c 0a 0b 0c 07 04 01 fd f9 f3 f2     ................
    66dc:	f6 f6 f6 f9 fb fc ff ff 00 05 07 07 07 08 07 04     ................
    66ec:	02 03 01 ff ff fc fa fc fb fa fc fe fe fd fe fd     ................
    66fc:	fd ff 01 01 03 05 03 01 02 03 01 00 02 01 ff ff     ................
    670c:	ff ff ff 00 01 0a 12 09 fe f5 f0 ed ee f1 f1 f0     ................
    671c:	f2 f7 fe 08 11 12 0f 0f 0e 0c 0b 08 05 02 fc fa     ................
    672c:	f2 ef f2 f4 01 00 f5 fb 04 ff 00 05 06 02 01 02     ................
    673c:	fe fd 02 00 04 0f 0a 02 ff ff 03 01 f9 f5 fa fc     ................
    674c:	f7 f6 fe 02 01 ff 03 01 fe ff 00 00 fe fc fd 01     ................
    675c:	02 ff 00 07 06 03 ff fd fe fe fa fa fe fd fa fc     ................
    676c:	00 00 fe fe ff 00 01 fe f8 fe 0f 11 0d 10 0e 09     ................
    677c:	05 ff fb f8 f3 f0 f2 f3 f4 f5 f9 fd fc fe 02 03     ................
    678c:	03 05 06 09 0b 08 04 03 04 03 fe fb fe ff fb fa     ................
    679c:	fc fc fb fb fc fa f8 fa fd 01 05 05 04 04 04 02     ................
    67ac:	02 05 06 03 03 03 01 fe fe ff 01 00 fe fb fb fb     ................
    67bc:	fb f9 fb fe fd fd fb 02 13 18 0d 00 f8 f5 f2 f2     ................
    67cc:	f9 f9 ef ee f9 01 07 0a 0b 0c 09 03 ff 01 07 08     ................
    67dc:	01 fb 00 ff f4 f9 01 01 f9 f3 02 0b ff fd 05 0c     ................
    67ec:	10 ff fb 02 fb f7 fb ff 02 03 fd fb 01 02 02 fe     ................
    67fc:	fd 04 fd fa 00 00 ff ff 01 02 fe fa f8 fe ff 00     ................
    680c:	fc fc 03 00 fd fe 05 05 fe fe 05 05 ff fa fd 05     ................
    681c:	03 01 01 00 01 f8 f7 fc fe 00 00 ff ff ff 01 01     ................
    682c:	00 03 03 fb f8 f4 f0 04 17 17 0f 09 0d 0b 06 02     ................
    683c:	fa f3 ee eb ee f2 f2 f5 f8 fa ff fe 00 04 06 0b     ................
    684c:	0c 0a 09 08 07 05 03 02 fe fb fc fe fc fb fd fc     ................
    685c:	fb fa f9 fb fd fe fe 01 07 06 01 02 05 06 03 03     ................
    686c:	03 00 fd fc fb ff ff ff 01 fe fd fe fe ff 00 fe     ................
    687c:	fe fc fa fc fd fd 07 19 18 0a ff f9 f5 f2 f1 f1     ................
    688c:	f1 ef f1 f8 fe 05 0b 08 06 0c 0d 05 03 0c 08 00     ................
    689c:	ff fc f8 f6 fa 02 00 00 02 04 01 fe 02 07 02 fb     ................
    68ac:	fa fe 00 f9 fb 02 00 fe 03 fe f7 02 03 02 07 04     ................
    68bc:	ff fe fe 02 fc 00 08 fd f8 f9 fb f6 f9 ff fe fc     ................
    68cc:	00 05 f8 ff 0a 00 07 04 02 fe ff 03 03 01 06 fe     ................
    68dc:	fb 06 02 fc ff fb f6 f6 fc ff fc 00 01 ff 02 07     ................
    68ec:	01 fc 04 05 fc 00 05 fd fe ff fe fd f9 f8 ee fc     ................
    68fc:	14 14 11 0f 0a 07 04 00 f8 f3 f5 f2 ef f0 f3 f4     ................
    690c:	f7 fc fe 01 04 08 09 0a 09 0b 0a 07 05 04 01 fe     ................
    691c:	fb fa ff ff fb fc fd fd fa fb fc fe fd fe fe 00     ................
    692c:	05 03 01 00 00 00 00 01 ff ff 03 00 fe 01 02 02     ................
    693c:	ff 00 01 fd fe ff fe fa fb ff 00 fe fb fe 01 00     ................
    694c:	ff 0b 20 17 0b ff ef eb f1 f0 f3 f2 f0 ed f0 fb     .. .............
    695c:	00 06 0f 0f 0f 0f 0d 10 0c 0b 08 00 f6 f2 ec f1     ................
    696c:	fe fd fc fc fc 06 02 fe 06 02 07 04 f9 01 02 fc     ................
    697c:	fe 00 08 0a fa fc fa fb 07 fb fb fe fd 01 fc fd     ................
    698c:	02 03 05 04 00 ff fd f8 03 00 f5 f9 fc f7 fa 01     ................
    699c:	07 0e 03 03 06 00 03 ff fd fe fc fd 00 fb fe fc     ................
    69ac:	f6 fd 02 05 04 ff 02 02 00 03 03 03 fc fa fe 01     ................
    69bc:	fc 00 06 03 ff fb fc fd 00 00 fe 00 02 fd fe fe     ................
    69cc:	fb fe f3 f6 0c 10 10 0e 08 0a 06 01 fe f8 f5 f3     ................
    69dc:	f2 f2 f1 f2 f7 fb 00 04 01 02 05 08 07 0b 11 0f     ................
    69ec:	05 ff 03 00 fa fa ff 03 ff fb fa f7 f6 f8 f7 fa     ................
    69fc:	ff 01 fd fa 01 06 05 02 05 07 05 00 01 05 06 03     ................
    6a0c:	01 00 fe fd fe 00 fe fa f9 f8 fa fc ff 02 02 fe     ................
    6a1c:	fc fd 00 02 02 04 04 02 00 04 03 07 17 17 0b 00     ................
    6a2c:	f5 ec e9 ea ea ec f0 f3 f6 f7 fb 06 10 11 13 14     ................
    6a3c:	13 11 0b 08 06 03 fc f9 f6 ef f1 fa fd fb fc fe     ................
    6a4c:	fa fa 02 04 03 08 08 03 01 01 01 04 05 fd fa fc     ................
    6a5c:	f9 fb ff 01 02 fd 01 02 fb 00 07 01 04 04 f9 fb     ................
    6a6c:	f9 f5 fb fa 04 fd fe 02 fe 05 06 0c 0d 06 06 00     ................
    6a7c:	fe fb f8 f8 f8 f9 fa f7 f4 f6 f8 fe 00 07 09 08     ................
    6a8c:	09 07 04 07 04 04 04 ff 01 00 fc fb fb fd fe fc     ................
    6a9c:	f9 fb f8 f9 fc fe 02 02 00 fe ff 02 02 01 03 03     ................
    6aac:	fc f6 fc 0b 0f 0d 0d 09 0a 09 02 fe f6 ee ee ef     ................
    6abc:	f2 f6 f9 fc f9 fb fc ff 06 08 0c 10 0e 0b 08 02     ................
    6acc:	01 02 03 00 fe fb f6 f7 f7 f8 fc fc fc f7 f8 f8     ................
    6adc:	fb ff 03 09 0b 06 04 06 06 02 00 00 fe fe fe ff     ................
    6aec:	01 00 ff fe fd fe fd fd fe fe ff 00 ff fd ff fe     ................
    6afc:	fb fd 00 02 02 03 06 05 04 03 01 ff 01 01 ff ff     ................
    6b0c:	01 fc f9 f9 f7 f7 fa ff 0d 18 0e 02 fc f1 ef f5     ................
    6b1c:	f4 f5 f9 fc fd ff 05 06 06 0c 0b 08 09 09 08 07     ................
    6b2c:	02 fe fb f4 f0 f1 f5 fc fe fc 02 01 fe 01 05 05     ................
    6b3c:	03 05 05 01 01 02 01 00 05 05 fd fa f9 f4 f7 00     ................
    6b4c:	00 ff fe 00 fe fc 04 06 01 05 05 00 01 ff fd ff     ................
    6b5c:	fc f9 fb fb fd fd fd 04 03 04 05 fe fe ff 01 01     ................
    6b6c:	fb ff 04 00 fd fe fa fc fd ff 03 02 06 03 ff 04     ................
    6b7c:	01 fe ff ff fd fd ff ff fd fe 01 fc fe 00 00 03     ................
    6b8c:	01 00 03 03 01 fe fd 00 fe fb fd fd ff fb f7 ff     ................
    6b9c:	05 06 09 0a 0d 0e 0a 03 fe f5 f0 f1 f6 f9 f9 fb     ................
    6bac:	fb fb fc fd ff 04 05 06 08 07 06 04 05 05 03 03     ................
    6bbc:	ff fd fa fd fb f9 fd fe fe fb f9 fa fa fa fe 04     ................
    6bcc:	07 05 01 01 02 ff 01 02 01 00 00 01 02 02 01 00     ................
    6bdc:	00 02 01 fe ff 00 01 fc fa fc fa fa fc fc fe 01     ................
    6bec:	03 06 07 06 05 04 00 fd fe 00 00 01 02 ff fc fb     ................
    6bfc:	fb f9 fa fd fd fe 00 02 02 00 01 00 00 03 03 02     ................
    6c0c:	02 01 00 ff ff 01 ff fe ff 05 0c 01 fa f9 f5 f3     ................
    6c1c:	f6 f8 fa ff ff ff 02 02 02 03 04 04 06 07 08 08     ................
    6c2c:	06 05 03 fd fc fc f6 f6 fa fa f8 fb fd fc fe 01     ................
    6c3c:	02 03 03 03 05 06 05 08 06 02 04 fe f9 fb fa fc     ................
    6c4c:	fd fd fe ff fb fa fd fc fc ff 01 01 03 02 01 05     ................
    6c5c:	02 fe 04 03 ff 04 03 00 02 01 fe fc fd fc fa fd     ................
    6c6c:	fd fc fe fb fc fb fa fe ff 00 05 05 05 06 05 06     ................
    6c7c:	04 04 02 01 00                                      .....

00006c81 <ad_banter>:
    6c81:	ff ff ff ff ff fe ff fe ff fe fe fe fe fe fe fe     ................
    6c91:	fe fe ff ff 00 00 01 02 03 02 03 02 03 02 03 01     ................
    6ca1:	02 00 00 ff ff fe fe fd fd fd fc fd fb fc fc fb     ................
    6cb1:	fb f9 fb fa fb fa fd fd ff 00 02 03 06 06 08 08     ................
    6cc1:	09 08 07 08 05 04 04 01 ff ff fc fb fa f8 f9 f7     ................
    6cd1:	f7 f8 f7 f5 f7 f6 f7 f8 f8 fa fb fd ff 00 03 05     ................
    6ce1:	06 09 0a 0c 0d 0e 0d 0e 0d 0c 09 08 04 01 fe fa     ................
    6cf1:	f7 f4 f1 f0 f1 ef f0 f2 f1 f3 f6 f6 f8 fa fc fe     ................
    6d01:	ff 02 03 05 08 08 0c 14 10 12 16 14 0f 0d 07 04     ................
    6d11:	fc f5 f6 f1 eb ef f2 ee f4 f8 f8 fa fd ff 00 fe     ................
    6d21:	fd 00 fb f9 f8 f8 f6 f7 f9 fe fe 06 11 13 15 1c     ................
    6d31:	1b 19 15 0e 0a 02 f5 f3 f2 e6 e8 eb eb ee f3 f7     ................
    6d41:	fb 01 02 07 08 05 05 03 fc f9 f7 f4 f3 f1 f6 f9     ................
    6d51:	fc 09 0e 11 1b 1c 1a 1b 12 0d 09 fb f3 f5 e9 e5     ................
    6d61:	ea e9 eb f2 f5 f9 03 03 08 0d 09 08 05 00 fa f5     ................
    6d71:	f2 ef ef f0 f3 f8 05 0e 0f 1b 21 1b 1f 19 0e 0c     ..........!.....
    6d81:	ff f4 f3 ea e0 e6 e5 e6 ed f4 f8 00 07 09 11 11     ................
    6d91:	0c 0c 06 fe f8 f3 ec ed ea ec f1 f7 07 0c 12 1e     ................
    6da1:	20 1d 1f 16 10 0b fd f5 f4 e7 e4 e7 e6 e7 f0 f5      ...............
    6db1:	fa 03 07 0d 11 0f 0b 0b 03 fa f7 ef eb eb e8 eb     ................
    6dc1:	f1 f8 09 0d 14 1f 22 1e 1f 18 10 0c fa f7 f2 e5     ......".........
    6dd1:	e4 e8 e5 e8 f2 f3 fc 03 07 0c 10 0c 0c 08 00 f9     ................
    6de1:	f6 ed e9 ea e6 eb f0 f5 08 0f 13 1e 28 20 22 1e     ............( ".
    6df1:	15 0f 01 f9 f6 e8 e3 e7 e4 e4 ee f1 f6 fd 04 0b     ................
    6e01:	0e 0d 0d 0b 03 fe f9 f3 ec ea e8 ea ec f0 fc 0c     ................
    6e11:	0f 17 24 27 20 24 1f 15 0d 00 fb f1 e6 e4 e5 e0     ..$' $..........
    6e21:	e7 eb ee f5 fe 04 08 0b 0c 0c 06 04 ff fa f3 f0     ................
    6e31:	ec ea ea ed f3 f6 07 0f 14 1f 27 23 27 21 1a 13     ..........'#'!..
    6e41:	06 fc f6 e7 e5 e3 de e2 e7 e8 f1 f7 ff 04 08 0c     ................
    6e51:	0e 08 08 04 fe f7 f4 f0 ed e9 ec ef f4 f7 06 11     ................
    6e61:	16 1d 28 28 24 24 1c 15 06 fd f8 ea e2 e4 e1 df     ..(($$..........
    6e71:	e6 ea ef f5 fb 03 06 09 0b 0a 06 05 fe f9 f5 f2     ................
    6e81:	ed ed ee f0 f4 f8 ff 05 0f 16 1c 20 25 23 1e 19     ........... %#..
    6e91:	13 0a 00 fb f3 ed ea e9 e8 ea ec f0 f2 f8 fb fe     ................
    6ea1:	ff 02 01 fe fe fc f9 f6 f6 f6 f4 f8 f9 fb ff 02     ................
    6eb1:	06 08 0b 0d 0f 13 14 12 14 15 10 0d 0c 07 00 01     ................
    6ec1:	fb f7 f4 f3 ef ef ee ee ea ee ef ef f2 f5 f7 f8     ................
    6ed1:	fd 00 01 01 06 04 04 05 06 05 03 04 04 01 02 04     ................
    6ee1:	03 04 08 07 09 0b 0b 0c 0a 0c 09 06 06 02 fe fa     ................
    6ef1:	f9 f5 f2 ef f1 ee ee f0 f1 f2 f7 f9 fb ff 01 03     ................
    6f01:	04 05 04 05 04 05 02 03 02 02 02 01 02 01 ff 01     ................
    6f11:	00 00 02 02 03 02 04 04 03 03 02 03 01 fe fe fc     ................
    6f21:	fb f9 f9 f7 f8 f8 f7 f9 fa fb fc fe 00 00 03 02     ................
    6f31:	03 05 03 04 02 02 ff ff fe fc fc fb fc fb fd fd     ................
    6f41:	ff 00 01 02 03 03 04 04 04 03 03 00 ff fe fc fb     ................
    6f51:	f9 fa f9 fa fa fd fd 00 01 03 04 05 04 06 05 05     ................
    6f61:	03 03 00 ff fc fc fc f9 fa fa fb fb fc fd fd ff     ................
    6f71:	ff 00 00 01 00 00 00 00 ff fe fd fe fd fe fd fe     ................
    6f81:	fe 00 00 01 01 02 01 03 01 01 00 00 fe fe 00 fe     ................
    6f91:	ff 00 00 ff 01 00 01 00 01 00 ff fd fd fb fb fa     ................
    6fa1:	fb fb fc fc fe 00 ff 02 02 03 03 02 02 00 00 fe     ................
    6fb1:	fe fd fc fc ff ff fe fe ff fe 00 00 00 ff 00 ff     ................
    6fc1:	00 ff 00 00 00 00 00 00 00 ff ff ff ff fe ff fe     ................
    6fd1:	ff fe ff fe ff fe ff 00 00 00 00 00 ff 00 ff 00     ................
    6fe1:	ff 00 00 00 ff 00 ff 00 ff 00 fe 00 fe ff fe ff     ................
    6ff1:	fe ff fe ff fe ff fe ff ff fe ff ff fe ff fe ff     ................
    7001:	fe ff ff fe ff 00 ff 00 ff 00 ff 00 ff 00 00 00     ................
    7011:	ff 00 ff 00 00 ff 00 ff 00 ff ff ff ff ff fe ff     ................
    7021:	fe ff fe ff fe fe fd fe fe fd fe fe fd fe fd fe     ................
    7031:	fe fd ff fe 00 00 00 00 01 01 02 02 03 02 02 03     ................
    7041:	02 03 03 03 02 03 02 02 01 01 ff ff fd fd fc fa     ................
    7051:	fa f8 f9 f8 f9 f9 f8 fa fb fa fc fd fd ff fe ff     ................
    7061:	00 00 01 ff 01 00 01 00 02 02 04 05 07 08 09 09     ................
    7071:	0c 0b 0a 09 09 06 01 00 fe fa f6 f4 f3 f0 f1 f1     ................
    7081:	f2 f2 f6 f8 fa fc fe ff ff 01 01 00 ff ff fe fb     ................
    7091:	fd fc fb fa fd fe 02 02 0a 10 10 15 1b 17 15 14     ................
    70a1:	11 0a 02 fe f8 f0 ec eb e8 e8 e9 ee ef f2 fa fd     ................
    70b1:	00 05 09 09 08 09 06 ff fd fb f7 f3 f3 f3 f1 f1     ................
    70c1:	f5 f5 fa fe 04 09 13 1a 1c 21 26 21 1d 1b 11 08     .........!&!....
    70d1:	00 f6 ed e5 e1 de dd de e4 e9 ef f4 ff 03 09 10     ................
    70e1:	11 12 12 0e 0a 02 fe f8 f2 ed ed ea eb ec f0 f2     ................
    70f1:	f8 fd 02 0b 19 1e 20 2b 2e 25 23 20 14 08 fd f5     ...... +.%# ....
    7101:	e6 dd da d5 d5 d7 de e4 ec f4 02 06 0e 16 1a 19     ................
    7111:	1a 15 0f 06 ff f9 ef eb e8 e6 e5 e6 e8 ee f3 f8     ................
    7121:	01 0b 1f 1f 26 33 32 29 2c 23 16 08 ff f2 e0 d8     ....&32),#......
    7131:	d3 cd cc d3 d7 df e6 f5 01 08 13 1e 1e 22 20 1c     ............." .
    7141:	13 0a 02 f8 ed e9 e3 e0 df e0 e2 e9 ee f6 ff 15     ................
    7151:	20 20 32 3c 32 31 32 24 15 08 fe eb db d6 cf c8       2<212$........
    7161:	ca cf d4 dc e6 f8 00 0c 1a 21 22 27 22 1d 14 0b     .........!"'"...
    7171:	02 f5 ef e8 e1 de dd dd e2 e7 ef f5 0c 1b 1b 2b     ...............+
    7181:	3c 34 32 36 2c 1b 10 06 f5 e2 da d3 c7 c8 cb cc     <426,...........
    7191:	d4 dd ee f6 04 15 1c 20 29 26 21 1a 13 09 fd f6     ....... )&!.....
    71a1:	ef e5 e1 e0 dc de e4 ea f2 0b 13 17 2a 38 2e 35     ............*8.5
    71b1:	35 2a 1d 14 08 f8 e7 e1 d5 cb cc cb cb d0 dc e9     5*..............
    71c1:	ee 00 12 13 1f 26 23 21 1b 18 0c 02 fe f5 e9 e7     .....&#!........
    71d1:	e4 df e0 e4 e9 f8 07 0d 18 2c 2b 2c 33 2e 24 1c     .........,+,3.$.
    71e1:	14 05 f7 ed e3 d5 d2 cf cc cd d3 de e3 f0 03 0a     ................
    71f1:	11 1d 20 1d 1e 1b 16 0c 05 01 f4 ef eb e7 e2 e6     .. .............
    7201:	e6 ef 00 04 0c 21 24 22 2e 2a 22 1d 17 0c ff f6     .....!$".*".....
    7211:	ef e3 da d9 d4 d1 d2 dd e0 e6 f8 02 05 12 18 17     ................
    7221:	19 18 17 0f 0b 07 00 f8 f6 f1 ec ea ee ea f7 06     ................
    7231:	03 0d 22 1b 1d 26 21 17 16 10 06 fb f6 ef e3 e1     .."..&!.........
    7241:	de db d6 db e4 e4 ed fc ff 06 10 13 13 13 16 13     ................
    7251:	0b 0a 07 ff fc fa f6 f0 f0 f3 ee fa 07 03 0d 1c     ................
    7261:	1b 18 20 1c 14 0f 0e 03 fb f5 ef e6 e0 e0 dc d9     .. .............
    7271:	de e5 e5 ef fb ff 03 0f 11 10 11 16 10 0b 0a 09     ................
    7281:	fe fd fd f6 f3 f6 f5 f2 f7 02 05 05 11 19 16 17     ................
    7291:	1d 17 0e 10 0b ff fa f5 ed e5 e3 e1 dd dd e4 e6     ................
    72a1:	ea f5 fb 00 09 0e 10 11 15 13 0e 0e 0a 04 ff ff     ................
    72b1:	f9 f6 f5 f6 f4 f5 fa fd ff 03 0b 0e 0e 16 17 15     ................
    72c1:	15 15 0d 06 02 f9 f3 ee e7 e4 e1 e2 e1 e5 e9 f0     ................
    72d1:	f4 fc 03 09 0d 12 12 12 11 10 0b 06 04 fe fa f7     ................
    72e1:	f4 f3 f2 f3 f6 f6 fb ff 04 07 0c 0f 10 12 11 10     ................
    72f1:	0d 09 04 00 fc f6 f1 ef ed ec ee ef f3 f7 fa 00     ................
    7301:	04 06 09 0b 0c 0a 0b 08 07 03 01 fc fa f6 f5 f3     ................
    7311:	f4 f4 f4 f7 f9 fd 00 02 06 0a 0a 0c 0c 0c 0a 07     ................
    7321:	06 01 fc fb f6 f4 f4 f2 f4 f5 f8 fa fe 01 05 06     ................
    7331:	0a 0b 0c 0b 0a 09 05 03 01 fc f9 f7 f4 f2 f1 f3     ................
    7341:	f3 f3 f7 fa fb ff 01 04 06 07 09 08 08 06 05 01     ................
    7351:	ff fc fb f8 f8 f7 f8 f9 fb fc ff 02 04 06 07 08     ................
    7361:	0a 09 09 07 05 03 02 fd fc fa f8 f6 f8 f5 f6 f9     ................
    7371:	f8 fb fd fe 02 03 04 05 06 04 05 04 01 00 fd fc     ................
    7381:	fb f9 f9 f8 fa fa fc fd 00 02 03 05 06 06 06 07     ................
    7391:	05 05 03 00 ff fd fc f9 fa f8 f8 f9 f9 fb fc fc     ................
    73a1:	ff ff 02 02 04 04 04 04 03 03 01 00 fe fd fc fa     ................
    73b1:	fb fa fa fb fc fc fe ff 00 01 02 04 04 05 05 03     ................
    73c1:	01 02 ff ff fd fd fa fb fa fa fa fc fd d0 00 00     ................
	...

000073d2 <__ctors_end>:
    73d2:	11 24       	eor	r1, r1
    73d4:	1f be       	out	0x3f, r1	; 63
    73d6:	cf ef       	ldi	r28, 0xFF	; 255
    73d8:	d0 e1       	ldi	r29, 0x10	; 16
    73da:	de bf       	out	0x3e, r29	; 62
    73dc:	cd bf       	out	0x3d, r28	; 61

000073de <__do_copy_data>:
    73de:	11 e0       	ldi	r17, 0x01	; 1
    73e0:	a0 e0       	ldi	r26, 0x00	; 0
    73e2:	b1 e0       	ldi	r27, 0x01	; 1
    73e4:	ec e6       	ldi	r30, 0x6C	; 108
    73e6:	ff ec       	ldi	r31, 0xCF	; 207
    73e8:	02 c0       	rjmp	.+4      	; 0x73ee <__do_copy_data+0x10>
    73ea:	05 90       	lpm	r0, Z+
    73ec:	0d 92       	st	X+, r0
    73ee:	a6 30       	cpi	r26, 0x06	; 6
    73f0:	b1 07       	cpc	r27, r17
    73f2:	d9 f7       	brne	.-10     	; 0x73ea <__do_copy_data+0xc>

000073f4 <__do_clear_bss>:
    73f4:	1f e0       	ldi	r17, 0x0F	; 15
    73f6:	a6 e0       	ldi	r26, 0x06	; 6
    73f8:	b1 e0       	ldi	r27, 0x01	; 1
    73fa:	01 c0       	rjmp	.+2      	; 0x73fe <.do_clear_bss_start>

000073fc <.do_clear_bss_loop>:
    73fc:	1d 92       	st	X+, r1

000073fe <.do_clear_bss_start>:
    73fe:	a7 3f       	cpi	r26, 0xF7	; 247
    7400:	b1 07       	cpc	r27, r17
    7402:	e1 f7       	brne	.-8      	; 0x73fc <.do_clear_bss_loop>

00007404 <wdt_init>:

void wdt_init(void)
{

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
    7404:	0e 94 36 3e 	call	0x7c6c	; 0x7c6c <wdt_randomize>
#endif

    MCUSR = 0;
    7408:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    740a:	88 e1       	ldi	r24, 0x18	; 24
    740c:	0f b6       	in	r0, 0x3f	; 63
    740e:	f8 94       	cli
    7410:	80 93 60 00 	sts	0x0060, r24
    7414:	10 92 60 00 	sts	0x0060, r1
    7418:	0f be       	out	0x3f, r0	; 63

0000741a <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    741a:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <isEepromFormatted>
    741e:	81 11       	cpse	r24, r1
    7420:	02 c0       	rjmp	.+4      	; 0x7426 <Initialize+0xc>
    7422:	0e 94 c8 3e 	call	0x7d90	; 0x7d90 <FormatEeprom>

	cli();
    7426:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    7428:	81 e0       	ldi	r24, 0x01	; 1
    742a:	80 93 16 0b 	sts	0x0B16, r24
		tr4_barrel_hi=1;		
    742e:	80 93 17 0b 	sts	0x0B17, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    7432:	80 93 15 0b 	sts	0x0B15, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    7436:	10 92 02 0b 	sts	0x0B02, r1
    743a:	10 92 08 0b 	sts	0x0B08, r1
    743e:	10 92 0e 0b 	sts	0x0B0E, r1
    7442:	10 92 14 0b 	sts	0x0B14, r1
    7446:	10 92 1a 0b 	sts	0x0B1A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    744a:	10 92 e6 0a 	sts	0x0AE6, r1
	sync_flags=0;
    744e:	10 92 e8 0a 	sts	0x0AE8, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    7452:	92 e1       	ldi	r25, 0x12	; 18
    7454:	90 93 e7 0a 	sts	0x0AE7, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    7458:	90 ee       	ldi	r25, 0xE0	; 224
    745a:	90 93 f0 0a 	sts	0x0AF0, r25
	render_lines_count=FRAME_LINES;
    745e:	90 93 ee 0a 	sts	0x0AEE, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    7462:	94 e1       	ldi	r25, 0x14	; 20
    7464:	90 93 ef 0a 	sts	0x0AEF, r25
	first_render_line=FIRST_RENDER_LINE;
    7468:	90 93 ed 0a 	sts	0x0AED, r25

	joypad1_status_hi=0;
    746c:	10 92 f4 0a 	sts	0x0AF4, r1
    7470:	10 92 f3 0a 	sts	0x0AF3, r1
	joypad2_status_hi=0;
    7474:	10 92 f8 0a 	sts	0x0AF8, r1
    7478:	10 92 f7 0a 	sts	0x0AF7, r1
	sound_enabled=1;
    747c:	80 93 01 0b 	sts	0x0B01, r24

	InitializeVideoMode();
    7480:	0e 94 60 4b 	call	0x96c0	; 0x96c0 <InitializeVideoMode>
    7484:	82 e8       	ldi	r24, 0x82	; 130
    7486:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    7488:	fc 01       	movw	r30, r24
    748a:	25 91       	lpm	r18, Z+
    748c:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    748e:	f9 01       	movw	r30, r18
    7490:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    7492:	30 83       	st	Z, r19
    7494:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    7496:	20 e0       	ldi	r18, 0x00	; 0
    7498:	80 3b       	cpi	r24, 0xB0	; 176
    749a:	92 07       	cpc	r25, r18
    749c:	a9 f7       	brne	.-22     	; 0x7488 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    749e:	78 94       	sei
	
	DisplayLogo();
    74a0:	0e 94 5f 4b 	call	0x96be	; 0x96be <DisplayLogo>
    74a4:	0e 94 c0 64 	call	0xc980	; 0xc980 <main>
    74a8:	0c 94 b4 67 	jmp	0xcf68	; 0xcf68 <_exit>

000074ac <__bad_interrupt>:
    74ac:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000074b0 <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    74b0:	0c e0       	ldi	r16, 0x0C	; 12
    74b2:	0a 95       	dec	r16
    74b4:	f1 f7       	brne	.-4      	; 0x74b2 <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    74b6:	e0 e9       	ldi	r30, 0x90	; 144
		ldi ZH,hi8(ram_tiles_restore);
    74b8:	fa e0       	ldi	r31, 0x0A	; 10

		ldi YL,lo8(vram)
    74ba:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    74bc:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    74be:	20 91 bd 0b 	lds	r18, 0x0BBD


		clr r16
    74c2:	00 27       	eor	r16, r16

000074c4 <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    74c4:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    74c6:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    74c8:	ac 0f       	add	r26, r28
		adc XH,YH
    74ca:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    74cc:	1c 91       	ld	r17, X
		std Z+2,r17
    74ce:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    74d0:	02 17       	cp	r16, r18
		brsh noov
    74d2:	08 f4       	brcc	.+2      	; 0x74d6 <noov>
		mov r17,r16
    74d4:	10 2f       	mov	r17, r16

000074d6 <noov>:
	noov:
		st X,r17
    74d6:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    74d8:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    74da:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    74dc:	08 31       	cpi	r16, 0x18	; 24
		brlo upd_loop ;23
    74de:	90 f3       	brcs	.-28     	; 0x74c4 <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    74e0:	05 e2       	ldi	r16, 0x25	; 37

000074e2 <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    74e2:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    74e4:	1a 95       	dec	r17
		brne .-4
    74e6:	f1 f7       	brne	.-4      	; 0x74e4 <wait_loop+0x2>

		dec r16
    74e8:	0a 95       	dec	r16
		brne wait_loop
    74ea:	d9 f7       	brne	.-10     	; 0x74e2 <wait_loop>

		lds r2,overlay_tile_table
    74ec:	20 90 e4 0a 	lds	r2, 0x0AE4
		lds r3,overlay_tile_table+1
    74f0:	30 90 e5 0a 	lds	r3, 0x0AE5
		lds r16,tile_table_lo 
    74f4:	00 91 e0 0a 	lds	r16, 0x0AE0
		lds r17,tile_table_hi
    74f8:	10 91 e1 0a 	lds	r17, 0x0AE1
		movw r12,r16
    74fc:	68 01       	movw	r12, r16
		movw r6,r16
    74fe:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    7500:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    7502:	c0 e2       	ldi	r28, 0x20	; 32
		ldi YH,hi8(vram)
    7504:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    7506:	4e 01       	movw	r8, r28
		clr r0
    7508:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    750a:	30 91 e3 0a 	lds	r19, 0x0AE3
		cpi r19,0
    750e:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    7510:	09 f0       	breq	.+2      	; 0x7514 <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    7512:	c8 e6       	ldi	r28, 0x68	; 104
		
		breq .+2
    7514:	09 f0       	breq	.+2      	; 0x7518 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    7516:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    7518:	09 f0       	breq	.+2      	; 0x751c <wait_loop+0x3a>
		mov r24,r19
    751a:	83 2f       	mov	r24, r19

		breq .+2
    751c:	09 f0       	breq	.+2      	; 0x7520 <wait_loop+0x3e>
		movw r12,r2
    751e:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    7520:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    7522:	a0 2e       	mov	r10, r16
		clr r22
    7524:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    7526:	78 e0       	ldi	r23, 0x08	; 8

00007528 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    7528:	7d d2       	rcall	.+1274   	; 0x7a24 <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    752a:	3c e0       	ldi	r19, 0x0C	; 12
    752c:	3a 95       	dec	r19
    752e:	f1 f7       	brne	.-4      	; 0x752c <next_tile_line+0x4>
    7530:	00 00       	nop
    7532:	00 00       	nop

		;***draw line***
		call render_tile_line
    7534:	0e 94 cb 3a 	call	0x7596	; 0x7596 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    7538:	3f e0       	ldi	r19, 0x0F	; 15
    753a:	3a 95       	dec	r19
    753c:	f1 f7       	brne	.-4      	; 0x753a <next_tile_line+0x12>
    753e:	00 00       	nop
    7540:	00 00       	nop

		dec r10
    7542:	aa 94       	dec	r10
		breq frame_end
    7544:	a9 f0       	breq	.+42     	; 0x7570 <frame_end>
	
		inc r22
    7546:	63 95       	inc	r22
		lpm ;3 nop
    7548:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    754a:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    754c:	31 f0       	breq	.+12     	; 0x755a <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    754e:	33 e0       	ldi	r19, 0x03	; 3
    7550:	3a 95       	dec	r19
    7552:	f1 f7       	brne	.-4      	; 0x7550 <next_tile_line+0x28>
    7554:	00 00       	nop
    7556:	00 00       	nop
		
		rjmp next_tile_line	
    7558:	e7 cf       	rjmp	.-50     	; 0x7528 <next_tile_line>

0000755a <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    755a:	66 27       	eor	r22, r22

		clr r0
    755c:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    755e:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    7560:	c3 0f       	add	r28, r19
		adc YH,r0
    7562:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    7564:	8a 95       	dec	r24
		brne .+2
    7566:	09 f4       	brne	.+2      	; 0x756a <next_tile_row+0x10>
		movw YL,r8	;main vram
    7568:	e4 01       	movw	r28, r8
		brne .+2
    756a:	09 f4       	brne	.+2      	; 0x756e <next_tile_row+0x14>
		movw r12,r6	;main tile table
    756c:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    756e:	dc cf       	rjmp	.-72     	; 0x7528 <next_tile_line>

00007570 <frame_end>:

	frame_end:

		WAIT r19,18
    7570:	36 e0       	ldi	r19, 0x06	; 6
    7572:	3a 95       	dec	r19
    7574:	f1 f7       	brne	.-4      	; 0x7572 <frame_end+0x2>

		rcall hsync_pulse ;145
    7576:	56 d2       	rcall	.+1196   	; 0x7a24 <hsync_pulse>
	
		clr r1
    7578:	11 24       	eor	r1, r1
		call RestoreBackground
    757a:	0e 94 00 4a 	call	0x9400	; 0x9400 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    757e:	e0 91 e8 0a 	lds	r30, 0x0AE8
		ldi r20,SYNC_FLAG_FIELD
    7582:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    7584:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    7586:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    7588:	e0 93 e8 0a 	sts	0x0AE8, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    758c:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    758e:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    7592:	11 24       	eor	r1, r1


		ret
    7594:	08 95       	ret

00007596 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    7596:	de 01       	movw	r26, r28

		mul r22,r23
    7598:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    759a:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    759c:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    759e:	16 40       	sbci	r17, 0x06	; 6

		add r16,r0
    75a0:	00 0d       	add	r16, r0
		adc r17,r1
    75a2:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    75a4:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    75a6:	00 e9       	ldi	r16, 0x90	; 144
		ldi r17,hi8(ram_tiles)
    75a8:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    75aa:	00 0d       	add	r16, r0
		adc r17,r1
    75ac:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    75ae:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    75b0:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    75b2:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    75b4:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    75b6:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    75b8:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    75ba:	28 31       	cpi	r18, 0x18	; 24
		brcc .+2
    75bc:	08 f4       	brcc	.+2      	; 0x75c0 <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    75be:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    75c0:	04 0e       	add	r0, r20
	    adc r1,r21
    75c2:	15 1e       	adc	r1, r21

		movw ZL,r0
    75c4:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    75c6:	28 31       	cpi	r18, 0x18	; 24
		brcs ramloop
    75c8:	f0 f0       	brcs	.+60     	; 0x7606 <ramloop>

000075ca <romloop>:
	

	romloop:
	    lpm r16,Z+
    75ca:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    75cc:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    75ce:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    75d0:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    75d2:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    75d4:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    75d6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    75d8:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    75da:	28 31       	cpi	r18, 0x18	; 24
		nop
    75dc:	00 00       	nop

	    lpm r16,Z+
    75de:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    75e0:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    75e2:	08 f4       	brcc	.+2      	; 0x75e6 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    75e4:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    75e6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    75e8:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    75ea:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    75ec:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    75ee:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    75f0:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    75f2:	28 31       	cpi	r18, 0x18	; 24
		dec r17			;decrement tiles to draw on line
    75f4:	1a 95       	dec	r17
   
	    lpm r16,Z+
    75f6:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    75f8:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    75fa:	05 91       	lpm	r16, Z+

		breq end	
    75fc:	31 f1       	breq	.+76     	; 0x764a <end>
	    movw ZL,r0   	;copy next tile adress
    75fe:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7600:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    7602:	18 f7       	brcc	.-58     	; 0x75ca <romloop>
	
		rjmp .
    7604:	00 c0       	rjmp	.+0      	; 0x7606 <ramloop>

00007606 <ramloop>:

	ramloop:

	    ld r16,Z+
    7606:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    7608:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    760a:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    760c:	01 91       	ld	r16, Z+
		nop   
    760e:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    7610:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    7612:	23 9f       	mul	r18, r19


	    ld r16,Z+
    7614:	01 91       	ld	r16, Z+
		nop
    7616:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    7618:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    761a:	28 31       	cpi	r18, 0x18	; 24
   		rjmp .
    761c:	00 c0       	rjmp	.+0      	; 0x761e <ramloop+0x18>

	    ld r16,Z+
    761e:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    7620:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    7622:	08 f0       	brcs	.+2      	; 0x7626 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    7624:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    7626:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    7628:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    762a:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    762c:	15 1e       	adc	r1, r21
		rjmp .
    762e:	00 c0       	rjmp	.+0      	; 0x7630 <ramloop+0x2a>
    
		ld r16,Z+		
    7630:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    7632:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    7634:	28 31       	cpi	r18, 0x18	; 24
		rjmp .  
    7636:	00 c0       	rjmp	.+0      	; 0x7638 <ramloop+0x32>

	    ld r16,Z+	
    7638:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    763a:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    763c:	01 91       	ld	r16, Z+

	    dec r17
    763e:	1a 95       	dec	r17
	    breq end
    7640:	21 f0       	breq	.+8      	; 0x764a <end>
	
		movw ZL,r0
    7642:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    7644:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    7646:	08 f6       	brcc	.-126    	; 0x75ca <romloop>
		rjmp ramloop
    7648:	de cf       	rjmp	.-68     	; 0x7606 <ramloop>

0000764a <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    764a:	08 b9       	out	0x08, r16	; 8
		clr r16	
    764c:	00 27       	eor	r16, r16
		lpm	
    764e:	c8 95       	lpm
		nop
    7650:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    7652:	08 b9       	out	0x08, r16	; 8

		ret
    7654:	08 95       	ret

00007656 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    7656:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    7658:	e0 91 e0 0a 	lds	r30, 0x0AE0
	lds ZH,tile_table_hi
    765c:	f0 91 e1 0a 	lds	r31, 0x0AE1
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    7660:	88 51       	subi	r24, 0x18	; 24
	mul r24,r18
    7662:	82 9f       	mul	r24, r18
	add ZL,r0
    7664:	e0 0d       	add	r30, r0
	adc ZH,r1
    7666:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    7668:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    766a:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    766c:	62 9f       	mul	r22, r18
	add XL,r0
    766e:	a0 0d       	add	r26, r0
	adc XH,r1
    7670:	b1 1d       	adc	r27, r1

	clr r0
    7672:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    7674:	05 90       	lpm	r0, Z+
    7676:	0d 92       	st	X+, r0
    7678:	05 90       	lpm	r0, Z+
    767a:	0d 92       	st	X+, r0
    767c:	05 90       	lpm	r0, Z+
    767e:	0d 92       	st	X+, r0
    7680:	05 90       	lpm	r0, Z+
    7682:	0d 92       	st	X+, r0
    7684:	05 90       	lpm	r0, Z+
    7686:	0d 92       	st	X+, r0
    7688:	05 90       	lpm	r0, Z+
    768a:	0d 92       	st	X+, r0
    768c:	05 90       	lpm	r0, Z+
    768e:	0d 92       	st	X+, r0
    7690:	05 90       	lpm	r0, Z+
    7692:	0d 92       	st	X+, r0
    7694:	05 90       	lpm	r0, Z+
    7696:	0d 92       	st	X+, r0
    7698:	05 90       	lpm	r0, Z+
    769a:	0d 92       	st	X+, r0
    769c:	05 90       	lpm	r0, Z+
    769e:	0d 92       	st	X+, r0
    76a0:	05 90       	lpm	r0, Z+
    76a2:	0d 92       	st	X+, r0
    76a4:	05 90       	lpm	r0, Z+
    76a6:	0d 92       	st	X+, r0
    76a8:	05 90       	lpm	r0, Z+
    76aa:	0d 92       	st	X+, r0
    76ac:	05 90       	lpm	r0, Z+
    76ae:	0d 92       	st	X+, r0
    76b0:	05 90       	lpm	r0, Z+
    76b2:	0d 92       	st	X+, r0
    76b4:	05 90       	lpm	r0, Z+
    76b6:	0d 92       	st	X+, r0
    76b8:	05 90       	lpm	r0, Z+
    76ba:	0d 92       	st	X+, r0
    76bc:	05 90       	lpm	r0, Z+
    76be:	0d 92       	st	X+, r0
    76c0:	05 90       	lpm	r0, Z+
    76c2:	0d 92       	st	X+, r0
    76c4:	05 90       	lpm	r0, Z+
    76c6:	0d 92       	st	X+, r0
    76c8:	05 90       	lpm	r0, Z+
    76ca:	0d 92       	st	X+, r0
    76cc:	05 90       	lpm	r0, Z+
    76ce:	0d 92       	st	X+, r0
    76d0:	05 90       	lpm	r0, Z+
    76d2:	0d 92       	st	X+, r0
    76d4:	05 90       	lpm	r0, Z+
    76d6:	0d 92       	st	X+, r0
    76d8:	05 90       	lpm	r0, Z+
    76da:	0d 92       	st	X+, r0
    76dc:	05 90       	lpm	r0, Z+
    76de:	0d 92       	st	X+, r0
    76e0:	05 90       	lpm	r0, Z+
    76e2:	0d 92       	st	X+, r0
    76e4:	05 90       	lpm	r0, Z+
    76e6:	0d 92       	st	X+, r0
    76e8:	05 90       	lpm	r0, Z+
    76ea:	0d 92       	st	X+, r0
    76ec:	05 90       	lpm	r0, Z+
    76ee:	0d 92       	st	X+, r0
    76f0:	05 90       	lpm	r0, Z+
    76f2:	0d 92       	st	X+, r0
    76f4:	05 90       	lpm	r0, Z+
    76f6:	0d 92       	st	X+, r0
    76f8:	05 90       	lpm	r0, Z+
    76fa:	0d 92       	st	X+, r0
    76fc:	05 90       	lpm	r0, Z+
    76fe:	0d 92       	st	X+, r0
    7700:	05 90       	lpm	r0, Z+
    7702:	0d 92       	st	X+, r0
    7704:	05 90       	lpm	r0, Z+
    7706:	0d 92       	st	X+, r0
    7708:	05 90       	lpm	r0, Z+
    770a:	0d 92       	st	X+, r0
    770c:	05 90       	lpm	r0, Z+
    770e:	0d 92       	st	X+, r0
    7710:	05 90       	lpm	r0, Z+
    7712:	0d 92       	st	X+, r0
    7714:	05 90       	lpm	r0, Z+
    7716:	0d 92       	st	X+, r0
    7718:	05 90       	lpm	r0, Z+
    771a:	0d 92       	st	X+, r0
    771c:	05 90       	lpm	r0, Z+
    771e:	0d 92       	st	X+, r0
    7720:	05 90       	lpm	r0, Z+
    7722:	0d 92       	st	X+, r0
    7724:	05 90       	lpm	r0, Z+
    7726:	0d 92       	st	X+, r0
    7728:	05 90       	lpm	r0, Z+
    772a:	0d 92       	st	X+, r0
    772c:	05 90       	lpm	r0, Z+
    772e:	0d 92       	st	X+, r0
    7730:	05 90       	lpm	r0, Z+
    7732:	0d 92       	st	X+, r0
    7734:	05 90       	lpm	r0, Z+
    7736:	0d 92       	st	X+, r0
    7738:	05 90       	lpm	r0, Z+
    773a:	0d 92       	st	X+, r0
    773c:	05 90       	lpm	r0, Z+
    773e:	0d 92       	st	X+, r0
    7740:	05 90       	lpm	r0, Z+
    7742:	0d 92       	st	X+, r0
    7744:	05 90       	lpm	r0, Z+
    7746:	0d 92       	st	X+, r0
    7748:	05 90       	lpm	r0, Z+
    774a:	0d 92       	st	X+, r0
    774c:	05 90       	lpm	r0, Z+
    774e:	0d 92       	st	X+, r0
    7750:	05 90       	lpm	r0, Z+
    7752:	0d 92       	st	X+, r0
    7754:	05 90       	lpm	r0, Z+
    7756:	0d 92       	st	X+, r0
    7758:	05 90       	lpm	r0, Z+
    775a:	0d 92       	st	X+, r0
    775c:	05 90       	lpm	r0, Z+
    775e:	0d 92       	st	X+, r0
    7760:	05 90       	lpm	r0, Z+
    7762:	0d 92       	st	X+, r0
    7764:	05 90       	lpm	r0, Z+
    7766:	0d 92       	st	X+, r0
    7768:	05 90       	lpm	r0, Z+
    776a:	0d 92       	st	X+, r0
    776c:	05 90       	lpm	r0, Z+
    776e:	0d 92       	st	X+, r0
    7770:	05 90       	lpm	r0, Z+
    7772:	0d 92       	st	X+, r0


	clr r1
    7774:	11 24       	eor	r1, r1
	ret
    7776:	08 95       	ret

00007778 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    7778:	0f 93       	push	r16
	push r17
    777a:	1f 93       	push	r17
	push YL
    777c:	cf 93       	push	r28
	push YH
    777e:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    7780:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    7782:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    7784:	e8 e6       	ldi	r30, 0x68	; 104
	ldi ZH,hi8(sprites)	
    7786:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    7788:	e0 0d       	add	r30, r0
	adc ZH,r1
    778a:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    778c:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    778e:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    7790:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    7792:	8e 9f       	mul	r24, r30
	movw r26,r0
    7794:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    7796:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    7798:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    779a:	c8 ed       	ldi	r28, 0xD8	; 216
	ldi YH,hi8(sprites_tile_banks)	
    779c:	da e0       	ldi	r29, 0x0A	; 10
	clr r0
    779e:	00 24       	eor	r0, r0
	add YL,r1
    77a0:	c1 0d       	add	r28, r1
	adc YH,r0		
    77a2:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    77a4:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    77a6:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    77a8:	ea 0f       	add	r30, r26
	adc ZH,r27
    77aa:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    77ac:	a0 e9       	ldi	r26, 0x90	; 144
	ldi XH,hi8(ram_tiles)
    77ae:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    77b0:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    77b2:	69 9f       	mul	r22, r25
	add XL,r0
    77b4:	a0 0d       	add	r26, r0
	adc XH,r1
    77b6:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    77b8:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    77ba:	dd 27       	eor	r29, r29

	cpi r20,0	
    77bc:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    77be:	51 f4       	brne	.+20     	; 0x77d4 <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    77c0:	a2 0f       	add	r26, r18
	adc XH,r1
    77c2:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    77c4:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    77c6:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    77c8:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    77ca:	11 c0       	rjmp	.+34     	; 0x77ee <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    77cc:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    77ce:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    77d0:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    77d2:	0d c0       	rjmp	.+26     	; 0x77ee <x_check_end>

000077d4 <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    77d4:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    77d6:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    77d8:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    77da:	04 c0       	rjmp	.+8      	; 0x77e4 <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    77dc:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    77de:	e8 0f       	add	r30, r24
	adc ZH,r1	
    77e0:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    77e2:	05 c0       	rjmp	.+10     	; 0x77ee <x_check_end>

000077e4 <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    77e4:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    77e6:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    77e8:	e2 0f       	add	r30, r18
	adc ZH,r1
    77ea:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    77ec:	31 97       	sbiw	r30, 0x01	; 1

000077ee <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    77ee:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    77f0:	41 f4       	brne	.+16     	; 0x7802 <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    77f2:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    77f4:	93 9f       	mul	r25, r19
	add XL,r0
    77f6:	a0 0d       	add	r26, r0
	adc XH,r1
    77f8:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    77fa:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    77fc:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    77fe:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    7800:	0a c0       	rjmp	.+20     	; 0x7816 <y_check_end>

00007802 <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    7802:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    7804:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    7806:	63 2f       	mov	r22, r19
	dec r22
    7808:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    780a:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    780c:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    780e:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    7810:	56 9f       	mul	r21, r22
	add ZL,r0
    7812:	e0 0d       	add	r30, r0
	adc ZH,r1	
    7814:	f1 1d       	adc	r31, r1

00007816 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    7816:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    7818:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    781a:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    781c:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    781e:	00 ff       	sbrs	r16, 0
	clr r23
    7820:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    7822:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    7824:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    7826:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    7828:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    782a:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    782c:	59 1b       	sub	r21, r25

0000782e <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    782e:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    7830:	48 1b       	sub	r20, r24

00007832 <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    7832:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    7834:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    7836:	2c 93       	st	X, r18
	adiw XL,1
    7838:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    783a:	e6 0f       	add	r30, r22
	adc ZH,r23
    783c:	f7 1f       	adc	r31, r23
	dec r20
    783e:	4a 95       	dec	r20
	brne x_loop
    7840:	c1 f7       	brne	.-16     	; 0x7832 <x_loop>

	add ZL,YL		;src+=srcXdiff
    7842:	ec 0f       	add	r30, r28
	adc ZH,YH
    7844:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    7846:	a8 0f       	add	r26, r24
	adc XH,r1
    7848:	b1 1d       	adc	r27, r1
	dec r21
    784a:	5a 95       	dec	r21
	brne y_loop
    784c:	81 f7       	brne	.-32     	; 0x782e <y_loop>


	pop YH
    784e:	df 91       	pop	r29
	pop YL
    7850:	cf 91       	pop	r28
	pop r17
    7852:	1f 91       	pop	r17
	pop r16
    7854:	0f 91       	pop	r16
	ret
    7856:	08 95       	ret

00007858 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    7858:	0f 92       	push	r0
	push r1
    785a:	1f 92       	push	r1
	push ZL;2
    785c:	ef 93       	push	r30
	push ZH;2
    785e:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    7860:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    7862:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    7864:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    7868:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    786a:	f1 e0       	ldi	r31, 0x01	; 1

0000786c <latency_loop>:
latency_loop:
	cp ZL,ZH
    786c:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    786e:	00 f0       	brcs	.+0      	; 0x7870 <latency_loop+0x4>
	inc ZH
    7870:	f3 95       	inc	r31
	cpi ZH,10
    7872:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    7874:	d8 f3       	brcs	.-10     	; 0x786c <latency_loop>
	jmp .
    7876:	0c 94 3d 3c 	jmp	0x787a	; 0x787a <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    787a:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    787e:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7880:	e0 93 e7 0a 	sts	0x0AE7, r30

	;process sync phases
	lds ZH,sync_phase
    7884:	f0 91 e6 0a 	lds	r31, 0x0AE6
	sbrc ZH,0
    7888:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    788a:	57 c0       	rjmp	.+174    	; 0x793a <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    788c:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    788e:	98 f0       	brcs	.+38     	; 0x78b6 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    7890:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    7892:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    7896:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    7898:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    789c:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    789e:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    78a0:	26 f4       	brtc	.+8      	; 0x78aa <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    78a2:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    78a4:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <update_sound>
	rjmp sync_end
    78a8:	b6 c0       	rjmp	.+364    	; 0x7a16 <sync_end>

000078aa <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    78aa:	e5 e1       	ldi	r30, 0x15	; 21
    78ac:	ea 95       	dec	r30
    78ae:	f1 f7       	brne	.-4      	; 0x78ac <sync_pre_eq_no_sound_update+0x2>
    78b0:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    78b2:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    78b4:	b0 c0       	rjmp	.+352    	; 0x7a16 <sync_end>

000078b6 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    78b6:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    78b8:	38 f1       	brcs	.+78     	; 0x7908 <sync_post_eq>

	rjmp .
    78ba:	00 c0       	rjmp	.+0      	; 0x78bc <sync_eq+0x6>
	rjmp .
    78bc:	00 c0       	rjmp	.+0      	; 0x78be <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    78be:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    78c0:	e0 fb       	bst	r30, 0
	ldi ZL,4
    78c2:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    78c4:	16 f4       	brtc	.+4      	; 0x78ca <sync_eq_skip>
	
	call update_sound
    78c6:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <update_sound>

000078ca <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    78ca:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    78cc:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    78d0:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    78d2:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    78d6:	9f c0       	rjmp	.+318    	; 0x7a16 <sync_end>

000078d8 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    78d8:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    78da:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    78dc:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    78de:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    78e2:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    78e4:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    78e6:	00 f0       	brcs	.+0      	; 0x78e8 <__vector_14+0x10>

	cpi ZL,2
    78e8:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    78ea:	00 f0       	brcs	.+0      	; 0x78ec <__vector_14+0x14>

	cpi ZL,3
    78ec:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    78ee:	00 f0       	brcs	.+0      	; 0x78f0 <__vector_14+0x18>

	cpi ZL,4
    78f0:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    78f2:	00 f0       	brcs	.+0      	; 0x78f4 <__vector_14+0x1c>

	cpi ZL,5
    78f4:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    78f6:	00 f0       	brcs	.+0      	; 0x78f8 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    78f8:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    78fa:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    78fc:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    7900:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    7902:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    7904:	ef 91       	pop	r30
	reti
    7906:	18 95       	reti

00007908 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    7908:	00 c0       	rjmp	.+0      	; 0x790a <sync_post_eq+0x2>

	bst ZL,0
    790a:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    790c:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    790e:	26 f4       	brtc	.+8      	; 0x7918 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    7910:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    7912:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <update_sound>
	rjmp sync_pre_eq_cont
    7916:	05 c0       	rjmp	.+10     	; 0x7922 <sync_pre_eq_cont>

00007918 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    7918:	e5 e1       	ldi	r30, 0x15	; 21
    791a:	ea 95       	dec	r30
    791c:	f1 f7       	brne	.-4      	; 0x791a <sync_post_eq_no_sound_update+0x2>
    791e:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    7920:	28 9a       	sbi	0x05, 0	; 5

00007922 <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    7922:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    7926:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    7928:	09 f0       	breq	.+2      	; 0x792c <sync_pre_eq_cont+0xa>
	rjmp sync_end
    792a:	75 c0       	rjmp	.+234    	; 0x7a16 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    792c:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    792e:	e0 93 e7 0a 	sts	0x0AE7, r30
	ldi ZL,1
    7932:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    7934:	e0 93 e6 0a 	sts	0x0AE6, r30
	
	rjmp sync_end
    7938:	6e c0       	rjmp	.+220    	; 0x7a16 <sync_end>

0000793a <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    793a:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    793c:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    7940:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    7942:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    7946:	00 c0       	rjmp	.+0      	; 0x7948 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7948:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    794a:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    794c:	00 c0       	rjmp	.+0      	; 0x794e <sync_hsync+0x14>
	call update_sound
    794e:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    7952:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7954:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    7958:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    795a:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cp ZL,ZH
    795e:	ef 17       	cp	r30, r31
	brsh no_render
    7960:	d0 f4       	brcc	.+52     	; 0x7996 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    7962:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    7964:	00 90 ed 0a 	lds	r0, 0x0AED
	sub ZH,r0				
    7968:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    796a:	00 90 ee 0a 	lds	r0, 0x0AEE
	sub ZH,r0			
    796e:	f0 19       	sub	r31, r0
	cp ZL,ZH
    7970:	ef 17       	cp	r30, r31
	brlo no_render
    7972:	88 f0       	brcs	.+34     	; 0x7996 <no_render>

	;push r1-r29
	ldi ZL,29
    7974:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    7976:	ff 27       	eor	r31, r31

00007978 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    7978:	00 80       	ld	r0, Z
	push r0
    797a:	0f 92       	push	r0
	dec ZL
    797c:	ea 95       	dec	r30
	brne push_loop	
    797e:	e1 f7       	brne	.-8      	; 0x7978 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    7980:	06 e0       	ldi	r16, 0x06	; 6
    7982:	0a 95       	dec	r16
    7984:	f1 f7       	brne	.-4      	; 0x7982 <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    7986:	0e 94 58 3a 	call	0x74b0	; 0x74b0 <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    798a:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    798c:	ff 27       	eor	r31, r31

0000798e <pop_loop>:
pop_loop:
	pop r0
    798e:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    7990:	01 92       	st	Z+, r0
	cpi ZL,30
    7992:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    7994:	e0 f3       	brcs	.-8      	; 0x798e <pop_loop>

00007996 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    7996:	e0 91 e7 0a 	lds	r30, 0x0AE7
	cpi ZL,0
    799a:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    799c:	09 f0       	breq	.+2      	; 0x79a0 <no_render+0xa>
	rjmp sync_end
    799e:	3b c0       	rjmp	.+118    	; 0x7a16 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    79a0:	2f 93       	push	r18
	push r19
    79a2:	3f 93       	push	r19
	push r20
    79a4:	4f 93       	push	r20
	push r21
    79a6:	5f 93       	push	r21
	push r22
    79a8:	6f 93       	push	r22
	push r23
    79aa:	7f 93       	push	r23
	push r24
    79ac:	8f 93       	push	r24
	push r25
    79ae:	9f 93       	push	r25
	push r26
    79b0:	af 93       	push	r26
	push r27
    79b2:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    79b4:	78 94       	sei
	clr r1
    79b6:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    79b8:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    79ba:	e0 93 e6 0a 	sts	0x0AE6, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    79be:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    79c0:	e0 93 e7 0a 	sts	0x0AE7, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    79c4:	f0 91 ef 0a 	lds	r31, 0x0AEF
	sts first_render_line,ZH
    79c8:	f0 93 ed 0a 	sts	0x0AED, r31
	
	lds ZH,render_lines_count_tmp
    79cc:	f0 91 f0 0a 	lds	r31, 0x0AF0
	sts render_lines_count,ZH
    79d0:	f0 93 ee 0a 	sts	0x0AEE, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    79d4:	e0 91 e9 0a 	lds	r30, 0x0AE9
	lds ZH,pre_vsync_user_callback+1
    79d8:	f0 91 ea 0a 	lds	r31, 0x0AEA
	cp  ZL,r1
    79dc:	e1 15       	cp	r30, r1
	cpc ZH,r1
    79de:	f1 05       	cpc	r31, r1
	breq .+2 
    79e0:	09 f0       	breq	.+2      	; 0x79e4 <no_render+0x4e>
	icall
    79e2:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    79e4:	0e 94 b8 3e 	call	0x7d70	; 0x7d70 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    79e8:	0e 94 6a 4c 	call	0x98d4	; 0x98d4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    79ec:	0e 94 1d 3d 	call	0x7a3a	; 0x7a3a <process_music>
	clr r1
    79f0:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    79f2:	e0 91 eb 0a 	lds	r30, 0x0AEB
	lds ZH,post_vsync_user_callback+1
    79f6:	f0 91 ec 0a 	lds	r31, 0x0AEC
	cp  ZL,r1
    79fa:	e1 15       	cp	r30, r1
	cpc ZH,r1
    79fc:	f1 05       	cpc	r31, r1
	breq .+2 
    79fe:	09 f0       	breq	.+2      	; 0x7a02 <no_render+0x6c>
	icall
    7a00:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    7a02:	bf 91       	pop	r27
	pop r26
    7a04:	af 91       	pop	r26
	pop r25
    7a06:	9f 91       	pop	r25
	pop r24
    7a08:	8f 91       	pop	r24
	pop r23
    7a0a:	7f 91       	pop	r23
	pop r22
    7a0c:	6f 91       	pop	r22
	pop r21
    7a0e:	5f 91       	pop	r21
	pop r20
    7a10:	4f 91       	pop	r20
	pop r19
    7a12:	3f 91       	pop	r19
	pop r18
    7a14:	2f 91       	pop	r18

00007a16 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    7a16:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    7a18:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    7a1a:	ff 91       	pop	r31
	pop ZL
    7a1c:	ef 91       	pop	r30
	pop r1
    7a1e:	1f 90       	pop	r1
	pop r0
    7a20:	0f 90       	pop	r0
	reti
    7a22:	18 95       	reti

00007a24 <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    7a24:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    7a26:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    7a28:	00 c0       	rjmp	.+0      	; 0x7a2a <hsync_pulse+0x6>
	call update_sound
    7a2a:	0e 94 23 3d 	call	0x7a46	; 0x7a46 <update_sound>

	lds ZL,sync_pulse
    7a2e:	e0 91 e7 0a 	lds	r30, 0x0AE7
	dec ZL
    7a32:	ea 95       	dec	r30
	sts sync_pulse,ZL
    7a34:	e0 93 e7 0a 	sts	0x0AE7, r30

	ret
    7a38:	08 95       	ret

00007a3a <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    7a3a:	e0 91 01 0b 	lds	r30, 0x0B01
	sbrc ZL,0
    7a3e:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    7a40:	0e 94 6e 41 	call	0x82dc	; 0x82dc <ProcessMusic>
#endif

	ret
    7a44:	08 95       	ret

00007a46 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    7a46:	0f 93       	push	r16
	push r17
    7a48:	1f 93       	push	r17
	push r18
    7a4a:	2f 93       	push	r18
	push r28
    7a4c:	cf 93       	push	r28
	push r29
    7a4e:	df 93       	push	r29

	mov r18,ZL
    7a50:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    7a52:	00 91 03 0b 	lds	r16, 0x0B03
	lds r17,tr1_pos_frac
    7a56:	10 91 05 0b 	lds	r17, 0x0B05
	add	r17,r16	;add step to fractional part of sample pos
    7a5a:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    7a5c:	00 91 04 0b 	lds	r16, 0x0B04
	lds ZL,tr1_pos_lo
    7a60:	e0 91 06 0b 	lds	r30, 0x0B06
	lds ZH,tr1_pos_hi 
    7a64:	f0 91 07 0b 	lds	r31, 0x0B07
	adc ZL,r16	;add step to low byte of sample pos
    7a68:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7a6a:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    7a6c:	e0 93 06 0b 	sts	0x0B06, r30
	sts tr1_pos_frac,r17
    7a70:	10 93 05 0b 	sts	0x0B05, r17
	lds r17,tr1_vol
    7a74:	10 91 02 0b 	lds	r17, 0x0B02
	mulsu r16,r17;(sample*mixing vol)
    7a78:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    7a7a:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    7a7c:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    7a7e:	d0 2d       	mov	r29, r0
	nop
    7a80:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    7a82:	00 91 09 0b 	lds	r16, 0x0B09
	lds r17,tr2_pos_frac
    7a86:	10 91 0b 0b 	lds	r17, 0x0B0B
	add	r17,r16	;add step to fractional part of sample pos
    7a8a:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    7a8c:	00 91 0a 0b 	lds	r16, 0x0B0A
	lds ZL,tr2_pos_lo
    7a90:	e0 91 0c 0b 	lds	r30, 0x0B0C
	lds ZH,tr2_pos_hi 
    7a94:	f0 91 0d 0b 	lds	r31, 0x0B0D
	adc ZL,r16	;add step to low byte of sample pos
    7a98:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    7a9a:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    7a9c:	e0 93 0c 0b 	sts	0x0B0C, r30
	sts tr2_pos_frac,r17
    7aa0:	10 93 0b 0b 	sts	0x0B0B, r17
	lds r17,tr2_vol
    7aa4:	10 91 08 0b 	lds	r17, 0x0B08

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    7aa8:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    7aaa:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    7aac:	20 ff       	sbrs	r18, 0
	rjmp .
    7aae:	00 c0       	rjmp	.+0      	; 0x7ab0 <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    7ab0:	01 03       	mulsu	r16, r17
	clr r0
    7ab2:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    7ab4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7ab6:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    7ab8:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    7aba:	00 91 0f 0b 	lds	r16, 0x0B0F
	lds r17,tr3_pos_frac
    7abe:	10 91 11 0b 	lds	r17, 0x0B11
	add	r17,r16				;add step to fractional part of sample pos
    7ac2:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    7ac4:	00 91 10 0b 	lds	r16, 0x0B10
	lds ZL,tr3_pos_lo
    7ac8:	e0 91 12 0b 	lds	r30, 0x0B12
	lds ZH,tr3_pos_hi 
    7acc:	f0 91 13 0b 	lds	r31, 0x0B13
	adc ZL,r16				;add step to low byte of sample pos
    7ad0:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    7ad2:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    7ad4:	e0 93 12 0b 	sts	0x0B12, r30
	sts tr3_pos_frac,r17
    7ad8:	10 93 11 0b 	sts	0x0B11, r17
	lds r17,tr3_vol
    7adc:	10 91 0e 0b 	lds	r17, 0x0B0E
	mulsu r16,r17			;(sample*mixing vol)
    7ae0:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    7ae2:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    7ae4:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    7ae6:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    7ae8:	00 91 16 0b 	lds	r16, 0x0B16
	lds r17,tr4_barrel_hi
    7aec:	10 91 17 0b 	lds	r17, 0x0B17
	lds ZL,tr4_divider
    7af0:	e0 91 18 0b 	lds	r30, 0x0B18
	dec ZL	
    7af4:	ea 95       	dec	r30
	brpl ch4_no_shift	
    7af6:	92 f4       	brpl	.+36     	; 0x7b1c <ch4_no_shift>

	lds ZH,tr4_params
    7af8:	f0 91 15 0b 	lds	r31, 0x0B15
	mov ZL,ZH
    7afc:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    7afe:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    7b00:	00 2e       	mov	r0, r16
	lsr r0
    7b02:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    7b04:	00 26       	eor	r0, r16
	bst r0,0
    7b06:	00 fa       	bst	r0, 0
	lsr r17
    7b08:	16 95       	lsr	r17
	ror r16
    7b0a:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    7b0c:	16 f9       	bld	r17, 6
	sbrs ZH,0
    7b0e:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    7b10:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    7b12:	00 93 16 0b 	sts	0x0B16, r16
	sts tr4_barrel_hi,r17
    7b16:	10 93 17 0b 	sts	0x0B17, r17

	rjmp ch4_end
    7b1a:	03 c0       	rjmp	.+6      	; 0x7b22 <ch4_end>

00007b1c <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    7b1c:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    7b1e:	1a 95       	dec	r17
	brne .-4
    7b20:	f1 f7       	brne	.-4      	; 0x7b1e <ch4_no_shift+0x2>

00007b22 <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    7b22:	e0 93 18 0b 	sts	0x0B18, r30
	ldi r17,0x80 ;-128
    7b26:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    7b28:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    7b2a:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    7b2c:	21 ff       	sbrs	r18, 1
	rjmp .
    7b2e:	00 c0       	rjmp	.+0      	; 0x7b30 <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    7b30:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    7b32:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    7b34:	00 91 14 0b 	lds	r16, 0x0B14

	mulsu r17,r16;(sample*mixing vol)
    7b38:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    7b3a:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b3c:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    7b3e:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    7b40:	00 91 1d 0b 	lds	r16, 0x0B1D
	lds r17,tr5_step_lo 
    7b44:	10 91 1b 0b 	lds	r17, 0x0B1B
	add r16,r17
    7b48:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    7b4a:	00 93 1d 0b 	sts	0x0B1D, r16

	;add lo
	lds ZL,tr5_pos_lo
    7b4e:	e0 91 1e 0b 	lds	r30, 0x0B1E
	lds r17,tr5_step_hi 
    7b52:	10 91 1c 0b 	lds	r17, 0x0B1C
	adc ZL,r17
    7b56:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    7b58:	f0 91 1f 0b 	lds	r31, 0x0B1F
	ldi r16,0
    7b5c:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    7b5e:	f0 1f       	adc	r31, r16

	movw r16,ZL
    7b60:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    7b62:	00 90 20 0b 	lds	r0, 0x0B20
	lds r1,tr5_loop_len_hi	
    7b66:	10 90 21 0b 	lds	r1, 0x0B21
	sub r16,r0
    7b6a:	00 19       	sub	r16, r0
	sbc r17,r1
    7b6c:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    7b6e:	00 90 22 0b 	lds	r0, 0x0B22
	lds r1,tr5_loop_end_hi
    7b72:	10 90 23 0b 	lds	r1, 0x0B23

	cp ZL,r0
    7b76:	e0 15       	cp	r30, r0
	cpc ZH,r1
    7b78:	f1 05       	cpc	r31, r1
	brlo .+2
    7b7a:	08 f0       	brcs	.+2      	; 0x7b7e <ch4_end+0x5c>
	movw ZL,r16
    7b7c:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    7b7e:	e0 93 1e 0b 	sts	0x0B1E, r30
	sts tr5_pos_hi,ZH
    7b82:	f0 93 1f 0b 	sts	0x0B1F, r31

	lpm	r16,Z	;load sample
    7b86:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    7b88:	10 91 1a 0b 	lds	r17, 0x0B1A

	mulsu r16,r17;(sample*mixing vol)
    7b8c:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    7b8e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    7b90:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    7b92:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    7b94:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    7b96:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    7b98:	d0 05       	cpc	r29, r0
	brlt .+2
    7b9a:	0c f0       	brlt	.+2      	; 0x7b9e <ch4_end+0x7c>
	ldi r28,127
    7b9c:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    7b9e:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    7ba0:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    7ba2:	d0 05       	cpc	r29, r0
	brge .+2
    7ba4:	0c f4       	brge	.+2      	; 0x7ba8 <ch4_end+0x86>
	ldi r28,-128
    7ba6:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    7ba8:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    7baa:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    7bae:	df 91       	pop	r29
	pop r28
    7bb0:	cf 91       	pop	r28
	pop r18
    7bb2:	2f 91       	pop	r18
	pop r17
    7bb4:	1f 91       	pop	r17
	pop r16
    7bb6:	0f 91       	pop	r16
	
	ret
    7bb8:	08 95       	ret

00007bba <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    7bba:	80 93 d8 0a 	sts	0x0AD8, r24
	sts sprites_tile_banks+1,r25
    7bbe:	90 93 d9 0a 	sts	0x0AD9, r25
	ret
    7bc2:	08 95       	ret

00007bc4 <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7bc4:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    7bc6:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    7bc8:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7bca:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    7bcc:	68 e1       	ldi	r22, 0x18	; 24

00007bce <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    7bce:	6d 93       	st	X+, r22
	sbiw r30,1
    7bd0:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    7bd2:	e9 f7       	brne	.-6      	; 0x7bce <fill_vram_loop>

	clr r1
    7bd4:	11 24       	eor	r1, r1

	ret
    7bd6:	08 95       	ret

00007bd8 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    7bd8:	50 91 e2 0a 	lds	r21, 0x0AE2
	add r20,21
    7bdc:	45 0f       	add	r20, r21
	rjmp SetTile	
    7bde:	00 c0       	rjmp	.+0      	; 0x7be0 <SetTile>

00007be0 <SetTile>:

	ret

#else

	clr r25
    7be0:	99 27       	eor	r25, r25
	clr r23	
    7be2:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    7be4:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    7be6:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    7be8:	08 0e       	add	r0, r24
	adc r1,r25
    7bea:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    7bec:	a0 e2       	ldi	r26, 0x20	; 32
	ldi XH,hi8(vram)
    7bee:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    7bf0:	a0 0d       	add	r26, r0
	adc XH,r1
    7bf2:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    7bf4:	48 5e       	subi	r20, 0xE8	; 232
	st X,r20
    7bf6:	4c 93       	st	X, r20

	clr r1
    7bf8:	11 24       	eor	r1, r1

	ret
    7bfa:	08 95       	ret

00007bfc <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    7bfc:	80 93 e2 0a 	sts	0x0AE2, r24
	ret
    7c00:	08 95       	ret

00007c02 <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    7c02:	80 93 e0 0a 	sts	0x0AE0, r24
	sts tile_table_hi,r25	
    7c06:	90 93 e1 0a 	sts	0x0AE1, r25
	ret
    7c0a:	08 95       	ret

00007c0c <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    7c0c:	80 91 e8 0a 	lds	r24, 0x0AE8
	andi r24,SYNC_FLAG_VSYNC
    7c10:	81 70       	andi	r24, 0x01	; 1
	ret
    7c12:	08 95       	ret

00007c14 <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    7c14:	20 91 e8 0a 	lds	r18, 0x0AE8
	andi r18,~SYNC_FLAG_VSYNC
    7c18:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    7c1a:	20 93 e8 0a 	sts	0x0AE8, r18
	ret
    7c1e:	08 95       	ret

00007c20 <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    7c20:	88 23       	and	r24, r24
	brne rj_p2
    7c22:	29 f4       	brne	.+10     	; 0x7c2e <rj_p2>
		
	lds r24,joypad1_status_lo
    7c24:	80 91 f1 0a 	lds	r24, 0x0AF1
	lds r25,joypad1_status_lo+1
    7c28:	90 91 f2 0a 	lds	r25, 0x0AF2
	ret
    7c2c:	08 95       	ret

00007c2e <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    7c2e:	80 91 f5 0a 	lds	r24, 0x0AF5
	lds r25,joypad2_status_lo+1	
    7c32:	90 91 f6 0a 	lds	r25, 0x0AF6

	ret
    7c36:	08 95       	ret

00007c38 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    7c38:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    7c3a:	7a 95       	dec	r23
	brne .-4 ;~1 us
    7c3c:	f1 f7       	brne	.-4      	; 0x7c3a <WaitUs+0x2>
	nop
    7c3e:	00 00       	nop
	sbiw r24,1
    7c40:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    7c42:	d1 f7       	brne	.-12     	; 0x7c38 <WaitUs>

	ret
    7c44:	08 95       	ret

00007c46 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7c46:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    7c48:	fe cf       	rjmp	.-4      	; 0x7c46 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7c4a:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7c4c:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    7c4e:	60 bd       	out	0x20, r22	; 32
   cli
    7c50:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    7c52:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    7c54:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    7c56:	78 94       	sei
   ret
    7c58:	08 95       	ret

00007c5a <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    7c5a:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    7c5c:	fe cf       	rjmp	.-4      	; 0x7c5a <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    7c5e:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    7c60:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    7c62:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    7c64:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    7c66:	80 b5       	in	r24, 0x20	; 32
   sei
    7c68:	78 94       	sei
   ret
    7c6a:	08 95       	ret

00007c6c <wdt_randomize>:
	.global wdt_randomize
	.section .text.wdt_randomize
	wdt_randomize:

		;set timer 1 full speed count to 0xffff
		ldi r24,0
    7c6c:	80 e0       	ldi	r24, 0x00	; 0
		sts sync_pulse,r24
    7c6e:	80 93 e7 0a 	sts	0x0AE7, r24

		sts _SFR_MEM_ADDR(TCCR1A),r24	
    7c72:	80 93 80 00 	sts	0x0080, r24
		ldi 24,(1<<CS10)
    7c76:	81 e0       	ldi	r24, 0x01	; 1
		sts _SFR_MEM_ADDR(TCCR1B),r24
    7c78:	80 93 81 00 	sts	0x0081, r24

		cli
    7c7c:	f8 94       	cli
		;enable watchdog at fastest speed and generate interrupts
		ldi r24,0
    7c7e:	80 e0       	ldi	r24, 0x00	; 0
		sts _SFR_MEM_ADDR(MCUSR),r24	
    7c80:	80 93 54 00 	sts	0x0054, r24
		ldi r25,(1<<WDIE)+(1<<WDE)+(0<<WDP3)+(0<<WDP2)+(0<<WDP1)+(0<<WDP0)
    7c84:	98 e4       	ldi	r25, 0x48	; 72
		lds r24,_SFR_MEM_ADDR(WDTCSR)
    7c86:	80 91 60 00 	lds	r24, 0x0060
		ori r24,(1<<WDCE)+(1<<WDE)
    7c8a:	88 61       	ori	r24, 0x18	; 24
		sts _SFR_MEM_ADDR(WDTCSR),r24
    7c8c:	80 93 60 00 	sts	0x0060, r24
		sts _SFR_MEM_ADDR(WDTCSR),r25
    7c90:	90 93 60 00 	sts	0x0060, r25
	
		sei
    7c94:	78 94       	sei

00007c96 <wait>:

		;generate 8 random cycles
	wait:
		lds r24,sync_pulse ;using the yet unalocated "sync_pulse" as a temp variable
    7c96:	80 91 e7 0a 	lds	r24, 0x0AE7
		cpi r24,8
    7c9a:	88 30       	cpi	r24, 0x08	; 8
		brlo wait
    7c9c:	e0 f3       	brcs	.-8      	; 0x7c96 <wait>

		ret
    7c9e:	08 95       	ret

00007ca0 <GetRandomSeed>:
	;********************************

	.global GetRandomSeed
	.section .text.GetRandomSeed
	GetRandomSeed:
		lds r24,random_value
    7ca0:	80 91 f9 0a 	lds	r24, 0x0AF9
		lds r25,random_value+1
    7ca4:	90 91 fa 0a 	lds	r25, 0x0AFA
		ret
    7ca8:	08 95       	ret

00007caa <__vector_8>:
	;*************************************
	; Watchdog timer interrupt
	;*************************************
	WDT_vect:
		;save flags & status register
		push r16
    7caa:	0f 93       	push	r16
		push r17
    7cac:	1f 93       	push	r17
	
		in r16,_SFR_IO_ADDR(SREG)
    7cae:	0f b7       	in	r16, 0x3f	; 63
		push r16
    7cb0:	0f 93       	push	r16

		lds r16,sync_pulse
    7cb2:	00 91 e7 0a 	lds	r16, 0x0AE7
		inc r16
    7cb6:	03 95       	inc	r16
		sts sync_pulse,r16
    7cb8:	00 93 e7 0a 	sts	0x0AE7, r16

		;XOR succesive timer1 LSB into a int
		sbrc r16,0
    7cbc:	00 fd       	sbrc	r16, 0
		rjmp 1f
    7cbe:	08 c0       	rjmp	.+16     	; 0x7cd0 <__vector_8+0x26>
		lds r17,random_value
    7cc0:	10 91 f9 0a 	lds	r17, 0x0AF9
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7cc4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7cc8:	10 27       	eor	r17, r16
		sts random_value,r17
    7cca:	10 93 f9 0a 	sts	0x0AF9, r17
		rjmp 2f
    7cce:	07 c0       	rjmp	.+14     	; 0x7cde <__vector_8+0x34>
	1:
		lds r17,random_value+1
    7cd0:	10 91 fa 0a 	lds	r17, 0x0AFA
		lds r16,_SFR_MEM_ADDR(TCNT1L)
    7cd4:	00 91 84 00 	lds	r16, 0x0084
		eor r17,r16
    7cd8:	10 27       	eor	r17, r16
		sts random_value+1,r17
    7cda:	10 93 fa 0a 	sts	0x0AFA, r17
	2:

		ldi r16,(1<<WDIE)+(1<<WDE)
    7cde:	08 e4       	ldi	r16, 0x48	; 72
		sts _SFR_MEM_ADDR(WDTCSR),r16
    7ce0:	00 93 60 00 	sts	0x0060, r16

		;restore flags
		pop r16
    7ce4:	0f 91       	pop	r16
		out _SFR_IO_ADDR(SREG),r16
    7ce6:	0f bf       	out	0x3f, r16	; 63
	
		pop r17
    7ce8:	1f 91       	pop	r17
		pop r16
    7cea:	0f 91       	pop	r16
		reti
    7cec:	18 95       	reti

00007cee <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    7cee:	98 e0       	ldi	r25, 0x08	; 8
    7cf0:	88 e1       	ldi	r24, 0x18	; 24
    7cf2:	0f b6       	in	r0, 0x3f	; 63
    7cf4:	f8 94       	cli
    7cf6:	a8 95       	wdr
    7cf8:	80 93 60 00 	sts	0x0060, r24
    7cfc:	0f be       	out	0x3f, r0	; 63
    7cfe:	90 93 60 00 	sts	0x0060, r25
	while(1);
    7d02:	ff cf       	rjmp	.-2      	; 0x7d02 <SoftReset+0x14>

00007d04 <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    7d04:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    7d06:	c8 95       	lpm
    7d08:	c8 95       	lpm
		Wait200ns();
    7d0a:	c8 95       	lpm
    7d0c:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    7d0e:	12 98       	cbi	0x02, 2	; 2
    7d10:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    7d12:	80 e0       	ldi	r24, 0x00	; 0
    7d14:	90 e0       	ldi	r25, 0x00	; 0
    7d16:	20 e0       	ldi	r18, 0x00	; 0
    7d18:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    7d1a:	36 95       	lsr	r19
    7d1c:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    7d1e:	96 95       	lsr	r25
    7d20:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d22:	c8 95       	lpm
    7d24:	c8 95       	lpm
			Wait200ns();
    7d26:	c8 95       	lpm
    7d28:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    7d2a:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    7d2c:	00 9b       	sbis	0x00, 0	; 0
    7d2e:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    7d30:	01 9b       	sbis	0x00, 1	; 0
    7d32:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    7d34:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    7d36:	c8 95       	lpm
    7d38:	c8 95       	lpm
			Wait200ns();
    7d3a:	c8 95       	lpm
    7d3c:	c8 95       	lpm
    7d3e:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    7d40:	61 f7       	brne	.-40     	; 0x7d1a <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    7d42:	30 93 f2 0a 	sts	0x0AF2, r19
    7d46:	20 93 f1 0a 	sts	0x0AF1, r18
		joypad2_status_lo=p2ButtonsLo;
    7d4a:	90 93 f6 0a 	sts	0x0AF6, r25
    7d4e:	80 93 f5 0a 	sts	0x0AF5, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    7d52:	80 91 f1 0a 	lds	r24, 0x0AF1
    7d56:	90 91 f2 0a 	lds	r25, 0x0AF2
    7d5a:	0f 97       	sbiw	r24, 0x0f	; 15
    7d5c:	31 f0       	breq	.+12     	; 0x7d6a <ReadButtons+0x66>
    7d5e:	80 91 f5 0a 	lds	r24, 0x0AF5
    7d62:	90 91 f6 0a 	lds	r25, 0x0AF6
    7d66:	0f 97       	sbiw	r24, 0x0f	; 15
    7d68:	11 f4       	brne	.+4      	; 0x7d6e <ReadButtons+0x6a>
		SoftReset();
    7d6a:	0e 94 77 3e 	call	0x7cee	; 0x7cee <SoftReset>
    7d6e:	08 95       	ret

00007d70 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    7d70:	10 92 3c 0b 	sts	0x0B3C, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    7d74:	00 99       	sbic	0x00, 0	; 0
    7d76:	03 c0       	rjmp	.+6      	; 0x7d7e <ReadControllers+0xe>
    7d78:	81 e0       	ldi	r24, 0x01	; 1
    7d7a:	80 93 3c 0b 	sts	0x0B3C, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    7d7e:	01 99       	sbic	0x00, 1	; 0
    7d80:	05 c0       	rjmp	.+10     	; 0x7d8c <ReadControllers+0x1c>
    7d82:	80 91 3c 0b 	lds	r24, 0x0B3C
    7d86:	82 60       	ori	r24, 0x02	; 2
    7d88:	80 93 3c 0b 	sts	0x0B3C, r24
			
	//read the standard buttons
	ReadButtons();
    7d8c:	0c 94 82 3e 	jmp	0x7d04	; 0x7d04 <ReadButtons>

00007d90 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    7d90:	cf 93       	push	r28
    7d92:	df 93       	push	r29
    7d94:	c0 e0       	ldi	r28, 0x00	; 0
    7d96:	d0 e0       	ldi	r29, 0x00	; 0
    7d98:	fe 01       	movw	r30, r28
    7d9a:	e0 55       	subi	r30, 0x50	; 80
    7d9c:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    7d9e:	64 91       	lpm	r22, Z
    7da0:	ce 01       	movw	r24, r28
    7da2:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <WriteEeprom>
    7da6:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    7da8:	c0 32       	cpi	r28, 0x20	; 32
    7daa:	d1 05       	cpc	r29, r1
    7dac:	a9 f7       	brne	.-22     	; 0x7d98 <FormatEeprom+0x8>
    7dae:	c0 e2       	ldi	r28, 0x20	; 32
    7db0:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    7db2:	6f ef       	ldi	r22, 0xFF	; 255
    7db4:	ce 01       	movw	r24, r28
    7db6:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    7dba:	6f ef       	ldi	r22, 0xFF	; 255
    7dbc:	ce 01       	movw	r24, r28
    7dbe:	01 96       	adiw	r24, 0x01	; 1
    7dc0:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    7dc4:	a0 96       	adiw	r28, 0x20	; 32
    7dc6:	c1 15       	cp	r28, r1
    7dc8:	88 e0       	ldi	r24, 0x08	; 8
    7dca:	d8 07       	cpc	r29, r24
    7dcc:	91 f7       	brne	.-28     	; 0x7db2 <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    7dce:	df 91       	pop	r29
    7dd0:	cf 91       	pop	r28
    7dd2:	08 95       	ret

00007dd4 <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    7dd4:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    7dd6:	80 e0       	ldi	r24, 0x00	; 0
    7dd8:	90 e0       	ldi	r25, 0x00	; 0
    7dda:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7dde:	c8 2f       	mov	r28, r24
    7de0:	81 e0       	ldi	r24, 0x01	; 1
    7de2:	90 e0       	ldi	r25, 0x00	; 0
    7de4:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7de8:	28 2f       	mov	r18, r24
    7dea:	30 e0       	ldi	r19, 0x00	; 0
    7dec:	32 2f       	mov	r19, r18
    7dee:	22 27       	eor	r18, r18
    7df0:	2c 0f       	add	r18, r28
    7df2:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    7df4:	81 e0       	ldi	r24, 0x01	; 1
    7df6:	2a 35       	cpi	r18, 0x5A	; 90
    7df8:	35 45       	sbci	r19, 0x55	; 85
    7dfa:	09 f0       	breq	.+2      	; 0x7dfe <isEepromFormatted+0x2a>
    7dfc:	80 e0       	ldi	r24, 0x00	; 0
}
    7dfe:	cf 91       	pop	r28
    7e00:	08 95       	ret

00007e02 <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    7e02:	cf 92       	push	r12
    7e04:	df 92       	push	r13
    7e06:	ef 92       	push	r14
    7e08:	ff 92       	push	r15
    7e0a:	0f 93       	push	r16
    7e0c:	1f 93       	push	r17
    7e0e:	cf 93       	push	r28
    7e10:	df 93       	push	r29
    7e12:	1f 92       	push	r1
    7e14:	cd b7       	in	r28, 0x3d	; 61
    7e16:	de b7       	in	r29, 0x3e	; 62
    7e18:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7e1a:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <isEepromFormatted>
    7e1e:	88 23       	and	r24, r24
    7e20:	09 f4       	brne	.+2      	; 0x7e24 <EepromWriteBlock+0x22>
    7e22:	4d c0       	rjmp	.+154    	; 0x7ebe <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7e24:	f6 01       	movw	r30, r12
    7e26:	80 81       	ld	r24, Z
    7e28:	91 81       	ldd	r25, Z+1	; 0x01
    7e2a:	8f 3f       	cpi	r24, 0xFF	; 255
    7e2c:	ff ef       	ldi	r31, 0xFF	; 255
    7e2e:	9f 07       	cpc	r25, r31
    7e30:	09 f4       	brne	.+2      	; 0x7e34 <EepromWriteBlock+0x32>
    7e32:	47 c0       	rjmp	.+142    	; 0x7ec2 <EepromWriteBlock+0xc0>
    7e34:	8a 35       	cpi	r24, 0x5A	; 90
    7e36:	95 45       	sbci	r25, 0x55	; 85
    7e38:	09 f4       	brne	.+2      	; 0x7e3c <EepromWriteBlock+0x3a>
    7e3a:	43 c0       	rjmp	.+134    	; 0x7ec2 <EepromWriteBlock+0xc0>
    7e3c:	00 e2       	ldi	r16, 0x20	; 32
    7e3e:	10 e0       	ldi	r17, 0x00	; 0
    7e40:	f1 2c       	mov	r15, r1
    7e42:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7e44:	c8 01       	movw	r24, r16
    7e46:	49 83       	std	Y+1, r20	; 0x01
    7e48:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7e4c:	e8 2e       	mov	r14, r24
    7e4e:	c8 01       	movw	r24, r16
    7e50:	01 96       	adiw	r24, 0x01	; 1
    7e52:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7e56:	28 2f       	mov	r18, r24
    7e58:	30 e0       	ldi	r19, 0x00	; 0
    7e5a:	32 2f       	mov	r19, r18
    7e5c:	22 27       	eor	r18, r18
    7e5e:	c9 01       	movw	r24, r18
    7e60:	8e 0d       	add	r24, r14
    7e62:	91 1d       	adc	r25, r1
		if(id==block->id){
    7e64:	f6 01       	movw	r30, r12
    7e66:	20 81       	ld	r18, Z
    7e68:	31 81       	ldd	r19, Z+1	; 0x01
    7e6a:	49 81       	ldd	r20, Y+1	; 0x01
    7e6c:	82 17       	cp	r24, r18
    7e6e:	93 07       	cpc	r25, r19
    7e70:	19 f4       	brne	.+6      	; 0x7e78 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7e72:	ff 20       	and	r15, r15
    7e74:	89 f0       	breq	.+34     	; 0x7e98 <EepromWriteBlock+0x96>
    7e76:	0c c0       	rjmp	.+24     	; 0x7e90 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    7e78:	01 96       	adiw	r24, 0x01	; 1
    7e7a:	19 f4       	brne	.+6      	; 0x7e82 <EepromWriteBlock+0x80>
    7e7c:	f1 10       	cpse	r15, r1
    7e7e:	01 c0       	rjmp	.+2      	; 0x7e82 <EepromWriteBlock+0x80>
    7e80:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    7e82:	4f 5f       	subi	r20, 0xFF	; 255
    7e84:	00 5e       	subi	r16, 0xE0	; 224
    7e86:	1f 4f       	sbci	r17, 0xFF	; 255
    7e88:	40 34       	cpi	r20, 0x40	; 64
    7e8a:	e1 f6       	brne	.-72     	; 0x7e44 <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7e8c:	ff 20       	and	r15, r15
    7e8e:	d9 f0       	breq	.+54     	; 0x7ec6 <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    7e90:	20 e2       	ldi	r18, 0x20	; 32
    7e92:	f2 9e       	mul	r15, r18
    7e94:	80 01       	movw	r16, r0
    7e96:	11 24       	eor	r1, r1
    7e98:	76 01       	movw	r14, r12
    7e9a:	80 e2       	ldi	r24, 0x20	; 32
    7e9c:	e8 0e       	add	r14, r24
    7e9e:	f1 1c       	adc	r15, r1
    7ea0:	0c 19       	sub	r16, r12
    7ea2:	1d 09       	sbc	r17, r13
    7ea4:	c6 01       	movw	r24, r12
    7ea6:	80 0f       	add	r24, r16
    7ea8:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    7eaa:	f6 01       	movw	r30, r12
    7eac:	61 91       	ld	r22, Z+
    7eae:	6f 01       	movw	r12, r30
    7eb0:	0e 94 23 3e 	call	0x7c46	; 0x7c46 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7eb4:	ce 14       	cp	r12, r14
    7eb6:	df 04       	cpc	r13, r15
    7eb8:	a9 f7       	brne	.-22     	; 0x7ea4 <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    7eba:	80 e0       	ldi	r24, 0x00	; 0
    7ebc:	05 c0       	rjmp	.+10     	; 0x7ec8 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7ebe:	84 e0       	ldi	r24, 0x04	; 4
    7ec0:	03 c0       	rjmp	.+6      	; 0x7ec8 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    7ec2:	81 e0       	ldi	r24, 0x01	; 1
    7ec4:	01 c0       	rjmp	.+2      	; 0x7ec8 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    7ec6:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    7ec8:	0f 90       	pop	r0
    7eca:	df 91       	pop	r29
    7ecc:	cf 91       	pop	r28
    7ece:	1f 91       	pop	r17
    7ed0:	0f 91       	pop	r16
    7ed2:	ff 90       	pop	r15
    7ed4:	ef 90       	pop	r14
    7ed6:	df 90       	pop	r13
    7ed8:	cf 90       	pop	r12
    7eda:	08 95       	ret

00007edc <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    7edc:	df 92       	push	r13
    7ede:	ef 92       	push	r14
    7ee0:	ff 92       	push	r15
    7ee2:	0f 93       	push	r16
    7ee4:	1f 93       	push	r17
    7ee6:	cf 93       	push	r28
    7ee8:	df 93       	push	r29
    7eea:	7c 01       	movw	r14, r24
    7eec:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7eee:	0e 94 ea 3e 	call	0x7dd4	; 0x7dd4 <isEepromFormatted>
    7ef2:	88 23       	and	r24, r24
    7ef4:	89 f1       	breq	.+98     	; 0x7f58 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7ef6:	8f ef       	ldi	r24, 0xFF	; 255
    7ef8:	e8 16       	cp	r14, r24
    7efa:	f8 06       	cpc	r15, r24
    7efc:	79 f1       	breq	.+94     	; 0x7f5c <EepromReadBlock+0x80>
    7efe:	00 e0       	ldi	r16, 0x00	; 0
    7f00:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    7f02:	c8 01       	movw	r24, r16
    7f04:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7f08:	d8 2e       	mov	r13, r24
    7f0a:	c8 01       	movw	r24, r16
    7f0c:	01 96       	adiw	r24, 0x01	; 1
    7f0e:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7f12:	28 2f       	mov	r18, r24
    7f14:	30 e0       	ldi	r19, 0x00	; 0
    7f16:	32 2f       	mov	r19, r18
    7f18:	22 27       	eor	r18, r18
    7f1a:	2d 0d       	add	r18, r13
    7f1c:	31 1d       	adc	r19, r1
		if(id==blockId){
    7f1e:	2e 15       	cp	r18, r14
    7f20:	3f 05       	cpc	r19, r15
    7f22:	39 f4       	brne	.+14     	; 0x7f32 <EepromReadBlock+0x56>
    7f24:	7e 01       	movw	r14, r28
    7f26:	80 e2       	ldi	r24, 0x20	; 32
    7f28:	e8 0e       	add	r14, r24
    7f2a:	f1 1c       	adc	r15, r1
    7f2c:	0c 1b       	sub	r16, r28
    7f2e:	1d 0b       	sbc	r17, r29
    7f30:	08 c0       	rjmp	.+16     	; 0x7f42 <EepromReadBlock+0x66>
    7f32:	00 5e       	subi	r16, 0xE0	; 224
    7f34:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    7f36:	01 15       	cp	r16, r1
    7f38:	84 e0       	ldi	r24, 0x04	; 4
    7f3a:	18 07       	cpc	r17, r24
    7f3c:	11 f7       	brne	.-60     	; 0x7f02 <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    7f3e:	83 e0       	ldi	r24, 0x03	; 3
    7f40:	0e c0       	rjmp	.+28     	; 0x7f5e <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    7f42:	ce 01       	movw	r24, r28
    7f44:	80 0f       	add	r24, r16
    7f46:	91 1f       	adc	r25, r17
    7f48:	0e 94 2d 3e 	call	0x7c5a	; 0x7c5a <ReadEeprom>
    7f4c:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    7f4e:	ce 15       	cp	r28, r14
    7f50:	df 05       	cpc	r29, r15
    7f52:	b9 f7       	brne	.-18     	; 0x7f42 <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    7f54:	80 e0       	ldi	r24, 0x00	; 0
    7f56:	03 c0       	rjmp	.+6      	; 0x7f5e <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    7f58:	84 e0       	ldi	r24, 0x04	; 4
    7f5a:	01 c0       	rjmp	.+2      	; 0x7f5e <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    7f5c:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    7f5e:	df 91       	pop	r29
    7f60:	cf 91       	pop	r28
    7f62:	1f 91       	pop	r17
    7f64:	0f 91       	pop	r16
    7f66:	ff 90       	pop	r15
    7f68:	ef 90       	pop	r14
    7f6a:	df 90       	pop	r13
    7f6c:	08 95       	ret

00007f6e <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    7f6e:	fc 01       	movw	r30, r24
    7f70:	45 87       	std	Z+13, r20	; 0x0d
    7f72:	08 95       	ret

00007f74 <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    7f74:	e2 e0       	ldi	r30, 0x02	; 2
    7f76:	fb e0       	ldi	r31, 0x0B	; 11
    7f78:	81 e0       	ldi	r24, 0x01	; 1
    7f7a:	91 e0       	ldi	r25, 0x01	; 1
    7f7c:	95 8b       	std	Z+21, r25	; 0x15
    7f7e:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    7f80:	43 8b       	std	Z+19, r20	; 0x13
    7f82:	08 95       	ret

00007f84 <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    7f84:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    7f86:	90 81       	ld	r25, Z
    7f88:	9f 75       	andi	r25, 0x5F	; 95
    7f8a:	90 83       	st	Z, r25
    7f8c:	08 95       	ret

00007f8e <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    7f8e:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    7f90:	90 81       	ld	r25, Z
    7f92:	90 64       	ori	r25, 0x40	; 64
    7f94:	90 83       	st	Z, r25
    7f96:	08 95       	ret

00007f98 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    7f98:	fc 01       	movw	r30, r24
    7f9a:	44 87       	std	Z+12, r20	; 0x0c
    7f9c:	08 95       	ret

00007f9e <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    7f9e:	fc 01       	movw	r30, r24
    7fa0:	47 83       	std	Z+7, r20	; 0x07
    7fa2:	08 95       	ret

00007fa4 <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    7fa4:	fc 01       	movw	r30, r24
    7fa6:	40 87       	std	Z+8, r20	; 0x08
    7fa8:	08 95       	ret

00007faa <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    7faa:	1f 93       	push	r17
    7fac:	cf 93       	push	r28
    7fae:	df 93       	push	r29
    7fb0:	ec 01       	movw	r28, r24
    7fb2:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    7fb4:	29 81       	ldd	r18, Y+1	; 0x01
    7fb6:	30 e0       	ldi	r19, 0x00	; 0
    7fb8:	f9 01       	movw	r30, r18
    7fba:	ee 0f       	add	r30, r30
    7fbc:	ff 1f       	adc	r31, r31
    7fbe:	e8 5f       	subi	r30, 0xF8	; 248
    7fc0:	f7 47       	sbci	r31, 0x77	; 119
    7fc2:	65 91       	lpm	r22, Z+
    7fc4:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    7fc6:	f9 01       	movw	r30, r18
    7fc8:	e4 0f       	add	r30, r20
    7fca:	f1 1d       	adc	r31, r1
    7fcc:	47 fd       	sbrc	r20, 7
    7fce:	fa 95       	dec	r31
    7fd0:	ee 0f       	add	r30, r30
    7fd2:	ff 1f       	adc	r31, r31
    7fd4:	e8 5f       	subi	r30, 0xF8	; 248
    7fd6:	f7 47       	sbci	r31, 0x77	; 119
    7fd8:	85 91       	lpm	r24, Z+
    7fda:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    7fdc:	86 1b       	sub	r24, r22
    7fde:	97 0b       	sbc	r25, r23
    7fe0:	60 91 44 0b 	lds	r22, 0x0B44
    7fe4:	70 e0       	ldi	r23, 0x00	; 0
    7fe6:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
	if(delta==0)delta++;
    7fea:	61 15       	cp	r22, r1
    7fec:	71 05       	cpc	r23, r1
    7fee:	11 f4       	brne	.+4      	; 0x7ff4 <PatchCommand11+0x4a>
    7ff0:	61 e0       	ldi	r22, 0x01	; 1
    7ff2:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    7ff4:	86 e0       	ldi	r24, 0x06	; 6
    7ff6:	18 9f       	mul	r17, r24
    7ff8:	f0 01       	movw	r30, r0
    7ffa:	11 24       	eor	r1, r1
    7ffc:	ee 5f       	subi	r30, 0xFE	; 254
    7ffe:	f4 4f       	sbci	r31, 0xF4	; 244
    8000:	81 81       	ldd	r24, Z+1	; 0x01
    8002:	92 81       	ldd	r25, Z+2	; 0x02
    8004:	86 0f       	add	r24, r22
    8006:	97 1f       	adc	r25, r23
    8008:	92 83       	std	Z+2, r25	; 0x02
    800a:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    800c:	7b 83       	std	Y+3, r23	; 0x03
    800e:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    8010:	88 81       	ld	r24, Y
    8012:	88 60       	ori	r24, 0x08	; 8
    8014:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    8016:	89 81       	ldd	r24, Y+1	; 0x01
    8018:	48 0f       	add	r20, r24
    801a:	4c 83       	std	Y+4, r20	; 0x04
}
    801c:	df 91       	pop	r29
    801e:	cf 91       	pop	r28
    8020:	1f 91       	pop	r17
    8022:	08 95       	ret

00008024 <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    8024:	40 93 44 0b 	sts	0x0B44, r20
    8028:	08 95       	ret

0000802a <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    802a:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    802c:	64 2f       	mov	r22, r20
    802e:	0c 94 af 43 	jmp	0x875e	; 0x875e <SetMixerWave>

00008032 <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    8032:	fc 01       	movw	r30, r24
    8034:	86 2f       	mov	r24, r22
	track->note+=param;
    8036:	91 81       	ldd	r25, Z+1	; 0x01
    8038:	64 2f       	mov	r22, r20
    803a:	69 0f       	add	r22, r25
    803c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    803e:	0c 94 98 43 	jmp	0x8730	; 0x8730 <SetMixerNote>

00008042 <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    8042:	fc 01       	movw	r30, r24
    8044:	86 2f       	mov	r24, r22
	track->note-=param;
    8046:	91 81       	ldd	r25, Z+1	; 0x01
    8048:	69 2f       	mov	r22, r25
    804a:	64 1b       	sub	r22, r20
    804c:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    804e:	0c 94 98 43 	jmp	0x8730	; 0x8730 <SetMixerNote>

00008052 <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    8052:	0f 93       	push	r16
    8054:	1f 93       	push	r17
    8056:	cf 93       	push	r28
    8058:	df 93       	push	r29
    805a:	1f 92       	push	r1
    805c:	cd b7       	in	r28, 0x3d	; 61
    805e:	de b7       	in	r29, 0x3e	; 62
    8060:	8c 01       	movw	r16, r24
    8062:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    8064:	64 2f       	mov	r22, r20
    8066:	49 83       	std	Y+1, r20	; 0x01
    8068:	0e 94 98 43 	call	0x8730	; 0x8730 <SetMixerNote>
	track->note=param;
    806c:	49 81       	ldd	r20, Y+1	; 0x01
    806e:	f8 01       	movw	r30, r16
    8070:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8072:	80 81       	ld	r24, Z
    8074:	87 7f       	andi	r24, 0xF7	; 247
    8076:	80 83       	st	Z, r24
}
    8078:	0f 90       	pop	r0
    807a:	df 91       	pop	r29
    807c:	cf 91       	pop	r28
    807e:	1f 91       	pop	r17
    8080:	0f 91       	pop	r16
    8082:	08 95       	ret

00008084 <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    8084:	90 93 b0 0b 	sts	0x0BB0, r25
    8088:	80 93 af 0b 	sts	0x0BAF, r24

	masterVolume=DEFAULT_MASTER_VOL;
    808c:	8f e6       	ldi	r24, 0x6F	; 111
    808e:	80 93 b2 0b 	sts	0x0BB2, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    8092:	10 92 00 0b 	sts	0x0B00, r1
    8096:	ed e4       	ldi	r30, 0x4D	; 77
    8098:	fb e0       	ldi	r31, 0x0B	; 11

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    809a:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    809c:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    809e:	28 e1       	ldi	r18, 0x18	; 24
    80a0:	df 01       	movw	r26, r30
    80a2:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    80a4:	8c 93       	st	X, r24
    80a6:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    80a8:	1c 92       	st	X, r1
    80aa:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    80ac:	9c 93       	st	X, r25
    80ae:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    80b0:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    80b2:	10 82       	st	Z, r1
    80b4:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    80b6:	2c 93       	st	X, r18
    80b8:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    80ba:	8c 93       	st	X, r24
    80bc:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    80be:	3b e0       	ldi	r19, 0x0B	; 11
    80c0:	eb 3b       	cpi	r30, 0xBB	; 187
    80c2:	f3 07       	cpc	r31, r19
    80c4:	69 f7       	brne	.-38     	; 0x80a0 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    80c6:	08 95       	ret

000080c8 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    80c8:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    80ca:	ed 91       	ld	r30, X+
    80cc:	fc 91       	ld	r31, X
    80ce:	11 97       	sbiw	r26, 0x01	; 1
    80d0:	9f 01       	movw	r18, r30
    80d2:	2f 5f       	subi	r18, 0xFF	; 255
    80d4:	3f 4f       	sbci	r19, 0xFF	; 255
    80d6:	11 96       	adiw	r26, 0x01	; 1
    80d8:	3c 93       	st	X, r19
    80da:	2e 93       	st	-X, r18
    80dc:	e4 91       	lpm	r30, Z
    80de:	e7 fd       	sbrc	r30, 7
    80e0:	03 c0       	rjmp	.+6      	; 0x80e8 <ReadVarLen+0x20>
    80e2:	8e 2f       	mov	r24, r30
    80e4:	90 e0       	ldi	r25, 0x00	; 0
    80e6:	08 95       	ret
    {
       value &= 0x7F;
    80e8:	ef 77       	andi	r30, 0x7F	; 127
    80ea:	8e 2f       	mov	r24, r30
    80ec:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    80ee:	96 95       	lsr	r25
    80f0:	98 2f       	mov	r25, r24
    80f2:	88 27       	eor	r24, r24
    80f4:	97 95       	ror	r25
    80f6:	87 95       	ror	r24
    80f8:	2f 5f       	subi	r18, 0xFF	; 255
    80fa:	3f 4f       	sbci	r19, 0xFF	; 255
    80fc:	f9 01       	movw	r30, r18
    80fe:	31 97       	sbiw	r30, 0x01	; 1
    8100:	e4 91       	lpm	r30, Z
    8102:	4e 2f       	mov	r20, r30
    8104:	4f 77       	andi	r20, 0x7F	; 127
    8106:	84 0f       	add	r24, r20
    8108:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    810a:	e7 fd       	sbrc	r30, 7
    810c:	f0 cf       	rjmp	.-32     	; 0x80ee <ReadVarLen+0x26>
    810e:	2d 93       	st	X+, r18
    8110:	3c 93       	st	X, r19
    }


    return value;
}
    8112:	08 95       	ret

00008114 <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    8114:	cf 92       	push	r12
    8116:	df 92       	push	r13
    8118:	ff 92       	push	r15
    811a:	0f 93       	push	r16
    811c:	1f 93       	push	r17
    811e:	cf 93       	push	r28
    8120:	df 93       	push	r29
    8122:	1f 92       	push	r1
    8124:	cd b7       	in	r28, 0x3d	; 61
    8126:	de b7       	in	r29, 0x3e	; 62
    8128:	18 2f       	mov	r17, r24
    812a:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    812c:	c8 2e       	mov	r12, r24
    812e:	d1 2c       	mov	r13, r1
    8130:	36 e1       	ldi	r19, 0x16	; 22
    8132:	83 9f       	mul	r24, r19
    8134:	f0 01       	movw	r30, r0
    8136:	11 24       	eor	r1, r1
    8138:	e1 5c       	subi	r30, 0xC1	; 193
    813a:	f4 4f       	sbci	r31, 0xF4	; 244
    813c:	80 81       	ld	r24, Z
    813e:	f8 2e       	mov	r15, r24
    8140:	ff 1c       	adc	r15, r15
    8142:	ff 24       	eor	r15, r15
    8144:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    8146:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    8148:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    814a:	9f ef       	ldi	r25, 0xFF	; 255
    814c:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    814e:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    8150:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    8152:	87 7b       	andi	r24, 0xB7	; 183
    8154:	80 62       	ori	r24, 0x20	; 32
    8156:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    8158:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    815a:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    815c:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    815e:	13 30       	cpi	r17, 0x03	; 3
    8160:	69 f4       	brne	.+26     	; 0x817c <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    8162:	f1 10       	cpse	r15, r1
    8164:	01 c0       	rjmp	.+2      	; 0x8168 <TriggerCommon+0x54>
    8166:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    8168:	81 e0       	ldi	r24, 0x01	; 1
    816a:	91 e0       	ldi	r25, 0x01	; 1
    816c:	90 93 17 0b 	sts	0x0B17, r25
    8170:	80 93 16 0b 	sts	0x0B16, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    8174:	81 e0       	ldi	r24, 0x01	; 1
    8176:	80 93 15 0b 	sts	0x0B15, r24
    817a:	3c c0       	rjmp	.+120    	; 0x81f4 <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    817c:	14 30       	cpi	r17, 0x04	; 4
    817e:	09 f0       	breq	.+2      	; 0x8182 <TriggerCommon+0x6e>
    8180:	2f c0       	rjmp	.+94     	; 0x81e0 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    8182:	10 92 1d 0b 	sts	0x0B1D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    8186:	80 91 af 0b 	lds	r24, 0x0BAF
    818a:	90 91 b0 0b 	lds	r25, 0x0BB0
    818e:	e9 e0       	ldi	r30, 0x09	; 9
    8190:	6e 9f       	mul	r22, r30
    8192:	80 0d       	add	r24, r0
    8194:	91 1d       	adc	r25, r1
    8196:	11 24       	eor	r1, r1
    8198:	fc 01       	movw	r30, r24
    819a:	31 96       	adiw	r30, 0x01	; 1
    819c:	65 91       	lpm	r22, Z+
    819e:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    81a0:	70 93 1f 0b 	sts	0x0B1F, r23
    81a4:	60 93 1e 0b 	sts	0x0B1E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    81a8:	ac 01       	movw	r20, r24
    81aa:	49 5f       	subi	r20, 0xF9	; 249
    81ac:	5f 4f       	sbci	r21, 0xFF	; 255
    81ae:	fa 01       	movw	r30, r20
    81b0:	a5 91       	lpm	r26, Z+
    81b2:	b4 91       	lpm	r27, Z
    81b4:	05 96       	adiw	r24, 0x05	; 5
    81b6:	fc 01       	movw	r30, r24
    81b8:	85 91       	lpm	r24, Z+
    81ba:	94 91       	lpm	r25, Z
    81bc:	a8 1b       	sub	r26, r24
    81be:	b9 0b       	sbc	r27, r25
    81c0:	b0 93 21 0b 	sts	0x0B21, r27
    81c4:	a0 93 20 0b 	sts	0x0B20, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    81c8:	fa 01       	movw	r30, r20
    81ca:	85 91       	lpm	r24, Z+
    81cc:	94 91       	lpm	r25, Z
    81ce:	68 0f       	add	r22, r24
    81d0:	79 1f       	adc	r23, r25
    81d2:	70 93 23 0b 	sts	0x0B23, r23
    81d6:	60 93 22 0b 	sts	0x0B22, r22
				SetMixerNote(channel,note);
    81da:	62 2f       	mov	r22, r18
    81dc:	84 e0       	ldi	r24, 0x04	; 4
    81de:	08 c0       	rjmp	.+16     	; 0x81f0 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    81e0:	60 e0       	ldi	r22, 0x00	; 0
    81e2:	81 2f       	mov	r24, r17
    81e4:	29 83       	std	Y+1, r18	; 0x01
    81e6:	0e 94 af 43 	call	0x875e	; 0x875e <SetMixerWave>
			SetMixerNote(channel,note);
    81ea:	29 81       	ldd	r18, Y+1	; 0x01
    81ec:	62 2f       	mov	r22, r18
    81ee:	81 2f       	mov	r24, r17
    81f0:	0e 94 98 43 	call	0x8730	; 0x8730 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    81f4:	86 e1       	ldi	r24, 0x16	; 22
    81f6:	8c 9d       	mul	r24, r12
    81f8:	f0 01       	movw	r30, r0
    81fa:	8d 9d       	mul	r24, r13
    81fc:	f0 0d       	add	r31, r0
    81fe:	11 24       	eor	r1, r1
    8200:	e1 5c       	subi	r30, 0xC1	; 193
    8202:	f4 4f       	sbci	r31, 0xF4	; 244

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    8204:	ff 20       	and	r15, r15
    8206:	11 f0       	breq	.+4      	; 0x820c <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    8208:	07 87       	std	Z+15, r16	; 0x0f
    820a:	01 c0       	rjmp	.+2      	; 0x820e <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    820c:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    820e:	e0 91 af 0b 	lds	r30, 0x0BAF
    8212:	f0 91 b0 0b 	lds	r31, 0x0BB0
    8216:	39 e0       	ldi	r19, 0x09	; 9
    8218:	03 9f       	mul	r16, r19
    821a:	e0 0d       	add	r30, r0
    821c:	f1 1d       	adc	r31, r1
    821e:	11 24       	eor	r1, r1
    8220:	33 96       	adiw	r30, 0x03	; 3
    8222:	85 91       	lpm	r24, Z+
    8224:	94 91       	lpm	r25, Z
	if(pos==NULL){
    8226:	00 97       	sbiw	r24, 0x00	; 0
    8228:	59 f4       	brne	.+22     	; 0x8240 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    822a:	86 e1       	ldi	r24, 0x16	; 22
    822c:	8c 9d       	mul	r24, r12
    822e:	f0 01       	movw	r30, r0
    8230:	8d 9d       	mul	r24, r13
    8232:	f0 0d       	add	r31, r0
    8234:	11 24       	eor	r1, r1
    8236:	e1 5c       	subi	r30, 0xC1	; 193
    8238:	f4 4f       	sbci	r31, 0xF4	; 244
    823a:	15 8a       	std	Z+21, r1	; 0x15
    823c:	14 8a       	std	Z+20, r1	; 0x14
    823e:	0e c0       	rjmp	.+28     	; 0x825c <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    8240:	fc 01       	movw	r30, r24
    8242:	24 91       	lpm	r18, Z
    8244:	36 e1       	ldi	r19, 0x16	; 22
    8246:	3c 9d       	mul	r19, r12
    8248:	f0 01       	movw	r30, r0
    824a:	3d 9d       	mul	r19, r13
    824c:	f0 0d       	add	r31, r0
    824e:	11 24       	eor	r1, r1
    8250:	e1 5c       	subi	r30, 0xC1	; 193
    8252:	f4 4f       	sbci	r31, 0xF4	; 244
    8254:	21 8b       	std	Z+17, r18	; 0x11
    8256:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    8258:	95 8b       	std	Z+21, r25	; 0x15
    825a:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    825c:	0f 90       	pop	r0
    825e:	df 91       	pop	r29
    8260:	cf 91       	pop	r28
    8262:	1f 91       	pop	r17
    8264:	0f 91       	pop	r16
    8266:	ff 90       	pop	r15
    8268:	df 90       	pop	r13
    826a:	cf 90       	pop	r12
    826c:	08 95       	ret

0000826e <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    826e:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    8270:	a8 2f       	mov	r26, r24
    8272:	b0 e0       	ldi	r27, 0x00	; 0
    8274:	96 e1       	ldi	r25, 0x16	; 22
    8276:	89 9f       	mul	r24, r25
    8278:	f0 01       	movw	r30, r0
    827a:	11 24       	eor	r1, r1
    827c:	e1 5c       	subi	r30, 0xC1	; 193
    827e:	f4 4f       	sbci	r31, 0xF4	; 244
    8280:	90 81       	ld	r25, Z
    8282:	95 ff       	sbrs	r25, 5
    8284:	02 c0       	rjmp	.+4      	; 0x828a <TriggerNote+0x1c>
    8286:	97 fd       	sbrc	r25, 7
    8288:	28 c0       	rjmp	.+80     	; 0x82da <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    828a:	31 11       	cpse	r19, r1
    828c:	18 c0       	rjmp	.+48     	; 0x82be <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    828e:	86 e1       	ldi	r24, 0x16	; 22
    8290:	8a 9f       	mul	r24, r26
    8292:	f0 01       	movw	r30, r0
    8294:	8b 9f       	mul	r24, r27
    8296:	f0 0d       	add	r31, r0
    8298:	11 24       	eor	r1, r1
    829a:	e1 5c       	subi	r30, 0xC1	; 193
    829c:	f4 4f       	sbci	r31, 0xF4	; 244
    829e:	85 85       	ldd	r24, Z+13	; 0x0d
    82a0:	81 11       	cpse	r24, r1
    82a2:	02 c0       	rjmp	.+4      	; 0x82a8 <TriggerNote+0x3a>
    82a4:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    82a6:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    82a8:	86 e1       	ldi	r24, 0x16	; 22
    82aa:	8a 9f       	mul	r24, r26
    82ac:	f0 01       	movw	r30, r0
    82ae:	8b 9f       	mul	r24, r27
    82b0:	f0 0d       	add	r31, r0
    82b2:	11 24       	eor	r1, r1
    82b4:	e1 5c       	subi	r30, 0xC1	; 193
    82b6:	f4 4f       	sbci	r31, 0xF4	; 244
    82b8:	9f 7b       	andi	r25, 0xBF	; 191
    82ba:	90 83       	st	Z, r25
    82bc:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    82be:	26 e1       	ldi	r18, 0x16	; 22
    82c0:	2a 9f       	mul	r18, r26
    82c2:	f0 01       	movw	r30, r0
    82c4:	2b 9f       	mul	r18, r27
    82c6:	f0 0d       	add	r31, r0
    82c8:	11 24       	eor	r1, r1
    82ca:	e1 5c       	subi	r30, 0xC1	; 193
    82cc:	f4 4f       	sbci	r31, 0xF4	; 244
    82ce:	9f 77       	andi	r25, 0x7F	; 127
    82d0:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    82d2:	24 2f       	mov	r18, r20
    82d4:	43 2f       	mov	r20, r19
    82d6:	0c 94 8a 40 	jmp	0x8114	; 0x8114 <TriggerCommon>
    82da:	08 95       	ret

000082dc <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    82dc:	5f 92       	push	r5
    82de:	6f 92       	push	r6
    82e0:	7f 92       	push	r7
    82e2:	8f 92       	push	r8
    82e4:	9f 92       	push	r9
    82e6:	af 92       	push	r10
    82e8:	bf 92       	push	r11
    82ea:	cf 92       	push	r12
    82ec:	df 92       	push	r13
    82ee:	ef 92       	push	r14
    82f0:	ff 92       	push	r15
    82f2:	0f 93       	push	r16
    82f4:	1f 93       	push	r17
    82f6:	cf 93       	push	r28
    82f8:	df 93       	push	r29
    82fa:	cf e3       	ldi	r28, 0x3F	; 63
    82fc:	db e0       	ldi	r29, 0x0B	; 11
    82fe:	82 e0       	ldi	r24, 0x02	; 2
    8300:	e8 2e       	mov	r14, r24
    8302:	8b e0       	ldi	r24, 0x0B	; 11
    8304:	f8 2e       	mov	r15, r24
    8306:	d7 01       	movw	r26, r14
    8308:	9e 01       	movw	r18, r28
    830a:	40 e0       	ldi	r20, 0x00	; 0
    830c:	50 e0       	ldi	r21, 0x00	; 0
    830e:	ca 01       	movw	r24, r20
    8310:	81 5c       	subi	r24, 0xC1	; 193
    8312:	94 4f       	sbci	r25, 0xF4	; 244
    8314:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    8316:	fc 01       	movw	r30, r24
    8318:	85 85       	ldd	r24, Z+13	; 0x0d
    831a:	88 23       	and	r24, r24
    831c:	91 f0       	breq	.+36     	; 0x8342 <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    831e:	64 85       	ldd	r22, Z+12	; 0x0c
    8320:	99 27       	eor	r25, r25
    8322:	87 fd       	sbrc	r24, 7
    8324:	90 95       	com	r25
    8326:	86 0f       	add	r24, r22
    8328:	91 1d       	adc	r25, r1
    832a:	8f 3f       	cpi	r24, 0xFF	; 255
    832c:	91 05       	cpc	r25, r1
    832e:	19 f0       	breq	.+6      	; 0x8336 <ProcessMusic+0x5a>
    8330:	14 f0       	brlt	.+4      	; 0x8336 <ProcessMusic+0x5a>
    8332:	8f ef       	ldi	r24, 0xFF	; 255
    8334:	90 e0       	ldi	r25, 0x00	; 0
    8336:	97 ff       	sbrs	r25, 7
    8338:	02 c0       	rjmp	.+4      	; 0x833e <ProcessMusic+0x62>
    833a:	80 e0       	ldi	r24, 0x00	; 0
    833c:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    833e:	f6 01       	movw	r30, r12
    8340:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    8342:	f9 01       	movw	r30, r18
    8344:	10 81       	ld	r17, Z
    8346:	13 ff       	sbrs	r17, 3
    8348:	29 c0       	rjmp	.+82     	; 0x839c <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    834a:	62 81       	ldd	r22, Z+2	; 0x02
    834c:	73 81       	ldd	r23, Z+3	; 0x03
    834e:	11 96       	adiw	r26, 0x01	; 1
    8350:	8d 91       	ld	r24, X+
    8352:	9c 91       	ld	r25, X
    8354:	12 97       	sbiw	r26, 0x02	; 2
    8356:	86 0f       	add	r24, r22
    8358:	97 1f       	adc	r25, r23
    835a:	12 96       	adiw	r26, 0x02	; 2
    835c:	9c 93       	st	X, r25
    835e:	8e 93       	st	-X, r24
    8360:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    8362:	f6 01       	movw	r30, r12
    8364:	04 81       	ldd	r16, Z+4	; 0x04
    8366:	e0 2f       	mov	r30, r16
    8368:	f0 e0       	ldi	r31, 0x00	; 0
    836a:	ee 0f       	add	r30, r30
    836c:	ff 1f       	adc	r31, r31
    836e:	e8 5f       	subi	r30, 0xF8	; 248
    8370:	f7 47       	sbci	r31, 0x77	; 119
    8372:	c5 90       	lpm	r12, Z+
    8374:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    8376:	16 16       	cp	r1, r22
    8378:	17 06       	cpc	r1, r23
    837a:	24 f4       	brge	.+8      	; 0x8384 <ProcessMusic+0xa8>
    837c:	8c 15       	cp	r24, r12
    837e:	9d 05       	cpc	r25, r13
    8380:	30 f4       	brcc	.+12     	; 0x838e <ProcessMusic+0xb2>
    8382:	0c c0       	rjmp	.+24     	; 0x839c <ProcessMusic+0xc0>
    8384:	67 2b       	or	r22, r23
    8386:	51 f0       	breq	.+20     	; 0x839c <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    8388:	c8 16       	cp	r12, r24
    838a:	d9 06       	cpc	r13, r25
    838c:	38 f0       	brcs	.+14     	; 0x839c <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    838e:	12 96       	adiw	r26, 0x02	; 2
    8390:	dc 92       	st	X, r13
    8392:	ce 92       	st	-X, r12
    8394:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    8396:	17 7f       	andi	r17, 0xF7	; 247
    8398:	f9 01       	movw	r30, r18
    839a:	10 83       	st	Z, r17
    839c:	4a 5e       	subi	r20, 0xEA	; 234
    839e:	5f 4f       	sbci	r21, 0xFF	; 255
    83a0:	2a 5e       	subi	r18, 0xEA	; 234
    83a2:	3f 4f       	sbci	r19, 0xFF	; 255
    83a4:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    83a6:	4e 36       	cpi	r20, 0x6E	; 110
    83a8:	51 05       	cpc	r21, r1
    83aa:	09 f0       	breq	.+2      	; 0x83ae <ProcessMusic+0xd2>
    83ac:	b0 cf       	rjmp	.-160    	; 0x830e <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    83ae:	80 91 00 0b 	lds	r24, 0x0B00
    83b2:	88 23       	and	r24, r24
    83b4:	09 f4       	brne	.+2      	; 0x83b8 <ProcessMusic+0xdc>
    83b6:	cb c0       	rjmp	.+406    	; 0x854e <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    83b8:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    83ba:	80 91 ad 0b 	lds	r24, 0x0BAD
    83be:	90 91 ae 0b 	lds	r25, 0x0BAE
    83c2:	20 91 b3 0b 	lds	r18, 0x0BB3
    83c6:	30 91 b4 0b 	lds	r19, 0x0BB4
    83ca:	82 17       	cp	r24, r18
    83cc:	93 07       	cpc	r25, r19
    83ce:	09 f0       	breq	.+2      	; 0x83d2 <ProcessMusic+0xf6>
    83d0:	b9 c0       	rjmp	.+370    	; 0x8544 <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    83d2:	20 91 b6 0b 	lds	r18, 0x0BB6
    83d6:	30 91 b7 0b 	lds	r19, 0x0BB7
    83da:	b9 01       	movw	r22, r18
    83dc:	6f 5f       	subi	r22, 0xFF	; 255
    83de:	7f 4f       	sbci	r23, 0xFF	; 255
    83e0:	70 93 b7 0b 	sts	0x0BB7, r23
    83e4:	60 93 b6 0b 	sts	0x0BB6, r22
    83e8:	f9 01       	movw	r30, r18
    83ea:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    83ec:	4f 3f       	cpi	r20, 0xFF	; 255
    83ee:	79 f5       	brne	.+94     	; 0x844e <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    83f0:	a9 01       	movw	r20, r18
    83f2:	4e 5f       	subi	r20, 0xFE	; 254
    83f4:	5f 4f       	sbci	r21, 0xFF	; 255
    83f6:	50 93 b7 0b 	sts	0x0BB7, r21
    83fa:	40 93 b6 0b 	sts	0x0BB6, r20
    83fe:	fb 01       	movw	r30, r22
    8400:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    8402:	6f 32       	cpi	r22, 0x2F	; 47
    8404:	19 f4       	brne	.+6      	; 0x840c <ProcessMusic+0x130>
						playSong=false;
    8406:	10 92 00 0b 	sts	0x0B00, r1
						break;	
    840a:	9c c0       	rjmp	.+312    	; 0x8544 <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    840c:	66 30       	cpi	r22, 0x06	; 6
    840e:	09 f0       	breq	.+2      	; 0x8412 <ProcessMusic+0x136>
    8410:	8c c0       	rjmp	.+280    	; 0x852a <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    8412:	fa 01       	movw	r30, r20
    8414:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    8416:	c9 01       	movw	r24, r18
    8418:	04 96       	adiw	r24, 0x04	; 4
    841a:	90 93 b7 0b 	sts	0x0BB7, r25
    841e:	80 93 b6 0b 	sts	0x0BB6, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    8422:	f9 01       	movw	r30, r18
    8424:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    8426:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    8428:	e3 35       	cpi	r30, 0x53	; 83
    842a:	29 f4       	brne	.+10     	; 0x8436 <ProcessMusic+0x15a>
							loopStart=songPos;
    842c:	90 93 b9 0b 	sts	0x0BB9, r25
    8430:	80 93 b8 0b 	sts	0x0BB8, r24
    8434:	7a c0       	rjmp	.+244    	; 0x852a <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    8436:	e5 34       	cpi	r30, 0x45	; 69
    8438:	09 f0       	breq	.+2      	; 0x843c <ProcessMusic+0x160>
    843a:	77 c0       	rjmp	.+238    	; 0x852a <ProcessMusic+0x24e>
							songPos=loopStart;
    843c:	80 91 b8 0b 	lds	r24, 0x0BB8
    8440:	90 91 b9 0b 	lds	r25, 0x0BB9
    8444:	90 93 b7 0b 	sts	0x0BB7, r25
    8448:	80 93 b6 0b 	sts	0x0BB6, r24
    844c:	6e c0       	rjmp	.+220    	; 0x852a <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    844e:	47 fd       	sbrc	r20, 7
    8450:	40 93 b1 0b 	sts	0x0BB1, r20
					channel=lastStatus&0x0f;
    8454:	90 91 b1 0b 	lds	r25, 0x0BB1
    8458:	89 2f       	mov	r24, r25
    845a:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    845c:	47 ff       	sbrs	r20, 7
    845e:	08 c0       	rjmp	.+16     	; 0x8470 <ProcessMusic+0x194>
    8460:	2e 5f       	subi	r18, 0xFE	; 254
    8462:	3f 4f       	sbci	r19, 0xFF	; 255
    8464:	30 93 b7 0b 	sts	0x0BB7, r19
    8468:	20 93 b6 0b 	sts	0x0BB6, r18
    846c:	fb 01       	movw	r30, r22
    846e:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    8470:	90 7f       	andi	r25, 0xF0	; 240
    8472:	90 3b       	cpi	r25, 0xB0	; 176
    8474:	e1 f0       	breq	.+56     	; 0x84ae <ProcessMusic+0x1d2>
    8476:	90 3c       	cpi	r25, 0xC0	; 192
    8478:	09 f4       	brne	.+2      	; 0x847c <ProcessMusic+0x1a0>
    847a:	51 c0       	rjmp	.+162    	; 0x851e <ProcessMusic+0x242>
    847c:	90 39       	cpi	r25, 0x90	; 144
    847e:	09 f0       	breq	.+2      	; 0x8482 <ProcessMusic+0x1a6>
    8480:	54 c0       	rjmp	.+168    	; 0x852a <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    8482:	e0 91 b6 0b 	lds	r30, 0x0BB6
    8486:	f0 91 b7 0b 	lds	r31, 0x0BB7
    848a:	9f 01       	movw	r18, r30
    848c:	2f 5f       	subi	r18, 0xFF	; 255
    848e:	3f 4f       	sbci	r19, 0xFF	; 255
    8490:	30 93 b7 0b 	sts	0x0BB7, r19
    8494:	20 93 b6 0b 	sts	0x0BB6, r18
    8498:	24 91       	lpm	r18, Z
    849a:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    849c:	18 9f       	mul	r17, r24
    849e:	f0 01       	movw	r30, r0
    84a0:	11 24       	eor	r1, r1
    84a2:	e1 5c       	subi	r30, 0xC1	; 193
    84a4:	f4 4f       	sbci	r31, 0xF4	; 244
    84a6:	66 85       	ldd	r22, Z+14	; 0x0e
    84a8:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
    84ac:	3e c0       	rjmp	.+124    	; 0x852a <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    84ae:	e0 91 b6 0b 	lds	r30, 0x0BB6
    84b2:	f0 91 b7 0b 	lds	r31, 0x0BB7
    84b6:	9f 01       	movw	r18, r30
    84b8:	2f 5f       	subi	r18, 0xFF	; 255
    84ba:	3f 4f       	sbci	r19, 0xFF	; 255
    84bc:	30 93 b7 0b 	sts	0x0BB7, r19
    84c0:	20 93 b6 0b 	sts	0x0BB6, r18
    84c4:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    84c6:	47 30       	cpi	r20, 0x07	; 7
    84c8:	49 f4       	brne	.+18     	; 0x84dc <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    84ca:	18 9f       	mul	r17, r24
    84cc:	d0 01       	movw	r26, r0
    84ce:	11 24       	eor	r1, r1
    84d0:	a1 5c       	subi	r26, 0xC1	; 193
    84d2:	b4 4f       	sbci	r27, 0xF4	; 244
    84d4:	ee 0f       	add	r30, r30
    84d6:	1a 96       	adiw	r26, 0x0a	; 10
    84d8:	ec 93       	st	X, r30
    84da:	27 c0       	rjmp	.+78     	; 0x852a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    84dc:	4b 30       	cpi	r20, 0x0B	; 11
    84de:	49 f4       	brne	.+18     	; 0x84f2 <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    84e0:	18 9f       	mul	r17, r24
    84e2:	d0 01       	movw	r26, r0
    84e4:	11 24       	eor	r1, r1
    84e6:	a1 5c       	subi	r26, 0xC1	; 193
    84e8:	b4 4f       	sbci	r27, 0xF4	; 244
    84ea:	ee 0f       	add	r30, r30
    84ec:	19 96       	adiw	r26, 0x09	; 9
    84ee:	ec 93       	st	X, r30
    84f0:	1c c0       	rjmp	.+56     	; 0x852a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    84f2:	4c 35       	cpi	r20, 0x5C	; 92
    84f4:	49 f4       	brne	.+18     	; 0x8508 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    84f6:	18 9f       	mul	r17, r24
    84f8:	d0 01       	movw	r26, r0
    84fa:	11 24       	eor	r1, r1
    84fc:	a1 5c       	subi	r26, 0xC1	; 193
    84fe:	b4 4f       	sbci	r27, 0xF4	; 244
    8500:	ee 0f       	add	r30, r30
    8502:	17 96       	adiw	r26, 0x07	; 7
    8504:	ec 93       	st	X, r30
    8506:	11 c0       	rjmp	.+34     	; 0x852a <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    8508:	44 36       	cpi	r20, 0x64	; 100
    850a:	79 f4       	brne	.+30     	; 0x852a <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    850c:	18 9f       	mul	r17, r24
    850e:	d0 01       	movw	r26, r0
    8510:	11 24       	eor	r1, r1
    8512:	a1 5c       	subi	r26, 0xC1	; 193
    8514:	b4 4f       	sbci	r27, 0xF4	; 244
    8516:	ee 0f       	add	r30, r30
    8518:	18 96       	adiw	r26, 0x08	; 8
    851a:	ec 93       	st	X, r30
    851c:	06 c0       	rjmp	.+12     	; 0x852a <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    851e:	18 9f       	mul	r17, r24
    8520:	f0 01       	movw	r30, r0
    8522:	11 24       	eor	r1, r1
    8524:	e1 5c       	subi	r30, 0xC1	; 193
    8526:	f4 4f       	sbci	r31, 0xF4	; 244
    8528:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    852a:	86 eb       	ldi	r24, 0xB6	; 182
    852c:	9b e0       	ldi	r25, 0x0B	; 11
    852e:	0e 94 64 40 	call	0x80c8	; 0x80c8 <ReadVarLen>
    8532:	90 93 b4 0b 	sts	0x0BB4, r25
    8536:	80 93 b3 0b 	sts	0x0BB3, r24
				currDeltaTime=0;
    853a:	10 92 ae 0b 	sts	0x0BAE, r1
    853e:	10 92 ad 0b 	sts	0x0BAD, r1
    8542:	3b cf       	rjmp	.-394    	; 0x83ba <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    8544:	01 96       	adiw	r24, 0x01	; 1
    8546:	90 93 ae 0b 	sts	0x0BAE, r25
    854a:	80 93 ad 0b 	sts	0x0BAD, r24
    854e:	95 e4       	ldi	r25, 0x45	; 69
    8550:	a9 2e       	mov	r10, r25
    8552:	9b e0       	ldi	r25, 0x0B	; 11
    8554:	b9 2e       	mov	r11, r25
    8556:	01 e5       	ldi	r16, 0x51	; 81
    8558:	1b e0       	ldi	r17, 0x0B	; 11
    855a:	20 e5       	ldi	r18, 0x50	; 80
    855c:	c2 2e       	mov	r12, r18
    855e:	2b e0       	ldi	r18, 0x0B	; 11
    8560:	d2 2e       	mov	r13, r18
    8562:	32 e5       	ldi	r19, 0x52	; 82
    8564:	83 2e       	mov	r8, r19
    8566:	3b e0       	ldi	r19, 0x0B	; 11
    8568:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    856a:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    856c:	66 24       	eor	r6, r6
    856e:	6a 94       	dec	r6
    8570:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    8572:	88 81       	ld	r24, Y
    8574:	86 fd       	sbrc	r24, 6
    8576:	43 c0       	rjmp	.+134    	; 0x85fe <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    8578:	8c 89       	ldd	r24, Y+20	; 0x14
    857a:	9d 89       	ldd	r25, Y+21	; 0x15
    857c:	89 2b       	or	r24, r25
    857e:	09 f4       	brne	.+2      	; 0x8582 <ProcessMusic+0x2a6>
    8580:	3a c0       	rjmp	.+116    	; 0x85f6 <ProcessMusic+0x31a>
    8582:	d8 01       	movw	r26, r16
    8584:	9c 91       	ld	r25, X
    8586:	f6 01       	movw	r30, r12
    8588:	80 81       	ld	r24, Z
    858a:	98 17       	cp	r25, r24
    858c:	08 f4       	brcc	.+2      	; 0x8590 <ProcessMusic+0x2b4>
    858e:	33 c0       	rjmp	.+102    	; 0x85f6 <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    8590:	d8 01       	movw	r26, r16
    8592:	9c 91       	ld	r25, X
    8594:	f6 01       	movw	r30, r12
    8596:	80 81       	ld	r24, Z
    8598:	98 13       	cpse	r25, r24
    859a:	2d c0       	rjmp	.+90     	; 0x85f6 <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    859c:	ec 89       	ldd	r30, Y+20	; 0x14
    859e:	fd 89       	ldd	r31, Y+21	; 0x15
    85a0:	af 01       	movw	r20, r30
    85a2:	4f 5f       	subi	r20, 0xFF	; 255
    85a4:	5f 4f       	sbci	r21, 0xFF	; 255
    85a6:	5d 8b       	std	Y+21, r21	; 0x15
    85a8:	4c 8b       	std	Y+20, r20	; 0x14
    85aa:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    85ac:	8f 3f       	cpi	r24, 0xFF	; 255
    85ae:	31 f4       	brne	.+12     	; 0x85bc <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    85b0:	88 81       	ld	r24, Y
    85b2:	8f 77       	andi	r24, 0x7F	; 127
    85b4:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    85b6:	1d 8a       	std	Y+21, r1	; 0x15
    85b8:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    85ba:	1d c0       	rjmp	.+58     	; 0x85f6 <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    85bc:	32 96       	adiw	r30, 0x02	; 2
    85be:	fd 8b       	std	Y+21, r31	; 0x15
    85c0:	ec 8b       	std	Y+20, r30	; 0x14
    85c2:	fa 01       	movw	r30, r20
    85c4:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    85c6:	e8 2f       	mov	r30, r24
    85c8:	f0 e0       	ldi	r31, 0x00	; 0
    85ca:	ee 0f       	add	r30, r30
    85cc:	ff 1f       	adc	r31, r31
    85ce:	e0 53       	subi	r30, 0x30	; 48
    85d0:	ff 4f       	sbci	r31, 0xFF	; 255
    85d2:	25 91       	lpm	r18, Z+
    85d4:	34 91       	lpm	r19, Z
    85d6:	65 2d       	mov	r22, r5
    85d8:	ce 01       	movw	r24, r28
    85da:	f9 01       	movw	r30, r18
    85dc:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    85de:	ec 89       	ldd	r30, Y+20	; 0x14
    85e0:	fd 89       	ldd	r31, Y+21	; 0x15
    85e2:	cf 01       	movw	r24, r30
    85e4:	01 96       	adiw	r24, 0x01	; 1
    85e6:	9d 8b       	std	Y+21, r25	; 0x15
    85e8:	8c 8b       	std	Y+20, r24	; 0x14
    85ea:	e4 91       	lpm	r30, Z
    85ec:	d6 01       	movw	r26, r12
    85ee:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    85f0:	f8 01       	movw	r30, r16
    85f2:	10 82       	st	Z, r1
    85f4:	cd cf       	rjmp	.-102    	; 0x8590 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    85f6:	d8 01       	movw	r26, r16
    85f8:	8c 91       	ld	r24, X
    85fa:	8f 5f       	subi	r24, 0xFF	; 255
    85fc:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    85fe:	98 81       	ld	r25, Y
    8600:	95 ff       	sbrs	r25, 5
    8602:	6c c0       	rjmp	.+216    	; 0x86dc <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    8604:	f4 01       	movw	r30, r8
    8606:	80 81       	ld	r24, Z
    8608:	8f 3f       	cpi	r24, 0xFF	; 255
    860a:	11 f0       	breq	.+4      	; 0x8610 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    860c:	8f 5f       	subi	r24, 0xFF	; 255
    860e:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    8610:	97 fd       	sbrc	r25, 7
    8612:	04 c0       	rjmp	.+8      	; 0x861c <ProcessMusic+0x340>
    8614:	f8 01       	movw	r30, r16
    8616:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    8618:	90 81       	ld	r25, Z
    861a:	01 c0       	rjmp	.+2      	; 0x861e <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    861c:	9f ef       	ldi	r25, 0xFF	; 255
    861e:	f8 01       	movw	r30, r16
    8620:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    8622:	80 81       	ld	r24, Z
    8624:	88 23       	and	r24, r24
    8626:	09 f4       	brne	.+2      	; 0x862a <ProcessMusic+0x34e>
    8628:	4e c0       	rjmp	.+156    	; 0x86c6 <ProcessMusic+0x3ea>
    862a:	31 96       	adiw	r30, 0x01	; 1
    862c:	50 81       	ld	r21, Z
    862e:	55 23       	and	r21, r21
    8630:	09 f4       	brne	.+2      	; 0x8634 <ProcessMusic+0x358>
    8632:	49 c0       	rjmp	.+146    	; 0x86c6 <ProcessMusic+0x3ea>
    8634:	99 23       	and	r25, r25
    8636:	09 f4       	brne	.+2      	; 0x863a <ProcessMusic+0x35e>
    8638:	46 c0       	rjmp	.+140    	; 0x86c6 <ProcessMusic+0x3ea>
    863a:	40 91 b2 0b 	lds	r20, 0x0BB2
    863e:	44 23       	and	r20, r20
    8640:	09 f4       	brne	.+2      	; 0x8644 <ProcessMusic+0x368>
    8642:	41 c0       	rjmp	.+130    	; 0x86c6 <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    8644:	89 9f       	mul	r24, r25
    8646:	c0 01       	movw	r24, r0
    8648:	11 24       	eor	r1, r1
    864a:	93 95       	inc	r25
				uVol>>=8;
    864c:	89 2f       	mov	r24, r25
    864e:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    8650:	58 9f       	mul	r21, r24
    8652:	90 01       	movw	r18, r0
    8654:	59 9f       	mul	r21, r25
    8656:	30 0d       	add	r19, r0
    8658:	11 24       	eor	r1, r1
    865a:	c9 01       	movw	r24, r18
    865c:	93 95       	inc	r25
				uVol>>=8;
    865e:	89 2f       	mov	r24, r25
    8660:	99 27       	eor	r25, r25
    8662:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    8664:	50 81       	ld	r21, Z
    8666:	58 9f       	mul	r21, r24
    8668:	90 01       	movw	r18, r0
    866a:	59 9f       	mul	r21, r25
    866c:	30 0d       	add	r19, r0
    866e:	11 24       	eor	r1, r1
    8670:	33 95       	inc	r19
				uVol>>=8;
    8672:	23 2f       	mov	r18, r19
    8674:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    8676:	42 9f       	mul	r20, r18
    8678:	c0 01       	movw	r24, r0
    867a:	43 9f       	mul	r20, r19
    867c:	90 0d       	add	r25, r0
    867e:	11 24       	eor	r1, r1
    8680:	93 95       	inc	r25
				uVol>>=8;
    8682:	89 2f       	mov	r24, r25
    8684:	99 27       	eor	r25, r25
    8686:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    8688:	20 81       	ld	r18, Z
    868a:	22 23       	and	r18, r18
    868c:	f1 f0       	breq	.+60     	; 0x86ca <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    868e:	d5 01       	movw	r26, r10
    8690:	ec 91       	ld	r30, X
    8692:	f0 e0       	ldi	r31, 0x00	; 0
    8694:	e0 50       	subi	r30, 0x00	; 0
    8696:	f6 47       	sbci	r31, 0x76	; 118
    8698:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    869a:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    869c:	2e 9f       	mul	r18, r30
    869e:	f0 01       	movw	r30, r0
    86a0:	11 24       	eor	r1, r1
    86a2:	f3 95       	inc	r31
					tVol>>=8;
    86a4:	ef 2f       	mov	r30, r31
    86a6:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    86a8:	a3 01       	movw	r20, r6
    86aa:	4e 1b       	sub	r20, r30
    86ac:	5f 0b       	sbc	r21, r31
    86ae:	48 9f       	mul	r20, r24
    86b0:	90 01       	movw	r18, r0
    86b2:	49 9f       	mul	r20, r25
    86b4:	30 0d       	add	r19, r0
    86b6:	58 9f       	mul	r21, r24
    86b8:	30 0d       	add	r19, r0
    86ba:	11 24       	eor	r1, r1
    86bc:	c9 01       	movw	r24, r18
    86be:	93 95       	inc	r25
					uVol>>=8;
    86c0:	89 2f       	mov	r24, r25
    86c2:	99 27       	eor	r25, r25
    86c4:	02 c0       	rjmp	.+4      	; 0x86ca <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    86c6:	80 e0       	ldi	r24, 0x00	; 0
    86c8:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    86ca:	f5 01       	movw	r30, r10
    86cc:	30 81       	ld	r19, Z
    86ce:	f8 01       	movw	r30, r16
    86d0:	3a 97       	sbiw	r30, 0x0a	; 10
    86d2:	20 81       	ld	r18, Z
    86d4:	23 0f       	add	r18, r19
    86d6:	d5 01       	movw	r26, r10
    86d8:	2c 93       	st	X, r18
    86da:	02 c0       	rjmp	.+4      	; 0x86e0 <ProcessMusic+0x404>

		}else{
			uVol=0;
    86dc:	80 e0       	ldi	r24, 0x00	; 0
    86de:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    86e0:	f7 01       	movw	r30, r14
    86e2:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    86e4:	53 94       	inc	r5
    86e6:	66 96       	adiw	r28, 0x16	; 22
    86e8:	f6 e0       	ldi	r31, 0x06	; 6
    86ea:	ef 0e       	add	r14, r31
    86ec:	f1 1c       	adc	r15, r1
    86ee:	86 e1       	ldi	r24, 0x16	; 22
    86f0:	a8 0e       	add	r10, r24
    86f2:	b1 1c       	adc	r11, r1
    86f4:	0a 5e       	subi	r16, 0xEA	; 234
    86f6:	1f 4f       	sbci	r17, 0xFF	; 255
    86f8:	96 e1       	ldi	r25, 0x16	; 22
    86fa:	c9 0e       	add	r12, r25
    86fc:	d1 1c       	adc	r13, r1
    86fe:	a6 e1       	ldi	r26, 0x16	; 22
    8700:	8a 0e       	add	r8, r26
    8702:	91 1c       	adc	r9, r1
    8704:	b5 e0       	ldi	r27, 0x05	; 5
    8706:	5b 12       	cpse	r5, r27
    8708:	34 cf       	rjmp	.-408    	; 0x8572 <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    870a:	df 91       	pop	r29
    870c:	cf 91       	pop	r28
    870e:	1f 91       	pop	r17
    8710:	0f 91       	pop	r16
    8712:	ff 90       	pop	r15
    8714:	ef 90       	pop	r14
    8716:	df 90       	pop	r13
    8718:	cf 90       	pop	r12
    871a:	bf 90       	pop	r11
    871c:	af 90       	pop	r10
    871e:	9f 90       	pop	r9
    8720:	8f 90       	pop	r8
    8722:	7f 90       	pop	r7
    8724:	6f 90       	pop	r6
    8726:	5f 90       	pop	r5
    8728:	08 95       	ret

0000872a <SetMasterVolume>:
}



void SetMasterVolume(unsigned char vol){
	masterVolume=vol;
    872a:	80 93 b2 0b 	sts	0x0BB2, r24
    872e:	08 95       	ret

00008730 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    8730:	99 27       	eor	r25, r25
	clr r23
    8732:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    8734:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    8736:	09 f4       	brne	.+2      	; 0x873a <set_note_waves>
		ret
    8738:	08 95       	ret

0000873a <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    873a:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    873c:	f8 e8       	ldi	r31, 0x88	; 136
	lsl r22
    873e:	66 0f       	add	r22, r22
	rol r23
    8740:	77 1f       	adc	r23, r23
	add ZL,r22
    8742:	e6 0f       	add	r30, r22
	adc ZH,r23	
    8744:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    8746:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    8748:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    874a:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    874c:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    874e:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    8750:	28 9f       	mul	r18, r24
	add ZL,r0
    8752:	e0 0d       	add	r30, r0
	adc ZH,r1
    8754:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    8756:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    8758:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    875a:	11 24       	eor	r1, r1
	

	ret
    875c:	08 95       	ret

0000875e <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    875e:	99 27       	eor	r25, r25
	clr r23
    8760:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    8762:	e2 e0       	ldi	r30, 0x02	; 2
	ldi ZH,hi8(mixerStruct)
    8764:	fb e0       	ldi	r31, 0x0B	; 11
	ldi r18,CHANNEL_STRUCT_SIZE
    8766:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    8768:	28 9f       	mul	r18, r24
	add ZL,r0
    876a:	e0 0d       	add	r30, r0
	adc ZH,r1
    876c:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    876e:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    8770:	31 f4       	brne	.+12     	; 0x877e <smw1>
	lds r22,tr4_params
    8772:	60 91 15 0b 	lds	r22, 0x0B15
	andi r22,0xfe;
    8776:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    8778:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw	
    877c:	0b c0       	rjmp	.+22     	; 0x8794 <esmw>

0000877e <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    877e:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    8780:	31 f4       	brne	.+12     	; 0x878e <smw2>
	lds r22,tr4_params
    8782:	60 91 15 0b 	lds	r22, 0x0B15
	ori r22,0xfe;
    8786:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    8788:	60 93 15 0b 	sts	0x0B15, r22
	rjmp esmw
    878c:	03 c0       	rjmp	.+6      	; 0x8794 <esmw>

0000878e <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    878e:	7a e8       	ldi	r23, 0x8A	; 138
	add r23,r22
    8790:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    8792:	75 83       	std	Z+5, r23	; 0x05

00008794 <esmw>:

esmw:
	clr r1	
    8794:	11 24       	eor	r1, r1
	ret
    8796:	08 95       	ret
	...

00008800 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    8800:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    8802:	80 93 01 0b 	sts	0x0B01, r24
	ret
    8806:	08 95       	ret

00008808 <steptable>:
    8808:	22 00       	.word	0x0022	; ????
    880a:	24 00       	.word	0x0024	; ????
    880c:	26 00       	.word	0x0026	; ????
    880e:	28 00       	.word	0x0028	; ????
    8810:	2b 00       	.word	0x002b	; ????
    8812:	2d 00       	.word	0x002d	; ????
    8814:	30 00       	.word	0x0030	; ????
    8816:	33 00       	.word	0x0033	; ????
    8818:	36 00       	.word	0x0036	; ????
    881a:	39 00       	.word	0x0039	; ????
    881c:	3d 00       	.word	0x003d	; ????
    881e:	40 00       	.word	0x0040	; ????
    8820:	44 00       	.word	0x0044	; ????
    8822:	48 00       	.word	0x0048	; ????
    8824:	4c 00       	.word	0x004c	; ????
    8826:	51 00       	.word	0x0051	; ????
    8828:	56 00       	.word	0x0056	; ????
    882a:	5b 00       	.word	0x005b	; ????
    882c:	60 00       	.word	0x0060	; ????
    882e:	66 00       	.word	0x0066	; ????
    8830:	6c 00       	.word	0x006c	; ????
    8832:	73 00       	.word	0x0073	; ????
    8834:	79 00       	.word	0x0079	; ????
    8836:	81 00       	.word	0x0081	; ????
    8838:	88 00       	.word	0x0088	; ????
    883a:	90 00       	.word	0x0090	; ????
    883c:	99 00       	.word	0x0099	; ????
    883e:	a2 00       	.word	0x00a2	; ????
    8840:	ac 00       	.word	0x00ac	; ????
    8842:	b6 00       	.word	0x00b6	; ????
    8844:	c1 00       	.word	0x00c1	; ????
    8846:	cc 00       	.word	0x00cc	; ????
    8848:	d8 00       	.word	0x00d8	; ????
    884a:	e5 00       	.word	0x00e5	; ????
    884c:	f3 00       	.word	0x00f3	; ????
    884e:	01 01       	movw	r0, r2
    8850:	10 01       	movw	r2, r0
    8852:	21 01       	movw	r4, r2
    8854:	32 01       	movw	r6, r4
    8856:	44 01       	movw	r8, r8
    8858:	57 01       	movw	r10, r14
    885a:	6c 01       	movw	r12, r24
    885c:	81 01       	movw	r16, r2
    885e:	98 01       	movw	r18, r16
    8860:	b0 01       	movw	r22, r0
    8862:	ca 01       	movw	r24, r20
    8864:	e5 01       	movw	r28, r10
    8866:	02 02       	muls	r16, r18
    8868:	21 02       	muls	r18, r17
    886a:	41 02       	muls	r20, r17
    886c:	64 02       	muls	r22, r20
    886e:	88 02       	muls	r24, r24
    8870:	ae 02       	muls	r26, r30
    8872:	d7 02       	muls	r29, r23
    8874:	03 03       	mulsu	r16, r19
    8876:	30 03       	mulsu	r19, r16
    8878:	61 03       	mulsu	r22, r17
    887a:	94 03       	fmuls	r17, r20
    887c:	cb 03       	fmulsu	r20, r19
    887e:	05 04       	cpc	r0, r5
    8880:	42 04       	cpc	r4, r2
    8882:	83 04       	cpc	r8, r3
    8884:	c7 04       	cpc	r12, r7
    8886:	10 05       	cpc	r17, r0
    8888:	5d 05       	cpc	r21, r13
    888a:	af 05       	cpc	r26, r15
    888c:	05 06       	cpc	r0, r21
    888e:	61 06       	cpc	r6, r17
    8890:	c2 06       	cpc	r12, r18
    8892:	29 07       	cpc	r18, r25
    8894:	96 07       	cpc	r25, r22
    8896:	09 08       	sbc	r0, r9
    8898:	83 08       	sbc	r8, r3
    889a:	05 09       	sbc	r16, r5
    889c:	8e 09       	sbc	r24, r14
    889e:	20 0a       	sbc	r2, r16
    88a0:	ba 0a       	sbc	r11, r26
    88a2:	5d 0b       	sbc	r21, r29
    88a4:	0a 0c       	add	r0, r10
    88a6:	c1 0c       	add	r12, r1
    88a8:	84 0d       	add	r24, r4
    88aa:	51 0e       	add	r5, r17
    88ac:	2b 0f       	add	r18, r27
    88ae:	12 10       	cpse	r1, r2
    88b0:	07 11       	cpse	r16, r7
    88b2:	0a 12       	cpse	r0, r26
    88b4:	1d 13       	cpse	r17, r29
    88b6:	40 14       	cp	r4, r0
    88b8:	74 15       	cp	r23, r4
    88ba:	ba 16       	cp	r11, r26
    88bc:	14 18       	sub	r1, r4
    88be:	83 19       	sub	r24, r3
    88c0:	07 1b       	sub	r16, r23
    88c2:	a3 1c       	adc	r10, r3
    88c4:	57 1e       	adc	r5, r23
    88c6:	24 20       	and	r2, r4
    88c8:	0e 22       	and	r0, r30
    88ca:	14 24       	eor	r1, r4
    88cc:	39 26       	eor	r3, r25
    88ce:	7f 28       	or	r7, r15
    88d0:	e8 2a       	or	r14, r24
    88d2:	75 2d       	mov	r23, r5
    88d4:	29 30       	cpi	r18, 0x09	; 9
    88d6:	06 33       	cpi	r16, 0x36	; 54
    88d8:	0f 36       	cpi	r16, 0x6F	; 111
    88da:	45 39       	cpi	r20, 0x95	; 149
    88dc:	ad 3c       	cpi	r26, 0xCD	; 205
    88de:	49 40       	sbci	r20, 0x09	; 9
    88e0:	1b 44       	sbci	r17, 0x4B	; 75
    88e2:	28 48       	sbci	r18, 0x88	; 136
    88e4:	73 4c       	sbci	r23, 0xC3	; 195
    88e6:	fe 50       	subi	r31, 0x0E	; 14
    88e8:	cf 55       	subi	r28, 0x5F	; 95
    88ea:	ea 5a       	subi	r30, 0xAA	; 170
    88ec:	51 60       	ori	r21, 0x01	; 1
    88ee:	0c 66       	ori	r16, 0x6C	; 108
    88f0:	1d 6c       	ori	r17, 0xCD	; 205
    88f2:	8b 72       	andi	r24, 0x2B	; 43
    88f4:	5a 79       	andi	r21, 0x9A	; 154
    88f6:	92 80       	ldd	r9, Z+2	; 0x02
    88f8:	37 88       	ldd	r3, Z+23	; 0x17
    88fa:	50 90 e5 98 	lds	r5, 0x98E5
    88fe:	fd a1       	ldd	r31, Y+37	; 0x25
    8900:	9f ab       	std	Y+55, r25	; 0x37
    8902:	d3 b5       	in	r29, 0x23	; 35
    8904:	a3 c0       	rjmp	.+326    	; 0x8a4c <waves+0x4c>
	...

00008a00 <waves>:
    8a00:	00 03       	mulsu	r16, r16
    8a02:	06 09       	sbc	r16, r6
    8a04:	0c 10       	cpse	r0, r12
    8a06:	13 16       	cp	r1, r19
    8a08:	19 1c       	adc	r1, r9
    8a0a:	1f 22       	and	r1, r31
    8a0c:	25 28       	or	r2, r5
    8a0e:	2b 2e       	mov	r2, r27
    8a10:	31 33       	cpi	r19, 0x31	; 49
    8a12:	36 39       	cpi	r19, 0x96	; 150
    8a14:	3c 3f       	cpi	r19, 0xFC	; 252
    8a16:	41 44       	sbci	r20, 0x41	; 65
    8a18:	47 49       	sbci	r20, 0x97	; 151
    8a1a:	4c 4e       	sbci	r20, 0xEC	; 236
    8a1c:	51 53       	subi	r21, 0x31	; 49
    8a1e:	55 58       	subi	r21, 0x85	; 133
    8a20:	5a 5c       	subi	r21, 0xCA	; 202
    8a22:	5e 60       	ori	r21, 0x0E	; 14
    8a24:	62 64       	ori	r22, 0x42	; 66
    8a26:	66 68       	ori	r22, 0x86	; 134
    8a28:	6a 6b       	ori	r22, 0xBA	; 186
    8a2a:	6d 6f       	ori	r22, 0xFD	; 253
    8a2c:	70 71       	andi	r23, 0x10	; 16
    8a2e:	73 74       	andi	r23, 0x43	; 67
    8a30:	75 76       	andi	r23, 0x65	; 101
    8a32:	78 79       	andi	r23, 0x98	; 152
    8a34:	7a 7a       	andi	r23, 0xAA	; 170
    8a36:	7b 7c       	andi	r23, 0xCB	; 203
    8a38:	7d 7d       	andi	r23, 0xDD	; 221
    8a3a:	7e 7e       	andi	r23, 0xEE	; 238
    8a3c:	7e 7f       	andi	r23, 0xFE	; 254
    8a3e:	7f 7f       	andi	r23, 0xFF	; 255
    8a40:	7f 7f       	andi	r23, 0xFF	; 255
    8a42:	7f 7f       	andi	r23, 0xFF	; 255
    8a44:	7e 7e       	andi	r23, 0xEE	; 238
    8a46:	7e 7d       	andi	r23, 0xDE	; 222
    8a48:	7d 7c       	andi	r23, 0xCD	; 205
    8a4a:	7b 7a       	andi	r23, 0xAB	; 171
    8a4c:	7a 79       	andi	r23, 0x9A	; 154
    8a4e:	78 76       	andi	r23, 0x68	; 104
    8a50:	75 74       	andi	r23, 0x45	; 69
    8a52:	73 71       	andi	r23, 0x13	; 19
    8a54:	70 6f       	ori	r23, 0xF0	; 240
    8a56:	6d 6b       	ori	r22, 0xBD	; 189
    8a58:	6a 68       	ori	r22, 0x8A	; 138
    8a5a:	66 64       	ori	r22, 0x46	; 70
    8a5c:	62 60       	ori	r22, 0x02	; 2
    8a5e:	5e 5c       	subi	r21, 0xCE	; 206
    8a60:	5a 58       	subi	r21, 0x8A	; 138
    8a62:	55 53       	subi	r21, 0x35	; 53
    8a64:	51 4e       	sbci	r21, 0xE1	; 225
    8a66:	4c 49       	sbci	r20, 0x9C	; 156
    8a68:	47 44       	sbci	r20, 0x47	; 71
    8a6a:	41 3f       	cpi	r20, 0xF1	; 241
    8a6c:	3c 39       	cpi	r19, 0x9C	; 156
    8a6e:	36 33       	cpi	r19, 0x36	; 54
    8a70:	31 2e       	mov	r3, r17
    8a72:	2b 28       	or	r2, r11
    8a74:	25 22       	and	r2, r21
    8a76:	1f 1c       	adc	r1, r15
    8a78:	19 16       	cp	r1, r25
    8a7a:	13 10       	cpse	r1, r3
    8a7c:	0c 09       	sbc	r16, r12
    8a7e:	06 03       	mulsu	r16, r22
    8a80:	00 fd       	sbrc	r16, 0
    8a82:	fa f7       	brpl	.-2      	; 0x8a82 <waves+0x82>
    8a84:	f4 f0       	brlt	.+60     	; 0x8ac2 <waves+0xc2>
    8a86:	ed ea       	ldi	r30, 0xAD	; 173
    8a88:	e7 e4       	ldi	r30, 0x47	; 71
    8a8a:	e1 de       	rcall	.-574    	; 0x884e <steptable+0x46>
    8a8c:	db d8       	rcall	.-3658   	; 0x7c44 <WaitUs+0xc>
    8a8e:	d5 d2       	rcall	.+1450   	; 0x903a <waves+0x63a>
    8a90:	cf cd       	rjmp	.-1122   	; 0x8630 <ProcessMusic+0x354>
    8a92:	ca c7       	rjmp	.+3988   	; 0x9a28 <LBPrintStr+0x58>
    8a94:	c4 c1       	rjmp	.+904    	; 0x8e1e <waves+0x41e>
    8a96:	bf bc       	out	0x2f, r11	; 47
    8a98:	b9 b7       	in	r27, 0x39	; 57
    8a9a:	b4 b2       	in	r11, 0x14	; 20
    8a9c:	af ad       	ldd	r26, Y+63	; 0x3f
    8a9e:	ab a8       	ldd	r10, Y+51	; 0x33
    8aa0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    8aa2:	a2 a0       	ldd	r10, Z+34	; 0x22
    8aa4:	9e 9c       	mul	r9, r14
    8aa6:	9a 98       	cbi	0x13, 2	; 19
    8aa8:	96 95       	lsr	r25
    8aaa:	93 91       	.word	0x9193	; ????
    8aac:	90 8f       	std	Z+24, r25	; 0x18
    8aae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8ab0:	8b 8a       	std	Y+19, r8	; 0x13
    8ab2:	88 87       	std	Y+8, r24	; 0x08
    8ab4:	86 86       	std	Z+14, r8	; 0x0e
    8ab6:	85 84       	ldd	r8, Z+13	; 0x0d
    8ab8:	83 83       	std	Z+3, r24	; 0x03
    8aba:	82 82       	std	Z+2, r8	; 0x02
    8abc:	82 81       	ldd	r24, Z+2	; 0x02
    8abe:	81 81       	ldd	r24, Z+1	; 0x01
    8ac0:	81 81       	ldd	r24, Z+1	; 0x01
    8ac2:	81 81       	ldd	r24, Z+1	; 0x01
    8ac4:	82 82       	std	Z+2, r8	; 0x02
    8ac6:	82 83       	std	Z+2, r24	; 0x02
    8ac8:	83 84       	ldd	r8, Z+11	; 0x0b
    8aca:	85 86       	std	Z+13, r8	; 0x0d
    8acc:	86 87       	std	Z+14, r24	; 0x0e
    8ace:	88 8a       	std	Y+16, r8	; 0x10
    8ad0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    8ad2:	8d 8f       	std	Y+29, r24	; 0x1d
    8ad4:	90 91 93 95 	lds	r25, 0x9593
    8ad8:	96 98       	cbi	0x12, 6	; 18
    8ada:	9a 9c       	mul	r9, r10
    8adc:	9e a0       	ldd	r9, Y+38	; 0x26
    8ade:	a2 a4       	ldd	r10, Z+42	; 0x2a
    8ae0:	a6 a8       	ldd	r10, Z+54	; 0x36
    8ae2:	ab ad       	ldd	r26, Y+59	; 0x3b
    8ae4:	af b2       	in	r10, 0x1f	; 31
    8ae6:	b4 b7       	in	r27, 0x34	; 52
    8ae8:	b9 bc       	out	0x29, r11	; 41
    8aea:	bf c1       	rjmp	.+894    	; 0x8e6a <waves+0x46a>
    8aec:	c4 c7       	rjmp	.+3976   	; 0x9a76 <LBCollides+0x44>
    8aee:	ca cd       	rjmp	.-1132   	; 0x8684 <ProcessMusic+0x3a8>
    8af0:	cf d2       	rcall	.+1438   	; 0x9090 <waves+0x690>
    8af2:	d5 d8       	rcall	.-3670   	; 0x7c9e <wait+0x8>
    8af4:	db de       	rcall	.-586    	; 0x88ac <steptable+0xa4>
    8af6:	e1 e4       	ldi	r30, 0x41	; 65
    8af8:	e7 ea       	ldi	r30, 0xA7	; 167
    8afa:	ed f0       	brhs	.+58     	; 0x8b36 <waves+0x136>
    8afc:	f4 f7       	brge	.-4      	; 0x8afa <waves+0xfa>
    8afe:	fa fd       	.word	0xfdfa	; ????
    8b00:	80 81       	ld	r24, Z
    8b02:	82 83       	std	Z+2, r24	; 0x02
    8b04:	84 85       	ldd	r24, Z+12	; 0x0c
    8b06:	86 87       	std	Z+14, r24	; 0x0e
    8b08:	88 89       	ldd	r24, Y+16	; 0x10
    8b0a:	8a 8b       	std	Y+18, r24	; 0x12
    8b0c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    8b0e:	8e 8f       	std	Y+30, r24	; 0x1e
    8b10:	90 91 92 93 	lds	r25, 0x9392
    8b14:	94 95       	.word	0x9594	; ????
    8b16:	96 97       	sbiw	r26, 0x26	; 38
    8b18:	98 99       	sbic	0x13, 0	; 19
    8b1a:	9a 9b       	sbis	0x13, 2	; 19
    8b1c:	9c 9d       	mul	r25, r12
    8b1e:	9e 9f       	mul	r25, r30
    8b20:	a0 a1       	ldd	r26, Z+32	; 0x20
    8b22:	a2 a3       	std	Z+34, r26	; 0x22
    8b24:	a4 a5       	ldd	r26, Z+44	; 0x2c
    8b26:	a6 a7       	std	Z+46, r26	; 0x2e
    8b28:	a8 a9       	ldd	r26, Y+48	; 0x30
    8b2a:	aa ab       	std	Y+50, r26	; 0x32
    8b2c:	ac ad       	ldd	r26, Y+60	; 0x3c
    8b2e:	ae af       	std	Y+62, r26	; 0x3e
    8b30:	b0 b1       	in	r27, 0x00	; 0
    8b32:	b2 b3       	in	r27, 0x12	; 18
    8b34:	b4 b5       	in	r27, 0x24	; 36
    8b36:	b6 b7       	in	r27, 0x36	; 54
    8b38:	b8 b9       	out	0x08, r27	; 8
    8b3a:	ba bb       	out	0x1a, r27	; 26
    8b3c:	bc bd       	out	0x2c, r27	; 44
    8b3e:	be bf       	out	0x3e, r27	; 62
    8b40:	c0 c1       	rjmp	.+896    	; 0x8ec2 <waves+0x4c2>
    8b42:	c2 c3       	rjmp	.+1924   	; 0x92c8 <waves+0x8c8>
    8b44:	c4 c5       	rjmp	.+2952   	; 0x96ce <InitializeVideoMode+0xe>
    8b46:	c6 c7       	rjmp	.+3980   	; 0x9ad4 <LBLineIntersect+0x4e>
    8b48:	c8 c9       	rjmp	.-3184   	; 0x7eda <EepromWriteBlock+0xd8>
    8b4a:	ca cb       	rjmp	.-2156   	; 0x82e0 <ProcessMusic+0x4>
    8b4c:	cc cd       	rjmp	.-1128   	; 0x86e6 <ProcessMusic+0x40a>
    8b4e:	ce cf       	rjmp	.-100    	; 0x8aec <waves+0xec>
    8b50:	d0 d1       	rcall	.+928    	; 0x8ef2 <waves+0x4f2>
    8b52:	d2 d3       	rcall	.+1956   	; 0x92f8 <waves+0x8f8>
    8b54:	d4 d5       	rcall	.+2984   	; 0x96fe <DrawMap2+0x2a>
    8b56:	d6 d7       	rcall	.+4012   	; 0x9b04 <LBLineIntersect+0x7e>
    8b58:	d8 d9       	rcall	.-3152   	; 0x7f0a <EepromReadBlock+0x2e>
    8b5a:	da db       	rcall	.-2124   	; 0x8310 <ProcessMusic+0x34>
    8b5c:	dc dd       	rcall	.-1096   	; 0x8716 <ProcessMusic+0x43a>
    8b5e:	de df       	rcall	.-68     	; 0x8b1c <waves+0x11c>
    8b60:	e0 e1       	ldi	r30, 0x10	; 16
    8b62:	e2 e3       	ldi	r30, 0x32	; 50
    8b64:	e4 e5       	ldi	r30, 0x54	; 84
    8b66:	e6 e7       	ldi	r30, 0x76	; 118
    8b68:	e8 e9       	ldi	r30, 0x98	; 152
    8b6a:	ea eb       	ldi	r30, 0xBA	; 186
    8b6c:	ec ed       	ldi	r30, 0xDC	; 220
    8b6e:	ee ef       	ldi	r30, 0xFE	; 254
    8b70:	f0 f1       	brcs	.+124    	; 0x8bee <waves+0x1ee>
    8b72:	f2 f3       	brmi	.-4      	; 0x8b70 <waves+0x170>
    8b74:	f4 f5       	brge	.+124    	; 0x8bf2 <waves+0x1f2>
    8b76:	f6 f7       	brtc	.-4      	; 0x8b74 <waves+0x174>
    8b78:	f8 f9       	.word	0xf9f8	; ????
    8b7a:	fa fb       	.word	0xfbfa	; ????
    8b7c:	fc fd       	.word	0xfdfc	; ????
    8b7e:	fe ff       	.word	0xfffe	; ????
    8b80:	00 01       	movw	r0, r0
    8b82:	02 03       	mulsu	r16, r18
    8b84:	04 05       	cpc	r16, r4
    8b86:	06 07       	cpc	r16, r22
    8b88:	08 09       	sbc	r16, r8
    8b8a:	0a 0b       	sbc	r16, r26
    8b8c:	0c 0d       	add	r16, r12
    8b8e:	0e 0f       	add	r16, r30
    8b90:	10 11       	cpse	r17, r0
    8b92:	12 13       	cpse	r17, r18
    8b94:	14 15       	cp	r17, r4
    8b96:	16 17       	cp	r17, r22
    8b98:	18 19       	sub	r17, r8
    8b9a:	1a 1b       	sub	r17, r26
    8b9c:	1c 1d       	adc	r17, r12
    8b9e:	1e 1f       	adc	r17, r30
    8ba0:	20 21       	and	r18, r0
    8ba2:	22 23       	and	r18, r18
    8ba4:	24 25       	eor	r18, r4
    8ba6:	26 27       	eor	r18, r22
    8ba8:	28 29       	or	r18, r8
    8baa:	2a 2b       	or	r18, r26
    8bac:	2c 2d       	mov	r18, r12
    8bae:	2e 2f       	mov	r18, r30
    8bb0:	30 31       	cpi	r19, 0x10	; 16
    8bb2:	32 33       	cpi	r19, 0x32	; 50
    8bb4:	34 35       	cpi	r19, 0x54	; 84
    8bb6:	36 37       	cpi	r19, 0x76	; 118
    8bb8:	38 39       	cpi	r19, 0x98	; 152
    8bba:	3a 3b       	cpi	r19, 0xBA	; 186
    8bbc:	3c 3d       	cpi	r19, 0xDC	; 220
    8bbe:	3e 3f       	cpi	r19, 0xFE	; 254
    8bc0:	40 41       	sbci	r20, 0x10	; 16
    8bc2:	42 43       	sbci	r20, 0x32	; 50
    8bc4:	44 45       	sbci	r20, 0x54	; 84
    8bc6:	46 47       	sbci	r20, 0x76	; 118
    8bc8:	48 49       	sbci	r20, 0x98	; 152
    8bca:	4a 4b       	sbci	r20, 0xBA	; 186
    8bcc:	4c 4d       	sbci	r20, 0xDC	; 220
    8bce:	4e 4f       	sbci	r20, 0xFE	; 254
    8bd0:	50 51       	subi	r21, 0x10	; 16
    8bd2:	52 53       	subi	r21, 0x32	; 50
    8bd4:	54 55       	subi	r21, 0x54	; 84
    8bd6:	56 57       	subi	r21, 0x76	; 118
    8bd8:	58 59       	subi	r21, 0x98	; 152
    8bda:	5a 5b       	subi	r21, 0xBA	; 186
    8bdc:	5c 5d       	subi	r21, 0xDC	; 220
    8bde:	5e 5f       	subi	r21, 0xFE	; 254
    8be0:	60 61       	ori	r22, 0x10	; 16
    8be2:	62 63       	ori	r22, 0x32	; 50
    8be4:	64 65       	ori	r22, 0x54	; 84
    8be6:	66 67       	ori	r22, 0x76	; 118
    8be8:	68 69       	ori	r22, 0x98	; 152
    8bea:	6a 6b       	ori	r22, 0xBA	; 186
    8bec:	6c 6d       	ori	r22, 0xDC	; 220
    8bee:	6e 6f       	ori	r22, 0xFE	; 254
    8bf0:	70 71       	andi	r23, 0x10	; 16
    8bf2:	72 73       	andi	r23, 0x32	; 50
    8bf4:	74 75       	andi	r23, 0x54	; 84
    8bf6:	76 77       	andi	r23, 0x76	; 118
    8bf8:	78 79       	andi	r23, 0x98	; 152
    8bfa:	7a 7b       	andi	r23, 0xBA	; 186
    8bfc:	7c 7d       	andi	r23, 0xDC	; 220
    8bfe:	7e 7f       	andi	r23, 0xFE	; 254
    8c00:	00 02       	muls	r16, r16
    8c02:	04 06       	cpc	r0, r20
    8c04:	08 0a       	sbc	r0, r24
    8c06:	0c 0e       	add	r0, r28
    8c08:	10 12       	cpse	r1, r16
    8c0a:	14 16       	cp	r1, r20
    8c0c:	18 1a       	sub	r1, r24
    8c0e:	1c 1e       	adc	r1, r28
    8c10:	20 22       	and	r2, r16
    8c12:	24 26       	eor	r2, r20
    8c14:	28 2a       	or	r2, r24
    8c16:	2c 2e       	mov	r2, r28
    8c18:	30 32       	cpi	r19, 0x20	; 32
    8c1a:	34 36       	cpi	r19, 0x64	; 100
    8c1c:	38 3a       	cpi	r19, 0xA8	; 168
    8c1e:	3c 3e       	cpi	r19, 0xEC	; 236
    8c20:	40 42       	sbci	r20, 0x20	; 32
    8c22:	44 46       	sbci	r20, 0x64	; 100
    8c24:	48 4a       	sbci	r20, 0xA8	; 168
    8c26:	4c 4e       	sbci	r20, 0xEC	; 236
    8c28:	50 52       	subi	r21, 0x20	; 32
    8c2a:	54 56       	subi	r21, 0x64	; 100
    8c2c:	58 5a       	subi	r21, 0xA8	; 168
    8c2e:	5c 5e       	subi	r21, 0xEC	; 236
    8c30:	60 62       	ori	r22, 0x20	; 32
    8c32:	64 66       	ori	r22, 0x64	; 100
    8c34:	68 6a       	ori	r22, 0xA8	; 168
    8c36:	6c 6e       	ori	r22, 0xEC	; 236
    8c38:	70 72       	andi	r23, 0x20	; 32
    8c3a:	74 76       	andi	r23, 0x64	; 100
    8c3c:	78 7a       	andi	r23, 0xA8	; 168
    8c3e:	7c 7e       	andi	r23, 0xEC	; 236
    8c40:	7f 7d       	andi	r23, 0xDF	; 223
    8c42:	7b 79       	andi	r23, 0x9B	; 155
    8c44:	77 75       	andi	r23, 0x57	; 87
    8c46:	73 71       	andi	r23, 0x13	; 19
    8c48:	6f 6d       	ori	r22, 0xDF	; 223
    8c4a:	6b 69       	ori	r22, 0x9B	; 155
    8c4c:	67 65       	ori	r22, 0x57	; 87
    8c4e:	63 61       	ori	r22, 0x13	; 19
    8c50:	5f 5d       	subi	r21, 0xDF	; 223
    8c52:	5b 59       	subi	r21, 0x9B	; 155
    8c54:	57 55       	subi	r21, 0x57	; 87
    8c56:	53 51       	subi	r21, 0x13	; 19
    8c58:	4f 4d       	sbci	r20, 0xDF	; 223
    8c5a:	4b 49       	sbci	r20, 0x9B	; 155
    8c5c:	47 45       	sbci	r20, 0x57	; 87
    8c5e:	43 41       	sbci	r20, 0x13	; 19
    8c60:	3f 3d       	cpi	r19, 0xDF	; 223
    8c62:	3b 39       	cpi	r19, 0x9B	; 155
    8c64:	37 35       	cpi	r19, 0x57	; 87
    8c66:	33 31       	cpi	r19, 0x13	; 19
    8c68:	2f 2d       	mov	r18, r15
    8c6a:	2b 29       	or	r18, r11
    8c6c:	27 25       	eor	r18, r7
    8c6e:	23 21       	and	r18, r3
    8c70:	1f 1d       	adc	r17, r15
    8c72:	1b 19       	sub	r17, r11
    8c74:	17 15       	cp	r17, r7
    8c76:	13 11       	cpse	r17, r3
    8c78:	0f 0d       	add	r16, r15
    8c7a:	0b 09       	sbc	r16, r11
    8c7c:	07 05       	cpc	r16, r7
    8c7e:	03 01       	movw	r0, r6
    8c80:	ff fd       	.word	0xfdff	; ????
    8c82:	fb f9       	.word	0xf9fb	; ????
    8c84:	f7 f5       	brid	.+124    	; 0x8d02 <waves+0x302>
    8c86:	f3 f1       	brvs	.+124    	; 0x8d04 <waves+0x304>
    8c88:	ef ed       	ldi	r30, 0xDF	; 223
    8c8a:	eb e9       	ldi	r30, 0x9B	; 155
    8c8c:	e7 e5       	ldi	r30, 0x57	; 87
    8c8e:	e3 e1       	ldi	r30, 0x13	; 19
    8c90:	df dd       	rcall	.-1090   	; 0x8850 <steptable+0x48>
    8c92:	db d9       	rcall	.-3146   	; 0x804a <PatchCommand04+0x8>
    8c94:	d7 d5       	rcall	.+2990   	; 0x9844 <doFade+0x6>
    8c96:	d3 d1       	rcall	.+934    	; 0x903e <waves+0x63e>
    8c98:	cf cd       	rjmp	.-1122   	; 0x8838 <steptable+0x30>
    8c9a:	cb c9       	rjmp	.-3178   	; 0x8032 <PatchCommand03>
    8c9c:	c7 c5       	rjmp	.+2958   	; 0x982c <WaitVsync+0x1c>
    8c9e:	c3 c1       	rjmp	.+902    	; 0x9026 <waves+0x626>
    8ca0:	bf bd       	out	0x2f, r27	; 47
    8ca2:	bb b9       	out	0x0b, r27	; 11
    8ca4:	b7 b5       	in	r27, 0x27	; 39
    8ca6:	b3 b1       	in	r27, 0x03	; 3
    8ca8:	af ad       	ldd	r26, Y+63	; 0x3f
    8caa:	ab a9       	ldd	r26, Y+51	; 0x33
    8cac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    8cae:	a3 a1       	ldd	r26, Z+35	; 0x23
    8cb0:	9f 9d       	mul	r25, r15
    8cb2:	9b 99       	sbic	0x13, 3	; 19
    8cb4:	97 95       	ror	r25
    8cb6:	93 91       	.word	0x9193	; ????
    8cb8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    8cba:	8b 89       	ldd	r24, Y+19	; 0x13
    8cbc:	87 85       	ldd	r24, Z+15	; 0x0f
    8cbe:	83 81       	ldd	r24, Z+3	; 0x03
    8cc0:	80 82       	st	Z, r8
    8cc2:	84 86       	std	Z+12, r8	; 0x0c
    8cc4:	88 8a       	std	Y+16, r8	; 0x10
    8cc6:	8c 8e       	std	Y+28, r8	; 0x1c
    8cc8:	90 92 94 96 	sts	0x9694, r9
    8ccc:	98 9a       	sbi	0x13, 0	; 19
    8cce:	9c 9e       	mul	r9, r28
    8cd0:	a0 a2       	std	Z+32, r10	; 0x20
    8cd2:	a4 a6       	std	Z+44, r10	; 0x2c
    8cd4:	a8 aa       	std	Y+48, r10	; 0x30
    8cd6:	ac ae       	std	Y+60, r10	; 0x3c
    8cd8:	b0 b2       	in	r11, 0x10	; 16
    8cda:	b4 b6       	in	r11, 0x34	; 52
    8cdc:	b8 ba       	out	0x18, r11	; 24
    8cde:	bc be       	out	0x3c, r11	; 60
    8ce0:	c0 c2       	rjmp	.+1408   	; 0x9262 <waves+0x862>
    8ce2:	c4 c6       	rjmp	.+3464   	; 0x9a6c <LBCollides+0x3a>
    8ce4:	c8 ca       	rjmp	.-2672   	; 0x8276 <TriggerNote+0x8>
    8ce6:	cc ce       	rjmp	.-616    	; 0x8a80 <waves+0x80>
    8ce8:	d0 d2       	rcall	.+1440   	; 0x928a <waves+0x88a>
    8cea:	d4 d6       	rcall	.+3496   	; 0x9a94 <LBLineIntersect+0xe>
    8cec:	d8 da       	rcall	.-2640   	; 0x829e <TriggerNote+0x30>
    8cee:	dc de       	rcall	.-584    	; 0x8aa8 <waves+0xa8>
    8cf0:	e0 e2       	ldi	r30, 0x20	; 32
    8cf2:	e4 e6       	ldi	r30, 0x64	; 100
    8cf4:	e8 ea       	ldi	r30, 0xA8	; 168
    8cf6:	ec ee       	ldi	r30, 0xEC	; 236
    8cf8:	f0 f2       	brcs	.-68     	; 0x8cb6 <waves+0x2b6>
    8cfa:	f4 f6       	brge	.-68     	; 0x8cb8 <waves+0x2b8>
    8cfc:	f8 fa       	.word	0xfaf8	; ????
    8cfe:	fc fe       	.word	0xfefc	; ????
    8d00:	7f 7f       	andi	r23, 0xFF	; 255
    8d02:	7f 7f       	andi	r23, 0xFF	; 255
    8d04:	7f 7f       	andi	r23, 0xFF	; 255
    8d06:	7f 7f       	andi	r23, 0xFF	; 255
    8d08:	7f 7f       	andi	r23, 0xFF	; 255
    8d0a:	7f 7f       	andi	r23, 0xFF	; 255
    8d0c:	7f 7f       	andi	r23, 0xFF	; 255
    8d0e:	7f 7f       	andi	r23, 0xFF	; 255
    8d10:	7f 7f       	andi	r23, 0xFF	; 255
    8d12:	7f 7f       	andi	r23, 0xFF	; 255
    8d14:	7f 7f       	andi	r23, 0xFF	; 255
    8d16:	7f 7f       	andi	r23, 0xFF	; 255
    8d18:	7f 7f       	andi	r23, 0xFF	; 255
    8d1a:	7f 7f       	andi	r23, 0xFF	; 255
    8d1c:	7f 7f       	andi	r23, 0xFF	; 255
    8d1e:	7f 7f       	andi	r23, 0xFF	; 255
    8d20:	7f 7f       	andi	r23, 0xFF	; 255
    8d22:	7f 7f       	andi	r23, 0xFF	; 255
    8d24:	7f 7f       	andi	r23, 0xFF	; 255
    8d26:	7f 7f       	andi	r23, 0xFF	; 255
    8d28:	7f 7f       	andi	r23, 0xFF	; 255
    8d2a:	7f 7f       	andi	r23, 0xFF	; 255
    8d2c:	7f 7f       	andi	r23, 0xFF	; 255
    8d2e:	7f 7f       	andi	r23, 0xFF	; 255
    8d30:	7f 7f       	andi	r23, 0xFF	; 255
    8d32:	7f 7f       	andi	r23, 0xFF	; 255
    8d34:	7f 7f       	andi	r23, 0xFF	; 255
    8d36:	7f 7f       	andi	r23, 0xFF	; 255
    8d38:	7f 7f       	andi	r23, 0xFF	; 255
    8d3a:	7f 7f       	andi	r23, 0xFF	; 255
    8d3c:	7f 7f       	andi	r23, 0xFF	; 255
    8d3e:	7f 7f       	andi	r23, 0xFF	; 255
    8d40:	80 80       	ld	r8, Z
    8d42:	80 80       	ld	r8, Z
    8d44:	80 80       	ld	r8, Z
    8d46:	80 80       	ld	r8, Z
    8d48:	80 80       	ld	r8, Z
    8d4a:	80 80       	ld	r8, Z
    8d4c:	80 80       	ld	r8, Z
    8d4e:	80 80       	ld	r8, Z
    8d50:	80 80       	ld	r8, Z
    8d52:	80 80       	ld	r8, Z
    8d54:	80 80       	ld	r8, Z
    8d56:	80 80       	ld	r8, Z
    8d58:	80 80       	ld	r8, Z
    8d5a:	80 80       	ld	r8, Z
    8d5c:	80 80       	ld	r8, Z
    8d5e:	80 80       	ld	r8, Z
    8d60:	80 80       	ld	r8, Z
    8d62:	80 80       	ld	r8, Z
    8d64:	80 80       	ld	r8, Z
    8d66:	80 80       	ld	r8, Z
    8d68:	80 80       	ld	r8, Z
    8d6a:	80 80       	ld	r8, Z
    8d6c:	80 80       	ld	r8, Z
    8d6e:	80 80       	ld	r8, Z
    8d70:	80 80       	ld	r8, Z
    8d72:	80 80       	ld	r8, Z
    8d74:	80 80       	ld	r8, Z
    8d76:	80 80       	ld	r8, Z
    8d78:	80 80       	ld	r8, Z
    8d7a:	80 80       	ld	r8, Z
    8d7c:	80 80       	ld	r8, Z
    8d7e:	80 80       	ld	r8, Z
    8d80:	80 80       	ld	r8, Z
    8d82:	80 80       	ld	r8, Z
    8d84:	80 80       	ld	r8, Z
    8d86:	80 80       	ld	r8, Z
    8d88:	80 80       	ld	r8, Z
    8d8a:	80 80       	ld	r8, Z
    8d8c:	80 80       	ld	r8, Z
    8d8e:	80 80       	ld	r8, Z
    8d90:	80 80       	ld	r8, Z
    8d92:	80 80       	ld	r8, Z
    8d94:	80 80       	ld	r8, Z
    8d96:	80 80       	ld	r8, Z
    8d98:	80 80       	ld	r8, Z
    8d9a:	80 80       	ld	r8, Z
    8d9c:	80 80       	ld	r8, Z
    8d9e:	80 80       	ld	r8, Z
    8da0:	80 80       	ld	r8, Z
    8da2:	80 80       	ld	r8, Z
    8da4:	80 80       	ld	r8, Z
    8da6:	80 80       	ld	r8, Z
    8da8:	80 80       	ld	r8, Z
    8daa:	80 80       	ld	r8, Z
    8dac:	80 80       	ld	r8, Z
    8dae:	80 80       	ld	r8, Z
    8db0:	80 80       	ld	r8, Z
    8db2:	80 80       	ld	r8, Z
    8db4:	80 80       	ld	r8, Z
    8db6:	80 80       	ld	r8, Z
    8db8:	80 80       	ld	r8, Z
    8dba:	80 80       	ld	r8, Z
    8dbc:	80 80       	ld	r8, Z
    8dbe:	80 80       	ld	r8, Z
    8dc0:	80 80       	ld	r8, Z
    8dc2:	80 80       	ld	r8, Z
    8dc4:	80 80       	ld	r8, Z
    8dc6:	80 80       	ld	r8, Z
    8dc8:	80 80       	ld	r8, Z
    8dca:	80 80       	ld	r8, Z
    8dcc:	80 80       	ld	r8, Z
    8dce:	80 80       	ld	r8, Z
    8dd0:	80 80       	ld	r8, Z
    8dd2:	80 80       	ld	r8, Z
    8dd4:	80 80       	ld	r8, Z
    8dd6:	80 80       	ld	r8, Z
    8dd8:	80 80       	ld	r8, Z
    8dda:	80 80       	ld	r8, Z
    8ddc:	80 80       	ld	r8, Z
    8dde:	80 80       	ld	r8, Z
    8de0:	80 80       	ld	r8, Z
    8de2:	80 80       	ld	r8, Z
    8de4:	80 80       	ld	r8, Z
    8de6:	80 80       	ld	r8, Z
    8de8:	80 80       	ld	r8, Z
    8dea:	80 80       	ld	r8, Z
    8dec:	80 80       	ld	r8, Z
    8dee:	80 80       	ld	r8, Z
    8df0:	80 80       	ld	r8, Z
    8df2:	80 80       	ld	r8, Z
    8df4:	80 80       	ld	r8, Z
    8df6:	80 80       	ld	r8, Z
    8df8:	80 80       	ld	r8, Z
    8dfa:	80 80       	ld	r8, Z
    8dfc:	80 80       	ld	r8, Z
    8dfe:	80 80       	ld	r8, Z
    8e00:	7f 7f       	andi	r23, 0xFF	; 255
    8e02:	7f 7f       	andi	r23, 0xFF	; 255
    8e04:	7f 7f       	andi	r23, 0xFF	; 255
    8e06:	7f 7f       	andi	r23, 0xFF	; 255
    8e08:	7f 7f       	andi	r23, 0xFF	; 255
    8e0a:	7f 7f       	andi	r23, 0xFF	; 255
    8e0c:	7f 7f       	andi	r23, 0xFF	; 255
    8e0e:	7f 7f       	andi	r23, 0xFF	; 255
    8e10:	7f 7f       	andi	r23, 0xFF	; 255
    8e12:	7f 7f       	andi	r23, 0xFF	; 255
    8e14:	7f 7f       	andi	r23, 0xFF	; 255
    8e16:	7f 7f       	andi	r23, 0xFF	; 255
    8e18:	7f 7f       	andi	r23, 0xFF	; 255
    8e1a:	7f 7f       	andi	r23, 0xFF	; 255
    8e1c:	7f 7f       	andi	r23, 0xFF	; 255
    8e1e:	7f 7f       	andi	r23, 0xFF	; 255
    8e20:	7f 7f       	andi	r23, 0xFF	; 255
    8e22:	7f 7f       	andi	r23, 0xFF	; 255
    8e24:	7f 7f       	andi	r23, 0xFF	; 255
    8e26:	7f 7f       	andi	r23, 0xFF	; 255
    8e28:	7f 7f       	andi	r23, 0xFF	; 255
    8e2a:	7f 7f       	andi	r23, 0xFF	; 255
    8e2c:	7f 7f       	andi	r23, 0xFF	; 255
    8e2e:	7f 7f       	andi	r23, 0xFF	; 255
    8e30:	7f 7f       	andi	r23, 0xFF	; 255
    8e32:	7f 7f       	andi	r23, 0xFF	; 255
    8e34:	7f 7f       	andi	r23, 0xFF	; 255
    8e36:	7f 7f       	andi	r23, 0xFF	; 255
    8e38:	7f 7f       	andi	r23, 0xFF	; 255
    8e3a:	7f 7f       	andi	r23, 0xFF	; 255
    8e3c:	7f 7f       	andi	r23, 0xFF	; 255
    8e3e:	7f 7f       	andi	r23, 0xFF	; 255
    8e40:	7f 7f       	andi	r23, 0xFF	; 255
    8e42:	7f 7f       	andi	r23, 0xFF	; 255
    8e44:	7f 7f       	andi	r23, 0xFF	; 255
    8e46:	7f 7f       	andi	r23, 0xFF	; 255
    8e48:	7f 7f       	andi	r23, 0xFF	; 255
    8e4a:	7f 7f       	andi	r23, 0xFF	; 255
    8e4c:	7f 7f       	andi	r23, 0xFF	; 255
    8e4e:	7f 7f       	andi	r23, 0xFF	; 255
    8e50:	7f 7f       	andi	r23, 0xFF	; 255
    8e52:	7f 7f       	andi	r23, 0xFF	; 255
    8e54:	7f 7f       	andi	r23, 0xFF	; 255
    8e56:	7f 7f       	andi	r23, 0xFF	; 255
    8e58:	7f 7f       	andi	r23, 0xFF	; 255
    8e5a:	7f 7f       	andi	r23, 0xFF	; 255
    8e5c:	7f 7f       	andi	r23, 0xFF	; 255
    8e5e:	7f 7f       	andi	r23, 0xFF	; 255
    8e60:	7f 7f       	andi	r23, 0xFF	; 255
    8e62:	7f 7f       	andi	r23, 0xFF	; 255
    8e64:	7f 7f       	andi	r23, 0xFF	; 255
    8e66:	7f 7f       	andi	r23, 0xFF	; 255
    8e68:	7f 7f       	andi	r23, 0xFF	; 255
    8e6a:	7f 7f       	andi	r23, 0xFF	; 255
    8e6c:	7f 7f       	andi	r23, 0xFF	; 255
    8e6e:	7f 7f       	andi	r23, 0xFF	; 255
    8e70:	7f 7f       	andi	r23, 0xFF	; 255
    8e72:	7f 7f       	andi	r23, 0xFF	; 255
    8e74:	7f 7f       	andi	r23, 0xFF	; 255
    8e76:	7f 7f       	andi	r23, 0xFF	; 255
    8e78:	7f 7f       	andi	r23, 0xFF	; 255
    8e7a:	7f 7f       	andi	r23, 0xFF	; 255
    8e7c:	7f 7f       	andi	r23, 0xFF	; 255
    8e7e:	7f 7f       	andi	r23, 0xFF	; 255
    8e80:	80 80       	ld	r8, Z
    8e82:	80 80       	ld	r8, Z
    8e84:	80 80       	ld	r8, Z
    8e86:	80 80       	ld	r8, Z
    8e88:	80 80       	ld	r8, Z
    8e8a:	80 80       	ld	r8, Z
    8e8c:	80 80       	ld	r8, Z
    8e8e:	80 80       	ld	r8, Z
    8e90:	80 80       	ld	r8, Z
    8e92:	80 80       	ld	r8, Z
    8e94:	80 80       	ld	r8, Z
    8e96:	80 80       	ld	r8, Z
    8e98:	80 80       	ld	r8, Z
    8e9a:	80 80       	ld	r8, Z
    8e9c:	80 80       	ld	r8, Z
    8e9e:	80 80       	ld	r8, Z
    8ea0:	80 80       	ld	r8, Z
    8ea2:	80 80       	ld	r8, Z
    8ea4:	80 80       	ld	r8, Z
    8ea6:	80 80       	ld	r8, Z
    8ea8:	80 80       	ld	r8, Z
    8eaa:	80 80       	ld	r8, Z
    8eac:	80 80       	ld	r8, Z
    8eae:	80 80       	ld	r8, Z
    8eb0:	80 80       	ld	r8, Z
    8eb2:	80 80       	ld	r8, Z
    8eb4:	80 80       	ld	r8, Z
    8eb6:	80 80       	ld	r8, Z
    8eb8:	80 80       	ld	r8, Z
    8eba:	80 80       	ld	r8, Z
    8ebc:	80 80       	ld	r8, Z
    8ebe:	80 80       	ld	r8, Z
    8ec0:	80 80       	ld	r8, Z
    8ec2:	80 80       	ld	r8, Z
    8ec4:	80 80       	ld	r8, Z
    8ec6:	80 80       	ld	r8, Z
    8ec8:	80 80       	ld	r8, Z
    8eca:	80 80       	ld	r8, Z
    8ecc:	80 80       	ld	r8, Z
    8ece:	80 80       	ld	r8, Z
    8ed0:	80 80       	ld	r8, Z
    8ed2:	80 80       	ld	r8, Z
    8ed4:	80 80       	ld	r8, Z
    8ed6:	80 80       	ld	r8, Z
    8ed8:	80 80       	ld	r8, Z
    8eda:	80 80       	ld	r8, Z
    8edc:	80 80       	ld	r8, Z
    8ede:	80 80       	ld	r8, Z
    8ee0:	80 80       	ld	r8, Z
    8ee2:	80 80       	ld	r8, Z
    8ee4:	80 80       	ld	r8, Z
    8ee6:	80 80       	ld	r8, Z
    8ee8:	80 80       	ld	r8, Z
    8eea:	80 80       	ld	r8, Z
    8eec:	80 80       	ld	r8, Z
    8eee:	80 80       	ld	r8, Z
    8ef0:	80 80       	ld	r8, Z
    8ef2:	80 80       	ld	r8, Z
    8ef4:	80 80       	ld	r8, Z
    8ef6:	80 80       	ld	r8, Z
    8ef8:	80 80       	ld	r8, Z
    8efa:	80 80       	ld	r8, Z
    8efc:	80 80       	ld	r8, Z
    8efe:	80 80       	ld	r8, Z
    8f00:	7f 7f       	andi	r23, 0xFF	; 255
    8f02:	7f 7f       	andi	r23, 0xFF	; 255
    8f04:	7f 7f       	andi	r23, 0xFF	; 255
    8f06:	7f 7f       	andi	r23, 0xFF	; 255
    8f08:	7f 7f       	andi	r23, 0xFF	; 255
    8f0a:	7f 7f       	andi	r23, 0xFF	; 255
    8f0c:	7f 7f       	andi	r23, 0xFF	; 255
    8f0e:	7f 7f       	andi	r23, 0xFF	; 255
    8f10:	7f 7f       	andi	r23, 0xFF	; 255
    8f12:	7f 7f       	andi	r23, 0xFF	; 255
    8f14:	7f 7f       	andi	r23, 0xFF	; 255
    8f16:	7f 7f       	andi	r23, 0xFF	; 255
    8f18:	7f 7f       	andi	r23, 0xFF	; 255
    8f1a:	7f 7f       	andi	r23, 0xFF	; 255
    8f1c:	7f 7f       	andi	r23, 0xFF	; 255
    8f1e:	7f 7f       	andi	r23, 0xFF	; 255
    8f20:	7f 7f       	andi	r23, 0xFF	; 255
    8f22:	7f 7f       	andi	r23, 0xFF	; 255
    8f24:	7f 7f       	andi	r23, 0xFF	; 255
    8f26:	7f 7f       	andi	r23, 0xFF	; 255
    8f28:	7f 7f       	andi	r23, 0xFF	; 255
    8f2a:	7f 7f       	andi	r23, 0xFF	; 255
    8f2c:	7f 7f       	andi	r23, 0xFF	; 255
    8f2e:	7f 7f       	andi	r23, 0xFF	; 255
    8f30:	7f 7f       	andi	r23, 0xFF	; 255
    8f32:	7f 7f       	andi	r23, 0xFF	; 255
    8f34:	7f 7f       	andi	r23, 0xFF	; 255
    8f36:	7f 7f       	andi	r23, 0xFF	; 255
    8f38:	7f 7f       	andi	r23, 0xFF	; 255
    8f3a:	7f 7f       	andi	r23, 0xFF	; 255
    8f3c:	7f 7f       	andi	r23, 0xFF	; 255
    8f3e:	7f 7f       	andi	r23, 0xFF	; 255
    8f40:	7f 7f       	andi	r23, 0xFF	; 255
    8f42:	7f 7f       	andi	r23, 0xFF	; 255
    8f44:	7f 7f       	andi	r23, 0xFF	; 255
    8f46:	7f 7f       	andi	r23, 0xFF	; 255
    8f48:	7f 7f       	andi	r23, 0xFF	; 255
    8f4a:	7f 7f       	andi	r23, 0xFF	; 255
    8f4c:	7f 7f       	andi	r23, 0xFF	; 255
    8f4e:	7f 7f       	andi	r23, 0xFF	; 255
    8f50:	7f 7f       	andi	r23, 0xFF	; 255
    8f52:	7f 7f       	andi	r23, 0xFF	; 255
    8f54:	7f 7f       	andi	r23, 0xFF	; 255
    8f56:	7f 7f       	andi	r23, 0xFF	; 255
    8f58:	7f 7f       	andi	r23, 0xFF	; 255
    8f5a:	7f 7f       	andi	r23, 0xFF	; 255
    8f5c:	7f 7f       	andi	r23, 0xFF	; 255
    8f5e:	7f 7f       	andi	r23, 0xFF	; 255
    8f60:	7f 7f       	andi	r23, 0xFF	; 255
    8f62:	7f 7f       	andi	r23, 0xFF	; 255
    8f64:	7f 7f       	andi	r23, 0xFF	; 255
    8f66:	7f 7f       	andi	r23, 0xFF	; 255
    8f68:	7f 7f       	andi	r23, 0xFF	; 255
    8f6a:	7f 7f       	andi	r23, 0xFF	; 255
    8f6c:	7f 7f       	andi	r23, 0xFF	; 255
    8f6e:	7f 7f       	andi	r23, 0xFF	; 255
    8f70:	7f 7f       	andi	r23, 0xFF	; 255
    8f72:	7f 7f       	andi	r23, 0xFF	; 255
    8f74:	7f 7f       	andi	r23, 0xFF	; 255
    8f76:	7f 7f       	andi	r23, 0xFF	; 255
    8f78:	7f 7f       	andi	r23, 0xFF	; 255
    8f7a:	7f 7f       	andi	r23, 0xFF	; 255
    8f7c:	7f 7f       	andi	r23, 0xFF	; 255
    8f7e:	7f 7f       	andi	r23, 0xFF	; 255
    8f80:	7f 7f       	andi	r23, 0xFF	; 255
    8f82:	7f 7f       	andi	r23, 0xFF	; 255
    8f84:	7f 7f       	andi	r23, 0xFF	; 255
    8f86:	7f 7f       	andi	r23, 0xFF	; 255
    8f88:	7f 7f       	andi	r23, 0xFF	; 255
    8f8a:	7f 7f       	andi	r23, 0xFF	; 255
    8f8c:	7f 7f       	andi	r23, 0xFF	; 255
    8f8e:	7f 7f       	andi	r23, 0xFF	; 255
    8f90:	7f 7f       	andi	r23, 0xFF	; 255
    8f92:	7f 7f       	andi	r23, 0xFF	; 255
    8f94:	7f 7f       	andi	r23, 0xFF	; 255
    8f96:	7f 7f       	andi	r23, 0xFF	; 255
    8f98:	7f 7f       	andi	r23, 0xFF	; 255
    8f9a:	7f 7f       	andi	r23, 0xFF	; 255
    8f9c:	7f 7f       	andi	r23, 0xFF	; 255
    8f9e:	7f 7f       	andi	r23, 0xFF	; 255
    8fa0:	7f 7f       	andi	r23, 0xFF	; 255
    8fa2:	7f 7f       	andi	r23, 0xFF	; 255
    8fa4:	7f 7f       	andi	r23, 0xFF	; 255
    8fa6:	7f 7f       	andi	r23, 0xFF	; 255
    8fa8:	7f 7f       	andi	r23, 0xFF	; 255
    8faa:	7f 7f       	andi	r23, 0xFF	; 255
    8fac:	7f 7f       	andi	r23, 0xFF	; 255
    8fae:	7f 7f       	andi	r23, 0xFF	; 255
    8fb0:	7f 7f       	andi	r23, 0xFF	; 255
    8fb2:	7f 7f       	andi	r23, 0xFF	; 255
    8fb4:	7f 7f       	andi	r23, 0xFF	; 255
    8fb6:	7f 7f       	andi	r23, 0xFF	; 255
    8fb8:	7f 7f       	andi	r23, 0xFF	; 255
    8fba:	7f 7f       	andi	r23, 0xFF	; 255
    8fbc:	7f 7f       	andi	r23, 0xFF	; 255
    8fbe:	7f 7f       	andi	r23, 0xFF	; 255
    8fc0:	80 80       	ld	r8, Z
    8fc2:	80 80       	ld	r8, Z
    8fc4:	80 80       	ld	r8, Z
    8fc6:	80 80       	ld	r8, Z
    8fc8:	80 80       	ld	r8, Z
    8fca:	80 80       	ld	r8, Z
    8fcc:	80 80       	ld	r8, Z
    8fce:	80 80       	ld	r8, Z
    8fd0:	80 80       	ld	r8, Z
    8fd2:	80 80       	ld	r8, Z
    8fd4:	80 80       	ld	r8, Z
    8fd6:	80 80       	ld	r8, Z
    8fd8:	80 80       	ld	r8, Z
    8fda:	80 80       	ld	r8, Z
    8fdc:	80 80       	ld	r8, Z
    8fde:	80 80       	ld	r8, Z
    8fe0:	80 80       	ld	r8, Z
    8fe2:	80 80       	ld	r8, Z
    8fe4:	80 80       	ld	r8, Z
    8fe6:	80 80       	ld	r8, Z
    8fe8:	80 80       	ld	r8, Z
    8fea:	80 80       	ld	r8, Z
    8fec:	80 80       	ld	r8, Z
    8fee:	80 80       	ld	r8, Z
    8ff0:	80 80       	ld	r8, Z
    8ff2:	80 80       	ld	r8, Z
    8ff4:	80 80       	ld	r8, Z
    8ff6:	80 80       	ld	r8, Z
    8ff8:	80 80       	ld	r8, Z
    8ffa:	80 80       	ld	r8, Z
    8ffc:	80 80       	ld	r8, Z
    8ffe:	80 80       	ld	r8, Z
    9000:	03 09       	sbc	r16, r3
    9002:	13 1e       	adc	r1, r19
    9004:	28 31       	cpi	r18, 0x18	; 24
    9006:	3a 40       	sbci	r19, 0x0A	; 10
    9008:	46 4c       	sbci	r20, 0xC6	; 198
    900a:	50 54       	subi	r21, 0x40	; 64
    900c:	58 5b       	subi	r21, 0xB8	; 184
    900e:	5e 61       	ori	r21, 0x1E	; 30
    9010:	63 65       	ori	r22, 0x53	; 83
    9012:	67 69       	ori	r22, 0x97	; 151
    9014:	6b 6c       	ori	r22, 0xCB	; 203
    9016:	6e 6f       	ori	r22, 0xFE	; 254
    9018:	70 71       	andi	r23, 0x10	; 16
    901a:	72 73       	andi	r23, 0x32	; 50
    901c:	74 75       	andi	r23, 0x54	; 84
    901e:	76 77       	andi	r23, 0x76	; 118
    9020:	77 78       	andi	r23, 0x87	; 135
    9022:	79 79       	andi	r23, 0x99	; 153
    9024:	7a 7a       	andi	r23, 0xAA	; 170
    9026:	7b 7b       	andi	r23, 0xBB	; 187
    9028:	7c 7c       	andi	r23, 0xCC	; 204
    902a:	7c 7d       	andi	r23, 0xDC	; 220
    902c:	7d 7d       	andi	r23, 0xDD	; 221
    902e:	7e 7e       	andi	r23, 0xEE	; 238
    9030:	7e 7e       	andi	r23, 0xEE	; 238
    9032:	7f 7f       	andi	r23, 0xFF	; 255
    9034:	7f 7f       	andi	r23, 0xFF	; 255
    9036:	7f 7f       	andi	r23, 0xFF	; 255
    9038:	7f 7f       	andi	r23, 0xFF	; 255
    903a:	7f 7f       	andi	r23, 0xFF	; 255
    903c:	7f 7f       	andi	r23, 0xFF	; 255
    903e:	7f 7f       	andi	r23, 0xFF	; 255
    9040:	7f 7f       	andi	r23, 0xFF	; 255
    9042:	7f 7f       	andi	r23, 0xFF	; 255
    9044:	7f 7f       	andi	r23, 0xFF	; 255
    9046:	7f 7f       	andi	r23, 0xFF	; 255
    9048:	7f 7f       	andi	r23, 0xFF	; 255
    904a:	7f 7f       	andi	r23, 0xFF	; 255
    904c:	7f 7e       	andi	r23, 0xEF	; 239
    904e:	7e 7e       	andi	r23, 0xEE	; 238
    9050:	7e 7d       	andi	r23, 0xDE	; 222
    9052:	7d 7d       	andi	r23, 0xDD	; 221
    9054:	7c 7c       	andi	r23, 0xCC	; 204
    9056:	7c 7b       	andi	r23, 0xBC	; 188
    9058:	7b 7a       	andi	r23, 0xAB	; 171
    905a:	7a 79       	andi	r23, 0x9A	; 154
    905c:	79 78       	andi	r23, 0x89	; 137
    905e:	77 77       	andi	r23, 0x77	; 119
    9060:	76 75       	andi	r23, 0x56	; 86
    9062:	74 73       	andi	r23, 0x34	; 52
    9064:	72 71       	andi	r23, 0x12	; 18
    9066:	70 6f       	ori	r23, 0xF0	; 240
    9068:	6e 6c       	ori	r22, 0xCE	; 206
    906a:	6b 69       	ori	r22, 0x9B	; 155
    906c:	67 65       	ori	r22, 0x57	; 87
    906e:	63 61       	ori	r22, 0x13	; 19
    9070:	5e 5b       	subi	r21, 0xBE	; 190
    9072:	58 54       	subi	r21, 0x48	; 72
    9074:	50 4c       	sbci	r21, 0xC0	; 192
    9076:	46 40       	sbci	r20, 0x06	; 6
    9078:	3a 31       	cpi	r19, 0x1A	; 26
    907a:	28 1e       	adc	r2, r24
    907c:	13 09       	sbc	r17, r3
    907e:	03 00       	.word	0x0003	; ????
    9080:	c6 cc       	rjmp	.-1652   	; 0x8a0e <waves+0xe>
    9082:	d5 db       	rcall	.-2134   	; 0x882e <steptable+0x26>
    9084:	df e3       	ldi	r29, 0x3F	; 63
    9086:	e5 e7       	ldi	r30, 0x75	; 117
    9088:	e9 ea       	ldi	r30, 0xA9	; 169
    908a:	eb ec       	ldi	r30, 0xCB	; 203
    908c:	ed ee       	ldi	r30, 0xED	; 237
    908e:	ef ef       	ldi	r30, 0xFF	; 255
    9090:	f0 f0       	brcs	.+60     	; 0x90ce <waves+0x6ce>
    9092:	f0 f1       	brcs	.+124    	; 0x9110 <waves+0x710>
    9094:	f1 f1       	breq	.+124    	; 0x9112 <waves+0x712>
    9096:	f1 f2       	breq	.-68     	; 0x9054 <waves+0x654>
    9098:	f2 f2       	brmi	.-68     	; 0x9056 <waves+0x656>
    909a:	f2 f2       	brmi	.-68     	; 0x9058 <waves+0x658>
    909c:	f2 f2       	brmi	.-68     	; 0x905a <waves+0x65a>
    909e:	f2 f3       	brmi	.-4      	; 0x909c <waves+0x69c>
    90a0:	f3 f3       	brvs	.-4      	; 0x909e <waves+0x69e>
    90a2:	f3 f3       	brvs	.-4      	; 0x90a0 <waves+0x6a0>
    90a4:	f3 f3       	brvs	.-4      	; 0x90a2 <waves+0x6a2>
    90a6:	f3 f3       	brvs	.-4      	; 0x90a4 <waves+0x6a4>
    90a8:	f3 f3       	brvs	.-4      	; 0x90a6 <waves+0x6a6>
    90aa:	f3 f3       	brvs	.-4      	; 0x90a8 <waves+0x6a8>
    90ac:	f3 f3       	brvs	.-4      	; 0x90aa <waves+0x6aa>
    90ae:	f3 f3       	brvs	.-4      	; 0x90ac <waves+0x6ac>
    90b0:	f3 f3       	brvs	.-4      	; 0x90ae <waves+0x6ae>
    90b2:	f3 f3       	brvs	.-4      	; 0x90b0 <waves+0x6b0>
    90b4:	f3 f3       	brvs	.-4      	; 0x90b2 <waves+0x6b2>
    90b6:	f3 f3       	brvs	.-4      	; 0x90b4 <waves+0x6b4>
    90b8:	f3 f3       	brvs	.-4      	; 0x90b6 <waves+0x6b6>
    90ba:	f3 f3       	brvs	.-4      	; 0x90b8 <waves+0x6b8>
    90bc:	f3 f3       	brvs	.-4      	; 0x90ba <waves+0x6ba>
    90be:	f3 f3       	brvs	.-4      	; 0x90bc <waves+0x6bc>
    90c0:	f3 f3       	brvs	.-4      	; 0x90be <waves+0x6be>
    90c2:	f3 f3       	brvs	.-4      	; 0x90c0 <waves+0x6c0>
    90c4:	f3 f3       	brvs	.-4      	; 0x90c2 <waves+0x6c2>
    90c6:	f3 f3       	brvs	.-4      	; 0x90c4 <waves+0x6c4>
    90c8:	f3 f3       	brvs	.-4      	; 0x90c6 <waves+0x6c6>
    90ca:	f3 f3       	brvs	.-4      	; 0x90c8 <waves+0x6c8>
    90cc:	f3 f3       	brvs	.-4      	; 0x90ca <waves+0x6ca>
    90ce:	f3 f3       	brvs	.-4      	; 0x90cc <waves+0x6cc>
    90d0:	f3 f3       	brvs	.-4      	; 0x90ce <waves+0x6ce>
    90d2:	f3 f3       	brvs	.-4      	; 0x90d0 <waves+0x6d0>
    90d4:	f3 f3       	brvs	.-4      	; 0x90d2 <waves+0x6d2>
    90d6:	f3 f3       	brvs	.-4      	; 0x90d4 <waves+0x6d4>
    90d8:	f3 f3       	brvs	.-4      	; 0x90d6 <waves+0x6d6>
    90da:	f3 f3       	brvs	.-4      	; 0x90d8 <waves+0x6d8>
    90dc:	f3 f3       	brvs	.-4      	; 0x90da <waves+0x6da>
    90de:	f3 f3       	brvs	.-4      	; 0x90dc <waves+0x6dc>
    90e0:	f2 f2       	brmi	.-68     	; 0x909e <waves+0x69e>
    90e2:	f2 f2       	brmi	.-68     	; 0x90a0 <waves+0x6a0>
    90e4:	f2 f2       	brmi	.-68     	; 0x90a2 <waves+0x6a2>
    90e6:	f2 f2       	brmi	.-68     	; 0x90a4 <waves+0x6a4>
    90e8:	f1 f1       	breq	.+124    	; 0x9166 <waves+0x766>
    90ea:	f1 f1       	breq	.+124    	; 0x9168 <waves+0x768>
    90ec:	f0 f0       	brcs	.+60     	; 0x912a <waves+0x72a>
    90ee:	f0 ef       	ldi	r31, 0xF0	; 240
    90f0:	ef ee       	ldi	r30, 0xEF	; 239
    90f2:	ed ec       	ldi	r30, 0xCD	; 205
    90f4:	eb ea       	ldi	r30, 0xAB	; 171
    90f6:	e9 e7       	ldi	r30, 0x79	; 121
    90f8:	e5 e3       	ldi	r30, 0x35	; 53
    90fa:	df db       	rcall	.-2114   	; 0x88ba <steptable+0xb2>
    90fc:	d5 cc       	rjmp	.-1622   	; 0x8aa8 <waves+0xa8>
    90fe:	c6 00       	.word	0x00c6	; ????
    9100:	00 28       	or	r0, r0
    9102:	3d 42       	sbci	r19, 0x2D	; 45
    9104:	30 2d       	mov	r19, r0
    9106:	2c 2b       	or	r18, r28
    9108:	2c 2d       	mov	r18, r12
    910a:	2e 2f       	mov	r18, r30
    910c:	30 32       	cpi	r19, 0x20	; 32
    910e:	33 35       	cpi	r19, 0x53	; 83
    9110:	37 39       	cpi	r19, 0x97	; 151
    9112:	3b 3d       	cpi	r19, 0xDB	; 219
    9114:	3f 41       	sbci	r19, 0x1F	; 31
    9116:	43 45       	sbci	r20, 0x53	; 83
    9118:	48 4a       	sbci	r20, 0xA8	; 168
    911a:	4c 4e       	sbci	r20, 0xEC	; 236
    911c:	50 53       	subi	r21, 0x30	; 48
    911e:	55 57       	subi	r21, 0x75	; 117
    9120:	59 5b       	subi	r21, 0xB9	; 185
    9122:	5d 5f       	subi	r21, 0xFD	; 253
    9124:	61 63       	ori	r22, 0x31	; 49
    9126:	65 67       	ori	r22, 0x75	; 117
    9128:	69 6b       	ori	r22, 0xB9	; 185
    912a:	6c 6e       	ori	r22, 0xEC	; 236
    912c:	70 71       	andi	r23, 0x10	; 16
    912e:	73 74       	andi	r23, 0x43	; 67
    9130:	75 77       	andi	r23, 0x75	; 117
    9132:	78 79       	andi	r23, 0x98	; 152
    9134:	7a 7b       	andi	r23, 0xBA	; 186
    9136:	7c 7d       	andi	r23, 0xDC	; 220
    9138:	7d 7e       	andi	r23, 0xED	; 237
    913a:	7e 7f       	andi	r23, 0xFE	; 254
    913c:	7f 7f       	andi	r23, 0xFF	; 255
    913e:	7f 7f       	andi	r23, 0xFF	; 255
    9140:	7f 7f       	andi	r23, 0xFF	; 255
    9142:	7f 7f       	andi	r23, 0xFF	; 255
    9144:	7f 7f       	andi	r23, 0xFF	; 255
    9146:	7e 7e       	andi	r23, 0xEE	; 238
    9148:	7d 7d       	andi	r23, 0xDD	; 221
    914a:	7c 7b       	andi	r23, 0xBC	; 188
    914c:	7a 79       	andi	r23, 0x9A	; 154
    914e:	78 77       	andi	r23, 0x78	; 120
    9150:	75 74       	andi	r23, 0x45	; 69
    9152:	73 71       	andi	r23, 0x13	; 19
    9154:	70 6e       	ori	r23, 0xE0	; 224
    9156:	6c 6b       	ori	r22, 0xBC	; 188
    9158:	69 67       	ori	r22, 0x79	; 121
    915a:	65 63       	ori	r22, 0x35	; 53
    915c:	61 5f       	subi	r22, 0xF1	; 241
    915e:	5d 5b       	subi	r21, 0xBD	; 189
    9160:	59 57       	subi	r21, 0x79	; 121
    9162:	55 53       	subi	r21, 0x35	; 53
    9164:	50 4e       	sbci	r21, 0xE0	; 224
    9166:	4c 4a       	sbci	r20, 0xAC	; 172
    9168:	48 45       	sbci	r20, 0x58	; 88
    916a:	43 41       	sbci	r20, 0x13	; 19
    916c:	3f 3d       	cpi	r19, 0xDF	; 223
    916e:	3b 39       	cpi	r19, 0x9B	; 155
    9170:	37 35       	cpi	r19, 0x57	; 87
    9172:	33 32       	cpi	r19, 0x23	; 35
    9174:	30 2f       	mov	r19, r16
    9176:	2e 2d       	mov	r18, r14
    9178:	2c 2b       	or	r18, r28
    917a:	2c 2d       	mov	r18, r12
    917c:	30 42       	sbci	r19, 0x20	; 32
    917e:	3d 28       	or	r3, r13
    9180:	00 e9       	ldi	r16, 0x90	; 144
    9182:	e5 fe       	sbrs	r14, 5
    9184:	d4 d7       	rcall	.+4008   	; 0xa12e <print_level_score+0x22>
    9186:	d7 d7       	rcall	.+4014   	; 0xa136 <print_level_score+0x2a>
    9188:	d6 d4       	rcall	.+2476   	; 0x9b36 <LBLineIntersect+0xb0>
    918a:	d2 d0       	rcall	.+420    	; 0x9330 <waves+0x930>
    918c:	ce cc       	rjmp	.-1636   	; 0x8b2a <waves+0x12a>
    918e:	ca c8       	rjmp	.-3692   	; 0x8324 <ProcessMusic+0x48>
    9190:	c6 c3       	rjmp	.+1932   	; 0x991e <LBGetNextFrame+0x42>
    9192:	c1 bf       	out	0x31, r28	; 49
    9194:	bd ba       	out	0x1d, r11	; 29
    9196:	b8 b6       	in	r11, 0x38	; 56
    9198:	b4 b1       	in	r27, 0x04	; 4
    919a:	af ad       	ldd	r26, Y+63	; 0x3f
    919c:	ab a9       	ldd	r26, Y+51	; 0x33
    919e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    91a0:	a3 a1       	ldd	r26, Z+35	; 0x23
    91a2:	9f 9e       	mul	r9, r31
    91a4:	9c 9a       	sbi	0x13, 4	; 19
    91a6:	99 97       	sbiw	r26, 0x29	; 41
    91a8:	95 94       	asr	r9
    91aa:	93 91       	.word	0x9193	; ????
    91ac:	90 8f       	std	Z+24, r25	; 0x18
    91ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    91b0:	8b 8a       	std	Y+19, r8	; 0x13
    91b2:	89 88       	ldd	r8, Y+17	; 0x11
    91b4:	88 87       	std	Y+8, r24	; 0x08
    91b6:	86 85       	ldd	r24, Z+14	; 0x0e
    91b8:	85 84       	ldd	r8, Z+13	; 0x0d
    91ba:	84 84       	ldd	r8, Z+12	; 0x0c
    91bc:	83 83       	std	Z+3, r24	; 0x03
    91be:	83 83       	std	Z+3, r24	; 0x03
    91c0:	83 83       	std	Z+3, r24	; 0x03
    91c2:	83 83       	std	Z+3, r24	; 0x03
    91c4:	83 84       	ldd	r8, Z+11	; 0x0b
    91c6:	84 84       	ldd	r8, Z+12	; 0x0c
    91c8:	85 85       	ldd	r24, Z+13	; 0x0d
    91ca:	86 87       	std	Z+14, r24	; 0x0e
    91cc:	88 88       	ldd	r8, Y+16	; 0x10
    91ce:	89 8a       	std	Y+17, r8	; 0x11
    91d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    91d2:	8d 8f       	std	Y+29, r24	; 0x1d
    91d4:	90 91 93 94 	lds	r25, 0x9493
    91d8:	95 97       	sbiw	r26, 0x25	; 37
    91da:	99 9a       	sbi	0x13, 1	; 19
    91dc:	9c 9e       	mul	r9, r28
    91de:	9f a1       	ldd	r25, Y+39	; 0x27
    91e0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    91e2:	a7 a9       	ldd	r26, Z+55	; 0x37
    91e4:	ab ad       	ldd	r26, Y+59	; 0x3b
    91e6:	af b1       	in	r26, 0x0f	; 15
    91e8:	b4 b6       	in	r11, 0x34	; 52
    91ea:	b8 ba       	out	0x18, r11	; 24
    91ec:	bd bf       	out	0x3d, r27	; 61
    91ee:	c1 c3       	rjmp	.+1922   	; 0x9972 <LBGetJoyPadState+0x50>
    91f0:	c6 c8       	rjmp	.-3700   	; 0x837e <ProcessMusic+0xa2>
    91f2:	ca cc       	rjmp	.-1644   	; 0x8b88 <waves+0x188>
    91f4:	ce d0       	rcall	.+412    	; 0x9392 <waves+0x992>
    91f6:	d2 d4       	rcall	.+2468   	; 0x9b9c <LBLineIntersect+0x116>
    91f8:	d6 d7       	rcall	.+4012   	; 0xa1a6 <print_final_score+0x16>
    91fa:	d7 d7       	rcall	.+4014   	; 0xa1aa <print_final_score+0x1a>
    91fc:	d4 fe       	sbrs	r13, 4
    91fe:	e5 e9       	ldi	r30, 0x95	; 149
    9200:	f9 f8       	.word	0xf8f9	; ????
    9202:	f9 f5       	brne	.+126    	; 0x9282 <waves+0x882>
    9204:	eb e1       	ldi	r30, 0x1B	; 27
    9206:	dd de       	rcall	.-582    	; 0x8fc2 <waves+0x5c2>
    9208:	e0 e2       	ldi	r30, 0x20	; 32
    920a:	e4 e5       	ldi	r30, 0x54	; 84
    920c:	e6 e5       	ldi	r30, 0x56	; 86
    920e:	e4 e2       	ldi	r30, 0x24	; 36
    9210:	de d9       	rcall	.-3140   	; 0x85ce <ProcessMusic+0x2f2>
    9212:	d2 ca       	rjmp	.-2652   	; 0x87b8 <esmw+0x24>
    9214:	c1 b7       	in	r28, 0x31	; 49
    9216:	ac a2       	std	Y+36, r10	; 0x24
    9218:	99 91       	ld	r25, Y+
    921a:	8a 86       	std	Y+10, r8	; 0x0a
    921c:	83 81       	ldd	r24, Z+3	; 0x03
    921e:	80 80       	ld	r8, Z
    9220:	81 82       	std	Z+1, r8	; 0x01
    9222:	83 85       	ldd	r24, Z+11	; 0x0b
    9224:	86 88       	ldd	r8, Z+22	; 0x16
    9226:	8a 8c       	ldd	r8, Y+26	; 0x1a
    9228:	8d 8f       	std	Y+29, r24	; 0x1d
    922a:	90 92 93 95 	sts	0x9593, r9
    922e:	96 97       	sbiw	r26, 0x26	; 38
    9230:	98 99       	sbic	0x13, 0	; 19
    9232:	9a 9b       	sbis	0x13, 2	; 19
    9234:	9b 9c       	mul	r9, r11
    9236:	9d 9d       	mul	r25, r13
    9238:	9d 9e       	mul	r9, r29
    923a:	9e 9e       	mul	r9, r30
    923c:	9f 9f       	mul	r25, r31
    923e:	9f 9f       	mul	r25, r31
    9240:	9f 9f       	mul	r25, r31
    9242:	9f 9e       	mul	r9, r31
    9244:	9e 9e       	mul	r9, r30
    9246:	9d 9d       	mul	r25, r13
    9248:	9d 9c       	mul	r9, r13
    924a:	9b 9b       	sbis	0x13, 3	; 19
    924c:	9a 99       	sbic	0x13, 2	; 19
    924e:	98 97       	sbiw	r26, 0x28	; 40
    9250:	96 95       	lsr	r25
    9252:	93 92       	.word	0x9293	; ????
    9254:	90 8f       	std	Z+24, r25	; 0x18
    9256:	8d 8c       	ldd	r8, Y+29	; 0x1d
    9258:	8a 88       	ldd	r8, Y+18	; 0x12
    925a:	86 85       	ldd	r24, Z+14	; 0x0e
    925c:	83 82       	std	Z+3, r8	; 0x03
    925e:	81 80       	ldd	r8, Z+1	; 0x01
    9260:	80 81       	ld	r24, Z
    9262:	83 86       	std	Z+11, r8	; 0x0b
    9264:	8a 91       	ld	r24, -Y
    9266:	99 a2       	std	Y+33, r9	; 0x21
    9268:	ac b7       	in	r26, 0x3c	; 60
    926a:	c1 ca       	rjmp	.-2686   	; 0x87ee <esmw+0x5a>
    926c:	d2 d9       	rcall	.-3164   	; 0x8612 <ProcessMusic+0x336>
    926e:	de e2       	ldi	r29, 0x2E	; 46
    9270:	e4 e5       	ldi	r30, 0x54	; 84
    9272:	e6 e5       	ldi	r30, 0x56	; 86
    9274:	e4 e2       	ldi	r30, 0x24	; 36
    9276:	e0 de       	rcall	.-576    	; 0x9038 <waves+0x638>
    9278:	dd e1       	ldi	r29, 0x1D	; 29
    927a:	eb f5       	brvc	.+122    	; 0x92f6 <waves+0x8f6>
    927c:	f9 f8       	.word	0xf8f9	; ????
    927e:	f9 00       	.word	0x00f9	; ????
    9280:	07 08       	sbc	r0, r7
    9282:	07 0b       	sbc	r16, r23
    9284:	15 1f       	adc	r17, r21
    9286:	23 22       	and	r2, r19
    9288:	20 1e       	adc	r2, r16
    928a:	1c 1b       	sub	r17, r28
    928c:	1a 1b       	sub	r17, r26
    928e:	1c 1e       	adc	r1, r28
    9290:	22 27       	eor	r18, r18
    9292:	2e 36       	cpi	r18, 0x6E	; 110
    9294:	3f 49       	sbci	r19, 0x9F	; 159
    9296:	54 5e       	subi	r21, 0xE4	; 228
    9298:	67 6f       	ori	r22, 0xF7	; 247
    929a:	76 7a       	andi	r23, 0xA6	; 166
    929c:	7e 7f       	andi	r23, 0xFE	; 254
    929e:	7f 7f       	andi	r23, 0xFF	; 255
    92a0:	7f 7e       	andi	r23, 0xEF	; 239
    92a2:	7d 7b       	andi	r23, 0xBD	; 189
    92a4:	7a 78       	andi	r23, 0x8A	; 138
    92a6:	76 74       	andi	r23, 0x46	; 70
    92a8:	73 71       	andi	r23, 0x13	; 19
    92aa:	70 6e       	ori	r23, 0xE0	; 224
    92ac:	6d 6b       	ori	r22, 0xBD	; 189
    92ae:	6a 69       	ori	r22, 0x9A	; 154
    92b0:	68 67       	ori	r22, 0x78	; 120
    92b2:	66 65       	ori	r22, 0x56	; 86
    92b4:	65 64       	ori	r22, 0x45	; 69
    92b6:	64 63       	ori	r22, 0x34	; 52
    92b8:	63 62       	ori	r22, 0x23	; 35
    92ba:	62 62       	ori	r22, 0x22	; 34
    92bc:	61 61       	ori	r22, 0x11	; 17
    92be:	61 61       	ori	r22, 0x11	; 17
    92c0:	61 61       	ori	r22, 0x11	; 17
    92c2:	61 62       	ori	r22, 0x21	; 33
    92c4:	62 62       	ori	r22, 0x22	; 34
    92c6:	63 63       	ori	r22, 0x33	; 51
    92c8:	63 64       	ori	r22, 0x43	; 67
    92ca:	65 65       	ori	r22, 0x55	; 85
    92cc:	66 67       	ori	r22, 0x76	; 118
    92ce:	68 69       	ori	r22, 0x98	; 152
    92d0:	6a 6b       	ori	r22, 0xBA	; 186
    92d2:	6d 6e       	ori	r22, 0xED	; 237
    92d4:	70 71       	andi	r23, 0x10	; 16
    92d6:	73 74       	andi	r23, 0x43	; 67
    92d8:	76 78       	andi	r23, 0x86	; 134
    92da:	7a 7b       	andi	r23, 0xBA	; 186
    92dc:	7d 7e       	andi	r23, 0xED	; 237
    92de:	7f 7f       	andi	r23, 0xFF	; 255
    92e0:	7f 7f       	andi	r23, 0xFF	; 255
    92e2:	7e 7a       	andi	r23, 0xAE	; 174
    92e4:	76 6f       	ori	r23, 0xF6	; 246
    92e6:	67 5e       	subi	r22, 0xE7	; 231
    92e8:	54 49       	sbci	r21, 0x94	; 148
    92ea:	3f 36       	cpi	r19, 0x6F	; 111
    92ec:	2e 27       	eor	r18, r30
    92ee:	22 1e       	adc	r2, r18
    92f0:	1c 1b       	sub	r17, r28
    92f2:	1a 1b       	sub	r17, r26
    92f4:	1c 1e       	adc	r1, r28
    92f6:	20 22       	and	r2, r16
    92f8:	23 1f       	adc	r18, r19
    92fa:	15 0b       	sbc	r17, r21
    92fc:	07 08       	sbc	r0, r7
    92fe:	07 00       	.word	0x0007	; ????
    9300:	1f 31       	cpi	r17, 0x1F	; 31
    9302:	3d 44       	sbci	r19, 0x4D	; 77
    9304:	4e 53       	subi	r20, 0x3E	; 62
    9306:	54 56       	subi	r21, 0x64	; 100
    9308:	5a 5f       	subi	r21, 0xFA	; 250
    930a:	64 69       	ori	r22, 0x94	; 148
    930c:	6e 74       	andi	r22, 0x4E	; 78
    930e:	76 79       	andi	r23, 0x96	; 150
    9310:	7c 7f       	andi	r23, 0xFC	; 252
    9312:	7f 7f       	andi	r23, 0xFF	; 255
    9314:	7f 7f       	andi	r23, 0xFF	; 255
    9316:	7f 7f       	andi	r23, 0xFF	; 255
    9318:	7f 7f       	andi	r23, 0xFF	; 255
    931a:	7f 7f       	andi	r23, 0xFF	; 255
    931c:	7f 7f       	andi	r23, 0xFF	; 255
    931e:	7f 7f       	andi	r23, 0xFF	; 255
    9320:	7f 7f       	andi	r23, 0xFF	; 255
    9322:	7f 7f       	andi	r23, 0xFF	; 255
    9324:	7f 7f       	andi	r23, 0xFF	; 255
    9326:	7f 7f       	andi	r23, 0xFF	; 255
    9328:	7f 7f       	andi	r23, 0xFF	; 255
    932a:	7f 7f       	andi	r23, 0xFF	; 255
    932c:	7f 7f       	andi	r23, 0xFF	; 255
    932e:	7f 7f       	andi	r23, 0xFF	; 255
    9330:	7f 7f       	andi	r23, 0xFF	; 255
    9332:	7f 7f       	andi	r23, 0xFF	; 255
    9334:	7f 7f       	andi	r23, 0xFF	; 255
    9336:	7f 7f       	andi	r23, 0xFF	; 255
    9338:	7f 7f       	andi	r23, 0xFF	; 255
    933a:	7f 7f       	andi	r23, 0xFF	; 255
    933c:	7f 7f       	andi	r23, 0xFF	; 255
    933e:	7f 7f       	andi	r23, 0xFF	; 255
    9340:	7f 7f       	andi	r23, 0xFF	; 255
    9342:	7f 7f       	andi	r23, 0xFF	; 255
    9344:	7f 7f       	andi	r23, 0xFF	; 255
    9346:	7f 7f       	andi	r23, 0xFF	; 255
    9348:	7f 7f       	andi	r23, 0xFF	; 255
    934a:	7f 7f       	andi	r23, 0xFF	; 255
    934c:	7f 7f       	andi	r23, 0xFF	; 255
    934e:	7f 7f       	andi	r23, 0xFF	; 255
    9350:	7f 7f       	andi	r23, 0xFF	; 255
    9352:	7f 7f       	andi	r23, 0xFF	; 255
    9354:	7f 7f       	andi	r23, 0xFF	; 255
    9356:	7f 7f       	andi	r23, 0xFF	; 255
    9358:	7f 7f       	andi	r23, 0xFF	; 255
    935a:	7f 7f       	andi	r23, 0xFF	; 255
    935c:	7f 7f       	andi	r23, 0xFF	; 255
    935e:	7f 7f       	andi	r23, 0xFF	; 255
    9360:	7f 7f       	andi	r23, 0xFF	; 255
    9362:	7f 7f       	andi	r23, 0xFF	; 255
    9364:	7f 7f       	andi	r23, 0xFF	; 255
    9366:	7f 7f       	andi	r23, 0xFF	; 255
    9368:	7f 7f       	andi	r23, 0xFF	; 255
    936a:	7f 7f       	andi	r23, 0xFF	; 255
    936c:	7f 7f       	andi	r23, 0xFF	; 255
    936e:	7f 7f       	andi	r23, 0xFF	; 255
    9370:	7f 7f       	andi	r23, 0xFF	; 255
    9372:	7f 7f       	andi	r23, 0xFF	; 255
    9374:	7f 7f       	andi	r23, 0xFF	; 255
    9376:	7f 7f       	andi	r23, 0xFF	; 255
    9378:	7f 7f       	andi	r23, 0xFF	; 255
    937a:	7f 7c       	andi	r23, 0xCF	; 207
    937c:	78 71       	andi	r23, 0x18	; 24
    937e:	68 4c       	sbci	r22, 0xC8	; 200
    9380:	2c 1c       	adc	r2, r12
    9382:	12 0c       	add	r1, r2
    9384:	0a 0b       	sbc	r16, r26
    9386:	0a 05       	cpc	r16, r10
    9388:	fd f3       	brhs	.-2      	; 0x9388 <waves+0x988>
    938a:	e9 df       	rcall	.-46     	; 0x935e <waves+0x95e>
    938c:	d4 ca       	rjmp	.-2648   	; 0x8936 <steptable+0x12e>
    938e:	c0 b7       	in	r28, 0x30	; 48
    9390:	ae a6       	std	Y+46, r10	; 0x2e
    9392:	9e 97       	sbiw	r26, 0x2e	; 46
    9394:	91 8b       	std	Z+17, r25	; 0x11
    9396:	86 85       	ldd	r24, Z+14	; 0x0e
    9398:	82 80       	ldd	r8, Z+2	; 0x02
    939a:	80 80       	ld	r8, Z
    939c:	80 80       	ld	r8, Z
    939e:	80 80       	ld	r8, Z
    93a0:	80 80       	ld	r8, Z
    93a2:	80 80       	ld	r8, Z
    93a4:	80 80       	ld	r8, Z
    93a6:	80 80       	ld	r8, Z
    93a8:	80 80       	ld	r8, Z
    93aa:	80 80       	ld	r8, Z
    93ac:	80 80       	ld	r8, Z
    93ae:	80 80       	ld	r8, Z
    93b0:	80 80       	ld	r8, Z
    93b2:	80 80       	ld	r8, Z
    93b4:	80 80       	ld	r8, Z
    93b6:	80 80       	ld	r8, Z
    93b8:	80 80       	ld	r8, Z
    93ba:	80 80       	ld	r8, Z
    93bc:	80 80       	ld	r8, Z
    93be:	80 80       	ld	r8, Z
    93c0:	80 80       	ld	r8, Z
    93c2:	80 80       	ld	r8, Z
    93c4:	80 80       	ld	r8, Z
    93c6:	80 80       	ld	r8, Z
    93c8:	80 80       	ld	r8, Z
    93ca:	80 80       	ld	r8, Z
    93cc:	80 80       	ld	r8, Z
    93ce:	80 80       	ld	r8, Z
    93d0:	80 80       	ld	r8, Z
    93d2:	80 80       	ld	r8, Z
    93d4:	80 80       	ld	r8, Z
    93d6:	80 80       	ld	r8, Z
    93d8:	80 80       	ld	r8, Z
    93da:	80 80       	ld	r8, Z
    93dc:	80 80       	ld	r8, Z
    93de:	80 80       	ld	r8, Z
    93e0:	80 80       	ld	r8, Z
    93e2:	80 80       	ld	r8, Z
    93e4:	80 80       	ld	r8, Z
    93e6:	80 80       	ld	r8, Z
    93e8:	80 80       	ld	r8, Z
    93ea:	80 80       	ld	r8, Z
    93ec:	80 80       	ld	r8, Z
    93ee:	80 80       	ld	r8, Z
    93f0:	80 80       	ld	r8, Z
    93f2:	80 80       	ld	r8, Z
    93f4:	80 87       	std	Z+8, r24	; 0x08
    93f6:	91 9d       	mul	r25, r1
    93f8:	ac c4       	rjmp	.+2392   	; 0x9d52 <init_shot_state+0x22>
    93fa:	cb d4       	rcall	.+2454   	; 0x9d92 <set_shot_animations+0x28>
    93fc:	dd f2       	brhs	.-74     	; 0x93b4 <waves+0x9b4>
    93fe:	fa fa       	.word	0xfafa	; ????

00009400 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    9400:	90 91 bd 0b 	lds	r25, 0x0BBD
    9404:	e0 e9       	ldi	r30, 0x90	; 144
    9406:	fa e0       	ldi	r31, 0x0A	; 10
    9408:	80 e0       	ldi	r24, 0x00	; 0
    940a:	89 17       	cp	r24, r25
    940c:	49 f0       	breq	.+18     	; 0x9420 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    940e:	a0 81       	ld	r26, Z
    9410:	b1 81       	ldd	r27, Z+1	; 0x01
    9412:	a0 5e       	subi	r26, 0xE0	; 224
    9414:	be 4f       	sbci	r27, 0xFE	; 254
    9416:	22 81       	ldd	r18, Z+2	; 0x02
    9418:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    941a:	8f 5f       	subi	r24, 0xFF	; 255
    941c:	33 96       	adiw	r30, 0x03	; 3
    941e:	f5 cf       	rjmp	.-22     	; 0x940a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    9420:	08 95       	ret

00009422 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    9422:	80 93 00 01 	sts	0x0100, r24
    9426:	08 95       	ret

00009428 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    9428:	2f 92       	push	r2
    942a:	3f 92       	push	r3
    942c:	4f 92       	push	r4
    942e:	5f 92       	push	r5
    9430:	6f 92       	push	r6
    9432:	7f 92       	push	r7
    9434:	8f 92       	push	r8
    9436:	9f 92       	push	r9
    9438:	af 92       	push	r10
    943a:	bf 92       	push	r11
    943c:	cf 92       	push	r12
    943e:	df 92       	push	r13
    9440:	ef 92       	push	r14
    9442:	ff 92       	push	r15
    9444:	0f 93       	push	r16
    9446:	1f 93       	push	r17
    9448:	cf 93       	push	r28
    944a:	df 93       	push	r29
    944c:	00 d0       	rcall	.+0      	; 0x944e <ProcessSprites+0x26>
    944e:	1f 92       	push	r1
    9450:	cd b7       	in	r28, 0x3d	; 61
    9452:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    9454:	10 92 bd 0b 	sts	0x0BBD, r1
		if(!spritesOn) return;
    9458:	80 91 00 01 	lds	r24, 0x0100
    945c:	88 23       	and	r24, r24
    945e:	09 f4       	brne	.+2      	; 0x9462 <ProcessSprites+0x3a>
    9460:	a1 c0       	rjmp	.+322    	; 0x95a4 <ProcessSprites+0x17c>
    9462:	e8 e6       	ldi	r30, 0x68	; 104
    9464:	ce 2e       	mov	r12, r30
    9466:	e4 e0       	ldi	r30, 0x04	; 4
    9468:	de 2e       	mov	r13, r30
    946a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    946c:	f6 01       	movw	r30, r12
    946e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    9470:	80 3f       	cpi	r24, 0xF0	; 240
    9472:	09 f4       	brne	.+2      	; 0x9476 <ProcessSprites+0x4e>
    9474:	79 c0       	rjmp	.+242    	; 0x9568 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    9476:	91 81       	ldd	r25, Z+1	; 0x01
    9478:	29 2f       	mov	r18, r25
    947a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    947c:	28 2e       	mov	r2, r24
    947e:	26 94       	lsr	r2
    9480:	26 94       	lsr	r2
    9482:	26 94       	lsr	r2
				dx=ssx&0x7;
    9484:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    9486:	19 f0       	breq	.+6      	; 0x948e <ProcessSprites+0x66>
    9488:	72 e0       	ldi	r23, 0x02	; 2
    948a:	47 2e       	mov	r4, r23
    948c:	02 c0       	rjmp	.+4      	; 0x9492 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    948e:	44 24       	eor	r4, r4
    9490:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    9492:	63 e0       	ldi	r22, 0x03	; 3
    9494:	36 95       	lsr	r19
    9496:	27 95       	ror	r18
    9498:	6a 95       	dec	r22
    949a:	e1 f7       	brne	.-8      	; 0x9494 <ProcessSprites+0x6c>
    949c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    949e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    94a0:	19 f0       	breq	.+6      	; 0x94a8 <ProcessSprites+0x80>
    94a2:	52 e0       	ldi	r21, 0x02	; 2
    94a4:	55 2e       	mov	r5, r21
    94a6:	02 c0       	rjmp	.+4      	; 0x94ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    94a8:	55 24       	eor	r5, r5
    94aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    94ac:	29 2f       	mov	r18, r25
    94ae:	30 e0       	ldi	r19, 0x00	; 0
    94b0:	32 2f       	mov	r19, r18
    94b2:	22 27       	eor	r18, r18
    94b4:	a9 01       	movw	r20, r18
    94b6:	48 0f       	add	r20, r24
    94b8:	51 1d       	adc	r21, r1
    94ba:	5b 83       	std	Y+3, r21	; 0x03
    94bc:	4a 83       	std	Y+2, r20	; 0x02
    94be:	e1 2c       	mov	r14, r1
    94c0:	f1 2c       	mov	r15, r1
    94c2:	94 ee       	ldi	r25, 0xE4	; 228
    94c4:	93 0d       	add	r25, r3
    94c6:	99 83       	std	Y+1, r25	; 0x01
    94c8:	03 2d       	mov	r16, r3
    94ca:	0e 0d       	add	r16, r14
    94cc:	0c 31       	cpi	r16, 0x1C	; 28
    94ce:	10 f0       	brcs	.+4      	; 0x94d4 <ProcessSprites+0xac>
    94d0:	09 81       	ldd	r16, Y+1	; 0x01
    94d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    94d4:	5e e1       	ldi	r21, 0x1E	; 30
    94d6:	05 9f       	mul	r16, r21
    94d8:	80 01       	movw	r16, r0
    94da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    94dc:	be 2c       	mov	r11, r14
    94de:	aa 24       	eor	r10, r10
    94e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    94e2:	ed e1       	ldi	r30, 0x1D	; 29
    94e4:	e7 15       	cp	r30, r7
    94e6:	18 f4       	brcc	.+6      	; 0x94ee <ProcessSprites+0xc6>
    94e8:	82 ee       	ldi	r24, 0xE2	; 226
    94ea:	87 0d       	add	r24, r7
    94ec:	01 c0       	rjmp	.+2      	; 0x94f0 <ProcessSprites+0xc8>
    94ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    94f0:	a8 01       	movw	r20, r16
    94f2:	48 0f       	add	r20, r24
    94f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    94f6:	ca 01       	movw	r24, r20
    94f8:	80 5e       	subi	r24, 0xE0	; 224
    94fa:	9e 4f       	sbci	r25, 0xFE	; 254
    94fc:	4c 01       	movw	r8, r24
    94fe:	fc 01       	movw	r30, r24
    9500:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    9502:	88 31       	cpi	r24, 0x18	; 24
    9504:	e0 f0       	brcs	.+56     	; 0x953e <ProcessSprites+0x116>
    9506:	60 91 bd 0b 	lds	r22, 0x0BBD
    950a:	68 31       	cpi	r22, 0x18	; 24
    950c:	f8 f4       	brcc	.+62     	; 0x954c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    950e:	26 2f       	mov	r18, r22
    9510:	30 e0       	ldi	r19, 0x00	; 0
    9512:	f9 01       	movw	r30, r18
    9514:	ee 0f       	add	r30, r30
    9516:	ff 1f       	adc	r31, r31
    9518:	e2 0f       	add	r30, r18
    951a:	f3 1f       	adc	r31, r19
    951c:	e0 57       	subi	r30, 0x70	; 112
    951e:	f5 4f       	sbci	r31, 0xF5	; 245
    9520:	51 83       	std	Z+1, r21	; 0x01
    9522:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    9524:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    9526:	0e 94 2b 3b 	call	0x7656	; 0x7656 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    952a:	80 91 bd 0b 	lds	r24, 0x0BBD
    952e:	f4 01       	movw	r30, r8
    9530:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    9532:	91 e0       	ldi	r25, 0x01	; 1
    9534:	98 0f       	add	r25, r24
    9536:	90 93 bd 0b 	sts	0x0BBD, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    953a:	88 31       	cpi	r24, 0x18	; 24
    953c:	38 f4       	brcc	.+14     	; 0x954c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    953e:	2a 81       	ldd	r18, Y+2	; 0x02
    9540:	3b 81       	ldd	r19, Y+3	; 0x03
    9542:	a5 01       	movw	r20, r10
    9544:	68 2f       	mov	r22, r24
    9546:	86 2d       	mov	r24, r6
    9548:	0e 94 bc 3b 	call	0x7778	; 0x7778 <BlitSprite>
    954c:	ff ef       	ldi	r31, 0xFF	; 255
    954e:	af 1a       	sub	r10, r31
    9550:	bf 0a       	sbc	r11, r31
    9552:	73 94       	inc	r7
    9554:	87 2d       	mov	r24, r7
    9556:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    9558:	84 15       	cp	r24, r4
    955a:	18 f2       	brcs	.-122    	; 0x94e2 <ProcessSprites+0xba>
    955c:	4f ef       	ldi	r20, 0xFF	; 255
    955e:	e4 1a       	sub	r14, r20
    9560:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    9562:	e5 14       	cp	r14, r5
    9564:	08 f4       	brcc	.+2      	; 0x9568 <ProcessSprites+0x140>
    9566:	b0 cf       	rjmp	.-160    	; 0x94c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    9568:	63 94       	inc	r6
    956a:	84 e0       	ldi	r24, 0x04	; 4
    956c:	c8 0e       	add	r12, r24
    956e:	d1 1c       	adc	r13, r1
    9570:	9a e0       	ldi	r25, 0x0A	; 10
    9572:	69 12       	cpse	r6, r25
    9574:	7b cf       	rjmp	.-266    	; 0x946c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    9576:	0f 90       	pop	r0
    9578:	0f 90       	pop	r0
    957a:	0f 90       	pop	r0
    957c:	df 91       	pop	r29
    957e:	cf 91       	pop	r28
    9580:	1f 91       	pop	r17
    9582:	0f 91       	pop	r16
    9584:	ff 90       	pop	r15
    9586:	ef 90       	pop	r14
    9588:	df 90       	pop	r13
    958a:	cf 90       	pop	r12
    958c:	bf 90       	pop	r11
    958e:	af 90       	pop	r10
    9590:	9f 90       	pop	r9
    9592:	8f 90       	pop	r8
    9594:	7f 90       	pop	r7
    9596:	6f 90       	pop	r6
    9598:	5f 90       	pop	r5
    959a:	4f 90       	pop	r4
    959c:	3f 90       	pop	r3
    959e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    95a0:	0c 94 00 4a 	jmp	0x9400	; 0x9400 <RestoreBackground>

	}
    95a4:	0f 90       	pop	r0
    95a6:	0f 90       	pop	r0
    95a8:	0f 90       	pop	r0
    95aa:	df 91       	pop	r29
    95ac:	cf 91       	pop	r28
    95ae:	1f 91       	pop	r17
    95b0:	0f 91       	pop	r16
    95b2:	ff 90       	pop	r15
    95b4:	ef 90       	pop	r14
    95b6:	df 90       	pop	r13
    95b8:	cf 90       	pop	r12
    95ba:	bf 90       	pop	r11
    95bc:	af 90       	pop	r10
    95be:	9f 90       	pop	r9
    95c0:	8f 90       	pop	r8
    95c2:	7f 90       	pop	r7
    95c4:	6f 90       	pop	r6
    95c6:	5f 90       	pop	r5
    95c8:	4f 90       	pop	r4
    95ca:	3f 90       	pop	r3
    95cc:	2f 90       	pop	r2
    95ce:	08 95       	ret

000095d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    95d0:	df 92       	push	r13
    95d2:	ef 92       	push	r14
    95d4:	ff 92       	push	r15
    95d6:	0f 93       	push	r16
    95d8:	1f 93       	push	r17
    95da:	cf 93       	push	r28
    95dc:	df 93       	push	r29
    95de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    95e0:	fb 01       	movw	r30, r22
    95e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    95e4:	31 96       	adiw	r30, 0x01	; 1
    95e6:	64 91       	lpm	r22, Z
    95e8:	5f ef       	ldi	r21, 0xFF	; 255
    95ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    95ec:	24 2f       	mov	r18, r20
    95ee:	21 70       	andi	r18, 0x01	; 1
    95f0:	40 ff       	sbrs	r20, 0
    95f2:	04 c0       	rjmp	.+8      	; 0x95fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    95f4:	95 2f       	mov	r25, r21
			dx=-1;
    95f6:	ff 24       	eor	r15, r15
    95f8:	fa 94       	dec	r15
    95fa:	03 c0       	rjmp	.+6      	; 0x9602 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    95fc:	ff 24       	eor	r15, r15
    95fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    9600:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    9602:	41 ff       	sbrs	r20, 1
    9604:	05 c0       	rjmp	.+10     	; 0x9610 <MapSprite2+0x40>
			y=(mapHeight-1);
    9606:	7f ef       	ldi	r23, 0xFF	; 255
    9608:	76 0f       	add	r23, r22
			dy=-1;
    960a:	ee 24       	eor	r14, r14
    960c:	ea 94       	dec	r14
    960e:	03 c0       	rjmp	.+6      	; 0x9616 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    9610:	ee 24       	eor	r14, r14
    9612:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    9614:	70 e0       	ldi	r23, 0x00	; 0
    9616:	21 11       	cpse	r18, r1
    9618:	01 c0       	rjmp	.+2      	; 0x961c <MapSprite2+0x4c>
    961a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    961c:	00 e0       	ldi	r16, 0x00	; 0
    961e:	06 17       	cp	r16, r22
    9620:	09 f1       	breq	.+66     	; 0x9664 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9622:	71 03       	mulsu	r23, r17
    9624:	e0 01       	movw	r28, r0
    9626:	11 24       	eor	r1, r1
    9628:	d8 2e       	mov	r13, r24
    962a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    962c:	8d 15       	cp	r24, r13
    962e:	b1 f0       	breq	.+44     	; 0x965c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    9630:	9e 01       	movw	r18, r28
    9632:	29 0f       	add	r18, r25
    9634:	31 1d       	adc	r19, r1
    9636:	97 fd       	sbrc	r25, 7
    9638:	3a 95       	dec	r19
    963a:	2e 5f       	subi	r18, 0xFE	; 254
    963c:	3f 4f       	sbci	r19, 0xFF	; 255
    963e:	fd 01       	movw	r30, r26
    9640:	e2 0f       	add	r30, r18
    9642:	f3 1f       	adc	r31, r19
    9644:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    9646:	34 e0       	ldi	r19, 0x04	; 4
    9648:	83 9f       	mul	r24, r19
    964a:	f0 01       	movw	r30, r0
    964c:	11 24       	eor	r1, r1
    964e:	e8 59       	subi	r30, 0x98	; 152
    9650:	fb 4f       	sbci	r31, 0xFB	; 251
    9652:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    9654:	8f 5f       	subi	r24, 0xFF	; 255
    9656:	43 83       	std	Z+3, r20	; 0x03
    9658:	9f 0d       	add	r25, r15
    965a:	e8 cf       	rjmp	.-48     	; 0x962c <MapSprite2+0x5c>
    965c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    965e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    9660:	95 2f       	mov	r25, r21
    9662:	dd cf       	rjmp	.-70     	; 0x961e <MapSprite2+0x4e>
	    }
	}
    9664:	df 91       	pop	r29
    9666:	cf 91       	pop	r28
    9668:	1f 91       	pop	r17
    966a:	0f 91       	pop	r16
    966c:	ff 90       	pop	r15
    966e:	ef 90       	pop	r14
    9670:	df 90       	pop	r13
    9672:	08 95       	ret

00009674 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    9674:	0f 93       	push	r16
    9676:	cf 93       	push	r28
    9678:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    967a:	30 e0       	ldi	r19, 0x00	; 0
    967c:	30 17       	cp	r19, r16
    967e:	e1 f0       	breq	.+56     	; 0x96b8 <MoveSprite+0x44>
    9680:	b4 2f       	mov	r27, r20
    9682:	a0 e2       	ldi	r26, 0x20	; 32
    9684:	a4 0f       	add	r26, r20
    9686:	78 2f       	mov	r23, r24
    9688:	72 0f       	add	r23, r18
    968a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    968c:	87 17       	cp	r24, r23
    968e:	81 f0       	breq	.+32     	; 0x96b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    9690:	c4 e0       	ldi	r28, 0x04	; 4
    9692:	8c 9f       	mul	r24, r28
    9694:	f0 01       	movw	r30, r0
    9696:	11 24       	eor	r1, r1
    9698:	e8 59       	subi	r30, 0x98	; 152
    969a:	fb 4f       	sbci	r31, 0xFB	; 251
    969c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    969e:	41 3e       	cpi	r20, 0xE1	; 225
    96a0:	51 05       	cpc	r21, r1
    96a2:	14 f0       	brlt	.+4      	; 0x96a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    96a4:	a1 83       	std	Z+1, r26	; 0x01
    96a6:	01 c0       	rjmp	.+2      	; 0x96aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    96a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    96aa:	8f 5f       	subi	r24, 0xFF	; 255
    96ac:	98 5f       	subi	r25, 0xF8	; 248
    96ae:	ee cf       	rjmp	.-36     	; 0x968c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    96b0:	3f 5f       	subi	r19, 0xFF	; 255
    96b2:	48 5f       	subi	r20, 0xF8	; 248
    96b4:	5f 4f       	sbci	r21, 0xFF	; 255
    96b6:	e2 cf       	rjmp	.-60     	; 0x967c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    96b8:	cf 91       	pop	r28
    96ba:	0f 91       	pop	r16
    96bc:	08 95       	ret

000096be <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    96be:	08 95       	ret

000096c0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    96c0:	e8 e6       	ldi	r30, 0x68	; 104
    96c2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    96c4:	80 ef       	ldi	r24, 0xF0	; 240
    96c6:	80 83       	st	Z, r24
    96c8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    96ca:	94 e0       	ldi	r25, 0x04	; 4
    96cc:	e0 39       	cpi	r30, 0x90	; 144
    96ce:	f9 07       	cpc	r31, r25
    96d0:	d1 f7       	brne	.-12     	; 0x96c6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    96d2:	08 95       	ret

000096d4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    96d4:	4f 92       	push	r4
    96d6:	5f 92       	push	r5
    96d8:	6f 92       	push	r6
    96da:	7f 92       	push	r7
    96dc:	8f 92       	push	r8
    96de:	9f 92       	push	r9
    96e0:	af 92       	push	r10
    96e2:	bf 92       	push	r11
    96e4:	cf 92       	push	r12
    96e6:	df 92       	push	r13
    96e8:	ef 92       	push	r14
    96ea:	ff 92       	push	r15
    96ec:	0f 93       	push	r16
    96ee:	1f 93       	push	r17
    96f0:	cf 93       	push	r28
    96f2:	df 93       	push	r29
    96f4:	68 2e       	mov	r6, r24
    96f6:	56 2e       	mov	r5, r22
    96f8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    96fa:	fa 01       	movw	r30, r20
    96fc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    96fe:	31 96       	adiw	r30, 0x01	; 1
    9700:	84 90       	lpm	r8, Z
    9702:	c7 2c       	mov	r12, r7
    9704:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    9706:	00 e0       	ldi	r16, 0x00	; 0
    9708:	10 e0       	ldi	r17, 0x00	; 0
    970a:	91 2c       	mov	r9, r1
    970c:	98 14       	cp	r9, r8
    970e:	f1 f0       	breq	.+60     	; 0x974c <DrawMap2+0x78>
    9710:	c0 e0       	ldi	r28, 0x00	; 0
    9712:	d0 e0       	ldi	r29, 0x00	; 0
    9714:	58 01       	movw	r10, r16
    9716:	f2 e0       	ldi	r31, 0x02	; 2
    9718:	af 0e       	add	r10, r31
    971a:	b1 1c       	adc	r11, r1
    971c:	49 2c       	mov	r4, r9
    971e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    9720:	c7 15       	cp	r28, r7
    9722:	80 f4       	brcc	.+32     	; 0x9744 <DrawMap2+0x70>
    9724:	95 01       	movw	r18, r10
    9726:	2c 0f       	add	r18, r28
    9728:	3d 1f       	adc	r19, r29
    972a:	f7 01       	movw	r30, r14
    972c:	e2 0f       	add	r30, r18
    972e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    9730:	24 91       	lpm	r18, Z
    9732:	42 2f       	mov	r20, r18
    9734:	50 e0       	ldi	r21, 0x00	; 0
    9736:	64 2d       	mov	r22, r4
    9738:	8c 2f       	mov	r24, r28
    973a:	86 0d       	add	r24, r6
    973c:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
    9740:	21 96       	adiw	r28, 0x01	; 1
    9742:	ee cf       	rjmp	.-36     	; 0x9720 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    9744:	93 94       	inc	r9
    9746:	0c 0d       	add	r16, r12
    9748:	1d 1d       	adc	r17, r13
    974a:	e0 cf       	rjmp	.-64     	; 0x970c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    974c:	df 91       	pop	r29
    974e:	cf 91       	pop	r28
    9750:	1f 91       	pop	r17
    9752:	0f 91       	pop	r16
    9754:	ff 90       	pop	r15
    9756:	ef 90       	pop	r14
    9758:	df 90       	pop	r13
    975a:	cf 90       	pop	r12
    975c:	bf 90       	pop	r11
    975e:	af 90       	pop	r10
    9760:	9f 90       	pop	r9
    9762:	8f 90       	pop	r8
    9764:	7f 90       	pop	r7
    9766:	6f 90       	pop	r6
    9768:	5f 90       	pop	r5
    976a:	4f 90       	pop	r4
    976c:	08 95       	ret

0000976e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    976e:	df 92       	push	r13
    9770:	ef 92       	push	r14
    9772:	ff 92       	push	r15
    9774:	0f 93       	push	r16
    9776:	1f 93       	push	r17
    9778:	cf 93       	push	r28
    977a:	df 93       	push	r29
    977c:	f6 2e       	mov	r15, r22
    977e:	04 2f       	mov	r16, r20
    9780:	d2 2e       	mov	r13, r18
    9782:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    9784:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    9786:	8a e0       	ldi	r24, 0x0A	; 10
    9788:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    978a:	01 11       	cpse	r16, r1
    978c:	02 c0       	rjmp	.+4      	; 0x9792 <PrintByte+0x24>
    978e:	11 11       	cpse	r17, r1
    9790:	07 c0       	rjmp	.+14     	; 0x97a0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    9792:	80 2f       	mov	r24, r16
    9794:	6e 2d       	mov	r22, r14
    9796:	0e 94 56 65 	call	0xcaac	; 0xcaac <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    979a:	40 e1       	ldi	r20, 0x10	; 16
    979c:	49 0f       	add	r20, r25
    979e:	05 c0       	rjmp	.+10     	; 0x97aa <PrintByte+0x3c>
		}else{
			if(zeropad){
    97a0:	dd 20       	and	r13, r13
    97a2:	11 f0       	breq	.+4      	; 0x97a8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    97a4:	40 e1       	ldi	r20, 0x10	; 16
    97a6:	01 c0       	rjmp	.+2      	; 0x97aa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    97a8:	40 e0       	ldi	r20, 0x00	; 0
    97aa:	6f 2d       	mov	r22, r15
    97ac:	8c 2f       	mov	r24, r28
    97ae:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <SetFont>
			}
		}
		val=val/10;
    97b2:	80 2f       	mov	r24, r16
    97b4:	6e 2d       	mov	r22, r14
    97b6:	0e 94 56 65 	call	0xcaac	; 0xcaac <__udivmodqi4>
    97ba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    97bc:	1f 5f       	subi	r17, 0xFF	; 255
    97be:	21 97       	sbiw	r28, 0x01	; 1
    97c0:	13 30       	cpi	r17, 0x03	; 3
    97c2:	19 f7       	brne	.-58     	; 0x978a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    97c4:	df 91       	pop	r29
    97c6:	cf 91       	pop	r28
    97c8:	1f 91       	pop	r17
    97ca:	0f 91       	pop	r16
    97cc:	ff 90       	pop	r15
    97ce:	ef 90       	pop	r14
    97d0:	df 90       	pop	r13
    97d2:	08 95       	ret

000097d4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    97d4:	0f 93       	push	r16
    97d6:	1f 93       	push	r17
    97d8:	cf 93       	push	r28
    97da:	df 93       	push	r29
    97dc:	06 2f       	mov	r16, r22
    97de:	c4 2f       	mov	r28, r20
    97e0:	d5 2f       	mov	r29, r21
    97e2:	18 2f       	mov	r17, r24
    97e4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    97e6:	fe 01       	movw	r30, r28
    97e8:	44 91       	lpm	r20, Z
		if(c!=0){
    97ea:	44 23       	and	r20, r20
    97ec:	49 f0       	breq	.+18     	; 0x9800 <Print+0x2c>
			c=((c&127)-32);			
    97ee:	4f 77       	andi	r20, 0x7F	; 127
    97f0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    97f2:	60 2f       	mov	r22, r16
    97f4:	8c 2f       	mov	r24, r28
    97f6:	81 0f       	add	r24, r17
    97f8:	0e 94 ec 3d 	call	0x7bd8	; 0x7bd8 <SetFont>
    97fc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    97fe:	f3 cf       	rjmp	.-26     	; 0x97e6 <Print+0x12>
	
}
    9800:	df 91       	pop	r29
    9802:	cf 91       	pop	r28
    9804:	1f 91       	pop	r17
    9806:	0f 91       	pop	r16
    9808:	08 95       	ret

0000980a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    980a:	40 52       	subi	r20, 0x20	; 32
    980c:	0c 94 ec 3d 	jmp	0x7bd8	; 0x7bd8 <SetFont>

00009810 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    9810:	0f 93       	push	r16
    9812:	1f 93       	push	r17
    9814:	cf 93       	push	r28
    9816:	df 93       	push	r29
    9818:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    981a:	c0 e0       	ldi	r28, 0x00	; 0
    981c:	d0 e0       	ldi	r29, 0x00	; 0
    981e:	c0 17       	cp	r28, r16
    9820:	d1 07       	cpc	r29, r17
    9822:	44 f4       	brge	.+16     	; 0x9834 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    9824:	0e 94 06 3e 	call	0x7c0c	; 0x7c0c <GetVsyncFlag>
    9828:	88 23       	and	r24, r24
    982a:	e1 f3       	breq	.-8      	; 0x9824 <WaitVsync+0x14>
		ClearVsyncFlag();		
    982c:	0e 94 0a 3e 	call	0x7c14	; 0x7c14 <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    9830:	21 96       	adiw	r28, 0x01	; 1
    9832:	f5 cf       	rjmp	.-22     	; 0x981e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    9834:	df 91       	pop	r29
    9836:	cf 91       	pop	r28
    9838:	1f 91       	pop	r17
    983a:	0f 91       	pop	r16
    983c:	08 95       	ret

0000983e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    983e:	80 93 bb 0b 	sts	0x0BBB, r24
	currFadeFrame=0;
    9842:	10 92 bf 0b 	sts	0x0BBF, r1
	fadeActive=true;
    9846:	81 e0       	ldi	r24, 0x01	; 1
    9848:	80 93 be 0b 	sts	0x0BBE, r24
		
	if(blocking){
    984c:	66 23       	and	r22, r22
    984e:	21 f0       	breq	.+8      	; 0x9858 <doFade+0x1a>
		while(fadeActive==true);
    9850:	80 91 be 0b 	lds	r24, 0x0BBE
    9854:	81 11       	cpse	r24, r1
    9856:	fc cf       	rjmp	.-8      	; 0x9850 <doFade+0x12>
    9858:	08 95       	ret

0000985a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    985a:	81 11       	cpse	r24, r1
    985c:	03 c0       	rjmp	.+6      	; 0x9864 <FadeIn+0xa>
		DDRC=0xff;
    985e:	8f ef       	ldi	r24, 0xFF	; 255
    9860:	87 b9       	out	0x07, r24	; 7
		return;
    9862:	08 95       	ret
	}
	fadeStep=1;
    9864:	91 e0       	ldi	r25, 0x01	; 1
    9866:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=1;
    986a:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    986e:	0c 94 1f 4c 	jmp	0x983e	; 0x983e <doFade>

00009872 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    9872:	81 11       	cpse	r24, r1
    9874:	02 c0       	rjmp	.+4      	; 0x987a <FadeOut+0x8>
		DDRC=0;
    9876:	17 b8       	out	0x07, r1	; 7
		return;
    9878:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    987a:	9c e0       	ldi	r25, 0x0C	; 12
    987c:	90 93 c0 0b 	sts	0x0BC0, r25
	fadeDir=-1;
    9880:	9f ef       	ldi	r25, 0xFF	; 255
    9882:	90 93 bc 0b 	sts	0x0BBC, r25
	doFade(speed,blocking);
    9886:	0c 94 1f 4c 	jmp	0x983e	; 0x983e <doFade>

0000988a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    988a:	80 91 be 0b 	lds	r24, 0x0BBE
    988e:	88 23       	and	r24, r24
    9890:	01 f1       	breq	.+64     	; 0x98d2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    9892:	80 91 bf 0b 	lds	r24, 0x0BBF
    9896:	81 11       	cpse	r24, r1
    9898:	19 c0       	rjmp	.+50     	; 0x98cc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    989a:	80 91 bb 0b 	lds	r24, 0x0BBB
    989e:	80 93 bf 0b 	sts	0x0BBF, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    98a2:	e0 91 c0 0b 	lds	r30, 0x0BC0
    98a6:	f0 e0       	ldi	r31, 0x00	; 0
    98a8:	e7 51       	subi	r30, 0x17	; 23
    98aa:	ff 4f       	sbci	r31, 0xFF	; 255
    98ac:	e4 91       	lpm	r30, Z
    98ae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    98b0:	90 91 bc 0b 	lds	r25, 0x0BBC
    98b4:	80 91 c0 0b 	lds	r24, 0x0BC0
    98b8:	89 0f       	add	r24, r25
    98ba:	80 93 c0 0b 	sts	0x0BC0, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    98be:	88 23       	and	r24, r24
    98c0:	11 f0       	breq	.+4      	; 0x98c6 <ProcessFading+0x3c>
    98c2:	8d 30       	cpi	r24, 0x0D	; 13
    98c4:	31 f4       	brne	.+12     	; 0x98d2 <ProcessFading+0x48>
				fadeActive=false;
    98c6:	10 92 be 0b 	sts	0x0BBE, r1
    98ca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    98cc:	81 50       	subi	r24, 0x01	; 1
    98ce:	80 93 bf 0b 	sts	0x0BBF, r24
    98d2:	08 95       	ret

000098d4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    98d4:	0e 94 45 4c 	call	0x988a	; 0x988a <ProcessFading>
		ProcessSprites();
    98d8:	0c 94 14 4a 	jmp	0x9428	; 0x9428 <ProcessSprites>

000098dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    98dc:	cf 93       	push	r28
    98de:	df 93       	push	r29
    98e0:	fc 01       	movw	r30, r24
    98e2:	eb 01       	movw	r28, r22
	*looped = 0;
    98e4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    98e6:	93 81       	ldd	r25, Z+3	; 0x03
    98e8:	9f 5f       	subi	r25, 0xFF	; 255
    98ea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    98ec:	22 81       	ldd	r18, Z+2	; 0x02
    98ee:	80 81       	ld	r24, Z
    98f0:	92 17       	cp	r25, r18
    98f2:	70 f0       	brcs	.+28     	; 0x9910 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    98f4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    98f6:	90 e0       	ldi	r25, 0x00	; 0
    98f8:	01 96       	adiw	r24, 0x01	; 1
    98fa:	21 81       	ldd	r18, Z+1	; 0x01
    98fc:	62 2f       	mov	r22, r18
    98fe:	70 e0       	ldi	r23, 0x00	; 0
    9900:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    9904:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    9906:	81 11       	cpse	r24, r1
    9908:	02 c0       	rjmp	.+4      	; 0x990e <LBGetNextFrame+0x32>
    990a:	81 e0       	ldi	r24, 0x01	; 1
    990c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    990e:	80 81       	ld	r24, Z
    9910:	e8 0f       	add	r30, r24
    9912:	f1 1d       	adc	r31, r1
    9914:	e8 0f       	add	r30, r24
    9916:	f1 1d       	adc	r31, r1
    9918:	84 81       	ldd	r24, Z+4	; 0x04
    991a:	95 81       	ldd	r25, Z+5	; 0x05
}
    991c:	df 91       	pop	r29
    991e:	cf 91       	pop	r28
    9920:	08 95       	ret

00009922 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p, unsigned char index)
/*
 * Get the current joy pad button state for index controller
 */
{
    9922:	0f 93       	push	r16
    9924:	1f 93       	push	r17
    9926:	cf 93       	push	r28
    9928:	df 93       	push	r29
    992a:	1f 92       	push	r1
    992c:	cd b7       	in	r28, 0x3d	; 61
    992e:	de b7       	in	r29, 0x3e	; 62
    9930:	8c 01       	movw	r16, r24
	static unsigned int p_prev[2] = {0,0};

	p->held = ReadJoypad(index);
    9932:	86 2f       	mov	r24, r22
    9934:	69 83       	std	Y+1, r22	; 0x01
    9936:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <ReadJoypad>
    993a:	d8 01       	movw	r26, r16
    993c:	15 96       	adiw	r26, 0x05	; 5
    993e:	9c 93       	st	X, r25
    9940:	8e 93       	st	-X, r24
    9942:	14 97       	sbiw	r26, 0x04	; 4
    9944:	69 81       	ldd	r22, Y+1	; 0x01
    9946:	e6 2f       	mov	r30, r22
    9948:	f0 e0       	ldi	r31, 0x00	; 0

	// Count held cycles
	if (p->held == 0 || p->held != p_prev[index])
    994a:	00 97       	sbiw	r24, 0x00	; 0
    994c:	51 f0       	breq	.+20     	; 0x9962 <LBGetJoyPadState+0x40>
    994e:	df 01       	movw	r26, r30
    9950:	aa 0f       	add	r26, r26
    9952:	bb 1f       	adc	r27, r27
    9954:	a8 5c       	subi	r26, 0xC8	; 200
    9956:	b4 4f       	sbci	r27, 0xF4	; 244
    9958:	2d 91       	ld	r18, X+
    995a:	3c 91       	ld	r19, X
    995c:	82 17       	cp	r24, r18
    995e:	93 07       	cpc	r25, r19
    9960:	21 f0       	breq	.+8      	; 0x996a <LBGetJoyPadState+0x48>
	    p->held_cycles = 0;
    9962:	d8 01       	movw	r26, r16
    9964:	16 96       	adiw	r26, 0x06	; 6
    9966:	1c 92       	st	X, r1
    9968:	07 c0       	rjmp	.+14     	; 0x9978 <LBGetJoyPadState+0x56>
	else
	    p->held_cycles += 1;
    996a:	d8 01       	movw	r26, r16
    996c:	16 96       	adiw	r26, 0x06	; 6
    996e:	2c 91       	ld	r18, X
    9970:	16 97       	sbiw	r26, 0x06	; 6
    9972:	2f 5f       	subi	r18, 0xFF	; 255
    9974:	16 96       	adiw	r26, 0x06	; 6
    9976:	2c 93       	st	X, r18

	p->pressed = p->held & (p->held ^ p_prev[index]);
    9978:	ee 0f       	add	r30, r30
    997a:	ff 1f       	adc	r31, r31
    997c:	e8 5c       	subi	r30, 0xC8	; 200
    997e:	f4 4f       	sbci	r31, 0xF4	; 244
    9980:	20 81       	ld	r18, Z
    9982:	31 81       	ldd	r19, Z+1	; 0x01
    9984:	a9 01       	movw	r20, r18
    9986:	40 95       	com	r20
    9988:	50 95       	com	r21
    998a:	48 23       	and	r20, r24
    998c:	59 23       	and	r21, r25
    998e:	d8 01       	movw	r26, r16
    9990:	11 96       	adiw	r26, 0x01	; 1
    9992:	5c 93       	st	X, r21
    9994:	4e 93       	st	-X, r20
	p->released = p_prev[index] & (p->held ^ p_prev[index]);
    9996:	ac 01       	movw	r20, r24
    9998:	40 95       	com	r20
    999a:	50 95       	com	r21
    999c:	24 23       	and	r18, r20
    999e:	35 23       	and	r19, r21
    99a0:	13 96       	adiw	r26, 0x03	; 3
    99a2:	3c 93       	st	X, r19
    99a4:	2e 93       	st	-X, r18
    99a6:	12 97       	sbiw	r26, 0x02	; 2
	p_prev[index] = p->held;
    99a8:	91 83       	std	Z+1, r25	; 0x01
    99aa:	80 83       	st	Z, r24
}
    99ac:	0f 90       	pop	r0
    99ae:	df 91       	pop	r29
    99b0:	cf 91       	pop	r28
    99b2:	1f 91       	pop	r17
    99b4:	0f 91       	pop	r16
    99b6:	08 95       	ret

000099b8 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    99b8:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    99ba:	fb 01       	movw	r30, r22
    99bc:	2e 2f       	mov	r18, r30
    99be:	23 1b       	sub	r18, r19
    99c0:	24 17       	cp	r18, r20
    99c2:	28 f4       	brcc	.+10     	; 0x99ce <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    99c4:	21 91       	ld	r18, Z+
    99c6:	dc 01       	movw	r26, r24
    99c8:	2d 93       	st	X+, r18
    99ca:	cd 01       	movw	r24, r26
    99cc:	f7 cf       	rjmp	.-18     	; 0x99bc <LBCopyChars+0x4>
	}
}
    99ce:	08 95       	ret

000099d0 <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    99d0:	af 92       	push	r10
    99d2:	bf 92       	push	r11
    99d4:	cf 92       	push	r12
    99d6:	df 92       	push	r13
    99d8:	ef 92       	push	r14
    99da:	ff 92       	push	r15
    99dc:	0f 93       	push	r16
    99de:	1f 93       	push	r17
    99e0:	cf 93       	push	r28
    99e2:	df 93       	push	r29
    99e4:	1f 92       	push	r1
    99e6:	cd b7       	in	r28, 0x3d	; 61
    99e8:	de b7       	in	r29, 0x3e	; 62
    99ea:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    99ec:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    99ee:	c6 2e       	mov	r12, r22
    99f0:	d1 2c       	mov	r13, r1
    99f2:	90 e0       	ldi	r25, 0x00	; 0
    99f4:	5c 01       	movw	r10, r24
    99f6:	a4 1a       	sub	r10, r20
    99f8:	b5 0a       	sbc	r11, r21
    99fa:	80 2f       	mov	r24, r16
    99fc:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    99fe:	82 17       	cp	r24, r18
    9a00:	60 f4       	brcc	.+24     	; 0x9a1a <LBPrintStr+0x4a>
    9a02:	c5 01       	movw	r24, r10
    9a04:	80 0f       	add	r24, r16
    9a06:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    9a08:	f8 01       	movw	r30, r16
    9a0a:	41 91       	ld	r20, Z+
    9a0c:	8f 01       	movw	r16, r30
    9a0e:	b6 01       	movw	r22, r12
    9a10:	29 83       	std	Y+1, r18	; 0x01
    9a12:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
    9a16:	29 81       	ldd	r18, Y+1	; 0x01
    9a18:	f0 cf       	rjmp	.-32     	; 0x99fa <LBPrintStr+0x2a>
	}
}
    9a1a:	0f 90       	pop	r0
    9a1c:	df 91       	pop	r29
    9a1e:	cf 91       	pop	r28
    9a20:	1f 91       	pop	r17
    9a22:	0f 91       	pop	r16
    9a24:	ff 90       	pop	r15
    9a26:	ef 90       	pop	r14
    9a28:	df 90       	pop	r13
    9a2a:	cf 90       	pop	r12
    9a2c:	bf 90       	pop	r11
    9a2e:	af 90       	pop	r10
    9a30:	08 95       	ret

00009a32 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    9a32:	af 92       	push	r10
    9a34:	cf 92       	push	r12
    9a36:	ef 92       	push	r14
    9a38:	ff 92       	push	r15
    9a3a:	0f 93       	push	r16
    9a3c:	1f 93       	push	r17
	if (y1 + height1 <= y2) return 0;
    9a3e:	70 e0       	ldi	r23, 0x00	; 0
    9a40:	f1 2c       	mov	r15, r1
    9a42:	fb 01       	movw	r30, r22
    9a44:	e2 0f       	add	r30, r18
    9a46:	f1 1d       	adc	r31, r1
    9a48:	ee 16       	cp	r14, r30
    9a4a:	ff 06       	cpc	r15, r31
    9a4c:	a4 f4       	brge	.+40     	; 0x9a76 <LBCollides+0x44>
	if (y1 >= y2 + height2) return 0;
    9a4e:	ea 0c       	add	r14, r10
    9a50:	f1 1c       	adc	r15, r1
    9a52:	6e 15       	cp	r22, r14
    9a54:	7f 05       	cpc	r23, r15
    9a56:	7c f4       	brge	.+30     	; 0x9a76 <LBCollides+0x44>
	if (x1 + width1 <= x2) return 0;
    9a58:	28 2f       	mov	r18, r24
    9a5a:	30 e0       	ldi	r19, 0x00	; 0
    9a5c:	10 e0       	ldi	r17, 0x00	; 0
    9a5e:	c9 01       	movw	r24, r18
    9a60:	84 0f       	add	r24, r20
    9a62:	91 1d       	adc	r25, r1
    9a64:	08 17       	cp	r16, r24
    9a66:	19 07       	cpc	r17, r25
    9a68:	34 f4       	brge	.+12     	; 0x9a76 <LBCollides+0x44>
	if (x1 >= x2 + width2) return 0;
    9a6a:	0c 0d       	add	r16, r12
    9a6c:	11 1d       	adc	r17, r1
    9a6e:	81 e0       	ldi	r24, 0x01	; 1
    9a70:	20 17       	cp	r18, r16
    9a72:	31 07       	cpc	r19, r17
    9a74:	0c f0       	brlt	.+2      	; 0x9a78 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 <= y2) return 0;
    9a76:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 >= y2 + height2) return 0;
	if (x1 + width1 <= x2) return 0;
	if (x1 >= x2 + width2) return 0;
	return 1;
}
    9a78:	1f 91       	pop	r17
    9a7a:	0f 91       	pop	r16
    9a7c:	ff 90       	pop	r15
    9a7e:	ef 90       	pop	r14
    9a80:	cf 90       	pop	r12
    9a82:	af 90       	pop	r10
    9a84:	08 95       	ret

00009a86 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    9a86:	2f 92       	push	r2
    9a88:	3f 92       	push	r3
    9a8a:	4f 92       	push	r4
    9a8c:	5f 92       	push	r5
    9a8e:	6f 92       	push	r6
    9a90:	7f 92       	push	r7
    9a92:	8f 92       	push	r8
    9a94:	9f 92       	push	r9
    9a96:	af 92       	push	r10
    9a98:	bf 92       	push	r11
    9a9a:	cf 92       	push	r12
    9a9c:	df 92       	push	r13
    9a9e:	ef 92       	push	r14
    9aa0:	ff 92       	push	r15
    9aa2:	0f 93       	push	r16
    9aa4:	1f 93       	push	r17
    9aa6:	cf 93       	push	r28
    9aa8:	df 93       	push	r29
    9aaa:	00 d0       	rcall	.+0      	; 0x9aac <LBLineIntersect+0x26>
    9aac:	00 d0       	rcall	.+0      	; 0x9aae <LBLineIntersect+0x28>
    9aae:	cd b7       	in	r28, 0x3d	; 61
    9ab0:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9ab2:	f1 2c       	mov	r15, r1
    9ab4:	8a 2c       	mov	r8, r10
    9ab6:	91 2c       	mov	r9, r1
    9ab8:	8e 18       	sub	r8, r14
    9aba:	9f 08       	sbc	r9, r15
    9abc:	a8 2e       	mov	r10, r24
    9abe:	b1 2c       	mov	r11, r1
    9ac0:	24 2e       	mov	r2, r20
    9ac2:	31 2c       	mov	r3, r1
    9ac4:	2a 18       	sub	r2, r10
    9ac6:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9ac8:	10 e0       	ldi	r17, 0x00	; 0
    9aca:	d1 2c       	mov	r13, r1
    9acc:	c0 1a       	sub	r12, r16
    9ace:	d1 0a       	sbc	r13, r17
    9ad0:	46 2f       	mov	r20, r22
    9ad2:	50 e0       	ldi	r21, 0x00	; 0
    9ad4:	5c 83       	std	Y+4, r21	; 0x04
    9ad6:	4b 83       	std	Y+3, r20	; 0x03
    9ad8:	82 2f       	mov	r24, r18
    9ada:	90 e0       	ldi	r25, 0x00	; 0
    9adc:	9a 83       	std	Y+2, r25	; 0x02
    9ade:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9ae0:	82 9c       	mul	r8, r2
    9ae2:	90 01       	movw	r18, r0
    9ae4:	83 9c       	mul	r8, r3
    9ae6:	30 0d       	add	r19, r0
    9ae8:	92 9c       	mul	r9, r2
    9aea:	30 0d       	add	r19, r0
    9aec:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    9aee:	ca 01       	movw	r24, r20
    9af0:	e9 81       	ldd	r30, Y+1	; 0x01
    9af2:	fa 81       	ldd	r31, Y+2	; 0x02
    9af4:	8e 1b       	sub	r24, r30
    9af6:	9f 0b       	sbc	r25, r31
    9af8:	c8 9e       	mul	r12, r24
    9afa:	b0 01       	movw	r22, r0
    9afc:	c9 9e       	mul	r12, r25
    9afe:	70 0d       	add	r23, r0
    9b00:	d8 9e       	mul	r13, r24
    9b02:	70 0d       	add	r23, r0
    9b04:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    9b06:	62 0f       	add	r22, r18
    9b08:	73 1f       	adc	r23, r19
    9b0a:	88 27       	eor	r24, r24
    9b0c:	77 fd       	sbrc	r23, 7
    9b0e:	80 95       	com	r24
    9b10:	98 2f       	mov	r25, r24
    9b12:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    9b16:	2b 01       	movw	r4, r22
    9b18:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9b1a:	20 e0       	ldi	r18, 0x00	; 0
    9b1c:	30 e0       	ldi	r19, 0x00	; 0
    9b1e:	a9 01       	movw	r20, r18
    9b20:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    9b24:	88 23       	and	r24, r24
    9b26:	09 f4       	brne	.+2      	; 0x9b2a <LBLineIntersect+0xa4>
    9b28:	6c c0       	rjmp	.+216    	; 0x9c02 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9b2a:	4b 81       	ldd	r20, Y+3	; 0x03
    9b2c:	5c 81       	ldd	r21, Y+4	; 0x04
    9b2e:	4e 19       	sub	r20, r14
    9b30:	5f 09       	sbc	r21, r15
    9b32:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9b34:	0a 19       	sub	r16, r10
    9b36:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9b38:	c4 9e       	mul	r12, r20
    9b3a:	c0 01       	movw	r24, r0
    9b3c:	c5 9e       	mul	r12, r21
    9b3e:	90 0d       	add	r25, r0
    9b40:	d4 9e       	mul	r13, r20
    9b42:	90 0d       	add	r25, r0
    9b44:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9b46:	80 9e       	mul	r8, r16
    9b48:	b0 01       	movw	r22, r0
    9b4a:	81 9e       	mul	r8, r17
    9b4c:	70 0d       	add	r23, r0
    9b4e:	90 9e       	mul	r9, r16
    9b50:	70 0d       	add	r23, r0
    9b52:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9b54:	68 0f       	add	r22, r24
    9b56:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    9b58:	88 27       	eor	r24, r24
    9b5a:	77 fd       	sbrc	r23, 7
    9b5c:	80 95       	com	r24
    9b5e:	98 2f       	mov	r25, r24
    9b60:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    9b64:	a3 01       	movw	r20, r6
    9b66:	92 01       	movw	r18, r4
    9b68:	0e 94 f9 65 	call	0xcbf2	; 0xcbf2 <__divsf3>
    9b6c:	4b 01       	movw	r8, r22
    9b6e:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9b70:	20 e0       	ldi	r18, 0x00	; 0
    9b72:	30 e0       	ldi	r19, 0x00	; 0
    9b74:	a9 01       	movw	r20, r18
    9b76:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    9b7a:	87 fd       	sbrc	r24, 7
    9b7c:	42 c0       	rjmp	.+132    	; 0x9c02 <LBLineIntersect+0x17c>
    9b7e:	20 e0       	ldi	r18, 0x00	; 0
    9b80:	30 e0       	ldi	r19, 0x00	; 0
    9b82:	40 e8       	ldi	r20, 0x80	; 128
    9b84:	5f e3       	ldi	r21, 0x3F	; 63
    9b86:	c5 01       	movw	r24, r10
    9b88:	b4 01       	movw	r22, r8
    9b8a:	0e 94 44 67 	call	0xce88	; 0xce88 <__gesf2>
    9b8e:	18 16       	cp	r1, r24
    9b90:	c4 f1       	brlt	.+112    	; 0x9c02 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9b92:	2e 9c       	mul	r2, r14
    9b94:	b0 01       	movw	r22, r0
    9b96:	2f 9c       	mul	r2, r15
    9b98:	70 0d       	add	r23, r0
    9b9a:	3e 9c       	mul	r3, r14
    9b9c:	70 0d       	add	r23, r0
    9b9e:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9ba0:	29 81       	ldd	r18, Y+1	; 0x01
    9ba2:	3a 81       	ldd	r19, Y+2	; 0x02
    9ba4:	8b 81       	ldd	r24, Y+3	; 0x03
    9ba6:	9c 81       	ldd	r25, Y+4	; 0x04
    9ba8:	28 1b       	sub	r18, r24
    9baa:	39 0b       	sbc	r19, r25
    9bac:	20 9f       	mul	r18, r16
    9bae:	c0 01       	movw	r24, r0
    9bb0:	21 9f       	mul	r18, r17
    9bb2:	90 0d       	add	r25, r0
    9bb4:	30 9f       	mul	r19, r16
    9bb6:	90 0d       	add	r25, r0
    9bb8:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9bba:	68 0f       	add	r22, r24
    9bbc:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    9bbe:	88 27       	eor	r24, r24
    9bc0:	77 fd       	sbrc	r23, 7
    9bc2:	80 95       	com	r24
    9bc4:	98 2f       	mov	r25, r24
    9bc6:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    9bca:	a3 01       	movw	r20, r6
    9bcc:	92 01       	movw	r18, r4
    9bce:	0e 94 f9 65 	call	0xcbf2	; 0xcbf2 <__divsf3>
    9bd2:	6b 01       	movw	r12, r22
    9bd4:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    9bd6:	20 e0       	ldi	r18, 0x00	; 0
    9bd8:	30 e0       	ldi	r19, 0x00	; 0
    9bda:	a9 01       	movw	r20, r18
    9bdc:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    9be0:	87 fd       	sbrc	r24, 7
    9be2:	0f c0       	rjmp	.+30     	; 0x9c02 <LBLineIntersect+0x17c>
    9be4:	11 e0       	ldi	r17, 0x01	; 1
    9be6:	20 e0       	ldi	r18, 0x00	; 0
    9be8:	30 e0       	ldi	r19, 0x00	; 0
    9bea:	40 e8       	ldi	r20, 0x80	; 128
    9bec:	5f e3       	ldi	r21, 0x3F	; 63
    9bee:	c7 01       	movw	r24, r14
    9bf0:	b6 01       	movw	r22, r12
    9bf2:	0e 94 44 67 	call	0xce88	; 0xce88 <__gesf2>
    9bf6:	18 16       	cp	r1, r24
    9bf8:	0c f0       	brlt	.+2      	; 0x9bfc <LBLineIntersect+0x176>
    9bfa:	10 e0       	ldi	r17, 0x00	; 0
    9bfc:	81 e0       	ldi	r24, 0x01	; 1
    9bfe:	81 27       	eor	r24, r17
    9c00:	01 c0       	rjmp	.+2      	; 0x9c04 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    9c02:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    9c04:	0f 90       	pop	r0
    9c06:	0f 90       	pop	r0
    9c08:	0f 90       	pop	r0
    9c0a:	0f 90       	pop	r0
    9c0c:	df 91       	pop	r29
    9c0e:	cf 91       	pop	r28
    9c10:	1f 91       	pop	r17
    9c12:	0f 91       	pop	r16
    9c14:	ff 90       	pop	r15
    9c16:	ef 90       	pop	r14
    9c18:	df 90       	pop	r13
    9c1a:	cf 90       	pop	r12
    9c1c:	bf 90       	pop	r11
    9c1e:	af 90       	pop	r10
    9c20:	9f 90       	pop	r9
    9c22:	8f 90       	pop	r8
    9c24:	7f 90       	pop	r7
    9c26:	6f 90       	pop	r6
    9c28:	5f 90       	pop	r5
    9c2a:	4f 90       	pop	r4
    9c2c:	3f 90       	pop	r3
    9c2e:	2f 90       	pop	r2
    9c30:	08 95       	ret

00009c32 <LBRandom>:

int LBRandom(unsigned int from, unsigned int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    9c32:	0f 93       	push	r16
    9c34:	1f 93       	push	r17
    9c36:	cf 93       	push	r28
    9c38:	df 93       	push	r29
    9c3a:	8c 01       	movw	r16, r24
    9c3c:	eb 01       	movw	r28, r22
	static unsigned int random_seed = 0;
	if (random_seed == 0) random_seed = GetRandomSeed();
    9c3e:	80 91 36 0b 	lds	r24, 0x0B36
    9c42:	90 91 37 0b 	lds	r25, 0x0B37
    9c46:	89 2b       	or	r24, r25
    9c48:	31 f4       	brne	.+12     	; 0x9c56 <LBRandom+0x24>
    9c4a:	0e 94 50 3e 	call	0x7ca0	; 0x7ca0 <GetRandomSeed>
    9c4e:	90 93 37 0b 	sts	0x0B37, r25
    9c52:	80 93 36 0b 	sts	0x0B36, r24
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
    9c56:	90 91 35 0b 	lds	r25, 0x0B35
    9c5a:	20 91 36 0b 	lds	r18, 0x0B36
    9c5e:	30 91 37 0b 	lds	r19, 0x0B37
    9c62:	09 2e       	mov	r0, r25
    9c64:	02 c0       	rjmp	.+4      	; 0x9c6a <LBRandom+0x38>
    9c66:	36 95       	lsr	r19
    9c68:	27 95       	ror	r18
    9c6a:	0a 94       	dec	r0
    9c6c:	e2 f7       	brpl	.-8      	; 0x9c66 <LBRandom+0x34>
	unsigned int delta = to - from;
    9c6e:	be 01       	movw	r22, r28
    9c70:	60 1b       	sub	r22, r16
    9c72:	71 0b       	sbc	r23, r17

	shift_count++;
    9c74:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    9c76:	90 31       	cpi	r25, 0x10	; 16
    9c78:	18 f4       	brcc	.+6      	; 0x9c80 <LBRandom+0x4e>
	
	static u8 shift_count = 0;
	unsigned int shifted = random_seed >> shift_count;
	unsigned int delta = to - from;

	shift_count++;
    9c7a:	90 93 35 0b 	sts	0x0B35, r25
    9c7e:	02 c0       	rjmp	.+4      	; 0x9c84 <LBRandom+0x52>
	if (shift_count >= 16) shift_count = 0;
    9c80:	10 92 35 0b 	sts	0x0B35, r1

	return from + ((delta + shifted) % delta);
    9c84:	cb 01       	movw	r24, r22
    9c86:	82 0f       	add	r24, r18
    9c88:	93 1f       	adc	r25, r19
    9c8a:	0e 94 62 65 	call	0xcac4	; 0xcac4 <__udivmodhi4>
}
    9c8e:	80 0f       	add	r24, r16
    9c90:	91 1f       	adc	r25, r17
    9c92:	df 91       	pop	r29
    9c94:	cf 91       	pop	r28
    9c96:	1f 91       	pop	r17
    9c98:	0f 91       	pop	r16
    9c9a:	08 95       	ret

00009c9c <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    9c9c:	cf 93       	push	r28
    9c9e:	df 93       	push	r29
    9ca0:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    9ca2:	c0 e0       	ldi	r28, 0x00	; 0
    9ca4:	cd 17       	cp	r28, r29
    9ca6:	31 f0       	breq	.+12     	; 0x9cb4 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    9ca8:	8f ef       	ldi	r24, 0xFF	; 255
    9caa:	9f ef       	ldi	r25, 0xFF	; 255
    9cac:	0e 94 1c 3e 	call	0x7c38	; 0x7c38 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    9cb0:	cf 5f       	subi	r28, 0xFF	; 255
    9cb2:	f8 cf       	rjmp	.-16     	; 0x9ca4 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    9cb4:	df 91       	pop	r29
    9cb6:	cf 91       	pop	r28
    9cb8:	08 95       	ret

00009cba <init_scores>:
};

/* Initializers */
void init_scores(struct EepromBlockStruct* e)
{
    e->id = EEPROM_TANK_RANK_ID;
    9cba:	28 e8       	ldi	r18, 0x88	; 136
    9cbc:	30 e0       	ldi	r19, 0x00	; 0
    9cbe:	fc 01       	movw	r30, r24
    9cc0:	21 93       	st	Z+, r18
    9cc2:	31 93       	st	Z+, r19
    9cc4:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_scores, 30);
    9cc6:	4e e1       	ldi	r20, 0x1E	; 30
    9cc8:	50 e0       	ldi	r21, 0x00	; 0
    9cca:	66 ef       	ldi	r22, 0xF6	; 246
    9ccc:	70 e0       	ldi	r23, 0x00	; 0
    9cce:	0c 94 ab 67 	jmp	0xcf56	; 0xcf56 <memcpy_P>

00009cd2 <init_handles>:
}

void init_handles(struct EepromBlockStruct* e)
{
    e->id = EEPROM_HANDLES_ID;
    9cd2:	27 e8       	ldi	r18, 0x87	; 135
    9cd4:	30 e0       	ldi	r19, 0x00	; 0
    9cd6:	fc 01       	movw	r30, r24
    9cd8:	21 93       	st	Z+, r18
    9cda:	31 93       	st	Z+, r19
    9cdc:	cf 01       	movw	r24, r30
    memcpy_P(e->data, default_handles, 30);
    9cde:	4e e1       	ldi	r20, 0x1E	; 30
    9ce0:	50 e0       	ldi	r21, 0x00	; 0
    9ce2:	64 e1       	ldi	r22, 0x14	; 20
    9ce4:	71 e0       	ldi	r23, 0x01	; 1
    9ce6:	0c 94 ab 67 	jmp	0xcf56	; 0xcf56 <memcpy_P>

00009cea <init_tile_animations>:
}

void init_tile_animations(TileAnimations* ta)
{
    9cea:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    9cec:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9cee:	14 86       	std	Z+12, r1	; 0x0c
    9cf0:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    9cf2:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    9cf4:	73 e0       	ldi	r23, 0x03	; 3
    9cf6:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9cf8:	65 e0       	ldi	r22, 0x05	; 5
    9cfa:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    9cfc:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9cfe:	4b e5       	ldi	r20, 0x5B	; 91
    9d00:	5d e5       	ldi	r21, 0x5D	; 93
    9d02:	56 83       	std	Z+6, r21	; 0x06
    9d04:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9d06:	28 e5       	ldi	r18, 0x58	; 88
    9d08:	3d e5       	ldi	r19, 0x5D	; 93
    9d0a:	30 87       	std	Z+8, r19	; 0x08
    9d0c:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9d0e:	85 e5       	ldi	r24, 0x55	; 85
    9d10:	9d e5       	ldi	r25, 0x5D	; 93
    9d12:	92 87       	std	Z+10, r25	; 0x0a
    9d14:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    9d16:	10 8e       	std	Z+24, r1	; 0x18
    9d18:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    9d1a:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    9d1c:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    9d1e:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    9d20:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    9d22:	52 8b       	std	Z+18, r21	; 0x12
    9d24:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    9d26:	34 8b       	std	Z+20, r19	; 0x14
    9d28:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    9d2a:	96 8b       	std	Z+22, r25	; 0x16
    9d2c:	85 8b       	std	Z+21, r24	; 0x15
    9d2e:	08 95       	ret

00009d30 <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    9d30:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    9d32:	88 e7       	ldi	r24, 0x78	; 120
    9d34:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    9d36:	10 82       	st	Z, r1
	s->shared.recoiled = 0;
    9d38:	12 82       	std	Z+2, r1	; 0x02
	s->active = 0;
    9d3a:	16 86       	std	Z+14, r1	; 0x0e
	s->distance = 0;
    9d3c:	17 86       	std	Z+15, r1	; 0x0f
	s->shot_type = shot_type;
    9d3e:	63 87       	std	Z+11, r22	; 0x0b
	s->rebounds = SHOT_REBOUNDS;
    9d40:	84 e0       	ldi	r24, 0x04	; 4
    9d42:	85 87       	std	Z+13, r24	; 0x0d
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    9d44:	66 23       	and	r22, r22
    9d46:	11 f0       	breq	.+4      	; 0x9d4c <init_shot_state+0x1c>
    9d48:	85 e0       	ldi	r24, 0x05	; 5
    9d4a:	01 c0       	rjmp	.+2      	; 0x9d4e <init_shot_state+0x1e>
    9d4c:	81 e0       	ldi	r24, 0x01	; 1
    9d4e:	84 87       	std	Z+12, r24	; 0x0c
	s->shared.x = OFF_SCREEN;
    9d50:	80 e0       	ldi	r24, 0x00	; 0
    9d52:	90 e0       	ldi	r25, 0x00	; 0
    9d54:	a0 e7       	ldi	r26, 0x70	; 112
    9d56:	b3 e4       	ldi	r27, 0x43	; 67
    9d58:	83 83       	std	Z+3, r24	; 0x03
    9d5a:	94 83       	std	Z+4, r25	; 0x04
    9d5c:	a5 83       	std	Z+5, r26	; 0x05
    9d5e:	b6 83       	std	Z+6, r27	; 0x06
	s->shared.y = 0;
    9d60:	17 82       	std	Z+7, r1	; 0x07
    9d62:	10 86       	std	Z+8, r1	; 0x08
    9d64:	11 86       	std	Z+9, r1	; 0x09
    9d66:	12 86       	std	Z+10, r1	; 0x0a
    9d68:	08 95       	ret

00009d6a <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    9d6a:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    9d6c:	10 8a       	std	Z+16, r1	; 0x10
	s->up_anim.anim_count = 2;
    9d6e:	82 e0       	ldi	r24, 0x02	; 2
    9d70:	81 8b       	std	Z+17, r24	; 0x11
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9d72:	85 e0       	ldi	r24, 0x05	; 5
    9d74:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.frame_count = 0;
    9d76:	13 8a       	std	Z+19, r1	; 0x13
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    9d78:	66 23       	and	r22, r22
    9d7a:	19 f0       	breq	.+6      	; 0x9d82 <set_shot_animations+0x18>
    9d7c:	89 e2       	ldi	r24, 0x29	; 41
    9d7e:	91 e3       	ldi	r25, 0x31	; 49
    9d80:	02 c0       	rjmp	.+4      	; 0x9d86 <set_shot_animations+0x1c>
    9d82:	8c e2       	ldi	r24, 0x2C	; 44
    9d84:	91 e3       	ldi	r25, 0x31	; 49
    9d86:	95 8b       	std	Z+21, r25	; 0x15
    9d88:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    9d8a:	66 23       	and	r22, r22
    9d8c:	19 f0       	breq	.+6      	; 0x9d94 <set_shot_animations+0x2a>
    9d8e:	86 e2       	ldi	r24, 0x26	; 38
    9d90:	91 e3       	ldi	r25, 0x31	; 49
    9d92:	02 c0       	rjmp	.+4      	; 0x9d98 <set_shot_animations+0x2e>
    9d94:	8c e2       	ldi	r24, 0x2C	; 44
    9d96:	91 e3       	ldi	r25, 0x31	; 49
    9d98:	97 8b       	std	Z+23, r25	; 0x17
    9d9a:	86 8b       	std	Z+22, r24	; 0x16
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    9d9c:	82 e0       	ldi	r24, 0x02	; 2
    9d9e:	83 8f       	std	Z+27, r24	; 0x1b
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9da0:	85 e0       	ldi	r24, 0x05	; 5
    9da2:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.frame_count = 0;
    9da4:	15 8e       	std	Z+29, r1	; 0x1d
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    9da6:	66 23       	and	r22, r22
    9da8:	19 f0       	breq	.+6      	; 0x9db0 <set_shot_animations+0x46>
    9daa:	83 e2       	ldi	r24, 0x23	; 35
    9dac:	91 e3       	ldi	r25, 0x31	; 49
    9dae:	02 c0       	rjmp	.+4      	; 0x9db4 <set_shot_animations+0x4a>
    9db0:	8c e2       	ldi	r24, 0x2C	; 44
    9db2:	91 e3       	ldi	r25, 0x31	; 49
    9db4:	97 8f       	std	Z+31, r25	; 0x1f
    9db6:	86 8f       	std	Z+30, r24	; 0x1e
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    9db8:	66 23       	and	r22, r22
    9dba:	19 f0       	breq	.+6      	; 0x9dc2 <set_shot_animations+0x58>
    9dbc:	80 e2       	ldi	r24, 0x20	; 32
    9dbe:	91 e3       	ldi	r25, 0x31	; 49
    9dc0:	02 c0       	rjmp	.+4      	; 0x9dc6 <set_shot_animations+0x5c>
    9dc2:	8c e2       	ldi	r24, 0x2C	; 44
    9dc4:	91 e3       	ldi	r25, 0x31	; 49
    9dc6:	91 a3       	std	Z+33, r25	; 0x21
    9dc8:	80 a3       	std	Z+32, r24	; 0x20
    9dca:	08 95       	ret

00009dcc <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    9dcc:	0f 93       	push	r16
    9dce:	1f 93       	push	r17
    9dd0:	cf 93       	push	r28
    9dd2:	df 93       	push	r29
    9dd4:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    9dd6:	8a e5       	ldi	r24, 0x5A	; 90
    9dd8:	8d 8b       	std	Y+21, r24	; 0x15
	p->grace_frame = FRAMES_PER_GRACE;
    9dda:	88 e7       	ldi	r24, 0x78	; 120
    9ddc:	8f 8b       	std	Y+23, r24	; 0x17
	p->banter_index = 0;
    9dde:	1e 8a       	std	Y+22, r1	; 0x16
	p->score = 0;
    9de0:	1f 86       	std	Y+15, r1	; 0x0f
	p->level_score = 0;
    9de2:	18 8a       	std	Y+16, r1	; 0x10
	p->shared.direction = D_UP;
    9de4:	18 82       	st	Y, r1
	p->shared.speed = 0;
    9de6:	19 82       	std	Y+1, r1	; 0x01
	p->shared.recoiled = 0;
    9de8:	1a 82       	std	Y+2, r1	; 0x02
	p->max_speed = MAX_SPEED;
    9dea:	82 e3       	ldi	r24, 0x32	; 50
    9dec:	88 8f       	std	Y+24, r24	; 0x18
	p->has_over_speed = false;
    9dee:	1a 8e       	std	Y+26, r1	; 0x1a
	p->has_rocket = false;
    9df0:	19 8e       	std	Y+25, r1	; 0x19
	p->flags = 0;
    9df2:	1c 8a       	std	Y+20, r1	; 0x14

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    9df4:	fe 01       	movw	r30, r28
    9df6:	e0 5b       	subi	r30, 0xB0	; 176
    9df8:	ff 4f       	sbci	r31, 0xFF	; 255
    9dfa:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    9dfc:	31 96       	adiw	r30, 0x01	; 1
    9dfe:	91 e0       	ldi	r25, 0x01	; 1
    9e00:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e02:	31 96       	adiw	r30, 0x01	; 1
    9e04:	85 e0       	ldi	r24, 0x05	; 5
    9e06:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    9e08:	31 96       	adiw	r30, 0x01	; 1
    9e0a:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    9e0c:	31 96       	adiw	r30, 0x01	; 1
    9e0e:	71 83       	std	Z+1, r23	; 0x01
    9e10:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    9e12:	36 96       	adiw	r30, 0x06	; 6
    9e14:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    9e16:	31 96       	adiw	r30, 0x01	; 1
    9e18:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e1a:	31 96       	adiw	r30, 0x01	; 1
    9e1c:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    9e1e:	31 96       	adiw	r30, 0x01	; 1
    9e20:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    9e22:	31 96       	adiw	r30, 0x01	; 1
    9e24:	51 83       	std	Z+1, r21	; 0x01
    9e26:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    9e28:	36 96       	adiw	r30, 0x06	; 6
    9e2a:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    9e2c:	31 96       	adiw	r30, 0x01	; 1
    9e2e:	93 e0       	ldi	r25, 0x03	; 3
    9e30:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    9e32:	31 96       	adiw	r30, 0x01	; 1
    9e34:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    9e36:	31 96       	adiw	r30, 0x01	; 1
    9e38:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    9e3a:	31 96       	adiw	r30, 0x01	; 1
    9e3c:	8b e3       	ldi	r24, 0x3B	; 59
    9e3e:	91 e3       	ldi	r25, 0x31	; 49
    9e40:	91 83       	std	Z+1, r25	; 0x01
    9e42:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    9e44:	32 96       	adiw	r30, 0x02	; 2
    9e46:	85 e3       	ldi	r24, 0x35	; 53
    9e48:	91 e3       	ldi	r25, 0x31	; 49
    9e4a:	91 83       	std	Z+1, r25	; 0x01
    9e4c:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    9e4e:	32 96       	adiw	r30, 0x02	; 2
    9e50:	8f e2       	ldi	r24, 0x2F	; 47
    9e52:	91 e3       	ldi	r25, 0x31	; 49
    9e54:	91 83       	std	Z+1, r25	; 0x01
    9e56:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    9e58:	19 8a       	std	Y+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    9e5a:	8e 01       	movw	r16, r28
    9e5c:	04 5d       	subi	r16, 0xD4	; 212
    9e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    9e60:	60 e0       	ldi	r22, 0x00	; 0
    9e62:	c8 01       	movw	r24, r16
    9e64:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    9e68:	60 e0       	ldi	r22, 0x00	; 0
    9e6a:	c8 01       	movw	r24, r16
    9e6c:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <set_shot_animations>
	}
	
	/* pathfinding variables */
	p->feeling_my_way = 0;
    9e70:	1b 8e       	std	Y+27, r1	; 0x1b
	p->goal_direction = 0;
    9e72:	1d 8e       	std	Y+29, r1	; 0x1d
    9e74:	1c 8e       	std	Y+28, r1	; 0x1c
	p->goal = 0;
    9e76:	1a a2       	std	Y+34, r1	; 0x22
	p->goal_reached = 0;
    9e78:	1b a2       	std	Y+35, r1	; 0x23
	p->old_x = 0;
    9e7a:	1c a2       	std	Y+36, r1	; 0x24
    9e7c:	1d a2       	std	Y+37, r1	; 0x25
    9e7e:	1e a2       	std	Y+38, r1	; 0x26
    9e80:	1f a2       	std	Y+39, r1	; 0x27
	p->old_y = 0;
    9e82:	18 a6       	std	Y+40, r1	; 0x28
    9e84:	19 a6       	std	Y+41, r1	; 0x29
    9e86:	1a a6       	std	Y+42, r1	; 0x2a
    9e88:	1b a6       	std	Y+43, r1	; 0x2b
	p->deadlock_count_x = 0;
    9e8a:	1f 8e       	std	Y+31, r1	; 0x1f
    9e8c:	1e 8e       	std	Y+30, r1	; 0x1e
	p->deadlock_count_y = 0;
    9e8e:	19 a2       	std	Y+33, r1	; 0x21
    9e90:	18 a2       	std	Y+32, r1	; 0x20
}
    9e92:	df 91       	pop	r29
    9e94:	cf 91       	pop	r28
    9e96:	1f 91       	pop	r17
    9e98:	0f 91       	pop	r16
    9e9a:	08 95       	ret

00009e9c <player_init_shot_state>:

void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
    9e9c:	fc 01       	movw	r30, r24
    9e9e:	11 8a       	std	Z+17, r1	; 0x11
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    9ea0:	60 e0       	ldi	r22, 0x00	; 0
    9ea2:	8c 96       	adiw	r24, 0x2c	; 44
    9ea4:	0c 94 98 4e 	jmp	0x9d30	; 0x9d30 <init_shot_state>

00009ea8 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    9ea8:	e8 e0       	ldi	r30, 0x08	; 8
    9eaa:	fc e0       	ldi	r31, 0x0C	; 12
    9eac:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    9eae:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    9eb0:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    9eb2:	4f e5       	ldi	r20, 0x5F	; 95
    9eb4:	51 e3       	ldi	r21, 0x31	; 49
    9eb6:	6b e6       	ldi	r22, 0x6B	; 107
    9eb8:	71 e3       	ldi	r23, 0x31	; 49
    9eba:	85 e2       	ldi	r24, 0x25	; 37
    9ebc:	9c e0       	ldi	r25, 0x0C	; 12
    9ebe:	0e 94 e6 4e 	call	0x9dcc	; 0x9dcc <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    9ec2:	47 e4       	ldi	r20, 0x47	; 71
    9ec4:	51 e3       	ldi	r21, 0x31	; 49
    9ec6:	63 e5       	ldi	r22, 0x53	; 83
    9ec8:	71 e3       	ldi	r23, 0x31	; 49
    9eca:	89 e8       	ldi	r24, 0x89	; 137
    9ecc:	9f e0       	ldi	r25, 0x0F	; 15
    9ece:	0c 94 e6 4e 	jmp	0x9dcc	; 0x9dcc <init_player>

00009ed2 <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    9ed2:	cf 93       	push	r28
    9ed4:	df 93       	push	r29
    9ed6:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    9ed8:	1f 8a       	std	Y+23, r1	; 0x17
	player->shared.x = player->spawn_x;
    9eda:	6a 89       	ldd	r22, Y+18	; 0x12
    9edc:	70 e0       	ldi	r23, 0x00	; 0
    9ede:	80 e0       	ldi	r24, 0x00	; 0
    9ee0:	90 e0       	ldi	r25, 0x00	; 0
    9ee2:	0e 94 92 66 	call	0xcd24	; 0xcd24 <__floatunsisf>
    9ee6:	6b 83       	std	Y+3, r22	; 0x03
    9ee8:	7c 83       	std	Y+4, r23	; 0x04
    9eea:	8d 83       	std	Y+5, r24	; 0x05
    9eec:	9e 83       	std	Y+6, r25	; 0x06
	player->shared.y = player->spawn_y;
    9eee:	6b 89       	ldd	r22, Y+19	; 0x13
    9ef0:	70 e0       	ldi	r23, 0x00	; 0
    9ef2:	80 e0       	ldi	r24, 0x00	; 0
    9ef4:	90 e0       	ldi	r25, 0x00	; 0
    9ef6:	0e 94 92 66 	call	0xcd24	; 0xcd24 <__floatunsisf>
    9efa:	6f 83       	std	Y+7, r22	; 0x07
    9efc:	78 87       	std	Y+8, r23	; 0x08
    9efe:	89 87       	std	Y+9, r24	; 0x09
    9f00:	9a 87       	std	Y+10, r25	; 0x0a
	player->shared.direction = D_UP;
    9f02:	18 82       	st	Y, r1
	player->shared.speed = 0;
    9f04:	19 82       	std	Y+1, r1	; 0x01
	player->shared.recoiled = 0;
    9f06:	1a 82       	std	Y+2, r1	; 0x02
	
}
    9f08:	df 91       	pop	r29
    9f0a:	cf 91       	pop	r28
    9f0c:	08 95       	ret

00009f0e <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    9f0e:	cf 93       	push	r28
    9f10:	df 93       	push	r29
    9f12:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    9f14:	bc 01       	movw	r22, r24
    9f16:	88 81       	ld	r24, Y
    9f18:	99 81       	ldd	r25, Y+1	; 0x01
    9f1a:	0e 94 6e 3f 	call	0x7edc	; 0x7edc <EepromReadBlock>
	if (status == 0x03)
    9f1e:	83 30       	cpi	r24, 0x03	; 3
    9f20:	29 f4       	brne	.+10     	; 0x9f2c <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    9f22:	ce 01       	movw	r24, r28
	}
}
    9f24:	df 91       	pop	r29
    9f26:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    9f28:	0c 94 01 3f 	jmp	0x7e02	; 0x7e02 <EepromWriteBlock>
	}
}
    9f2c:	df 91       	pop	r29
    9f2e:	cf 91       	pop	r28
    9f30:	08 95       	ret

00009f32 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    9f32:	61 e0       	ldi	r22, 0x01	; 1
    9f34:	83 e0       	ldi	r24, 0x03	; 3
    9f36:	0e 94 39 4c 	call	0x9872	; 0x9872 <FadeOut>
	ClearVram();
    9f3a:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9f3e:	60 e0       	ldi	r22, 0x00	; 0
    9f40:	83 e0       	ldi	r24, 0x03	; 3
    9f42:	0c 94 2d 4c 	jmp	0x985a	; 0x985a <FadeIn>

00009f46 <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    9f46:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    9f48:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    9f4a:	40 e0       	ldi	r20, 0x00	; 0
    9f4c:	67 e7       	ldi	r22, 0x77	; 119
    9f4e:	71 e3       	ldi	r23, 0x31	; 49
    9f50:	8c 2f       	mov	r24, r28
    9f52:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
    9f56:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    9f58:	ca 30       	cpi	r28, 0x0A	; 10
    9f5a:	b9 f7       	brne	.-18     	; 0x9f4a <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    9f5c:	cf 91       	pop	r28
    9f5e:	08 95       	ret

00009f60 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    9f60:	cf 92       	push	r12
    9f62:	df 92       	push	r13
    9f64:	ff 92       	push	r15
    9f66:	0f 93       	push	r16
    9f68:	1f 93       	push	r17
    9f6a:	cf 93       	push	r28
    9f6c:	df 93       	push	r29
    9f6e:	cd b7       	in	r28, 0x3d	; 61
    9f70:	de b7       	in	r29, 0x3e	; 62
    9f72:	28 97       	sbiw	r28, 0x08	; 8
    9f74:	0f b6       	in	r0, 0x3f	; 63
    9f76:	f8 94       	cli
    9f78:	de bf       	out	0x3e, r29	; 62
    9f7a:	0f be       	out	0x3f, r0	; 63
    9f7c:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    9f7e:	90 91 34 0c 	lds	r25, 0x0C34
    9f82:	80 91 98 0f 	lds	r24, 0x0F98
    9f86:	98 17       	cp	r25, r24
    9f88:	28 f4       	brcc	.+10     	; 0x9f94 <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    9f8a:	e5 e2       	ldi	r30, 0x25	; 37
    9f8c:	fc e0       	ldi	r31, 0x0C	; 12
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    9f8e:	a9 e8       	ldi	r26, 0x89	; 137
    9f90:	bf e0       	ldi	r27, 0x0F	; 15
    9f92:	04 c0       	rjmp	.+8      	; 0x9f9c <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    9f94:	e9 e8       	ldi	r30, 0x89	; 137
    9f96:	ff e0       	ldi	r31, 0x0F	; 15
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    9f98:	a5 e2       	ldi	r26, 0x25	; 37
    9f9a:	bc e0       	ldi	r27, 0x0C	; 12
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    9f9c:	1b 96       	adiw	r26, 0x0b	; 11
    9f9e:	8c 91       	ld	r24, X
    9fa0:	1b 97       	sbiw	r26, 0x0b	; 11
    9fa2:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    9fa4:	83 85       	ldd	r24, Z+11	; 0x0b
    9fa6:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    9fa8:	1f 96       	adiw	r26, 0x0f	; 15
    9faa:	8c 91       	ld	r24, X
    9fac:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    9fae:	97 85       	ldd	r25, Z+15	; 0x0f
    9fb0:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    9fb2:	f8 2e       	mov	r15, r24
    9fb4:	f9 1a       	sub	r15, r25
    9fb6:	00 e0       	ldi	r16, 0x00	; 0
    9fb8:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    9fba:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    9fbc:	81 11       	cpse	r24, r1
    9fbe:	08 c0       	rjmp	.+16     	; 0x9fd0 <save_score+0x70>
    9fc0:	f8 01       	movw	r30, r16
    9fc2:	ef 53       	subi	r30, 0x3F	; 63
    9fc4:	f4 4f       	sbci	r31, 0xF4	; 244
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    9fc6:	94 81       	ldd	r25, Z+4	; 0x04
    9fc8:	25 81       	ldd	r18, Z+5	; 0x05
    9fca:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    9fcc:	9f 15       	cp	r25, r15
    9fce:	d0 f4       	brcc	.+52     	; 0xa004 <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    9fd0:	44 e0       	ldi	r20, 0x04	; 4
    9fd2:	c8 01       	movw	r24, r16
    9fd4:	8d 53       	subi	r24, 0x3D	; 61
    9fd6:	94 4f       	sbci	r25, 0xF4	; 244
    9fd8:	6c 01       	movw	r12, r24
    9fda:	bc 01       	movw	r22, r24
    9fdc:	ce 01       	movw	r24, r28
    9fde:	05 96       	adiw	r24, 0x05	; 5
    9fe0:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    9fe4:	44 e0       	ldi	r20, 0x04	; 4
    9fe6:	be 01       	movw	r22, r28
    9fe8:	6f 5f       	subi	r22, 0xFF	; 255
    9fea:	7f 4f       	sbci	r23, 0xFF	; 255
    9fec:	c6 01       	movw	r24, r12
    9fee:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    9ff2:	44 e0       	ldi	r20, 0x04	; 4
    9ff4:	be 01       	movw	r22, r28
    9ff6:	6b 5f       	subi	r22, 0xFB	; 251
    9ff8:	7f 4f       	sbci	r23, 0xFF	; 255
    9ffa:	ce 01       	movw	r24, r28
    9ffc:	01 96       	adiw	r24, 0x01	; 1
    9ffe:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
				saved = 1;
    a002:	81 e0       	ldi	r24, 0x01	; 1
    a004:	0c 5f       	subi	r16, 0xFC	; 252
    a006:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    a008:	0c 31       	cpi	r16, 0x1C	; 28
    a00a:	11 05       	cpc	r17, r1
    a00c:	b9 f6       	brne	.-82     	; 0x9fbc <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a00e:	81 ec       	ldi	r24, 0xC1	; 193
    a010:	9b e0       	ldi	r25, 0x0B	; 11
    a012:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    a016:	28 96       	adiw	r28, 0x08	; 8
    a018:	0f b6       	in	r0, 0x3f	; 63
    a01a:	f8 94       	cli
    a01c:	de bf       	out	0x3e, r29	; 62
    a01e:	0f be       	out	0x3f, r0	; 63
    a020:	cd bf       	out	0x3d, r28	; 61
    a022:	df 91       	pop	r29
    a024:	cf 91       	pop	r28
    a026:	1f 91       	pop	r17
    a028:	0f 91       	pop	r16
    a02a:	ff 90       	pop	r15
    a02c:	df 90       	pop	r13
    a02e:	cf 90       	pop	r12
    a030:	08 95       	ret

0000a032 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    a032:	0f 93       	push	r16
    a034:	1f 93       	push	r17
    a036:	cf 93       	push	r28
    a038:	df 93       	push	r29
    a03a:	8c 01       	movw	r16, r24
    a03c:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    a03e:	88 81       	ld	r24, Y
    a040:	81 30       	cpi	r24, 0x01	; 1
    a042:	69 f1       	breq	.+90     	; 0xa09e <position_shot+0x6c>
    a044:	98 f0       	brcs	.+38     	; 0xa06c <position_shot+0x3a>
    a046:	82 30       	cpi	r24, 0x02	; 2
    a048:	f1 f1       	breq	.+124    	; 0xa0c6 <position_shot+0x94>
    a04a:	83 30       	cpi	r24, 0x03	; 3
    a04c:	09 f0       	breq	.+2      	; 0xa050 <position_shot+0x1e>
    a04e:	59 c0       	rjmp	.+178    	; 0xa102 <position_shot+0xd0>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 8;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
    a050:	f8 01       	movw	r30, r16
    a052:	83 81       	ldd	r24, Z+3	; 0x03
    a054:	94 81       	ldd	r25, Z+4	; 0x04
    a056:	a5 81       	ldd	r26, Z+5	; 0x05
    a058:	b6 81       	ldd	r27, Z+6	; 0x06
    a05a:	8b 83       	std	Y+3, r24	; 0x03
    a05c:	9c 83       	std	Y+4, r25	; 0x04
    a05e:	ad 83       	std	Y+5, r26	; 0x05
    a060:	be 83       	std	Y+6, r27	; 0x06
			shot->shared.y = player->shared.y + 4;
    a062:	20 e0       	ldi	r18, 0x00	; 0
    a064:	30 e0       	ldi	r19, 0x00	; 0
    a066:	40 e8       	ldi	r20, 0x80	; 128
    a068:	50 e4       	ldi	r21, 0x40	; 64
    a06a:	41 c0       	rjmp	.+130    	; 0xa0ee <position_shot+0xbc>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    a06c:	20 e0       	ldi	r18, 0x00	; 0
    a06e:	30 e0       	ldi	r19, 0x00	; 0
    a070:	40 e8       	ldi	r20, 0x80	; 128
    a072:	50 e4       	ldi	r21, 0x40	; 64
    a074:	f8 01       	movw	r30, r16
    a076:	63 81       	ldd	r22, Z+3	; 0x03
    a078:	74 81       	ldd	r23, Z+4	; 0x04
    a07a:	85 81       	ldd	r24, Z+5	; 0x05
    a07c:	96 81       	ldd	r25, Z+6	; 0x06
    a07e:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a082:	6b 83       	std	Y+3, r22	; 0x03
    a084:	7c 83       	std	Y+4, r23	; 0x04
    a086:	8d 83       	std	Y+5, r24	; 0x05
    a088:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y;
    a08a:	f8 01       	movw	r30, r16
    a08c:	87 81       	ldd	r24, Z+7	; 0x07
    a08e:	90 85       	ldd	r25, Z+8	; 0x08
    a090:	a1 85       	ldd	r26, Z+9	; 0x09
    a092:	b2 85       	ldd	r27, Z+10	; 0x0a
    a094:	8f 83       	std	Y+7, r24	; 0x07
    a096:	98 87       	std	Y+8, r25	; 0x08
    a098:	a9 87       	std	Y+9, r26	; 0x09
    a09a:	ba 87       	std	Y+10, r27	; 0x0a
			break;
    a09c:	32 c0       	rjmp	.+100    	; 0xa102 <position_shot+0xd0>
		case D_RIGHT:
			shot->shared.x = player->shared.x + 8;
    a09e:	20 e0       	ldi	r18, 0x00	; 0
    a0a0:	30 e0       	ldi	r19, 0x00	; 0
    a0a2:	40 e0       	ldi	r20, 0x00	; 0
    a0a4:	51 e4       	ldi	r21, 0x41	; 65
    a0a6:	f8 01       	movw	r30, r16
    a0a8:	63 81       	ldd	r22, Z+3	; 0x03
    a0aa:	74 81       	ldd	r23, Z+4	; 0x04
    a0ac:	85 81       	ldd	r24, Z+5	; 0x05
    a0ae:	96 81       	ldd	r25, Z+6	; 0x06
    a0b0:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a0b4:	6b 83       	std	Y+3, r22	; 0x03
    a0b6:	7c 83       	std	Y+4, r23	; 0x04
    a0b8:	8d 83       	std	Y+5, r24	; 0x05
    a0ba:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 4;
    a0bc:	20 e0       	ldi	r18, 0x00	; 0
    a0be:	30 e0       	ldi	r19, 0x00	; 0
    a0c0:	40 e8       	ldi	r20, 0x80	; 128
    a0c2:	50 e4       	ldi	r21, 0x40	; 64
    a0c4:	13 c0       	rjmp	.+38     	; 0xa0ec <position_shot+0xba>
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    a0c6:	20 e0       	ldi	r18, 0x00	; 0
    a0c8:	30 e0       	ldi	r19, 0x00	; 0
    a0ca:	40 e8       	ldi	r20, 0x80	; 128
    a0cc:	50 e4       	ldi	r21, 0x40	; 64
    a0ce:	f8 01       	movw	r30, r16
    a0d0:	63 81       	ldd	r22, Z+3	; 0x03
    a0d2:	74 81       	ldd	r23, Z+4	; 0x04
    a0d4:	85 81       	ldd	r24, Z+5	; 0x05
    a0d6:	96 81       	ldd	r25, Z+6	; 0x06
    a0d8:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a0dc:	6b 83       	std	Y+3, r22	; 0x03
    a0de:	7c 83       	std	Y+4, r23	; 0x04
    a0e0:	8d 83       	std	Y+5, r24	; 0x05
    a0e2:	9e 83       	std	Y+6, r25	; 0x06
			shot->shared.y = player->shared.y + 8;
    a0e4:	20 e0       	ldi	r18, 0x00	; 0
    a0e6:	30 e0       	ldi	r19, 0x00	; 0
    a0e8:	40 e0       	ldi	r20, 0x00	; 0
    a0ea:	51 e4       	ldi	r21, 0x41	; 65
    a0ec:	f8 01       	movw	r30, r16
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x;
			shot->shared.y = player->shared.y + 4;
    a0ee:	67 81       	ldd	r22, Z+7	; 0x07
    a0f0:	70 85       	ldd	r23, Z+8	; 0x08
    a0f2:	81 85       	ldd	r24, Z+9	; 0x09
    a0f4:	92 85       	ldd	r25, Z+10	; 0x0a
    a0f6:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a0fa:	6f 83       	std	Y+7, r22	; 0x07
    a0fc:	78 87       	std	Y+8, r23	; 0x08
    a0fe:	89 87       	std	Y+9, r24	; 0x09
    a100:	9a 87       	std	Y+10, r25	; 0x0a
			break;
	}
}
    a102:	df 91       	pop	r29
    a104:	cf 91       	pop	r28
    a106:	1f 91       	pop	r17
    a108:	0f 91       	pop	r16
    a10a:	08 95       	ret

0000a10c <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    a10c:	0f 93       	push	r16
    a10e:	1f 93       	push	r17
    a110:	cf 93       	push	r28
    a112:	df 93       	push	r29
    a114:	8c 01       	movw	r16, r24
    a116:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    a118:	ac 01       	movw	r20, r24
    a11a:	44 5f       	subi	r20, 0xF4	; 244
    a11c:	5f 4f       	sbci	r21, 0xFF	; 255
    a11e:	23 e0       	ldi	r18, 0x03	; 3
    a120:	6e e0       	ldi	r22, 0x0E	; 14
    a122:	84 e0       	ldi	r24, 0x04	; 4
    a124:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
	Print(8, 14, &strMap[strOwns]);
    a128:	4e ed       	ldi	r20, 0xDE	; 222
    a12a:	51 e0       	ldi	r21, 0x01	; 1
    a12c:	6e e0       	ldi	r22, 0x0E	; 14
    a12e:	70 e0       	ldi	r23, 0x00	; 0
    a130:	88 e0       	ldi	r24, 0x08	; 8
    a132:	90 e0       	ldi	r25, 0x00	; 0
    a134:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    a138:	ae 01       	movw	r20, r28
    a13a:	44 5f       	subi	r20, 0xF4	; 244
    a13c:	5f 4f       	sbci	r21, 0xFF	; 255
    a13e:	23 e0       	ldi	r18, 0x03	; 3
    a140:	6e e0       	ldi	r22, 0x0E	; 14
    a142:	8d e0       	ldi	r24, 0x0D	; 13
    a144:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
	Print(17, 14, &strMap[strBy]);
    a148:	43 ee       	ldi	r20, 0xE3	; 227
    a14a:	51 e0       	ldi	r21, 0x01	; 1
    a14c:	6e e0       	ldi	r22, 0x0E	; 14
    a14e:	70 e0       	ldi	r23, 0x00	; 0
    a150:	81 e1       	ldi	r24, 0x11	; 17
    a152:	90 e0       	ldi	r25, 0x00	; 0
    a154:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    a158:	21 e0       	ldi	r18, 0x01	; 1
    a15a:	f8 01       	movw	r30, r16
    a15c:	40 89       	ldd	r20, Z+16	; 0x10
    a15e:	6e e0       	ldi	r22, 0x0E	; 14
    a160:	70 e0       	ldi	r23, 0x00	; 0
    a162:	86 e1       	ldi	r24, 0x16	; 22
    a164:	90 e0       	ldi	r25, 0x00	; 0
    a166:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
	PrintChar(23, 14, '-');
    a16a:	4d e2       	ldi	r20, 0x2D	; 45
    a16c:	6e e0       	ldi	r22, 0x0E	; 14
    a16e:	70 e0       	ldi	r23, 0x00	; 0
    a170:	87 e1       	ldi	r24, 0x17	; 23
    a172:	90 e0       	ldi	r25, 0x00	; 0
    a174:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    a178:	21 e0       	ldi	r18, 0x01	; 1
    a17a:	48 89       	ldd	r20, Y+16	; 0x10
    a17c:	6e e0       	ldi	r22, 0x0E	; 14
    a17e:	70 e0       	ldi	r23, 0x00	; 0
    a180:	8a e1       	ldi	r24, 0x1A	; 26
    a182:	90 e0       	ldi	r25, 0x00	; 0
}
    a184:	df 91       	pop	r29
    a186:	cf 91       	pop	r28
    a188:	1f 91       	pop	r17
    a18a:	0f 91       	pop	r16
	Print(8, 14, &strMap[strOwns]);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, &strMap[strBy]);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    a18c:	0c 94 b7 4b 	jmp	0x976e	; 0x976e <PrintByte>

0000a190 <print_final_score>:
}

void print_final_score(Player* winner, Player* loser)
{
    a190:	0f 93       	push	r16
    a192:	1f 93       	push	r17
    a194:	cf 93       	push	r28
    a196:	df 93       	push	r29
    a198:	8c 01       	movw	r16, r24
    a19a:	eb 01       	movw	r28, r22
    Print(9, 13, &strMap[strFinalScore]);
    a19c:	46 ee       	ldi	r20, 0xE6	; 230
    a19e:	51 e0       	ldi	r21, 0x01	; 1
    a1a0:	6d e0       	ldi	r22, 0x0D	; 13
    a1a2:	70 e0       	ldi	r23, 0x00	; 0
    a1a4:	89 e0       	ldi	r24, 0x09	; 9
    a1a6:	90 e0       	ldi	r25, 0x00	; 0
    a1a8:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    LBPrintStr(4, 14, &winner->handle[0], 3);
    a1ac:	a8 01       	movw	r20, r16
    a1ae:	44 5f       	subi	r20, 0xF4	; 244
    a1b0:	5f 4f       	sbci	r21, 0xFF	; 255
    a1b2:	23 e0       	ldi	r18, 0x03	; 3
    a1b4:	6e e0       	ldi	r22, 0x0E	; 14
    a1b6:	84 e0       	ldi	r24, 0x04	; 4
    a1b8:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
    Print(8, 14, &strMap[strOwns]);
    a1bc:	4e ed       	ldi	r20, 0xDE	; 222
    a1be:	51 e0       	ldi	r21, 0x01	; 1
    a1c0:	6e e0       	ldi	r22, 0x0E	; 14
    a1c2:	70 e0       	ldi	r23, 0x00	; 0
    a1c4:	88 e0       	ldi	r24, 0x08	; 8
    a1c6:	90 e0       	ldi	r25, 0x00	; 0
    a1c8:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    LBPrintStr(13, 14, &loser->handle[0], 3);
    a1cc:	ae 01       	movw	r20, r28
    a1ce:	44 5f       	subi	r20, 0xF4	; 244
    a1d0:	5f 4f       	sbci	r21, 0xFF	; 255
    a1d2:	23 e0       	ldi	r18, 0x03	; 3
    a1d4:	6e e0       	ldi	r22, 0x0E	; 14
    a1d6:	8d e0       	ldi	r24, 0x0D	; 13
    a1d8:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
    Print(17, 14, &strMap[strBy]);
    a1dc:	43 ee       	ldi	r20, 0xE3	; 227
    a1de:	51 e0       	ldi	r21, 0x01	; 1
    a1e0:	6e e0       	ldi	r22, 0x0E	; 14
    a1e2:	70 e0       	ldi	r23, 0x00	; 0
    a1e4:	81 e1       	ldi	r24, 0x11	; 17
    a1e6:	90 e0       	ldi	r25, 0x00	; 0
    a1e8:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    PrintByte(22, 14, winner->score ,true);
    a1ec:	21 e0       	ldi	r18, 0x01	; 1
    a1ee:	f8 01       	movw	r30, r16
    a1f0:	47 85       	ldd	r20, Z+15	; 0x0f
    a1f2:	6e e0       	ldi	r22, 0x0E	; 14
    a1f4:	70 e0       	ldi	r23, 0x00	; 0
    a1f6:	86 e1       	ldi	r24, 0x16	; 22
    a1f8:	90 e0       	ldi	r25, 0x00	; 0
    a1fa:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
    PrintChar(23, 14, '-');
    a1fe:	4d e2       	ldi	r20, 0x2D	; 45
    a200:	6e e0       	ldi	r22, 0x0E	; 14
    a202:	70 e0       	ldi	r23, 0x00	; 0
    a204:	87 e1       	ldi	r24, 0x17	; 23
    a206:	90 e0       	ldi	r25, 0x00	; 0
    a208:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
    PrintByte(26, 14, loser->score ,true);
    a20c:	21 e0       	ldi	r18, 0x01	; 1
    a20e:	4f 85       	ldd	r20, Y+15	; 0x0f
    a210:	6e e0       	ldi	r22, 0x0E	; 14
    a212:	70 e0       	ldi	r23, 0x00	; 0
    a214:	8a e1       	ldi	r24, 0x1A	; 26
    a216:	90 e0       	ldi	r25, 0x00	; 0
}
    a218:	df 91       	pop	r29
    a21a:	cf 91       	pop	r28
    a21c:	1f 91       	pop	r17
    a21e:	0f 91       	pop	r16
    Print(8, 14, &strMap[strOwns]);
    LBPrintStr(13, 14, &loser->handle[0], 3);
    Print(17, 14, &strMap[strBy]);
    PrintByte(22, 14, winner->score ,true);
    PrintChar(23, 14, '-');
    PrintByte(26, 14, loser->score ,true);
    a220:	0c 94 b7 4b 	jmp	0x976e	; 0x976e <PrintByte>

0000a224 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    a224:	cf 93       	push	r28
    a226:	df 93       	push	r29
    a228:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    a22a:	ac 01       	movw	r20, r24
    a22c:	44 5f       	subi	r20, 0xF4	; 244
    a22e:	5f 4f       	sbci	r21, 0xFF	; 255
    a230:	23 e0       	ldi	r18, 0x03	; 3
    a232:	60 e0       	ldi	r22, 0x00	; 0
    a234:	8a e0       	ldi	r24, 0x0A	; 10
    a236:	8c 0f       	add	r24, r28
    a238:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
	Print(x, 0, &strMap[strScore]);
    a23c:	d0 e0       	ldi	r29, 0x00	; 0
    a23e:	47 e9       	ldi	r20, 0x97	; 151
    a240:	52 e0       	ldi	r21, 0x02	; 2
    a242:	60 e0       	ldi	r22, 0x00	; 0
    a244:	70 e0       	ldi	r23, 0x00	; 0
    a246:	ce 01       	movw	r24, r28
    a248:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(x, 1, &strMap[strTotal]);
    a24c:	4e e9       	ldi	r20, 0x9E	; 158
    a24e:	52 e0       	ldi	r21, 0x02	; 2
    a250:	61 e0       	ldi	r22, 0x01	; 1
    a252:	70 e0       	ldi	r23, 0x00	; 0
    a254:	ce 01       	movw	r24, r28
	
}
    a256:	df 91       	pop	r29
    a258:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, &strMap[strScore]);
	Print(x, 1, &strMap[strTotal]);
    a25a:	0c 94 ea 4b 	jmp	0x97d4	; 0x97d4 <Print>

0000a25e <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    a25e:	0f 93       	push	r16
    a260:	1f 93       	push	r17
    a262:	cf 93       	push	r28
    a264:	df 93       	push	r29
    a266:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    a268:	c6 2f       	mov	r28, r22
    a26a:	d0 e0       	ldi	r29, 0x00	; 0
    a26c:	28 96       	adiw	r28, 0x08	; 8
    a26e:	20 e0       	ldi	r18, 0x00	; 0
    a270:	fc 01       	movw	r30, r24
    a272:	40 89       	ldd	r20, Z+16	; 0x10
    a274:	60 e0       	ldi	r22, 0x00	; 0
    a276:	70 e0       	ldi	r23, 0x00	; 0
    a278:	ce 01       	movw	r24, r28
    a27a:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    a27e:	20 e0       	ldi	r18, 0x00	; 0
    a280:	f8 01       	movw	r30, r16
    a282:	47 85       	ldd	r20, Z+15	; 0x0f
    a284:	61 e0       	ldi	r22, 0x01	; 1
    a286:	70 e0       	ldi	r23, 0x00	; 0
    a288:	ce 01       	movw	r24, r28
}
    a28a:	df 91       	pop	r29
    a28c:	cf 91       	pop	r28
    a28e:	1f 91       	pop	r17
    a290:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    a292:	0c 94 b7 4b 	jmp	0x976e	; 0x976e <PrintByte>

0000a296 <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    a296:	cf 93       	push	r28
    a298:	df 93       	push	r29
    a29a:	ec 01       	movw	r28, r24
    a29c:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    a29e:	9d 89       	ldd	r25, Y+21	; 0x15
    a2a0:	9a 35       	cpi	r25, 0x5A	; 90
    a2a2:	99 f0       	breq	.+38     	; 0xa2ca <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    a2a4:	91 11       	cpse	r25, r1
    a2a6:	0c c0       	rjmp	.+24     	; 0xa2c0 <render_banter+0x2a>
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
    a2a8:	4e 89       	ldd	r20, Y+22	; 0x16
    a2aa:	9f e0       	ldi	r25, 0x0F	; 15
    a2ac:	49 9f       	mul	r20, r25
    a2ae:	a0 01       	movw	r20, r0
    a2b0:	11 24       	eor	r1, r1
    a2b2:	4e 50       	subi	r20, 0x0E	; 14
    a2b4:	5e 4f       	sbci	r21, 0xFE	; 254
    a2b6:	62 e0       	ldi	r22, 0x02	; 2
    a2b8:	70 e0       	ldi	r23, 0x00	; 0
    a2ba:	90 e0       	ldi	r25, 0x00	; 0
    a2bc:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    a2c0:	8d 89       	ldd	r24, Y+21	; 0x15
    a2c2:	8f 5f       	subi	r24, 0xFF	; 255
    a2c4:	8d 8b       	std	Y+21, r24	; 0x15
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &strMap[banter_map+player->banter_index*15]);
		}
		clear_banter = 1;
    a2c6:	41 e0       	ldi	r20, 0x01	; 1
    a2c8:	0a c0       	rjmp	.+20     	; 0xa2de <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    a2ca:	44 23       	and	r20, r20
    a2cc:	41 f0       	breq	.+16     	; 0xa2de <render_banter+0x48>
	{
		Print(banter_x, 2, &strMap[strBanterClear]);
    a2ce:	48 e8       	ldi	r20, 0x88	; 136
    a2d0:	52 e0       	ldi	r21, 0x02	; 2
    a2d2:	62 e0       	ldi	r22, 0x02	; 2
    a2d4:	70 e0       	ldi	r23, 0x00	; 0
    a2d6:	90 e0       	ldi	r25, 0x00	; 0
    a2d8:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    a2dc:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    a2de:	84 2f       	mov	r24, r20
    a2e0:	df 91       	pop	r29
    a2e2:	cf 91       	pop	r28
    a2e4:	08 95       	ret

0000a2e6 <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    a2e6:	ef 92       	push	r14
    a2e8:	ff 92       	push	r15
    a2ea:	0f 93       	push	r16
    a2ec:	1f 93       	push	r17
    a2ee:	cf 93       	push	r28
    a2f0:	df 93       	push	r29
    a2f2:	1f 92       	push	r1
    a2f4:	cd b7       	in	r28, 0x3d	; 61
    a2f6:	de b7       	in	r29, 0x3e	; 62
    a2f8:	7c 01       	movw	r14, r24
    a2fa:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    a2fc:	fc 01       	movw	r30, r24
    a2fe:	67 81       	ldd	r22, Z+7	; 0x07
    a300:	70 85       	ldd	r23, Z+8	; 0x08
    a302:	81 85       	ldd	r24, Z+9	; 0x09
    a304:	92 85       	ldd	r25, Z+10	; 0x0a
    a306:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a30a:	46 2f       	mov	r20, r22
    a30c:	f7 01       	movw	r30, r14
    a30e:	63 81       	ldd	r22, Z+3	; 0x03
    a310:	74 81       	ldd	r23, Z+4	; 0x04
    a312:	85 81       	ldd	r24, Z+5	; 0x05
    a314:	96 81       	ldd	r25, Z+6	; 0x06
    a316:	49 83       	std	Y+1, r20	; 0x01
    a318:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a31c:	02 e0       	ldi	r16, 0x02	; 2
    a31e:	22 e0       	ldi	r18, 0x02	; 2
    a320:	49 81       	ldd	r20, Y+1	; 0x01
    a322:	81 2f       	mov	r24, r17
    a324:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
}
    a328:	0f 90       	pop	r0
    a32a:	df 91       	pop	r29
    a32c:	cf 91       	pop	r28
    a32e:	1f 91       	pop	r17
    a330:	0f 91       	pop	r16
    a332:	ff 90       	pop	r15
    a334:	ef 90       	pop	r14
    a336:	08 95       	ret

0000a338 <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    a338:	ef 92       	push	r14
    a33a:	ff 92       	push	r15
    a33c:	0f 93       	push	r16
    a33e:	1f 93       	push	r17
    a340:	cf 93       	push	r28
    a342:	df 93       	push	r29
    a344:	1f 92       	push	r1
    a346:	cd b7       	in	r28, 0x3d	; 61
    a348:	de b7       	in	r29, 0x3e	; 62
    a34a:	fc 01       	movw	r30, r24
	if (player->active_shots > 0)
    a34c:	81 89       	ldd	r24, Z+17	; 0x11
    a34e:	88 23       	and	r24, r24
    a350:	b9 f0       	breq	.+46     	; 0xa380 <render_shot+0x48>
    a352:	16 2f       	mov	r17, r22
    a354:	7f 01       	movw	r14, r30
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    a356:	63 a9       	ldd	r22, Z+51	; 0x33
    a358:	74 a9       	ldd	r23, Z+52	; 0x34
    a35a:	85 a9       	ldd	r24, Z+53	; 0x35
    a35c:	96 a9       	ldd	r25, Z+54	; 0x36
    a35e:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a362:	46 2f       	mov	r20, r22
    a364:	f7 01       	movw	r30, r14
    a366:	67 a5       	ldd	r22, Z+47	; 0x2f
    a368:	70 a9       	ldd	r23, Z+48	; 0x30
    a36a:	81 a9       	ldd	r24, Z+49	; 0x31
    a36c:	92 a9       	ldd	r25, Z+50	; 0x32
    a36e:	49 83       	std	Y+1, r20	; 0x01
    a370:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a374:	01 e0       	ldi	r16, 0x01	; 1
    a376:	21 e0       	ldi	r18, 0x01	; 1
    a378:	49 81       	ldd	r20, Y+1	; 0x01
    a37a:	81 2f       	mov	r24, r17
    a37c:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
			sprite_index++;
		}
	}
}
    a380:	0f 90       	pop	r0
    a382:	df 91       	pop	r29
    a384:	cf 91       	pop	r28
    a386:	1f 91       	pop	r17
    a388:	0f 91       	pop	r16
    a38a:	ff 90       	pop	r15
    a38c:	ef 90       	pop	r14
    a38e:	08 95       	ret

0000a390 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    a390:	cf 92       	push	r12
    a392:	df 92       	push	r13
    a394:	ef 92       	push	r14
    a396:	ff 92       	push	r15
    a398:	0f 93       	push	r16
    a39a:	1f 93       	push	r17
    a39c:	cf 93       	push	r28
    a39e:	df 93       	push	r29
    a3a0:	1f 92       	push	r1
    a3a2:	cd b7       	in	r28, 0x3d	; 61
    a3a4:	de b7       	in	r29, 0x3e	; 62
    a3a6:	8c 01       	movw	r16, r24
    a3a8:	0f 5f       	subi	r16, 0xFF	; 255
    a3aa:	1f 4f       	sbci	r17, 0xFF	; 255
    a3ac:	7c 01       	movw	r14, r24
    a3ae:	29 e1       	ldi	r18, 0x19	; 25
    a3b0:	e2 0e       	add	r14, r18
    a3b2:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    a3b4:	8e e1       	ldi	r24, 0x1E	; 30
    a3b6:	c8 2e       	mov	r12, r24
    a3b8:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    a3ba:	f8 01       	movw	r30, r16
    a3bc:	82 85       	ldd	r24, Z+10	; 0x0a
    a3be:	93 85       	ldd	r25, Z+11	; 0x0b
    a3c0:	89 2b       	or	r24, r25
    a3c2:	e1 f0       	breq	.+56     	; 0xa3fc <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    a3c4:	be 01       	movw	r22, r28
    a3c6:	6f 5f       	subi	r22, 0xFF	; 255
    a3c8:	7f 4f       	sbci	r23, 0xFF	; 255
    a3ca:	c8 01       	movw	r24, r16
    a3cc:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a3d0:	9c 01       	movw	r18, r24
			if (looped)
    a3d2:	49 81       	ldd	r20, Y+1	; 0x01
    a3d4:	f8 01       	movw	r30, r16
    a3d6:	82 85       	ldd	r24, Z+10	; 0x0a
    a3d8:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a3da:	b6 01       	movw	r22, r12
    a3dc:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    a3e0:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    a3e2:	44 23       	and	r20, r20
    a3e4:	41 f0       	breq	.+16     	; 0xa3f6 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    a3e6:	40 e0       	ldi	r20, 0x00	; 0
    a3e8:	50 e0       	ldi	r21, 0x00	; 0
    a3ea:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
				ta->anims[i].tile_index = 0;
    a3ee:	f8 01       	movw	r30, r16
    a3f0:	13 86       	std	Z+11, r1	; 0x0b
    a3f2:	12 86       	std	Z+10, r1	; 0x0a
    a3f4:	03 c0       	rjmp	.+6      	; 0xa3fc <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    a3f6:	a9 01       	movw	r20, r18
    a3f8:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
    a3fc:	04 5f       	subi	r16, 0xF4	; 244
    a3fe:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    a400:	0e 15       	cp	r16, r14
    a402:	1f 05       	cpc	r17, r15
    a404:	d1 f6       	brne	.-76     	; 0xa3ba <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    a406:	0f 90       	pop	r0
    a408:	df 91       	pop	r29
    a40a:	cf 91       	pop	r28
    a40c:	1f 91       	pop	r17
    a40e:	0f 91       	pop	r16
    a410:	ff 90       	pop	r15
    a412:	ef 90       	pop	r14
    a414:	df 90       	pop	r13
    a416:	cf 90       	pop	r12
    a418:	08 95       	ret

0000a41a <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    a41a:	ff 92       	push	r15
    a41c:	0f 93       	push	r16
    a41e:	1f 93       	push	r17
    a420:	cf 93       	push	r28
    a422:	df 93       	push	r29
    a424:	1f 92       	push	r1
    a426:	cd b7       	in	r28, 0x3d	; 61
    a428:	de b7       	in	r29, 0x3e	; 62
    a42a:	8c 01       	movw	r16, r24
    a42c:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    a42e:	fc 01       	movw	r30, r24
    a430:	84 89       	ldd	r24, Z+20	; 0x14
    a432:	80 ff       	sbrs	r24, 0
    a434:	18 c0       	rjmp	.+48     	; 0xa466 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    a436:	be 01       	movw	r22, r28
    a438:	6f 5f       	subi	r22, 0xFF	; 255
    a43a:	7f 4f       	sbci	r23, 0xFF	; 255
    a43c:	c8 01       	movw	r24, r16
    a43e:	8c 59       	subi	r24, 0x9C	; 156
    a440:	9f 4f       	sbci	r25, 0xFF	; 255
    a442:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    a446:	29 81       	ldd	r18, Y+1	; 0x01
    a448:	22 23       	and	r18, r18
    a44a:	09 f4       	brne	.+2      	; 0xa44e <tank_map+0x34>
    a44c:	5a c0       	rjmp	.+180    	; 0xa502 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    a44e:	f8 01       	movw	r30, r16
    a450:	84 89       	ldd	r24, Z+20	; 0x14
    a452:	91 e0       	ldi	r25, 0x01	; 1
    a454:	98 27       	eor	r25, r24
    a456:	94 8b       	std	Z+20, r25	; 0x14
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    a458:	c8 01       	movw	r24, r16
    a45a:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    a45e:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    a460:	81 e7       	ldi	r24, 0x71	; 113
    a462:	91 e3       	ldi	r25, 0x31	; 49
    a464:	4f c0       	rjmp	.+158    	; 0xa504 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    a466:	f8 01       	movw	r30, r16
    a468:	97 89       	ldd	r25, Z+23	; 0x17
    a46a:	98 37       	cpi	r25, 0x78	; 120
    a46c:	11 f0       	breq	.+4      	; 0xa472 <tank_map+0x58>
		{
			player->grace_frame++;
    a46e:	9f 5f       	subi	r25, 0xFF	; 255
    a470:	97 8b       	std	Z+23, r25	; 0x17
		}
		switch (player->shared.direction)
    a472:	f8 01       	movw	r30, r16
    a474:	90 81       	ld	r25, Z
    a476:	91 30       	cpi	r25, 0x01	; 1
    a478:	79 f0       	breq	.+30     	; 0xa498 <tank_map+0x7e>
    a47a:	f8 f0       	brcs	.+62     	; 0xa4ba <tank_map+0xa0>
    a47c:	92 30       	cpi	r25, 0x02	; 2
    a47e:	99 f0       	breq	.+38     	; 0xa4a6 <tank_map+0x8c>
    a480:	93 30       	cpi	r25, 0x03	; 3
    a482:	d9 f4       	brne	.+54     	; 0xa4ba <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    a484:	be 01       	movw	r22, r28
    a486:	6f 5f       	subi	r22, 0xFF	; 255
    a488:	7f 4f       	sbci	r23, 0xFF	; 255
    a48a:	c8 01       	movw	r24, r16
    a48c:	86 5a       	subi	r24, 0xA6	; 166
    a48e:	9f 4f       	sbci	r25, 0xFF	; 255
    a490:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a494:	41 e0       	ldi	r20, 0x01	; 1
    a496:	1a c0       	rjmp	.+52     	; 0xa4cc <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    a498:	be 01       	movw	r22, r28
    a49a:	6f 5f       	subi	r22, 0xFF	; 255
    a49c:	7f 4f       	sbci	r23, 0xFF	; 255
    a49e:	c8 01       	movw	r24, r16
    a4a0:	86 5a       	subi	r24, 0xA6	; 166
    a4a2:	9f 4f       	sbci	r25, 0xFF	; 255
    a4a4:	10 c0       	rjmp	.+32     	; 0xa4c6 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    a4a6:	be 01       	movw	r22, r28
    a4a8:	6f 5f       	subi	r22, 0xFF	; 255
    a4aa:	7f 4f       	sbci	r23, 0xFF	; 255
    a4ac:	c8 01       	movw	r24, r16
    a4ae:	80 5b       	subi	r24, 0xB0	; 176
    a4b0:	9f 4f       	sbci	r25, 0xFF	; 255
    a4b2:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a4b6:	42 e0       	ldi	r20, 0x02	; 2
    a4b8:	09 c0       	rjmp	.+18     	; 0xa4cc <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    a4ba:	be 01       	movw	r22, r28
    a4bc:	6f 5f       	subi	r22, 0xFF	; 255
    a4be:	7f 4f       	sbci	r23, 0xFF	; 255
    a4c0:	c8 01       	movw	r24, r16
    a4c2:	80 5b       	subi	r24, 0xB0	; 176
    a4c4:	9f 4f       	sbci	r25, 0xFF	; 255
    a4c6:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a4ca:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    a4cc:	f8 01       	movw	r30, r16
    a4ce:	27 89       	ldd	r18, Z+23	; 0x17
    a4d0:	28 37       	cpi	r18, 0x78	; 120
    a4d2:	31 f0       	breq	.+12     	; 0xa4e0 <tank_map+0xc6>
    a4d4:	20 91 34 0b 	lds	r18, 0x0B34
    a4d8:	22 23       	and	r18, r18
    a4da:	11 f0       	breq	.+4      	; 0xa4e0 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    a4dc:	81 e7       	ldi	r24, 0x71	; 113
    a4de:	91 e3       	ldi	r25, 0x31	; 49
		}
		toggle_counter--;
    a4e0:	20 91 03 01 	lds	r18, 0x0103
    a4e4:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    a4e6:	19 f0       	breq	.+6      	; 0xa4ee <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    a4e8:	20 93 03 01 	sts	0x0103, r18
    a4ec:	0b c0       	rjmp	.+22     	; 0xa504 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    a4ee:	24 e1       	ldi	r18, 0x14	; 20
    a4f0:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    a4f4:	30 91 34 0b 	lds	r19, 0x0B34
    a4f8:	21 e0       	ldi	r18, 0x01	; 1
    a4fa:	23 27       	eor	r18, r19
    a4fc:	20 93 34 0b 	sts	0x0B34, r18
    a500:	01 c0       	rjmp	.+2      	; 0xa504 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    a502:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    a504:	bc 01       	movw	r22, r24
    a506:	8f 2d       	mov	r24, r15
    a508:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    a50c:	84 e0       	ldi	r24, 0x04	; 4
    a50e:	8f 0d       	add	r24, r15
    a510:	0f 90       	pop	r0
    a512:	df 91       	pop	r29
    a514:	cf 91       	pop	r28
    a516:	1f 91       	pop	r17
    a518:	0f 91       	pop	r16
    a51a:	ff 90       	pop	r15
    a51c:	08 95       	ret

0000a51e <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    a51e:	1f 93       	push	r17
    a520:	cf 93       	push	r28
    a522:	df 93       	push	r29
    a524:	1f 92       	push	r1
    a526:	cd b7       	in	r28, 0x3d	; 61
    a528:	de b7       	in	r29, 0x3e	; 62
    a52a:	16 2f       	mov	r17, r22
	char looped = 0;
    a52c:	19 82       	std	Y+1, r1	; 0x01
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    a52e:	fc 01       	movw	r30, r24
    a530:	22 ad       	ldd	r18, Z+58	; 0x3a
    a532:	22 23       	and	r18, r18
    a534:	39 f1       	breq	.+78     	; 0xa584 <shot_map+0x66>
		{
			switch (shot->shared.direction)
    a536:	24 a5       	ldd	r18, Z+44	; 0x2c
    a538:	21 30       	cpi	r18, 0x01	; 1
    a53a:	71 f0       	breq	.+28     	; 0xa558 <shot_map+0x3a>
    a53c:	f0 f0       	brcs	.+60     	; 0xa57a <shot_map+0x5c>
    a53e:	22 30       	cpi	r18, 0x02	; 2
    a540:	a1 f0       	breq	.+40     	; 0xa56a <shot_map+0x4c>
    a542:	23 30       	cpi	r18, 0x03	; 3
    a544:	d1 f4       	brne	.+52     	; 0xa57a <shot_map+0x5c>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    a546:	be 01       	movw	r22, r28
    a548:	6f 5f       	subi	r22, 0xFF	; 255
    a54a:	7f 4f       	sbci	r23, 0xFF	; 255
    a54c:	8a 5b       	subi	r24, 0xBA	; 186
    a54e:	9f 4f       	sbci	r25, 0xFF	; 255
    a550:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a554:	41 e0       	ldi	r20, 0x01	; 1
    a556:	19 c0       	rjmp	.+50     	; 0xa58a <shot_map+0x6c>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    a558:	be 01       	movw	r22, r28
    a55a:	6f 5f       	subi	r22, 0xFF	; 255
    a55c:	7f 4f       	sbci	r23, 0xFF	; 255
    a55e:	8a 5b       	subi	r24, 0xBA	; 186
    a560:	9f 4f       	sbci	r25, 0xFF	; 255
    a562:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a566:	40 e0       	ldi	r20, 0x00	; 0
    a568:	10 c0       	rjmp	.+32     	; 0xa58a <shot_map+0x6c>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    a56a:	be 01       	movw	r22, r28
    a56c:	6f 5f       	subi	r22, 0xFF	; 255
    a56e:	7f 4f       	sbci	r23, 0xFF	; 255
    a570:	cc 96       	adiw	r24, 0x3c	; 60
    a572:	0e 94 6e 4c 	call	0x98dc	; 0x98dc <LBGetNextFrame>
    a576:	42 e0       	ldi	r20, 0x02	; 2
    a578:	08 c0       	rjmp	.+16     	; 0xa58a <shot_map+0x6c>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    a57a:	be 01       	movw	r22, r28
    a57c:	6f 5f       	subi	r22, 0xFF	; 255
    a57e:	7f 4f       	sbci	r23, 0xFF	; 255
    a580:	cc 96       	adiw	r24, 0x3c	; 60
    a582:	ef cf       	rjmp	.-34     	; 0xa562 <shot_map+0x44>
    a584:	40 e0       	ldi	r20, 0x00	; 0
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    a586:	81 e7       	ldi	r24, 0x71	; 113
    a588:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    a58a:	bc 01       	movw	r22, r24
    a58c:	81 2f       	mov	r24, r17
    a58e:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
		sprite_index++;
	}
	return sprite_index;
}
    a592:	81 e0       	ldi	r24, 0x01	; 1
    a594:	81 0f       	add	r24, r17
    a596:	0f 90       	pop	r0
    a598:	df 91       	pop	r29
    a59a:	cf 91       	pop	r28
    a59c:	1f 91       	pop	r17
    a59e:	08 95       	ret

0000a5a0 <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    a5a0:	cf 93       	push	r28
    a5a2:	df 93       	push	r29
    a5a4:	ec 01       	movw	r28, r24
	u8 tile;
	
	if (sprite->direction == D_UP)
    a5a6:	88 81       	ld	r24, Y
    a5a8:	81 11       	cpse	r24, r1
    a5aa:	0b c0       	rjmp	.+22     	; 0xa5c2 <recoil_sprite+0x22>
	{
		tile = ((u8) sprite->y / 8) + 1;
    a5ac:	6f 81       	ldd	r22, Y+7	; 0x07
    a5ae:	78 85       	ldd	r23, Y+8	; 0x08
    a5b0:	89 85       	ldd	r24, Y+9	; 0x09
    a5b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a5b4:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a5b8:	66 95       	lsr	r22
    a5ba:	66 95       	lsr	r22
    a5bc:	66 95       	lsr	r22
    a5be:	6f 5f       	subi	r22, 0xFF	; 255
    a5c0:	1d c0       	rjmp	.+58     	; 0xa5fc <recoil_sprite+0x5c>
		sprite->y = tile * 8;
	}
	else if (sprite->direction == D_RIGHT)
    a5c2:	81 30       	cpi	r24, 0x01	; 1
    a5c4:	69 f4       	brne	.+26     	; 0xa5e0 <recoil_sprite+0x40>
	{
		tile = sprite->x / 8;
    a5c6:	20 e0       	ldi	r18, 0x00	; 0
    a5c8:	30 e0       	ldi	r19, 0x00	; 0
    a5ca:	40 e0       	ldi	r20, 0x00	; 0
    a5cc:	5e e3       	ldi	r21, 0x3E	; 62
    a5ce:	6b 81       	ldd	r22, Y+3	; 0x03
    a5d0:	7c 81       	ldd	r23, Y+4	; 0x04
    a5d2:	8d 81       	ldd	r24, Y+5	; 0x05
    a5d4:	9e 81       	ldd	r25, Y+6	; 0x06
    a5d6:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a5da:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a5de:	27 c0       	rjmp	.+78     	; 0xa62e <recoil_sprite+0x8e>
		sprite->x = tile * 8;
	}
	else if (sprite->direction == D_DOWN)
    a5e0:	82 30       	cpi	r24, 0x02	; 2
    a5e2:	d9 f4       	brne	.+54     	; 0xa61a <recoil_sprite+0x7a>
	{
		tile = sprite->y / 8;
    a5e4:	20 e0       	ldi	r18, 0x00	; 0
    a5e6:	30 e0       	ldi	r19, 0x00	; 0
    a5e8:	40 e0       	ldi	r20, 0x00	; 0
    a5ea:	5e e3       	ldi	r21, 0x3E	; 62
    a5ec:	6f 81       	ldd	r22, Y+7	; 0x07
    a5ee:	78 85       	ldd	r23, Y+8	; 0x08
    a5f0:	89 85       	ldd	r24, Y+9	; 0x09
    a5f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    a5f4:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a5f8:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
		sprite->y = tile * 8;
    a5fc:	88 e0       	ldi	r24, 0x08	; 8
    a5fe:	68 9f       	mul	r22, r24
    a600:	b0 01       	movw	r22, r0
    a602:	11 24       	eor	r1, r1
    a604:	88 27       	eor	r24, r24
    a606:	77 fd       	sbrc	r23, 7
    a608:	80 95       	com	r24
    a60a:	98 2f       	mov	r25, r24
    a60c:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a610:	6f 83       	std	Y+7, r22	; 0x07
    a612:	78 87       	std	Y+8, r23	; 0x08
    a614:	89 87       	std	Y+9, r24	; 0x09
    a616:	9a 87       	std	Y+10, r25	; 0x0a
    a618:	18 c0       	rjmp	.+48     	; 0xa64a <recoil_sprite+0xaa>
	}
	else
	{
		tile = ((u8) sprite->x / 8) + 1;
    a61a:	6b 81       	ldd	r22, Y+3	; 0x03
    a61c:	7c 81       	ldd	r23, Y+4	; 0x04
    a61e:	8d 81       	ldd	r24, Y+5	; 0x05
    a620:	9e 81       	ldd	r25, Y+6	; 0x06
    a622:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a626:	66 95       	lsr	r22
    a628:	66 95       	lsr	r22
    a62a:	66 95       	lsr	r22
    a62c:	6f 5f       	subi	r22, 0xFF	; 255
		sprite->x = tile * 8;
    a62e:	88 e0       	ldi	r24, 0x08	; 8
    a630:	68 9f       	mul	r22, r24
    a632:	b0 01       	movw	r22, r0
    a634:	11 24       	eor	r1, r1
    a636:	88 27       	eor	r24, r24
    a638:	77 fd       	sbrc	r23, 7
    a63a:	80 95       	com	r24
    a63c:	98 2f       	mov	r25, r24
    a63e:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a642:	6b 83       	std	Y+3, r22	; 0x03
    a644:	7c 83       	std	Y+4, r23	; 0x04
    a646:	8d 83       	std	Y+5, r24	; 0x05
    a648:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a64a:	81 e0       	ldi	r24, 0x01	; 1
    a64c:	8a 83       	std	Y+2, r24	; 0x02
}
    a64e:	df 91       	pop	r29
    a650:	cf 91       	pop	r28
    a652:	08 95       	ret

0000a654 <recoil_sprite_fine>:

void recoil_sprite_fine(SpriteShared* sprite)
{	
    a654:	cf 93       	push	r28
    a656:	df 93       	push	r29
    a658:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    a65a:	88 81       	ld	r24, Y
    a65c:	69 81       	ldd	r22, Y+1	; 0x01
	{
		sprite->y += FRAME_TIME * sprite->speed;
    a65e:	70 e0       	ldi	r23, 0x00	; 0
	sprite->recoiled = 1;
}

void recoil_sprite_fine(SpriteShared* sprite)
{	
	if (sprite->direction == D_UP)
    a660:	81 11       	cpse	r24, r1
    a662:	13 c0       	rjmp	.+38     	; 0xa68a <recoil_sprite_fine+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    a664:	80 e0       	ldi	r24, 0x00	; 0
    a666:	90 e0       	ldi	r25, 0x00	; 0
    a668:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a66c:	25 e6       	ldi	r18, 0x65	; 101
    a66e:	38 e8       	ldi	r19, 0x88	; 136
    a670:	48 e8       	ldi	r20, 0x88	; 136
    a672:	5c e3       	ldi	r21, 0x3C	; 60
    a674:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a678:	9b 01       	movw	r18, r22
    a67a:	ac 01       	movw	r20, r24
    a67c:	6f 81       	ldd	r22, Y+7	; 0x07
    a67e:	78 85       	ldd	r23, Y+8	; 0x08
    a680:	89 85       	ldd	r24, Y+9	; 0x09
    a682:	9a 85       	ldd	r25, Y+10	; 0x0a
    a684:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a688:	29 c0       	rjmp	.+82     	; 0xa6dc <recoil_sprite_fine+0x88>
	}
	else if (sprite->direction == D_RIGHT)
    a68a:	81 30       	cpi	r24, 0x01	; 1
    a68c:	99 f4       	brne	.+38     	; 0xa6b4 <recoil_sprite_fine+0x60>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    a68e:	80 e0       	ldi	r24, 0x00	; 0
    a690:	90 e0       	ldi	r25, 0x00	; 0
    a692:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a696:	25 e6       	ldi	r18, 0x65	; 101
    a698:	38 e8       	ldi	r19, 0x88	; 136
    a69a:	48 e8       	ldi	r20, 0x88	; 136
    a69c:	5c e3       	ldi	r21, 0x3C	; 60
    a69e:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a6a2:	9b 01       	movw	r18, r22
    a6a4:	ac 01       	movw	r20, r24
    a6a6:	6b 81       	ldd	r22, Y+3	; 0x03
    a6a8:	7c 81       	ldd	r23, Y+4	; 0x04
    a6aa:	8d 81       	ldd	r24, Y+5	; 0x05
    a6ac:	9e 81       	ldd	r25, Y+6	; 0x06
    a6ae:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    a6b2:	2b c0       	rjmp	.+86     	; 0xa70a <recoil_sprite_fine+0xb6>
	}
	else if (sprite->direction == D_DOWN)
    a6b4:	82 30       	cpi	r24, 0x02	; 2
    a6b6:	b9 f4       	brne	.+46     	; 0xa6e6 <recoil_sprite_fine+0x92>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    a6b8:	80 e0       	ldi	r24, 0x00	; 0
    a6ba:	90 e0       	ldi	r25, 0x00	; 0
    a6bc:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a6c0:	25 e6       	ldi	r18, 0x65	; 101
    a6c2:	38 e8       	ldi	r19, 0x88	; 136
    a6c4:	48 e8       	ldi	r20, 0x88	; 136
    a6c6:	5c e3       	ldi	r21, 0x3C	; 60
    a6c8:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a6cc:	9b 01       	movw	r18, r22
    a6ce:	ac 01       	movw	r20, r24
    a6d0:	6f 81       	ldd	r22, Y+7	; 0x07
    a6d2:	78 85       	ldd	r23, Y+8	; 0x08
    a6d4:	89 85       	ldd	r24, Y+9	; 0x09
    a6d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    a6d8:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    a6dc:	6f 83       	std	Y+7, r22	; 0x07
    a6de:	78 87       	std	Y+8, r23	; 0x08
    a6e0:	89 87       	std	Y+9, r24	; 0x09
    a6e2:	9a 87       	std	Y+10, r25	; 0x0a
    a6e4:	16 c0       	rjmp	.+44     	; 0xa712 <recoil_sprite_fine+0xbe>
	}
	else
	{
		sprite->x += FRAME_TIME * sprite->speed;
    a6e6:	80 e0       	ldi	r24, 0x00	; 0
    a6e8:	90 e0       	ldi	r25, 0x00	; 0
    a6ea:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    a6ee:	25 e6       	ldi	r18, 0x65	; 101
    a6f0:	38 e8       	ldi	r19, 0x88	; 136
    a6f2:	48 e8       	ldi	r20, 0x88	; 136
    a6f4:	5c e3       	ldi	r21, 0x3C	; 60
    a6f6:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    a6fa:	9b 01       	movw	r18, r22
    a6fc:	ac 01       	movw	r20, r24
    a6fe:	6b 81       	ldd	r22, Y+3	; 0x03
    a700:	7c 81       	ldd	r23, Y+4	; 0x04
    a702:	8d 81       	ldd	r24, Y+5	; 0x05
    a704:	9e 81       	ldd	r25, Y+6	; 0x06
    a706:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a70a:	6b 83       	std	Y+3, r22	; 0x03
    a70c:	7c 83       	std	Y+4, r23	; 0x04
    a70e:	8d 83       	std	Y+5, r24	; 0x05
    a710:	9e 83       	std	Y+6, r25	; 0x06
	}
	sprite->recoiled = 1;
    a712:	81 e0       	ldi	r24, 0x01	; 1
    a714:	8a 83       	std	Y+2, r24	; 0x02
}
    a716:	df 91       	pop	r29
    a718:	cf 91       	pop	r28
    a71a:	08 95       	ret

0000a71c <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a71c:	86 56       	subi	r24, 0x66	; 102
    a71e:	93 4f       	sbci	r25, 0xF3	; 243
    a720:	fc 01       	movw	r30, r24
    a722:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a724:	81 30       	cpi	r24, 0x01	; 1
    a726:	21 f0       	breq	.+8      	; 0xa730 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    a728:	82 30       	cpi	r24, 0x02	; 2
    a72a:	21 f0       	breq	.+8      	; 0xa734 <solid_square_tile+0x18>

	return 0;
    a72c:	80 e0       	ldi	r24, 0x00	; 0
    a72e:	08 95       	ret
    a730:	81 e0       	ldi	r24, 0x01	; 1
    a732:	08 95       	ret
    a734:	82 e0       	ldi	r24, 0x02	; 2
}
    a736:	08 95       	ret

0000a738 <solid_tile>:

u8 solid_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a738:	86 56       	subi	r24, 0x66	; 102
    a73a:	93 4f       	sbci	r25, 0xF3	; 243
    a73c:	fc 01       	movw	r30, r24
    a73e:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    a740:	81 30       	cpi	r24, 0x01	; 1
    a742:	61 f0       	breq	.+24     	; 0xa75c <solid_tile+0x24>
	if (tile == L_METAL) return tile;
    a744:	82 30       	cpi	r24, 0x02	; 2
    a746:	61 f0       	breq	.+24     	; 0xa760 <solid_tile+0x28>
	if (tile == L_TL) return tile;
    a748:	83 30       	cpi	r24, 0x03	; 3
    a74a:	61 f0       	breq	.+24     	; 0xa764 <solid_tile+0x2c>
	if (tile == L_BR) return tile;
    a74c:	86 30       	cpi	r24, 0x06	; 6
    a74e:	61 f0       	breq	.+24     	; 0xa768 <solid_tile+0x30>
	if (tile == L_TR) return tile;
    a750:	84 30       	cpi	r24, 0x04	; 4
    a752:	61 f0       	breq	.+24     	; 0xa76c <solid_tile+0x34>
	if (tile == L_BL) return tile;
    a754:	85 30       	cpi	r24, 0x05	; 5
    a756:	61 f0       	breq	.+24     	; 0xa770 <solid_tile+0x38>

	return 0;
    a758:	80 e0       	ldi	r24, 0x00	; 0
    a75a:	08 95       	ret
    a75c:	81 e0       	ldi	r24, 0x01	; 1
    a75e:	08 95       	ret
    a760:	82 e0       	ldi	r24, 0x02	; 2
    a762:	08 95       	ret
    a764:	83 e0       	ldi	r24, 0x03	; 3
    a766:	08 95       	ret
    a768:	86 e0       	ldi	r24, 0x06	; 6
    a76a:	08 95       	ret
    a76c:	84 e0       	ldi	r24, 0x04	; 4
    a76e:	08 95       	ret
    a770:	85 e0       	ldi	r24, 0x05	; 5
}
    a772:	08 95       	ret

0000a774 <solid_directional_tile>:

u8 solid_directional_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    a774:	86 56       	subi	r24, 0x66	; 102
    a776:	93 4f       	sbci	r25, 0xF3	; 243
    a778:	fc 01       	movw	r30, r24
    a77a:	81 81       	ldd	r24, Z+1	; 0x01

	if (tile == L_TL) return tile;
    a77c:	83 30       	cpi	r24, 0x03	; 3
    a77e:	41 f0       	breq	.+16     	; 0xa790 <solid_directional_tile+0x1c>
	if (tile == L_BR) return tile;
    a780:	86 30       	cpi	r24, 0x06	; 6
    a782:	41 f0       	breq	.+16     	; 0xa794 <solid_directional_tile+0x20>
	if (tile == L_TR) return tile;
    a784:	84 30       	cpi	r24, 0x04	; 4
    a786:	41 f0       	breq	.+16     	; 0xa798 <solid_directional_tile+0x24>
	if (tile == L_BL) return tile;
    a788:	85 30       	cpi	r24, 0x05	; 5
    a78a:	41 f0       	breq	.+16     	; 0xa79c <solid_directional_tile+0x28>
	
	return 0;
    a78c:	80 e0       	ldi	r24, 0x00	; 0
    a78e:	08 95       	ret
    a790:	83 e0       	ldi	r24, 0x03	; 3
    a792:	08 95       	ret
    a794:	86 e0       	ldi	r24, 0x06	; 6
    a796:	08 95       	ret
    a798:	84 e0       	ldi	r24, 0x04	; 4
    a79a:	08 95       	ret
    a79c:	85 e0       	ldi	r24, 0x05	; 5
}
    a79e:	08 95       	ret

0000a7a0 <collides_directional_tile>:

u8 collides_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    a7a0:	7f 92       	push	r7
    a7a2:	8f 92       	push	r8
    a7a4:	9f 92       	push	r9
    a7a6:	af 92       	push	r10
    a7a8:	bf 92       	push	r11
    a7aa:	cf 92       	push	r12
    a7ac:	df 92       	push	r13
    a7ae:	ef 92       	push	r14
    a7b0:	ff 92       	push	r15
    a7b2:	0f 93       	push	r16
    a7b4:	1f 93       	push	r17
    a7b6:	cf 93       	push	r28
    a7b8:	df 93       	push	r29
    a7ba:	b6 2e       	mov	r11, r22
    a7bc:	94 2e       	mov	r9, r20
    a7be:	d2 2f       	mov	r29, r18
	u8 tile = level.level_map[tile_index];
    a7c0:	fc 01       	movw	r30, r24
    a7c2:	e6 56       	subi	r30, 0x66	; 102
    a7c4:	f3 4f       	sbci	r31, 0xF3	; 243
    a7c6:	d1 80       	ldd	r13, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    a7c8:	6e e1       	ldi	r22, 0x1E	; 30
    a7ca:	70 e0       	ldi	r23, 0x00	; 0
    a7cc:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    a7d0:	f8 2e       	mov	r15, r24
    a7d2:	ff 0c       	add	r15, r15
    a7d4:	ff 0c       	add	r15, r15
    a7d6:	ff 0c       	add	r15, r15
	u8 tile_y = (tile_index / 30 + 3) * 8;
    a7d8:	6d 5f       	subi	r22, 0xFD	; 253
    a7da:	7f 4f       	sbci	r23, 0xFF	; 255
    a7dc:	16 2f       	mov	r17, r22
    a7de:	11 0f       	add	r17, r17
    a7e0:	11 0f       	add	r17, r17
    a7e2:	11 0f       	add	r17, r17

	if ((tile == L_TL) || (tile == L_BR))
    a7e4:	83 e0       	ldi	r24, 0x03	; 3
    a7e6:	d8 16       	cp	r13, r24
    a7e8:	19 f0       	breq	.+6      	; 0xa7f0 <collides_directional_tile+0x50>
    a7ea:	86 e0       	ldi	r24, 0x06	; 6
    a7ec:	d8 12       	cpse	r13, r24
    a7ee:	31 c0       	rjmp	.+98     	; 0xa852 <collides_directional_tile+0xb2>
    a7f0:	cf ef       	ldi	r28, 0xFF	; 255
    a7f2:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height-1)) return tile;
    a7f4:	c9 0d       	add	r28, r9
    a7f6:	27 e0       	ldi	r18, 0x07	; 7
    a7f8:	72 2e       	mov	r7, r18
    a7fa:	7f 0c       	add	r7, r15
    a7fc:	37 e0       	ldi	r19, 0x07	; 7
    a7fe:	83 2e       	mov	r8, r19
    a800:	81 0e       	add	r8, r17
    a802:	ac 2e       	mov	r10, r28
    a804:	cb 2c       	mov	r12, r11
    a806:	e9 2c       	mov	r14, r9
    a808:	0b 2d       	mov	r16, r11
    a80a:	21 2f       	mov	r18, r17
    a80c:	47 2d       	mov	r20, r7
    a80e:	68 2d       	mov	r22, r8
    a810:	8f 2d       	mov	r24, r15
    a812:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a816:	81 11       	cpse	r24, r1
    a818:	58 c0       	rjmp	.+176    	; 0xa8ca <collides_directional_tile+0x12a>
    a81a:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width-1, y)) return tile;
    a81c:	db 0d       	add	r29, r11
    a81e:	a9 2c       	mov	r10, r9
    a820:	cd 2e       	mov	r12, r29
    a822:	21 2f       	mov	r18, r17
    a824:	47 2d       	mov	r20, r7
    a826:	68 2d       	mov	r22, r8
    a828:	8f 2d       	mov	r24, r15
    a82a:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a82e:	81 11       	cpse	r24, r1
    a830:	4c c0       	rjmp	.+152    	; 0xa8ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width-1, y, x+width-1, y+height-1)) return tile;
    a832:	ac 2e       	mov	r10, r28
    a834:	0d 2f       	mov	r16, r29
    a836:	21 2f       	mov	r18, r17
    a838:	47 2d       	mov	r20, r7
    a83a:	68 2d       	mov	r22, r8
    a83c:	8f 2d       	mov	r24, r15
    a83e:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a842:	81 11       	cpse	r24, r1
    a844:	42 c0       	rjmp	.+132    	; 0xa8ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height-1, x+width-1, y+height-1)) return tile;
    a846:	ec 2e       	mov	r14, r28
    a848:	0b 2d       	mov	r16, r11
    a84a:	21 2f       	mov	r18, r17
    a84c:	47 2d       	mov	r20, r7
    a84e:	68 2d       	mov	r22, r8
    a850:	34 c0       	rjmp	.+104    	; 0xa8ba <collides_directional_tile+0x11a>
	}
	else if ((tile == L_TR) || (tile == L_BL))
    a852:	8c ef       	ldi	r24, 0xFC	; 252
    a854:	8d 0d       	add	r24, r13
    a856:	82 30       	cpi	r24, 0x02	; 2
    a858:	b0 f5       	brcc	.+108    	; 0xa8c6 <collides_directional_tile+0x126>
    a85a:	cf ef       	ldi	r28, 0xFF	; 255
    a85c:	c0 0f       	add	r28, r16
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height-1)) return tile;
    a85e:	c4 0f       	add	r28, r20
    a860:	87 e0       	ldi	r24, 0x07	; 7
    a862:	78 2e       	mov	r7, r24
    a864:	71 0e       	add	r7, r17
    a866:	97 e0       	ldi	r25, 0x07	; 7
    a868:	89 2e       	mov	r8, r25
    a86a:	8f 0c       	add	r8, r15
    a86c:	ac 2e       	mov	r10, r28
    a86e:	cb 2c       	mov	r12, r11
    a870:	e4 2e       	mov	r14, r20
    a872:	0b 2d       	mov	r16, r11
    a874:	27 2d       	mov	r18, r7
    a876:	48 2d       	mov	r20, r8
    a878:	61 2f       	mov	r22, r17
    a87a:	8f 2d       	mov	r24, r15
    a87c:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a880:	81 11       	cpse	r24, r1
    a882:	23 c0       	rjmp	.+70     	; 0xa8ca <collides_directional_tile+0x12a>
    a884:	d1 50       	subi	r29, 0x01	; 1
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width-1, y)) return tile;
    a886:	db 0d       	add	r29, r11
    a888:	a9 2c       	mov	r10, r9
    a88a:	cd 2e       	mov	r12, r29
    a88c:	27 2d       	mov	r18, r7
    a88e:	48 2d       	mov	r20, r8
    a890:	61 2f       	mov	r22, r17
    a892:	8f 2d       	mov	r24, r15
    a894:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a898:	81 11       	cpse	r24, r1
    a89a:	17 c0       	rjmp	.+46     	; 0xa8ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width-1, y, x+width-1, y+height-1)) return tile;
    a89c:	ac 2e       	mov	r10, r28
    a89e:	0d 2f       	mov	r16, r29
    a8a0:	27 2d       	mov	r18, r7
    a8a2:	48 2d       	mov	r20, r8
    a8a4:	61 2f       	mov	r22, r17
    a8a6:	8f 2d       	mov	r24, r15
    a8a8:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a8ac:	81 11       	cpse	r24, r1
    a8ae:	0d c0       	rjmp	.+26     	; 0xa8ca <collides_directional_tile+0x12a>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height-1, x+width-1, y+height-1)) return tile;
    a8b0:	ec 2e       	mov	r14, r28
    a8b2:	0b 2d       	mov	r16, r11
    a8b4:	27 2d       	mov	r18, r7
    a8b6:	48 2d       	mov	r20, r8
    a8b8:	61 2f       	mov	r22, r17
    a8ba:	8f 2d       	mov	r24, r15
    a8bc:	0e 94 43 4d 	call	0x9a86	; 0x9a86 <LBLineIntersect>
    a8c0:	81 11       	cpse	r24, r1
    a8c2:	03 c0       	rjmp	.+6      	; 0xa8ca <collides_directional_tile+0x12a>
    a8c4:	03 c0       	rjmp	.+6      	; 0xa8cc <collides_directional_tile+0x12c>
	}
	
	return 0;
    a8c6:	80 e0       	ldi	r24, 0x00	; 0
    a8c8:	01 c0       	rjmp	.+2      	; 0xa8cc <collides_directional_tile+0x12c>
    a8ca:	8d 2d       	mov	r24, r13
}
    a8cc:	df 91       	pop	r29
    a8ce:	cf 91       	pop	r28
    a8d0:	1f 91       	pop	r17
    a8d2:	0f 91       	pop	r16
    a8d4:	ff 90       	pop	r15
    a8d6:	ef 90       	pop	r14
    a8d8:	df 90       	pop	r13
    a8da:	cf 90       	pop	r12
    a8dc:	bf 90       	pop	r11
    a8de:	af 90       	pop	r10
    a8e0:	9f 90       	pop	r9
    a8e2:	8f 90       	pop	r8
    a8e4:	7f 90       	pop	r7
    a8e6:	08 95       	ret

0000a8e8 <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    a8e8:	8f 92       	push	r8
    a8ea:	9f 92       	push	r9
    a8ec:	af 92       	push	r10
    a8ee:	cf 92       	push	r12
    a8f0:	ef 92       	push	r14
    a8f2:	0f 93       	push	r16
    a8f4:	1f 93       	push	r17
    a8f6:	cf 93       	push	r28
    a8f8:	df 93       	push	r29
    a8fa:	4c 01       	movw	r8, r24
    a8fc:	eb 01       	movw	r28, r22
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a8fe:	20 e0       	ldi	r18, 0x00	; 0
    a900:	30 e0       	ldi	r19, 0x00	; 0
    a902:	40 e0       	ldi	r20, 0x00	; 0
    a904:	50 e4       	ldi	r21, 0x40	; 64
    a906:	6f 81       	ldd	r22, Y+7	; 0x07
    a908:	78 85       	ldd	r23, Y+8	; 0x08
    a90a:	89 85       	ldd	r24, Y+9	; 0x09
    a90c:	9a 85       	ldd	r25, Y+10	; 0x0a
    a90e:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a912:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a916:	e6 2e       	mov	r14, r22
    a918:	20 e0       	ldi	r18, 0x00	; 0
    a91a:	30 e0       	ldi	r19, 0x00	; 0
    a91c:	40 e0       	ldi	r20, 0x00	; 0
    a91e:	50 e4       	ldi	r21, 0x40	; 64
    a920:	6b 81       	ldd	r22, Y+3	; 0x03
    a922:	7c 81       	ldd	r23, Y+4	; 0x04
    a924:	8d 81       	ldd	r24, Y+5	; 0x05
    a926:	9e 81       	ldd	r25, Y+6	; 0x06
    a928:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a92c:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a930:	06 2f       	mov	r16, r22
    a932:	20 e0       	ldi	r18, 0x00	; 0
    a934:	30 e0       	ldi	r19, 0x00	; 0
    a936:	40 e8       	ldi	r20, 0x80	; 128
    a938:	5f e3       	ldi	r21, 0x3F	; 63
    a93a:	f4 01       	movw	r30, r8
    a93c:	67 81       	ldd	r22, Z+7	; 0x07
    a93e:	70 85       	ldd	r23, Z+8	; 0x08
    a940:	81 85       	ldd	r24, Z+9	; 0x09
    a942:	92 85       	ldd	r25, Z+10	; 0x0a
    a944:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a948:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a94c:	16 2f       	mov	r17, r22
    a94e:	20 e0       	ldi	r18, 0x00	; 0
    a950:	30 e0       	ldi	r19, 0x00	; 0
    a952:	40 e8       	ldi	r20, 0x80	; 128
    a954:	5f e3       	ldi	r21, 0x3F	; 63
    a956:	f4 01       	movw	r30, r8
    a958:	63 81       	ldd	r22, Z+3	; 0x03
    a95a:	74 81       	ldd	r23, Z+4	; 0x04
    a95c:	85 81       	ldd	r24, Z+5	; 0x05
    a95e:	96 81       	ldd	r25, Z+6	; 0x06
    a960:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a964:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    a968:	86 2f       	mov	r24, r22
    a96a:	94 e0       	ldi	r25, 0x04	; 4
    a96c:	a9 2e       	mov	r10, r25
    a96e:	24 e0       	ldi	r18, 0x04	; 4
    a970:	c2 2e       	mov	r12, r18
    a972:	2e e0       	ldi	r18, 0x0E	; 14
    a974:	4e e0       	ldi	r20, 0x0E	; 14
    a976:	61 2f       	mov	r22, r17
    a978:	0e 94 19 4d 	call	0x9a32	; 0x9a32 <LBCollides>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a97c:	88 23       	and	r24, r24
    a97e:	41 f0       	breq	.+16     	; 0xa990 <player_shot+0xa8>
	return 0;
}

u8 player_shot(Player* p, Shot* shot)
{
	return LBCollides(p->shared.x+1,p->shared.y+1,14,14,shot->shared.x+2,shot->shared.y+2,4,4) &&
    a980:	f4 01       	movw	r30, r8
    a982:	87 89       	ldd	r24, Z+23	; 0x17
    a984:	88 37       	cpi	r24, 0x78	; 120
    a986:	21 f4       	brne	.+8      	; 0xa990 <player_shot+0xa8>
		   p->grace_frame == FRAMES_PER_GRACE &&
    a988:	81 e0       	ldi	r24, 0x01	; 1
    a98a:	9f 85       	ldd	r25, Y+15	; 0x0f
    a98c:	99 30       	cpi	r25, 0x09	; 9
    a98e:	08 f4       	brcc	.+2      	; 0xa992 <player_shot+0xaa>
    a990:	80 e0       	ldi	r24, 0x00	; 0
		   shot->distance > DISTANCE_TO_ARM;
}
    a992:	df 91       	pop	r29
    a994:	cf 91       	pop	r28
    a996:	1f 91       	pop	r17
    a998:	0f 91       	pop	r16
    a99a:	ef 90       	pop	r14
    a99c:	cf 90       	pop	r12
    a99e:	af 90       	pop	r10
    a9a0:	9f 90       	pop	r9
    a9a2:	8f 90       	pop	r8
    a9a4:	08 95       	ret

0000a9a6 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    a9a6:	cf 92       	push	r12
    a9a8:	df 92       	push	r13
    a9aa:	ef 92       	push	r14
    a9ac:	ff 92       	push	r15
    a9ae:	cf 93       	push	r28
    a9b0:	df 93       	push	r29
    a9b2:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a9b4:	cb 80       	ldd	r12, Y+3	; 0x03
    a9b6:	dc 80       	ldd	r13, Y+4	; 0x04
    a9b8:	ed 80       	ldd	r14, Y+5	; 0x05
    a9ba:	fe 80       	ldd	r15, Y+6	; 0x06
    a9bc:	20 e0       	ldi	r18, 0x00	; 0
    a9be:	30 e0       	ldi	r19, 0x00	; 0
    a9c0:	a9 01       	movw	r20, r18
    a9c2:	c7 01       	movw	r24, r14
    a9c4:	b6 01       	movw	r22, r12
    a9c6:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    a9ca:	87 fd       	sbrc	r24, 7
    a9cc:	31 c0       	rjmp	.+98     	; 0xaa30 <collision_detect_boundries+0x8a>
    a9ce:	20 e0       	ldi	r18, 0x00	; 0
    a9d0:	30 e0       	ldi	r19, 0x00	; 0
    a9d2:	40 e0       	ldi	r20, 0x00	; 0
    a9d4:	51 e4       	ldi	r21, 0x41	; 65
    a9d6:	c7 01       	movw	r24, r14
    a9d8:	b6 01       	movw	r22, r12
    a9da:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    a9de:	20 e0       	ldi	r18, 0x00	; 0
    a9e0:	30 e0       	ldi	r19, 0x00	; 0
    a9e2:	40 e7       	ldi	r20, 0x70	; 112
    a9e4:	53 e4       	ldi	r21, 0x43	; 67
    a9e6:	0e 94 44 67 	call	0xce88	; 0xce88 <__gesf2>
    a9ea:	18 16       	cp	r1, r24
    a9ec:	0c f1       	brlt	.+66     	; 0xaa30 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    a9ee:	cf 80       	ldd	r12, Y+7	; 0x07
    a9f0:	d8 84       	ldd	r13, Y+8	; 0x08
    a9f2:	e9 84       	ldd	r14, Y+9	; 0x09
    a9f4:	fa 84       	ldd	r15, Y+10	; 0x0a
		   shot->distance > DISTANCE_TO_ARM;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 8 > 240 ||
    a9f6:	20 e0       	ldi	r18, 0x00	; 0
    a9f8:	30 e0       	ldi	r19, 0x00	; 0
    a9fa:	40 ec       	ldi	r20, 0xC0	; 192
    a9fc:	51 e4       	ldi	r21, 0x41	; 65
    a9fe:	c7 01       	movw	r24, r14
    aa00:	b6 01       	movw	r22, r12
    aa02:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    aa06:	87 fd       	sbrc	r24, 7
    aa08:	13 c0       	rjmp	.+38     	; 0xaa30 <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 8 > 224)
    aa0a:	20 e0       	ldi	r18, 0x00	; 0
    aa0c:	30 e0       	ldi	r19, 0x00	; 0
    aa0e:	40 e0       	ldi	r20, 0x00	; 0
    aa10:	51 e4       	ldi	r21, 0x41	; 65
    aa12:	c7 01       	movw	r24, r14
    aa14:	b6 01       	movw	r22, r12
    aa16:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    aa1a:	c1 e0       	ldi	r28, 0x01	; 1
    aa1c:	20 e0       	ldi	r18, 0x00	; 0
    aa1e:	30 e0       	ldi	r19, 0x00	; 0
    aa20:	40 e6       	ldi	r20, 0x60	; 96
    aa22:	53 e4       	ldi	r21, 0x43	; 67
    aa24:	0e 94 44 67 	call	0xce88	; 0xce88 <__gesf2>
    aa28:	18 16       	cp	r1, r24
    aa2a:	1c f0       	brlt	.+6      	; 0xaa32 <collision_detect_boundries+0x8c>
    aa2c:	c0 e0       	ldi	r28, 0x00	; 0
    aa2e:	01 c0       	rjmp	.+2      	; 0xaa32 <collision_detect_boundries+0x8c>
	{
		return 1;
    aa30:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    aa32:	8c 2f       	mov	r24, r28
    aa34:	df 91       	pop	r29
    aa36:	cf 91       	pop	r28
    aa38:	ff 90       	pop	r15
    aa3a:	ef 90       	pop	r14
    aa3c:	df 90       	pop	r13
    aa3e:	cf 90       	pop	r12
    aa40:	08 95       	ret

0000aa42 <drop_item>:

void drop_item(int tile_index, const char* map, u8 item_type)
{
    aa42:	ef 92       	push	r14
    aa44:	ff 92       	push	r15
    aa46:	0f 93       	push	r16
    aa48:	1f 93       	push	r17
    aa4a:	cf 93       	push	r28
    aa4c:	9b 01       	movw	r18, r22
    aa4e:	c4 2f       	mov	r28, r20
	if (level.level_map[tile_index] == L_EMPTY)
    aa50:	8c 01       	movw	r16, r24
    aa52:	06 56       	subi	r16, 0x66	; 102
    aa54:	13 4f       	sbci	r17, 0xF3	; 243
    aa56:	f8 01       	movw	r30, r16
    aa58:	41 81       	ldd	r20, Z+1	; 0x01
    aa5a:	41 11       	cpse	r20, r1
    aa5c:	0a c0       	rjmp	.+20     	; 0xaa72 <drop_item+0x30>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30, map);
    aa5e:	6e e1       	ldi	r22, 0x1E	; 30
    aa60:	70 e0       	ldi	r23, 0x00	; 0
    aa62:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    aa66:	6d 5f       	subi	r22, 0xFD	; 253
    aa68:	a9 01       	movw	r20, r18
    aa6a:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
		level.level_map[tile_index] = item_type;
    aa6e:	f8 01       	movw	r30, r16
    aa70:	21 c0       	rjmp	.+66     	; 0xaab4 <drop_item+0x72>
	}
	else if (level.level_map[tile_index+1] == L_EMPTY)
    aa72:	ac 01       	movw	r20, r24
    aa74:	45 56       	subi	r20, 0x65	; 101
    aa76:	53 4f       	sbci	r21, 0xF3	; 243
    aa78:	7a 01       	movw	r14, r20
    aa7a:	fa 01       	movw	r30, r20
    aa7c:	41 81       	ldd	r20, Z+1	; 0x01
    aa7e:	41 11       	cpse	r20, r1
    aa80:	08 c0       	rjmp	.+16     	; 0xaa92 <drop_item+0x50>
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
    aa82:	6e e1       	ldi	r22, 0x1E	; 30
    aa84:	70 e0       	ldi	r23, 0x00	; 0
    aa86:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    aa8a:	6d 5f       	subi	r22, 0xFD	; 253
    aa8c:	a9 01       	movw	r20, r18
    aa8e:	8f 5f       	subi	r24, 0xFF	; 255
    aa90:	0e c0       	rjmp	.+28     	; 0xaaae <drop_item+0x6c>
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aa92:	ac 01       	movw	r20, r24
    aa94:	48 54       	subi	r20, 0x48	; 72
    aa96:	53 4f       	sbci	r21, 0xF3	; 243
    aa98:	7a 01       	movw	r14, r20
    aa9a:	fa 01       	movw	r30, r20
    aa9c:	41 81       	ldd	r20, Z+1	; 0x01
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    aa9e:	6e e1       	ldi	r22, 0x1E	; 30
    aaa0:	70 e0       	ldi	r23, 0x00	; 0
    aaa2:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    aaa6:	6c 5f       	subi	r22, 0xFC	; 252
	else if (level.level_map[tile_index+1] == L_EMPTY)
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30, map);
		level.level_map[tile_index+1] = item_type;
	}
	else if (level.level_map[tile_index+30] == L_EMPTY)
    aaa8:	41 11       	cpse	r20, r1
    aaaa:	06 c0       	rjmp	.+12     	; 0xaab8 <drop_item+0x76>
	{
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map);
    aaac:	a9 01       	movw	r20, r18
    aaae:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
		level.level_map[tile_index+30] = item_type;
    aab2:	f7 01       	movw	r30, r14
    aab4:	c1 83       	std	Z+1, r28	; 0x01
    aab6:	06 c0       	rjmp	.+12     	; 0xaac4 <drop_item+0x82>
	}
	else
	{
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map);
    aab8:	a9 01       	movw	r20, r18
    aaba:	8f 5f       	subi	r24, 0xFF	; 255
    aabc:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
		level.level_map[tile_index+31] = item_type;
    aac0:	f8 01       	movw	r30, r16
    aac2:	c0 a3       	std	Z+32, r28	; 0x20
	}
}
    aac4:	cf 91       	pop	r28
    aac6:	1f 91       	pop	r17
    aac8:	0f 91       	pop	r16
    aaca:	ff 90       	pop	r15
    aacc:	ef 90       	pop	r14
    aace:	08 95       	ret

0000aad0 <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    aad0:	ff 92       	push	r15
    aad2:	0f 93       	push	r16
    aad4:	1f 93       	push	r17
    aad6:	cf 93       	push	r28
    aad8:	df 93       	push	r29
    aada:	ec 01       	movw	r28, r24
    aadc:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    aade:	20 e0       	ldi	r18, 0x00	; 0
    aae0:	30 e0       	ldi	r19, 0x00	; 0
    aae2:	40 e0       	ldi	r20, 0x00	; 0
    aae4:	5e e3       	ldi	r21, 0x3E	; 62
    aae6:	6f 81       	ldd	r22, Y+7	; 0x07
    aae8:	78 85       	ldd	r23, Y+8	; 0x08
    aaea:	89 85       	ldd	r24, Y+9	; 0x09
    aaec:	9a 85       	ldd	r25, Y+10	; 0x0a
    aaee:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    aaf2:	20 e0       	ldi	r18, 0x00	; 0
    aaf4:	30 e0       	ldi	r19, 0x00	; 0
    aaf6:	40 e4       	ldi	r20, 0x40	; 64
    aaf8:	50 e4       	ldi	r21, 0x40	; 64
    aafa:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    aafe:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
	int tile_index = (y * 30) + x;
    ab02:	8e e1       	ldi	r24, 0x1E	; 30
    ab04:	68 9f       	mul	r22, r24
    ab06:	80 01       	movw	r16, r0
    ab08:	11 24       	eor	r1, r1
	}
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    ab0a:	20 e0       	ldi	r18, 0x00	; 0
    ab0c:	30 e0       	ldi	r19, 0x00	; 0
    ab0e:	40 e0       	ldi	r20, 0x00	; 0
    ab10:	5e e3       	ldi	r21, 0x3E	; 62
    ab12:	6b 81       	ldd	r22, Y+3	; 0x03
    ab14:	7c 81       	ldd	r23, Y+4	; 0x04
    ab16:	8d 81       	ldd	r24, Y+5	; 0x05
    ab18:	9e 81       	ldd	r25, Y+6	; 0x06
    ab1a:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    ab1e:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    ab22:	06 0f       	add	r16, r22
    ab24:	11 1d       	adc	r17, r1

	if (player->has_over_speed)
    ab26:	8a 8d       	ldd	r24, Y+26	; 0x1a
    ab28:	88 23       	and	r24, r24
    ab2a:	79 f0       	breq	.+30     	; 0xab4a <kill_player+0x7a>
	{
		SetTile(hud_x+10, 1, 0);
    ab2c:	40 e0       	ldi	r20, 0x00	; 0
    ab2e:	50 e0       	ldi	r21, 0x00	; 0
    ab30:	61 e0       	ldi	r22, 0x01	; 1
    ab32:	8a e0       	ldi	r24, 0x0A	; 10
    ab34:	8f 0d       	add	r24, r15
    ab36:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
		drop_item(tile_index, map_speed_itm, L_SPEED);
    ab3a:	47 e0       	ldi	r20, 0x07	; 7
    ab3c:	64 e6       	ldi	r22, 0x64	; 100
    ab3e:	7d e5       	ldi	r23, 0x5D	; 93
    ab40:	c8 01       	movw	r24, r16
    ab42:	0e 94 21 55 	call	0xaa42	; 0xaa42 <drop_item>
		player->max_speed = MAX_SPEED;
    ab46:	82 e3       	ldi	r24, 0x32	; 50
    ab48:	88 8f       	std	Y+24, r24	; 0x18
	}
	if (player->has_rocket)
    ab4a:	89 8d       	ldd	r24, Y+25	; 0x19
    ab4c:	88 23       	and	r24, r24
    ab4e:	69 f0       	breq	.+26     	; 0xab6a <kill_player+0x9a>
	{
		SetTile(hud_x+11, 1, 0);
    ab50:	40 e0       	ldi	r20, 0x00	; 0
    ab52:	50 e0       	ldi	r21, 0x00	; 0
    ab54:	61 e0       	ldi	r22, 0x01	; 1
    ab56:	8b e0       	ldi	r24, 0x0B	; 11
    ab58:	8f 0d       	add	r24, r15
    ab5a:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
		drop_item(tile_index, map_rocket_itm, L_ROCKET);
    ab5e:	49 e0       	ldi	r20, 0x09	; 9
    ab60:	6e e5       	ldi	r22, 0x5E	; 94
    ab62:	7d e5       	ldi	r23, 0x5D	; 93
    ab64:	c8 01       	movw	r24, r16
    ab66:	0e 94 21 55 	call	0xaa42	; 0xaa42 <drop_item>
	}
	player->has_over_speed = false;
    ab6a:	1a 8e       	std	Y+26, r1	; 0x1a
	player->has_rocket = false;
    ab6c:	19 8e       	std	Y+25, r1	; 0x19
	player->flags = player->flags | EXPLODING_FLAG;
    ab6e:	8c 89       	ldd	r24, Y+20	; 0x14
    ab70:	81 60       	ori	r24, 0x01	; 1
    ab72:	8c 8b       	std	Y+20, r24	; 0x14
}
    ab74:	df 91       	pop	r29
    ab76:	cf 91       	pop	r28
    ab78:	1f 91       	pop	r17
    ab7a:	0f 91       	pop	r16
    ab7c:	ff 90       	pop	r15
    ab7e:	08 95       	ret

0000ab80 <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    ab80:	fc 01       	movw	r30, r24
    ab82:	8e e1       	ldi	r24, 0x1E	; 30
    ab84:	48 9f       	mul	r20, r24
    ab86:	a0 01       	movw	r20, r0
    ab88:	11 24       	eor	r1, r1
    ab8a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    ab8c:	64 0f       	add	r22, r20
    ab8e:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    ab90:	21 11       	cpse	r18, r1
    ab92:	05 c0       	rjmp	.+10     	; 0xab9e <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    ab94:	71 83       	std	Z+1, r23	; 0x01
    ab96:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    ab98:	6f 5f       	subi	r22, 0xFF	; 255
    ab9a:	7f 4f       	sbci	r23, 0xFF	; 255
    ab9c:	12 c0       	rjmp	.+36     	; 0xabc2 <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    ab9e:	21 30       	cpi	r18, 0x01	; 1
    aba0:	19 f4       	brne	.+6      	; 0xaba8 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    aba2:	cb 01       	movw	r24, r22
    aba4:	01 96       	adiw	r24, 0x01	; 1
    aba6:	04 c0       	rjmp	.+8      	; 0xabb0 <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    aba8:	22 30       	cpi	r18, 0x02	; 2
    abaa:	39 f4       	brne	.+14     	; 0xabba <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    abac:	cb 01       	movw	r24, r22
    abae:	4e 96       	adiw	r24, 0x1e	; 30
    abb0:	91 83       	std	Z+1, r25	; 0x01
    abb2:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    abb4:	61 5e       	subi	r22, 0xE1	; 225
    abb6:	7f 4f       	sbci	r23, 0xFF	; 255
    abb8:	04 c0       	rjmp	.+8      	; 0xabc2 <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    abba:	71 83       	std	Z+1, r23	; 0x01
    abbc:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    abbe:	62 5e       	subi	r22, 0xE2	; 226
    abc0:	7f 4f       	sbci	r23, 0xFF	; 255
    abc2:	73 83       	std	Z+3, r23	; 0x03
    abc4:	62 83       	std	Z+2, r22	; 0x02
    abc6:	08 95       	ret

0000abc8 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    abc8:	ef 92       	push	r14
    abca:	ff 92       	push	r15
    abcc:	0f 93       	push	r16
    abce:	1f 93       	push	r17
    abd0:	cf 93       	push	r28
    abd2:	df 93       	push	r29
    abd4:	ec 01       	movw	r28, r24
    abd6:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    abd8:	8e e1       	ldi	r24, 0x1E	; 30
    abda:	e8 2e       	mov	r14, r24
    abdc:	f1 2c       	mov	r15, r1
    abde:	cb 01       	movw	r24, r22
    abe0:	b7 01       	movw	r22, r14
    abe2:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    abe6:	6d 5f       	subi	r22, 0xFD	; 253
    abe8:	40 e0       	ldi	r20, 0x00	; 0
    abea:	50 e0       	ldi	r21, 0x00	; 0
    abec:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    abf0:	88 81       	ld	r24, Y
    abf2:	fe 01       	movw	r30, r28
    abf4:	9c e0       	ldi	r25, 0x0C	; 12
    abf6:	89 9f       	mul	r24, r25
    abf8:	e0 0d       	add	r30, r0
    abfa:	f1 1d       	adc	r31, r1
    abfc:	11 24       	eor	r1, r1
    abfe:	83 85       	ldd	r24, Z+11	; 0x0b
    ac00:	94 85       	ldd	r25, Z+12	; 0x0c
    ac02:	00 97       	sbiw	r24, 0x00	; 0
    ac04:	41 f0       	breq	.+16     	; 0xac16 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    ac06:	b7 01       	movw	r22, r14
    ac08:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    ac0c:	6d 5f       	subi	r22, 0xFD	; 253
    ac0e:	40 e0       	ldi	r20, 0x00	; 0
    ac10:	50 e0       	ldi	r21, 0x00	; 0
    ac12:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    ac16:	88 81       	ld	r24, Y
    ac18:	fe 01       	movw	r30, r28
    ac1a:	9c e0       	ldi	r25, 0x0C	; 12
    ac1c:	89 9f       	mul	r24, r25
    ac1e:	e0 0d       	add	r30, r0
    ac20:	f1 1d       	adc	r31, r1
    ac22:	11 24       	eor	r1, r1
    ac24:	14 87       	std	Z+12, r17	; 0x0c
    ac26:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    ac28:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    ac2a:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    ac2c:	82 30       	cpi	r24, 0x02	; 2
    ac2e:	11 f0       	breq	.+4      	; 0xac34 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    ac30:	88 83       	st	Y, r24
    ac32:	01 c0       	rjmp	.+2      	; 0xac36 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    ac34:	18 82       	st	Y, r1
	}
}
    ac36:	df 91       	pop	r29
    ac38:	cf 91       	pop	r28
    ac3a:	1f 91       	pop	r17
    ac3c:	0f 91       	pop	r16
    ac3e:	ff 90       	pop	r15
    ac40:	ef 90       	pop	r14
    ac42:	08 95       	ret

0000ac44 <richochet>:

void richochet(u8 tile_type, SpriteShared* sprite)
{	
    ac44:	fb 01       	movw	r30, r22
	switch (tile_type)
    ac46:	84 30       	cpi	r24, 0x04	; 4
    ac48:	71 f0       	breq	.+28     	; 0xac66 <richochet+0x22>
    ac4a:	18 f4       	brcc	.+6      	; 0xac52 <richochet+0xe>
    ac4c:	83 30       	cpi	r24, 0x03	; 3
    ac4e:	31 f0       	breq	.+12     	; 0xac5c <richochet+0x18>
    ac50:	08 95       	ret
    ac52:	85 30       	cpi	r24, 0x05	; 5
    ac54:	99 f0       	breq	.+38     	; 0xac7c <richochet+0x38>
    ac56:	86 30       	cpi	r24, 0x06	; 6
    ac58:	59 f0       	breq	.+22     	; 0xac70 <richochet+0x2c>
    ac5a:	08 95       	ret
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac5c:	80 81       	ld	r24, Z
    ac5e:	8d 7f       	andi	r24, 0xFD	; 253
    ac60:	29 f4       	brne	.+10     	; 0xac6c <richochet+0x28>
				sprite->direction = D_RIGHT;
    ac62:	81 e0       	ldi	r24, 0x01	; 1
    ac64:	09 c0       	rjmp	.+18     	; 0xac78 <richochet+0x34>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
    ac66:	80 81       	ld	r24, Z
    ac68:	8d 7f       	andi	r24, 0xFD	; 253
    ac6a:	29 f0       	breq	.+10     	; 0xac76 <richochet+0x32>
	{
		case L_TL:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_DOWN;
    ac6c:	82 e0       	ldi	r24, 0x02	; 2
    ac6e:	04 c0       	rjmp	.+8      	; 0xac78 <richochet+0x34>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
			break;
		case L_BR:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac70:	80 81       	ld	r24, Z
    ac72:	8d 7f       	andi	r24, 0xFD	; 253
    ac74:	31 f4       	brne	.+12     	; 0xac82 <richochet+0x3e>
			else
				sprite->direction = D_DOWN;
			break;
		case L_TR:
			if (sprite->direction == D_UP || sprite->direction == D_DOWN)
				sprite->direction = D_LEFT;
    ac76:	83 e0       	ldi	r24, 0x03	; 3
    ac78:	80 83       	st	Z, r24
    ac7a:	08 95       	ret
			else
				sprite->direction = D_DOWN;
			break;
		case L_BL:
			if (sprite->direction == D_DOWN || sprite->direction == D_UP)
    ac7c:	80 81       	ld	r24, Z
    ac7e:	8d 7f       	andi	r24, 0xFD	; 253
    ac80:	81 f3       	breq	.-32     	; 0xac62 <richochet+0x1e>
				sprite->direction = D_RIGHT;
			else
				sprite->direction = D_UP;
    ac82:	10 82       	st	Z, r1
    ac84:	08 95       	ret

0000ac86 <collision_detect_shot>:
			break;
	}
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
    ac86:	2f 92       	push	r2
    ac88:	3f 92       	push	r3
    ac8a:	4f 92       	push	r4
    ac8c:	5f 92       	push	r5
    ac8e:	6f 92       	push	r6
    ac90:	7f 92       	push	r7
    ac92:	8f 92       	push	r8
    ac94:	9f 92       	push	r9
    ac96:	af 92       	push	r10
    ac98:	bf 92       	push	r11
    ac9a:	cf 92       	push	r12
    ac9c:	df 92       	push	r13
    ac9e:	ef 92       	push	r14
    aca0:	ff 92       	push	r15
    aca2:	0f 93       	push	r16
    aca4:	1f 93       	push	r17
    aca6:	cf 93       	push	r28
    aca8:	df 93       	push	r29
    acaa:	00 d0       	rcall	.+0      	; 0xacac <collision_detect_shot+0x26>
    acac:	00 d0       	rcall	.+0      	; 0xacae <collision_detect_shot+0x28>
    acae:	1f 92       	push	r1
    acb0:	cd b7       	in	r28, 0x3d	; 61
    acb2:	de b7       	in	r29, 0x3e	; 62
    acb4:	3c 01       	movw	r6, r24
    acb6:	4b 01       	movw	r8, r22
	int tiles[2] = {0, 0};
    acb8:	1a 82       	std	Y+2, r1	; 0x02
    acba:	19 82       	std	Y+1, r1	; 0x01
    acbc:	1c 82       	std	Y+4, r1	; 0x04
    acbe:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    acc0:	20 e0       	ldi	r18, 0x00	; 0
    acc2:	30 e0       	ldi	r19, 0x00	; 0
    acc4:	40 e0       	ldi	r20, 0x00	; 0
    acc6:	5e e3       	ldi	r21, 0x3E	; 62
    acc8:	db 01       	movw	r26, r22
    acca:	17 96       	adiw	r26, 0x07	; 7
    accc:	6d 91       	ld	r22, X+
    acce:	7d 91       	ld	r23, X+
    acd0:	8d 91       	ld	r24, X+
    acd2:	9c 91       	ld	r25, X
    acd4:	1a 97       	sbiw	r26, 0x0a	; 10
    acd6:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    acda:	20 e0       	ldi	r18, 0x00	; 0
    acdc:	30 e0       	ldi	r19, 0x00	; 0
    acde:	40 e4       	ldi	r20, 0x40	; 64
    ace0:	50 e4       	ldi	r21, 0x40	; 64
    ace2:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    ace6:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    acea:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    acec:	20 e0       	ldi	r18, 0x00	; 0
    acee:	30 e0       	ldi	r19, 0x00	; 0
    acf0:	40 e0       	ldi	r20, 0x00	; 0
    acf2:	5e e3       	ldi	r21, 0x3E	; 62
    acf4:	f4 01       	movw	r30, r8
    acf6:	63 81       	ldd	r22, Z+3	; 0x03
    acf8:	74 81       	ldd	r23, Z+4	; 0x04
    acfa:	85 81       	ldd	r24, Z+5	; 0x05
    acfc:	96 81       	ldd	r25, Z+6	; 0x06
    acfe:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    ad02:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
	Player* p = 0;
    u8 hit = 0;
	u8 brick_index = 0;
	u8 angle_tile = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    ad06:	d4 01       	movw	r26, r8
    ad08:	2c 91       	ld	r18, X
    ad0a:	41 2f       	mov	r20, r17
    ad0c:	ce 01       	movw	r24, r28
    ad0e:	01 96       	adiw	r24, 0x01	; 1
    ad10:	0e 94 c0 55 	call	0xab80	; 0xab80 <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    ad14:	c4 01       	movw	r24, r8
    ad16:	0e 94 d3 54 	call	0xa9a6	; 0xa9a6 <collision_detect_boundries>
    ad1a:	88 23       	and	r24, r24
    ad1c:	69 f0       	breq	.+26     	; 0xad38 <collision_detect_shot+0xb2>
	{
		init_shot_state(shot, shot->shot_type);
    ad1e:	f4 01       	movw	r30, r8
    ad20:	63 85       	ldd	r22, Z+11	; 0x0b
    ad22:	c4 01       	movw	r24, r8
    ad24:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
		player->active_shots--;
    ad28:	d3 01       	movw	r26, r6
    ad2a:	51 96       	adiw	r26, 0x11	; 17
    ad2c:	8c 91       	ld	r24, X
    ad2e:	51 97       	sbiw	r26, 0x11	; 17
    ad30:	81 50       	subi	r24, 0x01	; 1
    ad32:	51 96       	adiw	r26, 0x11	; 17
    ad34:	8c 93       	st	X, r24
		return;
    ad36:	63 c1       	rjmp	.+710    	; 0xaffe <collision_detect_shot+0x378>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
    ad38:	b4 01       	movw	r22, r8
    ad3a:	85 e2       	ldi	r24, 0x25	; 37
    ad3c:	9c e0       	ldi	r25, 0x0C	; 12
    ad3e:	0e 94 74 54 	call	0xa8e8	; 0xa8e8 <player_shot>
    ad42:	88 23       	and	r24, r24
    ad44:	b9 f0       	breq	.+46     	; 0xad74 <collision_detect_shot+0xee>
    ad46:	80 91 39 0c 	lds	r24, 0x0C39
    ad4a:	80 fd       	sbrc	r24, 0
    ad4c:	13 c0       	rjmp	.+38     	; 0xad74 <collision_detect_shot+0xee>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    ad4e:	80 91 99 0f 	lds	r24, 0x0F99
    ad52:	8f 5f       	subi	r24, 0xFF	; 255
    ad54:	80 93 99 0f 	sts	0x0F99, r24
		player2.score++;
    ad58:	80 91 98 0f 	lds	r24, 0x0F98
    ad5c:	8f 5f       	subi	r24, 0xFF	; 255
    ad5e:	80 93 98 0f 	sts	0x0F98, r24
		render_score(&player2, 15);
    ad62:	6f e0       	ldi	r22, 0x0F	; 15
    ad64:	89 e8       	ldi	r24, 0x89	; 137
    ad66:	9f e0       	ldi	r25, 0x0F	; 15
    ad68:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot) && !(player1.flags & EXPLODING_FLAG))
	{
		p = &player1;
    ad6c:	05 e2       	ldi	r16, 0x25	; 37
    ad6e:	1c e0       	ldi	r17, 0x0C	; 12
		hud_x = 0;
    ad70:	f1 2c       	mov	r15, r1
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
    ad72:	29 c0       	rjmp	.+82     	; 0xadc6 <collision_detect_shot+0x140>
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    ad74:	b4 01       	movw	r22, r8
    ad76:	89 e8       	ldi	r24, 0x89	; 137
    ad78:	9f e0       	ldi	r25, 0x0F	; 15
    ad7a:	0e 94 74 54 	call	0xa8e8	; 0xa8e8 <player_shot>
    ad7e:	81 11       	cpse	r24, r1
    ad80:	0b c0       	rjmp	.+22     	; 0xad98 <collision_detect_shot+0x112>
    ad82:	fe 01       	movw	r30, r28
    ad84:	31 96       	adiw	r30, 0x01	; 1
    ad86:	2f 01       	movw	r4, r30
    ad88:	1d 82       	std	Y+5, r1	; 0x05
    ad8a:	f1 2c       	mov	r15, r1
    ad8c:	d1 2c       	mov	r13, r1
    ad8e:	10 e0       	ldi	r17, 0x00	; 0
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
		{
			hit = hit | HIT_BRICK;
			brick_index = i;
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    ad90:	6e e1       	ldi	r22, 0x1E	; 30
    ad92:	26 2e       	mov	r2, r22
    ad94:	31 2c       	mov	r3, r1
    ad96:	5e c0       	rjmp	.+188    	; 0xae54 <collision_detect_shot+0x1ce>
		hud_x = 0;
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
    ad98:	80 91 9d 0f 	lds	r24, 0x0F9D
    ad9c:	80 fd       	sbrc	r24, 0
    ad9e:	f1 cf       	rjmp	.-30     	; 0xad82 <collision_detect_shot+0xfc>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    ada0:	80 91 35 0c 	lds	r24, 0x0C35
    ada4:	8f 5f       	subi	r24, 0xFF	; 255
    ada6:	80 93 35 0c 	sts	0x0C35, r24
		player1.score++;
    adaa:	80 91 34 0c 	lds	r24, 0x0C34
    adae:	8f 5f       	subi	r24, 0xFF	; 255
    adb0:	80 93 34 0c 	sts	0x0C34, r24
		render_score(&player1, 0);
    adb4:	60 e0       	ldi	r22, 0x00	; 0
    adb6:	85 e2       	ldi	r24, 0x25	; 37
    adb8:	9c e0       	ldi	r25, 0x0C	; 12
    adba:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot) && !(player2.flags & EXPLODING_FLAG))
	{
		p = &player2;
    adbe:	09 e8       	ldi	r16, 0x89	; 137
    adc0:	1f e0       	ldi	r17, 0x0F	; 15
		hud_x = 15;
    adc2:	5f e0       	ldi	r21, 0x0F	; 15
    adc4:	f5 2e       	mov	r15, r21
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    adc6:	01 15       	cp	r16, r1
    adc8:	11 05       	cpc	r17, r1
    adca:	d9 f2       	breq	.-74     	; 0xad82 <collision_detect_shot+0xfc>
	{
		init_shot_state(shot, shot->shot_type);
    adcc:	d4 01       	movw	r26, r8
    adce:	1b 96       	adiw	r26, 0x0b	; 11
    add0:	6c 91       	ld	r22, X
    add2:	c4 01       	movw	r24, r8
    add4:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
		player->active_shots--;
    add8:	f3 01       	movw	r30, r6
    adda:	81 89       	ldd	r24, Z+17	; 0x11
    addc:	81 50       	subi	r24, 0x01	; 1
    adde:	81 8b       	std	Z+17, r24	; 0x11
		kill_player(p, hud_x);
    ade0:	6f 2d       	mov	r22, r15
    ade2:	c8 01       	movw	r24, r16
    ade4:	0e 94 68 55 	call	0xaad0	; 0xaad0 <kill_player>
		SFX_TANK_EXPLODE;
    ade8:	2f ef       	ldi	r18, 0xFF	; 255
    adea:	40 e1       	ldi	r20, 0x10	; 16
    adec:	6a e0       	ldi	r22, 0x0A	; 10
    adee:	04 c1       	rjmp	.+520    	; 0xaff8 <collision_detect_shot+0x372>
	for (u8 i = 0; i < 2; i++)
	{
		tile = level.level_map[tiles[i]];
		if (tile == L_EMPTY) continue;
		
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
    adf0:	c5 01       	movw	r24, r10
    adf2:	0e 94 ba 53 	call	0xa774	; 0xa774 <solid_directional_tile>
    adf6:	88 23       	and	r24, r24
    adf8:	c1 f1       	breq	.+112    	; 0xae6a <collision_detect_shot+0x1e4>
    adfa:	20 e0       	ldi	r18, 0x00	; 0
    adfc:	30 e0       	ldi	r19, 0x00	; 0
    adfe:	40 e0       	ldi	r20, 0x00	; 0
    ae00:	50 e4       	ldi	r21, 0x40	; 64
    ae02:	f4 01       	movw	r30, r8
    ae04:	67 81       	ldd	r22, Z+7	; 0x07
    ae06:	70 85       	ldd	r23, Z+8	; 0x08
    ae08:	81 85       	ldd	r24, Z+9	; 0x09
    ae0a:	92 85       	ldd	r25, Z+10	; 0x0a
    ae0c:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    ae10:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    ae14:	c6 2e       	mov	r12, r22
    ae16:	20 e0       	ldi	r18, 0x00	; 0
    ae18:	30 e0       	ldi	r19, 0x00	; 0
    ae1a:	40 e0       	ldi	r20, 0x00	; 0
    ae1c:	50 e4       	ldi	r21, 0x40	; 64
    ae1e:	d4 01       	movw	r26, r8
    ae20:	13 96       	adiw	r26, 0x03	; 3
    ae22:	6d 91       	ld	r22, X+
    ae24:	7d 91       	ld	r23, X+
    ae26:	8d 91       	ld	r24, X+
    ae28:	9c 91       	ld	r25, X
    ae2a:	16 97       	sbiw	r26, 0x06	; 6
    ae2c:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    ae30:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    ae34:	04 e0       	ldi	r16, 0x04	; 4
    ae36:	24 e0       	ldi	r18, 0x04	; 4
    ae38:	4c 2d       	mov	r20, r12
    ae3a:	c5 01       	movw	r24, r10
    ae3c:	0e 94 d0 53 	call	0xa7a0	; 0xa7a0 <collides_directional_tile>
    ae40:	88 23       	and	r24, r24
    ae42:	99 f0       	breq	.+38     	; 0xae6a <collision_detect_shot+0x1e4>
		{
			hit = hit | HIT_ANGLE;
    ae44:	14 60       	ori	r17, 0x04	; 4
			angle_tile = tile;
    ae46:	fe 2c       	mov	r15, r14
		SFX_TANK_EXPLODE;
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    ae48:	bd 81       	ldd	r27, Y+5	; 0x05
    ae4a:	b1 30       	cpi	r27, 0x01	; 1
    ae4c:	09 f4       	brne	.+2      	; 0xae50 <collision_detect_shot+0x1ca>
    ae4e:	88 c0       	rjmp	.+272    	; 0xaf60 <collision_detect_shot+0x2da>
    ae50:	f1 e0       	ldi	r31, 0x01	; 1
    ae52:	fd 83       	std	Y+5, r31	; 0x05
	{
		tile = level.level_map[tiles[i]];
    ae54:	d2 01       	movw	r26, r4
    ae56:	ad 90       	ld	r10, X+
    ae58:	bd 90       	ld	r11, X+
    ae5a:	2d 01       	movw	r4, r26
    ae5c:	f5 01       	movw	r30, r10
    ae5e:	e6 56       	subi	r30, 0x66	; 102
    ae60:	f3 4f       	sbci	r31, 0xF3	; 243
    ae62:	e1 80       	ldd	r14, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    ae64:	ee 20       	and	r14, r14
    ae66:	81 f3       	breq	.-32     	; 0xae48 <collision_detect_shot+0x1c2>
    ae68:	c3 cf       	rjmp	.-122    	; 0xadf0 <collision_detect_shot+0x16a>
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], shot->shared.x+2, shot->shared.y+2,4,4))
		{
			hit = hit | HIT_ANGLE;
			angle_tile = tile;
		}
		else if (tile == L_BRICK && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    ae6a:	b1 e0       	ldi	r27, 0x01	; 1
    ae6c:	eb 12       	cpse	r14, r27
    ae6e:	3b c0       	rjmp	.+118    	; 0xaee6 <collision_detect_shot+0x260>
    ae70:	c5 01       	movw	r24, r10
    ae72:	b1 01       	movw	r22, r2
    ae74:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    ae78:	6d 5f       	subi	r22, 0xFD	; 253
    ae7a:	7f 4f       	sbci	r23, 0xFF	; 255
    ae7c:	e6 2e       	mov	r14, r22
    ae7e:	ee 0c       	add	r14, r14
    ae80:	ee 0c       	add	r14, r14
    ae82:	ee 0c       	add	r14, r14
    ae84:	08 2f       	mov	r16, r24
    ae86:	00 0f       	add	r16, r16
    ae88:	00 0f       	add	r16, r16
    ae8a:	00 0f       	add	r16, r16
    ae8c:	20 e0       	ldi	r18, 0x00	; 0
    ae8e:	30 e0       	ldi	r19, 0x00	; 0
    ae90:	40 e0       	ldi	r20, 0x00	; 0
    ae92:	50 e4       	ldi	r21, 0x40	; 64
    ae94:	f4 01       	movw	r30, r8
    ae96:	67 81       	ldd	r22, Z+7	; 0x07
    ae98:	70 85       	ldd	r23, Z+8	; 0x08
    ae9a:	81 85       	ldd	r24, Z+9	; 0x09
    ae9c:	92 85       	ldd	r25, Z+10	; 0x0a
    ae9e:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    aea2:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    aea6:	b6 2e       	mov	r11, r22
    aea8:	20 e0       	ldi	r18, 0x00	; 0
    aeaa:	30 e0       	ldi	r19, 0x00	; 0
    aeac:	40 e0       	ldi	r20, 0x00	; 0
    aeae:	50 e4       	ldi	r21, 0x40	; 64
    aeb0:	d4 01       	movw	r26, r8
    aeb2:	13 96       	adiw	r26, 0x03	; 3
    aeb4:	6d 91       	ld	r22, X+
    aeb6:	7d 91       	ld	r23, X+
    aeb8:	8d 91       	ld	r24, X+
    aeba:	9c 91       	ld	r25, X
    aebc:	16 97       	sbiw	r26, 0x06	; 6
    aebe:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    aec2:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    aec6:	86 2f       	mov	r24, r22
    aec8:	38 e0       	ldi	r19, 0x08	; 8
    aeca:	a3 2e       	mov	r10, r19
    aecc:	48 e0       	ldi	r20, 0x08	; 8
    aece:	c4 2e       	mov	r12, r20
    aed0:	24 e0       	ldi	r18, 0x04	; 4
    aed2:	44 e0       	ldi	r20, 0x04	; 4
    aed4:	6b 2d       	mov	r22, r11
    aed6:	0e 94 19 4d 	call	0x9a32	; 0x9a32 <LBCollides>
    aeda:	88 23       	and	r24, r24
    aedc:	09 f4       	brne	.+2      	; 0xaee0 <collision_detect_shot+0x25a>
    aede:	b4 cf       	rjmp	.-152    	; 0xae48 <collision_detect_shot+0x1c2>
		{
			hit = hit | HIT_BRICK;
    aee0:	12 60       	ori	r17, 0x02	; 2
			brick_index = i;
    aee2:	dd 80       	ldd	r13, Y+5	; 0x05
    aee4:	b1 cf       	rjmp	.-158    	; 0xae48 <collision_detect_shot+0x1c2>
		}
		else if (tile == L_METAL && LBCollides(shot->shared.x+2,shot->shared.y+2,4,4,(tiles[i]%30)*8,(tiles[i]/30)*8+24,8,8))
    aee6:	b2 e0       	ldi	r27, 0x02	; 2
    aee8:	eb 12       	cpse	r14, r27
    aeea:	ae cf       	rjmp	.-164    	; 0xae48 <collision_detect_shot+0x1c2>
    aeec:	c5 01       	movw	r24, r10
    aeee:	b1 01       	movw	r22, r2
    aef0:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    aef4:	6d 5f       	subi	r22, 0xFD	; 253
    aef6:	7f 4f       	sbci	r23, 0xFF	; 255
    aef8:	e6 2e       	mov	r14, r22
    aefa:	ee 0c       	add	r14, r14
    aefc:	ee 0c       	add	r14, r14
    aefe:	ee 0c       	add	r14, r14
    af00:	08 2f       	mov	r16, r24
    af02:	00 0f       	add	r16, r16
    af04:	00 0f       	add	r16, r16
    af06:	00 0f       	add	r16, r16
    af08:	20 e0       	ldi	r18, 0x00	; 0
    af0a:	30 e0       	ldi	r19, 0x00	; 0
    af0c:	40 e0       	ldi	r20, 0x00	; 0
    af0e:	50 e4       	ldi	r21, 0x40	; 64
    af10:	f4 01       	movw	r30, r8
    af12:	67 81       	ldd	r22, Z+7	; 0x07
    af14:	70 85       	ldd	r23, Z+8	; 0x08
    af16:	81 85       	ldd	r24, Z+9	; 0x09
    af18:	92 85       	ldd	r25, Z+10	; 0x0a
    af1a:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    af1e:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    af22:	b6 2e       	mov	r11, r22
    af24:	20 e0       	ldi	r18, 0x00	; 0
    af26:	30 e0       	ldi	r19, 0x00	; 0
    af28:	40 e0       	ldi	r20, 0x00	; 0
    af2a:	50 e4       	ldi	r21, 0x40	; 64
    af2c:	d4 01       	movw	r26, r8
    af2e:	13 96       	adiw	r26, 0x03	; 3
    af30:	6d 91       	ld	r22, X+
    af32:	7d 91       	ld	r23, X+
    af34:	8d 91       	ld	r24, X+
    af36:	9c 91       	ld	r25, X
    af38:	16 97       	sbiw	r26, 0x06	; 6
    af3a:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    af3e:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    af42:	86 2f       	mov	r24, r22
    af44:	98 e0       	ldi	r25, 0x08	; 8
    af46:	a9 2e       	mov	r10, r25
    af48:	28 e0       	ldi	r18, 0x08	; 8
    af4a:	c2 2e       	mov	r12, r18
    af4c:	24 e0       	ldi	r18, 0x04	; 4
    af4e:	44 e0       	ldi	r20, 0x04	; 4
    af50:	6b 2d       	mov	r22, r11
    af52:	0e 94 19 4d 	call	0x9a32	; 0x9a32 <LBCollides>
    af56:	88 23       	and	r24, r24
    af58:	09 f4       	brne	.+2      	; 0xaf5c <collision_detect_shot+0x2d6>
    af5a:	76 cf       	rjmp	.-276    	; 0xae48 <collision_detect_shot+0x1c2>
        {
		    hit = hit | HIT_METAL;
    af5c:	11 60       	ori	r17, 0x01	; 1
    af5e:	74 cf       	rjmp	.-280    	; 0xae48 <collision_detect_shot+0x1c2>
        }
	}
	
	if (hit & HIT_ANGLE)
    af60:	12 ff       	sbrs	r17, 2
    af62:	0e c0       	rjmp	.+28     	; 0xaf80 <collision_detect_shot+0x2fa>
	{
		recoil_sprite_fine(&shot->shared);
    af64:	c4 01       	movw	r24, r8
    af66:	0e 94 2a 53 	call	0xa654	; 0xa654 <recoil_sprite_fine>
		richochet(angle_tile, &shot->shared);
    af6a:	b4 01       	movw	r22, r8
    af6c:	8f 2d       	mov	r24, r15
    af6e:	0e 94 22 56 	call	0xac44	; 0xac44 <richochet>
		shot->rebounds--;
    af72:	f4 01       	movw	r30, r8
    af74:	85 85       	ldd	r24, Z+13	; 0x0d
    af76:	81 50       	subi	r24, 0x01	; 1
    af78:	85 87       	std	Z+13, r24	; 0x0d
		if (shot->rebounds <= 0)
    af7a:	81 11       	cpse	r24, r1
    af7c:	3a c0       	rjmp	.+116    	; 0xaff2 <collision_detect_shot+0x36c>
    af7e:	2e c0       	rjmp	.+92     	; 0xafdc <collision_detect_shot+0x356>
			init_shot_state(shot, shot->shot_type);
			player->active_shots--;
		}
		SFX_METAL;
	}
	else if (hit & HIT_BRICK)
    af80:	11 ff       	sbrs	r17, 1
    af82:	29 c0       	rjmp	.+82     	; 0xafd6 <collision_detect_shot+0x350>
	{
		explode_tile(&tile_animations, tiles[brick_index]);
    af84:	fe 01       	movw	r30, r28
    af86:	31 96       	adiw	r30, 0x01	; 1
    af88:	7f 01       	movw	r14, r30
    af8a:	ed 0c       	add	r14, r13
    af8c:	f1 1c       	adc	r15, r1
    af8e:	ed 0c       	add	r14, r13
    af90:	f1 1c       	adc	r15, r1
    af92:	d7 01       	movw	r26, r14
    af94:	6d 91       	ld	r22, X+
    af96:	7c 91       	ld	r23, X
    af98:	8c e0       	ldi	r24, 0x0C	; 12
    af9a:	9c e0       	ldi	r25, 0x0C	; 12
    af9c:	0e 94 e4 55 	call	0xabc8	; 0xabc8 <explode_tile>
		level.level_map[tiles[brick_index]] = L_EMPTY;
    afa0:	d7 01       	movw	r26, r14
    afa2:	ed 91       	ld	r30, X+
    afa4:	fc 91       	ld	r31, X
    afa6:	e6 56       	subi	r30, 0x66	; 102
    afa8:	f3 4f       	sbci	r31, 0xF3	; 243
    afaa:	11 82       	std	Z+1, r1	; 0x01
		shot->hit_count--;
    afac:	f4 01       	movw	r30, r8
    afae:	84 85       	ldd	r24, Z+12	; 0x0c
    afb0:	81 50       	subi	r24, 0x01	; 1
    afb2:	84 87       	std	Z+12, r24	; 0x0c
		if (shot->hit_count <= 0)
    afb4:	81 11       	cpse	r24, r1
    afb6:	0b c0       	rjmp	.+22     	; 0xafce <collision_detect_shot+0x348>
		{
			init_shot_state(shot, shot->shot_type);
    afb8:	63 85       	ldd	r22, Z+11	; 0x0b
    afba:	c4 01       	movw	r24, r8
    afbc:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
			player->active_shots--;
    afc0:	d3 01       	movw	r26, r6
    afc2:	51 96       	adiw	r26, 0x11	; 17
    afc4:	8c 91       	ld	r24, X
    afc6:	51 97       	sbiw	r26, 0x11	; 17
    afc8:	81 50       	subi	r24, 0x01	; 1
    afca:	51 96       	adiw	r26, 0x11	; 17
    afcc:	8c 93       	st	X, r24
		}
		SFX_BRICK_EXPLODE;
    afce:	2f ed       	ldi	r18, 0xDF	; 223
    afd0:	47 e1       	ldi	r20, 0x17	; 23
    afd2:	61 e0       	ldi	r22, 0x01	; 1
    afd4:	11 c0       	rjmp	.+34     	; 0xaff8 <collision_detect_shot+0x372>
	}
	else if (hit & HIT_METAL)
    afd6:	10 ff       	sbrs	r17, 0
    afd8:	12 c0       	rjmp	.+36     	; 0xaffe <collision_detect_shot+0x378>
	{
        init_shot_state(shot, shot->shot_type);
    afda:	f4 01       	movw	r30, r8
    afdc:	63 85       	ldd	r22, Z+11	; 0x0b
    afde:	c4 01       	movw	r24, r8
    afe0:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
        player->active_shots--;
    afe4:	d3 01       	movw	r26, r6
    afe6:	51 96       	adiw	r26, 0x11	; 17
    afe8:	8c 91       	ld	r24, X
    afea:	51 97       	sbiw	r26, 0x11	; 17
    afec:	81 50       	subi	r24, 0x01	; 1
    afee:	51 96       	adiw	r26, 0x11	; 17
    aff0:	8c 93       	st	X, r24
        SFX_METAL;
    aff2:	2f ef       	ldi	r18, 0xFF	; 255
    aff4:	47 e1       	ldi	r20, 0x17	; 23
    aff6:	66 e0       	ldi	r22, 0x06	; 6
    aff8:	84 e0       	ldi	r24, 0x04	; 4
    affa:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
	}
}
    affe:	0f 90       	pop	r0
    b000:	0f 90       	pop	r0
    b002:	0f 90       	pop	r0
    b004:	0f 90       	pop	r0
    b006:	0f 90       	pop	r0
    b008:	df 91       	pop	r29
    b00a:	cf 91       	pop	r28
    b00c:	1f 91       	pop	r17
    b00e:	0f 91       	pop	r16
    b010:	ff 90       	pop	r15
    b012:	ef 90       	pop	r14
    b014:	df 90       	pop	r13
    b016:	cf 90       	pop	r12
    b018:	bf 90       	pop	r11
    b01a:	af 90       	pop	r10
    b01c:	9f 90       	pop	r9
    b01e:	8f 90       	pop	r8
    b020:	7f 90       	pop	r7
    b022:	6f 90       	pop	r6
    b024:	5f 90       	pop	r5
    b026:	4f 90       	pop	r4
    b028:	3f 90       	pop	r3
    b02a:	2f 90       	pop	r2
    b02c:	08 95       	ret

0000b02e <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    b02e:	fc 01       	movw	r30, r24
    b030:	8e e1       	ldi	r24, 0x1E	; 30
    b032:	48 9f       	mul	r20, r24
    b034:	a0 01       	movw	r20, r0
    b036:	11 24       	eor	r1, r1
    b038:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    b03a:	64 0f       	add	r22, r20
    b03c:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    b03e:	21 11       	cpse	r18, r1
    b040:	09 c0       	rjmp	.+18     	; 0xb054 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    b042:	71 83       	std	Z+1, r23	; 0x01
    b044:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    b046:	cb 01       	movw	r24, r22
    b048:	01 96       	adiw	r24, 0x01	; 1
    b04a:	93 83       	std	Z+3, r25	; 0x03
    b04c:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b04e:	6e 5f       	subi	r22, 0xFE	; 254
    b050:	7f 4f       	sbci	r23, 0xFF	; 255
    b052:	1c c0       	rjmp	.+56     	; 0xb08c <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    b054:	21 30       	cpi	r18, 0x01	; 1
    b056:	31 f4       	brne	.+12     	; 0xb064 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    b058:	cb 01       	movw	r24, r22
    b05a:	02 96       	adiw	r24, 0x02	; 2
    b05c:	91 83       	std	Z+1, r25	; 0x01
    b05e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    b060:	4e 96       	adiw	r24, 0x1e	; 30
    b062:	07 c0       	rjmp	.+14     	; 0xb072 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    b064:	22 30       	cpi	r18, 0x02	; 2
    b066:	51 f4       	brne	.+20     	; 0xb07c <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    b068:	cb 01       	movw	r24, r22
    b06a:	cc 96       	adiw	r24, 0x3c	; 60
    b06c:	91 83       	std	Z+1, r25	; 0x01
    b06e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    b070:	01 96       	adiw	r24, 0x01	; 1
    b072:	93 83       	std	Z+3, r25	; 0x03
    b074:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    b076:	62 5c       	subi	r22, 0xC2	; 194
    b078:	7f 4f       	sbci	r23, 0xFF	; 255
    b07a:	08 c0       	rjmp	.+16     	; 0xb08c <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    b07c:	71 83       	std	Z+1, r23	; 0x01
    b07e:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    b080:	cb 01       	movw	r24, r22
    b082:	4e 96       	adiw	r24, 0x1e	; 30
    b084:	93 83       	std	Z+3, r25	; 0x03
    b086:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    b088:	64 5c       	subi	r22, 0xC4	; 196
    b08a:	7f 4f       	sbci	r23, 0xFF	; 255
    b08c:	75 83       	std	Z+5, r23	; 0x05
    b08e:	64 83       	std	Z+4, r22	; 0x04
    b090:	08 95       	ret

0000b092 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    b092:	2f 92       	push	r2
    b094:	3f 92       	push	r3
    b096:	4f 92       	push	r4
    b098:	5f 92       	push	r5
    b09a:	6f 92       	push	r6
    b09c:	7f 92       	push	r7
    b09e:	8f 92       	push	r8
    b0a0:	9f 92       	push	r9
    b0a2:	af 92       	push	r10
    b0a4:	bf 92       	push	r11
    b0a6:	cf 92       	push	r12
    b0a8:	df 92       	push	r13
    b0aa:	ef 92       	push	r14
    b0ac:	ff 92       	push	r15
    b0ae:	0f 93       	push	r16
    b0b0:	1f 93       	push	r17
    b0b2:	cf 93       	push	r28
    b0b4:	df 93       	push	r29
    b0b6:	cd b7       	in	r28, 0x3d	; 61
    b0b8:	de b7       	in	r29, 0x3e	; 62
    b0ba:	2d 97       	sbiw	r28, 0x0d	; 13
    b0bc:	0f b6       	in	r0, 0x3f	; 63
    b0be:	f8 94       	cli
    b0c0:	de bf       	out	0x3e, r29	; 62
    b0c2:	0f be       	out	0x3f, r0	; 63
    b0c4:	cd bf       	out	0x3d, r28	; 61
    b0c6:	4c 01       	movw	r8, r24
    b0c8:	7a 87       	std	Y+10, r23	; 0x0a
    b0ca:	69 87       	std	Y+9, r22	; 0x09
    b0cc:	14 2f       	mov	r17, r20
    b0ce:	f2 2e       	mov	r15, r18
	int tiles[3] = {0,0,0};
    b0d0:	1a 82       	std	Y+2, r1	; 0x02
    b0d2:	19 82       	std	Y+1, r1	; 0x01
    b0d4:	1c 82       	std	Y+4, r1	; 0x04
    b0d6:	1b 82       	std	Y+3, r1	; 0x03
    b0d8:	1e 82       	std	Y+6, r1	; 0x06
    b0da:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    b0dc:	20 e0       	ldi	r18, 0x00	; 0
    b0de:	30 e0       	ldi	r19, 0x00	; 0
    b0e0:	40 e0       	ldi	r20, 0x00	; 0
    b0e2:	5e e3       	ldi	r21, 0x3E	; 62
    b0e4:	dc 01       	movw	r26, r24
    b0e6:	17 96       	adiw	r26, 0x07	; 7
    b0e8:	6d 91       	ld	r22, X+
    b0ea:	7d 91       	ld	r23, X+
    b0ec:	8d 91       	ld	r24, X+
    b0ee:	9c 91       	ld	r25, X
    b0f0:	1a 97       	sbiw	r26, 0x0a	; 10
    b0f2:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b0f6:	20 e0       	ldi	r18, 0x00	; 0
    b0f8:	30 e0       	ldi	r19, 0x00	; 0
    b0fa:	40 e4       	ldi	r20, 0x40	; 64
    b0fc:	50 e4       	ldi	r21, 0x40	; 64
    b0fe:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    b102:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    b106:	06 2f       	mov	r16, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    b108:	20 e0       	ldi	r18, 0x00	; 0
    b10a:	30 e0       	ldi	r19, 0x00	; 0
    b10c:	40 e0       	ldi	r20, 0x00	; 0
    b10e:	5e e3       	ldi	r21, 0x3E	; 62
    b110:	f4 01       	movw	r30, r8
    b112:	63 81       	ldd	r22, Z+3	; 0x03
    b114:	74 81       	ldd	r23, Z+4	; 0x04
    b116:	85 81       	ldd	r24, Z+5	; 0x05
    b118:	96 81       	ldd	r25, Z+6	; 0x06
    b11a:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b11e:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    b122:	d4 01       	movw	r26, r8
    b124:	2c 91       	ld	r18, X
    b126:	40 2f       	mov	r20, r16
    b128:	ce 01       	movw	r24, r28
    b12a:	01 96       	adiw	r24, 0x01	; 1
    b12c:	0e 94 17 58 	call	0xb02e	; 0xb02e <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    b130:	c4 01       	movw	r24, r8
    b132:	0e 94 d3 54 	call	0xa9a6	; 0xa9a6 <collision_detect_boundries>
    b136:	88 23       	and	r24, r24
    b138:	31 f0       	breq	.+12     	; 0xb146 <collision_detect_player+0xb4>
	{
		recoil_sprite(&player->shared);
    b13a:	c4 01       	movw	r24, r8
    b13c:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <recoil_sprite>
		player->shared.speed = 0;
    b140:	f4 01       	movw	r30, r8
    b142:	11 82       	std	Z+1, r1	; 0x01
    b144:	f5 c0       	rjmp	.+490    	; 0xb330 <collision_detect_player+0x29e>
    b146:	ce 01       	movw	r24, r28
    b148:	01 96       	adiw	r24, 0x01	; 1
    b14a:	3c 01       	movw	r6, r24
    b14c:	de 01       	movw	r26, r28
    b14e:	17 96       	adiw	r26, 0x07	; 7
    b150:	b8 87       	std	Y+8, r27	; 0x08
    b152:	af 83       	std	Y+7, r26	; 0x07
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    b154:	3e e1       	ldi	r19, 0x1E	; 30
    b156:	23 2e       	mov	r2, r19
    b158:	31 2c       	mov	r3, r1
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    b15a:	bb 24       	eor	r11, r11
    b15c:	b3 94       	inc	r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b15e:	bb e0       	ldi	r27, 0x0B	; 11
    b160:	b1 0f       	add	r27, r17
    b162:	bb 87       	std	Y+11, r27	; 0x0b
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b164:	ea e0       	ldi	r30, 0x0A	; 10
    b166:	e1 0f       	add	r30, r17
    b168:	ec 87       	std	Y+12, r30	; 0x0c
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_directional_tile(tiles[i]) && collides_directional_tile(tiles[i], player->shared.x, player->shared.y, 16, 16))
    b16a:	d3 01       	movw	r26, r6
    b16c:	4d 90       	ld	r4, X+
    b16e:	5c 90       	ld	r5, X
    b170:	c2 01       	movw	r24, r4
    b172:	0e 94 ba 53 	call	0xa774	; 0xa774 <solid_directional_tile>
    b176:	88 23       	and	r24, r24
    b178:	49 f1       	breq	.+82     	; 0xb1cc <collision_detect_player+0x13a>
    b17a:	f4 01       	movw	r30, r8
    b17c:	67 81       	ldd	r22, Z+7	; 0x07
    b17e:	70 85       	ldd	r23, Z+8	; 0x08
    b180:	81 85       	ldd	r24, Z+9	; 0x09
    b182:	92 85       	ldd	r25, Z+10	; 0x0a
    b184:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    b188:	46 2f       	mov	r20, r22
    b18a:	d4 01       	movw	r26, r8
    b18c:	13 96       	adiw	r26, 0x03	; 3
    b18e:	6d 91       	ld	r22, X+
    b190:	7d 91       	ld	r23, X+
    b192:	8d 91       	ld	r24, X+
    b194:	9c 91       	ld	r25, X
    b196:	16 97       	sbiw	r26, 0x06	; 6
    b198:	4d 87       	std	Y+13, r20	; 0x0d
    b19a:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    b19e:	00 e1       	ldi	r16, 0x10	; 16
    b1a0:	20 e1       	ldi	r18, 0x10	; 16
    b1a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    b1a4:	c2 01       	movw	r24, r4
    b1a6:	0e 94 d0 53 	call	0xa7a0	; 0xa7a0 <collides_directional_tile>
    b1aa:	88 23       	and	r24, r24
    b1ac:	79 f0       	breq	.+30     	; 0xb1cc <collision_detect_player+0x13a>
		{
			(player->handle_id == 9) ? recoil_sprite(&player->shared) : recoil_sprite_fine(&player->shared);
    b1ae:	f4 01       	movw	r30, r8
    b1b0:	83 85       	ldd	r24, Z+11	; 0x0b
    b1b2:	89 30       	cpi	r24, 0x09	; 9
    b1b4:	21 f4       	brne	.+8      	; 0xb1be <collision_detect_player+0x12c>
    b1b6:	c4 01       	movw	r24, r8
    b1b8:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <recoil_sprite>
    b1bc:	03 c0       	rjmp	.+6      	; 0xb1c4 <collision_detect_player+0x132>
    b1be:	c4 01       	movw	r24, r8
    b1c0:	0e 94 2a 53 	call	0xa654	; 0xa654 <recoil_sprite_fine>
			player->shared.speed = 0;
    b1c4:	d4 01       	movw	r26, r8
    b1c6:	11 96       	adiw	r26, 0x01	; 1
    b1c8:	1c 92       	st	X, r1
    b1ca:	a9 c0       	rjmp	.+338    	; 0xb31e <collision_detect_player+0x28c>
		}
		else if (solid_square_tile(tiles[i]) && LBCollides(player->shared.x,player->shared.y,16,16,(tiles[i]%30)*8,(tiles[i]/30+3)*8,8,8))
    b1cc:	c2 01       	movw	r24, r4
    b1ce:	0e 94 8e 53 	call	0xa71c	; 0xa71c <solid_square_tile>
    b1d2:	88 23       	and	r24, r24
    b1d4:	89 f1       	breq	.+98     	; 0xb238 <collision_detect_player+0x1a6>
    b1d6:	c2 01       	movw	r24, r4
    b1d8:	b1 01       	movw	r22, r2
    b1da:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    b1de:	6d 5f       	subi	r22, 0xFD	; 253
    b1e0:	7f 4f       	sbci	r23, 0xFF	; 255
    b1e2:	e6 2e       	mov	r14, r22
    b1e4:	ee 0c       	add	r14, r14
    b1e6:	ee 0c       	add	r14, r14
    b1e8:	ee 0c       	add	r14, r14
    b1ea:	08 2f       	mov	r16, r24
    b1ec:	00 0f       	add	r16, r16
    b1ee:	00 0f       	add	r16, r16
    b1f0:	00 0f       	add	r16, r16
    b1f2:	f4 01       	movw	r30, r8
    b1f4:	67 81       	ldd	r22, Z+7	; 0x07
    b1f6:	70 85       	ldd	r23, Z+8	; 0x08
    b1f8:	81 85       	ldd	r24, Z+9	; 0x09
    b1fa:	92 85       	ldd	r25, Z+10	; 0x0a
    b1fc:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    b200:	d6 2e       	mov	r13, r22
    b202:	d4 01       	movw	r26, r8
    b204:	13 96       	adiw	r26, 0x03	; 3
    b206:	6d 91       	ld	r22, X+
    b208:	7d 91       	ld	r23, X+
    b20a:	8d 91       	ld	r24, X+
    b20c:	9c 91       	ld	r25, X
    b20e:	16 97       	sbiw	r26, 0x06	; 6
    b210:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    b214:	86 2f       	mov	r24, r22
    b216:	98 e0       	ldi	r25, 0x08	; 8
    b218:	a9 2e       	mov	r10, r25
    b21a:	28 e0       	ldi	r18, 0x08	; 8
    b21c:	c2 2e       	mov	r12, r18
    b21e:	20 e1       	ldi	r18, 0x10	; 16
    b220:	40 e1       	ldi	r20, 0x10	; 16
    b222:	6d 2d       	mov	r22, r13
    b224:	0e 94 19 4d 	call	0x9a32	; 0x9a32 <LBCollides>
    b228:	88 23       	and	r24, r24
    b22a:	31 f0       	breq	.+12     	; 0xb238 <collision_detect_player+0x1a6>
		{
			recoil_sprite(&player->shared);
    b22c:	c4 01       	movw	r24, r8
    b22e:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <recoil_sprite>
			player->shared.speed = 0;
    b232:	f4 01       	movw	r30, r8
    b234:	11 82       	std	Z+1, r1	; 0x01
    b236:	73 c0       	rjmp	.+230    	; 0xb31e <collision_detect_player+0x28c>
		}
		else if (level.level_map[tiles[i]] == L_SPEED && !(player->flags & EXPLODING_FLAG))
    b238:	f2 01       	movw	r30, r4
    b23a:	e6 56       	subi	r30, 0x66	; 102
    b23c:	f3 4f       	sbci	r31, 0xF3	; 243
    b23e:	81 81       	ldd	r24, Z+1	; 0x01
    b240:	87 30       	cpi	r24, 0x07	; 7
    b242:	b9 f4       	brne	.+46     	; 0xb272 <collision_detect_player+0x1e0>
    b244:	d4 01       	movw	r26, r8
    b246:	54 96       	adiw	r26, 0x14	; 20
    b248:	8c 91       	ld	r24, X
    b24a:	54 97       	sbiw	r26, 0x14	; 20
    b24c:	80 fd       	sbrc	r24, 0
    b24e:	67 c0       	rjmp	.+206    	; 0xb31e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b250:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    b252:	e1 e4       	ldi	r30, 0x41	; 65
    b254:	58 96       	adiw	r26, 0x18	; 24
    b256:	ec 93       	st	X, r30
    b258:	58 97       	sbiw	r26, 0x18	; 24
			player->has_over_speed = true;
    b25a:	5a 96       	adiw	r26, 0x1a	; 26
    b25c:	bc 92       	st	X, r11
			DrawMap2(hud_x+10, 1, map_speed_itm);
    b25e:	44 e6       	ldi	r20, 0x64	; 100
    b260:	5d e5       	ldi	r21, 0x5D	; 93
    b262:	61 e0       	ldi	r22, 0x01	; 1
    b264:	8c 85       	ldd	r24, Y+12	; 0x0c
    b266:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    b26a:	d3 01       	movw	r26, r6
    b26c:	8d 91       	ld	r24, X+
    b26e:	9c 91       	ld	r25, X
    b270:	14 c0       	rjmp	.+40     	; 0xb29a <collision_detect_player+0x208>
			SFX_ITEM;
		}
		else if (level.level_map[tiles[i]] == L_ROCKET && !(player->flags & EXPLODING_FLAG))
    b272:	89 30       	cpi	r24, 0x09	; 9
    b274:	09 f5       	brne	.+66     	; 0xb2b8 <collision_detect_player+0x226>
    b276:	d4 01       	movw	r26, r8
    b278:	54 96       	adiw	r26, 0x14	; 20
    b27a:	8c 91       	ld	r24, X
    b27c:	54 97       	sbiw	r26, 0x14	; 20
    b27e:	80 fd       	sbrc	r24, 0
    b280:	4e c0       	rjmp	.+156    	; 0xb31e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b282:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    b284:	59 96       	adiw	r26, 0x19	; 25
    b286:	bc 92       	st	X, r11
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    b288:	4e e5       	ldi	r20, 0x5E	; 94
    b28a:	5d e5       	ldi	r21, 0x5D	; 93
    b28c:	61 e0       	ldi	r22, 0x01	; 1
    b28e:	8b 85       	ldd	r24, Y+11	; 0x0b
    b290:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    b294:	f3 01       	movw	r30, r6
    b296:	80 81       	ld	r24, Z
    b298:	91 81       	ldd	r25, Z+1	; 0x01
    b29a:	b1 01       	movw	r22, r2
    b29c:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    b2a0:	6d 5f       	subi	r22, 0xFD	; 253
    b2a2:	40 e0       	ldi	r20, 0x00	; 0
    b2a4:	50 e0       	ldi	r21, 0x00	; 0
    b2a6:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
			SFX_ITEM;
    b2aa:	2f ef       	ldi	r18, 0xFF	; 255
    b2ac:	47 e1       	ldi	r20, 0x17	; 23
    b2ae:	63 e0       	ldi	r22, 0x03	; 3
    b2b0:	84 e0       	ldi	r24, 0x04	; 4
    b2b2:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
    b2b6:	33 c0       	rjmp	.+102    	; 0xb31e <collision_detect_player+0x28c>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE && !(player->flags & EXPLODING_FLAG))
    b2b8:	88 30       	cpi	r24, 0x08	; 8
    b2ba:	89 f5       	brne	.+98     	; 0xb31e <collision_detect_player+0x28c>
    b2bc:	d4 01       	movw	r26, r8
    b2be:	54 96       	adiw	r26, 0x14	; 20
    b2c0:	8c 91       	ld	r24, X
    b2c2:	80 fd       	sbrc	r24, 0
    b2c4:	2c c0       	rjmp	.+88     	; 0xb31e <collision_detect_player+0x28c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    b2c6:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    b2c8:	c2 01       	movw	r24, r4
    b2ca:	b1 01       	movw	r22, r2
    b2cc:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    b2d0:	6d 5f       	subi	r22, 0xFD	; 253
    b2d2:	40 e0       	ldi	r20, 0x00	; 0
    b2d4:	50 e0       	ldi	r21, 0x00	; 0
    b2d6:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
			SFX_ITEM;
    b2da:	2f ef       	ldi	r18, 0xFF	; 255
    b2dc:	47 e1       	ldi	r20, 0x17	; 23
    b2de:	63 e0       	ldi	r22, 0x03	; 3
    b2e0:	84 e0       	ldi	r24, 0x04	; 4
    b2e2:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
			if (!(other_player->flags & EXPLODING_FLAG))
    b2e6:	e9 85       	ldd	r30, Y+9	; 0x09
    b2e8:	fa 85       	ldd	r31, Y+10	; 0x0a
    b2ea:	84 89       	ldd	r24, Z+20	; 0x14
    b2ec:	80 fd       	sbrc	r24, 0
    b2ee:	17 c0       	rjmp	.+46     	; 0xb31e <collision_detect_player+0x28c>
			{
				player->level_score++;
    b2f0:	d4 01       	movw	r26, r8
    b2f2:	50 96       	adiw	r26, 0x10	; 16
    b2f4:	8c 91       	ld	r24, X
    b2f6:	50 97       	sbiw	r26, 0x10	; 16
    b2f8:	8f 5f       	subi	r24, 0xFF	; 255
    b2fa:	50 96       	adiw	r26, 0x10	; 16
    b2fc:	8c 93       	st	X, r24
    b2fe:	50 97       	sbiw	r26, 0x10	; 16
				player->score++;
    b300:	1f 96       	adiw	r26, 0x0f	; 15
    b302:	8c 91       	ld	r24, X
    b304:	1f 97       	sbiw	r26, 0x0f	; 15
    b306:	8f 5f       	subi	r24, 0xFF	; 255
    b308:	1f 96       	adiw	r26, 0x0f	; 15
    b30a:	8c 93       	st	X, r24
				render_score(player, hud_x);
    b30c:	61 2f       	mov	r22, r17
    b30e:	c4 01       	movw	r24, r8
    b310:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_score>
				kill_player(other_player, other_player_hud_x);
    b314:	6f 2d       	mov	r22, r15
    b316:	89 85       	ldd	r24, Y+9	; 0x09
    b318:	9a 85       	ldd	r25, Y+10	; 0x0a
    b31a:	0e 94 68 55 	call	0xaad0	; 0xaad0 <kill_player>
    b31e:	b2 e0       	ldi	r27, 0x02	; 2
    b320:	6b 0e       	add	r6, r27
    b322:	71 1c       	adc	r7, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    b324:	ef 81       	ldd	r30, Y+7	; 0x07
    b326:	f8 85       	ldd	r31, Y+8	; 0x08
    b328:	6e 16       	cp	r6, r30
    b32a:	7f 06       	cpc	r7, r31
    b32c:	09 f0       	breq	.+2      	; 0xb330 <collision_detect_player+0x29e>
    b32e:	1d cf       	rjmp	.-454    	; 0xb16a <collision_detect_player+0xd8>
				render_score(player, hud_x);
				kill_player(other_player, other_player_hud_x);
			}
		}
	}
}
    b330:	2d 96       	adiw	r28, 0x0d	; 13
    b332:	0f b6       	in	r0, 0x3f	; 63
    b334:	f8 94       	cli
    b336:	de bf       	out	0x3e, r29	; 62
    b338:	0f be       	out	0x3f, r0	; 63
    b33a:	cd bf       	out	0x3d, r28	; 61
    b33c:	df 91       	pop	r29
    b33e:	cf 91       	pop	r28
    b340:	1f 91       	pop	r17
    b342:	0f 91       	pop	r16
    b344:	ff 90       	pop	r15
    b346:	ef 90       	pop	r14
    b348:	df 90       	pop	r13
    b34a:	cf 90       	pop	r12
    b34c:	bf 90       	pop	r11
    b34e:	af 90       	pop	r10
    b350:	9f 90       	pop	r9
    b352:	8f 90       	pop	r8
    b354:	7f 90       	pop	r7
    b356:	6f 90       	pop	r6
    b358:	5f 90       	pop	r5
    b35a:	4f 90       	pop	r4
    b35c:	3f 90       	pop	r3
    b35e:	2f 90       	pop	r2
    b360:	08 95       	ret

0000b362 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    b362:	bf 92       	push	r11
    b364:	cf 92       	push	r12
    b366:	df 92       	push	r13
    b368:	ef 92       	push	r14
    b36a:	ff 92       	push	r15
    b36c:	0f 93       	push	r16
    b36e:	1f 93       	push	r17
    b370:	cf 93       	push	r28
    b372:	df 93       	push	r29
    b374:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    b376:	c0 e0       	ldi	r28, 0x00	; 0
    b378:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    b37a:	0e e1       	ldi	r16, 0x1E	; 30
    b37c:	10 e0       	ldi	r17, 0x00	; 0
    b37e:	ce 01       	movw	r24, r28
    b380:	b8 01       	movw	r22, r16
    b382:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
		y = 3 + i / 30;
    b386:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    b388:	bb 20       	and	r11, r11
    b38a:	19 f0       	breq	.+6      	; 0xb392 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    b38c:	41 e0       	ldi	r20, 0x01	; 1
    b38e:	5e e5       	ldi	r21, 0x5E	; 94
    b390:	11 c0       	rjmp	.+34     	; 0xb3b4 <load_level_tiles+0x52>
    b392:	fe 01       	movw	r30, r28
    b394:	e6 56       	subi	r30, 0x66	; 102
    b396:	f3 4f       	sbci	r31, 0xF3	; 243
		}
		else
		{
			switch (level.level_map[i])
    b398:	e1 81       	ldd	r30, Z+1	; 0x01
    b39a:	ce 2e       	mov	r12, r30
    b39c:	d1 2c       	mov	r13, r1
    b39e:	f6 01       	movw	r30, r12
    b3a0:	31 97       	sbiw	r30, 0x01	; 1
    b3a2:	e9 30       	cpi	r30, 0x09	; 9
    b3a4:	f1 05       	cpc	r31, r1
    b3a6:	08 f5       	brcc	.+66     	; 0xb3ea <load_level_tiles+0x88>
    b3a8:	e8 5c       	subi	r30, 0xC8	; 200
    b3aa:	ff 4f       	sbci	r31, 0xFF	; 255
    b3ac:	0c 94 8a 65 	jmp	0xcb14	; 0xcb14 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    b3b0:	4a e6       	ldi	r20, 0x6A	; 106
    b3b2:	5d e5       	ldi	r21, 0x5D	; 93
    b3b4:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
    b3b8:	1c c0       	rjmp	.+56     	; 0xb3f2 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    b3ba:	47 e6       	ldi	r20, 0x67	; 103
    b3bc:	5d e5       	ldi	r21, 0x5D	; 93
    b3be:	fa cf       	rjmp	.-12     	; 0xb3b4 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    b3c0:	42 e5       	ldi	r20, 0x52	; 82
    b3c2:	5d e5       	ldi	r21, 0x5D	; 93
    b3c4:	f7 cf       	rjmp	.-18     	; 0xb3b4 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    b3c6:	4c e4       	ldi	r20, 0x4C	; 76
    b3c8:	5d e5       	ldi	r21, 0x5D	; 93
    b3ca:	f4 cf       	rjmp	.-24     	; 0xb3b4 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    b3cc:	49 e4       	ldi	r20, 0x49	; 73
    b3ce:	5d e5       	ldi	r21, 0x5D	; 93
    b3d0:	f1 cf       	rjmp	.-30     	; 0xb3b4 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    b3d2:	4f e4       	ldi	r20, 0x4F	; 79
    b3d4:	5d e5       	ldi	r21, 0x5D	; 93
    b3d6:	ee cf       	rjmp	.-36     	; 0xb3b4 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    b3d8:	44 e6       	ldi	r20, 0x64	; 100
    b3da:	5d e5       	ldi	r21, 0x5D	; 93
    b3dc:	eb cf       	rjmp	.-42     	; 0xb3b4 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    b3de:	41 e6       	ldi	r20, 0x61	; 97
    b3e0:	5d e5       	ldi	r21, 0x5D	; 93
    b3e2:	e8 cf       	rjmp	.-48     	; 0xb3b4 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    b3e4:	4e e5       	ldi	r20, 0x5E	; 94
    b3e6:	5d e5       	ldi	r21, 0x5D	; 93
    b3e8:	e5 cf       	rjmp	.-54     	; 0xb3b4 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    b3ea:	40 e0       	ldi	r20, 0x00	; 0
    b3ec:	50 e0       	ldi	r21, 0x00	; 0
    b3ee:	0e 94 f0 3d 	call	0x7be0	; 0x7be0 <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    b3f2:	21 96       	adiw	r28, 0x01	; 1
    b3f4:	ce 3e       	cpi	r28, 0xEE	; 238
    b3f6:	82 e0       	ldi	r24, 0x02	; 2
    b3f8:	d8 07       	cpc	r29, r24
    b3fa:	09 f6       	brne	.-126    	; 0xb37e <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    b3fc:	df 91       	pop	r29
    b3fe:	cf 91       	pop	r28
    b400:	1f 91       	pop	r17
    b402:	0f 91       	pop	r16
    b404:	ff 90       	pop	r15
    b406:	ef 90       	pop	r14
    b408:	df 90       	pop	r13
    b40a:	cf 90       	pop	r12
    b40c:	bf 90       	pop	r11
    b40e:	08 95       	ret

0000b410 <load_level>:

void load_level(int level_number)
{
    b410:	9f 92       	push	r9
    b412:	af 92       	push	r10
    b414:	bf 92       	push	r11
    b416:	cf 92       	push	r12
    b418:	df 92       	push	r13
    b41a:	ef 92       	push	r14
    b41c:	ff 92       	push	r15
    b41e:	0f 93       	push	r16
    b420:	1f 93       	push	r17
    b422:	cf 93       	push	r28
    b424:	df 93       	push	r29
    b426:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    b428:	8e ee       	ldi	r24, 0xEE	; 238
    b42a:	92 e0       	ldi	r25, 0x02	; 2
    b42c:	c8 9f       	mul	r28, r24
    b42e:	70 01       	movw	r14, r0
    b430:	c9 9f       	mul	r28, r25
    b432:	f0 0c       	add	r15, r0
    b434:	d8 9f       	mul	r29, r24
    b436:	f0 0c       	add	r15, r0
    b438:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    b43a:	83 e0       	ldi	r24, 0x03	; 3
    b43c:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    b440:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
	game.current_level = level_number;
    b444:	c0 93 09 0c 	sts	0x0C09, r28
    b448:	8b e9       	ldi	r24, 0x9B	; 155
    b44a:	c8 2e       	mov	r12, r24
    b44c:	8c e0       	ldi	r24, 0x0C	; 12
    b44e:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    b450:	c0 e0       	ldi	r28, 0x00	; 0
    b452:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    b454:	0e e1       	ldi	r16, 0x1E	; 30
    b456:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    b458:	92 e3       	ldi	r25, 0x32	; 50
    b45a:	99 2e       	mov	r9, r25
    b45c:	fe 01       	movw	r30, r28
    b45e:	ee 0d       	add	r30, r14
    b460:	ff 1d       	adc	r31, r15
    b462:	e6 52       	subi	r30, 0x26	; 38
    b464:	fc 4f       	sbci	r31, 0xFC	; 252
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    b466:	e4 91       	lpm	r30, Z
    b468:	56 01       	movw	r10, r12
    b46a:	d6 01       	movw	r26, r12
    b46c:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    b46e:	e8 35       	cpi	r30, 0x58	; 88
    b470:	01 f5       	brne	.+64     	; 0xb4b2 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    b472:	ce 01       	movw	r24, r28
    b474:	b8 01       	movw	r22, r16
    b476:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    b47a:	88 0f       	add	r24, r24
    b47c:	88 0f       	add	r24, r24
    b47e:	88 0f       	add	r24, r24
    b480:	80 93 37 0c 	sts	0x0C37, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    b484:	6d 5f       	subi	r22, 0xFD	; 253
    b486:	7f 4f       	sbci	r23, 0xFF	; 255
    b488:	66 0f       	add	r22, r22
    b48a:	66 0f       	add	r22, r22
    b48c:	66 0f       	add	r22, r22
    b48e:	60 93 38 0c 	sts	0x0C38, r22
			player1.level_score = 0;
    b492:	10 92 35 0c 	sts	0x0C35, r1
			player1.has_over_speed = false;
    b496:	10 92 3f 0c 	sts	0x0C3F, r1
			player1.has_rocket = false;
    b49a:	10 92 3e 0c 	sts	0x0C3E, r1
			player1.max_speed = MAX_SPEED;
    b49e:	90 92 3d 0c 	sts	0x0C3D, r9
			player_init_shot_state(&player1);
    b4a2:	85 e2       	ldi	r24, 0x25	; 37
    b4a4:	9c e0       	ldi	r25, 0x0C	; 12
    b4a6:	0e 94 4e 4f 	call	0x9e9c	; 0x9e9c <player_init_shot_state>
			player_spawn(&player1);
    b4aa:	85 e2       	ldi	r24, 0x25	; 37
    b4ac:	9c e0       	ldi	r25, 0x0C	; 12
    b4ae:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <player_spawn>
    b4b2:	bf ef       	ldi	r27, 0xFF	; 255
    b4b4:	cb 1a       	sub	r12, r27
    b4b6:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    b4b8:	f5 01       	movw	r30, r10
    b4ba:	80 81       	ld	r24, Z
    b4bc:	83 36       	cpi	r24, 0x63	; 99
    b4be:	01 f5       	brne	.+64     	; 0xb500 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    b4c0:	ce 01       	movw	r24, r28
    b4c2:	b8 01       	movw	r22, r16
    b4c4:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    b4c8:	88 0f       	add	r24, r24
    b4ca:	88 0f       	add	r24, r24
    b4cc:	88 0f       	add	r24, r24
    b4ce:	80 93 9b 0f 	sts	0x0F9B, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    b4d2:	6d 5f       	subi	r22, 0xFD	; 253
    b4d4:	7f 4f       	sbci	r23, 0xFF	; 255
    b4d6:	66 0f       	add	r22, r22
    b4d8:	66 0f       	add	r22, r22
    b4da:	66 0f       	add	r22, r22
    b4dc:	60 93 9c 0f 	sts	0x0F9C, r22
			player2.level_score = 0;
    b4e0:	10 92 99 0f 	sts	0x0F99, r1
			player2.has_over_speed = false;
    b4e4:	10 92 a3 0f 	sts	0x0FA3, r1
			player2.has_rocket = false;
    b4e8:	10 92 a2 0f 	sts	0x0FA2, r1
			player2.max_speed = MAX_SPEED;
    b4ec:	90 92 a1 0f 	sts	0x0FA1, r9
			player_init_shot_state(&player2);
    b4f0:	89 e8       	ldi	r24, 0x89	; 137
    b4f2:	9f e0       	ldi	r25, 0x0F	; 15
    b4f4:	0e 94 4e 4f 	call	0x9e9c	; 0x9e9c <player_init_shot_state>
			player_spawn(&player2);
    b4f8:	89 e8       	ldi	r24, 0x89	; 137
    b4fa:	9f e0       	ldi	r25, 0x0F	; 15
    b4fc:	0e 94 69 4f 	call	0x9ed2	; 0x9ed2 <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    b500:	21 96       	adiw	r28, 0x01	; 1
    b502:	ce 3e       	cpi	r28, 0xEE	; 238
    b504:	f2 e0       	ldi	r31, 0x02	; 2
    b506:	df 07       	cpc	r29, r31
    b508:	09 f0       	breq	.+2      	; 0xb50c <load_level+0xfc>
    b50a:	a8 cf       	rjmp	.-176    	; 0xb45c <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    b50c:	60 e0       	ldi	r22, 0x00	; 0
    b50e:	85 e2       	ldi	r24, 0x25	; 37
    b510:	9c e0       	ldi	r25, 0x0C	; 12
    b512:	0e 94 12 51 	call	0xa224	; 0xa224 <render_hud>
	render_hud(&player2, 15);
    b516:	6f e0       	ldi	r22, 0x0F	; 15
    b518:	89 e8       	ldi	r24, 0x89	; 137
    b51a:	9f e0       	ldi	r25, 0x0F	; 15
    b51c:	0e 94 12 51 	call	0xa224	; 0xa224 <render_hud>
	render_score(&player1, 0);
    b520:	60 e0       	ldi	r22, 0x00	; 0
    b522:	85 e2       	ldi	r24, 0x25	; 37
    b524:	9c e0       	ldi	r25, 0x0C	; 12
    b526:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_score>
	render_score(&player2, 15);
    b52a:	6f e0       	ldi	r22, 0x0F	; 15
    b52c:	89 e8       	ldi	r24, 0x89	; 137
    b52e:	9f e0       	ldi	r25, 0x0F	; 15
    b530:	0e 94 2f 51 	call	0xa25e	; 0xa25e <render_score>
	Print(14, 0, &strMap[strVertSep]);
    b534:	4c e8       	ldi	r20, 0x8C	; 140
    b536:	51 e0       	ldi	r21, 0x01	; 1
    b538:	60 e0       	ldi	r22, 0x00	; 0
    b53a:	70 e0       	ldi	r23, 0x00	; 0
    b53c:	8e e0       	ldi	r24, 0x0E	; 14
    b53e:	90 e0       	ldi	r25, 0x00	; 0
    b540:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(14, 1, &strMap[strVertSep]);
    b544:	4c e8       	ldi	r20, 0x8C	; 140
    b546:	51 e0       	ldi	r21, 0x01	; 1
    b548:	61 e0       	ldi	r22, 0x01	; 1
    b54a:	70 e0       	ldi	r23, 0x00	; 0
    b54c:	8e e0       	ldi	r24, 0x0E	; 14
    b54e:	90 e0       	ldi	r25, 0x00	; 0
    b550:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(14, 2, &strMap[strVertSep]);
    b554:	4c e8       	ldi	r20, 0x8C	; 140
    b556:	51 e0       	ldi	r21, 0x01	; 1
    b558:	62 e0       	ldi	r22, 0x02	; 2
    b55a:	70 e0       	ldi	r23, 0x00	; 0
    b55c:	8e e0       	ldi	r24, 0x0E	; 14
    b55e:	90 e0       	ldi	r25, 0x00	; 0
    b560:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	load_level_tiles(false);
    b564:	80 e0       	ldi	r24, 0x00	; 0
    b566:	0e 94 b1 59 	call	0xb362	; 0xb362 <load_level_tiles>
	SFX_LEVEL_START;
    b56a:	2f ef       	ldi	r18, 0xFF	; 255
    b56c:	47 e1       	ldi	r20, 0x17	; 23
    b56e:	65 e0       	ldi	r22, 0x05	; 5
    b570:	84 e0       	ldi	r24, 0x04	; 4
}
    b572:	df 91       	pop	r29
    b574:	cf 91       	pop	r28
    b576:	1f 91       	pop	r17
    b578:	0f 91       	pop	r16
    b57a:	ff 90       	pop	r15
    b57c:	ef 90       	pop	r14
    b57e:	df 90       	pop	r13
    b580:	cf 90       	pop	r12
    b582:	bf 90       	pop	r11
    b584:	af 90       	pop	r10
    b586:	9f 90       	pop	r9
	render_score(&player2, 15);
	Print(14, 0, &strMap[strVertSep]);
	Print(14, 1, &strMap[strVertSep]);
	Print(14, 2, &strMap[strVertSep]);
	load_level_tiles(false);
	SFX_LEVEL_START;
    b588:	0c 94 37 41 	jmp	0x826e	; 0x826e <TriggerNote>

0000b58c <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    b58c:	cf 93       	push	r28
    b58e:	df 93       	push	r29
    b590:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    b592:	61 e0       	ldi	r22, 0x01	; 1
    b594:	83 e0       	ldi	r24, 0x03	; 3
    b596:	0e 94 39 4c 	call	0x9872	; 0x9872 <FadeOut>
	ClearVram();
    b59a:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <ClearVram>
	clear_sprites();
    b59e:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
	Print(8, 12, &strMap[strLevels+index*16]);
    b5a2:	d0 e0       	ldi	r29, 0x00	; 0
    b5a4:	ae 01       	movw	r20, r28
    b5a6:	84 e0       	ldi	r24, 0x04	; 4
    b5a8:	44 0f       	add	r20, r20
    b5aa:	55 1f       	adc	r21, r21
    b5ac:	8a 95       	dec	r24
    b5ae:	e1 f7       	brne	.-8      	; 0xb5a8 <level_transition+0x1c>
    b5b0:	4b 54       	subi	r20, 0x4B	; 75
    b5b2:	5d 4f       	sbci	r21, 0xFD	; 253
    b5b4:	6c e0       	ldi	r22, 0x0C	; 12
    b5b6:	70 e0       	ldi	r23, 0x00	; 0
    b5b8:	88 e0       	ldi	r24, 0x08	; 8
    b5ba:	90 e0       	ldi	r25, 0x00	; 0
    b5bc:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	FadeIn(1, true);
    b5c0:	61 e0       	ldi	r22, 0x01	; 1
    b5c2:	81 e0       	ldi	r24, 0x01	; 1
    b5c4:	0e 94 2d 4c 	call	0x985a	; 0x985a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    b5c8:	82 e0       	ldi	r24, 0x02	; 2
    b5ca:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBWaitSeconds>
	FadeOut(1, true);
    b5ce:	61 e0       	ldi	r22, 0x01	; 1
    b5d0:	81 e0       	ldi	r24, 0x01	; 1
    b5d2:	0e 94 39 4c 	call	0x9872	; 0x9872 <FadeOut>
	ClearVram();
    b5d6:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    b5da:	60 e0       	ldi	r22, 0x00	; 0
    b5dc:	83 e0       	ldi	r24, 0x03	; 3
    b5de:	0e 94 2d 4c 	call	0x985a	; 0x985a <FadeIn>
	load_level(index);
    b5e2:	ce 01       	movw	r24, r28
}
    b5e4:	df 91       	pop	r29
    b5e6:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    b5e8:	0c 94 08 5a 	jmp	0xb410	; 0xb410 <load_level>

0000b5ec <load_splash>:
	}
}

void load_splash()
{
	game.current_screen = SPLASH;
    b5ec:	10 92 08 0c 	sts	0x0C08, r1
	clear_sprites();
    b5f0:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
	Print(7, 13, &strMap[str1Player]);
    b5f4:	4b e4       	ldi	r20, 0x4B	; 75
    b5f6:	51 e0       	ldi	r21, 0x01	; 1
    b5f8:	6d e0       	ldi	r22, 0x0D	; 13
    b5fa:	70 e0       	ldi	r23, 0x00	; 0
    b5fc:	87 e0       	ldi	r24, 0x07	; 7
    b5fe:	90 e0       	ldi	r25, 0x00	; 0
    b600:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(7, 14, &strMap[str2Player]);
    b604:	49 e5       	ldi	r20, 0x59	; 89
    b606:	51 e0       	ldi	r21, 0x01	; 1
    b608:	6e e0       	ldi	r22, 0x0E	; 14
    b60a:	70 e0       	ldi	r23, 0x00	; 0
    b60c:	87 e0       	ldi	r24, 0x07	; 7
    b60e:	90 e0       	ldi	r25, 0x00	; 0
    b610:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(7, 15, &strMap[strHighscores]);
    b614:	4a e6       	ldi	r20, 0x6A	; 106
    b616:	51 e0       	ldi	r21, 0x01	; 1
    b618:	6f e0       	ldi	r22, 0x0F	; 15
    b61a:	70 e0       	ldi	r23, 0x00	; 0
    b61c:	87 e0       	ldi	r24, 0x07	; 7
    b61e:	90 e0       	ldi	r25, 0x00	; 0
    b620:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(3, 26, &strMap[strCopyright]);
    b624:	42 e3       	ldi	r20, 0x32	; 50
    b626:	51 e0       	ldi	r21, 0x01	; 1
    b628:	6a e1       	ldi	r22, 0x1A	; 26
    b62a:	70 e0       	ldi	r23, 0x00	; 0
    b62c:	83 e0       	ldi	r24, 0x03	; 3
    b62e:	90 e0       	ldi	r25, 0x00	; 0
    b630:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    b634:	4b ea       	ldi	r20, 0xAB	; 171
    b636:	5d e5       	ldi	r21, 0x5D	; 93
    b638:	65 e0       	ldi	r22, 0x05	; 5
    b63a:	84 e0       	ldi	r24, 0x04	; 4
    b63c:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    b640:	40 e0       	ldi	r20, 0x00	; 0
    b642:	6c e2       	ldi	r22, 0x2C	; 44
    b644:	71 e3       	ldi	r23, 0x31	; 49
    b646:	80 e0       	ldi	r24, 0x00	; 0
    b648:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	SFX_SPLASH;
    b64c:	2f ef       	ldi	r18, 0xFF	; 255
    b64e:	47 e1       	ldi	r20, 0x17	; 23
    b650:	69 e0       	ldi	r22, 0x09	; 9
    b652:	84 e0       	ldi	r24, 0x04	; 4
    b654:	0c 94 37 41 	jmp	0x826e	; 0x826e <TriggerNote>

0000b658 <load_tank_rank>:
	}
	demo_counter++;
}

void load_tank_rank()
{
    b658:	ef 92       	push	r14
    b65a:	ff 92       	push	r15
    b65c:	0f 93       	push	r16
    b65e:	1f 93       	push	r17
    b660:	cf 93       	push	r28
    b662:	df 93       	push	r29
    b664:	1f 92       	push	r1
    b666:	cd b7       	in	r28, 0x3d	; 61
    b668:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    b66a:	81 e0       	ldi	r24, 0x01	; 1
    b66c:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    b670:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    b674:	40 e0       	ldi	r20, 0x00	; 0
    b676:	6b e6       	ldi	r22, 0x6B	; 107
    b678:	71 e3       	ldi	r23, 0x31	; 49
    b67a:	80 e0       	ldi	r24, 0x00	; 0
    b67c:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    b680:	40 e0       	ldi	r20, 0x00	; 0
    b682:	63 e5       	ldi	r22, 0x53	; 83
    b684:	71 e3       	ldi	r23, 0x31	; 49
    b686:	84 e0       	ldi	r24, 0x04	; 4
    b688:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    b68c:	02 e0       	ldi	r16, 0x02	; 2
    b68e:	22 e0       	ldi	r18, 0x02	; 2
    b690:	48 e0       	ldi	r20, 0x08	; 8
    b692:	68 e3       	ldi	r22, 0x38	; 56
    b694:	80 e0       	ldi	r24, 0x00	; 0
    b696:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    b69a:	22 e0       	ldi	r18, 0x02	; 2
    b69c:	48 e0       	ldi	r20, 0x08	; 8
    b69e:	60 ea       	ldi	r22, 0xA0	; 160
    b6a0:	84 e0       	ldi	r24, 0x04	; 4
    b6a2:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
	Print(10, 2, &strMap[strHighscores]);
    b6a6:	4a e6       	ldi	r20, 0x6A	; 106
    b6a8:	51 e0       	ldi	r21, 0x01	; 1
    b6aa:	62 e0       	ldi	r22, 0x02	; 2
    b6ac:	70 e0       	ldi	r23, 0x00	; 0
    b6ae:	8a e0       	ldi	r24, 0x0A	; 10
    b6b0:	90 e0       	ldi	r25, 0x00	; 0
    b6b2:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    b6b6:	06 ec       	ldi	r16, 0xC6	; 198
    b6b8:	1b e0       	ldi	r17, 0x0B	; 11
    b6ba:	87 e0       	ldi	r24, 0x07	; 7
    b6bc:	e8 2e       	mov	r14, r24
    b6be:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    b6c0:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    b6c2:	20 e0       	ldi	r18, 0x00	; 0
    b6c4:	43 2f       	mov	r20, r19
    b6c6:	b7 01       	movw	r22, r14
    b6c8:	82 e0       	ldi	r24, 0x02	; 2
    b6ca:	90 e0       	ldi	r25, 0x00	; 0
    b6cc:	39 83       	std	Y+1, r19	; 0x01
    b6ce:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
		PrintChar(3, y, '.');
    b6d2:	4e e2       	ldi	r20, 0x2E	; 46
    b6d4:	b7 01       	movw	r22, r14
    b6d6:	83 e0       	ldi	r24, 0x03	; 3
    b6d8:	90 e0       	ldi	r25, 0x00	; 0
    b6da:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
    b6de:	f8 01       	movw	r30, r16
    b6e0:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    b6e2:	80 81       	ld	r24, Z
    b6e4:	93 e0       	ldi	r25, 0x03	; 3
    b6e6:	89 9f       	mul	r24, r25
    b6e8:	a0 01       	movw	r20, r0
    b6ea:	11 24       	eor	r1, r1
    b6ec:	46 51       	subi	r20, 0x16	; 22
    b6ee:	54 4f       	sbci	r21, 0xF4	; 244
    b6f0:	23 e0       	ldi	r18, 0x03	; 3
    b6f2:	6e 2d       	mov	r22, r14
    b6f4:	85 e0       	ldi	r24, 0x05	; 5
    b6f6:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
		Print(9, y, &strMap[strOwns]);
    b6fa:	4e ed       	ldi	r20, 0xDE	; 222
    b6fc:	51 e0       	ldi	r21, 0x01	; 1
    b6fe:	b7 01       	movw	r22, r14
    b700:	89 e0       	ldi	r24, 0x09	; 9
    b702:	90 e0       	ldi	r25, 0x00	; 0
    b704:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    b708:	f8 01       	movw	r30, r16
    b70a:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    b70c:	80 81       	ld	r24, Z
    b70e:	e3 e0       	ldi	r30, 0x03	; 3
    b710:	8e 9f       	mul	r24, r30
    b712:	a0 01       	movw	r20, r0
    b714:	11 24       	eor	r1, r1
    b716:	46 51       	subi	r20, 0x16	; 22
    b718:	54 4f       	sbci	r21, 0xF4	; 244
    b71a:	23 e0       	ldi	r18, 0x03	; 3
    b71c:	6e 2d       	mov	r22, r14
    b71e:	8e e0       	ldi	r24, 0x0E	; 14
    b720:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
		Print(18, y, &strMap[strBy]);
    b724:	43 ee       	ldi	r20, 0xE3	; 227
    b726:	51 e0       	ldi	r21, 0x01	; 1
    b728:	b7 01       	movw	r22, r14
    b72a:	82 e1       	ldi	r24, 0x12	; 18
    b72c:	90 e0       	ldi	r25, 0x00	; 0
    b72e:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    b732:	f8 01       	movw	r30, r16
    b734:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    b736:	21 e0       	ldi	r18, 0x01	; 1
    b738:	40 81       	ld	r20, Z
    b73a:	b7 01       	movw	r22, r14
    b73c:	87 e1       	ldi	r24, 0x17	; 23
    b73e:	90 e0       	ldi	r25, 0x00	; 0
    b740:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
		PrintChar(24, y, '-');
    b744:	4d e2       	ldi	r20, 0x2D	; 45
    b746:	b7 01       	movw	r22, r14
    b748:	88 e1       	ldi	r24, 0x18	; 24
    b74a:	90 e0       	ldi	r25, 0x00	; 0
    b74c:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    b750:	21 e0       	ldi	r18, 0x01	; 1
    b752:	f8 01       	movw	r30, r16
    b754:	40 81       	ld	r20, Z
    b756:	b7 01       	movw	r22, r14
    b758:	8b e1       	ldi	r24, 0x1B	; 27
    b75a:	90 e0       	ldi	r25, 0x00	; 0
    b75c:	0e 94 b7 4b 	call	0x976e	; 0x976e <PrintByte>
		y += 3;
		rank += 1;
    b760:	39 81       	ldd	r19, Y+1	; 0x01
    b762:	3f 5f       	subi	r19, 0xFF	; 255
    b764:	f3 e0       	ldi	r31, 0x03	; 3
    b766:	ef 0e       	add	r14, r31
    b768:	f1 1c       	adc	r15, r1
    b76a:	0c 5f       	subi	r16, 0xFC	; 252
    b76c:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, &strMap[strHighscores]);
	for (u8 i = 0; i < 20; i += 4)
    b76e:	36 30       	cpi	r19, 0x06	; 6
    b770:	09 f0       	breq	.+2      	; 0xb774 <load_tank_rank+0x11c>
    b772:	a7 cf       	rjmp	.-178    	; 0xb6c2 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
    b774:	46 eb       	ldi	r20, 0xB6	; 182
    b776:	51 e0       	ldi	r21, 0x01	; 1
    b778:	66 e1       	ldi	r22, 0x16	; 22
    b77a:	70 e0       	ldi	r23, 0x00	; 0
    b77c:	83 e0       	ldi	r24, 0x03	; 3
    b77e:	90 e0       	ldi	r25, 0x00	; 0
    b780:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(10, 24, &strMap[strCancelHandle]);
    b784:	4b ea       	ldi	r20, 0xAB	; 171
    b786:	51 e0       	ldi	r21, 0x01	; 1
    b788:	68 e1       	ldi	r22, 0x18	; 24
    b78a:	70 e0       	ldi	r23, 0x00	; 0
    b78c:	8a e0       	ldi	r24, 0x0A	; 10
    b78e:	90 e0       	ldi	r25, 0x00	; 0
}
    b790:	0f 90       	pop	r0
    b792:	df 91       	pop	r29
    b794:	cf 91       	pop	r28
    b796:	1f 91       	pop	r17
    b798:	0f 91       	pop	r16
    b79a:	ff 90       	pop	r15
    b79c:	ef 90       	pop	r14
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
    b79e:	0c 94 ea 4b 	jmp	0x97d4	; 0x97d4 <Print>

0000b7a2 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
    save_score();
    b7a2:	0e 94 b0 4f 	call	0x9f60	; 0x9f60 <save_score>
	fade_through();
    b7a6:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
	SetSpriteVisibility(true);
    b7aa:	81 e0       	ldi	r24, 0x01	; 1
    b7ac:	0e 94 11 4a 	call	0x9422	; 0x9422 <SetSpriteVisibility>
	init_game_state();
    b7b0:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <init_game_state>
	load_tank_rank();
    b7b4:	0c 94 2c 5b 	jmp	0xb658	; 0xb658 <load_tank_rank>

0000b7b8 <update_level_helper>:
    PrintByte(26, 14, loser->score ,true);
}


void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    b7b8:	6f 92       	push	r6
    b7ba:	7f 92       	push	r7
    b7bc:	8f 92       	push	r8
    b7be:	9f 92       	push	r9
    b7c0:	af 92       	push	r10
    b7c2:	bf 92       	push	r11
    b7c4:	df 92       	push	r13
    b7c6:	ef 92       	push	r14
    b7c8:	ff 92       	push	r15
    b7ca:	0f 93       	push	r16
    b7cc:	1f 93       	push	r17
    b7ce:	cf 93       	push	r28
    b7d0:	df 93       	push	r29
    b7d2:	1f 92       	push	r1
    b7d4:	cd b7       	in	r28, 0x3d	; 61
    b7d6:	de b7       	in	r29, 0x3e	; 62
    b7d8:	7c 01       	movw	r14, r24
    b7da:	3b 01       	movw	r6, r22
    b7dc:	8a 01       	movw	r16, r20
	Shot* shot;
	u8 next_level;
	Player* tmp;

	player->shared.recoiled = 0;
    b7de:	fb 01       	movw	r30, r22
    b7e0:	12 82       	std	Z+2, r1	; 0x02
	if ((p->pressed & BTN_START))
    b7e2:	fc 01       	movw	r30, r24
    b7e4:	80 81       	ld	r24, Z
    b7e6:	83 ff       	sbrs	r24, 3
    b7e8:	0f c0       	rjmp	.+30     	; 0xb808 <update_level_helper+0x50>
	{
		SFX_NAVIGATE;
    b7ea:	2f ef       	ldi	r18, 0xFF	; 255
    b7ec:	47 e1       	ldi	r20, 0x17	; 23
    b7ee:	67 e0       	ldi	r22, 0x07	; 7
    b7f0:	84 e0       	ldi	r24, 0x04	; 4
    b7f2:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		game.paused = game.paused ^ 1;
    b7f6:	90 91 0a 0c 	lds	r25, 0x0C0A
    b7fa:	81 e0       	ldi	r24, 0x01	; 1
    b7fc:	89 27       	eor	r24, r25
    b7fe:	80 93 0a 0c 	sts	0x0C0A, r24
		load_level_tiles(false);
    b802:	80 e0       	ldi	r24, 0x00	; 0
    b804:	0e 94 b1 59 	call	0xb362	; 0xb362 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    b808:	20 91 0a 0c 	lds	r18, 0x0C0A
    b80c:	f7 01       	movw	r30, r14
    b80e:	80 81       	ld	r24, Z
    b810:	91 81       	ldd	r25, Z+1	; 0x01
    b812:	21 11       	cpse	r18, r1
    b814:	72 c1       	rjmp	.+740    	; 0xbafa <update_level_helper+0x342>
    b816:	f3 01       	movw	r30, r6
    b818:	24 89       	ldd	r18, Z+20	; 0x14
    b81a:	20 fd       	sbrc	r18, 0
    b81c:	6e c1       	rjmp	.+732    	; 0xbafa <update_level_helper+0x342>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    b81e:	93 ff       	sbrs	r25, 3
    b820:	12 c0       	rjmp	.+36     	; 0xb846 <update_level_helper+0x8e>
    b822:	85 89       	ldd	r24, Z+21	; 0x15
    b824:	8a 35       	cpi	r24, 0x5A	; 90
    b826:	79 f4       	brne	.+30     	; 0xb846 <update_level_helper+0x8e>
		{
			player->banter_frame = 0;
    b828:	15 8a       	std	Z+21, r1	; 0x15
			player->banter_index = (u8) LBRandom(0, 9);
    b82a:	69 e0       	ldi	r22, 0x09	; 9
    b82c:	70 e0       	ldi	r23, 0x00	; 0
    b82e:	80 e0       	ldi	r24, 0x00	; 0
    b830:	90 e0       	ldi	r25, 0x00	; 0
    b832:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
    b836:	f3 01       	movw	r30, r6
    b838:	86 8b       	std	Z+22, r24	; 0x16
			SFX_BANTER;
    b83a:	2f e5       	ldi	r18, 0x5F	; 95
    b83c:	4e e1       	ldi	r20, 0x1E	; 30
    b83e:	60 e0       	ldi	r22, 0x00	; 0
    b840:	84 e0       	ldi	r24, 0x04	; 4
    b842:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		}
		player->shared.speed = player->max_speed;
    b846:	f3 01       	movw	r30, r6
    b848:	60 8d       	ldd	r22, Z+24	; 0x18
    b84a:	61 83       	std	Z+1, r22	; 0x01
		if ((p->held & BTN_UP))
    b84c:	f7 01       	movw	r30, r14
    b84e:	84 81       	ldd	r24, Z+4	; 0x04
    b850:	84 ff       	sbrs	r24, 4
    b852:	17 c0       	rjmp	.+46     	; 0xb882 <update_level_helper+0xca>
		{
			player->shared.direction = D_UP;
    b854:	f3 01       	movw	r30, r6
    b856:	10 82       	st	Z, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    b858:	70 e0       	ldi	r23, 0x00	; 0
    b85a:	80 e0       	ldi	r24, 0x00	; 0
    b85c:	90 e0       	ldi	r25, 0x00	; 0
    b85e:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    b862:	25 e6       	ldi	r18, 0x65	; 101
    b864:	38 e8       	ldi	r19, 0x88	; 136
    b866:	48 e8       	ldi	r20, 0x88	; 136
    b868:	5c e3       	ldi	r21, 0x3C	; 60
    b86a:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b86e:	9b 01       	movw	r18, r22
    b870:	ac 01       	movw	r20, r24
    b872:	f3 01       	movw	r30, r6
    b874:	67 81       	ldd	r22, Z+7	; 0x07
    b876:	70 85       	ldd	r23, Z+8	; 0x08
    b878:	81 85       	ldd	r24, Z+9	; 0x09
    b87a:	92 85       	ldd	r25, Z+10	; 0x0a
    b87c:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    b880:	33 c0       	rjmp	.+102    	; 0xb8e8 <update_level_helper+0x130>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_RIGHT))
    b882:	87 ff       	sbrs	r24, 7
    b884:	18 c0       	rjmp	.+48     	; 0xb8b6 <update_level_helper+0xfe>
		{
			player->shared.direction = D_RIGHT;
    b886:	81 e0       	ldi	r24, 0x01	; 1
    b888:	f3 01       	movw	r30, r6
    b88a:	80 83       	st	Z, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    b88c:	70 e0       	ldi	r23, 0x00	; 0
    b88e:	80 e0       	ldi	r24, 0x00	; 0
    b890:	90 e0       	ldi	r25, 0x00	; 0
    b892:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    b896:	25 e6       	ldi	r18, 0x65	; 101
    b898:	38 e8       	ldi	r19, 0x88	; 136
    b89a:	48 e8       	ldi	r20, 0x88	; 136
    b89c:	5c e3       	ldi	r21, 0x3C	; 60
    b89e:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b8a2:	9b 01       	movw	r18, r22
    b8a4:	ac 01       	movw	r20, r24
    b8a6:	f3 01       	movw	r30, r6
    b8a8:	63 81       	ldd	r22, Z+3	; 0x03
    b8aa:	74 81       	ldd	r23, Z+4	; 0x04
    b8ac:	85 81       	ldd	r24, Z+5	; 0x05
    b8ae:	96 81       	ldd	r25, Z+6	; 0x06
    b8b0:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    b8b4:	38 c0       	rjmp	.+112    	; 0xb926 <update_level_helper+0x16e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_DOWN))
    b8b6:	85 ff       	sbrs	r24, 5
    b8b8:	1d c0       	rjmp	.+58     	; 0xb8f4 <update_level_helper+0x13c>
		{
			player->shared.direction = D_DOWN;
    b8ba:	82 e0       	ldi	r24, 0x02	; 2
    b8bc:	f3 01       	movw	r30, r6
    b8be:	80 83       	st	Z, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    b8c0:	70 e0       	ldi	r23, 0x00	; 0
    b8c2:	80 e0       	ldi	r24, 0x00	; 0
    b8c4:	90 e0       	ldi	r25, 0x00	; 0
    b8c6:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    b8ca:	25 e6       	ldi	r18, 0x65	; 101
    b8cc:	38 e8       	ldi	r19, 0x88	; 136
    b8ce:	48 e8       	ldi	r20, 0x88	; 136
    b8d0:	5c e3       	ldi	r21, 0x3C	; 60
    b8d2:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b8d6:	9b 01       	movw	r18, r22
    b8d8:	ac 01       	movw	r20, r24
    b8da:	f3 01       	movw	r30, r6
    b8dc:	67 81       	ldd	r22, Z+7	; 0x07
    b8de:	70 85       	ldd	r23, Z+8	; 0x08
    b8e0:	81 85       	ldd	r24, Z+9	; 0x09
    b8e2:	92 85       	ldd	r25, Z+10	; 0x0a
    b8e4:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    b8e8:	f3 01       	movw	r30, r6
    b8ea:	67 83       	std	Z+7, r22	; 0x07
    b8ec:	70 87       	std	Z+8, r23	; 0x08
    b8ee:	81 87       	std	Z+9, r24	; 0x09
    b8f0:	92 87       	std	Z+10, r25	; 0x0a
    b8f2:	21 c0       	rjmp	.+66     	; 0xb936 <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else if ((p->held & BTN_LEFT))
    b8f4:	86 ff       	sbrs	r24, 6
    b8f6:	1d c0       	rjmp	.+58     	; 0xb932 <update_level_helper+0x17a>
		{
			player->shared.direction = D_LEFT;
    b8f8:	83 e0       	ldi	r24, 0x03	; 3
    b8fa:	f3 01       	movw	r30, r6
    b8fc:	80 83       	st	Z, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    b8fe:	70 e0       	ldi	r23, 0x00	; 0
    b900:	80 e0       	ldi	r24, 0x00	; 0
    b902:	90 e0       	ldi	r25, 0x00	; 0
    b904:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    b908:	25 e6       	ldi	r18, 0x65	; 101
    b90a:	38 e8       	ldi	r19, 0x88	; 136
    b90c:	48 e8       	ldi	r20, 0x88	; 136
    b90e:	5c e3       	ldi	r21, 0x3C	; 60
    b910:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b914:	9b 01       	movw	r18, r22
    b916:	ac 01       	movw	r20, r24
    b918:	f3 01       	movw	r30, r6
    b91a:	63 81       	ldd	r22, Z+3	; 0x03
    b91c:	74 81       	ldd	r23, Z+4	; 0x04
    b91e:	85 81       	ldd	r24, Z+5	; 0x05
    b920:	96 81       	ldd	r25, Z+6	; 0x06
    b922:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    b926:	f3 01       	movw	r30, r6
    b928:	63 83       	std	Z+3, r22	; 0x03
    b92a:	74 83       	std	Z+4, r23	; 0x04
    b92c:	85 83       	std	Z+5, r24	; 0x05
    b92e:	96 83       	std	Z+6, r25	; 0x06
    b930:	02 c0       	rjmp	.+4      	; 0xb936 <update_level_helper+0x17e>
			//SFX_TRACKS;
		}
		else
		{
			player->shared.speed = 0;
    b932:	f3 01       	movw	r30, r6
    b934:	11 82       	std	Z+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    b936:	f7 01       	movw	r30, r14
    b938:	80 81       	ld	r24, Z
    b93a:	91 81       	ldd	r25, Z+1	; 0x01
    b93c:	93 01       	movw	r18, r6
    b93e:	24 5d       	subi	r18, 0xD4	; 212
    b940:	3f 4f       	sbci	r19, 0xFF	; 255
    b942:	79 01       	movw	r14, r18
    b944:	90 ff       	sbrs	r25, 0
    b946:	36 c0       	rjmp	.+108    	; 0xb9b4 <update_level_helper+0x1fc>
    b948:	f3 01       	movw	r30, r6
    b94a:	81 89       	ldd	r24, Z+17	; 0x11
    b94c:	81 11       	cpse	r24, r1
    b94e:	32 c0       	rjmp	.+100    	; 0xb9b4 <update_level_helper+0x1fc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    b950:	82 ad       	ldd	r24, Z+58	; 0x3a
    b952:	81 11       	cpse	r24, r1
    b954:	2f c0       	rjmp	.+94     	; 0xb9b4 <update_level_helper+0x1fc>
				{
					if (player->has_rocket)
    b956:	81 8d       	ldd	r24, Z+25	; 0x19
    b958:	88 23       	and	r24, r24
    b95a:	61 f0       	breq	.+24     	; 0xb974 <update_level_helper+0x1bc>
					{
						init_shot_state(shot, ROCKET_SHOT);
    b95c:	61 e0       	ldi	r22, 0x01	; 1
    b95e:	c9 01       	movw	r24, r18
    b960:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    b964:	61 e0       	ldi	r22, 0x01	; 1
    b966:	c7 01       	movw	r24, r14
    b968:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <set_shot_animations>
						SFX_ROCKET;
    b96c:	2f ef       	ldi	r18, 0xFF	; 255
    b96e:	47 e1       	ldi	r20, 0x17	; 23
    b970:	68 e0       	ldi	r22, 0x08	; 8
    b972:	0b c0       	rjmp	.+22     	; 0xb98a <update_level_helper+0x1d2>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    b974:	60 e0       	ldi	r22, 0x00	; 0
    b976:	c9 01       	movw	r24, r18
    b978:	0e 94 98 4e 	call	0x9d30	; 0x9d30 <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    b97c:	60 e0       	ldi	r22, 0x00	; 0
    b97e:	c7 01       	movw	r24, r14
    b980:	0e 94 b5 4e 	call	0x9d6a	; 0x9d6a <set_shot_animations>
						SFX_CANNONBALL;
    b984:	2f ef       	ldi	r18, 0xFF	; 255
    b986:	47 e1       	ldi	r20, 0x17	; 23
    b988:	62 e0       	ldi	r22, 0x02	; 2
    b98a:	84 e0       	ldi	r24, 0x04	; 4
    b98c:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
					}
					player->active_shots++;
    b990:	f3 01       	movw	r30, r6
    b992:	81 89       	ldd	r24, Z+17	; 0x11
    b994:	8f 5f       	subi	r24, 0xFF	; 255
    b996:	81 8b       	std	Z+17, r24	; 0x11
					shot->shared.direction = player->shared.direction;
    b998:	80 81       	ld	r24, Z
    b99a:	84 a7       	std	Z+44, r24	; 0x2c
					position_shot(player, shot);
    b99c:	b7 01       	movw	r22, r14
    b99e:	c3 01       	movw	r24, r6
    b9a0:	0e 94 19 50 	call	0xa032	; 0xa032 <position_shot>
					shot->active = 1;
    b9a4:	81 e0       	ldi	r24, 0x01	; 1
    b9a6:	f3 01       	movw	r30, r6
    b9a8:	82 af       	std	Z+58, r24	; 0x3a
					if (player->has_over_speed)
    b9aa:	82 8d       	ldd	r24, Z+26	; 0x1a
    b9ac:	88 23       	and	r24, r24
    b9ae:	11 f0       	breq	.+4      	; 0xb9b4 <update_level_helper+0x1fc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    b9b0:	8a ea       	ldi	r24, 0xAA	; 170
    b9b2:	85 a7       	std	Z+45, r24	; 0x2d

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    b9b4:	f3 01       	movw	r30, r6
    b9b6:	82 ad       	ldd	r24, Z+58	; 0x3a
    b9b8:	88 23       	and	r24, r24
    b9ba:	09 f4       	brne	.+2      	; 0xb9be <update_level_helper+0x206>
    b9bc:	a8 c0       	rjmp	.+336    	; 0xbb0e <update_level_helper+0x356>
			{
				switch (shot->shared.direction)
    b9be:	84 a5       	ldd	r24, Z+44	; 0x2c
    b9c0:	81 30       	cpi	r24, 0x01	; 1
    b9c2:	a9 f1       	breq	.+106    	; 0xba2e <update_level_helper+0x276>
    b9c4:	e8 f0       	brcs	.+58     	; 0xba00 <update_level_helper+0x248>
    b9c6:	82 30       	cpi	r24, 0x02	; 2
    b9c8:	09 f4       	brne	.+2      	; 0xb9cc <update_level_helper+0x214>
    b9ca:	48 c0       	rjmp	.+144    	; 0xba5c <update_level_helper+0x2a4>
    b9cc:	83 30       	cpi	r24, 0x03	; 3
    b9ce:	09 f0       	breq	.+2      	; 0xb9d2 <update_level_helper+0x21a>
    b9d0:	66 c0       	rjmp	.+204    	; 0xba9e <update_level_helper+0x2e6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    b9d2:	f3 01       	movw	r30, r6
    b9d4:	65 a5       	ldd	r22, Z+45	; 0x2d
    b9d6:	70 e0       	ldi	r23, 0x00	; 0
    b9d8:	80 e0       	ldi	r24, 0x00	; 0
    b9da:	90 e0       	ldi	r25, 0x00	; 0
    b9dc:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    b9e0:	25 e6       	ldi	r18, 0x65	; 101
    b9e2:	38 e8       	ldi	r19, 0x88	; 136
    b9e4:	48 e8       	ldi	r20, 0x88	; 136
    b9e6:	5c e3       	ldi	r21, 0x3C	; 60
    b9e8:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    b9ec:	9b 01       	movw	r18, r22
    b9ee:	ac 01       	movw	r20, r24
    b9f0:	f3 01       	movw	r30, r6
    b9f2:	67 a5       	ldd	r22, Z+47	; 0x2f
    b9f4:	70 a9       	ldd	r23, Z+48	; 0x30
    b9f6:	81 a9       	ldd	r24, Z+49	; 0x31
    b9f8:	92 a9       	ldd	r25, Z+50	; 0x32
    b9fa:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    b9fe:	4a c0       	rjmp	.+148    	; 0xba94 <update_level_helper+0x2dc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    ba00:	f3 01       	movw	r30, r6
    ba02:	65 a5       	ldd	r22, Z+45	; 0x2d
    ba04:	70 e0       	ldi	r23, 0x00	; 0
    ba06:	80 e0       	ldi	r24, 0x00	; 0
    ba08:	90 e0       	ldi	r25, 0x00	; 0
    ba0a:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    ba0e:	25 e6       	ldi	r18, 0x65	; 101
    ba10:	38 e8       	ldi	r19, 0x88	; 136
    ba12:	48 e8       	ldi	r20, 0x88	; 136
    ba14:	5c e3       	ldi	r21, 0x3C	; 60
    ba16:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    ba1a:	9b 01       	movw	r18, r22
    ba1c:	ac 01       	movw	r20, r24
    ba1e:	f3 01       	movw	r30, r6
    ba20:	63 a9       	ldd	r22, Z+51	; 0x33
    ba22:	74 a9       	ldd	r23, Z+52	; 0x34
    ba24:	85 a9       	ldd	r24, Z+53	; 0x35
    ba26:	96 a9       	ldd	r25, Z+54	; 0x36
    ba28:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    ba2c:	2d c0       	rjmp	.+90     	; 0xba88 <update_level_helper+0x2d0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    ba2e:	f3 01       	movw	r30, r6
    ba30:	65 a5       	ldd	r22, Z+45	; 0x2d
    ba32:	70 e0       	ldi	r23, 0x00	; 0
    ba34:	80 e0       	ldi	r24, 0x00	; 0
    ba36:	90 e0       	ldi	r25, 0x00	; 0
    ba38:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    ba3c:	25 e6       	ldi	r18, 0x65	; 101
    ba3e:	38 e8       	ldi	r19, 0x88	; 136
    ba40:	48 e8       	ldi	r20, 0x88	; 136
    ba42:	5c e3       	ldi	r21, 0x3C	; 60
    ba44:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    ba48:	9b 01       	movw	r18, r22
    ba4a:	ac 01       	movw	r20, r24
    ba4c:	f3 01       	movw	r30, r6
    ba4e:	67 a5       	ldd	r22, Z+47	; 0x2f
    ba50:	70 a9       	ldd	r23, Z+48	; 0x30
    ba52:	81 a9       	ldd	r24, Z+49	; 0x31
    ba54:	92 a9       	ldd	r25, Z+50	; 0x32
    ba56:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    ba5a:	1c c0       	rjmp	.+56     	; 0xba94 <update_level_helper+0x2dc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    ba5c:	f3 01       	movw	r30, r6
    ba5e:	65 a5       	ldd	r22, Z+45	; 0x2d
    ba60:	70 e0       	ldi	r23, 0x00	; 0
    ba62:	80 e0       	ldi	r24, 0x00	; 0
    ba64:	90 e0       	ldi	r25, 0x00	; 0
    ba66:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    ba6a:	25 e6       	ldi	r18, 0x65	; 101
    ba6c:	38 e8       	ldi	r19, 0x88	; 136
    ba6e:	48 e8       	ldi	r20, 0x88	; 136
    ba70:	5c e3       	ldi	r21, 0x3C	; 60
    ba72:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    ba76:	9b 01       	movw	r18, r22
    ba78:	ac 01       	movw	r20, r24
    ba7a:	f3 01       	movw	r30, r6
    ba7c:	63 a9       	ldd	r22, Z+51	; 0x33
    ba7e:	74 a9       	ldd	r23, Z+52	; 0x34
    ba80:	85 a9       	ldd	r24, Z+53	; 0x35
    ba82:	96 a9       	ldd	r25, Z+54	; 0x36
    ba84:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    ba88:	f3 01       	movw	r30, r6
    ba8a:	63 ab       	std	Z+51, r22	; 0x33
    ba8c:	74 ab       	std	Z+52, r23	; 0x34
    ba8e:	85 ab       	std	Z+53, r24	; 0x35
    ba90:	96 ab       	std	Z+54, r25	; 0x36
    ba92:	05 c0       	rjmp	.+10     	; 0xba9e <update_level_helper+0x2e6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    ba94:	f3 01       	movw	r30, r6
    ba96:	67 a7       	std	Z+47, r22	; 0x2f
    ba98:	70 ab       	std	Z+48, r23	; 0x30
    ba9a:	81 ab       	std	Z+49, r24	; 0x31
    ba9c:	92 ab       	std	Z+50, r25	; 0x32
					default: break;
				}
				shot->distance += (shot->distance <= DISTANCE_TO_ARM) ? FRAME_TIME * shot->shared.speed : 0;
    ba9e:	f3 01       	movw	r30, r6
    baa0:	d3 ac       	ldd	r13, Z+59	; 0x3b
    baa2:	6d 2d       	mov	r22, r13
    baa4:	70 e0       	ldi	r23, 0x00	; 0
    baa6:	80 e0       	ldi	r24, 0x00	; 0
    baa8:	90 e0       	ldi	r25, 0x00	; 0
    baaa:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    baae:	4b 01       	movw	r8, r22
    bab0:	5c 01       	movw	r10, r24
    bab2:	f8 e0       	ldi	r31, 0x08	; 8
    bab4:	fd 15       	cp	r31, r13
    bab6:	88 f0       	brcs	.+34     	; 0xbada <update_level_helper+0x322>
    bab8:	f3 01       	movw	r30, r6
    baba:	85 a5       	ldd	r24, Z+45	; 0x2d
    babc:	68 2f       	mov	r22, r24
    babe:	70 e0       	ldi	r23, 0x00	; 0
    bac0:	80 e0       	ldi	r24, 0x00	; 0
    bac2:	90 e0       	ldi	r25, 0x00	; 0
    bac4:	0e 94 94 66 	call	0xcd28	; 0xcd28 <__floatsisf>
    bac8:	25 e6       	ldi	r18, 0x65	; 101
    baca:	38 e8       	ldi	r19, 0x88	; 136
    bacc:	48 e8       	ldi	r20, 0x88	; 136
    bace:	5c e3       	ldi	r21, 0x3C	; 60
    bad0:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    bad4:	9b 01       	movw	r18, r22
    bad6:	ac 01       	movw	r20, r24
    bad8:	03 c0       	rjmp	.+6      	; 0xbae0 <update_level_helper+0x328>
    bada:	20 e0       	ldi	r18, 0x00	; 0
    badc:	30 e0       	ldi	r19, 0x00	; 0
    bade:	a9 01       	movw	r20, r18
    bae0:	c5 01       	movw	r24, r10
    bae2:	b4 01       	movw	r22, r8
    bae4:	0e 94 91 65 	call	0xcb22	; 0xcb22 <__addsf3>
    bae8:	0e 94 66 66 	call	0xcccc	; 0xcccc <__fixunssfsi>
    baec:	f3 01       	movw	r30, r6
    baee:	63 af       	std	Z+59, r22	; 0x3b
				collision_detect_shot(player, shot);
    baf0:	b7 01       	movw	r22, r14
    baf2:	c3 01       	movw	r24, r6
    baf4:	0e 94 43 56 	call	0xac86	; 0xac86 <collision_detect_shot>
    baf8:	0a c0       	rjmp	.+20     	; 0xbb0e <update_level_helper+0x356>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    bafa:	91 ff       	sbrs	r25, 1
    bafc:	08 c0       	rjmp	.+16     	; 0xbb0e <update_level_helper+0x356>
		{
			SFX_NAVIGATE;
    bafe:	2f ef       	ldi	r18, 0xFF	; 255
    bb00:	47 e1       	ldi	r20, 0x17	; 23
    bb02:	67 e0       	ldi	r22, 0x07	; 7
    bb04:	84 e0       	ldi	r24, 0x04	; 4
    bb06:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
			exit_game();
    bb0a:	0e 94 d1 5b 	call	0xb7a2	; 0xb7a2 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score >= MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    bb0e:	f3 01       	movw	r30, r6
    bb10:	80 89       	ldd	r24, Z+16	; 0x10
    bb12:	8a 30       	cpi	r24, 0x0A	; 10
    bb14:	08 f4       	brcc	.+2      	; 0xbb18 <update_level_helper+0x360>
    bb16:	5c c0       	rjmp	.+184    	; 0xbbd0 <update_level_helper+0x418>
    bb18:	f8 01       	movw	r30, r16
    bb1a:	84 89       	ldd	r24, Z+20	; 0x14
    bb1c:	80 fd       	sbrc	r24, 0
    bb1e:	58 c0       	rjmp	.+176    	; 0xbbd0 <update_level_helper+0x418>
	{
	    next_level = game.current_level + 1;
    bb20:	30 91 09 0c 	lds	r19, 0x0C09
    bb24:	3f 5f       	subi	r19, 0xFF	; 255

	    // Tie breaker
	    if ((next_level >= LEVEL_COUNT) && (other_player->score == player->score)) return;
    bb26:	3a 30       	cpi	r19, 0x0A	; 10
    bb28:	30 f0       	brcs	.+12     	; 0xbb36 <update_level_helper+0x37e>
    bb2a:	97 85       	ldd	r25, Z+15	; 0x0f
    bb2c:	f3 01       	movw	r30, r6
    bb2e:	87 85       	ldd	r24, Z+15	; 0x0f
    bb30:	98 17       	cp	r25, r24
    bb32:	09 f4       	brne	.+2      	; 0xbb36 <update_level_helper+0x37e>
    bb34:	4d c0       	rjmp	.+154    	; 0xbbd0 <update_level_helper+0x418>

		load_level_tiles(true);
    bb36:	81 e0       	ldi	r24, 0x01	; 1
    bb38:	39 83       	std	Y+1, r19	; 0x01
    bb3a:	0e 94 b1 59 	call	0xb362	; 0xb362 <load_level_tiles>
		SetSpriteVisibility(false);
    bb3e:	80 e0       	ldi	r24, 0x00	; 0
    bb40:	0e 94 11 4a 	call	0x9422	; 0x9422 <SetSpriteVisibility>
		print_level_score(player, other_player);
    bb44:	b8 01       	movw	r22, r16
    bb46:	c3 01       	movw	r24, r6
    bb48:	0e 94 86 50 	call	0xa10c	; 0xa10c <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    bb4c:	82 e0       	ldi	r24, 0x02	; 2
    bb4e:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBWaitSeconds>
		player->level_score = 0;
    bb52:	f3 01       	movw	r30, r6
    bb54:	10 8a       	std	Z+16, r1	; 0x10
		other_player->level_score = 0;
    bb56:	f8 01       	movw	r30, r16
    bb58:	10 8a       	std	Z+16, r1	; 0x10
		SFX_LEVEL_CLEAR;
    bb5a:	2f ef       	ldi	r18, 0xFF	; 255
    bb5c:	47 e1       	ldi	r20, 0x17	; 23
    bb5e:	64 e0       	ldi	r22, 0x04	; 4
    bb60:	84 e0       	ldi	r24, 0x04	; 4
    bb62:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		if (next_level >= LEVEL_COUNT)
    bb66:	39 81       	ldd	r19, Y+1	; 0x01
    bb68:	3a 30       	cpi	r19, 0x0A	; 10
    bb6a:	08 f1       	brcs	.+66     	; 0xbbae <update_level_helper+0x3f6>
		{
		    if (other_player->score > player->score)
    bb6c:	f8 01       	movw	r30, r16
    bb6e:	97 85       	ldd	r25, Z+15	; 0x0f
    bb70:	f3 01       	movw	r30, r6
    bb72:	87 85       	ldd	r24, Z+15	; 0x0f
    bb74:	89 17       	cp	r24, r25
    bb76:	20 f4       	brcc	.+8      	; 0xbb80 <update_level_helper+0x3c8>
    bb78:	87 2d       	mov	r24, r7
		    {
		        tmp = player;
		        player = other_player;
    bb7a:	38 01       	movw	r6, r16
		        other_player = tmp;
    bb7c:	0e 2f       	mov	r16, r30
    bb7e:	18 2f       	mov	r17, r24
		    }
		    print_final_score(player, other_player);
    bb80:	b8 01       	movw	r22, r16
    bb82:	c3 01       	movw	r24, r6
    bb84:	0e 94 c8 50 	call	0xa190	; 0xa190 <print_final_score>
		    LBWaitSeconds(TEXT_LINGER);
    bb88:	82 e0       	ldi	r24, 0x02	; 2
    bb8a:	0e 94 4e 4e 	call	0x9c9c	; 0x9c9c <LBWaitSeconds>
		else
		{
			level_transition(next_level);
		}
	}
}
    bb8e:	0f 90       	pop	r0
    bb90:	df 91       	pop	r29
    bb92:	cf 91       	pop	r28
    bb94:	1f 91       	pop	r17
    bb96:	0f 91       	pop	r16
    bb98:	ff 90       	pop	r15
    bb9a:	ef 90       	pop	r14
    bb9c:	df 90       	pop	r13
    bb9e:	bf 90       	pop	r11
    bba0:	af 90       	pop	r10
    bba2:	9f 90       	pop	r9
    bba4:	8f 90       	pop	r8
    bba6:	7f 90       	pop	r7
    bba8:	6f 90       	pop	r6
		        player = other_player;
		        other_player = tmp;
		    }
		    print_final_score(player, other_player);
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
    bbaa:	0c 94 d1 5b 	jmp	0xb7a2	; 0xb7a2 <exit_game>
		}
		else
		{
			level_transition(next_level);
    bbae:	83 2f       	mov	r24, r19
		}
	}
}
    bbb0:	0f 90       	pop	r0
    bbb2:	df 91       	pop	r29
    bbb4:	cf 91       	pop	r28
    bbb6:	1f 91       	pop	r17
    bbb8:	0f 91       	pop	r16
    bbba:	ff 90       	pop	r15
    bbbc:	ef 90       	pop	r14
    bbbe:	df 90       	pop	r13
    bbc0:	bf 90       	pop	r11
    bbc2:	af 90       	pop	r10
    bbc4:	9f 90       	pop	r9
    bbc6:	8f 90       	pop	r8
    bbc8:	7f 90       	pop	r7
    bbca:	6f 90       	pop	r6
		    LBWaitSeconds(TEXT_LINGER);
			exit_game();
		}
		else
		{
			level_transition(next_level);
    bbcc:	0c 94 c6 5a 	jmp	0xb58c	; 0xb58c <level_transition>
		}
	}
}
    bbd0:	0f 90       	pop	r0
    bbd2:	df 91       	pop	r29
    bbd4:	cf 91       	pop	r28
    bbd6:	1f 91       	pop	r17
    bbd8:	0f 91       	pop	r16
    bbda:	ff 90       	pop	r15
    bbdc:	ef 90       	pop	r14
    bbde:	df 90       	pop	r13
    bbe0:	bf 90       	pop	r11
    bbe2:	af 90       	pop	r10
    bbe4:	9f 90       	pop	r9
    bbe6:	8f 90       	pop	r8
    bbe8:	7f 90       	pop	r7
    bbea:	6f 90       	pop	r6
    bbec:	08 95       	ret

0000bbee <update_level>:
	load_level_tiles(false);
	SFX_LEVEL_START;
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    bbee:	cf 92       	push	r12
    bbf0:	df 92       	push	r13
    bbf2:	ef 92       	push	r14
    bbf4:	ff 92       	push	r15
    bbf6:	1f 93       	push	r17
    bbf8:	cf 93       	push	r28
    bbfa:	df 93       	push	r29
    bbfc:	6c 01       	movw	r12, r24
    bbfe:	7b 01       	movw	r14, r22
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;
	static u16 demo_counter = 0;

	// Render
	if (game.paused)
    bc00:	80 91 0a 0c 	lds	r24, 0x0C0A
    bc04:	88 23       	and	r24, r24
    bc06:	d1 f0       	breq	.+52     	; 0xbc3c <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    bc08:	80 e0       	ldi	r24, 0x00	; 0
    bc0a:	0e 94 11 4a 	call	0x9422	; 0x9422 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    bc0e:	4d e6       	ldi	r20, 0x6D	; 109
    bc10:	5d e5       	ldi	r21, 0x5D	; 93
    bc12:	6c e0       	ldi	r22, 0x0C	; 12
    bc14:	88 e0       	ldi	r24, 0x08	; 8
    bc16:	0e 94 6a 4b 	call	0x96d4	; 0x96d4 <DrawMap2>
		Print(12, 13, &strMap[strPaused]);
    bc1a:	4e ea       	ldi	r20, 0xAE	; 174
    bc1c:	52 e0       	ldi	r21, 0x02	; 2
    bc1e:	6d e0       	ldi	r22, 0x0D	; 13
    bc20:	70 e0       	ldi	r23, 0x00	; 0
    bc22:	8c e0       	ldi	r24, 0x0C	; 12
    bc24:	90 e0       	ldi	r25, 0x00	; 0
    bc26:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
		Print(11, 14, &strMap[strExit]);
    bc2a:	45 ea       	ldi	r20, 0xA5	; 165
    bc2c:	52 e0       	ldi	r21, 0x02	; 2
    bc2e:	6e e0       	ldi	r22, 0x0E	; 14
    bc30:	70 e0       	ldi	r23, 0x00	; 0
    bc32:	8b e0       	ldi	r24, 0x0B	; 11
    bc34:	90 e0       	ldi	r25, 0x00	; 0
    bc36:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    bc3a:	44 c0       	rjmp	.+136    	; 0xbcc4 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    bc3c:	81 e0       	ldi	r24, 0x01	; 1
    bc3e:	0e 94 11 4a 	call	0x9422	; 0x9422 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    bc42:	60 e0       	ldi	r22, 0x00	; 0
    bc44:	85 e2       	ldi	r24, 0x25	; 37
    bc46:	9c e0       	ldi	r25, 0x0C	; 12
    bc48:	0e 94 0d 52 	call	0xa41a	; 0xa41a <tank_map>
    bc4c:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    bc4e:	68 2f       	mov	r22, r24
    bc50:	89 e8       	ldi	r24, 0x89	; 137
    bc52:	9f e0       	ldi	r25, 0x0F	; 15
    bc54:	0e 94 0d 52 	call	0xa41a	; 0xa41a <tank_map>
    bc58:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    bc5a:	68 2f       	mov	r22, r24
    bc5c:	85 e2       	ldi	r24, 0x25	; 37
    bc5e:	9c e0       	ldi	r25, 0x0C	; 12
    bc60:	0e 94 8f 52 	call	0xa51e	; 0xa51e <shot_map>
    bc64:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    bc66:	68 2f       	mov	r22, r24
    bc68:	89 e8       	ldi	r24, 0x89	; 137
    bc6a:	9f e0       	ldi	r25, 0x0F	; 15
    bc6c:	0e 94 8f 52 	call	0xa51e	; 0xa51e <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    bc70:	40 91 02 01 	lds	r20, 0x0102
    bc74:	6f e0       	ldi	r22, 0x0F	; 15
    bc76:	85 e2       	ldi	r24, 0x25	; 37
    bc78:	9c e0       	ldi	r25, 0x0C	; 12
    bc7a:	0e 94 4b 51 	call	0xa296	; 0xa296 <render_banter>
    bc7e:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    bc82:	40 91 01 01 	lds	r20, 0x0101
    bc86:	60 e0       	ldi	r22, 0x00	; 0
    bc88:	89 e8       	ldi	r24, 0x89	; 137
    bc8a:	9f e0       	ldi	r25, 0x0F	; 15
    bc8c:	0e 94 4b 51 	call	0xa296	; 0xa296 <render_banter>
    bc90:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    bc94:	60 e0       	ldi	r22, 0x00	; 0
    bc96:	85 e2       	ldi	r24, 0x25	; 37
    bc98:	9c e0       	ldi	r25, 0x0C	; 12
    bc9a:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <render_player>
		render_player(&player2, p2_index);
    bc9e:	61 2f       	mov	r22, r17
    bca0:	89 e8       	ldi	r24, 0x89	; 137
    bca2:	9f e0       	ldi	r25, 0x0F	; 15
    bca4:	0e 94 73 51 	call	0xa2e6	; 0xa2e6 <render_player>
		render_shot(&player1, p1_shot_index);
    bca8:	6d 2f       	mov	r22, r29
    bcaa:	85 e2       	ldi	r24, 0x25	; 37
    bcac:	9c e0       	ldi	r25, 0x0C	; 12
    bcae:	0e 94 9c 51 	call	0xa338	; 0xa338 <render_shot>
		render_shot(&player2, p2_shot_index);
    bcb2:	6c 2f       	mov	r22, r28
    bcb4:	89 e8       	ldi	r24, 0x89	; 137
    bcb6:	9f e0       	ldi	r25, 0x0F	; 15
    bcb8:	0e 94 9c 51 	call	0xa338	; 0xa338 <render_shot>
		render_tile_explosions(&tile_animations);
    bcbc:	8c e0       	ldi	r24, 0x0C	; 12
    bcbe:	9c e0       	ldi	r25, 0x0C	; 12
    bcc0:	0e 94 c8 51 	call	0xa390	; 0xa390 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    bcc4:	2f e0       	ldi	r18, 0x0F	; 15
    bcc6:	49 e8       	ldi	r20, 0x89	; 137
    bcc8:	5f e0       	ldi	r21, 0x0F	; 15
    bcca:	65 e2       	ldi	r22, 0x25	; 37
    bccc:	7c e0       	ldi	r23, 0x0C	; 12
    bcce:	c6 01       	movw	r24, r12
    bcd0:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    bcd4:	20 e0       	ldi	r18, 0x00	; 0
    bcd6:	45 e2       	ldi	r20, 0x25	; 37
    bcd8:	5c e0       	ldi	r21, 0x0C	; 12
    bcda:	69 e8       	ldi	r22, 0x89	; 137
    bcdc:	7f e0       	ldi	r23, 0x0F	; 15
    bcde:	c7 01       	movw	r24, r14
    bce0:	0e 94 dc 5b 	call	0xb7b8	; 0xb7b8 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    bce4:	2f e0       	ldi	r18, 0x0F	; 15
    bce6:	40 e0       	ldi	r20, 0x00	; 0
    bce8:	69 e8       	ldi	r22, 0x89	; 137
    bcea:	7f e0       	ldi	r23, 0x0F	; 15
    bcec:	85 e2       	ldi	r24, 0x25	; 37
    bcee:	9c e0       	ldi	r25, 0x0C	; 12
    bcf0:	0e 94 49 58 	call	0xb092	; 0xb092 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    bcf4:	20 e0       	ldi	r18, 0x00	; 0
    bcf6:	4f e0       	ldi	r20, 0x0F	; 15
    bcf8:	65 e2       	ldi	r22, 0x25	; 37
    bcfa:	7c e0       	ldi	r23, 0x0C	; 12
    bcfc:	89 e8       	ldi	r24, 0x89	; 137
    bcfe:	9f e0       	ldi	r25, 0x0F	; 15
    bd00:	0e 94 49 58 	call	0xb092	; 0xb092 <collision_detect_player>
	
	if (game.selection == CPUVCPU) 
    bd04:	80 91 0b 0c 	lds	r24, 0x0C0B
    bd08:	83 30       	cpi	r24, 0x03	; 3
    bd0a:	69 f4       	brne	.+26     	; 0xbd26 <update_level+0x138>
	{
		demo_counter++;
    bd0c:	80 91 32 0b 	lds	r24, 0x0B32
    bd10:	90 91 33 0b 	lds	r25, 0x0B33
    bd14:	01 96       	adiw	r24, 0x01	; 1
    bd16:	90 93 33 0b 	sts	0x0B33, r25
    bd1a:	80 93 32 0b 	sts	0x0B32, r24
		held = ReadJoypad(0);
    bd1e:	80 e0       	ldi	r24, 0x00	; 0
    bd20:	0e 94 10 3e 	call	0x7c20	; 0x7c20 <ReadJoypad>
    bd24:	02 c0       	rjmp	.+4      	; 0xbd2a <update_level+0x13c>
{
	char p1_index = 0;
	char p2_index = 0;
	char p1_shot_index = 0;
	char p2_shot_index = 0;
	u16 held = 0;
    bd26:	80 e0       	ldi	r24, 0x00	; 0
    bd28:	90 e0       	ldi	r25, 0x00	; 0
	if (game.selection == CPUVCPU) 
	{
		demo_counter++;
		held = ReadJoypad(0);
	}
	if (game.selection == CPUVCPU &&
    bd2a:	20 91 0b 0c 	lds	r18, 0x0C0B
    bd2e:	23 30       	cpi	r18, 0x03	; 3
    bd30:	e1 f4       	brne	.+56     	; 0xbd6a <update_level+0x17c>
    bd32:	8f 70       	andi	r24, 0x0F	; 15
    bd34:	9e 70       	andi	r25, 0x0E	; 14
	    (((held & BTN_X) ||
		 (held & BTN_START) ||
		 (held & BTN_SL) ||
		 (held & BTN_SR) ||
		 (held & BTN_SELECT) ||
		 (held & BTN_Y) ||
    bd36:	89 2b       	or	r24, r25
    bd38:	39 f4       	brne	.+14     	; 0xbd48 <update_level+0x15a>
		 (held & BTN_B)) ||
    bd3a:	80 91 32 0b 	lds	r24, 0x0B32
    bd3e:	90 91 33 0b 	lds	r25, 0x0B33
    bd42:	88 30       	cpi	r24, 0x08	; 8
    bd44:	97 40       	sbci	r25, 0x07	; 7
    bd46:	88 f0       	brcs	.+34     	; 0xbd6a <update_level+0x17c>
		demo_counter >= DEMO_LENGTH)
		)
	{
		demo_counter = 0;
    bd48:	10 92 33 0b 	sts	0x0B33, r1
    bd4c:	10 92 32 0b 	sts	0x0B32, r1
		fade_through();
    bd50:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		init_game_state();
    bd54:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <init_game_state>
		load_splash();
	}
}
    bd58:	df 91       	pop	r29
    bd5a:	cf 91       	pop	r28
    bd5c:	1f 91       	pop	r17
    bd5e:	ff 90       	pop	r15
    bd60:	ef 90       	pop	r14
    bd62:	df 90       	pop	r13
    bd64:	cf 90       	pop	r12
		)
	{
		demo_counter = 0;
		fade_through();
		init_game_state();
		load_splash();
    bd66:	0c 94 f6 5a 	jmp	0xb5ec	; 0xb5ec <load_splash>
	}
}
    bd6a:	df 91       	pop	r29
    bd6c:	cf 91       	pop	r28
    bd6e:	1f 91       	pop	r17
    bd70:	ff 90       	pop	r15
    bd72:	ef 90       	pop	r14
    bd74:	df 90       	pop	r13
    bd76:	cf 90       	pop	r12
    bd78:	08 95       	ret

0000bd7a <update_tank_rank>:
	Print(3, 22, &strMap[strReset]);
	Print(10, 24, &strMap[strCancelHandle]);
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
    bd7a:	cf 93       	push	r28
    bd7c:	df 93       	push	r29
    bd7e:	ec 01       	movw	r28, r24
	// Update
	if (p1->pressed & BTN_X)
    bd80:	88 81       	ld	r24, Y
    bd82:	99 81       	ldd	r25, Y+1	; 0x01
    bd84:	91 ff       	sbrs	r25, 1
    bd86:	0a c0       	rjmp	.+20     	; 0xbd9c <update_tank_rank+0x22>
	{
		SFX_NAVIGATE;
    bd88:	2f ef       	ldi	r18, 0xFF	; 255
    bd8a:	47 e1       	ldi	r20, 0x17	; 23
    bd8c:	67 e0       	ldi	r22, 0x07	; 7
    bd8e:	84 e0       	ldi	r24, 0x04	; 4
    bd90:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		fade_through();
    bd94:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		load_splash();
    bd98:	0e 94 f6 5a 	call	0xb5ec	; 0xb5ec <load_splash>
	}
	if ((p1->held & BTN_SL) && (p1->held_cycles == 255))
    bd9c:	8c 81       	ldd	r24, Y+4	; 0x04
    bd9e:	9d 81       	ldd	r25, Y+5	; 0x05
    bda0:	92 ff       	sbrs	r25, 2
    bda2:	1d c0       	rjmp	.+58     	; 0xbdde <update_tank_rank+0x64>
    bda4:	8e 81       	ldd	r24, Y+6	; 0x06
    bda6:	8f 3f       	cpi	r24, 0xFF	; 255
    bda8:	d1 f4       	brne	.+52     	; 0xbdde <update_tank_rank+0x64>
	{
	    SFX_NAVIGATE;
    bdaa:	2f ef       	ldi	r18, 0xFF	; 255
    bdac:	47 e1       	ldi	r20, 0x17	; 23
    bdae:	67 e0       	ldi	r22, 0x07	; 7
    bdb0:	84 e0       	ldi	r24, 0x04	; 4
    bdb2:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
	    init_scores(&scores);
    bdb6:	81 ec       	ldi	r24, 0xC1	; 193
    bdb8:	9b e0       	ldi	r25, 0x0B	; 11
    bdba:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <init_scores>
	    init_handles(&handles);
    bdbe:	88 ee       	ldi	r24, 0xE8	; 232
    bdc0:	9b e0       	ldi	r25, 0x0B	; 11
    bdc2:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_handles>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    bdc6:	81 ec       	ldi	r24, 0xC1	; 193
    bdc8:	9b e0       	ldi	r25, 0x0B	; 11
    bdca:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <EepromWriteBlock>
    bdce:	88 ee       	ldi	r24, 0xE8	; 232
    bdd0:	9b e0       	ldi	r25, 0x0B	; 11
    bdd2:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <EepromWriteBlock>
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
	}
}
    bdd6:	df 91       	pop	r29
    bdd8:	cf 91       	pop	r28
	    SFX_NAVIGATE;
	    init_scores(&scores);
	    init_handles(&handles);
	    save_eeprom(&scores);
	    save_eeprom(&handles);
	    load_tank_rank();
    bdda:	0c 94 2c 5b 	jmp	0xb658	; 0xb658 <load_tank_rank>
	}
}
    bdde:	df 91       	pop	r29
    bde0:	cf 91       	pop	r28
    bde2:	08 95       	ret

0000bde4 <_handle_select_helper>:


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    bde4:	0f 93       	push	r16
    bde6:	1f 93       	push	r17
    bde8:	cf 93       	push	r28
    bdea:	df 93       	push	r29
    bdec:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    bdee:	fb 01       	movw	r30, r22
    bdf0:	20 81       	ld	r18, Z
    bdf2:	31 81       	ldd	r19, Z+1	; 0x01
    bdf4:	f9 01       	movw	r30, r18
    bdf6:	e0 71       	andi	r30, 0x10	; 16
    bdf8:	ff 27       	eor	r31, r31
    bdfa:	24 ff       	sbrs	r18, 4
    bdfc:	09 c0       	rjmp	.+18     	; 0xbe10 <_handle_select_helper+0x2c>
    bdfe:	8d 81       	ldd	r24, Y+5	; 0x05
    be00:	81 11       	cpse	r24, r1
    be02:	06 c0       	rjmp	.+12     	; 0xbe10 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    be04:	88 81       	ld	r24, Y
    be06:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    be08:	87 ff       	sbrs	r24, 7
    be0a:	0f c0       	rjmp	.+30     	; 0xbe2a <_handle_select_helper+0x46>
    be0c:	18 82       	st	Y, r1
    be0e:	25 c0       	rjmp	.+74     	; 0xbe5a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    be10:	b9 01       	movw	r22, r18
    be12:	60 72       	andi	r22, 0x20	; 32
    be14:	77 27       	eor	r23, r23
    be16:	25 ff       	sbrs	r18, 5
    be18:	0a c0       	rjmp	.+20     	; 0xbe2e <_handle_select_helper+0x4a>
    be1a:	8d 81       	ldd	r24, Y+5	; 0x05
    be1c:	81 11       	cpse	r24, r1
    be1e:	07 c0       	rjmp	.+14     	; 0xbe2e <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    be20:	88 81       	ld	r24, Y
    be22:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    be24:	89 30       	cpi	r24, 0x09	; 9
    be26:	0c f0       	brlt	.+2      	; 0xbe2a <_handle_select_helper+0x46>
    be28:	88 e0       	ldi	r24, 0x08	; 8
    be2a:	88 83       	st	Y, r24
    be2c:	16 c0       	rjmp	.+44     	; 0xbe5a <_handle_select_helper+0x76>
    be2e:	ca 01       	movw	r24, r20
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    be30:	a9 01       	movw	r20, r18
    be32:	44 27       	eor	r20, r20
    be34:	51 70       	andi	r21, 0x01	; 1
    be36:	30 ff       	sbrs	r19, 0
    be38:	1a c0       	rjmp	.+52     	; 0xbe6e <_handle_select_helper+0x8a>
    be3a:	ad 81       	ldd	r26, Y+5	; 0x05
    be3c:	a1 11       	cpse	r26, r1
    be3e:	17 c0       	rjmp	.+46     	; 0xbe6e <_handle_select_helper+0x8a>
	{
		ps->select_state = EDITING;
    be40:	81 e0       	ldi	r24, 0x01	; 1
    be42:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    be44:	69 91       	ld	r22, Y+
    be46:	f3 e0       	ldi	r31, 0x03	; 3
    be48:	6f 02       	muls	r22, r31
    be4a:	b0 01       	movw	r22, r0
    be4c:	11 24       	eor	r1, r1
    be4e:	66 51       	subi	r22, 0x16	; 22
    be50:	74 4f       	sbci	r23, 0xF4	; 244
    be52:	43 e0       	ldi	r20, 0x03	; 3
    be54:	ce 01       	movw	r24, r28
    be56:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		SFX_NAVIGATE;
    be5a:	2f ef       	ldi	r18, 0xFF	; 255
    be5c:	47 e1       	ldi	r20, 0x17	; 23
    be5e:	67 e0       	ldi	r22, 0x07	; 7
    be60:	84 e0       	ldi	r24, 0x04	; 4
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
	}
}
    be62:	df 91       	pop	r29
    be64:	cf 91       	pop	r28
    be66:	1f 91       	pop	r17
    be68:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
		SFX_NAVIGATE;
    be6a:	0c 94 37 41 	jmp	0x826e	; 0x826e <TriggerNote>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    be6e:	27 ff       	sbrs	r18, 7
    be70:	09 c0       	rjmp	.+18     	; 0xbe84 <_handle_select_helper+0xa0>
    be72:	ad 81       	ldd	r26, Y+5	; 0x05
    be74:	a1 30       	cpi	r26, 0x01	; 1
    be76:	31 f4       	brne	.+12     	; 0xbe84 <_handle_select_helper+0xa0>
	{
		ps->char_index++;
    be78:	8c 81       	ldd	r24, Y+4	; 0x04
    be7a:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    be7c:	83 30       	cpi	r24, 0x03	; 3
    be7e:	5c f0       	brlt	.+22     	; 0xbe96 <_handle_select_helper+0xb2>
    be80:	82 e0       	ldi	r24, 0x02	; 2
    be82:	09 c0       	rjmp	.+18     	; 0xbe96 <_handle_select_helper+0xb2>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    be84:	26 ff       	sbrs	r18, 6
    be86:	0b c0       	rjmp	.+22     	; 0xbe9e <_handle_select_helper+0xba>
    be88:	ed 81       	ldd	r30, Y+5	; 0x05
    be8a:	e1 30       	cpi	r30, 0x01	; 1
    be8c:	41 f5       	brne	.+80     	; 0xbede <_handle_select_helper+0xfa>
	{
		ps->char_index--;
    be8e:	8c 81       	ldd	r24, Y+4	; 0x04
    be90:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    be92:	87 fd       	sbrc	r24, 7
    be94:	02 c0       	rjmp	.+4      	; 0xbe9a <_handle_select_helper+0xb6>
		if (ps->char_index > 2) ps->char_index = 2;
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
	{
		ps->char_index--;
    be96:	8c 83       	std	Y+4, r24	; 0x04
    be98:	e0 cf       	rjmp	.-64     	; 0xbe5a <_handle_select_helper+0x76>
		if (ps->char_index < 0) ps->char_index = 0;
    be9a:	1c 82       	std	Y+4, r1	; 0x04
    be9c:	de cf       	rjmp	.-68     	; 0xbe5a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    be9e:	ef 2b       	or	r30, r31
    bea0:	69 f0       	breq	.+26     	; 0xbebc <_handle_select_helper+0xd8>
    bea2:	8d 81       	ldd	r24, Y+5	; 0x05
    bea4:	81 30       	cpi	r24, 0x01	; 1
    bea6:	09 f0       	breq	.+2      	; 0xbeaa <_handle_select_helper+0xc6>
    bea8:	43 c0       	rjmp	.+134    	; 0xbf30 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]--;
    beaa:	8c 81       	ldd	r24, Y+4	; 0x04
    beac:	c8 0f       	add	r28, r24
    beae:	d1 1d       	adc	r29, r1
    beb0:	99 81       	ldd	r25, Y+1	; 0x01
    beb2:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    beb4:	91 34       	cpi	r25, 0x41	; 65
    beb6:	70 f4       	brcc	.+28     	; 0xbed4 <_handle_select_helper+0xf0>
    beb8:	81 e4       	ldi	r24, 0x41	; 65
    beba:	0f c0       	rjmp	.+30     	; 0xbeda <_handle_select_helper+0xf6>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    bebc:	67 2b       	or	r22, r23
    bebe:	89 f0       	breq	.+34     	; 0xbee2 <_handle_select_helper+0xfe>
    bec0:	8d 81       	ldd	r24, Y+5	; 0x05
    bec2:	81 30       	cpi	r24, 0x01	; 1
    bec4:	a9 f5       	brne	.+106    	; 0xbf30 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
    bec6:	8c 81       	ldd	r24, Y+4	; 0x04
    bec8:	c8 0f       	add	r28, r24
    beca:	d1 1d       	adc	r29, r1
    becc:	99 81       	ldd	r25, Y+1	; 0x01
    bece:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    bed0:	9b 35       	cpi	r25, 0x5B	; 91
    bed2:	10 f4       	brcc	.+4      	; 0xbed8 <_handle_select_helper+0xf4>
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    bed4:	99 83       	std	Y+1, r25	; 0x01
    bed6:	c1 cf       	rjmp	.-126    	; 0xbe5a <_handle_select_helper+0x76>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    bed8:	8a e5       	ldi	r24, 0x5A	; 90
    beda:	89 83       	std	Y+1, r24	; 0x01
    bedc:	be cf       	rjmp	.-132    	; 0xbe5a <_handle_select_helper+0x76>
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    bede:	67 2b       	or	r22, r23
    bee0:	39 f5       	brne	.+78     	; 0xbf30 <_handle_select_helper+0x14c>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    bee2:	45 2b       	or	r20, r21
    bee4:	29 f1       	breq	.+74     	; 0xbf30 <_handle_select_helper+0x14c>
    bee6:	4d 81       	ldd	r20, Y+5	; 0x05
    bee8:	41 30       	cpi	r20, 0x01	; 1
    beea:	11 f5       	brne	.+68     	; 0xbf30 <_handle_select_helper+0x14c>
	{
		player->handle_id = ps->handle_id;
    beec:	fe 01       	movw	r30, r28
    beee:	21 91       	ld	r18, Z+
    bef0:	8f 01       	movw	r16, r30
    bef2:	fc 01       	movw	r30, r24
    bef4:	23 87       	std	Z+11, r18	; 0x0b
		LBCopyChars(player->handle, ps->handle, 3);
    bef6:	43 e0       	ldi	r20, 0x03	; 3
    bef8:	b8 01       	movw	r22, r16
    befa:	0c 96       	adiw	r24, 0x0c	; 12
    befc:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    bf00:	88 81       	ld	r24, Y
    bf02:	f3 e0       	ldi	r31, 0x03	; 3
    bf04:	8f 02       	muls	r24, r31
    bf06:	c0 01       	movw	r24, r0
    bf08:	11 24       	eor	r1, r1
    bf0a:	43 e0       	ldi	r20, 0x03	; 3
    bf0c:	b8 01       	movw	r22, r16
    bf0e:	86 51       	subi	r24, 0x16	; 22
    bf10:	94 4f       	sbci	r25, 0xF4	; 244
    bf12:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		SFX_NAVIGATE;
    bf16:	2f ef       	ldi	r18, 0xFF	; 255
    bf18:	47 e1       	ldi	r20, 0x17	; 23
    bf1a:	67 e0       	ldi	r22, 0x07	; 7
    bf1c:	84 e0       	ldi	r24, 0x04	; 4
    bf1e:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    bf22:	88 ee       	ldi	r24, 0xE8	; 232
    bf24:	9b e0       	ldi	r25, 0x0B	; 11
    bf26:	0e 94 01 3f 	call	0x7e02	; 0x7e02 <EepromWriteBlock>
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		SFX_NAVIGATE;
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    bf2a:	82 e0       	ldi	r24, 0x02	; 2
    bf2c:	8d 83       	std	Y+5, r24	; 0x05
    bf2e:	1a c0       	rjmp	.+52     	; 0xbf64 <_handle_select_helper+0x180>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    bf30:	31 ff       	sbrs	r19, 1
    bf32:	18 c0       	rjmp	.+48     	; 0xbf64 <_handle_select_helper+0x180>
    bf34:	8d 81       	ldd	r24, Y+5	; 0x05
    bf36:	81 30       	cpi	r24, 0x01	; 1
    bf38:	11 f4       	brne	.+4      	; 0xbf3e <_handle_select_helper+0x15a>
	{
		ps->select_state = SELECTING;
    bf3a:	1d 82       	std	Y+5, r1	; 0x05
    bf3c:	8e cf       	rjmp	.-228    	; 0xbe5a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    bf3e:	82 30       	cpi	r24, 0x02	; 2
    bf40:	19 f4       	brne	.+6      	; 0xbf48 <_handle_select_helper+0x164>
	{
		ps->select_state = EDITING;
    bf42:	81 e0       	ldi	r24, 0x01	; 1
    bf44:	8d 83       	std	Y+5, r24	; 0x05
    bf46:	89 cf       	rjmp	.-238    	; 0xbe5a <_handle_select_helper+0x76>
		SFX_NAVIGATE;
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
    bf48:	2f ef       	ldi	r18, 0xFF	; 255
    bf4a:	47 e1       	ldi	r20, 0x17	; 23
    bf4c:	67 e0       	ldi	r22, 0x07	; 7
    bf4e:	84 e0       	ldi	r24, 0x04	; 4
    bf50:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		fade_through();
    bf54:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		load_splash();
	}
}
    bf58:	df 91       	pop	r29
    bf5a:	cf 91       	pop	r28
    bf5c:	1f 91       	pop	r17
    bf5e:	0f 91       	pop	r16
	}
	else if ((p->pressed & BTN_X))
	{
		SFX_NAVIGATE;
		fade_through();
		load_splash();
    bf60:	0c 94 f6 5a 	jmp	0xb5ec	; 0xb5ec <load_splash>
	}
}
    bf64:	df 91       	pop	r29
    bf66:	cf 91       	pop	r28
    bf68:	1f 91       	pop	r17
    bf6a:	0f 91       	pop	r16
    bf6c:	08 95       	ret

0000bf6e <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    bf6e:	af 92       	push	r10
    bf70:	bf 92       	push	r11
    bf72:	df 92       	push	r13
    bf74:	ef 92       	push	r14
    bf76:	ff 92       	push	r15
    bf78:	0f 93       	push	r16
    bf7a:	1f 93       	push	r17
    bf7c:	cf 93       	push	r28
    bf7e:	df 93       	push	r29
    bf80:	00 d0       	rcall	.+0      	; 0xbf82 <_handle_select_render_helper+0x14>
    bf82:	1f 92       	push	r1
    bf84:	cd b7       	in	r28, 0x3d	; 61
    bf86:	de b7       	in	r29, 0x3e	; 62
    bf88:	7c 01       	movw	r14, r24
    bf8a:	14 2f       	mov	r17, r20
    bf8c:	d2 2e       	mov	r13, r18
	u8 tmp[3] = {' ', ' ', ' '};
    bf8e:	80 e2       	ldi	r24, 0x20	; 32
    bf90:	89 83       	std	Y+1, r24	; 0x01
    bf92:	8a 83       	std	Y+2, r24	; 0x02
    bf94:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    bf96:	f7 01       	movw	r30, r14
    bf98:	85 81       	ldd	r24, Z+5	; 0x05
    bf9a:	81 11       	cpse	r24, r1
    bf9c:	16 c0       	rjmp	.+44     	; 0xbfca <_handle_select_render_helper+0x5c>
	{
		MapSprite2(idx, map_ball, 0);
    bf9e:	40 e0       	ldi	r20, 0x00	; 0
    bfa0:	6c e2       	ldi	r22, 0x2C	; 44
    bfa2:	71 e3       	ldi	r23, 0x31	; 49
    bfa4:	82 2f       	mov	r24, r18
    bfa6:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    bfaa:	f7 01       	movw	r30, r14
    bfac:	40 81       	ld	r20, Z
    bfae:	44 0f       	add	r20, r20
    bfb0:	44 0f       	add	r20, r20
    bfb2:	44 0f       	add	r20, r20
    bfb4:	40 5c       	subi	r20, 0xC0	; 192
    bfb6:	01 e0       	ldi	r16, 0x01	; 1
    bfb8:	21 e0       	ldi	r18, 0x01	; 1
    bfba:	61 2f       	mov	r22, r17
    bfbc:	66 0f       	add	r22, r22
    bfbe:	66 0f       	add	r22, r22
    bfc0:	66 0f       	add	r22, r22
    bfc2:	8d 2d       	mov	r24, r13
    bfc4:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
    bfc8:	49 c0       	rjmp	.+146    	; 0xc05c <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == EDITING)
    bfca:	81 30       	cpi	r24, 0x01	; 1
    bfcc:	31 f5       	brne	.+76     	; 0xc01a <_handle_select_render_helper+0xac>
	{
		MapSprite2(idx, map_ball, 0);
    bfce:	40 e0       	ldi	r20, 0x00	; 0
    bfd0:	6c e2       	ldi	r22, 0x2C	; 44
    bfd2:	71 e3       	ldi	r23, 0x31	; 49
    bfd4:	82 2f       	mov	r24, r18
    bfd6:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    bfda:	f7 01       	movw	r30, r14
    bfdc:	40 81       	ld	r20, Z
    bfde:	44 0f       	add	r20, r20
    bfe0:	44 0f       	add	r20, r20
    bfe2:	44 0f       	add	r20, r20
    bfe4:	48 5c       	subi	r20, 0xC8	; 200
    bfe6:	61 2f       	mov	r22, r17
    bfe8:	70 e0       	ldi	r23, 0x00	; 0
    bfea:	6b 5f       	subi	r22, 0xFB	; 251
    bfec:	7f 4f       	sbci	r23, 0xFF	; 255
    bfee:	84 81       	ldd	r24, Z+4	; 0x04
    bff0:	68 0f       	add	r22, r24
    bff2:	71 1d       	adc	r23, r1
    bff4:	87 fd       	sbrc	r24, 7
    bff6:	7a 95       	dec	r23
    bff8:	66 0f       	add	r22, r22
    bffa:	66 0f       	add	r22, r22
    bffc:	66 0f       	add	r22, r22
    bffe:	01 e0       	ldi	r16, 0x01	; 1
    c000:	21 e0       	ldi	r18, 0x01	; 1
    c002:	8d 2d       	mov	r24, r13
    c004:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    c008:	43 e0       	ldi	r20, 0x03	; 3
    c00a:	b7 01       	movw	r22, r14
    c00c:	6f 5f       	subi	r22, 0xFF	; 255
    c00e:	7f 4f       	sbci	r23, 0xFF	; 255
    c010:	ce 01       	movw	r24, r28
    c012:	01 96       	adiw	r24, 0x01	; 1
    c014:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
    c018:	21 c0       	rjmp	.+66     	; 0xc05c <_handle_select_render_helper+0xee>
	}
	else if (ps->select_state == CONFIRMED)
    c01a:	82 30       	cpi	r24, 0x02	; 2
    c01c:	f9 f4       	brne	.+62     	; 0xc05c <_handle_select_render_helper+0xee>
	{
		PrintChar(x_offset+6, 5, '(');
    c01e:	a4 2e       	mov	r10, r20
    c020:	b1 2c       	mov	r11, r1
    c022:	48 e2       	ldi	r20, 0x28	; 40
    c024:	65 e0       	ldi	r22, 0x05	; 5
    c026:	70 e0       	ldi	r23, 0x00	; 0
    c028:	c5 01       	movw	r24, r10
    c02a:	06 96       	adiw	r24, 0x06	; 6
    c02c:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    c030:	23 e0       	ldi	r18, 0x03	; 3
    c032:	a7 01       	movw	r20, r14
    c034:	4f 5f       	subi	r20, 0xFF	; 255
    c036:	5f 4f       	sbci	r21, 0xFF	; 255
    c038:	65 e0       	ldi	r22, 0x05	; 5
    c03a:	87 e0       	ldi	r24, 0x07	; 7
    c03c:	81 0f       	add	r24, r17
    c03e:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    c042:	49 e2       	ldi	r20, 0x29	; 41
    c044:	65 e0       	ldi	r22, 0x05	; 5
    c046:	70 e0       	ldi	r23, 0x00	; 0
    c048:	c5 01       	movw	r24, r10
    c04a:	0a 96       	adiw	r24, 0x0a	; 10
    c04c:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
		MapSprite2(idx, map_none, 0);
    c050:	40 e0       	ldi	r20, 0x00	; 0
    c052:	67 e7       	ldi	r22, 0x77	; 119
    c054:	71 e3       	ldi	r23, 0x31	; 49
    c056:	8d 2d       	mov	r24, r13
    c058:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    c05c:	f7 01       	movw	r30, r14
    c05e:	60 81       	ld	r22, Z
    c060:	68 5f       	subi	r22, 0xF8	; 248
    c062:	23 e0       	ldi	r18, 0x03	; 3
    c064:	ae 01       	movw	r20, r28
    c066:	4f 5f       	subi	r20, 0xFF	; 255
    c068:	5f 4f       	sbci	r21, 0xFF	; 255
    c06a:	85 e0       	ldi	r24, 0x05	; 5
    c06c:	81 0f       	add	r24, r17
    c06e:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <LBPrintStr>
}
    c072:	0f 90       	pop	r0
    c074:	0f 90       	pop	r0
    c076:	0f 90       	pop	r0
    c078:	df 91       	pop	r29
    c07a:	cf 91       	pop	r28
    c07c:	1f 91       	pop	r17
    c07e:	0f 91       	pop	r16
    c080:	ff 90       	pop	r15
    c082:	ef 90       	pop	r14
    c084:	df 90       	pop	r13
    c086:	bf 90       	pop	r11
    c088:	af 90       	pop	r10
    c08a:	08 95       	ret

0000c08c <load_handle_select>:

void load_handle_select()
{
    c08c:	8f 92       	push	r8
    c08e:	9f 92       	push	r9
    c090:	af 92       	push	r10
    c092:	bf 92       	push	r11
    c094:	cf 92       	push	r12
    c096:	df 92       	push	r13
    c098:	ef 92       	push	r14
    c09a:	ff 92       	push	r15
    c09c:	0f 93       	push	r16
    c09e:	1f 93       	push	r17
    c0a0:	cf 93       	push	r28
    c0a2:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    c0a4:	82 e0       	ldi	r24, 0x02	; 2
    c0a6:	80 93 08 0c 	sts	0x0C08, r24
	clear_sprites();
    c0aa:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    c0ae:	40 e0       	ldi	r20, 0x00	; 0
    c0b0:	6b e6       	ldi	r22, 0x6B	; 107
    c0b2:	71 e3       	ldi	r23, 0x31	; 49
    c0b4:	80 e0       	ldi	r24, 0x00	; 0
    c0b6:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    c0ba:	40 e0       	ldi	r20, 0x00	; 0
    c0bc:	63 e5       	ldi	r22, 0x53	; 83
    c0be:	71 e3       	ldi	r23, 0x31	; 49
    c0c0:	84 e0       	ldi	r24, 0x04	; 4
    c0c2:	0e 94 e8 4a 	call	0x95d0	; 0x95d0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    c0c6:	02 e0       	ldi	r16, 0x02	; 2
    c0c8:	22 e0       	ldi	r18, 0x02	; 2
    c0ca:	40 e2       	ldi	r20, 0x20	; 32
    c0cc:	68 e1       	ldi	r22, 0x18	; 24
    c0ce:	80 e0       	ldi	r24, 0x00	; 0
    c0d0:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    c0d4:	22 e0       	ldi	r18, 0x02	; 2
    c0d6:	40 e2       	ldi	r20, 0x20	; 32
    c0d8:	60 ea       	ldi	r22, 0xA0	; 160
    c0da:	84 e0       	ldi	r24, 0x04	; 4
    c0dc:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
	Print(9, 1, &strMap[strHandlesTitle]);
    c0e0:	44 e7       	ldi	r20, 0x74	; 116
    c0e2:	51 e0       	ldi	r21, 0x01	; 1
    c0e4:	61 e0       	ldi	r22, 0x01	; 1
    c0e6:	70 e0       	ldi	r23, 0x00	; 0
    c0e8:	89 e0       	ldi	r24, 0x09	; 9
    c0ea:	90 e0       	ldi	r25, 0x00	; 0
    c0ec:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(6, 5, &strMap[strPlayer1]);
    c0f0:	4e e8       	ldi	r20, 0x8E	; 142
    c0f2:	51 e0       	ldi	r21, 0x01	; 1
    c0f4:	65 e0       	ldi	r22, 0x05	; 5
    c0f6:	70 e0       	ldi	r23, 0x00	; 0
    c0f8:	86 e0       	ldi	r24, 0x06	; 6
    c0fa:	90 e0       	ldi	r25, 0x00	; 0
    c0fc:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(23, 5, &strMap[strPlayer2]);
    c100:	41 e9       	ldi	r20, 0x91	; 145
    c102:	51 e0       	ldi	r21, 0x01	; 1
    c104:	65 e0       	ldi	r22, 0x05	; 5
    c106:	70 e0       	ldi	r23, 0x00	; 0
    c108:	87 e1       	ldi	r24, 0x17	; 23
    c10a:	90 e0       	ldi	r25, 0x00	; 0
    c10c:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
    c110:	8a ee       	ldi	r24, 0xEA	; 234
    c112:	e8 2e       	mov	r14, r24
    c114:	8b e0       	ldi	r24, 0x0B	; 11
    c116:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    c118:	c0 e0       	ldi	r28, 0x00	; 0
    c11a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    c11c:	93 e0       	ldi	r25, 0x03	; 3
    c11e:	a9 2e       	mov	r10, r25
    c120:	b1 2c       	mov	r11, r1
    c122:	67 01       	movw	r12, r14
    c124:	ce 01       	movw	r24, r28
    c126:	b5 01       	movw	r22, r10
    c128:	0e 94 76 65 	call	0xcaec	; 0xcaec <__divmodhi4>
    c12c:	4c 01       	movw	r8, r24
    c12e:	8b 01       	movw	r16, r22
    c130:	08 5f       	subi	r16, 0xF8	; 248
    c132:	1f 4f       	sbci	r17, 0xFF	; 255
    c134:	f7 01       	movw	r30, r14
    c136:	41 91       	ld	r20, Z+
    c138:	7f 01       	movw	r14, r30
    c13a:	b8 01       	movw	r22, r16
    c13c:	03 96       	adiw	r24, 0x03	; 3
    c13e:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    c142:	f6 01       	movw	r30, r12
    c144:	40 81       	ld	r20, Z
    c146:	b8 01       	movw	r22, r16
    c148:	c4 01       	movw	r24, r8
    c14a:	44 96       	adiw	r24, 0x14	; 20
    c14c:	0e 94 05 4c 	call	0x980a	; 0x980a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, &strMap[strHandlesTitle]);
	Print(6, 5, &strMap[strPlayer1]);
	Print(23, 5, &strMap[strPlayer2]);
	for (int i = 0; i < 27; i += 1)
    c150:	21 96       	adiw	r28, 0x01	; 1
    c152:	cb 31       	cpi	r28, 0x1B	; 27
    c154:	d1 05       	cpc	r29, r1
    c156:	29 f7       	brne	.-54     	; 0xc122 <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
    c158:	44 e9       	ldi	r20, 0x94	; 148
    c15a:	51 e0       	ldi	r21, 0x01	; 1
    c15c:	65 e1       	ldi	r22, 0x15	; 21
    c15e:	70 e0       	ldi	r23, 0x00	; 0
    c160:	88 e0       	ldi	r24, 0x08	; 8
    c162:	90 e0       	ldi	r25, 0x00	; 0
    c164:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(8, 22, &strMap[strConfirmHandle]);
    c168:	4f e9       	ldi	r20, 0x9F	; 159
    c16a:	51 e0       	ldi	r21, 0x01	; 1
    c16c:	66 e1       	ldi	r22, 0x16	; 22
    c16e:	70 e0       	ldi	r23, 0x00	; 0
    c170:	88 e0       	ldi	r24, 0x08	; 8
    c172:	90 e0       	ldi	r25, 0x00	; 0
    c174:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(8, 23, &strMap[strCancelHandle]);
    c178:	4b ea       	ldi	r20, 0xAB	; 171
    c17a:	51 e0       	ldi	r21, 0x01	; 1
    c17c:	67 e1       	ldi	r22, 0x17	; 23
    c17e:	70 e0       	ldi	r23, 0x00	; 0
    c180:	88 e0       	ldi	r24, 0x08	; 8
    c182:	90 e0       	ldi	r25, 0x00	; 0
    c184:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>
	Print(8, 24, &strMap[strChangeHandle]);
    c188:	4f ec       	ldi	r20, 0xCF	; 207
    c18a:	51 e0       	ldi	r21, 0x01	; 1
    c18c:	68 e1       	ldi	r22, 0x18	; 24
    c18e:	70 e0       	ldi	r23, 0x00	; 0
    c190:	88 e0       	ldi	r24, 0x08	; 8
    c192:	90 e0       	ldi	r25, 0x00	; 0
}
    c194:	df 91       	pop	r29
    c196:	cf 91       	pop	r28
    c198:	1f 91       	pop	r17
    c19a:	0f 91       	pop	r16
    c19c:	ff 90       	pop	r15
    c19e:	ef 90       	pop	r14
    c1a0:	df 90       	pop	r13
    c1a2:	cf 90       	pop	r12
    c1a4:	bf 90       	pop	r11
    c1a6:	af 90       	pop	r10
    c1a8:	9f 90       	pop	r9
    c1aa:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, &strMap[strSelectHandle]);
	Print(8, 22, &strMap[strConfirmHandle]);
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
    c1ac:	0c 94 ea 4b 	jmp	0x97d4	; 0x97d4 <Print>

0000c1b0 <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    c1b0:	0f 93       	push	r16
    c1b2:	cf 93       	push	r28
    c1b4:	df 93       	push	r29
    c1b6:	ec 01       	movw	r28, r24
	static u16 demo_counter = 0;
	
	// Render
	switch (game.selection)
    c1b8:	90 91 0b 0c 	lds	r25, 0x0C0B
    c1bc:	91 30       	cpi	r25, 0x01	; 1
    c1be:	41 f0       	breq	.+16     	; 0xc1d0 <update_splash+0x20>
    c1c0:	92 30       	cpi	r25, 0x02	; 2
    c1c2:	51 f0       	breq	.+20     	; 0xc1d8 <update_splash+0x28>
    c1c4:	91 11       	cpse	r25, r1
    c1c6:	0f c0       	rjmp	.+30     	; 0xc1e6 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    c1c8:	01 e0       	ldi	r16, 0x01	; 1
    c1ca:	21 e0       	ldi	r18, 0x01	; 1
    c1cc:	48 e6       	ldi	r20, 0x68	; 104
    c1ce:	07 c0       	rjmp	.+14     	; 0xc1de <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    c1d0:	01 e0       	ldi	r16, 0x01	; 1
    c1d2:	21 e0       	ldi	r18, 0x01	; 1
    c1d4:	40 e7       	ldi	r20, 0x70	; 112
    c1d6:	03 c0       	rjmp	.+6      	; 0xc1de <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    c1d8:	01 e0       	ldi	r16, 0x01	; 1
    c1da:	21 e0       	ldi	r18, 0x01	; 1
    c1dc:	48 e7       	ldi	r20, 0x78	; 120
    c1de:	60 e3       	ldi	r22, 0x30	; 48
    c1e0:	80 e0       	ldi	r24, 0x00	; 0
    c1e2:	0e 94 3a 4b 	call	0x9674	; 0x9674 <MoveSprite>
			break;
	}
	Print(9, 21, &strMap[strSelectHandle]);
    c1e6:	44 e9       	ldi	r20, 0x94	; 148
    c1e8:	51 e0       	ldi	r21, 0x01	; 1
    c1ea:	65 e1       	ldi	r22, 0x15	; 21
    c1ec:	70 e0       	ldi	r23, 0x00	; 0
    c1ee:	89 e0       	ldi	r24, 0x09	; 9
    c1f0:	90 e0       	ldi	r25, 0x00	; 0
    c1f2:	0e 94 ea 4b 	call	0x97d4	; 0x97d4 <Print>

	// Update
	if (p1->pressed) demo_counter = 0;
    c1f6:	88 81       	ld	r24, Y
    c1f8:	99 81       	ldd	r25, Y+1	; 0x01
    c1fa:	00 97       	sbiw	r24, 0x00	; 0
    c1fc:	21 f0       	breq	.+8      	; 0xc206 <update_splash+0x56>
    c1fe:	10 92 31 0b 	sts	0x0B31, r1
    c202:	10 92 30 0b 	sts	0x0B30, r1
	
	if (p1->pressed & BTN_UP)
    c206:	84 ff       	sbrs	r24, 4
    c208:	0e c0       	rjmp	.+28     	; 0xc226 <update_splash+0x76>
	{
		game.selection--;
    c20a:	80 91 0b 0c 	lds	r24, 0x0C0B
    c20e:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    c210:	87 ff       	sbrs	r24, 7
    c212:	11 c0       	rjmp	.+34     	; 0xc236 <update_splash+0x86>
    c214:	10 92 0b 0c 	sts	0x0C0B, r1
		SFX_NAVIGATE;
    c218:	2f ef       	ldi	r18, 0xFF	; 255
    c21a:	47 e1       	ldi	r20, 0x17	; 23
    c21c:	67 e0       	ldi	r22, 0x07	; 7
    c21e:	84 e0       	ldi	r24, 0x04	; 4
    c220:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
    c224:	6f c0       	rjmp	.+222    	; 0xc304 <update_splash+0x154>
	}
	else if (p1->pressed & BTN_DOWN)
    c226:	85 ff       	sbrs	r24, 5
    c228:	09 c0       	rjmp	.+18     	; 0xc23c <update_splash+0x8c>
	{
		game.selection++;
    c22a:	80 91 0b 0c 	lds	r24, 0x0C0B
    c22e:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    c230:	83 30       	cpi	r24, 0x03	; 3
    c232:	0c f0       	brlt	.+2      	; 0xc236 <update_splash+0x86>
    c234:	82 e0       	ldi	r24, 0x02	; 2
    c236:	80 93 0b 0c 	sts	0x0C0B, r24
    c23a:	ee cf       	rjmp	.-36     	; 0xc218 <update_splash+0x68>
		SFX_NAVIGATE;
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    c23c:	90 ff       	sbrs	r25, 0
    c23e:	2c c0       	rjmp	.+88     	; 0xc298 <update_splash+0xe8>
    c240:	80 91 0b 0c 	lds	r24, 0x0C0B
    c244:	82 30       	cpi	r24, 0x02	; 2
    c246:	a8 f4       	brcc	.+42     	; 0xc272 <update_splash+0xc2>
	{
		p1s.select_state = SELECTING;
    c248:	10 92 2f 0b 	sts	0x0B2F, r1
		p2s.select_state = SELECTING;
    c24c:	10 92 29 0b 	sts	0x0B29, r1
		SFX_NAVIGATE;
    c250:	2f ef       	ldi	r18, 0xFF	; 255
    c252:	47 e1       	ldi	r20, 0x17	; 23
    c254:	67 e0       	ldi	r22, 0x07	; 7
    c256:	84 e0       	ldi	r24, 0x04	; 4
    c258:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		fade_through();
    c25c:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		load_eeprom(&handles);
    c260:	88 ee       	ldi	r24, 0xE8	; 232
    c262:	9b e0       	ldi	r25, 0x0B	; 11
    c264:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    c268:	df 91       	pop	r29
    c26a:	cf 91       	pop	r28
    c26c:	0f 91       	pop	r16
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    c26e:	0c 94 46 60 	jmp	0xc08c	; 0xc08c <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    c272:	82 30       	cpi	r24, 0x02	; 2
    c274:	89 f4       	brne	.+34     	; 0xc298 <update_splash+0xe8>
	{
		SFX_NAVIGATE;
    c276:	2f ef       	ldi	r18, 0xFF	; 255
    c278:	47 e1       	ldi	r20, 0x17	; 23
    c27a:	67 e0       	ldi	r22, 0x07	; 7
    c27c:	84 e0       	ldi	r24, 0x04	; 4
    c27e:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		fade_through();
    c282:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		load_eeprom(&scores);
    c286:	81 ec       	ldi	r24, 0xC1	; 193
    c288:	9b e0       	ldi	r25, 0x0B	; 11
    c28a:	0e 94 87 4f 	call	0x9f0e	; 0x9f0e <load_eeprom>
		level_transition(LBRandom(0, 10));
		return;
		
	}
	demo_counter++;
}
    c28e:	df 91       	pop	r29
    c290:	cf 91       	pop	r28
    c292:	0f 91       	pop	r16
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		SFX_NAVIGATE;
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    c294:	0c 94 2c 5b 	jmp	0xb658	; 0xb658 <load_tank_rank>
		return;
	}
	else if (demo_counter >= DEMO_WAIT)
    c298:	80 91 30 0b 	lds	r24, 0x0B30
    c29c:	90 91 31 0b 	lds	r25, 0x0B31
    c2a0:	88 35       	cpi	r24, 0x58	; 88
    c2a2:	92 40       	sbci	r25, 0x02	; 2
    c2a4:	78 f1       	brcs	.+94     	; 0xc304 <update_splash+0x154>
	{
		demo_counter = 0;
    c2a6:	10 92 31 0b 	sts	0x0B31, r1
    c2aa:	10 92 30 0b 	sts	0x0B30, r1
		game.selection = CPUVCPU;
    c2ae:	83 e0       	ldi	r24, 0x03	; 3
    c2b0:	80 93 0b 0c 	sts	0x0C0B, r24
		player1.handle_id = 9;
    c2b4:	c9 e0       	ldi	r28, 0x09	; 9
    c2b6:	c0 93 30 0c 	sts	0x0C30, r28
		LBCopyChars(player1.handle, &handles.data[9*3], 3);
    c2ba:	43 e0       	ldi	r20, 0x03	; 3
    c2bc:	65 e0       	ldi	r22, 0x05	; 5
    c2be:	7c e0       	ldi	r23, 0x0C	; 12
    c2c0:	81 e3       	ldi	r24, 0x31	; 49
    c2c2:	9c e0       	ldi	r25, 0x0C	; 12
    c2c4:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		player2.handle_id = 9;
    c2c8:	c0 93 94 0f 	sts	0x0F94, r28
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
    c2cc:	43 e0       	ldi	r20, 0x03	; 3
    c2ce:	65 e0       	ldi	r22, 0x05	; 5
    c2d0:	7c e0       	ldi	r23, 0x0C	; 12
    c2d2:	85 e9       	ldi	r24, 0x95	; 149
    c2d4:	9f e0       	ldi	r25, 0x0F	; 15
    c2d6:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		SFX_NAVIGATE;
    c2da:	2f ef       	ldi	r18, 0xFF	; 255
    c2dc:	47 e1       	ldi	r20, 0x17	; 23
    c2de:	67 e0       	ldi	r22, 0x07	; 7
    c2e0:	84 e0       	ldi	r24, 0x04	; 4
    c2e2:	0e 94 37 41 	call	0x826e	; 0x826e <TriggerNote>
		clear_sprites();
    c2e6:	0e 94 a3 4f 	call	0x9f46	; 0x9f46 <clear_sprites>
		fade_through();
    c2ea:	0e 94 99 4f 	call	0x9f32	; 0x9f32 <fade_through>
		level_transition(LBRandom(0, 10));
    c2ee:	6a e0       	ldi	r22, 0x0A	; 10
    c2f0:	70 e0       	ldi	r23, 0x00	; 0
    c2f2:	80 e0       	ldi	r24, 0x00	; 0
    c2f4:	90 e0       	ldi	r25, 0x00	; 0
    c2f6:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
		return;
		
	}
	demo_counter++;
}
    c2fa:	df 91       	pop	r29
    c2fc:	cf 91       	pop	r28
    c2fe:	0f 91       	pop	r16
		player2.handle_id = 9;
		LBCopyChars(player2.handle, &handles.data[9*3], 3);
		SFX_NAVIGATE;
		clear_sprites();
		fade_through();
		level_transition(LBRandom(0, 10));
    c300:	0c 94 c6 5a 	jmp	0xb58c	; 0xb58c <level_transition>
		return;
		
	}
	demo_counter++;
    c304:	80 91 30 0b 	lds	r24, 0x0B30
    c308:	90 91 31 0b 	lds	r25, 0x0B31
    c30c:	01 96       	adiw	r24, 0x01	; 1
    c30e:	90 93 31 0b 	sts	0x0B31, r25
    c312:	80 93 30 0b 	sts	0x0B30, r24
}
    c316:	df 91       	pop	r29
    c318:	cf 91       	pop	r28
    c31a:	0f 91       	pop	r16
    c31c:	08 95       	ret

0000c31e <update_handle_select>:
	Print(8, 23, &strMap[strCancelHandle]);
	Print(8, 24, &strMap[strChangeHandle]);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    c31e:	0f 93       	push	r16
    c320:	1f 93       	push	r17
    c322:	cf 93       	push	r28
    c324:	df 93       	push	r29
    c326:	8c 01       	movw	r16, r24
    c328:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    c32a:	28 e0       	ldi	r18, 0x08	; 8
    c32c:	42 e0       	ldi	r20, 0x02	; 2
    c32e:	bc 01       	movw	r22, r24
    c330:	8a e2       	ldi	r24, 0x2A	; 42
    c332:	9b e0       	ldi	r25, 0x0B	; 11
    c334:	0e 94 b7 5f 	call	0xbf6e	; 0xbf6e <_handle_select_render_helper>
	if (game.selection == PVP)
    c338:	80 91 0b 0c 	lds	r24, 0x0C0B
    c33c:	81 30       	cpi	r24, 0x01	; 1
    c33e:	39 f4       	brne	.+14     	; 0xc34e <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 9);
    c340:	29 e0       	ldi	r18, 0x09	; 9
    c342:	43 e1       	ldi	r20, 0x13	; 19
    c344:	be 01       	movw	r22, r28
    c346:	84 e2       	ldi	r24, 0x24	; 36
    c348:	9b e0       	ldi	r25, 0x0B	; 11
    c34a:	0e 94 b7 5f 	call	0xbf6e	; 0xbf6e <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    c34e:	45 e2       	ldi	r20, 0x25	; 37
    c350:	5c e0       	ldi	r21, 0x0C	; 12
    c352:	b8 01       	movw	r22, r16
    c354:	8a e2       	ldi	r24, 0x2A	; 42
    c356:	9b e0       	ldi	r25, 0x0B	; 11
    c358:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    c35c:	10 91 2f 0b 	lds	r17, 0x0B2F
	if (game.selection == PVP)
    c360:	80 91 0b 0c 	lds	r24, 0x0C0B
    c364:	81 30       	cpi	r24, 0x01	; 1
    c366:	19 f0       	breq	.+6      	; 0xc36e <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    c368:	12 30       	cpi	r17, 0x02	; 2
    c36a:	69 f0       	breq	.+26     	; 0xc386 <update_handle_select+0x68>
    c36c:	21 c0       	rjmp	.+66     	; 0xc3b0 <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    c36e:	49 e8       	ldi	r20, 0x89	; 137
    c370:	5f e0       	ldi	r21, 0x0F	; 15
    c372:	be 01       	movw	r22, r28
    c374:	84 e2       	ldi	r24, 0x24	; 36
    c376:	9b e0       	ldi	r25, 0x0B	; 11
    c378:	0e 94 f2 5e 	call	0xbde4	; 0xbde4 <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    c37c:	80 91 29 0b 	lds	r24, 0x0B29
    c380:	82 30       	cpi	r24, 0x02	; 2
    c382:	b1 f4       	brne	.+44     	; 0xc3b0 <update_handle_select+0x92>
    c384:	f1 cf       	rjmp	.-30     	; 0xc368 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    c386:	80 91 0b 0c 	lds	r24, 0x0C0B
    c38a:	81 11       	cpse	r24, r1
    c38c:	0a c0       	rjmp	.+20     	; 0xc3a2 <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    c38e:	89 e0       	ldi	r24, 0x09	; 9
    c390:	80 93 94 0f 	sts	0x0F94, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    c394:	43 e0       	ldi	r20, 0x03	; 3
    c396:	65 e0       	ldi	r22, 0x05	; 5
    c398:	7c e0       	ldi	r23, 0x0C	; 12
    c39a:	85 e9       	ldi	r24, 0x95	; 149
    c39c:	9f e0       	ldi	r25, 0x0F	; 15
    c39e:	0e 94 dc 4c 	call	0x99b8	; 0x99b8 <LBCopyChars>
		}
		level_transition(0);
    c3a2:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    c3a4:	df 91       	pop	r29
    c3a6:	cf 91       	pop	r28
    c3a8:	1f 91       	pop	r17
    c3aa:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    c3ac:	0c 94 c6 5a 	jmp	0xb58c	; 0xb58c <level_transition>
	}
}
    c3b0:	df 91       	pop	r29
    c3b2:	cf 91       	pop	r28
    c3b4:	1f 91       	pop	r17
    c3b6:	0f 91       	pop	r16
    c3b8:	08 95       	ret

0000c3ba <button_map>:

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c3ba:	00 97       	sbiw	r24, 0x00	; 0
    c3bc:	41 f0       	breq	.+16     	; 0xc3ce <button_map+0x14>
	if (number == 1) return BTN_DOWN;
    c3be:	81 30       	cpi	r24, 0x01	; 1
    c3c0:	91 05       	cpc	r25, r1
    c3c2:	41 f0       	breq	.+16     	; 0xc3d4 <button_map+0x1a>
	if (number == 2) return BTN_LEFT;
    c3c4:	82 30       	cpi	r24, 0x02	; 2
    c3c6:	91 05       	cpc	r25, r1
    c3c8:	41 f0       	breq	.+16     	; 0xc3da <button_map+0x20>
	if (number == 3) return BTN_RIGHT;
    c3ca:	03 97       	sbiw	r24, 0x03	; 3
    c3cc:	49 f0       	breq	.+18     	; 0xc3e0 <button_map+0x26>
	}
}

u16 button_map(u16 number)
{
	if (number == 0) return BTN_UP;
    c3ce:	80 e1       	ldi	r24, 0x10	; 16
    c3d0:	90 e0       	ldi	r25, 0x00	; 0
    c3d2:	08 95       	ret
	if (number == 1) return BTN_DOWN;
    c3d4:	80 e2       	ldi	r24, 0x20	; 32
    c3d6:	90 e0       	ldi	r25, 0x00	; 0
    c3d8:	08 95       	ret
	if (number == 2) return BTN_LEFT;
    c3da:	80 e4       	ldi	r24, 0x40	; 64
    c3dc:	90 e0       	ldi	r25, 0x00	; 0
    c3de:	08 95       	ret
	if (number == 3) return BTN_RIGHT;
    c3e0:	80 e8       	ldi	r24, 0x80	; 128
    c3e2:	90 e0       	ldi	r25, 0x00	; 0
	return BTN_UP;
}
    c3e4:	08 95       	ret

0000c3e6 <crash_and_turn>:

char crash_and_turn(char current_x, char current_y, u8 recoiled, Player* player, JoyPadState* p)
/* 
 * Move in the direction of the goal. Move along the wall using left hand rule when hitting one
 */
{	
    c3e6:	8f 92       	push	r8
    c3e8:	9f 92       	push	r9
    c3ea:	af 92       	push	r10
    c3ec:	bf 92       	push	r11
    c3ee:	cf 92       	push	r12
    c3f0:	df 92       	push	r13
    c3f2:	ef 92       	push	r14
    c3f4:	ff 92       	push	r15
    c3f6:	0f 93       	push	r16
    c3f8:	1f 93       	push	r17
    c3fa:	cf 93       	push	r28
    c3fc:	df 93       	push	r29
    c3fe:	e8 2e       	mov	r14, r24
    c400:	d6 2e       	mov	r13, r22
    c402:	f4 2e       	mov	r15, r20
    c404:	e9 01       	movw	r28, r18
	if (player->feeling_my_way)
    c406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    c408:	88 23       	and	r24, r24
    c40a:	09 f4       	brne	.+2      	; 0xc40e <crash_and_turn+0x28>
    c40c:	a8 c0       	rjmp	.+336    	; 0xc55e <crash_and_turn+0x178>
	{
		if ((p->held & BTN_UP) && !(solid_tile(current_y * 30 + current_x - 1) || solid_tile((current_y+1) * 30 + current_x - 1) || solid_tile((current_y+2) * 30 + current_x - 1)))
    c40e:	f8 01       	movw	r30, r16
    c410:	c4 80       	ldd	r12, Z+4	; 0x04
    c412:	c4 fe       	sbrs	r12, 4
    c414:	23 c0       	rjmp	.+70     	; 0xc45c <crash_and_turn+0x76>
    c416:	fe e1       	ldi	r31, 0x1E	; 30
    c418:	6f 02       	muls	r22, r31
    c41a:	40 01       	movw	r8, r0
    c41c:	11 24       	eor	r1, r1
    c41e:	ae 2c       	mov	r10, r14
    c420:	bb 24       	eor	r11, r11
    c422:	a7 fc       	sbrc	r10, 7
    c424:	b0 94       	com	r11
    c426:	c4 01       	movw	r24, r8
    c428:	8a 0d       	add	r24, r10
    c42a:	9b 1d       	adc	r25, r11
    c42c:	01 97       	sbiw	r24, 0x01	; 1
    c42e:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c432:	81 11       	cpse	r24, r1
    c434:	13 c0       	rjmp	.+38     	; 0xc45c <crash_and_turn+0x76>
    c436:	c4 01       	movw	r24, r8
    c438:	8a 0d       	add	r24, r10
    c43a:	9b 1d       	adc	r25, r11
    c43c:	4d 96       	adiw	r24, 0x1d	; 29
    c43e:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c442:	81 11       	cpse	r24, r1
    c444:	0b c0       	rjmp	.+22     	; 0xc45c <crash_and_turn+0x76>
    c446:	c4 01       	movw	r24, r8
    c448:	8a 0d       	add	r24, r10
    c44a:	9b 1d       	adc	r25, r11
    c44c:	cb 96       	adiw	r24, 0x3b	; 59
    c44e:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c452:	81 11       	cpse	r24, r1
    c454:	03 c0       	rjmp	.+6      	; 0xc45c <crash_and_turn+0x76>
		{
			p->held = BTN_LEFT;
    c456:	80 e4       	ldi	r24, 0x40	; 64
    c458:	90 e0       	ldi	r25, 0x00	; 0
    c45a:	6f c0       	rjmp	.+222    	; 0xc53a <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_LEFT) && !(solid_tile((current_y+2) * 30 + current_x) || solid_tile((current_y+2) * 30 + current_x+1) || solid_tile((current_y+2) * 30 + current_x+2)))
    c45c:	c6 fe       	sbrs	r12, 6
    c45e:	23 c0       	rjmp	.+70     	; 0xc4a6 <crash_and_turn+0xc0>
    c460:	8d 2d       	mov	r24, r13
    c462:	99 27       	eor	r25, r25
    c464:	87 fd       	sbrc	r24, 7
    c466:	90 95       	com	r25
    c468:	02 96       	adiw	r24, 0x02	; 2
    c46a:	2e e1       	ldi	r18, 0x1E	; 30
    c46c:	28 9f       	mul	r18, r24
    c46e:	50 01       	movw	r10, r0
    c470:	29 9f       	mul	r18, r25
    c472:	b0 0c       	add	r11, r0
    c474:	11 24       	eor	r1, r1
    c476:	ae 0c       	add	r10, r14
    c478:	b1 1c       	adc	r11, r1
    c47a:	e7 fc       	sbrc	r14, 7
    c47c:	ba 94       	dec	r11
    c47e:	c5 01       	movw	r24, r10
    c480:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c484:	81 11       	cpse	r24, r1
    c486:	0f c0       	rjmp	.+30     	; 0xc4a6 <crash_and_turn+0xc0>
    c488:	c5 01       	movw	r24, r10
    c48a:	01 96       	adiw	r24, 0x01	; 1
    c48c:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c490:	81 11       	cpse	r24, r1
    c492:	09 c0       	rjmp	.+18     	; 0xc4a6 <crash_and_turn+0xc0>
    c494:	c5 01       	movw	r24, r10
    c496:	02 96       	adiw	r24, 0x02	; 2
    c498:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c49c:	81 11       	cpse	r24, r1
    c49e:	03 c0       	rjmp	.+6      	; 0xc4a6 <crash_and_turn+0xc0>
		{
			p->held = BTN_DOWN;
    c4a0:	80 e2       	ldi	r24, 0x20	; 32
    c4a2:	90 e0       	ldi	r25, 0x00	; 0
    c4a4:	4a c0       	rjmp	.+148    	; 0xc53a <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_DOWN) && !(solid_tile((current_y) * 30 + current_x+2) || solid_tile((current_y+1) * 30 + current_x+2) || solid_tile((current_y+2) * 30 + current_x+2)))
    c4a6:	c5 fe       	sbrs	r12, 5
    c4a8:	24 c0       	rjmp	.+72     	; 0xc4f2 <crash_and_turn+0x10c>
    c4aa:	fd 2d       	mov	r31, r13
    c4ac:	8e e1       	ldi	r24, 0x1E	; 30
    c4ae:	f8 02       	muls	r31, r24
    c4b0:	40 01       	movw	r8, r0
    c4b2:	11 24       	eor	r1, r1
    c4b4:	ae 2c       	mov	r10, r14
    c4b6:	bb 24       	eor	r11, r11
    c4b8:	a7 fc       	sbrc	r10, 7
    c4ba:	b0 94       	com	r11
    c4bc:	c4 01       	movw	r24, r8
    c4be:	8a 0d       	add	r24, r10
    c4c0:	9b 1d       	adc	r25, r11
    c4c2:	02 96       	adiw	r24, 0x02	; 2
    c4c4:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c4c8:	81 11       	cpse	r24, r1
    c4ca:	13 c0       	rjmp	.+38     	; 0xc4f2 <crash_and_turn+0x10c>
    c4cc:	c4 01       	movw	r24, r8
    c4ce:	8a 0d       	add	r24, r10
    c4d0:	9b 1d       	adc	r25, r11
    c4d2:	80 96       	adiw	r24, 0x20	; 32
    c4d4:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c4d8:	81 11       	cpse	r24, r1
    c4da:	0b c0       	rjmp	.+22     	; 0xc4f2 <crash_and_turn+0x10c>
    c4dc:	c4 01       	movw	r24, r8
    c4de:	8a 0d       	add	r24, r10
    c4e0:	9b 1d       	adc	r25, r11
    c4e2:	ce 96       	adiw	r24, 0x3e	; 62
    c4e4:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c4e8:	81 11       	cpse	r24, r1
    c4ea:	03 c0       	rjmp	.+6      	; 0xc4f2 <crash_and_turn+0x10c>
		{
			p->held = BTN_RIGHT;
    c4ec:	80 e8       	ldi	r24, 0x80	; 128
    c4ee:	90 e0       	ldi	r25, 0x00	; 0
    c4f0:	24 c0       	rjmp	.+72     	; 0xc53a <crash_and_turn+0x154>
			recoil_sprite(&player->shared);
			recoiled = 0;
		}
		else if ((p->held & BTN_RIGHT) && !(solid_tile((current_y-1) * 30 + current_x) || solid_tile((current_y-1) * 30 + current_x+1) || solid_tile((current_y-1) * 30 + current_x+2)))
    c4f2:	c7 fe       	sbrs	r12, 7
    c4f4:	29 c0       	rjmp	.+82     	; 0xc548 <crash_and_turn+0x162>
    c4f6:	8d 2d       	mov	r24, r13
    c4f8:	99 27       	eor	r25, r25
    c4fa:	87 fd       	sbrc	r24, 7
    c4fc:	90 95       	com	r25
    c4fe:	01 97       	sbiw	r24, 0x01	; 1
    c500:	2e e1       	ldi	r18, 0x1E	; 30
    c502:	28 9f       	mul	r18, r24
    c504:	50 01       	movw	r10, r0
    c506:	29 9f       	mul	r18, r25
    c508:	b0 0c       	add	r11, r0
    c50a:	11 24       	eor	r1, r1
    c50c:	ae 0c       	add	r10, r14
    c50e:	b1 1c       	adc	r11, r1
    c510:	e7 fc       	sbrc	r14, 7
    c512:	ba 94       	dec	r11
    c514:	c5 01       	movw	r24, r10
    c516:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c51a:	81 11       	cpse	r24, r1
    c51c:	15 c0       	rjmp	.+42     	; 0xc548 <crash_and_turn+0x162>
    c51e:	c5 01       	movw	r24, r10
    c520:	01 96       	adiw	r24, 0x01	; 1
    c522:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c526:	81 11       	cpse	r24, r1
    c528:	0f c0       	rjmp	.+30     	; 0xc548 <crash_and_turn+0x162>
    c52a:	c5 01       	movw	r24, r10
    c52c:	02 96       	adiw	r24, 0x02	; 2
    c52e:	0e 94 9c 53 	call	0xa738	; 0xa738 <solid_tile>
    c532:	81 11       	cpse	r24, r1
    c534:	09 c0       	rjmp	.+18     	; 0xc548 <crash_and_turn+0x162>
		{
			p->held = BTN_UP;
    c536:	80 e1       	ldi	r24, 0x10	; 16
    c538:	90 e0       	ldi	r25, 0x00	; 0
    c53a:	f8 01       	movw	r30, r16
    c53c:	95 83       	std	Z+5, r25	; 0x05
    c53e:	84 83       	std	Z+4, r24	; 0x04
			recoil_sprite(&player->shared);
    c540:	ce 01       	movw	r24, r28
    c542:	0e 94 d0 52 	call	0xa5a0	; 0xa5a0 <recoil_sprite>
			recoiled = 0;
    c546:	f1 2c       	mov	r15, r1
		}
		if (player->goal_direction & p->held)
    c548:	f8 01       	movw	r30, r16
    c54a:	24 81       	ldd	r18, Z+4	; 0x04
    c54c:	35 81       	ldd	r19, Z+5	; 0x05
    c54e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c550:	9d 8d       	ldd	r25, Y+29	; 0x1d
    c552:	82 23       	and	r24, r18
    c554:	93 23       	and	r25, r19
    c556:	89 2b       	or	r24, r25
    c558:	11 f0       	breq	.+4      	; 0xc55e <crash_and_turn+0x178>
		{
			player->feeling_my_way = 0;
    c55a:	1b 8e       	std	Y+27, r1	; 0x1b
			recoiled = 0;
    c55c:	f1 2c       	mov	r15, r1
		}
	}
	if ((p->held & BTN_LEFT) && recoiled)
    c55e:	f8 01       	movw	r30, r16
    c560:	84 81       	ldd	r24, Z+4	; 0x04
    c562:	86 ff       	sbrs	r24, 6
    c564:	05 c0       	rjmp	.+10     	; 0xc570 <crash_and_turn+0x18a>
    c566:	ff 20       	and	r15, r15
    c568:	19 f0       	breq	.+6      	; 0xc570 <crash_and_turn+0x18a>
	{
		p->held = BTN_UP;
    c56a:	80 e1       	ldi	r24, 0x10	; 16
    c56c:	90 e0       	ldi	r25, 0x00	; 0
    c56e:	15 c0       	rjmp	.+42     	; 0xc59a <crash_and_turn+0x1b4>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_UP) && recoiled)
    c570:	84 ff       	sbrs	r24, 4
    c572:	05 c0       	rjmp	.+10     	; 0xc57e <crash_and_turn+0x198>
    c574:	ff 20       	and	r15, r15
    c576:	19 f0       	breq	.+6      	; 0xc57e <crash_and_turn+0x198>
	{
		p->held = BTN_RIGHT;
    c578:	80 e8       	ldi	r24, 0x80	; 128
    c57a:	90 e0       	ldi	r25, 0x00	; 0
    c57c:	0d c0       	rjmp	.+26     	; 0xc598 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_RIGHT) && recoiled)
    c57e:	87 ff       	sbrs	r24, 7
    c580:	05 c0       	rjmp	.+10     	; 0xc58c <crash_and_turn+0x1a6>
    c582:	ff 20       	and	r15, r15
    c584:	19 f0       	breq	.+6      	; 0xc58c <crash_and_turn+0x1a6>
	{
		p->held = BTN_DOWN;
    c586:	80 e2       	ldi	r24, 0x20	; 32
    c588:	90 e0       	ldi	r25, 0x00	; 0
    c58a:	06 c0       	rjmp	.+12     	; 0xc598 <crash_and_turn+0x1b2>
		player->feeling_my_way = 1;
	}
	else if ((p->held & BTN_DOWN) && recoiled)
    c58c:	85 ff       	sbrs	r24, 5
    c58e:	09 c0       	rjmp	.+18     	; 0xc5a2 <crash_and_turn+0x1bc>
    c590:	ff 20       	and	r15, r15
    c592:	39 f0       	breq	.+14     	; 0xc5a2 <crash_and_turn+0x1bc>
	{
		p->held = BTN_LEFT;
    c594:	80 e4       	ldi	r24, 0x40	; 64
    c596:	90 e0       	ldi	r25, 0x00	; 0
    c598:	f8 01       	movw	r30, r16
    c59a:	95 83       	std	Z+5, r25	; 0x05
    c59c:	84 83       	std	Z+4, r24	; 0x04
		player->feeling_my_way = 1;
    c59e:	81 e0       	ldi	r24, 0x01	; 1
    c5a0:	8b 8f       	std	Y+27, r24	; 0x1b
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c5a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    c5a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    c5a6:	80 31       	cpi	r24, 0x10	; 16
    c5a8:	91 05       	cpc	r25, r1
    c5aa:	19 f0       	breq	.+6      	; 0xc5b2 <crash_and_turn+0x1cc>
    c5ac:	80 32       	cpi	r24, 0x20	; 32
    c5ae:	91 05       	cpc	r25, r1
    c5b0:	19 f4       	brne	.+6      	; 0xc5b8 <crash_and_turn+0x1d2>
    c5b2:	2a a1       	ldd	r18, Y+34	; 0x22
    c5b4:	d2 16       	cp	r13, r18
    c5b6:	59 f0       	breq	.+22     	; 0xc5ce <crash_and_turn+0x1e8>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
    c5b8:	80 34       	cpi	r24, 0x40	; 64
    c5ba:	91 05       	cpc	r25, r1
    c5bc:	19 f0       	breq	.+6      	; 0xc5c4 <crash_and_turn+0x1de>
    c5be:	80 38       	cpi	r24, 0x80	; 128
    c5c0:	91 05       	cpc	r25, r1
    c5c2:	39 f4       	brne	.+14     	; 0xc5d2 <crash_and_turn+0x1ec>
    c5c4:	81 e0       	ldi	r24, 0x01	; 1
    c5c6:	9a a1       	ldd	r25, Y+34	; 0x22
    c5c8:	e9 12       	cpse	r14, r25
    c5ca:	03 c0       	rjmp	.+6      	; 0xc5d2 <crash_and_turn+0x1ec>
    c5cc:	03 c0       	rjmp	.+6      	; 0xc5d4 <crash_and_turn+0x1ee>
	{
		p->held = BTN_LEFT;
		player->feeling_my_way = 1;
	}

	if ((player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) && current_y == player->goal) return 1;
    c5ce:	81 e0       	ldi	r24, 0x01	; 1
    c5d0:	01 c0       	rjmp	.+2      	; 0xc5d4 <crash_and_turn+0x1ee>
	if ((player->goal_direction == BTN_LEFT || player->goal_direction == BTN_RIGHT) && current_x == player->goal) return 1;
	
	return 0;
    c5d2:	80 e0       	ldi	r24, 0x00	; 0
}
    c5d4:	df 91       	pop	r29
    c5d6:	cf 91       	pop	r28
    c5d8:	1f 91       	pop	r17
    c5da:	0f 91       	pop	r16
    c5dc:	ff 90       	pop	r15
    c5de:	ef 90       	pop	r14
    c5e0:	df 90       	pop	r13
    c5e2:	cf 90       	pop	r12
    c5e4:	bf 90       	pop	r11
    c5e6:	af 90       	pop	r10
    c5e8:	9f 90       	pop	r9
    c5ea:	8f 90       	pop	r8
    c5ec:	08 95       	ret

0000c5ee <get_cpu_goal_direction>:

u16 get_cpu_goal_direction(char distance_x, char distance_y)
{
	char abs_distance_x = (distance_x < 0) ? -distance_x : distance_x;
    c5ee:	48 2f       	mov	r20, r24
    c5f0:	55 27       	eor	r21, r21
    c5f2:	47 fd       	sbrc	r20, 7
    c5f4:	50 95       	com	r21
    c5f6:	57 ff       	sbrs	r21, 7
    c5f8:	03 c0       	rjmp	.+6      	; 0xc600 <get_cpu_goal_direction+0x12>
    c5fa:	51 95       	neg	r21
    c5fc:	41 95       	neg	r20
    c5fe:	51 09       	sbc	r21, r1
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
    c600:	26 2f       	mov	r18, r22
    c602:	33 27       	eor	r19, r19
    c604:	27 fd       	sbrc	r18, 7
    c606:	30 95       	com	r19
    c608:	37 ff       	sbrs	r19, 7
    c60a:	03 c0       	rjmp	.+6      	; 0xc612 <get_cpu_goal_direction+0x24>
    c60c:	31 95       	neg	r19
    c60e:	21 95       	neg	r18
    c610:	31 09       	sbc	r19, r1
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
    c612:	24 17       	cp	r18, r20
    c614:	2c f4       	brge	.+10     	; 0xc620 <get_cpu_goal_direction+0x32>
	{
		direction = BTN_LEFT;
		if (distance_x > 0) direction = BTN_RIGHT;
    c616:	18 16       	cp	r1, r24
    c618:	44 f4       	brge	.+16     	; 0xc62a <get_cpu_goal_direction+0x3c>
    c61a:	80 e8       	ldi	r24, 0x80	; 128
    c61c:	90 e0       	ldi	r25, 0x00	; 0
    c61e:	08 95       	ret
	}
	else
	{
		direction = BTN_UP;
		if (distance_y > 0) direction = BTN_DOWN;
    c620:	16 16       	cp	r1, r22
    c622:	34 f4       	brge	.+12     	; 0xc630 <get_cpu_goal_direction+0x42>
    c624:	80 e2       	ldi	r24, 0x20	; 32
    c626:	90 e0       	ldi	r25, 0x00	; 0
    c628:	08 95       	ret
	char abs_distance_y = (distance_y < 0) ? -distance_y : distance_y;
	u16 direction = BTN_UP;
	
	if (abs_distance_x > abs_distance_y)
	{
		direction = BTN_LEFT;
    c62a:	80 e4       	ldi	r24, 0x40	; 64
    c62c:	90 e0       	ldi	r25, 0x00	; 0
    c62e:	08 95       	ret
		if (distance_x > 0) direction = BTN_RIGHT;
	}
	else
	{
		direction = BTN_UP;
    c630:	80 e1       	ldi	r24, 0x10	; 16
    c632:	90 e0       	ldi	r25, 0x00	; 0
		if (distance_y > 0) direction = BTN_DOWN;
	}
	
	return direction;
}
    c634:	08 95       	ret

0000c636 <get_cpu_joypad_state>:

void get_cpu_joypad_state(Player* player, Player* other_player, JoyPadState* p)
{
    c636:	2f 92       	push	r2
    c638:	3f 92       	push	r3
    c63a:	4f 92       	push	r4
    c63c:	5f 92       	push	r5
    c63e:	6f 92       	push	r6
    c640:	7f 92       	push	r7
    c642:	8f 92       	push	r8
    c644:	9f 92       	push	r9
    c646:	af 92       	push	r10
    c648:	bf 92       	push	r11
    c64a:	cf 92       	push	r12
    c64c:	df 92       	push	r13
    c64e:	ef 92       	push	r14
    c650:	ff 92       	push	r15
    c652:	0f 93       	push	r16
    c654:	1f 93       	push	r17
    c656:	cf 93       	push	r28
    c658:	df 93       	push	r29
    c65a:	00 d0       	rcall	.+0      	; 0xc65c <get_cpu_joypad_state+0x26>
    c65c:	00 d0       	rcall	.+0      	; 0xc65e <get_cpu_joypad_state+0x28>
    c65e:	00 d0       	rcall	.+0      	; 0xc660 <get_cpu_joypad_state+0x2a>
    c660:	cd b7       	in	r28, 0x3d	; 61
    c662:	de b7       	in	r29, 0x3e	; 62
    c664:	1c 01       	movw	r2, r24
    c666:	8a 01       	movw	r16, r20
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c668:	db 01       	movw	r26, r22
    c66a:	13 96       	adiw	r26, 0x03	; 3
    c66c:	8d 91       	ld	r24, X+
    c66e:	9d 91       	ld	r25, X+
    c670:	0d 90       	ld	r0, X+
    c672:	bc 91       	ld	r27, X
    c674:	a0 2d       	mov	r26, r0
    c676:	89 83       	std	Y+1, r24	; 0x01
    c678:	9a 83       	std	Y+2, r25	; 0x02
    c67a:	ab 83       	std	Y+3, r26	; 0x03
    c67c:	bc 83       	std	Y+4, r27	; 0x04
	goal_y = other_player->shared.y / 8 - 3;
    c67e:	fb 01       	movw	r30, r22
    c680:	47 80       	ldd	r4, Z+7	; 0x07
    c682:	50 84       	ldd	r5, Z+8	; 0x08
    c684:	61 84       	ldd	r6, Z+9	; 0x09
    c686:	72 84       	ldd	r7, Z+10	; 0x0a
	player_x = player->shared.x / 8;
    c688:	d1 01       	movw	r26, r2
    c68a:	13 96       	adiw	r26, 0x03	; 3
    c68c:	8d 90       	ld	r8, X+
    c68e:	9d 90       	ld	r9, X+
    c690:	ad 90       	ld	r10, X+
    c692:	bc 90       	ld	r11, X
    c694:	16 97       	sbiw	r26, 0x06	; 6
	player_y =  player->shared.y / 8 - 3;
    c696:	17 96       	adiw	r26, 0x07	; 7
    c698:	cd 90       	ld	r12, X+
    c69a:	dd 90       	ld	r13, X+
    c69c:	ed 90       	ld	r14, X+
    c69e:	fc 90       	ld	r15, X
    c6a0:	1a 97       	sbiw	r26, 0x0a	; 10
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
	
	if (player->grace_frame == 0)
    c6a2:	57 96       	adiw	r26, 0x17	; 23
    c6a4:	8c 91       	ld	r24, X
    c6a6:	81 11       	cpse	r24, r1
    c6a8:	04 c0       	rjmp	.+8      	; 0xc6b2 <get_cpu_joypad_state+0x7c>
	{
		p->held = 0;
    c6aa:	fa 01       	movw	r30, r20
    c6ac:	15 82       	std	Z+5, r1	; 0x05
    c6ae:	14 82       	std	Z+4, r1	; 0x04
		return;
    c6b0:	4e c1       	rjmp	.+668    	; 0xc94e <get_cpu_joypad_state+0x318>
	}
	
	// Shot
	if (p->pressed & BTN_A)
    c6b2:	da 01       	movw	r26, r20
    c6b4:	8d 91       	ld	r24, X+
    c6b6:	9c 91       	ld	r25, X
    c6b8:	11 97       	sbiw	r26, 0x01	; 1
    c6ba:	90 ff       	sbrs	r25, 0
    c6bc:	02 c0       	rjmp	.+4      	; 0xc6c2 <get_cpu_joypad_state+0x8c>
	{
		p->pressed = 0;
    c6be:	1d 92       	st	X+, r1
    c6c0:	1c 92       	st	X, r1
	}
	if (global_frame_counter % DEFAULT_FRAMES_PER_SHOT == 0 && player->grace_frame > 50)
    c6c2:	20 91 04 01 	lds	r18, 0x0104
    c6c6:	30 91 05 01 	lds	r19, 0x0105
    c6ca:	c9 01       	movw	r24, r18
    c6cc:	6a e0       	ldi	r22, 0x0A	; 10
    c6ce:	70 e0       	ldi	r23, 0x00	; 0
    c6d0:	0e 94 62 65 	call	0xcac4	; 0xcac4 <__udivmodhi4>
    c6d4:	89 2b       	or	r24, r25
    c6d6:	49 f4       	brne	.+18     	; 0xc6ea <get_cpu_joypad_state+0xb4>
    c6d8:	f1 01       	movw	r30, r2
    c6da:	87 89       	ldd	r24, Z+23	; 0x17
    c6dc:	83 33       	cpi	r24, 0x33	; 51
    c6de:	28 f0       	brcs	.+10     	; 0xc6ea <get_cpu_joypad_state+0xb4>
	{
		p->pressed = BTN_A;
    c6e0:	80 e0       	ldi	r24, 0x00	; 0
    c6e2:	91 e0       	ldi	r25, 0x01	; 1
    c6e4:	d8 01       	movw	r26, r16
    c6e6:	8d 93       	st	X+, r24
    c6e8:	9c 93       	st	X, r25
    c6ea:	3e 82       	std	Y+6, r3	; 0x06
    c6ec:	2d 82       	std	Y+5, r2	; 0x05
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
    c6ee:	c9 01       	movw	r24, r18
    c6f0:	64 eb       	ldi	r22, 0xB4	; 180
    c6f2:	70 e0       	ldi	r23, 0x00	; 0
    c6f4:	0e 94 62 65 	call	0xcac4	; 0xcac4 <__udivmodhi4>
    c6f8:	89 2b       	or	r24, r25
    c6fa:	41 f0       	breq	.+16     	; 0xc70c <get_cpu_joypad_state+0xd6>
    c6fc:	f1 01       	movw	r30, r2
    c6fe:	87 89       	ldd	r24, Z+23	; 0x17
    c700:	8a 30       	cpi	r24, 0x0A	; 10
    c702:	21 f0       	breq	.+8      	; 0xc70c <get_cpu_joypad_state+0xd6>
    c704:	83 a1       	ldd	r24, Z+35	; 0x23
    c706:	88 23       	and	r24, r24
    c708:	09 f4       	brne	.+2      	; 0xc70c <get_cpu_joypad_state+0xd6>
    c70a:	7e c0       	rjmp	.+252    	; 0xc808 <get_cpu_joypad_state+0x1d2>
	char distance_x;
	char distance_y;
	char player_x;
	char player_y;
	
	goal_x = other_player->shared.x / 8;
    c70c:	20 e0       	ldi	r18, 0x00	; 0
    c70e:	30 e0       	ldi	r19, 0x00	; 0
    c710:	40 e0       	ldi	r20, 0x00	; 0
    c712:	5e e3       	ldi	r21, 0x3E	; 62
    c714:	69 81       	ldd	r22, Y+1	; 0x01
    c716:	7a 81       	ldd	r23, Y+2	; 0x02
    c718:	8b 81       	ldd	r24, Y+3	; 0x03
    c71a:	9c 81       	ldd	r25, Y+4	; 0x04
    c71c:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c720:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
    c724:	36 2e       	mov	r3, r22
	goal_y = other_player->shared.y / 8 - 3;
    c726:	20 e0       	ldi	r18, 0x00	; 0
    c728:	30 e0       	ldi	r19, 0x00	; 0
    c72a:	40 e0       	ldi	r20, 0x00	; 0
    c72c:	5e e3       	ldi	r21, 0x3E	; 62
    c72e:	c3 01       	movw	r24, r6
    c730:	b2 01       	movw	r22, r4
    c732:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c736:	20 e0       	ldi	r18, 0x00	; 0
    c738:	30 e0       	ldi	r19, 0x00	; 0
    c73a:	40 e4       	ldi	r20, 0x40	; 64
    c73c:	50 e4       	ldi	r21, 0x40	; 64
    c73e:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    c742:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
    c746:	76 2e       	mov	r7, r22
	player_x = player->shared.x / 8;
    c748:	20 e0       	ldi	r18, 0x00	; 0
    c74a:	30 e0       	ldi	r19, 0x00	; 0
    c74c:	40 e0       	ldi	r20, 0x00	; 0
    c74e:	5e e3       	ldi	r21, 0x3E	; 62
    c750:	c5 01       	movw	r24, r10
    c752:	b4 01       	movw	r22, r8
    c754:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c758:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
	player_y =  player->shared.y / 8 - 3;
	distance_x = goal_x - player_x;
    c75c:	b3 2c       	mov	r11, r3
    c75e:	b6 1a       	sub	r11, r22
	char player_y;
	
	goal_x = other_player->shared.x / 8;
	goal_y = other_player->shared.y / 8 - 3;
	player_x = player->shared.x / 8;
	player_y =  player->shared.y / 8 - 3;
    c760:	20 e0       	ldi	r18, 0x00	; 0
    c762:	30 e0       	ldi	r19, 0x00	; 0
    c764:	40 e0       	ldi	r20, 0x00	; 0
    c766:	5e e3       	ldi	r21, 0x3E	; 62
    c768:	c7 01       	movw	r24, r14
    c76a:	b6 01       	movw	r22, r12
    c76c:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c770:	20 e0       	ldi	r18, 0x00	; 0
    c772:	30 e0       	ldi	r19, 0x00	; 0
    c774:	40 e4       	ldi	r20, 0x40	; 64
    c776:	50 e4       	ldi	r21, 0x40	; 64
    c778:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    c77c:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
	distance_x = goal_x - player_x;
	distance_y = goal_y - player_y;
    c780:	f7 2d       	mov	r31, r7
    c782:	f6 1b       	sub	r31, r22
    c784:	6f 2f       	mov	r22, r31
	}
		
	// Determine goal
	if ((global_frame_counter % DEFAULT_FRAMES_PER_GOAL == 0) || player->grace_frame == 10 || player->goal_reached)
	{
		player->goal_reached = 0;
    c786:	ad 81       	ldd	r26, Y+5	; 0x05
    c788:	be 81       	ldd	r27, Y+6	; 0x06
    c78a:	93 96       	adiw	r26, 0x23	; 35
    c78c:	1c 92       	st	X, r1
    c78e:	93 97       	sbiw	r26, 0x23	; 35
		player->feeling_my_way = 0;
    c790:	5b 96       	adiw	r26, 0x1b	; 27
    c792:	1c 92       	st	X, r1
		
		if (distance_x >= -2 && distance_x <= 2 && distance_y >= -2 && distance_y <= 2)
    c794:	82 e0       	ldi	r24, 0x02	; 2
    c796:	8b 0d       	add	r24, r11
    c798:	85 30       	cpi	r24, 0x05	; 5
    c79a:	d8 f4       	brcc	.+54     	; 0xc7d2 <get_cpu_joypad_state+0x19c>
    c79c:	fe 3f       	cpi	r31, 0xFE	; 254
    c79e:	cc f0       	brlt	.+50     	; 0xc7d2 <get_cpu_joypad_state+0x19c>
    c7a0:	f3 30       	cpi	r31, 0x03	; 3
    c7a2:	bc f4       	brge	.+46     	; 0xc7d2 <get_cpu_joypad_state+0x19c>
		{
			// Dont get too close
			player->goal_direction = button_map(LBRandom(0, 4));
    c7a4:	64 e0       	ldi	r22, 0x04	; 4
    c7a6:	70 e0       	ldi	r23, 0x00	; 0
    c7a8:	80 e0       	ldi	r24, 0x00	; 0
    c7aa:	90 e0       	ldi	r25, 0x00	; 0
    c7ac:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
    c7b0:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <button_map>
    c7b4:	ed 81       	ldd	r30, Y+5	; 0x05
    c7b6:	fe 81       	ldd	r31, Y+6	; 0x06
    c7b8:	95 8f       	std	Z+29, r25	; 0x1d
    c7ba:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = LBRandom(5, 18);
    c7bc:	62 e1       	ldi	r22, 0x12	; 18
    c7be:	70 e0       	ldi	r23, 0x00	; 0
    c7c0:	85 e0       	ldi	r24, 0x05	; 5
    c7c2:	90 e0       	ldi	r25, 0x00	; 0
    c7c4:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
    c7c8:	ad 81       	ldd	r26, Y+5	; 0x05
    c7ca:	be 81       	ldd	r27, Y+6	; 0x06
    c7cc:	92 96       	adiw	r26, 0x22	; 34
    c7ce:	8c 93       	st	X, r24
    c7d0:	12 c0       	rjmp	.+36     	; 0xc7f6 <get_cpu_joypad_state+0x1c0>
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
    c7d2:	8b 2d       	mov	r24, r11
    c7d4:	0e 94 f7 62 	call	0xc5ee	; 0xc5ee <get_cpu_goal_direction>
    c7d8:	ed 81       	ldd	r30, Y+5	; 0x05
    c7da:	fe 81       	ldd	r31, Y+6	; 0x06
    c7dc:	95 8f       	std	Z+29, r25	; 0x1d
    c7de:	84 8f       	std	Z+28, r24	; 0x1c
			player->goal = goal_x;
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c7e0:	80 31       	cpi	r24, 0x10	; 16
    c7e2:	91 05       	cpc	r25, r1
    c7e4:	21 f0       	breq	.+8      	; 0xc7ee <get_cpu_joypad_state+0x1b8>
    c7e6:	80 97       	sbiw	r24, 0x20	; 32
    c7e8:	11 f0       	breq	.+4      	; 0xc7ee <get_cpu_joypad_state+0x1b8>
			player->goal = LBRandom(5, 18);
		}
		else
		{
			player->goal_direction = get_cpu_goal_direction(distance_x, distance_y);
			player->goal = goal_x;
    c7ea:	32 a2       	std	Z+34, r3	; 0x22
    c7ec:	04 c0       	rjmp	.+8      	; 0xc7f6 <get_cpu_joypad_state+0x1c0>
			if (player->goal_direction == BTN_UP || player->goal_direction == BTN_DOWN) player->goal = goal_y;
    c7ee:	ad 81       	ldd	r26, Y+5	; 0x05
    c7f0:	be 81       	ldd	r27, Y+6	; 0x06
    c7f2:	92 96       	adiw	r26, 0x22	; 34
    c7f4:	7c 92       	st	X, r7
		}
		p->held = player->goal_direction;
    c7f6:	ed 81       	ldd	r30, Y+5	; 0x05
    c7f8:	fe 81       	ldd	r31, Y+6	; 0x06
    c7fa:	84 8d       	ldd	r24, Z+28	; 0x1c
    c7fc:	95 8d       	ldd	r25, Z+29	; 0x1d
    c7fe:	d8 01       	movw	r26, r16
    c800:	15 96       	adiw	r26, 0x05	; 5
    c802:	9c 93       	st	X, r25
    c804:	8e 93       	st	-X, r24
    c806:	14 97       	sbiw	r26, 0x04	; 4
	}
	
	// Monitor movement
	if (player->shared.x != player->old_x)
    c808:	ed 81       	ldd	r30, Y+5	; 0x05
    c80a:	fe 81       	ldd	r31, Y+6	; 0x06
    c80c:	c3 80       	ldd	r12, Z+3	; 0x03
    c80e:	d4 80       	ldd	r13, Z+4	; 0x04
    c810:	e5 80       	ldd	r14, Z+5	; 0x05
    c812:	f6 80       	ldd	r15, Z+6	; 0x06
    c814:	24 a1       	ldd	r18, Z+36	; 0x24
    c816:	35 a1       	ldd	r19, Z+37	; 0x25
    c818:	46 a1       	ldd	r20, Z+38	; 0x26
    c81a:	57 a1       	ldd	r21, Z+39	; 0x27
    c81c:	c7 01       	movw	r24, r14
    c81e:	b6 01       	movw	r22, r12
    c820:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    c824:	88 23       	and	r24, r24
    c826:	39 f0       	breq	.+14     	; 0xc836 <get_cpu_joypad_state+0x200>
		player->deadlock_count_x = 0;
    c828:	ad 81       	ldd	r26, Y+5	; 0x05
    c82a:	be 81       	ldd	r27, Y+6	; 0x06
    c82c:	5f 96       	adiw	r26, 0x1f	; 31
    c82e:	1c 92       	st	X, r1
    c830:	1e 92       	st	-X, r1
    c832:	5e 97       	sbiw	r26, 0x1e	; 30
    c834:	07 c0       	rjmp	.+14     	; 0xc844 <get_cpu_joypad_state+0x20e>
	else 
		player->deadlock_count_x++;
    c836:	ed 81       	ldd	r30, Y+5	; 0x05
    c838:	fe 81       	ldd	r31, Y+6	; 0x06
    c83a:	86 8d       	ldd	r24, Z+30	; 0x1e
    c83c:	97 8d       	ldd	r25, Z+31	; 0x1f
    c83e:	01 96       	adiw	r24, 0x01	; 1
    c840:	97 8f       	std	Z+31, r25	; 0x1f
    c842:	86 8f       	std	Z+30, r24	; 0x1e
	if (player->shared.y != player->old_y)
    c844:	ad 81       	ldd	r26, Y+5	; 0x05
    c846:	be 81       	ldd	r27, Y+6	; 0x06
    c848:	17 96       	adiw	r26, 0x07	; 7
    c84a:	8d 90       	ld	r8, X+
    c84c:	9d 90       	ld	r9, X+
    c84e:	ad 90       	ld	r10, X+
    c850:	bc 90       	ld	r11, X
    c852:	1a 97       	sbiw	r26, 0x0a	; 10
    c854:	98 96       	adiw	r26, 0x28	; 40
    c856:	2d 91       	ld	r18, X+
    c858:	3d 91       	ld	r19, X+
    c85a:	4d 91       	ld	r20, X+
    c85c:	5c 91       	ld	r21, X
    c85e:	9b 97       	sbiw	r26, 0x2b	; 43
    c860:	c5 01       	movw	r24, r10
    c862:	b4 01       	movw	r22, r8
    c864:	0e 94 f5 65 	call	0xcbea	; 0xcbea <__cmpsf2>
    c868:	88 23       	and	r24, r24
    c86a:	29 f0       	breq	.+10     	; 0xc876 <get_cpu_joypad_state+0x240>
		player->deadlock_count_y = 0;
    c86c:	ed 81       	ldd	r30, Y+5	; 0x05
    c86e:	fe 81       	ldd	r31, Y+6	; 0x06
    c870:	11 a2       	std	Z+33, r1	; 0x21
    c872:	10 a2       	std	Z+32, r1	; 0x20
    c874:	0b c0       	rjmp	.+22     	; 0xc88c <get_cpu_joypad_state+0x256>
	else
		player->deadlock_count_y++;
    c876:	ad 81       	ldd	r26, Y+5	; 0x05
    c878:	be 81       	ldd	r27, Y+6	; 0x06
    c87a:	90 96       	adiw	r26, 0x20	; 32
    c87c:	8d 91       	ld	r24, X+
    c87e:	9c 91       	ld	r25, X
    c880:	91 97       	sbiw	r26, 0x21	; 33
    c882:	01 96       	adiw	r24, 0x01	; 1
    c884:	91 96       	adiw	r26, 0x21	; 33
    c886:	9c 93       	st	X, r25
    c888:	8e 93       	st	-X, r24
    c88a:	90 97       	sbiw	r26, 0x20	; 32
	player->old_x = player->shared.x;
    c88c:	ed 81       	ldd	r30, Y+5	; 0x05
    c88e:	fe 81       	ldd	r31, Y+6	; 0x06
    c890:	c4 a2       	std	Z+36, r12	; 0x24
    c892:	d5 a2       	std	Z+37, r13	; 0x25
    c894:	e6 a2       	std	Z+38, r14	; 0x26
    c896:	f7 a2       	std	Z+39, r15	; 0x27
	player->old_y = player->shared.y;
    c898:	80 a6       	std	Z+40, r8	; 0x28
    c89a:	91 a6       	std	Z+41, r9	; 0x29
    c89c:	a2 a6       	std	Z+42, r10	; 0x2a
    c89e:	b3 a6       	std	Z+43, r11	; 0x2b
	
	// Break tactical deadlock
	if (player->deadlock_count_x >= FRAMES_PER_DEADLOCK)
    c8a0:	86 8d       	ldd	r24, Z+30	; 0x1e
    c8a2:	97 8d       	ldd	r25, Z+31	; 0x1f
    c8a4:	80 34       	cpi	r24, 0x40	; 64
    c8a6:	91 40       	sbci	r25, 0x01	; 1
    c8a8:	90 f0       	brcs	.+36     	; 0xc8ce <get_cpu_joypad_state+0x298>
	{
		p->held = button_map(LBRandom(2, 4));
    c8aa:	64 e0       	ldi	r22, 0x04	; 4
    c8ac:	70 e0       	ldi	r23, 0x00	; 0
    c8ae:	82 e0       	ldi	r24, 0x02	; 2
    c8b0:	90 e0       	ldi	r25, 0x00	; 0
    c8b2:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
    c8b6:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <button_map>
    c8ba:	f8 01       	movw	r30, r16
    c8bc:	95 83       	std	Z+5, r25	; 0x05
    c8be:	84 83       	std	Z+4, r24	; 0x04
		player->deadlock_count_x = 0;
    c8c0:	ad 81       	ldd	r26, Y+5	; 0x05
    c8c2:	be 81       	ldd	r27, Y+6	; 0x06
    c8c4:	5f 96       	adiw	r26, 0x1f	; 31
    c8c6:	1c 92       	st	X, r1
    c8c8:	1e 92       	st	-X, r1
    c8ca:	5e 97       	sbiw	r26, 0x1e	; 30
    c8cc:	40 c0       	rjmp	.+128    	; 0xc94e <get_cpu_joypad_state+0x318>
	}
	else if (player->deadlock_count_y >= FRAMES_PER_DEADLOCK)
    c8ce:	ed 81       	ldd	r30, Y+5	; 0x05
    c8d0:	fe 81       	ldd	r31, Y+6	; 0x06
    c8d2:	80 a1       	ldd	r24, Z+32	; 0x20
    c8d4:	91 a1       	ldd	r25, Z+33	; 0x21
    c8d6:	80 34       	cpi	r24, 0x40	; 64
    c8d8:	91 40       	sbci	r25, 0x01	; 1
    c8da:	90 f0       	brcs	.+36     	; 0xc900 <get_cpu_joypad_state+0x2ca>
	{
		p->held = button_map(LBRandom(0, 2));
    c8dc:	62 e0       	ldi	r22, 0x02	; 2
    c8de:	70 e0       	ldi	r23, 0x00	; 0
    c8e0:	80 e0       	ldi	r24, 0x00	; 0
    c8e2:	90 e0       	ldi	r25, 0x00	; 0
    c8e4:	0e 94 19 4e 	call	0x9c32	; 0x9c32 <LBRandom>
    c8e8:	0e 94 dd 61 	call	0xc3ba	; 0xc3ba <button_map>
    c8ec:	d8 01       	movw	r26, r16
    c8ee:	15 96       	adiw	r26, 0x05	; 5
    c8f0:	9c 93       	st	X, r25
    c8f2:	8e 93       	st	-X, r24
    c8f4:	14 97       	sbiw	r26, 0x04	; 4
		player->deadlock_count_y = 0;
    c8f6:	ed 81       	ldd	r30, Y+5	; 0x05
    c8f8:	fe 81       	ldd	r31, Y+6	; 0x06
    c8fa:	11 a2       	std	Z+33, r1	; 0x21
    c8fc:	10 a2       	std	Z+32, r1	; 0x20
    c8fe:	27 c0       	rjmp	.+78     	; 0xc94e <get_cpu_joypad_state+0x318>
	}
	else player->goal_reached = crash_and_turn(player->shared.x / 8, player->shared.y / 8 - 3, player->shared.recoiled, player, p);
    c900:	20 e0       	ldi	r18, 0x00	; 0
    c902:	30 e0       	ldi	r19, 0x00	; 0
    c904:	40 e0       	ldi	r20, 0x00	; 0
    c906:	5e e3       	ldi	r21, 0x3E	; 62
    c908:	c5 01       	movw	r24, r10
    c90a:	b4 01       	movw	r22, r8
    c90c:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c910:	20 e0       	ldi	r18, 0x00	; 0
    c912:	30 e0       	ldi	r19, 0x00	; 0
    c914:	40 e4       	ldi	r20, 0x40	; 64
    c916:	50 e4       	ldi	r21, 0x40	; 64
    c918:	0e 94 90 65 	call	0xcb20	; 0xcb20 <__subsf3>
    c91c:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
    c920:	b6 2e       	mov	r11, r22
    c922:	20 e0       	ldi	r18, 0x00	; 0
    c924:	30 e0       	ldi	r19, 0x00	; 0
    c926:	40 e0       	ldi	r20, 0x00	; 0
    c928:	5e e3       	ldi	r21, 0x3E	; 62
    c92a:	c7 01       	movw	r24, r14
    c92c:	b6 01       	movw	r22, r12
    c92e:	0e 94 48 67 	call	0xce90	; 0xce90 <__mulsf3>
    c932:	0e 94 61 66 	call	0xccc2	; 0xccc2 <__fixsfsi>
    c936:	86 2f       	mov	r24, r22
    c938:	2d 81       	ldd	r18, Y+5	; 0x05
    c93a:	3e 81       	ldd	r19, Y+6	; 0x06
    c93c:	d9 01       	movw	r26, r18
    c93e:	12 96       	adiw	r26, 0x02	; 2
    c940:	4c 91       	ld	r20, X
    c942:	6b 2d       	mov	r22, r11
    c944:	0e 94 f3 61 	call	0xc3e6	; 0xc3e6 <crash_and_turn>
    c948:	ed 81       	ldd	r30, Y+5	; 0x05
    c94a:	fe 81       	ldd	r31, Y+6	; 0x06
    c94c:	83 a3       	std	Z+35, r24	; 0x23
}
    c94e:	26 96       	adiw	r28, 0x06	; 6
    c950:	0f b6       	in	r0, 0x3f	; 63
    c952:	f8 94       	cli
    c954:	de bf       	out	0x3e, r29	; 62
    c956:	0f be       	out	0x3f, r0	; 63
    c958:	cd bf       	out	0x3d, r28	; 61
    c95a:	df 91       	pop	r29
    c95c:	cf 91       	pop	r28
    c95e:	1f 91       	pop	r17
    c960:	0f 91       	pop	r16
    c962:	ff 90       	pop	r15
    c964:	ef 90       	pop	r14
    c966:	df 90       	pop	r13
    c968:	cf 90       	pop	r12
    c96a:	bf 90       	pop	r11
    c96c:	af 90       	pop	r10
    c96e:	9f 90       	pop	r9
    c970:	8f 90       	pop	r8
    c972:	7f 90       	pop	r7
    c974:	6f 90       	pop	r6
    c976:	5f 90       	pop	r5
    c978:	4f 90       	pop	r4
    c97a:	3f 90       	pop	r3
    c97c:	2f 90       	pop	r2
    c97e:	08 95       	ret

0000c980 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    c980:	85 e6       	ldi	r24, 0x65	; 101
    c982:	93 e0       	ldi	r25, 0x03	; 3
    c984:	0e 94 42 40 	call	0x8084	; 0x8084 <InitMusicPlayer>
	SetMasterVolume(0xff);
    c988:	8f ef       	ldi	r24, 0xFF	; 255
    c98a:	0e 94 95 43 	call	0x872a	; 0x872a <SetMasterVolume>
	SetTileTable(tiles_data);
    c98e:	8a e7       	ldi	r24, 0x7A	; 122
    c990:	91 e3       	ldi	r25, 0x31	; 49
    c992:	0e 94 01 3e 	call	0x7c02	; 0x7c02 <SetTileTable>
	SetSpritesTileTable(sprites_data);
    c996:	84 e1       	ldi	r24, 0x14	; 20
    c998:	94 e2       	ldi	r25, 0x24	; 36
    c99a:	0e 94 dd 3d 	call	0x7bba	; 0x7bba <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    c99e:	8f e2       	ldi	r24, 0x2F	; 47
    c9a0:	0e 94 fe 3d 	call	0x7bfc	; 0x7bfc <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    c9a4:	60 e0       	ldi	r22, 0x00	; 0
    c9a6:	83 e0       	ldi	r24, 0x03	; 3
    c9a8:	0e 94 2d 4c 	call	0x985a	; 0x985a <FadeIn>
	ClearVram();
    c9ac:	0e 94 e2 3d 	call	0x7bc4	; 0x7bc4 <ClearVram>
	init_scores(&scores);
    c9b0:	81 ec       	ldi	r24, 0xC1	; 193
    c9b2:	9b e0       	ldi	r25, 0x0B	; 11
    c9b4:	0e 94 5d 4e 	call	0x9cba	; 0x9cba <init_scores>
	init_handles(&handles);
    c9b8:	88 ee       	ldi	r24, 0xE8	; 232
    c9ba:	9b e0       	ldi	r25, 0x0B	; 11
    c9bc:	0e 94 69 4e 	call	0x9cd2	; 0x9cd2 <init_handles>
	init_game_state();
    c9c0:	0e 94 54 4f 	call	0x9ea8	; 0x9ea8 <init_game_state>
	init_tile_animations(&tile_animations);
    c9c4:	8c e0       	ldi	r24, 0x0C	; 12
    c9c6:	9c e0       	ldi	r25, 0x0C	; 12
    c9c8:	0e 94 75 4e 	call	0x9cea	; 0x9cea <init_tile_animations>
	load_splash();
    c9cc:	0e 94 f6 5a 	call	0xb5ec	; 0xb5ec <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    c9d0:	81 e0       	ldi	r24, 0x01	; 1
    c9d2:	90 e0       	ldi	r25, 0x00	; 0
    c9d4:	0e 94 08 4c 	call	0x9810	; 0x9810 <WaitVsync>
		switch (game.current_screen)
    c9d8:	80 91 08 0c 	lds	r24, 0x0C08
    c9dc:	81 30       	cpi	r24, 0x01	; 1
    c9de:	91 f0       	breq	.+36     	; 0xca04 <main+0x84>
    c9e0:	28 f0       	brcs	.+10     	; 0xc9ec <main+0x6c>
    c9e2:	82 30       	cpi	r24, 0x02	; 2
    c9e4:	d9 f0       	breq	.+54     	; 0xca1c <main+0x9c>
    c9e6:	83 30       	cpi	r24, 0x03	; 3
    c9e8:	51 f1       	breq	.+84     	; 0xca3e <main+0xbe>
    c9ea:	56 c0       	rjmp	.+172    	; 0xca98 <main+0x118>
		{
			case SPLASH:
				LBGetJoyPadState(&p1, 0);
    c9ec:	60 e0       	ldi	r22, 0x00	; 0
    c9ee:	83 e9       	ldi	r24, 0x93	; 147
    c9f0:	9c e0       	ldi	r25, 0x0C	; 12
    c9f2:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
				update_splash(&p1, &p2);
    c9f6:	61 ee       	ldi	r22, 0xE1	; 225
    c9f8:	7b e0       	ldi	r23, 0x0B	; 11
    c9fa:	83 e9       	ldi	r24, 0x93	; 147
    c9fc:	9c e0       	ldi	r25, 0x0C	; 12
    c9fe:	0e 94 d8 60 	call	0xc1b0	; 0xc1b0 <update_splash>
				break;
    ca02:	4a c0       	rjmp	.+148    	; 0xca98 <main+0x118>
			case TANK_RANK:
				LBGetJoyPadState(&p1, 0);
    ca04:	60 e0       	ldi	r22, 0x00	; 0
    ca06:	83 e9       	ldi	r24, 0x93	; 147
    ca08:	9c e0       	ldi	r25, 0x0C	; 12
    ca0a:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
				update_tank_rank(&p1, &p2);
    ca0e:	61 ee       	ldi	r22, 0xE1	; 225
    ca10:	7b e0       	ldi	r23, 0x0B	; 11
    ca12:	83 e9       	ldi	r24, 0x93	; 147
    ca14:	9c e0       	ldi	r25, 0x0C	; 12
    ca16:	0e 94 bd 5e 	call	0xbd7a	; 0xbd7a <update_tank_rank>
				break;
    ca1a:	3e c0       	rjmp	.+124    	; 0xca98 <main+0x118>
			case HANDLE_SELECT:
				LBGetJoyPadState(&p1, 0);
    ca1c:	60 e0       	ldi	r22, 0x00	; 0
    ca1e:	83 e9       	ldi	r24, 0x93	; 147
    ca20:	9c e0       	ldi	r25, 0x0C	; 12
    ca22:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
				LBGetJoyPadState(&p2, 1);
    ca26:	61 e0       	ldi	r22, 0x01	; 1
    ca28:	81 ee       	ldi	r24, 0xE1	; 225
    ca2a:	9b e0       	ldi	r25, 0x0B	; 11
    ca2c:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
				update_handle_select(&p1, &p2);
    ca30:	61 ee       	ldi	r22, 0xE1	; 225
    ca32:	7b e0       	ldi	r23, 0x0B	; 11
    ca34:	83 e9       	ldi	r24, 0x93	; 147
    ca36:	9c e0       	ldi	r25, 0x0C	; 12
    ca38:	0e 94 8f 61 	call	0xc31e	; 0xc31e <update_handle_select>
				break;
    ca3c:	2d c0       	rjmp	.+90     	; 0xca98 <main+0x118>
			case LEVEL:
				if (game.selection == PVCPU)
    ca3e:	80 91 0b 0c 	lds	r24, 0x0C0B
    ca42:	81 11       	cpse	r24, r1
    ca44:	06 c0       	rjmp	.+12     	; 0xca52 <main+0xd2>
				{
					LBGetJoyPadState(&p1, 0);
    ca46:	60 e0       	ldi	r22, 0x00	; 0
    ca48:	83 e9       	ldi	r24, 0x93	; 147
    ca4a:	9c e0       	ldi	r25, 0x0C	; 12
    ca4c:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
    ca50:	0a c0       	rjmp	.+20     	; 0xca66 <main+0xe6>
					get_cpu_joypad_state(&player2, &player1, &p2);
				}
				else if (game.selection == CPUVCPU)
    ca52:	83 30       	cpi	r24, 0x03	; 3
    ca54:	89 f4       	brne	.+34     	; 0xca78 <main+0xf8>
				{
					get_cpu_joypad_state(&player1, &player2, &p1);
    ca56:	43 e9       	ldi	r20, 0x93	; 147
    ca58:	5c e0       	ldi	r21, 0x0C	; 12
    ca5a:	69 e8       	ldi	r22, 0x89	; 137
    ca5c:	7f e0       	ldi	r23, 0x0F	; 15
    ca5e:	85 e2       	ldi	r24, 0x25	; 37
    ca60:	9c e0       	ldi	r25, 0x0C	; 12
    ca62:	0e 94 1b 63 	call	0xc636	; 0xc636 <get_cpu_joypad_state>
					get_cpu_joypad_state(&player2, &player1, &p2);
    ca66:	41 ee       	ldi	r20, 0xE1	; 225
    ca68:	5b e0       	ldi	r21, 0x0B	; 11
    ca6a:	65 e2       	ldi	r22, 0x25	; 37
    ca6c:	7c e0       	ldi	r23, 0x0C	; 12
    ca6e:	89 e8       	ldi	r24, 0x89	; 137
    ca70:	9f e0       	ldi	r25, 0x0F	; 15
    ca72:	0e 94 1b 63 	call	0xc636	; 0xc636 <get_cpu_joypad_state>
    ca76:	0a c0       	rjmp	.+20     	; 0xca8c <main+0x10c>
				}
				else
				{
					LBGetJoyPadState(&p1, 0);
    ca78:	60 e0       	ldi	r22, 0x00	; 0
    ca7a:	83 e9       	ldi	r24, 0x93	; 147
    ca7c:	9c e0       	ldi	r25, 0x0C	; 12
    ca7e:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
					LBGetJoyPadState(&p2, 1);
    ca82:	61 e0       	ldi	r22, 0x01	; 1
    ca84:	81 ee       	ldi	r24, 0xE1	; 225
    ca86:	9b e0       	ldi	r25, 0x0B	; 11
    ca88:	0e 94 91 4c 	call	0x9922	; 0x9922 <LBGetJoyPadState>
				}
				update_level(&p1, &p2);
    ca8c:	61 ee       	ldi	r22, 0xE1	; 225
    ca8e:	7b e0       	ldi	r23, 0x0B	; 11
    ca90:	83 e9       	ldi	r24, 0x93	; 147
    ca92:	9c e0       	ldi	r25, 0x0C	; 12
    ca94:	0e 94 f7 5d 	call	0xbbee	; 0xbbee <update_level>
				break;
			default:
				break;
		}
		global_frame_counter++;
    ca98:	80 91 04 01 	lds	r24, 0x0104
    ca9c:	90 91 05 01 	lds	r25, 0x0105
    caa0:	01 96       	adiw	r24, 0x01	; 1
    caa2:	90 93 05 01 	sts	0x0105, r25
    caa6:	80 93 04 01 	sts	0x0104, r24
	}
    caaa:	92 cf       	rjmp	.-220    	; 0xc9d0 <main+0x50>

0000caac <__udivmodqi4>:
    caac:	99 1b       	sub	r25, r25
    caae:	79 e0       	ldi	r23, 0x09	; 9
    cab0:	04 c0       	rjmp	.+8      	; 0xcaba <__udivmodqi4_ep>

0000cab2 <__udivmodqi4_loop>:
    cab2:	99 1f       	adc	r25, r25
    cab4:	96 17       	cp	r25, r22
    cab6:	08 f0       	brcs	.+2      	; 0xcaba <__udivmodqi4_ep>
    cab8:	96 1b       	sub	r25, r22

0000caba <__udivmodqi4_ep>:
    caba:	88 1f       	adc	r24, r24
    cabc:	7a 95       	dec	r23
    cabe:	c9 f7       	brne	.-14     	; 0xcab2 <__udivmodqi4_loop>
    cac0:	80 95       	com	r24
    cac2:	08 95       	ret

0000cac4 <__udivmodhi4>:
    cac4:	aa 1b       	sub	r26, r26
    cac6:	bb 1b       	sub	r27, r27
    cac8:	51 e1       	ldi	r21, 0x11	; 17
    caca:	07 c0       	rjmp	.+14     	; 0xcada <__udivmodhi4_ep>

0000cacc <__udivmodhi4_loop>:
    cacc:	aa 1f       	adc	r26, r26
    cace:	bb 1f       	adc	r27, r27
    cad0:	a6 17       	cp	r26, r22
    cad2:	b7 07       	cpc	r27, r23
    cad4:	10 f0       	brcs	.+4      	; 0xcada <__udivmodhi4_ep>
    cad6:	a6 1b       	sub	r26, r22
    cad8:	b7 0b       	sbc	r27, r23

0000cada <__udivmodhi4_ep>:
    cada:	88 1f       	adc	r24, r24
    cadc:	99 1f       	adc	r25, r25
    cade:	5a 95       	dec	r21
    cae0:	a9 f7       	brne	.-22     	; 0xcacc <__udivmodhi4_loop>
    cae2:	80 95       	com	r24
    cae4:	90 95       	com	r25
    cae6:	bc 01       	movw	r22, r24
    cae8:	cd 01       	movw	r24, r26
    caea:	08 95       	ret

0000caec <__divmodhi4>:
    caec:	97 fb       	bst	r25, 7
    caee:	07 2e       	mov	r0, r23
    caf0:	16 f4       	brtc	.+4      	; 0xcaf6 <__divmodhi4+0xa>
    caf2:	00 94       	com	r0
    caf4:	07 d0       	rcall	.+14     	; 0xcb04 <__divmodhi4_neg1>
    caf6:	77 fd       	sbrc	r23, 7
    caf8:	09 d0       	rcall	.+18     	; 0xcb0c <__divmodhi4_neg2>
    cafa:	0e 94 62 65 	call	0xcac4	; 0xcac4 <__udivmodhi4>
    cafe:	07 fc       	sbrc	r0, 7
    cb00:	05 d0       	rcall	.+10     	; 0xcb0c <__divmodhi4_neg2>
    cb02:	3e f4       	brtc	.+14     	; 0xcb12 <__divmodhi4_exit>

0000cb04 <__divmodhi4_neg1>:
    cb04:	90 95       	com	r25
    cb06:	81 95       	neg	r24
    cb08:	9f 4f       	sbci	r25, 0xFF	; 255
    cb0a:	08 95       	ret

0000cb0c <__divmodhi4_neg2>:
    cb0c:	70 95       	com	r23
    cb0e:	61 95       	neg	r22
    cb10:	7f 4f       	sbci	r23, 0xFF	; 255

0000cb12 <__divmodhi4_exit>:
    cb12:	08 95       	ret

0000cb14 <__tablejump2__>:
    cb14:	ee 0f       	add	r30, r30
    cb16:	ff 1f       	adc	r31, r31
    cb18:	05 90       	lpm	r0, Z+
    cb1a:	f4 91       	lpm	r31, Z
    cb1c:	e0 2d       	mov	r30, r0
    cb1e:	09 94       	ijmp

0000cb20 <__subsf3>:
    cb20:	50 58       	subi	r21, 0x80	; 128

0000cb22 <__addsf3>:
    cb22:	bb 27       	eor	r27, r27
    cb24:	aa 27       	eor	r26, r26
    cb26:	0e d0       	rcall	.+28     	; 0xcb44 <__addsf3x>
    cb28:	75 c1       	rjmp	.+746    	; 0xce14 <__fp_round>
    cb2a:	66 d1       	rcall	.+716    	; 0xcdf8 <__fp_pscA>
    cb2c:	30 f0       	brcs	.+12     	; 0xcb3a <__addsf3+0x18>
    cb2e:	6b d1       	rcall	.+726    	; 0xce06 <__fp_pscB>
    cb30:	20 f0       	brcs	.+8      	; 0xcb3a <__addsf3+0x18>
    cb32:	31 f4       	brne	.+12     	; 0xcb40 <__addsf3+0x1e>
    cb34:	9f 3f       	cpi	r25, 0xFF	; 255
    cb36:	11 f4       	brne	.+4      	; 0xcb3c <__addsf3+0x1a>
    cb38:	1e f4       	brtc	.+6      	; 0xcb40 <__addsf3+0x1e>
    cb3a:	5b c1       	rjmp	.+694    	; 0xcdf2 <__fp_nan>
    cb3c:	0e f4       	brtc	.+2      	; 0xcb40 <__addsf3+0x1e>
    cb3e:	e0 95       	com	r30
    cb40:	e7 fb       	bst	r30, 7
    cb42:	51 c1       	rjmp	.+674    	; 0xcde6 <__fp_inf>

0000cb44 <__addsf3x>:
    cb44:	e9 2f       	mov	r30, r25
    cb46:	77 d1       	rcall	.+750    	; 0xce36 <__fp_split3>
    cb48:	80 f3       	brcs	.-32     	; 0xcb2a <__addsf3+0x8>
    cb4a:	ba 17       	cp	r27, r26
    cb4c:	62 07       	cpc	r22, r18
    cb4e:	73 07       	cpc	r23, r19
    cb50:	84 07       	cpc	r24, r20
    cb52:	95 07       	cpc	r25, r21
    cb54:	18 f0       	brcs	.+6      	; 0xcb5c <__addsf3x+0x18>
    cb56:	71 f4       	brne	.+28     	; 0xcb74 <__addsf3x+0x30>
    cb58:	9e f5       	brtc	.+102    	; 0xcbc0 <__addsf3x+0x7c>
    cb5a:	8f c1       	rjmp	.+798    	; 0xce7a <__fp_zero>
    cb5c:	0e f4       	brtc	.+2      	; 0xcb60 <__addsf3x+0x1c>
    cb5e:	e0 95       	com	r30
    cb60:	0b 2e       	mov	r0, r27
    cb62:	ba 2f       	mov	r27, r26
    cb64:	a0 2d       	mov	r26, r0
    cb66:	0b 01       	movw	r0, r22
    cb68:	b9 01       	movw	r22, r18
    cb6a:	90 01       	movw	r18, r0
    cb6c:	0c 01       	movw	r0, r24
    cb6e:	ca 01       	movw	r24, r20
    cb70:	a0 01       	movw	r20, r0
    cb72:	11 24       	eor	r1, r1
    cb74:	ff 27       	eor	r31, r31
    cb76:	59 1b       	sub	r21, r25
    cb78:	99 f0       	breq	.+38     	; 0xcba0 <__addsf3x+0x5c>
    cb7a:	59 3f       	cpi	r21, 0xF9	; 249
    cb7c:	50 f4       	brcc	.+20     	; 0xcb92 <__addsf3x+0x4e>
    cb7e:	50 3e       	cpi	r21, 0xE0	; 224
    cb80:	68 f1       	brcs	.+90     	; 0xcbdc <__addsf3x+0x98>
    cb82:	1a 16       	cp	r1, r26
    cb84:	f0 40       	sbci	r31, 0x00	; 0
    cb86:	a2 2f       	mov	r26, r18
    cb88:	23 2f       	mov	r18, r19
    cb8a:	34 2f       	mov	r19, r20
    cb8c:	44 27       	eor	r20, r20
    cb8e:	58 5f       	subi	r21, 0xF8	; 248
    cb90:	f3 cf       	rjmp	.-26     	; 0xcb78 <__addsf3x+0x34>
    cb92:	46 95       	lsr	r20
    cb94:	37 95       	ror	r19
    cb96:	27 95       	ror	r18
    cb98:	a7 95       	ror	r26
    cb9a:	f0 40       	sbci	r31, 0x00	; 0
    cb9c:	53 95       	inc	r21
    cb9e:	c9 f7       	brne	.-14     	; 0xcb92 <__addsf3x+0x4e>
    cba0:	7e f4       	brtc	.+30     	; 0xcbc0 <__addsf3x+0x7c>
    cba2:	1f 16       	cp	r1, r31
    cba4:	ba 0b       	sbc	r27, r26
    cba6:	62 0b       	sbc	r22, r18
    cba8:	73 0b       	sbc	r23, r19
    cbaa:	84 0b       	sbc	r24, r20
    cbac:	ba f0       	brmi	.+46     	; 0xcbdc <__addsf3x+0x98>
    cbae:	91 50       	subi	r25, 0x01	; 1
    cbb0:	a1 f0       	breq	.+40     	; 0xcbda <__addsf3x+0x96>
    cbb2:	ff 0f       	add	r31, r31
    cbb4:	bb 1f       	adc	r27, r27
    cbb6:	66 1f       	adc	r22, r22
    cbb8:	77 1f       	adc	r23, r23
    cbba:	88 1f       	adc	r24, r24
    cbbc:	c2 f7       	brpl	.-16     	; 0xcbae <__addsf3x+0x6a>
    cbbe:	0e c0       	rjmp	.+28     	; 0xcbdc <__addsf3x+0x98>
    cbc0:	ba 0f       	add	r27, r26
    cbc2:	62 1f       	adc	r22, r18
    cbc4:	73 1f       	adc	r23, r19
    cbc6:	84 1f       	adc	r24, r20
    cbc8:	48 f4       	brcc	.+18     	; 0xcbdc <__addsf3x+0x98>
    cbca:	87 95       	ror	r24
    cbcc:	77 95       	ror	r23
    cbce:	67 95       	ror	r22
    cbd0:	b7 95       	ror	r27
    cbd2:	f7 95       	ror	r31
    cbd4:	9e 3f       	cpi	r25, 0xFE	; 254
    cbd6:	08 f0       	brcs	.+2      	; 0xcbda <__addsf3x+0x96>
    cbd8:	b3 cf       	rjmp	.-154    	; 0xcb40 <__addsf3+0x1e>
    cbda:	93 95       	inc	r25
    cbdc:	88 0f       	add	r24, r24
    cbde:	08 f0       	brcs	.+2      	; 0xcbe2 <__addsf3x+0x9e>
    cbe0:	99 27       	eor	r25, r25
    cbe2:	ee 0f       	add	r30, r30
    cbe4:	97 95       	ror	r25
    cbe6:	87 95       	ror	r24
    cbe8:	08 95       	ret

0000cbea <__cmpsf2>:
    cbea:	d9 d0       	rcall	.+434    	; 0xcd9e <__fp_cmp>
    cbec:	08 f4       	brcc	.+2      	; 0xcbf0 <__cmpsf2+0x6>
    cbee:	81 e0       	ldi	r24, 0x01	; 1
    cbf0:	08 95       	ret

0000cbf2 <__divsf3>:
    cbf2:	0c d0       	rcall	.+24     	; 0xcc0c <__divsf3x>
    cbf4:	0f c1       	rjmp	.+542    	; 0xce14 <__fp_round>
    cbf6:	07 d1       	rcall	.+526    	; 0xce06 <__fp_pscB>
    cbf8:	40 f0       	brcs	.+16     	; 0xcc0a <__divsf3+0x18>
    cbfa:	fe d0       	rcall	.+508    	; 0xcdf8 <__fp_pscA>
    cbfc:	30 f0       	brcs	.+12     	; 0xcc0a <__divsf3+0x18>
    cbfe:	21 f4       	brne	.+8      	; 0xcc08 <__divsf3+0x16>
    cc00:	5f 3f       	cpi	r21, 0xFF	; 255
    cc02:	19 f0       	breq	.+6      	; 0xcc0a <__divsf3+0x18>
    cc04:	f0 c0       	rjmp	.+480    	; 0xcde6 <__fp_inf>
    cc06:	51 11       	cpse	r21, r1
    cc08:	39 c1       	rjmp	.+626    	; 0xce7c <__fp_szero>
    cc0a:	f3 c0       	rjmp	.+486    	; 0xcdf2 <__fp_nan>

0000cc0c <__divsf3x>:
    cc0c:	14 d1       	rcall	.+552    	; 0xce36 <__fp_split3>
    cc0e:	98 f3       	brcs	.-26     	; 0xcbf6 <__divsf3+0x4>

0000cc10 <__divsf3_pse>:
    cc10:	99 23       	and	r25, r25
    cc12:	c9 f3       	breq	.-14     	; 0xcc06 <__divsf3+0x14>
    cc14:	55 23       	and	r21, r21
    cc16:	b1 f3       	breq	.-20     	; 0xcc04 <__divsf3+0x12>
    cc18:	95 1b       	sub	r25, r21
    cc1a:	55 0b       	sbc	r21, r21
    cc1c:	bb 27       	eor	r27, r27
    cc1e:	aa 27       	eor	r26, r26
    cc20:	62 17       	cp	r22, r18
    cc22:	73 07       	cpc	r23, r19
    cc24:	84 07       	cpc	r24, r20
    cc26:	38 f0       	brcs	.+14     	; 0xcc36 <__divsf3_pse+0x26>
    cc28:	9f 5f       	subi	r25, 0xFF	; 255
    cc2a:	5f 4f       	sbci	r21, 0xFF	; 255
    cc2c:	22 0f       	add	r18, r18
    cc2e:	33 1f       	adc	r19, r19
    cc30:	44 1f       	adc	r20, r20
    cc32:	aa 1f       	adc	r26, r26
    cc34:	a9 f3       	breq	.-22     	; 0xcc20 <__divsf3_pse+0x10>
    cc36:	33 d0       	rcall	.+102    	; 0xcc9e <__divsf3_pse+0x8e>
    cc38:	0e 2e       	mov	r0, r30
    cc3a:	3a f0       	brmi	.+14     	; 0xcc4a <__divsf3_pse+0x3a>
    cc3c:	e0 e8       	ldi	r30, 0x80	; 128
    cc3e:	30 d0       	rcall	.+96     	; 0xcca0 <__divsf3_pse+0x90>
    cc40:	91 50       	subi	r25, 0x01	; 1
    cc42:	50 40       	sbci	r21, 0x00	; 0
    cc44:	e6 95       	lsr	r30
    cc46:	00 1c       	adc	r0, r0
    cc48:	ca f7       	brpl	.-14     	; 0xcc3c <__divsf3_pse+0x2c>
    cc4a:	29 d0       	rcall	.+82     	; 0xcc9e <__divsf3_pse+0x8e>
    cc4c:	fe 2f       	mov	r31, r30
    cc4e:	27 d0       	rcall	.+78     	; 0xcc9e <__divsf3_pse+0x8e>
    cc50:	66 0f       	add	r22, r22
    cc52:	77 1f       	adc	r23, r23
    cc54:	88 1f       	adc	r24, r24
    cc56:	bb 1f       	adc	r27, r27
    cc58:	26 17       	cp	r18, r22
    cc5a:	37 07       	cpc	r19, r23
    cc5c:	48 07       	cpc	r20, r24
    cc5e:	ab 07       	cpc	r26, r27
    cc60:	b0 e8       	ldi	r27, 0x80	; 128
    cc62:	09 f0       	breq	.+2      	; 0xcc66 <__divsf3_pse+0x56>
    cc64:	bb 0b       	sbc	r27, r27
    cc66:	80 2d       	mov	r24, r0
    cc68:	bf 01       	movw	r22, r30
    cc6a:	ff 27       	eor	r31, r31
    cc6c:	93 58       	subi	r25, 0x83	; 131
    cc6e:	5f 4f       	sbci	r21, 0xFF	; 255
    cc70:	2a f0       	brmi	.+10     	; 0xcc7c <__divsf3_pse+0x6c>
    cc72:	9e 3f       	cpi	r25, 0xFE	; 254
    cc74:	51 05       	cpc	r21, r1
    cc76:	68 f0       	brcs	.+26     	; 0xcc92 <__divsf3_pse+0x82>
    cc78:	b6 c0       	rjmp	.+364    	; 0xcde6 <__fp_inf>
    cc7a:	00 c1       	rjmp	.+512    	; 0xce7c <__fp_szero>
    cc7c:	5f 3f       	cpi	r21, 0xFF	; 255
    cc7e:	ec f3       	brlt	.-6      	; 0xcc7a <__divsf3_pse+0x6a>
    cc80:	98 3e       	cpi	r25, 0xE8	; 232
    cc82:	dc f3       	brlt	.-10     	; 0xcc7a <__divsf3_pse+0x6a>
    cc84:	86 95       	lsr	r24
    cc86:	77 95       	ror	r23
    cc88:	67 95       	ror	r22
    cc8a:	b7 95       	ror	r27
    cc8c:	f7 95       	ror	r31
    cc8e:	9f 5f       	subi	r25, 0xFF	; 255
    cc90:	c9 f7       	brne	.-14     	; 0xcc84 <__divsf3_pse+0x74>
    cc92:	88 0f       	add	r24, r24
    cc94:	91 1d       	adc	r25, r1
    cc96:	96 95       	lsr	r25
    cc98:	87 95       	ror	r24
    cc9a:	97 f9       	bld	r25, 7
    cc9c:	08 95       	ret
    cc9e:	e1 e0       	ldi	r30, 0x01	; 1
    cca0:	66 0f       	add	r22, r22
    cca2:	77 1f       	adc	r23, r23
    cca4:	88 1f       	adc	r24, r24
    cca6:	bb 1f       	adc	r27, r27
    cca8:	62 17       	cp	r22, r18
    ccaa:	73 07       	cpc	r23, r19
    ccac:	84 07       	cpc	r24, r20
    ccae:	ba 07       	cpc	r27, r26
    ccb0:	20 f0       	brcs	.+8      	; 0xccba <__divsf3_pse+0xaa>
    ccb2:	62 1b       	sub	r22, r18
    ccb4:	73 0b       	sbc	r23, r19
    ccb6:	84 0b       	sbc	r24, r20
    ccb8:	ba 0b       	sbc	r27, r26
    ccba:	ee 1f       	adc	r30, r30
    ccbc:	88 f7       	brcc	.-30     	; 0xcca0 <__divsf3_pse+0x90>
    ccbe:	e0 95       	com	r30
    ccc0:	08 95       	ret

0000ccc2 <__fixsfsi>:
    ccc2:	04 d0       	rcall	.+8      	; 0xcccc <__fixunssfsi>
    ccc4:	68 94       	set
    ccc6:	b1 11       	cpse	r27, r1
    ccc8:	d9 c0       	rjmp	.+434    	; 0xce7c <__fp_szero>
    ccca:	08 95       	ret

0000cccc <__fixunssfsi>:
    cccc:	bc d0       	rcall	.+376    	; 0xce46 <__fp_splitA>
    ccce:	88 f0       	brcs	.+34     	; 0xccf2 <__fixunssfsi+0x26>
    ccd0:	9f 57       	subi	r25, 0x7F	; 127
    ccd2:	90 f0       	brcs	.+36     	; 0xccf8 <__fixunssfsi+0x2c>
    ccd4:	b9 2f       	mov	r27, r25
    ccd6:	99 27       	eor	r25, r25
    ccd8:	b7 51       	subi	r27, 0x17	; 23
    ccda:	a0 f0       	brcs	.+40     	; 0xcd04 <__fixunssfsi+0x38>
    ccdc:	d1 f0       	breq	.+52     	; 0xcd12 <__fixunssfsi+0x46>
    ccde:	66 0f       	add	r22, r22
    cce0:	77 1f       	adc	r23, r23
    cce2:	88 1f       	adc	r24, r24
    cce4:	99 1f       	adc	r25, r25
    cce6:	1a f0       	brmi	.+6      	; 0xccee <__fixunssfsi+0x22>
    cce8:	ba 95       	dec	r27
    ccea:	c9 f7       	brne	.-14     	; 0xccde <__fixunssfsi+0x12>
    ccec:	12 c0       	rjmp	.+36     	; 0xcd12 <__fixunssfsi+0x46>
    ccee:	b1 30       	cpi	r27, 0x01	; 1
    ccf0:	81 f0       	breq	.+32     	; 0xcd12 <__fixunssfsi+0x46>
    ccf2:	c3 d0       	rcall	.+390    	; 0xce7a <__fp_zero>
    ccf4:	b1 e0       	ldi	r27, 0x01	; 1
    ccf6:	08 95       	ret
    ccf8:	c0 c0       	rjmp	.+384    	; 0xce7a <__fp_zero>
    ccfa:	67 2f       	mov	r22, r23
    ccfc:	78 2f       	mov	r23, r24
    ccfe:	88 27       	eor	r24, r24
    cd00:	b8 5f       	subi	r27, 0xF8	; 248
    cd02:	39 f0       	breq	.+14     	; 0xcd12 <__fixunssfsi+0x46>
    cd04:	b9 3f       	cpi	r27, 0xF9	; 249
    cd06:	cc f3       	brlt	.-14     	; 0xccfa <__fixunssfsi+0x2e>
    cd08:	86 95       	lsr	r24
    cd0a:	77 95       	ror	r23
    cd0c:	67 95       	ror	r22
    cd0e:	b3 95       	inc	r27
    cd10:	d9 f7       	brne	.-10     	; 0xcd08 <__fixunssfsi+0x3c>
    cd12:	3e f4       	brtc	.+14     	; 0xcd22 <__fixunssfsi+0x56>
    cd14:	90 95       	com	r25
    cd16:	80 95       	com	r24
    cd18:	70 95       	com	r23
    cd1a:	61 95       	neg	r22
    cd1c:	7f 4f       	sbci	r23, 0xFF	; 255
    cd1e:	8f 4f       	sbci	r24, 0xFF	; 255
    cd20:	9f 4f       	sbci	r25, 0xFF	; 255
    cd22:	08 95       	ret

0000cd24 <__floatunsisf>:
    cd24:	e8 94       	clt
    cd26:	09 c0       	rjmp	.+18     	; 0xcd3a <__floatsisf+0x12>

0000cd28 <__floatsisf>:
    cd28:	97 fb       	bst	r25, 7
    cd2a:	3e f4       	brtc	.+14     	; 0xcd3a <__floatsisf+0x12>
    cd2c:	90 95       	com	r25
    cd2e:	80 95       	com	r24
    cd30:	70 95       	com	r23
    cd32:	61 95       	neg	r22
    cd34:	7f 4f       	sbci	r23, 0xFF	; 255
    cd36:	8f 4f       	sbci	r24, 0xFF	; 255
    cd38:	9f 4f       	sbci	r25, 0xFF	; 255
    cd3a:	99 23       	and	r25, r25
    cd3c:	a9 f0       	breq	.+42     	; 0xcd68 <__floatsisf+0x40>
    cd3e:	f9 2f       	mov	r31, r25
    cd40:	96 e9       	ldi	r25, 0x96	; 150
    cd42:	bb 27       	eor	r27, r27
    cd44:	93 95       	inc	r25
    cd46:	f6 95       	lsr	r31
    cd48:	87 95       	ror	r24
    cd4a:	77 95       	ror	r23
    cd4c:	67 95       	ror	r22
    cd4e:	b7 95       	ror	r27
    cd50:	f1 11       	cpse	r31, r1
    cd52:	f8 cf       	rjmp	.-16     	; 0xcd44 <__floatsisf+0x1c>
    cd54:	fa f4       	brpl	.+62     	; 0xcd94 <__floatsisf+0x6c>
    cd56:	bb 0f       	add	r27, r27
    cd58:	11 f4       	brne	.+4      	; 0xcd5e <__floatsisf+0x36>
    cd5a:	60 ff       	sbrs	r22, 0
    cd5c:	1b c0       	rjmp	.+54     	; 0xcd94 <__floatsisf+0x6c>
    cd5e:	6f 5f       	subi	r22, 0xFF	; 255
    cd60:	7f 4f       	sbci	r23, 0xFF	; 255
    cd62:	8f 4f       	sbci	r24, 0xFF	; 255
    cd64:	9f 4f       	sbci	r25, 0xFF	; 255
    cd66:	16 c0       	rjmp	.+44     	; 0xcd94 <__floatsisf+0x6c>
    cd68:	88 23       	and	r24, r24
    cd6a:	11 f0       	breq	.+4      	; 0xcd70 <__floatsisf+0x48>
    cd6c:	96 e9       	ldi	r25, 0x96	; 150
    cd6e:	11 c0       	rjmp	.+34     	; 0xcd92 <__floatsisf+0x6a>
    cd70:	77 23       	and	r23, r23
    cd72:	21 f0       	breq	.+8      	; 0xcd7c <__floatsisf+0x54>
    cd74:	9e e8       	ldi	r25, 0x8E	; 142
    cd76:	87 2f       	mov	r24, r23
    cd78:	76 2f       	mov	r23, r22
    cd7a:	05 c0       	rjmp	.+10     	; 0xcd86 <__floatsisf+0x5e>
    cd7c:	66 23       	and	r22, r22
    cd7e:	71 f0       	breq	.+28     	; 0xcd9c <__floatsisf+0x74>
    cd80:	96 e8       	ldi	r25, 0x86	; 134
    cd82:	86 2f       	mov	r24, r22
    cd84:	70 e0       	ldi	r23, 0x00	; 0
    cd86:	60 e0       	ldi	r22, 0x00	; 0
    cd88:	2a f0       	brmi	.+10     	; 0xcd94 <__floatsisf+0x6c>
    cd8a:	9a 95       	dec	r25
    cd8c:	66 0f       	add	r22, r22
    cd8e:	77 1f       	adc	r23, r23
    cd90:	88 1f       	adc	r24, r24
    cd92:	da f7       	brpl	.-10     	; 0xcd8a <__floatsisf+0x62>
    cd94:	88 0f       	add	r24, r24
    cd96:	96 95       	lsr	r25
    cd98:	87 95       	ror	r24
    cd9a:	97 f9       	bld	r25, 7
    cd9c:	08 95       	ret

0000cd9e <__fp_cmp>:
    cd9e:	99 0f       	add	r25, r25
    cda0:	00 08       	sbc	r0, r0
    cda2:	55 0f       	add	r21, r21
    cda4:	aa 0b       	sbc	r26, r26
    cda6:	e0 e8       	ldi	r30, 0x80	; 128
    cda8:	fe ef       	ldi	r31, 0xFE	; 254
    cdaa:	16 16       	cp	r1, r22
    cdac:	17 06       	cpc	r1, r23
    cdae:	e8 07       	cpc	r30, r24
    cdb0:	f9 07       	cpc	r31, r25
    cdb2:	c0 f0       	brcs	.+48     	; 0xcde4 <__fp_cmp+0x46>
    cdb4:	12 16       	cp	r1, r18
    cdb6:	13 06       	cpc	r1, r19
    cdb8:	e4 07       	cpc	r30, r20
    cdba:	f5 07       	cpc	r31, r21
    cdbc:	98 f0       	brcs	.+38     	; 0xcde4 <__fp_cmp+0x46>
    cdbe:	62 1b       	sub	r22, r18
    cdc0:	73 0b       	sbc	r23, r19
    cdc2:	84 0b       	sbc	r24, r20
    cdc4:	95 0b       	sbc	r25, r21
    cdc6:	39 f4       	brne	.+14     	; 0xcdd6 <__fp_cmp+0x38>
    cdc8:	0a 26       	eor	r0, r26
    cdca:	61 f0       	breq	.+24     	; 0xcde4 <__fp_cmp+0x46>
    cdcc:	23 2b       	or	r18, r19
    cdce:	24 2b       	or	r18, r20
    cdd0:	25 2b       	or	r18, r21
    cdd2:	21 f4       	brne	.+8      	; 0xcddc <__fp_cmp+0x3e>
    cdd4:	08 95       	ret
    cdd6:	0a 26       	eor	r0, r26
    cdd8:	09 f4       	brne	.+2      	; 0xcddc <__fp_cmp+0x3e>
    cdda:	a1 40       	sbci	r26, 0x01	; 1
    cddc:	a6 95       	lsr	r26
    cdde:	8f ef       	ldi	r24, 0xFF	; 255
    cde0:	81 1d       	adc	r24, r1
    cde2:	81 1d       	adc	r24, r1
    cde4:	08 95       	ret

0000cde6 <__fp_inf>:
    cde6:	97 f9       	bld	r25, 7
    cde8:	9f 67       	ori	r25, 0x7F	; 127
    cdea:	80 e8       	ldi	r24, 0x80	; 128
    cdec:	70 e0       	ldi	r23, 0x00	; 0
    cdee:	60 e0       	ldi	r22, 0x00	; 0
    cdf0:	08 95       	ret

0000cdf2 <__fp_nan>:
    cdf2:	9f ef       	ldi	r25, 0xFF	; 255
    cdf4:	80 ec       	ldi	r24, 0xC0	; 192
    cdf6:	08 95       	ret

0000cdf8 <__fp_pscA>:
    cdf8:	00 24       	eor	r0, r0
    cdfa:	0a 94       	dec	r0
    cdfc:	16 16       	cp	r1, r22
    cdfe:	17 06       	cpc	r1, r23
    ce00:	18 06       	cpc	r1, r24
    ce02:	09 06       	cpc	r0, r25
    ce04:	08 95       	ret

0000ce06 <__fp_pscB>:
    ce06:	00 24       	eor	r0, r0
    ce08:	0a 94       	dec	r0
    ce0a:	12 16       	cp	r1, r18
    ce0c:	13 06       	cpc	r1, r19
    ce0e:	14 06       	cpc	r1, r20
    ce10:	05 06       	cpc	r0, r21
    ce12:	08 95       	ret

0000ce14 <__fp_round>:
    ce14:	09 2e       	mov	r0, r25
    ce16:	03 94       	inc	r0
    ce18:	00 0c       	add	r0, r0
    ce1a:	11 f4       	brne	.+4      	; 0xce20 <__fp_round+0xc>
    ce1c:	88 23       	and	r24, r24
    ce1e:	52 f0       	brmi	.+20     	; 0xce34 <__fp_round+0x20>
    ce20:	bb 0f       	add	r27, r27
    ce22:	40 f4       	brcc	.+16     	; 0xce34 <__fp_round+0x20>
    ce24:	bf 2b       	or	r27, r31
    ce26:	11 f4       	brne	.+4      	; 0xce2c <__fp_round+0x18>
    ce28:	60 ff       	sbrs	r22, 0
    ce2a:	04 c0       	rjmp	.+8      	; 0xce34 <__fp_round+0x20>
    ce2c:	6f 5f       	subi	r22, 0xFF	; 255
    ce2e:	7f 4f       	sbci	r23, 0xFF	; 255
    ce30:	8f 4f       	sbci	r24, 0xFF	; 255
    ce32:	9f 4f       	sbci	r25, 0xFF	; 255
    ce34:	08 95       	ret

0000ce36 <__fp_split3>:
    ce36:	57 fd       	sbrc	r21, 7
    ce38:	90 58       	subi	r25, 0x80	; 128
    ce3a:	44 0f       	add	r20, r20
    ce3c:	55 1f       	adc	r21, r21
    ce3e:	59 f0       	breq	.+22     	; 0xce56 <__fp_splitA+0x10>
    ce40:	5f 3f       	cpi	r21, 0xFF	; 255
    ce42:	71 f0       	breq	.+28     	; 0xce60 <__fp_splitA+0x1a>
    ce44:	47 95       	ror	r20

0000ce46 <__fp_splitA>:
    ce46:	88 0f       	add	r24, r24
    ce48:	97 fb       	bst	r25, 7
    ce4a:	99 1f       	adc	r25, r25
    ce4c:	61 f0       	breq	.+24     	; 0xce66 <__fp_splitA+0x20>
    ce4e:	9f 3f       	cpi	r25, 0xFF	; 255
    ce50:	79 f0       	breq	.+30     	; 0xce70 <__fp_splitA+0x2a>
    ce52:	87 95       	ror	r24
    ce54:	08 95       	ret
    ce56:	12 16       	cp	r1, r18
    ce58:	13 06       	cpc	r1, r19
    ce5a:	14 06       	cpc	r1, r20
    ce5c:	55 1f       	adc	r21, r21
    ce5e:	f2 cf       	rjmp	.-28     	; 0xce44 <__fp_split3+0xe>
    ce60:	46 95       	lsr	r20
    ce62:	f1 df       	rcall	.-30     	; 0xce46 <__fp_splitA>
    ce64:	08 c0       	rjmp	.+16     	; 0xce76 <__fp_splitA+0x30>
    ce66:	16 16       	cp	r1, r22
    ce68:	17 06       	cpc	r1, r23
    ce6a:	18 06       	cpc	r1, r24
    ce6c:	99 1f       	adc	r25, r25
    ce6e:	f1 cf       	rjmp	.-30     	; 0xce52 <__fp_splitA+0xc>
    ce70:	86 95       	lsr	r24
    ce72:	71 05       	cpc	r23, r1
    ce74:	61 05       	cpc	r22, r1
    ce76:	08 94       	sec
    ce78:	08 95       	ret

0000ce7a <__fp_zero>:
    ce7a:	e8 94       	clt

0000ce7c <__fp_szero>:
    ce7c:	bb 27       	eor	r27, r27
    ce7e:	66 27       	eor	r22, r22
    ce80:	77 27       	eor	r23, r23
    ce82:	cb 01       	movw	r24, r22
    ce84:	97 f9       	bld	r25, 7
    ce86:	08 95       	ret

0000ce88 <__gesf2>:
    ce88:	8a df       	rcall	.-236    	; 0xcd9e <__fp_cmp>
    ce8a:	08 f4       	brcc	.+2      	; 0xce8e <__gesf2+0x6>
    ce8c:	8f ef       	ldi	r24, 0xFF	; 255
    ce8e:	08 95       	ret

0000ce90 <__mulsf3>:
    ce90:	0b d0       	rcall	.+22     	; 0xcea8 <__mulsf3x>
    ce92:	c0 cf       	rjmp	.-128    	; 0xce14 <__fp_round>
    ce94:	b1 df       	rcall	.-158    	; 0xcdf8 <__fp_pscA>
    ce96:	28 f0       	brcs	.+10     	; 0xcea2 <__mulsf3+0x12>
    ce98:	b6 df       	rcall	.-148    	; 0xce06 <__fp_pscB>
    ce9a:	18 f0       	brcs	.+6      	; 0xcea2 <__mulsf3+0x12>
    ce9c:	95 23       	and	r25, r21
    ce9e:	09 f0       	breq	.+2      	; 0xcea2 <__mulsf3+0x12>
    cea0:	a2 cf       	rjmp	.-188    	; 0xcde6 <__fp_inf>
    cea2:	a7 cf       	rjmp	.-178    	; 0xcdf2 <__fp_nan>
    cea4:	11 24       	eor	r1, r1
    cea6:	ea cf       	rjmp	.-44     	; 0xce7c <__fp_szero>

0000cea8 <__mulsf3x>:
    cea8:	c6 df       	rcall	.-116    	; 0xce36 <__fp_split3>
    ceaa:	a0 f3       	brcs	.-24     	; 0xce94 <__mulsf3+0x4>

0000ceac <__mulsf3_pse>:
    ceac:	95 9f       	mul	r25, r21
    ceae:	d1 f3       	breq	.-12     	; 0xcea4 <__mulsf3+0x14>
    ceb0:	95 0f       	add	r25, r21
    ceb2:	50 e0       	ldi	r21, 0x00	; 0
    ceb4:	55 1f       	adc	r21, r21
    ceb6:	62 9f       	mul	r22, r18
    ceb8:	f0 01       	movw	r30, r0
    ceba:	72 9f       	mul	r23, r18
    cebc:	bb 27       	eor	r27, r27
    cebe:	f0 0d       	add	r31, r0
    cec0:	b1 1d       	adc	r27, r1
    cec2:	63 9f       	mul	r22, r19
    cec4:	aa 27       	eor	r26, r26
    cec6:	f0 0d       	add	r31, r0
    cec8:	b1 1d       	adc	r27, r1
    ceca:	aa 1f       	adc	r26, r26
    cecc:	64 9f       	mul	r22, r20
    cece:	66 27       	eor	r22, r22
    ced0:	b0 0d       	add	r27, r0
    ced2:	a1 1d       	adc	r26, r1
    ced4:	66 1f       	adc	r22, r22
    ced6:	82 9f       	mul	r24, r18
    ced8:	22 27       	eor	r18, r18
    ceda:	b0 0d       	add	r27, r0
    cedc:	a1 1d       	adc	r26, r1
    cede:	62 1f       	adc	r22, r18
    cee0:	73 9f       	mul	r23, r19
    cee2:	b0 0d       	add	r27, r0
    cee4:	a1 1d       	adc	r26, r1
    cee6:	62 1f       	adc	r22, r18
    cee8:	83 9f       	mul	r24, r19
    ceea:	a0 0d       	add	r26, r0
    ceec:	61 1d       	adc	r22, r1
    ceee:	22 1f       	adc	r18, r18
    cef0:	74 9f       	mul	r23, r20
    cef2:	33 27       	eor	r19, r19
    cef4:	a0 0d       	add	r26, r0
    cef6:	61 1d       	adc	r22, r1
    cef8:	23 1f       	adc	r18, r19
    cefa:	84 9f       	mul	r24, r20
    cefc:	60 0d       	add	r22, r0
    cefe:	21 1d       	adc	r18, r1
    cf00:	82 2f       	mov	r24, r18
    cf02:	76 2f       	mov	r23, r22
    cf04:	6a 2f       	mov	r22, r26
    cf06:	11 24       	eor	r1, r1
    cf08:	9f 57       	subi	r25, 0x7F	; 127
    cf0a:	50 40       	sbci	r21, 0x00	; 0
    cf0c:	8a f0       	brmi	.+34     	; 0xcf30 <__mulsf3_pse+0x84>
    cf0e:	e1 f0       	breq	.+56     	; 0xcf48 <__mulsf3_pse+0x9c>
    cf10:	88 23       	and	r24, r24
    cf12:	4a f0       	brmi	.+18     	; 0xcf26 <__mulsf3_pse+0x7a>
    cf14:	ee 0f       	add	r30, r30
    cf16:	ff 1f       	adc	r31, r31
    cf18:	bb 1f       	adc	r27, r27
    cf1a:	66 1f       	adc	r22, r22
    cf1c:	77 1f       	adc	r23, r23
    cf1e:	88 1f       	adc	r24, r24
    cf20:	91 50       	subi	r25, 0x01	; 1
    cf22:	50 40       	sbci	r21, 0x00	; 0
    cf24:	a9 f7       	brne	.-22     	; 0xcf10 <__mulsf3_pse+0x64>
    cf26:	9e 3f       	cpi	r25, 0xFE	; 254
    cf28:	51 05       	cpc	r21, r1
    cf2a:	70 f0       	brcs	.+28     	; 0xcf48 <__mulsf3_pse+0x9c>
    cf2c:	5c cf       	rjmp	.-328    	; 0xcde6 <__fp_inf>
    cf2e:	a6 cf       	rjmp	.-180    	; 0xce7c <__fp_szero>
    cf30:	5f 3f       	cpi	r21, 0xFF	; 255
    cf32:	ec f3       	brlt	.-6      	; 0xcf2e <__mulsf3_pse+0x82>
    cf34:	98 3e       	cpi	r25, 0xE8	; 232
    cf36:	dc f3       	brlt	.-10     	; 0xcf2e <__mulsf3_pse+0x82>
    cf38:	86 95       	lsr	r24
    cf3a:	77 95       	ror	r23
    cf3c:	67 95       	ror	r22
    cf3e:	b7 95       	ror	r27
    cf40:	f7 95       	ror	r31
    cf42:	e7 95       	ror	r30
    cf44:	9f 5f       	subi	r25, 0xFF	; 255
    cf46:	c1 f7       	brne	.-16     	; 0xcf38 <__mulsf3_pse+0x8c>
    cf48:	fe 2b       	or	r31, r30
    cf4a:	88 0f       	add	r24, r24
    cf4c:	91 1d       	adc	r25, r1
    cf4e:	96 95       	lsr	r25
    cf50:	87 95       	ror	r24
    cf52:	97 f9       	bld	r25, 7
    cf54:	08 95       	ret

0000cf56 <memcpy_P>:
    cf56:	fb 01       	movw	r30, r22
    cf58:	dc 01       	movw	r26, r24
    cf5a:	02 c0       	rjmp	.+4      	; 0xcf60 <memcpy_P+0xa>
    cf5c:	05 90       	lpm	r0, Z+
    cf5e:	0d 92       	st	X+, r0
    cf60:	41 50       	subi	r20, 0x01	; 1
    cf62:	50 40       	sbci	r21, 0x00	; 0
    cf64:	d8 f7       	brcc	.-10     	; 0xcf5c <memcpy_P+0x6>
    cf66:	08 95       	ret

0000cf68 <_exit>:
    cf68:	f8 94       	cli

0000cf6a <__stop_program>:
    cf6a:	ff cf       	rjmp	.-2      	; 0xcf6a <__stop_program>
