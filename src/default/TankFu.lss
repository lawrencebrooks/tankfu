
TankFu.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000044  00800100  0000afde  0000b0de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000afde  00000000  00000000  00000100  2**8
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000cc7  00800144  00800144  0000b124  2**5
                  ALLOC
  3 .stab         00000618  00000000  00000000  0000b124  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002a5  00000000  00000000  0000b73c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  0000b9e1  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 00000558  00000000  00000000  0000b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00007947  00000000  00000000  0000bf50  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001519  00000000  00000000  00013897  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001b19  00000000  00000000  00014db0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000011a4  00000000  00000000  000168cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000183f  00000000  00000000  00017a70  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00006dd2  00000000  00000000  000192af  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000005f8  00000000  00000000  00020088  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 30 31 	jmp	0x6260	; 0x6260 <__ctors_end>
       4:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
       8:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
       c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      10:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      14:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      18:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      1c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      20:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      24:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      28:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      2c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      30:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      34:	0c 94 71 33 	jmp	0x66e2	; 0x66e2 <__vector_13>
      38:	0c 94 b1 33 	jmp	0x6762	; 0x6762 <__vector_14>
      3c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      40:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      44:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      48:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      4c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      50:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      54:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      58:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      5c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      60:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      64:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      68:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      6c:	0c 94 9b 31 	jmp	0x6336	; 0x6336 <__bad_interrupt>
      70:	62 4e       	sbci	r22, 0xE2	; 226
      72:	67 4e       	sbci	r22, 0xE7	; 231
      74:	6a 4e       	sbci	r22, 0xEA	; 234
      76:	6d 4e       	sbci	r22, 0xED	; 237
      78:	70 4e       	sbci	r23, 0xE0	; 224
      7a:	73 4e       	sbci	r23, 0xE3	; 227
      7c:	76 4e       	sbci	r23, 0xE6	; 230
      7e:	79 4e       	sbci	r23, 0xE9	; 233
      80:	7c 4e       	sbci	r23, 0xEC	; 236

00000082 <__trampolines_end>:
      82:	81 00       	.word	0x0081	; ????
      84:	45 00       	.word	0x0045	; ????
      86:	27 ff       	sbrs	r18, 7
      88:	24 ff       	sbrs	r18, 4
      8a:	2a 90       	ld	r2, -Y
      8c:	2b 1c       	adc	r2, r11
      8e:	21 0c       	add	r2, r1
      90:	22 fb       	bst	r18, 2
      92:	85 00       	.word	0x0085	; ????
      94:	84 00       	.word	0x0084	; ????
      96:	89 03       	fmulsu	r16, r17
      98:	88 8d       	ldd	r24, Y+24	; 0x18
      9a:	81 09       	sbc	r24, r1
      9c:	6f 02       	muls	r22, r31
      9e:	44 42       	sbci	r20, 0x24	; 36
      a0:	47 00       	.word	0x0047	; ????
      a2:	45 01       	movw	r8, r10
      a4:	b0 83       	st	Z, r27
      a6:	b3 00       	.word	0x00b3	; ????
      a8:	b1 01       	movw	r22, r2
      aa:	25 11       	cpse	r18, r5
      ac:	8a 4f       	sbci	r24, 0xFA	; 250
      ae:	8b 03       	fmulsu	r16, r19

000000b0 <eeprom_format_table>:
      b0:	5a 55 01 20 01 01 00 38 08 00 00 00 00 00 00 00     ZU. ...8........
	...

000000d0 <patchCommands>:
      d0:	bb 36 be 36 19 37 1d 37 25 37 c6 36 cb 36 d0 36     .6.6.7.7%7.6.6.6
      e0:	2d 37 d3 36 d6 36 d9 36 16 37                       -7.6.6.6.7

000000ea <fader>:
      ea:	00 40 88 91 d2 e4 ad b5 b6 be bf ff                 .@..........

000000f6 <strLevels>:
      f6:	20 20 4c 65 76 65 6c 20 4f 6e 65 00 20 20 4c 65       Level One.  Le
     106:	76 65 6c 20 54 77 6f 00 4c 65 76 65 6c 20 54 68     vel Two.Level Th
     116:	72 65 65 00 20 4c 65 76 65 6c 20 46 6f 75 72 00     ree. Level Four.
     126:	20 4c 65 76 65 6c 20 46 69 76 65 00 20 20 4c 65      Level Five.  Le
     136:	76 65 6c 20 53 69 78 00 4c 65 76 65 6c 20 53 65     vel Six.Level Se
     146:	76 65 6e 00 4c 65 76 65 6c 20 45 69 67 68 74 00     ven.Level Eight.
     156:	20 4c 65 76 65 6c 20 4e 69 6e 65 00 20 20 4c 65      Level Nine.  Le
     166:	76 65 6c 20 54 65 6e 00                             vel Ten.

0000016e <strPaused>:
     16e:	50 61 75 73 65 64 00                                Paused.

00000175 <strExit>:
     175:	42 61 69 6c 20 2d 20 58 00                          Bail - X.

0000017e <strTotal>:
     17e:	54 6f 74 61 6c 3a 00                                Total:.

00000185 <strScore>:
     185:	53 63 6f 72 65 3a 00                                Score:.

0000018c <strBanterClear>:
     18c:	20 20 20 20 20 20 20 20 20 20 20 20 20 20 00                      .

0000019b <banter_map>:
     19b:	59 6f 75 20 73 75 63 6b 20 62 72 6f 20 20 00 4c     You suck bro  .L
     1ab:	4f 4c 20 20 20 20 20 20 20 20 20 20 20 00 42 72     OL           .Br
     1bb:	6f 6b 65 6e 20 62 75 74 74 6f 6e 3f 00 54 72 79     oken button?.Try
     1cb:	20 61 74 20 6c 65 61 73 74 20 20 00 54 6f 6f 20      at least  .Too 
     1db:	65 61 73 79 20 20 20 20 20 20 00 2a 59 41 57 4e     easy      .*YAWN
     1eb:	2a 20 20 20 20 20 20 20 20 00 41 20 74 75 72 6b     *        .A turk
     1fb:	65 79 20 73 68 6f 6f 74 00 54 68 61 74 27 73 20     ey shoot.That's 
     20b:	69 74 3f 20 20 20 20 00 4e 65 65 64 20 68 65 6c     it?    .Need hel
     21b:	70 3f 20 20 20 20 00 52 54 46 4d 21 20 20 20 20     p?    .RTFM!    
     22b:	20 20 20 20 20 00                                        .

00000231 <strBy>:
     231:	42 79 00                                            By.

00000234 <strOwns>:
     234:	50 77 6e 73 00                                      Pwns.

00000239 <strChangeHandle>:
     239:	45 64 69 74 20 2d 20 55 50 2f 44 4f 57 4e 00        Edit - UP/DOWN.

00000248 <strCancelHandle>:
     248:	43 61 6e 63 65 6c 20 2d 20 58 00                    Cancel - X.

00000253 <strConfirmHandle>:
     253:	43 6f 6e 66 69 72 6d 20 2d 20 41 00                 Confirm - A.

0000025f <strSelectHandle>:
     25f:	53 65 6c 65 63 74 20 2d 20 41 00                    Select - A.

0000026a <strPlayer2>:
     26a:	50 32 00                                            P2.

0000026d <strPlayer1>:
     26d:	50 31 00                                            P1.

00000270 <strVertSep>:
     270:	7c 00                                               |.

00000272 <strUnderline>:
     272:	5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 5f 00                 ___________.

0000027e <strHandlesTitle>:
     27e:	45 64 69 74 20 48 61 6e 64 6c 65 00                 Edit Handle.

0000028a <strHighscores>:
     28a:	54 61 6e 6b 20 52 61 6e 6b 00                       Tank Rank.

00000294 <str2Player>:
     294:	50 6c 61 79 65 72 20 76 73 20 50 6c 61 79 65 72     Player vs Player
	...

000002a5 <str1Player>:
     2a5:	50 6c 61 79 65 72 20 76 73 20 43 50 55 00           Player vs CPU.

000002b3 <strCopyright>:
     2b3:	32 30 31 34 20 2d 20 4c 61 77 72 65 6e 63 65 20     2014 - Lawrence 
     2c3:	42 72 6f 6f 6b 73 00                                Brooks.

000002ca <level_data>:
     2ca:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     2da:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     2ea:	02 02 02 03 00 00 00 00 00 00 00 00 00 00 00 00     ................
     2fa:	00 00 00 00 00 00 04 02 02 02 02 02 02 02 02 02     ................
     30a:	03 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     31a:	00 00 00 00 00 04 02 02 02 02 02 02 02 03 00 00     ................
	...
     33e:	04 02 02 02 02 02 03 00 00 00 00 00 00 00 00 00     ................
	...
     35a:	00 00 00 04 02 02 02 03 00 00 00 00 00 00 00 00     ................
	...
     37a:	00 00 04 02 02 00 00 00 00 00 01 01 00 00 00 00     ................
	...
     392:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     3a2:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     3b2:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     3ce:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     3de:	01 01 00 00 00 00 00 00 08 00 00 00 00 00 00 00     ................
     3ee:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     40a:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     41a:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     42a:	01 01 00 00 00 00 00 02 02 00 00 58 00 00 01 01     ...........X....
	...
     446:	00 00 01 01 00 63 00 00 00 02 02 00 00 00 00 00     .....c..........
     456:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     466:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     482:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     492:	01 01 00 00 00 00 00 00 00 07 00 00 00 00 00 00     ................
     4a2:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
	...
     4be:	00 00 01 01 00 00 00 00 00 02 02 00 00 00 00 00     ................
     4ce:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     4de:	01 01 00 00 00 00 00 02 02 00 00 00 00 00 01 01     ................
     4ee:	00 00 00 00 00 09 00 00 00 00 00 00 00 00 01 01     ................
     4fe:	00 00 00 00 00 02 02 05 00 00 00 00 00 00 00 00     ................
	...
     51e:	00 00 06 02 02 02 05 00 00 00 00 00 00 00 00 00     ................
	...
     53a:	00 00 00 06 02 02 02 02 02 05 00 00 00 00 00 00     ................
	...
     55a:	06 02 02 02 02 02 02 02 05 00 00 00 00 00 00 00     ................
	...
     576:	00 06 02 02 02 02 02 02 02 02 02 05 00 00 00 00     ................
	...
     592:	00 00 06 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     5a2:	02 02 02 02 02 02 02 02 02 02 02 02 02 02 02 02     ................
     5b2:	02 02 02 02 02 02 00 00 00 00 00 00 00 00 00 00     ................
	...
     722:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     732:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
     a0e:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
     a26:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
     cfe:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
     d0e:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
     fea:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1002:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    12da:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    12ea:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    15c6:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    15de:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    18b6:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    18c6:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...
    1ba2:	00 00 00 58 00 00 00 00 00 00 00 00 00 00 00 00     ...X............
	...
    1bba:	00 63 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .c..............
	...
    1e92:	00 58 00 00 00 00 00 00 00 00 00 00 00 00 00 00     .X..............
    1ea2:	00 00 00 00 00 00 00 63 00 00 00 00 00 00 00 00     .......c........
	...

00002016 <my_patches>:
    2016:	02 1f 20 00 00 6a 11 6a 11                          .. ..j.j.

0000201f <ad_navigate>:
    201f:	ff 00 00 ff ff ff ff 00 ff 00 ff ff ff ff ff ff     ................
    202f:	00 00 00 00 00 ff 00 00 00 00 ff 00 ff 00 ff ff     ................
    203f:	ff 00 00 00 00 00 00 ff 00 00 00 00 00 00 ff 00     ................
    204f:	ff ff ff ff ff ff ff ff 00 ff ff ff 00 ff 00 00     ................
	...
    206b:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    207b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff ff     ................
    208b:	ff 00 ff ff ff ff 00 ff ff ff ff 00 00 01 03 ff     ................
    209b:	fe fd fc fe ff fe 02 01 00 01 00 01 00 fe fe ff     ................
    20ab:	ff ff 01 00 01 03 00 fe fd fc fe fe fe ff 00 ff     ................
    20bb:	ff 01 03 05 05 03 02 00 fe fc fa fc fc fc fc fe     ................
    20cb:	01 02 01 02 04 03 01 00 00 01 00 fd fc ff ff fd     ................
    20db:	fe ff 00 01 ff ff 01 01 ff ff 00 00 01 00 00 01     ................
    20eb:	01 ff ff fe fd fe ff fc fe ff 00 00 01 01 02 03     ................
    20fb:	00 00 01 01 fe ff fd fd ff fd fe 01 00 ff 00 00     ................
    210b:	01 01 02 02 03 01 01 00 fe fd fc fc fa fa fd fe     ................
    211b:	ff 00 02 04 04 03 03 03 02 ff fd fd fd fb fa fd     ................
    212b:	00 ff fe 01 03 04 02 00 02 02 ff fd fe ff fe fe     ................
    213b:	fe ff 01 00 00 01 01 00 00 00 ff 00 ff ff ff ff     ................
    214b:	fe ff 00 ff 00 00 ff ff 00 00 00 00 ff 00 00 ff     ................
    215b:	ff 00 00 ff ff 00 00 00 00 ff 00 01 ff fe ff ff     ................
    216b:	00 ff ff ff 00 ff ff 00 00 00 00 00 01 00 ff ff     ................
    217b:	ff ff ff fe ff 00 ff 00 01 01 00 00 00 00 00 ff     ................
    218b:	ff ff fe fe fe ff ff ff 00 01 00 01 00 00 00 ff     ................
    219b:	ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00 01     ................
    21ab:	01 00 00 00 01 00 ff ff ff ff fe fe fe ff ff ff     ................
    21bb:	00 01 00 00 00 00 00 ff ff ff ff fe fe ff ff fe     ................
    21cb:	ff 00 00 00 01 01 01 01 00 00 00 ff fe ff ff ff     ................
    21db:	ff ff 00 ff ff ff 00 ff ff ff 00 00 00 ff 00 00     ................
    21eb:	00 00 01 02 01 01 01 02 01 00 fe fe ff fe fc fc     ................
    21fb:	fd fe fe fe ff 00 00 ff 00 00 ff fd fd fe fe fe     ................
    220b:	fd fe fe fe fe ff ff ff 00 00 01 02 04 05 06 06     ................
    221b:	05 04 03 02 01 01 00 ff ff ff ff ff ff 00 00 ff     ................
    222b:	fe fe fe fd fc fc fd fd fc fd fd fd fe fe fd fe     ................
    223b:	fe fe fe fe fd fd fd fd fe ff 00 01 02 03 04 04     ................
    224b:	03 02 04 05 04 03 03 03 04 04 04 04 04 04 05 04     ................
    225b:	01 00 01 02 ff fd fc fd fb f7 f7 f8 f7 f6 f8 fb     ................
    226b:	fc fc fd fe ff fe fd fe fe fe fe fe ff ff fe fe     ................
    227b:	00 01 01 01 02 03 03 02 01 02 03 03 04 06 05 03     ................
    228b:	06 0c 0f 0a 08 0e 11 0a 00 fe ff fa ef ea ef f0     ................
    229b:	ee ef f6 fd ff 00 02 07 08 03 ff fe fd f9 f6 f6     ................
    22ab:	f8 f8 f7 fa 00 01 00 01 04 05 04 01 01 02 00 ff     ................
    22bb:	00 00 01 04 05 04 07 0a 0b 0d 13 17 16 10 0b 08     ................
    22cb:	02 f7 ee ea e8 e6 e6 eb f4 fc 01 06 0b 10 0f 07     ................
    22db:	ff fc fa f2 ec ee f3 f5 f6 fc 01 03 02 04 06 05     ................
    22eb:	01 fe fe fd fb f8 fa fd fe ff 03 07 09 0a 0a 0a     ................
    22fb:	0d 0f 0d 06 07 15 1a 0f 05 08 0c 03 f1 e8 ee ed     ................
    230b:	e4 e4 ee f8 fb 00 07 0d 0c 04 01 00 fb f5 f2 f6     ................
    231b:	f9 f7 f6 fd 03 fe fa fe 02 00 fb fb fe 00 fc fa     ................
    232b:	00 03 02 03 07 09 08 06 08 08 05 05 08 09 08 05     ................
    233b:	09 15 18 10 09 0d 0c fe ee e9 ec e8 e0 e3 ef f7     ................
    234b:	fb 04 0c 0f 0b 07 05 01 f9 f4 f3 f2 f2 f3 f4 f7     ................
    235b:	fa fa fc 01 03 01 03 07 05 02 01 00 00 fe fd ff     ................
    236b:	03 04 04 08 0c 0b 07 07 0a 09 06 08 0a 09 0c 10     ................
    237b:	0f 0e 0b 05 00 f9 ef ea e8 e5 e4 e9 f0 f7 01 06     ................
    238b:	09 0a 0b 08 01 fa f9 f8 f3 f1 f3 f3 f2 f5 f9 fc     ................
    239b:	fe 00 05 0a 09 06 07 07 02 fe fc fd ff 00 02 06     ................
    23ab:	0c 0d 0c 0a 0d 0f 07 fe 01 05 04 ff 01 0a 0f 0c     ................
    23bb:	08 0b 0a 01 f6 f1 ee e8 e2 e2 ea f2 f7 ff 06 0b     ................
    23cb:	0c 09 06 02 fb f4 f1 f0 ee ef f2 f7 fb 00 03 07     ................
    23db:	0b 0b 09 08 07 04 ff fc fc fd fd 01 08 0b 0c 0e     ................
    23eb:	10 0e 09 05 05 02 fa f5 f7 fe 02 01 03 0e 18 15     ................
    23fb:	10 10 0c 02 f5 eb e5 e2 de df e7 f0 f7 01 08 0b     ................
    240b:	0c 0a 05 ff f8 f3 f1 f1 f2 f4 f7 fc 02 03 03 07     ................
    241b:	0a 09 07 08 08 06 03 01 02 02 ff 00 03 05 05 05     ................
    242b:	07 0a 09 04 03 04 01 fa f8 f9 fc 01 07 08 0c 14     ................
    243b:	19 13 09 03 02 fc ed e1 e2 e5 e2 e1 ea f5 fb fe     ................
    244b:	01 06 0a 06 02 02 03 00 fb fb fd fc f7 f7 fd ff     ................
    245b:	fe 01 07 0c 0d 0b 08 09 09 02 fc fd 00 ff fe 01     ................
    246b:	07 0b 0b 08 08 09 05 fe f9 f7 f7 f6 f6 fc 04 0a     ................
    247b:	09 0c 12 17 12 07 fe fd f9 ec e2 e1 e4 e4 e3 e9     ................
    248b:	f4 fe 02 06 0e 12 0f 0a 08 05 ff f8 f5 f5 f3 f2     ................
    249b:	f7 fe 01 04 09 0e 10 0e 0c 0a 09 04 ff fe 00 ff     ................
    24ab:	fe 00 03 03 02 04 05 03 fe fd ff ff fa f6 fa fe     ................
    24bb:	fc fa fc 00 04 05 06 08 0a 0b 0b 08 03 fd f9 f5     ................
    24cb:	f0 eb ea ec ef f0 f3 f8 fe 02 04 06 09 0b 09 07     ................
    24db:	06 05 03 00 00 01 00 00 01 03 03 02 01 02 02 00     ................
    24eb:	fe ff ff fe fe ff 01 02 00 00 01 02 02 02 02 03     ................
    24fb:	03 02 00 ff fb fa fa f9 f8 fa fd ff 01 01 02 03     ................
    250b:	00 fe ff ff fe fc fb fd 00 01 00 02 05 05 03 02     ................
    251b:	02 02 01 ff ff 01 01 ff fe fe ff fe fc fc fe fe     ................
    252b:	fd fd ff ff ff fd fe ff 00 fe fe 00 02 00 01 02     ................
    253b:	04 02 00 ff 01 ff fc fc ff 00 ff fe 00 00 00 00     ................
    254b:	00 01 02 01 02 02 01 01 01 ff ff fe fc fc fd fc     ................
    255b:	fd fe ff 00 01 01 02 03 03 02 03 03 03 03 03 03     ................
    256b:	03 01 01 00 ff fd fb f9 f8 f7 f7 f7 f8 f8 fa fe     ................
    257b:	00 00 03 05 05 05 05 04 02 00 ff 00 ff fd fd fe     ................
    258b:	ff 00 00 01 03 03 01 01 01 00 ff fd fe ff ff ff     ................
    259b:	ff 01 02 01 00 00 00 00 fe fd fe fe fe ff ff 00     ................
    25ab:	02 02 02 02 02 01 00 fe fe fd fb fa fb fc fc fc     ................
    25bb:	fd ff 01 01 01 02 03 03 02 01 02 02 01 ff 00 01     ................
    25cb:	01 00 00 01 01 00 ff 00 00 fe fd fd fd fe fe fd     ................
    25db:	fe 00 00 00 01 02 02 01 00 00 00 ff fe fe fe fd     ................
    25eb:	ff ff ff 00 02 01 00 ff ff ff fe fd fd fe fe fe     ................
    25fb:	fe 00 01 02 02 02 02 01 00 00 00 ff ff 01 01 01     ................
    260b:	01 02 02 02 01 01 00 00 fe ff ff fe fd fd fd fd     ................
    261b:	fc fd fe ff fe ff 00 01 ff 00 ff 00 ff fe fe ff     ................
    262b:	00 ff 00 01 01 00 ff ff ff fe fd ff 00 00 00 00     ................
    263b:	01 02 01 00 01 02 01 00 00 01 00 00 00 00 00 ff     ................
    264b:	fe ff fe fe ff 00 01 02 03 03 03 01 00 ff fe fd     ................
    265b:	fc fc fc fd fd fd fe fd fd fe ff fe fe ff 00 00     ................
    266b:	00 00 01 01 00 00 02 02 00 00 00 01 00 ff ff ff     ................
    267b:	fe fd fe ff ff ff 00 02 03 03 02 03 03 02 00 ff     ................
    268b:	ff ff fe fd fe fe ff ff 00 00 01 01 00 00 00 00     ................
    269b:	ff ff ff ff fe fd fe ff fe fe 00 ff ff ff ff ff     ................
    26ab:	ff fe ff 00 ff 00 00 00 00 00 00 01 01 01 01 01     ................
    26bb:	00 00 00 ff 00 00 ff ff 00 00 00 00 00 00 ff ff     ................
    26cb:	fe ff fe fe fe fe ff ff ff 00 01 00 00 ff ff ff     ................
    26db:	ff ff ff 00 00 ff 00 01 00 00 ff ff ff fe fe ff     ................
    26eb:	fe fe ff ff ff 00 00 00 01 01 01 02 03 02 02 01     ................
    26fb:	00 00 ff fe fe fe fe fe ff 00 00 00 ff ff ff fe     ................
    270b:	fe fe ff fe ff ff 00 01 00 00 01 00 00 ff ff ff     ................
    271b:	fe fe fe ff ff ff 00 00 ff ff 00 00 ff ff 00 00     ................
    272b:	00 00 01 01 00 00 00 01 01 00 00 00 01 00 ff 00     ................
    273b:	00 00 ff ff 00 00 ff ff 00 ff fe fe fe fe fd fd     ................
    274b:	fd fe fe ff ff ff 00 00 ff ff ff 00 00 ff 00 00     ................
    275b:	01 00 01 01 01 00 00 00 00 ff fe ff ff ff 00 00     ................
    276b:	00 01 01 01 00 00 ff 00 ff ff fe 00 00 00 00 00     ................
    277b:	01 01 00 00 00 00 ff ff ff ff ff fe fe fe fe fe     ................
    278b:	fd fe fe fe fd fe fe fe fe fe ff ff 00 00 01 01     ................
    279b:	01 01 01 02 02 01 01 01 01 01 00 00 00 00 ff fe     ................
    27ab:	ff ff fe fe fe ff ff ff ff 00 00 01 01 01 01 01     ................
    27bb:	01 00 00 00 00 ff ff fe fe fd fe fd fd fe ff ff     ................
    27cb:	ff ff 00 00 00 00 00 00 00 ff ff ff 00 ff ff 00     ................
    27db:	00 00 00 01 01 01 01 00 00 00 00 ff ff ff ff ff     ................
    27eb:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 ff     ................
    27fb:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff fe     ................
    280b:	fe fe fe fe ff ff 00 00 00 01 01 01 01 00 00 00     ................
    281b:	00 00 00 00 00 ff ff 00 00 ff ff ff 00 ff ff ff     ................
    282b:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 ff ff     ................
    283b:	ff 00 00 ff ff 00 00 ff ff ff 00 00 ff ff 00 01     ................
    284b:	00 00 00 00 00 00 ff 00 00 00 ff ff 00 00 ff ff     ................
    285b:	00 00 00 ff 00 00 00 00 ff ff ff ff fe fe ff ff     ................
    286b:	ff ff 00 00 00 00 00 00 ff ff ff ff ff ff ff ff     ................
    287b:	ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
    288b:	00 00 00 01 01 01 01 01 01 00 ff ff ff fe fd fe     ................
    289b:	fe ff fe ff 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    28ab:	ff ff 00 00 ff 00 00 00 ff ff ff ff fe fe ff ff     ................
    28bb:	ff ff 00 00 00 01 01 01 01 01 00 00 00 ff fe fe     ................
    28cb:	ff ff ff ff 00 00 00 00 00 00 00 ff ff ff ff ff     ................
    28db:	ff ff ff 00 00 00 00 00 01 00 00 ff ff ff ff ff     ................
    28eb:	ff ff 00 00 00 00 00 00 ff 00 00 ff ff ff ff ff     ................
    28fb:	ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    290b:	00 00 00 ff ff 00 ff ff ff ff 00 00 fe ff ff fe     ................
    291b:	fe fc fe ff 00 00 01 02 01 00 03 03 03 01 00 00     ................
    292b:	00 ff ff ff ff 00 00 00 fe fc fc fc fc fd ff 00     ................
    293b:	02 03 04 04 04 02 02 00 00 fe fd fd fd fe fd fd     ................
    294b:	fe ff ff ff 00 01 00 00 00 00 01 00 00 00 ff ff     ................
    295b:	ff 00 ff 00 ff 00 ff fe ff ff ff 00 ff 00 00 00     ................
    296b:	01 00 01 00 00 00 ff ff ff fe ff ff fe ff ff ff     ................
    297b:	00 01 02 03 03 01 00 ff fe fd fc fc fc fd fe ff     ................
    298b:	00 02 02 01 02 02 00 00 00 ff fe fe fe fe ff 00     ................
    299b:	00 00 02 01 02 03 00 ff 02 ff fd fd fd fc fd fd     ................
    29ab:	fd 00 01 00 02 03 02 02 02 ff ff 00 fe fd ff ff     ................
    29bb:	fe ff ff ff 00 00 ff 00 00 ff ff 00 ff 00 00 ff     ................
    29cb:	ff 01 00 ff 00 01 00 00 00 ff 00 00 ff ff 00 00     ................
    29db:	ff ff ff 00 00 00 00 01 01 00 ff ff ff fe fe fd     ................
    29eb:	fe ff fe ff 00 00 00 00 00 00 00 ff ff 00 00 ff     ................
    29fb:	ff 00 01 01 01 00 00 ff ff ff ff 00 00 00 00 00     ................
	...
    2a13:	ff ff ff ff ff ff ff ff ff ff 00 ff ff ff ff ff     ................
    2a23:	ff fe fe fe fe ff ff ff ff 00 00 00 00 00 00 ff     ................
    2a33:	ff 00 00 00 00 00 00 01 00 00 01 00 ff 00 00 00     ................
    2a43:	00 01 01 01 02 02 02 04 03 03 03 01 ff fe fc fa     ................
    2a53:	fa fa f9 fb fc fd fe ff 00 01 01 00 00 00 00 ff     ................
    2a63:	fe fe fd fd fc fc fd fd fe ff 00 00 01 02 02 01     ................
    2a73:	02 02 02 01 00 01 01 01 00 00 01 01 01 00 00 01     ................
    2a83:	02 02 02 03 05 04 03 03 02 02 05 04 02 00 00 ff     ................
    2a93:	fc f9 f5 f6 f5 f3 f4 f8 f9 fa fd 00 01 03 03 03     ................
    2aa3:	04 02 ff ff fe fc fb fb fc fd fd fe 01 03 03 03     ................
    2ab3:	04 04 03 03 02 02 03 02 01 03 02 01 02 03 02 01     ................
    2ac3:	00 ff ff fe fe ff 02 04 03 04 04 05 07 07 04 02     ................
    2ad3:	02 00 fd f9 f5 f4 f3 f2 f0 f2 f6 f7 fa fe 01 04     ................
    2ae3:	06 07 07 07 04 01 00 fe fb f9 fa fb fb fc fe 01     ................
    2af3:	01 02 04 04 05 04 03 02 02 02 00 00 00 01 01 02     ................
    2b03:	02 02 02 02 02 00 ff ff fe fe fe fc fe 00 01 02     ................
    2b13:	03 04 06 07 07 07 04 02 00 fe fa f7 f5 f3 f3 f2     ................
    2b23:	f3 f5 f9 fa fd 01 03 05 06 06 05 05 03 00 fe fd     ................
    2b33:	fb fb fc fc fe ff 00 02 03 03 04 04 03 02 03 01     ................
    2b43:	00 00 ff ff ff ff 00 01 01 01 01 01 01 00 ff 00     ................
    2b53:	ff fe fe fe fe ff ff ff 00 02 03 02 01 02 02 01     ................
    2b63:	00 ff 00 00 fe fe ff fe fc fd fe fd fc fc fd fd     ................
    2b73:	fc fe fe ff ff ff 00 00 ff fe ff ff fe fe fe fe     ................
    2b83:	ff ff ff 00 01 02 03 03 03 03 03 02 02 01 00 ff     ................
    2b93:	ff fe fd fd fe fe fe ff 00 01 01 01 01 01 01 00     ................
    2ba3:	ff ff ff fd fd fe ff ff 00 01 01 02 03 04 04 04     ................
    2bb3:	04 05 04 03 02 02 01 00 fe fe fc fb fa f9 f8 f9     ................
    2bc3:	f8 f8 f8 f9 fa fb fc fd ff 00 01 03 04 04 04 04     ................
    2bd3:	04 03 02 02 01 01 00 ff ff ff fe fe fe ff 00 ff     ................
    2be3:	ff 00 01 00 00 00 00 01 01 00 01 01 01 01 01 00     ................
    2bf3:	00 ff ff fe fe fe fe fe ff 00 01 02 04 04 04 05     ................
    2c03:	05 04 03 02 00 ff fe fc fb fb fa f9 fa fa fa fa     ................
    2c13:	fb fc fc fc fd fe fe fe ff 00 00 00 01 02 02 01     ................
    2c23:	02 03 02 01 02 03 02 01 01 01 01 00 00 00 00 00     ................
    2c33:	00 00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00     ................
    2c43:	00 ff ff ff ff ff ff ff ff 00 00 01 01 02 02 02     ................
    2c53:	02 02 01 01 00 00 00 ff ff fe fd fd fd fc fc fc     ................
    2c63:	fc fb fb fb fb fb fc fc fc fd fe fe ff 00 01 02     ................
    2c73:	03 03 04 04 04 04 03 03 02 02 01 01 00 00 ff ff     ................
    2c83:	ff ff ff ff ff ff ff ff ff ff ff 00 00 ff 00 00     ................
    2c93:	00 00 00 00 ff ff ff ff ff ff ff 00 01 01 02 03     ................
    2ca3:	04 04 04 04 03 02 01 00 ff fe fd fc fb fa fa fa     ................
    2cb3:	fa fa fa fa fb fb fc fc fd fe fe ff 00 01 01 02     ................
    2cc3:	02 03 03 02 02 02 02 01 01 01 00 00 00 00 00 00     ................
    2cd3:	00 00 01 01 00 01 01 00 00 00 00 00 00 00 00 ff     ................
    2ce3:	ff ff ff ff ff ff ff ff 00 00 00 00 00 01 01 01     ................
    2cf3:	01 02 01 01 01 01 00 00 ff ff fe fd fd fd fc fc     ................
    2d03:	fc fc fc fc fc fc fc fc fc fd fd fe fe ff ff 00     ................
    2d13:	00 00 01 02 02 02 02 03 03 02 03 03 02 02 02 01     ................
    2d23:	01 01 00 00 00 ff ff ff ff ff 00 00 00 00 00 00     ................
    2d33:	00 00 00 00 ff ff ff ff ff fe fe fe ff ff ff ff     ................
    2d43:	ff 00 00 01 01 02 02 02 02 02 01 00 00 ff fe fe     ................
    2d53:	fd fd fc fc fc fc fc fd fd fd fe fe fe fe fe fe     ................
    2d63:	ff ff ff 00 00 00 01 01 01 01 01 02 01 01 01 01     ................
    2d73:	01 00 00 00 00 00 00 00 00 01 01 01 01 01 00 00     ................
    2d83:	00 00 00 ff ff ff ff ff ff ff ff ff ff 00 ff 00     ................
    2d93:	00 ff ff ff ff ff ff ff 00 00 00 00 01 01 01 01     ................
    2da3:	00 00 00 00 ff ff fe fe fe fd fd fd fd fd fc fd     ................
    2db3:	fd fd fd fd fe fe fe ff ff 00 00 01 02 02 02 02     ................
    2dc3:	03 03 02 02 02 02 02 01 01 01 01 01 01 00 00 00     ................
    2dd3:	00 ff ff ff ff ff fe fe fe fe fe ff ff ff ff ff     ................
    2de3:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00     ................
    2df3:	01 02 02 02 02 02 02 01 00 00 ff fe fd fd fd fd     ................
    2e03:	fd fd fd fd fe fe fe fe ff ff ff ff ff ff ff ff     ................
    2e13:	00 00 00 01 01 02 02 02 02 02 02 02 01 01 01 01     ................
    2e23:	00 00 ff ff ff fe fe fe fe fe fe fe ff ff ff 00     ................
	...
    2e3f:	00 00 ff ff ff ff ff 00 00 00 01 01 01 01 01 01     ................
    2e4f:	01 01 01 00 00 ff ff fe fe fd fd fd fc fc fc fc     ................
    2e5f:	fc fc fc fd fd fe fe ff 00 00 01 02 02 02 02 02     ................
    2e6f:	02 02 02 02 01 01 01 00 00 00 ff ff ff ff ff fe     ................
    2e7f:	fe fe ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
    2e8f:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff 00 00     ................
    2e9f:	01 01 01 01 01 01 01 00 00 ff ff fe fe fd fd fd     ................
    2eaf:	fd fd fd fd fd fd fd fe fe fe fe ff ff 00 00 01     ................
    2ebf:	01 02 02 02 02 02 02 01 01 01 00 00 ff ff ff fe     ................
    2ecf:	fe fe fe fe fe ff ff ff ff ff 00 00 00 00 00 00     ................
    2edf:	01 01 01 01 01 01 01 01 00 00 00 ff ff ff ff ff     ................
    2eef:	fe fe ff ff ff 00 00 00 01 01 01 02 01 01 01 00     ................
    2eff:	00 ff fe fe fd fd fc fc fc fc fd fd fd fe fe fe     ................
    2f0f:	ff ff 00 00 00 00 00 01 01 00 00 00 00 00 00 00     ................
	...
    2f2b:	00 01 01 01 01 01 01 00 00 00 00 00 00 00 00 00     ................
    2f3b:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f4b:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff ff     ................
    2f5b:	ff ff fe fe fe fe fe fe fe fe fe fe fe ff ff ff     ................
    2f6b:	00 00 00 00 01 01 01 01 01 01 01 01 01 01 01 00     ................
	...
    2f8b:	00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2f9b:	ff 00 00 00 00 00 00 00 00 00 ff ff ff ff ff ff     ................
    2fab:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2fbb:	00 00 ff ff ff ff ff ff ff ff 00 00 00 00 00 00     ................
	...
    2fe3:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    2ff3:	ff ff ff ff ff ff 00 00 00 ff ff ff ff ff ff ff     ................
    3003:	ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00 00     ................
	...
    3023:	ff ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00     ................
    3033:	00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff 00     ................
    3043:	00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff ff     ................
    3053:	00 00 00 00 00 00 00 ff 00 ff ff ff ff ff ff 00     ................
	...
    3073:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    3083:	ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    3093:	00 ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00     ................
    30a3:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
	...
    30c3:	00 00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30d3:	ff ff ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
    30e3:	00 00 ff ff ff ff ff ff ff ff ff ff ff ff ff ff     ................
    30f3:	ff 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    310b:	00 00 ff ff ff 00 00 00 ff 00 00 ff ff ff ff ff     ................
    311b:	ff ff ff ff ff ff ff ff ff ff ff ff ff 00 00 00     ................
    312b:	00 00 01 00 ff ff ff ff ff ff ff ff ff ff 00 00     ................
    313b:	00 00 00 00 ff ff ff ff ff 00 ff ff 00 00 00 00     ................
    314b:	00 00 ff 00 00 00 00 ff ff ff 00 ff ff ff 00 00     ................
    315b:	00 00 00 00 00 00 ff ff ff ff ff ff ff ff ff ff     ................
    316b:	ff ff 00 00 ff 00 00 00 00 00 00 00 00 00 00 ff     ................
    317b:	ff ff 00 ff ff ff ff ff ff ff ff ff ff ff 00        ...............

0000318a <map_rocket_right_1>:
    318a:	01 01 26                                            ..&

0000318d <map_rocket_right_0>:
    318d:	01 01 25                                            ..%

00003190 <map_rocket_up_1>:
    3190:	01 01 24                                            ..$

00003193 <map_rocket_up_0>:
    3193:	01 01 23                                            ..#

00003196 <map_ball>:
    3196:	01 01 22                                            .."

00003199 <map_explosion_2>:
    3199:	02 02 0c 0d 0d 0c                                   ......

0000319f <map_explosion_1>:
    319f:	02 02 0a 0b 18 19                                   ......

000031a5 <map_explosion_0>:
    31a5:	02 02 08 09 16 17                                   ......

000031ab <map_tank2_right_1>:
    31ab:	02 02 20 21 2e 2f                                   .. !./

000031b1 <map_tank2_right_0>:
    31b1:	02 02 1e 1f 2c 2d                                   ....,-

000031b7 <map_tank2_up_1>:
    31b7:	02 02 1c 1d 2a 2b                                   ....*+

000031bd <map_tank2_up_0>:
    31bd:	02 02 1a 1b 28 29                                   ....()

000031c3 <map_tank1_right_1>:
    31c3:	02 02 06 07 14 15                                   ......

000031c9 <map_tank1_right_0>:
    31c9:	02 02 04 05 12 13                                   ......

000031cf <map_tank1_up_1>:
    31cf:	02 02 02 03 10 11                                   ......

000031d5 <map_tank1_up_0>:
    31d5:	02 02 00 01 0e 0f                                   ......

000031db <map_none>:
    31db:	01 01 27                                            ..'

000031de <map_tank_blank>:
    31de:	02 02 27 27 27 27                                   ..''''

000031e4 <map_metal_bl>:
    31e4:	01 01 0c                                            ...

000031e7 <map_metal_tr>:
    31e7:	01 01 0b                                            ...

000031ea <map_metal_br>:
    31ea:	01 01 0a                                            ...

000031ed <map_metal_tl>:
    31ed:	01 01 09                                            ...

000031f0 <map_tile_exp_2>:
    31f0:	01 01 08                                            ...

000031f3 <map_tile_exp_1>:
    31f3:	01 01 07                                            ...

000031f6 <map_tile_exp_0>:
    31f6:	01 01 06                                            ...

000031f9 <map_rocket_itm>:
    31f9:	01 01 04                                            ...

000031fc <map_explode_itm>:
    31fc:	01 01 03                                            ...

000031ff <map_speed_itm>:
    31ff:	01 01 02                                            ...

00003202 <map_metal>:
    3202:	01 01 05                                            ...

00003205 <map_brick>:
    3205:	01 01 01                                            ...

00003208 <map_tile_none>:
    3208:	01 01 00                                            ...

0000320b <map_pause>:
    320b:	0f 04 01 01 01 01 01 01 01 01 01 01 01 01 01 01     ................
    321b:	01 01 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
    322b:	01 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01     ................
    323b:	01 01 01 01 01 01 01 01 01 01 01 01 01 01           ..............

00003249 <map_splash>:
    3249:	15 04 0d 0e 0f 10 11 12 13 14 15 16 00 17 00 00     ................
    3259:	00 10 11 0f 16 00 18 00 19 00 1a 00 1b 1c 1d 1e     ................
    3269:	1f 20 00 00 00 00 21 22 00 1a 00 1b 00 19 00 23     . ....!".......#
    3279:	11 24 1a 00 1b 25 26 00 00 00 00 27 28 00 1a 00     .$...%&....'(...
    3289:	1b 00 29 00 2a 00 2b 2a 00 2b 2a 00 17 00 00 00     ..).*.+*.+*.....
    3299:	2a 00 00 2c 2d 2e                                   *..,-.

0000329f <sprites_data>:
    329f:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    32af:	fe fe fe fe fe fe fe 2b 2b 2b 2b fe fe fe fe 2b     .......++++....+
    32bf:	12 12 12 fe fe 20 20 2b 2b 2b 2b 20 20 20 20 2b     .....  ++++    +
    32cf:	12 12 12 20 20 20 20 2b 2b 2b 2b 20 20 20 29 29     ...    ++++   ))
    32df:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    32ef:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 2b 2b 2b     +.......+....+++
    32ff:	2b 20 20 fe fe 12 12 12 2b 20 20 20 20 2b 2b 2b     +  .....+    +++
    330f:	2b 20 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +    ...))   +++
    331f:	fe fe fe fe fe fe 2b 2b fe fe fe fe fe fe fe 2b     ......++.......+
    332f:	fe fe fe fe fe fe fe 2b 12 12 12 fe fe fe fe 2b     .......+.......+
    333f:	2b 2b 2b fe fe 20 20 2b 12 12 12 20 20 20 20 2b     +++..  +...    +
    334f:	2b 2b 2b 20 20 20 20 2b 12 12 12 20 20 20 29 29     +++    +...   ))
    335f:	2b 2b fe fe fe fe fe fe 2b fe fe fe fe fe fe fe     ++......+.......
    336f:	2b fe fe fe fe fe fe fe 2b fe fe fe fe 12 12 12     +.......+.......
    337f:	2b 20 20 fe fe 2b 2b 2b 2b 20 20 20 20 12 12 12     +  ..++++    ...
    338f:	2b 20 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +    +++))   ...
    339f:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    33af:	2b 12 2b 12 2b 12 2b 12 fe fe 20 20 20 20 20 20     +.+.+.+...      
    33bf:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    33cf:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    33df:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    33ef:	2b 12 2b 12 2b fe fe fe 20 20 20 fe fe fe fe fe     +.+.+...   .....
    33ff:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    340f:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    341f:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    342f:	12 2b 12 2b 12 2b 12 2b fe fe 20 20 20 20 20 20     .+.+.+.+..      
    343f:	fe fe 20 20 20 20 20 20 fe fe fe 20 20 20 20 20     ..      ...     
    344f:	fe fe fe fe 20 20 29 29 fe fe fe fe 20 20 29 2b     ....  ))....  )+
    345f:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    346f:	12 2b 12 2b 12 fe fe fe 20 20 20 fe fe fe fe fe     .+.+....   .....
    347f:	20 20 20 fe fe fe fe fe 20 20 20 20 fe fe fe fe        .....    ....
    348f:	29 20 20 20 fe fe fe 2b 29 2b 2b 2b 2b 2b 2b 2b     )   ...+)+++++++
    349f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34af:	fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe 3f 3f     ......??......??
    34bf:	fe fe fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f     ......??......??
    34cf:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    34df:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    34ef:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    34ff:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    350f:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    351f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    352f:	3f 3f ff ff 1f 1f 3f 3f 3f 3f ff ff 1f 1f 3f 3f     ??....????....??
    353f:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    354f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    355f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    356f:	fe fe 1f 1f ff ff 3f 3f fe fe 1f 1f ff ff 3f 3f     ......??......??
    357f:	fe fe ff ff 3f 3f fe fe fe fe ff ff 3f 3f fe fe     ....??......??..
    358f:	3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f fe fe     ??????..??????..
    359f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35af:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    35bf:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    35cf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35df:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    35ef:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    35ff:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    360f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    361f:	12 12 12 20 20 20 29 2b 2b 2b 2b 20 20 20 29 29     ...   )++++   ))
    362f:	12 12 12 20 20 20 20 20 2b 2b 2b 20 20 20 20 20     ...     +++     
    363f:	12 12 12 20 20 20 fe fe 2b 2b 2b 20 20 fe fe fe     ...   ..+++  ...
    364f:	12 12 12 fe fe fe fe fe 2b 2b 2b fe fe fe fe fe     ........+++.....
    365f:	2b 29 20 20 20 12 12 12 29 29 20 20 20 2b 2b 2b     +)   ...))   +++
    366f:	20 20 20 20 20 12 12 12 20 20 20 20 20 2b 2b 2b          ...     +++
    367f:	fe fe 20 20 20 12 12 12 fe fe fe 20 20 2b 2b 2b     ..   ......  +++
    368f:	fe fe fe fe fe 12 12 12 fe fe fe fe fe 2b 2b 2b     .............+++
    369f:	2b 2b 2b 20 20 20 29 2b 12 12 12 20 20 20 29 29     +++   )+...   ))
    36af:	2b 2b 2b 20 20 20 20 20 12 12 12 20 20 20 20 20     +++     ...     
    36bf:	2b 2b 2b 20 20 20 fe fe 12 12 12 20 20 fe fe fe     +++   .....  ...
    36cf:	2b 2b 2b fe fe fe fe fe 12 12 12 fe fe fe fe fe     +++.............
    36df:	2b 29 20 20 20 2b 2b 2b 29 29 20 20 20 12 12 12     +)   +++))   ...
    36ef:	20 20 20 20 20 2b 2b 2b 20 20 20 20 20 12 12 12          +++     ...
    36ff:	fe fe 20 20 20 2b 2b 2b fe fe fe 20 20 12 12 12     ..   +++...  ...
    370f:	fe fe fe fe fe 2b 2b 2b fe fe fe fe fe 12 12 12     .....+++........
    371f:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    372f:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    373f:	fe fe 20 20 20 20 20 20 2b 12 2b 12 2b 12 2b 12     ..      +.+.+.+.
    374f:	2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12     +.+.+.+.+.+.+.+.
    375f:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    376f:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    377f:	20 20 20 fe fe fe fe fe 2b 12 2b 12 2b fe fe fe        .....+.+.+...
    378f:	2b 12 2b 12 2b fe fe fe 2b 12 2b 12 2b fe fe fe     +.+.+...+.+.+...
    379f:	fe fe fe fe 20 20 29 2b fe fe fe fe 20 20 29 29     ....  )+....  ))
    37af:	fe fe fe 20 20 20 20 20 fe fe 20 20 20 20 20 20     ...     ..      
    37bf:	fe fe 20 20 20 20 20 20 12 2b 12 2b 12 2b 12 2b     ..      .+.+.+.+
    37cf:	12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b 12 2b     .+.+.+.+.+.+.+.+
    37df:	29 2b 2b 2b 2b 2b 2b 2b 29 20 20 20 fe fe fe 2b     )+++++++)   ...+
    37ef:	20 20 20 20 fe fe fe fe 20 20 20 fe fe fe fe fe         ....   .....
    37ff:	20 20 20 fe fe fe fe fe 12 2b 12 2b 12 fe fe fe        ......+.+....
    380f:	12 2b 12 2b 12 fe fe fe 12 2b 12 2b 12 fe fe fe     .+.+.....+.+....
    381f:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    382f:	fe fe fe fe ff ff fe fe fe fe fe fe ff ff fe fe     ................
    383f:	fe fe ff ff fe fe fe fe fe fe ff ff fe fe fe fe     ................
    384f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    385f:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    386f:	3f 3f ff ff fe fe fe fe 3f 3f ff ff fe fe fe fe     ??......??......
    387f:	3f 3f fe fe ff ff fe fe 3f 3f fe fe ff ff fe fe     ??......??......
    388f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    389f:	fe fe 3f 3f 3f 3f 3f 3f fe fe 3f 3f 3f 3f 3f 3f     ..??????..??????
    38af:	fe fe 1f 1f ff ff fe fe fe fe 1f 1f ff ff fe fe     ................
    38bf:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    38cf:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    38df:	3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f fe fe fe fe     ????....????....
    38ef:	3f 3f ff ff 1f 1f fe fe 3f 3f ff ff 1f 1f fe fe     ??......??......
    38ff:	3f 3f 1f 1f ff ff 3f 3f 3f 3f 1f 1f ff ff 3f 3f     ??....????....??
    390f:	fe fe fe fe 3f 3f 3f 3f fe fe fe fe 3f 3f 3f 3f     ....????....????
    391f:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    392f:	fe fe fe fe fe fe fe f5 f5 f5 f5 fe fe fe fe f5     ................
    393f:	90 90 90 fe fe e1 e1 f5 f5 f5 f5 e1 e1 e1 e1 f5     ................
    394f:	90 90 90 e1 e1 e1 e1 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    395f:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    396f:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe f5 f5 f5     ................
    397f:	f5 e1 e1 fe fe 90 90 90 f5 e1 e1 e1 e1 f5 f5 f5     ................
    398f:	f5 e1 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    399f:	fe fe fe fe fe fe f5 f5 fe fe fe fe fe fe fe f5     ................
    39af:	fe fe fe fe fe fe fe f5 90 90 90 fe fe fe fe f5     ................
    39bf:	f5 f5 f5 fe fe e1 e1 f5 90 90 90 e1 e1 e1 e1 f5     ................
    39cf:	f5 f5 f5 e1 e1 e1 e1 f5 90 90 90 e1 e1 e1 f0 f0     ................
    39df:	f5 f5 fe fe fe fe fe fe f5 fe fe fe fe fe fe fe     ................
    39ef:	f5 fe fe fe fe fe fe fe f5 fe fe fe fe 90 90 90     ................
    39ff:	f5 e1 e1 fe fe f5 f5 f5 f5 e1 e1 e1 e1 90 90 90     ................
    3a0f:	f5 e1 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3a1f:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3a2f:	f5 90 f5 90 f5 90 f5 90 fe fe e1 e1 e1 e1 e1 e1     ................
    3a3f:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3a4f:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3a5f:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3a6f:	f5 90 f5 90 f5 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3a7f:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3a8f:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3a9f:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3aaf:	90 f5 90 f5 90 f5 90 f5 fe fe e1 e1 e1 e1 e1 e1     ................
    3abf:	fe fe e1 e1 e1 e1 e1 e1 fe fe fe e1 e1 e1 e1 e1     ................
    3acf:	fe fe fe fe e1 e1 f0 f0 fe fe fe fe e1 e1 f0 f5     ................
    3adf:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3aef:	90 f5 90 f5 90 fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3aff:	e1 e1 e1 fe fe fe fe fe e1 e1 e1 e1 fe fe fe fe     ................
    3b0f:	f0 e1 e1 e1 fe fe fe f5 f0 f5 f5 f5 f5 f5 f5 f5     ................
    3b1f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b2f:	fe fe fe ad ad fe fe fe fe fe ad ad ad ad fe fe     ................
    3b3f:	fe fe ad ad ad ad fe fe fe fe fe ad ad fe fe fe     ................
    3b4f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3b5f:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3b6f:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3b7f:	fe ad ad ad ad ad ad fe fe fe 3f 3f 3f 3f fe fe     ..........????..
    3b8f:	fe fe fe 3f 3f fe fe fe fe fe fe fe fe fe fe fe     ...??...........
    3b9f:	fe fe fe ad ad fe fe fe fe fe fe ad ad fe fe fe     ................
    3baf:	fe fe ad ad ad ad fe fe fe fe ad ad ad ad fe fe     ................
    3bbf:	fe ad ad ad ad ad ad fe fe fe fe 3f 3f fe fe fe     ...........??...
    3bcf:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3bdf:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3bef:	fe fe 3f ad ad ad fe fe fe 3f 3f ad ad ad ad ad     ..?......??.....
    3bff:	fe 3f 3f ad ad ad ad ad fe fe 3f ad ad ad fe fe     .??.......?.....
    3c0f:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c1f:	fe fe fe fe fe fe fe fe fe fe fe ad fe fe fe fe     ................
    3c2f:	fe fe fe ad ad ad fe fe fe fe 3f ad ad ad ad ad     ..........?.....
    3c3f:	fe fe 3f ad ad ad ad ad fe fe fe ad ad ad fe fe     ..?.............
    3c4f:	fe fe fe ad fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c5f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c6f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c7f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c8f:	fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe fe     ................
    3c9f:	90 90 90 e1 e1 e1 f0 f5 f5 f5 f5 e1 e1 e1 f0 f0     ................
    3caf:	90 90 90 e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1     ................
    3cbf:	90 90 90 e1 e1 e1 fe fe f5 f5 f5 e1 e1 fe fe fe     ................
    3ccf:	90 90 90 fe fe fe fe fe f5 f5 f5 fe fe fe fe fe     ................
    3cdf:	f5 f0 e1 e1 e1 90 90 90 f0 f0 e1 e1 e1 f5 f5 f5     ................
    3cef:	e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1 f5 f5 f5     ................
    3cff:	fe fe e1 e1 e1 90 90 90 fe fe fe e1 e1 f5 f5 f5     ................
    3d0f:	fe fe fe fe fe 90 90 90 fe fe fe fe fe f5 f5 f5     ................
    3d1f:	f5 f5 f5 e1 e1 e1 f0 f5 90 90 90 e1 e1 e1 f0 f0     ................
    3d2f:	f5 f5 f5 e1 e1 e1 e1 e1 90 90 90 e1 e1 e1 e1 e1     ................
    3d3f:	f5 f5 f5 e1 e1 e1 fe fe 90 90 90 e1 e1 fe fe fe     ................
    3d4f:	f5 f5 f5 fe fe fe fe fe 90 90 90 fe fe fe fe fe     ................
    3d5f:	f5 f0 e1 e1 e1 f5 f5 f5 f0 f0 e1 e1 e1 90 90 90     ................
    3d6f:	e1 e1 e1 e1 e1 f5 f5 f5 e1 e1 e1 e1 e1 90 90 90     ................
    3d7f:	fe fe e1 e1 e1 f5 f5 f5 fe fe fe e1 e1 90 90 90     ................
    3d8f:	fe fe fe fe fe f5 f5 f5 fe fe fe fe fe 90 90 90     ................
    3d9f:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3daf:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3dbf:	fe fe e1 e1 e1 e1 e1 e1 f5 90 f5 90 f5 90 f5 90     ................
    3dcf:	f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90     ................
    3ddf:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3def:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3dff:	e1 e1 e1 fe fe fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3e0f:	f5 90 f5 90 f5 fe fe fe f5 90 f5 90 f5 fe fe fe     ................
    3e1f:	fe fe fe fe e1 e1 f0 f5 fe fe fe fe e1 e1 f0 f0     ................
    3e2f:	fe fe fe e1 e1 e1 e1 e1 fe fe e1 e1 e1 e1 e1 e1     ................
    3e3f:	fe fe e1 e1 e1 e1 e1 e1 90 f5 90 f5 90 f5 90 f5     ................
    3e4f:	90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5 90 f5     ................
    3e5f:	f0 f5 f5 f5 f5 f5 f5 f5 f0 e1 e1 e1 fe fe fe f5     ................
    3e6f:	e1 e1 e1 e1 fe fe fe fe e1 e1 e1 fe fe fe fe fe     ................
    3e7f:	e1 e1 e1 fe fe fe fe fe 90 f5 90 f5 90 fe fe fe     ................
    3e8f:	90 f5 90 f5 90 fe fe fe 90 f5 90 f5 90 fe fe fe     ................

00003e9f <tiles_data>:
	...
    3edf:	66 66 66 26 66 66 66 66 77 77 77 26 77 77 77 77     fff&ffffwww&wwww
    3eef:	77 77 77 26 77 77 77 77 77 77 77 26 77 77 77 77     www&wwwwwww&wwww
    3eff:	26 26 26 26 26 26 26 26 77 77 77 77 77 77 77 26     &&&&&&&&wwwwwww&
    3f0f:	77 77 77 77 77 77 77 26 77 77 77 77 77 77 77 26     wwwwwww&wwwwwww&
    3f1f:	00 ec ec ec ec ec ec 00 ec ff ff ff ff ff ff ec     ................
    3f2f:	ec ed ff ff ff ff ed ec ec ed ee ff ff ee ed ec     ................
    3f3f:	ec ed ee ff ef ee ed ec ec ed ff ee ee ee ed ec     ................
    3f4f:	ec ff ed ed ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3f5f:	00 ec ec ec ec ec ec 00 ec ff ed ed ed ed ff ec     ................
    3f6f:	ec ed ff ee ee ff ed ec ec ed ee ff ff ee ed ec     ................
    3f7f:	ec ed ee ff ff ee ed ec ec ed ff ee ee ff ed ec     ................
    3f8f:	ec ff ed ed ed ed ff ec 00 ec ec ec ec ec ec 00     ................
    3f9f:	00 ec ec ec ec ec ec 00 ec ed ed ed ed ed ff ec     ................
    3faf:	ec ed ee ee ff ff ed ec ec ed ee ff ff ff ed ec     ................
    3fbf:	ec ff ee ff ff ee ed ec ec ed ff ee ee ee ed ec     ................
    3fcf:	ec ff ed ff ed ed ed ec 00 ec ec ec ec ec ec 00     ................
    3fdf:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 04     ................
    3fef:	05 05 05 05 05 05 04 04 05 05 05 07 07 04 04 04     ................
    3fff:	05 05 05 07 07 04 04 04 05 05 05 04 04 04 04 04     ................
    400f:	05 05 04 04 04 04 04 04 05 04 04 04 04 04 04 04     ................
	...
    4027:	00 ff 00 3f 00 00 ff 00 00 00 ff 3f 00 ff 00 00     ...?.......?....
    4037:	00 00 3f 3f 3f 3f 3f 00 00 3f 3f 3f 3f 3f 00 00     ..?????..?????..
    4047:	00 00 ff 00 3f ff 00 00 00 ff 00 00 3f 00 ff 00     ....?.......?...
	...
    405f:	3f 3f 00 00 00 00 3f 3f 3f ff 1f 3f 00 1f ff 3f     ??....???..?...?
    406f:	00 1f ff 3f 00 ff 3f 00 00 00 3f 3f 3f 3f 3f 00     ...?..?...?????.
    407f:	00 3f 3f 3f 3f 3f 00 00 00 1f ff 00 3f ff 1f 00     .?????......?...
    408f:	3f ff 1f 00 3f 1f ff 3f 3f 3f 00 00 00 00 3f 3f     ?...?..???....??
	...
    40a7:	00 ff 00 00 00 00 ff 00 00 00 ff 00 00 ff 00 00     ................
	...
    40c7:	00 00 ff 00 00 ff 00 00 00 ff 00 00 00 00 ff 00     ................
	...
    40df:	05 05 05 05 05 05 05 05 05 05 05 05 05 05 05 00     ................
    40ef:	05 05 05 05 05 05 00 00 05 05 05 07 07 00 00 00     ................
    40ff:	05 05 05 07 00 00 00 00 05 05 05 00 00 00 00 00     ................
    410f:	05 05 00 00 00 00 00 00 05 00 00 00 00 00 00 00     ................
    411f:	00 00 00 00 00 00 00 04 00 00 00 00 00 00 04 04     ................
    412f:	00 00 00 00 00 04 04 04 00 00 00 00 07 04 04 04     ................
    413f:	00 00 00 07 07 04 04 04 00 00 04 04 04 04 04 04     ................
    414f:	00 04 04 04 04 04 04 04 04 04 04 04 04 04 04 04     ................
    415f:	05 05 05 05 05 05 05 05 00 05 05 05 05 05 05 05     ................
    416f:	00 00 05 05 05 05 05 05 00 00 00 07 07 05 05 05     ................
    417f:	00 00 00 00 07 05 05 05 00 00 00 00 00 05 05 05     ................
    418f:	00 00 00 00 00 00 05 05 00 00 00 00 00 00 00 05     ................
    419f:	04 00 00 00 00 00 00 00 04 04 00 00 00 00 00 00     ................
    41af:	04 04 04 00 00 00 00 00 04 04 04 07 00 00 00 00     ................
    41bf:	04 04 04 07 07 00 00 00 04 04 04 04 04 04 00 00     ................
    41cf:	04 04 04 04 04 04 04 00 04 04 04 04 04 04 04 04     ................
    41df:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    41ef:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    41ff:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    420f:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
    421f:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    422f:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    423f:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    424f:	85 85 86 87 87 86 85 85 ad 85 86 87 87 86 85 ad     ................
    425f:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    426f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    427f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    428f:	83 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    429f:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    42af:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    42bf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    42cf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    42df:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    42ef:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    42ff:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    430f:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
    431f:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    432f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    433f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    434f:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    435f:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    436f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    437f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    438f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    43bf:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    43cf:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
	...
    43ff:	ad ad ad ad ad ad ad ad 83 83 82 82 81 81 81 ad     ................
    440f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    441f:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 ad     ................
    442f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    443f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    444f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    445f:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    446f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    447f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    448f:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    449f:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    44af:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44bf:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44cf:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    44df:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    44ef:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    44ff:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    450f:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    451f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    452f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    453f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    454f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    455f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    456f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    457f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    458f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    459f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    45af:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    45bf:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    45cf:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    45df:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    45ef:	85 85 86 87 87 86 85 85 ad ad ad ad ad ad ad ad     ................
	...
    461f:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    462f:	83 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    463f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    464f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    465f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 83     ................
    466f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    467f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    468f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    469f:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    46af:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    46bf:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    46cf:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    46df:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    46ef:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    46ff:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    470f:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
	...
    4747:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 ad     ................
    4757:	85 85 86 87 87 86 85 ad ad 81 81 81 82 82 83 ad     ................
    4767:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4777:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4787:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4797:	ad 81 81 81 82 82 83 ad ad 83 82 82 81 81 81 ad     ................
    47a7:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47b7:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47c7:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    47d7:	ad 83 82 82 81 81 81 ad ad 81 81 81 82 82 83 83     ................
    47e7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    47f7:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4807:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4817:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    4827:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4837:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4847:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    4857:	ad ad ad ad ad ad ad ad ad 81 81 81 82 82 83 83     ................
    4867:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    4877:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 ad     ................
    4887:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    4897:	ad 81 81 81 82 82 83 ad 85 85 86 87 87 86 85 ad     ................
    48a7:	85 85 86 87 87 86 85 ad 85 85 86 87 87 86 85 ad     ................
    48b7:	85 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
	...
    48df:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    48ef:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    48ff:	ad 85 86 87 87 86 85 ad ad 85 86 87 87 86 85 ad     ................
    490f:	ad 85 86 87 87 86 85 ad ad ad ad ad ad ad ad ad     ................
    491f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    492f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    493f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    494f:	ad 81 81 81 82 82 83 ad ad ad ad ad ad ad ad ad     ................
    495f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    496f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    497f:	ad 83 82 82 81 81 81 ad ad 83 82 82 81 81 81 ad     ................
    498f:	ad 83 82 82 81 81 81 ad ad ad ad ad ad ad ad ad     ................
    499f:	ad 81 81 81 82 82 83 ad ad 81 81 81 82 82 83 ad     ................
    49af:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    49bf:	ad 81 81 81 82 82 83 83 ad 81 81 81 82 82 83 83     ................
    49cf:	ad 81 81 81 82 82 83 83 ad ad ad ad ad ad ad ad     ................
	...
    49e7:	ad ad ad ad ad ad ad ad 85 85 86 87 87 86 85 85     ................
    49f7:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4a07:	85 85 86 87 87 86 85 85 85 85 86 87 87 86 85 85     ................
    4a17:	ad ad ad ad ad ad ad ad ad 83 82 82 81 81 81 ad     ................
    4a27:	ad 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4a37:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4a47:	83 83 82 82 81 81 81 ad 83 83 82 82 81 81 81 ad     ................
    4a57:	ad ad ad ad ad ad ad ad 00 00 00 00 00 00 00 00     ................
	...
    4aa7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4ab7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4acf:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ae7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4af7:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4b27:	00 ff ff 00 00 ff ff 00 ff ff ff ff ff ff ff ff     ................
    4b37:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    4b47:	ff ff ff ff ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
	...
    4b5f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff ff 00     ................
    4b6f:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff 00 00     ................
    4b7f:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    4b8f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4ba7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    4bb7:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    4bc7:	00 ff ff 00 00 ff ff 00 00 ff 00 00 00 ff ff 00     ................
	...
    4bdf:	00 00 00 ff ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
    4bef:	00 00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00     ................
    4bff:	00 ff ff 00 ff ff ff ff 00 ff ff 00 00 ff ff 00     ................
    4c0f:	00 00 ff ff ff 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    4c27:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4c37:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4c6b:	ff ff ff 00 00 00 00 ff ff ff 00 00 00 00 00 ff     ................
    4c7b:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    4c8b:	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00     ................
	...
    4ca7:	00 ff ff ff 00 00 00 00 00 00 ff ff ff 00 00 00     ................
    4cb7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4cc7:	00 00 ff ff ff 00 00 00 00 ff ff ff 00 00 00 00     ................
	...
    4ce7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    4cf7:	ff ff ff ff ff ff ff ff 00 00 ff ff ff ff 00 00     ................
    4d07:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4d27:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4d37:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    4d47:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4d87:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4d97:	00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    4db7:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    4e07:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    4e2b:	00 ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff     ................
    4e3b:	ff 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff 00     ................
    4e4b:	00 00 00 00 00 ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    4e67:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4e77:	00 ff ff 00 ff ff ff 00 00 ff ff ff 00 ff ff 00     ................
    4e87:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4ea7:	00 00 00 ff ff 00 00 00 00 00 ff ff ff 00 00 00     ................
    4eb7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    4ec7:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4ee7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    4ef7:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    4f07:	00 00 ff ff 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    4f27:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    4f37:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    4f47:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4f6b:	ff ff 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    4f7b:	ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff ff     ................
    4f8b:	ff ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00     ................
	...
    4fa7:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    4fb7:	00 ff ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    4fc7:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    4fe7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    4ff7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5007:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5027:	00 ff ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    5037:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5047:	00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00     ................
	...
    5067:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5077:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5087:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    50a7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    50b7:	00 00 ff ff ff ff ff 00 00 00 00 00 00 ff ff 00     ................
    50c7:	00 00 00 00 ff ff 00 00 00 00 ff ff ff 00 00 00     ................
	...
    50ef:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5107:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    512f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5147:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5157:	00 00 ff ff 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5167:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    5177:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5187:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    51af:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    51c7:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    51df:	00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00 00     ................
    51ef:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00     ................
    51ff:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    520f:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5227:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5237:	00 00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    524f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5267:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5277:	00 ff ff 00 ff ff ff 00 00 ff ff 00 ff ff ff 00     ................
    5287:	00 ff ff 00 00 00 00 00 00 00 ff ff ff ff ff 00     ................
	...
    52a7:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    52b7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    52c7:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    52e7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    52f7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5307:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5327:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5337:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5347:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5367:	00 ff ff ff ff 00 00 00 00 ff ff 00 ff ff 00 00     ................
    5377:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5387:	00 ff ff 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    53a7:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    53b7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    53c7:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    53e7:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    53f7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5407:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5427:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5437:	00 ff ff 00 00 00 00 00 00 ff ff 00 ff ff ff 00     ................
    5447:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
	...
    5467:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5477:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5487:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    54a7:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    54b7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    54c7:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    54eb:	ff ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    54fb:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 ff ff 00     ................
    550b:	00 ff ff 00 00 00 ff ff ff ff 00 00 00 00 00 00     ................
	...
    5527:	00 ff ff 00 00 ff ff 00 00 ff ff 00 ff ff 00 00     ................
    5537:	00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
    5547:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5567:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5577:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5587:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    55a7:	00 ff ff 00 00 00 ff ff 00 ff ff ff 00 ff ff ff     ................
    55b7:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    55c7:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    55e7:	00 ff ff 00 00 ff ff 00 00 ff ff ff 00 ff ff 00     ................
    55f7:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5607:	00 ff ff 00 ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5627:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5637:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5647:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5667:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5677:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5687:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    56a7:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    56b7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    56c7:	00 ff ff 00 ff ff 00 00 00 00 ff ff 00 ff ff 00     ................
	...
    56e7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    56f7:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5707:	00 ff ff 00 ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
	...
    5727:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5737:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5747:	00 00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
	...
    5767:	00 ff ff ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5777:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5787:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    57a7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    57b7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    57c7:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff 00     ................
	...
    57e7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    57f7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5807:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5827:	00 ff ff 00 00 00 ff ff 00 ff ff 00 00 00 ff ff     ................
    5837:	00 ff ff 00 ff 00 ff ff 00 ff ff ff ff ff ff ff     ................
    5847:	00 ff ff ff 00 ff ff ff 00 ff ff 00 00 00 ff ff     ................
	...
    5867:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5877:	00 00 ff ff ff ff 00 00 00 00 ff ff ff ff 00 00     ................
    5887:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    58a7:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    58b7:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
    58c7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    58e7:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    58f7:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    5907:	00 ff ff 00 00 00 00 00 00 ff ff ff ff ff ff 00     ................
	...
    5927:	00 00 00 ff ff ff ff 00 00 00 00 ff ff 00 00 00     ................
    5937:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5947:	00 00 00 ff ff 00 00 00 00 00 00 ff ff ff ff 00     ................
	...
    5967:	00 ff 00 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5977:	00 00 ff ff 00 00 00 00 00 00 00 ff ff 00 00 00     ................
    5987:	00 00 00 00 ff ff 00 00 00 00 00 00 00 ff ff 00     ................
	...
    59a7:	00 ff ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59b7:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    59c7:	00 00 00 ff ff 00 00 00 00 ff ff ff ff 00 00 00     ................
	...
    59eb:	ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 ff ff     ................
    59fb:	00 ff ff 00 00 ff ff 00 00 00 ff ff 00 00 00 00     ................
	...
    5a4f:	ff ff ff ff ff ff ff ff 00 00 00 00 00 00 00 00     ................
	...
    5a67:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    5a77:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    5a87:	00 00 ff ff ff ff 00 00 00 00 00 ff ff 00 00 00     ................
	...
    5aaf:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5abf:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5acf:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5ae7:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5af7:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5b07:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5b2f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 00 00 00     ................
    5b3f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5b4f:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5b6b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    5b7b:	ff ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5b8b:	00 ff ff 00 00 00 ff ff ff ff ff 00 00 00 00 00     ................
	...
    5baf:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5bbf:	00 ff ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5bcf:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5beb:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    5bfb:	ff ff ff 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    5c0b:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
	...
    5c2f:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5c3f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5c4f:	00 00 00 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
	...
    5c67:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5c77:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5c87:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
	...
    5ca7:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
    5cb7:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5cc7:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5ceb:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
    5cfb:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5d0b:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 ff ff     ................
    5d1b:	ff ff 00 00 00 00 00 00 00 00 00 00 00 ff ff 00     ................
    5d2b:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
    5d3b:	ff ff 00 00 00 ff ff ff ff 00 00 00 00 ff ff 00     ................
    5d4b:	ff ff 00 00 00 ff ff 00 00 ff ff 00 00 00 00 00     ................
	...
    5d67:	00 00 ff ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5d77:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5d87:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    5daf:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff ff ff     ................
    5dbf:	00 ff ff ff ff ff ff ff 00 ff ff 00 ff 00 ff ff     ................
    5dcf:	00 ff ff 00 00 00 ff ff 00 00 00 00 00 00 00 00     ................
	...
    5def:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5dff:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e0f:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5e2f:	00 00 ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5e3f:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5e4f:	00 00 ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5e6f:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5e7f:	00 ff ff 00 00 ff ff 00 00 ff ff ff ff ff 00 00     ................
    5e8f:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
	...
    5eaf:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5ebf:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    5ecf:	00 00 00 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    5eef:	00 ff ff ff ff ff 00 00 00 ff ff 00 00 ff ff 00     ................
    5eff:	00 ff ff 00 00 00 00 00 00 ff ff 00 00 00 00 00     ................
    5f0f:	00 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f2f:	00 00 ff ff ff ff ff 00 00 ff ff 00 00 00 00 00     ................
    5f3f:	00 00 ff ff ff ff 00 00 00 00 00 00 00 ff ff 00     ................
    5f4f:	00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00 00     ................
	...
    5f67:	00 00 00 ff ff 00 00 00 00 ff ff ff ff ff ff 00     ................
    5f77:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    5f87:	00 00 00 ff ff 00 00 00 00 00 00 00 ff ff ff 00     ................
	...
    5faf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fbf:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fcf:	00 00 ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    5fef:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    5fff:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    600f:	00 00 00 ff ff 00 00 00 00 00 00 00 00 00 00 00     ................
	...
    602f:	00 ff ff 00 00 00 ff ff 00 ff ff 00 ff 00 ff ff     ................
    603f:	00 ff ff ff ff ff ff ff 00 00 ff ff ff ff ff 00     ................
    604f:	00 00 ff ff 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    606f:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff 00 00     ................
    607f:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    608f:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    60af:	00 ff ff 00 00 ff ff 00 00 ff ff 00 00 ff ff 00     ................
    60bf:	00 ff ff 00 00 ff ff 00 00 00 ff ff ff ff ff 00     ................
    60cf:	00 00 00 00 ff ff 00 00 00 ff ff ff ff 00 00 00     ................
	...
    60ef:	00 ff ff ff ff ff ff 00 00 00 00 00 ff ff 00 00     ................
    60ff:	00 00 00 ff ff 00 00 00 00 00 ff ff 00 00 00 00     ................
    610f:	00 ff ff ff ff ff ff 00 00 00 00 00 00 00 00 00     ................
	...
    6127:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
    6137:	00 ff ff ff ff ff ff 00 00 ff ff ff ff ff ff 00     ................
    6147:	00 00 00 ff ff 00 00 00 00 00 ff ff ff ff 00 00     ................
	...
    615f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    616f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    617f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
    618f:	00 00 00 ff ff 00 00 00 00 00 00 ff ff 00 00 00     ................
	...
    61a7:	00 ff ff ff ff ff ff 00 00 ff ff ff ff 00 00 00     ................
    61b7:	00 ff ff ff ff ff 00 00 00 ff ff 00 ff ff ff 00     ................
    61c7:	00 ff ff 00 00 ff ff 00 00 00 00 00 00 ff ff 00     ................
	...
    61e3:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 ff ff     ................
    61f3:	ff 00 00 00 00 ff ff ff ff 00 00 00 00 00 ff ff     ................
    6203:	ff 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 00     ................
    6213:	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff     ................
    6223:	00 00 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
    6233:	ff ff 00 00 00 00 00 ff ff ff ff 00 00 00 00 ff     ................
    6243:	ff ff 00 00 00 00 00 ff ff 00 00 00 00 00 00 ff     ................
	...

00006260 <__ctors_end>:
    6260:	11 24       	eor	r1, r1
    6262:	1f be       	out	0x3f, r1	; 63
    6264:	cf ef       	ldi	r28, 0xFF	; 255
    6266:	d0 e1       	ldi	r29, 0x10	; 16
    6268:	de bf       	out	0x3e, r29	; 62
    626a:	cd bf       	out	0x3d, r28	; 61

0000626c <__do_copy_data>:
    626c:	11 e0       	ldi	r17, 0x01	; 1
    626e:	a0 e0       	ldi	r26, 0x00	; 0
    6270:	b1 e0       	ldi	r27, 0x01	; 1
    6272:	ee ed       	ldi	r30, 0xDE	; 222
    6274:	ff ea       	ldi	r31, 0xAF	; 175
    6276:	02 c0       	rjmp	.+4      	; 0x627c <__do_copy_data+0x10>
    6278:	05 90       	lpm	r0, Z+
    627a:	0d 92       	st	X+, r0
    627c:	a4 34       	cpi	r26, 0x44	; 68
    627e:	b1 07       	cpc	r27, r17
    6280:	d9 f7       	brne	.-10     	; 0x6278 <__do_copy_data+0xc>

00006282 <__do_clear_bss>:
    6282:	1e e0       	ldi	r17, 0x0E	; 14
    6284:	a4 e4       	ldi	r26, 0x44	; 68
    6286:	b1 e0       	ldi	r27, 0x01	; 1
    6288:	01 c0       	rjmp	.+2      	; 0x628c <.do_clear_bss_start>

0000628a <.do_clear_bss_loop>:
    628a:	1d 92       	st	X+, r1

0000628c <.do_clear_bss_start>:
    628c:	ab 30       	cpi	r26, 0x0B	; 11
    628e:	b1 07       	cpc	r27, r17
    6290:	e1 f7       	brne	.-8      	; 0x628a <.do_clear_bss_loop>

00006292 <wdt_init>:

#if TRUE_RANDOM_GEN == 1	
	wdt_randomize();
#endif

    MCUSR = 0;
    6292:	14 be       	out	0x34, r1	; 52
    wdt_disable();
    6294:	88 e1       	ldi	r24, 0x18	; 24
    6296:	0f b6       	in	r0, 0x3f	; 63
    6298:	f8 94       	cli
    629a:	80 93 60 00 	sts	0x0060, r24
    629e:	10 92 60 00 	sts	0x0060, r1
    62a2:	0f be       	out	0x3f, r0	; 63

000062a4 <Initialize>:


void Initialize(void){
	int i;

	if(!isEepromFormatted()) FormatEeprom();
    62a4:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <isEepromFormatted>
    62a8:	81 11       	cpse	r24, r1
    62aa:	02 c0       	rjmp	.+4      	; 0x62b0 <Initialize+0xc>
    62ac:	0e 94 cc 35 	call	0x6b98	; 0x6b98 <FormatEeprom>

	cli();
    62b0:	f8 94       	cli
		mix_bank=0;
	#endif
	
	#if MIXER_CHAN4_TYPE == 0
		//initialize LFSR		
		tr4_barrel_lo=1;
    62b2:	81 e0       	ldi	r24, 0x01	; 1
    62b4:	80 93 56 09 	sts	0x0956, r24
		tr4_barrel_hi=1;		
    62b8:	80 93 57 09 	sts	0x0957, r24
		tr4_params=0b00000001; //15 bits no divider (1)
    62bc:	80 93 55 09 	sts	0x0955, r24
		snesMouseEnabled=false;
	#endif

	//silence all sound channels
	for(i=0;i<CHANNELS;i++){
		mixer.channels.all[i].volume=0;
    62c0:	10 92 42 09 	sts	0x0942, r1
    62c4:	10 92 48 09 	sts	0x0948, r1
    62c8:	10 92 4e 09 	sts	0x094E, r1
    62cc:	10 92 54 09 	sts	0x0954, r1
    62d0:	10 92 5a 09 	sts	0x095A, r1
	}
	
	//set sync parameters. starts at odd field, in pre-eq pulses, line 1, vsync flag cleared
	sync_phase=0;
    62d4:	10 92 16 09 	sts	0x0916, r1
	sync_flags=0;
    62d8:	10 92 18 09 	sts	0x0918, r1
	sync_pulse=SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES;
    62dc:	92 e1       	ldi	r25, 0x12	; 18
    62de:	90 93 17 09 	sts	0x0917, r25

	//set rendering parameters
	render_lines_count_tmp=FRAME_LINES;
    62e2:	90 ee       	ldi	r25, 0xE0	; 224
    62e4:	90 93 20 09 	sts	0x0920, r25
	render_lines_count=FRAME_LINES;
    62e8:	90 93 1e 09 	sts	0x091E, r25
	first_render_line_tmp=FIRST_RENDER_LINE;
    62ec:	94 e1       	ldi	r25, 0x14	; 20
    62ee:	90 93 1f 09 	sts	0x091F, r25
	first_render_line=FIRST_RENDER_LINE;
    62f2:	90 93 1d 09 	sts	0x091D, r25

	joypad1_status_hi=0;
    62f6:	10 92 24 09 	sts	0x0924, r1
    62fa:	10 92 23 09 	sts	0x0923, r1
	joypad2_status_hi=0;
    62fe:	10 92 28 09 	sts	0x0928, r1
    6302:	10 92 27 09 	sts	0x0927, r1
	sound_enabled=1;
    6306:	80 93 41 09 	sts	0x0941, r24

	InitializeVideoMode();
    630a:	0e 94 60 42 	call	0x84c0	; 0x84c0 <InitializeVideoMode>
    630e:	82 e8       	ldi	r24, 0x82	; 130
    6310:	90 e0       	ldi	r25, 0x00	; 0
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
		val=pgm_read_word(&io_table[j]);
    6312:	fc 01       	movw	r30, r24
    6314:	25 91       	lpm	r18, Z+
    6316:	34 91       	lpm	r19, Z
		ptr=(u8*)(val&0xff);
    6318:	f9 01       	movw	r30, r18
    631a:	ff 27       	eor	r31, r31
		*ptr=val>>8;	
    631c:	30 83       	st	Z, r19
    631e:	02 96       	adiw	r24, 0x02	; 2
	InitializeVideoMode();
	
	//Initialize I/O registers
	u16 val;
	u8 *ptr;
	for(u8 j=0;j<(sizeof(io_table)>>1);j++){
    6320:	20 e0       	ldi	r18, 0x00	; 0
    6322:	80 3b       	cpi	r24, 0xB0	; 176
    6324:	92 07       	cpc	r25, r18
    6326:	a9 f7       	brne	.-22     	; 0x6312 <Initialize+0x6e>
		val=pgm_read_word(&io_table[j]);
		ptr=(u8*)(val&0xff);
		*ptr=val>>8;	
	}

	sei();
    6328:	78 94       	sei
	
	DisplayLogo();
    632a:	0e 94 5f 42 	call	0x84be	; 0x84be <DisplayLogo>
    632e:	0e 94 4b 55 	call	0xaa96	; 0xaa96 <main>
    6332:	0c 94 ed 57 	jmp	0xafda	; 0xafda <_exit>

00006336 <__bad_interrupt>:
    6336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000633a <sub_video_mode3>:
	; Mode 3 with NO scrolling
	;***************************************************	
	sub_video_mode3:

		;wait cycles to align with next hsync
		WAIT r16,36
    633a:	0c e0       	ldi	r16, 0x0C	; 12
    633c:	0a 95       	dec	r16
    633e:	f1 f7       	brne	.-4      	; 0x633c <sub_video_mode3+0x2>

		;Set ramtiles indexes in VRAM 
		ldi ZL,lo8(ram_tiles_restore);
    6340:	e8 ed       	ldi	r30, 0xD8	; 216
		ldi ZH,hi8(ram_tiles_restore);
    6342:	f8 e0       	ldi	r31, 0x08	; 8

		ldi YL,lo8(vram)
    6344:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    6346:	d1 e0       	ldi	r29, 0x01	; 1

		lds r18,free_tile_index
    6348:	20 91 f7 09 	lds	r18, 0x09F7


		clr r16
    634c:	00 27       	eor	r16, r16

0000634e <upd_loop>:
	upd_loop:	
		ldd XL,Z+0
    634e:	a0 81       	ld	r26, Z
		ldd XH,Z+1
    6350:	b1 81       	ldd	r27, Z+1	; 0x01
	
		add XL,YL
    6352:	ac 0f       	add	r26, r28
		adc XH,YH
    6354:	bd 1f       	adc	r27, r29

		ld r17,X	;currbgtile
    6356:	1c 91       	ld	r17, X
		std Z+2,r17
    6358:	12 83       	std	Z+2, r17	; 0x02

		cp r16,r18
    635a:	02 17       	cp	r16, r18
		brsh noov
    635c:	08 f4       	brcc	.+2      	; 0x6360 <noov>
		mov r17,r16
    635e:	10 2f       	mov	r17, r16

00006360 <noov>:
	noov:
		st X,r17
    6360:	1c 93       	st	X, r17
	
		adiw ZL,3 ;sizeof(ram_tiles_restore)
    6362:	33 96       	adiw	r30, 0x03	; 3

		inc r16
    6364:	03 95       	inc	r16
		cpi r16,RAM_TILES_COUNT
    6366:	00 31       	cpi	r16, 0x10	; 16
		brlo upd_loop ;23
    6368:	90 f3       	brcs	.-28     	; 0x634e <upd_loop>


	#if RAM_TILES_COUNT == 0 
		ldi r16,60-RAM_TILES_COUNT 
	#else
		ldi r16,61-RAM_TILES_COUNT 
    636a:	0d e2       	ldi	r16, 0x2D	; 45

0000636c <wait_loop>:
	#endif

	wait_loop:
	
		ldi r17,6
    636c:	16 e0       	ldi	r17, 0x06	; 6
		dec r17
    636e:	1a 95       	dec	r17
		brne .-4
    6370:	f1 f7       	brne	.-4      	; 0x636e <wait_loop+0x2>

		dec r16
    6372:	0a 95       	dec	r16
		brne wait_loop
    6374:	d9 f7       	brne	.-10     	; 0x636c <wait_loop>

		lds r2,overlay_tile_table
    6376:	20 90 14 09 	lds	r2, 0x0914
		lds r3,overlay_tile_table+1
    637a:	30 90 15 09 	lds	r3, 0x0915
		lds r16,tile_table_lo 
    637e:	00 91 10 09 	lds	r16, 0x0910
		lds r17,tile_table_hi
    6382:	10 91 11 09 	lds	r17, 0x0911
		movw r12,r16
    6386:	68 01       	movw	r12, r16
		movw r6,r16
    6388:	38 01       	movw	r6, r16

		ldi r24,SCREEN_TILES_V
    638a:	8c e1       	ldi	r24, 0x1C	; 28
		ldi YL,lo8(vram)
    638c:	c0 e6       	ldi	r28, 0x60	; 96
		ldi YH,hi8(vram)
    638e:	d1 e0       	ldi	r29, 0x01	; 1
		movw r8,YL	
    6390:	4e 01       	movw	r8, r28
		clr r0
    6392:	00 24       	eor	r0, r0

		;load values for overlay if it's activated (overlay_height>0)
		lds r19,overlay_height	
    6394:	30 91 13 09 	lds	r19, 0x0913
		cpi r19,0
    6398:	30 30       	cpi	r19, 0x00	; 0
		
		breq .+2
    639a:	09 f0       	breq	.+2      	; 0x639e <wait_loop+0x32>
		ldi YL,lo8(overlay_vram)
    639c:	c8 ea       	ldi	r28, 0xA8	; 168
		
		breq .+2
    639e:	09 f0       	breq	.+2      	; 0x63a2 <wait_loop+0x36>
		ldi YH,hi8(overlay_vram)
    63a0:	d4 e0       	ldi	r29, 0x04	; 4
		
		breq .+2
    63a2:	09 f0       	breq	.+2      	; 0x63a6 <wait_loop+0x3a>
		mov r24,r19
    63a4:	83 2f       	mov	r24, r19

		breq .+2
    63a6:	09 f0       	breq	.+2      	; 0x63aa <wait_loop+0x3e>
		movw r12,r2
    63a8:	61 01       	movw	r12, r2


		ldi r16,SCREEN_TILES_V*TILE_HEIGHT; total scanlines to draw (28*8)
    63aa:	00 ee       	ldi	r16, 0xE0	; 224
		mov r10,r16
    63ac:	a0 2e       	mov	r10, r16
		clr r22
    63ae:	66 27       	eor	r22, r22
		ldi r23,TILE_WIDTH ;tile width in pixels
    63b0:	78 e0       	ldi	r23, 0x08	; 8

000063b2 <next_tile_line>:
	;r12:r13= Main tile table or overlay tile table if overlay_height>0
	;r24	= vertical tiles to draw before reloading vram adress (for overlay)
	;Y      = vram or overlay_ram if overlay_height>0
	;
	next_tile_line:	
		rcall hsync_pulse
    63b2:	7d d2       	rcall	.+1274   	; 0x68ae <hsync_pulse>

		WAIT r19,250 - AUDIO_OUT_HSYNC_CYCLES + CENTER_ADJUSTMENT + FILL_DELAY
    63b4:	3c e0       	ldi	r19, 0x0C	; 12
    63b6:	3a 95       	dec	r19
    63b8:	f1 f7       	brne	.-4      	; 0x63b6 <next_tile_line+0x4>
    63ba:	00 00       	nop
    63bc:	00 00       	nop

		;***draw line***
		call render_tile_line
    63be:	0e 94 10 32 	call	0x6420	; 0x6420 <render_tile_line>

		WAIT r19,47 + FILL_DELAY - CENTER_ADJUSTMENT	
    63c2:	3f e0       	ldi	r19, 0x0F	; 15
    63c4:	3a 95       	dec	r19
    63c6:	f1 f7       	brne	.-4      	; 0x63c4 <next_tile_line+0x12>
    63c8:	00 00       	nop
    63ca:	00 00       	nop

		dec r10
    63cc:	aa 94       	dec	r10
		breq frame_end
    63ce:	a9 f0       	breq	.+42     	; 0x63fa <frame_end>
	
		inc r22
    63d0:	63 95       	inc	r22
		lpm ;3 nop
    63d2:	c8 95       	lpm

		cpi r22,TILE_HEIGHT ;last char line? 1
    63d4:	68 30       	cpi	r22, 0x08	; 8
		breq next_tile_row 
    63d6:	31 f0       	breq	.+12     	; 0x63e4 <next_tile_row>
	
		;wait to align with next_tile_row instructions (+1 cycle for the breq)
		WAIT r19,11
    63d8:	33 e0       	ldi	r19, 0x03	; 3
    63da:	3a 95       	dec	r19
    63dc:	f1 f7       	brne	.-4      	; 0x63da <next_tile_line+0x28>
    63de:	00 00       	nop
    63e0:	00 00       	nop
		
		rjmp next_tile_line	
    63e2:	e7 cf       	rjmp	.-50     	; 0x63b2 <next_tile_line>

000063e4 <next_tile_row>:

	next_tile_row:
		clr r22		;current char line			;1	
    63e4:	66 27       	eor	r22, r22

		clr r0
    63e6:	00 24       	eor	r0, r0
		ldi r19,VRAM_TILES_H
    63e8:	3e e1       	ldi	r19, 0x1E	; 30
		add YL,r19
    63ea:	c3 0f       	add	r28, r19
		adc YH,r0
    63ec:	d0 1d       	adc	r29, r0

		dec r24		;overlay done?
    63ee:	8a 95       	dec	r24
		brne .+2
    63f0:	09 f4       	brne	.+2      	; 0x63f4 <next_tile_row+0x10>
		movw YL,r8	;main vram
    63f2:	e4 01       	movw	r28, r8
		brne .+2
    63f4:	09 f4       	brne	.+2      	; 0x63f8 <next_tile_row+0x14>
		movw r12,r6	;main tile table
    63f6:	63 01       	movw	r12, r6

	
		rjmp next_tile_line
    63f8:	dc cf       	rjmp	.-72     	; 0x63b2 <next_tile_line>

000063fa <frame_end>:

	frame_end:

		WAIT r19,18
    63fa:	36 e0       	ldi	r19, 0x06	; 6
    63fc:	3a 95       	dec	r19
    63fe:	f1 f7       	brne	.-4      	; 0x63fc <frame_end+0x2>

		rcall hsync_pulse ;145
    6400:	56 d2       	rcall	.+1196   	; 0x68ae <hsync_pulse>
	
		clr r1
    6402:	11 24       	eor	r1, r1
		call RestoreBackground
    6404:	0e 94 00 41 	call	0x8200	; 0x8200 <RestoreBackground>

		;set vsync flag & flip field
		lds ZL,sync_flags
    6408:	e0 91 18 09 	lds	r30, 0x0918
		ldi r20,SYNC_FLAG_FIELD
    640c:	42 e0       	ldi	r20, 0x02	; 2
		ori ZL,SYNC_FLAG_VSYNC
    640e:	e1 60       	ori	r30, 0x01	; 1
		eor ZL,r20
    6410:	e4 27       	eor	r30, r20
		sts sync_flags,ZL
    6412:	e0 93 18 09 	sts	0x0918, r30

		;clear any pending timer int
		ldi ZL,(1<<OCF1A)
    6416:	e2 e0       	ldi	r30, 0x02	; 2
		sts _SFR_MEM_ADDR(TIFR1),ZL
    6418:	e0 93 36 00 	sts	0x0036, r30



		clr r1
    641c:	11 24       	eor	r1, r1


		ret
    641e:	08 95       	ret

00006420 <render_tile_line>:
	;*************************************************
	render_tile_line:

		;load first tile and determine if its a ROM or RAM tile

		movw XL,YL
    6420:	de 01       	movw	r26, r28

		mul r22,r23
    6422:	67 9f       	mul	r22, r23

		movw r16,r12 ;current tile table (main or overlay)
    6424:	86 01       	movw	r16, r12
		subi r16,lo8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6426:	00 50       	subi	r16, 0x00	; 0
		sbci r17,hi8(RAM_TILES_COUNT*TILE_HEIGHT*TILE_WIDTH)
    6428:	14 40       	sbci	r17, 0x04	; 4

		add r16,r0
    642a:	00 0d       	add	r16, r0
		adc r17,r1
    642c:	11 1d       	adc	r17, r1
		movw r2,r16			;rom tiles
    642e:	18 01       	movw	r2, r16

		ldi r16,lo8(ram_tiles)
    6430:	08 ed       	ldi	r16, 0xD8	; 216
		ldi r17,hi8(ram_tiles)
    6432:	14 e0       	ldi	r17, 0x04	; 4
		add r16,r0
    6434:	00 0d       	add	r16, r0
		adc r17,r1
    6436:	11 1d       	adc	r17, r1
		movw r4,r16			;ram tiles
    6438:	28 01       	movw	r4, r16

		ldi r19,TILE_HEIGHT*TILE_WIDTH
    643a:	30 e4       	ldi	r19, 0x40	; 64
		ldi r17,SCREEN_TILES_H
    643c:	1e e1       	ldi	r17, 0x1E	; 30

	    ld r18,X+     	;load next tile # from VRAM
    643e:	2d 91       	ld	r18, X+

		mul r18,r19 	;tile*width*height
    6440:	23 9f       	mul	r18, r19
		movw r20,r2		;rom tiles
    6442:	a1 01       	movw	r20, r2
		
		cpi r18,RAM_TILES_COUNT
    6444:	20 31       	cpi	r18, 0x10	; 16
		brcc .+2
    6446:	08 f4       	brcc	.+2      	; 0x644a <render_tile_line+0x2a>
		movw r20,r4		;ram tiles
    6448:	a2 01       	movw	r20, r4

	    add r0,r20    ;add title table address +row offset
    644a:	04 0e       	add	r0, r20
	    adc r1,r21
    644c:	15 1e       	adc	r1, r21

		movw ZL,r0
    644e:	f0 01       	movw	r30, r0
		
		cpi r18,RAM_TILES_COUNT
    6450:	20 31       	cpi	r18, 0x10	; 16
		brcs ramloop
    6452:	f0 f0       	brcs	.+60     	; 0x6490 <ramloop>

00006454 <romloop>:
	

	romloop:
	    lpm r16,Z+
    6454:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6456:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6458:	2d 91       	ld	r18, X+


	    lpm r16,Z+
    645a:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 2
    645c:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    645e:	23 9f       	mul	r18, r19


	    lpm r16,Z+
    6460:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 3
    6462:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT		;is tile in RAM or ROM? (RAM tiles have indexes<RAM_TILES_COUNT)
    6464:	20 31       	cpi	r18, 0x10	; 16
		nop
    6466:	00 00       	nop

	    lpm r16,Z+
    6468:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    646a:	08 b9       	out	0x08, r16	; 8
		brsh .+2		;skip in next tile is in ROM	
    646c:	08 f4       	brcc	.+2      	; 0x6470 <romloop+0x1c>
		movw r20,r4 	;load RAM title table address +row offset	
    646e:	a2 01       	movw	r20, r4
   
	    lpm r16,Z+
    6470:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 5
    6472:	08 b9       	out	0x08, r16	; 8
		add r0,r20		;add title table address +row offset lsb
    6474:	04 0e       	add	r0, r20
	    adc r1,r21		;add title table address +row offset msb
    6476:	15 1e       	adc	r1, r21

	    lpm r16,Z+
    6478:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 6
    647a:	08 b9       	out	0x08, r16	; 8
		
		cpi r18,RAM_TILES_COUNT	
    647c:	20 31       	cpi	r18, 0x10	; 16
		dec r17			;decrement tiles to draw on line
    647e:	1a 95       	dec	r17
   
	    lpm r16,Z+
    6480:	05 91       	lpm	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 7   
    6482:	08 b9       	out	0x08, r16	; 8
	    lpm r16,Z+
    6484:	05 91       	lpm	r16, Z+

		breq end	
    6486:	31 f1       	breq	.+76     	; 0x64d4 <end>
	    movw ZL,r0   	;copy next tile adress
    6488:	f0 01       	movw	r30, r0

	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    648a:	08 b9       	out	0x08, r16	; 8
	    brcc romloop
    648c:	18 f7       	brcc	.-58     	; 0x6454 <romloop>
	
		rjmp .
    648e:	00 c0       	rjmp	.+0      	; 0x6490 <ramloop>

00006490 <ramloop>:

	ramloop:

	    ld r16,Z+
    6490:	01 91       	ld	r16, Z+
	    out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 1
    6492:	08 b9       	out	0x08, r16	; 8
	    ld r18,X+     ;load next tile # from VRAM
    6494:	2d 91       	ld	r18, X+

	    ld r16,Z+ 
    6496:	01 91       	ld	r16, Z+
		nop   
    6498:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16 		;pixel 2
    649a:	08 b9       	out	0x08, r16	; 8
		mul r18,r19 ;tile*width*height
    649c:	23 9f       	mul	r18, r19


	    ld r16,Z+
    649e:	01 91       	ld	r16, Z+
		nop
    64a0:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16         ;pixel 3
    64a2:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    64a4:	20 31       	cpi	r18, 0x10	; 16
   		rjmp .
    64a6:	00 c0       	rjmp	.+0      	; 0x64a8 <ramloop+0x18>

	    ld r16,Z+
    64a8:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 4
    64aa:	08 b9       	out	0x08, r16	; 8
		brcs .+2 
    64ac:	08 f0       	brcs	.+2      	; 0x64b0 <ramloop+0x20>
		movw r20,r2 	;ROM title table address +row offset	
    64ae:	a1 01       	movw	r20, r2
   
   
	    ld r16,Z+
    64b0:	01 91       	ld	r16, Z+
	    add r0,r20    ;add title table address +row offset
    64b2:	04 0e       	add	r0, r20
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 5
    64b4:	08 b9       	out	0x08, r16	; 8
	    adc r1,r21
    64b6:	15 1e       	adc	r1, r21
		rjmp .
    64b8:	00 c0       	rjmp	.+0      	; 0x64ba <ramloop+0x2a>
    
		ld r16,Z+		
    64ba:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16       ;pixel 6
    64bc:	08 b9       	out	0x08, r16	; 8
		cpi r18,RAM_TILES_COUNT
    64be:	20 31       	cpi	r18, 0x10	; 16
		rjmp .  
    64c0:	00 c0       	rjmp	.+0      	; 0x64c2 <ramloop+0x32>

	    ld r16,Z+	
    64c2:	01 91       	ld	r16, Z+
		out _SFR_IO_ADDR(DATA_PORT),r16      ;pixel 7   
    64c4:	08 b9       	out	0x08, r16	; 8
	    ld r16,Z+
    64c6:	01 91       	ld	r16, Z+

	    dec r17
    64c8:	1a 95       	dec	r17
	    breq end
    64ca:	21 f0       	breq	.+8      	; 0x64d4 <end>
	
		movw ZL,r0
    64cc:	f0 01       	movw	r30, r0
		out _SFR_IO_ADDR(DATA_PORT),r16        ;pixel 8   
    64ce:	08 b9       	out	0x08, r16	; 8
	
	    brcc romloop
    64d0:	08 f6       	brcc	.-126    	; 0x6454 <romloop>
		rjmp ramloop
    64d2:	de cf       	rjmp	.-68     	; 0x6490 <ramloop>

000064d4 <end>:
	
	end:
		out _SFR_IO_ADDR(DATA_PORT),r16  	;pixel 8
    64d4:	08 b9       	out	0x08, r16	; 8
		clr r16	
    64d6:	00 27       	eor	r16, r16
		lpm	
    64d8:	c8 95       	lpm
		nop
    64da:	00 00       	nop
		out _SFR_IO_ADDR(DATA_PORT),r16        
    64dc:	08 b9       	out	0x08, r16	; 8

		ret
    64de:	08 95       	ret

000064e0 <CopyTileToRam>:
		px=pgm_read_byte(src++);
		*dest++=px;
	}
*/

	ldi r18,TILE_HEIGHT*TILE_WIDTH
    64e0:	20 e4       	ldi	r18, 0x40	; 64

	;compute source adress
	lds ZL,tile_table_lo
    64e2:	e0 91 10 09 	lds	r30, 0x0910
	lds ZH,tile_table_hi
    64e6:	f0 91 11 09 	lds	r31, 0x0911
	;andi r24,0x7f
	subi r24,RAM_TILES_COUNT
    64ea:	80 51       	subi	r24, 0x10	; 16
	mul r24,r18
    64ec:	82 9f       	mul	r24, r18
	add ZL,r0
    64ee:	e0 0d       	add	r30, r0
	adc ZH,r1
    64f0:	f1 1d       	adc	r31, r1

	;compute destination adress
	ldi XL,lo8(ram_tiles)
    64f2:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    64f4:	b4 e0       	ldi	r27, 0x04	; 4
	mul r22,r18
    64f6:	62 9f       	mul	r22, r18
	add XL,r0
    64f8:	a0 0d       	add	r26, r0
	adc XH,r1
    64fa:	b1 1d       	adc	r27, r1

	clr r0
    64fc:	00 24       	eor	r0, r0
	;copy data (fastest possible)
.rept TILE_HEIGHT*TILE_WIDTH
	lpm r0,Z+	
	st X+,r0
.endr
    64fe:	05 90       	lpm	r0, Z+
    6500:	0d 92       	st	X+, r0
    6502:	05 90       	lpm	r0, Z+
    6504:	0d 92       	st	X+, r0
    6506:	05 90       	lpm	r0, Z+
    6508:	0d 92       	st	X+, r0
    650a:	05 90       	lpm	r0, Z+
    650c:	0d 92       	st	X+, r0
    650e:	05 90       	lpm	r0, Z+
    6510:	0d 92       	st	X+, r0
    6512:	05 90       	lpm	r0, Z+
    6514:	0d 92       	st	X+, r0
    6516:	05 90       	lpm	r0, Z+
    6518:	0d 92       	st	X+, r0
    651a:	05 90       	lpm	r0, Z+
    651c:	0d 92       	st	X+, r0
    651e:	05 90       	lpm	r0, Z+
    6520:	0d 92       	st	X+, r0
    6522:	05 90       	lpm	r0, Z+
    6524:	0d 92       	st	X+, r0
    6526:	05 90       	lpm	r0, Z+
    6528:	0d 92       	st	X+, r0
    652a:	05 90       	lpm	r0, Z+
    652c:	0d 92       	st	X+, r0
    652e:	05 90       	lpm	r0, Z+
    6530:	0d 92       	st	X+, r0
    6532:	05 90       	lpm	r0, Z+
    6534:	0d 92       	st	X+, r0
    6536:	05 90       	lpm	r0, Z+
    6538:	0d 92       	st	X+, r0
    653a:	05 90       	lpm	r0, Z+
    653c:	0d 92       	st	X+, r0
    653e:	05 90       	lpm	r0, Z+
    6540:	0d 92       	st	X+, r0
    6542:	05 90       	lpm	r0, Z+
    6544:	0d 92       	st	X+, r0
    6546:	05 90       	lpm	r0, Z+
    6548:	0d 92       	st	X+, r0
    654a:	05 90       	lpm	r0, Z+
    654c:	0d 92       	st	X+, r0
    654e:	05 90       	lpm	r0, Z+
    6550:	0d 92       	st	X+, r0
    6552:	05 90       	lpm	r0, Z+
    6554:	0d 92       	st	X+, r0
    6556:	05 90       	lpm	r0, Z+
    6558:	0d 92       	st	X+, r0
    655a:	05 90       	lpm	r0, Z+
    655c:	0d 92       	st	X+, r0
    655e:	05 90       	lpm	r0, Z+
    6560:	0d 92       	st	X+, r0
    6562:	05 90       	lpm	r0, Z+
    6564:	0d 92       	st	X+, r0
    6566:	05 90       	lpm	r0, Z+
    6568:	0d 92       	st	X+, r0
    656a:	05 90       	lpm	r0, Z+
    656c:	0d 92       	st	X+, r0
    656e:	05 90       	lpm	r0, Z+
    6570:	0d 92       	st	X+, r0
    6572:	05 90       	lpm	r0, Z+
    6574:	0d 92       	st	X+, r0
    6576:	05 90       	lpm	r0, Z+
    6578:	0d 92       	st	X+, r0
    657a:	05 90       	lpm	r0, Z+
    657c:	0d 92       	st	X+, r0
    657e:	05 90       	lpm	r0, Z+
    6580:	0d 92       	st	X+, r0
    6582:	05 90       	lpm	r0, Z+
    6584:	0d 92       	st	X+, r0
    6586:	05 90       	lpm	r0, Z+
    6588:	0d 92       	st	X+, r0
    658a:	05 90       	lpm	r0, Z+
    658c:	0d 92       	st	X+, r0
    658e:	05 90       	lpm	r0, Z+
    6590:	0d 92       	st	X+, r0
    6592:	05 90       	lpm	r0, Z+
    6594:	0d 92       	st	X+, r0
    6596:	05 90       	lpm	r0, Z+
    6598:	0d 92       	st	X+, r0
    659a:	05 90       	lpm	r0, Z+
    659c:	0d 92       	st	X+, r0
    659e:	05 90       	lpm	r0, Z+
    65a0:	0d 92       	st	X+, r0
    65a2:	05 90       	lpm	r0, Z+
    65a4:	0d 92       	st	X+, r0
    65a6:	05 90       	lpm	r0, Z+
    65a8:	0d 92       	st	X+, r0
    65aa:	05 90       	lpm	r0, Z+
    65ac:	0d 92       	st	X+, r0
    65ae:	05 90       	lpm	r0, Z+
    65b0:	0d 92       	st	X+, r0
    65b2:	05 90       	lpm	r0, Z+
    65b4:	0d 92       	st	X+, r0
    65b6:	05 90       	lpm	r0, Z+
    65b8:	0d 92       	st	X+, r0
    65ba:	05 90       	lpm	r0, Z+
    65bc:	0d 92       	st	X+, r0
    65be:	05 90       	lpm	r0, Z+
    65c0:	0d 92       	st	X+, r0
    65c2:	05 90       	lpm	r0, Z+
    65c4:	0d 92       	st	X+, r0
    65c6:	05 90       	lpm	r0, Z+
    65c8:	0d 92       	st	X+, r0
    65ca:	05 90       	lpm	r0, Z+
    65cc:	0d 92       	st	X+, r0
    65ce:	05 90       	lpm	r0, Z+
    65d0:	0d 92       	st	X+, r0
    65d2:	05 90       	lpm	r0, Z+
    65d4:	0d 92       	st	X+, r0
    65d6:	05 90       	lpm	r0, Z+
    65d8:	0d 92       	st	X+, r0
    65da:	05 90       	lpm	r0, Z+
    65dc:	0d 92       	st	X+, r0
    65de:	05 90       	lpm	r0, Z+
    65e0:	0d 92       	st	X+, r0
    65e2:	05 90       	lpm	r0, Z+
    65e4:	0d 92       	st	X+, r0
    65e6:	05 90       	lpm	r0, Z+
    65e8:	0d 92       	st	X+, r0
    65ea:	05 90       	lpm	r0, Z+
    65ec:	0d 92       	st	X+, r0
    65ee:	05 90       	lpm	r0, Z+
    65f0:	0d 92       	st	X+, r0
    65f2:	05 90       	lpm	r0, Z+
    65f4:	0d 92       	st	X+, r0
    65f6:	05 90       	lpm	r0, Z+
    65f8:	0d 92       	st	X+, r0
    65fa:	05 90       	lpm	r0, Z+
    65fc:	0d 92       	st	X+, r0


	clr r1
    65fe:	11 24       	eor	r1, r1
	ret
    6600:	08 95       	ret

00006602 <BlitSprite>:
; r22=RAM tile index (bt)
; r21:r20=Y:X
; r19:r18=DY:DX
;************************************
BlitSprite:
	push r16
    6602:	0f 93       	push	r16
	push r17
    6604:	1f 93       	push	r17
	push YL
    6606:	cf 93       	push	r28
	push YH
    6608:	df 93       	push	r29

	;src=sprites_tiletable_lo+(sprites[i].tileIndex*TILE_HEIGHT*TILE_WIDTH)
	ldi r25,SPRITE_STRUCT_SIZE
    660a:	94 e0       	ldi	r25, 0x04	; 4
	mul r24,r25
    660c:	89 9f       	mul	r24, r25

	ldi ZL,lo8(sprites)	
    660e:	e8 ea       	ldi	r30, 0xA8	; 168
	ldi ZH,hi8(sprites)	
    6610:	f4 e0       	ldi	r31, 0x04	; 4
	add ZL,r0
    6612:	e0 0d       	add	r30, r0
	adc ZH,r1
    6614:	f1 1d       	adc	r31, r1

	ldd r16,Z+sprFlags
    6616:	03 81       	ldd	r16, Z+3	; 0x03

	;8x16 multiply
	ldd r24,Z+sprTileIndex
    6618:	82 81       	ldd	r24, Z+2	; 0x02
	ldi r30,TILE_WIDTH*TILE_HEIGHT
    661a:	e0 e4       	ldi	r30, 0x40	; 64
	mul r24,r30
    661c:	8e 9f       	mul	r24, r30
	movw r26,r0
    661e:	d0 01       	movw	r26, r0
	
	;get tile bank addr
	ldi r25,4*2
    6620:	98 e0       	ldi	r25, 0x08	; 8
	mul r16,r25
    6622:	09 9f       	mul	r16, r25
	ldi YL,lo8(sprites_tile_banks)	
    6624:	c8 e0       	ldi	r28, 0x08	; 8
	ldi YH,hi8(sprites_tile_banks)	
    6626:	d9 e0       	ldi	r29, 0x09	; 9
	clr r0
    6628:	00 24       	eor	r0, r0
	add YL,r1
    662a:	c1 0d       	add	r28, r1
	adc YH,r0		
    662c:	d0 1d       	adc	r29, r0
	ldd ZL,Y+0
    662e:	e8 81       	ld	r30, Y
	ldd ZH,Y+1
    6630:	f9 81       	ldd	r31, Y+1	; 0x01
	add ZL,r26	;tile data src
    6632:	ea 0f       	add	r30, r26
	adc ZH,r27
    6634:	fb 1f       	adc	r31, r27
	
	;dest=ram_tiles+(bt*TILE_HEIGHT*TILE_WIDTH)
	ldi XL,lo8(ram_tiles)	
    6636:	a8 ed       	ldi	r26, 0xD8	; 216
	ldi XH,hi8(ram_tiles)
    6638:	b4 e0       	ldi	r27, 0x04	; 4
	ldi r25,TILE_WIDTH*TILE_HEIGHT
    663a:	90 e4       	ldi	r25, 0x40	; 64
	mul r22,r25
    663c:	69 9f       	mul	r22, r25
	add XL,r0
    663e:	a0 0d       	add	r26, r0
	adc XH,r1
    6640:	b1 1d       	adc	r27, r1
			srcXdiff=destXdiff;
			src+=destXdiff;
		}
	}
	*/
	clr r1
    6642:	11 24       	eor	r1, r1
	clr YH		;hi8(srcXdiff)
    6644:	dd 27       	eor	r29, r29

	cpi r20,0	
    6646:	40 30       	cpi	r20, 0x00	; 0
	brne x_2nd_tile
    6648:	51 f4       	brne	.+20     	; 0x665e <x_2nd_tile>
	
	add XL,r18	;dest+=dx
    664a:	a2 0f       	add	r26, r18
	adc XH,r1
    664c:	b1 1d       	adc	r27, r1
	mov r24,r18	;destXdiff=dx
    664e:	82 2f       	mov	r24, r18
	mov YL,r18	;srcXdiff=dx
    6650:	c2 2f       	mov	r28, r18

	sbrs r16,SPRITE_FLIP_X_BIT
    6652:	00 ff       	sbrs	r16, 0
	rjmp x_check_end
    6654:	11 c0       	rjmp	.+34     	; 0x6678 <x_check_end>

	adiw ZL,(TILE_WIDTH-1)	;src+=7
    6656:	37 96       	adiw	r30, 0x07	; 7
	ldi YL,TILE_WIDTH*2		;srcXdiff=((TILE_WIDTH*2)-dx);
    6658:	c0 e1       	ldi	r28, 0x10	; 16
	sub YL,r18	
    665a:	c2 1b       	sub	r28, r18
	rjmp x_check_end
    665c:	0d c0       	rjmp	.+26     	; 0x6678 <x_check_end>

0000665e <x_2nd_tile>:

x_2nd_tile:
	ldi r24,TILE_WIDTH
    665e:	88 e0       	ldi	r24, 0x08	; 8
	sub r24,r18		;8-DX = xdiff for dest
    6660:	82 1b       	sub	r24, r18

	sbrc r16,SPRITE_FLIP_X_BIT
    6662:	00 fd       	sbrc	r16, 0
	rjmp x2_flip_x
    6664:	04 c0       	rjmp	.+8      	; 0x666e <x2_flip_x>

	mov YL,r24		;srcXdiff=destXdiff;
    6666:	c8 2f       	mov	r28, r24
	add ZL,r24		;src+=destXdiff;
    6668:	e8 0f       	add	r30, r24
	adc ZH,r1	
    666a:	f1 1d       	adc	r31, r1
	rjmp x_check_end
    666c:	05 c0       	rjmp	.+10     	; 0x6678 <x_check_end>

0000666e <x2_flip_x>:

x2_flip_x:
	ldi YL,TILE_WIDTH
    666e:	c8 e0       	ldi	r28, 0x08	; 8
	add YL,r18		;srcXdiff=TILE_WIDTH+dx;	
    6670:	c2 0f       	add	r28, r18
	add ZL,r18		;src+=dx;
    6672:	e2 0f       	add	r30, r18
	adc ZH,r1
    6674:	f1 1d       	adc	r31, r1
	sbiw ZL,1		;src--;
    6676:	31 97       	sbiw	r30, 0x01	; 1

00006678 <x_check_end>:
		}else{
			src+=(ydiff*TILE_WIDTH);
		}
	}
	*/
	cpi r21,0
    6678:	50 30       	cpi	r21, 0x00	; 0
	brne y_2nd_tile
    667a:	41 f4       	brne	.+16     	; 0x668c <y_2nd_tile>

	ldi r25,TILE_WIDTH	;dest+=(dy*TILE_WIDTH)
    667c:	98 e0       	ldi	r25, 0x08	; 8
	mul r25,r19			
    667e:	93 9f       	mul	r25, r19
	add XL,r0
    6680:	a0 0d       	add	r26, r0
	adc XH,r1
    6682:	b1 1d       	adc	r27, r1

	mov r25,r19			;ydiff=dy
    6684:	93 2f       	mov	r25, r19

	sbrc r16,SPRITE_FLIP_Y_BIT
    6686:	01 fd       	sbrc	r16, 1
	adiw ZL,(TILE_WIDTH*(TILE_HEIGHT-1))	;src+=(TILE_WIDTH*(TILE_HEIGHT-1));		
    6688:	f8 96       	adiw	r30, 0x38	; 56

	rjmp y_check_end
    668a:	0a c0       	rjmp	.+20     	; 0x66a0 <y_check_end>

0000668c <y_2nd_tile>:

y_2nd_tile:
	ldi r25,TILE_HEIGHT	;ydiff=(TILE_HEIGHT-dy)
    668c:	98 e0       	ldi	r25, 0x08	; 8
	sub r25,r19	
    668e:	93 1b       	sub	r25, r19
	
	mov r22,r19			;temp=dy-1
    6690:	63 2f       	mov	r22, r19
	dec r22
    6692:	6a 95       	dec	r22
	sbrs r16,SPRITE_FLIP_Y_BIT
    6694:	01 ff       	sbrs	r16, 1
	mov r22,r25			;temp=ydiff
    6696:	69 2f       	mov	r22, r25

	ldi r21,TILE_WIDTH	;src+=(temp*TILE_WIDTH);
    6698:	58 e0       	ldi	r21, 0x08	; 8
	mul r21,r22
    669a:	56 9f       	mul	r21, r22
	add ZL,r0
    669c:	e0 0d       	add	r30, r0
	adc ZH,r1	
    669e:	f1 1d       	adc	r31, r1

000066a0 <y_check_end>:
y_check_end:	
	
	//if(flags&SPRITE_FLIP_X){
	//	step=-1;
	//}
	ser r22		;step=-1
    66a0:	6f ef       	ldi	r22, 0xFF	; 255
	ser r23
    66a2:	7f ef       	ldi	r23, 0xFF	; 255
	sbrs r16,SPRITE_FLIP_X_BIT
    66a4:	00 ff       	sbrs	r16, 0
	ldi r22,1	;step=1
    66a6:	61 e0       	ldi	r22, 0x01	; 1
	sbrs r16,SPRITE_FLIP_X_BIT
    66a8:	00 ff       	sbrs	r16, 0
	clr r23
    66aa:	77 27       	eor	r23, r23

	//if(flags&SPRITE_FLIP_Y){
	//	srcXdiff-=(TILE_WIDTH*2);
	//}
	sbrc r16,SPRITE_FLIP_Y_BIT
    66ac:	01 fd       	sbrc	r16, 1
	sbiw YL,(TILE_WIDTH*2)
    66ae:	60 97       	sbiw	r28, 0x10	; 16
	;r24	= destXdiff
	;r25	= ydiff
	;X		= dest
	;Y		= srcXdiff
	;Z		= src
	clr r1
    66b0:	11 24       	eor	r1, r1
	ldi r19,TRANSLUCENT_COLOR
    66b2:	3e ef       	ldi	r19, 0xFE	; 254

	ldi r21,TILE_HEIGHT
    66b4:	58 e0       	ldi	r21, 0x08	; 8
	sub r21,r25 	;yspan=(TILE_HEIGHT-ydiff)
    66b6:	59 1b       	sub	r21, r25

000066b8 <y_loop>:

y_loop:
	ldi r20,TILE_WIDTH
    66b8:	48 e0       	ldi	r20, 0x08	; 8
	sub r20,r24 	;xspan=(TILE_WIDTH-destXdiff)
    66ba:	48 1b       	sub	r20, r24

000066bc <x_loop>:

x_loop:
	lpm r18,Z		;px=pgm_read_byte(src);
    66bc:	24 91       	lpm	r18, Z
	cpse r18,r19	;if(px!=TRANSLUCENT_COLOR)
    66be:	23 13       	cpse	r18, r19
	st X,r18		;*dest=px;
    66c0:	2c 93       	st	X, r18
	adiw XL,1
    66c2:	11 96       	adiw	r26, 0x01	; 1
	add ZL,r22		;src+=step;
    66c4:	e6 0f       	add	r30, r22
	adc ZH,r23
    66c6:	f7 1f       	adc	r31, r23
	dec r20
    66c8:	4a 95       	dec	r20
	brne x_loop
    66ca:	c1 f7       	brne	.-16     	; 0x66bc <x_loop>

	add ZL,YL		;src+=srcXdiff
    66cc:	ec 0f       	add	r30, r28
	adc ZH,YH
    66ce:	fd 1f       	adc	r31, r29
	add XL,r24		;dest+=destXdiff
    66d0:	a8 0f       	add	r26, r24
	adc XH,r1
    66d2:	b1 1d       	adc	r27, r1
	dec r21
    66d4:	5a 95       	dec	r21
	brne y_loop
    66d6:	81 f7       	brne	.-32     	; 0x66b8 <y_loop>


	pop YH
    66d8:	df 91       	pop	r29
	pop YL
    66da:	cf 91       	pop	r28
	pop r17
    66dc:	1f 91       	pop	r17
	pop r16
    66de:	0f 91       	pop	r16
	ret
    66e0:	08 95       	ret

000066e2 <__vector_13>:

;***************************************************************************
; Main Video sync interrupt
;***************************************************************************
TIMER1_COMPA_vect:
	push r0
    66e2:	0f 92       	push	r0
	push r1
    66e4:	1f 92       	push	r1
	push ZL;2
    66e6:	ef 93       	push	r30
	push ZH;2
    66e8:	ff 93       	push	r31
	
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    66ea:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    66ec:	ef 93       	push	r30

	;Read timer offset since rollover to remove cycles 
	;and conpensate for interrupt latency.
	;This is nessesary to eliminate frame jitter.
	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    66ee:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,0x12 ;MIN_INT_LATENCY
    66f2:	e2 51       	subi	r30, 0x12	; 18

	ldi ZH,1
    66f4:	f1 e0       	ldi	r31, 0x01	; 1

000066f6 <latency_loop>:
latency_loop:
	cp ZL,ZH
    66f6:	ef 17       	cp	r30, r31
	brlo .		;advance PC to next instruction	
    66f8:	00 f0       	brcs	.+0      	; 0x66fa <latency_loop+0x4>
	inc ZH
    66fa:	f3 95       	inc	r31
	cpi ZH,10
    66fc:	fa 30       	cpi	r31, 0x0A	; 10
	brlo latency_loop
    66fe:	d8 f3       	brcs	.-10     	; 0x66f6 <latency_loop>
	jmp .
    6700:	0c 94 82 33 	jmp	0x6704	; 0x6704 <latency_loop+0xe>
	
	;increment sync pulse counter
	lds ZL,sync_pulse
    6704:	e0 91 17 09 	lds	r30, 0x0917
	dec ZL
    6708:	ea 95       	dec	r30
	sts sync_pulse,ZL
    670a:	e0 93 17 09 	sts	0x0917, r30

	;process sync phases
	lds ZH,sync_phase
    670e:	f0 91 16 09 	lds	r31, 0x0916
	sbrc ZH,0
    6712:	f0 fd       	sbrc	r31, 0
	rjmp sync_hsync
    6714:	57 c0       	rjmp	.+174    	; 0x67c4 <sync_hsync>
; Note: TCNT1 should be equal to 
; 0x68 on the cbi
; 0xAC on the sbi
; pulse duration: 68 clocks
;***************************************************		
	cpi ZL,SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6716:	ec 30       	cpi	r30, 0x0C	; 12
	brlo sync_eq
    6718:	98 f0       	brcs	.+38     	; 0x6740 <sync_eq>

	;Set HDRIVE to double rate during VSYNC
	ldi ZH,hi8(HDRIVE_CL_TWICE)
    671a:	f3 e0       	ldi	r31, 0x03	; 3
	sts _SFR_MEM_ADDR(OCR1AH),ZH	
    671c:	f0 93 89 00 	sts	0x0089, r31
	ldi ZH,lo8(HDRIVE_CL_TWICE)
    6720:	fd e8       	ldi	r31, 0x8D	; 141
	sts _SFR_MEM_ADDR(OCR1AL),ZH
    6722:	f0 93 88 00 	sts	0x0088, r31

	bst ZL,0
    6726:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0x68
    6728:	28 98       	cbi	0x05, 0	; 5
	brtc sync_pre_eq_no_sound_update
    672a:	26 f4       	brtc	.+8      	; 0x6734 <sync_pre_eq_no_sound_update>
	ldi ZL,1	;indicate update_sound to generate the SBI for pre-eq
    672c:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    672e:	0e 94 68 34 	call	0x68d0	; 0x68d0 <update_sound>
	rjmp sync_end
    6732:	b6 c0       	rjmp	.+364    	; 0x68a0 <sync_end>

00006734 <sync_pre_eq_no_sound_update>:

sync_pre_eq_no_sound_update:
	WAIT ZL,64
    6734:	e5 e1       	ldi	r30, 0x15	; 21
    6736:	ea 95       	dec	r30
    6738:	f1 f7       	brne	.-4      	; 0x6736 <sync_pre_eq_no_sound_update+0x2>
    673a:	00 00       	nop
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    673c:	28 9a       	sbi	0x05, 0	; 5
		
	rjmp sync_end
    673e:	b0 c0       	rjmp	.+352    	; 0x68a0 <sync_end>

00006740 <sync_eq>:
; 0x68  on the cbi
; 0x36E on the sbi
; low pulse duration: 774 clocks
;***************************************************	
sync_eq:
	cpi ZL,SYNC_POST_EQ_PULSES
    6740:	e6 30       	cpi	r30, 0x06	; 6
	brlo sync_post_eq
    6742:	38 f1       	brcs	.+78     	; 0x6792 <sync_post_eq>

	rjmp .
    6744:	00 c0       	rjmp	.+0      	; 0x6746 <sync_eq+0x6>
	rjmp .
    6746:	00 c0       	rjmp	.+0      	; 0x6748 <sync_eq+0x8>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6748:	28 98       	cbi	0x05, 0	; 5

	bst ZL,0
    674a:	e0 fb       	bst	r30, 0
	ldi ZL,4
    674c:	e4 e0       	ldi	r30, 0x04	; 4
	brtc sync_eq_skip
    674e:	16 f4       	brtc	.+4      	; 0x6754 <sync_eq_skip>
	
	call update_sound
    6750:	0e 94 68 34 	call	0x68d0	; 0x68d0 <update_sound>

00006754 <sync_eq_skip>:
	;enable interupt to bring back sync 
	;level instead of wasting cycles
	;in a big wait loop

 	;clear interrupt flag
	ldi ZL,(1<<OCF1B)
    6754:	e4 e0       	ldi	r30, 0x04	; 4
	sts _SFR_MEM_ADDR(TIFR1),ZL 
    6756:	e0 93 36 00 	sts	0x0036, r30
	
	;generate interrupt on match
	;for timer1 compare unit b
	ldi ZL,(1<<OCIE1A)+(1<<OCIE1B)
    675a:	e6 e0       	ldi	r30, 0x06	; 6
	sts _SFR_MEM_ADDR(TIMSK1),ZL
    675c:	e0 93 6f 00 	sts	0x006F, r30

	rjmp sync_end
    6760:	9f c0       	rjmp	.+318    	; 0x68a0 <sync_end>

00006762 <__vector_14>:
; during VSYNC EQ pulses to recover ~5000 cycles per field
; with interrupt latency conpensation
; 37 cycles
;**********************************************************	
TIMER1_COMPB_vect:
	push ZL
    6762:	ef 93       	push	r30
	;save flags & status register
	in ZL,_SFR_IO_ADDR(SREG);1
    6764:	ef b7       	in	r30, 0x3f	; 63
	push ZL ;2		
    6766:	ef 93       	push	r30

	lds ZL,_SFR_MEM_ADDR(TCNT1L)
    6768:	e0 91 84 00 	lds	r30, 0x0084
	subi ZL,62+31 ;0x5D ;MIN_INT_LATENCY
    676c:	ed 55       	subi	r30, 0x5D	; 93

	cpi ZL,1
    676e:	e1 30       	cpi	r30, 0x01	; 1
	brlo .		;advance PC to next instruction
    6770:	00 f0       	brcs	.+0      	; 0x6772 <__vector_14+0x10>

	cpi ZL,2
    6772:	e2 30       	cpi	r30, 0x02	; 2
	brlo .		;advance PC to next instruction
    6774:	00 f0       	brcs	.+0      	; 0x6776 <__vector_14+0x14>

	cpi ZL,3
    6776:	e3 30       	cpi	r30, 0x03	; 3
	brlo .		;advance PC to next instruction
    6778:	00 f0       	brcs	.+0      	; 0x677a <__vector_14+0x18>

	cpi ZL,4
    677a:	e4 30       	cpi	r30, 0x04	; 4
	brlo .		;advance PC to next instruction
    677c:	00 f0       	brcs	.+0      	; 0x677e <__vector_14+0x1c>

	cpi ZL,5
    677e:	e5 30       	cpi	r30, 0x05	; 5
	brlo .		;advance PC to next instruction
    6780:	00 f0       	brcs	.+0      	; 0x6782 <__vector_14+0x20>

 	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;68
    6782:	28 9a       	sbi	0x05, 0	; 5
	ldi ZL,(1<<OCIE1A) ; disable OCIE1B 
    6784:	e2 e0       	ldi	r30, 0x02	; 2
	sts _SFR_MEM_ADDR(TIMSK1),ZL ;stop generate interrupt on match
    6786:	e0 93 6f 00 	sts	0x006F, r30
	
	;restore flags
	pop ZL
    678a:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL	
    678c:	ef bf       	out	0x3f, r30	; 63
	pop ZL
    678e:	ef 91       	pop	r30
	reti
    6790:	18 95       	reti

00006792 <sync_post_eq>:
; 0x68 on the cbi
; 0xAC on the sbi
; pulse cycles: 68 clocks
;***************************************************	
sync_post_eq:	
	rjmp .
    6792:	00 c0       	rjmp	.+0      	; 0x6794 <sync_post_eq+0x2>

	bst ZL,0
    6794:	e0 fb       	bst	r30, 0
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    6796:	28 98       	cbi	0x05, 0	; 5
	brtc sync_post_eq_no_sound_update
    6798:	26 f4       	brtc	.+8      	; 0x67a2 <sync_post_eq_no_sound_update>
	ldi ZL,1	
    679a:	e1 e0       	ldi	r30, 0x01	; 1
	call update_sound
    679c:	0e 94 68 34 	call	0x68d0	; 0x68d0 <update_sound>
	rjmp sync_pre_eq_cont
    67a0:	05 c0       	rjmp	.+10     	; 0x67ac <sync_pre_eq_cont>

000067a2 <sync_post_eq_no_sound_update>:

sync_post_eq_no_sound_update:
	WAIT ZL,64
    67a2:	e5 e1       	ldi	r30, 0x15	; 21
    67a4:	ea 95       	dec	r30
    67a6:	f1 f7       	brne	.-4      	; 0x67a4 <sync_post_eq_no_sound_update+0x2>
    67a8:	00 00       	nop

	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN 
    67aa:	28 9a       	sbi	0x05, 0	; 5

000067ac <sync_pre_eq_cont>:

sync_pre_eq_cont:	
	;check if it's the last vsync pulse
	lds ZL,sync_pulse
    67ac:	e0 91 17 09 	lds	r30, 0x0917
	cpi ZL,0
    67b0:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2 ;skip rjmp
    67b2:	09 f0       	breq	.+2      	; 0x67b6 <sync_pre_eq_cont+0xa>
	rjmp sync_end
    67b4:	75 c0       	rjmp	.+234    	; 0x68a0 <sync_end>
	
	;update sync flags
	ldi ZL,SYNC_HSYNC_PULSES
    67b6:	ed ef       	ldi	r30, 0xFD	; 253
	sts sync_pulse,ZL
    67b8:	e0 93 17 09 	sts	0x0917, r30
	ldi ZL,1
    67bc:	e1 e0       	ldi	r30, 0x01	; 1
	sts sync_phase,ZL
    67be:	e0 93 16 09 	sts	0x0916, r30
	
	rjmp sync_end
    67c2:	6e c0       	rjmp	.+220    	; 0x68a0 <sync_end>

000067c4 <sync_hsync>:
; 0xF0 on the sbi
; pulse duration: 136 clocks
;***************************************************	

	; Set HDRIVE to normal rate
	ldi ZL,hi8(HDRIVE_CL)
    67c4:	e7 e0       	ldi	r30, 0x07	; 7
	sts _SFR_MEM_ADDR(OCR1AH),ZL	
    67c6:	e0 93 89 00 	sts	0x0089, r30
	ldi ZL,lo8(HDRIVE_CL)
    67ca:	eb e1       	ldi	r30, 0x1B	; 27
	sts _SFR_MEM_ADDR(OCR1AL),ZL
    67cc:	e0 93 88 00 	sts	0x0088, r30
	rjmp .
    67d0:	00 c0       	rjmp	.+0      	; 0x67d2 <sync_hsync+0xe>

	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    67d2:	28 98       	cbi	0x05, 0	; 5
	
	ldi ZL,2	;indicate update_sound to generate the SBI for pre-eq
    67d4:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    67d6:	00 c0       	rjmp	.+0      	; 0x67d8 <sync_hsync+0x14>
	call update_sound
    67d8:	0e 94 68 34 	call	0x68d0	; 0x68d0 <update_sound>

	;check if we have reached the first line to render
	ldi ZH,SYNC_HSYNC_PULSES
    67dc:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    67de:	00 90 1d 09 	lds	r0, 0x091D
	sub ZH,r0				
    67e2:	f0 19       	sub	r31, r0
	lds ZL,sync_pulse
    67e4:	e0 91 17 09 	lds	r30, 0x0917
	cp ZL,ZH
    67e8:	ef 17       	cp	r30, r31
	brsh no_render
    67ea:	d0 f4       	brcc	.+52     	; 0x6820 <no_render>

	ldi ZH,SYNC_HSYNC_PULSES
    67ec:	fd ef       	ldi	r31, 0xFD	; 253
	lds r0,first_render_line
    67ee:	00 90 1d 09 	lds	r0, 0x091D
	sub ZH,r0				
    67f2:	f0 19       	sub	r31, r0
	lds r0,render_lines_count
    67f4:	00 90 1e 09 	lds	r0, 0x091E
	sub ZH,r0			
    67f8:	f0 19       	sub	r31, r0
	cp ZL,ZH
    67fa:	ef 17       	cp	r30, r31
	brlo no_render
    67fc:	88 f0       	brcs	.+34     	; 0x6820 <no_render>

	;push r1-r29
	ldi ZL,29
    67fe:	ed e1       	ldi	r30, 0x1D	; 29
	clr ZH
    6800:	ff 27       	eor	r31, r31

00006802 <push_loop>:
push_loop:
	ld r0,Z	;load value from register file
    6802:	00 80       	ld	r0, Z
	push r0
    6804:	0f 92       	push	r0
	dec ZL
    6806:	ea 95       	dec	r30
	brne push_loop	
    6808:	e1 f7       	brne	.-8      	; 0x6802 <push_loop>

	;timing compensation
	;to insure we always call the video mode 
	;routine at the same cycle	
	WAIT r16,230-(AUDIO_OUT_HSYNC_CYCLES)
    680a:	06 e0       	ldi	r16, 0x06	; 6
    680c:	0a 95       	dec	r16
    680e:	f1 f7       	brne	.-4      	; 0x680c <push_loop+0xa>

	call VMODE_FUNC		;TCNT1=0x234
    6810:	0e 94 9d 31 	call	0x633a	; 0x633a <sub_video_mode3>

	;pop r1-r29
	ldi ZL,1
    6814:	e1 e0       	ldi	r30, 0x01	; 1
	clr ZH
    6816:	ff 27       	eor	r31, r31

00006818 <pop_loop>:
pop_loop:
	pop r0
    6818:	0f 90       	pop	r0
	st Z+,r0 ;store value to register file
    681a:	01 92       	st	Z+, r0
	cpi ZL,30
    681c:	ee 31       	cpi	r30, 0x1E	; 30
	brlo pop_loop	
    681e:	e0 f3       	brcs	.-8      	; 0x6818 <pop_loop>

00006820 <no_render>:

no_render:

	;check if it's the last hsync pulse and we are 
	;ready for VSYNC
	lds ZL,sync_pulse
    6820:	e0 91 17 09 	lds	r30, 0x0917
	cpi ZL,0
    6824:	e0 30       	cpi	r30, 0x00	; 0
	breq .+2
    6826:	09 f0       	breq	.+2      	; 0x682a <no_render+0xa>
	rjmp sync_end
    6828:	3b c0       	rjmp	.+118    	; 0x68a0 <sync_end>
;***************************************************
; Process VSYNC stuff
;***************************************************
	
	;push C-call registers
	push r18
    682a:	2f 93       	push	r18
	push r19
    682c:	3f 93       	push	r19
	push r20
    682e:	4f 93       	push	r20
	push r21
    6830:	5f 93       	push	r21
	push r22
    6832:	6f 93       	push	r22
	push r23
    6834:	7f 93       	push	r23
	push r24
    6836:	8f 93       	push	r24
	push r25
    6838:	9f 93       	push	r25
	push r26
    683a:	af 93       	push	r26
	push r27
    683c:	bf 93       	push	r27

	sei ;must enable ints for re-entrant sync pulses
    683e:	78 94       	sei
	clr r1
    6840:	11 24       	eor	r1, r1

	;set vsync flags
	clr ZL
    6842:	ee 27       	eor	r30, r30
	sts sync_phase,ZL
    6844:	e0 93 16 09 	sts	0x0916, r30
	ldi ZL,SYNC_PRE_EQ_PULSES+SYNC_EQ_PULSES+SYNC_POST_EQ_PULSES
    6848:	e2 e1       	ldi	r30, 0x12	; 18
	sts sync_pulse,ZL
    684a:	e0 93 17 09 	sts	0x0917, r30

	;fetch render height registers if they changed	
	lds ZH,first_render_line_tmp
    684e:	f0 91 1f 09 	lds	r31, 0x091F
	sts first_render_line,ZH
    6852:	f0 93 1d 09 	sts	0x091D, r31
	
	lds ZH,render_lines_count_tmp
    6856:	f0 91 20 09 	lds	r31, 0x0920
	sts render_lines_count,ZH
    685a:	f0 93 1e 09 	sts	0x091E, r31

	;process user pre callback
	lds ZL,pre_vsync_user_callback+0
    685e:	e0 91 19 09 	lds	r30, 0x0919
	lds ZH,pre_vsync_user_callback+1
    6862:	f0 91 1a 09 	lds	r31, 0x091A
	cp  ZL,r1
    6866:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6868:	f1 05       	cpc	r31, r1
	breq .+2 
    686a:	09 f0       	breq	.+2      	; 0x686e <no_render+0x4e>
	icall
    686c:	09 95       	icall

	;refresh buttons states
	#if CONTROLLERS_VSYNC_READ == 1
		call ReadControllers
    686e:	0e 94 bc 35 	call	0x6b78	; 0x6b78 <ReadControllers>
	#endif 
	
	;invoke stuff the video mode may have to do
	call VideoModeVsync	
    6872:	0e 94 6a 43 	call	0x86d4	; 0x86d4 <VideoModeVsync>

	;process music (music, envelopes, etc)
	call process_music
    6876:	0e 94 62 34 	call	0x68c4	; 0x68c4 <process_music>
	clr r1
    687a:	11 24       	eor	r1, r1

	;process user post callback
	lds ZL,post_vsync_user_callback+0
    687c:	e0 91 1b 09 	lds	r30, 0x091B
	lds ZH,post_vsync_user_callback+1
    6880:	f0 91 1c 09 	lds	r31, 0x091C
	cp  ZL,r1
    6884:	e1 15       	cp	r30, r1
	cpc ZH,r1
    6886:	f1 05       	cpc	r31, r1
	breq .+2 
    6888:	09 f0       	breq	.+2      	; 0x688c <no_render+0x6c>
	icall
    688a:	09 95       	icall
	#if SNES_MOUSE == 1
		call ReadMouseExtendedData
		call ProcessMouseMovement
	#endif

	pop r27
    688c:	bf 91       	pop	r27
	pop r26
    688e:	af 91       	pop	r26
	pop r25
    6890:	9f 91       	pop	r25
	pop r24
    6892:	8f 91       	pop	r24
	pop r23
    6894:	7f 91       	pop	r23
	pop r22
    6896:	6f 91       	pop	r22
	pop r21
    6898:	5f 91       	pop	r21
	pop r20
    689a:	4f 91       	pop	r20
	pop r19
    689c:	3f 91       	pop	r19
	pop r18
    689e:	2f 91       	pop	r18

000068a0 <sync_end>:
	
sync_end:	
	;restore flags
	pop ZL
    68a0:	ef 91       	pop	r30
	out _SFR_IO_ADDR(SREG),ZL
    68a2:	ef bf       	out	0x3f, r30	; 63
	
	pop ZH
    68a4:	ff 91       	pop	r31
	pop ZL
    68a6:	ef 91       	pop	r30
	pop r1
    68a8:	1f 90       	pop	r1
	pop r0
    68aa:	0f 90       	pop	r0
	reti
    68ac:	18 95       	reti

000068ae <hsync_pulse>:
; 0xf0 on the sbi 
;	
; Destroys: ZL (r30)
;*************************************************
hsync_pulse:
	cbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN ;2
    68ae:	28 98       	cbi	0x05, 0	; 5
	ldi ZL,2
    68b0:	e2 e0       	ldi	r30, 0x02	; 2
	rjmp .
    68b2:	00 c0       	rjmp	.+0      	; 0x68b4 <hsync_pulse+0x6>
	call update_sound
    68b4:	0e 94 68 34 	call	0x68d0	; 0x68d0 <update_sound>

	lds ZL,sync_pulse
    68b8:	e0 91 17 09 	lds	r30, 0x0917
	dec ZL
    68bc:	ea 95       	dec	r30
	sts sync_pulse,ZL
    68be:	e0 93 17 09 	sts	0x0917, r30

	ret
    68c2:	08 95       	ret

000068c4 <process_music>:
; NOTE: registers r18-r27 are already saved by the caller
;***********************
process_music:
	
#if ENABLE_MIXER==1
	lds ZL,sound_enabled
    68c4:	e0 91 41 09 	lds	r30, 0x0941
	sbrc ZL,0
    68c8:	e0 fd       	sbrc	r30, 0
 	call ProcessMusic
    68ca:	0e 94 72 38 	call	0x70e4	; 0x70e4 <ProcessMusic>
#endif

	ret
    68ce:	08 95       	ret

000068d0 <update_sound>:

; Destroys: ZL (r30)
; cycles: 212
;****************************
update_sound:
	push r16
    68d0:	0f 93       	push	r16
	push r17
    68d2:	1f 93       	push	r17
	push r18
    68d4:	2f 93       	push	r18
	push r28
    68d6:	cf 93       	push	r28
	push r29
    68d8:	df 93       	push	r29

	mov r18,ZL
    68da:	2e 2f       	mov	r18, r30

	;channel 1 
	lds r16,tr1_step_lo
    68dc:	00 91 43 09 	lds	r16, 0x0943
	lds r17,tr1_pos_frac
    68e0:	10 91 45 09 	lds	r17, 0x0945
	add	r17,r16	;add step to fractional part of sample pos
    68e4:	10 0f       	add	r17, r16
	lds r16,tr1_step_hi	
    68e6:	00 91 44 09 	lds	r16, 0x0944
	lds ZL,tr1_pos_lo
    68ea:	e0 91 46 09 	lds	r30, 0x0946
	lds ZH,tr1_pos_hi 
    68ee:	f0 91 47 09 	lds	r31, 0x0947
	adc ZL,r16	;add step to low byte of sample pos
    68f2:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    68f4:	04 91       	lpm	r16, Z
	sts tr1_pos_lo,ZL
    68f6:	e0 93 46 09 	sts	0x0946, r30
	sts tr1_pos_frac,r17
    68fa:	10 93 45 09 	sts	0x0945, r17
	lds r17,tr1_vol
    68fe:	10 91 42 09 	lds	r17, 0x0942
	mulsu r16,r17;(sample*mixing vol)
    6902:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend	
    6904:	00 08       	sbc	r0, r0
	mov r28,r1	;set (sample*vol>>8) to mix buffer lsb
    6906:	c1 2d       	mov	r28, r1
	mov r29,r0	;set mix buffer msb	
    6908:	d0 2d       	mov	r29, r0
	nop
    690a:	00 00       	nop

;38
	
	;channel 2
	lds r16,tr2_step_lo
    690c:	00 91 49 09 	lds	r16, 0x0949
	lds r17,tr2_pos_frac
    6910:	10 91 4b 09 	lds	r17, 0x094B
	add	r17,r16	;add step to fractional part of sample pos
    6914:	10 0f       	add	r17, r16
	lds r16,tr2_step_hi	
    6916:	00 91 4a 09 	lds	r16, 0x094A
	lds ZL,tr2_pos_lo
    691a:	e0 91 4c 09 	lds	r30, 0x094C
	lds ZH,tr2_pos_hi 
    691e:	f0 91 4d 09 	lds	r31, 0x094D
	adc ZL,r16	;add step to low byte of sample pos
    6922:	e0 1f       	adc	r30, r16
	lpm	r16,Z	;load sample
    6924:	04 91       	lpm	r16, Z
	sts tr2_pos_lo,ZL
    6926:	e0 93 4c 09 	sts	0x094C, r30
	sts tr2_pos_frac,r17
    692a:	10 93 4b 09 	sts	0x094B, r17
	lds r17,tr2_vol
    692e:	10 91 48 09 	lds	r17, 0x0948

	;*** Video sync update ***
	sbrc r18,0								;pre-eq/post-eq sync
    6932:	20 fd       	sbrc	r18, 0
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xAC
    6934:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,0								
    6936:	20 ff       	sbrs	r18, 0
	rjmp .
    6938:	00 c0       	rjmp	.+0      	; 0x693a <update_sound+0x6a>
	;*************************

	mulsu r16,r17;(sample*mixing vol)
    693a:	01 03       	mulsu	r16, r17
	clr r0
    693c:	00 24       	eor	r0, r0
	sbc r0,r0	;sign extend
    693e:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6940:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb		
    6942:	d0 1d       	adc	r29, r0
;70
	
	;channel 3
	lds r16,tr3_step_lo
    6944:	00 91 4f 09 	lds	r16, 0x094F
	lds r17,tr3_pos_frac
    6948:	10 91 51 09 	lds	r17, 0x0951
	add	r17,r16				;add step to fractional part of sample pos
    694c:	10 0f       	add	r17, r16
	lds r16,tr3_step_hi	
    694e:	00 91 50 09 	lds	r16, 0x0950
	lds ZL,tr3_pos_lo
    6952:	e0 91 52 09 	lds	r30, 0x0952
	lds ZH,tr3_pos_hi 
    6956:	f0 91 53 09 	lds	r31, 0x0953
	adc ZL,r16				;add step to low byte of sample pos
    695a:	e0 1f       	adc	r30, r16
	lpm	r16,Z				;load sample
    695c:	04 91       	lpm	r16, Z
	sts tr3_pos_lo,ZL
    695e:	e0 93 52 09 	sts	0x0952, r30
	sts tr3_pos_frac,r17
    6962:	10 93 51 09 	sts	0x0951, r17
	lds r17,tr3_vol
    6966:	10 91 4e 09 	lds	r17, 0x094E
	mulsu r16,r17			;(sample*mixing vol)
    696a:	01 03       	mulsu	r16, r17
	sbc r0,r0				;sign extend
    696c:	00 08       	sbc	r0, r0
	add r28,r1				;add (sample*vol>>8) to mix buffer lsb
    696e:	c1 0d       	add	r28, r1
	adc r29,r0				;ajust mix buffer msb
    6970:	d0 1d       	adc	r29, r0
;97	

	;channel 4 - 7/15 bit LFSR 
	lds r16,tr4_barrel_lo
    6972:	00 91 56 09 	lds	r16, 0x0956
	lds r17,tr4_barrel_hi
    6976:	10 91 57 09 	lds	r17, 0x0957
	lds ZL,tr4_divider
    697a:	e0 91 58 09 	lds	r30, 0x0958
	dec ZL	
    697e:	ea 95       	dec	r30
	brpl ch4_no_shift	
    6980:	92 f4       	brpl	.+36     	; 0x69a6 <ch4_no_shift>

	lds ZH,tr4_params
    6982:	f0 91 55 09 	lds	r31, 0x0955
	mov ZL,ZH
    6986:	ef 2f       	mov	r30, r31
	lsr ZL 			;keep bits7:1
    6988:	e6 95       	lsr	r30

	mov r0,r16  ;copy barrel shifter
    698a:	00 2e       	mov	r0, r16
	lsr r0
    698c:	06 94       	lsr	r0
	eor r0,r16  ;xor bit0 and bit1
    698e:	00 26       	eor	r0, r16
	bst r0,0
    6990:	00 fa       	bst	r0, 0
	lsr r17
    6992:	16 95       	lsr	r17
	ror r16
    6994:	07 95       	ror	r16
	bld r17,6	;15 bits mode
    6996:	16 f9       	bld	r17, 6
	sbrs ZH,0
    6998:	f0 ff       	sbrs	r31, 0
	bld r16,6	;7 bits mode
    699a:	06 f9       	bld	r16, 6

	sts tr4_barrel_lo,r16
    699c:	00 93 56 09 	sts	0x0956, r16
	sts tr4_barrel_hi,r17
    69a0:	10 93 57 09 	sts	0x0957, r17

	rjmp ch4_end
    69a4:	03 c0       	rjmp	.+6      	; 0x69ac <ch4_end>

000069a6 <ch4_no_shift>:
ch4_no_shift:
	;wait loop 21 cycles
	ldi r17,6
    69a6:	16 e0       	ldi	r17, 0x06	; 6
	dec r17
    69a8:	1a 95       	dec	r17
	brne .-4
    69aa:	f1 f7       	brne	.-4      	; 0x69a8 <ch4_no_shift+0x2>

000069ac <ch4_end>:
	;rjmp .
ch4_end:

	sts tr4_divider,ZL
    69ac:	e0 93 58 09 	sts	0x0958, r30
	ldi r17,0x80 ;-128
    69b0:	10 e8       	ldi	r17, 0x80	; 128
	
	;*** Video sync update ***
	sbrc r18,1								;hsync
    69b2:	21 fd       	sbrc	r18, 1
	sbi _SFR_IO_ADDR(SYNC_PORT),SYNC_PIN	;TCNT1=0xF0
    69b4:	28 9a       	sbi	0x05, 0	; 5
	sbrs r18,1								
    69b6:	21 ff       	sbrs	r18, 1
	rjmp .
    69b8:	00 c0       	rjmp	.+0      	; 0x69ba <ch4_end+0xe>
	;*************************
	
	sbrc r16,0
    69ba:	00 fd       	sbrc	r16, 0
	ldi r17,0x7f ;+127
    69bc:	1f e7       	ldi	r17, 0x7F	; 127
	
	lds r16,tr4_vol
    69be:	00 91 54 09 	lds	r16, 0x0954

	mulsu r17,r16;(sample*mixing vol)
    69c2:	10 03       	mulsu	r17, r16
	sbc r0,r0	;sign extend
    69c4:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    69c6:	c1 0d       	add	r28, r1
	adc r29,r0	;ajust mix buffer msb
    69c8:	d0 1d       	adc	r29, r0
;142
#if SOUND_CHANNEL_5_ENABLE==1
	;channel 5 PCM -- 45 cycles

	;add fractional part
	lds r16,tr5_pos_frac
    69ca:	00 91 5d 09 	lds	r16, 0x095D
	lds r17,tr5_step_lo 
    69ce:	10 91 5b 09 	lds	r17, 0x095B
	add r16,r17
    69d2:	01 0f       	add	r16, r17
	sts tr5_pos_frac,r16
    69d4:	00 93 5d 09 	sts	0x095D, r16

	;add lo
	lds ZL,tr5_pos_lo
    69d8:	e0 91 5e 09 	lds	r30, 0x095E
	lds r17,tr5_step_hi 
    69dc:	10 91 5c 09 	lds	r17, 0x095C
	adc ZL,r17
    69e0:	e1 1f       	adc	r30, r17

	;add hi
	lds ZH,tr5_pos_hi
    69e2:	f0 91 5f 09 	lds	r31, 0x095F
	ldi r16,0
    69e6:	00 e0       	ldi	r16, 0x00	; 0
	adc ZH,r16
    69e8:	f0 1f       	adc	r31, r16

	movw r16,ZL
    69ea:	8f 01       	movw	r16, r30
	lds r0,tr5_loop_len_lo
    69ec:	00 90 60 09 	lds	r0, 0x0960
	lds r1,tr5_loop_len_hi	
    69f0:	10 90 61 09 	lds	r1, 0x0961
	sub r16,r0
    69f4:	00 19       	sub	r16, r0
	sbc r17,r1
    69f6:	11 09       	sbc	r17, r1
	lds r0,tr5_loop_end_lo
    69f8:	00 90 62 09 	lds	r0, 0x0962
	lds r1,tr5_loop_end_hi
    69fc:	10 90 63 09 	lds	r1, 0x0963

	cp ZL,r0
    6a00:	e0 15       	cp	r30, r0
	cpc ZH,r1
    6a02:	f1 05       	cpc	r31, r1
	brlo .+2
    6a04:	08 f0       	brcs	.+2      	; 0x6a08 <ch4_end+0x5c>
	movw ZL,r16
    6a06:	f8 01       	movw	r30, r16

	sts tr5_pos_lo,ZL
    6a08:	e0 93 5e 09 	sts	0x095E, r30
	sts tr5_pos_hi,ZH
    6a0c:	f0 93 5f 09 	sts	0x095F, r31

	lpm	r16,Z	;load sample
    6a10:	04 91       	lpm	r16, Z
	lds r17,tr5_vol
    6a12:	10 91 5a 09 	lds	r17, 0x095A

	mulsu r16,r17;(sample*mixing vol)
    6a16:	01 03       	mulsu	r16, r17
	sbc r0,r0	;sign extend
    6a18:	00 08       	sbc	r0, r0
	add r28,r1	;add (sample*vol>>8) to mix buffer lsb
    6a1a:	c1 0d       	add	r28, r1
	adc r29,r0	;adjust mix buffer msb	
    6a1c:	d0 1d       	adc	r29, r0
#endif
	
	;final processing

	;clip
	clr r0
    6a1e:	00 24       	eor	r0, r0
	cpi r28,128	;> 127?
    6a20:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0	
    6a22:	d0 05       	cpc	r29, r0
	brlt .+2
    6a24:	0c f0       	brlt	.+2      	; 0x6a28 <ch4_end+0x7c>
	ldi r28,127
    6a26:	cf e7       	ldi	r28, 0x7F	; 127
	
	dec r0
    6a28:	0a 94       	dec	r0
	cpi r28,-128; <-128?
    6a2a:	c0 38       	cpi	r28, 0x80	; 128
	cpc r29,r0 ;0xff
    6a2c:	d0 05       	cpc	r29, r0
	brge .+2
    6a2e:	0c f4       	brge	.+2      	; 0x6a32 <ch4_end+0x86>
	ldi r28,-128
    6a30:	c0 e8       	ldi	r28, 0x80	; 128

	subi r28,128	;convert to unsigned		
    6a32:	c0 58       	subi	r28, 0x80	; 128
	sts _SFR_MEM_ADDR(OCR2A),r28 ;output sound byte
    6a34:	c0 93 b3 00 	sts	0x00B3, r28
	inc r16
	andi r16,(UART_RX_BUFFER_SIZE-1) ;wrap
	sts uart_rx_buf_end,r16
#endif

	pop r29
    6a38:	df 91       	pop	r29
	pop r28
    6a3a:	cf 91       	pop	r28
	pop r18
    6a3c:	2f 91       	pop	r18
	pop r17
    6a3e:	1f 91       	pop	r17
	pop r16
    6a40:	0f 91       	pop	r16
	
	ret
    6a42:	08 95       	ret

00006a44 <SetSpritesTileTable>:
; C-callable
; r25:r24=pointer to sprites pixel data.
;*****************************
.section .text.SetSpritesTileTable
SetSpritesTileTable:
	sts sprites_tile_banks,r24
    6a44:	80 93 08 09 	sts	0x0908, r24
	sts sprites_tile_banks+1,r25
    6a48:	90 93 09 09 	sts	0x0909, r25
	ret
    6a4c:	08 95       	ret

00006a4e <ClearVram>:
; C-callable
;************************************
.section .text.ClearVram
ClearVram:
	//init vram		
	ldi r30,lo8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6a4e:	e8 e4       	ldi	r30, 0x48	; 72
	ldi r31,hi8(VRAM_SIZE+(VRAM_TILES_H*OVERLAY_LINES))
    6a50:	f3 e0       	ldi	r31, 0x03	; 3

	ldi XL,lo8(vram)
    6a52:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6a54:	b1 e0       	ldi	r27, 0x01	; 1

	ldi r22,RAM_TILES_COUNT
    6a56:	60 e1       	ldi	r22, 0x10	; 16

00006a58 <fill_vram_loop>:

fill_vram_loop:
	st X+,r22
    6a58:	6d 93       	st	X+, r22
	sbiw r30,1
    6a5a:	31 97       	sbiw	r30, 0x01	; 1
	brne fill_vram_loop
    6a5c:	e9 f7       	brne	.-6      	; 0x6a58 <fill_vram_loop>

	clr r1
    6a5e:	11 24       	eor	r1, r1

	ret
    6a60:	08 95       	ret

00006a62 <SetFont>:
; r22=Y pos (8 bit)
; r20=Font tile No (8 bit)
;************************************
.section .text.SetFont
SetFont:
	lds r21,font_tile_index
    6a62:	50 91 12 09 	lds	r21, 0x0912
	add r20,21
    6a66:	45 0f       	add	r20, r21
	rjmp SetTile	
    6a68:	00 c0       	rjmp	.+0      	; 0x6a6a <SetTile>

00006a6a <SetTile>:

	ret

#else

	clr r25
    6a6a:	99 27       	eor	r25, r25
	clr r23	
    6a6c:	77 27       	eor	r23, r23

	ldi r18,VRAM_TILES_H
    6a6e:	2e e1       	ldi	r18, 0x1E	; 30

	mul r22,r18		;calculate Y line addr in vram
    6a70:	62 9f       	mul	r22, r18
	add r0,r24		;add X offset
    6a72:	08 0e       	add	r0, r24
	adc r1,r25
    6a74:	19 1e       	adc	r1, r25
	ldi XL,lo8(vram)
    6a76:	a0 e6       	ldi	r26, 0x60	; 96
	ldi XH,hi8(vram)
    6a78:	b1 e0       	ldi	r27, 0x01	; 1
	add XL,r0
    6a7a:	a0 0d       	add	r26, r0
	adc XH,r1
    6a7c:	b1 1d       	adc	r27, r1
	
	subi r20,~(RAM_TILES_COUNT-1)	
    6a7e:	40 5f       	subi	r20, 0xF0	; 240
	st X,r20
    6a80:	4c 93       	st	X, r20

	clr r1
    6a82:	11 24       	eor	r1, r1

	ret
    6a84:	08 95       	ret

00006a86 <SetFontTilesIndex>:
; C-callable
; r24=First font tile index in tile table (8 bit)
;************************************
.section .text.SetFontTilesIndex
	SetFontTilesIndex:
	sts font_tile_index,r24
    6a86:	80 93 12 09 	sts	0x0912, r24
	ret
    6a8a:	08 95       	ret

00006a8c <SetTileTable>:
; C-callable
; r25:r24=pointer to tiles data
;************************************
.section .text.SetTileTable
SetTileTable:
	sts tile_table_lo,r24
    6a8c:	80 93 10 09 	sts	0x0910, r24
	sts tile_table_hi,r25	
    6a90:	90 93 11 09 	sts	0x0911, r25
	ret
    6a94:	08 95       	ret

00006a96 <GetVsyncFlag>:
;
; C-callable
;************************************
.section .text.GetVsyncFlag
GetVsyncFlag:
	lds r24,sync_flags
    6a96:	80 91 18 09 	lds	r24, 0x0918
	andi r24,SYNC_FLAG_VSYNC
    6a9a:	81 70       	andi	r24, 0x01	; 1
	ret
    6a9c:	08 95       	ret

00006a9e <ClearVsyncFlag>:
; 
; C-callable
;*****************************
.section .text.ClearVsyncFlag
ClearVsyncFlag:
	lds r18,sync_flags
    6a9e:	20 91 18 09 	lds	r18, 0x0918
	andi r18,~SYNC_FLAG_VSYNC
    6aa2:	2e 7f       	andi	r18, 0xFE	; 254
	sts sync_flags,r18
    6aa4:	20 93 18 09 	sts	0x0918, r18
	ret
    6aa8:	08 95       	ret

00006aaa <ReadJoypad>:
; r24=joypad No (0 or 1)
; returns: (int) r25:r24
;*****************************
.section .text.ReadJoypad
ReadJoypad:	
	tst r24
    6aaa:	88 23       	and	r24, r24
	brne rj_p2
    6aac:	29 f4       	brne	.+10     	; 0x6ab8 <rj_p2>
		
	lds r24,joypad1_status_lo
    6aae:	80 91 21 09 	lds	r24, 0x0921
	lds r25,joypad1_status_lo+1
    6ab2:	90 91 22 09 	lds	r25, 0x0922
	ret
    6ab6:	08 95       	ret

00006ab8 <rj_p2>:
rj_p2:
	lds r24,joypad2_status_lo
    6ab8:	80 91 25 09 	lds	r24, 0x0925
	lds r25,joypad2_status_lo+1	
    6abc:	90 91 26 09 	lds	r25, 0x0926

	ret
    6ac0:	08 95       	ret

00006ac2 <WaitUs>:
; r25:r24 - us to wait
; returns: void
;****************************
.section .text.WaitUs
WaitUs:	
	ldi r23,8
    6ac2:	78 e0       	ldi	r23, 0x08	; 8
	dec 23
    6ac4:	7a 95       	dec	r23
	brne .-4 ;~1 us
    6ac6:	f1 f7       	brne	.-4      	; 0x6ac4 <WaitUs+0x2>
	nop
    6ac8:	00 00       	nop
	sbiw r24,1
    6aca:	01 97       	sbiw	r24, 0x01	; 1
	brne WaitUs
    6acc:	d1 f7       	brne	.-12     	; 0x6ac2 <WaitUs>

	ret
    6ace:	08 95       	ret

00006ad0 <WriteEeprom>:
;****************************

.section .text.WriteEeprom
WriteEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6ad0:	f9 99       	sbic	0x1f, 1	; 31
   rjmp WriteEeprom
    6ad2:	fe cf       	rjmp	.-4      	; 0x6ad0 <WriteEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6ad4:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6ad6:	81 bd       	out	0x21, r24	; 33
   ; Write data (r22) to Data Register
   out _SFR_IO_ADDR(EEDR),r22
    6ad8:	60 bd       	out	0x20, r22	; 32
   cli
    6ada:	f8 94       	cli
   ; Write logical one to EEMPE
   sbi _SFR_IO_ADDR(EECR),EEMPE
    6adc:	fa 9a       	sbi	0x1f, 2	; 31
   ; Start eeprom write by setting EEPE
   sbi _SFR_IO_ADDR(EECR),EEPE
    6ade:	f9 9a       	sbi	0x1f, 1	; 31
   sei
    6ae0:	78 94       	sei
   ret
    6ae2:	08 95       	ret

00006ae4 <ReadEeprom>:
; r24 - value read
;****************************
.section .text.ReadEeprom
ReadEeprom:
   ; Wait for completion of previous write
   sbic _SFR_IO_ADDR(EECR),EEPE
    6ae4:	f9 99       	sbic	0x1f, 1	; 31
   rjmp ReadEeprom
    6ae6:	fe cf       	rjmp	.-4      	; 0x6ae4 <ReadEeprom>
   ; Set up address (r25:r24) in address register
   out _SFR_IO_ADDR(EEARH), r25
    6ae8:	92 bd       	out	0x22, r25	; 34
   out _SFR_IO_ADDR(EEARL), r24
    6aea:	81 bd       	out	0x21, r24	; 33
   ; Start eeprom read by writing EERE
   cli
    6aec:	f8 94       	cli
   sbi _SFR_IO_ADDR(EECR),EERE
    6aee:	f8 9a       	sbi	0x1f, 0	; 31
   ; Read data from Data Register
   in r24,_SFR_IO_ADDR(EEDR)
    6af0:	80 b5       	in	r24, 0x20	; 32
   sei
    6af2:	78 94       	sei
   ret
    6af4:	08 95       	ret

00006af6 <SoftReset>:

/**
 * Performs a software reset
 */
void SoftReset(void){        
	wdt_enable(WDTO_15MS);  
    6af6:	98 e0       	ldi	r25, 0x08	; 8
    6af8:	88 e1       	ldi	r24, 0x18	; 24
    6afa:	0f b6       	in	r0, 0x3f	; 63
    6afc:	f8 94       	cli
    6afe:	a8 95       	wdr
    6b00:	80 93 60 00 	sts	0x0060, r24
    6b04:	0f be       	out	0x3f, r0	; 63
    6b06:	90 93 60 00 	sts	0x0060, r25
	while(1);
    6b0a:	ff cf       	rjmp	.-2      	; 0x6b0a <SoftReset+0x14>

00006b0c <ReadButtons>:
void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
	unsigned char i;

	//latch controllers
	JOYPAD_OUT_PORT|=_BV(JOYPAD_LATCH_PIN);
    6b0c:	12 9a       	sbi	0x02, 2	; 2
		}else{
			Wait200ns();
			Wait200ns();
		}	
	#else
		Wait200ns();
    6b0e:	c8 95       	lpm
    6b10:	c8 95       	lpm
		Wait200ns();
    6b12:	c8 95       	lpm
    6b14:	c8 95       	lpm
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));
    6b16:	12 98       	cbi	0x02, 2	; 2
    6b18:	40 e1       	ldi	r20, 0x10	; 16
	DisplayLogo();
	
}

void ReadButtons(){
	unsigned int p1ButtonsLo=0,p2ButtonsLo=0;
    6b1a:	80 e0       	ldi	r24, 0x00	; 0
    6b1c:	90 e0       	ldi	r25, 0x00	; 0
    6b1e:	20 e0       	ldi	r18, 0x00	; 0
    6b20:	30 e0       	ldi	r19, 0x00	; 0


	//read button states
	for(i=0;i<16;i++){

		p1ButtonsLo>>=1;
    6b22:	36 95       	lsr	r19
    6b24:	27 95       	ror	r18
		p2ButtonsLo>>=1;
    6b26:	96 95       	lsr	r25
    6b28:	87 95       	ror	r24
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6b2a:	c8 95       	lpm
    6b2c:	c8 95       	lpm
			Wait200ns();
    6b2e:	c8 95       	lpm
    6b30:	c8 95       	lpm
		#endif
			
		//pulse clock pin		
		JOYPAD_OUT_PORT&=~(_BV(JOYPAD_CLOCK_PIN));
    6b32:	13 98       	cbi	0x02, 3	; 2
		
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) p1ButtonsLo|=(1<<15);
    6b34:	00 9b       	sbis	0x00, 0	; 0
    6b36:	30 68       	ori	r19, 0x80	; 128
		if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) p2ButtonsLo|=(1<<15);
    6b38:	01 9b       	sbis	0x00, 1	; 0
    6b3a:	90 68       	ori	r25, 0x80	; 128
		
		JOYPAD_OUT_PORT|=_BV(JOYPAD_CLOCK_PIN);
    6b3c:	13 9a       	sbi	0x02, 3	; 2
			}else{
				Wait200ns();
				Wait200ns();
			}	
		#else
			Wait200ns();
    6b3e:	c8 95       	lpm
    6b40:	c8 95       	lpm
			Wait200ns();
    6b42:	c8 95       	lpm
    6b44:	c8 95       	lpm
    6b46:	41 50       	subi	r20, 0x01	; 1
	#endif
	JOYPAD_OUT_PORT&=~(_BV(JOYPAD_LATCH_PIN));


	//read button states
	for(i=0;i<16;i++){
    6b48:	61 f7       	brne	.-40     	; 0x6b22 <ReadButtons+0x16>
		#endif

	}

	#if JOYSTICK==TYPE_SNES
		joypad1_status_lo=p1ButtonsLo;
    6b4a:	30 93 22 09 	sts	0x0922, r19
    6b4e:	20 93 21 09 	sts	0x0921, r18
		joypad2_status_lo=p2ButtonsLo;
    6b52:	90 93 26 09 	sts	0x0926, r25
    6b56:	80 93 25 09 	sts	0x0925, r24
	#else
		joypad1_status_lo=p1ButtonsLo&0xff;
		joypad2_status_lo=p2ButtonsLo&0xff;	
	#endif

	if(joypad1_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B) || joypad2_status_lo==(BTN_START+BTN_SELECT+BTN_Y+BTN_B)){
    6b5a:	80 91 21 09 	lds	r24, 0x0921
    6b5e:	90 91 22 09 	lds	r25, 0x0922
    6b62:	0f 97       	sbiw	r24, 0x0f	; 15
    6b64:	31 f0       	breq	.+12     	; 0x6b72 <ReadButtons+0x66>
    6b66:	80 91 25 09 	lds	r24, 0x0925
    6b6a:	90 91 26 09 	lds	r25, 0x0926
    6b6e:	0f 97       	sbiw	r24, 0x0f	; 15
    6b70:	11 f4       	brne	.+4      	; 0x6b76 <ReadButtons+0x6a>
		SoftReset();
    6b72:	0e 94 7b 35 	call	0x6af6	; 0x6af6 <SoftReset>
    6b76:	08 95       	ret

00006b78 <ReadControllers>:
void ReadControllers(){

	//detect if joypads are connected
	//when no connector are plugged, the internal AVR pullup will drive the line high
	//otherwise the controller's shift register will drive the line low.
	joypadsConnectionStatus=0;
    6b78:	10 92 76 09 	sts	0x0976, r1
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA1_PIN))==0) joypadsConnectionStatus|=1;
    6b7c:	00 99       	sbic	0x00, 0	; 0
    6b7e:	03 c0       	rjmp	.+6      	; 0x6b86 <ReadControllers+0xe>
    6b80:	81 e0       	ldi	r24, 0x01	; 1
    6b82:	80 93 76 09 	sts	0x0976, r24
	if((JOYPAD_IN_PORT&(1<<JOYPAD_DATA2_PIN))==0) joypadsConnectionStatus|=2;
    6b86:	01 99       	sbic	0x00, 1	; 0
    6b88:	05 c0       	rjmp	.+10     	; 0x6b94 <ReadControllers+0x1c>
    6b8a:	80 91 76 09 	lds	r24, 0x0976
    6b8e:	82 60       	ori	r24, 0x02	; 2
    6b90:	80 93 76 09 	sts	0x0976, r24
			
	//read the standard buttons
	ReadButtons();
    6b94:	0c 94 86 35 	jmp	0x6b0c	; 0x6b0c <ReadButtons>

00006b98 <FormatEeprom>:
	return resp;
}

	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {
    6b98:	cf 93       	push	r28
    6b9a:	df 93       	push	r29
    6b9c:	c0 e0       	ldi	r28, 0x00	; 0
    6b9e:	d0 e0       	ldi	r29, 0x00	; 0
    6ba0:	fe 01       	movw	r30, r28
    6ba2:	e0 55       	subi	r30, 0x50	; 80
    6ba4:	ff 4f       	sbci	r31, 0xFF	; 255

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
    6ba6:	64 91       	lpm	r22, Z
    6ba8:	ce 01       	movw	r24, r28
    6baa:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <WriteEeprom>
    6bae:	21 96       	adiw	r28, 0x01	; 1
	
// Format eeprom, wiping all data to zero
void FormatEeprom(void) {

   // Set sig. so we don't format next time
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
    6bb0:	c0 32       	cpi	r28, 0x20	; 32
    6bb2:	d1 05       	cpc	r29, r1
    6bb4:	a9 f7       	brne	.-22     	; 0x6ba0 <FormatEeprom+0x8>
    6bb6:	c0 e2       	ldi	r28, 0x20	; 32
    6bb8:	d0 e0       	ldi	r29, 0x00	; 0
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
    6bba:	6f ef       	ldi	r22, 0xFF	; 255
    6bbc:	ce 01       	movw	r24, r28
    6bbe:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <WriteEeprom>
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
    6bc2:	6f ef       	ldi	r22, 0xFF	; 255
    6bc4:	ce 01       	movw	r24, r28
    6bc6:	01 96       	adiw	r24, 0x01	; 1
    6bc8:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <WriteEeprom>
   for (u8 i = 0; i < sizeof(eeprom_format_table); i++) {
	 WriteEeprom(i,pgm_read_byte(&eeprom_format_table[i]));
   }
   
   // Write free blocks IDs
   for (u16 i = (EEPROM_BLOCK_SIZE*EEPROM_HEADER_SIZE); i < (64*EEPROM_BLOCK_SIZE); i+=EEPROM_BLOCK_SIZE) {
    6bcc:	a0 96       	adiw	r28, 0x20	; 32
    6bce:	c1 15       	cp	r28, r1
    6bd0:	88 e0       	ldi	r24, 0x08	; 8
    6bd2:	d8 07       	cpc	r29, r24
    6bd4:	91 f7       	brne	.-28     	; 0x6bba <FormatEeprom+0x22>
	  WriteEeprom(i,(u8)EEPROM_FREE_BLOCK);
	  WriteEeprom(i+1,(u8)(EEPROM_FREE_BLOCK>>8));
   }
   
}
    6bd6:	df 91       	pop	r29
    6bd8:	cf 91       	pop	r28
    6bda:	08 95       	ret

00006bdc <isEepromFormatted>:
	  }
   }
}
	
//returns true if the EEPROM has been setup to work with the kernel.
bool isEepromFormatted(){
    6bdc:	cf 93       	push	r28
	unsigned id;
	id=ReadEeprom(0)+(ReadEeprom(1)<<8);
    6bde:	80 e0       	ldi	r24, 0x00	; 0
    6be0:	90 e0       	ldi	r25, 0x00	; 0
    6be2:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6be6:	c8 2f       	mov	r28, r24
    6be8:	81 e0       	ldi	r24, 0x01	; 1
    6bea:	90 e0       	ldi	r25, 0x00	; 0
    6bec:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6bf0:	28 2f       	mov	r18, r24
    6bf2:	30 e0       	ldi	r19, 0x00	; 0
    6bf4:	32 2f       	mov	r19, r18
    6bf6:	22 27       	eor	r18, r18
    6bf8:	2c 0f       	add	r18, r28
    6bfa:	31 1d       	adc	r19, r1
	return (id==EEPROM_SIGNATURE);
    6bfc:	81 e0       	ldi	r24, 0x01	; 1
    6bfe:	2a 35       	cpi	r18, 0x5A	; 90
    6c00:	35 45       	sbci	r19, 0x55	; 85
    6c02:	09 f0       	breq	.+2      	; 0x6c06 <isEepromFormatted+0x2a>
    6c04:	80 e0       	ldi	r24, 0x00	; 0
}
    6c06:	cf 91       	pop	r28
    6c08:	08 95       	ret

00006c0a <EepromWriteBlock>:
/*
 * Write a data block in the specified block id. If the block does not exist, it is created.
 *
 * Returns: 0 on success or error codes
 */
char EepromWriteBlock(struct EepromBlockStruct *block){
    6c0a:	cf 92       	push	r12
    6c0c:	df 92       	push	r13
    6c0e:	ef 92       	push	r14
    6c10:	ff 92       	push	r15
    6c12:	0f 93       	push	r16
    6c14:	1f 93       	push	r17
    6c16:	cf 93       	push	r28
    6c18:	df 93       	push	r29
    6c1a:	1f 92       	push	r1
    6c1c:	cd b7       	in	r28, 0x3d	; 61
    6c1e:	de b7       	in	r29, 0x3e	; 62
    6c20:	6c 01       	movw	r12, r24
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6c22:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <isEepromFormatted>
    6c26:	88 23       	and	r24, r24
    6c28:	09 f4       	brne	.+2      	; 0x6c2c <EepromWriteBlock+0x22>
    6c2a:	4d c0       	rjmp	.+154    	; 0x6cc6 <EepromWriteBlock+0xbc>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6c2c:	f6 01       	movw	r30, r12
    6c2e:	80 81       	ld	r24, Z
    6c30:	91 81       	ldd	r25, Z+1	; 0x01
    6c32:	8f 3f       	cpi	r24, 0xFF	; 255
    6c34:	ff ef       	ldi	r31, 0xFF	; 255
    6c36:	9f 07       	cpc	r25, r31
    6c38:	09 f4       	brne	.+2      	; 0x6c3c <EepromWriteBlock+0x32>
    6c3a:	47 c0       	rjmp	.+142    	; 0x6cca <EepromWriteBlock+0xc0>
    6c3c:	8a 35       	cpi	r24, 0x5A	; 90
    6c3e:	95 45       	sbci	r25, 0x55	; 85
    6c40:	09 f4       	brne	.+2      	; 0x6c44 <EepromWriteBlock+0x3a>
    6c42:	43 c0       	rjmp	.+134    	; 0x6cca <EepromWriteBlock+0xc0>
    6c44:	00 e2       	ldi	r16, 0x20	; 32
    6c46:	10 e0       	ldi	r17, 0x00	; 0
    6c48:	f1 2c       	mov	r15, r1
    6c4a:	41 e0       	ldi	r20, 0x01	; 1

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6c4c:	c8 01       	movw	r24, r16
    6c4e:	49 83       	std	Y+1, r20	; 0x01
    6c50:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6c54:	e8 2e       	mov	r14, r24
    6c56:	c8 01       	movw	r24, r16
    6c58:	01 96       	adiw	r24, 0x01	; 1
    6c5a:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6c5e:	28 2f       	mov	r18, r24
    6c60:	30 e0       	ldi	r19, 0x00	; 0
    6c62:	32 2f       	mov	r19, r18
    6c64:	22 27       	eor	r18, r18
    6c66:	c9 01       	movw	r24, r18
    6c68:	8e 0d       	add	r24, r14
    6c6a:	91 1d       	adc	r25, r1
		if(id==block->id){
    6c6c:	f6 01       	movw	r30, r12
    6c6e:	20 81       	ld	r18, Z
    6c70:	31 81       	ldd	r19, Z+1	; 0x01
    6c72:	49 81       	ldd	r20, Y+1	; 0x01
    6c74:	82 17       	cp	r24, r18
    6c76:	93 07       	cpc	r25, r19
    6c78:	19 f4       	brne	.+6      	; 0x6c80 <EepromWriteBlock+0x76>
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    6c7a:	ff 20       	and	r15, r15
    6c7c:	89 f0       	breq	.+34     	; 0x6ca0 <EepromWriteBlock+0x96>
    6c7e:	0c c0       	rjmp	.+24     	; 0x6c98 <EepromWriteBlock+0x8e>
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
		if(id==block->id){
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
    6c80:	01 96       	adiw	r24, 0x01	; 1
    6c82:	19 f4       	brne	.+6      	; 0x6c8a <EepromWriteBlock+0x80>
    6c84:	f1 10       	cpse	r15, r1
    6c86:	01 c0       	rjmp	.+2      	; 0x6c8a <EepromWriteBlock+0x80>
    6c88:	f4 2e       	mov	r15, r20

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block or the next free one.
	for(i=EEPROM_HEADER_SIZE;i<64;i++){
    6c8a:	4f 5f       	subi	r20, 0xFF	; 255
    6c8c:	00 5e       	subi	r16, 0xE0	; 224
    6c8e:	1f 4f       	sbci	r17, 0xFF	; 255
    6c90:	40 34       	cpi	r20, 0x40	; 64
    6c92:	e1 f6       	brne	.-72     	; 0x6c4c <EepromWriteBlock+0x42>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6c94:	ff 20       	and	r15, r15
    6c96:	d9 f0       	breq	.+54     	; 0x6cce <EepromWriteBlock+0xc4>
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;
    6c98:	20 e2       	ldi	r18, 0x20	; 32
    6c9a:	f2 9e       	mul	r15, r18
    6c9c:	80 01       	movw	r16, r0
    6c9e:	11 24       	eor	r1, r1
    6ca0:	76 01       	movw	r14, r12
    6ca2:	80 e2       	ldi	r24, 0x20	; 32
    6ca4:	e8 0e       	add	r14, r24
    6ca6:	f1 1c       	adc	r15, r1
    6ca8:	0c 19       	sub	r16, r12
    6caa:	1d 09       	sbc	r17, r13
    6cac:	c6 01       	movw	r24, r12
    6cae:	80 0f       	add	r24, r16
    6cb0:	91 1f       	adc	r25, r17

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
    6cb2:	f6 01       	movw	r30, r12
    6cb4:	61 91       	ld	r22, Z+
    6cb6:	6f 01       	movw	r12, r30
    6cb8:	0e 94 68 35 	call	0x6ad0	; 0x6ad0 <WriteEeprom>
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
	if(nextFreeBlock!=0) destAddr=nextFreeBlock*EEPROM_BLOCK_SIZE;

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6cbc:	ce 14       	cp	r12, r14
    6cbe:	df 04       	cpc	r13, r15
    6cc0:	a9 f7       	brne	.-22     	; 0x6cac <EepromWriteBlock+0xa2>
		c=*srcPtr;
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
    6cc2:	80 e0       	ldi	r24, 0x00	; 0
    6cc4:	05 c0       	rjmp	.+10     	; 0x6cd0 <EepromWriteBlock+0xc6>
char EepromWriteBlock(struct EepromBlockStruct *block){
	unsigned char i,nextFreeBlock=0,c;
	unsigned int destAddr=0,id;
	unsigned char *srcPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6cc6:	84 e0       	ldi	r24, 0x04	; 4
    6cc8:	03 c0       	rjmp	.+6      	; 0x6cd0 <EepromWriteBlock+0xc6>
	if(block->id==EEPROM_FREE_BLOCK || block->id==EEPROM_SIGNATURE) return EEPROM_ERROR_INVALID_BLOCK;
    6cca:	81 e0       	ldi	r24, 0x01	; 1
    6ccc:	01 c0       	rjmp	.+2      	; 0x6cd0 <EepromWriteBlock+0xc6>
			break;
		}
		if(id==0xffff && nextFreeBlock==0) nextFreeBlock=i;
	}

	if(destAddr==0 && nextFreeBlock==0) return EEPROM_ERROR_FULL;
    6cce:	82 e0       	ldi	r24, 0x02	; 2
		WriteEeprom(destAddr++,c);
		srcPtr++;	
	}
	
	return 0;
}
    6cd0:	0f 90       	pop	r0
    6cd2:	df 91       	pop	r29
    6cd4:	cf 91       	pop	r28
    6cd6:	1f 91       	pop	r17
    6cd8:	0f 91       	pop	r16
    6cda:	ff 90       	pop	r15
    6cdc:	ef 90       	pop	r14
    6cde:	df 90       	pop	r13
    6ce0:	cf 90       	pop	r12
    6ce2:	08 95       	ret

00006ce4 <EepromReadBlock>:
 * 	0x01 = EEPROM_ERROR_INVALID_BLOCK
 *	0x02 = EEPROM_ERROR_FULL
 *	0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *	0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
    6ce4:	df 92       	push	r13
    6ce6:	ef 92       	push	r14
    6ce8:	ff 92       	push	r15
    6cea:	0f 93       	push	r16
    6cec:	1f 93       	push	r17
    6cee:	cf 93       	push	r28
    6cf0:	df 93       	push	r29
    6cf2:	7c 01       	movw	r14, r24
    6cf4:	eb 01       	movw	r28, r22
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6cf6:	0e 94 ee 35 	call	0x6bdc	; 0x6bdc <isEepromFormatted>
    6cfa:	88 23       	and	r24, r24
    6cfc:	89 f1       	breq	.+98     	; 0x6d60 <EepromReadBlock+0x7c>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6cfe:	8f ef       	ldi	r24, 0xFF	; 255
    6d00:	e8 16       	cp	r14, r24
    6d02:	f8 06       	cpc	r15, r24
    6d04:	79 f1       	breq	.+94     	; 0x6d64 <EepromReadBlock+0x80>
    6d06:	00 e0       	ldi	r16, 0x00	; 0
    6d08:	10 e0       	ldi	r17, 0x00	; 0

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
		id=ReadEeprom(i*EEPROM_BLOCK_SIZE)+(ReadEeprom((i*EEPROM_BLOCK_SIZE)+1)<<8);
    6d0a:	c8 01       	movw	r24, r16
    6d0c:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6d10:	d8 2e       	mov	r13, r24
    6d12:	c8 01       	movw	r24, r16
    6d14:	01 96       	adiw	r24, 0x01	; 1
    6d16:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6d1a:	28 2f       	mov	r18, r24
    6d1c:	30 e0       	ldi	r19, 0x00	; 0
    6d1e:	32 2f       	mov	r19, r18
    6d20:	22 27       	eor	r18, r18
    6d22:	2d 0d       	add	r18, r13
    6d24:	31 1d       	adc	r19, r1
		if(id==blockId){
    6d26:	2e 15       	cp	r18, r14
    6d28:	3f 05       	cpc	r19, r15
    6d2a:	39 f4       	brne	.+14     	; 0x6d3a <EepromReadBlock+0x56>
    6d2c:	7e 01       	movw	r14, r28
    6d2e:	80 e2       	ldi	r24, 0x20	; 32
    6d30:	e8 0e       	add	r14, r24
    6d32:	f1 1c       	adc	r15, r1
    6d34:	0c 1b       	sub	r16, r28
    6d36:	1d 0b       	sbc	r17, r29
    6d38:	08 c0       	rjmp	.+16     	; 0x6d4a <EepromReadBlock+0x66>
    6d3a:	00 5e       	subi	r16, 0xE0	; 224
    6d3c:	1f 4f       	sbci	r17, 0xFF	; 255

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;

	//scan all blocks and get the adress of that block
	for(i=0;i<32;i++){
    6d3e:	01 15       	cp	r16, r1
    6d40:	84 e0       	ldi	r24, 0x04	; 4
    6d42:	18 07       	cpc	r17, r24
    6d44:	11 f7       	brne	.-60     	; 0x6d0a <EepromReadBlock+0x26>
			destAddr=i*EEPROM_BLOCK_SIZE;
			break;
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			
    6d46:	83 e0       	ldi	r24, 0x03	; 3
    6d48:	0e c0       	rjmp	.+28     	; 0x6d66 <EepromReadBlock+0x82>

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
		*destPtr=ReadEeprom(destAddr++);
    6d4a:	ce 01       	movw	r24, r28
    6d4c:	80 0f       	add	r24, r16
    6d4e:	91 1f       	adc	r25, r17
    6d50:	0e 94 72 35 	call	0x6ae4	; 0x6ae4 <ReadEeprom>
    6d54:	89 93       	st	Y+, r24
		}
	}

	if(destAddr==0xffff) return EEPROM_ERROR_BLOCK_NOT_FOUND;			

	for(i=0;i<EEPROM_BLOCK_SIZE;i++){
    6d56:	ce 15       	cp	r28, r14
    6d58:	df 05       	cpc	r29, r15
    6d5a:	b9 f7       	brne	.-18     	; 0x6d4a <EepromReadBlock+0x66>
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
    6d5c:	80 e0       	ldi	r24, 0x00	; 0
    6d5e:	03 c0       	rjmp	.+6      	; 0x6d66 <EepromReadBlock+0x82>
char EepromReadBlock(unsigned int blockId,struct EepromBlockStruct *block){
	unsigned char i;
	unsigned int destAddr=0xffff,id;
	unsigned char *destPtr=(unsigned char *)block;

	if(!isEepromFormatted()) return EEPROM_ERROR_NOT_FORMATTED;
    6d60:	84 e0       	ldi	r24, 0x04	; 4
    6d62:	01 c0       	rjmp	.+2      	; 0x6d66 <EepromReadBlock+0x82>
	if(blockId==EEPROM_FREE_BLOCK) return EEPROM_ERROR_INVALID_BLOCK;
    6d64:	81 e0       	ldi	r24, 0x01	; 1
		*destPtr=ReadEeprom(destAddr++);
		destPtr++;	
	}
	
	return 0;
}
    6d66:	df 91       	pop	r29
    6d68:	cf 91       	pop	r28
    6d6a:	1f 91       	pop	r17
    6d6c:	0f 91       	pop	r16
    6d6e:	ff 90       	pop	r15
    6d70:	ef 90       	pop	r14
    6d72:	df 90       	pop	r13
    6d74:	08 95       	ret

00006d76 <PatchCommand00>:

/*
 * Command 00: Set envelope speed per frame +127/-128, 0=no enveloppe
 */
void PatchCommand00(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeStep=param;
    6d76:	fc 01       	movw	r30, r24
    6d78:	45 87       	std	Z+13, r20	; 0x0d
    6d7a:	08 95       	ret

00006d7c <PatchCommand01>:
/*
* Command 01: Set noise channel params
*/
void PatchCommand01(struct TrackStruct* track,unsigned char trackNo, char param){
	#if MIXER_CHAN4_TYPE == 0
		mixer.channels.type.noise.barrel=0x0101;
    6d7c:	e2 e4       	ldi	r30, 0x42	; 66
    6d7e:	f9 e0       	ldi	r31, 0x09	; 9
    6d80:	81 e0       	ldi	r24, 0x01	; 1
    6d82:	91 e0       	ldi	r25, 0x01	; 1
    6d84:	95 8b       	std	Z+21, r25	; 0x15
    6d86:	84 8b       	std	Z+20, r24	; 0x14
		mixer.channels.type.noise.params=param;
    6d88:	43 8b       	std	Z+19, r20	; 0x13
    6d8a:	08 95       	ret

00006d8c <PatchCommand05>:
	SetMixerNote(trackNo,track->note);
}
/*
* Command 05: End of note/fx
*/
void PatchCommand05(struct TrackStruct* track,unsigned char trackNo, char param){
    6d8c:	fc 01       	movw	r30, r24
	track->flags&=~(TRACK_FLAGS_PLAYING+TRACK_FLAGS_PRIORITY);	//patchPlaying=false,priority=0	
    6d8e:	90 81       	ld	r25, Z
    6d90:	9f 75       	andi	r25, 0x5F	; 95
    6d92:	90 83       	st	Z, r25
    6d94:	08 95       	ret

00006d96 <PatchCommand06>:
}

/*
* Command 06: Note hold
*/
void PatchCommand06(struct TrackStruct* track,unsigned char trackNo, char param){
    6d96:	fc 01       	movw	r30, r24
	track->flags|=TRACK_FLAGS_HOLD_ENV; //patchEnvelopeHold=true;
    6d98:	90 81       	ld	r25, Z
    6d9a:	90 64       	ori	r25, 0x40	; 64
    6d9c:	90 83       	st	Z, r25
    6d9e:	08 95       	ret

00006da0 <PatchCommand07>:
/*
* Command 07: Set envelope volume
*/

void PatchCommand07(struct TrackStruct* track,unsigned char trackNo, char param){
	track->envelopeVol=param;
    6da0:	fc 01       	movw	r30, r24
    6da2:	44 87       	std	Z+12, r20	; 0x0c
    6da4:	08 95       	ret

00006da6 <PatchCommand09>:
/*
* Command 09: Set tremolo level
*/

void PatchCommand09(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloLevel=param;
    6da6:	fc 01       	movw	r30, r24
    6da8:	47 83       	std	Z+7, r20	; 0x07
    6daa:	08 95       	ret

00006dac <PatchCommand10>:

/*
* Command 10: Set tremolo rate
*/
void PatchCommand10(struct TrackStruct* track,unsigned char trackNo, char param){
	track->tremoloRate=param;
    6dac:	fc 01       	movw	r30, r24
    6dae:	40 87       	std	Z+8, r20	; 0x08
    6db0:	08 95       	ret

00006db2 <PatchCommand11>:

/*
* Command 11: Pitch slide (linear), param= (+/-) half steps to slide to
*/

void PatchCommand11(struct TrackStruct* track,unsigned char trackNo, char param){
    6db2:	1f 93       	push	r17
    6db4:	cf 93       	push	r28
    6db6:	df 93       	push	r29
    6db8:	ec 01       	movw	r28, r24
    6dba:	16 2f       	mov	r17, r22
	//slide to note from current note
	s16 currentStep,targetStep,delta;	
	
	currentStep=pgm_read_word(&(steptable[track->note]));
    6dbc:	29 81       	ldd	r18, Y+1	; 0x01
    6dbe:	30 e0       	ldi	r19, 0x00	; 0
    6dc0:	f9 01       	movw	r30, r18
    6dc2:	ee 0f       	add	r30, r30
    6dc4:	ff 1f       	adc	r31, r31
    6dc6:	e8 5f       	subi	r30, 0xF8	; 248
    6dc8:	f9 48       	sbci	r31, 0x89	; 137
    6dca:	65 91       	lpm	r22, Z+
    6dcc:	74 91       	lpm	r23, Z
	targetStep=pgm_read_word(&(steptable[track->note+param]));	
    6dce:	f9 01       	movw	r30, r18
    6dd0:	e4 0f       	add	r30, r20
    6dd2:	f1 1d       	adc	r31, r1
    6dd4:	47 fd       	sbrc	r20, 7
    6dd6:	fa 95       	dec	r31
    6dd8:	ee 0f       	add	r30, r30
    6dda:	ff 1f       	adc	r31, r31
    6ddc:	e8 5f       	subi	r30, 0xF8	; 248
    6dde:	f9 48       	sbci	r31, 0x89	; 137
    6de0:	85 91       	lpm	r24, Z+
    6de2:	94 91       	lpm	r25, Z
	delta=((targetStep-currentStep)/tracks->slideSpeed);
    6de4:	86 1b       	sub	r24, r22
    6de6:	97 0b       	sbc	r25, r23
    6de8:	60 91 7e 09 	lds	r22, 0x097E
    6dec:	70 e0       	ldi	r23, 0x00	; 0
    6dee:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
	if(delta==0)delta++;
    6df2:	61 15       	cp	r22, r1
    6df4:	71 05       	cpc	r23, r1
    6df6:	11 f4       	brne	.+4      	; 0x6dfc <PatchCommand11+0x4a>
    6df8:	61 e0       	ldi	r22, 0x01	; 1
    6dfa:	70 e0       	ldi	r23, 0x00	; 0

	mixer.channels.all[trackNo].step+=delta;
    6dfc:	86 e0       	ldi	r24, 0x06	; 6
    6dfe:	18 9f       	mul	r17, r24
    6e00:	f0 01       	movw	r30, r0
    6e02:	11 24       	eor	r1, r1
    6e04:	ee 5b       	subi	r30, 0xBE	; 190
    6e06:	f6 4f       	sbci	r31, 0xF6	; 246
    6e08:	81 81       	ldd	r24, Z+1	; 0x01
    6e0a:	92 81       	ldd	r25, Z+2	; 0x02
    6e0c:	86 0f       	add	r24, r22
    6e0e:	97 1f       	adc	r25, r23
    6e10:	92 83       	std	Z+2, r25	; 0x02
    6e12:	81 83       	std	Z+1, r24	; 0x01
	
	track->slideStep=delta;
    6e14:	7b 83       	std	Y+3, r23	; 0x03
    6e16:	6a 83       	std	Y+2, r22	; 0x02
	track->flags|=TRACK_FLAGS_SLIDING;
    6e18:	88 81       	ld	r24, Y
    6e1a:	88 60       	ori	r24, 0x08	; 8
    6e1c:	88 83       	st	Y, r24
	track->slideNote=track->note+param;
    6e1e:	89 81       	ldd	r24, Y+1	; 0x01
    6e20:	48 0f       	add	r20, r24
    6e22:	4c 83       	std	Y+4, r20	; 0x04
}
    6e24:	df 91       	pop	r29
    6e26:	cf 91       	pop	r28
    6e28:	1f 91       	pop	r17
    6e2a:	08 95       	ret

00006e2c <PatchCommand12>:

/*
* Command 11: Pitch slide speed (fixed 4:4)
*/
void PatchCommand12(struct TrackStruct* track,unsigned char trackNo, char param){
	tracks->slideSpeed=param;
    6e2c:	40 93 7e 09 	sts	0x097E, r20
    6e30:	08 95       	ret

00006e32 <PatchCommand02>:
	#endif
}
/*
* Command 02: Set wave
*/
void PatchCommand02(struct TrackStruct* track,unsigned char trackNo, char param){
    6e32:	86 2f       	mov	r24, r22
	SetMixerWave(trackNo,param);
    6e34:	64 2f       	mov	r22, r20
    6e36:	0c 94 b0 3a 	jmp	0x7560	; 0x7560 <SetMixerWave>

00006e3a <PatchCommand03>:
}
/*
* Command 03: Note up * param
*/
void PatchCommand03(struct TrackStruct* track,unsigned char trackNo, char param){
    6e3a:	fc 01       	movw	r30, r24
    6e3c:	86 2f       	mov	r24, r22
	track->note+=param;
    6e3e:	91 81       	ldd	r25, Z+1	; 0x01
    6e40:	64 2f       	mov	r22, r20
    6e42:	69 0f       	add	r22, r25
    6e44:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    6e46:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <SetMixerNote>

00006e4a <PatchCommand04>:
}
/*
* Command 04: Note down * param
*/
void PatchCommand04(struct TrackStruct* track,unsigned char trackNo, char param){
    6e4a:	fc 01       	movw	r30, r24
    6e4c:	86 2f       	mov	r24, r22
	track->note-=param;
    6e4e:	91 81       	ldd	r25, Z+1	; 0x01
    6e50:	69 2f       	mov	r22, r25
    6e52:	64 1b       	sub	r22, r20
    6e54:	61 83       	std	Z+1, r22	; 0x01
	SetMixerNote(trackNo,track->note);
    6e56:	0c 94 99 3a 	jmp	0x7532	; 0x7532 <SetMixerNote>

00006e5a <PatchCommand08>:

/*
* Command 08: Set Note/Pitch
*/

void PatchCommand08(struct TrackStruct* track,unsigned char trackNo, char param){
    6e5a:	0f 93       	push	r16
    6e5c:	1f 93       	push	r17
    6e5e:	cf 93       	push	r28
    6e60:	df 93       	push	r29
    6e62:	1f 92       	push	r1
    6e64:	cd b7       	in	r28, 0x3d	; 61
    6e66:	de b7       	in	r29, 0x3e	; 62
    6e68:	8c 01       	movw	r16, r24
    6e6a:	86 2f       	mov	r24, r22
	SetMixerNote(trackNo,param);
    6e6c:	64 2f       	mov	r22, r20
    6e6e:	49 83       	std	Y+1, r20	; 0x01
    6e70:	0e 94 99 3a 	call	0x7532	; 0x7532 <SetMixerNote>
	track->note=param;
    6e74:	49 81       	ldd	r20, Y+1	; 0x01
    6e76:	f8 01       	movw	r30, r16
    6e78:	41 83       	std	Z+1, r20	; 0x01
	track->flags &= ~(TRACK_FLAGS_SLIDING);	
    6e7a:	80 81       	ld	r24, Z
    6e7c:	87 7f       	andi	r24, 0xF7	; 247
    6e7e:	80 83       	st	Z, r24
}
    6e80:	0f 90       	pop	r0
    6e82:	df 91       	pop	r29
    6e84:	cf 91       	pop	r28
    6e86:	1f 91       	pop	r17
    6e88:	0f 91       	pop	r16
    6e8a:	08 95       	ret

00006e8c <InitMusicPlayer>:

const struct PatchStruct *patchPointers;

void InitMusicPlayer(const struct PatchStruct *patchPointersParam){

	patchPointers=patchPointersParam;
    6e8c:	90 93 ea 09 	sts	0x09EA, r25
    6e90:	80 93 e9 09 	sts	0x09E9, r24

	masterVolume=DEFAULT_MASTER_VOL;
    6e94:	8f e6       	ldi	r24, 0x6F	; 111
    6e96:	80 93 ec 09 	sts	0x09EC, r24
#if MIDI_IN == ENABLED
	UartInitRxBuffer();
	lastMidiInStatus=0;
#endif

	playSong=false;
    6e9a:	10 92 40 09 	sts	0x0940, r1
    6e9e:	e7 e8       	ldi	r30, 0x87	; 135
    6ea0:	f9 e0       	ldi	r31, 0x09	; 9

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6ea2:	80 e1       	ldi	r24, 0x10	; 16
		tracks[t].noteVol=0;
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6ea4:	9f ef       	ldi	r25, 0xFF	; 255
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
    6ea6:	28 e1       	ldi	r18, 0x18	; 24
    6ea8:	df 01       	movw	r26, r30
    6eaa:	1e 97       	sbiw	r26, 0x0e	; 14

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
		tracks[t].flags=TRACK_FLAGS_ALLOCATED;	//allocated=true,priority=0
    6eac:	8c 93       	st	X, r24
    6eae:	1b 96       	adiw	r26, 0x0b	; 11
		tracks[t].noteVol=0;
    6eb0:	1c 92       	st	X, r1
    6eb2:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].expressionVol=DEFAULT_EXPRESSION_VOL;
    6eb4:	9c 93       	st	X, r25
    6eb6:	11 96       	adiw	r26, 0x01	; 1
		tracks[t].trackVol=DEFAULT_TRACK_VOL;
    6eb8:	9c 93       	st	X, r25
		tracks[t].patchNo=DEFAULT_PATCH;
    6eba:	10 82       	st	Z, r1
    6ebc:	12 97       	sbiw	r26, 0x02	; 2
		tracks[t].tremoloRate=24; //~6hz
    6ebe:	2c 93       	st	X, r18
    6ec0:	13 97       	sbiw	r26, 0x03	; 3
		tracks[t].slideSpeed=0x10;
    6ec2:	8c 93       	st	X, r24
    6ec4:	76 96       	adiw	r30, 0x16	; 22
#endif

	playSong=false;

	//initialize default channels patches			
	for(unsigned char t=0;t<CHANNELS;t++){		
    6ec6:	39 e0       	ldi	r19, 0x09	; 9
    6ec8:	e5 3f       	cpi	r30, 0xF5	; 245
    6eca:	f3 07       	cpc	r31, r19
    6ecc:	69 f7       	brne	.-38     	; 0x6ea8 <InitMusicPlayer+0x1c>
		tracks[t].patchNo=DEFAULT_PATCH;
		tracks[t].tremoloRate=24; //~6hz
		tracks[t].slideSpeed=0x10;
	}

}
    6ece:	08 95       	ret

00006ed0 <ReadVarLen>:
}



unsigned int ReadVarLen(const char **songPos)
{
    6ed0:	dc 01       	movw	r26, r24
    unsigned int value;
    unsigned char c;


    if ( (value = pgm_read_byte((*songPos)++)) & 0x80 )
    6ed2:	ed 91       	ld	r30, X+
    6ed4:	fc 91       	ld	r31, X
    6ed6:	11 97       	sbiw	r26, 0x01	; 1
    6ed8:	9f 01       	movw	r18, r30
    6eda:	2f 5f       	subi	r18, 0xFF	; 255
    6edc:	3f 4f       	sbci	r19, 0xFF	; 255
    6ede:	11 96       	adiw	r26, 0x01	; 1
    6ee0:	3c 93       	st	X, r19
    6ee2:	2e 93       	st	-X, r18
    6ee4:	e4 91       	lpm	r30, Z
    6ee6:	e7 fd       	sbrc	r30, 7
    6ee8:	03 c0       	rjmp	.+6      	; 0x6ef0 <ReadVarLen+0x20>
    6eea:	8e 2f       	mov	r24, r30
    6eec:	90 e0       	ldi	r25, 0x00	; 0
    6eee:	08 95       	ret
    {
       value &= 0x7F;
    6ef0:	ef 77       	andi	r30, 0x7F	; 127
    6ef2:	8e 2f       	mov	r24, r30
    6ef4:	90 e0       	ldi	r25, 0x00	; 0
       do
       {
         value = (value << 7) + ((c = pgm_read_byte((*songPos)++)) & 0x7F);
    6ef6:	96 95       	lsr	r25
    6ef8:	98 2f       	mov	r25, r24
    6efa:	88 27       	eor	r24, r24
    6efc:	97 95       	ror	r25
    6efe:	87 95       	ror	r24
    6f00:	2f 5f       	subi	r18, 0xFF	; 255
    6f02:	3f 4f       	sbci	r19, 0xFF	; 255
    6f04:	f9 01       	movw	r30, r18
    6f06:	31 97       	sbiw	r30, 0x01	; 1
    6f08:	e4 91       	lpm	r30, Z
    6f0a:	4e 2f       	mov	r20, r30
    6f0c:	4f 77       	andi	r20, 0x7F	; 127
    6f0e:	84 0f       	add	r24, r20
    6f10:	91 1d       	adc	r25, r1
       } while (c & 0x80);
    6f12:	e7 fd       	sbrc	r30, 7
    6f14:	f0 cf       	rjmp	.-32     	; 0x6ef6 <ReadVarLen+0x26>
    6f16:	2d 93       	st	X+, r18
    6f18:	3c 93       	st	X, r19
    }


    return value;
}
    6f1a:	08 95       	ret

00006f1c <TriggerCommon>:




void TriggerCommon(u8 channel,u8 patch,u8 volume,u8 note){
    6f1c:	cf 92       	push	r12
    6f1e:	df 92       	push	r13
    6f20:	ff 92       	push	r15
    6f22:	0f 93       	push	r16
    6f24:	1f 93       	push	r17
    6f26:	cf 93       	push	r28
    6f28:	df 93       	push	r29
    6f2a:	1f 92       	push	r1
    6f2c:	cd b7       	in	r28, 0x3d	; 61
    6f2e:	de b7       	in	r29, 0x3e	; 62
    6f30:	18 2f       	mov	r17, r24
    6f32:	06 2f       	mov	r16, r22
	struct TrackStruct* track=&tracks[channel];
		
	bool isFx = (track->flags&TRACK_FLAGS_PRIORITY);
    6f34:	c8 2e       	mov	r12, r24
    6f36:	d1 2c       	mov	r13, r1
    6f38:	36 e1       	ldi	r19, 0x16	; 22
    6f3a:	83 9f       	mul	r24, r19
    6f3c:	f0 01       	movw	r30, r0
    6f3e:	11 24       	eor	r1, r1
    6f40:	e7 58       	subi	r30, 0x87	; 135
    6f42:	f6 4f       	sbci	r31, 0xF6	; 246
    6f44:	80 81       	ld	r24, Z
    6f46:	f8 2e       	mov	r15, r24
    6f48:	ff 1c       	adc	r15, r15
    6f4a:	ff 24       	eor	r15, r15
    6f4c:	ff 1c       	adc	r15, r15

	track->patchCurrDeltaTime=0;
    6f4e:	12 8a       	std	Z+18, r1	; 0x12
	track->envelopeStep=0; 
    6f50:	15 86       	std	Z+13, r1	; 0x0d
	track->envelopeVol=0xff; 
    6f52:	9f ef       	ldi	r25, 0xFF	; 255
    6f54:	94 87       	std	Z+12, r25	; 0x0c
	track->noteVol=volume;
    6f56:	43 87       	std	Z+11, r20	; 0x0b
	track->patchPlayingTime=0;
    6f58:	13 8a       	std	Z+19, r1	; 0x13
	track->flags|=TRACK_FLAGS_PLAYING;
	track->flags&=(~(TRACK_FLAGS_HOLD_ENV|TRACK_FLAGS_SLIDING));
    6f5a:	87 7b       	andi	r24, 0xB7	; 183
    6f5c:	80 62       	ori	r24, 0x20	; 32
    6f5e:	80 83       	st	Z, r24
	track->tremoloLevel=0;
    6f60:	17 82       	std	Z+7, r1	; 0x07
	track->expressionVol=DEFAULT_EXPRESSION_VOL;
    6f62:	91 87       	std	Z+9, r25	; 0x09
	track->note=note;
    6f64:	21 83       	std	Z+1, r18	; 0x01


	#if SOUND_MIXER == MIXER_TYPE_INLINE

		if(channel==3){
    6f66:	13 30       	cpi	r17, 0x03	; 3
    6f68:	69 f4       	brne	.+26     	; 0x6f84 <TriggerCommon+0x68>
			//noise channel		
			if(!isFx) patch=note;			
    6f6a:	f1 10       	cpse	r15, r1
    6f6c:	01 c0       	rjmp	.+2      	; 0x6f70 <TriggerCommon+0x54>
    6f6e:	02 2f       	mov	r16, r18
			mixer.channels.type.noise.barrel=0x0101;				
    6f70:	81 e0       	ldi	r24, 0x01	; 1
    6f72:	91 e0       	ldi	r25, 0x01	; 1
    6f74:	90 93 57 09 	sts	0x0957, r25
    6f78:	80 93 56 09 	sts	0x0956, r24
			mixer.channels.type.noise.params=1; //default (15bits,no divider)
    6f7c:	81 e0       	ldi	r24, 0x01	; 1
    6f7e:	80 93 55 09 	sts	0x0955, r24
    6f82:	3c c0       	rjmp	.+120    	; 0x6ffc <TriggerCommon+0xe0>

		#if SOUND_CHANNEL_5_ENABLE==1		

		}else if(channel==4){
    6f84:	14 30       	cpi	r17, 0x04	; 4
    6f86:	09 f0       	breq	.+2      	; 0x6f8a <TriggerCommon+0x6e>
    6f88:	2f c0       	rjmp	.+94     	; 0x6fe8 <TriggerCommon+0xcc>
				//PCM channel					
				mixer.channels.type.pcm.positionFrac=0;
    6f8a:	10 92 5d 09 	sts	0x095D, r1
				const char *pos=(const char*)pgm_read_word(&(patchPointers[patch].pcmData));
    6f8e:	80 91 e9 09 	lds	r24, 0x09E9
    6f92:	90 91 ea 09 	lds	r25, 0x09EA
    6f96:	e9 e0       	ldi	r30, 0x09	; 9
    6f98:	6e 9f       	mul	r22, r30
    6f9a:	80 0d       	add	r24, r0
    6f9c:	91 1d       	adc	r25, r1
    6f9e:	11 24       	eor	r1, r1
    6fa0:	fc 01       	movw	r30, r24
    6fa2:	31 96       	adiw	r30, 0x01	; 1
    6fa4:	65 91       	lpm	r22, Z+
    6fa6:	74 91       	lpm	r23, Z
				mixer.channels.type.pcm.position=pos;				
    6fa8:	70 93 5f 09 	sts	0x095F, r23
    6fac:	60 93 5e 09 	sts	0x095E, r22
				mixer.pcmLoopLenght=pgm_read_word(&(patchPointers[patch].loopEnd))-pgm_read_word(&(patchPointers[patch].loopStart));
    6fb0:	ac 01       	movw	r20, r24
    6fb2:	49 5f       	subi	r20, 0xF9	; 249
    6fb4:	5f 4f       	sbci	r21, 0xFF	; 255
    6fb6:	fa 01       	movw	r30, r20
    6fb8:	a5 91       	lpm	r26, Z+
    6fba:	b4 91       	lpm	r27, Z
    6fbc:	05 96       	adiw	r24, 0x05	; 5
    6fbe:	fc 01       	movw	r30, r24
    6fc0:	85 91       	lpm	r24, Z+
    6fc2:	94 91       	lpm	r25, Z
    6fc4:	a8 1b       	sub	r26, r24
    6fc6:	b9 0b       	sbc	r27, r25
    6fc8:	b0 93 61 09 	sts	0x0961, r27
    6fcc:	a0 93 60 09 	sts	0x0960, r26
				mixer.pcmLoopEnd=pos+pgm_read_word(&(patchPointers[patch].loopEnd));
    6fd0:	fa 01       	movw	r30, r20
    6fd2:	85 91       	lpm	r24, Z+
    6fd4:	94 91       	lpm	r25, Z
    6fd6:	68 0f       	add	r22, r24
    6fd8:	79 1f       	adc	r23, r25
    6fda:	70 93 63 09 	sts	0x0963, r23
    6fde:	60 93 62 09 	sts	0x0962, r22
				SetMixerNote(channel,note);
    6fe2:	62 2f       	mov	r22, r18
    6fe4:	84 e0       	ldi	r24, 0x04	; 4
    6fe6:	08 c0       	rjmp	.+16     	; 0x6ff8 <TriggerCommon+0xdc>
		#endif	

		}else{					
			//wave channels					
			SetMixerWave(channel,0);//default wave
    6fe8:	60 e0       	ldi	r22, 0x00	; 0
    6fea:	81 2f       	mov	r24, r17
    6fec:	29 83       	std	Y+1, r18	; 0x01
    6fee:	0e 94 b0 3a 	call	0x7560	; 0x7560 <SetMixerWave>
			SetMixerNote(channel,note);
    6ff2:	29 81       	ldd	r18, Y+1	; 0x01
    6ff4:	62 2f       	mov	r22, r18
    6ff6:	81 2f       	mov	r24, r17
    6ff8:	0e 94 99 3a 	call	0x7532	; 0x7532 <SetMixerNote>
		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
		track->fxPatchNo=patch;
    6ffc:	86 e1       	ldi	r24, 0x16	; 22
    6ffe:	8c 9d       	mul	r24, r12
    7000:	f0 01       	movw	r30, r0
    7002:	8d 9d       	mul	r24, r13
    7004:	f0 0d       	add	r31, r0
    7006:	11 24       	eor	r1, r1
    7008:	e7 58       	subi	r30, 0x87	; 135
    700a:	f6 4f       	sbci	r31, 0xF6	; 246

		#endif

	#endif //SOUND_MIXER == MIXER_TYPE_INLINE

	if(isFx){
    700c:	ff 20       	and	r15, r15
    700e:	11 f0       	breq	.+4      	; 0x7014 <TriggerCommon+0xf8>
		track->fxPatchNo=patch;
    7010:	07 87       	std	Z+15, r16	; 0x0f
    7012:	01 c0       	rjmp	.+2      	; 0x7016 <TriggerCommon+0xfa>
	}else{
		track->patchNo=patch;	
    7014:	06 87       	std	Z+14, r16	; 0x0e
	}

	const char *pos = (const char*)pgm_read_word(&(patchPointers[patch].cmdStream));
    7016:	e0 91 e9 09 	lds	r30, 0x09E9
    701a:	f0 91 ea 09 	lds	r31, 0x09EA
    701e:	39 e0       	ldi	r19, 0x09	; 9
    7020:	03 9f       	mul	r16, r19
    7022:	e0 0d       	add	r30, r0
    7024:	f1 1d       	adc	r31, r1
    7026:	11 24       	eor	r1, r1
    7028:	33 96       	adiw	r30, 0x03	; 3
    702a:	85 91       	lpm	r24, Z+
    702c:	94 91       	lpm	r25, Z
	if(pos==NULL){
    702e:	00 97       	sbiw	r24, 0x00	; 0
    7030:	59 f4       	brne	.+22     	; 0x7048 <TriggerCommon+0x12c>
		track->patchCommandStreamPos=NULL;
    7032:	86 e1       	ldi	r24, 0x16	; 22
    7034:	8c 9d       	mul	r24, r12
    7036:	f0 01       	movw	r30, r0
    7038:	8d 9d       	mul	r24, r13
    703a:	f0 0d       	add	r31, r0
    703c:	11 24       	eor	r1, r1
    703e:	e7 58       	subi	r30, 0x87	; 135
    7040:	f6 4f       	sbci	r31, 0xF6	; 246
    7042:	15 8a       	std	Z+21, r1	; 0x15
    7044:	14 8a       	std	Z+20, r1	; 0x14
    7046:	0e c0       	rjmp	.+28     	; 0x7064 <TriggerCommon+0x148>
	}else{
		track->patchNextDeltaTime=pgm_read_byte(pos++);
    7048:	fc 01       	movw	r30, r24
    704a:	24 91       	lpm	r18, Z
    704c:	36 e1       	ldi	r19, 0x16	; 22
    704e:	3c 9d       	mul	r19, r12
    7050:	f0 01       	movw	r30, r0
    7052:	3d 9d       	mul	r19, r13
    7054:	f0 0d       	add	r31, r0
    7056:	11 24       	eor	r1, r1
    7058:	e7 58       	subi	r30, 0x87	; 135
    705a:	f6 4f       	sbci	r31, 0xF6	; 246
    705c:	21 8b       	std	Z+17, r18	; 0x11
    705e:	01 96       	adiw	r24, 0x01	; 1
		track->patchCommandStreamPos=pos;
    7060:	95 8b       	std	Z+21, r25	; 0x15
    7062:	84 8b       	std	Z+20, r24	; 0x14
	}

}
    7064:	0f 90       	pop	r0
    7066:	df 91       	pop	r29
    7068:	cf 91       	pop	r28
    706a:	1f 91       	pop	r17
    706c:	0f 91       	pop	r16
    706e:	ff 90       	pop	r15
    7070:	df 90       	pop	r13
    7072:	cf 90       	pop	r12
    7074:	08 95       	ret

00007076 <TriggerNote>:
	tracks[channel].flags|=TRACK_FLAGS_PRIORITY; //priority=1;	
	TriggerCommon(channel,patch,volume,80);
}


void TriggerNote(unsigned char channel,unsigned char patch,unsigned char note,unsigned char volume){
    7076:	32 2f       	mov	r19, r18

	//allow only other music notes 
	if((tracks[channel].flags&TRACK_FLAGS_PLAYING)==0 || (tracks[channel].flags&TRACK_FLAGS_PRIORITY)==0){
    7078:	a8 2f       	mov	r26, r24
    707a:	b0 e0       	ldi	r27, 0x00	; 0
    707c:	96 e1       	ldi	r25, 0x16	; 22
    707e:	89 9f       	mul	r24, r25
    7080:	f0 01       	movw	r30, r0
    7082:	11 24       	eor	r1, r1
    7084:	e7 58       	subi	r30, 0x87	; 135
    7086:	f6 4f       	sbci	r31, 0xF6	; 246
    7088:	90 81       	ld	r25, Z
    708a:	95 ff       	sbrs	r25, 5
    708c:	02 c0       	rjmp	.+4      	; 0x7092 <TriggerNote+0x1c>
    708e:	97 fd       	sbrc	r25, 7
    7090:	28 c0       	rjmp	.+80     	; 0x70e2 <TriggerNote+0x6c>
			
		if(volume==0){ //note-off received
    7092:	31 11       	cpse	r19, r1
    7094:	18 c0       	rjmp	.+48     	; 0x70c6 <TriggerNote+0x50>

			
			//cut note if there's no envelope & no note hold
			if(tracks[channel].envelopeStep==0 && !(tracks[channel].flags&TRACK_FLAGS_HOLD_ENV)){
    7096:	86 e1       	ldi	r24, 0x16	; 22
    7098:	8a 9f       	mul	r24, r26
    709a:	f0 01       	movw	r30, r0
    709c:	8b 9f       	mul	r24, r27
    709e:	f0 0d       	add	r31, r0
    70a0:	11 24       	eor	r1, r1
    70a2:	e7 58       	subi	r30, 0x87	; 135
    70a4:	f6 4f       	sbci	r31, 0xF6	; 246
    70a6:	85 85       	ldd	r24, Z+13	; 0x0d
    70a8:	81 11       	cpse	r24, r1
    70aa:	02 c0       	rjmp	.+4      	; 0x70b0 <TriggerNote+0x3a>
    70ac:	96 ff       	sbrs	r25, 6
				tracks[channel].noteVol=0;	
    70ae:	13 86       	std	Z+11, r1	; 0x0b
			}

			tracks[channel].flags&=(~TRACK_FLAGS_HOLD_ENV);//patchEnvelopeHold=false;
    70b0:	86 e1       	ldi	r24, 0x16	; 22
    70b2:	8a 9f       	mul	r24, r26
    70b4:	f0 01       	movw	r30, r0
    70b6:	8b 9f       	mul	r24, r27
    70b8:	f0 0d       	add	r31, r0
    70ba:	11 24       	eor	r1, r1
    70bc:	e7 58       	subi	r30, 0x87	; 135
    70be:	f6 4f       	sbci	r31, 0xF6	; 246
    70c0:	9f 7b       	andi	r25, 0xBF	; 191
    70c2:	90 83       	st	Z, r25
    70c4:	08 95       	ret
		}else{
		
			tracks[channel].flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;	
    70c6:	26 e1       	ldi	r18, 0x16	; 22
    70c8:	2a 9f       	mul	r18, r26
    70ca:	f0 01       	movw	r30, r0
    70cc:	2b 9f       	mul	r18, r27
    70ce:	f0 0d       	add	r31, r0
    70d0:	11 24       	eor	r1, r1
    70d2:	e7 58       	subi	r30, 0x87	; 135
    70d4:	f6 4f       	sbci	r31, 0xF6	; 246
    70d6:	9f 77       	andi	r25, 0x7F	; 127
    70d8:	90 83       	st	Z, r25
			TriggerCommon(channel,patch,volume,note);
    70da:	24 2f       	mov	r18, r20
    70dc:	43 2f       	mov	r20, r19
    70de:	0c 94 8e 37 	jmp	0x6f1c	; 0x6f1c <TriggerCommon>
    70e2:	08 95       	ret

000070e4 <ProcessMusic>:
	}

#endif


void ProcessMusic(void){
    70e4:	5f 92       	push	r5
    70e6:	6f 92       	push	r6
    70e8:	7f 92       	push	r7
    70ea:	8f 92       	push	r8
    70ec:	9f 92       	push	r9
    70ee:	af 92       	push	r10
    70f0:	bf 92       	push	r11
    70f2:	cf 92       	push	r12
    70f4:	df 92       	push	r13
    70f6:	ef 92       	push	r14
    70f8:	ff 92       	push	r15
    70fa:	0f 93       	push	r16
    70fc:	1f 93       	push	r17
    70fe:	cf 93       	push	r28
    7100:	df 93       	push	r29
    7102:	c9 e7       	ldi	r28, 0x79	; 121
    7104:	d9 e0       	ldi	r29, 0x09	; 9
    7106:	82 e4       	ldi	r24, 0x42	; 66
    7108:	e8 2e       	mov	r14, r24
    710a:	89 e0       	ldi	r24, 0x09	; 9
    710c:	f8 2e       	mov	r15, r24
    710e:	d7 01       	movw	r26, r14
    7110:	9e 01       	movw	r18, r28
    7112:	40 e0       	ldi	r20, 0x00	; 0
    7114:	50 e0       	ldi	r21, 0x00	; 0
    7116:	ca 01       	movw	r24, r20
    7118:	87 58       	subi	r24, 0x87	; 135
    711a:	96 4f       	sbci	r25, 0xF6	; 246
    711c:	6c 01       	movw	r12, r24
	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//update envelope
		if(track->envelopeStep!=0){
    711e:	fc 01       	movw	r30, r24
    7120:	85 85       	ldd	r24, Z+13	; 0x0d
    7122:	88 23       	and	r24, r24
    7124:	91 f0       	breq	.+36     	; 0x714a <ProcessMusic+0x66>
			vol=track->envelopeVol+track->envelopeStep;		
    7126:	64 85       	ldd	r22, Z+12	; 0x0c
    7128:	99 27       	eor	r25, r25
    712a:	87 fd       	sbrc	r24, 7
    712c:	90 95       	com	r25
    712e:	86 0f       	add	r24, r22
    7130:	91 1d       	adc	r25, r1
    7132:	8f 3f       	cpi	r24, 0xFF	; 255
    7134:	91 05       	cpc	r25, r1
    7136:	19 f0       	breq	.+6      	; 0x713e <ProcessMusic+0x5a>
    7138:	14 f0       	brlt	.+4      	; 0x713e <ProcessMusic+0x5a>
    713a:	8f ef       	ldi	r24, 0xFF	; 255
    713c:	90 e0       	ldi	r25, 0x00	; 0
    713e:	97 ff       	sbrs	r25, 7
    7140:	02 c0       	rjmp	.+4      	; 0x7146 <ProcessMusic+0x62>
    7142:	80 e0       	ldi	r24, 0x00	; 0
    7144:	90 e0       	ldi	r25, 0x00	; 0
			if(vol<0){
				vol=0;			
			}else if(vol>0xff){
				vol=0xff;						
			}
			track->envelopeVol=vol;
    7146:	f6 01       	movw	r30, r12
    7148:	84 87       	std	Z+12, r24	; 0x0c
		}
	
		if(track->flags & TRACK_FLAGS_SLIDING){
    714a:	f9 01       	movw	r30, r18
    714c:	10 81       	ld	r17, Z
    714e:	13 ff       	sbrs	r17, 3
    7150:	29 c0       	rjmp	.+82     	; 0x71a4 <ProcessMusic+0xc0>

			mixer.channels.all[trackNo].step+=track->slideStep;
    7152:	62 81       	ldd	r22, Z+2	; 0x02
    7154:	73 81       	ldd	r23, Z+3	; 0x03
    7156:	11 96       	adiw	r26, 0x01	; 1
    7158:	8d 91       	ld	r24, X+
    715a:	9c 91       	ld	r25, X
    715c:	12 97       	sbiw	r26, 0x02	; 2
    715e:	86 0f       	add	r24, r22
    7160:	97 1f       	adc	r25, r23
    7162:	12 96       	adiw	r26, 0x02	; 2
    7164:	9c 93       	st	X, r25
    7166:	8e 93       	st	-X, r24
    7168:	11 97       	sbiw	r26, 0x01	; 1
			u16 tStep=pgm_read_word(&(steptable[track->slideNote]));
    716a:	f6 01       	movw	r30, r12
    716c:	04 81       	ldd	r16, Z+4	; 0x04
    716e:	e0 2f       	mov	r30, r16
    7170:	f0 e0       	ldi	r31, 0x00	; 0
    7172:	ee 0f       	add	r30, r30
    7174:	ff 1f       	adc	r31, r31
    7176:	e8 5f       	subi	r30, 0xF8	; 248
    7178:	f9 48       	sbci	r31, 0x89	; 137
    717a:	c5 90       	lpm	r12, Z+
    717c:	d4 90       	lpm	r13, Z

			if((track->slideStep>0 && mixer.channels.all[trackNo].step>=tStep) || 
    717e:	16 16       	cp	r1, r22
    7180:	17 06       	cpc	r1, r23
    7182:	24 f4       	brge	.+8      	; 0x718c <ProcessMusic+0xa8>
    7184:	8c 15       	cp	r24, r12
    7186:	9d 05       	cpc	r25, r13
    7188:	30 f4       	brcc	.+12     	; 0x7196 <ProcessMusic+0xb2>
    718a:	0c c0       	rjmp	.+24     	; 0x71a4 <ProcessMusic+0xc0>
    718c:	67 2b       	or	r22, r23
    718e:	51 f0       	breq	.+20     	; 0x71a4 <ProcessMusic+0xc0>
				(track->slideStep<0 && mixer.channels.all[trackNo].step<=tStep))
    7190:	c8 16       	cp	r12, r24
    7192:	d9 06       	cpc	r13, r25
    7194:	38 f0       	brcs	.+14     	; 0x71a4 <ProcessMusic+0xc0>
			{					
				mixer.channels.all[trackNo].step = tStep;					
    7196:	12 96       	adiw	r26, 0x02	; 2
    7198:	dc 92       	st	X, r13
    719a:	ce 92       	st	-X, r12
    719c:	11 97       	sbiw	r26, 0x01	; 1
				track->flags &= ~(TRACK_FLAGS_SLIDING);	
    719e:	17 7f       	andi	r17, 0xF7	; 247
    71a0:	f9 01       	movw	r30, r18
    71a2:	10 83       	st	Z, r17
    71a4:	4a 5e       	subi	r20, 0xEA	; 234
    71a6:	5f 4f       	sbci	r21, 0xFF	; 255
    71a8:	2a 5e       	subi	r18, 0xEA	; 234
    71aa:	3f 4f       	sbci	r19, 0xFF	; 255
    71ac:	16 96       	adiw	r26, 0x06	; 6
	u16 uVol,tVol;
	struct TrackStruct* track;


	//process patches envelopes & pitch slides
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    71ae:	4e 36       	cpi	r20, 0x6E	; 110
    71b0:	51 05       	cpc	r21, r1
    71b2:	09 f0       	breq	.+2      	; 0x71b6 <ProcessMusic+0xd2>
    71b4:	b0 cf       	rjmp	.-160    	; 0x7116 <ProcessMusic+0x32>
	}



	//Process song MIDI notes
	if(playSong){
    71b6:	80 91 40 09 	lds	r24, 0x0940
    71ba:	88 23       	and	r24, r24
    71bc:	09 f4       	brne	.+2      	; 0x71c0 <ProcessMusic+0xdc>
    71be:	cb c0       	rjmp	.+406    	; 0x7356 <ProcessMusic+0x272>
							}else if(c1==CONTROLER_EXPRESSION){
								tracks[channel].expressionVol=c2<<1;
							}else if(c1==CONTROLER_TREMOLO){
								tracks[channel].tremoloLevel=c2<<1;
							}else if(c1==CONTROLER_TREMOLO_RATE){
								tracks[channel].tremoloRate=c2<<1;
    71c0:	16 e1       	ldi	r17, 0x16	; 22

		#if MUSIC_ENGINE == MIDI
			u8 channel;

			//process all simultaneous events
			while(currDeltaTime==nextDeltaTime){
    71c2:	80 91 e7 09 	lds	r24, 0x09E7
    71c6:	90 91 e8 09 	lds	r25, 0x09E8
    71ca:	20 91 ed 09 	lds	r18, 0x09ED
    71ce:	30 91 ee 09 	lds	r19, 0x09EE
    71d2:	82 17       	cp	r24, r18
    71d4:	93 07       	cpc	r25, r19
    71d6:	09 f0       	breq	.+2      	; 0x71da <ProcessMusic+0xf6>
    71d8:	b9 c0       	rjmp	.+370    	; 0x734c <ProcessMusic+0x268>

				c1=pgm_read_byte(songPos++);
    71da:	20 91 f0 09 	lds	r18, 0x09F0
    71de:	30 91 f1 09 	lds	r19, 0x09F1
    71e2:	b9 01       	movw	r22, r18
    71e4:	6f 5f       	subi	r22, 0xFF	; 255
    71e6:	7f 4f       	sbci	r23, 0xFF	; 255
    71e8:	70 93 f1 09 	sts	0x09F1, r23
    71ec:	60 93 f0 09 	sts	0x09F0, r22
    71f0:	f9 01       	movw	r30, r18
    71f2:	44 91       	lpm	r20, Z
			
				if(c1==0xff){
    71f4:	4f 3f       	cpi	r20, 0xFF	; 255
    71f6:	79 f5       	brne	.+94     	; 0x7256 <ProcessMusic+0x172>
					//META data type event
					c1=pgm_read_byte(songPos++);
    71f8:	a9 01       	movw	r20, r18
    71fa:	4e 5f       	subi	r20, 0xFE	; 254
    71fc:	5f 4f       	sbci	r21, 0xFF	; 255
    71fe:	50 93 f1 09 	sts	0x09F1, r21
    7202:	40 93 f0 09 	sts	0x09F0, r20
    7206:	fb 01       	movw	r30, r22
    7208:	64 91       	lpm	r22, Z

				
					if(c1==0x2f){ //end of song
    720a:	6f 32       	cpi	r22, 0x2F	; 47
    720c:	19 f4       	brne	.+6      	; 0x7214 <ProcessMusic+0x130>
						playSong=false;
    720e:	10 92 40 09 	sts	0x0940, r1
						break;	
    7212:	9c c0       	rjmp	.+312    	; 0x734c <ProcessMusic+0x268>
					}else if(c1==0x6){ //marker
    7214:	66 30       	cpi	r22, 0x06	; 6
    7216:	09 f0       	breq	.+2      	; 0x721a <ProcessMusic+0x136>
    7218:	8c c0       	rjmp	.+280    	; 0x7332 <ProcessMusic+0x24e>
						c1=pgm_read_byte(songPos++); //read len
    721a:	fa 01       	movw	r30, r20
    721c:	44 91       	lpm	r20, Z
						c2=pgm_read_byte(songPos++); //read data
    721e:	c9 01       	movw	r24, r18
    7220:	04 96       	adiw	r24, 0x04	; 4
    7222:	90 93 f1 09 	sts	0x09F1, r25
    7226:	80 93 f0 09 	sts	0x09F0, r24
				
					if(c1==0x2f){ //end of song
						playSong=false;
						break;	
					}else if(c1==0x6){ //marker
						c1=pgm_read_byte(songPos++); //read len
    722a:	f9 01       	movw	r30, r18
    722c:	33 96       	adiw	r30, 0x03	; 3
						c2=pgm_read_byte(songPos++); //read data
    722e:	e4 91       	lpm	r30, Z
						if(c2=='S'){ //loop start
    7230:	e3 35       	cpi	r30, 0x53	; 83
    7232:	29 f4       	brne	.+10     	; 0x723e <ProcessMusic+0x15a>
							loopStart=songPos;
    7234:	90 93 f3 09 	sts	0x09F3, r25
    7238:	80 93 f2 09 	sts	0x09F2, r24
    723c:	7a c0       	rjmp	.+244    	; 0x7332 <ProcessMusic+0x24e>
						}else if(c2=='E'){//loop end
    723e:	e5 34       	cpi	r30, 0x45	; 69
    7240:	09 f0       	breq	.+2      	; 0x7244 <ProcessMusic+0x160>
    7242:	77 c0       	rjmp	.+238    	; 0x7332 <ProcessMusic+0x24e>
							songPos=loopStart;
    7244:	80 91 f2 09 	lds	r24, 0x09F2
    7248:	90 91 f3 09 	lds	r25, 0x09F3
    724c:	90 93 f1 09 	sts	0x09F1, r25
    7250:	80 93 f0 09 	sts	0x09F0, r24
    7254:	6e c0       	rjmp	.+220    	; 0x7332 <ProcessMusic+0x24e>
					}
				

				}else{

					if(c1&0x80) lastStatus=c1;					
    7256:	47 fd       	sbrc	r20, 7
    7258:	40 93 eb 09 	sts	0x09EB, r20
					channel=lastStatus&0x0f;
    725c:	90 91 eb 09 	lds	r25, 0x09EB
    7260:	89 2f       	mov	r24, r25
    7262:	8f 70       	andi	r24, 0x0F	; 15
				
					//get next data byte
					//Note: maybe we should not advance the cursor
					//in case we receive an unsupported command				
					if(c1&0x80) c1=pgm_read_byte(songPos++); 
    7264:	47 ff       	sbrs	r20, 7
    7266:	08 c0       	rjmp	.+16     	; 0x7278 <ProcessMusic+0x194>
    7268:	2e 5f       	subi	r18, 0xFE	; 254
    726a:	3f 4f       	sbci	r19, 0xFF	; 255
    726c:	30 93 f1 09 	sts	0x09F1, r19
    7270:	20 93 f0 09 	sts	0x09F0, r18
    7274:	fb 01       	movw	r30, r22
    7276:	44 91       	lpm	r20, Z

					switch(lastStatus&0xf0){
    7278:	90 7f       	andi	r25, 0xF0	; 240
    727a:	90 3b       	cpi	r25, 0xB0	; 176
    727c:	e1 f0       	breq	.+56     	; 0x72b6 <ProcessMusic+0x1d2>
    727e:	90 3c       	cpi	r25, 0xC0	; 192
    7280:	09 f4       	brne	.+2      	; 0x7284 <ProcessMusic+0x1a0>
    7282:	51 c0       	rjmp	.+162    	; 0x7326 <ProcessMusic+0x242>
    7284:	90 39       	cpi	r25, 0x90	; 144
    7286:	09 f0       	breq	.+2      	; 0x728a <ProcessMusic+0x1a6>
    7288:	54 c0       	rjmp	.+168    	; 0x7332 <ProcessMusic+0x24e>

						//note-on
						case 0x90:
							//c1 = note						
							c2=pgm_read_byte(songPos++)<<1; //get volume
    728a:	e0 91 f0 09 	lds	r30, 0x09F0
    728e:	f0 91 f1 09 	lds	r31, 0x09F1
    7292:	9f 01       	movw	r18, r30
    7294:	2f 5f       	subi	r18, 0xFF	; 255
    7296:	3f 4f       	sbci	r19, 0xFF	; 255
    7298:	30 93 f1 09 	sts	0x09F1, r19
    729c:	20 93 f0 09 	sts	0x09F0, r18
    72a0:	24 91       	lpm	r18, Z
    72a2:	22 0f       	add	r18, r18
						
							if(tracks[channel].flags|TRACK_FLAGS_ALLOCATED){ //allocated==true
								TriggerNote(channel,tracks[channel].patchNo,c1,c2);
    72a4:	18 9f       	mul	r17, r24
    72a6:	f0 01       	movw	r30, r0
    72a8:	11 24       	eor	r1, r1
    72aa:	e7 58       	subi	r30, 0x87	; 135
    72ac:	f6 4f       	sbci	r31, 0xF6	; 246
    72ae:	66 85       	ldd	r22, Z+14	; 0x0e
    72b0:	0e 94 3b 38 	call	0x7076	; 0x7076 <TriggerNote>
    72b4:	3e c0       	rjmp	.+124    	; 0x7332 <ProcessMusic+0x24e>
							break;

						//controllers
						case 0xb0:
							///c1 = controller #
							c2=pgm_read_byte(songPos++); //get controller value
    72b6:	e0 91 f0 09 	lds	r30, 0x09F0
    72ba:	f0 91 f1 09 	lds	r31, 0x09F1
    72be:	9f 01       	movw	r18, r30
    72c0:	2f 5f       	subi	r18, 0xFF	; 255
    72c2:	3f 4f       	sbci	r19, 0xFF	; 255
    72c4:	30 93 f1 09 	sts	0x09F1, r19
    72c8:	20 93 f0 09 	sts	0x09F0, r18
    72cc:	e4 91       	lpm	r30, Z
						
							if(c1==CONTROLER_VOL){
    72ce:	47 30       	cpi	r20, 0x07	; 7
    72d0:	49 f4       	brne	.+18     	; 0x72e4 <ProcessMusic+0x200>
								tracks[channel].trackVol=c2<<1;
    72d2:	18 9f       	mul	r17, r24
    72d4:	d0 01       	movw	r26, r0
    72d6:	11 24       	eor	r1, r1
    72d8:	a7 58       	subi	r26, 0x87	; 135
    72da:	b6 4f       	sbci	r27, 0xF6	; 246
    72dc:	ee 0f       	add	r30, r30
    72de:	1a 96       	adiw	r26, 0x0a	; 10
    72e0:	ec 93       	st	X, r30
    72e2:	27 c0       	rjmp	.+78     	; 0x7332 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_EXPRESSION){
    72e4:	4b 30       	cpi	r20, 0x0B	; 11
    72e6:	49 f4       	brne	.+18     	; 0x72fa <ProcessMusic+0x216>
								tracks[channel].expressionVol=c2<<1;
    72e8:	18 9f       	mul	r17, r24
    72ea:	d0 01       	movw	r26, r0
    72ec:	11 24       	eor	r1, r1
    72ee:	a7 58       	subi	r26, 0x87	; 135
    72f0:	b6 4f       	sbci	r27, 0xF6	; 246
    72f2:	ee 0f       	add	r30, r30
    72f4:	19 96       	adiw	r26, 0x09	; 9
    72f6:	ec 93       	st	X, r30
    72f8:	1c c0       	rjmp	.+56     	; 0x7332 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO){
    72fa:	4c 35       	cpi	r20, 0x5C	; 92
    72fc:	49 f4       	brne	.+18     	; 0x7310 <ProcessMusic+0x22c>
								tracks[channel].tremoloLevel=c2<<1;
    72fe:	18 9f       	mul	r17, r24
    7300:	d0 01       	movw	r26, r0
    7302:	11 24       	eor	r1, r1
    7304:	a7 58       	subi	r26, 0x87	; 135
    7306:	b6 4f       	sbci	r27, 0xF6	; 246
    7308:	ee 0f       	add	r30, r30
    730a:	17 96       	adiw	r26, 0x07	; 7
    730c:	ec 93       	st	X, r30
    730e:	11 c0       	rjmp	.+34     	; 0x7332 <ProcessMusic+0x24e>
							}else if(c1==CONTROLER_TREMOLO_RATE){
    7310:	44 36       	cpi	r20, 0x64	; 100
    7312:	79 f4       	brne	.+30     	; 0x7332 <ProcessMusic+0x24e>
								tracks[channel].tremoloRate=c2<<1;
    7314:	18 9f       	mul	r17, r24
    7316:	d0 01       	movw	r26, r0
    7318:	11 24       	eor	r1, r1
    731a:	a7 58       	subi	r26, 0x87	; 135
    731c:	b6 4f       	sbci	r27, 0xF6	; 246
    731e:	ee 0f       	add	r30, r30
    7320:	18 96       	adiw	r26, 0x08	; 8
    7322:	ec 93       	st	X, r30
    7324:	06 c0       	rjmp	.+12     	; 0x7332 <ProcessMusic+0x24e>
							break;

						//program change
						case 0xc0:
							// c1 = patch #						
							tracks[channel].patchNo=c1;
    7326:	18 9f       	mul	r17, r24
    7328:	f0 01       	movw	r30, r0
    732a:	11 24       	eor	r1, r1
    732c:	e7 58       	subi	r30, 0x87	; 135
    732e:	f6 4f       	sbci	r31, 0xF6	; 246
    7330:	46 87       	std	Z+14, r20	; 0x0e


				}//end if(c1==0xff)

				//read next delta time
				nextDeltaTime=ReadVarLen(&songPos);			
    7332:	80 ef       	ldi	r24, 0xF0	; 240
    7334:	99 e0       	ldi	r25, 0x09	; 9
    7336:	0e 94 68 37 	call	0x6ed0	; 0x6ed0 <ReadVarLen>
    733a:	90 93 ee 09 	sts	0x09EE, r25
    733e:	80 93 ed 09 	sts	0x09ED, r24
				currDeltaTime=0;
    7342:	10 92 e8 09 	sts	0x09E8, r1
    7346:	10 92 e7 09 	sts	0x09E7, r1
    734a:	3b cf       	rjmp	.-394    	; 0x71c2 <ProcessMusic+0xde>
					}
				#endif

			}//end while
		
			currDeltaTime++;
    734c:	01 96       	adiw	r24, 0x01	; 1
    734e:	90 93 e8 09 	sts	0x09E8, r25
    7352:	80 93 e7 09 	sts	0x09E7, r24
    7356:	9f e7       	ldi	r25, 0x7F	; 127
    7358:	a9 2e       	mov	r10, r25
    735a:	99 e0       	ldi	r25, 0x09	; 9
    735c:	b9 2e       	mov	r11, r25
    735e:	0b e8       	ldi	r16, 0x8B	; 139
    7360:	19 e0       	ldi	r17, 0x09	; 9
    7362:	2a e8       	ldi	r18, 0x8A	; 138
    7364:	c2 2e       	mov	r12, r18
    7366:	29 e0       	ldi	r18, 0x09	; 9
    7368:	d2 2e       	mov	r13, r18
    736a:	3c e8       	ldi	r19, 0x8C	; 140
    736c:	83 2e       	mov	r8, r19
    736e:	39 e0       	ldi	r19, 0x09	; 9
    7370:	93 2e       	mov	r9, r19
	}

#endif


void ProcessMusic(void){
    7372:	51 2c       	mov	r5, r1
					tmp-=128; //convert to unsigned

					tVol=(track->tremoloLevel*tmp)+0x100;
					tVol>>=8;
					
					uVol=(uVol*(0xff-tVol))+0x100;
    7374:	66 24       	eor	r6, r6
    7376:	6a 94       	dec	r6
    7378:	71 2c       	mov	r7, r1
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
		track=&tracks[trackNo];

		//process patch command stream
		if((track->flags & TRACK_FLAGS_HOLD_ENV)==0){	//patchEnvelopeHold==false
    737a:	88 81       	ld	r24, Y
    737c:	86 fd       	sbrc	r24, 6
    737e:	43 c0       	rjmp	.+134    	; 0x7406 <ProcessMusic+0x322>

			if(track->patchCommandStreamPos!=NULL && 
    7380:	8c 89       	ldd	r24, Y+20	; 0x14
    7382:	9d 89       	ldd	r25, Y+21	; 0x15
    7384:	89 2b       	or	r24, r25
    7386:	09 f4       	brne	.+2      	; 0x738a <ProcessMusic+0x2a6>
    7388:	3a c0       	rjmp	.+116    	; 0x73fe <ProcessMusic+0x31a>
    738a:	d8 01       	movw	r26, r16
    738c:	9c 91       	ld	r25, X
    738e:	f6 01       	movw	r30, r12
    7390:	80 81       	ld	r24, Z
    7392:	98 17       	cp	r25, r24
    7394:	08 f4       	brcc	.+2      	; 0x7398 <ProcessMusic+0x2b4>
    7396:	33 c0       	rjmp	.+102    	; 0x73fe <ProcessMusic+0x31a>
				track->patchCurrDeltaTime>=track->patchNextDeltaTime){			

				//process all simultaneous events
				while(track->patchCurrDeltaTime==track->patchNextDeltaTime){	
    7398:	d8 01       	movw	r26, r16
    739a:	9c 91       	ld	r25, X
    739c:	f6 01       	movw	r30, r12
    739e:	80 81       	ld	r24, Z
    73a0:	98 13       	cpse	r25, r24
    73a2:	2d c0       	rjmp	.+90     	; 0x73fe <ProcessMusic+0x31a>
					
					c1=pgm_read_byte(track->patchCommandStreamPos++);
    73a4:	ec 89       	ldd	r30, Y+20	; 0x14
    73a6:	fd 89       	ldd	r31, Y+21	; 0x15
    73a8:	af 01       	movw	r20, r30
    73aa:	4f 5f       	subi	r20, 0xFF	; 255
    73ac:	5f 4f       	sbci	r21, 0xFF	; 255
    73ae:	5d 8b       	std	Y+21, r21	; 0x15
    73b0:	4c 8b       	std	Y+20, r20	; 0x14
    73b2:	84 91       	lpm	r24, Z
					if(c1==0xff){					
    73b4:	8f 3f       	cpi	r24, 0xFF	; 255
    73b6:	31 f4       	brne	.+12     	; 0x73c4 <ProcessMusic+0x2e0>
						//end of stream!
						track->flags&=(~TRACK_FLAGS_PRIORITY);// priority=0;
    73b8:	88 81       	ld	r24, Y
    73ba:	8f 77       	andi	r24, 0x7F	; 127
    73bc:	88 83       	st	Y, r24
						track->patchCommandStreamPos=NULL;
    73be:	1d 8a       	std	Y+21, r1	; 0x15
    73c0:	1c 8a       	std	Y+20, r1	; 0x14
						break;
    73c2:	1d c0       	rjmp	.+58     	; 0x73fe <ProcessMusic+0x31a>

					}else{
						c2=pgm_read_byte(track->patchCommandStreamPos++);
    73c4:	32 96       	adiw	r30, 0x02	; 2
    73c6:	fd 8b       	std	Y+21, r31	; 0x15
    73c8:	ec 8b       	std	Y+20, r30	; 0x14
    73ca:	fa 01       	movw	r30, r20
    73cc:	44 91       	lpm	r20, Z
						//invoke patch command function
						( (PatchCommand)pgm_read_word(&patchCommands[c1]) )(track,trackNo,c2);				
    73ce:	e8 2f       	mov	r30, r24
    73d0:	f0 e0       	ldi	r31, 0x00	; 0
    73d2:	ee 0f       	add	r30, r30
    73d4:	ff 1f       	adc	r31, r31
    73d6:	e0 53       	subi	r30, 0x30	; 48
    73d8:	ff 4f       	sbci	r31, 0xFF	; 255
    73da:	25 91       	lpm	r18, Z+
    73dc:	34 91       	lpm	r19, Z
    73de:	65 2d       	mov	r22, r5
    73e0:	ce 01       	movw	r24, r28
    73e2:	f9 01       	movw	r30, r18
    73e4:	09 95       	icall
					}			
			
					//read next delta time
					track->patchNextDeltaTime=pgm_read_byte(track->patchCommandStreamPos++);						
    73e6:	ec 89       	ldd	r30, Y+20	; 0x14
    73e8:	fd 89       	ldd	r31, Y+21	; 0x15
    73ea:	cf 01       	movw	r24, r30
    73ec:	01 96       	adiw	r24, 0x01	; 1
    73ee:	9d 8b       	std	Y+21, r25	; 0x15
    73f0:	8c 8b       	std	Y+20, r24	; 0x14
    73f2:	e4 91       	lpm	r30, Z
    73f4:	d6 01       	movw	r26, r12
    73f6:	ec 93       	st	X, r30
					
					track->patchCurrDeltaTime=0;	
    73f8:	f8 01       	movw	r30, r16
    73fa:	10 82       	st	Z, r1
    73fc:	cd cf       	rjmp	.-102    	; 0x7398 <ProcessMusic+0x2b4>

				}		
			}				
			
			track->patchCurrDeltaTime++;
    73fe:	d8 01       	movw	r26, r16
    7400:	8c 91       	ld	r24, X
    7402:	8f 5f       	subi	r24, 0xFF	; 255
    7404:	8c 93       	st	X, r24
		}
	


		if(track->flags & TRACK_FLAGS_PLAYING){
    7406:	98 81       	ld	r25, Y
    7408:	95 ff       	sbrs	r25, 5
    740a:	6c c0       	rjmp	.+216    	; 0x74e4 <ProcessMusic+0x400>
		
			if(track->patchPlayingTime<0xff){
    740c:	f4 01       	movw	r30, r8
    740e:	80 81       	ld	r24, Z
    7410:	8f 3f       	cpi	r24, 0xFF	; 255
    7412:	11 f0       	breq	.+4      	; 0x7418 <ProcessMusic+0x334>
				track->patchPlayingTime++;
    7414:	8f 5f       	subi	r24, 0xFF	; 255
    7416:	80 83       	st	Z, r24
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
    7418:	97 fd       	sbrc	r25, 7
    741a:	04 c0       	rjmp	.+8      	; 0x7424 <ProcessMusic+0x340>
    741c:	f8 01       	movw	r30, r16
    741e:	38 97       	sbiw	r30, 0x08	; 8
				//if an FX, use full track volume.
				trackVol=0xff;
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
    7420:	90 81       	ld	r25, Z
    7422:	01 c0       	rjmp	.+2      	; 0x7426 <ProcessMusic+0x342>
			}

			//compute final frame volume
			if(track->flags&TRACK_FLAGS_PRIORITY){
				//if an FX, use full track volume.
				trackVol=0xff;
    7424:	9f ef       	ldi	r25, 0xFF	; 255
    7426:	f8 01       	movw	r30, r16
    7428:	37 97       	sbiw	r30, 0x07	; 7
			}else{
				//if regular note, apply MIDI track volume
				trackVol= track->trackVol;
			}
			if(track->noteVol!=0 && track->envelopeVol!=0 && trackVol!=0 && masterVolume!=0){
    742a:	80 81       	ld	r24, Z
    742c:	88 23       	and	r24, r24
    742e:	09 f4       	brne	.+2      	; 0x7432 <ProcessMusic+0x34e>
    7430:	4e c0       	rjmp	.+156    	; 0x74ce <ProcessMusic+0x3ea>
    7432:	31 96       	adiw	r30, 0x01	; 1
    7434:	50 81       	ld	r21, Z
    7436:	55 23       	and	r21, r21
    7438:	09 f4       	brne	.+2      	; 0x743c <ProcessMusic+0x358>
    743a:	49 c0       	rjmp	.+146    	; 0x74ce <ProcessMusic+0x3ea>
    743c:	99 23       	and	r25, r25
    743e:	09 f4       	brne	.+2      	; 0x7442 <ProcessMusic+0x35e>
    7440:	46 c0       	rjmp	.+140    	; 0x74ce <ProcessMusic+0x3ea>
    7442:	40 91 ec 09 	lds	r20, 0x09EC
    7446:	44 23       	and	r20, r20
    7448:	09 f4       	brne	.+2      	; 0x744c <ProcessMusic+0x368>
    744a:	41 c0       	rjmp	.+130    	; 0x74ce <ProcessMusic+0x3ea>

				uVol=(track->noteVol*trackVol)+0x100;
    744c:	89 9f       	mul	r24, r25
    744e:	c0 01       	movw	r24, r0
    7450:	11 24       	eor	r1, r1
    7452:	93 95       	inc	r25
				uVol>>=8;
    7454:	89 2f       	mov	r24, r25
    7456:	99 27       	eor	r25, r25
				uVol=(uVol*track->envelopeVol)+0x100;
    7458:	58 9f       	mul	r21, r24
    745a:	90 01       	movw	r18, r0
    745c:	59 9f       	mul	r21, r25
    745e:	30 0d       	add	r19, r0
    7460:	11 24       	eor	r1, r1
    7462:	c9 01       	movw	r24, r18
    7464:	93 95       	inc	r25
				uVol>>=8;
    7466:	89 2f       	mov	r24, r25
    7468:	99 27       	eor	r25, r25
    746a:	33 97       	sbiw	r30, 0x03	; 3
				uVol=(uVol*track->expressionVol)+0x100;
    746c:	50 81       	ld	r21, Z
    746e:	58 9f       	mul	r21, r24
    7470:	90 01       	movw	r18, r0
    7472:	59 9f       	mul	r21, r25
    7474:	30 0d       	add	r19, r0
    7476:	11 24       	eor	r1, r1
    7478:	33 95       	inc	r19
				uVol>>=8;
    747a:	23 2f       	mov	r18, r19
    747c:	33 27       	eor	r19, r19
				uVol=(uVol*masterVolume)+0x100;
    747e:	42 9f       	mul	r20, r18
    7480:	c0 01       	movw	r24, r0
    7482:	43 9f       	mul	r20, r19
    7484:	90 0d       	add	r25, r0
    7486:	11 24       	eor	r1, r1
    7488:	93 95       	inc	r25
				uVol>>=8;
    748a:	89 2f       	mov	r24, r25
    748c:	99 27       	eor	r25, r25
    748e:	32 97       	sbiw	r30, 0x02	; 2

				if(track->tremoloLevel>0){					
    7490:	20 81       	ld	r18, Z
    7492:	22 23       	and	r18, r18
    7494:	f1 f0       	breq	.+60     	; 0x74d2 <ProcessMusic+0x3ee>
					tmp=pgm_read_byte(&(waves[track->tremoloPos]));
    7496:	d5 01       	movw	r26, r10
    7498:	ec 91       	ld	r30, X
    749a:	f0 e0       	ldi	r31, 0x00	; 0
    749c:	e0 50       	subi	r30, 0x00	; 0
    749e:	f8 48       	sbci	r31, 0x88	; 136
    74a0:	e4 91       	lpm	r30, Z
					tmp-=128; //convert to unsigned
    74a2:	e0 58       	subi	r30, 0x80	; 128

					tVol=(track->tremoloLevel*tmp)+0x100;
    74a4:	2e 9f       	mul	r18, r30
    74a6:	f0 01       	movw	r30, r0
    74a8:	11 24       	eor	r1, r1
    74aa:	f3 95       	inc	r31
					tVol>>=8;
    74ac:	ef 2f       	mov	r30, r31
    74ae:	ff 27       	eor	r31, r31
					
					uVol=(uVol*(0xff-tVol))+0x100;
    74b0:	a3 01       	movw	r20, r6
    74b2:	4e 1b       	sub	r20, r30
    74b4:	5f 0b       	sbc	r21, r31
    74b6:	48 9f       	mul	r20, r24
    74b8:	90 01       	movw	r18, r0
    74ba:	49 9f       	mul	r20, r25
    74bc:	30 0d       	add	r19, r0
    74be:	58 9f       	mul	r21, r24
    74c0:	30 0d       	add	r19, r0
    74c2:	11 24       	eor	r1, r1
    74c4:	c9 01       	movw	r24, r18
    74c6:	93 95       	inc	r25
					uVol>>=8;
    74c8:	89 2f       	mov	r24, r25
    74ca:	99 27       	eor	r25, r25
    74cc:	02 c0       	rjmp	.+4      	; 0x74d2 <ProcessMusic+0x3ee>
				}

			
			}else{
				uVol=0;
    74ce:	80 e0       	ldi	r24, 0x00	; 0
    74d0:	90 e0       	ldi	r25, 0x00	; 0
			}	

			track->tremoloPos+=track->tremoloRate;	
    74d2:	f5 01       	movw	r30, r10
    74d4:	30 81       	ld	r19, Z
    74d6:	f8 01       	movw	r30, r16
    74d8:	3a 97       	sbiw	r30, 0x0a	; 10
    74da:	20 81       	ld	r18, Z
    74dc:	23 0f       	add	r18, r19
    74de:	d5 01       	movw	r26, r10
    74e0:	2c 93       	st	X, r18
    74e2:	02 c0       	rjmp	.+4      	; 0x74e8 <ProcessMusic+0x404>

		}else{
			uVol=0;
    74e4:	80 e0       	ldi	r24, 0x00	; 0
    74e6:	90 e0       	ldi	r25, 0x00	; 0
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
    74e8:	f7 01       	movw	r30, r14
    74ea:	80 83       	st	Z, r24


	//
	// Process patches command streams & final volume
	//	
	for(unsigned char trackNo=0;trackNo<CHANNELS;trackNo++){
    74ec:	53 94       	inc	r5
    74ee:	66 96       	adiw	r28, 0x16	; 22
    74f0:	f6 e0       	ldi	r31, 0x06	; 6
    74f2:	ef 0e       	add	r14, r31
    74f4:	f1 1c       	adc	r15, r1
    74f6:	86 e1       	ldi	r24, 0x16	; 22
    74f8:	a8 0e       	add	r10, r24
    74fa:	b1 1c       	adc	r11, r1
    74fc:	0a 5e       	subi	r16, 0xEA	; 234
    74fe:	1f 4f       	sbci	r17, 0xFF	; 255
    7500:	96 e1       	ldi	r25, 0x16	; 22
    7502:	c9 0e       	add	r12, r25
    7504:	d1 1c       	adc	r13, r1
    7506:	a6 e1       	ldi	r26, 0x16	; 22
    7508:	8a 0e       	add	r8, r26
    750a:	91 1c       	adc	r9, r1
    750c:	b5 e0       	ldi	r27, 0x05	; 5
    750e:	5b 12       	cpse	r5, r27
    7510:	34 cf       	rjmp	.-408    	; 0x737a <ProcessMusic+0x296>
		}
		
		mixer.channels.all[trackNo].volume=(uVol&0xff);
	}
	
}
    7512:	df 91       	pop	r29
    7514:	cf 91       	pop	r28
    7516:	1f 91       	pop	r17
    7518:	0f 91       	pop	r16
    751a:	ff 90       	pop	r15
    751c:	ef 90       	pop	r14
    751e:	df 90       	pop	r13
    7520:	cf 90       	pop	r12
    7522:	bf 90       	pop	r11
    7524:	af 90       	pop	r10
    7526:	9f 90       	pop	r9
    7528:	8f 90       	pop	r8
    752a:	7f 90       	pop	r7
    752c:	6f 90       	pop	r6
    752e:	5f 90       	pop	r5
    7530:	08 95       	ret

00007532 <SetMixerNote>:
; r22: -MIDI note, 69=A5(440) for waves channels (0,1,2)
;      -Noise params for channel 3
;***********************
.section .text.SetMixerNote
SetMixerNote:
	clr r25
    7532:	99 27       	eor	r25, r25
	clr r23
    7534:	77 27       	eor	r23, r23
	#if SOUND_MIXER == MIXER_TYPE_VSYNC
		cpi r24,3
		brlo set_note_waves
		ret		
	#else
		cpi r24,3
    7536:	83 30       	cpi	r24, 0x03	; 3
		brne set_note_waves		
    7538:	09 f4       	brne	.+2      	; 0x753c <set_note_waves>
		ret
    753a:	08 95       	ret

0000753c <set_note_waves>:
	#endif
#endif

set_note_waves:
	;get step for note
	ldi ZL,lo8(steptable)
    753c:	e8 e0       	ldi	r30, 0x08	; 8
	ldi ZH,hi8(steptable)
    753e:	f6 e7       	ldi	r31, 0x76	; 118
	lsl r22
    7540:	66 0f       	add	r22, r22
	rol r23
    7542:	77 1f       	adc	r23, r23
	add ZL,r22
    7544:	e6 0f       	add	r30, r22
	adc ZH,r23	
    7546:	f7 1f       	adc	r31, r23

	lpm r26,Z+
    7548:	a5 91       	lpm	r26, Z+
	lpm r27,Z
    754a:	b4 91       	lpm	r27, Z

	ldi ZL,lo8(mixerStruct)
    754c:	e2 e4       	ldi	r30, 0x42	; 66
	ldi ZH,hi8(mixerStruct)
    754e:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    7550:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24
    7552:	28 9f       	mul	r18, r24
	add ZL,r0
    7554:	e0 0d       	add	r30, r0
	adc ZH,r1
    7556:	f1 1d       	adc	r31, r1
	
	std Z+step_lo,r26
    7558:	a1 83       	std	Z+1, r26	; 0x01
	std Z+step_hi,r27
    755a:	b2 83       	std	Z+2, r27	; 0x02
	
	clr r1
    755c:	11 24       	eor	r1, r1
	

	ret
    755e:	08 95       	ret

00007560 <SetMixerWave>:
;         Noise channel: 0xfe=7 bit lfsr, 0xff=15 bit lfsr
;                 
;***********************
.section .text.SetMixerWave
SetMixerWave:
	clr r25
    7560:	99 27       	eor	r25, r25
	clr r23
    7562:	77 27       	eor	r23, r23

	ldi ZL,lo8(mixerStruct)
    7564:	e2 e4       	ldi	r30, 0x42	; 66
	ldi ZH,hi8(mixerStruct)
    7566:	f9 e0       	ldi	r31, 0x09	; 9
	ldi r18,CHANNEL_STRUCT_SIZE
    7568:	26 e0       	ldi	r18, 0x06	; 6
	mul r18,r24	
    756a:	28 9f       	mul	r18, r24
	add ZL,r0
    756c:	e0 0d       	add	r30, r0
	adc ZH,r1
    756e:	f1 1d       	adc	r31, r1

#if MIXER_CHAN4_TYPE == 0
	cpi r22,0xfe	;7bit lfsr
    7570:	6e 3f       	cpi	r22, 0xFE	; 254
	brne smw1
    7572:	31 f4       	brne	.+12     	; 0x7580 <smw1>
	lds r22,tr4_params
    7574:	60 91 55 09 	lds	r22, 0x0955
	andi r22,0xfe;
    7578:	6e 7f       	andi	r22, 0xFE	; 254
	sts tr4_params,r22
    757a:	60 93 55 09 	sts	0x0955, r22
	rjmp esmw	
    757e:	0b c0       	rjmp	.+22     	; 0x7596 <esmw>

00007580 <smw1>:
smw1:
	cpi r22,0xff	;15bit lfsr
    7580:	6f 3f       	cpi	r22, 0xFF	; 255
	brne smw2
    7582:	31 f4       	brne	.+12     	; 0x7590 <smw2>
	lds r22,tr4_params
    7584:	60 91 55 09 	lds	r22, 0x0955
	ori r22,0xfe;
    7588:	6e 6f       	ori	r22, 0xFE	; 254
	sts tr4_params,r22	
    758a:	60 93 55 09 	sts	0x0955, r22
	rjmp esmw
    758e:	03 c0       	rjmp	.+6      	; 0x7596 <esmw>

00007590 <smw2>:
smw2:
#endif

	ldi r23,hi8(waves)
    7590:	78 e7       	ldi	r23, 0x78	; 120
	add r23,r22
    7592:	76 0f       	add	r23, r22
	std Z+samplepos_hi,r23 ;store path No
    7594:	75 83       	std	Z+5, r23	; 0x05

00007596 <esmw>:

esmw:
	clr r1	
    7596:	11 24       	eor	r1, r1
	ret
    7598:	08 95       	ret
	...

00007600 <DisableSoundEngine>:
; no CPU cycles are consumed.
; C-callable
;*****************************
.section .text.DisableSoundEngine
DisableSoundEngine:	
	ldi r24,0
    7600:	80 e0       	ldi	r24, 0x00	; 0
	sts sound_enabled,r24
    7602:	80 93 41 09 	sts	0x0941, r24
	ret
    7606:	08 95       	ret

00007608 <steptable>:
    7608:	22 00       	.word	0x0022	; ????
    760a:	24 00       	.word	0x0024	; ????
    760c:	26 00       	.word	0x0026	; ????
    760e:	28 00       	.word	0x0028	; ????
    7610:	2b 00       	.word	0x002b	; ????
    7612:	2d 00       	.word	0x002d	; ????
    7614:	30 00       	.word	0x0030	; ????
    7616:	33 00       	.word	0x0033	; ????
    7618:	36 00       	.word	0x0036	; ????
    761a:	39 00       	.word	0x0039	; ????
    761c:	3d 00       	.word	0x003d	; ????
    761e:	40 00       	.word	0x0040	; ????
    7620:	44 00       	.word	0x0044	; ????
    7622:	48 00       	.word	0x0048	; ????
    7624:	4c 00       	.word	0x004c	; ????
    7626:	51 00       	.word	0x0051	; ????
    7628:	56 00       	.word	0x0056	; ????
    762a:	5b 00       	.word	0x005b	; ????
    762c:	60 00       	.word	0x0060	; ????
    762e:	66 00       	.word	0x0066	; ????
    7630:	6c 00       	.word	0x006c	; ????
    7632:	73 00       	.word	0x0073	; ????
    7634:	79 00       	.word	0x0079	; ????
    7636:	81 00       	.word	0x0081	; ????
    7638:	88 00       	.word	0x0088	; ????
    763a:	90 00       	.word	0x0090	; ????
    763c:	99 00       	.word	0x0099	; ????
    763e:	a2 00       	.word	0x00a2	; ????
    7640:	ac 00       	.word	0x00ac	; ????
    7642:	b6 00       	.word	0x00b6	; ????
    7644:	c1 00       	.word	0x00c1	; ????
    7646:	cc 00       	.word	0x00cc	; ????
    7648:	d8 00       	.word	0x00d8	; ????
    764a:	e5 00       	.word	0x00e5	; ????
    764c:	f3 00       	.word	0x00f3	; ????
    764e:	01 01       	movw	r0, r2
    7650:	10 01       	movw	r2, r0
    7652:	21 01       	movw	r4, r2
    7654:	32 01       	movw	r6, r4
    7656:	44 01       	movw	r8, r8
    7658:	57 01       	movw	r10, r14
    765a:	6c 01       	movw	r12, r24
    765c:	81 01       	movw	r16, r2
    765e:	98 01       	movw	r18, r16
    7660:	b0 01       	movw	r22, r0
    7662:	ca 01       	movw	r24, r20
    7664:	e5 01       	movw	r28, r10
    7666:	02 02       	muls	r16, r18
    7668:	21 02       	muls	r18, r17
    766a:	41 02       	muls	r20, r17
    766c:	64 02       	muls	r22, r20
    766e:	88 02       	muls	r24, r24
    7670:	ae 02       	muls	r26, r30
    7672:	d7 02       	muls	r29, r23
    7674:	03 03       	mulsu	r16, r19
    7676:	30 03       	mulsu	r19, r16
    7678:	61 03       	mulsu	r22, r17
    767a:	94 03       	fmuls	r17, r20
    767c:	cb 03       	fmulsu	r20, r19
    767e:	05 04       	cpc	r0, r5
    7680:	42 04       	cpc	r4, r2
    7682:	83 04       	cpc	r8, r3
    7684:	c7 04       	cpc	r12, r7
    7686:	10 05       	cpc	r17, r0
    7688:	5d 05       	cpc	r21, r13
    768a:	af 05       	cpc	r26, r15
    768c:	05 06       	cpc	r0, r21
    768e:	61 06       	cpc	r6, r17
    7690:	c2 06       	cpc	r12, r18
    7692:	29 07       	cpc	r18, r25
    7694:	96 07       	cpc	r25, r22
    7696:	09 08       	sbc	r0, r9
    7698:	83 08       	sbc	r8, r3
    769a:	05 09       	sbc	r16, r5
    769c:	8e 09       	sbc	r24, r14
    769e:	20 0a       	sbc	r2, r16
    76a0:	ba 0a       	sbc	r11, r26
    76a2:	5d 0b       	sbc	r21, r29
    76a4:	0a 0c       	add	r0, r10
    76a6:	c1 0c       	add	r12, r1
    76a8:	84 0d       	add	r24, r4
    76aa:	51 0e       	add	r5, r17
    76ac:	2b 0f       	add	r18, r27
    76ae:	12 10       	cpse	r1, r2
    76b0:	07 11       	cpse	r16, r7
    76b2:	0a 12       	cpse	r0, r26
    76b4:	1d 13       	cpse	r17, r29
    76b6:	40 14       	cp	r4, r0
    76b8:	74 15       	cp	r23, r4
    76ba:	ba 16       	cp	r11, r26
    76bc:	14 18       	sub	r1, r4
    76be:	83 19       	sub	r24, r3
    76c0:	07 1b       	sub	r16, r23
    76c2:	a3 1c       	adc	r10, r3
    76c4:	57 1e       	adc	r5, r23
    76c6:	24 20       	and	r2, r4
    76c8:	0e 22       	and	r0, r30
    76ca:	14 24       	eor	r1, r4
    76cc:	39 26       	eor	r3, r25
    76ce:	7f 28       	or	r7, r15
    76d0:	e8 2a       	or	r14, r24
    76d2:	75 2d       	mov	r23, r5
    76d4:	29 30       	cpi	r18, 0x09	; 9
    76d6:	06 33       	cpi	r16, 0x36	; 54
    76d8:	0f 36       	cpi	r16, 0x6F	; 111
    76da:	45 39       	cpi	r20, 0x95	; 149
    76dc:	ad 3c       	cpi	r26, 0xCD	; 205
    76de:	49 40       	sbci	r20, 0x09	; 9
    76e0:	1b 44       	sbci	r17, 0x4B	; 75
    76e2:	28 48       	sbci	r18, 0x88	; 136
    76e4:	73 4c       	sbci	r23, 0xC3	; 195
    76e6:	fe 50       	subi	r31, 0x0E	; 14
    76e8:	cf 55       	subi	r28, 0x5F	; 95
    76ea:	ea 5a       	subi	r30, 0xAA	; 170
    76ec:	51 60       	ori	r21, 0x01	; 1
    76ee:	0c 66       	ori	r16, 0x6C	; 108
    76f0:	1d 6c       	ori	r17, 0xCD	; 205
    76f2:	8b 72       	andi	r24, 0x2B	; 43
    76f4:	5a 79       	andi	r21, 0x9A	; 154
    76f6:	92 80       	ldd	r9, Z+2	; 0x02
    76f8:	37 88       	ldd	r3, Z+23	; 0x17
    76fa:	50 90 e5 98 	lds	r5, 0x98E5
    76fe:	fd a1       	ldd	r31, Y+37	; 0x25
    7700:	9f ab       	std	Y+55, r25	; 0x37
    7702:	d3 b5       	in	r29, 0x23	; 35
    7704:	a3 c0       	rjmp	.+326    	; 0x784c <waves+0x4c>
	...

00007800 <waves>:
    7800:	00 03       	mulsu	r16, r16
    7802:	06 09       	sbc	r16, r6
    7804:	0c 10       	cpse	r0, r12
    7806:	13 16       	cp	r1, r19
    7808:	19 1c       	adc	r1, r9
    780a:	1f 22       	and	r1, r31
    780c:	25 28       	or	r2, r5
    780e:	2b 2e       	mov	r2, r27
    7810:	31 33       	cpi	r19, 0x31	; 49
    7812:	36 39       	cpi	r19, 0x96	; 150
    7814:	3c 3f       	cpi	r19, 0xFC	; 252
    7816:	41 44       	sbci	r20, 0x41	; 65
    7818:	47 49       	sbci	r20, 0x97	; 151
    781a:	4c 4e       	sbci	r20, 0xEC	; 236
    781c:	51 53       	subi	r21, 0x31	; 49
    781e:	55 58       	subi	r21, 0x85	; 133
    7820:	5a 5c       	subi	r21, 0xCA	; 202
    7822:	5e 60       	ori	r21, 0x0E	; 14
    7824:	62 64       	ori	r22, 0x42	; 66
    7826:	66 68       	ori	r22, 0x86	; 134
    7828:	6a 6b       	ori	r22, 0xBA	; 186
    782a:	6d 6f       	ori	r22, 0xFD	; 253
    782c:	70 71       	andi	r23, 0x10	; 16
    782e:	73 74       	andi	r23, 0x43	; 67
    7830:	75 76       	andi	r23, 0x65	; 101
    7832:	78 79       	andi	r23, 0x98	; 152
    7834:	7a 7a       	andi	r23, 0xAA	; 170
    7836:	7b 7c       	andi	r23, 0xCB	; 203
    7838:	7d 7d       	andi	r23, 0xDD	; 221
    783a:	7e 7e       	andi	r23, 0xEE	; 238
    783c:	7e 7f       	andi	r23, 0xFE	; 254
    783e:	7f 7f       	andi	r23, 0xFF	; 255
    7840:	7f 7f       	andi	r23, 0xFF	; 255
    7842:	7f 7f       	andi	r23, 0xFF	; 255
    7844:	7e 7e       	andi	r23, 0xEE	; 238
    7846:	7e 7d       	andi	r23, 0xDE	; 222
    7848:	7d 7c       	andi	r23, 0xCD	; 205
    784a:	7b 7a       	andi	r23, 0xAB	; 171
    784c:	7a 79       	andi	r23, 0x9A	; 154
    784e:	78 76       	andi	r23, 0x68	; 104
    7850:	75 74       	andi	r23, 0x45	; 69
    7852:	73 71       	andi	r23, 0x13	; 19
    7854:	70 6f       	ori	r23, 0xF0	; 240
    7856:	6d 6b       	ori	r22, 0xBD	; 189
    7858:	6a 68       	ori	r22, 0x8A	; 138
    785a:	66 64       	ori	r22, 0x46	; 70
    785c:	62 60       	ori	r22, 0x02	; 2
    785e:	5e 5c       	subi	r21, 0xCE	; 206
    7860:	5a 58       	subi	r21, 0x8A	; 138
    7862:	55 53       	subi	r21, 0x35	; 53
    7864:	51 4e       	sbci	r21, 0xE1	; 225
    7866:	4c 49       	sbci	r20, 0x9C	; 156
    7868:	47 44       	sbci	r20, 0x47	; 71
    786a:	41 3f       	cpi	r20, 0xF1	; 241
    786c:	3c 39       	cpi	r19, 0x9C	; 156
    786e:	36 33       	cpi	r19, 0x36	; 54
    7870:	31 2e       	mov	r3, r17
    7872:	2b 28       	or	r2, r11
    7874:	25 22       	and	r2, r21
    7876:	1f 1c       	adc	r1, r15
    7878:	19 16       	cp	r1, r25
    787a:	13 10       	cpse	r1, r3
    787c:	0c 09       	sbc	r16, r12
    787e:	06 03       	mulsu	r16, r22
    7880:	00 fd       	sbrc	r16, 0
    7882:	fa f7       	brpl	.-2      	; 0x7882 <waves+0x82>
    7884:	f4 f0       	brlt	.+60     	; 0x78c2 <waves+0xc2>
    7886:	ed ea       	ldi	r30, 0xAD	; 173
    7888:	e7 e4       	ldi	r30, 0x47	; 71
    788a:	e1 de       	rcall	.-574    	; 0x764e <steptable+0x46>
    788c:	db d8       	rcall	.-3658   	; 0x6a44 <SetSpritesTileTable>
    788e:	d5 d2       	rcall	.+1450   	; 0x7e3a <waves+0x63a>
    7890:	cf cd       	rjmp	.-1122   	; 0x7430 <ProcessMusic+0x34c>
    7892:	ca c7       	rjmp	.+3988   	; 0x8828 <LBCollides+0x8>
    7894:	c4 c1       	rjmp	.+904    	; 0x7c1e <waves+0x41e>
    7896:	bf bc       	out	0x2f, r11	; 47
    7898:	b9 b7       	in	r27, 0x39	; 57
    789a:	b4 b2       	in	r11, 0x14	; 20
    789c:	af ad       	ldd	r26, Y+63	; 0x3f
    789e:	ab a8       	ldd	r10, Y+51	; 0x33
    78a0:	a6 a4       	ldd	r10, Z+46	; 0x2e
    78a2:	a2 a0       	ldd	r10, Z+34	; 0x22
    78a4:	9e 9c       	mul	r9, r14
    78a6:	9a 98       	cbi	0x13, 2	; 19
    78a8:	96 95       	lsr	r25
    78aa:	93 91       	.word	0x9193	; ????
    78ac:	90 8f       	std	Z+24, r25	; 0x18
    78ae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    78b0:	8b 8a       	std	Y+19, r8	; 0x13
    78b2:	88 87       	std	Y+8, r24	; 0x08
    78b4:	86 86       	std	Z+14, r8	; 0x0e
    78b6:	85 84       	ldd	r8, Z+13	; 0x0d
    78b8:	83 83       	std	Z+3, r24	; 0x03
    78ba:	82 82       	std	Z+2, r8	; 0x02
    78bc:	82 81       	ldd	r24, Z+2	; 0x02
    78be:	81 81       	ldd	r24, Z+1	; 0x01
    78c0:	81 81       	ldd	r24, Z+1	; 0x01
    78c2:	81 81       	ldd	r24, Z+1	; 0x01
    78c4:	82 82       	std	Z+2, r8	; 0x02
    78c6:	82 83       	std	Z+2, r24	; 0x02
    78c8:	83 84       	ldd	r8, Z+11	; 0x0b
    78ca:	85 86       	std	Z+13, r8	; 0x0d
    78cc:	86 87       	std	Z+14, r24	; 0x0e
    78ce:	88 8a       	std	Y+16, r8	; 0x10
    78d0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    78d2:	8d 8f       	std	Y+29, r24	; 0x1d
    78d4:	90 91 93 95 	lds	r25, 0x9593
    78d8:	96 98       	cbi	0x12, 6	; 18
    78da:	9a 9c       	mul	r9, r10
    78dc:	9e a0       	ldd	r9, Y+38	; 0x26
    78de:	a2 a4       	ldd	r10, Z+42	; 0x2a
    78e0:	a6 a8       	ldd	r10, Z+54	; 0x36
    78e2:	ab ad       	ldd	r26, Y+59	; 0x3b
    78e4:	af b2       	in	r10, 0x1f	; 31
    78e6:	b4 b7       	in	r27, 0x34	; 52
    78e8:	b9 bc       	out	0x29, r11	; 41
    78ea:	bf c1       	rjmp	.+894    	; 0x7c6a <waves+0x46a>
    78ec:	c4 c7       	rjmp	.+3976   	; 0x8876 <LBLineIntersect+0x2>
    78ee:	ca cd       	rjmp	.-1132   	; 0x7484 <ProcessMusic+0x3a0>
    78f0:	cf d2       	rcall	.+1438   	; 0x7e90 <waves+0x690>
    78f2:	d5 d8       	rcall	.-3670   	; 0x6a9e <ClearVsyncFlag>
    78f4:	db de       	rcall	.-586    	; 0x76ac <steptable+0xa4>
    78f6:	e1 e4       	ldi	r30, 0x41	; 65
    78f8:	e7 ea       	ldi	r30, 0xA7	; 167
    78fa:	ed f0       	brhs	.+58     	; 0x7936 <waves+0x136>
    78fc:	f4 f7       	brge	.-4      	; 0x78fa <waves+0xfa>
    78fe:	fa fd       	.word	0xfdfa	; ????
    7900:	80 81       	ld	r24, Z
    7902:	82 83       	std	Z+2, r24	; 0x02
    7904:	84 85       	ldd	r24, Z+12	; 0x0c
    7906:	86 87       	std	Z+14, r24	; 0x0e
    7908:	88 89       	ldd	r24, Y+16	; 0x10
    790a:	8a 8b       	std	Y+18, r24	; 0x12
    790c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    790e:	8e 8f       	std	Y+30, r24	; 0x1e
    7910:	90 91 92 93 	lds	r25, 0x9392
    7914:	94 95       	.word	0x9594	; ????
    7916:	96 97       	sbiw	r26, 0x26	; 38
    7918:	98 99       	sbic	0x13, 0	; 19
    791a:	9a 9b       	sbis	0x13, 2	; 19
    791c:	9c 9d       	mul	r25, r12
    791e:	9e 9f       	mul	r25, r30
    7920:	a0 a1       	ldd	r26, Z+32	; 0x20
    7922:	a2 a3       	std	Z+34, r26	; 0x22
    7924:	a4 a5       	ldd	r26, Z+44	; 0x2c
    7926:	a6 a7       	std	Z+46, r26	; 0x2e
    7928:	a8 a9       	ldd	r26, Y+48	; 0x30
    792a:	aa ab       	std	Y+50, r26	; 0x32
    792c:	ac ad       	ldd	r26, Y+60	; 0x3c
    792e:	ae af       	std	Y+62, r26	; 0x3e
    7930:	b0 b1       	in	r27, 0x00	; 0
    7932:	b2 b3       	in	r27, 0x12	; 18
    7934:	b4 b5       	in	r27, 0x24	; 36
    7936:	b6 b7       	in	r27, 0x36	; 54
    7938:	b8 b9       	out	0x08, r27	; 8
    793a:	ba bb       	out	0x1a, r27	; 26
    793c:	bc bd       	out	0x2c, r27	; 44
    793e:	be bf       	out	0x3e, r27	; 62
    7940:	c0 c1       	rjmp	.+896    	; 0x7cc2 <waves+0x4c2>
    7942:	c2 c3       	rjmp	.+1924   	; 0x80c8 <waves+0x8c8>
    7944:	c4 c5       	rjmp	.+2952   	; 0x84ce <InitializeVideoMode+0xe>
    7946:	c6 c7       	rjmp	.+3980   	; 0x88d4 <LBLineIntersect+0x60>
    7948:	c8 c9       	rjmp	.-3184   	; 0x6cda <EepromWriteBlock+0xd0>
    794a:	ca cb       	rjmp	.-2156   	; 0x70e0 <TriggerNote+0x6a>
    794c:	cc cd       	rjmp	.-1128   	; 0x74e6 <ProcessMusic+0x402>
    794e:	ce cf       	rjmp	.-100    	; 0x78ec <waves+0xec>
    7950:	d0 d1       	rcall	.+928    	; 0x7cf2 <waves+0x4f2>
    7952:	d2 d3       	rcall	.+1956   	; 0x80f8 <waves+0x8f8>
    7954:	d4 d5       	rcall	.+2984   	; 0x84fe <DrawMap2+0x2a>
    7956:	d6 d7       	rcall	.+4012   	; 0x8904 <LBLineIntersect+0x90>
    7958:	d8 d9       	rcall	.-3152   	; 0x6d0a <EepromReadBlock+0x26>
    795a:	da db       	rcall	.-2124   	; 0x7110 <ProcessMusic+0x2c>
    795c:	dc dd       	rcall	.-1096   	; 0x7516 <ProcessMusic+0x432>
    795e:	de df       	rcall	.-68     	; 0x791c <waves+0x11c>
    7960:	e0 e1       	ldi	r30, 0x10	; 16
    7962:	e2 e3       	ldi	r30, 0x32	; 50
    7964:	e4 e5       	ldi	r30, 0x54	; 84
    7966:	e6 e7       	ldi	r30, 0x76	; 118
    7968:	e8 e9       	ldi	r30, 0x98	; 152
    796a:	ea eb       	ldi	r30, 0xBA	; 186
    796c:	ec ed       	ldi	r30, 0xDC	; 220
    796e:	ee ef       	ldi	r30, 0xFE	; 254
    7970:	f0 f1       	brcs	.+124    	; 0x79ee <waves+0x1ee>
    7972:	f2 f3       	brmi	.-4      	; 0x7970 <waves+0x170>
    7974:	f4 f5       	brge	.+124    	; 0x79f2 <waves+0x1f2>
    7976:	f6 f7       	brtc	.-4      	; 0x7974 <waves+0x174>
    7978:	f8 f9       	.word	0xf9f8	; ????
    797a:	fa fb       	.word	0xfbfa	; ????
    797c:	fc fd       	.word	0xfdfc	; ????
    797e:	fe ff       	.word	0xfffe	; ????
    7980:	00 01       	movw	r0, r0
    7982:	02 03       	mulsu	r16, r18
    7984:	04 05       	cpc	r16, r4
    7986:	06 07       	cpc	r16, r22
    7988:	08 09       	sbc	r16, r8
    798a:	0a 0b       	sbc	r16, r26
    798c:	0c 0d       	add	r16, r12
    798e:	0e 0f       	add	r16, r30
    7990:	10 11       	cpse	r17, r0
    7992:	12 13       	cpse	r17, r18
    7994:	14 15       	cp	r17, r4
    7996:	16 17       	cp	r17, r22
    7998:	18 19       	sub	r17, r8
    799a:	1a 1b       	sub	r17, r26
    799c:	1c 1d       	adc	r17, r12
    799e:	1e 1f       	adc	r17, r30
    79a0:	20 21       	and	r18, r0
    79a2:	22 23       	and	r18, r18
    79a4:	24 25       	eor	r18, r4
    79a6:	26 27       	eor	r18, r22
    79a8:	28 29       	or	r18, r8
    79aa:	2a 2b       	or	r18, r26
    79ac:	2c 2d       	mov	r18, r12
    79ae:	2e 2f       	mov	r18, r30
    79b0:	30 31       	cpi	r19, 0x10	; 16
    79b2:	32 33       	cpi	r19, 0x32	; 50
    79b4:	34 35       	cpi	r19, 0x54	; 84
    79b6:	36 37       	cpi	r19, 0x76	; 118
    79b8:	38 39       	cpi	r19, 0x98	; 152
    79ba:	3a 3b       	cpi	r19, 0xBA	; 186
    79bc:	3c 3d       	cpi	r19, 0xDC	; 220
    79be:	3e 3f       	cpi	r19, 0xFE	; 254
    79c0:	40 41       	sbci	r20, 0x10	; 16
    79c2:	42 43       	sbci	r20, 0x32	; 50
    79c4:	44 45       	sbci	r20, 0x54	; 84
    79c6:	46 47       	sbci	r20, 0x76	; 118
    79c8:	48 49       	sbci	r20, 0x98	; 152
    79ca:	4a 4b       	sbci	r20, 0xBA	; 186
    79cc:	4c 4d       	sbci	r20, 0xDC	; 220
    79ce:	4e 4f       	sbci	r20, 0xFE	; 254
    79d0:	50 51       	subi	r21, 0x10	; 16
    79d2:	52 53       	subi	r21, 0x32	; 50
    79d4:	54 55       	subi	r21, 0x54	; 84
    79d6:	56 57       	subi	r21, 0x76	; 118
    79d8:	58 59       	subi	r21, 0x98	; 152
    79da:	5a 5b       	subi	r21, 0xBA	; 186
    79dc:	5c 5d       	subi	r21, 0xDC	; 220
    79de:	5e 5f       	subi	r21, 0xFE	; 254
    79e0:	60 61       	ori	r22, 0x10	; 16
    79e2:	62 63       	ori	r22, 0x32	; 50
    79e4:	64 65       	ori	r22, 0x54	; 84
    79e6:	66 67       	ori	r22, 0x76	; 118
    79e8:	68 69       	ori	r22, 0x98	; 152
    79ea:	6a 6b       	ori	r22, 0xBA	; 186
    79ec:	6c 6d       	ori	r22, 0xDC	; 220
    79ee:	6e 6f       	ori	r22, 0xFE	; 254
    79f0:	70 71       	andi	r23, 0x10	; 16
    79f2:	72 73       	andi	r23, 0x32	; 50
    79f4:	74 75       	andi	r23, 0x54	; 84
    79f6:	76 77       	andi	r23, 0x76	; 118
    79f8:	78 79       	andi	r23, 0x98	; 152
    79fa:	7a 7b       	andi	r23, 0xBA	; 186
    79fc:	7c 7d       	andi	r23, 0xDC	; 220
    79fe:	7e 7f       	andi	r23, 0xFE	; 254
    7a00:	00 02       	muls	r16, r16
    7a02:	04 06       	cpc	r0, r20
    7a04:	08 0a       	sbc	r0, r24
    7a06:	0c 0e       	add	r0, r28
    7a08:	10 12       	cpse	r1, r16
    7a0a:	14 16       	cp	r1, r20
    7a0c:	18 1a       	sub	r1, r24
    7a0e:	1c 1e       	adc	r1, r28
    7a10:	20 22       	and	r2, r16
    7a12:	24 26       	eor	r2, r20
    7a14:	28 2a       	or	r2, r24
    7a16:	2c 2e       	mov	r2, r28
    7a18:	30 32       	cpi	r19, 0x20	; 32
    7a1a:	34 36       	cpi	r19, 0x64	; 100
    7a1c:	38 3a       	cpi	r19, 0xA8	; 168
    7a1e:	3c 3e       	cpi	r19, 0xEC	; 236
    7a20:	40 42       	sbci	r20, 0x20	; 32
    7a22:	44 46       	sbci	r20, 0x64	; 100
    7a24:	48 4a       	sbci	r20, 0xA8	; 168
    7a26:	4c 4e       	sbci	r20, 0xEC	; 236
    7a28:	50 52       	subi	r21, 0x20	; 32
    7a2a:	54 56       	subi	r21, 0x64	; 100
    7a2c:	58 5a       	subi	r21, 0xA8	; 168
    7a2e:	5c 5e       	subi	r21, 0xEC	; 236
    7a30:	60 62       	ori	r22, 0x20	; 32
    7a32:	64 66       	ori	r22, 0x64	; 100
    7a34:	68 6a       	ori	r22, 0xA8	; 168
    7a36:	6c 6e       	ori	r22, 0xEC	; 236
    7a38:	70 72       	andi	r23, 0x20	; 32
    7a3a:	74 76       	andi	r23, 0x64	; 100
    7a3c:	78 7a       	andi	r23, 0xA8	; 168
    7a3e:	7c 7e       	andi	r23, 0xEC	; 236
    7a40:	7f 7d       	andi	r23, 0xDF	; 223
    7a42:	7b 79       	andi	r23, 0x9B	; 155
    7a44:	77 75       	andi	r23, 0x57	; 87
    7a46:	73 71       	andi	r23, 0x13	; 19
    7a48:	6f 6d       	ori	r22, 0xDF	; 223
    7a4a:	6b 69       	ori	r22, 0x9B	; 155
    7a4c:	67 65       	ori	r22, 0x57	; 87
    7a4e:	63 61       	ori	r22, 0x13	; 19
    7a50:	5f 5d       	subi	r21, 0xDF	; 223
    7a52:	5b 59       	subi	r21, 0x9B	; 155
    7a54:	57 55       	subi	r21, 0x57	; 87
    7a56:	53 51       	subi	r21, 0x13	; 19
    7a58:	4f 4d       	sbci	r20, 0xDF	; 223
    7a5a:	4b 49       	sbci	r20, 0x9B	; 155
    7a5c:	47 45       	sbci	r20, 0x57	; 87
    7a5e:	43 41       	sbci	r20, 0x13	; 19
    7a60:	3f 3d       	cpi	r19, 0xDF	; 223
    7a62:	3b 39       	cpi	r19, 0x9B	; 155
    7a64:	37 35       	cpi	r19, 0x57	; 87
    7a66:	33 31       	cpi	r19, 0x13	; 19
    7a68:	2f 2d       	mov	r18, r15
    7a6a:	2b 29       	or	r18, r11
    7a6c:	27 25       	eor	r18, r7
    7a6e:	23 21       	and	r18, r3
    7a70:	1f 1d       	adc	r17, r15
    7a72:	1b 19       	sub	r17, r11
    7a74:	17 15       	cp	r17, r7
    7a76:	13 11       	cpse	r17, r3
    7a78:	0f 0d       	add	r16, r15
    7a7a:	0b 09       	sbc	r16, r11
    7a7c:	07 05       	cpc	r16, r7
    7a7e:	03 01       	movw	r0, r6
    7a80:	ff fd       	.word	0xfdff	; ????
    7a82:	fb f9       	.word	0xf9fb	; ????
    7a84:	f7 f5       	brid	.+124    	; 0x7b02 <waves+0x302>
    7a86:	f3 f1       	brvs	.+124    	; 0x7b04 <waves+0x304>
    7a88:	ef ed       	ldi	r30, 0xDF	; 223
    7a8a:	eb e9       	ldi	r30, 0x9B	; 155
    7a8c:	e7 e5       	ldi	r30, 0x57	; 87
    7a8e:	e3 e1       	ldi	r30, 0x13	; 19
    7a90:	df dd       	rcall	.-1090   	; 0x7650 <steptable+0x48>
    7a92:	db d9       	rcall	.-3146   	; 0x6e4a <PatchCommand04>
    7a94:	d7 d5       	rcall	.+2990   	; 0x8644 <doFade+0x6>
    7a96:	d3 d1       	rcall	.+934    	; 0x7e3e <waves+0x63e>
    7a98:	cf cd       	rjmp	.-1122   	; 0x7638 <steptable+0x30>
    7a9a:	cb c9       	rjmp	.-3178   	; 0x6e32 <PatchCommand02>
    7a9c:	c7 c5       	rjmp	.+2958   	; 0x862c <WaitVsync+0x1c>
    7a9e:	c3 c1       	rjmp	.+902    	; 0x7e26 <waves+0x626>
    7aa0:	bf bd       	out	0x2f, r27	; 47
    7aa2:	bb b9       	out	0x0b, r27	; 11
    7aa4:	b7 b5       	in	r27, 0x27	; 39
    7aa6:	b3 b1       	in	r27, 0x03	; 3
    7aa8:	af ad       	ldd	r26, Y+63	; 0x3f
    7aaa:	ab a9       	ldd	r26, Y+51	; 0x33
    7aac:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7aae:	a3 a1       	ldd	r26, Z+35	; 0x23
    7ab0:	9f 9d       	mul	r25, r15
    7ab2:	9b 99       	sbic	0x13, 3	; 19
    7ab4:	97 95       	ror	r25
    7ab6:	93 91       	.word	0x9193	; ????
    7ab8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    7aba:	8b 89       	ldd	r24, Y+19	; 0x13
    7abc:	87 85       	ldd	r24, Z+15	; 0x0f
    7abe:	83 81       	ldd	r24, Z+3	; 0x03
    7ac0:	80 82       	st	Z, r8
    7ac2:	84 86       	std	Z+12, r8	; 0x0c
    7ac4:	88 8a       	std	Y+16, r8	; 0x10
    7ac6:	8c 8e       	std	Y+28, r8	; 0x1c
    7ac8:	90 92 94 96 	sts	0x9694, r9
    7acc:	98 9a       	sbi	0x13, 0	; 19
    7ace:	9c 9e       	mul	r9, r28
    7ad0:	a0 a2       	std	Z+32, r10	; 0x20
    7ad2:	a4 a6       	std	Z+44, r10	; 0x2c
    7ad4:	a8 aa       	std	Y+48, r10	; 0x30
    7ad6:	ac ae       	std	Y+60, r10	; 0x3c
    7ad8:	b0 b2       	in	r11, 0x10	; 16
    7ada:	b4 b6       	in	r11, 0x34	; 52
    7adc:	b8 ba       	out	0x18, r11	; 24
    7ade:	bc be       	out	0x3c, r11	; 60
    7ae0:	c0 c2       	rjmp	.+1408   	; 0x8062 <waves+0x862>
    7ae2:	c4 c6       	rjmp	.+3464   	; 0x886c <LBCollides+0x4c>
    7ae4:	c8 ca       	rjmp	.-2672   	; 0x7076 <TriggerNote>
    7ae6:	cc ce       	rjmp	.-616    	; 0x7880 <waves+0x80>
    7ae8:	d0 d2       	rcall	.+1440   	; 0x808a <waves+0x88a>
    7aea:	d4 d6       	rcall	.+3496   	; 0x8894 <LBLineIntersect+0x20>
    7aec:	d8 da       	rcall	.-2640   	; 0x709e <TriggerNote+0x28>
    7aee:	dc de       	rcall	.-584    	; 0x78a8 <waves+0xa8>
    7af0:	e0 e2       	ldi	r30, 0x20	; 32
    7af2:	e4 e6       	ldi	r30, 0x64	; 100
    7af4:	e8 ea       	ldi	r30, 0xA8	; 168
    7af6:	ec ee       	ldi	r30, 0xEC	; 236
    7af8:	f0 f2       	brcs	.-68     	; 0x7ab6 <waves+0x2b6>
    7afa:	f4 f6       	brge	.-68     	; 0x7ab8 <waves+0x2b8>
    7afc:	f8 fa       	.word	0xfaf8	; ????
    7afe:	fc fe       	.word	0xfefc	; ????
    7b00:	7f 7f       	andi	r23, 0xFF	; 255
    7b02:	7f 7f       	andi	r23, 0xFF	; 255
    7b04:	7f 7f       	andi	r23, 0xFF	; 255
    7b06:	7f 7f       	andi	r23, 0xFF	; 255
    7b08:	7f 7f       	andi	r23, 0xFF	; 255
    7b0a:	7f 7f       	andi	r23, 0xFF	; 255
    7b0c:	7f 7f       	andi	r23, 0xFF	; 255
    7b0e:	7f 7f       	andi	r23, 0xFF	; 255
    7b10:	7f 7f       	andi	r23, 0xFF	; 255
    7b12:	7f 7f       	andi	r23, 0xFF	; 255
    7b14:	7f 7f       	andi	r23, 0xFF	; 255
    7b16:	7f 7f       	andi	r23, 0xFF	; 255
    7b18:	7f 7f       	andi	r23, 0xFF	; 255
    7b1a:	7f 7f       	andi	r23, 0xFF	; 255
    7b1c:	7f 7f       	andi	r23, 0xFF	; 255
    7b1e:	7f 7f       	andi	r23, 0xFF	; 255
    7b20:	7f 7f       	andi	r23, 0xFF	; 255
    7b22:	7f 7f       	andi	r23, 0xFF	; 255
    7b24:	7f 7f       	andi	r23, 0xFF	; 255
    7b26:	7f 7f       	andi	r23, 0xFF	; 255
    7b28:	7f 7f       	andi	r23, 0xFF	; 255
    7b2a:	7f 7f       	andi	r23, 0xFF	; 255
    7b2c:	7f 7f       	andi	r23, 0xFF	; 255
    7b2e:	7f 7f       	andi	r23, 0xFF	; 255
    7b30:	7f 7f       	andi	r23, 0xFF	; 255
    7b32:	7f 7f       	andi	r23, 0xFF	; 255
    7b34:	7f 7f       	andi	r23, 0xFF	; 255
    7b36:	7f 7f       	andi	r23, 0xFF	; 255
    7b38:	7f 7f       	andi	r23, 0xFF	; 255
    7b3a:	7f 7f       	andi	r23, 0xFF	; 255
    7b3c:	7f 7f       	andi	r23, 0xFF	; 255
    7b3e:	7f 7f       	andi	r23, 0xFF	; 255
    7b40:	80 80       	ld	r8, Z
    7b42:	80 80       	ld	r8, Z
    7b44:	80 80       	ld	r8, Z
    7b46:	80 80       	ld	r8, Z
    7b48:	80 80       	ld	r8, Z
    7b4a:	80 80       	ld	r8, Z
    7b4c:	80 80       	ld	r8, Z
    7b4e:	80 80       	ld	r8, Z
    7b50:	80 80       	ld	r8, Z
    7b52:	80 80       	ld	r8, Z
    7b54:	80 80       	ld	r8, Z
    7b56:	80 80       	ld	r8, Z
    7b58:	80 80       	ld	r8, Z
    7b5a:	80 80       	ld	r8, Z
    7b5c:	80 80       	ld	r8, Z
    7b5e:	80 80       	ld	r8, Z
    7b60:	80 80       	ld	r8, Z
    7b62:	80 80       	ld	r8, Z
    7b64:	80 80       	ld	r8, Z
    7b66:	80 80       	ld	r8, Z
    7b68:	80 80       	ld	r8, Z
    7b6a:	80 80       	ld	r8, Z
    7b6c:	80 80       	ld	r8, Z
    7b6e:	80 80       	ld	r8, Z
    7b70:	80 80       	ld	r8, Z
    7b72:	80 80       	ld	r8, Z
    7b74:	80 80       	ld	r8, Z
    7b76:	80 80       	ld	r8, Z
    7b78:	80 80       	ld	r8, Z
    7b7a:	80 80       	ld	r8, Z
    7b7c:	80 80       	ld	r8, Z
    7b7e:	80 80       	ld	r8, Z
    7b80:	80 80       	ld	r8, Z
    7b82:	80 80       	ld	r8, Z
    7b84:	80 80       	ld	r8, Z
    7b86:	80 80       	ld	r8, Z
    7b88:	80 80       	ld	r8, Z
    7b8a:	80 80       	ld	r8, Z
    7b8c:	80 80       	ld	r8, Z
    7b8e:	80 80       	ld	r8, Z
    7b90:	80 80       	ld	r8, Z
    7b92:	80 80       	ld	r8, Z
    7b94:	80 80       	ld	r8, Z
    7b96:	80 80       	ld	r8, Z
    7b98:	80 80       	ld	r8, Z
    7b9a:	80 80       	ld	r8, Z
    7b9c:	80 80       	ld	r8, Z
    7b9e:	80 80       	ld	r8, Z
    7ba0:	80 80       	ld	r8, Z
    7ba2:	80 80       	ld	r8, Z
    7ba4:	80 80       	ld	r8, Z
    7ba6:	80 80       	ld	r8, Z
    7ba8:	80 80       	ld	r8, Z
    7baa:	80 80       	ld	r8, Z
    7bac:	80 80       	ld	r8, Z
    7bae:	80 80       	ld	r8, Z
    7bb0:	80 80       	ld	r8, Z
    7bb2:	80 80       	ld	r8, Z
    7bb4:	80 80       	ld	r8, Z
    7bb6:	80 80       	ld	r8, Z
    7bb8:	80 80       	ld	r8, Z
    7bba:	80 80       	ld	r8, Z
    7bbc:	80 80       	ld	r8, Z
    7bbe:	80 80       	ld	r8, Z
    7bc0:	80 80       	ld	r8, Z
    7bc2:	80 80       	ld	r8, Z
    7bc4:	80 80       	ld	r8, Z
    7bc6:	80 80       	ld	r8, Z
    7bc8:	80 80       	ld	r8, Z
    7bca:	80 80       	ld	r8, Z
    7bcc:	80 80       	ld	r8, Z
    7bce:	80 80       	ld	r8, Z
    7bd0:	80 80       	ld	r8, Z
    7bd2:	80 80       	ld	r8, Z
    7bd4:	80 80       	ld	r8, Z
    7bd6:	80 80       	ld	r8, Z
    7bd8:	80 80       	ld	r8, Z
    7bda:	80 80       	ld	r8, Z
    7bdc:	80 80       	ld	r8, Z
    7bde:	80 80       	ld	r8, Z
    7be0:	80 80       	ld	r8, Z
    7be2:	80 80       	ld	r8, Z
    7be4:	80 80       	ld	r8, Z
    7be6:	80 80       	ld	r8, Z
    7be8:	80 80       	ld	r8, Z
    7bea:	80 80       	ld	r8, Z
    7bec:	80 80       	ld	r8, Z
    7bee:	80 80       	ld	r8, Z
    7bf0:	80 80       	ld	r8, Z
    7bf2:	80 80       	ld	r8, Z
    7bf4:	80 80       	ld	r8, Z
    7bf6:	80 80       	ld	r8, Z
    7bf8:	80 80       	ld	r8, Z
    7bfa:	80 80       	ld	r8, Z
    7bfc:	80 80       	ld	r8, Z
    7bfe:	80 80       	ld	r8, Z
    7c00:	7f 7f       	andi	r23, 0xFF	; 255
    7c02:	7f 7f       	andi	r23, 0xFF	; 255
    7c04:	7f 7f       	andi	r23, 0xFF	; 255
    7c06:	7f 7f       	andi	r23, 0xFF	; 255
    7c08:	7f 7f       	andi	r23, 0xFF	; 255
    7c0a:	7f 7f       	andi	r23, 0xFF	; 255
    7c0c:	7f 7f       	andi	r23, 0xFF	; 255
    7c0e:	7f 7f       	andi	r23, 0xFF	; 255
    7c10:	7f 7f       	andi	r23, 0xFF	; 255
    7c12:	7f 7f       	andi	r23, 0xFF	; 255
    7c14:	7f 7f       	andi	r23, 0xFF	; 255
    7c16:	7f 7f       	andi	r23, 0xFF	; 255
    7c18:	7f 7f       	andi	r23, 0xFF	; 255
    7c1a:	7f 7f       	andi	r23, 0xFF	; 255
    7c1c:	7f 7f       	andi	r23, 0xFF	; 255
    7c1e:	7f 7f       	andi	r23, 0xFF	; 255
    7c20:	7f 7f       	andi	r23, 0xFF	; 255
    7c22:	7f 7f       	andi	r23, 0xFF	; 255
    7c24:	7f 7f       	andi	r23, 0xFF	; 255
    7c26:	7f 7f       	andi	r23, 0xFF	; 255
    7c28:	7f 7f       	andi	r23, 0xFF	; 255
    7c2a:	7f 7f       	andi	r23, 0xFF	; 255
    7c2c:	7f 7f       	andi	r23, 0xFF	; 255
    7c2e:	7f 7f       	andi	r23, 0xFF	; 255
    7c30:	7f 7f       	andi	r23, 0xFF	; 255
    7c32:	7f 7f       	andi	r23, 0xFF	; 255
    7c34:	7f 7f       	andi	r23, 0xFF	; 255
    7c36:	7f 7f       	andi	r23, 0xFF	; 255
    7c38:	7f 7f       	andi	r23, 0xFF	; 255
    7c3a:	7f 7f       	andi	r23, 0xFF	; 255
    7c3c:	7f 7f       	andi	r23, 0xFF	; 255
    7c3e:	7f 7f       	andi	r23, 0xFF	; 255
    7c40:	7f 7f       	andi	r23, 0xFF	; 255
    7c42:	7f 7f       	andi	r23, 0xFF	; 255
    7c44:	7f 7f       	andi	r23, 0xFF	; 255
    7c46:	7f 7f       	andi	r23, 0xFF	; 255
    7c48:	7f 7f       	andi	r23, 0xFF	; 255
    7c4a:	7f 7f       	andi	r23, 0xFF	; 255
    7c4c:	7f 7f       	andi	r23, 0xFF	; 255
    7c4e:	7f 7f       	andi	r23, 0xFF	; 255
    7c50:	7f 7f       	andi	r23, 0xFF	; 255
    7c52:	7f 7f       	andi	r23, 0xFF	; 255
    7c54:	7f 7f       	andi	r23, 0xFF	; 255
    7c56:	7f 7f       	andi	r23, 0xFF	; 255
    7c58:	7f 7f       	andi	r23, 0xFF	; 255
    7c5a:	7f 7f       	andi	r23, 0xFF	; 255
    7c5c:	7f 7f       	andi	r23, 0xFF	; 255
    7c5e:	7f 7f       	andi	r23, 0xFF	; 255
    7c60:	7f 7f       	andi	r23, 0xFF	; 255
    7c62:	7f 7f       	andi	r23, 0xFF	; 255
    7c64:	7f 7f       	andi	r23, 0xFF	; 255
    7c66:	7f 7f       	andi	r23, 0xFF	; 255
    7c68:	7f 7f       	andi	r23, 0xFF	; 255
    7c6a:	7f 7f       	andi	r23, 0xFF	; 255
    7c6c:	7f 7f       	andi	r23, 0xFF	; 255
    7c6e:	7f 7f       	andi	r23, 0xFF	; 255
    7c70:	7f 7f       	andi	r23, 0xFF	; 255
    7c72:	7f 7f       	andi	r23, 0xFF	; 255
    7c74:	7f 7f       	andi	r23, 0xFF	; 255
    7c76:	7f 7f       	andi	r23, 0xFF	; 255
    7c78:	7f 7f       	andi	r23, 0xFF	; 255
    7c7a:	7f 7f       	andi	r23, 0xFF	; 255
    7c7c:	7f 7f       	andi	r23, 0xFF	; 255
    7c7e:	7f 7f       	andi	r23, 0xFF	; 255
    7c80:	80 80       	ld	r8, Z
    7c82:	80 80       	ld	r8, Z
    7c84:	80 80       	ld	r8, Z
    7c86:	80 80       	ld	r8, Z
    7c88:	80 80       	ld	r8, Z
    7c8a:	80 80       	ld	r8, Z
    7c8c:	80 80       	ld	r8, Z
    7c8e:	80 80       	ld	r8, Z
    7c90:	80 80       	ld	r8, Z
    7c92:	80 80       	ld	r8, Z
    7c94:	80 80       	ld	r8, Z
    7c96:	80 80       	ld	r8, Z
    7c98:	80 80       	ld	r8, Z
    7c9a:	80 80       	ld	r8, Z
    7c9c:	80 80       	ld	r8, Z
    7c9e:	80 80       	ld	r8, Z
    7ca0:	80 80       	ld	r8, Z
    7ca2:	80 80       	ld	r8, Z
    7ca4:	80 80       	ld	r8, Z
    7ca6:	80 80       	ld	r8, Z
    7ca8:	80 80       	ld	r8, Z
    7caa:	80 80       	ld	r8, Z
    7cac:	80 80       	ld	r8, Z
    7cae:	80 80       	ld	r8, Z
    7cb0:	80 80       	ld	r8, Z
    7cb2:	80 80       	ld	r8, Z
    7cb4:	80 80       	ld	r8, Z
    7cb6:	80 80       	ld	r8, Z
    7cb8:	80 80       	ld	r8, Z
    7cba:	80 80       	ld	r8, Z
    7cbc:	80 80       	ld	r8, Z
    7cbe:	80 80       	ld	r8, Z
    7cc0:	80 80       	ld	r8, Z
    7cc2:	80 80       	ld	r8, Z
    7cc4:	80 80       	ld	r8, Z
    7cc6:	80 80       	ld	r8, Z
    7cc8:	80 80       	ld	r8, Z
    7cca:	80 80       	ld	r8, Z
    7ccc:	80 80       	ld	r8, Z
    7cce:	80 80       	ld	r8, Z
    7cd0:	80 80       	ld	r8, Z
    7cd2:	80 80       	ld	r8, Z
    7cd4:	80 80       	ld	r8, Z
    7cd6:	80 80       	ld	r8, Z
    7cd8:	80 80       	ld	r8, Z
    7cda:	80 80       	ld	r8, Z
    7cdc:	80 80       	ld	r8, Z
    7cde:	80 80       	ld	r8, Z
    7ce0:	80 80       	ld	r8, Z
    7ce2:	80 80       	ld	r8, Z
    7ce4:	80 80       	ld	r8, Z
    7ce6:	80 80       	ld	r8, Z
    7ce8:	80 80       	ld	r8, Z
    7cea:	80 80       	ld	r8, Z
    7cec:	80 80       	ld	r8, Z
    7cee:	80 80       	ld	r8, Z
    7cf0:	80 80       	ld	r8, Z
    7cf2:	80 80       	ld	r8, Z
    7cf4:	80 80       	ld	r8, Z
    7cf6:	80 80       	ld	r8, Z
    7cf8:	80 80       	ld	r8, Z
    7cfa:	80 80       	ld	r8, Z
    7cfc:	80 80       	ld	r8, Z
    7cfe:	80 80       	ld	r8, Z
    7d00:	7f 7f       	andi	r23, 0xFF	; 255
    7d02:	7f 7f       	andi	r23, 0xFF	; 255
    7d04:	7f 7f       	andi	r23, 0xFF	; 255
    7d06:	7f 7f       	andi	r23, 0xFF	; 255
    7d08:	7f 7f       	andi	r23, 0xFF	; 255
    7d0a:	7f 7f       	andi	r23, 0xFF	; 255
    7d0c:	7f 7f       	andi	r23, 0xFF	; 255
    7d0e:	7f 7f       	andi	r23, 0xFF	; 255
    7d10:	7f 7f       	andi	r23, 0xFF	; 255
    7d12:	7f 7f       	andi	r23, 0xFF	; 255
    7d14:	7f 7f       	andi	r23, 0xFF	; 255
    7d16:	7f 7f       	andi	r23, 0xFF	; 255
    7d18:	7f 7f       	andi	r23, 0xFF	; 255
    7d1a:	7f 7f       	andi	r23, 0xFF	; 255
    7d1c:	7f 7f       	andi	r23, 0xFF	; 255
    7d1e:	7f 7f       	andi	r23, 0xFF	; 255
    7d20:	7f 7f       	andi	r23, 0xFF	; 255
    7d22:	7f 7f       	andi	r23, 0xFF	; 255
    7d24:	7f 7f       	andi	r23, 0xFF	; 255
    7d26:	7f 7f       	andi	r23, 0xFF	; 255
    7d28:	7f 7f       	andi	r23, 0xFF	; 255
    7d2a:	7f 7f       	andi	r23, 0xFF	; 255
    7d2c:	7f 7f       	andi	r23, 0xFF	; 255
    7d2e:	7f 7f       	andi	r23, 0xFF	; 255
    7d30:	7f 7f       	andi	r23, 0xFF	; 255
    7d32:	7f 7f       	andi	r23, 0xFF	; 255
    7d34:	7f 7f       	andi	r23, 0xFF	; 255
    7d36:	7f 7f       	andi	r23, 0xFF	; 255
    7d38:	7f 7f       	andi	r23, 0xFF	; 255
    7d3a:	7f 7f       	andi	r23, 0xFF	; 255
    7d3c:	7f 7f       	andi	r23, 0xFF	; 255
    7d3e:	7f 7f       	andi	r23, 0xFF	; 255
    7d40:	7f 7f       	andi	r23, 0xFF	; 255
    7d42:	7f 7f       	andi	r23, 0xFF	; 255
    7d44:	7f 7f       	andi	r23, 0xFF	; 255
    7d46:	7f 7f       	andi	r23, 0xFF	; 255
    7d48:	7f 7f       	andi	r23, 0xFF	; 255
    7d4a:	7f 7f       	andi	r23, 0xFF	; 255
    7d4c:	7f 7f       	andi	r23, 0xFF	; 255
    7d4e:	7f 7f       	andi	r23, 0xFF	; 255
    7d50:	7f 7f       	andi	r23, 0xFF	; 255
    7d52:	7f 7f       	andi	r23, 0xFF	; 255
    7d54:	7f 7f       	andi	r23, 0xFF	; 255
    7d56:	7f 7f       	andi	r23, 0xFF	; 255
    7d58:	7f 7f       	andi	r23, 0xFF	; 255
    7d5a:	7f 7f       	andi	r23, 0xFF	; 255
    7d5c:	7f 7f       	andi	r23, 0xFF	; 255
    7d5e:	7f 7f       	andi	r23, 0xFF	; 255
    7d60:	7f 7f       	andi	r23, 0xFF	; 255
    7d62:	7f 7f       	andi	r23, 0xFF	; 255
    7d64:	7f 7f       	andi	r23, 0xFF	; 255
    7d66:	7f 7f       	andi	r23, 0xFF	; 255
    7d68:	7f 7f       	andi	r23, 0xFF	; 255
    7d6a:	7f 7f       	andi	r23, 0xFF	; 255
    7d6c:	7f 7f       	andi	r23, 0xFF	; 255
    7d6e:	7f 7f       	andi	r23, 0xFF	; 255
    7d70:	7f 7f       	andi	r23, 0xFF	; 255
    7d72:	7f 7f       	andi	r23, 0xFF	; 255
    7d74:	7f 7f       	andi	r23, 0xFF	; 255
    7d76:	7f 7f       	andi	r23, 0xFF	; 255
    7d78:	7f 7f       	andi	r23, 0xFF	; 255
    7d7a:	7f 7f       	andi	r23, 0xFF	; 255
    7d7c:	7f 7f       	andi	r23, 0xFF	; 255
    7d7e:	7f 7f       	andi	r23, 0xFF	; 255
    7d80:	7f 7f       	andi	r23, 0xFF	; 255
    7d82:	7f 7f       	andi	r23, 0xFF	; 255
    7d84:	7f 7f       	andi	r23, 0xFF	; 255
    7d86:	7f 7f       	andi	r23, 0xFF	; 255
    7d88:	7f 7f       	andi	r23, 0xFF	; 255
    7d8a:	7f 7f       	andi	r23, 0xFF	; 255
    7d8c:	7f 7f       	andi	r23, 0xFF	; 255
    7d8e:	7f 7f       	andi	r23, 0xFF	; 255
    7d90:	7f 7f       	andi	r23, 0xFF	; 255
    7d92:	7f 7f       	andi	r23, 0xFF	; 255
    7d94:	7f 7f       	andi	r23, 0xFF	; 255
    7d96:	7f 7f       	andi	r23, 0xFF	; 255
    7d98:	7f 7f       	andi	r23, 0xFF	; 255
    7d9a:	7f 7f       	andi	r23, 0xFF	; 255
    7d9c:	7f 7f       	andi	r23, 0xFF	; 255
    7d9e:	7f 7f       	andi	r23, 0xFF	; 255
    7da0:	7f 7f       	andi	r23, 0xFF	; 255
    7da2:	7f 7f       	andi	r23, 0xFF	; 255
    7da4:	7f 7f       	andi	r23, 0xFF	; 255
    7da6:	7f 7f       	andi	r23, 0xFF	; 255
    7da8:	7f 7f       	andi	r23, 0xFF	; 255
    7daa:	7f 7f       	andi	r23, 0xFF	; 255
    7dac:	7f 7f       	andi	r23, 0xFF	; 255
    7dae:	7f 7f       	andi	r23, 0xFF	; 255
    7db0:	7f 7f       	andi	r23, 0xFF	; 255
    7db2:	7f 7f       	andi	r23, 0xFF	; 255
    7db4:	7f 7f       	andi	r23, 0xFF	; 255
    7db6:	7f 7f       	andi	r23, 0xFF	; 255
    7db8:	7f 7f       	andi	r23, 0xFF	; 255
    7dba:	7f 7f       	andi	r23, 0xFF	; 255
    7dbc:	7f 7f       	andi	r23, 0xFF	; 255
    7dbe:	7f 7f       	andi	r23, 0xFF	; 255
    7dc0:	80 80       	ld	r8, Z
    7dc2:	80 80       	ld	r8, Z
    7dc4:	80 80       	ld	r8, Z
    7dc6:	80 80       	ld	r8, Z
    7dc8:	80 80       	ld	r8, Z
    7dca:	80 80       	ld	r8, Z
    7dcc:	80 80       	ld	r8, Z
    7dce:	80 80       	ld	r8, Z
    7dd0:	80 80       	ld	r8, Z
    7dd2:	80 80       	ld	r8, Z
    7dd4:	80 80       	ld	r8, Z
    7dd6:	80 80       	ld	r8, Z
    7dd8:	80 80       	ld	r8, Z
    7dda:	80 80       	ld	r8, Z
    7ddc:	80 80       	ld	r8, Z
    7dde:	80 80       	ld	r8, Z
    7de0:	80 80       	ld	r8, Z
    7de2:	80 80       	ld	r8, Z
    7de4:	80 80       	ld	r8, Z
    7de6:	80 80       	ld	r8, Z
    7de8:	80 80       	ld	r8, Z
    7dea:	80 80       	ld	r8, Z
    7dec:	80 80       	ld	r8, Z
    7dee:	80 80       	ld	r8, Z
    7df0:	80 80       	ld	r8, Z
    7df2:	80 80       	ld	r8, Z
    7df4:	80 80       	ld	r8, Z
    7df6:	80 80       	ld	r8, Z
    7df8:	80 80       	ld	r8, Z
    7dfa:	80 80       	ld	r8, Z
    7dfc:	80 80       	ld	r8, Z
    7dfe:	80 80       	ld	r8, Z
    7e00:	03 09       	sbc	r16, r3
    7e02:	13 1e       	adc	r1, r19
    7e04:	28 31       	cpi	r18, 0x18	; 24
    7e06:	3a 40       	sbci	r19, 0x0A	; 10
    7e08:	46 4c       	sbci	r20, 0xC6	; 198
    7e0a:	50 54       	subi	r21, 0x40	; 64
    7e0c:	58 5b       	subi	r21, 0xB8	; 184
    7e0e:	5e 61       	ori	r21, 0x1E	; 30
    7e10:	63 65       	ori	r22, 0x53	; 83
    7e12:	67 69       	ori	r22, 0x97	; 151
    7e14:	6b 6c       	ori	r22, 0xCB	; 203
    7e16:	6e 6f       	ori	r22, 0xFE	; 254
    7e18:	70 71       	andi	r23, 0x10	; 16
    7e1a:	72 73       	andi	r23, 0x32	; 50
    7e1c:	74 75       	andi	r23, 0x54	; 84
    7e1e:	76 77       	andi	r23, 0x76	; 118
    7e20:	77 78       	andi	r23, 0x87	; 135
    7e22:	79 79       	andi	r23, 0x99	; 153
    7e24:	7a 7a       	andi	r23, 0xAA	; 170
    7e26:	7b 7b       	andi	r23, 0xBB	; 187
    7e28:	7c 7c       	andi	r23, 0xCC	; 204
    7e2a:	7c 7d       	andi	r23, 0xDC	; 220
    7e2c:	7d 7d       	andi	r23, 0xDD	; 221
    7e2e:	7e 7e       	andi	r23, 0xEE	; 238
    7e30:	7e 7e       	andi	r23, 0xEE	; 238
    7e32:	7f 7f       	andi	r23, 0xFF	; 255
    7e34:	7f 7f       	andi	r23, 0xFF	; 255
    7e36:	7f 7f       	andi	r23, 0xFF	; 255
    7e38:	7f 7f       	andi	r23, 0xFF	; 255
    7e3a:	7f 7f       	andi	r23, 0xFF	; 255
    7e3c:	7f 7f       	andi	r23, 0xFF	; 255
    7e3e:	7f 7f       	andi	r23, 0xFF	; 255
    7e40:	7f 7f       	andi	r23, 0xFF	; 255
    7e42:	7f 7f       	andi	r23, 0xFF	; 255
    7e44:	7f 7f       	andi	r23, 0xFF	; 255
    7e46:	7f 7f       	andi	r23, 0xFF	; 255
    7e48:	7f 7f       	andi	r23, 0xFF	; 255
    7e4a:	7f 7f       	andi	r23, 0xFF	; 255
    7e4c:	7f 7e       	andi	r23, 0xEF	; 239
    7e4e:	7e 7e       	andi	r23, 0xEE	; 238
    7e50:	7e 7d       	andi	r23, 0xDE	; 222
    7e52:	7d 7d       	andi	r23, 0xDD	; 221
    7e54:	7c 7c       	andi	r23, 0xCC	; 204
    7e56:	7c 7b       	andi	r23, 0xBC	; 188
    7e58:	7b 7a       	andi	r23, 0xAB	; 171
    7e5a:	7a 79       	andi	r23, 0x9A	; 154
    7e5c:	79 78       	andi	r23, 0x89	; 137
    7e5e:	77 77       	andi	r23, 0x77	; 119
    7e60:	76 75       	andi	r23, 0x56	; 86
    7e62:	74 73       	andi	r23, 0x34	; 52
    7e64:	72 71       	andi	r23, 0x12	; 18
    7e66:	70 6f       	ori	r23, 0xF0	; 240
    7e68:	6e 6c       	ori	r22, 0xCE	; 206
    7e6a:	6b 69       	ori	r22, 0x9B	; 155
    7e6c:	67 65       	ori	r22, 0x57	; 87
    7e6e:	63 61       	ori	r22, 0x13	; 19
    7e70:	5e 5b       	subi	r21, 0xBE	; 190
    7e72:	58 54       	subi	r21, 0x48	; 72
    7e74:	50 4c       	sbci	r21, 0xC0	; 192
    7e76:	46 40       	sbci	r20, 0x06	; 6
    7e78:	3a 31       	cpi	r19, 0x1A	; 26
    7e7a:	28 1e       	adc	r2, r24
    7e7c:	13 09       	sbc	r17, r3
    7e7e:	03 00       	.word	0x0003	; ????
    7e80:	c6 cc       	rjmp	.-1652   	; 0x780e <waves+0xe>
    7e82:	d5 db       	rcall	.-2134   	; 0x762e <steptable+0x26>
    7e84:	df e3       	ldi	r29, 0x3F	; 63
    7e86:	e5 e7       	ldi	r30, 0x75	; 117
    7e88:	e9 ea       	ldi	r30, 0xA9	; 169
    7e8a:	eb ec       	ldi	r30, 0xCB	; 203
    7e8c:	ed ee       	ldi	r30, 0xED	; 237
    7e8e:	ef ef       	ldi	r30, 0xFF	; 255
    7e90:	f0 f0       	brcs	.+60     	; 0x7ece <waves+0x6ce>
    7e92:	f0 f1       	brcs	.+124    	; 0x7f10 <waves+0x710>
    7e94:	f1 f1       	breq	.+124    	; 0x7f12 <waves+0x712>
    7e96:	f1 f2       	breq	.-68     	; 0x7e54 <waves+0x654>
    7e98:	f2 f2       	brmi	.-68     	; 0x7e56 <waves+0x656>
    7e9a:	f2 f2       	brmi	.-68     	; 0x7e58 <waves+0x658>
    7e9c:	f2 f2       	brmi	.-68     	; 0x7e5a <waves+0x65a>
    7e9e:	f2 f3       	brmi	.-4      	; 0x7e9c <waves+0x69c>
    7ea0:	f3 f3       	brvs	.-4      	; 0x7e9e <waves+0x69e>
    7ea2:	f3 f3       	brvs	.-4      	; 0x7ea0 <waves+0x6a0>
    7ea4:	f3 f3       	brvs	.-4      	; 0x7ea2 <waves+0x6a2>
    7ea6:	f3 f3       	brvs	.-4      	; 0x7ea4 <waves+0x6a4>
    7ea8:	f3 f3       	brvs	.-4      	; 0x7ea6 <waves+0x6a6>
    7eaa:	f3 f3       	brvs	.-4      	; 0x7ea8 <waves+0x6a8>
    7eac:	f3 f3       	brvs	.-4      	; 0x7eaa <waves+0x6aa>
    7eae:	f3 f3       	brvs	.-4      	; 0x7eac <waves+0x6ac>
    7eb0:	f3 f3       	brvs	.-4      	; 0x7eae <waves+0x6ae>
    7eb2:	f3 f3       	brvs	.-4      	; 0x7eb0 <waves+0x6b0>
    7eb4:	f3 f3       	brvs	.-4      	; 0x7eb2 <waves+0x6b2>
    7eb6:	f3 f3       	brvs	.-4      	; 0x7eb4 <waves+0x6b4>
    7eb8:	f3 f3       	brvs	.-4      	; 0x7eb6 <waves+0x6b6>
    7eba:	f3 f3       	brvs	.-4      	; 0x7eb8 <waves+0x6b8>
    7ebc:	f3 f3       	brvs	.-4      	; 0x7eba <waves+0x6ba>
    7ebe:	f3 f3       	brvs	.-4      	; 0x7ebc <waves+0x6bc>
    7ec0:	f3 f3       	brvs	.-4      	; 0x7ebe <waves+0x6be>
    7ec2:	f3 f3       	brvs	.-4      	; 0x7ec0 <waves+0x6c0>
    7ec4:	f3 f3       	brvs	.-4      	; 0x7ec2 <waves+0x6c2>
    7ec6:	f3 f3       	brvs	.-4      	; 0x7ec4 <waves+0x6c4>
    7ec8:	f3 f3       	brvs	.-4      	; 0x7ec6 <waves+0x6c6>
    7eca:	f3 f3       	brvs	.-4      	; 0x7ec8 <waves+0x6c8>
    7ecc:	f3 f3       	brvs	.-4      	; 0x7eca <waves+0x6ca>
    7ece:	f3 f3       	brvs	.-4      	; 0x7ecc <waves+0x6cc>
    7ed0:	f3 f3       	brvs	.-4      	; 0x7ece <waves+0x6ce>
    7ed2:	f3 f3       	brvs	.-4      	; 0x7ed0 <waves+0x6d0>
    7ed4:	f3 f3       	brvs	.-4      	; 0x7ed2 <waves+0x6d2>
    7ed6:	f3 f3       	brvs	.-4      	; 0x7ed4 <waves+0x6d4>
    7ed8:	f3 f3       	brvs	.-4      	; 0x7ed6 <waves+0x6d6>
    7eda:	f3 f3       	brvs	.-4      	; 0x7ed8 <waves+0x6d8>
    7edc:	f3 f3       	brvs	.-4      	; 0x7eda <waves+0x6da>
    7ede:	f3 f3       	brvs	.-4      	; 0x7edc <waves+0x6dc>
    7ee0:	f2 f2       	brmi	.-68     	; 0x7e9e <waves+0x69e>
    7ee2:	f2 f2       	brmi	.-68     	; 0x7ea0 <waves+0x6a0>
    7ee4:	f2 f2       	brmi	.-68     	; 0x7ea2 <waves+0x6a2>
    7ee6:	f2 f2       	brmi	.-68     	; 0x7ea4 <waves+0x6a4>
    7ee8:	f1 f1       	breq	.+124    	; 0x7f66 <waves+0x766>
    7eea:	f1 f1       	breq	.+124    	; 0x7f68 <waves+0x768>
    7eec:	f0 f0       	brcs	.+60     	; 0x7f2a <waves+0x72a>
    7eee:	f0 ef       	ldi	r31, 0xF0	; 240
    7ef0:	ef ee       	ldi	r30, 0xEF	; 239
    7ef2:	ed ec       	ldi	r30, 0xCD	; 205
    7ef4:	eb ea       	ldi	r30, 0xAB	; 171
    7ef6:	e9 e7       	ldi	r30, 0x79	; 121
    7ef8:	e5 e3       	ldi	r30, 0x35	; 53
    7efa:	df db       	rcall	.-2114   	; 0x76ba <steptable+0xb2>
    7efc:	d5 cc       	rjmp	.-1622   	; 0x78a8 <waves+0xa8>
    7efe:	c6 00       	.word	0x00c6	; ????
    7f00:	00 28       	or	r0, r0
    7f02:	3d 42       	sbci	r19, 0x2D	; 45
    7f04:	30 2d       	mov	r19, r0
    7f06:	2c 2b       	or	r18, r28
    7f08:	2c 2d       	mov	r18, r12
    7f0a:	2e 2f       	mov	r18, r30
    7f0c:	30 32       	cpi	r19, 0x20	; 32
    7f0e:	33 35       	cpi	r19, 0x53	; 83
    7f10:	37 39       	cpi	r19, 0x97	; 151
    7f12:	3b 3d       	cpi	r19, 0xDB	; 219
    7f14:	3f 41       	sbci	r19, 0x1F	; 31
    7f16:	43 45       	sbci	r20, 0x53	; 83
    7f18:	48 4a       	sbci	r20, 0xA8	; 168
    7f1a:	4c 4e       	sbci	r20, 0xEC	; 236
    7f1c:	50 53       	subi	r21, 0x30	; 48
    7f1e:	55 57       	subi	r21, 0x75	; 117
    7f20:	59 5b       	subi	r21, 0xB9	; 185
    7f22:	5d 5f       	subi	r21, 0xFD	; 253
    7f24:	61 63       	ori	r22, 0x31	; 49
    7f26:	65 67       	ori	r22, 0x75	; 117
    7f28:	69 6b       	ori	r22, 0xB9	; 185
    7f2a:	6c 6e       	ori	r22, 0xEC	; 236
    7f2c:	70 71       	andi	r23, 0x10	; 16
    7f2e:	73 74       	andi	r23, 0x43	; 67
    7f30:	75 77       	andi	r23, 0x75	; 117
    7f32:	78 79       	andi	r23, 0x98	; 152
    7f34:	7a 7b       	andi	r23, 0xBA	; 186
    7f36:	7c 7d       	andi	r23, 0xDC	; 220
    7f38:	7d 7e       	andi	r23, 0xED	; 237
    7f3a:	7e 7f       	andi	r23, 0xFE	; 254
    7f3c:	7f 7f       	andi	r23, 0xFF	; 255
    7f3e:	7f 7f       	andi	r23, 0xFF	; 255
    7f40:	7f 7f       	andi	r23, 0xFF	; 255
    7f42:	7f 7f       	andi	r23, 0xFF	; 255
    7f44:	7f 7f       	andi	r23, 0xFF	; 255
    7f46:	7e 7e       	andi	r23, 0xEE	; 238
    7f48:	7d 7d       	andi	r23, 0xDD	; 221
    7f4a:	7c 7b       	andi	r23, 0xBC	; 188
    7f4c:	7a 79       	andi	r23, 0x9A	; 154
    7f4e:	78 77       	andi	r23, 0x78	; 120
    7f50:	75 74       	andi	r23, 0x45	; 69
    7f52:	73 71       	andi	r23, 0x13	; 19
    7f54:	70 6e       	ori	r23, 0xE0	; 224
    7f56:	6c 6b       	ori	r22, 0xBC	; 188
    7f58:	69 67       	ori	r22, 0x79	; 121
    7f5a:	65 63       	ori	r22, 0x35	; 53
    7f5c:	61 5f       	subi	r22, 0xF1	; 241
    7f5e:	5d 5b       	subi	r21, 0xBD	; 189
    7f60:	59 57       	subi	r21, 0x79	; 121
    7f62:	55 53       	subi	r21, 0x35	; 53
    7f64:	50 4e       	sbci	r21, 0xE0	; 224
    7f66:	4c 4a       	sbci	r20, 0xAC	; 172
    7f68:	48 45       	sbci	r20, 0x58	; 88
    7f6a:	43 41       	sbci	r20, 0x13	; 19
    7f6c:	3f 3d       	cpi	r19, 0xDF	; 223
    7f6e:	3b 39       	cpi	r19, 0x9B	; 155
    7f70:	37 35       	cpi	r19, 0x57	; 87
    7f72:	33 32       	cpi	r19, 0x23	; 35
    7f74:	30 2f       	mov	r19, r16
    7f76:	2e 2d       	mov	r18, r14
    7f78:	2c 2b       	or	r18, r28
    7f7a:	2c 2d       	mov	r18, r12
    7f7c:	30 42       	sbci	r19, 0x20	; 32
    7f7e:	3d 28       	or	r3, r13
    7f80:	00 e9       	ldi	r16, 0x90	; 144
    7f82:	e5 fe       	sbrs	r14, 5
    7f84:	d4 d7       	rcall	.+4008   	; 0x8f2e <render_hud+0x16>
    7f86:	d7 d7       	rcall	.+4014   	; 0x8f36 <render_hud+0x1e>
    7f88:	d6 d4       	rcall	.+2476   	; 0x8936 <LBLineIntersect+0xc2>
    7f8a:	d2 d0       	rcall	.+420    	; 0x8130 <waves+0x930>
    7f8c:	ce cc       	rjmp	.-1636   	; 0x792a <waves+0x12a>
    7f8e:	ca c8       	rjmp	.-3692   	; 0x7124 <ProcessMusic+0x40>
    7f90:	c6 c3       	rjmp	.+1932   	; 0x871e <LBGetNextFrame+0x42>
    7f92:	c1 bf       	out	0x31, r28	; 49
    7f94:	bd ba       	out	0x1d, r11	; 29
    7f96:	b8 b6       	in	r11, 0x38	; 56
    7f98:	b4 b1       	in	r27, 0x04	; 4
    7f9a:	af ad       	ldd	r26, Y+63	; 0x3f
    7f9c:	ab a9       	ldd	r26, Y+51	; 0x33
    7f9e:	a7 a5       	ldd	r26, Z+47	; 0x2f
    7fa0:	a3 a1       	ldd	r26, Z+35	; 0x23
    7fa2:	9f 9e       	mul	r9, r31
    7fa4:	9c 9a       	sbi	0x13, 4	; 19
    7fa6:	99 97       	sbiw	r26, 0x29	; 41
    7fa8:	95 94       	asr	r9
    7faa:	93 91       	.word	0x9193	; ????
    7fac:	90 8f       	std	Z+24, r25	; 0x18
    7fae:	8d 8c       	ldd	r8, Y+29	; 0x1d
    7fb0:	8b 8a       	std	Y+19, r8	; 0x13
    7fb2:	89 88       	ldd	r8, Y+17	; 0x11
    7fb4:	88 87       	std	Y+8, r24	; 0x08
    7fb6:	86 85       	ldd	r24, Z+14	; 0x0e
    7fb8:	85 84       	ldd	r8, Z+13	; 0x0d
    7fba:	84 84       	ldd	r8, Z+12	; 0x0c
    7fbc:	83 83       	std	Z+3, r24	; 0x03
    7fbe:	83 83       	std	Z+3, r24	; 0x03
    7fc0:	83 83       	std	Z+3, r24	; 0x03
    7fc2:	83 83       	std	Z+3, r24	; 0x03
    7fc4:	83 84       	ldd	r8, Z+11	; 0x0b
    7fc6:	84 84       	ldd	r8, Z+12	; 0x0c
    7fc8:	85 85       	ldd	r24, Z+13	; 0x0d
    7fca:	86 87       	std	Z+14, r24	; 0x0e
    7fcc:	88 88       	ldd	r8, Y+16	; 0x10
    7fce:	89 8a       	std	Y+17, r8	; 0x11
    7fd0:	8b 8c       	ldd	r8, Y+27	; 0x1b
    7fd2:	8d 8f       	std	Y+29, r24	; 0x1d
    7fd4:	90 91 93 94 	lds	r25, 0x9493
    7fd8:	95 97       	sbiw	r26, 0x25	; 37
    7fda:	99 9a       	sbi	0x13, 1	; 19
    7fdc:	9c 9e       	mul	r9, r28
    7fde:	9f a1       	ldd	r25, Y+39	; 0x27
    7fe0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    7fe2:	a7 a9       	ldd	r26, Z+55	; 0x37
    7fe4:	ab ad       	ldd	r26, Y+59	; 0x3b
    7fe6:	af b1       	in	r26, 0x0f	; 15
    7fe8:	b4 b6       	in	r11, 0x34	; 52
    7fea:	b8 ba       	out	0x18, r11	; 24
    7fec:	bd bf       	out	0x3d, r27	; 61
    7fee:	c1 c3       	rjmp	.+1922   	; 0x8772 <LBGetJoyPadState+0x50>
    7ff0:	c6 c8       	rjmp	.-3700   	; 0x717e <ProcessMusic+0x9a>
    7ff2:	ca cc       	rjmp	.-1644   	; 0x7988 <waves+0x188>
    7ff4:	ce d0       	rcall	.+412    	; 0x8192 <waves+0x992>
    7ff6:	d2 d4       	rcall	.+2468   	; 0x899c <LBLineIntersect+0x128>
    7ff8:	d6 d7       	rcall	.+4012   	; 0x8fa6 <render_banter+0x1c>
    7ffa:	d7 d7       	rcall	.+4014   	; 0x8faa <render_banter+0x20>
    7ffc:	d4 fe       	sbrs	r13, 4
    7ffe:	e5 e9       	ldi	r30, 0x95	; 149
    8000:	f9 f8       	.word	0xf8f9	; ????
    8002:	f9 f5       	brne	.+126    	; 0x8082 <waves+0x882>
    8004:	eb e1       	ldi	r30, 0x1B	; 27
    8006:	dd de       	rcall	.-582    	; 0x7dc2 <waves+0x5c2>
    8008:	e0 e2       	ldi	r30, 0x20	; 32
    800a:	e4 e5       	ldi	r30, 0x54	; 84
    800c:	e6 e5       	ldi	r30, 0x56	; 86
    800e:	e4 e2       	ldi	r30, 0x24	; 36
    8010:	de d9       	rcall	.-3140   	; 0x73ce <ProcessMusic+0x2ea>
    8012:	d2 ca       	rjmp	.-2652   	; 0x75b8 <esmw+0x22>
    8014:	c1 b7       	in	r28, 0x31	; 49
    8016:	ac a2       	std	Y+36, r10	; 0x24
    8018:	99 91       	ld	r25, Y+
    801a:	8a 86       	std	Y+10, r8	; 0x0a
    801c:	83 81       	ldd	r24, Z+3	; 0x03
    801e:	80 80       	ld	r8, Z
    8020:	81 82       	std	Z+1, r8	; 0x01
    8022:	83 85       	ldd	r24, Z+11	; 0x0b
    8024:	86 88       	ldd	r8, Z+22	; 0x16
    8026:	8a 8c       	ldd	r8, Y+26	; 0x1a
    8028:	8d 8f       	std	Y+29, r24	; 0x1d
    802a:	90 92 93 95 	sts	0x9593, r9
    802e:	96 97       	sbiw	r26, 0x26	; 38
    8030:	98 99       	sbic	0x13, 0	; 19
    8032:	9a 9b       	sbis	0x13, 2	; 19
    8034:	9b 9c       	mul	r9, r11
    8036:	9d 9d       	mul	r25, r13
    8038:	9d 9e       	mul	r9, r29
    803a:	9e 9e       	mul	r9, r30
    803c:	9f 9f       	mul	r25, r31
    803e:	9f 9f       	mul	r25, r31
    8040:	9f 9f       	mul	r25, r31
    8042:	9f 9e       	mul	r9, r31
    8044:	9e 9e       	mul	r9, r30
    8046:	9d 9d       	mul	r25, r13
    8048:	9d 9c       	mul	r9, r13
    804a:	9b 9b       	sbis	0x13, 3	; 19
    804c:	9a 99       	sbic	0x13, 2	; 19
    804e:	98 97       	sbiw	r26, 0x28	; 40
    8050:	96 95       	lsr	r25
    8052:	93 92       	.word	0x9293	; ????
    8054:	90 8f       	std	Z+24, r25	; 0x18
    8056:	8d 8c       	ldd	r8, Y+29	; 0x1d
    8058:	8a 88       	ldd	r8, Y+18	; 0x12
    805a:	86 85       	ldd	r24, Z+14	; 0x0e
    805c:	83 82       	std	Z+3, r8	; 0x03
    805e:	81 80       	ldd	r8, Z+1	; 0x01
    8060:	80 81       	ld	r24, Z
    8062:	83 86       	std	Z+11, r8	; 0x0b
    8064:	8a 91       	ld	r24, -Y
    8066:	99 a2       	std	Y+33, r9	; 0x21
    8068:	ac b7       	in	r26, 0x3c	; 60
    806a:	c1 ca       	rjmp	.-2686   	; 0x75ee <esmw+0x58>
    806c:	d2 d9       	rcall	.-3164   	; 0x7412 <ProcessMusic+0x32e>
    806e:	de e2       	ldi	r29, 0x2E	; 46
    8070:	e4 e5       	ldi	r30, 0x54	; 84
    8072:	e6 e5       	ldi	r30, 0x56	; 86
    8074:	e4 e2       	ldi	r30, 0x24	; 36
    8076:	e0 de       	rcall	.-576    	; 0x7e38 <waves+0x638>
    8078:	dd e1       	ldi	r29, 0x1D	; 29
    807a:	eb f5       	brvc	.+122    	; 0x80f6 <waves+0x8f6>
    807c:	f9 f8       	.word	0xf8f9	; ????
    807e:	f9 00       	.word	0x00f9	; ????
    8080:	07 08       	sbc	r0, r7
    8082:	07 0b       	sbc	r16, r23
    8084:	15 1f       	adc	r17, r21
    8086:	23 22       	and	r2, r19
    8088:	20 1e       	adc	r2, r16
    808a:	1c 1b       	sub	r17, r28
    808c:	1a 1b       	sub	r17, r26
    808e:	1c 1e       	adc	r1, r28
    8090:	22 27       	eor	r18, r18
    8092:	2e 36       	cpi	r18, 0x6E	; 110
    8094:	3f 49       	sbci	r19, 0x9F	; 159
    8096:	54 5e       	subi	r21, 0xE4	; 228
    8098:	67 6f       	ori	r22, 0xF7	; 247
    809a:	76 7a       	andi	r23, 0xA6	; 166
    809c:	7e 7f       	andi	r23, 0xFE	; 254
    809e:	7f 7f       	andi	r23, 0xFF	; 255
    80a0:	7f 7e       	andi	r23, 0xEF	; 239
    80a2:	7d 7b       	andi	r23, 0xBD	; 189
    80a4:	7a 78       	andi	r23, 0x8A	; 138
    80a6:	76 74       	andi	r23, 0x46	; 70
    80a8:	73 71       	andi	r23, 0x13	; 19
    80aa:	70 6e       	ori	r23, 0xE0	; 224
    80ac:	6d 6b       	ori	r22, 0xBD	; 189
    80ae:	6a 69       	ori	r22, 0x9A	; 154
    80b0:	68 67       	ori	r22, 0x78	; 120
    80b2:	66 65       	ori	r22, 0x56	; 86
    80b4:	65 64       	ori	r22, 0x45	; 69
    80b6:	64 63       	ori	r22, 0x34	; 52
    80b8:	63 62       	ori	r22, 0x23	; 35
    80ba:	62 62       	ori	r22, 0x22	; 34
    80bc:	61 61       	ori	r22, 0x11	; 17
    80be:	61 61       	ori	r22, 0x11	; 17
    80c0:	61 61       	ori	r22, 0x11	; 17
    80c2:	61 62       	ori	r22, 0x21	; 33
    80c4:	62 62       	ori	r22, 0x22	; 34
    80c6:	63 63       	ori	r22, 0x33	; 51
    80c8:	63 64       	ori	r22, 0x43	; 67
    80ca:	65 65       	ori	r22, 0x55	; 85
    80cc:	66 67       	ori	r22, 0x76	; 118
    80ce:	68 69       	ori	r22, 0x98	; 152
    80d0:	6a 6b       	ori	r22, 0xBA	; 186
    80d2:	6d 6e       	ori	r22, 0xED	; 237
    80d4:	70 71       	andi	r23, 0x10	; 16
    80d6:	73 74       	andi	r23, 0x43	; 67
    80d8:	76 78       	andi	r23, 0x86	; 134
    80da:	7a 7b       	andi	r23, 0xBA	; 186
    80dc:	7d 7e       	andi	r23, 0xED	; 237
    80de:	7f 7f       	andi	r23, 0xFF	; 255
    80e0:	7f 7f       	andi	r23, 0xFF	; 255
    80e2:	7e 7a       	andi	r23, 0xAE	; 174
    80e4:	76 6f       	ori	r23, 0xF6	; 246
    80e6:	67 5e       	subi	r22, 0xE7	; 231
    80e8:	54 49       	sbci	r21, 0x94	; 148
    80ea:	3f 36       	cpi	r19, 0x6F	; 111
    80ec:	2e 27       	eor	r18, r30
    80ee:	22 1e       	adc	r2, r18
    80f0:	1c 1b       	sub	r17, r28
    80f2:	1a 1b       	sub	r17, r26
    80f4:	1c 1e       	adc	r1, r28
    80f6:	20 22       	and	r2, r16
    80f8:	23 1f       	adc	r18, r19
    80fa:	15 0b       	sbc	r17, r21
    80fc:	07 08       	sbc	r0, r7
    80fe:	07 00       	.word	0x0007	; ????
    8100:	1f 31       	cpi	r17, 0x1F	; 31
    8102:	3d 44       	sbci	r19, 0x4D	; 77
    8104:	4e 53       	subi	r20, 0x3E	; 62
    8106:	54 56       	subi	r21, 0x64	; 100
    8108:	5a 5f       	subi	r21, 0xFA	; 250
    810a:	64 69       	ori	r22, 0x94	; 148
    810c:	6e 74       	andi	r22, 0x4E	; 78
    810e:	76 79       	andi	r23, 0x96	; 150
    8110:	7c 7f       	andi	r23, 0xFC	; 252
    8112:	7f 7f       	andi	r23, 0xFF	; 255
    8114:	7f 7f       	andi	r23, 0xFF	; 255
    8116:	7f 7f       	andi	r23, 0xFF	; 255
    8118:	7f 7f       	andi	r23, 0xFF	; 255
    811a:	7f 7f       	andi	r23, 0xFF	; 255
    811c:	7f 7f       	andi	r23, 0xFF	; 255
    811e:	7f 7f       	andi	r23, 0xFF	; 255
    8120:	7f 7f       	andi	r23, 0xFF	; 255
    8122:	7f 7f       	andi	r23, 0xFF	; 255
    8124:	7f 7f       	andi	r23, 0xFF	; 255
    8126:	7f 7f       	andi	r23, 0xFF	; 255
    8128:	7f 7f       	andi	r23, 0xFF	; 255
    812a:	7f 7f       	andi	r23, 0xFF	; 255
    812c:	7f 7f       	andi	r23, 0xFF	; 255
    812e:	7f 7f       	andi	r23, 0xFF	; 255
    8130:	7f 7f       	andi	r23, 0xFF	; 255
    8132:	7f 7f       	andi	r23, 0xFF	; 255
    8134:	7f 7f       	andi	r23, 0xFF	; 255
    8136:	7f 7f       	andi	r23, 0xFF	; 255
    8138:	7f 7f       	andi	r23, 0xFF	; 255
    813a:	7f 7f       	andi	r23, 0xFF	; 255
    813c:	7f 7f       	andi	r23, 0xFF	; 255
    813e:	7f 7f       	andi	r23, 0xFF	; 255
    8140:	7f 7f       	andi	r23, 0xFF	; 255
    8142:	7f 7f       	andi	r23, 0xFF	; 255
    8144:	7f 7f       	andi	r23, 0xFF	; 255
    8146:	7f 7f       	andi	r23, 0xFF	; 255
    8148:	7f 7f       	andi	r23, 0xFF	; 255
    814a:	7f 7f       	andi	r23, 0xFF	; 255
    814c:	7f 7f       	andi	r23, 0xFF	; 255
    814e:	7f 7f       	andi	r23, 0xFF	; 255
    8150:	7f 7f       	andi	r23, 0xFF	; 255
    8152:	7f 7f       	andi	r23, 0xFF	; 255
    8154:	7f 7f       	andi	r23, 0xFF	; 255
    8156:	7f 7f       	andi	r23, 0xFF	; 255
    8158:	7f 7f       	andi	r23, 0xFF	; 255
    815a:	7f 7f       	andi	r23, 0xFF	; 255
    815c:	7f 7f       	andi	r23, 0xFF	; 255
    815e:	7f 7f       	andi	r23, 0xFF	; 255
    8160:	7f 7f       	andi	r23, 0xFF	; 255
    8162:	7f 7f       	andi	r23, 0xFF	; 255
    8164:	7f 7f       	andi	r23, 0xFF	; 255
    8166:	7f 7f       	andi	r23, 0xFF	; 255
    8168:	7f 7f       	andi	r23, 0xFF	; 255
    816a:	7f 7f       	andi	r23, 0xFF	; 255
    816c:	7f 7f       	andi	r23, 0xFF	; 255
    816e:	7f 7f       	andi	r23, 0xFF	; 255
    8170:	7f 7f       	andi	r23, 0xFF	; 255
    8172:	7f 7f       	andi	r23, 0xFF	; 255
    8174:	7f 7f       	andi	r23, 0xFF	; 255
    8176:	7f 7f       	andi	r23, 0xFF	; 255
    8178:	7f 7f       	andi	r23, 0xFF	; 255
    817a:	7f 7c       	andi	r23, 0xCF	; 207
    817c:	78 71       	andi	r23, 0x18	; 24
    817e:	68 4c       	sbci	r22, 0xC8	; 200
    8180:	2c 1c       	adc	r2, r12
    8182:	12 0c       	add	r1, r2
    8184:	0a 0b       	sbc	r16, r26
    8186:	0a 05       	cpc	r16, r10
    8188:	fd f3       	brhs	.-2      	; 0x8188 <waves+0x988>
    818a:	e9 df       	rcall	.-46     	; 0x815e <waves+0x95e>
    818c:	d4 ca       	rjmp	.-2648   	; 0x7736 <steptable+0x12e>
    818e:	c0 b7       	in	r28, 0x30	; 48
    8190:	ae a6       	std	Y+46, r10	; 0x2e
    8192:	9e 97       	sbiw	r26, 0x2e	; 46
    8194:	91 8b       	std	Z+17, r25	; 0x11
    8196:	86 85       	ldd	r24, Z+14	; 0x0e
    8198:	82 80       	ldd	r8, Z+2	; 0x02
    819a:	80 80       	ld	r8, Z
    819c:	80 80       	ld	r8, Z
    819e:	80 80       	ld	r8, Z
    81a0:	80 80       	ld	r8, Z
    81a2:	80 80       	ld	r8, Z
    81a4:	80 80       	ld	r8, Z
    81a6:	80 80       	ld	r8, Z
    81a8:	80 80       	ld	r8, Z
    81aa:	80 80       	ld	r8, Z
    81ac:	80 80       	ld	r8, Z
    81ae:	80 80       	ld	r8, Z
    81b0:	80 80       	ld	r8, Z
    81b2:	80 80       	ld	r8, Z
    81b4:	80 80       	ld	r8, Z
    81b6:	80 80       	ld	r8, Z
    81b8:	80 80       	ld	r8, Z
    81ba:	80 80       	ld	r8, Z
    81bc:	80 80       	ld	r8, Z
    81be:	80 80       	ld	r8, Z
    81c0:	80 80       	ld	r8, Z
    81c2:	80 80       	ld	r8, Z
    81c4:	80 80       	ld	r8, Z
    81c6:	80 80       	ld	r8, Z
    81c8:	80 80       	ld	r8, Z
    81ca:	80 80       	ld	r8, Z
    81cc:	80 80       	ld	r8, Z
    81ce:	80 80       	ld	r8, Z
    81d0:	80 80       	ld	r8, Z
    81d2:	80 80       	ld	r8, Z
    81d4:	80 80       	ld	r8, Z
    81d6:	80 80       	ld	r8, Z
    81d8:	80 80       	ld	r8, Z
    81da:	80 80       	ld	r8, Z
    81dc:	80 80       	ld	r8, Z
    81de:	80 80       	ld	r8, Z
    81e0:	80 80       	ld	r8, Z
    81e2:	80 80       	ld	r8, Z
    81e4:	80 80       	ld	r8, Z
    81e6:	80 80       	ld	r8, Z
    81e8:	80 80       	ld	r8, Z
    81ea:	80 80       	ld	r8, Z
    81ec:	80 80       	ld	r8, Z
    81ee:	80 80       	ld	r8, Z
    81f0:	80 80       	ld	r8, Z
    81f2:	80 80       	ld	r8, Z
    81f4:	80 87       	std	Z+8, r24	; 0x08
    81f6:	91 9d       	mul	r25, r1
    81f8:	ac c4       	rjmp	.+2392   	; 0x8b52 <set_shot_animations+0x5e>
    81fa:	cb d4       	rcall	.+2454   	; 0x8b92 <init_player+0x3c>
    81fc:	dd f2       	brhs	.-74     	; 0x81b4 <waves+0x9b4>
    81fe:	fa fa       	.word	0xfafa	; ????

00008200 <RestoreBackground>:
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    8200:	90 91 f7 09 	lds	r25, 0x09F7
    8204:	e8 ed       	ldi	r30, 0xD8	; 216
    8206:	f8 e0       	ldi	r31, 0x08	; 8
    8208:	80 e0       	ldi	r24, 0x00	; 0
    820a:	89 17       	cp	r24, r25
    820c:	49 f0       	breq	.+18     	; 0x8220 <RestoreBackground+0x20>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
    820e:	a0 81       	ld	r26, Z
    8210:	b1 81       	ldd	r27, Z+1	; 0x01
    8212:	a0 5a       	subi	r26, 0xA0	; 160
    8214:	be 4f       	sbci	r27, 0xFE	; 254
    8216:	22 81       	ldd	r18, Z+2	; 0x02
    8218:	2c 93       	st	X, r18
	unsigned char free_tile_index;
	bool spritesOn=true;

	void RestoreBackground(){
		unsigned char i;
		for(i=0;i<free_tile_index;i++){			
    821a:	8f 5f       	subi	r24, 0xFF	; 255
    821c:	33 96       	adiw	r30, 0x03	; 3
    821e:	f5 cf       	rjmp	.-22     	; 0x820a <RestoreBackground+0xa>
			vram[ram_tiles_restore[i].addr]=ram_tiles_restore[i].tileIndex;
		}	
	}
    8220:	08 95       	ret

00008222 <SetSpriteVisibility>:


	void SetSpriteVisibility(bool visible){
		spritesOn=visible;
    8222:	80 93 00 01 	sts	0x0100, r24
    8226:	08 95       	ret

00008228 <ProcessSprites>:
		}

	}
	*/

	void ProcessSprites(){
    8228:	2f 92       	push	r2
    822a:	3f 92       	push	r3
    822c:	4f 92       	push	r4
    822e:	5f 92       	push	r5
    8230:	6f 92       	push	r6
    8232:	7f 92       	push	r7
    8234:	8f 92       	push	r8
    8236:	9f 92       	push	r9
    8238:	af 92       	push	r10
    823a:	bf 92       	push	r11
    823c:	cf 92       	push	r12
    823e:	df 92       	push	r13
    8240:	ef 92       	push	r14
    8242:	ff 92       	push	r15
    8244:	0f 93       	push	r16
    8246:	1f 93       	push	r17
    8248:	cf 93       	push	r28
    824a:	df 93       	push	r29
    824c:	00 d0       	rcall	.+0      	; 0x824e <ProcessSprites+0x26>
    824e:	1f 92       	push	r1
    8250:	cd b7       	in	r28, 0x3d	; 61
    8252:	de b7       	in	r29, 0x3e	; 62
	
		unsigned char i,bx,by,dx,dy,bt,x,y,tx=1,ty=1,wx,wy;
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
    8254:	10 92 f7 09 	sts	0x09F7, r1
		if(!spritesOn) return;
    8258:	80 91 00 01 	lds	r24, 0x0100
    825c:	88 23       	and	r24, r24
    825e:	09 f4       	brne	.+2      	; 0x8262 <ProcessSprites+0x3a>
    8260:	a1 c0       	rjmp	.+322    	; 0x83a4 <ProcessSprites+0x17c>
    8262:	e8 ea       	ldi	r30, 0xA8	; 168
    8264:	ce 2e       	mov	r12, r30
    8266:	e4 e0       	ldi	r30, 0x04	; 4
    8268:	de 2e       	mov	r13, r30
    826a:	61 2c       	mov	r6, r1
	
		for(i=0;i<MAX_SPRITES;i++){
			bx=sprites[i].x;
    826c:	f6 01       	movw	r30, r12
    826e:	80 81       	ld	r24, Z

			if(bx!=(SCREEN_TILES_H*TILE_WIDTH)){
    8270:	80 3f       	cpi	r24, 0xF0	; 240
    8272:	09 f4       	brne	.+2      	; 0x8276 <ProcessSprites+0x4e>
    8274:	79 c0       	rjmp	.+242    	; 0x8368 <ProcessSprites+0x140>
				#if SCROLLING == 1
					ssx=sprites[i].x+Screen.scrollX;
					ssy=sprites[i].y+Screen.scrollY;
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
    8276:	91 81       	ldd	r25, Z+1	; 0x01
    8278:	29 2f       	mov	r18, r25
    827a:	30 e0       	ldi	r19, 0x00	; 0

				tx=1;
				ty=1;

				//get the BG tiles that are overlapped by the sprite
				bx=ssx>>3;
    827c:	28 2e       	mov	r2, r24
    827e:	26 94       	lsr	r2
    8280:	26 94       	lsr	r2
    8282:	26 94       	lsr	r2
				dx=ssx&0x7;
    8284:	87 70       	andi	r24, 0x07	; 7
				if(dx>0) tx++;
    8286:	19 f0       	breq	.+6      	; 0x828e <ProcessSprites+0x66>
    8288:	72 e0       	ldi	r23, 0x02	; 2
    828a:	47 2e       	mov	r4, r23
    828c:	02 c0       	rjmp	.+4      	; 0x8292 <ProcessSprites+0x6a>
   				#else
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
    828e:	44 24       	eor	r4, r4
    8290:	43 94       	inc	r4
				dx=ssx&0x7;
				if(dx>0) tx++;

				//by=ssy>>3;
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
    8292:	63 e0       	ldi	r22, 0x03	; 3
    8294:	36 95       	lsr	r19
    8296:	27 95       	ror	r18
    8298:	6a 95       	dec	r22
    829a:	e1 f7       	brne	.-8      	; 0x8294 <ProcessSprites+0x6c>
    829c:	32 2e       	mov	r3, r18
				dy=ssy%TILE_HEIGHT;
    829e:	97 70       	andi	r25, 0x07	; 7
				if(dy>0) ty++;			
    82a0:	19 f0       	breq	.+6      	; 0x82a8 <ProcessSprites+0x80>
    82a2:	52 e0       	ldi	r21, 0x02	; 2
    82a4:	55 2e       	mov	r5, r21
    82a6:	02 c0       	rjmp	.+4      	; 0x82ac <ProcessSprites+0x84>
					ssx=sprites[i].x;
					ssy=sprites[i].y;
				#endif

				tx=1;
				ty=1;
    82a8:	55 24       	eor	r5, r5
    82aa:	53 94       	inc	r5
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    82ac:	29 2f       	mov	r18, r25
    82ae:	30 e0       	ldi	r19, 0x00	; 0
    82b0:	32 2f       	mov	r19, r18
    82b2:	22 27       	eor	r18, r18
    82b4:	a9 01       	movw	r20, r18
    82b6:	48 0f       	add	r20, r24
    82b8:	51 1d       	adc	r21, r1
    82ba:	5b 83       	std	Y+3, r21	; 0x03
    82bc:	4a 83       	std	Y+2, r20	; 0x02
    82be:	e1 2c       	mov	r14, r1
    82c0:	f1 2c       	mov	r15, r1
    82c2:	94 ee       	ldi	r25, 0xE4	; 228
    82c4:	93 0d       	add	r25, r3
    82c6:	99 83       	std	Y+1, r25	; 0x01
    82c8:	03 2d       	mov	r16, r3
    82ca:	0e 0d       	add	r16, r14
    82cc:	0c 31       	cpi	r16, 0x1C	; 28
    82ce:	10 f0       	brcs	.+4      	; 0x82d4 <ProcessSprites+0xac>
    82d0:	09 81       	ldd	r16, Y+1	; 0x01
    82d2:	0e 0d       	add	r16, r14
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    82d4:	5e e1       	ldi	r21, 0x1E	; 30
    82d6:	05 9f       	mul	r16, r21
    82d8:	80 01       	movw	r16, r0
    82da:	11 24       	eor	r1, r1
								bt=free_tile_index;
								free_tile_index++;										
							}
				
							if(bt<RAM_TILES_COUNT){				
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    82dc:	be 2c       	mov	r11, r14
    82de:	aa 24       	eor	r10, r10
    82e0:	72 2c       	mov	r7, r2
								    wy-=(Screen.scrollHeight*2);
							    }else if(wy>=Screen.scrollHeight){
							    	wy-=Screen.scrollHeight;
							    }
                            #endif
							if(wx>=VRAM_TILES_H)wx-=VRAM_TILES_H; //should always be 32
    82e2:	ed e1       	ldi	r30, 0x1D	; 29
    82e4:	e7 15       	cp	r30, r7
    82e6:	18 f4       	brcc	.+6      	; 0x82ee <ProcessSprites+0xc6>
    82e8:	82 ee       	ldi	r24, 0xE2	; 226
    82ea:	87 0d       	add	r24, r7
    82ec:	01 c0       	rjmp	.+2      	; 0x82f0 <ProcessSprites+0xc8>
    82ee:	87 2d       	mov	r24, r7

							#if SCROLLING == 0
								ramPtr=(wy*VRAM_TILES_H)+wx;
    82f0:	a8 01       	movw	r20, r16
    82f2:	48 0f       	add	r20, r24
    82f4:	51 1d       	adc	r21, r1

								ramPtr=((wy>>3)*256)+(wx*8)+(wy&7);	

							#endif

							bt=vram[ramPtr];						
    82f6:	ca 01       	movw	r24, r20
    82f8:	80 5a       	subi	r24, 0xA0	; 160
    82fa:	9e 4f       	sbci	r25, 0xFE	; 254
    82fc:	4c 01       	movw	r8, r24
    82fe:	fc 01       	movw	r30, r24
    8300:	80 81       	ld	r24, Z

							if( (bt>=RAM_TILES_COUNT)  && (free_tile_index < RAM_TILES_COUNT) ){
    8302:	80 31       	cpi	r24, 0x10	; 16
    8304:	e0 f0       	brcs	.+56     	; 0x833e <ProcessSprites+0x116>
    8306:	60 91 f7 09 	lds	r22, 0x09F7
    830a:	60 31       	cpi	r22, 0x10	; 16
    830c:	f8 f4       	brcc	.+62     	; 0x834c <ProcessSprites+0x124>

								//tile is mapped to flash. Copy it to next free RAM tile.
								//if no ram free ignore tile
								ram_tiles_restore[free_tile_index].addr=ramPtr;
    830e:	26 2f       	mov	r18, r22
    8310:	30 e0       	ldi	r19, 0x00	; 0
    8312:	f9 01       	movw	r30, r18
    8314:	ee 0f       	add	r30, r30
    8316:	ff 1f       	adc	r31, r31
    8318:	e2 0f       	add	r30, r18
    831a:	f3 1f       	adc	r31, r19
    831c:	e8 52       	subi	r30, 0x28	; 40
    831e:	f7 4f       	sbci	r31, 0xF7	; 247
    8320:	51 83       	std	Z+1, r21	; 0x01
    8322:	40 83       	st	Z, r20
								ram_tiles_restore[free_tile_index].tileIndex=bt;
    8324:	82 83       	std	Z+2, r24	; 0x02
													
								CopyTileToRam(bt,free_tile_index);
    8326:	0e 94 70 32 	call	0x64e0	; 0x64e0 <CopyTileToRam>

								vram[ramPtr]=free_tile_index;
    832a:	80 91 f7 09 	lds	r24, 0x09F7
    832e:	f4 01       	movw	r30, r8
    8330:	80 83       	st	Z, r24
								bt=free_tile_index;
								free_tile_index++;										
    8332:	91 e0       	ldi	r25, 0x01	; 1
    8334:	98 0f       	add	r25, r24
    8336:	90 93 f7 09 	sts	0x09F7, r25
							}
				
							if(bt<RAM_TILES_COUNT){				
    833a:	80 31       	cpi	r24, 0x10	; 16
    833c:	38 f4       	brcc	.+14     	; 0x834c <ProcessSprites+0x124>
								BlitSprite(i,bt,(y<<8)+x,(dy<<8)+dx);						
    833e:	2a 81       	ldd	r18, Y+2	; 0x02
    8340:	3b 81       	ldd	r19, Y+3	; 0x03
    8342:	a5 01       	movw	r20, r10
    8344:	68 2f       	mov	r22, r24
    8346:	86 2d       	mov	r24, r6
    8348:	0e 94 01 33 	call	0x6602	; 0x6602 <BlitSprite>
    834c:	ff ef       	ldi	r31, 0xFF	; 255
    834e:	af 1a       	sub	r10, r31
    8350:	bf 0a       	sbc	r11, r31
    8352:	73 94       	inc	r7
    8354:	87 2d       	mov	r24, r7
    8356:	82 19       	sub	r24, r2
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){

					for(x=0;x<tx;x++){
    8358:	84 15       	cp	r24, r4
    835a:	18 f2       	brcs	.-122    	; 0x82e2 <ProcessSprites+0xba>
    835c:	4f ef       	ldi	r20, 0xFF	; 255
    835e:	e4 1a       	sub	r14, r20
    8360:	f4 0a       	sbc	r15, r20
				//dy=ssy&0x7;
				by=ssy/TILE_HEIGHT;
				dy=ssy%TILE_HEIGHT;
				if(dy>0) ty++;			

				for(y=0;y<ty;y++){
    8362:	e5 14       	cp	r14, r5
    8364:	08 f4       	brcc	.+2      	; 0x8368 <ProcessSprites+0x140>
    8366:	b0 cf       	rjmp	.-160    	; 0x82c8 <ProcessSprites+0xa0>
		unsigned int ramPtr,ssx,ssy;

		free_tile_index=0;	
		if(!spritesOn) return;
	
		for(i=0;i<MAX_SPRITES;i++){
    8368:	63 94       	inc	r6
    836a:	84 e0       	ldi	r24, 0x04	; 4
    836c:	c8 0e       	add	r12, r24
    836e:	d1 1c       	adc	r13, r1
    8370:	9c e0       	ldi	r25, 0x0C	; 12
    8372:	69 12       	cpse	r6, r25
    8374:	7b cf       	rjmp	.-266    	; 0x826c <ProcessSprites+0x44>


		//restore BG tiles
		RestoreBackground();

	}
    8376:	0f 90       	pop	r0
    8378:	0f 90       	pop	r0
    837a:	0f 90       	pop	r0
    837c:	df 91       	pop	r29
    837e:	cf 91       	pop	r28
    8380:	1f 91       	pop	r17
    8382:	0f 91       	pop	r16
    8384:	ff 90       	pop	r15
    8386:	ef 90       	pop	r14
    8388:	df 90       	pop	r13
    838a:	cf 90       	pop	r12
    838c:	bf 90       	pop	r11
    838e:	af 90       	pop	r10
    8390:	9f 90       	pop	r9
    8392:	8f 90       	pop	r8
    8394:	7f 90       	pop	r7
    8396:	6f 90       	pop	r6
    8398:	5f 90       	pop	r5
    839a:	4f 90       	pop	r4
    839c:	3f 90       	pop	r3
    839e:	2f 90       	pop	r2
			}//	if(bx<(SCREEN_TILES_H*TILE_WIDTH))		
		}


		//restore BG tiles
		RestoreBackground();
    83a0:	0c 94 00 41 	jmp	0x8200	; 0x8200 <RestoreBackground>

	}
    83a4:	0f 90       	pop	r0
    83a6:	0f 90       	pop	r0
    83a8:	0f 90       	pop	r0
    83aa:	df 91       	pop	r29
    83ac:	cf 91       	pop	r28
    83ae:	1f 91       	pop	r17
    83b0:	0f 91       	pop	r16
    83b2:	ff 90       	pop	r15
    83b4:	ef 90       	pop	r14
    83b6:	df 90       	pop	r13
    83b8:	cf 90       	pop	r12
    83ba:	bf 90       	pop	r11
    83bc:	af 90       	pop	r10
    83be:	9f 90       	pop	r9
    83c0:	8f 90       	pop	r8
    83c2:	7f 90       	pop	r7
    83c4:	6f 90       	pop	r6
    83c6:	5f 90       	pop	r5
    83c8:	4f 90       	pop	r4
    83ca:	3f 90       	pop	r3
    83cc:	2f 90       	pop	r2
    83ce:	08 95       	ret

000083d0 <MapSprite2>:
		}

	}


	void MapSprite2(unsigned char startSprite,const char *map,u8 spriteFlags){      
    83d0:	df 92       	push	r13
    83d2:	ef 92       	push	r14
    83d4:	ff 92       	push	r15
    83d6:	0f 93       	push	r16
    83d8:	1f 93       	push	r17
    83da:	cf 93       	push	r28
    83dc:	df 93       	push	r29
    83de:	db 01       	movw	r26, r22
    
		unsigned char mapWidth=pgm_read_byte(&(map[0]));
    83e0:	fb 01       	movw	r30, r22
    83e2:	14 91       	lpm	r17, Z
		unsigned char mapHeight=pgm_read_byte(&(map[1]));
    83e4:	31 96       	adiw	r30, 0x01	; 1
    83e6:	64 91       	lpm	r22, Z
    83e8:	5f ef       	ldi	r21, 0xFF	; 255
    83ea:	51 0f       	add	r21, r17
		s8 x,y,dx,dy,t; 

		if(spriteFlags & SPRITE_FLIP_X){
    83ec:	24 2f       	mov	r18, r20
    83ee:	21 70       	andi	r18, 0x01	; 1
    83f0:	40 ff       	sbrs	r20, 0
    83f2:	04 c0       	rjmp	.+8      	; 0x83fc <MapSprite2+0x2c>
			x=(mapWidth-1);
    83f4:	95 2f       	mov	r25, r21
			dx=-1;
    83f6:	ff 24       	eor	r15, r15
    83f8:	fa 94       	dec	r15
    83fa:	03 c0       	rjmp	.+6      	; 0x8402 <MapSprite2+0x32>
		}else{
			x=0;
			dx=1;
    83fc:	ff 24       	eor	r15, r15
    83fe:	f3 94       	inc	r15

		if(spriteFlags & SPRITE_FLIP_X){
			x=(mapWidth-1);
			dx=-1;
		}else{
			x=0;
    8400:	90 e0       	ldi	r25, 0x00	; 0
			dx=1;
		}

		if(spriteFlags & SPRITE_FLIP_Y){
    8402:	41 ff       	sbrs	r20, 1
    8404:	05 c0       	rjmp	.+10     	; 0x8410 <MapSprite2+0x40>
			y=(mapHeight-1);
    8406:	7f ef       	ldi	r23, 0xFF	; 255
    8408:	76 0f       	add	r23, r22
			dy=-1;
    840a:	ee 24       	eor	r14, r14
    840c:	ea 94       	dec	r14
    840e:	03 c0       	rjmp	.+6      	; 0x8416 <MapSprite2+0x46>
		}else{
			y=0;
			dy=1;
    8410:	ee 24       	eor	r14, r14
    8412:	e3 94       	inc	r14

		if(spriteFlags & SPRITE_FLIP_Y){
			y=(mapHeight-1);
			dy=-1;
		}else{
			y=0;
    8414:	70 e0       	ldi	r23, 0x00	; 0
    8416:	21 11       	cpse	r18, r1
    8418:	01 c0       	rjmp	.+2      	; 0x841c <MapSprite2+0x4c>
    841a:	50 e0       	ldi	r21, 0x00	; 0
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    841c:	00 e0       	ldi	r16, 0x00	; 0
    841e:	06 17       	cp	r16, r22
    8420:	09 f1       	breq	.+66     	; 0x8464 <MapSprite2+0x94>
			for(u8 cx=0;cx<mapWidth;cx++){
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8422:	71 03       	mulsu	r23, r17
    8424:	e0 01       	movw	r28, r0
    8426:	11 24       	eor	r1, r1
    8428:	d8 2e       	mov	r13, r24
    842a:	d1 0e       	add	r13, r17
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
			for(u8 cx=0;cx<mapWidth;cx++){
    842c:	8d 15       	cp	r24, r13
    842e:	b1 f0       	breq	.+44     	; 0x845c <MapSprite2+0x8c>
				t=pgm_read_byte(&(map[(y*mapWidth)+x+2])); 
    8430:	9e 01       	movw	r18, r28
    8432:	29 0f       	add	r18, r25
    8434:	31 1d       	adc	r19, r1
    8436:	97 fd       	sbrc	r25, 7
    8438:	3a 95       	dec	r19
    843a:	2e 5f       	subi	r18, 0xFE	; 254
    843c:	3f 4f       	sbci	r19, 0xFF	; 255
    843e:	fd 01       	movw	r30, r26
    8440:	e2 0f       	add	r30, r18
    8442:	f3 1f       	adc	r31, r19
    8444:	24 91       	lpm	r18, Z
				sprites[startSprite].tileIndex=t;
    8446:	34 e0       	ldi	r19, 0x04	; 4
    8448:	83 9f       	mul	r24, r19
    844a:	f0 01       	movw	r30, r0
    844c:	11 24       	eor	r1, r1
    844e:	e8 55       	subi	r30, 0x58	; 88
    8450:	fb 4f       	sbci	r31, 0xFB	; 251
    8452:	22 83       	std	Z+2, r18	; 0x02
				sprites[startSprite++].flags=spriteFlags;
    8454:	8f 5f       	subi	r24, 0xFF	; 255
    8456:	43 83       	std	Z+3, r20	; 0x03
    8458:	9f 0d       	add	r25, r15
    845a:	e8 cf       	rjmp	.-48     	; 0x842c <MapSprite2+0x5c>
    845c:	7e 0d       	add	r23, r14
		}else{
			y=0;
			dy=1;
		}

		for(u8 cy=0;cy<mapHeight;cy++){
    845e:	0f 5f       	subi	r16, 0xFF	; 255
				sprites[startSprite].tileIndex=t;
				sprites[startSprite++].flags=spriteFlags;
				x+=dx;
			}
			y+=dy;
			x=(spriteFlags & SPRITE_FLIP_X)?(mapWidth-1):0;
    8460:	95 2f       	mov	r25, r21
    8462:	dd cf       	rjmp	.-70     	; 0x841e <MapSprite2+0x4e>
	    }
	}
    8464:	df 91       	pop	r29
    8466:	cf 91       	pop	r28
    8468:	1f 91       	pop	r17
    846a:	0f 91       	pop	r16
    846c:	ff 90       	pop	r15
    846e:	ef 90       	pop	r14
    8470:	df 90       	pop	r13
    8472:	08 95       	ret

00008474 <MoveSprite>:


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){
    8474:	0f 93       	push	r16
    8476:	cf 93       	push	r28
    8478:	50 e0       	ldi	r21, 0x00	; 0

		for(unsigned char dy=0;dy<height;dy++){
    847a:	30 e0       	ldi	r19, 0x00	; 0
    847c:	30 17       	cp	r19, r16
    847e:	e1 f0       	breq	.+56     	; 0x84b8 <MoveSprite+0x44>
    8480:	b4 2f       	mov	r27, r20
    8482:	a0 e2       	ldi	r26, 0x20	; 32
    8484:	a4 0f       	add	r26, r20
    8486:	78 2f       	mov	r23, r24
    8488:	72 0f       	add	r23, r18
    848a:	96 2f       	mov	r25, r22
			for(unsigned char dx=0;dx<width;dx++){
    848c:	87 17       	cp	r24, r23
    848e:	81 f0       	breq	.+32     	; 0x84b0 <MoveSprite+0x3c>
			
				sprites[startSprite].x=x+(TILE_WIDTH*dx);
    8490:	c4 e0       	ldi	r28, 0x04	; 4
    8492:	8c 9f       	mul	r24, r28
    8494:	f0 01       	movw	r30, r0
    8496:	11 24       	eor	r1, r1
    8498:	e8 55       	subi	r30, 0x58	; 88
    849a:	fb 4f       	sbci	r31, 0xFB	; 251
    849c:	90 83       	st	Z, r25
						sprites[startSprite].y=tmp;
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
					}
				#else
					if((VRAM_TILES_V<32) && (y+(TILE_HEIGHT*dy))>(VRAM_TILES_V*TILE_HEIGHT)){
    849e:	41 3e       	cpi	r20, 0xE1	; 225
    84a0:	51 05       	cpc	r21, r1
    84a2:	14 f0       	brlt	.+4      	; 0x84a8 <MoveSprite+0x34>
						unsigned char tmp=(y+(TILE_HEIGHT*dy))-(VRAM_TILES_V*TILE_HEIGHT);
						sprites[startSprite].y=tmp;
    84a4:	a1 83       	std	Z+1, r26	; 0x01
    84a6:	01 c0       	rjmp	.+2      	; 0x84aa <MoveSprite+0x36>
					}else{
						sprites[startSprite].y=y+(TILE_HEIGHT*dy);
    84a8:	b1 83       	std	Z+1, r27	; 0x01
					}
				#endif

				startSprite++;
    84aa:	8f 5f       	subi	r24, 0xFF	; 255
    84ac:	98 5f       	subi	r25, 0xF8	; 248
    84ae:	ee cf       	rjmp	.-36     	; 0x848c <MoveSprite+0x18>
	}


	void MoveSprite(unsigned char startSprite,unsigned char x,unsigned char y,unsigned char width,unsigned char height){

		for(unsigned char dy=0;dy<height;dy++){
    84b0:	3f 5f       	subi	r19, 0xFF	; 255
    84b2:	48 5f       	subi	r20, 0xF8	; 248
    84b4:	5f 4f       	sbci	r21, 0xFF	; 255
    84b6:	e2 cf       	rjmp	.-60     	; 0x847c <MoveSprite+0x8>

				startSprite++;
			}
		}	

	}
    84b8:	cf 91       	pop	r28
    84ba:	0f 91       	pop	r16
    84bc:	08 95       	ret

000084be <DisplayLogo>:

	//Callback invoked by UzeboxCore.Initialize()
	void DisplayLogo(){
    84be:	08 95       	ret

000084c0 <InitializeVideoMode>:
		#endif	
	}


	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){
    84c0:	e8 ea       	ldi	r30, 0xA8	; 168
    84c2:	f4 e0       	ldi	r31, 0x04	; 4

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
			sprites[i].x=(SCREEN_TILES_H*TILE_WIDTH);		
    84c4:	80 ef       	ldi	r24, 0xF0	; 240
    84c6:	80 83       	st	Z, r24
    84c8:	34 96       	adiw	r30, 0x04	; 4

	//Callback invoked by UzeboxCore.Initialize()
	void InitializeVideoMode(){

		//disable sprites
		for(int i=0;i<MAX_SPRITES;i++){
    84ca:	94 e0       	ldi	r25, 0x04	; 4
    84cc:	e8 3d       	cpi	r30, 0xD8	; 216
    84ce:	f9 07       	cpc	r31, r25
    84d0:	d1 f7       	brne	.-12     	; 0x84c6 <InitializeVideoMode+0x6>
			screenSections[i].wrapLine=0;
			screenSections[i].flags=SCT_PRIORITY_SPR;
		}
		*/

	}
    84d2:	08 95       	ret

000084d4 <DrawMap2>:



//Draws a map of tile at the specified position

void DrawMap2(unsigned char x,unsigned char y,const char *map){
    84d4:	4f 92       	push	r4
    84d6:	5f 92       	push	r5
    84d8:	6f 92       	push	r6
    84da:	7f 92       	push	r7
    84dc:	8f 92       	push	r8
    84de:	9f 92       	push	r9
    84e0:	af 92       	push	r10
    84e2:	bf 92       	push	r11
    84e4:	cf 92       	push	r12
    84e6:	df 92       	push	r13
    84e8:	ef 92       	push	r14
    84ea:	ff 92       	push	r15
    84ec:	0f 93       	push	r16
    84ee:	1f 93       	push	r17
    84f0:	cf 93       	push	r28
    84f2:	df 93       	push	r29
    84f4:	68 2e       	mov	r6, r24
    84f6:	56 2e       	mov	r5, r22
    84f8:	7a 01       	movw	r14, r20
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
    84fa:	fa 01       	movw	r30, r20
    84fc:	74 90       	lpm	r7, Z
	u8 mapHeight=pgm_read_byte(&(map[1]));
    84fe:	31 96       	adiw	r30, 0x01	; 1
    8500:	84 90       	lpm	r8, Z
    8502:	c7 2c       	mov	r12, r7
    8504:	d1 2c       	mov	r13, r1
	for(u8 dy=0;dy<mapHeight;dy++){
    8506:	00 e0       	ldi	r16, 0x00	; 0
    8508:	10 e0       	ldi	r17, 0x00	; 0
    850a:	91 2c       	mov	r9, r1
    850c:	98 14       	cp	r9, r8
    850e:	f1 f0       	breq	.+60     	; 0x854c <DrawMap2+0x78>
    8510:	c0 e0       	ldi	r28, 0x00	; 0
    8512:	d0 e0       	ldi	r29, 0x00	; 0
    8514:	58 01       	movw	r10, r16
    8516:	f2 e0       	ldi	r31, 0x02	; 2
    8518:	af 0e       	add	r10, r31
    851a:	b1 1c       	adc	r11, r1
    851c:	49 2c       	mov	r4, r9
    851e:	45 0c       	add	r4, r5
		for(u8 dx=0;dx<mapWidth;dx++){			
    8520:	c7 15       	cp	r28, r7
    8522:	80 f4       	brcc	.+32     	; 0x8544 <DrawMap2+0x70>
    8524:	95 01       	movw	r18, r10
    8526:	2c 0f       	add	r18, r28
    8528:	3d 1f       	adc	r19, r29
    852a:	f7 01       	movw	r30, r14
    852c:	e2 0f       	add	r30, r18
    852e:	f3 1f       	adc	r31, r19
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
    8530:	24 91       	lpm	r18, Z
    8532:	42 2f       	mov	r20, r18
    8534:	50 e0       	ldi	r21, 0x00	; 0
    8536:	64 2d       	mov	r22, r4
    8538:	8c 2f       	mov	r24, r28
    853a:	86 0d       	add	r24, r6
    853c:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
    8540:	21 96       	adiw	r28, 0x01	; 1
    8542:	ee cf       	rjmp	.-36     	; 0x8520 <DrawMap2+0x4c>

void DrawMap2(unsigned char x,unsigned char y,const char *map){
	//unsigned char i;
	u8 mapWidth=pgm_read_byte(&(map[0]));
	u8 mapHeight=pgm_read_byte(&(map[1]));
	for(u8 dy=0;dy<mapHeight;dy++){
    8544:	93 94       	inc	r9
    8546:	0c 0d       	add	r16, r12
    8548:	1d 1d       	adc	r17, r13
    854a:	e0 cf       	rjmp	.-64     	; 0x850c <DrawMap2+0x38>
		for(u8 dx=0;dx<mapWidth;dx++){			
			SetTile(x+dx,y+dy,pgm_read_byte(&(map[(dy*mapWidth)+dx+2])));					
		}
	}

}
    854c:	df 91       	pop	r29
    854e:	cf 91       	pop	r28
    8550:	1f 91       	pop	r17
    8552:	0f 91       	pop	r16
    8554:	ff 90       	pop	r15
    8556:	ef 90       	pop	r14
    8558:	df 90       	pop	r13
    855a:	cf 90       	pop	r12
    855c:	bf 90       	pop	r11
    855e:	af 90       	pop	r10
    8560:	9f 90       	pop	r9
    8562:	8f 90       	pop	r8
    8564:	7f 90       	pop	r7
    8566:	6f 90       	pop	r6
    8568:	5f 90       	pop	r5
    856a:	4f 90       	pop	r4
    856c:	08 95       	ret

0000856e <PrintByte>:
	}
		
}

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
    856e:	df 92       	push	r13
    8570:	ef 92       	push	r14
    8572:	ff 92       	push	r15
    8574:	0f 93       	push	r16
    8576:	1f 93       	push	r17
    8578:	cf 93       	push	r28
    857a:	df 93       	push	r29
    857c:	f6 2e       	mov	r15, r22
    857e:	04 2f       	mov	r16, r20
    8580:	d2 2e       	mov	r13, r18
    8582:	ec 01       	movw	r28, r24
	unsigned char c,i;

	for(i=0;i<3;i++){
    8584:	10 e0       	ldi	r17, 0x00	; 0
		c=val%10;
    8586:	8a e0       	ldi	r24, 0x0A	; 10
    8588:	e8 2e       	mov	r14, r24
		if(val>0 || i==0){
    858a:	01 11       	cpse	r16, r1
    858c:	02 c0       	rjmp	.+4      	; 0x8592 <PrintByte+0x24>
    858e:	11 11       	cpse	r17, r1
    8590:	07 c0       	rjmp	.+14     	; 0x85a0 <PrintByte+0x32>
//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
		c=val%10;
    8592:	80 2f       	mov	r24, r16
    8594:	6e 2d       	mov	r22, r14
    8596:	0e 94 9d 55 	call	0xab3a	; 0xab3a <__udivmodqi4>
		if(val>0 || i==0){
			SetFont(x--,y,c+CHAR_ZERO);
    859a:	40 e1       	ldi	r20, 0x10	; 16
    859c:	49 0f       	add	r20, r25
    859e:	05 c0       	rjmp	.+10     	; 0x85aa <PrintByte+0x3c>
		}else{
			if(zeropad){
    85a0:	dd 20       	and	r13, r13
    85a2:	11 f0       	breq	.+4      	; 0x85a8 <PrintByte+0x3a>
				SetFont(x--,y,CHAR_ZERO);
    85a4:	40 e1       	ldi	r20, 0x10	; 16
    85a6:	01 c0       	rjmp	.+2      	; 0x85aa <PrintByte+0x3c>
			}else{
				SetFont(x--,y,0);
    85a8:	40 e0       	ldi	r20, 0x00	; 0
    85aa:	6f 2d       	mov	r22, r15
    85ac:	8c 2f       	mov	r24, r28
    85ae:	0e 94 31 35 	call	0x6a62	; 0x6a62 <SetFont>
			}
		}
		val=val/10;
    85b2:	80 2f       	mov	r24, r16
    85b4:	6e 2d       	mov	r22, r14
    85b6:	0e 94 9d 55 	call	0xab3a	; 0xab3a <__udivmodqi4>
    85ba:	08 2f       	mov	r16, r24

//Print an unsigned byte in decimal
void PrintByte(int x,int y, unsigned char val,bool zeropad){
	unsigned char c,i;

	for(i=0;i<3;i++){
    85bc:	1f 5f       	subi	r17, 0xFF	; 255
    85be:	21 97       	sbiw	r28, 0x01	; 1
    85c0:	13 30       	cpi	r17, 0x03	; 3
    85c2:	19 f7       	brne	.-58     	; 0x858a <PrintByte+0x1c>
			}
		}
		val=val/10;
	}
		
}
    85c4:	df 91       	pop	r29
    85c6:	cf 91       	pop	r28
    85c8:	1f 91       	pop	r17
    85ca:	0f 91       	pop	r16
    85cc:	ff 90       	pop	r15
    85ce:	ef 90       	pop	r14
    85d0:	df 90       	pop	r13
    85d2:	08 95       	ret

000085d4 <Print>:
	PrintHexByte(x+4,y, value>>8);
	PrintHexByte(x+6,y,value&0xff);
}

//Print a string from flash
void Print(int x,int y,const char *string){
    85d4:	0f 93       	push	r16
    85d6:	1f 93       	push	r17
    85d8:	cf 93       	push	r28
    85da:	df 93       	push	r29
    85dc:	06 2f       	mov	r16, r22
    85de:	c4 2f       	mov	r28, r20
    85e0:	d5 2f       	mov	r29, r21
    85e2:	18 2f       	mov	r17, r24
    85e4:	14 1b       	sub	r17, r20

	int i=0;
	char c;

	while(1){
		c=pgm_read_byte(&(string[i++]));		
    85e6:	fe 01       	movw	r30, r28
    85e8:	44 91       	lpm	r20, Z
		if(c!=0){
    85ea:	44 23       	and	r20, r20
    85ec:	49 f0       	breq	.+18     	; 0x8600 <Print+0x2c>
			c=((c&127)-32);			
    85ee:	4f 77       	andi	r20, 0x7F	; 127
    85f0:	40 52       	subi	r20, 0x20	; 32
			SetFont(x++,y,c);
    85f2:	60 2f       	mov	r22, r16
    85f4:	8c 2f       	mov	r24, r28
    85f6:	81 0f       	add	r24, r17
    85f8:	0e 94 31 35 	call	0x6a62	; 0x6a62 <SetFont>
    85fc:	21 96       	adiw	r28, 0x01	; 1
		}else{
			break;
		}
	}
    85fe:	f3 cf       	rjmp	.-26     	; 0x85e6 <Print+0x12>
	
}
    8600:	df 91       	pop	r29
    8602:	cf 91       	pop	r28
    8604:	1f 91       	pop	r17
    8606:	0f 91       	pop	r16
    8608:	08 95       	ret

0000860a <PrintChar>:
}

//Print a single character
void PrintChar(int x,int y,char c){

	SetFont(x,y,(c-32));
    860a:	40 52       	subi	r20, 0x20	; 32
    860c:	0c 94 31 35 	jmp	0x6a62	; 0x6a62 <SetFont>

00008610 <WaitVsync>:
		}
	}
}

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
    8610:	0f 93       	push	r16
    8612:	1f 93       	push	r17
    8614:	cf 93       	push	r28
    8616:	df 93       	push	r29
    8618:	8c 01       	movw	r16, r24
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    861a:	c0 e0       	ldi	r28, 0x00	; 0
    861c:	d0 e0       	ldi	r29, 0x00	; 0
    861e:	c0 17       	cp	r28, r16
    8620:	d1 07       	cpc	r29, r17
    8622:	44 f4       	brge	.+16     	; 0x8634 <WaitVsync+0x24>
		while(!GetVsyncFlag());
    8624:	0e 94 4b 35 	call	0x6a96	; 0x6a96 <GetVsyncFlag>
    8628:	88 23       	and	r24, r24
    862a:	e1 f3       	breq	.-8      	; 0x8624 <WaitVsync+0x14>
		ClearVsyncFlag();		
    862c:	0e 94 4f 35 	call	0x6a9e	; 0x6a9e <ClearVsyncFlag>

//Wait for the beginning of next frame (60hz)
void WaitVsync(int count){
	int i;
	//ClearVsyncFlag();
	for(i=0;i<count;i++){
    8630:	21 96       	adiw	r28, 0x01	; 1
    8632:	f5 cf       	rjmp	.-22     	; 0x861e <WaitVsync+0xe>
		while(!GetVsyncFlag());
		ClearVsyncFlag();		
	}
}
    8634:	df 91       	pop	r29
    8636:	cf 91       	pop	r28
    8638:	1f 91       	pop	r17
    863a:	0f 91       	pop	r16
    863c:	08 95       	ret

0000863e <doFade>:
char fadeDir;
bool volatile fadeActive;


void doFade(unsigned char speed,bool blocking){
	fadeSpeed=speed;
    863e:	80 93 f5 09 	sts	0x09F5, r24
	currFadeFrame=0;
    8642:	10 92 f9 09 	sts	0x09F9, r1
	fadeActive=true;
    8646:	81 e0       	ldi	r24, 0x01	; 1
    8648:	80 93 f8 09 	sts	0x09F8, r24
		
	if(blocking){
    864c:	66 23       	and	r22, r22
    864e:	21 f0       	breq	.+8      	; 0x8658 <doFade+0x1a>
		while(fadeActive==true);
    8650:	80 91 f8 09 	lds	r24, 0x09F8
    8654:	81 11       	cpse	r24, r1
    8656:	fc cf       	rjmp	.-8      	; 0x8650 <doFade+0x12>
    8658:	08 95       	ret

0000865a <FadeIn>:
	
	
}

void FadeIn(unsigned char speed,bool blocking){
	if(speed==0){
    865a:	81 11       	cpse	r24, r1
    865c:	03 c0       	rjmp	.+6      	; 0x8664 <FadeIn+0xa>
		DDRC=0xff;
    865e:	8f ef       	ldi	r24, 0xFF	; 255
    8660:	87 b9       	out	0x07, r24	; 7
		return;
    8662:	08 95       	ret
	}
	fadeStep=1;
    8664:	91 e0       	ldi	r25, 0x01	; 1
    8666:	90 93 fa 09 	sts	0x09FA, r25
	fadeDir=1;
    866a:	90 93 f6 09 	sts	0x09F6, r25
	doFade(speed,blocking);
    866e:	0c 94 1f 43 	jmp	0x863e	; 0x863e <doFade>

00008672 <FadeOut>:
}

void FadeOut(unsigned char speed,bool blocking){
	if(speed==0){
    8672:	81 11       	cpse	r24, r1
    8674:	02 c0       	rjmp	.+4      	; 0x867a <FadeOut+0x8>
		DDRC=0;
    8676:	17 b8       	out	0x07, r1	; 7
		return;
    8678:	08 95       	ret
	}
	
	fadeStep=FADER_STEPS;
    867a:	9c e0       	ldi	r25, 0x0C	; 12
    867c:	90 93 fa 09 	sts	0x09FA, r25
	fadeDir=-1;
    8680:	9f ef       	ldi	r25, 0xFF	; 255
    8682:	90 93 f6 09 	sts	0x09F6, r25
	doFade(speed,blocking);
    8686:	0c 94 1f 43 	jmp	0x863e	; 0x863e <doFade>

0000868a <ProcessFading>:
}


//called by the kernel at each field end
void ProcessFading(){
	if(fadeActive==true){
    868a:	80 91 f8 09 	lds	r24, 0x09F8
    868e:	88 23       	and	r24, r24
    8690:	01 f1       	breq	.+64     	; 0x86d2 <ProcessFading+0x48>
		if(currFadeFrame==0){
    8692:	80 91 f9 09 	lds	r24, 0x09F9
    8696:	81 11       	cpse	r24, r1
    8698:	19 c0       	rjmp	.+50     	; 0x86cc <ProcessFading+0x42>
			currFadeFrame=fadeSpeed;
    869a:	80 91 f5 09 	lds	r24, 0x09F5
    869e:	80 93 f9 09 	sts	0x09F9, r24
			DDRC = pgm_read_byte(&(fader[fadeStep-1]));
    86a2:	e0 91 fa 09 	lds	r30, 0x09FA
    86a6:	f0 e0       	ldi	r31, 0x00	; 0
    86a8:	e7 51       	subi	r30, 0x17	; 23
    86aa:	ff 4f       	sbci	r31, 0xFF	; 255
    86ac:	e4 91       	lpm	r30, Z
    86ae:	e7 b9       	out	0x07, r30	; 7
			fadeStep+=fadeDir;
    86b0:	90 91 f6 09 	lds	r25, 0x09F6
    86b4:	80 91 fa 09 	lds	r24, 0x09FA
    86b8:	89 0f       	add	r24, r25
    86ba:	80 93 fa 09 	sts	0x09FA, r24
			if(fadeStep==0 || fadeStep==(FADER_STEPS+1)){
    86be:	88 23       	and	r24, r24
    86c0:	11 f0       	breq	.+4      	; 0x86c6 <ProcessFading+0x3c>
    86c2:	8d 30       	cpi	r24, 0x0D	; 13
    86c4:	31 f4       	brne	.+12     	; 0x86d2 <ProcessFading+0x48>
				fadeActive=false;
    86c6:	10 92 f8 09 	sts	0x09F8, r1
    86ca:	08 95       	ret
			}
		}else{
			currFadeFrame--;
    86cc:	81 50       	subi	r24, 0x01	; 1
    86ce:	80 93 f9 09 	sts	0x09F9, r24
    86d2:	08 95       	ret

000086d4 <VideoModeVsync>:

	//Callback invoked during hsync
	void VideoModeVsync(){
		
		ProcessFading();
    86d4:	0e 94 45 43 	call	0x868a	; 0x868a <ProcessFading>
		ProcessSprites();
    86d8:	0c 94 14 41 	jmp	0x8228	; 0x8228 <ProcessSprites>

000086dc <LBGetNextFrame>:
	Animation anim;
	int tile_index;
} TileAnimation;

char* LBGetNextFrame(Animation* anim, char* looped)
{
    86dc:	cf 93       	push	r28
    86de:	df 93       	push	r29
    86e0:	fc 01       	movw	r30, r24
    86e2:	eb 01       	movw	r28, r22
	*looped = 0;
    86e4:	18 82       	st	Y, r1
	anim->frame_count += 1;
    86e6:	93 81       	ldd	r25, Z+3	; 0x03
    86e8:	9f 5f       	subi	r25, 0xFF	; 255
    86ea:	93 83       	std	Z+3, r25	; 0x03
	if (anim->frame_count < anim->frames_per_anim)
    86ec:	22 81       	ldd	r18, Z+2	; 0x02
    86ee:	80 81       	ld	r24, Z
    86f0:	92 17       	cp	r25, r18
    86f2:	70 f0       	brcs	.+28     	; 0x8710 <LBGetNextFrame+0x34>
	{
		return anim->anims[anim->current_anim];
	}
	anim->frame_count = 0;
    86f4:	13 82       	std	Z+3, r1	; 0x03
	anim->current_anim = (anim->current_anim + 1) % anim->anim_count;
    86f6:	90 e0       	ldi	r25, 0x00	; 0
    86f8:	01 96       	adiw	r24, 0x01	; 1
    86fa:	21 81       	ldd	r18, Z+1	; 0x01
    86fc:	62 2f       	mov	r22, r18
    86fe:	70 e0       	ldi	r23, 0x00	; 0
    8700:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    8704:	80 83       	st	Z, r24
	if (anim->current_anim == 0) *looped = 1;
    8706:	81 11       	cpse	r24, r1
    8708:	02 c0       	rjmp	.+4      	; 0x870e <LBGetNextFrame+0x32>
    870a:	81 e0       	ldi	r24, 0x01	; 1
    870c:	88 83       	st	Y, r24
	return anim->anims[anim->current_anim];
    870e:	80 81       	ld	r24, Z
    8710:	e8 0f       	add	r30, r24
    8712:	f1 1d       	adc	r31, r1
    8714:	e8 0f       	add	r30, r24
    8716:	f1 1d       	adc	r31, r1
    8718:	84 81       	ldd	r24, Z+4	; 0x04
    871a:	95 81       	ldd	r25, Z+5	; 0x05
}
    871c:	df 91       	pop	r29
    871e:	cf 91       	pop	r28
    8720:	08 95       	ret

00008722 <LBGetJoyPadState>:

void LBGetJoyPadState(JoyPadState* p1, JoyPadState* p2)
/*
 * Get the current joy pad button state for p1 and p2
 */
{
    8722:	0f 93       	push	r16
    8724:	1f 93       	push	r17
    8726:	cf 93       	push	r28
    8728:	df 93       	push	r29
    872a:	8c 01       	movw	r16, r24
    872c:	eb 01       	movw	r28, r22
	static unsigned int p1_prev = 0;
	static unsigned int p2_prev = 0;

	p1->held = ReadJoypad(0);
    872e:	80 e0       	ldi	r24, 0x00	; 0
    8730:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <ReadJoypad>
    8734:	f8 01       	movw	r30, r16
    8736:	95 83       	std	Z+5, r25	; 0x05
    8738:	84 83       	std	Z+4, r24	; 0x04
	p1->pressed = p1->held & (p1->held ^ p1_prev);
    873a:	20 91 74 09 	lds	r18, 0x0974
    873e:	30 91 75 09 	lds	r19, 0x0975
    8742:	a9 01       	movw	r20, r18
    8744:	40 95       	com	r20
    8746:	50 95       	com	r21
    8748:	48 23       	and	r20, r24
    874a:	59 23       	and	r21, r25
    874c:	51 83       	std	Z+1, r21	; 0x01
    874e:	40 83       	st	Z, r20
	p1->released = p1_prev & (p1->held ^ p1_prev);
    8750:	ac 01       	movw	r20, r24
    8752:	40 95       	com	r20
    8754:	50 95       	com	r21
    8756:	24 23       	and	r18, r20
    8758:	35 23       	and	r19, r21
    875a:	33 83       	std	Z+3, r19	; 0x03
    875c:	22 83       	std	Z+2, r18	; 0x02
	p1_prev = p1->held;
    875e:	90 93 75 09 	sts	0x0975, r25
    8762:	80 93 74 09 	sts	0x0974, r24
	p2->held = ReadJoypad(1);
    8766:	81 e0       	ldi	r24, 0x01	; 1
    8768:	0e 94 55 35 	call	0x6aaa	; 0x6aaa <ReadJoypad>
    876c:	9d 83       	std	Y+5, r25	; 0x05
    876e:	8c 83       	std	Y+4, r24	; 0x04
	p2->pressed = p2->held & (p2->held ^ p2_prev);
    8770:	20 91 72 09 	lds	r18, 0x0972
    8774:	30 91 73 09 	lds	r19, 0x0973
    8778:	a9 01       	movw	r20, r18
    877a:	40 95       	com	r20
    877c:	50 95       	com	r21
    877e:	48 23       	and	r20, r24
    8780:	59 23       	and	r21, r25
    8782:	59 83       	std	Y+1, r21	; 0x01
    8784:	48 83       	st	Y, r20
	p2->released = p2_prev & (p2->held ^ p2_prev);
    8786:	ac 01       	movw	r20, r24
    8788:	40 95       	com	r20
    878a:	50 95       	com	r21
    878c:	24 23       	and	r18, r20
    878e:	35 23       	and	r19, r21
    8790:	3b 83       	std	Y+3, r19	; 0x03
    8792:	2a 83       	std	Y+2, r18	; 0x02
	p2_prev = p2->held;
    8794:	90 93 73 09 	sts	0x0973, r25
    8798:	80 93 72 09 	sts	0x0972, r24
}
    879c:	df 91       	pop	r29
    879e:	cf 91       	pop	r28
    87a0:	1f 91       	pop	r17
    87a2:	0f 91       	pop	r16
    87a4:	08 95       	ret

000087a6 <LBCopyChars>:

void LBCopyChars(u8* dst, u8 *src, u8 count)
/*
 * Custom string copy
 */
{
    87a6:	36 2f       	mov	r19, r22
	for (u8 i = 0; i < count; i++)
    87a8:	fb 01       	movw	r30, r22
    87aa:	2e 2f       	mov	r18, r30
    87ac:	23 1b       	sub	r18, r19
    87ae:	24 17       	cp	r18, r20
    87b0:	28 f4       	brcc	.+10     	; 0x87bc <LBCopyChars+0x16>
	{
		dst[i] = src[i];
    87b2:	21 91       	ld	r18, Z+
    87b4:	dc 01       	movw	r26, r24
    87b6:	2d 93       	st	X+, r18
    87b8:	cd 01       	movw	r24, r26
    87ba:	f7 cf       	rjmp	.-18     	; 0x87aa <LBCopyChars+0x4>
	}
}
    87bc:	08 95       	ret

000087be <LBPrintStr>:

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
    87be:	af 92       	push	r10
    87c0:	bf 92       	push	r11
    87c2:	cf 92       	push	r12
    87c4:	df 92       	push	r13
    87c6:	ef 92       	push	r14
    87c8:	ff 92       	push	r15
    87ca:	0f 93       	push	r16
    87cc:	1f 93       	push	r17
    87ce:	cf 93       	push	r28
    87d0:	df 93       	push	r29
    87d2:	1f 92       	push	r1
    87d4:	cd b7       	in	r28, 0x3d	; 61
    87d6:	de b7       	in	r29, 0x3e	; 62
    87d8:	7a 01       	movw	r14, r20
	for (u8 i = 0; i < count; i++)
    87da:	8a 01       	movw	r16, r20
	{
		PrintChar(x+i, y, txt[i]);
    87dc:	c6 2e       	mov	r12, r22
    87de:	d1 2c       	mov	r13, r1
    87e0:	90 e0       	ldi	r25, 0x00	; 0
    87e2:	5c 01       	movw	r10, r24
    87e4:	a4 1a       	sub	r10, r20
    87e6:	b5 0a       	sbc	r11, r21
    87e8:	80 2f       	mov	r24, r16
    87ea:	8e 19       	sub	r24, r14
	}
}

void LBPrintStr(u8 x, u8 y, u8* txt, u8 count)
{
	for (u8 i = 0; i < count; i++)
    87ec:	82 17       	cp	r24, r18
    87ee:	60 f4       	brcc	.+24     	; 0x8808 <LBPrintStr+0x4a>
    87f0:	c5 01       	movw	r24, r10
    87f2:	80 0f       	add	r24, r16
    87f4:	91 1f       	adc	r25, r17
	{
		PrintChar(x+i, y, txt[i]);
    87f6:	f8 01       	movw	r30, r16
    87f8:	41 91       	ld	r20, Z+
    87fa:	8f 01       	movw	r16, r30
    87fc:	b6 01       	movw	r22, r12
    87fe:	29 83       	std	Y+1, r18	; 0x01
    8800:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
    8804:	29 81       	ldd	r18, Y+1	; 0x01
    8806:	f0 cf       	rjmp	.-32     	; 0x87e8 <LBPrintStr+0x2a>
	}
}
    8808:	0f 90       	pop	r0
    880a:	df 91       	pop	r29
    880c:	cf 91       	pop	r28
    880e:	1f 91       	pop	r17
    8810:	0f 91       	pop	r16
    8812:	ff 90       	pop	r15
    8814:	ef 90       	pop	r14
    8816:	df 90       	pop	r13
    8818:	cf 90       	pop	r12
    881a:	bf 90       	pop	r11
    881c:	af 90       	pop	r10
    881e:	08 95       	ret

00008820 <LBCollides>:

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
    8820:	af 92       	push	r10
    8822:	cf 92       	push	r12
    8824:	ef 92       	push	r14
    8826:	ff 92       	push	r15
    8828:	0f 93       	push	r16
    882a:	1f 93       	push	r17
	if (y1 + height1 < y2) return 0;
    882c:	70 e0       	ldi	r23, 0x00	; 0
    882e:	f1 2c       	mov	r15, r1
    8830:	fb 01       	movw	r30, r22
    8832:	e2 0f       	add	r30, r18
    8834:	f1 1d       	adc	r31, r1
    8836:	ee 15       	cp	r30, r14
    8838:	ff 05       	cpc	r31, r15
    883a:	a4 f0       	brlt	.+40     	; 0x8864 <LBCollides+0x44>
	if (y1 > y2 + height2) return 0;
    883c:	ea 0c       	add	r14, r10
    883e:	f1 1c       	adc	r15, r1
    8840:	e6 16       	cp	r14, r22
    8842:	f7 06       	cpc	r15, r23
    8844:	7c f0       	brlt	.+30     	; 0x8864 <LBCollides+0x44>
	if (x1 + width1 < x2) return 0;
    8846:	28 2f       	mov	r18, r24
    8848:	30 e0       	ldi	r19, 0x00	; 0
    884a:	10 e0       	ldi	r17, 0x00	; 0
    884c:	c9 01       	movw	r24, r18
    884e:	84 0f       	add	r24, r20
    8850:	91 1d       	adc	r25, r1
    8852:	80 17       	cp	r24, r16
    8854:	91 07       	cpc	r25, r17
    8856:	34 f0       	brlt	.+12     	; 0x8864 <LBCollides+0x44>
	if (x1 > x2 + width2) return 0;
    8858:	0c 0d       	add	r16, r12
    885a:	11 1d       	adc	r17, r1
    885c:	81 e0       	ldi	r24, 0x01	; 1
    885e:	02 17       	cp	r16, r18
    8860:	13 07       	cpc	r17, r19
    8862:	0c f4       	brge	.+2      	; 0x8866 <LBCollides+0x46>
}

u8 LBCollides(u8 x1, u8 y1, u8 width1, u8 height1,
						 u8 x2, u8 y2, u8 width2, u8 height2)
{
	if (y1 + height1 < y2) return 0;
    8864:	80 e0       	ldi	r24, 0x00	; 0
	if (y1 > y2 + height2) return 0;
	if (x1 + width1 < x2) return 0;
	if (x1 > x2 + width2) return 0;
	return 1;
}
    8866:	1f 91       	pop	r17
    8868:	0f 91       	pop	r16
    886a:	ff 90       	pop	r15
    886c:	ef 90       	pop	r14
    886e:	cf 90       	pop	r12
    8870:	af 90       	pop	r10
    8872:	08 95       	ret

00008874 <LBLineIntersect>:

u8 LBLineIntersect(u8 line1x1, u8 line1y1, u8 line1x2, u8 line1y2,
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
    8874:	2f 92       	push	r2
    8876:	3f 92       	push	r3
    8878:	4f 92       	push	r4
    887a:	5f 92       	push	r5
    887c:	6f 92       	push	r6
    887e:	7f 92       	push	r7
    8880:	8f 92       	push	r8
    8882:	9f 92       	push	r9
    8884:	af 92       	push	r10
    8886:	bf 92       	push	r11
    8888:	cf 92       	push	r12
    888a:	df 92       	push	r13
    888c:	ef 92       	push	r14
    888e:	ff 92       	push	r15
    8890:	0f 93       	push	r16
    8892:	1f 93       	push	r17
    8894:	cf 93       	push	r28
    8896:	df 93       	push	r29
    8898:	00 d0       	rcall	.+0      	; 0x889a <LBLineIntersect+0x26>
    889a:	00 d0       	rcall	.+0      	; 0x889c <LBLineIntersect+0x28>
    889c:	cd b7       	in	r28, 0x3d	; 61
    889e:	de b7       	in	r29, 0x3e	; 62
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    88a0:	f1 2c       	mov	r15, r1
    88a2:	8a 2c       	mov	r8, r10
    88a4:	91 2c       	mov	r9, r1
    88a6:	8e 18       	sub	r8, r14
    88a8:	9f 08       	sbc	r9, r15
    88aa:	a8 2e       	mov	r10, r24
    88ac:	b1 2c       	mov	r11, r1
    88ae:	24 2e       	mov	r2, r20
    88b0:	31 2c       	mov	r3, r1
    88b2:	2a 18       	sub	r2, r10
    88b4:	3b 08       	sbc	r3, r11
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    88b6:	10 e0       	ldi	r17, 0x00	; 0
    88b8:	d1 2c       	mov	r13, r1
    88ba:	c0 1a       	sub	r12, r16
    88bc:	d1 0a       	sbc	r13, r17
    88be:	46 2f       	mov	r20, r22
    88c0:	50 e0       	ldi	r21, 0x00	; 0
    88c2:	5c 83       	std	Y+4, r21	; 0x04
    88c4:	4b 83       	std	Y+3, r20	; 0x03
    88c6:	82 2f       	mov	r24, r18
    88c8:	90 e0       	ldi	r25, 0x00	; 0
    88ca:	9a 83       	std	Y+2, r25	; 0x02
    88cc:	89 83       	std	Y+1, r24	; 0x01
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    88ce:	82 9c       	mul	r8, r2
    88d0:	90 01       	movw	r18, r0
    88d2:	83 9c       	mul	r8, r3
    88d4:	30 0d       	add	r19, r0
    88d6:	92 9c       	mul	r9, r2
    88d8:	30 0d       	add	r19, r0
    88da:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
    88dc:	ca 01       	movw	r24, r20
    88de:	e9 81       	ldd	r30, Y+1	; 0x01
    88e0:	fa 81       	ldd	r31, Y+2	; 0x02
    88e2:	8e 1b       	sub	r24, r30
    88e4:	9f 0b       	sbc	r25, r31
    88e6:	c8 9e       	mul	r12, r24
    88e8:	b0 01       	movw	r22, r0
    88ea:	c9 9e       	mul	r12, r25
    88ec:	70 0d       	add	r23, r0
    88ee:	d8 9e       	mul	r13, r24
    88f0:	70 0d       	add	r23, r0
    88f2:	11 24       	eor	r1, r1
							  u8 line2x1, u8 line2y1, u8 line2x2, u8 line2y2)
{
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
    88f4:	62 0f       	add	r22, r18
    88f6:	73 1f       	adc	r23, r19
    88f8:	88 27       	eor	r24, r24
    88fa:	77 fd       	sbrc	r23, 7
    88fc:	80 95       	com	r24
    88fe:	98 2f       	mov	r25, r24
    8900:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    8904:	2b 01       	movw	r4, r22
    8906:	3c 01       	movw	r6, r24
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    8908:	20 e0       	ldi	r18, 0x00	; 0
    890a:	30 e0       	ldi	r19, 0x00	; 0
    890c:	a9 01       	movw	r20, r18
    890e:	0e 94 3c 56 	call	0xac78	; 0xac78 <__cmpsf2>
    8912:	88 23       	and	r24, r24
    8914:	09 f4       	brne	.+2      	; 0x8918 <LBLineIntersect+0xa4>
    8916:	6c c0       	rjmp	.+216    	; 0x89f0 <LBLineIntersect+0x17c>

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8918:	4b 81       	ldd	r20, Y+3	; 0x03
    891a:	5c 81       	ldd	r21, Y+4	; 0x04
    891c:	4e 19       	sub	r20, r14
    891e:	5f 09       	sbc	r21, r15
    8920:	7a 01       	movw	r14, r20
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8922:	0a 19       	sub	r16, r10
    8924:	1b 09       	sbc	r17, r11

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8926:	c4 9e       	mul	r12, r20
    8928:	c0 01       	movw	r24, r0
    892a:	c5 9e       	mul	r12, r21
    892c:	90 0d       	add	r25, r0
    892e:	d4 9e       	mul	r13, r20
    8930:	90 0d       	add	r25, r0
    8932:	11 24       	eor	r1, r1
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8934:	80 9e       	mul	r8, r16
    8936:	b0 01       	movw	r22, r0
    8938:	81 9e       	mul	r8, r17
    893a:	70 0d       	add	r23, r0
    893c:	90 9e       	mul	r9, r16
    893e:	70 0d       	add	r23, r0
    8940:	11 24       	eor	r1, r1

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8942:	68 0f       	add	r22, r24
    8944:	79 1f       	adc	r23, r25
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
    8946:	88 27       	eor	r24, r24
    8948:	77 fd       	sbrc	r23, 7
    894a:	80 95       	com	r24
    894c:	98 2f       	mov	r25, r24
    894e:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
    8952:	a3 01       	movw	r20, r6
    8954:	92 01       	movw	r18, r4
    8956:	0e 94 40 56 	call	0xac80	; 0xac80 <__divsf3>
    895a:	4b 01       	movw	r8, r22
    895c:	5c 01       	movw	r10, r24
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    895e:	20 e0       	ldi	r18, 0x00	; 0
    8960:	30 e0       	ldi	r19, 0x00	; 0
    8962:	a9 01       	movw	r20, r18
    8964:	0e 94 3c 56 	call	0xac78	; 0xac78 <__cmpsf2>
    8968:	87 fd       	sbrc	r24, 7
    896a:	42 c0       	rjmp	.+132    	; 0x89f0 <LBLineIntersect+0x17c>
    896c:	20 e0       	ldi	r18, 0x00	; 0
    896e:	30 e0       	ldi	r19, 0x00	; 0
    8970:	40 e8       	ldi	r20, 0x80	; 128
    8972:	5f e3       	ldi	r21, 0x3F	; 63
    8974:	c5 01       	movw	r24, r10
    8976:	b4 01       	movw	r22, r8
    8978:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <__gesf2>
    897c:	18 16       	cp	r1, r24
    897e:	c4 f1       	brlt	.+112    	; 0x89f0 <LBLineIntersect+0x17c>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    8980:	2e 9c       	mul	r2, r14
    8982:	b0 01       	movw	r22, r0
    8984:	2f 9c       	mul	r2, r15
    8986:	70 0d       	add	r23, r0
    8988:	3e 9c       	mul	r3, r14
    898a:	70 0d       	add	r23, r0
    898c:	11 24       	eor	r1, r1
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    898e:	29 81       	ldd	r18, Y+1	; 0x01
    8990:	3a 81       	ldd	r19, Y+2	; 0x02
    8992:	8b 81       	ldd	r24, Y+3	; 0x03
    8994:	9c 81       	ldd	r25, Y+4	; 0x04
    8996:	28 1b       	sub	r18, r24
    8998:	39 0b       	sbc	r19, r25
    899a:	20 9f       	mul	r18, r16
    899c:	c0 01       	movw	r24, r0
    899e:	21 9f       	mul	r18, r17
    89a0:	90 0d       	add	r25, r0
    89a2:	30 9f       	mul	r19, r16
    89a4:	90 0d       	add	r25, r0
    89a6:	11 24       	eor	r1, r1
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    89a8:	68 0f       	add	r22, r24
    89aa:	79 1f       	adc	r23, r25
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
    89ac:	88 27       	eor	r24, r24
    89ae:	77 fd       	sbrc	r23, 7
    89b0:	80 95       	com	r24
    89b2:	98 2f       	mov	r25, r24
    89b4:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;

	ua = (((line2x2 - line2x1) * (line1y1 - line2y1)) -
		 ((line2y2 - line2y1) * (line1x1 - line2x1))) / denom;
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
    89b8:	a3 01       	movw	r20, r6
    89ba:	92 01       	movw	r18, r4
    89bc:	0e 94 40 56 	call	0xac80	; 0xac80 <__divsf3>
    89c0:	6b 01       	movw	r12, r22
    89c2:	7c 01       	movw	r14, r24
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	30 e0       	ldi	r19, 0x00	; 0
    89c8:	a9 01       	movw	r20, r18
    89ca:	0e 94 3c 56 	call	0xac78	; 0xac78 <__cmpsf2>
    89ce:	87 fd       	sbrc	r24, 7
    89d0:	0f c0       	rjmp	.+30     	; 0x89f0 <LBLineIntersect+0x17c>
    89d2:	11 e0       	ldi	r17, 0x01	; 1
    89d4:	20 e0       	ldi	r18, 0x00	; 0
    89d6:	30 e0       	ldi	r19, 0x00	; 0
    89d8:	40 e8       	ldi	r20, 0x80	; 128
    89da:	5f e3       	ldi	r21, 0x3F	; 63
    89dc:	c7 01       	movw	r24, r14
    89de:	b6 01       	movw	r22, r12
    89e0:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <__gesf2>
    89e4:	18 16       	cp	r1, r24
    89e6:	0c f0       	brlt	.+2      	; 0x89ea <LBLineIntersect+0x176>
    89e8:	10 e0       	ldi	r17, 0x00	; 0
    89ea:	81 e0       	ldi	r24, 0x01	; 1
    89ec:	81 27       	eor	r24, r17
    89ee:	01 c0       	rjmp	.+2      	; 0x89f2 <LBLineIntersect+0x17e>
	float ua, ub;
	float denom;

	denom = ((line2y2 - line2y1) * (line1x2 - line1x1)) -
			 ((line2x2 - line2x1) * (line1y2 - line1y1));
	if (denom == 0) return 0;
    89f0:	80 e0       	ldi	r24, 0x00	; 0
	ub = (((line1x2 - line1x1) * (line1y1 - line2y1)) -
		 ((line1y2 - line1y1) * (line1x1 - line2x1))) / denom;
	if ((ua < 0) || (ua > 1) || (ub < 0) || (ub > 1)) return 0;

	return 1;
}
    89f2:	0f 90       	pop	r0
    89f4:	0f 90       	pop	r0
    89f6:	0f 90       	pop	r0
    89f8:	0f 90       	pop	r0
    89fa:	df 91       	pop	r29
    89fc:	cf 91       	pop	r28
    89fe:	1f 91       	pop	r17
    8a00:	0f 91       	pop	r16
    8a02:	ff 90       	pop	r15
    8a04:	ef 90       	pop	r14
    8a06:	df 90       	pop	r13
    8a08:	cf 90       	pop	r12
    8a0a:	bf 90       	pop	r11
    8a0c:	af 90       	pop	r10
    8a0e:	9f 90       	pop	r9
    8a10:	8f 90       	pop	r8
    8a12:	7f 90       	pop	r7
    8a14:	6f 90       	pop	r6
    8a16:	5f 90       	pop	r5
    8a18:	4f 90       	pop	r4
    8a1a:	3f 90       	pop	r3
    8a1c:	2f 90       	pop	r2
    8a1e:	08 95       	ret

00008a20 <LBRandom>:

int LBRandom(int from, int to)
/*
 * Return a random number between 'from' and 'to'.
 */
{
    8a20:	fc 01       	movw	r30, r24
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
    8a22:	90 91 71 09 	lds	r25, 0x0971
    8a26:	2f ef       	ldi	r18, 0xFF	; 255
    8a28:	3f e7       	ldi	r19, 0x7F	; 127
    8a2a:	09 2e       	mov	r0, r25
    8a2c:	02 c0       	rjmp	.+4      	; 0x8a32 <LBRandom+0x12>
    8a2e:	35 95       	asr	r19
    8a30:	27 95       	ror	r18
    8a32:	0a 94       	dec	r0
    8a34:	e2 f7       	brpl	.-8      	; 0x8a2e <LBRandom+0xe>
	int delta = to - from;
    8a36:	6e 1b       	sub	r22, r30
    8a38:	7f 0b       	sbc	r23, r31

	shift_count++;
    8a3a:	9f 5f       	subi	r25, 0xFF	; 255
	if (shift_count >= 16) shift_count = 0;
    8a3c:	90 31       	cpi	r25, 0x10	; 16
    8a3e:	18 f4       	brcc	.+6      	; 0x8a46 <LBRandom+0x26>
	static int random_seed = 32767; // A very deterministic random seed...
	static u8 shift_count = 0;
	int shifted = random_seed >> shift_count;
	int delta = to - from;

	shift_count++;
    8a40:	90 93 71 09 	sts	0x0971, r25
    8a44:	02 c0       	rjmp	.+4      	; 0x8a4a <LBRandom+0x2a>
	if (shift_count >= 16) shift_count = 0;
    8a46:	10 92 71 09 	sts	0x0971, r1

	return from + ((delta + shifted) % delta);
    8a4a:	cb 01       	movw	r24, r22
    8a4c:	82 0f       	add	r24, r18
    8a4e:	93 1f       	adc	r25, r19
    8a50:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
}
    8a54:	8e 0f       	add	r24, r30
    8a56:	9f 1f       	adc	r25, r31
    8a58:	08 95       	ret

00008a5a <LBWaitSeconds>:

void LBWaitSeconds(u8 seconds)
{
    8a5a:	cf 93       	push	r28
    8a5c:	df 93       	push	r29
    8a5e:	d8 2f       	mov	r29, r24
	for(u8 i = 0; i < seconds; i++)
    8a60:	c0 e0       	ldi	r28, 0x00	; 0
    8a62:	cd 17       	cp	r28, r29
    8a64:	31 f0       	breq	.+12     	; 0x8a72 <LBWaitSeconds+0x18>
	{
		WaitUs(65535);
    8a66:	8f ef       	ldi	r24, 0xFF	; 255
    8a68:	9f ef       	ldi	r25, 0xFF	; 255
    8a6a:	0e 94 61 35 	call	0x6ac2	; 0x6ac2 <WaitUs>
	return from + ((delta + shifted) % delta);
}

void LBWaitSeconds(u8 seconds)
{
	for(u8 i = 0; i < seconds; i++)
    8a6e:	cf 5f       	subi	r28, 0xFF	; 255
    8a70:	f8 cf       	rjmp	.-16     	; 0x8a62 <LBWaitSeconds+0x8>
	{
		WaitUs(65535);
	}
}
    8a72:	df 91       	pop	r29
    8a74:	cf 91       	pop	r28
    8a76:	08 95       	ret

00008a78 <init_tile_animations>:
	.select_state = SELECTING,
};

/* Initializers */
void init_tile_animations(TileAnimations* ta)
{
    8a78:	fc 01       	movw	r30, r24
	ta->next_available = 0;
    8a7a:	10 82       	st	Z, r1
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8a7c:	14 86       	std	Z+12, r1	; 0x0c
    8a7e:	13 86       	std	Z+11, r1	; 0x0b
		ta->anims[i].anim.current_anim = 0;
    8a80:	11 82       	std	Z+1, r1	; 0x01
		ta->anims[i].anim.anim_count = 3;
    8a82:	73 e0       	ldi	r23, 0x03	; 3
    8a84:	72 83       	std	Z+2, r23	; 0x02
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8a86:	65 e0       	ldi	r22, 0x05	; 5
    8a88:	63 83       	std	Z+3, r22	; 0x03
		ta->anims[i].anim.frame_count = 0;
    8a8a:	14 82       	std	Z+4, r1	; 0x04
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8a8c:	46 ef       	ldi	r20, 0xF6	; 246
    8a8e:	51 e3       	ldi	r21, 0x31	; 49
    8a90:	56 83       	std	Z+6, r21	; 0x06
    8a92:	45 83       	std	Z+5, r20	; 0x05
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8a94:	23 ef       	ldi	r18, 0xF3	; 243
    8a96:	31 e3       	ldi	r19, 0x31	; 49
    8a98:	30 87       	std	Z+8, r19	; 0x08
    8a9a:	27 83       	std	Z+7, r18	; 0x07
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8a9c:	80 ef       	ldi	r24, 0xF0	; 240
    8a9e:	91 e3       	ldi	r25, 0x31	; 49
    8aa0:	92 87       	std	Z+10, r25	; 0x0a
    8aa2:	81 87       	std	Z+9, r24	; 0x09
void init_tile_animations(TileAnimations* ta)
{
	ta->next_available = 0;
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		ta->anims[i].tile_index = 0;
    8aa4:	10 8e       	std	Z+24, r1	; 0x18
    8aa6:	17 8a       	std	Z+23, r1	; 0x17
		ta->anims[i].anim.current_anim = 0;
    8aa8:	15 86       	std	Z+13, r1	; 0x0d
		ta->anims[i].anim.anim_count = 3;
    8aaa:	76 87       	std	Z+14, r23	; 0x0e
		ta->anims[i].anim.frames_per_anim = FRAMES_PER_ANIM;
    8aac:	67 87       	std	Z+15, r22	; 0x0f
		ta->anims[i].anim.frame_count = 0;
    8aae:	10 8a       	std	Z+16, r1	; 0x10
		ta->anims[i].anim.anims[0] = (char*)map_tile_exp_0;
    8ab0:	52 8b       	std	Z+18, r21	; 0x12
    8ab2:	41 8b       	std	Z+17, r20	; 0x11
		ta->anims[i].anim.anims[1] = (char*)map_tile_exp_1;
    8ab4:	34 8b       	std	Z+20, r19	; 0x14
    8ab6:	23 8b       	std	Z+19, r18	; 0x13
		ta->anims[i].anim.anims[2] = (char*)map_tile_exp_2;
    8ab8:	96 8b       	std	Z+22, r25	; 0x16
    8aba:	85 8b       	std	Z+21, r24	; 0x15
    8abc:	08 95       	ret

00008abe <init_shot_state>:
	}
}

void init_shot_state(Shot* s, u8 shot_type)
{
    8abe:	fc 01       	movw	r30, r24
	s->shared.speed = SHOT_SPEED;
    8ac0:	84 e6       	ldi	r24, 0x64	; 100
    8ac2:	81 83       	std	Z+1, r24	; 0x01
	s->shared.direction = D_UP;
    8ac4:	10 82       	st	Z, r1
	s->active = 0;
    8ac6:	15 86       	std	Z+13, r1	; 0x0d
	s->shot_type = shot_type;
    8ac8:	62 87       	std	Z+10, r22	; 0x0a
	s->rebounds = SHOT_REBOUNDS;
    8aca:	84 e0       	ldi	r24, 0x04	; 4
    8acc:	84 87       	std	Z+12, r24	; 0x0c
	s->hit_count = (shot_type == BASIC_SHOT) ? BASIC_SHOT_HIT_COUNT : ROCKET_SHOT_HIT_COUNT;
    8ace:	66 23       	and	r22, r22
    8ad0:	11 f0       	breq	.+4      	; 0x8ad6 <init_shot_state+0x18>
    8ad2:	85 e0       	ldi	r24, 0x05	; 5
    8ad4:	01 c0       	rjmp	.+2      	; 0x8ad8 <init_shot_state+0x1a>
    8ad6:	81 e0       	ldi	r24, 0x01	; 1
    8ad8:	83 87       	std	Z+11, r24	; 0x0b
	s->shared.x = OFF_SCREEN;
    8ada:	80 e0       	ldi	r24, 0x00	; 0
    8adc:	90 e0       	ldi	r25, 0x00	; 0
    8ade:	a0 e7       	ldi	r26, 0x70	; 112
    8ae0:	b3 e4       	ldi	r27, 0x43	; 67
    8ae2:	82 83       	std	Z+2, r24	; 0x02
    8ae4:	93 83       	std	Z+3, r25	; 0x03
    8ae6:	a4 83       	std	Z+4, r26	; 0x04
    8ae8:	b5 83       	std	Z+5, r27	; 0x05
	s->shared.y = 0;
    8aea:	16 82       	std	Z+6, r1	; 0x06
    8aec:	17 82       	std	Z+7, r1	; 0x07
    8aee:	10 86       	std	Z+8, r1	; 0x08
    8af0:	11 86       	std	Z+9, r1	; 0x09
    8af2:	08 95       	ret

00008af4 <set_shot_animations>:
}

void set_shot_animations(Shot* s, u8 shot_type)
{
    8af4:	fc 01       	movw	r30, r24
	s->up_anim.current_anim = 0;
    8af6:	16 86       	std	Z+14, r1	; 0x0e
	s->up_anim.anim_count = 2;
    8af8:	82 e0       	ldi	r24, 0x02	; 2
    8afa:	87 87       	std	Z+15, r24	; 0x0f
	s->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    8afc:	85 e0       	ldi	r24, 0x05	; 5
    8afe:	80 8b       	std	Z+16, r24	; 0x10
	s->up_anim.frame_count = 0;
    8b00:	11 8a       	std	Z+17, r1	; 0x11
	s->up_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_0;
    8b02:	66 23       	and	r22, r22
    8b04:	19 f0       	breq	.+6      	; 0x8b0c <set_shot_animations+0x18>
    8b06:	83 e9       	ldi	r24, 0x93	; 147
    8b08:	91 e3       	ldi	r25, 0x31	; 49
    8b0a:	02 c0       	rjmp	.+4      	; 0x8b10 <set_shot_animations+0x1c>
    8b0c:	86 e9       	ldi	r24, 0x96	; 150
    8b0e:	91 e3       	ldi	r25, 0x31	; 49
    8b10:	93 8b       	std	Z+19, r25	; 0x13
    8b12:	82 8b       	std	Z+18, r24	; 0x12
	s->up_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_up_1;
    8b14:	66 23       	and	r22, r22
    8b16:	19 f0       	breq	.+6      	; 0x8b1e <set_shot_animations+0x2a>
    8b18:	80 e9       	ldi	r24, 0x90	; 144
    8b1a:	91 e3       	ldi	r25, 0x31	; 49
    8b1c:	02 c0       	rjmp	.+4      	; 0x8b22 <set_shot_animations+0x2e>
    8b1e:	86 e9       	ldi	r24, 0x96	; 150
    8b20:	91 e3       	ldi	r25, 0x31	; 49
    8b22:	95 8b       	std	Z+21, r25	; 0x15
    8b24:	84 8b       	std	Z+20, r24	; 0x14
	s->up_anim.current_anim = 0;
	s->right_anim.anim_count = 2;
    8b26:	82 e0       	ldi	r24, 0x02	; 2
    8b28:	81 8f       	std	Z+25, r24	; 0x19
	s->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    8b2a:	85 e0       	ldi	r24, 0x05	; 5
    8b2c:	82 8f       	std	Z+26, r24	; 0x1a
	s->right_anim.frame_count = 0;
    8b2e:	13 8e       	std	Z+27, r1	; 0x1b
	s->right_anim.anims[0] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_0;
    8b30:	66 23       	and	r22, r22
    8b32:	19 f0       	breq	.+6      	; 0x8b3a <set_shot_animations+0x46>
    8b34:	8d e8       	ldi	r24, 0x8D	; 141
    8b36:	91 e3       	ldi	r25, 0x31	; 49
    8b38:	02 c0       	rjmp	.+4      	; 0x8b3e <set_shot_animations+0x4a>
    8b3a:	86 e9       	ldi	r24, 0x96	; 150
    8b3c:	91 e3       	ldi	r25, 0x31	; 49
    8b3e:	95 8f       	std	Z+29, r25	; 0x1d
    8b40:	84 8f       	std	Z+28, r24	; 0x1c
	s->right_anim.anims[1] = (shot_type == BASIC_SHOT) ? (char*) map_ball : (char*) map_rocket_right_1;
    8b42:	66 23       	and	r22, r22
    8b44:	19 f0       	breq	.+6      	; 0x8b4c <set_shot_animations+0x58>
    8b46:	8a e8       	ldi	r24, 0x8A	; 138
    8b48:	91 e3       	ldi	r25, 0x31	; 49
    8b4a:	02 c0       	rjmp	.+4      	; 0x8b50 <set_shot_animations+0x5c>
    8b4c:	86 e9       	ldi	r24, 0x96	; 150
    8b4e:	91 e3       	ldi	r25, 0x31	; 49
    8b50:	97 8f       	std	Z+31, r25	; 0x1f
    8b52:	86 8f       	std	Z+30, r24	; 0x1e
    8b54:	08 95       	ret

00008b56 <init_player>:
}

void init_player(Player* p, const char* map_tank_up_0, const char* map_tank_right_0)
{
    8b56:	0f 93       	push	r16
    8b58:	1f 93       	push	r17
    8b5a:	cf 93       	push	r28
    8b5c:	df 93       	push	r29
    8b5e:	ec 01       	movw	r28, r24
	p->banter_frame = FRAMES_PER_BANTER;
    8b60:	8a e5       	ldi	r24, 0x5A	; 90
    8b62:	8c 8b       	std	Y+20, r24	; 0x14
	p->grace_frame = FRAMES_PER_GRACE;
    8b64:	88 e7       	ldi	r24, 0x78	; 120
    8b66:	8e 8b       	std	Y+22, r24	; 0x16
	p->banter_index = 0;
    8b68:	1d 8a       	std	Y+21, r1	; 0x15
	p->score = 0;
    8b6a:	1e 86       	std	Y+14, r1	; 0x0e
	p->level_score = 0;
    8b6c:	1f 86       	std	Y+15, r1	; 0x0f
	p->shared.direction = D_UP;
    8b6e:	18 82       	st	Y, r1
	p->shared.speed = 0;
    8b70:	19 82       	std	Y+1, r1	; 0x01
	p->max_speed = MAX_SPEED;
    8b72:	82 e3       	ldi	r24, 0x32	; 50
    8b74:	8f 8b       	std	Y+23, r24	; 0x17
	p->has_over_speed = false;
    8b76:	19 8e       	std	Y+25, r1	; 0x19
	p->has_rocket = false;
    8b78:	18 8e       	std	Y+24, r1	; 0x18
	p->flags = 0;
    8b7a:	1b 8a       	std	Y+19, r1	; 0x13

	/* Tracks animation (Up) */
	p->up_anim.current_anim = 0;
    8b7c:	fe 01       	movw	r30, r28
    8b7e:	e2 5a       	subi	r30, 0xA2	; 162
    8b80:	ff 4f       	sbci	r31, 0xFF	; 255
    8b82:	10 82       	st	Z, r1
	p->up_anim.anim_count = 1;
    8b84:	31 96       	adiw	r30, 0x01	; 1
    8b86:	91 e0       	ldi	r25, 0x01	; 1
    8b88:	90 83       	st	Z, r25
	p->up_anim.frames_per_anim = FRAMES_PER_ANIM;
    8b8a:	31 96       	adiw	r30, 0x01	; 1
    8b8c:	85 e0       	ldi	r24, 0x05	; 5
    8b8e:	80 83       	st	Z, r24
	p->up_anim.frame_count = 0;
    8b90:	31 96       	adiw	r30, 0x01	; 1
    8b92:	10 82       	st	Z, r1
	p->up_anim.anims[0] = (char*)map_tank_up_0;
    8b94:	31 96       	adiw	r30, 0x01	; 1
    8b96:	71 83       	std	Z+1, r23	; 0x01
    8b98:	60 83       	st	Z, r22

	/* Tracks animation (Down) */
	p->right_anim.current_anim = 0;
    8b9a:	36 96       	adiw	r30, 0x06	; 6
    8b9c:	10 82       	st	Z, r1
	p->right_anim.anim_count = 1;
    8b9e:	31 96       	adiw	r30, 0x01	; 1
    8ba0:	90 83       	st	Z, r25
	p->right_anim.frames_per_anim = FRAMES_PER_ANIM;
    8ba2:	31 96       	adiw	r30, 0x01	; 1
    8ba4:	80 83       	st	Z, r24
	p->right_anim.frame_count = 0;
    8ba6:	31 96       	adiw	r30, 0x01	; 1
    8ba8:	10 82       	st	Z, r1
	p->right_anim.anims[0] = (char*)map_tank_right_0;
    8baa:	31 96       	adiw	r30, 0x01	; 1
    8bac:	51 83       	std	Z+1, r21	; 0x01
    8bae:	40 83       	st	Z, r20

	/* Explosion Animation */
	p->exp_anim.current_anim = 0;
    8bb0:	36 96       	adiw	r30, 0x06	; 6
    8bb2:	10 82       	st	Z, r1
	p->exp_anim.anim_count = 3;
    8bb4:	31 96       	adiw	r30, 0x01	; 1
    8bb6:	93 e0       	ldi	r25, 0x03	; 3
    8bb8:	90 83       	st	Z, r25
	p->exp_anim.frames_per_anim = FRAMES_PER_ANIM;
    8bba:	31 96       	adiw	r30, 0x01	; 1
    8bbc:	80 83       	st	Z, r24
	p->exp_anim.frame_count = 0;
    8bbe:	31 96       	adiw	r30, 0x01	; 1
    8bc0:	10 82       	st	Z, r1
	p->exp_anim.anims[0] = (char*)map_explosion_0;
    8bc2:	31 96       	adiw	r30, 0x01	; 1
    8bc4:	85 ea       	ldi	r24, 0xA5	; 165
    8bc6:	91 e3       	ldi	r25, 0x31	; 49
    8bc8:	91 83       	std	Z+1, r25	; 0x01
    8bca:	80 83       	st	Z, r24
	p->exp_anim.anims[1] = (char*)map_explosion_1;
    8bcc:	32 96       	adiw	r30, 0x02	; 2
    8bce:	8f e9       	ldi	r24, 0x9F	; 159
    8bd0:	91 e3       	ldi	r25, 0x31	; 49
    8bd2:	91 83       	std	Z+1, r25	; 0x01
    8bd4:	80 83       	st	Z, r24
	p->exp_anim.anims[2] = (char*)map_explosion_2;
    8bd6:	32 96       	adiw	r30, 0x02	; 2
    8bd8:	89 e9       	ldi	r24, 0x99	; 153
    8bda:	91 e3       	ldi	r25, 0x31	; 49
    8bdc:	91 83       	std	Z+1, r25	; 0x01
    8bde:	80 83       	st	Z, r24

	/* Shot */
	p->active_shots = 0;
    8be0:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    8be2:	8e 01       	movw	r16, r28
    8be4:	06 5e       	subi	r16, 0xE6	; 230
    8be6:	1f 4f       	sbci	r17, 0xFF	; 255
    8be8:	60 e0       	ldi	r22, 0x00	; 0
    8bea:	c8 01       	movw	r24, r16
    8bec:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8bf0:	60 e0       	ldi	r22, 0x00	; 0
    8bf2:	c8 01       	movw	r24, r16
    8bf4:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <set_shot_animations>

	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
    8bf8:	ec 96       	adiw	r28, 0x3c	; 60
    8bfa:	60 e0       	ldi	r22, 0x00	; 0
    8bfc:	ce 01       	movw	r24, r28
    8bfe:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8c02:	60 e0       	ldi	r22, 0x00	; 0
    8c04:	ce 01       	movw	r24, r28
	}
}
    8c06:	df 91       	pop	r29
    8c08:	cf 91       	pop	r28
    8c0a:	1f 91       	pop	r17
    8c0c:	0f 91       	pop	r16
	/* Shot */
	p->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&p->shot[i], BASIC_SHOT);
		set_shot_animations(&p->shot[i], BASIC_SHOT);
    8c0e:	0c 94 7a 45 	jmp	0x8af4	; 0x8af4 <set_shot_animations>

00008c12 <player_init_shot_state>:
	}
}

void player_init_shot_state(Player* player)
{
    8c12:	cf 93       	push	r28
    8c14:	df 93       	push	r29
    8c16:	ec 01       	movw	r28, r24
	player->active_shots = 0;
    8c18:	18 8a       	std	Y+16, r1	; 0x10
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    8c1a:	60 e0       	ldi	r22, 0x00	; 0
    8c1c:	4a 96       	adiw	r24, 0x1a	; 26
    8c1e:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
    8c22:	60 e0       	ldi	r22, 0x00	; 0
    8c24:	ce 01       	movw	r24, r28
    8c26:	cc 96       	adiw	r24, 0x3c	; 60
	}
}
    8c28:	df 91       	pop	r29
    8c2a:	cf 91       	pop	r28
void player_init_shot_state(Player* player)
{
	player->active_shots = 0;
	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		init_shot_state(&player->shot[i], BASIC_SHOT);
    8c2c:	0c 94 5f 45 	jmp	0x8abe	; 0x8abe <init_shot_state>

00008c30 <init_game_state>:
	}
}

void init_game_state()
{
	game.current_level = 0;
    8c30:	e1 e0       	ldi	r30, 0x01	; 1
    8c32:	fa e0       	ldi	r31, 0x0A	; 10
    8c34:	11 82       	std	Z+1, r1	; 0x01
	game.selection = PVCPU;
    8c36:	13 82       	std	Z+3, r1	; 0x03
	game.paused = 0;
    8c38:	12 82       	std	Z+2, r1	; 0x02
	init_player(&player1, map_tank1_up_0, map_tank1_right_0);
    8c3a:	49 ec       	ldi	r20, 0xC9	; 201
    8c3c:	51 e3       	ldi	r21, 0x31	; 49
    8c3e:	65 ed       	ldi	r22, 0xD5	; 213
    8c40:	71 e3       	ldi	r23, 0x31	; 49
    8c42:	8e e1       	ldi	r24, 0x1E	; 30
    8c44:	9a e0       	ldi	r25, 0x0A	; 10
    8c46:	0e 94 ab 45 	call	0x8b56	; 0x8b56 <init_player>
	init_player(&player2, map_tank2_up_0, map_tank2_right_0);
    8c4a:	41 eb       	ldi	r20, 0xB1	; 177
    8c4c:	51 e3       	ldi	r21, 0x31	; 49
    8c4e:	6d eb       	ldi	r22, 0xBD	; 189
    8c50:	71 e3       	ldi	r23, 0x31	; 49
    8c52:	8f e8       	ldi	r24, 0x8F	; 143
    8c54:	9d e0       	ldi	r25, 0x0D	; 13
    8c56:	0c 94 ab 45 	jmp	0x8b56	; 0x8b56 <init_player>

00008c5a <player_spawn>:
}

/* Utilities */
void player_spawn(Player* player)
{
    8c5a:	cf 93       	push	r28
    8c5c:	df 93       	push	r29
    8c5e:	ec 01       	movw	r28, r24
	player->grace_frame = 0;
    8c60:	1e 8a       	std	Y+22, r1	; 0x16
	player->shared.x = player->spawn_x;
    8c62:	69 89       	ldd	r22, Y+17	; 0x11
    8c64:	70 e0       	ldi	r23, 0x00	; 0
    8c66:	80 e0       	ldi	r24, 0x00	; 0
    8c68:	90 e0       	ldi	r25, 0x00	; 0
    8c6a:	0e 94 d4 56 	call	0xada8	; 0xada8 <__floatunsisf>
    8c6e:	6a 83       	std	Y+2, r22	; 0x02
    8c70:	7b 83       	std	Y+3, r23	; 0x03
    8c72:	8c 83       	std	Y+4, r24	; 0x04
    8c74:	9d 83       	std	Y+5, r25	; 0x05
	player->shared.y = player->spawn_y;
    8c76:	6a 89       	ldd	r22, Y+18	; 0x12
    8c78:	70 e0       	ldi	r23, 0x00	; 0
    8c7a:	80 e0       	ldi	r24, 0x00	; 0
    8c7c:	90 e0       	ldi	r25, 0x00	; 0
    8c7e:	0e 94 d4 56 	call	0xada8	; 0xada8 <__floatunsisf>
    8c82:	6e 83       	std	Y+6, r22	; 0x06
    8c84:	7f 83       	std	Y+7, r23	; 0x07
    8c86:	88 87       	std	Y+8, r24	; 0x08
    8c88:	99 87       	std	Y+9, r25	; 0x09
	player->shared.direction = D_UP;
    8c8a:	18 82       	st	Y, r1
	player->shared.speed = 0;
    8c8c:	19 82       	std	Y+1, r1	; 0x01
	
}
    8c8e:	df 91       	pop	r29
    8c90:	cf 91       	pop	r28
    8c92:	08 95       	ret

00008c94 <load_eeprom>:
 *  0x01 = EEPROM_ERROR_INVALID_BLOCK
 *  0x02 = EEPROM_ERROR_FULL
 *  0x03 = EEPROM_ERROR_BLOCK_NOT_FOUND
 *  0x04 = EEPROM_ERROR_NOT_FORMATTED
 */
{
    8c94:	cf 93       	push	r28
    8c96:	df 93       	push	r29
    8c98:	ec 01       	movw	r28, r24
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
    8c9a:	bc 01       	movw	r22, r24
    8c9c:	88 81       	ld	r24, Y
    8c9e:	99 81       	ldd	r25, Y+1	; 0x01
    8ca0:	0e 94 72 36 	call	0x6ce4	; 0x6ce4 <EepromReadBlock>
	if (status == 0x03)
    8ca4:	83 30       	cpi	r24, 0x03	; 3
    8ca6:	29 f4       	brne	.+10     	; 0x8cb2 <load_eeprom+0x1e>
	{
		status = EepromWriteBlock(block);
    8ca8:	ce 01       	movw	r24, r28
	}
}
    8caa:	df 91       	pop	r29
    8cac:	cf 91       	pop	r28
{
	u8 status = 0;
	status = EepromReadBlock(block->id, block);
	if (status == 0x03)
	{
		status = EepromWriteBlock(block);
    8cae:	0c 94 05 36 	jmp	0x6c0a	; 0x6c0a <EepromWriteBlock>
	}
}
    8cb2:	df 91       	pop	r29
    8cb4:	cf 91       	pop	r28
    8cb6:	08 95       	ret

00008cb8 <fade_through>:

void fade_through()
{
	FadeOut(FRAMES_PER_FADE, true);
    8cb8:	61 e0       	ldi	r22, 0x01	; 1
    8cba:	83 e0       	ldi	r24, 0x03	; 3
    8cbc:	0e 94 39 43 	call	0x8672	; 0x8672 <FadeOut>
	ClearVram();
    8cc0:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    8cc4:	60 e0       	ldi	r22, 0x00	; 0
    8cc6:	83 e0       	ldi	r24, 0x03	; 3
    8cc8:	0c 94 2d 43 	jmp	0x865a	; 0x865a <FadeIn>

00008ccc <clear_sprites>:
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
}

void clear_sprites()
{
    8ccc:	cf 93       	push	r28
	for(char i = 0; i < MAX_SPRITES; i++)
    8cce:	c0 e0       	ldi	r28, 0x00	; 0
	{
		MapSprite2(i, map_none, 0);
    8cd0:	40 e0       	ldi	r20, 0x00	; 0
    8cd2:	6b ed       	ldi	r22, 0xDB	; 219
    8cd4:	71 e3       	ldi	r23, 0x31	; 49
    8cd6:	8c 2f       	mov	r24, r28
    8cd8:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
    8cdc:	cf 5f       	subi	r28, 0xFF	; 255
	load_level(index);
}

void clear_sprites()
{
	for(char i = 0; i < MAX_SPRITES; i++)
    8cde:	cc 30       	cpi	r28, 0x0C	; 12
    8ce0:	b9 f7       	brne	.-18     	; 0x8cd0 <clear_sprites+0x4>
	{
		MapSprite2(i, map_none, 0);
	}
}
    8ce2:	cf 91       	pop	r28
    8ce4:	08 95       	ret

00008ce6 <save_score>:
{
	EepromWriteBlock(block);
}

void save_score()
{
    8ce6:	cf 92       	push	r12
    8ce8:	df 92       	push	r13
    8cea:	ff 92       	push	r15
    8cec:	0f 93       	push	r16
    8cee:	1f 93       	push	r17
    8cf0:	cf 93       	push	r28
    8cf2:	df 93       	push	r29
    8cf4:	cd b7       	in	r28, 0x3d	; 61
    8cf6:	de b7       	in	r29, 0x3e	; 62
    8cf8:	28 97       	sbiw	r28, 0x08	; 8
    8cfa:	0f b6       	in	r0, 0x3f	; 63
    8cfc:	f8 94       	cli
    8cfe:	de bf       	out	0x3e, r29	; 62
    8d00:	0f be       	out	0x3f, r0	; 63
    8d02:	cd bf       	out	0x3d, r28	; 61
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
    8d04:	90 91 2c 0a 	lds	r25, 0x0A2C
    8d08:	80 91 9d 0d 	lds	r24, 0x0D9D
    8d0c:	98 17       	cp	r25, r24
    8d0e:	28 f4       	brcc	.+10     	; 0x8d1a <save_score+0x34>
	{
		p_win = &player2;
		p_lose = &player1;
    8d10:	ee e1       	ldi	r30, 0x1E	; 30
    8d12:	fa e0       	ldi	r31, 0x0A	; 10
	Player* p_win = &player1;
	Player* p_lose = &player2;

	if (player1.score < player2.score)
	{
		p_win = &player2;
    8d14:	af e8       	ldi	r26, 0x8F	; 143
    8d16:	bd e0       	ldi	r27, 0x0D	; 13
    8d18:	04 c0       	rjmp	.+8      	; 0x8d22 <save_score+0x3c>
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
	Player* p_lose = &player2;
    8d1a:	ef e8       	ldi	r30, 0x8F	; 143
    8d1c:	fd e0       	ldi	r31, 0x0D	; 13
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
	Player* p_win = &player1;
    8d1e:	ae e1       	ldi	r26, 0x1E	; 30
    8d20:	ba e0       	ldi	r27, 0x0A	; 10
	if (player1.score < player2.score)
	{
		p_win = &player2;
		p_lose = &player1;
	}
	save_score[0] = p_win->handle_id;
    8d22:	1a 96       	adiw	r26, 0x0a	; 10
    8d24:	8c 91       	ld	r24, X
    8d26:	1a 97       	sbiw	r26, 0x0a	; 10
    8d28:	89 83       	std	Y+1, r24	; 0x01
	save_score[1] = p_lose->handle_id;
    8d2a:	82 85       	ldd	r24, Z+10	; 0x0a
    8d2c:	8a 83       	std	Y+2, r24	; 0x02
	save_score[2] = p_win->score;
    8d2e:	1e 96       	adiw	r26, 0x0e	; 14
    8d30:	8c 91       	ld	r24, X
    8d32:	8b 83       	std	Y+3, r24	; 0x03
	save_score[3] = p_lose->score;
    8d34:	96 85       	ldd	r25, Z+14	; 0x0e
    8d36:	9c 83       	std	Y+4, r25	; 0x04
	save_delta = p_win->score - p_lose->score;
    8d38:	f8 2e       	mov	r15, r24
    8d3a:	f9 1a       	sub	r15, r25
    8d3c:	00 e0       	ldi	r16, 0x00	; 0
    8d3e:	10 e0       	ldi	r17, 0x00	; 0
{
	u8 cur_delta = 0;
	u8 tmp_score[4];
	u8 save_score[4];
	u8 save_delta = 0;
	u8 saved = 0;
    8d40:	80 e0       	ldi	r24, 0x00	; 0
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
	{
		if (saved)
    8d42:	81 11       	cpse	r24, r1
    8d44:	08 c0       	rjmp	.+16     	; 0x8d56 <save_score+0x70>
    8d46:	f8 01       	movw	r30, r16
    8d48:	ec 5f       	subi	r30, 0xFC	; 252
    8d4a:	fe 4f       	sbci	r31, 0xFE	; 254
			LBCopyChars(&scores.data[i], save_score, 4);
			LBCopyChars(save_score, tmp_score, 4);
		}
		else
		{
			cur_delta = scores.data[i+2] - scores.data[i+3];
    8d4c:	94 81       	ldd	r25, Z+4	; 0x04
    8d4e:	25 81       	ldd	r18, Z+5	; 0x05
    8d50:	92 1b       	sub	r25, r18
			if (save_delta > cur_delta)
    8d52:	9f 15       	cp	r25, r15
    8d54:	d0 f4       	brcc	.+52     	; 0x8d8a <save_score+0xa4>
			{
				LBCopyChars(tmp_score, &scores.data[i], 4);
    8d56:	44 e0       	ldi	r20, 0x04	; 4
    8d58:	c8 01       	movw	r24, r16
    8d5a:	8a 5f       	subi	r24, 0xFA	; 250
    8d5c:	9e 4f       	sbci	r25, 0xFE	; 254
    8d5e:	6c 01       	movw	r12, r24
    8d60:	bc 01       	movw	r22, r24
    8d62:	ce 01       	movw	r24, r28
    8d64:	05 96       	adiw	r24, 0x05	; 5
    8d66:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
				LBCopyChars(&scores.data[i], save_score, 4);
    8d6a:	44 e0       	ldi	r20, 0x04	; 4
    8d6c:	be 01       	movw	r22, r28
    8d6e:	6f 5f       	subi	r22, 0xFF	; 255
    8d70:	7f 4f       	sbci	r23, 0xFF	; 255
    8d72:	c6 01       	movw	r24, r12
    8d74:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
				LBCopyChars(save_score, tmp_score, 4);
    8d78:	44 e0       	ldi	r20, 0x04	; 4
    8d7a:	be 01       	movw	r22, r28
    8d7c:	6b 5f       	subi	r22, 0xFB	; 251
    8d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d80:	ce 01       	movw	r24, r28
    8d82:	01 96       	adiw	r24, 0x01	; 1
    8d84:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
				saved = 1;
    8d88:	81 e0       	ldi	r24, 0x01	; 1
    8d8a:	0c 5f       	subi	r16, 0xFC	; 252
    8d8c:	1f 4f       	sbci	r17, 0xFF	; 255
	save_score[1] = p_lose->handle_id;
	save_score[2] = p_win->score;
	save_score[3] = p_lose->score;
	save_delta = p_win->score - p_lose->score;

	for (u8 i = 0; i < 28; i += 4)
    8d8e:	0c 31       	cpi	r16, 0x1C	; 28
    8d90:	11 05       	cpc	r17, r1
    8d92:	b9 f6       	brne	.-82     	; 0x8d42 <save_score+0x5c>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    8d94:	84 e0       	ldi	r24, 0x04	; 4
    8d96:	91 e0       	ldi	r25, 0x01	; 1
    8d98:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <EepromWriteBlock>
				saved = 1;
			}
		}
	}
	save_eeprom(&scores);
}
    8d9c:	28 96       	adiw	r28, 0x08	; 8
    8d9e:	0f b6       	in	r0, 0x3f	; 63
    8da0:	f8 94       	cli
    8da2:	de bf       	out	0x3e, r29	; 62
    8da4:	0f be       	out	0x3f, r0	; 63
    8da6:	cd bf       	out	0x3d, r28	; 61
    8da8:	df 91       	pop	r29
    8daa:	cf 91       	pop	r28
    8dac:	1f 91       	pop	r17
    8dae:	0f 91       	pop	r16
    8db0:	ff 90       	pop	r15
    8db2:	df 90       	pop	r13
    8db4:	cf 90       	pop	r12
    8db6:	08 95       	ret

00008db8 <position_shot>:
	init_game_state();
	load_tank_rank();
}

void position_shot(Player* player, Shot* shot)
{
    8db8:	0f 93       	push	r16
    8dba:	1f 93       	push	r17
    8dbc:	cf 93       	push	r28
    8dbe:	df 93       	push	r29
    8dc0:	8c 01       	movw	r16, r24
    8dc2:	eb 01       	movw	r28, r22
	switch (shot->shared.direction)
    8dc4:	88 81       	ld	r24, Y
    8dc6:	81 30       	cpi	r24, 0x01	; 1
    8dc8:	69 f1       	breq	.+90     	; 0x8e24 <position_shot+0x6c>
    8dca:	88 f0       	brcs	.+34     	; 0x8dee <position_shot+0x36>
    8dcc:	82 30       	cpi	r24, 0x02	; 2
    8dce:	b1 f1       	breq	.+108    	; 0x8e3c <position_shot+0x84>
    8dd0:	83 30       	cpi	r24, 0x03	; 3
    8dd2:	09 f0       	breq	.+2      	; 0x8dd6 <position_shot+0x1e>
    8dd4:	5a c0       	rjmp	.+180    	; 0x8e8a <position_shot+0xd2>
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
			shot->shared.y = player->shared.y + 16;
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    8dd6:	20 e0       	ldi	r18, 0x00	; 0
    8dd8:	30 e0       	ldi	r19, 0x00	; 0
    8dda:	40 e0       	ldi	r20, 0x00	; 0
    8ddc:	51 e4       	ldi	r21, 0x41	; 65
    8dde:	f8 01       	movw	r30, r16
    8de0:	62 81       	ldd	r22, Z+2	; 0x02
    8de2:	73 81       	ldd	r23, Z+3	; 0x03
    8de4:	84 81       	ldd	r24, Z+4	; 0x04
    8de6:	95 81       	ldd	r25, Z+5	; 0x05
    8de8:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    8dec:	3b c0       	rjmp	.+118    	; 0x8e64 <position_shot+0xac>
void position_shot(Player* player, Shot* shot)
{
	switch (shot->shared.direction)
	{
		case D_UP:
			shot->shared.x = player->shared.x + 4;
    8dee:	20 e0       	ldi	r18, 0x00	; 0
    8df0:	30 e0       	ldi	r19, 0x00	; 0
    8df2:	40 e8       	ldi	r20, 0x80	; 128
    8df4:	50 e4       	ldi	r21, 0x40	; 64
    8df6:	f8 01       	movw	r30, r16
    8df8:	62 81       	ldd	r22, Z+2	; 0x02
    8dfa:	73 81       	ldd	r23, Z+3	; 0x03
    8dfc:	84 81       	ldd	r24, Z+4	; 0x04
    8dfe:	95 81       	ldd	r25, Z+5	; 0x05
    8e00:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    8e04:	6a 83       	std	Y+2, r22	; 0x02
    8e06:	7b 83       	std	Y+3, r23	; 0x03
    8e08:	8c 83       	std	Y+4, r24	; 0x04
    8e0a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y - 8;
    8e0c:	20 e0       	ldi	r18, 0x00	; 0
    8e0e:	30 e0       	ldi	r19, 0x00	; 0
    8e10:	40 e0       	ldi	r20, 0x00	; 0
    8e12:	51 e4       	ldi	r21, 0x41	; 65
    8e14:	f8 01       	movw	r30, r16
    8e16:	66 81       	ldd	r22, Z+6	; 0x06
    8e18:	77 81       	ldd	r23, Z+7	; 0x07
    8e1a:	80 85       	ldd	r24, Z+8	; 0x08
    8e1c:	91 85       	ldd	r25, Z+9	; 0x09
    8e1e:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    8e22:	2f c0       	rjmp	.+94     	; 0x8e82 <position_shot+0xca>
			break;
		case D_RIGHT:
			shot->shared.x = player->shared.x + 16;
    8e24:	20 e0       	ldi	r18, 0x00	; 0
    8e26:	30 e0       	ldi	r19, 0x00	; 0
    8e28:	40 e8       	ldi	r20, 0x80	; 128
    8e2a:	51 e4       	ldi	r21, 0x41	; 65
    8e2c:	f8 01       	movw	r30, r16
    8e2e:	62 81       	ldd	r22, Z+2	; 0x02
    8e30:	73 81       	ldd	r23, Z+3	; 0x03
    8e32:	84 81       	ldd	r24, Z+4	; 0x04
    8e34:	95 81       	ldd	r25, Z+5	; 0x05
    8e36:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    8e3a:	14 c0       	rjmp	.+40     	; 0x8e64 <position_shot+0xac>
			shot->shared.y = player->shared.y + 4;
			break;
		case D_DOWN:
			shot->shared.x = player->shared.x + 4;
    8e3c:	20 e0       	ldi	r18, 0x00	; 0
    8e3e:	30 e0       	ldi	r19, 0x00	; 0
    8e40:	40 e8       	ldi	r20, 0x80	; 128
    8e42:	50 e4       	ldi	r21, 0x40	; 64
    8e44:	f8 01       	movw	r30, r16
    8e46:	62 81       	ldd	r22, Z+2	; 0x02
    8e48:	73 81       	ldd	r23, Z+3	; 0x03
    8e4a:	84 81       	ldd	r24, Z+4	; 0x04
    8e4c:	95 81       	ldd	r25, Z+5	; 0x05
    8e4e:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    8e52:	6a 83       	std	Y+2, r22	; 0x02
    8e54:	7b 83       	std	Y+3, r23	; 0x03
    8e56:	8c 83       	std	Y+4, r24	; 0x04
    8e58:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 16;
    8e5a:	20 e0       	ldi	r18, 0x00	; 0
    8e5c:	30 e0       	ldi	r19, 0x00	; 0
    8e5e:	40 e8       	ldi	r20, 0x80	; 128
    8e60:	51 e4       	ldi	r21, 0x41	; 65
    8e62:	08 c0       	rjmp	.+16     	; 0x8e74 <position_shot+0xbc>
			break;
		case D_LEFT:
			shot->shared.x = player->shared.x - 8;
    8e64:	6a 83       	std	Y+2, r22	; 0x02
    8e66:	7b 83       	std	Y+3, r23	; 0x03
    8e68:	8c 83       	std	Y+4, r24	; 0x04
    8e6a:	9d 83       	std	Y+5, r25	; 0x05
			shot->shared.y = player->shared.y + 4;
    8e6c:	20 e0       	ldi	r18, 0x00	; 0
    8e6e:	30 e0       	ldi	r19, 0x00	; 0
    8e70:	40 e8       	ldi	r20, 0x80	; 128
    8e72:	50 e4       	ldi	r21, 0x40	; 64
    8e74:	f8 01       	movw	r30, r16
    8e76:	66 81       	ldd	r22, Z+6	; 0x06
    8e78:	77 81       	ldd	r23, Z+7	; 0x07
    8e7a:	80 85       	ldd	r24, Z+8	; 0x08
    8e7c:	91 85       	ldd	r25, Z+9	; 0x09
    8e7e:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    8e82:	6e 83       	std	Y+6, r22	; 0x06
    8e84:	7f 83       	std	Y+7, r23	; 0x07
    8e86:	88 87       	std	Y+8, r24	; 0x08
    8e88:	99 87       	std	Y+9, r25	; 0x09
			break;
	}
}
    8e8a:	df 91       	pop	r29
    8e8c:	cf 91       	pop	r28
    8e8e:	1f 91       	pop	r17
    8e90:	0f 91       	pop	r16
    8e92:	08 95       	ret

00008e94 <print_level_score>:

void print_level_score(Player* winner, Player* loser)
{
    8e94:	0f 93       	push	r16
    8e96:	1f 93       	push	r17
    8e98:	cf 93       	push	r28
    8e9a:	df 93       	push	r29
    8e9c:	8c 01       	movw	r16, r24
    8e9e:	eb 01       	movw	r28, r22
	LBPrintStr(4, 14, &winner->handle[0], 3);
    8ea0:	ac 01       	movw	r20, r24
    8ea2:	45 5f       	subi	r20, 0xF5	; 245
    8ea4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ea6:	23 e0       	ldi	r18, 0x03	; 3
    8ea8:	6e e0       	ldi	r22, 0x0E	; 14
    8eaa:	84 e0       	ldi	r24, 0x04	; 4
    8eac:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
	Print(8, 14, strOwns);
    8eb0:	44 e3       	ldi	r20, 0x34	; 52
    8eb2:	52 e0       	ldi	r21, 0x02	; 2
    8eb4:	6e e0       	ldi	r22, 0x0E	; 14
    8eb6:	70 e0       	ldi	r23, 0x00	; 0
    8eb8:	88 e0       	ldi	r24, 0x08	; 8
    8eba:	90 e0       	ldi	r25, 0x00	; 0
    8ebc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	LBPrintStr(13, 14, &loser->handle[0], 3);
    8ec0:	ae 01       	movw	r20, r28
    8ec2:	45 5f       	subi	r20, 0xF5	; 245
    8ec4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ec6:	23 e0       	ldi	r18, 0x03	; 3
    8ec8:	6e e0       	ldi	r22, 0x0E	; 14
    8eca:	8d e0       	ldi	r24, 0x0D	; 13
    8ecc:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
	Print(17, 14, strBy);
    8ed0:	41 e3       	ldi	r20, 0x31	; 49
    8ed2:	52 e0       	ldi	r21, 0x02	; 2
    8ed4:	6e e0       	ldi	r22, 0x0E	; 14
    8ed6:	70 e0       	ldi	r23, 0x00	; 0
    8ed8:	81 e1       	ldi	r24, 0x11	; 17
    8eda:	90 e0       	ldi	r25, 0x00	; 0
    8edc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	PrintByte(22, 14, winner->level_score ,true);
    8ee0:	21 e0       	ldi	r18, 0x01	; 1
    8ee2:	f8 01       	movw	r30, r16
    8ee4:	47 85       	ldd	r20, Z+15	; 0x0f
    8ee6:	6e e0       	ldi	r22, 0x0E	; 14
    8ee8:	70 e0       	ldi	r23, 0x00	; 0
    8eea:	86 e1       	ldi	r24, 0x16	; 22
    8eec:	90 e0       	ldi	r25, 0x00	; 0
    8eee:	0e 94 b7 42 	call	0x856e	; 0x856e <PrintByte>
	PrintChar(23, 14, '-');
    8ef2:	4d e2       	ldi	r20, 0x2D	; 45
    8ef4:	6e e0       	ldi	r22, 0x0E	; 14
    8ef6:	70 e0       	ldi	r23, 0x00	; 0
    8ef8:	87 e1       	ldi	r24, 0x17	; 23
    8efa:	90 e0       	ldi	r25, 0x00	; 0
    8efc:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
	PrintByte(26, 14, loser->level_score ,true);
    8f00:	21 e0       	ldi	r18, 0x01	; 1
    8f02:	4f 85       	ldd	r20, Y+15	; 0x0f
    8f04:	6e e0       	ldi	r22, 0x0E	; 14
    8f06:	70 e0       	ldi	r23, 0x00	; 0
    8f08:	8a e1       	ldi	r24, 0x1A	; 26
    8f0a:	90 e0       	ldi	r25, 0x00	; 0
}
    8f0c:	df 91       	pop	r29
    8f0e:	cf 91       	pop	r28
    8f10:	1f 91       	pop	r17
    8f12:	0f 91       	pop	r16
	Print(8, 14, strOwns);
	LBPrintStr(13, 14, &loser->handle[0], 3);
	Print(17, 14, strBy);
	PrintByte(22, 14, winner->level_score ,true);
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
    8f14:	0c 94 b7 42 	jmp	0x856e	; 0x856e <PrintByte>

00008f18 <render_hud>:
		}
	}
}

void render_hud(Player* player, u8 x)
{	
    8f18:	cf 93       	push	r28
    8f1a:	df 93       	push	r29
    8f1c:	c6 2f       	mov	r28, r22
	LBPrintStr(x+10, 0, player->handle, 3);
    8f1e:	ac 01       	movw	r20, r24
    8f20:	45 5f       	subi	r20, 0xF5	; 245
    8f22:	5f 4f       	sbci	r21, 0xFF	; 255
    8f24:	23 e0       	ldi	r18, 0x03	; 3
    8f26:	60 e0       	ldi	r22, 0x00	; 0
    8f28:	8a e0       	ldi	r24, 0x0A	; 10
    8f2a:	8c 0f       	add	r24, r28
    8f2c:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
	Print(x, 0, strScore);
    8f30:	d0 e0       	ldi	r29, 0x00	; 0
    8f32:	45 e8       	ldi	r20, 0x85	; 133
    8f34:	51 e0       	ldi	r21, 0x01	; 1
    8f36:	60 e0       	ldi	r22, 0x00	; 0
    8f38:	70 e0       	ldi	r23, 0x00	; 0
    8f3a:	ce 01       	movw	r24, r28
    8f3c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(x, 1, strTotal);
    8f40:	4e e7       	ldi	r20, 0x7E	; 126
    8f42:	51 e0       	ldi	r21, 0x01	; 1
    8f44:	61 e0       	ldi	r22, 0x01	; 1
    8f46:	70 e0       	ldi	r23, 0x00	; 0
    8f48:	ce 01       	movw	r24, r28
	
}
    8f4a:	df 91       	pop	r29
    8f4c:	cf 91       	pop	r28

void render_hud(Player* player, u8 x)
{	
	LBPrintStr(x+10, 0, player->handle, 3);
	Print(x, 0, strScore);
	Print(x, 1, strTotal);
    8f4e:	0c 94 ea 42 	jmp	0x85d4	; 0x85d4 <Print>

00008f52 <render_score>:
	
}

void render_score(Player* player, u8 x)
{
    8f52:	0f 93       	push	r16
    8f54:	1f 93       	push	r17
    8f56:	cf 93       	push	r28
    8f58:	df 93       	push	r29
    8f5a:	8c 01       	movw	r16, r24
	PrintByte(x+8, 0, player->level_score, false);
    8f5c:	c6 2f       	mov	r28, r22
    8f5e:	d0 e0       	ldi	r29, 0x00	; 0
    8f60:	28 96       	adiw	r28, 0x08	; 8
    8f62:	20 e0       	ldi	r18, 0x00	; 0
    8f64:	fc 01       	movw	r30, r24
    8f66:	47 85       	ldd	r20, Z+15	; 0x0f
    8f68:	60 e0       	ldi	r22, 0x00	; 0
    8f6a:	70 e0       	ldi	r23, 0x00	; 0
    8f6c:	ce 01       	movw	r24, r28
    8f6e:	0e 94 b7 42 	call	0x856e	; 0x856e <PrintByte>
	PrintByte(x+8, 1, player->score, false);
    8f72:	20 e0       	ldi	r18, 0x00	; 0
    8f74:	f8 01       	movw	r30, r16
    8f76:	46 85       	ldd	r20, Z+14	; 0x0e
    8f78:	61 e0       	ldi	r22, 0x01	; 1
    8f7a:	70 e0       	ldi	r23, 0x00	; 0
    8f7c:	ce 01       	movw	r24, r28
}
    8f7e:	df 91       	pop	r29
    8f80:	cf 91       	pop	r28
    8f82:	1f 91       	pop	r17
    8f84:	0f 91       	pop	r16
}

void render_score(Player* player, u8 x)
{
	PrintByte(x+8, 0, player->level_score, false);
	PrintByte(x+8, 1, player->score, false);
    8f86:	0c 94 b7 42 	jmp	0x856e	; 0x856e <PrintByte>

00008f8a <render_banter>:
}

u8 render_banter(Player* player, u8 banter_x, u8 clear_banter)
{
    8f8a:	cf 93       	push	r28
    8f8c:	df 93       	push	r29
    8f8e:	ec 01       	movw	r28, r24
    8f90:	86 2f       	mov	r24, r22
	// Banter
	if (player->banter_frame != FRAMES_PER_BANTER)
    8f92:	9c 89       	ldd	r25, Y+20	; 0x14
    8f94:	9a 35       	cpi	r25, 0x5A	; 90
    8f96:	99 f0       	breq	.+38     	; 0x8fbe <render_banter+0x34>
	{
		if (player->banter_frame == 0)
    8f98:	91 11       	cpse	r25, r1
    8f9a:	0c c0       	rjmp	.+24     	; 0x8fb4 <render_banter+0x2a>
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
    8f9c:	4d 89       	ldd	r20, Y+21	; 0x15
    8f9e:	9f e0       	ldi	r25, 0x0F	; 15
    8fa0:	49 9f       	mul	r20, r25
    8fa2:	a0 01       	movw	r20, r0
    8fa4:	11 24       	eor	r1, r1
    8fa6:	45 56       	subi	r20, 0x65	; 101
    8fa8:	5e 4f       	sbci	r21, 0xFE	; 254
    8faa:	62 e0       	ldi	r22, 0x02	; 2
    8fac:	70 e0       	ldi	r23, 0x00	; 0
    8fae:	90 e0       	ldi	r25, 0x00	; 0
    8fb0:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
		}
		clear_banter = 1;
		player->banter_frame++;
    8fb4:	8c 89       	ldd	r24, Y+20	; 0x14
    8fb6:	8f 5f       	subi	r24, 0xFF	; 255
    8fb8:	8c 8b       	std	Y+20, r24	; 0x14
	{
		if (player->banter_frame == 0)
		{
			Print(banter_x, 2, &banter_map[player->banter_index*15]);
		}
		clear_banter = 1;
    8fba:	41 e0       	ldi	r20, 0x01	; 1
    8fbc:	0a c0       	rjmp	.+20     	; 0x8fd2 <render_banter+0x48>
		player->banter_frame++;
	}
	else if (clear_banter)
    8fbe:	44 23       	and	r20, r20
    8fc0:	41 f0       	breq	.+16     	; 0x8fd2 <render_banter+0x48>
	{
		Print(banter_x, 2, strBanterClear);
    8fc2:	4c e8       	ldi	r20, 0x8C	; 140
    8fc4:	51 e0       	ldi	r21, 0x01	; 1
    8fc6:	62 e0       	ldi	r22, 0x02	; 2
    8fc8:	70 e0       	ldi	r23, 0x00	; 0
    8fca:	90 e0       	ldi	r25, 0x00	; 0
    8fcc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    8fd0:	40 e0       	ldi	r20, 0x00	; 0
		clear_banter = 0;
	}
	return clear_banter;
}
    8fd2:	84 2f       	mov	r24, r20
    8fd4:	df 91       	pop	r29
    8fd6:	cf 91       	pop	r28
    8fd8:	08 95       	ret

00008fda <render_player>:

void render_player(Player* player, u8 sprite_index)
{
    8fda:	ef 92       	push	r14
    8fdc:	ff 92       	push	r15
    8fde:	0f 93       	push	r16
    8fe0:	1f 93       	push	r17
    8fe2:	cf 93       	push	r28
    8fe4:	df 93       	push	r29
    8fe6:	1f 92       	push	r1
    8fe8:	cd b7       	in	r28, 0x3d	; 61
    8fea:	de b7       	in	r29, 0x3e	; 62
    8fec:	7c 01       	movw	r14, r24
    8fee:	16 2f       	mov	r17, r22
	MoveSprite(sprite_index, player->shared.x, player->shared.y, 2, 2);
    8ff0:	fc 01       	movw	r30, r24
    8ff2:	66 81       	ldd	r22, Z+6	; 0x06
    8ff4:	77 81       	ldd	r23, Z+7	; 0x07
    8ff6:	80 85       	ldd	r24, Z+8	; 0x08
    8ff8:	91 85       	ldd	r25, Z+9	; 0x09
    8ffa:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    8ffe:	46 2f       	mov	r20, r22
    9000:	f7 01       	movw	r30, r14
    9002:	62 81       	ldd	r22, Z+2	; 0x02
    9004:	73 81       	ldd	r23, Z+3	; 0x03
    9006:	84 81       	ldd	r24, Z+4	; 0x04
    9008:	95 81       	ldd	r25, Z+5	; 0x05
    900a:	49 83       	std	Y+1, r20	; 0x01
    900c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9010:	02 e0       	ldi	r16, 0x02	; 2
    9012:	22 e0       	ldi	r18, 0x02	; 2
    9014:	49 81       	ldd	r20, Y+1	; 0x01
    9016:	81 2f       	mov	r24, r17
    9018:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
}
    901c:	0f 90       	pop	r0
    901e:	df 91       	pop	r29
    9020:	cf 91       	pop	r28
    9022:	1f 91       	pop	r17
    9024:	0f 91       	pop	r16
    9026:	ff 90       	pop	r15
    9028:	ef 90       	pop	r14
    902a:	08 95       	ret

0000902c <render_shot>:

void render_shot(Player* player, u8 sprite_index)
{
    902c:	cf 92       	push	r12
    902e:	df 92       	push	r13
    9030:	ff 92       	push	r15
    9032:	0f 93       	push	r16
    9034:	1f 93       	push	r17
    9036:	cf 93       	push	r28
    9038:	df 93       	push	r29
    903a:	1f 92       	push	r1
    903c:	cd b7       	in	r28, 0x3d	; 61
    903e:	de b7       	in	r29, 0x3e	; 62
    9040:	fc 01       	movw	r30, r24
    9042:	16 2f       	mov	r17, r22
	if (player->active_shots > 0)
    9044:	80 89       	ldd	r24, Z+16	; 0x10
    9046:	88 23       	and	r24, r24
    9048:	19 f1       	breq	.+70     	; 0x9090 <render_shot+0x64>
    904a:	6f 01       	movw	r12, r30
    904c:	8c e1       	ldi	r24, 0x1C	; 28
    904e:	c8 0e       	add	r12, r24
    9050:	d1 1c       	adc	r13, r1
    9052:	82 e0       	ldi	r24, 0x02	; 2
    9054:	f8 2e       	mov	r15, r24
    9056:	f6 0e       	add	r15, r22
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
    9058:	f6 01       	movw	r30, r12
    905a:	64 81       	ldd	r22, Z+4	; 0x04
    905c:	75 81       	ldd	r23, Z+5	; 0x05
    905e:	86 81       	ldd	r24, Z+6	; 0x06
    9060:	97 81       	ldd	r25, Z+7	; 0x07
    9062:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9066:	46 2f       	mov	r20, r22
    9068:	f6 01       	movw	r30, r12
    906a:	60 81       	ld	r22, Z
    906c:	71 81       	ldd	r23, Z+1	; 0x01
    906e:	82 81       	ldd	r24, Z+2	; 0x02
    9070:	93 81       	ldd	r25, Z+3	; 0x03
    9072:	49 83       	std	Y+1, r20	; 0x01
    9074:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9078:	01 e0       	ldi	r16, 0x01	; 1
    907a:	21 e0       	ldi	r18, 0x01	; 1
    907c:	49 81       	ldd	r20, Y+1	; 0x01
    907e:	81 2f       	mov	r24, r17
    9080:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
			sprite_index++;
    9084:	1f 5f       	subi	r17, 0xFF	; 255
    9086:	f2 e2       	ldi	r31, 0x22	; 34
    9088:	cf 0e       	add	r12, r31
    908a:	d1 1c       	adc	r13, r1

void render_shot(Player* player, u8 sprite_index)
{
	if (player->active_shots > 0)
	{
		for (u8 i = 0; i < MAX_SHOTS; i++)
    908c:	1f 11       	cpse	r17, r15
    908e:	e4 cf       	rjmp	.-56     	; 0x9058 <render_shot+0x2c>
		{
			MoveSprite(sprite_index, player->shot[i].shared.x, player->shot[i].shared.y, 1, 1);
			sprite_index++;
		}
	}
}
    9090:	0f 90       	pop	r0
    9092:	df 91       	pop	r29
    9094:	cf 91       	pop	r28
    9096:	1f 91       	pop	r17
    9098:	0f 91       	pop	r16
    909a:	ff 90       	pop	r15
    909c:	df 90       	pop	r13
    909e:	cf 90       	pop	r12
    90a0:	08 95       	ret

000090a2 <render_tile_explosions>:

void render_tile_explosions(TileAnimations* ta)
{	
    90a2:	cf 92       	push	r12
    90a4:	df 92       	push	r13
    90a6:	ef 92       	push	r14
    90a8:	ff 92       	push	r15
    90aa:	0f 93       	push	r16
    90ac:	1f 93       	push	r17
    90ae:	cf 93       	push	r28
    90b0:	df 93       	push	r29
    90b2:	1f 92       	push	r1
    90b4:	cd b7       	in	r28, 0x3d	; 61
    90b6:	de b7       	in	r29, 0x3e	; 62
    90b8:	8c 01       	movw	r16, r24
    90ba:	0f 5f       	subi	r16, 0xFF	; 255
    90bc:	1f 4f       	sbci	r17, 0xFF	; 255
    90be:	7c 01       	movw	r14, r24
    90c0:	29 e1       	ldi	r18, 0x19	; 25
    90c2:	e2 0e       	add	r14, r18
    90c4:	f1 1c       	adc	r15, r1
				ta->anims[i].tile_index = 0;
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
						3 + ta->anims[i].tile_index / 30, 
    90c6:	8e e1       	ldi	r24, 0x1E	; 30
    90c8:	c8 2e       	mov	r12, r24
    90ca:	d1 2c       	mov	r13, r1
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
    90cc:	f8 01       	movw	r30, r16
    90ce:	82 85       	ldd	r24, Z+10	; 0x0a
    90d0:	93 85       	ldd	r25, Z+11	; 0x0b
    90d2:	89 2b       	or	r24, r25
    90d4:	e1 f0       	breq	.+56     	; 0x910e <render_tile_explosions+0x6c>
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
    90d6:	be 01       	movw	r22, r28
    90d8:	6f 5f       	subi	r22, 0xFF	; 255
    90da:	7f 4f       	sbci	r23, 0xFF	; 255
    90dc:	c8 01       	movw	r24, r16
    90de:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    90e2:	9c 01       	movw	r18, r24
			if (looped)
    90e4:	49 81       	ldd	r20, Y+1	; 0x01
    90e6:	f8 01       	movw	r30, r16
    90e8:	82 85       	ldd	r24, Z+10	; 0x0a
    90ea:	93 85       	ldd	r25, Z+11	; 0x0b
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    90ec:	b6 01       	movw	r22, r12
    90ee:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    90f2:	6d 5f       	subi	r22, 0xFD	; 253
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
	{
		if (ta->anims[i].tile_index != 0)
		{
			map = LBGetNextFrame(&ta->anims[i].anim, &looped);
			if (looped)
    90f4:	44 23       	and	r20, r20
    90f6:	41 f0       	breq	.+16     	; 0x9108 <render_tile_explosions+0x66>
			{
				SetTile(ta->anims[i].tile_index % 30, 3 + ta->anims[i].tile_index / 30, 0);
    90f8:	40 e0       	ldi	r20, 0x00	; 0
    90fa:	50 e0       	ldi	r21, 0x00	; 0
    90fc:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
				ta->anims[i].tile_index = 0;
    9100:	f8 01       	movw	r30, r16
    9102:	13 86       	std	Z+11, r1	; 0x0b
    9104:	12 86       	std	Z+10, r1	; 0x0a
    9106:	03 c0       	rjmp	.+6      	; 0x910e <render_tile_explosions+0x6c>
			}
			else
			{
				DrawMap2(ta->anims[i].tile_index % 30,
    9108:	a9 01       	movw	r20, r18
    910a:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
    910e:	04 5f       	subi	r16, 0xF4	; 244
    9110:	1f 4f       	sbci	r17, 0xFF	; 255
void render_tile_explosions(TileAnimations* ta)
{	
	char looped;
	char* map;
	
	for (u8 i = 0; i < TILE_ANIMATIONS_LENGTH; i++)
    9112:	0e 15       	cp	r16, r14
    9114:	1f 05       	cpc	r17, r15
    9116:	d1 f6       	brne	.-76     	; 0x90cc <render_tile_explosions+0x2a>
						(const char*) map
				);
			}
		}
	}
}
    9118:	0f 90       	pop	r0
    911a:	df 91       	pop	r29
    911c:	cf 91       	pop	r28
    911e:	1f 91       	pop	r17
    9120:	0f 91       	pop	r16
    9122:	ff 90       	pop	r15
    9124:	ef 90       	pop	r14
    9126:	df 90       	pop	r13
    9128:	cf 90       	pop	r12
    912a:	08 95       	ret

0000912c <tank_map>:

char tank_map(Player* player, char sprite_index)
{
    912c:	ff 92       	push	r15
    912e:	0f 93       	push	r16
    9130:	1f 93       	push	r17
    9132:	cf 93       	push	r28
    9134:	df 93       	push	r29
    9136:	1f 92       	push	r1
    9138:	cd b7       	in	r28, 0x3d	; 61
    913a:	de b7       	in	r29, 0x3e	; 62
    913c:	8c 01       	movw	r16, r24
    913e:	f6 2e       	mov	r15, r22
	u8 t_flags = 0;
	static u8 toggle_counter = FRAMES_PER_BLANK;
	static u8 toggle_blank = 0;
	char looped;

	if (player->flags & EXPLODING_FLAG)
    9140:	fc 01       	movw	r30, r24
    9142:	83 89       	ldd	r24, Z+19	; 0x13
    9144:	80 ff       	sbrs	r24, 0
    9146:	18 c0       	rjmp	.+48     	; 0x9178 <tank_map+0x4c>
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
    9148:	be 01       	movw	r22, r28
    914a:	6f 5f       	subi	r22, 0xFF	; 255
    914c:	7f 4f       	sbci	r23, 0xFF	; 255
    914e:	c8 01       	movw	r24, r16
    9150:	8e 58       	subi	r24, 0x8E	; 142
    9152:	9f 4f       	sbci	r25, 0xFF	; 255
    9154:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
		t_flags = 0;
		if (looped)
    9158:	29 81       	ldd	r18, Y+1	; 0x01
    915a:	22 23       	and	r18, r18
    915c:	09 f4       	brne	.+2      	; 0x9160 <tank_map+0x34>
    915e:	5a c0       	rjmp	.+180    	; 0x9214 <tank_map+0xe8>
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
    9160:	f8 01       	movw	r30, r16
    9162:	83 89       	ldd	r24, Z+19	; 0x13
    9164:	91 e0       	ldi	r25, 0x01	; 1
    9166:	98 27       	eor	r25, r24
    9168:	93 8b       	std	Z+19, r25	; 0x13
			t_map = (char*) map_tank_blank;
			player_spawn(player);
    916a:	c8 01       	movw	r24, r16
    916c:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <player_spawn>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9170:	40 e0       	ldi	r20, 0x00	; 0
		if (looped)
		{
			player->flags = player->flags ^ EXPLODING_FLAG;
			t_map = (char*) map_tank_blank;
    9172:	8e ed       	ldi	r24, 0xDE	; 222
    9174:	91 e3       	ldi	r25, 0x31	; 49
    9176:	4f c0       	rjmp	.+158    	; 0x9216 <tank_map+0xea>
			player_spawn(player);
		}
	}
	else
	{
		if (player->grace_frame != FRAMES_PER_GRACE)
    9178:	f8 01       	movw	r30, r16
    917a:	96 89       	ldd	r25, Z+22	; 0x16
    917c:	98 37       	cpi	r25, 0x78	; 120
    917e:	11 f0       	breq	.+4      	; 0x9184 <tank_map+0x58>
		{
			player->grace_frame++;
    9180:	9f 5f       	subi	r25, 0xFF	; 255
    9182:	96 8b       	std	Z+22, r25	; 0x16
		}
		switch (player->shared.direction)
    9184:	f8 01       	movw	r30, r16
    9186:	90 81       	ld	r25, Z
    9188:	91 30       	cpi	r25, 0x01	; 1
    918a:	79 f0       	breq	.+30     	; 0x91aa <tank_map+0x7e>
    918c:	f8 f0       	brcs	.+62     	; 0x91cc <tank_map+0xa0>
    918e:	92 30       	cpi	r25, 0x02	; 2
    9190:	99 f0       	breq	.+38     	; 0x91b8 <tank_map+0x8c>
    9192:	93 30       	cpi	r25, 0x03	; 3
    9194:	d9 f4       	brne	.+54     	; 0x91cc <tank_map+0xa0>
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
    9196:	be 01       	movw	r22, r28
    9198:	6f 5f       	subi	r22, 0xFF	; 255
    919a:	7f 4f       	sbci	r23, 0xFF	; 255
    919c:	c8 01       	movw	r24, r16
    919e:	88 59       	subi	r24, 0x98	; 152
    91a0:	9f 4f       	sbci	r25, 0xFF	; 255
    91a2:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    91a6:	41 e0       	ldi	r20, 0x01	; 1
    91a8:	1a c0       	rjmp	.+52     	; 0x91de <tank_map+0xb2>
			player->grace_frame++;
		}
		switch (player->shared.direction)
		{
			case D_UP: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
			case D_RIGHT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = 0; break;
    91aa:	be 01       	movw	r22, r28
    91ac:	6f 5f       	subi	r22, 0xFF	; 255
    91ae:	7f 4f       	sbci	r23, 0xFF	; 255
    91b0:	c8 01       	movw	r24, r16
    91b2:	88 59       	subi	r24, 0x98	; 152
    91b4:	9f 4f       	sbci	r25, 0xFF	; 255
    91b6:	10 c0       	rjmp	.+32     	; 0x91d8 <tank_map+0xac>
			case D_DOWN: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = SPRITE_FLIP_Y; break;
    91b8:	be 01       	movw	r22, r28
    91ba:	6f 5f       	subi	r22, 0xFF	; 255
    91bc:	7f 4f       	sbci	r23, 0xFF	; 255
    91be:	c8 01       	movw	r24, r16
    91c0:	82 5a       	subi	r24, 0xA2	; 162
    91c2:	9f 4f       	sbci	r25, 0xFF	; 255
    91c4:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    91c8:	42 e0       	ldi	r20, 0x02	; 2
    91ca:	09 c0       	rjmp	.+18     	; 0x91de <tank_map+0xb2>
			case D_LEFT: t_map = LBGetNextFrame(&player->right_anim, &looped); t_flags = SPRITE_FLIP_X; break;
			default: t_map = LBGetNextFrame(&player->up_anim, &looped); t_flags = 0; break;
    91cc:	be 01       	movw	r22, r28
    91ce:	6f 5f       	subi	r22, 0xFF	; 255
    91d0:	7f 4f       	sbci	r23, 0xFF	; 255
    91d2:	c8 01       	movw	r24, r16
    91d4:	82 5a       	subi	r24, 0xA2	; 162
    91d6:	9f 4f       	sbci	r25, 0xFF	; 255
    91d8:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    91dc:	40 e0       	ldi	r20, 0x00	; 0
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
    91de:	f8 01       	movw	r30, r16
    91e0:	26 89       	ldd	r18, Z+22	; 0x16
    91e2:	28 37       	cpi	r18, 0x78	; 120
    91e4:	31 f0       	breq	.+12     	; 0x91f2 <tank_map+0xc6>
    91e6:	20 91 70 09 	lds	r18, 0x0970
    91ea:	22 23       	and	r18, r18
    91ec:	11 f0       	breq	.+4      	; 0x91f2 <tank_map+0xc6>
		{
			t_map = (char*) map_tank_blank;
    91ee:	8e ed       	ldi	r24, 0xDE	; 222
    91f0:	91 e3       	ldi	r25, 0x31	; 49
		}
		toggle_counter--;
    91f2:	20 91 03 01 	lds	r18, 0x0103
    91f6:	21 50       	subi	r18, 0x01	; 1
		if (toggle_counter == 0)
    91f8:	19 f0       	breq	.+6      	; 0x9200 <tank_map+0xd4>
		}
		if ((player->grace_frame != FRAMES_PER_GRACE) && (toggle_blank))
		{
			t_map = (char*) map_tank_blank;
		}
		toggle_counter--;
    91fa:	20 93 03 01 	sts	0x0103, r18
    91fe:	0b c0       	rjmp	.+22     	; 0x9216 <tank_map+0xea>
		if (toggle_counter == 0)
		{
			toggle_counter = FRAMES_PER_BLANK;
    9200:	24 e1       	ldi	r18, 0x14	; 20
    9202:	20 93 03 01 	sts	0x0103, r18
			toggle_blank = toggle_blank ^ 1;
    9206:	30 91 70 09 	lds	r19, 0x0970
    920a:	21 e0       	ldi	r18, 0x01	; 1
    920c:	23 27       	eor	r18, r19
    920e:	20 93 70 09 	sts	0x0970, r18
    9212:	01 c0       	rjmp	.+2      	; 0x9216 <tank_map+0xea>
	char looped;

	if (player->flags & EXPLODING_FLAG)
	{
		t_map = LBGetNextFrame(&player->exp_anim, &looped);
		t_flags = 0;
    9214:	40 e0       	ldi	r20, 0x00	; 0
		{
			toggle_counter = FRAMES_PER_BLANK;
			toggle_blank = toggle_blank ^ 1;
		}
	}
	MapSprite2(sprite_index, (const char*) t_map, t_flags);
    9216:	bc 01       	movw	r22, r24
    9218:	8f 2d       	mov	r24, r15
    921a:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	sprite_index += 4;
	return sprite_index;
}
    921e:	84 e0       	ldi	r24, 0x04	; 4
    9220:	8f 0d       	add	r24, r15
    9222:	0f 90       	pop	r0
    9224:	df 91       	pop	r29
    9226:	cf 91       	pop	r28
    9228:	1f 91       	pop	r17
    922a:	0f 91       	pop	r16
    922c:	ff 90       	pop	r15
    922e:	08 95       	ret

00009230 <shot_map>:

char shot_map(Player* player, char sprite_index)
{
    9230:	ef 92       	push	r14
    9232:	ff 92       	push	r15
    9234:	0f 93       	push	r16
    9236:	1f 93       	push	r17
    9238:	cf 93       	push	r28
    923a:	df 93       	push	r29
    923c:	00 d0       	rcall	.+0      	; 0x923e <shot_map+0xe>
    923e:	cd b7       	in	r28, 0x3d	; 61
    9240:	de b7       	in	r29, 0x3e	; 62
    9242:	f6 2e       	mov	r15, r22
	char looped = 0;
    9244:	19 82       	std	Y+1, r1	; 0x01
    9246:	8c 01       	movw	r16, r24
    9248:	08 5d       	subi	r16, 0xD8	; 216
    924a:	1f 4f       	sbci	r17, 0xFF	; 255
    924c:	82 e0       	ldi	r24, 0x02	; 2
    924e:	e8 2e       	mov	r14, r24
    9250:	e6 0e       	add	r14, r22
	char* s_map = 0;
	u8 s_flags = 0;
    9252:	20 e0       	ldi	r18, 0x00	; 0
    9254:	f8 01       	movw	r30, r16
    9256:	31 97       	sbiw	r30, 0x01	; 1
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
	{
		shot = &player->shot[i];
		if (shot->active)
    9258:	80 81       	ld	r24, Z
    925a:	88 23       	and	r24, r24
    925c:	41 f1       	breq	.+80     	; 0x92ae <shot_map+0x7e>
    925e:	3d 97       	sbiw	r30, 0x0d	; 13
		{
			switch (shot->shared.direction)
    9260:	80 81       	ld	r24, Z
    9262:	81 30       	cpi	r24, 0x01	; 1
    9264:	71 f0       	breq	.+28     	; 0x9282 <shot_map+0x52>
    9266:	f0 f0       	brcs	.+60     	; 0x92a4 <shot_map+0x74>
    9268:	82 30       	cpi	r24, 0x02	; 2
    926a:	a1 f0       	breq	.+40     	; 0x9294 <shot_map+0x64>
    926c:	83 30       	cpi	r24, 0x03	; 3
    926e:	d1 f4       	brne	.+52     	; 0x92a4 <shot_map+0x74>
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
    9270:	be 01       	movw	r22, r28
    9272:	6f 5f       	subi	r22, 0xFF	; 255
    9274:	7f 4f       	sbci	r23, 0xFF	; 255
    9276:	c8 01       	movw	r24, r16
    9278:	0a 96       	adiw	r24, 0x0a	; 10
    927a:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    927e:	21 e0       	ldi	r18, 0x01	; 1
    9280:	18 c0       	rjmp	.+48     	; 0x92b2 <shot_map+0x82>
		if (shot->active)
		{
			switch (shot->shared.direction)
			{
				case D_UP: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
				case D_RIGHT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = 0; break;
    9282:	be 01       	movw	r22, r28
    9284:	6f 5f       	subi	r22, 0xFF	; 255
    9286:	7f 4f       	sbci	r23, 0xFF	; 255
    9288:	c8 01       	movw	r24, r16
    928a:	0a 96       	adiw	r24, 0x0a	; 10
    928c:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    9290:	20 e0       	ldi	r18, 0x00	; 0
    9292:	0f c0       	rjmp	.+30     	; 0x92b2 <shot_map+0x82>
				case D_DOWN: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = SPRITE_FLIP_Y; break;
    9294:	be 01       	movw	r22, r28
    9296:	6f 5f       	subi	r22, 0xFF	; 255
    9298:	7f 4f       	sbci	r23, 0xFF	; 255
    929a:	c8 01       	movw	r24, r16
    929c:	0e 94 6e 43 	call	0x86dc	; 0x86dc <LBGetNextFrame>
    92a0:	22 e0       	ldi	r18, 0x02	; 2
    92a2:	07 c0       	rjmp	.+14     	; 0x92b2 <shot_map+0x82>
				case D_LEFT: s_map = LBGetNextFrame(&player->shot[i].right_anim, &looped); s_flags = SPRITE_FLIP_X; break;
				default: s_map = LBGetNextFrame(&player->shot[i].up_anim, &looped); s_flags = 0; break;
    92a4:	be 01       	movw	r22, r28
    92a6:	6f 5f       	subi	r22, 0xFF	; 255
    92a8:	7f 4f       	sbci	r23, 0xFF	; 255
    92aa:	c8 01       	movw	r24, r16
    92ac:	ef cf       	rjmp	.-34     	; 0x928c <shot_map+0x5c>
			}
		}
		else
		{
			s_map = (char*) map_tank_blank;
    92ae:	8e ed       	ldi	r24, 0xDE	; 222
    92b0:	91 e3       	ldi	r25, 0x31	; 49
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
    92b2:	42 2f       	mov	r20, r18
    92b4:	bc 01       	movw	r22, r24
    92b6:	8f 2d       	mov	r24, r15
    92b8:	2a 83       	std	Y+2, r18	; 0x02
    92ba:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
    92be:	f3 94       	inc	r15
    92c0:	0e 5d       	subi	r16, 0xDE	; 222
    92c2:	1f 4f       	sbci	r17, 0xFF	; 255
	char looped = 0;
	char* s_map = 0;
	u8 s_flags = 0;
	Shot* shot;

	for (u8 i = 0; i < MAX_SHOTS; i++)
    92c4:	2a 81       	ldd	r18, Y+2	; 0x02
    92c6:	fe 10       	cpse	r15, r14
    92c8:	c5 cf       	rjmp	.-118    	; 0x9254 <shot_map+0x24>
		}
		MapSprite2(sprite_index, (const char*) s_map, s_flags);
		sprite_index++;
	}
	return sprite_index;
}
    92ca:	8f 2d       	mov	r24, r15
    92cc:	0f 90       	pop	r0
    92ce:	0f 90       	pop	r0
    92d0:	df 91       	pop	r29
    92d2:	cf 91       	pop	r28
    92d4:	1f 91       	pop	r17
    92d6:	0f 91       	pop	r16
    92d8:	ff 90       	pop	r15
    92da:	ef 90       	pop	r14
    92dc:	08 95       	ret

000092de <recoil_sprite>:

/* Collision Detection */
void recoil_sprite(SpriteShared* sprite)
{
    92de:	cf 93       	push	r28
    92e0:	df 93       	push	r29
    92e2:	ec 01       	movw	r28, r24
	if (sprite->direction == D_UP)
    92e4:	88 81       	ld	r24, Y
    92e6:	81 11       	cpse	r24, r1
    92e8:	15 c0       	rjmp	.+42     	; 0x9314 <recoil_sprite+0x36>
	{
		sprite->y += FRAME_TIME * sprite->speed;
    92ea:	69 81       	ldd	r22, Y+1	; 0x01
    92ec:	70 e0       	ldi	r23, 0x00	; 0
    92ee:	80 e0       	ldi	r24, 0x00	; 0
    92f0:	90 e0       	ldi	r25, 0x00	; 0
    92f2:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    92f6:	25 e6       	ldi	r18, 0x65	; 101
    92f8:	38 e8       	ldi	r19, 0x88	; 136
    92fa:	48 e8       	ldi	r20, 0x88	; 136
    92fc:	5c e3       	ldi	r21, 0x3C	; 60
    92fe:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9302:	9b 01       	movw	r18, r22
    9304:	ac 01       	movw	r20, r24
    9306:	6e 81       	ldd	r22, Y+6	; 0x06
    9308:	7f 81       	ldd	r23, Y+7	; 0x07
    930a:	88 85       	ldd	r24, Y+8	; 0x08
    930c:	99 85       	ldd	r25, Y+9	; 0x09
    930e:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    9312:	2d c0       	rjmp	.+90     	; 0x936e <recoil_sprite+0x90>
	}
	if (sprite->direction == D_RIGHT)
    9314:	81 30       	cpi	r24, 0x01	; 1
    9316:	a9 f4       	brne	.+42     	; 0x9342 <recoil_sprite+0x64>
	{
		sprite->x -= FRAME_TIME * sprite->speed;
    9318:	69 81       	ldd	r22, Y+1	; 0x01
    931a:	70 e0       	ldi	r23, 0x00	; 0
    931c:	80 e0       	ldi	r24, 0x00	; 0
    931e:	90 e0       	ldi	r25, 0x00	; 0
    9320:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    9324:	25 e6       	ldi	r18, 0x65	; 101
    9326:	38 e8       	ldi	r19, 0x88	; 136
    9328:	48 e8       	ldi	r20, 0x88	; 136
    932a:	5c e3       	ldi	r21, 0x3C	; 60
    932c:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9330:	9b 01       	movw	r18, r22
    9332:	ac 01       	movw	r20, r24
    9334:	6a 81       	ldd	r22, Y+2	; 0x02
    9336:	7b 81       	ldd	r23, Y+3	; 0x03
    9338:	8c 81       	ldd	r24, Y+4	; 0x04
    933a:	9d 81       	ldd	r25, Y+5	; 0x05
    933c:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    9340:	31 c0       	rjmp	.+98     	; 0x93a4 <recoil_sprite+0xc6>
	}
	if (sprite->direction == D_DOWN)
    9342:	82 30       	cpi	r24, 0x02	; 2
    9344:	c9 f4       	brne	.+50     	; 0x9378 <recoil_sprite+0x9a>
	{
		sprite->y -= FRAME_TIME * sprite->speed;
    9346:	69 81       	ldd	r22, Y+1	; 0x01
    9348:	70 e0       	ldi	r23, 0x00	; 0
    934a:	80 e0       	ldi	r24, 0x00	; 0
    934c:	90 e0       	ldi	r25, 0x00	; 0
    934e:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    9352:	25 e6       	ldi	r18, 0x65	; 101
    9354:	38 e8       	ldi	r19, 0x88	; 136
    9356:	48 e8       	ldi	r20, 0x88	; 136
    9358:	5c e3       	ldi	r21, 0x3C	; 60
    935a:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    935e:	9b 01       	movw	r18, r22
    9360:	ac 01       	movw	r20, r24
    9362:	6e 81       	ldd	r22, Y+6	; 0x06
    9364:	7f 81       	ldd	r23, Y+7	; 0x07
    9366:	88 85       	ldd	r24, Y+8	; 0x08
    9368:	99 85       	ldd	r25, Y+9	; 0x09
    936a:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    936e:	6e 83       	std	Y+6, r22	; 0x06
    9370:	7f 83       	std	Y+7, r23	; 0x07
    9372:	88 87       	std	Y+8, r24	; 0x08
    9374:	99 87       	std	Y+9, r25	; 0x09
    9376:	1a c0       	rjmp	.+52     	; 0x93ac <recoil_sprite+0xce>
	}
	if (sprite->direction == D_LEFT)
    9378:	83 30       	cpi	r24, 0x03	; 3
    937a:	c1 f4       	brne	.+48     	; 0x93ac <recoil_sprite+0xce>
	{
		sprite->x += FRAME_TIME * sprite->speed;
    937c:	69 81       	ldd	r22, Y+1	; 0x01
    937e:	70 e0       	ldi	r23, 0x00	; 0
    9380:	80 e0       	ldi	r24, 0x00	; 0
    9382:	90 e0       	ldi	r25, 0x00	; 0
    9384:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    9388:	25 e6       	ldi	r18, 0x65	; 101
    938a:	38 e8       	ldi	r19, 0x88	; 136
    938c:	48 e8       	ldi	r20, 0x88	; 136
    938e:	5c e3       	ldi	r21, 0x3C	; 60
    9390:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9394:	9b 01       	movw	r18, r22
    9396:	ac 01       	movw	r20, r24
    9398:	6a 81       	ldd	r22, Y+2	; 0x02
    939a:	7b 81       	ldd	r23, Y+3	; 0x03
    939c:	8c 81       	ldd	r24, Y+4	; 0x04
    939e:	9d 81       	ldd	r25, Y+5	; 0x05
    93a0:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    93a4:	6a 83       	std	Y+2, r22	; 0x02
    93a6:	7b 83       	std	Y+3, r23	; 0x03
    93a8:	8c 83       	std	Y+4, r24	; 0x04
    93aa:	9d 83       	std	Y+5, r25	; 0x05
	}
}
    93ac:	df 91       	pop	r29
    93ae:	cf 91       	pop	r28
    93b0:	08 95       	ret

000093b2 <solid_square_tile>:

u8 solid_square_tile(int tile_index)
{
	u8 tile = level.level_map[tile_index];
    93b2:	80 56       	subi	r24, 0x60	; 96
    93b4:	95 4f       	sbci	r25, 0xF5	; 245
    93b6:	fc 01       	movw	r30, r24
    93b8:	81 81       	ldd	r24, Z+1	; 0x01
	
	if (tile == L_BRICK) return tile;
    93ba:	81 30       	cpi	r24, 0x01	; 1
    93bc:	21 f0       	breq	.+8      	; 0x93c6 <solid_square_tile+0x14>
	if (tile == L_METAL) return tile;
    93be:	82 30       	cpi	r24, 0x02	; 2
    93c0:	21 f0       	breq	.+8      	; 0x93ca <solid_square_tile+0x18>

	return 0;
    93c2:	80 e0       	ldi	r24, 0x00	; 0
    93c4:	08 95       	ret
    93c6:	81 e0       	ldi	r24, 0x01	; 1
    93c8:	08 95       	ret
    93ca:	82 e0       	ldi	r24, 0x02	; 2
}
    93cc:	08 95       	ret

000093ce <solid_directional_tile>:

u8 solid_directional_tile(int tile_index, u8 x, u8 y, u8 width, u8 height)
{
    93ce:	5f 92       	push	r5
    93d0:	6f 92       	push	r6
    93d2:	7f 92       	push	r7
    93d4:	8f 92       	push	r8
    93d6:	9f 92       	push	r9
    93d8:	af 92       	push	r10
    93da:	bf 92       	push	r11
    93dc:	cf 92       	push	r12
    93de:	df 92       	push	r13
    93e0:	ef 92       	push	r14
    93e2:	ff 92       	push	r15
    93e4:	0f 93       	push	r16
    93e6:	1f 93       	push	r17
    93e8:	cf 93       	push	r28
    93ea:	df 93       	push	r29
    93ec:	f6 2e       	mov	r15, r22
    93ee:	d4 2e       	mov	r13, r20
    93f0:	92 2e       	mov	r9, r18
    93f2:	b0 2e       	mov	r11, r16
	u8 tile = level.level_map[tile_index];
    93f4:	fc 01       	movw	r30, r24
    93f6:	e0 56       	subi	r30, 0x60	; 96
    93f8:	f5 4f       	sbci	r31, 0xF5	; 245
    93fa:	11 81       	ldd	r17, Z+1	; 0x01
	u8 tile_x = (tile_index % 30) * 8;
    93fc:	6e e1       	ldi	r22, 0x1E	; 30
    93fe:	70 e0       	ldi	r23, 0x00	; 0
    9400:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9404:	d8 2f       	mov	r29, r24
    9406:	dd 0f       	add	r29, r29
    9408:	dd 0f       	add	r29, r29
    940a:	dd 0f       	add	r29, r29
	u8 tile_y = (tile_index / 30 + 3) * 8;
    940c:	6d 5f       	subi	r22, 0xFD	; 253
    940e:	7f 4f       	sbci	r23, 0xFF	; 255
    9410:	c6 2f       	mov	r28, r22
    9412:	cc 0f       	add	r28, r28
    9414:	cc 0f       	add	r28, r28
    9416:	cc 0f       	add	r28, r28

	if ((tile == L_TL) || (tile == L_BR))
    9418:	13 30       	cpi	r17, 0x03	; 3
    941a:	11 f0       	breq	.+4      	; 0x9420 <solid_directional_tile+0x52>
    941c:	16 30       	cpi	r17, 0x06	; 6
    941e:	a1 f5       	brne	.+104    	; 0x9488 <solid_directional_tile+0xba>
	{
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x, y+height)) return tile;
    9420:	6d 2c       	mov	r6, r13
    9422:	6b 0c       	add	r6, r11
    9424:	27 e0       	ldi	r18, 0x07	; 7
    9426:	72 2e       	mov	r7, r18
    9428:	7d 0e       	add	r7, r29
    942a:	37 e0       	ldi	r19, 0x07	; 7
    942c:	83 2e       	mov	r8, r19
    942e:	8c 0e       	add	r8, r28
    9430:	a6 2c       	mov	r10, r6
    9432:	cf 2c       	mov	r12, r15
    9434:	ed 2c       	mov	r14, r13
    9436:	0f 2d       	mov	r16, r15
    9438:	2c 2f       	mov	r18, r28
    943a:	47 2d       	mov	r20, r7
    943c:	68 2d       	mov	r22, r8
    943e:	8d 2f       	mov	r24, r29
    9440:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    9444:	81 11       	cpse	r24, r1
    9446:	59 c0       	rjmp	.+178    	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y, x+width, y)) return tile;
    9448:	5f 2c       	mov	r5, r15
    944a:	59 0c       	add	r5, r9
    944c:	ad 2c       	mov	r10, r13
    944e:	c5 2c       	mov	r12, r5
    9450:	2c 2f       	mov	r18, r28
    9452:	47 2d       	mov	r20, r7
    9454:	68 2d       	mov	r22, r8
    9456:	8d 2f       	mov	r24, r29
    9458:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    945c:	81 11       	cpse	r24, r1
    945e:	4d c0       	rjmp	.+154    	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x+width, y, x+width, y+height)) return tile;
    9460:	a6 2c       	mov	r10, r6
    9462:	05 2d       	mov	r16, r5
    9464:	2c 2f       	mov	r18, r28
    9466:	47 2d       	mov	r20, r7
    9468:	68 2d       	mov	r22, r8
    946a:	8d 2f       	mov	r24, r29
    946c:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    9470:	81 11       	cpse	r24, r1
    9472:	43 c0       	rjmp	.+134    	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y+7, tile_x+7, tile_y, x, y+height, x+width, y+height)) return tile;
    9474:	e6 2c       	mov	r14, r6
    9476:	0f 2d       	mov	r16, r15
    9478:	2c 2f       	mov	r18, r28
    947a:	47 2d       	mov	r20, r7
    947c:	68 2d       	mov	r22, r8
    947e:	8d 2f       	mov	r24, r29
    9480:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    9484:	81 11       	cpse	r24, r1
    9486:	39 c0       	rjmp	.+114    	; 0x94fa <solid_directional_tile+0x12c>
	}
	if ((tile == L_TR) || (tile == L_BL))
    9488:	8c ef       	ldi	r24, 0xFC	; 252
    948a:	81 0f       	add	r24, r17
    948c:	82 30       	cpi	r24, 0x02	; 2
    948e:	98 f5       	brcc	.+102    	; 0x94f6 <solid_directional_tile+0x128>
	{
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x, y+height)) return tile;
    9490:	bd 0c       	add	r11, r13
    9492:	87 e0       	ldi	r24, 0x07	; 7
    9494:	78 2e       	mov	r7, r24
    9496:	7c 0e       	add	r7, r28
    9498:	97 e0       	ldi	r25, 0x07	; 7
    949a:	89 2e       	mov	r8, r25
    949c:	8d 0e       	add	r8, r29
    949e:	ab 2c       	mov	r10, r11
    94a0:	cf 2c       	mov	r12, r15
    94a2:	ed 2c       	mov	r14, r13
    94a4:	0f 2d       	mov	r16, r15
    94a6:	27 2d       	mov	r18, r7
    94a8:	48 2d       	mov	r20, r8
    94aa:	6c 2f       	mov	r22, r28
    94ac:	8d 2f       	mov	r24, r29
    94ae:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    94b2:	81 11       	cpse	r24, r1
    94b4:	22 c0       	rjmp	.+68     	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y, x+width, y)) return tile;
    94b6:	9f 0c       	add	r9, r15
    94b8:	ad 2c       	mov	r10, r13
    94ba:	c9 2c       	mov	r12, r9
    94bc:	27 2d       	mov	r18, r7
    94be:	48 2d       	mov	r20, r8
    94c0:	6c 2f       	mov	r22, r28
    94c2:	8d 2f       	mov	r24, r29
    94c4:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    94c8:	81 11       	cpse	r24, r1
    94ca:	17 c0       	rjmp	.+46     	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x+width, y, x+width, y+height)) return tile;
    94cc:	ab 2c       	mov	r10, r11
    94ce:	09 2d       	mov	r16, r9
    94d0:	27 2d       	mov	r18, r7
    94d2:	48 2d       	mov	r20, r8
    94d4:	6c 2f       	mov	r22, r28
    94d6:	8d 2f       	mov	r24, r29
    94d8:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    94dc:	81 11       	cpse	r24, r1
    94de:	0d c0       	rjmp	.+26     	; 0x94fa <solid_directional_tile+0x12c>
		if (LBLineIntersect(tile_x, tile_y, tile_x+7, tile_y+7, x, y+height, x+width, y+height)) return tile;
    94e0:	eb 2c       	mov	r14, r11
    94e2:	0f 2d       	mov	r16, r15
    94e4:	27 2d       	mov	r18, r7
    94e6:	48 2d       	mov	r20, r8
    94e8:	6c 2f       	mov	r22, r28
    94ea:	8d 2f       	mov	r24, r29
    94ec:	0e 94 3a 44 	call	0x8874	; 0x8874 <LBLineIntersect>
    94f0:	81 11       	cpse	r24, r1
    94f2:	03 c0       	rjmp	.+6      	; 0x94fa <solid_directional_tile+0x12c>
    94f4:	03 c0       	rjmp	.+6      	; 0x94fc <solid_directional_tile+0x12e>
	}
	
	return 0;
    94f6:	80 e0       	ldi	r24, 0x00	; 0
    94f8:	01 c0       	rjmp	.+2      	; 0x94fc <solid_directional_tile+0x12e>
    94fa:	81 2f       	mov	r24, r17
}
    94fc:	df 91       	pop	r29
    94fe:	cf 91       	pop	r28
    9500:	1f 91       	pop	r17
    9502:	0f 91       	pop	r16
    9504:	ff 90       	pop	r15
    9506:	ef 90       	pop	r14
    9508:	df 90       	pop	r13
    950a:	cf 90       	pop	r12
    950c:	bf 90       	pop	r11
    950e:	af 90       	pop	r10
    9510:	9f 90       	pop	r9
    9512:	8f 90       	pop	r8
    9514:	7f 90       	pop	r7
    9516:	6f 90       	pop	r6
    9518:	5f 90       	pop	r5
    951a:	08 95       	ret

0000951c <player_shot>:

u8 player_shot(Player* p, Shot* shot)
{
    951c:	af 92       	push	r10
    951e:	cf 92       	push	r12
    9520:	ef 92       	push	r14
    9522:	0f 93       	push	r16
    9524:	1f 93       	push	r17
    9526:	cf 93       	push	r28
    9528:	df 93       	push	r29
    952a:	ec 01       	movw	r28, r24
    952c:	8b 01       	movw	r16, r22
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
    952e:	fb 01       	movw	r30, r22
    9530:	66 81       	ldd	r22, Z+6	; 0x06
    9532:	77 81       	ldd	r23, Z+7	; 0x07
    9534:	80 85       	ldd	r24, Z+8	; 0x08
    9536:	91 85       	ldd	r25, Z+9	; 0x09
    9538:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    953c:	e6 2e       	mov	r14, r22
    953e:	f8 01       	movw	r30, r16
    9540:	62 81       	ldd	r22, Z+2	; 0x02
    9542:	73 81       	ldd	r23, Z+3	; 0x03
    9544:	84 81       	ldd	r24, Z+4	; 0x04
    9546:	95 81       	ldd	r25, Z+5	; 0x05
    9548:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    954c:	06 2f       	mov	r16, r22
    954e:	6e 81       	ldd	r22, Y+6	; 0x06
    9550:	7f 81       	ldd	r23, Y+7	; 0x07
    9552:	88 85       	ldd	r24, Y+8	; 0x08
    9554:	99 85       	ldd	r25, Y+9	; 0x09
    9556:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    955a:	16 2f       	mov	r17, r22
    955c:	6a 81       	ldd	r22, Y+2	; 0x02
    955e:	7b 81       	ldd	r23, Y+3	; 0x03
    9560:	8c 81       	ldd	r24, Y+4	; 0x04
    9562:	9d 81       	ldd	r25, Y+5	; 0x05
    9564:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9568:	86 2f       	mov	r24, r22
    956a:	97 e0       	ldi	r25, 0x07	; 7
    956c:	a9 2e       	mov	r10, r25
    956e:	27 e0       	ldi	r18, 0x07	; 7
    9570:	c2 2e       	mov	r12, r18
    9572:	2e e0       	ldi	r18, 0x0E	; 14
    9574:	4e e0       	ldi	r20, 0x0E	; 14
    9576:	61 2f       	mov	r22, r17
    9578:	0e 94 10 44 	call	0x8820	; 0x8820 <LBCollides>
    957c:	88 23       	and	r24, r24
    957e:	39 f0       	breq	.+14     	; 0x958e <player_shot+0x72>
    9580:	91 e0       	ldi	r25, 0x01	; 1
    9582:	8e 89       	ldd	r24, Y+22	; 0x16
    9584:	88 37       	cpi	r24, 0x78	; 120
    9586:	09 f0       	breq	.+2      	; 0x958a <player_shot+0x6e>
    9588:	90 e0       	ldi	r25, 0x00	; 0
    958a:	89 2f       	mov	r24, r25
    958c:	01 c0       	rjmp	.+2      	; 0x9590 <player_shot+0x74>
    958e:	80 e0       	ldi	r24, 0x00	; 0
}
    9590:	df 91       	pop	r29
    9592:	cf 91       	pop	r28
    9594:	1f 91       	pop	r17
    9596:	0f 91       	pop	r16
    9598:	ef 90       	pop	r14
    959a:	cf 90       	pop	r12
    959c:	af 90       	pop	r10
    959e:	08 95       	ret

000095a0 <collision_detect_boundries>:

u8 collision_detect_boundries(SpriteShared* sprite)
{
    95a0:	cf 92       	push	r12
    95a2:	df 92       	push	r13
    95a4:	ef 92       	push	r14
    95a6:	ff 92       	push	r15
    95a8:	cf 93       	push	r28
    95aa:	df 93       	push	r29
    95ac:	ec 01       	movw	r28, r24
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    95ae:	ca 80       	ldd	r12, Y+2	; 0x02
    95b0:	db 80       	ldd	r13, Y+3	; 0x03
    95b2:	ec 80       	ldd	r14, Y+4	; 0x04
    95b4:	fd 80       	ldd	r15, Y+5	; 0x05
    95b6:	20 e0       	ldi	r18, 0x00	; 0
    95b8:	30 e0       	ldi	r19, 0x00	; 0
    95ba:	a9 01       	movw	r20, r18
    95bc:	c7 01       	movw	r24, r14
    95be:	b6 01       	movw	r22, r12
    95c0:	0e 94 3c 56 	call	0xac78	; 0xac78 <__cmpsf2>
    95c4:	87 fd       	sbrc	r24, 7
    95c6:	31 c0       	rjmp	.+98     	; 0x962a <collision_detect_boundries+0x8a>
    95c8:	20 e0       	ldi	r18, 0x00	; 0
    95ca:	30 e0       	ldi	r19, 0x00	; 0
    95cc:	40 ee       	ldi	r20, 0xE0	; 224
    95ce:	50 e4       	ldi	r21, 0x40	; 64
    95d0:	c7 01       	movw	r24, r14
    95d2:	b6 01       	movw	r22, r12
    95d4:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    95d8:	20 e0       	ldi	r18, 0x00	; 0
    95da:	30 e0       	ldi	r19, 0x00	; 0
    95dc:	40 e7       	ldi	r20, 0x70	; 112
    95de:	53 e4       	ldi	r21, 0x43	; 67
    95e0:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <__gesf2>
    95e4:	18 16       	cp	r1, r24
    95e6:	0c f1       	brlt	.+66     	; 0x962a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    95e8:	ce 80       	ldd	r12, Y+6	; 0x06
    95ea:	df 80       	ldd	r13, Y+7	; 0x07
    95ec:	e8 84       	ldd	r14, Y+8	; 0x08
    95ee:	f9 84       	ldd	r15, Y+9	; 0x09
	return LBCollides(p->shared.x, p->shared.y, 14, 14, shot->shared.x, shot->shared.y, 7, 7) && p->grace_frame == FRAMES_PER_GRACE;
}

u8 collision_detect_boundries(SpriteShared* sprite)
{
	if (sprite->x < 0  || sprite->x + 7 > 240 ||
    95f0:	20 e0       	ldi	r18, 0x00	; 0
    95f2:	30 e0       	ldi	r19, 0x00	; 0
    95f4:	40 ec       	ldi	r20, 0xC0	; 192
    95f6:	51 e4       	ldi	r21, 0x41	; 65
    95f8:	c7 01       	movw	r24, r14
    95fa:	b6 01       	movw	r22, r12
    95fc:	0e 94 3c 56 	call	0xac78	; 0xac78 <__cmpsf2>
    9600:	87 fd       	sbrc	r24, 7
    9602:	13 c0       	rjmp	.+38     	; 0x962a <collision_detect_boundries+0x8a>
	    sprite->y < 24 || sprite->y + 7 > 224)
    9604:	20 e0       	ldi	r18, 0x00	; 0
    9606:	30 e0       	ldi	r19, 0x00	; 0
    9608:	40 ee       	ldi	r20, 0xE0	; 224
    960a:	50 e4       	ldi	r21, 0x40	; 64
    960c:	c7 01       	movw	r24, r14
    960e:	b6 01       	movw	r22, r12
    9610:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    9614:	c1 e0       	ldi	r28, 0x01	; 1
    9616:	20 e0       	ldi	r18, 0x00	; 0
    9618:	30 e0       	ldi	r19, 0x00	; 0
    961a:	40 e6       	ldi	r20, 0x60	; 96
    961c:	53 e4       	ldi	r21, 0x43	; 67
    961e:	0e 94 86 57 	call	0xaf0c	; 0xaf0c <__gesf2>
    9622:	18 16       	cp	r1, r24
    9624:	1c f0       	brlt	.+6      	; 0x962c <collision_detect_boundries+0x8c>
    9626:	c0 e0       	ldi	r28, 0x00	; 0
    9628:	01 c0       	rjmp	.+2      	; 0x962c <collision_detect_boundries+0x8c>
	{
		return 1;
    962a:	c1 e0       	ldi	r28, 0x01	; 1
	}
	return 0;
}
    962c:	8c 2f       	mov	r24, r28
    962e:	df 91       	pop	r29
    9630:	cf 91       	pop	r28
    9632:	ff 90       	pop	r15
    9634:	ef 90       	pop	r14
    9636:	df 90       	pop	r13
    9638:	cf 90       	pop	r12
    963a:	08 95       	ret

0000963c <kill_player>:

void kill_player(Player* player, u8 hud_x)
{
    963c:	ff 92       	push	r15
    963e:	0f 93       	push	r16
    9640:	1f 93       	push	r17
    9642:	cf 93       	push	r28
    9644:	df 93       	push	r29
    9646:	8c 01       	movw	r16, r24
    9648:	f6 2e       	mov	r15, r22
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    964a:	20 e0       	ldi	r18, 0x00	; 0
    964c:	30 e0       	ldi	r19, 0x00	; 0
    964e:	40 e0       	ldi	r20, 0x00	; 0
    9650:	5e e3       	ldi	r21, 0x3E	; 62
    9652:	fc 01       	movw	r30, r24
    9654:	66 81       	ldd	r22, Z+6	; 0x06
    9656:	77 81       	ldd	r23, Z+7	; 0x07
    9658:	80 85       	ldd	r24, Z+8	; 0x08
    965a:	91 85       	ldd	r25, Z+9	; 0x09
    965c:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9660:	20 e0       	ldi	r18, 0x00	; 0
    9662:	30 e0       	ldi	r19, 0x00	; 0
    9664:	40 e4       	ldi	r20, 0x40	; 64
    9666:	50 e4       	ldi	r21, 0x40	; 64
    9668:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    966c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
	int tile_index = (y * 30) + x;
    9670:	fe e1       	ldi	r31, 0x1E	; 30
    9672:	6f 9f       	mul	r22, r31
    9674:	e0 01       	movw	r28, r0
    9676:	11 24       	eor	r1, r1
	return 0;
}

void kill_player(Player* player, u8 hud_x)
{
	u8 x = player->shared.x / 8;
    9678:	20 e0       	ldi	r18, 0x00	; 0
    967a:	30 e0       	ldi	r19, 0x00	; 0
    967c:	40 e0       	ldi	r20, 0x00	; 0
    967e:	5e e3       	ldi	r21, 0x3E	; 62
    9680:	f8 01       	movw	r30, r16
    9682:	62 81       	ldd	r22, Z+2	; 0x02
    9684:	73 81       	ldd	r23, Z+3	; 0x03
    9686:	84 81       	ldd	r24, Z+4	; 0x04
    9688:	95 81       	ldd	r25, Z+5	; 0x05
    968a:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    968e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;
	int tile_index = (y * 30) + x;
    9692:	c6 0f       	add	r28, r22
    9694:	d1 1d       	adc	r29, r1

	if (player->has_over_speed)
    9696:	f8 01       	movw	r30, r16
    9698:	81 8d       	ldd	r24, Z+25	; 0x19
    969a:	88 23       	and	r24, r24
    969c:	c9 f0       	breq	.+50     	; 0x96d0 <kill_player+0x94>
	{
		SetTile(hud_x+10, 1, 0);
    969e:	40 e0       	ldi	r20, 0x00	; 0
    96a0:	50 e0       	ldi	r21, 0x00	; 0
    96a2:	61 e0       	ldi	r22, 0x01	; 1
    96a4:	8a e0       	ldi	r24, 0x0A	; 10
    96a6:	8f 0d       	add	r24, r15
    96a8:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
		DrawMap2(tile_index % 30, 3 + tile_index / 30 + 1, map_speed_itm);
    96ac:	ce 01       	movw	r24, r28
    96ae:	6e e1       	ldi	r22, 0x1E	; 30
    96b0:	70 e0       	ldi	r23, 0x00	; 0
    96b2:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    96b6:	6c 5f       	subi	r22, 0xFC	; 252
    96b8:	4f ef       	ldi	r20, 0xFF	; 255
    96ba:	51 e3       	ldi	r21, 0x31	; 49
    96bc:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
		level.level_map[tile_index +30] = L_SPEED;
    96c0:	87 e0       	ldi	r24, 0x07	; 7
    96c2:	fe 01       	movw	r30, r28
    96c4:	e0 56       	subi	r30, 0x60	; 96
    96c6:	f5 4f       	sbci	r31, 0xF5	; 245
    96c8:	87 8f       	std	Z+31, r24	; 0x1f
		player->max_speed = MAX_SPEED;
    96ca:	82 e3       	ldi	r24, 0x32	; 50
    96cc:	f8 01       	movw	r30, r16
    96ce:	87 8b       	std	Z+23, r24	; 0x17
	}
	if (player->has_rocket)
    96d0:	f8 01       	movw	r30, r16
    96d2:	80 8d       	ldd	r24, Z+24	; 0x18
    96d4:	88 23       	and	r24, r24
    96d6:	b1 f0       	breq	.+44     	; 0x9704 <kill_player+0xc8>
	{
		SetTile(hud_x+11, 1, 0);
    96d8:	40 e0       	ldi	r20, 0x00	; 0
    96da:	50 e0       	ldi	r21, 0x00	; 0
    96dc:	61 e0       	ldi	r22, 0x01	; 1
    96de:	8b e0       	ldi	r24, 0x0B	; 11
    96e0:	8f 0d       	add	r24, r15
    96e2:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
		DrawMap2(tile_index % 30 + 1, 3 + tile_index / 30 + 1, map_rocket_itm);
    96e6:	ce 01       	movw	r24, r28
    96e8:	6e e1       	ldi	r22, 0x1E	; 30
    96ea:	70 e0       	ldi	r23, 0x00	; 0
    96ec:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    96f0:	6c 5f       	subi	r22, 0xFC	; 252
    96f2:	49 ef       	ldi	r20, 0xF9	; 249
    96f4:	51 e3       	ldi	r21, 0x31	; 49
    96f6:	8f 5f       	subi	r24, 0xFF	; 255
    96f8:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
		level.level_map[tile_index +31] = L_ROCKET;
    96fc:	c0 56       	subi	r28, 0x60	; 96
    96fe:	d5 4f       	sbci	r29, 0xF5	; 245
    9700:	89 e0       	ldi	r24, 0x09	; 9
    9702:	88 a3       	std	Y+32, r24	; 0x20
	}
	player->has_over_speed = false;
    9704:	f8 01       	movw	r30, r16
    9706:	11 8e       	std	Z+25, r1	; 0x19
	player->has_rocket = false;
    9708:	10 8e       	std	Z+24, r1	; 0x18
	player->flags = player->flags | EXPLODING_FLAG;
    970a:	83 89       	ldd	r24, Z+19	; 0x13
    970c:	81 60       	ori	r24, 0x01	; 1
    970e:	83 8b       	std	Z+19, r24	; 0x13
}
    9710:	df 91       	pop	r29
    9712:	cf 91       	pop	r28
    9714:	1f 91       	pop	r17
    9716:	0f 91       	pop	r16
    9718:	ff 90       	pop	r15
    971a:	08 95       	ret

0000971c <get_interesting_tile_indexes_shot>:

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
    971c:	fc 01       	movw	r30, r24
    971e:	8e e1       	ldi	r24, 0x1E	; 30
    9720:	48 9f       	mul	r20, r24
    9722:	a0 01       	movw	r20, r0
    9724:	11 24       	eor	r1, r1
    9726:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9728:	64 0f       	add	r22, r20
    972a:	75 1f       	adc	r23, r21
	player->flags = player->flags | EXPLODING_FLAG;
}

void get_interesting_tile_indexes_shot(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    972c:	21 11       	cpse	r18, r1
    972e:	05 c0       	rjmp	.+10     	; 0x973a <get_interesting_tile_indexes_shot+0x1e>
	{
		tiles[0] = (y * 30) + x;
    9730:	71 83       	std	Z+1, r23	; 0x01
    9732:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9734:	6f 5f       	subi	r22, 0xFF	; 255
    9736:	7f 4f       	sbci	r23, 0xFF	; 255
    9738:	12 c0       	rjmp	.+36     	; 0x975e <get_interesting_tile_indexes_shot+0x42>
	}
	else if (direction == D_RIGHT)
    973a:	21 30       	cpi	r18, 0x01	; 1
    973c:	19 f4       	brne	.+6      	; 0x9744 <get_interesting_tile_indexes_shot+0x28>
	{
		tiles[0] = (y * 30) + x + 1;
    973e:	cb 01       	movw	r24, r22
    9740:	01 96       	adiw	r24, 0x01	; 1
    9742:	04 c0       	rjmp	.+8      	; 0x974c <get_interesting_tile_indexes_shot+0x30>
		tiles[1] = tiles[0]+30;
	}
	else if (direction == D_DOWN)
    9744:	22 30       	cpi	r18, 0x02	; 2
    9746:	39 f4       	brne	.+14     	; 0x9756 <get_interesting_tile_indexes_shot+0x3a>
	{
		tiles[0] = (y * 30) + x + 30;
    9748:	cb 01       	movw	r24, r22
    974a:	4e 96       	adiw	r24, 0x1e	; 30
    974c:	91 83       	std	Z+1, r25	; 0x01
    974e:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9750:	61 5e       	subi	r22, 0xE1	; 225
    9752:	7f 4f       	sbci	r23, 0xFF	; 255
    9754:	04 c0       	rjmp	.+8      	; 0x975e <get_interesting_tile_indexes_shot+0x42>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9756:	71 83       	std	Z+1, r23	; 0x01
    9758:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    975a:	62 5e       	subi	r22, 0xE2	; 226
    975c:	7f 4f       	sbci	r23, 0xFF	; 255
    975e:	73 83       	std	Z+3, r23	; 0x03
    9760:	62 83       	std	Z+2, r22	; 0x02
    9762:	08 95       	ret

00009764 <explode_tile>:
	}
}

void explode_tile(TileAnimations* ta, int tile_index)
{
    9764:	ef 92       	push	r14
    9766:	ff 92       	push	r15
    9768:	0f 93       	push	r16
    976a:	1f 93       	push	r17
    976c:	cf 93       	push	r28
    976e:	df 93       	push	r29
    9770:	ec 01       	movw	r28, r24
    9772:	8b 01       	movw	r16, r22
	SetTile(tile_index % 30, 3 + tile_index / 30, 0);
    9774:	8e e1       	ldi	r24, 0x1E	; 30
    9776:	e8 2e       	mov	r14, r24
    9778:	f1 2c       	mov	r15, r1
    977a:	cb 01       	movw	r24, r22
    977c:	b7 01       	movw	r22, r14
    977e:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9782:	6d 5f       	subi	r22, 0xFD	; 253
    9784:	40 e0       	ldi	r20, 0x00	; 0
    9786:	50 e0       	ldi	r21, 0x00	; 0
    9788:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
	if (ta->anims[ta->next_available].tile_index != 0)
    978c:	88 81       	ld	r24, Y
    978e:	fe 01       	movw	r30, r28
    9790:	9c e0       	ldi	r25, 0x0C	; 12
    9792:	89 9f       	mul	r24, r25
    9794:	e0 0d       	add	r30, r0
    9796:	f1 1d       	adc	r31, r1
    9798:	11 24       	eor	r1, r1
    979a:	83 85       	ldd	r24, Z+11	; 0x0b
    979c:	94 85       	ldd	r25, Z+12	; 0x0c
    979e:	00 97       	sbiw	r24, 0x00	; 0
    97a0:	41 f0       	breq	.+16     	; 0x97b2 <explode_tile+0x4e>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
    97a2:	b7 01       	movw	r22, r14
    97a4:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    97a8:	6d 5f       	subi	r22, 0xFD	; 253
    97aa:	40 e0       	ldi	r20, 0x00	; 0
    97ac:	50 e0       	ldi	r21, 0x00	; 0
    97ae:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
	}
	ta->anims[ta->next_available].tile_index = tile_index;
    97b2:	88 81       	ld	r24, Y
    97b4:	fe 01       	movw	r30, r28
    97b6:	9c e0       	ldi	r25, 0x0C	; 12
    97b8:	89 9f       	mul	r24, r25
    97ba:	e0 0d       	add	r30, r0
    97bc:	f1 1d       	adc	r31, r1
    97be:	11 24       	eor	r1, r1
    97c0:	14 87       	std	Z+12, r17	; 0x0c
    97c2:	03 87       	std	Z+11, r16	; 0x0b
	ta->anims[ta->next_available].anim.current_anim = 0;
    97c4:	11 82       	std	Z+1, r1	; 0x01
	ta->next_available++;
    97c6:	8f 5f       	subi	r24, 0xFF	; 255
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
    97c8:	82 30       	cpi	r24, 0x02	; 2
    97ca:	11 f0       	breq	.+4      	; 0x97d0 <explode_tile+0x6c>
	{
		SetTile(ta->anims[ta->next_available].tile_index % 30, 3 + ta->anims[ta->next_available].tile_index / 30, 0);
	}
	ta->anims[ta->next_available].tile_index = tile_index;
	ta->anims[ta->next_available].anim.current_anim = 0;
	ta->next_available++;
    97cc:	88 83       	st	Y, r24
    97ce:	01 c0       	rjmp	.+2      	; 0x97d2 <explode_tile+0x6e>
	if (ta->next_available == TILE_ANIMATIONS_LENGTH)
	{
		ta->next_available = 0;
    97d0:	18 82       	st	Y, r1
	}
}
    97d2:	df 91       	pop	r29
    97d4:	cf 91       	pop	r28
    97d6:	1f 91       	pop	r17
    97d8:	0f 91       	pop	r16
    97da:	ff 90       	pop	r15
    97dc:	ef 90       	pop	r14
    97de:	08 95       	ret

000097e0 <collision_detect_shot>:

void collision_detect_shot(Player* player, Shot* shot)
{	 
    97e0:	6f 92       	push	r6
    97e2:	7f 92       	push	r7
    97e4:	8f 92       	push	r8
    97e6:	9f 92       	push	r9
    97e8:	af 92       	push	r10
    97ea:	bf 92       	push	r11
    97ec:	cf 92       	push	r12
    97ee:	df 92       	push	r13
    97f0:	ef 92       	push	r14
    97f2:	ff 92       	push	r15
    97f4:	0f 93       	push	r16
    97f6:	1f 93       	push	r17
    97f8:	cf 93       	push	r28
    97fa:	df 93       	push	r29
    97fc:	00 d0       	rcall	.+0      	; 0x97fe <collision_detect_shot+0x1e>
    97fe:	00 d0       	rcall	.+0      	; 0x9800 <collision_detect_shot+0x20>
    9800:	1f 92       	push	r1
    9802:	cd b7       	in	r28, 0x3d	; 61
    9804:	de b7       	in	r29, 0x3e	; 62
    9806:	6c 01       	movw	r12, r24
    9808:	7b 01       	movw	r14, r22
	int tiles[2] = {0, 0};
    980a:	1a 82       	std	Y+2, r1	; 0x02
    980c:	19 82       	std	Y+1, r1	; 0x01
    980e:	1c 82       	std	Y+4, r1	; 0x04
    9810:	1b 82       	std	Y+3, r1	; 0x03
	u8 x = shot->shared.x / 8;
	u8 y = shot->shared.y / 8 - 3;
    9812:	20 e0       	ldi	r18, 0x00	; 0
    9814:	30 e0       	ldi	r19, 0x00	; 0
    9816:	40 e0       	ldi	r20, 0x00	; 0
    9818:	5e e3       	ldi	r21, 0x3E	; 62
    981a:	fb 01       	movw	r30, r22
    981c:	66 81       	ldd	r22, Z+6	; 0x06
    981e:	77 81       	ldd	r23, Z+7	; 0x07
    9820:	80 85       	ldd	r24, Z+8	; 0x08
    9822:	91 85       	ldd	r25, Z+9	; 0x09
    9824:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9828:	20 e0       	ldi	r18, 0x00	; 0
    982a:	30 e0       	ldi	r19, 0x00	; 0
    982c:	40 e4       	ldi	r20, 0x40	; 64
    982e:	50 e4       	ldi	r21, 0x40	; 64
    9830:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    9834:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9838:	16 2f       	mov	r17, r22
}

void collision_detect_shot(Player* player, Shot* shot)
{	 
	int tiles[2] = {0, 0};
	u8 x = shot->shared.x / 8;
    983a:	20 e0       	ldi	r18, 0x00	; 0
    983c:	30 e0       	ldi	r19, 0x00	; 0
    983e:	40 e0       	ldi	r20, 0x00	; 0
    9840:	5e e3       	ldi	r21, 0x3E	; 62
    9842:	f7 01       	movw	r30, r14
    9844:	62 81       	ldd	r22, Z+2	; 0x02
    9846:	73 81       	ldd	r23, Z+3	; 0x03
    9848:	84 81       	ldd	r24, Z+4	; 0x04
    984a:	95 81       	ldd	r25, Z+5	; 0x05
    984c:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9850:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
	u8 y = shot->shared.y / 8 - 3;
	u8 tile;
	u8 hud_x;
	Player* p = 0;
	
	get_interesting_tile_indexes_shot(tiles, x, y, shot->shared.direction);
    9854:	f7 01       	movw	r30, r14
    9856:	20 81       	ld	r18, Z
    9858:	41 2f       	mov	r20, r17
    985a:	ce 01       	movw	r24, r28
    985c:	01 96       	adiw	r24, 0x01	; 1
    985e:	0e 94 8e 4b 	call	0x971c	; 0x971c <get_interesting_tile_indexes_shot>
	
	/* Level boundries first */
	if (collision_detect_boundries(&shot->shared))
    9862:	c7 01       	movw	r24, r14
    9864:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <collision_detect_boundries>
    9868:	81 11       	cpse	r24, r1
    986a:	79 c0       	rjmp	.+242    	; 0x995e <collision_detect_shot+0x17e>
		player->active_shots--;
		return;
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
    986c:	b7 01       	movw	r22, r14
    986e:	8e e1       	ldi	r24, 0x1E	; 30
    9870:	9a e0       	ldi	r25, 0x0A	; 10
    9872:	0e 94 8e 4a 	call	0x951c	; 0x951c <player_shot>
    9876:	88 23       	and	r24, r24
    9878:	99 f0       	breq	.+38     	; 0x98a0 <collision_detect_shot+0xc0>
	{
		p = &player1;
		hud_x = 0;
		player2.level_score++;
    987a:	80 91 9e 0d 	lds	r24, 0x0D9E
    987e:	8f 5f       	subi	r24, 0xFF	; 255
    9880:	80 93 9e 0d 	sts	0x0D9E, r24
		player2.score++;
    9884:	80 91 9d 0d 	lds	r24, 0x0D9D
    9888:	8f 5f       	subi	r24, 0xFF	; 255
    988a:	80 93 9d 0d 	sts	0x0D9D, r24
		render_score(&player2, 15);
    988e:	6f e0       	ldi	r22, 0x0F	; 15
    9890:	8f e8       	ldi	r24, 0x8F	; 143
    9892:	9d e0       	ldi	r25, 0x0D	; 13
    9894:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <render_score>
	}
	
	/* Player interaction */
	if (player_shot(&player1, shot))
	{
		p = &player1;
    9898:	0e e1       	ldi	r16, 0x1E	; 30
    989a:	1a e0       	ldi	r17, 0x0A	; 10
		hud_x = 0;
    989c:	b1 2c       	mov	r11, r1
    989e:	20 c0       	rjmp	.+64     	; 0x98e0 <collision_detect_shot+0x100>
		player2.level_score++;
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
    98a0:	b7 01       	movw	r22, r14
    98a2:	8f e8       	ldi	r24, 0x8F	; 143
    98a4:	9d e0       	ldi	r25, 0x0D	; 13
    98a6:	0e 94 8e 4a 	call	0x951c	; 0x951c <player_shot>
    98aa:	81 11       	cpse	r24, r1
    98ac:	06 c0       	rjmp	.+12     	; 0x98ba <collision_detect_shot+0xda>
    98ae:	ce 01       	movw	r24, r28
    98b0:	01 96       	adiw	r24, 0x01	; 1
    98b2:	3c 01       	movw	r6, r24
    98b4:	a1 2c       	mov	r10, r1
    98b6:	b1 2c       	mov	r11, r1
    98b8:	43 c0       	rjmp	.+134    	; 0x9940 <collision_detect_shot+0x160>
	{
		p = &player2;
		hud_x = 15;
		player1.level_score++;
    98ba:	80 91 2d 0a 	lds	r24, 0x0A2D
    98be:	8f 5f       	subi	r24, 0xFF	; 255
    98c0:	80 93 2d 0a 	sts	0x0A2D, r24
		player1.score++;
    98c4:	80 91 2c 0a 	lds	r24, 0x0A2C
    98c8:	8f 5f       	subi	r24, 0xFF	; 255
    98ca:	80 93 2c 0a 	sts	0x0A2C, r24
		render_score(&player1, 0);
    98ce:	60 e0       	ldi	r22, 0x00	; 0
    98d0:	8e e1       	ldi	r24, 0x1E	; 30
    98d2:	9a e0       	ldi	r25, 0x0A	; 10
    98d4:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <render_score>
		player2.score++;
		render_score(&player2, 15);
	}
	else if (player_shot(&player2, shot))
	{
		p = &player2;
    98d8:	0f e8       	ldi	r16, 0x8F	; 143
    98da:	1d e0       	ldi	r17, 0x0D	; 13
		hud_x = 15;
    98dc:	2f e0       	ldi	r18, 0x0F	; 15
    98de:	b2 2e       	mov	r11, r18
		player1.level_score++;
		player1.score++;
		render_score(&player1, 0);
	}
	if (p)
    98e0:	01 15       	cp	r16, r1
    98e2:	11 05       	cpc	r17, r1
    98e4:	21 f3       	breq	.-56     	; 0x98ae <collision_detect_shot+0xce>
	{
		init_shot_state(shot, shot->shot_type);
    98e6:	f7 01       	movw	r30, r14
    98e8:	62 85       	ldd	r22, Z+10	; 0x0a
    98ea:	c7 01       	movw	r24, r14
    98ec:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
		player->active_shots--;
    98f0:	f6 01       	movw	r30, r12
    98f2:	80 89       	ldd	r24, Z+16	; 0x10
    98f4:	81 50       	subi	r24, 0x01	; 1
    98f6:	80 8b       	std	Z+16, r24	; 0x10
		kill_player(p, hud_x);
    98f8:	6b 2d       	mov	r22, r11
    98fa:	c8 01       	movw	r24, r16
    98fc:	0e 94 1e 4b 	call	0x963c	; 0x963c <kill_player>
		return;
    9900:	83 c0       	rjmp	.+262    	; 0x9a08 <collision_detect_shot+0x228>
				init_shot_state(shot, shot->shot_type);
				player->active_shots--;
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
    9902:	f7 01       	movw	r30, r14
    9904:	66 81       	ldd	r22, Z+6	; 0x06
    9906:	77 81       	ldd	r23, Z+7	; 0x07
    9908:	80 85       	ldd	r24, Z+8	; 0x08
    990a:	91 85       	ldd	r25, Z+9	; 0x09
    990c:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9910:	46 2f       	mov	r20, r22
    9912:	f7 01       	movw	r30, r14
    9914:	62 81       	ldd	r22, Z+2	; 0x02
    9916:	73 81       	ldd	r23, Z+3	; 0x03
    9918:	84 81       	ldd	r24, Z+4	; 0x04
    991a:	95 81       	ldd	r25, Z+5	; 0x05
    991c:	4d 83       	std	Y+5, r20	; 0x05
    991e:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9922:	07 e0       	ldi	r16, 0x07	; 7
    9924:	27 e0       	ldi	r18, 0x07	; 7
    9926:	4d 81       	ldd	r20, Y+5	; 0x05
    9928:	c4 01       	movw	r24, r8
    992a:	0e 94 e7 49 	call	0x93ce	; 0x93ce <solid_directional_tile>
    992e:	81 11       	cpse	r24, r1
    9930:	35 c0       	rjmp	.+106    	; 0x999c <collision_detect_shot+0x1bc>
		kill_player(p, hud_x);
		return;
	}
	
	/* Tile interaction */
	for (u8 i = 0; i < 2; i++)
    9932:	aa 94       	dec	r10
    9934:	ab 28       	or	r10, r11
    9936:	09 f4       	brne	.+2      	; 0x993a <collision_detect_shot+0x15a>
    9938:	67 c0       	rjmp	.+206    	; 0x9a08 <collision_detect_shot+0x228>
    993a:	aa 24       	eor	r10, r10
    993c:	a3 94       	inc	r10
    993e:	b1 2c       	mov	r11, r1
	{
		tile = level.level_map[tiles[i]];
    9940:	f3 01       	movw	r30, r6
    9942:	81 90       	ld	r8, Z+
    9944:	91 90       	ld	r9, Z+
    9946:	3f 01       	movw	r6, r30
    9948:	f4 01       	movw	r30, r8
    994a:	e0 56       	subi	r30, 0x60	; 96
    994c:	f5 4f       	sbci	r31, 0xF5	; 245
    994e:	11 81       	ldd	r17, Z+1	; 0x01
		if (tile == L_EMPTY) continue;
    9950:	11 23       	and	r17, r17
    9952:	79 f3       	breq	.-34     	; 0x9932 <collision_detect_shot+0x152>
		if (tile == L_METAL)
    9954:	12 30       	cpi	r17, 0x02	; 2
    9956:	29 f4       	brne	.+10     	; 0x9962 <collision_detect_shot+0x182>
		{
			recoil_sprite(&shot->shared);
    9958:	c7 01       	movw	r24, r14
    995a:	0e 94 6f 49 	call	0x92de	; 0x92de <recoil_sprite>
			init_shot_state(shot, shot->shot_type);
    995e:	f7 01       	movw	r30, r14
    9960:	4b c0       	rjmp	.+150    	; 0x99f8 <collision_detect_shot+0x218>
			player->active_shots--;
			break;
		}
		else if (tile == L_BRICK)
    9962:	11 30       	cpi	r17, 0x01	; 1
    9964:	71 f6       	brne	.-100    	; 0x9902 <collision_detect_shot+0x122>
		{
			explode_tile(&tile_animations, tiles[i]);
    9966:	b4 01       	movw	r22, r8
    9968:	85 e0       	ldi	r24, 0x05	; 5
    996a:	9a e0       	ldi	r25, 0x0A	; 10
    996c:	0e 94 b2 4b 	call	0x9764	; 0x9764 <explode_tile>
			recoil_sprite(&shot->shared);
    9970:	c7 01       	movw	r24, r14
    9972:	0e 94 6f 49 	call	0x92de	; 0x92de <recoil_sprite>
			level.level_map[tiles[i]] = L_EMPTY;
    9976:	aa 0c       	add	r10, r10
    9978:	bb 1c       	adc	r11, r11
    997a:	e1 e0       	ldi	r30, 0x01	; 1
    997c:	f0 e0       	ldi	r31, 0x00	; 0
    997e:	ec 0f       	add	r30, r28
    9980:	fd 1f       	adc	r31, r29
    9982:	ea 0d       	add	r30, r10
    9984:	fb 1d       	adc	r31, r11
    9986:	01 90       	ld	r0, Z+
    9988:	f0 81       	ld	r31, Z
    998a:	e0 2d       	mov	r30, r0
    998c:	e0 56       	subi	r30, 0x60	; 96
    998e:	f5 4f       	sbci	r31, 0xF5	; 245
    9990:	11 82       	std	Z+1, r1	; 0x01
			shot->hit_count--;
    9992:	f7 01       	movw	r30, r14
    9994:	83 85       	ldd	r24, Z+11	; 0x0b
    9996:	81 50       	subi	r24, 0x01	; 1
    9998:	83 87       	std	Z+11, r24	; 0x0b
    999a:	2c c0       	rjmp	.+88     	; 0x99f4 <collision_detect_shot+0x214>
			}
			break;
		}
		else if (solid_directional_tile(tiles[i], shot->shared.x, shot->shared.y, 7, 7))
		{
			recoil_sprite(&shot->shared);
    999c:	c7 01       	movw	r24, r14
    999e:	0e 94 6f 49 	call	0x92de	; 0x92de <recoil_sprite>
			switch (tile)
    99a2:	14 30       	cpi	r17, 0x04	; 4
    99a4:	79 f0       	breq	.+30     	; 0x99c4 <collision_detect_shot+0x1e4>
    99a6:	18 f4       	brcc	.+6      	; 0x99ae <collision_detect_shot+0x1ce>
    99a8:	13 30       	cpi	r17, 0x03	; 3
    99aa:	31 f0       	breq	.+12     	; 0x99b8 <collision_detect_shot+0x1d8>
    99ac:	1f c0       	rjmp	.+62     	; 0x99ec <collision_detect_shot+0x20c>
    99ae:	15 30       	cpi	r17, 0x05	; 5
    99b0:	b9 f0       	breq	.+46     	; 0x99e0 <collision_detect_shot+0x200>
    99b2:	16 30       	cpi	r17, 0x06	; 6
    99b4:	79 f0       	breq	.+30     	; 0x99d4 <collision_detect_shot+0x1f4>
    99b6:	1a c0       	rjmp	.+52     	; 0x99ec <collision_detect_shot+0x20c>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
    99b8:	f7 01       	movw	r30, r14
    99ba:	80 81       	ld	r24, Z
    99bc:	81 11       	cpse	r24, r1
    99be:	06 c0       	rjmp	.+12     	; 0x99cc <collision_detect_shot+0x1ec>
						shot->shared.direction = D_RIGHT;
    99c0:	81 e0       	ldi	r24, 0x01	; 1
    99c2:	05 c0       	rjmp	.+10     	; 0x99ce <collision_detect_shot+0x1ee>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
    99c4:	f7 01       	movw	r30, r14
    99c6:	80 81       	ld	r24, Z
    99c8:	88 23       	and	r24, r24
    99ca:	41 f0       	breq	.+16     	; 0x99dc <collision_detect_shot+0x1fc>
			{
				case L_TL:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_DOWN;
    99cc:	82 e0       	ldi	r24, 0x02	; 2
    99ce:	f7 01       	movw	r30, r14
    99d0:	80 83       	st	Z, r24
    99d2:	0c c0       	rjmp	.+24     	; 0x99ec <collision_detect_shot+0x20c>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
					break;
				case L_BR:
					if (shot->shared.direction == D_DOWN)
    99d4:	f7 01       	movw	r30, r14
    99d6:	80 81       	ld	r24, Z
    99d8:	82 30       	cpi	r24, 0x02	; 2
    99da:	31 f4       	brne	.+12     	; 0x99e8 <collision_detect_shot+0x208>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_TR:
					if (shot->shared.direction == D_UP)
						shot->shared.direction = D_LEFT;
    99dc:	83 e0       	ldi	r24, 0x03	; 3
    99de:	f7 cf       	rjmp	.-18     	; 0x99ce <collision_detect_shot+0x1ee>
					else
						shot->shared.direction = D_DOWN;
					break;
				case L_BL:
					if (shot->shared.direction == D_DOWN)
    99e0:	f7 01       	movw	r30, r14
    99e2:	80 81       	ld	r24, Z
    99e4:	82 30       	cpi	r24, 0x02	; 2
    99e6:	61 f3       	breq	.-40     	; 0x99c0 <collision_detect_shot+0x1e0>
						shot->shared.direction = D_RIGHT;
					else
						shot->shared.direction = D_UP;
    99e8:	f7 01       	movw	r30, r14
    99ea:	10 82       	st	Z, r1
						shot->shared.direction = D_LEFT;
					else
						shot->shared.direction = D_UP;
					break;
			}
			shot->rebounds--;
    99ec:	f7 01       	movw	r30, r14
    99ee:	84 85       	ldd	r24, Z+12	; 0x0c
    99f0:	81 50       	subi	r24, 0x01	; 1
    99f2:	84 87       	std	Z+12, r24	; 0x0c
			if (shot->rebounds <= 0)
    99f4:	81 11       	cpse	r24, r1
    99f6:	08 c0       	rjmp	.+16     	; 0x9a08 <collision_detect_shot+0x228>
			{
				init_shot_state(shot, shot->shot_type);
    99f8:	62 85       	ldd	r22, Z+10	; 0x0a
    99fa:	c7 01       	movw	r24, r14
    99fc:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
				player->active_shots--;
    9a00:	f6 01       	movw	r30, r12
    9a02:	80 89       	ldd	r24, Z+16	; 0x10
    9a04:	81 50       	subi	r24, 0x01	; 1
    9a06:	80 8b       	std	Z+16, r24	; 0x10
			}
			break;
		}
	}
}
    9a08:	0f 90       	pop	r0
    9a0a:	0f 90       	pop	r0
    9a0c:	0f 90       	pop	r0
    9a0e:	0f 90       	pop	r0
    9a10:	0f 90       	pop	r0
    9a12:	df 91       	pop	r29
    9a14:	cf 91       	pop	r28
    9a16:	1f 91       	pop	r17
    9a18:	0f 91       	pop	r16
    9a1a:	ff 90       	pop	r15
    9a1c:	ef 90       	pop	r14
    9a1e:	df 90       	pop	r13
    9a20:	cf 90       	pop	r12
    9a22:	bf 90       	pop	r11
    9a24:	af 90       	pop	r10
    9a26:	9f 90       	pop	r9
    9a28:	8f 90       	pop	r8
    9a2a:	7f 90       	pop	r7
    9a2c:	6f 90       	pop	r6
    9a2e:	08 95       	ret

00009a30 <get_interesting_tile_indexes>:

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
    9a30:	fc 01       	movw	r30, r24
    9a32:	8e e1       	ldi	r24, 0x1E	; 30
    9a34:	48 9f       	mul	r20, r24
    9a36:	a0 01       	movw	r20, r0
    9a38:	11 24       	eor	r1, r1
    9a3a:	70 e0       	ldi	r23, 0x00	; 0
	if (direction == D_UP)
	{
		tiles[0] = (y * 30) + x;
    9a3c:	64 0f       	add	r22, r20
    9a3e:	75 1f       	adc	r23, r21
	}
}

void get_interesting_tile_indexes(int* tiles, u8 x, u8 y, u8 direction)
{
	if (direction == D_UP)
    9a40:	21 11       	cpse	r18, r1
    9a42:	09 c0       	rjmp	.+18     	; 0x9a56 <get_interesting_tile_indexes+0x26>
	{
		tiles[0] = (y * 30) + x;
    9a44:	71 83       	std	Z+1, r23	; 0x01
    9a46:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+1;
    9a48:	cb 01       	movw	r24, r22
    9a4a:	01 96       	adiw	r24, 0x01	; 1
    9a4c:	93 83       	std	Z+3, r25	; 0x03
    9a4e:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9a50:	6e 5f       	subi	r22, 0xFE	; 254
    9a52:	7f 4f       	sbci	r23, 0xFF	; 255
    9a54:	1c c0       	rjmp	.+56     	; 0x9a8e <get_interesting_tile_indexes+0x5e>
	}
	else if (direction == D_RIGHT)
    9a56:	21 30       	cpi	r18, 0x01	; 1
    9a58:	31 f4       	brne	.+12     	; 0x9a66 <get_interesting_tile_indexes+0x36>
	{
		tiles[0] = (y * 30) + x + 2;
    9a5a:	cb 01       	movw	r24, r22
    9a5c:	02 96       	adiw	r24, 0x02	; 2
    9a5e:	91 83       	std	Z+1, r25	; 0x01
    9a60:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+30;
    9a62:	4e 96       	adiw	r24, 0x1e	; 30
    9a64:	07 c0       	rjmp	.+14     	; 0x9a74 <get_interesting_tile_indexes+0x44>
		tiles[2] = tiles[0]+60;
	}
	else if (direction == D_DOWN)
    9a66:	22 30       	cpi	r18, 0x02	; 2
    9a68:	51 f4       	brne	.+20     	; 0x9a7e <get_interesting_tile_indexes+0x4e>
	{
		tiles[0] = (y * 30) + x + 60;
    9a6a:	cb 01       	movw	r24, r22
    9a6c:	cc 96       	adiw	r24, 0x3c	; 60
    9a6e:	91 83       	std	Z+1, r25	; 0x01
    9a70:	80 83       	st	Z, r24
		tiles[1] = tiles[0]+1;
    9a72:	01 96       	adiw	r24, 0x01	; 1
    9a74:	93 83       	std	Z+3, r25	; 0x03
    9a76:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+2;
    9a78:	62 5c       	subi	r22, 0xC2	; 194
    9a7a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a7c:	08 c0       	rjmp	.+16     	; 0x9a8e <get_interesting_tile_indexes+0x5e>
	}
	else
	{
		tiles[0] = (y * 30) + x;
    9a7e:	71 83       	std	Z+1, r23	; 0x01
    9a80:	60 83       	st	Z, r22
		tiles[1] = tiles[0]+30;
    9a82:	cb 01       	movw	r24, r22
    9a84:	4e 96       	adiw	r24, 0x1e	; 30
    9a86:	93 83       	std	Z+3, r25	; 0x03
    9a88:	82 83       	std	Z+2, r24	; 0x02
		tiles[2] = tiles[0]+60;
    9a8a:	64 5c       	subi	r22, 0xC4	; 196
    9a8c:	7f 4f       	sbci	r23, 0xFF	; 255
    9a8e:	75 83       	std	Z+5, r23	; 0x05
    9a90:	64 83       	std	Z+4, r22	; 0x04
    9a92:	08 95       	ret

00009a94 <collision_detect_player>:
	}
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
    9a94:	2f 92       	push	r2
    9a96:	3f 92       	push	r3
    9a98:	4f 92       	push	r4
    9a9a:	5f 92       	push	r5
    9a9c:	6f 92       	push	r6
    9a9e:	7f 92       	push	r7
    9aa0:	8f 92       	push	r8
    9aa2:	9f 92       	push	r9
    9aa4:	af 92       	push	r10
    9aa6:	bf 92       	push	r11
    9aa8:	cf 92       	push	r12
    9aaa:	df 92       	push	r13
    9aac:	ef 92       	push	r14
    9aae:	ff 92       	push	r15
    9ab0:	0f 93       	push	r16
    9ab2:	1f 93       	push	r17
    9ab4:	cf 93       	push	r28
    9ab6:	df 93       	push	r29
    9ab8:	cd b7       	in	r28, 0x3d	; 61
    9aba:	de b7       	in	r29, 0x3e	; 62
    9abc:	29 97       	sbiw	r28, 0x09	; 9
    9abe:	0f b6       	in	r0, 0x3f	; 63
    9ac0:	f8 94       	cli
    9ac2:	de bf       	out	0x3e, r29	; 62
    9ac4:	0f be       	out	0x3f, r0	; 63
    9ac6:	cd bf       	out	0x3d, r28	; 61
    9ac8:	7c 01       	movw	r14, r24
    9aca:	3b 01       	movw	r6, r22
    9acc:	14 2f       	mov	r17, r20
    9ace:	22 2e       	mov	r2, r18
	int tiles[3] = {0,0,0};
    9ad0:	1a 82       	std	Y+2, r1	; 0x02
    9ad2:	19 82       	std	Y+1, r1	; 0x01
    9ad4:	1c 82       	std	Y+4, r1	; 0x04
    9ad6:	1b 82       	std	Y+3, r1	; 0x03
    9ad8:	1e 82       	std	Y+6, r1	; 0x06
    9ada:	1d 82       	std	Y+5, r1	; 0x05
	u8 x = player->shared.x / 8;
	u8 y = player->shared.y / 8 - 3;
    9adc:	20 e0       	ldi	r18, 0x00	; 0
    9ade:	30 e0       	ldi	r19, 0x00	; 0
    9ae0:	40 e0       	ldi	r20, 0x00	; 0
    9ae2:	5e e3       	ldi	r21, 0x3E	; 62
    9ae4:	fc 01       	movw	r30, r24
    9ae6:	66 81       	ldd	r22, Z+6	; 0x06
    9ae8:	77 81       	ldd	r23, Z+7	; 0x07
    9aea:	80 85       	ldd	r24, Z+8	; 0x08
    9aec:	91 85       	ldd	r25, Z+9	; 0x09
    9aee:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9af2:	20 e0       	ldi	r18, 0x00	; 0
    9af4:	30 e0       	ldi	r19, 0x00	; 0
    9af6:	40 e4       	ldi	r20, 0x40	; 64
    9af8:	50 e4       	ldi	r21, 0x40	; 64
    9afa:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    9afe:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9b02:	d6 2e       	mov	r13, r22
}

void collision_detect_player(Player* player, Player* other_player, u8 hud_x, u8 other_player_hud_x)
{
	int tiles[3] = {0,0,0};
	u8 x = player->shared.x / 8;
    9b04:	20 e0       	ldi	r18, 0x00	; 0
    9b06:	30 e0       	ldi	r19, 0x00	; 0
    9b08:	40 e0       	ldi	r20, 0x00	; 0
    9b0a:	5e e3       	ldi	r21, 0x3E	; 62
    9b0c:	f7 01       	movw	r30, r14
    9b0e:	62 81       	ldd	r22, Z+2	; 0x02
    9b10:	73 81       	ldd	r23, Z+3	; 0x03
    9b12:	84 81       	ldd	r24, Z+4	; 0x04
    9b14:	95 81       	ldd	r25, Z+5	; 0x05
    9b16:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    9b1a:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
	u8 y = player->shared.y / 8 - 3;

	
	get_interesting_tile_indexes(tiles, x, y, player->shared.direction);
    9b1e:	f7 01       	movw	r30, r14
    9b20:	20 81       	ld	r18, Z
    9b22:	4d 2d       	mov	r20, r13
    9b24:	ce 01       	movw	r24, r28
    9b26:	01 96       	adiw	r24, 0x01	; 1
    9b28:	0e 94 18 4d 	call	0x9a30	; 0x9a30 <get_interesting_tile_indexes>
	
	/* Level boundries first */
	if (collision_detect_boundries(&player->shared))
    9b2c:	c7 01       	movw	r24, r14
    9b2e:	0e 94 d0 4a 	call	0x95a0	; 0x95a0 <collision_detect_boundries>
    9b32:	88 23       	and	r24, r24
    9b34:	31 f0       	breq	.+12     	; 0x9b42 <collision_detect_player+0xae>
	{
		recoil_sprite(&player->shared);
    9b36:	c7 01       	movw	r24, r14
    9b38:	0e 94 6f 49 	call	0x92de	; 0x92de <recoil_sprite>
		player->shared.speed = 0;
    9b3c:	f7 01       	movw	r30, r14
    9b3e:	11 82       	std	Z+1, r1	; 0x01
    9b40:	81 c0       	rjmp	.+258    	; 0x9c44 <collision_detect_player+0x1b0>
    9b42:	ce 01       	movw	r24, r28
    9b44:	01 96       	adiw	r24, 0x01	; 1
    9b46:	6c 01       	movw	r12, r24
    9b48:	4e 01       	movw	r8, r28
    9b4a:	97 e0       	ldi	r25, 0x07	; 7
    9b4c:	89 0e       	add	r8, r25
    9b4e:	91 1c       	adc	r9, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9b50:	8e e1       	ldi	r24, 0x1E	; 30
    9b52:	a8 2e       	mov	r10, r24
    9b54:	b1 2c       	mov	r11, r1
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->has_rocket = true;
    9b56:	33 24       	eor	r3, r3
    9b58:	33 94       	inc	r3
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    9b5a:	eb e0       	ldi	r30, 0x0B	; 11
    9b5c:	e1 0f       	add	r30, r17
    9b5e:	ef 83       	std	Y+7, r30	; 0x07
		else if (level.level_map[tiles[i]] == L_SPEED)
		{
			level.level_map[tiles[i]] = L_EMPTY;
			player->max_speed = OVER_SPEED;
			player->has_over_speed = true;
			DrawMap2(hud_x+10, 1, map_speed_itm);
    9b60:	fa e0       	ldi	r31, 0x0A	; 10
    9b62:	f1 0f       	add	r31, r17
    9b64:	f8 87       	std	Y+8, r31	; 0x08
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
	{
		if (solid_square_tile(tiles[i]) || solid_directional_tile(tiles[i], player->shared.x, player->shared.y, 7, 14))
    9b66:	f6 01       	movw	r30, r12
    9b68:	40 80       	ld	r4, Z
    9b6a:	51 80       	ldd	r5, Z+1	; 0x01
    9b6c:	c2 01       	movw	r24, r4
    9b6e:	0e 94 d9 49 	call	0x93b2	; 0x93b2 <solid_square_tile>
    9b72:	81 11       	cpse	r24, r1
    9b74:	18 c0       	rjmp	.+48     	; 0x9ba6 <collision_detect_player+0x112>
    9b76:	f7 01       	movw	r30, r14
    9b78:	66 81       	ldd	r22, Z+6	; 0x06
    9b7a:	77 81       	ldd	r23, Z+7	; 0x07
    9b7c:	80 85       	ldd	r24, Z+8	; 0x08
    9b7e:	91 85       	ldd	r25, Z+9	; 0x09
    9b80:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9b84:	46 2f       	mov	r20, r22
    9b86:	f7 01       	movw	r30, r14
    9b88:	62 81       	ldd	r22, Z+2	; 0x02
    9b8a:	73 81       	ldd	r23, Z+3	; 0x03
    9b8c:	84 81       	ldd	r24, Z+4	; 0x04
    9b8e:	95 81       	ldd	r25, Z+5	; 0x05
    9b90:	49 87       	std	Y+9, r20	; 0x09
    9b92:	0e 94 a8 56 	call	0xad50	; 0xad50 <__fixunssfsi>
    9b96:	0e e0       	ldi	r16, 0x0E	; 14
    9b98:	27 e0       	ldi	r18, 0x07	; 7
    9b9a:	49 85       	ldd	r20, Y+9	; 0x09
    9b9c:	c2 01       	movw	r24, r4
    9b9e:	0e 94 e7 49 	call	0x93ce	; 0x93ce <solid_directional_tile>
    9ba2:	88 23       	and	r24, r24
    9ba4:	31 f0       	breq	.+12     	; 0x9bb2 <collision_detect_player+0x11e>
		{
			recoil_sprite(&player->shared);
    9ba6:	c7 01       	movw	r24, r14
    9ba8:	0e 94 6f 49 	call	0x92de	; 0x92de <recoil_sprite>
			player->shared.speed = 0;
    9bac:	f7 01       	movw	r30, r14
    9bae:	11 82       	std	Z+1, r1	; 0x01
    9bb0:	42 c0       	rjmp	.+132    	; 0x9c36 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_SPEED)
    9bb2:	f2 01       	movw	r30, r4
    9bb4:	e0 56       	subi	r30, 0x60	; 96
    9bb6:	f5 4f       	sbci	r31, 0xF5	; 245
    9bb8:	81 81       	ldd	r24, Z+1	; 0x01
    9bba:	87 30       	cpi	r24, 0x07	; 7
    9bbc:	51 f4       	brne	.+20     	; 0x9bd2 <collision_detect_player+0x13e>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9bbe:	11 82       	std	Z+1, r1	; 0x01
			player->max_speed = OVER_SPEED;
    9bc0:	80 e5       	ldi	r24, 0x50	; 80
    9bc2:	f7 01       	movw	r30, r14
    9bc4:	87 8b       	std	Z+23, r24	; 0x17
			player->has_over_speed = true;
    9bc6:	31 8e       	std	Z+25, r3	; 0x19
			DrawMap2(hud_x+10, 1, map_speed_itm);
    9bc8:	4f ef       	ldi	r20, 0xFF	; 255
    9bca:	51 e3       	ldi	r21, 0x31	; 49
    9bcc:	61 e0       	ldi	r22, 0x01	; 1
    9bce:	88 85       	ldd	r24, Y+8	; 0x08
    9bd0:	09 c0       	rjmp	.+18     	; 0x9be4 <collision_detect_player+0x150>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
		}
		else if (level.level_map[tiles[i]] == L_ROCKET)
    9bd2:	89 30       	cpi	r24, 0x09	; 9
    9bd4:	a9 f4       	brne	.+42     	; 0x9c00 <collision_detect_player+0x16c>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9bd6:	11 82       	std	Z+1, r1	; 0x01
			player->has_rocket = true;
    9bd8:	f7 01       	movw	r30, r14
    9bda:	30 8e       	std	Z+24, r3	; 0x18
			DrawMap2(hud_x+11, 1, map_rocket_itm);
    9bdc:	49 ef       	ldi	r20, 0xF9	; 249
    9bde:	51 e3       	ldi	r21, 0x31	; 49
    9be0:	61 e0       	ldi	r22, 0x01	; 1
    9be2:	8f 81       	ldd	r24, Y+7	; 0x07
    9be4:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9be8:	f6 01       	movw	r30, r12
    9bea:	80 81       	ld	r24, Z
    9bec:	91 81       	ldd	r25, Z+1	; 0x01
    9bee:	b5 01       	movw	r22, r10
    9bf0:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9bf4:	6d 5f       	subi	r22, 0xFD	; 253
    9bf6:	40 e0       	ldi	r20, 0x00	; 0
    9bf8:	50 e0       	ldi	r21, 0x00	; 0
    9bfa:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
    9bfe:	1b c0       	rjmp	.+54     	; 0x9c36 <collision_detect_player+0x1a2>
		}
		else if (level.level_map[tiles[i]] == L_EXPLODE)
    9c00:	88 30       	cpi	r24, 0x08	; 8
    9c02:	c9 f4       	brne	.+50     	; 0x9c36 <collision_detect_player+0x1a2>
		{
			level.level_map[tiles[i]] = L_EMPTY;
    9c04:	11 82       	std	Z+1, r1	; 0x01
			SetTile(tiles[i] % 30, 3 + tiles[i] / 30, 0);
    9c06:	c2 01       	movw	r24, r4
    9c08:	b5 01       	movw	r22, r10
    9c0a:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9c0e:	6d 5f       	subi	r22, 0xFD	; 253
    9c10:	40 e0       	ldi	r20, 0x00	; 0
    9c12:	50 e0       	ldi	r21, 0x00	; 0
    9c14:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
			player->level_score++;
    9c18:	f7 01       	movw	r30, r14
    9c1a:	87 85       	ldd	r24, Z+15	; 0x0f
    9c1c:	8f 5f       	subi	r24, 0xFF	; 255
    9c1e:	87 87       	std	Z+15, r24	; 0x0f
			player->score++;
    9c20:	86 85       	ldd	r24, Z+14	; 0x0e
    9c22:	8f 5f       	subi	r24, 0xFF	; 255
    9c24:	86 87       	std	Z+14, r24	; 0x0e
			render_score(player, hud_x);
    9c26:	61 2f       	mov	r22, r17
    9c28:	c7 01       	movw	r24, r14
    9c2a:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <render_score>
			kill_player(other_player, other_player_hud_x);
    9c2e:	62 2d       	mov	r22, r2
    9c30:	c3 01       	movw	r24, r6
    9c32:	0e 94 1e 4b 	call	0x963c	; 0x963c <kill_player>
    9c36:	f2 e0       	ldi	r31, 0x02	; 2
    9c38:	cf 0e       	add	r12, r31
    9c3a:	d1 1c       	adc	r13, r1
		player->shared.speed = 0;
		return;
	}

	/* Tile interaction */
	for (u8 i = 0; i < 3; i++)
    9c3c:	c8 14       	cp	r12, r8
    9c3e:	d9 04       	cpc	r13, r9
    9c40:	09 f0       	breq	.+2      	; 0x9c44 <collision_detect_player+0x1b0>
    9c42:	91 cf       	rjmp	.-222    	; 0x9b66 <collision_detect_player+0xd2>
			player->score++;
			render_score(player, hud_x);
			kill_player(other_player, other_player_hud_x);
		}
	}
}
    9c44:	29 96       	adiw	r28, 0x09	; 9
    9c46:	0f b6       	in	r0, 0x3f	; 63
    9c48:	f8 94       	cli
    9c4a:	de bf       	out	0x3e, r29	; 62
    9c4c:	0f be       	out	0x3f, r0	; 63
    9c4e:	cd bf       	out	0x3d, r28	; 61
    9c50:	df 91       	pop	r29
    9c52:	cf 91       	pop	r28
    9c54:	1f 91       	pop	r17
    9c56:	0f 91       	pop	r16
    9c58:	ff 90       	pop	r15
    9c5a:	ef 90       	pop	r14
    9c5c:	df 90       	pop	r13
    9c5e:	cf 90       	pop	r12
    9c60:	bf 90       	pop	r11
    9c62:	af 90       	pop	r10
    9c64:	9f 90       	pop	r9
    9c66:	8f 90       	pop	r8
    9c68:	7f 90       	pop	r7
    9c6a:	6f 90       	pop	r6
    9c6c:	5f 90       	pop	r5
    9c6e:	4f 90       	pop	r4
    9c70:	3f 90       	pop	r3
    9c72:	2f 90       	pop	r2
    9c74:	08 95       	ret

00009c76 <load_level_tiles>:

void load_level_tiles(u8 blank)
{
    9c76:	bf 92       	push	r11
    9c78:	cf 92       	push	r12
    9c7a:	df 92       	push	r13
    9c7c:	ef 92       	push	r14
    9c7e:	ff 92       	push	r15
    9c80:	0f 93       	push	r16
    9c82:	1f 93       	push	r17
    9c84:	cf 93       	push	r28
    9c86:	df 93       	push	r29
    9c88:	b8 2e       	mov	r11, r24
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    9c8a:	c0 e0       	ldi	r28, 0x00	; 0
    9c8c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		x = i % 30;
    9c8e:	0e e1       	ldi	r16, 0x1E	; 30
    9c90:	10 e0       	ldi	r17, 0x00	; 0
    9c92:	ce 01       	movw	r24, r28
    9c94:	b8 01       	movw	r22, r16
    9c96:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
		y = 3 + i / 30;
    9c9a:	6d 5f       	subi	r22, 0xFD	; 253
		if (blank)
    9c9c:	bb 20       	and	r11, r11
    9c9e:	19 f0       	breq	.+6      	; 0x9ca6 <load_level_tiles+0x30>
		{
			DrawMap2(x, y, map_tile_none);
    9ca0:	48 e0       	ldi	r20, 0x08	; 8
    9ca2:	52 e3       	ldi	r21, 0x32	; 50
    9ca4:	11 c0       	rjmp	.+34     	; 0x9cc8 <load_level_tiles+0x52>
    9ca6:	fe 01       	movw	r30, r28
    9ca8:	e0 56       	subi	r30, 0x60	; 96
    9caa:	f5 4f       	sbci	r31, 0xF5	; 245
		}
		else
		{
			switch (level.level_map[i])
    9cac:	e1 81       	ldd	r30, Z+1	; 0x01
    9cae:	ce 2e       	mov	r12, r30
    9cb0:	d1 2c       	mov	r13, r1
    9cb2:	f6 01       	movw	r30, r12
    9cb4:	31 97       	sbiw	r30, 0x01	; 1
    9cb6:	e9 30       	cpi	r30, 0x09	; 9
    9cb8:	f1 05       	cpc	r31, r1
    9cba:	08 f5       	brcc	.+66     	; 0x9cfe <load_level_tiles+0x88>
    9cbc:	e8 5c       	subi	r30, 0xC8	; 200
    9cbe:	ff 4f       	sbci	r31, 0xFF	; 255
    9cc0:	0c 94 d1 55 	jmp	0xaba2	; 0xaba2 <__tablejump2__>
			{
				case L_BRICK: DrawMap2(x, y, map_brick); break;
    9cc4:	45 e0       	ldi	r20, 0x05	; 5
    9cc6:	52 e3       	ldi	r21, 0x32	; 50
    9cc8:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
    9ccc:	1c c0       	rjmp	.+56     	; 0x9d06 <load_level_tiles+0x90>
				case L_METAL: DrawMap2(x, y, map_metal); break;
    9cce:	42 e0       	ldi	r20, 0x02	; 2
    9cd0:	52 e3       	ldi	r21, 0x32	; 50
    9cd2:	fa cf       	rjmp	.-12     	; 0x9cc8 <load_level_tiles+0x52>
				case L_TL: DrawMap2(x, y, map_metal_tl); break;
    9cd4:	4d ee       	ldi	r20, 0xED	; 237
    9cd6:	51 e3       	ldi	r21, 0x31	; 49
    9cd8:	f7 cf       	rjmp	.-18     	; 0x9cc8 <load_level_tiles+0x52>
				case L_TR: DrawMap2(x, y, map_metal_tr); break;
    9cda:	47 ee       	ldi	r20, 0xE7	; 231
    9cdc:	51 e3       	ldi	r21, 0x31	; 49
    9cde:	f4 cf       	rjmp	.-24     	; 0x9cc8 <load_level_tiles+0x52>
				case L_BL: DrawMap2(x, y, map_metal_bl); break;
    9ce0:	44 ee       	ldi	r20, 0xE4	; 228
    9ce2:	51 e3       	ldi	r21, 0x31	; 49
    9ce4:	f1 cf       	rjmp	.-30     	; 0x9cc8 <load_level_tiles+0x52>
				case L_BR: DrawMap2(x, y, map_metal_br); break;
    9ce6:	4a ee       	ldi	r20, 0xEA	; 234
    9ce8:	51 e3       	ldi	r21, 0x31	; 49
    9cea:	ee cf       	rjmp	.-36     	; 0x9cc8 <load_level_tiles+0x52>
				case L_SPEED: DrawMap2(x, y, map_speed_itm); break;
    9cec:	4f ef       	ldi	r20, 0xFF	; 255
    9cee:	51 e3       	ldi	r21, 0x31	; 49
    9cf0:	eb cf       	rjmp	.-42     	; 0x9cc8 <load_level_tiles+0x52>
				case L_EXPLODE: DrawMap2(x, y, map_explode_itm); break;
    9cf2:	4c ef       	ldi	r20, 0xFC	; 252
    9cf4:	51 e3       	ldi	r21, 0x31	; 49
    9cf6:	e8 cf       	rjmp	.-48     	; 0x9cc8 <load_level_tiles+0x52>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
    9cf8:	49 ef       	ldi	r20, 0xF9	; 249
    9cfa:	51 e3       	ldi	r21, 0x31	; 49
    9cfc:	e5 cf       	rjmp	.-54     	; 0x9cc8 <load_level_tiles+0x52>
				default : SetTile(x, y, 0); break;
    9cfe:	40 e0       	ldi	r20, 0x00	; 0
    9d00:	50 e0       	ldi	r21, 0x00	; 0
    9d02:	0e 94 35 35 	call	0x6a6a	; 0x6a6a <SetTile>
void load_level_tiles(u8 blank)
{
	u8 x;
	u8 y;
	
	for (int i = 0; i < 30*25; i++)
    9d06:	21 96       	adiw	r28, 0x01	; 1
    9d08:	ce 3e       	cpi	r28, 0xEE	; 238
    9d0a:	82 e0       	ldi	r24, 0x02	; 2
    9d0c:	d8 07       	cpc	r29, r24
    9d0e:	09 f6       	brne	.-126    	; 0x9c92 <load_level_tiles+0x1c>
				case L_ROCKET: DrawMap2(x, y, map_rocket_itm); break;
				default : SetTile(x, y, 0); break;
			}
		}
	}
}
    9d10:	df 91       	pop	r29
    9d12:	cf 91       	pop	r28
    9d14:	1f 91       	pop	r17
    9d16:	0f 91       	pop	r16
    9d18:	ff 90       	pop	r15
    9d1a:	ef 90       	pop	r14
    9d1c:	df 90       	pop	r13
    9d1e:	cf 90       	pop	r12
    9d20:	bf 90       	pop	r11
    9d22:	08 95       	ret

00009d24 <load_level>:

void load_level(int level_number)
{
    9d24:	9f 92       	push	r9
    9d26:	af 92       	push	r10
    9d28:	bf 92       	push	r11
    9d2a:	cf 92       	push	r12
    9d2c:	df 92       	push	r13
    9d2e:	ef 92       	push	r14
    9d30:	ff 92       	push	r15
    9d32:	0f 93       	push	r16
    9d34:	1f 93       	push	r17
    9d36:	cf 93       	push	r28
    9d38:	df 93       	push	r29
    9d3a:	ec 01       	movw	r28, r24
    int level_start = level_number*30*25;
    9d3c:	8e ee       	ldi	r24, 0xEE	; 238
    9d3e:	92 e0       	ldi	r25, 0x02	; 2
    9d40:	c8 9f       	mul	r28, r24
    9d42:	70 01       	movw	r14, r0
    9d44:	c9 9f       	mul	r28, r25
    9d46:	f0 0c       	add	r15, r0
    9d48:	d8 9f       	mul	r29, r24
    9d4a:	f0 0c       	add	r15, r0
    9d4c:	11 24       	eor	r1, r1

	game.current_screen = LEVEL;
    9d4e:	83 e0       	ldi	r24, 0x03	; 3
    9d50:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    9d54:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <clear_sprites>
	game.current_level = level_number;
    9d58:	c0 93 02 0a 	sts	0x0A02, r28
    9d5c:	81 ea       	ldi	r24, 0xA1	; 161
    9d5e:	c8 2e       	mov	r12, r24
    9d60:	8a e0       	ldi	r24, 0x0A	; 10
    9d62:	d8 2e       	mov	r13, r24
	for (int i = 0; i < 30*25; i++)
    9d64:	c0 e0       	ldi	r28, 0x00	; 0
    9d66:	d0 e0       	ldi	r29, 0x00	; 0
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
		if (level.level_map[i] == L_P1_SPAWN)
		{
			player1.spawn_x = (i % 30) * 8;
    9d68:	0e e1       	ldi	r16, 0x1E	; 30
    9d6a:	10 e0       	ldi	r17, 0x00	; 0
			player1.spawn_y = (i / 30) * 8 + 3*8;
			player1.level_score = 0;
			player1.has_over_speed = false;
			player1.has_rocket = false;
			player1.max_speed = MAX_SPEED;
    9d6c:	92 e3       	ldi	r25, 0x32	; 50
    9d6e:	99 2e       	mov	r9, r25
    9d70:	fe 01       	movw	r30, r28
    9d72:	ee 0d       	add	r30, r14
    9d74:	ff 1d       	adc	r31, r15
    9d76:	e6 53       	subi	r30, 0x36	; 54
    9d78:	fd 4f       	sbci	r31, 0xFD	; 253
	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
	{
		level.level_map[i] = pgm_read_byte(&level_data[level_start+i]);
    9d7a:	e4 91       	lpm	r30, Z
    9d7c:	56 01       	movw	r10, r12
    9d7e:	d6 01       	movw	r26, r12
    9d80:	ec 93       	st	X, r30
		if (level.level_map[i] == L_P1_SPAWN)
    9d82:	e8 35       	cpi	r30, 0x58	; 88
    9d84:	01 f5       	brne	.+64     	; 0x9dc6 <load_level+0xa2>
		{
			player1.spawn_x = (i % 30) * 8;
    9d86:	ce 01       	movw	r24, r28
    9d88:	b8 01       	movw	r22, r16
    9d8a:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9d8e:	88 0f       	add	r24, r24
    9d90:	88 0f       	add	r24, r24
    9d92:	88 0f       	add	r24, r24
    9d94:	80 93 2f 0a 	sts	0x0A2F, r24
			player1.spawn_y = (i / 30) * 8 + 3*8;
    9d98:	6d 5f       	subi	r22, 0xFD	; 253
    9d9a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d9c:	66 0f       	add	r22, r22
    9d9e:	66 0f       	add	r22, r22
    9da0:	66 0f       	add	r22, r22
    9da2:	60 93 30 0a 	sts	0x0A30, r22
			player1.level_score = 0;
    9da6:	10 92 2d 0a 	sts	0x0A2D, r1
			player1.has_over_speed = false;
    9daa:	10 92 37 0a 	sts	0x0A37, r1
			player1.has_rocket = false;
    9dae:	10 92 36 0a 	sts	0x0A36, r1
			player1.max_speed = MAX_SPEED;
    9db2:	90 92 35 0a 	sts	0x0A35, r9
			player_init_shot_state(&player1);
    9db6:	8e e1       	ldi	r24, 0x1E	; 30
    9db8:	9a e0       	ldi	r25, 0x0A	; 10
    9dba:	0e 94 09 46 	call	0x8c12	; 0x8c12 <player_init_shot_state>
			player_spawn(&player1);
    9dbe:	8e e1       	ldi	r24, 0x1E	; 30
    9dc0:	9a e0       	ldi	r25, 0x0A	; 10
    9dc2:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <player_spawn>
    9dc6:	bf ef       	ldi	r27, 0xFF	; 255
    9dc8:	cb 1a       	sub	r12, r27
    9dca:	db 0a       	sbc	r13, r27
		}
		if (level.level_map[i] == L_P2_SPAWN)
    9dcc:	f5 01       	movw	r30, r10
    9dce:	80 81       	ld	r24, Z
    9dd0:	83 36       	cpi	r24, 0x63	; 99
    9dd2:	01 f5       	brne	.+64     	; 0x9e14 <load_level+0xf0>
		{
			player2.spawn_x = (i % 30) * 8;
    9dd4:	ce 01       	movw	r24, r28
    9dd6:	b8 01       	movw	r22, r16
    9dd8:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    9ddc:	88 0f       	add	r24, r24
    9dde:	88 0f       	add	r24, r24
    9de0:	88 0f       	add	r24, r24
    9de2:	80 93 a0 0d 	sts	0x0DA0, r24
			player2.spawn_y = (i / 30) * 8 + 3*8;
    9de6:	6d 5f       	subi	r22, 0xFD	; 253
    9de8:	7f 4f       	sbci	r23, 0xFF	; 255
    9dea:	66 0f       	add	r22, r22
    9dec:	66 0f       	add	r22, r22
    9dee:	66 0f       	add	r22, r22
    9df0:	60 93 a1 0d 	sts	0x0DA1, r22
			player2.level_score = 0;
    9df4:	10 92 9e 0d 	sts	0x0D9E, r1
			player2.has_over_speed = false;
    9df8:	10 92 a8 0d 	sts	0x0DA8, r1
			player2.has_rocket = false;
    9dfc:	10 92 a7 0d 	sts	0x0DA7, r1
			player2.max_speed = MAX_SPEED;
    9e00:	90 92 a6 0d 	sts	0x0DA6, r9
			player_init_shot_state(&player2);
    9e04:	8f e8       	ldi	r24, 0x8F	; 143
    9e06:	9d e0       	ldi	r25, 0x0D	; 13
    9e08:	0e 94 09 46 	call	0x8c12	; 0x8c12 <player_init_shot_state>
			player_spawn(&player2);
    9e0c:	8f e8       	ldi	r24, 0x8F	; 143
    9e0e:	9d e0       	ldi	r25, 0x0D	; 13
    9e10:	0e 94 2d 46 	call	0x8c5a	; 0x8c5a <player_spawn>
    int level_start = level_number*30*25;

	game.current_screen = LEVEL;
	clear_sprites();
	game.current_level = level_number;
	for (int i = 0; i < 30*25; i++)
    9e14:	21 96       	adiw	r28, 0x01	; 1
    9e16:	ce 3e       	cpi	r28, 0xEE	; 238
    9e18:	f2 e0       	ldi	r31, 0x02	; 2
    9e1a:	df 07       	cpc	r29, r31
    9e1c:	09 f0       	breq	.+2      	; 0x9e20 <load_level+0xfc>
    9e1e:	a8 cf       	rjmp	.-176    	; 0x9d70 <load_level+0x4c>
			player2.max_speed = MAX_SPEED;
			player_init_shot_state(&player2);
			player_spawn(&player2);
		}
	}
	render_hud(&player1, 0);
    9e20:	60 e0       	ldi	r22, 0x00	; 0
    9e22:	8e e1       	ldi	r24, 0x1E	; 30
    9e24:	9a e0       	ldi	r25, 0x0A	; 10
    9e26:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <render_hud>
	render_hud(&player2, 15);
    9e2a:	6f e0       	ldi	r22, 0x0F	; 15
    9e2c:	8f e8       	ldi	r24, 0x8F	; 143
    9e2e:	9d e0       	ldi	r25, 0x0D	; 13
    9e30:	0e 94 8c 47 	call	0x8f18	; 0x8f18 <render_hud>
	render_score(&player1, 0);
    9e34:	60 e0       	ldi	r22, 0x00	; 0
    9e36:	8e e1       	ldi	r24, 0x1E	; 30
    9e38:	9a e0       	ldi	r25, 0x0A	; 10
    9e3a:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <render_score>
	render_score(&player2, 15);
    9e3e:	6f e0       	ldi	r22, 0x0F	; 15
    9e40:	8f e8       	ldi	r24, 0x8F	; 143
    9e42:	9d e0       	ldi	r25, 0x0D	; 13
    9e44:	0e 94 a9 47 	call	0x8f52	; 0x8f52 <render_score>
	Print(14, 0, strVertSep);
    9e48:	40 e7       	ldi	r20, 0x70	; 112
    9e4a:	52 e0       	ldi	r21, 0x02	; 2
    9e4c:	60 e0       	ldi	r22, 0x00	; 0
    9e4e:	70 e0       	ldi	r23, 0x00	; 0
    9e50:	8e e0       	ldi	r24, 0x0E	; 14
    9e52:	90 e0       	ldi	r25, 0x00	; 0
    9e54:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(14, 1, strVertSep);
    9e58:	40 e7       	ldi	r20, 0x70	; 112
    9e5a:	52 e0       	ldi	r21, 0x02	; 2
    9e5c:	61 e0       	ldi	r22, 0x01	; 1
    9e5e:	70 e0       	ldi	r23, 0x00	; 0
    9e60:	8e e0       	ldi	r24, 0x0E	; 14
    9e62:	90 e0       	ldi	r25, 0x00	; 0
    9e64:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(14, 2, strVertSep);
    9e68:	40 e7       	ldi	r20, 0x70	; 112
    9e6a:	52 e0       	ldi	r21, 0x02	; 2
    9e6c:	62 e0       	ldi	r22, 0x02	; 2
    9e6e:	70 e0       	ldi	r23, 0x00	; 0
    9e70:	8e e0       	ldi	r24, 0x0E	; 14
    9e72:	90 e0       	ldi	r25, 0x00	; 0
    9e74:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	load_level_tiles(false);
    9e78:	80 e0       	ldi	r24, 0x00	; 0
}
    9e7a:	df 91       	pop	r29
    9e7c:	cf 91       	pop	r28
    9e7e:	1f 91       	pop	r17
    9e80:	0f 91       	pop	r16
    9e82:	ff 90       	pop	r15
    9e84:	ef 90       	pop	r14
    9e86:	df 90       	pop	r13
    9e88:	cf 90       	pop	r12
    9e8a:	bf 90       	pop	r11
    9e8c:	af 90       	pop	r10
    9e8e:	9f 90       	pop	r9
	render_score(&player1, 0);
	render_score(&player2, 15);
	Print(14, 0, strVertSep);
	Print(14, 1, strVertSep);
	Print(14, 2, strVertSep);
	load_level_tiles(false);
    9e90:	0c 94 3b 4e 	jmp	0x9c76	; 0x9c76 <load_level_tiles>

00009e94 <level_transition>:
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
}

void level_transition(u8 index)
{
    9e94:	cf 93       	push	r28
    9e96:	c8 2f       	mov	r28, r24
	FadeOut(FRAMES_PER_FADE, true);
    9e98:	61 e0       	ldi	r22, 0x01	; 1
    9e9a:	83 e0       	ldi	r24, 0x03	; 3
    9e9c:	0e 94 39 43 	call	0x8672	; 0x8672 <FadeOut>
	ClearVram();
    9ea0:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ClearVram>
	clear_sprites();
    9ea4:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <clear_sprites>
	Print(9, 12, &strLevels[index*12]);
    9ea8:	8c e0       	ldi	r24, 0x0C	; 12
    9eaa:	c8 9f       	mul	r28, r24
    9eac:	a0 01       	movw	r20, r0
    9eae:	11 24       	eor	r1, r1
    9eb0:	4a 50       	subi	r20, 0x0A	; 10
    9eb2:	5f 4f       	sbci	r21, 0xFF	; 255
    9eb4:	6c e0       	ldi	r22, 0x0C	; 12
    9eb6:	70 e0       	ldi	r23, 0x00	; 0
    9eb8:	89 e0       	ldi	r24, 0x09	; 9
    9eba:	90 e0       	ldi	r25, 0x00	; 0
    9ebc:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	FadeIn(1, true);
    9ec0:	61 e0       	ldi	r22, 0x01	; 1
    9ec2:	81 e0       	ldi	r24, 0x01	; 1
    9ec4:	0e 94 2d 43 	call	0x865a	; 0x865a <FadeIn>
	LBWaitSeconds(TEXT_LINGER);
    9ec8:	82 e0       	ldi	r24, 0x02	; 2
    9eca:	0e 94 2d 45 	call	0x8a5a	; 0x8a5a <LBWaitSeconds>
	FadeOut(1, true);
    9ece:	61 e0       	ldi	r22, 0x01	; 1
    9ed0:	81 e0       	ldi	r24, 0x01	; 1
    9ed2:	0e 94 39 43 	call	0x8672	; 0x8672 <FadeOut>
	ClearVram();
    9ed6:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ClearVram>
	FadeIn(FRAMES_PER_FADE, false);
    9eda:	60 e0       	ldi	r22, 0x00	; 0
    9edc:	83 e0       	ldi	r24, 0x03	; 3
    9ede:	0e 94 2d 43 	call	0x865a	; 0x865a <FadeIn>
	load_level(index);
    9ee2:	8c 2f       	mov	r24, r28
    9ee4:	90 e0       	ldi	r25, 0x00	; 0
}
    9ee6:	cf 91       	pop	r28
	FadeIn(1, true);
	LBWaitSeconds(TEXT_LINGER);
	FadeOut(1, true);
	ClearVram();
	FadeIn(FRAMES_PER_FADE, false);
	load_level(index);
    9ee8:	0c 94 92 4e 	jmp	0x9d24	; 0x9d24 <load_level>

00009eec <load_splash>:
	collision_detect_player(&player2, &player1, 15, 0);
}

void load_splash()
{
	game.current_screen = SPLASH;
    9eec:	10 92 01 0a 	sts	0x0A01, r1
	clear_sprites();
    9ef0:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <clear_sprites>
	Print(7, 13, str1Player);
    9ef4:	45 ea       	ldi	r20, 0xA5	; 165
    9ef6:	52 e0       	ldi	r21, 0x02	; 2
    9ef8:	6d e0       	ldi	r22, 0x0D	; 13
    9efa:	70 e0       	ldi	r23, 0x00	; 0
    9efc:	87 e0       	ldi	r24, 0x07	; 7
    9efe:	90 e0       	ldi	r25, 0x00	; 0
    9f00:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(7, 14, str2Player);
    9f04:	44 e9       	ldi	r20, 0x94	; 148
    9f06:	52 e0       	ldi	r21, 0x02	; 2
    9f08:	6e e0       	ldi	r22, 0x0E	; 14
    9f0a:	70 e0       	ldi	r23, 0x00	; 0
    9f0c:	87 e0       	ldi	r24, 0x07	; 7
    9f0e:	90 e0       	ldi	r25, 0x00	; 0
    9f10:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(7, 15, strHighscores);
    9f14:	4a e8       	ldi	r20, 0x8A	; 138
    9f16:	52 e0       	ldi	r21, 0x02	; 2
    9f18:	6f e0       	ldi	r22, 0x0F	; 15
    9f1a:	70 e0       	ldi	r23, 0x00	; 0
    9f1c:	87 e0       	ldi	r24, 0x07	; 7
    9f1e:	90 e0       	ldi	r25, 0x00	; 0
    9f20:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(4, 26, strCopyright);
    9f24:	43 eb       	ldi	r20, 0xB3	; 179
    9f26:	52 e0       	ldi	r21, 0x02	; 2
    9f28:	6a e1       	ldi	r22, 0x1A	; 26
    9f2a:	70 e0       	ldi	r23, 0x00	; 0
    9f2c:	84 e0       	ldi	r24, 0x04	; 4
    9f2e:	90 e0       	ldi	r25, 0x00	; 0
    9f30:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	DrawMap2(4, 5, (const char*) map_splash);
    9f34:	49 e4       	ldi	r20, 0x49	; 73
    9f36:	52 e3       	ldi	r21, 0x32	; 50
    9f38:	65 e0       	ldi	r22, 0x05	; 5
    9f3a:	84 e0       	ldi	r24, 0x04	; 4
    9f3c:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
	MapSprite2(0, map_ball, 0);
    9f40:	40 e0       	ldi	r20, 0x00	; 0
    9f42:	66 e9       	ldi	r22, 0x96	; 150
    9f44:	71 e3       	ldi	r23, 0x31	; 49
    9f46:	80 e0       	ldi	r24, 0x00	; 0
    9f48:	0c 94 e8 41 	jmp	0x83d0	; 0x83d0 <MapSprite2>

00009f4c <load_tank_rank>:
		return;
	}
}

void load_tank_rank()
{
    9f4c:	ef 92       	push	r14
    9f4e:	ff 92       	push	r15
    9f50:	0f 93       	push	r16
    9f52:	1f 93       	push	r17
    9f54:	cf 93       	push	r28
    9f56:	df 93       	push	r29
    9f58:	1f 92       	push	r1
    9f5a:	cd b7       	in	r28, 0x3d	; 61
    9f5c:	de b7       	in	r29, 0x3e	; 62
	u8 y = 7;
	u8 rank = 1;
	
	game.current_screen = TANK_RANK;
    9f5e:	81 e0       	ldi	r24, 0x01	; 1
    9f60:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    9f64:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    9f68:	40 e0       	ldi	r20, 0x00	; 0
    9f6a:	65 ed       	ldi	r22, 0xD5	; 213
    9f6c:	71 e3       	ldi	r23, 0x31	; 49
    9f6e:	80 e0       	ldi	r24, 0x00	; 0
    9f70:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    9f74:	40 e0       	ldi	r20, 0x00	; 0
    9f76:	6d eb       	ldi	r22, 0xBD	; 189
    9f78:	71 e3       	ldi	r23, 0x31	; 49
    9f7a:	84 e0       	ldi	r24, 0x04	; 4
    9f7c:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	MoveSprite(0, 7*8, 1*8, 2, 2);
    9f80:	02 e0       	ldi	r16, 0x02	; 2
    9f82:	22 e0       	ldi	r18, 0x02	; 2
    9f84:	48 e0       	ldi	r20, 0x08	; 8
    9f86:	68 e3       	ldi	r22, 0x38	; 56
    9f88:	80 e0       	ldi	r24, 0x00	; 0
    9f8a:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
	MoveSprite(4, 20*8, 1*8, 2, 2);
    9f8e:	22 e0       	ldi	r18, 0x02	; 2
    9f90:	48 e0       	ldi	r20, 0x08	; 8
    9f92:	60 ea       	ldi	r22, 0xA0	; 160
    9f94:	84 e0       	ldi	r24, 0x04	; 4
    9f96:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
	Print(10, 2, strHighscores);
    9f9a:	4a e8       	ldi	r20, 0x8A	; 138
    9f9c:	52 e0       	ldi	r21, 0x02	; 2
    9f9e:	62 e0       	ldi	r22, 0x02	; 2
    9fa0:	70 e0       	ldi	r23, 0x00	; 0
    9fa2:	8a e0       	ldi	r24, 0x0A	; 10
    9fa4:	90 e0       	ldi	r25, 0x00	; 0
    9fa6:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    9faa:	09 e0       	ldi	r16, 0x09	; 9
    9fac:	11 e0       	ldi	r17, 0x01	; 1
    9fae:	87 e0       	ldi	r24, 0x07	; 7
    9fb0:	e8 2e       	mov	r14, r24
    9fb2:	f1 2c       	mov	r15, r1
}

void load_tank_rank()
{
	u8 y = 7;
	u8 rank = 1;
    9fb4:	31 e0       	ldi	r19, 0x01	; 1
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
	{
		PrintByte(2, y, rank, false);
    9fb6:	20 e0       	ldi	r18, 0x00	; 0
    9fb8:	43 2f       	mov	r20, r19
    9fba:	b7 01       	movw	r22, r14
    9fbc:	82 e0       	ldi	r24, 0x02	; 2
    9fbe:	90 e0       	ldi	r25, 0x00	; 0
    9fc0:	39 83       	std	Y+1, r19	; 0x01
    9fc2:	0e 94 b7 42 	call	0x856e	; 0x856e <PrintByte>
		PrintChar(3, y, '.');
    9fc6:	4e e2       	ldi	r20, 0x2E	; 46
    9fc8:	b7 01       	movw	r22, r14
    9fca:	83 e0       	ldi	r24, 0x03	; 3
    9fcc:	90 e0       	ldi	r25, 0x00	; 0
    9fce:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
    9fd2:	f8 01       	movw	r30, r16
    9fd4:	33 97       	sbiw	r30, 0x03	; 3
		LBPrintStr(5, y, &handles.data[scores.data[i]*3], 3);
    9fd6:	80 81       	ld	r24, Z
    9fd8:	93 e0       	ldi	r25, 0x03	; 3
    9fda:	89 9f       	mul	r24, r25
    9fdc:	a0 01       	movw	r20, r0
    9fde:	11 24       	eor	r1, r1
    9fe0:	4a 5d       	subi	r20, 0xDA	; 218
    9fe2:	5e 4f       	sbci	r21, 0xFE	; 254
    9fe4:	23 e0       	ldi	r18, 0x03	; 3
    9fe6:	6e 2d       	mov	r22, r14
    9fe8:	85 e0       	ldi	r24, 0x05	; 5
    9fea:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
		Print(9, y, strOwns);
    9fee:	44 e3       	ldi	r20, 0x34	; 52
    9ff0:	52 e0       	ldi	r21, 0x02	; 2
    9ff2:	b7 01       	movw	r22, r14
    9ff4:	89 e0       	ldi	r24, 0x09	; 9
    9ff6:	90 e0       	ldi	r25, 0x00	; 0
    9ff8:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    9ffc:	f8 01       	movw	r30, r16
    9ffe:	32 97       	sbiw	r30, 0x02	; 2
		LBPrintStr(14, y, &handles.data[scores.data[i+1]*3], 3);
    a000:	80 81       	ld	r24, Z
    a002:	e3 e0       	ldi	r30, 0x03	; 3
    a004:	8e 9f       	mul	r24, r30
    a006:	a0 01       	movw	r20, r0
    a008:	11 24       	eor	r1, r1
    a00a:	4a 5d       	subi	r20, 0xDA	; 218
    a00c:	5e 4f       	sbci	r21, 0xFE	; 254
    a00e:	23 e0       	ldi	r18, 0x03	; 3
    a010:	6e 2d       	mov	r22, r14
    a012:	8e e0       	ldi	r24, 0x0E	; 14
    a014:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
		Print(18, y, strBy);
    a018:	41 e3       	ldi	r20, 0x31	; 49
    a01a:	52 e0       	ldi	r21, 0x02	; 2
    a01c:	b7 01       	movw	r22, r14
    a01e:	82 e1       	ldi	r24, 0x12	; 18
    a020:	90 e0       	ldi	r25, 0x00	; 0
    a022:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    a026:	f8 01       	movw	r30, r16
    a028:	31 97       	sbiw	r30, 0x01	; 1
		PrintByte(23, y, scores.data[i+2] ,true);
    a02a:	21 e0       	ldi	r18, 0x01	; 1
    a02c:	40 81       	ld	r20, Z
    a02e:	b7 01       	movw	r22, r14
    a030:	87 e1       	ldi	r24, 0x17	; 23
    a032:	90 e0       	ldi	r25, 0x00	; 0
    a034:	0e 94 b7 42 	call	0x856e	; 0x856e <PrintByte>
		PrintChar(24, y, '-');
    a038:	4d e2       	ldi	r20, 0x2D	; 45
    a03a:	b7 01       	movw	r22, r14
    a03c:	88 e1       	ldi	r24, 0x18	; 24
    a03e:	90 e0       	ldi	r25, 0x00	; 0
    a040:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
		PrintByte(27, y, scores.data[i+3] ,true);
    a044:	21 e0       	ldi	r18, 0x01	; 1
    a046:	f8 01       	movw	r30, r16
    a048:	40 81       	ld	r20, Z
    a04a:	b7 01       	movw	r22, r14
    a04c:	8b e1       	ldi	r24, 0x1B	; 27
    a04e:	90 e0       	ldi	r25, 0x00	; 0
    a050:	0e 94 b7 42 	call	0x856e	; 0x856e <PrintByte>
		y += 3;
		rank += 1;
    a054:	39 81       	ldd	r19, Y+1	; 0x01
    a056:	3f 5f       	subi	r19, 0xFF	; 255
    a058:	f3 e0       	ldi	r31, 0x03	; 3
    a05a:	ef 0e       	add	r14, r31
    a05c:	f1 1c       	adc	r15, r1
    a05e:	0c 5f       	subi	r16, 0xFC	; 252
    a060:	1f 4f       	sbci	r17, 0xFF	; 255
	MapSprite2(0, map_tank1_up_0, 0);
	MapSprite2(4, map_tank2_up_0, 0);
	MoveSprite(0, 7*8, 1*8, 2, 2);
	MoveSprite(4, 20*8, 1*8, 2, 2);
	Print(10, 2, strHighscores);
	for (u8 i = 0; i < 20; i += 4)
    a062:	36 30       	cpi	r19, 0x06	; 6
    a064:	09 f0       	breq	.+2      	; 0xa068 <load_tank_rank+0x11c>
    a066:	a7 cf       	rjmp	.-178    	; 0x9fb6 <load_tank_rank+0x6a>
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a068:	48 e4       	ldi	r20, 0x48	; 72
    a06a:	52 e0       	ldi	r21, 0x02	; 2
    a06c:	67 e1       	ldi	r22, 0x17	; 23
    a06e:	70 e0       	ldi	r23, 0x00	; 0
    a070:	8a e0       	ldi	r24, 0x0A	; 10
    a072:	90 e0       	ldi	r25, 0x00	; 0
}
    a074:	0f 90       	pop	r0
    a076:	df 91       	pop	r29
    a078:	cf 91       	pop	r28
    a07a:	1f 91       	pop	r17
    a07c:	0f 91       	pop	r16
    a07e:	ff 90       	pop	r15
    a080:	ef 90       	pop	r14
		PrintChar(24, y, '-');
		PrintByte(27, y, scores.data[i+3] ,true);
		y += 3;
		rank += 1;
	}
	Print(10, 23, strCancelHandle);
    a082:	0c 94 ea 42 	jmp	0x85d4	; 0x85d4 <Print>

0000a086 <exit_game>:
	save_eeprom(&scores);
}

void exit_game()
{
	fade_through();
    a086:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <fade_through>
	SetSpriteVisibility(true);
    a08a:	81 e0       	ldi	r24, 0x01	; 1
    a08c:	0e 94 11 41 	call	0x8222	; 0x8222 <SetSpriteVisibility>
	init_game_state();
    a090:	0e 94 18 46 	call	0x8c30	; 0x8c30 <init_game_state>
	load_tank_rank();
    a094:	0c 94 a6 4f 	jmp	0x9f4c	; 0x9f4c <load_tank_rank>

0000a098 <update_level_helper>:
	PrintChar(23, 14, '-');
	PrintByte(26, 14, loser->level_score ,true);
}

void update_level_helper(JoyPadState* p, Player* player, Player* other_player, u8 hud_x)
{
    a098:	af 92       	push	r10
    a09a:	bf 92       	push	r11
    a09c:	cf 92       	push	r12
    a09e:	df 92       	push	r13
    a0a0:	ef 92       	push	r14
    a0a2:	ff 92       	push	r15
    a0a4:	0f 93       	push	r16
    a0a6:	1f 93       	push	r17
    a0a8:	cf 93       	push	r28
    a0aa:	df 93       	push	r29
    a0ac:	8c 01       	movw	r16, r24
    a0ae:	eb 01       	movw	r28, r22
    a0b0:	7a 01       	movw	r14, r20
	Shot* shot;
	u8 next_level;

	if ((p->pressed & BTN_START))
    a0b2:	fc 01       	movw	r30, r24
    a0b4:	80 81       	ld	r24, Z
    a0b6:	83 ff       	sbrs	r24, 3
    a0b8:	09 c0       	rjmp	.+18     	; 0xa0cc <update_level_helper+0x34>
	{
		game.paused = game.paused ^ 1;
    a0ba:	90 91 03 0a 	lds	r25, 0x0A03
    a0be:	81 e0       	ldi	r24, 0x01	; 1
    a0c0:	89 27       	eor	r24, r25
    a0c2:	80 93 03 0a 	sts	0x0A03, r24
		load_level_tiles(false);
    a0c6:	80 e0       	ldi	r24, 0x00	; 0
    a0c8:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <load_level_tiles>
	}
	if (!(game.paused || (player->flags & EXPLODING_FLAG)))
    a0cc:	20 91 03 0a 	lds	r18, 0x0A03
    a0d0:	f8 01       	movw	r30, r16
    a0d2:	80 81       	ld	r24, Z
    a0d4:	91 81       	ldd	r25, Z+1	; 0x01
    a0d6:	21 11       	cpse	r18, r1
    a0d8:	4d c1       	rjmp	.+666    	; 0xa374 <update_level_helper+0x2dc>
    a0da:	2b 89       	ldd	r18, Y+19	; 0x13
    a0dc:	20 fd       	sbrc	r18, 0
    a0de:	4a c1       	rjmp	.+660    	; 0xa374 <update_level_helper+0x2dc>
	{
		if ((p->pressed & BTN_SR) && (player->banter_frame == FRAMES_PER_BANTER))
    a0e0:	93 ff       	sbrs	r25, 3
    a0e2:	0b c0       	rjmp	.+22     	; 0xa0fa <update_level_helper+0x62>
    a0e4:	8c 89       	ldd	r24, Y+20	; 0x14
    a0e6:	8a 35       	cpi	r24, 0x5A	; 90
    a0e8:	41 f4       	brne	.+16     	; 0xa0fa <update_level_helper+0x62>
		{
			player->banter_frame = 0;
    a0ea:	1c 8a       	std	Y+20, r1	; 0x14
			player->banter_index = (u8) LBRandom(0, 9);
    a0ec:	69 e0       	ldi	r22, 0x09	; 9
    a0ee:	70 e0       	ldi	r23, 0x00	; 0
    a0f0:	80 e0       	ldi	r24, 0x00	; 0
    a0f2:	90 e0       	ldi	r25, 0x00	; 0
    a0f4:	0e 94 10 45 	call	0x8a20	; 0x8a20 <LBRandom>
    a0f8:	8d 8b       	std	Y+21, r24	; 0x15
		}
		player->shared.speed = player->max_speed;
    a0fa:	6f 89       	ldd	r22, Y+23	; 0x17
    a0fc:	69 83       	std	Y+1, r22	; 0x01
		if ((p->held & BTN_UP))
    a0fe:	f8 01       	movw	r30, r16
    a100:	84 81       	ldd	r24, Z+4	; 0x04
    a102:	84 ff       	sbrs	r24, 4
    a104:	15 c0       	rjmp	.+42     	; 0xa130 <update_level_helper+0x98>
		{
			player->shared.direction = D_UP;
    a106:	18 82       	st	Y, r1
			player->shared.y -= FRAME_TIME * player->shared.speed;
    a108:	70 e0       	ldi	r23, 0x00	; 0
    a10a:	80 e0       	ldi	r24, 0x00	; 0
    a10c:	90 e0       	ldi	r25, 0x00	; 0
    a10e:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a112:	25 e6       	ldi	r18, 0x65	; 101
    a114:	38 e8       	ldi	r19, 0x88	; 136
    a116:	48 e8       	ldi	r20, 0x88	; 136
    a118:	5c e3       	ldi	r21, 0x3C	; 60
    a11a:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a11e:	9b 01       	movw	r18, r22
    a120:	ac 01       	movw	r20, r24
    a122:	6e 81       	ldd	r22, Y+6	; 0x06
    a124:	7f 81       	ldd	r23, Y+7	; 0x07
    a126:	88 85       	ldd	r24, Y+8	; 0x08
    a128:	99 85       	ldd	r25, Y+9	; 0x09
    a12a:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    a12e:	2f c0       	rjmp	.+94     	; 0xa18e <update_level_helper+0xf6>
		}
		else if ((p->held & BTN_RIGHT))
    a130:	87 ff       	sbrs	r24, 7
    a132:	16 c0       	rjmp	.+44     	; 0xa160 <update_level_helper+0xc8>
		{
			player->shared.direction = D_RIGHT;
    a134:	81 e0       	ldi	r24, 0x01	; 1
    a136:	88 83       	st	Y, r24
			player->shared.x += FRAME_TIME * player->shared.speed;
    a138:	70 e0       	ldi	r23, 0x00	; 0
    a13a:	80 e0       	ldi	r24, 0x00	; 0
    a13c:	90 e0       	ldi	r25, 0x00	; 0
    a13e:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a142:	25 e6       	ldi	r18, 0x65	; 101
    a144:	38 e8       	ldi	r19, 0x88	; 136
    a146:	48 e8       	ldi	r20, 0x88	; 136
    a148:	5c e3       	ldi	r21, 0x3C	; 60
    a14a:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a14e:	9b 01       	movw	r18, r22
    a150:	ac 01       	movw	r20, r24
    a152:	6a 81       	ldd	r22, Y+2	; 0x02
    a154:	7b 81       	ldd	r23, Y+3	; 0x03
    a156:	8c 81       	ldd	r24, Y+4	; 0x04
    a158:	9d 81       	ldd	r25, Y+5	; 0x05
    a15a:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    a15e:	33 c0       	rjmp	.+102    	; 0xa1c6 <update_level_helper+0x12e>
		}
		else if ((p->held & BTN_DOWN))
    a160:	85 ff       	sbrs	r24, 5
    a162:	1a c0       	rjmp	.+52     	; 0xa198 <update_level_helper+0x100>
		{
			player->shared.direction = D_DOWN;
    a164:	82 e0       	ldi	r24, 0x02	; 2
    a166:	88 83       	st	Y, r24
			player->shared.y += FRAME_TIME * player->shared.speed;
    a168:	70 e0       	ldi	r23, 0x00	; 0
    a16a:	80 e0       	ldi	r24, 0x00	; 0
    a16c:	90 e0       	ldi	r25, 0x00	; 0
    a16e:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a172:	25 e6       	ldi	r18, 0x65	; 101
    a174:	38 e8       	ldi	r19, 0x88	; 136
    a176:	48 e8       	ldi	r20, 0x88	; 136
    a178:	5c e3       	ldi	r21, 0x3C	; 60
    a17a:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a17e:	9b 01       	movw	r18, r22
    a180:	ac 01       	movw	r20, r24
    a182:	6e 81       	ldd	r22, Y+6	; 0x06
    a184:	7f 81       	ldd	r23, Y+7	; 0x07
    a186:	88 85       	ldd	r24, Y+8	; 0x08
    a188:	99 85       	ldd	r25, Y+9	; 0x09
    a18a:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    a18e:	6e 83       	std	Y+6, r22	; 0x06
    a190:	7f 83       	std	Y+7, r23	; 0x07
    a192:	88 87       	std	Y+8, r24	; 0x08
    a194:	99 87       	std	Y+9, r25	; 0x09
    a196:	1d c0       	rjmp	.+58     	; 0xa1d2 <update_level_helper+0x13a>
		}
		else if ((p->held & BTN_LEFT))
    a198:	86 ff       	sbrs	r24, 6
    a19a:	1a c0       	rjmp	.+52     	; 0xa1d0 <update_level_helper+0x138>
		{
			player->shared.direction = D_LEFT;
    a19c:	83 e0       	ldi	r24, 0x03	; 3
    a19e:	88 83       	st	Y, r24
			player->shared.x -= FRAME_TIME * player->shared.speed;
    a1a0:	70 e0       	ldi	r23, 0x00	; 0
    a1a2:	80 e0       	ldi	r24, 0x00	; 0
    a1a4:	90 e0       	ldi	r25, 0x00	; 0
    a1a6:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a1aa:	25 e6       	ldi	r18, 0x65	; 101
    a1ac:	38 e8       	ldi	r19, 0x88	; 136
    a1ae:	48 e8       	ldi	r20, 0x88	; 136
    a1b0:	5c e3       	ldi	r21, 0x3C	; 60
    a1b2:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a1b6:	9b 01       	movw	r18, r22
    a1b8:	ac 01       	movw	r20, r24
    a1ba:	6a 81       	ldd	r22, Y+2	; 0x02
    a1bc:	7b 81       	ldd	r23, Y+3	; 0x03
    a1be:	8c 81       	ldd	r24, Y+4	; 0x04
    a1c0:	9d 81       	ldd	r25, Y+5	; 0x05
    a1c2:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    a1c6:	6a 83       	std	Y+2, r22	; 0x02
    a1c8:	7b 83       	std	Y+3, r23	; 0x03
    a1ca:	8c 83       	std	Y+4, r24	; 0x04
    a1cc:	9d 83       	std	Y+5, r25	; 0x05
    a1ce:	01 c0       	rjmp	.+2      	; 0xa1d2 <update_level_helper+0x13a>
		}
		else
		{
			player->shared.speed = 0;
    a1d0:	19 82       	std	Y+1, r1	; 0x01
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
    a1d2:	f8 01       	movw	r30, r16
    a1d4:	80 81       	ld	r24, Z
    a1d6:	91 81       	ldd	r25, Z+1	; 0x01
    a1d8:	90 ff       	sbrs	r25, 0
    a1da:	44 c0       	rjmp	.+136    	; 0xa264 <update_level_helper+0x1cc>
    a1dc:	88 89       	ldd	r24, Y+16	; 0x10
    a1de:	82 30       	cpi	r24, 0x02	; 2
    a1e0:	08 f0       	brcs	.+2      	; 0xa1e4 <update_level_helper+0x14c>
    a1e2:	40 c0       	rjmp	.+128    	; 0xa264 <update_level_helper+0x1cc>
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
				if (!shot->active)
    a1e4:	8f a1       	ldd	r24, Y+39	; 0x27
    a1e6:	81 11       	cpse	r24, r1
    a1e8:	06 c0       	rjmp	.+12     	; 0xa1f6 <update_level_helper+0x15e>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a1ea:	8e 01       	movw	r16, r28
    a1ec:	06 5e       	subi	r16, 0xE6	; 230
    a1ee:	1f 4f       	sbci	r17, 0xFF	; 255
    a1f0:	a1 2c       	mov	r10, r1
    a1f2:	b1 2c       	mov	r11, r1
    a1f4:	0c c0       	rjmp	.+24     	; 0xa20e <update_level_helper+0x176>
				if (!shot->active)
    a1f6:	fe 01       	movw	r30, r28
    a1f8:	e7 5b       	subi	r30, 0xB7	; 183
    a1fa:	ff 4f       	sbci	r31, 0xFF	; 255
    a1fc:	80 81       	ld	r24, Z
    a1fe:	81 11       	cpse	r24, r1
    a200:	31 c0       	rjmp	.+98     	; 0xa264 <update_level_helper+0x1cc>
		}
		if ((p->pressed & BTN_A) && (player->active_shots < MAX_SHOTS))
		{
			for (u8 i = 0; i < MAX_SHOTS; i++)
			{
				shot = &player->shot[i];
    a202:	8e 01       	movw	r16, r28
    a204:	04 5c       	subi	r16, 0xC4	; 196
    a206:	1f 4f       	sbci	r17, 0xFF	; 255
    a208:	aa 24       	eor	r10, r10
    a20a:	a3 94       	inc	r10
    a20c:	b1 2c       	mov	r11, r1
				if (!shot->active)
				{
					if (player->has_rocket)
    a20e:	88 8d       	ldd	r24, Y+24	; 0x18
    a210:	88 23       	and	r24, r24
    a212:	31 f0       	breq	.+12     	; 0xa220 <update_level_helper+0x188>
					{
						init_shot_state(shot, ROCKET_SHOT);
    a214:	61 e0       	ldi	r22, 0x01	; 1
    a216:	c8 01       	movw	r24, r16
    a218:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
						set_shot_animations(shot, ROCKET_SHOT);
    a21c:	61 e0       	ldi	r22, 0x01	; 1
    a21e:	05 c0       	rjmp	.+10     	; 0xa22a <update_level_helper+0x192>
					}
					else
					{
						init_shot_state(shot, BASIC_SHOT);
    a220:	60 e0       	ldi	r22, 0x00	; 0
    a222:	c8 01       	movw	r24, r16
    a224:	0e 94 5f 45 	call	0x8abe	; 0x8abe <init_shot_state>
						set_shot_animations(shot, BASIC_SHOT);
    a228:	60 e0       	ldi	r22, 0x00	; 0
    a22a:	c8 01       	movw	r24, r16
    a22c:	0e 94 7a 45 	call	0x8af4	; 0x8af4 <set_shot_animations>
					}
					player->active_shots++;
    a230:	88 89       	ldd	r24, Y+16	; 0x10
    a232:	8f 5f       	subi	r24, 0xFF	; 255
    a234:	88 8b       	std	Y+16, r24	; 0x10
					shot->shared.direction = player->shared.direction;
    a236:	82 e2       	ldi	r24, 0x22	; 34
    a238:	8a 9d       	mul	r24, r10
    a23a:	60 01       	movw	r12, r0
    a23c:	8b 9d       	mul	r24, r11
    a23e:	d0 0c       	add	r13, r0
    a240:	11 24       	eor	r1, r1
    a242:	cc 0e       	add	r12, r28
    a244:	dd 1e       	adc	r13, r29
    a246:	88 81       	ld	r24, Y
    a248:	f6 01       	movw	r30, r12
    a24a:	82 8f       	std	Z+26, r24	; 0x1a
					position_shot(player, shot);
    a24c:	b8 01       	movw	r22, r16
    a24e:	ce 01       	movw	r24, r28
    a250:	0e 94 dc 46 	call	0x8db8	; 0x8db8 <position_shot>
					shot->active = 1;
    a254:	81 e0       	ldi	r24, 0x01	; 1
    a256:	f6 01       	movw	r30, r12
    a258:	87 a3       	std	Z+39, r24	; 0x27
					if (player->has_over_speed)
    a25a:	89 8d       	ldd	r24, Y+25	; 0x19
    a25c:	88 23       	and	r24, r24
    a25e:	11 f0       	breq	.+4      	; 0xa264 <update_level_helper+0x1cc>
					{
						shot->shared.speed = SHOT_OVER_SPEED;
    a260:	86 e9       	ldi	r24, 0x96	; 150
    a262:	83 8f       	std	Z+27, r24	; 0x1b
    a264:	8e 01       	movw	r16, r28
    a266:	05 5e       	subi	r16, 0xE5	; 229
    a268:	1f 4f       	sbci	r17, 0xFF	; 255
    a26a:	5e 01       	movw	r10, r28
    a26c:	ff e5       	ldi	r31, 0x5F	; 95
    a26e:	af 0e       	add	r10, r31
    a270:	b1 1c       	adc	r11, r1

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
		{
			shot = &player->shot[i];
			if (shot->active)
    a272:	f8 01       	movw	r30, r16
    a274:	84 85       	ldd	r24, Z+12	; 0x0c
    a276:	88 23       	and	r24, r24
    a278:	09 f4       	brne	.+2      	; 0xa27c <update_level_helper+0x1e4>
    a27a:	75 c0       	rjmp	.+234    	; 0xa366 <update_level_helper+0x2ce>
			{
				switch (shot->shared.direction)
    a27c:	82 91       	ld	r24, -Z
    a27e:	6f 01       	movw	r12, r30
    a280:	81 30       	cpi	r24, 0x01	; 1
    a282:	a9 f1       	breq	.+106    	; 0xa2ee <update_level_helper+0x256>
    a284:	e8 f0       	brcs	.+58     	; 0xa2c0 <update_level_helper+0x228>
    a286:	82 30       	cpi	r24, 0x02	; 2
    a288:	09 f4       	brne	.+2      	; 0xa28c <update_level_helper+0x1f4>
    a28a:	48 c0       	rjmp	.+144    	; 0xa31c <update_level_helper+0x284>
    a28c:	83 30       	cpi	r24, 0x03	; 3
    a28e:	09 f0       	breq	.+2      	; 0xa292 <update_level_helper+0x1fa>
    a290:	66 c0       	rjmp	.+204    	; 0xa35e <update_level_helper+0x2c6>
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    a292:	f8 01       	movw	r30, r16
    a294:	60 81       	ld	r22, Z
    a296:	70 e0       	ldi	r23, 0x00	; 0
    a298:	80 e0       	ldi	r24, 0x00	; 0
    a29a:	90 e0       	ldi	r25, 0x00	; 0
    a29c:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a2a0:	25 e6       	ldi	r18, 0x65	; 101
    a2a2:	38 e8       	ldi	r19, 0x88	; 136
    a2a4:	48 e8       	ldi	r20, 0x88	; 136
    a2a6:	5c e3       	ldi	r21, 0x3C	; 60
    a2a8:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a2ac:	9b 01       	movw	r18, r22
    a2ae:	ac 01       	movw	r20, r24
    a2b0:	f8 01       	movw	r30, r16
    a2b2:	61 81       	ldd	r22, Z+1	; 0x01
    a2b4:	72 81       	ldd	r23, Z+2	; 0x02
    a2b6:	83 81       	ldd	r24, Z+3	; 0x03
    a2b8:	94 81       	ldd	r25, Z+4	; 0x04
    a2ba:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    a2be:	4a c0       	rjmp	.+148    	; 0xa354 <update_level_helper+0x2bc>
			shot = &player->shot[i];
			if (shot->active)
			{
				switch (shot->shared.direction)
				{
					case D_UP: shot->shared.y -= FRAME_TIME * shot->shared.speed; break;
    a2c0:	f8 01       	movw	r30, r16
    a2c2:	60 81       	ld	r22, Z
    a2c4:	70 e0       	ldi	r23, 0x00	; 0
    a2c6:	80 e0       	ldi	r24, 0x00	; 0
    a2c8:	90 e0       	ldi	r25, 0x00	; 0
    a2ca:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a2ce:	25 e6       	ldi	r18, 0x65	; 101
    a2d0:	38 e8       	ldi	r19, 0x88	; 136
    a2d2:	48 e8       	ldi	r20, 0x88	; 136
    a2d4:	5c e3       	ldi	r21, 0x3C	; 60
    a2d6:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a2da:	9b 01       	movw	r18, r22
    a2dc:	ac 01       	movw	r20, r24
    a2de:	f8 01       	movw	r30, r16
    a2e0:	65 81       	ldd	r22, Z+5	; 0x05
    a2e2:	76 81       	ldd	r23, Z+6	; 0x06
    a2e4:	87 81       	ldd	r24, Z+7	; 0x07
    a2e6:	90 85       	ldd	r25, Z+8	; 0x08
    a2e8:	0e 94 d7 55 	call	0xabae	; 0xabae <__subsf3>
    a2ec:	2d c0       	rjmp	.+90     	; 0xa348 <update_level_helper+0x2b0>
					case D_RIGHT: shot->shared.x += FRAME_TIME * shot->shared.speed; break;
    a2ee:	f8 01       	movw	r30, r16
    a2f0:	60 81       	ld	r22, Z
    a2f2:	70 e0       	ldi	r23, 0x00	; 0
    a2f4:	80 e0       	ldi	r24, 0x00	; 0
    a2f6:	90 e0       	ldi	r25, 0x00	; 0
    a2f8:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a2fc:	25 e6       	ldi	r18, 0x65	; 101
    a2fe:	38 e8       	ldi	r19, 0x88	; 136
    a300:	48 e8       	ldi	r20, 0x88	; 136
    a302:	5c e3       	ldi	r21, 0x3C	; 60
    a304:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a308:	9b 01       	movw	r18, r22
    a30a:	ac 01       	movw	r20, r24
    a30c:	f8 01       	movw	r30, r16
    a30e:	61 81       	ldd	r22, Z+1	; 0x01
    a310:	72 81       	ldd	r23, Z+2	; 0x02
    a312:	83 81       	ldd	r24, Z+3	; 0x03
    a314:	94 81       	ldd	r25, Z+4	; 0x04
    a316:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    a31a:	1c c0       	rjmp	.+56     	; 0xa354 <update_level_helper+0x2bc>
					case D_DOWN: shot->shared.y += FRAME_TIME * shot->shared.speed; break;
    a31c:	f8 01       	movw	r30, r16
    a31e:	60 81       	ld	r22, Z
    a320:	70 e0       	ldi	r23, 0x00	; 0
    a322:	80 e0       	ldi	r24, 0x00	; 0
    a324:	90 e0       	ldi	r25, 0x00	; 0
    a326:	0e 94 d6 56 	call	0xadac	; 0xadac <__floatsisf>
    a32a:	25 e6       	ldi	r18, 0x65	; 101
    a32c:	38 e8       	ldi	r19, 0x88	; 136
    a32e:	48 e8       	ldi	r20, 0x88	; 136
    a330:	5c e3       	ldi	r21, 0x3C	; 60
    a332:	0e 94 8a 57 	call	0xaf14	; 0xaf14 <__mulsf3>
    a336:	9b 01       	movw	r18, r22
    a338:	ac 01       	movw	r20, r24
    a33a:	f8 01       	movw	r30, r16
    a33c:	65 81       	ldd	r22, Z+5	; 0x05
    a33e:	76 81       	ldd	r23, Z+6	; 0x06
    a340:	87 81       	ldd	r24, Z+7	; 0x07
    a342:	90 85       	ldd	r25, Z+8	; 0x08
    a344:	0e 94 d8 55 	call	0xabb0	; 0xabb0 <__addsf3>
    a348:	f8 01       	movw	r30, r16
    a34a:	65 83       	std	Z+5, r22	; 0x05
    a34c:	76 83       	std	Z+6, r23	; 0x06
    a34e:	87 83       	std	Z+7, r24	; 0x07
    a350:	90 87       	std	Z+8, r25	; 0x08
    a352:	05 c0       	rjmp	.+10     	; 0xa35e <update_level_helper+0x2c6>
					case D_LEFT: shot->shared.x -= FRAME_TIME * shot->shared.speed; break;
    a354:	f8 01       	movw	r30, r16
    a356:	61 83       	std	Z+1, r22	; 0x01
    a358:	72 83       	std	Z+2, r23	; 0x02
    a35a:	83 83       	std	Z+3, r24	; 0x03
    a35c:	94 83       	std	Z+4, r25	; 0x04
					default: break;
				}
				collision_detect_shot(player, shot);
    a35e:	b6 01       	movw	r22, r12
    a360:	ce 01       	movw	r24, r28
    a362:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <collision_detect_shot>
    a366:	0e 5d       	subi	r16, 0xDE	; 222
    a368:	1f 4f       	sbci	r17, 0xFF	; 255
				}
			}
		}

		/* Update Shot */
		for (u8 i = 0; i < MAX_SHOTS; i++)
    a36a:	0a 15       	cp	r16, r10
    a36c:	1b 05       	cpc	r17, r11
    a36e:	09 f0       	breq	.+2      	; 0xa372 <update_level_helper+0x2da>
    a370:	80 cf       	rjmp	.-256    	; 0xa272 <update_level_helper+0x1da>
    a372:	06 c0       	rjmp	.+12     	; 0xa380 <update_level_helper+0x2e8>
			}
		}
	}
	else
	{
		if (p->pressed & BTN_X)
    a374:	91 ff       	sbrs	r25, 1
    a376:	04 c0       	rjmp	.+8      	; 0xa380 <update_level_helper+0x2e8>
		{
			save_score();
    a378:	0e 94 73 46 	call	0x8ce6	; 0x8ce6 <save_score>
			exit_game();
    a37c:	0e 94 43 50 	call	0xa086	; 0xa086 <exit_game>
		}
	}
	
	// Level transition
	if ((player->level_score == MAX_LEVEL_SCORE) && !(other_player->flags & EXPLODING_FLAG))
    a380:	8f 85       	ldd	r24, Y+15	; 0x0f
    a382:	85 30       	cpi	r24, 0x05	; 5
    a384:	99 f5       	brne	.+102    	; 0xa3ec <update_level_helper+0x354>
    a386:	f7 01       	movw	r30, r14
    a388:	83 89       	ldd	r24, Z+19	; 0x13
    a38a:	80 fd       	sbrc	r24, 0
    a38c:	2f c0       	rjmp	.+94     	; 0xa3ec <update_level_helper+0x354>
	{
		save_score();
    a38e:	0e 94 73 46 	call	0x8ce6	; 0x8ce6 <save_score>
		load_level_tiles(true);
    a392:	81 e0       	ldi	r24, 0x01	; 1
    a394:	0e 94 3b 4e 	call	0x9c76	; 0x9c76 <load_level_tiles>
		SetSpriteVisibility(false);
    a398:	80 e0       	ldi	r24, 0x00	; 0
    a39a:	0e 94 11 41 	call	0x8222	; 0x8222 <SetSpriteVisibility>
		print_level_score(player, other_player);
    a39e:	b7 01       	movw	r22, r14
    a3a0:	ce 01       	movw	r24, r28
    a3a2:	0e 94 4a 47 	call	0x8e94	; 0x8e94 <print_level_score>
		LBWaitSeconds(TEXT_LINGER);
    a3a6:	82 e0       	ldi	r24, 0x02	; 2
    a3a8:	0e 94 2d 45 	call	0x8a5a	; 0x8a5a <LBWaitSeconds>
		player->level_score = 0;
    a3ac:	1f 86       	std	Y+15, r1	; 0x0f
		other_player->level_score = 0;
    a3ae:	f7 01       	movw	r30, r14
    a3b0:	17 86       	std	Z+15, r1	; 0x0f
		next_level = game.current_level + 1;
    a3b2:	80 91 02 0a 	lds	r24, 0x0A02
    a3b6:	8f 5f       	subi	r24, 0xFF	; 255
		if (next_level >= LEVEL_COUNT)
    a3b8:	8a 30       	cpi	r24, 0x0A	; 10
    a3ba:	60 f0       	brcs	.+24     	; 0xa3d4 <update_level_helper+0x33c>
		else
		{
			level_transition(next_level);
		}
	}
}
    a3bc:	df 91       	pop	r29
    a3be:	cf 91       	pop	r28
    a3c0:	1f 91       	pop	r17
    a3c2:	0f 91       	pop	r16
    a3c4:	ff 90       	pop	r15
    a3c6:	ef 90       	pop	r14
    a3c8:	df 90       	pop	r13
    a3ca:	cf 90       	pop	r12
    a3cc:	bf 90       	pop	r11
    a3ce:	af 90       	pop	r10
		player->level_score = 0;
		other_player->level_score = 0;
		next_level = game.current_level + 1;
		if (next_level >= LEVEL_COUNT)
		{
			exit_game();
    a3d0:	0c 94 43 50 	jmp	0xa086	; 0xa086 <exit_game>
		else
		{
			level_transition(next_level);
		}
	}
}
    a3d4:	df 91       	pop	r29
    a3d6:	cf 91       	pop	r28
    a3d8:	1f 91       	pop	r17
    a3da:	0f 91       	pop	r16
    a3dc:	ff 90       	pop	r15
    a3de:	ef 90       	pop	r14
    a3e0:	df 90       	pop	r13
    a3e2:	cf 90       	pop	r12
    a3e4:	bf 90       	pop	r11
    a3e6:	af 90       	pop	r10
		{
			exit_game();
		}
		else
		{
			level_transition(next_level);
    a3e8:	0c 94 4a 4f 	jmp	0x9e94	; 0x9e94 <level_transition>
		}
	}
}
    a3ec:	df 91       	pop	r29
    a3ee:	cf 91       	pop	r28
    a3f0:	1f 91       	pop	r17
    a3f2:	0f 91       	pop	r16
    a3f4:	ff 90       	pop	r15
    a3f6:	ef 90       	pop	r14
    a3f8:	df 90       	pop	r13
    a3fa:	cf 90       	pop	r12
    a3fc:	bf 90       	pop	r11
    a3fe:	af 90       	pop	r10
    a400:	08 95       	ret

0000a402 <update_level>:
	Print(14, 2, strVertSep);
	load_level_tiles(false);
}

void update_level(JoyPadState* p1, JoyPadState* p2)
{
    a402:	cf 92       	push	r12
    a404:	df 92       	push	r13
    a406:	ef 92       	push	r14
    a408:	ff 92       	push	r15
    a40a:	1f 93       	push	r17
    a40c:	cf 93       	push	r28
    a40e:	df 93       	push	r29
    a410:	6c 01       	movw	r12, r24
    a412:	7b 01       	movw	r14, r22
	char p2_shot_index = 0;
	static u8 clear_banter_1 = 1;
	static u8 clear_banter_2 = 1;

	// Render
	if (game.paused)
    a414:	80 91 03 0a 	lds	r24, 0x0A03
    a418:	88 23       	and	r24, r24
    a41a:	d1 f0       	breq	.+52     	; 0xa450 <update_level+0x4e>
	{
		SetSpriteVisibility(false);
    a41c:	80 e0       	ldi	r24, 0x00	; 0
    a41e:	0e 94 11 41 	call	0x8222	; 0x8222 <SetSpriteVisibility>
		DrawMap2(8, 12, (const char*) map_pause);
    a422:	4b e0       	ldi	r20, 0x0B	; 11
    a424:	52 e3       	ldi	r21, 0x32	; 50
    a426:	6c e0       	ldi	r22, 0x0C	; 12
    a428:	88 e0       	ldi	r24, 0x08	; 8
    a42a:	0e 94 6a 42 	call	0x84d4	; 0x84d4 <DrawMap2>
		Print(12, 13, strPaused);
    a42e:	4e e6       	ldi	r20, 0x6E	; 110
    a430:	51 e0       	ldi	r21, 0x01	; 1
    a432:	6d e0       	ldi	r22, 0x0D	; 13
    a434:	70 e0       	ldi	r23, 0x00	; 0
    a436:	8c e0       	ldi	r24, 0x0C	; 12
    a438:	90 e0       	ldi	r25, 0x00	; 0
    a43a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
		Print(11, 14, strExit);
    a43e:	45 e7       	ldi	r20, 0x75	; 117
    a440:	51 e0       	ldi	r21, 0x01	; 1
    a442:	6e e0       	ldi	r22, 0x0E	; 14
    a444:	70 e0       	ldi	r23, 0x00	; 0
    a446:	8b e0       	ldi	r24, 0x0B	; 11
    a448:	90 e0       	ldi	r25, 0x00	; 0
    a44a:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    a44e:	44 c0       	rjmp	.+136    	; 0xa4d8 <update_level+0xd6>
	}
	else
	{
		SetSpriteVisibility(true);
    a450:	81 e0       	ldi	r24, 0x01	; 1
    a452:	0e 94 11 41 	call	0x8222	; 0x8222 <SetSpriteVisibility>
		p2_index = tank_map(&player1, p1_index);
    a456:	60 e0       	ldi	r22, 0x00	; 0
    a458:	8e e1       	ldi	r24, 0x1E	; 30
    a45a:	9a e0       	ldi	r25, 0x0A	; 10
    a45c:	0e 94 96 48 	call	0x912c	; 0x912c <tank_map>
    a460:	18 2f       	mov	r17, r24
		p1_shot_index = tank_map(&player2, p2_index);
    a462:	68 2f       	mov	r22, r24
    a464:	8f e8       	ldi	r24, 0x8F	; 143
    a466:	9d e0       	ldi	r25, 0x0D	; 13
    a468:	0e 94 96 48 	call	0x912c	; 0x912c <tank_map>
    a46c:	d8 2f       	mov	r29, r24
		p2_shot_index = shot_map(&player1, p1_shot_index);
    a46e:	68 2f       	mov	r22, r24
    a470:	8e e1       	ldi	r24, 0x1E	; 30
    a472:	9a e0       	ldi	r25, 0x0A	; 10
    a474:	0e 94 18 49 	call	0x9230	; 0x9230 <shot_map>
    a478:	c8 2f       	mov	r28, r24
		shot_map(&player2, p2_shot_index);
    a47a:	68 2f       	mov	r22, r24
    a47c:	8f e8       	ldi	r24, 0x8F	; 143
    a47e:	9d e0       	ldi	r25, 0x0D	; 13
    a480:	0e 94 18 49 	call	0x9230	; 0x9230 <shot_map>
		clear_banter_1 = render_banter(&player1, 15, clear_banter_1);
    a484:	40 91 02 01 	lds	r20, 0x0102
    a488:	6f e0       	ldi	r22, 0x0F	; 15
    a48a:	8e e1       	ldi	r24, 0x1E	; 30
    a48c:	9a e0       	ldi	r25, 0x0A	; 10
    a48e:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <render_banter>
    a492:	80 93 02 01 	sts	0x0102, r24
		clear_banter_2 = render_banter(&player2, 0, clear_banter_2);
    a496:	40 91 01 01 	lds	r20, 0x0101
    a49a:	60 e0       	ldi	r22, 0x00	; 0
    a49c:	8f e8       	ldi	r24, 0x8F	; 143
    a49e:	9d e0       	ldi	r25, 0x0D	; 13
    a4a0:	0e 94 c5 47 	call	0x8f8a	; 0x8f8a <render_banter>
    a4a4:	80 93 01 01 	sts	0x0101, r24
		render_player(&player1, p1_index);
    a4a8:	60 e0       	ldi	r22, 0x00	; 0
    a4aa:	8e e1       	ldi	r24, 0x1E	; 30
    a4ac:	9a e0       	ldi	r25, 0x0A	; 10
    a4ae:	0e 94 ed 47 	call	0x8fda	; 0x8fda <render_player>
		render_player(&player2, p2_index);
    a4b2:	61 2f       	mov	r22, r17
    a4b4:	8f e8       	ldi	r24, 0x8F	; 143
    a4b6:	9d e0       	ldi	r25, 0x0D	; 13
    a4b8:	0e 94 ed 47 	call	0x8fda	; 0x8fda <render_player>
		render_shot(&player1, p1_shot_index);
    a4bc:	6d 2f       	mov	r22, r29
    a4be:	8e e1       	ldi	r24, 0x1E	; 30
    a4c0:	9a e0       	ldi	r25, 0x0A	; 10
    a4c2:	0e 94 16 48 	call	0x902c	; 0x902c <render_shot>
		render_shot(&player2, p2_shot_index);
    a4c6:	6c 2f       	mov	r22, r28
    a4c8:	8f e8       	ldi	r24, 0x8F	; 143
    a4ca:	9d e0       	ldi	r25, 0x0D	; 13
    a4cc:	0e 94 16 48 	call	0x902c	; 0x902c <render_shot>
		render_tile_explosions(&tile_animations);
    a4d0:	85 e0       	ldi	r24, 0x05	; 5
    a4d2:	9a e0       	ldi	r25, 0x0A	; 10
    a4d4:	0e 94 51 48 	call	0x90a2	; 0x90a2 <render_tile_explosions>
	}

	// Update
	update_level_helper(p1, &player1, &player2, 15);
    a4d8:	2f e0       	ldi	r18, 0x0F	; 15
    a4da:	4f e8       	ldi	r20, 0x8F	; 143
    a4dc:	5d e0       	ldi	r21, 0x0D	; 13
    a4de:	6e e1       	ldi	r22, 0x1E	; 30
    a4e0:	7a e0       	ldi	r23, 0x0A	; 10
    a4e2:	c6 01       	movw	r24, r12
    a4e4:	0e 94 4c 50 	call	0xa098	; 0xa098 <update_level_helper>
	update_level_helper(p2, &player2, &player1, 0);
    a4e8:	20 e0       	ldi	r18, 0x00	; 0
    a4ea:	4e e1       	ldi	r20, 0x1E	; 30
    a4ec:	5a e0       	ldi	r21, 0x0A	; 10
    a4ee:	6f e8       	ldi	r22, 0x8F	; 143
    a4f0:	7d e0       	ldi	r23, 0x0D	; 13
    a4f2:	c7 01       	movw	r24, r14
    a4f4:	0e 94 4c 50 	call	0xa098	; 0xa098 <update_level_helper>
	collision_detect_player(&player1, &player2, 0, 15);
    a4f8:	2f e0       	ldi	r18, 0x0F	; 15
    a4fa:	40 e0       	ldi	r20, 0x00	; 0
    a4fc:	6f e8       	ldi	r22, 0x8F	; 143
    a4fe:	7d e0       	ldi	r23, 0x0D	; 13
    a500:	8e e1       	ldi	r24, 0x1E	; 30
    a502:	9a e0       	ldi	r25, 0x0A	; 10
    a504:	0e 94 4a 4d 	call	0x9a94	; 0x9a94 <collision_detect_player>
	collision_detect_player(&player2, &player1, 15, 0);
    a508:	20 e0       	ldi	r18, 0x00	; 0
    a50a:	4f e0       	ldi	r20, 0x0F	; 15
    a50c:	6e e1       	ldi	r22, 0x1E	; 30
    a50e:	7a e0       	ldi	r23, 0x0A	; 10
    a510:	8f e8       	ldi	r24, 0x8F	; 143
    a512:	9d e0       	ldi	r25, 0x0D	; 13
}
    a514:	df 91       	pop	r29
    a516:	cf 91       	pop	r28
    a518:	1f 91       	pop	r17
    a51a:	ff 90       	pop	r15
    a51c:	ef 90       	pop	r14
    a51e:	df 90       	pop	r13
    a520:	cf 90       	pop	r12

	// Update
	update_level_helper(p1, &player1, &player2, 15);
	update_level_helper(p2, &player2, &player1, 0);
	collision_detect_player(&player1, &player2, 0, 15);
	collision_detect_player(&player2, &player1, 15, 0);
    a522:	0c 94 4a 4d 	jmp	0x9a94	; 0x9a94 <collision_detect_player>

0000a526 <update_tank_rank>:
}

void update_tank_rank(JoyPadState* p1, JoyPadState* p2)
{
	// Update
	if (p1->pressed & BTN_X)
    a526:	fc 01       	movw	r30, r24
    a528:	80 81       	ld	r24, Z
    a52a:	91 81       	ldd	r25, Z+1	; 0x01
    a52c:	91 ff       	sbrs	r25, 1
    a52e:	04 c0       	rjmp	.+8      	; 0xa538 <update_tank_rank+0x12>
	{
		fade_through();
    a530:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <fade_through>
		load_splash();
    a534:	0c 94 76 4f 	jmp	0x9eec	; 0x9eec <load_splash>
    a538:	08 95       	ret

0000a53a <_handle_select_helper>:
	}
}


void _handle_select_helper(HandleSelectState* ps, JoyPadState* p, Player* player)
{
    a53a:	0f 93       	push	r16
    a53c:	1f 93       	push	r17
    a53e:	cf 93       	push	r28
    a540:	df 93       	push	r29
    a542:	ec 01       	movw	r28, r24
	if ((p->pressed & BTN_UP) && (ps->select_state == SELECTING))
    a544:	fb 01       	movw	r30, r22
    a546:	20 81       	ld	r18, Z
    a548:	31 81       	ldd	r19, Z+1	; 0x01
    a54a:	d9 01       	movw	r26, r18
    a54c:	a0 71       	andi	r26, 0x10	; 16
    a54e:	bb 27       	eor	r27, r27
    a550:	24 ff       	sbrs	r18, 4
    a552:	09 c0       	rjmp	.+18     	; 0xa566 <_handle_select_helper+0x2c>
    a554:	8d 81       	ldd	r24, Y+5	; 0x05
    a556:	81 11       	cpse	r24, r1
    a558:	06 c0       	rjmp	.+12     	; 0xa566 <_handle_select_helper+0x2c>
	{
		ps->handle_id--;
    a55a:	88 81       	ld	r24, Y
    a55c:	81 50       	subi	r24, 0x01	; 1
		if (ps->handle_id < 0) ps->handle_id = 0;
    a55e:	87 ff       	sbrs	r24, 7
    a560:	0f c0       	rjmp	.+30     	; 0xa580 <_handle_select_helper+0x46>
    a562:	18 82       	st	Y, r1
    a564:	95 c0       	rjmp	.+298    	; 0xa690 <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == SELECTING))
    a566:	b9 01       	movw	r22, r18
    a568:	60 72       	andi	r22, 0x20	; 32
    a56a:	77 27       	eor	r23, r23
    a56c:	25 ff       	sbrs	r18, 5
    a56e:	0a c0       	rjmp	.+20     	; 0xa584 <_handle_select_helper+0x4a>
    a570:	8d 81       	ldd	r24, Y+5	; 0x05
    a572:	81 11       	cpse	r24, r1
    a574:	07 c0       	rjmp	.+14     	; 0xa584 <_handle_select_helper+0x4a>
	{
		ps->handle_id++;
    a576:	88 81       	ld	r24, Y
    a578:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->handle_id > 8) ps->handle_id = 8;
    a57a:	89 30       	cpi	r24, 0x09	; 9
    a57c:	0c f0       	brlt	.+2      	; 0xa580 <_handle_select_helper+0x46>
    a57e:	88 e0       	ldi	r24, 0x08	; 8
    a580:	88 83       	st	Y, r24
    a582:	86 c0       	rjmp	.+268    	; 0xa690 <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
    a584:	f9 01       	movw	r30, r18
    a586:	ee 27       	eor	r30, r30
    a588:	f1 70       	andi	r31, 0x01	; 1
    a58a:	30 ff       	sbrs	r19, 0
    a58c:	14 c0       	rjmp	.+40     	; 0xa5b6 <_handle_select_helper+0x7c>
    a58e:	8d 81       	ldd	r24, Y+5	; 0x05
    a590:	81 11       	cpse	r24, r1
    a592:	11 c0       	rjmp	.+34     	; 0xa5b6 <_handle_select_helper+0x7c>
	{
		ps->select_state = EDITING;
    a594:	81 e0       	ldi	r24, 0x01	; 1
    a596:	8d 83       	std	Y+5, r24	; 0x05
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    a598:	69 91       	ld	r22, Y+
    a59a:	f3 e0       	ldi	r31, 0x03	; 3
    a59c:	6f 02       	muls	r22, r31
    a59e:	b0 01       	movw	r22, r0
    a5a0:	11 24       	eor	r1, r1
    a5a2:	6a 5d       	subi	r22, 0xDA	; 218
    a5a4:	7e 4f       	sbci	r23, 0xFE	; 254
    a5a6:	43 e0       	ldi	r20, 0x03	; 3
    a5a8:	ce 01       	movw	r24, r28
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
	}
}
    a5aa:	df 91       	pop	r29
    a5ac:	cf 91       	pop	r28
    a5ae:	1f 91       	pop	r17
    a5b0:	0f 91       	pop	r16
		if (ps->handle_id > 8) ps->handle_id = 8;
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == SELECTING))
	{
		ps->select_state = EDITING;
		LBCopyChars(ps->handle, &handles.data[ps->handle_id*3], 3);
    a5b2:	0c 94 d3 43 	jmp	0x87a6	; 0x87a6 <LBCopyChars>
	}
	else if ((p->pressed & BTN_RIGHT) && (ps->select_state == EDITING))
    a5b6:	27 ff       	sbrs	r18, 7
    a5b8:	0a c0       	rjmp	.+20     	; 0xa5ce <_handle_select_helper+0x94>
    a5ba:	8d 81       	ldd	r24, Y+5	; 0x05
    a5bc:	81 30       	cpi	r24, 0x01	; 1
    a5be:	39 f4       	brne	.+14     	; 0xa5ce <_handle_select_helper+0x94>
	{
		ps->char_index++;
    a5c0:	8c 81       	ldd	r24, Y+4	; 0x04
    a5c2:	8f 5f       	subi	r24, 0xFF	; 255
		if (ps->char_index > 2) ps->char_index = 2;
    a5c4:	83 30       	cpi	r24, 0x03	; 3
    a5c6:	0c f0       	brlt	.+2      	; 0xa5ca <_handle_select_helper+0x90>
    a5c8:	82 e0       	ldi	r24, 0x02	; 2
    a5ca:	8c 83       	std	Y+4, r24	; 0x04
    a5cc:	61 c0       	rjmp	.+194    	; 0xa690 <_handle_select_helper+0x156>
    a5ce:	ca 01       	movw	r24, r20
	}
	else if ((p->pressed & BTN_LEFT) && (ps->select_state == EDITING))
    a5d0:	26 ff       	sbrs	r18, 6
    a5d2:	09 c0       	rjmp	.+18     	; 0xa5e6 <_handle_select_helper+0xac>
    a5d4:	4d 81       	ldd	r20, Y+5	; 0x05
    a5d6:	41 30       	cpi	r20, 0x01	; 1
    a5d8:	29 f5       	brne	.+74     	; 0xa624 <_handle_select_helper+0xea>
	{
		ps->char_index--;
    a5da:	8c 81       	ldd	r24, Y+4	; 0x04
    a5dc:	81 50       	subi	r24, 0x01	; 1
		if (ps->char_index < 0) ps->char_index = 0;
    a5de:	87 ff       	sbrs	r24, 7
    a5e0:	f4 cf       	rjmp	.-24     	; 0xa5ca <_handle_select_helper+0x90>
    a5e2:	1c 82       	std	Y+4, r1	; 0x04
    a5e4:	55 c0       	rjmp	.+170    	; 0xa690 <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
    a5e6:	ab 2b       	or	r26, r27
    a5e8:	61 f0       	breq	.+24     	; 0xa602 <_handle_select_helper+0xc8>
    a5ea:	8d 81       	ldd	r24, Y+5	; 0x05
    a5ec:	81 30       	cpi	r24, 0x01	; 1
    a5ee:	e1 f5       	brne	.+120    	; 0xa668 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]--;
    a5f0:	8c 81       	ldd	r24, Y+4	; 0x04
    a5f2:	c8 0f       	add	r28, r24
    a5f4:	d1 1d       	adc	r29, r1
    a5f6:	99 81       	ldd	r25, Y+1	; 0x01
    a5f8:	91 50       	subi	r25, 0x01	; 1
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
    a5fa:	91 34       	cpi	r25, 0x41	; 65
    a5fc:	70 f4       	brcc	.+28     	; 0xa61a <_handle_select_helper+0xe0>
    a5fe:	81 e4       	ldi	r24, 0x41	; 65
    a600:	0f c0       	rjmp	.+30     	; 0xa620 <_handle_select_helper+0xe6>
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    a602:	67 2b       	or	r22, r23
    a604:	89 f0       	breq	.+34     	; 0xa628 <_handle_select_helper+0xee>
    a606:	8d 81       	ldd	r24, Y+5	; 0x05
    a608:	81 30       	cpi	r24, 0x01	; 1
    a60a:	71 f5       	brne	.+92     	; 0xa668 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
    a60c:	8c 81       	ldd	r24, Y+4	; 0x04
    a60e:	c8 0f       	add	r28, r24
    a610:	d1 1d       	adc	r29, r1
    a612:	99 81       	ldd	r25, Y+1	; 0x01
    a614:	9f 5f       	subi	r25, 0xFF	; 255
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    a616:	9b 35       	cpi	r25, 0x5B	; 91
    a618:	10 f4       	brcc	.+4      	; 0xa61e <_handle_select_helper+0xe4>
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]++;
    a61a:	99 83       	std	Y+1, r25	; 0x01
    a61c:	39 c0       	rjmp	.+114    	; 0xa690 <_handle_select_helper+0x156>
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
    a61e:	8a e5       	ldi	r24, 0x5A	; 90
    a620:	89 83       	std	Y+1, r24	; 0x01
    a622:	36 c0       	rjmp	.+108    	; 0xa690 <_handle_select_helper+0x156>
	else if ((p->pressed & BTN_UP) && (ps->select_state == EDITING))
	{
		ps->handle[(u8) ps->char_index]--;
		if (ps->handle[(u8) ps->char_index] < 'A') ps->handle[(u8) ps->char_index] = 'A';
	}
	else if ((p->pressed & BTN_DOWN) && (ps->select_state == EDITING))
    a624:	67 2b       	or	r22, r23
    a626:	01 f5       	brne	.+64     	; 0xa668 <_handle_select_helper+0x12e>
	{
		ps->handle[(u8) ps->char_index]++;
		if (ps->handle[(u8) ps->char_index] > 'Z') ps->handle[(u8) ps->char_index] = 'Z';
	}
	else if ((p->pressed & BTN_A) && (ps->select_state == EDITING))
    a628:	ef 2b       	or	r30, r31
    a62a:	f1 f0       	breq	.+60     	; 0xa668 <_handle_select_helper+0x12e>
    a62c:	4d 81       	ldd	r20, Y+5	; 0x05
    a62e:	41 30       	cpi	r20, 0x01	; 1
    a630:	d9 f4       	brne	.+54     	; 0xa668 <_handle_select_helper+0x12e>
	{
		player->handle_id = ps->handle_id;
    a632:	fe 01       	movw	r30, r28
    a634:	21 91       	ld	r18, Z+
    a636:	8f 01       	movw	r16, r30
    a638:	fc 01       	movw	r30, r24
    a63a:	22 87       	std	Z+10, r18	; 0x0a
		LBCopyChars(player->handle, ps->handle, 3);
    a63c:	43 e0       	ldi	r20, 0x03	; 3
    a63e:	b8 01       	movw	r22, r16
    a640:	0b 96       	adiw	r24, 0x0b	; 11
    a642:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
    a646:	88 81       	ld	r24, Y
    a648:	f3 e0       	ldi	r31, 0x03	; 3
    a64a:	8f 02       	muls	r24, r31
    a64c:	c0 01       	movw	r24, r0
    a64e:	11 24       	eor	r1, r1
    a650:	43 e0       	ldi	r20, 0x03	; 3
    a652:	b8 01       	movw	r22, r16
    a654:	8a 5d       	subi	r24, 0xDA	; 218
    a656:	9e 4f       	sbci	r25, 0xFE	; 254
    a658:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
void save_eeprom(struct EepromBlockStruct* block)
/*
 * Save to EEPROM
 */
{
	EepromWriteBlock(block);
    a65c:	84 e2       	ldi	r24, 0x24	; 36
    a65e:	91 e0       	ldi	r25, 0x01	; 1
    a660:	0e 94 05 36 	call	0x6c0a	; 0x6c0a <EepromWriteBlock>
	{
		player->handle_id = ps->handle_id;
		LBCopyChars(player->handle, ps->handle, 3);
		LBCopyChars(&handles.data[ps->handle_id*3], ps->handle, 3);
		save_eeprom(&handles);
		ps->select_state = CONFIRMED;
    a664:	82 e0       	ldi	r24, 0x02	; 2
    a666:	0a c0       	rjmp	.+20     	; 0xa67c <_handle_select_helper+0x142>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == EDITING))
    a668:	31 ff       	sbrs	r19, 1
    a66a:	12 c0       	rjmp	.+36     	; 0xa690 <_handle_select_helper+0x156>
    a66c:	8d 81       	ldd	r24, Y+5	; 0x05
    a66e:	81 30       	cpi	r24, 0x01	; 1
    a670:	11 f4       	brne	.+4      	; 0xa676 <_handle_select_helper+0x13c>
	{
		ps->select_state = SELECTING;
    a672:	1d 82       	std	Y+5, r1	; 0x05
    a674:	0d c0       	rjmp	.+26     	; 0xa690 <_handle_select_helper+0x156>
	}
	else if ((p->pressed & BTN_X) && (ps->select_state == CONFIRMED))
    a676:	82 30       	cpi	r24, 0x02	; 2
    a678:	19 f4       	brne	.+6      	; 0xa680 <_handle_select_helper+0x146>
		{
			ps->select_state = EDITING;
    a67a:	81 e0       	ldi	r24, 0x01	; 1
    a67c:	8d 83       	std	Y+5, r24	; 0x05
    a67e:	08 c0       	rjmp	.+16     	; 0xa690 <_handle_select_helper+0x156>
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
    a680:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <fade_through>
		load_splash();
	}
}
    a684:	df 91       	pop	r29
    a686:	cf 91       	pop	r28
    a688:	1f 91       	pop	r17
    a68a:	0f 91       	pop	r16
			ps->select_state = EDITING;
		}
	else if ((p->pressed & BTN_X))
	{
		fade_through();
		load_splash();
    a68c:	0c 94 76 4f 	jmp	0x9eec	; 0x9eec <load_splash>
	}
}
    a690:	df 91       	pop	r29
    a692:	cf 91       	pop	r28
    a694:	1f 91       	pop	r17
    a696:	0f 91       	pop	r16
    a698:	08 95       	ret

0000a69a <_handle_select_render_helper>:

void _handle_select_render_helper(HandleSelectState* ps, JoyPadState* p, u8 x_offset, u8 idx)
{
    a69a:	af 92       	push	r10
    a69c:	bf 92       	push	r11
    a69e:	cf 92       	push	r12
    a6a0:	df 92       	push	r13
    a6a2:	ef 92       	push	r14
    a6a4:	ff 92       	push	r15
    a6a6:	0f 93       	push	r16
    a6a8:	1f 93       	push	r17
    a6aa:	cf 93       	push	r28
    a6ac:	df 93       	push	r29
    a6ae:	00 d0       	rcall	.+0      	; 0xa6b0 <_handle_select_render_helper+0x16>
    a6b0:	1f 92       	push	r1
    a6b2:	cd b7       	in	r28, 0x3d	; 61
    a6b4:	de b7       	in	r29, 0x3e	; 62
    a6b6:	7c 01       	movw	r14, r24
    a6b8:	b4 2e       	mov	r11, r20
    a6ba:	12 2f       	mov	r17, r18
	u8 tmp[3] = {' ', ' ', ' '};
    a6bc:	80 e2       	ldi	r24, 0x20	; 32
    a6be:	89 83       	std	Y+1, r24	; 0x01
    a6c0:	8a 83       	std	Y+2, r24	; 0x02
    a6c2:	8b 83       	std	Y+3, r24	; 0x03
	if (ps->select_state == SELECTING)
    a6c4:	f7 01       	movw	r30, r14
    a6c6:	85 81       	ldd	r24, Z+5	; 0x05
    a6c8:	81 11       	cpse	r24, r1
    a6ca:	1d c0       	rjmp	.+58     	; 0xa706 <_handle_select_render_helper+0x6c>
	{
		MapSprite2(idx, map_ball, 0);
    a6cc:	40 e0       	ldi	r20, 0x00	; 0
    a6ce:	66 e9       	ldi	r22, 0x96	; 150
    a6d0:	71 e3       	ldi	r23, 0x31	; 49
    a6d2:	82 2f       	mov	r24, r18
    a6d4:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    a6d8:	40 e0       	ldi	r20, 0x00	; 0
    a6da:	6b ed       	ldi	r22, 0xDB	; 219
    a6dc:	71 e3       	ldi	r23, 0x31	; 49
    a6de:	81 e0       	ldi	r24, 0x01	; 1
    a6e0:	81 0f       	add	r24, r17
    a6e2:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
		MoveSprite(idx, x_offset*8, (8 + ps->handle_id)*8, 1, 1);
    a6e6:	f7 01       	movw	r30, r14
    a6e8:	40 81       	ld	r20, Z
    a6ea:	44 0f       	add	r20, r20
    a6ec:	44 0f       	add	r20, r20
    a6ee:	44 0f       	add	r20, r20
    a6f0:	40 5c       	subi	r20, 0xC0	; 192
    a6f2:	01 e0       	ldi	r16, 0x01	; 1
    a6f4:	21 e0       	ldi	r18, 0x01	; 1
    a6f6:	6b 2d       	mov	r22, r11
    a6f8:	66 0f       	add	r22, r22
    a6fa:	66 0f       	add	r22, r22
    a6fc:	66 0f       	add	r22, r22
    a6fe:	81 2f       	mov	r24, r17
    a700:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
    a704:	6f c0       	rjmp	.+222    	; 0xa7e4 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == EDITING)
    a706:	81 30       	cpi	r24, 0x01	; 1
    a708:	09 f0       	breq	.+2      	; 0xa70c <_handle_select_render_helper+0x72>
    a70a:	44 c0       	rjmp	.+136    	; 0xa794 <_handle_select_render_helper+0xfa>
	{
		MapSprite2(idx, map_ball, 0);
    a70c:	40 e0       	ldi	r20, 0x00	; 0
    a70e:	66 e9       	ldi	r22, 0x96	; 150
    a710:	71 e3       	ldi	r23, 0x31	; 49
    a712:	82 2f       	mov	r24, r18
    a714:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
		MapSprite2(idx+1, map_ball, 0);
    a718:	aa 24       	eor	r10, r10
    a71a:	a3 94       	inc	r10
    a71c:	a1 0e       	add	r10, r17
    a71e:	40 e0       	ldi	r20, 0x00	; 0
    a720:	66 e9       	ldi	r22, 0x96	; 150
    a722:	71 e3       	ldi	r23, 0x31	; 49
    a724:	8a 2d       	mov	r24, r10
    a726:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
		MoveSprite(idx, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id - 1)*8, 1, 1);
    a72a:	cb 2c       	mov	r12, r11
    a72c:	d1 2c       	mov	r13, r1
    a72e:	f5 e0       	ldi	r31, 0x05	; 5
    a730:	cf 0e       	add	r12, r31
    a732:	d1 1c       	adc	r13, r1
    a734:	f7 01       	movw	r30, r14
    a736:	40 81       	ld	r20, Z
    a738:	44 0f       	add	r20, r20
    a73a:	44 0f       	add	r20, r20
    a73c:	44 0f       	add	r20, r20
    a73e:	48 5c       	subi	r20, 0xC8	; 200
    a740:	84 81       	ldd	r24, Z+4	; 0x04
    a742:	b6 01       	movw	r22, r12
    a744:	68 0f       	add	r22, r24
    a746:	71 1d       	adc	r23, r1
    a748:	87 fd       	sbrc	r24, 7
    a74a:	7a 95       	dec	r23
    a74c:	66 0f       	add	r22, r22
    a74e:	66 0f       	add	r22, r22
    a750:	66 0f       	add	r22, r22
    a752:	01 e0       	ldi	r16, 0x01	; 1
    a754:	21 e0       	ldi	r18, 0x01	; 1
    a756:	81 2f       	mov	r24, r17
    a758:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
		MoveSprite(idx+1, (x_offset+5+ps->char_index)*8, (8 + ps->handle_id + 1)*8, 1, 1);
    a75c:	f7 01       	movw	r30, r14
    a75e:	40 81       	ld	r20, Z
    a760:	44 0f       	add	r20, r20
    a762:	44 0f       	add	r20, r20
    a764:	44 0f       	add	r20, r20
    a766:	48 5b       	subi	r20, 0xB8	; 184
    a768:	84 81       	ldd	r24, Z+4	; 0x04
    a76a:	c8 0e       	add	r12, r24
    a76c:	d1 1c       	adc	r13, r1
    a76e:	87 fd       	sbrc	r24, 7
    a770:	da 94       	dec	r13
    a772:	6c 2d       	mov	r22, r12
    a774:	66 0f       	add	r22, r22
    a776:	66 0f       	add	r22, r22
    a778:	66 0f       	add	r22, r22
    a77a:	21 e0       	ldi	r18, 0x01	; 1
    a77c:	8a 2d       	mov	r24, r10
    a77e:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
		LBCopyChars(tmp, ps->handle, 3);
    a782:	43 e0       	ldi	r20, 0x03	; 3
    a784:	b7 01       	movw	r22, r14
    a786:	6f 5f       	subi	r22, 0xFF	; 255
    a788:	7f 4f       	sbci	r23, 0xFF	; 255
    a78a:	ce 01       	movw	r24, r28
    a78c:	01 96       	adiw	r24, 0x01	; 1
    a78e:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
    a792:	28 c0       	rjmp	.+80     	; 0xa7e4 <_handle_select_render_helper+0x14a>
	}
	else if (ps->select_state == CONFIRMED)
    a794:	82 30       	cpi	r24, 0x02	; 2
    a796:	31 f5       	brne	.+76     	; 0xa7e4 <_handle_select_render_helper+0x14a>
	{
		PrintChar(x_offset+6, 5, '(');
    a798:	c4 2e       	mov	r12, r20
    a79a:	d1 2c       	mov	r13, r1
    a79c:	48 e2       	ldi	r20, 0x28	; 40
    a79e:	65 e0       	ldi	r22, 0x05	; 5
    a7a0:	70 e0       	ldi	r23, 0x00	; 0
    a7a2:	c6 01       	movw	r24, r12
    a7a4:	06 96       	adiw	r24, 0x06	; 6
    a7a6:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
		LBPrintStr(x_offset+7, 5, ps->handle, 3);
    a7aa:	23 e0       	ldi	r18, 0x03	; 3
    a7ac:	a7 01       	movw	r20, r14
    a7ae:	4f 5f       	subi	r20, 0xFF	; 255
    a7b0:	5f 4f       	sbci	r21, 0xFF	; 255
    a7b2:	65 e0       	ldi	r22, 0x05	; 5
    a7b4:	87 e0       	ldi	r24, 0x07	; 7
    a7b6:	8b 0d       	add	r24, r11
    a7b8:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
		PrintChar(x_offset+10, 5, ')');
    a7bc:	49 e2       	ldi	r20, 0x29	; 41
    a7be:	65 e0       	ldi	r22, 0x05	; 5
    a7c0:	70 e0       	ldi	r23, 0x00	; 0
    a7c2:	c6 01       	movw	r24, r12
    a7c4:	0a 96       	adiw	r24, 0x0a	; 10
    a7c6:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
		MapSprite2(idx, map_none, 0);
    a7ca:	40 e0       	ldi	r20, 0x00	; 0
    a7cc:	6b ed       	ldi	r22, 0xDB	; 219
    a7ce:	71 e3       	ldi	r23, 0x31	; 49
    a7d0:	81 2f       	mov	r24, r17
    a7d2:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
		MapSprite2(idx+1, map_none, 0);
    a7d6:	40 e0       	ldi	r20, 0x00	; 0
    a7d8:	6b ed       	ldi	r22, 0xDB	; 219
    a7da:	71 e3       	ldi	r23, 0x31	; 49
    a7dc:	81 e0       	ldi	r24, 0x01	; 1
    a7de:	81 0f       	add	r24, r17
    a7e0:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	}
	LBPrintStr(x_offset+5, (8 + ps->handle_id), tmp, 3);
    a7e4:	f7 01       	movw	r30, r14
    a7e6:	60 81       	ld	r22, Z
    a7e8:	68 5f       	subi	r22, 0xF8	; 248
    a7ea:	23 e0       	ldi	r18, 0x03	; 3
    a7ec:	ae 01       	movw	r20, r28
    a7ee:	4f 5f       	subi	r20, 0xFF	; 255
    a7f0:	5f 4f       	sbci	r21, 0xFF	; 255
    a7f2:	85 e0       	ldi	r24, 0x05	; 5
    a7f4:	8b 0d       	add	r24, r11
    a7f6:	0e 94 df 43 	call	0x87be	; 0x87be <LBPrintStr>
}
    a7fa:	0f 90       	pop	r0
    a7fc:	0f 90       	pop	r0
    a7fe:	0f 90       	pop	r0
    a800:	df 91       	pop	r29
    a802:	cf 91       	pop	r28
    a804:	1f 91       	pop	r17
    a806:	0f 91       	pop	r16
    a808:	ff 90       	pop	r15
    a80a:	ef 90       	pop	r14
    a80c:	df 90       	pop	r13
    a80e:	cf 90       	pop	r12
    a810:	bf 90       	pop	r11
    a812:	af 90       	pop	r10
    a814:	08 95       	ret

0000a816 <load_handle_select>:

void load_handle_select()
{
    a816:	8f 92       	push	r8
    a818:	9f 92       	push	r9
    a81a:	af 92       	push	r10
    a81c:	bf 92       	push	r11
    a81e:	cf 92       	push	r12
    a820:	df 92       	push	r13
    a822:	ef 92       	push	r14
    a824:	ff 92       	push	r15
    a826:	0f 93       	push	r16
    a828:	1f 93       	push	r17
    a82a:	cf 93       	push	r28
    a82c:	df 93       	push	r29
	game.current_screen = HANDLE_SELECT;
    a82e:	82 e0       	ldi	r24, 0x02	; 2
    a830:	80 93 01 0a 	sts	0x0A01, r24
	clear_sprites();
    a834:	0e 94 66 46 	call	0x8ccc	; 0x8ccc <clear_sprites>
	MapSprite2(0, map_tank1_up_0, 0);
    a838:	40 e0       	ldi	r20, 0x00	; 0
    a83a:	65 ed       	ldi	r22, 0xD5	; 213
    a83c:	71 e3       	ldi	r23, 0x31	; 49
    a83e:	80 e0       	ldi	r24, 0x00	; 0
    a840:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	MapSprite2(4, map_tank2_up_0, 0);
    a844:	40 e0       	ldi	r20, 0x00	; 0
    a846:	6d eb       	ldi	r22, 0xBD	; 189
    a848:	71 e3       	ldi	r23, 0x31	; 49
    a84a:	84 e0       	ldi	r24, 0x04	; 4
    a84c:	0e 94 e8 41 	call	0x83d0	; 0x83d0 <MapSprite2>
	MoveSprite(0, 3*8, 4*8, 2, 2);
    a850:	02 e0       	ldi	r16, 0x02	; 2
    a852:	22 e0       	ldi	r18, 0x02	; 2
    a854:	40 e2       	ldi	r20, 0x20	; 32
    a856:	68 e1       	ldi	r22, 0x18	; 24
    a858:	80 e0       	ldi	r24, 0x00	; 0
    a85a:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
	MoveSprite(4, 20*8, 4*8, 2, 2);
    a85e:	22 e0       	ldi	r18, 0x02	; 2
    a860:	40 e2       	ldi	r20, 0x20	; 32
    a862:	60 ea       	ldi	r22, 0xA0	; 160
    a864:	84 e0       	ldi	r24, 0x04	; 4
    a866:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
	Print(9, 1, strHandlesTitle);
    a86a:	4e e7       	ldi	r20, 0x7E	; 126
    a86c:	52 e0       	ldi	r21, 0x02	; 2
    a86e:	61 e0       	ldi	r22, 0x01	; 1
    a870:	70 e0       	ldi	r23, 0x00	; 0
    a872:	89 e0       	ldi	r24, 0x09	; 9
    a874:	90 e0       	ldi	r25, 0x00	; 0
    a876:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(6, 5, strPlayer1);
    a87a:	4d e6       	ldi	r20, 0x6D	; 109
    a87c:	52 e0       	ldi	r21, 0x02	; 2
    a87e:	65 e0       	ldi	r22, 0x05	; 5
    a880:	70 e0       	ldi	r23, 0x00	; 0
    a882:	86 e0       	ldi	r24, 0x06	; 6
    a884:	90 e0       	ldi	r25, 0x00	; 0
    a886:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(23, 5, strPlayer2);
    a88a:	4a e6       	ldi	r20, 0x6A	; 106
    a88c:	52 e0       	ldi	r21, 0x02	; 2
    a88e:	65 e0       	ldi	r22, 0x05	; 5
    a890:	70 e0       	ldi	r23, 0x00	; 0
    a892:	87 e1       	ldi	r24, 0x17	; 23
    a894:	90 e0       	ldi	r25, 0x00	; 0
    a896:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
    a89a:	86 e2       	ldi	r24, 0x26	; 38
    a89c:	e8 2e       	mov	r14, r24
    a89e:	81 e0       	ldi	r24, 0x01	; 1
    a8a0:	f8 2e       	mov	r15, r24
	for (int i = 0; i < 27; i += 1)
    a8a2:	c0 e0       	ldi	r28, 0x00	; 0
    a8a4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
    a8a6:	93 e0       	ldi	r25, 0x03	; 3
    a8a8:	a9 2e       	mov	r10, r25
    a8aa:	b1 2c       	mov	r11, r1
    a8ac:	67 01       	movw	r12, r14
    a8ae:	ce 01       	movw	r24, r28
    a8b0:	b5 01       	movw	r22, r10
    a8b2:	0e 94 bd 55 	call	0xab7a	; 0xab7a <__divmodhi4>
    a8b6:	4c 01       	movw	r8, r24
    a8b8:	8b 01       	movw	r16, r22
    a8ba:	08 5f       	subi	r16, 0xF8	; 248
    a8bc:	1f 4f       	sbci	r17, 0xFF	; 255
    a8be:	f7 01       	movw	r30, r14
    a8c0:	41 91       	ld	r20, Z+
    a8c2:	7f 01       	movw	r14, r30
    a8c4:	b8 01       	movw	r22, r16
    a8c6:	03 96       	adiw	r24, 0x03	; 3
    a8c8:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
    a8cc:	f6 01       	movw	r30, r12
    a8ce:	40 81       	ld	r20, Z
    a8d0:	b8 01       	movw	r22, r16
    a8d2:	c4 01       	movw	r24, r8
    a8d4:	44 96       	adiw	r24, 0x14	; 20
    a8d6:	0e 94 05 43 	call	0x860a	; 0x860a <PrintChar>
	MoveSprite(0, 3*8, 4*8, 2, 2);
	MoveSprite(4, 20*8, 4*8, 2, 2);
	Print(9, 1, strHandlesTitle);
	Print(6, 5, strPlayer1);
	Print(23, 5, strPlayer2);
	for (int i = 0; i < 27; i += 1)
    a8da:	21 96       	adiw	r28, 0x01	; 1
    a8dc:	cb 31       	cpi	r28, 0x1B	; 27
    a8de:	d1 05       	cpc	r29, r1
    a8e0:	29 f7       	brne	.-54     	; 0xa8ac <load_handle_select+0x96>
	{
		PrintChar((i % 3) + 3, 8 + (i / 3), handles.data[i]);
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
    a8e2:	4f e5       	ldi	r20, 0x5F	; 95
    a8e4:	52 e0       	ldi	r21, 0x02	; 2
    a8e6:	65 e1       	ldi	r22, 0x15	; 21
    a8e8:	70 e0       	ldi	r23, 0x00	; 0
    a8ea:	88 e0       	ldi	r24, 0x08	; 8
    a8ec:	90 e0       	ldi	r25, 0x00	; 0
    a8ee:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(8, 22, strConfirmHandle);
    a8f2:	43 e5       	ldi	r20, 0x53	; 83
    a8f4:	52 e0       	ldi	r21, 0x02	; 2
    a8f6:	66 e1       	ldi	r22, 0x16	; 22
    a8f8:	70 e0       	ldi	r23, 0x00	; 0
    a8fa:	88 e0       	ldi	r24, 0x08	; 8
    a8fc:	90 e0       	ldi	r25, 0x00	; 0
    a8fe:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(8, 23, strCancelHandle);
    a902:	48 e4       	ldi	r20, 0x48	; 72
    a904:	52 e0       	ldi	r21, 0x02	; 2
    a906:	67 e1       	ldi	r22, 0x17	; 23
    a908:	70 e0       	ldi	r23, 0x00	; 0
    a90a:	88 e0       	ldi	r24, 0x08	; 8
    a90c:	90 e0       	ldi	r25, 0x00	; 0
    a90e:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>
	Print(8, 24, strChangeHandle);
    a912:	49 e3       	ldi	r20, 0x39	; 57
    a914:	52 e0       	ldi	r21, 0x02	; 2
    a916:	68 e1       	ldi	r22, 0x18	; 24
    a918:	70 e0       	ldi	r23, 0x00	; 0
    a91a:	88 e0       	ldi	r24, 0x08	; 8
    a91c:	90 e0       	ldi	r25, 0x00	; 0
}
    a91e:	df 91       	pop	r29
    a920:	cf 91       	pop	r28
    a922:	1f 91       	pop	r17
    a924:	0f 91       	pop	r16
    a926:	ff 90       	pop	r15
    a928:	ef 90       	pop	r14
    a92a:	df 90       	pop	r13
    a92c:	cf 90       	pop	r12
    a92e:	bf 90       	pop	r11
    a930:	af 90       	pop	r10
    a932:	9f 90       	pop	r9
    a934:	8f 90       	pop	r8
		PrintChar(20 + (i % 3), 8 + (i / 3), handles.data[i]);
	}
	Print(8, 21, strSelectHandle);
	Print(8, 22, strConfirmHandle);
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
    a936:	0c 94 ea 42 	jmp	0x85d4	; 0x85d4 <Print>

0000a93a <update_splash>:

void update_splash(JoyPadState* p1, JoyPadState* p2)
/*
 * Splash or title screen
 */
{
    a93a:	0f 93       	push	r16
    a93c:	cf 93       	push	r28
    a93e:	df 93       	push	r29
    a940:	ec 01       	movw	r28, r24
	// Render
	switch (game.selection)
    a942:	90 91 04 0a 	lds	r25, 0x0A04
    a946:	91 30       	cpi	r25, 0x01	; 1
    a948:	41 f0       	breq	.+16     	; 0xa95a <update_splash+0x20>
    a94a:	92 30       	cpi	r25, 0x02	; 2
    a94c:	51 f0       	breq	.+20     	; 0xa962 <update_splash+0x28>
    a94e:	91 11       	cpse	r25, r1
    a950:	0f c0       	rjmp	.+30     	; 0xa970 <update_splash+0x36>
	{
		case PVCPU:
			MoveSprite(0, 6*8, 13*8, 1, 1);
    a952:	01 e0       	ldi	r16, 0x01	; 1
    a954:	21 e0       	ldi	r18, 0x01	; 1
    a956:	48 e6       	ldi	r20, 0x68	; 104
    a958:	07 c0       	rjmp	.+14     	; 0xa968 <update_splash+0x2e>
			break;
		case PVP:
			MoveSprite(0, 6*8, 14*8, 1, 1);
    a95a:	01 e0       	ldi	r16, 0x01	; 1
    a95c:	21 e0       	ldi	r18, 0x01	; 1
    a95e:	40 e7       	ldi	r20, 0x70	; 112
    a960:	03 c0       	rjmp	.+6      	; 0xa968 <update_splash+0x2e>
			break;
		case TR:
			MoveSprite(0, 6*8, 15*8, 1, 1);
    a962:	01 e0       	ldi	r16, 0x01	; 1
    a964:	21 e0       	ldi	r18, 0x01	; 1
    a966:	48 e7       	ldi	r20, 0x78	; 120
    a968:	60 e3       	ldi	r22, 0x30	; 48
    a96a:	80 e0       	ldi	r24, 0x00	; 0
    a96c:	0e 94 3a 42 	call	0x8474	; 0x8474 <MoveSprite>
			break;
	}
	Print(9, 21, strSelectHandle);
    a970:	4f e5       	ldi	r20, 0x5F	; 95
    a972:	52 e0       	ldi	r21, 0x02	; 2
    a974:	65 e1       	ldi	r22, 0x15	; 21
    a976:	70 e0       	ldi	r23, 0x00	; 0
    a978:	89 e0       	ldi	r24, 0x09	; 9
    a97a:	90 e0       	ldi	r25, 0x00	; 0
    a97c:	0e 94 ea 42 	call	0x85d4	; 0x85d4 <Print>

	// Update
	if (p1->pressed & BTN_UP)
    a980:	88 81       	ld	r24, Y
    a982:	99 81       	ldd	r25, Y+1	; 0x01
    a984:	84 ff       	sbrs	r24, 4
    a986:	08 c0       	rjmp	.+16     	; 0xa998 <update_splash+0x5e>
	{
		game.selection--;
    a988:	80 91 04 0a 	lds	r24, 0x0A04
    a98c:	81 50       	subi	r24, 0x01	; 1
		if (game.selection < PVCPU) game.selection = PVCPU;
    a98e:	87 ff       	sbrs	r24, 7
    a990:	0b c0       	rjmp	.+22     	; 0xa9a8 <update_splash+0x6e>
    a992:	10 92 04 0a 	sts	0x0A04, r1
    a996:	2d c0       	rjmp	.+90     	; 0xa9f2 <update_splash+0xb8>
		//TriggerFx(PATCH_NAVIGATE, 0xff, true);
		//TriggerNote(PCM_CHANNEL,PATCH_NAVIGATE,23,0xcf);
	}
	else if (p1->pressed & BTN_DOWN)
    a998:	85 ff       	sbrs	r24, 5
    a99a:	09 c0       	rjmp	.+18     	; 0xa9ae <update_splash+0x74>
	{
		game.selection++;
    a99c:	80 91 04 0a 	lds	r24, 0x0A04
    a9a0:	8f 5f       	subi	r24, 0xFF	; 255
		if (game.selection > TR) game.selection = TR;
    a9a2:	83 30       	cpi	r24, 0x03	; 3
    a9a4:	0c f0       	brlt	.+2      	; 0xa9a8 <update_splash+0x6e>
    a9a6:	82 e0       	ldi	r24, 0x02	; 2
    a9a8:	80 93 04 0a 	sts	0x0A04, r24
    a9ac:	22 c0       	rjmp	.+68     	; 0xa9f2 <update_splash+0xb8>
		//TriggerFx(PATCH_NAVIGATE, 0xff, true);
		//TriggerNote(PCM_CHANNEL,PATCH_NAVIGATE,23,0xcf);
	}
	else if ((p1->pressed & BTN_A) && ((game.selection == PVCPU) || (game.selection == PVP)))
    a9ae:	90 ff       	sbrs	r25, 0
    a9b0:	20 c0       	rjmp	.+64     	; 0xa9f2 <update_splash+0xb8>
    a9b2:	80 91 04 0a 	lds	r24, 0x0A04
    a9b6:	82 30       	cpi	r24, 0x02	; 2
    a9b8:	78 f4       	brcc	.+30     	; 0xa9d8 <update_splash+0x9e>
	{
		p1s.select_state = SELECTING;
    a9ba:	10 92 6f 09 	sts	0x096F, r1
		p2s.select_state = SELECTING;
    a9be:	10 92 69 09 	sts	0x0969, r1
		fade_through();
    a9c2:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <fade_through>
		load_eeprom(&handles);
    a9c6:	84 e2       	ldi	r24, 0x24	; 36
    a9c8:	91 e0       	ldi	r25, 0x01	; 1
    a9ca:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <load_eeprom>
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
		return;
	}
}
    a9ce:	df 91       	pop	r29
    a9d0:	cf 91       	pop	r28
    a9d2:	0f 91       	pop	r16
	{
		p1s.select_state = SELECTING;
		p2s.select_state = SELECTING;
		fade_through();
		load_eeprom(&handles);
		load_handle_select();
    a9d4:	0c 94 0b 54 	jmp	0xa816	; 0xa816 <load_handle_select>
		return;
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
    a9d8:	82 30       	cpi	r24, 0x02	; 2
    a9da:	59 f4       	brne	.+22     	; 0xa9f2 <update_splash+0xb8>
	{
		fade_through();
    a9dc:	0e 94 5c 46 	call	0x8cb8	; 0x8cb8 <fade_through>
		load_eeprom(&scores);
    a9e0:	84 e0       	ldi	r24, 0x04	; 4
    a9e2:	91 e0       	ldi	r25, 0x01	; 1
    a9e4:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <load_eeprom>
		load_tank_rank();
		return;
	}
}
    a9e8:	df 91       	pop	r29
    a9ea:	cf 91       	pop	r28
    a9ec:	0f 91       	pop	r16
	}
	else if ((p1->pressed & BTN_A) && (game.selection == TR))
	{
		fade_through();
		load_eeprom(&scores);
		load_tank_rank();
    a9ee:	0c 94 a6 4f 	jmp	0x9f4c	; 0x9f4c <load_tank_rank>
		return;
	}
}
    a9f2:	df 91       	pop	r29
    a9f4:	cf 91       	pop	r28
    a9f6:	0f 91       	pop	r16
    a9f8:	08 95       	ret

0000a9fa <update_handle_select>:
	Print(8, 23, strCancelHandle);
	Print(8, 24, strChangeHandle);
}

void update_handle_select(JoyPadState* p1, JoyPadState* p2)
{
    a9fa:	0f 93       	push	r16
    a9fc:	1f 93       	push	r17
    a9fe:	cf 93       	push	r28
    aa00:	df 93       	push	r29
    aa02:	8c 01       	movw	r16, r24
    aa04:	eb 01       	movw	r28, r22
	u8 start_game = 0;

	// Render
	_handle_select_render_helper(&p1s, p1, 2, 8);
    aa06:	28 e0       	ldi	r18, 0x08	; 8
    aa08:	42 e0       	ldi	r20, 0x02	; 2
    aa0a:	bc 01       	movw	r22, r24
    aa0c:	8a e6       	ldi	r24, 0x6A	; 106
    aa0e:	99 e0       	ldi	r25, 0x09	; 9
    aa10:	0e 94 4d 53 	call	0xa69a	; 0xa69a <_handle_select_render_helper>
	if (game.selection == PVP)
    aa14:	80 91 04 0a 	lds	r24, 0x0A04
    aa18:	81 30       	cpi	r24, 0x01	; 1
    aa1a:	39 f4       	brne	.+14     	; 0xaa2a <update_handle_select+0x30>
	{
		_handle_select_render_helper(&p2s, p2, 19, 10);
    aa1c:	2a e0       	ldi	r18, 0x0A	; 10
    aa1e:	43 e1       	ldi	r20, 0x13	; 19
    aa20:	be 01       	movw	r22, r28
    aa22:	84 e6       	ldi	r24, 0x64	; 100
    aa24:	99 e0       	ldi	r25, 0x09	; 9
    aa26:	0e 94 4d 53 	call	0xa69a	; 0xa69a <_handle_select_render_helper>
	}

	// Update
	_handle_select_helper(&p1s, p1, &player1);
    aa2a:	4e e1       	ldi	r20, 0x1E	; 30
    aa2c:	5a e0       	ldi	r21, 0x0A	; 10
    aa2e:	b8 01       	movw	r22, r16
    aa30:	8a e6       	ldi	r24, 0x6A	; 106
    aa32:	99 e0       	ldi	r25, 0x09	; 9
    aa34:	0e 94 9d 52 	call	0xa53a	; 0xa53a <_handle_select_helper>
	if (p1s.select_state == CONFIRMED) start_game = 1;
    aa38:	10 91 6f 09 	lds	r17, 0x096F
	if (game.selection == PVP)
    aa3c:	80 91 04 0a 	lds	r24, 0x0A04
    aa40:	81 30       	cpi	r24, 0x01	; 1
    aa42:	19 f0       	breq	.+6      	; 0xaa4a <update_handle_select+0x50>
	{
		_handle_select_helper(&p2s, p2, &player2);
		if (p2s.select_state != CONFIRMED) start_game = 0;
	}
	if (start_game)
    aa44:	12 30       	cpi	r17, 0x02	; 2
    aa46:	69 f0       	breq	.+26     	; 0xaa62 <update_handle_select+0x68>
    aa48:	21 c0       	rjmp	.+66     	; 0xaa8c <update_handle_select+0x92>
	// Update
	_handle_select_helper(&p1s, p1, &player1);
	if (p1s.select_state == CONFIRMED) start_game = 1;
	if (game.selection == PVP)
	{
		_handle_select_helper(&p2s, p2, &player2);
    aa4a:	4f e8       	ldi	r20, 0x8F	; 143
    aa4c:	5d e0       	ldi	r21, 0x0D	; 13
    aa4e:	be 01       	movw	r22, r28
    aa50:	84 e6       	ldi	r24, 0x64	; 100
    aa52:	99 e0       	ldi	r25, 0x09	; 9
    aa54:	0e 94 9d 52 	call	0xa53a	; 0xa53a <_handle_select_helper>
		if (p2s.select_state != CONFIRMED) start_game = 0;
    aa58:	80 91 69 09 	lds	r24, 0x0969
    aa5c:	82 30       	cpi	r24, 0x02	; 2
    aa5e:	b1 f4       	brne	.+44     	; 0xaa8c <update_handle_select+0x92>
    aa60:	f1 cf       	rjmp	.-30     	; 0xaa44 <update_handle_select+0x4a>
	}
	if (start_game)
	{
		if (game.selection == PVCPU)
    aa62:	80 91 04 0a 	lds	r24, 0x0A04
    aa66:	81 11       	cpse	r24, r1
    aa68:	0a c0       	rjmp	.+20     	; 0xaa7e <update_handle_select+0x84>
		{
			player2.handle_id = 9;
    aa6a:	89 e0       	ldi	r24, 0x09	; 9
    aa6c:	80 93 99 0d 	sts	0x0D99, r24
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
    aa70:	43 e0       	ldi	r20, 0x03	; 3
    aa72:	61 e4       	ldi	r22, 0x41	; 65
    aa74:	71 e0       	ldi	r23, 0x01	; 1
    aa76:	8a e9       	ldi	r24, 0x9A	; 154
    aa78:	9d e0       	ldi	r25, 0x0D	; 13
    aa7a:	0e 94 d3 43 	call	0x87a6	; 0x87a6 <LBCopyChars>
		}
		level_transition(0);
    aa7e:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    aa80:	df 91       	pop	r29
    aa82:	cf 91       	pop	r28
    aa84:	1f 91       	pop	r17
    aa86:	0f 91       	pop	r16
		if (game.selection == PVCPU)
		{
			player2.handle_id = 9;
			LBCopyChars(player2.handle, &handles.data[9*3], 3);
		}
		level_transition(0);
    aa88:	0c 94 4a 4f 	jmp	0x9e94	; 0x9e94 <level_transition>
	}
}
    aa8c:	df 91       	pop	r29
    aa8e:	cf 91       	pop	r28
    aa90:	1f 91       	pop	r17
    aa92:	0f 91       	pop	r16
    aa94:	08 95       	ret

0000aa96 <main>:

int main()
{
	// Initialize
	InitMusicPlayer(my_patches);
    aa96:	86 e1       	ldi	r24, 0x16	; 22
    aa98:	90 e2       	ldi	r25, 0x20	; 32
    aa9a:	0e 94 46 37 	call	0x6e8c	; 0x6e8c <InitMusicPlayer>
	TriggerNote(PCM_CHANNEL,PATCH_NAVIGATE,23,0xcf);
    aa9e:	2f ec       	ldi	r18, 0xCF	; 207
    aaa0:	47 e1       	ldi	r20, 0x17	; 23
    aaa2:	60 e0       	ldi	r22, 0x00	; 0
    aaa4:	84 e0       	ldi	r24, 0x04	; 4
    aaa6:	0e 94 3b 38 	call	0x7076	; 0x7076 <TriggerNote>
	SetTileTable(tiles_data);
    aaaa:	8f e9       	ldi	r24, 0x9F	; 159
    aaac:	9e e3       	ldi	r25, 0x3E	; 62
    aaae:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <SetTileTable>
	SetSpritesTileTable(sprites_data);
    aab2:	8f e9       	ldi	r24, 0x9F	; 159
    aab4:	92 e3       	ldi	r25, 0x32	; 50
    aab6:	0e 94 22 35 	call	0x6a44	; 0x6a44 <SetSpritesTileTable>
	SetFontTilesIndex(TILES_DATA_SIZE);
    aaba:	8f e2       	ldi	r24, 0x2F	; 47
    aabc:	0e 94 43 35 	call	0x6a86	; 0x6a86 <SetFontTilesIndex>
	FadeIn(FRAMES_PER_FADE, false);
    aac0:	60 e0       	ldi	r22, 0x00	; 0
    aac2:	83 e0       	ldi	r24, 0x03	; 3
    aac4:	0e 94 2d 43 	call	0x865a	; 0x865a <FadeIn>
	ClearVram();
    aac8:	0e 94 27 35 	call	0x6a4e	; 0x6a4e <ClearVram>
	init_game_state();
    aacc:	0e 94 18 46 	call	0x8c30	; 0x8c30 <init_game_state>
	init_tile_animations(&tile_animations);
    aad0:	85 e0       	ldi	r24, 0x05	; 5
    aad2:	9a e0       	ldi	r25, 0x0A	; 10
    aad4:	0e 94 3c 45 	call	0x8a78	; 0x8a78 <init_tile_animations>
	load_splash();
    aad8:	0e 94 76 4f 	call	0x9eec	; 0x9eec <load_splash>
	
	while (1)
	{
		WaitVsync(1);
    aadc:	81 e0       	ldi	r24, 0x01	; 1
    aade:	90 e0       	ldi	r25, 0x00	; 0
    aae0:	0e 94 08 43 	call	0x8610	; 0x8610 <WaitVsync>
		LBGetJoyPadState(&p1, &p2);
    aae4:	6b ef       	ldi	r22, 0xFB	; 251
    aae6:	79 e0       	ldi	r23, 0x09	; 9
    aae8:	8a e9       	ldi	r24, 0x9A	; 154
    aaea:	9a e0       	ldi	r25, 0x0A	; 10
    aaec:	0e 94 91 43 	call	0x8722	; 0x8722 <LBGetJoyPadState>
		switch (game.current_screen)
    aaf0:	80 91 01 0a 	lds	r24, 0x0A01
    aaf4:	81 30       	cpi	r24, 0x01	; 1
    aaf6:	99 f0       	breq	.+38     	; 0xab1e <main+0x88>
    aaf8:	58 f0       	brcs	.+22     	; 0xab10 <main+0x7a>
    aafa:	82 30       	cpi	r24, 0x02	; 2
    aafc:	b9 f0       	breq	.+46     	; 0xab2c <main+0x96>
    aafe:	83 30       	cpi	r24, 0x03	; 3
    ab00:	69 f7       	brne	.-38     	; 0xaadc <main+0x46>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
				break;
			case LEVEL:
				/* p2 should be replaced by AI input for Player v CPU */
				update_level(&p1, &p2);
    ab02:	6b ef       	ldi	r22, 0xFB	; 251
    ab04:	79 e0       	ldi	r23, 0x09	; 9
    ab06:	8a e9       	ldi	r24, 0x9A	; 154
    ab08:	9a e0       	ldi	r25, 0x0A	; 10
    ab0a:	0e 94 01 52 	call	0xa402	; 0xa402 <update_level>
				break;
    ab0e:	e6 cf       	rjmp	.-52     	; 0xaadc <main+0x46>
		WaitVsync(1);
		LBGetJoyPadState(&p1, &p2);
		switch (game.current_screen)
		{
			case SPLASH:
				update_splash(&p1, &p2);
    ab10:	6b ef       	ldi	r22, 0xFB	; 251
    ab12:	79 e0       	ldi	r23, 0x09	; 9
    ab14:	8a e9       	ldi	r24, 0x9A	; 154
    ab16:	9a e0       	ldi	r25, 0x0A	; 10
    ab18:	0e 94 9d 54 	call	0xa93a	; 0xa93a <update_splash>
				break;
    ab1c:	df cf       	rjmp	.-66     	; 0xaadc <main+0x46>
			case TANK_RANK:
				update_tank_rank(&p1, &p2);
    ab1e:	6b ef       	ldi	r22, 0xFB	; 251
    ab20:	79 e0       	ldi	r23, 0x09	; 9
    ab22:	8a e9       	ldi	r24, 0x9A	; 154
    ab24:	9a e0       	ldi	r25, 0x0A	; 10
    ab26:	0e 94 93 52 	call	0xa526	; 0xa526 <update_tank_rank>
				break;
    ab2a:	d8 cf       	rjmp	.-80     	; 0xaadc <main+0x46>
			case HANDLE_SELECT:
				update_handle_select(&p1, &p2);
    ab2c:	6b ef       	ldi	r22, 0xFB	; 251
    ab2e:	79 e0       	ldi	r23, 0x09	; 9
    ab30:	8a e9       	ldi	r24, 0x9A	; 154
    ab32:	9a e0       	ldi	r25, 0x0A	; 10
    ab34:	0e 94 fd 54 	call	0xa9fa	; 0xa9fa <update_handle_select>
				break;
    ab38:	d1 cf       	rjmp	.-94     	; 0xaadc <main+0x46>

0000ab3a <__udivmodqi4>:
    ab3a:	99 1b       	sub	r25, r25
    ab3c:	79 e0       	ldi	r23, 0x09	; 9
    ab3e:	04 c0       	rjmp	.+8      	; 0xab48 <__udivmodqi4_ep>

0000ab40 <__udivmodqi4_loop>:
    ab40:	99 1f       	adc	r25, r25
    ab42:	96 17       	cp	r25, r22
    ab44:	08 f0       	brcs	.+2      	; 0xab48 <__udivmodqi4_ep>
    ab46:	96 1b       	sub	r25, r22

0000ab48 <__udivmodqi4_ep>:
    ab48:	88 1f       	adc	r24, r24
    ab4a:	7a 95       	dec	r23
    ab4c:	c9 f7       	brne	.-14     	; 0xab40 <__udivmodqi4_loop>
    ab4e:	80 95       	com	r24
    ab50:	08 95       	ret

0000ab52 <__udivmodhi4>:
    ab52:	aa 1b       	sub	r26, r26
    ab54:	bb 1b       	sub	r27, r27
    ab56:	51 e1       	ldi	r21, 0x11	; 17
    ab58:	07 c0       	rjmp	.+14     	; 0xab68 <__udivmodhi4_ep>

0000ab5a <__udivmodhi4_loop>:
    ab5a:	aa 1f       	adc	r26, r26
    ab5c:	bb 1f       	adc	r27, r27
    ab5e:	a6 17       	cp	r26, r22
    ab60:	b7 07       	cpc	r27, r23
    ab62:	10 f0       	brcs	.+4      	; 0xab68 <__udivmodhi4_ep>
    ab64:	a6 1b       	sub	r26, r22
    ab66:	b7 0b       	sbc	r27, r23

0000ab68 <__udivmodhi4_ep>:
    ab68:	88 1f       	adc	r24, r24
    ab6a:	99 1f       	adc	r25, r25
    ab6c:	5a 95       	dec	r21
    ab6e:	a9 f7       	brne	.-22     	; 0xab5a <__udivmodhi4_loop>
    ab70:	80 95       	com	r24
    ab72:	90 95       	com	r25
    ab74:	bc 01       	movw	r22, r24
    ab76:	cd 01       	movw	r24, r26
    ab78:	08 95       	ret

0000ab7a <__divmodhi4>:
    ab7a:	97 fb       	bst	r25, 7
    ab7c:	07 2e       	mov	r0, r23
    ab7e:	16 f4       	brtc	.+4      	; 0xab84 <__divmodhi4+0xa>
    ab80:	00 94       	com	r0
    ab82:	07 d0       	rcall	.+14     	; 0xab92 <__divmodhi4_neg1>
    ab84:	77 fd       	sbrc	r23, 7
    ab86:	09 d0       	rcall	.+18     	; 0xab9a <__divmodhi4_neg2>
    ab88:	0e 94 a9 55 	call	0xab52	; 0xab52 <__udivmodhi4>
    ab8c:	07 fc       	sbrc	r0, 7
    ab8e:	05 d0       	rcall	.+10     	; 0xab9a <__divmodhi4_neg2>
    ab90:	3e f4       	brtc	.+14     	; 0xaba0 <__divmodhi4_exit>

0000ab92 <__divmodhi4_neg1>:
    ab92:	90 95       	com	r25
    ab94:	81 95       	neg	r24
    ab96:	9f 4f       	sbci	r25, 0xFF	; 255
    ab98:	08 95       	ret

0000ab9a <__divmodhi4_neg2>:
    ab9a:	70 95       	com	r23
    ab9c:	61 95       	neg	r22
    ab9e:	7f 4f       	sbci	r23, 0xFF	; 255

0000aba0 <__divmodhi4_exit>:
    aba0:	08 95       	ret

0000aba2 <__tablejump2__>:
    aba2:	ee 0f       	add	r30, r30
    aba4:	ff 1f       	adc	r31, r31
    aba6:	05 90       	lpm	r0, Z+
    aba8:	f4 91       	lpm	r31, Z
    abaa:	e0 2d       	mov	r30, r0
    abac:	09 94       	ijmp

0000abae <__subsf3>:
    abae:	50 58       	subi	r21, 0x80	; 128

0000abb0 <__addsf3>:
    abb0:	bb 27       	eor	r27, r27
    abb2:	aa 27       	eor	r26, r26
    abb4:	0e d0       	rcall	.+28     	; 0xabd2 <__addsf3x>
    abb6:	70 c1       	rjmp	.+736    	; 0xae98 <__fp_round>
    abb8:	61 d1       	rcall	.+706    	; 0xae7c <__fp_pscA>
    abba:	30 f0       	brcs	.+12     	; 0xabc8 <__addsf3+0x18>
    abbc:	66 d1       	rcall	.+716    	; 0xae8a <__fp_pscB>
    abbe:	20 f0       	brcs	.+8      	; 0xabc8 <__addsf3+0x18>
    abc0:	31 f4       	brne	.+12     	; 0xabce <__addsf3+0x1e>
    abc2:	9f 3f       	cpi	r25, 0xFF	; 255
    abc4:	11 f4       	brne	.+4      	; 0xabca <__addsf3+0x1a>
    abc6:	1e f4       	brtc	.+6      	; 0xabce <__addsf3+0x1e>
    abc8:	56 c1       	rjmp	.+684    	; 0xae76 <__fp_nan>
    abca:	0e f4       	brtc	.+2      	; 0xabce <__addsf3+0x1e>
    abcc:	e0 95       	com	r30
    abce:	e7 fb       	bst	r30, 7
    abd0:	4c c1       	rjmp	.+664    	; 0xae6a <__fp_inf>

0000abd2 <__addsf3x>:
    abd2:	e9 2f       	mov	r30, r25
    abd4:	72 d1       	rcall	.+740    	; 0xaeba <__fp_split3>
    abd6:	80 f3       	brcs	.-32     	; 0xabb8 <__addsf3+0x8>
    abd8:	ba 17       	cp	r27, r26
    abda:	62 07       	cpc	r22, r18
    abdc:	73 07       	cpc	r23, r19
    abde:	84 07       	cpc	r24, r20
    abe0:	95 07       	cpc	r25, r21
    abe2:	18 f0       	brcs	.+6      	; 0xabea <__addsf3x+0x18>
    abe4:	71 f4       	brne	.+28     	; 0xac02 <__addsf3x+0x30>
    abe6:	9e f5       	brtc	.+102    	; 0xac4e <__addsf3x+0x7c>
    abe8:	8a c1       	rjmp	.+788    	; 0xaefe <__fp_zero>
    abea:	0e f4       	brtc	.+2      	; 0xabee <__addsf3x+0x1c>
    abec:	e0 95       	com	r30
    abee:	0b 2e       	mov	r0, r27
    abf0:	ba 2f       	mov	r27, r26
    abf2:	a0 2d       	mov	r26, r0
    abf4:	0b 01       	movw	r0, r22
    abf6:	b9 01       	movw	r22, r18
    abf8:	90 01       	movw	r18, r0
    abfa:	0c 01       	movw	r0, r24
    abfc:	ca 01       	movw	r24, r20
    abfe:	a0 01       	movw	r20, r0
    ac00:	11 24       	eor	r1, r1
    ac02:	ff 27       	eor	r31, r31
    ac04:	59 1b       	sub	r21, r25
    ac06:	99 f0       	breq	.+38     	; 0xac2e <__addsf3x+0x5c>
    ac08:	59 3f       	cpi	r21, 0xF9	; 249
    ac0a:	50 f4       	brcc	.+20     	; 0xac20 <__addsf3x+0x4e>
    ac0c:	50 3e       	cpi	r21, 0xE0	; 224
    ac0e:	68 f1       	brcs	.+90     	; 0xac6a <__addsf3x+0x98>
    ac10:	1a 16       	cp	r1, r26
    ac12:	f0 40       	sbci	r31, 0x00	; 0
    ac14:	a2 2f       	mov	r26, r18
    ac16:	23 2f       	mov	r18, r19
    ac18:	34 2f       	mov	r19, r20
    ac1a:	44 27       	eor	r20, r20
    ac1c:	58 5f       	subi	r21, 0xF8	; 248
    ac1e:	f3 cf       	rjmp	.-26     	; 0xac06 <__addsf3x+0x34>
    ac20:	46 95       	lsr	r20
    ac22:	37 95       	ror	r19
    ac24:	27 95       	ror	r18
    ac26:	a7 95       	ror	r26
    ac28:	f0 40       	sbci	r31, 0x00	; 0
    ac2a:	53 95       	inc	r21
    ac2c:	c9 f7       	brne	.-14     	; 0xac20 <__addsf3x+0x4e>
    ac2e:	7e f4       	brtc	.+30     	; 0xac4e <__addsf3x+0x7c>
    ac30:	1f 16       	cp	r1, r31
    ac32:	ba 0b       	sbc	r27, r26
    ac34:	62 0b       	sbc	r22, r18
    ac36:	73 0b       	sbc	r23, r19
    ac38:	84 0b       	sbc	r24, r20
    ac3a:	ba f0       	brmi	.+46     	; 0xac6a <__addsf3x+0x98>
    ac3c:	91 50       	subi	r25, 0x01	; 1
    ac3e:	a1 f0       	breq	.+40     	; 0xac68 <__addsf3x+0x96>
    ac40:	ff 0f       	add	r31, r31
    ac42:	bb 1f       	adc	r27, r27
    ac44:	66 1f       	adc	r22, r22
    ac46:	77 1f       	adc	r23, r23
    ac48:	88 1f       	adc	r24, r24
    ac4a:	c2 f7       	brpl	.-16     	; 0xac3c <__addsf3x+0x6a>
    ac4c:	0e c0       	rjmp	.+28     	; 0xac6a <__addsf3x+0x98>
    ac4e:	ba 0f       	add	r27, r26
    ac50:	62 1f       	adc	r22, r18
    ac52:	73 1f       	adc	r23, r19
    ac54:	84 1f       	adc	r24, r20
    ac56:	48 f4       	brcc	.+18     	; 0xac6a <__addsf3x+0x98>
    ac58:	87 95       	ror	r24
    ac5a:	77 95       	ror	r23
    ac5c:	67 95       	ror	r22
    ac5e:	b7 95       	ror	r27
    ac60:	f7 95       	ror	r31
    ac62:	9e 3f       	cpi	r25, 0xFE	; 254
    ac64:	08 f0       	brcs	.+2      	; 0xac68 <__addsf3x+0x96>
    ac66:	b3 cf       	rjmp	.-154    	; 0xabce <__addsf3+0x1e>
    ac68:	93 95       	inc	r25
    ac6a:	88 0f       	add	r24, r24
    ac6c:	08 f0       	brcs	.+2      	; 0xac70 <__addsf3x+0x9e>
    ac6e:	99 27       	eor	r25, r25
    ac70:	ee 0f       	add	r30, r30
    ac72:	97 95       	ror	r25
    ac74:	87 95       	ror	r24
    ac76:	08 95       	ret

0000ac78 <__cmpsf2>:
    ac78:	d4 d0       	rcall	.+424    	; 0xae22 <__fp_cmp>
    ac7a:	08 f4       	brcc	.+2      	; 0xac7e <__cmpsf2+0x6>
    ac7c:	81 e0       	ldi	r24, 0x01	; 1
    ac7e:	08 95       	ret

0000ac80 <__divsf3>:
    ac80:	0c d0       	rcall	.+24     	; 0xac9a <__divsf3x>
    ac82:	0a c1       	rjmp	.+532    	; 0xae98 <__fp_round>
    ac84:	02 d1       	rcall	.+516    	; 0xae8a <__fp_pscB>
    ac86:	40 f0       	brcs	.+16     	; 0xac98 <__divsf3+0x18>
    ac88:	f9 d0       	rcall	.+498    	; 0xae7c <__fp_pscA>
    ac8a:	30 f0       	brcs	.+12     	; 0xac98 <__divsf3+0x18>
    ac8c:	21 f4       	brne	.+8      	; 0xac96 <__divsf3+0x16>
    ac8e:	5f 3f       	cpi	r21, 0xFF	; 255
    ac90:	19 f0       	breq	.+6      	; 0xac98 <__divsf3+0x18>
    ac92:	eb c0       	rjmp	.+470    	; 0xae6a <__fp_inf>
    ac94:	51 11       	cpse	r21, r1
    ac96:	34 c1       	rjmp	.+616    	; 0xaf00 <__fp_szero>
    ac98:	ee c0       	rjmp	.+476    	; 0xae76 <__fp_nan>

0000ac9a <__divsf3x>:
    ac9a:	0f d1       	rcall	.+542    	; 0xaeba <__fp_split3>
    ac9c:	98 f3       	brcs	.-26     	; 0xac84 <__divsf3+0x4>

0000ac9e <__divsf3_pse>:
    ac9e:	99 23       	and	r25, r25
    aca0:	c9 f3       	breq	.-14     	; 0xac94 <__divsf3+0x14>
    aca2:	55 23       	and	r21, r21
    aca4:	b1 f3       	breq	.-20     	; 0xac92 <__divsf3+0x12>
    aca6:	95 1b       	sub	r25, r21
    aca8:	55 0b       	sbc	r21, r21
    acaa:	bb 27       	eor	r27, r27
    acac:	aa 27       	eor	r26, r26
    acae:	62 17       	cp	r22, r18
    acb0:	73 07       	cpc	r23, r19
    acb2:	84 07       	cpc	r24, r20
    acb4:	38 f0       	brcs	.+14     	; 0xacc4 <__divsf3_pse+0x26>
    acb6:	9f 5f       	subi	r25, 0xFF	; 255
    acb8:	5f 4f       	sbci	r21, 0xFF	; 255
    acba:	22 0f       	add	r18, r18
    acbc:	33 1f       	adc	r19, r19
    acbe:	44 1f       	adc	r20, r20
    acc0:	aa 1f       	adc	r26, r26
    acc2:	a9 f3       	breq	.-22     	; 0xacae <__divsf3_pse+0x10>
    acc4:	33 d0       	rcall	.+102    	; 0xad2c <__divsf3_pse+0x8e>
    acc6:	0e 2e       	mov	r0, r30
    acc8:	3a f0       	brmi	.+14     	; 0xacd8 <__divsf3_pse+0x3a>
    acca:	e0 e8       	ldi	r30, 0x80	; 128
    accc:	30 d0       	rcall	.+96     	; 0xad2e <__divsf3_pse+0x90>
    acce:	91 50       	subi	r25, 0x01	; 1
    acd0:	50 40       	sbci	r21, 0x00	; 0
    acd2:	e6 95       	lsr	r30
    acd4:	00 1c       	adc	r0, r0
    acd6:	ca f7       	brpl	.-14     	; 0xacca <__divsf3_pse+0x2c>
    acd8:	29 d0       	rcall	.+82     	; 0xad2c <__divsf3_pse+0x8e>
    acda:	fe 2f       	mov	r31, r30
    acdc:	27 d0       	rcall	.+78     	; 0xad2c <__divsf3_pse+0x8e>
    acde:	66 0f       	add	r22, r22
    ace0:	77 1f       	adc	r23, r23
    ace2:	88 1f       	adc	r24, r24
    ace4:	bb 1f       	adc	r27, r27
    ace6:	26 17       	cp	r18, r22
    ace8:	37 07       	cpc	r19, r23
    acea:	48 07       	cpc	r20, r24
    acec:	ab 07       	cpc	r26, r27
    acee:	b0 e8       	ldi	r27, 0x80	; 128
    acf0:	09 f0       	breq	.+2      	; 0xacf4 <__divsf3_pse+0x56>
    acf2:	bb 0b       	sbc	r27, r27
    acf4:	80 2d       	mov	r24, r0
    acf6:	bf 01       	movw	r22, r30
    acf8:	ff 27       	eor	r31, r31
    acfa:	93 58       	subi	r25, 0x83	; 131
    acfc:	5f 4f       	sbci	r21, 0xFF	; 255
    acfe:	2a f0       	brmi	.+10     	; 0xad0a <__divsf3_pse+0x6c>
    ad00:	9e 3f       	cpi	r25, 0xFE	; 254
    ad02:	51 05       	cpc	r21, r1
    ad04:	68 f0       	brcs	.+26     	; 0xad20 <__divsf3_pse+0x82>
    ad06:	b1 c0       	rjmp	.+354    	; 0xae6a <__fp_inf>
    ad08:	fb c0       	rjmp	.+502    	; 0xaf00 <__fp_szero>
    ad0a:	5f 3f       	cpi	r21, 0xFF	; 255
    ad0c:	ec f3       	brlt	.-6      	; 0xad08 <__divsf3_pse+0x6a>
    ad0e:	98 3e       	cpi	r25, 0xE8	; 232
    ad10:	dc f3       	brlt	.-10     	; 0xad08 <__divsf3_pse+0x6a>
    ad12:	86 95       	lsr	r24
    ad14:	77 95       	ror	r23
    ad16:	67 95       	ror	r22
    ad18:	b7 95       	ror	r27
    ad1a:	f7 95       	ror	r31
    ad1c:	9f 5f       	subi	r25, 0xFF	; 255
    ad1e:	c9 f7       	brne	.-14     	; 0xad12 <__divsf3_pse+0x74>
    ad20:	88 0f       	add	r24, r24
    ad22:	91 1d       	adc	r25, r1
    ad24:	96 95       	lsr	r25
    ad26:	87 95       	ror	r24
    ad28:	97 f9       	bld	r25, 7
    ad2a:	08 95       	ret
    ad2c:	e1 e0       	ldi	r30, 0x01	; 1
    ad2e:	66 0f       	add	r22, r22
    ad30:	77 1f       	adc	r23, r23
    ad32:	88 1f       	adc	r24, r24
    ad34:	bb 1f       	adc	r27, r27
    ad36:	62 17       	cp	r22, r18
    ad38:	73 07       	cpc	r23, r19
    ad3a:	84 07       	cpc	r24, r20
    ad3c:	ba 07       	cpc	r27, r26
    ad3e:	20 f0       	brcs	.+8      	; 0xad48 <__divsf3_pse+0xaa>
    ad40:	62 1b       	sub	r22, r18
    ad42:	73 0b       	sbc	r23, r19
    ad44:	84 0b       	sbc	r24, r20
    ad46:	ba 0b       	sbc	r27, r26
    ad48:	ee 1f       	adc	r30, r30
    ad4a:	88 f7       	brcc	.-30     	; 0xad2e <__divsf3_pse+0x90>
    ad4c:	e0 95       	com	r30
    ad4e:	08 95       	ret

0000ad50 <__fixunssfsi>:
    ad50:	bc d0       	rcall	.+376    	; 0xaeca <__fp_splitA>
    ad52:	88 f0       	brcs	.+34     	; 0xad76 <__fixunssfsi+0x26>
    ad54:	9f 57       	subi	r25, 0x7F	; 127
    ad56:	90 f0       	brcs	.+36     	; 0xad7c <__fixunssfsi+0x2c>
    ad58:	b9 2f       	mov	r27, r25
    ad5a:	99 27       	eor	r25, r25
    ad5c:	b7 51       	subi	r27, 0x17	; 23
    ad5e:	a0 f0       	brcs	.+40     	; 0xad88 <__fixunssfsi+0x38>
    ad60:	d1 f0       	breq	.+52     	; 0xad96 <__fixunssfsi+0x46>
    ad62:	66 0f       	add	r22, r22
    ad64:	77 1f       	adc	r23, r23
    ad66:	88 1f       	adc	r24, r24
    ad68:	99 1f       	adc	r25, r25
    ad6a:	1a f0       	brmi	.+6      	; 0xad72 <__fixunssfsi+0x22>
    ad6c:	ba 95       	dec	r27
    ad6e:	c9 f7       	brne	.-14     	; 0xad62 <__fixunssfsi+0x12>
    ad70:	12 c0       	rjmp	.+36     	; 0xad96 <__fixunssfsi+0x46>
    ad72:	b1 30       	cpi	r27, 0x01	; 1
    ad74:	81 f0       	breq	.+32     	; 0xad96 <__fixunssfsi+0x46>
    ad76:	c3 d0       	rcall	.+390    	; 0xaefe <__fp_zero>
    ad78:	b1 e0       	ldi	r27, 0x01	; 1
    ad7a:	08 95       	ret
    ad7c:	c0 c0       	rjmp	.+384    	; 0xaefe <__fp_zero>
    ad7e:	67 2f       	mov	r22, r23
    ad80:	78 2f       	mov	r23, r24
    ad82:	88 27       	eor	r24, r24
    ad84:	b8 5f       	subi	r27, 0xF8	; 248
    ad86:	39 f0       	breq	.+14     	; 0xad96 <__fixunssfsi+0x46>
    ad88:	b9 3f       	cpi	r27, 0xF9	; 249
    ad8a:	cc f3       	brlt	.-14     	; 0xad7e <__fixunssfsi+0x2e>
    ad8c:	86 95       	lsr	r24
    ad8e:	77 95       	ror	r23
    ad90:	67 95       	ror	r22
    ad92:	b3 95       	inc	r27
    ad94:	d9 f7       	brne	.-10     	; 0xad8c <__fixunssfsi+0x3c>
    ad96:	3e f4       	brtc	.+14     	; 0xada6 <__fixunssfsi+0x56>
    ad98:	90 95       	com	r25
    ad9a:	80 95       	com	r24
    ad9c:	70 95       	com	r23
    ad9e:	61 95       	neg	r22
    ada0:	7f 4f       	sbci	r23, 0xFF	; 255
    ada2:	8f 4f       	sbci	r24, 0xFF	; 255
    ada4:	9f 4f       	sbci	r25, 0xFF	; 255
    ada6:	08 95       	ret

0000ada8 <__floatunsisf>:
    ada8:	e8 94       	clt
    adaa:	09 c0       	rjmp	.+18     	; 0xadbe <__floatsisf+0x12>

0000adac <__floatsisf>:
    adac:	97 fb       	bst	r25, 7
    adae:	3e f4       	brtc	.+14     	; 0xadbe <__floatsisf+0x12>
    adb0:	90 95       	com	r25
    adb2:	80 95       	com	r24
    adb4:	70 95       	com	r23
    adb6:	61 95       	neg	r22
    adb8:	7f 4f       	sbci	r23, 0xFF	; 255
    adba:	8f 4f       	sbci	r24, 0xFF	; 255
    adbc:	9f 4f       	sbci	r25, 0xFF	; 255
    adbe:	99 23       	and	r25, r25
    adc0:	a9 f0       	breq	.+42     	; 0xadec <__floatsisf+0x40>
    adc2:	f9 2f       	mov	r31, r25
    adc4:	96 e9       	ldi	r25, 0x96	; 150
    adc6:	bb 27       	eor	r27, r27
    adc8:	93 95       	inc	r25
    adca:	f6 95       	lsr	r31
    adcc:	87 95       	ror	r24
    adce:	77 95       	ror	r23
    add0:	67 95       	ror	r22
    add2:	b7 95       	ror	r27
    add4:	f1 11       	cpse	r31, r1
    add6:	f8 cf       	rjmp	.-16     	; 0xadc8 <__floatsisf+0x1c>
    add8:	fa f4       	brpl	.+62     	; 0xae18 <__floatsisf+0x6c>
    adda:	bb 0f       	add	r27, r27
    addc:	11 f4       	brne	.+4      	; 0xade2 <__floatsisf+0x36>
    adde:	60 ff       	sbrs	r22, 0
    ade0:	1b c0       	rjmp	.+54     	; 0xae18 <__floatsisf+0x6c>
    ade2:	6f 5f       	subi	r22, 0xFF	; 255
    ade4:	7f 4f       	sbci	r23, 0xFF	; 255
    ade6:	8f 4f       	sbci	r24, 0xFF	; 255
    ade8:	9f 4f       	sbci	r25, 0xFF	; 255
    adea:	16 c0       	rjmp	.+44     	; 0xae18 <__floatsisf+0x6c>
    adec:	88 23       	and	r24, r24
    adee:	11 f0       	breq	.+4      	; 0xadf4 <__floatsisf+0x48>
    adf0:	96 e9       	ldi	r25, 0x96	; 150
    adf2:	11 c0       	rjmp	.+34     	; 0xae16 <__floatsisf+0x6a>
    adf4:	77 23       	and	r23, r23
    adf6:	21 f0       	breq	.+8      	; 0xae00 <__floatsisf+0x54>
    adf8:	9e e8       	ldi	r25, 0x8E	; 142
    adfa:	87 2f       	mov	r24, r23
    adfc:	76 2f       	mov	r23, r22
    adfe:	05 c0       	rjmp	.+10     	; 0xae0a <__floatsisf+0x5e>
    ae00:	66 23       	and	r22, r22
    ae02:	71 f0       	breq	.+28     	; 0xae20 <__floatsisf+0x74>
    ae04:	96 e8       	ldi	r25, 0x86	; 134
    ae06:	86 2f       	mov	r24, r22
    ae08:	70 e0       	ldi	r23, 0x00	; 0
    ae0a:	60 e0       	ldi	r22, 0x00	; 0
    ae0c:	2a f0       	brmi	.+10     	; 0xae18 <__floatsisf+0x6c>
    ae0e:	9a 95       	dec	r25
    ae10:	66 0f       	add	r22, r22
    ae12:	77 1f       	adc	r23, r23
    ae14:	88 1f       	adc	r24, r24
    ae16:	da f7       	brpl	.-10     	; 0xae0e <__floatsisf+0x62>
    ae18:	88 0f       	add	r24, r24
    ae1a:	96 95       	lsr	r25
    ae1c:	87 95       	ror	r24
    ae1e:	97 f9       	bld	r25, 7
    ae20:	08 95       	ret

0000ae22 <__fp_cmp>:
    ae22:	99 0f       	add	r25, r25
    ae24:	00 08       	sbc	r0, r0
    ae26:	55 0f       	add	r21, r21
    ae28:	aa 0b       	sbc	r26, r26
    ae2a:	e0 e8       	ldi	r30, 0x80	; 128
    ae2c:	fe ef       	ldi	r31, 0xFE	; 254
    ae2e:	16 16       	cp	r1, r22
    ae30:	17 06       	cpc	r1, r23
    ae32:	e8 07       	cpc	r30, r24
    ae34:	f9 07       	cpc	r31, r25
    ae36:	c0 f0       	brcs	.+48     	; 0xae68 <__fp_cmp+0x46>
    ae38:	12 16       	cp	r1, r18
    ae3a:	13 06       	cpc	r1, r19
    ae3c:	e4 07       	cpc	r30, r20
    ae3e:	f5 07       	cpc	r31, r21
    ae40:	98 f0       	brcs	.+38     	; 0xae68 <__fp_cmp+0x46>
    ae42:	62 1b       	sub	r22, r18
    ae44:	73 0b       	sbc	r23, r19
    ae46:	84 0b       	sbc	r24, r20
    ae48:	95 0b       	sbc	r25, r21
    ae4a:	39 f4       	brne	.+14     	; 0xae5a <__fp_cmp+0x38>
    ae4c:	0a 26       	eor	r0, r26
    ae4e:	61 f0       	breq	.+24     	; 0xae68 <__fp_cmp+0x46>
    ae50:	23 2b       	or	r18, r19
    ae52:	24 2b       	or	r18, r20
    ae54:	25 2b       	or	r18, r21
    ae56:	21 f4       	brne	.+8      	; 0xae60 <__fp_cmp+0x3e>
    ae58:	08 95       	ret
    ae5a:	0a 26       	eor	r0, r26
    ae5c:	09 f4       	brne	.+2      	; 0xae60 <__fp_cmp+0x3e>
    ae5e:	a1 40       	sbci	r26, 0x01	; 1
    ae60:	a6 95       	lsr	r26
    ae62:	8f ef       	ldi	r24, 0xFF	; 255
    ae64:	81 1d       	adc	r24, r1
    ae66:	81 1d       	adc	r24, r1
    ae68:	08 95       	ret

0000ae6a <__fp_inf>:
    ae6a:	97 f9       	bld	r25, 7
    ae6c:	9f 67       	ori	r25, 0x7F	; 127
    ae6e:	80 e8       	ldi	r24, 0x80	; 128
    ae70:	70 e0       	ldi	r23, 0x00	; 0
    ae72:	60 e0       	ldi	r22, 0x00	; 0
    ae74:	08 95       	ret

0000ae76 <__fp_nan>:
    ae76:	9f ef       	ldi	r25, 0xFF	; 255
    ae78:	80 ec       	ldi	r24, 0xC0	; 192
    ae7a:	08 95       	ret

0000ae7c <__fp_pscA>:
    ae7c:	00 24       	eor	r0, r0
    ae7e:	0a 94       	dec	r0
    ae80:	16 16       	cp	r1, r22
    ae82:	17 06       	cpc	r1, r23
    ae84:	18 06       	cpc	r1, r24
    ae86:	09 06       	cpc	r0, r25
    ae88:	08 95       	ret

0000ae8a <__fp_pscB>:
    ae8a:	00 24       	eor	r0, r0
    ae8c:	0a 94       	dec	r0
    ae8e:	12 16       	cp	r1, r18
    ae90:	13 06       	cpc	r1, r19
    ae92:	14 06       	cpc	r1, r20
    ae94:	05 06       	cpc	r0, r21
    ae96:	08 95       	ret

0000ae98 <__fp_round>:
    ae98:	09 2e       	mov	r0, r25
    ae9a:	03 94       	inc	r0
    ae9c:	00 0c       	add	r0, r0
    ae9e:	11 f4       	brne	.+4      	; 0xaea4 <__fp_round+0xc>
    aea0:	88 23       	and	r24, r24
    aea2:	52 f0       	brmi	.+20     	; 0xaeb8 <__fp_round+0x20>
    aea4:	bb 0f       	add	r27, r27
    aea6:	40 f4       	brcc	.+16     	; 0xaeb8 <__fp_round+0x20>
    aea8:	bf 2b       	or	r27, r31
    aeaa:	11 f4       	brne	.+4      	; 0xaeb0 <__fp_round+0x18>
    aeac:	60 ff       	sbrs	r22, 0
    aeae:	04 c0       	rjmp	.+8      	; 0xaeb8 <__fp_round+0x20>
    aeb0:	6f 5f       	subi	r22, 0xFF	; 255
    aeb2:	7f 4f       	sbci	r23, 0xFF	; 255
    aeb4:	8f 4f       	sbci	r24, 0xFF	; 255
    aeb6:	9f 4f       	sbci	r25, 0xFF	; 255
    aeb8:	08 95       	ret

0000aeba <__fp_split3>:
    aeba:	57 fd       	sbrc	r21, 7
    aebc:	90 58       	subi	r25, 0x80	; 128
    aebe:	44 0f       	add	r20, r20
    aec0:	55 1f       	adc	r21, r21
    aec2:	59 f0       	breq	.+22     	; 0xaeda <__fp_splitA+0x10>
    aec4:	5f 3f       	cpi	r21, 0xFF	; 255
    aec6:	71 f0       	breq	.+28     	; 0xaee4 <__fp_splitA+0x1a>
    aec8:	47 95       	ror	r20

0000aeca <__fp_splitA>:
    aeca:	88 0f       	add	r24, r24
    aecc:	97 fb       	bst	r25, 7
    aece:	99 1f       	adc	r25, r25
    aed0:	61 f0       	breq	.+24     	; 0xaeea <__fp_splitA+0x20>
    aed2:	9f 3f       	cpi	r25, 0xFF	; 255
    aed4:	79 f0       	breq	.+30     	; 0xaef4 <__fp_splitA+0x2a>
    aed6:	87 95       	ror	r24
    aed8:	08 95       	ret
    aeda:	12 16       	cp	r1, r18
    aedc:	13 06       	cpc	r1, r19
    aede:	14 06       	cpc	r1, r20
    aee0:	55 1f       	adc	r21, r21
    aee2:	f2 cf       	rjmp	.-28     	; 0xaec8 <__fp_split3+0xe>
    aee4:	46 95       	lsr	r20
    aee6:	f1 df       	rcall	.-30     	; 0xaeca <__fp_splitA>
    aee8:	08 c0       	rjmp	.+16     	; 0xaefa <__fp_splitA+0x30>
    aeea:	16 16       	cp	r1, r22
    aeec:	17 06       	cpc	r1, r23
    aeee:	18 06       	cpc	r1, r24
    aef0:	99 1f       	adc	r25, r25
    aef2:	f1 cf       	rjmp	.-30     	; 0xaed6 <__fp_splitA+0xc>
    aef4:	86 95       	lsr	r24
    aef6:	71 05       	cpc	r23, r1
    aef8:	61 05       	cpc	r22, r1
    aefa:	08 94       	sec
    aefc:	08 95       	ret

0000aefe <__fp_zero>:
    aefe:	e8 94       	clt

0000af00 <__fp_szero>:
    af00:	bb 27       	eor	r27, r27
    af02:	66 27       	eor	r22, r22
    af04:	77 27       	eor	r23, r23
    af06:	cb 01       	movw	r24, r22
    af08:	97 f9       	bld	r25, 7
    af0a:	08 95       	ret

0000af0c <__gesf2>:
    af0c:	8a df       	rcall	.-236    	; 0xae22 <__fp_cmp>
    af0e:	08 f4       	brcc	.+2      	; 0xaf12 <__gesf2+0x6>
    af10:	8f ef       	ldi	r24, 0xFF	; 255
    af12:	08 95       	ret

0000af14 <__mulsf3>:
    af14:	0b d0       	rcall	.+22     	; 0xaf2c <__mulsf3x>
    af16:	c0 cf       	rjmp	.-128    	; 0xae98 <__fp_round>
    af18:	b1 df       	rcall	.-158    	; 0xae7c <__fp_pscA>
    af1a:	28 f0       	brcs	.+10     	; 0xaf26 <__mulsf3+0x12>
    af1c:	b6 df       	rcall	.-148    	; 0xae8a <__fp_pscB>
    af1e:	18 f0       	brcs	.+6      	; 0xaf26 <__mulsf3+0x12>
    af20:	95 23       	and	r25, r21
    af22:	09 f0       	breq	.+2      	; 0xaf26 <__mulsf3+0x12>
    af24:	a2 cf       	rjmp	.-188    	; 0xae6a <__fp_inf>
    af26:	a7 cf       	rjmp	.-178    	; 0xae76 <__fp_nan>
    af28:	11 24       	eor	r1, r1
    af2a:	ea cf       	rjmp	.-44     	; 0xaf00 <__fp_szero>

0000af2c <__mulsf3x>:
    af2c:	c6 df       	rcall	.-116    	; 0xaeba <__fp_split3>
    af2e:	a0 f3       	brcs	.-24     	; 0xaf18 <__mulsf3+0x4>

0000af30 <__mulsf3_pse>:
    af30:	95 9f       	mul	r25, r21
    af32:	d1 f3       	breq	.-12     	; 0xaf28 <__mulsf3+0x14>
    af34:	95 0f       	add	r25, r21
    af36:	50 e0       	ldi	r21, 0x00	; 0
    af38:	55 1f       	adc	r21, r21
    af3a:	62 9f       	mul	r22, r18
    af3c:	f0 01       	movw	r30, r0
    af3e:	72 9f       	mul	r23, r18
    af40:	bb 27       	eor	r27, r27
    af42:	f0 0d       	add	r31, r0
    af44:	b1 1d       	adc	r27, r1
    af46:	63 9f       	mul	r22, r19
    af48:	aa 27       	eor	r26, r26
    af4a:	f0 0d       	add	r31, r0
    af4c:	b1 1d       	adc	r27, r1
    af4e:	aa 1f       	adc	r26, r26
    af50:	64 9f       	mul	r22, r20
    af52:	66 27       	eor	r22, r22
    af54:	b0 0d       	add	r27, r0
    af56:	a1 1d       	adc	r26, r1
    af58:	66 1f       	adc	r22, r22
    af5a:	82 9f       	mul	r24, r18
    af5c:	22 27       	eor	r18, r18
    af5e:	b0 0d       	add	r27, r0
    af60:	a1 1d       	adc	r26, r1
    af62:	62 1f       	adc	r22, r18
    af64:	73 9f       	mul	r23, r19
    af66:	b0 0d       	add	r27, r0
    af68:	a1 1d       	adc	r26, r1
    af6a:	62 1f       	adc	r22, r18
    af6c:	83 9f       	mul	r24, r19
    af6e:	a0 0d       	add	r26, r0
    af70:	61 1d       	adc	r22, r1
    af72:	22 1f       	adc	r18, r18
    af74:	74 9f       	mul	r23, r20
    af76:	33 27       	eor	r19, r19
    af78:	a0 0d       	add	r26, r0
    af7a:	61 1d       	adc	r22, r1
    af7c:	23 1f       	adc	r18, r19
    af7e:	84 9f       	mul	r24, r20
    af80:	60 0d       	add	r22, r0
    af82:	21 1d       	adc	r18, r1
    af84:	82 2f       	mov	r24, r18
    af86:	76 2f       	mov	r23, r22
    af88:	6a 2f       	mov	r22, r26
    af8a:	11 24       	eor	r1, r1
    af8c:	9f 57       	subi	r25, 0x7F	; 127
    af8e:	50 40       	sbci	r21, 0x00	; 0
    af90:	8a f0       	brmi	.+34     	; 0xafb4 <__mulsf3_pse+0x84>
    af92:	e1 f0       	breq	.+56     	; 0xafcc <__mulsf3_pse+0x9c>
    af94:	88 23       	and	r24, r24
    af96:	4a f0       	brmi	.+18     	; 0xafaa <__mulsf3_pse+0x7a>
    af98:	ee 0f       	add	r30, r30
    af9a:	ff 1f       	adc	r31, r31
    af9c:	bb 1f       	adc	r27, r27
    af9e:	66 1f       	adc	r22, r22
    afa0:	77 1f       	adc	r23, r23
    afa2:	88 1f       	adc	r24, r24
    afa4:	91 50       	subi	r25, 0x01	; 1
    afa6:	50 40       	sbci	r21, 0x00	; 0
    afa8:	a9 f7       	brne	.-22     	; 0xaf94 <__mulsf3_pse+0x64>
    afaa:	9e 3f       	cpi	r25, 0xFE	; 254
    afac:	51 05       	cpc	r21, r1
    afae:	70 f0       	brcs	.+28     	; 0xafcc <__mulsf3_pse+0x9c>
    afb0:	5c cf       	rjmp	.-328    	; 0xae6a <__fp_inf>
    afb2:	a6 cf       	rjmp	.-180    	; 0xaf00 <__fp_szero>
    afb4:	5f 3f       	cpi	r21, 0xFF	; 255
    afb6:	ec f3       	brlt	.-6      	; 0xafb2 <__mulsf3_pse+0x82>
    afb8:	98 3e       	cpi	r25, 0xE8	; 232
    afba:	dc f3       	brlt	.-10     	; 0xafb2 <__mulsf3_pse+0x82>
    afbc:	86 95       	lsr	r24
    afbe:	77 95       	ror	r23
    afc0:	67 95       	ror	r22
    afc2:	b7 95       	ror	r27
    afc4:	f7 95       	ror	r31
    afc6:	e7 95       	ror	r30
    afc8:	9f 5f       	subi	r25, 0xFF	; 255
    afca:	c1 f7       	brne	.-16     	; 0xafbc <__mulsf3_pse+0x8c>
    afcc:	fe 2b       	or	r31, r30
    afce:	88 0f       	add	r24, r24
    afd0:	91 1d       	adc	r25, r1
    afd2:	96 95       	lsr	r25
    afd4:	87 95       	ror	r24
    afd6:	97 f9       	bld	r25, 7
    afd8:	08 95       	ret

0000afda <_exit>:
    afda:	f8 94       	cli

0000afdc <__stop_program>:
    afdc:	ff cf       	rjmp	.-2      	; 0xafdc <__stop_program>
